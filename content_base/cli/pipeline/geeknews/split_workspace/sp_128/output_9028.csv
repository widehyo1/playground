"https://news.hada.io/topic?id=15600","청정 공기 난류 빈도 증가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            청정 공기 난류 빈도 증가?

    SODPROPS: 항공의 최고의 약어?

     * SODPROPS는 ""Simultaneous Opposite Direction Parallel Runway Operations""의 약어임
     * 이 용어는 항공기 이착륙 시 반대 방향의 평행 활주로를 동시에 사용하는 것을 의미함

    SODPROPS의 장점

     * 공항의 활주로 용량을 극대화할 수 있음
     * 항공기 지연을 줄이고 효율성을 높임
     * 특정 기상 조건에서 안전하게 운영 가능함

    SODPROPS의 단점

     * 복잡한 운영 절차가 필요함
     * 항공 교통 관제사의 높은 숙련도가 요구됨
     * 특정 기상 조건에서만 사용 가능함

    SODPROPS의 적용 사례

     * 시드니 공항과 같은 대형 공항에서 사용됨
     * 활주로 용량을 극대화하고 항공기 지연을 줄이는 데 기여함

    GN⁺의 의견

     * SODPROPS는 공항의 효율성을 높이는 중요한 기술임
     * 그러나 복잡한 운영 절차와 높은 숙련도가 필요하므로 모든 공항에서 적용하기 어려움
     * 항공 교통 관제사의 교육과 훈련이 중요함
     * 다른 공항에서도 유사한 기술을 도입할 수 있는 가능성을 고려해야 함
     * 새로운 기술을 도입할 때는 안전성과 효율성을 모두 고려해야 함

        Hacker News 의견

     * 최근 유럽과 남아시아 간 장거리 비행에서 CAT(청천 난기류) 부상 사례가 많이 발생함
          + 우크라이나, 러시아, 이스라엘, 아프가니스탄 영공을 피하면서 비행 경로가 더 복잡해짐
          + 더운 산악 지형을 많이 비행하면서 기상 조건을 피할 수 있는 선택지가 줄어들어 난기류 발생 증가에 기여할 수 있음
     * 사고 통계에 따르면 난기류 관련 사고의 증가 추세는 보이지 않음 (링크 참조)
          + 다른 요인이 CAT 발생 증가를 가릴 수 있는지 의문
     * Prosser 보고서에 따르면, 지구 온난화로 인한 제트기류 강화가 CAT 사건 증가의 주요 원인 중 하나임
          + 지구 온도가 상승하면서 적도와 극지방 간의 온도 차이가 더 커져 제트기류가 강해지고 난기류 발생 가능성이 높아짐
          + 극지방이 지구 온난화에 더 영향을 받으면서 제트기류가 약해진다는 인식이 있었음
     * Ian M. Banks의 첫 번째 Culture 소설 ""Consider Phlebas""를 읽고 나서 CAT에 대해 처음 알게 됨
          + CAT이 우주 해적선의 완벽한 이름이라고 생각함
     * SkyPath에서 일하고 있으며, 실시간으로 수천 개의 비행에서 CAT 데이터를 모니터링하고 AI 모델을 통해 CAT 사건을 예측함
          + 파일럿들이 매우 만족하고 있으며, 미국 주요 항공사와 계약을 체결하고 여러 항공사와 평가 프로그램을 진행 중임
     * LIDAR를 사용해 CAT을 탐지하는 연구의 가능성에 대해 알고 있는 사람 있는지 질문
          + 작년 10월 연구에서 LIDAR로 CAT을 사전에 탐지하는 방법을 발견했다고 주장함 (링크 참조)
          + 이 기술이 매우 놀라울 것이며, 난기류 증가가 기후 변화와 관련이 있을 수 있다고 생각함
     * 인터넷이 가능한 비행기 증가로 인해 사람들이 소셜 미디어에 더 많이 게시하면서 공공 인식이 높아짐
          + 사건 관련 통계만 기록되고 있으므로, 비행기당 부상이나 손상이 증가하지 않는다면 추세가 아닐 가능성이 있음
     * 비행을 매우 싫어하고 난기류를 겪을 때 극도로 무서워함
          + 한 기자가 TV에서 난기류가 발생할 때가 비행기에서 가장 안전한 순간이라고 말한 적이 있음
          + 이 분야에 대해 아는 사람이 확인해 줄 수 있는지 질문
     * SkyPath 직원으로서 이 문제에 대한 해결책을 제공하려고 노력 중임 (링크 참조)
     * 최근 연구에 따르면 CAT 사건의 빈도와 강도가 지난 몇 십 년 동안 크게 증가함
          + 이 증가는 주로 기후 변화와 관련이 있음
          + 시장의 보이지 않는 손이 우리를 규제해 왔다면, 이제는 지구의 보이지 않는 손이 우리를 규제하고 있음
          + 이는 재미있는 여정이 아닐 것임
"
"https://news.hada.io/topic?id=15725","React 18 업그레이드로 인한 뉴욕타임스 웹사이트 성능 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  React 18 업그레이드로 인한 뉴욕타임스 웹사이트 성능 향상

     * NYT 엔지니어들은 페이지 성능, SEO, 최신 기술 유지에 높은 가치를 두고 있음
     * React 18 업그레이드를 진행하면서 발생한 몇가지 문제를 해결하고 큰 성능 향상을 달성
     * React 18의 주요 이점 : Concurrent Mode로 인한 보다 부드러운 렌더링, 자동 배치 및 전환, 서버 사이드 렌더링 및 스트리밍 업데이트 등
     * 업그레이드를 통해 페이지 응답성 측정 지표인 INP(Interaction to Next Paint) 점수 개선을 기대함

마이그레이션 프로세스

     * 더 이상 사용되지 않는 Enzyme 테스팅 라이브러리를 @testing-library/react로 교체
     * React 18의 새로운 기능을 안전하게 통합하기 위해 주요 의존성, 타입, 테스트를 React 18에 맞게 업그레이드
     * 새로운 API인 createRoot와 hydrateRoot를 활용하여 React 18 기능 적용
     * 처음 배포후 사용자 정의 ""임베디드 인터랙티브""에서 예상치 못한 문제 발생
          + React 18은 이전 버전보다 하이드레이션 불일치에 더 민감하여, 하이드레이션 불일치 수정 또는 하이드레이션 불일치 발생 시 클라이언트 측에서 임베디드 인터랙티브 재마운트하는 방법 중 선택해야 함
          + 모든 하이드레이션 불일치를 안전하게 수정하는 것은 어려운 과제였음

임베디드 인터랙티브 스크립트의 수동 추출 및 실행

     * 브라우저 보안상의 이유로 innerHTML prop을 통해 추가된 스크립트 태그는 자동 실행되지 않음
     * 스크립트 태그를 적절히 실행하기 위해서는 대화형 HTML에서 추출 및 제거한 후, 컴포넌트 재렌더링 시 올바른 위치에 다시 추가해야 함
     * 일부 인터랙티브 스크립트는 재추가 시 올바른 순서로 로드되어야 함
         1. 정적 데이터가 포함된 매니페스트 스크립트를 먼저 추가
         2. src 속성이 있는 스크립트를 비동기식으로 실행
         3. 마지막으로 innerHTML에 바닐라 자바스크립트가 포함된 스크립트 추가 및 실행

즉각적인 성능 개선

     * 임베디드 인터랙티브 코드에 대한 세밀한 조작을 통합한 후 React 18을 안전하게 배포할 수 있었음
     * 배포 후 INP 점수가 약 30% 감소하는 등 거의 즉각적인 성능 향상을 확인함
     * React 18의 자동 배치 및 동시성 기능으로 인해 페이지 로드 중 발생하는 재렌더링이 절반 가량 감소함

앞으로 나아갈 방향

     * startTransition 및 React Server Components와 같은 새로운 기능의 잠재적 이점 탐색에 중점을 둘 예정
     * INP 점수를 지속적으로 낮추고 전반적인 기능을 개선하는 것이 주요 목표
     * 현재 사용 중인 React 버전의 안정적이고 신뢰할 수 있는 성능 보장이 최우선 과제
     * 뉴스 사이트에서의 결과를 바탕으로 다른 사이트에서도 유사한 성능 향상을 추구함
     * Google의 SEO 알고리즘 변경 전 INP 점수를 '불량' 구간에서 벗어나는 데 성공하고, 부정적인 SEO 결과는 발생하지 않음
"
"https://news.hada.io/topic?id=15704","Haskell을 사용한 Huffman 코드 기반 데이터 압축 유틸리티 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Haskell을 사용한 Huffman 코드 기반 데이터 압축 유틸리티 개발

  Huffman 코딩을 사용한 데이터 압축 프로그램 구현

     * Huffman 코드란?
          + 각 문자를 고유한 비트 시퀀스로 매핑하여 데이터 압축을 수행함
          + 자주 등장하는 문자는 짧은 비트 시퀀스로, 드물게 등장하는 문자는 긴 비트 시퀀스로 매핑함
          + 예: 문자열 aaab의 경우, a는 1, b는 0으로 매핑되어 1110으로 압축됨

    접두사 없는 코드

     * 접두사 없는 코드란?
          + 어떤 코드 단어도 다른 코드 단어의 접두사가 되지 않도록 함
          + 예: aaabc의 경우, a는 1, b는 00, c는 01로 매핑되어 1110001로 압축됨

    접두사 없는 코드 생성

     * 접두사 없는 코드 생성 방법
          + 모든 문자를 완전 이진 트리의 잎으로 배치
          + 왼쪽 가지는 1, 오른쪽 가지는 0으로 라벨링
          + 루트에서 잎까지의 경로가 각 문자의 코드 단어를 설명함

    코더 작성

     * 타입 정의
          + Bit, Code, FreqMap, CodeMap, Weight, HTree 타입 정의
          + HTree는 Leaf와 Fork로 구성됨
     * 인코딩 함수
          + 문자열을 비트로 변환하는 함수
          + FreqMap을 사용하여 각 문자의 빈도를 계산하고, 이를 기반으로 Huffman 트리를 생성함
          + Huffman 트리에서 각 문자의 코드 단어를 생성함
     * 디코딩 함수
          + 비트를 원래 문자열로 변환하는 함수
          + Huffman 트리를 사용하여 비트를 순차적으로 디코딩함

    바이너리 파일과의 연동

     * 바이너리 데이터 인코딩
          + Data.ByteString.Char8 모듈을 사용하여 바이트를 문자로 읽음
          + 텍스트 코더를 사용하여 바이너리 데이터를 인코딩함

    직렬화

     * 직렬화 함수
          + FreqMap과 비트를 실제 바이트로 변환하여 파일에 저장함
          + Put 모나드를 사용하여 효율적으로 ByteString을 생성함

    역직렬화

     * 역직렬화 함수
          + 파일에서 읽은 데이터를 FreqMap과 비트로 변환함
          + Get 모나드를 사용하여 FreqMap을 역직렬화함

    전체 코드 통합

     * 파일 압축 및 해제 함수
          + compress 함수: 파일을 읽어 빈도 맵을 생성하고, 데이터를 인코딩하여 압축 파일로 저장함
          + decompress 함수: 압축 파일을 읽어 데이터를 디코딩하여 원래 파일로 저장함

    개선 사항

     * 멀티스레딩
          + 파일의 섹션을 병렬로 디코딩함
          + 섹션 경계와 예상 디코딩 크기를 지정하는 테이블을 추가하여 병렬 처리를 가능하게 함
     * 단일 패스 인코딩
          + 빈도 맵을 실시간으로 생성하며 인코딩함
          + 파일 시작 부분에 빈도 맵을 포함할 필요가 없음
     * 정규 Huffman 코드
          + 트리를 탐색하는 대신 벡터를 인덱싱하여 O(1) 시간 복잡도로 디코딩함
     * 더 빠른 코드 생성
          + 단일 패스 인코딩을 시도할 경우, 코드맵 생성 속도를 높여야 함

  GN⁺의 의견

     * Huffman 코딩의 장점
          + 자주 등장하는 문자를 짧은 비트 시퀀스로 매핑하여 효율적인 데이터 압축을 가능하게 함
          + 메모리 사용을 최소화하면서도 큰 데이터를 처리할 수 있음
     * Haskell의 장점
          + 함수형 프로그래밍의 장점을 활용하여 모듈화된 코드를 작성할 수 있음
          + 게으른 평가를 통해 메모리 사용을 최적화할 수 있음
     * 비슷한 기능을 가진 프로젝트
          + gzip, bzip2 등 다양한 데이터 압축 도구가 존재함
          + 각 도구의 장단점을 비교하여 적절한 도구를 선택하는 것이 중요함
     * 새로운 기술 도입 시 고려 사항
          + 성능과 메모리 사용량을 고려하여 적절한 알고리듬을 선택해야 함
          + 단일 패스 인코딩과 같은 최적화 기법을 적용하여 효율성을 높일 수 있음

        Hacker News 의견

     * 배열 기반의 인플레이스 알고리즘이 존재하여 트리를 할당하고 포인터를 추적할 필요가 줄어듦
          + 대학에서 트리 기반 접근 방식을 배울 때 다른 방법이 있는지 몰랐음
          + 트리 접근 방식이 직관적이고 유익하지만, 많은 데이터를 빠르게 처리해야 할 때는 인플레이스 배열을 사용하는 것이 더 합리적임
          + 참고 문헌: ""In-Place Calculation of Minimum-Redundancy Codes"" (Moffat, Katajainen, 1995)
     * 코드 단어가 다른 코드 단어의 접두사가 되지 않도록 해야 한다는 것은 기술적으로 정확하지 않음
          + 유일하게 디코딩 가능한 코드 클래스는 접두사 코드의 상위 집합임
          + 예를 들어, 접두사 코드의 역순은 여전히 명확하게 디코딩 가능함
          + 예시 코드:
a 1
b 00
c 10

          + 'a'의 코드가 'c'의 코드의 접두사이지만, 역순으로 처리하면 명확하게 디코딩 가능함
     * Haskell 프로그램 작성에 대한 더 고급 기능(모나드 변환기, 렌즈 등)을 다루는 유사한 튜토리얼이 있는지 궁금함
     * Coursera의 함수형 프로그래밍 코스(Scala)에서 유사한 Huffman 코딩 과제를 제공함
          + 링크: Coursera Scala Functional Programming
     * Huffman 코드를 사용하여 MICMAC 프로세서 매크로 프로그램을 최소한의 마이크로사이클과 마이크로명령으로 실행했음
          + 매크로 명령어의 히스토그램을 작성하고, 이를 기반으로 프로그레시브 디코딩 마이크로코드 프로그램을 작성했음
          + 실제로는 느리고 불편했을 것임
          + Huffman 코드의 장점은 값의 분포에 따라 접두사 깊이를 조절할 수 있다는 것임
          + 비초과파이프라인 프로세서 모델에서 분기 예측을 처리해야 했음
     * Huffman 코딩에 대한 추가 정보: Rosetta Code Huffman Coding
     * Haskell 프로그래머를 위한 질문: 최적화된 코드를 작성하려는 프로그래머에게 Haskell의 성능은 어떤지 궁금함
          + 특히 행렬 연산과 SIMD를 활용하는 수치 계산 성능에 관심이 있음
     * 공유해줘서 고맙다는 의견
     * ""Creating prefix-free codes"" 섹션의 표에 오타가 있음
          + D는 '0010'이어야 함 (현재는 '0110'으로 잘못 표기됨)
          + 그 외에는 훌륭한 읽을거리였음
     * 산술 코드는 거의 모든 면에서 더 나음
          + 더 적은 RAM과 코드로 구현 가능함
          + 더 나은 압축 및 디컴프레션 비율을 제공함
          + 스트림 중에 다른 기호가 나타날 확률을 동적으로 업데이트하기 더 쉬움
          + Huffman 코드는 먼저 발명되었고 산술 코드는 특허가 있었기 때문에 사용됨
          + 현재 특허가 만료되었으므로 더 나은 설계를 사용해야 함
"
"https://news.hada.io/topic?id=15684","150줄의 C 코드로 NumPy 행렬 곱셈 능가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       150줄의 C 코드로 NumPy 행렬 곱셈 능가

  요약

    소개

     * 행렬 곱셈은 현대 신경망에서 필수적인 요소임
     * NumPy는 외부 BLAS 라이브러리를 사용하여 고성능을 달성함
     * 이 글에서는 간단하고 이식 가능하며 확장 가능한 고성능 행렬 곱셈을 구현하는 방법을 설명함

    NumPy 성능

     * NumPy는 AMD CPU에서 OpenBLAS를 사용함
     * 성능 측정은 FLOP/s로 계산됨
     * Ryzen 7 7700 CPU에서 NumPy의 단일 스레드 및 다중 스레드 성능을 측정함

    이론적 한계

     * CPU의 메모리 계층 구조와 SIMD 확장을 설명함
     * 이론적으로 단일 스레드에서 163 GFLOPS, 다중 스레드에서 1203 GFLOPS를 달성할 수 있음

    단순 구현

     * 기본적인 행렬 곱셈 알고리즘을 설명하고, 단순 구현의 성능을 측정함
     * 단순 구현은 2.7 GFLOPS를 달성함

    커널

     * 행렬 곱셈을 작은 하위 문제로 분할하여 해결하는 방법을 설명함
     * SIMD 명령어를 사용하여 커널을 최적화함
     * 16x6 커널을 사용하여 147 GFLOPS를 달성함

    마스킹 및 패킹

     * 임의의 행렬 크기를 처리하기 위해 경계 케이스를 다루는 방법을 설명함
     * 마스킹과 패킹을 사용하여 성능을 최적화함
     * 새로운 구현은 56 GFLOPS를 달성함

    캐싱

     * CPU 캐시의 메모리 시스템을 설명함
     * 캐시를 활용하여 데이터 재사용과 캐시 관리를 최적화함

  GN⁺의 의견

     * 이 글은 고성능 행렬 곱셈을 구현하는 방법을 단계별로 설명하여 매우 교육적임
     * SIMD 명령어와 CPU 캐시를 활용한 최적화 방법을 배울 수 있음
     * NumPy와 같은 라이브러리의 내부 동작을 이해하는 데 도움이 됨
     * 유사한 기능을 가진 다른 프로젝트로는 Intel MKL, OpenBLAS 등이 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 성능과 이식성을 고려해야 함

        Hacker News 의견

     * 대부분의 소프트웨어는 최적화되지 않아 성능 향상 여지가 많음
          + 알고리즘 선택이 가장 중요함
          + 커널 호출과 같은 무거운 작업을 줄일 수 있는지 확인 필요
          + 벡터화를 통해 성능 향상 가능
          + 캐시 효율성을 최적화할 수 있는지 확인 필요
          + 하드웨어에 특화된 최적화 가능성 검토 필요
     * BLIS 레포지토리에 참조된 논문들은 이 주제를 이해하는 데 권위 있는 자료임
          + 최적화된 BLAS가 성능이 좋지 않다고 생각하는 이유를 이해하지 못함
          + numpy 대신 AMD의 BLAS를 사용해야 함
          + BLIS는 OpenBLAS보다 병렬화가 더 잘 되어 있음
     * SIMD 명령어는 마이크로 커널 벡터화에 필요하지 않음
          + 적절한 블록 크기를 사용하면 BLIS의 순수 C 마이크로 커널이 손으로 최적화된 구현의 80% 이상의 성능을 발휘함
     * 대부분의 코딩 패턴은 하드웨어에 완전히 특화되지 않아 많은 성능을 놓치고 있음
          + ""There's plenty of room at the top""이라는 CS 클래식 논문을 참조할 만함
     * 벤치마크를 쉽게 반복할 수 있게 한 점이 칭찬받을 만함
          + 16코어 Xeon CPU에서 matmul.c가 gcc -O3로 컴파일 시 1.41초, clang -O2로 컴파일 시 1.47초, NumPy는 1.07초 걸림
          + avx512 커널이 더 빠를 것이라고 믿음
          + omp 대신 pthreads를 사용해 스레드 풀을 명시적으로 관리하면 오버헤드를 줄일 수 있음
     * numpy의 구현이 실제로 멀티스레딩을 사용하는지 의문임
     * OpenBLAS보다 성능이 좋은 이유가 궁금함
          + 캐싱 등 세부 사항을 다루고 있음
          + 특정 프로세서에 더 최적화된 것인지 궁금함
     * 한쪽은 Python, 다른 쪽은 C로 비교하는 것은 공정하지 않음
          + 둘 다 C로 작성하여 비교하는 것이 더 나음
     * 마스크 생성의 비효율성이 신경 쓰임
          + 더 효율적인 방법으로 글로벌 상수 배열을 생성하거나 상수 벡터와 비교하는 방법이 있음
          + 하지만 이는 사소한 문제이며, 실제로는 큰 차이가 없을 것임
     * 행렬 곱셈 자체를 멀티스레딩하는 것의 실용성에 의문을 가짐
          + 멀티스레딩은 행렬 곱셈을 사용하는 알고리즘에 더 유용할 것임
     * jart의 tinyBLAS에 대한 언급
          + 관련 링크 제공
"
"https://news.hada.io/topic?id=15691","가장 슬픈 "Just Ship It" 이야기 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    가장 슬픈 ""Just Ship It"" 이야기 (2020)

     * 가장 슬픈 ""그냥 출시해"" 이야기
          + Indie Maker로서 ""그냥 출시해""라는 말은 매우 좌절감을 줄 수 있음
          + 2018년 1월 1일에 앱 개발을 시작함
          + MVP는 며칠 만에 준비되었으나 계속해서 새로운 기능을 추가하려고 함
          + React Native를 배우고 몇 달을 투자함
          + 2년간의 개발 후, 앱 출시를 포기함
     * 다른 사람이 문제를 해결함
          + 다른 사람이 내가 해결하려던 문제를 해결한 것을 발견함
          + 그들의 앱을 사용해 보니 느린 속도와 버그가 많았음에도 불구하고 출시되었음
          + 그들의 앱은 매주 업데이트되며 커뮤니티와 함께 성장함
     * 경쟁자의 앱 사용
          + 경쟁자의 앱에 가입하고 사용해 보면서 혼란스러운 감정을 느낌
          + 그들의 앱이 완벽하지 않음에도 불구하고 출시되었고, 나는 그들의 팬이 됨
     * 2024 업데이트
          + 2022년에 생산성 앱을 출시하기로 결심함
          + 경쟁자 앱이 내 비전에 근접하지 않았기 때문임
          + Benji - The Life OS라는 앱을 출시함

GN⁺의 의견

     * 이 글은 개발자들에게 ""완벽한 시점""을 기다리지 말고 제품을 출시하라는 중요한 메시지를 전달함
     * 경쟁자가 문제를 해결했을 때의 복잡한 감정을 잘 묘사함
     * 앱 개발 과정에서의 좌절과 성공을 솔직하게 공유하여 많은 개발자들이 공감할 수 있음
     * Benji와 같은 생산성 앱은 다양한 기능을 통합하여 사용자에게 큰 가치를 제공할 수 있음
     * 새로운 기술을 도입할 때는 완벽함보다는 일단 출시하고 사용자 피드백을 반영하는 것이 중요함

        Hacker News 의견

     * ""그냥 출시하라""는 압박에 저항해야 함
          + 기술적 세부사항이 중요한 경우, 서두를 수 없고 ""그냥 출시""할 수 없음
          + 관리층의 압박에 저항하는 것이 소프트웨어 엔지니어의 역할임
          + 회사의 이익보다는 좋은 소프트웨어를 만드는 것이 중요함
          + 단기적인 마감일 준수는 장기적으로 부정적인 동기부여가 됨
     * 아이디어만으로 50%의 지분을 요구하는 사람과의 경험
          + 앱 아이디어를 가진 사람이 코딩을 무료로 해달라고 요청함
          + 6개월 후에도 출시되지 않으면 직접 만들겠다고 함
     * 다른 사람이 문제를 해결해주는 것을 바라는 사람의 의견
          + 문제를 해결해주는 사람이 유지보수를 담당하게 됨
          + 문제 해결에 집착하기보다는 고객에게 가치를 제공하는 것이 중요함
     * 댓글에 동기부여를 받아 앱을 출시한 사람의 이야기
          + 앱을 출시하고 경쟁 제품보다 훨씬 나아짐
          + benji.so에서 확인 가능함
     * 자신의 시스템을 실제로 사용해보는 것이 관점을 바꿀 수 있음
          + 사용자는 작은 문제를 자동으로 해결하는 데 익숙함
          + 완벽을 추구하는 것은 자존심의 문제일 수 있음
          + 자신이 만든 것을 사용해보고 수정하지 않기로 결심하면 많은 것이 바뀔 수 있음
     * 다른 사람이 자신의 아이디어를 먼저 구현한 것에 대해 긍정적으로 생각하는 사람의 의견
          + 아이디어가 좋다는 증거로 받아들임
          + 개인 프로젝트는 자신이나 주변 사람들에게 유용한 것이 목적임
          + 알파 버전이라도 공개하여 다른 사람이 개선할 수 있도록 함
     * ""재미있게 쓰려고 노력하는"" 글쓰기 스타일을 싫어하는 사람의 의견
     * 앱 개발 목적에 따라 출시 여부를 결정해야 함
          + 개인적인 문제 해결이 목적이라면 출시할 필요 없음
          + 판매를 위한 제품이라면 최소 기능을 갖춘 상태에서 출시해야 함
          + 오픈 소스 프로젝트라면 출시를 서두르지 말아야 함
          + 공개하면 버그 수정과 기능 추가 요청이 많아질 수 있음
          + 프로젝트를 포기하는 것도 나쁜 일이 아님
          + 중요한 것은 과정을 통해 배운 것임
     * ""그냥 출시하라""는 예시가 적절하지 않다고 생각하는 사람의 의견
          + 많은 사람들이 독립적으로 생산성 앱 아이디어를 가짐
          + 자신의 아이디어가 이미 존재하는 것을 확인하고 실망함
     * 글쓴이를 ""어린아이""라고 비난하는 사람의 의견
          + 개념 증명만 하고 더 이상 진행하지 않은 것을 비판함
          + 아이디어만으로는 권리를 주장할 수 없음을 강조함
"
"https://news.hada.io/topic?id=15652","Edna - 개발자와 파워 유저를 위한 노트 테이킹 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Edna - 개발자와 파워 유저를 위한 노트 테이킹 앱

     * 오픈소스 문서뷰어 SumatraPDF 개발자가 HeyNote를 포크하여 만든 오픈소스
          + 차이점: Web First(데스크탑 앱 없음), 멀티 노트 지원, DropBox/OneDrive/Google Drive 등에 파일 저장해서 여러 기기에서 동시에 접속 가능
     * 개발자용 스크래치패드
     * 임시 메시지 작성, JSON 분석, 미팅 노트, ToDo 작성등 다양하게 활용 가능
     * 영구적인 텍스트 버퍼
     * 블록 기반 편집
     * 구문 강조 : C++, C#, Clojure, CSS, Erlang, Go, Groovy, HTML, Java, JavaScript, JSX, Kotlin, TypeScript, TOML, TSX, JSON, Lezer, Markdown, PHP, Python, Ruby, Rust, Shell, SQL, Swift, XML, YAML
     * 언어 자동 감지
     * 자동 포매팅
     * 수학/계산기 모드
     * 통화(Currency) 변환
     * 멀티 커서 에디팅
     * 다크 & 라이트 테마
     * 기본 또는 Emacs 키 바인딩

블록

     * 각 노트는 블록으로 구성되며, 각 블록은 다음과 같은 타입을 가짐:
          + 마크다운
          + 일반 텍스트
          + 코드 블록 (JavaScript, Go 등)
          + 수학 블록
     * Ctrl + L로 블록 타입 변경
     * Ctrl + B로 블록 간 이동
     * 블록은 교차 배경색을 가짐

GN⁺의 의견

     * Edna는 개발자와 파워 유저를 위한 강력한 노트 작성 도구로, 다양한 블록 타입과 단축키를 통해 효율적인 작업이 가능함
     * 수학 블록과 단위 변환 기능은 특히 과학 및 엔지니어링 분야에서 유용할 것임
     * 다른 노트 앱과 비교했을 때, Edna의 블록 기반 구조는 더 유연하고 조직적인 노트 작성이 가능하게 함
     * 그러나, 많은 단축키와 기능을 익히는 데 시간이 걸릴 수 있으며, 초보자에게는 다소 복잡하게 느껴질 수 있음
     * 비슷한 기능을 제공하는 다른 도구로는 Notion, Obsidian 등이 있으며, 사용자의 필요에 따라 선택할 수 있음

   Heynote - 개발자를 위한 전용 연습장(Scratchpad)

   파일 위치를 변경해서 Dropbox 에 쓰는 것은 HeyNote도 업그레이드 되면서 가능해졌습니다.
   멀티 노트를 지원하는게 좋네요.

        Hacker News 의견

     * Silverbullet.md, Eidos, Edna 등 세 가지 새로운 Markdown/PWA/노트 앱이 있음
          + 각 앱은 다른 관점, 목표, 철학을 가지고 있음
          + 안드로이드에서 빠른 캡처 기능이 만족스럽지 않음
     * vim을 사용하는 노트 작성자는 vim-markdown 플러그인을 통해 다양한 기능을 사용함
          + Markdown 구문 강조, 코드 블록 강조, 계층적 목차 기능이 있음
          + 이미지와 수학 방정식 렌더링 기능이 부족하여 가끔 Word를 사용함
          + 명령줄 도구는 커스터마이즈 가능하고 가벼우며 상호 운용성이 뛰어남
          + fzf와 ripgrep을 사용하여 노트를 빠르게 검색하고 편집함
          + GUI 노트 앱의 가치는 잘 모르겠음
     * 여러 블록과 수학 블록이 유용하여 VSCode 창 대신 사용할 계획임
          + Mac에서 command + L 단축키가 URL을 강조하여 언어/블록 유형 변경에 사용 불가
          + 하단 바 또는 명령 팔레트에서 변경 가능함
     * 수학 블록을 포함한 다양한 기능 블록을 추가할 수 있는 아이디어가 좋음
          + Markdown 문서에 코드 블록으로 수학 블록을 추가하는 방법 제안
          + 삼중 백틱과 블록 유형을 사용하여 블록을 명확하게 구분할 수 있음
     * HeyNote가 Commons Clause를 라이선스에 적용한 것을 몰랐음
          + 관련 라이선스 링크 제공
     * HeyNote 데스크탑 버전이 로드맵에 있는지 궁금함
          + 데스크탑 버전을 매일 사용하며 다중 노트 기능을 원함
     * Calca.app과 유사하나 웹 기반이라 더 재사용 가능성이 높음
          + Calca는 MacOS/iOS에서 시작하여 Windows로 포팅됨
          + Calca의 => 표기법이 수학 표현을 더 명확하게 할 수 있음
          + Calca는 추가 기능, 상수, 연산자 등을 포함하여 10년간 발전해옴
          + 간단하지만 가시성이 높은 계산 스타일이 스프레드시트보다 우수함
     * 로컬 데이터 유지와 최소한의 기능을 목표로 하는 노트 작성 도구를 개발 중임
          + 이미지 지원과 목차 기능이 필요함
     * snipp.in을 만들어 오프라인에서 완전히 작동하고 VSCode와 유사한 인터페이스 제공함
     * SilverBullet과 유사한 개념의 앱을 개발 중임
          + Docker에서 호스팅 가능하여 모든 장치에서 데이터 접근 가능함
          + Edna도 이러한 계획이 있는지 궁금함
"
"https://news.hada.io/topic?id=15662","RunwayML Gen-3 Alpha - 차세대 비디오 생성 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  RunwayML Gen-3 Alpha - 차세대 비디오 생성 모델

     * Gen-3 Alpha는 Runway에서 대규모 멀티모달 훈련을 위해 구축된 새로운 인프라에 훈련된 일련의 모델 중 첫 번째
     * Gen-2에 비해 충실도, 일관성, 움직임이 크게 향상되었으며, General World Models(실제 세계에서 마주치는 것과 같은 광범위한 상황과 상호 작용을 표현하고 시뮬레이션) 구축을 위해 더 나아감
     * 잘 설명되고, 시간적으로 밀도가 높은 캡션으로 훈련되어 상상력이 풍부한 전환과 장면 속 요소의 정확한 키 프레이밍이 가능
     * 광범위한 행동, 제스처, 감정을 가진 표현력 있는 인간 캐릭터를 생성하는 데 탁월하여 새로운 스토리텔링 기회를 제공함
"
"https://news.hada.io/topic?id=15692","Sans-IO: 네트워크 서비스에 효과적인 Rust의 비밀","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Sans-IO: 네트워크 서비스에 효과적인 Rust의 비밀

     * Firezone에서는 Rust를 사용하여 Android 폰, MacOS 컴퓨터 또는 Linux 서버에서 확장 가능한 안전한 원격 액세스를 구축함
     * connlib라는 연결 라이브러리를 사용하여 네트워크 연결과 WireGuard 터널을 관리함
     * 여러 번의 반복 끝에 sans-IO라는 설계에 도달하여 빠르고 철저한 테스트, 깊은 커스터마이징, 높은 신뢰성을 제공함

   connlib는 Rust로 작성되었으며 sans-IO 설계를 따름
     * Rust의 속도와 메모리 안전성 덕분에 네트워크 서비스 구축에 적합함
     * tokio 런타임, tungstenite WebSockets, boringtun WireGuard 구현, rustls API 트래픽 암호화 등 사용
     * sans-IO 설계는 여러 곳에서 소켓을 통해 바이트를 보내고 받는 대신 순수 상태 기계로 프로토콜을 구현함

  Rust의 비동기 모델과 ""함수 색칠"" 논쟁

     * 비동기 함수는 다른 비동기 함수에서만 호출될 수 있음
     * 비동기 함수 깊숙이 있는 함수는 호출하는 모든 함수도 비동기 함수로 만들어야 함
     * 이로 인해 종속성의 비동기 여부에 대해 무관심한 코드를 작성하고자 하는 사람들에게 문제가 될 수 있음

  sans-IO 소개

     * sans-IO의 핵심 아이디어는 OOP 세계의 의존성 역전 원칙과 유사함
     * 정책(무엇을 할지)은 구현 세부 사항(어떻게 할지)에 의존하지 않아야 함
     * Transmit 구조체를 사용하여 데이터를 전송하는 대신 Transmit을 방출함

  의존성 역전 적용

     * Transmit 구조체를 사용하여 데이터를 전송하는 대신 Transmit을 방출함
     * 이벤트 루프는 부작용을 구현하고 실제로 UdpSocket::send를 호출함

    상태 기계

     * STUN 바인딩 요청의 상태 기계 다이어그램은 Sent와 Received 두 가지 상태를 가짐
     * StunBinding 구조체와 관련 함수들을 정의하여 상태 기계를 구현함

    이벤트 루프

     * 이벤트 루프는 상태 기계를 구동하며, poll_transmit과 handle_input을 사용하여 데이터를 처리함

    시간 추상화

     * poll_timeout과 handle_timeout API를 사용하여 시간 기반 요구 사항을 처리함

  sans-IO의 전제

     * sans-IO 설계는 종속성의 비동기 여부에 대한 결정을 애플리케이션으로 미룸
     * sans-IO 설계는 조합이 쉽고, 유연한 API를 제공하며, 테스트가 용이하고, Rust의 기능과 잘 맞음

    쉬운 조합

     * StunBinding의 API는 대부분의 네트워크 프로토콜에 적용 가능함
     * Firezone의 snownet 라이브러리는 ICE와 WireGuard를 결합하여 네트워크 설정에 관계없이 작동하는 ""마법"" IP 터널을 제공함

    유연한 API

     * 이벤트 루프를 직접 작성하면 코드 튜닝이 가능하고 유지 관리가 쉬움

    빠른 테스트

     * sans-IO 코드는 부작용이 없으므로 테스트가 매우 용이함
     * Firezone에서는 참조 상태 기계를 구현하여 connlib의 실제 상태와 비교하는 테스트를 수행함

    엣지 케이스와 IO 실패

     * sans-IO 설계는 프로토콜 구현을 실제 IO 부작용과 분리하여 엣지 케이스와 오류 처리를 쉽게 만듦

  Rust + sans-IO: 천생연분?

     * Rust는 소유권과 가변성을 명시적으로 모델링하여 sans-IO 설계와 잘 맞음
     * sans-IO 설계는 &mut를 자유롭게 사용하여 상태 변경을 표현하고, async Rust와는 달리 동기 API만 사용함

  단점

     * 이벤트 루프를 직접 작성하면 미묘한 버그가 발생할 수 있음
     * 순차적 워크플로우는 더 많은 코드를 요구할 수 있음
     * Rust 커뮤니티에서 sans-IO 설계는 아직 널리 사용되지 않음

  마무리

     * sans-IO 코드는 처음에는 생소하지만 익숙해지면 매우 즐거움
     * Rust는 상태 기계를 모델링하는 데 훌륭한 도구를 제공함
     * sans-IO 설계는 오류 처리를 입력 처리의 일부로 강제하여 네트워킹 코드를 작성하는 올바른 방식처럼 느껴짐

GN⁺의 의견

     * sans-IO 설계는 Rust의 소유권 모델과 잘 맞아 네트워크 프로토콜 구현에 매우 적합함
     * 이벤트 루프를 직접 작성하면 코드의 유연성과 유지 관리가 용이해짐
     * 테스트가 용이하여 안정적인 코드를 작성하는 데 큰 도움이 됨
     * 그러나 Rust 커뮤니티에서 널리 사용되지 않아 관련 라이브러리가 부족할 수 있음
     * 새로운 기술을 도입할 때는 학습 곡선과 커뮤니티 지원을 고려해야 함

        Hacker News 의견

     * Rust의 async/await 문법 도입 전에는 수동으로 상태 기계를 구현했었음
          + Rust의 async/await 문법 덕분에 생산성이 크게 향상되었음
          + Rust의 async는 자동 상태 기계로 변환되어 I/O 지점에서 값을 저장해줌
     * VT100 라이브러리를 작성하면서 Rust의 캡슐화 패턴 문제를 깨달았음
          + 캡슐화에 집착하는 것이 문제를 일으킴
          + 컴퓨터는 입력, 데이터 변환, 출력을 수행하는 기계임을 상기시킴
     * 채널을 사용하여 데이터를 전송하는 디자인과 비교
          + 코드가 복잡해짐
          + 메시지 타입을 수동으로 구현해야 함
          + 송신기를 명시적으로 제공해야 함
          + 네트워크 전송 실패 시 결과를 얻지 못함
          + 그러나 편리한 점도 있음
     * Haskell 생태계에서 논리와 실행을 분리하는 아이디어가 있음
          + tokio::select! 호출을 어떻게 캡슐화했는지 언급되지 않음
          + sans-IO 스타일로 캡슐화된 함수 구현에 관심이 있었음
     * Rust의 async 함수는 상태 기계로 컴파일됨
          + sans-io와 async를 결합하려는 시도가 있었는지 궁금함
          + 주요 문제는 사용성 및 Pin 처리임
     * 상태를 노출하면 async 함수가 '순수'해질 수 있음
          + OpenSSL을 async Rust에 바인딩하려고 시도했음
     * Firezone이 놀라운 도구임
          + Rust-libp2p와 유사한 패턴을 발견했음
     * 컴파일러가 async 코드를 sans io로 자동 변환할 수 있으면 좋겠음
          + 수동 변환은 오류가 발생하기 쉬움
     * 기사와 댓글을 읽고 hexagonal 또는 ports/adapters 아키텍처 스타일을 재발명한 것 같음
     * 실제 트래픽이 게이트웨이를 통해 지나가는지, 아니면 연결 설정에만 사용되는지 궁금함
"
"https://news.hada.io/topic?id=15702","생성자 없는 초기화 필요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             생성자 없는 초기화 필요성

    나는 생성자가 없고 초기화해야 함

     * 서론
          + C++를 처음 배울 때, 컴파일러가 기본 생성자를 제공하는 경우에 대해 배웠음.
          + 특정 상황에서 객체가 초기화되지 않을 수 있는 위험성에 대해 고민하게 됨.
     * 기본 초기화와 값 초기화
          + T t;는 기본 초기화를 수행함.
               o T가 클래스 타입이고 기본 생성자가 있으면 실행됨.
               o T가 배열 타입이면 각 요소를 기본 초기화함.
               o 그렇지 않으면 아무것도 하지 않음.
          + T t{};는 값 초기화를 수행함.
               o T가 클래스 타입이면 기본 생성자가 없거나 사용자 제공 또는 삭제된 기본 생성자가 있으면 기본 초기화함.
               o 그렇지 않으면 0으로 초기화한 후 기본 초기화함.
               o T가 배열 타입이면 각 요소를 값 초기화함.
               o 그렇지 않으면 0으로 초기화함.
     * 기본 생성자
          + 기본 생성자를 선언하지 않으면 컴파일러가 암시적으로 기본 생성자를 선언함.
          + 암시적으로 선언된 기본 생성자는 빈 본문과 빈 멤버 초기화 목록을 가짐.
          + 예시:
struct T {
  int x;
  T() = default;
};
T t{};
std::cout << t.x << std::endl; // 출력 결과는 0

     * 암시적으로 정의된 기본 생성자
          + 기본 생성자가 암시적으로 선언되거나 명시적으로 기본값으로 선언되면 컴파일러가 암시적으로 정의된 기본 생성자를 제공함.
          + 예시:
struct T {
  T();
};
T::T() = default;
T t{};
std::cout << t.x << std::endl; // 출력 결과는 쓰레기 값

     * 기본 생성자를 제공할 수 없는 경우
          + T가 비정적 참조 멤버를 가지고 있는 경우
          + T가 기본 생성할 수 없거나 소멸할 수 없는 비정적 멤버 또는 비추상 기본 클래스를 가지고 있는 경우
          + T가 기본 멤버 초기화자가 없는 const 비정적 멤버를 가지고 있는 경우
     * 올바른 초기화
          + T t{};는 리스트 초기화를 수행함.
          + 리스트 초기화는 직접 리스트 초기화와 복사 리스트 초기화로 나뉨.
          + 예시:
struct S {
  int a;
  float b;
  char c;
};
S s{3, 4.0f, 'S'}; // 생성자 호출 없음

     * 리스트 초기화와 집합 초기화
          + 집합 초기화는 리스트 초기화의 특별한 형태로, 클래스 또는 배열의 각 요소를 초기화 목록의 각 요소로 복사 초기화함.
          + 예시:
struct A {
  const int x;
};
A a{}; // a.x는 0으로 초기화됨

     * 괄호를 사용한 초기화
          + 괄호를 사용한 초기화는 직접 비리스트 초기화를 수행함.
          + 예시:
struct T {
  const int& r;
};
T t(42); // t.r은 42를 가리키는 참조

     * 요약
          + 초기화 규칙은 복잡하지만, 직접 생성자를 작성하면 대부분의 문제를 피할 수 있음.
          + 컴파일러에게 맡기지 말고, 직접 생성자를 작성하는 것이 좋음.

    GN⁺의 의견

     * 이 글은 C++ 초기화 규칙의 복잡성을 잘 설명하고 있음.
     * C++의 초기화 규칙을 이해하는 것은 중요한데, 이는 코드의 안정성과 성능에 큰 영향을 미침.
     * 직접 생성자를 작성하는 것이 초기화 문제를 피하는 가장 좋은 방법임.
     * 비슷한 기능을 가진 다른 언어로는 Rust가 있으며, Rust는 초기화 규칙이 더 명확함.
     * 새로운 기술을 채택할 때는 초기화 규칙과 같은 세부 사항을 잘 이해하고 사용하는 것이 중요함.

        Hacker News 의견

     * t의 초기화 결과는 0이 될 것임
          + 이는 t가 값 초기화되고, T가 사용자 정의 기본 생성자가 없기 때문에 객체가 0으로 초기화된 후 기본 생성자가 호출되기 때문임
     * 기본 생성자는 멤버를 기본 초기화하며, 값 초기화와는 다름
     * GCC는 이에 동의하는 것 같음
     * 작성자가 실제로 x를 값 초기화하고 있다는 것을 놓쳤음
          + 결과는 기대와 다르게 나옴
     * 규칙의 세부 사항은 복잡하고 때로는 비합리적인 부분이 있음
          + 그러나 대부분의 경우 기대한 결과를 얻을 수 있음
     * 기본 초기화를 명시적으로 만드는 것이 큰 개선점이 될 것임
          + 값 초기화가 일반적이기 때문에 기본 초기화를 원할 때 주석을 작성해야 함
          + ""std::array<int, 100> = void;""와 같은 구문이 더 나을 것임
     * 리스트 초기화와 집합 초기화 사이의 연결고리는 리스트 초기화가 집합에 대해 수행될 때 집합 초기화가 수행됨
          + 단, 리스트에 하나의 인수만 있는 경우 직접 초기화가 수행됨
     * 한 요소의 경우는 두 개 이상의 요소와 다르게 작동함
          + 이는 매개변수 팩에서 구조체를 생성하는 것이 점점 더 간단해지는 언어에서 발생함
     * 자신의 생성자를 작성할 수 있으며, 하나의 요소만 제공된 튜플이나 배열을 초기화할 수 있음
          + 그러나 특수한 경우 잘못된 생성자가 호출될 수 있음
     * C++11 초기화 리스트가 처음 나왔을 때 이를 발견하고 미쳤다고 생각했음
     * ""I Have No Mouth, and I Must Scream"" (1967) 언급
     * T::T() = default; 구문 사용
     * 출력 결과가 0이 될 것이라고 기대하지만 실제로는 쓰레기 값이 나올 것임
          + 일부 것들은 완벽할 수 없음
     * 라이브러리 소비자가 라이브러리의 동작을 변경할 수 있게 함
     * 더 많은 C++의 복잡함을 원한다면 C++ FQA를 추천함
          + 15년이 지났지만 C++는 오래된 기능이나 동작을 거의 제거하지 않기 때문에 여전히 유효함
     * 블로그 테마가 DEC 시대의 컴퓨터에서 영감을 받았지만 깔끔하고 미니멀함
          + 신선함
     * 이 내용을 읽으면 어지러움을 느끼게 됨
          + Java 생성자와 객체 초기화를 이해하려고 했던 기억이 남
     * Go와 Rust는 특별한 생성자가 없어서 많은 부분이 단순해짐
          + 생성자를 사용하지 않게 된 후 생성자를 그리워한 경험이 있는지 궁금함
     * 모든 암묵적인 동작을 보여주는 C++ 도구가 있는지 궁금함
          + 예를 들어 추가된 모든 생성자, 암묵적 복사 생성자 등
     * 클래스에 대해 잘못된 정보를 제공함
          + 생성자를 선언한 경우 기본 생성자를 제공하지 않으며 기본 초기화는 컴파일러 진단과 함께 실패함
     * ""T t;""는 ""아무것도 하지 않는다""는 주장은 잘못됨
          + 예시 코드에서 T t;는 실패함
     * 블로그 헤더에 DEC 전면 패널이 있음
"
"https://news.hada.io/topic?id=15645","자살한 네이비 씰 대원들의 뇌 손상 패턴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         자살한 네이비 씰 대원들의 뇌 손상 패턴

        Hacker News 의견

     * 군대에서 포격을 많이 경험한 사람들이 환각과 정신병에 시달리는 문제는 민간인 총기 애호가들에게도 영향을 미칠 수 있는지에 대한 질문이 제기됨
          + 한 군인은 10년 동안 군 복무를 했고, 많은 친구들이 자살이나 약물 및 알코올 남용으로 사망했음을 언급함
          + 본인은 허리 통증과 권위에 대한 반감 외에는 큰 후유증이 없음을 감사하게 생각함
     * 한 임상 사회복지사는 호르몬 대체 요법(HRT)이 만성 외상성 뇌손상(CTE) 환자들에게 큰 변화를 가져올 수 있음을 강조함
          + HRT가 초기에는 자존심을 위한 것이라고 생각했으나, 실제로 많은 환자들이 HRT를 통해 삶의 질이 크게 향상됨을 목격함
     * 한 독자는 기사에서 폭발로 인한 뇌 손상이 단순히 뇌가 두개골에 부딪혀 생기는 것이 아니라, 폭발 에너지 파동이 뇌 조직을 통해 반사되어 발생하는 공동 현상 때문임을 설명함
          + 이러한 문제들이 드디어 주목받게 되어 기쁘다고 언급함
     * 자살에 대한 연구가 필요함을 강조하는 의견이 있음
          + 단순히 자살하지 말라고 하거나 핫라인에 전화하라는 조언이 근본적인 문제를 해결하지 못한다고 지적함
          + 데이터 기반의 분석이 필요하며, 자살 예방이 항상 가능한 것은 아님을 인정해야 함
     * 반복적인 폭발 노출이 미국 특수작전부대(SOF) 요원들에게 미치는 영향을 연구한 논문이 언급됨
          + 높은 폭발 노출이 뇌 구조와 기능, 신경 면역 마커에 변화를 일으키며 삶의 질을 낮춘다는 결과를 도출함
          + 특히 전두엽 앞쪽의 뇌 영역이 인지와 감정을 조절하는 데 중요한 역할을 함
     * 폭발 노출 후 인간 뇌에서 발생하는 특이한 흉터 패턴을 연구한 논문이 언급됨
          + 이 흉터 패턴이 폭발로 인한 특정 손상을 나타내며, 신경 정신적 후유증과 관련이 있을 수 있음
     * 기사가 매우 잘 작성되었으며, 중요한 문제를 조명함
          + 예를 들어, 해군이 SEAL 요원들의 자살에 대한 연구 결과를 알지 못했다는 점을 지적함
     * 기사와 관련된 다른 기사들도 훌륭하다고 언급함
          + 다른 나라들이 군인들을 정신적으로 혹사시키는 상황에서, 이러한 문제를 예방하면서도 군사력을 유지할 수 있는 방법에 대한 우려를 표명함
"
"https://news.hada.io/topic?id=15616","$1 레이더 모션 센서 내부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            $1 레이더 모션 센서 내부

    1달러 레이더 모션 센서 내부

     * 최근에 RCWL-0516 마이크로파 모션 센서를 구입했음. 중국이 어떻게 1달러 이하로 레이더를 만들었는지 궁금했음
     * 센서를 작동시키는 것은 매우 쉬웠음. VIN 핀을 5볼트에 연결하고, GND를 접지에 연결한 후 3V3 핀에 1uF 디커플링 커패시터를 추가했음. 누군가가 약 5미터 이내에서 움직이면 OUT 핀이 3볼트로 3초 동안 상승함

    센서 작동 원리

     * 큰 SOIC-16 칩의 데이터시트를 찾았음. BISS0001은 적외선 모션 센서 칩임
     * 일반적으로 모션 및 속도 감지(도플러) 레이더는 연속 캐리어를 송출하고 수신된 신호를 송신된 캐리어와 혼합하여 저주파 IF 신호를 생성함. 움직이는 물체에서 반사되는 신호는 송신된 신호와 위상이 천천히 변하여 몇 헤르츠의 비트 주파수를 생성함
     * 내 모듈에서는 IF 신호가 핀 14로 들어가지만, 칩은 핀 16에서 증폭된 복사본을 출력함

    마법의 비밀

     * 보드의 오른쪽은 증폭기, 비교기 및 타이머로 작동하는 BISS001임. RF 관련 작업은 보드의 왼쪽에서 소수의 부품으로 수행됨
     * 첫 번째로, 전체 시스템은 3.18 GHz 주파수에서 작동하는 단일 트랜지스터 발진기임
     * 발진기는 20 MHz에서 펄스화되어 발진기에서 이 파형을 생성함

    초재생 수신기

     * 발진기가 작동하면서 33 pF 커패시터를 변경하여 발진기가 더 이상 작동할 수 없을 때까지 에미터 전압을 상승시킴. 이 시점에서 220옴 저항이 커패시터를 방전시켜 몇 나노초 만에 발진을 재시작함
     * 이 펄싱은 초재생 수신기로 작동하게 함. 트랜지스터의 이득이 1을 초과하면 발진기가 즉시 시작되지 않음. 공명기에 있는 신호는 증폭되어 커패시터를 충전하고 주기를 재시작할 때까지 계속 증폭됨

    레이더의 성능

     * 실내에서는 최대 5미터의 범위로 잘 작동하지만, 실외에서는 성능이 매우 불안정함

    S-밴드 송신기

     * 20 MHz 펄싱을 유발하는 커패시터를 제거하여 송신기로 변환함. 발진기 자체가 믹서로 작동하여 수신된 신호를 다운컨버팅함

    바이스타틱 레이더

     * 다른 수정되지 않은 모듈을 수신기로 사용하여 더 일관된 반환 신호를 얻음. 그러나 수신기는 송신기에서 나오는 RF에 의해 방해받아 먼 거리의 반환 신호는 약해짐
     * FFT를 실행하거나 IF에서 제로 크로싱을 감지하여 속도 센서로 잘 작동함

    GN⁺의 의견

     * 이 기사는 저렴한 가격의 마이크로파 모션 센서의 작동 원리를 이해하는 데 매우 유용함
     * 실내에서는 잘 작동하지만 실외에서는 성능이 불안정하다는 점에서 한계가 있음
     * 유사한 기능을 가진 다른 제품으로는 PIR(수동 적외선) 센서가 있음
     * 새로운 기술을 채택할 때는 실내외 환경에서의 성능 차이를 고려해야 함
     * 초재생 수신기의 원리를 이해하면 다른 RF 응용 분야에서도 응용 가능함

        Hacker News 의견

     * 2.4Ghz Wi-Fi CSI 레이더는 $20 ESP32 보드로 구현 가능함
          + Espressif는 호흡이나 씹기와 같은 미세한 움직임도 감지할 수 있다고 주장함
          + 모든 ESP32 시리즈 마이크로컨트롤러와 호환되며 하드웨어 변경이 필요 없음
     * 2024년 AI/NPU 노트북은 Wi-Fi 7과 결합하여 RF 레이더와 온디바이스 추론을 통해 인간 활동을 식별할 수 있음
     * 관련 자료:
          + DIY Radio Telescope: WiFi를 볼 수 있는 카메라 제작 (2019)
          + IEEE 802.11bf 표준을 통해 2024년까지 Wi-Fi 장치가 객체 센서로 변환될 예정 (2021)
          + 자동차 레이더가 객체의 속도를 측정하는 방법 (2024)
          + Wi-Fi 감지가 어떻게 사용 가능하게 되었는지 (2024)
     * HB100 분해를 떠올리게 하지만, 이 제품은 IC가 있어 더 이해하기 쉬움
     * LD2410 장치가 인간에게 안전한지 궁금함
          + ESPHome과 함께 침실에서 사용하려고 함
          + 저전력이고 안전하다고 조사했지만, 추가 피드백을 원함
     * LD2410 (B)는 다른 옵션이며 UART를 통해 작동함
          + 약 $5로 더 비싸지만 더 많은 구성 옵션을 제공함
     * Wiener 함수는 아날로그 응용 프로그램으로도 사용되며, WW II에서 비밀리에 사용됨
          + 현재는 핸드셋과 eNodeB 통신에도 사용됨
     * 이 센서의 사용자 매뉴얼에서 보안 모니터링을 가능한 응용 프로그램으로 언급함
          + mm 파 레이더의 감지를 방지할 수 있는 간단한 방법이 있는지 궁금함
     * Pi Pico의 MCU rp2040도 $1에 구매 가능함
          + 저렴한 해킹에 좋은 시기임
     * USB C mm 파 ""레이더""가 홈 자동화에 연결 가능함
          + 가격은 $11에서 $20 사이로 기능이 풍부함
          + 직접 제작하고 싶다면 ESP home의 프로젝트를 참고할 수 있음
     * 이러한 장치들을 자주 사용해왔으며, 작동 방식을 알게 되어 좋음
     * LD2410도 잘 작동함 (케이블도 구매할 것, 비표준 핀이 있음)
"
"https://news.hada.io/topic?id=15632","Sleep Number 침대 루트 접근 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Sleep Number 침대 루트 접근 방법

  동기

     * 몇 년 동안 Sleep Number 침대의 로컬 네트워크 접근 가능성을 탐구해왔음
     * HomeKit을 통해 침대 설정을 제어할 수 있는 homebridge 플러그인을 만들었음
     * Sleep Number에서 API 요청 빈도가 높아져 플러그인을 비활성화하라는 요청을 받았음
     * 로컬 네트워크 접근을 통해 서버를 우회하는 방법을 찾기로 결심했음

  사전 준비 사항

     * Sleep Number Hub 모델 번호: 360SIQ01D
     * UART to TTY 장치 및 기타 하드웨어 도구 필요
     * USB-A 플래시 드라이브 필요

  루트 접근 권한 획득

    1. J16 헤더에 UART 장치 연결
    2. UART 장치에 콘솔 연결 (baud rate: 115200)
    3. 허브 전원을 켜고 2초 내에 <SPACE>를 눌러 자동 부팅 시퀀스를 중지
    4. 부팅 환경 변수 편집
          + 기본 환경 변수 백업
          + bootcmd 변수에서 run set_bootargs; 제거
          + bootargs 변수에 다음 추가:
console=ttymxc0,115200 root=/dev/mmcblk${linux_mmcdev}p1 rootwait rdinit=/bin/bash -- -c ""sed -i 's/LMR=`.*`/LMR=let_me_root/' /init; exec /init""

    5. 첫 부팅 시 ""let_me_root"" 파일이 있는 플래시 드라이브 삽입
    6. 루트 파티션을 rw로 다시 마운트하고 let_me_root 파일 추가
    7. SSH 접근 설정

  로컬 네트워크 제어 및 모니터링 서버 생성

     * Python 2.7.18을 사용하여 HTTP 서버 설정
     * /bam/scripts 디렉토리의 스크립트를 실행할 수 있는 HTTP 서버 스크립트 작성
     * 스크립트를 허브에 복사하고 실행

    rc.d 스크립트 추가

     * /real.root 파티션에 rc.d 스크립트 추가
     * 스크립트를 허브에 복사하고 적절한 위치로 이동
     * 필요한 심볼릭 링크 추가

    유용한 명령어

     * /bio 스크립트에서 다양한 침대 제어 명령어 사용 가능
     * 예시 명령어:
          + arg=PSNL: 왼쪽 침대 측면의 마지막 설정된 수면 번호 값 가져오기
          + arg=PSNS&arg=L100: 왼쪽 침대 측면의 수면 번호를 100으로 설정

  다음 단계

     * /bam 루트 디렉토리의 침대 제어 기능 탐색
     * SSH 터널을 통해 Sleep Number 서버와 통신하는 허브의 보안 문제 고려
     * SleepIQ 앱을 대체할 수 있는 간단한 웹 앱 작성

  부록: 허브의 원래 U-Boot 환경 변수

     * baudrate=115200
     * bootcmd=run find_board_name; run set_bootargs;setenv boot_mmcdev 0; run bootcmd_mmc;setenv boot_mmcdev 1; run bootcmd_mmc
     * 기타 변수들...

  GN⁺의 의견

     * 이 가이드는 Sleep Number 침대의 로컬 네트워크 접근을 가능하게 하여 사용자에게 더 많은 제어 권한을 제공함
     * 허브의 보안 문제를 고려할 때, 외부 인터넷 연결을 끊는 것이 좋음
     * 비슷한 기능을 제공하는 다른 스마트 홈 제품들도 존재함
     * 새로운 기술을 도입할 때는 보안과 유지보수 문제를 신중히 고려해야 함

        Hacker News 의견

     * 과거에 스마트 기능이 없는 침대를 사용했음
          + 두 개의 유선 컨트롤러가 펌프에 연결되어 있었음
          + 인터넷이나 Linux 마이크로컨트롤러가 필요하지 않았음
          + 해킹 걱정 없이 편안하게 잠을 잤음
     * Sleep Number 서버와 SSH 터널을 통해 통신하는 허브에 관심이 있음
          + PubkeyAuth 또는 비밀번호를 사용하는지 궁금함
          + DNS 하이재킹 가능성에 대해 상상해 봄
          + Homer Simpson의 유명한 말처럼 ""침대가 올라가고 내려감""을 인용함
     * Eight Sleep Pod 3에 접근하는 유사한 방법이 있음
          + 일부 모델은 수정 가능한 MicroSD 카드를 포함함
          + TFA에서 사용된 방법이 카드 없이 루트 접근을 얻는 좋은 방법일 수 있음
          + Eight Sleep이 펌웨어 업데이트를 서명하지만, 서명에 사용된 개인 키도 함께 보냄
     * Eight Sleep 침대를 해킹하는 글이라고 생각했음
          + 실제 ""Number Sleep Hub"" 사진을 보고 놀랐음
          + Eight Sleep과 Sleep Number라는 두 회사가 물 냉각 침대를 만든다는 사실에 충격을 받음
     * 다음은 랜섬웨어에 대한 농담
          + ""1000달러를 지불하지 않으면 다음 달 동안 침대에서 잘 수 없음""
     * 인터넷이 끊겨서 침대 온도를 조절할 수 없는 상황이 불편함
     * Sleep Number 침대를 사지 않기로 결심함
          + 중국으로 아웃소싱된 후 내부 바플이 부러진 두 개의 매트리스를 경험함
     * 침대가 Linux를 실행해야 하는 이유에 의문을 가짐
          + 1GB RAM과 전체 OS가 필요한 침대가 왜 필요한지 이해할 수 없음
          + WiFi 연결이 없는 세탁기를 찾는 것도 어려웠음
          + 스마트 기기를 피하는 것이 점점 더 어려워지고 있음
     * 납땜 도구를 쇼핑 목록에 추가할 것을 권장함
"
"https://news.hada.io/topic?id=15634","RegreSSHion: glibc 기반 Linux 시스템의 OpenSSH 서버에서 원격 코드 실행(RCE)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      RegreSSHion: glibc 기반 Linux 시스템의 OpenSSH 서버에서 원격 코드 실행(RCE)

요약

     * OpenSSH의 보안 취약점 발견: OpenSSH 서버(sshd)에서 신호 핸들러 경합 조건으로 인한 원격 코드 실행(RCE) 취약점 발견. 이 취약점은 기본 설정에서 sshd에 영향을 미침.
     * 취약점의 기원: 이 취약점은 2006년에 보고된 CVE-2006-5051의 회귀로, 2020년 10월에 OpenSSH 8.5p1에서 도입된 코드 변경으로 인해 발생.
     * 취약점의 영향: glibc 기반의 Linux 시스템에서 원격으로 악용 가능하며, sshd의 특권 코드에 영향을 미쳐 루트 권한으로 원격 코드 실행 가능.
     * 취약점 악용 방법: 이 취약점을 악용하기 위해서는 특정 코드 경로를 찾아야 하며, 이를 적절한 시점에 중단시켜야 함. 이를 위해 오래된 OpenSSH 버전에서부터 시작하여 최신 버전으로 확장.
     * 패치 및 완화: 취약점을 해결하기 위한 패치와 완화 방법 제공.

SSH-2.0-OpenSSH_3.4p1 Debian 1:3.4p1-1.woody.3 (Debian 3.0r6, 2005년)

  이론

     * SIGALRM 핸들러: 이 버전의 SIGALRM 핸들러는 packet_close()를 호출하며, 이는 buffer_free()를 호출하고, 이는 xfree()와 free()를 호출함. free()는 비동기 신호 안전하지 않음.
     * malloc 코드 분석: malloc 코드에서 free() 호출이 SIGALRM으로 중단되고, SIGALRM 핸들러 내에서 다시 호출될 때 취약점을 악용할 수 있는 경로를 발견.

  실습

     * 공격 방법: DSA 공개 키를 파싱하는 코드에서 free() 호출을 중단시키고, SIGALRM 핸들러 내에서 이를 악용하여 원격 코드 실행을 달성.
     * 경합 조건 승리: 이 경합 조건을 승리하기 위해 약 10,000번의 시도가 필요하며, 평균적으로 1주일 정도 소요.

  타이밍

     * 타이밍 전략: 네트워크 지연을 최소화하기 위해 마지막 바이트를 마지막 순간에 전송하고, 라운드 트립 시간을 추적하여 타이밍을 조정. 이를 통해 경합 조건 승리 확률을 높임.

SSH-2.0-OpenSSH_4.2p1 Debian-7ubuntu3 (Ubuntu 6.06.1, 2006년)

  이론 1차

     * SIGALRM 핸들러: 이 버전의 SIGALRM 핸들러는 packet_close()를 호출하지 않으며, malloc 함수가 항상 잠금을 걸기 때문에 다른 해결책 필요.
     * PAM 사용: PAM의 pam_end()가 비동기 신호 안전하지 않음을 발견하고, 이를 악용할 수 있는 경로를 탐색.

  이론 2차

     * pam_start() 분석: pam_start()가 중단될 경우 PAM 구조체가 일관성 없는 상태로 남을 수 있으며, 이를 SIGALRM 핸들러 내에서 악용 가능.
     * House of Mind 기법: 공격을 위해 House of Mind 기법을 사용하여 메모리 할당을 조작하고, 루트 권한으로 원격 코드 실행 달성.

  실습

     * 공격 방법: 긴 사용자 이름을 사용하여 메모리 할당을 조작하고, 여러 번의 pam_start() 호출을 통해 경합 조건 승리 확률을 높임.

  타이밍

     * 타이밍 전략: 이전 Debian 버전에서 사용한 타이밍 전략을 재사용하여 경합 조건 승리 확률을 높임. 평균적으로 1-2일 소요.

SSH-2.0-OpenSSH_9.2p1 Debian-2+deb12u2 (Debian 12.5.0, 2024년)

  이론

     * SIGALRM 핸들러: 이 버전의 SIGALRM 핸들러는 syslog()를 호출하며, 이는 비동기 신호 안전하지 않은 함수들을 호출함.
     * glibc 분석: glibc의 syslog()가 malloc을 호출하며, 이는 비동기 신호 안전하지 않음. 또한, glibc의 malloc 함수가 단일 스레드일 때 잠금을 걸지 않음.

패치 및 완화

     * 패치: OpenSSH 개발자들에게 취약점을 보고하고, 이를 해결하기 위한 패치 제공.

GN⁺의 의견

     * 보안 중요성: OpenSSH는 매우 중요한 보안 소프트웨어로, 이 취약점은 매우 드물게 발생한 사례임.
     * 취약점 악용 난이도: 이 취약점을 악용하기 위해서는 매우 정교한 타이밍과 많은 시도가 필요함.
     * 대체 솔루션: OpenSSH 외에도 다양한 보안 솔루션이 존재하며, 이를 함께 사용하는 것이 좋음.
     * 기술적 도전: 이 연구는 매우 높은 기술적 도전을 요구하며, 보안 연구자들에게 큰 영감을 줄 수 있음.
     * 취약점 완화: 최신 보안 패치를 적용하고, 보안 설정을 강화하는 것이 중요함.

        Hacker News 의견

     * RCE 수정이 거의 한 달 전에 공개적으로 ""은밀하게"" 이루어졌음
          + PerSourcePenalties가 활성화되면 sshd(8)는 자식 사전 인증 세션 프로세스의 종료 상태를 모니터링함
          + 클라이언트가 인증을 반복적으로 시도하거나 sshd가 충돌할 때 페널티를 기록함
          + 이 패치는 바이너리 아키텍처를 변경하여 특정 취약점을 제거하고 전체 익스플로잇 클래스를 완화함
     * 버그를 도입한 diff에서 함수가 다음과 같이 리팩토링됨
          + 원래 함수: sigdie(const char *fmt,...)
          + 리팩토링된 함수: sshsigdie(const char *file, const char *func, int line, const char *fmt, ...)
          + #ifdef가 누락됨
          + 더 많은 사람들이 풀 리퀘스트를 검토했다면 예방할 수 있었을 것임
     * OpenSSH 릴리스 노트에서 흥미로운 코멘트
          + 32비트 Linux/glibc 시스템에서 ASLR과 함께 성공적인 익스플로잇이 시연됨
          + 64비트 시스템에서도 가능할 것으로 보임
     * OpenBSD는 SIGALRM 핸들러가 syslog_r()를 호출하여 이 취약점에 영향을 받지 않음
          + 비동기 신호 안전 버전의 syslog()를 사용함
          + 신호 핸들러 내의 코드 양을 최소화하는 리팩토링이 필요했음
     * musl의 syslog(3)를 조사한 결과, glibc와 달리 쉽게 익스플로잇되지 않음
          + 모든 것이 스택 또는 재진입 보호된 정적 변수에 있음
     * FreeBSD용 패치가 나왔으며, glibc를 사용하지 않기 때문에 영향을 받지 않을 가능성이 높음
     * sshd_config 파일에서 'LoginGraceTime 0'을 설정하면 문제를 완화할 수 있음
          + 이는 서비스 거부 공격에 취약하게 만들지만 원격 코드 실행을 방지함
     * Debian 12용 패치가 나왔으며, Debian 11은 영향을 받지 않음
     * OpenSSH 릴리스 노트와 최소 패치 링크 제공
     * 독립적인 입장에서 단일 취약점을 찾는 것만으로도 충분해야 한다고 생각함
          + 전체 체인을 찾아야만 사람들이 심각하게 받아들이거나 보상금을 지급하는 경향이 있음
"
"https://news.hada.io/topic?id=15629","Cloudflare의 영업 방식: 24시간 안에 $12k 지불을 강요받다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Cloudflare의 영업 방식: 24시간 안에 $12k 지불을 강요받다

  요약

     * 글 작성자는 Cloudflare의 비즈니스 플랜 ($250/월)을 사용중이었으나, Cloudflare가 갑자기 $120,000를 선결제 하라고 요구하며 24시간 내 결제를 요구하였음
     * 요구를 거부하자 모든 도메인을 삭제해 큰 다운타임 발생

  배경

     * 글 작성자는 MAU(월간 활성 사용자)가 400만의 온라인 카지노를 운영하는 Sysops 엔지니어임
     * Cloudflare의 비지니스 플랜을 사용하며 CDN과 DDOS 보호 서비스를 활용중이었음

  타임라인

     * 2024년 4월 19일, 이메일을 통해 Cloudflare 측으로 부터 Enterprise 플랜으로 전환을 요구받음
     * 2024년 5월 3일, 재차 Cloudflare 측으로 부터 추가 도메인 사용 문제를 지적하며 Enterprise 플랜으로 업그레이드를 요구받음
     * 2024년 5월 7일, Cloudflare 의 Trust and Safety 팀과 소통 중 다시 Sales팀으로 담당 창구가 전환되며, $10,000/월 요금으로 계약을 제안받음.
          + 이 과정에서, 대안을 찾기 위해 Fastly에 테스트 도메인을 등록하며 Fastly 측에 접촉함
     * 2024년 5월 16일, 글 작성자 회사의 CEO는 Cloudflare과의 협상 중 합리적인 계약을 위해 경쟁사와도 이야기를 나누고 있다고 언급함
          + 언급 후 몇 시간 지나지 않아, Cloudflare 측이 ToS (서비스 약관) 위반을 이유로 일방적으로 등록된 모든 도메인을 삭제함
          + Cloudflare 측에 문의를 남겼으나, 어떠한 회신도 받지 못했음
          + 이에 급히 Fastly 로 이전하게 되며, 약 2시간의 다운 타임 발생

  조언

     * 다수의 도메인 사용, 대용량 트래픽 등이 Enterprise 전환 요구의 근거로 사용될 수 있음
     * Cloudflare를 사용할 때에는 24시간 내에 이동할 준비를 해야함
     * Cloudflare에 도메인을 직접 등록하지 말 것, 구성을 백업할 것, 표준을 준수하는 기술만 사용할 것.
     * Cloudflare가 아닌 다른 대안도 고려할 것

   월 만달러정도면 괜찮은거같은데... 라고 생각하면 너무 한국의 지나친 요금가격에 익숙해진 탓일까요

   안녕하세요 지나가던 CDN업 관련자입니다.
   CDN트레픽 약정용량이나 방어자원, 리전을 어디로 두셨었나요?? 과금 단가가 매우 궁금하네요

   원문 작성자분과 이곳 작성자가 다르므로 원문 링크에서 질문하셔야 할것 같네요

   글 작성 전 중복 검사를 위해 충분히 찾아보았다고 생각했는데, 혹시나 하고 다시 찾아보니 1달 전 이미 올라온 소식이었군요. 중복 아티클을 올려서 죄송합니다.
     * GN⁺: Cloudflare가 24시간 내에 12만 달러를 지불하라고 강요한 후 우리 웹사이트를 차단함
"
"https://news.hada.io/topic?id=15613","FUTO 키보드 출시키보드 출시

     * FUTO 키보드 소개
          + 인터넷 연결 없이 작동하는 현대적인 키보드
          + 개인정보와 보안을 중시함
     * 주요 기능
          + 100% 오프라인, 100% 개인 정보 보호
               o 인터넷 연결 없이 작동
               o 데이터 전송 및 저장 없음
          + 오프라인 음성 입력
               o 인터넷 연결 없이 음성 입력 가능
          + 스와이프 입력
               o 부드러운 스와이프로 빠르게 타이핑 가능 (알파 버전)
          + 스마트 자동 수정
               o 타이핑 실수 줄여줌
          + 예측 텍스트
               o 타이핑 중 지능형 철자 제안
          + 키보드 개인화
               o 다양한 테마 선택 가능
     * FUTO 키보드 다운로드
          + 현재 알파 버전으로, 버그, 충돌 또는 누락된 기능이 있을 수 있음
          + 피드백과 버그 리포트를 환영함
          + 다운로드 방법
               o Play Store에서 다운로드 (알파)
               o F-Droid에서 다운로드 (알파)
               o Obtainium에서 다운로드 (알파)
               o 독립형 APK로도 제공되지만 자동 업데이트는 받지 못함
     * FUTO 키보드 지원
          + FUTO 키보드 라이선스를 일회성 결제로 구매 가능
          + 광고 없이 완전한 기능을 유지하기 위한 기여
          + 새로운 기능과 개선 사항을 제공하는 데 도움
          + 반복 구독 없음
     * FUTO 음성 입력
          + 다른 키보드와 호환 가능
          + FUTO 음성 입력 탐색
     * 커뮤니티 참여
          + Zulip
               o #Keyboard 채널 참여
          + 소스 코드
               o 소스 코드 확인
          + Discord
               o Discord 열기
     * 개인정보 보호 정책
          + FUTO 웹사이트에서 확인 가능

GN⁺의 의견

     * FUTO 키보드는 개인정보 보호와 보안을 중시하는 사용자에게 매우 유용함
     * 오프라인 기능은 데이터 유출 위험을 줄여줌
     * 알파 버전이므로 안정성에 대한 피드백이 중요함
     * 비슷한 기능을 가진 다른 키보드로는 Gboard와 SwiftKey가 있음
     * 새로운 기술을 채택할 때는 안정성과 사용자 경험을 고려해야 함

        Hacker News 의견

     * Louis Rossmann 비디오에서 본 후 몇 시간 동안 사용해 본 결과, Google Voice Dictation보다 훨씬 높은 품질과 신뢰성을 보임
          + 단점: 구두점 입력이 어려움, 키보드 인터페이스가 매우 고급스러움
     * Google 키보드의 스와이프 기능이 잘 작동하지 않는 점이 불편함
          + 스와이프 입력이 모바일 입력에서 중요함
          + 키보드 레이아웃을 재배치하여 오류를 최소화하고 정확도와 속도를 높이는 프로젝트를 고려 중임
     * FUTO 키보드 리뷰: 스와이프 정확도가 약간 떨어지지만 Google의 데이터 수집보다는 나음
          + 음성 입력 기능이 괜찮음
          + 전체 문장을 말하고 분석하여 문법을 적용하는 방식에 익숙해져야 함
     * SwiftKey는 키를 누른 위치에 따라 자동 수정 기능이 다르게 작동함
          + FUTO도 이런 기능이 있는지 궁금함
     * 스페이스 키를 누르려다 점 키를 실수로 누르는 경우가 많음
          + 스페이스 키를 오른쪽으로 조금 줄여서 두 키 사이의 간격을 넓히는 옵션이 필요함
     * 안드로이드에서 오프라인으로 잘 작동하는 음성 인식 키보드가 드디어 나옴
          + 오픈 소스가 아닌 점이 아쉬움
     * Zulip 채팅방마다 다른 이메일/비밀번호를 요구하는 점이 불편함
          + Google 로그인 사용으로 접근성을 높일 수 있음
     * SwiftKey를 방화벽 규칙으로 차단하여 사용 중임
     * FUTO 키보드의 개방성 부족이 우려됨
          + FUTO Keyboard는 ""FUTO Source First License 1.0"" 라이선스를 사용함
          + AOSP 키보드(LatinIME)의 포크임
          + 소스 코드는 여기에서 확인 가능함
          + 오픈 소스 키보드가 더 중요함
          + Google의 STT 기능 변화가 불편함
     * 가격 정보를 확인하기 어려움
     * 안드로이드에서 사용 가능한 개인용 및 오픈 소스 키보드에 대한 질문
          + OpenBoard를 사용 중이나 2022년 이후 업데이트가 없음
"
"https://news.hada.io/topic?id=15682","Xcapture-BPF – Linux를 위한 Xray 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Xcapture-BPF – Linux를 위한 Xray 도구

     * 0x.tools는 리눅스에서 애플리케이션 성능을 분석하기 위한 오픈 소스 유틸리티 모음
     * 배포의 간편성과 최소한의 종속성을 목표로 하여 시스템 문제 해결의 마찰을 줄임
     * OS 업그레이드, 커널 모듈 설치, 무거운 모니터링 프레임워크, Java 에이전트 또는 데이터베이스 설치가 필요 없음
     * 개별 스레드 수준의 활동을 측정할 수 있으며, 코드 실행, 슬립 상태, 시스템 호출 및 커널 대기 위치 등을 추적하고 샘플링함

  xcapture-bpf & xtop 2.0.2 베타 공개

     * xcapture-bpf와 xtop은 리눅스의 top 도구와 유사하지만, eBPF를 사용하여 성능 데이터를 다양한 각도에서 볼 수 있음
     * 시스템 수준 개요와 개별 스레드 활동, 커널 이벤트까지 드릴다운 가능
     * eBPF는 완전히 프로그래밍 가능하며, 이를 최대한 활용할 계획임

  xcapture-bpf 터미널 하이라이팅 및 스택타일

     * 터미널 텍스트 검색/하이라이팅 및 스크롤 기능이 새로운 스택타일 형식과 잘 작동함
     * 스택타일은 함수 이름뿐만 아니라 파일 이름이나 메모리 할당 이유 등 다양한 정보를 포함할 수 있음

  xcapture-bpf 설치

     * xcapture-bpf는 아직 베타 버전이므로 프로덕션 시스템에서는 실행하지 말 것
     * eBPF를 사용하며, 현재 BCC와 python3를 보고 프론트엔드로 사용함
     * RHEL 8.1 또는 Ubuntu 24.04 이상에서 테스트됨

  포함된 도구

     * 실시간 인터랙티브 도구와 저주파 프로파일링 도구 제공
     * 주요 도구 설명:
          + psn: 현재 상위 스레드 활동 샘플링
          + xcapture: 저오버헤드 스레드 상태 샘플러
          + xcapture-bpf: eBPF를 사용한 저오버헤드 프로그래머블 스레드 상태 샘플러
          + syscallargs: 시스템 호출 및 인수 목록
          + schedlat: 단일 프로세스의 CPU 스케줄링 지연 시간 표시
          + run_xcapture.sh: xcapture를 계속 실행하는 간단한 데몬 스크립트
          + run_xcpu.sh: CPU에서 스레드의 저주파 연속 스택 샘플링

  사용법 및 예제 출력

     * xcapture를 사용하여 리눅스 스레드 활동 샘플링 및 고정 폭 출력 표시
     * CSV 파일로 출력하여 명령줄에서 성능 분석 가능

  설치 및 사용법

     * xcapture, schedlat, psn은 표준 리눅스 도구처럼 /proc 파일 시스템을 샘플링함
     * 추가 구성 없이 리눅스 커널 버전 2.6 이상에서 작동

  FAQ

     * 0x.tools는 GPL v3 라이선스의 오픈 소스 제품임
     * 측정 오버헤드는 서버 CPU 용량의 1% 미만
     * 프로덕션 환경에서 안전하게 사용 가능
     * Perf와 eBPF 대신 /proc 샘플링을 사용하는 이유: 기존 기업에서 대규모 프로덕션용으로 eBPF를 사용할 수 없기 때문

  GN⁺의 의견

     * 0x.tools는 리눅스 시스템 성능 분석을 위한 강력한 도구 모음임
     * eBPF를 사용하여 성능 데이터를 다양한 각도에서 볼 수 있어 유용함
     * 프로덕션 환경에서 안전하게 사용할 수 있도록 설계됨
     * 다른 성능 분석 도구와 비교하여 낮은 오버헤드와 간편한 설치가 장점임
     * eBPF와 같은 최신 기술을 활용하여 성능 분석의 정확성과 유연성을 높임
"
"https://news.hada.io/topic?id=15693","Flitter - Flutter와 비슷한 문법의 웹용 데이터 시각화 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Flitter - Flutter와 비슷한 문법의 웹용 데이터 시각화 라이브러리

     * Flutter의 구문과 선언적 프로그래밍 방식을 활용하여 웹에서도 고성능 그래픽과 UI를 구현
          + 모바일 개발자가 쉽게 웹 환경에 적응 가능
     * 웹 앱에서 복잡한 데이터 시각화, 대화형 차트, 다이어그램 및 그래픽 편집기를 쉽게 구현할 수 있도록 설계
     * 컴포넌트 기반 접근 방식을 통해 코드 재사용성을 높임
     * React, Svelte 등에 심리스하게 연동

  주요 특징

     * 렌더 객체 트리: 효율적인 렌더링을 위해 렌더 객체 트리를 사용하여 복잡한 레이아웃을 쉽게 관리하고 조작할 수 있음
     * 선언적 프로그래밍: 선언적 패러다임을 따라 값이 변경되면 화면이 자동으로 업데이트되어 애플리케이션 상태 관리가 단순해짐
     * 최적화된 렌더링: 렌더러 파이프라인에서 재렌더링, 페인팅, 레이아웃 재계산을 관리하고 필요한 부분만 업데이트하도록 최적화함
     * Box 모델 레이아웃: 사용자가 익숙한 Box 모델을 사용하여 레이아웃을 쉽게 구성할 수 있음
     * SVG와 Canvas 지원: SVG와 Canvas를 모두 지원하여 다양한 그래픽 요구사항을 충족함. 개발자는 필요에 따라 적절한 렌더러를 선택할 수 있음
     * 다양한 응용 분야: 차트, 다이어그램, 데이터 시각화, 그래픽 에디터 등 다양한 분야에서 활용 가능함

   멋집니다~~

   방화벽으로 프록시 서버 통해서 접근하면 소스하단 결과가 표시가 안됩니다. 모바일에서는 잘 됩니다.

   제작자입니다. 관심 가져주셔서 압도적으로 감사 ㅠ_ㅠ

   도메인도 샀어요 flitter.pages.dev -> flitter.dev ㅎㅎ

   예전에 한번 보고 스타찍어놨었는데 문서화가 더 좋아졌네요.

   ㅎㅎ 감사합니다. 문서는 계속 개편하고 있습니다. 지금은 튜토리얼 대대적으로 업데이트 중입니다!

   SVG와 Canvas 타겟인 점이 기존 주류 프레임워크들과 겹치지 않는 것 같아서 좋아보여요!!
   홧팅 잘되기를 바랍니다.

   랜딩페이지 텐션이 장난 아니네요...

   감사합니다 ㅎㅎ
"
"https://news.hada.io/topic?id=15700","나만의 리눅스 기반 스마트TV 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          나만의 리눅스 기반 스마트TV 만들기

     * 오래된 리눅스 노트북으로 동작
     * Firefox 브라우저로 특정 HTML 페이지를 표시하고, 각 앱 아이콘은 그냥 웹사이트로 가는 링크

셋업

     * 할인 기간에 55인치 삼성 스마트 TV를 구매함. 기본적으로 삼성 Tizen OS가 탑재되어 있음
     * 모니터로 사용하는 노트북은 예전에 얼그레이 티를 키보드에 쏟아 키보드만 작동하지 않는 상태임. 홈서버로 사용하기에 적합. 그래서 내 스마트 TV 이름은 EarlGreyTV 임
     * 노트북을 TV 뒷면에 고정시켜 깔끔하게 정리하면서도 접근성을 유지함

소프트웨어

     * 노트북에는 데비안 리눅스와 Sway 데스크탑 환경을 설치함. Sway는 최소한의 설정으로 코드를 통해 구성할 수 있어서 선택함
     * 로그인 시 Sway가 Firefox를 전체 화면으로 실행하도록 설정함
     * Firefox는 사용자 정의되어 있음. 홈페이지는 EarlGreyTV HTML 파일로 설정되어 있고, 전체 화면에서 주소 표시줄이 보이지 않도록 하는 등의 작업을 함
     * 볼륨을 변경할 때 보여지는 사용자 정의 알림을 추가함

리모컨

     * 마우스와 키보드 입력에 의존하는 시스템이기 때문에 리모컨 설정이 까다로움
     * 에어마우스를 사용하기로 결정함. 자이로스코프/가속도계를 사용하여 기울이는 방향으로 커서를 이동시킴
     * WECHIP W3 에어마우스를 사용하며, 뒷면에 미니 키보드가 있음. 약간 허술하고 가벼운 느낌이 아쉬움
     * 재중심 버튼을 설정하여 사용성을 크게 향상시킴. 그렇지 않으면 커서가 화면 가장자리에 끝나 돌아오지 않을 위험이 있음

CEC 어댑터

     * CEC는 HDMI 기능으로, 장치 간 명령 전송이 가능함
     * CEC를 통해 노트북을 대기 모드로 전환하면 TV 화면도 꺼지도록 설정함. 마찬가지로 노트북이 다시 켜지면 TV 화면도 다시 켜짐
     * 노트북의 HDMI 포트에서 CEC를 지원하지 않아 CEC USB 어댑터를 구매해야 했음. USB 연결에서 CEC 메시지로 HDMI 연결을 보강하는 방식으로 작동함

아이폰에서 캐스팅

     * 아이폰에 있는 콘텐츠를 TV로 보내고 싶은 경우가 있음
     * 아이폰에 단축어(Shortcut)를 만듦. 앱에서 URL을 공유할 때 ""공유 시트""에 표시되도록 구성됨
     * 바로가기가 URL을 받으면 HTTP 요청을 통해 EarlGreyTV 컴퓨터로 URL을 보냄
     * TV 쪽에서는 간단한 서버가 URL을 수신 대기하고 있음. 수신하면 Firefox 주소 표시줄에 붙여넣음
     * 이 설정을 통해 휴대폰에서 콘텐츠 링크를 간단히 공유할 수 있음
          + 이걸 캐스팅이라고 부르기에는 뭐하지만 필요에 충분히 부합함
     * 구현 시 Firefox 주소 표시줄이 잠깐 보이면서 스마트 TV 느낌이 깨지는 단점이 있지만, 몇 초 정도만 보임

장단점

     * 가장 큰 단점은 복잡함. ""그냥 작동하는"" 상태에 이르기까지 오랜 시간이 걸림. 비전문가도 사용할 수 있지만 스스로 디버깅할 수 없는 사람에게는 설치하지 않을 것임
     * 또 다른 단점은 리모컨임. 익숙해지긴 했지만 처음 사용하는 사람들은 사용법 설명이 필요함
     * 브라우저를 기반으로 전체 시스템을 구축한 것을 매우 기쁘게 생각함. 업데이트나 호환성 걱정 없이 ""앱""을 TV에 쉽게 추가할 수 있게 해줌
     * 웹사이트로 존재하는 한 모든 앱을 추가할 수 있음. 예를 들어 Hacker News를 ""설치""하거나 https://cataas.com/cat을 사용하는 ""무작위 고양이"" 앱 같은 바보 같은 것들을 추가할 수 있음
     * 자주 방문하는 사이트의 특정 부분에 대한 바로가기를 추가할 수 있음
     * 일반적으로 가장 큰 장점은 세밀한 제어가 가능하다는 것임. 스크립트 작성, 버튼 재프로그래밍, 미적인 부분 변경 등이 자유로움
     * 브라우저 확장 프로그램을 활용하여 광고/스폰서 차단기를 추가하거나 사이트 차단 일정을 설정할 수 있다는 점도 마음에 듦

결론

     * 더 많은 사람들이 이와 같은 사용자 정의 TV 셋업을 만들면 좋겠지만, 대다수의 사람들은 그냥 작동하는 간단한 것을 원한다는 것도 알고 있음
     * 이 프로젝트의 요점은 객관적으로 더 나은 스마트 TV를 만드는 것이 아니라 개인적으로 사용하고 싶은 것을 만드는 것이었음
     * 기존 스마트 TV의 사소한 불편함이 나를 사로잡아 더 나은 것을 만들려는 시도로 거대한 토끼 굴에 빠져들게 했음. 그러나 그 토끼 굴로 내려가는 것은 매우 재미있었음
     * TV를 거의 보지 않는데도 불구하고 TV 셋업을 실제로 사용하는 것보다 훨씬 더 오래 만드는 데 시간을 보냈다고 자신 있게 말할 수 있음
     * 이 프로젝트에 대한 결론은 다음과 같음: 짜증나는 것들을 개선하려는 충동에 따라 행동하는 것은 매우 재미있을 수 있음

   해커뉴스 댓글에
   LibreELEC, CoreELEC 쓰면 한방인데 왜.. 라는 답변이 있군요.
   HTPC용으로 Kodi 미디어 플레이어만 실행가능한 작은 리눅스 배포본들 입니다.

   그리고 그 아래 답변도 하나

     ""25년 넘게 다양한 HTPC(Windows Media, XBMC, Kodi, SageTV, SnapStream, MythTV, TVheadend 등 다양한 종류의 타임시프트 PVR, Windows의 MPEG 비디오 인 카드, RSS 피드 등)와 팝콘 아워 같은 다양한 기타 TV 박스, 지저분한 Android TV 박스 등을 구축한 끝에 마침내 오래된 HP EliteBook 노트북에서 Debian으로 실행되는 Plex 서버와 페어링된 AppleTV 4K에 정착하게 되었죠.
     2024년에 이런 종류의 차선책으로 문제를 해결하기에는 인생이 너무 짧고, 이제 드디어 합리적인 가격의 훌륭한 기술이 출시되었습니다.""

   사실 그냥 tivo나 fire stick 같은거 쓰는게..
"
"https://news.hada.io/topic?id=15609","AirPods 빠른 연결 보안 취약점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AirPods 빠른 연결 보안 취약점

Jolla AppSupport 분석

     * Jolla는 Sailfish OS에서 Android 앱을 실행할 수 있게 하는 AppSupport를 제공함
     * AppSupport는 Android 호환 계층으로, 사용자가 Sailfish OS에서 Android 앱을 사용할 수 있게 함

  AppSupport의 구조

     * AppSupport는 Android Open Source Project(AOSP)를 기반으로 함
     * Sailfish OS와의 통합을 위해 몇 가지 수정이 이루어짐
     * Android 앱은 별도의 컨테이너에서 실행되며, Sailfish OS와의 상호작용을 위해 특정 API가 사용됨

  AppSupport의 장점

     * 사용자는 Sailfish OS에서 Android 앱을 실행할 수 있어 앱 선택의 폭이 넓어짐
     * Sailfish OS의 보안 및 프라이버시 기능을 유지하면서 Android 앱을 사용할 수 있음
     * AppSupport는 지속적인 업데이트를 통해 최신 Android 앱과의 호환성을 유지함

  AppSupport의 한계

     * 일부 Android 앱은 완벽하게 작동하지 않을 수 있음
     * 성능이 네이티브 Android 기기보다 떨어질 수 있음
     * 특정 하드웨어 기능은 지원되지 않을 수 있음

  결론

     * Jolla의 AppSupport는 Sailfish OS 사용자에게 Android 앱을 사용할 수 있는 유용한 도구임
     * 지속적인 개선과 업데이트를 통해 사용자 경험을 향상시키고 있음

GN⁺의 의견

     * Jolla의 AppSupport는 Sailfish OS 사용자에게 Android 앱을 사용할 수 있는 중요한 기능임
     * 보안과 프라이버시를 중시하는 사용자에게 매력적일 수 있음
     * 성능과 호환성 문제는 지속적인 개선이 필요함
     * 다른 유사한 프로젝트로는 Anbox와 BlueStacks가 있음
     * 새로운 기술을 도입할 때는 호환성과 성능을 고려해야 함

        Hacker News 의견

     * Apple 기기 간 연결 시간을 약 1초에서 0.5초로 줄이는 것이 Fast Connect의 주요 목적임
          + Fast Connect 프로토콜을 사용하여 Bluetooth 사양을 위반하지 않고 두 기기가 4개의 메시지로 연결을 완료할 수 있음
          + 일반적으로 Bluetooth 연결은 복잡한 협상이 필요하지만 Fast Connect는 이를 간소화함
     * AirPods는 iPhone이나 MacBook과 함께 사용할 때만 자동으로 펌웨어를 업데이트함
          + Android 사용자는 펌웨어 업데이트가 어려움
          + Beats 기기는 Android에서 Beats 앱을 통해 업데이트할 수 있음
     * 기사에 제공된 Apple Support 링크는 인도 버전임
          + 미국 버전 링크는 다음과 같음: Apple Support US Version
          + 미국 버전에서는 AirPods Pro 2세대의 최신 펌웨어 버전이 6F8임
     * Linux에서 AirPods 기능을 구현하는 것에 대한 블로그 글을 기대하는 사용자가 있음
          + Linux에서의 구현에 대한 자세한 내용은 다른 블로그 글에서 다룰 예정임
     * 취약점에 대한 우려가 있음
          + 공격자가 사용자의 전화 통화를 도청하거나 오디오 스트림을 들을 수는 없지만, 가까운 거리에서 mac 주소를 스캔하고 자동 연결하여 소음을 재생할 수 있음
          + 유명인이나 정치인의 AirPods를 장악하는 것은 문제가 될 수 있음
     * Apple이 다른 운영체제, 특히 Android에서 AirPods 업데이트를 지원하기를 바라는 사용자가 있음
     * AirPods 업데이트는 수동으로 할 수 없고 자동 업데이트만 가능함
          + 자동 업데이트를 유도하는 방법은 불명확함
     * 설정 > Bluetooth > AirPods (i 버튼 클릭)에서 버전을 확인할 수 있음
          + 6A326 버전이 수정 사항을 포함함
     * Linux에서 AirPods 사용 시 여러 문제가 있음
          + 연결 범위가 휴대폰보다 짧고, 마이크 사용 시 오디오 품질이 나쁨
          + 연결 속도보다 다른 문제가 더 큰 불편함을 줌
          + 모든 문제를 해결하는 대체 헤드폰을 찾고 있음
     * 취약점에 대해 알지 못했지만 AirPods가 업데이트되어 있어 만족하는 사용자가 있음
"
"https://news.hada.io/topic?id=15711","HN 공개: 저렴한 SEO 연구 도구 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        HN 공개: 저렴한 SEO 연구 도구 개발

     * SEO 연구 비용 최대 90% 절감
          + SEO 도구에 과도한 비용을 지불하지 말 것
          + Telescope는 사용 기반의 SEO 연구 도구로, 표준 기능을 저렴한 가격에 제공함
     * 빠르게 더 높은 순위 달성
          + 예산 내에서 SEO 마스터하기
          + Telescope는 SEO 키워드를 연구하고 추적하는 데 필요한 모든 도구를 제공함
          + 사용 기반 가격 책정으로 많은 비용을 절약할 수 있음
     * SEO 키워드 연구
          + 더 높은 순위를 달성하기 위한 적절한 키워드를 찾고, 콘텐츠 계획에 데이터 기반 결정을 도입할 수 있음
          + 업계 최고의 제공업체를 사용하여 최상의 결과를 제공함
     * 전체 키워드 개요 제공
          + 매우 정확하고 상세한 데이터를 기반으로 SEO 전략을 수립할 수 있음
          + 키워드 난이도, 검색량, 관련 키워드 등 모든 정보를 제공함
     * 순위 확인
          + 웹사이트의 최신 순위 데이터를 모든 위치에서 확인할 수 있음
          + 웹사이트의 성과를 확인하고 시간 경과에 따른 진행 상황을 추적할 수 있음
     * 비용 절감
          + 고액의 월간 요금 없이 사용하기 쉬운 시장 선도적인 SEO 도구를 제공함
          + 위험 없이 오늘 시작할 수 있음
     * 가격
          + 다른 SEO 도구에 비해 훨씬 저렴한 비용으로 더 나은 결과를 얻을 수 있음
          + 비용을 추정하고 얼마나 절약할 수 있는지 확인할 수 있음
     * 자주 묻는 질문
          + 데이터베이스에 약 35억 개의 키워드가 있으며 매달 약 2000만 개씩 증가함
          + 데이터의 정확성, 저렴한 가격의 이유, 환불 정책 등에 대한 질문에 답변함

GN⁺의 정리

     * Telescope는 사용 기반 가격 책정으로 SEO 연구 비용을 크게 절감할 수 있는 도구임
     * 키워드 연구, 순위 확인 등 SEO에 필요한 모든 기능을 제공하며, 매우 정확한 데이터를 바탕으로 SEO 전략을 수립할 수 있음
     * 비용 절감과 효율성을 동시에 추구하는 사용자에게 매우 유용한 도구임
     * 비슷한 기능을 제공하는 다른 도구로는 Ahrefs, SEMrush 등이 있음

        Hacker News 의견

     * Ahrefs와 SemRush의 가치는 클릭스트림 데이터와 백링크의 시각화에 있음
          + 제공되는 데이터는 Keyword Planner Tool에서도 무료로 이용 가능함
          + Nightwatch.io는 무료 키워드 연구 도구를 제공하며, 더 강력한 기능을 저렴한 가격에 제공함
          + 3자 데이터 제공자가 없고, 가장 정확한 순위 데이터를 제공하지 않음
     * UI가 기본적인 데이터 제공자에 불과함
          + 다른 경쟁 제품과의 차별점이 필요함
     * SEMrush의 기본 플랜은 $1000 이상이며, 추가 기능은 $200 - $400의 추가 비용이 발생함
          + 질문 키워드, 키워드 내보내기, 키워드 태그 지정 기능이 필요함
          + 이러한 기능들이 SEMrush를 계속 사용하게 만드는 이유임
     * 대량의 LLM 생성 텍스트 시대에 이러한 도구의 중요성에 대한 질문
          + 저렴하게 키워드 최적화된 콘텐츠를 생성하는 것이 가능해짐
          + 깊이 있고 잘 연구된 기사는 특정 키워드에 집중할 필요가 없을 수도 있음
     * ahref's lite plan의 대체품인지에 대한 질문
          + ahref에서 놓치는 기능이 무엇인지 궁금함
     * 모든 SEO 도구가 동일한 백엔드 제공자를 쿼리함
          + 가격 모델 측면에서 혁신이 필요함
          + ubersuggest는 평생 가격 모델을 제공함
     * 대체 키워드, 사이트 방문, 방문자 분포, 경쟁자 순위 등의 데이터 소스에 대한 질문
          + Chrome 플러그인에서 데이터를 구매할 가능성이 있음
     * 웹사이트 홈 페이지 디자인이 TailwindUI에서 복사된 것 같음
     * 모든 도구가 너무 비쌈
     * 가치 제안과 랜딩 페이지가 명확함
          + 브라질 시장에 집중하고 있으며, 포르투갈어/브라질 키워드 커버리지에 대한 질문
          + 도구 자체가 영어로 되어 있어도 상관없음
"
"https://news.hada.io/topic?id=15719","스페이스 에이지 출시일 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            스페이스 에이지 출시일 발표

Factorio: Space Age - 출시 날짜

     * Factorio: Space Age 확장팩은 2024년 10월 21일에 출시 예정
     * 여름 휴가 이후 출시를 다듬을 시간과 크리스마스 휴가 전에 버그 수정 패치를 할 시간을 확보하기 위해 이 날짜를 선택
     * 확장팩 가격은 현재 기본 게임과 동일한 $35.00
     * Steam에서 지금 위시리스트에 추가 가능

Factorio: Space Age - 콘텐츠

     * Space Age는 플레이어가 로켓을 우주로 발사한 후의 여정을 계속
     * 새로운 세계를 발견하고 독특한 도전을 극복하며, 새로운 자원을 이용해 고급 기술을 개발
     * 행성 간 우주 플랫폼을 관리

  Space platforms - FFF-381

     * 행성 물류의 중추이자 우주로의 첫 진출
     * 행성 간 화물 운송 수단 역할을 하는 비행 공장
     * 플랫폼을 위협하는 소행성을 격추할 방어 시스템 구축
     * 소행성 조각을 잡아 연료와 탄약으로 가공
     * 플랫폼 허브와 화물 창고를 사용해 행성 간 화물 운송

  Vulcanus - FFF-386, FFF-387

     * 불타는 화산 산맥과 두꺼운 황산 안개로 덮인 지형
     * 단단한 텅스텐을 추출해 대형 채굴 드릴과 주조소 제작
     * 용암을 끌어올려 철과 구리를 대량 생산
     * 고급 금속 기술을 연구해 산업용 대장간 구축

  Fulgora - FFF-398, FFF-399

     * 생명 없는 황량한 장소
     * 밤마다 번개 폭풍으로부터 보호하고 전기를 생산
     * 오래된 문명의 고급 폐기물을 재활용해 유용한 제품으로 변환
     * 홀뮴의 고급 전자기 및 초전도 능력 해제

  Gleba - FFF-413, FFF-414

     * 다채로운 늪지대와 가벼운 안개로 덮인 풍경
     * 이국적인 식물을 발견하고 농업 타워로 수확
     * 생산물을 가공해 부패를 방지
     * 생화학 공학의 새로운 영역 탐험

  Elevated rails - FFF-378

     * 기차를 새로운 차원으로! 고가 철도로 철도 네트워크에 새로운 도전과 가능성 추가
     * 중장비 철도 램프와 지지대를 사용해 철도를 높임
     * 장애물을 넘고 바다를 건너는 교차로 설계
     * 다층 교차로를 설계해 기차 시스템 최적화

  Quality - FFF-375

     * 모든 아이템, 기계, 장비의 품질을 높임
     * 5가지 품질 등급(일반부터 전설까지) 존재
     * 새로운 품질 모듈을 연구해 고품질 아이템 제작
     * 품질 등급이 높을수록 보너스 증가, 기계는 더 빠르게 제작, 장비는 더 강력, 터렛은 사거리 증가

  And Beyond...

     * Space Age는 여기서 끝나지 않음. 더 많은 콘텐츠가 준비됨
     * 각 행성마다 독특한 사운드트랙 제공
     * 새로운 적과 방어 시스템
     * 신비로운 5번째 행성, 가장 독특한 게임플레이 제공

Factorio 2.0

     * Factorio: Space Age와 함께 Factorio 2.0 버전도 출시 예정, 모든 사용자에게 무료 업그레이드
     * 다양한 게임 변경 사항과 개선 사항 포함
          + 더 똑똑한 작업 로봇
          + 새로운 철도 시스템
          + 원격 보기 기능
          + 조합기 및 회로 네트워크 개선
          + 기차 제어 개선
          + 새로운 유체 시스템
          + Nauvis 지형 생성 개편

최신 업데이트 받기

     * 최신 소식을 확인하려면 주간 개발 블로그를 확인하거나 뉴스레터를 구독
     * Steam에서 Factorio: Space Age 확장팩을 위시리스트에 추가해 출시 알림 받기

GN⁺의 정리

     * Factorio: Space Age는 기존 게임의 우주 탐험을 확장해 새로운 도전과 자원을 제공
     * 다양한 행성과 고유한 환경에서 새로운 기술과 자원을 탐구
     * Factorio 2.0 버전은 게임의 전반적인 품질과 기능을 향상시켜 사용자 경험을 개선
     * 우주 플랫폼, 고가 철도, 품질 시스템 등 다양한 새로운 기능이 추가되어 게임의 깊이와 복잡성을 증가
     * 이 확장팩은 Factorio 팬들에게 새로운 모험과 도전을 제공하며, 게임의 장기적인 흥미를 유지할 수 있는 요소를 추가

        Hacker News 의견

     * Factorio에 중독될 가능성이 있다면 매우 조심해야 함
          + 중독되었다면 자유롭게 편집하고 실험할 수 있는 모드를 설치하면 도움이 될 수 있음
          + 농담처럼 들리는 ""시간, 수면, 관계, 직업을 잃는다""는 말이 항상 농담은 아님
     * 10월까지 시간을 보내고 싶다면 Ultracube: Age of Cube 모드를 추천함
          + 기본 게임을 지루하게 늘리지 않고 공장에 대한 새로운 변화를 줌
          + 초기 게임에 대한 좋은 소개 영상이 있음
     * AGI(인공지능 일반) 개발 일정이 3개월 연기될 것 같음
     * 복잡한 게임을 하면서 ""차라리 실제 일을 해야겠다""는 생각이 듦
          + 이는 ""유독성 생산성"" 사고방식의 부산물일 수 있음
     * Factorio 2는 모든 사용자에게 무료 업그레이드로 포함됨
          + Factorio는 계속 유지하기 위해 추가 비용을 지불할 가치가 있는 게임임
          + 기본 게임 업그레이드를 무료로 제공한 것에 대해 칭찬함
     * Factorio에서 한 시간 동안 페어링하는 것이 인터뷰에서 한두 라운드를 대체할 수 있음
          + 협력적/팀 환경에서 문제를 해결하는 방법에 대한 강력한 신호를 제공할 것임
     * 기다릴 수 없음
          + 몇 년 전에 플레이했을 때 매우 재미있었음
          + 최근에는 Workers & Resources를 플레이했는데, 물류에 중점을 둔 비슷한 게임임
          + 원조 게임으로 돌아가는 것이 재미있을 것 같음
     * 봇, 청사진, 기차 업데이트가 너무 좋아서 1.0 버전을 더 이상 플레이할 수 없음
          + 행성 관련 업데이트에 대해서는 아직 확신이 서지 않음
     * 독감에 걸리는 날과 정확히 일치함
     * Hacker News 모더레이터가 이 게시물을 좋아하지 않은 것 같음
          + 제목이 규칙을 엄격히 따르지 않았고 게시물이 첫 페이지 하단으로 이동됨
"
"https://news.hada.io/topic?id=15698","배터리 가격 인하 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             배터리 가격 인하 가능성

    배터리: 얼마나 저렴해질 수 있을까?

      배터리가 전력망을 어떻게 변화시킬 것인가

     * 나트륨 배터리는 매우 저렴해질 것임
          + 전력망을 개혁할 것임
          + 지역 수요 반응이 중요해질 것임
          + 회복력과 전력망 안정성이 향상될 것임
          + 전력망 보강이 덜 비용이 많이 드는 병목 현상이 될 것임
          + 태양광과 풍력이 번창할 것임
          + 배터리는 에너지 시스템을 완전히 바꿀 것임

    이 깨달음이 어떻게 나에게 왔는가

     * 배터리는 15년 넘게 연구의 중심이었음
     * 2007년에 태양광이 저평가되었다고 결론지었음
     * 전기차에 대한 책을 쓰고 새로운 경력을 시작했음
     * 배터리의 영향력을 완전히 이해하지 못했음
     * 배터리 개선 방법은 무궁무진함
     * 배터리 생산 방법, 재료 구성 및 포장 방법을 개선할 수 있음
     * 배터리는 더 가볍고 오래 지속되며 저렴해질 것임

    배터리 재료 비용: 숫자로 계산하기

     * 배터리가 얼마나 저렴해질지 예측하기 어려움
     * 두 가지 방법을 사용함:
         1. 기술의 학습 곡선
         2. 필요한 재료 (현실 점검)

      1. 학습 곡선 계산하기

     * Wright의 법칙: 생산이 두 배로 증가할 때마다 가격이 일정 비율로 하락함
     * 배터리 가격은 생산 증가에 따라 예측 가능하게 하락함
     * 2015년부터 2023년까지 배터리 생산 데이터를 사용하여 예측함
     * 2023년 2410 GWh에서 2030년 61,917 GWh로 성장할 것으로 예상됨
     * 가격은 25%씩 8번 하락하여 2030년에는 kWh당 $8이 될 것임

      2. 필요한 재료 계산하기

     * NMC 배터리의 재료 비용은 kWh당 약 $60임
     * LFP 배터리는 kWh당 $50 이하로 떨어질 수 있음
     * 나트륨 배터리는 재료 비용이 kWh당 $1로 떨어질 수 있음
     * 2030년까지 kWh당 $8로 예측됨

    예측: 집과 모든 곳에 고정식 배터리가 설치될 것임

     * 저렴한 배터리는 전력망을 안정화할 것임
     * 2030년 이전에 kWh당 $50 이하의 배터리가 보급될 것임
     * 집에 20 kWh 배터리가 설치되어 전력 사용을 최적화할 것임
     * 회사와 비즈니스 파크는 더 큰 배터리를 구매하여 전력망 혼잡 문제를 해결할 것임
     * 태양광과 풍력은 배터리 덕분에 계속 성장할 것임
     * 전력망의 피크와 딥이 저렴한 배터리로 평탄화될 것임

    미래 준비: 지역 수요 반응을 위한 개방적이고 안전한 전력망 계획

     * 저렴한 배터리가 전력망 혼잡 문제를 해결하도록 준비해야 함
     * 인터넷의 OSI 모델과 유사한 글로벌 전력망 모델이 필요함
     * 모든 장치가 공공-개인 키 암호화를 사용해야 함
     * 분산 원장 기술이 신뢰할 수 없는 시스템을 만들 수 있음

    결론

     * 현대 나트륨 배터리의 등장으로 고정식 배터리가 매우 저렴해질 것임
     * 전력망이 상향식으로 관리될 것임
     * 배터리는 전력망을 더 저렴하고 회복력 있게 만들 것임

    GN⁺의 의견

     * 배터리 기술의 발전: 나트륨 배터리의 저렴한 비용은 전력망의 혁신을 가속화할 것임. 이는 전기차와 재생 에너지의 보급을 촉진할 것임.
     * 전력망 안정성: 저렴한 배터리는 전력망의 안정성을 크게 향상시킬 것임. 이는 전력 공급의 신뢰성을 높이고, 정전과 전압 변동을 줄일 것임.
     * 경제적 이점: 배터리 비용의 하락은 에너지 비용을 절감하고, 기업과 가정의 전력 사용을 최적화할 것임. 이는 경제적 이점을 제공할 것임.
     * 기술 채택 고려사항: 새로운 배터리 기술을 채택할 때는 안전성, 수명, 재활용 가능성 등을 고려해야 함. 이는 지속 가능한 에너지 시스템을 구축하는 데 중요함.
     * 유사 기술 추천: 리튬-황 배터리와 같은 다른 저렴하고 가벼운 배터리 기술도 주목할 만함. 이는 다양한 응용 분야에서 유용할 것임.

        Hacker News 의견

     * Lifepo4 배터리는 현재 가정용으로 저렴해졌음
          + 48v 시스템의 경우 $89/kwh로 중국 공급업체에서 구매 가능
          + 미국에서 구매 시 추가 비용 $30/kwh 발생
          + 나트륨 배터리는 $130/kwh로 효율이 26% 낮음
          + 전기 비용 상승으로 태양광과 배터리로 전환했으며 문제 없음
          + 태양광 패널은 매우 저렴해졌고, 중고 패널을 저렴하게 구매 가능
     * 블로그 글이 여러 주제를 다루고 있음
          + 2030년 가격 예측은 리튬 배터리 비용을 기반으로 함
          + 나트륨 배터리가 주류가 될 것이라는 가정이 있음
          + 배터리 외의 다른 시스템 구성 요소는 비용이 고정됨
          + 블록체인 관련 내용이 포함되어 있으나 이해하기 어려움
     * 2410 GWh에서 2030년까지 59% 성장 예측에 오류 있음
          + 8배 증가가 아닌 26배 증가가 맞음
          + 연간 60% 성장률이 8년 동안 100% 성장률과 같을 수 없음
          + 이 오류가 비용 절감 예측의 기초가 됨
     * 배터리 안전성에 대한 우려
          + 저가 공급업체에서 구매 시 위험성 증가
          + 품질 관리 통과하지 못한 제품의 위험성
          + AliExpress 등에서 구매 시 위험성
          + 물리적 충격이나 전력 서지 시 위험성
          + 밀집된 지역에서 저가 배터리 사용 시 위험성
     * 가정용 배터리 백업 설치의 어려움
          + 미네소타에서는 그리드 충전 배터리 백업 설치가 불법
          + 태양광 전력은 그리드 유틸리티에 판매되고, 겨울 요금 할인으로 보상받음
          + 이는 좋은 거래가 아님
     * 캘리포니아에서 태양광이 성공한 이유
          + 그리드 연결로 배터리 관리 필요 없음
          + 초기에는 효과적인 요금제 존재
          + 전력 회사가 인프라 유지와 법적 판결 비용 문제로 모델 변경
          + 이는 100% 오프 그리드에 대한 관심을 재점화함
          + 전력 회사가 소비자와 상업 건물의 전력 시스템을 백업으로 사용하려는 움직임 있음
          + 이는 전력 회사의 영향력을 제거하고 시장/소비자에게 가격 통제권을 부여함
     * 기술 전문가의 예측을 더 듣고 싶음
          + 글이 배터리에 대해 많이 생각하는 비전문가가 쓴 것 같음
          + 기술적 세부 사항이 중요하며 예측된 확장 경향이 필연적이지 않음
     * 블록체인 언급이 혼란스러웠으나 분석에 대체로 동의함
          + 에너지 전환 지지자들도 역사적 추세를 과소평가함
          + S-커브 상승을 이해하기 어려움
     * 배터리 셀이 2030년까지 $8/kWh에 도달할 것이라는 예측에 놀라움
     * 50AH 리튬 이온 배터리의 비용이 납산 배터리와 경쟁할 수준에 가까워짐
"
"https://news.hada.io/topic?id=15596","리버스 엔지니어를 위한 헥스 에디터 Imhex","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       리버스 엔지니어를 위한 헥스 에디터 Imhex

역공학자, 프로그래머, 그리고 새벽 3시에 작업하는 사람들을 위한 Hex 에디터

  지원

     * GitHub Sponsors, Patreon, PayPal을 통해 지원 가능

  스크린샷

     * 추가 스크린샷 제공

  기능

    풍부한 Hex 보기

     * 바이트 패칭, 패치 관리, 무한 Undo/Redo
     * 다양한 형식으로 바이트 복사
     * 간단한 문자열 및 Hex 검색
     * 시작, 끝, 현재 커서 위치로 이동
     * 다채로운 하이라이팅
     * 다양한 데이터 유형으로 표시
     * ASCII 및 사용자 정의 인코딩으로 데이터 디코딩
     * 페이지 데이터 보기

    C++ 유사 패턴 언어

     * MIME 타입 및 매직 값 기반 자동 로딩
     * 다양한 데이터 유형 시각화 지원
     * 유용한 에러 메시지, 구문 강조 및 에러 표시

    테마 지원

     * 야간 모드 기본, 사용자 정의 색상 및 스타일 지원
     * 사용자 정의 폰트 지원

    데이터 가져오기 및 내보내기

     * Base64 파일, IPS 및 IPS32 패치, Markdown 보고서

    데이터 검사기

     * 다양한 유형으로 데이터 해석
     * 바이트 복사 및 수정
     * 새로운 데이터 유형 추가 지원

    노드 기반 데이터 전처리기

     * 데이터 수정, 암호 해독 및 디코딩
     * 사용자 정의 노드 추가 지원

    다양한 데이터 소스 로딩

     * 로컬 파일, Raw 디스크, GDB 서버, Intel Hex 및 Motorola SREC 데이터, 프로세스 메모리

    데이터 검색

     * 파일 전체 또는 선택 영역 검색
     * 문자열 추출, 시퀀스 검색, 정규 표현식 검색, 바이너리 패턴, 숫자 값 검색

    데이터 해싱 지원

     * 다양한 알고리즘 사용 가능
     * 특정 영역 및 임의 문자열 해싱

    디핑 지원

     * 다른 데이터 소스 비교
     * 차이점 하이라이팅 및 테이블 보기

    통합 디스어셈블러

     * Capstone이 지원하는 모든 아키텍처 지원

    북마크

     * 사용자 정의 이름 및 색상 지원
     * 북마크 영역 하이라이팅 및 북마크로 이동

    데이터 분석기 및 시각화 도구

     * 파일 매직 기반 파일 파서 및 MIME 타입 데이터베이스
     * 바이트 유형 분포 그래프, 엔트로피 그래프

    YARA 규칙 지원

     * 공식 YARA 규칙으로 파일 스캔
     * 매치 하이라이팅 및 매치로 이동

    유용한 도구

     * 다양한 디맹글러, ASCII 테이블, 정규 표현식 교체기, 수학 표현식 평가기, 그래핑 계산기, 색상 선택기, 베이스 변환기, 바이트 스와퍼, UNIX 권한 계산기, Wikipedia 용어 정의 찾기, 파일 유틸리티, IEEE754 Float 시각화기, TCP 클라이언트/서버, 유클리드 알고리즘 계산기

    내장 콘텐츠 업데이트

     * 데이터베이스에서 파일 다운로드

    현대적인 인터페이스

     * 다중 작업 공간 및 사용자 정의 레이아웃 지원
     * 분리 가능한 창

    쉽게 시작하기

     * 다양한 언어 지원, 초보자용 간소화 모드, 광범위한 문서화, 데이터베이스의 많은 예제 파일, 인터랙티브 튜토리얼

  패턴 언어

     * C 유사 구문으로 구조 및 데이터 유형 정의
     * 파일 콘텐츠 파싱 및 하이라이팅

  데이터베이스

     * 형식 패턴, 라이브러리, 매직 및 상수 파일

  요구 사항

     * GPU가 필요하며, OpenGL 3.0 지원 필요
     * Windows, macOS, Linux 지원

  설치

     * 설치 가이드 참고

  컴파일

     * GCC 또는 Clang 필요, C++23 이상 지원

  기여

     * 기여 가이드 참고

  플러그인 개발

     * 템플릿 프로젝트 사용

  크레딧

     * 주요 기여자 및 사용된 라이브러리 감사

  라이선스

     * 대부분 GPLv2-only 라이선스, 일부 LGPLv2.1 라이선스

GN⁺의 의견

     * ImHex는 역공학 및 프로그래밍 작업에 매우 유용한 도구임. 특히 다양한 데이터 유형을 시각화하고 분석할 수 있는 기능이 뛰어남.
     * 야간 모드와 같은 사용자 친화적인 기능이 있어, 장시간 작업에도 눈의 피로를 줄일 수 있음.
     * 다양한 데이터 소스와의 호환성 덕분에 여러 환경에서 활용 가능함.
     * 유사한 기능을 가진 다른 도구로는 HxD, 010 Editor 등이 있음.
     * 새로운 기술이나 오픈 소스를 채택할 때는 해당 기술의 장단점을 충분히 고려해야 함. 예를 들어, ImHex의 경우 GPU 지원이 필수적임.

        Hacker News 의견

     * ImHex는 지금까지 사용해본 최고의 헥스 에디터임
          + 파일 템플릿 기능으로 알려진 파일 유형의 섹션을 자동으로 강조 표시함
          + 선택한 바이트를 다양한 데이터 유형으로 동시에 해석해 보여줌
          + 대용량 파일 사용 시 다른 에디터보다 훨씬 빠름
          + 단점으로는 imgui UI가 가끔 버그가 있음
     * 이 에디터가 CP437 글리프로 ASCII 바이트를 표시하는 방법이 있는지 궁금함
          + DOS에서 이 방식으로 바이너리 파일을 읽었고, 헥스 값보다 글리프를 더 빨리 읽을 수 있음
          + 비인쇄 문자를 점으로 표시하는 것은 많은 정보를 제공하지 않음
     * ImHex를 시도해봤지만 너무 복잡했음
          + macOS에서는 여전히 Hex Fiend를 선호함
          + 단순하고 빠르며 원하는 기능을 제공함
          + Windows에서는 아직 완벽한 ""단순한"" 헥스 에디터를 찾지 못함
     * 패턴 언어가 매우 유용하며 학습에 큰 도움이 됨
          + 이 프로그램을 사랑함
     * ImHex는 일반적으로 OpenGL 3.0을 지원하는 GPU가 필요함
          + 헥스 에디터가 왜 OpenGL이 필요한지 궁금함
          + OpenGL이 필요한 이유가 있는지 아니면 단순히 멋을 위한 것인지 궁금함
     * ImHex가 좋아 보임
          + 010 Editor의 와일드카드 검색 기능을 사용하지만, ImHex도 그 기능을 제공함
          + 더 많은 기능을 제공하므로 테스트해볼 예정임
     * 컴퓨터 문화의 이 영역을 매우 좋아함
          + 리버스 엔지니어링, 커널 모듈 작성, 작동 원리 파악 및 설계되지 않은 기능 수행 등
          + 그러나 이를 합법적으로 수행할 수 있는 방법이 드물고 많은 시간과 동료의 도움이 필요함
     * 이 프로젝트는 매우 훌륭함
          + Philips 스마트 시계의 ROM을 조작하는 데 많은 재미를 느꼈음
          + Rust와 유사한 내장 DSL이 있어 메모리 관리 없이도 매우 가벼움
          + 이를 통해 바이너리 스트림에서 구조적 데이터를 시각화하고 추출할 수 있음
          + 코드 없이 간단한 계산을 할 수 있는 시각적 에디터도 있음
          + 시도했을 때는 다소 미완성 느낌이었음
          + DSL로 코드를 작성하는 것이 더 직관적이고 쉬웠음
     * 현재는 010 Editor를 계속 사용할 예정임
          + 지금까지 사용해본 헥스 에디터 중 가장 놀라운 에디터임
          + 새로운 프로젝트에서 사용하는 GUI 프레임워크(Dear ImGui)를 좋아하지 않음
          + 작은 화면과 창 관리자 없는 임베디드 시스템을 위한 것이며, 데스크탑 환경에서는 UI 통합 부족으로 어색한 경험을 제공함
     * 이 프로젝트가 꽤 멋져 보임
          + 헥스 에디터를 프로젝트로 개발하는 것이 좋은 아이디어인지 궁금함
          + 간단한 헥스 에디터는 어렵지 않지만, 파일 형식을 파싱하는 등 연습할 수 있는 많은 공간이 있음
          + 리버스 엔지니어링 도구를 개발할 여지도 많음
"
"https://news.hada.io/topic?id=15625","LosslessCut: 무손실 비디오/오디오 편집의 스위스 군용 칼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 LosslessCut: 무손실 비디오/오디오 편집의 스위스 군용 칼

  LosslessCut

   LosslessCut은 비디오 및 오디오 파일을 손실 없이 빠르게 편집할 수 있는 FFmpeg 기반의 크로스 플랫폼 GUI 도구임. 이 도구는 비디오 카메라, GoPro, 드론 등으로 촬영한 대용량 비디오 파일을 빠르게 잘라내어 저장 공간을 절약할 수 있음. 또한, 음악이나 자막 트랙을 비디오에 추가할 때 인코딩이 필요하지 않음.

    주요 기능

     * 대부분의 비디오 및 오디오 포맷을 손실 없이 자르기
     * 스마트 컷 (실험적 기능)
     * 비디오/오디오의 특정 부분을 손실 없이 잘라내기
     * 비디오/오디오 세그먼트의 순서를 손실 없이 재배열
     * 동일한 코덱 파라미터를 가진 파일을 손실 없이 병합/연결
     * 여러 파일에서 임의의 트랙을 결합 (예: 비디오 파일에 음악 또는 자막 트랙 추가)
     * 불필요한 트랙 제거
     * 일부 트랙만 재인코딩 또는 교체
     * 파일에서 모든 트랙 추출 (비디오, 오디오, 자막, 첨부 파일 등)
     * 빠른 다중 파일 워크플로우 (대량/배치 내보내기 없음)
     * 키보드 단축키 워크플로우
     * 비디오/오디오를 다른 컨테이너 포맷으로 손실 없이 리멕스
     * 비디오에서 JPEG/PNG 형식의 전체 해상도 스냅샷 찍기
     * 비디오 프레임을 이미지로 내보내기 (매 n번째 프레임, 초, 장면 변경 시)
     * 선택한 시간 범위에서만 내보내기
     * 이미지 파일 이름에 원본 타임스탬프 포함 옵션
     * 컷 포인트 시간 수동 입력
     * 파일별 타임코드 오프셋 적용 (파일에서 자동 로드)
     * 파일 메타데이터, 트랙별 메타데이터 및 트랙별 디스포지션 편집
     * 비디오의 회전/방향 메타데이터 변경
     * 모든 트랙의 기술 데이터 보기
     * 타임라인 줌 및 키프레임 점프
     * 비디오 썸네일 및 오디오 웨이브폼
     * 프로젝트 파일에 컷 세그먼트 저장
     * FFmpeg 마지막 명령 로그 보기
     * 실행 취소/다시 실행
     * 컷 세그먼트에 라벨 부여
     * 태그로 세그먼트 주석 달기
     * 세그먼트 가져오기/내보내기: MP4/MKV 챕터 마크, 텍스트 파일, YouTube, CSV, CUE, XML (DaVinci, Final Cut Pro) 등
     * MKV/MP4 내장 챕터 마크 편집기
     * 자막 보기
     * 사용자 정의 가능한 키보드 단축키
     * 검은 장면 감지, 무음 오디오 감지, 장면 변경 감지
     * 타임라인을 길이 L 또는 N 세그먼트로 나누기
     * 비디오 또는 오디오 파일의 속도 조절 (FPS 변경)
     * 기본 CLI 및 HTTP API

    예제 손실 없는 사용 사례

     * 녹화된 TV 쇼에서 광고 제거 (TS에서 MP4로 재포맷)
     * 파일에서 오디오 트랙 제거
     * 비디오에서 음악 트랙 추출 및 필요에 맞게 자르기
     * 비디오에 음악 추가 (또는 기존 오디오 트랙 교체)
     * 별도의 녹음에서 오디오 및 비디오 트랙 결합
     * 외부 자막을 비디오에 포함
     * iPhone에서 재생하기 위해 H264/H265 MKV 비디오를 MOV 또는 MP4로 빠르게 변경
     * 다른 도구에서 컷 시간을 EDL (편집 결정 목록, CSV)로 가져와 LosslessCut에서 실행
     * 컷 시간을 CSV EDL로 내보내 다른 도구에서 처리
     * MP4/MKV 챕터로 파일을 빠르게 자르기
     * YouTube 비디오를 챕터별로 빠르게 자르기 (또는 댓글에서 음악 시간)
     * 파일의 오디오/자막 트랙 언어 변경
     * 외부 JPEG 파일 또는 타임라인의 프레임에서 비디오/오디오에 커버 아트/썸네일 첨부
     * 비디오의 저자, 제목, GPS 위치, 녹화 시간 변경
     * 잘못된 방향 플래그가 설정된 비디오의 회전 수정
     * 비디오/오디오 클립을 X번 반복 (재인코딩 없이)
     * 비디오 또는 일부를 X 이미지 파일로 변환 (손실 없음)
     * 비디오를 장면별로 하나의 파일로 분할
     * 오디오/비디오의 무음 부분 잘라내기
     * Twitter의 140초 제한을 준수하기 위해 비디오를 세그먼트로 분할
     * 각 세그먼트에 하나 이상의 태그를 주석으로 달고, 이를 사용하여 세그먼트를 구성하거나 출력 폴더 구조 또는 계층 구조 생성

    YouTube 챕터로 컷 시간 내보내기

    1. 병합 및 ""병합된 세그먼트에서 챕터 생성"" 활성화하여 내보내기
    2. 내보낸 파일을 열고 대화 상자에서 ""챕터 가져오기"" 선택
    3. 파일 -> 프로젝트 내보내기 -> YouTube 챕터

    오디오 트랙만 재인코딩하고 손실 없는 비디오 트랙 유지

    1. 각 트랙을 개별 파일로 내보내기
    2. Handbrake 또는 유사한 도구를 사용하여 오디오 파일 재인코딩 (mp4 파일의 경우 AAC로 인코딩)
    3. 추출된 비디오 스트림을 LosslessCut에서 열기
    4. 인코딩된 오디오 파일을 열고 ""새 파일에서 모든 트랙 포함"" 선택
    5. 내보내기

    고급 다단계 워크플로우

   팁: LosslessCut을 여러 번 사용하여 개별 트랙을 별도로 자를 수 있음
    1. 파일을 열고 모든 트랙을 개별 파일로 내보내기
    2. 내보낸 트랙 파일을 독립적으로 열고 원하는 대로 자르기
    3. 트랙을 비디오에 다시 추가하고 하나의 출력 비디오로 결합

  다운로드

   LosslessCut의 지속적인 작업을 지원하고, 안전하고 간단한 설치 프로세스와 자동, 안정적인 업데이트의 이점을 누리고 싶다면 선호하는 스토어에서 다운로드를 고려할 것.

    지원되는 운영 체제

     * Mac OS X: Intel DMG / Apple Silicon DMG
     * Windows: 7zip (Windows 7, 8 및 8.1은 v3.50.0 이후로 지원되지 않음)
     * Linux: x64 tar.bz2 / x64 AppImage / arm64 tar.bz2 / Raspberry Pi armv7l

    지원되는 포맷

   LosslessCut은 Chromium의 HTML5 비디오 플레이어를 사용하며, 모든 FFmpeg 지원 포맷과 코덱이 네이티브로 지원되지 않음. 일반적으로 다음 포맷이 작동함:
     * 비디오 포맷: MP4, MOV, WebM, Matroska, OGG, WAV
     * 오디오 코덱: FLAC, MP3, Opus, PCM, Vorbis, AAC
     * 비디오 코덱: H264, AV1, Theora, VP8, VP9, H265 (하드웨어 디코더 필요)

    비디오 데모

     * 일반 기능
     * MP4에 썸네일/커버 아트 추가 방법
     * 비디오에 다국어 오디오 추가 방법

    일반적인 워크플로우

     * 비디오 파일을 플레이어에 드래그 앤 드롭하거나 ⌘/CTRL+O 사용
     * SPACE를 눌러 재생/일시 정지 또는 ◀``▶, ,``. 또는 마우스/트랙패드 휠로 앞뒤로 탐색
     * 시간 마커를 이동하여 컷 세그먼트의 시작 및 종료 시간을 선택한 후 I를 눌러 시작 시간 설정, O를 눌러 종료 시간 설정
     * 모든 세그먼트는 보존되며 새 파일로 내보내짐. 이 동작을 변경하려면 Yin Yang 기호 ☯️를 사용하여 선택한 세그먼트를 제거하고 세그먼트 사이의 부분을 내보내도록 설정 가능
     * 여러 세그먼트를 추가하려면 원하는 시작 시간으로 이동하여 +를 누른 후 I/O로 다음 세그먼트 시작/종료 시간 선택
     * 컷 후 모든 선택된 세그먼트를 하나의 파일로 다시 병합하려면 Separate files 버튼을 Merge cuts로 전환
     * 특정 출력 폴더로 내보내려면 Working dir unset 버튼을 누름 (기본값: 입력 파일 폴더)
     * 방향을 변경하려면 회전 버튼을 누름
     * 기본적으로 입력 파일의 오디오, 비디오 및 자막 트랙이 잘리고 내보내짐. Tracks 버튼을 눌러 사용자 정의 및/또는 다른 파일에서 새 트랙 추가 가능
     * 새로운 출력 포맷 선택 가능
     * 오른쪽 세그먼트 패널에서 세그먼트를 오른쪽 클릭하여 옵션 선택 또는 드래그 앤 드롭하여 재정렬. 병합된 출력에서 이 순서대로 나타남
     * 완료되면 Export 버튼 (또는 E)을 눌러 내보내기 옵션 개요 표시
     * 내보내기 옵션 조정 가능
     * 내보내기를 다시 눌러 내보내기 확인
     * 현재 시간에서 JPEG/PNG 스냅샷을 찍으려면 카메라 버튼 (또는 C)을 누름
     * 원본 파일을 휴지통으로 이동하려면 휴지통 버튼을 누름
     * 최상의 결과를 위해 다른 출력 포맷 (Matroska는 거의 모든 것을 수용)으로 시도하거나, 키프레임 컷 모드를 변경하거나 일부 트랙을 비활성화해야 할 수 있음
     * 모든 키보드 및 마우스 단축키를 보려면 SHIFT + /를 누름
     * 참고: 원본 비디오 파일은 수정되지 않음. 대신 원본 파일과 동일한 디렉토리에 from/to 타임스탬프가 포함된 파일이 생성됨

  GN⁺의 의견

     * LosslessCut은 비디오 및 오디오 파일을 손실 없이 빠르게 편집할 수 있는 도구로, 특히 대용량 파일을 다루는 사용자에게 유용함.
     * FFmpeg 기반으로 작동하여 매우 빠른 속도를 제공하며, 다양한 포맷과 코덱을 지원함.
     * 스마트 컷, 다중 파일 워크플로우, 키보드 단축키 등 다양한 기능을 제공하여 사용자 편의성을 높임.
     * 비슷한 기능을 제공하는 도구로는 Avidemux, Shotcut 등이 있으며, 각 도구의 장단점을 비교해보는 것이 좋음.
     * 새로운 기술이나 오픈 소스를 채택할 때는 지원되는 포맷과 코덱, 사용자 인터페이스의 직관성 등을 고려해야 함.

        Hacker News 의견

     * VideoReDo와 같은 오픈 소스 경쟁자처럼 보임
          + VideoReDo는 독립 개발자가 만든 독점 소프트웨어였으며, 최근 개발자가 사망했음
          + ""무손실"" 비디오 편집은 재인코딩 없이 비디오의 특정 부분을 잘라내는 것임
     * 무손실 편집은 원본 컨테이너를 새로운 컨테이너로 리믹스하는 것임
          + FFMpeg를 사용하여 작업을 수행함
          + 모든 현대 비디오 형식은 여러 비디오 및 오디오 트랙을 포함하는 컨테이너의 확장임
          + 트랙은 Elementary Streams (ES)로 적절한 코덱으로 인코딩됨
          + ""muxing"" 과정에서 컨테이너에 결합되고 각 샘플/프레임에 타임스탬프가 부여됨
     * ES는 인코딩되어 있어 프레임 수준의 정확도를 제공하지 않음
          + I-Frame만 완전히 디코딩 가능함
          + IPPBPPB... 시퀀스는 GOP (Group of Pictures)라고 불림
          + NAL 유닛을 통해 프레임 유형을 식별할 수 있음
     * ES 비트스트림을 분석하여 GOP 경계를 감지할 수 있음
          + GOP 중간을 자를 수 없으므로 <1초 정확도 또는 전체 GOP를 디코딩하여 I-Frame을 삽입하는 방법이 있음
          + 매우 빠른 비트 조작과 컨테이너 간 복사로 효율적인 과정임
     * LosslessCut을 사용하여 다이빙 대회 영상을 개별 다이빙 클립으로 나누는 데 유용했음
          + 3시간 대회를 1시간 이내에 나눌 수 있었음
     * 관련 링크 제공
          + LosslessCut: 무손실 비디오/오디오 편집
          + Lossless-cut: 무손실 비디오/오디오 편집의 스위스 군용 칼
          + LosslessCut – 비디오 파일을 빠르고 무손실로 자르기
          + Show HN: LosslessCut – 빠르고 무손실 비디오 자르기를 위한 크로스 플랫폼 GUI 도구
     * 유용한 bash 스크립트 공유
          + ffmpeg를 사용하여 비디오를 자르는 스크립트임
          + 시작/종료 시간을 초 단위로 입력받아 처리함
     * AVIDemux는 비슷한 기능을 제공하는 네이티브 앱임
          + Electron 앱이 100MB 이상이라는 불만을 사전에 방지하기 위함
     * GitHub에는 GPL-2.0 라이선스, snap store에는 MIT 라이선스, Mac OS APP store에는 $19임
     * ffmpeg와 무손실 자르기 기술 간의 문서화가 있는지 궁금함
     * LosslessCut의 큰 팬이며 거의 매일 사용함
          + 화면 녹화를 자르거나 편집하는 데 사용함
          + 무손실이기 때문에 저장이 거의 즉시 이루어짐
          + 필요시 Permute로 재압축하거나 Davinci Resolve로 효과를 추가함
     * 원격 서버에서 비디오를 무손실로 다운로드하고 자를 수 있는지 궁금함
          + 현재는 ffmpeg를 사용하여 YouTube와 같은 사이트에서 비디오를 다운로드하고 자름
          + 비디오를 다운로드하면서 실시간으로 재인코딩해야 함
          + 로컬에 비디오 정보가 없기 때문에 무손실 다운로드 및 자르기가 불가능하다고 생각함
"
"https://news.hada.io/topic?id=15664","Fedify, 블로그 플랫폼 Ghost로 부터 자금 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Fedify, 블로그 플랫폼 Ghost로 부터 자금 지원

     * Fedify는 ActivityPub 프로토콜을 구현하는 서버 프레임워크 오픈소스 프로젝트
     * 취미로 만들던 프로젝트였는데, Ghost가 ActivityPub를 구현한다는 소식을 듣고 같은 TypeScript 소스라 세일즈 함
     * Ghost 팀에서 긍정적으로 검토하고 Fedify를 본격적으로 이용하기로 결정
     * 얼마후, 자금 지원을 할테니 Ghost 팀에서 Fedify에 추가되기를 원하는 기능들을 구현해줄 수 있겠냐는 제안을 받음
     * 재취업 준비중이었는데, 전업으로 Fedify 작업을 할수 있게됨

   좀 늦은 감이 있지만 축하드립니다!!

   대단하십니다!

   너무 대단해요. 축하합니다!!!

   축하드립니다!! 🥳

   좋은 소식이네요. 축하드립니다!

   한국에도 이런 사례가 생겨나는군요. 축하드립니다!

   와 멋진 소식이군요. 축하드립니다.

   축하합니다....!!!

   와... 정말 축하드립니다!

   고스트 사용자입니다! 덕분에 저는 좋은 기능을 무료로..!

   축하드립니다! 자극이 많이 되네요 🙇🏻‍♂️

   우와 축하드립니다!!

   우와! 감축드립니다!
   저도 뭔가 아이템을 잘 잡아야할 같은데… 쉽지 않네요!

   축하드립니다...!

   와, 너무 멋지고 기쁜 소식이네요. 축하드립니다.

   국내에서도 좋은 사례가 나왔네요. 제작자분께서 긱뉴스에 글도 몇번 남겨주셨었는데 축하드려요!

   감사합니다…!!
"
"https://news.hada.io/topic?id=15723","소프트웨어 위기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                소프트웨어 위기

    소프트웨어 위기

     * 소프트웨어 위기란?
          + 1968년 첫 NATO 소프트웨어 공학 회의에서 ""소프트웨어 위기""라는 용어가 처음 사용됨
          + 이 회의들은 프로그래밍 관행을 정의하고 체계화하려는 초기 노력 중 하나였음
          + 1969년 아폴로 11호 발사와 같은 시기에 마지막 NATO 소프트웨어 공학 회의가 열림
     * 소프트웨어 위기의 원인
          + 1972년 튜링상 수상자인 Edsger Dijkstra는 소프트웨어 위기의 원인을 하드웨어의 복잡성과 속도의 증가로 설명함
          + ""기계가 더 강력해질수록 프로그래밍 문제도 커짐"" - Edsger Dijkstra
     * 현재의 소프트웨어 위기
          + 현재는 소프트웨어 위기에 대해 많이 언급되지 않음
          + 새로운 언어와 조직 방법의 개발로 인해 문제를 해결했다고 생각함
          + 그러나 이는 진정한 편안함이 아닌 패배와 수용의 감각에서 비롯된 것일 수 있음
     * 추상화의 문제
          + 소프트웨어 위기를 해결하기 위한 다양한 노력이 있었지만, 대부분 ""추상화""를 통해 문제를 해결하려고 함
          + 추상화는 성능의 대가를 치르면서 어느 정도 독립성을 제공함
          + 개인용 컴퓨터의 상업화 이후, 추상화는 기본적인 사고 방식이 됨
     * 개발자와 사용자 간의 격차
          + 소프트웨어 위기는 소프트웨어를 만드는 사람뿐만 아니라 사용하는 사람에게도 영향을 미침
          + 사용자는 저자가 제공하는 것 외에는 거의 통제할 수 없음
          + Alan Perlis: ""좋은 아이디어가 있다면 책임질 준비가 되어 있어야 함""
     * 책임의 부재
          + 소프트웨어 제작자는 자신이 만든 도구의 책임에서 벗어나 있음
          + 상업화가 진행되면서 이러한 경향이 강화됨
          + 추상화는 어려운 생각을 피하기 위한 도구로 사용됨
     * 해결책
          + 소프트웨어 위기의 해결책은 더 제한된 플랫폼으로의 회귀가 아닌, 추상화 계층의 수를 제한하고 정보 보존을 요구하는 것임
          + 프로그래밍 모델, 사용자 인터페이스, 기본 하드웨어는 얕고 구성 가능해야 함
          + 도구의 사용자에게 권한을 부여해야 함
     * 현재의 움직임
          + Handmade, Permacomputing, 레트로 컴퓨팅 등 소프트웨어 위기에 대한 인식을 높이기 위한 움직임이 있음
          + 이러한 반문화 운동은 건강 신호이며, 상황이 나아질 수 있음을 시사함

    GN⁺의 정리

     * 소프트웨어 위기는 하드웨어의 복잡성과 속도의 증가로 인해 발생한 문제임
     * 현재는 추상화를 통해 문제를 해결하려고 하지만, 이는 성능의 대가를 치름
     * 소프트웨어 제작자는 자신이 만든 도구의 책임에서 벗어나 있으며, 이는 상업화로 인해 강화됨
     * 해결책은 추상화 계층의 수를 제한하고 정보 보존을 요구하는 것임
     * Handmade, Permacomputing 등의 움직임은 소프트웨어 위기에 대한 인식을 높이고 있음

        Hacker News 의견

     * 저자 의견
          + 추상화 자체가 아닌 무제한적인 적용에 반대함
          + 더 제한된 플랫폼으로의 회귀를 해결책으로 주장하지 않음
          + 사용자가 ""더 기술적""이 되어야 한다고 주장하지 않음
          + 소프트웨어 위기를 이해하려면 ""플랫폼 숙련도""와 ""성장/출시 주기"" 곡선을 이해해야 함
          + 이 글은 클릭베이트가 아니며, 개발자로서의 상황을 반영한 것임
          + 문제 해결의 일부를 제공하고자 하며, 후속 글을 계획 중임
     * 소프트웨어 위기
          + 프로젝트 예산 초과, 일정 초과, 비효율적 소프트웨어, 낮은 품질, 요구사항 미충족, 유지보수 어려움, 소프트웨어 미제공 등의 문제를 포함함
          + 성공적인 소프트웨어는 무시되고 실패와 결함만 주목받음
          + 컴퓨터가 데스크탑에 도달하기까지 수백 개의 추상화를 거치며, 이는 전 세계적으로 매일 수십억 번 발생함
     * 소프트웨어 개발과 리더십
          + 자동차 회사 리더십은 기술적 지식을 강조하지만, 애자일 소프트웨어 개발에서는 기술적 역량이 낮은 계층에서 끝남
          + 소프트웨어 개발자는 철학적 고려 없이 티켓 단위로 작업하며, 리더십 역할로 승진되지 않음
          + 소프트웨어 위기에 대한 인식은 취미 활동으로 제한될 가능성이 큼
     * 추상화의 필요성
          + 추상화는 필수적인 도구이며, 나쁜 추상화나 너무 많은 추상화가 문제임
          + 소프트웨어 개발은 더 쉬워졌고, 문서화도 잘 되어 있음
     * 도구와 정보
          + 올바른 도구를 알면 소프트웨어 개발은 매우 쉬움
          + 대부분의 사람들이 알고 있는 도구는 좋지 않으며, 자본의 영향이 큼
          + 예를 들어, 서버리스 환경에서 복잡한 마켓플레이스 앱을 3시간 만에 구축하는 비디오를 만들었지만, 조회수가 적었음
     * GUI와 조합 가능성
          + UNIX 도구를 사용할 때 얕고 조합 가능한 경험을 함
          + GUI는 서로 소통하지 않으며, 조합 가능하지 않음
          + GUI와 셸 파이프라인을 결합한 도구를 실험 중임
     * 소프트웨어의 중요성
          + 대부분의 소프트웨어는 치명적이지 않으며, 품질이 낮아도 큰 문제가 되지 않음
          + 대부분의 소프트웨어 개발자는 실리콘밸리와 같은 동기부여 없이 작업함
     * 모듈성과 추상화
          + 인터넷과 같은 복잡한 시스템은 계층화된 추상화로 유지됨
          + 소프트웨어 도구는 70년대 이후로 크게 개선됨
          + 예를 들어, VSCode의 copilot을 사용하면 전체 API를 자동 완성할 수 있음
     * 프로젝트 관리 위기
          + 소프트웨어 위기보다는 프로젝트 관리 위기가 존재함
          + 계획 담당자와 전달 담당자 간의 격차가 있음
          + 소프트웨어 개발의 상업화로 인해 다양한 수준의 사람들이 참여할 수 있음
          + 이는 음식 산업과 유사하며, 레스토랑 위기라고 말하지 않음
"
"https://news.hada.io/topic?id=15639","내 파인튜닝 모델이 OpenAI의 GPT-4를 능가함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     내 파인튜닝 모델이 OpenAI의 GPT-4를 능가함

  TL;DR

     * 핵심 요약: 미세 조정된 모델이 OpenAI의 모델보다 정확했지만, 평가 구현이 어려웠음.
     * 주요 내용: 미세 조정 과정에서 많은 코드가 숨겨져 있고 실행 속도가 느렸음. 시스템이 없으면 유지 관리의 복잡성이 증가할 것임.

  데이터셋 로딩

     * 데이터셋: Hugging Face Hub의 공개 저장소에서 테스트 데이터셋을 사용.
     * 데이터셋 구조: 'name', 'eventrefnumber', 'text', 'StartDate', 'eventtype', 'province', 'citydistrict', 'village', 'targetgroup', 'commander', 'position', 'minkilled', 'mincaptured', 'capturedcharacterisation', 'killedcharacterisation', 'killq', 'captureq', 'killcaptureraid', 'airstrike', 'noshotsfired', 'dataprocessed', 'flagged', 'glossarymeta', 'minleaderskilled', 'minfacilitatorskilled', 'minleaderscaptured', 'minfacilitatorscaptured', 'leaderq' 등.

  예측 추가

     * 예측 추가: 각 데이터셋 행에 예측 결과를 추가하고, 이를 반복적으로 수행하여 계산 집약적인 단계를 피함.
     * Pydantic 객체 사용: 데이터 검증 및 품질 관리 기능을 처리하기 위해 Pydantic 객체로 데이터 구성.

  JSON 유효성 테스트

     * 예측 결과: 모델에서 JSON 문자열을 출력하도록 설정.
     * GPT 모델 사용: GPT-4o 및 GPT-4 Turbo 모델을 사용하여 예측 수행.
     * 문제점: GPT 모델이 동일한 프롬프트에 대해 훈련되지 않았기 때문에 정확한 비교가 어려움.

  비동기 예측

     * 비동기 처리: 많은 이벤트를 처리하기 위해 비동기 방식으로 예측 수행.
     * 재시도 로직: GPT-3.5-turbo 모델의 속도 제한을 고려하여 재시도 로직 추가.

  데이터셋 변환 및 푸시

     * 데이터셋 변환: 예측 결과를 데이터셋에 추가하고 Hugging Face Hub에 푸시.
     * 함수 사용: 변환 및 푸시 과정을 반복적으로 수행하기 위해 함수 사용.

  미세 조정된 모델 예측 추가

     * 로컬 모델: 로컬에서 훈련된 모델의 예측 결과를 데이터셋에 추가.
     * OpenAI 모델: OpenAI의 원클릭 미세 조정 서비스를 사용하여 훈련된 모델의 예측 결과 추가.
     * 다양한 모델: Mistral, Llama3, Solar LLM 등 다양한 모델의 예측 결과 추가.

  최종 평가

     * 평가 지표: JSON 유효성 테스트, 시작 날짜 정확도, 주별 정확도, 타겟 그룹 정확도, 이벤트 유형 정확도 등 다양한 평가 지표 사용.
     * 최종 결과: 미세 조정된 모델이 OpenAI 모델보다 높은 정확도를 보였음.

GN⁺의 의견

    1. 미세 조정의 중요성: 미세 조정된 모델이 OpenAI의 기본 모델보다 높은 정확도를 보였다는 점에서, 특정 작업에 맞춘 모델의 중요성을 강조함.
    2. 평가의 복잡성: 평가 구현이 어려웠다는 점에서, 시스템적 접근의 필요성을 느끼게 함.
    3. 다양한 모델 사용: 다양한 모델을 사용하여 비교 평가를 수행한 점이 흥미로움. 이를 통해 모델의 장단점을 명확히 파악할 수 있음.
    4. 오픈 소스 활용: Hugging Face Hub와 같은 오픈 소스 플랫폼을 활용하여 데이터셋을 관리하고 공유한 점이 유용함.
    5. 비동기 처리의 필요성: 많은 데이터를 처리할 때 비동기 방식이 효율적이라는 점을 보여줌.

        Hacker News 의견

     * OpenPipe 창립자: 데이터 추출은 미세 조정된 모델이 뛰어난 분야임. OpenPipe의 연구에 따르면, Llama 3 8B 모델이 GPT-4를 여러 작업에서 능가했음. 중요한 점은 고품질 훈련 데이터를 생성하는 방법임
     * 작은 전문 모델이 정보 추출 및 텍스트 분류에서 더 나은 성능을 보임. 작은 모델의 성능을 포함한 연구를 보고 싶음
     * 미지정 시스템의 방정식은 무한한 해를 가짐. 오픈 소스 AI 모델을 사용하여 SOTA 벤치마크를 능가할 수 있음. 현재 기술로는 지능형 시스템을 만들 수 없으며, 새로운 돌파구가 필요함
     * 데이터 추출 및 구조화는 실제 작업에서 유용한 LLM의 유일한 진지한 응용임. 작은 모델이 더 빠르고 저렴하며, 오프라인 작업에 적합함. 더 많은 실험과 특정 미세 조정이 가능함
     * 미세 조정 모델의 목적은 바로 이것임. 호스팅 및 로컬 옵션을 혼합한 미세 조정 과정을 보는 것이 좋음
     * GPT-4가 부정확했던 예시와 최상의 모델이 정확했던 예시를 보고 싶음. 0 온도로 다시 시도해보는 것도 좋음. 0 온도는 구조화된 데이터 추출에서 큰 차이를 만들 수 있음
     * 유사한 주제에 대한 논문을 작성했음: 논문 링크
     * Predibase에서 700개 이상의 미세 조정 실험을 수행하여 GPT-4와 비교했음. 85%의 경우 GPT-4를 능가했음. 결과는 여기에서 확인 가능함
     * 모든 모델을 가능한 한 많이 오픈 소스로 만들어야 함. 자유와 품질을 위해 오픈 소스가 일반적으로 더 나음
     * 타겟 뉴스 기사의 논란이 될 수 있는 내용이 ChatGPT의 요약 능력에 영향을 미칠 수 있음
"
"https://news.hada.io/topic?id=15653","칠레가 이렇게 긴 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              칠레가 이렇게 긴 이유

    왜 칠레는 이렇게 긴가?

     * 칠레는 매우 길어서 곡선 형태를 띠고 있음
     * 칠레의 길이는 미국과 캐나다를 합친 것과 같음
     * 칠레는 유럽 전체와 같은 길이로, 노르웨이에서 모로코까지, 런던에서 바그다드까지 뻗을 수 있음
     * 칠레는 북쪽에서 남쪽으로 유럽의 여러 나라를 쌓을 수 있을 정도로 길음
     * 칠레는 모든 기후를 가지고 있음

    칠레가 긴 이유

     * 칠레는 안데스 산맥 때문에 길게 뻗어 있음
     * 나즈카 판이 남아메리카 판과 충돌하면서 산맥이 형성됨
     * 칠레는 산맥 서쪽의 좁은 땅에 위치해 있음

    칠레의 인구 분포

     * 칠레인들은 주로 나라의 중간, 녹색 띠의 북쪽 부분에 살고 있음
     * 적도 근처에서는 서쪽으로 바람이 불고, 남쪽에서는 동쪽으로 바람이 불어 습기를 막음
     * 북쪽은 너무 건조해서 큰 인구를 지탱할 수 없음

    북쪽의 사막 지역

     * 아타카마 사막은 매우 건조해서 인구가 적음
     * 이 지역은 스페인 제국이 붕괴된 후 오랫동안 분쟁 지역이었음
     * 페루와 볼리비아가 칠레와 전쟁을 벌였으나 태평양 전쟁에서 패배함
     * 이 지역은 천연 자원인 구아노와 초석 때문에 중요했음

    칠레가 긴 이유와 더 길지 않은 이유

     * 해안과 안데스 산맥 사이의 좁은 땅
     * 남쪽은 너무 추워서 다른 나라가 없음
     * 북쪽은 경쟁하는 이웃 국가들
     * 자연 경계인 사막

    칠레인의 고립

     * 칠레는 다른 스페인어 사용 국가들과 매우 고립되어 있음
     * 칠레 스페인어는 다른 스페인어와 많이 다름
     * 칠레는 스페인에서 가장 멀리 떨어져 있어 제국과의 소통이 적었음
     * 안데스 산맥, 서쪽의 바다, 남쪽의 얼음, 북쪽의 사막으로 인해 고립됨

    다른 나라가 칠레처럼 길지 않은 이유

     * 해양 판이 대륙 판 아래로 침강하는 지역이 필요함
     * 적도에서 멀리 떨어져 있어야 함
     * 서태평양에서는 주로 섬이 형성됨
     * 동태평양에서는 칠레와 미국-멕시코-캐나다 서해안이 해당됨

    결론

     * 칠레는 세계에서 가장 길고 얇은 나라 중 하나임


    GN⁺의 의견

     * 이 기사는 지리적, 역사적 요인들이 칠레의 독특한 형태를 어떻게 형성했는지 설명해줌
     * 칠레의 고립된 위치가 문화와 언어에 미친 영향을 이해하는 데 도움이 됨
     * 칠레의 자연 자원과 그로 인한 역사적 분쟁에 대한 통찰을 제공함
     * 다른 나라들이 칠레처럼 길지 않은 이유를 지리적 관점에서 설명해줌
     * 칠레의 독특한 기후와 지형이 어떻게 인구 분포에 영향을 미쳤는지 알 수 있음

        Hacker News 의견

     * 칠레에서 미국을 횡단하는 이동을 계획 중이었음. 산티아고 사람들은 한 도시에서 다른 도시로 이동하는 것을 상상하지 못했음
          + 칠레는 인구의 40%가 한 도시에 살고 있어 다른 큰 도시로 이동할 필요가 없음
          + 칠레의 지형 때문에 비슷한 거리를 이동하면 나라 전체를 커버할 수 있음
     * Neal Stephenson의 ""Baroque Cycle""에서 설명된 것처럼, 멕시코 서부는 스페인 갤리온이 필리핀에서 태평양을 건너 처음 도착한 곳임
     * 칠레의 ISO 코드는 CL이며, CH는 스위스임
     * 아마존 열대우림 깊숙한 곳에서 은하수를 보는 것이 가장 좋다는 점이 인상적임
     * 그래픽 제작 과정이 맞춤형인지 ArcGis 같은 도구를 사용하는지 궁금함
     * I70 고속도로가 1992년에 완성되기 전까지 콜로라도의 서부와 동부는 고속도로로 연결되지 않았음
     * 방언 표가 어떻게 구성되는지 궁금함. 아르헨티나와 우루과이의 방언은 거의 동일하지만, 표에서 0.35로 표시됨
     * 내 나라가 언급된 것을 보니 기쁨
     * 아르헨티나와 우루과이는 기본적으로 같은 스페인어를 사용함
     * 볼리비아는 원래 내륙국이 아니었음. 칠레가 1800년대 후반에서 1900년대 초반에 해안선을 가져갔음
          + 1879년에 칠레가 볼리비아의 안토파가스타 항구를 침공하면서 시작됨
          + 4년 만에 칠레는 볼리비아 영토의 거의 50,000 평방 마일을 가져갔음
          + 1904년에 볼리비아는 평화 조약을 체결하고 상업적 접근을 보장받음
     * 칠레에서 Chiloe 섬에서 Atacama의 Tatio Geysers까지의 운전 경험이 매우 흥미로웠음
          + Chiloe와 Puerto Montt는 여름에도 습하고 추웠음
          + Valdivia는 캘리포니아와 비슷한 기후였음
          + 북쪽으로 갈수록 지중해성 기후가 나타남
          + 산티아고 북쪽은 사막이지만 다양한 식물이 존재함
          + 안토파가스타와 칼라마 사이의 운전은 해발 2000m까지 올라가지만 경사가 완만함
          + Tatio Geysers에서 해발 4000m까지 올라가면서 렌터카가 고장났지만 가치가 있었음
     * 이 간단한 글쓰기 스타일에 이름이 있는지 궁금함
          + 19세기 후반과 20세기 초반의 대중 과학 책 스타일을 연상시킴
"
"https://news.hada.io/topic?id=15705","일본, 철도 유지보수를 위한 거대 휴머노이드 로봇 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     일본, 철도 유지보수를 위한 거대 휴머노이드 로봇 도입

    일본, 거대한 휴머노이드 로봇을 도입하여 철도 유지보수 작업 수행

     * 서일본 철도, 12미터 높이의 로봇 도입
          + 서일본 철도는 철도 유지보수 작업을 위해 트럭에 장착된 12미터 높이의 로봇을 도입함
          + 이 로봇은 나뭇가지 자르기와 페인팅 작업을 포함한 다양한 유지보수 작업을 수행할 예정임
     * 로봇의 외형과 기능
          + 이 로봇은 코카콜라 병 모양의 눈과 Wall-E를 닮은 머리를 가지고 있음
          + 큰 팔에는 칼날이나 페인트 브러시를 장착할 수 있음
          + 트럭에 장착되어 레일 위를 주행할 수 있음
     * 작동 방식
          + 조종자는 트럭의 조종석에 앉아 로봇의 눈을 통해 카메라로 시야를 확보하고, 원격으로 강력한 팔과 손을 조작함
          + 로봇은 12미터의 수직 도달 범위를 가지며, 40kg의 물체를 운반하거나 브러시를 사용해 페인트 작업을 수행할 수 있음
     * 주요 작업
          + 현재 로봇의 주요 작업은 철도 주변의 나뭇가지 자르기와 전선 위의 금속 프레임 페인팅임
          + 이 기술은 고령화로 인한 노동력 부족을 해결하고, 높은 곳에서의 추락 사고나 전기 충격을 줄이는 데 도움을 줄 것임
     * 미래 계획
          + 서일본 철도는 향후 모든 인프라 유지보수 작업에 로봇을 활용할 계획임
          + 이는 노동력 부족 문제를 해결하는 사례가 될 것임

    GN⁺의 의견

     * 기술의 중요성
          + 일본의 고령화 문제를 해결하기 위한 혁신적인 접근법임
          + 로봇을 활용한 유지보수 작업은 안전성을 크게 향상시킬 수 있음
     * 산업적 영향
          + 다른 철도 회사나 인프라 유지보수 업체들도 유사한 기술을 도입할 가능성이 높음
          + 로봇 기술의 발전은 다양한 산업 분야에 긍정적인 영향을 미칠 것임
     * 기술 도입 시 고려사항
          + 초기 도입 비용과 유지보수 비용을 고려해야 함
          + 로봇의 신뢰성과 효율성을 지속적으로 모니터링하고 개선해야 함
     * 유사 기술 추천
          + Boston Dynamics의 Spot 로봇이나 ABB의 산업용 로봇도 유사한 기능을 제공할 수 있음
          + 이러한 로봇들은 다양한 산업 분야에서 활용 가능함
     * 기술의 장단점
          + 장점: 노동력 부족 문제 해결, 작업 안전성 향상
          + 단점: 초기 비용 부담, 기술적 문제 발생 가능성

   이 로봇 기술은 일본의 고령화 문제를 해결하는 데 큰 도움이 될 것이며, 다른 산업 분야에서도 유사한 기술이 도입될 가능성이 큼.

        Hacker News 의견

     * 이 로봇은 외과 수술 로봇처럼 사용자 제어형임
          + 일본의 나이 많은 작업자들이 원격으로 조작할 가능성이 있음
          + ""거대""라는 표현에 비해 크기가 실망스럽게 작음
          + Gundam을 기대했음
          + 작동 중에 인간이 매우 가까이 접근함
          + Jinki의 웹사이트가 인상적임
     * 일본 로봇 디자이너들이 실용적인 디자인보다 인간형 디자인을 선호하는 경향이 있음
          + 비디오를 보면 도구에 더 가까운 카메라가 유용할 것 같음
          + 부품 배치, 검사, 나뭇가지 제거 작업에 유리할 것임
     * 이 로봇은 80년대의 멋진 로봇처럼 보임
          + 1988년의 Johnny 5를 닮았음
     * 미디어가 모든 것을 ""일본""에 귀속시키는 경향이 있음
          + 여기서는 일본의 작은 민간 회사가 만든 로봇을 시도하는 것임
          + 일본 정부가 전국적으로 Gundam을 배치하는 것은 아님
     * 이 로봇은 2022년에 공개되었음
     * 이 로봇은 괜찮은 힘의 증폭기처럼 보임
          + 작은 작업 팀과 붐 리프트, 좋은 도구 상자를 사용하는 것과 비교해 효율성이 궁금함
          + 한 사람이 조종석에서 모든 주의를 기울일 수 없는 문제도 있음
          + 영역 표시 및 교통/보행자 지시 같은 문제를 해결해야 함
     * 모든 것을 위한 거대한 인간형 로봇!
          + 몇 일 만에 미니 콘크리트 건물을 만드는 비디오를 본 적이 있는지?
          + 가능하다면 더 빠르게 굳는 콘크리트로 그 규모를 확대하는 것도 멋질 것임
     * 세금이 적절하게 사용될 때 이런 모습일까?
"
"https://news.hada.io/topic?id=15603","중력파 포착의 새로운 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             중력파 포착의 새로운 방법

    중력파 탐지의 새로운 방법들

     * 2015년 9월, 첫 중력파 직접 탐지로 물리학의 역사가 바뀌었음
     * 중력파는 우주를 가로지르는 시공간의 변동으로, 빛의 속도로 이동함
     * LIGO와 Virgo 관측소에서 중력파 탐지가 일상화되었음
     * 중력파 과학은 자연 법칙과 우주의 역사를 탐구하는 새로운 방법을 제공함
     * 새로운 중력파 탐지 기술과 장비가 개발되고 있음

    펄사 타이밍 배열: 수십 년 동안 지속되는 파동 포착

     * 2000년대 초부터 라디오 천문학자들이 은하 전체를 중력파 탐지기로 사용하려고 시도함
     * 펄사 타이밍 배열(PTA)은 중력파로 인한 주파수 변화를 감지함
     * 2023년, PTA 기술이 성과를 내기 시작함
     * 북미, 유럽, 호주, 중국의 네 개 협력팀이 중력파의 무작위 배경 패턴을 발견함
     * 데이터 통합 및 분석을 통해 더 확실한 증거를 찾고 있음

    마이크로파 망원경: 빅뱅에서 오는 파동 감지

     * 2014년, BICEP2 팀이 빅뱅의 잔광인 우주 마이크로파 배경(CMB)에서 중력파를 감지했다고 주장함
     * 새로운 망원경 배열인 Simons Observatory가 칠레 아타카마 사막에 설치되고 있음
     * CMB의 특정 'B 모드' 패턴을 찾고 있음
     * 인플레이션 이론을 증명할 수 있는 중요한 증거가 될 수 있음

    원자 간섭계: 주파수 간격 메우기

     * 많은 프로젝트가 저주파 중력파 탐지에 집중하고 있음
     * 원자 간섭계는 1Hz 이하의 주파수를 탐지할 수 있음
     * 스탠포드 대학에서 10미터 드롭 원자 간섭계를 개발함
     * 100미터 원자 간섭계가 테스트 베드로 계획되고 있음

    데스크탑 탐지기: 주파수 높이기

     * 작은 크기의 중력파 탐지기를 개발 중임
     * Levitated Sensor Detector(LSD)는 1미터 간격의 거울 사이에서 레이저를 반사함
     * Bose-Einstein 응축체(BEC)를 이용한 탐지기 아이디어도 있음
     * 높은 주파수의 중력파를 탐지할 수 있음

    양자 결정: 단 1초면 충분

     * 양자 상태의 다이아몬드 결정으로 중력파를 탐지하는 아이디어가 있음
     * 결정의 두 양자 상태를 1미터 떨어뜨린 후 다시 결합함
     * 중력파가 통과하면 결정의 두 상태가 동기화되지 않음

    GN⁺의 의견

     * 중력파 탐지 기술의 발전은 우주와 자연 법칙을 이해하는 데 큰 도움이 될 것임
     * 다양한 주파수 범위에서 중력파를 탐지하면 더 많은 우주 현상을 관찰할 수 있음
     * 새로운 기술은 기존의 대규모 실험실 외에도 더 많은 연구자들이 중력파 연구에 참여할 수 있게 할 것임
     * 중력파 탐지 기술의 발전은 천문학과 물리학의 새로운 시대를 열 것임
     * 새로운 기술을 도입할 때는 비용, 기술적 한계, 데이터 분석의 복잡성을 고려해야 함

        Hacker News 의견

     * 첫 번째 세대의 중력파 탐지기는 현재의 간섭계와는 완전히 다른 설계였음
          + Weber의 1987년 SN1987A에서 중력파를 탐지했다는 주장은 널리 반박되었음
     * 좁은 주파수 대역에서 더 넓은 범위로 이동하면 정보 인코딩이 가능할 수 있음
          + 고도로 발전된 문명이 중력파를 이용한 통신을 고려할 수 있을지 궁금함
          + 우리는 전자기파처럼 '자연 주파수'에서 'Hello, world'를 찾아야 할지 고민해야 함
     * LIGO 시설을 무료로 투어할 수 있음
          + 몇 년 전 Hanford 시설을 방문했으며, 강의와 함께 전체 시설을 투어할 수 있었음
          + 정말 멋진 경험이었음
     * 새로운 제안으로 이미 계획된 탐사선을 중력파 탐지기로 사용할 수 있음
          + Uranus Orbiter와 Probe Mission을 통해 마이크로 헤르츠 중력파를 도플러 추적 방식으로 탐지할 수 있음
          + 초기 우주 신호와 초경량 암흑 물질을 탐지할 수 있음
     * LISA에 대한 언급이 없다는 점이 놀라움
          + 3개의 위성이 250만 km 간격으로 비행하는 우주 기반 중력파 탐지기임
          + 2035년에 발사될 예정임
     * 중력은 존재하지 않고 시공간의 기하학적 결과라는 것이 증명된 것인지 궁금함
          + 중력파 실험은 시공간이 존재하고 측정 가능한 기하학적 구조를 가지고 있음을 보여줌
          + 양자 역학에서는 여전히 중력의 힘 전달자를 찾지 못했다는 점이 이해되지 않음
     * 현재 탐지 방법의 상한 주파수를 높일 수 없는 이유가 궁금함
          + 1kHz는 간섭계에 비해 낮은 주파수임
          + 1kHz와 관련된 파장이 간섭계를 통과하는 빛의 경로보다 작아지는 것이 제한 요인일 수 있음
     * 중력파가 강한 자기장에서 광자로 붕괴될 수 있다는 흥미로운 방법이 있음
          + 물리학 교수에게 들은 내용이며, 일부 사람들은 여전히 이 방법을 탐구 중임
     * LIGO의 민감도에 대해 언급하고 싶음
          + 중력파 탐지는 지구에서 알파 센타우리까지의 거리를 인간 머리카락 너비의 변동으로 측정하는 것과 같음
          + 이 기술은 단순히 민감도를 높이는 것이 아니라 다양한 유형의 중력파를 탐지하는 데 목적이 있음
          + 시공간 확장이나 중력파가 무엇인지 여전히 이해하지 못하지만, 이는 복잡한 수학적 개념임
     * 양자 파동 함수 사건을 탐지할 수 있는지 궁금함
"
"https://news.hada.io/topic?id=15730","Kivy - 크로스 플랫폼 Python UI 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Kivy - 크로스 플랫폼 Python UI 프레임워크

     * 데스크톱, 모바일 및 임베디드 플랫폼을 포함한 크로스 플랫폼에서 작동하는 GUI 앱을 개발하기 위한 오픈 소스 Python 프레임워크
     * 빠르고 쉬운 인터랙션 디자인과 신속한 프로토타이핑을 가능하게 하는 동시에 코드를 재사용 및 배포할 수 있도록 하는 것이 목표
     * 사용하기 쉽고, 단일 코드베이스로 여러 플랫폼에 앱을 배포할 수 있음
          + 맥, Linux(라즈베리 파이 OS 포함), BSD, 윈도우, iOS, 안드로이드
          + 모든 Kivy 위젯은 멀티터치를 지원
     * Python과 Cython으로 작성되었으며 OpenGL ES 2.0 기반
     * 비즈니스 친화적(MIT 라이센스) 100% 무료로 사용 가능하며, 전문적으로 개발, 지원, 유지 관리됨
     * 10년된 프레임워크로 풍부한 에코시스템이 존재
          + Buildozer: 모바일 기기를 포함한 여러 플랫폼에 설치할 수 있도록 Python 애플리케이션을 바이너리 패키지로 변환하는 개발 도구
          + Plyer: 다양한 플랫폼(Android, iOS, macOS, Linux 및 Windows)의 하드웨어 기능에 액세스하기 위한 플랫폼 독립적인 Python API
          + PyJNIus: JNI(Java Native Interface)를 사용하여 Java 클래스에 액세스하기 위한 Python 라이브러리
          + Pyobjus: Objective-C 런타임 리플렉션을 사용하여 Objective-C 클래스에 Python 클래스로 액세스하기 위한 Python 모듈
          + Python for Android: Python 앱을 Android 기기에서 실행할 수 있는 바이너리로 패키징하는 개발 도구
          + Kivy iOS: iOS에서 Kivy 애플리케이션을 실행하는 데 필요한 라이브러리를 컴파일하고 Xcode 프로젝트 생성을 관리하는 툴체인
          + Audiostream: 마이크 및 스피커에 직접 액세스할 수 있는 라이브러리
          + KivEnt: Kivy용 엔티티 기반 게임 엔진
          + Oscpy: 오픈 사운드 제어(OSC) 네트워크 프로토콜의 Python 구현
          + Garden: 사용자들이 만들고 유지 관리하는 위젯 및 라이브러리

   으엑......

        Hacker News 의견

     * Kivy와 관련된 다양한 프로젝트가 있으며, python-for-android와 Plyer 같은 도구들이 있음
          + python-for-android: Android용 Python 프로젝트 컴파일 도구
          + Plyer: 크로스 플랫폼 API 제공 도구 (알림, 하드웨어, 파일 선택기 등)
     * KivyMD는 Kivy 위에 Material Design을 구현한 도구임
     * Kivy 팀은 친절하며, PyCon이나 FOSDEM에서 만난 경험이 있음
     * Kivy 프레임워크는 사용하기 좋으며, kv라는 설명 언어가 매우 유용함
     * 크로스 컴파일은 어려울 수 있으며, 앱 로딩 시간이 길지만 작동함
     * Qt 같은 큰 프레임워크에 비해 몇 가지 기능이 부족하며, WebView가 없고 접근성이 좋지 않음
     * 전반적으로 매우 좋은 프로젝트이지만 더 많이 알려지지 않아 아쉬움
     * 2024년 기준으로 Kivy 갤러리의 스크린샷은 매력적이지 않음
     * Electron이 현재까지는 ""데스크탑"" UI의 왕으로 보임
     * 접근성에 대한 언급이 사이트에 없으며, 아직 구현되지 않은 것으로 보임
     * Kivy는 사용자 대면 앱에 적합하지 않음
     * 새로운 UI 프레임워크들이 접근성 기능에서 부족한 점이 실망스러움
     * Kivy의 랜딩 페이지는 프레임워크 자체보다 자금 지원에 대해 더 많이 언급함
     * UI를 보여주는 이미지가 하나뿐이며, 스타일이 스톡 사진처럼 보임
     * 갤러리는 상단 링크를 통해 접근 가능함
     * JavaFX도 여전히 훌륭하며, 50MB 힙으로 잘 작동하는 앱을 가짐
     * 네이티브 OS 설치 프로그램도 제공하지만 웹 지원은 없음
     * Kivy는 2014년에 첫 오픈 소스 기여를 하게 만든 프로젝트임
     * Vim에 Kivy 파일 지원을 제출했으며, Bram Moolenaar와 이메일로 패치 디프를 통해 작업했음
     * Bram Moolenaar에게 애도의 뜻을 표함
     * Katrain은 Kivy를 사용하며, 롤링 릴리스 배포판에서 패키징과 업그레이드가 문제임
     * pip로 설치할 때 부분적으로 작동함
     * 패키징 관점에서 Kivy는 좋지 않음
     * flet이라는 크로스 플랫폼 Python 프레임워크가 흥미로움
          + Flutter로 구동되며, Flutter/Dart 튜토리얼을 Flet로 번역 가능함
          + 사용해본 적은 없지만, 활발한 커뮤니티가 있으며, 인기 있는 언어로 멋진 앱을 작성할 수 있음
     * Kivy가 더 널리 사용되기 위해서는 Python의 데이터 과학/머신 러닝 분야와 연결되어야 함
     * 단일 언어 생태계 내에서 데이터 중심 크로스 플랫폼 앱을 구축하는 것이 여러 API와 런타임을 사용하는 것보다 덜 복잡함
     * 단일 언어 접근 방식이 유용한 앱 유형은 탐색적 데이터 과학 작업이 아님
     * 고성능 인터랙티브 그래픽이 필요한 작업도 아님
     * 알고리즘과 관련 도구를 비기술 사용자에게 제공하는 작업에서 Kivy가 단순성과 빠른 프로토타이핑으로 이점을 가질 수 있음
     * Swift와 SwiftUI로 iOS 앱을 작성한 경험이 있음
     * Kivy로 iOS 앱을 작성하고 앱 스토어에 올린 경험이 있는 사람의 경험을 공유 요청함
"
"https://news.hada.io/topic?id=15636","AI 거품이 폭발할 때거품이 폭발할 때
"
"https://news.hada.io/topic?id=15683","완전히 이해하지 못하는 책을 읽는 즐거움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         완전히 이해하지 못하는 책을 읽는 즐거움

     * ""방금 읽은 내용을 완전히 이해하지는 못했지만 정말 좋았습니다.""라고 말하는 것이 완전히 괜찮고 정상적이며 일반적인 일이 되기를 바람

  개인 경험과 책 읽기

     * 많은 탭을 열어두고, 다양한 주제에 대해 노트를 작성함
     * Neal Stephenson의 ""Baroque Cycle""을 읽으며 역사적 세부 사항을 기억하는 데 어려움을 겪음
     * 백과사전을 참고하며 책을 읽는 과정에서 많은 것을 배움

  도전적인 책의 가치

     * 최근에는 독자들에게 도전적인 책을 찾기 어려워짐
     * 출판사는 확실한 것, 브랜드 이름, 화려한 데뷔작에 초점을 맞추는 경향이 있음
     * 그러나 도전적이고 신비로운 책도 여전히 출판되고 있음

  이해하지 못하는 책을 읽는 즐거움

     * 이해하지 못하는 책을 읽는 것은 새로운 모험을 제공함
     * 하지만 이러한 책들은 책에 대한 담론에서 사라지는 경향이 있음
          + Alaya Dawn Johnson의 The Library of Broken Worlds와 같은 책에 대해 이야기하는 사람들을 찾기 위해 인터넷의 이상한 구석을 뒤져봤음
          + 미국과 영어권 독자들이 너무 ""무언가""여서 번역되지 않아 볼 수 없는 책이 얼마나 많은지 생각해봄. Helen Oyeyemi와 같은 작가의 책을 출판해주는 Riverhead에 감사함. 그녀의 책은 예술 작품이며 완전히 이해할 수 없음. 그러나 그렇기에 항상 새로운 것을 발견할 수 있음
          + Molly McGhee의 Jonathan Abernathy You Are Kind와 같은 책을 읽을 수 있어 감사함. 이 책은 읽기는 쉽지만 완전히 이해하기는 어려움. 혹은 이 순간을 얼마나 명확하게 말하고 있는지 받아들이기 어려운 점이 ""어려운"" 점일 수 있음
          + McGhee의 트위터 프로필에는 문학 소설과 장르 소설이 더 자주 접촉해야 한다는 내용이 있었음. 다른 섹션에 등장하는 SF와 판타지, 주류에서 간과되는 많은 SF 작가들에 대해 생각해봄. 우리는 무엇을 읽고 읽지 않을지에 대해 스스로 많은 벽을 세움. 이는 시간이 얼마나 있는지에 대한 문제임
     * 불확실성을 받아들이고, 호기심을 자극하며, 이상하거나 혼란스럽거나 예상치 못한 책에 기회를 줄 수 있는 시간과 공간, 정신적 여유가 있기를 바람
     * ""방금 읽은 내용을 완전히 이해하지는 못했지만 좋아했다"" 고 말하는 것이 완전히 괜찮고 정상적이며 일반적인 일이 되기를 바람

  이 글을 쓴 이유

     * 이 황홀한 무지의 길로 들어선 계기는 Vajra Chandrasekera의 Rakesfall을 읽은 것이었음. 비행기에서 읽었는데, 나중에 꿈을 꾼 것 같았음. 마치 꿈을 기억하는 것처럼 맥락이 제거된 채 전체 장면이 머릿속에 존재했음
     * 그 후 펜과 노트, 휴대폰, 노트북을 들고 다시 읽었음. 수많은 탭을 열고 Ramayana의 개요를 다시 살펴봤음. 이는 몇 년 전 책 모임에서 읽은 Penguin Classic이었지, 어릴 때 교과서에서 만난 이야기나 신화가 아니었음
     * 책에 대한 리뷰 초안 작성을 미루고 작가와의 모든 인터뷰를 읽었음. 조각들을 맞추고, 비행기에서의 꿈 같은 상태를 벗어나 이야기가 어디서 다시 시작되고, 어디서 순환하며, 어디서 자기 꼬리를 물고 다시 태어나는지 보기 시작했음
     * 이 책에는 완전히 이해할 수 없는 것이 많음. 왜냐하면 이 이야기가 포괄하는 모든 것을 완전히 이해할 문화적 맥락이 없는 백인 미국인이기 때문임. 그리고 내가 말하고 싶은 것은, 좋다는 것임. ""좋다, 그것을 인정하자.""
     * 책이 정확히 무엇을 하고 있는지 즉시 이해하지 못하는 데에서 진정한 기쁨을 찾을 수 있음. 우리에게 익숙한 서사 구조 밖에서 무언가 작동하고 있다는 것을 보는 기쁨. seemingly하게 이질적인 서사의 조각들이 거대하고 아름다운 무언가가 되기를 기다리는 풍요로운 기대감. 책을 몇 장 읽고 나서야, 그것이 ""무엇에 관한"" 것인지 끝까지 읽기 전까지, 어쩌면 그 후에도 말할 수 없다는 것을 깨닫는 기쁨

GN⁺의 의견

     * 이 글은 독자들에게 새로운 도전과 모험을 권장함으로써 독서의 즐거움을 강조함
     * 이해하지 못하는 책을 읽는 것이 독서의 새로운 차원을 열어줄 수 있음을 보여줌
     * 다양한 문화적 배경을 가진 책을 읽으며 새로운 시각을 얻는 것이 중요함
     * 독서의 주관성을 인정하고, 모든 것을 알 필요는 없음을 강조함
     * 도전적인 책을 통해 독서의 폭을 넓히고, 새로운 경험을 추구하는 것이 중요함

   중학생때 움베르토 에코의 ""푸코의 진자""라는 책을 읽었었는데요, 한 200페이지는 무슨소린지도 몰랐습니다. 하지만 읽다보니 점점 빠져들었고, 이후에는 움베트로 에코가 쓴 책들을 모조리 탐독했더라지요.
   이해하기는 어려웠지만 즐거웠던 기억입니다.

   ""좋은 책이란 물론 거침없이 읽히는 책이다. 그러나 진짜 양서는 읽다가 자꾸 덮이는 책이어야 한다.""
   법정 스님의 무소유에 이런 글귀가 있죠. 가끔씩 공감이 가는 글귀입니다.

   일부만 이해하는 즐거움이 뭔지 모르겠지만 좋아보이네요

   저는 이 글을 완전히 이해하지는 못하였지만 좋은 내용 같습니다.

        Hacker News 의견

     * Kafka는 독서가 우리를 강하게 자극하고 깊이 감동시키는 책을 읽어야 한다고 주장함
          + 책이 우리를 행복하게 만드는 것이 목적이라면, 책 없이도 행복할 수 있음
          + 책은 우리 내면의 얼어붙은 바다를 깨는 도끼와 같아야 함
     * 복잡한 책을 읽을 때 처음에는 노트 필기를 피하고 배경 지식에 대해 걱정하지 않는 습관을 들이는 것이 유용함
          + ""Augustus""라는 역사 소설을 읽으며, 처음에는 배경 지식이 필요할 것 같아 미뤘지만, 읽다 보니 자연스럽게 이해하게 됨
          + ""Infinite Jest""와 같은 어려운 소설도 노트 없이 읽는 것이 더 효과적일 수 있음
          + 수학이나 컴퓨터 게임에서도 비슷한 경험을 할 수 있음
          + 혼란스러움을 받아들이는 것이 이해와 즐거움을 높이는 데 도움이 됨
     * 유럽으로 이사한 후 유명한 갤러리를 방문하며 고전 회화를 구글링하며 이해하는 것이 흥미로웠음
          + 이제는 그림 속 인물들을 구분할 수 있게 되었고, 과거와 현재의 삶을 더 잘 이해하게 됨
          + 때로는 미지의 세계에 뛰어드는 것이 보상을 가져다줌
     * 젊었을 때 독서 속도가 느려서 복잡했지만, 천천히 읽으며 더 많이 흡수하고 이해하게 되었음
          + 빠르게 읽는 것보다 천천히 읽는 것이 더 많은 것을 얻을 수 있게 함
          + 결국 석사와 박사 과정을 성공적으로 마칠 수 있었음
     * Byte Magazine을 읽으며 다양한 주제를 접하고 넓은 지식을 얻었음
          + 편집자가 선택한 기사를 읽으며 많은 것을 배웠고, 나중에 유용한 아이디어를 얻었음
     * 어려운 기술 서적을 읽는 것을 즐기는 사람도 있음
          + 해변에서 ""Introduction to the Theory of Relativity""를 읽으며 즐거움을 느꼈음
          + 기술 서적을 읽는 것은 인내와 끈기가 필요하지만, 그 자체로 보상이 될 수 있음
     * ""Neuromancer""와 같은 초기 사이버펑크 소설은 설명되지 않은 기술 용어를 많이 사용함
          + 독자들이 혼란스러워할 수 있지만, 이는 사이버펑크 장르의 특징임
          + 역사 소설은 깊이 있는 세계를 참조할 수 있어 더 복잡한 이야기를 전달할 수 있음
          + ""The Name of the Rose""와 같은 소설은 역사적 세부 사항이 풍부하여 깊이를 더함
          + ""The Lord of the Rings""는 톨킨이 만든 복잡한 역사와 언어 덕분에 뛰어난 판타지 소설이 됨
     * Ralph Waldo Emerson의 말: ""내가 읽은 책을 기억하지 못하지만, 그 책들이 나를 만들었음""
     * 예술 비평에 대한 규칙:
          + 좋아하고 좋은 예술
          + 좋아하지 않지만 좋은 예술
          + 좋아하고 나쁜 예술
          + 좋아하지 않고 나쁜 예술
     * 코드 읽기와 셰익스피어에 대한 언급이 적음
          + 다양한 방식으로 읽을 수 있음
          + 코드베이스와 셰익스피어는 각각 다른 방식으로 읽을 수 있음
          + 필요에 따라 다시 읽고, 더 많은 가치를 찾을 수 있음
"
"https://news.hada.io/topic?id=15648","Show HN: Doggo – 명령줄을 위한 강력하고 인간 친화적인 DNS 클라이언트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show HN: Doggo – 명령줄을 위한 강력하고 인간 친화적인 DNS 클라이언트

     * 색상으로 구분되고 표 형식으로 된 사람이 읽을 수 있는 출력
     * 쉬운 스크립팅 및 구문 분석을 위한 JSON 출력 지원
     * 다중 전송 프로토콜:

     HTTPS를 통한 DNS(DoH)
     TLS를 통한 DNS(DoT)
     QUIC를 통한 DNS(DoQ)
     TCP를 통한 DNS
     UDP를 통한 DNS
     DNS 크립트

     * 사용자 정의 가능한 쿼리 전략을 갖춘 다중 리졸버 지원
     * IPv4 및 IPv6 지원
     * doggo.mrkaran.dev 에서 웹 인터페이스를 사용할 수 있습니다.
     * 셸 완성 zsh및fish
     * 역방향 DNS 조회
     * 다양한 DNS 플래그(AA, AD, CD, DO 등)를 포함한 유연한 쿼리 옵션
     * 문제 해결을 위한 디버그 모드
     * 응답시간 측정
     * 크로스 플랫폼 지원(Linux, macOS, Windows, FreeBSD, NetBSD)

   사족.
   잘못 읽으면 큰일납니다.

   또ㅇ...독고...!

   서비스를 종료하면 독고다이...

   저만 이상하게 읽히는게 아니었군요?
"
"https://news.hada.io/topic?id=15668","AI가 보낸 이메일을 받다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI가 보낸 이메일을 받다

     * 어제, 7월 1일, ""Raymond""라는 사람에게서 이메일을 받음

     Hey Tim,
     당신의 홈랩 개편에 관한 글을 재미있게 읽었어요. 지속적인 개선 여정을 보는 것이 좋네요!
     당신이 블로그에 Deno Fresh를 사용하고 있는 것을 보았는데, 업데이트와 배포를 관리하는 것이 꽤 힘들 것 같아요.
     내가 Wisp라는 CMS를 만들었는데, 콘텐츠 관리를 단순화하여 당신의 필요에 완벽하게 맞을것 같아요.
     당신의 생각을 듣고 싶네요!
     Best, Raymond
     * 처음에는 독자가 보낸 이메일인 줄 알았음. 하지만 Deno Fresh를 사용하고 있다는 것을 알고 있었기 때문에 CMS가 ""당신의 필요에 완벽하게 맞음""이라고 말하기 전에 좀 더 깊이 파고들었을 것이라고 생각했음
     * Wisp CMS를 확인해보니 헤드리스 CMS였음. 그들의 블로그를 확인했는데, 7월 2일자 최신 블로그 게시물이 ""How I Use AI Agents to Send 1000 Personalized Email for Outreach""였음
     * 게시물의 대표 이미지에 내가 받은 이메일과 거의 동일한 내용이 있었음
     * 지난달에 Neven Mrgan의 블로그 게시물 ""How it feels to get an AI email from a friend""를 기억했음. 동일한 것은 아니지만 유사점이 있었음
     * ""Raymond""가 이 이메일을 작성하고 나의 특정 블로그 문제를 해결하는 방법을 보여주었다면, 열린 마음으로 확인했을 것임. 하지만 그렇게 하지 않았음

    블로그 게시물 내용

     * 블로그 게시물은 다음과 같이 시작됨:

     당신의 관심사와 경험에 맞춘 것처럼 느껴지는 이메일을 받은 적이 있나요? 그 이메일이 사람이 아닌 인공지능(AI) 에이전트에 의해 작성된 것이라면 어떨까요?
     * 이 부분이 마음에 들지 않았음. 게시물의 또 다른 부분:

     나는 AI 에이전트를 사용하여 GitHub에 공개 블로그를 가진 개발자들에게 거의 1,000개의 개인화된 이메일을 보냈음
     * 이것이 일반적인 일이 될 수 있기 때문에 GitHub 미러를 개인 블로그로 설정해야 하는지 고민하게 됨. GitHub 프로필에서 이메일을 제거했지만, Git 로그에서 여전히 얻을 수 있을 것 같음
     * Raymond, 난 스팸이 싫어요

   AI 보냈든 아니든 이메일이 공개되어 있다면 스팸 메일은 오기 마련이죠

        Hacker News 의견

     * AI 이메일 발송: AI 에이전트가 사람처럼 개인화된 이메일을 작성해 주목을 끌고 참여를 유도할 수 있는지 실험한 블로그 링크가 있음
          + 이메일이 진짜 개인화된 것처럼 보이게 하는 것이 어려움
          + 수신자들이 AI가 작성한 이메일임을 전혀 감지하지 못했음
     * 기술적 측면: 여러 LLM을 연결해 작업을 수행하는 것이 놀라웠음
          + AI가 주목을 끌고 참여를 유도하는 데 사용되는 것이 아쉬움
          + 사회적 진보와 혁신이 주목을 끌고 참여를 유도하는 데 얼마나 사용되었는지 궁금함
     * 미래 전망: AI 에이전트들이 서로 이메일을 보내고 프로그램을 할인 판매하는 미래를 상상함
          + 인간은 낚시를 하러 감
     * 긍정적 반응: 스팸 마케팅 이메일을 보내는 마케터들이 일자리를 잃게 되어 기쁨
          + AI가 보내는 이메일도 인간이 보내는 것만큼 성가심
          + AI가 보내는 이메일로 인해 판매 보너스를 정당화할 수 없게 됨
     * AI 에이전트의 역할: AI 에이전트가 이러한 메시지를 필터링하고 응답하는 역할을 하게 될 것임
          + 실제 사람과 접촉하는 것이 더 어려워질 것임
          + 단기적으로 이 격차를 악용해 돈을 버는 사람들이 있을 것임
     * 일반화: 이러한 개인화된 콜드 아웃리치가 LinkedIn, Twitter, Email 등에서 더 흔해질 것임
          + Dead Internet Theory가 현실이 될 가능성이 있음
     * 스팸 감소 방법: AI를 사용해 제품에 높은 관심을 가질 가능성이 있는 소규모 그룹을 필터링하고, 실제로 개인화된 이메일을 작성할 수 있음
          + 이전의 관심 예측을 기반으로 예제를 추가해 스팸을 줄이고 콜드 아웃리치를 개선할 수 있음
          + AI를 책임감 있게 사용하는 방법이 있음
     * 개인 경험: 블로그 게시물에 대해 받은 이메일이 기분 좋았음
          + AI가 작성한 것인지 의심스러움
          + AI 스타트업에서 보낸 이메일이었음
          + 낯선 사람에게서 받은 격려 이메일도 이제는 의심하게 될 것임
     * 캐치올 이메일 사용: 캐치올 이메일 주소를 사용해 스팸을 감지하고 필터링함
          + 서비스에서 데이터가 유출되면 DSGVO 불만을 제기하고 해당 주소의 이메일을 필터링함
          + 자신의 도메인과 이를 지원하는 메일 서버만 있으면 됨
     * 자동화된 이메일: 자동화된 이메일이 자동 리더에 의해 읽히는 시점이 올 것임
          + 내부 회사에서 만우절 웹사이트를 만들어 Proxy Ai라는 이름으로 이메일과 소셜 미디어를 읽어주는 서비스를 소개함
          + 실제로는 요약을 보내지 않음
     * AI의 부작용: AI가 연례 성과 평가를 작성해 잘못된 정보로 인해 해고되거나 잘못된 보너스를 받는 상황을 상상함
"
"https://news.hada.io/topic?id=15620","주말 프로젝트: C 언어로 즐기는 유쾌한 도전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       주말 프로젝트: C 언어로 즐기는 유쾌한 도전

    주말 프로젝트: C 언어로 재미있게 놀기

     * C 언어는 단순하면서도 강력하여 전체 운영 체제를 쉽게 작성할 수 있음
     * C 언어의 간결한 문법은 Java, Go 등 많은 후속 언어에 영향을 미침
     * 코드 난독화 예술의 출현에도 기여함

    IOCCC 대회

     * IOCCC 대회는 코드 난독화의 대표적인 예시
     * 대회 참가작은 종종 혼란스러운 전처리기 매크로, 비논리적인 포맷, 비도움이 되는 변수 이름 등을 사용함
     * 이러한 코드는 읽기 어렵지만, C 언어는 읽기 쉬우면서도 혼란스러울 수 있음

    switch 문

     * switch 문은 if 문이나 for 문과 마찬가지로 중괄호가 필요하지 않음
     * 중괄호 없이 사용할 경우 한 문장만 포함할 수 있음
     * switch 문은 기본적으로 glorified goto와 같음
     * switch 문 내부에서 변수 초기화는 예기치 않은 동작을 유발할 수 있음

    case 레이블

     * case 레이블은 switch 문 블록의 최상위에 있을 필요가 없음
     * if (0) 조건문과 함께 사용 가능
     * break 문 없이도 작동 가능

    else와 if의 조합

     * else와 if를 사용하여 switch 문을 대체할 수 있음
     * 중괄호 없이도 여러 조건을 처리할 수 있음

    GNU 확장 기능

     * && 연산자를 사용하여 레이블의 주소를 얻고 goto로 이동 가능
     * 이를 통해 switch 문을 대체할 수 있음

    for 문 대체

     * 변수 선언 내에서 레이블을 사용하여 루프를 구현 가능
     * GCC 전용이지만, C 언어로도 매우 독창적이고 혼란스러운 코드를 작성할 수 있음

    결론

     * C 언어는 매우 독창적이고 혼란스러운 코드를 작성할 수 있는 가능성을 제공함
     * 이러한 코드는 읽기 어렵지만, C 언어의 강력함을 보여줌


GN⁺의 의견

     * 이 기사는 C 언어의 독창성과 복잡성을 잘 보여줌
     * C 언어의 다양한 활용 가능성을 탐구하는 데 유용함
     * 코드 난독화와 같은 예술적 측면도 흥미로움
     * GNU 확장 기능을 활용한 예제는 매우 독특하고 창의적임
     * C 언어를 배우는 초보 개발자에게는 다소 어려울 수 있음
"
"https://news.hada.io/topic?id=15624","AI-Native 회사 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AI-Native 회사 만들기

     * 2020년대 초반에는 생성 AI에 많은 관심이 집중되었음
          + 생성 AI 도구가 우리를 어떻게 형성할 것인지, 작문, 코딩, 애니메이션, 정보 소비 방식에 어떤 영향을 미칠 것인지에 대한 논의가 주를 이루었음
          + 그러나 우리 도구의 형태에 대해서는 그다지 많은 언급이 없었음
     * 1960년대 후반, 정보 시스템은 방대한 양의 데이터로 인해 관련 정보를 검색하는 과정이 점점 더 비용이 많이 드는 문제에 직면함
     * 1980년대와 90년대에는 관계형 데이터베이스가 지배적인 솔루션이 되었음
          + 직관적인 인덱싱을 제공하고 쿼리 효율성을 보장했음
          + 관계형 데이터베이스는 데이터를 구조화된 관계를 가진 테이블 모음으로 표현할 수 있게 해주었음
          + SQL과 같은 쿼리 언어를 통해 더 빠른 데이터 검색을 가능하게 했음
     * 데이터베이스 아키텍처가 진화하는 과정에서, IBM, Oracle, Sun Microsystems, MongoDB 등 특정 기업들이 각 신흥 시장에서 입지를 굳혔음
     * Oracle이 관계형 데이터베이스 세계를 주도했지만, 사람들이 정보를 저장하고 액세스하는 방식은 계속 변화해 왔음
          + 새로운 작업이 있을 때마다 사람들은 이를 관리할 새로운 아키텍처를 고안해냈음
     * 최근 데이터베이스의 진화는 비정형 데이터를 처리할 필요성에서 비롯되었음
          + 지난 50년 이상 스키마는 주로 구조화된 데이터 관계를 중심으로 구성되었음
          + 그러나 점점 더 많은 사람들이 데이터 모호성을 훨씬 더 잘 처리할 수 있는 도구를 필요로 하게 되었음
          + 이에 벡터 데이터베이스가 등장했음
     * GPT와 같은 트랜스포머 기반 대규모 언어 모델(LLM)은 텍스트의 장기 의존성을 포착할 수 있음
          + 그러나 장문 이해력을 유지하는 것은 계산적으로 비용이 많이 들 수 있음
          + 벡터 데이터베이스는 이러한 모델의 컨텍스트 창을 확장할 수 있음
     * 벡터 데이터베이스가 AI 사용 사례에서 강력할 수 있지만, 여전히 입력과 출력에 의해 작동되는 멍청한 인프라임
          + 데이터를 이해하거나 해석할 수 있는 능력이 부족함
          + 단순히 지시받은 대로 데이터를 저장하고 검색하는 저장소 역할만 할 뿐, 본질적인 지능이나 상황 인식은 없음
     * 2020년 GPT-3 출시로 AI가 기업 제품의 부록이 아니라 핵심으로 점점 더 많이 사용될 수 있게 되었음
          + 트랜스포머 아키텍처, 데이터 량 증가, 성능 향상 등으로 AI 기반 제품 개발의 토대가 마련되었음
     * AI-Native(AI 기반) 기업이 증가하고 규모가 커짐에 따라, AI 기반 사용 사례를 지원하는 도구의 필요성도 높아짐
          + 첫 번째 물결의 AI 핵심 기업들은 주로 기존 모델을 사용한 추론에 초점을 맞추었음
     * 그러나 성능이 향상된 모델(특히 쉽게 접근할 수 있는 오픈 소스 모델)로 인해 기업은 AI 기반 비즈니스로서의 역량을 더 깊이 구축할 수 있게 되었음
          + 이러한 확장성은 AI 기반 기술 스택이 어떤 모습일 수 있는지에 대한 기회의 세계를 열어주고 있음

  우리를 만드는 도구들 (The Tools that Shape Us)

     * 1967년, 마셜 맥루한의 친구인 John M. Culkin은 ""우리는 도구를 만들고 그 후에 도구가 우리를 만든다""고 말했음
          + 기술을 만드는 것도 다르지 않음
          + 우리가 소프트웨어를 만드는 데 사용하는 인프라는 우리의 구축 요구 사항에 맞게 끊임없이 진화해 왔고, 그 후 우리의 구축은 우리가 마련한 인프라에 의해 형성됨
     * 2020년대 초반에는 생성 AI에 많은 관심이 집중되었음
          + 특히 생성되는 텍스트나 코드, 렌더링되는 이미지, 제작되는 딥페이크, 합성되는 음악 등 결과물에 초점이 맞춰졌음
          + 이러한 도구가 우리를 어떻게 형성할 것인지, 작문, 코딩, 애니메이션, 정보 소비 방식에 어떤 영향을 미칠 것인지에 대한 논의가 주를 이루었음
          + 사람들은 개방형 및 독점 대규모 언어 모델의 비교 성능, 환각의 위험성, 플랫폼 대 기능 논쟁, 기존 기업 대 스타트업 논쟁 등을 토론함
     * 그러나 우리 도구의 형태에 대해서는 그다지 많은 언급이 없었음
          + 근본적으로, 우리가 기술을 구축하는 방식은 그 구축을 위해 마련한 인프라에 의해 형성되어 왔음
          + SaaS의 보급은 인터넷에 의해 가속화되었고, 스마트폰의 보편화로 모바일 개발이 가능해졌으며, 클라우드 컴퓨팅에 의해 애플리케이션 세대의 확장성이 촉진되었음
     * 애플리케이션에서 AI의 보편성은 컴퓨팅, 모델 기능, 비즈니스 사용 사례 내에서 해당 모델의 조율에 따라 달라짐
          + 이 글에서는 조율 요소에 초점을 맞출 것임
          + 모든 AI 사용 사례를 조율하는 데 있어 핵심 요소 중 하나는 기업의 데이터베이스임
          + 데이터가 저장되고 조작되며 호출되는 위치는 퍼즐의 중요한 부분임
          + 그러나 보여주겠지만, 데이터베이스의 역사는 대체로 멍청한 인프라의 역사였음
          + AI의 유용성을 극대화하려면 데이터베이스를 생성 방정식의 일부가 되도록 제작해야 할 것임

  데이터의 기반 (A Base For Data)

     * 1959년 5월, CODASYL(데이터 시스템 언어 회의)이 처음으로 소집되어 ""비즈니스 애플리케이션을 구축하기 위한 범용 언어""를 구축하고자 했음
          + 1960년대 후반, 정보 시스템은 방대한 양의 데이터로 인해 관련 정보를 검색하는 과정이 점점 더 비용이 많이 드는 문제에 직면했음
     * 메인프레임 컴퓨터의 사용은 일반적으로 애플리케이션 유지보수, 패치, 성능 유지에 필요한 업그레이드 비용 등으로 인해 메인프레임 활용도가 높아짐에 따라 MIPS(초당 수백만 가지 명령) 비용 증가로 이어졌음
          + 데이터베이스 관리의 복잡성, 경직된 계층 구조, 복잡한 탐색 구조 매핑 등으로 인해 기업은 종종 선택한 정보에 액세스하기 위해 기술 전문 지식을 필요로 했고, 심지어 일부 개발자는 관련 정보에 액세스하기 위해 전체 프로그램을 작성해야 했음
     * 1970년 E.F Codd는 ""대규모 공유 뱅크를 위한 관계형 모델""을 발표하면서, 테이블이 공유 특성(즉, 고유 레코드를 식별하는 기본 키와 테이블 간 관계를 설정하는 외래 키)에 의해 연결될 수 있는 모델을 제안했음
          + 이로 인해 단일 쿼리로 이질적인 테이블에서 데이터를 검색할 수 있게 되었음
          + Codd의 관계형 데이터베이스는 데이터 항목 간의 관계를 기반으로 하여 데이터 조작과 사용의 유연성을 가능하게 했음
     * 1973년 IBM 산호세 연구소의 프로그래머 그룹이 System R 프로젝트에 착수하여, 관계형 데이터베이스 시스템이 프로덕션 사용에 필요한 완전한 기능을 통합하면서도 여전히 높은 성능을 발휘할 수 있음을 입증했음
          + 이 팀은 데이터베이스 효율성을 위한 비용 기반 최적화 프로그램을 개발했고, System R에서 파생된 개발은 나중에 IBM의 첫 번째 관계형 데이터베이스 제품인 SQL/DS의 출시로 이어졌음
     * 1980년대와 90년대에는 관계형 데이터베이스가 지배적인 데이터베이스 솔루션이 되었음
          + 직관적인 인덱싱을 제공하고 쿼리 효율성을 보장했음
          + 관계형 데이터베이스는 데이터를 구조화된 관계를 가진 테이블 모음으로 표현할 수 있게 해주었음
          + SQL과 같은 쿼리 언어를 통해 더 빠른 데이터 검색을 가능하게 했음
     * 관계형 데이터베이스는 단일 머신에서 실행된다는 가정 하에 구축되었음
          + 그러나 1990년대와 2000년대의 인터넷 대량 채택으로 인해 데이터가 엄청나게 유입되어 단일 컴퓨터가 감당하기에는 너무 무거운 워크로드가 발생했음
          + 전통적인 SQL 데이터베이스는 단일 서버에서 실행되도록 설계되었고, 사용자가 저장 용량에 맞게 물리적 하드웨어를 늘려야 했는데, 이는 더 큰 워크로드를 운영하는 기업에게 매우 비용이 많이 드는 것으로 판명되었음
     * 2010년대에는 OLTP(온라인 트랜잭션 처리)에 대한 데이터와 사용자가 기하급수적으로 증가하여, 분산 데이터베이스, 데이터 웨어하우스, OLAP(온라인 분석 처리)의 광범위한 증가로 이어졌음
     * 관계형 데이터베이스와 SQL은 더 이상 필요한 애플리케이션 규모와 복잡성에 적합하지 않았고, NoSQL 데이터베이스는 성능을 높이는 수단으로 등장했음(ACID 기능 희생)
          + 관계형 데이터베이스는 구조화된 데이터를 저장하고 조작할 수 있었지만, 조인의 오버헤드를 처리하고 CRUD 작업 비용을 고려할 때 데이터 간의 관계를 유지하는 것이 어려웠음
          + 관계형 데이터베이스는 논리적이거나 이산적인 요구 사항이 있는 관계형 데이터를 처리하는 데 적합했지만 일반적으로 관계형 구조를 위해 특별히 구축된 레거시 시스템에 맞춰져 있었음
          + NoSQL은 비정형 빅데이터를 처리하는 수단으로 등장하여 비관계형 접근 방식을 통해 개발자에게 데이터 영속성을 제공했음
          + SQL을 기본 쿼리 언어로 사용하는 대신 NoSQL은 API를 통해 액세스를 제공하여 더 높은 확장성, 분산 컴퓨팅, 비용 절감, 스키마 유연성을 보장함
          + NoSQL 데이터베이스는 수평적으로 확장할 수 있는 효율적인 아키텍처로 작동하므로 저장 또는 컴퓨팅 용량을 늘리려면 더 많은 서버나 클라우드 인스턴스만 있으면 됨
          + 비정형 데이터의 더 빠른 처리나 분석을 위한 데이터 워크로드를 가진 기업의 경우 NoSQL 데이터베이스가 선호되었음

  OG 데이터베이스 전쟁

     * 데이터베이스 아키텍처가 진화하는 과정에서, 특정 기업들이 각 신흥 시장에서 입지를 굳혔음
          + IBM이 System R을 출시한 직후, 33세의 Larry Ellison은 Codd의 관계형 데이터베이스에 관한 동일한 논문을 읽었음
          + Ellison과 두 공동 창업자는 System R과 호환되는 회사를 설립하려 했지만 IBM은 그것을 매우 어렵게 만들었음
          + 결과적으로 이 삼인방은 새로운 주력 데이터베이스 제품인 Oracle Databases를 중심으로 사업을 구축했음
          + 그 이후로 Oracle의 데이터베이스는 선두 제품이 되었고, 2024년 5월 현재 시장 점유율은 약 28.7%임
     * Oracle의 1986년 IPO 직전 몇 년 동안 또 다른 회사가 데이터베이스 분야에 진출했음
          + Sun Microsystems는 1982년에 다양한 컴퓨터 구성 요소를 판매하면서 시작했지만 Java 프로그래밍 언어, Network File System 등의 기여로 유명해졌음
          + 중요한 것은 2008년 Sun Microsystems가 MySQL이라는 오픈 소스 데이터베이스 관리 시스템을 인수했다는 점임
          + 불과 2년 후 Oracle은 Sun Microsystems(MySQL 포함)를 인수했음
          + 거의 15년이 지난 2024년 5월 현재 선도적인 데이터베이스는 Oracle(시장 점유율 28.7%)과 MySQL(약 17.3%)임
     * Oracle이 관계형 데이터베이스 세계를 주도했지만, 사람들이 정보를 저장하고 액세스하는 방식은 계속 변화해 왔음
          + 새로운 작업이 있을 때마다 사람들은 이를 관리할 새로운 아키텍처를 고안해냈음
          + MongoDB(2007), Databricks(2013) 등의 문서 저장소부터 InfluxDB(2013), Prometheus(2012) 등의 시계열 데이터베이스, Neo4j(2007), Cosmos(2017) 등의 그래프 데이터베이스에 이르기까지 전문화된 데이터베이스 목록은 계속 늘어나고 있음
          + 관계형 데이터베이스의 인기가 꾸준히 감소함에 따라 이러한 새로운 틈새 니즈에 대해 다양한 솔루션이 등장했음
     * 데이터베이스의 최신 진화는 비정형 데이터를 처리할 필요성에서 비롯되었음
          + 지난 50년 이상 스키마는 주로 구조화된 데이터 관계를 중심으로 구성되었음
          + 그러나 점점 더 많은 사람들이 데이터 모호성을 훨씬 더 잘 처리할 수 있는 도구를 필요로 하게 되었음
          + 이에 벡터 데이터베이스가 등장

  벡터 데이터베이스의 부상

     * 대규모 언어 모델(LLM)과 생성 AI의 광범위한 확산으로 벡터 데이터베이스는 비정형 멀티모달 데이터를 처리할 수 있는 도구로 부상했음
          + 기존의 관계형 데이터베이스(Postgres, MySQL)가 구조화된 스키마에 가장 적합한 반면, 벡터 데이터베이스는 벡터 임베딩(언어 모델의 가중치에 상대적인 의미를 포함하는 데이터의 수치 표현)을 저장하고 쿼리하는 데 적합함
          + 관계형 데이터베이스에서 일반적으로 사용되는 행과 열 대신 벡터 데이터베이스는 데이터를 다차원 공간의 점으로 표현하여 정확한 값이 아닌 유사성에 기반하여 데이터를 매칭함
     * 임베딩 모델에 따라 데이터는 서로 다른 벡터 공간과 다양한 차원으로 표현될 수 있음
          + 벡터 임베딩은 데이터 포인트의 의미를 포착하여 벡터 데이터베이스에서 가장 가까운 객체를 검색하여 유사한 객체를 검색할 수 있게 함
     * 예를 들어 Word2Vec은 단어를 벡터에 매핑하여 의미, 의미적 유사성, 다른 텍스트와의 맥락적 관계를 포착하는 데 도움을 줌
          + 이 알고리듬은 얕은 신경망을 사용하여 더 넓은 텍스트 말뭉치에서 특정 단어의 의미를 유도하고 로지스틱 회귀를 통해 동의어를 식별함
          + 특이값 분해(SVD)와 주성분 분석(PCA) 등 심층 신경망에 의존하지 않고 임베딩을 추출하는 데 도움이 되는 방법도 있음
     * 거리 메트릭은 벡터 공간에서 점 사이의 상대적 ""거리""를 결정하는 데 도움이 되며, 일반적인 방법으로는 유클리드 거리, 맨해튼 거리, 코사인 거리, 자카드 유사도 등이 있음
          + K-최근접 이웃(KNN)과 근사 최근접 이웃(ANN)은 이미지, 비디오 또는 기타 멀티모달 입력에 대한 유사성 검색을 단순화하여 실행 시간을 개선하는 데 도움이 됨
     * Weaviate, Chroma, Qdrant, Pinecone 등의 벡터 전용 데이터베이스는 개발자가 대규모 데이터, 특히 비정형 입력에 대한 검색을 용이하게 하는 측면에서 다루는 데 도움이 됨
          + 기존의 관계형 데이터베이스나 NoSQL 데이터베이스와 달리 벡터 데이터베이스는 벡터 임베딩을 처리하도록 특별히 설계되었음
          + 기존 데이터베이스는 데이터를 스칼라로 저장하는 반면, 벡터 데이터베이스는 벡터만 저장하고 양자화 및 클러스터링과 같은 인덱싱 기술을 활용하여 검색 작업을 최적화함
     * GPT와 같은 트랜스포머 기반 LLM은 텍스트의 장기 의존성을 포착할 수 있음
          + 그러나 장문 이해력을 유지하는 것은 계산적으로 비용이 많이 들 수 있음
          + 최신 LLM은 입력에 걸친 토큰 쌍의 전역 의존성을 포착할 수 있지만, 시간과 공간 복잡성으로 인해 계산 자원 문제가 발생하여 학습 중 입력 텍스트 길이와 추론 중 효과적인 컨텍스트 창이 제한됨
     * 다차원 사례의 경우 상대적 위치 인코딩이 구현하기 어려우며, 상대적 위치를 인코딩하는 대부분의 접근 방식은 추론 중 성능 저하에 기여하는 강력한 위치 임베딩 메커니즘을 필요로 함
          + 텍스트 길이가 증가할 때도 벡터 데이터베이스는 모델의 장기 메모리 역할을 하는 데 중요할 수 있음
          + 벡터 데이터베이스를 사용하면 전체 문장 컨텍스트가 정확한 결과 생성에 필요할 수 있는 텍스트 완성이나 요약과 같은 작업을 간소화할 수 있음
     * 벡터 데이터베이스는 검색 증강 생성(RAG)을 지원할 수 있는데, 여기서 벡터 데이터베이스는 원래 쿼리와 함께 추가 컨텍스트를 포함하여 LLM에 전달되는 프롬프트를 향상시키는 데 사용될 수 있음
          + LLM은 종종 자기 감독 학습 모델에 의존하므로 특정 지식이나 더 높은 정확도 임계값이 필요한 도메인별 작업에 어려움을 겪는 경우가 많음
          + RAG는 문제의 쿼리에 대한 컨텍스트 부족으로 인해 발생할 수 있는 환각을 완화하면서 응답이 어떻게 도출되는지 확인, 추적 또는 설명하는 데 도움이 될 수 있음
     * 개발자는 지식 그래프와 벡터 검색을 결합하여 LLM을 학습한 데이터를 넘어서도록 확장할 수 있음
          + Microsoft Research의 GraphRAG와 같은 도구는 프라이빗 데이터 세트에 대한 검색을 수행할 때 프롬프트 증강을 용이하게 함
          + 기본 RAG는 종종 큰 데이터 컬렉션에 대한 요약된 의미 개념을 전체적으로 이해하는 데 어려움을 겪으므로 LlamaIndex 및 GraphRAG와 같은 도구는 프라이빗 데이터 세트를 기반으로 지식 그래프를 구성함
     * 개발자는 특정 요구 사항이나 사용 사례에 따라 RAG보다 지식 그래프를 사용하는 것이 좋을 수 있음
          + 벡터 데이터베이스는 유사성 검색에 적합하고 문서나 이미지 검색, 추천 생성에 가장 적합한 반면, 지식 그래프는 추론에 적합함(특히 데이터 수집, 상호 연결된 관계와 함께 엔터티 추출, 해당 관계 순회할 때 유용함)
     * 실시간 또는 준실시간 데이터 처리가 필요한 애플리케이션의 경우 더 낮은 지연 쿼리로 인해 벡터 데이터베이스가 선호될 수 있음
     * 임베딩을 수집하고 저장함으로써 벡터 데이터베이스는 유사성 검색의 더 빠른 검색을 용이하게 하여 입력된 프롬프트를 유사한 임베딩과 일치시킴
     * 유사성 랭킹은 추천 시스템, 의미 검색, 이미지 인식 및 기타 자연어 처리 애플리케이션에 이르는 다양한 기계 학습 작업을 지원하는 데 도움이 됨
     * 벡터 데이터베이스는 벡터 임베딩의 효율적인 저장 및 검색을 가능하게 함으로써 LLM의 성능을 향상시키는 데 중요한 역할을 함
          + 이를 통해 대규모로 자연어를 자동으로 이해할 수 있음
     * 그러나 벡터 임베딩은 N+1 혁신을 나타냄
          + 관계형 또는 시계열 데이터와 같은 이전의 데이터 형식임
     * 레거시 데이터베이스 공급업체는 MongoDB의 Atlas Vector Search, SingleStore의 벡터 데이터베이스, Neo4J의 벡터 검색 인덱스와 같은 벡터 기능을 출시하기 시작했음
     * 벡터 데이터베이스가 AI 사용 사례에서 강력할 수 있지만, 여전히 입력과 출력에 의해 작동되는 멍청한 인프라임
          + 데이터를 이해하거나 해석할 수 있는 능력이 부족함
          + 단순히 지시받은 대로 데이터를 저장하고 검색하는 저장소 역할만 할 뿐, 본질적인 지능이나 상황 인식은 없음
     * 최신 AI 기반 애플리케이션의 경우 이것만으로는 충분하지 않을 것임
          + 기업은 점점 더 AI 모델을 핵심으로 구축하고 있음
          + 따라서 애플리케이션이 점점 더 지능적인 기능을 보여주려면 인프라에서도 동일한 지능적인 기능이 필요할 것임

  1세대 AI-Native 회사들

     * 1956년 다트머스 대학에서 학계가 처음으로 인공지능을 연구하기 시작한 이래로 실용적인 사용 사례가 이 분야를 발전시켜 왔음
          + 예를 들어 1960년대 후반 Joseph Weizenbaum은 ELIZA라는 컴퓨터 프로그램을 만들었는데, 패턴 매칭을 통해 대화를 시뮬레이션하는 단순한 접근 방식이 초보적인 치료와 유사한 대화에 사용되었음(최초의 챗봇)
     * 비즈니스 사용 사례에서 AI를 활용한 대부분의 역사에서 AI의 개선은 점진적이었음
     * AI라는 용어가 유행하기 전에는 동일한 기술을 지칭하기 위해 기계 학습이라는 용어가 더 자주 사용되었음
          + 즉, ""데이터에서 학습하고 보이지 않는 데이터로 일반화할 수 있는 통계 알고리즘으로, 명시적인 지침 없이 작업을 수행할 수 있음""
     * 대중의 인식 측면에서 AI는 2022년 11월 30일 OpenAI가 ChatGPT를 출시하면서 변곡점에 도달했지만, 기술적 관점에서 전환점은 그 훨씬 이전에 일어났음
     * 2017년 11월, 국제 규제 기구인 금융안정위원회(FSB)는 기계 학습이 금융 서비스에 미치는 영향에 대한 개요를 작성했음
          + 금융 서비스 기업은 점점 더 ""신용 품질 평가""와 같은 작업을 수행하기 위해 기계 학습을 사용하여 ""더 효율적인 금융 시스템에 기여""할 수 있었음
          + 즉, 효율성을 높일 수 있지만 실존적 필수 요소를 구성하지는 않았음
     * 한편 기계 학습은 점점 더 좋아졌고, 2018년 5월 OpenAI는 대규모 모델 학습에 필요한 컴퓨팅 역사에 대한 연구를 발표했는데, 2012년 이후 3.4개월마다 두 배씩 증가하여 컴퓨팅이 30만 배 증가했음을 보여주었음
     * 그 다음 달인 2018년 6월, OpenAI는 GPT 모델의 첫 소개를 발표했음
     * 두 진영 사이에 논쟁이 형성되고 있었음
          + 한편으로는 점점 더 큰 모델의 지속적인 성장이 수확 체감의 법칙을 가질 것이라고 믿는 사람들이 많았음
          + OpenAI가 속한 다른 진영은 규모가 커질수록 성능이 계속 향상될 것이라고 믿었음
     * 2020년 1월, OpenAI 연구원이자 존스 홉킨스 대학 교수인 Jared Kaplan은 다른 사람들과 함께 ""신경망 언어 모델의 스케일링 법칙""을 발표했는데, 여기에는 다음과 같이 명시되어 있음:
          + ""모델 크기, 데이터 및 컴퓨팅을 적절하게 확장함에 따라 언어 모델링 성능이 원활하고 예측 가능하게 향상됩니다. 우리는 더 큰 언어 모델이 현재 모델보다 성능이 더 좋고 샘플 효율성이 더 높을 것으로 기대합니다.""
     * 2020년 5월, OpenAI는 GPT-3에 관한 ""언어 모델은 Few-Shot 학습자""라는 논문을 발표했는데, 이는 컴퓨팅 증가에 따른 성능의 매끄러운 확장을 보여주었음
     * 또한 OpenAI는 규모를 늘리면 일반화 가능성도 향상된다는 것을 발견했으며, ""대규모 언어 모델의 스케일링은 작업에 구애받지 않는 few-shot 성능을 크게 향상시켜 때로는 이전의 최첨단 파인튜닝 접근 방식과 경쟁력을 갖출 수 있다""고 주장했음
     * 프리랜서 연구원인 Gwern Branwen은 블로그 게시물에서 스케일링 가설을 고안했고, 다음과 같이 말했음:
          + ""2020년 5월 OpenAI에서 발표한 GPT-3는 지금까지 훈련된 신경망 중 가장 크며, 한 자릿수 이상 큽니다... 많은 사람들(저 자신 포함)의 예상과 달리, 이러한 엄청난 규모의 증가는 OpenAI에서 예측한 대로 규모의 이점이 계속 나타났으며 많은 사람들이 예상했던 수확 체감이나 마이너스 수익에 부딪히지 않았습니다.""
     * Branwen이 느낀 그 놀라움은 풍경의 변화였음
     * AI는 회사 제품의 부록이 아니라 점점 더 핵심으로 사용될 수 있었음
     * 트랜스포머 아키텍처, 증가된 데이터 량, 향상된 성능 수준 등 모두가 AI 기반 제품 개발의 토대를 마련했음
     * GPT-3가 출시된 직후인 2020년 5월, Writer와 Jasper와 같은 회사는 AI 모델을 사업의 중심에 둔 카피라이팅 제품을 만들었음
     * Harvey와 EvenUp과 같은 회사는 AI를 중심으로 법률 기술을 구축했음
     * DeepScribe와 Freed와 같은 회사는 AI를 중심으로 의료 전사를 구축했음
     * 그러나 과거에 새로운 사례가 데이터베이스 진화를 초래했던 것처럼, AI 기반 제품의 탄생은 각 회사의 기술 스택 뒤에 있는 인프라가 변화하고 적응해야 함을 의미했음

  AI-Native Database

     * AI 기반 기업이 증가하고 규모가 커짐에 따라, AI 기반 사용 사례를 지원하는 도구의 필요성도 높아짐
     * 첫 번째 물결의 AI 핵심 기업들은 주로 기존 모델을 사용한 추론에 초점을 맞추었음
          + 애플리케이션과 카피라이팅, 의료 전사 등을 위한 목적별 워크플로우 도구를 갖추고 있음
          + 제품의 핵심은 모델에서 생성된 텍스트나 생성된 이미지와 같은 출력임
     * 2023년 11월 OpenAI의 DevDay 이후 ""OpenAI가 내 스타트업을 망쳤다""는 밈이 퍼지기 시작했음
          + 특정 전문 GPT나 AI 에이전트는 기존 모델의 추론에 초점을 맞추었기 때문에 이러한 초기 AI 기반 스타트업의 역할을 맡는 것처럼 보였음
          + OpenAI는 우연히 모델과 애플리케이션 모두의 공급자가 되었음
     * 모델 기능을 중심으로 한 혁신이 너무 빠르게 진행되어 스타트업에 위협이 되는 것처럼 느껴지기 시작했음
     * 그러나 반대로, 성능이 향상된 모델(특히 쉽게 접근할 수 있는 오픈 소스 모델)로 인해 기업은 AI 기반 비즈니스로서의 역량을 더 깊이 구축할 수 있게 되었음
     * AI 기반 기술 스택을 구축하는 것은 모델 주변에 구성 요소를 추가하는 것 이상임
          + 예를 들어 AI를 위해 특별히 제작된 데이터베이스는 어떤 모습일까?
          + 추론이 중요한 출력인 경우 AI 기반 데이터베이스는 단순히 데이터를 저장하고 검색하는 것이 아니라 저장 중인 데이터로 수행할 작업에 대한 상황별 지침을 취할 수 있어야 함
     * 한 가지 예는 전자상거래를 위한 제품 설명 개인화일 수 있음
          + 벡터 데이터베이스는 제품 SKU와 설명에 대한 벡터 임베딩을 저장할 뿐만 아니라 사용자 페르소나에 대한 임베딩도 저장할 수 있음
          + 데이터베이스의 이러한 모든 상황별 데이터를 사용하여 인프라는 제품 설명에 대한 쿼리가 관련 사용자 페르소나에 대한 쿼리도 트리거한 다음 해당 관련 사용자 페르소나를 기반으로 제품 설명을 작성하는 생성 피드백 루프를 활용할 수 있음
     * 마찬가지로 언어는 생성 피드백 루프로 사용될 수 있음
          + 예를 들어 사용자는 다양한 언어로 제품 설명을 생성하려고 할 수 있음
          + 사용자에게 맞춤화될 뿐만 아니라 사용자가 선택한 언어로 번역된 제품 설명을 생성할 수 있음
          + 이러한 유형의 지침은 생성 AI와 같은 사용 사례가 점점 더 애플리케이션의 중심 기능이 되기 때문에 데이터베이스에 직접 내장될 수 있음
     * 사용 사례에 맞게 인프라를 발전시키는 것은 새로운 일이 아님
          + 원래 개발자는 JavaScript를 사용하여 브라우저에서 애플리케이션을 구축하여 웹사이트를 대화형으로 동적으로 만들었음
          + 그러나 개발자가 이를 백엔드로 가져올 수 있다는 것을 깨달으면서 node.js가 탄생했음
          + 그 다음 개발자가 더 많은 모바일 애플리케이션을 만들기 시작하면서 보다 동적이고 반응적이며 데이터 기반의 애플리케이션을 가능하게 하는 JSON(JavaScript Object Notation)이 등장했음
          + MongoDB는 진화하는 인프라 요구 사항을 해결하기 위해 등장한 회사로서 이러한 물결에 완벽하게 적합했음
     * AI로 역사가 반복되고 있음
          + 요구 사항이 변경됨에 따라 인프라는 이러한 요구 사항을 충족하기 위해 발전해야 함
          + 가장 큰 질문은 사람들이 어떤 종류의 회사를 구축하고 싶어 하는지, 그리고 어떤 종류의 인프라가 그러한 회사에 가장 적합한지가 될 것임
          + Bob이 Matthew Lynley와의 인터뷰에서 말한 바와 같이:
               o ""저는 미래의 모든 애플리케이션에 AI가 포함될 것이라고 강력히 믿습니다. 일부 애플리케이션에는 AI가 뿌려질 것이고, 일부는 애플리케이션의 중심에 AI가 있을 것입니다. AI를 빼면 더 이상 존재하지 않습니다. 웹 앱을 구축하고 그 위에 AI를 뿌리고 싶다면 MongoDB를 사용하세요. 특히 이미 사용 중이라면... AI가 애플리케이션의 핵심인 AI 기반 애플리케이션을 구축하고 싶다면 Weaviate를 고려해야 할 때입니다.""
     * 앞으로 기업은 AI를 부록으로 제품을 구축할 것인지, 아니면 Bob이 말한 것처럼 ""sprinkle""로 구축할 것인지, 아니면 제품의 핵심이 될 것인지 결정할 것임

  AI-Native 기술 스택

     * AI를 제품의 핵심 구성 요소로 구축하고자 하는 기업의 경우 기존 인프라로는 적절하지 않을 가능성이 높음
          + 레거시 도구를 사용하면 데이터 저장, 정리 및 실행은 한 사일로에서 구축되고 자동화는 다른 사일로에서 구축됨
          + 이러한 접근 방식의 단점은 제품을 더 잘 알리고 개선할 수 있는 생성 피드백 루프와 같은 것에서 컨텍스트가 손실된다는 것임
     * ""AI 인접"" 스택에서 오는 기업의 경우 특정 모델의 추론은 종종 컨텍스트 창으로 제한됨
          + 일부는 주어진 컨텍스트 창의 용량이 증가하면 벡터 데이터베이스를 대체할 수 있다고 믿음
          + 그러나 벡터 데이터베이스가 컨텍스트 창을 대체하도록 진화할 수 있는 반대 상황이 사실일 가능성이 높음
          + 벡터 임베딩은 생성 모델에 매우 중요하며, 생성 결과를 위한 인프라는 벡터 임베딩을 1등 시민으로 취급해야 함
     * 단순히 컨텍스트 창의 크기를 늘리는 대신 벡터 데이터베이스를 모델에 짜 넣어 컨텍스트 창의 맥락적 이해와 데이터베이스의 신뢰성 및 확장성을 제공할 수 있음
          + 특히 모델이 범용적일수록 특정 작업에 맞게 제작될 가능성이 줄어듦
          + AI 기반 벡터 데이터베이스는 보다 구체적인 기능을 가능하게 할 것임
     * GPT-4와 같은 범용 모델은 지식을 의도적으로 일반화하도록 구축되었음
          + 제품이 약간의 간단한 파인튜닝에 의존하는 경우 기본 모델은 해당 비즈니스의 고유하게 가치 있는 부분이 되지 않을 것임
          + AI 기반 제품을 구축하는 것은 모델을 활용하는 것 외에도 보다 긴밀하게 연결된 스택을 중심으로 제품을 구축하는 것을 수반할 것임
          + 이 스택은 데이터베이스의 규모와 모델의 기능을 제공하여 더 유능한 제품을 만들어 낼 것임

   벡터 임베딩 생성이랑 벡터DB 사용 사례가 더 많이 나와서 표준 워크플로우가 나왔으면 좋겠습니다 한 1년 정도 기다리면 되려나요
"
"https://news.hada.io/topic?id=15709","ElevenLabs Voice Isolator - 음성만 깨끗하게 분리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ElevenLabs Voice Isolator - 음성만 깨끗하게 분리

     * 영화, 팟캐스트, 인터뷰 등에서 배경 소음을 제거하고 음성만 깨끗하게 추출해줌
     * 최대 크기는 500MB & 1시간 분량의 오디오 까지 지원
     * 음악 보컬용으로 설계되거나 최적화되지는 않음(콘텐츠에 따라 성공은 가능)
     * 아직 실시간 스트리밍용 API는 공개하지 않았지만, 곧 공개할 예정
     * 이용 요금은 오디오 1분당 1000자

     How much does Voice Isolator cost?
     Voice Isolator costs 1000 characters for every minute of audio.

   이게 무슨 뜻일까요? 왜 글자수가 나오는지 모르겠네요

   token 같은 개념아닌가요?

   GPT에서 이미지도 text token 처럼 계산 되듯이요

   회사가 제공하는 다른 서비스를 보니 이해가 됩니다. Speech to text to Speech 방식인 것 같네요 그래서 중간 텍스트에 대한 과금을 하는거구요

   한편 여러가지 오픈 모델을 통한 보컬 분리를 유무료로 제공하는 MVSep에서도 수 종류의 음성/소음 분리 모델을 제공하고 있습니다.
   https://mvsep.com

   Adobe Podcast AI 도 비슷한 기능을 제공합니다. 무료 버전도 있긴 하네요 https://podcast.adobe.com/enhance

   무료버전 기준 한국어는 최적화되지 않은 느낌이더군요..
"
"https://news.hada.io/topic?id=15679","앞으로 제품 디자인은 어떻게 바뀔까? 멀티모달 프로덕트와 생성형 UI에 대한 생각 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            앞으로 제품 디자인은 어떻게 바뀔까? 멀티모달 프로덕트와 생성형 UI에 대한 생각 정리

   멀티모달에 친화적인 디자인
     * 음성, 터치, 제스처, 시선 추적 등 다양한 입력 방식을 지원하는 AI 모델과 제품들이 등장
     * 엔비디아 옴니버스, 오픈AI Sora, Runway General World 등 현실 세계를 이해하는 AI 모델 개발 중
     * 멀티모달 AI 모델과 제품들이 빠르게 발전하고 있음
     * 로블록스는 4D Gen AI를 만들겠다고 발표함. 3D, 텍스트, 음성 등 멀티모달 UX를 제공하고 있음
     * 로블록스에 생성형 AI를 적용하면 게임 제작 비용이 크게 줄어들 것으로 기대됨

   사용자 맥락과 선호에 따른 생성형 디자인
     * 사용자 맥락과 선호에 따라 UI/UX가 개인화되는 것이 생성형 디자인 개념
     * 웹 브라우저 확장 프로그램, 노코드 SaaS 등에서 개인화된 경험을 제공하는 것이 시작이었음
     * 웹 익스텐션으로 시작된 개인화 경험(Wappalyzer, TradingView, Weather Underground 등)
     * 노코드 SaaS의 개인화(Notion, Arc browser의 Boost 기능)
     * AI를 통해 사용자의 선호와 맥락에 따라 UI/UX를 동적으로 생성할 수 있을 것
     * 생성형 디자인은 사용자 경험을 최적화할 수 있는 새로운 패러다임
"
"https://news.hada.io/topic?id=15640","Ladybird - 새로운 웹브라우저 & 웹엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ladybird - 새로운 웹브라우저 & 웹엔진

     * Ladybird는 새로운 웹 브라우저 및 웹 엔진임
     * 웹 표준을 우선으로 하여 현대 웹을 높은 성능, 안정성, 보안으로 렌더링하는 것을 목표로 함
     * SerenityOS 프로젝트의 HTML 뷰어로 시작하여, 현재는 Linux, macOS 등 다양한 Unix 계열 시스템을 지원하는 크로스 플랫폼 브라우저로 성장함
     * 현재 활발히 개발 중이며, 2026년 첫 알파 버전을 목표로 함

    Ladybird의 독특한 점

     * 진정한 독립성: 다른 브라우저의 코드를 사용하지 않음. 웹 표준에 기반한 새로운 엔진을 구축 중임
     * 단일 초점: 웹 브라우저에만 집중함
     * 수익화 없음: ""기본 검색 거래"", 암호화 토큰 등 사용자 수익화 방법을 사용하지 않음

    자주 묻는 질문

     * 출시 시기: 2026년 여름에 Linux와 macOS용 첫 알파 버전을 목표로 함
     * 현재 인원: 현재 4명의 유급 풀타임 엔지니어가 작업 중이며, 많은 자원봉사자들이 기여하고 있음
     * 채용 계획: 곧 3명의 새로운 풀타임 엔지니어가 합류할 예정이며, 적절한 속도로 팀을 성장시키는 것이 목표임
     * 독립성: 다른 브라우저 엔진의 코드를 사용하지 않음. 3rd 파티 라이브러리를 사용하지만, 자체 엔진을 구축함
     * Windows 지원: 현재 Windows 지원을 적극적으로 작업 중인 사람은 없으며, Unix 계열 환경 외에서 잘 작동하도록 변경이 필요함
     * 모바일 지원: Android 또는 iOS 포트를 적극적으로 작업 중인 사람은 없으며, 데스크탑 버전이 안정되면 모바일에 더 많은 노력을 기울일 예정임
     * 후원 등급: 플래티넘 $100,000, 골드 $50,000, 실버 $10,000, 브론즈 $5,000
     * 독립성 유지: 모든 후원은 제한 없는 기부 형태로 이루어지며, 이사회 좌석 등 영향력은 판매하지 않음
     * C++ 사용 이유: SerenityOS 프로젝트의 일부로 시작되었기 때문에 C++를 사용함. 현재는 독립 프로젝트로서 다른 언어를 평가 중임

    GN⁺의 의견

     * Ladybird는 독립적인 웹 브라우저 엔진을 구축하려는 야심찬 프로젝트임. 이는 기존 브라우저 엔진의 종속성을 피하고, 더 나은 성능과 보안을 제공할 수 있는 기회를 제공함
     * 오픈 웹을 중요하게 생각하는 비영리 단체로서, 사용자 수익화 방법을 배제하고 있다는 점이 인상적임
     * 현재는 주로 데스크탑 환경에 집중하고 있지만, 향후 모바일 지원을 계획하고 있어 다양한 플랫폼에서의 활용 가능성이 높음
     * C++에서 시작했지만, 다른 언어로의 전환을 고려하고 있어 기술적 유연성을 보여줌
     * 비슷한 기능을 가진 프로젝트로는 Firefox와 Chromium이 있으며, 이들과의 차별화된 점을 잘 살펴보는 것이 중요함

   Ladybird - 새로운 크로스플랫폼 브라우저 프로젝트
   Ladybird 포크 및 SerenityOS BDFL 에서 사임합니다

   프로젝트 시작한지 2년째고, 이제 완전히 별도로 분리되었네요.
   근데 2026년 여름에 알파버전 릴리즈면 너무 머네요. 관심과 지원이 유지될지가 관건

        Hacker News 의견

     * Chris Wanstrath (GitHub 공동 창립자)의 501(c) 비영리 단체와 $1,000,000 기부 발표 영상이 있음
     * Ladybird의 엔진이 임베디드 용도로 설계되고 있는지 궁금해하는 의견이 있음
          + Mozilla가 Gecko에서 임베딩 지원을 제거한 것이 Blink/Chromium과 WebKit이 Gecko를 추월하게 된 주요 실수 중 하나였음
          + 새로운 브라우저뿐만 아니라 임베딩 가능한 새로운 웹 엔진이 필요하다는 의견이 있음
     * 이 프로젝트가 매우 멋지며 성공을 기원하는 의견이 있음
          + 비영리 후원에만 의존하지 않는 수익 모델이 필요하다는 의견이 있음
          + FUTO 모델을 참고할 만하다는 제안이 있음
               o 사용자가 소스 코드를 검사, 수정, 재배포할 수 있으며, 애플리케이션의 모든 기능을 항상 사용할 수 있음
               o 애플리케이션을 좋아하면 결제할 수 있는 인터페이스가 제공되며, 사용자 계정에 보상적인 화장품 요소를 추가할 수 있음
               o 일정 시간 사용 후 결제를 상기시키는 알림이 한 번 표시되며, 버튼으로 영구적으로 해제할 수 있음
     * Firefox 출시와 뉴욕 타임즈 광고를 떠올리게 하는 흥미로운 프로젝트라는 의견이 있음
          + 20년이 지난 후에도 또 다른 브라우저 전쟁을 해야 한다는 사실이 믿기지 않는다는 의견이 있음
     * 이전 로고가 귀여웠고 현재 로고는 메타 모방자처럼 보인다는 의견이 있음
          + 더 개성 있는 로고를 원한다는 의견이 있음
     * 새로운 홈페이지/로고가 90년대 후반, 2000년대 초반의 매력을 잃었다는 의견이 있음
          + Serenity와의 분리가 방향성과 속도에 영향을 미칠 수 있다는 우려가 있음
          + 2026년 알파 버전 출시가 너무 멀다는 의견이 있음
     * 웹 브라우저에 집중하는 것이 좋다는 의견이 있음
     * Serenity OS 지원을 유지하고 제3자 코드 사용 금지 규칙을 제거하는 것이 더 나았을 것이라는 의견이 있음
          + Serenity OS가 Ladybird를 포트로 취급하면 결과는 동일할 것이라는 의견이 있음
     * Chrome의 지배에 도전하는 것이 오래전부터 필요했다는 의견이 있음
          + Firefox를 사랑하고 감사하지만, 현재 관리 하에서는 기대하기 어렵다는 의견이 있음
     * Andreas와 개발 팀에게 축하를 전하는 의견이 있음
          + Jakt 개발에 자금이 일부 사용되기를 바라는 의견이 있음
               o Jakt는 깨끗하고 우아하며 메모리 안전 시스템 프로그래밍 언어임
"
"https://news.hada.io/topic?id=15642","내 Python 코드는 신경망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            내 Python 코드는 신경망

     * 인간은 스파게티 코드 관리에 서툴음
     * 연구 프로젝트에서 원시 데이터에서 정보를 추출하는 프로그램을 작성하는 경우가 많음
     * 데이터는 명확한 사양을 따르지 않음
     * 예시:
          + 뉴스 기사에서 기업과 임원을 식별
          + 공공 조달 계약을 서비스 종류별로 라벨링
          + 엔지니어 간의 메시지에서 프로그램 코드를 식별

    메시지에서 프로그램 코드 감지

     * 코드 리뷰 중 메시지가 프로그램 코드를 참조하는지 감지하는 문제를 해결
     * 예시 메시지:
          + LGTM with render_ipa_alloc()
          + If the FTPSACK flag is set, then use a prespecified value
          + AFAICT there is nothing else to check (unless you can think of something)
          + Actually, debug_error() doesn’t return NULL, so we should use IS_ERROR() here
          + This fails to build on aarch64 even though it works without issue on amd64
          + I’ve added if (err) goto cleanup; but the code still leaks

    결정 규칙 아이디어

     * 간단한 규칙을 사용하여 프로그램 코드와 일반 영어를 구분하는 접근 방식
     * 규칙:
         1. 괄호가 뒤따르는 단어는 코드임
         2. 모든 대문자 단어는 코드임
         3. 비영어 단어는 코드임
     * 각 규칙의 장단점:
          + 규칙 1: 간단하지만 명백한 긍정 사례를 놓침
          + 규칙 2: 대문자 약어를 프로그램 코드로 잘못 분류함
          + 규칙 3: 엔지니어링 용어를 프로그램 코드로 잘못 분류함

    손으로 작성한 알고리듬

     * 간단한 알고리듬이 충분히 잘 작동할 수 있다고 판단
     * 두 단계로 메시지가 코드를 포함하는지 결정:
         1. 전처리: 메시지를 토큰 시퀀스로 변환
         2. 추론: 토큰 시퀀스에 규칙을 적용하여 코드 포함 여부 결정
     * Python으로 구현한 예시:
from dataclasses import dataclass

Token = str

@dataclass
class State:
    previous_was_identifier: bool = False
    previous_was_open_paren: bool = False
    previous_previous_was_identifier: bool = False
    seen_code: bool = False

def contains_code(tokens: Iterable[Token]) -> bool:
    state = State()
    for token in tokens:
        state = process(state, token)
    return state.seen_code

def process(state: State, token: Token) -> State:
    if state.seen_code:
        return state
    if (token == ""close_paren"" and state.previous_was_open_paren and state.previous_previous_was_identifier):
        state.seen_code = True
        return state
    state.previous_previous_was_identifier = state.previous_was_identifier
    state.previous_was_identifier = token in (""all_caps_identifier"", ""underscore_identifier"", ""misc_identifier"")
    state.previous_was_open_paren = token == ""open_paren""
    return state

    신경망의 도움

     * 상태 기계로서의 contains_code와 process를 RNN으로 인코딩 가능
     * RNN을 사용하여 더 나은 알고리듬을 찾을 수 있음

    일반적인 아이디어

     * RNN은 조건부 확률을 근사함
     * 각 토큰에 대해 상태 벡터를 계산
     * 최종 상태를 기반으로 메시지를 분류

    수학으로 본 Python 코드

     * RNN이 규칙 1을 인코딩하는 방법을 설명
     * 각 토큰을 이진 벡터로 표현
     * 숨겨진 상태를 계산하여 규칙을 적용

    네트워크 훈련

     * RNN을 훈련시키기 위해 활성화 함수를 ReLU로 변경
     * PyTorch를 사용하여 훈련 가능

    더 효율적인 구현을 가진 아키텍처

     * Elman RNN과 같은 PyTorch에서 제공하는 아키텍처 사용
     * Elman RNN은 각 숨겨진 레이어가 이전 레이어와 현재 레이어를 모두 입력으로 사용

    더 안정적인 그래디언트를 가진 아키텍처

     * 긴 메시지는 그래디언트가 0에 가까워져서 문제 발생
     * GRU나 LSTM과 같은 아키텍처가 더 나은 성능을 보일 수 있음

    데이터 중심의 규율

     * RNN은 스파게티 코드를 더 잘 처리함
     * 데이터 중심의 규율을 강제하여 문제를 명확히 함

    GN⁺의 의견

     * 이 기사는 RNN을 사용하여 복잡한 문제를 해결하는 방법을 잘 설명함
     * RNN을 사용하면 코드 유지보수가 용이해짐
     * PyTorch와 같은 도구를 사용하여 효율적인 구현 가능
     * GRU나 LSTM과 같은 아키텍처를 고려할 필요 있음
     * 데이터 중심의 접근 방식이 문제 해결에 유용함

        Hacker News 의견

     * 이 글은 테스트나 훈련 데이터에 대해 많이 다루지 않음
          + 코드가 이해된다고 생각하는 이유는 일반화된 속성을 비공식적으로 증명했기 때문임
          + 신경망의 경우, 새로운 입력에 대해 어떻게 일반화될지 알 수 없다는 점이 문제임
          + 속성을 잘 정의할 수 있다면, 속성 기반 테스트를 작성하여 많은 테스트 데이터를 생성할 수 있음
          + 이는 증명은 아니지만 시작점이 될 수 있음
          + 스파게티 코드나 신경망에 의존하는 것은 비슷할 수 있음
          + 신경망을 훈련시키는 대신 속성 기반 테스트를 작성할 수 있음
          + 여전히 코드를 더 신뢰할 것 같음, 디버깅이 가능하기 때문임
     * 이 글은 실용적인 작업을 수행하기 위한 신경망 구축 방법으로 읽으면 흥미로움
          + 저자는 임의의 입력을 구문 분석하는 어려운 문제를 다룸
          + 이를 해결하기 위해 신경망을 제안하지만, 이는 여전히 이해하기 어려움
          + 읽기 어려운 코드보다는 이해할 수 있는 코드가 더 나을 수 있음
     * 신경망에 대한 보편적 근사 정리(Universal Approximation Theorem)가 존재함
          + 그러나 이러한 근사치를 학습할 수 있다는 정리는 없음
     * 이 글은 RNN에 대한 깊은 수학적 개념을 다루지만, 흥미로운 아이디어를 제공함
          + 입력 문자열을 문자 단위로 처리하는 접근법이 강력함
          + 얇은 입출력 로직을 작성하고 나머지는 알고리즘이 처리함
     * RNN이 트랜스포머에 완전히 대체되었는지 궁금해하는 의견이 있음
     * 유전 프로그래밍(Genetic Programming)을 살펴볼 가치가 있음
          + 수학이 필요 없고, 프로그램을 AST로 재조합하여 최적화함
          + 최적화할 항목을 선택할 수 있음 (예: 속도, 프로그램 길이, 복잡한 구조 최소화 등)
     * 이 글은 RNN을 학습 경험으로 다루며, PyTorch의 RNN과 비교함
          + 네트워크에 세 개의 숨겨진 레이어를 추가해야 하는 이유를 질문함
     * RNN은 임의의 계산을 수행할 수 있지만, 실용적이지 않음
          + 이 글은 상태 기계를 학습하는 방법을 다루며, Python의 실제 의미를 학습하는 것은 어려움
     * 신경망이 점점 코드처럼 보일 것이라는 의견이 있음
          + MOE 스타일 모델을 함수 호출로 변환하는 방법이 다음 큰 혁신이 될 것임
"
"https://news.hada.io/topic?id=15677","Proton Mail, 구글 Docs와 비슷한 문서 편집도구 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Proton Mail, 구글 Docs와 비슷한 문서 편집도구 공개

     * Proton의 프라이버시 우선 원칙에 기반한 E2E 암호화된 실시간 협업 문서 편집기
     * 문서 작성, 공유, 실시간 협업, 커서 및 편집자 확인, 댓글 기능
     * 키 입력과 커서 움직임까지 암호화되어 모든 것이 비공개로 유지됨
     * 법률 회사나 의료기관에서 프라이버시 법규를 준수하며 문서 작업을 할 수 있고, 언론인이나 크리에이터는 데이터 유출과 빅테크 감시로부터 프로젝트를 안전하게 보호 가능

  프라이버시 우선 문서 편집기를 출시한 이유

     * 온라인 문서 편집기는 개인 일기에서 민감한 비즈니스 전략에 이르기까지 모든 것에 사용되는 핵심 생산성 도구가 됨
     * 그러나 대부분의 문서 편집기를 제공하는 회사들은 개인 정보를 수집하고 수익화하는 빅 테크 회사들임
     * 이로 인해 여러 가지 중요한 문제가 발생함:
          + 대규모 데이터 수집: Google Docs와 같은 문서 편집기는 사용자가 작성한 모든 내용을 볼 수 있으며, 모든 변경 사항을 기록함. 데이터를 제공하면 더 이상 그 사용을 통제할 수 없음
          + 데이터 유출 위험: 주요 문서 편집기는 기본적으로 종단 간 암호화를 제공하지 않아 해커와 데이터 유출에 취약함
          + 약한 개인정보 보호법: 미국에 본사와 데이터 센터를 둔 기술 회사들은 대규모 감시와 느슨한 데이터 보호법의 적용을 받음
          + 제3자 및 정부 접근: 종단 간 암호화나 강력한 법적 보호가 없으면 문서가 무단 감시와 데이터 공유의 대상이 됨

  Proton의 개인 정보 보호를 협업 온라인 문서에 도입

     * Proton Drive의 Docs는 Standard Notes 팀과 공동으로 개발되었으며, 개인 정보 보호와 보안에 대한 핵심 가치를 공유함
     * 모든 Proton 서비스와 마찬가지로 Docs는 사용자가 데이터에 대한 통제권을 되찾을 수 있게 함
     * 오픈 소스 종단 간 암호화를 통해 사용자가 문서를 읽고 공유할 수 있는 유일한 키를 가짐
     * Proton조차도 문서 내용이나 메타데이터에 접근할 수 없음
     * Docs는 Proton Drive에 통합되어 문서 관리와 저장을 위한 통합되고 안전한 공간을 제공함
     * Docs의 주요 기능:
          + 개인 정보 보호를 위한 작성: Proton Drive 내에서 문서를 작성하고 편집하며, 내용이 사용자와 공유 대상자만 접근할 수 있음
          + 간편한 공유 및 초대: 다른 사용자를 초대하여 문서를 보기나 편집할 수 있음
          + 실시간 협업: 변경 사항이 즉시 반영되어 모든 기여자가 최신 버전을 볼 수 있음
          + 커서 및 존재 표시기 보기: 문서를 보고 있거나 편집 중인 다른 사용자를 확인할 수 있음
          + 댓글 및 답글 남기기: 문서를 편집하지 않고 피드백을 공유할 수 있음
          + 간편한 가져오기 및 내보내기: .docx 문서를 업로드하고 다양한 형식으로 다운로드할 수 있음

  완전한 개인 정보 보호 우선 생태계

     * 온라인 생산성 도구는 종종 사용 조건으로 감시를 수락하도록 요구함
     * Docs는 이메일, 클라우드 저장소, 캘린더 등을 포함한 안전한 생태계 내에서 오픈 소스 종단 간 암호화를 결합한 최초의 협업 문서 편집기임
     * Proton Drive와 Docs를 통해 이제 안전하고 개인 정보 보호를 우선시하는 클라우드 저장소 및 생산성 대안을 제공함
     * 법률 회사나 의료 기관에서는 계약서를 작성하고 환자 데이터를 관리할 수 있음
     * 기자, 콘텐츠 제작자, 기업가들은 데이터 유출과 빅 테크 감시로부터 프로젝트를 보호할 수 있음
     * Proton Drive는 작업용이든 개인용이든 문서가 안전하고 비공개로 유지되도록 보장함

GN⁺의 의견

     * Proton Docs는 개인 정보 보호에 대한 우려가 커지는 상황에서 매우 시의적절한 서비스로 보임. 특히 최근 Notion과 Slack 등 협업 도구들의 데이터가 AI 학습에 사용된 사례가 논란이 된 만큼 이에 대한 대안으로서 의미가 클 것으로 예상됨
     * 다만 Google Docs 등 기존 서비스들이 제공하는 다양한 편집 기능과 호환성, 사용성 등을 어느 정도 따라갈 수 있을지는 지켜봐야 할 것임. 프라이버시를 중시하는 사용자들 사이에서는 크게 환영받겠지만 일반 사용자들에게 얼마나 어필할 수 있을지는 미지수임
     * 협업을 위해서는 함께 작업하는 동료들도 Proton을 사용해야 한다는 점이 진입장벽이 될 수 있음. Proton 생태계 바깥의 사용자들과도 원활히 공유하고 협업할 수 있는 방안이 마련되어야 할 것임
     * 기업이나 기관 차원에서 도입할 경우 기존 레거시 시스템과의 호환성, 마이그레이션 등도 숙제가 될 수 있음. 장기적으로는 API 등을 통해 다른 서비스/솔루션과 연계할 수 있는 개방성도 고려해볼 만함
     * 궁극적으로 프라이버시를 지키면서도 생산성을 높일 수 있는 도구에 대한 요구가 커질 것으로 보이는 만큼, Proton Docs가 이런 니즈를 잘 충족시켜 나간다면 협업 솔루션 시장에서 독보적인 입지를 다져나갈 수 있을 것으로 기대됨

  Hacker News 의견

     * 오픈 소스 여부에 대한 의문
          + ProtonMail이 모든 앱과 라이브러리를 오픈 소스로 주장하지만, 실제로는 OpenPGP 라이브러리만 링크되어 있음
          + ProtonDrive에 대한 언급이 없으며, CryptPad와의 비교를 보고 싶음
     * 기존 제품에 집중해주길 바라는 의견
          + Calendar와 Mail 간의 시너지는 크지만, Drive, Pass, VPN은 쓸모없음
          + Caldav 지원이나 일정 관리 기능이 없고, Mail의 많은 기능이 불편함
          + E2E 주장도 마케팅용으로 보이며, 기존 문제를 해결하는 것이 더 중요함
     * 새로운 제품 출시의 합리성에 대한 의문
          + 작은 회사로서 새로운 오피스 스위트를 만드는 것은 비효율적임
          + OnlyOffice와의 긴밀한 통합을 고려하지 않은 이유가 궁금함
     * 의존성을 분산시키는 것의 가치
          + 여러 회사에 의존성을 분산시키는 것이 위험을 줄이는 데 유리함
          + Proton이 훌륭하지만, 모든 것을 한 회사에 의존하는 것은 꺼려짐
     * Google Docs 대안의 부족
          + 2024년에도 Google Docs에 대한 적절한 대안이 없다는 점에서 Proton의 시도가 긍정적임
          + Nextcloud를 시도했으나 실패했고, 현재 HedgeDoc을 사용 중이나 이상적이지 않음
     * Proton의 보안과 프라이버시
          + Proton의 보안과 프라이버시가 매우 뛰어남
          + Google CAPTCHA 문제로 인해 Proton의 보안이 더 매력적임
     * Lexical 기여자의 피드백
          + Lexical을 사용한 협업형 리치 텍스트 에디터를 칭찬함
          + 개발 과정에서 피드백을 주고받기를 원함
     * Proton의 불편함
          + 여러 번 평가했으나 항상 불편함을 느낌
          + 많은 기능이 아직 미완성 상태이거나 사용하기 불편함
     * iPhone 앱의 신뢰성 문제
          + iPhone 앱이 신뢰할 수 없어 Protonmail을 다시 가입하지 않을 것임
          + 데스크탑과 모바일에서 잘 작동할 때는 좋지만, 이메일 주소 변경의 어려움이 있음
     * Proton 생태계의 유용성
          + 여러 메일 주소와 캘린더를 사용하는 경우 Proton 생태계의 유용성에 대한 질문
          + 통합된 인박스와 캘린더 초대 기능, iOS와의 연락처 동기화 가능 여부에 대한 궁금증
"
"https://news.hada.io/topic?id=15637","Pipes - Yahoo Pipes의 정신적 후계자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Pipes - Yahoo Pipes의 정신적 후계자

     * Feed에 특화된 비쥬얼 프로그래밍 에디터/쉘/통합 도구
     * RSS, Atom, JSON 피드를 가져오고 생성하며 다양한 방식으로 조작할 수 있는 블록(기능)들을 제공함
     * 필터링, 추출, 병합, 정렬 등의 조작 가능
     * HTML 문서를 스크랩할 수 있고 일반 텍스트 파일도 처리 가능
     * 블록들을 연결하면 데이터가 파이프를 통해 흐르듯이 처리됨
     * 결과적으로 새로운 피드가 생성되어 다른 프로그램에서 사용 가능
     * 공개 Pipe로 설정하여설명과 태그 추가하고, 검색 가능하게 만들고 외부에 공유 가능
          + Public Pipes에 나열됨
          + 다른 사용자가 좋아요와 포크 가능
     * 기본 출력 형식은 RSS
          + 각 파이프에는 고유한 출력 URL이 있음
          + .txt 확장자로 XML 요소 제거된 내용만 가져올 수 있음
     * Pipes CE라는 AGPL 라이선스의 오픈소스 버전 제공
     * 여러 사이트에서 데이터를 편리하게 가져오는 블록을 제공함
          + 현재 지원되는 사이트: Twitter, Vimeo, Dailymotion, Periscope, UStream, Mixcloud, SVT Play, Speedrun.com, Youtube

    GN⁺의 의견

     * Pipes는 피드 조작을 시각적으로 쉽게 할 수 있어 비개발자도 접근하기 쉬움
     * 다양한 블록을 제공하여 복잡한 피드 조작도 가능하게 함
     * Yahoo! Pipes의 후계자로서, 그리운 사용자들에게 좋은 대안이 될 수 있음
     * 오픈 소스 버전인 Pipes CE를 통해 커뮤니티의 기여와 개선이 가능함
     * 트위터 API 문제로 인해 일부 기능이 제한될 수 있음

   시각적 프로그래밍의 가장 큰 문제는 프로그래밍 언어의 열화판 기능을 제공하면서 배포가 어렵고 변경 관리가 안된다는데 있습니다. 도입하실 분들의 주의가 요구됩니다

   저 Yahoo Pipes 좋아해서 한참 썼는데 이렇게 다시 만나게 되네요.
   이렇게 Flow 연결하는 방식의 CTI 개발용 도구를 20년전에 윈도우용 데스크탑 앱으로 개발했던 적이 있는데, 그때부터 이 방식을 좋아했나 봐요 ㅎㅎ

   n8n.io - 오픈소스 워크플로우 자동화 엔진 ( Zapier 대체제 )
   Node-RED - Low-Code 프로그래밍 도구

        Hacker News 의견

     * 프로젝트에 대한 설명과 최근 내부 업데이트에 대한 내용
          + 파이프의 불안정성을 해결하기 위해 내부 재구조화를 시도했음
          + 데이터가 블록 간에 텍스트로 전송되던 방식을 RSS 객체로 직접 전송하는 방식으로 변경했음
          + 서버 업그레이드와 스레드 및 푸마 워커 재구성을 통해 문제를 해결했음
          + 웹 프론트엔드와 파이프 처리의 분리를 시도했으나, 생산 환경에서는 실패했음
     * Yahoo Pipes의 원래 팀과의 인터뷰 및 미니 사이트 제작
          + 원래 팀과의 인터뷰를 통해 Yahoo Pipes의 이야기를 작성했음
          + 미니 사이트에는 이스터 에그와 2007년 팀의 사진이 포함되어 있음
     * Palantir Foundry와 PipelineBuilder 사용 경험
          + 처음에는 저코드/무코드 도구에 회의적이었으나, Python 코드를 포팅한 후 99%의 변환 요구를 충족했음
          + 코드보다 이해 및 유지보수가 쉬운 의미론을 유지함
     * 관련 링크 제공
          + Pipes의 아키텍처와 소프트웨어에 대한 기사 링크
          + Yahoo Pipes의 초기 단계 후속작에 대한 기사 링크
"https://news.hada.io/topic?id=15661","엔지니어링 리더로서 기억력/인지력 감퇴에 대처하는 방법은 무엇인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 엔지니어링 리더로서 기억력/인지력 감퇴에 대처하는 방법은 무엇인가요?

     * 최근 몇 년 동안 기억력이 조금 나빠지고 예전보다 전반적으로 인지 능력이 떨어지는 것을 느낌
     * 병적인 증상이라기보다는 노화와 만성적인 수면 부족이 복합적으로 작용한 결과라고 생각
     * 원래 결정을 빨리 내리는 데 능숙하지 않았지만, 요즘은 그 어느 때보다 시간이 오래 걸리고 있음
     * 다른 분들도 이런 문제를 겪은 경험이 있는지, 있다면 도움이 될 만한 조언이 있는지 궁금

sirspacey

     * 수면이 핵심. 수면 부족이 반복되면 인지능력과 기억력 회복에 극심한 영향을 미침
     * 내게 도움을 준 것들
          + 완전히 어두운 방에서 잠을 잘 것. 전문 의학박사가 알려준 이 팁이 내 삶을 바꿨음. 또한 안대와 백색 소음기를 사용
          + 내부 회의에서 메모를 요약할 수 있는 녹음 도구를 사용. 특정 시점으로 되돌아갈 수 있어서 몇 분간의 대화 내용만 보고도 전체 대화 내용을 다시 리로드 가능한 경우가 많음
          + 팀에 의존할 것. 리더는 많은 것을 핸들링하고 있어서 그런 것 같다고 생각이 들게 할 수 있는 이점이 있기에, 나는 사람들에게 마지막 대화 내용과 업데이트된 현재 상황을 다시 설명해 달라고 요청하는 의식적인 단계(ritual)을 만들었음. 다시 말하지만, 간단한 일이지만 기억을 되살리는 데 도움이 됨

DamonHD

     * 아마도 당신의 지나친 생각(overthingking)일 수도 있고 상상일 수도 있음. 자가 교정(self-calibration)은 어려움
     * 그리고 어떤 경우든 ""경험""은 일을 완수하는 데 있어 원초적인 능력만큼이나 유용함
     * 나는 이제 나이도 많고(50대 후반) 최근에는 지적재산권을 매각한 이후 스타트업의 CTO에서 물러나야 했지만, 대신 파트타임 박사 과정(첫 논문 발표)을 하고 있고 친구의 비즈니스에서 부분적인 CTO도 하고 있음
     * 마지막으로 코딩 속도나 코드 성능으로 기술 직원들과 경쟁하지는 않겠지만, 수십 년 동안 그런 일을 해온 것이 기술 직원들에게 도움이 될 수 있고 인정받을 수 있다고 생각

cadu123

     * 회의 내용을 메모해 두었다가 잠들기 전이나 두뇌가 더 잘 작동하는 시간에 읽을 것
          + 예를 들어 나는 오후에 문제가 생기는 경향이 있어서 대부분의 작업을 아침이나 늦은 저녁에 하려고 노력
     * 적을 만들지 않도록 주의: 적들이 이를 악용할 수 있음
     * 그런 의미에서 회의가 원활하게 진행되도록 노력하고, 당신의 결정이 필요한 사안이 있다면 컨플루언스와 같은 내부 페이지에 도표와 설명을 위키에 작성해 달라고 요청하여 회의 시간에 맞춰 올바른 결정을 내릴 수 있도록 할 것
     * 마찬가지로, 논의하고 싶은 도표나 설명/요점을 미리 만들어 회의에 가져갈 것
          + 회의 전에 미리 준비해 두면 사람들이 회의 전에 처리한 정보를 제공받을 수 있고 회의 중에 결정을 내리기가 더 쉬워짐
     * 숙면을 취하고, 규칙적인 생활과 균형 잡힌 식사 하기. 필요하다고 생각되는 건강 보조식품을 섭취하고 약이 필요한 경우 의사와 상담할 것
          + 내 경우 최근에 Lion's mane(노루궁뎅이 버섯) 을 복용하고 있는데 기억력 인지에 많은 도움이 되었음
     * 안타깝게도 문제를 극복하기 위해 더 열심히 노력하는 것 외에는 쉬운 해결책이 없음
          + 더 열심히 일하는 것의 대안은 집중해야 할 업무를 줄이고, 관리해야 할 인원을 줄이며, 업무량을 줄여 여전히 좋은 성과를 낼 수 있도록 하거나, C-급과 같이 업무량이 많은 역할에서 물러나는 것일 수도 있음
          + 또는 물러날 수는 없지만 예산이 여유가 있다면 유능한 비서를 두어 도움을 받을 수도 있음

hnthrowaway0328

     * 더 많은 메모를 하고 퇴근 전후로 15분 정도 시간을 내서 검토하는 것이 좋음
     * 또한 전자 노트 대신 종이 노트를 사용하면 자연스럽게 종이에 메모를 적을 수 있기 때문에 종이 노트를 사용하는 것을 추천

t_von_doom

     * 내 매니저도 장기간의 코로나로 인해 같은 경험을 하고 있음
     * 내가 보기에 그가 대처하는 방식은
          + 즉각적인 기억/인지가 필요한 일은 우리에게 위임하고,
          + 자신의 전문성을 활용하여 더 높은 수준에서 우리에게 지시하고
          + 우리가 다음에 체크인할 때 관련 정보를 실행하고 피드백하도록 우리를 신뢰하고 있다는 것
     * 나는 그의 상태가 악화되는 것이 안타깝지만 그는 이런 방식으로 협상을 잘 해냈음:
          + 그의 지식, 전문성 및 네트워크를 더 많이 활용
          + 자율성을 부여하여 힘을 실어주되, 업무량을 늘리지 않고도 그의 느슨함을 메울 수 있음

hnthrow098767

     * 수면 무호흡증이나 기타 수면 장애가 있는지 확인해 본적이 있는지?
     * 관련 의사와 상담하고 몇 가지 검사를 받아 근본적인 문제를 간과하고 있지는 않은지 확인하는 것이 좋음
     * 팁에 의존해서는 문제가 해결되지 않을 수 있음

helph67

     * ""큰 소리로 읽으면 무언가를 기억할 가능성이 더 높다는 연구 결과가 있음""
     * ""야외에서 걷는 것은 우리의 두뇌를 열 수있는 잠재력이 있는 것으로 밝혀졌음""

funcDropShadow

     * 수면과 관련된 모든 조언과 더불어 영양 섭취도 살펴볼 것
          + 맥스 루가비어의 저서 'Genius Food(천재의 식단)'가 매우 좋음
     * 또한 스트레스 수준을 살펴볼 것. 선(Zen) 명상은 놀라운 효과를 발휘할 수 있음. 경험상 명상은 수면 부족에도 도움이 됨
     * 항상 메모하는 습관을 기를 것. 이렇게 하면 말한 내용을 기억하는 데 도움이 되고, 그것만으로는 부족하다면 메모를 읽어볼 수도 있음
     * 요즘 업무와 관련된 메모를 보관하기 위해 Emacs에 Org-Mode를 사용하고 Zettelkasten 스타일의 설정으로 표시함
     * 모든 사람들이 종이에 메모를 시작해야 한다고 주장하고 싶음
          + 잘 제본된 가죽 공책과 좋은 펜을 준비
          + 회의가 시작될 때마다 노트를 펼쳐서 회의 날짜, 시간, 제목을 적고 계속 낙서를 할 것
          + 그렇게 하면 회의에 집중하고 회의 내용을 기억하는 데 많은 도움이 됨

jart

     * 업무에 대해 생각보다 느리게 생각한다면 그 업무가 생각할 가치가 없기 때문일 수 있음
     * 직장에서 일을 잊어버린다면 기억할 가치가 없는 일이기 때문일 수 음
     * 심각한 건강 상태가 아니라면, 기억은 그것이 필요하고 중요한 목적에 부합한다는 것을 알면서도 그냥 사라지지 않음
     * 삶에 약간의 혼란을 주어 다시 흥미를 느끼도록 해볼 것
     * 도전은 우리를 계속 나아가게 하는 원동력임

beardyw

     * 더 많이     * n8n과 NodeRED 소개
 위임하세요
          + n8n은 유사한 도구로 자체 호스팅 가능함
     * 사람들은 대부분 책임을 지는 것을 좋아함
          + NodeRED는 홈 자동화 분야에서 큰 인기를 끌고 있음
     * 결정을 내릴 때는 다른 사람에게 잠재적인 해결책을 제시하도록 할 것
     * Yahoo Pipes의 혁신성과 그리움
     * 다른 사람이 기억하게 할 것. 이는 여러분과 그들을 발전시키기 때문에 관리에서 매우 중요한 부분
          + Yahoo Pipes는 당시 매우 혁신적이었으며, 마이크로데이터와 RSS를 활용한 개념이 놀라웠음
          + 서비스 종료가 아쉬움
     * 기술적인 사람들은 디테일을 가장 좋아하는 부분으로 보기 때문에 힘들어 함. 다른 사람이 즐길 수 있도록 할 것
     * Azure Logic Apps와 유사한 프레임워크에 대한 경험
     * PS. 책임은 위임할 수 없음

          + 비프로그래머가 설계, 생성, 구현한 솔루션이 생산 환경에서 한계를 겪는 경우가 많음
usgroup

          + 이러한 프레임워크가 기술 부채로 발전하는 경우가 많음
          + 이러한 솔루션에도 나름의 장점이 있을 수 있음
     * 많은 상황에서 나이는 다른 많은 것들과 상관관계가 있기 때문에 인과관계를 나이로 돌리기는 어려움
     * Zapier와 유사 도구에 대한 질문
     * 나이가 들면 자녀, 사이드 퀘스트, 잠 못 이루는 밤, 파트너 등이 생겨남
          + Zapier와 유사한 도구들이 Yahoo Pipes의 정신적 후속작으로 간주될 수 있는지에 대한 질문
     * 시각적 프로그래밍 도구의 진화
     * 또한 동일한 기술적 과제가 N번째 반복되는 것에 대한 무관심도 생겨나기 때문에 그 차이점에 대해 덜 주의를 기울이게 됨
          + 저코드/무코드 개발자를 위한 API, 백엔드 작업, AI 워크플로우 생성 도구를 개발 중임
     * 체스를 두는 사람이라면 집중하지 않을 때 얼마나 실력이 떨어지는지 경험해 보셨을 것
     * 시각적 프로그래밍의 일반적인 형태
     * 일반적인 팁으로 나는 보통 메모를 하지 말고, 맞춤법 검사기를 사용하지 말고, 생각을 낙서하지 말라고 말함
          + 젊든 늙든 이런 습관은 시간이 지날수록 더 많이 의지하게 되는 됨
          + 한편, 집중해서 주의를 기울이는 것을 더 많이 하면 정신적으로 저장하고, 정리하고, 상상하는 능력이 더 좋아지거나 최소한 이러한 능력을 더 오래 유지할 수 있음

   GTD에서 나온 개념 중 빠르게 처리할 수 있는 업무는 관리하려 하지 말고 바로 처리하라는 규칙이 있습니다. (제시된 시간이 정확하게 기억나지는 않지만 5분 안에 해결할 수 있는 업무)

   비슷하게 무엇이든 기억하거나 정리해 둘 필요가 있다면 키워드, 단문이라도 무조건 기록하는 버릇을 기르고 있습니다.

   회의에서는 Obsidian으로 직접 기록한 회의록 하단에, 녹취자료를 클로바노트로 변환하고, 이를 GPT 통해서 마크다운으로 변환한 내용을 붙여서 이중화 하여 기록합니다.

   보조할 수 있는 여러 도구를 탐색 중이며 현재는 모바일과 PC에서 Todoist를 사용중입니다.

   기억력과 집중력이라는 한정된 자원을 잘 활용하는 방안에 대해 관심이 많은데

   결국은 어딘가에 넣어두고 필요할때 꺼내볼 수 있도록 하는 방법만이 해결책이 아닐까 합니다
"
          + 시각적 프로그래밍은 처리하는 박스와 그 박스를 연결하는 선으로 구성된 단일 스타일임
"
"https://news.hada.io/topic?id=15610","Docmost - Confluence & Notion 과 비슷한 오픈소스 협업 문서 및 위키 소프트웨어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Docmost - Confluence & Notion 과 비슷한 오픈소스 협업 문서 및 위키 소프트웨어

     * 실시간 협업을 위해 설계되어 여러 사용자가 동시에 같은 페이지에서 작업할 수 있음
     * Notion과 Confluence와 같은 도구의 오픈 소스 대안(AGPL 라이센스)
     * 위키, 지식 기반 또는 방대한 프로젝트 문서를 관리할 때 Docmost는 지식을 쉽게 생성, 협업 및 공유할 수 있는 도구를 제공

주요 기능

     * 실시간 협업 에디터: 페이지에서 실시간으로 협업 가능
     * Spaces: 팀, 프로젝트 또는 부서별로 페이지를 구성하여 더 나은 협업 가능. 각 Space에는 고유한 권한이 있음
     * 권한 관리: 이해하기 쉬운 권한으로 콘텐츠에 대한 액세스 제어 가능
     * 그룹: 그룹을 통해 사용자에게 통합된 권한 부여 가능
     * 댓글: 더 나은 의사소통과 피드백을 위해 페이지에 댓글 추가 가능
     * 페이지 히스토리: 포괄적인 버전 기록으로 변경 사항 추적 가능
     * 중첩된 탐색: 사이드바를 통해 페이지를 중첩하고 재정렬 가능
     * 검색: 강력한 검색 기능으로 필요한 정보를 빠르게 찾을 수 있음
     * 파일 첨부: 쉬운 참조와 공유를 위해 페이지에 파일 첨부 가능

인증

     * 현재 Docmost는 로컬 이메일과 비밀번호 인증만 지원함
     * 다른 인증 전략은 가까운 미래에 제공될 예정임

GN⁺의 의견

     * Docmost는 오픈 소스 기반의 협업 위키 및 문서 관리 도구로, Notion이나 Confluence와 같은 상용 제품의 대안으로 고려해볼 만함
     * 특히 실시간 협업 기능은 여러 사용자가 동시에 문서를 편집할 때 유용할 것으로 보임
     * 오픈 소스임에도 Spaces, 권한 관리, 댓글, 버전 관리 등 기업에서 필요로 하는 주요 기능들을 대부분 갖추고 있음
     * 다만 아직 클라우드 버전이 없고 이메일/비밀번호 인증만 지원하는 등 기능적으로 개선이 필요해 보임
     * 유사한 오픈 소스 제품으로는 Wiki.js, BookStack, XWiki 등이 있으니 함께 비교해보는 것도 좋겠음

   회사에서 노션도 안되고 옵시디언도 막혀서... 사용해보려고 하는데 괜찮은 대안이 될 것 같네요

   사용해보니 notion과 비슷하게 잘 만든 도구인데
   너무 notion과 비슷하다보니 notion과 다른 지점에서 불편함이 생기기도 하더군요
   잘 발전되면 좋겠습니다

        Hacker News 의견

     * Notion과 Confluence의 접근성 문제를 지적하며 Docmost에서 이를 고려했는지 질문함
          + 미국의 ADA와 EU의 EAA를 언급하며 접근성의 중요성을 강조함
          + 접근성 감사자로서 도움을 제공할 의향을 밝힘
     * Confluence를 사용 중인 회사에서 전환을 위해 필요한 기능을 나열함
          + PDF로 내보내기 기능
          + Gliffy와 같은 통합 다이어그램 편집기
          + 히스토리 및 차이점 기능
          + Outline이 가장 근접하지만 개발 상황을 지켜볼 예정임
     * 새로운 문서 도구를 평가 중인 회사에서 Docmost의 디자인을 칭찬함
          + 문서 작성과 검토가 분리된 규제 환경을 설명함
          + GitBook의 기능을 언급하며 ""병합 요청"" 기능이 차별화 요소가 될 수 있음을 제안함
     * 제품 출시를 축하하며 강력한 copyleft를 제공한 것에 감사함
          + Postgres DB를 대규모로 운영한 경험을 바탕으로 RDBMS 대신 객체 저장소나 LSM-tree 솔루션을 사용할 것을 권장함
          + Postgres의 TOAST, WAL 증폭, GIN 인덱스 유지보수 문제를 상세히 설명함
          + DB 설정 최적화와 컬럼 순서 최적화의 중요성을 강조함
          + UUIDv7 사용과 외래 키 사용을 칭찬함
     * 제품 배포를 고려 중이며 스테이징 및 승인 프로세스 기능이 필요함을 언급함
     * SaaS 버전 계획 여부를 질문함
          + Outline이라는 오픈 소스 문서/위키 및 협업 도구를 언급함
     * 다이어그램 지원 여부를 질문함
          + PlantUML을 많이 사용하며 Znai 등의 도구가 이를 지원함을 설명함
     * 대부분의 문서 소프트웨어의 문제점을 지적함
          + 모든 것이 잠겨 있어 쉽게 내보내기나 백업이 어려움
          + 가격 정책이 너무 세분화되어 피로감을 줌
          + pg와 redis 사용 방식에 대해 더 알고 싶어함
     * 동기화된 블록 구현 여부를 질문함
     * git, markdown, 좋은 텍스트 편집기가 할 수 없는 기능에 대해 궁금해함
          + 기존 오픈 도구의 이식성 장점을 언급함
          + 비기술 사용자에게 git과 markdown을 추상화하는 클라이언트의 필요성을 인정함
          + Obsidian에 git 기능을 추가하면 충분할 것 같다고 언급함
"
"https://news.hada.io/topic?id=15612","Show GN: Laravel AI Translator: 라라벨 언어 스트링을 AI로 자동 번역해주는 패키지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: Laravel AI Translator: 라라벨 언어 스트링을 AI로 자동 번역해주는 패키지

     * Laravel 프로젝트의 언어 파일을 AI를 사용하여 자동으로 여러 언어로 번역해주는 패키지
     * 기본 언어(보통 영어)로 작성된 언어 파일을 기반으로 다른 언어들로 번역
     * 한번의 명령어 실행으로 모든 언어 파일을 한 번에 번역할 수 있어 개발 시간을 크게 단축
     * config/ai-translator.php 설정 파일에서 소스 언어, 번역 AI 제공자, 추가 규칙 등을 쉽게 customizing 가능
          + 소스 언어, 언어 파일 디렉토리, AI 제공자 설정 등을 변경 가능
          + 추가 규칙을 통해 번역 스타일 커스터마이징 가능
               o 예: ""Use a friendly and intuitive tone of voice, like the service tone of voice of 'Discord'.""
               o 예: ""한국의 인터넷 서비스 '토스'의 서비스 말투 처럼, 유저에게 친근하고 직관적인 말투로 설명하고 존댓말로 설명하세요.""
          + 현재는 Anthropic의 Claude AI만 지원하지만, 향후 GPT-3.5, 4, 4 Turbo 등 지원 예정
          + 현재는 JSON 언어 파일은 현재 지원되지 않으며, PHP 언어 파일만 지원
     * php artisan ai-translator:translate 명령어로 모든 언어 파일 자동 번역
          + lang 디렉토리에 이미 생성해둔 언어 폴더들을 인식하고 해당 언어들로 자동으로 번역해줌
          + 기본적으로 영어(en)를 소스 언어로 사용하지만 설정에서 변경 가능
          + 이미 번역된 스트링은 중복 번역하지 않음
     * 단순히 번역하지 않고, 변수 값, 문장의 시제, 단어의 형태(동사/명사 등), 단어의 길이 등을 고려하여 스마트하게 번역하여 UI가 깨지지 않는 최적의 단어를 선정함
     * 번역된 결과는 각 언어 폴더에 자동으로 저장됨

  사용예제

// 원본 영어 파일 (en/notifications.php)
return [
    'new_feature_search_sentence' => 'New feature: Now you can type sentences not only words. Even in your languages.',
    'refresh_after_1_min' => 'Refresh after 1 minute. New content will be available! (Previous model: :model, Updated: :updated_at)',
    'welcome_message' => 'Welcome, :name! You have :count new messages.',
];

// 번역된 한국어 파일 (ko/notifications.php)
return [
    'new_feature_search_sentence' => '새로운 기능: 이제 단어뿐만 아니라 문장도 입력할 수 있어요. 여러분의 언어로도 가능합니다.',
    'refresh_after_1_min' => '1분 후에 새로고침하세요. 새로운 내용이 준비될 거예요! (이전 모델: :model, 업데이트: :updated_at)',
    'welcome_message' => ':name님, 환영합니다! :count개의 새 메시지가 있습니다.',
];

// 번역된 중국어 간체 파일 (zh-cn/notifications.php)
return [
    'new_feature_search_sentence' => '新功能：现在你不仅可以输入单词，还可以输入句子。甚至可以用你的语言。',
    'refresh_after_1_min' => '1分钟后刷新。新内容即将到来！（之前的模型：:model，更新时间：:updated_at）',
    'welcome_message' => '欢迎，:name！您有 :count 条新消息。',
];
"
"https://news.hada.io/topic?id=15644","컨볼루션, 고속 푸리에 변환 및 다항식 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      컨볼루션, 고속 푸리에 변환 및 다항식 (2022)

다항식, 고속 푸리에 변환 및 컨볼루션

  다항식: 간단한 요약

     * 다항식 (P(x))는 각 항이 변수 (x)와 지수 (k) 및 계수 (a_k)로 구성된 항들의 합임
     * 예: (P(x) = 5x^2 + 2x + 9)
     * 두 다항식 (P(x))와 (Q(x))를 더하거나 빼는 것은 각 항을 개별적으로 더하거나 빼는 것임
     * Python 코드 예시:
# a + b
[a + b for a, b in zip(p, q)]
# a - b
[a - b for a, b in zip(p, q)]

  컨볼루션

     * 컨볼루션은 두 신호 (p)와 (q)의 합성임
     * 예: (p = [2, 3, 4]), (q = [5, 6, 7])
     * 컨볼루션 계산:
y = [10, 27, 52, 45, 28]

     * 다항식 곱셈은 컨볼루션으로 표현될 수 있음

  푸리에 변환과 FFT

     * 푸리에 변환은 신호를 시간 영역에서 주파수 영역으로 변환하는 강력한 도구임
     * 푸리에 변환(FT), 이산 푸리에 변환(DFT), 고속 푸리에 변환(FFT)의 차이점:
          + FT: 연속 신호에 대한 푸리에 변환
          + DFT: 이산 신호에 대한 푸리에 변환
          + FFT: DFT를 효율적으로 계산하는 알고리즘 ((O(n \log n)))

  다항식 곱셈을 더 빠르게

     * 고등학교에서 배운 다항식 곱셈은 (O(n^2)) 복잡도를 가짐
     * 더 효율적인 방법:
         1. 다항식을 주파수 영역으로 변환 ((O(n \log n)))
         2. 주파수 영역에서 곱셈 수행 ((O(n)))
         3. 결과를 다시 시간 영역으로 변환 ((O(n \log n)))
     * Python 코드 예시:
def multiply_naive(p, q):
    result_size = len(p) + len(q) - 1
    result = [0] * result_size
    for i in range(len(p)):
        for j in range(len(q)):
            result[i + j] += p[i] * q[j]
    return result

def multiply_fft(p, q):
    length = 2 ** np.ceil(np.log2(len(p) + len(q) - 1)).astype(int)
    f_padded = np.pad(p, (0, length - len(p)))
    g_padded = np.pad(q, (0, length - len(q)))
    Y = np.fft.fft(f_padded) * np.fft.fft(g_padded)
    result_coefficients = np.round(np.fft.ifft(Y).real).astype(int)
    return np.trim_zeros(result_coefficients, 'b').tolist()

  요약

     * 다항식 곱셈의 기본 방법은 (O(n^2)) 복잡도를 가짐
     * 다항식 곱셈은 컨볼루션으로 표현될 수 있음
     * 시간 영역의 컨볼루션은 주파수 영역의 곱셈과 동일함
     * FFT를 사용하여 다항식을 주파수 영역으로 변환하면 (O(n \log n)) 복잡도로 다항식을 곱할 수 있음

GN⁺의 의견

     * 이 글은 다항식 곱셈의 효율성을 높이는 방법을 설명하며, 특히 고속 푸리에 변환(FFT)의 중요성을 강조함
     * 고등학교에서 배운 기본적인 방법보다 훨씬 효율적임을 보여줌
     * 이 기술은 신호 처리, 이미지 처리 등 다양한 분야에서 유용하게 사용될 수 있음
     * FFT를 사용하면 큰 다항식의 곱셈을 빠르게 수행할 수 있어, 대규모 데이터 처리에 유리함
     * 유사한 기능을 가진 다른 프로젝트로는 NumPy, SciPy 등이 있음
"
"https://news.hada.io/topic?id=15686","가장 저렴한 NAS 구축하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            가장 저렴한 NAS 구축하기

     * 기존의 OpenWRT를 플래시한 '라우터'를 대체할 새로운 SBC+HDD 조합을 찾고 있었음
     * 새로운 장치는 기존의 서비스(삼바, git, rsyncd, dnf repo)를 유지하면서 더 빠르게 작동해야 했음
     * Libre Computer의 AML-S805X-AC 보드를 발견했으며, 주요 사양은 다음과 같음:
          + LAN 포트 (100 Mb)
          + 2개의 USB-A (2.0)
          + 4코어 ARM Cortex-A53
          + 1GB RAM
          + USB 부팅
          + 최신 Debian 지원
          + 쉽게 구매 가능

    필요한 부품 및 비용

     * SBC: 20€
     * HDD 인클로저: 12€
     * 3A 전원 공급 장치: 5€
     * 마이크로 USB 케이블: 3€
     * 4개의 볼트, 12개의 너트: 0€
     * TTL to USB 동글: 3€ (선택 사항)
     * 총 비용: 43€

    설치 및 초기 설정

     * TTL-to-USB 동글을 보드의 GPIO에 연결하고 sudo screen /dev/ttyUSB0 115200 명령어 입력
     * Debian-12를 플래시 드라이브에 dd로 복사 후 부팅
     * 공식 OS 이미지는 Debian 기반이며, EFI 파티션과 MBR 레이아웃을 포함함
     * 첫 부팅 시 파티션이 자동으로 크기 조정됨

    문제점 및 해결 방법

     * HDD 인클로저 연결 후 uas_eh_abort_handler 오류 발생
     * JMicron JMS578 SATA 6Gb/s 칩셋 사용
     * 커널 명령줄에 usb-storage.quirks=152d:0578:u 추가하여 UAS 비활성화
     * 성능 테스트 결과: 23.95 MB/s (ext4 파티션)

    결론

     * 이 설정을 추천하지 않음
     * 전력 소비를 줄이기 위해 SBC를 선택했으나, 일반적인 micro-ITX 경로를 선택하는 것이 더 나을 수 있음

  GN⁺의 의견

     * 이 기사는 저렴한 NAS 설정에 대한 실험적 접근을 다루고 있음
     * Libre Computer의 보드는 저렴하지만 성능과 안정성 면에서 한계가 있음
     * 비슷한 기능을 제공하는 다른 제품으로는 Raspberry Pi와 같은 더 널리 알려진 SBC가 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 성능, 안정성, 커뮤니티 지원 등을 고려해야 함
     * 이 기사는 저렴한 NAS 설정에 관심 있는 사람들에게 유용할 수 있지만, 실용적인 사용을 위해서는 더 나은 대안이 필요함
"
"https://news.hada.io/topic?id=15647","Show HN: Doggo – 강력하고 사용자 친화적인 명령줄 DNS 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show HN: Doggo – 강력하고 사용자 친화적인 명령줄 DNS 클라이언트

     * 소개
          + Doggo는 인간 친화적인 명령줄 DNS 클라이언트임
          + 다양한 전송 프로토콜을 지원함
     * 설치
          + 설치 방법 제공
     * 사용 가이드
          + 사용법 안내
     * 예제
          + 다양한 사용 예제 제공
     * CLI 참조
          + 명령줄 인터페이스 참조 문서
     * 리졸버
          + UDP 및 TCP
          + 시스템 DNS
          + DNS over HTTPS (DoH)
          + DNS over TLS (DoT)
          + DNSCrypt
          + DNS over QUIC (DoQ)
     * 기능
          + 개요
               o Doggo는 인간 친화적인 명령줄 DNS 클라이언트임
          + 기능
               o 색상 코드 및 표 형식의 인간 친화적인 출력
               o 스크립팅 및 파싱을 위한 JSON 출력 지원
               o 다양한 전송 프로토콜 지원:
                    # DNS over HTTPS (DoH)
                    # DNS over TLS (DoT)
                    # DNS over QUIC (DoQ)
                    # DNS over TCP
                    # DNS over UDP
                    # DNSCrypt
               o resolv.conf 또는 명령줄 인수에서 ndots 및 검색 구성 지원
               o 사용자 정의 가능한 쿼리 전략을 가진 다중 리졸버 지원
               o IPv4 및 IPv6 지원
               o 웹 인터페이스 제공 (doggo.mrkaran.dev)
               o zsh 및 fish 쉘 자동 완성 지원
               o 역방향 DNS 조회
               o 다양한 DNS 플래그(AA, AD, CD, DO 등)를 포함한 유연한 쿼리 옵션
               o 문제 해결을 위한 디버그 모드
               o 응답 시간 측정
               o 크로스 플랫폼 지원 (Linux, macOS, Windows, FreeBSD, NetBSD)
     * 후원
          + Doggo가 유용하다고 생각되면 GitHub에서 후원 가능
          + 후원은 Doggo의 개발 유지 및 개선에 도움을 줌
          + 후원은 전체 커뮤니티에 혜택을 주는 무료 오픈 소스 소프트웨어의 생성 및 유지 관리도 장려함
          + 모든 기여는 크기에 상관없이 감사하며, 프로젝트를 지속적으로 성장시키는 데 도움을 줌
     * GN⁺의 의견
          + Doggo는 다양한 DNS 전송 프로토콜을 지원하여 유연한 사용이 가능함
          + JSON 출력 지원으로 스크립팅 및 자동화 작업에 유용함
          + 크로스 플랫폼 지원으로 다양한 운영체제에서 사용 가능함
          + 디버그 모드와 응답 시간 측정 기능은 문제 해결에 큰 도움이 됨
          + 비슷한 기능을 가진 다른 도구로는 dig와 nslookup이 있음, 하지만 Doggo는 더 현대적이고 사용자 친화적인 인터페이스를 제공함

        Hacker News 의견

     * ""geodns""는 전 세계 여러 지역에서 DNS 조회를 할 수 있도록 개발된 도구임
          + 예를 들어, ycombinator.com은 위치에 따라 다른 IP를 반환함
          + Gitlab 링크: geonet-rs
     * Google의 느리고 불안정한 dig 웹 인터페이스에 불만을 느껴 직접 만든 웹 도구를 소개함
          + 링크: shovel.report
     * ipkitten.com을 사용하여 터미널에서 공용 IP 주소를 확인할 수 있음
          + 예시 명령어: curl ipkitten.com
          + 브라우저에서 방문 시 IP 주소와 고양이 GIF를 제공함
          + 링크: ipkitten.com
     * ""doggo"" 명령어가 모든 출력을 두 번씩 출력하는 이유에 대한 질문이 있음
          + 예시: google.com과 news.ycombinator.com의 출력
     * Dog와 유사한 기능을 가진 도구인지에 대한 질문이 있음
          + 특정 쿼리를 실행하도록 요청함 (A, AAAA 등)
          + 단일 도메인 쿼리 시 모든 레코드를 기본으로 쿼리하지 않는 이유에 대한 질문이 있음
          + 링크: doggo
     * ""doggo"" 관련 Go 모듈 다운로드 예시가 있음
          + 예시 코드: go: downloading github.com/mr-karan/doggo v0.5.7
     * ""doggo"" 도구의 개발 배경, 디자인 결정, 기타 비하인드 스토리에 대한 공유 요청이 있음
     * ""doggo""라는 이름 선택이 훌륭하다는 의견이 있음
     * 쿼리 타입 ANY와 같은 기능을 추가하면 좋겠다는 의견이 있음
     * ""doggo"" 도구가 dog를 떠올리게 한다는 의견이 있음
"
"https://news.hada.io/topic?id=15695","HTMX는 CSP(Content Security Policy)와 잘 호환되지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             HTMX는 CSP(Content Security Policy)와 잘 호환되지 않음

     * HTMX는 JavaScript 프레임워크로, AJAX 요청을 통해 동적 데이터로 DOM 요소를 대체할 수 있게 해줌
     * HTMX는 사용자 정의 속성이 있는 일반 HTML 태그를 사용하여 동적 동작을 페이지에 추가하기 때문에, 크로스 사이트 스크립팅(XSS) 공격에 대한 추가 보안을 제공하기 어려움
     * 일반적으로 콘텐츠 보안 정책(CSP)을 사용하면 실행되는 JavaScript를 제한할 수 있음
     * HTMX가 계속 작동하면서 크로스 사이트 스크립팅으로부터 보호되는 CSP를 구성하기는 어려움

악성 Fragment 로딩

     * HTMX 주입 방법 중 하나는 악성 호스트에 대한 요청을 수행하는 것
     * HTMX는 JavaScript를 포함할 수 있는 HTML 프래그먼트를 검색하여 페이지에 배치함
     * 웹 애플리케이션의 도메인 이외의 도메인에 대한 요청을 트리거하여 악성 스크립트를 로드하는 데 사용할 수 있음

안전하지 않은 eval

     * HTMX는 동적으로 코드를 생성하고 실행함
     * 다음과 같은 HTMX 기능들이 이를 수행함: 트리거 필터, hx-on 속성, js:/javascript: 접두사가 있는 hx-vals 또는 hx-headers
     * 이러한 기능이 작동하려면 애플리케이션에서 unsafe-eval CSP 옵션을 사용하여 동적 코드 평가를 허용해야 함
     * 그러나 unsafe-eval을 허용하면 HTMX 기능을 사용하여 JavaScript를 즉시 주입할 수 있음

hx-disable 을 사용한 HTMX 비활성화

     * hx-disable 속성을 사용하여 페이지 일부에서 HTMX 기능을 비활성화할 수 있음
     * 문서에서는 이를 통해 추가 보안을 제공할 수 있다고 주장함
     * 하지만 이는 쉽게 우회할 수 있음: </div>로 div 태그를 닫고 hx-disable 속성이 있는 요소 외부에 페이로드를 삽입하면 됨

인라인 스크립트에 대한 nonce

     * CSP에서 nonce를 사용하는 것은 스크립트 주입을 방지하는 가장 안전한 방법
     * 애플리케이션은 임의의 nonce를 생성하고 애플리케이션의 일부인 모든 스크립트에 추가함
     * 공격자가 주입한 스크립트에는 올바른 nonce가 없으므로 실행되지 않음
     * HTMX에는 검색한 인라인 스크립트에 올바른 nonce를 자동으로 추가하는 기능이 있음
     * 이는 편리하지만 nonce가 있는 CSP의 보안 모델을 완전히 깨뜨림
     * 발견되는 모든 스크립트에 올바른 nonce를 추가함으로써 HTMX는 nonce가 제공하는 보안을 완전히 손상시킴
     * nonce 자동 추가는 htmx.config.inlineScriptNonce 매개변수를 통해 수행됨

설정 메타 태그

     * HTMX에는 <meta> 태그를 사용하여 구성할 수 있는 여러 구성 옵션이 있음
     * XSS 공격에서는 올바른 <meta> 태그를 주입하여 HTMX의 구성을 수정할 수 있음
     * 예를 들어, 위에서 hx-disable 속성이 HTMX 처리를 비활성화한다고 언급했음
     * 그러나 구성에서 해당 속성의 이름을 변경할 수 있음
     * hx-disable에서 다른 것으로 설정하면 hx-disable 기능을 비활성화할 수 있음

결론

     * 사이트에서 HTMX를 사용하면 HTML 주입의 공격 표면이 크게 증가함
     * 콘텐츠 보안 정책을 사용하여 XSS 위험을 제한할 수 있지만, 모든 HTMX 기능을 사용하면서 주입에 대한 보안을 제공하는 것은 불가능함

   이 글에 대한 반론이나 안전한 사용 방법에 대한 얘기가 있을 법도 한데 말이지요...

   Htmx 2.0.0 릴리즈
   htmx - high power tools for HTML
"
"https://news.hada.io/topic?id=15673","동굴 발견, 12,000년 동안 전해진 Aboriginal 의식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  동굴 발견, 12,000년 동안 전해진 Aboriginal 의식

     * 이 기사는 Science X의 편집 절차와 정책에 따라 검토되었음
     * 편집자들은 다음 속성을 강조하며 내용의 신뢰성을 보장했음:
          + 사실 확인
          + 동료 검토된 출판물
          + 평판 있는 뉴스 에이전시
          + 교정

12,000년 동안 전해 내려온 원주민 의식, 동굴 발견이 보여줌

     * 발견된 물건: 두 개의 약간 탄 지방이 묻은 막대기
     * 발견 장소: 호주 빅토리아 알프스의 Cloggs Cave
     * 발견 시기: 2020년부터 시작된 발굴
     * 발굴 팀: Monash University의 Bruno David와 Gunaikurnai Land and Waters Aboriginal Corporation (GLaWAC) 멤버들
     * 막대기 재료: 카수아리나 나무
     * 막대기 연대: 하나는 11,000년 전, 다른 하나는 12,000년 전

  '우리 조상의 회고록'

     * Gunaikurnai 원로: Russell Mullett
     * 연구 자료: 19세기 호주 인류학자 Alfred Howitt의 미출판 노트
     * 의식 설명: 병든 사람의 물건을 지방이 묻은 막대기에 묶고 작은 불 아래에 꽂아 의식을 행함
     * 의식의 중요성: 오랜 구전 전통을 통해 전해져 내려옴
     * 연구 결과: 호주 원주민의 강력한 구전 전통 덕분에 첫 번째 사람들의 기억이 살아남았음
     * 연구자 의견: 서구 사회는 기록된 글로 전환하면서 이러한 기억을 잃어버렸음
     * 추가 정보: Bruno David et al, Nature Human Behaviour (2024). DOI: 10.1038/s41562-024-01912-w

GN⁺의 의견

     * 이 기사는 호주 원주민의 오랜 전통과 의식이 어떻게 구전으로 전해져 왔는지를 보여줌
     * 현대 사회가 기록된 글에 의존하면서 잃어버린 기억의 중요성을 상기시킴
     * 비슷한 기능을 가진 다른 프로젝트로는 원주민 문화 보존 프로젝트들이 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 전통과 현대 기술의 조화를 고려해야 함
     * 이 기사는 문화적 유산 보존의 중요성을 강조하며, 이러한 연구가 더 많이 이루어져야 함을 시사함

        Hacker News 의견

     * 몇몇 구술 문화는 오랜 시간 동안 완벽한 전승을 보장함
          + 산스크리트 구절을 암기하는 여러 낭송 스타일이 있음
          + 이러한 방법은 암기자에게 여러 가지 기억 방법을 제공하고, 인접 단어의 혼합 같은 오류를 방지함
          + 결과적으로 텍스트와 발음, 피치 악센트의 완벽한 전승을 이룸
          + 일부 호주 원주민 문화에서는 ""다자 검증"" 방식이 있음
          + 특정 친족이 이야기를 올바르게 배우고 전달하는지 확인하는 책임을 가짐
          + 이야기가 세대를 거쳐 정확하게 전승되도록 하는 메커니즘이 있음
     * 인도에서는 시적인 구절을 통해 고대 지식을 전하는 관습이 있음
          + 모든 시적인 구절은 특정 '미터'로 노래됨
          + 암송에 차이가 있으면 '글자별'로 지식을 기억하고 전달하는 것이 불가능함
          + 많은 구절이 수천 년 된 것임
          + 약 7000년 전 멸종된 고대 강을 묘사한 구절을 읽었으며, 나중에 위성 이미지를 통해 재발견됨
     * 티그/태그 게임은 수천 년 동안 구술 전통을 통해 아이들 사이에서 전해져 왔을 가능성이 있음
          + 이 게임은 호모 사피엔스보다 오래되었을 가능성이 있음
          + 불을 다루기 전부터 존재했을 수도 있음
          + 수백만 년의 전통이 구술로 전해져 내려옴
     * 힌두 가정에서 자라면서 많은 축제가 관습의 기원 이야기를 듣는 것과 관련이 있음
          + 많은 이야기가 신성함을 더하기 위해 미화되었지만, 실제로는 과거의 작은 사건에서 유래했을 가능성이 있음
          + 작은 사건이 나비 효과처럼 수십억 명이 수세기 동안 계속 축하하는 주요 축제로 이어짐
     * 과거 인간 발전 초기에는 시간의 흐름에 대한 감각이 극적으로 달랐을 것임
          + 어른들이 젊은이들에게 전하는 지속적인 의식, 거대한 시의 구술 전승 등 ""저기술"" 정보 도구가 구조를 제공했을 것임
     * 호주 원주민과 그들의 역사에 대해 많이 알지 못하지만, 이러한 구술 전통이 얼마나 많이 기록되었는지 궁금함
          + 구글 검색을 통해 흥미로운 문서를 찾음: [링크]
     * 인도네시아에는 35,000년 이상 된 손자국 동굴 ""그림""이 있음
          + 오늘날에도 일부 지역에서는 집에 손자국을 남기는 관습이 있음
          + 최근에 가장 오래된 동굴 그림이 발견된 지역일 가능성이 있음: [링크]
     * 동굴 발견과 기록 보관소 발견 사이의 연결이 얼마나 약한지 놀라움
          + 고고학 논문에서 주장하는 기준이 정말 그렇게 낮은지, 아니면 내가 뭔가를 놓치고 있는지 궁금함
          + 흥미로운 이야기지만, 오캄의 면도날에 따르면 죽은 동물과 불구덩이에 막대기를 찌르는 것은 수천 년 동안 사람들이 해온 일일 것임
          + 노래와 치유 의식이 있었다는 증거는 어디에 있는지 궁금함
          + 전체 논문은 Nature에서 무료로 제공됨: [링크]
     * 이 의식은 사람에게 실제 효과를 주었을 가능성이 있음 (플라시보 효과와 유사)
          + 12,000년 동안 계속 유지되었다면, 어떤 실질적인 개선이 있었을 것임
     * 약간 주제에서 벗어나지만, 최근에 호주 원주민이 남인도의 타밀 사람들과 접촉했을 가능성이 있다는 것을 알게 됨: [링크]
"
"https://news.hada.io/topic?id=15604","DevOps에 대한 추도사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             DevOps에 대한 추도사

    DevOps의 개념과 역사

     * DevOps는 2007년경 도입된 개념으로, 하드웨어를 관리하는 사람들과 소프트웨어를 작성하는 사람들 간의 구분을 없애는 것을 목표로 함
     * 초기에는 NASA의 절차와 아이디어를 모방하여 코드 배포의 안전성을 높이려는 시도였음
     * 당시 소프트웨어 배포 과정은 다음과 같았음:
          + 개발팀이 서버 소프트웨어의 릴리스를 준비하고, QA 팀이 테스트한 후 고객에게 배포
          + 운영팀은 소프트웨어 변경 사항과 문제 발생 시 대처 방법을 포함한 플레이북을 받음
          + 데이터 센터 내에서 점진적으로 업데이트를 롤아웃하며 모니터링
          + 배포일을 정하고, 배포 후 모니터링

    DevOps의 문제점

     * DevOps는 매우 노동 집약적이었음
     * 개발팀, QA 팀, 기술 작가, 운영팀 간의 협력이 필요했음
     * 기능 배포가 느렸고, 중요한 업데이트가 우선시되었음
     * 많은 조직들이 DevOps를 도입한 이유는 다음과 같았음:
          + 기술 인력을 쉽게 대체할 수 없었음
          + 채용이 어렵고 비용이 많이 들었음
          + SaaS 벤더들이 복잡성을 줄여주었음
          + 클라우드 플랫폼의 장점을 강조했음
          + 개발자들이 작은 변경 사항이 배포되기까지 오랜 시간이 걸리는 것에 불만을 가졌음

    DevOps의 실제 모습

     * DevOps는 개발팀과 운영팀이 하나의 팀으로 통합되는 것을 목표로 함
     * QA 팀이 해고되고, 빠른 배포와 피드백을 통해 내부 테스트 기간이 줄어듦
     * DevOps는 Google의 SRE와 혼동되기도 하지만, SRE는 더 구조적이고 엄격한 접근 방식을 가짐
     * DevOps의 실제 프로세스는 다음과 같음:
          + 개발자가 git에서 브랜치를 만들고 기능을 추가
          + PR을 열고 팀원이 검토 후 main에 병합
          + CI/CD 시스템이 빌드를 시작하고, 컨테이너를 레지스트리에 푸시
          + CD 시스템이 서버에 새로운 릴리스를 알리고, 배포 성공 여부를 모니터링
          + 릴리스 인식 메트릭스를 통해 배포 후 변화를 모니터링

    DevOps의 실패 요인

     * 개발자들이 로컬 환경에서 테스트하고, Linux 서버에 배포하면서 작은 차이점이 발생
     * 운영팀이 배포를 모니터링하지 않아 문제 해결이 어려웠음
     * 개발자들이 시스템 운영에 대한 지식이 부족했음
     * 컨테이너의 도입으로 일부 문제는 해결되었지만, 운영의 복잡성은 여전히 존재했음

    컨테이너의 도입과 한계

     * 컨테이너는 ""내 컴퓨터에서는 잘 작동했는데"" 문제를 해결했음
     * Linux 서버 구성 요소를 단순화했음
     * 여전히 남은 문제들
          + 운영(Operate): 인프라 유지보수, 업그레이드 등 전문성 요구
          + 관찰(Observe): 복잡한 모니터링 시스템 구축 및 관리의 어려움
          + 지속적 피드백: 내부 피드백 처리의 미흡
          + 발견(Discover): 팀 간 지식 공유 부족
          + 계획(Plan): 중앙화된 계획 수립의 어려움

    Platform Engineering의 등장

     * Platform Engineering은 DevOps의 후속 개념으로, 개발팀이 플랫폼 운영을 이해하고 문제를 해결하는 대신, 플랫폼 팀이 이를 담당함
     * 이 접근 방식은 개발팀과 플랫폼 운영의 책임을 명확히 분리하여 역할 분담을 명확히 하지만, 여전히 많은 기술을 요구함
     * 개발자와 운영팀 모두 더 많은 작업을 해야 함

    결론

     * 인프라 공간에서 단순하고 플랫폼에 종속되지 않은 도구를 찾는 경향이 증가하고 있음
     * 많은 조직들이 Kubernetes와 같은 복잡한 기술을 포기하고, 간단한 워크플로우로 돌아가고 있음
     * Platform Engineering은 만능 해결책이 아니며, 조직은 실제 필요한 것과 불필요한 것을 구분해야 함
     * DevOps 접근 방식의 장점을 유지하면서 단순화와 안정성에 초점을 맞춰야 함

    GN⁺의 의견

    1. DevOps의 진화와 현재 상황은 기술 산업의 트렌드 변화를 잘 보여주는 사례임. 초기의 이상적인 목표와 현실 사이의 간극을 인식하고 실용적인 접근방식을 찾아가는 과정이 흥미로움
    2. 플랫폼 엔지니어링으로의 전환은 DevOps의 한계를 인정하고 새로운 해결책을 모색하는 시도로 보임. 그러나 이 역시 완벽한 해결책이 아니며, 조직의 규모와 특성에 맞는 맞춤형 접근이 필요할 것
    3. 클라우드 네이티브 기술과 마이크로서비스 아키텍처의 복잡성이 증가하면서, 단순성과 안정성에 대한 재평가가 이루어지고 있음. 이는 기술 선택에 있어 비즈니스 가치와 운영 효율성을 더욱 중요하게 고려해야 함을 시사함
    4. DevOps와 플랫폼 엔지니어링의 변화는 소프트웨어 개발 및 운영 분야의 지속적인 학습과 적응의 중요성을 강조함. 기술자들은 새로운 도구와 방법론에 대한 학습뿐만 아니라, 비즈니스 요구사항과 기술적 복잡성 사이의 균형을 맞추는 능력을 개발해야 할 것
    5. 향후 소프트웨어 개발 및 운영 방식은 더욱 유연하고 상황에 맞는 접근법을 채택할 것으로 예상됨. 대규모 조직과 소규모 스타트업이 동일한 방식을 따르는 것이 아니라, 각자의 상황에 맞는 최적의 프로세스와 도구를 선택하는 추세가 강화될 것

   꽤나 자주
   관리자들이
   데브옵스라는 개념만 도입하면
   노력없이 대단한 혁신이 나타날것이라고
   기대하는 (대기업 중소기업을 막론하고)
   낡은 기업들의 잘못된 생각

        Hacker News 의견

     * ""devops cycle"" 다이어그램에서 ""build, test, deploy""에 집중하는 것이 핵심임
          + 속도에 중점을 두었으며, 엔지니어링 우수성은 고려하지 않았음
          + 운영 팀을 해고하고 QA를 재구성함
          + 모든 팀이 온콜 로스터를 가지게 되었음
          + 단기적인 이익을 위해 시스템에 혼란스러운 변화를 주었음
          + 몇 달 후에는 변경할 때마다 문제가 발생함
          + devops 도구는 유용했지만, 비용이 많이 들고 좌절감을 주었음
          + 새로운 개발자들은 devops를 모르지만 컨테이너를 알고 있음
     * devops 팀이 겪은 문제에 기반한 의견임
          + 새로운 서비스를 추가하고 인프라를 안전하게 관리할 수 있어야 함
          + devops는 표준이 되었으며, 수동적인 시스템 관리자 작업은 필요하지 않음
     * Kubernetes에 대한 비판은 잘못된 것임
          + Kubernetes는 훌륭한 소프트웨어 엔지니어링의 예이며, 잘 지원되고 어디서나 실행됨
          + 무작위로 bash 스크립트를 사용하는 대신 Kubernetes를 배우는 것이 좋음
     * devops는 소프트웨어 배포를 더 쉽게 만들기 위해 장벽을 제거하는 것임
          + 일일 배포는 더 높은 품질의 코드를 배포하는 데 도움이 됨
          + 코드가 준비되었을 때만 배포할 수 있는 옵션이 중요함
          + 월간 릴리스는 압박감을 주어 비효율적인 선택을 초래할 수 있음
     * devops는 철학이지 방법론이 아님
          + 운영을 SDLC에 통합하는 것이 목적임
          + 클라우드가 이를 더 쉽게 만들었음
          + ""DevOps"" 팀이 생기면서 본래의 철학이 왜곡되었음
     * 리더십의 ""사일로를 허물기""는 거의 형식적인 것임
          + 책임이 없는 권한은 효과가 없음
          + 최고의 devops 인재는 자신을 코드로 대체하는 것을 즐김
          + devops 도구는 성숙하고 잘 문서화되어 있음
          + Kubernetes를 배우지 않는 개발자는 Linux 명령어를 모르는 개발자와 같음
     * 사용자가 테스터가 될 수 있다면 그렇게 해야 함
          + 경제적인 문제만 존재함
          + 고객이 많으면 사용자가 테스트를 하게 하고, 고객이 적으면 직접 테스트해야 함
     * 플랫폼 팀은 대기업에서만 가능함
          + 중소기업은 devops 인력이 부족하여 스트레스와 위험을 감수해야 함
          + 플랫폼 팀의 부재는 많은 문제를 초래함
     * devops는 철학이지 방법론이 아님
          + 사일로 팀에서의 경험이 devops의 필요성을 증명함
          + devops는 팀이 프로젝트를 완전히 이해하고 배포할 수 있게 함
     * devops는 좋은 의도를 가지고 있음
          + 빠른 피드백 루프가 개발 속도에 중요함
          + 조직과 제품에 맞는 최적의 솔루션을 찾아야 함
"
"https://news.hada.io/topic?id=15654","Ladybird, 진정한 독립 웹 브라우저 환영","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ladybird, 진정한 독립 웹 브라우저 환영

    Ladybird 소개

     * Ladybird는 새로운 웹 브라우저 및 웹 엔진임
     * 웹 표준을 우선으로 하여 현대 웹을 좋은 성능, 안정성, 보안으로 렌더링하는 것을 목표로 함
     * SerenityOS 프로젝트의 HTML 뷰어로 시작하여, 현재는 Linux, macOS 등 여러 플랫폼을 지원하는 브라우저로 성장함
     * 현재 활발히 개발 중이며, 2026년 첫 알파 버전을 목표로 함

    Ladybird의 독특한 점

     * 진정한 독립성: 다른 브라우저의 코드를 사용하지 않음. 웹 표준에 기반한 새로운 엔진을 구축 중임
     * 단일 초점: 웹 브라우저에만 집중함
     * 수익화 없음: 기본 검색 거래, 암호화 토큰 등 사용자 수익화 없음

    뉴스 및 발표

     * ANNOUNCEMENT: Ladybird Browser Initiative 발표
     * THOUGHTS: 공동 창립자 Chris Wanstrath의 의견 공유
     * ANNOUNCEMENT: Ladybird가 SerenityOS에서 분기됨

    참여 방법

     * 개발 참여: Ladybird는 활발히 개발 중이며, 모든 영역에서 작업이 필요함. 매주 새로운 개발자를 환영함
     * 커뮤니티 허브: Discord 서버가 주요 커뮤니티 허브임
     * 코드 호스팅: 모든 코드는 GitHub에 호스팅됨. 클론, 빌드, Discord 참여를 통해 협업 가능

    후원자

     * 후원 등급: Platinum, Silver, Bronze
     * 후원 방법: Donorbox를 통해 일회성 및 월간 기부 가능. 대규모 기부 시 로고를 웹사이트에 표시 가능

    자주 묻는 질문

     * 출시 시기: 2026년 여름에 Linux와 macOS용 첫 알파 버전 목표
     * 현재 인원: 현재 4명의 유급 풀타임 엔지니어와 많은 자원 봉사자들이 참여 중
     * 채용 계획: 새로운 풀타임 엔지니어 3명 곧 합류 예정. 적절한 팀 구성 중요
     * 독립성: 다른 브라우저 엔진의 코드를 사용하지 않음. 3rd 파티 라이브러리 사용 가능
     * Windows 지원: 현재 Windows 지원 작업 중인 인원 없음. 우선순위 아님
     * 모바일 지원: Android 및 iOS 포트 작업 중인 인원 없음. 우선순위 아님
     * 후원 등급: Platinum $100,000, Gold $50,000, Silver $10,000, Bronze $5,000
     * 독립성 유지: 후원은 무제한 기부 형태로, 이사회 좌석 등 영향력 판매 없음
     * C++ 사용 이유: SerenityOS 프로젝트의 일환으로 시작되어 C++ 사용. 현재는 대체 언어 평가 중

    GN⁺의 의견

     * Ladybird의 중요성: 독립적인 웹 브라우저로서의 중요성. 웹 표준 준수와 사용자 수익화 없는 접근 방식이 매력적임
     * 기술적 도전: 새로운 브라우저 엔진을 구축하는 것은 기술적으로 도전적인 작업임. 특히 다른 브라우저 엔진의 코드를 사용하지 않는다는 점에서 더욱 그러함
     * 커뮤니티 참여: 활발한 커뮤니티 참여가 프로젝트의 성공에 중요한 역할을 할 것임. Discord와 GitHub를 통한 협업이 강조됨
     * 미래 계획: Windows 및 모바일 지원 계획이 있지만, 현재는 우선순위가 아님. 데스크탑 버전의 안정화가 먼저임
     * 대체 언어 평가: C++ 외의 대체 언어를 평가 중이라는 점에서 기술적 유연성을 보여줌. 이는 프로젝트의 장기적인 유지보수와 발전에 긍정적인 영향을 미칠 것임
"
"https://news.hada.io/topic?id=15614","양적 금융을 위한 Python 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          양적 금융을 위한 Python 툴킷

GS Quant 소개

   GS Quant는 정량적 금융을 위한 Python 툴킷으로, 세계에서 가장 강력한 리스크 전이 플랫폼 중 하나를 기반으로 만들어짐. 글로벌 시장에서 25년 이상의 경험을 바탕으로 정량적 거래 전략 및 리스크 관리 솔루션 개발을 가속화하기 위해 설계됨. Goldman Sachs의 정량적 개발자(quants)에 의해 개발 및 유지 관리되며, 거래 전략 개발 및 파생 상품 분석을 가능하게 함. GS Quant는 파생 상품 구조화, 거래 및 리스크 관리, 데이터 분석 애플리케이션을 위한 통계 패키지로 활용될 수 있음. 추가 정보는 Goldman Sachs Developer를 참조.

요구 사항

     * Python 3.6 이상
     * PIP 패키지 관리자 접근

설치 방법

pip install gs-quant

예제

   예제, 가이드 및 튜토리얼은 해당 폴더와 Goldman Sachs Developer에서 확인 가능.

기여

   기여를 권장함. 자세한 내용은 CONTRIBUTING을 참조.

도움말

   질문, 의견 또는 피드백은 gs-quant@gs.com으로 문의.

GN⁺의 의견

     * GS Quant는 Goldman Sachs의 오랜 경험과 기술력을 바탕으로 만들어진 툴킷으로, 정량적 금융 분석에 매우 유용함.
     * 파생 상품 구조화 및 리스크 관리에 특화되어 있어 금융 업계 종사자들에게 큰 도움이 될 것임.
     * Python 기반으로 개발되어 있어, 기존 Python 사용자들에게 접근성이 높음.
     * 유사한 기능을 가진 다른 오픈 소스 프로젝트로는 QuantLib, Zipline 등이 있음.
     * 새로운 기술이나 오픈 소스를 채택할 때는 해당 기술의 커뮤니티 지원 여부와 업데이트 주기를 고려하는 것이 중요함.

        Hacker News 의견

     * OpenBB 프로젝트는 금융 데이터 분석을 위한 도구임
          + 대부분의 데이터 제공업체는 무료 API 키를 요구하며, 이는 사용자가 계정을 만들고 시간이 지나면서 유료 서비스로 전환되기를 기대함
          + ""무료 데이터""는 웹사이트에서 금융 데이터를 스크랩하는 프로젝트에 의존하며, 이는 유지보수자가 자주 업데이트해야 함
          + OpenBB 프로젝트의 주요 창작자임을 밝힘
     * 유용한 데이터 접근은 GS 특정 데이터 API를 통해 가능함
          + 금융에서 사용되는 일반적인 데이터 구조 클래스들로 구성됨
          + 도구는 무료일 수 있지만 데이터는 매우 비쌈
          + gs-quant/gs_quant/timeseries/statistics.py에 전염병 전파를 위한 SIR 및 SEIR 모델 클래스가 포함된 이유를 궁금해함
     * GS가 여전히 Slang 언어를 사용하는지, 아니면 Python으로 전환했는지 궁금해함
          + 라이브러리 이름을 ""vampire-squid""로 짓지 않은 것이 아쉬움
          + README를 보면 외부 세계보다는 개발자들에게 GS의 활동을 광고하는 것 같음
     * 프로젝트의 기원과 내부 사용 용도에 대해 더 알고 싶어함
          + 회사의 문화와 내부 우선순위는 내부에서는 합리적일 수 있지만 외부에서는 이상하게 보일 수 있음
          + 역학 모델이 양적 금융에서 어떤 용도로 사용되는지 궁금해함
     * ""bank Python""이 오픈 소스로 공개된 것을 흥미롭게 생각함
"
"https://news.hada.io/topic?id=15657","구글 드라이브에서 리눅스 부팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            구글 드라이브에서 리눅스 부팅

  Google Drive에서 Linux 부팅하기

    하지만 어떻게?

     * 보조 장치 없이 자체적으로 해결하고 싶었음
     * FUSE를 사용하여 사용자 공간에서 파일 시스템 드라이버로 작동하도록 설정
     * FUSE 프로그램을 Linux 커널 initramfs에 설치하고 네트워킹을 구성해야 했음

    Linux 부팅 과정

    1. 펌웨어(BIOS/UEFI)가 부팅 로더를 시작하고 로드함
    2. 부팅 로더가 커널을 로드함
    3. 커널이 임시 파일 시스템을 RAM에 압축 해제하여 실제 파일 시스템을 마운트할 도구를 제공함
    4. 커널이 실제 파일 시스템을 마운트하고 프로세스를 새로운 파일 시스템에서 실행되는 init 시스템으로 전환함

    개념 증명

     * 네트워크 지원 및 적절한 FUSE 바이너리를 포함한 initramfs 필요
     * Dracut을 사용하여 사용자 정의 initramfs를 쉽게 빌드할 수 있었음
     * Arch Linux를 기반으로 빌드 결정

    Google이 개입함

     * google-drive-ocamlfuse 프로젝트를 사용하여 Google Drive를 FUSE로 마운트
     * 여러 문제 발생: 심볼릭 링크, 하드 링크, 속도, 권한 문제 등
     * 문제를 해결하기 위해 수동으로 심볼릭 링크 생성 및 기타 설정 조정

    실제 하드웨어에서 실행하기

     * 올바른 이더넷 드라이버 사용 및 네트워크 설정 변경
     * USB 드라이브에 통합 EFI 파일을 빌드하여 실제 하드웨어에서 테스트

    결론

     * 이 프로젝트는 클라우드 네이티브 컴퓨팅의 가능성을 보여줌
     * SSH 또는 Git 저장소에서 Linux를 부팅하는 등 다양한 응용 가능성 존재

  GN⁺의 의견

     * 이 프로젝트는 클라우드 네이티브 컴퓨팅의 가능성을 탐구하는 흥미로운 시도임
     * FUSE를 사용하여 Google Drive에서 Linux를 부팅하는 과정에서 발생하는 다양한 문제를 해결하는 방법을 배울 수 있음
     * 클라우드 기반 파일 시스템의 성능 및 안정성 문제를 고려해야 함
     * 비슷한 기능을 제공하는 다른 프로젝트로는 gitfs 등이 있음
     * 새로운 기술을 채택할 때는 성능, 안정성, 보안 등의 측면을 신중히 고려해야 함

        Hacker News 의견

     * 이 기술을 ""부팅""이라고 부르기에는 커널이 이미 부팅된 상태임
          + google-drive ""마운팅"" 지원이 grub에 추가되면 인정할 것임
          + 이는 rootfs를 이상한 장소에 배치하는 것임
          + 참고로, 내 프로젝트는 NixOS의 rootfs를 IPFS에 배치하는 것임
     * 과거에는 Sun Solaris를 HTTP를 통해 부팅할 수 있었음
          + 이를 wanboot라고 불렀음
          + SPARC 머신의 OpenBoot PROM 펌웨어 옵션이었음
          + 네트워크 부팅 설정 예시:
ok setenv network-boot-arguments dhcp,hostname=myclient,file=https://192.168.1.1/cgi-bin/wanboot-cgi
ok boot net

          + 이는 (인터)네트워크를 통해 initramfs와 커널을 로드함
          + 관련 문서 링크:
               o Oracle Docs 1
               o Oracle Docs 2
     * Linux를 bittorrent로 부팅하는 것은 어떨까?
          + nbdkit-torrent-plugin 예시
          + 문제는 높은 지연 시간의 장치에서 Linux를 부팅할 때 커널이 I/O 요청을 너무 빨리 타임아웃함 (약 60초)
          + 타임아웃 시간을 늘려야 함
     * 로컬 initramfs에서 몇 메가바이트의 rootfs를 부팅할 때 원격에서 부팅한다고 할 수 있을까?
     * 사람들이 정말 원하는 것은 특히 임베디드 시스템에서의 초단위 부팅임
          + 이는 어려운 문제지만, 이를 해결하기 위한 CS 연구에 관심이 없는 것 같음
     * S3에서 부팅하는 것을 언급함
          + Google Drive로 변경하면 지연 시간이 추가됨
          + 그래도 잘한 것임
     * 집에서 처음 케이블 모뎀을 설치했을 때, 부팅 플로피를 사용해 네트워크를 통해 BSD를 설치할 수 있었음
          + 당시에는 놀라운 일이었음
          + 오늘날에도 가능한지 확실하지 않음
          + 아마도 파일이 FTP나 TFTP에 호스팅되었을 것임
          + 오늘날에는 대부분 ISO 파일임
     * 비슷한 일을 한 적이 있음: Tumbleweed 설치 DVD의 RPM 저장소에서 부팅함
          + 초기 목표는 RPM 패키지를 마운팅하는 fuse 파일 시스템을 작성하는 것이었음
          + 얼마나 멀리 갈 수 있는지 확인하고 싶었음
          + 결과적으로 꽤 멀리 갈 수 있었음:
               o GitHub Commit
          + 시스템이 작동하는 데스크탑으로 부팅되고, DVD에 있는 모든 패키지가 설치된 것처럼 보임
     * Windows에서는 Citrix를 사용해 이를 자주 함
          + 이를 pvs라고 부름
          + 작은 pxe 부팅을 하고 Windows 서버 이미지를 스트리밍함
     * ""정신이 혼미해지고, 수천 년의 프로그래머 시간과 광기의 비명 속에서 나의 걸작을 찾음""
          + 퓰리처상 후보감임
"
"https://news.hada.io/topic?id=15706","기계식 컴퓨터, 전자기기 아닌 키리가미 큐브에 의존","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      기계식 컴퓨터, 전자기기 아닌 키리가미 큐브에 의존

     * 기계 컴퓨터, 전자 부품 없이 키리가미 큐브로 작동
          + 즉시 배포용
               o 연구자: Jie Yin, Yanbin Li, Matt Shipman
               o 소속: North Carolina State University
          + North Carolina State University 연구팀이 전자 부품 없이 데이터 저장, 검색 및 삭제가 가능한 키리가미 영감을 받은 기계 컴퓨터를 개발함
          + 이 시스템은 데이터 편집이 허용되는 시점과 데이터가 고정되어야 하는 시점을 제어할 수 있는 가역 기능을 포함함
     * 기계 컴퓨터란?
          + 기계 컴퓨터는 전자 부품 대신 기계 부품을 사용하는 컴퓨터임
          + 역사적으로 레버나 기어와 같은 기계 부품을 사용해왔음
          + 다중 안정 상태를 가지는 구조를 사용하여 기계 컴퓨터를 만들 수 있음
     * 연구 목적
          + 안정적인 기계 시스템을 개발하여 데이터를 저장하는 것
          + 큐브가 위로 밀리거나 아래로 밀리는 이진 컴퓨팅 기능에 초점을 맞춤
          + 큐브가 5개 이상의 다른 상태를 가질 수 있어 더 복잡한 컴퓨팅 가능성 제시
     * 새로운 기계 컴퓨터의 기본 단위
          + 1cm 크기의 플라스틱 큐브로 구성된 64개의 상호 연결된 큐브로 이루어진 기능 단위
          + 키리가미 원리를 3차원 재료에 적용하여 연결된 큐브로 만듦
          + 큐브를 위나 아래로 밀면 모든 연결된 큐브의 구조가 변경됨
          + 큐브를 물리적으로 밀거나 자석판을 사용하여 원격으로 밀 수 있음
          + 64개의 큐브 기능 단위를 결합하여 더 복잡한 메타구조를 형성할 수 있음
     * 데이터 편집 방법
          + 기능 단위의 구성을 변경해야 함
          + 메타구조의 가장자리를 당겨 탄성 테이프를 늘리고 큐브를 밀어야 함
          + 메타구조를 놓으면 테이프가 수축하여 큐브와 데이터를 고정함
     * 잠재적 응용
          + 3차원 기계 암호화 또는 해독 가능
          + 이진 프레임워크를 사용하여 9개의 기능 단위로 구성된 간단한 메타구조는 362,000개 이상의 가능한 구성을 가짐
          + 이진 코드 이상의 컴퓨팅 개발 가능성 있음
          + 3차원 컨텍스트에서 정보를 표시하는 햅틱 시스템 개발 가능성 있음
     * 연구 논문 정보
          + 논문 제목: ""Reprogrammable and Reconfigurable Mechanical Computing Metastructures with Stable and High-Density Memory""
          + 저자: Yanbin Li, Shuangyue Yu, Haitao Qing, Yaoye Hong, Yao Zhao, Fangjie Qi, Hao Su, Jie Yin
          + 출판일: 2024년 6월 26일
          + 저널: Science Advances
          + DOI: 10.1126/sciadv.adk7220

GN⁺의 의견

     * 이 기사는 전자 부품 없이 기계적으로 데이터를 처리할 수 있는 새로운 방법을 제시하여 흥미로움
     * 기계 컴퓨터의 잠재적 응용은 암호화, 해독 및 햅틱 시스템 등 다양한 분야에 걸쳐 있음
     * 이 기술은 전자기 간섭에 민감하지 않아 안정적인 데이터 저장 및 처리가 가능함
     * 기존의 전자 컴퓨터와 비교하여 에너지 효율성이 높을 수 있음
     * 이 기술을 채택할 때는 기계적 내구성과 유지보수 문제를 고려해야 함

        Hacker News 의견

     * 논리 게이트가 실제로 작동하는지에 대한 질문이 있었음
          + 비디오에서는 직접 조작으로 비트를 전환하는 것만 보여줌
          + 논리 게이트 작동을 보여주는 그림 8 (C와 D)에서 ""OR"" 및 ""AND"" 논리 게이트 작업을 달성했음을 확인함
     * 이 개념 증명 작업은 큐브가 위로 밀리거나 아래로 밀리는 이진 컴퓨팅 기능에 초점을 맞추고 있음
          + 큐브가 1 또는 0일 수 있음
          + 더 복잡한 컴퓨팅 가능성을 제시함
          + 큐브가 다섯 가지 이상의 상태를 가질 수 있음을 증명함
          + 이론적으로 큐브는 1 또는 0뿐만 아니라 2, 3 또는 4도 전달할 수 있음
     * 아날로그와 디지털 컴퓨팅 사이의 경계를 넘나드는 것인지에 대한 질문이 있었음
          + 설명이 불완전한 아날로그 컴퓨터 시스템을 묘사하는 것처럼 들림
     * 기계식 컴퓨터는 전자 부품이 아닌 기계 부품을 사용하여 작동하는 컴퓨터임
          + 전자는 핵자보다 약 천 배 가벼움
          + 따라서 기계식 컴퓨터는 전자식 컴퓨터보다 항상 더 많은 에너지를 소비할 것임
          + 기계식 컴퓨터는 작동하기 위해 원자를 이동시켜야 하기 때문임
     * 억만장자가 된다면 집에 전기 이전 컴퓨터를 위한 큰 방을 만들고 싶다는 의견이 있었음
          + 트랜지스터가 보편화되면서 많은 것들이 거의 사소해졌음
          + The Writer Automaton 같은 것이 항상 매혹적이었음
     * 이러한 컴퓨터가 금성의 로버와 같은 가혹한 환경에 적합한지에 대한 질문이 있었음
     * ""기계적 계산""에서 작동 칩으로 사회를 재부팅한 사례가 있는지에 대한 질문이 있었음
          + 행성 전체의 EM 이벤트가 모든 계산을 중단시키는 상황에서 TSMC와 같은 공장을 다시 가동시키는 방법
          + 식량 생산을 유지하는 방법
          + 기계식 컴퓨터와 기본 지침만으로 제로에서 회복할 수 있는지에 대한 질문이 있었음
     * 이러한 컴퓨터의 사용 사례가 무엇인지에 대한 질문이 있었음
          + 높은 방사선이나 기타 극한 환경에서의 사용 가능성
     * 논문 링크가 공유되었음 (오픈 소스는 아님)
          + 논문 링크
     * QAM을 연상시킨다는 의견이 있었음
     * Neal Stephenson의 The Diamond Age를 현실에서 보는 것 같다는 의견이 있었음
"
"https://news.hada.io/topic?id=15607","XAES-256-GCM 확장 논스확장 논스 AEAD

    XAES-256-GCM 소개

     * XAES-256-GCM은 256비트 키와 192비트 논스를 사용하는 인증된 암호화 알고리즘(AEAD)임
     * 주요 목표:
          + 무작위로 생성된 논스를 안전하게 지원
          + FIPS 140 준수
          + 일반적인 암호화 라이브러리에서 쉽게 구현 가능

    XAES-256-GCM의 설계 목표

     * 큰 논스를 사용하여 무제한 메시지에 대해 안전하게 무작위로 생성 가능
     * FIPS 140 준수를 통해 다양한 환경에서 사용 가능
     * 간단한 구현을 통해 사용자 부담을 줄임

    XAES-256-GCM의 작동 원리

     * AES-256-GCM을 기반으로 확장된 논스 구조 사용
     * 입력 키와 논스를 사용하여 파생 키를 계산
     * 세 번의 AES-256 호출로 메시지 처리

    구현 및 최적화

     * Go 참조 구현은 100줄 미만의 코드로 구성
     * 표준 라이브러리의 crypto/cipher와 crypto/aes만 사용
     * NIST SP 800-108r1 KDF와 NIST AES-256-GCM AEAD를 사용하여 설명 가능

    타사 구현 및 호환성

     * .NET 8+, pyca/cryptography, Web Cryptography API에서 타사 구현 존재
     * FIPS 140 준수를 위해 라운드 수 변경 불가

    대안 및 테스트 벡터

     * AES-GCM-SIV 등 다양한 대안 존재
     * 주요 코드 경로에 대한 테스트 벡터 포함

    요약

     * XAES-256-GCM은 안전하고 준수하며 상호 운용 가능한 AEAD로 설계됨
     * XChaCha20Poly1305 및 AES-GCM-SIV를 보완하는 역할
     * Go 표준 라이브러리에 추가되기를 희망

    GN⁺의 의견

     * XAES-256-GCM은 큰 논스를 사용하여 안전성을 높인 점이 주목할 만함
     * FIPS 140 준수를 통해 다양한 환경에서 사용 가능
     * Go와 같은 언어에서 쉽게 구현할 수 있어 개발자에게 유용함
     * AES-GCM-SIV와 같은 대안도 고려할 가치가 있음
     * 새로운 기술을 도입할 때는 성능과 호환성을 신중히 검토해야 함

        Hacker News 의견

     * 디자인이 매우 영리함: CMAC 기반으로, 낮은 수준의 프리미티브가 없을 때 AES-CBC를 사용하여 키를 유도할 수 있음
          + AES-CBC 용어로 설명하면:
1. L = AES-CBC-256ₖ(iv = 0¹²⁸, plaintext = 0¹²⁸)[:16]
2. MSB₁(L) = 0이면, K1 = L << 1;
   그렇지 않으면 K1 = (L << 1) ⊕ 0¹²⁰10000111
3. M1 = 0x00 || 0x01 || X || 0x00 || N[:12]
4. M2 = 0x00 || 0x02 || X || 0x00 || N[:12]
5. Kₓ = AES-CBC-256ₖ(iv = K1, plaintext = M1)[:16] || AES-CBC-256ₖ(iv = K1, plaintext = M2)[:16]
6. Nₓ = N[12:]

          + AES-CBC-256은 첫 번째 128비트 블록을 반환하고, 패딩된 블록은 버림
          + 키를 유도한 후 표준 AES-GCM과 함께 사용
          + WebCrypto API를 기반으로 한 JS 구현 예시: GitHub 링크
          + AES-CBC용으로 의도된 적절한 CryptoKey를 수용하며, IndexedDB에 저장 가능
     * Filippo의 작업이 훌륭함: 무작위 논스를 사용할 경우 약 2^32 메시지마다 키를 회전해야 하는 문제를 해결함
          + AES-GCM에서 논스 충돌은 치명적임 (공격자가 임의의 메시지에 서명할 수 있게 됨)
          + 무작위 논스를 사용할 필요는 없지만 일반적으로 권장됨
          + 두 가지 프리미티브(카운터 기반 KDF와 일반 GCM)를 사용하여 FIPS 준수하게 만든 것이 매우 영리함
     * 이 기능이 몇 년 전 암호화 파일 시스템을 작성할 때 존재했으면 좋았을 것임
          + 논스 충돌은 대규모 파일 시스템 배포에서 큰 문제임
          + 2^32는 커 보이지만 초당 100k IOPS를 쓰는 PB 배열에서는 PRNG 무작위성에 의존할 경우 충돌 가능성이 거의 보장됨
     * 이 기능이 아카이브 파일 암호화 용도로 FIPS 준수 변형 age[1]에 사용되기를 바람
          + 은행 산업 감사관들이 ChaCha 대신 AES를 사용하지 않아 age를 반대했음 (X25519 공개 키 부분은 NIST에서 최근 승인됨)
          + golang 경험은 없지만 age 사양에 따라 쉽게 적용될 것 같음
          + 시간이 허락하면 시도해볼 것임
          + ""cage""라고 부를 것임 (""compliant actually good encryption""의 약자)
     * 비암호학자의 질문: 왜 192비트 논스를 사용하고 256비트를 사용하지 않는지 궁금함
          + 실용적인 응용에서 추가 비트가 비용이 많이 들 것 같지 않음
     * (2⁸⁰ 메시지에서 충돌 위험 2⁻³²)
          + AES 블록 크기가 128비트이기 때문에 그 전에 문제가 발생할 수 있는지 궁금함
"
"https://news.hada.io/topic?id=15726","Show GN: 무료 ERD 작성 도구 ERD9, 그리고 ChatGPT","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: 무료 ERD 작성 도구 ERD9, 그리고 ChatGPT

   개인 프로젝트로 약 1년 동안 조금씩 개발 중인 ERD 작성 도구입니다.
   기본적인 편집 기능과 SQL(DDL)문으로 ERD 생성하기, 테이블 관계 확인하기 등의 기능을 구현했습니다.
   그리고, 이번에는 ChatGPT와 연동해서
   ERD를 생성하거나
   작성한 ERD를 평가하기,
   ERD에서 Java등의 코드를 생성하기 등의 기능을 추가해 봤습니다.

   서버없이 자바스크립트로만 작성하다 보니 (github pages로 제공)
   ChatGPT의 대화가 이어지도록 구현할 수 없는 한계가 있습니다.

   사용법: https://github.com/gujc71/erd9
   웹사이트: https://gujc71.github.io/erd9/
"
"https://news.hada.io/topic?id=15670","WordPerfect 공동 창립자 Bruce Bastian 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WordPerfect 공동 창립자 Bruce Bastian 사망

    브루스 배스천, BYU 졸업생이자 기술 개척자 및 평등 옹호자, 76세로 사망

     * 브루스 배스천, 전 기술 기업가, 자선가 및 LGBTQ+ 커뮤니티 옹호자, 2024년 6월 16일 76세로 사망
     * BYU 졸업생으로 성공적인 워드 프로세싱 애플리케이션을 개척한 후 LGBTQ+ 커뮤니티의 옹호자가 됨
     * 배스천은 네 아들, 남편 클린트 포드, 친구 및 가족과 함께 세상을 떠남
     * 그의 죽음은 그가 옹호한 LGBTQ+ 커뮤니티와 그가 참여한 다른 조직들에 의해 기념됨

    그의 업적과 유산

     * 배스천의 장남 릭은 그를 기술, 자선 활동, LGBTQ 커뮤니티에서의 활동으로 기억할 것이라고 말함
     * 배스천은 Human Rights Campaign, Encircle, Equality Utah, Utah Pride Center의 회원이었음
     * 그는 평등한 결혼 권리를 위해 워싱턴 D.C.로 여행하며 다양한 성적 지향을 가진 사람들의 포용을 옹호함
     * Human Rights Campaign의 회장 켈리 로빈슨은 배스천이 30년 넘게 정치와 옹호 활동에 참여했다고 언급함
     * Encircle의 CEO 조던 스그로는 배스천이 Encircle의 설립에 중요한 역할을 했다고 말함

    초기 생애와 경력

     * 배스천은 남부 아이다호에서 유타로 이주하여 브리검 영 대학교에 입학함
     * 1970년대 중반 Cougar Marching Band의 감독으로 활동
     * 1979년 컴퓨터 과학 대학원생으로서 Alan Ashton과 함께 WordPerfect Corp.를 공동 설립
     * WordPerfect는 1980년대와 1990년대에 기술 분야에서 지배적인 힘이었음
     * 1994년 WordPerfect의 회장직에서 물러났으며, 회사는 곧 Novell에 매각됨

    자선 활동과 유산

     * 1997년 B.W. Bastian Foundation을 설립하여 평등을 완전히 수용하는 조직만을 지원함
     * 재단의 전무 이사 마이클 매리엇은 배스천의 영향력이 매우 컸다고 언급함
     * 배스천은 음악과 예술에 대한 사랑을 유지했으며, 2010년 버락 오바마 대통령에 의해 대통령 예술 자문 위원회에 임명됨
     * 배스천은 유타의 LGBTQ+ 커뮤니티와 다른 평등 옹호 원인을 지원하기 위해 자원을 사용함
     * 유타 민주당 의장 다이앤 루이스는 배스천이 유타 사람들에게 빛이 되었다고 말함

    개인적인 삶과 가족

     * 배스천은 1948년 3월 23일 아이다호 트윈 폴스에서 태어남
     * BYU에서 음악 교육 학사와 컴퓨터 과학 석사를 취득
     * 성인 생활은 오렘과 캘리포니아 팜 스프링스에서 보냄
     * 남편과 네 아들, 14명의 손주, 두 자매와 한 형제를 남김

    GN⁺의 의견

     * 브루스 배스천의 삶은 기술 혁신과 사회적 정의를 위한 헌신으로 요약될 수 있음. 그의 워드 프로세싱 소프트웨어는 1980년대와 1990년대에 큰 영향을 미쳤으며, 그의 자선 활동은 많은 사람들에게 긍정적인 변화를 가져옴
     * 배스천의 이야기는 기술과 사회적 책임이 어떻게 결합될 수 있는지를 보여줌. 이는 현재와 미래의 기술 기업가들에게 중요한 교훈이 될 수 있음
     * Encircle과 같은 조직은 배스천의 지원 덕분에 많은 LGBTQ+ 청소년과 가족들에게 중요한 자원을 제공할 수 있었음. 이는 사회적 포용과 정신 건강 지원의 중요성을 강조함
     * 배스천의 유산은 그의 자선 활동과 평등 옹호를 통해 계속될 것임. 이는 다른 기업가와 자선가들에게 영감을 줄 수 있음
     * 기술 혁신과 사회적 책임을 결합한 배스천의 접근 방식은 다른 기술 기업들에게도 모범이 될 수 있음. 이는 기술이 단순한 도구가 아니라 사회적 변화를 이끌 수 있는 강력한 수단임을 보여줌

        Hacker News 의견

     * 첫 번째 컴퓨터에 Microsoft Word 대신 WordPerfect가 설치되어 있었음
          + 손글씨가 나빠서 숙제를 타이핑하는 데 WordPerfect를 사용했음
          + 하드 드라이브가 고장 나면서 StarOffice로 전환했지만 여전히 WordPerfect를 좋아했음
          + WordPerfect가 Word 대신 표준 워드 프로세서가 되었어야 한다고 생각함
     * 고등학교 물리학 노트를 작은 글씨로 인덱스 카드에 인쇄하는 데 WordPerfect 5.2를 사용했음
          + 당시 Word for Windows는 TrueType 글꼴 크기 조정이 불편했음
     * WordPerfect의 역사와 함께 Bruce Bastian의 삶에 감동받았음
          + Brigham Young University 졸업생이자 강력한 LGBTQ+ 지지자였음
          + 과거에 Utah에서 LGBTQ+로 살아가는 것이 쉽지 않았을 것임
          + 그의 자선 활동과 지원이 기술보다 더 큰 유산임
     * 1985년, 어머니가 대학에서 WordPerfect를 사용하여 문서를 작성했음
          + 어머니 덕분에 컴퓨터에 대한 흥미를 가지게 되었음
          + WordPerfect의 ""reveal codes"" 기능이 소프트웨어와 파일 형식에 대한 깊은 통찰을 심어줌
     * Provo에서 17년 동안 살면서 WordPerfect의 유산을 느꼈음
          + Bruce Bastian의 공개적인 LGBTQ+ 활동이 인상적이었음
          + LDS 교회의 동성 결혼에 대한 반응과 정책 변화에 대해 언급함
     * 80년대 후반, WordPerfect의 'Reveal Codes' 기능을 사용하여 고객을 감동시켰음
          + WordPerfect는 더 문명화된 시대의 우아한 도구였음
     * Bruce Bastian이 세상을 더 나은 곳으로 만들었음
          + 그는 똑똑하고, 친절하며, 사려 깊고, 관대했음
          + 그의 이야기가 개인적으로 큰 영향을 미쳤음
          + 그의 편지가 인생에 긍정적인 영향을 미쳤음
     * Bruce Bastian에 대한 추가 정보는 Wikipedia와 관련 기사에서 확인할 수 있음
          + Wikipedia 링크
          + Deseret 기사
          + Fox13 기사
          + HRC 기사
"
"https://news.hada.io/topic?id=15672","Mako - 빠르고, 프로덕션에서 사용가능한 Rust기반 웹 번들러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Mako - 빠르고, 프로덕션에서 사용가능한 Rust기반 웹 번들러

     * Mako는 Rust 기반의 ""매우 빠른"" 그리고 ""production-grade"" 프론트엔드 빌드 도구
     * 2023.3에 출시되었고, 1년 만에 오픈소스화 됨
     * ""매우 빠른"" 빌드 속도가 필요해서 프로젝트를 시작함
     * ""production-grade""라는 표현은 2023.11.24부터 Mako가 Ant Group(예전 알리페이) 내부에서 공식 출시되었기 때문
          + 수천 개 프로젝트와 그 안에서 사용된 다양한 npm 패키지 및 버전으로 검증되었음

Mako의 개발 이유

     * 작년(2023.3)에 팀에서 Rust, SSR, AIG 3개 프로젝트를 시작했고, 빌드 성능 문제를 해결하기 위해 Rust를 선택
     * 기존 Rust 도구를 사용하지 않고 직접 만들기로 한 이유는 복잡함
         1. 커뮤니티 라이브러리의 성숙도와 Ant의 요구사항과의 호환성
         2. 제어권을 가질 필요가 있음(비즈니스적 이유로 많은 커스터마이징이 필수)
         3. 모던 메타 프레임워크가 빌드 외에도 컴파일 시간 프레임워크를 필요로 함. 특히 SSR 및 RSC 시나리오에서 많은 컴파일이 필요
         4. Rust를 배우고 팀이 성장할 필요성
     * Mako의 타임라인 : 2023.3에 킥오프, 2023.7에 첫 사용 가능한 버전, 2023.11에 Ant에서 내부 출시, 2024.6에 오픈소스화

속도

     * Mako는 속도에 많은 노력을 기울였음. 벤치마크 데이터는 다음과 같음
          + Mac Book Pro M2 Max에서 Turbopack도 테스트하는 프로젝트로 벤치마크를 실행함
          + dev cold start 시간, root node와 leaf node HMR 시간, production Build 빌드 시간, JS bundle 크기 등의 차원을 포함함
     * 이전 버전과 비교하면 다음과 같음
          + Ant Design Pro 전체 프로젝트 빌드 시 Webpack은 16초, Mako는 3.9초로 4배 속도 향상
          + Ant Design Pro 전체 프로젝트 빌드 시 Mako는 거의 실시간 hot update임
          + RSC 기반 인트라넷 Hybrid 프레임워크 Smallfish 프로젝트 빌드 시 스캐폴드 프로젝트의 빌드 시간이 36.7초에서 1.2초로 단축됨
     * 또한 Mako는 실험적인 SSU 기능도 있는데, 이전 MFSU 구현과 유사하게 의존성 패키징 및 캐싱을 수행함
          + 소스 코드 대비 의존성 비율에 따라 Dev hot start-up 시 10~50배 속도 향상 가능

        Hacker News 의견

     * esbuild나 swc와 비교했을 때 성능이 떨어질 수 있음
          + JavaScript 생태계에서 많은 도구들이 느리고 버그가 많아 대안이 필요함
          + 네이티브 도구와 비교하면 점점 수익이 감소함
     * 이 도구는 비표준 기능을 지원하여 특정 번들러에 종속될 수 있음
          + 번들러 없이도 작동하는 프로젝트가 더 좋음
          + 번들러는 최적화 단계로 사용하는 것이 좋음
     * Vite의 주요 기능은 rollup의 기존 플러그인 시스템을 활용하는 것임
          + 기존 생태계를 위한 호환 레이어를 구축할 계획이 있는지 궁금함
          + 다른 빌드 도구들도 이를 하고 있음 (예: rspack은 webpack 플러그인 사용, farm은 vite 플러그인 사용)
     * 제목에 ""Rust""가 있어서 웹용 Rust 컴파일러인 줄 알았음
          + JavaScript용 또 다른 번들러임
          + Rust로 구축됨
     * 웹 개발자가 아니어서 번들러가 실제로 무엇을 하는지 혼란스러움
          + 번들러가 정확히 무엇을 하는지에 대한 정보가 필요함
          + 속도에 중점을 두는 이유는 무엇인지 궁금함 (예: 패키지 버전 해결?)
     * 웹 개발자가 아니지만 웹 앱을 정기적으로 개발함
          + 빠른 개발 주기에서 번들러의 목적이 무엇인지 궁금함
          + 웹 앱이 빠르게 로드되려면 변경된 부분만 다시 다운로드하는 것이 좋음
          + 번들링하지 않는 것이 더 나음
     * Rspack (ByteDance)이 1.0 버전을 출시함
          + Farm도 있음
          + Ant Group에서 만든 것임
          + Rust로 구축된 많은 빌드 도구들이 있음
          + Turbopack은 번들링의 완전한 재구축을 목표로 함
          + Rolldown은 Rust 기반의 roll-up 재구축으로 보임
     * 또 다른 흥미로운 Rust 기반 JavaScript 번들러는 Oxid / OXC임
          + OXC 프로젝트 GitHub 링크
          + OXC 공식 사이트
          + Rolldown은 개발 중인 번들러를 OXC에 기반하고 있음
     * 번들링의 한계에 도달하면 어떻게 될지 궁금함
          + esbuild처럼 ms 단위의 성능에 도달하면 창의적인 작업을 할 수 있음
          + 각 브라우저에 작은 WASM mako나 번들러가 있다면 매우 흥미로울 것임
          + 많은 노력이 들어간 것처럼 보임
     * MakoTemplates와 관련이 있는지 궁금함
          + MakoTemplates 공식 사이트
"
"https://news.hada.io/topic?id=15638","Teo - Schema-driven 웹서버 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Teo - Schema-driven 웹서버 프레임워크

     * Rust, Node.js, Python 용 네이티브 서버 API
     * GraphQL 및 Prisma에서 영감을 받은 혁신적인 스키마 정의
          + 직관적인 데이터모델로 읽고/쓰기 쉬움
     * 자동 데이터베이스 마이그레이션
     * MySQL, PostgreSQL, SQLite 및 MongoDB 지원
     * 서버 코드 생성
          + ORM 유형 및 인터페이스 생성
          + 프론트엔드용 쿼리 클라이언트 생성
          + 커스터마이즈 가능한 관리자 대시보드 생성
     * 매우 효율적이고 성능이 뛰어남
     * 데이터 정제, 변환 및 유효성 검사
     * 내장된 사용자 세션
     * 기본 제공 권한 검사
     * 선입선출 미들웨어
     * 커스텀 라우팅 핸들러
     * AI 도구와 잘 어울림
     * VSCode 플러그인 제공
"
"https://news.hada.io/topic?id=15598","바이트코드 분석: Factorio의 Lua 보안 결함 해명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    바이트코드 분석: Factorio의 Lua 보안 결함 해명

Factorio의 Lua 보안 취약점 분석

  Factorio란 무엇인가?

     * Factorio는 공장을 자동화하여 로켓을 만들어 행성을 탈출하는 게임임
     * 3,500,000개 이상의 게임 복사본이 판매되어 보안 연구자들에게 매력적인 타겟이 됨

  게임에서 Lua의 사용 방법

     * Lua는 게임 로직을 구현하고, 모드와 커스텀 맵을 만들기 위해 사용됨
     * 모딩 커뮤니티가 매우 활발하여 수천 개의 모드가 존재함
     * Alien Biomes 모드는 551K 다운로드를 기록함

  Lua 인터프리터의 네트워크 노출

     * Factorio의 멀티플레이어 모드는 결정적 락스텝을 사용하여 클라이언트를 동기화함
     * 한 플레이어가 Lua 코드를 실행하면 다른 플레이어도 동일한 코드를 실행해야 함
     * 이를 통해 악성 Lua 코드를 네트워크를 통해 실행할 수 있는 가능성이 생김

  일반적인 익스플로잇 경로

     * 악성 맵을 제공하는 Factorio 서버를 호스팅함
     * 클라이언트가 서버에 연결하면 맵을 다운로드하고 Lua 코드를 실행함
     * Lua 구현의 약점을 이용하여 가짜 객체를 생성함
     * 메모리 누출/손상을 통해 프로그램의 동작을 변경함
     * 이러한 강력한 프리미티브를 이용하여 코드 실행을 얻음

  Lua 바이트코드의 위험성

     * Lua는 인터프리터 언어로, 작성된 코드를 바로 실행하지 않고 바이트코드로 컴파일함
     * 바이트코드를 직접 실행할 수 있으면 잘못된 바이트코드를 실행하여 메모리를 누출하거나 손상시킬 수 있음

  바이트코드 검증기

     * Lua 개발자는 악성 바이트코드로부터 인터프리터를 보호하기 위해 바이트코드 검증기를 구현했으나, 반복적으로 우회 가능성이 발견되어 Lua 5.2에서 제거됨
     * Factorio 개발자는 자체 바이트코드 검증기를 구현했으나, 일부 오프바이원 문제로 인해 완벽하지 않음

  가짜 객체 생성

     * 가짜 객체를 생성하여 인터프리터의 모든 기능을 활용할 수 있음
     * 문자열을 사용하여 임의의 데이터를 누출하고, 배열을 사용하여 임의의 메모리에 쓰기 가능
     * 네이티브 함수를 호출할 수 있으면 실행 흐름을 제어할 수 있음

  주소 누출

     * Lua의 print 함수는 주소를 누출할 수 있음
     * Factorio에서는 제거되었으므로, 타입 혼동을 이용하여 주소를 누출하는 방법을 사용함

  TValues 이해하기

     * Lua는 동적 언어로, 변수의 타입이 런타임 동안 변경될 수 있음
     * 내부적으로 Lua는 TValue 구조체를 사용하여 객체를 표현함
     * TValue는 타입(tt_)과 값(value_) 속성을 가짐

  FORLOOP을 이용한 타입 혼동

     * FORLOOP opcode는 루프의 초기값을 숫자로 간주하여 타입 혼동을 일으킬 수 있음
     * 이를 통해 주소를 누출할 수 있음

  IEEE 754 이중 정밀도

     * 이중 정밀도는 부호, 지수, 가수로 구성됨
     * Lua는 정수를 표현하지 않으므로, 53비트까지는 정밀도 손실 없이 주소를 누출할 수 있음

  가짜 객체 검색

     * Upvalues와 Closures를 이해하여 가짜 객체를 검색할 수 있음
     * Upvalues는 외부 함수의 변수를 접근할 수 있게 함
     * 바이트코드를 수정하여 Upvalue의 인덱스를 변경하면 가짜 객체를 검색할 수 있음

GN⁺의 의견

     * 이 글은 동적 언어의 보안 취약점을 이해하는 데 매우 유용함
     * Factorio와 같은 인기 게임에서 발생할 수 있는 보안 문제를 잘 설명함
     * Lua와 같은 언어를 사용하는 다른 프로젝트에서도 유사한 취약점이 존재할 수 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 보안 검토가 필수적임
     * 유사한 기능을 가진 다른 프로젝트로는 Minecraft의 모딩 시스템이 있음
"
"https://news.hada.io/topic?id=15631","LLM 컨텍스트 길이 늘이기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LLM 컨텍스트 길이 늘이기

   컨텍스트 길이가 긴 한국어 LLM을 사용하고자 LLM의 컨텍스트 길이를 효율적으로 늘이기 위해 조사 및 시도해본 다양한 방법들
    1. LongLoRA
       shifted sparse attention과 LoRA 파인튜닝을 활용해 8배까지 확장
    2. Rope-based Position Interpolation
       Llama와 같이 RoPE 기반 임베딩을 사용하는 모델에 RoPE 임베딩을 수정하여 적용 가능하며 파인튜닝을 통하여 16배까지 컨텍스트 길이 확장
    3. Dynamic NTK
       파인튜닝 없이 NTK 이론을 적용하여 2배 이상 확장
    4. LongLM
       변형된 어텐션을 사용하여 파인튜닝 없이 4배까지 확장
    5. ChunkLlama
       텍스트를 Chunk로 분해하여 파인튜닝 없이 Llama 모델의 컨텍스트 길이를 4배로 확장
    6. Infini-attention
       적은 추가 메모리 사용으로 2M 까지 연장 가능하며 빠른 추론 가능, Gemini-Pro에 적용된 방법

   요약이 1도 없는 글은 또 처음이네요
"
"https://news.hada.io/topic?id=15666","Slint: 크로스플랫폼 경량 GUI 런타임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Slint: 크로스플랫폼 경량 GUI 런타임

     * 디자인과 비즈니스 로직을 분리하여 UI를 독립적으로 설계 가능
     * 실시간 미리보기 기능으로 빠른 UI 디자인 반복 가능
     * 단일 디자인으로 반응형 UI 구축 가능
     * 여러 프로그래밍 언어 / 런타임 지원: Rust, C++, JavaScript, Python, Wasm(브라우저)
     * 개발자 친화적인 환경: Code Completion, Live Preview 등
     * 네이티브 바이너리로 컴파일되어 높은 성능과 유연성 제공
     * 경량화된 런타임으로 최소한의 리소스 사용(임베디드 장비에서도 구동 가능)

   괜찮네요!

   사례에나온 sk signet이 그 SK네요?

   위젯들이 초기 버전보다 많이 이뻐졌네요.
"
"https://news.hada.io/topic?id=15663","OpenSSH의 위험도 높은 취약점 (CVE-2024-6387) 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenSSH의 위험도 높은 취약점 (CVE-2024-6387) 발견

   2024년 7월 1일, glibc 기반 Linux 시스템의 OpenSSH 서버(sshd)에 심각한 취약점이 공개됨. 이로 인해 인증되지 않은 원격 코드 실행(RCE)이 루트 권한으로 발생할 수 있음. 이 취약점(CVE-2024-6387)의 심각도는 높음(CVSS 8.1)으로 평가됨.

   영향 받는 버전:
     * OpenSSH 8.5p1 ~ 9.8p1
     * 4.4p1 이전 버전(단, CVE-2006-5051 또는 CVE-2008-4109에 대한 백포트 패치를 적용하지 않은 경우)

   현재 상황:
   2024년 7월 1일 기준으로 전 세계에 약 7백만 개의 OpenSSH 8.5p1-9.7p1 버전 인스턴스가 노출된 상태이며, 총 7.3백만 개의 취약한 버전이 존재함.

   대응 방안:
   모든 OpenSSH 인스턴스를 최신 버전(9.8p1 이상)으로 업데이트할 것을 권장함.

   참고링크 1. GCP 용 대응방안 링크:
   https://cloud.google.com/compute/docs/security-bulletins?_gl=11wwv5bb_gaNjg1MDk2NTIzLjE2OTMzNTcxMTU._ga_WH2QY8WWF5*MTcxOTg4MDU3My4yMTAuMS4xNzE5ODgzMDQyLjQwLjAuMA..&_ga=2.155752892.-685096523.1693357115&_gac=1.261229439.1718046772.CjwKCAjwyJqzBhBaEiwAWDRJVDmJJ7bqOj0YkCWqpfT2ru7lEym__xfkOjfaZwJ0rJC2Drq5qw3oZxoC1bEQAvD_BwE#gcp-2024-040&?hl=en

   참고링크 2. https://www.openssh.com/txt/release-9.8

   amazon linux 2 는 해당 취약점에 해당사항 없다고 하네요
   https://explore.alas.aws.amazon.com/CVE-2024-6387.html

   우분투는 여기 나온 버전으로 버전 올리면 될것 같네요.

   https://ubuntu.com/security/notices/USN-6859-1

   openssh_8.9p1-3ubuntu0.10.debian.tar.xz
   openssh_8.9p1.orig.tar.gz
   2개 파일인 것 같은데 소스코드 설치 방법으로 진행하는 건가요?
   폐쇄망에 있는 서버라서 apt를 사용못해서요
   패치 방법좀 가이드 부탁드려요

   우분투 22.04 버전에서 아래와 같이 진행해도 패치 되는걸까요?
   최신 ssh로 install은 되는 것 같은데요 버전도 변경이 안되고 패치가 된건지 확인할 방법이 없네요

   sudo apt update

   sudo apt-get install -y ssh

   우분투 22.04이면, 아래 명령으로 확인 시, version이 ""1:8.9p1-3ubuntu0.10""이면 패치가 적용된 것입니다.

   sudo dpkg -l openssh-server

   오 그럼 apt-get install -y ssh 진행하면 되는 건가 보네요

   ""1:8.9p1-3ubuntu0.10"" 버전 확인했습니다.

   감사합니다~ ㅎ

   영향 받는 버전은 ""OpenSSH 8.5p1 ~ 9.8p1"" 이고 대응방안은 ""최신 버전(9.8p1 이상)""이면..

   ""9.8p1""이 같아 보이는데, 어떻게 되는 것일까요?

   예를 들어 데비안은 다음처럼 패치하고 있습니다
   https://security-tracker.debian.org/tracker/source-package/openssh

   https://security-tracker.debian.org/tracker/CVE-2024-6387

   보통 배포판 벤더에서 버전은 9.8p1 이지만 보안 취약점만 패치한 버전을 만들어 둡니다. 그러면 패키지 업데이트 시에 그 버전으로 업데이트 됩니다.

   다행이랄까 그나마 32bit 머신에서는 7~8시간 걸리고 64bit 머신에서는 아직 얼마나 오래걸리는지 확인되지 않았다는군요.

   당장 fix된 버전을 설치하는게 당연히 좋겠지만, 정 어렵다면 fail2ban 같은거라도 설치되어 있다면 도움이 되겠네요.
"
"https://news.hada.io/topic?id=15696","GPT-4o를 사용한 "Ask HN: Who Is Hiring"의 10,000개 이상의 댓글에서 얻은 인사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GPT-4o를 사용한 ""Ask HN: Who Is Hiring""의 10,000개 이상의 댓글에서 얻은 인사이트

     * Hacker News의 ""Ask HN: Who Is Hiring"" 스레드를 통해 현재의 취업 시장과 트렌드를 파악하고자 함
     * Selenium을 사용해 매월 ""ask hn who is hiring {month} {year}""를 구글링하여 스레드 ID를 수집
     * HN-API를 사용해 상위 댓글의 ID를 수집하고, sqlite3 데이터베이스에 저장함
     * GPT-4o를 사용해 댓글을 분류함
     * LangChain의 llm.batch(array) 메서드를 사용해 병렬 처리하여 빠르게 데이터를 처리

    결과

      얼마나 많은 직장이 원격 근무를 허용하는가?

     * 팬데믹 동안 원격 근무를 지원하지 않는 직장은 5분의 1에 불과했음
     * 예상보다 원격 근무 지원 비율이 크게 감소하지 않음

      얼마나 많은 직장이 비자를 후원하는가?

     * 비자 후원 직장의 비율은 지난 2년 동안 비교적 안정적이었음
     * 여전히 비자 후원 직장을 찾는 것은 어려움

      경험 수준 분포는 어떻게 변하는가?

     * 향후 6~12개월 내에 8년 이상의 경력을 쌓는 것이 중요함

      미국 내 주별 직장 수는?

     * Bay Area와 NYC에서 제공되는 직장이 다른 지역보다 훨씬 많음

      어떤 데이터베이스가 사용되는가?

     * PostgreSQL이 다른 데이터베이스를 압도적으로 사용함

      어떤 자바스크립트 프레임워크가 수요가 많은가?

     * React의 수요가 매우 높음
     * 로그 스케일을 사용하지 않고 three.js를 사용해 인터랙티브한 버블 차트를 만듦

      급여 분포는?

     * 급여 분포에 대한 구체적인 내용은 제공되지 않음

    배운 점

     * 모델 필드를 가능한 한 정확하게 설명해야 함
     * 분류 시 설명에 클래스들을 명시해야 함
     * 집합을 추출할 때 구분자를 설명에 명시해야 함

    향후 작업

     * 초기 작업을 바탕으로, 사용자가 ""Ask HN: Who is hiring?"" 스레드에서 찾고 있는 직장을 설명하면, 이를 분류하고 월별로 매칭해주는 미니 SaaS를 구축할 수 있을듯

    GN⁺의 의견

     * 이 글은 데이터 과학과 자연어 처리 기술을 활용해 취업 시장을 분석하는 방법을 잘 보여줌
     * GPT-4o와 LangChain을 사용한 병렬 처리는 대규모 데이터를 빠르게 처리하는 데 유용함
     * 비자 후원 직장을 찾는 것이 어려운 현실을 반영하고 있어, 관련 정보를 찾는 사람들에게 유용할 것임
     * React와 PostgreSQL의 높은 수요는 해당 기술을 배우고자 하는 사람들에게 좋은 참고 자료가 됨
     * 미니 SaaS 아이디어는 실제로 구현된다면 많은 구직자들에게 큰 도움이 될 수 있음

        Hacker News 의견

     * GPT-4o를 사용한 분석이 흥미로움
          + 최근 ""Who is Hiring""과 ""Who wants to be hired"" 데이터셋을 pandas와 spacy로 분석했음
          + LLM이 'go'와 'rust'를 구분하는 것이 유용할 것 같음
          + node.js와 nodejs, react-native와 react native를 통합하지 않는 점이 아쉬움
          + selenium 스크립트를 사용해 구글 검색을 반복하는 이유가 궁금함
          + API를 직접 사용하고 제목을 매칭하는 정규식을 사용하는 스크립트를 공유함
     * 프로젝트의 소스 코드를 GitHub에서 찾을 수 없어서 아쉬움
          + langchain을 처음 접하는데, API가 예상보다 덜 일관적임
          + Ollama로도 가능하지 않을까 궁금함
          + 여러 래퍼(wrapper)들이 복잡하게 얽혀 있어 혼란스러움
          + 초보자를 위한 튜토리얼이 필요함
     * 프로젝트에 시간과 돈을 투자해줘서 감사함
          + ""remote""와 ""in-person""에 대한 추가 통계가 흥미로움
          + in-person 회사들이 반복적으로 구인하는 이유가 성장일 수도 있고, 후보자를 찾기 어려워서일 수도 있음
          + remote 회사들이 사라지는 이유가 필요한 인재를 찾았거나, 사업을 접었을 수도 있음
     * LLM과 전통적인 분석의 훌륭한 조합임
          + LLM이 인간의 뉘앙스, 풍자, 관용구를 이해하는 데 뛰어남
          + ML이 문맥에서 정보를 추출하는 데 탁월함
          + LLM은 실제 숫자 계산에는 신뢰할 수 없음
     * 그래프에서 막대를 쌓는 것은 좋지 않음
          + 두 번째 레이어를 제대로 평가할 수 없기 때문임
          + 각 타임스탬프마다 remote와 non-remote를 나란히 두는 것이 더 나음
     * 로그 스케일을 사용해야 그래프가 이상해 보이지 않음
          + 대신 300줄의 코드로 three.js를 사용해 버블 차트를 만듦
          + 해커는 해커답게 행동함
     * Claude 3 Haiku를 사용해 동일한 분석을 하면 흥미로울 것 같음
          + GPT-4o의 1/40 가격임
          + 결과가 비슷할 것이라는 예감이 있음
     * Indeed나 LinkedIn의 무작위 샘플과 비교하면 흥미로울 것 같음
          + Hacker News는 일반 산업에 비해 편향된 그룹임
     * JS 프레임워크 그래프에 ""React Native""와 ""React-Native"" 버블이 모두 존재함
     * ""Who Wants to be Hired""에 대한 유사한 분석을 보고 싶음
          + 구직에 어려움을 겪는 사람들의 트렌드를 파악할 수 있음
          + 이는 경력 성장을 목표로 하는 사람들에게 도움이 될 수 있음
"
"https://news.hada.io/topic?id=15707","디퓨전 포싱: 넥스트-토큰 예측과 풀-시퀀스 디퓨전의 만남","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    디퓨전 포싱: 넥스트-토큰 예측과 풀-시퀀스 디퓨전의 만남

Diffusion Forcing

  Diffusion Forcing 소개

     * ""Diffusion Forcing""은 ""teacher forcing""과 ""diffusion models""에서 유래한 이름임
     * Diffusion Forcing은 다음 토큰 예측 모델과 전체 시퀀스 확산 모델의 주요 강점을 모두 활용할 수 있음
     * 한 번의 훈련으로 다양한 샘플링 시간에 유연하게 동작할 수 있음

  Diffusion Forcing의 작동 원리

     * 시퀀스 확산을 훈련하되 각 토큰에 다른 노이즈 레벨을 적용함
     * 확산의 노이즈를 다양한 수준의 마스킹으로 볼 수 있음
     * 샘플링 시간에 시퀀스 전반에 걸쳐 다른 노이즈 레벨을 사용하여 유연한 동작을 달성할 수 있음

  비디오 예측

     * Diffusion Forcing을 사용한 비디오 예측은 안정적이고 일관된 결과를 제공함
     * DMLab 및 Minecraft 데이터셋에서 Diffusion Forcing은 기존 방법보다 우수한 성능을 보임

  슬라이딩 윈도우 없이 무한 롤아웃 안정화

     * Diffusion Forcing은 훈련된 최대 시퀀스 길이보다 훨씬 긴 비디오를 롤아웃할 수 있음
     * 슬라이딩 윈도우 없이 RNN을 롤아웃할 수 있음
     * DMLab 및 Minecraft 데이터셋에서 2000 프레임 이상 롤아웃 가능

  Diffusion Planning

     * Diffusion Forcing은 테스트 시 가이던스를 사용하여 플래너로 활용 가능
     * 각 토큰을 [a_t, o_{t+1}]로 정의하여 인과 관계를 명시적으로 모델링함
     * 새로운 관찰이 이루어진 후 후행 추정으로 업데이트 가능

  장기 모방 학습

     * 많은 실제 작업은 마코프 특성이 없으며 장기 메모리가 필요함
     * 로봇 팔이 두 개의 과일 슬롯을 교환하는 작업에서 성공적인 결과를 보임
     * Diffusion Forcing은 테스트 시 보이지 않는 방해 요소에 대해 강건하게 동작할 수 있음

GN⁺의 의견

     * Diffusion Forcing은 다음 토큰 예측 모델과 전체 시퀀스 확산 모델의 장점을 결합하여 유연한 샘플링을 가능하게 함
     * 비디오 예측 및 롤아웃에서 기존 방법보다 우수한 성능을 보이며, 이는 실용적인 응용 가능성을 높임
     * 장기 모방 학습에서의 성공은 Diffusion Forcing의 강력한 피드백 제어 능력을 보여줌
     * Diffusion Forcing의 안정화 효과는 다양한 시퀀스 길이에서의 활용 가능성을 높임
     * 새로운 기술을 채택할 때는 모델의 복잡성과 계산 비용을 고려해야 함

        Hacker News 의견

     * 시퀀스 마스킹 아이디어와 디퓨전 모델을 결합한 새로운 접근법을 제안함
          + 각 픽셀의 '불확실성' 수준을 추적하여 디퓨전 모델의 '노이즈' 수준으로 사용함
          + 이미지의 특정 부분을 먼저 확정할 수 있어 미로 해결 등에 활용 가능함
          + 로봇 팔을 제어하는 데도 사용되었음
          + 제목이 아이디어를 과소평가함; 이는 '분수 마스킹'을 수행하는 방법임
          + 코드베이스에 대한 궁금증이 많음; 미로 추적 작업과 비디오 확장 작업을 어떻게 설정하는지, 로봇 팔을 어떻게 연결하는지 등
          + 아키텍처 자체가 추가 연구와 설명이 필요함
     * 새로운 사전 훈련 없이 기존 텍스트 생성 LLM을 디퓨전 기술과 결합할 수 있는 연구나 도구를 알고 있는지 궁금함
          + Tree of Thoughts와 MCTS 등 유사한 접근법이 있지만, 토큰 수준 생성에 더 가까운 것을 찾고 있음
          + 작은 GPT / Phi 3 / Gwen 모델과 함께 작동할 수 있는지 궁금함
     * Russ가 디퓨전을 연구 중임; 로봇 공학에 매우 적용 가능할 것 같음
     * 해당 분야에서 일하는 사람으로서, 연구가 매우 난해하게 제시되었음
          + 해결하려는 문제가 무엇인지, 새로운 생성 모델을 제안하는 것인지 궁금함
     * 훈련 시간에 대해 놓친 부분이 있는지 궁금함; 토큰당 노이즈를 추가하면 훈련이 크게 느려지는지 궁금함
          + 멋진 논문임
     * 매우 멋진 연구지만, 왜 '디퓨전 포싱'이라고 불리는지 궁금함
"
"https://news.hada.io/topic?id=15619","구글 크롬, 브라우저 내에 Gemini Nano AI 모델 `window.ai` 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            구글 크롬, 브라우저 내에 Gemini Nano AI 모델 `window.ai` 추가

     * 크롬 127 버전부터 window.ai 를 통해서 Gemini Nano AI 모델을 브라우저에서 사용가능하게 제공
     * 챗봇 데모 사이트는 Next.js + Vercel AI SDK를 이용하여 작성되었음
     * 사용 예제

import { streamText } from ""ai"";
import { chromeai } from ""chrome-ai"";

const { textStream } = await streamText({
  model: chromeai(),
  prompt: ""what is a large language model?"",
});

   https://huggingface.co/wave-on-discord/gemini-nano
   참고로 모델 파일은 얼마전에 추출되었습니다.

   https://developer.chrome.com/docs/ai/built-in
   사용해 보려면 별도 신청이 필요하네요.

   https://github.com/explainers-by-googlers/prompt-api

        Hacker News 의견

     * Apple의 AI 전략을 웹 사용자에게도 적용할 수 있는 기능을 브라우저에 기본 탑재하는 것은 긍정적임
          + 로컬 모델을 사용하여 프라이버시와 보안을 강화할 수 있음
          + Google이 이를 잘 구현하면 매우 흥미로울 것임
     * Vercel이 window.ai를 발표하면서 Chrome API 대신 자체 추상화를 보여줌
          + window.ai API는 매우 간단하여 래퍼가 필요하지 않음
          + 예제 코드:
const model = await window.ai.createTextSession();
const result = await model.prompt(""What do you think is the meaning of life?"");

     * Google의 API에 모델을 지정할 수 없는 것은 큰 결함임
          + 모델이 계속 업그레이드되면 테스트와 유지보수가 어려울 것임
          + 제안된 코드:
const supportedModels = await window.ai.getSupportedModels();
if (supportedModels.includes(""gemini-nano:0.4"")) {
  const model = await window.ai.createTextSession(""gemini-nano:0.4"");
  // ...
}

     * 웹사이트가 사용자 CPU를 분산 LLM 처리에 사용하는 것은 문제임
     * window.ai API에 대한 공개 문서가 부족함
          + Gemini Nano 모델이 어떤 버전인지 명확하지 않음
     * 현재의 기술로는 instruct 모델이 base 모델보다 덜 유용함
          + LoRAs 실행, 온도 조절, 프롬프트 템플릿 설정 등의 기능이 필요함
          + 기술이 빠르게 변화하고 있어 브라우저에 통합하기에는 시기상조일 수 있음
          + 모델을 인터페이스와 분리하여 다른 로컬 모델도 사용할 수 있게 해야 함
     * 표준화가 부족함
          + Microsoft의 WebNN과 같은 접근이 필요함
          + Apple의 Metal을 WebGPU로 노출하려는 시도처럼 다른 벤더들이 이를 실현해야 함
     * Chrome의 ""Create theme with AI"" 기능이 랜덤 테마 선택과 차이가 없음
          + pixabay에서 랜덤 이미지를 반환하는 API를 만들 계획임
     * 일반 목적의 모델은 크기가 클수록 더 유용함
          + 특정 작업에 맞게 미세 조정된 온디바이스 모델이 더 정확함
     * eval(window.ai(""js code to remove all adds in the following page"" + document.documentElement.outerHTML))
"
"https://news.hada.io/topic?id=15608","ETH 취리히 연구진, 최속 흐름 알고리듬 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ETH 취리히 연구진, 최속 흐름 알고리듬 개발

    컴퓨터 및 정보 기술 연구

     * ETH Zurich의 연구원들이 네트워크 흐름 알고리듬을 개발함
     * 이 알고리듬은 모든 종류의 네트워크에서 최대 교통 흐름을 최소 비용으로 계산함
     * 이 알고리듬은 이론적으로 가능한 가장 빠른 속도로 계산을 수행함

    혁신적인 알고리듬의 개발

     * Rasmus Kyng과 그의 팀이 개발한 이 알고리듬은 네트워크 흐름 문제를 해결하는 데 있어 획기적인 성과를 이룸
     * 이 알고리듬은 유럽 교통 네트워크와 같은 복잡한 네트워크에서도 최적의 교통 흐름을 계산할 수 있음
     * 이전에는 네트워크 데이터 처리보다 최적의 흐름을 계산하는 데 더 많은 시간이 걸렸으나, Kyng의 알고리듬은 이 문제를 해결함

    네트워크 크기와 계산 시간의 동시 증가

     * Kyng의 접근 방식은 네트워크 크기와 계산 시간이 동일한 비율로 증가하도록 함
     * 2000년대 초반까지는 m1.5의 속도로 계산되었으나, Kyng의 알고리듬은 추가 계산 시간을 거의 무시할 수 있을 정도로 빠름

    거의 선형 시간 알고리듬

     * Kyng의 팀은 고정된 네트워크뿐만 아니라 동적으로 변화하는 네트워크에서도 최적의 흐름을 계산할 수 있는 알고리듬을 개발함
     * 이 알고리듬은 분자나 뇌와 같은 매우 복잡하고 데이터가 많은 네트워크에서도 유용함

    변화하는 네트워크를 위한 번개 같은 알고리듬

     * Simon Meierhans는 변화하는 네트워크에서 최소 비용 최대 흐름 문제를 해결하는 새로운 알고리듬을 발표함
     * 이 알고리듬은 새로운 연결이 추가되거나 제거되는 네트워크에서도 최적의 경로를 계산할 수 있음

    Kyng의 접근 방식의 혁신성

     * Kyng의 접근 방식은 많은 작은 효율적이고 저비용의 계산 단계를 결합하여 더 빠른 계산을 가능하게 함
     * 이 접근 방식은 철도 네트워크와 전력망의 장점을 결합하여 새로운 방법을 창출함

    이론적 컴퓨터 과학의 전환점

     * Kyng의 연구는 새로운 수학적 도구를 사용하여 알고리듬을 더욱 빠르게 만듦
     * 이러한 도구는 네트워크 데이터 구조를 조직화하여 네트워크 연결의 변화를 빠르게 식별할 수 있게 함

    GN⁺의 의견

     * Kyng의 알고리듬은 이론적 컴퓨터 과학에서 중요한 진전을 이룬 것으로 평가됨
     * 이 알고리듬은 매우 큰 문제를 효율적으로 해결할 수 있는 기반을 마련함
     * 변화하는 네트워크에서의 빠른 계산은 실시간 데이터 처리와 같은 다양한 응용 분야에서 유용할 것임
     * 유사한 기능을 가진 다른 프로젝트로는 Google의 PageRank 알고리듬이 있음
     * 새로운 기술을 채택할 때는 기존 시스템과의 호환성 및 유지 보수 비용을 고려해야 함
"
"https://news.hada.io/topic?id=15617","SmoothMQ - SQLite 기반의 Drop-in SQS 대체 솔루션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                SmoothMQ - SQLite 기반의 Drop-in SQS 대체 솔루션

     * SQS를 그대로 대체 가능한 Drop-In 서비스로, 개발자 경험을 크게 향상시킴
     * 기능적 UI, 가시성, 추적, 메시지 스케줄링, 속도 제한 기능을 제공함
     * 모든 클라우드에서 개인 SQS 인스턴스를 실행할 수 있음
     * 단일 go 바이너리로 배포되며, 기존 SQS 클라이언트에서 사용 가능함
     * UI는 :3000에서, SQS 호환 서버는 :3001에서 실행됨
     * 모든 언어의 SQS 클라이언트와 호환
          + Python
               o
import boto3
# endpoint_url만 변경하면 됨
sqs = boto3.client(""sqs"", ..., endpoint_url=""http://localhost:3001"";)
sqs.send_message(QueueUrl=""..."", MessageBody=""hello world"")

               o Celery와도 원활하게 작동함
               o
app = Celery(""tasks"", broker_url=""sqs://...@localhost:3001"";)

GN⁺의 의견

     * SmoothMQ는 SQS의 기능을 확장하여 개발자에게 더 나은 경험을 제공함
     * 클라우드에 종속되지 않고 개인 인스턴스를 실행할 수 있어 유연성이 높음
     * 기존 SQS 클라이언트를 그대로 사용할 수 있어 전환 비용이 적음
     * UI를 통해 큐와 메시지를 쉽게 관리할 수 있어 운영 효율성이 높음
     * 새로운 기술 도입 시 기존 시스템과의 호환성을 충분히 고려해야 함

   Sqlite, postgres는 10년 뒤에도 쓰일듯 하네요. Redis도 그럴 것 같았는데, 요즘은 모르겠고요.

   요즘은 레디스 대신 어떤걸 쓰나요?

        Hacker News 의견

     * k8s, kubernetes, cloud native, self-hosted, edge-enabled 기술을 저렴하게 사용할 수 있는 아이디어가 훌륭함
          + rq와 minio를 k8s에서 몇 년간 사용했으며, 최근에는 SQLite를 대체제로 주목하고 있음
          + 개인 클라우드의 중요성을 강조하며, 공공 클라우드에서 많은 것을 처리하는 것이 적절하지 않다고 생각함
          + BTLE 센서가 Apple Watch와 직접 통신하는 것이 충분히 가능함
          + 클라우드를 거치는 것이 이득이 아니었으며, 차세대 도구에서는 이를 수정해야 한다고 주장함
     * SQLite는 단일 서버에서 실행되며, 대부분의 경우에는 작동하지만 100% 신뢰할 수는 없음을 지적함
          + 큐 서버가 충돌할 경우 SQS는 계속 작동할 가능성이 높음
          + 최상의 경우에는 작동할 수 있지만, SQS만큼의 신뢰성을 제공하지는 않을 것임
     * 규모와 벤치마크를 제외하고, SQS를 사용하는 기능/단위 테스트 모듈에 유용한 도구임
     * 호스팅된 큐 시스템을 목표로 하며, SQS보다 저렴하면서도 성능을 희생하지 않는 것을 목표로 함
          + Backblaze와 Minio가 S3 공간에서 성공한 것처럼 큐 시스템에서도 성공을 목표로 함
     * AWS API 호환 서비스를 작성하는 것을 좋아하며, Dyna53 프로젝트를 언급함
     * LocalStack을 사용하면 SQS와 많은 AWS 서비스를 테스트/개발에 사용할 수 있으며, 문서화가 잘 되어 있고 오픈 소스임
     * 인기 있는 서비스에 대한 간단한 자체 호스팅 대안을 만드는 프로젝트를 좋아함
          + Litestream과 큰 문제 없이 작동할 것으로 예상되며, 백엔드 스토리지 조정 없이 일시적인 큐 시스템으로 훌륭할 것임
     * 프로젝트 구조에 대한 빠른 제안:
          + models/ 디렉토리에서 모든 구조체를 루트 디렉토리로 이동할 것을 제안함
          + 이를 통해 패키지 사용자가 q.Message와 q.Queue 같은 짧고 깔끔한 이름을 사용할 수 있으며, 사용자가 자체 ""models"" 패키지를 가지고 있을 경우의 이름 충돌을 피할 수 있음
     * ElasticMQ를 언급하며, Docker 환경에서 SQS를 시뮬레이션하는 데 사용함
     * 외래 키 지원을 비활성화하고 데이터베이스 스키마에서 여전히 사용하는 이유에 대해 질문함
          + ""TODO: check for errors"" 주석과 외래 키 제약 조건 검사를 비활성화하는 것처럼 보이는 부분이 시도해보는 것을 주저하게 만듦
"
"https://news.hada.io/topic?id=15703","Jaccard 유사도와 MinHash를 이용한 유사 중복 탐지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Jaccard 유사도와 MinHash를 이용한 유사 중복 탐지

    유사 문서 찾기: Jaccard 유사도와 MinHash

     * 문제 정의
          + 대규모 문서 컬렉션에서 유사한 문서를 식별하는 방법에 대해 논의함
          + 예를 들어, 웹 크롤링을 통해 동일한 페이지를 여러 번 가져왔을 때 메타데이터의 약간의 차이 또는 작은 편집 후의 여러 버전을 가질 수 있음
          + 이 글에서는 Jaccard 유사도와 MinHash를 사용한 근사 중복 제거 방법을 탐구함

    유사도

     * 유사도 정의
          + 두 문서 간의 유사도를 정의하고, 유사도 값이 특정 임계값 이상인 쌍을 찾는 방법
          + 유사도 함수 S:U×U→[0,1]을 정의하고, S(A,B)≥S_crit인 경우 두 문서를 근사 중복으로 간주함

    Jaccard 유사도

     * Jaccard 유사도
          + 두 유한 집합의 유사도를 그들의 교집합과 합집합의 비율로 나타내는 함수
          + J(A,B)=∣A∩B∣/∣A∪B∣
          + 두 집합이 유사할수록 대부분 동일한 요소를 가짐

    Jaccard 유사도 확장

     * 확장 방법
          + 문서를 특징 집합으로 변환하고, 높은 Jaccard 유사도를 가진 집합을 검색함
          + 작은 코퍼스에서는 직접 적용 가능하지만, 큰 코퍼스에서는 비효율적임

    Jaccard 유사도 근사

     * MinHash 서명
          + Jaccard 유사도를 근사하기 위해 샘플링을 사용
          + 각 문서에 대해 고정 크기의 서명을 사전 계산하여 효율적으로 유사도를 추정함

    더 많은 해시 함수 사용

     * 다중 해시 함수
          + 여러 해시 함수를 사용하여 각 문서를 k-요소 벡터로 요약
          + 두 서명 간의 일치하는 해시 수를 세어 Jaccard 유사도를 근사함

    모든 문서 비교

     * 문서 그룹화
          + 문서를 그룹화하여 유사한 문서만 비교
          + MinHash 값을 그룹화 키로 사용하여 효율적으로 근사 중복을 찾음

    더 유연한 중복 탐지

     * 다중 키 사용
          + 여러 키를 사용하여 문서를 여러 버킷에 배치하고, 각 버킷 내에서 비교
          + 더 낮은 유사도 값에서도 중복을 탐지할 수 있음

    결론

     * 결론
          + MinHash와 같은 알고리즘을 통해 효율적으로 유사 문서를 찾을 수 있음
          + 이 글이 더 많은 엔지니어들에게 이러한 알고리즘을 소개하고 이해를 돕기를 바람

    부록: 문서를 집합으로 표현

     * n-그램
          + 문서를 n-그램으로 표현하여 비교
          + n 값에 따라 비교의 정밀도가 달라짐
     * 단어 분할
          + 문서를 단어 또는 토큰으로 분할하여 특징으로 사용
          + 더 정교한 토크나이저를 사용할 수도 있음

    GN⁺의 의견

     * 유사 문서 탐지의 중요성
          + 대규모 데이터셋에서 중복을 제거하는 것은 데이터 품질을 높이고 저장 공간을 절약하는 데 중요함
          + 특히 웹 크롤링이나 데이터 수집 과정에서 필수적임
     * MinHash의 장점
          + MinHash는 효율적이고 확장 가능한 방식으로 유사 문서를 탐지할 수 있음
          + 기존의 해시 기반 중복 제거 방법보다 더 유연함
     * 다른 유사한 기술
          + HyperLogLog와 같은 다른 스케치 알고리즘도 유사한 문제를 해결하는 데 사용될 수 있음
          + 두 알고리즘을 결합하여 더 강력한 솔루션을 만들 수 있음
     * 실제 적용 시 고려사항
          + 해시 함수 선택의 중요성: 해시 함수의 선택이 결과의 정확도에 큰 영향을 미침
          + 성능과 정확도 간의 균형: 더 많은 해시 함수를 사용할수록 정확도가 높아지지만, 성능 비용이 증가함
     * 추천 기술
          + Spark의 MinHashLSH 구현과 같은 도구를 사용하여 쉽게 적용 가능
          + 대규모 데이터셋에서의 효율적인 중복 제거를 위해 이러한 기술을 적극 활용할 것을 권장함

        Hacker News 의견

     * Jaccard 유사도와 F1 점수는 퍼지 집합에서도 동일하게 사용할 수 있음
          + 퍼지 집합에서는 적절한 T-Norm/T-Conorm 쌍을 선택해야 함
          + 이 방법은 의료 이미지 분할 검증에 유용함
          + 대부분의 사람들은 0.5로 임계값을 설정해 이진 집합을 사용함
          + 이는 검증 연산자의 정밀도를 크게 감소시킴
     * Python으로 프랑스 정부 데이터베이스의 중복 제거를 구현한 경험이 있음
          + 현재는 datasketch를 추천함
          + rensa라는 새로운 도구도 있음
          + rensa는 Rust로 작성된 더 빠른 버전임
     * Google 초기에 중복 제거를 위해 개발된 기술임
          + Jeffrey Ullman의 ""Mining Massive Datasets""에서 자세히 설명됨
          + 이 기술은 AltaVista에서 처음 개발됨
     * Minhash 시스템을 구현한 경험이 있음
          + 큰 행렬의 부분 행렬의 (유사) 역행렬을 찾는 문제를 해결함
          + Minhashing을 사용해 유사한 행렬을 찾음
          + 다중 해상도 해시를 사용해 검색 선택성을 조정함
     * Minhash와 그 변형을 이해하기 어려워 시각화 도구를 개발 중임
          + Jaccard 유사도 계산을 포함할 예정임
     * 코드 예제를 통해 기술을 이해하는 것이 더 쉬움
          + Google의 Douglas Eck로부터 이 기술을 배움
          + 노래 클러스터링에 사용됨
     * NVIDIA 팀이 GPU 가속 퍼지 중복 제거 알고리즘을 출시함
          + GitHub 저장소와 문서 제공
          + Python 예제도 포함됨
     * 해싱 또는 작은 신경망과 벡터 검색 엔진을 결합한 중복 제거 전략이 일반적임
          + Google의 RETSim 모델과 USearch 엔진 프로젝트가 있음
     * 저자에게 오타를 지적함
          + S(A,B) 대신 S(A,C)여야 함
     * Postgres에서 유사한 뉴스 항목을 하나로 줄이는 문제를 해결 중임
          + 600,000개의 피드 항목이 있음
          + 내용과 요약이 매우 유사함
"
"https://news.hada.io/topic?id=15674","Show HN: Jupyter Notebooks에 Mistral Codestral 및 GPT-4o 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show HN: Jupyter Notebooks에 Mistral Codestral 및 GPT-4o 추가

    Pretzel 🥨 현대적이고 오픈 소스인 Jupyter 대안

   Pretzel은 Jupyter의 기능을 개선하기 위해 만들어진 Jupyter의 포크임. AI 코드 생성 및 편집, 인라인 탭 완성, 사이드바 채팅 및 오류 수정 기능을 추가함. Jupyter에서 Pretzel로 전환하는 것은 매우 쉬움. 모든 Jupyter 설정, 키 바인딩 및 확장 기능이 그대로 작동함.

  빠른 시작

     * 설치: pip install pretzelai 후 pretzel lab을 실행하여 웹 인터페이스를 열 수 있음. 또는 무료 호스팅 버전 사용 가능: pretzelai.app
     * 셀에서 타이핑을 시작하면 인라인 탭 완성 기능 사용 가능
     * Jupyter 셀에서 ""Ask AI"" 클릭 또는 Cmd+K (Mac) / Ctrl+K (Linux/Windows) 눌러 AI 프롬프트 열기
     * Ctrl+Cmd+B (Mac) 또는 Ctrl+Alt+B (Linux/Windows)로 AI 사이드바 활성화하여 AI와 채팅, 코드 생성 및 질문 가능
     * OpenAI API 키 사용 설정은 설정 섹션 참조

  설치

     * pip을 사용하여 Pretzel 설치: pip install pretzelai
     * conda 사용 시, 먼저 pip 설치 후 Pretzel 설치: conda install pip 후 pip install pretzelai
     * Pretzel 시작: pretzel lab

  사용법

      인라인 탭 완성

     * 셀에서 타이핑을 시작하면 Mistral의 Codestral을 사용하여 인라인 탭 완성 기능 사용 가능
     * 1초 기다리면 완성 기능이 트리거됨

      노트북 셀에서 코드 생성 및 편집

     * 셀에서 Cmd+K (Mac) / Ctrl+K (Windows/Linux) 또는 ""Ask AI"" 클릭하여 AI 프롬프트 텍스트 박스 열기
     * @variable을 언급하여 메모리에 있는 변수 및 데이터프레임 참조 가능
     * 기존 코드가 있는 경우 프롬프트가 기존 코드를 편집함
     * 셀에서 일부 코드를 선택/강조하면 선택된 코드만 편집됨
     * 응답을 수락/거부하거나 프롬프트를 수정하여 재제출 가능
     * ↑ / ↓로 프롬프트 히스토리 순환 가능

      AI 사이드바 사용

     * Ctrl+Cmd+B (Mac) / Ctrl+Alt+B (Linux/Windows) 또는 오른쪽 사이드바의 Pretzel 아이콘으로 AI 사이드바 활성화
     * 질문, 코드 생성 또는 기존 코드 검색 가능
     * AI는 항상 활성 셀의 코드를 컨텍스트로 사용함. 활성 셀의 일부 코드를 강조하면 강조된 코드만 컨텍스트로 사용됨

   예시 사용법:
     * ""Modify the function my_function in @notebook to be more efficient"" ← 노트북 전체에서 my_function 함수를 검색하고 수정함
     * ""Where is the code in @notebook that removes outliers""? ← 노트북 전체에서 이상치를 제거하는 코드를 검색함
     * ""Can you explain what this code does?"" ← 현재 셀의 코드를 설명함

      기존 코드 중간에 코드 추가

     * 커서를 빈 줄이나 기존 코드 줄에 놓고 Cmd+K로 AI 프롬프트 텍스트 박스 열기
     * 프롬프트를 inject 또는 ij로 시작하면 AI가 기존 코드를 편집하지 않고 새로운 코드를 추가함
     * 코드는 커서가 놓인 줄 아래 한 줄에 추가됨

      AI로 오류 수정

     * 오류가 발생하면 오른쪽 상단에 ""Fix Error with AI"" 버튼이 나타남. 클릭하여 오류 수정 시도 가능

  설정

     * Pretzel은 기본적으로 설정 없이 작동함
     * Pretzel은 기본적으로 무료 AI 서버를 사용함. OpenAI/Azure API 키를 사용하도록 설정 가능

   OpenAI 지원
     * 상단 메뉴바의 Settings 메뉴 열기, Settings Editor 클릭
     * Pretzel 검색 후 왼쪽 바에서 Pretzel AI Settings 선택
     * AI Service 드롭다운에서 OpenAI API Key 선택 후 OpenAI Settings > API Key에 API 키 입력
     * OpenAI Enterprise를 사용하는 경우, OpenAI 호출을 위한 기본 URL도 입력 가능
     * 기본 모델은 GPT-4o이며, OpenAI Model 드롭다운에서 변경 가능

   Azure 지원
     * OpenAI 설정과 동일하게 AI Service 드롭다운에서 Use Azure API 선택 후 Azure 호스팅 모델 사용 가능

  피드백, 버그 및 문서

     * 버그 보고: https://github.com/pretzelai/pretzelai/issues
     * 피드백 및 불만 사항: founders@withpretzel.com

  Jupyter 관련 정보

     * 원래 Jupyter 문서는 여기에서 확인 가능하며, Jupyterlab README는 여기에서 확인 가능함

  개인정보 보호정책, 데이터 수집 및 보유

     * 개인 정보를 수집하지 않음. AI 기능에 대한 기본 텔레메트리만 사용함
     * 쿠키를 허용하면 여러 브라우저 세션에서 동일한 사용자로 인식 가능
     * AI 기능을 위한 프롬프트만 수집하며, 응답은 수집하지 않음. 설정에서 프롬프트 텔레메트리 비활성화 가능
     * 코드는 전혀 수집하지 않음. Pretzel의 클라우드 AI 서버를 사용하더라도 코드는 저장되지 않음
     * Pretzel의 호스팅 버전을 사용하는 경우, 이메일 주소를 기반으로 사용자 계정을 생성함. 언제든지 로그인하여 저장된 데이터를 삭제 가능
     * 호스팅 서버는 무료로 사용 가능하지만, 마지막 로그인 후 30일 후에 데이터와 계정을 삭제함. 계정을 즉시 삭제하려면 founders@withpretzel.com으로 ""Account Deletion"" 제목의 이메일을 보내면 됨

  FAQ

   Q. 이전 버전의 Pretzel AI는 어떻게 되었나요? A. pretzelai_visual 폴더에서 확인 가능. 자세한 내용은 이 PR 참조

   Q. Pretzel은 어떤 AI 모델을 사용하나요? A. Pretzel은 다양한 작업에 대해 다른 AI 모델을 사용함:
    1. 기본 모델: GPT-4o
          + 속도와 품질의 균형이 좋음
          + 자체 API 키를 사용하는 경우 Pretzel 설정에서 변경 가능
    2. 인라인 완성: Mistral의 Codestral 모델
          + 코드 완성에 탁월함
          + 매우 빠른 성능 (22B 파라미터 모델)
    3. 대체 옵션:
          + 자체 API 키를 사용하면서 Mistral API 키를 제공하지 않는 경우, Pretzel은 인라인 완성에도 GPT-4o를 사용함

   Q. 기능 X는 어떻게 되나요? A. 만들고 싶은 기능이 많음. 원하는 기능을 알려주시면 이슈를 열어주세요

   Q. 로드맵은 어디에 있나요? A. README 상단에 대략적인 로드맵이 있음. 많은 기능을 만들고 싶지만, 현재 두 명이서 작업 중임. 피드백을 수집하여 우선순위를 정할 예정. 이슈를 열거나 이메일로 피드백을 보내주세요

   Q. 왜 AGPL 라이선스를 사용하나요? MIT/BSD3 라이선스를 사용하지 않는 이유는 무엇인가요? A. Pretzel을 만드는 목표는 개인과 회사 모두 무료로 사용할 수 있는 훌륭한 데이터 도구를 만드는 것임. AGPLv3 라이선스를 사용하여 제3자가 코드를 가져가서 커뮤니티에 기여하지 않고 판매하는 것을 방지함

   Q. 왜 Jupyter의 포크를 선택했나요? Jupyter에 직접 기여하지 않는 이유는 무엇인가요? A. 새로운 도구로 전환하는 것이 어렵다는 것을 깨달았음. Jupyter의 포크를 통해 전환 비용을 최소화함. Jupyter는 성숙한 제품이며, 빠르게 기능을 추가할 수 있음

   Q. AGPLv3 라이선스 도구 사용에 대해 회사가 걱정하는 경우 어떻게 해야 하나요? A. AGPL은 Pretzel을 수정하고 공개적으로 재배포하는 경우에만 장벽이 됨. 회사 내부에서 도구로 사용하는 경우 AGPL은 코드를 공유하라고 요구하지 않음. AGPL이 문제인 경우, 연락 주시면 해결책을 찾을 수 있음

   Q. 어떻게 돈을 벌 계획인가요? 무료로 제공하는 이유는 무엇인가요? A. 회사에 호스팅 버전을 판매하여 수익을 창출할 계획. 호스팅 버전은 데이터 접근 제어, 데이터 소스 연결, GitHub 통합, 공유 가능한 대시보드 등 회사에 필요한 기능을 포함할 예정. 개인용 버전은 유료로 전환하지 않을 것임

  GN⁺의 의견

     * Pretzel은 Jupyter의 기능을 확장하여 데이터 과학자와 엔지니어에게 더 나은 도구를 제공함. AI 기반 코드 생성 및 편집 기능은 생산성을 크게 향상시킬 수 있음
     * Jupyter와의 호환성을 유지하면서 새로운 기능을 추가한 점이 인상적임. 전환 비용이 거의 없다는 점에서 사용자에게 큰 장점이 됨
     * AGPL 라이선스를 사용하여 커뮤니티에 기여하도록 유도하는 점이 긍정적임. 그러나 일부 기업에서는 라이선스 문제로 인해 도입을 꺼릴 수 있음
     * Pretzel의 AI 기능은 코드 작성과 디버깅을 더 쉽게 만들어 주지만, AI 모델의 성능과 정확성에 따라 결과가 달라질 수 있음. AI 모델의 지속적인 개선이 필요함
     * Pretzel과 유사한 기능을 제공하는 도구로는 Google Colab, VSCode의 Jupyter 확장 등이 있음. 각 도구의 장단점을 비교하여 선택하는 것이 중요함
"
"https://news.hada.io/topic?id=15708","Property-Based 테스트 라이브러리의 암울한 현황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Property-Based 테스트 라이브러리의 암울한 현황

     * 속성 기반 테스트는 30년 이내에 주류로 자리 잡은 드문 학술 연구의 예임.
     * ""테스트를 작성하지 말고 생성하라""는 슬로건 아래 다양한 프로그래밍 언어 커뮤니티에서 지지를 얻음.
     * 원래 Haskell 라이브러리인 QuickCheck의 Wikipedia 페이지에는 다른 언어로 57개의 재구현이 나열되어 있음.

  속성 기반 테스트 라이브러리 조사

     * 현재 가장 많이 사용되는 속성 기반 테스트 라이브러리들을 조사하여 15년 전(2009년)의 최첨단 기술과 비교함.
     * 대부분의 라이브러리가 가장 진보된 속성 기반 테스트 기능을 제공하지 않음.

  왜 속성 기반 테스트 라이브러리가 이런 슬픈 상태에 있는가?

    상태 기반 및 병렬 테스트는 순수 테스트만큼 유용하지 않음

     * 상태 기반 모델링은 훈련이 필요함.
     * 폐쇄 소스가 산업 채택을 돕는다는 주장.

    상태 기반 모델링은 훈련이 필요함

     * 상태 기반 및 병렬 테스트는 일반적인 테스트와 다른 사고방식을 요구함.
     * 새로운 사용자에게 이러한 도구를 제공할 때 적절한 훈련이 필요함.

    폐쇄 소스가 산업 채택을 돕는다는 주장

     * 오픈 소스가 작동하지 않았고, 폐쇄 소스 제품과 관련 서비스가 채택을 돕는다는 주장.

  우리가 할 수 있는 일

     * 상태 기반 및 병렬 속성 기반 테스트의 짧은 오픈 소스 구현 제공.
     * 개발자 훈련을 덜 필요로 하도록 형식 사양 부분을 더 쉽게 만들기.

  순수 속성 기반 테스트 요약

     * 새로운 함수나 기능을 테스트하는 것이 좋은 관행으로 간주됨.
     * 예를 들어, 연결 리스트 역순 함수 reverse를 작성한 경우 빈 리스트와 같은 몇 가지 리스트에 대해 테스트하는 것이 합리적임.
     * 무작위 입력을 생성하는 것이 속성 기반 테스트의 주요 기능임.
     * 무작위 입력이 코너 케이스를 결국 찾을 것이라는 아이디어.

  상태 기반 속성 테스트

     * 상태 기반 구성 요소를 테스트할 때 동일한 입력이 동일한 출력을 제공하지 않음.
     * 상태 기반 테스트에서는 입력 시퀀스를 생성하여 시스템이 시간이 지남에 따라 어떻게 변하는지 테스트함.
     * 메모리 내 참조 구현(모형)을 사용하여 상태를 명시적으로 설명함.

    예: 카운터

     * 글로벌 가변 변수를 사용하여 카운터를 구현.
     * 모델은 정수로 표현됨.
     * 테스트는 명령 시퀀스를 생성하고 실행하여 실제 출력과 모델 출력을 비교함.

  병렬 속성 기반 테스트

     * 병렬 테스트는 상태 기반 테스트 모델을 재사용하여 경합 조건을 감지함.
     * 병렬 테스트는 순차 상태 머신 모델을 사용하여 선형화 가능성을 통해 병렬 테스트를 수행함.

  결론 및 향후 작업

     * 속성 기반 테스트의 상태를 개선하기 위해 오픈 소스 구현을 제공하고 형식 사양을 더 쉽게 만드는 것이 필요함.

GN⁺의 의견

     * 이 글은 속성 기반 테스트의 역사와 현재 상태를 잘 설명하고 있음.
     * 상태 기반 및 병렬 테스트의 중요성을 강조하며, 오픈 소스 구현의 필요성을 제기함.
     * 속성 기반 테스트를 더 쉽게 접근할 수 있도록 하는 방법을 제안함.
     * 비슷한 기능을 가진 다른 프로젝트로는 Hypothesis(Python)와 PropEr(Erlang)이 있음.
     * 새로운 기술이나 오픈 소스를 채택할 때는 훈련과 지원이 필요함을 강조함.

        Hacker News 의견

     * clojure.spec.alpha와 test.check를 사용한 경험이 좋았음
          + Python의 hypothesis는 큰 데이터 세트를 처리하지 못해 사용 중단함
     * Go 언어의 커버리지 기반 퍼징이 잘 지원됨
          + 퍼징 테스트와 불변성 검사를 통해 속성 테스트와 유사한 결과를 얻을 수 있음
     * 연구 논문이 오픈 소스 도구로 재현 가능해야 한다는 요구는 유용한 정보를 잃게 할 수 있음
     * Rust의 proptest를 사용해 상태 기반 속성 테스트를 자주 작성함
          + 병렬 테스트는 때때로 유용하지만, 여러 테스트를 병렬로 실행하는 것이 더 쉬울 수 있음
     * Quviq QuickCheck 논문을 읽었으나, 상태 기반 테스트를 직접 작성하는 것이 더 나을 수 있음
          + StateModel은 추가적인 프레임워크 코드가 필요해 효율적이지 않음
     * 상태 기계와 병렬 측면 외에도 커버리지 기반 속성 테스트가 더 큰 영향을 미칠 수 있음
          + 자동 축소 기능을 유지하면서 값 생성 시 모든 불변성을 유지하는 것이 중요함
          + Hypothesis의 ""내부 축소"" 접근 방식이 가장 효과적임
     * Clojure에도 상태 기반 QuickCheck 라이브러리가 있음
          + 병렬 테스트는 아직 큰 문제가 되지 않음
     * 속성 기반 테스트는 엄격한 테스트를 작성할 수 있는 경우 타입 시스템에 통합하는 것이 더 나음
          + 단순한 ""스모크 테스트""는 임의의 입력을 사용하는 것이 더 쉬움
     * QuviQ Erlang QuickCheck의 무료 버전인 QuickCheck Mini도 있음
     * JavaScript에서 속성 기반 테스트 라이브러리를 사용해 특정 조건을 만족하지 않는 임의의 값을 생성할 수 있는지 궁금함
"
"https://news.hada.io/topic?id=15643","Postzegelcode - 손으로 쓰는 우표 대체코드 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Postzegelcode - 손으로 쓰는 우표 대체코드

     * Postzegelcode는 네덜란드에서 사용되는 손으로 작성하는 우편 요금 지불 방법
     * PostNL에서 온라인으로 구매할 수 있으며, 우표 대신 우편물에 직접 작성하여 5일 이내에 사용 가능함
     * 네덜란드 내 우편물의 경우 3x3 그리드로 작성되며, 국제 우편물의 경우 P, N, L이 추가된 네 번째 행이 있음
     * 2013년에 시작되었으며, 초기에는 추가 처리 시스템이 필요하여 우표보다 비쌌으나, 이후 가격이 동일하게 조정됨
     * 2020년 12월에는 590,000명이 postzegelcode를 사용하여 카드를 보냈음

안전성

     * 코드가 5일 동안만 유효하기 때문에 최근에 구매한 코드를 추측할 가능성은 매우 낮음
     * 26개의 문자와 9개의 숫자(0은 문자 O와 혼동을 피하기 위해 사용되지 않음)를 사용하여 78.8조 가지의 가능성이 있음
     * 네덜란드의 모든 우편물에 postzegelcode를 사용하더라도, 지난 5일 동안 판매된 코드와 일치할 확률은 약 200만 분의 1임

GN⁺의 의견

     * Postzegelcode는 디지털 시대에 맞춘 혁신적인 우편 요금 지불 방법으로, 편리성과 효율성을 제공함
     * 코드의 유효 기간이 짧아 보안성이 높으며, 우표를 구매하고 붙이는 번거로움을 줄여줌
     * 그러나 인터넷 접근이 어려운 사람들에게는 불편할 수 있으며, 기술적인 문제로 인해 코드가 인식되지 않을 가능성도 있음
     * 비슷한 기능을 제공하는 다른 시스템으로는 QR 코드 기반의 우편 요금 지불 방법이 있음

        Hacker News 의견

     * 독일에서도 #PORTO와 코드 시스템이 있음
          + 링크: Deutsche Post
          + 구매 후 3년간 유효함
          + 자주 우편을 보내지 않는 사람들에게 유용함
          + 온라인 결제 후 봉투에 코드만 적으면 됨
          + 간편함이 마음에 듦
     * 이 시스템은 프로그래밍 인터뷰 질문으로도 좋을 것 같음
          + ""두 개의 엔드포인트를 가진 서비스를 설계하라. 하나는 postzegelcode를 생성하고, 다른 하나는 이를 사용함. postzegelcode는 9자리 대소문자 구분 없는 영숫자 코드로, 3x3 그리드에 표시됨. 발행 후 5일간 유효하며, 한 번만 사용 가능함. 인증과 결제는 범위에 포함되지 않음.""
     * 미국인들도 USPS에 이 시스템 도입을 청원해야 함
          + Pitney Bowes 프린터나 Endicia에서 인쇄할 필요가 없어 편리함
          + 작은 데스크탑 레이저 조각기가 종이에 불을 붙이지 않고 인쇄할 수 있는지 궁금함
     * 코드를 다른 사람과 공유하면 어떻게 되는지 궁금함
          + 동일한 코드가 있는 여러 편지가 우편함에 있을 때 발생하는 문제
     * 26개의 문자와 9개의 숫자(0은 O와 혼동을 피하기 위해 사용하지 않음)를 가정함
          + 하지만 G와 6, B와 8 등 손글씨로 인한 혼동 가능성 있음
          + 공식 사진에서도 '1'이 'L'처럼 보임
          + 시스템이 하나의 실수를 허용하는지, '1'을 'L'로 자동으로 대체해 유효한 코드인지 확인하는지 궁금함
          + 실제 실패율이 궁금함
          + 30년 전 유럽의 일부 우체국에서는 이미 손글씨 OCR을 사용했음
          + 당시에는 도시의 우편번호를 자동으로 분류하기 위해 사각형에 숫자만 적도록 했음
     * 스웨덴에서도 이 시스템이 있음
          + 링크: PostNord
     * 결제 시 주소를 받아서 실제 편지에 적을 필요가 없게 하는 것이 더 편리할 것 같음
          + 역호환성 때문인지 궁금함
     * 아일랜드에도 비슷한 디지털 우표 시스템이 있음
"
"https://news.hada.io/topic?id=15633","Show HN: Pikimov - 무료 온라인 모션 디자인/비디오 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show HN: Pikimov - 무료 온라인 모션 디자인/비디오 편집기

     * 무료, 가입 필요없는 Adobe After Effects의 대체제
     * 웹에서 실행되어 설치없이 윈/맥/리눅스 모두 사용가능
     * 다양한 비디오 효과(블러,컬러보정,글리치,그린스크린 제거 등), 레이어 기반 편집(컴포지션)
     * 키프레임 애니메이션 시스템으로 거의 모든 속성 애니메이션 가능
     * 이미지/비디오/오디오/3D 모델(glb 포맷)) 임포트 지원
     * 파일은 사용자의 컴퓨터에 저장되며 서버에 업로드되지 않음
     * Ember.js + Three.js 로 작성됨

GN⁺의 의견

     * 이 온라인 편집기는 Adobe After Effects와 같은 상용 소프트웨어의 무료 대안으로서 매우 유용함.
     * 웹 기반이기 때문에 설치가 필요 없고, 다양한 운영체제에서 사용할 수 있어 접근성이 높음.
     * 파일이 서버에 업로드되지 않기 때문에 개인정보 보호 측면에서 안전함.
     * 키프레임 애니메이션 시스템과 다양한 비디오 효과를 제공하여 전문적인 편집이 가능함.
     * 비슷한 기능을 제공하는 다른 무료 도구로는 DaVinci Resolve와 HitFilm Express가 있음.

        Hacker News 의견

     * 경험 많은 개발자이자 VFX 아티스트의 관점에서 AE에 대한 깊은 지식을 바탕으로 한 의견임
          + 30fps 제한이 놀라움
          + 23.976 fps가 제대로 처리되지 않음
          + 버그 신고 클릭 시 버그 신고 양식으로 이동해야 함
          + ""사각형""과 상호작용 시 모서리를 드래그할 수 없어 놀라움. 기본적으로 전체 크기로 설정되어야 함
          + 회전과 같은 입력 필드를 클릭하고 드래그하여 조정할 수 있어야 함
          + 도프 시트에서 키를 드래그하고 놓을 때 관성으로 인해 키가 무작위 위치에 정착됨. 이런 현상이 없어야 함
          + 타임라인의 재생 헤드에서도 동일한 관성 현상이 발생함. 이런 현상이 없어야 함
          + 도프 시트에 값을 입력하는 기능이 활성화되어야 하며, 자동으로 키가 설정되어야 함
          + 이징의 시각화가 좋았지만, AE처럼 도프 시트의 키프레임 아이콘 모양으로 전달되어야 함
          + 타임라인의 시작 부분으로 키를 이동하는 것이 어려움
          + AE처럼 미리보기 렌더링이 작동해야 함. 실시간 시각화 보장이 중요함
     * 몇 년 전 Node.js(v0.8)로 비디오 렌더러 프로토타입을 제작했음
          + JavaScript로 비디오를 렌더링하는 것은 어리석은 일이었지만, 가능성을 증명했음
          + 동료가 C/C++로 포팅하는 동안 UI를 구축하여 동적 비디오를 템플릿화할 수 있게 했음
          + 이 UI는 Flash와 매우 유사했음
          + After Effects를 사용해 도구를 구축하려 했으나 Vimeo에 인수되었음
          + WASM이 안정화된 지금, 누군가가 이 작업을 수행한 것을 보니 기쁨
          + 오픈 소스가 아니었음을 정정함
     * 개발자로서 ""어떻게 이런 것을 만들 수 있을까""라는 생각이 들게 하는 드문 사례임. 시도하고 완수한 것에 큰 찬사를 보냄
     * AI를 사용하는 줄 알고 무시하려 했으나, ""No AI"" 표지를 보고 즉시 가입했음. 왜 ""No AI""가 중요한 특징으로 언급되는지 궁금함
     * 놀라운 작업임. Instagram 스토리를 만들기 위해 AE를 설치했음
          + 이제 사람들이 만든 템플릿을 공유할 수 있는 페이지가 필요함
     * 돈을 받고 훌륭하게 만들어야 함. Adobe를 혁신할 때가 되었음
          + 진지한 경쟁자가 되려면 상당한 자원, 현금, 팀이 필요함. 문제를 해결할 소프트웨어에 기꺼이 돈을 지불할 사람들은 항상 있음
     * Firefox에서 이 앱이 'Chrome 또는 Edge 사용'을 요구하는 이유를 명확히 해달라는 요청이 있음
     * 매우 멋짐. 더 복잡한 오픈 소스 솔루션도 있지만, 적당한 기능과 간단함의 균형이 완벽함. Photopea를 Photoshop보다 선호하는 이유와 같음
     * 디자인 도구로서 사이트의 첫인상이 중요함
          + 프로젝트의 성공을 기원하며, UI 디자이너를 고용하거나 품질 좋은 템플릿을 사용할 것을 권장함
     * 놀랍고 깊이 영감을 주는 작업임. 단독 개발자가 이룬 성과가 믿기지 않음
          + AE는 강력하고 기능이 풍부하지만, 수십 년의 레거시 코드와 전문적인 사용 사례로 인해 비대함
          + 많은 사람들이 개인 비디오, 소셜 미디어, 예술 프로젝트를 위한 멋진 모션 그래픽을 만들고 싶어 함
          + 커뮤니티가 템플릿과 플러그인을 통해 확장할 수 있는 방법에 집중할 것을 제안함
"
"https://news.hada.io/topic?id=15606","오픈소스 'Eclipse Theia IDE' 베타를 종료하고 Visual Studio Code에 도전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        오픈소스 'Eclipse Theia IDE' 베타를 종료하고 Visual Studio Code에 도전

     * Eclipse Foundation의 Theia IDE 프로젝트가 7년의 개발 끝에 베타를 종료하고 일반적으로 사용 가능해짐
     * Microsoft의 Visual Studio Code와 유사한 기술을 공유하지만, 라이선스와 거버넌스 측면에서 차이가 있음
     * 이클립스 재단은 Theia IDE를 ""진정한 오픈 소스 대안""으로 설명함

  Eclipse Theia IDE와 VS Code의 차이점

     * Theia IDE는 VS Code와 동일한 Monaco 에디터를 기반으로 하며, Language Server Protocol (LSP) 및 Debug Adapter Protocol (DAP)을 지원함
     * Theia IDE는 VS Code와 동일한 확장 기능을 지원하지만, Open VSX Registry를 통해 제공됨
     * Microsoft의 Visual Studio Code Marketplace에는 더 많은 확장 기능이 있음

  Eclipse Theia IDE의 장점

     * Eclipse Theia는 단일 오픈 소스 기술 스택을 사용하여 데스크탑 및 클라우드 IDE를 생성할 수 있음
     * Theia는 코드 포킹이나 패치 없이 IDE의 모든 측면을 사용자 정의할 수 있음
     * Theia IDE는 유연성, 개방성, 최신 기술을 결합한 IDE를 찾는 개발자에게 매력적인 선택임
     * 사용자 선호도를 반영한 기본 텔레메트리 비활성화와 같은 기능을 제공함
     * 유연성과 개방성
     * 적응형 툴바, 분리 가능한 뷰, 원격 개발 지원 등 독특한 기능
     * 향후 실시간 협업 모드 지원 예정
     * 활발한 오픈소스 커뮤니티

  Eclipse Theia 커뮤니티

     * Eclipse Foundation이 주최하는 활발한 오픈 소스 커뮤니티가 Theia IDE의 핵심임
     * Ericsson, EclipseSource, STMicroelectronics, TypeFox 등 다양한 기업이 기여하고 있음
     * Broadcom, Arm, IBM, Red Hat, SAP, Samsung, Google, Gitpod, Huawei 등도 플랫폼에 기여함

GN⁺의 의견

    1. Theia IDE의 출시는 개발자 도구 시장에 건전한 경쟁을 가져올 것으로 보임. VS Code의 대안을 찾는 개발자들에게 좋은 선택지가 될 수 있음
    2. 오픈소스 커뮤니티 주도 모델은 장기적으로 더 나은 혁신과 안정성을 가져올 수 있음. 다만 Microsoft의 자원과 생태계에 비해 초기에는 부족한 점이 있을 수 있음
    3. 기업용 IDE 시장에서 Theia IDE가 강점을 보일 수 있음. 맞춤화 가능성과 상용 라이선스의 자유로움이 큰 장점임
    4. 프라이버시와 데이터 수집에 대한 우려가 있는 개발자들에게 Theia IDE는 매력적인 대안이 될 수 있음
    5. VS Code와의 호환성을 유지하면서도 차별화된 기능을 개발하는 것이 Theia IDE의 성공에 중요할 것. 실시간 협업 모드 등 고유한 기능 개발에 주목할 필요가 있음

   자바는 비호감 ㅋㅋ

   이 쎄이아 (혹은 떼이아?) IDE를 쓰는 가장 큰 프로젝트라면 아두이노 IDE v2가 아닐까 싶습니다.
   초기에는 여러모로 아쉬운 부분들이 많았는데, 이제는 꽤나 안정적으로 사용 가능하더군요.

        Hacker News 의견

     * 몇 년 전 VS Code Remote가 나오기 전 사용했음
          + VS Code의 프레임워크에 인터페이스 확장성 컴포넌트를 추가하는 데 유용함
          + Microsoft가 의도적으로 VS Code의 API를 제한해 진정한 편집기 확장성을 배제한 것으로 의심됨
          + Atom은 더 개방적인 수정 허용
          + 예를 들어, VS Code 확장을 위한 폼 빌더를 만들려면 Webview 탭 기능을 수정해야 함
          + Eclipse Foundation이 이를 인식하고 VS Code를 진정한 IDE로 만들기 위한 기초를 제공함
     * Theia는 vscode-as-a-platform을 지원하고 웹 브라우저에서 실행 가능하게 한 첫 번째 프로젝트였음
     * 사용 목적에 의문을 가짐
          + ""Atom"" 접근 방식을 유지하면서 VS Code 기능을 모두 제공할 것이라 생각했음
          + 하지만 ""자신만의 IDE 구축""을 목표로 하는 것 같음
          + 왜 사용해야 하는지 의문을 가짐
     * VS Code의 단점
          + Microsoft가 오픈 소스 버전에서 좋은 애드온을 제한함
          + 공식 버전이 없는 플랫폼에서 불편함
          + MS 스파이웨어 설치를 원하지 않음
          + Eclipse는 IDE로서 악몽 같은 경험을 줌
     * Eclipse 브랜드에 대한 긍정적인 감정을 가진 사람이 있는지 궁금함
          + 20년 전 사용했을 때 긍정적이지 않은 경험이었음
     * Theia를 몇 년간 팔로우했지만 vscode가 브라우저에서 접근 가능해지면서 흥미를 잃음
          + code-server나 openvscode-server와 비교가 궁금함
          + 웹 브라우저에서 원격 개발을 위해 openvscode-server를 사용함
          + 자신만의 커스텀 IDE를 만들 필요가 없다고 생각함
     * 관련 링크 제공
          + Theia: Cloud and Desktop IDE
          + Eclipse Theia 1.0 – Open-Source Alternative to Visual Studio Code
          + Theia: A cloud and desktop IDE framework implemented in TypeScript
          + Theia – One IDE for Desktop and Cloud
     * 최근 사용해보고 좋았음
          + VS Code를 사용하지 않지만 생태계에 가치 있는 추가 요소라고 생각함
          + Microsoft와 독립적인 진정한 오픈 대안을 제공함
          + open-vsx.org라는 VS Code + Theia 호환 확장용 오픈 레지스트리를 생성함
          + Theia의 주요 초점은 커스텀 IDE 제품을 만드는 프레임워크/기반을 제공하는 것임
     * tree-sitter + LSP 지원이 필수적임
          + Zed와 같은 최근 진입자들이 높은 기준을 설정함
          + LazyVim, Doom/Spacemacs 등으로 neovim과 emacs에 훌륭한 업데이트가 있음
          + 경쟁이 더 많아져서 기쁨
     * Microsoft가 통제하는 동일한 코어(Monaco)를 사용하는 것에 불만을 가짐
          + 편집기가 괜찮지만 특별히 좋지는 않음
          + 많은 사용자가 다른 것을 경험하지 못해 좋아하는 것 같음
          + Kate와 kdevelop을 추천함
     * VS Codium과의 차이점과 7년이 걸린 이유에 의문을 가짐
"
"https://news.hada.io/topic?id=15635","대법원, 전직 대통령의 공식 행위에 대한 면책 판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      대법원, 전직 대통령의 공식 행위에 대한 면책 판결

    정치

      전직 대통령의 광범위한 면책 특권 인정, 트럼프 재판 연기

     * 미국 대법원은 전직 대통령이 공식 행위에 대해 형사 기소로부터 광범위한 면책 특권을 가진다고 판결함
     * 이 판결로 인해 도널드 트럼프 전 대통령의 2020년 대선 결과를 뒤집으려는 시도에 대한 워싱턴 형사 사건이 연기됨
     * 보수 성향의 대법관 6명이 찬성, 3명이 반대하여 판결이 내려짐
     * 판결은 트럼프가 임명한 세 명의 대법관을 포함한 보수 다수의 의견에 의해 이루어짐

      판결의 주요 내용

     * 대법원은 전직 대통령이 공식 행위에 대해 절대적인 면책 특권을 가진다고 판결함
     * 비공식 행위에 대해서는 면책 특권이 적용되지 않음
     * 판결은 대통령의 권한이 헌법적으로 보호된다는 점을 강조함
     * 반대 의견을 낸 소니아 소토마요르 대법관은 이 판결이 법 위에 누구도 없다는 민주주의의 핵심 원칙을 훼손한다고 비판함

      판결의 영향

     * 트럼프는 자신의 소셜 미디어 네트워크에 ""헌법과 민주주의의 큰 승리""라고 게시함
     * 조 바이든 대통령은 판결에 대해 월요일 밤에 연설할 예정임
     * 상원 다수당 대표 척 슈머는 이 판결을 ""수치스러운 결정""이라고 비난함
     * 트럼프는 법무부와의 논의와 관련된 혐의에 대해 절대적인 면책 특권을 가지며, 마이크 펜스 부통령에게 선거 결과 인증을 거부하도록 압박한 혐의에 대해서도 최소한의 면책 특권을 가짐

      추가 분석 필요

     * 트럼프가 바이든이 승리한 경합주에서 가짜 선거인을 모집하려는 계획에 참여했다는 혐의에 대한 추가 분석이 필요함
     * 판결은 대통령의 비공식 행위가 법을 위반했음을 증명하기 위해 공식 행위를 증거로 사용할 수 없도록 제한함

      향후 전망

     * 트럼프의 워싱턴 재판은 2024년 대선 전에 열리기 어려울 것으로 보임
     * 트럼프가 대선에서 승리할 경우, 자신을 사면하거나 법무장관을 임명해 사건을 기각할 가능성이 있음

    GN⁺의 의견

     * 이 판결은 대통령의 권한을 강화하고, 전직 대통령이 공식 행위에 대해 면책 특권을 가지는 범위를 확대함
     * 판결이 정치적 영향을 미칠 가능성이 높으며, 대법원의 중립성에 대한 의문을 제기할 수 있음
     * 트럼프의 재판이 연기됨에 따라, 2024년 대선에 미치는 영향이 클 것으로 예상됨
     * 이 판결은 대통령의 비공식 행위에 대한 법적 책임을 묻는 데 어려움을 초래할 수 있음
     * 다른 유사한 기능을 가진 제품이나 프로젝트로는 법적 책임을 명확히 규정하는 법률 개정이 필요할 수 있음

        Hacker News 의견

     * 대통령은 공식 업무를 수행하는 동안 기소 면제이지만, 의회가 임명한 특별 검사에 의해 조사될 수 있음
          + 성공적으로 탄핵되고 유죄 판결을 받으면 해당 범죄로 기소될 수 있음
          + ""비공식"" 행위는 면제되지 않지만, 특별 검사가 조사를 위해 임명되어야 함
     * 이 판결에 실망했지만, 누군가 이를 변호할 수 있는지 궁금함
          + 다른 논쟁적인 이슈에 대한 반대 관점을 이해할 수 있지만, 이 판결은 매우 나쁘게 보임
     * 이 입장의 실제 위험을 설명할 수 있는 사람 있는지 궁금함
          + Sotomayor의 의견은 대통령이 뇌물을 받고 이를 공식 면제 행위로 간주할 수 있다고 주장함
          + 뇌물 수수는 대통령의 공식 행위로 간주되지 않으며, 기소 대상이 될 수 있음
          + 이 의견은 기존 법적 선례와 일치함
          + Truman, Nixon, Reagen 모두 기소되지 않았음
     * 대통령은 기소 면제 행위에 대해 기소될 수 없음
          + 지방법원은 기소의 나머지 혐의가 면제 행위와 관련이 있는지 신중히 분석해야 함
          + Nixon의 테이프는 형사 재판에서 증거로 사용될 수 없었을 것임
          + 오늘날의 정치 환경에서는 반대당이 상원에서 초다수를 차지하지 않는 한 탄핵이 성공할 가능성 낮음
     * 이 판결은 미래의 대통령들이 불법일 수 있는 행동을 더 많이 하도록 부추길 것임
          + 대통령은 더 많은 보호가 필요하지 않음
          + 국민이 대통령으로부터 더 많은 보호가 필요함
     * ""미국 민주주의를 보호하기 위해 비민주적인 도전자를 죽였다""는 말은 문제를 야기함
          + 공식 행위의 정의가 모호해질 수 있음
     * 대통령이 재임 중에는 면제가 필요함을 이해함
          + 하지만 임기 종료 후에는 책임을 져야 함
     * 공식 업무로서의 행위에 대한 면제는 합리적일 수 있음
          + 반대의 경우, 모든 것에 대해 책임을 지는 것은 불가능함
          + 오바마가 드론 공격으로 두 명의 미국인을 실수로 죽인 것에 대해 기소될 수 있는지 의문임
          + 이 판결이 올바른 균형을 잡았는지 알 수 없지만, 약간의 명확성을 제공함
     * ""대통령이 하면 그것은 합법이다."" -- Richard Nixon
     * 로마 공화국에서도 임기 종료 후 면제가 끝났고, 공식 행위에 대해 기소될 수 있었음
          + Caesar는 기소를 피하기 위해 항상 재임하려고 싸웠음
"
"https://news.hada.io/topic?id=15665","무료판 vs 평가판 : B2B 제품 리버스 트라이얼 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    무료판 vs 평가판 : B2B 제품 리버스 트라이얼 가이드

리버스 트라이얼이란 무엇인가요?

     * 기존 무료 평가판은 일정 기간 동안 유료 플랜의 기능을 제공한 뒤, 평가판이 끝나면 구매를 유도합니다. 평가판은 대개 시간이나 사용량 제한이 있습니다 (예: 14일 무료 사용). Zoom의 45분 녹화 제한이 바로 그러한 경우입니다.
     * 그러나 리버스 트라이얼은 처음에는 프리미엄 기능을 제공하다가, 평가판이 끝날 때 사용자가 프리미엄 기능을 계속 사용할지, 아니면 무료 또는 더 저렴한 요금제로 다운그레이드할지 선택하도록 합니다.
     * 리버스 트라이얼의 핵심은 사용자가 프리미엄 기능을 사용해 가치를 실감하게 하고, 구매를 유도하는 것입니다.
     * 아래는 세 가지 주요 접근 방식 각각에 대한 일반적인 변환 결과입니다. 리버스 트라이얼은 프리미엄보다 전환율이 높고, 무료 평가판보다 이탈률은 낮습니다.

    1. 프리미엄: 무료 유지 25%, 유료 결제 5%, 이탈 70%
    2. 무료 평가판: 유료 결제 10%, 이탈 90%
    3. 리버스 트라이얼: 유료 결제 10%, 무료로 강등 25%, 이탈 65%

     * 리버스 트라이얼의 추가적인 장점은 일단 한 스푼 맛보게 한다는 것입니다.
     * 평가판이 종료된 후 무료 요금제로 돌아온 사용자는 나중에 유료로 전환할 가능성이 더 높아집니다.

리버스 트라이얼이 내 비즈니스에 적합한가요?

     * 상황에 따라 다르겠지만, 몇 가지 구체적인 예를 통해 살펴보겠습니다.
     * Spotify는 프리미엄 요금제에 대한 리버스 트라이얼을 제공합니다. 무료 요금제에는 광고가 나옵니다.
     * Spotify의 사용자 여정은 다음과 같습니다:

    1. 사용자가 특정 노래를 검색하거나 인기 있는 재생 목록을 탐색한다.
    2. 사용자가 광고 없이 노래를 재생한다.
    3. Spotify는 새로운 노래를 추천하기 시작한다.
    4. 사용자는 노래를 좋아하거나 재생 목록에 추가한다.
    5. 시간이 지나면서 Spotify의 추천 노래가 개선된다.
    6. 나중에 Spotify는 사용자에게 프리미엄으로 업그레이드할 것인지 묻는다.

     * Spotify는 처음부터 사용자에게 평가판을 업그레이드하도록 유도할 수 있었지만, 먼저 관련성 있고 광고 없는 음악을 듣는 습관을 만들었습니다.
     * 사용자가 시간이 지남에 따라 점점 더 많은 편리함을 느끼기 때문에 나중에 구매를 유도하는 것이 합리적입니다.
     * 또 다른 예를 들어 보겠습니다. 비디오 녹화 서비스인 Loom은 AI 전사 기능에 대한 리버스 트라이얼을 제공합니다.
     * Loom의 사용자 여정은 다음과 같습니다:

    1. 사용자가 Loom으로 동영상을 녹화한다.
    2. Loom은 비디오와 대본에서 '어~', '음~'을 제거할 것을 제안한다..
    3. 그 다음 사용자는 동료와 비디오를 공유한다.
    4. 동료가 ""잘했어!""라고 칭찬한다.
    5. 사용자가 소셜 미디어에서 비디오를 공유하기로 결정한다.
    6. AI 기능이 자동으로 대본을 작성하고 수정한다.

     * Loom은 처음에 사용자에게 AI 전사 서비스 비용을 지불하도록 요청할 수 있었습니다.
     * Loom역시 처음부터 사용자에게 AI 서비스 비용을 지불하도록 요청할 수 있었지만 사용자가 비디오를 공유할 준비가 될 때까지 이러한 AI 기능의 가치는 불명확합니다. 말하자면, Loom은 가치가 느껴질 때까지 구매 결정을 미룬 것입니다.

    요약

     * 리버스 트라이얼이 효과적인 이유는 손실 회피 원칙 때문입니다. 리버스 트라이얼이 끝날 때, 사용자는 다음과 같은 선택에 직면하게 됩니다:

    1. 즐기고 있던 기능에 대해 비용을 지불한다.
    2. 즐기고 있던 일부(또는 모든) 기능에 대한 접근을 잃는다.

     * 사용자는 제품의 특정 기능에서 가치를 느낀 순간 그 기능에 대한 심리적 애착을 갖게 됩니다. 따라서 리버스 트라이얼 기간 동안, 유료 기능을 적극적으로 사용하도록 권장하는 것이 좋습니다. 이렇게 하면 리버스 트라이얼이 끝날 때 손실에 대한 감정이 고조됩니다.


   스타트업 성장을 위한 무료 뉴스레터를 받으세요!

   👉 지난 호 보고 뉴스레터 구독하기 👈


리버스 트라이얼을 사용하지 말아야 하는 경우는?

     * 엄격한 규칙은 없지만 몇 가지 패턴이 있습니다.

    1. 제품의 프리미엄 가치를 처음부터 쉽게 이해할 수 있는 경우
    2. 사용자가 프리미엄 기능을 선택하지 않을 경우 쓸 수 있는 '충분히 좋은' 무료 요금제가 없는 경우
    3. 프리미엄 기능을 설정하는 데 많은 사용자 노력이 필요한 경우

     * 반면 경쟁업체가 리버스 트라이얼을 실행하는 경우, 당신도 따라야 할 수 있습니다. 경쟁자가 모든 기능을 제공하는 역 평가판을 사용하면 당신에겐 선택권이 없을 수 있습니다. 항상 잠재 구매자의 맥락을 고려하세요.

    여러 창업자와 리더의 의견

     “상황에 따라 매우 다릅니다. 스스로에게 물어야 할 첫 번째 질문은 '왜 이 일을 하고 있는가?'입니다. 리버스 트라이얼로 해결하려는 문제는 무엇인가요? 우리 경우, 초기 기간에 습관 형성 문제를 해결하려고 했습니다. 반면 수익 창출이 목표라면 리버스 트라이얼은 적절하지 않을 수 있습니다.""
     * Karapet Gyumjibashyan, Krisp 제품 담당 수석 이사

     ""저는 사용자가 첫 경험에서 최고의 버전을 보길 원합니다. 그리고 그건 활성화율을 향상시킵니다. 저는 유지율과 수익 창출을 계산할 수도 있지만, 솔직히 말해 수익화가 목표는 아니었습니다. 사람들이 결정하기 전에 많은 조사를 하고 어려운 결정을 내릴 필요가 없게 하고 싶었습니다.""
     * Richard White, Fathom의 설립자/CEO

리버스 트라이얼은 어떻게 구현하나요?

     * 리버스 트라이얼을 구현하기로 결정했다면 어떻게 해야 할까요?
     * 기술적인 부분은 제쳐두고, 리버스 트라이얼을 구현할 때 가장 어려운 건 팀을 설득하는 것입니다.
     * 우리는 7개의 SaaS 회사를 인터뷰했는데 그 중 2개 회사만이 가격 책정 모델을 변경했습니다.
     * 일단 팀을 설득했다고 가정하겠습니다.
     * 다음 문제는 사용자 여정입니다.
     * 리버스 트라이얼을 사용하면 사용자 여정은 가장 복잡한 지점에서부터 시작하게 됩니다.
     * 때문에 Loom은 새로운 사용자에게 AI 기능을 처음부터 설명하지 않았습니다.
     * 사용자가 첫 비디오를 녹화한 후에만 기능을 제공했습니다. 사용자에게 수명 주기나 워크플로우 단계별로 수차적으로 메시지를 전달하는 것이 좋습니다. 이렇게 하면 사용자가 전체 기능에 압도되지 않을 것이고, 각 기능들은 적절한 순간에 도입될 것입니다.
     * 중요한 주의 사항은 처음부터 사용자에게 리버스 트라이얼을 설명하는 것입니다.
     * 사용자가 리버스 트라이얼을 모른다면 지금 기능을 무료로 계속 사용할 수 있을 거라 기대하게 됩니다. 따라서 기존의 프리미엄 모델에서 사용자를 이동시키려면 명확한 커뮤니케이션이 필요합니다.
     * 반면에 유료 사용자는 당신이 사소한 비용까지 청구한다고 느낄 수 있습니다. 따라서 사용자 여정에 대한 깊은 이해가 바탕이 되어야 합니다.

결론: 리버스 트라이얼은 당신의 제품에 베팅하는 것입니다

     * 구매 결정을 가능한 한 뒤로 미루는 것은 더 많은 경험을 통해 사용자가 계속 머물고 그로인해 더 기꺼이 지불할 것이라는 쪽에 베팅 하는 것입니다.
     * 신중하게 구현하면 리버스 트라이얼은 PLG 팀에게 강력한 도구가 됩니다.
     * 사용자에게 최상의 초기 경험을 제공하고 제품의 옹호자로 전환하는 데 도움이 될 수 있습니다.
     * 그러나 리버스 트라이얼은 위험을 수반합니다. 온보딩이 간단하지 않거나, 사용자가 원하는 것을 찾지 못하거나, 초기 단계에서 습관을 형성하지 못하면 결제 요청을 연기하는 건 제품의 성공 가능성을 낮춥니다.

   쿼터 : 스타트업을 위한 성장 레퍼런스 뉴스레터
   검색으로 찾을 수 없는 가장 실용적인 인사이트를 매주 월수금 드립니다.

   👉 지난 호 보고 뉴스레터 구독하기(https://page.stibee.com/subscriptions/348531) 👈
"
"https://news.hada.io/topic?id=15690","제프리 스노버와 PowerShell 개발 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       제프리 스노버와 PowerShell 개발 이야기

Jeffrey Snover와 PowerShell의 탄생

     * 기업 거대 조직 탐색
          + Jeffrey Snover는 Microsoft의 PowerShell을 만든 건축가임.
          + PowerShell은 Windows 시스템 관리를 혁신적으로 변화시킨 도구임.
          + 초기에는 회의적인 반응을 받았으나, Snover의 끈질긴 노력으로 성공을 거둠.
     * 문제
          + Microsoft는 서버 시장을 이해하지 못하고 있었음.
          + 개인용 컴퓨터에 익숙한 경영진은 기업 환경에 대한 경험이 부족했음.
          + Snover는 이 문제를 해결하기 위해 고용됨.
     * Jeffrey의 설득
          + Snover는 Microsoft의 서버 팀에 합류하여 Windows를 UNIX와 경쟁할 수 있도록 만들기 위해 노력함.
          + 목표는 동일한 기능을 더 낮은 비용으로 제공하는 것이었음.
     * UNIX를 이기기
          + UNIX는 파일 중심의 운영 체제였으나, Windows는 API 중심의 운영 체제였음.
          + UNIX의 도구는 Windows에서 제대로 작동하지 않았음.
          + Snover는 WMI(Windows Management Instrumentation)를 사용하여 관리 명령을 개발하기로 결정함.
     * 문화적 도전
          + Microsoft 팀은 GUI를 선호했으며, Snover의 명령줄 인터페이스 아이디어에 회의적이었음.
          + Snover는 엔터프라이즈 환경에서 GUI가 아닌 명령줄 인터페이스가 필요하다고 주장함.
     * 기업 시나리오
          + Microsoft 팀은 각 문제에 대해 사용자 인터페이스를 제공하는 현대적인 방법을 선호했음.
          + Snover는 도구 상자 접근 방식을 주장함.
     * Windows는 UNIX가 아님
          + Windows는 파일 중심이 아닌 API 중심의 운영 체제였음.
          + WMI를 사용하여 관리 명령을 개발하기로 결정함.
     * 코딩 윈도우
          + Snover는 10주 동안 코딩을 해야 한다는 사실을 알게 됨.
          + 10주 동안 코드를 작성한 후 몇 년 동안 작동하도록 만드는 방식이었음.
     * .Net의 쐐기
          + Bill Gates는 .NET을 강력히 추진하고 있었음.
          + Snover는 .NET을 사용하여 더 많은 커버리지를 얻을 수 있을 것이라고 판단함.
     * 재조직
          + Snover의 조직은 재조직으로 인해 혼란에 빠짐.
          + Snover는 자신의 계획을 계속 추진하기로 결정함.
     * 쉘 팀
          + 다른 그룹이 쉘을 개발하고 있었음.
          + Snover는 그들에게 더 나은 방법을 제안했으나, 그들은 이해하지 못함.
          + 결국 Snover는 자신만의 프로토타입을 개발함.

GN⁺의 의견

     * PowerShell의 중요성
          + PowerShell은 Windows 시스템 관리의 패러다임을 바꾸었음.
          + 명령줄 인터페이스를 통해 대규모 서버 관리를 가능하게 함.
     * 기술 리더십
          + Snover의 끈질긴 노력과 명확한 비전이 성공의 열쇠였음.
          + 기술 리더십은 강한 반대에도 불구하고 중요한 결과를 달성하는 것임.
     * 비슷한 기능을 가진 제품
          + Linux의 Bash와 유사한 기능을 제공함.
          + PowerShell은 Windows 환경에서 Bash와 같은 역할을 함.
     * 새로운 기술 채택 시 고려 사항
          + 새로운 기술을 채택할 때는 기존 시스템과의 호환성을 고려해야 함.
          + PowerShell은 기존 Windows API와의 호환성을 유지하면서도 새로운 기능을 제공함.
     * 장단점
          + 장점: 대규모 서버 관리의 효율성 증가, 자동화 가능성
          + 단점: 초기 학습 곡선, 기존 GUI 사용자들의 저항

        Hacker News 의견

     * PowerShell의 창시자 Jeffrey Snover가 Microsoft 내에서 큰 반대에 부딪혔고, 결국 강등되었음
          + Jeffrey는 원래 Microsoft가 데이터 센터에서 경쟁할 수 있도록 돕기 위해 고용되었음
          + Windows가 파일 기반이 아니기 때문에 PowerShell이 존재하게 되었음
          + 서버 관리를 위해 다양한 API 호출과 구조화된 데이터가 필요했음
     * PowerShell을 작성할 때 배열 길이가 1인 경우 배열이 제거되고 포함된 타입이 되는 이유를 이해하지 못했음
          + 이로 인해 많은 버그가 발생했음
     * Bash 개발자로서 PowerShell이 출시되었을 때 매우 기대했지만, 여전히 Bash를 사용하고 있음
          + 다른 개발자들의 경험을 알고 싶어함
          + PowerShell이 정말로 더 효율적이고 현대적인 쉘이 되었는지 궁금해함
     * 20년 된 SQL Server 저장 프로시저 코드베이스를 관리하는 작업을 맡고 있음
          + 소스 제어가 되지 않았고, 성능 튜닝도 제대로 되지 않았음
          + PowerShell Core가 Windows와의 상호 운용성이 가장 뛰어났음
          + 코드 작성은 불편했지만, 빠르게 실행되었고 사용자와 상호작용하는 도구가 좋았음
          + 검색을 열심히 하면 원하는 것을 달성할 수 있었음
     * Windows 하위 시스템과 상호작용할 때를 제외하고는 Python을 사용하지 않는 이유를 모르겠음
          + PowerShell이 너무 장황하고 느림
          + Microsoft가 왜 Python이나 Node를 기반으로 하지 않았는지 궁금해함
     * Microsoft가 Windows와 중요한 엔터프라이즈 애플리케이션을 구성하는 프로그램적 방법의 가치를 보지 못한 것이 이상함
          + 원격 데스크톱을 통해 마우스로 클릭하는 것이 대안으로 제안된 것은 터무니없음
     * PowerShell은 Microsoft의 독점적 자신감의 산물임
          + 다른 언어와의 문법적 연계가 전혀 없었음
          + 극도로 장황한 문법이 프레젠테이션에는 좋을 수 있지만, 실제 사용에는 불편했음
          + 파일 이름에 대괄호가 포함된 경우 문제가 발생했음
     * Windows 관리를 할 때 PowerShell은 사용하기 좋았음
          + Linux는 훌륭하지만 Bash 사용은 끔찍했음
          + Bash 스크립트는 여전히 많이 사용될 것 같음
     * Windows 사용자가 아니었지만 PowerShell은 좋았음
     * PowerShell은 많은 점에서 훌륭했지만, 더 넓은 사용자층을 끌어들이지 못했음
          + PowerShell cmdlet은 자체 설명적이고 풍부한 정보를 제공했음
          + 시뮬레이션 모드와 같은 유용한 기능이 있었음
          + 그러나 Windows 외부에서는 인기를 끌지 못했고, Microsoft는 Linux 개발자들을 끌어들이기 위해 PowerShell을 소홀히 하고 있음
"
"https://news.hada.io/topic?id=15724","프라이버시의 중요성과 "Nothing to Hide"의 무관함 (2016)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               프라이버시의 중요성과 ""Nothing to Hide""의 무관함 (2016)

     * 호주, 독일, 영국, 미국 정부는 당신의 프라이버시를 침해하고 있음
     * ""숨길 것이 없으니 상관없다""는 주장은 잘못된 것임
          + 프라이버시는 표현, 결사, 집회의 자유를 지탱하는 권리임
          + 에드워드 스노든: ""숨길 것이 없으니 프라이버시가 필요 없다는 주장은 말할 것이 없으니 표현의 자유가 필요 없다는 것과 같다""

    프라이버시와 자유

     * 프라이버시 상실은 자유 상실로 이어짐
          + 인터넷 사용 감시로 인해 표현의 자유가 위협받음
          + 온라인 커뮤니케이션 감시로 인해 결사의 자유가 위협받음
          + 위치 추적으로 인해 집회의 자유가 위협받음
          + 이러한 자유는 현재 침해되고 있으며, 시간이 지날수록 악화될 것임

    정보의 집합

     * 숨길 필요가 없는 정보도 집합되면 중요한 프로필이 될 수 있음
          + 호주의 데이터 보유 사례: 위치, 연락처, 인터넷 사용 정보가 지속적으로 수집됨
          + 인공지능과 빅데이터 분석의 발전으로 인해 개인의 정치적, 종교적 신념, 욕망, 동정심 등이 드러날 수 있음
          + 충분한 데이터와 시간이 주어지면 행동 예측도 가능함

    개인적 위축 효과

     * 대규모 감시의 전체 그림을 이해하면 행동을 바꾸게 됨
          + 특정 인물과의 연락이나 만남을 피하게 됨
          + 특정 장소에서의 집회를 피하게 됨
          + 특정 주제에 대해 글을 쓰거나 웹사이트를 방문하는 것을 피하게 됨

    사회적 위축 효과

     * 이러한 개인적 위축이 모이면 민주주의에 중요한 활동에 위축 효과를 미침
          + 활동가, 기자, 정치적 반대자들이 자유롭게 활동할 수 있어야 사회가 발전함
          + 이미 자기 검열이 일어나고 있음
          + 에드워드 스노든: ""부당한 감시로 가장 고통받는 사람들은 특권층이 아닌 취약한 사람들임""

    오용 및 남용

     * 대규모 감시 시스템은 인권 침해의 범위를 넓힘
          + 동독의 사례: 스파이와 정보원들이 시민들을 감시하고 괴롭힘
          + 현재의 감시 시스템은 더 큰 위험을 내포함
          + 감시 시스템은 미래 정부, 외국 정보기관, 해커 등에 의해 오용될 수 있음

    점진적 침식

     * 각 감시 시스템은 프라이버시를 침식하고 자유를 위협함
          + 기술 발전은 사회에 이익을 줄 수도 있지만, 감시 도구로 사용될 수도 있음
          + 다니엘 J. 솔로브: ""프라이버시는 한 번에 잃는 것이 아니라 점진적으로 침식됨""

    다음 단계는?

     * 호주, 뉴질랜드, 캐나다, 미국 등은 잘못된 방향으로 나아가고 있음
          + TPP는 프라이버시와 다른 권리에 큰 위협이 됨
          + 행동 촉구: Hack for Privacy에 참여하여 대규모 감시에 맞서 싸우기
          + 프라이버시 마인드셋 확산: 이 문제에 대한 이해를 높이고, 유해한 법률에 맞서 싸우기
          + 자신을 보호하기: 대규모 감시로부터 데이터를 보호하기


    GN⁺의 정리

     * 이 글은 프라이버시 침해가 자유 상실로 이어질 수 있음을 경고함
     * 대규모 감시가 개인과 사회에 미치는 위축 효과를 설명함
     * 기술 발전이 프라이버시를 침식할 수 있는 위험성을 강조함
     * TPP와 같은 협정이 프라이버시에 미치는 영향을 경고함
     * 관련 프로젝트로는 EFF의 Surveillance Self-Defense Guide가 있음

        Hacker News 의견

     * 많은 사람들이 ""숨길 것이 없다""는 말을 단순히 따라하는 것임
     * Snowden 이후 ""이미 내 정보는 다 있다""는 패배주의적 태도가 흔함
     * 사람들은 스파이 행위가 추상적이기 때문에 무관심함
          + 큰 카메라가 창문을 통해 자신을 찍는다면 싫어할 것임
          + 그러나 스마트폰, 스마트 홈 기기, CCTV 등을 통한 데이터 수집은 신경 쓰지 않음
     * ""숨길 것이 없다""는 주장은 비사실적이고, 원칙적인 조사만을 가정함
          + 정권이 바뀌면 과거의 행동이 위험해질 수 있음
          + 예: 민주주의 단체에 자원봉사한 것이 나중에 문제가 될 수 있음
     * 정부는 항상 더 많은 감시를 원함
          + 중국의 감시와 억압 사례를 보면 알 수 있음
          + 투명성과 책임을 요구해야 함
          + 개인 정보 보호를 위해 활동이 필요함
     * ""숨길 것이 없다면 두려울 것도 없다""는 말에 문제 있음
          + 숨길 것이 있다는 것이 범죄라는 의미로 해석될 수 있음
          + 사람들은 숨길 것이 있지만, 대부분 범죄가 아님
     * ""숨길 것이 없다""는 사람들에게 화장실 문과 창문 커튼을 상기시킴
     * 일반적인 생각:
          + ""숨길 것이 없다""
          + ""이미 내 정보는 다 있다""
          + 문제는 사람들이 직접적으로 경험하지 못했기 때문임
          + 감시 시스템으로 인해 정치인이 외국 감시를 받을 수 있음
          + 보험을 받지 못한 사례가 있음
          + 데이터가 판매되거나 AI 훈련에 사용될 수 있음
          + 데이터가 평생 동안 문제를 일으킬 수 있음
          + 정권이 바뀌면 데이터가 악용될 수 있음
     * 프라이버시는 비밀이 아님
          + 프라이버시는 개인의 주권에 관한 권리임
          + 프라이버시는 권력과 관련됨
          + 프라이버시가 적을수록 개인과 사회의 권력이 약해짐
          + 프라이버시는 기본적인 인권임
     * 프라이버시 문제는 수사적 표현이 아님
          + 프라이버시를 중시하는 사람들과 정치적 허무주의의 겹침이 문제임
          + 효과적인 논쟁을 통해 투표와 정치 참여를 습관화해야 함
     * ""편의를 위해 프라이버시를 희생한다""는 주장이 더 나음
          + 편의는 큰 것이 아닐 수도 있음
          + 바쁜 삶 때문에 프라이버시를 생각하지 않기로 선택하는 것임
     * ""숨길 것이 없다면"" 할 일 목록:
         1. 모든 개인 정보를 인터넷에 공개
         2. 배우자, 자녀, 부모의 정보도 공개
         3. 자동차 키, 집 열쇠, 신용카드를 공공장소에 두고 정보 위치를 알림
         4. 몇 달 후에 결과를 알려줌
"
"https://news.hada.io/topic?id=15618","Overleaf - 오픈 소스 온라인 실시간 협업 LaTeX 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Overleaf - 오픈 소스 온라인 실시간 협업 LaTeX 에디터

     * 온라인 기반 실시간 협업 에디터로 다운로드/셋업 필요없이 바로 사용 가능
     * LaTeX를 몰라도 편집 가능한 비쥬얼 편집기와 코드 편집기
     * 수천개의 무료 템플릿
     * 상세한 가이드를 통해 LaTeX 학습 가능
     * 심리스한 협업 : 프로젝트 공유, 실시간 동시 편집/댓글/채팅, 프로젝트 히스토리 및 버전 관리(Pro기능에서)
     * 커뮤니티 버전은 오픈 소스로 제공되며 호스팅 버전도 별도로 제공됨
     * 연구실이나 직장에서 Overleaf 설치 및 유지보수를 원한다면, 공식 지원 버전인 Overleaf Server Pro를 제공
          + SSO(단일 로그인)와 같은 보안 기능, 관리 및 협업 기능(예: 변경 사항 추적)을 포함

GN⁺의 의견

     * Overleaf는 LaTeX 문서를 실시간으로 협업할 수 있는 강력한 도구로, 특히 연구자나 학계에서 유용함
     * 오픈 소스 프로젝트로서 커뮤니티의 기여를 통해 지속적으로 발전하고 있음
     * Overleaf Server Pro는 보안 및 관리 기능을 강화하여 기업 환경에서도 활용 가능함
     * Docker 이미지를 제공하여 설치 및 배포가 용이함
     * 유사한 기능을 제공하는 다른 도구로는 Authorea와 ShareLaTeX가 있음. Overleaf와 비교하여 각 도구의 장단점을 고려하여 선택할 필요가 있음

        Hacker News 의견

     * Overleaf를 LaTeX와 함께 사용한 지 오래되었음. 처음에는 웹 서비스의 장점을 이해하지 못했음. 박사 과정에서 협업 도구의 유용성을 깨달았음. Pandoc 지원이 추가되면 좋겠음
     * Overleaf와 ShareLaTeX를 박사 과정 동안 사용했음. 오픈 소스라는 사실을 몰랐음. 졸업 후 학교 계정 접근이 불가능해져 논문 컴파일에 문제가 생겼음. 오픈 소스라서 나중에 빌드를 재현할 수 있다는 점이 마음에 듦
     * Overleaf의 문서화가 LaTeX 학습에 유용했음. 제품이 AGPLv3 라이선스의 무료 소프트웨어라는 사실을 몰랐음
     * 대학 시절 Overleaf를 사용하기 시작했고, 큰 도움이 되었음. 현재는 주로 이력서 업데이트에 사용하지만 여전히 Overleaf의 강력함과 우아함을 높이 평가함
     * LaTeX를 여러 기기에서 사용하고 git으로 동기화했었음. Overleaf의 편리함이 놀라웠음. 협업 시 특히 유용함. 작은 기능들이 모여 큰 편리함을 제공함
          + 협업자에게 댓글을 남길 수 있음
          + LaTeX 문서에서 클릭하면 PDF 뷰어가 해당 위치로 스크롤됨
          + 빠른 컴파일 모드가 있어 변경 사항을 실시간으로 반영함
          + 사이드 패널에서 생성된 목차를 클릭할 수 있음
     * Overleaf의 Lua 컴파일 기능을 사용해 논문을 작성 중임. 폴더 구조에 맞춰 텍스트 파일을 자동으로 입력하고, 목차와 파일 시스템을 동기화함. 복잡한 프레임워크 개발에 유용함. 공유 방법에 대해 고민 중임
     * Overleaf의 PR 히스토리를 보면 매년 병합되는 PR이 적음. 대부분 버그 수정이나 인프라 변경임. 2022년 이후로 4개의 PR이 병합되었으며, 코드 변경은 20줄 미만임
     * Overleaf의 오픈 소스 공개가 새로운 것인지, GitHub 페이지가 왜 흥미로운지 궁금함
     * Overleaf의 협업 기능이 매우 뛰어남. Git 동기화로 해결될 줄 알았지만, Overleaf가 더 나았음. 오픈 소스라는 사실을 몰랐음
     * LyX를 많이 사용하며, LaTeX 명령어를 기억하지 않아도 되어 편리함. 특히 수식 입력 시 유용함
"
"https://news.hada.io/topic?id=15688","리눅스 관리 네트워크 스위치 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           리눅스 관리 네트워크 스위치 제작

    네트워크 스위치 관리

     * 네트워크 스위치는 간단한 장치로, 패킷이 들어오고 나감
     * 관리형 스위치는 설정을 위한 웹 인터페이스를 추가하여 복잡하게 만듦
     * 고가의 스위치는 텔넷 및 시리얼 콘솔 포트와 같은 대체 인터페이스 제공
     * 소비자 라우터 내부의 네트워크 스위치도 관리형 스위치의 한 종류임
     * 라우터는 스위치 칩을 포함한 작은 Linux 장치로, 일부 포트는 CPU에 내부적으로 연결되고 나머지는 물리적 포트로 외부에 연결됨

    나만의 기가비트 네트워크 스위치 만들기

     * 기가비트 스위치를 만드는 것은 어렵지 않음
     * Realtek 칩의 데이터 시트가 있어 설계에 도움을 줌
     * RTL8367S 칩을 선택하여 5포트 기가비트 스위치를 설계함
     * 칩의 전력 요구 사항과 통신 인터페이스가 복잡하지만, 전압 범위를 겹치게 연결하여 간단하게 해결함
     * 이더넷 설계는 정밀한 공학이 필요하지만 실제로는 저렴하게 제작 가능함

    Linux에 연결하기

     * PINE64 A64-lts 보드를 사용하여 테스트
     * 커널을 재빌드하여 필요한 모듈을 활성화함
     * 장치 트리 변경을 통해 스위치 칩을 인식하도록 설정함
     * 네트워크 인터페이스를 활성화하여 스위치를 작동시킴

    제한 사항

     * 맞춤형 네트워크 스위치를 제작하거나 기존 스위치를 개조해야 함
     * 일반 컴퓨터/서버에서는 사용이 어려움
     * USB 네트워크 인터페이스와 같은 가변적인 포트에서는 사용이 불가능함

    GN⁺의 의견

     * 이 기사는 네트워크 스위치의 내부 구조와 Linux에서의 관리 방법을 자세히 설명하여 흥미로움
     * DIY 네트워크 스위치 제작 과정은 하드웨어와 소프트웨어의 통합을 이해하는 데 도움이 됨
     * ARM 장치에서만 가능한 설정이 많아 일반 사용자에게는 접근성이 낮음
     * 비슷한 기능을 가진 상용 제품으로는 Mikrotik, Ubiquiti 등의 관리형 스위치가 있음
     * 새로운 기술을 채택할 때는 호환성, 유지보수, 커뮤니티 지원 등을 고려해야 함

        Hacker News 의견

     * 네트워크 스위치는 간단한 장치로, 패킷이 들어오고 나가는 역할을 함
          + 고급 스위치는 복잡한 ASIC을 사용하며, 예를 들어 Dell OS9 스위치는 48개의 10Gb/s 포트와 4개의 40Gb/s QSFP+ 포트를 가짐
          + 이러한 스위치는 1.28Tb/s까지 처리 가능하며, 약 £1800에 구매 가능함
          + Netgear는 모든 포트에 Power over Ethernet을 지원하는 8포트 1Gb 스위치를 약 £125에 제공함
          + 프로젝트의 재정적 타당성을 평가할 때 시간당 £20-50의 비용을 고려해야 함
          + 그러나 프로젝트 자체가 목적이라면 가격은 중요하지 않음
     * 흥미로운 프로젝트임
          + 간단한 사용을 위해 OpenWRT를 지원하는 라우터를 사용할 수 있으며, 대부분의 경우 관리형 스위치 칩을 사용함
          + OpenWRT는 VLAN 및 기타 옵션을 구성할 수 있는 좋은 인터페이스를 제공함
     * 좋은 글임, 작성해줘서 고마움
          + 처음으로 RTL83something 스위치를 창의적으로 사용하는 것을 본 것은 <a href=""https://spritesmods.com/?art=rtl8366sb"" rel=""nofollow"">이 링크</a>에서였음
          + 이후 다른 사례들도 있었지만, 본인의 경우는 '관리형 스위치 자체를 만드는 것'이었음
     * Openflow는 어떻게 되었는지 궁금함
          + 이 장치는 Openflow에 완벽한 장치일 것 같음
          + 실험실을 설정하는 것이 거의 불가능해서 흥미를 잃었음
     * rSTP를 지원하는지 궁금함
     * 10Gbps 스위치를 만들기 어렵다는 것을 읽었음
          + 가속기 칩 제조업체가 오픈 드라이버 지원을 하지 않기 때문임
          + CPU에서 스위칭하는 것은 매우 부담이 큼
     * 여러 기가비트 어댑터를 Linux 머신에 연결하고 브리지에 추가하는 것보다 이 방법의 장점이 무엇인지 궁금함
          + 하드웨어 성능이 더 좋을 것 같지만, 테스트를 해본 사람이 있는지 궁금함
     * 오해가 없기를 바람
          + 라우터보드 블록 다이어그램을 모델로 사용하여 하드웨어 스위치가 시스템의 나머지 부분과 어떻게 연결되는지 설명함
          + 그러나 그것들이 불가능하거나 다루기 어렵다고 주장함
          + 라우터보드를 사용한 적이 있는지 궁금함
          + OpenWRT는 대부분의 라우터보드에 빌드할 수 있으며, 2011 모델은 중고 시장에서 흔히 볼 수 있음
          + 항상 처음부터 만들려고 했는지, 아니면 다른 사람의 하드웨어를 사용하는 개념을 버린 이유가 있는지 궁금함
"
"https://news.hada.io/topic?id=15680","AI의 $600B(830조원) 질문","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI의 $600B(830조원) 질문

     * AI 버블이 변곡점에 도달하고 있음. 앞으로의 변화에 대처하는 것이 중요할 것임
     * 2023년 9월, ""AI의 $200B 질문""이라는 글을 발표했음. 이 글의 목적은 ""수익은 어디에 있는가?""라는 질문을 하는 것이었음
          + 당시 AI 인프라 구축에 내포된 수익 기대치와 AI 생태계의 실제 수익 증가 사이에 큰 격차가 있음을 발견했음. 이를 ""오늘날 수준의 CapEx에 대해 매년 채워야 할 1250억 달러의 구멍""이라고 표현했음
          + 최근 엔비디아가 세계에서 가장 가치 있는 회사가 되었음. 이에 앞서 많은 사람들이 나의 분석 결과에 대해 문의했음. AI의 2000억 달러 문제가 해결되었는지, 아니면 악화되었는지에 대해 궁금해 했음
     * 오늘 이 분석을 다시 실행하면 다음과 같은 결과를 얻게 됨:
          + AI의 $200B(260조원) 문제는 이제 $600B(830조원) 문제가 되었음
          + 엔비디아의 연간 매출 예측치를 가져와 2배를 곱하면 AI 데이터 센터의 총 비용을 반영할 수 있음 (GPU는 총 소유 비용의 절반을 차지함. 나머지 절반은 에너지, 건물, 백업 발전기 등을 포함함).
          + 그런 다음 다시 2배를 곱하여 GPU 최종 사용자의 50% 총 마진을 반영함 (예: Azure, AWS 또는 GCP에서 AI 컴퓨팅을 구매하는 스타트업이나 기업도 수익을 내야 함)

  변화된 사항

    1. 공급 부족 해소
          + 2023년 말 GPU 공급 부족이 최고조에 달함
          + 현재는 GPU를 쉽게 구할 수 있음
    2. GPU 재고 증가
          + Nvidia의 데이터 센터 수익의 절반이 대형 클라우드 제공자로부터 옴
          + Microsoft가 Nvidia의 Q4 수익의 약 22%를 차지함
          + 하이퍼스케일 CapEx가 역사적 수준에 도달함
    3. OpenAI의 수익 점유율
          + OpenAI의 수익이 2023년 말 16억 달러에서 현재 34억 달러로 증가함
          + ChatGPT 외에 소비자들이 실제로 사용하는 AI 제품이 많지 않음
    4. 1250억 달러의 구멍이 5000억 달러의 구멍이 되다
          + Google, Microsoft, Apple, Meta가 각각 연간 100억 달러의 새로운 AI 관련 수익을 창출할 것으로 가정함
          + Oracle, ByteDance, Alibaba, Tencent, X, Tesla가 각각 50억 달러의 새로운 AI 수익을 창출할 것으로 가정함
          + 이 가정이 맞더라도 1250억 달러의 구멍이 이제 5000억 달러로 확대됨
    5. B100의 등장
          + Nvidia가 B100 칩을 발표함
          + B100은 H100보다 2.5배 더 나은 성능을 제공하며 비용은 25%만 증가함
          + B100에 대한 수요가 급증할 것으로 예상됨

  주요 반론 (과거 인프라 구축때와의 차이점)

    1. 가격 결정력 부족
          + 물리적 인프라와 달리 GPU 데이터 센터는 가격 결정력이 적음
          + GPU 컴퓨팅은 점점 더 상품화되어 시간당 계량되고 있음
    2. 투자 소각
          + 철도와 같은 물리적 인프라와 마찬가지로 투기적 투자 열풍은 자본 소각률이 높음
          + 시장을 움직이는 엔진들에 따르면 철도에 초점을 맞춘 많은 사람들이 투기적 기술 물결 동안 많은 돈을 잃음
    3. 감가상각
          + 반도체는 시간이 지남에 따라 성능이 향상됨
          + Nvidia는 계속해서 더 나은 차세대 칩을 생산할 것임
          + 이는 이전 세대 칩의 더 빠른 감가상각으로 이어질 것
    4. 승자와 패자
          + AI는 다음 변혁적인 기술 물결이 될 가능성이 큼
          + GPU 컴퓨팅 가격 하락은 장기적으로 혁신과 스타트업에 좋음

  결론

     * AI는 엄청난 경제적 가치를 창출할 것임
     * Nvidia는 이 전환을 가능하게 한 역할로 큰 공로를 인정받아야 함
     * 투기적 열풍은 기술의 일부이며, 이를 두려워할 필요는 없음
     * AGI가 곧 올 것이라는 착각에 빠지지 말아야 함
     * 앞으로의 길은 길고 기복이 있을 것이지만, 거의 확실히 가치가 있을 것임

  GN⁺의 의견

     * AI는 엄청난 경제적 가치를 창출할 것임. 최종 사용자에게 가치를 제공하는 데 중점을 둔 회사 설립자들은 큰 보상을 받게 될 것임
     * 투기적 열풍은 기술의 일부이므로 두려워할 필요가 없음. 이 순간을 평정심 있게 지나가는 사람들은 매우 중요한 회사를 만들 기회를 갖게 됨
     * 하지만 실리콘밸리에서 전국으로, 실제로 전 세계로 퍼진 망상을 믿지 않도록 주의해야 함.
          + 그 ""망상""은 우리 모두가 빨리 부자가 될 것이라고 말하는데, 그 이유는 AGI가 내일 올 것이고 우리 모두는 유일하게 가치 있는 자원인 GPU를 비축해야 하기 때문
          + AGI가 곧 올 것이라는 착각에 빠지지 말아야 함
     * 실제로 앞으로의 길은 길 것임. 기복이 있겠지만 거의 확실히 그만한 가치가 있을 것

        Hacker News 의견

     * Jensen에 따르면 GPT-4 규모의 모델을 훈련시키려면 8000개의 H100 GPU가 90일 동안 필요함
          + Meta는 350,000개의 GPU를 보유하고 있어 매년 200개의 GPT-4 모델을 훈련시킬 수 있음
          + 이는 AI 중심 회사의 실제 이익률을 0에 가깝게 만들 가능성이 있음
          + 투자자에게는 나쁘지만, 개발자에게는 좋음
          + 모델 출력 품질의 가장 중요한 요소는 훈련에 사용되는 독점 데이터임
     * 주요 기술 회사들이 하드웨어에 막대한 투자를 하고 있음
          + 이는 90년대 후반 Sun Microsystems와 Netscape에 투자하는 것과 비슷함
          + 인터넷이 세상을 바꿀 것이라는 것은 알았지만, 어떻게 돈이 흐를지는 몰랐음
     * AI의 수익은 직접적인 것이 아니라 비용 절감과 생산성 향상에서 나옴
          + AI가 스타트업의 모든 측면에서 도움을 줌
     * 생산성 향상에 너무 많은 초점이 맞춰져 있음
          + 오락 가치에 더 많은 잠재력이 있음
          + 현재는 어설픈 앱들이 돈을 벌고 있음
          + 진정한 히트 제품이 무엇일지는 아직 모름
     * AI에 대한 투자가 성공할 가능성이 높음
          + 인터넷과 모바일의 사례를 보면, 과대 광고가 사라진 후에 성공한 회사들이 많음
     * AI가 큰 경제적 가치를 창출할 것이라는 예측이 있음
          + 그러나 이는 증거가 없는 강한 추측임
          + AI가 모든 것을 바꿀 것이라는 믿음이 있음
     * AI의 발전은 길고 험난할 것임
          + 그러나 가치가 있을 것임
          + FTX 사건이 교훈이 되었을 수도 있음
     * LLMs는 기본적인 작업에서는 뛰어나지만, 복잡한 작업에서는 한계가 있음
          + 사람들은 다른 사람을 비난하는 경향이 있음
          + 고객 대면 역할보다는 엔터테인먼트와 예기치 않은 응용 분야에서 더 많이 사용될 것임
     * 데이터센터 GPU가 모두 AI에 사용된다는 가정은 잘못됨
          + AI 비즈니스 모델이 API 사용료만 있는 것은 아님
          + AI는 이미 Google의 검색 및 광고 비즈니스에서 큰 역할을 하고 있음
     * OECD 국가들의 인구와 GDP를 고려할 때, AI에 대한 투자가 생산성을 크게 향상시킬 수 있음
          + 그러나 현재의 투자를 빠르게 회수할 수 있을지는 의문임
"
"https://news.hada.io/topic?id=15658","Meta 3D Gen - 텍스트로 3D 애셋을 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Meta 3D Gen - 텍스트로 3D 애셋을 생성

     * 텍스트에서 3D 어셋을 생성하기 위한 새로운 최첨단의 빠른 파이프라인
     * 3DGen은 프롬프트 충실도가 높고 품질이 우수한 3D 형상과 텍스처를 1분 이내에 생성할 수 있음
     * 리얼월드 어플리케이션에서 3D 어셋의 재조명에 필요한 PBR(물리 기반 렌더링)을 지원함
     * 이전에 생성된(또는 아티스트가 만든) 3D 형상의 재질감을 사용자가 추가로 제공한 텍스트 입력을 사용하여 생성적으로 변경할 수 있음
     * 3DGen은 텍스트에서 3D와 텍스트에서 텍스처 생성을 위해 개발한 Meta 3D AssetGen과 Meta 3D TextureGen이라는 핵심 기술 구성 요소를 통합함
     * 이 두 기술을 결합함으로써 3DGen은 3D 물체를 뷰 공간, 볼륨 공간, UV(또는 텍스처) 공간에서 동시에 3가지 방식으로 표현함
     * 단일 단계 모델 대비 68%의 승률을 달성함
     * 3DGen은 프롬프트 충실도와 복잡한 텍스트 프롬프트에 대한 시각적 품질 측면에서 산업계 벤치마크를 능가하면서도 훨씬 빠름

      관련 논문

        Meta 3D AssetGen: 고품질 지오메트리, 텍스처 및 PBR 재질이 있는 텍스트-메시 생성

     * AssetGen은 질감과 재질 제어로 충실하고 고품질의 메쉬를 생성하는 텍스트에서 3D 생성의 중요한 발전임
     * 3D 개체의 외관에 음영을 베이킹하는 작업에 비해 AssetGen은 실제 재조명을 지원하는 PBR 재질을 출력함
     * AssetGen은 먼저 팩터링된 음영 및 알베도 외관 채널로 개체의 여러 뷰를 생성한 다음 효율적인 감독을 위해 지연된 음영 손실을 사용하여 3D에서 색상, 금속성 및 거칠기를 재구성함
     * 또한 부호 거리 함수를 사용하여 3D 형상을 보다 안정적으로 표현하고 직접 형상 감독을 위한 해당 손실을 도입함
     * 메쉬 추출 후 UV 공간에서 작동하는 텍스처 개선 변환기가 선명도와 세부 사항을 크게 향상시킴
     * AssetGen은 소수의 뷰 재구성을 위해 최고의 동시 작업 대비 Chamfer 거리에서 17%, LPIPS에서 40%의 개선을 달성하며, PBR을 지원하는 비슷한 속도의 최고의 산업계 경쟁업체보다 72%의 사람 선호도를 달성함

        Meta 3D TextureGen: 3D 객체를 위한 빠르고 일관된 텍스처 생성

     * 텍스트 이미지 모델의 최근 가용성과 적응성으로 인해 텍스처 생성과 같은 많은 관련 분야에서 새로운 시대가 열림
     * 최근의 텍스처 생성 방법은 텍스트 이미지 네트워크를 사용하여 인상적인 결과를 달성하지만, 전역 일관성, 품질 및 속도의 조합은 실제 응용 프로그램으로 텍스처 생성을 발전시키는 데 중요함
     * 임의의 지오메트리에 대해 20초 미만으로 고품질의 전역적으로 일관된 텍스처를 생성하기 위한 두 개의 순차 네트워크로 구성된 새로운 전방 방법인 Meta 3D TextureGen을 소개함
     * 3DGen은 2D 공간의 3D 의미론에 텍스트 이미지 모델을 조건화하고 이를 완전하고 고해상도의 UV 텍스처 맵으로 융합함으로써 품질과 속도 측면에서 최첨단 결과를 달성함
     * 또한 임의의 비율로 텍스처를 확장하여 4k 픽셀 해상도 텍스처를 생성할 수 있는 텍스처 향상 네트워크를 도입함

      GN+의 의견

     * 3DGen은 3D 어셋 생성 분야에서 혁신적인 발전으로 보임. 텍스트 프롬프트에 기반한 고품질의 3D 모델을 빠르게 생성할 수 있는 기술은 게임, 영화, 디자인 등 다양한 분야에 활용될 수 있음
     * 특히 PBR 재질 지원과 이미 만들어진 3D 모델의 텍스처를 변경할 수 있는 기능은 실제 활용도를 높일 것으로 기대됨
     * 다만 텍스트 프롬프트의 의미를 정확히 파악하고 의도한 대로 3D 모델을 생성하는 것은 여전히 어려운 과제일 것임. 프롬프트 엔지니어링 기술의 발전도 함께 필요해 보임
     * 3D 모델링 분야의 전문가들이 이 기술을 어떻게 활용할지, 창의성 발현에 어떤 영향을 미칠지 궁금함. 기존 3D 모델링 도구들과의 차별성, 장단점 비교도 필요해 보임
     * Nvidia의 GET3D, Luma Lab의 Imagine 3D 등 유사한 기능을 제공하는 다른 솔루션들도 있음. 성능과 사용성 측면에서 어떤 장단점이 있을지 비교 분석이 필요함
     * 3D 모델 생성 기술의 발전으로 누구나 쉽게 원하는 3D 모델을 만들 수 있게 되면서, 3D 모델의 저작권 문제, 악용 가능성 등 새로운 이슈들이 대두될 수 있음. 이에 대한 사회적 논의와 합의 도출이 필요해 보임

        Hacker News 의견

     * 한 사용자는 생성 AI의 주요 측면으로서 3D 모델링의 발전을 긍정적으로 보고 있으며, 특히 VR 자산 생성의 어려움을 언급함
          + 실세계 아이템을 3D 프린팅할 수 있는 모델을 AI가 텍스트, 사진, LIDAR 등의 입력을 통해 만들 수 있는 가능성에 관심을 가짐
     * 다른 사용자는 VR 콘텐츠 생성이 매우 노동 집약적이라며, 3D 모델 생성 도구가 메타버스의 주요 촉진제가 될 것이라고 기대함
     * 또 다른 사용자는 최근의 텍스트/이미지에서 3D 모델로 변환하는 서비스들이 모두 쓸모없는 결과물을 생성했다고 평가함
     * 한 사용자는 PBR 텍스처링 파이프라인을 사용하여 전체 시스템을 실행하는 것이 매우 인상적이라고 언급함
          + SDFs(서명 거리 필드)의 사용이 나쁜 토폴로지를 초래할 수 있는지 궁금해함
          + 게임 준비가 된 토폴로지를 구축하는 논문을 언급하며, 애니메이션을 위한 리깅이 가능할 것이라고 봄
     * 다른 사용자는 토폴로지가 좋지 않다는 것을 와이어프레임의 부족으로 알 수 있다고 언급함
     * 한 사용자는 디지털로 현실을 재현하는 또 다른 선구적인 단계라고 생각함
          + 사람의 상태에 반응할 수 있다면, 안전한 환경에서 현실에서 다루기 어려운 시나리오를 학습할 수 있을 것이라고 봄
          + 가상 세계에서 배운 교훈을 바탕으로 새로운 출생처럼 현실 세계로 나올 수 있을 것이라고 함
     * 또 다른 사용자는 간단한 3D-to-3D 변환이 곧 가능해질 것이라고 기대함
          + 이를 통해 오래된 게임의 메쉬와 텍스처를 업스케일하고 싶다고 함
     * 한 사용자는 예술가의 입력이 있다면, 생성된 모델을 나중에 편집하거나 시작점으로 사용할 수 있을 것이라고 상상함
          + 또는 PS1 필터를 적용하여 레트로 게임을 만들 수 있을 것이라고 언급함
     * Meta 3D Gen이 VR 응용 프로그램을 위한 3D 콘텐츠 생성에서 중요한 진전을 나타낸다고 평가함
          + 텍스트 입력으로부터 상세한 3D 모델을 생성하는 능력이 콘텐츠 생성 과정을 크게 단축시킬 수 있을 것이라고 봄
          + 그러나 현재 기술은 고품질의 상세한 기하학을 생성하는 데 여전히 도전 과제가 있다고 언급함
          + PBR 텍스처링의 통합은 유망하지만, 실제 응용에서 모델이 얼마나 잘 다듬어지고 활용될 수 있는지가 관건이라고 봄
     * 마지막으로, 한 사용자는 신경망을 사용한 스크린드 포아송 표면 재구성의 대체 기술을 보고 싶다고 함
          + MeshAnything을 봤지만 그것이 최종 목표는 아니라고 언급함
"
"https://news.hada.io/topic?id=15595","모자이크와 넷스케이프의 기원 이야기 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       모자이크와 넷스케이프의 기원 이야기 [비디오]

Marc와 Ben의 이야기

     * Marc와 Ben이 웹 브라우저의 기원과 발명에 대해 이야기함
     * Marc는 웹 브라우저의 공동 발명자 중 한 명으로, 이 이야기는 처음으로 전체적으로 정확하게 다뤄짐
     * 웹 브라우저는 대부분의 사람들이 인터넷을 경험하는 방식이며, Chrome과 같은 브라우저를 통해 Facebook 링크나 Twitter 링크를 클릭할 때 사용하는 것임

Mosaic와 Netscape의 기원

     * Marc Andreessen이 Mosaic와 Netscape의 기원에 대해 이야기함
     * 초기에는 벤처 자본에 대한 개념이 없었음
     * 웹 브라우저의 발명은 인터넷 경험을 혁신적으로 변화시킴

GN⁺의 의견

     * 이 기사는 웹 브라우저의 기원에 대한 흥미로운 역사적 배경을 제공함
     * 웹 브라우저의 발명은 인터넷 사용 방식을 근본적으로 변화시켰으며, 이는 현대 인터넷의 기초가 됨
     * Mosaic와 Netscape는 현재의 Chrome, Firefox, Safari와 같은 브라우저의 선구자 역할을 했음
     * 이 이야기는 기술 혁신이 어떻게 이루어졌는지에 대한 통찰을 제공하며, 벤처 자본의 중요성을 강조함
     * 비슷한 기능을 가진 프로젝트로는 Brave, Vivaldi 등이 있으며, 각 브라우저는 고유한 특징과 장점을 가지고 있음

        Hacker News 의견

     * 비디오 플레이어가 잘 작동하지 않아서 YouTube 버전을 공유함
          + YouTube 링크
     * Spyglass와 Microsoft 상황에 대한 일부 세부 사항이 정확하지 않다고 생각함
          + Spyglass 브라우저 팀의 프로젝트 리드였기 때문에 한 가지 수정 사항을 제공할 수 있음
          + Mosaic 코드를 라이선스했지만 사용하지 않았고, Spyglass Mosaic은 처음부터 작성되었음
          + Marc의 회상은 대체로 정확하며, 몇 가지 새로운 정보를 공유함
          + Netscape가 우리를 이겼지만, 우리는 우리보다 5배 더 많은 비용을 들이지 않은 모든 사람을 이겼음
          + Marc처럼 유명해지거나 부자가 되지는 않았지만, 많은 것을 배웠고 이 이야기에 참여하게 되어 감사함
     * 그래픽 브라우저 이전의 www에 실망했었음
          + Gopher가 더 우수하다고 느꼈음
          + 그래픽 웹 브라우저에 대해 잡지에서 읽었지만, 당시에는 연결이 어려웠음
          + Brooklyn에 있는 한 사람이 인터넷에서 음악을 판매하는 웹사이트를 운영하고 있었음
          + 그의 사무실을 방문하여 그래픽 브라우저로 웹사이트를 봄
          + 그의 로고는 반쯤 짜여진 치약 튜브와 ""sound tube""라는 단어가 있었음
          + 마지막으로 방문했을 때는 ""what could have been""이라는 부제가 추가되었음
          + 가끔 sound tube에 대한 정보를 찾으려고 함
          + 사라진 것 같지만, 단지 실종되었기를 바람
     * Marc가 뉴스그룹에 대해 이야기하는 것을 들으니 강한 향수를 느낌
          + 현재는 웹 브라우징의 베테랑이지만, Netscape의 말기에 오픈 소스 해커로 시작했었음
          + Netscape 엔지니어들이 npm에 앉아 있는 것을 발견했었음
     * 뉴스그룹에서 매일 사용하는 브라우저에 대해 질문하면 작업 중인 사람이 답변해주는 것이 놀라웠음
          + Netscape는 살아남지 못했지만, 큰 유산을 남겼음
     * Michael Lewis의 ""The New New Thing""을 읽었는데, Netscape가 Jim Clark의 컴퓨터 항해 요트를 자금 조달하기 위한 빠른 부자 되기 계획이었다고 주장함
          + Microsoft가 회사를 6개월 안에 무용지물로 만들 것이라는 것을 알고 있었음
          + 투자자들이 그 사실을 빨리 알아차리지 못할 것이라고 내기했음
          + 그의 예측이 맞았음
     * 프로토콜이 얼마나 개방적인지 강조한 것에 놀랐음
          + 코드를 요청하는 양식을 메일로 보낼 수 있었음
          + 양식에 왜 코드를 원하는지 물어봤고, 서버를 작성하기 위해 프로토콜을 배우고 싶다고 했음
          + 개인에게는 코드를 공개할 수 없다는 답변을 받았음
          + 다른 정보 출처가 있었을 수도 있지만, 그들은 알려주지 않았음
     * 1998년에 1994년 Netscape Mosaic v 0.93 Beta가 담긴 플로피를 발견했음
          + 개인 사이트에 여러 정보를 공유했음 (인터넷 아카이브에 감사)
          + http://www.jeremie.com/misc/moz/"">링크
          + Slashdot에도 게시했었음
          + 링크
     * NCSA에서 약 10년 동안 일했음
          + 당시 개발된 도구들에 대해 듣는 것이 놀라웠음
          + 많은 도구들이 협업에 중점을 두었지만, Mosaic만큼 성공하지 못했음
          + XCMD, Contours, PalEdit, Montage 같은 도구들은 찾기 어려움
          + Habanero 같은 도구는 비교적 더 큰 영향을 남겼음
          + 링크
     * 자신의 지능을 과대평가할 수 있음
          + 리스트에서 이메일을 받고, 이상한 것을 다운로드하고 시도했었음
          + Mosaic이었고, 완전히 잘못된 판단을 했었음
          + 현재 Firefox 웹 브라우저를 사용하면서 말함
          + 마지막으로 telnet을 사용한 것이 언제인지 기억나지 않음
     * Mosaic에 대해 이야기했을 때 네트워크 관리자의 절망적인 표정을 기억함
          + ""한 번 보기 위해 수백 KB를 다운로드한다고!?""라는 반응이었음
          + 당시 벨기에 전체에서 가장 많은 인터넷 대역폭을 가진 2 Mbit 링크 뒤에 있었음
"
"https://news.hada.io/topic?id=15716","Until - 깃허브와 유사한 기술 블로그 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Until - 깃허브와 유사한 기술 블로그 플랫폼

     * 깃허브에 TIL(Today-I-Learned)을 하는 사람들을 보고 아이디어 착안
     * 글 또는 댓글을 작성하면 본인 블로그 프로필에 잔디가 심어지는 시스템
     * 깃허브와 유사한 프로필, Overview 또한 작성 가능함
     * 노션과 유사한 에디터를 지원하고 있음
     * 피드, 랭킹 등 다양한 커뮤니티 기능 제공
"
"https://news.hada.io/topic?id=15728","스타크래프트: 두 개의 막으로 본 역사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스타크래프트: 두 개의 막으로 본 역사

Act 1: Starcraft the Game

     * Blizzard Entertainment의 성공과 기대
          + 1995년 Warcraft: Orcs and Humans의 성공 이후, Blizzard는 다양한 프로젝트를 시작했음
          + Starcraft는 Warcraft II 엔진을 사용하여 빠르게 개발될 예정이었음
     * E3 1996에서의 첫 공개
          + Starcraft의 초기 버전은 게임 기자들로부터 혹평을 받았음
          + Blizzard는 프로젝트를 재검토하고 Starcraft와 Diablo만 남기기로 결정했음
     * Blizzard의 새로운 운영 방식
          + 적은 수의 게임을 출시하되, 모든 게임을 최고 수준으로 만들기로 함
          + Starcraft는 1998년 3월에 출시되었으며, Warcraft III는 2002년에 출시되었음
     * Starcraft의 혁신적인 디자인
          + 세 가지 독특한 진영: Terran, Zerg, Protoss
          + 각 진영은 고유한 플레이 스타일을 가졌으며, 비대칭 디자인을 채택했음
          + 싱글 플레이 캠페인은 세 진영을 순차적으로 플레이하도록 구성되었음
     * 멀티플레이어와 Battle.net
          + Battle.net은 Diablo와 함께 출시되었으며, Starcraft의 멀티플레이어 성공에 큰 기여를 했음
          + 게임의 균형을 맞추기 위해 Rob Pardo가 투입되었음
     * Starcraft의 출시와 성공
          + 1998년 3월 27일 출시, 첫 9개월 동안 150만 장 이상 판매
          + Battle.net의 동시 접속자 수는 10만 명을 넘었음

Act 2: Starcraft와 관전 스포츠의 부상

     * Starcraft와 e스포츠의 탄생
          + Starcraft는 균형 잡힌 게임 디자인 덕분에 e스포츠에 적합했음
          + 빠른 경기 진행과 복잡한 전략 덕분에 관전 스포츠로 인기를 끌었음
     * 한국에서의 Starcraft 인기
          + 1997년 경제 위기 이후 PC방이 급증하며 Starcraft가 큰 인기를 끌었음
          + PC방은 빠른 인터넷 연결을 제공하며, 많은 사람들이 Starcraft를 즐겼음
     * 프로 e스포츠의 시작
          + 황형준이 Tooniverse에서 Starcraft 토너먼트를 방송하며 큰 인기를 끌었음
          + OnGameNet 채널이 설립되었고, Starcraft 선수들은 전국적인 유명인이 되었음
     * Starcraft의 전성기
          + 2002년 서울에서 열린 결승전에는 2만 명의 팬이 참석했음
          + 스타 선수들은 연간 수십만 달러를 벌었으며, Starcraft는 한국에서 가장 인기 있는 스포츠 중 하나가 되었음
     * Starcraft II와 e스포츠의 변화
          + 2010년 Starcraft II 출시, 그러나 원작만큼의 인기를 끌지 못했음
          + League of Legends가 새로운 e스포츠 강자로 떠오름

GN⁺의 정리

     * Starcraft는 Blizzard의 혁신적인 게임 디자인과 균형 잡힌 플레이 덕분에 큰 성공을 거두었음
     * 한국에서의 경제 위기와 PC방 문화가 Starcraft의 인기에 큰 기여를 했음
     * Starcraft는 e스포츠의 탄생과 발전에 중요한 역할을 했으며, 오늘날의 e스포츠 문화에 큰 영향을 미쳤음
     * Starcraft II는 원작만큼의 인기를 끌지 못했지만, League of Legends와 같은 게임들이 그 뒤를 이었음

        Hacker News 의견

     * Blizzard의 StarCraft 판매팀은 한국에서 첫 해에 4,000부 판매를 예상했으나, 실제로는 100배 이상 팔림
     * Pat Wyatt의 블로그를 읽어보면 초기 StarCraft 개발에 대한 기술적인 관점을 얻을 수 있음
     * Blizzcon 2018에 참석한 경험이 매우 기억에 남음
          + StarCraft의 정점이었고, 첫 비한국인 챔피언 Serral을 본 순간이었음
          + Serral은 한국 선수들과의 경기에서 언더독이 아니었음
          + 그의 겸손하고 존경스러운 말이 매우 영감을 주었음
     * 한국에서 StarCraft가 히트한 이유 중 하나는 50년간의 일본 문화 수입 금지가 1998년 말부터 완화되었기 때문임
          + 국내 암호화 요구사항도 한국 컴퓨팅 환경의 독특함을 설명함
     * StarCraft 2의 경로 찾기 기능이 매우 인상적임
          + 수백 개의 유닛이 물처럼 움직이는 방식이 놀라움
          + 특별한 기술이 무엇인지 궁금함
     * 최근 Brood War를 재설치했음
          + Battle.net 에뮬레이션의 현재 상태를 알고 싶음
          + Microsoft-Vivendi-Activision-Zenimax-Blizzard의 간섭 없이 온라인으로 플레이하고 싶음
     * SC2 출시 후 논의가 줄어든 것이 아쉬움
          + Pro Brood War는 여전히 활발하며, 덜 착취적인 비즈니스 모델을 가짐
          + 새로운 빌드가 계속 개발되고 있음
          + SC:BW의 밸런스 접근 방식에 대한 심층 분석을 원함
     * SC2의 게임플레이가 SC1/Brood War만큼 재미있지 않다고 생각함
          + SC1/Brood War의 원초적인 느낌이 SC2에서는 사라진 것 같음
     * Giyom (Gulliaume Patry)의 근황이 궁금함
          + ElKY (Bertrand Grospeller)는 유명한 포커 플레이어가 되었음
     * Blizzard가 온라인 계정을 만들어야만 싱글 플레이어 게임을 할 수 있게 했을 때 게임을 그만두었음
          + LAN 플레이가 없어짐
          + 이러한 마찰이 게임의 인기를 떨어뜨릴 수 있다고 생각함
"
"https://news.hada.io/topic?id=15641","도시의 나무 부족 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              도시의 나무 부족 문제

     * 도시에 더 많은 나무가 필요함
     * 저는 세계에서 가장 푸른 도시로 알려진 요하네스버그 근처에서 자랐음
          + 여름에는 도시 전체가 녹색으로 덮여 있음
          + 그러나 원래 이 땅은 이렇게 생기지 않았음
     * 요하네스버그는 1886년 금이 발견된 후 설립되었음
          + 금 추출은 다른 지역과 다르게 암석에서 직접 추출해야 함
          + 이 과정에서 수백만 톤의 암석이 분쇄되고, 이는 독성 및 방사능을 띤 큰 먼지 언덕을 만듦
     * 이러한 먼지를 억제하기 위해 나무를 심는 것이 제안되었음
          + 2024년 기준으로 120만 그루의 나무가 심어졌음
          + 그러나 아파르트헤이트로 인해 나무 심기 노력은 공평하게 분배되지 않았음
          + 부유한 지역과 가난한 지역 간의 나무 덮개 차이는 여전히 존재함
     * 나무 심기가 도시에 미친 영향
          + 나무는 큰 그늘을 만들어 도시의 열섬 효과를 완화함
          + 나무는 먼지와 열뿐만 아니라 소음도 줄여줌
          + 나무가 있는 거리는 더 아름답고, 생물 다양성을 증가시킴
          + 나무는 새들에게 안전한 피난처를 제공함
     * 나무가 잘 심어진 도시와 그렇지 않은 도시의 차이는 매우 큼
          + 그늘진 거리가 있는 도시는 걷기 좋고, 지역 상점을 방문하거나 공원 벤치에 앉는 것이 더 즐거움
     * 나무 심기는 환경 보호나 탄소 포집의 일환으로는 성공적이지 않을 수 있음
          + 대부분의 나무가 성숙하지 못함
          + 나무 심기가 환경의 알베도 효과로 인해 오히려 온난화를 초래할 수 있음
          + 그러나 도시에 나무를 심는 것은 거의 단점이 없음
     * 다음에 그늘진 거리를 걸을 때 나무를 감상해보길 바람

GN⁺의 의견

     * 이 글은 도시 환경에서 나무의 중요성을 강조하고 있음. 나무는 열섬 효과를 줄이고, 소음을 감소시키며, 생물 다양성을 높이는 등 다양한 이점을 제공함
     * 나무 심기는 환경 보호 측면에서 항상 성공적이지 않을 수 있지만, 도시에 나무를 심는 것은 거의 단점이 없음
     * 이 글은 도시 계획자나 환경 보호 활동가들에게 유용할 수 있음. 나무 심기의 중요성을 이해하고 이를 도시 계획에 반영하는 것이 중요함
     * 유사한 기능을 가진 프로젝트로는 도시 녹화 사업이나 공원 조성 프로젝트 등이 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 장단점을 고려해야 함. 나무 심기의 경우, 적절한 관리와 유지보수가 필요함

        Hacker News 의견

     * 네덜란드 위트레흐트에서는 여름철 열 스트레스를 줄이기 위해 도시를 녹화하려는 노력을 하고 있음
          + 가능한 많은 나무와 식물을 심고, 잔디를 자주 깎지 않으며, 타일 정원을 제거하고 녹지를 추가하도록 권장함
          + 지붕을 녹색 지붕으로 바꾸는 프로그램도 있음
          + 이러한 노력 덕분에 도시가 더 살기 좋게 느껴짐
     * 미국 도시의 나무 관련 위험 회피에 대한 불만이 있음
          + 샌프란시스코에서는 가지가 떨어질 위험 때문에 나무를 가지치기하고 제거함
          + 도로 가시성, 표지판, 전기 케이블 등으로 인해 나무를 심을 수 있는 장소에 많은 제한이 있음
          + 결과적으로 나무가 거의 없는 공간이 많음
          + 반면 멕시코시티는 도시 녹화가 거의 무질서하게 이루어짐
          + 나무가 거리와 인도를 넘쳐나지만, 도시가 걷기에 매우 쾌적함
     * 영국 셰필드에서는 거리의 나무를 베어낸 것 때문에 시의회가 거의 무너질 뻔했음
          + 여전히 그 영향에서 완전히 회복되지 못함
     * 남부 캘리포니아를 방문했을 때, 공항에서 내리자마자 녹지가 거의 보이지 않아 지옥 같은 느낌을 받았음
          + 런던과 비교했을 때 거의 살기 힘들어 보였음
          + 그리피스 천문대 주변만이 정말로 편안하게 느껴졌음
     * 솔트레이크시티에서는 물 절약을 위해 주거지 소유자에게 자갈 경관을 조성하도록 장려하고 있음
          + 한 세기 넘게 사막을 아름다운 녹지로 바꾸었지만, 이제는 녹지를 제거하고 콘크리트와 아스팔트 정글을 건설하고 있음
          + 정치인이 나무가 물을 너무 많이 흡수한다고 주장하며 나무를 베어야 한다고 말한 적도 있음
          + 주거용 물 사용은 거의 한 자릿수 퍼센트에 불과하지만, 새로운 개발에는 물 시스템이 포함되지 않음
          + 도시가 라스베이거스와 LA처럼 지옥 같은 모습으로 변해가는 것이 걱정됨
     * 동유럽에서 서유럽으로 이사했을 때 주거 지역에 그늘이 부족한 것이 매우 불편했음
          + 공원은 있지만, 건물 주변에 충분한 그늘이 없음
          + 기온이 상승하면서 많은 집들이 하루 종일 햇볕에 노출됨
          + 빠르게 성장하는 도시에서 새로운 주거지 주변에는 나무가 거의 없음
     * 시드니에서도 부유한 지역과 가난한 지역의 나무 덮개 차이가 뚜렷함
          + 부유한 지역은 나무 덮개가 많지만, 가난한 서부 시드니 지역은 나무가 거의 없음
          + 부유한 지역이 나무를 심을 여유가 있는 것일 수도 있고, 나무가 있는 지역이 더 쾌적해서 부유한 사람들이 선호하는 것일 수도 있음
     * 나무를 베는 것은 비용만 생각하고 이점을 고려하지 않는 게으른 사고에서 비롯됨
     * 도로 유지 관리 부서가 나무 유지 관리도 담당해야 함
          + 도로를 확장할 때 나무를 심거나 옮기는 계획을 포함해야 함
     * 도시에 나무를 심는 것은 거의 단점이 없음
          + 다음에 그늘진 거리를 걸을 때 나무를 올려다보고 감사해야 함
"
"https://news.hada.io/topic?id=15689","CP-SAT와 Python을 활용한 제약 프로그래밍 실용 입문","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CP-SAT와 Python을 활용한 제약 프로그래밍 실용 입문

    제약 프로그래밍을 이용한 실용적인 소개: CP-SAT와 Python

      선언적 패러다임

     * **제약 프로그래밍(CP)**은 이산 최적화 문제를 해결하기 위한 선언적 패러다임임
     * 명령형 프로그래밍과 달리, 원하는 결과를 기술하고 프로그램이 스스로 결과를 도출함
     * 예를 들어, 성인 명단을 추출하는 경우 명령형 접근법과 선언적 접근법의 차이를 설명함

      제약 프로그래밍(CP)의 기본

     * 모델: 문제의 원하는 결과를 기술하는 것
     * 변수: 찾고자 하는 값, 각 변수는 도메인(허용되는 값의 집합)을 가짐
     * 제약 조건: 변수 간의 관계를 기술함
     * 해결책: 변수에 값을 할당하여 제약 조건을 만족시키는 것

      Python과 CP-SAT를 이용한 실용적인 예제

     * 문제: 직원의 주간 근무 일정을 생성하는 것
     * 모델 생성: CP-SAT를 사용하여 빈 모델을 생성함
     * 데이터: 직원 목록과 역할, 근무일, 근무 교대 시간 정의
     * 변수 정의: 각 직원의 근무 여부를 나타내는 불리언 변수 생성
     * 제약 조건 추가: 문제 설명에 따라 변수에 제약 조건을 추가함

      모델 해결

     * 해결: 모델을 해결하고 결과를 도출함
     * 추가 제약 조건: 초과 근무 방지, 특정 직원의 근무 시간 제한, 특정 직원 간의 근무 시간 겹침 방지 등 추가 제약 조건을 추가함

      중간: 해결 상태

     * 해결 상태: 최적, 실행 가능, 실행 불가능, 알 수 없음 등의 상태를 반환함
     * 예시: 간단한 예제를 통해 각 상태를 설명함

      ""미안해, Emma""

     * 실행 불가능 상태: Emma가 주중 5일을 쉬는 것은 불가능함
     * 대안 제안: Emma가 주중 3일만 쉬도록 제안함

      목표: 근무 시간의 균등 분배

     * 목표 추가: 근무 시간을 균등하게 분배하기 위해 목표를 추가함
     * 결과: 각 직원의 근무 시간이 균등하게 분배됨

      결론

     * 기본 개념 소개: 제약 프로그래밍의 기본 개념을 소개하고 실용적인 예제를 통해 설명함
     * 다음 기사 예고: 다음 기사에서는 Postgres의 인덱스 선택에 제약 프로그래밍을 사용하는 방법을 다룰 예정임

    GN⁺의 의견

     * 제약 프로그래밍의 유용성: 복잡한 최적화 문제를 해결하는 데 매우 유용함
     * CP-SAT의 강점: Google의 OR-Tools 프로젝트의 일환으로 개발된 CP-SAT는 강력한 성능을 자랑함
     * 실제 적용 사례: 직원 근무 일정 생성과 같은 실제 문제에 적용 가능함
     * 기술 채택 고려 사항: 새로운 기술을 채택할 때는 학습 곡선과 기존 시스템과의 통합 문제를 고려해야 함
     * 유사 프로젝트 추천: IBM의 CPLEX, Gurobi 등의 상용 솔버도 유사한 기능을 제공함

        Hacker News 의견

     * 과거에 제약 해결기를 사용한 경험이 있으며, 이 도구들이 매우 놀라운 성능을 발휘함
          + 문제는 초보자를 위한 자료가 거의 없다는 점임
          + 대부분의 자료는 스도쿠 해결 방법이나 고도로 기술적인 연구 자료임
          + 더 많은 문제를 해결할 수 있는 도구들이 더 접근 가능했으면 좋겠음
          + 접근 가능하다는 것은 여전히 프로그래머가 필요하다는 의미임
     * MiniZinc와 Python을 사용하는 짧은 챕터를 내 오래된 책에서 재작성 중임
          + MiniZinc는 제약 프로그래밍 시스템임
          + Coursera에서 MiniZinc를 사용하는 좋은 강의가 있음
     * 많은 프로그램들이 단일 데이터 표현을 가지려고 노력하는데, 이는 대부분의 경우 비합리적임
          + 새로운 표현으로 알고리즘을 작동시키기 위해 많은 왜곡이 필요함
          + 더 자주 표현을 변환하지 않는 것이 항상 아쉬움
          + 표현을 변환하면 매우 간결한 표현을 얻을 수 있으며, 이는 더 빠른 실행을 가능하게 함
     * 스포츠 캠프를 운영하는 고객이 있음
          + 아이들이 원하는 스포츠와 친구를 요청할 수 있음
          + 이는 인간에게는 어려운 일정 문제를 만듦
          + OR-Tools 기반의 최적화 도구를 사용하여 간단한 시스템을 구축함
          + 이제 몇 번의 클릭으로 일정이 완료됨
     * 2000년대 초반에 많은 해결기를 사용한 경험이 있음
          + 현재는 Python을 사용하는 소프트웨어(웹) 작업 중임
          + 이 주제에 대한 깊은 탐구를 보게 되어 기쁨
          + 제약을 모델로 변환하는 것이 작업의 90%이며 가장 어려운 부분임
     * 주로 제약 해결기로 작동하는 파라메트릭 CAD가 있는지 궁금함
          + 초기에는 신경 쓰지 않는 매개변수 값을 추정해야 하는 것이 자주 불편함
          + 대신 관심 있는 매개변수를 제약하고 나머지를 최적화하고 싶음
     * 혼합 정수 프로그래밍과 비교하면 어떨지 궁금함
"
"https://news.hada.io/topic?id=15655","Ladybird 웹 브라우저 - GitHub 설립자로부터 100만 달러를 받으며 비영리 단체가 되다 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Ladybird 웹 브라우저 - GitHub 설립자로부터 100만 달러를 받으며 비영리 단체가 되다

     * GitHub 창립자 Chris Wanstrath와 SerenityOS 및 Ladybird 웹 브라우저 창립자 Andreas Kling이 협력하여 ""The Ladybird Browser Initiative""라는 비영리 단체를 설립함
     * 목표는 광고나 기업 자금 없이 새로운 웹 브라우저를 개발하는 것
     * 2026년까지 완전한 ""알파"" 버전을 출시하는 것을 목표로 함

  Ladybird 자금 조달

     * 약 1년 전, Shopify로부터 10만 달러의 첫 후원을 받음
     * 이제 GitHub 창립자로부터 100만 달러의 지원을 받아 501(c)(3) 비영리 단체로 전환함
     * 사용자 데이터를 상품으로 취급하지 않는 유일한 주요 웹 브라우저가 되기를 목표로 함
     * 광고 없는 브라우저
          + 오늘날 모든 주요 브라우저 엔진은 오픈 소스이지만, 여전히 한 가지 문제가 있음.
          + 그들은 모두 Google의 광고 제국에 의해 자금을 지원받고 있음
          + Chrome, Edge, Brave, Arc, Opera는 모두 Google의 Chromium을 사용함
          + Apple은 Google을 Safari의 기본 검색 엔진으로 만들기 위해 수십억 달러를 받고 있으며, Firefox는 매년 수억 달러를 받는 유사한 거래를 맺고 있음
     * 세상은 사람을 최우선으로 하고, 새로운 엔진을 사용하여 개방형 표준에 기여하며, 광고의 영향에서 자유로운 브라우저가 필요함

  비즈니스 모델

     * 후원 및 기부
          + 전통적인 사용자 수익화 모델 대신, 후원 및 기부로 자금을 조달함
          + 소프트웨어와 소스 코드는 무료로 제공됨
     * 기업 통제 없음
          + ""우리의 비영리 단체는 제한 없는 기부 이외의 기업 거래나 수익을 추구하지 않을 것입니다.""라는 선언이 흥미로움
          + 기업 거래나 마케팅 캠페인을 하지 않음
          + 이사회 좌석을 판매하지 않음

  현재 상태

     * 개발 진행 상황
          + 2026년까지 첫 공개 ""알파"" 버전을 목표로 함. 아직 멀어 보이지만(2026년으로 예정됨), 현재 개발 버전은 이미 상당히 진행되었음.
          + 현재 일부 일상적인 브라우징이 가능하며, 커뮤니티가 활발히 버그를 수정하고 기능을 추가하고 있음

  ""버즈워드""를 쫓지 않음

     * 집중된 목표
          + 웹 브라우저 개발에만 집중하며, 다른 수익 모델을 찾지 않음
          + 광고나 빅 테크의 영향을 받지 않음

    GN⁺의 의견

     * 광고의 영향에서 자유롭고 새로운 엔진을 가진 브라우저를 만들려는 Ladybird의 목표는 굉장히 중요하고 가치 있는 일임.
       하지만 실제로 그것을 이루기까지는 많은 난관이 있을 것임.
     * Ladybird가 후원과 기부만으로 브라우저 개발을 지속할 수 있을지는 미지수이며, 추후 상업적 거래 등을 고려해야 할 수도 있음. 장기적으로 지속 가능한 비즈니스 모델을 만들어 가는 것이 관건임.
     * 현재 웹 표준은 크롬 중심으로 발전해 왔기에, 완전히 새로운 엔진으로 호환성을 확보하는 게 쉽지 않을 것임. 개발에 상당한 시간과 비용이 소요될 것으로 보임.
     * 브라우저 엔진 개발의 어려움으로 인해 과거 오페라, 마이크로소프트 등도 자체 엔진을 포기하고 크로미움으로 전환한 바 있음. Gecko 엔진을 쓰는 파이어폭스조차 고전하는 상황에서 완전히 새로운 엔진이 시장에서 살아남기는 쉽지 않을 것임.
     * 프라이버시 보호에 초점을 맞춘 Brave, 광고 차단에 특화된 오페라 등 특정 기능을 앞세운 브라우저들이 나름의 시장을 형성하고 있음. Ladybird도 차별화된 기능이나 타겟 사용자층을 고민해 볼 필요가 있음.
     * 현재로서는 완성도 높은 알파 버전 출시가 가장 중요한 목표일 것임. 2026년까지 기능적으로 성숙하고 안정적인 브라우저를 선보일 수 있을지 지켜봐야 할 것임.

     * Ladybird - 새로운 크로스플랫폼 브라우저 프로젝트
     * Ladybird - 새로운 웹브라우저 & 웹엔진
     * Ladybird 브라우저의 비상
     * Firefox에 펀딩하지 못해서 Ladybird에 펀딩함

        Hacker News 의견

     * Ladybird 창립자가 비영리 단체 설립과 $1M 기부를 발표함
     * Ladybird는 SerenityOS 취미 프로젝트의 일부로 시작되었으며, C++를 사용함
          + SerenityOS는 C++만 허용했기 때문에 개인적인 편의로 선택된 언어였음
          + 현재 Ladybird는 독립 프로젝트로 분리되었고, 다른 언어로의 전환을 검토 중임
     * 한 사용자는 Ladybird 프로젝트에 기대감을 표하며, Firefox의 사용자 맞춤 기능에 대한 불만을 언급함
          + Ladybird가 성장하면서 프라이버시, 보안, 사용자 맞춤 기능을 고려해주길 바람
     * 라이선스에 대한 언급이 없지만, GitHub 저장소에서 2-clause BSD 라이선스를 사용함을 확인함
          + GPLv3 웹 브라우저의 필요성을 강조하며, 독점 포크의 위험성을 언급함
     * Mozilla의 2022년 자산과 수익을 비교하며, Ladybird의 성공을 기원함
     * 프로젝트는 좋지만 웹사이트 디자인이 차갑고 무미건조하다는 의견이 있음
          + 더 나은 로고와 디자인을 사용한 예시를 공유함
     * 많은 사람들이 Andreas에게 조언을 하는 것을 보고 놀라워함
          + 프로젝트에 대한 많은 완벽한 풀 리퀘스트를 기대함
          + Andreas에게 축하를 전하며, 계속 신념을 유지해주길 바람
     * 웹사이트 디자인에 대한 비판이 과하다는 의견이 있음
          + 디자인이 기능적이고 프로젝트가 명확히 전달된다고 생각함
          + AI 노트북과 평범한 로고는 아쉬움
     * 웹사이트 디자인이 무미건조하고 미성숙한 프로젝트처럼 보인다는 비판이 있음
          + 프로젝트의 번영을 기원함
     * 자신이 디자인한 웹사이트가 Hacker News의 상위에 오른 것에 대한 자부심을 표현함
          + Chris Wanstrath에게 감사 인사를 전하며, Ladybird가 주류 브라우저가 되길 바람
          + 자신의 UI/UX 포트폴리오를 공유함
"
"https://news.hada.io/topic?id=15649","2024년 AI 클라우드를 정의하는 5가지 트렌드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2024년 AI 클라우드를 정의하는 5가지 트렌드

# AI 파운데이션 모델이 Big Tech의 새로운 전쟁의 무대를 마련함

     * 모든 기술 변화는 기반(파운데이션) 계층을 제어하기 위한 경쟁을 촉발시킴. AI 시대도 예외는 아님
     * 파운데이션 모델은 다운스트림 AI 애플리케이션과 도구를 추진할 새로운 ""기름(Oil)""임
     * 2023년에 파운데이션 모델 기업들은 AI 벤처 펀딩의 60% 이상을 차지
          + OpenAI, Anthropic, Mistral, Cohere 등은 1,240억 달러의 시가총액으로 230억 달러를 모금
          + 특히 이 자본 유입은 주로 기업 VC에 의해 주도, 모건 스탠리에 따르면 2023년 민간 GenAI 펀드레이징의 90%를 차지함(2022년 40%에서 증가)
          + Microsoft, Google, Amazon, NVIDIA, Oracle 같은 빅테크 기업들은 이제 파운데이션 모델 기업에 상당한 지분을 보유하고 있음
          + 이러한 투자는 이들 기술 대기업의 AI 역량을 강화하고 핵심 클라우드 및 컴퓨팅 서비스의 소비를 촉진하기 위해 전략적으로 조정중
          + 이 외에도 Google의 Gemini와 Meta AI의 Llama와 같은 자체 파운데이션 모델 이니셔티브를 진행하는 빅테크 기업들도 있음
     * 이 기반 계층에 많은 자금이 유입되면서 경쟁이 전례 없는 속도로 격화, 생태계에서 엄청난 양의 혁신을 추진중
     * 2023년에 관찰한 주요 트렌드:
          + 베이스 모델이 빠르게 개선되고 있음:
               o 범용 LLM은 정확도와 지연 시간과 같은 기본 성능 기능 측면에서뿐만 아니라 멀티모달 기능을 포함한 프론티어에서도 점점 더 좋아지고 있음
               o GPT-4o의 출시는 우리 모두를 놀라게 했고, 새로운 릴리스는 업로드된 파일에서 비디오와 오디오를 보고 이해할 수 있는 기능과 짧은 비디오를 생성할 수 있는 기능을 보여주었음
               o 모델 개선의 현기증 나는 속도는 수개월 단위로 반감기를 가지는 모델에 대한 투자 전략에 대해 의문을 제기하게 함
          + 개방형과 폐쇄형 소스 간의 전투 격화:
               o Llama 3의 최근 출시와 함께 오픈 소스 리더들이 폐쇄 소스 모델 성능을 거의 따라잡게 되면서 오픈 소스 대 폐쇄 소스 논쟁은 2024년에도 뜨거운 주제로 남아 있음
               o 규제 영향으로 폐쇄형 소스 플레이어가 새로운 상용화 전략의 일부로 이전 모델을 공개해야 하는지 여부 또는 오픈 소스 리더가 역사상 처음으로 이 시장의 승자가 될 수 있는지에 대한 새로운 질문이 제기
          + 작은 모델 운동이 커짐:
               o HuggingFace의 CEO이자 공동 창업자인 Clem Delangue는 2024년이 SLM의 해가 될 것이라고 선언
               o 올해 출시된 Mistral 8x22b와 같은 예는 더 큰 모델이 성능 면에서 항상 더 좋지는 않으며 작은 모델이 비용과 지연 시간 면에서 상당한 이점을 가질 수 있음을 보여줌
          + 새로운 아키텍처와 특수 목적 기반 모델의 등장:
               o 트랜스포머를 넘어서는 새로운 모델 아키텍처의 등장에 대한 흥분
               o 예를 들어 상태 공간 모델과 기하학적 심층 학습은 덜 계산 집약적이고 더 긴 맥락을 처리할 수 있거나 구조화된 추론을 보여줄 수 있는 기반 모델의 프론티어를 밀어붙이고 있음
               o 또한 코드 생성, 생물학, 비디오, 이미지, 음성, 로보틱스, 음악, 물리학, 뇌파 등을 위한 특정 목적 모델을 훈련하는 팀도 폭발적으로 증가
               o 이는 모델 계층에 또 다른 다양성 벡터를 추가함
     * 기반 계층에서 너무 많은 일이 일어나고 있어서 땅이 움직이는 기분이 듬
     * 하지만 여기에 투자된 막대한 양의 자금에도 불구하고 현재 승자는 명확하지 않음

     예측: AI 모델의 전투는 가까운 미래에도 계속 뜨거울 것. 왜냐하면 이것은 향후 몇 년 동안 어떤 빅테크 기업이 클라우드 및 컴퓨팅 시장에서 최고가 될 것인지를 결정하는 중요한 ""토지 쟁탈전""이기 때문

     * 이 모델 계층 싸움에서 누가 가장 많은 가치를 잡게될 지에 대한 근 미래 현실 예상:
          + 현실 1: 모델 계층이 상품화됨
               o 수억 달러의 자본이 VC와 빅테크가 AI 리더 더비를 후원하면서 낭비될까?
               o 가장 자본이 풍부한 모델이 승자가 된다는 의미는 아님
               o 오픈 소스 모델이 계속해서 주요 시장 플레이어에 도전하기 때문
               o 그러나 AI 모델이 상품화된 미래가 반드시 모델의 가치가 감소한다는 것을 의미하지는 않음
               o 상품으로서의 AI 모델은 상품으로서의 컴퓨팅이나 석유와 비슷할 것
               o 언젠가는 글로벌 비즈니스 운영에 필수적인 자산이 될 것
               o 이 현실에서 AI 생태계의 궁극적인 가치는 모델 자체가 아니라 컴퓨팅 및 클라우드 서비스 제공업체, 마켓플레이스 및 애플리케이션에 의해 포착될 것
               o 그러나 AI 모델이 상품화되는 세상에서는 석유 시장에서 보았듯이 이러한 ""상품""을 판매하는 극히 가치 있는 기업 한두 곳이 생길 수 있음
          + 현실 2: AI 모델 대기업들이 파이를 나눔
               o 클라우드 전쟁과 유사하게, 빅테크 전략 투자자나 기업 VC의 막대한 지원을 받는 몇몇 주목할 만한 새로운 모델 기업들이 기반 모델 생태계를 소유하고 거인이 될 것
               o 각 승자는 유통, 가격/비용 효율성, 규제 영향 등을 통해 기술적 차별화와 결합할 수 있는 차별화된 쐐기를 찾을 것
               o 여전히 (특히 오픈 소스) 다양한 플레이어들이 있을 수 있지만 가치는 상위 몇 개의 모델 플레이어에게 돌아갈 것
               o 내일의 AI 거인을 결정하는 것은 우수한 기술뿐만 아니라 그들의 확립된 유통 채널임
          + 현실 3: AI 모델은 감자 칩 시장만큼 다양하고 인기 있게 됨
               o 감자 칩에는 무한한 맛이 있는 것처럼, AI 모델 경제의 미래도 지역 식료품점의 스낵 코너와 매우 비슷해 보일 수 있음
               o 많은 모델 회사들이 번창할 수 있는데, 다른 모델 회사들이 생존할 수 있을 만큼 충분히 차별화된 사용 사례(예: 형태, 성능, 지연 시간, 비용, 보안 등)가 있기 때문
               o 또한 지정학적 고려 사항이 AI 모델의 영역에 들어오면 지리와 규제가 여기에서 역할을 할 수 있는데, 이는 규제와 주권 문제가 이 계층의 다양성 확산을 지원하기 때문

     예측: 합의점에는 도달하지 못했지만, 우리 파트너십의 약 과반수는 폐쇄형 소스 모델이 LLM 컴퓨팅 사이클의 대부분을 주도할 것이며, AI 모델 거인들이 결국 경제적 파이를 나눌 것이라고 예측함(위의 현실 #2).

     * 우리는 클라우드 거인들이 컴퓨팅, 칩, 자본에 대한 접근성을 활용하여 그들에게 유리하게 전투에 영향을 미칠 것으로 기대함
     * 그리고 선두 주자들은 이미 경주에 참여하고 있음
          + Microsoft/OpenAI, AWS/Anthropic, Google/Gemini, 그리고 Meta/Llama는 유럽 리더인 Mistral을 포함하여 Linux와 동등한 OSS 대안임

# AI가 우리 모두를 10배의 개발자로 만들고 있음

     * 요즘 엔지니어는 항상 빌더이자 학생으로, 본업을 하면서도 새로운 언어, 프레임워크, 인프라 등을 지속적으로 배워야 함
     * AI의 등장으로 개발자는 데이터 관리, 큐레이션, 프롬프트, 사전 학습 및 파인 튜닝을 위한 새로운 인프라 제품군을 포함하여 끊임없이 진화하는 LLM을 활용하기 위한 완전히 새로운 툴체인과 모범 사례를 익혀야 하게 됨
     * AI 시대에는 매년 10년 치의 새로운 개발자 지식을 빠르게 습득해야함
     * 그러나 AI는 이러한 복잡성에 대한 해결책도 제공할 수 있음
          + 2023년에는 코드 코파일럿이 널리 채택되었고,
          + 2024년 초에는 단순 코드 작업의 엔드투엔드 자동화 가능성을 시사하는 에이전트 도구의 초기 버전들이 나타남

     예측: AI에 의해 개발자의 역할은 다른 어떤 직업보다 급격히 변화할 것임. 10년 후에는 컴퓨터를 가진 모든 사람이 상당한 개발 능력을 갖추게 될 것이며, 이로 인해 소프트웨어 개발 속도가 급격히 빨라지고 기술 스타트업 창업자의 평균 연령이 크게 낮아질 것임

     * AI 개발자 경제의 빠른 진화를 이끄는 세 가지 주요 영역:
          + 1. 코드 코파일럿 산업은 혁신과 경쟁의 온상이 되었으며, 2023년에는 GenAI 기술과 도구에 39억 달러의 VC 자금이 투자됨.
               o Github의 기존 Copilot 제품은 OpenAI의 GPT-4와 Codex 모델을 기반으로 1400만 건 이상 설치되었음
               o Tabnine, Magic.dev, Augment, Poolside, Cursor AI, OpenDevin, Cognition's Devin, Supermaven 등 많은 자금을 받고 성장하는 스타트업 경쟁자들이 개발자와 함께 구축하고 반복하고 있음
          + 2. 에이전트 검색 및 생성 기능을 내장한 코파일럿의 ""Graduation Motion""은 향후 수년간 막대한 가치를 창출할 것임.
               o Devin, SWE-agent, OpenDevin은 개발자 환경(예: 파일 편집기, bash 셸)및 인터넷과 상호 작용하여 코딩 작업을 완료하는 엔드투엔드 에이전트 도구의 잠재력을 보여줌
          + 3. 코드-언어 추론은 AI 활동의 중심지로 남아, 모델 계층 혁신(예: GPT-4, Claude 3 Opus)과 새로운 추론/에이전트 패러다임(예: Cognition's Devin, SWE-agent, OpenDevin) 모두에서 혜택을 받을 것임.
               o 모델 계층 개선은 코드 편집 및 완성 품질로 이어져 궁극적으로 개발자와 소프트웨어 조직에 가치를 제공할 것
               o 지연 시간, 컨텍스트 크기의 경계를 넓히고 언어 도메인/사전 훈련 세트를 확장하는 시스템도 개발자에게 막대한 가치를 주게 될 것
     * AI는 혁신과 격변을 모두 주도하며 개발자 속도, 생산성, 소프트웨어 조직의 레버리지를 가속화하고 있음
     * 미래 지향적인 소프트웨어 조직은 신흥 도구와 공급업체를 정기적으로 조사하고, 고부가 가치 개발자 소프트웨어를 신속하게 우선순위화하고 채택하고 있음
     * 개발자 예산은 다시 한 번 흐르고 있으며, 가시적인 영향을 미치는 도구에 대한 지불 의사가 높음
     * 개발자 기업가들에게 지금은 뭔가를 구축하기에 흥미로운 시기임. 코파일럿은 물론 인프라, 개발 도구, QA, IT 구성 및 프로비저닝, 보안 운영 모니터링, 침투 테스트 등 기회가 많음
     * 코파일럿은 현재 가장 분명한 기회일 수 있지만, 이는 가장 경쟁이 치열한 분야일 가능성이 높음
          + 보안의 SecOps에서 SRE, QA, 펜 테스트에 이르기까지 보다 특정한 개발자 영역에서 도구의 폭발적인 증가를 보았음
          + 이러한 도구는 LLM을 사용하여 저수준 복잡성을 추상화하고 시간이 많이 소요되고 고통스러운 엔지니어링 작업을 자동화하여 고차원 작업을 위한 엔지니어링 리소스를 확보함
          + DevOps 프로세스에 AI를 통합하면 CI/CD 파이프라인, 자동화된 테스트 및 배포 전략이 향상되어 더 빠르고 안정적인 소프트웨어 제공이 가능해짐
     * 코드 리팩토링은 개발자 워크플로와 에코시스템에서 AI의 영향을 보여주는 또 다른 훌륭한 예임
          + 많은 현대 엔지니어링 팀은 FTE 시간의 일부만 순수 신규 코드 작성에 할애함
          + 특히 대규모 조직에서는 SWE 시간의 상당 부분이 소프트웨어 엔지니어링 역할의 ""섹시하지 않은"" 부분인 코드 유지 관리, 보안 및 테스트에 소요됨
          + 코드 리팩토링과 같은 많은 작업은 스택에 대한 깊은 지식이 필요하며 종종 시니어 엔지니어가 두려움으로 수행하는 다루기 힘든 프로젝트임
     * AI는 이러한 과제를 해결할 수 있는 분명한 잠재력을 가지고 있음
          + Gitar, Grit, ModelCode 등의 스타트업은 코드 생성 모델, 정적 분석, AST 파서를 활용하여 코드 구조를 해석하고 언어, 패키지 라이브러리, 프레임워크 간에 코드를 마이그레이션함
          + 이러한 노력 중 일부는 최신 웹 프레임워크에 초점을 맞추고 있는 반면, 다른 일부는 시간이 지남에 따라 숙련된 엔지니어가 구식이 되고 있는 취약한 레거시 엔지니어링 스택(예: COBALT, PEARL 등)에서 작동함
          + 핵심 소프트웨어 엔지니어링 기능에 인접한 많은 워크플로우도 시간이 많이 소요되고 반복적이며 자동화에 적합함

     예측: 2030년까지 기업 소프트웨어 개발자의 대다수는 소프트웨어 리뷰어 비슷한 역할을 하게 될 것임. 개발 비용이 떨어지고 경험 있는 개발자의 생산성이 높아짐에 따라 급여가 인상될 것임

     * AI는 모든 직업 시장의 범위와 필요한 기술에 영향을 미칠 것이지만, 아마도 개발자만큼 큰 영향을 미치지는 않을 것임
     * AI 개선은 이 직업의 생산성을 크게 향상시킬 뿐만 아니라 개발자 세계의 경계를 확장할 것임
     * 10년 후에는 개발 능력이 전 세계 대다수 인구에게 접근 가능한 기술이 될 것임

# 멀티모달 모델과 AI 에이전트가 소프트웨어와의 인간 관계를 변화시킬 것

     * 멀티모달 모델과 AI 에이전트의 부상은 AI의 차세대 혁신을 주도
     * 초기의 텍스트 기반 모델보다 훨씬 더 광범위한 사용 사례로 AI의 잠재적 적용 범위를 극적으로 확장
     * AI 기업가에게는 에이전트 워크플로우뿐만 아니라 음성, 이미지, 동영상과 같은 새로운 모달리티 전반에서 혁신을 이룰 수 있는 새로운 기회가 생김
     * 이 모달리티들은 AI에게 시각, 청각, 언어 등 인간의 능력과 동등한 능력을 부여하여 이러한 감각에 의존하는 인간 업무의 상당 부분을 보강하는 데 AI가 역할을 할 수 있는 기회를 열어줌

  음성

     * 음성 AI 기업의 첫 번째 물결은 주로 Automatic Speech Recognition(ASR)의 발전을 활용하고 있음
          + Abridge는 의사-환자 대화에 대한 메모를 기록
          + Rillavoice는 영업 교육을 지원하기 위해 현장 영업 담당자와 고객의 대화를 캡처함
     * 지루하고 반복적인 워크플로를 처리할 수 있는 대화형 음성 제품을 개발하는 새로운 음성 AI 기업들이 등장하고 있음
          + 이를 통해 영업, 채용, 고객 성공, 관리 사용 사례에서 인간이 더 가치 있는 일에 집중할 수 있도록 함
          + Ada는 최근의 음성 혁신을 활용하여 채팅 기반 고객 지원 제품에 대화형 음성을 통합함
     * 이러한 발전을 뒷받침하는 것은 새로운 음성 아키텍처
          + 음성을 텍스트로 전사하지 않고 원시 오디오 데이터를 처리하고 추론할 수 있음
               o GPT-4o와 같은 새로운 모델에서 보여지는 캐스케이드 아키텍처에서 음성 네이티브 아키텍처로의 전환
          + 이러한 전환은 레이턴시가 훨씬 더 낮고 감정, 톤, 정서와 같은 비텍스트 정보에 대한 이해도가 훨씬 더 높은 대화형 음성 제품을 가능하게 할 것
     * AI 음성 애플리케이션은 자동차 대리점, 소매점, 레스토랑, 가정 서비스 등 많은 산업에서 등장하고 있음
          + 영업시간 이외의 시간에 발생하는 인바운드 영업 전화의 상당 부분 또는 대부분을 놓치는 경우가 많은데, 이러한 경우 AI가 그 공백을 메우기에 적합함
          + 영업에서의 AI 음성 애플리케이션은 AI가 본질적으로 이러한 기업의 손실된 수익을 회수하고 있기 때문에 ROI가 매우 높은 사용 사례임
     * 음성 AI의 최전선에서 구축하는 기업가들은 그 어느 때보다 자연스럽고 대화형이며 거의 인간 수준의 성능을 제공할 수 있는 인터페이스를 제공할 수 있음

  이미지 / 비디오

     * 컴퓨터 비전 모델은 수년 동안 존재해 왔지만, 새로운 세대의 다중 모달 LLM이 흥미로운 점은 이미지와 텍스트 데이터(다른 모달리티 중에서)에 대한 이해를 결합할 수 있다는 점
          + 이러한 조합은 많은 작업에 매우 유용함
     * 엔터프라이즈 기반 이미지 애플리케이션의 초기 물결은 주로 데이터 추출 사용 사례에 중점을 두었음
          + Raft와 같은 회사는 화물 문서를 수집하여 고객의 ERP에 채우고 청구서 조정 워크플로를 자동화하는 중요한 정보를 추출함
     * 기본 모델이 계속 개선됨에 따라 애플리케이션에 입력을 공급하기 위해 점점 더 많은 양의 데이터를 수집할 수 있는 수직 특정 이미지 및 비디오 처리 애플리케이션이 등장할 것으로 예상됨
     * Flux.ai와 같이 도식이나 건물 디자인의 렌더링을 생성하기 위해 그래픽 데이터에 대한 추론을 돕는 비전 모델과 이미지 생성 모델을 활용하는 엔지니어링 및 디자인 분야의 애플리케이션도 있음

  자율 AI 에이전트

     * AI의 가장 흥미로운 새로운 주제 중 하나는 복잡한 다단계 작업을 완전히 자율적으로 처리할 수 있는 AI 에이전트의 개발임
     * 대부분의 AI 에이전트는 아직 복잡한 사용 사례에서 안정적으로 작동하지는 않지만, 에이전트 워크플로에 대한 진전은 매우 빠르게 진행되고 있으며 무엇이 가능한지에 대한 단편적인 것들을 보고 있음
          + Cognition AI의 Devin(AI 소프트웨어 엔지니어)은 AI의 계획 및 추론 능력이 계속 확장됨에 따라 무엇이 가능한지를 보여줌
     * 더 많은 애플리케이션이 다단계 프로세스에서 복합 오류의 영향을 제한할 수 있는 매우 제한된 사용 사례에서 AI 에이전트를 구현하기 시작하고 있음
          + 기업들은 Leena AI와 같은 솔루션을 활용하여 IT, HR, 재무 관련 작업을 지원하는 AI 에이전트를 제공하여 이러한 팀이 번거로운 작업에서 벗어나 직원 경험을 개선할 수 있도록 지원함
     * 또한 에이전트가 더 복잡한 워크플로를 실행할 수 있도록 강력한 추론 기능을 갖춘 새로운 모델이 등장하고 있음
          + 더 흥미로운 것은 사고 연쇄 추론, 자기 성찰, 도구 사용, 계획 및 다중 에이전트 협업을 포함한 다양한 방법을 통해 에이전트 구현을 개선하는 새로운 아키텍처 접근 방식에 초점을 맞춘 연구가 활발히 이루어지고 있다는 점

# 레거시 SaaS를 능가할 수 있는 잠재력을 보여주는 Vertical AI

     * Vertical SaaS는 첫 번째 클라우드 혁명 동안 산업을 변화시킨 숨은 거인임이 입증됨
          + 상위 20개 미국 상장 Vertical SaaS 기업의 시가총액 합계는 약 3천억 달러이며, 이 중 절반 이상이 지난 10년 동안 IPO를 진행
     * 이제 대형 언어 모델(LLM)의 등장으로 새로운 기능과 레거시 Vertical SaaS의 경계를 넘나드는 산업을 목표로 하는 새로운 LLM 기반 기업의 탄생을 보며 Vertical SaaS의 다음 물결이 시작됨
          + Vertical AI 애플리케이션은 많은 산업 분야와 경제의 큰 부분을 차지하는 고비용 반복적인 언어 기반 작업을 목표로 함
     * 미국 노동통계국에 따르면 비즈니스 및 전문 서비스 산업은 미국 GDP의 13%를 차지
          + 반복적인 언어 작업이 주를 이루는 이 부문에서만 소프트웨어 산업 규모의 약 10배에 달함
          + 전문 서비스 부문을 넘어 모든 산업에서 수직적 반복 언어 기반 작업은 상당한 비중을 차지
          + 수직적 AI가 이러한 비용의 의미 있는 부분을 차지하기 위해 경쟁할 것이며, 또한 인간의 노동력이 부족했던 영역에서 활동을 촉진할 것이라고 믿음
          + 예를 들어, EvenUp은 타사 법률 서비스와 내부 법률 보조원 워크플로우를 자동화하여, 과거에는 인건비가 너무 비싸거나 일관성이 없어 적용하기 어려웠던 업무 영역에 새로운 가능성을 열어줌

     예측: 버티컬 AI가 서비스 경제를 주도하고 새로운 비즈니스 모델을 선보이면서 버티컬 AI의 시가총액은 기존 버티컬 SaaS의 최소 10배 규모가 될 것

  Copilot, Autopilot, AI 지원 서비스의 세 가지 새로운 비즈니스 모델

     * Vertical AI 경제의 세 가지 새로운 비즈니스 모델은 Copilot, Autopilot, AI 지원 서비스로 구성됨
     * Vertical AI는 또한 여러 다른 비즈니스 모델을 통해 제공되어 AI 기능을 특정 산업 요구 사항과 일치시킬 가능성을 높임
     * Copilot
          + LLM을 활용하여 작업을 자동화함으로써 작업자의 효율성을 높임
          + Sixfold는 보험 인수자가 데이터를 더 잘 분석하고 위험을 이해할 수 있도록 지원함
          + Copilot 모델에서 AI 애플리케이션은 사용자와 나란히 앉아서 사용자가 더 성공적일 수 있게 지원
     * Agent
          + Copilot이 직원의 업무 수행을 돕는 반면, Agent는 워크플로를 완전히 자동화하고 사용자를 대체함
          + Agent는 아웃바운드 영업이나 인바운드 콜 수신과 같은 수직 기업 내의 특정 기능에 중점을 둠
          + Slang AI는 레스토랑의 인바운드 전화를 처리하여 예약을 받고 질문에 답변하는 등의 작업을 수행함
     * AI-Enabled(기반) 서비스
          + 일반적으로 회계, 법률 서비스, 의료 청구 등 제3자 공급자에게 아웃소싱되는 서비스들
          + 이러한 비즈니스는 인력 집약적이기 때문에 전통적으로 마진이 낮고 확장하기 어려우며 기술 비즈니스보다 차별화하기 어렵고 가치가 낮음
          + 소프트웨어를 사용하여 작업을 자동화함으로써 이러한 AI 기반 서비스 기업은 시장에 더 저렴하고 더 나은 서비스를 더 빠르게 제공하고 기존 서비스 지향 비즈니스의 점유율을 확보하는 것을 목표로 함
          + SmarterDx는 AI를 사용하여 청구서와 해당 임상 문서를 지불자에게 보내기 전에 의료 시스템 및 병원을 대신하여 입원 청구를 감사함
               o 기존에는 감사작업을 수행하는 공급업체에 아웃소싱했었음

Vertical AI 비즈니스 모델 강점에 대한 초기 신호

     * 우리(Bessemer)는 여러 산업 분야에서 레거시 SaaS 리더를 지원할 수 있는 행운을 누렸으며, 이제 가장 큰 Vertical AI 포트폴리오 중 하나를 보유하고 있음
     * 결과적으로 Vertical AI 기업과 레거시 Vertical SaaS 비교 기업을 비교하는 데 사용할 수 있는 의미 있는 데이터를 이미 확보함
     * 우리의 Vertical AI 포트폴리오에 대한 세 가지 분석은 이 새로운 애플리케이션 클래스의 강점을 보여줌
          + Vertical AI 플레이어는 레거시 SaaS와 경쟁하지 않는 기능으로 시장을 선도하고 있음
               o 이러한 애플리케이션의 유용성은 일반적으로 레거시 SaaS 제품을 보완하는 것이며 기존 제품을 대체/복제할 필요 없음
               o 이러한 Vertical AI 신생 기업은 이미 전통적인 핵심 Vertical SaaS 시스템의 ACV의 약 80%를 차지하고 있음
               o 이는 Vertical AI가 서비스 지출을 대체함으로써 수직 최종 시장 내에서 상당한 지출을 창출하고 궁극적으로 기존 SaaS의 상당한 배수가 될 수 있는 TAM을 제공함으로써 수직적 AI의 역량을 입증
          + 의미 있는 규모($4M ARR 이상)의 Vertical AI 기업의 효율성과 성장 프로필도 고무적임
               o 이 들은 연간 약 400%의 성장률을 보이며 지금까지 본 것 중 가장 빠른 성장세를 보이고 있음
               o 또한 평균 약 65%의 매출 총이익률과 약 1.1배의 BVP 효율성 비율(순신규 CARR/순손실)로 건전한 효율성을 보여주고 있음
          + Vertical AI 기업이 모델 비용에 지출하는 매출 비중을 분석하여 이러한 애플리케이션이 단순히 얇은 래퍼에 불과하다는 우려를 해소함
          + 평균적으로 이러한 기업은 현재 매출의 약 10% 또는 총 COGS의 약 25%만 모델 비용에 지출하고 있음
          + 따라서 LLM 위에 구축된 이러한 수직 애플리케이션은 이미 기본 모델 비용의 약 6배에 달하는 마진을 창출하고 있음
     * 전반적으로 모델 계층에서 막대한 가치 창출이 예상되지만, 이 데이터에 따르면 과거의 인프라 혁신과 마찬가지로 기업 가치의 대부분은 애플리케이션 계층에서 다시 한 번 포착될 것
     * 버티컬 소프트웨어의 기존 업체들도 완전히 잠들어 있는 것은 아님
          + 톰슨 로이터(6억 5,000만 달러에 CaseText 인수)와 다큐사인(1억 6,500만 달러에 Lexion 인수)과 같은 기업이 최초로 주목할 만한 버티컬 AI 인수를 진행
     * 그러나 아직 버티컬 AI 마라톤의 출발선에 가깝게 있다고 생각
          + 몇 년 안에 새로운 영속적인 공개 수직 AI 기업이 탄생할 것으로 기대
          + 성장 속도를 고려할 때, 향후 2~3년 내에 최소 5개의 버티컬 AI Centaur(ARR 1억 달러 이상)가 등장할 것으로 예상함

     예측: 향후 3년 이내에 최초의 버티컬 AI IPO가 이루어질 것

# AI로 인해 소비자 클라우드가 부활함

     * 소비자 클라우드가 지난 10년 동안 저조한 성장세를 보인 것은 공공연한 사실임
          + 소비자 클라우드는 개별 소비자에게 직접 클라우드 기반 스토리지, 컴퓨팅 및 디지털 애플리케이션을 제공하는 회사로 정의됨 (동시에 B2B 및 ""프로슈머"" 제품도 포함)
     * 9년 전 시작된 Cloud 100 데이터를 분석한 결과, 누적 목록의 4%만이 소비자 제품을 가진 회사
          + 2018년 IPO를 한 Dropbox 이후 '순수' 소비자 클라우드 기업의 엑시트는 없었다고 볼 수 있음
     * 소비자 클라우드 유니콘은 대규모 기술 변화의 여파로 탄생해 왔음
     * 하지만 15년 전 아이폰 출시와 이후 소셜 미디어 플랫폼의 발전 이후 소비자 대면 기술의 광범위한 지각 변동은 없었음
     * 그러나 2년 전 소비자들은 큰 격변을 접했음
          + LLM의 빠르게 진화하는 다중 모달 기능을 통해 이전에는 불가능했던 방식으로 텍스트, 시각 및 청각 감각을 확장하고 향상시킬 수 있게 되면서, 기존 소비자 클라우드의 모든 카테고리에서 혼란의 가능성이 열리고 있음
     * AI의 소비 능력에 대한 척도는 이러한 애플리케이션이 우리의 시간과 주의를 얼마나 많이 차지하는지임
          + ChatGPT는 이제 Reddit와 같은 Attention Economy의 리더들과 경쟁하고 있으며, Claude와 Gemini를 포함한 다른 범용 AI 어시스턴트들도 빠르게 견인력을 얻고 있음
     * 범용 어시스턴트 외에도 검색을 위한 Perplexity, 동반자를 위한 Character.ai, 이미지 창의성을 위한 Midjourney, 음악 생성을 위한 Suno와 Udio, 비디오 생성을 위한 Luma, Viggle, Pika 등 해당 카테고리에서 혁신을 주도하는 소비자 AI 기업의 사례를 이미 볼 수 있음
          + 이러한 회사들은 전용 사용자 기반을 유치하고 유지하며, 경우에 따라 현대 기존 기업을 효과적으로 대체할 수 있는 LLM 기반 애플리케이션의 잠재력을 보여주고 있음
     * AI가 기술과 상호 작용하고 즐기는 방식을 바꾸면서, 이는 소비자 클라우드 구축자와 투자자에게 가장 흥미로운 시기 중 하나임
     * 향후 5년 동안 여러 소비자 클라우드 IPO가 이루어질 것으로 예상

     예측: 합성 미디어, 새로운 소비자 애플리케이션, 대화형 AI 에이전트의 놀라운 부상으로 인해 2030년까지 주목 경제를 지배하는 상위 3개 비즈니스는 AI가 생성한 콘텐츠 또는 제품을 기반으로 할 것

     * 특정 기능의 소비자 AI 애플리케이션(예: 콘텐츠 생성 및 편집, 교육)의 롱테일에서 상당한 초기 단계의 활동이 나타나고 있음
          + 좋은 소식은 소비자들이 삶을 개선하기 위해 AI를 찾고 있다는 초기 징후라는 점
          + 나쁜 소식은 Wrapper를 넘어서는 제품 깊이를 보여주거나 강력한 리텐션으로 고객의 지속적인 사랑을 입증한 카테고리별 소비자 AI 네이티브 앱이 10개를 넘지 않는다는 것
          + 충족되지 않은 많은 소비자 니즈를 해결하기 위해 지속 가능한 클라우드 기업을 구축할 수 있는 분명한 기회가 여전히 있다고 믿음
     * 소비자의 니즈에 대한 두 가지 핵심 질문:
          + 현 상황이 소비자에게 얼마나 심각한 고통이나 노동 집약적인가?
          + 얼마나 반복적이고 예측 가능한 언어/시각/청각적 노력이 필요한가?
     * AI는 소셜, 엔터테인먼트, 쇼핑, 여행 등 우리가 좋아하는 취미 생활을 재창조할 뿐만 아니라 사람들이 세상을 연결하고, 놀고, 구매하고, 탐험하는 새로운 방법을 발견하고 상상할 수 있도록 도와줄 것

# 결론 - AI 클라우드: 현실 vs. 과대 광고(Hype)

     * Roy Amara는 ""우리는 단기적으로는 기술의 효과를 과대평가하고 장기적으로는 과소평가하는 경향이 있다""고 말했음
          + 이는 닷컴, 나노테크, 클린테크, 블록체인 등 과거 많은 기술 물결에서 VC의 숫자를 정확히 짚어냈음
          + 심지어 지루한 구식 SaaS도 2021년에 지나치게 급성장했음
     * 그렇다면 AI 클라우드에 대한 과대 광고가 현실을 능가하는 것일까?
          + 향후 1~2년 내에 AI의 약속이 클라우드 VC를 압도했다는 것을 인정하게 될 운명일까?
          + 아니면 AI가 ""아마라의 법칙""을 깨뜨릴 위협을 하는 걸까?
          + 현실이 미친 듯한 과대 광고를 능가하는 첫 번째 기술 물결일까?
     * 전 세계의 Bessemer 투자자 대상 설문 조사 결과는 명확한 답변을 제시함
          + 지금까지 Hype는 충분히 가치가 있었음
          + 어디를 보든 역사적 선례가 없는 수준의 AI 영향의 증거를 볼 수 있음
     * 우리 포트폴리오의 대다수가 내부적으로 AI 기술을 채택했으며 제품 로드맵을 업데이트하여 AI를 통합하고 있음
     * AI 기반 포트폴리오 기업은 의미 있는 상업적 견인력을 발휘하고 있으며, 우리가 지금까지 목격한 그 어떤 집단보다 빠르고 효율적으로 성장하고 있음
     * 작년 예측을 돌이켜보면 심각한 낙관론과 흥분에도 불구하고 이러한 변화의 속도와 규모를 완전히 예측할 수 없었음
          + 구체적으로 AI 기반 기업이 기존 클라우드 기업보다 50% 더 빨리 10억 달러의 매출에 도달할 것이라고 예측했음
          + OpenAI는 올해 2월 20억 달러의 매출을 기록했으며, 몇 달 후 34억 달러의 연환산 매출을 넘어선 것으로 보고
          + Anthropic은 2024년 말까지 연간 8억 5천만 달러의 매출을 올릴 것으로 예상됨
          + 다른 보고서에 따르면 Midjourney는 2억 달러의 매출을 올리고 있으며 Character.ai도 이와 비슷한 규모라고 추정함
     * 우리의 마지막 예측은 아마도 2025년 State of the Cloud에서 1년을 되돌아볼 때, AI가 현재 받고 있는 주목을 전혀 잃지 않을 것이라는 점
"
"https://news.hada.io/topic?id=15605","덴마크, 핀란드, 스웨덴에서 출시된 Frame.work 노트북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   덴마크, 핀란드, 스웨덴에서 출시된 Frame.work 노트북

제품 출하 지역 확장

     * DestroyaFramework 팀이 덴마크, 핀란드, 스웨덴으로 제품 출하를 시작함
     * Framework Laptop 13, Framework Laptop 16, Intel Core Ultra Series 1 프로세서가 탑재된 새로운 Framework Laptop 13의 사전 주문 가능
     * Framework Marketplace에서 모듈 구매 가능

새로운 키보드 옵션

     * 덴마크어, 스웨덴어/핀란드어 키보드를 Framework Laptop 13과 함께 주문 가능
     * 독립형 키보드 또는 입력 커버 키트로도 구매 가능
     * Framework Laptop 16용 키보드는 올해 7월 말에 출시 예정
     * 제품 페이지에서 이메일 알림을 신청하면 재고가 있을 때 알림을 받을 수 있음

GN⁺의 의견

     * DestroyaFramework의 제품 출하 지역 확장은 북유럽 사용자들에게 큰 혜택을 줄 것임
     * 다양한 언어 키보드 옵션 제공은 사용자 편의성을 높이는 중요한 요소임
     * Framework Laptop 16의 키보드 출시 일정이 명확히 안내되어 있어 사용자들이 계획을 세우기 용이함
     * 이와 같은 확장은 다른 지역으로의 출하 확대 가능성을 시사함
     * 사용자들이 제품을 쉽게 접근할 수 있도록 하는 전략은 브랜드 충성도를 높이는 데 기여할 것임

   제발 한국 정식 출시 좀 해주십쇼 재취업 후 반드시 구매할거예요.

        Hacker News 의견

     * 덴마크, 스웨덴, 노르웨이는 오랫동안 비효율적인 Nordic 키보드 레이아웃으로 어려움을 겪어왔음
          + Apple과 일부 Thinkpad는 적절한 덴마크 키보드를 제공함
          + US Intl 키보드를 주로 사용하지만, 덴마크 키보드를 사용할 때 | 키를 찾기 어려움
     * 터치 타이핑을 배우는 것은 경력 초기에 최고의 투자 중 하나였음
          + 키보드에 인쇄된 내용을 신경 쓰지 않아도 되는 것은 작은 보너스임
     * 이 제품들은 매우 비싸며 (1600-2000 USD), mac 노트북과 비교될 수 있음
          + 이 가격을 지불할 가치가 있는 품질을 기대함
     * Nordic 키보드 타입을 재고로 보유하는 것이 문제라고 생각하지 않음
          + 공통 레이아웃을 가진 빈 키보드를 레이저로 맞춤 주문할 수 있음
          + 현재 화면 보호 필름을 매장에서 자르는 것과 유사함
     * 첫 번째 EU 국가에 판매를 시작한 이후로 이미 이용 가능했음
          + EU 시민으로서 어떤 EU 국가에서든 제품을 구매할 권리가 있음
          + 이제 해당 국가로만 배송되므로 다른 EU 국가에서 픽업할 필요가 없음
     * 도메인은 frame.work이지만, 브랜드 이름은 Framework임
     * 우크라이나 키보드를 여전히 기다리고 있음
          + 모든 키보드 매핑을 gnome 등에서 가져와서 유니코드 심볼을 적용하는 것이 얼마나 어려운지 궁금함
     * 스웨덴 키보드 레이아웃은 노르웨이에서도 작동함
          + Ö는 Ø로, Ä는 Æ로 매핑됨
          + 덴마크 키보드도 작동하지만, Æ는 Ø로, Ø는 Æ로 매핑되어야 함
          + 대부분의 스칸디나비아 키보드는 ØÖÆ와 ÆÄØ 버튼을 가지고 있음
          + OS 키보드 설정에 따라 올바른 키가 작동함
          + 노르웨이에서 출시되지 않는 이유가 궁금함
          + EU에 속하지 않아서 더 어려운 것 같음
     * 이 제품들이 얼마나 모듈화되어 있는지 궁금함
          + 화면을 교체할 수 있는지, 제3자가 새로운 화면 모듈을 생산할 수 있는지 궁금함
          + 제3자가 모듈을 생산할 수 있는지, 아니면 어떤 라이센스/특허가 이를 막고 있는지 궁금함
     * 13인치 모델에서는 핀란드 키보드 옵션을 찾을 수 없고, 16인치 모델은 즉시 품절됨
          + 키보드 레이아웃이 Framework를 구매하지 못하게 하는 주요 요인이었음
          + Slimbook을 어제 살펴봤는데, 더 많은 키보드 레이아웃을 제공함
"
"https://news.hada.io/topic?id=15623","Microsoft AI 총책임자, "오픈 웹에 있는 콘텐츠는 모두 훔치는게 가능하다"라고 발언","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Microsoft AI 총책임자, ""오픈 웹에 있는 콘텐츠는 모두 훔치는게 가능하다""라고 발언

     * Microsoft의 AI 총책임자인 Mustafa Suleyman은 공개 웹에 있는 모든 콘텐츠는 ""프리웨어""이므로 누구나 자유롭게 복사하고 사용할 수 있다고 잘못 믿고 있음
     * CNBC와의 인터뷰에서 ""AI 회사들이 전 세계의 지적 재산을 훔쳤는가?"" 라는 질문에 대해서 이렇게 답변함

     ""이미 오픈 웹에 있는 콘텐츠의 경우, 90년대 이후 해당 콘텐츠의 사회적 계약은 '공정 이용'이라는 것이었습니다. 누구나 복사하고, 재창조하고, 재생산할 수 있다는 것이죠. 즉, '프리웨어'라는 개념으로 이해되어 왔습니다.""
     * 그는 ""공정 이용""이라는 용어를 사용했지만, 잘못된 이해를 하고 있음
          + 미국에서는 작품을 창작하는 순간 자동으로 저작권 보호를 받으며, 웹에 게시한다고 해서 그 권리를 포기하는 것은 아님
          + 공정 이용은 법정에서 부여되는 것으로, 저작권자에게 피해를 주지 않는 한도 내에서 저작권이 보호하는 작품을 일부 사용할 수 있게 해주는 법적 방어 수단임
     * 마이크로소프트와 OpenAI는 온라인 스토리를 사용해 AI 모델을 훈련시키는 과정에서 저작권을 침해했다는 여러 소송의 대상이 되고 있음
          + 일부 AI 회사들은 훈련 데이터로 저작권이 있는 콘텐츠를 사용하는 것이 공정 이용에 해당한다고 주장하고 있지만, 설레이만처럼 대담하게 이야기하는 경우는 드뭄
     * 로봇.txt 파일은 특정 웹사이트를 크롤링하지 말라는 지시를 포함할 수 있는 텍스트 파일이지만, 법적 문서는 아님
          + 일부 AI 회사들은 이를 무시하고 크롤링을 하고 있음. OpenAI도 그 중 하나로 알려짐
          + 설레이만은 웹사이트나 출판사, 뉴스 기구가 '인덱싱 외의 목적으로 나를 크롤링하거나 긁어가지 말라'고 명시적으로 밝힌 경우, 이는 법적으로 회색 지대에 속하며 법정에서 해결될 것이라고 언급함

   그런 논리라면 오픈웹에 올라온 Windows 도 공공재이겠지요🤣
"
"https://news.hada.io/topic?id=15681","DS_store의 기원store의 기원 (2006)

     * Apple의 DS_Store 기원
     * Mac 사용자이거나 Mac에서 Windows로 파일을 전송한 적이 있다면 .DS_Store 파일에 익숙할 것임
     * 이 이름의 기원은 1999년으로 거슬러 올라감
     * 당시 필자는 Apple에서 Mac OS X Finder의 기술 리더였음
     * Finder 코드 베이스는 8년이 되었고, 유용한 수명을 다했음
     * 변경을 가하려면 엄청난 엔지니어링 노력이 필요했고, 변경 시 두세 개의 관련 없는 기능이 깨지곤 했음
     * Mac OS X를 위해 Finder를 처음부터 다시 작성하기로 결정함
     * 작업의 일부는 사용자 인터페이스와 핵심 기능, 즉 백엔드를 분리하는 것이었음
     * Finder의 백엔드는 파일을 열거하고, 파일 시스템의 변경 사항을 감시하며, 메타데이터를 처리함
     * 내부적으로 이 두 구성 요소는 Finder_FE와 Finder_BE로 알려졌음 (Frontend와 Backend)
     * Finder 백엔드가 Finder 외부에서도 유용할 것이라는 것을 깨달음
     * 이를 공개 API로 만들 계획을 세움
     * 이전에 Icon Services와 Navigation Services의 명명을 담당했기 때문에 Desktop Services라는 이름을 선택함
     * .DS_Store는 ""Desktop Services Store""의 약자임
     * Unix OS, 포함 Mac OS에서 보이지 않는 파일로 간주되도록 앞에 "".""를 추가함
     * 개인적으로는 이 이름이 그다지 좋지 않다고 생각하며, 좀 더 설명적인 이름을 선택했으면 좋았을 것이라고 생각함
     * .DS_Store 파일의 과도한 생성으로 이어지는 버그가 아직도 수정되지 않았음
     * 사용자가 보기 설정을 조정하거나 폴더에서 아이콘의 수동 위치를 설정할 때만 생성되어야 함
     * 그러나 폴더를 방문하면 .DS_Store 파일이 생성되는 것이 보장됨
     * Finder_BE, 즉 Desktop Services는 Finder 외에도 사용됨
     * Navigation Services (열기/저장 대화 상자)도 이를 사용함
     * 그러나 Desktop Services API는 아직 완전히 공개되지 않았음


     * 2006년 10월 1일 발행
     * Arno Gourdol 작성

GN⁺의 의견

     * 이 글은 Mac OS X Finder의 역사와 .DS_Store 파일의 기원을 설명함으로써 기술적인 배경을 제공함
     * .DS_Store 파일의 과도한 생성 문제는 여전히 해결되지 않았으며, 이는 사용자 경험에 영향을 미칠 수 있음
     * Finder 백엔드의 재사용 가능성은 Apple의 소프트웨어 설계 철학을 보여줌
     * 유사한 기능을 가진 다른 파일 시스템 관리 도구로는 Windows의 NTFS와 Linux의 ext4가 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 기존 시스템과의 호환성 및 유지보수 문제를 고려해야 함

        Hacker News 의견

     * Mac 파일 시스템의 ""fork"" 개념은 리소스와 데이터 구성 요소가 쌍으로 존재하는 것을 의미함
          + Unix에서는 메타데이터가 디렉토리 블록 inode에 있었고, tar, cpio, zip 등으로 구조적으로 표현되어야 했음
          + Unix에서 Mac 호환 파일 지원을 구현하려면 리소스 fork를 일급으로 취급해야 했음
          + 현대적인 파일 시스템은 더 큰 디렉토리 블록 구조를 가지고 데이터를 더 잘 처리할 수 있음
     * .DS_Store 파일 생성을 끄는 방법이 있었지만 제거되었음
          + .DS_Store 파일이 생성되자마자 삭제하는 프로그램을 작성했음
          + 프로그램 링크
     * .DS_Store 파일이 같은 폴더에 있어야 하는 이유를 이해하지 못함
          + 운영체제가 경로를 참조하는 자체 데이터베이스를 가질 수 있지 않음?
     * .DS_Store 파일은 사용자가 폴더의 보기 설정을 조정하거나 아이콘의 수동 위치를 설정할 때만 생성되어야 함
          + Finder에서 폴더를 방문하면 .DS_Store 파일이 거의 항상 생성됨
          + Finder에서 폴더 창의 모양과 크기를 사용자 정의할 수 있지만, 브라우저 창에서 동일한 폴더를 열면 이러한 사용자 정의가 대부분 사라짐
          + 기본 브라우저 창 구성을 설정할 수 없기 때문에 발생하는 문제임
     * 1999년에 이미 앱이 프론트엔드와 백엔드로 나뉘어 있었음
          + Finder_FE와 Finder_BE로 알려져 있었음
     * 네트워크 볼륨을 탐색할 때 .DS_Store 파일 생성을 기본적으로 끄는 방법을 언급할 가치가 있음
          + 그렇지 않으면 Finder를 사용하여 탐색할 때 디렉토리 수정 타임스탬프가 업데이트됨
          + 관련 링크
     * .DS_Store 파일을 볼 때마다 Nintendo DS가 생각남
     * Mac 사용자가 아닌 경우, Github에서 .tgz 파일을 다운로드할 때 .DS_Store 파일이 포함되어 있는 것이 다소 성가심
          + MacOS가 GNU tar를 사용하는 것 같음
          + 기본적으로 .DS_Store 파일을 무시하도록 수정되지 않은 것이 놀라움
     * MacOS의 열렬한 팬이지만 Finder는 가장 어리석은 파일 탐색기 중 하나임
     * DS Store 파일은 불행한 존재임
          + 목적이 있지만, 대부분의 사람들에게는 파일 쓰레기로 보임
          + UX 측면에서 Apple답지 않음
          + System 7.5/OSX와 Windows를 사용하면서 Mac이 불필요한 파일을 보여주지 않으려는 경향이 있었음
"
"https://news.hada.io/topic?id=15601","Meta LLM 컴파일러 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Meta LLM 컴파일러 발표

     * Meta가 Code Llama를 기반으로 개발한 코드 최적화 및 컴파일러 기능을 갖춘 LLM Compiler 모델군 발표
     * 이 모델들은 다음과 같은 기능 보유:
          + 컴파일러 에뮬레이션
          + 코드 크기 최적화를 위한 최적의 패스 예측
          + 코드 역어셈블
     * 새로운 최적화 및 컴파일러 작업을 위해 미세 조정 가능

주요 특징

     * 코드 크기 최적화 및 역어셈블리에서 최고 수준의 결과 달성
     * AI가 코드 최적화를 학습하고 있으며, 컴파일러 전문가들의 최적화 기회 식별을 지원할 수 있음을 입증

모델 공개

     * LLM Compiler 7B 및 13B 모델을 연구 및 상업적 사용 모두에 대해 허용적인 라이선스로 공개
     * 개발자와 연구자들이 쉽게 활용하고 이 분야의 새로운 연구를 수행할 수 있도록 지원

   아이디어는 재미있어 보이네요.

        Hacker News 의견

     * LLM을 컴파일러/디컴파일러로 사용하는 것은 흥미로운 응용임
     * 컴파일러는 신뢰성과 정확성이 중요함
     * LLM은 본질적으로 예측 불가능하므로 빌드 파이프라인에 포함하는 것이 이상하게 느껴짐
     * 논문에서는 CodeLlama를 시작으로 세 가지 작업에 모델을 훈련시켰음
          + 첫 번째 작업은 컴파일: 입력 코드와 컴파일러 플래그를 주고 출력 어셈블리를 예측하는 것
          + 두 번째 작업은 컴파일러 플래그 예측/최적화: 어셈블리 크기를 최적화하는 것
          + 세 번째 작업은 디컴파일: 이전 접근 방식보다 장점이 있다고 주장함
     * 디컴파일 접근 방식의 검증 가능성에 문제가 있음
     * 디컴파일된 코드를 다시 컴파일하여 정확성을 확인하는 방법을 사용함
     * 정확도가 약 45%로 아직 신뢰할 수 없지만 전통적인 디컴파일러와 함께 사용하면 유용할 수 있음
     * 이 모델이 성능 최적화로 확장될 수 있는지 탐구해보고 싶음
     * LLM이 직관을 제공하고 기계적/엄격한 방식으로 처리하는 시스템이 증가할 것 같음
     * LLM이 입력의 의미를 보존하는지 확인하는 방법이 궁금함
     * 이전 연구는 GitHub에서 확인할 수 있음
     * Twitter는 이 연구에 감명받았지만, 프로그램을 망칠 가능성이 높다고 생각함
     * Meta의 다른 AI 논문과 달리 Instagram, Facebook, Meta에서 사용된다는 언급이 없음
     * ""LLM Compiler""보다 ""Compiler LLM""이 더 정확한 이름일 것 같음
     * 이 작업의 목적을 이해하지 못하겠음
     * <i>Deus Ex</i> 게임에서 Meta Technologies Neural Optimizer와 Disassembler를 거래했던 기억이 있음
"
"https://news.hada.io/topic?id=15627","제품으로서의 AI와 기능으로서의 AI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          제품으로서의 AI와 기능으로서의 AI

   MKBHD - AI the Product vs AI the Feature
    1. AI는 제품이 아닌 기능이라는 어떤 주장
       클럽하우스는 출시 직후 폭발적으로 사용자가 증가했으나, 스포티파이, 디스코드 등 다른 오디오 플랫폼들이 유사한 기능을 제공하며 사라졌음
    2. AI는 제품일까요 기능일까요?

     * Humane AI Pin, Rabbit r1 같은 AI 완제품 기기가 나왔지만 둘 다 완성도 측면에서 좋지 않았음
     * 애플과 구글은 AI를 제품화하는 대신 기능으로 넣기 시작했음
     * OS와 통합된 언어 교정, 시리 등

    3. 틱톡과 스냅챗의 반례

     * 틱톡이 처음 선보인 숏폼 동영상 플랫폼은 (기능처럼 보이지만) 다른 동영상 플랫폼들이 유사 기능을 선보였음에도 여전히 인기 있음
     * 스냅챗 스토리도 여전히 인기 있음
     * 성공하기 위해서는 틱톡이나 스냅챗 같이 실제로 당신의 아이디어가 기능 규모인 것을 부정하고 제품으로 포장하는 방법을 선택해야 하는가?
     * AI에도 이런 질문을 해보았음

    4. 기능으로서의 AI의 현재

     * 애플 AI는 기기 내 AI를 준비하기 위해 막대한 투자를 했음
     * 기기 내 AI로 처리할 수 없는 복잡한 요청에 대해서는 ChatGPT를 사용할지 매번 사용자에게 질문함. 이는 제품이 덜 통합된 느낌을 줌
     * 그럼에도 불구하고, 지금 제품에 통합할 수 있는 AI를 가진 빅테크 기업들을 제외하면 후발주자, 소규모 기업에게는 남은 시간이 별로 없음


   더 나은 번역이 있거나 제가 실수한 부분이 있다면 댓글로 알려주십시오. 감사합니다

   P.S.

   제품으로 만들지 기능으로 만들지의 고민은 비단 AI뿐만이 아니고 스타트업 전반에서도 해볼만한 고민이라고 생각합니다. 저도 대학생 시절에 스타트업 동아리에 있을 때 비슷한 고민을 해 본 적이 있었는데 같은 생각을 하는 동영상이 있어서 반갑더라구요. '이거 그냥 기존 회사들이 신규 서비스 출시하면 끝나는 거 아닌가' 하고 골라냈던 경험이 있습니다
"
"https://news.hada.io/topic?id=15599","대역폭과 배터리 전력을 낭비하고 시스템 관리자들을 짜증나게 하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 대역폭과 배터리 전력을 낭비하고 시스템 관리자들을 짜증나게 하는 방법

        Hacker News 의견

     * Firefox가 iOS에서 단순히 Safari의 스킨 변경 버전이라고 생각했음
          + Apple이 다른 브라우저 엔진을 허용하지 않기 때문임
          + Android에서 Firefox는 플러그인 지원으로 훌륭하지만, 2021년 이전 UI를 선호함
     * 오픈 소스 프로젝트로 GitHub에서 기술적 문제에 대한 좋은 논의가 있음
          + 수백 개의 탭을 여는 사용자 행동과 관련이 있을 수 있음
          + iOS에 브라우저를 끼워 넣는 복잡성과도 관련이 있음
     * 마지막으로 링크된 이슈를 작성한 사람임
          + Firefox가 웹사이트 탭을 열 때마다 파비콘을 4배로 로드하는 문제를 발견함
          + 이 문제는 해결되었지만, 비슷한 증상이 다른 원인일 수 있음
     * 이 사이트의 저자는 일반적으로 큰 상업적 엔티티를 모호하게 처리하지만, Firefox에 대해서는 이름을 밝힘
     * 과거 Internet Explorer에서도 비슷한 문제가 있었음
          + 파비콘이 설정되지 않아 404 페이지가 반환되고, 또 다른 파비콘 요청을 트리거함
     * 사용자 경험 측면에서 iPhone용 Firefox는 훌륭한 앱임
          + 몇 년 동안 선호하는 브라우저였음
     * 경로별 파비콘이 실제로 기능처럼 들림
     * 파비콘 요청을 완전히 비활성화하는 방법에 대한 제안이 있음
     * iPhone용 Firefox를 사용 중임
          + 적어도 생성적 AI를 다루는 것보다 에너지를 덜 낭비함
     * Firefox for iOS를 사용할 때 특정 포럼에서 임시 차단을 당한 사용자들이 있었음
          + 아마도 이 문제로 인해 발생한 것임
"
"https://news.hada.io/topic?id=15717","세계 최초 무음극 나트륨 고체 배터리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          세계 최초 무음극 나트륨 고체 배터리

     * UChicago Prof. Shirley Meng’s Laboratory for Energy Storage and Conversion creates world’s first anode-free sodium solid-state battery – a breakthrough in inexpensive, clean, fast-charging batteries
          + 새로운 형태의 배터리가 Prof. Y. Shirley Meng의 연구실에서 개발됨
          + 저렴하고 빠르게 충전되며 고용량의 배터리가 전기차와 그리드 저장에 더 가까워짐
     * Related content
          + 기후 변화, 배터리와 희망: Pritzker Molecular Engineering 교수 Shirley Meng의 TEDx 강연 보기
          + Resurgence 스타트업 ExPost가 배터리 재활용 개선을 위해 DOE로부터 $8M 수상
          + PME 교수 Shirley Meng이 2023 ENSM 상 수상
     * 세계 최초의 무음극 나트륨 고체 배터리
          + UChicago Pritzker Molecular Engineering의 Shirley Meng 교수 연구실에서 세계 최초의 무음극 나트륨 고체 배터리 개발
          + 이 연구는 UChicago Pritzker School of Molecular Engineering과 University of California San Diego의 Aiiso Yufeng Li Family Department of Chemical and Nano Engineering 간의 협력으로 이루어짐
          + 저렴하고 빠르게 충전되며 고용량의 배터리가 전기차와 그리드 저장에 더 가까워짐
     * 논문의 주요 내용
          + UC San Diego 박사과정 학생 Grayson Deysher가 첫 저자로 참여한 논문이 _Nature Energy_에 발표됨
          + 새로운 나트륨 배터리 구조가 수백 번의 안정적인 사이클링을 보여줌
          + 음극을 제거하고 리튬 대신 저렴하고 풍부한 나트륨을 사용하여 더 저렴하고 환경 친화적인 배터리 생산 가능
          + 혁신적인 고체 설계를 통해 배터리가 안전하고 강력해짐
     * 지속 가능성과 나트륨
          + 리튬은 지구의 지각에 약 20ppm 존재하지만 나트륨은 20,000ppm 존재
          + 리튬 이온 배터리에 대한 수요 증가로 인해 가격이 급등하여 필요한 배터리가 더 멀어짐
          + 리튬 추출은 환경에 해로움
          + 나트륨은 해수와 소다 회광에서 쉽게 얻을 수 있어 환경 친화적임
     * 혁신적인 구조
          + 팀은 리튬 배터리의 에너지 밀도를 가진 나트륨 배터리를 만들기 위해 새로운 구조를 발명해야 했음
          + 전통적인 배터리는 충전 중 이온을 저장하는 음극이 있음
          + 무음극 배터리는 음극을 제거하고 이온을 전류 수집기에 직접 저장함
          + 이 접근 방식은 높은 셀 전압, 낮은 셀 비용, 높은 에너지 밀도를 가능하게 하지만 자체적인 도전 과제를 가짐
     * 흐르는 고체
          + 팀은 전류 수집기를 둘러싸는 전해질을 사용하는 혁신적인 접근 방식을 취함
          + 전류 수집기를 알루미늄 분말로 만들어 액체처럼 흐를 수 있는 고체를 만듦
          + 배터리 조립 중 분말을 고압으로 밀집시켜 전해질과의 액체 같은 접촉을 유지함
     * 미래 전망
          + 나트륨 고체 배터리가 먼 미래의 기술로 여겨졌지만, 이번 논문은 나트륨 배터리가 실제로 잘 작동할 수 있음을 보여줌
          + Meng 교수는 다양한 청정하고 저렴한 배터리 옵션이 재생 가능 에너지를 저장하고 사회의 필요에 맞게 확장되기를 희망함
          + Meng 교수와 Deysher는 UC San Diego의 Office of Innovation and Commercialization을 통해 특허 출원함

GN⁺의 정리

     * 이 기사는 세계 최초의 무음극 나트륨 고체 배터리 개발에 대한 내용을 다룸
     * 나트륨 배터리는 리튬 배터리보다 저렴하고 환경 친화적이며, 전기차와 그리드 저장에 유망한 대안임
     * 이 기술은 배터리의 에너지 밀도와 안전성을 높이는 혁신적인 접근 방식을 통해 가능해짐
     * 관련 분야의 연구자와 엔지니어들에게 흥미롭고 유용한 정보를 제공함
     * 비슷한 기능을 가진 제품으로는 기존의 리튬 이온 배터리와 차세대 배터리 기술들이 있음

        Hacker News 의견

     * 리튬 가격이 지난 2년 동안 80% 하락했음
          + 기사에서 언급된 리튬의 희소성은 현재 상황과 맞지 않음
          + 리튬 가격 하락은 청정 에너지 전환에 긍정적인 영향을 미칠 수 있음
     * 전기에 대해 잘 모르지만, 전자가 흐르기 위해서는 양극이 필요함
          + Wikipedia에 따르면, 처음 충전할 때 금속 양극이 생성됨
     * Na4MnCr(PO4)3에 대해 언급
          + 크롬은 지각에서 리튬보다 5배 더 풍부함
          + 일반적인 나트륨 이온 배터리는 희소한 원소를 사용하지 않는 장점이 있음
          + 고체 상태 화학과 일반 화학의 비교가 필요함
     * 논문 사전 인쇄본 링크 제공
          + 에너지 밀도, 부피, 재충전 주기에 대한 정보는 없음
     * 리튬 추출이 환경에 미치는 영향에 대한 논의
          + 물을 표면으로 펌핑하여 증발시키는 방식은 환경 영향이 적음
          + 나트륨 추출과 비교할 필요가 있음
     * 배터리에서 중요한 것은 규모와 총 비용임
          + 요소가 더 저렴하더라도 현재 상태보다 더 나은 제품을 도입해야 함
          + 기존 공장과 제조 기술을 사용할 수 있는지 여부가 중요함
          + 고체 상태 배터리는 전기 항공기와 슈퍼카에서 먼저 도입될 가능성이 높음
     * 나트륨의 풍부함과 안정성은 전력 저장에 큰 잠재력을 제공함
          + 집에 있는 배터리를 나트륨으로 교체하고 싶음
     * 이 배터리가 실제로 어떤 일을 할 수 없는지 지적하는 첫 번째 댓글을 기대함
     * 양극에서 더 많은 일이 일어나는 것 같음
          + 전해질보다 양극에서 더 많은 일이 일어나는 이유가 궁금함
"
"https://news.hada.io/topic?id=15729","동시 데이터 구조의 적절한 테스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           동시 데이터 구조의 적절한 테스트

  동시성 데이터 구조의 적절한 테스트

    하나, 둘, 셋, 둘

     * Rust 라이브러리인 loom을 사용하여 락-프리 데이터 구조를 철저히 테스트할 수 있음
     * 간단한 동시성 카운터 예제 코드 제공
     * 코드의 버그는 증가 연산이 원자적이지 않다는 것임

use std::sync::atomic::{AtomicU32, Ordering::SeqCst};

#[derive(Default)]
pub struct Counter {
    value: AtomicU32,
}

impl Counter {
    pub fn increment(&self) {
        let value = self.value.load(SeqCst);
        self.value.store(value + 1, SeqCst);
    }

    pub fn get(&self) -> u32 {
        self.value.load(SeqCst)
    }
}

    간단한 테스트

     * 여러 스레드에서 같은 카운터를 반복적으로 증가시키고 결과를 확인하는 테스트
     * 테스트는 성공적으로 실패하지만, 타이밍에 의존하여 재현이 어려움

#[test]
fn threaded_test() {
    let counter = Counter::default();
    let thread_count = 100;
    let increment_count = 100;

    std::thread::scope(|scope| {
        for _ in 0..thread_count {
            scope.spawn(|| {
                for _ in 0..increment_count {
                    counter.increment()
                }
            });
        }
    });

    assert_eq!(counter.get(), thread_count * increment_count);
}

    속성 기반 테스트 (PBT)

     * 상태 기계를 테스트하는 데 적합한 속성 기반 테스트 적용 시도
     * 스레드를 수동으로 단계별로 실행할 수 있다면, 다른 스레드의 load&store 사이에 끼워 넣기 쉬움

#[test]
fn state_machine_test() {
    arbtest::arbtest(|rng| {
        let mut state: i32 = 0;
        let step_count: usize = rng.int_in_range(0..=100)?;

        for _ in 0..step_count {
            match *rng.choose(&[""inc"", ""dec""])? {
                ""inc"" => state += 1,
                ""dec"" => state -= 1,
                _ => unreachable!(),
            }
        }
        Ok(())
    });
}

    간단한 계측

     * 스레드가 원자적 연산 사이에서 ""일시 정지""할 수 있도록 하는 방법

pub fn increment(&self) {
    pause();
    let value = self.value.load(SeqCst);
    pause();
    self.value.store(value + 1, SeqCst);
    pause();
}

fn pause() {
    // ¯\_(ツ)_/¯
}

    관리된 스레드 API

     * API 디자인의 한 규칙은 단일 사용자부터 시작하여 API의 느낌을 이해한 후 실제 구현을 진행하는 것
     * 관리된 스레드를 사용하여 속성 기반 테스트 작성

let counter = Counter::default();
let t1 = managed_thread::spawn(&counter);
let t2 = managed_thread::spawn(&counter);

while !rng.is_empty() {
    let coin_flip: bool = rng.arbitrary()?;
    if t1.is_paused() {
        if coin_flip {
            t1.unpause();
        }
    } else if t2.is_paused() {
        if coin_flip {
            t2.unpause();
        }
    }
}

    관리된 스레드 구현

     * 제어 스레드와 관리된 스레드 간의 통신 필요
     * 상태를 보호하는 뮤텍스와 조건 변수를 사용하여 구현

struct SharedContext {
    state: Mutex<State>,
    cv: Condvar,
}

#[derive(PartialEq, Eq, Default)]
enum State {
    #[default]
    Running,
    Paused,
}

impl SharedContext {
    fn pause(&self) {
        let mut guard = self.state.lock().unwrap();
        assert_eq!(*guard, State::Running);
        *guard = State::Paused;
        self.cv.notify_all();
        guard = self.cv.wait_while(guard, |state| *state == State::Paused).unwrap();
        assert_eq!(*guard, State::Running);
    }
}

    전체 코드 통합

     * 관리된 스레드와 테스트 코드 통합

#[test]
fn test_counter() {
    arbtest::arbtest(|rng| {
        eprintln!(""begin trace"");
        let counter = Counter::default();
        let mut counter_model: u32 = 0;

        std::thread::scope(|scope| {
            let t1 = managed_thread::spawn(scope, &counter);
            let t2 = managed_thread::spawn(scope, &counter);
            let mut threads = [t1, t2];

            while !rng.is_empty() {
                for (tid, t) in threads.iter_mut().enumerate() {
                    if rng.arbitrary()? {
                        if t.is_paused() {
                            eprintln!(""{tid}: unpause"");
                            t.unpause()
                        } else {
                            eprintln!(""{tid}: increment"");
                            t.submit(|c| c.increment());
                            counter_model += 1;
                        }
                    }
                }
            }

            for t in threads {
                t.join();
            }
            assert_eq!(counter_model, counter.get());

            Ok(())
        })
    });
}

  GN⁺의 정리

     * 이 글은 동시성 데이터 구조를 테스트하는 방법을 설명함
     * Rust의 loom 라이브러리를 사용하여 원자적이지 않은 연산을 테스트하는 방법을 탐구함
     * 관리된 스레드를 사용하여 동시성 문제를 재현 가능하고 디버깅 가능한 방식으로 테스트함
     * 이 글은 동시성 프로그래밍에 관심이 있는 개발자에게 유용할 것임
     * 비슷한 기능을 가진 프로젝트로는 Java의 JCStress가 있음

        Hacker News 의견

     * Rust로 Temper라는 라이브러리를 개발 중이며, Rust 메모리 모델의 복잡한 부분을 다루기 위해 많은 노력이 필요함
          + C++/Rust 메모리 모델의 가장 큰 테스트 케이스 모음을 포함하고 있음
          + Loom은 더 완전한 라이브러리로, 뮤텍스와 큐 같은 고수준 구조를 철저히 테스트할 수 있게 해줌
          + Foundation DB 테스트 강연에서 영감을 받았으며, WebAssembly가 이 분야에서 중요한 역할을 할 것이라고 믿음
     * Rust에서 공유 메모리 원자 스냅샷을 구현했으며, 자동화된 테스트를 매우 중요하게 생각함
          + 처음에는 Loom을 사용했지만 나중에 Shuttle로 전환함
          + Shuttle은 무작위화된 접근 방식을 사용하며, 버그를 찾는 확률적 보장을 제공함
          + Shuttle은 더 빠르고 복잡한 테스트 시나리오에 잘 확장됨
          + 실패한 테스트를 재현할 수 있는 기능이 매우 중요함
     * 이 접근 방식의 단점은 테스트 코드에 맞게 코드 자체를 수정해야 한다는 점임
          + 두 스레드를 실행하고 ptrace로 단일 스텝을 통해 명령어 실행을 무작위로 섞는 방법으로도 가능할 것임
     * JetBrains의 Lincheck은 Kotlin/Java 세계에서 좋은 라이브러리임
          + 선언적이며 선형화 결과를 출력하는 방식이 마음에 듦
     * C++용 ""Loom"" 같은 라이브러리가 있는지 궁금함
          + 잠금 없는 데이터 구조를 테스트하고 싶음
     * 이 접근 방식은 소프트 전진 보장에 한계가 있을 수 있음
          + cmpxchg 루프에서 실제 하드웨어와 스케줄러에서는 중단될 가능성이 매우 낮음
          + 그러나 이 테스트 접근 방식에서는 작업 수와 일시 중지 횟수에 따라 전진 확률이 달라짐
     * 실질적인 지식이 필요하며, 실제 스레드를 생성해야 함
          + 비동기 런타임을 사용할 수 있는지 궁금함
     * ptrace를 사용해 스레드를 단일 스텝으로 실행하여 명령어 수준에서 다른 인터리빙을 만들 수 있음
          + 블랙박스 테스트 대안이 있는지 궁금함
     * Loom을 사용하려면 조건부 컴파일을 사용해야 하며, 이는 다소 침입적임
          + 다른 언어가 자체 스케줄러를 사용하는 데 더 나은지 궁금함
     * Python에서 동일한 작업을 수행하는 방법을 알고 싶음
          + 이와 같은 테스트를 허용하는 스레드 클래스를 만들 수 있는지 궁금함
"
"https://news.hada.io/topic?id=15659","다섯 번째 Busy Beaver로 연구자들, 계산 한계에 접근","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   다섯 번째 Busy Beaver로 연구자들, 계산 한계에 접근

     * 도입부
          + 40년 전, 독일 도르트문트에서 컴퓨터 과학자들이 모여 다섯 번째 바쁜 비버를 찾기 위해 경쟁했음
          + 바쁜 비버는 간단한 컴퓨터 프로그램으로, 실행 시간이 매우 길어짐
          + 이 프로그램들은 수학의 유명한 미해결 문제들과 관련이 있으며, 컴퓨터 과학의 오래된 문제에서 비롯됨
          + 2년 전, 대학원생 Tristan Stérin이 바쁜 비버 챌린지를 시작했으며, 전 세계에서 20명 이상의 기여자가 참여함
          + 오늘날, 팀은 BB(5)의 값을 47,176,870으로 확인했음
     * 멈출 것인가, 멈추지 않을 것인가
          + 바쁜 비버 프로그램은 튜링 기계라는 이론적 컴퓨터를 위한 명령어로 작성됨
          + 튜링 기계는 무한 테이프에 0과 1을 읽고 쓰며 계산을 수행함
          + 튜링 기계가 멈출지 영원히 실행될지 예측하는 문제를 멈춤 문제라고 함
          + 멈춤 문제는 일반적인 해결책이 없으며, 이는 바쁜 비버 사냥을 더욱 매력적으로 만듦
     * 비버의 등장
          + 수학자 Tibor Radó는 1962년에 바쁜 비버 게임을 발명함
          + 각 규칙 그룹에서 가장 오래 실행되는 튜링 기계를 바쁜 비버라고 부름
          + BB(n)은 n개의 규칙을 가진 바쁜 비버 기계가 멈추기 전까지 걸리는 단계 수를 나타냄
     * 브래디의 비버 무리
          + Allen Brady는 1960년대에 바쁜 비버 사냥 기술을 개발했으며, 1974년에 네 번째 바쁜 비버 값을 결정함
          + BB(4)는 107단계 후에 멈추는 기계로 확인됨
     * 다섯 번째 비버
          + 1984년 도르트문트 대회에서 다섯 번째 바쁜 비버를 찾기 위한 첫 번째 큰 사냥이 시작됨
          + 1989년, Heiner Marxen은 47,176,870단계 후에 멈추는 기계를 발견함
          + 2003년, Georgi Georgiev는 43개의 해결되지 않은 튜링 기계를 남기고 BB(5) 사냥을 중단함
     * 모든 사냥꾼을 호출
          + Tristan Stérin은 2022년에 바쁜 비버 챌린지를 시작했으며, 전 세계의 기여자들이 참여함
          + Shawn Ligocki는 2022년에 팀에 합류하여 중요한 기여를 함
          + Justin Blanchard는 팀의 가장 강력한 기술 중 하나인 폐쇄 테이프 언어 방법을 개발함
     * 괴물의 접근
          + Skelet #1과 #17은 특히 어려운 기계로, 팀은 이를 해결하기 위해 다양한 아이디어를 결합함
          + 2023년 5월, mxdys라는 익명의 기여자가 Coq 증명을 완료함
     * 비버가 돌아다니는 곳
          + 팀은 공식적인 학술 논문을 작성 중이며, 일부는 다음 비버를 찾기 위해 노력 중임
          + BB(6)는 Collatz 추측과 유사한 문제로 인해 해결이 어려울 것으로 보임

GN⁺의 의견

     * 이 기사는 컴퓨터 과학의 한계를 탐구하는 흥미로운 사례를 제공함
     * 바쁜 비버 챌린지는 협력적 연구의 중요성을 보여줌
     * BB(5)의 해결은 컴퓨터 과학 및 수학 커뮤니티에 큰 의미를 가짐
     * 유사한 기능을 가진 프로젝트로는 Collatz 추측 연구가 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 협력과 재현 가능성이 중요함

        Hacker News 의견

     * Scott Aaronson의 블로그 포스트에 대한 의견이 공유됨
          + 관련된 이전 스레드 링크가 제공됨
     * Busy Beaver 문제의 다양한 변형이 존재함
          + 람다 계산법을 사용한 변형이 있음
          + Kolmogorov 복잡성으로 표현되는 변형이 있음
     * 한 엔지니어가 Busy Beaver 문제를 연구하기 위해 직장을 그만둔 이야기가 공유됨
          + 이 엔지니어가 mxdys인지 궁금해함
     * Coq 증명에 대한 언급이 있음
          + 처음부터 정리된 증명이 아닌, 처음으로 정리된 증명일 가능성을 제기함
     * Tibor Radó의 원래 Busy Beaver 논문이 읽기 쉽고 재미있다는 의견이 있음
          + 현대 버전의 논문 링크가 제공됨
     * 5-상태 2-색 Turing 기계 프로그램의 정지 문제가 해결되었음
          + 2-상태 4-색 경우에 대한 적용 가능성을 제기함
     * 인간이 정지 문제를 직관적으로 해결할 수 있다는 잘못된 생각에 대한 언급이 있음
     * 개인 프로젝트에서 Cutting Stock 문제를 해결하기 위한 프로그램을 작성한 경험이 공유됨
          + Brady의 프로그램과 유사한 최적화 방법을 사용함
     * 5-상태 Turing 기계 프로그램의 정지 여부를 증명할 수 있었던 것은 운이 좋았다는 의견이 있음
     * Scott Aaronson의 블로그 포스트에 따르면 16,679,880,978,201개의 5-상태 Turing 기계가 존재함
          + 이 중 몇 퍼센트가 정지하는지 궁금해함
     * Busy Beaver 함수의 값이 공유됨
          + BB(5)가 47,176,870으로 증명됨
          + BB(6)는 최소 10^10^...^10 (15단계 지수의 탑)임
"
"https://news.hada.io/topic?id=15685","Twilio, 해커가 3,300만 Authy 사용자 전화번호 데이터 유출한 것을 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Twilio, 해커가 3,300만 Authy 사용자 전화번호 데이터 유출한 것을 확인

     * 악명 높은 ShinyHunters 해커 그룹이 BreachForums 웹사이트에서 Twilio의 2FA 앱 Authy와 관련된 무작위 전화번호 3,300만 개를 유출한다고 발표함
     * 유출된 정보에는 계정 ID와 일부 비개인 데이터도 포함됨
     * Twilio는 웹사이트에 보안 경고를 게시하여 데이터 유출을 확인함
     * ""Twilio는 인증되지 않은 엔드포인트를 통해 Authy 계정과 관련된 데이터를 식별할 수 있었던 위협 행위자를 감지했습니다. 우리는 이 엔드포인트를 보호하기 위한 조치를 취했으며 더 이상 인증되지 않은 요청을 허용하지 않습니다""라고 회사는 밝힘
     * Twilio는 해커가 시스템에 접근하거나 다른 민감한 데이터를 획득한 증거는 없지만, 예방 차원에서 Authy 사용자에게 최신 Android 및 iOS 보안 업데이트를 설치할 것을 권장함
     * ""Authy 계정이 손상되지 않았지만, 위협 행위자가 Authy 계정과 관련된 전화번호를 피싱 및 스미싱 공격에 사용할 수 있으므로 모든 Authy 사용자가 수신하는 문자 메시지에 대해 경계심을 갖고 주의할 것을 권장합니다""라고 Twilio는 말함

GN⁺의 의견

     * Twilio의 데이터 유출 사건은 인증되지 않은 엔드포인트의 중요성을 강조함. 보안 엔드포인트를 유지하는 것이 얼마나 중요한지 보여줌
     * Authy 사용자들은 피싱 및 스미싱 공격에 대한 경계심을 높여야 함. 전화번호 유출로 인해 이러한 공격이 증가할 가능성이 있음
     * Twilio는 빠르게 대응하여 엔드포인트를 보호했지만, 다른 회사들도 유사한 상황에 대비해야 함. 예방 조치가 중요함
     * ShinyHunters와 같은 해커 그룹의 활동이 계속 증가하고 있음. 기업들은 지속적으로 보안 상태를 점검하고 강화해야 함
     * 유사한 기능을 제공하는 다른 보안 앱으로는 Google Authenticator, Microsoft Authenticator 등이 있음. 사용자는 다양한 옵션을 고려해 볼 수 있음

   https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93

   Authy 안의 데이터를 추출하는 법

        Hacker News 의견

     * 내 전화번호가 여러 데이터 유출에 포함되어 스팸이 많아졌음
          + 전통적인 전화 네트워크는 스팸 문제로 인해 팩스처럼 사라질 위험이 있음
          + 가족과의 통화도 FaceTime, Zoom, Meet 등을 사용하고 있음
          + 전통적인 전화 네트워크를 통한 합법적인 통화를 기억하지 못함
          + 이러한 플랫폼들은 시장을 완전히 장악하면 광고를 추가할 가능성이 있음
          + Gmail이 이메일을 통해 수익을 창출한 사례를 보면 알 수 있음
     * Authy가 휴대폰 번호와 이메일 주소를 요구하는 것은 불합리함
          + 클라우드 동기화나 백업이 필요하지 않음
          + 사용자 정보를 클라우드에 저장하는 것은 공격 대상이 될 수 있음
          + 이는 2FA의 정신에 맞지 않음
     * Twilio는 SendGrid와 Twilio 자체의 2FA를 위해 Authy를 요구함
          + 표준화된 2FA를 지원하지 않아 1Password를 사용할 수 없음
          + Authy를 사용하도록 강요받았지만 여전히 문제가 발생함
          + Twilio는 사용자에게 맞춤형 솔루션을 강요하지 말아야 함
     * 많은 조직과 기업이 첫 접촉 시 개인 정보를 요구하는 것에 불만을 가짐
          + 의료 서비스 제공 업체도 클라이언트 데이터를 명확한 텍스트 이메일로 전송함
          + 의료 결과를 제공하는 문서의 저작권이 자신들에게 있다고 주장함
          + 사람들은 이러한 서비스에 높은 평점을 주지만, 실제로는 이용 약관을 읽지 않음
     * 사용자 등록 엔드포인트에서 정보 노출 취약점을 발견했음
          + Authy 사용자의 전화번호를 통해 다른 번호, 기기, 타임스탬프, 이메일 주소 등을 조회할 수 있었음
          + 이 문제를 해결하는 데 2년이 걸렸음
     * Authy의 iOS 앱을 사용하여 2FA 토큰을 생성하지만 전화번호를 입력한 기억이 없음
          + iOS 클라이언트 앱 자체의 문제인지, 온라인 계정을 생성한 사용자만 영향을 받는지 확인 중임
     * Twilio가 인증되지 않은 엔드포인트로 인해 Authy 계정과 관련된 데이터를 식별할 수 있었음
          + 이 엔드포인트를 보안 조치하여 더 이상 인증되지 않은 요청을 허용하지 않음
          + 자신의 앱에서 이러한 문제를 피하려면 모든 요청에 대해 인증을 강제하고, 행 수준 보안을 적용해야 함
          + 테스트 프레임워크를 사용하여 이러한 문제를 감지할 수 있음
     * Authy의 커스텀 인증 스킴을 사용하지 않는 경우, 지금이 데이터를 내보낼 때임
          + 데스크탑 버전에서만 raw totp 토큰을 내보낼 수 있음
          + 데스크탑 앱에 토큰을 로드한 후, 이전 버전으로 다운그레이드하여 자바스크립트 함수를 실행해야 함
     * iPhone에서 방해 금지 모드를 설정하면 모든 전화가 음성 사서함으로 전송됨
          + 긴급 연락처, 즐겨찾기, 1by1 포커스에 있는 사람의 반복 전화만 울림
          + Android에서는 동일한 설정이 작동하지 않음
          + Google Voice나 Fi로 전화번호를 포팅하면 스팸 전화를 필터링할 수 있음
     * ente.io/auth를 구축했음
          + 크로스 플랫폼 인증기가 필요하면 확인해볼 것
          + FOSS, 선택적 e2ee 백업 제공
"
"https://news.hada.io/topic?id=15710","Luakit - 빠르고 확장 가능하며 사용자 정의 가능한 웹 브라우저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Luakit - 빠르고 확장 가능하며 사용자 정의 가능한 웹 브라우저

     * Luakit는 WebKit 웹 콘텐츠 엔진과 GTK+ 기반 브라우저 프레임워크
     * 매우 빠르고 Lua로 확장 가능하며, GNU GPLv3 라이센스로 제공
     * 주로 파워 유저, 개발자 및 웹 브라우저의 동작과 인터페이스를 세밀하게 제어하고 싶은 사람들 대상
     * Linux/BSD, Solaris, Windows 10(WSL), HURD 지원
"
"https://news.hada.io/topic?id=15651","KT 60만명 해킹의 심각성: 사상 최악의 사이버 범죄로부터 당신은 지금도 안전하지 않다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           KT 60만명 해킹의 심각성: 사상 최악의 사이버 범죄로부터 당신은 지금도 안전하지 않다

     * KT가 60만명 가량의 자사 인터넷을 사용하는 고객의 기기를 해킹했다는 사실이 밝혀짐
     * 이는 사이버 안전에 대한 심각한 위협이며 모든 이용자의 개인정보를 위태롭게 하는 매우 중대한 사안임에도 불구하고 상대적으로 적은 관심을 받고 있음

  해킹은 어떻게 이루어졌나

     * KT는 웹사이트와 고객 사이에서 일어나는 네트워크를 감청하고 탈취
     * KT가 손수 만든 바이러스를 담은 소프트웨어로 바꿔치기 한 후, 고객의 기기에 있는 파일을 마음대로 조작하고 삭제
     * 이는 사건의 심각성의 빙산의 일각이며 훨씬 더 많은 문제점들이 존재

  처음이 아닐 수 있다

     * KT의 해킹은 매우 악질적이고 고도화되어 있음
     * 직접 멀웨어를 만들어 자사의 서비스를 사용하는 사람들에게 중간자 공격을 통해 배포하고 기기에 심각한 문제를 일으킴
     * 이러한 해킹은 일반적으로 한번에 설계하기 어려운 매우 고도화된 해킹 수법이며 여러번의 개별 시도를 통해 노하우를 쌓고 여러 기술들을 마련해 놓아야 가능
     * KT의 고객을 대상으로 한 해킹이 이번이 처음이 아닐 수 있으며, 이미 여러 번 이용자의 네트워크를 갈취하거나 기기에 악성 코드를 삽입했을 수 있음
     * KT를 공급망으로 사용하는 웹서비스 운영자들 또한 KT가 자신들의 트래픽이 탈취하고 감청했거나 할 수 있다는 사실을 알아야 함

  KT를 사용하지 않더라도 위험하다

     * KT가 관리하는 인터넷 네트워크의 규모가 매우 크기 때문에, 본인이 KT를 사용하지 않더라도 자신이 이용하는 인터넷 서비스 - 검색, 영상 시청, 날씨 불러오기, 메일 등 모두 KT의 공격에 사용될 수 있음

  한국의 커다란 보안 허점

     * 60만명에 달하는 매우 많은 사람을 해킹하고서야 이 사건이 드러났다는 사실은, 60만명에 달하는 사람들이 해킹이 될 때까지 아무도 원인을 찾지 못했다는 것을 의미
     * 과기부에서는 이 범죄를 최소 9개월 전부터 인지하고 있었지만 무엇도 알리지 않고 어떠한 조치도 취하지 않았음
     * KT가 주도면밀하게 해킹을 계획하고 수많은 기기에 바이러스를 심었는데, 과기부는 조용히 있고 KT는 거꾸로 해킹 사실을 밝혀낸 회사를 고소한 상황
     * 밝혀진 보안 위협으로부터도 한국의 개인들과 웹서비스들은 안전하지 않다는 사실을 보임

  ISP와 이용자 간의 명백한 정보 비대칭과 신뢰

     * ISP가 지금까지 사용자의 데이터를 탈취하지 않았는지, 사용자의 컴퓨터에 바이러스를 심지 않았는지 알 수 없음
     * ISP가 실제로 사용자의 데이터를 탈취하지 않을 것이라고 주장하더라도 이를 확인할 방법이 없음
     * KT는 이미 다수의 네트워크를 탈취하고 바이러스를 심었으며, 이는 ISP가 신의성실하게 네트워크를 제공할 것이라는 보장을 무너뜨림

  KT의 같잖은 변명

     * KT는 해당 해킹이 정당하다거나 사내 소수의 인원이 일으켰다고 변명하고 있지만, 이는 말이 되지 않는 소리
     * 개인의 네트워크를 탈취해 기기에 심각한 문제를 일으키는 악성 코드를 심어 고객의 파일을 마음대로 조작하고 삭제하는 행동을 정당하다고 할 수 없음
     * 사내 소수 인원이 일으켰다면 KT의 사내 보안이 완전히 엉망이라는 것을 시인하는 꼴

  마치며

     * ISP가 고객의 네트워크를 감청하고 컴퓨터에 멀웨어를 심는 것은 전세계적으로도 유례가 없는 사건
     * 이 사건은 단순히 나라 망신이나 이러다 말겠지 하고 넘어갈 만한 일이 아니며, 한국 인터넷 역사에서 가장 은밀하고 위험한 사이버 범죄 조직이 드러난 순간으로 더 심각하게 받아들여야 할 필요가 있음


   해당 글은 CC0으로 공유되며 허락이나 출처 없이 자유롭게 글을 인용 및 공유하실 수 있습니다.

   저도 KT 썼을때 이상한 알 수 없는 앱들 깔리고 해킹당했어서 핸드폰 바로 바꾸고 통신사,전번도 바꿨는데도 해킹 당했어요. KT 뿐만 아니라 다른 통신사도 악성코드 많지 않을까? 라는 생각이 듭니다…

   고객을 털자… 라는게 농담이 아니었던 건에 대하여

   큰 이슈가 되지 않는다는 게 정말 중국에서나 일어날 법한 잘못된 일입니다.
   잇섭 같은 유튜버가 다뤄야 이슈가 되려나요..

   K-황금방패 ㅋㅋㅋㅋㅋ

   진짜 말도 안되는 일...

   진짜 저도 왜 이게 크게 이슈화가 안되는지 의문이네요. 엄청난 사건인데 정말

   SKT 메타트론 사태에 이어 전세계적으로 개쪽팔릴 일을 하나 더 만들었군요...... 하아... 국내 개발자들이 무시못할 수준인데 왜 아무도 안 말렸을까요?

   https://mnews.jtbc.co.kr/News/Article.aspx?news_id=NB12202643

   그런데 일부 내용은 뇌피셜이 좀 들어간 것 같네요

   https://www.fmkorea.com/7204841806

   요글이 말투가 좀 더 강경해서 더 와닿을 수 있겠네요

   꼭 전문도 같이 읽어보시길 추천드립니다

   첫댓입니다 후후

   올해 최악의 사건이라고 생각합니다... 말도 안되는 일이 일어났는데 말도 안 나오고 뉴스에서 말도 안 나오는 것도 말도 안되는 상황이네요

   전세계적으로 역대급 사건이네요.. 과기부.. 역시 레전드고요. 누굴 위해 존재하는 부처인지 ㅉㅉ

   정상적이라면 회사 망해야 할 엄청난 사건인데, 언론은 보도 조차 크게 안함.

   아라사카나 밀리테크도 이정도까진 아닌데...

   다시 국유화 시켜야 합니다..

   저도 동의합니다.

   진심으로 진심으로 동의합니다

   처벌하지 않거나 문제삼지 않는 것이 권력입니다. 왜 통신사들이 과징금만 내고 그냥 넘어가겠어요. 정경유착 심한 분야가 통신입니다. IT강국이라는 정부의 선전에 휘둘리면 안됩니다

   처벌은 부차적인 문제입니다. 모든 KT의 서비스를 사용하는 사람들이 통신이 안전하지 않으며 범죄에 사용될 수 있고 KT의 서비스를 사용하는 것 자체를 심각한 보안 위협으로 받아들여야 한다는 사실을 아는 것이 시급합니다.

   정말 최악의 사건이죠.. 그것도 ISP 대표 업체가;;

   이딴게 IT 선진국????

   안녕하세요, 좋은 글 잘 읽었습니다.

   KT의 악성코드 해킹 행위는 단순 위법행위가 아니라 반헌법적 행위라 할 수도 있을만큼 심각한 사건인데 TV 방송사 또는 메이저 언론사(JTBC 제외)가 다 잠잠한 게 매우 이상합니다. 클리앙 등 몇몇 인터넷 커뮤니티에 이 사건의 심각성을 알리는 글을 써서 알리긴 했지만 크게 이슈가 되지 않고 있습니다.

   저는 엔지니어이자 변호사로서 이 사건에 계속 관심을 가지고 KT에게 국민의 힘을 보여줄 수 있는 수단에 대하여 고민 중에 있습니다.

   주변에 피해자가 있으시면 아래 링크 공유해주시면 고맙겠습니다(KT 악성코드 해킹 집단소송 모집 사이트 입니다).

   https://kt.sar.kr/

   감사합니다.

   자국민들 상대로 ISP가 감청을 한다는 전세계 IT 역사에 남는 일이다 이말입니다.
"
"https://news.hada.io/topic?id=15667","엔비디아 주가 급락, AI는 거품일까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          엔비디아 주가 급락, AI는 거품일까

     * 급락한 엔비디아 주가의 원인
     * 반독점 규제로 프랑스, 미국, 유럽 등 여러 국가에서 CUDA 조사 착수중
     * 데이터 고갈 문제도 AI 사업 전망에 대한 부정적 영향
     * 증권가는 아직 긍정적

   요즘 크기가 적은 모델들이 생각보다 좋은 성능을 보여주는 것도 한가지 요인이 아닌가 생각되네요.

   제가 샀기 때문에 급락했습니다! (달랑 1주)

   오늘은 급등..했죠..
"
"https://news.hada.io/topic?id=15628","Show GN: Moonlight: 논문 3배 빨리 이해하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: Moonlight: 논문 3배 빨리 이해하기

논문 읽기 도구 Moonlight

   [ 서비스 소개 ]
   복잡한 개념, 수식, 그림 등으로 머리가 아프셨나요?
   수많은 하이퍼링크를 클릭하고 다시 돌아오는 번거로움에 지치셨나요?
   인용 논문을 확인하는 과정이 어렵다고 느끼셨나요?

   Moonlight는 이러한 문제를 해결해 논문 읽기를 더 편리하게 도와주는 도구입니다.
   하루에 수백 개의 논문이 쏟아지는 세상에서 Moonlight를 통해 논문을 더 빠르고 쉽게 이해할 수 있습니다.

   [ 주요 기능 ]
     * 텍스트 하이라이트 : 모르는 것이 있다면 언제든 하이라이트하고 질문해보세요. 논문의 맥락을 고려하여 원하는 언어로 설명해줍니다.
     * 이미지 캡처: Cmd(Ctrl) + 드래그로 이미지나 수식을 캡처해서 질문할 수도 있습니다!
     * 하이퍼링크 미리보기: 하이퍼링크에 마우스를 올려 정보를 미리 확인하세요. 인용, 피겨, 테이블, 외부 링크 등 모든 타입의 하이퍼링크를 지원합니다.
     * 채팅: 채팅창에서의 추가 질의응답을 통해 확실한 이해를 도와드립니다.

   [ 실제 사용자 후기 ]
     * 서울대 A랩실: ""너무 잘 쓰고 있습니다..ㅎㅎㅎㅎㅎ 수식 설명해주는거 완전 좋네요. 연구실동기들한테도 줘봐도 되나요?""
     * 연세대 B랩실: ""너무 좋아서 혼자쓰긴 아깝네요 ㅎㅎ 잘 쓰겠습니다~~ / 말씀하신것 듣고 하이라이트 어제부터 설명 써보는 중인데 이젠 하이라이트 설명 사용이 90퍼센트 이상입니다 하이라이트 설명 최고""
     * O회사 기업연구소: ""아주 신세계에요 ㅋㅋ 저희 팀원분들에게 공유드려도 괜찮을까요?? 사용성이 어마어마하네요... 감사합니다!!! ㅎㅎ""

   기타 국내 수많은 랩실, 기업연구소에서 수백 명의 리서처 분이 사용하시면서 긍정적인 후기를 많이 남겨주고 계십니다.

   [ 지금 바로 사용해보세요! ]
     * 크롬 익스텐션 설치하기
     * 데모 영상 보기

   좋은 익스텐션 감사합니다 :-) 아직 공개되지 않은 자료에 대해서도 활용하고 싶은데, 요청으로 들어가는 텍스트가 기록되거나 재학습에 사용될 수 있는지 궁금해요.

   문라이트의 답변은 기록되나 요청으로 들어가는 텍스트는 기록 혹은 재학습에 사용되지 않습니다.
   문라이트 사용해주셔서 감사합니다.

   오! 다시 한번 좋은 제품 만들어주셔서 감사드려요 _ _)

   너무 편하게 잘 쓰고 있습니다:)

   감사합니다 :)

   이거 정말 너무 편합니다 ㅎㅎ

   감사합니다ㅎㅎ 주변에 많이 알려주세요!

   ""하라는 일은 안하고..."" 라서 이름이 moonlight 인걸까요 ㅋㅋㅋ

   이해하기 매우 어려운(앞이 깜깜한) 부분을 읽어도 뒤에서 은은하게 달빛을 비춰준다의 의미입니다 :)

   오... 시적인 의미였군요ㅎㅎ
   작업 감사합니다 👍

   논문을 빠르게 읽을 때 도움이 될 것 같네요. 텍스트를 드래그하면 맥락을 짚어주는 부분과 수식 설명 부분이 좋았습니다. 유료가 된다해도 가치가 충분하다고 보여요.

   감사합니다ㅎㅎ

   너무 멋지십니다 👍

   감사합니다 :)

   이건 언제까지 무료일까요? 너무 좋은데 언젠가 유료화되거나 사용 불가능 될까봐 무섭네요. 차라리 제 API 키를 직접 넣어서 쓰고 싶어요.

   1-2주 이내로 유료화를 계획하고 있습니다. 운영 비용이 점점 커지는지라..ㅠㅠ 그렇게 부담되는 금액은 아닐겁니다!

   네 요금 지불에는 두려움이 없으나 사용하지 못하게 될까봐요 좋은 도구 만들어주셔서 감사합니다.

   윈도우에서는 Ctrl이 아니라 Window키로 이미지 드래그가 되는 것 같네요.
   기본 윈도우키 동작 때문에 Window 누르기 - 마우스 누르기 - 드래그 - 마우스 떼기 - 달모양 클릭 - Window 떼기 - 열린 윈도우창 닫고 웹 확인 순으로 가야 하는 것 같습니다.

   제보 감사합니다. 윈도우에서 동작 좀 더 꼼꼼하게 검토해보겠습니다.

   말씀해주셨던 버그 오늘 배포되었습니다! 사용해보시고 또 불편한 점 있으시면 taeho@corca.ai로 메일 주세요!

   버그같은 현상과는 별개로 너무 좋네요.
   특히 수식... 복사하면 깨지는데 어떻게 가져간건지 신기합니다 ㄷㄷ

   감사합니다 :)
"
"https://news.hada.io/topic?id=15694","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   오랜만에 좋아하는 바에 갑니다. 칵테일도 마시고 새로운 위스키도 마실려구요.

   비가 많이 온다고 하네요. 2010년경에 구입한 윈도우 비스타가 탑재된 오래된 소니 노트북을 업그레이드 할라고 합니다. 하드 SSD로 바꾸고 메모리만 좀 업글해서 스타크레프트나 돌리려구요..ㅋㅋ

   그림 모임이 오랜만에 생겨 그림 연습하려고요.
"
"https://news.hada.io/topic?id=15630","Ask GN: 구인 공고 - 멤버를 찾고 계신가요? (2024년 3분기)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ask GN: 구인 공고 - 멤버를 찾고 계신가요? (2024년 3분기)

   현재 근무중인 스타트업에서 같이 일할 멤버를 찾고 계시다면
   회사 소개 / JD / 위치 / 리모트 가능 여부 / 연락방법(이메일,웹사이트) 등을 적어주세요.
   ""멤버가 직접 1개의 댓글로 홍보 글을 작성""하시면 됩니다. (서치펌 등은 불가)

   해당 회사의 공고에 관심있으시면 기재된 메일등으로 연락하시기 바랍니다.

   작성 예)

   하다 | 프론트엔드 개발자, 디자이너 | 서울 역삼 | Remote 가능 | https://hada.io | jobs@hada.io
   하다는 긱뉴스를 개발 및 운영하는 스타트업 입니다. 저희는 이러 저러 해서 엄청 좋은 회사입니다~~
   [1] 프론트엔드 개발자 JD : 내용 또는 URL
   [2] 디자이너 JD : 내용 또는 URL

   스파크플러스 | Frontend Engineer(Lead) | 역삼역 8번 출구

   📌 스파크플러스에서 리드급 프론트엔드 개발자를 찾습니다!

   [일하는 사람과 공간에 진심인 1등급 오피스, 스파크플러스]

   스파크플러스는 1인 기업부터 스타트업, 대기업의 오피스 환경을 구축하며 빠르게 성장했습니다.
   2016년 설립 이후 매년 두 자릿수 성장률을 기록하고 있고, 한국형 공유오피스 기업 중 유일하게 2년 연속 흑자를 달성하며 오피스 시장을 선도하고 있습니다.
   최근 20~50인 규모의 기업이 쉽고 간편하게 오피스를 만들고 운영하는 서비스 오피스B와 빌딩의 자산 가치를 높여주는 빌딩 밸류애드 솔루션을 론칭하면서 테크 기반의 오피스 브랜드로 새로운 스테이지를 맞이했습니다.
   우리는 세상이 변화를 요구하기 전에 한발 앞서 유의미한 변화를 만들어냅니다.
   그 중심에는 공간, 간편함을 넘어 일과 사람이 있습니다.
   스파크플러스와 함께 새로운 오피스 브랜드를 만들어갈 일과 사람, 공간에 진심인 크루를 찾습니다!

   🖥️ Frontend Engineer(Lead) 에 대한 자세한 JD는 하단을 참조해주세요.
   https://careers.sparkplus.co/4111464b-ddb5-4a56-93e5-ca82afb40759

   가우디오랩 | C++ Software Engineer | 강남구 삼성역 인근 | 자율근무 |
   채용 공고: https://www.gaudiolab.com/ko/careers/open-position/46

   🎧 가우디오랩을 소개해요
   가우디오랩은 세계적으로 손꼽히는 오디오 기술을 통해, 여러분께서 전혀 경험해 보지 못했던 새로운 차원의 소리 경험을 제공하는 회사입니다. 메타버스의 완성을 담당하는 스페이셜 오디오(공간음향)와 AI 오디오 기술의 가장 첨단, 그 이상의 경지에서 비교 불가한 오디오 기술의 초격차를 구현해내고 있습니다.

   가우디오랩에서 매일 창조되는 새로운 소리들은 플로, 멜론, 벅스뮤직 등 국내 메이저 스트리밍 플랫폼부터 매일 스마트폰으로 소비하는 OTT 서비스인 티빙까지 국내외 유수의 서비스에 적용되어 여러분의 귀에 가닿고 있습니다. 이미 매일 약 2천만 명의 사용자가 가우디오랩의 소리기술을 경험하고 있다는 사실! 가우디오랩과 함께 폭발적으로 성장하며 스케일업을 만들어나갈 미래 가우딘을 정중히 모시고자 합니다.

   가우디오랩의 이야기가 더 궁금하시나요?
   가우디오랩 블로그를 참고해주세요! > https://www.gaudiolab.com/ko/blog

   [레몬베이스 - 회사와 구성원의 건강한 성장을 기술로 실현하는 HR SaaS 스타트업]

   사람은 깨어 있는 시간의 70%를 일터에서 보냅니다. 그 시간이 돈을 벌기 위한 수동적인 시간이 아니라, '나와 조직의 성장과 성공을 위해 주도적으로 활용하는 시간'이 될 수 있도록 레몬베이스는 성장하고 성과를 내는 방식을 기술을 통해 혁신하고 있습니다.

   레몬베이스 팀은 이 문제를 지속적인 성과관리(Continuous Performance Management)로 해결할 수 있다고 믿습니다. 레몬베이스를 통해 일 년에 한두 번이 아니라 일 년 내내 목표를 스스로 설정하고, 그 과정을 실시간으로 공유하고, 또 1:1 미팅을 통해 코칭을 주고받으며, 더 자주 동료들로부터 칭찬과 피드백을 받을 수 있습니다.

   2023년, 70억원 규모의 시리즈A 투자를 유치해 누적 투자액이 140억원으로 늘어난 레몬베이스는 빠르게 성장하는 테크 기업부터 다양한 산업의 엔터프라이즈 기업까지, 시대를 선도하는 수많은 기업과 함께 성과관리를 혁신하고 있습니다.

   ""회사와 구성원의 건강한 성장""이라는 미션을 가진 레몬베이스와 함께 성장할 미래의 크루를 찾고 있습니다. 레몬베이스 팀의 여정에 동참해 주실 분들을 기다립니다 :)

   *팀 소개 / 채용페이지: https://www.lemonbase.team/
   *엔지니어링 그룹 페이지: https://www.lemonbase.team/group_engineering

   ✔️ 프론트엔드 엔지니어: https://www.lemonbase.team/recruit/fe
   ✔️ 데이터 애널리틱스 엔지니어: https://www.lemonbase.team/recruit/de

   *서울 성동구, 하이브리드 근무(주3일 재택근무)

   살펴보시며 궁금한 점이 생기거나, 지원 전 고민되는 것이 있으신 경우 start@lemonbase.com으로 문의해 주세요 🙂
"
"https://news.hada.io/topic?id=15687","행복한 재미있는 분기 예측기 조롱 금지 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      행복한 재미있는 분기 예측기 조롱 금지 (2023)

    행복한 분기 예측기를 조롱하지 마세요

     * 최근 AArch64 어셈블리를 많이 작성하고 있음
     * 루프에서 점프를 하나 제거하려는 ""똑똑한"" 아이디어가 성능을 저하시킴
     * 이 실수를 설명하여 다른 사람들이 같은 실수를 하지 않도록 함

    코드 예제

float run(const float* data, size_t n) {
  float g = 0.0;
  while (n) {
    n--;
    const float f = *data++;
    foo(f, &g);
  }
  return g;
}

static void foo(float f, float* g) {
  // g를 수정하는 작업
}

    AArch64 어셈블리로 번역

// x0: const float* data
// x1: size_t n
// s0: 반환할 float
stp  x29, x30, [sp, #-16]!
mov s0, #0.0
loop:
  cmp x1, #0
  b.eq exit
  sub x1, x1, #1
  ldr s1, [x0], #4
  bl foo
  b loop
foo:
  // s1에서 읽고 s0에 누적
  // ...
  ret
exit:
  ldp  x29, x30, [sp], #16
  ret

    최적화 시도

     * bl 명령어를 줄여 성능을 향상시키려 함
     * 그러나 성능이 오히려 저하됨

    성능 비교

     * 원본 코드: 969 ns
     * 최적화 코드: 3.85 µs

    원인 분석

     * 분기 예측기가 bl과 ret 쌍이 맞지 않아 혼란스러워함
     * ARM 문서에 따르면, ret 명령어는 함수 반환을 예측하는 데 도움을 줌

    해결 방법

     * ret 대신 br x30 사용
     * 성능 회복: 913 ns

    추가 최적화

     * foo를 인라인하여 성능 향상
     * 루프 언롤링 및 SIMD 명령어 사용

    최종 성능

     * SIMD + 수동 루프 언롤링: 94 ns

    결론

     * 분기 예측기를 혼란스럽게 하지 말 것
     * SIMD 코드가 더 빠르지만, 부동 소수점 덧셈이 결합 법칙을 따르지 않으므로 결과가 다를 수 있음

    GN⁺의 의견

     * 이 글은 AArch64 어셈블리 최적화의 중요성을 잘 보여줌
     * 분기 예측기의 작동 원리를 이해하는 것이 성능 최적화에 필수적임
     * SIMD 명령어를 사용한 최적화는 매우 효과적이지만, 정확도 문제를 고려해야 함
     * Rust와 같은 고수준 언어를 사용하면 컴파일러 최적화를 통해 성능을 쉽게 향상시킬 수 있음
     * 유사한 기능을 가진 프로젝트로는 Agner Fog의 어셈블리 최적화 가이드가 있음

        Hacker News 의견

     * Apple II 시절의 친구들과 함께 기사를 요약했음
          + 최적화된 코드가 1024개의 32비트 부동 소수점 숫자를 합산하는 데 94 나노초가 걸림
          + 1 MHz 6502는 94 나노초 동안 첫 번째 명령어의 첫 번째 바이트를 메모리에서 가져오려고 할 것임
          + 이 코드는 캐시에서 실행될 때만 최적화된 성능을 발휘함. DRAM은 느림
     * Raymond Chen이 거의 20년 전에 동일한 주제를 다뤘음
          + 루프 종료를 확인한 후 분기 없이 foo 함수로 넘어감
          + 기본적인 예측 휴리스틱을 위반한 것임
          + 분기 예측기가 반환 주소의 그림자 스택을 유지하는 것은 수십 년 동안 존재해 왔음
     * SIMD 코드에는 부동 소수점 덧셈이 결합법칙을 따르지 않기 때문에 다른 순서로 합산을 수행할 수 있음
          + 이는 컴파일러가 SIMD 명령어를 생성하지 않는 이유일 수 있음
          + 부동 소수점 합산은 기본적으로 오류 범위를 가지며, 그 범위 내의 모든 답변은 유효함
          + 특수한 부동 소수점 입력이 있는 경우 언어는 이를 명시적으로 인코딩할 수 있는 수단을 제공해야 함
     * Rust 1.78 이후 컴파일러는 더 공격적인 루프 언롤링과 약간의 SIMD를 사용함
          + 루프 언롤링은 Rust 1.59에서 시작됨
          + Github 코드에서는 Rust 1.67.0-nightly 버전을 사용하고 있었음
     * ARM/ARM64 어셈블리에서 x0가 어떻게 증가하는지 혼란스러웠음
          + ldr s1, [x0], #4 명령어가 x0를 4만큼 증가시키면서 로드함
          + x86_64에는 한 번에 로드하고 증가시키는 단일 명령어가 없음
     * 어셈블리 코드를 최적화하기 위해 덜 복잡한 방법을 시도하지 않은 것이 놀라움
          + 루프의 맨 아래에서 하나의 분기만 필요하도록 어셈블리 코드를 재작성할 수 있음
          + foo를 인라인하고 RET 명령어를 생략할 수 있음
     * 작성자가 단위를 계속 바꾸지 않았으면 좋겠다는 의견이 있었음
"
"https://news.hada.io/topic?id=15615","기술 서적 집필의 경제학","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             기술 서적 집필의 경제학

    책을 써서 돈 벌기

     * 기술 서적을 쓰는 기본 규칙: 돈을 위해 기술 서적을 쓰지 말 것
     * 기술 서적을 통해 돈을 벌 수는 있지만, 주된 목적이 되어서는 안 됨

    수익 창출

      수동 소득

     * 로열티는 수동 소득으로 간주됨
     * 과거의 작업이나 투자로 인해 발생하는 소득
     * 책 판매로 인한 수익은 과거의 작업에 대한 보상

      10만 달러 벌기

     * 기술 서적을 통해 10만 달러를 벌 수 있는지에 대한 논의
     * 판매 부수와 로열티 비율에 따라 다름
     * 전통 출판, 자가 출판 등 다양한 출판 방식에 따른 수익 비교

      현실 점검

     * 기술 서적의 평균 판매 부수
     * 유명한 기술 서적의 판매 부수 예시
     * 자가 출판으로 10만 부 이상 판매된 기술 서적은 드뭄

      장수성

     * 오래 팔리는 책이 높은 수익을 올릴 가능성이 큼
     * 특정 기술에 대한 책은 빠르게 구식이 될 수 있음

      수익 분배

     * 다양한 출판 채널에 따른 수익 분배 비율
     * Gumroad, Leanpub, Amazon, 전통 출판사 등

    더 많은 돈 벌기

     * 책 판매 외에도 수익을 창출할 수 있는 방법
     * 워크숍, 유료 강연, 컨설팅 등
     * 책이 경력에 미치는 영향

    가격 책정

     * 책의 가격 책정 전략
     * 전통 출판사와 자가 출판의 가격 차이
     * 초기 독자를 위한 낮은 가격 설정

    보고 및 지급

     * 판매 후 수익 지급까지의 대기 기간
     * 다양한 출판 채널의 지급 일정

    책 시리즈

     * 전통 출판사의 책 시리즈 개념
     * 시리즈 편집자의 역할과 수익

    출판: 자가 출판 vs 전통 출판

     * 자가 출판과 전통 출판의 장단점 비교
     * 수익 분배, 도구 제공, 통제 수준, 브랜드 이미지 등

    마케팅, 광고 및 프로모션

     * 자가 출판의 마케팅 필요성
     * 광고의 효과와 비용
     * 리뷰와 쿠폰의 중요성

    시작하기

     * 책을 쓰기 위한 조언
     * 한 번에 한 권씩 판매하여 10만 달러를 벌기

    GN⁺의 의견

     * 기술 서적 출판은 수익 창출 외에도 경력 발전에 도움이 될 수 있음
     * 자가 출판과 전통 출판의 선택은 저자의 목표와 상황에 따라 다름
     * 마케팅과 프로모션은 책의 성공에 중요한 역할을 함
     * 기술 서적의 주제 선택은 책의 장수성과 수익에 큰 영향을 미침
     * 책을 쓰는 과정은 많은 시간과 노력이 필요하므로, 시간당 수익을 계산하지 않는 것이 좋음

        Hacker News 의견

     * 첫 번째 의견
          + 네 권의 기술 서적을 출판하고 다섯 번째 책을 출판 준비 중임
          + 10,000부 판매가 성공으로 간주되며, 대부분의 기술 서적은 2,000부도 팔리지 않음
          + 기술 서적 시장은 점점 더 어려워지고 있음
          + 돈을 벌기 위해서가 아니라 다른 이유(경력, 교육 등)로 책을 써야 함
     * 두 번째 의견
          + FFmpeg에 관한 책을 쓰고 오픈 소스로 공개함
          + 4년 동안 743권을 팔아 약 $2000의 수익을 올림
          + 매달 KDP 지급 이메일을 받는 것이 만족스러움
     * 세 번째 의견
          + Cubase 사용법에 관한 책을 쓰는데 2년이 걸림
          + 처음에는 판매가 저조했으나, 업계의 홍보로 판매가 증가함
          + Amazon에서 인쇄 주문 방식으로 판매 중이며, Lulu보다 3배 더 많이 팔림
          + 다른 책도 썼지만, 시간이 있을 때만 작업함
     * 네 번째 의견
          + 9권의 기술 서적을 썼으며, Apress와 독립적으로 출판함
          + 책을 쓰고 싶다면, 다양한 형식으로 패키지화하고 Leanpub.com을 이용할 것을 권장함
          + 출판사와 협력할 경우, 신중하게 선택해야 함
     * 다섯 번째 의견
          + 기술 서적을 쓰는 것은 수익 창출을 위한 것이 아님
          + 과거에는 책 한 장당 $1500, 전체 책은 $25K를 벌 수 있었음
          + 현재는 잡지나 책 계약으로 실제 돈을 버는 것이 거의 불가능함
     * 여섯 번째 의견
          + 세상에 좋은 일을 하기 위해 책을 쓸 수 있음
          + 페이지 수를 맞출 필요가 없고, 커뮤니티로부터 버그 리포트를 받을 수 있음
          + 돈을 버는 작가들을 존경하며, 다른 길도 있음
     * 일곱 번째 의견
          + 기술 서적을 쓰는 것은 이상주의자나 집착적인 사람들이나 할 수 있는 일임
          + 자신의 책을 소개함
     * 여덟 번째 의견
          + Rob Fitzpatrick의 ""Write Useful Books""를 읽을 것을 추천함
          + 기술 서적은 아니지만, 추천할 만한 비소설을 쓰는 방법에 대해 많은 실용적인 조언을 제공함
     * 아홉 번째 의견
          + 여러 권의 책을 썼으며, 첫 번째 책은 형편없었지만 잘 팔렸음
          + 현재는 TikTok과 YouTube를 통해 프로젝트 관리 콘텐츠를 제공함
     * 열 번째 의견
          + 기술 회사의 Developer Relations로 일할 경우 책을 쓰는 방법
          + 회사가 책을 구매하여 이벤트와 컨퍼런스에서 무료로 배포함
          + 책이 성공적으로 보이고, 업계 이벤트에서 신뢰성을 얻을 수 있음
"
"https://news.hada.io/topic?id=15714","세기 계산을 중단합시다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              세기 계산을 중단합시다

    세기를 세지 말자

     * Steven Pinker의 문장
          + Steven Pinker의 ""Enlightenment Now""에서 발췌한 문장
          + 18세기 후반부터 19세기 초반까지의 계몽주의 시대를 설명함
     * 실험
          + 미국 혁명이 계몽주의 시대 전, 중, 후에 일어났는지 묻는 질문
          + ""18세기"" 대신 ""1700년대""를 사용하면 이해가 더 쉬움
     * 세기 계산의 문제
          + ""18세기""는 1701년부터 1800년까지를 의미
          + ""1700년대""는 1700년부터 1799년까지를 의미
          + 두 표현이 다르지만, ""1700년대""가 더 직관적임

    세련된 사람들은 어떻게 생각할까?

     * 형식적인 글쓰기
          + 법적 문서 등에서는 여전히 세기를 세는 것이 일반적임
          + 언어는 시간이 지나면서 변화함
          + ""they""가 단수로 사용되는 예시를 통해 설명

    10년대와 세기의 모호성

     * 모호성 문제
          + ""2000년대""가 2000-2009인지, 2000-2099인지 모호함
          + 관습적으로 0으로 끝나는 연도는 범위를 의미하도록 제안
          + 예: ""1490년대""는 1490-1499, ""1500년대""는 1500-1599

    주의사항

     * 직관적인 이해
          + 대부분의 사람들은 위의 관습을 직관적으로 이해함
          + ""1790년대""와 ""1800년대""를 가까이에서 사용하면 혼란이 생길 수 있음
          + 2001-2100을 언급할 때는 ""21세기""라고 쓰는 것이 괜찮음

    GN⁺의 정리

     * 세기를 세는 대신 연대를 사용하는 것이 더 직관적이고 이해하기 쉬움
     * 언어는 시간이 지나면서 변화하며, 새로운 표현이 점차 받아들여짐
     * ""2000년대""와 같은 표현의 모호성을 해결하기 위해 범위를 명확히 하는 관습이 필요함
     * 이 글은 역사적 연대 표현의 명확성을 높이는 데 도움이 될 수 있음

        Hacker News 의견

     * ""19세기"" 대신 ""1800년대""라고 부르는 것이 더 직관적이고 간결함
     * Alex Trebeck의 Jeopardy 첫 에피소드에서 ""20세기 시작 날짜"" 질문에 모든 참가자가 틀림
     * 세기를 ""X세기"" 대신 ""X00년대""로 부르는 것이 더 이해하기 쉬움
     * 세기를 0부터 시작하면 모든 것이 더 간단해짐
          + 사람의 나이도 첫 해는 0살로 시작함
          + 0-99년은 0세기, 100-199년은 1세기라고 부르면 됨
     * 어린 시절에 세기 개념이 혼란스러웠음
          + 예를 들어, 네덜란드 황금기가 1600년대인지 16세기인지 헷갈렸음
     * 많은 사람들이 ""7개월 임신""이라고 말할 때 실제로는 26주(6개월) 후에 7번째 달에 들어간 것임
     * ""AD"" 시대가 AD 1에서 시작된다는 사실에 사람들이 집착함
          + AD 0에서 시작하면 더 간단해짐
          + BC 1과 AD 0이 겹치게 하면 됨
     * ""1700년대""를 사용하는 나라에서 이민 온 후, 실제 숫자를 얻기 위해 1을 빼는 데 익숙해지는 데 10년이 걸렸음
     * 기사를 처음에는 수백 년의 기간을 하나로 묶는 것에 반대하는 것으로 생각했지만, 실제 의도는 덜 흥미로웠음
     * ""201X"" 또는 ""20XX""와 같은 비표준 형식을 사용함
          + 구어에서는 ""20년 전""이라고 말하면 됨
"
"https://news.hada.io/topic?id=15650","마이리얼트립으로 살펴본 여행 산업에서의 SEO, 키워드 성과 분석 중요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                마이리얼트립으로 살펴본 여행 산업에서의 SEO, 키워드 성과 분석 중요성

   요즘 SEO에 대한 관심도가 정말 높은데요, 혹시 SEO, 키워드 성과 분석을 어떻게 하고 계신가요?
   고객 여정에 ""검색""이 필수적으로 들어가는 마이리얼트립을 통해 분석 방법을 알아보았습니다.

   “오사카 주유패스”, “한큐패스”, “푸켓 피피섬”은 마이리얼트립이 타겟해야 할 명확한 SEO 키워드입니다. (B2B에서는 명확한 타겟 키워드가 존재합니다)
   특히 “오사카 주유패스” 처럼 키워드 검색량이 높고 검색 의도가 명확한 키워드는 상위 노출이 필요한 전략적인 키워드입니다. 그러나 실제로 검색해보면, 그렇지 못한 모습을 확인할 수 있는데요,

   포스트를 통해 마이리얼트립이 어떤 키워드를 보완해야 할지와 어떻게 보완해야 할지, 그리고 우리 회사는 어떻게 해야할지 살펴보세요!
"
"https://news.hada.io/topic?id=15646","어떻게 머신러닝 엔지니어로 피봇할 수 있을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       어떻게 머신러닝 엔지니어로 피봇할 수 있을까요?

     * 데이터 집약적 어플리케이션을 10년 넘게 구축해본 소프트웨어 엔지니어임. 주로 백엔드(레거시, 클라우드)
     * (1) 피봇하는게 좋을까요? (2) 해보신 분? (3) 내 업무에 ML이 없는데 어떻게 할 수 있을까요?
     * 모델 구축에 중점을 두지 않고, 모델 관리/배포/스케일링에 더 중점을 두는 ML 엔지니어링 실무가 있나요?
          + 즉, 그 기반에 있는 모든 수학을 배우지 않아도 될까요?

arnabgho

     * Snap에서 MLE 테크 리드로 일하며 스냅의 제너레이티브 AI 인프라의 기초를 닦았음
          + 매우 보람 있는 커리어 경로로 MLE 경로를 적극 추천하고 싶음
     * ""Designing Machine Learning Systems: An Iterative Process for Production-Ready Applications"" 책은 프로덕션용 머신러닝 시스템 설계에 대한 매우 좋은 입문서
     * 해당 저자(Chip Huyen)가 작성한 이 블로그는 프로덕션급 AI 및 ML 시스템 구축에 대한 입문서로 적극 추천
       프로덕션용 LLM 어플리케이션 구축하기 (요약본 및 번역글 링크 포함)
     * 질문에 대한 답
          + (1) 예, 특히 지금과 같은 시대정신의 변곡점에서 이러한 전환을 하는 것이 현명함
          + (2) 예
          + (3) ML 엔지니어링 기술을 시작하고 숙달하는 방법에 대한 리소스는 위를 참조

breckenedge

     * 약 7개월 전에 ML을 사용하여 콘텐츠 추천을 만드는 3개월짜리 프로젝트에 발을 들여놓았음
     * 기성 협업 필터링 라이브러리로 시작해서 PyTorch로 끝냈고, ChatGPT가 큰 도움이 되었음
     * 계속 그 길을 가도 괜찮았지만 경영진은 더 빠르고 더 나은 결과를 원했고, 경험이 없는 상태에서 시작할 때 3개월은 흐름을 잡기에 충분한 시간이었음
     * 많은 ML은 데이터 세트를 정리하고 준비하는 것이었는데, 그다지 재미있지 않았음
     * 한 임원이 Amazon Personalize를 사용해보라고 권유했고, 좋은 시도는 해봤지만 결국에는 성공하지 못했음. 데이터 문제였는지 기본 모델 문제였는지
     * 블랙박스 ML 서비스를 사용할 때 발생하는 문제의 핵심은 무슨 일이 일어나고 있는지 분석할 수 없다는 점
     * Amazon Personalize는 데이터 레이어를 변경하는 것을 어렵게 만들기 때문에 더 나은 솔루션에 가까워지고 있는지 알 수 없음
     * 숙련된 ML 전문가가 개인화를 사용하면 더 나은 솔루션에 가까워질 수 있음
     * 따라서 ML을 다룰 수 있다면 경력으로 삼기 전에 ML 평가판 프로젝트를 수행하여 마음에 드는지 확인해 보는 것이 좋음

nsyptras

     *

     모델 구축에 중점을 두지 않고 모델 관리/배포/확장에 더 중점을 두는 ML 엔지니어링이 있을까?
     * 내가 2018년에 이쪽으로 전환함. MLOps라고 불림. 그 전에는 모바일 개발자였음
     * 그 당시에는 전환이 꽤 쉬웠음(지금은 경쟁이 더 치열할 수도 있겠지만)
     * 내가 한 일:
          + 혼자서 집중적인 ML 프로젝트를 진행하면서 ML 스택 전반에서 일하는 것이 즐겁다는 것을 깨달음
          + 이 프로젝트에 대한 [블로그 포스팅]((https://www.nicksypteras.com/blog/aisu.html)도 작성
          + 그런 다음 MLOps 팀에 지원하여 이 프로젝트를 활용하여 기술/경험을 입증
          + 수학을 피할 수도 있겠지만 기본을 배우면 모든 것이 훨씬 쉬워질 것
          + 기본적인 ML 수학이 없었다면 매우 맹목적으로 비행했을 것이라고 생각함

ilaksh

     * ""MLOps""를 생각하고 있는 듯. MLOps도 중요함
     * HuggingFace와 RunPod으로 Python으로 모델을 배포하는 연습을 해볼 것
     * 또한 LLM 사전 학습, 미세 조정 및 평가에 대한 튜토리얼도 찾아보고, Predibase도 확인할 것
     * 현재 가장 중요한 것은 확산 트랜스포머라고 생각
          + 이를 위한 트레이닝 작업을 실행하는 방법을 설명하는 문서를 찾을 수 있다면 사람들에게 도움이 될 수 있을 것
     * ""치트""를 원한다면 replicate.com을 확인. cog는 replicate.com 외부에서 ML 모델을 자체 호스팅하는 데도 유용할 수 있음

nottorp

     * 나는 ""ML 엔지니어로 전환""하지는 않았지만 지난 2.5개월 동안 공개 모델을 사용하고, 도구와 API를 사용하여 훈련하고 실행하는 방법을 어느 정도 배웠음
     * 코드 작성은 거의 하지 않고 많은 책을 읽었음
     * 소규모 조직(역할에 갇히지 않고 할 일만 주는)과 함께 일하면 도움이 됨

trybackprop

     * 실제로 ML로 전환을 고려하고 있는 숙련된 소프트웨어 엔지니어를 위해 이에 대한 블로그 게시물을 작성해서 공유함
          + You Don't Need a Masters/PhD – How These 9 Engineers Broke Into ML
          + 메타, 구글, 아마존, 오픈AI에서 근무하는 다양한 엔지니어들이 전환한 사례를 소개하는 글
          + 그들이 어떤 전략과 전술을 사용했는지 확인할 수 있음
     * 답변
          +
              1. 개인 시간에 해킹을 즐기고 있다면 '현명하다'고 할 수 있음. 나는 전환하기 전 1년간 밤과 주말에 자료를 공부하면서 이 일을 풀타임으로 하고 싶다는 생각을 처음으로 하게 되었음
          +
              2. 네, 그리고 전환 후 7년째 ML 엔지니어로 일하고 있음. 현재 FAANG의 ML 기술 책임자임. 그 전에는 인프라와 제품 분야에서 일했음
          +
              3. 몇 년 전에 내가 받은 조언 중 하나는 ML 업무와 인접한 팀에 합류하여 프로덕션 ML이 어떻게 생겼는지 익숙해질 수 있도록 하라는 것. Kaggle.com에서 ML 씽킹 연습을 시작할 수도 있움
     * 제 블로그의 다른 게시물에서 AI/ML과 이 직업에 필요한 수학을 배울 수 있는 리소스를 확인 가능
     * Linear Algebra 101 for AI/ML – Part 1
     * (대화형 퀴즈, 벡터/행렬의 기초, 업계에서 널리 사용되는 오픈 소스 ML 프레임워크인 PyTorch에 대한 간단한 소개 포함).

deepGem

     * fast.ai 의 ""Practical Deep Learning for Coders 를 살펴 볼 것
     * 2022년에 나온 자료지만 여기서 배우는 원리는 오늘날에도 매우 유효하며 매우 유용
     * 특히 Self Attention, 트랜스포머 및 이러한 개념에 기반한 최신 아키텍처가 특히 그러함
     * fast.ai 과정을 수료한 많은 사람들이 ML 엔지니어뿐만 아니라 연구 과학자로 커리어를 전환했음
     * 말하자면 쉬운 과정이 아니기 때문에 여가 시간에 시간을 내서 수강해야 함
     * 배포/확장에 관심이 있으시다면 파트 1의 2강으로 바로 넘어가도 좋음. 제레미는 훌륭한 선생님임
          + 나는 학계 출신이 아니기 때문에 그의 강의 스타일이 매우 건강하다고 생각

   잘읽었습니다. 감사합니다.

   한국에서는 그냥 api호출하는거 그정도 수준만 알면됩니다, 기업에서는 큰돈들여 투자는 하기싫고 ,그렇지만 뭔가 핫하게 유행은 따라가고싶고 ...그런 애매한 분위기.
"
"https://news.hada.io/topic?id=15715","우르술라 K. 르 귄의 Tao Te Ching 번역본 (1997)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  우르술라 K. 르 귄의 Tao Te Ching 번역본 (1997)

도덕경

  도(道)

     * 갈 수 있는 길은 참된 길이 아님
     * 말할 수 있는 이름은 참된 이름이 아님
     * 하늘과 땅은 이름 없는 것에서 시작됨
     * 이름은 만물의 어머니
     * 욕심 없는 영혼은 숨겨진 것을 보고, 욕심 많은 영혼은 원하는 것만 봄
     * 두 가지는 하나의 기원에서 나왔지만 이름이 다름
     * 그 정체는 신비로움

     주석: 이 장의 만족스러운 번역은 불가능하다고 생각됨. 이 장은 책 전체를 포함하고 있음.

  영혼의 양식

     * 아름다움을 알면 추함이 생김
     * 선함을 알면 악함이 생김
     * 존재와 비존재는 함께 일어남
     * 어려움과 쉬움은 서로를 완성함
     * 높고 낮음은 서로 의존함
     * 음과 양의 상호작용이 세상의 균형을 유지함
     * 현명한 영혼은 행하지 않음으로써 가르침

     주석: 가치와 믿음은 문화적으로 구성되며, 음과 양의 상호작용의 일부임. 우리의 믿음이 영원한 진리라고 믿는 것은 슬픈 오만임.

  침묵

     * 칭찬받을 만한 것을 칭찬하지 않으면 사람들이 경쟁하지 않음
     * 희귀한 보물을 소중히 여기지 않으면 사람들이 훔치지 않음
     * 바람직한 것을 보지 않으면 마음이 조용해짐
     * 현명한 영혼은 사람들의 마음을 비우고 배를 채우며, 욕망을 약하게 하고 뼈를 강하게 함

     주석: 반복적으로 노자는 '행하지 않음'을 말함. 행하지 않음으로써 행함. 이는 논리적 해석이 불가능하지만, 사고를 근본적으로 변화시킴.

  근원

     * 도는 비어 있지만 다 쓰이지 않음
     * 깊고, 만물의 조상임
     * 날카로움을 무디게 하고, 결속을 풀며, 빛을 흐리게 함
     * 조용하고 오래 지속됨

     주석: 노자의 말은 항상 모호함. 긍정적인 윤리적 또는 정치적 가치를 강조하는 번역자들도 있음. 그러나 노자는 그러한 것들이 도에서 멀어지게 한다고 말함.

  유용한 빈 공간

     * 하늘과 땅은 인자하지 않음
     * 현명한 영혼도 인자하지 않음
     * 하늘과 땅은 풀무처럼 비어 있지만 구조화되어 있음

     주석: 현명한 영혼의 '비인간성'은 잔인함을 의미하지 않음. 하늘과 땅은 인간이 아니기 때문에 인자하지 않음.

  완전함

     * 계곡의 영혼은 죽지 않음
     * 신비, 여인의 문은 하늘과 땅의 뿌리임
     * 영원히 지속됨

  흐릿한 밝음

     * 하늘은 지속되고, 땅은 견딤
     * 현명한 영혼은 자아를 버리고 중심을 유지함

  자연스러운 쉬움

     * 참된 선함은 물과 같음
     * 물은 모든 것에 좋음
     * 경쟁하지 않음

     주석: 물은 모든 장애물을 돌아가며 길을 찾음.

  고요함

     * 그릇을 가득 채우면 넘침
     * 칼을 계속 갈면 무뎌짐
     * 금과 옥으로 가득 찬 집을 보호할 수 없음
     * 선을 행하고 낮게 머무르는 것이 축복의 길임

  기술

     * 영혼을 몸에 유지하고 하나를 붙잡아 온전함을 배움
     * 에너지를 중심에 두고 부드럽고 유연하게 배움
     * 깊은 물을 맑고 투명하게 유지함

     주석: 대부분의 학자들은 이 장이 명상에 관한 것이라고 생각함.

  없음의 용도

     * 바퀴의 스포크는 허브에서 만남
     * 점토를 파서 만든 그릇은 비어 있음
     * 방을 만들기 위해 문과 창문을 자름

     주석: 노자는 깊은 진리를 설명하면서도 유머를 잃지 않음.

  욕망 없음

     * 다섯 가지 색은 눈을 멀게 함
     * 다섯 가지 음은 귀를 멀게 함
     * 다섯 가지 맛은 입맛을 둔하게 함

  부끄러움

     * 은총이나 불명예를 받는 것은 두려움 속에서 사는 것임
     * 몸을 진지하게 여기는 것은 고통을 인정하는 것임

     주석: 노자는 정치적 권력을 신비화하지 않음.

  신비를 축하함

     * 볼 수 없는 것을 봄
     * 들을 수 없는 것을 들음
     * 잡을 수 없는 것을 잡음

  권력 있는 사람들

     * 옛날에 도를 아는 사람들은 신비로웠음
     * 그들은 신중하고 경계심이 많았음

     주석: 옛날의 도를 따르는 사람들은 신비롭고 접근하기 어려웠음.

  뿌리로 돌아감

     * 완전히 비우고 완벽하게 고요함
     * 만물이 함께 일어나고, 그들의 일어남은 돌아감임
     * 뿌리로 돌아가는 것은 평화임

     주석: 도덕성을 신에게 의존하지 않는 사람들에게는 노자의 도덕성과 영적 조언이 이해하기 어려울 수 있음.

  단순하게 행동함

     * 참된 지도자는 거의 알려지지 않음
     * 그 다음은 사람들이 알고 존경하는 지도자임
     * 그 다음은 사람들이 두려워하는 지도자임
     * 그 다음은 사람들이 경멸하는 지도자임

     주석: 보이지 않는 지도자는 사람들을 조종하는 것이 아니라, 행하지 않음으로써 일을 함.

  차선책

     * 큰 도가 타락하면 인자함과 의로움이 생김
     * 학문과 신중함이 높아지면 거대한 위선이 생김

  생명 없는 것과 생명 있는 것

     * 성스러움을 멈추고 신중함을 잊으면 모두에게 백 배 더 나아짐
     * 이타심을 멈추고 의로움을 잊으면 사람들이 가족의 감정을 기억함
     * 계획을 멈추고 이익을 잊으면 도둑과 강도가 없어짐

     주석: 이 장과 이전 두 장은 하나의 생각의 흐름으로 읽을 수 있음.

  다름

     * 예와 아니오의 차이는 얼마나 큰가?
     * 좋고 나쁨의 차이는 무엇인가?

     주석: 예와 아니오, 좋고 나쁨의 차이는 '밝은' 사람들만 이해할 수 있음.

  빈 마음

     * 도를 따르는 것은 혼자 따르는 것임
     * 도가 하는 방식은 이해하기 어려움

     주석: 신비주의는 '이것'의 현실에서 나옴.

  아래로 자라기

     * 부서져야 온전해짐
     * 비틀려야 곧아짐
     * 비어야 가득 참

  없음과 없음

     * 자연은 긴 연설을 하지 않음
     * 회오리바람은 아침 내내 지속되지 않음

  비율

     * 발끝에 서서 계속 있을 수 없음
     * 뛰어다니며 걸을 수 없음

  신비를 상상함

     * 모든 것을 포함하는 무언가가 있음
     * 하늘과 땅 이전에 존재함

     주석: '무언가'를 혼돈으로 볼 수 있음.

  무거움의 힘

     * 무거움은 가벼움의 뿌리임
     * 고요함은 움직임의 주인임

     주석: 무거움은 일상의 중요한 것들임.

  기술

     * 좋은 걷는 사람은 흔적을 남기지 않음
     * 좋은 말하는 사람은 더듬지 않음

     주석: 숨겨진 빛과 깊은 신비는 중요하지 않은 것에 대한 배려를 의미함.

  되돌아가기

     * 남성을 알고 여성을 유지하면 세상의 강바닥이 됨
     * 빛을 알고 어둠을 유지하면 세상의 패턴이 됨

     주석: 노자의 언어의 단순함은 의미의 밀도를 가짐.

  행하지 않음

     * 세상을 얻으려는 사람들은 실패함
     * 세상은 신성한 물건임

     주석: 과도한 탐욕과 기교로 세상을 해치는 것은 우리의 신성함을 위태롭게 함.

  전쟁하지 않음

     * 도를 따르는 사람은 무력을 사용하지 않음
     * 전쟁 후에는 나쁜 수확이 옴

     주석: 노자의 평화주의에 대한 첫 번째 직접적인 언급임.

  전쟁 반대

     * 최고의 무기도 불행한 도구임
     * 도를 따르는 사람은 무기를 멀리함

  신성한 힘

     * 도는 영원히 이름이 없음
     * 자르지 않은 나무는 중요하지 않음

     주석: 이름 없는 것과 자르지 않은 것에 대한 생각이 다시 나타남.

  힘의 종류

     * 다른 사람을 아는 것은 지능임
     * 자신을 아는 것은 지혜임

  완전한 신뢰

     * 큰 도는 좌우로 흐름
     * 만물이 그것에 의존함

  인간적인 힘

     * 큰 생각을 붙잡으면 세상이 평화로움

  작은 어둠의 빛

     * 줄어들려면 먼저 커야 함
     * 약해지려면 먼저 강해야 함

     주석: 세 번째 연은 모든 텍스트에 있음.

  모든 것 위에

     * 도는 아무것도 하지 않지만 모든 것이 이루어짐
     * 권력을 가진 사람들이 도를 지키면 만물이 스스로 돌봄

     주석: 행하지 않음과 욕망하지 않음의 주제가 다시 나타남.

  힘에 대해 말함

     * 큰 힘은 힘에 집착하지 않음
     * 작은 힘은 힘에 집착함

     주석: 이 시는 최소한의 단어로 도교의 가치를 설명함.

  완전성

     * 옛날에 온전함을 얻은 사람들:
     * 하늘은 온전함으로 순수함
     * 땅은 온전함으로 견고함

        Hacker News 의견

     * 고전 중국어를 공부한 사람으로서 Ursula Le Guin의 번역은 원작의 느낌이나 의미를 많이 잃었음
          + 대부분의 Daodejing 번역이 이와 같음
          + Philip J. Ivanhoe의 번역을 추천하지만, 이 역시 결점이 있음
     * 원문은 신비로운 느낌을 주지만 대부분의 번역은 비슷한 느낌을 유지함
          + Wang Bi는 Daodejing이 다양한 해석을 지원한다고 주장했음
          + Daodejing은 성경 다음으로 많이 번역된 책이지만, 대부분의 번역이 비슷한 느낌과 내용을 유지함
     * 번역자들은 대개 텍스트를 시로 번역하지만, 대부분의 텍스트는 산문으로 번역하는 것이 더 적합함
          + 이 텍스트는 철학 작품이며 시가 아님
          + 중국에서는 Daodejing이 다른 고대 철학자들과 함께 배치됨
     * 고전 중국어는 현대의 구두점이 거의 사용되지 않았음
          + 원래 텍스트에는 장별 구분도 없었음
          + 구두점을 제거하면 더 많은 번역과 해석이 가능해짐
     * 미래에는 이 텍스트에 대한 다양한 해석이 나올 것이지만, 현재는 선택의 폭이 좁음
          + Derek Lin의 번역을 추천함
     * Ursula Le Guin의 번역은 ""번역""이라고 부르기에는 오해의 소지가 있음
          + 그녀는 중국어를 알지 못하며, Paul Carus의 1898년 번역을 참고했음
     * Harold Bloom은 Le Guin의 버전이 Tao의 간결함과 미적 감각을 잘 포착했다고 평가함
          + Le Guin 자신도 만족스러운 번역은 불가능하다고 인정함
     * Tao Te Ching의 첫 두 문장의 시각적 대칭이 기억에 남음
          + ""도(道)는 도(道)라고 할 수 없으며, 이름(名)은 이름(名)이라고 할 수 없음""이라는 번역이 있음
     * Ursula Le Guin의 Earthsea Cycle을 강력 추천함
          + 최고의 판타지 중 하나임
     * Ursula Le Guin이 직접 낭독한 오디오북 버전이 매우 훌륭함
     * Stephen Mitchell의 번역을 좋아함
          + Zen koans와 불교 텍스트와 유사하여 이해하기 쉬움
"
"https://news.hada.io/topic?id=15699","전기 소비 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                전기 소비 분석

  내 전기 소비 분석

   프랑스에서 전기 요금이 몇 년 동안 꾸준히 상승해 왔음. 특히 러시아의 우크라이나 침공 이후 급격히 상승했음. 이에 따라 자신의 전기 소비를 최적화할 방법을 고민하게 되었음.

    하드웨어

     * 2015년부터 프랑스 전력망 관리 기관인 Enedis는 기존의 ""멍청한"" 전기 계량기를 ""스마트"" 계량기인 Linky로 교체하는 작업을 진행 중임.
     * 일부 사람들은 새로운 계량기가 5G Wi-Fi 전파로 뇌를 손상시킬 것이라는 우려를 표명했지만, 실시간으로 전기 소비 데이터를 확인할 수 있다는 점에서 긍정적으로 생각했음.
     * 새로운 계량기는 실시간 데이터를 읽을 수 있는 통신 포트가 있음.
     * 계약에 따라 일일 소비 데이터가 Enedis 웹사이트를 통해 제공됨.

    데이터 추출

      소비 데이터

     * Enedis 웹사이트에서 데이터를 CSV 형식으로 다운로드할 수 있지만, 자동으로 데이터를 가져오는 것이 더 편리함.
     * Enedis는 API를 제공하지만, 접근하기 어려움. 이를 해결하기 위해 MyElectricalData라는 ""래퍼"" API를 사용함.
     * 예시 코드:
curl -X 'GET' \
  'https://myelectricaldata.fr/consumption_load_curve/$MY_METER_ID/…' \
  -H 'accept: application/json' \
  -H 'Authorization: $MY_TOKEN'

     * 각 30분 단위의 데이터는 JSON 객체로 제공됨.

      가격 데이터

     * 전기 소비량을 아는 것도 중요하지만, 비용을 아는 것도 중요함.
     * 프랑스의 공공 데이터 사이트인 data.gouv.fr에서 규제된 전기 요금을 CSV 형식으로 제공함.

      프랑스의 전기 요금

     * 전기 요금은 고정 요금(월 또는 연 단위)과 변동 요금(소비량에 따라 결정)으로 구성됨.
     * 기본 요금(Base), 피크 시간대 요금(Peak Hours), Tempo 요금제 등 다양한 요금제가 있음.
     * Tempo 요금제는 피크 시간대와 비피크 시간대를 나누고, 연간 세 가지 ""시즌""으로 나눔. 레드, 화이트, 블루로 구분되며, 레드가 가장 비쌈.

    데이터 활용

     * NiceGUI를 사용하여 작은 파이썬 웹 앱을 작성함.
          + Enedis에서 데이터를 가져옴.
          + 다양한 소스에서 전기 요금을 가져옴.
          + 데이터를 히트맵으로 표시함.
          + 모든 요금제를 비교하여 가장 저렴한 요금제를 선택함.
     * 데이터는 매일 밤 새로고침됨.

      데이터 저장

     * JSON 형식으로 데이터를 저장하며, SQLite를 사용하여 데이터를 관리함.
     * 각 연도에 대해 17520개의 30분 단위 슬라이스가 있음.
     * 각 슬라이스에 대해 요금제를 계산함.

      데이터 표시

     * 주 UI와 비교 테이블을 통해 데이터를 시각화함.
     * Tempo 요금제가 가장 저렴했으며, 지난 10개월 동안 300유로 이상 절약함.

    결론

     * NiceGUI는 파이썬으로 웹 앱을 구축하는 데 매우 유용함.
     * SQLite는 간단한 데이터 관리에 적합함.
     * 코드와 더 많은 정보는 GitHub에 있음.

  GN⁺의 의견

     * 이 글은 전기 소비를 최적화하고 비용을 절감하는 방법을 잘 설명하고 있음. 특히 프랑스의 전기 요금 체계에 대한 자세한 설명이 유익함.
     * Tempo 요금제와 같은 다양한 요금제를 비교하여 최적의 요금제를 선택하는 방법을 제시함으로써 실질적인 비용 절감 효과를 보여줌.
     * NiceGUI와 SQLite를 사용한 데이터 시각화와 관리 방법은 다른 프로젝트에도 응용할 수 있는 좋은 예시임.
     * 전기 소비 데이터를 실시간으로 모니터링하고 분석하는 것은 에너지 절약과 비용 절감에 큰 도움이 될 수 있음.
     * 유사한 기능을 가진 다른 도구로는 Home Assistant와 같은 스마트 홈 관리 소프트웨어가 있음.

        Hacker News 의견

     * Ontario, Canada에서 스마트 미터를 대량 도입했으나 피크 수요 변화는 크지 않았음
          + 비용 대비 효과가 논란이 있음
          + 소형 유닛의 서브미터링은 효율이 낮은 장비 설치를 유도함
          + 저렴한 LED, 리노베이션 프로그램, 가전제품 효율 개선이 더 효과적임
          + 스마트 냉장고가 저렴한 전기 요금 시간대에 작동하는 기능이 부족함
          + 통신 장비의 효율성을 높이는 것이 필요함
     * 프랑스 Linky 스마트 미터와 ESP8266을 사용해 데이터 수집 프로젝트를 진행했음
          + 비표준 시리얼 포트를 사용해 데이터 수집이 어려웠음
          + 1초마다 전력 소비 데이터를 수집해 세밀한 분석이 가능했음
          + 전력 소비 데이터를 통해 사람들의 움직임을 파악할 수 있었음
     * 핀란드에서는 P1 포트를 통해 사용자에게 데이터를 제공하는 스마트 미터가 도입되고 있음
          + RJ26 와이어와 ESP8622를 사용해 4초마다 데이터를 수집함
     * ESP32와 기본적인 광센서를 사용해 전력 사용량을 Google Sheets에 기록하는 프로젝트를 진행했음
          + 1분마다 데이터를 전송해 시간별 전력 사용량을 기록함
     * Nest 온도 조절기를 사용해 실내 온도와 에어컨 설정을 추적하는 프로젝트를 진행했음
          + 외부 온도가 목표 온도 이하로 떨어졌을 때 창문을 여는 것이 더 효율적임을 발견함
          + Google이 Nest를 인수한 후 API 인증 방식이 변경되어 프로젝트가 중단됨
     * 영국의 Octopus Energy는 스마트 미터 데이터를 활용해 다양한 요금제를 제공함
          + API를 통해 일일 소비 데이터를 제공하며, 실시간 사용량을 확인할 수 있는 장치도 제공함
          + Tracker와 Agile 요금제는 도매 가격에 따라 요금이 변동됨
          + 지능형 요금제는 전기차 충전기나 가정용 배터리를 저렴한 시간대에 충전함
     * Sense 전력 미터를 설치해 전력 소비를 예측하고 조정할 수 있었음
          + 주요 전력 소비 장치를 파악해 전기 요금을 절감함
     * NiceGUI Python 웹 앱 프레임워크를 사용해본 경험을 묻는 의견이 있었음
          + Electron과 유사한 크로스 플랫폼 기능이 언급되었으나 문서에서 확인되지 않음
     * 모든 벽과 천장 소켓이 전력 사용량을 보고할 수 있다면 좋겠다는 의견이 있었음
          + 파워라인 네트워크나 Zigbee를 통해 가능할지 궁금함
     * Tesla Powerwall의 전력 소비 데이터를 Graphana 기반 UI로 시각화하는 프로젝트를 진행했음
          + 실내 온도와 에어컨 활동 데이터를 함께 시각화함
          + 차량 충전 데이터를 추가할 계획임
          + Graphana와 Influx가 이러한 프로젝트에 적합함
"
"https://news.hada.io/topic?id=15722","RP2040에서 RTOS로의 전환에서 RTOS로의 전환

  RTOS로의 전환: RP2040에서의 경험

    Martijn Braam

     * 컴퓨터 관련 작업을 하는 Martijn Braam의 글
     * 여러 마이크로컨트롤러 프로젝트 진행 중
     * Raspberry Pi Pico 보드를 주로 사용, 개발 경험이 좋음

    프로젝트 개요

     * 비디오 장비를 제어하는 하드웨어 컨트롤러 제작
     * PTZ 카메라와 비디오 스위칭 장비 제어
     * 기존 컨트롤러의 성능이 좋지 않아 새로운 패널 제작 필요

    하드웨어 디자인

     * 9개의 RGB 버튼, 아날로그 조이스틱, 디스플레이 포함
     * RS-485와 이더넷 통신 모듈 사용
     * 여러 번의 하드웨어 수정 후 기능 구현 완료

    초기 소프트웨어

     * pico-sdk를 사용한 cmake 프로젝트로 시작
     * 두 번째 코어를 Wiznet 모듈에 할당, 첫 번째 코어는 사용자 인터페이스 I/O 처리
     * 여러 작업을 동시에 처리해야 하는 복잡성 증가

    FreeRTOS

     * FreeRTOS를 사용하여 여러 작업을 병렬로 처리
     * 여러 작업(Task) 생성: 버튼, LED, 네트워크, DHCP, mDNS, ATEM, VISCA
     * FreeRTOS의 문제점: printf 사용 시 시스템이 멈추는 현상, 하드웨어 추상화 부족

    Apache NuttX

     * Unix 시스템과 유사한 환경 제공
     * 초기 설정 후 실제 셸(shell) 사용 가능
     * menuconfig/Kconfig 시스템을 통해 하드웨어 설정 가능
     * i2c 버스 설정 문제로 기본 기능 작동 안 함
     * 파일 시스템 경로와 셸이 필요하지 않음

    Zephyr

     * 프로젝트 설정을 위한 파이썬 유틸리티 제공
     * 5GB의 git 저장소 다운로드 필요
     * Zephyr SDK 설치 요구, 기존 ARM 툴체인 사용 가능
     * Raspberry Pi Pico 지원 부족, 다른 보드 사용 시도
     * 빌드 오류와 경고 해결 후에도 작동하지 않음

    결론

     * FreeRTOS를 사용하여 일부 애플리케이션 빌드 성공
     * printf 대체 구현 필요
     * FreeRTOS를 계속 사용하여 원하는 기능 구현 시도

  GN⁺의 정리

     * 이 글은 마이크로컨트롤러 프로젝트에서 RTOS로 전환하는 과정을 다룸
     * FreeRTOS, Apache NuttX, Zephyr의 장단점을 비교
     * FreeRTOS가 가장 적합한 선택으로 결론
     * RTOS 선택 시 고려해야 할 다양한 요소를 이해하는 데 도움
     * 비슷한 기능을 가진 프로젝트로는 FreeRTOS와 Zephyr가 있음

        Hacker News 의견

     * 이 저자는 RTOS를 Arduino 환경과 동일하게 기대하는 것 같음
          + 많은 Arduino가 mbed 또는 freertos를 사용하고 있음
          + Zephyr는 사용하기 쉬우며 Pi Pico도 지원함
     * RTOS 간단 정리:
          + FreeRTOS: 대부분의 SOC/장치에서 지원되지만, 드라이버는 각 SOC/장치별로 다름
          + Zephyr: 실제 하드웨어 추상화를 지원하며 대부분의 SOC를 지원함
          + NuttX: 지원이 좋지 않지만, 작동하면 매우 멋짐
     * 전통적인 UNIX 방식으로 시스템 전체에 툴체인을 설치하는 것은 고통스러움
          + Python을 도구로 사용하는 것은 버전 문제를 일으킴
          + 도구는 정적으로 링크된 바이너리여야 함
     * PlatformIO는 올바른 방향으로 가고 있음
          + 툴체인, SDK, 라이브러리, 프로젝트 구성을 관리해야 함
          + 빌드는 어디서나 재현 가능해야 함
     * RP2040 프로젝트를 Rust와 Embassy로 전환 중임
          + Rust는 익숙해지기 어렵지만 만족스러움
     * Zephyr는 Pi Pico를 100% 지원함
          + 문서를 확인하지 않았는지 의문임
     * ThreadX는 오픈 소스임
          + ThreadX GitHub 링크
     * Hubris를 실제 프로젝트에서 사용해보고 싶음
          + C로 더 많은 고통을 겪지만, Erlang/Elixir와 유사함
     * microPython이 더 쉬운 경로라고 생각함
          + async/await 기반 협력 멀티태스킹이 잘 작동함
     * 간단한 그린 스레드 타이머를 롤링함
          + 실제 프로세스 관리를 지원하지 않지만, 다양한 센서를 인터로게이트하고 신호를 처리할 수 있음
     * FreeRTOS는 기본적으로 산업 표준임
     * Rust RTIC는 rp2040을 지원하며 매우 가벼움
          + RTIC 링크
"
"https://news.hada.io/topic?id=15671","다리 침몰 방지 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              다리 침몰 방지 기술

    왜 다리들은 가라앉지 않는가

     * 다리는 단순히 무언가를 넘는 것이 아니라, 아래에 강, 철도, 도로 등 명확한 공간이 있어야 함
     * 일반 도로에서는 힘이 직접 지면으로 전달되지만, 다리에서는 힘이 양쪽의 교각이나 받침대로 집중됨
     * 다리 기초는 지구상에서 가장 강력한 공학 시스템 중 하나임
     * 그러나 다리 기초는 하중을 견디기에 이상적이지 않은 장소에 건설됨

    기초 파일의 발명

     * 토양이 견딜 수 없는 무게를 과부하하면 기초가 지면으로 가라앉음
     * 이를 해결하기 위해 기초 파일이 발명됨
     * 기초 파일은 단순한 구조물로, 길게 땅에 박히거나 뚫린 기둥임

    기초 파일의 역사와 종류

     * 초기 파일은 목재로 만들어졌으며, 여전히 전 세계에서 사용됨
     * 목재 파일은 저렴하고 설치가 쉬움
     * 그러나 목재는 썩고 길이 제한이 있으며 강도가 낮음
     * 콘크리트 파일은 다양한 크기와 형태로 제공되며, 강도가 높음
     * 강철 파일은 더 슬림하게 만들 수 있어 설치가 용이함

    파일 설치 방법

     * 뉴턴의 제3법칙에 따라 파일을 땅에 깊이 박기 위해서는 반대 방향의 힘이 필요함
     * 일반적으로 해머를 사용하여 파일을 박음
     * 해머의 잠재 에너지가 운동 에너지로 변환되어 파일에 전달됨

    기초 파일의 저항력

     * 기초의 주요 목표는 움직이지 않는 것임
     * 파일은 두 가지 방식으로 저항력을 가짐: 끝 베어링과 피부 마찰
     * 끝 베어링은 파일의 끝이 강한 토양이나 암석에 닿아 하중을 견딤
     * 피부 마찰은 파일이 주변 토양을 압축하여 마찰력을 생성함

    파일의 설치와 테스트

     * 파일 설치는 최종 설계에 의해 가해질 하중을 견딜 수 있는지 확인하는 과정임
     * 설치 중 충분한 저항력을 보이지 않으면 더 깊이 박을 수 있음

    수평 및 기타 하중

     * 건물과 다리는 수평 하중과 부력 하중을 경험함
     * 파일은 다양한 방향의 하중을 견딜 수 있음
     * 스카우어는 시간이 지남에 따라 토양이 침식되는 현상으로, 이를 예측하고 설계에 반영해야 함

    드릴드 샤프트

     * 드릴드 샤프트는 파일의 또 다른 유형으로, 구멍을 뚫고 철근을 넣은 후 콘크리트를 채움
     * 수중 설치 시 케이싱을 사용하여 구멍을 지지함
     * 트레미를 사용하여 콘크리트를 물과 섞이지 않게 함

    드릴드 샤프트의 장점

     * 드릴드 샤프트는 더 큰 크기로 설치할 수 있어 파일 캡이 필요 없음
     * 바닥을 넓혀 파일의 저항력을 증가시킬 수 있음

    기타 파일 유형

     * 연속 비행 오거 파일, 스톤 컬럼, 헬리컬 파일, 마이크로파일, 시트 파일 등 다양한 파일 유형이 존재함

    파일의 실패 사례

     * 샌프란시스코의 밀레니엄 타워와 탬파의 리 로이 셀몬 고속도로 교각 등 파일 실패 사례가 있음
     * 이러한 사례는 지반 공학의 복잡성을 강조함

    GN⁺의 의견

     * 이 기사는 다리와 건물의 기초 구조에 대한 이해를 돕는 유익한 내용임
     * 기초 파일의 다양한 유형과 설치 방법을 설명하여 공학적 이해를 높임
     * 파일 설치의 장단점을 명확히 설명하여 실제 공학적 문제 해결에 도움이 됨
     * 지반 공학의 복잡성을 강조하여 관련 분야의 중요성을 부각시킴
     * 유사한 기능을 가진 프로젝트로는 Offshore Wind Turbines와 Geopier 등이 있음

        Hacker News 의견

     * ""A Driven Pile is a Tested Pile""이라는 문구는 파일이 설치되면서 일정한 힘을 견딜 수 있음을 확인하는 것임
          + 파일을 계속 밀어 넣으면 더 깊이 가라앉을 수 있음
          + 이는 Monty Python and the Holy Grail에서 Herbert의 아버지가 사용한 방법과 유사함
     * ""Bedrock""은 단순한 개념이지만 실제로는 지질학적으로 더 복잡함
          + 뮌헨 남부에서는 자갈층이 100m 깊이까지 있음
          + 일부 파일은 떠서 가라앉지 않음
     * ""Piledriver""는 WWE에서 발명된 것이 아님
     * I-beam과 H-pile의 차이는 모양과 사용 목적에 있음
          + I-beam은 플랜지에 질량을 집중시키기 위해 웹이 더 슬림함
          + H-pile은 축 방향 용량과 구조적 고려 사항 때문에 웹이 더 두꺼움
          + I-beam은 W(와이드 플랜지)와 S 섹션으로 표준화됨
     * 일부 다리는 의도적으로 가라앉음
          + 예: Submersible Bridge
          + 일부 다리는 잘못 설계됨
          + 예: Lacey V. Murrow Memorial Bridge
     * Coronado Bridge는 중간 부분이 비어 있어 해군 함정이 쉽게 잔해를 치울 수 있다는 소문이 있었으나, 이는 사실이 아님
     * H Pile이 I Pile보다 발음이 더 명확함
     * 이 게시물을 통해 기초에 대해 많은 것을 배웠음
"
"https://news.hada.io/topic?id=15621","골드만 삭스, "AI 투자 수익률(ROI)은 실망스러울 수 있음"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  골드만 삭스, ""AI 투자 수익률(ROI)은 실망스러울 수 있음""

     * 최근 AI 열풍에 힘입어 대형 테크 기업들은 AI에 막대한 투자를 하고 있으나, 이에 상응하는 성과를 내기까지는 상당한 시간이 걸릴 전망
     * 골드만삭스의 보고서에 따르면, 기업들이 향후 1조 달러 이상을 AI에 투자할 것으로 예상되는 가운데, 가장 큰 의문점은 ""이 거대한 지출이 과연 투자 대비 성과를 낼 것인가""임
          + AI 운영에 필요한 데이터센터, 전력망, AI 칩 등에 상당한 투자가 이뤄질 것으로 보이나, 이들 핵심 요소의 공급 부족으로 기업들의 투자수익률은 기대에 못 미칠 수 있음
          + 골드만삭스 글로벌 주식리서치 책임자 Jim Covello는 ""AI 기술은 매우 고가이며, 이러한 비용을 정당화하려면 AI가 복잡한 문제를 해결할 수 있어야 하는데 현재의 AI는 그렇게 설계되어 있지 않다""고 지적함
          + 그는 또한 ""AI 비용의 출발점이 너무 높아, 설사 비용이 하락한다 해도 AI를 활용한 자동화가 경제성을 갖추려면 가격이 극적으로 떨어져야 한다""며 ""우리의 경험상 기본적인 요약 작업조차도 종종 알아보기 힘들고 비논리적인 결과를 내놓는다""고 덧붙임
     * 다만 보고서에서 인용된 다른 전문가들은 좀 더 낙관적인 견해를 보임
          + 골드만삭스 선임 주식 애널리스트 Kash Rangan은 ""AI 기술은 현재 분명히 고가이며, 인지 작업 수행에 있어 인간의 뇌가 생성형 AI보다 전력 단위당 1만 배나 더 효과적""이라면서도 ""과거에도 그랬듯이 AI 기술의 비용 방정식은 변화할 것""이라고 말함.
          + 또 다른 애널리스트 Eric Sheridan은 아이폰이나 우버 등 기술 발전에 대한 초기 반응을 언급하며, ""스마트폰, 우버, 에어비앤비 등이 등장하기 전에는 사람들이 그것들이 필요하다고 생각하지 않았지만, 오늘날 그런 기술 발전에 저항했다는 게 상상하기 어려운 일이 됐다""며 ""생성형 AI 기술도 거의 확실히 그렇게 될 것""이라고 말함

   투자사 보고서가 비관적인 전망을 상당히 에둘러 표현하는 것이 일반적인데, 이정도 스탠스면 상당히 암울한 전망이 아닌가 싶습니다. AI 투자가 사그라지더라도 구축해놓은 데이터센터와 전력망같은 인프라 투자는 유용하게 쓰일 수는 있겠다는 것이 위안일까요.

   스콧 갤러웨이가 Bubble.ai - AI 거품 글에서, AI가 에어포켓에 부딪히며 급강하 할 시나리오를 예로 들면서 초기 상황을 다음과 같이 예견했습니다.
     * 대형 비기술 기업(월마트, JPM, P&G 등)이 AI 이니셔티브를 축소한다고 발표할 것임
     * AI 팀을 폐쇄하고 합작 투자를 취소하는 등의 조치를 취함
     * ""우리는 AI가 비즈니스에 미치는 장기적인 영향에 대해 여전히 낙관적이지만, 처음에 예상했던 ROI가 나타나지 않고 있어 이 기술에 대한 자본 투자 수준을 축소하고 있습니다.""

   딱 그 말투 같아서 흥미롭네요. ㅎ

   해당 보고서 원문은 ""Gen AI: Too Much Spend, Too Little Benefit?"" 입니다. 31P PDF 입니다.
   PDF 전체를 AI가 요약한 내용은 다음과 같습니다.

골드만삭스 연구원들의 의견

     * Daron Acemoglu는 향후 10년 동안 AI로 인한 미국 생산성 및 GDP 증가가 제한적일 것으로 예상함. AI는 단기적으로 일부 작업 자동화에 초점을 맞추고 있어 진정한 변혁적 변화를 가져오기에는 시간이 걸릴 것임. AI 모델이 현재보다 훨씬 더 빨리, 또는 더 인상적으로 발전할 것이라는 믿음에는 동의하기 어려움.
     * Jim Covello는 AI 기술 개발 및 운영 비용을 고려할 때, AI가 복잡한 문제를 해결할 수 있어야 하지만, 현재의 AI는 이에 적합하게 설계되어있지 않음. 실제로 삶을 바꾸는 발명품은 초기부터 저비용으로 고비용 솔루션을 대체할 수 있었으나, AI는 그렇지 않음. AI 비용이 크게 하락할 것이라는 기대에도 회의적임.
     * Joseph Briggs는 장기적으로 AI가 25%의 작업을 자동화하고 향후 10년간 미국 생산성을 9%, GDP 성장률을 6.1% 높일 것으로 예상함. 현재는 비용 효율적이지 않지만, 잠재적 절감 효과와 비용 하락 가능성을 고려하면 결국 더 많은 AI 자동화가 이뤄질 것임.
     * Kash Rangan과 Eric Sheridan은 장기적으로 AI의 변혁적 잠재력과 수익 창출 가능성에 대해 낙관적임. AI 인프라에 대한 대규모 지출이 과도하지는 않으며, AI의 ""킬러 애플리케이션""이 아직 등장하지 않았음에도 거대 지출이 궁극적으로 보상받을 것으로 기대함.

AI 성장을 제약할 수 있는 요인들

     * Toshiya Hari 등은 향후 몇 년간 HBM 기술과 CoWoS 패키징 부족으로 반도체 공급 부족이 AI 성장을 제한할 것으로 봄.
     * Brian Janous는 미국 전력회사들이 AI 등으로 인한 전력 수요 급증에 대비하지 못하고 있으며, 고통스러운 전력 공급 부족 사태가 다가올 것으로 경고함. 필요한 송전망 투자는 쉽게 이뤄지기 어려울 것임.

시장 전망 및 투자 의견

     * Jim Covello는 AI 기본 스토리가 유지되기 어려울 것이나, 버블이 꺼지기까지는 시간이 걸릴 것이며 AI 인프라 기업들이 그 사이 계속 수혜를 볼 것으로 예상함.
     * Ryan Hammond는 AI 테마가 지속될 여지가 있으며, 수혜주가 엔비디아를 넘어 확대될 것으로 보고, 특히 유틸리티 업종의 수혜가 기대됨.
     * Christian Mueller-Glissmann은 장기적으로 평균 이상의 S&P500 수익률을 얻기 위해서는 AI가 트렌드 성장률과 기업 수익성을 크게 높이는 한편 인플레이션을 끌어올리지 않는 가장 우호적인 시나리오가 필요할 수 있음.
"
"https://news.hada.io/topic?id=15718","Radio Garden - 전세계 라디오 듣기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Radio Garden - 전세계 라디오 듣기

     * 라디오 가든은 전 세계의 라디오 방송을 탐색하고 들을 수 있는 플랫폼
     * 지구본을 돌리며 다양한 지역의 라디오 방송을 쉽게 찾을 수 있음
          + 구글어스 같은 3D Globe 화면 UI
     * 특히 해외 라디오 방송을 듣고자 하는 사람들에게 유용함
          + 전세계의 약 12,000개 이상의 라디오 스테이션을 청취 가능
     * CesiumJS (3D 지도) + React + Rematch + Free Geoip

   와 이거 좋네요.. ㅋㅋ

   평양 라디오도 있네요 ㅋㅋ

   Radio Garden - 전세계 라디오 듣기

   4년전에 한번 올렸었는데, 해커뉴스에 다시 올라왔네요. 올라올 때마다 인기가 좋은듯
   전에 달았던 댓글을 다시 한번 ㅎㅎ

   Los Angeles 지역의 KOST 103.5 채널을 추천드립니다.

   http://radio.garden/listen/kost-103-5/j_vijRj7

   말은 거의 없고 이지팝+소프트락 좋은 노래들만 나오는 채널이에요.
   물론 광고는 있지만.. 라디오 특유의 저렴한? 광고가 은근 재미납니다 ^^;
   예전에 출장갔을 때 많이 들었었는데, 이렇게 다시 듣게 되네요

        Hacker News 의견

     * JSON 파일을 .m3u8로 변환하여 WinAmp에서 재생 목록으로 사용해 온 경험 공유
          + 몇몇 스트림이 오프라인 상태가 되어 목록을 새로 고쳐야 하는 상황
          + 간단한 공공 스트림 목록을 제공하는 유사한 웹사이트를 찾고 있음
     * 외국의 진정한 음악을 찾는 것이 어려웠던 경험
          + 80년대와 90년대 미국 히트곡과 유로팝이 주로 나옴
          + 아프리카 부흥 설교와 케이프타운 토크 라디오가 외국 느낌을 줌
          + 이슬람 세계의 플레이리스트가 매우 다름
     * WebSDR 온라인 라디오를 실제 라디오처럼 조정할 수 있는 사이트 추천
          + WebSDR
          + WebSDR.org
          + KiwiSDR
     * radiooooo.com과 everynoise.com 추천
          + radiooooo.com은 역사적인 측면이 있음
          + everynoise.com은 모든 장르의 음악을 제공함
          + radio.garden도 새로운 음악을 찾기에 좋음
     * 지역 학교 구역의 라디오 방송국 추천
          + WMPH.net 91.7Mhz FM
          + 빅 밴드부터 테일러 스위프트까지 다양한 음악을 재생함
     * 인도양의 외딴 섬 라디오 방송국에서 Lowe's 광고를 들은 경험
          + VPN을 통해 플로리다에 위치한 Spotify 계정을 사용하고 있을 가능성 제기
     * 고향 라디오 방송국을 들으며 향수를 달래는 경험 공유
          + 영국의 옛 라디오 방송국을 들으며 위안을 얻음
     * 영국 내에서는 외부 라디오 방송국을 들을 수 없다는 정보 제공
     * 이전에 논의된 적이 있는 주제임을 언급
          + 이전 논의 링크
     * 몇 년 전 처음 발견했을 때 제출했던 경험 공유
          + 주기적으로 다시 제출되며 사람들이 좋아함
          + 2016년, 2018년, 2020년, 2022년의 제출 링크 제공
"
"https://news.hada.io/topic?id=15678","애플, OpenAI 이사회 옵저버 역할 맡을 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      애플, OpenAI 이사회 옵저버 역할 맡을 예정

     * 애플이 지난달 발표된 OpenAI와의 획기적 계약의 일환으로 OpenAI 이사회에서 옵저버 역할을 맡게 됨
          + 애플의 전 마케팅 총괄이자 현 앱스토어 책임자인 필 실러(Phil Schiller)가 선택됨
          + 이사회 옵저버로서 실러는 정식 이사직을 맡지는 않을 예정
     * 이 조치는 애플이 6월에 발표한 AI 기능 제공의 일환으로 아이폰, 아이패드, 맥에서 ChatGPT를 제공하겠다는 계획에 따른 것
     * 이사회 옵저버 역할은 애플을 마이크로소프트와 동등한 위치에 서게 함
          + 옵저버는 이사회에 참석할 수 있지만 투표권이나 기타 이사 권한은 행사할 수 없음
          + 그러나 옵저버는 회사의 의사 결정 과정에 대한 통찰력을 얻을 수 있음
     * 마이크로소프트와 애플이 이사회 회의에 참석하는 것은 수십 년 동안 경쟁자이자 파트너였던 이 두 거대 기술 기업에게 복잡한 상황을 초래할 수 있음
          + 일부 OpenAI 이사회 회의에서는 OpenAI와 마이크로소프트 간의 향후 AI 계획이 논의될 가능성이 높은데, 마이크로소프트는 실러가 이러한 논의에서 제외되기를 바랄 수 있음
          + 이사회 옵저버는 종종 민감한 것으로 여겨지는 논의 중에는 회의장을 떠나기도 함
     * 필 실러는 애플의 AI 이니셔티브를 주도하지는 않지만, 애플 브랜드의 관리자로서의 베테랑 역할은 그를 옵저버 직책에 적합하게 만듦
          + 그는 2020년 마케팅 책임자 직책에서 물러났으며 현재 애플 펠로우라는 직함을 가지고 있음
          + 앱스토어를 관리하는 것 외에도 여전히 회사의 제품 출시 행사를 감독하고 있음
          + 애플 외부에서는 의료 기술 회사 일루미나(Illumina)의 이사직을 맡고 있음
     * OpenAI와의 제휴를 통해 애플은 가장 큰 영향력 있는 AI 스타트업과 손을 잡게 되었지만, 동시에 논란과 격변으로 알려진 기업과도 손을 잡게 됨
          + OpenAI의 CEO 샘 알트먼은 작년 이사회에 충분히 솔직하지 않았다는 우려로 잠시 해임되기도 했음
          + 이 회사는 또한 AI 안전 우려를 축소하고 합의 없이 여배우 스칼렛 요한슨과 유사한 디지털 음성을 사용한 것에 대해 비판을 받아왔음
     * OpenAI 통합은 애플의 전반적인 AI 전략의 한 구성 요소
          + 애플 인텔리전스라고 불리는 이 기술은 기사와 알림을 요약하고, 맞춤형 이모지와 이미지를 만들며, 음성 메모를 기록함
          + 또한 애플의 시리 디지털 어시스턴트의 개선된 버전도 포함하지만, 이러한 개선 사항 중 상당수는 내년까지 릴리즈 되지 못할 것
     * 애플과 OpenAI의 제휴는 현재로서는 재무적 합의가 아님
          + 대신 OpenAI는 수억 명의 잠재 사용자에 대한 접근권을 얻게 되고, 애플은 많은 소비자들이 갈망하는 챗봇 기능을 얻게 됨
          + 사용자들은 또한 애플 기기에서 유료 버전의 챗GPT에 액세스할 수 있게 되며, 이는 애플에게 앱스토어 수수료를 발생시킬 수 있음
     * 애플은 구글, 앤트로픽 등과도 추가 챗봇 제공에 대해 논의 중
          + 또한 바이두, 알리바바와도 중국에서의 AI 기능 제공을 위한 잠재적 합의에 대해 논의 중
          + 애플 인텔리전스는 초기에 미국 영어로 출시된 후 글로벌 출시될 예정
"
"https://news.hada.io/topic?id=15727","글쓰기로 생각하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              글쓰기로 생각하는 법

     * 아침 일찍 일어나 어두운 풍경을 바라보며 생각을 정리하는 것은 사고를 구체화하는 데 도움이 됨
     * 생각은 변덕스럽고 형태가 없지만, 글로 적으면 생각을 구체화하고 꼼꼼히 살펴볼 수 있음
     * 하지만 아무런 글쓰기나 사고력 향상에 도움되는 것은 아님. 적절한 방식으로 접근해야 함

이 글에서 다룰 내용

     * Imre Lakatos의 저서 'Proofs and Refutations'을 읽고 영감을 받아 글쓰기를 통한 사고력 향상에 대해 고찰함
     * 이 글은 두 파트로 구성됨. 첫 번째 파트는 일반인들에게 유용한 기본적인 멘탈 모델을 다룸
     * 두 번째 파트는 연구자나 창의적인 작업을 하는 사람들에게 유용한 보다 복잡한 사고 패턴을 다룸
     * 이 글은 아름다운 문장이나 효율을 위한 글쓰기가 아닌, 사고력 향상을 위한 글쓰기에 초점을 맞춤

생각을 고정하고 균열을 찾기

     * 생각은 유동적이지만, 글로 적으면 고정되고 견고해짐. 이를 통해 생각의 균열과 모순점을 발견할 수 있음
     * 좋은 사고란 현재의 이해를 뛰어넘어 보다 깊은 생각에 도달하는 것. 이는 종종 기존 관념을 부수는 과정을 동반함
     * 글쓰기는 유동적 사고에서 견고한 사고로의 전환 과정을 관찰하게 해줌. 머릿속에선 옳아 보였던 것도 종이에 적으면 금이 가기 쉬움

명확한 주장을 하라

     * 애매함은 생각을 유동적으로 만들어 더 깊은 사고를 막음. 명확하고 날카로운 주장을 해야 자신의 이해 상태를 드러내고 피드백을 얻을 수 있음
     * 지식이 부족한 분야라도 현재의 이해를 드러내는 명확한 주장을 하는 것이 중요함
     * 수학에서 이를 ""추측(conjecture)""이라 함. 불완전한 정보를 바탕으로 한 가설임. 옳고 그름보다 이해 향상이 목적임

생각을 펼쳐 보이기

     * 주장을 한 후에는 그 주장이 참일 수 있는 이유를 설명해 보는 것이 중요함. 결론에 이르는 전제와 추론을 펼쳐 보이는 것
     * 이는 주장이 옳음을 증명하기 위함이 아니라, 비판의 표적을 늘리기 위함임
     * 주장을 설명으로 펼쳐 보이면 비판할 지점이 늘어나 생각의 결함을 찾기 쉬워짐. 설명이 틀리더라도 이는 진전임

감정의 신호에 주목하라

     * 글을 펼쳐 적으면 명백한 결함은 즉시 보임. 하지만 더 심층적 문제는 파악이 어려움
     * 종종 미묘한 감정 신호로 먼저 감지됨. 글을 읽으며 뭔가 어색하거나 불편함을 느낄 때가 있음
     * 이런 미묘한 신호를 무시하기 쉬우나, 오히려 현재 이해를 넘어서는 통찰로 이어질 가능성이 큼
     * 따라서 글쓰기 시 이런 감정에 주목하고 articulate해 보는 것이 중요함

질문을 통해 생각을 진전시켜라

     * 전제와 가정 목록을 보며 후속 질문을 던져 주장을 더 펼쳐 나가는 것이 좋음
     * 질문의 어조는 사랑과 호기심에 차 있어야 함. 생각을 죽이려 하지 말고 진화시키고 통찰을 이끌어 내려 해야 함
     * 이 과정에서 여러 전제가 바뀌고 결론이 달라질 수 있음. 원래 생각이 틀렸다 해서 가치 없는 것은 아님. 비판은 창의적 도약에 의존함을 인지해야 함

반례를 통해 생각을 테스트하라

     * 명백한 오류를 수정한 후에는 논증을 무너뜨릴 수 있는지 테스트해 봐야 함
     * 사실 주장이라면 관련 연구 자료를 훑어 입장이 견고한지 확인해 볼 수 있음
     * 그러나 많은 경우 개인적이고 질적인 문제라 통계만으론 해결하기 어려움. 이 때는 구체적 반례를 떠올려 보는 것이 좋음
     * 반례는 두 가지 방식으로 유용함:
         1. 전제 중 하나는 틀렸으나 결론은 여전히 옳은 경우(국소적 반례) - 이는 설명을 개선하고 이해를 향상시킴
         2. 핵심 전제를 무너뜨려 결론 자체가 틀린 것으로 드러나는 경우(전역적 반례) - 이제 멘탈 모델을 보다 정교하고 깊이 있는 것으로 대체할 때임

GN⁺의 의견

     * 이 글은 글쓰기를 통해 어떻게 생각을 정교화하고 발전시킬 수 있는지 체계적으로 잘 설명하고 있음. 특히 감정 신호에 주목하는 부분이 인상적임
     * 많은 사람들이 글쓰기를 단순한 의사소통 도구로만 여기는데, 실은 강력한 사고 도구가 될 수 있다는 점을 일깨워 줌
     * 다만 이런 철저한 사고 과정을 거치려면 시간이 오래 걸릴 수 있음. 현실적 제약 속에서 어떻게 이를 일상에 적용할 수 있을지 고민해 봐야 함
     * 유사한 주제를 다룬 에세이로는 Paul Graham의 ""Writing, Briefly""와 Andy Matuschak의 ""How to write good prompts""를 추천함
"
"https://news.hada.io/topic?id=15656","Diff-pdf: 두 PDF를 시각적으로 비교하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Diff-pdf: 두 PDF를 시각적으로 비교하는 도구
"
"https://news.hada.io/topic?id=15626","윈도우용 GUI앱을 작성하는 것은 괴롭습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        윈도우용 GUI앱을 작성하는 것은 괴롭습니다

     * C++에서 GUI 작성용 라이브러리를 검색하고 비교한 결과 정리
     * 기본 요구사항 : 윈도우 지원만 필요, 상업적 사용 가능, 다크모드 포함 쉬운 스타일링, 최소 종속성의 40MB 미만 단일 EXE 생성, 빠른 개발

WinUI 3

     * 처음에는 훌륭한 선택처럼 보임
     * 현대적인 Windows 구성 요소를 사용할 수 있고 스타일 색상을 사용자 정의할 수 있음
     * XAML을 사용하여 디자인할 수 있고 Visual Studio 디자이너를 직접 사용할 수도 있음
     * 문제:
          + 패키징되지 않은 형태로 앱을 제공하는 것은 잘 지원되지 않음
          + 앱을 VM이나 다른 컴퓨터로 이동할 때 대부분 실행에 실패함
          + WinUI 기능을 처리하는 많은 .dll 파일을 제공해야 함
          + 단일 포터블 .exe 파일을 만들 수 없음
          + 패키지 형태로 사용 시 문제 없음, 하지만 AppX 패키지로 설치되어 Win32 API 접근 문제 발생

Win32 / MFC / Win32를 래핑하는 작은 라이브러리

     * 높은 이식성이 필요하므로 OS의 기본 렌더링을 사용하는 것이 합리적임
     * 프로그램은 단일 .exe 파일이 될 수 있고 크기도 매우 작을 수 있음(MFC 정적 링크 시)
     * 누군가 이미 작성한 보다 최소한의 라이브러리를 사용할 수 있음
     * 문제:
          + 기본 Win32 컨트롤을 스타일화하는 것은 매우 어려움
          + 모든 컨트롤에 대해 사용자 정의 페인트 기능을 작성해야 함
          + 윈도우 파일 탐색기에서 사용되는 ""숨겨진"" 다크 모드가 있지만 일부 컨트롤만 포함하고 여전히 잘 보이지 않음

Qt

     * C++ GUI의 성배
     * 복잡하지만 Qt Style Sheets를 사용하여 쉽게 스타일을 지정할 수 있음
     * 문제:
          + 동적으로 연결할 때 앱을 실행하는 데 필요한 수많은 .dll이 있으며 크기가 40MB 이상임
          + Qt를 프로그램에 정적으로 연결할 수 있지만 오픈 소스로 만들거나 Qt의 LGPL 라이선스로 인해 재컴파일할 오브젝트 파일을 배포해야 함
          + 또는 상용 라이선스를 구매할 수 있으나 수천 달러

wxWidgets

     * 배우기 쉬운 라이브러리
     * wxFormBuilder를 사용할 수 있음
     * Qt보다 더 허용적인 라이선스를 가지고 있으며 3MB 실행 파일에 정적으로 연결될 수 있음
     * 문제:
          + Windows에서는 기본 Win32 구성 요소를 사용하며 스타일링 옵션을 제공하지 않음
          + Windows 파일 탐색기 다크 컨트롤 적용을 지원하지만 별로 좋지 않음

hikogui

     * Vulkan을 백엔드로 사용하는 새로운 retained mode GUI 라이브러리
     * 내장 다크 모드가 있고 스타일을 쉽게 지정할 수 있음
     * 문제:
          + 성공적으로 컴파일하려면 컴퓨터 과학 박사 학위가 필요함
          + 30분 이상 예제를 컴파일하려고 시도한 후 Vulkan 라이브러리 내부에서 액세스 위반으로 즉시 충돌하는 실행 파일만 얻었음

Sciter

     * HTML/CSS를 사용하여 데스크톱 앱용 GUI를 작성할 수 있는 Electron의 좋은 대안
     * 문제:
          + 최종 앱이 모든 .dll과 함께 약 25MB 정도 되는 크기가 문제가 될 것 같지만 괜찮음
          + 오픈 소스이고 상용으로 정적 링크 버전을 사용할 수 있다면 더 좋을 것임
          + Qt처럼 비싸지 않아서 ($310) 돈을 내고 행복할 것임
          + 문제는 렌더링이 그다지 좋지 않다는 것
          + 글꼴과 이미지의 앨리어싱 문제가 있었음
          + 창에는 사용자 정의하거나 수정할 수 없는 꽤 두꺼운(2-3px) 회색 프레임이 있음

WinForms / WPF

     * C++ GUI 라이브러리에 대해 물어보면 대부분 다른 스택을 사용하라고 권장
          + C++은 나쁜 생각이므로 프로그램의 프런트엔드를 다른 스택으로 작성하고 C++로 작성된 기능을 구성 요소/모듈로 로드하라고 말함
     * 단일 .exe 파일을 작은 크기로 가질 수 있고 WinForms/WPF를 사용할 수 있음
     * .dll을 앱에 리소스로 번들링하고 임시 폴더에 추출하도록 한 다음 P/Invoke를 사용하고 C#/.NET 앱 내에서 컴파일된 .dll을 호출하거나 C++/CLI를 사용하면 됨
     * 문제:
          + .NET 프레임워크는 Windows 10 이상에 사전 설치되어 있으므로 기술적으로 종속성 없음 기준을 충족함
          +
               o .dll을 번들링하면 어딘가에 추출되어야 하고 P/Invoke가 작동하기 위해 추가 코드를 작성해야 함
          +
               o C++/CLI는 .NET IL 코드로 컴파일되어 C#으로 번역된 C++ 코드가 보임

해결책?

     * 간단한 앱의 경우 Dear ImGui보다 더 적합한 것은 없다고 생각함
     * 복잡한 UI를 설계할 때 주로 단점이 있고, retained mode UI가 아니라 immediate mode UI이므로 UI를 위해 초당 60프레임 이상을 렌더링하기 위해 DirectX와 같은 GPU 렌더러를 실행해야 함
     * 그러나 다른 모든 점에서는 일치함
     * 컴파일된 프로그램은 크기가 500KB에 불과하며 VC++ 재배포 가능 파일을 설치할 필요가 없음

GN⁺의 의견

     * 글쓴이가 말한 대로 GUI 앱 개발을 위한 완벽한 라이브러리는 없는 것 같음. 요구사항에 따라 trade-off가 있음
     * 간단한 앱의 경우 Dear ImGui가 가장 적합해 보이지만, 복잡한 UI를 만들려면 retained mode GUI 툴킷을 사용하는 것이 더 나을 것임
     * 상용 앱을 만들려면 라이선스 비용이 중요한 고려사항이 될 수 있음. Qt와 같은 라이브러리는 비용이 높지만 wxWidgets는 무료로 사용할 수 있음
     * C++로 GUI 앱을 만드는 것은 쉽지 않은 일이므로, C#이나 다른 언어로 프론트엔드를 개발하고 C++로 성능 집약적인 부분만 구현하는 것이 더 현실적일 수 있음
     * Windows에서 네이티브 look-and-feel을 원한다면 WinUI나 MFC를 사용하는 것이 좋겠지만, 크로스 플랫폼 지원이 필요하다면 Qt나 wxWidgets가 더 나은 선택이 될 수 있음

   hikogui 무서운 존재군요 ㄷㄷㄷ

   https://getstream.io/blog/flutter-desktop-vs-electron/ 다양한 지표로 성능을 비교

   Sciter 및 Electron과 비교한다면 Flutter Windows Desktop Bulid도 고려해볼만합니다. 간혹버그들이 있는 플러그인들이 있지만 기본은 충실하여 전달 매개로 활용시에는 가능합니다.
   싱글톤 인스턴스,자동업데이트,상태바,윈도우노티,빠른 런칭타임, Dart언어,Win32API Plugin 등등

   Delphi

   C++ Builder

   ""컴파일 성공하려면 컴퓨터 과학 박사 학위 필요""
   ㅋㅋㅋ

        Hacker News 의견

     * 많은 댓글을 읽으면서 전체 전제가 잘못되었음을 깨달음. 블로그 게시물을 ""요구 사항이 비현실적일 때 Windows용 GUI 앱 작성은 고통스러움""으로 이름을 바꾸는 것이 좋겠음
     * .NET Framework 3.5를 사용하여 WinForms를 타겟으로 하는 것이 좋겠음. 최신 Windows 버전에는 모두 설치되어 있음
     * 이 글은 여러 옵션에 대한 좋은 개요를 제공하지만, 저자의 특정 요구 사항이 많은 옵션을 배제하게 만듦
          + 완전히 사용자 정의된 GUI 스타일링을 원하면서 자체 렌더링 함수를 작성하지 않으려는 요구 사항은 쉬운 사용자 정의 GUI 라이브러리를 선택하는 작업이 됨
          + 자체 포함 실행 파일과 40MB 이하의 크기 제한 요구 사항도 많은 옵션을 배제함. Qt는 이러한 요구 사항을 충족할 수 있었지만 오픈 소스 라이선스가 목표와 맞지 않았고 라이선스를 구매하기 싫어했음
          + 종속성을 허용하거나 더 큰 다운로드 크기를 허용하거나 내장된 Windows GUI 컨트롤을 사용하는 경우 상황이 매우 다름
          + 외부 종속성 없이 가벼운 완전 사용자 정의 GUI를 작성하고 허용적인 라이선스를 원한다면 ImGui가 답이 될 것이라고 예상했음
     * WinForms/WPF 아이디어에 큰 결함이 없음을 지적하지만, 두 개의 스택을 요구하는 것 외에는 언급하지 않음. 네이티브 코드를 원하고 C#이 보이지 않기를 원하지만 이유를 설명하지 않음. 역공학에 대한 두려움일 수 있음. UI 코드는 비밀을 포함하는 경우가 드뭄
          + 단일 exe 배포는 때때로 편리하지만, 이 시나리오에서는 번거로울 수 있음. Velopack(스퀴럴)과 같은 패키저를 사용하면 단일 exe로 배포할 수 있으며 자동 업데이트 기능도 추가됨. 설치 시 디스크에 두 개 이상의 파일이 있는 것은 좋은 타협임
          + Windows는 다른 모든 플랫폼을 제외하고 데스크탑 앱을 개발하기에 최악의 플랫폼임
     * LGPL 라이선스 소프트웨어 라이브러리에 대한 상업적 라이선스 비용을 지불해야 한다고 비난하는 개발자에 대해 매우 낮은 의견을 가짐. 그들은 자신의 작업에 대해 보상을 받기를 기대하며, 폐쇄 소스 소프트웨어를 만들어 이를 보장함. 그러나 UI 라이브러리를 만드는 실제 어려운 부분을 해결한 개발자는 세상에 코드를 자유롭게 선물하는 성인이 되어야 함
     * Sciter와 ""안티앨리어싱"" 문제에 대해... 저자는 애플리케이션에서 고해상도 DPI 지원을 활성화하지 않았음
          + Visual Studio에서 활성화하거나 적절한 매니페스트를 포함하여 해결할 수 있음
          + ""Hello C++"" 튜토리얼에서 설명됨
     * 더 정확하게:
          + ""포터블"" (자동 압축 해제 없이 단일 exe)
          + 상업적이고 컴파일된 객체 파일을 재배포하지 않으려 함 (이는 ""포터블"" 요구 사항과 함께 LGPL을 허용하지 않음)
          + 다크 모드
          + Windows GUI 앱은 고통스러움. 이 요구 사항 중 하나를 제거하면 좋은 옵션이 많음
          + 대부분의 ""포터블"" 애플리케이션은 win32를 사용함. 보통 포터블은 작고 단순한 애플리케이션으로 기능이 다크 모드나 다른 스타일링 능력보다 중요함
     * 다른 사람들의 오픈 소스에 많은 것을 요구하는 사람으로서, 저자는 자신의 솔루션을 오픈 소스로 공개하려 하지 않음
     * 나는 요구 사항에 맞는 GUI 툴킷을 작업 중임: Slint - https://slint.dev
          + 단일 .exe로 정적으로 컴파일될 수 있으며 크기가 40M보다 작음. 데스크탑에서 무료로 사용할 수 있는 라이선스를 가짐. 다크/라이트 스타일을 제공함. (작업 중인) 드래그 앤 드롭 WYSIWYG 편집기도 포함됨
     * 모든 컨트롤에 대해 사용자 정의 페인트 함수를 작성해야 한다는 것은 오래된 win32 철학이 저자에게 맞지 않음을 보여줌. win32의 핵심 요소는 wndproc임. 대부분의 컨트롤은 부모에게 색상을 물어봄
          + 불편하다면, 작은 라이브러리로 래핑하여 보일러 플레이트를 제거하는 것은 큰 문제가 아님
     * 결과는 종속성이 없거나 최소한의 종속성을 가진 단일 .exe 파일이어야 하며 크기는 40MB 미만이어야 함
          + 컴퓨터에는 이제 현대적인 브라우저가 있음. .exe 파일 대신 단일 .html 파일에 인라인된 이미지/css/javascript를 사용할 수 있음
"
"https://news.hada.io/topic?id=15602","Dorkly - 오픈 소스 Feature Flag 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Dorkly - 오픈 소스 Feature Flag 시스템

     * Git 기반의 오픈소스 Feature Flag 백엔드
     * LaunchDarkly의 오픈 소스 SDK와 함께 사용 가능
          + 다양한 언어에서 LaunchDarkly의 SDK를 사용해 일관된 방식으로 Feature Flag 구현 가능
     * 이미 Terraform, AWS, GitHub를 사용하고 있다면 기존 워크플로에 쉽게 통합 가능

동작 방식

     * 주로 애플리케이션과 연동 가능한 곳에 호스팅하는 Docker 기반 서버 프로세스로 구성
     * 앱 코드에 LaunchDarkly SDK를 추가하면, 앱은 실행 시 Dorkly 서버에 연결해 플래그 데이터를 요청하고 업데이트를 수신
     * 플래그 규칙은 간단한 YAML 형식을 사용해 GitHub에서 관리됨

지원되는 기능

     * Git 저장소당 하나의 Project 지원. 더 많은 Project가 필요하면 더 많은 저장소 생성
     * Boolean 플래그: on/off 또는 사용자 ID 기반 롤아웃 비율 설정 가능
     * 서버 사이드 및 클라이언트 사이드 플래그 지원 (플래그별로 클라이언트 사이드 제외 가능)
     * Secrets 관리: SDK 키는 AWS Secrets Manager에 저장되고 Terraform 출력으로 내보내짐. 생성된 Environment README에도 표시됨
     * 빠른 업데이트: Feature Flag 변경 사항이 Merge되면 1분 내에 애플리케이션에 반영됨

현재 상태

     * 아직 초기 개발 단계임
     * Dorkly 서버 토폴로지가 아직 고가용성을 제공하지 않더라도 프로덕션에서 사용 가능함

   따로 https://openfeature.dev/ 사양을 따르진 않나보네요.
"
"https://news.hada.io/topic?id=15697","SC-IM : Ncurses 기반의 Vim 스타일 스프레드시트 계산기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 SC-IM : Ncurses 기반의 Vim 스타일 스프레드시트 계산기

     * 터미널에서 CSV/XLS 파일을 스프레드시트 형태로 보고 편집하는 도구
     * Vim 명령어로 셀 내용 편집
     * UNDO / REDO
     * 65,536개의 행과 702개의 열 지원 (최대 1,048,576개의 행으로 확장 가능)
     * CSV / TAB 구분 / XLSX 파일 가져오기 및 내보내기. ODS 가져오기. Markdown 내보내기
     * 키 매핑 지원
     * 자동 백업
     * RGB 값을 지정하여 사용자 정의 가능한 색상 지원
     * 셀 색상화 및 굵게, 기울임, 밑줄 등의 형식 지정
     * 와이드 캐릭터 지원. 지원하는 알파벳들 : 영어, 스페인어, 프랑스어, 이탈리아어, 독일어, 포르투갈어, 러시아어, 우크라이나어, 그리스어, 터키어, 체코어, 일본어, 중국어
     * 행 정렬, 행 필터링, 소계(Subtotal)
     * 셀 이동
     * 클립보드 지원
     * GNUPlot 상호작용
     * LUA 스크립팅 지원. 트리거 및 C 동적 링크 모듈도 지원
     * 원하는 언어로 외부 함수 구현 및 SC-IM에서 사용
     * 외부 스크립트에서 입력을 읽어 비대화형 계산기로 사용

  GN⁺의 의견

     * sc-im은 vim 스타일의 명령어를 사용하여 스프레드시트를 편집할 수 있어 vim 사용자에게 매우 유용함.
     * 다양한 파일 형식 지원과 스크립팅 기능을 통해 확장성이 뛰어남.
     * 비슷한 기능을 가진 다른 오픈 소스 프로젝트로는 Visidata 가 있음.

   Visidata - 터미널에서 스프레드시트 데이터 다루기

        Hacker News 의견

     * Vim 스타일의 터미널 스프레드시트 도구가 시장의 빈틈을 채워줌
     * 최근 몇 년간 터미널 도구들이 많이 발전했음
     * visidata를 사용해봤고 최종적으로 visidata에 정착했음
     * TUI에서 GUI로, 다시 TUI로 돌아가는 것이 흥미로움
     * 이런 프로젝트를 통해 돈을 벌 수 있다는 것이 멋짐
     * 1990년경 상용 프로그래밍 도구인 ""Vermont Views""를 사용했던 기억이 남
          + 텍스트 기반 사용자 인터페이스 개발을 쉽게 해주는 도구였음
     * Vim을 좋아해서 이 도구를 사용하고 싶었지만, 뭔가 어색하게 느껴짐
          + 스프레드시트에서는 화살표 키로 이동하고 바로 타이핑하는데 익숙함
          + SCIM을 사용할 때는 계속 벽에 부딪히는 느낌이었음
          + 그럼에도 불구하고 TUI로서의 스프레드시트 아이디어는 훌륭함
     * 스프레드시트를 유용하게 사용하기 전, 상사가 HP 워크스테이션에서 sc를 실행하며 흥미를 유도했음
          + sc-im은 sc를 기반으로 하며, 원작자는 James Gosling과 Mark Weiser였음
     * 매번 눈길을 끌지만, 일상 업무에서는 항상 Google Sheets로 돌아감
          + 최근 발견한 브라우저 확장 프로그램이 게임 체인저였음
          + vim의 모든 기능이 아니라, 탐색과 선택 기능만 필요함
     * dBase와 비슷해 보임
     * 간단한 C 코드로 작성되었으며, 전처리기 네임스페이스와 이름 맹글링이 포함된 하나의 컴파일 유닛을 원했음
"
"https://news.hada.io/topic?id=15713","PostgreSQL와 UUID를 기본 키로 사용하는 것에 대해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   PostgreSQL와 UUID를 기본 키로 사용하는 것에 대해

     * UUID는 데이터베이스 테이블 기본 키로 자주 사용됨
          + 생성하기 쉽고 분산 시스템 간에 공유하기 쉬우며 고유성을 보장
          + UUID의 크기를 고려할 때 이것이 올바른 선택인지 의문이 들지만, 우리가 결정할 수 없는 경우가 많음
     * 이 글은 ""UUID가 키에 적합한 형식인가""에 초점을 맞추지 않고 PostgreSQL에서 UUID를 기본 키로 효율적으로 사용하는 방법에 대해 설명

PostgreSQL와 UUID를 기본 키로 사용하기

     * UUID란?
          + UUID는 데이터베이스 테이블의 기본 키로 자주 사용됨
          + 분산 시스템 간에 쉽게 공유 가능하며 고유성을 보장함
          + UUID의 크기 때문에 적합한지 의문이 들 수 있지만, 선택의 여지가 없는 경우가 많음

  PostgreSQL에서 UUID 데이터 타입

     * UUID를 문자열로 저장
          + PostgreSQL은 문자열을 저장하기 위한 text 데이터 타입을 제공함
          + 그러나 text 타입은 UUID를 저장하기에 적합하지 않음
          + PostgreSQL은 UUID를 위한 전용 데이터 타입 uuid를 제공함
          + uuid 타입은 128비트 데이터 타입으로, 하나의 값을 저장하는 데 16바이트가 필요함
          + text 타입은 1 또는 4바이트의 오버헤드가 추가됨
     * 실험 결과
          + 두 개의 테이블을 생성하여 비교: 하나는 text 타입, 다른 하나는 uuid 타입
          + 10,000,000개의 행을 삽입한 후 테이블 크기와 인덱스 크기를 비교
          + text 타입을 사용하는 테이블은 54% 더 크고, 인덱스 크기는 85% 더 큼

  UUID와 B-Tree 인덱스

     * B-Tree 인덱스와 UUID
          + 랜덤 UUID는 B-Tree 인덱스에 적합하지 않음
          + B-Tree 인덱스는 순서가 있는 값과 잘 작동함
          + Java의 UUID.randomUUID()는 UUID v4를 반환하며, 이는 의사 랜덤 값임
          + UUID v7은 시간 순서대로 정렬된 값을 생성하여 B-Tree 인덱스에 적합함
     * UUID v7 사용
          + Java에서 UUID v7을 사용하려면 java-uuid-generator 라이브러리가 필요함
          + UUID v7을 생성하면 삽입 성능이 향상될 수 있음

  UUID v7이 INSERT 성능에 미치는 영향

     * 실험
          + UUID v7을 사용하는 테이블을 생성하고, 10,000개의 행을 10번 삽입하여 성능을 측정
          + 결과는 다소 무작위적이지만, UUID v7을 삽입하는 것이 약 2배 더 빠름

  추가 읽을거리

     * PostgreSQL 17에서 UUID v7이 네이티브로 지원될 가능성 있음
     * UUID v7 형식에 대한 정보
     * UUID가 데이터베이스 기본 키로서의 성능에 미치는 영향

  요약

     * UUID의 길이 문제
          + 최적화가 이루어져도 UUID는 기본 키로서 최적의 타입이 아님
          + 선택의 여지가 있다면 TSID와 같은 다른 옵션을 고려할 것
     * 최적화 필요성
          + 대규모 데이터셋이나 높은 트래픽이 예상된다면 최적화를 고려해야 함
          + 기본 키 변경은 어려운 작업이므로 처음부터 올바르게 설정하는 것이 중요함
     * 주의사항
          + 필자는 PostgreSQL 전문가가 아니며, 배운 내용을 공유하는 것임
          + 유용했다면 댓글이나 트위터를 통해 피드백을 주길 바람

GN⁺의 정리

     * 이 글은 PostgreSQL에서 UUID를 기본 키로 사용할 때의 효율적인 방법을 다룸
     * UUID v7을 사용하면 삽입 성능이 향상될 수 있음을 실험을 통해 보여줌
     * 대규모 데이터셋이나 높은 트래픽이 예상되는 경우 최적화가 필요함
     * TSID와 같은 다른 옵션도 고려해볼 만함

   uuid에 표준형식(16진수 + 하이픈) 대신 base62 인코딩을 바라는건 무리일까요?

   uuidv7 은 무적이다
   uuidv8+은 ""신""이고

   가장 큰 허들은,, 인간친화적이지 않다는 것.. 저는 아직 많은부분에서 이부분이 필요하네요..

        Hacker News 의견

     * B-tree 친화적인 기본 키로 bigserial을 사용하고, 외부 레코드 로케이터 옵션으로 문자열로 인코딩된 UUID를 고려할 것을 권장함
          + 비기술적인 사용자가 인용할 경우, PNR 스타일 로케이터와 같은 간단한 옵션을 먼저 고려할 것
          + 서비스나 애플리케이션의 스키마 내에서 PK 유형을 혼합하지 말 것
          + 고유 식별자로 UUIDv7을 사용할 때는 타임코드가 내재된 데이터에만 사용할 것
          + hashids를 사용하지 말 것; 암호화 품질이 없고 일상적인 사람들에게 친숙하지 않음
          + 인코딩 시 base64나 하이픈이 포함된 알파벳을 사용하지 말 것
     * 데이터베이스 스키마 설계 시 관심사의 분리와 기계적 동조의 원칙을 염두에 둘 것
     * Stripe의 타이핑된 랜덤 ID는 실제로 랜덤이 아님
          + 메타데이터, 포함된 타임스탬프, 샤드 및 참조 키, 버전 정보 등이 포함됨
          + 개인적으로 base58로 인코딩된 AES 암호화 bigserial+HMAC 로케이터를 선호함
     * Postgres에서 랜덤 UUID는 큰 문제가 아님
          + UUID(16바이트)는 serial(4바이트)이나 bigserial(8바이트)보다 크지만, 전체 테이블 수준에서는 큰 문제가 아님
     * Postgres에서 serial vs. random UUID vs. ordered UUID를 고려하기 전에 다른 많은 것들을 걱정해야 함
     * 최근 Postgres PK로 ULID를 선택했으며, 이 기사에서 많은 도움을 받았음: https://brandur.org/nanoglyphs/026-ids
     * ULID를 선호하는 이유는 UUID 유형과 호환되며, 타임스탬프가 내장되어 있어 ID로 정렬하면 타임스탬프 순으로 정렬됨
     * 비교에 'int64'도 포함되면 UUID와 전통적인 접근 방식의 오버헤드를 비교할 수 있어 좋을 것임
     * 삽입 성능은 성능을 평가하는 나쁜 방법임
          + B-Tree 성능은 삽입 시 더 좋지만, 대규모 트랜잭션에서는 어떨지 의문임
     * SQLite에서 UUID4가 선호되는 이유는 트랜잭션 잠금 동안 페이지 캐시 충돌 가능성이 적기 때문임
          + Postgres 시스템에서도 비슷하게 적용될 수 있음
     * 정수 자동 증가 기본 키를 선호함
          + 이해하기 쉽고 정렬하기 간단함
          + 대규모 배치 프로젝트에서 마지막 기본 키를 저장하고 그보다 큰 모든 것을 가져올 수 있음
     * UUIDv7 삽입 시간 벤치마크는 UUID 생성 시간을 포함함
          + 단순히 인덱스 업데이트 비용을 분리해서 보고 싶음
     * PostgreSQL 17에서 UUIDv7 지원이 포함될 가능성이 낮음
          + 최근 작업에서 커미터가 제거되었고, 버전 17은 이미 기능 동결 상태임
     * python-ulid를 사용하기 시작했으며, ULID가 UUID보다 우수함
     * UUID v7 표준 링크가 오래되었으므로, RFC 9562를 참조할 것: https://datatracker.ietf.org/doc/html/rfc9562
"
"https://news.hada.io/topic?id=15622","Show GN: draw2app - AI를 이용해 간단한 스케치에서 웹 응용 생성하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: draw2app - AI를 이용해 간단한 스케치에서 웹 응용 생성하는 도구

   주말에 간단한 사이드 프로젝트를 만들어봤습니다.
     * 웹에서 간단한 wireframe 을 web app 으로 생성
     * OpenAI의 gpt-4o 모델을 이용 (자신의 API Key 입력)
     * 기본 wireframe 도형 제공 (window, button, slider, select, tabs, ...)
     * 생성된 응용 바로 실행 및 코드 복사 가능

   아래 사이트에서 이용가능하고 Github에 소스코드 공개되어 있습니다.
     * 사이트: https://draw2app.pages.dev/
     * Github: https://github.com/niklauslee/draw2app
"
"https://news.hada.io/topic?id=15660","GraphRAG - Microsoft의 데이터 디스커버리 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GraphRAG - Microsoft의 데이터 디스커버리 도구

     * LLM의 강력한 기능을 사용하여 비정형 텍스트에서 의미 있는 정형 데이터를 추출하도록 설계된 데이터 파이프라인 및 변환 제품군
     * 이전에 보지 못한 데이터 세트에 대한 질의응답을 가능하게 하는 그래프 기반 접근 방식
     * 2월에 소개했던 도구로, 이제 오픈소스로 공개하여 더 구조화된 정보 검색과 포괄적인 응답 생성을 제공함

주요 기능

     * 대규모 언어 모델(LLM)을 사용하여 텍스트 문서 모음에서 풍부한 지식 그래프를 자동으로 추출함
     * 이 그래프 기반 데이터 인덱스는 사용자 쿼리 이전에 데이터의 의미 구조를 보고할 수 있음
     * 고밀도로 연결된 노드의 ""커뮤니티""를 계층적 방식으로 감지하여 고수준 주제에서 저수준 주제에 이르기까지 그래프를 여러 수준으로 분할
     * LLM을 사용하여 이러한 각 커뮤니티를 요약하면 데이터셋의 계층적 요약이 생성되어 어떤 질문을 해야할 지 미리 알 필요 없이 데이터셋을 이해할 수 있음
     * 각 커뮤니티는 해당 엔티티와 관계를 설명하는 커뮤니티 요약의 기초 역할을 함

데이터셋 전체를 다루는 질문에 대한 답변의 장점

     * 이런 ""커뮤니티 요약""이 벡터 검색에 기반한 naive RAG 접근 방식이 부족한 전역 질문(데이터셋 전체를 다루는 질문)에 어떻게 도움을 줄 수 있는까?
     * 예를 들어 ""데이터셋의 주요 주제는 무엇입니까?""와 같은 질문은 naive RAG가 항상 오해의 소지가 있는 답변을 제공하게 됨
     * 전역 질문에 답하려면 모든 입력 텍스트를 고려해야 함
     * 커뮤니티 요약은 전역 데이터 맥락의 모든 관련 내용을 유지하는 맵 리듀스 접근 방식을 사용하여 이러한 전역 질문에 답할 수 있음:
         1. LLM 컨텍스트 창 크기까지 커뮤니티 보고서를 그룹화함
         2. 각 그룹에 질문을 매핑하여 커뮤니티 답변을 생성함
         3. 최종 전역 답변으로 모든 관련 커뮤니티 답변을 줄임

평가 및 결과

     * 이 접근 방식을 naive RAG 및 계층적 소스 텍스트 요약과 비교하기 위해 LLM GPT-4를 사용하여 다양한 activity-centered sense-making 질문을 생성함
     * 생성된 답변에 대해 3가지 평가 지표를 선택함: comprehensiveness(모든 측면을 상세히 다룸), diversity(다양한 관점 제공), empowerment(정보에 입각한 의사 결정 지원)
     * GraphRAG는 naive RAG보다 comprehensiveness와 diversity 측면에서 우수한 성능을 보임(~70-80% 승률)
     * 또한 GraphRAG는 중간 수준 및 낮은 수준의 커뮤니티 요약을 사용할 때 이러한 측면에서 소스 텍스트 요약보다 낮은 토큰 비용으로 더 나은 성능을 보임(쿼리당 ~20-70% 토큰 사용)
     * 가장 높은 수준의 커뮤니티의 경우 계층적 소스 텍스트 요약과 경쟁력 있는 성능을 보였으며 토큰 비용이 훨씬 낮음(쿼리당 ~2-3% 토큰 사용)

연구 인사이트 및 향후 방향

     * 초기 연구 주기를 통해 LLM이 비정형 텍스트 입력에서 풍부한 지식 그래프를 성공적으로 도출할 수 있음을 입증함
     * 이러한 그래프는 naive RAG가 적절한 응답을 생성할 수 없고 계층적 소스 텍스트 요약이 지나치게 비싼 새로운 유형의 전역 쿼리를 지원할 수 있음
     * 현재 그래프 인덱스 생성의 선행 비용을 유지하면서 이러한 비용을 줄이기 위한 다양한 접근 방식을 모색 중임
     * 문제 영역에 LLM 추출 프롬프트를 자동으로 조정하는 최신 작업은 이러한 프롬프트를 사용자 정의하고, 엔티티 유형을 열거하며, 샷 예제를 만드는 데 필요한 선행 작업을 줄이는 방법의 예임
     * GraphRAG와 솔루션 가속기를 공개적으로 사용할 수 있도록 함으로써 데이터를 전체적으로 이해하는 것이 중요한 사용자와 사용 사례에 그래프 기반 RAG 접근 방식을 더 쉽게 접근할 수 있도록 하는 것이 목표임

        Hacker News 의견

     * Microsoft의 GraphRAG 프로젝트는 최신 추출 라이브러리 없이도 지식 그래프를 구축하는 방법을 사용함
          + GPT-4와 같은 모델이 특정 형식 지침을 잘 따르기 때문일 가능성이 있음
          + 예시를 제공하여 원하는 스키마를 따르게 함
     * Microsoft가 GraphRAG를 오픈 소스로 공개한 것에 대해 매우 기쁨
          + GraphRAG와 Llama3를 MacBook에서 사용해 볼 계획임
          + 이 도구가 게임 체인저가 될 수 있을 것이라고 생각함
     * GraphRAG Method에 대해 더 자세한 정보를 찾고 있는 사람들을 위한 링크 제공
     * GraphRAG 프로젝트는 벡터 데이터베이스가 복잡한 검색 쿼리에 대해 완전한 RAG 솔루션을 제공할 수 있음을 보여줌
          + 정확한 지식 그래프를 구축하기 위해서는 텍스트를 LLM에 로드하는 것만으로는 충분하지 않음
          + 이를 위해 GraphRAG-SDK를 작성하여 안정적인 온톨로지를 생성함
     * 지식 그래프는 전통적인 의미 검색을 대체하지 않지만, RAG 수행 시 새로운 능력을 제공함
          + 긴 컨텍스트를 탐색하거나 다른 컨텍스트를 일관되고 효율적으로 탐색할 수 있음
          + LLM을 사용한 그래프 생성 시 시도한 결과가 부족했음
          + 이를 시도해 볼 것을 기대하고 있음
     * 논문을 이해한 것이 맞다면, 인덱싱 시점에 LLM을 여러 번 실행하여 엔티티 추출 및 그래프 인덱스를 구축함
          + 그래프를 여러 번 실행하여 클러스터를 생성함
          + 쿼리 시점에 모든 클러스터를 실행하여 각 클러스터에서 답변을 생성하고 점수를 매김
          + 최저 점수의 답변을 제외한 모든 답변을 실행하여 ""글로벌 답변""을 생성함
          + 이러한 계산 요구 사항이 큰 데이터셋에 대해 감당할 수 없는 수준일 수 있음
     * 그래프와 LLM을 사용한 여러 작은 프로젝트를 진행해 왔으며, 이 접근 방식이 효과가 있음을 확인함
          + 프롬프트 엔지니어링과 여러 번의 패스를 통해 해결할 수 있음을 깨달음
          + 이를 시도해 보고 결과가 좋다면 Python 환경에서 벗어나기 위해 노력할 것임
     * LlamaIndex의 Knowledge Graph RAG Query 엔진과 관련이 있는지 궁금함
     * 러시아-우크라이나 전쟁을 예시로 선택한 것이 흥미로움
          + 군사 데이터 분석 계약을 목표로 한 의도적인 선택일 수 있음
     * 논문을 읽은 후 이 프로젝트를 시도해 보고 싶었음
          + 직접 구현하려고 했지만 코드가 몇 주 뒤에 나올 것이라고 생각했음
          + 인내심이 결실을 맺었음
"
"https://news.hada.io/topic?id=15701","DVD 로고를 구석에 배치로고를 구석에 배치 (2023)

    기본 사항

     * 장르: 아케이드 액션 게임 / 어린 시절의 꿈 실현 시뮬레이터(?)
     * 링크: itch에서 플레이 또는 GitHub에서 코드 확인
     * 엔진: PICO-8
     * 소요 시간: 4일 (6월 27일 - 6월 30일)
     * 기타: 이 게임은 Recurse Center에서 제작되었음. Recurse Center는 프로그래머를 위한 작가의 휴양지와 같은 곳임. 지원을 고려해볼 것

    게임 플레이 비디오

     * 수동 '입자 효과'를 개별 픽셀을 그려서 추가하는 것이 가장 재미있었음

    고수준 생각

     * 이 게임은 매우 작음. 45초가 걸리며, 더 길어질 야망이 없고, 농담을 기반으로 함. 이 점이 마음에 듦
     * ReShape의 UI 복잡성과 테마 부족 후에 이렇게 제한된 것을 만드는 것이 상쾌했음
     * 게임 플레이 자체는 괜찮음. 약간 어렵지만, 강한 테마와 짧은 길이 덕분에 게임을 시작하면 끝낼 가능성이 높음
     * 친구들로부터 높은 점수를 받는 메시지를 받는 것이 재미있었음. 현재 친구의 최고 점수는 21점이고, 내 점수는 26점이었음
     * 이것은 나의 첫 PICO-8 게임임. PICO-8 경험의 일부는 좋았고 일부는 그렇지 않았음. 하지만 전체적으로 시도해본 것이 기쁘고, 올해 더 많은 PICO-8 게임을 만들 계획임

    PICO-8이 뭐지?

     * PICO-8은 80년대 콘솔을 모방한 그래픽, 사운드, 코드 크기, 프로세서 속도에 제한이 있는 ""판타지 콘솔""임
     * 콘솔에서 직접 스프라이트/음악/사운드 효과를 만들고 코드를 작성할 수 있음
     * PICO-8 도구는 현대 게임 엔진에 비해 원시적이지만, 이러한 단순함이 창의성을 자극함
     * PICO-8 게임은 독특하고 일관된 느낌을 가짐
     * 가장 잘 알려진 PICO-8 게임은 Celeste의 원본 버전임. Celeste의 실제 게임에서 이스터 에그로 플레이 가능함

    PICO-8 환경: 도구

     * PICO-8에는 몇 가지 내장 도구가 있음:
          + 스프라이트 편집기. Aseprite가 그리웠지만, PICO에서 직접 스프라이트를 편집할 수 있는 것이 좋았음
          + 사운드 효과 편집기. 처음에는 직관적이지 않았지만 Gruber 비디오를 보고 나서 빠르게 익숙해졌음
          + 음악 편집기. 키보드를 사용하는 것에 익숙해서 매우 즐겁지는 않았지만, 상대적으로 직관적임
          + 코드 편집기. 코드 줄이 편집기를 넓히면 길어지지 않고 글꼴만 커짐. vscode의 pico8-ls 확장을 설치하여 문법 강조와 API 참조를 얻었음

    PICO-8 환경: 분위기

     * PICO-8에서 이렇게 작은 게임을 출시하는 것이 매우 자연스러웠음
     * 개발 중에 여러 확장을 고려했지만, PICO-8의 단순함 덕분에 게임을 있는 그대로 출시하는 것이 자연스러웠음
     * PICO-8의 단순함이 나에게 단순한 것을 할 수 있는 허락을 준 것 같음

    테마가 다시 있어서 좋음

     * 게임 플레이어로서 때때로 테마를 건너뛰고 메커니즘에 집중함
     * 게임을 만들 때 테마가 중요하지 않다고 생각할 때가 있음
     * ""Put the DVD Logo in the Corner""는 그 반대임. 이 게임의 단일 메커니즘은 ""큰 사각형의 모서리에 작은 사각형을 착륙시키는 것""임
     * 테마 덕분에 이 게임을 다른 사람들에게 이야기하는 것이 가장 재미있었음

    마무리

     * 이 게임을 만들고 PICO-8과 작업하는 것이 매우 즐거웠음
     * 더 많은 작은 아케이드 느낌의 게임을 만들고 PICO-8으로 돌아가는 것을 기대하고 있음
     * 현재 Firefox 주소 표시줄에서 완전히 실행되는 게임을 구상 중임

    GN⁺의 의견

     * 이 기사는 PICO-8이라는 독특한 개발 환경을 소개하며, 제한된 도구와 리소스가 창의성을 자극할 수 있음을 보여줌
     * PICO-8은 단순한 게임 개발을 통해 프로그래밍의 기본을 배우고 싶은 사람들에게 유용함
     * Celeste와 같은 성공적인 게임이 PICO-8에서 시작되었음을 알리는 것은 이 플랫폼의 잠재력을 강조함
     * PICO-8의 단순함은 복잡한 게임 개발에 지친 개발자들에게 신선한 바람을 불어넣을 수 있음
     * 다른 유사한 프로젝트로는 TIC-80이나 Love2D가 있으며, 이들도 간단한 게임 개발에 적합함

        Hacker News 의견

     * Recurse Center에 대한 언급이 흥미로움
          + 예술가 레지던시와 비슷하지만 프로그래머를 위한 것임
          + 예술가로서 레지던시에 참여한 경험이 새로운 관점을 열어줌
          + 비상업적이고 비경쟁적인 과학 활동 기회가 더 많아지면 좋겠음
          + 사회나 참여자에게 유익할 것임
     * 개발자가 자신의 프로젝트가 Hacker News에 올라온 것을 보고 기뻐함
          + pico-8을 시도해보라고 권장함
          + 최근에는 더 이상 pico-8 게임을 만들지 않았지만 Playdate와 Picotron 아이디어를 가지고 놀고 있음
     * DVD 로고가 화면 모서리에 닿지 않는 것에 대한 심리적, 사회적 고통에 대한 이야기 언급
          + 관련 영상 링크 제공
     * Pico-8 환경을 매우 좋아함
          + Macromedia Flash MX의 ActionScript 이후 가장 재미있는 코딩 환경임
     * DVD 로고 스크린세이버를 만든 경험 공유
          + 스크린세이버 링크 제공
     * DVD 로고가 큰 문화적 현상이라는 사실을 몰랐음
          + 관련 영상 링크 제공
     * 게임을 직접 플레이할 수 있는 링크 제공
          + 소스 코드 링크 제공
     * Playdate에서 이 게임을 하면 재미있을 것 같음
          + 크랭크를 사용해 시간을 조절하고 리듬을 맞추는 추가 포인트가 있을 수 있음
     * PICO-8 환경에 대한 설명이 재미있고 잘 되어 있음
          + 19점을 얻었지만 운이 좋았던 것 같음
"
