"https://news.hada.io/topic?id=18505","Show GN: 오픈소스 커뮤니티 빌더 TSBOARD의 새로운 백엔드 : GOAPI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: 오픈소스 커뮤니티 빌더 TSBOARD의 새로운 백엔드 : GOAPI

   약 7개월 전에 처음으로 TSBOARD 프로젝트를 소개드렸습니다.

   그 때는 프론트엔드와 백엔드 모두 타입스크립트로 작성되었고, 백엔드 구동을 위해 Bun 런타임을 사용했었습니다.

   그러나 여러 사정으로 백엔드를 새로 다시 만들게 되었고, 기존 TSBOARD 프로젝트와 분리된 GitHub 저장소에 올려서 공개합니다. 이 새로운 백엔드는 Go 언어로 작성되었고, TSBOARD 정식 버전에서 바이너리 형태로 함께 제공됩니다.


왜 백엔드를 새로 만들었나?

     * Bun 런타임은 정말 훌륭한 성능을 보여줍니다. 하지만 올인원 툴킷이라는 또 다른 소개말이 무색하게 패키지 관리는 아직 npm을 따라가지 못하고 있습니다.
     * 이 때문에 TSBOARD를 사용하려면 Node.js 와 Bun 이렇게 2개의 런타임이 필요했습니다. 번잡하기도 하고, 사용자 입장에서도 불편하구요.
     * 지금은 고쳐졌지만 초창기에 가상 CPU에서 동작하지 않는 문제로 인해 정작 개발자인 저도 다른 서버에 올리지 못하는 상황이 치명적이었습니다.
     * (다른 분들의 지적처럼) 오케스트레이션을 하면 된다고는 하지만, 싱글 스레드의 제약이 어쨌든 태생적으로 있는 JS 런타임의 한계를 넘어서서, 여러 쓰레드를 활용하고 싶었습니다.
     * 더 많은 타입이 필요했습니다. 타입스크립트만으로는 이 갈증을 채울 수가 없었어요.

왜 Go 언어를 선택했나?

     * 새로운 백엔드는 1) 컴파일이 되어야 하고 2) 메모리 관리는 알아서 해주면 좋겠고 3) 별도의 런타임 같은 걸 설치할 필요가 없어야 했습니다.
     * Rust, Kotlin, Python, PHP 그리고 Go 언어를 두고 고민끝에, 위 3가지 조건을 모두 만족하지만 저로서는 처음인 Go 언어를 선택하게 되었습니다. (미안해 PHP)
     * Go 언어의 단순함이 가장 마음에 들었고, 타입스크립트와의 유사점들도 선택에 주요 포인트였습니다. 무엇보다 동시성 관리나 메모리 관리 측면에서 다른 대안 대비 좋은 선택이었다고 생각합니다.

Go 언어, 써보니 어땠나?

     * 세상에 장점만 있는 언어는 없다는 사실을 Go 언어도 증명하고 있구나, 하는 점을 깨달았습니다. if err != nil { } 은 반드시 필요하긴 하지만 정말 너무 귀찮습니다. try catch finally 가 그리울 때가 종종 있습니다.
     * go-mysql-driver 의 문제로 추정되지만, DB I/O라는 병목이 있는 실제 개발 환경에서는 그렇게 빠르게 동작하진 않았습니다. (여기 긱뉴스에 올린 글 참조: https://news.hada.io/topic?id=18048)
     * 암묵적인 인터페이스 적용은 아직도 좀 어색합니다. implements 나 extends 같은 키워드를 쓰기 싫었던 걸까요?
     * 포인터는 반가웠습니다. 특히 메모리 해제 시점을 고민하지 않아도 되는 점이!
     * 여러 타입들, 단순하지만 강력한 구조체, 슬라이스는 완소입니다. 키워드가 적어서 금방 배워서 써먹을 수 있는 점이 가장 좋습니다.
     * go 키워드로 마법처럼 경량 쓰레드를 쓸 수 있다니...! 행복합니다!

백엔드를 JS 런타임 기반에서 Go로 바꾼 후기...?

     * 이런 짓은 한 번으로 족합니다.
     * DB I/O 부분을 벤치마킹 하면서 여러 테스트들을 해봤는데, 성능 관점에서는 사실 JS 런타임이나 Go 바이너리나 큰 차이를 느끼기 어렵습니다. 예를 들어 JS 에서 많이 사용되는 이미지 라이브러리 sharp 같은 경우도 마찬가지로 libvips 라이브러리를 사용하고, DB I/O 없는 웹 애플리케이션은 없을테니까요.
     * 그럼에도, 저는 고생은 진탕 했지만 잘 바꿨다고 생각하고, 앞으로 백엔드는 Go 언어만 계속 사용할 생각입니다.
          + 메모리 사용량이 정말 의미 있는 수준으로 떨어집니다. 물론 Rust로 개발하면 더 최적화를 할 수 있겠지만, GC를 사용할 수 있는 대가로 이정도 수준이면 충분히 만족할 수 있습니다.
          + 언어 자체의 심플함이 정말 미쳤습니다. 외워야 할 키워드도 적고, 사용 패턴도 대부분 정해져 있으니 배우기도 쉽구요. (물론 잘 쓰는 건 다른 얘기입니다만) 원시 타입이 다양하게 준비되어 있는 점이 정말 마음에 들었습니다.
          + 무엇보다 만족스러운 점, 컴파일 이후 바이너리만 있으면 일단 실행이 된다는 점입니다. 백엔드 구동을 위해 추가로 무언가를 설치하고 그 걸로 코드를 다시 실행해야 하는 건 이제 더 이상 사양하고 싶습니다.

어떻게 사용하나?

     * Windows 환경은 아쉽게도 지원하지 않습니다. Linux/Mac 환경에서 바이너리 실행을 하면 됩니다.
     * 사용하시는 서버에 libvips 라이브러리가 사전에 설치되어 있어야 합니다. 바이너리가 해당 라이브러리의 기능들을 이용해서 이미지 처리를 하기 때문입니다.
     * 자세한 내용은 README.md 파일에 설명해 두었습니다.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

   아직 많이 부족하고, 여전히 다른 개발자분들의 고견을 기다리고 있습니다. 긱나이트 행사 때 우물쭈물한 제 자신이 원망스러울 정도입니다. 버그 제보나 개선 제안, 혹은 색다른 의견 모두 환영합니다.

   올해는 12월이 유난히 버거운데, 그래도 새해에는 좀 더 나은 미래가 있기를 소망해 봅니다. 긴 글 읽어주셔서 감사드립니다. 마지막으로 TSBOARD v1.0.0 출시 노트 링크를 아래에 공유드립니다.

   https://tsboard.dev/board/free/47

   다모앙에서 보고 왔습니다
   기대가 되는 CMS 입니다. 감사합니다

   저도 다모앙에서 저를 기억해주시는 분이 계셔서 깜짝 놀랬습니다. ㅎㅎ 기대에 부응할 수 있도록 더 노력하겠습니다! 😊

   유익해요!

   늦었지만 댓글 감사드립니다! 😃

     암묵적인 인터페이스 적용은 아직도 좀 어색합니다. implements 나 extends 같은 키워드를 쓰기 싫었던 걸까요?

   장단점이 있는데, 장점으로는 표준/외부 라이브러리 코드 수정 없이, 다른 사람이 만든 구현체를 사용하면서, 그 일부를 내가 만든 interface로 취급할 수 있다는 점이 장점으로 종종 느껴지더라고요. Java의 FunctionalInterface 처럼, 또는 duck typing을 컴파일 언어에 적용한 것 처럼요. 반대로 implements/extends를 반드시 선언하는 방식이면, 내가 만든 interface에 붙이려면 중간에 Adapter를 하나 구현해야 하는 것에 반해서요.

   단점으론, interface에 메서드를 추가/삭제/변경할 때에, 다른 정적 타이핑 언어 대비 에러 표시되는 위치가 달라서 좀 불편하죠.

   앗 그렇군요! 생각도 못한 장점이 있었네요. 에러 메시지는 다행히 gopls 였나? vscode의 go언어 확장이 잘 잡아줘서 빠트린 것이나 잘못 구현된 건 금방 찾을 수 있었습니다. 좀 더 익숙해지면 저도 언젠가 더 잘 쓰게 될 것 같습니다. ㅎㅎ 댓글로 설명해 주셔서 감사드립니다! 새해 복 많이 받으세요~!

   고생하셨네요! 저도 테스트 서버에 올려보겠습니다! 25년 새해에도 건승하세요!

   감사합니다! 테스트 해보시고 혹시 잘 안되시거나 궁금하신 점 있으시면 언제든지 말씀 부탁드리겠습니다! 새해 복 많이 받으세요~!

   응원합니다~ 👍🏻

   응원 감사드립니다!!! 새해 복 많이 받으세요~!

   응원합니다!

   감사합니다!!! 새해 복 많이 받으세요!!
"
"https://news.hada.io/topic?id=18497","Kheish - 노코드 멀티에이전트 LLM 플랫폼 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Kheish - 노코드 멀티에이전트 LLM 플랫폼

     * 복잡한 작업을 LLM을 활용하여 처리하는 오픈소스 다중 에이전트 오케스트레이션 플랫폼
     * 여러 전문화된 ""에이전트""와 유연한 워크플로우를 통해 파일 시스템 접근, 셸 명령 실행, RAG등 다양한 외부 모듈을 통합하여 대규모 코드베이스 또는 문서 작업을 효율적으로 지원
     * 주요 기능
          + 다중 에이전트 워크플로우: Proposer, Reviewer, Validator, Formatter와 같은 역할을 정의하고 YAML 기반 설정 파일로 순차적으로 실행
          + 유연한 모듈 통합: fs(파일 시스템), sh(셸 명령), vector_store(벡터 스토어) 등 다양한 모듈을 통합 가능
          + 대화형 프롬프트: system, user, assistant 역할의 대화 스타일 프롬프트로 맥락을 유지하며 명확한 지침 제공
          + 피드백 및 수정 루프: Reviewer 또는 Validator가 문제를 감지하면 수정 요청 후 해결될 때까지 반복
          + RAG 및 임베딩: 대규모 문서 관리 시 벡터 스토어를 활용해 관련 스니펫만 검색
          + 모듈형 및 확장 가능: 새 모듈과 에이전트를 쉽게 추가 가능하며 확장성 높은 아키텍처 제공
"
"https://news.hada.io/topic?id=18436","T * sin (t)' ≈ 장식된 크리스마스 트리 (2013)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   T * sin (t)' ≈ 장식된 크리스마스 트리 (2013)

        Hacker News 의견

     * Silvia Hao의 크리스마스 트리 애니메이션이 아름다움
          + 매년 T * sin(t) 크리스마스 트리가 게시되며, Silvia Hao의 수정 버전이 특히 인상적임
          + 링크: Wolfram Community
     * 간단한 명령어로 크리스마스 트리를 표현하는 방법 공유
          + 명령어: xmastree 5 9 2024
          + 소스 코드: GitHub
     * 2020년에 크리스마스 테마로 Bauble dweet를 만든 경험 공유
          + 코드 예시 제공
          + u(t) 함수가 초당 60회 호출되며, t는 경과 시간, c는 캔버스, x는 2D 컨텍스트임
     * Desmos에서 제공하는 크리스마스 관련 자료 공유
          + 링크: Desmos Calculator
     * Chaos Game 접근법을 사용한 bbcmicrobot 프로젝트 공유
          + 링크: bbcmicrobot
     * 다양한 크리스마스 트리 관련 프로젝트와 자료 링크 공유
          + Anvaka atree
          + JS1k 2010 Xmas Demo
          + 1KB 크리스마스 트리 제작 과정
     * GIF 크리스마스 트리 관련 자료 공유
          + 링크: SAS ODS Graphics
     * 포틀랜드의 Hopscotch에서 친구들과 함께한 경험 공유
          + ""quantum trampoline""을 시도하며 JavaScript 또는 p5로 작성되었는지 궁금해함
          + 링크: Behance
     * 'Traveling Santa Tour'를 통한 미국 수도 도시 여행 자료 공유
          + 링크: SAS ODS Graphics
"
"https://news.hada.io/topic?id=18402","데이터 엔지니어링 전망: Data Engineering Weekly의 2025년 예상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            데이터 엔지니어링 전망: Data Engineering Weekly의 2025년 예상

     * 2024년 데이터 엔지니어링의 주요 변화 : 생성형 AI의 급성장, 데이터 거버넌스의 성숙화, 효율성과 실시간 처리에 대한 집중
     * 2025년에는 이러한 흐름 위에서 데이터 세계를 변화시킬 다섯 가지 주요 트렌드가 예상됨

1. AI 컴퓨팅의 발전

     * NVIDIA가 시가총액 기준으로 세계 최대 기업으로 부상하며 세대에 한 번 있을법한 성장세를 보이고 있음
     * Google이 양자 컴퓨팅 분야에서 Willow를 통한 혁신적인 돌파구를 마련했다는 발표를 진행함
     * Amazon, Google, Microsoft 등이 AI 칩 시장에서 치열한 경쟁을 벌이고 있으며, Amazon의 Trainium2 칩이 대표적인 사례임
     * Neural Processing Units (NPUs)가 탑재된 PC와 디바이스들이 오프라인 AI 연산을 가능하게 하고 데이터 프라이버시를 향상시키고 있음
     * Google의 Edge TPU와 같은 혁신이 에너지 효율적인 엣지 컴퓨팅으로의 전환을 가속화하여 중앙 집중식 클라우드 인프라 의존도를 감소시키고 있음
     * 하이브리드 및 에너지 효율적인 컴퓨팅 아키텍처로의 전환이 AI 애플리케이션의 성능, 비용, 프라이버시 간의 격차를 해소하고 있음
     * 뇌의 구조를 모방한 Neuromorphic 칩이 비교할 수 없는 에너지 효율성과 디바이스에서의 비정형 데이터 처리 능력을 제공할 것으로 기대됨
     * 신경형태 및 양자 컴퓨팅 분야에서 상당한 발전이 이루어지며 AI 능력의 새로운 지평을 열고 있음
     * 이러한 AI 하드웨어의 발전이 2025년 이후 자연어 처리, 컴퓨터 비전, 로보틱스, 헬스케어 분야의 혁신을 주도할 것으로 전망됨

2. 도메인별 특화 언어 모델의 진화

     * Domain-specific language models (LLMs)
          + 특정 산업 분야의 데이터셋으로 학습된 도메인별 언어 모델이 각 산업에서 AI의 적용을 한 단계 발전시키고 있음
          + 의료, 금융, 법률, 제조 등의 산업에서 이러한 모델을 도입하여 복잡하고 맥락이 풍부한 과제들을 정확하게 해결하고 있음
          + 개별 산업의 세밀한 요구사항에 맞춰진 AI 기능을 통해 기업 전반의 업무 프로세스와 의사결정 과정에 혁신을 가져오고 있음
     * Small Language Models (SLMs)
          + 작은 규모의 언어 모델(Small Language Models, SLMs)이 비용 효율성과 적응성 측면에서 주목받고 있음
          + 특정 작업에 최적화된 SLM이 제한된 영역에서는 대규모 모델보다 더 우수한 성능을 보여주고 있음
          + 컴퓨팅 요구 사항이 줄어들고 배포 편의성이 개선된 SLM은 모든 규모의 조직이 리소스 집약적인 시스템을 관리해야 하는 부담 없이 정교한 언어 기능을 구현할 수 있도록 AI에 대한 액세스를 대중화할 것

3. AI 오케스트레이터와 다단계 추론

     * AI 오케스트레이터
          + 기업들이 다양한 특화 AI 에이전트를 도입함에 따라 AI 오케스트레이터가 AI 기반 데이터 스택의 중추적 역할을 담당하게 될 것으로 전망됨
          + 이러한 오케스트레이터는 지능형 제어 평면으로서 작업을 가장 적합한 에이전트에 동적으로 라우팅하고, 결과를 종합하여 실행 가능한 인사이트를 제공함
          + 깊이 있는 콘텐츠 이해력, 다국어 처리 능력, 다양한 데이터 타입 지원을 통해 여러 AI 에이전트를 일관된 워크플로우로 통합함
     * 다단계 추론의 발전
          + AI 모델이 단순한 질의응답을 넘어 복잡한 문제를 다단계 추론을 통해 해결하는 방향으로 진화하고 있음
          + 복잡한 작업을 작은 순차적 단계로 나누어 처리함으로써 더욱 정확하고 통찰력 있는 분석이 가능해짐
          + 이 기능을 통해 AI 에이전트는 코딩, 의료, 법률 및 기타 산업에서 롱테일 자동화 작업이 가능해 질 것
     * AI 오케스트레이터와 다단계 추론의 결합이 AI의 새로운 시대를 열어, 다양한 분야에서 문제 해결과 의사결정에 AI의 영향력이 크게 확대될 것

4. 차세대 데이터 통합 개발 환경 (Data IDE)

     * 조직들의 데이터 인사이트 수요 증가로 인해 데이터 엔지니어링 접근 방식이 근본적으로 변화하고 있음
     * 2025년에는 데이터 접근과 조작을 효과적으로 대중화하도록 설계된 새로운 유형의 통합 개발 환경(IDE)이 부상할 것으로 전망됨
     * lakebyte.ai와 같은 도구들이 이러한 혁신의 시작을 보여주고 있음
     * 핵심 특징
          + 심리스한 통합
               o 데이터 수집 및 변환부터 분석, 시각화, 배포까지 전체 데이터 라이프사이클을 하나의 통합된 환경으로 원활하게 통합
          + AI 기반 지능형 지원
               o 지능형 코드 완성, 자동화된 데이터 정리, 파이프라인 최적화를 위한 스마트한 제안을 제공하는 AI 기능이 탑재될 것
               o 코드 작성에 도움을 줄 뿐만 아니라 데이터의 의미를 이해하고 데이터를 변환하는 최적의 방법을 제안
          + Low-Code/No-Code 인터페이스
               o 시각적인 드래그 앤 드롭 인터페이스를 통해 코딩 경험이 부족한 사용자도 데이터 파이프라인을 구축하고 관리할 수 있음
               o 고급 사용자도 필요할 때 사용자 지정 코드를 작성할 수 있는 유연성을 제공
          + 협업 기능
               o 데이터 엔지니어, 데이터 과학자, 분석가, 비즈니스 사용자 간의 원활한 협업을 촉진
               o 공유 환경 내에서 데이터 프로젝트를 함께 작업할 수 있게 해줌
          + 내장된 데이터 거버넌스
               o 데이터 품질 검사, CI/CD 파이프라인, 프로덕션에 푸시하기 전에 통합 테스트를 실행, 액세스 제어 및 계보 추적이 개발 워크플로에 직접 통합
               o 데이터 거버넌스가 나중에 고려되지 않도록 보장
          + 다양한 데이터 소스와 포맷 지원
               o 데이터베이스, 데이터 레이크, 스트리밍 플랫폼, 클라우드 스토리지 등 광범위한 데이터 소스에 대한 기본 커넥터를 제공
               o 정형, 반정형, 비정형 데이터를 포함한 다양한 데이터 형식을 지원
          + 클라우드 네이티브 및 확장성
               o 클라우드 인프라의 확장성과 탄력성을 활용하여 클라우드에서 실행되도록 설계
     * 강력하고 직관적인 IDE를 통한 데이터 대중화로 'Citizen Data Engineers'가 등장할 것으로 예상됨
          + 도메인 전문가들이 전통적인 프로그래머가 아니더라도 데이터 워크플로우를 구축하고 관리할 수 있게 될 것
     * 기술팀과 비기술팀 간의 장벽이 허물어지면서 데이터 기반 혁신이 가속화될 것으로 기대됨
     * 2025년에는 Prompt Wrangling이 데이터 엔지니어에게 가장 중요한 기술이 될 것으로 예상됨

5. LakeDB의 부상: 레이크하우스 형식을 DB로 전환하기

     * 데이터 레이크, 데이터 웨어하우스, 데이터베이스 간의 경계가 점차 모호해지고 있음
     * 2025년에는 LakeDB라는 새로운 패러다임이 등장할 것으로 전망됨
     * LakeHouse 개념의 진화된 형태로, 데이터 레이크에 보다 강력한 데이터베이스 기능을 직접 통합하는 방식으로 발전하고 있음
          + 객체 스토리지의 확장성과 유연성을 유지하면서도 전통적인 데이터베이스의 성능과 사용 편의성을 제공함
     * 단순한 객체 스토리지 쿼리와 테이블 형식을 넘어서는 고급 기능을 제공함
          + 버퍼링, 캐싱, 인덱스, 쓰기 작업을 네이티브하게 관리하여 LakeHouse 수준의 성능과 효율성을 실현함
     * 현재의 LakeHouse는 데이터 수집, 변환, 쓰기 작업을 위해 Spark나 Flink 같은 외부 처리 프레임워크에 의존하고 있음
          + 이러한 의존성으로 인해 복잡성이 증가하고 지연 시간이 발생함
          + 구현 방식에 따라 성능이 일관되지 않고 상호운용성 문제가 발생할 수 있음
     * LakeDB는 이런 기능을 포함할 것:
          + 네이티브 쓰기 기능
               o 기반의 객체 스토리지에 직접 최적화된 쓰기 경로를 제공하여 일반적인 작업에서 외부 처리 엔진의 필요성을 제거함
               o 최근 S3 조건부 쓰기 기능이 추가되어 클라우드 객체 스토리지가 LakeDB의 쓰기 경로를 지원할 것으로 예상됨
          + 지능형 버퍼링과 캐싱
               o 데이터 버퍼링과 캐싱을 지능적으로 관리하여 읽기와 쓰기 성능을 모두 최적화함
          + 트랜잭션 관리
               o S3 조건부 쓰기와 고급 메타데이터 관리 기술을 활용하여 강력한 트랜잭션 관리 기능을 제공함
               o 데이터 일관성과 무결성을 보장하는 내장된 메커니즘을 제공함
          + 지능형 쿼리 성능
               o DuckDB와 같은 인프로세스 OLAP 엔진을 통합하여 소규모 데이터 처리의 효율성을 향상시킴
               o 고급 인덱싱과 쿼리 최적화를 통해 쿼리 효율성을 개선함
               o 사용자가 데이터 규모에 따른 쿼리 전략을 별도로 수립할 필요 없이 자동으로 최적의 전략을 선택함
          + 자동화된 데이터 관리
               o 데이터 계층화, 압축, 기타 최적화 기능이 자동화되어 운영을 단순화하고 비용을 절감함
          + 벡터 검색 및 확장 기능
               o 벡터 데이터베이스와 유사도 검색을 위한 내장 지원 기능을 제공함
               o 각 컬럼별로 최적의 인덱싱 기법을 선택적으로 적용하여 읽기와 쓰기 성능을 최적화할 수 있음
               o Hudi의 보조 인덱스 지원과 Delta의 가변 데이터 타입과 같은 기능이 이미 LakeHouse 형식에서 시작되고 있음
     * LakeDB 개념은 아직 초기 단계이지만, 2025년에는 이 분야에서 상당한 혁신이 이루어질 것으로 예상
     * 기존의 LakeHouse 형식은 더 많은 LakeDB와 유사한 기능을 통합하도록 발전할 수 있으며, 처음부터 이 비전을 가지고 구축된 새로운 솔루션이 등장할 수도 있음

6. Data Mesh & Contract 기반 제로 ETL과 연합 아키텍처

     * 데이터 계약과 메시에 대한 회의적인 시각이 있음에도 불구하고, 더 많은 기업들이 데이터 메시 아키텍처를 도입할 것으로 예상됨
     * 특히 기업 내 데이터 교환이 필요한 경우에 데이터 메시의 활용이 증가할 것으로 전망됨
     * 제로 ETL과 연합 쿼리 아키텍처가 이러한 변화를 주도하고 있음
     * 제로 ETL
          + 데이터 이동과 중복을 최소화하는 방향으로 기술이 발전하고 있음
          + 데이터 가상화, 연합 쿼리 엔진, 데이터 공유 프로토콜 등의 기술이 복잡한 ETL 프로세스 없이도 데이터 접근과 분석을 가능하게 함
          + 기존의 복잡하고 시간이 많이 소요되는 ETL 프로세스가 단순화될 것으로 예상됨
     * 데이터 공유가 핵심적인 고려사항으로 부상하고 있음
          + 안전하고 효율적인 데이터 공유 프로토콜과 플랫폼을 통해 파트너, 고객, 경쟁사와의 협력이 가능해짐
          + Delta Sharing과 같은 표준의 채택이 증가하고 지속적인 발전이 예상됨
     * 미래 전망
          + 도메인 팀들이 자체 데이터 파이프라인을 소유하고 데이터 제품을 생성하며 조직 경계를 넘어 데이터를 원활하게 공유할 수 있게 될 것으로 예상됨
          + 기업들이 자사 데이터로 LLM을 학습시키는 비중이 증가함에 따라 데이터 공유의 중요성이 더욱 커질 것으로 전망됨
          + 데이터 공유 모델을 통해 민첩성 향상, 인사이트 도출 시간 단축, 보다 분산화되고 확장 가능한 데이터 관리 접근 방식이 실현될 것으로 기대됨

결론

     * AI의 부상과 새로운 IDE를 통한 데이터의 대중화가 가속화되고 있음
     * 데이터 엔지니어 역할의 진화와 LakeDB의 등장이 데이터 관리 방식을 근본적으로 변화시키고 있음
     * 제로 ETL과 연합 아키텍처가 뒷받침하는 데이터 메시 원칙이 주류로 자리잡고 있음
     * 동적인 환경에 따라서, 데이터 엔지니어의 역할이 그 어느 때보다 중요해지고 있음
          + 인사이트의 설계자, 데이터 품질의 수호자, 혁신의 동력으로서 핵심적인 위치를 차지하게 될 것으로 전망됨
          + 데이터 기반 세계의 진화하는 요구사항에 적응하며 새로운 가치를 창출할 것으로 기대됨
"
"https://news.hada.io/topic?id=18400","느린 배포로 인한 회의느린 배포로 인한 회의 (2015)

    느린 배포가 회의를 유발함

     * 소프트웨어 설계는 인간 관계의 연습임. 소프트웨어 개발에 사용하는 다른 기술들도 마찬가지임.
     * ""코드를 배포할 수 없을 만큼 회의가 많다""는 엔지니어의 불만은 배포 용량의 한계로 인해 발생할 수 있음.
     * Chuck Rossi는 Facebook에서 한 번의 배포에 처리할 수 있는 변경 사항의 수가 고정되어 있다고 관찰함. 더 많은 변경 사항을 원하면 더 많은 배포가 필요함.
     * Facebook은 지난 5년 동안 배포 속도를 주간에서 일일, 하루 세 번으로 증가시켰으며, 모바일 앱 배포 주기도 6주에서 4주, 2주로 줄였음.
     * ""배포당 변경 사항""은 비탄력적인 지표로, 개선은 가능하지만 시간이 걸림. 변경 사항이 현재 임계값을 초과하면 변경 사항 수를 줄여야 함.
     * 조직적 오버헤드를 증가시키면 긍정적 피드백 루프가 시작됨: 작업량 감소 -> 압력 증가 -> 실수 증가 -> 배포당 변경 사항 감소 -> 오버헤드 증가 -> 작업량 감소.
     * 더 많은 변경 사항을 처리하려면 배포 용량을 늘려야 함. 배포 주기를 줄이거나, 배포당 변경 사항을 늘리는 방법이 있음.
     * 오버헤드를 줄이려는 시도는 결국 회의로 이어질 수 있음. 이는 너무 많은 코드를 배포하려는 시도를 막아줌.

    소프트웨어 설계: Tidy First?

     * 소프트웨어 설계는 인간 관계의 연습임. 기술을 향상시키는 것이 관계를 개선하는 방법 중 하나임.

   이 의견 좋네요

        Hacker News 의견

     * 배포의 위험을 줄이는 방법으로 테스트와 조직적 특성을 개선하는 것이 중요하지만, 유일한 접근법은 아님
          + 배포당 변경 사항의 수를 줄이는 것이 더 효과적임
          + 작은 변경 사항을 자주 배포하면 더 빨리 가치를 전달하고 작은 실패를 경험할 수 있음
          + 카나리 배포 및 점진적 롤아웃과 결합하면 배포가 더 이상 큰 위험이 아님
          + DORA 연구와 Accelerate, The Phoenix Project, The Goal에서 이 접근법을 지지함
     * ""소프트웨어 문해력""이라는 개념을 설명하려고 함
          + 회사가 코드로 운영될 수 있는 능력을 의미함
          + 모든 의사 결정자가 코드에 집중하지 않으면 소프트웨어 문해력이 부족한 것임
          + 회사는 새로운 개념으로 운영될 수 있어야 함
     * CI 파이프라인에서 테스트 시간이 길어져 회복에 집중하기로 결정함
          + 테스트를 단순화하고 회복에 집중하여 배포 전략으로 카나리를 사용함
          + 이 접근 방식이 신선한 경험이었음
     * 조직은 배포 개선을 방해할 수 있음
          + 관료주의와 싸우는 것은 대부분의 조직에서 불가능함
          + 느린 배포가 문제이지만 유일한 문제는 아님
     * 큰 변화에 대한 두려움으로 인해 테스트가 증가함
          + 회의가 목표가 되는 경향이 있음
          + 비기술적 관리와 기술적 변화를 이끄는 방법에 대한 조언이 필요함
     * CloudFormation이 느린 이유에 대한 질문
     * 마이크로서비스는 배포 빈도를 수평적으로 확장할 수 있게 함
     * 소프트웨어 성능, 즉 인간의 성능이 중요함
          + 빠른 반복과 위험 감소를 위해 빠른 테스트 자동화가 필요함
     * 빠른 배포는 사건 대응 회의를 유발함
"
"https://news.hada.io/topic?id=18430","인스트럭트-한국 2025 1월 Meetup 소식: "언어모델을 연구하는 나의 아이디어와 도전들"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         인스트럭트-한국 2025 1월 Meetup 소식: ""언어모델을 연구하는 나의 아이디어와 도전들""

   2024년 인스트럭트한국 커뮤니티 https://instruct.kr 는 LogicKor 리더보드 출시와 함께 약 700 여명의 연구자들이 자발적으로 자신의 성과를 공유하는 대한민국 최대의 오픈소스 언어모델 커뮤니티 중 하나가 되었습니다.

   ​2025년 새해를 맞이하여 인스트럭트한국 디스코드 커뮤니티 회원 여러분의 연구 동향과 소식을 공유하고 네트워킹을 할 수 있는 자리를 마련해보고자 합니다. 이번 밋업의 주제는 ""언어모델을 연구하는 나의 아이디어와 도전들"" 입니다. 다른 사람들의 경험도 듣고, 자신의 연구 아이디어도 공유하고, 다양한 의견을 가진 사람들이 교류하기를 희망 합니다.

   ​행사는 2025년 1월 25일 (토요일) 14~18시

   ​장소는 강남역 인근 논스 (역삼동 624-17) 입니다.

   ​문의사항: https://instruct.kr

   ​장소 후원: 논스 커뮤니티 (https://nonce.community/)

   ​발표자 소개
   ​더 많은 발표자가 업데이트 예정 입니다.

   ​고석현 (Sionic AI)
   ​Scala JVM 언어로 자연어 처리에서 진행하는 이야기를 들려 줍니다. 특히 production level 에서 파이썬 기반 딥러닝 코드를 JVM 언어로 포팅하여 서빙하는 경험에 대해 이야기 합니다.

   ​김지수 (kuotient, 올거나이즈): Qwen2.5 한국어 모델 개발기
   ​""Qwen2.5 한국어 모델 개발기""를 통해 혁신적인 언어 모델 개발 과정을 공유합니다. 특히 m-ArenaHard에서 37.60이라는 인상적인 성능 향상을 이끈 과정이 주목됩니다. SFT, Merging, Alignment 등 전반적인 학습 파이프라인을 다루며, 레이어 교체와 On-policy 전략 도입 등 국내 최초로 시도된 기술적 혁신도 함께 소개됩니다. 8B 이하 모델 중 최고 성능을 기록한 비결을 상세히 들려줄 예정입니다.

   ​이승유 (dopeornope, 마커 AI): LLM 가이던스 및 Quantization
   ​""LLM 가이던스 및 Quantization""을 주제로, 급속도로 발전하는 LLM 기술의 최신 동향을 조명합니다. 최근 활발히 연구되는 LLM 가이던스와 quantization 기술의 개념과 발전 방향성에 대한 통찰력 있는 분석을 제공합니다.

   ​유용상: KRX 금융 언어 모델 경진대회 후기
   ​""KRX 금융 언어 모델 경진대회 후기""를 통해 도메인 특화 모델 개발의 실전 노하우를 공유합니다. MCQA 벤치마크 성능 향상을 위한 domain adaptation과 continual pretraining 전략, 그리고 safety auditing에 대한 깊이 있는 내용을 다룹니다.

   ​최선웅: RAG 개발 프로젝트 이야기
   ​실제 RAG 개발 프로젝트의 생생한 현장 경험을 공유합니다. 특히 프로젝트 진행 과정에서 발견된 문제점들을 솔직하게 짚어보고, 이를 통해 얻은 교훈과 개선 방향을 제시할 예정입니다.

   ​장영준 (yjoonjang) : 한국어 임베딩 모델
   ​""한국어 임베딩 모델"" huggingface.co/nlpai-lab 을 주제로 다양한 임베딩 모델의 특징과 실제 학습 과정에서의 핵심 포인트를 공유합니다. 임베딩 모델의 선택부터 학습까지, 실무에 바로 적용할 수 있는 인사이트를 전달할 예정입니다.

   ​정세민 (Sionic AI) : Graph RAG로 Recsys 만들기 - Storm fooding
   ​""Graph RAG로 Recsys 만들기 - Storm fooding""을 주제로, 그래프 기반 RAG 시스템을 활용한 추천 시스템 개발 경험을 공유합니다. 시스템 설계부터 구현까지의 전체 과정을 다룰 예정입니다.

   ​김동규 (Jeffrey Kim, AutoRAG) : 깃허브 스타 3천개 받아보기
   ​""깃허브 스타 3천개 받아보기""라는 주제로, AutoRAG 오픈소스 프로젝트의 성장 스토리를 들려줍니다. 프로젝트의 시작부터 성공적인 오픈소스화까지의 여정과 앞으로의 발전 방향을 공유합니다.

   ​maywell (instruct.kr, Wanot AI)
   ​TBD
"
"https://news.hada.io/topic?id=18434","Litestack - 1개의 Ruby 젬으로 전체 데이터 인프라를 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Litestack - 1개의 Ruby 젬으로 전체 데이터 인프라를 구축

     * Ruby 및 Ruby on Rails 애플리케이션에서 웹 애플리케이션 데이터 인프라를 위한 올인원 솔루션을 제공하는 Ruby gem
     * SQLite의 강력한 기능과 내장형 특성을 활용하여 다음과 같은 기능을 하나의 패키지로 제공함
          + SQL 데이터베이스: 완전한 SQL 지원
          + 캐시: 빠른 캐시 기능
          + 잡 큐: 견고한 작업 큐
          + 메시지 브로커: 신뢰할 수 있는 메시지 전달
          + 풀텍스트 검색 엔진: 강력한 검색 기능
          + 메트릭 플랫폼: 애플리케이션 성능 분석 도구

Litestack의 주요 장점

     * 성능 및 효율성:
          + 별도의 서버 및 데이터베이스가 필요한 기존 방식과 달리, Litestack은 임베디드 데이터베이스와 캐시를 통해 메모리 및 CPU 사용량을 줄임
     * 간소화된 개발 프로세스:
          + 간단한 인터페이스로 개발 과정이 단순화됨
     * 비용 절감:
          + 별도의 서버 유지 비용 감소
     * 통합 솔루션:
          + 별도의 도구 및 서비스 없이 하나의 gem으로 다양한 기능 제공

Litestack가 대체하는 서비스들

   Ruby on Rails 애플리케이션에서 다음과 같은 서비스를 대체 가능함:
     * 데이터베이스 서버 (예: PostgreSQL, MySQL)
     * 캐시 서버 (예: Redis, Memcached)
     * 잡 프로세서 (예: Sidekiq, Goodjob)
     * Pub/Sub 서버 (예: Redis, PostgreSQL)
     * 풀텍스트 검색 서버 (예: Elasticsearch, Meilisearch)

Fiber 기반 IO 프레임워크와의 호환성

     * Fiber 기반 IO 프레임워크(예: Async 또는 Polyphony)가 감지되면, Litestack은 캐시와 큐를 위한 백그라운드 워커를 자동으로 Fiber로 전환
     * 이를 통해 CPU와 메모리 사용량을 추가로 줄이며, 프레임워크의 기존 구조와 원활하게 작동
"
"https://news.hada.io/topic?id=18489","인텔의 4억 7,500만 달러 실수: 펜티엄 디비전 버그의 실리콘 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                인텔의 4억 7,500만 달러 실수: 펜티엄 디비전 버그의 실리콘 문제

인텔의 펜티엄 FDIV 버그

     * 배경: 1993년, 인텔은 고성능 펜티엄 프로세서를 출시하였음. 펜티엄은 이전의 인텔 486 프로세서보다 빠른 부동소수점 나눗셈 알고리듬을 포함하여 많은 개선점을 가졌음. 그러나 1년 후, 수학 교수인 Nicely가 쌍둥이 소수의 역수를 연구하던 중 펜티엄이 부동소수점 나눗셈을 수행할 때 잘못된 결과를 생성하는 문제를 발견하였음.
     * 버그의 발견과 영향: 인텔은 이 문제를 ""매우 사소한 기술적 문제""로 간주했으나, 이 버그는 큰 미디어 이슈가 되었음. 인텔은 결국 모든 결함이 있는 펜티엄 칩을 교체하기로 결정하였고, 이는 회사에 4억 7천 5백만 달러의 비용을 초래하였음.
     * 버그의 원인: 펜티엄의 나눗셈 알고리듬은 조회 테이블을 사용함. 인텔은 1994년에 이 버그의 원인이 스크립트 오류로 인해 테이블에서 다섯 개의 항목이 누락되었다고 발표했으나, 실제로는 수학적 실수로 인해 16개의 항목이 누락되었음. 이 중 다섯 개의 누락된 항목이 FDIV 버그를 유발하였음.
     * 부동소수점 숫자의 개요: 부동소수점 숫자는 매우 큰 숫자와 매우 작은 숫자를 표현할 수 있음. 인텔의 8087 부동소수점 보조 프로세서 칩은 IEEE 754 표준을 개발하는 데 기여하였고, 펜티엄을 포함한 대부분의 컴퓨터가 이 표준을 구현하였음.
     * SRT 나눗셈: 펜티엄은 SRT 알고리듬을 사용하여 나눗셈을 수행하며, 이는 표준 이진 나눗셈보다 두 배 빠름. SRT 알고리듬은 비정상적인 접근 방식을 사용하여 몫 자릿수를 선택하는 것을 용이하게 함.
     * 조회 테이블의 구조: 펜티엄의 조회 테이블은 2048개의 항목을 포함하며, 다섯 개의 항목이 누락되어 FDIV 버그를 유발함. 이 테이블은 프로그래머블 로직 배열(PLA)로 구현되어 있음.
     * 버그의 수학적 경계: 나눗셈 알고리듬의 핵심 단계는 부분 나머지를 제수로 나누어 몫 자릿수를 얻는 것임. 이 과정에서 잘못된 q 값이 선택되면 알고리듬이 복구할 수 없음.
     * 캐리-세이브와 캐리-룩어헤드 덧셈기: 펜티엄의 나눗셈 회로는 캐리-세이브 덧셈기를 사용하여 덧셈과 뺄셈을 효율적으로 수행함. 이 덧셈기는 FDIV 버그를 유발하는 데 중요한 역할을 함.
     * 버그 수정: 인텔은 테이블의 모든 사용되지 않는 항목을 2로 채워 버그를 수정하였음. 이는 잘못된 항목에 접근할 가능성을 제거하고, PLA 방정식을 단순화하여 PLA를 더 작게 만듦.

        Hacker News 의견

     * 작성자는 Pentium 버그에 대해 질문이 있으면 답변할 준비가 되어 있음
          + Intel의 대응이 흥미로웠으며, 모든 사용자의 프로세서를 교체하지 않아 부정적인 언론이 많았음
          + Amazon Colorsoft의 경우, 결함을 조용히 교체하여 문제를 해결한 사례를 언급함
          + Apple AirPods Pro의 크랙 문제도 조용히 교체하여 해결한 사례를 언급함
     * Intel의 백서에서는 일반 사용자가 27,000년에 한 번 문제를 겪을 것이라고 주장했으나, IBM은 고객이 며칠마다 문제를 겪을 수 있다고 분석함
          + Intel은 단일 사용자를 고려한 반면, IBM은 지원 요청을 고려한 것으로 보임
          + 대량의 요청을 처리할 때, 작은 확률의 문제도 자주 발생할 수 있음
     * 실제 사용 중 버그를 발견한 사람은 한 명뿐이었음
          + 학생들에게 잘못된 계산기를 제공한 연구를 언급하며, 오류를 인식하는 것과 영향을 받는 것은 다르다고 설명함
          + 대부분의 사람들은 컴퓨터의 출력이 정확한지 확인하지 않음
     * 고객의 CPU를 제어할 수 없었기 때문에, 라이브러리에 특별한 코드를 추가하여 문제를 해결해야 했던 경험을 공유함
     * Intel의 테이블 생성 알고리즘 문제를 지적하며, PR에서 이를 사소한 문제로 설명했지만 실제로는 더 큰 문제였음을 강조함
     * Intel이 테이블의 미사용 항목을 모두 2로 채운 이유에 대해 궁금해함
          + 더 안전한 방법은 5개의 항목만 수정하는 것이었을 것이라고 언급함
          + 수정된 테이블이 더 간단한데, 처음부터 그렇게 하지 않은 이유를 궁금해함
"
"https://news.hada.io/topic?id=18422","제38회 카오스 커뮤니케이션 콩그레스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          제38회 카오스 커뮤니케이션 콩그레스

     * 38th Chaos Communication Congress
          + 38번째 Chaos Communication Congress(38C3)는 2024년 12월 27일부터 30일까지 함부르크에서 개최됨. 이 행사는 Chaos Computer Club(CCC)와 자원봉사자들이 주최하는 연례 4일간의 기술, 사회, 유토피아에 관한 회의임.
          + Congress는 정보 기술을 포함한 다양한 주제에 대한 강연과 워크숍을 제공하며, 기술 발전이 사회에 미치는 영향에 대한 비판적이고 창의적인 태도를 장려함.
          + 1984년부터 커뮤니티에 의해 조직되어 왔으며, 모든 종류의 참여를 환영함. 자원봉사, 핸즈온 및 자율적으로 조직된 이벤트를 설정하고 호스팅하거나 자신의 프로젝트를 다른 해커들에게 발표하는 방식으로 기여할 수 있음.
     * 정보 채널
          + 정보 페이지
               o 현재 읽고 있는 사이트로, 모든 관련 정보를 짧고 간결한 형태로 게시하고자 함. 새로운 정보가 제공되거나 변경될 때마다 페이지가 업데이트되며, Congress에 대한 정보의 단일 출처로 기능함.
          + 이벤트 블로그
               o 이벤트 블로그와 이 정보 페이지는 행사에 대한 주요 정보 채널임. 새로운 정보가 있을 때마다 블로그 게시물과 함께 점진적으로 더 많은 정보를 게시할 예정임. 업데이트를 놓치지 않으려면 블로그의 RSS 피드를 구독할 것을 권장함.
     * 소통 채널 및 연락처
          + 참가자 및 조직 팀과의 연락 및 채팅 방법에 대한 정보는 소통 페이지에서 확인할 수 있음.

        Hacker News 의견

     * Joscha Bach의 ""From Computation to Consciousness"" 시리즈의 새로운 강연에 관심이 있음. 이전 강연을 즐겼기 때문에 이번에도 확인할 예정임
          + 생물학 관련 과학 강연도 흥미로워 보이지만, 주제에 대한 이해와 지식이 부족함을 느낌. 생성적 AI와 생물학 연구의 융합에 대한 혁신적인 작업인지 아니면 AI 열풍을 타려는 시도인지 구별하기 어려움. 관련 경험과 지식을 가진 사람이 강연이 가치 있는지 추천해주길 바람
     * 이 컨퍼런스의 거의 모든 강연을 좋아함. 주류는 아니지만 많은 지식과 정보를 전달함. 연말은 항상 CCC 강연을 시청하는 데 할애함
     * 라이브 스트림은 여기에서 제공됨
     * 일정은 여기에서 확인 가능함. 많은 강연이 라이브 스트림과 주문형으로 제공됨
     * 티켓 시스템이 형편없었음. 올해는 정말 불공평했음
     * ""일정을 보려면 JavaScript를 활성화하거나 NoJS 일정을 확인하세요.""라는 디자인이 좋음. 너무 자주 사이트가 기본 정보를 얻기 위해 JS를 임시로 허용하도록 강요함
     * 이 컨퍼런스에 가고 싶다는 생각을 계속함. 강연이 종종 훌륭함
     * 올해 CFP가 10일밖에 되지 않아 놓친 것이 아쉬움
     * 매년 CCC를 시청하는 것을 좋아하지만 라이브로 보는 경우는 드뭄. 올해 강연을 기다리는 동안 질문을 던짐. 일부 강연이 독일어로 진행되는 것이 불편한지, 아니면 독일어로 진행되는 것이 불편하다고 느끼는 것이 불편한지 궁금함
          + 모든 언어를 좋아하지만, 젊은 독일어 사용자가 영어에 능숙하고 언어 선택에 실용적임을 기쁘게 생각함. 그러나 언어를 노드 수가 증가할수록 유용성이 커지는 네트워크로 간주할 수도 있음
          + 데이터 보호와 연령 확인에 관한 강연을 보고 싶지만 언어 선택으로 인해 도달 범위가 제한되는 것은 아쉬움. 다른 온라인 이벤트처럼 다국어 재스트림을 제공하지 않음
     * ""Hacking the RP2350"" 같은 적절한 해커 강연이 많음. ""윤리와 RP2350 해킹"" 또는 ""성, 젠더와 RP2350 해킹"" 같은 강연이 줄어든 것이 기쁨
"
"https://news.hada.io/topic?id=18458","개발자를 위한 Chrome의 2024년 요약 (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     개발자를 위한 Chrome의 2024년 요약 (번역)

     * Gemini를 활용한 Chrome 내장 AI로 강력한 기능 제공
     * WebAssembly(Wasm)와 WebGPU 개선으로 온디바이스 AI 성능 향상
     * View Transition API로 더 부드럽고 연결된 내비게이션 구현
     * CSS 팝오버와 앵커 포지셔닝으로 자바스크립트 없이 상호작용 오버레이 구현
     * Speculation Rules API로 거의 즉각적인 페이지 로드 구현
     * Interaction to Next Paint(INP)가 새로운 Core Web Vital로 도입
     * Autofill로 더 원활한 온라인 결제 제공
     * AI 기반 솔루션으로 더욱 강력해진 Chrome DevTools
     * Baseline 2024: 크로스 브라우저 웹 기능의 새 시대
     * 주요 브라우저들이 Interop 2024를 통해 더 많은 기능을 Baseline으로 추가
     * 함께 만들어가는 웹의 미래

   3rd Party Cookie 제거가 취소된 것도 추가해봅니다.
   https://news.hada.io/topic?id=16015
"
"https://news.hada.io/topic?id=18483","iOS 18 및 macOS 15에서 Apple Photos의 원격 데이터 전송 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             iOS 18 및 macOS 15에서 Apple Photos의 원격 데이터 전송 기능

     * Apple Photos의 새로운 기능
          + iOS 18과 macOS 15에서 Apple Photos에 새로운 설정인 ""향상된 시각적 검색"" 기능이 기본적으로 활성화되어 있음
          + 이 기능은 주로 Apple 뉴스 미디어에서 언급되지 않았으며, Apple 자체에서도 거의 언급되지 않았음
     * 향상된 시각적 검색 기능
          + 이 기능은 랜드마크나 관심 지점을 사용하여 사진을 검색할 수 있게 해줌
          + 사용자의 기기가 사진 속 장소를 Apple 서버의 글로벌 인덱스와 비공개로 매칭함
          + 동형 암호화와 차등 프라이버시를 적용하고, IP 주소를 숨기는 OHTTP 릴레이를 사용함
          + iOS나 iPadOS 기기에서는 설정 > 앱 > 사진에서 이 기능을 끌 수 있으며, Mac에서는 사진 앱의 설정 > 일반에서 끌 수 있음
     * Apple의 프라이버시 접근 방식
          + Apple은 프라이버시를 기본적인 인권으로 간주하며, 사용자 프라이버시 보호를 위한 원칙을 가지고 있음
          + 기기 내에서 처리 과정을 수행하여 Apple이나 다른 엔티티와 공유되는 데이터 양을 최소화하려고 함
          + 서버 조회를 비공개, 효율적, 확장 가능하게 하기 위해 여러 기술을 결합하여 구현함
     * 개인적인 관점과 우려
          + 사용자가 요청하지 않은 기능이 Apple에 의해 자동으로 활성화된 것에 대한 불만
          + 컴퓨팅 프라이버시는 기기 내에서 모든 것이 이루어질 때만 보장된다고 생각함
          + Apple의 소프트웨어는 프라이버시와 보안 취약점이 많으며, 이는 Apple의 보안 릴리스 노트로 증명됨
          + 사용자가 자신의 프라이버시 침해 위험에 대한 허용 범위를 결정해야 한다고 주장함
     * 사용자 권리와 Apple의 정책
          + Apple이 사용자 동의 없이 기능을 활성화함으로써 사용자의 선호를 무시한다고 주장
          + iOS에서는 Little Snitch와 같은 소프트웨어를 사용할 수 없으며, 이는 사용자가 스스로를 보호하는 것을 방해한다고 느낌
     * 결론
          + ""당신의 iPhone에서 일어나는 일은 iPhone에 남아 있습니다""라는 광고가 거짓임을 지적
          + Apple의 정책이 사용자 프라이버시와 보안을 보호하기보다는 방해한다고 생각함

        Hacker News 의견

     * Apple의 기술적 세부사항을 이해하는 사용자가 설명한 내용임
          + 클라이언트 측 벡터화: 사진을 로컬에서 처리하여 비가역적인 벡터 표현을 준비함
          + 차등 프라이버시: 벡터에 노이즈를 추가하여 역추적이 불가능하게 함
          + OHTTP 릴레이: 제3자를 통해 전송되어 Apple이 IP 주소를 알 수 없게 함
          + 동형 암호화: 서버에서 암호화된 데이터로 조회 작업을 수행함
     * 사용자가 프라이버시 침해 위험에 대한 자신의 허용 범위를 결정해야 한다고 주장함
          + Apple이 사용자 동의 없이 기능을 활성화하여 사용자와 그들의 선호를 무시한다고 비판함
     * Apple과 Google의 '노출 알림 시스템'에 대한 반발을 떠올리게 한다고 언급함
          + 기술의 효과를 평가하지 않고 프라이버시 침해에 대한 반응을 보인다고 지적함
          + Apple이 사용자 동의를 먼저 구해야 한다고 동의함
     * Apple Photos에서 가족을 이동시키고, immich와 같은 자체 호스팅 옵션을 사용한다고 설명함
          + LibrePhotos도 기능이 많지만 immich만큼 세련되지 않았다고 언급함
     * 기기가 동형 암호화와 차등 프라이버시를 사용하여 기본적으로 켜져 있는 것에 대해 불만을 표함
     * iCloud Photos를 사용하지 않는데도 기본적으로 켜져 있어 Apple의 잘못된 결정이라고 비판함
     * Mac Mini M4가 충분히 저렴하고 성능이 좋아 오프라인 및 온라인 용도로 각각 하나씩 구매할 수 있다고 언급함
     * macOS에서는 Little Snitch를 사용하여 Apple 소프트웨어의 외부 연결을 차단할 수 있지만, iOS에서는 불가능하다고 설명함
          + Android에서는 NetGuard가 ""로컬 VPN""을 사용하여 트래픽을 차단할 수 있다고 언급함
     * macOS 15에서 기본적으로 켜져 있는 설정에 놀랐다고 설명함
          + ""Apple이 검색을 개선하도록 돕기"" 설정이 사용자 식별 없이 정보를 수집하여 검색 결과를 개선한다고 설명함
"
"https://news.hada.io/topic?id=18485","Fish 4.0: Theseus의 Fish","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Fish 4.0: Theseus의 Fish

#9512 - Rewrite It in Rust

     * Fish 쉘이 Rust로 재작성됨. C++ 코드가 전혀 없고 거의 100% 순수 Rust로 구성
     * 약 2년 전 Fish를 C++에서 Rust로 전환하는 PR(#9512)을 열었음
     * Fish는 과거에도 C에서 C++로 전환한 경험이 있지만, Rust로의 전환은 훨씬 더 큰 프로젝트였음

C++에서의 문제점

     * 도구 및 컴파일러 차이: C++의 도구는 좋지 않으며, 최신 C++ 표준을 채택하는 것은 패키저와 기여자들에게 복잡함을 초래함.
     * 스레드 안전성: Fish의 내부 명령어 실행은 현재 직렬로 이루어지며, 비동기 프롬프트나 비차단 완성 기능을 추가하기 위해서는 병렬 처리가 필요함.
     * 언어의 복잡성: C++의 헤더 파일, 템플릿, 문자열 처리 등이 복잡하고 안전하지 않음.
     * 커뮤니티: C++는 많은 기여자를 끌어들이지 못함.
     * 의존성 문제: 특정 C 라이브러리(curses)의 불안정성과 빌드 문제로 인해 번거로움이 있었음

Rust 선택 이유

     * 재미와 흥미: Fish는 취미 프로젝트로, 재미있고 흥미로운 언어가 필요함. Rust는 기여자들에게 더 매력적임.
     * 훌륭한 도구: rustup으로 간단히 컴파일러를 설치 가능하며, 오류 메시지가 명확함
     * 에르고노믹스: 명시적인 use 시스템과 Option 및 Result 같은 안전한 기능 제공
     * 좋은 언어 설계: Rust의 포인터와 옵션 시스템은 C++보다 훨씬 안전함
     * 병렬 처리 지원: Rust의 Send와 Sync는 안전한 병렬 처리를 가능하게 함.
     * 의존성 관리: YAML, JSON 등 외부 형식 지원을 쉽게 추가할 수 있음

플랫폼 지원

     * 대부분의 주요 플랫폼(macOS, Linux, BSD 등)이 지원되며, Windows의 네이티브 지원은 목표가 아님
     * Fish는 UNIX 중심의 쉘로, Windows 환경보다는 UNIX API와 스크립팅 언어에 초점을 맞춤

포팅 과정

     * Fish는 ""Theseus의 물고기"" 방식으로 C++에서 Rust로 단계적으로 전환함. 컴포넌트를 하나씩 Rust로 이전하며, C++와 Rust가 공존하도록 설정
          + 테세우스의 배(Ship of Theseus) : “한 배의 모든 나무 판자를 새것으로 교체한다면, 그것은 여전히 같은 배인가?”
     * FFI 활용: autocxx를 사용하여 C++와 Rust 간의 바인딩을 생성하고, 한 번에 하나의 컴포넌트를 포팅함.
     * 대규모 포팅: 특정 부분(예: I/O 처리 등)은 단독으로 이전하여 복잡한 FFI 코드를 줄임
     * 도구 개선: 포팅 과정에서 Rust와 C++ 간 상호 운용성 문제를 해결하기 위해 autocxx를 커스터마이징

타임라인

     * 2023년 1월: 초기 PR 열림
     * 2024년 1월: C++ 코드 완전히 제거
     * 2024년 12월: Fish 4.0 베타 버전 출시

Rust와의 마찰

     * 이식성 문제: Rust의 #[cfg(...)] 접근 방식이 낮은 수준에서 시스템 차이를 처리하는 데 비효율적임
     * 로컬라이제이션: Rust의 포맷 문자열은 컴파일 시간에 확인되지만 번역 불가능
     * 빌드 시간: LTO와 디폴트 릴리스 빌드 사용으로 인해 빌드 시간이 길어질 수 있음
     * 포팅 과정에서 몇 가지 실수를 저질렀지만, 대부분 쉽게 해결됨.

주요 성과

     * curses 제거: terminfo 데이터베이스를 Rust crate로 대체하여 글로벌 상태 및 빌드 문제 해결
     * 단일 실행 파일: 모든 종속성을 포함한 Fish 바이너리 생성 가능
          + Fish 패키지를 자체 설치 가능하게 만들어, 사용자가 쉽게 사용할 수 있게 함
     * 성능 개선: 메모리 사용 최적화 및 새로운 기능 추가 용이

제한점

     * CMake를 완전히 제거하지 못함
     * Cygwin 지원 중단: Rust 타겟이 없기 때문
     * Windows에서는 여전히 WSL을 통해서만 실행 가능

현재와 미래

     * Fish 4.0은 성공적으로 포팅되었으며, 성능이 향상됨.
     * Fish는 여전히 UNIX 셸로, Rust로의 전환을 통해 새로운 기능을 추가할 수 있게 됨.
     * 이제 Rust로 완전히 전환된 코드베이스를 보유하고 기존보다 유지 보수 및 기능 추가가 더 쉬워짐. Rust의 장점을 활용하여 새로운 기능 추가 가능
     * 이번 전환은 성공적으로 완료되었으며, 기여자와 사용자 모두에게 긍정적인 영향을 미침

   fish의 사용성이 부럽지만 호환성, 성능 등의 문제 때문에 zsh를 최대한 fish와 비슷하게 설정하여 사용하고 있습니다. 바뀐 fish는 어떨지 기대되네요 👀

   친근한 인터랙티브 쉘 - Fish

        Hacker News 의견

     * Fish 팀에 축하를 전하며, 프로젝트의 세부 사항이 흥미로움. C++에서 Rust로 완전히 전환한 가장 큰 프로젝트인지 궁금함. 다른 프로젝트에 유용한 교훈이 될 수 있음
          + Fish는 C++과 Rust의 하이브리드 프로그램으로 출시되지 않았음. 최종 테스트 단계가 완료되지 않았기 때문임
          + C++ 기능을 Rust에 추가하는 동기를 이해하지 못한 사람들이 있지만, 이는 좋은 사례 연구가 될 수 있음
          + 새로운 Rust 코드를 C++ 코드베이스에 작성할 수 있으면 좋겠다는 의견이 있음
     * Rust의 주요 불만 사항은 버전 감지 지원임. 기능 감지가 배포판, 웹 브라우저, 컴파일러에 더 나음
          + 버전/이름 감지는 Chrome과 IE가 Mozilla인 척하는 이유이며, Clang이 GCC인 척하는 이유임. 기능 감지는 이러한 문제를 일으키지 않음
     * 포트의 목표 중 하나는 CMake 제거였으나 실패함. Cargo는 빌드에는 훌륭하지만 설치에는 단순함. Fish는 많은 스크립트와 문서가 있어 Cargo의 사용 사례에 맞지 않음
          + Cargo가 이러한 사용 사례로 확장되기보다는 다른 도구가 구현되기를 선호함
     * 몇 년 전 bash에서 zsh로 전환했을 때 만족했으나, 새로운 컴퓨터에서 fish를 사용해보니 zsh가 번거롭고 구식으로 느껴졌음. fish를 몇 주간 사용해볼 것을 추천함
     * Cygwin을 지원하지 않는 것이 아쉬움. Rust가 Cygwin을 빌드 대상으로 지원하기를 희망함
     * Fish 팀의 노력에 감탄하며, 프로젝트가 어떻게 발전할지 기대됨
     * 배포 패키저들이 Rust-fish를 Debian 지침에 따라 패키징하는 것이 얼마나 수월한지 궁금함
     * Fish 팀에 축하를 전하며, 최고의 쉘이 더 나아졌다는 의견임. 프로젝트의 태그라인을 ""Finally, a shell for the 00s!""로 업데이트하는 것이 어떨지 제안함
     * zsh에서 Fish로 전환한 후 설정이 간단해졌으며, Fish가 기대대로 작동하여 다시 변경할 생각이 없음
     * cfg! 매크로는 true/false로 컴파일되므로, if 가드 내의 코드는 컴파일되어야 함. my_feature 없이 컴파일하면 실패할 수 있음
     * Fish는 자동 완성 및 구문 강조를 위해 스레드를 사용하며, 언어에 동시성을 추가하는 장기 프로젝트가 있음
"
"https://news.hada.io/topic?id=18472","플라스틱리스트 보고서 – 베이 에어리어 식품 내 플라스틱 화학물질 데이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                플라스틱리스트 보고서 – 베이 에어리어 식품 내 플라스틱 화학물질 데이터

프로젝트 배경

     * 6개월 전, 일상적인 100가지 음식에서 플라스틱 화학물질의 존재를 테스트하는 프로젝트를 시작함.
     * 내분비 교란 화학물질(EDC)에 대한 관심이 증가하면서 프로젝트가 시작됨.
     * 플라스틱 성능을 향상시키기 위해 사용되는 화학물질 중 일부는 인간에게 호르몬 작용을 하며, 배아 및 성인에게 다양한 영향을 미칠 수 있음.

연구 방법론

     * 4명의 팀을 구성하여 화학물질 테스트 방법을 학습하고, 100개 이상의 실험실에 연락하여 경험과 품질 기준을 충족하는 실험실을 찾음.
     * 300개의 식품 제품을 테스트하고 결과를 검증하여 공개함.
     * 테스트한 화학물질은 주로 플라스틱과 관련된 18가지 화학물질로, 이들은 인간 건강에 악영향을 미칠 수 있음.

주요 발견

     * 테스트한 음식의 86%에서 플라스틱 화학물질이 발견됨.
     * 특히 아기 음식, 임산부 보충제, 유제품, 아이스크림 등에서 화학물질이 발견됨.
     * 가공이 덜 된 음식이 더 적은 화학물질을 포함하고 있음.
     * 뜨거운 음식은 포장 용기에 45분 동안 있을 때 플라스틱 화학물질의 수준이 34% 더 높음.

안전 기준 및 규제

     * 유럽 식품 안전청(EFSA) 및 미국 환경 보호국(EPA)의 안전 기준을 참조하여 결과를 평가함.
     * BPA의 경우, EFSA는 최근 안전 기준을 20,000배 낮춤.
     * 규제 기관 간의 안전 기준이 일관되지 않으며, 일부 화학물질에 대한 안전 기준이 설정되지 않음.

건강에 미치는 영향

     * 내분비 교란 화학물질은 저용량에서도 호르몬 시스템에 영향을 미칠 수 있음.
     * 특히 태아 및 아기 발달에 부정적인 영향을 미칠 수 있음.
     * 연구에 따르면, 임산부의 프탈레이트 노출이 남성 생식 발달에 영향을 미칠 수 있음.

결론 및 제안

     * 플라스틱 화학물질의 안전 기준은 현대 과학과 데이터를 기반으로 재평가되어야 함.
     * 특히 아기와 임산부에게 미치는 영향을 고려하여 규제를 강화할 필요가 있음.
     * 추가 연구를 통해 플라스틱 화학물질의 건강 영향을 더 명확히 이해해야 함.

        Hacker News 의견

     * McDonalds와 Taco Bell이 미리 만들어진 음식 중에서 가장 안전한 선택이라는 의견이 있음. 이 두 회사는 자원을 가지고 있어 실험실에서 음식 테스트를 할 수 있는 능력이 있음. 다른 회사들은 유기농과 건강식으로 라벨링하여 PR 문제를 해결함. DEHT라는 새로운 화학물질에 대한 연구가 부족하지만, DEHP와 비교하면 Google Scholar에서 10% 정도의 검색 결과만 나옴
     * 집에서 역삼투압 정수기를 사용하여 마시는 물과 요리용 물에서 미세 플라스틱과 기타 오염 물질을 줄이고 있음. Buyer’s Guide에서 추천하는 제품을 사용 중임
     * 베이 지역에서 판매되는 퇴비 제품을 주의 깊게 살펴보고 있음. 도시 소비자 측면에서는 플라스틱 조각이 포함된 퇴비 수집통이 있음. 농촌 지역에서는 플라스틱 끈과 그물망이 사용되고 있으며, 이것들이 퇴비 스트림에 포함됨
     * 미세 플라스틱의 영향에 대한 연구가 있는지 궁금해하는 의견이 있음. 인체가 자연적으로 이를 완화할 수 있는지에 대한 의문이 있음
     * 뜨거운 것과 플라스틱을 결합하는 것을 피하려고 노력 중임. 물고기가 미세 플라스틱을 축적하는 것은 놀랍지 않음. 스팸과 같은 가공육도 마찬가지임. 수돗물이 가장 무서웠음
     * 음식 속의 산이 측정된 프탈레이트 디에스터를 모노에스터로 분해할 수 있다는 의견이 있음. 실제 프탈레이트 수준이 보고된 것보다 높을 수 있음
     * 유리병에 담긴 아기 음식을 구매하여 미세 플라스틱 노출을 줄이려 했으나, 플라스틱 폐기물만 줄였다는 사실을 알게 됨
     * 연구 결과의 중요성은 EFSA의 BPA 섭취 기준을 믿는지 여부에 90% 의존함. 투명하게 공개하는 것이 좋음
     * 버블티 결과로 인해 다시는 마시고 싶지 않다는 의견이 있음
     * 호주에서도 유사한 테스트가 가능했으면 좋겠다는 의견이 있음. 독립적인 고품질 테스트에 접근할 수 있는 구독 서비스가 있으면 좋겠음
"
"https://news.hada.io/topic?id=18511","'Obelisks': 인간 소화계에서 발견된 새로운 생명체 클래스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'Obelisks': 인간 소화계에서 발견된 새로운 생명체 클래스

인간 소화계에서 발견된 새로운 생명체 클래스 'Obelisks'

     * 연구 배경
          + 연구자들이 인간 내부의 미생물 군집을 조사하던 중, 새로운 종류의 바이러스와 유사한 객체를 발견함.
          + 이 객체들은 기존의 생물학적 에이전트와 유사한 구조나 서열이 없어, 바이러스가 아닌 새로운 생명체 그룹일 가능성이 제기됨.
     * Obelisks의 특징
          + Obelisks는 대칭적인 막대 모양의 RNA 구조를 가지며, 유전적 서열은 약 1,000개의 뉴클레오타이드로 구성됨.
          + 이 짧은 길이 때문에 이전에는 발견되지 않았을 가능성이 있음.
          + 연구팀은 540만 개의 유전자 서열 데이터셋을 분석하여 약 30,000개의 다양한 Obelisks를 식별함.
          + 인간 미생물 군집의 약 10%에서 발견되었으며, 특정 데이터셋에서는 환자의 구강 샘플의 50%에서 나타남.
     * Obelisks의 분포와 숙주
          + Obelisks는 인간의 다양한 신체 부위에 존재하며, _Streptococcus sanguinis_라는 구강 미생물에서 특정 유형의 숙주 세포를 분리함.
          + 다른 Obelisks의 숙주는 아직 밝혀지지 않았으나, 일부는 박테리아에 존재할 가능성이 있음.
     * Obelisks의 유전자 코드와 기능
          + Obelisks는 새로운 종류의 단백질인 Oblins을 암호화하는 유전자를 포함함.
          + 이 단백질은 Obelisks의 복제 과정에 관여할 가능성이 있음.
          + RNA 바이러스와 달리 단백질 껍질을 형성하는 유전자는 없으며, 플라스미드보다 크기가 큼.
     * 연구의 결론
          + Obelisks는 바이러스가 아닐 수 있으며, RNA 플라스미드와 유사할 가능성이 있음.
          + 연구는 아직 동료 검토를 거치지 않았으며, _bioRxiv_에 사전 공개됨.

        Hacker News 의견

     * 공동 저자로서 이 연구가 Cell에 게재되었음
          + 토론토 대학교와 협력하여 진행 중인 연구 프로그램의 일부로, Virus-Viroid Hybrids와 Zeta-Elements 논문도 참고할 수 있음
          + 계산 생물학이 지구 생물 다양성에 대한 이해를 혁신적으로 확장하고 있음
          + Zeta-elements, Ambiviruses, Obelisks는 시작에 불과하다고 믿음
          + RNA 기반 생명체 연구소에서 열정적인 개발자, 박사후 연구원, 대학원생을 모집 중임
     * 연구자들이 새로운 바이러스 유사 객체를 발견했음
          + 처음에는 혼란스러웠으나, 기술적 의미의 ""Class""가 아님을 이해함
     * 장의 작동 방식에 대한 새로운 퍼즐 조각을 발견하게 되어 기쁨
          + 면역, 신경퇴행, 암 등에 대한 이해가 가능해질 것임
     * 연구가 아직 동료 검토를 받지 않았으므로 제목이 주장에 비해 자신감이 과함
     * 생명은 일반적으로 번식 능력으로 정의되는데, 이는 숙주의 세포 기계에 의존함
          + 이들이 알려진 유용성을 가지는지, 아니면 일부 쓸모없는 DNA가 관련되어 있는지 궁금함
     * 놀랍고 놀라운 발견임
     * 기사가 1월에 작성되었는데, 연구가 이제 저널에 게재되었는지 궁금함
     * RNA 세계의 잔재일 가능성이 있음
     * 해당 페이지의 개인정보 보호 정책 및 쿠키 대화 상자가 어두운 패턴임
"
"https://news.hada.io/topic?id=18424","AMD GPU의 LLM 추론 경쟁력 강화의 LLM 추론 경쟁력 강화 (2023)

     * MLC-LLM의 중요성
          + MLC-LLM은 ROCm을 사용하여 AMD GPU에서 LLM을 컴파일하고 배포할 수 있게 함
          + AMD Radeon™ RX 7900 XTX는 NVIDIA® GeForce RTX™ 4090의 80%, RTX™ 3090Ti의 94% 성능을 제공함
          + Vulkan 지원을 통해 SteamDeck과 같은 AMD APU 장치에서도 LLM 배포 가능
     * 배경
          + 오픈 소스 LLM의 확산 이후 많은 LLM 추론 솔루션이 등장함
          + 대부분의 성능 좋은 추론 솔루션은 CUDA 기반이며 NVIDIA GPU에 최적화되어 있음
          + 컴퓨팅 가용성에 대한 높은 수요로 인해 더 넓은 범위의 하드웨어 가속기를 지원하는 것이 유용함
          + AMD는 잠재적인 후보임
     * 하드웨어 및 소프트웨어 논의
          + AMD RX 7900 XTX는 NVIDIA RTX 4090 및 RTX 3090 Ti와 비교할 만한 스펙을 가짐
          + 모든 모델은 24GB 메모리를 가지고 있어 동일한 크기의 모델을 수용 가능
          + FP16 성능은 4090이 7900 XTX보다 2배, 3090 Ti가 1.3배 더 높음
          + RX 7900 XTX는 RTX 4090보다 40% 저렴함
          + AMD가 과거에 뒤처진 이유는 하드웨어가 아닌 소프트웨어 지원 부족 때문임
     * ROCm을 위한 머신 러닝 컴파일
          + 머신 러닝 컴파일(MLC)은 머신 러닝 작업의 최적화를 자동화하는 신기술임
          + MLC-LLM은 Apache TVM Unity 기반으로, 다양한 백엔드에 대해 고성능의 범용 배포를 제공함
          + Python 기반 워크플로우를 통해 언어 모델을 컴파일하고 GPU 커널의 레이아웃과 스케줄링을 최적화함
     * AMD GPU 및 APU를 위한 MLC
          + AMD GPU를 지원하는 여러 방법: ROCm, OpenCL, Vulkan, WebGPU
          + ROCm 스택은 AMD가 최근 추진하는 것으로, CUDA 스택과 유사한 구성 요소를 많이 포함함
          + Vulkan은 최신 그래픽 표준으로, GPU 장치 전반에 걸쳐 가장 넓은 범위의 지원을 제공함
          + MLC는 자동 코드 생성을 지원하여 각 GPU 커널을 재구성할 필요 없이 다양한 방법을 지원함
     * MLC Python 패키지를 사용한 벤치마크
          + Llama 2 7B 및 13B 모델을 4비트 양자화로 벤치마크함
          + 단일 배치 추론 성능은 ROCm 5.6 출시와 함께 NVIDIA 4090의 80% 속도에 도달함
     * SteamDeck에서 Vulkan을 사용한 실행
          + AMD APU가 장착된 SteamDeck에서 Vulkan을 사용하여 실행 가능
          + ROCm에서 GPU VRAM은 BIOS에서 4GB로 제한되지만, Mesa Vulkan 드라이버는 통합 메모리를 사용하여 16GB까지 확장 가능
     * 논의 및 향후 작업
          + 하드웨어 가용성은 생성 AI 시대에 중요한 문제로 부각됨
          + ML 컴파일은 하드웨어 백엔드 전반에 걸쳐 고성능 범용 배포를 가능하게 함
          + 소비자용 GPU에 대한 연구는 클라우드 GPU에도 일반화될 수 있음
          + MLC 범용 배포 흐름을 기반으로 솔루션을 구축하도록 커뮤니티에 권장함
     * 최종 결론
          + 머신 러닝 시스템 엔지니어링은 지속적인 문제임
          + NVIDIA는 여전히 혁신을 통해 이 분야를 선도하고 있으며, 새로운 하드웨어와 소프트웨어 발전으로 변화할 것으로 예상됨
          + Python 기반 ML 컴파일 개발 흐름 덕분에 ROCm 최적화 지원을 몇 시간 만에 얻을 수 있었음
"https://news.hada.io/topic?id=18457","Sherlock - 400+개 소셜 네트워크에서 사용자 이름으로 소셜 미디어 계정 추적하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Sherlock - 400+개 소셜 네트워크에서 사용자 이름으로 소셜 미디어 계정 추적하기
     * 링크 및 감사
          + MLC LLM 배포에 대한 자세한 가이드는 프로젝트 페이지를 참조
          + MLC LLM의 소스 코드는 공식 GitHub 저장소에서 확인 가능
          + Apache TVM 커뮤니티와 TVM Unity 컴파일러 개발자들에게 감사의 뜻을 전함


     * Sherlock Project는 사용자 이름을 기반으로 400개 이상의 소셜 네트워크에서 소셜 미디어 계정을 찾는 오픈 소스 프로젝트
        Hacker News 의견
     * 설치 : PyPI(pip), Brew, Apt, Dnf, Docker 및 GitHub에서 직접 실행 가능
     * sherlock user123 또는 sherlock user1 user2 user3 로 사용자를 검색하면 찾은 계정이 각각의 txt 파일에 기록됨

     * csv/xlsx 출력 가능하며, 특정 사이트만 검색하게 제한 가능

        Hacker News 의견
     * AMD 소비자용 GPU(RX7900XTX)의 성능은 데이터센터용 GPU(MI300X)와 다르며, 이는 RDNA와 CDNA 아키텍처의 차이 때문임. 2026년쯤 AMD가 UDNA 아키텍처를 출시할 예정임. CentML에서는 AMD CDNA와 HIP 지원을 Hidet 딥러닝 컴파일러에 통합 중임

     * 고유한 사용자 이름을 사용하는 것이 추적을 어렵게 함
     * 여러 스타트업들이 AMD GPU를 활용하여 Nvidia의 독점을 깨려는 시도를 하고 있음. Felafax, Lamini, tensorwave, SlashML 등이 이에 해당함. 일부는 CUDA의 장벽이 18개월 정도라고 주장함
          + 건강 관련 주제를 연구할 때는 특히 개인정보 보호에 신경 써야 함
     * TVM과 MLC 작업을 하던 팀이 OctoAI에서 NVIDIA로 합류했음
     * 과도하게 설계된 도구가 사용자 지능을 모욕하고 불필요한 드라마를 생성함
     * Phi-4 Q6을 7950x와 7900XT에서 사용해본 결과, CPU만으로도 매우 빠르며, AMD의 가정 내 사용 가능성을 확인함
          + 필요한 데이터는 특정 GitHub URL의 데이터임
     * ML 커뮤니티가 CUDA에서 벗어나지 않는 이유를 이해하지 못하겠음. CUDA는 폐쇄적이고 크로스 플랫폼이 아님. AI/LLM 발전으로 크로스 플랫폼 전환이 더 빨라야 했음
     * 전문적인 소셜 존재와 익명성을 원하는 사람들에게 계정이 연결되지 않았는지 확인하는 데 유용함
     * 중고 3090은 $600-900이며, 7900보다 성능이 좋고 CUDA 덕분에 더 다재다능함
          + 새로운 익명 계정을 열 때 이 도구로 사용자 이름이 사용 가능한지 확인하는 것이 좋음
     * 흥미로운 도구이지만 오탐지를 생성함
     * 효율성을 높이는 노력이 중요함. 가격 효율성뿐만 아니라 전력과 컴퓨팅 효율성도 필요함. llama.cpp를 사용하여 일반 CPU에서 간섭을 실행해보고 있음
          + 존재할 수 없는 무작위로 생성된 사용자 이름을 검색해도 결과가 나옴
     * 비침해적인 사용 방법이 무엇인지 궁금함
     * Modular는 AMD GPU에서 93% GPU 활용도를 달성했다고 주장하며, 내년 초 공식 미리보기 출시 예정임. Nvidia GPU 성능에 대한 긍정적인 피드백을 보고 낙관적임
     * UI 디자인 요소에 불만이 있음
          + 검색어 입력 필드가 실제로는 버튼으로 작동하여 혼란을 줌
"
     * Sherlock을 사용하여 MeetUp에서만 연결된 동료를 찾는 데 성공함
          + 자신의 사용자 이름으로 계정 인벤토리를 쉽게 확인할 수 있는 훌륭한 도구임
     * 1990년대 후반부터 온라인에서 실명을 사용하지 않음
          + 온라인 발언을 점점 더 검열하게 됨
          + 맥락을 벗어난 게시물이 법적 문제로 이어질 수 있음
          + 인터넷 활동이 익명성을 잃을 수 있다고 가정하고 발언을 제한함
     * pipx와 일반 venv로 처음 실행 시 오류가 발생함
"
"https://news.hada.io/topic?id=18503","Libsearch - JavaScript용 간단한 인덱스 없는 전체 텍스트 검색","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Libsearch - JavaScript용 간단한 인덱스 없는 전체 텍스트 검색

     * JavaScript에서 인덱스 없이 텍스트 검색을 수행하는 간단한 라이브러리
     * 다양한 프로젝트에서 사용 가능하며, TF-IDF 기반의 결과 정렬과 빠른 검색 성능을 제공
     * FlexSearch나 lunr.js만큼의 기능은 없지만, text.indexOf(query) > -1보다 훨씬 빠르고 효율적임
     * 적은 데이터셋을 다루는 간단한 웹 애플리케이션에서 유용

주요 기능

     * 인덱스 없이 검색: 검색을 위해 사전 인덱싱 과정이 필요하지 않음
     * 다양한 검색 옵션 지원:
          + 대소문자 구분
          + 단어 검색, 접두어 검색, 자동완성 스타일 검색 지원
     * 빠른 성능: 몇 천 개의 항목도 실시간으로 검색 가능
     * TF-IDF 순위 제공: 검색 결과를 ""가장 관련성 높은"" 순서로 정렬

  API

     * search 함수는 두 개의 필수 인자와 두 개의 선택적 인자를 받음.
     * items: 검색할 항목 리스트. 일반적으로 문자열 배열이나 문자열 속성을 가진 객체 배열임.
     * query: 검색할 문자열 쿼리.
     * by (선택적): 항목에서 문자열 값을 반환하는 함수. 기본값은 x => String(x)임.
     * options (선택적): 검색 옵션을 포함하는 객체.
          + caseSensitive: 대소문자 구분 여부. 기본값은 false.
          + mode: 불완전한 쿼리 단어를 매칭하는 방식.
               o mode: 'word': 완전한 단어만 매칭.
               o mode: 'prefix': 단어의 접두사로 매칭.
               o mode: 'autocomplete': 마지막 쿼리 단어가 불완전할 수 있는 하이브리드 모드.

  사용 예제

import { search } from 'libsearch'; // Node.js 환경
const { search } = window.libsearch; // 브라우저 환경

// 기본 검색
search(articles, 'berkeley cali', a => a.title);
// => [{ title: 'Weather in Berkeley, California' }]

// 단어 단위 검색: “California”는 “California”만 검색
search(articles, 'california', a => a.title, { mode: 'word' });

// 대소문자 구분 검색: 대문자 “W”로 검색
search(articles, 'W', a => a.title, { caseSensitive: true });

// 빈 검색어 처리: 전체 결과 반환
search(articles, '', a => a.title);

검색 방식

     * libsearch는 사전 구축된 검색 인덱스 없이 JavaScript 객체 리스트에서 빠르게 전체 텍스트 검색을 수행
     *
         1. 쿼리를 정규식으로 변환
          + 현대 JavaScript 엔진의 최적화된 정규 표현식 엔진을 활용하여 쿼리 문자열을 정규 표현식 필터로 변환하여 검색 수행
          + 예: “Uni of California” → (^|\W)Uni($|\W), (^|\W)of($|\W), (^|\W)California
     *
         2. 정규 표현식 매치와 문서 길이에 기반한 TF-IDF 랭킹 계산
          + 문서의 단어 수 대신 문서의 길이(문자 수)를 사용하여 TF-IDF를 근사화

   이슈가 하나 있긴하네요..

   관심있어서 살펴봤는데 3년째 유지보수가 안되고 있네요... 과연 라이브러리가 완벽해서 유지 보수를 안하고 있는걸까요...? 의문이 생깁니다.

        Hacker News 의견

     * 115줄의 TypeScript는 가벼운 편이지만, 중요한 기능이 누락될 수 있음
          + 다양한 JavaScript 대안의 크기, 기능 세트, 성능을 비교할 수 있는 링크 제공
          + 몇 년 전 uFuzzy를 선택한 경험 공유
     * 검색 기능을 쉽게 구현할 수 있다는 점을 깨달음
          + 매우 똑똑한 정규 표현식 엔진임
          + 모호한 검색(예: Califnia 대신 California)을 어떻게 처리하는지는 불분명하지만, 구현을 이해하는 것이 흥미로움
     * 자바스크립트 앱에서 Fuse를 자주 사용함
          + 많은 앱 내 검색이 오타를 처리하지 못해 답답함
     * FlexSearch나 lunr와 같은 도구를 사용하면 수천 개의 항목에 대한 인덱스 구축이 매우 빠름
          + 사용자가 검색 인터페이스를 열 때 인덱스를 구축하고, 사용 후에는 잊어버려도 괜찮음
     * 인덱스가 없는 것의 이점은 무엇인가에 대한 질문
          + 작고 간단한 프로그램을 선호함
          + grep과 비슷해 보임
"
"https://news.hada.io/topic?id=18473","더 많은 사람들이 친구 근처로 이사해야 할 필요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      더 많은 사람들이 친구 근처로 이사해야 할 필요성

     * 친구와 가까이 사는 것의 장점
          + 친구와 가까이 사는 것은 자녀 돌봄, 즉흥적인 만남, 가정용품 공유 등의 이점이 있음.
          + Toby Rush와 그의 친구들은 캔자스 시티에서 가까이 살면서 이러한 이점을 누리고 있음.
          + 이들은 잔디 깎기, 수영장 사용, 아이 돌보기 등을 공유하며 서로의 삶에 깊이 관여하고 있음.
     * 외로움의 전염병
          + ""외로움의 전염병""은 사회적 문제로, 디지털화와 고립이 증가하면서 심화됨.
          + COVID-19 팬데믹은 이러한 문제를 악화시켰으며, 많은 사람들이 친구와의 연락을 잃음.
          + Rush와 그의 친구들은 이러한 문제를 해결하기 위해 같은 도시에 모여 살기로 결정함.
     * MiniHood와 Live Near Friends
          + Phil Levin은 친구와 가까이 사는 것의 중요성을 강조하며 Live Near Friends 플랫폼을 시작함.
          + 이 플랫폼은 사람들이 서로 가까운 거리에 살 수 있도록 돕는 것을 목표로 함.
          + MiniHood는 Zillow의 멀티플레이어 버전으로, 친구들이 함께 살 집을 찾을 수 있도록 지원함.
     * 공동체에서의 육아
          + Levin은 친구와 가까이 사는 것이 육아에 큰 도움이 된다고 강조함.
          + 친구들과의 공동체 생활은 육아를 지원하고, 부모들이 자유롭게 시간을 보낼 수 있게 함.
          + 공동체 생활은 전통적인 핵가족의 고립감을 줄이고, 상호 지원을 가능하게 함.
     * 친구와의 가까운 생활의 장점
          + 친구와 가까이 사는 것은 계획 없이도 쉽게 만날 수 있는 장점이 있음.
          + 공동체 생활은 일상적인 일들을 함께 하며 자연스럽게 친밀감을 형성할 수 있음.
          + 이러한 생활 방식은 외로움을 줄이고, 삶을 더 쉽게 만들어 줌.
     * 결론
          + 친구와 가까이 사는 것은 삶을 더 풍요롭게 하고, 서로를 지원할 수 있는 네트워크를 형성함.
          + 이러한 생활 방식은 외로움과 고립을 줄이고, 더 나은 삶을 가능하게 함.

   ㄹㅇ..

        Hacker News 의견

     * 지적 추구가 중요하지 않은 환경에서 자라서 대도시에서 계속 배워야 하는 필요성을 느낌. Alain Bertaud는 도시의 큰 기여는 예측 불가능성과 다양한 사람들과의 만남이라고 언급함
          + 북미에서는 개인주의적 문화가 강해 교외의 단독 주택을 선호하는 경향이 있음
          + 개인적으로는 뒷마당 없는 집에서 자랐고, 이웃과 잘 지내며 행복한 어린 시절을 보냈음
     * 라틴 아메리카 출신으로서 가족과 친구들로부터 멀리 떨어져 여러 번 이사하는 것이 낯설게 느껴짐
          + 현대 미국 청년들이 고립감을 느끼고 강한 관계를 형성하지 못하는 이유가 이러한 이동성 때문이라고 생각함
          + 미국 문화에서는 가족과 가까이 사는 것을 부정적으로 보는 경향이 있음
     * 고등학교와 대학 친구들과 여전히 연락을 유지하지만, 물리적으로 멀리 떨어져 있어 자주 만나지 못함
          + 친구들과의 관계를 위해 가까이 이사하는 것은 아내에게 큰 희생이 될 것임
     * 친구들은 변하지 않는 존재로, 직업이나 주거지는 유연한 것으로 보는 시각이 이상하게 느껴짐
          + 외로움을 해결하기 위해 새로운 사람들과의 관계를 형성하는 것이 중요함
     * 가족 중심의 LA 지역에서 친구들과 가까이 살며 육아가 훨씬 쉬워졌음
          + 친구들과의 근접성이 다른 결정의 단점을 상쇄함
     * 새로운 장소에서 장기적인 우정을 형성하는 것의 가치를 간과하지 말아야 함
          + 원래 살던 도시로 돌아가지 않을 것이며, 현재의 대도시에서 사회적 관계를 형성하는 데 많은 시간을 투자했음
     * 어린 시절 친구들이 교외의 큰 집을 공동으로 구입해 함께 살았고, 이후 같은 건물에서 공동체 생활을 함
          + 너무 가깝지도 멀지도 않은 적절한 균형을 찾았음
     * 경제적 압박으로 인해 사람들이 서로 가까이 살게 되는 현상은 긍정적이지만, 강제적인 경제적 의존은 바람직하지 않음
          + 더 나은 경제적 독립성을 제공해야 함
     * LiveNearFriends 웹사이트는 Bay Area에만 국한되어 있으며, 많은 사람들이 접근하기 어려운 가격대의 주택을 제공함
          + 친구들과 가까이 살고 싶지만, 경제적 현실이 이를 어렵게 만듦
     * 평생 동안 생각해온 것을 읽는 것이 반가움
          + 삼촌과 친구들은 유치원 때부터 같은 지역에서 살며, 항상 서로를 지원함
          + 친구들과의 관계가 돈과 명예를 추구하면서 대륙 간에 흩어지게 됨
"
"https://news.hada.io/topic?id=18394","기생 SEO 사이트들이 Google의 수동 사이트 평판 페널티를 극복하고 계속 사업을 진행중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          기생 SEO 사이트들이 Google의 수동 사이트 평판 페널티를 극복하고 계속 사업을 진행중

     * Google 알고리듬 업데이트 이후, Finixio/Clickout의 웹사이트들이 대규모 페널티를 받으며 트래픽과 순위가 크게 하락
     * 이러한 페널티에도 불구하고, Finixio는 빠르게 시스템을 재구축하여 이전 방식으로 운영을 지속
     * Finixio/Clickout Media는 리다이렉트와 클로킹을 사용하여 구글을 속이고 페널티에서 벗어났음. 이는 잘 개발된 기생 SEO 시스템의 능력을 보여줌.

페널티와 영향

     * Techopedia:
          + 기술 관련 사이트로 시작했으나, 현재는 도박과 암호화폐와 관련된 콘텐츠 중심
          + 2024년 11월~12월 사이 트래픽이 64% 하락
          + 상위 5위에 있던 페이지들이 검색 순위에서 크게 하락
     * ReadWrite & Business2Community:
          + 두 사이트 모두 트래픽과 키워드 순위가 급락
          + 페널티로 인해 사이트의 3/4 이상 트래픽 손실

페널티 대응 전략

    1. 문제 콘텐츠 삭제:
          + 도박 관련 페이지 제거, 그러나 내부 링크는 여전히 남아있는 경우도 있음
    2. 301 리디렉션 활용:
          + 페널티를 받은 도메인에서 동일 네트워크의 다른 사이트로 권한을 전송
          + 기존 콘텐츠를 단순히 다른 도메인으로 이동시켜 수익을 지속

빠른 복구 및 운영 지속

     * 몇 일 만에 삭제했던 도박 콘텐츠를 복구
     * 검색 순위가 완전히 회복되진 않았으나 일부 페이지는 페널티 이전 수준으로 복귀

Cloaking 및 Geo-blocking 기법

     * 특정 국가에서는 콘텐츠를 숨기거나 수정된 콘텐츠를 제공
     * 예: Techopedia의 스웨덴 도박 관련 페이지는 스웨덴 IP에서만 보임
     * Cloaking을 통해 Google의 수동 검토를 회피

Finixio의 네트워크 확장

     * 새로운 도메인 추가:
          + 기존 웹사이트를 매입하거나 새로운 사이트를 생성하여 네트워크 확장
          + Cardplayer.com, Pokerscout.com 등 주요 사이트에 도박 관련 하위 디렉토리 추가
     * CoinTelegraph의 iGaming 섹션:
          + Finixio 소유는 아니지만, 협력 관계를 통해 도박 관련 콘텐츠를 게시
          + Forbes Marketplace와 유사한 운영 방식

Google 알고리즘과 Parasite SEO

     * Google의 도메인 권위 우선 정책이 Parasite SEO를 촉진
     * 주제 권위(topic authority) 의 중요성이 감소하며, 소규모 사이트는 순위 경쟁에서 밀려남

결론

     * Finixio/Clickout의 사례는 기술적 관점에서 인상적이며, Google 알고리즘의 허점을 보여줌
     * 도메인 권위 중심의 알고리즘이 유지되는 한, Parasite SEO 문제는 지속될 가능성 큼
     * 주제 권위에 대한 Google의 재평가 없이는 이러한 문제를 근본적으로 해결하기 어려움

   Forbes Marketplace - 숙주를 먹어치우려는 기생 SEO 회사의 진실
   구글, Forbes/CNN/WSJ등의 기생 SEO 같은 악용에 대해 강경 대응을 시작

        Hacker News 의견

     * 이미지가 너무 작아 검색어를 알아볼 수 없으며, 카지노와 암호화폐 관련인 것 같음. 이 카테고리는 질이 낮으며, Google의 검색 결과 품질에 대한 기대가 거의 없음
     * 신뢰할 수 있는 사용자가 수동으로 검색 결과를 평가하고 이를 AI에 반영하여 순위 패널티를 결정하는 방법을 이해하지 못하겠음. Kagi와 비슷하지만 정확히 같지는 않음
     * 새로 만든 전자상거래 웹사이트가 Google에서 제거되었음. 크롤링은 문제없고 패널티도 없지만, 검색 결과에 없어서 비즈니스 프로필에서 링크가 제거됨. 다음에 무엇을 해야 할지 조언을 구함
     * 지리적 위치 트릭이 매우 흥미로움
     * Techopedia가 원래는 탄탄한 기술 사이트였으나, 이제는 도박과 암호화폐의 전면에 있음. 패널티를 받았을 때 트래픽과 순위가 크게 하락했음. Google이 실제로 검색을 개선하기 위해 무언가를 했음
     * Google이 SEO 사기꾼들보다 얼마나 뒤처져 있는지를 보여줌. 더 크고 부유하지만, 더 민첩한 SEO 사기꾼들을 따라잡지 못함
     * 올해 초 SEO에 관한 짧은 소설을 썼음. Duplicitous.pdf
     * Google과 관련된 문제로 지침을 받는 것이 지겨움. 작은 실수로 인해 처벌받고, 의미 있는 고객 서비스나 해결 방법이 거의 없음. admob의 이메일 옵션은 보이지만 클릭할 때마다 오류가 발생함. 커뮤니티 포럼으로 유도하지만, 복사/붙여넣기 응답만 있는 ""다이아몬드 사용자""로 가득 차 있음
          + 비즈니스가 Google 서비스에 의존하면 작은 실수로 인해 큰 문제에 직면할 수 있음. 도움을 받을 수 있는 사람을 찾기 어려움
          + 성능/ANR에 기반하여 앱에 추가 패널티를 부과할 예정이지만, admob의 배너 광고로 인한 성능 문제는 해결되지 않음
          + 소규모 비즈니스를 돕는 것이 아니라 해치거나 위협하지 않는 더 많은 옵션이 필요함
"
"https://news.hada.io/topic?id=18398","눈 내리는 저녁 숲에 멈추며 (1923)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         눈 내리는 저녁 숲에 멈추며 (1923)

     * 시작
          + 시 제목: ""Stopping by Woods on a Snowy Evening""
          + 작가: Robert Frost (1874 – 1963)
     * 시 내용 요약
          + 시인은 눈 덮인 숲을 바라보며 잠시 멈추어 서 있는 상황을 묘사함.
          + 시인의 말은 농가가 없는 곳에서 멈추는 것을 이상하게 여김.
          + 주변의 소리는 바람과 눈송이의 부드러운 소리뿐임.
          + 숲은 아름답고 깊지만, 시인은 지켜야 할 약속이 있으며 잠들기 전에 가야 할 길이 멀다고 함.
     * 기타 정보
          + 이 시는 공공 영역에 속함.

        Hacker News 의견

     * 한 사용자는 시의 마지막 구절을 변형하는 것이 매우 독특한 취미라고 언급함
          + ""The posts are lovely, dense and deep...""와 같은 변형된 구절을 예로 들었음
     * 비해킹 관련 자료를 올리고 투표해주는 사람들에게 감사함을 표하며, 이러한 자료가 사이트를 흥미롭게 만든다고 언급함
     * 첫 아이가 태어났을 때 여러 시를 암기했으며, 이는 육아로 인한 스트레스를 줄이는 데 도움이 되었음
          + 현재 두 번째 아이를 재우면서 시를 다시 떠올리며 정신을 유지하려고 노력 중임
     * 이 시는 책 <i>New Hampshire</i>에 수록되어 있으며, 또 다른 유명한 시로는 ""Fire and Ice""가 있음
          + ""Fire and Ice""는 세상의 종말을 불과 얼음으로 비유한 시임
     * 고등학교 때 시 분석 과제를 통해 이 시에 깊이 빠져들었으며, 이는 시에 대한 평생의 사랑을 불러일으켰음
          + 현재는 주로 중국 고전 시 번역에 시간을 보내지만, 여전히 <i>Stopping by Woods on a Snowy Evening</i>을 기억함
     * 이 시를 사랑하는 사람과 함께 읽었을 때 눈물을 흘릴 정도로 아름다웠다고 회상함
     * 시를 처음 접하는 사람들에게는 소리 내어 읽는 것이 더 많은 것을 얻을 수 있다고 조언함
          + 추가 팁으로는 시 낭송에 대한 웹사이트를 추천함
     * John Ciardi의 ""Robert Frost: The Way to the Poem"" 에세이를 강력히 추천함
     * 이 시는 TRS-80 ""User's Manual For Level 1"" 책에서 처음 배운 시로, 프로그래밍에 대한 사랑을 불러일으켰다고 언급함
          + 시가 화면에 천천히 출력되면서 픽셀이 ""눈""처럼 내리는 프로그램을 작성했음
     * 고등학교 때 읽었던 이 시가 40대에 다시 읽었을 때 다른 느낌을 준다고 언급하며, HN이 유일하게 기분 좋게 놀랄 수 있는 소셜 미디어라고 함
"
"https://news.hada.io/topic?id=18508","AI 회사들이 대부분의 웹 트래픽을 만들고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AI 회사들이 대부분의 웹 트래픽을 만들고 있음

     * 최근 diaspora 프로젝트의 웹 인프라(Discourse, Wiki, 프로젝트 웹사이트 등)에서 발생하는 로드 스파이크와 느려짐 문제를 분석한 결과, ""대부분의 트래픽이 LLM 크롤링 봇에 의해 발생""하고 있음
     * 지난 60일 동안 1,130만 요청(평균 2.19 req/s)이 들어왔는데 그중 70% 이상이 LLM 관련 크롤링 봇에서 발생
          + GPTBot/1.2: 24.6% (278만 요청)
          + Amazonbot/0.1: 14.9% (169만 요청)
          + ClaudeBot/1.0: 4.3% (49만 요청)
          + meta-externalagent/1.1: 2.2% (22만 요청)
     * 비정상적인 크롤링 패턴
          + 반복 크롤링: 동일 페이지를 6시간 간격으로 크롤링
          + robots.txt 무시: 크롤링 제한 규칙을 전혀 준수하지 않음
          + 비효율적 크롤링: 의미 없는 데이터(예: Wiki의 모든 편집 기록)를 대량으로 크롤링
          + 로드 스파이크: 특정 시점에서 10req/s 이상의 요청을 발생시켜 데이터베이스 및 MediaWiki 서버에 과부하 발생
     * 방어도 불가함
          + IP 변경: 레이트 리미트를 우회하기 위해 IP를 지속적으로 변경
          + UA 문자열 변경: 봇 사용자 에이전트(User Agent)를 임의의 문자열로 변경해 차단 우회
     * Googlebot과 Bingbot 같은 기존 검색 엔진 크롤러는 정상적이고 효율적인 크롤링 패턴을 보임.
          + Googlebot: 0.14% (16,600 요청)
          + Bingbot: 0.14% (15,900 요청)
     * 중복 크롤링 최소화, robots.txt 규칙 준수

  결과 및 영향

     * 효과적인 서비스 제공 불가: LLM 크롤링 봇으로 인해 인간 사용자 경험이 크게 악화
     * 서버 과부하: 데이터베이스 서버 및 MediaWiki가 반복적으로 로드 스파이크를 겪음
     * 사실상 인터넷 전체 DDoS: 이러한 크롤링 방식은 전 세계적으로 불필요한 리소스 낭비를 초래

  결론

     * LLM 크롤링 봇의 비정상적인 트래픽 패턴으로 인해 인프라가 지속적인 부담을 받고 있으며, 이를 방어하기 위한 시도가 효과를 발휘하지 못하고 있음
     * 이 문제는 개인적인 피로를 넘어 인터넷 생태계 전반에 심각한 영향을 미치고 있음

        Hacker News 의견

     * Meta의 AI 봇이 웹사이트를 과도하게 크롤링하여 서버가 다운된 경험을 공유함. Cloudflare를 사용하여 이를 차단하는 방법을 설명함
          + Cloudflare의 AI 봇 차단 기능이 유용하다고 언급함
          + AI 봇의 콘텐츠 접근이 가치가 없다고 주장함
     * 다양한 플랫폼에서 발생한 봇 트래픽 데이터를 공유함
          + Claude, Amazon, Data For SEO, Chat GPT 등의 봇이 많은 트래픽을 발생시킴
          + 이러한 봇들이 robots.txt를 무시하거나 지연이 발생해도 백오프하지 않는다고 설명함
     * 봇을 차단하는 방법에 대해 논의함
          + IP를 변경하거나 비봇 User Agent로 전환하는 봇의 행동을 설명함
          + OpenAI의 IP 범위를 공개하는 GitHub 링크를 공유함
          + WordPress 플러그인을 사용하여 AI 봇을 차단하는 방법을 제안함
     * CGTalk 포럼이 자원 문제로 폐쇄된 사례를 언급함
          + 많은 포럼이 서버 운영 부담을 줄이기 위해 Slack, Discord로 이동함
     * AI 회사들이 더 지능적으로 스크래핑을 해야 한다고 주장함
          + AI 회사의 행동이 부끄러운 일이라고 언급함
     * 포이즈닝 공격에 대한 호기심을 표현함
          + 인간이 작성한 잘못된 콘텐츠로 AI 모델을 혼란스럽게 할 수 있는 가능성을 탐구함
     * GCP에 배포한 앱이 봇 트래픽으로 인해 비용이 증가한 경험을 공유함
          + Reddit에 앱을 공유한 것이 원인이라고 추측함
     * 대형 포럼의 크롤링 경험을 공유함
          + ChatGPT가 포럼의 역사에 대해 잘 알고 있다고 언급함
          + LLMs에 영향을 줄 수 있는 텍스트를 추가하는 아이디어를 제안함
     * robots.txt를 무시하고 서비스에 악영향을 미치는 봇의 행동을 불법으로 간주할 수 있다고 주장함
          + 지역 사이버 법 집행 기관에 연락할 것을 권장함
"
"https://news.hada.io/topic?id=18513","Passkey 기술은 우아하지만, 사용 가능한 보안은 아님","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Passkey 기술은 우아하지만, 사용 가능한 보안은 아님

     * 프라임타임을 위한 준비가 덜 된 기술 : 패스키 기술은 우아하지만, 사용하기에는 보안성이 부족함
     * 비밀번호의 대안으로 주목받고 있으며, 피싱 및 데이터베이스 해킹에 강력한 방어책으로 여겨짐
     * FIDO2와 WebAuthn 사양은 우아하지만, 사용자 경험은 여전히 복잡함
          + 수백 개의 사이트와 주요 운영 체제 및 브라우저에서 패스키를 지원하지만, 플랫폼마다 구현 방식과 일관성 없는 워크플로로 사용성을 저하
          + 예를 들어, 동일한 사이트에서도 iOS와 Android에서의 로그인 경험이 다르고, 일부 브라우저에서는 아예 지원되지 않음
          + 각 플랫폼은 자사의 패스키 동기화 옵션을 강요하며, 사용자가 다른 옵션을 선택하기 어렵게 만듦
          + 패스키 구현은 사용자가 쉽게 사용할 수 있도록 해야 하지만, 현재는 그렇지 않음
     * 1Password와 같은 보안 관리자를 통해 패스키를 동기화하면 문제를 해결할 수 있지만, 이는 패스키의 근본적인 장점인 비밀번호 없는 인증의 취지를 약화시킴.
          + 또한 대부분의 사용자는 여전히 패스워드 관리자를 사용하지 않음
     * 패스키를 지원하는 사이트 중 비밀번호를 완전히 제거한 곳은 없음
          + SMS 기반 MFA 인증은 여전히 취약하며, 패스키의 보안성을 저해함
     * 기업 환경에서는 패스키가 비밀번호와 인증기의 대안이 될 수 있음

제안

     * 보안 관리자 사용: 1Password와 같은 도구를 통해 패스키를 동기화하고 MFA를 활성화하여 보안을 강화
     * MFA 우선 사용: 가능하다면 보안 키 또는 인증 앱을 활용해 다중 인증을 활성화
     * 패스키 도입 검토: 패스키는 궁극적으로 유망하지만, 현재는 비밀번호와 보안 관리자가 여전히 필수적

결론

     * 패스키는 비밀번호의 보안 문제를 해결할 가능성이 높지만, 현 시점에서는 기술적 제약과 사용성 문제로 인해 완벽한 대안은 아님
     * 앞으로 개선될 가능성이 높지만, 현재로서는 기존 인증 방식을 병행하는 것이 가장 합리적인 선택.

   패스키 저도 Bitwarden에 넣어놓고 쓰고 있는데요.
   이름을 하나하나 등록할 수 있게 해 둔 것 보면 패스키를 하나만 만들어서 동기화하며 사용하라고 만든 기술은 아닌 것 같긴 합니다. 기기마다 하나씩 만드라는 취지인 것 같은데 솔직히 귀찮죠.

        Hacker News 의견

     * 어떤 평행 우주에서는 모든 컴퓨팅 장치 제조업체가 사용자가 보안 자격 증명을 플러그인할 수 있는 저장소를 제공해야 한다는 법이 존재함. 현재의 패스키 접근 방식은 사용자가 하나의 생태계에 완전히 몰입하는 상상 속의 모델을 기반으로 설계됨.
     * 패스키는 Yubico가 원하는 방식으로는 하드웨어 키를 사용하여 인증하는 것이었으나, Apple, Google, Microsoft는 OS를 통해 마법처럼 인증하는 것을 선호함.
     * OS 벤더들은 사용자가 비OS 소프트웨어나 하드웨어를 사용하지 않기를 원하며, 클라우드 기반 패스키를 사용하도록 유도함.
     * 이상적인 미래 상태는 브라우저 설정에서 새로 등록된 자격 증명의 제공자를 선택할 수 있는 것임.
     * TOTP도 유사한 문제를 겪고 있으며, 많은 패스키 저장소는 내보내기를 허용하지 않음. Bitwarden은 예외적으로 패스키를 내보낼 수 있음.
     * 패스워드에서 패스키로의 전환은 현대 인터넷 보안 모델에 큰 변화이며, 사람들이 신중하고 의견이 분분한 것은 당연함.
     * 패스키를 좋아하는 소수의 사용자로서, iCloud Keychain과 1Password에 패스키를 생성함. 더 나은 내보내기/가져오기 기능이 필요하다고 생각함.
     * 패스키는 보이지 않는 블랙박스이며, 일반 사용자가 백업할 수 없음. 구현이 미완성 상태이며 공격 표면이 더 큼.
     * Fido는 웹사이트/프레임워크/라이브러리 지원이 부족하며, 패스키는 실패한 제품이라고 생각함. 사용성 문제로 인해 패스키를 신뢰할 수 없음.
     * 기술 사용자로서 패스키 인증 세션의 길이가 짧아 Google 사용을 중단함. 자주 재인증해야 하는 불편함이 있음.
"
"https://news.hada.io/topic?id=18435","메리 크리스마스 인사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              메리 크리스마스 인사

     * 크리스마스에 대한 추억을 공유하는 게시물임
     * Josh가 사람들에게 크리스마스 추억을 공유해달라고 요청함

        Hacker News 의견

     * 유대인으로서 크리스마스는 이웃과 함께 시간을 보내며 영화와 중국 음식을 즐기는 날이었음. 1999년 크리스마스에는 혼자 영화관에 가서 세 편의 영화를 볼 수 있었던 특별한 기억이 있음.
     * 1981년 아테네에서의 크리스마스는 Sinclair ZX81 개인용 컴퓨터를 받았던 기억이 있음. 그날 밤 벽난로 옆에서 프로그래밍을 배우며 보냈던 시간이 소중했음.
     * 이스탄불에서 태어나 독일로 이주한 후, 독일에서의 첫 크리스마스는 고립된 느낌이었지만, 고용주 덕분에 따뜻한 경험을 하게 되었음. 독일에 대한 사랑이 커졌음.
     * 옥스퍼드에서 크리스마스를 보낸 경험은 새로운 학장과의 특별한 차 시간으로 이어졌음. 대학원생으로서 드문 기회였음.
     * 인도 출신으로 카톨릭 학교에서 예수 탄생극을 보며 마리아 역을 맡은 여자아이에게 반했던 기억이 있음. 현재 그녀와 결혼하여 아이가 있음.
     * 60년대 후반에 태어나 디지털 기술이 없는 크리스마스를 보냈던 기억이 있음. 망원경을 선물로 받았던 해가 특별했음. 우주에 대한 관심이 커졌음.
     * 형과의 산책은 가장 좋은 크리스마스 기억 중 하나였음. 가족 간의 갈등에도 불구하고 형과의 순간은 특별했음.
     * 1983년 크리스마스에 처음으로 컴퓨터에 대한 관심을 가졌고, 결국 C128을 선물로 받게 되었음. 프로그래밍에 대한 열정이 시작되었음.
     * 터키 출신 아내와 함께 크리스마스를 재창조해야 했던 경험이 있음. 영국으로 돌아와 딸과 함께 크리스마스를 준비하며 즐거움을 느꼈음.
     * 2024년은 도전적인 해였지만, 2019년 친구와 함께한 크리스마스는 행복한 기억으로 남아 있음.
"
"https://news.hada.io/topic?id=18406","외로움을 극복하는 방법: 독일의 Stammtisch 문화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    외로움을 극복하는 방법: 독일의 Stammtisch 문화

     * ""Stammtisch""는 독일 전통에서 비롯된 ""정기 모임""이라는 뜻으로, 같은 관심사를 가진 사람들이 정기적으로 만나 술을 마시며 대화를 나누는 모임을 의미함
     * 주로 바나 레스토랑에서 열리며, 정해진 테이블에서 만남. 초기에는 남성 중심이었으나, 현대에는 여성도 포함
     * 집을 정리할 필요 없이 외부 장소에서 모임을 가질 수 있다는 간단한 구조
     * Stammtisch의 현대적 재발견
          + 80-90년대 독일 젊은 세대는 이를 부모 세대의 전통으로 여겨 기피
          + 사람들이 나이가 들면서 Stammtisch를 다시 조직하기 시작
     * 워싱턴 DC에서 열린 Stammtisch 모임은 현대적인 형태로 발전:
          + 큰 테이블 대신 바 옆에서 자유롭게 대화
          + 다양한 연령대와 성별의 참여
     * 80세의 Werner Hein은 Stammtisch의 중요성을 강조:
          + ""Zoom으로 Stammtisch를 하는 것은 어렵습니다. 실제로 만나야 합니다.""
     * Stammtisch의 정서적 효과
          + 개인적인 대화 촉진
               o 친밀한 분위기와 반복적인 만남을 통해 서로 솔직해질 기회 제공.
               o 특히 남성들에게는 감정을 나눌 기회를 만듦.
          + 사회적 연결의 중요성
               o 교회 참석 감소와 같은 전통적 모임의 감소 속에서 새로운 의미 부여
     * Stammtisch는 반드시 알코올을 포함하지 않아도 되며, 커피 모임인 Kaffeekränzchen과 같은 변형도 존재
     * Coffee Club : 글쓴이와 친구들은 매주 같은 시간 동네 카페에서 모여 대화.
          + 주요 주제: 직장, 주말, 개인사 등.
          + 강요 없이 자유로운 참석 가능
     * Werner Hein의 조언:
          + ""즐거움을 위한 약간의 헌신이 필요합니다.""
          + 그 대가로 따뜻한 연결의 원을 만들어냄
     * Stammtisch는 단순한 정기 모임이 아닌, 지속적인 우정과 감정적 연결을 심화시키는 기회 제공
     * 현대 생활의 바쁜 일정 속에서도 이러한 전통은 관계 유지의 소중한 도구가 될 수 있음

   이런 문화가 저는 좋은 것 같습니다.
   최근에 주변 친구들도 거의 결혼을 해서 집 근처에는 친구들이 많이 없는데, 이런 상황에서 내면의 감정, 고민, 소소한 이야기를 같이 공유하고 나눌 사람이 없는게 아쉬운 것 같습니다(가족과는 또 다르게 이야기 하거나 공유해야 된다고 생각합니다.)

   모임을 만들어 보고 싶긴한데 고민이 많네요 ㅎㅎ

   독일 사람들은 밋업을 굉장히 많이 사용합니다. 저는 독일어를 못해서 참여를 못했는데, 모여서 밤새 이야기를 하더라고요. 맥주 한두병가지고 새벽까지 이야기만하는데 뭔 할 이야기가 저리많나 신기했었습니다.

   이런 모임 재미나겠는걸요.
   근데, 이런거에도 모든 단어를 만들어내는 독일인들이 더 신기하군요.

   오.. 궁금해서 찾아봤는데, 고유명사는 아니고 일반명사라고 합니다. Stamm'(정기적인)과 'Tisch'(테이블)의 합성어라네요~

   헉, 새 단어였군요!

        Hacker News 의견

     * PNW에 사는 한 사용자는 동부 해안의 ""3rd place bar culture""를 그리워하며, 저렴한 멤버십으로 지역 주민에게 할인 혜택을 주는 지역 펍이 있으면 좋겠다고 언급함
          + 작은 이벤트를 주최하고, 불쾌한 사람들을 엄격히 관리하는 장소로 활용할 수 있을 것이라고 제안함
     * 프랑스 리옹에는 전통적인 ""먹고 마시는 사회""인 Francs-Mâchons가 있으며, Tony Bourdain의 YouTube 에피소드에서도 볼 수 있다고 설명함
     * 콜카타에서는 ""Adda"" 문화가 커피 하우스에서 이루어지며, 독일에서는 Kaffeekränzchen이라고 부른다고 설명함
          + 이러한 문화가 도시 환경에서 자연스럽게 나타나는 것이 흥미롭다고 언급함
     * 크로아티아 출신의 사용자는 친구들과 아이스크림 가게에서 커피와 맥주를 마시며 4시간 동안 웃고 이야기하는 경험을 회상함
          + PNW에서는 이런 경험을 하지 못했다고 아쉬워함
     * 벨기에에서는 ""stamcafé"" 또는 ""stamkroeg""라는 개념이 있으며, 자주 방문하는 지역 펍을 의미한다고 설명함
          + 사용자는 60km를 기차로 이동해 맥주와 좋은 분위기를 즐긴다고 언급함
     * 매주 금요일 밤 친구들과 저녁 식사를 하며 특별한 시간을 보내는 사용자가 있음
          + 평소에도 서로 소통하지만 금요일 저녁은 특별하다고 설명함
     * 독일 사용자는 영국과 아일랜드의 펍 문화가 사회적 만남의 장소로서 중요한 역할을 한다고 설명함
          + 이러한 문화가 사회적 결속을 강화한다고 언급함
     * 체코에서도 Stammgäste가 주 몇 회씩 만난다고 설명함
     * 방갈로르에서는 비슷한 문화가 없지만, 직장에서 ""Chai/Sutta par charcha""라는 것이 있다고 언급함
     * ""Third place""의 개념에 대한 링크를 공유함
"
"https://news.hada.io/topic?id=18494","EmacsConf 2024 회의 기록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          EmacsConf 2024 회의 기록

  EmacsConf 2024 노트

    통계

     * 발표: 31개
     * 총 시간: 10.7시간
     * Q&A 웹 회의: 21개
     * 총 시간: 7.8시간

    타임라인

     * 제안 요청: 2024-06-30
     * 제안 마감: 2024-09-20
     * 발표자 통지: 2024-09-27
     * 일정 발표: 2024-10-25
     * 비디오 목표 날짜: 2024-11-08
     * EmacsConf: 2024-12-07

    데이터

     * 발표 정보는 Org 파일에 저장함
     * 파일 업로드는 PsiTransfer를 통해 진행함

    커뮤니케이션

     * EmacsConf 제안 요청은 여러 플랫폼에 발표됨
     * Mumble을 사용하여 백스테이지 조율을 진행함

    일정

     * 이틀간의 발표로 구성됨
     * 첫날에는 두 개의 트랙이 있었으며, 발표 사이에 15-20분의 간격을 둠
     * 마지막 날에는 단일 트랙으로 진행되어 여유로웠음

    녹화된 비디오

     * 발표자들에게 비디오 녹화를 권장하여 스트레스 감소 및 자막 작업을 용이하게 함
     * 비디오와 자막은 자동으로 위키에 게시됨

    자막 작업

     * WhisperX를 사용하여 자막 초안을 준비함
     * Aeneas를 사용하여 텍스트를 재정렬함

    BigBlueButton 웹 회의

     * 새로운 BigBlueButton 서버를 설정함
     * 스마트 레이아웃 기능을 사용하여 웹캠 썸네일을 공유 화면 옆으로 이동함

    기술 점검 및 호스팅

     * FlowyCoder가 체크인을 잘 진행함
     * Corwin과 Leo가 호스팅을 맡아 대화형 세션을 진행함

    스트리밍

     * 480p 스트림이 안정적으로 작동함
     * YouTube 라이브 스트리밍 이벤트를 각 교대마다 설정함

    출판

     * 발표와 자막을 위키에 자동으로 게시함

    Etherpad

     * Etherpad 1.9.7을 사용하여 Q&A를 수집함

    IRC

     * IRC는 여전히 견고한 플랫폼으로 사용됨

    Q&A 추출

     * BigBlueButton에서 비디오 형식으로 녹화 파일을 쉽게 가져올 수 있었음

    예산 및 기부

     * 총 호스팅 비용은 USD 46.03+세금임

    문서화 및 시간

     * 자동화 덕분에 제한된 시간 내에 EmacsConf를 준비할 수 있었음

    감사

     * 발표자, 자원봉사자, 참가자들에게 감사의 말을 전함
     * 여러 도구와 서비스를 제공한 프로젝트 팀들에게도 감사함

    전체

     * EmacsConf는 매년 큰 하이라이트 중 하나임
     * 내년에도 다시 하고 싶음

        Hacker News 의견

     * EmacsConf는 사람들이 작업한 멋진 것들을 공유하는 아늑한 모임처럼 느껴짐
          + EmacsConf와 다른 편집기들의 행사와 비교했을 때의 분위기가 흥미로움
          + EAF가 아직 불안정하고 문서화가 부족하지만, 인터랙티브 그래픽을 구동하는 좋은 방법이 필요함
     * Guile을 활용한 Emacs의 부활 시도가 있었음
          + Emacs의 네이티브 컴파일 기능이 압박을 줄였지만, Elisp 외의 언어로 스크립팅하는 매력은 여전히 존재함
          + Scheme이나 Lua가 그 목적에 적합할 것임
     * EmacsConf 2024의 온라인 발표가 인상적이었음
          + 모든 것이 org-mode로 캡처되고 게시됨: 대본, 댓글, QA, 비디오 링크 등
     * Sacha의 Emacs 업데이트를 오랫동안 팔로우해왔으며, Common Lisp에 열광적임
          + 작년에 Mastering Emacs 책을 구매했으며, Emacs Lisp로 프로젝트를 시도할 계획임
     * 컨퍼런스의 총 호스팅 비용이 매우 관리 가능함
          + 총 비용은 USD 46.03+세금이며, 연중 나머지 기간 동안 웹 노드와 라이브 스트리밍 노드를 1GB 나노드로 유지함
     * 올해 EmacsConf 비디오를 탐색하는 것이 즐거웠음
          + 인프라 및 UI 관련 내용이 특히 놀라웠으며, 많은 일이 진행 중임
          + 좋아하는 발표들:
               o Charles Choi의 인간을 위한 UI 디자인
               o Howard Abram의 문서화 프로그래밍
               o Guile에서의 Emacs 및 Emacs Lisp 클론
               o Rust로 실험적인 Emacs 코어
               o Julia와 Emacs의 동기화에 관한 발표
               o Robin Templeton의 Guile-Emacs 재출시
     * Lem 프로젝트가 Emacs 커뮤니티에서 ""인정""받았는지 궁금함
          + Lem은 Common Lisp로 작성되고 확장 가능한 Emacs와 유사하며, 멀티플랫폼, NCurses & SDL2, LSP 등을 지원함
     * TeXmacs가 EmacsConf에 포함되어야 하는지에 대한 의문
          + Emacs나 TeX에 기반을 두지 않았지만, 영감을 받았음
     * Emacs를 독점적으로 사용하는 사람으로서, 비디오만 있는 점이 아쉬웠음
          + 링크된 페이지에서 재미있는 내용을 발견함
"
"https://news.hada.io/topic?id=18480","벤치 회계 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              벤치 회계 서비스 종료

     * 서비스 종료 공지
          + 2024년 12월 27일부터 Bench 플랫폼이 더 이상 접근 불가함.
          + 갑작스러운 소식으로 인해 불편을 초래할 수 있어, Bench 고객이 전환을 원활히 할 수 있도록 지원할 것임.
          + 지난 13년간 소규모 비즈니스를 지원할 수 있어 영광이었음. 함께 해주셔서 감사함.
     * 다음 단계는?
          + 12월 30일까지 이 웹사이트에서 고객은 Bench 데이터를 접근하는 방법에 대한 추가 정보를 받을 것임.
     * 추천 사항
          + 회계 지원을 계속 받기 위해, 현대적인 회계 소프트웨어인 Kick을 추천하며, 지속적인 필요를 처리할 수 있는 독점 제안을 마련했음.
     * 자주 묻는 질문
          + 어떤 데이터를 복구할 수 있는지?
          + 세금 연장을 신청해야 하는지?
          + 데이터를 다운로드할 수 있는 기간은 얼마나 되는지?
          + Bench Tax 고객이라면 무엇을 해야 하는지?
          + 다음 단계는 무엇인지?

        Hacker News 의견

     * Bench의 창립자이자 전 CEO인 Ian Crosby가 회사의 폐쇄에 대해 언급함. Bench는 10년 이상 운영된 회사로, 고객들이 선불로 장기 계약을 맺기 때문에 갑작스럽게 자금이 부족해졌을 가능성은 낮음. 인력 문제, 기업의 부적절한 행동, 데이터 손실, 랜섬웨어, 팀원의 배신, 자금 유용 등의 가능성을 제기함
     * Bench의 고객이었던 한 사용자는 연간 수천 달러를 지불했으나 서비스 품질이 좋지 않았다고 언급함. 고객당 수익이 높았을 것이라 추측함
     * Bench 사용자라면 실망감이 클 것이라 예상함. 세금 관련 서비스에서 기대에 미치지 못하는 것은 심각한 문제임
     * Kick 팀은 Bench 고객을 돕기 위해 빠르게 움직이고 있으며, 무료 Bench 이전, 2024년 회계 검토 통화, 일일 라이브 Q&A 등을 제공함. 추가 리소스와 업데이트를 실시간으로 공유 중임
     * Bench의 갑작스러운 폐쇄 소식에 대해 불만을 표하며, 최소한의 약속은 더 긴 공지 기간이라고 주장함
     * Bench에서 6년 이상 근무하지 않았던 한 사용자는 Bench의 전략이 일관성이 없었다고 언급함. 소프트웨어 회사로서의 자동화 도구와 수작업을 하는 회계사 팀이 상충되었음. LLMs를 활용해 기술 회사로서의 입지를 강화했어야 했으나 서비스 회사로 전환함
     * Bench가 최근에 연간 계약으로 전환을 강요했다는 불만을 제기함
     * Bench의 서비스가 좋지 않았다는 경험을 공유함. Gusto 급여 항목이 숨겨져 있어 $300k의 차이가 발생했으며, 이로 인해 즉각적인 해고가 발생함
     * 회계 서비스가 연말 3일 전에 종료되는 것은 고객에게 큰 타격이며, 심지어 사기일 수 있다고 주장함. 스타트업과의 거래에서 이런 일이 일반적인지 의문을 제기함
     * Bench의 FAQ에서 연말 재무제표만 제공한다고 언급되어 있어, 개별 거래가 필요한 경우 문제가 될 수 있다고 우려함
     * 창업자들에게 중요한 교훈은 회계 스택을 구성하는 방법임. Bench와 같은 차세대 솔루션은 전체 스택을 제공하지만 위험이 따름. 반면, 최소한의 위험 접근법은 다양한 공급업체로부터 회계 스택을 조달하는 것임. QuickBooks, Xero, Wave와 같은 표준 회계 소프트웨어를 사용하면 유연성이 증가함
"
"https://news.hada.io/topic?id=18420"," Lemniscate Constant (ϖ) : π의 어두운 쌍둥이(Evil Twin)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Lemniscate Constant (ϖ) : π의 어두운 쌍둥이(Evil Twin)

     * π(파이)와 마찬가지로 ϖ는 중요한 수학적 상수
          + π는 원과 삼각 함수(sin, cos)와 연관됨
          + ϖ는 무한대(∞) 모양의 렘니스케이트(lemniscate)와 새로운 삼각 함수(sl, cl)와 연관됨
     * 렘니스케이트는 두 점에서의 곱을 일정하게 유지하는 커브(카시니의 타원)의 특별한 경우로, 무한대(∞) 형태를 가짐
     * ϖ는 ""렘니스케이트 상수""로 불리며, 대략적으로 2.62205755에 해당

렘니스케이트와 ϖ

  렘니스케이트 정의

     * 극좌표에서 렘니스케이트는 ""반지름 제곱은 각도의 두 배에 대한 코사인 값""이라는 공식으로 표현됨
     * 원 둘레가 (2π)에 해당하는 것처럼, 렘니스케이트의 둘레는 (2ϖ)에 해당

    ϖ의 삼각 함수: sl과 cl

     * 원의 삼각 함수(sin, cos)처럼, 렘니스케이트에서는 sl과 cl이라는 함수가 존재
     * 예를 들어, 삼각 함수에서의 ""사인 제곱 더하기 코사인 제곱은 1""이라는 공식이 렘니스케이트에서는 다음과 유사하게 변환됨:
          + sl 제곱 더하기 cl 제곱 더하기 sl 제곱과 cl 제곱의 곱은 1

π와 ϖ의 연결

     * π와 ϖ는 유사한 공식과 패턴을 공유하며, π는 ϖ 계열 상수 중 하나
     * π는 ϖ₂로, ϖ는 ϖ₄로 표현되며, π와 ϖ 사이에는 또 다른 상수 ϖ₃가 존재
     * 이러한 계열 상수는 고유한 수학적 구조를 나타내며, 더 복잡한 곡선과 함수와 관련

ϖ와 가우스의 발견

     * 가우스는 렘니스케이트 상수가 산술-기하 평균(Arithmetic-Geometric Mean)과 연결되어 있음을 발견
          + 산술-기하 평균은 두 값의 평균과 기하 평균을 반복적으로 계산하여 수렴 값에 도달하는 과정
          + 예를 들어, 1과 루트 2의 산술-기하 평균은 π와 ϖ의 비율로, 이는 ""가우스 상수""로 알려짐

  고차 상수 ϖₙ

     * ϖₙ은 하이퍼타원 함수와 곡선과 연결
          + 하이퍼타원 곡선은 리만 구의 두 배 껍질로 정의되며, (n)차 대칭점(유니티의 n번째 제곱근)에 가지점이 생김
          + 이러한 상수는 고차 곡선의 대칭성과 독특한 특성을 반영

  참고 자료 및 링크

     * 레미니스케이트 상수 (ϖ) - Wikipedia
     * 레미니스케이트 삼각 함수 (sl, cl)

        Hacker News 의견

     * ""lemniscate""라는 단어의 철자가 헷갈려 확인해 보았음. 이 논의 덕분에 새로운 좋아하는 지도를 발견했음
          + Peirce Quincuncial Projection이라는 지도임
     * 보호를 위해 행운의 클로버 부적을 사용할 수 있음
          + polar plot r=cos(2θ)로 표현됨
          + 둘레는 상수 4*E(-3) ~ 4 * 2.4221로 정의될 수 있음
     * π는 원에서 유래하며, 한 점에서의 거리로 정의됨
     * ϖ는 Bernoulli의 lemniscate에서 유래하며, 두 점에서의 거리로 정의됨
     * 세 점에서 정의되는 형태에서 유래한 유사한 상수가 있는지 궁금함
     * π와 그 쌍둥이의 비율은 대략 1.198이며, 이는 sqrt(2)와 1의 산술-기하 평균임
          + AM이 GM으로 수렴하면, AM-GM-HM 불평등에 의해 조화 평균으로도 수렴해야 함
          + HM은 비싼 제곱근이 필요하지 않음
     * AM과 GM의 수렴이 거의 즉각적임
          + Gauss 상수의 HM 수렴을 위해서는 약 15단계가 필요함
          + 비싼 연산자를 피할 수 있지만, 많은 반복이 필요함
     * 다른 주목할 만한 상수들:
          + Euler–Mascheroni Constant: 조화급수, 감마 함수와 관련된 적분 및 합
          + Catalan’s Constant: 특정 삼각급수, 격자 그린 함수
          + Feigenbaum Constants: 로지스틱 맵, 동적 시스템의 혼돈
          + Khinchin’s Constant: 단순 연분수의 부분 몫
          + Glaisher–Kinkelin Constant: Barnes G-함수의 점근적 전개, 조합적 한계 및 특정 곱셈 전개
          + Ramanujan’s Constant: 타원 곡선의 복소수 곱셈
          + Omega Constant: Omega * e^Omega = 1, Lambert W 함수, x^x^x^... = 2
     * 문화 상대주의자가 아니지만, ∞ 모양을 ◯ 모양보다 더 중요하게 여기는 문명이 있다고 믿지 않음
          + 로그 공간에서 사는 존재들이 있을 수 있음
          + 그들의 원은 lemniscate일 수 있음
     * π와 ϖ는 무한한 형제들 중 두 개일 뿐임
     * 왜 두 점만? 왜 세 점이 아닌가?
          + N점에서의 거리의 일정한 곱으로 생성된 흥미로운 곡선을 찾을 수 있는가?
          + 고차원에서는 1점에 대해 구가 있음
          + 2점에 대한 형태는 무엇인가? 모래시계 같은 이중 물방울인가?
     * 이 형태가 원보다 문명에 더 중요해지는 것이 흥미로운 SF 설정이 될 수 있음
"
"https://news.hada.io/topic?id=18522","SkunkHTML - 마크다운으로 GitHub Page에 웹사이트 자동 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               SkunkHTML - 마크다운으로 GitHub Page에 웹사이트 자동 생성

     * 60초내에 GitHub에 마크다운 블로그를 생성 가능
          + Repo를 Fork한후 GitHub 설정에서 GitHub Pages를 활성화하면 바로 블로그 완성
          + 이제 마크다운만 추가로 업로드 하면 새로운 글이 등록됨
     * /markdown-blog/에 새 .md 파일이 들어오면 GitHub Actions가 이를 감지해서 푸시하고 빌드 프로세스 시작. 업데이트된 사이트를 디플로이
     * 마크다운에서 HTML로 변환은 F#과 FSharp.Formatting 라이브러리 이용
     * Giscus 댓글 시스템 지원
     * 로컬에 다운로드 할 필요없이 GitHub 에서 100% 온라인으로 작업 가능
     * MVP.css(스타일링) + microlight.js(구문강조)

   GeekNight 페이지를 이걸로 만들어봤습니다. 편하고 좋네요.
   https://geeknight.hada.io/

   Static site generator는 지치지도 않고 꾸준히 새로 나오네요. ㅎ

   저도 제 블로그는 전용 ssg 간단하게 만들어서 쓰고 있는데, 요구사항이 다양하니 그럴수 밖에 없는거 같아요. ㅎㅎ

   사실 저도 제 블로그용으로 ssg 만들어서 쓰고 있지만…
   딱히 공개할만한게 아니라서 ㅎㅎ
   https://github.com/iolo/fastpress

   그러게요ㅋㅋ 근데도 흥미롭네요
"
"https://news.hada.io/topic?id=18507","HN에 전하는 소식: 인터넷 개척자이자 QModem 개발자인 아버지 John Friel 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN에 전하는 소식: 인터넷 개척자이자 QModem 개발자인 아버지 John Friel 별세

   The content provided does not contain sufficient information to summarize or translate according to the given guidelines.

        Hacker News 의견

     * John은 1990년대 Mustang Software에서 Qmodem을 개발하며 팀과 함께 일했음. 그는 유머 감각이 뛰어나고 사람들과 잘 어울렸으며, Qmodem을 DOS에서 Windows로 전환하는 과정에서 Scott Hunter와 Dan Horn과 협력했음. John은 Mustang을 떠난 후 연락이 끊겼지만, 그의 기여는 여전히 기억되고 있음.
     * QModem은 한 사용자의 청소년 시절에 큰 영향을 미쳤으며, 기술에 대한 관심을 불러일으켰음. 이 사용자는 QModem 덕분에 기술을 배우고 조정하는 데 몰두하게 되었고, 이는 그의 경력과 삶의 방향을 결정하는 데 중요한 역할을 했음.
     * John은 Linux 시스템 관리와 웹 개발을 시작하는 데 도움을 주었으며, 그의 도움으로 사용자는 자신의 Linux 서버를 운영할 수 있었음. 이는 당시로서는 매우 특별한 경험이었고, John에게 깊은 감사를 표하고 있음.
     * Qmodem은 BBS 시절에 가장 좋아하는 통신 프로그램이었으며, 여전히 빈티지 컴퓨터 작업 시 사용되고 있음. Qmodem의 스크립트 언어는 매우 유용했으며, 최근에도 VoIP를 통해 모뎀 호출을 테스트하는 데 사용되고 있음. John이 새로운 DOS 버전을 작업 중이라는 소식을 듣고 기대했음.
     * QModem과 Telix는 사용자가 새로운 세계를 탐험할 수 있게 해주었으며, 이는 친구와 지식, 경력을 찾는 데 큰 도움이 되었음. JF에게 감사의 마음을 전하고 있음.
     * John은 초기 BBS 시절에 Colossus라는 BBS 개발자와 연결해 주었고, 이는 사용자가 개발자로 성장하는 데 큰 도움이 되었음. John과의 관계는 Mustang Software에서의 협력으로 이어졌으며, Qmodem을 다시 컴파일하기 위한 노력을 함께 했음.
     * QModem은 1990년대 초에 오프라인 이메일 통신을 가능하게 해주었으며, 이는 사용자의 기술적 능력을 향상시키고 커뮤니티에 참여하는 데 큰 도움이 되었음. QModem은 Turbo Pascal로 작성되어 다른 프로그램보다 빠르게 작동했음.
     * QModem은 많은 엔지니어를 양성하는 데 기여했으며, 사용자는 UNIX와 초기 인터넷을 발견할 수 있었음.
     * QModem 소프트웨어 덕분에 첫 BBS 연결이 인생에서 가장 특별한 경험 중 하나였음. 사용자는 어린 시절의 행복한 순간에 대해 감사하고 있음.
     * 1990년대 초, Gateway 2000에서 구매한 Telepath 모뎀과 함께 Qmodem을 사용했으며, 이는 사용자가 사용해 본 프로그램 중 가장 강력하고 사용하기 쉬웠음. BBS 장면이 사라지면서 사용을 중단했지만, John의 기여에 감사하고 있음.
"
"https://news.hada.io/topic?id=18440","도쿄, 도시 전체의 포인트 클라우드 데이터 무료 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     도쿄, 도시 전체의 포인트 클라우드 데이터 무료 공개

        Hacker News 의견

     * 스위스는 전체 국가를 포괄하는 상세한 3D 건물 모델을 보유한 최초의 국가 중 하나임
          + 약 7천만 개의 3D 객체로 구성되어 있으며, 스위스와 리히텐슈타인의 모든 건물, 다리, 케이블카, 숲, 개별 나무 및 지리적 이름이 3D로 표현됨
          + 두 가지 이동 모드를 통해 공간을 상호작용적으로 탐색할 수 있음
          + 비행 모드로 디지털 스위스를 공중에서 탐험하거나 자신의 마을이나 이웃의 3D 모델을 가상으로 산책할 수 있음
     * 프랑스의 국립 지리 데이터 기관(IGN)은 국가 전체의 라이다 데이터를 수집했음
          + 1km²당 20포인트의 밀도로 수집되었으며, 이는 OP에서 언급된 1km²당 30포인트와 비교됨
     * 일본의 ""Place, Japan"" 효과가 작용 중임
          + 많은 국가들이 10년 전부터 라이다 데이터를 발표하고 있음
     * 미국 지질조사국(USGS)은 대륙 미국 전체의 중고밀도 라이다 데이터를 거의 10년 동안 수집 중임
          + 품질 검증된 데이터(포인트 클라우드 및 파생 데이터)는 무료로 공개됨
     * 높은 품질의 데이터셋은 현재 워크플로우를 크게 지원하고 3D 창작의 진화를 가속화할 것임
     * 몇몇 도시들도 이 작업을 수행 중임
          + 캐나다 밴쿠버는 2013년부터 도시 전체를 포괄하는 라이다 포인트 클라우드를 보유하고 있음
     * 도쿄 정부의 디지털 트윈 프로그램에 대한 배경 정보가 포함됨
          + 소싱 및 유지보수 노력 포함
     * 대규모로 포인트 클라우드 데이터를 수집하는 방법에 대한 질문이 제기됨
     * CGI 및 비디오 게임에 유용함
"
"https://news.hada.io/topic?id=18469","마닐라 폴더로 제작된 Boeing 777-300ER 축소 모형","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   마닐라 폴더로 제작된 Boeing 777-300ER 축소 모형

     * 프로젝트 소개
          + 이 프로젝트는 고등학교 건축 수업에서 시작되었으며, 마닐라 파일 폴더를 사용하여 건물 아이디어를 모델링하는 방법을 배움.
          + 종이의 다재다능함에 매료되어 보잉 777-300ER의 모형을 제작하게 되었음.
          + 2008년 중반에 시작된 이 프로젝트는 여러 번의 수정 과정을 거쳐 매우 상세하고 실제와 유사한 모형으로 발전함.
          + Adobe Illustrator를 사용하여 더 정교한 부품을 설계하고 인쇄함.
     * 연구
          + 웹에서 사진과 비디오를 찾아 자료를 수집함.
          + 기술 도면을 얻을 수 있을 때도 있음.
          + 특정 부분의 본질적인 형태와 기능을 이해하기 위해 자료를 연구함.
     * 디자인
          + 3D 형태를 2D 슬라이스로 평면화하여 종이에 인쇄하고 조립하는 방법을 고민함.
          + Adobe Illustrator에서 최종 제품을 구성하는 모든 부품의 2D 계획을 작성함.
          + 일반적인 형태와 치수를 결정한 후, 세부 사항과 기능을 추가함.
          + 디자인이 확정되면, 개별 부품으로 나누고 인쇄를 위해 배열함.
          + 복잡한 부품의 경우, 작은 테스트 섹션을 만들어 디자인을 검증함.
     * 인쇄 및 조립
          + 디자인 과정만큼 시간이 많이 소요됨.
          + 폴더를 프린터에 적합한 크기로 잘라 계획을 직접 인쇄함.
          + Xacto 칼을 사용하여 개별 부품을 잘라내고, 섹션으로 배열한 후 Tacky Glue로 붙임.
          + 복잡한 부품은 여러 작은 하위 섹션으로 구성되어 있으며, 각각 별도로 조립한 후 결합함.
     * 도구
          + Xacto 칼, 커팅 매트, 직선자, 정사각형, 정밀한 접착제 도포를 위한 이쑤시개를 사용함.
     * 추가 정보
          + 프로젝트에 대한 사진과 비디오의 방대한 카탈로그를 확인할 수 있으며, 추가 업데이트를 기대할 수 있음.
          + 인스타그램, 플리커, 유튜브에서 프로젝트를 팔로우할 수 있음.

        Hacker News 의견

     * 이 작품의 세부 사항이 매우 정교하며, 실제 항공기를 만드는 것과 비슷한 시간과 노력이 필요함
          + 실제 제트기를 만드는 것은 훨씬 더 어렵지만, 이 모델을 만드는 것은 경비행기를 만드는 것과 비슷함
     * 마법처럼 보이게 하는 것은 많은 시간을 투자하는 것에서 비롯됨
          + 놀라운 작품이며, 집중력에 감탄과 부러움을 느낌
     * Boeing 777은 최고의 공학적 업적 중 하나로, 훌륭한 항공기 선택임
     * 균형을 맞추기 위해 Boeing 777로 마닐라 폴더를 만드는 사람이 필요함
     * 2014년에 처음 이 작품을 봤으며, 그때도 놀라웠음
     * ""마닐라 폴더로 만들어졌다""는 표현이 처음에는 혼란스러웠음
          + 마닐라에서 발생한 사건의 정보를 담은 폴더인 줄 알았음
     * 이 작품은 세부 사항에 대한 애정 어린 헌신이 돋보이며, Top Gear 에피소드에서 본 Ferrari 312PB 경주차의 기능적 축소 모델을 만든 엔지니어 취미가 생각남
     * 2D 재료로 3D 객체를 만드는 정교한 방법에 대해 Metal Earth 제품을 추천함
          + 복잡성은 훨씬 낮으며, 조립하는 데 10-20시간 정도 소요됨
     * 파일이나 미리 잘라진 시트를 공개하여 궁극의 축소 모델 키트를 만들면 좋겠음
          + 레이저 커터로 얇은 알루미늄 시트로 모델을 만드는 것이 멋질 것임
     * 2D 디자인을 어떻게 만드는지 궁금함
          + 모든 조각이 맞아야 하며, 참고 자료와 2D 일러스트레이터 디자인 사이에 누락된 단계가 있는 것 같음
"
"https://news.hada.io/topic?id=18496","WebAuthn 둘러보기 [e북]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           WebAuthn 둘러보기 [e북]

     * FIDO Auth 컨퍼런스에서 무료 배포된 Adam Langley의 책 ""A Tour of WebAuthn"" PDF를 HTML로 변환한 것

목차

     * 1: Introduction
     * 2: Universal Second Factor
     * 3: FIDO2 and passkeys
     * 4: WebAuthn
     * 5: Relying party IDs
     * 6: CTAP2
     * 7: Attestation
     * 8: WebAuthn on the web
     * 9: Extensions
     * 10: Hybrid transport
     * 11: Platform APIs
     * 12: The server side
     * 13: Public key formats

   패스워드는 쓰레기다!
"
"https://news.hada.io/topic?id=18514","SQLite에 관한 재미있는 사실들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          SQLite에 관한 재미있는 사실들

     * SQLite는 가장 많이 배포되고 사용되는 데이터베이스임
          + 1조 개 이상의 SQLite 데이터베이스가 사용 중이며, 세 명의 사람이 유지 관리함
          + 외부 기여를 허용하지 않음
     * SQLite는 다른 모든 데이터베이스 엔진을 합친 것보다 더 많이 사용됨
          + 수십억 개의 SQLite 복사본이 존재하며, 어디에나 있음
     * SQLite는 가장 많이 배포된 소프트웨어 모듈 중 하나임
     * Hwaci는 SQLite를 개발한 회사이며, 음악에도 관심이 있음
     * SQLite는 미국 전함에서 시작됨
          + D. Richard Hipp(DRH)는 USS Oscar Austin이라는 해군 구축함을 위한 소프트웨어를 개발 중이었음
          + 서버가 다운될 때마다 기존 소프트웨어가 작동을 멈추는 문제가 있었음
          + DRH는 서버 없이도 작동하는 데이터베이스를 구상함
     * SQLite는 법적 의미에서 오픈 소스가 아님
          + 오픈 소스는 특정 정의와 OSI의 승인을 받은 라이선스가 필요함
          + 대신 SQLite는 퍼블릭 도메인에 속하며, 오픈 소스 라이선스보다 제한이 적음
     * 외부 기여를 허용하지 않음
          + 초대받은 사람만 기여 가능하며, 기여는 퍼블릭 도메인에 헌신해야 함
     * SQLite의 테스트 코드
          + SQLite의 코드 한 줄당 600줄 이상의 테스트 코드가 존재함
          + 테스트는 라이브러리의 모든 분기를 100% 커버함
     * 일부 SQLite 테스트는 독점적임
          + TH3라는 테스트 스위트는 독점적이며, 접근하려면 SQLite 컨소시엄에 가입해야 함
     * SQLite의 비즈니스 모델
          + 유료 지원, 유지보수 서비스, 컨소시엄 멤버십, 상업적 확장을 통해 수익을 창출함
     * SQLite는 행동 강령 대신 윤리 강령을 가짐
     * SQLite는 매우 빠르며, 일부 사용 사례에서는 파일 시스템보다 35% 빠름
     * SQLite는 단일 작성자 모델을 가짐
          + 여러 작성자를 동시에 허용하지 않음
     * 다른 데이터베이스와의 차이점
          + 기본적으로 롤백 저널 모드를 사용하며, 외래 키는 비활성화 상태임
          + 약한 타입을 사용하며, 강한 타입은 선택 사항임
     * SQLite는 타입이 없다는 점이 불편함
          + 타입 제약 없이 데이터를 삽입할 수 있음
     * SQLite는 호환성을 매우 중요시함
          + 모든 SQLite 3 버전은 초기 버전의 데이터베이스 파일을 읽고 쓸 수 있음
     * SQLite의 저자인 DRH는 기존 버전 관리 시스템이 적합하지 않다고 판단하여 Fossil을 개발함
     * DRH는 비행기에서 TAOCP 책의 알고리듬을 기반으로 B-Tree를 코딩함
     * SQLite의 발음은 ""Ess-Cue-El-Lite""로 권장되지만, 공식적인 가이드는 없음

   SQLite는 생각보다 빠른 DB는 아닙니다. 이제는 지원 중단된 MongoDB Realm이 훨씬 빠릅니다. 사람들에게 속도는 그렇게 중요한 선택 요인은 아니었던 것 같습니다.

   왜 Realm이 빠르냐고 질문을 하고 근거를 요청하신 분이 있는데 MongoDB가 지원 중단을 하며 글을 삭제한 것 같네요.

   그래서 한 때 일했던 입장에서 기억나는 기술적인 이유를 설명해드리려고 합니다. 가장 큰 이점은 Realm이 SQLite 대비해 더 적은 메모리를 사용하고 캐쉬 히트율이 높았던 점이 가장 큰 이유였다고 생각됩니다.

   Realm은 기본적으로 사용하는 사이즈를 기반으로 메모리에 저장되는 용량을 선택합니다. 그래서 사용자가 큰 사이즈의 자료형을 선택하더라도 수 비트의 작은 사이즈로 직렬화를 하는 경우가 많습니다. 실제로 사용자가 더 큰 자료를 쓰는 경우에 컨버전을 합니다.

   Realm은 같은 자료형끼리 묶어서 인접해서 저장합니다. 사용자는 테이블의 모든 데이터에 접근하지 않고 일부 데이터를 연속으로 접근 하는 경우가 많습니다. 위에 이야기했던 적은 사이즈의 인코딩 때문에 한번에 캐쉬에서 찾을 수 있는 데이터가 훨씬 더 많아지겠죠.

   Realm은 POJO 객체에 hydrate를 하지 않고 getter와 setter에서 필요할 때 자료를 전달하는 형식입니다. 이를 위해 자바의 경우에는 바이트 코드 수준에서 조작을 합니다. Protobuf와 같은 자료형이 그 당시 Meta의 Facebook 앱 클라이언트에 쓰였던 이유가 이 hydrate 과정이 성능상의 큰 단점이 되고 필요한 데이터만 접근하는게 이점이 있기 때문입니다.

   Realm은 SQLite에 비해서 대부분의 시나리오에서 훨씬 빨랐지만 이 부분이 시장에서 큰 요인은 아니었다고 생각합니다.

   Realm의 가장 큰 경쟁자는 Facebook에서 만들었던 파스였던 것으로 기억을 합니다. 그 이후에는 Google의 Firebase가 경쟁자가 되었고요. 이 둘은 로컬 모바일 데이터베이스는 아니고 원격에 데이터를 간단하게 저장할 수 있는 서비스입니다. 어떻게 Realm의 경쟁자가 이 둘이 될 수 있냐 싶지만 실제 유저는 그냥 어디든 저장하면 되고 속도는 크게 중요하지는 않았던 것 같습니다.

   그리고 이후 에릭슨이 투자하게 되며 Realm의 범위는 축소되었습니다. 에릭슨은 Realm이 iOS에서 어느 정도 점유를 하고 있는데 더 기능 개발하는 것을 이해하지 못했습니다. 그리고 동기화 솔루션으로서의 가치를 더 인정했고요. 이후 MongoDB에 Realm은 합병되었습니다.

   SQLite를 선택했던 이유의 8할은 다루기 쉽다는 것이었던 것 같네요.

   이것도 중요한 이유중 하나로 생각합니다. Realm은 스레드 로컬 기반으로 사용법을 제공했고, 자동 업데이트를 제공했으며, 다른 스레드에서 새로 질의를 하면 매우 적은 비용으로 같은 데이터를 전달한다고 이야기했고, 다른 스레드로 자료를 전달하지 말 것을 권고했지만 이런 이야기를 설명하기는 쉽지 않았습니다.

   정말 다양한 곳에서 sqlite를 사용하는 것 같아요!

   SQLite의 알려지지 않은 이야기

        Hacker News 의견

     * OSI가 오픈 소스의 기준이 아니라는 의견이 있음. OSI의 오픈 소스 정의는 유용하지만 비판과 논란이 있음. SQLite는 법적으로 오픈 소스가 아니라고 하는 것은 잘못된 주장임
          + OSI의 승인에 의존하는 것은 바람직하지 않음. OSI 승인 라이선스 목록은 실용적이고 정치적인 역사만을 반영함
          + SQLite가 오픈 소스인지에 대한 논란이 있음. 공공 도메인 헌신은 라이선스가 아니기 때문에 OSD를 충족하지 않지만, 더 개방적임
     * 블로그가 인기 주제에 대한 재활용된 오래된 포인트를 사용하여 조회수와 참여를 유도하려는 시도로 보임
          + 블로그의 이전 게시물은 기술적 깊이가 부족하고 과장된 내용이 많음
     * SQLite는 행동 강령(CoC)이 아닌 윤리 강령(CoE)을 가지고 있음. CoC는 외부 기여자의 행동을 제어하기 위한 도구로 사용되며, CoE는 SQLite 개발자가 다른 사람에게 의도한 행동을 선언하는 것임
     * SQLite의 발음에 대한 혼란이 있음. ""Ess-Cue-El-Lite""로 발음된다고 하지만, ""S-Q-L-ite""로 발음하는 사람도 있음
     * SQLite는 선택적으로 엄격한 테이블을 지원함. CREATE TABLE name (stuff TEXT) STRICT를 사용하여 타입을 강제할 수 있음
     * SQLite는 SQL 데이터베이스일 뿐만 아니라 NoSQL 데이터베이스로도 사용 가능함. JSON 컬럼을 사용하여 데이터를 저장하는 방식이 유용함
     * Richard Hipp와 함께 프로젝트를 진행한 경험이 있음. 그는 지원 계약을 통해 안정적인 수익을 얻고 있음
     * SQLite의 한 릴리스에서 많은 마이크로 최적화를 통해 성능이 50% 향상됨
     * SQLite를 빠른 프로토타이핑과 로그 덤프에 사용하지만, 멀티 라이터를 원할 때 어려움이 있음. 이는 SQLite를 벗어나게 되는 주요 이유 중 하나임
     * SQLite는 단일 작성자 모델을 가지고 있음. Redis도 단일 스레드 모델임
     * SQLite의 재미있는 사실 중 하나는 사용자들이 개발자에게 밤중에 전화를 걸기 시작했을 때 기본 접두사를 sqlite_에서 etilqs_로 변경해야 했던 일임
"
"https://news.hada.io/topic?id=18444","HN 공개: ArXiv 논문을 의미적으로 검색하는 웹사이트 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HN 공개: ArXiv 논문을 의미적으로 검색하는 웹사이트 제작

        Hacker News 의견

     * mixbread의 모델을 사용하는 이유에 대한 질문이 있음
     * 임베딩을 이진화하고 해밍 거리 사용 시 효율성 향상에 대한 질문이 있음
     * 다른 벡터 저장소보다 milvus를 선택한 이유에 대한 질문이 있음
     * 주간 메타데이터 자동화 여부에 대한 질문이 있음
     * ""바이트 레벨에서의 트랜스포머"" 검색에 대한 사용자 의견이 좋았으나 최신 논문이 검색되지 않았음
          + 더 많은 결과 밀도를 원할 경우 UI 옵션으로 초록을 축소하여 첫눈에 더 많이 표시하는 것을 고려할 수 있음
     * arxiv 외의 확장을 고려할 때, 큰 출판사들이 OpenAlex 등에서 초록을 제거하도록 강요하고 있어 문헌 리뷰에 어려움이 있을 수 있음
     * undermind.ai, scite.ai, elicit.org 같은 다른 도구를 확인해보았는지에 대한 질문이 있음
     * 문헌 리뷰를 위한 전용 제품 워크플로우에 검색 외에 무엇이 포함될 수 있는지 고려할 필요가 있음
     * 과거에 gensim/doc2vec와 같은 벡터 데이터베이스에서 실시간 CPU 브루트 포스가 가능했음
     * 의미론적 검색이 유용할 수 있는 다른 좋은 분야에 대한 아이디어가 있음
          + 온라인 광고 검색: 비디오 및 이미지 광고를 임베딩하고 인덱싱하여 마케팅 영감을 찾을 수 있음
          + 다중 전자상거래 플랫폼 검색: Sephora, zara, h&m 등에서 제품을 찾을 수 있음
     * 각 논문에 ""유사 논문"" 링크를 추가하면 주제를 발견하는 데 유용할 것이라는 의견이 있음
     * 의미론적 검색이 텍스트 검색보다 어떤 이점이 있는지에 대한 질문이 있음
          + 검색 개선 여부를 확인할 수 있는 벤치마크가 있는지에 대한 질문이 있음
     * Allen Institute for AI의 Semantic Scholar와 유사한지에 대한 질문이 있음
     * paper-qa의 백엔드에 검색 도구 클라이언트를 추가할 수 있다는 제안이 있음
     * scihib를 크롤링하여 연결해보고 싶다는 의견이 있음
     * 인코딩 문제에 대한 의견이 있음
          + ""UPC 고성능 컴퓨팅 평가""를 검색하면 저자 이름에 버그가 있는 논문이 검색됨
"
"https://news.hada.io/topic?id=18478","구글 검색 결과는 오염되었고, Open AI는 구글의 2000년대 전략을 활용중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              구글 검색 결과는 오염되었고, Open AI는 구글의 2000년대 전략을 활용중

  구글의 검색 결과는 광고로 가득 차 있으며, Open AI는 2000년대 구글의 전략을 사용 중임

     * 2000년대의 구글 성공 요인
          + 구글은 단순하고 사용하기 쉬운 인터페이스로 성공을 거두었음
          + 당시 야후는 너무 많은 선택지를 제공하여 사용자가 피로감을 느끼게 했음
          + 구글은 간단한 검색 입력창과 명확한 결과 리스트로 사용자의 선택을 쉽게 했음
     * 광고의 등장
          + 초기 구글 광고는 검색 결과 외부에 명확히 표시되었으며, 사용자가 원하는 광고를 보여주는 방식이었음
          + 그러나 시간이 지나면서 광고가 검색 결과 위에 배치되기 시작했고, 이는 유기적 결과를 밀어내는 결과를 초래했음
          + SEO 산업의 발전으로 유기적 결과가 최적화된 광고성 콘텐츠로 변질되었음
     * 2024년의 AI와 구글
          + 현재 구글 검색 결과의 상위 20%는 AI가 생성한 텍스트로 가득 차 있으며, 그 뒤로 구글 제품, 광고, 유튜브 영상 등이 이어짐
          + 사용자는 원하는 정보를 찾기 위해 많은 시각적 잡음을 헤쳐 나가야 함
          + 이는 2000년대 야후의 선택지 마비와 시각적 혼란을 연상시킴
     * OpenAI의 ChatGPT 검색
          + ChatGPT의 검색 결과는 대화 형식으로 제공되어 시각적 혼란이 적음
          + 하나의 답변을 제공하며, 사용자는 대화를 통해 정보를 얻을 수 있음
          + OpenAI는 아직 검색을 통해 수익을 창출하지 않으며, 신뢰할 수 있는 소스와 연결된다는 점을 강조함
     * 미래의 방향성
          + OpenAI가 신뢰를 구축할 수 있다면, 구글을 대체할 가능성이 있음
          + 구글은 과거의 단순함과 신뢰성을 회복해야 할 필요가 있음

        Hacker News 의견

     * 한 사용자는 오디오북에서 들은 인용구를 찾으려고 했으나 Google 검색 결과가 실망스러웠음을 공유함. o1이라는 다른 검색 엔진이 더 나은 결과를 제공했음을 언급함
          + Google이 본래의 가치를 제공하지 못하고 있으며, 대체될 필요가 있음을 주장함
     * SEO 산업을 ""Dark Google""로 비유하며, Google의 검색 결과 무결성을 위협하는 강력한 세력으로 설명함
          + Google이 Dark Google의 경제적 유인에 점점 더 의존하게 되었음을 지적함
          + AI도 결국 이러한 유인에 저항할 수 없을 것이라고 경고함
     * SEO가 Google의 알고리즘에 의해 웹을 망쳤으며, LLM 생성 콘텐츠로 인해 상황이 더 악화될 것이라고 우려함
     * Google의 알고리즘이 사용자가 원하는 것을 찾기 어렵게 만들었다고 비판함
          + Google이 더 도움이 되려고 했지만 오히려 더 나빠졌다고 언급함
     * Google의 성공은 단순하고 사용하기 쉬운 인터페이스 덕분이 아니라, 대안보다 훨씬 나았기 때문이라고 주장함
     * SEO 전문가들이 LLM의 학습 데이터에 자사 콘텐츠를 포함시키려는 시도를 하고 있다고 설명함
          + 미래에는 모든 곳에 제품 배치가 있을 수 있다고 우려함
     * Google이 정부의 자산이 되었으며, 사용자가 보는 것을 선택함으로써 생각과 행동을 통제한다고 주장함
          + Open AI도 처음부터 같은 목표를 가지고 있다고 언급함
     * Google의 검색 결과가 몇 년간 쓸모없었으며, 이제는 LLM이 모든 질문에 대한 답변을 제공한다고 설명함
     * Google의 검색이 Yahoo처럼 변하고 있으며, Yahoo 검색을 망친 사람이 현재 Google을 이끌고 있다고 비판함
     * Google의 AI 개요가 유용하다고 주장하며, 처음으로 질문에 대한 실제 답변을 얻을 수 있게 되었다고 언급함
          + 그러나 Google이 다시 검색을 어렵게 만들면 다른 곳으로 갈 것이라고 경고함
"
"https://news.hada.io/topic?id=18456","에포크 이후 경과 시간","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              에포크 이후 경과 시간

     * Epoch 이후의 초
          + POSIX 시간, 또는 Unix 시간은 1970년 1월 1일 00:00:00 이후의 초를 의미한다고 알려져 있음. 그러나 이는 정확하지 않음. 예를 들어, 2024년 12월 25일 18:54:53 UTC의 POSIX 시간은 1735152686이며, 이는 실제로 1735152715초가 경과한 것보다 29초 낮음.
          + POSIX 시간은 IEEE 1003.1에서 협정 세계시(UTC)로부터 파생됨. 표준은 매일이 정확히 86,400초라고 가정함. 그러나 실제로 하루의 길이는 86,400초가 아니며, 시간이 지남에 따라 변함. 이를 조정하기 위해 천문학자들은 주기적으로 UTC에 윤초를 선언함.
     * 고고학
          + IEEE 1003의 부록 B는 윤초에 대한 흥미로운 논의를 포함하고 있음. 표준이 발행될 당시, 1970년 1월 1일 이후 14개의 윤초가 추가되었음. 이러한 윤초는 시간 차이를 쉽게 계산하기 위해 무시됨.
          + 대부분의 시스템은 시간이 지속적으로 증가하는 값으로 간주함. 그러나 대부분의 시스템은 윤초를 추적하지 않으며, 표준 시간 참조에 동기화되지 않음. 따라서 Epoch 이후의 초가 참조된 시간과 Epoch 사이의 초를 정확히 나타내야 한다는 요구는 부적절함.
          + Epoch 이후의 초의 일관된 해석은 특정 유형의 분산 애플리케이션에 중요할 수 있음. 윤초의 누적은 예측할 수 없으며, Epoch 이후의 윤초 수는 증가할 가능성이 있음.
     * 대신 해야 할 일
          + 한 컴퓨터에서 두 이벤트 간의 지속 시간을 계산하려면 CLOCK_MONOTONIC을 사용해야 함. 다른 시스템과 POSIX 시간을 교환할 필요가 없다면 TAI, GPS 또는 LORAN을 사용할 수 있음.
          + POSIX 타임스탬프 시스템과 대략적인 정렬이 필요하다면, 윤초를 더 긴 시간 창에 걸쳐 분산시킬 수 있음. qntm의 t-a-i와 같은 라이브러리는 POSIX와 TAI 간의 변환을 지원함.
          + 윤초를 없애려는 노력이 진행 중이며, 2035년까지 완료되기를 희망함. 이는 ""하루에 86,400초""라는 가정을 사용하는 모든 것에 변환 테이블을 구축하는 추가 작업이 필요하지만, 두 시간 사이의 초를 묻는 것이 더 간단해질 것임. 적어도 2035년 이후의 시간에 대해서는.

        Hacker News 의견

     * ""A Deepness in the Sky""라는 SF 책을 읽었음. 책에서 에포크 이후 초에 대한 언급이 흥미로웠음
          + Qeng Ho의 시간 측정 방법이 복잡했으며, 인간이 처음 달에 발을 디딘 순간부터 초를 세기 시작했음
          + 시작 순간은 실제로 약 1,500만 초 후였으며, 이는 초기 컴퓨터 운영 체제의 0초였음
     * 윤초를 없애려는 노력이 진행 중이며, 2035년까지 완료되기를 희망함
          + UTC의 목적은 TAI에서 정수 초만큼 떨어져 평균 태양 시간을 근사하는 것임
          + MST를 추적하지 않으려면 TAI로 전환해야 하며, UTC가 MST에서 벗어나면 역사적인 윤초가 의미가 없어짐
     * 현대 ""UTC 에포크""는 1972년 1월 1일임
          + 1971년 말에 0.107758 TAI 초의 불규칙한 점프가 있었으며, 이후 UTC의 틱 속도가 TAI와 정확히 일치하도록 변경됨
          + 1970년과 1971년의 유닉스 시간은 실제로 그 기간의 UTC 시간과 일치하지 않음
     * 시간 측정에 대해 읽을 때마다 새로운 것을 배움
          + 유닉스 시간이 가장 간단한 시간 추적 방법이라고 생각했음
          + 윤초가 적용되지 않는다고 생각했지만, 충분히 생각하지 않았던 것 같음
     * 최근 VAX, 또는 OpenVMS 위에서 실행되는 코드에 대해 작업했으며, 에포크가 1858년 11월 17일인 것을 처음 봄
          + 코드에서는 유닉스 에포크로 추상화되어 있었음
     * 일부 시간 지점은 POSIX 타임스탬프로 표현할 수 없으며, 일부 POSIX 타임스탬프는 실제 시간과 일치하지 않음
     * 이 기사가 크리스마스를 망쳤다고 생각함
          + 초는 에포크 이후 초여야 하며, 태양일에서 벗어나도 상관없음
          + 초-에포크 변환기가 수정 작업을 담당해야 함
     * 데이터베이스에 날짜를 저장할 때 항상 유닉스 에포크 시간으로 저장하며, 시간대 정보는 별도로 저장함
          + TAI 형식으로 타임스탬프를 저장하고, 필요한 경우 UTC로 변환하는 것이 더 나을지 고민함
          + 시간대는 인간이 만든 개념이며, 시간이 지남에 따라 조정됨
          + 절대 시간을 기준으로 하고, 필요할 때 로컬 시간 형식으로 변환해야 함
     * 약 10년 전 컨퍼런스에서 Google이 윤초를 사용하지 않고, 이를 정규 초에 분산시킨다는 이야기를 들었음
          + Google은 NTP 서버를 수정하여 윤초를 분산시킴
     * 동기화되고 단조롭게 증가하는 시간 측정 방법이 있는지 궁금함
"
"https://news.hada.io/topic?id=18432","적대적 정책, 초인적 Go AI 제압 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      적대적 정책, 초인적 Go AI 제압 (2023)

컴퓨터 과학 > 머신러닝

     * 제목: Adversarial Policies Beat Superhuman Go AIs
     * 저자: Tony T. Wang, Adam Gleave, Tom Tseng, Kellin Pelrine, Nora Belrose, Joseph Miller, Michael D. Dennis, Yawen Duan, Viktor Pogrebniak, Sergey Levine, Stuart Russell
     * 제출일: 2022년 11월 1일 (v1), 마지막 수정 2023년 7월 13일 (v4)

  요약

     * 연구팀은 최첨단 바둑 AI 시스템인 KataGo를 대상으로 적대적 정책을 훈련하여, 초인적 설정에서 KataGo를 상대로 97% 이상의 승률을 달성함.
     * 적대적 정책은 바둑을 잘 두어서 이기는 것이 아니라, KataGo가 심각한 실수를 하도록 유도함.
     * 이 공격은 다른 초인적 바둑 AI에도 제로샷으로 전이되며, 인간 전문가가 알고리듬의 도움 없이도 일관되게 초인적 AI를 이길 수 있을 정도로 이해 가능함.
     * 공격에 대응하도록 적대적 훈련된 KataGo 에이전트에서도 발견된 핵심 취약점이 지속됨.
     * 연구 결과는 초인적 AI 시스템도 놀라운 실패 모드를 가질 수 있음을 보여줌.

  추가 정보

     * 논문 상태: ICML 2023에 수락됨
     * 주제: 머신러닝 (cs.LG); 인공지능 (cs.AI); 암호학 및 보안 (cs.CR); 머신러닝 (stat.ML)
     * ACM 분류: I.2.6
     * 인용: arXiv:2211.00241 [cs.LG] (또는 arXiv:2211.00241v4 [cs.LG] 이 버전)
     * 제출 이력:
          + [v1] 2022년 11월 1일
          + [v2] 2023년 1월 9일
          + [v3] 2023년 2월 18일
          + [v4] 2023년 7월 13일

  접근 방법

     * PDF 및 다른 형식으로 논문 접근 가능
     * 관련 논문 및 인용 도구 제공

  arXiv 정보

     * arXiv는 연구 논문을 공유하는 플랫폼으로, 다양한 주제의 논문을 제공함.

        Hacker News 의견

     * 한 사용자는 논문이 처음에는 놀랍게 보이지만, 이해하기 어렵다고 언급함. Go와 Go AI에 대해 조금 알고 있으며, 체스와 체스 AI에 대해 많이 알고 있음에도 불구하고 설명이 부족하고 전문 용어가 많아 이해하기 힘들다고 느꼈음
          + 논문이 그들의 아이디어를 감추고 있다고 생각하며, 아이디어는 놀랍고 간단할 수 있다고 언급함
     * 체스의 엣지 케이스를 제시하며, Stockfish와 Lc0의 평가를 비교함
          + 첫 번째 경우, Stockfish와 Lc0는 백이 약간 유리하다고 평가함
          + 두 번째와 세 번째 경우, 둘 다 흑이 승리한다고 평가함
          + 네 번째 경우, Lc0는 이해하지만 Stockfish는 이해하지 못함
     * 바둑에서는 아마추어가 예측 불가능한 수로 인해 도전적인 상대가 될 수 있다고 언급함
          + 비정상적인 형태의 수가 가끔 효과적일 수 있음
     * Deep Blue 이후 체스 플레이어들이 컴퓨터에 대한 전략을 개선한 것을 상기시킴
          + 바둑의 경우 공간이 더 크기 때문에 더 많은 반컴퓨터 전략이 있을 가능성이 있음
          + 평가 함수의 취약점을 이용하는 방식임
     * 체스에서도 더 많은 계산이 승리를 가져온다고 언급함
          + Elo는 승패의 측정치이며, 난이도와 혼동하면 잘못된 추론을 초래할 수 있음
     * 2022년부터 2023년까지 수정된 논문을 언급하며, 이전에 본 적이 있을 수 있다고 함
          + 이 접근 방식이 Leela 스타일의 체스 엔진에 대해 얼마나 효과적인지 궁금해함
     * 인간에게도 희망이 있다고 언급함
     * 논문이 바둑 AI에서 적대적 전략에 대한 방어를 통합하는 데 사용될 것이라고 언급함
          + 단순한 호기심이지만 AI 개발의 전반적인 상태를 반영함
     * ""우리의 결과는 초인적인 AI 시스템도 놀라운 실패 모드를 가질 수 있음을 보여준다""는 결론이 비어 있다고 언급함
          + 미래의 ""초지능""에 대한 의미가 없으며, 이러한 ""실패 모드""를 가질 수도 있고 아닐 수도 있음
"
"https://news.hada.io/topic?id=18433","Show GN: GitHub PR을 cherry-pick 해보세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: GitHub PR을 cherry-pick 해보세요

     * 사내에서 mono-repository를 사용하기 시작한지 4개월째
     * mono-repository 하면 따라다니는 키워드인 trunk-based development 또한 같이 적용 중
     * trunk-based development 전략에 따라 main 브랜치에 커밋을 하고, release 브랜치에 체리픽을 하는 flow를 사용하고 있음
     * LinkedIn 기술 블로그 내용을 바탕으로 GitHub Action을 구성하였으나, CONFLICT를 자동으로 해결해주지는 못함. CONFLICT가 발생하는 경우 사용자가 local에서 직접 git cherry-pick 명령을 수행해야함
     * 이 cherry-pick 명령을 도와주는 gh 플러그인을 직접 제작해보았습니다.

    사용법

gh cherry-pick -pr <pr_number> -onto <target_branch> [-merge auto|squash|rebase] [-push]

     * -merge 옵션을 통해 PR merge commit을 cherry-pick 할지, PR의 원본 commit들을 cherry-pick 할지 선택할 수 있음
          + 지정하지 않거나 -merge=auto 옵션을 사용하면, PR이 merge된 전략을 자동으로 inspect 하여 적용해줌
     * -push 옵션을 통해 cherry-pick 성공 시 자동으로 remote push를 지원함

    후기

     * 외부 프로세스 및 상태와 지속해서 상호작용하는 프로그램을 개발하며, 별도의 테스트 리포지토리를 만들어 Test Dataset을 생성함
          + 과거 libgit2 프로젝트 및 refined-github에 기여했던 경험이 도움이 됨
     * CLI 경험을 좋게 하기위한 여러 공부들
          + docker-cli 를 혼자 만들어보기 위한 공부가 도움이 됨
     * 생각보다 CLI 프로그램을 만드는데에는 많은 공수가 들어감
          + 파이프라인 형태에서 많은 상태값을 관리하는 것
          + 사용자에게 직관적인 input interface를 제공하는 것
          + input validation을 최대한 빠른 시점에 제공하는 것
          + 사용자 시스템을 원상태로 복구시키는 것 등..
          + 하루 정도 안에 만들 수 있을 것으로 예상했으나, 만드는데에 약 5일이 걸렸음 (GitHub Actions Workflow 개선을 위한 개발이 병렬로 진행되긴 했으나, 여전히 예상보다 훨씬 많은 시간이 소요됨)

   안녕하세요~ main(trunk) 브랜치에 머지된 커밋을 revert가 필요한 경우에는 어떻게 처리하시나요?
     * main 브랜치에 revert하면 release 브랜치도 체리픽 된다?
     * revert를 사용하지 않고 수정 커밋을 추가한다?

   커밋이 많이 쌓여있어 컨플릭이 발생하면 체리픽이 어려운 경우가 있을 것 같은데 그런 케이스를 처리하신 경험이 있는지 궁금합니다!

   안녕하세요~ 답글 달아주셔서 감사합니다!

     main(trunk) 브랜치에 머지된 커밋을 revert가 필요한 경우에는 어떻게 처리하시나요?

   Main 브랜치에 revert PR을 올린거에서 cherry-pick을 지정합니다. 원본 PR링크에 cherry-pick 히스토리가 모두 남아있기 때문에 추적에 어려운건 없습니다. 별도로 기계적인 체크를 수행하는건 없습니다 ㅎㅎ

     커밋이 많이 쌓여있어 컨플릭이 발생하면 체리픽이 어려운 경우

   일단 trunk-based development 를 하게되면 매 PR이 작은 단위이기 때문에 컨플릭이 자주 나지 않습니다. 만약 컨플릭이 발생하는 경우라면 수작업으로 코드를 작성해야합니다. release 를 자주자주 해서 너무 과거 버전의 지원을 빠르게 deprecate 시켜 코드 형상이 크게 달라지는 현상을 피하고 있습니다!

   왜 이게 필요한지 잘 이해가 안가는 전략이네요...

   release-from-trunk에 소개되어있는 내용을 읽어보시면 이해해 도움이 되실까 싶습니다 ㅎㅎ
"
"https://news.hada.io/topic?id=18442","마스크, 연기, 그리고 미러: EgyptAir 항공편 804의 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 마스크, 연기, 그리고 미러: EgyptAir 항공편 804의 이야기

서문

     * 이 기사는 이집트항공 804편의 미스터리를 다룸.
     * 7년 동안 비행기 사고에 대해 글을 써왔으며, 이번 사건은 해결되지 않은 상태로 남아 있었음.
     * 이 기사는 사건의 진실을 밝히기 위한 여정과 그 과정에서의 어려움을 설명함.

1부: 804편이 실종됨

     * 2016년 5월 19일, 파리에서 카이로로 향하던 이집트항공 804편이 지중해 상공에서 레이더에서 사라짐.
     * 사고 직후, 이집트와 프랑스 전문가들 간의 의견 충돌이 발생함.
     * 이집트는 폭탄 테러를 주장했으나, 프랑스는 조종석 화재를 의심함.
     * 8년 후, 이집트는 최종 보고서를 발표하며 두 가지 상반된 이론을 제시함.

2부: 미해결 사건

     * 사고 조사 후, 이집트는 더 이상 업데이트를 제공하지 않음.
     * 프랑스는 자체적으로 조사를 진행하며, 폭발물 흔적을 찾지 못했다고 발표함.
     * 이집트는 폭발물 흔적을 발견했다고 주장하며, 형사 수사를 시작함.

3부: 폭발 증거

     * 이집트 보고서는 의도적인 폭발이 사고 원인이라고 주장함.
     * 프랑스 보고서는 조종석 산소 마스크의 결함으로 인한 화재를 원인으로 제시함.
     * 두 보고서는 서로 상반된 결론을 내림.

결론

     * 이집트항공 804편의 사고 원인은 여전히 논란의 여지가 있음.
     * 두 보고서의 상반된 결론은 혼란을 초래할 가능성이 큼.
     * 사건의 진실을 밝히기 위해 추가적인 조사가 필요함.

        Hacker News 의견

     * EAAID가 보고서를 작성한 방식이 은폐를 명백히 드러내려는 의도가 있었음. 보고서의 논리가 스스로 모순되는 점에서 의도적인 저항이 있었을 가능성이 있음
     * 항공기 조종석에서의 흡연 규정이 명확하지 않으며, 국제 규정에 따라 기장이 흡연 여부를 결정할 수 있는 권한이 있음
     * 산소 누출로 인한 화재가 매우 강력한 불꽃 효과를 일으켰으며, 산소 농도가 높으면 강철도 연소할 수 있음. 순수 산소 사용의 이유가 있음
     * 스위스 치즈 모델의 실패로 인한 비극적 사건. 할론 소화기가 산소 기반 연소를 막지 못하고 독성 물질을 생성함. 2025년까지 대부분의 상업 항공기에서 할론 소화기가 단계적으로 폐지될 예정임
     * UPS Flight 6 사고를 상기시킴. 화재로 인해 부조종사의 산소 시스템이 과열되어 착용할 수 없었고, 연기 흡입으로 인한 저산소증으로 사망함. 조종사는 연기로 인해 계기판을 볼 수 없어 추락함
     * 저자는 항공기 추락 사고 분석가로 보임
     * 순수 산소 탱크 대신 산소와 질소 혼합물을 사용할 수 있는지에 대한 의문이 제기됨. 다이버들은 혼합물을 사용함
     * 이집트 과학계는 과학적 부정행위 문제를 겪고 있음. 이집트 정부 기관의 ""진실 대 체면"" 태도가 비슷할 수 있음. 이집트는 일반적으로 신뢰 수준이 낮은 사회임
     * 이집트항공 990편 사건은 현대 항공기 조종사 자살 사건 중 하나로, 이집트는 NTSB의 결론에 동의하지 않음. 최근 몇 년간 조종사 자살 사건이 증가하고 있음. 중국동방항공 5735편 사건도 조사 중이나 중국의 인정은 기대하기 어려움. 여러 항공사에서 조종사 선발에 문제가 있음
"
"https://news.hada.io/topic?id=18518","Kent Hendricks가 2024년에 배운 52가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Kent Hendricks가 2024년에 배운 52가지

    1. Firefox나 Chrome을 사용하는 직원은 Internet Explorer나 Safari를 사용하는 직원보다 직장 만족도가 더 높고 이직률이 15% 낮음. 이는 기본 설정을 그대로 따르지 않고 스스로 선택하려는 성향 때문임
    2. 10월 31일, ADHD 진단율이 평소보다 14% 더 높음. 이는 아이들이 할로윈에 흥분한 상태이기 때문이며, 실제로 ADHD 환자가 더 많아지는 것은 아님
    3. 미국에서 정책이 승인될 확률이 50%에 도달하려면 국민의 90%가 동의해야 함
    4. 남성이 자신의 남성성이 위협받는다고 느낄 경우, SUV를 구매하려는 의향이 24% 증가하며, 같은 차량에 대해 평균 $7,320을 추가 지불할 의향이 있음
    5. 욕설을 하면 악력이 9% 증가하고, 벽에 기대는 자세 유지 시간이 22% 증가하며, 플랭크 자세 유지 시간이 12% 증가함
    6. 모든 문화권에서 ""검정""과 ""흰색""은 반드시 색 이름으로 존재함. 세 번째로 등장하는 색은 항상 ""빨강""이며, 네 번째는 ""노랑"" 또는 ""초록""임
    7. 뉴욕, 보스턴, 필라델피아 거리에서 걷는 속도는 1979년 이후 평균 15% 증가했음
    8. 미국 모텔의 약 절반은 인도계 미국인이 소유하고 있으며, 이들 중 70%는 Patel이라는 성을 가짐
    9. 2007년 이후 젊은 남성의 캐주얼 성관계 감소의 25%는 비디오 게임 사용 증가 때문임
   10. ChatGPT가 등장한 이후 Upwork에 게시된 프리랜서 일자리가 2% 감소했음
   11. 사람이 300단어를 작성하는 동안 27g의 CO2를 배출하는 데 비해 ChatGPT는 2.2g만 배출하며 4.4초 만에 작업을 완료함
   12. 러시아는 구글이 친러시아 미디어 채널 차단에 대해 $10^30의 벌금을 부과했으며, 매주 두 배로 늘어나는 방식으로 설정됨
   13. 미국 의회 선거구에서 중국으로 파견된 선교사 비율이 10% 증가하면, 그 지역 의원의 외교 원조 찬성 가능성이 8% 증가함
   14. 메인 주의 법률에 포함된 옥스포드 콤마의 애매성으로 인해 트럭 운전사들이 초과 근무 수당으로 $500만을 추가로 받게 됨 (옥스포드 콤마는 3개 이상 항목을 나열할때 and/or 바로 앞에 콤마를 붙이는 방식)
   15. 한 도시에서 수돗물에 불소를 첨가하면 치과 개업률이 9% 감소함
   16. 온라인 스포츠 도박 합법화는 스포츠 도박가의 신용 카드 부채를 8% 증가시키며, 저소득 가구는 고소득 가구보다 32% 더 많은 금액을 도박에 지출함
   17. 피젯 스피너는 기억력 향상에 전혀 효과가 없음
   18. 현대 닭은 100년 전보다 운동량이 적어 요리 시간이 두 배 더 걸림
   19. 미국에서 아기 이름 트렌드는 과거 가족 이름에서 인기 이름으로, 그리고 최근에는 특정 끝소리(-son) 중심으로 변화함. 현재 상위 500개 이름 중 48%가 10개의 특정 끝소리를 공유함
   20. 아일랜드 평화유지군이 레바논에 오랫동안 주둔하면서 일부 레바논 사람들이 아일랜드 억양을 갖게 됨
   21. 1985년, 조지아주 북부에서 코카인을 과다 복용해 죽은 곰이 박제로 만들어짐. 켄터키의 결혼 법률상 허점 때문에 결혼식 주례를 할 수 있는 법적 권한을 부여받음
   22. 1917년 교회법에 따르면 달은 올랜도 교구의 관할권에 속하게 됨. 이는 탐험이 출발한 교구가 새로운 발견지의 관할권을 가지는 규칙 때문임
   23. 달 탐사 프로그램인 아폴로는 대부분의 미국인들에게 인기가 없었으며, 아폴로 11호 착륙 직후 53%의 지지를 받은 것이 유일한 예외임
   24. 여성들은 자신보다 매력적이라고 느끼는 여성들에게 더 짧은 헤어스타일을 추천하는 경향이 있음
   25. 헤비메탈 기타리스트의 빠른 연주 능력은 동성 경쟁에서 높은 동기부여를 나타내며, 여성보다 다른 남성에게 더 큰 인상을 주기 위한 동기가 됨
   26. 임신은 약 50,000칼로리를 소모하며, 이는 1년 동안 작은 메이플 나무를 유지하거나 마라톤 5번을 뛰는 데 필요한 에너지와 동일함
   27. 25세 이상의 남성은 17.4kHz 이상의 소리를 듣지 못하며, 영국에서는 이 주파수를 이용해 젊은 남성들을 쫓아내는 알람이 발명됨
   28. A.D. 750년까지 로마 황제의 초상화가 영국 동전에서 복제 오류로 인해 고슴도치 모양으로 변형됨
   29. 사람들은 다른 사람의 부정직성을 평균 13.6% 과대평가함
   30. 인도와 파키스탄의 독수리들은 소에게 투여된 항염증제인 디클로페낙의 미량으로 인해 사망하고 있으며, 이는 조로아스터교의 장례 의식을 위협함
   31. 프로그래밍 언어 C는 Python보다 에너지 효율성이 75.88배 더 높고 실행 속도가 71.9배 더 빠름
   32. 미국에서 부부는 평균적으로 4촌에서 5촌 정도의 유전적 유사성을 보임
   33. 남성만으로 구성된 그룹은 혼성 그룹에 비해 거짓말을 할 확률이 더 높으며, 여성이 한 명 추가되면 거짓말 비율이 급격히 감소함
   34. 영국 일부 지역에서 집들이 최소 21미터 떨어져 있어야 한다는 규정은 1902년 두 남자가 서로의 셔츠 너머로 유두를 보지 못하는 거리를 기준으로 정한 것에서 유래함
   35. 남성은 맥도날드에서 화면을 통해 주문할 때 햄버거를 두 개 주문할 가능성이 높아지지만, 사람에게 직접 주문할 때는 하나만 주문하는 경향이 있음
   36. 매사추세츠주는 점술사를 위한 면허를 요구하며, ""가짜 점술 행위""를 금지하는 법률을 가지고 있음
   37. 10대 임신을 방지하기 위해 개발된 아기 시뮬레이터는 오히려 소녀들의 임신율을 높였으며, 아기 시뮬레이터를 사용한 소녀들의 임신율은 8%, 사용하지 않은 경우는 4%였음
   38. 1990년대에 북한 지도자인 김정일과 김정은은 브라질 여권을 위조하여 도쿄 디즈니랜드를 방문했을 가능성이 있음
   39. 휘발유 가격이 갤런당 $3.50에 도달하면 부정적인 뉴스 보도가 시작되며, 이후 50센트 가격 상승마다 부정적인 보도가 7.5% 증가함
   40. 비행기에서 유아용 카시트가 필수적으로 요구되지 않는 이유는 좌석 공급 감소로 인해 항공료가 상승하고, 결과적으로 더 많은 가족이 자동차를 이용하게 되어 사고 위험이 높아지기 때문임
   41. 뉴스 헤드라인에 부정적인 단어가 하나 추가될 때마다 클릭 수가 2.3% 증가함
   42. 사람들이 집을 살지 말지 결정하는 데는 평균 27분이 걸리지만, 소파를 고르는 데는 평균 88분이 걸림
   43. 2019년 미국 연방 예산의 1%는 신장 투석 비용에 사용되었음
   44. 뿔, 엄니 등 무기를 발달시킨 수컷을 가진 동물 종에서는 암컷의 뇌 크기가 더 큼
   45. 최초의 인공위성 스푸트니크 1호 이전에 우주로 발사된 최초의 인간 물체는 핵실험 중 우연히 발사된 맨홀 덮개였으며, 이는 지구 탈출 속도의 6배에 해당하는 속도로 날아갔음
   46. 미국에서 학교 총격 사건 발생 후 NRA(전미총기협회)의 기부금은 30% 증가함
   47. TV 시트콤 Mork and Mindy 제작진은 로빈 윌리엄스가 삽입하려던 욕설을 잡아내기 위해 4개 언어를 구사하는 검열 담당자를 고용했음
   48. 베트남 전쟁 징병을 위한 복권 추첨은 사실상 무작위가 아니었으며, 잘 섞이지 않은 통에서 번호를 뽑았기 때문에 상위 번호가 더 자주 뽑힘
   49. 백악관을 방문하는 외국 지도자와 외교관은 세탁 서비스를 받을 권리가 있으며, 벤자민 네타냐후는 방문 시 항상 세탁물이 가득 든 가방을 가져오는 것으로 알려짐
   50. Waymo 자율주행 택시는 인간 운전자보다 재산 피해 청구율이 88% 낮고, 신체 부상 청구율이 92% 낮음
   51. 럭셔리 브랜드 로고 크기가 한 단계 커질 때마다 Gucci 제품 가격은 평균 $122.26, Louis Vuitton 제품 가격은 $26.27 낮아짐
   52. 황소는 빨간색을 볼 수 없음. 빨간색이 황소를 화나게 만드는 것이 아니라, ""부당한 대우""가 화를 유발함.

   15번, 27번이 흥미롭네요. 재미있게 읽었습니다.. :)
   41. 뉴스 헤드라인에 부정적인 단어가 하나 추가될 때마다 클릭 수가 2.3% 증가함
       어그로를 끌어야 클릭을 한다는게 여기서도 보이는군요. 숫자로 보이는게 재밌네요.

   그러고 보니. 긱뉴스의 성비가 궁금해지네요. 저는 남자입니다.

   거짓말인가요?

   거짓말이면 혼성 그룹에 해당하니까 낮은 거짓말 발생 조건하에서 이루어진 거짓말이 되겠군요

   이 사람도 2018년 이후 매년 올리고 있네요.

   제가 긱뉴스에 매년 올렸던 아래 Tom Whitwell의 52가지와는 또 다른 재미가 있군요.
   내가 2024년에 배운 52가지
   내가 2023년에 배운 52가지
   내가 2022년에 배운 52가지
   내가 2021년에 배운 52가지
   내가 2020년에 배운 52가지
"
"https://news.hada.io/topic?id=18523","소프트웨어 개발을 위한 생성형 AI 강좌","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         소프트웨어 개발을 위한 생성형 AI 강좌

     * DeepLearning.ai 의 무료 강좌 : 3개 과정, 15시간 이상, 입문 레벨
     * Generative AI 기술을 실제 소프트웨어 개발에 적용하는 방법을 안내
     * 학습 목표:
          + 개발에 생성형 AI 통합: GitHub Copilot 및 ChatGPT와 같은 도구를 사용해 디자인부터 배포까지 개발 워크플로 최적화
          + 코드 품질 최적화: 초보자부터 숙련 개발자까지 코드 개선 및 혁신적인 솔루션 개발
          + 혁신적 소프트웨어 개발: 테스트, 디버깅, 종속성 관리 및 문서화를 위한 AI 활용
     * 학습 내용
          + Configuration-Driven Development (CDD): 설정 중심의 소프트웨어 설계 원칙 이해 및 구현
          + 데이터베이스 설계 및 구현: 스키마 설계, CRUD 연산 및 성능 최적화 학습
          + 디자인 패턴: Singleton, Factory, Template Method, Strategy 등 Gang of Four 패턴 적용
          + API 통합: DALL-E API를 활용한 이미지 생성
          + 데이터 직렬화: JSON 및 Pickle을 사용한 파일 직렬화
          + LLM 보조 코딩: 개발 전 과정에서 LLM을 활용한 페어 프로그래밍
     * 활용 기술
          + Python, SQLAlchemy, SQLite, JSON, Pickle,..
     * 실습 프로젝트
          + DALL-E API를 활용해 CDD 원칙을 적용한 이미지 생성 애플리케이션 구축
          + CRUD 기능이 포함된 전자 상거래 데이터베이스 설계 및 구현
          + 다양한 디자인 패턴을 활용한 금융 서비스 애플리케이션 개발
          + 소셜 네트워크 데이터베이스 설계 및 쿼리 수행

   강의는 Coursera를 통해 제공되며, 7일간만 무료로 이용할 수 있는것으로 보입니다.

   개별 강의 선택 후 audit 혹은 청강으로 등록하면 무료로 수강 가능한 것으로 보여요. 대신에 파이썬 실습환경과 퀴즈는 유료결제자 전용이라 사용불가하네요.
"
"https://news.hada.io/topic?id=18475","Show GN: 이별 후의 감정을 기록하고 분석하는 Healing Diary","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: 이별 후의 감정을 기록하고 분석하는 Healing Diary

   안녕하세요. 최근 연인과 이별을 겪으면서, 그 경험을 의미있는 것으로 만들고 싶어 Healing Diary 프로젝트를 시작했습니다.

링크

     * Github Repository: https://github.com/mansukim1125/healing-diary
     * 서비스 링크: https://healing.latentspace.world/

주요 기능

    1. 감정 일기 작성

     * 자유로운 일기 작성
     * AI가 일기 내용을 분석하여 긍정적 순간, 활동 기록, 감정 상태를 자동으로 추출
     * 작성된 내용은 LocalStorage 에 저장 (로그인 불필요)

    2. 회복 타임라인

     * 일기 내용을 바탕으로 자동 생성되는 감정 여정 타임라인
     * 시간의 흐름에 따른 감정 변화 시각화
     * AI 기반의 회복 패턴 분석 제공

   저는 평소 Node.js 백엔드 개발자로 일하고 있어서 프론트엔드 경험이 거의 없었습니다(기본적인 HTML, JS 지식 정도).
   이번 기회에 최신 프론트엔드 기술들을 공부하면서 개발했습니다.

   이틀 동안 밤을 새가며 Next.js, React 문서를 보면서 맨땅에 헤딩(?)하듯 코드를 작성했습니다.
   처음 접하는 프론트엔드 개발이라 수많은 시행착오를 겪었지만, 그 과정 자체가 저에게는 좋은 치유의 시간이 되었던 것 같습니다.

   프론트엔드 개발이 처음이라 코드가 다소 난잡할 수 있습니다.
   프론트엔드 개발자분들의 피드백을 환영합니다. 더 나은 코드를 위한 조언이나 PR 모두 감사하게 받겠습니다.

   부정적인 감정을 창의적으로 발산하는 능력은 정말 유니크하고 좋은 것 같습니다. 응원하겠습니다!

   감사합니다!

   처음 프론트엔드 개발임에도 깔끔한 UI 네요!

   답글 남겨주셔서 감사합니다!

   UI 디자인의 경우 shadcn ui와 tailwind css 를 사용했습니다.

   추가적으로 코드나 기능적인 부분에서 피드백 주실 사항이 있으시다면 남겨주시면 감사하겠습니다!
"
"https://news.hada.io/topic?id=18467","현재 AI는 막다른 길인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            현재 AI는 막다른 길인가?

현재 AI의 한계와 문제점

  AI를 심각한 용도로 사용하기 어려운 이유

     * 소프트웨어 공학 관점에서 현재 AI 시스템은 복잡성과 규모를 효과적으로 관리하기 어렵기 때문에 신뢰성이 부족함
     * 영향력 있는 소프트웨어는 투명성, 관리 가능성, 책임성을 갖춰야 하지만 현재 AI는 이를 충족하지 못함
     * 데이터의 출처에 대한 책임이 부족하고, AI 알고리즘의 결과에 대한 책임도 애매함
     * '설명 가능한 AI'와 편향 완화 시도가 있었으나 근본적인 데이터 책임 문제와 엔지니어링 난이도는 여전히 해결되지 않음

  신경망 기반 AI의 작동 방식

     * 현재 AI는 대규모 신경망(LLM, Generative AI 등)에 기반하며, 수백만 개의 뉴런이 상호 연결됨
     * 학습은 주로 비지도 학습 또는 자가 지도 학습 방식으로 이루어지며, 인적 개입은 최소화됨
     * 시스템의 기능은 주어진 데이터를 학습하여 출력 목표를 충족하도록 훈련하는 과정에서 결정됨
     * 방대한 연산 자원이 필요하며, 이는 비용 및 에너지 소모가 매우 큼

  신경망의 비구조적 특성과 '발현적 행동'

     * 현재 AI 시스템은 발현적 행동을 보이며, 개별 뉴런의 수학적 정의로는 전체 시스템의 작동을 설명하기 어려움
     * 시스템 내부 구조는 기능과 의미 있는 연관성을 가지지 않아 재사용이나 모듈화 개발이 불가능함
     * 중간 모델이나 단계적 개발 방식이 없으며, 시스템의 이유와 논리를 설명하기 어려움
     * '사람이 중재하는 방식'도 시스템 결과를 설명하는 데 실질적인 도움이 되지 않음

  소프트웨어 공학에서의 구성적 접근과 AI의 문제

     * 구성적 접근(compositionality)은 개별 부품의 의미와 결합 방식을 이해하여 시스템 전체를 설명하는 방식임
     * 현재 AI는 이러한 접근 방식을 지원하지 않으며, 다음과 같은 문제를 초래함:
          + 내부 구조가 의미를 갖지 않아 기능적 재사용 불가
          + 단계적 개발이나 검증이 불가능
          + 명시적 지식 모델이 없어 시스템이 '이유'를 설명할 수 없음

  검증의 한계

     * 현재 AI 시스템은 입력 및 상태 공간이 지나치게 커서 포괄적 테스트가 불가능함
     * 확률적 시스템의 올바른 출력은 해당 입력에 대한 가능성을 보여줄 뿐, 항상 신뢰할 수 있는 결과를 보장하지 않음
     * 유닛 테스트나 통합 테스트와 같은 부분 검증이 불가능하며, 시스템 전체 검증만 가능
     * 시스템 전체를 테스트해도 커버리지가 부족하여 신뢰성을 확보하기 어려움

  오류와 수정의 문제

     * 훈련 데이터의 부족이나 입력 데이터의 불완전성으로 인해 오류 발생 가능
     * 오류 수정을 위해 재훈련을 하더라도 국소화된 수정이 불가능하며, 회귀 테스트도 어려움
     * 새로운 오류가 도입될 가능성이 크며, 이를 발견하기 어려움

  결론과 제안

     * 현재 AI 시스템은 신뢰성과 안전성이 부족하여 심각한 응용에 사용하기에는 부적합함
     * 현재 기술은 훈련 데이터와 연산 자원의 증가로 제한적인 개선만 가능하며, 근본적인 신뢰성 향상은 이루어지지 않음
     * 제안:
          + 신경망과 상징적 AI를 결합한 하이브리드 시스템 개발
          + 명시적 지식 모델과 신뢰도 수준을 생성하거나 기존 데이터 검색 및 증명 기법과 결합
          + 오류를 신뢰성 있게 관리할 수 있는 제한된 영역에서 사용
          + 확률적 예측이 적합한 날씨 예측 등 특정 분야에서 활용

   핵심은 현재의 ai가 아무런 연역적 검증없이 어제까지 안전했고 오늘도 안전하니 내일도 안전할거야라는 귀납적인 검증에 의존한다는거죠.

   흑조이론처럼 어느날 치명적 이상현상이 발생할 가능성은 여전히 존재하고 어찌보면 아전은 운에 의존하고있는것입니다.

   기존의 소프트웨어 공학에서는 이러한문제를 개별요소를 식별 분석하고 시나리오와 테스트수립을 통해서 단위별로 연역적으로 검증하는것이 가능했는데 ai에서는 아직 완전히 불가능하니깐요.

   이미 테슬라 자율주행에서 해결하고 있는 문제..

   모델이 시스템 검증이 불가능해 신뢰도가 100%에 도달할 수 없는게 큰 문제처럼 읽히는데, 자율주행에서 어떤 식으로 해결을 하고 있나요?

   테슬라가 AI를 진짜 현실 세계에 적용하는 표본을 보여주고 있습니다.

   뭐든 100%는 불가능하죠. 100%는 사기 혹은 환상입니다.
   여느 스타트업처럼 step by step, agile하게 진행합니다.
   문제상황에 remote control할 수도 있고, 현재는 supervised로 돌리고 있죠.

   신뢰도 100%라는 수치 자체가 문제가 아니라, 모델 구조가 explainable하지 않다는 것이 쟁점 아닌가요?
   모델의 추론 결과에 대해 현재의 딥러닝, 특히 신경망 모델 베이스들은 내부 구조 제시만으로는 설명이 어려운 것들이 많다가 핵심인 듯 합니다.

   최근에야 여러 연구와 anthropic 사 등에서 black box를 해결하는 방법을 제시하고 있긴해서 조만간 또 해결될 문제일 것 같긴 하네요

   100%든 설명가능하는것이든 환상이라고 생각합니다.
   ""중국어 방"" 논증처럼 중요한건, 결과적으로 테슬라 자율주행이 통계적으로 사람이 운전하는것보다 안전하다는것입니다. 그리고 인공지능은 더 확장하며 100%에 가까운 ""거의"" 모든 경우에 잘 동작할것입니다.
   많은 그루들은(일론머스크, 에릭슈미츠등) 인공지능은 설명 불가능하다는것을 알기 때문에 인공지능에 안전막이 필요하다고 말하는거에요.

   아래 Hacker News 의견에 있는 것입니다.
     * ""Tesla의 자율주행은 극단적인 예로, 사고에 대한 책임을 지지 않음.""
     * ""LLM이 재정 관리나 스마트 홈 제어를 맡길 수 있는지 의문임""

   모델의 설명가능함을 따지지 않고 결과의 정확도만 따지면 우리가 어떻게 제품을 신뢰하고 사용하나요

   너무 모호하게만 말씀하셔서 잘 이해가 되지 않는데, 모델 내부 동작도 ""설명가능해야"" 어느정도 수준의 검증이 가능하다는 것이 중요한 것 아닌가요?
   kandik님 의견에 따르면 Functional Safety 존재 의의가 없어집니다.

   사람의 마음은 설명 가능할까요? 사람의 마음을 설명 불가능한데, 신입사원은 어떻게 뽑는걸까요?
   양자역학은 100%통계 모델이고, 그리고 그것은 세상을 잘 설명하고 있습니다.
   ""신뢰""라는것도 기술의 발전에 의해 개념이 달라질 수 있을거에요.

   이래나 저래나 개발자들 입장에서는 피곤한 상황이 아닐수가 없습니다. 기껏 편하게 할려고 AI를 쓰는건데, 신뢰성을 위해서 테스트를 얼마나 더 엄격하게 해야하는지 모르니까요

   제품을 만드는데 있어서 설명 가능한게 좋죠. 결국, 사람은 제품이 아니기 때문에 어떤 문제에 있어서 사람 자체에 책임을 물릴 수 있지만 제품은 하자가 있으면 만든 사람에게 책임을 물리니까요.

   그래서 더더욱 테스트 환경을 현실에 가깝게 해서 할 필요성도 있는거기도 하죠. 원리를 모르니까 최대한 예외적인 상황이 없게끔 학습을 시키는 방법밖에 없으니까요

        Hacker News 의견

     * 1990년대 중반부터 신경망의 발전을 지켜보았으며, 신경망의 각 단계가 막다른 길에 도달했다고 관찰함. 이는 수학적 접근 방식이 직관적 이해를 방해하기 때문임. LLM이 의미 검색을 쉽게 만들어 흥미로움.
          + AI 시스템의 기능과 의미가 연결되지 않음. 이는 책임 있는 사용을 방해함.
          + 대기업들은 LLM을 내부 업무에 제한적으로 사용하며, 고객 서비스에 활용함.
          + LLM의 오류는 고객에게 전가되며, AI 산업에서 책임 회피가 만연함.
          + Tesla의 자율주행은 극단적인 예로, 사고에 대한 책임을 지지 않음.
          + AI 산업은 법적, 정치적으로 책임을 회피하기 위해 노력 중임.
     * 현재 AI 시스템의 확장 가능성을 예측할 수 없음. 인간 뇌와 비교할 때 신경 연결 수가 매우 적음.
          + 오늘날의 AI 시스템은 갈색 쥐의 뇌와 비슷한 신경 연결 수를 가짐.
          + 현재 AI 시스템은 신뢰할 수 없음.
     * LLM 기반 AI는 소프트웨어 개발 관점에서 결함이 있으며, 중요한 응용 프로그램에 적합하지 않음.
          + LLM이 재정 관리나 스마트 홈 제어를 맡길 수 있는지 의문임.
          + 인간과 자율 시스템에 대한 기대가 다름.
     * 인간은 중요한 작업에서도 실수를 하며, AI 시스템도 마찬가지임.
          + 인간 전문가의 의견 일치가 낮은 경우도 있음.
          + LLM이 비용 대비 효율적이라면 사용하지 않을 이유가 없음.
     * AI를 적극적으로 사용 중이며, 개인 프로젝트에서 큰 도움을 받음.
          + Wikipedia와 유사하게 AI의 유용성을 부정하는 심리가 존재함.
     * 데이터 확장이 더 이상 큰 보상을 주지 않음. LLM은 AGI로 가는 길이 아님.
          + LLM은 API 호출 생성 등에서 유용하지만, 대규모 프로젝트에 사용하기에는 위험함.
          + 자유로운 브레인스토밍에서는 더 유용할 수 있음.
     * AI가 지능을 대표하는지에 대한 논의가 많음. 인간의 뇌도 신뢰할 수 없으며, 사이버 보안에서 LLM의 적합성을 논의함.
"
"https://news.hada.io/topic?id=18417","동료 줄리어스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                동료 줄리어스

줄리우스와의 만남

     * 대학 시절 줄리우스를 만났음. 그는 항상 미소를 띠고 있었고, 듣는 능력이 뛰어났음.
     * 컴퓨터 프로젝트에서 줄리우스는 코드 작성보다는 보고서 형식에 기여했음.
     * 발표에서 줄리우스는 C 가상 머신에 대해 잘못된 정보를 제공했으나, 이를 농담으로 넘겼음.

줄리우스의 경력

     * 줄리우스는 여러 회사를 다니며 다양한 경험을 쌓았고, 급여와 직급이 계속 상승했음.
     * 회사에서 줄리우스는 많은 질문을 했고, 그의 기여는 항상 검토가 필요했음.
     * 줄리우스는 프레젠테이션과 회의 관리에 뛰어났음.

줄리우스의 영향

     * 줄리우스는 고객에게 잘못된 정보를 제공하여 팀에 문제를 일으켰음.
     * 팀은 줄리우스를 관리하기 위해 재조직되었음.
     * 줄리우스는 결국 회사를 떠났고, 그의 경력은 계속해서 발전했음.

인공지능과의 비교

     * 인공지능 소프트웨어가 줄리우스와 비슷한 방식으로 팀에 영향을 미치고 있음.
     * 인공지능은 생산성을 높이기 위해 도입되었으나, 오히려 혼란을 초래하고 있음.
     * 줄리우스와 같은 인공지능의 존재로 인해 삶이 복잡해졌음.

결론

     * 줄리우스는 그의 경력에서 성공을 거두었고, 그의 영향은 여전히 남아 있음.
     * 인공지능의 도입은 줄리우스와 같은 문제를 야기할 수 있음.

        Hacker News 의견

     * Pete라는 뛰어난 엔지니어가 새로운 제품의 초기 버전을 작성했음. 그러나 코드베이스는 엉망이고 문서화나 테스트도 없어 이해하기 어려움
          + Pete는 항상 중요한 프로젝트에 참여하며, 그의 뛰어난 능력 덕분에 경영진의 사랑을 받음
          + Pete가 떠난 후, 그의 실수가 드러나기 전에 다른 큰 프로젝트로 이동하는 경향이 있음
     * LLMs(대형 언어 모델)는 학생들에게 큰 어려움을 줌
          + 학생들은 LLMs가 자신들보다 더 나은 것처럼 보여 자신감을 잃고, 학습 대신 도구를 사용하려고 함
          + 이는 자기충족적 예언이 되어 미래에 부정적인 영향을 미칠 수 있음
     * Julius라는 사람을 고용한 결과, 생산적인 사람들은 해고되고, 회사의 매출은 증가하지 않음
          + Julius는 뛰어난 발표 능력을 가졌지만, 회사의 재정 상태는 악화됨
     * 많은 Julius를 만나봤으며, 이들은 우주가 좋아하는 존재인 것 같음
     * Julius는 Peter Principle의 반복적인 적용처럼 보이지만, 항상 무능했음
          + 겉으로는 능력 있어 보이지만 실제로는 무능함
     * 이 이야기가 AI와 관련이 없다면, Julius는 훌륭한 PM이나 중간 관리자였을 것임
     * 여러 Julius를 만나면서 내가 하는 일에 대해 의문을 가졌음
"
"https://news.hada.io/topic?id=18519","Deepseek V3는 과적합 여부를 테스트하는 벤치마크에서 좋지 않은 성능을 보였음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Deepseek V3는 과적합 여부를 테스트하는 벤치마크에서 좋지 않은 성능을 보였음

  폐쇄 소스 LLM 들을 능가하는 오픈 소스 모델 DeepSeek V3의 등장

     * 최근 Deepseek (중국의 AI 회사)가 MMLU(영문), Human-Eval-Mul(코딩), AIME 2024(수학) 등 특정 LLM 벤치마크들에서 GPT-4o 0513을 능가하는 충격적인 오픈 소스 모델 DeepSeek V3를 공개함
     * 이는 기존 폐쇄 소스 (Closed Source) LLM (예: OpenAI의 GPT, Anthropic의 Claude) 들을 능가하는 결과이기에 많은 관심을 끌고 있음

  과적합 여부를 테스트하는 벤치마크 MisguidedAttention에서 좋지 않은 성능을 보였음

     * MisguidedAttention은 ""LLM이 특정 벤치마크에 과적합 (Overfitting) 되었는지를 확인하는 벤치마크"" 임
     * MisguidedAttention은 기존의 벤치마크 질문들을 약간 변형을 거친 질문들로 LLM의 과적합을 테스트함
     * 예를 들어, 기존의 벤치마크는 ""고장난 기차가 선로를 달리고 있다. 철도의 각 선로 위에는 5명, 1명이 묶여있다. 레버를 당길 경우 5명은 살지만 1명은 죽고, 레버를 당기지 않고 가만히 있으면 5명이 죽게 된다. 당신은 레버를 당길 것인가?"" 라는 ""트롤리 딜레마""를 질문하지만, MisdguidedAttention은 ""철도의 각 선로 위에는 5구의 시체와, 살아있는 사람 1명이 묶여있다."" 로 변형한 ""노 트롤리 딜레마""를 질문해 LLM이 명확한 답변을 하는지를 확인함
     * Deepseek V3는 MisguidedAttention에서 0.22점을 기록했으며, 폐쇄 소스 LLM인 claude-3.5-sonnet-new의 0.45점, gpt4-32k의 0.46점에 비해 낮은 점수임

  DeepSeek V3는 오픈소스 모델임

     * 그러나 또 다른 폐쇄 소스 LLM인 gemini-pro-1.5의 0.21점보다는 높음
     * 오픈소스 모델 중에서는 llama 기반 파인 튜닝 모델 ‘hermes-3-llama-3.1-405’가 0.27점으로 가장 높았으며, DeepSeek V3의 0.22점과 비교했을 때 큰 차이는 아님
     * 과적합을 테스트하는 벤치마크에서 낮은 점수를 받았지만, 오픈 소스 모델이라는 점에서 여전히 큰 의의가 있다는 의견이 있음

   중국에서 만들어서 그런지 중국에서 민감한 부분들은 제대로 답변을 못하더라구요

   중국의 모든 서비스가 그런 경향이 있는 것 같습니다. 옳고 그름을 떠나서 그냥 관련 주제가 나오는 것을 경계하는 것 같아요.
"
"https://news.hada.io/topic?id=18490","Jimmy Carter 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Jimmy Carter 별세

        Hacker News 의견

     * 1980년 재선에 실패한 것이 아쉬움. 기후 변화에 대한 실질적인 작업이 1981년에 시작될 수 있었을 것이라는 의견이 있음. 케네디를 비난함
     * Jimmy Carter는 나이가 들어서도 의미 있게 삶을 살아간 모델로 평가됨. The Onion의 유머 기사들이 그를 재미있게 다루었음
     * Carter는 태양열 패널을 설치했으나, Reagan이 1986년에 이를 제거함. 두 대통령의 유산을 비교할 수 있는 사례로 언급됨
     * Carter는 20세기 가장 친팔레스타인적인 대통령으로 평가됨. 그의 책 ""Palestine: Peace Not Apartheid""를 읽어볼 가치가 있음
     * Carter가 낚시를 하던 중 습격한 늪지 토끼 이야기가 유명함. 언론이 이를 과장하여 조롱했음
     * Carter는 1980년대 경제 호황의 기초를 마련했으나, 재선에 실패함. 시장 지향적 규제 완화와 Paul Volcker를 연준 의장으로 임명한 것이 주요 업적임
     * Carter는 진정으로 좋은 사람으로 평가됨. 캐나다 원자로 사고를 해결한 이야기가 인상적임
     * 대통령이 되기 전 땅콩 농장을 포기해야 했던 일화가 있음
     * Carter가 대통령 임기 후에도 많은 일을 했다는 점에서 재선되지 못한 것이 아쉬움
"
"https://news.hada.io/topic?id=18397","OpenAUTH - 표준 기반의 웹앱/모바일 앱을 위한 인증 프로바이더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                OpenAUTH - 표준 기반의 웹앱/모바일 앱을 위한 인증 프로바이더

     * 웹 앱, 모바일 앱, 싱글 페이지 애플리케이션(SPA), API 또는 써드파티 클라이언트용 표준 기반 인증 프로바이더
     * 독립형 서비스로 배포하거나 기존 애플리케이션에 내장 가능. 모든 프레임워크 및 플랫폼과 연동됨
     * 셀프 호스팅: 완전히 사용자 인프라에서 실행되며 Node.js, Bun, AWS Lambda, Cloudflare Workers에 배포 가능
     * 웹 표준 기반으로 OAuth 2.0 스펙 준수. OAuth를 지원하는 모든 클라이언트와 호환되며, 액세스 및 리프레시 토큰 발급 가능
     * 커스터마이징 가능: 테마 적용 가능한 기본 UI 제공, 직접 구현도 가능
     * 접근 방식
          + 많은 오픈소스 인증 솔루션은 단일 애플리케이션에 임베드되도록 설계된 라이브러리임
          + 반면, OpenAuth는 중앙 집중식 인증 서버로 사용자 인프라에서 쉽게 셀프 호스팅 가능
          + 웹, 모바일 앱, 내부 관리 도구 등 모든 애플리케이션 인증에 사용 가능
     * 저장소 요구 최소화: 리프레시 토큰, 암호 해시 등 최소 데이터만 저장. KV 스토어(Cloudflare KV, DynamoDB 등) 지원

   왜 굳이 프로파이더가 되어야 하는가…
   컨슈머로 충분하지 않을까?
   … 라는 생각을 해봅니다.
"
"https://news.hada.io/topic?id=18460","블렌더용 Differential Growth 애드온","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      블렌더용 Differential Growth 애드온

     * Differential Growth Addon 소개
     * 자연에서 발생하는 형태와 패턴은 설명할 수 없는 매력을 가짐. 인간은 선사시대부터 유기적인 형태에 매료되어 왔으며, 이는 예술과 디자인 요소에서 드러남. 자연의 유기적 과정을 관찰하고 반영하려는 욕구는 인간 본성의 일부임.
     * 아름다움을 찾기 위해 사람들은 유기적 패턴을 생성하는 다양한 도구와 방법을 개발해 왔음.
     * Differential Growth Addon은 Blender를 위한 오픈 소스 애드온으로, 유기적 패턴을 생성하는 데 기여함. Blender Manifesto에 부합하며, 무료로 사용 가능하고 많은 애정으로 제작됨.
     * 몇 가지 예시:
          + 상추와 같은 형태: 단위 원에서 시작해 Split Radius를 점차 줄여가며 시뮬레이션 끝부분에서 세밀한 디테일을 생성함.
          + 지의류와 같은 형태: 내부 성장을 억제하고 Z축 이동을 제한하여 생성함.
          + 해조류와 같은 형태: Z+ 방향으로 성장을 추가하고 내부 성장을 억제하여 생성함.
     * GitHub에서 최신 릴리스를 다운로드할 수 있으며, 프로젝트에 대한 관심을 표현하기 위해 별을 주는 것도 좋음.
     * 토론에 참여하여 질문을 하거나 다른 아티스트를 도와주고, 자신이 만든 놀라운 작품을 공유하거나 인사를 나눌 수 있음.
     * 가장 중요한 것은 즐기는 것임.

        Hacker News 의견

     * Blender는 놀라운 소프트웨어임. 비디오 게임에 수백 시간을 소비하느니 Blender를 배우는 것이 더 나을 것이라고 생각했음. 그 결과, 여러 저녁을 3D 모델링에 즐겁게 보냈으며, 일부 모델은 실제 게임에 사용되었음. 무료로 다운로드한 소프트웨어로 세계적인 수준의 렌더링을 할 수 있음.
          + Alex Martinelli의 무료 Blender geometry nodes differential grown add-on을 확인해보는 것도 좋음.
     * 빛을 받지 않는 버텍스에서 성장을 억제하는 광원 추가가 멋진 추가 기능이 될 것임.
     * 수학적 설명이 필요하다는 의견에 동의하며, 내부에서 어떤 일이 일어나는지 이해하고 싶음.
     * 세포가 계속 분열하고 혈관이 모두 비슷하게 형성되는 것이 놀랍고 아름다움.
     * Houdini는 빠르게 발전하고 있지만, Blender와 Unreal Engine도 핵심 기능에서 따라잡고 있음. 개인적인 사용 사례에서는 Blender가 가장 덜 유용하지만, 점점 더 나아지고 있음.
     * 이 시스템이 L-system 기반인지 궁금하며, 페이지나 GitHub에 수학적 배경에 대한 설명이 없는 이유가 궁금함.
     * Blender에서의 differential growth에 대한 매우 상세하고 흥미로운 탐구임. 수학적 개념이 아름다운 시각 예술로 번역되는 것이 영감을 줌. 공유해준 통찰력과 기술에 감사하며, 생성적 디자인에 관심 있는 사람들에게 훌륭한 자원임.
"
"https://news.hada.io/topic?id=18481","OpenAI의 구조 변화 필요성과 향후 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        OpenAI의 구조 변화 필요성과 향후 계획

     * OpenAI는 AGI 의 개발이 인류 전체에 이익이 되도록 보장하는 사명을 수행하기 위해 새로운 구조를 검토 중
     * 목표:
          + 장기적인 성공을 위한 비영리/영리 구조 선택
          + 비영리 조직의 지속 가능성 확보
          + 각 부문이 역할을 효과적으로 수행하도록 설계
     * 영리 부문의 성공은 비영리를 지원하여 자금 조달과 지속 가능성을 강화함

과거: 연구실에서 시작한 OpenAI

     * 2015년, AGI 실현 가능성을 믿고 그 발전이 인류에 유익하도록 돕고자 설립
     * 초기 목표는 재정적 수익에 구애받지 않고 디지털 지능을 발전시키는 것
     * 소규모 프로젝트와 연구를 통해 아이디어를 탐구:
          + 게임 AI 도구, 로봇 연구 등
          + 연구 결과를 논문으로 발표
     * 재정 지원:
          + 현금 기부: $137M (Elon Musk 기여는 1/3 미만)
          + 클라우드 크레딧 및 할인: Amazon $1.8M, Azure 및 Google Cloud $50M 이상
     * 문제:
          + AI는 점점 더 많은 컴퓨팅 자원과 자본이 필요
          + 기부로만은 충분한 자본을 조달할 수 없었음

현재: 연구소와 스타트업의 결합

     * 2019년, 영리 조직 설립:
          + 비영리 조직이 영리 조직을 통제하며, 투자자 및 직원에게 이익 배분을 제한
          + Microsoft로부터 $10억 투자 유치
     * 첫 상용 제품 개발:
          + 기술로 수익을 창출하며 추가 자본을 조달
          + 실험실 연구와 실제 안전 문제의 차이를 이해
     * 주요 성과:
          + 2022년 ChatGPT 출시:
               o 매주 3억 명 이상 사용
               o 생산성, 학습 등 다양한 일상 용도로 무료 제공
          + 2024년 ""o-시리즈 모델"" 발표:
               o 새로운 추론 능력과 연구 패러다임을 보여줌

문제와 새로운 요구사항

     * AGI 개발을 위해 상상했던 것보다 더 많은 자본 필요
     * 기존 구조는 대규모 자본 조달에 적합하지 않음:
          + 투자자들은 전통적인 주식 구조를 선호
          + 비영리의 통제가 영리 활동에 제약을 줌

미래: 지속 가능한 조직으로의 전환

  새로운 구조 제안

     * Delaware Public Benefit Corporation(PBC) 로 영리 부문 전환:
          + 공공 이익과 주주 및 이해관계자 이익 균형
          + 전통적인 투자 조건을 통해 자본 조달 가능
     * 비영리 조직:
          + PBC의 지분 보유
          + 독립적인 평가를 통해 공정한 가치 산정
          + 의료, 교육, 과학 등 분야에서 자선 활동 수행

  각 부문의 역할 강화

     * PBC는 OpenAI의 운영과 비즈니스를 주도
     * 비영리는 AGI 혜택을 보장하는 핵심 프로젝트에 집중

결론: AGI 경제와 인류 이익

     * AGI와 AI 시스템이 21세기 경제의 새로운 인프라로 자리 잡는 과정에 기여
     * OpenAI는 단일 시스템 개발을 넘어 지속적인 목표로 사명을 재구성
     * 변화된 구조를 통해 AGI 개발 및 AI 경제 형성에서 리더십을 유지하며 인류에 이익 제공

        Hacker News 의견

     * 많은 사람들이 이익을 위한 구조에 대해 긍정적으로 설명하려는 노력을 이해하지 못하고 있음. 그냥 ""돈을 많이 벌고 싶다""고 말하고 넘어가면 좋겠음
     * 현재 구조는 이익을 위한 자금 제공자들의 이익을 직접 고려할 수 없으며, 비영리 단체가 이익을 쉽게 통제할 수 없음
     * 이 구조의 목적이 바로 그것이라고 생각했음
     * 이 모든 것이 얇은 가식처럼 보임
     * 가치가 커지면서 원칙적인 입장을 취하다가, 부가 보이자 입장을 바꾼 것 같음
     * 기사에서 명확하지 않은 중요한 부분은 이익을 위한 구조와 비영리 구조 간의 정확한 관계임
          + 이전에는 이익이 제한되어 있었고, 나머지는 비영리 단체를 통해 전 세계에 이익을 분배하는 것이었음
          + 새로운 구조는 투자자들에게 무제한의 수익을 제공할 수 있으며, 일부는 비영리 단체를 통해 대중에게 이익을 제공할 수 있음
          + OpenAI가 원래의 비전을 벗어나는 것 같아 아쉬움
     * OpenAI가 AGI를 통해 인류 전체에 이익을 주겠다는 비전을 어떻게 실현할 것인지 명확하지 않음
          + 최근 발표에 따르면, ChatGPT를 무료로 제공하는 것이 그 답인 것 같음
     * 투자자들은 전통적인 주식을 원하지만, 이 규모에서는 원하는 만큼의 맞춤형 구조를 만들 수 있음
          + Paul Getty의 농담처럼, 큰 금액을 빚지면 은행의 문제가 됨
     * 미국 법에 익숙하지 않지만, 비영리로 시작했다가 이익을 추구하는 것이 합법인지 이해하지 못하겠음
          + 이는 사기처럼 보이며, Elon과 초기 기부자들이 강력한 주장을 할 수 있을 것 같음
     * 현재 구조가 자금 제공자의 이익을 고려할 수 없다는 주장이 있음
          + 두 주인을 섬길 수 없으며, 인간 중심의 AI를 목표로 한다면 다른 목표를 추가할 필요가 없음
     * OpenAI와 Sam Altman이 AGI를 통해 인류를 구원하려 한다면, 막대한 자본이 필요함
          + 이는 세계에서 가장 강력한 정부가 자원을 투입할 완벽한 사례임
          + AGI는 공공재처럼 보이며, 많은 사적 행위자들이 이 기술을 통제하려 함
          + 정부가 이러한 일을 하지 않는 것은 아쉬운 일임
     * 창립자들이 경제적 가치가 증가하면서 프로젝트에 영향을 미칠 인센티브를 예측했을 것 같지 않음
"
"https://news.hada.io/topic?id=18425","암 가이드라인이 PDF에 갇힌 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          암 가이드라인이 PDF에 갇힌 이유
"
"https://news.hada.io/topic?id=18463","미국 기관 간 소스 코드 공유를 의무화하는 법안 법제화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국 기관 간 소스 코드 공유를 의무화하는 법안 법제화

     * 미국 기관 간 소스 코드 공유 법안
          + 조 바이든 대통령이 12월 23일 양당의 법안을 서명하여 법으로 제정함.
          + 새로운 법안은 기관 간 중복 소프트웨어 개발 계약을 방지하기 위해 맞춤형 소스 코드를 공유하도록 요구함.
          + ""Source Code Harmonization And Reuse in Information Technology (H.R. 9566)"" 또는 ""SHARE IT Act""는 연방 정부가 매년 소프트웨어 구매에 약 120억 달러를 지출하는 것을 줄이는 것을 목표로 함.
          + 법안은 기밀 코드, 국가 안보 시스템 또는 공유 시 개인정보 위험을 초래할 수 있는 코드는 제외함.
     * 법안의 주요 내용
          + 법안은 상원의 Ted Cruz와 Gary Peters, 하원의 Nicholas Langworthy와 William Timmons가 후원함.
          + 법안은 양원 모두에서 압도적인 지지로 통과됨.
          + 법에 따라 기관의 최고 정보 책임자는 법 시행 후 180일 이내에 정책을 개발해야 함.
          + 정책은 맞춤형 코드가 모범 사례와 일치하도록 보장하고, 메타데이터를 공개하는 프로세스를 수립하며, 표준화된 보고 프로세스를 명시해야 함.
          + 메타데이터에는 맞춤형 코드가 계약 하에 개발되었는지, 저장소에서 공유되었는지에 대한 정보, 계약 번호, 코드가 공유된 저장소의 하이퍼링크가 포함됨.
     * 산업계의 지원
          + Atlassian과 GitLab Inc. 같은 협업 소프트웨어 회사들이 법안을 지지함.
          + Atlassian의 법률 고문 Stan Shepard는 ""맞춤형 코드의 더 큰 협업과 공유가 연방 기업 전반에 걸쳐 개방성, 효율성, 혁신을 촉진할 것이라는 믿음을 공유한다""고 언급함.
     * 작성자 정보
          + Madison Alder는 워싱턴 D.C.에서 정부 기술을 다루는 FedScoop의 기자임.
          + 인공지능의 정부 사용 추적 및 연방 계약 변화 모니터링을 포함한 다양한 주제를 보도함.
          + 이전에는 Bloomberg Law에서 연방 사법부, 건강 정책, 직원 혜택 등을 다루었음.

        Hacker News 의견

     * 공공 자금으로 개발된 소프트웨어는 기본적으로 오픈 소스 소프트웨어(OSS)여야 한다고 주장함
          + 군대의 IT 환경은 일반적인 상업 환경과 매우 다르며, 보안 위협에 항상 노출되어 있음
          + 정부 소프트웨어는 복잡한 소유권 문제로 인해 공개하기 어려움
     * 새로운 법은 코드 자체를 공개하는 것이 아니라 메타데이터만 공개하도록 요구함
          + 메타데이터는 코드가 계약 하에 개발되었는지 여부, 계약 번호, 코드가 공유된 저장소의 하이퍼링크 등을 포함함
     * 정부 팀과 협력한 경험에서 OSS가 권장되는 경우가 많지만, 이를 요구 사항으로 명시하는 것이 필요함
          + 공공 자금은 공공의 이익으로 이어져야 하며, 오픈 소스는 이를 증대시키는 좋은 방법임
     * 미국 국방부는 오픈 소스 소프트웨어에 대한 FAQ를 제공하며, GitHub를 통해 협업 도구로 실험 중임
          + 오픈 소스는 상업적인 소프트웨어 형태로 인정받고 있음
     * 새로운 법은 기밀 코드, 국가 안보 시스템, 공유 시 개인정보 위험이 있는 코드에는 적용되지 않음
          + 코드와 데이터가 혼합되어 개인정보 위험을 초래할 수 있는 코드가 무엇인지 의문을 제기함
     * 같은 조직 내에서도 코드 접근이 어려웠던 경험을 언급하며, 새로운 법이 업무를 더 쉽게 만들 것이라고 기대함
     * 맞춤형 코드 개발은 특정 필요에 의해 이루어지며, 한 기관의 맞춤형 코드가 다른 기관에 유용할 가능성은 낮음
     * 코드 공유가 없는 경우, 여러 기관이 동일한 필요를 위해 여러 버전의 코드를 개발하는 데 많은 비용을 지출함
          + 새로운 법이 품질과 이점을 향상시킬 것이라고 기대함
"
"https://news.hada.io/topic?id=18395","GPT-5 "Orion" 개발 지연rion"" 개발 지연

     * OpenAI의 차세대 AI 프로젝트 GPT-5(코드명 Orion) 은 일정이 지연되고 막대한 비용이 발생 중
     * GPT-5는 ChatGPT를 가능하게 한 기술의 주요 발전을 목표로 하지만, 성공 가능성과 일정이 불확실
     * 주요 투자자인 Microsoft는 2024년 중반 공개를 기대했으나, OpenAI 내부 테스트에서 여러 문제 발생

프로젝트 현황과 비용

     * GPT-5는 이미 두 차례 대규모 훈련을 진행했으며, 각 훈련에 수억 달러가 소요
     * 예상 성능을 충족하지 못하며, 현재 성능은 기존 GPT-4보다 약간 나은 수준
     * OpenAI의 Sam Altman CEO는 GPT-5가 획기적인 발전을 제공할 것이라고 강조

훈련 데이터와 기술적 문제

     * LLM 훈련에는 방대한 데이터가 필요하지만, 현재 인터넷에는 충분한 고품질 데이터가 부족
     * OpenAI는 수학 문제 해결, 소프트웨어 코드 작성 등을 통해 직접 데이터를 생성하는 방법을 채택
     * 합성 데이터(AI가 생성한 데이터)도 활용 중이지만, 자체 데이터 생성 과정에서 오류와 비합리적 결과 위험 존재

내부 문제와 경쟁 압박

     * OpenAI 내부 갈등 및 경쟁사의 인재 영입 시도 증가
     * 공동 창립자 Ilya Sutskever 및 CTO Mira Murati를 포함한 24명 이상 주요 인력이 퇴사
     * 경쟁사인 Anthropic과 Google이 더 나은 LLM을 출시하며 경쟁 심화

새로운 접근법: 추론 모델

     * OpenAI는 LLM 성능 향상을 위해 새로운 추론 모델 개발
          + 단순히 데이터만 확장하는 기존 접근법의 한계 인식
          + o1 모델은 하나의 질문에 여러 답변을 생성하고 이를 분석해 최적의 답변을 선택
          + 복잡한 문제를 해결하고, 답변 과정을 설명하며 학습 가능

비용과 성능의 트레이드오프

     * 추론 기반 모델은 기존 방법보다 성능이 향상되었으나, 높은 비용 부담
          + 단일 질문에 대해 여러 답변을 생성해야 하므로 계산 비용 증가
     * 연구진은 추론 모델과 기존 데이터 중심 접근법을 결합해 GPT-5의 기반을 마련하려 노력

산업적 도전과 데이터 부족

     * AI 업계는 점점 더 데이터 부족 문제와 한계에 직면
     * 데이터가 ""AI의 화석 연료""라는 비유처럼, 추가 고품질 데이터를 확보하기 어려운 상황
     * GPT-5 개발이 멈추면, AI 개선이 정체될 가능성도 제기

결론

     * OpenAI는 Orion 프로젝트에서 기술적, 재정적, 인적 자원 문제로 어려움을 겪고 있음
     * 새로운 추론 모델이 AI 발전의 새로운 돌파구가 될 가능성을 모색 중
     * 그러나 GPT-5로 인정받을만한 모델의 출시는 여전히 불확실

   석유화학 기업이 석유를 휘발유, 경유 등으로 정제하듯,
   데이터 정제 기업이 비정제된 데이터를 이쁘게 정제해주는 사업 모델도 있을 수 있겠네요.
   사내에 수없이 쌓여있는 표준작업절차서 엑셀, ppt 파일을 정제해서 gpt 파인튜닝에 쓴다거나?

   예정된 벽이라고 생각되고
   스스로 인지하고 생각하는 방향으로 틀어도 재밌겠다는 생각도 좀 드네요

     o1 모델은 하나의 질문에 여러 답변을 생성하고 이를 분석해 최적의 답변을 선택

   o1은 MCTS나 서치 기반이 아니라 RL로 CoT를 확장한 모델입니다

   여러 답변을 생성하고 -> 이 부분이 병렬적으로 여러 답변을 생성하고 그 중 택1한다가 아니라
   말씀주신 것처럼 CoT로 답변이 됐다고 판단할 때까지 순차적으로 답변을 생성해 최적의 답변을 낸다..
   이게 번역 과정에서 오역이 된건가 싶기도 하네요 원글 확인이 어려워 모르겠지만..

     Behind the scenes, OpenAI’s o1 offers several responses to each question and analyzes them to find the best one. It can perform more complex tasks, like writing a business plan or creating a crossword puzzle, while explaining its reasoning—which helps the model learn a little bit from each answer.

     All that added brainpower is expensive. OpenAI is now paying to generate multiple answers to a single query, instead of just one.

   아무래도 기자는 여러 답변 생성하고 하나 택하는 방식으로 이해한듯 하네요

        Hacker News 의견

     * 모델 훈련 비용이 증가함에 따라 학습에 필요한 시간이 늘어나는 문제점이 있음. 작은 모델이 더 빠른 혁신을 이룰 수 있는 이유는 피드백 루프가 더 짧기 때문임
     * OpenAI의 GPT-4 개발에 대한 설명이 기사에 대한 신뢰를 주지 못함
     * LLMs가 더 이상 단순히 데이터와 컴퓨팅 파워의 증가만으로는 발전하지 못하는 한계에 도달했음을 언급함. 새로운 아이디어가 필요하며, 이를 위한 자금은 충분히 준비되어 있음
     * LLM의 현재 수준이 보수적인 신뢰도 지표를 제공할 수 있다면 훨씬 더 유용할 것임. ""모르겠음"" 또는 ""확실하지 않지만...""과 같은 출력을 제공할 필요가 있음
     * OpenAI의 다음 출시보다 중요한 것은 소프트웨어 산업이 이 기술을 통합하여 그 가치를 실현하는 것임
     * 내부자 발언을 통해 추측할 수 있는 것은, 스케일링과 데이터 및 알고리즘 변화로 10배의 개선을 원한다는 것임. 공개 데이터 소스는 거의 소진되었으며, 알고리즘 변화는 연구를 통해 지속적인 개선을 이루고 있음
          + 데이터가 제한적일 경우 스케일링이 정체됨
          + 컴퓨팅을 더 나은 데이터로 전환하는 방법을 찾는 것이 논리적인 단계임
          + o3가 공개되면서, OpenAI의 다음 방어벽은 최고의 합성 훈련 세트가 될 가능성이 있음
     * GPT-5는 일정이 늦춰지지 않았으며, GPT-4o로 이미 반년 전에 출시되었음. 혁신적이지 않아 5로 명명되지 않았고, 마지막 순간에 재브랜딩되었을 가능성이 있음
     * 기술 저널리즘이 과장되었다고 언급하며, o3가 출시되었음에도 불구하고 여전히 비판적인 기사가 나옴
     * o1-Pro는 주관적으로 GPT-4보다 훨씬 뛰어나며, o3는 그보다 더 나은 것으로 평가됨. 기술이 빠르게 발전하고 있음을 시사함
     * 이 기술이 어떻게 적합하게 작동할지를 세계가 알아가고 있으며, 일정이 늦춰졌다는 것은 거의 코미디 같음

   정해져있는 로드맵이나 기준이 딱히 없는 상태에서 개발지연이 된다 만다 이야기하는 것은 이것도 그냥 마케팅성 정보 흘리기 일 가능성이 많겠죠.
"
"https://news.hada.io/topic?id=18446","MDN, 새로운 웹 개발 학습 섹션 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         MDN, 새로운 웹 개발 학습 섹션 공개

     * ""MDN Learn Web Development"" 섹션이 2024년 11월부터 업데이트되기 시작하여 12월에 최종 완료
     * 이 섹션은 2016년 처음 출시되어 초보 웹 개발자가 ""초급에서 익숙한 수준""으로 발전하도록 돕는 것이 목표였음
          + 그러나 몇 가지 문제가 발생
               o 초보자에게 적합하지 않은 주제들로 콘텐츠가 과도하게 확장됨
               o 초보자는 무엇을 언제 배워야 할지 명확한 경로를 원함
               o 텍스트 기반 학습은 점점 더 많은 사용자가 선호하지 않음
     * 새로 개발된 ""MDN Curriculum"" 은 덜 혼란스럽고 더 간소화된 학습 경로를 제공하며, 더 나은 웹을 구축할 수 있도록 설계
          + 연구를 통해 신입 개발자에게 필요한 필수 기술과 공통 지식 격차를 파악
          + 자가 학습자와 교육자를 위한 학습 가이드와 교육 과정으로 활용 가능
          + Scrimba와의 협력을 통해 대화형 멀티미디어 콘텐츠를 실험적으로 포함
     * 하지만 두 개의 학습 리소스가 혼란을 야기한다는 피드백을 받음
          + 커리큘럼은 경로를 제공하지만, 목표를 달성하기 위해 어떤 콘텐츠를 학습해야 할지 여전히 불명확했음
          + 콘텐츠의 과도한 확장은 여전히 해결되지 않음
     * 그래서 MDN Curriculum이 Learn Web Development로 통합되어, 사용자가 더 간단하고 체계적인 학습 경험을 제공받을 수 있게 됨
          + 모든 글이 커리큘럼의 구조를 따르며, ""Getting Started"", ""Core"", ""Extensions"" 섹션으로 구분
          + 초보자에게 적합하지 않은 콘텐츠는 추가 자료로 재구성하거나 MDN의 다른 섹션으로 이동
          + 커리큘럼의 학습 목표를 각 섹션 상단에 추가
          + 커리큘럼의 기타 기능도 Learn Web Development 섹션으로 통합
          + 커리큘럼 섹션은 일시적으로 유지되며, 향후 Learn 영역에 완전히 병합될 예정
     * MDN 학습 콘텐츠의 미래
          + 콘텐츠를 더 짧고 흥미롭게 개선하여 초보자 친화적으로 조정
          + 기존 도전 과제 및 예제를 업데이트해 더욱 현대적인 경험 제공
          + 페이지 디자인을 개선하여 밝고 대담한 스타일로 사용자 경험 향상
          + 정기적인 개선이 이루어질 예정
     * 새로운 섹션은 developer.mozilla.org/docs/Learn_web_development 에서 확인 가능
"
"https://news.hada.io/topic?id=18479","ESP32에서 Wi-Fi 해방 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ESP32에서 Wi-Fi 해방 [비디오]

     * ESP32의 Wi-Fi 해방
          + ESP32의 Wi-Fi 주변 장치를 리버스 엔지니어링하여 오픈 소스 Wi-Fi 스택을 구축하는 내용임
          + 38c3 행사 동안 CCH에는 수천 개의 ESP32가 있으며, 모두 폐쇄형 Wi-Fi 스택을 실행하고 있음
          + 오픈 소스 스택을 사용하면 소프트웨어를 수정하고 감사할 수 있는 능력을 제공하여 잠재적으로 민감한 데이터를 보호할 수 있음
          + 리버스 엔지니어링을 통해 ESP32의 잠재력을 최대한 발휘할 수 있으며, 연구 도구 및 IoT SoC로서의 유용성을 발견함
          + ESP32는 펜테스팅 도구, B.A.T.M.A.N. 메시 라우터, AirDrop 클라이언트 등으로 활용 가능함
          + Wi-Fi, ESP32, 리버스 엔지니어링 및 프로젝트 접근 방법에 대한 지식을 얻을 수 있음
     * 다운로드 및 자막
          + 이 강연은 여러 언어로 번역되었으며, 다운로드 가능한 파일에는 모든 언어가 별도의 오디오 트랙으로 포함되어 있음
          + 대부분의 데스크톱 비디오 플레이어에서 오디오 트랙을 선택할 수 있음
          + 자막 작업에 참여할 수 있음
     * 공유 및 태그
          + Chaos Computer Club e.V가 주최한 38c3 행사 관련 내용임
"
"https://news.hada.io/topic?id=18408","Infinigen: 절차적 생성으로 무한한 포토리얼리스틱 세계 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Infinigen: 절차적 생성으로 무한한 포토리얼리스틱 세계 구현

     * Infinigen은 ""절차적 3D 장면 생성기""로, 컴퓨터 비전 연구를 위한 고품질 3D 학습 데이터를 생성
     * Blender 기반으로 동작하며, BSD 3-Clause License로 무료 및 오픈소스로 제공

주요 기능 및 특징

  절차적 생성 (Procedural)

     * 모든 모양과 재질을 수학적 규칙으로 무작위 생성.
     * 매크로 구조부터 미세한 디테일까지 생성 가능.
     * 무한한 변형 가능성과 사용자 지정 가능.

  다양한 데이터 생성 (Diverse)

     * 자연 세계의 식물, 동물, 지형, 불, 구름, 비, 눈 등 다양한 물체와 장면 생성 가능.
     * 초기 초점은 자연 환경에 맞춰져 있으나, 인공물과 건축 환경으로 확장 예정.

  실제 기하학 (Real Geometry)

     * 모든 세부 기하학은 실제로 구현되어, 정확한 3D 데이터 보장.
     * 범프 맵, 노멀 맵 등 가상 세부 표현 기법 사용하지 않음.
     * 컴퓨터 비전, 특히 3D 비전 연구에 최적화.

  자동 주석 생성 (Automatic Annotations)

     * 광학 흐름, 3D 장면 흐름, 깊이, 표면 노멀, 파놉틱 세분화, 가림 경계 등 고품질 주석 자동 생성.
     * 렌더링 과정 전체에 대한 사용자 접근 권한 제공으로, 주석의 사용자 지정이 용이.

   --

연구 논문

    1. Infinite Photorealistic Worlds Using Procedural Generation
          + IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR) 2023 발표
          + 3D 절차적 생성의 무한 가능성을 다룬 논문.
    2. Infinigen Indoors: Photorealistic Indoor Scenes using Procedural Generation
          + CVPR 2024 발표 예정
          + 실내 장면 생성의 절차적 접근법에 대한 연구.

        Hacker News 의견

     * 정말 멋진 프로젝트임
          + ML/AI 연구자들에게 질문이 있음: 이와 관련된 ML/AI 논문이 있는지, 예를 들어 가상 환경에서 로봇을 훈련시키는 것에 대해
          + 현재 ML/AI 분야에서 로봇을 훈련시키기 위해 사용되는 데이터 세트가 무엇인지 궁금함
     * 실내 장면은 완전히 그럴듯하지만, 실외 장면은 많이 부족함. 최신 기술에 비해 뒤처져 있음
     * 저자 목록에 여러 중국의 유명 대학이 포함되어 있는 것을 보았음. 이는 칩 제재/수출 규칙 위반을 의미하는 것 아닌지 궁금함
     * 이전에 게시된 적이 있는지 궁금함. 멋지다고 생각하지만 몇 년 전부터 있었던 것 같음. 업데이트가 있었는지 알고 싶음
     * 이전 게시물 링크: https://news.ycombinator.com/item?id=36373494
     * README에서 명확하지 않음. 무한한 변형을 생성할 수 있다는 의미인지, 아니면 무한한 세계를 생성한다는 의미인지 궁금함
     * 메타 태그 설명이 업데이트가 필요하며 공유될 때 플레이스홀더 콘텐츠가 표시되고 있음
     * 이러한 것이 가능하다는 사실은 우주에 대해 무언가를 말하는 것 같음. 우리가 생각하는 것만큼 환경에 정보가 많지 않다는 것
          + 이는 특히 동물의 작은 뇌가 세계를 모델링하고 작동하는 데 있어 비합리적으로 효과적인 이유를 설명할 수 있음
     * 매트릭스와 유사한 도입부가 전혀 미묘하지 않음
"
"https://news.hada.io/topic?id=18484","rainfrog - Postgres용 데이터 관리 TUI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   rainfrog - Postgres용 데이터 관리 TUI 도구

     * 경량, 터미널 기반의 pgadmin/dbeaver 대체제를 제공하는 것이 목표
          + 기본적으로 postgres 기반으로 테스트 됨. mysql과 sqlite도 지원하지만 불안정함
     * vim과 유사한 키 바인딩 및 마우스 컨트롤을 통한 효율적인 네비게이션
     * 키워드 강조 표시 및 세션 기록을 제공하는 쿼리 편집기
     * 데이터를 빠르게 복사하고, 테이블을 필터링하고, 스키마간에 빠르게 전환
     * 테이블 메타데이터 및 속성 보기 숏컷
     * 크로스 플랫폼(macOS, Linux, Windows, termux를 통해서 Android도 가능)

   vim 키바인딩에 대한 구현은 여기에서 제공하는 군요
   https://github.com/rhysd/tui-textarea

   키바인딩은 역시 vim! (싸우자)
"
"https://news.hada.io/topic?id=18413","AI의 수학 능력: 수학자의 견해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           AI의 수학 능력: 수학자의 견해

     * o3와 FrontierMath 소개
          + o3는 OpenAI의 새로운 언어 모델로, FrontierMath라는 비밀 데이터셋에서 25%의 점수를 기록함.
          + FrontierMath는 Epoch AI가 발표한 어려운 수학 문제들로 구성된 비공개 데이터셋임.
          + 데이터셋은 ""이 숫자를 찾아라!""와 같은 문제로 구성되어 있으며, 자동으로 검증 가능한 명확한 답을 요구함.
     * FrontierMath 데이터셋의 난이도
          + FrontierMath의 문제들은 연구 수학자에게도 비전형적이며, 일부 문제는 박사 과정 수준의 지식이 필요함.
          + 데이터셋의 문제들은 수학적 증명보다는 숫자를 찾는 데 중점을 두고 있음.
          + 수학 연구자들은 주로 증명이나 아이디어를 찾는 데 시간을 쓰기 때문에, FrontierMath는 AI 수학 연구에 중요한 데이터셋임.
     * AI의 수학적 능력
          + AI는 현재 고등학교 수준의 수학 문제를 잘 해결하고 있으며, 곧 대학 수학 시험도 통과할 것으로 예상됨.
          + 그러나 고급 학부 수준 이상의 혁신적인 아이디어를 생성하는 것은 여전히 도전적임.
          + o3가 25%의 점수를 기록한 것은 놀라운 일이지만, 일부 문제는 대학생 수준이라는 주장이 있음.
     * 수학 연구에서의 AI의 역할
          + 수학 연구에서 중요한 것은 ""이 정리를 증명하라!""는 문제를 해결하는 것임.
          + DeepMind의 AlphaProof는 2024년 국제 수학 올림피아드 문제 중 4개를 해결하며, 일부는 완전한 Lean 증명으로 검증됨.
          + AI가 수학 연구에서 더 큰 역할을 하려면, 인간이 이해할 수 있는 방식으로 증명을 설명할 수 있어야 함.
     * 미래 전망
          + AI가 수학 연구에서 더 큰 역할을 하려면, 인간이 이해할 수 있는 방식으로 증명을 설명할 수 있어야 함.
          + AI의 발전은 빠르게 진행되고 있지만, 여전히 갈 길이 멀음.
          + AI가 학부 수준의 장벽을 넘는 시점은 아직 불확실함.

        Hacker News 의견

     * Reddit 스레드에서 세 가지 난이도 등급 중 25%는 T1(가장 쉬움)이고 50%는 T2임. 저자가 본 다섯 개의 공개 문제 중 두 개는 T1, 두 개는 T2였음. Glazer는 T1을 ""IMO/학부 수준 문제""라고 설명했지만, 기사 작성자는 이를 학부 수준 문제로 보지 않음. LLM이 이미 저자가 놀랄 것이라고 말한 일을 하고 있음
          + Glazer는 T1을 ""IMO/학부""라고 부른 것을 후회했으며, 이는 IMO와 일반 학부 수준의 차이 때문만이 아님. 그는 ""주요 결과를 블랙박스로 적용하는 것이 문제의 난이도를 지나치게 높이는 경우 문제를 한 단계 낮추게 된다""고 말함
     * ChatGPT를 사용하여 선형대수학을 이해하려고 했지만, 실제 수학에서는 자주 어리석은 실수를 함. 예를 들어, 벡터의 차원을 넘어 인덱싱하거나, 스칼라에 대해 행렬 분해를 시도하거나, 차원이 맞지 않는 행렬을 곱하려고 함
     * O1은 4o보다 오류를 더 잘 찾아내지만 여전히 어리석은 실수를 많이 함. 어느 정도 지식 있는 사람이 도움을 주지 않으면 일관되게 결과를 생성하기는 어려움
     * Akshay Venkatesh의 강연에서 자동화된 이론 증명이 더 보편화될 경우 ""수학 직업""의 미래에 대해 논의함. 자동 추론의 발전이 연구 수학의 개념화와 수행 방식을 어떻게 변화시킬지에 대해 이야기함
     * 18세 아들이 수학을 공부하고 싶어하는 부모로서 자동화로 인해 직업이 사라질까 걱정됨. 그러나 LLM이 완전히 대체할 수 있을지 의문임. LLM이 모든 것을 해결할 무한한 시간/자원을 가지고 있지 않기 때문에 여전히 인간의 역할이 있을 것이라고 생각함
     * LLM이 거의 모든 문제를 해결할 수 있는 문제 모음을 만들 수 있을지 모르지만, 인간의 추론을 대체할 수 있는 일반적인 문제 해결자가 될 것이라고는 생각하지 않음. AI가 인간처럼 독립적인 의미의 사회적 합리성을 개발할 수 있을 때까지 추론이 가능하지 않을 것임
     * ChatGPT가 기본적인 오류를 범한 예시를 제시함. 예를 들어, Stop-and-Wait ARQ의 효율성 공식을 유도하는 과정에서 잘못된 단계를 설명함. 또 다른 예로, 연습할 수 있는 삼단논법을 요청했을 때 일관성이 없는 삼단논법을 제공함
     * FrontierMath 데이터셋이 손상되었을 가능성을 제기함. OpenAI가 질문을 알고 있다면 다음 버전에서 FrontierMath 테스트에서 80% 이상을 달성할 수 있을 것이라고 예상함
     * Quantum 연구와 유사한 문제에 직면함. 전통적인 컴퓨터로 불가능한 계산을 수행해야만 진전을 입증할 수 있음. ChatGPT가 25% 점수를 기록했을 때, 그 25%가 훈련 세트의 질문과 얼마나 가까운지에 대한 의문이 제기됨
     * 언어 모델이 리만 가설에 대한 ""증명""을 제공할 가능성에 대해 우려함. 수학자들이 이러한 증명을 검증하려고 할 수 있지만, 많은 시간이 소요될 수 있음
     * IMO 2025에 기계가 참가하지 않을 것임. IMO에서는 ""채점자"" 개념이 없으며, 각국의 팀 리더와 심사위원 간의 협상을 통해 점수가 결정됨. AI 작업을 채점하기 위해 수백 명이 더 오래 머물지 않을 것임
"
"https://news.hada.io/topic?id=18455","Bruin - Go로 작성한 통합 데이터 파이프라인 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Bruin - Go로 작성한 통합 데이터 파이프라인 오픈소스

     * 다양한 소스에서 데이터 수집, SQL 및 Python을 사용한 데이터 변환, 데이터 품질 검사를 추가하여 엔드투엔드 플로우를 구축하는 통합 프레임워크
          + dbt + Airbyte + Great Expectations 를 하나로 구현한 것과 비슷
     * Go 로 짠 CLI 와 연동되는 VS Code용 확장으로 구성. VS Code 안에서 파이프라인 생성, 관리, 배포 가능
     * ingestr로 데이터 수집
          + ingestr는 파이썬으로 작성된 별도의 오픈소스 CLI로 데이터 소스 간에 쉬운 복사를 처리
          + 지원 : AWS Athena, Databricks, DuckDB, Google BigQuery, Microsoft SQL Server, Postgres, Redshift, Snowflake, Synapse, Pager
     * SQL과 Python을 이용하여 데이터 변환 (dbt와 비슷)
     * uv를 이용하한 파이썬 환경 관리. 독립시켜서 실행
     * 데이터 품질 검사 내장
     * Jinja 템플릿 지원
     * dry-run 지원으로 파이프라인 처음부터 끝까지 검증 가능
     * 로컬 머신, EC2 인스턴스 및 GitHub Actions에서 실행 가능
     * 환경 변수를 이용한 Secret 인젝션
     * 다양한 테이블/뷰 Materialization 전략 지원. incremental 테이블
"
"https://news.hada.io/topic?id=18493","WebGL 유체 시뮬레이션 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           WebGL 유체 시뮬레이션 기술

     * 품질 설정
          + 높은 품질, 중간 품질, 낮은 품질, 매우 낮은 품질 중 선택 가능
     * 시뮬레이션 해상도
          + 3264, 128, 256 중 선택 가능
     * 밀도 확산
          + 밀도의 확산 정도를 조절
     * 속도 확산
          + 속도의 확산 정도를 조절
     * 압력
          + 압력 설정 가능
     * 와류
          + 와류의 강도를 조절
     * 스플랫 반경
          + 스플랫의 반경을 조절
     * 음영
          + 음영 효과 설정 가능
     * 컬러풀
          + 색상 설정 가능
     * 일시 정지
          + 시뮬레이션을 일시 정지
     * 랜덤 스플랫
          + 랜덤 스플랫 생성 가능
     * 블룸 효과
          + 블룸 효과 설정 가능
     * 태양광선
          + 태양광선 효과 설정 가능
     * 캡처
          + 화면 캡처 기능 제공
     * 소셜 미디어 링크
          + Github, Twitter, Discord 링크 제공
     * 모바일 앱 확인
          + 모바일 앱 확인 가능
     * 제어 닫기
          + 제어 패널 닫기 가능

        Hacker News 의견

     * 초기 구현은 낮은 해상도에서는 사이버펑크 네트러너 느낌을 주고, 높은 해상도에서는 유령 같은 품질을 가짐
     * 이 프로젝트의 포크를 통해 빛 모델을 가산에서 감산으로 바꾸면 물속의 잉크 같은 효과를 얻을 수 있음
     * 고해상도 물리 시뮬레이션은 CPU/GPU의 처리 능력에 감탄하게 만듦. 비행기 조종석에서 긴급 상황을 다룬 2분짜리 영상을 보고 실제가 아닌 시뮬레이터나 비디오 게임임을 깨달음
     * WebGL에서 물 시뮬레이션의 예시를 찾고 있으며, Evan의 Pool 데모를 좋아함
     * 시뮬레이션이 어떤 종류의 유체를 구현하는지 궁금해함. Navier-Stokes 유체 방정식을 구현하지만 실제 물과는 다르게 보임
          + 스케일 문제인지, 아니면 3D가 아닌 2D라서 그런 것인지 의문을 가짐
     * Sebastian Lague가 유체 렌더링에 관한 관련 영상을 제작함
     * oimo.io에서 WebGL 유체 시뮬레이션을 제공함
     * iPhone 15 Pro에서 HDR을 구현하여 더욱 돋보이게 함
     * Plasma Pong을 떠올리게 하며, 온라인 무료 버전 구현을 희망함
     * 노트북의 터치스크린을 처음으로 감사하게 여김
"
"https://news.hada.io/topic?id=18401","Meta가 Java에서 Kotlin으로 대규모 변환하며 얻은 경험과 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Meta가 Java에서 Kotlin으로 대규모 변환하며 얻은 경험과 교훈

     * Meta는 수년간의 프로젝트를 통해 Android 코드베이스를 Java에서 Kotlin으로 전환 중
     * 현재 세계 최대 Android 코드베이스 중 하나를 관리하며, 절반 이상을 성공적으로 Kotlin으로 변환했음
          + Meta는 2020년부터 Kotlin-first 개발 전략을 채택
     * 전체 코드를 변환한 이유:
          + Kotlin의 ""생산성 향상""과 ""Null 안정성""의 이점을 최대한 활용하기 위해 기존 천만라인의 Java 코드까지 변환을 결정
          + Null 안정성을 강화하고 혼합 코드베이스 문제 해결
               o 혼합 컴파일(Java와 Kotlin 동시 컴파일)은 빌드 속도를 가장 느리게 만듦
               o 남아 있는 Java 코드는 Null 안정성 문제를 유발: Null 안전하지 않은 Java 코드는 의존성 그래프에서 NullPointerException(NPE)의 잠재적 원인이 됨
               o Kotlin은 런타임 검증으로 Null 안전성을 보장

자동화 과정

     * 초기에는 Intellij IDE의 J2K 변환 도구를 반복적으로 실행했음
          + Meta의 대규모 코드베이스에서는 100,000번 이상 클릭이 필요하며, 각 실행에 몇 분 소요
          + 결과적으로 이 방식은 확장성 부족으로 비효율적
     * 자동화 도구: Kotlinator를 개발
     * 6단계 변환 프로세스
         1. Deep Build: 변환할 코드를 빌드해 모든 심볼을 IDE가 해결 가능하도록 준비. 서드파티 의존성 및 생성 코드 포함
         2. Preprocessing: Meta의 맞춤 도구 Editus 기반. Null 안정성 및 종속성 처리, J2K 워크어라운드 수행 등 약 50단계 포함
         3. Headless J2K: J2K를 서버 환경에서 실행 가능하도록 수정
         4. Postprocessing: Android 특화 변경, Null 안정성, Kotlin 스타일 적용등 약 150단계
         5. Linters: 자동 수정을 통한 지속적인 변환 품질 향상
         6. Build Error-based Fixes: 빌드 에러를 분석해 추가 수정 적용

J2K를 헤드리스화 하기

     * J2K를 원격에서 실행 가능하도록 수정:
          + J2K는 Intellij IDE와 긴밀히 결합되어 있어 독립 실행이 어려웠음
          + 초기에는 Intellij 테스트 환경을 활용해 실행을 고려했으나 JetBrains의 J2K 전문가(Ilya Kirillov)와 협의 후, 헤드리스 검사 방식으로 전환
          + Intellij 플러그인을 만들어 ApplicationStarter 클래스를 확장하고, J2K의 JavaToKotlinConverter 클래스를 호출하여 구현
     * 헤드리스 방식의 장점
          + 로컬 IDE 문제 해결: 개발자들이 IDE 버튼을 직접 클릭하지 않아도 작업 가능
          + 여러 파일 동시 변환: 대규모 파일 처리가 가능해짐
          + 시간 소요 감소: 변환 시간 자체는 약 30분으로 늘어났으나, 개발자들이 소비하는 시간은 크게 줄어듦
          + 빌드 및 에러 수정 지원: 시간 소모가 크지만 유용한 작업 단계(빌드 후 수정)를 원격에서 자동 실행 가능
     * 자동화와 코드 리뷰
          + Meta 내부 시스템을 활용해 일일 배치 작업 생성:
          + 사용자 정의 기준에 따라 배치로 diffs 생성 (Meta의 pull request 버전)
          + 자동으로 리뷰어를 할당하고 테스트 및 검증 수행 후, 최종적으로 승인된 diff를 배포
     * 웹 UI 제공: 개발자가 특정 파일 또는 모듈 변환을 원격으로 트리거 가능
     * 변환 순서 결정
          + 특정 순서를 강제하지 않음:
               o 활성 개발 파일 우선 처리
               o Kotlinator가 종속성 그래프를 자동 처리하여 외부 파일의 호환성 문제 해결
               o 예: foo.getName()를 foo.name으로 자동 업데이트

그외

     * 커스텀 Preprocessing (Java->Java) & Postprocessing (Kotlin->Kotlin 단계 추가
     * Meta의 내부 툴 Editus와 JetBrains PSI 라이브러리를 활용해 변환 품질 향상
     * Nullsafe와 NullAway

Kotlin 변환의 현재와 미래

     * Meta의 Android Java 코드의 절반 이상이 Kotlin으로 변환 완료 (혹은 일부 코드 삭제)
     * 하지만, 쉬운 절반은 끝났음:
          + 남은 작업은 복잡하고 규모가 큼
          + 완전 자동화 가능한 변환을 위해 맞춤 단계를 추가하거나 J2K 개선에 기여해야 함
          + 반자동 변환의 경우, Kotlinator 개선으로 매끄럽고 안전한 배포가 목표
     * 다른 기업들도 유사한 Android 코드 변환 문제를 겪고 있을거라 생각
     * Meta는 변환 도구 개선과 최적화 과정을 통해 얻은 해결책을 공유함
     * 협력 제안:
          + Kotlinlang Slack의 #j2k 채널에서 다른 개발자들과 논의
          + 서로의 사례와 솔루션 공유로 더 나은 변환 경험 구축이 가능할 것
"
"https://news.hada.io/topic?id=18504","디지털 페인팅을 위한 피그먼트 믹싱 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         디지털 페인팅을 위한 피그먼트 믹싱 기술

     * 비밀 무기
          + Mixbox는 디지털 페인팅에서 실제 색소 혼합을 구현하는 실용적인 라이브러리임
          + Kubelka & Munk 모델을 사용하여 색상을 색소로 처리함
          + 간단한 RGB 입력 및 출력 인터페이스로 제공되며 C++, Python, GLSL 등에서 사용 가능함
     * 디지털 아트에 미치는 영향
          + Mixbox는 Rebelle과 같은 페인팅 도구에서 아름다운 디지털 오일 및 수채화를 구현함
          + Flip Fluids 애드온을 통해 Blender에 현실적인 액체 색상을 제공함
     * 개발자를 위한 정보
          + Mixbox는 클래식 lerp 인터페이스를 제공하며, RGB 색상을 입력받아 혼합된 RGB를 출력함
          + Unity와 Android Studio를 지원함
     * 코드 예제
          + Mixbox의 작동 방식을 보여주는 재미있고 쉬운 프로젝트들이 제공됨
          + 브라우저에서 직접 실행 가능하며 그래픽이나 코드를 조작할 수 있음
     * 라이선스
          + Mixbox를 소프트웨어에 통합하고자 하는 개발자를 위한 유연한 라이선스 옵션 제공
          + 독립 개발자부터 대기업까지 맞춤형 라이선스를 제공함
     * 비밀 무기 팀 소개
          + EbSynth와 Mixbox의 개발 팀으로, 컴퓨터 그래픽, 예술, VFX에 열정을 가지고 있음
          + 연구를 시각 예술가를 위한 강력한 도구로 변환하기 위해 Secret Weapons를 설립함
     * 자주 묻는 질문
          + Mixbox를 Photoshop, Procreate, CSP에서 사용하는 방법
          + 구매 전 체험 가능 여부
          + Mixbox가 처리할 수 있는 색소 종류
          + 색소 혼합 작동 방식
          + 셰이더 버전 존재 여부
     * 연락처
          + Secret Weapons
          + 주소: 1111B S Governors Ave, Dover, DE 19904, United States
          + 이메일: team@scrtwpns.com, sarka@scrtwpns.com, ondrej@scrtwpns.com
"
"https://news.hada.io/topic?id=18477","Chronotrains - 유럽에서 8시간 만에 기차로 갈 수 있는 여행지 검색하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Chronotrains - 유럽에서 8시간 만에 기차로 갈 수 있는 여행지 검색하기

     * 이 지도는 유럽의 각 역에서 8시간 이내에 여행할 수 있는 거리를 보여줌.
     * 마우스를 지도 위에 올리면 해당 도시의 등시간선을 볼 수 있으며, 역을 검색하거나 아래 예시 중 하나를 클릭할 수 있음.
     * 예시 도시: 암스테르담(네덜란드), 베를린(독일), 파리(프랑스), 밀라노(이탈리아)
     * 최고의 유럽 기차 노선 발견하기
          + 유럽에서 기차 여행은 속도, 편리함, 그리고 아름다운 경치를 제공함.
          + 빠른 여행이나 긴 여행을 계획할 때, 인터랙티브 지도를 통해 유럽의 어떤 도시에서든 시간 예산에 맞는 최고의 목적지를 찾을 수 있음.
     * 유럽에서 기차 여행을 선택해야 하는 이유
          + 효율성: 고속 열차는 주요 도시를 연결하여 다른 교통수단에 비해 여행 시간을 크게 단축시킴.
          + 편안함: 넓은 좌석, 기내 편의시설, 그리고 자유롭게 이동할 수 있는 공간을 제공함.
          + 지속 가능성: 기차는 친환경적인 대안으로, 탄소 발자국을 줄이는 데 도움을 줌.
     * 자주 묻는 질문
          + Q: 지도상의 여행 시간은 얼마나 정확한가요?
               o A: 지도는 Deutsche Bahn 데이터를 기반으로 한 예상 여행 시간에 기반하고 있지만 실제 시간은 다를 수 있음. 여행 전에 최신 일정을 항상 확인해야 함.
          + Q: 이 지도를 다도시 여행 계획에 사용할 수 있나요?
               o A: 네, 이 지도는 여러 도시를 효율적으로 탐험할 수 있는 확장된 일정 계획에 유용한 도구임.
          + Q: 유럽 철도 티켓에 대한 할인 혜택이 있나요?
               o A: 많은 철도 서비스가 조기 예약, 청소년 여행자, 그리고 빈번한 여행자를 위한 할인을 제공함. 최신 할인 정보를 위해 해당 철도 서비스 웹사이트를 확인해야 함.
     * 예약
          + SNCF Connect, Deutsche Bahn, Trainline에서 직접 예약 가능
     * 이 지도는 Deutsche Bahn의 데이터를 사용하여 Direkt Bahn Guru를 통해 예상 여행 시간을 기반으로 함. 실제 시간표는 다를 수 있음.

        Hacker News 의견

     * 유럽의 주요 도시를 야간 열차로 여행하며 숙박비를 절약하고, 아침마다 새로운 도시에 도착해 상쾌한 기분을 느꼈음
          + 토론토와 몬트리올 간에도 비슷한 서비스가 있었으며, 중간에 몇 시간 정차하여 아침에 잘 쉬고 도착할 수 있었음
          + 기차 여행을 통해 많은 마을과 아름다운 경치를 볼 수 있었음
     * 미국에서도 밀도, 지리, 석유 경제 때문에 불가능하다고 생각하는 사람들에게 러시아의 철도 지도를 참고하라고 권장함
          + 시베리아 횡단 열차를 관광객으로서 탑승했으며, 다양한 사람들이 이용하는 것을 보고 최고의 인간 경험이라고 느꼈음
          + 고속 열차는 아니지만, 더 나은 삶의 방식이라고 생각함
     * 시각 장애인으로서 중앙 유럽의 대중교통 네트워크가 주는 독립성을 사랑함
          + 네덜란드에 살며 벨기에의 부모님과 독일의 친구들을 방문할 때 시각 동반자 없이 이동할 수 있었음
     * 베를린과 파리를 잇는 새로운 고속 열차가 8시간의 여행 시간으로 개통되었음
     * 독일에서는 Deutsche Bahn의 지연으로 인해 장거리 열차의 3분의 1이 지연되고 있음
     * 폴란드의 지도 사용에 혼란을 겪었으며, UI 문제인지 브라우저 문제인지 알 수 없었음
     * 리스본과 마드리드 간 고속선이 아직 없다는 점이 아쉬움
          + 두 나라는 역사적으로 밀접한 관계를 가지고 있지만, 수도 간 이동은 17시간이 소요됨
     * 유럽의 여러 도시 간 기차를 공통 플랫폼에서 예약할 수 있다면 좋겠다고 생각함
          + 여러 국경을 넘는 기차 예약은 악몽과 같음
     * 노르웨이에서는 기차가 취소되지 않으면 ""버스 대체 서비스""라고 부르기 시작했음
          + 기차가 취소되면 ""철도 대체 서비스""라고 부름
"
"https://news.hada.io/topic?id=18452","BlackCandy - 셀프 호스팅 음악 스트리밍 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlackCandy - 셀프 호스팅 음악 스트리밍 서버

     * Black Candy는 개인 음악 스트리밍 서버로, 사용자가 직접 호스팅할 수 있는 음악 센터
     * 아이폰/안드로이드 모바일 앱 제공
     * Nginx + Postgres + Ruby + Node.js + libvips + FFMpeg
     * Discogs API를 통해 아티스트 및 앨범 이미지를 가져올 수 있음
     * Docker 이미지를 사용하여 쉽게 설치 가능

        Hacker News 의견

     * 유용한 앱을 직접 호스팅하는 것을 좋아하며, 더 많은 것을 쉽게 찾을 수 있기를 바람. 현재 Jellyfin 서버와 Home Assistant를 직접 호스팅 중이며, 홈 보안 구독이 월 $75라는 것을 알고 대안을 찾았고, 개발자에게 월 $6를 지불하고 있음. Jellyfin은 물리적 미디어 백업에 훌륭하며, 오래된 VHS와 DVD를 사용자 친화적으로 경험할 수 있음
     * 지난 15년 동안 모든 음악 재생 옵션을 시도해봤지만, 컴퓨터에서 플레이리스트를 만들고 주기적으로 휴대폰에 저장하는 것이 가장 좋았음
     * 1년 전 여러 옵션을 시도한 후 Gonic 서버와 Supersonic PC, Amperfy 모바일을 사용 중임. 여러 도구를 유지해야 하지만, 자신에게 이상적인 기능 세트임. 직접 호스팅이 재미있으며, 로컬 LLM을 사용해 플레이리스트를 만들고 있어 아티스트를 재발견하는 데 도움을 줌
     * Plex를 Tailscale을 통해 연결하여 Plexamp 음악 플레이어를 사용 중임. 잘 작동하고 있지만, GitHub README나 Apple App Store 목록에서 모바일 앱이 오프라인 청취를 위해 음악을 다운로드할 수 있는지 명확하지 않음
     * 개인 음악 컬렉션을 호스팅할 서비스를 찾고 있지만, 많이 없음을 발견함. Vox라는 제품을 시도해볼 예정이며, 다양한 품질의 자체 호스팅 프로젝트가 많지만 Black Candy는 처음 봄. MP3 파일을 업로드하고 앨범으로 정리하며, ReplayGain 정규화, BPM 및 키 분석 등의 유용한 처리를 수행하는 서비스가 필요함. 데스크톱과 모바일에서 좋은 플레이리스트 관리자와 플레이어가 필요함
     * 알고리즘 기반 음악 서비스에 대한 불만이 증가하고 있으며, 이러한 서비스는 음악이 사라질 위험이 있음. 자신의 MP3 컬렉션을 관리할 수 있는 서비스가 많은 음악 애호가에게 매력적일 수 있음
     * 다양한 솔루션에 대한 많은 논의가 있음. 요즘 자체 호스팅 음악 스트리밍을 위한 보편적인 상호운용 표준이 있는지 궁금함. 오래된 Logitech Media Server를 사용 중이며, 더 많은 기능을 갖춘 것이 필요함. 특히 좋은 인덱싱과 검색 기능이 필요하며, 다양한 클라이언트와 서버를 선택할 수 있는 상호운용성이 필요함
     * 대용량 마이크로SD 카드가 요즘 매우 저렴함. 모든 클라우드 서비스를 사용하는 것은 여러 자원의 낭비처럼 보임. 좋은 연결이 없으면 무용지물임. 내부 네트워크에서만 가치가 있다고 느낌
     * 새로운 자체 호스팅 미디어 스트리밍 서버가 게시될 때마다 묻는 질문을 할 때임. 데모씬 트래커 파일 및 레트로 콘솔 음악 형식(비트 튠) 호스팅, 트랜스코딩 및 스트리밍 서버에 대해 아는 사람이 있는지 궁금함. chip-player-js가 거의 원하는 것을 제공하지만, Docker 컨테이너를 제대로 빌드할 수 없거나 종속성 문제로 인해 리포지토리를 빌드할 수 없음
     * 유료 소프트웨어를 기꺼이 지불한다면, Roon을 사용하여 음악을 조직하는 데 매우 만족함. 추가하는 앨범의 99%를 문제없이 처리하며, 훌륭한 멀티룸 지원과 최고의 추천 기능을 제공함. 몇 년 전 원격 스트리밍을 추가했으며, 지금은 그것만 사용함
     * Jellyfin과 Symfonium을 운영 중임. Symfonium은 무료가 아니지만 기능이 풍부하며 개발자의 열정이 느껴짐. 이 분야의 다른 옵션을 찾고 있으며, 자신에게 맞는 것을 찾기 위해 여러 번 시도했음. 보통 클라이언트가 부족함
"
"https://news.hada.io/topic?id=18520","Google Sheets를 모바일 친화적인 웹앱으로 변환하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Google Sheets를 모바일 친화적인 웹앱으로 변환하기

     * 팬데믹 동안 외식 주문과 관련된 문제를 해결하기 위해 스프레드시트 기반 앱 개발 시작
     * Glide를 사용해 Google Sheets 데이터를 모바일 친화적인 앱으로 전환함
     * 사용자 친화적 인터페이스와 손쉬운 검색 및 필터링 기능 제공
     * Glide를 사용하는 이유:
          + 무코드(no-code) 플랫폼: 코드 작성 없이 간단한 웹앱 생성 가능
          + 무료 사용자 옵션: 가정이나 친구 그룹을 위한 비공개 앱 생성 가능
          + 편리한 인터페이스:
               o Google Sheets 데이터를 직접 불러와 검색, 필터링, 편집
               o 레스토랑 이름, 카테고리, 주소 등을 검색하거나 필터링
          + Google의 AppSheet와 같은 대안도 있지만, Glide는 사용하기 쉽고 우아함
     * 앱 제작 과정:
          + Glide에 스프레드시트를 불러와 기본 앱 생성
          + 필요 없는 화면 숨기기, 라벨 변경 등으로 앱 최적화
          + 지도 컴포넌트를 추가해 레스토랑 위치를 시각화하고, 클릭 시 기본 지도 앱과 연동
     * 활용 사례:
          + 외식 앱: DC 지역 레스토랑 검색 및 필터링 기능 포함
          + DIYRoot 앱: 레시피를 분류하고 메뉴와 쇼핑 리스트를 관리
          + Pantry Items 앱: 향신료 및 소스 재고를 추적하고 필요한 항목을 쇼핑 리스트에 추가
     * 개인적 만족:
          + Swift나 JavaScript를 배우지 않고도 필요한 기능을 가진 앱을 직접 만들 수 있음
          + 앱의 기본 구조는 간단한 스프레드시트로 유지되어 누구나 기여 가능
          + 특정 기능 요청도 수락하며, 가족과 친구를 위한 작은 프로젝트로 만족감 제공
     * 추천 및 경고:
          + Glide 외에도 유사한 무코드 도구를 활용 가능
          + 이 취미는 한번 시작하면 쉽게 멈출 수 없으니 주의할 것

   계속 필요없는 기능을 추가해서 느리고 무겁게 만든다면 사용자는 결국 대체품을 찾겠죠.

        Hacker News 의견

     * Google Sheets를 백엔드 데이터베이스로 사용하여 대시보드를 구축한 경험을 공유함. Google Sheets는 API 지원이 뛰어나고, Pandas/SQL과 잘 호환되며, UX가 훌륭함. 데이터 검증이 번거로울 수 있지만, 프로토타입을 구축할 때는 Google Sheets가 가장 적합함. 대시보드는 API를 통해 데이터를 받아와 Vue-Bootstrap 테이블로 구현했음. Firebase Auth를 추가하여 프로젝트를 마무리했음.
     * Google Sheets를 사용하여 1,000개의 행까지는 잘 작동했으나, 25,000개의 행을 추가하자 오류가 발생함. SQLite는 25,000개의 행을 문제없이 처리했음. Google Drive API가 거의 쓸모없었으며, Google의 API에 대한 실망감을 표현함.
     * 복잡한 엑셀 파일을 개인 웹앱으로 전환하려는 아이디어를 가지고 있음. iOS용 Excel보다 나쁘지 않을 것이라고 생각함.
     * Glide와 Google Sheets를 사용하여 골프 리그 앱을 구축한 경험을 공유함. 사용자 경험이 좋았고, 가격도 합리적이었음. 취미 수준의 사용자를 위한 가격 정책이 필요하다고 언급함.
     * COVID 기간 동안 Airtable과 다양한 도구를 사용하여 리조트의 테스트 관리 솔루션을 구축함. Airtable의 관계형 데이터베이스 기능이 중요했으며, 25만 개 이하의 기록을 처리하는 데 적합함. ChatGPT와 커스텀 스크립트를 사용하여 Airtable 자동화를 구축한 경험도 공유함.
     * 복잡한 솔루션을 버리고 스프레드시트를 사용하는 것이 올바른 선택이라고 주장함.
     * Notion 데이터베이스를 사용하여 책, 영화, 게임 목록을 관리함. Obsidian이나 Logseq로 전환할 가능성을 고려 중임. Notion의 AI 기능 도입에 대한 불만을 표함.
     * 노코드 도구 대신 간단한 HTML5 페이지를 사용하는 것이 더 나을 수 있다고 언급함. AI 도우미가 프로토타입 워크플로우를 가속화함.
     * Glide의 FOSS 버전이 있으면 좋겠다고 언급함. 모바일 앱을 위한 대안이 부족함을 지적함.
     * Glide를 큰 화면에서 열어야 앱을 구축할 수 있다는 점이 아이러니하다고 언급함.
"
"https://news.hada.io/topic?id=18426","2024년의 Fogus: 사물과 물건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2024년의 Fogus: 사물과 물건

2024년의 최고의 발견들

     * 읽거나 본 훌륭한 글들
          + ELITE: The game that couldn’t be written: Commodore 64의 인기 게임 Elite에 대한 기사.
          + The Rich History of Ham Radio Culture: 햄 라디오의 역사에 대한 개요.
          + Get to Know Your Japanese Bathroom Ghosts: 일본의 화장실 유령에 관한 문화적 민속 이야기.
          + The History of WordStar: 영향력 있는 소프트웨어 WordStar의 역사.
          + Combinatory Programming: 조합 프로그래밍에 대한 설명.
          + Philip K. Dick’s Favorite Classical Music: PKD의 클래식 음악 사랑과 그의 소설 속 작곡가들에 대한 이야기.
     * 가장 많이 본 블로그 게시물
          + On method values, part 1: Clojure 1.12.0의 새로운 기능인 메서드 값에 대한 설명.
     * 발견한 기술 서적
          + And so FORTH: 오래된 Forth 책을 발견하고 즐김.
          + BASIC and FORTH in Parallel: BASIC과 Forth를 사용하여 간단한 스택 머신과 Forth 인터프리터를 만드는 책.
     * 비기술 서적
          + Butcher’s Crossing: 미국 서부 개척 시대를 배경으로 한 모험 이야기.
          + The Spectral Link: Thomas Ligotti의 두 이야기.
          + The Corvo Cult: Frederick Rolfe와 그의 문학 팬덤에 대한 이야기.
     * 발견한 음악
          + The Paragons: 스카 음악의 뿌리를 탐구하며 발견한 그룹.
          + That’s All! by Sammy Davis Jr.: 뛰어난 보컬 공연.
     * 발견한 영화
          + Withnail & I: 건조한 코미디 영화.
          + Jodorowsky’s Dune: 만들어지지 않은 가장 영향력 있는 영화에 대한 다큐멘터리.
          + Requiem for a Dream: 절망을 다룬 영화.
     * 즐겨 듣는 팟캐스트
          + Will Radio: Will Byrd의 독특한 비디오 시리즈.
          + Eros + Massacre: 심리적 영화에 대한 팟캐스트.
     * 개인적으로 사용한 프로그래밍 언어
          + Joy: 조합적 함수형 언어.
          + Forth: 역사적으로 풍부한 언어.
     * 업무 관련 프로그래밍 언어
          + Java: Clojure 컴파일러 작업.
          + Clojure: 15년간의 Clojure 프로그래머 경력.
          + ClojureScript: Clojure의 변화가 CLJS에 미치는 영향 탐구.
          + Datalog: Datomic flavor 사용.
     * 더 깊이 탐구하고 싶은 언어
          + Joy: 더 많은 정보를 탐구하고자 함.
          + Mouse: 오래된 언어지만 배울 점이 있음.
          + POP-11: AI 응용 프로그램을 지원하기 위해 설계된 언어.
     * 발견한 논문
          + Recursion Theory and Joy: Joy의 조합 프로그래밍과 재귀에 대한 논문.
          + A Simple Applicative Language: Mini-ML: ML 언어의 정의와 추상 기계로의 컴파일.
     * 기술 컨퍼런스
          + Clojure/conj 2024: Clojure 커뮤니티와의 만남.
     * 읽은 코드
          + Restrained Datalog in 39loc: Clojure 코드로 구현된 간단한 Datalog.
          + Post-Apocalyptic Programming: 현대 컴퓨팅의 부재 속에서의 기술 창조에 대한 글.
     * 2025년 계획
          + Clojure 1.13: 새로운 릴리스 준비.
          + clojure.core.async next: JDK 21+ 가상 스레드를 활용한 개선.
          + 블로그 간소화: WordPress에서 벗어나기.
          + Juxt: JVM 기반 함수형 언어 디자인 탐구.
     * 2024년의 영감
          + 다양한 사람들로부터 영감을 받음.
"
"https://news.hada.io/topic?id=18465","Lua는 과소평가된 언어임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Lua는 과소평가된 언어임

     * Lua의 설계와 구현을 배우면 배울수록 감명받음. 적은 코드로 많은 일을 수행하는 소프트웨어는 드물음
     * 그러나 Lua는 다른 언어들만큼의 마케팅과 주목을 받지 못함. 이로 인해 Lua의 기능과 장점을 아는 개발자가 적음
     * 주로 게임과 임베디드 시스템에서 사용되는 틈새 언어로 인식됨

[Lua의 특징과 장점]

  이해하기 쉬운 언어

     * Lua는 무료, 반사적, 명령형 스크립트 언어임. 1993년에 만들어졌으며, 다른 애플리케이션에 내장되어 확장 가능하도록 설계됨.
     * 설계가 깔끔하고 코드가 빠름. C API는 사용하기 쉬우며, 성능이 좋음.
     * 문법이 간결하고 미니멀리즘적이어서 초보자도 접근하기 쉬움.

    뛰어난 임베딩 가능성

     * Lua는 다른 언어, 특히 C와 C++로 작성된 애플리케이션에 쉽게 내장되도록 설계됨.
     * 게임과 임베디드 애플리케이션의 스크립팅과 확장에 탁월한 선택임.
     * 예: Lua를 C 프로그램에 임베드
#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>

int main() {
    lua_State *L = luaL_newstate();
    luaL_openlibs(L);
    luaL_dofile(L, ""./myscript.lua"");
    lua_close(L);
    return 0;
}

  다중 프로그래밍 패러다임 지원

     * Lua는 독립적으로 또는 적절한 라이브러리와 함께 명령형, 함수형, 객체 지향 프로그래밍을 지원함.
     * 사용자의 필요에 맞는 프로그래밍 스타일을 선택할 수 있는 유연성 제공

[Lua의 잠재적 단점]

  인덱싱 관례

     * Lua에서 인덱싱은 일반적으로 1부터 시작하지만, 이는 관례임. 배열은 0, 음수 또는 다른 값으로 인덱싱 가능함.
     * Lua에는 실제로 배열이 없고, 항상 키-값 해시인 테이블만 존재하여 0 또는 음수 등 다양한 값으로 인덱싱
     * 표준 라이브러리와 내장 함수는 인덱스가 1부터 시작하는 배열 같은 테이블을 가정함.

  오류 처리

     * Lua의 오류 처리는 다른 언어에서 온 개발자에게 직관적이지 않을 수 있음.
     * Lua에서는 오류를 값으로 처리할 수 있음. pcall을 사용하여 오류를 잡을 수 있음.
function risky_function()
    error(""Something went wrong!"")
end

local status, err = pcall(risky_function)
if not status then
    print(""Error: "" .. err)
end

  Nil로 종료되는 배열

     * Lua의 배열(배열로 사용되는 테이블)은 nil 값을 만나면 종료되며, 이는 예상치 못한 동작을 유발할 수 있음
local arr = {10, 20, 30, nil, 50}
for i, v in ipairs(arr) do
    print(v) -- 출력: 10, 20, 30 (nil에서 중단)
end

     * ipairs 함수는 nil 값을 만나면 반복을 중지함
     * 배열에 빈 공간이 있을 경우 ipairs 대신 pairs를 사용하는 것이 좋음. nil 값을 포함한 모든 항목을 탐색 가능

[요약]

     * Lua는 강력하고 효율적이며 다재다능한 프로그래밍 언어로, 더 많은 인정을 받을 자격이 있음.
     * 단순함, 내장 가능성, 성능 덕분에 게임과 임베디드 시스템 같은 다양한 애플리케이션에 적합함.
     * 저평가되었지만, 단순함과 성능 덕분에 시도해 볼 가치가 있음
     * nvim의 플러그인 시스템에서 사용되며, 효율적임.

     Lua에는 실제로 배열이 없고, 항상 키-값 해시인 테이블만 존재하여 0 또는 음수 등 다양한 값으로 인덱싱

   와우 애드온 때문에 루아를 잠깐 써본 적 있는데 이 부분이 제일 인상 깊었던 기억이 납니다. 거의 모든 자료구조에 항상 테이블을 쓰더라구요.

   lua의 이름만 알고 있었는데, 이 글 보고 별로라고 생각하게 되었습니다 ㅋㅋㅋ..

   잘은 모르지만, 버전 하위호환성이 끔찍하다는 이야기를 들었습니다..

   개인적으로는 Ruby.. 보다는 '일단 옛날 코드가 켜지는가??' 라는 질문에는 좀 더 나은 편이지만, 특히 5.3에서 이전 버전과 number를 취급하는 방식이 달라져 5.1에서 5.3으로 올리면 내부적으로 트랙킹하기 어려운 버그가 잔뜩 생깁니다...

   그리고 LuaJIT을 쓰는 곳도 많고 이건 또 인터페이스가 미묘하게 달라서 미묘하게 달라 생기는 문제가 가장 심각한 것 같아요. 내부 동작이 달라진 파트가 꽤 있어서 어떻게 할 수도 없고.. =ㅁ =.

   루아로 스마트싱스의 엣지 드라이버를 작성한 경험이 있습니다.
   그럭저럭 쓸 만은 했는데, 제 취향의 언어는 아니었습니다.

   저는 개발 환경이나 DE도 언어의 일부라고 생각하는데요,
   우선 커뮤니티의 분열이 좀 있는 것 같고

   language server도 여러 가지가 있는데 기능이 하나씩 빠져있거나 코드 인덱싱이 늦고 수정이 발생하면 처음부터 다시 하더라고요.

   1-base 인덱싱이나 주석으로 타입 힌트 작성하는 것도 별론데
   타입 힌트도 표준이 있는 것이 아니라 language server마다 다른 듯했습니다.

   코루틴도 구닥다리 파이썬의 그것을 떠올리게 합니다...

   임베딩이나 FFI는 확실히 간편한 것 같긴 합니다.

   요즘 sumneko 분이 만든 루아 랭귀지 서버가 죽입니다 'ㅁ '... (22년인가 23년에 만드셨어요) 요게 인덱싱이 꽤 센스가 좋더라고요

   루아의 장점(이자 단점)은 아무래도 이상한 짓을 할 때 생긴다고 생각하는데, 터무니 없을 정도로 다른 오브젝트의 메서드를 overwrite 하기 쉽고. 그로 인해 마구잡이로, 생각나는데로 쓰기에 참 좋은 언어라고 생각해요.

   타입 힌팅은... 말씀하신대로 나온 솔루션은 정말 많은데 제대로 정착한 솔루션은 거의 없어서 로블록스팀이 만든 luau에 기대를 걸고 있습니다..

        Hacker News 의견

     * Lua는 임베딩하기에 좋지만, Redis에서 스크립팅 언어로 선택한 것은 후회가 많았음. 언어 자체가 마음에 들지 않음. 추상화 수준에서 기대하는 것과 비교해 마찰이 있는 것처럼 보임. 작은 설계 결정들이 누적되어 언어가 다소 적대적임. 그러나 빠르고, 통합이 쉽고, 작은 메모리 사용량과 신뢰성 때문에 여전히 선택할 가치가 있음. C-API 수준에서도 스택 접근 방식으로 인해 적대감이 존재함. FORTH와 같은 스택 언어에 노출된 적이 있지만 바인딩을 작성할 때 여전히 정신적 운동이 필요했음.
     * Lua를 좋아한다면 Terra를 보길 권장함. Terra는 Lua에 임베딩되고 메타 프로그래밍되는 저수준 시스템 프로그래밍 언어임. C/C++처럼 정적 타입, 컴파일 언어이며 수동 메모리 관리가 가능함. 그러나 C/C++과 달리 처음부터 Lua로 메타 프로그래밍되도록 설계됨. Terra 프로그램은 Apple의 C 컴파일러에 사용되는 동일한 LLVM 백엔드를 사용함. 이는 Terra 코드가 동등한 C 코드와 유사한 성능을 발휘함을 의미함.
     * Lua를 커스텀 게임 엔진과 통합하는 작업을 최근에 했으며, 다른 언어와의 통합이 얼마나 깔끔한지 공감함. 인터페이스가 깔끔하여 자동으로 바인딩을 생성하기 쉬움. Roslyn Incremental Source Generators를 사용하여 C#과 Lua 간의 바인딩을 자동으로 생성했으며, 인터페이스 설계 덕분에 전혀 어렵지 않았음. Lua 스택과 동적 타이핑, ""테이블"" 덕분에 C#과 Lua 간의 임의 데이터 클래스에 대한 마샬러를 생성하기 쉬웠음. 그러나 언어 자체에 대한 유효한 비판이 많음. 특히 1 기반 인덱싱을 좋아하지 않음. 이러한 문제를 해결하면서 유사한 인터페이스를 가진 임베디드 스크립팅 언어를 설계하는 것을 고려 중임.
     * Lua에 대한 애정이 더 생기지는 않았음. 오히려 불만이 강화되었음. Lua를 작성한 지 오래되었지만 직관적이지 않다고 생각했음. 왜 배열이 테이블인지, 왜 nil로 종료되며 1에서 시작하는지 이해할 수 없음. Lua가 과소평가되었다고 생각하지 않음. (구형) 게임 엔진에서 스크립트를 작성하는 데 매우 인기가 있음.
     * Lua 플러그인 명령어로 챗봇을 만들었지만 C++ 프로그램에 통합하는 데 끔찍한 경험을 했음. 사람들이 임베딩이 쉽다고 말하는 이유를 이해할 수 없음. 스택 조작을 많이 해야 함. 언어 자체가 번거롭고 실수를 했을 때 전혀 도움을 주지 않음. 다시는 Lua를 사용하지 않을 것이며 Lua를 사용하는 프로젝트를 피할 것임.
     * Lua는 약한 타이핑, 타입 힌트 및 오류 처리의 부재로 인해 상당한 양의 코드를 작성하기 어려움. 과소평가되지 않음. 시간이 지나면서 정적 타입 언어와 타입 힌트(Python, TypeScript)를 점점 더 좋아하게 되었음. 커뮤니티에 힌트 없는 Python이나 JS 코드를 작성하는 것은 해로움. 최근에 1.5k cloc의 JS를 TypeScript로 다시 작성했음. 항상 누락된 null, null 속성 접근 또는 의미적으로 의심스러운 null이 수십 건 있었음.
     * 대부분의 스크립팅이 필요한 애플리케이션은 JavaScript를 임베딩해야 한다고 생각함. 기존 생태계에서 큰 이점이 있음. 사람들이 항상 좋아하지는 않지만 수백만 명이 이미 알고 있음. 배열 인덱싱과 nil 종료의 특이점과 Lua가 런타임에 알게 되는 수십 가지 다른 점을 다시 배울 필요가 없음. 모든 크기의 JS 엔진이 있으며, 대부분의 운영 체제는 설치 없이 접근 가능한 고품질 엔진과 임베딩 프레임워크를 제공함. 사용자에게 새로운 언어를 배우게 하는 대신 표준 언어를 사용하는 것이 좋음. 사용자와 자신 모두에게 시간을 절약할 수 있음.
     * Lua와 함께 작업하는 것을 즐겼으며 매우 좋은 언어라고 생각함. 특히 C/C++에 임베딩하는 인터페이스가 깔끔하고 유연함. 성능 문제는 있지만 고성능 비디오 게임에서 게임 로직에 Lua가 널리 사용되는 것을 고려할 때 이러한 문제는 해결 가능함. 그러나 혼란스럽고 언어를 어렵게 만드는 다른 문제들이 있음. Lua와 C 인터페이스를 배우는 것이 Lua를 배우는 것만큼이나 많기 때문에 배포 간 전환이 다른 언어보다 혼란스러움. 그럼에도 불구하고 언어가 과소평가되었다고 생각함.
     * Lua를 임베딩하는 것이 재미있었지만, wasm과 마찬가지로 전체 바이너리를 다시 컴파일하지 않고 새 코드를 실행해야 하는 경우가 거의 없었음. 가장 재미있었던 것은 C++로 게임 엔진을 만들고 모든 게임 로직에 Lua를 사용한 것이었음. 빠른 디버그 사이클이 매우 유용했음. 두 번째로 재미있었던 것은 Lua 로직을 다시 로드할 수 있는 IRC 봇을 만든 것이었음. 세 번째로 재미있었던 것은 Lua를 튜링 완전한 구성 언어로 사용하는 것이었음. 배열이 필요할 때 Lua로 배열을 만들었음. 가장 재미없었던 것은 3D 모델을 생성된 Lua로 내보내는 Blender 플러그인이었음.
     * Lua는 과대평가되었다고 생각함. 게임 산업에서 널리 사용되기 때문임. Lua의 유일한 장점은 C++에 쉽게 임베딩할 수 있다는 것임. 그 외에는 악몽임.
"
"https://news.hada.io/topic?id=18500","로컬에서 LLM 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             로컬에서 LLM 실행하기

     * r/LocalLLaMA 서브레딧 및 Ollama 블로그에서 로컬 LLM 실행을 시작하는 데 유용한 정보를 얻을 수 있음

하드웨어 구성

     * Core i9(32 스레드) CPU, 4090 GPU(16GB VRAM), 96GB RAM을 장착한 Linux 기반 랩톱 사용
     * VRAM에 맞는 모델은 빠르게 작동하며, 큰 모델은 RAM으로 오프로드되어 속도가 느려질 수 있음
     * 고성능 컴퓨터가 필요하지 않으며, 작은 모델은 오래된 GPU나 CPU에서도 작동 가능

사용 도구

     * Ollama: Llama.cpp를 실행하기 위한 Python 및 JavaScript 라이브러리를 포함한 미들웨어, Docker에서 사용
     * Open WebUI: 텍스트 및 이미지 입력을 위한 친숙한 인터페이스 제공
     * llamafile: 단일 실행 파일로 LLM 실행 가능
     * AUTOMATIC1111 및 Fooocus: 이미지 생성 도구, 복잡한 워크플로우에는 ComfyUI 사용
     * Continue: VSCode에서 코드 자동 완성을 지원
     * Obsidian Smart Connections: Ollama를 사용해 메모를 쿼리하는 기능 제공

모델 선택

     * Ollama 모델 페이지를 통해 최신 LLM 다운로드
     * RSS로 모델 업데이트를 추적
     * CivitAI에서 이미지 생성 모델 다운로드 (주의: 일부 모델은 성인 이미지 생성에 최적화)
     * 주로 사용하는 모델:
          + Llama3.2: 일반 쿼리와 Smart Connections에 사용
          + Deepseek-coder-v2: VSCode의 코드 완성
          + Qwen2.5-coder: 코드 관련 대화
          + Stable Diffusion: 이미지 생성

업데이트

     * WatchTower를 사용해 Docker 컨테이너 업데이트
     * Open Web UI를 통해 모델 업데이트

파인튜닝 및 양자화

     * 현재 파인튜닝이나 양자화를 진행하지 않음 (CPU 결함 가능성으로 인해 장시간 고온 작업을 피함)

결론

     * 로컬 LLM 실행은 데이터에 대한 완전한 제어와 낮은 응답 지연을 제공
     * 오픈소스 프로젝트 및 무료 모델 덕분에 이러한 작업이 가능
     * 새로운 도구나 모델을 사용할 경우 내용을 업데이트할 예정
"
"https://news.hada.io/topic?id=18492","Newag DRM 공개 후 삶: 훈련되지 않은 현실 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Newag DRM 공개 후 삶: 훈련되지 않은 현실 [비디오]

     * 뉴아그 DRM 공개 이후의 삶
     * 독립 워크숍에서 서비스된 후 고장난 기차를 분석하기 위해 계약을 맺었음. 리버스 엔지니어링을 통해 서비스 시도를 감지하면 고장을 시뮬레이션하는 코드를 발견했음. 37C3에서 발표한 후 큰 파장이 있었음.
     * 주요 내용
          + 세 번의 의회 작업 그룹 세션에서 뉴아그의 오프토픽 슬라이드에 더러운 화장실 사진이 포함되었고, 기차 운영자들이 뉴아그에 기차 한 대를 잠금 해제하는 데 20,000 유로 이상을 지불했다고 밝힘. 뉴아그는 10분 만에 잠금을 해제할 수 있었음에도 불구하고, 잠금에 대해 아무것도 모른다고 주장했음.
          + 140페이지의 소송에서 저작권 침해와 불공정 경쟁을 주장하며 많은 논리적 곡예를 펼쳤음.
          + 리버스 엔지니어링 개념을 기자들에게 반복적으로 설명하는 경험.
          + 6건의 공식 조사, 그 중 두 건은 형사 사건.
          + 이후 다른 기차 운영자들로부터 새로 드러난 사례들.
     * 추가 정보
          + 이 발표는 여러 언어로 번역되었으며, 다운로드 가능한 파일에는 모든 언어가 별도의 오디오 트랙으로 포함되어 있음. 대부분의 데스크톱 비디오 플레이어에서 오디오 트랙을 선택할 수 있음.
"
"https://news.hada.io/topic?id=18438","위 문제 해결 과정에서 배운 토폴로지 개념 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     위 문제 해결 과정에서 배운 토폴로지 개념 [비디오]
"
"https://news.hada.io/topic?id=18445","인텔 주주, 전 CEO와 CFO에게 3년치 급여 반환 요구 소송 제기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 인텔 주주, 전 CEO와 CFO에게 3년치 급여 반환 요구 소송 제기

    Dive Brief

     * Intel 주주들이 전 CEO Pat Gelsinger, CFO 및 현재 공동 임시 CEO David Zinsner 등 회사 경영진이 신뢰 의무와 계약 의무를 위반했다고 주장하며, 이들이 얻은 모든 이익과 보상을 반환할 것을 요구하는 주주 파생 소송을 제기함.
     * 이 소송은 캘리포니아 북부 지방법원에 주주 LR Trust가 Intel을 대신하여 제기한 것으로, Gelsinger와 Zinsner가 회사의 파운드리 사업과 관련된 재무 정보를 부정확하게 보고하고 오도하는 공시를 발행함으로써 신뢰 의무를 위반했다고 주장함.
     * 소송에 따르면, 이러한 개인 피고들의 신뢰 의무 위반과 기타 부정행위로 인해 Intel은 상당한 손해와 회복 불가능한 평판 손상을 입었으며, 이로 인해 부당한 이익을 얻었다고 주장함.

    Dive Insight

     * 이 소송은 Gelsinger가 주도한 전환 계획을 실행하지 못한 후 주주들의 신뢰를 회복하려는 Intel의 노력과 맞물려 있음. Gelsinger는 40년 경력의 베테랑으로, 3분기 166억 달러의 기록적인 분기 손실을 보고한 후 CEO 및 이사회 멤버직에서 갑작스럽게 사임함.
     * 회사는 이후 Zinsner와 Intel Products CEO Michelle Johnston Holthaus를 공동 임시 CEO로 임명하고, Zinsner는 CFO로 계속 근무하며 100억 달러의 비용 절감을 목표로 구조 조정을 진행 중임.
     * 구조 조정은 회사의 파운드리 사업에 중점을 두고 있으며, 이는 주주 파생 소송의 핵심 요소임. Gelsinger의 전환 계획은 파운드리 전략의 변화를 포함했으며, 파운드리 사업을 독립적인 사업으로 분리하여 경쟁업체를 위한 칩을 생산하는 것을 목표로 함.
     * 그러나 Gelsinger, Zinsner 및 기타 경영진은 파운드리 사업의 재무 성과에 대해 주주들을 오도했다고 소송은 주장함. 두 임원은 파운드리 사업을 Intel의 사업에 대한 ""중요한 순풍""으로 지목했으나, 2023년 7억 달러 손실을 기록한 주요 비용 센터로 밝혀짐.
     * 이로 인해 Intel의 주가는 9.2% 하락했으며, 파운드리 사업 관련 손실에 대해 주주들이 오도되었다는 집단 소송이 이어짐.
     * Zinsner와 Gelsinger 외에도 여러 현재 및 전 이사회 멤버들이 피고로 지명됨. Gelsinger의 전환 계획과 관련된 우려로 인해 8월에 갑작스럽게 사임한 전 이사회 멤버 Lip-Bu Tan도 포함됨.
     * Intel은 리더십 변화 이후에도 파운드리 사업에 집중하고 있으며, Zinsner는 ""세계적 수준의 파운드리""가 되기 위해 노력 중이라고 언급함. Gelsinger의 후임 CEO도 파운드리 관련 능력을 갖출 가능성이 높다고 함.
     * Intel은 소송에 대해 언급을 거부했으며, 원고 측 변호사인 Weiss Law는 즉각적인 답변을 하지 않음.

        Hacker News 의견

     * 심각한 헤지펀드나 다른 활동가들이 관여하지 않았음. 재무제표는 의심받지 않았음. CEO와 CFO는 Foundary 부서가 수익성이 없음을 인정했음. 전 CEO는 Intel을 통합된 비즈니스로 유지하려 했으나 실패했음. 이는 CEO가 사업 계획을 실행하지 못했을 때 일어나는 일임. 이 소송은 성공 가능성이 낮음.
     * 지난 10년 동안 Intel이 실패할 것이라고 말해왔음. 이는 CEO 등이 비난받는 것과 관련이 있음. Intel은 성공을 예견하는 이미지를 만들었고, 이는 내부와 외부의 사람들을 믿게 했음. 경쟁이 깨어난 것은 예측 가능했음.
     * 소송의 주요 내용은 이사회도 비난받고 있으며, 모든 이사회 멤버가 소송에 언급되었음. ""Demand Upon Defendant ___ Is Excused""는 주주 파생 소송에서 이사회에 공식 요구를 해야 한다는 규칙을 설명함. 그러나 이사회가 공정하게 행동할 수 없다고 설득력 있게 주장할 수 있다면 요구는 면제될 수 있음.
     * 2022년 Intel CEO가 AMD를 경쟁에서 뒤로 밀어냈다고 언급했음. Intel의 수익이 CEO의 발언과 다르게 변하기 시작했음을 관찰했음. Intel에서 벗어나 AMD 주식을 구매한 것이 기쁨.
     * 파생 소송을 없애야 한다고 주장함. 주주를 대신해 소송을 제기하는 시스템은 필요하지 않음.
     * 이 사건이 공론화되면서 발생하는 평판 손상에도 불구하고 많은 급여가 가치가 있을 것임.
     * 사람을 해고한 후 급여를 회수하는 것이 좋은 정책인지 확신할 수 없음. 모든 직장에서 실패한 사람들이 3년치 급여를 반환해야 한다면 말이 안 됨.
     * 미래의 C레벨 임원들의 신뢰를 잃는 방법임. 심각한 과실이 아닌 단순히 계획이 실패한 경우에는 해당되지 않음.
     * 10년에 한 번 정도 임원들의 책임이 그들의 삶에 영향을 미치는 것을 봄. 이는 더 자주 일어나야 함. 대신 실패는 국가가 부담하고 있음.
     * 변호사들이 3년치 급여를 벌 것임.
"
"https://news.hada.io/topic?id=18506","Ask GN: 한국 리액트 커뮤니티가 활성화 되었으면 좋겠습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 한국 리액트 커뮤니티가 활성화 되었으면 좋겠습니다.

   안녕하세요, 현재 저는 '루밀'이라는 이름으로 한국 리액트 공식문서(ko.react.dev)의 유지 보수를 맡고있습니다!

   사실, 오픈 소스 유지 보수에 대한 넋두리를 하고 싶어 이 글을 작성한 것도 없지 않아 있습니다. 스스로 자부심을 가지면서 여러 오픈소스들에 기여하고, 개인적인 오픈소스 프로젝트들을 만들어 나가고는 있지만, 수익 없는 일에 꾸준한 동력을 유지하는게 참 쉽지는 않은 것 같습니다ㅠ

   최근 6개월 간 거의 홀로 한국 리액트 공식 문서 유지 보수를 하며 느끼는 점은, 한국도 해외 문화권처럼 리액트 커뮤니티가 활성화 되었으면 좋겠다는 점입니다.

   이번달 초에 React v19가 정식 출시되면서 새로 업데이트 된 영문 문서 PR이 물밀듯이 들어오는데 (한국 리액트 공식 문서인 ko.react.dev 레포지토리는 매주마다 영문 리액트 공식 문서인 react.dev 레포지토리로부터 새로 업데이트된 PR을 받아 해당 내용을 수정 및 업데이트 해오고 있습니다.), 한국 리액트 커뮤니티가 활성화 되어있지 않아 여러 기여자 분들의 관심이 적다보니, 새 문서에 대한 빠른 반영과 번역에 한계가 있습니다.

   제가 시간이 날 때마다 꾸준한 기여를 해나가고 있지만, 수익 없이 자발적인 참여에 기대는 커뮤니티 프로젝트의 특성 상, 원활한 유지보수에 어려움을 겪게 되는 것 같습니다.

   이런 이유로 많은 분들이 리액트, 더 나아가서 오픈 소스 커뮤니티에 많은 관심을 가져 주셨으면 하는 바람입니다.

   국내에서 리액트 커뮤니티를 찾아보면 페이스북의 리액트 채널이 거의 유일한데, 대부분 리액트나 웹 개발 관련 홍보 목적으로 이용하는 경우가 많고, 질의응답 혹은 다양한 사람들이 의견을 주고 받는 커뮤니티 문화가 많이 발전해있지는 않은 것 같습니다.

   한국 리액트 공식 문서 저장소(레포지토리)를 보면, README.md에 적힌 디스코드 채널 및 깃허브 상에 토론을 할 수 있는 공간 등이 있는데, 해당 공간들이 활성화 되어 개발을 막 시작한 분들 부터 오랜 시간 해오신 분들까지 모두 함께하는 공간이 되었으면 좋겠습니다.

   해외 오픈소스의 깃허브 토론(Discussions)을 보면 여러 사람들이 함께 모여 의견을 주고 받는 모습을 심심치 않게 살펴볼 수 있는데, 국내에도 이런 공간이 있었으면 하는 개인적인 바람입니다.


   추가로, React v19 공식문서 반영은 이번주 내로 마칠 예정입니다! (현재도 계속 진행하고 있는데 시간이 꽤 걸리네요.)

   또, 한국 리액트 공식문서 기여에 관심 있으신 분들은 https://github.com/reactjs/ko.react.dev 에 이슈 남겨주시거나 PR 보내 주시면 리액트 커뮤니티에 많은 도움이 될 것 같습니다.


   다들 즐거운 연말연시 보내세요!

   뭔가 리액트는 카카오톡 오픈 채팅쪽이 활발 한것 같아요

   카카오톡 오픈 채팅은 생각 못해봤는데 한번 참여해봐야겠네요~ 감사합니다

   국내에 이런 언어나 라이브러리 혹은 프레임워크 기반으로 활성화(?) 된 개발 커뮤니티가 있을까요? 리액트를 주로 다루는 사람으로써 기여해볼 생각을 감히 못햇는데
   참여(?) 하는 방법을 몰라 여쭙습니다

   잊을뻔 햇는데
   기여에 진심으로 감사드립니다
   새해 복 많이 받으세요

   사실 저도 리액트 개발 커뮤니티를 많이 찾아봤는데, 해외의 reddit 같이 굉장히 활성화 되어있는 커뮤니티는 저도 찾지 못했습니다ㅠㅠ 이런 곳이 많아졌으면 좋겠네요


   깃허브 사용에 익숙하시다면 https://github.com/reactjs/ko.react.dev에 들어가셔서, 간단하게는 오타 관련 이슈나 풀 리퀘스트, 좀 더 나아가서 번역을 진행해주셔도 좋고, 마지막으로 레포지토리 운영에 도움을 주셔도 정말 좋을 것 같습니다!

   사실, 기여라는게 처음이 어렵지 자주 하다보면 하나도 어렵지 않은 일이라 도전해보셔도 좋을 것 같습니다.


   감사합니다! 새해 복 많이 받으시고 멋진 한 해 보내세요~

   개발과 무관한 본업을 가지고 순수 취미로 꾸준히 독학해온 사람으로서, 오픈소스와 기여에 힘입은 바 너무 큽니다. 아직 부족하지만, 앞으로 여건이 된다면 미력하게나마 힘을 보태겠습니다.
   새해 복 많이 받으시고 힘내세요!

   좋은 말씀 감사합니다! 새해 복 많이 받으세요~~

   수고 많으십니다~!
   관심이 있어서 readme의 디스코드 채널을 들어가보려고 했는데, 링크가 만료되었는지 invite invalid 로 나오네요! 혹시 디스코드 링크 알려주실수 있으실까요?

   https://discord.com/invite/YXdTyCh5KF 입니다!

   혹시 디스코드에 로그인 되어있으실까요? 저도 로그인 안되어 있으면 해당 오류가 발생하더라고요ㅠ

   오 이제 되었습니다
   로그아웃된 브라우저에서 여니깐 되는데 아마 제 로그인에 뭔가 문제가 있었나봅니다
   감사합니다

   다행입니다!ㅎㅎ 새해 복 많이 받으세요~
"
"https://news.hada.io/topic?id=18419","초보자를 위한 AI Python - Andrew Ng 의 무료 강의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 초보자를 위한 AI Python - Andrew Ng 의 무료 강의

배우는 내용

     * Python 프로그래밍 기초 및 데이터를 조작, 분석, 시각화하기 위한 AI 도구 통합 방법 학습
     * Python을 비즈니스, 마케팅, 저널리즘 등 다양한 분야에 적용하여 실제 문제를 해결하고 효율성을 향상시키는 방법
     * AI 어시스턴트를 활용하여 코드 디버깅, 개념 설명, 학습 강화 등 소프트웨어 개발 실무와 유사한 환경 체험

강의 소개

     * Python 프로그래밍의 힘을 활용할 수 있도록 설계되었으며, 소프트웨어 개발자나 AI 엔지니어를 목표로 하지 않는 사람들도 참여 가능
     * 4개의 파트로 구성. 프로그래밍 경험이 없더라도 ""Hello, World!"" 작성에서부터 실용적인 AI 응용 프로그램 코딩을 바로 시작할 수 있도록 지원
     * AI 챗봇을 통해 즉각적인 피드백, 질문 응답, 디버깅을 제공받으며 학습 과정에서 지속적으로 도움을 받을 수 있음
     * Python 기본기를 배우며 변수, 함수, 루프, 데이터 구조 등 필수 프로그래밍 개념 학습
     * AI를 활용한 맞춤형 레시피 생성기, 스마트 할 일 목록, 여행 일정 계획자 등을 제작하며 데이터 분석 및 시각화 기술 습득

실습 프로젝트

     * 맞춤형 레시피 생성기: AI를 활용하여 재료 기반으로 레시피를 생성하는 도구 개발
     * 스마트 할 일 목록: 할 일 저장 및 우선순위 설정을 포함한 AI 기반 작업 관리 도구 제작
     * 여행 블로그 분석기: 블로그에서 식당 이름 및 인기 메뉴 등 핵심 정보 추출
     * 꿈의 여행 일정 계획자: 다중 도시 여행 계획을 AI로 분석하여 일정 제안
     * 데이터 시각화 프로젝트: matplotlib 등 라이브러리를 활용하여 데이터 시각화
     * 웹 데이터 추출: BeautifulSoup을 사용하여 웹 데이터를 수집 및 처리
     * 실시간 데이터 응용 프로그램: API를 통해 실시간 데이터 가져오기 및 처리

AI를 활용하여 학습 가속화

     * AI 챗봇을 통합하여 코드 작성, 테스트, 디버깅 지원
     * AI 도구를 통해 학습 속도 향상, 실습 강화, 맞춤형 피드백 제공
     * 초보자도 단시간에 Python과 AI를 활용한 응용 프로그램 제작 가능

대상

     * Python과 AI에 호기심이 있는 초보자부터 프로그래밍 생산성을 높이고자 하는 전문가까지 참여 가능
     * 학생, 커리어 전환자, 지식 근로자, 평생 학습자, 교육자에게 적합
     * 전통적인 코딩 강의가 어려웠던 학습자도 참여 가능

강의 구성

     * 총 35개의 비디오 강의, 25개의 코드 예제. 4시간 15분
     * Course 1: Basics of AI Python Coding
     * Course 2: Automating Tasks With Python
     * Course 3: Working With Your Own Data and Documents in Python
     * Course 4: Extending Python With Packages and APIs
"
"https://news.hada.io/topic?id=18459","Anvil - 쉘용 그래피컬 Multi-Pane 코드 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Anvil - 쉘용 그래피컬 Multi-Pane 코드 에디터

     * 쉘과 잘 연동되며, 마우스를 많이 사용하는 타일링 윈도우 기반의 그래피컬 에디터
     * 구문 강조 지원, 멀티 커서 & 셀렉션, 원격 파일 편집
     * 강력한 텍스트 조작 언어를 내장 (""Range Statements"")
     * 윈도우, 맥, 리눅스 지원
     * Plan 9 OS, Go, UTF-8 등의 제작자로 유명한 ""Rob Pike""가 만든 Acme 텍스트 에디터에서 영향받음
     * Anvil 내에서 실행되는 프로그램에서 사용할 수 있는 HTTP/REST 방식의 API를 제공
"
"https://news.hada.io/topic?id=18447","HN 제보: Chrome 업데이트 후 uBlock 지원 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN 제보: Chrome 업데이트 후 uBlock 지원 중단

        Hacker News 의견

     * Chrome는 사용자에게 적대적이지만, 대부분의 사람들이 사용하여 웹페이지가 잘 작동함. 배터리 사용과 메모리 효율이 최근 개선됨
     * Safari는 자원 효율적이지만 브라우저 확장 기능이 적고, 웹페이지가 제대로 작동하지 않을 때가 있음
     * Firefox는 uBlock을 지원하지만 배터리 수명이 짧고, 운영 체제의 UI 규칙을 따르지 않음
     * Google의 엔지니어들이 사용자 의견을 듣지 않는 것 같음. 대기업이지만 고위 직원들이 의견을 낼 수 있을 것이라 생각함
     * Firefox로 돌아갔지만 Chrome에서 그리운 점은 없음
     * 특정 설정 파일을 통해 1년 더 사용할 수 있음
     * Google이 독점 권력을 남용하지 않는 이유를 보여줌
     * Firefox 혁명에 참여하라는 의견
     * Manifest V2의 제거는 2025년 6월까지 우회 가능함
     * Ungoogled Chromium을 사용 중이며, uBlock이 문제 없이 작동함. 설정이 복잡하지만 FAQ를 참고하여 수동으로 설정해야 함
     * Vivaldi에서는 확장 기능이 잘 작동하며, Chrome을 피하고 있음. Brave도 가능할 수 있음
     * Vivaldi의 운명도 비슷할 것이라 예상함. Firefox로 전환하고 싶지 않음. 기본 브라우저들은 불편함이 있음
"
"https://news.hada.io/topic?id=18404","해커를 위한 탈중앙화된 미니멀리스트 마이크로블로깅 서비스 Twtxt","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 해커를 위한 탈중앙화된 미니멀리스트 마이크로블로깅 서비스 Twtxt

     * 해커들을 위한 ""탈중앙화된 간단한 마이크로블로깅 서비스""
     * 상태 업데이트를 인터넷에 간단하고 깔끔하게 게시할 수 있음. 동시에 다른 사람들의 이야기를 팔로우 가능함
     * 닫히거나 규제된 플랫폼에 가입할 필요 없이, 공개적으로 접근 가능한 텍스트 파일에 자신의 상태를 기록하는 방식으로 작동함
     * URL이 사용자의 정체성이자 계정 역할을 하며, twtxt는 이러한 텍스트 파일을 추적하여 사용자가 팔로우한 파일들을 기반으로 타임라인을 생성함
     * 파일 형식은 단순하고 사람이 읽기 쉬우며, UNIX 명령줄 도구와도 잘 통합됨
     * CLI 도구이자 포맷 사양으로, 자체 호스팅 기반의 플랫 파일 마이크로블로깅을 지원함
     * twtxt는 PyPI에서 제공되며, 이슈 트래커를 통해 문제를 보고할 수 있음.

        Hacker News 의견

     * 사용자가 Twtxt를 실행하는 사이트를 찾기 어려웠음. 인터넷 아카이브에서 관련 정보를 찾았음
          + 예시 사이트: https://niplav.site/twtxt.txt와 https://txt.sour.is/user/xuu/twtxt.txt에서 최근 게시물 확인 가능
          + Twtxt 프로젝트가 활발히 진행 중이지 않다고 판단됨
     * Twtxt 관련 업데이트 정보 발견
          + https://twtxt.readthedocs.io/en/latest/user/registry.html과 https://registry.twtxt.org/api/plain/tweets에서 네트워크의 최근 콘텐츠 확인 가능
          + 사용자 목록은 https://registry.twtxt.org/api/plain/users에서 확인 가능하지만 페이지네이션 문제 있음
     * Twtxt 사용 시 버그가 많음
          + 설정 디렉토리나 txt 파일 디렉토리의 작은 변화로도 문제 발생
          + twtxt following 명령어에서 오류 발생, 피드를 따라가도 오류 해결되지 않음
     * Twtxt 사용 경험
          + Mastodon과 Nostr로 이동하기 전까지 몇 년간 사용했음
          + 코딩이 쉬웠고, 여전히 Twtxt 파일을 사용하는 사람들이 있음
          + 팔로우 관리가 번거롭고 모바일 앱 부재로 사용이 불편했음
     * Nostr는 해커를 위한 마이크로블로그로, 서명하고 릴레이하는 방식임
     * Twtxt는 텔레그램 봇이나 이메일, bitlbee 플러그인으로 구현 가능
          + 개인 메시지나 대화 참여가 가능한지 의문
          + RSS 클라이언트 지원이 필요함
     * 또 다른 소셜 네트워크로 Gemini에서 실행되는 Bubble 추천
          + Bubble은 Hacker News와 비슷하며, 중재 기능을 지원함
     * Twtxt는 공유 텍스트 파일에 불과하며, Google Drive 링크로도 동일한 기능을 구현 가능
     * Twtxt라는 이름은 발음하기 어려워 다른 사람과의 대화에서 불편함이 있음
"
"https://news.hada.io/topic?id=18449","Portspoof: 모든 65535 TCP 포트에서 유효한 서비스를 에뮬레이트하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Portspoof: 모든 65535 TCP 포트에서 유효한 서비스를 에뮬레이트하는 기술

     * Portspoof 소프트웨어 개요
          + Portspoof는 운영 체제 보안을 강화하기 위한 소프트웨어임.
          + 모든 65535개의 TCP 포트를 항상 열어두어 공격자가 포트 상태를 확인할 수 없게 함.
          + 포트 스캔 시 모든 포트를 OPEN 상태로 보고하여 스텔스 포트 스캔을 무력화함.
          + 각 열린 TCP 포트는 서비스 에뮬레이션을 통해 가짜 배너를 생성하여 스캐너를 속임.
          + 동적 서비스 서명 데이터베이스를 사용하여 서비스 프로브에 유효한 서명으로 응답함.
          + 공격자가 시스템의 실제 포트 번호를 파악하기 어렵게 만듦.
     * 공격 방어의 예술
          + Portspoof는 공격자의 도구와 익스플로잇을 활용하여 시스템을 공격적으로 변환할 수 있음.
          + 가볍고 빠르며 포터블하고 안전한 방화벽 시스템의 추가 요소로 설계됨.
          + 공격자의 정찰 단계를 느리고 번거롭게 만들어 시스템의 보안을 강화함.
          + 사용자 레벨 소프트웨어로 루트 권한이 필요하지 않음.
          + 실행 인스턴스당 하나의 TCP 포트에만 바인딩됨.
          + iptables 규칙을 통해 쉽게 사용자 정의 가능함.
          + CPU와 메모리 사용량이 적으며 멀티스레드 지원함.
          + 9000개 이상의 동적 서비스 서명을 제공하여 공격자의 스캐닝 소프트웨어를 혼란시킴.
     * 저자
          + Piotr Duszyński (@drk1wi).
     * 상업적 사용
          + Portspoof는 특정 라이선스 하에 제공되며, 상업적 사용 시 저자와의 라이선스 협의가 필요함.

        Hacker News 의견

     * 포트 0은 일부 운영 체제에서 인터넷을 통해 접근 가능한 서비스 호스트로 사용됨
     * MariaDB의 기본 설정이 포트 0에서 데이터베이스를 듣도록 하여 인터넷 접근을 차단하려는 시도가 많은 시스템에서 효과적이지 않음
     * 컴퓨터 보안이 ""능동적 방어""로 진화할 것이라는 의견이 있음
          + 면역 시스템의 복잡성과 다층 구조를 컴퓨터 및 네트워크 보안에 비유함
     * 이메일 크롤러 스팸봇을 막기 위해 무작위 이메일 주소를 생성하는 웹 페이지를 만들었던 경험이 있음
     * 서버가 해커나 봇에 의해 더 많이 조사되거나 트래픽이 증가할 가능성을 제기함
          + 대부분의 스크립트 키디들이 잠재적 허니팟을 필터링하지 않을 것이라고 의심함
     * DoS 증폭기가 될 가능성을 제기함
          + 올바른 스푸프 패킷을 보내면 많은 패킷을 원래 출처로 반환할 수 있는지에 대한 질문을 제기함
     * 실행 인스턴스당 하나의 TCP 포트에만 바인딩된다는 점에 대해 의문을 제기함
          + 모든 포트를 커버하기 위해 65535개의 인스턴스를 실행해야 하는지에 대한 질문을 제기함
     * ""허니팟""이라는 단어가 사용되지 않은 점을 좋게 평가함
          + 과거에 ""진짜"" 허니팟을 상속받았을 때 30개의 포트가 열려 있어 당황했던 경험을 공유함
     * 포트 스캔 속도를 높이기 위해 다양한 IP의 시스템을 사용하여 작업을 분할할 수 있음을 제안함
     * 보안 구멍을 광고하고 블랙리스트를 유지하여 실제 시스템에 방화벽으로 피드백하는 접근법의 자연스러운 진화를 언급함
     * 두 가지 기술을 함께 사용하면 공격자가 실제 서비스를 식별하기 어려워질 것이라는 의견을 제시함
          + 보안을 위해 불투명성을 사용하는 것인지에 대한 의문을 제기함
     * 시스템의 정찰 단계를 제대로 수행하려면 8시간 이상과 200MB의 데이터가 필요하다는 점을 언급함
          + 보안을 위해 불투명성을 사용하는 것인지에 대한 의문을 제기함
     * 정보 보안에 대한 충분한 지식이 없을 수도 있지만, 시스템이 노출된 Redis 인스턴스로 인해 더 많은 관심을 끌 수 있는지에 대한 질문을 제기함
"
"https://news.hada.io/topic?id=18509","Pegasus에서 Predator까지 – iOS 상의 상업용 스파이웨어 진화 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Pegasus에서 Predator까지 – iOS 상의 상업용 스파이웨어 진화 [비디오]

     * ""iOS 스파이웨어의 진화: 2016년 Pegasus부터 2024년 최신 사례까지""

1. 스파이웨어의 진화 (2016-2024)

     * Pegasus 이후의 주요 익스플로잇, 전술(TTP), 감염 벡터 및 IOC(Indicator of Compromise) 분석
     * 시간이 지남에 따라 스파이웨어가 어떻게 발전하고 정교해졌는지에 대한 변화 추적
          + 주요 공격 기법, 감염 벡터, 침해 지표를 분석하여 스파이웨어의 발전 과정을 추적
     * 스파이웨어의 현재 위협 수준과 복잡성 이해

2. 탐지 기술의 발전

     * 스파이웨어가 더욱 정교해짐에 따라 탐지 능력도 발전함
     * 스파이웨어 탐지 기술의 발전과 주요 기여자 및 도구를 살펴봄
     * NSO의 최신 BlastPass 익스플로잇 체인 분석 및 발견 과정 공유
     * 스파이웨어 탐지에서의 주요 성공 사례와 방법론 학습

3. 현재와 미래의 도전 과제

     * 스파이웨어 탐지에서의 기술적 한계와 제한 사항 분석
     * 보안 기술의 발전에 따른 스파이웨어의 잠재적 진화 양상 예측
     * 현재 탐지 기술의 약점과 향후 개선 가능성 탐구

4. 연구 및 탐지 개선을 위한 권장 사항

     * 상업적 스파이웨어에 대응하기 위한 기술적 제안과 연구 과제
     * Apple 및 보안 커뮤니티가 탐지 능력을 개선하기 위한 방향성 제시
     * 스파이웨어 탐지 기술 발전을 위한 실질적인 실행 방안 도출

결론

     * iOS 상업적 스파이웨어는 지난 8년간 극적으로 발전했음
     * 이 발표는 기술적 통찰과 사례 연구를 통해 현재의 위협을 이해하고, 향후 대응 전략을 수립하는 데 기여하고자 함

        Hacker News 의견

     * iOS의 상업 스파이웨어에 대한 개요가 좋음. 그러나 실제 시장은 더 넓고 많은 공격이 탐지되지 않음. 방어 조직의 노력은 미숙함. 제안된 해결책은 충분하지 않음. 공격자들은 방어 시도를 능가할 것임.
     * 이러한 도구들이 사회에 미치는 피해를 과소평가함. 데이터 도난이 단순해 보이지만, 위치, 습관, 친구, 미래 이벤트 등이 노출될 수 있음. 이는 기자, 활동가, 일반인에게 영향을 줄 수 있음.
     * Pegasus에 대한 책을 읽고 감명받음. 감시가 계속될 것임. 링크 제공.
     * 이러한 상황을 변화시키려면 국가 수준의 조치가 필요함. NSO와 같은 회사의 책임자들을 처벌해야 함.
     * 파서 라이브러리에 주소 검사기를 도입하여 익스플로잇을 발견할 수 있는 아이디어를 고려함.
     * 흥미로운 비디오였지만 오디오 품질이 나빴음. 몇 분 후에 개선됨.
     * iOS 장치에서 멀웨어 페이로드를 메모리에서 추출하는 것이 얼마나 어려운지 궁금함.
     * iOS 사용자는 Lockdown 모드를 활성화해야 함. 기능이 필요한 경우 개별 웹사이트나 앱에 예외를 부여할 수 있음. 이는 공격 표면을 줄이는 데 도움이 됨.
     * 발표자는 슬라이드를 읽는 형식을 지양해야 함.
     * 질문: 동료가 Mac과 Timemachine을 사용하여 랜섬웨어로부터 안전하다고 생각함. 실제로 안전한지 궁금함.
"
"https://news.hada.io/topic?id=18412","마지막으로 알려진 43인치 Sony CRT 구출 여정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     마지막으로 알려진 43인치 Sony CRT 구출 여정

43인치 소니 CRT를 구하기 위한 여정

     * Shank Mods의 대서사시적 탐험
          + Shank Mods는 소니 KX-45ED1 CRT TV를 구하기 위한 여정을 담은 유튜브 비디오를 통해 기술 역사 보존의 열정을 보여줌.
          + 이 TV는 CRT 수집의 '성배'로 여겨지며, 대륙을 넘나드는 모험과 헌신을 담고 있음.

  CRT 역사 속 신화적인 거대 TV

     * 소니 KX-45ED1
          + 1989년에 출시된 43인치 CRT TV로, 무게는 440파운드에 달함.
          + $40,000에 판매되었으며, 오늘날 가치로는 $100,000 이상임.
          + 전문가급 성능을 제공하며, 존재 여부가 논란이 되었던 신화적인 TV로 여겨짐.

  일본 소바 레스토랑에서의 단서

     * 단서 발견
          + 오사카의 소바 레스토랑 대기실에서 7년 전 촬영된 KX-45ED1의 사진이 단서가 됨.
          + 레스토랑이 곧 철거될 예정이라는 사실을 알게 되어 긴급한 상황이 발생함.
          + Shank는 트위터에 도움을 요청했고, Abebe라는 사람이 현장을 조사하여 TV가 여전히 작동 중임을 확인함.

  믿기 어려운 추출 과정

     * 국제 구조 작전
          + TV를 철거로부터 구하기 위한 국제 구조 작전이 시작됨.
          + TV 소유주를 설득하고, 2층에서 안전한 장소로 옮기는 작업이 필요했음.
          + Abebe와 물류 전문가 Mr. Takahashi의 도움으로 TV는 안전하게 포장되어 미국으로 운송됨.

  레트로 게임의 성배

     * 복원 과정
          + 미국에 도착한 후, TV는 광범위한 보정과 수리를 거침.
          + 수렴 문제, 기하학적 문제, CRT 백내장 초기 증상을 해결하기 위해 전문가들이 도움을 줌.
          + 몇 주간의 작업 끝에 TV는 완벽하게 작동하며 레트로 게임에 적합한 디스플레이를 제공함.

  글로벌 커뮤니티의 노력

     * 커뮤니티의 기여
          + Abebe는 _Bayonetta Origins: Cereza and the Lost Demon_의 감독으로, 그의 헌신이 프로젝트에 큰 기여를 함.
          + Mr. Takahashi와 CRT 전문가들의 도움으로 이 꿈이 현실이 됨.
          + 이 이야기는 TV 이상의 의미를 가지며, 역사를 보존하고 사람들을 연결하는 열정을 기념함.

        Hacker News 의견

     * 이야기 전개가 잘 되었음, 그러나 몇 가지 의문이 있음
          + 드라마틱한 전개 속에서 비밀스럽게 진행된 점이 흥미로움
          + 그들이 TV를 자신들만을 위해 원했던 것이 이해 충돌을 일으키지 않았는지 의문
          + 다행히도 TV가 파괴되지 않고 보존되었음
          + Sony가 대화를 중단한 것이 관련이 있을 수 있음
          + 일본 정부나 Sony가 이 유물의 미국 반출에 불만이 있을 가능성 있음
          + 이 희귀 유물을 보존한 것에 대해 칭찬함
     * 90년대 초 어린 시절, Nintendo 연결 중 TV에 깔릴 뻔한 경험
          + TV를 벽 쪽으로 돌려 연결부를 찾으려다 TV가 떨어질 뻔했음
          + 아버지가 지나가다 발견하고 도와주셨음
     * 블로그 글이 AI로 편집된 것 같다는 의문
          + 특정 문단이 현대 GPT 모델의 결과물처럼 보임
          + 이야기의 주제가 TV 보존과 역사 보존에 관한 것임
          + Shank Mods의 비디오가 레트로 기술에 대한 사랑을 표현함
     * LLM 생성 콘텐츠가 HN 메인 페이지에 자주 등장하는 이유에 대한 의문
          + AI 도구 사용에 반대하지 않지만, 이 글이 존재하는 이유가 불분명함
     * 36인치 Sony Wega Trinitron CRT를 소유했던 경험
          + 무게가 200파운드가 넘고 이동이 어려웠음
     * Sony 회장이 TV 수리를 개인적으로 약속한 일화가 인상적이었음
          + 품질과 고객 만족에 대한 헌신을 보여줌
     * Key West에서 발견한 Sony 34XBR910 HD 와이드스크린 CRT
          + 와이드스크린 HD CRT가 존재하는지 몰랐음
          + CRT 디스플레이의 정점이라고 생각함
     * 또 다른 LLM 생성 블로그 글이 메인 페이지에 등장함
          + AI 도구 사용에 반대하지 않지만, 이 글이 존재하는 이유가 불분명함
          + 유튜브 비디오 요약에 불과함
"
"https://news.hada.io/topic?id=18502","4개의 4090 GPU로 나만의 LLM 모델을 훈련하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   4개의 4090 GPU로 나만의 LLM 모델을 훈련하는 방법

     * ChatGPT에 대한 흥미에서 시작해 LLM의 작동 원리를 깊이 이해하기 위해 직접 학습을 진행하기로 결심
     * 초기에는 M1 칩을 사용했지만 한계를 느끼고, NVIDIA 4090 GPU를 활용한 커스텀 장비를 구축

1. 목표 설정 및 예산 계획

     * 목표 설정: 학습하려는 모델의 크기와 유형에 따라 장비 요구사항이 달라짐
     * 예산 계획: 성능과 비용의 균형을 고려하며 고성능 구성 요소의 비용을 명심

2. 하드웨어 선택

     * 메인보드: SuperMicro M12SWA-TF 추천. 다수 GPU 사용을 위해 충분한 PCIe 레인을 제공
     * CPU: AMD Threadripper PRO 5955WX 선택. 128개의 PCIe 레인을 지원해 대역폭 문제 해결
     * RAM: 128GB 메모리 권장. 대규모 데이터셋 및 계산 작업에 적합
     * GPU: NVIDIA 4090 GPU - LLM 훈련에 이상적
          + 24GB VRAM으로 대규모 모델과 데이터셋 처리 가능
          + BFloat16 성능으로 AI 작업 최적화
          + CUDA 코어 16,384개로 병렬 처리 능력 강화
     * 스토리지: 6TB NVMe SSD와 8TB HDD 구성
     * 파워 서플라이: 2개의 1500W PSU로 안정적인 전력 공급
     * 케이스 및 냉각 시스템: 다수 GPU를 지원하는 케이스와 효과적인 냉각 장치 사용

3. 장비 조립

     * 듀얼 PSU 설정: PSU 하나는 메인보드와 CPU를, 나머지는 GPU를 전원 공급
     * 호환성 확인: 구성 요소 간의 호환성 철저히 검토
     * 4개의 4090 GPU로 나만의 LLM 모델을 훈련하는 방법
     * 케이블을 깔끔하게 정리하여 공기 흐름을 개선하고 유지보수를 간소화함

4. 소프트웨어 구성

     * 운영 체제: 안정적인 학습 환경을 위한 Linux 기반 OS(예: Ubuntu) 사용
     * 드라이버 및 의존성: 최신 GPU 드라이버, CUDA, cuDNN 라이브러리 설치
     * 학습 프레임워크: PyTorch 또는 TensorFlow 설치
     * 커스텀 커널: Tinygrad에서 제공하는 커널로 GPU 간 P2P 통신 활성화

5. LLM 학습

     * 데이터 준비: 고품질 입력 데이터를 위한 데이터셋 정리 및 전처리
     * 모델 선택: Llama2 또는 GPT와 같은 하드웨어에 맞는 모델 선택
     * 학습 과정: 리소스 활용 모니터링 및 최적화

6. 최적화 및 확장

     * 다중 GPU 학습: Distributed Data Parallel (DDP) 또는 ZeRO 기술 활용
     * NVIDIA 4xxx GPU의 P2P 통신을 가능하게 하는 커널 패치를 활용
     * 성능 튜닝: 하이퍼파라미터, 배치 크기, 학습률을 최적화하여 더 나은 수렴과 효율성을 달성함

7. 유지보수 및 모니터링

     * 정기 업데이트: 시스템 및 소프트웨어 최신 상태 유지
     * 시스템 모니터링: nvidia-smi, Prometheus 등을 사용해 시스템 상태 점검

핵심 통찰 및 팁

     * 하드웨어 대안: A100 또는 H100과 같은 GPU는 더 높은 VRAM을 제공하지만, 4090과 같은 소비자 GPU는 비용 효율적인 설정에 훌륭한 성능을 제공함
     * 클라우드 사용 고려: 장기 프로젝트에는 온프레미스, 단기 작업에는 클라우드 적합
     * 커뮤니티 자료 활용: Hugging Face 및 Andrej Karpathy의 가이드 참고

   LLM 학습을 위한 장비를 구축하는 것은 도전적이지만 보람 있는 작업으로, AI 개발의 새로운 가능성을 탐구하는 강력한 도구가 될 것

        Hacker News 의견

     * 이 빌드는 훌륭하며, 6개의 RTX 4090을 사용한 최고의 빌드임
          + 사양: 6 x 24GB NVIDIA GeForce RTX 4090, Intel Xeon W7-3465X, 256GB DDR5 ECC, 2TB Samsung 980 PRO NVMe SSD, 4TB Samsung 870 EVO SSD, Ubuntu 20.04
          + 256GB DDR5 ECC 메모리 선택이 흥미로우며, 1TB RAM을 목표로 할 수도 있음
          + 비용은 천문학적임
     * 이 글은 AI 모델로 작성된 것 같으며, 마지막 부분이 AI 느낌이 강함
          + 하드웨어 선택보다 데이터 정리, 청소, 훈련 부분에 대한 후속 기사가 더 흥미로울 것임
     * 이와 같은 장비로 어떤 훈련을 할 수 있는지에 대한 글이 더 흥미로울 것임
     * 개인적으로 ML 장비를 집에서 구축하여 LLM을 사전 훈련한 경험을 공유함
     * 중간 크기의 모델을 미세 조정하려면 어떤 하드웨어가 필요한지 궁금함
          + 많은 가이드가 있지만, 도구 체인 설정에 집중하고, 좋은 미세 조정을 위한 데이터셋에 대한 정보는 부족함
     * 대부분의 사람들에게 모델 훈련의 소프트웨어 측면이 더 흥미롭고 접근 가능해야 함
          + GPU의 ""완전한"" 활용은 여전히 열려 있는 주제이며, 클라우드에서 임대하여 작업하는 것이 더 유익할 수 있음
          + 이 과정은 영감을 주는 좋은 자료였으며, https://efficientml.ai/를 추천함
     * AI 모델이 아닌 직접 작성한 글을 읽고 싶음
     * 라이저 케이블에 대해 이야기하고 싶음
          + PCIe 4.0을 지원한다고 주장하는 라이저 커넥터가 성능이 떨어지는 문제를 겪고 있음
          + NVMe 드라이브를 연결하면 문제가 발생하여 부팅이 안 됨
          + NVMe가 높은 비트 오류율을 잘 견디지 못하는 것 같음
     * 부유한 취미가에게는 재미있지만, 실제 작업을 하려면 Runpod에서 임대하는 것이 더 나음
          + 좋은 블로그임
     * 4개의 4090 GPU와 전용 30암페어 회로만 필요함
"
"https://news.hada.io/topic?id=18510","Curl-Impersonate - 더 진짜 브라우저 같은 Curl","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Curl-Impersonate - 더 진짜 브라우저 같은 Curl

     * curl-impersonate는 주요 웹 브라우저인 Chrome, Edge, Safari, Firefox를 모방할 수 있는 특별한 curl 빌드
          + TLS 및 HTTP 핸드셰이크를 실제 브라우저와 동일하게 수행
          + 명령줄 도구로 사용하거나 라이브러리로 통합 가능
     * 중요성
          + HTTP 클라이언트가 TLS 웹사이트에 접근할 때, TLS 핸드셰이크를 수행하며, 이 과정에서 클라이언트의 특성을 식별할 수 있음
          + curl-impersonate는 이러한 핸드셰이크를 실제 브라우저와 동일하게 만들어 웹 서비스가 클라이언트를 식별하지 못하게 함
     * 기술적 구현
          + Google의 TLS 라이브러리인 BoringSSL을 사용하여 curl을 컴파일함.
          + 다양한 TLS 확장 및 SSL 옵션을 수정함.
          + HTTP/2 연결 설정을 변경함.
          + 비표준 플래그를 사용하여 curl을 실행함.
     * 지원 브라우저
          + Chrome, Edge, Safari, Firefox 등 다양한 버전의 브라우저를 모방할 수 있음.
          + 각 브라우저에 대한 스크립트가 제공되어 있음.
     * 기본 사용법
          + 각 지원 브라우저에 대해 curl-impersonate를 실행하는 래퍼 스크립트가 제공됨.
          + 예: curl_chrome123 https://www.wikipedia.org
     * 고급 사용법
          + libcurl-impersonate 라이브러리를 사용하여 API를 통해 설정 가능함.
          + CURL_IMPERSONATE 환경 변수를 사용하여 라이브러리를 런타임에 대체 가능함.
     * 설치
          + Windows, Linux, macOS용 사전 컴파일된 바이너리가 GitHub 릴리스 페이지에 제공됨.
          + Docker 이미지를 통해도 사용 가능함.
     * 이 저장소는 curl-impersonate의 좀 더 활발한 포크로 다음과 같은 주요 차이점이 있음
          + Encrypted Client Hello(ECH) 지원: Chrome 119에서 도입된 ECH 기능 추가.
          + ZSTD 압축 지원: Chrome 123에서 도입된 ZSTD 압축 프로토콜 지원.
          + X25519Kyber768 곡선 지원: Chrome 124에서 도입된 새로운 암호화 곡선 추가.
          + Akamai HTTP/2 지문 옵션 확장: Safari를 포함한 HTTP/2 지문 옵션 강화.
          + 최신 curl 버전으로 업그레이드: curl 8.7.1로 버전 업데이트.
          + TLS 확장 순서 및 GREASE 설정 가능: TLS 확장 순서와 GREASE 활성화/비활성화 옵션 추가.
          + Webkit 및 Gecko 기반 브라우저 지원 준비: Chrome과 Firefox를 위한 단일 바이너리 작업 진행 중.

        Hacker News 의견

     * Python 바인딩을 통해 requests와 유사한 API를 제공하는 프로젝트가 있음. 이는 전체 브라우저 스택을 실행하지 않고도 HTTP 요청을 쉽게 할 수 있게 해줌
          + 오픈 인터넷의 종말을 느끼게 함. 대기업들이 자신들이 승인한 소프트웨어만 사용하게 하고, 사용자를 식별하려고 함
          + 보안, 봇, DDoS 등 여러 각도에서 접근하고 있으며, 브라우저에만 국한되지 않음
          + 최종 목표는 대기업들이 사용자의 모든 행동을 추적하고 승인된 행동만 하도록 하는 것 같음
     * 특정 사이트에서 자바스크립트 기반의 브라우저 감지가 필요함. puppeteer-extra-plugin-stealth도 무력화할 수 있음
          + TLS 핑거프린팅은 심각한 봇 감지가 없는 사이트에서는 사용되지 않을 것 같음
          + 헤드리스 브라우저로 짧은 수명의 토큰/쿠키를 얻고, 이를 경량 클라이언트로 요청하는 데 유용할 수 있음
     * 빌드 스크립트가 복잡함. autotools를 사용하지만 하위 디렉토리에서 빌드해야 함
          + 기본 빌드 대상이 프로젝트 빌드가 아닌 도움말 텍스트임
          + 빌드 대상 사용 시 의존성이 제대로 설정되지 않아 여러 번 실행해야 함
          + BoringSSL 빌드 실패로 인해 빌드 완료하지 못함. Ubuntu 20에서 시도했으나 실패함
          + Ubuntu 22에서 시도했으나 BoringSSL 빌드 실패. make 스크립트는 더 잘 작동했음
          + -Werror를 제거하여 문제 해결. 의존성 목록이 불완전함
          + libc++-XX-dev와 libc++abi-XX-dev가 필요함. 설치 과정이 약간 불완전함
          + BoringSSL은 큰 라이브러리로 빌드 시간이 오래 걸림
     * Python용으로 유사한 프로젝트를 만들었음. Windows 빌드를 도와줄 사람을 찾고 있음
     * 소수의 웹사이트만 JA3/JA4 핑거프린팅을 사용함. 헤더와 핑거프린트를 연관시키는 고급 기술을 사용하는 사이트도 있음
          + Burp Suite의 핑거프린트를 사용하여 보안 작업을 수행할 수 있음
     * ja3proxy를 사용하여 utls를 통해 HTTP 프록시를 노출함. HTTP/2에 대한 특별한 기능은 없음
     * Go 언어에서는 tls-client 패키지가 주로 사용됨
     * AI 스크래퍼 팜이 사이트를 DDoS하는 것과 관련된 이야기와 흥미로움
     * 이러한 프로젝트가 게시되지 않아야 한다고 생각함. 적이 우리 중에 있을 수 있음
          + 사용자 에이전트 차별은 불법이어야 함. EU가 변화를 가져올 수 있을 것 같지만, 디지털 아이덴티티에 큰 관심을 가지고 있음
     * 특정 웹사이트에서 데이터를 읽어야 하는 경우, 핸드셰이크 정보를 사용하여 소프트웨어로 읽지 못하게 함
          + HTTP 요청 시 헤드리스 브라우저를 기본으로 사용함. 일부 웹사이트는 캡차 등으로 인해 읽을 수 없음
"
"https://news.hada.io/topic?id=18405","미셸 드 몽테뉴의 온라인 에세이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           미셸 드 몽테뉴의 온라인 에세이

HyperEssays 프로젝트 소개

     * HyperEssays는 Michel de Montaigne의 ""The Essays""를 현대적이고 접근 가능한 온라인 판으로 제공하는 프로젝트임.
     * 이 사이트는 다양한 판본을 제공하며, 독자들이 Montaigne의 작품을 쉽게 이해할 수 있도록 문맥과 도구를 제공하는 것을 목표로 함.
     * 프로젝트는 원본 텍스트와 번역본을 교정, 업데이트, 주석을 추가하며, 인덱싱과 검색을 위해 태그를 달고, 스마트폰, 데스크톱, 태블릿에서 쉽게 읽을 수 있도록 형식을 조정함.
     * 오프라인 읽기를 위한 무료 챕터 PDF도 제공함.

""The Essays""에 대하여

     * ""The Essays""는 단일한 책이 아니라 종교, 우정, 법률 등 다양한 주제에 대한 짧고 긴 글의 모음임.
     * Montaigne는 1580년에 첫 번째 판을 출간했으며, 이후 여러 번의 수정과 새로운 책을 추가함.
     * 독자들은 책의 처음부터 끝까지 읽을 수도 있고, 관심 있는 챕터를 선택하여 읽을 수도 있음.

Michel de Montaigne에 대하여

     * Montaigne는 16세기 프랑스 철학자로 자주 묘사되지만, 실제로 철학자였는지에 대한 논의가 있음.
     * 그는 세상에서 은퇴하여 고독 속에서 글을 썼다는 일반적인 믿음이 있음.
     * 그의 삶을 더 잘 이해하기 위해 연대기와 전기 자료를 제공함.

최근 업데이트

     * HyperEssays는 지속적으로 챕터를 교정, 번역, 주석 작성, 메타데이터 업데이트 등의 작업을 진행 중임.
     * 작업은 2020년 1월 17일에 시작되었으며, 완성까지는 많은 시간이 걸릴 것으로 예상됨.

HyperEssays 지원 방법

     * 프로젝트를 지원하여 이 사이트가 계속 성장하고 무료로 접근 가능하도록 도움을 줄 수 있음.
     * 질문이나 의견은 m2m@hyperessays.net으로 보내거나 Mastodon 또는 Bluesky를 통해 연락 가능함.

        Hacker News 의견

     * Michel de Montaigne의 글에서 인상 깊은 인용구를 좋아함
          + ""세상에서 가장 높은 왕좌에 앉아 있어도 여전히 엉덩이에 앉아 있는 것""이라는 현대 번역을 선호함
     * Montaigne의 에세이는 블로그처럼 읽히며, 다양한 주제와 일관된 테마, 대화적인 톤이 특징임
          + 많은 인용구와 농담을 통해 독자와의 친밀감을 형성함
          + Montaigne가 무엇으로 유명한지 묻는다면 대답하기 어려울 것임
          + 그의 Substack을 구독하고 Instagram에서 그의 스탠드업을 보고 싶음
     * Montaigne의 ""To Philosophize Is To Die"" 에세이는 삶을 변화시키는 글로, 죽음을 기억하는 것이 중요하다는 원칙을 설명함
          + 죽음에 대한 두려움은 매우 억제적일 수 있으며, 이를 빨리 받아들일수록 더 자유롭고 행복해질 것임
     * Sarah Bakewell의 ""How to Live: A Life of Montaigne in one question and twenty""는 Montaigne에 대한 훌륭한 입문서임
          + Montaigne에 관심이 있는 사람에게 강력히 추천함
     * Montaigne의 작품은 다양한 언어로 Wikisources에서 공공 도메인으로 제공됨
     * 현대 프랑스어로 번역하는 것도 흥미로울 것임
     * W. Carew Hazlitt의 1877년 Charles Cotton 번역 업데이트는 Project Gutenberg에서 epub 형식으로 제공됨
     * 더 나은 읽기 경험을 위해 웹킷 폰트 스무딩을 추천함
          + Arc 브라우저를 사용 중이라면 어두운 배경을 추천함
     * Screech 번역과 Frame 번역이 이미 훌륭하게 제공되고 있으며, 온라인으로 제공되는 것 외에 다른 차이점이 있는지 궁금함
"
"https://news.hada.io/topic?id=18521","Show GN: Remote MCP: 리모트 MCP(Model Context Protocol) 서버/클라이언트 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: Remote MCP: 리모트 MCP(Model Context Protocol) 서버/클라이언트 구현

   Claude Desktop과 같은 클라이언트에서 사용할 수 있는 MCP(Model Context Protocol) Server를 중앙에 두고 로컬 패키지 업데이트 없이 지속적인 업데이트가 가능하도록 리모트 MCP 서버 및 (서버이기도 한) 클라이언트를 만들어 보았습니다.

   MCP 공식 로드맵상 2025년 초반에 지원될 것이라 말하고 있지만 지금 당장 필요한 상태라 만들게 되었고 모든 MCP 프로토콜 스펙을 구현하는 것을 목표로 하고 있습니다.

   이 프로젝트로 Cloudflare Workers에서도 MCP 서버를 돌릴 수 있습니다: https://github.com/ssut/Remote-MCP/…
"
"https://news.hada.io/topic?id=18488","청바지 착용으로 월드 래피드 앤 블리츠 챔피언십 실격된 칼슨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   청바지 착용으로 월드 래피드 앤 블리츠 챔피언십 실격된 칼슨

     * 매그너스 칼슨, 월드 래피드 및 블리츠 챔피언십에서 실격
          + 매그너스 칼슨은 FIDE 드레스 코드 위반으로 월드 래피드 및 블리츠 챔피언십에서 실격됨.
          + 칼슨은 대회에 참가한 방어 챔피언으로, 실격 후 FIDE에 대한 불만을 표명함.
          + 칼슨은 ""FIDE에 지쳤다""며 더 이상 관련되지 않겠다는 입장을 밝힘.
     * FIDE의 성명
          + FIDE는 월드 래피드 및 블리츠 체스 챔피언십의 드레스 코드를 포함한 규정이 모든 참가자에게 전문성과 공정성을 보장하기 위해 설계되었다고 밝힘.
          + 칼슨은 청바지를 착용하여 드레스 코드를 위반하였고, 주심은 칼슨에게 $200의 벌금을 부과하고 복장을 변경할 것을 요청함.
          + 칼슨은 이를 거부하였고, 결과적으로 9라운드에 배정되지 않음.
          + 같은 날, 이안 네포미아치도 스포츠 신발 착용으로 벌금을 부과받았으나, 승인된 복장으로 변경하고 대회를 계속함.

        Hacker News 의견

     * FIDE와 Carlsen 간의 긴장감은 Freestyle Chess와 관련된 대체 체스 조직을 Carlsen이 홍보하면서 시작되었음
          + 이는 단순한 '복장 규정 집행' 문제가 아니라 Carlsen이 FIDE에 전반적으로 불만을 가지고 있는 것과 관련이 있음
     * 대회 참가자 중 복장 규정에 신경 쓰는 사람이 있는지 의문임
          + 체스에 진지한 사람이라면 바지의 소재에 신경 쓰지 않을 것임
          + 이는 권력을 행사하고 싶어하는 관료적 관리자들의 문제로 보임
     * FIDE의 복장 규정은 찢어진 청바지를 금지하지만, 일반 청바지는 허용함
          + Magnus는 찢어진 청바지를 입지 않았으며, 이 규정 집행의 정당성을 찾기 어려움
          + 성차별적인 규정에 대한 불만도 있음
     * Ronnie O'Sullivan이 신발을 벗어 스누커 협회를 불쾌하게 만든 사건이 떠오름
          + 이러한 어리석은 규정 집행이 사라지길 바람
     * Magnus가 이러한 상황에서 고상한 태도를 취한 것에 찬사를 보냄
          + 서양의 복장 규정은 불쾌하며, 사람들은 외모나 복장보다는 경기력으로 평가받아야 함
          + 그의 행동은 반항적인 스타일을 보여줌
     * Carlsen의 원칙을 칭찬할 만한 것은 주최 측임
          + 그들은 복장 규정을 가지고 있었고, Carlsen이 이를 위반했으며, 경고 후에도 계속 위반하자 규정을 집행했음
     * 체스는 똑똑한 사람들을 위한 게임임
          + 똑똑한 사람들이 청바지와 바지를 구분할 이유가 없음
          + 참가자들이 잠옷을 입어도 상관없음
     * Magnus의 낮은 성과와 FIDE와의 긴장에 대한 그의 설명을 들을 수 있음
          + YouTube 링크
     * 제출된 기사에는 Carlsen이 FIDE와 Freestyle Chess에 대한 불화가 언급되지 않음
          + 그는 이 대회에 참석할지조차 확신하지 않았다고 전해짐
     * Douglas Adams가 이 상황을 즐겼을 것이라는 의견
          + Carlsen과 FIDE 간의 대화가 유머러스하게 상상됨
"
"https://news.hada.io/topic?id=18471","gitu - TUI Git Client ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         gitu - TUI Git Client

     * git을 위한 터미널 유저 인터페이스
          + Emacs용 최고의 Git UI인 Magit에서 영감을 받아 Magit의 많은 핵심 기능을 구현하는 것이 목표
     * 키바인딩은 Magit을 따라가면서도 Vim과 비슷하게
     * Rust 바이너리로 윈도우/맥/리눅스 지원
     * 현재 지원 기능
          + Staging/Unstaging (file, hunk, line)
          + Showing (view commits / open EDITOR at line)
          + Branching (checkout, checkout new)
          + Commiting (commit, amend, fixup)
          + Fetching
          + Logging (current, other)
          + Pulling / Pushing to/from configured upstream/pushDefault
          + Rebasing (elsewhere, abort, continue, autosquash, interactive)
          + Resetting (soft, mixed, hard)
          + Reverting (commit)
          + Stashing (save, pop, apply, drop)

   대충 쓰기에는 tig 도 좋아보입니다. 👍🏻

   https://jonas.github.io/tig/

   키바인딩은 역시 emacs 보단 vi 죠~ (싸우자)
"
"https://news.hada.io/topic?id=18418","TEMU (Terma Emulator) - LLVM 기반의 고성능 마이크로프로세서 에뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          TEMU (Terma Emulator) - LLVM 기반의 고성능 마이크로프로세서 에뮬레이터

   TEMU는 고성능의 프로세서 코어 및 메모리 에뮬레이션을 제공합니다. 현재의 타겟은 유럽의 우주선에 사용되는 공통 장치들과 버스입니다.

   주요 기능
     * LLVM 툴체인을 사용하여 동적으로 바이너리 변환
     * 멀티코어/멀티프로세서 에뮬레이션 지원
     * 외부 장치와 데이터 버스 모델
     * 커스텀 캐시 모델과 빠른 주소 디코딩이 가능한 메모리 모델
     * 장치 모델링을 위한 쉬운 C API

   지원하는 프로세서
     * SPARCv8
     * PowerPC
     * ARMv7

   버스 모델
     * CAN
     * Ethernet
     * PCIe
     * MIL-STD-1553
     * Serial 등

   장치 모델
     * GRLIB
     * P2020
     * OpenCores 등

   추가 소개자료(PDF): T-EMU 2.0: The Next Generation LLVM Based Micro-Processor Emulator

   테무에서 산 에뮬...

   테무에서 온 에뮬레이터

   테무..

   이름에서 신뢰성이 떨어지네요 ㅎㅎㅎ

   생성된 결과물을 열어볼 때 두근두근 하겠군요...

   1750A 프로세서 에뮬레이터를 찾다가 발견했습니다.
   llvm쪽에 올라온 자료(추가 소개자료 pdf)에는 1750A를 지원한다고 하는데 정작 홈페이지 소개에는 없네요...
"
"https://news.hada.io/topic?id=18515","아이슬란드의 EU 가입 준비 여부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           아이슬란드의 EU 가입 준비 여부

    아이슬란드의 EU 가입 가능성

     * 아이슬란드의 새로운 정부 변화로 인해 EU 가입 논의가 다시 활발해지고 있음. 최근 여론조사에 따르면 아이슬란드 국민들은 EU 가입을 더 선호하고 있음. 이는 2022년 2월 푸틴의 우크라이나 재침공 이후 변화한 것으로, 국내외 여러 요인들이 작용하고 있음.

    선거: 사회민주동맹의 집권

     * 아이슬란드의 의회는 알팅기(Alþingi)로, 930년에 설립된 가장 오래된 의회임. 2024년 11월 30일에 선거가 열렸으며, 사회민주동맹이 집권함. 새로운 총리는 크리스트룬 프로스타도티르로, 사회민주동맹, 개혁당, 인민당과 연합 정부를 구성함.

    아이슬란드와 EFTA

     * 아이슬란드는 1970년에 EFTA에 가입함. EFTA는 1960년에 설립되었으며, 영국, 포르투갈, 오스트리아, 스위스, 덴마크, 스웨덴, 노르웨이로 구성된 ""외부 7개국""에 의해 설립됨. 1994년까지 노르웨이, 스위스, 아이슬란드, 리히텐슈타인만이 EFTA에 남아 있음.

    2008년의 변화

     * 2008년 금융 위기로 인해 아이슬란드는 심각한 경제적 타격을 입음. 주요 은행들이 파산하면서 경제가 붕괴되었고, 유로화의 안전성을 고려하게 됨. 2009년 사회민주당이 집권하면서 EU 가입 신청을 하게 됨.

    경제 회복과 협상 중단

     * 2011년부터 아이슬란드 경제는 회복세를 보였으며, 관광 산업의 붐이 일어남. 2013년 보수적인 정부가 집권하면서 EU 가입 협상이 중단됨. 2015년 외무장관이 EU 가입 신청을 취소한다고 발표했으나, 이는 의회의 승인을 받지 못해 논란이 됨.

    EU에 대한 여론 변화

     * 2022년 이후 아이슬란드 국민들의 EU 가입 찬성 여론이 증가함. 이는 러시아의 우크라이나 침공과 세계 경제의 불안정성에 대한 우려 때문임. 최근 여론조사에서는 EU 가입 찬성 비율이 반대 비율을 넘어섬.

    앞으로의 전망

     * 새로운 아이슬란드 정부는 2027년 이전에 EU 가입 협상 지속 여부에 대한 국민투표를 실시할 계획임. 유로화 채택의 장단점을 분석할 전문가 패널도 구성할 예정임. 이는 EFTA와 노르웨이에도 영향을 미칠 수 있음.

    EFTA와 노르웨이에 미치는 영향

     * 아이슬란드가 EU에 가입하면 EFTA와 EEA 협정에 큰 영향을 미칠 수 있음. 노르웨이와 아이슬란드는 문화적으로 가까우며, 노르웨이에서도 EU 가입에 대한 논의가 활발해질 가능성이 있음.

    영국의 EU 가입 야망에 미치는 영향

     * 아이슬란드와 노르웨이의 EU 가입 움직임은 영국의 EU 재가입 논의에도 영향을 미칠 수 있음. EFTA-EEA의 붕괴 가능성은 영국의 EU 가입 경로에 변화를 줄 수 있음.

        Hacker News 의견

     * EEC는 EEA로 이름이 바뀌지 않았음. 마스트리히트 조약으로 EU가 설립되었고, EEC는 EC로 이름이 변경되었음. EEA는 EC와 EFTA 회원국 간의 별도 협정임
     * 북극이 새로운 항로로 변하면서 아이슬란드가 북대서양의 싱가포르가 될 가능성이 있음. 중국이 북쪽에 항구를 건설할 수 있는지 문의했음
     * 아이슬란드가 EU에 가입하면 인플레이션이 급등할 것이라는 의견이 있음. 아이슬란드의 금리는 8.5%로 EU의 3%보다 높음. EU 금리를 채택하면 아이슬란드 인플레이션이 급등할 가능성이 있음
          + Optimal Currency Area 이론을 참고할 필요가 있음. 미국은 주 간의 통화 조정 불가능성을 해결하기 위해 대규모 재정 이전을 허용함
          + 아이슬란드가 그리스에 보조금을 제공할 의향이 있는지, 2008년처럼 통화를 평가절하할 수 있는 능력을 포기할 의향이 있는지 고려해야 함
     * EU의 경제적, 정치적 성과가 저조하다는 의견이 있음. 일부 EU 국가들만의 내적 연합을 만들자는 제안이 있음
     * 유럽의 단결을 지지하지만, EU 가입에 반만 헌신하는 국가는 가입을 허용하지 말아야 한다는 의견이 있음
     * 2013년 아이슬란드를 방문했을 때, EU에 반대하는 ""Nei Takk""라는 광고판이 있었음. 이는 아이슬란드의 EU에 대한 감정을 잘 나타냄
     * 아이슬란드가 이미 EU에 가입한 줄 알았다는 의견이 있음. 그린란드가 덴마크 보호령인 것도 EU에 포함되는지 궁금해함
     * 아이슬란드의 어부들은 EU 가입에 대해 상반된 의견을 가지고 있음. 관계 강화의 장점이 있지만, 어업 자원을 보호할 수 없게 될 우려가 있음
     * 아이슬란드의 부채 문제가 EU 가입에 영향을 미칠 수 있다는 우려가 있음. 하지만 영국이 EU에 더 이상 속하지 않는 것이 도움이 될 수 있음
     * 아이슬란드 가족과의 대화에서 EU 가입 이유는 경제적 안정성과 유로 사용에 대한 접근 때문이며, 러시아나 우크라이나와는 관련이 없다는 의견이 있음. 이미 EU 규정을 따르고 있지만 투표권이 없다는 점이 문제임
"
"https://news.hada.io/topic?id=18415","Ask GN: 2024년 올해 최고의 지름은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: 2024년 올해 최고의 지름은?

   올해 구매한 물품/서비스 중에서 가장 마음에 드는 것은 어떤 것인가요?
   전자제품, 생활용품, 구매/구독형 서비스, 소장형 콘텐츠 다 가능합니다.
   왜 만족스러운지 이유를 적어주시면 차후 지름 생활에 도움 될 것 같습니다.

   참고 :
     * 2023년 올해 최고의 지름은?
     * 2022년 삶의 질을 향상시켜준 30만원 이하의 제품은?
     * 2021년 올해 최고의 지름은?

   씽크패드 x1 카본 아우라 에디션
   갤럭시북4엣지
   둘다 배터리가 오래가고 좋네요

   맥미니 m4 기본모델. 아주 만족스럽네용

   CursorAI

   작년까지는 ai 툴을 이용하지 않고 개발하였지만 올해부터 gpt 유료 이용해보면서 개발하니 훨씬 쉬워지네요,,,

   Dygma Raise 2
   1 버전 사용중인데 무선 모델이 나와서 엊그제 받았네요.
   설정이 귀찮아서 아직은 이전 버전을 쓰고 있는 건 하하

   오 신기한 키보드네요. 내년 쇼핑목록에 일단 찜하겠습니다.

   독거미 키보드,
   잠자리 마우스
   슈프림 바시티 자켓

   작년에 Cannon R40(북스캐너)를 써주신 분을 보고 저도 사야겠다 싶어서 질렀습니다.
   덕분에 책 공간을 많이 절약할 수 있게 되었네요.

   개인적으로 올해 소비의 마무리는 허먼밀러입니다. 몇년간 고민만 했는데, 조금이라도 더 기쁜 마음으로 누릴 수 있을 때 나에게 조금 더 집중해야 한다는 걸 많이 깨달은 한 해라 큰맘먹고 샀습니다.
   그 외에는 오븐이 마음에 듭니다. 손님들에게 다양한 요리를 해줄 수 있어서 좋아요.

   M1 맥미니 기본형 중고로 사서 아주 잘 쓰고 있습니다. x86 머신보다 빠릿빠릿해서 마음에 듭니다

   cursor 결제
     * 회사 구독으로 들어갔는데, Github Copilot 보다 실질적으로 업무를 할 때 더 도움이 되는 것 같습니다.

   분리형 전기 매트
     * 아내와 같이 자는데 저는 더위를 많이 타다보니 전기 장판을 들일까 고민을 했었습니다. 그런데 이번에 한쪽씩 온도 조절이 되는 전기 매트를 구매했는데 너무 편하고 저하고 아내 모두 만족하네요 ㅎㅎ
       진작 살껄..

   Affinity V2 Universal License 를 블랙프라이데이때 할인가에 잘 샀네요!
   Designer, Photo, Publisher 포함입니다.
   데스크탑, 아이패드에서 전부 사용가능하고, 구독 모델이 아니라 One time 결제라는 것이 정말 좋습니다.
   저는 Designer 만 써봤지만 어도비 일러스트레이터의 대체제로 훌륭해요.
   이번 GeekNight 준비하면서도 잘 썼어요.

   그리고 레이지보이 리클라이너를 샀는데 너무 편안합니다. 앉아있다가 잠들기 십상이네요.
     * JBL Authentics 500 스피커 : 사무실에서 들으려고 샀는데 대만족 중입니다.
     * Cotopaxi Allpa 42L Travel Pack : 여행용 가방으로 구입했는데 정말 크고 만듦새가 훌륭합니다. 아마존 직배가 풀려서 할인할때 무료배송으로 사서 더욱 만족스럽습니다.

    1. open ai plus 구독
          + 구글 검색으로 찾기 힘들거나 검색 내용이 없는 코딩 및 개발적 어려움에 대한 해답을 같이 탐구할 수 있었음
    2. 모니터 크로스오버 279QA9 Fast-iPS 180 WQHD 게이밍 무결점
          + 20만원대로 ips-fast패널에 180hz 속도에 qhd 해상도까지!
    3. 엔비디아 4070 슈퍼, AMD 7800x3D
          + 올해 컴퓨터 새로 장만하며 산 그래픽카드와 CPU, 가격이 점점 비싸지고 매물이 없어질 때 겨우 구한 부품.

   계속 우분투만 쓰다가 올해 처음으로 m1 맥북 프로 써봤는데 매우 만족하면서 사용하고 있어요.

   이맥스 일부 단축키가 맥 기본 단축키랑 겹치는 등 사소한 문제가 있긴 한데, 이참에 아예 에디터도 다른걸로 갈아타려고 노력중이에요.

   저도 그래서 vscode로 갈아탔습니다.

   iris CE 분리형 키보드.
     * choc 스위치라 키캡놀이가 좀 어렵지만.. 알루미늄 하우징 + 분리형 키보드 중에 나름 가성비(?) 좋은편입니다 ㅎㅎ.

   공유 자전거 1년 구독
     * 조깅과 상호보완되는 운동효과, 생활반경 넓어짐, 관리 필요 없음

   kagi.com
     * 검색도 좋지만, 영한 번역은 deepl 보다 좋게 느껴지고, Universal Summarizer 도 잘 쓰고 있습니다.

   번외로 지름은 아니지만 운동화를 새로 샀습니다. 자꾸 골반 틀어지는 느낌에 한 쪽 무릎 바깥쪽에 통증이 생겨서 뭔가 했는데 밑창을 보니 한 쪽 바깥만 갈려 나갔더라구요.
   운동화 산지 오래되신 분들은 한 번 확인해보셔도 좋을거 같습니다.

   Cursor IDE, Obsidian 구독. 이거 두 개가 그냥 다른 거 다 누를 정도로 최고네요.
   그냥 GPT, Claude 다 이걸로 API 걸어놓고 쓰는데, 돈도 이쪽이 더 절약되는 것 같습니다.

   API쪽이 월 구독료보단 적게나오나요? 혹시 어떤 방식으로 사용중이신지 여쭤봐도 괜찮으실까툐?

   하루종일 끼고 산다면 월구독이 나을텐데요. 그게 아닌 다음에야 API쪽이 유리할 듯 합니다. 모델 바꿔가며 사용하기도 용이하고요. Cursor에서 씁니다.

   아 cursor로 사용하시는군요 ㅎㅎㅎ 답변 감사합니다!
"
"https://news.hada.io/topic?id=18468","훈련받지 않은 상황 대응","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             훈련받지 않은 상황 대응

     * Chaos Computer Club의 지원
          + Chaos Computer Club (CCC)는 37C3에서 폴란드 철도 차량 제조업체 Newag가 자사 열차를 자사 워크숍에서만 수리할 수 있도록 조작한 방법을 설명한 세 해커를 지원함.
          + Newag는 90년대 이후로 볼 수 없었던 태도로 반응하며 해커들을 형사 및 민사 법으로 고소함.
          + 해커들은 38C3에서 약 30,000유로의 비용이 든 법적 여정을 보고함.
          + CCC는 현재까지 발생한 법적 및 기타 비용을 충당하기 위해 기부를 요청함.
     * Newag 열차의 문제점
          + 37C3에서 세 해커는 Newag 열차가 경쟁자나 고객의 워크숍 내에 주차되거나 등록되지 않은 수리를 받았을 때 동면 상태로 들어가는 문제를 발견함.
          + 이러한 비활성화된 열차는 Newag 기술자를 호출해야만 '구조'될 수 있었음.
          + 이 모든 것은 인증이 필요한 열차 부품의 잠재적으로 불법적인 교체 없이 밝혀짐.
     * Newag의 반응과 법적 대응
          + Newag의 반응은 얇은 피부를 가진 것으로 보이며, 현재의 소송은 이러한 '불법 지침'에 대한 출판을 막기 위한 것으로 추정됨.
          + CCC는 과거에 얽매인 회사 변호사나 기관차 제조업체가 아니라 콘텐츠 팀만이 무대에서 발언할 수 있는 사람을 결정한다고 강조함.
          + 세 해커가 두려움 없이 연구를 계속할 수 있도록 지원하는 것이 CCC의 임무임.
     * 기부 안내
          + 기부를 원할 경우 Chaos Computer Club e.V.의 정규 은행 계좌로 'Lokomotive'라는 참조와 함께 송금할 수 있음.
          + 필요한 30,000유로 이상이 기부되거나 법적 비용이 낮아지거나 법원 비용이 환불될 경우, 초과된 모든 금액은 Chaos Computer Club e.V.의 법적 목적에 사용될 것임.
          + CCC e.V.는 공식적으로 비영리 단체로 인정받지 않음.
     * 발표 및 스트리밍 정보
          + 후속 발표는 이번 금요일 38C3에서 함부르크에서 진행될 예정임.
          + 발표는 오늘 (2024년 12월 27일) 오후 11시부터 라이브 스트림으로 시청 가능하며, 이후 media.ccc.de에서 제공될 것임.
"
"https://news.hada.io/topic?id=18403","뉴스레터 플랫폼 스티비, 개인 정보 유출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         뉴스레터 플랫폼 스티비, 개인 정보 유출

     * 2024년 12월 17일에 스티비 서버가 해킹 공격을 받아 일부 스티비 사용자의 개인정보가 외부에서 조회됨
     * 2024년 12월 19일에 이 사실을 인지한 즉시 관련 기관에 신고했으며, 내부적으로 필요한 조치를 완료
     * 개인 정보 유출 확인 링크에서 조회 가능

   외교부 위장 스팸메일, 알고보니 뉴스레터 서비스 ‘스티비’ 해킹 탓
   피해사례 확인이 되었나 보네요.

     알스퀘어 뉴스레터 고객들에게 발송된 외교부 위장 스팸메일이 뉴스레터 서비스 ‘스티비’ 서버 해킹 탓
"
"https://news.hada.io/topic?id=18409",""United Healthcare"의 Luigi Mangione 이미지에 대한 DMCA 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ""United Healthcare""의 Luigi Mangione 이미지에 대한 DMCA 사용

        Hacker News 의견

     * 누군가가 UHC를 사칭하여 DMCA 요청을 남용할 가능성이 있음. DMCA의 큰 허점은 검증 절차가 부족함.
     * 개인 보안 카메라의 영상이 카메라 소유자의 소유인지에 대한 저작권 질문이 해결되지 않음. 창작적 표현이 아닌 영상은 보호받지 못할 수 있음.
          + 복수 포르노법보다 유연한 법이 필요함. 비동의로 자신의 얼굴과 목소리를 사용하는 것을 방지할 수 있어야 함.
          + 뉴스 가치가 있는 사건에 대해서는 공정 사용 예외가 적용되어야 함.
     * 인터넷 댓글도 저작권 보호를 받는 창작적 표현인지 명확한 답을 찾지 못함.
     * 저작권은 검열을 정당화하는 수단으로 사용되어 왔음.
     * Streisand 효과가 떠오름. 지금 막기에는 너무 늦었음.
     * 많은 제공자들이 법적 DMCA 불만이 아닌 단순한 요청만으로도 콘텐츠를 제거함.
          + 타인의 플랫폼에 콘텐츠를 의존하는 것은 불편함.
     * 더 많은 요청을 승인해야 한다고 주장함. 개인적인 불만으로 UHC에 대한 비판이 있음.
     * Nintendo Luigi로 밈화되어 제거가 무의미함. 대중은 권력자들을 싫어함.
     * 저작권을 소유하지 않은 상태에서 DMCA 통지를 제출하는 것은 불법임. UHC가 모든 묘사를 소유한다고 주장하는 것은 터무니없음.
     * Mangione가 기업의 법적 보호를 뚫었는지, 아니면 제한적 책임이 적용되는지에 대한 질문이 제기됨.
"
"https://news.hada.io/topic?id=18410","상업용 티백에서 방출된 미세플라스틱, 인체 세포로 유입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     상업용 티백에서 방출된 미세플라스틱, 인체 세포로 유입

        Hacker News 의견

     * 한 사용자는 종이 티백의 셀룰로오스를 ""미세플라스틱""으로 분류한 것에 놀라움을 표함. 셀룰로오스가 고분자라는 점은 이해하지만, 자연 발생 고분자와 합성 플라스틱을 구분하지 않는지 의문을 가짐. 연구 자체는 특정한 결론보다는 방법론 개발에 중점을 둔 것으로 보임.
     * 다른 사용자는 티백에 대한 초점이 이해되지 않음을 언급하며, 플라스틱으로 코팅된 종이컵, 랩, 플라스틱 용기 등에서 미세플라스틱이 음식과 음료에 들어가는 것과 비교함. 플라스틱이 다른 미세입자보다 더 해로운지에 대한 의문을 제기함.
     * 또 다른 사용자는 티백이 플라스틱을 포함하고 있으며, 대부분의 커피숍에서 종이컵에 차를 제공한다고 언급함. 플라스틱이 없는 보온병을 찾은 친구의 경험을 공유함.
     * 한 사용자는 이 연구가 게재된 저널이 품질 기준을 충족하지 못해 주요 색인에서 제거되었다고 언급함.
     * 종이컵 내부가 플라스틱으로 코팅되어 있으며, 뜨거운 물이 플라스틱을 용출시킬 수 있다고 지적함. 머그잔을 사용할 것을 권장함.
     * 연구의 도입부에서 티백이 MNPLs를 방출하는 주요 원인 중 하나로 언급되었다고 설명함.
     * 티백을 사용하지 않고 잎차를 사용하지만, 여전히 미세플라스틱이 있을 것이라고 생각함.
     * 셀룰로오스가 '미세플라스틱'인지에 대한 의문을 제기하며, 대부분의 티백은 역사적으로 플라스틱으로 만들어지지 않았다고 언급함.
     * 다양한 브랜드의 티백 재료가 무엇인지 궁금해함.
"
"https://news.hada.io/topic?id=18428","자동완성/LSP를 사용하지 않는 프로그래머, 어떻게 작업하나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  자동완성/LSP를 사용하지 않는 프로그래머, 어떻게 작업하나요?

     * 오늘날 내가 당연하게 여기는 IDE 기능을 사용하지 않는 프로그래머들에게 매료됨
     * 자동완성, 언어 서버, 최근의 Copilot 같은 도구를 사용하지 않는 개발자들에게 질문
     * 모든 타입과 필드를 기억하는지, 작업 흐름이 어떻게 되는지 궁금함
     * 언어 서버의 정의로 이동 기능 없이 어떻게 다른 파일에 있는 함수의 정의나 구현을 찾는지 궁금함

        Hacker News 의견

     * 한 프로그래머가 시각장애인 프로그래머를 만났을 때, 코드의 조직화가 중요하다는 것을 배웠음. 시각장애인 프로그래머는 코드가 명확하고 논리적인 구조를 가져야 한다고 강조했음. 이는 코드베이스의 구조적 결함을 가릴 수 있는 LSP/IDE 기능에 의존하는 것에 대한 우려로 이어졌음.
     * LSP가 많은 임시 정의가 있는 시스템에서 필요하다고 언급함. React/TypeScript 같은 경우가 예시로, 비프레임워크 Python 코드베이스에서는 쉘 완성이 대부분 충분함.
     * 두 가지 유형의 LSP/LLM 회피 프로그래머가 있음. 첫 번째 그룹은 인간 언어 서버 프로토콜로서 다른 사람에게 의존함. 두 번째 그룹은 오래된 도구를 사용하여 코드베이스를 탐색하는 데 능숙함.
     * LSP 기능을 한 달 동안 꺼보라고 제안함. 이를 통해 프로젝트 조직화와 파일 명명, 명시적 import 문장의 가치를 배울 수 있음.
     * 쉘을 개발 환경으로 사용하는 사람은 CLI 도구를 사용하여 코드와 친숙해지는 것을 선호함. 빠른 컴파일러와 타입 체크를 좋아하며, IDE의 시각적 방해 요소를 피함.
     * 비보조 vim을 사용하여 작업한 경험을 공유하며, 탭 사용과 명명에 능숙해지는 것이 중요하다고 언급함.
     * GPS를 사용하지 않는 사람들이 운전하는 방법에 비유하며, 코드베이스에 대한 친밀한 이해가 중요하다고 강조함. LSP에 반대하지 않지만, vim과 같은 도구를 선호함.
     * 많은 도구가 방해가 될 수 있으며, 조용한 공간에서 집중하는 것이 중요하다고 언급함. 표준 POSIX 유틸리티를 사용하여 코드를 읽고 검색함.
     * 암기와 고통이 학습에 효과적이라고 주장함. 최소한의 vim 설정을 사용하여 Linux와 언어의 복잡성을 더 잘 이해하게 됨.
     * 현대 도구가 흐름 상태 없이도 생산성을 유지할 수 있게 해준다는 깨달음을 얻음. 이는 VSCode와 같은 현대적인 기능을 시도해볼 동기를 제공함.
"
"https://news.hada.io/topic?id=18470","Quiver - 현대적인 교환(commutative) 다이어그램 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Quiver - 현대적인 교환(commutative) 다이어그램 편집기

     * quiver는 현대적인 그래픽 편집기로, 교환 및 붙여넣기 다이어그램을 위한 도구
     * 고품질의 다이어그램을 화면에서 볼 수 있도록 렌더링하며, LaTeX로 내보내기 가능함
     * 수작업으로 LaTeX를 작성하는 것보다 훨씬 빠르게 다이어그램을 생성하고 수정할 수 있으며, 약간의 경험만 있으면 손으로 그리는 것과 경쟁할 수 있음.
     * 기능 및 스크린샷
          + quiver는 복잡한 교환 다이어그램과 붙여넣기 다이어그램을 생성하기 위한 효율적이고 직관적인 인터페이스를 제공함. 당김 및 밀어내기, 부착, 고차원 셀을 포함한 다이어그램을 쉽게 그릴 수 있음. 객체 배치는 레이블 크기에 따라 조정되는 유연한 그리드를 기반으로 함. 다양한 조합 가능한 화살표 스타일과 레이블 및 화살표에 대한 색상 사용이 가능함.
          + quiver는 스크린샷을 위해 잘 보이도록 설계되었으며, 원본 다이어그램과 최대한 유사하게 보이는 LaTeX로 내보내기 가능함. 마우스를 사용하여 클릭 및 드래그하거나 키보드를 사용하여 다이어그램을 생성하고 수정할 수 있으며, 모든 작업을 수행할 수 있는 완전한 키보드 단축키 세트를 제공함.
          + LaTeX로 다이어그램을 내보낼 때, quiver는 다이어그램에 대한 링크를 포함하여 나중에 수정하거나 다른 사람과 공유할 수 있도록 함.
          + 기타 기능
               o 다중 선택 기능으로 대량 변경을 쉽게 수행할 수 있음
               o 작업을 실행 취소/재실행할 수 있는 히스토리 시스템
               o 사용자 정의 매크로 정의 지원: \newcommand가 포함된 파일의 URL을 붙여넣기
               o HTML로 내장 가능한 다이어그램 내보내기
               o 대형 다이어그램을 위한 팬 및 줌 기능
               o 스마트 레이블 정렬 및 가장자리 오프셋
     * 매크로 및 색상 가져오기
          + quiver에서 사용자 정의 매크로와 색상을 사용하려면, 다음과 같은 정의를 포함하는 파일을 생성해야 함.
\newcommand{\cat}{\mathscr}
\newcommand{\psh}{\widehat}
\newcommand{\smcat}{\mathbb}
\newcommand{\yo}{よ}

          + 파일을 공개적으로 접근 가능한 URL에 업로드하고, quiver의 ""매크로"" 입력란에 해당 URL을 붙여넣기. 현재 매크로는 \newcommand, \newcommand*, \renewcommand, \renewcommand*, \DeclareMathOperator, \DeclareMathOperator*로 정의 가능하며, 색상은 \definecolor를 사용하여 정의 가능함 (rgb, RGB, HTML, gray 색상 모드 사용).
     * 편집기 통합
          + quiver 위키에서 편집기 통합을 참조할 수 있음.
     * 빌드
          + 명령줄에서 make를 실행한 후, src/index.html을 웹 브라우저에서 열기. 실패할 경우, Make 또는 Bash의 호환되지 않는 버전을 사용 중일 수 있음. 이 경우, 최신 KaTeX 릴리스를 수동으로 다운로드하여 src/에 src/KaTeX/로 배치해야 함. KaTeX 경로가 올바르지 않으면 KaTeX 로드 실패 오류가 발생함.
          + quiver는 localhost를 통해 실행해야 함. Python이 설치되어 있다면, 다음 명령어를 실행하여 쉽게 해결 가능함:
python3 -m http.server

          + quiver src 디렉토리에서 실행한 후, 브라우저에서 localhost:8000을 열기. 빌드에 문제가 있을 경우, 문제를 자세히 설명하여 이슈를 열면 도움을 받을 수 있음.
     * 감사의 말
          + S. C. Steenkamp: 화살표의 미적 렌더링에 대한 유익한 논의
          + AndréC: 고정 높이 곡선을 위한 사용자 정의 TikZ 스타일 제공
          + Nathan Corbyn: HTML로 내장 가능한 다이어그램 내보내기 기능 추가
          + Paolo Brasolin: 오프라인 지원 추가
          + Carl Davidson: 루프 렌더링에 대한 논의 및 프로토타입
          + quiver 개선에 기여한 모든 문제 보고자 및 개선 제안자들

        Hacker News 의견

     * 이 도구는 훌륭하며, Fourier-Poisson 큐브를 약 10분 만에 생성할 수 있었음. UI가 매우 직관적임
          + 자유로운 캔버스보다 교환 다이어그램에 집중하는 것이 깔끔하고 사용하기 쉬운 훌륭한 디자인 선택임
          + 논문 작성 시 이 도구가 있었다면 많은 시간을 절약할 수 있었을 것임
     * 최근에 Petri net editor에 깊은 인상을 받았음
          + Petri net은 유한 상태 기계가 멀티스레드가 될 수 있는 것과 비슷함
          + ""statebox""라는 조직의 글을 통해 Petri net을 처음 알게 되었음
          + 그들의 논문을 읽고 매료되어 그곳에서 일하는 것이 꿈이 되었음
          + 현재 그들의 홈페이지는 ""범주 이론가가 되는 것을 상상해보세요""라는 텍스트와 웃는 이모티콘만 있어서 무슨 일이 있었는지 알 수 없음
     * 며칠 전 이 도구를 사용하여 책을 위한 간단한 다이어그램을 그렸음
          + 범주 이론에만 사용 가능하여 노드를 예쁘게 꾸미는 데는 지원이 부족하지만, LaTeX로 가능함
     * 어젯밤에 TikZCD를 사용했는데, 이 도구의 기능이 적은 버전임
          + 간단한 다이어그램을 그리기에 꽤 좋음
     * ""교환 및 붙이기 다이어그램""이 무엇인지 설명해줄 수 있는지 궁금함
          + 위키백과 페이지가 너무 추상적이어서 기본 수준에서 이해하기 어려웠음
     * 웹 친화적인 형식으로 내보내기가 가능한지 궁금함. SVG가 될 것 같음
          + localhost에서 quiver를 실행하면 링크를 통해 공유하는 것은 옵션이 아님
     * 매우 좋은 제품임
          + 과거에는 TikZ 코드를 손으로 작성했는데 꽤 빨랐지만, 이제는 많은 것을 잊어버려서 이 도구가 교환 다이어그램에 매우 유용할 것임
     * 몇 년 전 범주 이론 수업을 들을 때 Quiver가 절대적으로 필수적이었음
          + UI가 깔끔하고 직관적이며 기능이 많았음
          + TikZ와 비교했을 때, Quiver는 비교할 수 없을 정도로 우수함
     * Quiver를 여러 번 사용했으며, 모든 경험이 훌륭했음
          + 작성자들에게 찬사를 보냄
     * 코드 생성 도구가 여기서 만들어질 수 있을 것임
"
"https://news.hada.io/topic?id=18453","Rust로 작성된 즉시 모드 GUI, Egui","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Rust로 작성된 즉시 모드 GUI, Egui

     * egui는 Rust로 작성된 즉시(Immediate Mode) 모드 GUI 라이브러리로, 웹 및 네이티브 환경에서 동작
     * 웹에서는 WebAssembly로 컴파일되어 WebGL을 통해 렌더링되며, 네이티브 환경에서는 Mac, Linux, Windows 등 다양한 플랫폼을 지원
     * DOM, HTML, JS, CSS 없이 순수 Rust만으로 구현됨
     * 사용하기 쉽고, 이식성이 뛰어나며, 빠른 성능을 제공하도록 설계됨

주요 특징

  1. 즉시 모드 (Immediate Mode)

     * GUI 생성이 단순화되고 코드 흐름이 간결해지는 방식
     * 예제:
if ui.button(""Save"").clicked() {
    my_state.save();
}


     * 버튼 상태를 저장하거나 콜백을 사용할 필요가 없음
     * 즉시 모드는 사용성을 높이고 복잡성을 줄이는 대신 레이아웃과 성능에서 약간의 제한이 있음

  2. 플랫폼 호환성

     * 웹: WebAssembly와 WebGL을 통해 동작
     * 네이티브: Mac, Linux, Windows, Android 등을 지원
     * 게임 엔진과 통합 가능 (예: Bevy와의 통합)

  3. Rust 생태계와의 통합

     * 공식 프레임워크 eframe 제공:
     * 동일한 코드로 웹 및 네이티브 애플리케이션 작성 가능
     * 경량 의존성:
     * egui는 Rust의 ab_glyph, ahash 등 최소한의 의존성만 사용
     * 무거운 의존성은 별도의 crate로 분리 (egui_extras 등)

주요 기능

     * 위젯: 버튼, 슬라이더, 체크박스, 라디오 버튼, 텍스트 편집, 색상 선택기 등
     * 레이아웃: 수평, 수직, 열 기반, 자동 줄바꿈 지원
     * 텍스트 편집: 멀티라인, 복사/붙여넣기, 이모지 지원
     * 윈도우: 이동, 크기 조정, 최소화/닫기
     * 렌더링: 안티앨리어싱 적용된 텍스트, 도형 렌더링
     * 접근성: AccessKit 통합으로 스크린 리더 지원

장점과 단점

     * 장점
          + 단순성: 콜백 없이 간결한 코드로 GUI 작성 가능
          + 이식성: 동일한 코드로 웹 및 네이티브 환경에서 실행 가능
          + 사용성: 애플리케이션 상태와 GUI 상태 간의 동기화 문제가 없음
     * 단점
          + 레이아웃 복잡성: 즉시 모드의 특성상 복잡한 레이아웃에는 추가 작업 필요
          + CPU 사용량: 매 프레임 전체 레이아웃 계산이 필요하므로 대규모 UI에서는 성능 저하 가능

대상 사용자

     * 간단한 GUI를 빠르게 작성하려는 개발자
     * Rust 기반 게임 엔진이나 프로젝트에 GUI를 추가하려는 사용자
     * 웹 및 네이티브 환경 모두를 지원하는 애플리케이션 작성자

즉시 모드에 대한 추가 설명

     * 즉시 모드는 콜백 기반의 **보유 모드(retained mode)**와 달리, 프레임마다 상태를 즉각적으로 처리
     * 예제: if ui.button(""Save"").clicked() { save(); }
     * 장점: 코드 흐름이 단순해지고 상태 동기화 문제가 없음
     * 단점: 레이아웃 계산이 복잡하며, 대규모 UI에서는 성능에 영향을 줄 수 있음

        Hacker News 의견

     * Rust 프레임워크를 사용하여 수학 문제를 이해하려 했으나, edit-compile-run 사이클이 너무 길어 어려움을 겪음. 프로젝트를 모듈로 나누면 개선될 수 있을지 궁금함
     * 브라우저가 서브 픽셀 렌더링을 지원하지 않으면, 캔버스 기반 UI 렌더링 라이브러리는 고해상도 기기를 제외하고는 DOM 기반에 비해 불리함. egui 라이브러리도 이 문제를 인식하고 있음
     * 브라우저 환경에서 컴파일된 데모 페이지는 기술적으로 인상적이지만, egui를 사용한 앱의 가능성을 상상하기 어려움. egui를 활용한 재미있는 예시가 있는지 궁금함
     * 크리스마스에 naughty한 행동으로 Option을 패턴 매칭 대신 강제로 언랩하여 에러 발생. Brave 모바일 버전에서 발생함
     * 국제화 지원이 제한적임. 예를 들어, 아랍어 ""hello""를 붙여넣으면 네모 상자로 표시됨
     * ""즉시 모드""가 무엇인지 궁금함. 위젯을 UI에 추가하는 방법이 .add()를 사용함. 이러한 위젯에 대한 유창한 빌더 API가 ""즉시 모드""로 만드는 것인지 궁금함
     * 웹 브라우저에서 이러한 인터페이스를 디버깅하는 방법이 궁금함. JavaScript나 C++ 웹 어셈블리처럼 디버깅할 수 있는지 궁금함
     * 창 크기 조정에 문제가 있음. ""Highlighting"" 예시에서 하단 오른쪽 모서리의 잡기 영역을 클릭하면 대각선 화살표가 수직 화살표로 바뀌어 수직으로만 크기 조정이 가능함. 다른 기본 예시에서도 수직 및 수평으로 동시에 크기 조정이 가능할 것 같지만, 수직으로 조정할 수 없음
     * 입력 반응이 매우 느림. 빠르게 타이핑하면 입력이 따라오지 못함. 텍스트 선택 및 복사가 불가능하여 사용자 정의 GUI 구현에 큰 문제임. 모두에게 행복한 연말을 기원함
"
"https://news.hada.io/topic?id=18491","38C3: Illegal Instructions","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       38C3: Illegal Instructions

     * 38C3: 불법 명령어
          + 38번째 Chaos Communication Congress (38C3)는 2024년 12월 27일부터 30일까지 함부르크에서 개최됨. Chaos Computer Club (CCC)와 자원봉사자들이 주최하는 이 연례 4일간의 컨퍼런스는 기술, 사회, 유토피아에 관한 강연과 워크숍을 제공하며, 정보 기술 및 기술 발전이 사회에 미치는 영향에 대한 비판적이고 창의적인 논의를 포함함.
     * 주요 강연 및 워크숍
          + Wir wissen wo dein Auto steht - Volksdaten von Volkswagen
               o 발표자: Michael Kreil과 Flüpke
               o 주제: 폭스바겐의 대중 데이터를 통한 자동차 위치 추적
               o 날짜: 2024-12-27
               o 조회수: 39040
          + We've not been trained for this: life after the Newag DRM disclosure
               o 발표자: Michał Kowalczyk, q3k, Jakub Stepniewicz
               o 주제: Newag DRM 공개 이후의 삶
               o 날짜: 2024-12-27
               o 조회수: 19046
          + Liberating Wi-Fi on the ESP32
               o 발표자: Frostie314159과 Jasper Devreker
               o 주제: ESP32에서의 Wi-Fi 해방
               o 날짜: 2024-12-27
               o 조회수: 14121
          + Der Thüring-Test für Wahlsoftware
               o 발표자: Linus Neumann과 Thorsten Schröder
               o 주제: 선거 소프트웨어에 대한 튀링 테스트
               o 날짜: 2024-12-27
               o 조회수: 13865
          + BioTerrorism Will Save Your Life with the 4 Thieves Vinegar Collective
               o 발표자: Dr. Mixæl Swan Laufer
               o 주제: 4 Thieves Vinegar Collective와 함께하는 생물 테러리즘
               o 날짜: 2024-12-27
               o 조회수: 10628
          + Breaking the Mirror – A Look at Apple’s New iPhone Remote Control Feature
               o 발표자: Aaron Schlitt
               o 주제: 애플의 새로운 아이폰 원격 제어 기능 분석
               o 날짜: 2024-12-27
               o 조회수: 9387
          + Och Menno - How NOT to build a submarine
               o 발표자: Ucki (He/Him)
               o 주제: 잠수함을 잘못 만드는 방법
               o 날짜: 2024-12-27
               o 조회수: 8604
          + 38C3: Opening Ceremony
               o 발표자: Gabriela Bogk와 Aline Blankertz
               o 주제: 38C3 개막식
               o 날짜: 2024-12-27
               o 조회수: 7287
          + Breaking NATO Radio Encryption
               o 발표자: Lukas Stennes
               o 주제: NATO 라디오 암호화 해제
               o 날짜: 2024-12-27
               o 조회수: 6938
          + CTF: WTF?! - Capture The Flag für Einsteiger
               o 발표자: hubertf
               o 주제: 초보자를 위한 CTF (Capture The Flag)
               o 날짜: 2024-12-27
               o 조회수: 5523
     * 기타 주목할 만한 세션
          + Decentralize Your Internet with Self-Hosting
               o 발표자: Andreas와 seb
               o 주제: 셀프 호스팅을 통한 인터넷 분산화
               o 날짜: 2024-12-27
               o 조회수: 4079
          + Building Your First LoRa Mesh Network From Scratch
               o 발표자: WillCrash
               o 주제: 처음부터 LoRa 메쉬 네트워크 구축
               o 날짜: 2024-12-27
               o 조회수: 3778
          + Demystifying Common Microcontroller Debug Protocols
               o 발표자: Sean ""xobs"" Cross
               o 주제: 일반적인 마이크로컨트롤러 디버그 프로토콜 해독
               o 날짜: 2024-12-27
               o 조회수: 2947
          + Transparency? Not from the European Commission
               o 발표자: Kris Shrishak
               o 주제: 유럽 위원회의 투명성 문제
               o 날짜: 2024-12-27
               o 조회수: 2937
          + Fearsome File Formats
               o 발표자: Ange Albertini
               o 주제: 두려운 파일 형식
               o 날짜: 2024-12-28
               o 조회수: 2327
          + Digitalisierung mit der Brechstange
               o 발표자: Anne Roth
               o 주제: 강압적인 디지털화
               o 날짜: 2024-12-28
               o 조회수: 2176
          + OpenPV - Calculate the solar potential of your building
               o 발표자: Excusably와 Martin Grosshauser
               o 주제: 건물의 태양광 잠재력 계산
               o 날짜: 2024-12-28
               o 조회수: 2019
          + From Silicon to Sovereignty: How Advanced Chips are Redefining Global Dominance
               o 발표자: Thorsten Hellert
               o 주제: 첨단 칩이 글로벌 지배를 재정의하는 방법
               o 날짜: 2024-12-27
               o 조회수: 1805
          + 10 years of emulating the Nintendo 3DS: A tale of ninjas, lemons, and pandas
               o 발표자: neobrain
               o 주제: 닌텐도 3DS 에뮬레이션 10년의 이야기
               o 날짜: 2024-12-28
               o 조회수: 1746
          + Hacking yourself a satellite - recovering BEESAT-1
               o 발표자: PistonMiner
               o 주제: 위성 해킹 및 BEESAT-1 복구
               o 날짜: 2024-12-28
               o 조회수: 1169
          + State of Surveillance: A year of digital threats to civil society
               o 발표자: Jurre van Bergen
               o 주제: 시민 사회에 대한 디지털 위협의 1년
               o 날짜: 2024-12-28
               o 조회수: 1017
          + What the PHUZZ?! Finding 0-days in Web Applications with Coverage-guided Fuzzing
               o 발표자: Sebastian Neef (gehaxelt)
               o 주제: 커버리지 가이드 퍼징을 통한 웹 애플리케이션의 0-day 발견
               o 날짜: 2024-12-27
               o 조회수: 939
          + Reticulum: Unstoppable Networks for The People
               o 발표자: markqvist
               o 주제: 사람들을 위한 멈출 수 없는 네트워크
               o 날짜: 2024-12-28
               o 조회수: 930
          + Instructions unclear - Über die (In-)Accessibility von Symbolen
               o 발표자: sebz
               o 주제: 기호의 (비)접근성
               o 날짜: 2024-12-27
               o 조회수: 610
          + Prototypes to Props: How to Build and Hack in the Film/TV Industry
               o 발표자: Davis DeWitt
               o 주제: 영화/TV 산업에서의 프로토타입 제작 및 해킹
               o 날짜: 2024-12-28
               o 조회수: 609
          + Fnord-Nachrichtenrückblick 2024
               o 발표자: Fefe와 Atoth
               o 주제: 2024년 Fnord 뉴스 회고
               o 날짜: 2024-12-28
               o 조회수: 562
          + Operation Mindfuck Vol. 7
               o 발표자: blinry와 bleeptrack
               o 주제: Operation Mindfuck 7번째 에디션
               o 날짜: 2024-12-27
               o 조회수: 523
          + KI-Karma next Level: Spiritueller IT-Vertrieb
               o 발표자: Katharina Nocun
               o 주제: 영적 IT 판매
               o 날짜: 2024-12-28
               o 조회수: 413
          + Pirouette Machines. Fluid Components
               o 발표자: Ioana Vreme Moser
               o 주제: 피루엣 머신과 유체 컴포넌트
               o 날짜: 2024-12-28
               o 조회수: 405
          + Typing Culture with Keyboard: Okinawa - Reviving the Japanese Ryukyu-Language through the…
               o 발표자: Daichi Shimabukuro
               o 주제: 키보드를 통한 오키나와 문화 타이핑
               o 날짜: 2024-12-27
               o 조회수: 401
          + Was macht ein IT-Systemadministrator in einem Alu-Schmelzwerk (Schafft die Deutsche…
               o 발표자: Johannes Bernstein
               o 주제: 알루미늄 제련소에서의 IT 시스템 관리자 역할
               o 날짜: 2024-12-27
               o 조회수: 394
          + Wie wird gleich?
               o 발표자: kathia
               o 주제: 동일하게 되는 방법
               o 날짜: 2024-12-27
               o 조회수: 334
          + Windows BitLocker: Screwed without a Screwdriver
               o 발표자: th0mas
               o 주제: 드라이버 없이 비트로커 문제 해결
               o 날짜: 2024-12-28
               o 조회수: 314
          + Gemeinwohlorientierte Forschung mit KI: Missbrauch eindämmen durch Zweckbindung für…
               o 발표자: Rainer Mühlhoff와 Hannah Ruschemeier
               o 주제: 공공 이익을 위한 AI 연구
               o 날짜: 2024-12-28
               o 조회수: 253
          + KLARHEIT ALS WAFFE
               o 발표자: Luzius Bernhard와 lizvlx (UBERMORGEN)
               o 주제: 명확성을 무기로 사용
               o 날짜: 2024-12-27
               o 조회수: 252
          + Einstieg in die Teilchenphysik
               o 발표자: Rosa
               o 주제: 입자 물리학 입문
               o 날짜: 2024-12-27
               o 조회수: 242
          + Correctiv-Recherche ""Geheimplan gegen Deutschland"" – 1 Jahr danach
               o 발표자: Jean Peters
               o 주제: 독일에 대한 비밀 계획 조사 1년 후
               o 날짜: 2024-12-27
               o 조회수: 241
          + Einstieg in den Amateurfunk
               o 발표자: Pylon (he/him)
               o 주제: 아마추어 무선 입문
               o 날짜: 2024-12-28
               o 조회수: 234
          + Waiter, There's An LLM In My Search!
               o 발표자: martinh
               o 주제: 검색에서의 LLM
               o 날짜: 2024-12-27
               o 조회수: 211
          + arafed futures - An Artist Dialogue on Chip Storage and AI Accelerationism
               o 발표자: Ting-Chun Liu와 Leon-Etienne Kühr
               o 주제: 칩 저장 및 AI 가속주의에 대한 예술가 대화
               o 날짜: 2024-12-28
               o 조회수: 209
          + Cat ears were just the beginning: Six years in onesies & what it taught me about life
               o 발표자: glowingkitty
               o 주제: 고양이 귀에서 시작된 인생 교훈
               o 날짜: 2024-12-28
               o 조회수: 205
          + Wie fliegt man eigentlich Flugzeuge?
               o 발표자: Christian Lölkes와 kleinsophie
               o 주제: 비행기 조종 방법
               o 날짜: 2024-12-28
               o 조회수: 186
          + Der ultimative Rodecaster Pro II Workshop
               o 발표자: timpritlove (seine/ihro)
               o 주제: Rodecaster Pro II 워크숍
               o 날짜: 2024-12-27
               o 조회수: 175
          + 0, 1 oder 2 - Hackerei und Cyberbrei
               o 발표자: Erisvision
               o 주제: 해킹과 사이버 혼란
               o 날짜: 2024-12-29
               o 조회수: 174
          + Projekt Bucketchallenge
               o 발표자: Kaspar
               o 주제: 버킷 챌린지 프로젝트
               o 날짜: 2024-12-28
               o 조회수: 174
          + Fake-Shops von der Stange: BogusBazaar
               o 발표자: kantorkel과 Kai Biermann
               o 주제: 가짜 상점과 BogusBazaar
               o 날짜: 2024-12-28
               o 조회수: 171
          + Software accessibility without the fuzz
               o 발표자: Casey Kreer
               o 주제: 소프트웨어 접근성
               o 날짜: 2024-12-28
               o 조회수: 169
          + Desiring Technology. Über Porno, Abhängigkeit und Fortschritt
               o 발표자: Arne Vogelgesang
               o 주제: 기술에 대한 욕망
               o 날짜: 2024-12-28
               o 조회수: 159
          + Geostationäre Satelliten als Hobby
               o 발표자: Christian Berger
               o 주제: 취미로서의 정지 궤도 위성
               o 날짜: 2024-12-28
               o 조회수: 158
          + Das weiß doch niemand - Das Ultimative Super Quiz 3000!
               o 발표자: MacSnider
               o 주제: 궁극의 슈퍼 퀴즈 3000
               o 날짜: 2024-12-28
               o 조회수: 147
          + From fault injection to RCE: Analyzing a Bluetooth tracker
               o 발표자: Nicolas Oberli
               o 주제: 블루투스 트래커 분석
               o 날짜: 2024-12-27
               o 조회수: 144
          + Automated Malfare - discriminatory effects of welfare automation
               o 발표자: AmnestyDigital
               o 주제: 복지 자동화의 차별적 효과
               o 날짜: 2024-12-28
               o 조회수: 140
          + Was tun, wenn man ein Datenleck entdeckt hat?
               o 발표자: Alvar C.H. Freude
               o 주제: 데이터 유출 발견 시 대처 방법
               o 날짜: 2024-12-27
               o 조회수: 105
          + Investigating the Iridium Satellite Network
               o 발표자: Sec과 schneider
               o 주제: 이리듐 위성 네트워크 조사
               o 날짜: 2024-12-27
               o 조회수: 95
          + EU's Digital Identity Systems - Reality Check and Techniques for Better Privacy
               o 발표자: Anja Lehmann과 socialhack
               o 주제: EU의 디지털 신원 시스템
               o 날짜: 2024-12-27
               o 조회수: 87
          + Hacking Disasters - eine Bastelanleitung für die Chaos-Community
               o 발표자: corinna, Sebastian Jünemann과 Ruben Neugebauer
               o 주제: 해킹 재난
               o 날짜: 2024-12-28
               o 조회수: 75
          + Passwort - der heise security Podcast auf dem 38C3
               o 발표자: Christopher Kunz
               o 주제: 38C3에서의 보안 팟캐스트
               o 날짜: 2024-12-28
               o 조회수: 69
          + ComeFlyWithUs Podcast
               o 발표자: Steffen Braasch과 Olli
               o 주제: ComeFlyWithUs 팟캐스트
               o 날짜: 2024-12-28
               o 조회수: 69
          + Let’s spark children’s interest in coding
               o 발표자: anaghz (she / Her)
               o 주제: 어린이의 코딩 관심 유도
               o 날짜: 2024-12-28
               o 조회수: 53
          + Vectors, Pixels, Plotters and Public Participation
               o 발표자: Niklas Roy a.k.a. royrobotiks
               o 주제: 벡터, 픽셀, 플로터 및 공공 참여
               o 날짜: 2024-12-28
               o 조회수: 39
          + Retro-Chips selbst gemacht: Historische Hardware in FPGAs nachbilden
               o 발표자: Till Harbaum
               o 주제: FPGA를 통한 역사적 하드웨어 재현
               o 날짜: 2024-12-28
               o 조회수: 28
          + Die Faszination des echten Kugelspiels
               o 발표자: Gunther
               o 주제: 진짜 구슬 게임의 매력
               o 날짜: 2024-12-28
               o 조회수: 25
          + Databroker Files: Wie uns Apps und Datenhändler der Massenüberwachung ausliefern
               o 발표자: Sebastian Meineck, Ingo Dachwitz, Katharina Brunner와 Rebecca Ciesielski
               o 주제: 앱과 데이터 브로커의 대량 감시
               o 날짜: 2024-12-29
               o 조회수: 20
          + Feelings of Structure in Life, Art, and Neural Nets
               o 발표자: Peli Grietzer
               o 주제: 삶, 예술 및 신경망의 구조적 감정
               o 날짜: 2024-12-28
               o 조회수: 15
          + Privacy-preserving (health) data processing is possible!
               o 발표자: mcnesium과 bngl
               o 주제: 프라이버시 보호 건강 데이터 처리
               o 날짜: 2024-12-28
               o 조회수: 15
          + Geschredderte Gutachten: Wie nicht nur der Staat bei digitaler Barrierefreiheit versagt
               o 발표자: Casey Kreer
               o 주제: 디지털 접근성 실패
               o 날짜: 2024-12-29
               o 조회수: 14
          + Queersupport - weil junge Queers ein offenes Ohr brauchen!
               o 발표자: Queersupport와 V
               o 주제: 젊은 퀴어를 위한 지원
               o 날짜: 2024-12-29
               o 조회수: 12
          + Automation and Empathy: Can We Finally Replace All Artistic Performers with Machines?
               o 발표자: moritz simon geist
               o 주제: 예술적 공연자의 기계 대체 가능성
               o 날짜: 2024-12-28
               o 조회수: 12
          + A Competitive Time-Trial AI for Need for Speed: Most Wanted Using Deep Reinforcement…
               o 발표자: Sebastian Schwarz
               o 주제: Need for Speed: Most Wanted를 위한 경쟁적 타임 트라이얼 AI
               o 날짜: 2024-12-28
               o 조회수: 11
          + A dive into DNS
               o 발표자: altf4
               o 주제: DNS 심층 분석
               o 날짜: 2024-12-27
               o 조회수: 9
          + Vom Betrieb bis ins Netz: Gewerkschaften als Vorbild für modernen Widerstand?
               o 발표자: Joana Starck과 Laurent Kuffert
               o 주제: 현대 저항의 모델로서의 노동조합
               o 날짜: 2024-12-29
               o 조회수: 8
          + From Pegasus to Predator - The evolution of Commercial Spyware on iOS
               o 발표자: Matthias Frielingsdorf
               o 주제: iOS 상의 상업 스파이웨어의 진화
               o 날짜: 2024-12-28
               o 조회수: 7
          + Net Neutrality: Why It Still Matters (More Than Ever!)
               o 발표자: socialhack, Raquel Renno Nunes와 Jürgen Bering
               o 주제: 여전히 중요한 네트워크 중립성
               o 날짜: 2024-12-29
               o 조회수: 7
          + Robot Uprising: a story-driven AI robotics experience
               o 발표자: Karim Hamdi, Katarina Partti와 Juho Kostet
               o 주제: 스토리 중심의 AI 로봇 경험
               o 날짜: 2024-12-29
               o 조회수: 7
          + AI Meets Git: Unmasking Security Flaws in Qodo Merge
               o 발표자: Nils Amiet
               o 주제: Qodo Merge의 보안 결함 발견
               o 날짜: 2024-12-29
               o 조회수: 5
          + Die große Datenschutz-, Datenpannen- und DS-GVO-Show
               o 발표자: Alvar C.H. Freude
               o 주제: 대규모 데이터 보호 및 데이터 유출 쇼
               o 날짜: 2024-12-27
               o 조회수: 3
          + Rollstuhlgerechte Toiletten
               o 발표자: melzai (she/her)
               o 주제: 휠체어 접근 가능한 화장실
               o 날짜: 2024-12-27
               o 조회수: 1

        Hacker News 의견

     * Joscha Bach의 강연에 대한 링크가 공유됨
     * 웹사이트 운영자에게 언어별로 강연을 필터링/정렬할 수 있는 기능을 제안함
          + 여러 강연이 내가 유창하지 않은 언어로 진행되며, 모든 강연에 번역이 포함되어 있지 않음
     * 비디오 플레이어가 iPhone을 매우 뜨겁게 만들고, 충전 중에도 배터리가 소모됨
     * 초기 강연에서 오디오 문제가 있었으며, 해결되었기를 바람
     * Newag 강연에서 무슨 일이 있었는지 궁금해함
     * FreeFire 언급됨
     * 독일 전력망의 취약성을 보여주는 뛰어난 강연이 있는 반면, 개막식에서는 전력 인프라에 대한 공격을 장려하는 것처럼 보이는 점이 약간 불안함
"
"https://news.hada.io/topic?id=18411","OpenAI의 "12 Days of OpenAI" 발표 요약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OpenAI의 ""12 Days of OpenAI"" 발표 요약

     * 12월 5일부터 시작된 ""12 Days of OpenAI"" 에서 ChatGPT와 관련된 새로운 기능, 모델, 구독 옵션, 그리고 확장된 기능을 12일간 차례로 공개

Day 1: 새로운 o1 추론 모델 및 ChatGPT Pro 출시

     * o1 추론 모델의 완전한 버전 공개
          + Plus($20/월) 구독자에게 제한적으로 제공
          + Pro($200/월) 구독자에게는 모든 o1 모델과 Advanced Voice Mode 무제한 사용 제공
               o 더 많은 컴퓨팅 리소스를 활용하여 더 깊이 사고하고 복잡한 문제에 대해 더욱 정교한 답변 제공
     * OpenAI o1 System Card

Day 2: 강화 학습 세부 조정 연구 프로그램 확장

     * Reinforcement Fine-Tuning Research 프로그램 확장 발표
          + RFT는 OpenAI의 새로운 모델 커스터마이징 기술로, 다음과 같은 과정을 통해 특정 도메인에서 모델의 성능을 미세 조정하며, 복잡하고 세부적인 작업에 대한 정확도를 크게 향상시키는 데 효과적
               o 수십 개에서 수천 개의 도메인별 고품질 작업(task)을 모델에 제공
               o 모델이 생성한 응답을 미리 제공된 참조 답변과 비교하여 평가
               o 평가 결과를 활용해 모델이 유사한 문제를 해결하는 추론 과정을 개선
          + 기업, 대학 및 연구 기관 대상
          + 2025년 초 API를 통해 대중에게 제공 예정

Day 3: Sora 출시

     * Sora 비디오 생성 모델 공개
          + 최대 20초, 1080p 클립 생성 가능
          + 와이드스크린, 세로, 정사각형 비율 지원
          + 텍스트뿐만 아니라 이미지를 포함한 사용자 자산 활용 가능
          + Remix, Re-cut, Storyboard, Loop, Blend, Style Presets등을 지원
     * 기대에 비해 성능은 중간 수준으로 평가받고 있음

Day 4: Canvas 기능 확장

     * Canvas 기능이 GPT-4o 모델에 직접 통합되어 무료 사용자 포함 모든 사용자에게 제공됨
          + Anthropic의 Artifacts에 대응하는 기능
          + Canvas 공간내에서 Python 코드를 실행하고 분석 가능
          + 챗봇이 직접 분석하여 개선 사항을 제안, 맞춤형 GPT 제작 지원

Day 5: ChatGPT와 Apple Intelligence 통합

     * ""ChatGPT x Siri 통합"" 발표
     * iOS 18.2부터 Siri를 통해 ChatGPT를 직접 호출 가능

Day 6: Advanced Voice Mode의 비디오 분석 및 화면 공유 기능 추가

     * Advanced Voice Mode가 비디오 카메라와 공유된 화면을 보는 기능 지원
          + 실시간 주변 환경 분석 가능
     * 시즌 테마 음성으로 산타 음성 추가 (Jolly Old St. Nick)

Day 7: ChatGPT에 Projects 기능 추가

     * Projects: 스마트 폴더 시스템 제공
          + 채팅 기록과 업로드된 문서를 주제별로 정리 가능

Day 8: ChatGPT Search 모든 사용자에게 제공

     * 8월에 공개했던 ChatGPT Search 기능 모든 사용자에게 무료 제공
          + 인터넷에서 사용자의 검색어에 대한 정보를 검색하고 관련 웹사이트에서 찾은 정보를 스크랩한 다음 해당 데이터를 대화형 답변으로 합성
          + 기본적으로 검색 결과 페이지를 클릭할 필요가 없으며 Perplexity AI가 제공하는 것과 기능적으로 동일
     * 정확도 문제가 있다는 일부 비판이 있음

Day 9: o1 모델, OpenAI API에서 제공

     * o1 추론 모델의 완전 버전 일부 개발자에게 API로 제공
     * 실시간 API 업데이트 및 Preference Fine-Tuning 제공
     * Go와 Java용 SDK 추가

Day 10: 1-800-ChatGPT 전화 서비스

     * 1-800-ChatGPT: ChatGPT에 더 넓은 접근을 제공하기 위해 AI 전화 서비스 제공
          + 미국 내 사용자에게 무료로 15분 동안 Advanced Voice Mode 사용 가능
          + WhatsApp을 통해서도 활용 가능

Day 11: 더 많은 앱과 통합된 ChatGPT

     * ChatGPT가 더 많은 코딩 앱 및 IDE와 직접 통합
          + 11월에는 macOS앱이 VS Code, Xcode, TextEdit, Terminal, iTerm2와 협업하는 기능을 공개
          + 이제 BEdit, MatLab, TextMate, Android Studio 등과 RubyMine, WebStorm 같은 Jetbrains IDE가 포함됨
          + 또한 Apple Notes, Notion, Quip 같은 텍스트 앱, Warp 터미널등 과도 연동 가능
     * Advanced Voice Mode를 별도 창에서 실행하며 작업 가능

Day 12: 차세대 o3 및 o3-mini 모델 티저 공개

     * 차세대 추론 모델 o3 및 o3-mini 소개
          + o2가 아니라 o3인것은 영국 통신사 O2와의 저작권 문제를 피하기 위한 것
          + 수학, 과학, 코딩 분야 가장 까다로운 벤치마크 테스트에서 뛰어난 성과를 보이며, 최근 공개된 o1 모델보다도 우수한 성능 제공
          + o3-mini는 연구자에게 미리보기로 제공 중. 일반 사용자에게 제공될 시점은 아직 미정.
     * OpenAI는 이 모델을 통해 더욱 정교한 추론 및 문제 해결 능력을 제공할 계획

   o1-pro 2일정도 써보고 있는데 일단 input을 아주 많이 할 수 있고 output도 짤리지 않고 코드를 다 뱉어주니 매우 편합니다. 클로드보다 조금 더 똑똑한것 같기도 해요.
"
"https://news.hada.io/topic?id=18441","Qwen의 새로운 시각적 추론 모델 QvQ 사용 후기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Qwen의 새로운 시각적 추론 모델 QvQ 사용 후기

     * Alibaba Qwen 팀이 새로운 시각적 추론 모델 QvQ-72B-Preview를 발표
          + 이미지와 프롬프트를 입력받아 상세한 추론을 수행
          + 원래 Apache 2.0으로 표시되었으나 현재는 Qwen 라이선스로 변경됨
     * 이전 모델 QwQ와의 차이점
          + QwQ는 텍스트 기반 추론에 집중했으며, ""생각의 경계를 반영하는"" 메커니즘으로 설계됨
          + QvQ는 이에 시각적 입력을 추가하여 이미지를 기반으로 깊이 있는 분석을 수행함

QvQ 사용 사례 및 테스트

     * Hugging Face Spaces에서 QvQ 모델 사용 가능
          + 이미지와 단일 프롬프트를 입력하면 매우 긴 응답을 생성하며, 추가 프롬프트 입력은 불가능함
          + 입력 이미지를 분석하며 순차적으로 추론 과정을 설명함
     * 테스트 결과
          + 펠리컨 세기: ""Count the pelicans"" 프롬프트를 사용하여 사진 속 펠리컨 수를 계산
               o 총 4마리의 펠리컨을 정확히 계산했으며, 부분적으로 보이는 새는 배제함
               o 친근하고 대화적인 문체로 추론을 설명함
          + ARC-AGI 퍼즐: 복잡한 문제를 푸는 데 도전했으나 정확한 결과를 도출하지는 못함
               o 셀룰러 오토마타와 같은 독창적인 접근 방식을 제안
          + 공룡(용) 높이 추정: 비교 가능한 물체 없이 용의 높이를 추정하는 작업을 시도함
               o 약 8~9피트 높이를 제안하며 정교한 관찰력을 보여줌

QvQ 모델 실행 방법

     * 호스팅 환경
          + Hugging Face Spaces에서 GPU 모델 가중치를 이용한 테스트 가능
          + qwen-vl-utils Python 패키지를 활용해 실행
     * 로컬 실행
          + Prince Canuma가 Apple MLX 프레임워크용으로 모델을 변환하여 mlx-vlm 패키지를 통해 실행 가능
          + macOS M2 64GB RAM 환경에서 4비트 양자화 버전으로 성공적으로 실행됨
               o 실행 명령:
uv run --with 'numpy<2.0' --with mlx-vlm python \
  -m mlx_vlm.generate \
  --model mlx-community/QVQ-72B-Preview-4bit \
  --max-tokens 10000 \
  --temp 0.0 \
  --prompt ""describe this"" \
  --image pelicans-on-bicycles-veo2.jpg

QvQ 라이선스 변경

     * QvQ 라이선스가 Apache 2.0에서 Qwen 라이선스로 변경됨
          + 이는 초기 실수 수정으로 보임
     * QwQ 모델은 여전히 Apache 2.0 라이선스를 유지함
          + 두 모델 간의 차별화된 라이선스 정책 확인됨

결론

     * QvQ는 이미지와 텍스트를 결합한 강력한 시각적 추론 모델로, 다양한 실험에서 흥미로운 결과를 생성함
     * 앞으로의 업데이트와 추가 활용 가능성이 기대됨

        Hacker News 의견

     * M2 64GB 랩톱에서 QVQ-72B-Preview-4bit 모델을 실행하여 이미지를 분석하는 방법을 설명함
          + uv run --with 'numpy<2.0' --with mlx-vlm python -m mlx_vlm.generate --model mlx-community/QVQ-72B-Preview-4bit --max-tokens 10000 --temp 0.0 --prompt ""describe this"" --image pelicans-on-bicycles-veo2.jpg 명령어를 사용함
          + 결과는 링크에서 확인 가능함
     * 이 모델은 재미있음
          + 이미지를 업로드하고 ""이 이미지를 보면서 생각을 말해보세요"" 같은 질문을 하면 흥미로운 결과를 얻을 수 있음
          + 예를 들어, 샌드위치 이미지를 보고 세부적인 묘사를 하며 맛을 상상하게 됨
     * 단어 찾기 퍼즐 문제를 테스트로 사용했으나 QvQ 모델은 실패함
          + AI Studio의 Gemini 릴리스도 처음에는 실패했으나, 몇 번의 시도 끝에 성공적으로 단어를 찾음
          + 프로그램을 생성하여 문제를 해결하는 것이 직접적인 해결책을 요청하는 것보다 더 나은 결과를 가져옴
     * 유명한 ""탱크 맨"" 사진을 입력했을 때 빈 응답을 받음
     * 주석자가 이미지를 보면서 생각을 말하는 방식의 데이터셋이 PixMo임
          + QvQ도 이와 유사한 방식으로 훈련되었을 가능성을 제기함
     * Q* 모델이 오픈 소스인지 질문함
          + 권위에 대한 행위에 대한 조언을 요청했을 때 강력한 순응을 권장함
     * 펠리컨 사진을 보고 개수를 세는 질문을 했을 때의 응답 스타일이 재미있음
          + GPT-4와는 다른 캐주얼한 느낌을 줌
     * QvQ-72B-Preview 모델의 라이선스 문제에 대한 논의가 있음
          + Apache 2.0 라이선스와 Qwen 라이선스 간의 혼란이 있었음
     * QvQ 모델은 유명인, 개, The New Yorker 만화와 같은 사진을 분석하는 데 뛰어난 성능을 보임
     * 수학 방정식 이미지를 처리할 수 있는 능력도 있음
"
"https://news.hada.io/topic?id=18486","구직 신청 프로세스 자동화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             구직 신청 프로세스 자동화

        Hacker News 의견

     * 한 구직자는 10년 이상의 소프트웨어 개발 경험을 가지고 있으며, 주로 시니어 개발자 직책을 찾고 있음. 하지만 지원한 직무에서 제안받지 못하고 있어, 자동화된 ""샷건"" 접근 방식을 고려 중임.
          + 자신의 경험과 기술을 증명하기 위해 회사 내 아는 사람의 추천이 필요하다는 의견이 있음.
     * 소프트웨어 매니저는 작년 가을에 많은 지원자가 몰렸고, AI가 사용된 것처럼 보였다고 언급함.
          + 이력서 검토 후 기술 면접에서 많은 지원자가 실패했음.
          + AI, LLM, 데이터 과학을 많이 언급한 지원자를 제외하고, 현장 면접을 선호함.
     * 채용 매니저는 자동 제출된 이력서가 많아 좋은 후보자가 실수로 무시될 수 있다고 우려함.
          + 자동 제출과 사이트 홍수는 효과적이지 않다고 주장함.
     * 한 사용자는 자동화된 프로세스를 통해 3개월 만에 직장을 구했으며, ChatGPT가 이를 매끄럽게 해주었다고 언급함.
          + Notion을 사용하여 지원서를 추적하고, 회사와 직무를 연구하는 데 집중할 수 있었음.
     * 에스크로 서비스가 저품질 지원서 문제를 해결할 수 있을지 궁금해하는 의견이 있음.
          + 지원자가 인터뷰 단계를 통과하면 보상을 받는 구조를 제안함.
     * 자동화를 좋아하는 사용자는 수동적이고 집중적인 접근 방식을 선호하며, 8개 이하의 회사에만 지원함.
          + 경력이 쌓일수록 면접에 시간을 많이 투자해야 한다고 주장함.
     * 자동화된 지원서 제출은 채용 매니저에게 호감을 주지 않으며, 장기적인 관점에서 원하는 직장을 찾는 것이 중요하다고 언급함.
     * 채용 매니저는 수동 지시사항을 통해 지원자를 필터링하는 방법을 제안함.
          + 기술 필터링 단계에서 비인기 작업을 요구하여 후보자를 줄일 수 있다고 설명함.
     * 커리어 페어가 현재 시장에서 가치가 있을 수 있다는 의견이 있음.
          + 물리적 존재가 실제 사람임을 보장하고, 부정행위를 어렵게 만듦.
          + 대규모 페어는 일주일 이상 지속될 수 있으며, 현장 면접도 가능함.
     * LLM이 개인화된 커버레터를 생성하고, 다른 LLM이 이를 요약하는 상황이 재미있다고 언급함.
"
"https://news.hada.io/topic?id=18451","Ghostty 1.0 출시 - 고속, 크로스플랫폼 터미널 에뮬레이터 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ghostty 1.0 출시 - 고속, 크로스플랫폼 터미널 에뮬레이터

     * 빠르고 다양한 기능을 갖춘 크로스 플랫폼 터미널 에뮬레이터. 맥/리눅스에서 네이티브 UI를 지원하며 GPU 가속을 사용
     * 유연한 키바인딩, 다양한 컬러 테마, 수많은 설정 옵션 제공

주요 특징

  1. 네이티브 바이너리

     * macOS와 Linux에서 네이티브 애플리케이션으로 작동
          + macOS: GUI는 Swift로 작성되었으며 AppKit과 SwiftUI를 사용
          + Linux: GUI는 Zig로 작성되었으며 GTK4 C API를 사용
     * 플랫폼 고유의 UI 구성 요소를 사용하여 탭, 분할창, 오류 메시지 등의 기능을 구현
     * 표준 키보드 및 마우스 단축키를 플랫폼 관례에 맞게 지원
     * 플랫폼별 고유 기능 통합
          + macOS: Quick Look, Force Touch, 안전한 입력 API, 재시작 시 창 상태 복구 등

  2. 다양한 터미널 및 애플리케이션 기능

     * 터미널 기능:
          + Kitty 그래픽 프로토콜, 라이트/다크 모드 알림, 하이퍼링크 등을 지원
          + Neovim, Zellij 등 터미널 애플리케이션에서 더 많은 기능 활용 가능
     * 애플리케이션 기능:
          + 네이티브 탭, 분할창, macOS용 드롭다운 터미널, 라이트/다크 모드 전환 등

  3. 성능

     * Ghostty는 가장 빠른 터미널 에뮬레이터들과 동등한 수준의 성능을 목표로 설계
     * 다양한 성능 지표에서 경쟁력을 갖추며, 느리게 느껴지지 않도록 최적화
          + 예: 시작 속도, 스크롤 속도, IO 처리량, 프레임 속도 등
     * 초기 사용자는 Ghostty의 성능 개선이 일상적인 사용에서 눈에 띄게 향상된다고 평가

아키텍처

     * Ghostty의 핵심은 크로스 플랫폼 C-ABI 호환 라이브러리인 libghostty임
          + 터미널 에뮬레이션, 폰트 처리, 렌더링 기능 제공
     * GUI 애플리케이션은 libghostty를 기반으로 작동
          + macOS 앱: Swift로 작성, AppKit과 SwiftUI 사용
          + Linux 앱: Zig로 작성, GTK4 C API 사용
     * 터미널 에뮬레이션과 GUI 간의 명확한 분리를 통해 다양한 터미널 에뮬레이터 프로젝트가 libghostty를 활용할 수 있는 생태계 조성 가능
     * 향후 목표:
          + libghostty의 API를 안정화하고 독립형 라이브러리로 출시

   wezterm 은 제 환경에서는 사용중 랙이 발생되는 현상이 있었는데 ghostty로 변경하니 쓸만해졌습니다. 제 mb pro가 연식이 오래되어서 그럴수도 있지만 ghostty가 훨씬 쾌적하고 가벼운 느낌입니다.

   써볼까 생각 중인데 리눅스 기준으로 Wezterm에 비해 특출난 장점이 있나요?

   Wezterm 처럼 한글 타이핑이 잘 되더군요. 특히 맥에서 NFC 조합에 에 따라 한글 폰트가 달리 보이는 것도 좋네요. Wez 업데이트가 정체된 듯

        Hacker News 의견

     * Ghostty는 지난 2년간의 열정적인 작업의 결과물이며, 많은 사람들이 이를 사용하면서 그 안에 담긴 사랑과 노력을 느끼길 바람. Ghostty는 다른 터미널들과 비교하여 우월하다고 주장하지 않으며, 각기 다른 설계 목표와 절충점을 가지고 있음. Kitty, WezTerm, Foot, iTerm2, Rio 등 다양한 훌륭한 터미널들이 존재함.
     * Ghostty는 빠르고 성능이 뛰어나며, 특히 많은 디버깅 정보를 출력할 때 터미널이 병목이 되지 않음. 개발 시스템에서 큰 차이를 만들어 줌.
     * Ghostty는 텍스트 렌더링이 정확하고 필요한 모든 기능을 갖춘 매우 잘 작성된 Zig 코드로 이루어져 있음. Bun의 Bun.stringWidth에서 일부 코드를 사용함.
     * Ghostty에 Session/Workspace 개념이 있는지 궁금하며, Alacritty와 tmux의 통합 방식에서 배울 점이 있을 것 같음.
     * Ghostty에는 ""quake mode""라는 숨겨진 기능이 있으며, macOS에서 특정 키 바인딩으로 설정 가능함. ""quick terminal"" 창의 기본 높이를 설정할 수 있는 옵션은 없지만 창을 드래그하여 조정할 수 있음.
     * 여러 터미널 에뮬레이터 도구를 시도한 후 wave terminal을 선택했으며, MacOS와 Linux에서 사용할 수 있는 도구 목록을 제공함. Warp는 VC 제품이라서 사용하지 않음.
     * Ghostty 설정을 생성하는 데 도움이 되는 커뮤니티 사이트가 유용함.
     * Ghostty는 최근에 출시된 고품질 오픈 소스 소프트웨어로, 구독 없는 미래에 대한 희망을 줌. Mitchell에게 감사함.
     * ""platform-native UI""라는 표현에 처음에는 회의적이었으나, Linux에서는 GTK, MacOS에서는 SwiftUI를 사용한다는 점에서 흥미로웠음. 새로운 터미널 에뮬레이터를 시도하는 것은 항상 재미있음. Bitmap 폰트를 지원하지 않는 점은 아쉬움.
     * Ghostty의 일부 마법을 설명하는 블로그 포스트가 흥미로움.
"
"https://news.hada.io/topic?id=18498","Keypub.sh - SSH 키를 이용한 터미널용 OAuth","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Keypub.sh - SSH 키를 이용한 터미널용 OAuth

     * 터미널 환경에서의 사용자 인증 문제를 해결하기 위해 설계된 도구로, SSH 키를 활용하여 OAuth와 유사한 인증 방식을 제공
     * 별도의 설치 없이 기존 SSH 설정만으로 동작
     * 개인 정보 보호: 사용자가 공유할 이메일 정보의 범위를 직접 제어 가능
     * 간단한 이메일 인증
     * 무료 공개서비스. CLI 애플리케이션 개발시에 사용자 인증 기능을 직접 구현할 필요 없이 바로 활용 가능
     * $ ssh keypub.sh about 로 시도해 볼 것
"
"https://news.hada.io/topic?id=18464","가상 머신 작성 방법가상 머신 작성 방법 (2022)

가상 머신이란?

     * 가상 머신(VM)은 컴퓨터처럼 작동하는 프로그램임. CPU와 몇 가지 하드웨어 구성 요소를 시뮬레이션하여 산술 연산을 수행하고 메모리에 읽고 쓰며 I/O 장치와 상호 작용할 수 있음.
     * VM은 특정 컴퓨터의 동작을 재현하거나, 소프트웨어 개발을 용이하게 하기 위해 만들어짐.
     * Java Virtual Machine(JVM)은 성공적인 예시로, 다양한 기기에서 Java, Kotlin, Clojure 프로그램을 실행할 수 있게 함.

LC-3 아키텍처

     * LC-3는 교육용 컴퓨터 아키텍처로, 현대 CPU에서 사용되는 주요 개념을 보여줌.
     * LC-3는 65,536개의 메모리 위치를 가지며, 각 위치는 16비트 값을 저장함.
     * 10개의 레지스터가 있으며, 이 중 8개는 범용 레지스터, 1개는 프로그램 카운터(PC), 1개는 조건 플래그(COND) 레지스터임.

명령어 집합

     * 명령어는 CPU가 수행할 기본 작업을 지시하는 명령임.
     * LC-3에는 16개의 오퍼코드가 있으며, 각 명령어는 16비트 길이로 구성됨.
     * 명령어는 오퍼코드와 작업에 필요한 매개변수로 구성됨.

조건 플래그

     * R_COND 레지스터는 최근 계산의 부호를 나타내는 조건 플래그를 저장함.
     * LC-3는 3개의 조건 플래그를 사용하여 계산 결과의 부호를 나타냄.

프로그램 실행

     * 프로그램은 메모리에서 명령어를 로드하고, PC 레지스터를 증가시키며, 오퍼코드를 확인하여 명령어를 수행함.
     * 명령어는 PC를 변경하여 실행 흐름을 제어할 수 있음.

명령어 구현

     * ADD 명령어는 두 숫자를 더하고 결과를 레지스터에 저장함.
     * LDI 명령어는 메모리에서 값을 로드하여 레지스터에 저장함.
     * 각 명령어는 사양에 따라 구현되며, 플래그를 업데이트해야 함.

트랩 루틴

     * LC-3는 키보드 입력, 문자열 출력 등 일반적인 작업을 수행하기 위한 트랩 루틴을 제공함.
     * 각 트랩 루틴은 트랩 코드로 식별되며, TRAP 명령어로 실행됨.
     * 트랩 루틴은 C로 작성되어, OS의 I/O 루틴을 활용함으로써 VM의 성능을 향상시킴.

        Hacker News 의견

     * 한 사용자는 커뮤니티 칼리지에서 컴퓨터 과학 입문 수업을 들으며 간단한 CPU 명령어 세트를 설계하고, VM과 어셈블러를 작성하여 어셈블리 프로그램을 실행하는 경험을 했음. 이 과정이 컴퓨터에 대한 많은 것을 이해하게 해주었음
          + FPGA를 위한 실제 CPU 설계부터 간단한 OS와 프로그램 작성까지 모든 컴퓨팅 단계를 이렇게 배울 수 있다고 느꼈음
          + 현대 컴퓨팅의 성능과 보안이 필요하지 않다면 이러한 과정이 놀랍도록 간단함
     * Ben Eater의 브레드보드 CPU 시리즈를 본 후 자신의 CPU를 설계하고 에뮬레이트하고 싶다는 의견이 있었음
          + 시간을 내어 설계하고 싶다는 바람을 표현함
     * 추천받은 책 목록:
          + ""Virtual Machines: Versatile Platforms for Systems and Processes"" by Smith and Nair - 포괄적인 주제 개요서로 보임
          + ""Virtual Machines"" by Iain Craig - 언어와 VM에 대한 실습서로 보임
          + ""Virtual Machine Design and Implementation in C/C++"" by Bill Blunden - 실습 구현서로 보임
          + 이 책들을 읽은 사람이 의견을 추가해주면 도움이 될 것이라고 언급함
     * 교육용 아키텍처인 Brookshear Machine과 Little Computer가 실제와 다르며, 학생들에게 왜곡된 이해를 줄 수 있다는 의견이 있었음
          + 컴퓨터 작동 방식을 배우고자 하는 사람들은 운영체제 과정을 듣는 것이 더 나을 것이라고 제안함
          + 짧은 튜토리얼을 원한다면 ""Writing my own bootloader""를 추천함
          + ""Write your own VM"" 튜토리얼이 나쁘다는 것이 아니라, 다른 주제가 더 유익할 수 있다는 의견임
     * ""Virtual Machine""이라는 용어가 현대에서는 하드웨어 가상화 기능을 사용하는 환경을 지칭하는 것이 일반적이라는 의견이 있었음
          + 에뮬레이터와 VM의 차이를 설명하며, 과거에는 용어의 모호함이 있었지만 현재는 명확해졌음을 언급함
"
"https://news.hada.io/topic?id=18495","HN 문의: 취업 불가능 상태?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 문의: 취업 불가능 상태?

     * 여러 온라인 플랫폼에서 기술 분야에서의 취업이 어렵다는 경험담이 많이 공유되고 있음
          + 필자도 지난 1년간 인터뷰를 잡기 어려웠음
          + 필자는 컴퓨터 과학 학위가 없는 독학자임
          + 경험이 많고 성실한 근로자이지만, 알고리듬이 이를 고려하지 않아 필터를 통과하기 어려움
     * CS 학위를 가진 사람들조차 인터뷰를 잡기 어렵다는 논의가 많음
          + 특히 백인 남성들이 직업을 얻기 어려움
          + 대량 해고와 투자 감소가 있음
          + 많은 사람들이 AI가 일자리를 빼앗고 있다고 주장함
          + Elon Musk 등은 엔지니어 부족을 주장하며 H-1B 비자 수를 늘려야 한다고 언급함
          + LinkedIn에서 주니어 포지션에도 100명 이상의 지원자가 있음
     * 온라인에 게시된 내용은 신뢰할 수 없을 수 있지만, 많은 사람들이 비슷한 상황에 처해 있다고 주장함
          + 대부분이 백인 남성임
     * 지난 2년간 두 번의 해고를 경험함
          + 두 경우 모두 백인 남성들이 인도 및 카자흐스탄 외국인들에 의해 대체됨
          + 이는 우연일 수 있지만, Vivek과 Elon이 미국 기술 노동자를 비판하는 상황과 관련이 있음
     * 필자는 논쟁을 시작하고 싶지 않지만, 개인적인 경험을 찾고 있음
          + 다른 사람들도 비슷한 경험을 하고 있는지 궁금함
          + 외국인 노동자들로 인해 해고된 경험이 있는지 질문함
          + 인종차별, 연령차별, 성차별이 작용하는지, 아니면 정치적 요인에 의해 과장된 것인지 궁금함

        Hacker News 의견

     * Ivy League 학위를 가진 사람도 인터뷰를 받기 어려운 상황임. 미국 대기업들이 인도, 폴란드, 브라질에서 채용을 늘리고 있으며, 미국 내 채용은 내부 이동을 위한 것임. 부트캠프 졸업생과 외국 지원자들이 많아져 채용 경쟁이 심화됨. COVID 이후 채용 감소 현상이 있음
     * 컴퓨터 과학 학위 없이 10년 경력으로 이력서를 새로 작성하고 LinkedIn을 최적화하여 588개의 지원서 중 16개의 인터뷰와 2개의 최종 제안을 받음. 시장이 어렵지만 숫자 게임임을 깨달음
     * 오픈 소스 프로젝트에 집중하여 채용 제안을 받음. 오픈 소스 작업이 기술 인터뷰 준비에 더 효과적임. 절약 생활을 통해 좋은 직업을 기다릴 수 있는 자유를 얻음
     * FAANG에서 인터뷰를 쉽게 통과하던 시절과 달리, 이제는 무명 스타트업에서도 이력서가 거절됨. 인터뷰 과정이 길고 까다로워졌으며, 고용주의 시장임
     * 대부분의 시간을 실직 상태로 보내며, 현지에서의 직업을 찾기 위해 이사를 고려함. 기업들이 훈련을 제공하지 않으며, 기술 경험을 요구함. AI나 암호화폐 분야가 아닌 경우 경쟁이 치열함
     * 많은 사람들이 직업을 찾기 어려워하며, UX 산업이 특히 경쟁적임. 독일에서는 상황이 좋지 않다는 것이 일반적인 인식임
     * 기술 직업 시장이 변화하고 있으며, 서구에서는 농업이나 제조업처럼 기술 직업도 변화할 가능성이 있음. 규제 프레임워크가 지역 기술 산업에 영향을 미치고 있음
     * 제로 금리 정책의 종료와 세금 공제 만료로 인해 시장이 가격에 민감해짐. 저렴한 노동력을 찾으려는 경향이 있음
     * 채용 매니저로서 다양한 기술 경험이 때로는 전문성이 부족하다는 인상을 줄 수 있음. 짧은 근무 기간과 잘 알려지지 않은 회사 경력이 리스크로 작용할 수 있음. 정치적 게시물은 위험 관리 경고를 유발함
"
"https://news.hada.io/topic?id=18461","2025년 벤처 스튜디오에 대한 예상 5+1","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        2025년 벤처 스튜디오에 대한 예상 5+1

1. 더 많은 벤처 스튜디오가 생길 것

     * 현재 ""벤처 스튜디오""의 수는 1000개를 넘을 것으로 추정되며, 정의가 광범위하므로 실제 수는 더 많을 가능성이 있음
     * 벤처 스튜디오가 글로벌 스타트업 생태계에서 주류로 자리 잡기 위해서는 품질과 성과의 기준이 높아져야 함

     더 많은 관심 = 더 높은 기준 필요
     * 벤처 스튜디오에 대한 관심이 증가함에 따라 질문도 많아짐
     * 질문은 벤처 스튜디오의 가정을 검증하고 학습을 통해 발전할 기회를 제공함
     * 다양한 벤처 스튜디오 모델이 존재하며, 이를 통해 더 많은 실험과 성공 가능성 증가
     * 창업자, 투자자, 파트너는 ""왜 이 벤처 스튜디오와 협력해야 하는가?""라는 질문을 던지며 기대치 상승

     * 특히 성장하는 벤처 스튜디오 주요 유형 3가지 : 산업 특화, 지역 특화, 기업
     * 산업 특화 벤처 스튜디오
          + 벤처 스튜디오의 미래는 특정 산업에 특화된 형태로 나아갈 것
          + 2025년에는 신규 스튜디오의 90%가 특정 산업에 집중할 것으로 예상됨
          + 스타트업을 반복 가능하고 체계적으로 빌딩하려면 산업 특화가 필요함
               o 검증, 시장 진입 전략, 투자 유치, 인재 채용, 제품 개발, 확장 등에서의 플레이북 구축 가능
               o 이는 과정 가속화 및 리스크 감소에 기여함
          + ""어떤 업종이든 3~4년 안에 10~20개 이상의 스타트업을 만들 수 있다고 생각""
          + 특정 산업에서 지루하지만 중요한 문제를 해결하는 것이 성공의 열쇠
          + 모든 산업에서 기회가 존재하며, 초기 포트폴리오를 구축하기에 충분한 스타트업 아이디어 발굴 가능
     * 지역 특화 벤처 스튜디오
          + 벤처 스튜디오는 지역 경제 개발의 중요한 도구로 활용 가능
          + 특정 지역의 자산(고객 밀집, 대학 연구, 지역 자원 등)을 활용하면 지리적 이점과 산업 특화를 결합 가능
          + 단순히 지리적 요소만으로는 경쟁 우위를 확보하기 어렵지만, 산업 특화와 결합 시 강력한 스튜디오 모델 구축 가능
          + 지역적 자산을 효과적으로 활용하면 지역 경제 성장과 창업 생태계 활성화에 기여 가능
     * 기업 벤처 스튜디오
          + 벤처 스튜디오 모델에 대한 관심이 증가하며, 대기업의 참여도 늘어날 것으로 예상됨
          + 대기업의 ""성장""과 ""혁신"" 요구가 벤처 스튜디오 설립으로 이어짐
          + 2025년 및 2026년에 더 많은 대기업들이 벤처 스튜디오를 설립할 것으로 예상됨
               o 내부 벤처: 대기업이 100% 소유하는 신규 비즈니스
               o 외부 벤처: 투자자와 지분을 공유하며 스핀아웃 형태로 설립된 비즈니스
               o 대기업 벤처 스튜디오는 종종 내부 벤처로 시작해 스핀아웃의 이점을 점차 인식하게 됨
                    # 위험 분담, 더 높은 품질의 인재 확보, 규제 감소, 빠른 실행 속도 등
          + 대기업의 자산을 효과적으로 활용하면 큰 가치를 창출 가능
          + 대기업은 초기에는 내부 벤처로 시작해 점차 스핀아웃 벤처로 확장하는 경향이 있음

2. 벤처 캐피탈의 벤처 스튜디오 모델 수용 증가

     * 더 많은 벤처 스튜디오가 우수한 스타트업을 배출함에 따라 벤처 캐피탈(VC)의 벤처 스튜디오 모델 수용도가 점차 증가할 것으로 예상됨
     * 가장 큰 과제는 캡 테이블(cap table) 문제
          + 벤처 스튜디오가 과도한 지분을 보유하면 VC들은 이를 꺼려함
          + 많은 VC들이 이 문제를 완전히 받아들이기 어렵지만 점차 이해도가 높아지고 있음
     * 일부 VC들은 직접 벤처 스튜디오에 참여하기 시작함
          + 이 경우 초기 지분을 더 많이 소유하며, 후속 투자로 초기 투자를 보호할 수 있음
          + 이는 기존 벤처 스튜디오가 큰 지분을 보유한 스타트업에 투자하는 것과는 차이가 있음
          + 그러나 이는 스타트업 창업 단계에서 진입하는 것이 비용 효율적이며 추가 상승 여력이 있다는 신호로 볼 수 있음
     * 벤처 스튜디오만이 성공적인 비즈니스를 만드는 유일한 방법은 아님
          + 성공적인 비즈니스 구축에는 다양한 방식이 존재하며, 정해진 공식은 없음
          + 벤처 스튜디오도 거대한 성공 사례를 만들어 낼 것이고, 다른 방식으로 성공한 비즈니스도 많을 것
     * VC들은 기회주의적임
          + 벤처 스튜디오에서 높은 확장 가능성을 가진 우수 스타트업이 배출되고, 캡 테이블이 적절히 구성된 경우 VC들은 기꺼이 투자할 것

3. 벤처 스튜디오에 유입되는 자본 증가 (그러나 아직 초기 단계)

     * 벤처 스튜디오는 스타트업을 구축하고 자금을 지원함
          + 자금이 없으면 벤처 스튜디오라 할 수 없음
          + 스타트업에 자금을 지원하려면 자본이 필요함
     * 벤처 스튜디오가 자본을 얻는 주요 경로
          + 자체 수익 창출: 서비스, 자문, 제품 판매 등
          + 투자자들로부터 자금 조달: 벤처 캐피탈 펀드, 신디케이트, 롤링 펀드, SPV 등 다양한 구조 활용
          + 대부분의 스튜디오가 후자(투자 유치)를 통해 자금을 확보하려 함
     * LP(유한 파트너): 전통적으로 벤처 캐피탈 펀드에 투자하던 투자자들이 새로운 대안을 찾고 있음
          + 그러나 벤처 스튜디오는 아직 생소한 개념
          + 벤처 스튜디오를 정의하는 방식에 대해 논쟁이 진행 중
               o 새로운 산업으로 봐야 하는가?
               o 완전히 다른 자산 클래스로 간주해야 하는가?
          + 일부 스튜디오는 벤처 캐피탈과의 차별화를 강조하며 다른 입지를 원함
          + 다른 스튜디오는 자신들을 ""차별화된 VC 펀드""로 보이길 원함
          + 이런 차이점이 투자자들에게 혼란을 야기함
     * 현재로서는 벤처 스튜디오에만 독점적으로 투자하는 펀드는 드뭄
          + 예: Vault Fund
          + 몇몇 펀드가 새롭게 시작하려고 시도 중
          + 벤처 스튜디오에 자금을 조달하는 것은 쉽지 않으며, 실적(track record)이 점점 더 중요해질 것
     * 2025년에는 벤처 스튜디오로의 자본 투자가 증가할 것으로 예상됨
          + 하지만 급격한 증가(폭발적 성장)는 어려움
          + 벤처 스튜디오에 대한 관심은 높지만, 시장 전반의 투자 열기는 상대적으로 낮음
          + 차별화, 실적, 투자자에게 제공하는 가치 제안이 자본 조달의 핵심 요소가 될 것

4. 벤처 스튜디오 실패도 증가

     * 2025년에는 벤처 스튜디오가 직면한 도전 과제로 인해 실패 사례도 늘어날 것으로 예상됨
     * 지속 가능한 벤처 스튜디오 운영은 매우 어려움
          + 벤처 스튜디오는 자신들이 수행한 작업과 투자한 자본을 통해 지분을 획득
          + 작업 = 인적 자원(사람)
          + 사람은 비용이 많이 들어감
     * 벤처 스튜디오는 운영 비용이 상당히 높아지는 경향이 있음
          + 이는 벤처 캐피탈 펀드와의 주요 차이점
          + 벤처 캐피탈 펀드는 일반적으로 투자 자본의 2%를 관리 수수료로 활용해 운영 비용을 충당
     * 벤처 스튜디오가 수익, 투자금, 관리 수수료 등으로 자립하지 못할 경우, 폐업하거나 대규모로 직원 감축
     * 2024년에 이미 일부 잘 알려진 스튜디오들이 이러한 이유로 폐업했으며, 2025년에는 더 많은 실패가 예상됨
     * Hype의 양날의 검
          + 벤처 스튜디오에 대한 관심 증가는 기회와 도전을 동시에 가져옴
          + 긍정적 효과: 모델을 더 많은 사람(투자자, 창업자, 파트너 등)에게 알림
          + 부정적 효과: 준비되지 않은 상태에서 벤처 스튜디오를 설립하려는 시도가 증가

5. 벤처 스튜디오 성과 데이터의 모호함

     * 벤처 스튜디오의 성과에 대한 신뢰할 만한 데이터가 부족한 상황
          + Peter Walker(Carta) 와 같은 데이터 전문가가 스타트업 및 VC 업계 데이터를 보고하지만, 벤처 스튜디오 데이터는 복잡성이 큼
          + VC 데이터조차 불분명한 경우가 많으며, 벤처 스튜디오는 더 그렇다는 점을 유념해야 함
     * 일부 전문가들이 객관적 관점을 제공하기 위해 데이터를 수집하려 노력 중
          + 그러나 이 작업은 어렵고, 결과가 나오는 데 오랜 시간이 걸릴 전망
     * 대부분의 벤처 스튜디오는 설립된 지 얼마 되지 않아 측정 가능한 결과가 없음
     * 오래된 벤처 스튜디오조차 자신들을 벤처 스튜디오로 분류하지 않을 수 있음
     * 모호성을 유발하는 사례들
          + 벤처 스튜디오의 투자 활동
               o 일부 스튜디오는 스타트업을 육성하지 않고 투자만 진행함
               o 이러한 경우 VC 모델과 유사하며, 성공 시 이를 벤처 스튜디오 모델의 성과로 볼 수 있을지 불명확함
          + VC의 스타트업 육성 활동
               o 일부 VC는 스타트업을 직접 육성하기도 함
               o 이는 벤처 스튜디오 모델과 겹치는 영역으로, 벤처 스튜디오 업계에서 이를 “벤처 스튜디오 성공”으로 주장하는 경우가 있음
     * 벤처 스튜디오 성과 데이터는 당분간 모호할 것으로 예상됨
          + 이는 아직 초기 단계의 산업/자산 클래스/구조임
          + 명확한 데이터를 기반으로 한 결론을 내리기까지 시간이 필요함

보너스: 더 많은 투명성이 필요함

     * 벤처 스튜디오의 성장은 긍정적임
          + 스타트업 창업 방식에 대한 기존의 ""정설""에 도전
          + 스타트업 구축 및 자금 조달에서 혁신 기회를 창출
          + 모든 산업이 혁신과 잠재적 변화(disruption)가 필요하며, 스타트업 창업 및 자금 조달도 예외가 아님
     * 그러나 벤처 스튜디오의 새로움과 정의의 불분명함이 혼란을 초래
          + 혼란의 결과:
               o 일부 나쁜 의도를 가진 사람들이 창업자들을 이용할 가능성 증가
               o 창업자, 투자자, 초기 직원 등 유능한 사람들이 벤처 스튜디오와의 협력을 꺼림
          + 이러한 혼란을 줄이기 위해 더 많은 투명성이 필요
     * 더 많은 스튜디오딜이 딜 조건을 공유해야함
          + 엑셀러레이터는 표준화된 조건을 공개하는 경우가 많음
          + 벤처 캐피탈도 일반적으로 투자 금액, 투자 분야, 밸류에이션 범위 등을 공유
          + 반면, 벤처 스튜디오는 대부분 딜 조건을 공개하지 않음
          + 일부 스튜디오는 창업자와 협상 중에도 명확하지 않은 조건을 제시함(이건 레드플래그🚩임)
     * 투명성 부족은 벤처 스튜디오에 대한 부정적 인식을 초래
          + 의도와 관계없이, 투명성이 부족하면 ""숨기고 있다""는 인상을 줄 수 있음
          + 벤처 스튜디오가 많은 캡 테이블 지분을 차지하는 경우, 이를 정당화하는 데 어려움을 느끼면 공개를 꺼리는 경향이 있음
     * 투명성을 높이기 위해 벤처 스튜디오가 딜 조건을 공개적으로 웹사이트에 게시할 필요는 없음
          + 각 딜이 다르고 변수도 많기 때문
     * 그러나, 업계가 성장하고 발전하려면 투명성 증대가 필수적임
          + 투명성은 벤처 스튜디오의 신뢰성을 높이고 더 많은 창업자, 투자자, 파트너를 끌어들임
          + 더 많은 벤처 스튜디오 → 창업자, 파트너, 자본 배분자들에게 더 많은 선택지 제공
          + 더 많은 선택지 → 경쟁 증가
          + 경쟁 증가 → 벤처 스튜디오가 차별화되고 두드러지게 될 필요성 증가
          + 투명성은 차별화와 신뢰 구축의 중요한 요소

   벤처 스튜디오는 컴퍼니빌딩 + 벤처캐피털 형태로 스타트업을 체계적이고 반복 가능한 방식으로 설계, 구축, 지원하는 조직입니다.
   아이디어 단계에서부터 회사 설립, 초기 자금 지원, 운영 및 성장 지원까지 스타트업의 모든 단계를 직접 관리하거나 지원합니다.

주요 특징

     * 내부적으로 아이디어를 개발:
          + 벤처 스튜디오는 외부 스타트업을 지원하는 엑셀러레이터 또는 VC와 달리 내부에서 아이디어를 발굴하고 검증함
          + 각 아이디어는 엄격한 평가와 테스트 과정을 거치며 성공 가능성이 높은 경우 스타트업으로 발전
     * 스타트업 구축에 특화된 팀 운영:
          + 벤처 스튜디오는 디자이너, 개발자, 마케터, 사업 개발 전문가 등 다양한 전문 인력을 보유
          + 스타트업의 초기 설계, 제품 개발, 마케팅, 팀 구성 등을 직접 지원
     * 초기 자본 제공:
          + 벤처 스튜디오는 초기 자금을 직접 투자하거나 VC 파트너와 협력해 스타트업이 빠르게 시작할 수 있도록 도움
     * 스타트업 포트폴리오 관리:
          + 다수의 스타트업을 동시에 설계하고 운영하며, 성공한 스타트업의 수익으로 새로운 스타트업 구축에 재투자

벤처 스튜디오의 장점

     * 체계적이고 반복 가능한 프로세스: 검증된 프로세스를 통해 리스크를 줄이고 성공 가능성을 높임
     * 자원과 네트워크 활용: 전문 인력과 자본을 제공하며, 네트워크를 통해 스타트업의 성장을 지원
     * 빠른 시장 진출: 초기 설계부터 실행까지의 과정이 빠르고 집중적으로 이루어짐
     * 위험 분산: 다수의 스타트업을 동시에 운영하여 실패 위험을 분산

벤처 스튜디오의 단점 및 도전 과제

     * 높은 운영 비용
     * 캡 테이블 문제: 벤처 스튜디오가 높은 지분을 보유하는 경우, VC들이 추가 투자를 꺼릴 수 있음
     * 모든 아이디어가 성공하는 것은 아니며, 실패율이 여전히 존재
     * 투명성 부족: 스튜디오의 지분 구조와 딜 조건이 명확하지 않을 경우 창업자와 투자자 간 신뢰 문제가 발생할 수 있음

벤처 스튜디오와 다른 모델의 차이점

    1. 벤처 캐피탈(VC):
          + VC는 외부에서 창업된 스타트업에 자본을 투자.
          + 벤처 스튜디오는 스타트업을 직접 설계하고 구축.
    2. 엑셀러레이터:
          + 엑셀러레이터는 이미 창업된 스타트업을 단기적으로 지원.
          + 벤처 스튜디오는 아이디어 단계에서부터 시작해 전체 과정을 관리.
    3. 인큐베이터:
          + 인큐베이터는 초기 단계 스타트업에 공간과 자원을 제공.
          + 벤처 스튜디오는 초기 설계부터 실행까지 더 깊게 관여.

벤처 스튜디오의 주요 사례

     * Highline Beta: 대기업과 협력하여 새로운 벤처 스튜디오를 설계 및 운영. 스타트업 구축 및 스핀아웃 모델 활용
     * Atomic: 내부적으로 아이디어를 개발하고 다수의 성공적인 스타트업을 배출
     * Idealab: 세계 최초의 벤처 스튜디오 중 하나로, 다수의 혁신적 스타트업을 설립
     * Science Inc.: 다양한 소비자 중심 스타트업 설계 및 투자

   패스트트랙아시아 같은 곳이라고 생각하면 되려나요?

   그나저나 요즘은 패스트캠퍼스 빼고는 보거나 이야기 들은 적 없어서 홈페이지 가보니, 여기는 유지보수 모드(?)로 들어갔나보군요.

   앤틀러 같은 곳도 있습니다.
"
"https://news.hada.io/topic?id=18476","TSMC 애리조나 공장, 첨단 칩 생산 시작 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TSMC 애리조나 공장, 첨단 칩 생산 시작 예정

     * 미국에서 첨단 칩 제조 시작
          + TSMC는 2025년 애리조나에 첨단 칩 제조 시설을 개설할 예정임. 이는 2022년 CHIPS 및 과학법의 시험대가 될 것임.
          + 이 공장은 4나노미터 기술을 사용하여 첨단 칩을 생산할 예정이며, 이는 미국 내 첨단 칩 제조의 시작을 의미함.
          + 2024년 10월 말, 애리조나 공장의 수율이 대만 공장보다 4% 높다는 발표가 있었음.
          + 두 번째 공장은 2028년에 운영될 예정이며, 2나노미터 또는 3나노미터 공정을 제공할 계획임.
     * TSMC의 인력 문제
          + 애리조나 공장에 대한 대만 내 반응은 엇갈림. 미국 근로자들은 대만에서의 훈련 조건에 불만을 제기했으며, 대만 근로자들은 미국인들이 오만하다고 비판함.
          + TSMC는 군대 조직처럼 운영되며, 결정은 상명하달식으로 이루어짐.
          + 미국의 실리콘 밸리 문화는 빠르게 움직이고 실수를 두려워하지 않는 경향이 있지만, 이는 반도체 제조 공정과 잘 맞지 않음.
          + TSMC는 이러한 문화 충돌을 해결하기 위해 노력하고 있으며, 미국 내 공장 건설을 단순한 기술 문제로 간주했으나 이는 문화적, 법적 차이가 있는 문제임.
     * 인텔과 삼성의 공장 계획
          + 삼성은 텍사스 테일러에 공장을 열 계획이지만, 생산 시작은 2026년으로 연기됨.
          + 삼성은 한국에서 제조한 칩에 대한 수요가 부족하며, 텍사스에서 제조할 칩에 대한 수요도 부족할 것으로 예상됨.
          + 인텔은 CHIPS 법안의 주요 로비스트 중 하나였으며, 미국 내 새로운 공장을 열 계획임.
          + 인텔은 애리조나와 오하이오에 첨단 공장을 건설하고, 뉴멕시코의 두 공장을 포장 시설로 전환하며, 오리건 시설에 차세대 극자외선 리소그래피 장비를 구매할 예정임.
     * 결론
          + TSMC의 애리조나 공장 개설은 CHIPS 법안이 국내 제조를 촉진할 수 있는지, 그리고 회사의 국제 확장이 가능한지를 시험하는 계기가 될 것임.
          + 이러한 변화는 미국과 대만의 관계에 긍정적인 영향을 미칠 수 있음.
"
"https://news.hada.io/topic?id=18431","DataJourney - Design-First 오픈소스 데이터 관리 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               DataJourney - Design-First 오픈소스 데이터 관리 툴킷

     * 조직이 데이터를 효과적으로 관리하고 활용할 수 있도록 오픈소스 기술의 강점을 활용하는 구조화된 접근법 제공
     * 확장 가능성과 재현 가능성을 중시하며, 데이터 워크플로우를 구축하는 데 필요한 필수 단계를 안내
     * 목표 설정, 도구 선택, 워크플로우 테스트 및 커스터마이징 과정을 포함한 체계적 지원
     * 유연하고 모듈화된 설계를 통해 사용자 요구에 맞게 조정 가능

디자인 철학 : 레이어 구성

    1. PO (기반): GitHub과 같은 정적 홈 역할
    2. P1 (도구): 오픈소스로 구동되는 각종 도구들
    3. P2 (유지보수 및 모니터링): 환경 및 자동화 관리 (Pixi 및 GHA)
    4. P3 (추상화): 사용자 상호작용을 위한 CLI/작업 관리자 레이어 (Pixi)

현재 지원 워크플로우

     * Python 패키징 프레임워크 설계 원칙 구현
     * GitHub Actions 설정
     * Vale.sh PR 수준에서 구성
     * Pre-commit hooks로 코드 린팅/포맷팅 설정
     * Pixi를 활용한 환경 관리
     * Intake를 이용한 온라인 데이터 소스 읽기
     * Dagster를 이용한 샘플 파이프라인 구축
     * Holoviews + Panel을 사용한 대시보드 구축
     * Mito를 활용한 탐색적 데이터 분석(EDA)
     * Flask 기반 웹 UI 빌드
     * FastHTML로 웹 UI 확장 및 재구성
     * GitHub AI 모델을 활용하여 데이터 분석 수행 (GitHub AI models Beta)
"
"https://news.hada.io/topic?id=18396","Ask GN: 개인 사이트 애드센스 심사에 대해 잘 아시는 분이 계실까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask GN: 개인 사이트 애드센스 심사에 대해 잘 아시는 분이 계실까요?

   개인적으로 웹서비스를 개발하는데
   서버 운영비용 충당을 위해 애드센스를 도입하려고합니다.

   제가 개발하고 있는 사이트는 다른 사이트들을 크롤링해서 데이터를 모아
   가공해서 양질의 데이터를 제공하는 사이트인데
   아래와 같은 사유로 심사 통과가 어렵다네요.
   근데 걸리는게 있습니다.

   이동 또는 기타 행동 목적으로 사용되는 화면.

   이게 사실상 제가 만드는 사이트의 본질이라...
   이문제를 해결하기 위한 방법이 뭐가있을까요?

   제가 고민중인 해법은 이러합니다.
    1. 기타 컨텐츠를 추가한다 ( 블로그 같은 )
       2.유저 커뮤니티를 추가한다.

   아래와 같은 문제를 해결해보신분 계실까요?

   추가로 게임을 할수 있는 사이트는 애드센스에 제한되나요?

   ========================================

   게시자 콘텐츠가 없는 화면에 Google 게재 광고
   다음과 같은 화면에는 Google 게재 광고가 허용되지 않습니다.

   콘텐츠가 없거나 가치가 낮은 콘텐츠를 포함한 화면
   아직 준비 중인 화면.
   알림, 이동 또는 기타 행동 목적으로 사용되는 화면.
   게시자 콘텐츠가 없는 화면의 Google 게재 광고에 대해 자세히 알아보기

   저도 비슷한 고민이 있습니다. 저는 Domain Specific LLM으로 챗봇을 운영하려고 하는데 이것도 자체 콘텐츠가 아니라는 이유로 거절 당할까 싶네요.

   구글 애드센스로 nextjs 사이트 10개정도 운용중입니다.

   초기에 비슷한 일을 겪었습니다만

   사용자 풀이 많아지면 보통 통과됩니다.

   아니면 서버사이드 렌더링을 고려해보는 것도 해답이 될 수 있겠네요

   실례가아니라면 어떤사이트들 운영중이신지 알수있을까요?

   저도 입찰공고알림서비스에 달려고 심사신청했는데
   딱 동일한 이유로 반려당했습니다..ㅠㅠ

   해법은 찾으셨나요?

   자체 생성한 컨텐츠를 늘리시는게 좋을 것 같습니다. 구글 애드센스를 악용하는 인간이 많아서 유튜브 수익창출 문턱 올린 것 처럼 애드센스 문턱을 올렸습니다.

   답변감사합니다.
   spp00님은 운영중인 사이트가 있으신가요??
"
"https://news.hada.io/topic?id=18466","항공 승객의 최대 살상 무기로 떠오른 미사일","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        항공 승객의 최대 살상 무기로 떠오른 미사일

        Hacker News 의견

     * 유럽의 동부 방어선에 러시아 미사일이 간혹 침투하는 이유는 공중 방어 체계를 더 공격적인 자세로 전환할 때 발생하는 민간인 피해 가능성 때문임
          + 최근 미국 F-18 전투기가 홍해에서 미국 구축함에 의해 격추된 사건이 있었음
          + 유럽은 여전히 평시의 요격 방식을 사용하고 있음
     * 러시아 SAM 운영자들이 항공기의 비행 계획을 예상하지 못한 이유에 대한 의문 제기
          + 상업 항공편은 비행 계획을 ANSP에 제출하며, 러시아로의 비행은 FATA에 제출될 가능성이 높음
          + 두 가지 가능성 제시: 1) SAM 사이트 책임자가 비행 계획을 알고 있었고 격추 명령을 받았을 가능성 2) 실수로 인한 오해나 비행 계획을 보지 않고 레이더에서 수상해 보이는 것을 격추했을 가능성
          + 러시아 군대의 무능함과 훈련 부족이 문제로 지적됨
     * 2001년 시베리아 항공 1812편이 러시아와 우크라이나의 합동 훈련 중 우크라이나 S-200에 의해 격추된 사건 언급
     * Embraer 항공기의 견고한 설계와 엔지니어링이 손상 후에도 오랫동안 비행할 수 있었음을 보여줌
     * 러시아가 항공기 승객의 가장 큰 살해자라는 주장에 대한 의문 제기
          + Boeing의 사고와 LOC/CFIT가 큰 비율을 차지할 가능성 있음
          + Airbus의 통계에 따르면 LOC가 지난 20년간 주요 원인임
     * 1983년 소련 전투기가 한국 항공기 Boeing 747을 격추한 사건 언급
          + 1978년 KAL 902편이 소련 영공을 침범하여 격추된 사건도 언급
          + 이 사건은 덜 치명적이었으며, 109명 중 2명이 사망하고 비상 착륙함
     * 2014년 이후 상업 항공기 사망 원인 중 격추가 가장 큰 비율을 차지한다는 주장에 대한 의문 제기
          + Boeing의 자동 시스템 문제도 큰 기여를 했을 가능성 있음
     * 전쟁 지역이나 러시아를 경유하는 항공편을 선택하지 않음으로써 격추 위험을 피할 수 있는 방법 제시
          + 예상치 못한 문제와 비교하여 승객이 계획할 수 있는 요소임
"
"https://news.hada.io/topic?id=18516","Anki AI Utils - AI로 Anki를 더 유용하게 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Anki AI Utils - AI로 Anki를 더 유용하게 만들기

     * Anki 학습 카드를 자동으로 개선하는 AI 기반 도구 모음
          + 주요 목표는 의학, 언어, 복잡한 과목을 공부하는 사람들로, 특히 어려운 개념을 쉽게 이해하고 기억할 수 있도록 도와줌
     * ChatGPT를 활용하여 복잡한 개념에 대한 명확한 설명 제공
     * Dall-E 또는 Stable Diffusion을 활용해 핵심 아이디어를 설명하는 이미지 생성
     * 사용자의 기억 스타일에 맞춘 암기법 생성, Major System도 지원
     * 이해와 기억을 돕기 위해 부적절하게 작성된 카드를 재구성(문장 재구성)

고급 기능

     * 적응형 학습 : 의미적 유사성을 분석하여 가장 관련있는 예제와 카드를 매칭
     * 개인화된 기억 고리 : 기존 암기법을 기반으로 한 더 강력한 맞춤형 기억법 제공
     * 자동화 : 사용자가 어려움을 겪는 카드를 매일 자동으로 개선하도록 스크립트를 실행
     * Windows, Mac, Linux, Android, iOS 모든 Anki 클라이언트에서 작동하며, 변경 내역을 로깅 및 복원 가능
     * LiteLLM을 통해 모든 LLM 공급자를 지원
     * 무한 확장성: 데이터셋에 예제를 추가해 학습 성능을 지속적으로 개선 가능

내장 도구 설명

  Illustrator (삽화 생성기)

     * AI 이미지 생성 기술로 카드의 주요 개념을 시각화
     * DALL-E 및 Stable Diffusion 지원
     * 이미지를 자동으로 포맷팅하며, 복잡한 주제에 적합한 시각 자료 제공

  Reformulator (문장 재구성기)

     * 문장이 부자연스럽거나 길 경우, 의미와 구조를 유지하면서 재구성
     * 카드의 가독성을 높이고 새로운 형식으로 학습 가능
     * 특히 장기 사용자에게 유용하며, 최신 학습 스타일에 맞게 기존 카드를 업데이트

  Mnemonics Creator (기억법 생성기)

     * Major System 등 검증된 기억법 기법 사용
     * 여러 기억법 옵션을 생성하며, 숫자와 순서를 암기하는 데 유용
     * 기존 기억 연결고리를 활용해 사용자 맞춤형 암기법 제공

  Explainer (설명 생성기)

     * 복잡한 개념을 분해하여 명확하게 설명
     * 주요 관계를 강조하며 추가적인 예제와 배경 정보를 제공
     * 학습 중 틀린 카드를 이해하고 지식의 빈틈을 채움

  Mnemonics Helper (기억법 도우미)

     * CLI 기반의 간단한 인터페이스로, 새로운 기억법 아이디어를 탐색
     * 기존 데이터셋을 활용하거나 새로운 옵션을 생성

   Anki 덱 만들때 ai를 잘 활용해보려하는데 그냥 직접 고민해서 만드는 것보다 효율이 좋을까라는게 항상 고민되는 것 같습니다..

   저도 AI가 좋은 질문을 만들어줘서 스스로 생각하게 하는 건 좋다고 생각하는데,

   AI가 생성한 답변을 그대로 넣으면 기억이 확실히 덜 나긴 하더군요.

   인지과학 연구로 증명된 학습 보조 도구 Anki: 10배 더 효과적으로 활용하는 방법
   Anki - 강력하고 지능적인 플래시 카드

   와 생긴지 이틀 된 레포를 어떻게 아셨죠? 공유 감사합니다.
"
"https://news.hada.io/topic?id=18423","C++의 절대적 인기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              C++의 절대적 인기

     * C++의 재미
          + 프로그래머들이 프로그래밍을 시작한 이유를 잊어버렸다고 생각함.
          + C++로 프로젝트를 진행하며 재미를 느끼고, 다양한 아이디어를 실현할 수 있었음.
          + C++는 프로그래머가 원하는 것을 할 수 있도록 방해하지 않음.
     * C++ 템플릿 메타프로그래밍의 문제
          + 90년대 후반부터 2000년대 초반까지 C++ 커뮤니티는 템플릿 메타프로그래밍에 집착했음.
          + 이는 C++를 복잡하고 사용하기 어려운 언어로 만들었음.
          + Java는 프로그래머의 필요를 고려하여 더 나은 사용자 경험을 제공했음.
     * C++11의 놀라운 변화
          + C++11은 언어에 많은 개선을 가져왔음.
          + auto, nullptr, range-for, 람다 표현식, <chrono>, <regex>, unique_ptr, shared_ptr, <thread> 등의 기능이 추가되었음.
          + 이러한 변화는 C++를 더 현대적이고 사용하기 쉬운 언어로 만들었음.
     * C++의 현대적 기능
          + 파일 시스템 탐색, 패키지 관리, 행렬 라이브러리, 그래픽, GUI, TUI 등 다양한 기능을 지원함.
          + C++는 다양한 라이브러리와 API에 직접 접근할 수 있어 거의 모든 것을 만들 수 있음.
     * C++의 창의적 자유
          + C++는 창의성을 발휘할 수 있는 언어로, 다른 언어의 권위적인 제약에서 벗어남.
          + cppreference.com은 C++의 훌륭한 문서화 사이트로, 모든 키워드와 라이브러리를 잘 설명하고 있음.
     * C++의 단점
          + 컴파일러 오류 메시지가 업계 최악이며, 빌드 도구가 사용하기 어려움.
          + 언어의 복잡성과 역사적 유산으로 인해 학습 곡선이 가파름.
          + RAII(자원 획득은 초기화) 패턴이 실제 환경에서 불편할 수 있음.
     * 결론
          + C++는 여전히 재미있고 강력한 언어이며, 과거의 고정관념에서 벗어나야 함.
          + C++는 프로그래머에게 창의적 자유를 제공하며, 다양한 프로젝트를 실현할 수 있는 가능성을 열어줌.

        Hacker News 의견

     * C++를 싫어하지만 개인 프로젝트에서는 만족스러운 경험임. Rust와 CD/CI가 장기적인 신뢰성을 제공함. 빌드 시스템과 패키지 관리가 어려움.
          + C++의 세밀한 제어가 즐거움을 줌.
          + 빌드 시스템과 패키지 관리가 어려움.
          + C++의 문법과 런타임의 복잡함이 있음.
     * C++에 대한 혼란스러운 의견이 많음. C++의 현대적 품질과 구식 문제점이 혼재함.
          + C++의 성능과 기술적 요소가 재미를 줌.
          + C++는 ""진짜"" 소프트웨어 개발에는 적합하지 않음.
     * C++ 프로젝트에 제3자 의존성을 연결하는 데 어려움이 있음. 대부분의 현대 언어에서는 간단한 설치로 해결 가능함.
          + C++의 세부 사항을 이해하는 데 시간이 걸림.
     * C++의 새로운 기능을 배우지만 컴파일러 오류로 인해 어려움을 겪음. C++14에 머물러 있음.
          + C++의 복잡함이 부담이 됨.
     * C++의 불만은 주로 구식 코드베이스에서 발생함. Rust에서도 비슷한 경험을 함.
          + 나쁜 소프트웨어 개발이 문제임.
     * C++에서 재미를 느끼는 사람도 있지만, 개인적으로는 C++가 복잡함.
          + 낮은 수준의 제어가 필요할 때 C를 사용함.
     * C++11에 감명을 받았으며, cppreference.com의 문서가 훌륭함.
          + 다른 라이브러리를 프로젝트에 통합하는 것이 어려움.
     * 현대 C++를 잘 아는 팀과 함께라면 C++는 훌륭함. 성능이 뛰어나고 디버깅과 최적화가 용이함.
          + 오래된 코드베이스에서는 다른 경험을 하게 됨.
     * C++를 배웠지만 깊이 들어가지는 않음. Rust의 기능적 프로그래밍과 성능이 뛰어남.
          + C++를 사용할 이유가 많지 않음.
     * C++의 std::regex는 성능이 좋지 않고 유니코드 지원이 부족함. 일반적으로 피해야 함.
"
"https://news.hada.io/topic?id=18517","Show GN: 당신의 콘텐츠 집사, 뉴틀러! (Waitlist 모집 중)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: 당신의 콘텐츠 집사, 뉴틀러! (Waitlist 모집 중)

   안녕하세요! 다가오는 1월 6일, 첫 MVP 서비스를 오픈하게 되어,
   출시 전, 미리 체험해 보고 싶은 분들을 위해 waitlist를 모집 중이에요.
     * 서비스 소개 페이지 : https://newtler.framer.website/
     * wait list 등록하기 : https://tally.so/r/w74rja

   ✅ 뉴틀러는 어떤 서비스인가요?
     * 뉴틀러는 다양한 채널(유튜브, 브런치, 뉴스레터, 블로그 등)에서 쏟아지는 수많은 콘텐츠 중 내가 원하는 콘텐츠만 골라 한 공간에서 확인할 수 있도록, 나만의 맞춤 피드를 만들 수 있는 콘텐츠 리더 서비스예요.
     * 뉴틀러 = News(피드) + Butler(집사) ‘당신의 콘텐츠를 정리해 주는 집사’라는 뜻을 담고 있어요. 😊

   ✅ 이런 분들께 추천해요!
     * 유튜브, 브런치, 뉴스레터, 블로그 등 2개 이상의 다양한 채널에서 콘텐츠를 보고 있는 분
     * 관심 있는 주제의 새로운 콘텐츠를 찾고 싶으신 분
     * 기억하고 싶은 콘텐츠는 한 공간에 저장했다가 나중에 다시 꺼내보고 싶으셨던 분

   —

   wait list 등록하시면, 오픈 즉시 가장 먼저 이메일로 안내해 드릴게요.
   많은 신청 부탁드려요.

   저도 신청했습니다.

   신청했습니다.
"
"https://news.hada.io/topic?id=18427","LLM을 활용하는 슬랙봇 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           LLM을 활용하는 슬랙봇 만들기

     * Benchling은 여러 리전과 환경에서 클라우드 인프라를 운영
          + Terraform Cloud로 16만 개 이상의 리소스를 관리하며, 한 달 동안 약 50명의 엔지니어가 인프라 변경 사항을 릴리스
     * 방대한 FAQ 문서(20페이지)와 Slack 스레드 기록이 존재하지만, ""검색의 비효율성""이 문제.
     * 이를 해결하기 위해 RAG LLM을 활용한 Slackbot을 구축했음

구축 목표

     * Terraform Cloud 관련 질문을 실시간으로 해결하는 내부 Slackbot 개발.
     * 내부 및 외부 데이터 소스를 결합해 사용자에게 친숙한 Slack 인터페이스를 통해 답변 제공.
     * 활용 가능 사례:
          + HR 질문 응답
          + 고객 문제 해결 사례 검색
          + 소프트웨어 오류 코드 설명

작동 원리

    1. 사용자 쿼리 분석: 데이터베이스에서 관련 정보를 검색.
    2. LLM 프롬프트 구성: 검색 결과와 지침을 포함해 답변 생성.

  기술 스택

     * RAG 모델: Amazon Bedrock 사용.
          + OpenSearch Serverless 데이터베이스로 구성된 지식베이스 설정.
          + Claude 3.5 Sonnet v2 모델로 답변 생성.

데이터 소스

     * Confluence: Terraform Cloud FAQ(PDF로 저장 후 S3에 업로드).
     * 웹: HashiCorp의 Terraform Cloud 및 언어 문서.
     * Slack: 해결된 Terraform Cloud 이슈가 포함된 스레드(POC는 수작업으로 수집).
     * 데이터는 벡터 데이터베이스에 저장되어 쿼리 시 검색 가능.

구현 아키텍처

     * 구성 요소:
          + Slack 앱
          + AWS API Gateway
          + AWS Lambda (Python 사용)
          + AWS Bedrock
          + OpenSearch Serverless (벡터 데이터베이스)
     * 모델 사용:
          + Amazon Titan Text Embeddings v2 (임베딩 생성)
          + Claude 3.5 Sonnet v2 (답변 생성)

제한 사항 및 향후 개선점

  제한 사항

     * 이미지 처리 불가: 이미지 기반 아키텍처 다이어그램 또는 스크린샷 미포함.
     * Terraform 지원 부족: 현재 Terraform AWS 프로바이더가 Bedrock 리소스를 지원하지 않음.

  향후 개선점

    1. 출처 링크 추가: Slack 응답에 문서 출처 포함.
    2. Slack 스레드 자동 저장: ""@help-terraform-cloud 기억해줘"" 명령으로 데이터베이스 업데이트.
    3. 데이터 동기화 자동화: CloudWatch 이벤트를 사용해 주간 동기화.
    4. Confluence API 활용: 현재 수동 PDF 업로드를 API 연결로 전환.
    5. 다중 대화 지원: 사용자와 지속적인 대화 문맥 유지.

구축 과정에서 배운 점

    1. 데이터 청크 전략:
          + 초기에 300 토큰(약 1단락) 크기를 사용했으나 긴 답변이 잘리지 않도록 1500 토큰(약 5단락)으로 조정.
    2. PDF 파싱의 효율성:
          + 이미지 제외, 텍스트 기반 데이터는 안정적으로 추출.
    3. 지식 베이스 설정 용이성:
          + Amazon Bedrock을 활용해 몇 분 만에 구축 가능.

사용 사례

     * FAQ 및 오류 코드 조회.
     * 반복적인 질문 자동 응답.
     * 팀별 맞춤형 데이터셋 활용:
          + 대화 기록, 공용 문서 등.

보안 고려사항

     * 데이터 민감도 및 부정확한 결과 위험 평가.
     * 조직에서 승인된 모델 확인.

결론

     * LLM을 활용한 Slackbot은 빠른 프로토타입 개발 가능성을 입증.
     * 새로운 기술 실험을 통해 효율성과 생산성 향상 가능.
     * 이 사례를 바탕으로 여러분도 LLM 기반 도구를 구축해 보세요!
"
"https://news.hada.io/topic?id=18407","장기적(long term) 소프트웨어 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        장기적(long term) 소프트웨어 개발

     * 현대 소프트웨어는 지속적 배포(CD)와 자동화된 테스트(CI)를 통해 자주 업데이트되지만, ""장기적으로 사용되는 소프트웨어""는 다른 접근이 필요함
          + 예: 원자력 발전소, 비행기, 심장박동기, 선거 시스템 등
               o 신뢰성과 안정성이 중요한 분야에서는 지속적인 변화보다는 안정성과 예측 가능한 변경을 선호

장기 소프트웨어 개발의 핵심 원칙

  의존성(Dependencies)

     * 소프트웨어의 의존성은 장기적인 성공에 중요한 요소
     * 소프트웨어는 외부 세계와의 상호작용을 고려해야 하며, 프로그래밍 언어와 같은 기본 선택이 중요함
     * 소프트웨어 의존성 계층 이해
          + 외부 세계: 우리가 통제할 수 없는 클라이언트 소프트웨어(예: 브라우저 등).
          + 기본 선택: 프로그래밍 언어처럼 스택 전체를 재작성해야 변경 가능한 요소.
          + 프레임워크: 코드베이스와 강하게 결합되는 Spring Framework, React 등. 변경은 가능하지만, 매우 높은 비용이 듦.
          + 데이터베이스: 대부분 교체 가능하나 세부적인 조정과 작업이 필요.
          + 헬퍼 라이브러리: 특정 기능을 제공하는 교체 가능한 라이브러리.
     * 시간이 지남에 따라 의존성과 외부 세계는 변화:
          + 의존성의 변화로 인해 코드 수정 또는 행동 변화 발생 가능.
          + 새로운 주요 버전 출시로 호환성 문제 발생.
          + 프로젝트가 중단되거나 사라질 위험.
          + 보안 위험: 의존성이 악성 행위자에 의해 손상될 가능성(npm, PyPI 등).
          + 상업화: 벤처캐피탈(VC)의 새로운 소유자가 유료화.
          + 의존성 간 충돌 문제.
     * 장기적 사용을 고려한 의존성 선택 시 점검해야 할 항목:
          + 기술 수준: 소스 코드를 보고 품질 판단 가능 여부.
          + 사용자 기반: 누가 사용 중인지 확인.
          + 개발 목적: 개발자가 누구이며 목표는 무엇인지 파악.
          + 재정 지원: 자금 지원 여부와 출처.
          + 유지 관리: 보안 릴리스가 주기적으로 이루어지는지 확인.
               o 커뮤니티가 유지 관리를 인수할 가능성.
               o 내가 직접 유지 관리할 수 있는지.
               o 필요 시 재정 지원으로 프로젝트 지속 가능성을 확보해야 하는지.
          + 의존성의 의존성:
               o 하위 의존성의 보안 이력도 검토.
     * 현실적인 접근 방식
          + 의존성 제한:
               o 1600개 이상의 의존성을 가진 프로젝트는 코드가 급격히 변화하며 불안정해질 가능성이 큼.
               o 수많은 의존성을 가진 프로젝트에서는 어떤 코드를 배포하는지 파악조차 어려움.
          + 신중한 추가:
               o 의존성을 추가할 때 기술적 난이도를 부여해 자연스러운 검토 시간을 확보.
               o 장기 프로젝트에서는 필요하지 않은 의존성은 피해야 함.

  런타임 의존성(Runtime Dependencies)

     * 이전까지 논의한 내용은 빌드/컴파일 의존성에 국한됨.
     * 그러나 현대 프로젝트는 종종 런타임 의존성도 포함:
          + 예: Amazon S3, Google Firebase.
          + 일부는 사실상 표준처럼 간주됨(S3 등).
          + 그러나 대부분의 런타임 의존성은 특정 서비스에 잠금(Lock-in) 되는 성격이 강함.
     * 10년 후에도 현재 사용 중인 서비스를 대체할 수 있는 대안을 찾는 일은 매우 높은 비용을 초래.
     * 제3자 서비스 의존성 목록은 최소화 또는 비우기가 필요:
          + 특히 클라우드 네이티브(cloud native) 소프트웨어 개발에서는 다수의 고급 제3자 서비스 사용이 일반적.
          + 장기 프로젝트의 경우 이런 의존성은 높은 리스크를 동반.
     * 빌드 타임 서비스 의존성도 중요한 요소:
          + 예: npm install이 더 이상 작동하지 않을 경우, 소프트웨어 빌드 자체가 불가능.
          + 이는 프로젝트의 재사용 가능성을 심각하게 저하시킬 수 있음.
     * 런타임 의존성을 철저히 검토:
          + 잠재적 잠금 문제를 인식하고, 의존성을 줄이거나 제거.
     * 장기적 유지 가능성 확보:
          + 클라우드 또는 제3자 서비스의 대체 가능성을 사전에 고려.

  테스트, 테스트, 그리고 테스트

     * 테스트의 필요성은 모두가 동의하는 기본 원칙:
          + 가능한 많은 테스트를 작성.
          + 모든 테스트가 동등하게 가치 있는 것은 아니지만, 테스트 자체를 후회할 일은 거의 없음.
     * 특히 의존성이 많은 프로젝트에서 테스트는 필수:
          + 의존성이 변경되거나 드리프트될 경우, 문제를 조기에 감지하는 데 도움.
     * 테스트의 역할
          + 문제 해결 지원:
               o 변경 상황에 맞춰 빠르게 조정 가능.
          + 리팩토링 지원:
               o 코드 의존성을 제거하거나 변경할 때 자신감을 제공.
          + 장기 유지보수에 유용:
               o 개발이 3년 이상 중단된 이후에도 테스트를 통해 시스템이 여전히 작동하는지 확인.
               o 새 컴파일러, 런타임, 운영체제에서도 기능 유지 여부를 확인.
     * 테스트는 비용이 아니라 투자
          + 더 많은 테스트를 작성:
               o 테스트는 유지보수와 안정성의 기반.
               o 코드 수정 또는 확장 시 테스트는 큰 정신적 지지 역할.

  복잡성: 소프트웨어 개발의 최종 보스

     * 복잡성은 소프트웨어 개발의 궁극적 적:
          + 최고의 개발자나 팀도 복잡성에 의해 무너질 수 있음.
          + 엔트로피와 인간 행동의 영향으로 복잡성은 항상 증가.
          + 복잡성을 의식적으로 관리하지 않으면, 프로젝트는 유지 불가능한 상태로 빠질 수 있음.
     * 복잡성과 코드 양의 상관관계
          + 코드 양과 복잡성:
               o 코드가 적을 때는 다소 복잡하더라도 관리 가능.
               o 코드가 늘어날수록 단순성을 유지해야 제어 가능.
               o 관리 가능한 복잡성은 팀의 역량과 ""초록 삼각형"" 안에 있어야 함.
          + 복잡성의 한계:
               o 팀 인원을 늘리거나 뛰어난 역량의 개발자를 고용하더라도 복잡성 처리에는 한계가 있음.
               o 한계를 넘어서면 프로젝트는 유지보수 불가능한 상태에 빠짐.
     * 코드가 항상 ‘오른쪽 위’로 움직이는 이유:(그래프에서)
          + 더 많은 기능 요청.
          + 불필요한 최적화 시도.
          + 버그 수정 시 기존 복잡성을 줄이는 대신 새로운 코드 추가.
     * 잘못된 API 설계의 비용:
          + 예: CreateFile 함수가 대부분의 경우 파일을 생성하지 않음.
          + 이러한 혼란은 추가적인 인지적 부담과 실수 가능성을 높임.
     * 복잡성 관리 전략
          + 리팩토링은 조기에, 그리고 자주:
               o 불필요한 코드를 제거하고, 단순화에 시간 투자.
          + 테스트에 투자:
               o 테스트가 많을수록 복잡성을 줄이는 작업이 쉬워짐.
          + 복잡성 관리의 중요성:
               o 단순화를 위해 미리 노력하지 않으면, 장기 프로젝트는 결국 ""유지보수 불가 상태""로 빠질 위험이 있음.

  지루하고 간단한 코드를 작성하라. 그보다 더 간단하게. 그리고 더 지루하게.

     ""디버깅은 프로그램을 작성하는 것보다 두 배 더 어렵다. 따라서 코드를 작성할 때 최대한 똑똑하게 만들면, 그것을 디버깅할 방법은 무엇인가?"" - Brian Kernighan

     * 슈퍼 지루하고 명확한 코드 작성:
          + 나이브(näive)하지만 직관적으로 이해 가능한 코드를 선호.
          + ""프리미엄 최적화는 모든 악의 근원이다.""
     * 최적화는 반드시 필요할 때만:
          + 너무 간단해서 문제가 될 경우, 나중에 복잡성을 추가하는 건 어렵지 않음.
          + 그 순간이 오지 않을 수도 있음.
     * 복잡한 코드 작성을 지양:
          + 반드시 필요한 시점까지 기다릴 것.
          + 단순한 코드를 작성한 것에 대해 후회할 가능성은 매우 낮음.
     * 고성능 코드나 기능은 특정한 환경에서만 작동할 수 있음.
          + 예:
               o LMDB: PowerDNS에서 안정적으로 사용하기까지 많은 어려움 겪음.
               o RapidJSON: SIMD 가속 JSON 라이브러리. 성능은 뛰어나지만 사용 조건이 까다로움.
     * ""나는 이 제약을 극복할 수 있다""는 자신감이 있더라도:
          + 올해는 가능하더라도 5년 후 자신 혹은 후임 개발자는 어려움을 겪을 수 있음.
          + 복잡한 프로그래밍 언어도 동일한 원칙이 적용됨.
     * 결론:
          + 코드를 단순화하라:
               o 정말 간단하게. 그보다 더 간단하게.
          + 최적화는 나중으로 미뤄라:
               o 복잡성은 필요할 때 추가 가능하지만, 초기에 복잡하게 만들면 유지보수가 어려워짐.

  LinkedIn 기반의 소프트웨어 개발

     * 현실 vs. 이상
          + 이상적인 접근: 의존성 선택 시 철저한 평가와 검토 필요(위에서 제시한 체크리스트 활용).
          + 현실적인 접근: 때로는 매력적인 기술을 시도해보고, 작동하면 그대로 사용하는 경향.
     * 매력적인 이유
          + LinkedIn의 유명 인사나 인플루언서가 추천한 기술.
          + Hacker News 같은 커뮤니티에서 극찬받는 ""최신 프레임워크"".
     * 유행 기술은 장기적인 검증이 부족:
          + ""10년 이상 유지될 소프트웨어 프로젝트""에는 적합하지 않을 수 있음.
          + 새로운 기술은 초기 단계에서 안정성과 유지보수성 측면에서 문제가 발생할 가능성이 높음.
     * 권장 사항
          + 실험적 영역에서만 사용:
               o 신기술은 먼저 작은 프로젝트나 비핵심 영역에서 시험.
          + Lindy 효과 고려:
               o 기술의 수명은 현재 사용 기간에 비례하는 경향.
               o 오래된 기술일수록 장기적인 안정성을 기대할 수 있음.
     * 신기술은 매력적이지만, 장기적인 프로젝트에는 검증된 안정적인 기술이 더 적합함.

  로깅, 텔레메트리, 성능

     * 소프트웨어가 지속적으로 업데이트되거나 배포되지 않을 경우:
          + 웹사이트가 깨졌을 때 즉각적인 피드백을 받지 못할 가능성이 높음.
          + 배포 후 실제 문제 해결까지 시간이 오래 걸릴 수 있음.
     * 초기 릴리스부터 철저한 로깅 및 텔레메트리 구현:
          + 소프트웨어의 성능, 실패, 활동 내역을 기록.
          + 시간이 지나면서 누적된 데이터는 드물게 발생하는 버그 해결에 매우 유용.
     * 부족한 로깅으로 인한 문제:
          + 사용자 UI를 배포했지만 3000개의 폴더를 생성한 사용자가 문제를 보고.
          + 사용자는 ""작동하지 않는다""라고만 언급해, 근본 원인 파악에 몇 달 소요.
          + 성능 로깅 및 텔레메트리가 있었다면 문제를 훨씬 빠르게 해결 가능했을 것.
     * 로깅과 텔레메트리는 필수:
          + 소프트웨어 활동을 철저히 모니터링할 수 있도록 설계.
          + 장기적인 배포 및 유지보수 과정에서 예상치 못한 문제 해결에 큰 도움을 줌.

  문서화

     * 문서화의 중요성:
          + 단순히 API 문서를 잘 작성하는 것을 넘어 **""왜 이렇게 설계했는지""**를 설명해야 함.
          + 시스템이 어떻게 작동하는지에 대한 아이디어와 철학을 기록.
          + 해결책을 분리한 이유와 비직관적인 설계 결정의 근거를 남겨야 함.
     * 아키텍처 문서 외에 유용한 자료:
          + 내부 블로그 포스트: 개발자들이 시스템 설계에 대한 자유로운 논의 공유.
          + 팀 인터뷰: 설계 결정 배경을 담은 대화 기록.
          + 이러한 문서는 시간이 지나도 팀 내 지식 전수를 가능하게 함.
     * 코드에 주석을 남겨라:
          + ""좋은 코드에는 주석이 필요 없다""는 트렌드에도 불구하고, 코드의 '왜'를 설명하는 주석은 필수적.
          + 특정 함수의 존재 이유를 설명하는 내용이 중요.
     * 커밋 메시지 작성:
          + 커밋 메시지는 작업 기록의 핵심. 이를 통해 코드 변경의 이유를 추적할 수 있도록 지원.
          + 사용자들이 쉽게 커밋 메시지를 열람할 수 있는 환경 마련.
     * 문서화를 위한 시간 확보:
          + 개발이 잘 안 되는 날에는 유용한 주석과 기록을 남기는 데 시간을 할애.
          + 팀 차원에서 문서화를 위한 시간을 정기적으로 배정.
     * 왜 그렇게 설계했는지 기록하라:
          + 7년 후 새로운 팀에게 철학과 배경을 전달할 수 있는 자료는 무엇보다 소중함.
     * 주석과 커밋 메시지를 통해 역사를 남겨라:
          + 개발 도중뿐 아니라 장기적인 유지보수를 위한 필수 요소.

  팀 구성

     * 팀의 지속성과 소프트웨어의 장기적 성공:
          + 일부 소프트웨어는 80년을 지원하도록 설계됨. 이러한 장기 프로젝트에서는 팀의 유지가 핵심.
          + 현대 개발 환경에서는 평균 3년 정도가 긴 근속 기간으로 간주됨.
          + 좋은 문서화와 테스트는 팀 교체를 어느 정도 보완할 수 있지만, 한계가 있음.
     * 장기 근속의 장점:
          + 10년 이상 팀원 유지:
               o 실제 직원으로 고용하고, 개발자를 잘 관리하는 것이 중요.
               o 장기적인 프로젝트 성공에 핵심적인 ""해킹(hack)""으로 간주.
     * 외주 의존의 문제점:
          + 외주 개발자는 코드를 시스템에 넘긴 후 떠나는 경우가 많음.
          + 10년 이상 지속 가능한 소프트웨어 품질을 목표로 한다면 매우 비효율적인 방식.
     * 팀 구성원들이 장기적으로 함께할 수 있는 환경 조성.
     * 외부 컨설턴트 의존을 최소화하고, 내부 팀의 지속 가능성을 높이는 전략이 필요.

  오픈 소스를 고려하라

     * 오픈 소스의 장점:
          + 외부 검토를 통해 코드 품질을 유지:
               o 외부의 시선이 개발자들에게 더 높은 기준을 요구함.
          + 더 나은 코드 표준을 유지하기 위한 강력한 메커니즘.
     * 오픈 소스 준비 과정에서의 현실:
          + 기업이나 정부는 종종 오픈 소스화 준비에 수개월에서 수년이 걸린다고 주장.
          + 이유:
               o 내부적으로는 외부에 공개하기 부끄러운 코드 작성이 일반적.
               o 오픈 소스화 전 코드 정리가 필요하기 때문.
     * 적용 가능성 평가:
          + 오픈 소스가 항상 가능한 선택지는 아님.
          + 가능하다면, 코드 품질과 투명성을 높이는 좋은 방법.
     * 오픈 소스는 가능할 때 활용해야 할 중요한 전략.
     * 외부의 시선과 높은 기준은 프로젝트를 올바른 방향으로 유지하는 데 도움이 됨.

  의존성 건강 상태 점검

     * 의존성 변화의 문제:
          + 의존성은 시간이 지나면서 기대와 다르게 변화하거나 이탈할 수 있음.
          + 이를 방치하면:
               o 버그 발생
               o 빌드 실패
               o 기타 실망스러운 결과로 이어질 수 있음.
     * 정기적인 건강 점검 권장:
          + 주기적인 의존성 점검:
               o 사전에 문제를 발견할 기회를 제공.
               o 의존성의 새로운 기능을 발견해 코드 단순화나 다른 의존성 제거 가능성도 탐색.
          + 예방적 유지보수의 중요성:
               o 스스로 점검 시간을 계획하지 않으면, 결국 문제가 발생했을 때 강제로 시간을 할애해야 함.
     * 유지보수의 비유:
          + 기계공들의 격언:
               o ""유지보수 시간을 스스로 계획하라. 그렇지 않으면 장비가 그 시간을 계획할 것이다.""
     * 정기적인 의존성 점검은 장기적인 소프트웨어 안정성과 효율성을 위한 필수적인 활동.
     * 문제를 미리 해결하고, 긍정적인 변화를 발견하는 기회로 활용.

  주요 참고 도서

     * The Practice of Programming (Brian W. Kernighan, Rob Pike)
     * The Mythical Man-Month (Fred Brooks)
     * A Philosophy of Software Design (John Ousterhout)
     * Kill It with Fire: Manage Aging Computer Systems (Marianne Bellotti)

마지막으로

   장기적인 소프트웨어 개발을 위한 핵심 권장 사항:
     * 단순함 유지:
          + 단순하게, 그보다 더 단순하게! 필요할 때 복잡성을 추가할 수 있으므로 초기에 지나치게 복잡하게 만들지 말 것.
          + 단순함을 유지하려면 주기적인 리팩토링 및 코드 삭제가 필요.
     * 의존성에 대해 신중히 고민:
          + 의존성은 적을수록 좋음. 면밀히 검토하고 감사.
          + 1600개의 의존성을 감사할 수 없다면, 계획을 재고해야 함.
          + 트렌드나 유행(예: LinkedIn 기반 개발)을 따라가는 선택은 피할 것.
          + 정기적인 의존성 점검: 의존성의 상태를 지속적으로 모니터링.
     * 테스트, 테스트, 그리고 테스트:
          + 변화하는 의존성을 적시에 파악.
          + 리팩토링 시 자신감을 제공하며 단순성을 유지하는 데 도움.
     * 문서화:
          + 코드뿐 아니라 철학, 아이디어, ""왜 이렇게 했는지""에 대한 배경까지 문서화.
          + 미래의 팀원들에게 귀중한 자산이 됨.
     * 안정적인 팀 유지:
          + 장기적인 프로젝트 투자를 위해 장기 고용을 고려.
          + 팀 구성원이 오랜 기간 프로젝트에 헌신할 수 있도록 지원.
     * 오픈 소스 고려:
          + 가능하다면 오픈 소스를 통해 더 높은 코드 표준 유지.
     * 로그 및 성능 텔레메트리:
          + 문제를 조기에 파악하고 해결하는 데 중요한 역할.
     * 이 권장 사항들은 새롭지 않을 수 있지만, 경험 많은 개발자들이 강조하는 만큼 깊이 고민해볼 가치가 있음.

   안정성이 중요한 레이어와 속도가 중요한 레이어를 나누고 둘 사이의 관계를 어떻게 처리할지가 가장 중요한 엔지니어링적인 힘.
   토스가 안정성만 추구했다면, 여타 은행과 다를게 없겠죠.

   위험한건 스페이스 엑스도 그렇구요. 테슬라도 그렇구..

   이력서 주도 개발이 문제 일까요.

        Hacker News 의견

     * 도구 체인을 적극적으로 업데이트하는 것이 개발 과정의 중요한 부분임. 많은 회사들이 도구 체인 업그레이드를 우선순위에서 제외하여 보안 취약점과 같은 문제를 초래함. 최신 컴파일러나 빌드 시스템 릴리스마다 브랜치를 만들어 빌드 상태를 확인하고, 오류가 있으면 버그로 간주하여 즉시 처리함. 이는 코드베이스를 최신 언어 기능으로 점진적으로 현대화하고 리팩토링하는 데 도움을 줌.
     * 서드파티 의존성은 장기적으로 실망스러운 경우가 많음. 새로운 프로젝트에서는 서드파티 의존성을 사용하여 단기적으로 문제를 해결할 수 있지만, 장기적으로는 자체 코드로 대체하는 것이 좋음.
     * 의존성을 벤더링하고 코드 리뷰를 통해 관리하는 것이 필요함. 종종 서드파티 코드의 품질이 낮아 직접 작성하는 것이 더 나은 경우가 많음.
     * Qt, CMake, 현대 C++를 사용하여 장기적인 확장성을 목표로 하는 프로젝트를 진행 중임. 이러한 기술 스택은 지속적으로 기능과 개선을 제공함.
     * Emacs Lisp에서 작업하는 것이 신선한 경험이었음. 라이브러리가 업데이트되지 않아도 안정적으로 작동하는 것이 장점임. Gatsby와 Node를 사용한 경험은 업데이트 문제로 인해 어려움을 겪었음.
     * 단순한 코드를 작성하는 것이 중요함. 복잡한 코드는 필요할 때만 작성하고, 단순한 코드는 후회하지 않음.
     * 시스템과 코드의 문서화가 중요함. 소프트웨어 개발 경험이 많을수록 문서화의 중요성을 깨닫게 됨.
     * 테스트가 계획에서 중요한 역할을 함. NASA의 개발 방식을 참고하여 프로그래밍 오류를 찾는 데 주력해야 함. 의료 소프트웨어 개발에서는 해석을 피하고 동적 메모리 할당을 사용하지 않음.
     * 오래 지속되는 소프트웨어를 작성하는 가장 좋은 방법은 ""지루한"" 코드를 작성하는 것임. 의존성을 피하고 기본에 충실해야 함.
     * Python에서 의존성 문제로 어려움을 겪은 경험이 있음. 이는 ""DLL Hell""로 불리며, COM이 이를 해결하려 했으나 성공적이지 않았음.
     * 산업 소프트웨어에 적용되는 관행은 일반 소프트웨어에 적용하기에는 충분히 견고하지 않음. 엔지니어들은 위험을 완화하려고 하지만, 우리는 위험을 완화하는 데 중점을 둠.
"
"https://news.hada.io/topic?id=18450","과소평가된 Server-Sent Events (SSE) 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   과소평가된 Server-Sent Events (SSE) 기술

    서버 전송 이벤트(Server-Sent Events, SSE)는 과소평가됨

     * 대부분의 개발자는 WebSockets에 대해 알고 있지만, SSE는 더 간단하고 종종 간과되는 대안임.
     * SSE는 서버에서 클라이언트로의 일방향 통신 채널을 HTTP를 통해 설정함.
     * WebSockets의 양방향 연결과 달리, SSE는 서버에서 클라이언트로의 업데이트를 위한 열린 HTTP 연결을 유지함.

    SSE가 과소평가되는 이유

     * WebSocket의 인기: WebSockets의 전이중 통신 기능이 SSE의 간단한 접근 방식을 가림.
     * 제한 사항에 대한 인식: 일방향 특성이 제한적으로 보일 수 있지만, 많은 사용 사례에 충분함.

    SSE의 주요 강점

    1. 구현의 간단함
          + 표준 HTTP 프로토콜을 활용하여 WebSocket 연결 관리의 복잡성을 제거함.
    2. 인프라 호환성
          + 기존 HTTP 인프라와 원활하게 작동함:
               o 로드 밸런서
               o 프록시
               o 방화벽
               o 표준 HTTP 서버
    3. 자원 효율성
          + WebSockets에 비해 낮은 자원 소비:
               o 일방향 특성
               o 표준 HTTP 연결 사용
               o 지속적인 소켓 유지 관리 불필요
    4. 자동 재연결
          + 브라우저의 내장 지원:
               o 연결 중단 처리
               o 자동 재연결 시도
               o 탄력적인 실시간 경험
    5. 명확한 의미론
          + 일방향 통신 패턴이 다음을 보장함:
               o 명확한 관심사 분리
               o 직관적인 데이터 흐름
               o 단순화된 애플리케이션 로직

    실용적인 응용

     * 실시간 뉴스 피드 및 소셜 업데이트
     * 주식 시세 및 금융 데이터
     * 진행 바 및 작업 모니터링
     * 서버 로그 스트리밍
     * 협업 편집(업데이트용)
     * 게임 리더보드
     * 위치 추적 시스템

    구현 예시

      서버 측 (Flask)

     * /stream 경로가 SSE 연결을 처리함.
     * generate_random_data()가 포맷된 이벤트를 지속적으로 생성함.
     * text/event-stream MIME 타입이 SSE 프로토콜을 신호함.
     * stream_with_context가 Flask 애플리케이션 컨텍스트를 유지함.

      클라이언트 측 (JavaScript)

     * EventSource 객체가 SSE 연결을 관리함.
     * onmessage 핸들러가 수신된 이벤트를 처리함.
     * onerror가 연결 문제를 처리함.
     * 브라우저가 자동 재연결을 처리함.

    제한 사항 및 고려사항

    1. 일방향 통신
          + 서버에서 클라이언트로만 가능
          + 클라이언트에서 서버로의 통신은 별도의 HTTP 요청 필요
    2. 브라우저 지원
          + 최신 브라우저에서 잘 지원됨
          + 구형 브라우저에서는 폴리필 필요할 수 있음
    3. 데이터 형식
          + 주로 텍스트 기반 데이터 지원
          + 바이너리 데이터는 인코딩 필요 (예: Base64)

    모범 사례

     * 오류 처리
          + eventSource.onerror로 연결 오류를 처리함.
     * 연결 관리
          + 완료 시 연결을 정리함.
     * 재연결 전략
          + 최대 재시도 횟수를 설정하고 재연결 로직을 구현함.

    실제 예시: ChatGPT의 구현

     * 현대 언어 학습 모델(LLM)은 SSE를 사용하여 스트리밍 응답을 제공함.
     * 주요 패턴:
          + content-type: text/event-stream 헤더 반환
          + \r\n\r\n로 구분된 데이터 블록 스트리밍

    결론

     * SSE는 실시간 서버-클라이언트 통신을 위한 우아한 솔루션을 제공함.
     * 간단함, 효율성, 기존 인프라와의 통합이 많은 애플리케이션에 적합한 선택임.
     * WebSockets는 양방향 통신에 여전히 유용하지만, SSE는 일방향 데이터 스트리밍 시나리오에 더 집중되고 적절한 솔루션을 제공함.

   OpenAI를 REST로 구현하면서 SSE를 실제로 사용했습니다.
   단방향 통신이 필요한 상황에는 꼭 채택 할 생각입니다.

   SSE 는 보안장비(웹방화벽이나 지능형 보안) 막히지는 않는데 개행 문자 단위로 스트리밍은 안되는 경우를 자주 만납니다. (온프레미스) 중간에서 응답을 다 받았다가 한 방에 보내주는 식으로요.

   OpenAPI가 SSE를 지원하지 않는게 참 아쉽습니다

   NAT 환경에서 양방향 통신을 구축하기 정말 좋은 방법이조.

        Hacker News 의견

     * Mercure는 SSE 기반의 오픈 프로토콜로, WebSockets 기반 솔루션의 대체물로 사용됨. Mercure는 클라이언트와의 지속적인 SSE 연결을 유지하는 독립적인 허브를 중심으로 작동하며, 서버 앱과 클라이언트가 사용할 수 있는 간단한 HTTP API를 제공함. Mercure는 JWT 기반의 인증 메커니즘, 여러 주제에 대한 단일 연결 구독, 이벤트 기록, 네트워크 문제 발생 시 자동 상태 조정 등의 기능을 추가함
     * SSE의 큰 단점은 HTTP/2가 아닌 경우 최대 연결 수 제한이 있다는 점임. 이는 브라우저당 제한이 낮아 여러 탭을 열 때 문제가 될 수 있음
     * Doppler의 CLI에서 SSE를 사용하여 자동 재시작 기능을 구현했음. SSE를 통해 서버에서 이벤트를 수신하고 최신 비밀 정보를 가져와 애플리케이션 프로세스에 주입함. WebSockets 대신 SSE를 선택한 이유는 Golang 애플리케이션에 추가 종속성을 가져오지 않기 위함임. HTTP 타임아웃 문제를 해결하기 위해 간헐적인 ""ping"" 이벤트를 전송해야 했음
     * SSE의 단방향 특성은 제한적으로 보일 수 있지만 많은 경우에 충분함. SSE의 주요 제한 사항은 텍스트 전용이라는 점과 HTTP/1.1에서의 브라우저 연결 제한임. HTTP/2 이상을 사용하면 연결 제한은 문제가 되지 않음. 성능이 중요한 경우 fetch와 ReadableStream을 사용하여 더 유연하고 오버헤드가 적은 솔루션을 선택할 수 있음
     * SSE의 단순성 때문에 많은 개발자가 적절한 구현을 사용하지 않고 데이터 청크를 정규 표현식으로 파싱하는 경우가 많음. 이는 SSE가 스트림에서 주석을 지원하기 때문에 문제가 될 수 있음
     * Data-star.dev는 SSE를 통해 하이퍼미디어 응답을 스트리밍하는 데 중점을 둔 프론트엔드 라이브러리임. Go와 NATS를 백엔드 기술로 사용하여 개발되었으며, 모든 SSE 구현과 호환됨
     * SSE는 과소평가되지 않음. 실제로 Open AI에서 스트리밍 완료에 사용되고 있음. ReactJS 코드베이스에서 SSE를 구현하는 것은 어려웠으며, 당시 Axios가 이를 지원하지 않아 네이티브 fetch를 사용해야 했음
     * 웹 프로젝트에서 SSE를 구현했을 때, 6개 이상의 탭을 열면 웹사이트가 작동을 멈췄음. Firefox는 SSE 연결을 6개의 호스트 최대 연결 제한에 포함시키며, 이로 인해 추가 요청이 차단됨
     * SSE는 잘 작동할 때 과소평가됨. 현재 작업 중인 프로젝트에서 인증 문제와 터널의 keep-alive 문제로 인해 어려움을 겪고 있음. 이는 프로토콜의 문제가 아니며, 해결책을 찾는 것이 어려움
"
"https://news.hada.io/topic?id=18416","Xerox, Lexmark 인수 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Xerox, Lexmark 인수 발표

     * Xerox Holdings Corporation이 2024년 12월 23일, Lexmark International을 15억 달러에 인수하기로 합의했음
     * 이번 인수는 Xerox의 프린트 포트폴리오를 강화하고, 하이브리드 업무 환경에 적합한 글로벌 프린트 및 관리형 프린트 서비스 사업을 확장하기 위한 것임
     * Lexmark는 혁신적인 이미징 솔루션과 기술을 제공하는 선도 기업으로, 최고 수준의 프린터와 다기능 프린터 라인업을 보유하고 있음
     * Xerox의 ConnectKey® 기술 및 고급 프린트 및 디지털 서비스와 결합하여, 고객과 파트너에게 더 큰 가치를 제공할 것으로 기대됨
     * 이번 거래는 규제 승인 및 기타 마감 조건을 거쳐 2025년 하반기에 완료될 예정이며, 그때까지 두 회사는 독립적으로 운영을 유지할 것임

합병의 전략적 이유

     * Xerox와 Lexmark는 상호 보완적인 운영을 가지고 있으며, 프린트 장비 및 관리 서비스 제공자로서 전 세계 모든 지역과 고객 유형을 커버할 수 있는 포괄적인 포트폴리오를 형성함
     * Lexmark는 A4 컬러 프린트 및 공급 시장에서 리더로, A3 장비 카테고리 내 OEM 플랫폼 확장 기회를 가짐
     * 합병 후 Xerox는 더 포괄적인 제품 포트폴리오를 통해 고객에게 가치를 제공하고, 디지털 서비스 및 IT 솔루션의 침투를 증가시킬 수 있는 기회를 가짐

거래 세부 사항

     * Xerox는 이번 인수를 현금과 부채 조달을 통해 자금을 마련할 계획이며, 연간 배당금을 주당 1달러에서 50센트로 줄여 부채 감소에 활용할 예정임
     * 이번 인수로 Xerox는 A4 컬러 시장에서의 경쟁력을 강화하고, APAC 지역을 포함한 글로벌 시장에서의 입지를 확대할 것으로 기대됨
     * 또한, Xerox는 이번 거래를 통해 2억 달러 이상의 비용 시너지를 2년 내에 실현할 것으로 예상하고 있음

시너지 효과 및 성장 기회

     * Xerox와 Lexmark의 결합은 제조, 유통, 프린트 장비 및 관리형 프린트 서비스 제공을 아우르는 수직 통합을 이루어낼 것임
     * 이를 통해 모든 지역과 고객 유형을 대상으로 한 균형 잡힌 프린트 및 프린트 서비스 포트폴리오를 제공하게 될 것임
     * 또한, 디지털 서비스 및 IT 솔루션 분야에서의 성장 기회를 확대하여, 고객에게 더욱 포괄적인 제품과 서비스를 제공할 수 있을 것으로 기대됨

향후 전망

     * Xerox는 이번 인수를 통해 장기적인 수익성 성장과 고객 서비스 향상을 도모하며, 프린트 산업의 발전에 기여할 계획임
     * Lexmark의 Allen Waugerman CEO는 Xerox와의 결합을 통해 더 넓은 시장에 도달하고, 강화된 포트폴리오를 제공할 수 있을 것이라고 언급함
     * 두 회사는 공유된 가치와 비전을 바탕으로 운영 효율성을 높이고, 고객과의 비즈니스 관계를 더욱 강화할 것으로 기대됨

Xerox와 Lexmark

     * Xerox는 100년 이상 사무 및 생산 프린트 기술 분야에서 리더십을 발휘해 왔으며, 소프트웨어 및 서비스로 확장하여 하이브리드 업무 환경을 지원함
     * Lexmark는 클라우드 기반 이미지 및 IoT 기술을 통해 고객이 비즈니스 성과를 빠르게 실현할 수 있도록 지원함

        Hacker News 의견

     * Xerox와 Lexmark의 전략적 적합성은 두 회사의 운영이 상호 보완적임을 의미하며, Xerox는 단기적으로 Lexmark를 그대로 운영할 가능성이 높음. 장기적으로는 Lexmark가 이미 확립된 브랜드이며 Xerox의 기존 파트너/공급업체였고, Xerox가 집중하지 않았던 IoT, WFA와 같은 성장 분야에 집중하고 있기 때문에 Xerox의 자원을 통해 Lexmark 측을 성장시킬 가능성이 큼
          + Broadcom이 Lexmark를 인수할 경우, Lexmark 인력의 70%를 줄이고 상위 10%의 사용자로부터 더 많은 수익을 창출하기 위해 구독 모델을 도입할 가능성이 있음
     * Lexmark는 클라우드 기반의 이미지 및 IoT 기술을 개발하여 전 세계 고객이 빠르게 비즈니스 성과를 실현할 수 있도록 지원함. 검증된 기술과 깊은 산업 전문성을 결합하여 비즈니스 변혁을 가속화하고, 정보를 통찰로, 데이터를 결정으로, 분석을 실행으로 전환함
     * Lexmark는 한때 IBM의 프린터 및 키보드 사업을 분사하여 Model M 키보드를 공급했으며, 이후 Unicomp으로 분사하여 여전히 Lexington에서 제조 중임. Model M 키보드는 기계적 느낌이 뛰어나며, 무거워서 책상 위에서 쉽게 미끄러지지 않음
     * Lexmark 프린터를 수리했던 경험에 따르면, ""PC load letter"" 문제로 인해 다양한 이유로 작동이 중단되었음. 대부분의 경우 먼지로 인해 트레이가 문제를 일으키거나 드럼을 두드리면 해결되었음. HP 프린터는 ""PC load letter"" 문제로 더 나쁜 평판을 가지고 있음
     * Lexmark의 드라이버 없는 IPP Everywhere 지원 덕분에 가장 간편한 프린터를 소유하게 되었음. Xerox는 IPP Everywhere 장치를 보유하고 있지 않기 때문에 Lexmark의 종말이 아니기를 바람
     * IBM에서 분사된 후 30년 만에 Xerox에 합류하게 되었음. Xerox의 최근 20년간의 행보를 따라가지 않아 이번 인수가 얼마나 나쁠지 알 수 없음
     * 이러한 브랜드가 여전히 존재하는지 몰랐음. 제목이 ""East India Company가 Silk Road를 인수""하는 것처럼 느껴짐
     * Lexmark 직원들에게는 불행한 소식임
     * 30년 이상 된 프린터 회사가 아닌 곳이 있는지 궁금함. 사람들이 실제로 좋아하는 프린터를 만드는 스타트업이 없는 이유가 무엇인지 궁금함
     * 이 헤드라인은 마치 1996년에 있는 것처럼 느껴짐
"
"https://news.hada.io/topic?id=18399","Bloom 필터로 10배 빨라진 SQLite ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Bloom 필터로 10배 빨라진 SQLite

     * SQLite는 디스크에 B-트리 구조로 저장되는 행 기반 저장소로, VDBE라는 가상 머신을 사용하여 쿼리를 실행함. 플랫폼에 구애받지 않고 단일 스레드로 거의 모든 환경에서 실행 가능함
     * 일반적인 용도의 데이터베이스이지만 OLTP 작업에 뛰어남. 2015년 버팔로 대학 연구진은 대부분의 쿼리가 간단한 키-값 조회와 복잡한 OLAP 쿼리임을 발견함
     * 위스콘신-매디슨 대학 연구진은 분석 쿼리를 더 빠르게 만들기 위해 노력함. DuckDB와 Star Schema Benchmark(SSB)를 사용하여 성능을 비교함

  원인

     * SQLite가 느린 이유를 파악하기 위해 VDBE_PROFILE 옵션을 사용하여 VDBE의 각 명령어가 소모하는 CPU 사이클을 측정함.
     * SeekRowID와 Column이라는 두 개의 opcode가 주요 원인으로 밝혀짐.

  데이터베이스 조인

     * 데이터베이스가 조인을 구현하는 방법에는 중첩 루프 조인, 해시 조인, 정렬-병합 조인이 있음.
     * SQLite는 가장 간단한 ""중첩 루프 조인""을 사용함. 이는 B-트리 탐색과 유사하여 비용이 많이 듦.

  조인 최적화의 중요성

     * 조인 연산에서 테이블의 순서가 중요함. 순서를 바꾸면 연산 횟수를 크게 줄일 수 있음. 이는 NP-난해 문제임.
     * 중첩 루프 조인보다 더 나은 두 가지 조인 알고리듬이 있지만, 해시 조인은 메모리를 많이 소모하며 SQLite는 메모리 제약 환경에서 주로 실행됨.
     * 연구진은 Bloom 필터를 사용하여 공간 효율성을 높이고 CPU 캐시 라인에 맞도록 함. Filter와 FilterAdd라는 두 개의 opcode를 추가함.

  결과

     * 최적화 후 CPU 사이클 분석에서 큰 블루 바가 거의 사라짐.
     * SQLite는 7배에서 10배 더 빨라짐. 이 연구 결과는 SQLite v3.38.0에 적용됨.
     * Bloom 필터는 최소한의 메모리 오버헤드로 SQLite의 간단한 구현과 잘 맞고 기존 쿼리 엔진 내에서 작동함

   지금 버전을 확인해보니 지 시스템은 3.42.0을 사용하고 있네요. 현재기준 최신은 3.47.2 입니다

   지금 사용중인 SQLite 버전을 확인 해 봐야겠군요.

   사실 이것보다 openpyxl을 사용해서 엑셀파일을 만들어내고있는데, 시간이 많이 걸려서 다른 라이브러리가 있을까 찾아보기는 해야합니다.

   프로파일링을 해보시는게 좋지 않을까요
"
"https://news.hada.io/topic?id=18474","스파이 장비 적재된 케이블 절단 탱커 핀란드에 의해 압류","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    스파이 장비 적재된 케이블 절단 탱커 핀란드에 의해 압류

   The provided content does not contain any article or relevant information to summarize. It appears to be a message about updating a browser and a reference to Cloudflare.

        Hacker News 의견

     * 러시아나 그 동맹국이 EU의 중요한 인프라를 또다시 파괴한 것이라는 의견이 있음. 핀란드가 이를 조사하고 막는 것이 기쁘지만, 유럽 주요 도시를 위협하는 적에 대해 진지하게 대응해야 한다는 주장.
          + 스파이 장비가 있었다는 것은 당연한 것으로 보임. 이 이야기가 Lloydslist와 Breitbart에서만 다루어지고 있다는 점이 흥미로움.
          + 기술 전문가들이 전쟁 선동의 증폭기로 사용되고 있다는 의견이 있음.
          + 탱커가 케이블 수리보다 훨씬 비싸지 않냐는 질문. 러시아의 GDP가 EU보다 낮다는 점을 지적.
          + 상선에 비정상적으로 고급 장비가 탑재되어 있었고, 이는 선박의 발전기에서 더 많은 전력을 소모하여 반복적인 정전이 발생했다는 정보가 있음.
          + 러시아의 이런 행동이 정말 사실이라면 매우 서투른 행동이라는 의견.
          + 선박을 압수하고, 승무원 모두를 간첩 혐의로 기소하고, 최대 형량을 부과하며, 러시아가 NATO 영토를 통과하는 모든 해상 통로를 폐쇄해야 한다는 주장.
          + 서방이 강력하게 대응하지 않으면 푸틴은 멈추지 않을 것이라는 의견.
          + 제목에 'earlier'라는 단어가 필요하다는 지적. 그렇지 않으면 같은 선박을 사용한 별개의 임무가 혼동될 수 있음.
          + 추가 정보로, 중국이 발트해에 일부 케이블을 소유하고 있으며, 최근 사건 중 하나의 케이블이 절단되었다는 정보가 있음.
          + 이런 행동의 목적이 무엇인지에 대한 의문. 이는 매우 은밀하지 않으며 쉽게 발각되었음.
          + 손상은 성가시지만 심해 케이블은 때때로 문제가 발생하며, 이는 치명적인 다운타임을 초래하거나 수리 불가능한 손상이 아님.
          + 러시아가 경고를 주기 위한 것인지, 노출된 인프라가 많으니 계속해서 허세를 부리면 실제로 공격할 수 있다는 경고인지에 대한 의문.
          + 이것이 파괴 행위가 아니라 케이블에 감시 장비를 설치하려다 실패한 시도일 수도 있다는 의견.
          + 모든 케이블에 대해 선박을 유지해야 한다는 주장. 이는 문제를 빠르게 해결할 수 있을 것이라는 의견.
"
"https://news.hada.io/topic?id=18512","존 그루버(DF)의 OpenAI 이사회 발표 요약: "상상할 수 없는 막대한 자금 필요"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           존 그루버(DF)의 OpenAI 이사회 발표 요약: ""상상할 수 없는 막대한 자금 필요""

     * AI 개발에 주요 기업들이 수백억 달러를 투자하고 있으며, OpenAI도 지속적인 목표 추구를 위해서는 예상보다 더 많은 자본이 필요하다고 강조
     * 투자자들은 OpenAI에 관심이 있지만, 이 정도 규모의 자본에는 전통적인 주식 구조가 필요하다고 언급함
     * OpenAI는 현재 AI 챗봇 분야에서 가장 뛰어난 사용자 경험을 제공
     * 그러나 이 분야에는 기술적 진입 장벽이 없어, OpenAI는 투자 거품의 중심에 있음
     * OpenAI의 상황은 1990년대 인터넷 혁명의 중심이었던 Netscape와 유사:
          + Netscape는 웹 혁명을 선도했지만, 방어 가능한 독점 기반을 구축하지 못함
          + OpenAI 역시 생성형 AI 기술이 중요한 미래를 가지고 있지만, 이는 궁극적으로 일반화된 기술 계층으로 전락할 가능성이 있음
     * Netscape는 Mosaic이라는 비영리 브라우저 프로젝트에서 출발해 빠르게 상업화
          + OpenAI도 비영리에서 영리 회사로 전환하며 유사한 궤적을 보임
     * 주요 차이점
          + Netscape는 Mosaic 출시 2.5년 만에 IPO로 투자 유치를 완료
          + OpenAI는 여전히 민간 자본에 의존하며, 이미 Microsoft로부터 130억 달러를 포함해 수백억 달러를 유치
     * 경고
          + 이사회가 또다시 ""예상보다 많은 자본이 필요하다""고 발표한 것은 지속적인 투자 유치가 필요한 구조적 문제를 암시
          + ""무한한 투자로 선두를 유지하겠다""는 접근은 Ponzi Scheme처럼 보일 위험이 있음

        Hacker News 의견

     * OpenAI는 현재 투자 거품의 중심에 있으며, 기술적 방어막이 없는 상태임. 이는 1990년대 인터넷 혁명 당시 Netscape와 유사한 상황임. OpenAI는 방어막을 구축할 기회를 가지고 있지만, 시간이 제한적임
          + ""더 많은 돈을 쓰려고 하는 것""은 방어막이 될 수 없으며, 미국과 중국의 대형 기술 기업들은 항상 OpenAI보다 더 많은 자금을 투입할 수 있음
     * OpenAI의 엔지니어들은 뛰어나지만, 경영진의 전략은 상상력이 부족함. 대규모 자원을 목표 달성을 위해 사용하는 것은 어느 산업에서나 가능하지만, OpenAI가 왜 특별히 자금을 받아야 하는지에 대한 설득력이 부족함
          + 비밀 테스트 모델을 시장 경쟁자로 광고하는 것은 자금 지원의 이유가 될 수 없음
     * LLMs(대형 언어 모델)는 비용이 많이 들며, OpenAI가 비용을 줄이지 못한다면 LLMs의 미래는 밝지 않음. OpenAI가 쇠퇴하면 다른 LLMs 기업들의 가치도 하락할 것임
          + 장기적으로 LLMs는 상품화될 것이며, 진정한 가치는 LLMs를 활용하여 가치를 창출하는 데 있을 것임
     * Netscape에 대한 투자로 많은 수익을 얻은 사례가 있음. IPO 당시 투자자들은 큰 수익을 얻었으며, AOL 인수 후에는 가치가 크게 상승했음
     * AI 발전은 강력한 데이터에 의해 주도되며, 인간-AI 상호작용 데이터를 가장 많이 확보하는 기업이 큰 방어막을 가질 것임
     * OpenAI가 시장을 지배할 것이라는 의견에 반대함. 이는 소셜 네트워크와 같은 현상과 관련이 있으며, OpenAI의 사업 모델은 이러한 특징을 가지고 있지 않음
     * Softbank와의 '꿈의 거래'가 아직 이루어지지 않은 이유를 이해하지 못함
     * 작은 재산을 만들기 위해서는 큰 재산으로 시작해야 한다는 말을 들은 적이 있음
     * OpenAI가 요청한 자본을 제공한 후 성공을 어떻게 정의할 것인지에 대한 의문이 있음
"
"https://news.hada.io/topic?id=18437","JRuby 와 JBang : Ruby와 Java의 강력한 조합","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   JRuby 와 JBang : Ruby와 Java의 강력한 조합

     * JRuby는 Ruby의 생산성과 JVM의 성능을 결합한 기술이며, JBang은 간단한 의존성 관리와 실행 환경을 제공
          + 두 도구를 결합하여 Ruby와 Java 라이브러리를 통합 활용 가능
          + JBang: Java/Kotlin/Groovy 프로그램을 간단히 실행하고 의존성을 관리할 수 있는 도구
          + JRuby: JVM 위에서 동작하는 Ruby 구현으로, Ruby 생산성과 JVM 성능을 결합
     * JRuby에서 Java 라이브러리를 사용하는 데 필요한 의존성 관리(Gradle/Maven 등)는 복잡하고 어려움
          + JBang을 활용해 의존성을 간단히 관리하고, JRuby 스크립트를 실행하는 방식을 실험해보기로 함
     * Docker 기반 환경 설정
          + Amazon Corretto(JDK) 기반의 Docker 이미지를 사용
          + JRuby와 JBang을 다운로드 및 설치하여 PATH에 추가
          + Dockerfile을 통해 Ruby Gem과 Java 라이브러리를 모두 포함
     * 간단한 RunJRuby.java를 작성: JBang을 통해 Java 의존성을 관리하고 JRuby 스크립트를 실행
          + ProcessBuilder로 JRuby 실행 환경 구성
          + CLASSPATH 설정을 통해 Java 의존성을 JRuby에 전달
     * Javalin(Java 기반 웹 프레임워크)을 JRuby와 함께 사용하여 REST API 구축
          + JWT 인증 추가, SQLite DB와의 통합으로 CRUD API 구현
          + Java에서는 HTTP, DB 작업 등 고성능 라이브러리 활용, Ruby에서는 비즈니스 로직 처리
     * 성능 테스트 결과
          + *Apache Benchmark(ab) 도구로 1500개 요청(동시 25개)의 응답 시간 측정 테스트 실행
          + 결과: 95% 요청이 10ms 이내에 처리됨
          + 최신 Javalin 버전과 Virtual Threads를 사용해 높은 성능 제공
     * Ruby와 Java의 장점을 결합하여 생산성과 성능 모두를 충족
     * GitHub Repo : jbang-jruby-javalin 참고

   Java+Groovy 그 치명적인 Memory leak
   JVM 위에서 스크립트를 실행하는 경우 특정 조건에서 memory leak이 발생하는 사례를 봤었는데 jruby는 어떤가 궁금하네요
"
"https://news.hada.io/topic?id=18443","FixBrowser - 처음부터 새로 개발된 경량 웹 브라우저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   FixBrowser - 처음부터 새로 개발된 경량 웹 브라우저

     * 경량 웹 브라우저로, 자바스크립트를 지원하지 않아 빠르고 자원 소모가 적음
     * 프라이버시를 중시하여 화이트리스트 접근 방식을 사용하여 불필요한 추적을 방지
     * 현재 알파 단계로, 기본적인 기능은 갖추었으나 추가 작업이 필요
     * FixProxy
          + FixProxy는 FixBrowser의 백엔드 부분을 사용하여 일반 웹 브라우저와 함께 사용할 수 있는 안전한 웹 탐색 방법을 제공함.
          + 수년간 주로 사용해온 결과 안정적임.
     * Windows 및 Linux용 FixBrowser 다운로드 가능하며 소스 코드도 제공됨
     * 향후 Linux GTK3/4, Haiku, MacOS 지원 계획이 있으며, Windows 95/98/Me와 모바일(iOS/Android) 지원 계획도 있음
     * 추가 기능 계획
          + CEF 통합: 선택된 웹사이트나 탭에서 전체 브라우저 경험 제공
          + 비디오 재생 지원: 태그 및 YouTube 비디오 재생 지원
          + 확장 지원: 네이티브 코드 사용을 포함한 확장 지원
          + 캡차 및 기타 게이트키퍼 지원: 기부로 운영되는 서비스로 해결 예정
          + FixProxy 개선: 더 많은 기능으로 개선 계획

   일단 리엑트 뷰 스벨트로 된 사이트는 못보겠군

   홈페이지가 옛날 브라우저를 위해서 http도 지원하는 것이 인상적이네요.
   얼마전에 모자익을 빌드해서 돌려봤는데…
   HTML, CSS, JS 이전에 프로토콜에서 다 막혀서 좌절했던 기억이…

   자바스크립트를 지원하지 “않아”…
   볼 수 있는 페이지가 없음 lol

   모바일 버전이 나오면 e-ink 제품으로 웹문서 보기 좋을 거 같네요

   한번 여행갔다가 데이터 없어서 느려지고 나서는 text web browser 는 항상 필수로 가지고 있어서 이런 앱 환영합니다

   FE : 으아아아악

        Hacker News 의견

     * Opera와 Microsoft가 엔진을 포기하고 Blink를 채택하고, Mozilla가 Servo를 포기한 이후로 오픈 웹의 미래에 대해 걱정이 많았음. 프로젝트를 진행한 것에 대해 칭찬함
          + HTTP 코드에서 ETags를 지원하지 않는 점을 지적하며, ETags는 클라이언트 추적에 사용될 수 있지만 캐싱에도 유용하므로 신뢰할 수 있는 웹사이트에 대해 선택적으로 지원할 것을 제안함
          + FixBrowser/FixProxy가 Chrome, Firefox, Safari와 함께 파이 차트에 나타날 정도로 중요해지지 않는 한, 개별 사용자는 쉽게 지문이 남을 수 있음
     * PayPal의 문제로 기부를 할 수 없었음
          + JS를 지원하지 않는다는 점은 괜찮다고 생각함. 브라우저를 처음부터 만든다면 자신도 그렇게 할 것임
          + 다양한 스크립팅 엔진을 플러그인으로 사용할 수 있는 기능을 보고 싶음. 예를 들어 V8, SpiderMonkey, Python 등을 플러그인으로 사용할 수 있다면 HTML, CSS, Python으로 구성된 프론트엔드 스택을 만들 수 있을 것임
     * FixBrowser는 FixScript로 작성되었음
          + FixScript는 메모리 안전, 스레드 안전, 정수 오버플로우 안전 언어로, 보안 문제를 크게 줄임
          + C 컴파일러만 있으면 매우 이식성이 좋으며, 스레드가 없는 환경에서도 스레드를 에뮬레이트할 수 있음
     * 중앙 집중화된 인터넷을 예측하는 접근 방식으로 보임
          + 이 프로젝트는 많은 사이트에서 작동하지만, YouTube나 Netflix에서는 작동하지 않음
          + 이 프로젝트가 성공적이거나 비실용적이기를 바람
     * 프로젝트에 대해 감사하며, 시도해볼 것을 기대함
          + NLnet에서 자금을 신청할 수 있을지 궁금함
     * SSR 백엔드와 결합하여 Electron과 같은 데스크톱 앱으로 패키징하면 유용할 것임
          + Electron의 가장 큰 불만은 메모리 사용량이었음. 키오스크에도 잘 작동할 수 있음
     * 새로운 Dillo와 같다고 생각하며, 프로젝트에 감사함
          + 테스트 스위트에 추가할 것임
     * 프로젝트의 접근 방식, 언어, 라이선스 등이 매우 주관적이며, 웹의 상태와 다른 사용자의 기본 기대를 무시하는 것 같음
          + 프로젝트에 행운을 빌며, 최종 결과를 보고 싶음
          + 기부를 요청하는 만큼, 기부 대상에 대한 정보와 코드 기여가 가능한 공개 저장소가 필요함
     * 제품을 공개한 용기에 감사하며, 평가 후 건설적인 의견을 제시할 것을 제안함
     * uzbl을 그리워함
"
"https://news.hada.io/topic?id=18429","실시간 ISS 소변 탱크 상태를 보여주는 macOS 메뉴 바 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  실시간 ISS 소변 탱크 상태를 보여주는 macOS 메뉴 바 앱

     * pISSStream
          + pISSStream은 macOS 메뉴 바 앱으로, 국제우주정거장(ISS)의 소변 탱크가 실시간으로 얼마나 차 있는지를 보여줌
          + 다운로드는 한정 수량으로 제공됨
     * Bugs
          + Swift와 macOS 앱 개발의 첫 시도로, 완벽한 코딩 관행을 따르지 않았으며 작은 문제에도 쉽게 오류가 발생할 수 있음
          + 신호가 끊겼을 때 알림을 제공하지 않음
          + 오래된 데이터에 대해 무관심함
          + 오류 처리를 하지 않음
     * Errata
          + 데이터 스트림은 ISS Mimic에서 발견했으며, 소변 탱크의 상태 외에도 더 흥미로운 통계 정보를 제공함
          + 추가적인 통계 정보는 앱에 추가하지 않을 예정임

        Hacker News 의견

     * ISS Mimic 프로젝트의 데이터 스트림은 단순히 탱크의 상태를 넘어서 더 많은 흥미로운 통계를 제공함
          + 프로젝트의 비목표를 명확히 전달하는 훌륭한 오픈 소스 커뮤니케이션 사례임
          + 이 프로젝트를 통해 많은 것을 배울 수 있음
     * Bluesky 봇을 통해 HN 스토리를 팔로우하며 익숙한 Github 링크를 발견함
          + 5일 전에 Show HN 스토리를 만들었지만, 그 게시물이 아님을 알게 됨
          + 지난 15년 동안 가장 인기 있는 오픈 소스 프로젝트가 되어 기쁨
          + Swift로 간단한 첫 프로젝트를 시도하면서 ISS Mimic을 발견하고 작업하게 됨
     * NASA의 기술 리드 및 비행 컨트롤러로서 Isslive의 일부로 이 텔레메트리를 공개함
          + 12년 후 PissStream이 등장함
          + 라이브 스트림 서버가 잘 활용되고 있어 기쁨
     * 웹 포트가 제공됨
          + Swift GitHub 저장소를 Gemini 2.0에 붙여 웹 페이지로 포팅함
     * 스트림 처리의 좋은 예시임
          + 변수 이름이 적절하게 사용됨
          + pissYellowLight와 pissYellowDark라는 색상 변수가 있음
     * 해당 정보가 공개된 것인지 몰랐음
          + 승무원이 화장실을 사용할 때마다 알림을 보낼 수 있음
          + 우주에서는 사생활이 문제가 되지 않는 듯함
          + ""메리 크리스마스, 화장실이 가득 찼음""이라는 시기에 적절함
"
"https://news.hada.io/topic?id=18482","캐주얼 시청 - Netflix의 외관이 그런 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      캐주얼 시청 - Netflix의 외관이 그런 이유

Netflix와 스트리밍의 문제점과 변화

  스트리밍 시대의 시작과 Netflix의 성공 전략

    초기의 Netflix: 고객 불만을 기회로 전환

     * 시작 계기: 1997년 Reed Hastings가 Blockbuster의 연체료 정책에 불만을 품으며 새로운 비즈니스 모델을 구상
     * 전환점: 1999년 고정 월정액 기반 DVD 대여 모델 도입
          + 고객이 DVD를 반납할 때까지 기다려도 추가 비용 없음
          + 고객의 가정이 Netflix의 DVD 창고 역할을 하도록 유도
          + Blockbuster의 ""불만 관리"" 모델과 대조적으로 ""무의식적 충성도"" 유도

    스트리밍으로의 진화

     * 2007년, 스트리밍 플랫폼 Watch Now 출시
          + 초기에는 1,000개 제한된 타이틀만 제공
          + 빠르게 성장하며 TV, 스마트폰 등 다양한 기기로 확장
          + 전통적인 TV보다 저렴한 비용과 더 큰 유연성 제공
          + 광고 없음, 월 구독료 기반 모델

  Netflix의 확장과 문화적 변화

    빅데이터와 알고리즘 활용

     * 고객 데이터 분석을 통해 추천 알고리즘 개선
     * 초기 히트작: 2013년 House of Cards
          + 고객 데이터에 기반한 제작 및 출시
          + ""비즈니스 모델""로서의 ""몰아보기(binge-watching)"" 개념 정착

    독립 영화와 다큐멘터리의 부상과 쇠퇴

     * 2010년대 중반: 독립 영화와 다큐멘터리 제작 및 배급 지원
          + Okja, Happy as Lazzaro, Icarus 같은 영화가 주목받음
     * 문제:
          + 대규모 글로벌 배급권 구매와 ""cost-plus"" 모델 도입으로 제작 과정 간소화
          + 그러나 독창성과 새로운 아티스트 발굴 부족
          + 주요 작품들은 플랫폼에서 묻히거나 소비자 관심을 끌지 못함

  Netflix가 영화 산업에 미친 영향

    ""일반 Netflix 영화(TNM)""의 등장

     * 알고리즘으로 설계된 듯한 표준화된 콘텐츠
          + 검색 가능한 키워드와 뻔한 스토리
          + 저질 CGI, 과도한 편집, 비현실적인 대사
     * 영화 제작 과정에서 창의성보다 비용 효율성에 집중

    스트리밍 모델의 단점

     * 플랫폼 내 영화들은 관객의 주의를 끌지 못함
     * ""Play Something"" 기능:
          + 사용자가 아무 콘텐츠나 틀도록 유도
          + 영화의 품질이나 기억에 남는 경험보다는 단순 소비를 지향

  현재의 문제점: 성공의 의미 상실

    관객과의 단절

     * 관객의 자발적인 선택이 아닌 자동 재생과 알고리즘에 의존
     * 콘텐츠 소비 방식이 분산되어 스트리밍 영화의 진정한 성공을 측정하기 어려움
          + 예: Netflix의 시청 기록은 2분 이상 시청하면 ""조회""로 집계

    독립성과 창의성의 쇠퇴

     * 독립 영화와 새로운 감독의 발굴 부족
     * 거대 예산 프로젝트에 집중하며 문화적 영향력 약화
          + Ryan Reynolds, Ryan Gosling 같은 스타 출연작도 기억에 남지 않음

    기존 케이블 모델과의 유사성

     * Netflix는 더 이상 저렴하거나 광고 없는 플랫폼이 아님
          + 월 구독료와 광고 지원 플랜 도입
          + WWE와 같은 라이브 콘텐츠로 전환

  결론: 영화 산업의 미래와 스트리밍의 역할

     * 스트리밍 모델은 실패를 방지하지만 성공의 의미를 모호하게 만듦
     * 비판: 창의성 대신 정형화된 콘텐츠, 관객과의 상호작용 부족
     * 질문: ""이 콘텐츠는 정말 성공했는가?""라는 질문에 답하기 어려운 상황
     * 스트리밍은 과거 블록버스터처럼 비효율적이나 기억에 남는 경험을 제공하지 못함

        Hacker News 의견

     * Netflix의 콘텐츠는 다양하지만, 대부분의 콘텐츠가 별로라는 의견이 많음. 시청자들이 집중해서 좋은 작품을 보고 싶어하는데, 그런 시청자들은 더 이상 주요 타겟이 아님
          + Netflix의 경영진은 시청자들이 배경에서 프로그램을 틀어놓고도 내용을 따라갈 수 있도록 캐릭터가 자신의 행동을 설명하도록 요구함
          + ""캐주얼 시청""이라는 장르가 Netflix의 많은 영화에 적용되며, 이는 시청자가 주의를 기울이지 않고도 볼 수 있는 콘텐츠를 의미함
     * Netflix는 장르를 세분화하여 특정 고객의 취향에 맞춘 콘텐츠를 개발하지만, 이는 종종 그 취향을 잘못 표현한 콘텐츠로 이어짐
          + 이러한 접근 방식은 팬덤의 기반을 약화시키고, 결국에는 구축할 것이 남지 않게 됨
     * Netflix는 할리우드를 이기려 했지만, YouTube와 TikTok이 진정한 경쟁자임을 깨달음
          + 대부분의 미디어의 미래는 비디오 기반이며, Netflix는 YouTube와 같은 최적화된 비디오 생태계로 이동하려고 함
     * ""보여주지 말고 말하라""는 방식의 콘텐츠는 혼란스럽고 나쁘다고 생각하는 사람도 있음
          + 대화가 많을수록 더 좋은 쇼라고 생각하는 사람도 있음
     * ""마술피리""와 같은 작품은 이해하기 쉬운 대본을 가지고 있으며, 이는 휴대폰을 보면서도 이해할 수 있는 콘텐츠의 예시임
     * Netflix는 ""반영화""를 제작하여 처음 30분은 흥미롭게 만들고, 이후 예산을 줄이는 방식을 고려할 수도 있음
     * 디지털 ""주의 경제""는 관객과 비즈니스 사이에 큰 추상화를 도입하여, 우리가 의도적으로 엔터테인먼트를 표현할 수 있는 자신감을 주지 않음
          + 우리가 좋아하는 엔터테인먼트를 계속 얻고 싶다면, 물리적 극장을 보존해야 함
     * Netflix의 영화는 종종 ""위원회에 의해 설계된"" 것처럼 보이며, 이는 영혼이 없는 콘텐츠로 이어짐
          + Netflix는 직접 비디오로 출시되는 영화의 대체품이며, 극장의 대체품이 아님
     * ""보여주지 말고 말하라""는 방식은 균형이 필요하며, 이는 각본 작성과 연출에서 가장 어려운 도전 중 하나임
          + 터키 드라마는 ""말하기""의 극단적인 버전을 보여주며, 이는 중독성이 있음
"
"https://news.hada.io/topic?id=18421","ESP32를 활용한 저비용 드론 제작 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ESP32를 활용한 저비용 드론 제작 방법

     * 스마트폰으로 제어 가능한 DIY WiFi 드론 프로젝트
     * 드론은 초기에는 취미용으로 시작했으나, 현재는 사진 촬영, 농업, 국방 및 군사 등 다양한 분야에서 활용되는 도구로 발전
     * 용도, 기능, 페이로드 용량에 따라 가격이 천차만별로, 몇 달러에서 수백만 달러까지 다양
     * 드론의 안정적인 작동과 원하는 결과를 얻기 위해서는 정밀 센서(예: 자이로스코프) 및 데이터 처리 기술이 필요
          + 예: 공중 안정성 유지에는 센서 데이터를 정확히 처리하는 기술 필수

프로젝트 개요

     * 이 프로젝트에서는 쉽게 제어 가능한 WiFi 기반 DIY 드론을 제작
     * 소형 크기로 쉽게 제작 가능하며, 아래 부품들로 구성됨:
          + ESP32 모듈
          + MPU6050 IMU (관성 측정 장치)
          + 코어리스 모터
          + 플라스틱 프로펠러

DIY WiFi 드론의 주요 기능

     * WiFi 제어: 스마트폰으로 드론 조작 가능
     * 안정성 제어: MPU6050 IMU를 사용하여 안정성 유지
     * 올인원 PCB 설계: 별도의 3D 프린팅 부품 필요 없음
     * 확장 가능: 위치 유지(Position Hold), 높이 유지(Height Hold)와 같은 추가 기능 외부 모듈로 추가 가능
     * 소형 및 경량 설계
     * 내장 배터리 충전기: 외부 충전기 불필요
     * 내장 USB 인터페이스: 프로그래밍 및 디버깅 용이
     * Android 및 iOS 앱 지원: 스마트폰 앱으로 드론 조작
     * 오픈소스: 설계와 소스 코드 모두 공개되어 커스터마이징 가능

        Hacker News 의견

     * FPV 드론 생태계는 DIY가 가능하며, 다양한 부품을 조합하여 만들 수 있음
          + 예: 비행 제어 MCU가 있는 작은 PCB, 모터 드라이버 PCB, 탄소 섬유 프레임, LoRa 라디오 PCB, 카메라 및 비디오 전송 시스템 등
          + Betaflight, ArduPilot, iNav, PX4 펌웨어 사용 가능하며, 직접 작성할 수도 있음
          + PCB 프레임은 편리하지만 높은 가속 상황에서 충분히 견고하지 않을 수 있음
     * 오래된 iPhone을 드론으로 변환하는 아이디어
          + iPhone 6은 GPS, 자이로, 가속도계, 여러 카메라, 강력한 프로세서, 블루투스, Wi-Fi, LTE, 소리 및 빛 센서 등을 갖추고 있음
          + 케이스를 제거하면 주변 환경을 인식하고 통신할 수 있는 훌륭한 미니 컴퓨터가 됨
          + 최신 iPhone에서는 ARKit을 사용하여 드론과 환경에 대한 공간 이해를 높일 수 있음
          + Apple이 오래된 휴대폰을 DIY 프로젝트에 사용할 수 있도록 OS 수준의 제한을 제거하는 방법을 제공했으면 좋겠음
     * DIY 드론을 저렴한 비용으로 제작할 수 있는 시대
          + 미국에서 대중의 히스테리가 발생하는 시기에 DIY 드론을 12-13달러에 제작할 수 있음
          + UFO로 별을 착각하는 사람들이 많아 저렴한 드론 대신 중국산 하늘등을 사용하는 것이 더 효과적일 수 있음
     * Crazyflie 드론을 제작한 경험
          + 2.4GHz 프로토콜을 사용한 Crazyflie 드론을 제작했으며, 현재는 ESP32를 사용하여 업그레이드 가능
          + 저렴한 비용으로 드론을 제작할 수 있으며, Hackerbox에 포함될 가능성도 있음
     * 프로그래머블 드론을 구매할 수 있는 옵션
          + M5Stamp Fly와 같은 프로그래머블 드론을 구매할 수 있으며, 일본의 오픈 소스 항공 전자 장비를 참고할 수 있음
     * PCB에 착륙 장치가 포함된 드론
          + PCB에 착륙 장치가 포함된 드론이 흥미로우며, SeedStudio에 키트를 판매하거나 외주를 고려했으면 좋겠음
          + 부품 비용이 13달러 이하로 추정되며, DIY 드론 라이트 쇼를 위한 군집을 만들기에 적합함
     * 카메라 없는 드론의 실용성
          + 카메라 없는 드론의 실용성이 낮으며, 낚시와 같은 특정 용도로 사용 가능
          + 드론이 물고기를 감지하면 낚싯줄을 떨어뜨리고 돌아오도록 프로그래밍 필요
     * DigiKey의 구매 버튼 부재
          + DigiKey에서 모든 부품을 배송받고 싶지만, 구매 버튼이 없어 아쉬움
     * ESP32에 시각 관성 측정을 적용하는 시도
          + ESP32에 시각 관성 측정을 적용하려는 시도가 흥미로움
     * Espressif의 ESP-Drone과 유사한 프로젝트
          + Espressif의 ESP-Drone을 재포스팅한 것인지 의문
          + 기사에 링크된 저장소에 악성 코드가 있다는 주장과 의심스러운 커밋 기록이 있음
"
"https://news.hada.io/topic?id=18499","베네딕트 에반스의 기술트렌드 2025: AI eats the world","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                베네딕트 에반스의 기술트렌드 2025: AI eats the world

     * 2025년 리포트 (90p 슬라이드) 간추린 요약 및 추가 설명
     * ""내 삶에서 혁신적인 기술 데모는 딱 2개: GUI 와 ChatGPT - 빌게이츠""
     * OpenAI가 예상가치 $157B로 평가 받음 (Microsoft는 20년 걸림)
          + ChatGPT가 전례없는 속도로 메인스트림의 인지에 도달
          + 관심은 많지만 용도는 제한적이고 유용하다고 인식 못함
          + 벌써 시장에선 투자에 비해 이득이 없는 것 아니냐는 얘기도 나옴
     * Hype Cycle에서 ""Plateau of Productivity(생산성의 안정기)"" 도달하는 데에는 시간이 걸림
     * 차세대 플랫폼 시프트는 ""Generative AI""
          + Mainframe → PCs / SQL → Web / Open Source → Smartphones / Cloud → Generative AI
     * 하지만 아직 모든 것이 열려있고 답은 모름
          + How far will this scale?
          + How is this useful?
          + How do we deploy this?

How far will this scale? 얼마나 확장될 수 있을까?

     * LLM이 점점 커질까(scaling?) - LLM이 '모든 걸(everythig)'하게 될까?
     * Scaling 은 어려움
          + 이 모델들을 키우는 것은 많은 도전이 있고 시간이 걸릴 것
               o GPU와 전력, 트레이닝 데이터, 실행과 엔지니어링, 결과가 더 좋아질까?
          + 지금으로써는 무조건 투자할 수 밖에 없음 (안하면 차후 10~15년간 가장 중요한 기술을 놓치게 될 것)
          + ""우리는 해자가 없다 - 구글""
          + ""현재 훈련중인 모델은 $1b에 가까운 비용이 드는데, 2025/2026엔 $5b 또는 $10b정도 들 것 - Anthropic CEO""
          + ""Llama 4를 훈련하는데 필요한 컴퓨팅은 3의 10배 이상이고, 미래 모델들은 계속 그 이상으로 커질 것 - 마크 주커버그""
     * 해자가 ""자본""이라면.. 현재 Nvidia는 수요를 감당하지 못함
     * 빅4(메타,알파벳,AWS,MSFT)의 Capex는 2023년 $90b 였고 2024년엔 $220b. 2025년엔 더 늘어날 것
     * 모든 것은 우리 발아래에서 기술 발전이 진행되며 빠르게 변화중
          + AI 기술이 앞으로 더 발전하려면, 성과(더 나은 결과), 방향성, 그리고 자원의 효율성(훈련 비용, 추론 비용, 탄소 발자국) 간의 균형을 맞추는 것이 중요
     * ""무료로 출시하고, 입소문을 타고, 나중에 수익 모델을 고민하는 소비자 인터넷 모델은 오늘날의 대규모 언어 모델(LLM) 비용 구조와는 맞지 않음""
          + 전통적으로 소프트웨어는 초기 개발 비용이 높지만, 복사하거나 배포하는 데 거의 비용이 들지 않아 ""한계 비용""이 거의 없는 제품이었음
          + LLM은 학습과 추론 과정에서 막대한 컴퓨팅 자원(전력, 서버 등)이 필요하며 사용자가 늘어날수록 비용도 크게 증가
          + 무료로 제공하면서 대규모 사용자를 확보하는 전략은 수익화 모델이 확립되지 않으면 지속 가능하지 않음
          + 즉, 처음부터 명확한 비용 회수 전략이 필요
     * ""기술 산업의 모두가 다른 사람의 비즈니스 모델을 무료로 제공하고 있음""
          + 기술 산업 내에서 경쟁자 또는 다른 조직의 비즈니스 모델이나 핵심 기술이 오픈 소스나 다른 형태로 무료화되면서, 특정 기업의 독점적인 경쟁력이 약화
          + Meta가 AI 모델 등 중요한 기술 자산을 오픈 소스로 공개함으로써, 해당 기술이 누구나 사용할 수 있는 공통 인프라(commodity infrastructure)로 변하고 있음
          + Apple은 엣지 컴퓨팅 기술을 통해 사용자의 디바이스에서 직접 AI 모델을 실행하도록 유도, 중앙 서버에서 AI 모델을 실행하는 대신 모델이 단순한 API 호출 형태로 처리되도록 만들어 기술의 상업화 가치를 낮추고 있음
     * 2023-2024의 모델 붐: 좋은 것, 빠른 것, 저렴한 것 중에서 2가지를 선택하는 것이었음

How is this useful? 얼마나 유용한가?

     * 2013 : 머신러닝이 사람/개/의자를 구분하기 시작. ""똑똑하네 그래서 뭐?""
     * 2023 : ChatGPT같은 생성형 ML은 유용한가? ""똑똑하네 그래서 뭐?""
     * 에러 인식은 아직 제한적임. 효과적인 오류 처리를 위해 모든 측면에서 균형 잡힌 접근이 필요
          + 과학적 문제(모델 개선), 사용 사례 정의, 제품 설계(UX 개선)가 결합된 복합적인 과제
     * ""2024년, LLM은 어떻게 유용한가?""
          + LLM은 본질적으로 다음 단어를 예측하는 확률 기반 시스템
          + 현재 수준: 정보 요약이나 종합에는 유용하지만, 복잡한 추론에는 아직 미흡
          + LLM은 새로운 종류의 작업을 자동화하는 잠재력을 가지고 있지만, 이를 완전히 이해하고 정의하려면 더 많은 탐구가 필요
     * VisiCalc은 세계 최초의 전자 스프레드시트 프로그램으로, 20시간이 걸리던 계산 작업을 15분으로 단축시킴
          + 이를 본 변호사는 그것이 매우 혁신적이고 똑똑하다고 생각할 수 있지만, 자신의 업무에는 적용할 일이 없다고 느낄수 있음
          + 하지만 그런 사례는 증가중
               o 코딩, 마케팅, 고객센터 등 명확한 필요성을 가진 작업에서 즉각적인 가치를 제공
     * ""고객 경험에서 시작하여 기술로 거슬러 올라가야 한다. - 스티브 잡스""

How do we deploy this? 어떻게 이를 배포할 것인가?

     * 새로운 기술이 도입될 때 일반적으로 따르는 과정
          +
              1. Absorb (통합) : 새로운 기술을 기능으로 만들고, 기존 비즈니스나 제품의 기능으로 추가
          +
              2. Innovate (혁신) : 새로운 기술을 기반으로 혁신적인 아이디어나 제품을 개발. 스타트업은 이를 분리(언번들)하여 활용
          +
              3. Redefine markets (시장 재정의): 새로운 기술은 기존 시장의 경계를 무너뜨리고 완전히 새로운 시장을 창출할 수도 있음. 이는 예측하기 어려우며, 성공 사례는 드문 경우도 있음
     * 기업이 새로운 기술을 도입할 때 고려하는 표준적인 질문들
          + ""Buy versus build?"" (구매할 것인가, 직접 개발할 것인가?)
          + ""Single vendor or multi-vendor?"" (단일 공급업체 또는 다수의 공급업체를 사용할 것인가?)
          + ""Which use cases first? Whose budget?"" (어떤 사용 사례를 우선적으로 다룰 것인가? 예산은 누구의 것인가?)
          + ""Opex or capex? What’s the EPS impact?"" (운영비용인가, 자본지출인가? 주당순이익(EPS)에 미치는 영향은?)
     * 미래는 오래 걸릴수 있음
          + 클라우드는 오래되었고 지겨운 단어지만, 아직도 전체 워크플로우의 30%에 불과함
          + 2024년에 CIO의 1/4은 LLM기반의 뭔가를 출시했지만, 절반은 내년에도 뭔가를 할 계획이 없음
     * 그러나 새 플랫폼은 새 도구를 의미함
          + SaaS들이 자동화에서 엄청 확장하여 SAP,Excel,Email에서 워크플로우를 언번들링함
     * ""돈을 버는 두 가지 방법이 있다. 묶거나(bundle), 풀거나(unbundle).- Jim Barksdale ""
     * LLM이 모든 것을 처리할 수 있다면 어떨까? : 모델이 충분히 발전하면, 우리가 필요한 소프트웨어가 훨씬 줄어들 수도 있을까?
          + LLM이 특정 작업을 처리하는 능력이 현재보다 더 좋아지지 않는다면, 새로운 소프트웨어 개발을 계속해야 할 것
          + LLM이 계속 확장 가능하고 발전한다면, 소프트웨어 개발의 많은 부분이 필요 없게 될 수 있음
               o 모든 것을 처리하는 ""범용 AI로의 발전 가능성""
     * LLMs는 인프라인가? API인가? 플랫폼인가? 새로운 사용자 경험인가? : 논리적 시스템으로 LLM을 제어할 것인가, 아니면 LLM으로 논리적 시스템을 제어할 것인가?
          + LLM은 단순한 API로 사용될 수도 있고, 전체 플랫폼으로 자리 잡고 나머지 모두가 API가 될 수도 있음
          + 기술의 발전과 확장 가능성에 따라 LLM의 역할은 계속 진화할 것
     * LLM이 우리의 사용 사례 발굴 모델을 무너뜨릴까? : 모든 것이 동일한 UX를 가질 경우, 기업가들은 새로운 사용 사례와 자기 표현의 방식을 어떻게 발명할까?
          + 전통적인 소프트웨어 개발에서는 스타트업과 기업이 특정 사용 사례를 상상하고 발명
          + LLM이 모든 사용 사례를 처리하고 자동화할 수 있을 만큼 발전한다면, 전통적인 소프트웨어 개발의 필요성이 줄어들 수 있음
          + LLM이 UX의 중심이 되면, 사용자는 스스로 새로운 사용 사례를 상상하고 발명해야 할지도 모름
               o 소프트웨어 개발 및 UX 설계의 패러다임 전환
     * AI'는 '자동화'로 변하는 경향이 있다. : As technology matures, it disappears (기술이 성숙해지면, 사라진다.)
          + AI! → Smart → Auto → Just software
     * LLM 제품을 위한 세 가지 모델?
          + 기존 애플리케이션에 새로운 기능 추가: ""내 이메일을 다시 작성해줘, 리뷰를 요약해줘""
          + 새로운 도구: ""500개의 재무 보고서를 분석하고 요약해줘""
          + 범용 AI: ""집을 한채 사줘""
     * 아마도 모든 AI 질문에는 두 가지 답변 중 하나가 있다.
          + ""모든 플랫폼 변화와 마찬가지로 작동할 것이다.""
          + ""아무도 모른다""

Meanwhile...

     * 비전에서 실행까지 : 이미 큰 것은 무엇이고, 현재 만들어지고 있는 것은 무엇이며, 앞으로 올 것은 무엇인가?
          + 2000년대 초반에는 전자상거래(e-commerce)가 주요 혁신 아이디어였음 : ""사람들이 온라인으로 물건을 구매할 것""
          + 2010년대에는 SaaS(Software as a Service), 자동화, 협업 툴, 워크플로우 관리와 같은 아이디어가 주목받음
          + 2030년을 목표로 생성형 AI(Generative AI)가 새로운 비전으로 자리 잡고 있음
     * 메타는 아직도 메타버스 하는중(VR & AR). 그동안 적어도 $60b 투자했고, 지난 12개월간 $17.4b를 투자함
     * 이커머스는 아직 그대로(COVID기간만 예외였음). 기술 그래프중 가장 지루한 차트임
     * Unbundling 아마존: Shopify의 GMV(Gross Merchandise Volume)가 $270b 돌파. 아마존 GMV의 35% 규모가 됨
     * 아마존의 광고 매출이 계속 증가. 리테일/AWS 보다 더 많은 캐쉬플로우
     * Software eats media(소프트웨어가 미디어를 먹어치우다): 새로운 채널, 새로운 모델, 새로운 번들
          + YouTube, TikTok과 같은 소프트웨어 중심의 미디어 플랫폼은 전통 미디어와 유사한 수익을 기록하며, 미디어 시장의 강자로 부상
          + Disney와 같은 대규모 전통 미디어 회사는 여전히 강력한 수익을 기록하지만, 소프트웨어 플랫폼의 성장 속도에 직면
          + 스트리밍(Netflix)과 같은 새로운 형태의 미디어는 전통적인 케이블 및 방송 중심 모델에 도전
          + 전통 미디어는 콘텐츠 라이브러리 및 독점 콘텐츠로 경쟁력을 유지하려고 하며, 소프트웨어 플랫폼은 광고 기반 모델과 구독 기반 모델을 결합하여 수익을 극대화
     * Software eats cars?(소프트웨어가 자동차도 먹어치우나?): 수십 년간의 약속과 수백억 달러의 투자 끝에, 자율주행이 작동하기 시작했을지도 모름
          + 로보택시 주행횟수가 꾸준히 성장중. 자동차 산업이 소프트웨어 중심의 서비스로 전환
     * 자동차가 소프트웨어가 되나?: BEV가 전체 판매의 10%에 가까워지고 있지만, 누가 승리할까? 이 과정이 Android처럼 작동할까?
          + 순수 전기차(Battery Electric Vehicle)는 2023년에 전체 자동차 판매의 약 10%를 차지하며, 주류 기술로 자리잡는중
          + Tesla와 같은 회사는 BEV를 단순한 차량이 아닌, 소프트웨어 중심의 제품으로 변환. BEV가 스마트폰과 유사한 소프트웨어 중심 생태계를 형성할 가능성을 암시

   LLM의 비지니스 모델에 대해 고민하고 있었는데 공유 감사합니다

   베네딕트 에반스의 기술 트렌드 2024: AI, 그리고 그외 모든 것들
   베네딕트 에반스의 기술 트렌드 2023: The New Gatekeepers s
   베네딕트 에반스의 기술 트렌드 2022: 미래를 향한 3단계
   베네딕트 에반스의 기술 트렌드 2020: 거인들의 어깨에 서서
"
"https://news.hada.io/topic?id=18501","Show GN: 가볍고 효율적인 RAG 모델 평가 코드 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 가볍고 효율적인 RAG 모델 평가 코드 프로젝트

   Retriever Simple Benchmark는 **RAG*에 필요한 리랭커를 평가하기 위해 설계된 가볍고 효율적인 벤치마크 프로젝트 를 목표로 만들고 있습니다.
   제가 필요로 해서 만들고 있고 오픈소스로 개발 해봅니다.


    Why?

   기존의 벤치마크 도구(예: MTEB)는 의존성 설치와 동작이 번거로워 사용이 어렵다는 피드백이 많았습니다.
   매우 쉽게, 최소한의 의존성으로, 가볍게 돌릴 수 있고, 즉시 바로 결과를 찍어보는 것을 목표로 합니다.


    리포지토리 소개

     * 한국어 기반 cross-encoder를 현재 지원하며, 추후 bi-encoder 모델도 추가할 예정입니다.
     * Python 프로젝트를 유지 관리 가능하게 만들고, 이를 astral-uv로 새롭게 작성했습니다.


      사용 방법 💻

   1️⃣ 환경 설정
make init

   2️⃣ 실행하기 (현재 싱글 GPU만 지원)
make run TYPE=cross-encoder MODEL_NAME=sigridjineth/ko-reranker-v1.1 MODEL_CLASS=huggingface DATATYPE_NAME=AutoRAG


      앞으로의 계획 📈

     * 추가 지원 모델
          + HuggingFace와 FlagEmbedding 기반의 bi-encoder 모델
     * 추가 데이터셋
          + 현재 AutoRAG 지원, KURE 추가 예정


   ➡️ GitHub에서 프로젝트 확인하기
   ➡️ 인스트럭트한국 디스코드
"
"https://news.hada.io/topic?id=18462","시위안: 프라이버시 우선, 셀프 호스팅 개인 지식 관리 소프트웨어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  시위안: 프라이버시 우선, 셀프 호스팅 개인 지식 관리 소프트웨어

  💡 소개

     * SiYuan은 개인 정보 보호를 우선시하는 개인 지식 관리 시스템으로, 세밀한 블록 수준의 참조와 Markdown WYSIWYG를 지원함.
     * SiYuan 영어 토론 포럼에서 더 많은 정보를 얻을 수 있음.

  🔮 기능

     * 대부분의 기능은 무료로 제공되며, 상업적 용도로도 사용 가능함.
     * 콘텐츠 블록: 블록 수준 참조 및 양방향 링크, 사용자 정의 속성, SQL 쿼리 임베드, 프로토콜 siyuan:// 지원.
     * 편집기: 블록 스타일, Markdown WYSIWYG, 목록 개요, 블록 확대, 대용량 문서 편집, 수학 공식, 차트, 웹 클리핑, PDF 주석 링크 등 지원.
     * 내보내기: 블록 참조 및 임베드, 표준 Markdown, PDF, Word, HTML 등으로 내보내기 가능.
     * 데이터베이스: 테이블 보기, 플래시카드 간격 반복, OpenAI API를 통한 AI 작성 및 Q/A 채팅, Tesseract OCR 등 지원.
     * 기타: 멀티탭, 드래그 앤 드롭, 템플릿 스니펫, JavaScript/CSS 스니펫, Android/iOS/HarmonyOS 앱, Docker 배포, API, 커뮤니티 마켓플레이스 등 제공.

  🏗️ 아키텍처 및 생태계

     * 프로젝트: 다양한 플랫폼과 기능을 지원하는 여러 프로젝트로 구성됨.
     * 예: 편집기 엔진, Chrome/Edge 확장, 커뮤니티 마켓플레이스, 데이터 저장소, 플러그인 API 등.

  🌟 스타 역사

  🗺️ 로드맵

     * SiYuan 개발 계획 및 진행 상황, 변경 로그 포함.

  🚀 다운로드 설정

     * 데스크톱 및 모바일의 앱 마켓을 통해 설치하는 것을 권장함.
     * 앱 마켓: 모바일(App Store, Google Play, F-Droid), 데스크톱(Microsoft Store) 지원.
     * 설치 패키지: B3log, GitHub 제공.
     * Docker 호스팅: Docker를 통한 간편한 서버 배포 가능.

    Docker 호스팅

     * Docker 이미지를 사용하여 SiYuan을 서버에 배포하는 방법 설명.
     * 파일 구조, 엔트리포인트, 사용자 권한 설정 등 포함.

    Unraid 호스팅

     * Unraid를 통한 배포 방법 설명.

    Insider Preview

     * 주요 업데이트 전에 Insider Preview 릴리스.

  🏘️ 커뮤니티

     * 영어 토론 포럼, 사용자 커뮤니티 요약, Awesome SiYuan 등 제공.

  🛠️ 개발 가이드

     * 개발 가이드 참조.

  ❓ FAQ

    SiYuan은 데이터를 어떻게 저장하는가?

     * 데이터는 작업 공간 폴더에 저장되며, 다양한 폴더에 따라 자산, 이모지, 코드 스니펫, 쿼리 조건, 레이아웃, 플래시카드 등이 저장됨.

    제3자 동기화 디스크를 통한 데이터 동기화를 지원하는가?

     * 제3자 동기화 디스크를 통한 데이터 동기화는 지원하지 않음. 대신 수동으로 데이터를 내보내고 가져오는 방법을 고려할 수 있음.

    SiYuan은 오픈 소스인가?

     * SiYuan은 완전히 오픈 소스이며, 기여를 환영함.

    새 버전으로 업그레이드하는 방법은?

     * 앱 스토어를 통해 설치한 경우, 앱 스토어를 통해 업데이트 가능.

    일부 블록의 아이콘을 찾을 수 없는 경우 어떻게 해야 하는가?

     * 목록 항목의 첫 번째 하위 블록은 블록 아이콘이 생략됨.

    데이터 저장소 키를 분실한 경우 어떻게 해야 하는가?

     * 여러 장치에서 올바르게 초기화된 경우, 동일한 키를 사용할 수 있음.

    비용이 드는가?

     * 대부분의 기능은 무료로 제공되며, 멤버십 권한은 유료임.

  🙏 감사의 말

     * SiYuan의 탄생은 많은 오픈 소스 프로젝트와 기여자 덕분이며, 사용자 피드백과 홍보 덕분에 성장할 수 있었음.

        Hacker News 의견

     * 컴퓨터와 Unix에 익숙하다면, 디렉토리 구조, 파일명, 텍스트 파일, 리스트, 그리고 Markdown을 활용하는 것이 중요함
          + ""파일 우선"" 접근법과 Unix 도구를 활용할 것을 권장함
          + 보편적인 개념으로 정리: 위치, 사물, 사람, 이벤트, 지표, 방법 등
          + Unix 명령어, make/justfiles, (rip)grep, git, fzf 등을 활용할 것을 추천함
          + 웹을 통해 문제를 해결하려 하지 말고, 기본적인 지식 관리와 생산성 문제에 집중할 것을 권장함
          + 스마트폰/터치스크린 문제는 파일 관리자나 termux에서 fzf를 사용하여 해결 가능함
          + ""백링크"" 기능에 관심이 있으며, 텍스트 파일에서 다른 파일에 대한 참조를 스캔할 수 있는 Unix 도구를 찾고 있음
     * Obsidian의 오픈소스 버전을 몇 년간 홈 서버에서 사용 중임
          + 문서가 부족하고 다소 불안정하지만, 웹 브라우저에서 어디서든 사용할 수 있는 점이 가장 큰 장점임
          + 중국 회사가 개발했지만 정보가 부족함
     * Notion과 기능이 유사한 테이블을 좋아함
          + Excel보다 한 단계 높은 앱이 필요하다는 의견이 많지만, 실제로 많은 앱이 이를 고려하지 않음
     * Logseq에 깊이 투자하고 있으며, 새로운 데이터베이스 버전이 곧 출시될 예정임
          + 인기 있는 앱 간에 노트를 변환할 수 있는 도구가 없다면, 새로운 사용자나 노트가 적은 사용자만 사용할 것임
     * Trilium Notes를 추천하며, 몇 년간 만족스럽게 사용 중임
          + ""유지보수 모드""에 있으며, 이는 불필요한 기능이 추가되지 않는다는 점에서 장점으로 봄
          + 자체 호스팅 가능, 훌륭한 웹앱, 선택적 네이티브 클라이언트, 오프라인 작동 가능
     * 지식 관리에 대한 간단한 접근법을 사용 중임
          + 모든 것을 git에 저장하고, 시간이 지나면서 디렉토리 구조를 자연스럽게 확장함
          + 모바일에서는 gitea 인스턴스에 푸시하며, 모바일에서 노트를 읽는 방법에 대한 추천을 구하고 있음
     * 라이선스가 다소 이상함
          + 자체 호스팅 동기화는 유료 기능으로 되어 있으며, 코드에 라이선스 체크가 포함되어 있음
          + AGPL 라이선스 하에 있으며, 라이선스 체크를 패치할 수 있음
     * Joplin에서 전환하여 3개월간 자체 호스팅 중이며 만족함
          + 오프라인 접근을 잃었지만, 더 표현력이 좋고 만족스러움
          + 다른 Docker 컨테이너에 의존하지 않으며, Authelia를 인증에 사용함
          + 웹 UI는 모바일 사용에 적합함
     * Docker로 2년간 호스팅 중이며, 안정적임
          + Firefox에서 약간의 버그가 있지만, 유지보수 시간이 부족함
     * Notion을 포함한 이 앱들에서 ""데이터베이스 상속"" 기능이 부족함
          + 기본 작업 속성을 가진 슈퍼 데이터베이스를 만들고, 프로젝트별 속성을 추가하는 하위 데이터베이스를 만들고 싶음
          + 하루의 모든 작업을 한 곳에서 볼 수 있는 단일 뷰를 만들고 싶음
"
"https://news.hada.io/topic?id=18414","Ask HN: 2025년에 대한 예측은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask HN: 2025년에 대한 예측은?

     * 2024년은 AI 안팎으로 많은 발전이 있었던 격동의 해였음
     * 다가오는 해에 대한 예측은 무엇인지 궁금함

CubsFan1060

     * 청소년의 소셜 미디어 사용을 제한하려는 규제가 증가할 것임. 예를 들어 학교 내 휴대폰 사용 제한 및 소셜 미디어 가입 요건 강화 등
     * 이러한 제한이 청소년에게 큰 이익을 가져오며 성공적인 결과를 보일 것임
     * 반면, 동일한 기술과 제한이 성인에게 적용되면서 부정적인 영향을 초래할 가능성이 있음

abetusk

     * 태양광 에너지가 세계 에너지 사용량의 약 8%를 차지할 것임
     * 첫 번째 조 단위 부자가 탄생할 것임
     * 비트코인이 $200k 이상의 가치를 달성하고 안정적으로 유지될 것임
     * 음악 생성 AI가 개선되어 틈새 장르에 특화된 스트리밍 서비스가 등장할 가능성 있음
     * 비디오 생성 AI가 발전하며, 인디 영화나 뮤직비디오 제작에 활용될 가능성 있음
     * LLM이 더욱 복잡한 과제를 해결하며 성능이 향상될 것임
     * 로봇 및 로보틱스 비용이 크게 감소하며 합리적인 이족 로봇이 $8k 수준에 판매될 가능성 있음
     * Twitter와 Facebook은 여전히 존재하겠지만 Bluesky는 사라지고 Mastodon은 틈새 시장에 남을 것임

doku

     * 90% 확률로 사상 최악의 더위와 극단적인 기상이 발생하며 보험사의 대규모 지급이 있을 것임
     * 검색 엔진 결과가 LLM 텍스트로 완전히 채워지고, SEO가 사실상 해결될 것임
     * 물리 시뮬레이터와 CAD 소프트웨어에 접근할 수 있는 AI가 엔진 설계를 자동으로 개선할 것임
     * 저렴한 AI 진단 도구가 질병을 신속히 진단하며 보편화될 가능성 있음

idiot_predictor

     * 주요 기술 리더들이 퇴직하거나 교체될 가능성이 있음
     * LLM이 비코딩 작업에서 기대에 미치지 못하고 관심을 잃을 가능성이 있음
     * 클라우드 데이터 전송 비용이 경쟁 요소로 부각될 것임
     * 로컬 저장 및 컴퓨팅 기능을 갖춘 새로운 기기가 등장할 가능성 있음
     * 새로운 AI 기반 게임이 인간과의 상호작용에서 혁신을 보일 것임

kylehotchkiss

     * 지리적 고립과 에너지 독립성으로 인해 미국은 정치적 안정성을 유지할 것임
     * AI 발전으로 인해 소프트웨어 엔지니어링에 진입하는 인력이 줄어들고 혁신 속도가 둔화될 가능성 있음
     * 사적 보험 시스템에 대한 소비자 인식이 높아지고 변화 요구가 증가할 것임

WheelsAtLarge

     * 여러 특화된 LLM이 라우터와 같은 애플리케이션을 통해 작업 요청에 적합한 LLM을 선택하며 사용될 것임
     * 코드 작성 비용이 계속 감소하며 ""코드의 무어의 법칙""이 실현될 가능성 있음
     * 기술 직종이 과거의 코드 직종처럼 높은 보수를 받는 추세로 전환될 것임

kertoip_1

     * LLM 기반의 새로운 인기 게임이 출시되며 새로운 트렌드가 형성될 것임
     * AI 생성 음악이 배경음악용으로 인기를 얻으며 시장 점유율을 확대할 것임
     * 인터넷 데이터 접근 제한이 증가하며 구글 검색의 강력한 경쟁자가 등장할 가능성 있음
     * 스페이스X가 Starship을 사용해 궤도에 성공적으로 페이로드를 발사하고 회수할 것임

homascountz

     * Ruby on Rails가 SQLite와 같은 도구와 함께 다시 인기를 얻을 것임
     * LLM 도구가 개발자의 업무를 보완하며 더욱 일반화될 것임
     * 소비자들은 ""AI 기반"" 제품보다는 프라이버시를 강조한 실용적인 애플리케이션에 관심을 가질 것임
     * 기업은 여전히 최소한의 인력으로 운영하며 고용이 제한적일 것임


   예전 링크들 보기
     * 2024: https://news.ycombinator.com/item?id=38777115
     * 2023: https://news.ycombinator.com/item?id=34125628
     * 2022: https://news.ycombinator.com/item?id=29746236
     * 2021: https://news.ycombinator.com/item?id=25594068
     * 2020: https://news.ycombinator.com/item?id=21802596
     * 2019: https://news.ycombinator.com/item?id=18753859
     * 2018: https://news.ycombinator.com/item?id=16007988
     * 2017: none?
     * 2016: https://news.ycombinator.com/item?id=10809767
     * 2015: https://news.ycombinator.com/item?id=8822723
     * 2014: https://news.ycombinator.com/item?id=6994370
     * 2013: none?
     * 2012: https://news.ycombinator.com/item?id=3395201
     * 2011: https://news.ycombinator.com/item?id=1970023
     * 2010: https://news.ycombinator.com/item?id=1025681

   청소년의 소셜 미디어 사용을 제한 관련해서 저희 나라도 법안이 발의 됐다고 기사를 본 것 같은데, 어떻게 될지 궁금하네요

   마지막에 아래문장 빼고는 가능성이 있네요
   ""
   Ruby on Rails가 SQLite와 같은 도구와 함께 다시 인기를 얻을 것임
   ""

   레일스를 사용하셨거나/사용하시나요??
"
"https://news.hada.io/topic?id=18454","COBOL로 작성된 Minecraft 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        COBOL로 작성된 Minecraft 서버

     * CobolCraft
          + COBOL로 작성된 Minecraft 서버로, Minecraft 1.21.4 버전을 지원함
     * 기능
          + 다음 기능들이 이미 구현되어 있음
               o 무한 지형 생성 및 동적 청크 로딩
               o 월드 및 플레이어 데이터 디스크 저장
               o Minecraft 파일 형식 지원 (기존 월드 가져오기)
               o 최대 10명의 동시 플레이어를 지원하는 멀티플레이어
               o 핑/서버 상태 (서버 목록에 온라인으로 표시)
               o 블록 파괴 및 배치
               o 블록 상호작용 (오른쪽 클릭, 예: 문 열기)
               o 플레이어 인벤토리 (창의적 모드로 제한)
               o 채팅
               o 명령어 (게임 내 및 대화형 콘솔을 통해)
               o server.properties를 통한 설정
               o 화이트리스트 (지속적; whitelist.json에 저장)
          + 다중 상태, 방향, 상호작용 블록은 많은 전문 코드가 필요하며, 이 프로젝트의 범위를 초과함
               o 일부 지원되는 블록: 횃불, 슬래브, 계단, 회전된 기둥, 버튼, 문, 트랩도어, 침대
     * 사용 방법
          + GnuCOBOL을 사용하여 개발되었으며, Linux에서 실행하도록 설계됨
          + Windows와 같은 다른 운영 체제에 대한 지원은 테스트되지 않았으나, Docker를 사용하여 플랫폼 독립적 배포 가능
          + Linux에서 배포하려면 다음 전제 조건이 설치되어야 함
               o cobc, make, g++, zlib, curl, 최신 Java 버전
          + make를 실행하여 빌드하고, make run으로 포트 25565에서 서버 시작
          + Docker 사용 시:
               o Docker Hub에서 이미지 가져오기 또는 직접 빌드 가능
               o Docker 컨테이너 실행 시 외부에서 접근 가능하도록 설정 가능
     * 왜?
          + COBOL에 대한 많은 소문과 오명이 있어, 프로젝트를 통해 이 언어에 대해 더 알아보고자 함
          + COBOL은 비즈니스 애플리케이션에 적합하며, Minecraft 프로토콜이 요구하는 저수준 데이터 조작에는 적합하지 않음
          + 그러나 작동하는 프로토타입을 만들기 전에는 포기하지 않음
          + 데이터 인코딩 및 디코딩을 통해 성능을 확보함
     * 프로그램 개요
          + 소스 구성 요소
               o 프로그램 진입점은 main.cob이며, 나머지 COBOL 소스는 src/ 디렉토리에 위치
               o TCP 소켓은 CBL_GC_SOCKET 소켓 라이브러리로 관리됨
          + 패킷 블롭
               o Wireshark를 통해 캡처된 네트워크 데이터를 사용하며, blobs/ 디렉토리에 위치
          + 데이터 추출
               o 공식 Minecraft 서버 및 클라이언트 애플리케이션에서 많은 데이터를 추출 가능
               o CobolCraft Makefile은 .jar 파일을 다운로드하고 JSON 데이터를 추출하는 타겟을 포함함
     * 법적 고지
          + 이 프로젝트는 MIT 라이선스 하에 있으며, 3자 라이브러리 CBL_GC_SOCKET은 LGPL v3 라이선스 하에 있음
          + ""Minecraft""는 Mojang Synergies AB의 상표이며, CobolCraft는 Mojang과 관련이 없고 승인되지 않음

        Hacker News 의견

     * COBOL에 대한 소문과 오명이 많음. 이를 알아보기 위해 프로젝트를 통해 COBOL을 경험해보고 싶음. 새로운 사람이 COBOL을 사용하며 얻은 통찰을 알고 싶음
          + 고등학교 졸업 프로젝트로 축구 베팅 확률을 자동화하는 COBOL 시스템을 작성했음. 시대에 뒤떨어졌지만, 재미있었음
          + COBOL은 펀치 카드 시절을 떠올리게 하는 매력이 있음
     * 간단한 언어로 작성된 작은 프로젝트가 인상적임. 반면, Rust 같은 현대 언어로 작성된 프로젝트는 비효율적임
          + 간단한 언어는 아이디어를 구현하기 쉽지만, 현대 언어는 지속 가능한 코드를 작성하도록 강요함
     * 1978년 이후 COBOL 사용을 중단했음. 다시는 이 코드를 보고 싶지 않음
     * COBOL 코드는 절차적 언어 배경이 있는 사람에게 이해하기 쉬움. 20년 전 VB로 작성된 게임 서버를 떠올리게 함
     * COBOL 코드는 매우 읽기 쉬움. 현대 언어와 비교했을 때 이해하기 쉬움
     * 파키스탄 작은 마을에서 고등학교 시절 COBOL을 배움. 금융 보고서를 시뮬레이션하는 프로젝트를 했음. COBOL의 오명을 이해하지 못함
     * COBOL은 멋진 언어로 보임. 코드가 잘 정리되어 있음
     * 40년 후, 전 세계의 경영진들이 ""COBOL Minecraft 서버는 사라졌다""라고 말할 것임
     * COBOL Minecraft 서버가 레드스톤을 지원하는지 알 수 없음. README에 언급이 없고, 코드에서는 레드스톤 횃불만 언급됨
"
"https://news.hada.io/topic?id=18439","루비 3.4.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              루비 3.4.0 출시

     * 예년과 마찬가지로 12/25에 Ruby 3.4.0이 출시됨
     * 주요 업데이트로는 it 블록 매개변수 참조 추가, Prism을 기본 파서로 변경, 소켓 라이브러리에 Happy Eyeballs Version 2 지원 추가, YJIT 개선, 모듈식 GC 추가 등이 있음.
     * it 블록 매개변수 참조
          + 변수 이름 없이 블록 매개변수를 참조할 수 있는 it 도입됨. 이는 _1과 유사하게 작동하며, 간단한 블록에서 사용하기 편리함.
     * Prism 기본 파서로 변경
          + 기본 파서가 parse.y에서 Prism으로 변경됨. 사용자에게는 큰 변화가 없을 것이며, 호환성 문제가 발생하면 보고 요청.
     * 소켓 라이브러리의 Happy Eyeballs Version 2
          + 소켓 라이브러리에 Happy Eyeballs Version 2 (RFC 8305) 지원 추가됨. 이는 현대 인터넷 환경에 적합한 효율적이고 신뢰할 수 있는 네트워크 연결을 제공함.
     * YJIT 개선
          + 대부분의 벤치마크에서 성능 향상, 메모리 사용량 감소, 다양한 버그 수정 및 새로운 기능 추가됨.
     * 모듈식 GC
          + 대체 가비지 컬렉터(GC) 구현을 동적으로 로드할 수 있는 모듈식 GC 기능 추가됨. Rust 툴체인이 필요함.
     * 언어 변경 사항
          + frozen_string_literal 주석 없는 파일의 문자열 리터럴이 변경될 때 경고 발생. **nil 키워드 스플래팅 지원 등 다양한 변경 사항 포함.
     * 코어 클래스 업데이트
          + Exception#set_backtrace가 Thread::Backtrace::Location 배열을 허용하는 등 여러 코어 클래스 업데이트 포함.
     * 표준 라이브러리 업데이트
          + RubyGems, Bundler, JSON, Tempfile 등 여러 표준 라이브러리의 성능 개선 및 기능 추가.
     * 호환성 문제
          + 오류 메시지 및 백트레이스 표시 방식 변경, Hash#inspect 렌더링 방식 변경 등 호환성 관련 변경 사항 포함.
     * C API 업데이트
          + rb_newobj 및 rb_newobj_of 함수 제거 등 C API 관련 업데이트 포함.
     * 기타 변경 사항
          + 사용되지 않는 블록을 메서드에 전달할 때 경고 발생 등 다양한 변경 사항 포함.

        Hacker News 의견

     * Ruby 파서 변경에 대한 기대감이 큼. 이전에 yacc를 사용하라고 배웠지만, Ruby는 수작업으로 작성된 파서를 사용하는 언어 목록에 합류함.
          + 16k 라인의 parse.y를 22k 라인의 prism.c로 대체하는 것은 대담한 움직임임.
     * Ruby 3.4.1 버전이 이미 구식임.
     * 최근 몇 년간 Ruby의 성능이 특히 향상되었음. 3.3 버전 이후로 --yjit 옵션을 사용하여 모든 앱을 실행하고 있으며, 큰 차이를 보임.
     * Shopify의 전략은 YJIT의 이야기와 같음. 서비스 리팩토링이 불가능하다면 Ruby를 리팩토링하겠다는 의지임.
     * JIT와 GC 수준에서의 성능 개선이 반가운 추가 사항임.
     * 매년 크리스마스 전통처럼 Ruby 릴리스를 기대함.
     * 매년 말 Rails 앱을 업데이트하며, 최근에는 안정적이고 성능이 개선되어 업데이트가 쉬워졌음.
     * Ruby 팀에게 축하와 감사의 인사를 전함.
     * Rails 8 소식 이후 Ruby를 시도하고 싶었으나, 설치 과정이 너무 어려워 포기함.
          + Mac과 Windows에서 Ruby 3.3 버전을 설치하는 것이 큰 도전이었음.
          + Docker에서도 버전 조정이 필요했고, devContainers에서도 문제가 있었음.
          + 설치 후 VSCode와 다른 에디터에서 Rails의 html.erb 파일의 구문 강조가 완전히 깨져 있었음.
          + 온라인에서 해결책을 찾으려 했으나 실패하여 결국 포기함.
          + Mac, Windows, Linux 모두 시도했으나 실패했으며, 누군가 이 문제를 해결할 수 있다면 크리스마스 선물이 될 것임.

     Rails 8 소식 이후 Ruby를 시도하고 싶었으나, 설치 과정이 너무 어려워 포기함.

   macOS에서 레일스 설치를 쉽게 해주는 스크립트가 있습니다.
   =>
   https://rails.new/
"
