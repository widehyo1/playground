"https://news.hada.io/topic?id=4593","DevTron - k8s용 소프트웨어 딜리버리 워크플로우","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    DevTron - k8s용 소프트웨어 딜리버리 워크플로우

   - 쿠버네티스 환경에서 어플리케이션을 운영 및 유지 보수 하는 오픈소스 셀프 서브 플랫폼
   ㅤ→ Zero 코드 소프트웨어 배포
   ㅤ→ 멀티 클라우드 배포 지원
   ㅤ→ 쉬운 Dev-Sec-Ops 연동
   ㅤ→ 어플리케이션 디버깅 대시보드
   ㅤ→ GitOps 지원
   ㅤ→ 세세한 접근 관리, 모든 CI/CD 이벤트 로그, Audit Log 지원
   - 백엔드는 Go , 대시보드는 React + TypeScript
"
"https://news.hada.io/topic?id=4640","SQLite에 1분 내로 10억 Row 추가하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       SQLite에 1분 내로 10억 Row 추가하기

   - 큰 사이즈의 테스트DB를 빠르게 생성하기 위해 시도한 노력들을 정리
   ㅤ→ 현재 최고 수준은 1억 개에 33초 (MBP 2019기준)
   - Python 코드로 루프 : 천만개에 15분
   ㅤ→ 배치 인서트 사이즈를 10만으로 조정 : 10분으로 단축
   - SQLite 설정 최적화 : journal_mode/synchrounous 끄기, 캐쉬사이즈 조정, exclusive lock
   ㅤ→ 루프 버전 1억개 10분, 배치 버전 1억개 8.5분
   - PyPy 로 변경 : 배치 버전이 1억개에 2.5분으로 단축 (3.5배)
   - Rust 로 작성 : 루프 버전 + SQLite 최적화 1억개에 3분
   ㅤ→ Prepared Statement 로 변경하고 50 Row 씩 배치 인서트 하니, 1억개에 34.3초
   ㅤ→ 쓰레드 버전으로 변경 : 1개의 Writer 쓰레드, 4개의 데이터 쓰레드. 32.37초
   - SQLite DB 저장소를 :memory: 로 변경하니 2초 단축해서 29초
   ㅤ→ 1억 row 플러시하는데 2초가 걸리는 듯
   - 다음으로 시도해 볼 것들 (1분에 10억개 달성을 위해)
   ㅤ→ 프로파일링 해보기
   ㅤ→ 멀티프로세스 버전으로 4코어를 활용해보기
   ㅤ→ Go 언어로 작성한후 GC 꺼버리고 실행
   ㅤ→ 크레이지 아이디어 : SQLite 파일 포맷을 배워서 직접 포맷대로 생성하기
"
"https://news.hada.io/topic?id=4582","Weferral - 레퍼럴 & 어필리에이트 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Weferral - 레퍼럴 & 어필리에이트 오픈소스

   - Affiliate (추천 & 제휴를 통해서 보상을 주는 프로그램)를 구현하기 위한 JS 오픈소스
   - 커스터마이징 가능한 포털 과 대시보드
   - 자동 트래킹 시스템
   - 이메일 자동화
   - 초대 기능
   - 다양한 보상 체계 구현 : 반복/평생(인플루언서), 1회성(이커머스), 월 커미션(구독/SaaS), 고정/변동 퍼센트 기반 커미션
   - REST API 제공
   - Webhook 으로 자동화 가능
   - 플러그인 프레임워크 및 RBAC(역할 기반 접근 제어) 추가 예정
"
"https://news.hada.io/topic?id=4577","Miniflare - CloudFlare Workers 로컬 시뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Miniflare - CloudFlare Workers 로컬 시뮬레이터

   - 서버리스인 Workers를 로컬에서 쉽게 개발할 수 있게 해주는 오픈소스
   ㅤ→ 상세 로깅, 파일 감시, 보기 쉬운 에러페이지 제공
   - Workers의 대부분 기능 지원
   ㅤ→ Events : Fetch / Scheduled (수동/크론)
   ㅤ→ KV, Cache, Durable Objects, WebSockets, Modules
   ㅤ→ WebAssembly 지원
   ㅤ→ Source Map 지원
   ㅤ→ 웹표준 : Base64, Timers, Fetch, Encoding, URL, Streams, Crypto
   - TypeScript 오픈소스

   - CloudFlare, Workers Unbound 서버리스 베타 시작 https://news.hada.io/topic?id=2543
   - CloudFlare, Durable Objects 베타 공개 https://news.hada.io/topic?id=2930
   - CloudFlare가 Workers의 콜드 스타트 시간을 0으로 만든 방법 https://news.hada.io/topic?id=2567
   - edge-sql : 서버리스 SQLite https://news.hada.io/topic?id=3613
   ㅤ→ Cloudflare Workers 에 WASM으로 SQLite를 임베드하고 Workers KV에 데이터를 저장
"
"https://news.hada.io/topic?id=4580","Tuplex - 병렬 빅데이터 처리 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Tuplex - 병렬 빅데이터 처리 프레임워크

   - Apache Spark / Dask 와 비슷한 Python API 를 제공하지만
   ㅤ→ 파이썬 인터프리터를 호출하지 않음
   ㅤ→ 주어진 파이프라인과 입력 데이터세트에 최적화된 LLVM 바이트코드를 생성
   ㅤ→ 인터프리터 대비 5~91x 빠름
   - 내부적으로 데이터 드리븐 컴파일과 듀얼 모드 처리를 기반으로 해서, C++로 코딩하고 최적화된 파이프라인과 비슷한 속도를 냄
   - MacOS / Linux 지원
   - SIGMOD '21 에서 발표된 ""Tuplex: Data Science in Python at Native Code Speed"" 논문
"
"https://news.hada.io/topic?id=4635","Ask GN: 매일 방문하는 웹사이트가 있으신가요 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask GN: 매일 방문하는 웹사이트가 있으신가요 ?

   습관적으로 하루에 한번 이상 접근하는 웹사이트가 있다면 알려주세요.
   저는 기본적으로 아래 사이트들을 주로 갑니다.
   [0] 긱뉴스!
   [1] https://news.ycombinator.com/ , https://lobste.rs/ - 대부분의 기술 뉴스
   [2] https://engineeringblogs.xyz/ - Feedly 로 각각을 구독하는 것 보다 하루하루 보기 편해서 애용합니다.
   [3] https://www.producthunt.com/ - 새로운 서비스들 확인차
   [4] https://trends.co/ , https://www.theinformation.com/ - 유료 기술 뉴스 사이트
   [5] https://boardlife.co.kr/gate.php - 보드게임 좋아합니다.
   [6] https://www.kickstarter.com/ - 매일 새로 올라오는 보드게임과 IT 기기 크라우드 펀딩들 보러

   bbc.com/korean
   한국뉴스 여기만 봐도 되겠다 싶음

   [0] 긱뉴스!
   [1] B급프로그래머 https://jhrogue.blogspot.com/ - 주간 주요 기술 뉴스 서머리를 해주십니다.
   [2] BBC 온라인 한국판 https://www.bbc.com/korean - 기사의 질이 좋습니다.
   위에서 이미 제가 다니는 곳이 많이 소개되었네요.
   이외에 알구몬, 트위터, 뉴스페퍼민트 등을 자주 방문하고, Feedly를 통해 방문하기도 합니다.

   저는
   [1] https://newspeppermint.com/ - 외신 칼럼 번역
   [2] https://www.vox.com/ - 1번에서 제가 좋아하던 글들 보니, Vox 칼럼이 많아서 들어가게된. 여러분들이 아실만한 The Verge도 Vox Media에 속해 있습니다.

   [0] 긱뉴스!
   [1] https://algumon.com/ - 알구몬 핫딜정보를 잘 모아줍니다.

   저도 알구몬 하하

   [0] 긱뉴스!
   [1] https://www.technologyreview.kr/ - 한글인데 나름 퀄리티 괜찮은 글이 올라와 매일 봅니다.
   [2] Hacker News - 직접 들어가는 건 아니지만, 매일 Newsletter가 와서 한번은 꼭 들어갑니다.
   [3] Readspike (https://readspike.com/) - 뉴스가 없으면 들어갑니다.
   [4] Facebook - 구독한 개발자들의 근황 살펴보기용으로(... ) 씁니다.

   천문학 관련 사진이 매일 업데이트 됩니다. 가끔씩 휴식이 필요하실때 보시면 좋습니다. https://apod.nasa.gov/apod/

   https://www.techmeme.com/
   https://techcrunch.com/
   https://vue-hn.netlify.app/top
   https://github.com/trending
   그리고 twitter.. 트위터가 소식이 제일 빨라 다른 사이트보다 자주/많이 봅니다. (해외 개발자들만 follow 중)

   테크밈은 밈 사이트가 아니었네요... 아쉽..

   [0] 긱뉴스
   [1] 리멤버 나우 - 경제관련 https://now.rememberapp.co.kr

   오 리멤버 나우는 RSS 피드도 있네요. 고맙습니다.
   소스코드가 안보이게 해둬서 개발자 도구 열어야 보이네요 ^^;
   https://now.rememberapp.co.kr/feed/

   [0] 저도 역시나 긱뉴스
   [1] Hacker News https://news.ycombinator.com/newest/
   [2] Github https://github.com/
   [3] 리디북스 https://ridibooks.com/
   [4] YouTube https://www.youtube.com/
   [5] 사이드 프로젝트로 만든 외부 비공개 페이지

   [0] 긱뉴스!
   [1] 미디엄 medium.com
   이정도만 접속합니다!

   [0] 역시 긱뉴스 https://news.hada.io/
   [1] 정태훈님의 국내 기업 기술블로그 모음 https://techblogposts.com/
   [2] 디스콰이엇 https://disquiet.io/
   [3] Android weekly https://androidweekly.net/
   [4] Pro Android Dev https://proandroiddev.com/
   [5] UpLabs https://www.uplabs.com/
   [6] Dribbble https://dribbble.com/
"
"https://news.hada.io/topic?id=4660","Ask GN: 가장 좋아하는 프로그래밍 언어에 어떤 점을 좋아하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ask GN: 가장 좋아하는 프로그래밍 언어에 어떤 점을 좋아하시나요?

   프로그래밍 언어를 가리면 안 되지만, 모든 언어는 모든 언어를 만든 설계자가 바란 디자인이 포함되어있고, 그 디자인을 필요로 하는지 와는 별개로 그 디자인을 좋아할 수도 있다고 생각합니다.
   예를 들면 저는, Rust의 강한 메모리 Ownership에 따른 디자인을 '좋아하지만', 실제로 쓰긴, 제가 필요한 곳은 C++의 스마트-포인터만으로도 지금은 잘 되지 않나.. 싶었고요.
   아. 저는 Lua를 완전 좋아합니다. 비록 1-based index이고, 수많은 문제를 야기할 수 있는 수많은 위험천만한 점이 있지만, 가볍게 짜고 잊어버려야 할 코드를 가볍게 짜긴 이만한 언어가 있나 싶습니다.
   좋아하는 언어 / 단점 / 장점을 달아주시면 감사하겠습니다 (__ )/

   Python 입니다.
   올라운드 개발언어이며 생산성이 뛰어납니다.
   런타임 속도가 조금 느리긴하기만, 꾸준히 개선되고 있습니다.

   멋진 언어죠! 저도 프로그래밍할 때 청테이프처럼 어디서든 가져다가 때울 수 있어서 정말 유용하게 쓰고 있어요.

   좋아하는 언어 : Javascript
   단점 : 회사에서 좋아하는 사람이 극히 드믑니다.
   장점 : 그래서 누가 간섭하지 않아 내 마음대로 짤 수 있습니다.....는 농담이고요, client용으로 만든 소스를 Server용으로 그대로 사용할 수 있는게 마음에 듭니다.

   JS는 생산성도 괜찮고, V8 엔진의 파워로 빠르고, 정말 모든 걸 할 수 있는 멋진 언어죠. 서버부터 클라이언트까지... 게다가 부족한 코드 자체의 안정성이나 가독성은 TS로 보충도 할 수 있어서, 미래가 기대되는 언어이기도 합니다. 특히 제가 웹을 만들땐 거의 무조건 React.js + TS 서버 프레임워크로 짜고, CLI 앱은 Node.js로 짜는데 정말 좋더고요.

   전 Rust로 프로그래밍할 때 제가 손에 잡고있는 게 선명하게 느껴져서 좋아요.
   선명한만큼 모든 걸 수동으로 끼릭끼릭 만져줘야해서 남들한테 추천은 못하겠어요.

   권한과 책임이 비례하는 무시무시한 언어군여(... ) 뭔가 처음에는 C++의 진화형이 아닌가 싶었는데. 요즘은 C의 진화형인 것 같은 느낌이 드는 언어인 것 같습니다.

   C#입니다.
   강타입 언어
   업데이트가 활발해 모던 랭귀지 장점을 모두 흡수
   LINQ
   강력한 비주얼 스튜디오
   MSDN까지 코드 짤때마다 항상 행복합니다

   크으으... C#은 정말 옛날부터 버전이 무섭게 올라가더라고요. 뭔가 프로젝트 하나를 해보고 싶은데 뭐부터 시작할까 고민중입니다 ㅋㅋㅋ. 백엔드롤 C#으로 만들고 싶은데...

   perl이요.
   다른 언어들과 달리 언어학자가 만든 언어답게 문맥에따라 변수를 생략한다든지
   근대 언어의 타입추론처럼 문맥에따라 적당한 타입으로 변환해준다든지 이런 기능 때문에 좋아합니다.

   오오... 생산성이 멋져보이군여. 쉘 스크립팅 할 때 최고일 것 같아요. 빠르게 짜고 적당히 돌릴 만한 코드로..

   저는 최근 10년여간 거의 Ruby 로만 코딩하고 있네요.
   짤 때 행복하다는 것 + Rails의 존재가 Ruby의 가장 좋은 점 아닌가 싶습니다.
   다만 남의 코드를 읽을 때는 넘나 고통스럽습니다....
   루비스트들이 점점 사라져서 외롭습니다.

   저는 최근에야 Ruby를 접했는데, 이걸 왜 이제야 접했을까 싶었어요. 장점이 많은 언어임에도 상대적으로 많이 쓰이지 않는다는 점 때문에 빛이 바래는 안타까운 언어같아요.

   Ruby! 언어가 참 멋지죠. 문맥 구조가 다른 언어에 비해 독특해서 인상 깊었는데, 한번 적응되면 엄청 깔끔해서 보기 좋더라고요. 특히 if를 후행에 붙이는 건 다른 언어도 있으면 짱 편할 것 같은(...

   golang 이요.
   비동기처리 문법이 다른언어 대비 간결하다고 생각하구요.
   웹개발에 많이 사용하는 언어들 중에 드물게 컴파일해서 바이너리 실행파일을 생성 할 수 있고..
   그래서 요즘 많이들 쓰는 docker로 이미지 만들때 베이스 이미지를 alpine 같은 작은걸 쓸 수 있어서 이미지 사이즈도 작아지고... 자체 웹서버 구현체의 성능도 좋아서 웹서버 개발에 최적이라고 생각합니다.

   golang이 처음 나올 때부터 관심있게 지켜보고 있는데, 정작 계속 node.js로만(... ) 사이드 프로젝트를 하고 있어서 인연이 잘 없군여. ASP.NET과 Node.js 사이에서 계속 고민 중인데. golang도 추가해야할 것 같아요(..) 다음 플젝은 익숙한 곳에서 벗어나는 걸로 시작해봐야..
"
"https://news.hada.io/topic?id=4578","GeekNews 잔디,Teams,Discord 봇 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GeekNews 잔디,Teams,Discord 봇 추가

   - 긱뉴스에 새로운 뉴스가 올라오면 알려주는 웹훅(WebHook) 봇들 신규 추가
   ㅤ→ 잔디(Jandi)
   ㅤ→ MS Teams
   ㅤ→ Discord
   ㅤ→ Slack
   - 서버에서 웹훅을 제거하면 자동 연결해제
   - 웹훅 생성 및 연결을 위한 권한 필요

   정말 감사합니다. RSS가 밀려서 이제는 죽거나 제대로 제공되지 않는 사이트들이 많은데 다양한 플랫폼을 지원해주셔서 정말 감사합니다. RSS피드 이후로 저도 슬랙이랑 디스코드를 통해 많은 글들을 보는데요. 업무적으로는 슬랙을 이용하고 개인적으로는 검색에 제한이 없는 디스코드를 사용하고 있습니다. 기존에는 트위터를 연동해서 보았는데 웹훅으로 제공해주셔서 어려움 없이 바로 설치했습니다.

   주소를 바로 표시하지 않고 제목에 링크하셨는데 디스코드 양식을 아래와 같이 변경해주시면 더 좋을 것 같습니다.
   `GeekNews`
   **{{제목}}**
   {{URL}}
   >>> {{내용}}
   제목으로 숨겨서 처리하면 Embed(Preview)가 동작하지 않는 경우가 발생하는데 긱뉴스가 그런 듯합니다. 아예 프리뷰가 뜨지 않습니다. 제 경우는 소스표기를 중요하게 여겨서 다른 곳에 공유할 때도 원본URL을 같이 공유하는데 모바일에서 꾹 터치하여 [텍스트 복사하기]를 누르거나 PC에서 마우스로 드래그해서 복사할 때 URL이 표시되지 않습니다. UTM 길게 표시되는 것이 신경쓰이시는 것이라면 저는 괜찮습니다. 😊

   아 프리뷰는 슬랙/디스코드/팀스/잔디 모두에서 일부러 나오지 않게 메시지를 구성한 것입니다.
   꽤 많은 채널들에 동시에 뿌려지고 있는데, 프리뷰를 위해 서버에 접속하게 되면 서버에 단시간 부하가 급증하게 되어서요. 최소한의 서버 부담으로 운영하고자 함이니 이점은 양해 부탁드립니다.

   GeekNews 긱뉴스 같이 작성하는 이유는 검색하기 수월하게 하기 위해서입니다. 해외 서비스이다보니 단어형태의 검색을 지원하는데 한국어가 조사가 많다보니 매우 불리합니다. Embed(Preview) 검색이 지원되나 Embed가 누락되는 경우를 위해서 작성하고 있습니다. 현재 GeekNews로 검색해보시면 검색결과에 표기되지 않는 것을 알 수 있습니다.

   엇 검색 테스트 해보니 제목/내용 및 GeekNews 봇 제목으로도 잘되는데 어떤게 안된다는 것인지 조금 더 설명을 부탁드려도 될까요 ?

   답변 감사합니다. 신경쓰지 못했던 부분인데 그러한 문제가 있군요. 제가 개발자가 아니다보니 사진을 첨부하여 설명하는 것이 더 이해하시기 쉬우실 것 같은데 사진 첨부가 안되는 것 같아요 ㅠㅠ
   예를 들어, 디스코드 #테크뉴스 채널에 긱뉴스, 블로터, 테크니들 등의 다양한 테크 미디어가 올라온다고 하면 이 중에서 긱뉴스만 보려고 하면 보기가 어렵습니다. 맨 위에 `GeekNews`라고 표시해주시면 검색에 유리할 것 같습니다. 안써도 Embed가 작동되면 GeekNews가 Embed상 Author에 써있기 때문에 검색이 됩니다. (예전 디스코드에서는 Embed는 검색에 걸리지 않았지만 현재는 Embed도 검색에 반영됩니다) 검색방법이 있긴 한데 from: GeekNews#0000 이렇게 봇으로 검색하면 되는데 내용에 포함되면 그냥 GeekNews만 입력해서 볼 수 있어 편리합니다. (게다가 봇계정이라서 그런지 #0000을 붙여도 자꾸 누락이 되어서 디스코드에서 여러 방법으로 검색에 유리하도록 만드는게 좋은 것 같습니다.)

   https://i.imgur.com/NcYM8GI.png https://i.imgur.com/Fk7LlJf.png

   감사히 잘 사용하고 있습니다.
   슬랙에서 보니 긴 메시지는 말줄임표(...)로 생략되서 전달되던데요
   혹시 봇에서 줄여서 보내는 건가요?
   생략없이 다 보내 주시는 것도 가능 할까요?

   네 현재는 봇에서 줄여서 보내고 있습니다. 굉장히 긴 글들도 많아서요.
   전체 내용을 다 보내면 채널이 복잡해 지더군요.
   그리고 가능하면 사이트에 오셔서 Vote 도 하시고 댓글도 달고 하셨으면 해서요 ^^;
   차후에 웹훅형태가 아닌 각 도구별 대화형태의 정식봇을 만들면 그때는 별도 옵션을 생각하고 있습니다.

   앗! 제 생각이 좀 짧았네요 ^^;;
   주로 눈팅만 하지만 매일 감사히 보고 있습니다.
   감사합니다 ^^

   오 축하드려요

   mattermost도 추가해주시면 감사합니다..!

   넵 백로그에 넣어두겠습니다. 제가 Mattermost 뉴스는 여러번 올리긴 했는데, 정작 안써봐서.. ㅎㅎ

   혹시 mattermost 봇 개발은 어떻게 진행되고있으신지요...?

   현재 슬랙/디스코드를 제외한 다른 봇들도 사용률이 그닥 안좋아서요. 당분간은 다른 봇 지원을 더 늘리지 못할 것 같습니다.

   오 감사합니다. :)

   감사합니다. :-)

   슬랙봇은 나름(?) 안정적으로 동작중이며 현재 국내 700여개의 회사들이 이용중입니다.
   잔디/팀스/Discord 는 초기에는 불안정 할 수 있으니 참고 부탁드립니다.
   각각의 서버에서 웹훅을 삭제하거나, 접속이 오류나는 경우에는 자동으로 연결이 해제됩니다.

   혹시 위 4개의 도구들 외에 Webhook 으로 연동해서 받아볼 수 있는 도구들은 말씀해주시면 추가하도록 하겠습니다.

   혹시 google chat도 추가해주실 수 있나요?

   https://news.hada.io/googlechatbot 추가되었습니다!

   구현 목록에는 등록되어 있습니다 ㅠㅠ 조금만 기다려 주세요
"
"https://news.hada.io/topic?id=4565","Console Do Not Track (DNT)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Console Do Not Track (DNT)

   - TUI/콘솔 앱에서 Telemetry에 대해서 쉽게 Opt-Out 할 수 있도록 하는 표준 제안
   - Gatsby, Homebrew, Syncthing, Google Cloud CLI, AWS Serverless CLI, Azure CLI 등은 모두 다른 설정값을 통해서 Telemetry를 끌 수 있음
   - ""export DO_NOT_TRACK=1"" 표준 환경 변수를 통해서 모든 추적/리포팅/자동업데이트를 끌 수 있도록 하자는 것
   - netdata 와 tilt 는 수용했고, homebrew,gatsby 등에는 PR 보낸 상태
"
"https://news.hada.io/topic?id=4581","컴퓨터비전으로 회의중 딴짓하는 국회의원 잡아내기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       컴퓨터비전으로 회의중 딴짓하는 국회의원 잡아내기

   - 벨기에 국회의원들의 회의는 유튜브를 통해 생중계되는데, 파이썬의 keras 를 이용해 회의중 휴대폰으로 딴짓하는 국회의원을 검출
   - 트위터, 인스타그램과 연동해, 딴짓행위가 검출되면 해당 정치인 태그를 달고 포스팅해 박제

   ㅋㅋㅋㅋㅋ

   우리나라도 인터넷의사중계시스템 https://assembly.webcast.go.kr/ 에서 생중계 하긴 하는데.. 뷰어 EXE 설치해야 하는군요 ㅡ.ㅡ;

   국회방송 유튜브 채널에서 라이브스트림도 해줘서 이걸 활용할 수도 있을것 같네요
   -국회방송 유튜브
   https://www.youtube.com/channel/UCL-WOj1FxKR8Hlzg5tvnWKg

   오 유튜브도 동시 송출하는 군요. Dries Depoorter 가 오픈소스면 빠르게 해볼 수 있을텐데 아쉽네요.

   오픈소스가 아닌 것도 아쉽고, 독자구현 한다해도 국내의 경우 마스크착용+아크릴판 때문에 쉽지 않아보이네요..
"
"https://news.hada.io/topic?id=4656","Ask GN: 개인적으로 생각하시는 개발자 필독서가 있으신가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 개인적으로 생각하시는 개발자 필독서가 있으신가요?

   서적 분야/카테고리를 가르지 않고,
   개인적으로 생각하시는 개발자 필독서를 한권 꼽아주실 수 있으신가요?

   많은 책을 읽진 않았지만
   '프로그래머로 사는 법' 추천드립니다.

   클린 애자일 추천드려봅니다.
   애자일 전반에 대한 그림을 그려보기 좋은 책입니다

   해커문화를 다룬 ""해커, 광기의 랩소디""

   동기부여가 되는 좋은 책이라 생각합니다

   제 인생의 책은 Code Complete였습니다

   엉클밥의 클린코더 추천 합니다 대개의 경우에 '클린코드' 로 착각하시는 분들이 많으신데, 좋은 개발자가 되려면 어떻게 해야하는가에 대한 이야기를 합니다. 직접 회사에서 Action Item으로 실천해볼 항목이 많습니다. 개인적으로 특히 개발을 시작하시는 분들께서 가장 먼저 읽어야 되는 책이라고 생각합니다 :)

   ""페르시아의 왕자 : 개발일지"" 입니다.
   이 책은 개발자가 아니더라도 자기개발을 위한 필독서로 추천하고 싶습니다. 그 이유는 다른 자기개발 서적들은 성공한 이후에 쓰여진 것들 뿐인데(그래서 기억 왜곡 및 미화가 상당히 심함) 이 책은 조던 메크너가 쓴 일기를 날 것 그대로 책으로 낸 거여서 누군가가 성공하기 전에 어떤 인생을 살면서 어떤 고민을 했는지 왜곡없이 알 수 있습니다.
   중간중간 개발자가 게임을 만들기 위해 어떤 노력을 했는지, 특히 최적화에 얼마나 공을 들였는지 엿볼 수 있습니다.

   아.. 이거 원서말고 번역서도 나왔을까요?

   https://fabianist.tistory.com/716 전자책으로 나와있네요

   Release It
   단순이 동작하는 소프트웨어가 아닌 험한 세상에서 살아남을 소프트웨어를 만들기 위한 개념과 감각을 익히는데 큰 도움을 주었습니다.

   ""역사 속의 소프트웨어 오류"" 추천드립니다
   코드한줄의 무게감이 다르게 느껴지실지도..

   비슷한 이야기가 많이 나오는 책으로 매트 파커의 『험블 파이: 세상에서 수학이 사라진다면』(다산사이언스, 2020)도 있습니다. 소프트웨어에만 국한된 내용은 아니지만, 소프트웨어와 관련된 실수로 인한 사례들이 많이 소개되어 있습니다.

   개인적으로는 아래 두가지책이 아키텍처와 운영 측면에서 최신 웹서비스들을 가장 정확하게 그리고 있는 것 같습니다.
   - Building Microservices: Designing Fine-Grained Systems
   - The Site Reliability Workbook: Practical Ways to Implement SRE

   찰스 펫졸드의 ""CODE""를 추천합니다.

   이 책도 정말 좋죠. 단순한 전신 회로와 그걸 잇는 릴레이로부터 시작하여 컴퓨터의 작동 방식을 아래에서부터 차례대로 쌓아올려 어떻게 추상화가 되어 있는지 알아보는 구성으로, [밑바닥부터 컴퓨터 만들기]류 책의 원조라 할 수 있습니다.

   Ruby를 깨우치다 : Ruby 인터널의 이해입니다.
   Ruby의 대한 책이라기보단, 프로그래밍 언어를 프로그램이 어떻게 이해하는 지 자세하고 친절한 설명이 적혀 있어서 좀 더 일찍 읽었으면 더 좋았지 않았나 싶었어요.

   저도 ""실용주의 프로그래머""가 제일 처음 떠오르는데, 벌써 추천해주셔서, ""리팩토링""을 꼽아봅니다.
   그리고 https://mysetting.io/books에 개발에 도움이 되는 책 목록이 있는데, 대부분 제가 추천하고픈 책들을 모아두었더군요.

   [함께 자라기]입니다. 애자일로 가는 길이라는 부제가 붙어 있는데. 학습과 성장, 협력, 성과에 대해 근거 기반으로 충실한 이야기를 담고 있어요.

   저는 ""로지코믹스"" 추천합니다. 컴퓨터과학의 근간인 수학이 밟아온 길과 그 사이에서 고민하고 방황한 인물들의 서사를 만날 수 있습니다.

   필독서의 반열에 오를 만큼 유명한 책은 아마 다른 분들도 많이들 추천해 주실 테니, 그런 것보다는 방향을 살짝 바꿔서 프로그래밍 입문자에게 도움이 될 만한 책을 하나 골라 볼까 합니다.
   * 니시오 히로카즈의 『코딩을 지탱하는 기술: 원리로 깨우치는 프로그래밍 기법』(비제이퍼블릭, 2013)
   여러 프로그래밍 언어에서 공통적으로 등장하는 각종 개념과 그 개념이 왜 등장하게 되었는지를 여러 언어를 비교해 가며 소개하는 책입니다. 저 개인적으로는 정말 많은 도움이 되었던 책입니다.
   이 책 말고, 지금 읽고 있는 책도 프로그래밍에 입문하여 기초 문법은 다 뗐는데 그 다음에는 뭘 해야 할지 모르겠는 사람에게 딱 좋을 것 같다고 생각하여 추가로 추천합니다.
   * 라울-게이브리얼 우르마·리처드 워버턴의 『실전 자바 소프트웨어 개발: 4가지 프로젝트로 배우는 최신 자바 개발 기법』(한빛미디어, 2020)
   Java 언어 기반으로 SOLID 원칙이나 테스트 주도 개발, 디자인 패턴 등의 내용을 간략히 소개하고, 이를 실제 코드에 적용하는 연습을 할 수 있는 책입니다. 책 자체의 분량은 그리 많지 않지만, 연습 문제를 모두 풀어가며 연습할 가치가 있습니다.

   두 권 모두 목차만 봐도 프로그래밍과 개발에 필요한 핵심을 담고있어 보이네요. 추천 고맙습니다.

   한 권만 꼽으라면 '실용주의 프로그래머'
   3권을 꼽으라면 여기에
   '해커와 화가', '그냥 재미로' 추가하겠습니다.

   너무 올드하고 베이직하지만 ""실용주의 프로그래머"" 를 꼽겠습니다.
"
"https://news.hada.io/topic?id=4667","Daptin - 오픈소스 Backend as a Service & Headless CMS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Daptin - 오픈소스 Backend as a Service & Headless CMS

   서비스를 만드는데 필요한 기본 백엔드 기능을 모두 제공하는 오픈소스
   - 사용자 관리 : 유저 및 그룹, OAuth 소셜 로그인, 2FA, JWT 기반 인증 & 권한관리, 레이트 리밋, 커넥션 쓰로틀링
   - 데이터 관리 : 스키마 정의, CRUD API 및 페이징/검색/릴레이션, 파일(이미지,비디오 등) 저장
   - 저장소 관리 : 로컬, gDrive,S3,Dropbox,FTP..
   - 사이트 관리 : 다수의 웹사이트 생성, LetsEncrypt로 HTTPS지원, HUGO 로 스태틱 사이트 생성, 폴더를 FTP로 노출시키기
   - 연동 및 액션 관리 : 워크플로우를 생성하고 API로 공개, Open API 스펙으로 써드파티 API 호출
   - 메일 관리 : SMTPS 와 IMAPS로 이메일 서비스로 사용 가능, 멀티 호스트 네임 이메일 서버, 멀티 이메일 계정 지원
   - 대시보드 제공
   - MySQL / Postgres / SQLite [Default]
   - JSON API / GraphQL for CRUD APIs
   - OAuth : Google, Github, Linkedin
   - State Tracking API : 블로그의 경우 draft/edited/published 등으로 구성 가능
   - React, Vue.js, Angular, Android, iOS 등 모든 프레임워크/클라이언트와 연동 가능
   - Go 오픈소스
   ㅤ→ 매우 적은 메모리 사용량 및 수평 확장 가능
   ㅤ→ 다양한 하드웨어에 배포 가능 : arm5,arm6,arm7,arm64,mips,mips64,mips64le,mipsle

   다른 BaaS 오픈소스들에 비해서 간단한 설치와 다양한 기능이 장점인듯 합니다
   - Supabase 공개 베타 시작 - 오픈소스 Firebase 대체제 https://news.hada.io/topic?id=3347
   - CloudBoost - 자바스크립트 기반 오픈소스 BaaS 엔진 https://news.hada.io/topic?id=196

   요즘 golang으로 백엔드 개발에 관심이 많은데요.
   보자 마자 확! 끌리네요.
   '이번주말은 이거다!!!'
   감사합니다~

   아주 간단히 백엔드를 셀프호스팅 가능하고 편집이 가능해서, 이거 기반으로 테스팅을 좀 해보려고 합니다. 재미날 것 같아요!
"
"https://news.hada.io/topic?id=4641","Microsoft, Web-Dev for Beginners 강의 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Microsoft, Web-Dev for Beginners 강의 공개

   - MS Advocates 팀이 만든 12주, 24강짜리 웹 개발 기초 강의
   - Javascript, CSS, HTML 기초
   - 강의마다 비디오, 수업 전/후 퀴즈, 강의 문서, 프로젝트 기반 학습 및 단계별 가이드, 연습문제 등 제공
   - 타이핑 게임, 브라우저 확장, 스페이스 인베이더 게임, 뱅킹 앱 등의 과제를 만들어보면서 배우기

   - Microsoft, ML for Beginners 강의 공개 https://news.hada.io/topic?id=4564
   - Microsoft, IoT for Beginners 강의 공개 https://news.hada.io/topic?id=4627
   - MS Beginner's Series to: Rust [유튜브] https://news.hada.io/topic?id=4517
   - MS의 Rust 기초 가이드 [한국어] https://news.hada.io/topic?id=4095
"
"https://news.hada.io/topic?id=4550","IE를 버리면 사용할 수 있는 CSS 명세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        IE를 버리면 사용할 수 있는 CSS 명세

   다들 아시는 것처럼, 마이크로소프트는 인터넷 익스플로러(이하 “IE”)에 대한 기술지원을 2022년 6월 15일부로 종료합니다. 그리고 시장조사업체 스탯카운터의 최신 자료에 따르면, 2021년 6월 기준으로 전세계의 데스크톱용 웹 브라우저 중 IE의 점유율은 1.45%(국내는 5.84%)에 불과하지요. 아직도 회사 내부적으로는 IE를 사용하겠다는 국내 대기업이 있다는 것을 최근 개인적으로 경험했습니다만, 언젠가는 유지보수 프로젝트에서조차 IE 호환성을 고려하지 않아도 되는 날이 올 것이라 믿습니다.
   IE를 버리면 사용할 수 있는 CSS 명세에 관해 어떤 분께서 잘 정리해둔 글을 소개합니다. (한국어) 다르게 말하자면 CSS 기능 중 IE에 발목잡혀 있는 것들의 목록인데요, 다들 하루빨리 IE의 주박에서 탈출할 수 있기를 기원합니다.
   참고 - 스탯카운터의 데스크톱용 웹 브라우저 점유율 정보:
   https://gs.statcounter.com/browser-market-share/desktop
"
"https://news.hada.io/topic?id=4653","Grafana, Loki, Tempo의 라이센스가 AGPL이 되면 무슨 영향을 받을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Grafana, Loki, Tempo의 라이센스가 AGPL이 되면 무슨 영향을 받을까?

   - Grafana Labs에서 자사의 프로젝트를 Apache 라이센스에서 AGPL v3 라이센스로 변경
   - GNU AGPL은 어떤 라이센스 인가
   - AGPLv3가 발동되는 상황 : 수정(modify), 전파(propagate), 운반(Convey)
   - 그래서 Grafana는?
   ㅤ→ 내부에서 Grafana를 쓰는 경우
   ㅤ→ Grafana를 서비스로 제공하는 경우
   ㅤ→ Grafana를 포함해서 배포하는 경우
   - AGPL이 발동되었지만, 프로젝트의 소스 코드는 공개할 수 없는 경우에 선택권
"
"https://news.hada.io/topic?id=4603","Wayback Machine 다운로더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Wayback Machine 다운로더

   - 웹사이트 전체/일부를 Internet Archive Wayback Machine 이 아카이빙한 자료에서 다운 받아주는 오픈소스
   - 사이트의 최근 파일/전체 날짜별 파일/특정 날짜(from ~ to) 파일을 디렉토리 구조로 다운 받음
   - index.html 페이지를 Apache/Nginx 에서 사용 가능하게 자동 생성
   - Wayback Machine 이 수정한 버전이 아닌 오리지널 버전을 다운로드
   - --list 옵션으로 다운로드 없이 URL 만 JSON으로 저장 가능
   - Ruby 오픈소스

   Local Wayback Machine 서비스를 만들고 싶은데... 지금 하는 프로젝트를 정리하고 가야해서 =ㅁ =... 아쉽네요.
   Wayback Machine이 이미지가 깨지고 / UI가 구리고(... ) / 그렇다고 Pocket은 페이지 저장이 아니라 원문 저장인데, 이게 저장이 안 되는 곳도 있어서. 오픈소스로 페이지를 크롭한 다음 사용자의 로컬 머신이나 원격지에 저장하고, 지금까지 저장한 페이지들을 Pocket처럼 예쁘게 리스트업 해준 다음. 누르면 아카이빙한 페이지로 가는 프로젝트를 하고 싶네요.

   이미지는 저장시에 Save outlinks 옵션을 체크해야 제대로 되는 경우도 있는 것 같습니다.
   기다려 봅니다..ㅎㅎ

   저도 기다리겠습니다.
   추가로.. React 로 만든 사이트도 잘 저장해주시면.. 호호호

   기다리고 있겠습니다 흐흐흐
"
"https://news.hada.io/topic?id=4615","BizApi - 스타트업들을 위한 API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BizApi - 스타트업들을 위한 API

   개인적으로 진행하고 있는 프로젝트를 소개해드립니다.
   목적은 스타트업들이 초기에 필요한 다양한 API 기능을 제공하려합니다.
   현재 모든 기능은 무료이며, 다양한 분야의 기능을 추가하려합니다.
   현재는 주소 관련 API 개발 중이며 아래와 같은 기능이 존재합니다.
   - 대한민국 시도 목록 조회
   - 대한민국 읍면동 목록 조회
   - 위/경도 기준 동 조회
   - 위/경도 반경 기준 건물 목록 조회
   많은 피드백 및 기능 제안 부탁드립니다.
   감사합니다. :D
   (geeknews 잘 보고 있는데 이렇게 홍보 글을 적어도 되나 모르겠네요, 문제가 된다면 삭제 하겠습니다)

   다른 API는 다음에 공개하시면 어떨지 모르겠지만,
   주소는 행안부 검색 API를 쓰는게 더 좋지 않을까요? 무슨 이점이 있을까여??

   사실 기반 데이터는 행안부에서 받아서 처리해놓은 상태여서요!
   다만 행안부의 API 는 사이트 접속해서 사용하려면 과정이 복잡하게 느껴지고.
   이번에 추가 된 위/경도 기준의 API 는 지원을 안하는 것 같더라구요.
   말씀해주신대로 좀 더 다양한 기능을 만들어 보려합니다 ㅎㅎ; 그래야 큰 이점이 생길거 같아요!
   그러면서도 고민인게 주소 API 에 계속 시간을 써야할지.. 다른 셀링 포인트를 찾아야할지가 고민입니다!
   의견 감사드립니다!

   스타트업들이 사용하는 API 들이 모여있다면 초기 개발할 때 편하겠어요.
   페이지 가보니 API 문서 차례를 다 훑어야만 어떤 기능이 있는 지 알 수 있어서요.
   긱뉴스 본문에 써주신 것처럼 어떤 API 가 제공되는 지 한눈에 볼 수 있으면 좋겠어요.
   그리고 테스트 해보니 현재 토큰 받는 것은 앞에 address 붙여야 동작하네요.

   | 스타트업들이 사용하는 API 들이 모여있다면 초기 개발할 때 편하겠어요.
   사실 이런 관점에서도 앞으로 어디에 초점일 맞추고 해야할지 고민입니다 ㅜㅜ, 스타트업에서 필요한 기능이면서 사용할만한 필요성을 느껴야하는 기능이여야하는데.. 짐작이 잘 안되네요;;
   너무 코어한 기능이면 내재화를 하려하지 않을까 싶기도하면서,, 현실은 개발자가 적은 스타트업은 필요로 할거 같다는 생각도 들고..
   더 많은 고민을 해보겠습니다!

   말씀해주신 부분 고려해보도록 하겠습니다 귀한 피드백 감사드립니다!
   | 현재 토큰 받는 것은 앞에 address 붙여야 동작하네요.
   혹시 이것은 어떤 이슈인지 알려주실 수 있을까요?
   제가 재현해보려 해봤을때는 토큰 발급 후 `TK_ADDRESS_****` 으로 오고 복사하여 바로 사용가능한데 어떤 이슈 인지 알려주신다면 감사하겠습니다!

   문서상, 토큰 발급은 bizapi.io 로 되어 있는데 403 오류가 났고요, address.bizapi.io 로 했더니 동작했어요.

   헉! 이런 기초적인 이슈가;;;; 수정하겠습니다, 알려주셔서 감사드립니다!!!

   아직 MVP 단계인듯 한데, 처음에 누군가가 사이트에 접근했을 때
   - 이 서비스는 무엇인가
   - 어떤 기능을 제공하는가
   - 이 서비스의 강점은
   - 사용 약관
   정도는 있어야, 한번 접근하고 나서 언젠가라도 다시 들어올 수 있게 됩니다.
   (그걸 위해 새로운 기능에 대한 이메일 알림 정도는 받을 수 있게 해두면 더 좋습니다.)
   국내에서 비교군이라고 생각할 수 있는 API Store를 참고하시면 좋을 것 같아요
   - https://www.apistore.co.kr/main.do
   해외에서는 RapidAPI 의 Marketplace 가 참고가 될 것 같습니다.
   - https://rapidapi.com/marketplace
   해외 주요 API 프로바이더 페이지를 참고하셔서 장점을 빼오시면 좋고요.
   - https://stripe.com/ : 하단에 자신들의 API가 얼마나 쉬운 지를 보여주는 부분을 참고하세요
   - https://www.skyflow.com/ : ""What if privacy had an API?"" 문장이 이 서비스가 어떤 API를 제공하는지 보여줍니다.
   그리고, 요즘은 ""무료"" 라고 하면 어디까지 사용할 수 있을지 가늠하기 어렵고,
   특히나 API는 서비스 지속성이 가장 큰 이슈라서요.
   비용이나 Rate Limiting에 대한 고려가 있으면 더 좋을 것 같습니다.
   ""언젠가 유료화가 되면 어쩌지 ?"" 보다는 ""일 10000호출이면 뭐 그냥 계속 쓸만하겠네"" 정도가 더 좋지 않을까 생각이 듭니다.
   상세 API 페이지도 사용가이드 페이지 말고, API별 페이지가 있으면 좋을 것 같아요.
   긱뉴스의 뉴스란은 매일 뉴스들이 올라오다 보니, 초기 서비스들은 좀 빨리 앞면에서 멀어지게 됩니다.
   차후에 이런 초기 서비스들이 조금 오래 머물 수 있는 Show 섹션을 열면 그때 다시 한번 더 공개하시면 좋을 것 같습니다.
   사용자(스타트업)가 한번 보고 기억에 남을 MVP가 어떤건지 조금 더 생각해 보시고 거기까지 구현을 목표로 하시면 어떨까요.

   아직 매우 작은 기능만 만들어 놓은 상태라 말씀해주신 여러 관점이나, 외부 참고할 만한 생각을 못했네요.
   적어주신 내용 하나하나 도움이 되는 것 같습니다!
   사실 제일 막연한 것이 어디에 포커스를 맞춰서 진행해야할지 고민중입니다 ㅜㅜ
   제가 아이디어를 얻었던 서비스는 아래 서비스인데, 막상 혼자 개발을 해나가려하다보니 어디에 집중해야할지 계속 고민이 좀 되네요..!
   https://clayful.io/
   현재는 개인 프로젝트 수준이지만, 말씀해주신 항목들 참고하여서 서비스화 시켜 볼 수 있도록 노력해봐야겠습니다.
   귀한 피드백 감사드립니다!

   주소 API 문서는 여기서 바로 확인 가능합니다! https://bizapi.io/docs/address
"
"https://news.hada.io/topic?id=4654","Ask GN: 개발 말고 다른 취미 갖고 계세요 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 개발 말고 다른 취미 갖고 계세요 ?

   개발자 분들은 보통 취미가 개발이라고 합니다만.. 개발 외에 어떤 취미를 가지고 계신가요 ?
   키보드에서 멀어지면 주로 뭘 하시는 지, 아니면 언젠가 은퇴하면 뭐가 하고 싶으신 지 등이 궁금합니다.
   의자에만 앉아 있는 시간이 많아서 외부에 나가는 취미가 하나 있으면 좋긴 하겠는데 마땅한 게 없네요.

   키보드를 조립합..니다..

   코로나 이전에는 수영을 했는데, 요즘은 달리기를 합니다. 의욕이 앞서 한번에 달리는 거리를 무리하게 늘렸다가 다리에 피로가 안 풀려서 고생했네요. 일주일에 하루는 꼭 쉬어주면서 달리는 거리를 보수적으로 늘리고 있어요.

   식물을 키웁니다.
   생각보다 가격이 많이 싼데 이쁜애들이 많아서, 하나 놓기 시작하니까 어것저것 놓게 되는데
   밤이면 눕고 아침이면 일어나는 애들 보면 참 흐뭇합니다.
   밥먹을때 옆에 싱싱한 초록식물 하나 있으니까 밥맛도 달라요~~
   아침에 일어나서 식물보면서 멍때리기도 좋고 ㅋㅋㅋㅋ

   수영과 프리다이빙입니다.

   예전에는 풍경사진을 찍곤 했었는데요, 요즘은 웹소설 읽는 정도가 취미입니다.

   축구 하러 가는게 거의 유일한 즐거움입니다. 돈 많이 벌어서 축구팀 운영해보고 싶네요.

   그림 소모임을 만들어 주기적으로 그리고 있고, 스도쿠를 가끔 풀어요.

   보드게임이요 :-)

   자전거와 그림 그리기는 꾸준히 하지 못해서 지금은 독서와 사진 정도가 남아 있습니다. 운동을 취미로 추가하고 싶은데 마음처럼 되지 않네요.

   틈 날 때마다 주로하는 취미 활동은 개발이고, 주기적으로 악기 연습을 하고 사람들과 합주를 합니다. 2주일마다 지인들과 한 번 모여서 모각코를 했었는데, 요즘에는 사람들과 모이기 힘들어서 합주와 모각코는 쉬고 있습니다.

   전 개발자라는 직업을 갖고 있음에도 취미는 개발이 아닌 케이스 입니다.
   물론 공부도 하긴 합니다. (회사에서 비는 시간에..)
   취미는 게임, 여행, 독서
   컴퓨터를 초등학교 3학년때 접한 후에 자연스럽게 정말 많은 게임을 즐겼었고
   성인이 되어 돈을 벌면서 어느정도 돈이 모였을때 부터는 1년에 한번 이상은 꼭 비행기를 탔었던것 같아요.
   출퇴근 하면서는 책을 자주 읽었었고,
   메인은 역시 게임이네요, 인디 게임을 상당히 좋아하고 많이 찾아서 해보기도 하고,
   스토리텔링이 좋은 게임을 좋아하는 편이에요
   하지만 지금은 생후 9개월된 아들과 놀아주고, 먹여주고, 산책나가는게 전부가 되어 버렸습니다 ㅎㅎㅎ

   2021 Jetbrains 에코 시스템 설문조사에서 개발자 중 57퍼센트가 '개발이 취미다' 라고 말한만큼 저도 개발이 취미이긴 하지만...
   저는 글쓰기와 게임도 취미입니다. . 'ㅁ '!
   글쓰기는 판타지 소설을 만들고 있는데, 처음에는 판타지 소설을 적는 것만 즐거웠지만. 요즘은 그냥 뭐던 이야기를 적거나 글을 쓰는데 행복하네요. 재미가 은은하게 퍼져서 처음에는 즐기기 어렵지만, 게속 적다보면 은은히 빠져드는 느낌이 참 좋을 것 같습니다.
   게임은 비디오 게임과 보드 게임 둘 다 좋아합니다. TRPG도 좋아하고요. 비디오 게임은 제가 만드는 것과 하는 것 모두 좋아해서 매일 붙어 지냈다가 요즘은 글쓰는 게 더 재미있어서 시간이 좀 줄었고, 보드 게임은 친구와 테라포밍 마스를 했는데 너무 재미있어서. 하나하나 수집하고 구성요소를 뜯는 것만해도 꽤 행복하여 즐기고 있습니다. TRPG는 제가 이야기를 말하는 걸 너무 좋아해서 매주마다 온라인으로 하고 있고요.

   앗 제가 곧 보드게임 공간 마련하면 한번 초대를..
   저도 테라포밍마스 좋아합니다 ;)

   👍 헉 감사합니다 :D 친구가 확장팩도 들고 왔는데, 본편만 했을 때랑 다른 맛이 있더라고요 ㅋㅋㅋ

   저는 예전엔 레고를 조립하는게 취미였는데 공간의 문제로 요즘은 약간 시들해졌습니다.
   그리고 아무래도 혼자 즐기는 취미이다 보니, 사람과의 인터랙션이 좀 아쉬웠어요.
   지금은 보드게임이 메인 취미입니다.
   코로나 때문에 많이 하지 못해서 플레이보다 수집하는 쪽에 더 포커스가 된 것 같기는 한데요.
   사람들과 만나지 못하는 요즘은 보드게임 내에 들어가는 미니어처 도색을 주로 하고 있습니다.
   레고하고 보드게임을 비교해보니 이런 저런 장점이 있더라구요.
   - 사람들과 떠들며 게임을 할 수 있다.
   - 혼자서도 할 수 있는 게임들이 있고, 도색까지 확장하면 또 다른 취미가 되기도 한다.
   - 조립해서 자리를 차지하는 레고와 달리, 꺼내서 게임하고 다시 넣으면 그나마 공간을 덜 차지 한다.
   - 머리쓰는 게임들때문에 치매 예방에도 좋을 것 같다..

   스팀에 table top simulator 라고 있습니다.
   적절한 컴포넌트와 DLC 를 구매하시면 보드게임을 온라인으로도 할 수 있더라고요
"
"https://news.hada.io/topic?id=4618","트위터, 플릿(Fleets) 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         트위터, 플릿(Fleets) 서비스 종료

   - 순간적으로 떠오른 생각을 부담 없이 24시간만 공유하도록 만들었던 기능
   - 이용자 수가 예상치 만큼 증가하지 않아 8/3일부터 종료
   - 배운 점과 다음 프로젝트
   ㅤ→ 더 쉽게 트윗하기 위해 만들었지만, 다른 방식으로 보여주는데에 사용 됨
   ㅤ→ 텍스트 서식, GIF 스티커 등의 플릿 컴포저 기능을 트윗 컴포저로 통합
   ㅤ→ 플릿 대신 스페이스
   ㅤ→ 전체화면/세로 형식의 광고를 통해 알게된 것들을 검토할 것

   Fleets는 스냅챗 따라하기 라서 실패한 거 같긴 한데요.
   회사들이 만들었던 서비스나 기능을 종료하는 것은 종종 있지만, ( https://killedbygoogle.com/ )
   이렇게 공식 글을 통해서 종료 공지와 함께 배운 것들, 차후에 적용할 것들을 정리한건 좋은 것 같습니다.
"
"https://news.hada.io/topic?id=4674","Tinycon - Favicon 조작 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Tinycon - Favicon 조작 라이브러리

   - 브라우저 상단에 표시되는 favicon 에 알림버블 추가 가능
   ㅤ→ Gmail의 받은 메일 갯수 표시와 비슷한 기능 구현
   - width,height,font,color,background 등 조정 가능
   - 1000 넘어가는 숫자에 대해 단축어 지원 → 1k
"
"https://news.hada.io/topic?id=4624","압축률이 100%에 가까운 원주율 파일 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       압축률이 100%에 가까운 원주율 파일 시스템

   원주율의 소수점은 몇진법으로 쓰든 모든 숫자가 동일한 비율로 나타나는 normal number 라고 강력하게 추정됩니다.
   normal number 라면 가능한 모든 숫자 조합을 포함하는 disjunctive sequence 라는게 증명돼 있습니다.
   즉, 바이너리로 표현된 모든 컴퓨터 프로그램은 원주율 소수점 어딘가에 존재한다는 것이죠. 원주율 소수점의 위치만 찾아내면, 모든 정보를 저장하고 복원할 수 있게됩니다.
   400줄 텍스트 파일을 저장하는데 5분정도 시간이 걸린다는데, 제작자는 무어의 법칙을 믿으면 된다고... 합니다.

   예를 들면 01010 이런 데이터가 있다고 하면 원주율로 01010과 맞는 위치가 있다는 걸로 이해가 되네요. 그래서 위치 정보만 저장하면 된다는 거 같은데..
   최근 실리콘밸리 라는 드라마를 보고 있는데 압축률 알고리즘을 사용한 뉴 인터넷이 나오더라고요. 만약 압축률 100%가까운 원주율 파일 시스템이 활용할 수 있을정도로 기술이 발전한다면 뉴 인터넷이 정말 나오려나요?

   원주율이 어느 곳에서도 접근 가능한 공통 dictionary 역할을 한다고 보면 되겠네요.

   혹시 누군가 조금만 쉽게 풀어서 설명해주실 수 있나요? 원주율이 normal number인 것과 파일을 저장할 때 압축률이 100퍼센트인 것과 무슨 관련인지 잘 모르겠습니다.
   normal number라 함은, 가령 원주율이 5진수로 표현했을 때 소수점 아래 1000자리 까지 늘여놓으면 0,1,2,3,4 가 각각 200개에 근접하다는 말이지요?
   거기에서 더 나아가지 못하고 있습니다 ㅠ.

   제가 이해한것은 다음과 같습니다.
   normal number 이면 모든 가능한 숫자조합들이 한번 이상 나온다는게 증명돼 있습니다. 0110001... 이런 바이너리 넘버들도 전부 원주율 소수점 어딘가에 있을테구요. 그런 소수점의 위치만 기억한다면, 파일을 저장장치에 직접 저장할 필요 없이 파일을 복원해 낼 수 있습니다. 원주율 값은 수학 상수이므로, 저장장치에 저장해둘 필요없이 그때그때마다 원주율 값을 계산해서 사용하구요.

   > 모든 가능한 숫자조합들이 한번 이상 나온다는게 증명돼 있습니다
   이해했습니다. 정말 감사합니다!

   원주율을 오차없이 저장할 수 있는 스토리지가 있다면 애초에 압축을 할 필요가 없...

   원주율 값을 스토리지에 저장해놓고 쓰는게 아니라, 그때그때마다 원주율 값을 계산해서 쓰는것 같습니다. 그래서 100% 압축이라고 하는듯 하네요

   위키피디아에 압축률의 정의[1]를 찾아보니 일반적으로 생각하는 계산법이 아닌 것 같더군요.
   이거에 대해 제가 옛날에 쓴 글[2]이 있습니다. 오래 됐군요. ㅎㅎ
   [1] https://en.wikipedia.org/wiki/Data_compression_ratio
   [2] https://wp.me/pPGG8-41E

   압축률의 정의가 압축전 용량/압축후 용량 인걸 저도 처음알았네요. 깃허브에 100% compression 이라 적혀있길래 제가 착각했군요..

   위법 소수(Illegal prime)의 개념도 생각나는군요 ㅎㅎ
   https://wp.me/pPGG8-3sT

   굉장히 재미있는 이야기네옄ㅋㅋㅋㅋㅋㅋㅋ 이제 위법 파이의 시대인가...
   1. 위법적인 컨텐츠를 저걸로 압축한다
   2. 저걸로 나올 어딘가에 있을 파이값의 위치를 알려준다
   3. 위법!

   소수점 계산을 첫자리 부터가 아닌 특정 자릿수부터 계산하는걸 스피곳 알고리즘이라 부르는데, pifs 의 경우 Bailey-Borwein-Plouffe 공식을 이용해서 원주율의 자릿수를 계산한다고 합니다.
   https://ko.wikipedia.org/wiki/스피곳_알고리즘
"
"https://news.hada.io/topic?id=4632","Ask GN: 지금 내는 비용의 2배를 내더라도 사용하고 싶은 SaaS는?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask GN: 지금 내는 비용의 2배를 내더라도 사용하고 싶은 SaaS는?

   해외 스타트업 창업자들은 다음과 같은 도구를 추천하더군요.
   혹시 국내 스타트업 사용자 분들은 추천하시는 SaaS 들이 뭐가 있는지 궁금합니다.
   Canva, Datawrapper, Buffer, Semrush, Ahrefs, Integromat, Zapier, Cartfuel, Clickup, Descript, Katra, Snov, Missive, Shipstation, iiitent, miro, paperform

   1) https://www.canva.com/ - 협업 디자인 도구
   2) https://www.datawrapper.de/ - 시각화용 차트/테이블 그리기
   3) https://buffer.com/ - 소셜 미디어 도구
   4) https://ko.semrush.com/ - SEO & 콘텐츠 마케팅
   5) https://ahrefs.com/ - SEO 도구
   6) https://www.integromat.com/ - 워크플로우 자동화
   7) https://zapier.com/ - 워크플로우 자동화
   8) https://www.cartfuel.io/ - 인바운드 마케팅 도구인 HubSpot 에 쉽 게 결제 붙여주는 도구
   9) https://clickup.com/ - 프로젝트 플래닝 도구
   10) https://www.descript.com/ - 오디오 / 비디오 에디팅 협업 도구
   11) https://kartra.com/ - 마케팅 플랫폼
   12) https://snov.io/ - 세일즈 자동화 도구
   13) https://missiveapp.com/ - 팀이 공유하는 이메일 인박스 / 채팅 도구
   14) https://www.shipstation.com/ - 이커머스 판매자들을 위한 배송 소프트웨어
   15) https://www.iiintent.io/ - 매출 성장을 돕는 마케팅 도구
   16) https://miro.com/ - 온라인 화이트 보드 협업 도구
   17) https://paperform.co/ - 온라인 폼 작성 도구
"
"https://news.hada.io/topic?id=4636","Ask GN: 가장 유용한 단축키 하나만 소개해 주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask GN: 가장 유용한 단축키 하나만 소개해 주세요

   사람들은 잘 모르지만, 자주 사용하는 유용한 단축키 하나만 소개 부탁드려요.
   ""정확히 단축키는 아니지만, 요런 조합도 내 삶을 편하게 해줍니다."" 도 가능합니다.

   windows + shift + s 누르면 지정된 영역을 스크린샷 뜰수 있습니다. 툴 없이 부분 영역을 스크린샷 뜰 수 있으서 매우 자주 사용합니다.

   엑셀에서 컨트롤+; 치면 오늘 날짜입력

   단축키는 아니지만, caps lock 키를 ctrl 키로 대체하여 사용하고 있습니다.
   과거 ctrl 키에 대한 새끼손가락 부하가 커서 키보드를 알아 보던 중 해피해킹 키보드가
   이미 배열을 caps lock 위치에 ctrl 을 넣어놓은 걸 보고 바꿔서 꽤 오랜기간 해피해킹만 사용했습니다.
   (사실 ctrl 키에 대한 새끼손가락 부담은 cmd 를 위주로 쓰는 맥 보다는 윈도 쪽에서 압박이 심했네요)
   현재는 맥북 내장 키보드를 쓰거나 정전용량 무접점 방식의 다른 외장형 키보드를 사용하지만, 항상 caps lock 에 ctrl 을 배치해서 사용하고 있습니다.

   저는 윈도우에서 Ditto로 자주쓰는 단어나 문구를 단축키 설정해두고 사용해요.

   Ctrl+R - 새로고침 = F5
   hhhk 이나 60% 배열 사용할때 유용하게 사용 합니다
   실제로 코딩할때야.. 제일 즐겨 쓰는건 F7 F5 F9 F10 F11 이었지만....
   지저분한 올라온창을 한번에 내리는 Win+D 도 자주 사용합니다..

   그러고 보니 저는 [Ctrl] + [V] 대신 [Shift] + [Insert]로 붙여넣기를 자주 해서 웬만해서는 87키 배열이 마지노선일 것 같네요.

   네.. 저도 콘솔이나 리눅스 터미널 붙으면 shift insert 를 쓰는데 이때좀 살짝 헷갈리고 그럽니다 ㅎㅎㅎㅎ

   창이 많이 띄워져 있는 상황에서 창을 다 정리해버리기도, 새로 띄우기도 난감한 상황에서 새 데스크톱을 꺼내서 사용합니다.
   Ctrl + Win + D 로 새 데스크톱을 만들고,
   Ctrl + Win + ↔ 로 전환이 가능합니다.

   윈도우의 경우 StrokesPlus 라는 어플리케이션과 조합해서 원하는? 자연스러운? 마우스 제스처와 함께 쓰시면 맥 처럼 슉슉 말씀하신 데스크탑 전환이 가능합니다!

   단축키 조합이 겹치거나 풀편하면 Caps Lock 키를 하이퍼키 (Hyper key)로 사용 하시면 편리합니다.
   Caps Lock를 Ctrl + Shift + Command + Options 로 동작하게 맵핑 하는 것인데요.
   (꼭 CapsLock일 필요도 없고 위 4개의 Modifier key의 조합일 필요는 없지만 보통은 이렇게 사용합니다)
   CapsLock + ? 의 조합으로 단축키를 사용하면 겹치는 단축키도 없고 CapsLock이 은근 금싸라기 땅이라 손도 편합니다.
   보통 맥에서는 Karabiner를 사용하거나 최근에 BTT에도 해당 기능이 추가 되었습니다.

   단축키는 아니지만
   윈도우 커맨드 창(검색아이콘) 누르고 ""빠른 지원"" 입력하면
   상대방 IP를 몰라도 접속코드만 알아도 원격 PC 접근가능합니다.
   TeamViewer 와 거의 동일한 역할을 MS에서도 제공해주고 있습니다.
   MS가 TeamViewer 같은 소프트웨어를 죽일려고(?) 만든게 아닌가 싶습니다.

   구글 크롬 확장 프로그램 Vimium 설치하시고 아래 단축키 설정하시는 거 추천합니다. MMORPG 식 단축키 만들어봤는데 편하고 좋더군요
   # Insert your preferred key mappings here.
   map d removeTab
   map 2 scrollToTop
   map w scrollUp
   map s scrollDown
   map x scrollToBottom
   map a goBack
   map f goForward
   map r reload
   map c copyCurrentUrl
   map z createTab
   map t restoreTab
   map q previousTab
   map e nextTab
   map X toggleMuteTab
   map D removeTab
   map W scrollUp
   map S scrollDown
   map X scrollToBottom
   map A goBack
   map F goForward
   map R reload
   map C copyCurrentUrl
   map Z createTab
   map T restoreTab
   map Q previousTab
   map E nextTab
   map ㅇ removeTab
   map ㅈ scrollUp
   map ㄴ scrollDown
   map ㅌ scrollToBottom
   map ㅁ goBack
   map ㄹ goForward
   map ㄱ reload
   map ㅊ copyCurrentUrl
   map ㅋ createTab
   map ㅅ restoreTab
   map ㅂ previousTab
   map ㄷ nextTab
   map ㅌ toggleMuteTab
   map F12 LinkHints.activateModeToCopyLinkUrl

   사람들이 아직까지도 잘 모르는 것 같은 윈도우 10 캡쳐 단축키입니다.
   Win + Shift + s
   영역 선택에 바로 편집으로 넘겨주기까지 가능해서 좋네요.

   하나만 소개하기에는 좀 그러니까 개인적으로 사용하는 조합을 한 서너 개쯤 소개합니다. (?!)
   ※ 아래 내용은 모두 윈도우 기준입니다.
   PureText라는 작은 유틸리티를 설치하면 [Windows] + [V] 단축키를 누를 때 모든 리치 포맷팅을 제거한 순수 텍스트만 붙여넣을 수 있습니다. 환경설정을 통해 이 단축키를 바꿀 수도 있는데, 저는 [Ctrl] + [Shift] + [V]를 씁니다. 리치 텍스트를 지원하는 곳에 뭔가 내용을 붙여넣기할 때 텍스트 내용 이외에 글꼴이나 글자 크기와 같은 서식이 자꾸 딸려오는 게 귀찮다면 이 유틸리티로 해결할 수 있습니다.
   https://www.microsoft.com/store/apps/9pkjv6319qtl
   https://stevemiller.net/puretext/
   MS에서 제공하는 유틸리티 모음집인 Microsoft PowerToys를 설치하면 [Alt] + [Space] 단축키를 눌렀을 때 PowerToys Run이라는 기능을 사용할 수 있는데, 이건 한 마디로 macOS의 Spotlight나 Alfred와 유사한 물건입니다. 앱/파일/웹의 빠른 검색이나 간단한 숫자 계산 등이 즉석에서 가능하지요.
   https://docs.microsoft.com/ko-kr/windows/powertoys/install
   https://github.com/microsoft/PowerToys
   요즘은 윈도우 10에서도 [Windows] + [Shift] + [S] 단축키를 통해 간단히 캡쳐를 할 수 있지만, 제 경우에는 유명한 윈도우용 캡쳐 유틸리티인 ShareX에 [Print Screen] 키 위주의 단축키를 설정하여 사용하고 있습니다. 이 유틸리티에는 특정 윈도우 내의 컨트롤을 영역 캡쳐하는 기능이나 캡쳐 중에 특정 부위에 강조색/모자이크 처리 등을 하는 기능도 내장되어 있어서 여러 가지로 아주 편리합니다.
   https://www.microsoft.com/store/apps/9nblggh4z1sp
   https://getsharex.com/
   그 외에, AutoHotKey를 사용하면 단축키를 자기 마음대로 만들 수 있습니다. 저는 윈도우에서 macOS와 같은 한/영 전환을 하기 위해 아래 링크에 나온 AutoHotKey 스크립트를 사용하고 있습니다.
   https://gigglehd.com/gg/soft/1829881
   https://www.microsoft.com/store/apps/9nq8q8j78637
   https://www.autohotkey.com/

   PureText 는 맥의 Option + Cmd+ Shift + V 랑 같은 기능이네요.
   윈도우즈/맥 버전의 크롬은 기본적으로 Ctrl(Cmd) + Shift + V 로 같은 기능을 지원하긴 하는데,
   크롬 외에 지원 안 하는 MS 오피스 류의 어플리케이션에서 유용하겠네요.

   네, 맞습니다. 딱 그 기능이지요.
   크롬에서는 이걸 자체적으로 제공해 주는데, 다른 앱에서는 그렇지가 않아서 별도 유틸리티를 사용하고 있습니다.

   혹시 윈도우 UWP 캡쳐앱 딜레이를 느낀분 있으신가요?
   예전 Win32 캡쳐에 비해 0.5~1초정도 느린 것 같아요.
   그래서 포커싱을 잃는 경우도 있더라고요.

   딜레이가 조금 있는 편이더라고요.

   ShareX 말씀이신가요?
   원래 ShareX로 직사각형 영역 캡쳐하기를 하면 약간 딜레이가 있긴 한데, 포커싱을 잃을 정도로 긴 딜레이는 느낀 적이 아주 드물었습니다. UWP 앱을 많이 안 써서 그런지는 몰라도, 딱히 UWP 앱에서 캡쳐시 딜레이 차이가 있다고 느낀 적도 없고요.

   윈도 기본 앱 이야기였어요.
   잘못해서 답변달기를 눌러가지구 오해한 것 같아요.

   웹브라우저에서 사용할수 있는 단축키입니다
   ctrl+L: 주소창 바로가기
   ctrl+t: 새 탭
   ctrl+shift+t: 닫은 탭 다시 열기 (닫은 순 역순)
   ctrl+tab: 탭 순회
   ctrl+shift+tab: 탭 역순 순회
   ctrl+숫자: 해당 번째 탭 바로 가기

   Windows key + v 누르면 클립보드 리스트가 나옵니다. 골라서 붙여넣기가 가능한데 단순 작업할 때 종종 사용합니다.

   꿀팁 감사합니다.

   꿀팁 감사합니다.

   우어 저 몰랐어요. 처음에 누르면 키는 옵션이 나오는군요. 고맙습니다.

   저는 지메일 단축키가 편하더라고요.
   x (선택) 후 # (삭제) 또는 e (보관)
   *+a (전체 선택) 또는 *+t (별표 안한 것 선택) 한 후에 e (보관)

   단축키도 많이 사용하지만 키워드를 위주로 사용합니다. :-)
   - MacOS: Alfred (Option + Space) -> 키워드 입력
   - VSCode: Shfit + Command + P -> 키워드 입력

   맥에서는 화면캡쳐 할때 Cmd+Shift+3 과 4를 자주 썼는데, 윈도우에도 Win+Shift+S 캡쳐 단축키가 있어서 최근 가장 유용하게 사용중입니다.
   그리고, 단축키는 아니지만.. 단축키가 누르기 귀찮은게 많아서 SixKeyboard [1] 를 사용합니다.
   6개에 지메일 및 기타 도구들 단축키 넣고 나서 세상이 편해졌어요. 시프트/Ctrl 도 누르기 귀찮을 때 주로 씁니다.
   [1] https://techkeys.us/products/sixkeyboard

   전 맥에서 Cmd+Shift+5 로 범위 지정 캡쳐나 영상 녹화도 해요.

   업무용 PC에 외부 프로그램 설치가 어렵다 보니, 개인적으로 자주 사용하던 캡처 툴들을 못쓰고 있었는데… 저도 ‘Win+ Shift + S’ 키를 알고 나서부터는 행복해요.
"
"https://news.hada.io/topic?id=4627","Microsoft, IoT for Beginners 강의 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Microsoft, IoT for Beginners 강의 공개

   - MS Advocates 팀이 만든 12주, 24강짜리 IoT 기초 강의
   - 강의마다 비디오, 수업 전/후 퀴즈, 강의 문서, 프로젝트 기반 학습 및 단계별 가이드, 연습문제 등 제공
   - 식품이 농장에서 식탁에 도달하는데 까지의 전체 과정을 통해서 IoT를 학습
   ㅤ→ 농업, 물류, 제조, 소매, 소비자 등의 IoT 가 잘 쓰이는 분야를 모두 포함

   - Microsoft, ML for Beginners 강의 공개 https://news.hada.io/topic?id=4564
   - MS Beginner's Series to: Rust [유튜브] https://news.hada.io/topic?id=4517
   - MS의 Rust 기초 가이드 [한국어] https://news.hada.io/topic?id=4095
"
"https://news.hada.io/topic?id=4629","Airbridge가 직접 개발한 OLAP DB, Luft를 소개합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Airbridge가 직접 개발한 OLAP DB, Luft를 소개합니다

   - 사용자 행동 분석 특화 OLAP 데이터베이스
   ㅤ→ 코호트 분석 기능 및 각종 리포트를 실시간으로 제공하는데 사용
   - 기존에는 Apache Druid 사용했으나
   ㅤ→ Pre-Aggregation의 한계: 정해진 종류의 분석만 가능
   ㅤ→ 대부분 솔루션의 성능적 한계 : High-Cardinality Shuffle
   - TrailDB + Lambda Architecture + etcd 클러스터 + S3에 데이터 저장 + 메타데이터는 DynamoDB

   예전에 이곳에 소개글이 올라온 적이 있는 물건이네요.
   https://news.hada.io/topic?id=3465

   엇 그렇군요. 제가 올리지 않았어서 기억에 없었네요 ㅠ

   오픈소스화 까지 하셔서 공개해주시면 더 좋을 것 같아요 ^^;
"
"https://news.hada.io/topic?id=4651","애플카, 그리고 우리가 알던 자동차 산업의 종언","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       애플카, 그리고 우리가 알던 자동차 산업의 종언

   - WSJ 기사 번역
   - ""소프트웨어가 모든 산업을 집어삼키고 있으며, 다음 차례는 자동차입니다.""
   - ""애플이 준비하는 것이 자동차인지, 기술 플랫폼인지, 혹은 모빌리티 서비스인지 아무도 모릅니다.""
   - 오늘날 가장 복잡한 자동차에는 최대 200개에 달하는 컴퓨터가 탑재
   - 테슬라는 자동차에 장착된 수백 개의 작은 컴퓨터를 소수의 크고 강력한 컴퓨터로 교체해 왔음
   - 자동차 제조업체들은 앞다투어 자체적인 자동차 운영체계 구축에 나섬
   - 애플이 아이폰/아이튠스를 출시했을 때 처럼 할 수 있을까 ?

   ""소프트웨어가 모든 산업을 집어삼키고 있으며, 다음 차례는 자동차입니다.""
   이말을 보면 소프트웨어만 잘하면 될것처럼 보이는데,
   본문에도 나와있지만 제조와 하드웨어에 대한 충분한 이해없이는 애플처럼 할수 없습니다.
   결론은 하드웨어도 잘하면서 소프트웨어도 잘해야 한다 아닐까요?ㅠㅜ
"
"https://news.hada.io/topic?id=4637","GeekNews Ask 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GeekNews Ask 공개

   ""하나의 정답을 찾는 게 아닌, 남들의 지식과 지혜와 경험을 들어볼 수 있는 질문을 하는 곳""
   요즘은 궁금한 게 있으면 구글링 하는 게 가장 빠르다고는 합니다만, 쉽게 원하는 답변을 얻지 못하는 질문들이 있죠. 예를 들어,
   - 지금 내는 비용의 2배를 내더라도 계속 사용하고 싶은 SaaS는?
   - 앞으로 3년내 가장 유망한 기술이나 스타트업은?
   - 사용해봤던 업무용 의자중 어떤 걸 가장 추천하시나요?
   - 올해 새로 배우고 싶은 기술이나 언어는?
   - 지금 어떤 사이드 프로젝트를 하고 계신가요?
   - OS 재설치하고 가장 먼저 어떤 것들을 설치하시나요?
   나중엔 해커뉴스의 Ask HN 과 Reddit, Lobste.rs 등의 방식을 차용해서 질문/답변을 더 넓은 방식으로 키워보려고 합니다.
   특정 일자에는 고정적인 질문이 올라오고, 거기에 대한 정보를 모으는 방식인데요. 예를 들면,
   - 이달의 구인정보 : 매월 초 회사들이 구인정보를 직접 올리는 HackerNews 의 ""Who's Hiring""
   - 가장 좋아하는 책 2개를 적어주시면, 세번째 책을 추천해 드릴께요 : Reddit의 ""Suggest me a book""
   - 이번 주말에 뭐하시나요 ? : Lobste.rs 의 금요일 고정 질문 ""What are you doing this weekend?""
   - 이번 달에는 어떤 일들을 하시나요? : Indiehacker 의 월초 질문 ""What are you working on this month?""
   이런 질문과 답변들을 통해서 많은 걸 배울 수 있었으면 좋겠습니다.
   * 모든 질문은 /ask 섹션에서만 보이도록 설정되어 있고, 특정 점수 조건 및 답변 수에 도달하면 메인 페이지에 보이면서 페이스북/트위터에도 공유됩니다.
   * 정답보다는 지식/지혜/경험을 공유해줄 수 있는 질문을 올려주세요.

   GeekNews Ask 서비스에 대한 상세 소개 : http://news.hada.io/blog/ask
"
"https://news.hada.io/topic?id=4579","JVM 에코시스템 보고서에코시스템 보고서 2021

   - AdoptOpenJDK 44% > Oracle (OpenJDK 28%, JDK 23%) > Azul 16% > Amazon Corretto 9%
   - 60%가 이미 Java SE 11 사용중, Java 15 도 12%
   - JVM 언어 : Java 91% > Kotlin 18% > Groovy 13% > Scala 10% > Clojure 8%
   - IDE : IntelliJ IDEA 70% > Eclipse 25% > VS Code 23%
   - 빌드 : Maven 76% > Gradle 38% > Ant 12%
   - 프레임워크 : Spring Boot 58% > Spring MVC 29% > Java EE 24% > Jakarta EE 13%
   * 2021년 2~3월에 2000명의 Java 개발자 대상으로 조사
"
"https://news.hada.io/topic?id=4605","웹훅대신 /events 를 주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           웹훅대신 /events 를 주세요

   - 시스템 간에 연동을 위해서 WebHook을 이용하지만
   ㅤ→ 서버 다운시의 문제나, 일시적이어서 잘못 처리하거나 손실 되기 쉬움
   ㅤ→ 문제점을 없애기 위해 Kafka 등으로 버퍼링 할 수는 있지만 귀찮음
   - 두 시스템의 동기화를 위해서 '/events' 엔드포인트 제안
   ㅤ→ Stripe가 사용중인 API
   ㅤ→ 지난 30일간의 모든 생성/변경/삭제에 대한 이벤트를 가져갈 수 있음
   ㅤ→ 폴링을 통해서 원하는 시간에 필요한 만큼, 여러번이라도 가져가는게 가능
   ㅤ→ 롱 폴링하면 부담도 줄일 수 있을 것

   트위치 api도 웹훅에서 eventsub로 마이그레이션 된다던데 유행인가봐요..

   두 시스템 간의 동기화는 계속 논의되고 변경되어온 주제이긴 한데요. (논란도 많구요)
   Stripe 의 /events API 가 신기해서 글 링크를 가져와서 올려봅니다.
   저는 서버에 부담 주는 방식은 싫어해서 그닥 이긴 합니다만..
   놓치면 안되는 결제 정보를 담고 있는 Stripe로서는 저게 데이터 신뢰도를 높일 수 있는 방법이지 않을까 생각이 드네요.

   카프카 같은 mq 를 쓰는 것보다 어떤 점이 더 좋을지... 모르겠네요

   카프카는 내부에서 제어가 가능한 시스템들끼리엔 적합한데,
   여기서는 아예 별도의 외부 개발자나 외부 시스템과의 접근 및 연동이 쉬운 것을 주제로 하는듯 합니다.

   아 네 그런 차이가 있겠네요 ㅎㅎ 오픈 시스템을 만들어야 하는 조건에서는 그렇네요
   감사합니다
"
"https://news.hada.io/topic?id=4564","Microsoft, ML for Beginners 강의 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Microsoft, ML for Beginners 강의 공개

   - MS Azure Clouds Advocates 팀이 만든 12주, 24강짜리 커리큘럼
   - Scikit-learn을 이용한 클래식 머신러닝 강의 (딥러닝은 별도 AI 강의로 나올 예정)
   - 한글화 및 여러 언어로 번역 작업 진행중 (지원자)
   - 이용 방법
   ㅤ→ Repo를 포크
   ㅤ→ 강의전 퀴즈 풀기
   ㅤ→ 강의 읽고, 활동들 완료하고, 프로젝트 코드 작성해보기
   ㅤ→ 강의 후 퀴즈 풀기
   ㅤ→ 도전 과제 및 숙제
   ㅤ→ Discussion 보드에 PAT Rubric 남겨서 소리내어 배우기 ""Learn out loud""

   https://github.com/microsoft/ML-For-Beginners/issues/71
   위 링크에 보니 minwook-shin 님이 자원해서 번역을 진행중이시네요. 응원합니다!
"
"https://news.hada.io/topic?id=4612","구글, 안드로이드 게임 개발 기트(AGDK) 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구글, 안드로이드 게임 개발 기트(AGDK) 공개

   - 고품질 안드로이드 게임 개발을 위한 라이브러리 와 도구 모음
   ㅤ→ 빠른 C/C++ API : GameActivity, GameTextInput 등
   ㅤ→ 다양한 안드로이드 버전에서 동작 보장
   ㅤ→ 지속 업데이트 및 하위 호환성 제공
   - AGDE for VS : Visual Studio로 작성된 프로젝트에 안드로이드를 타겟으로 추가해주는 확장
   - 다른 게임 엔진들과 연동 및 플러그인 제공 : Unity, Unreal, Godot, Defold
   - Android GPU Inspector 에 프레임 프로파일링 기능 추가
   - Android Performance Tuner 로 텔레메트리 제공
"
"https://news.hada.io/topic?id=4588","페이스북의 GraalVM 도입기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           페이스북의 GraalVM 도입기

   - Facebook이 Spark를 가속하고 메모리&CPU 사용량을 줄이기 위해 GraalVM을 도입
   - 페북은 Java를 빅데이터,백엔드,모바일 등 몇몇 주요 분야에서 사용중
   - GraalVM으로 교체전에는 Oracle JDK 와 Open JDK Java 8/11 을 사용했음
   왜 GraalVM을 선택?
   - 성능이 주요 고려사항이었음. 전환하는 것 만으로 성능이 향상.
   - GraalVM 이 Java로 작성되었기 때문에 유지 보수및 성능개선이 쉬워서, 장기적인 투자상대로 적합했음
   - 휼륭한 커뮤니티를 가지고 있음
   - OpenJDK를 GrallVM으로 대체하는건 매우 쉬웠고, GraalVM의 최적화 때문에 별도 튜닝없이 바로 성능이 향상됨
   - 빅데이터 처리용 Spark를 GraalVM 위에서 실행해서 성능 향상
   ㅤ→ 커뮤니티 버전은 1.1배, 엔터프라이즈 버전은 1.42배 향상
   ㅤ→ 어떤 벤치마크에서는 4.84배까지 빨라졌음
   ㅤ→ CPU 부하도 10% 줄어듬
   ㅤ→ Polymorphic inlining, Partial escape analysis, Advanced speculative optimizations
   ㅤ→ 단순히 GraalVM 으로 교체하는 것 만으로 Spark Workload 가 10% ~ 42% 속도가 개선
   - 트위터도 GraalVM으로 교체하고 P99 Latency가 19.99% 까지 개선

   르네상스 벤치마크는 GraalVM의 공식적인 벤치이고 개발의 기준입니다. ""어떤 벤치마크""라고 이야기하는게 맞지 않을 것 같아요.

   저 “어떤”은 벤치마크의 세부 항목을 지칭한 “Some”의 번역 입니다..

   아 그렇군요... 제가 넘겨 짚었네요.

   번역글이 오라클 코리아에 올라왔네요.
   https://blogs.oracle.com/javakr/graalvm-facebook

   고맙습니다 링크 수정해두었습니다~!
"
"https://news.hada.io/topic?id=4633","Ask GN: 사용해봤던 업무용 의자중 어떤걸 가장 추천하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 사용해봤던 업무용 의자중 어떤걸 가장 추천하시나요?

   저는 허먼밀러 Aeron / Embody 두개를 사용해 봤는데,
   처음에 앉을때는 Embody 가 나름 괜찮았는데 오래 사용해보니 Aeron이 더 편하더군요.
   다만 에어론은 기본 모델 자체가 목 받침이 없어서, 호환 제품(아마도 중국산)을 꼽아서 쓰긴 하는데 품질은 그닥입니다
   최근에 허먼밀러 매장에서 Cosm 을 앉아보니 Aeron 과 같은 메쉬인데, Embody 처럼 목부분까지 길게 올라오는 방식이어서 더 편한거 같이 느껴져서, 다음번 의자는 Cosm 으로 할까 합니다.
   허먼밀러 외에 다른 추천할 만한 의자는 어떤 게 있는지 궁금합니다.

   10년 정도 에어론 풀펑션 쓰다가 아내가 얼마전에 스틸케이스 립체어 써서 앉아봤는데요. 전체적으로는 스틸케이스 립체어가 더 나은 것 같아요. 특히 허리 받쳐주는게 에어론은 좀 밍밍하고요. 립체어 가죽쓰는데 여름에 가죽 쓰려면 습도 관리를 좀 해야하는 것 같습니다. 그리고 목받침은 안쓰는게 좋다고 하더라구요.
   재활의학 교수님 유튜브인데요. 목받침은 몸보다 머리를 더 앞으로 위치하게 해서 안좋다고 합니다. 참고하세요!
   - 사무환경 최적화하기 https://youtube.com/watch/…
   - 슬기로운 의자 생활 https://youtube.com/watch/…

   비싼 의자는 앉아본 적이 없어서 잘 모르겠네요. 지금 앉아 있는 의자는 퍼시스 CH6200AH라는 사무용 의자인데, 적어도 지금까지는 불만스러운 점 없이 잘 쓰고 있습니다.

   스틸케이스 립을 집에서도, 회사에서도 쓰고 있습니다. 너무 편해요 =ㅁ =

   휴먼스케일 프리덤으로 추정되는 의자가 예전에 다니던 회사가 입주한 공유오피스에 제공되어있어서 써 봤는데, 개인적인 체감으로는 에어론보다 편했습니다.
   물론 지금 쓰고 있는 에어론도 충분히 만족스럽습니다. 헤드레스트는 Engineered Now 것 사용하고 있는데 조금 아쉬운 감이 있긴 하죠.

   허먼밀러 에어론, 스틸케이스 립, 휴먼케이스 프리덤 세가지를 군침만 흘리고 있습니다...

   직구로 아직 태평양 건너오는 중입니다만.. ""하그 8107""
   국내에서 판매처가 몇곳 있어서 가서 앉아 봤는데...
   자세 편한건 기본이고... 다양한 포지션으로 앉을 수 있어서 좋았습니다.
   허먼밀러도 바로 옆 매장에 있어서 앉아봤는데 .. 저는 하그가 더 편하더라구요.
   특히 뒤집어 앉기(?)가 되서 좋았습니다.

   우어 국내 판매가격은 좀 쎄군요. 아마존에서 검색해보니 8107은 없고 목받침 없는 8106만 있네요.
   한번 매장 가서 앉아봐야 겠어요. 추천 감사합니다.

   8107도 매장가면 있어요. 국내 판매처(에르x 시스템, 온라인)에서 팔고 있기도 하구요.
"
"https://news.hada.io/topic?id=4595","앱스토어 정책, 과연 중요할까? 누구에게, 얼마나?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      앱스토어 정책, 과연 중요할까? 누구에게, 얼마나?

   베네딕트 에반스의 글 ""Do App Store Rules Matter?"" 번역
   1. 얼마나 큰 돈이 걸려있는지?
   - 앱스토어 결제금액 70조원, 수수료 20조원, 애플 전체 매출의 6%
   - 결제액의 80%는 게임, 게임의 90%는 무료, 매출의 절반은 0.5%의 이용자로 부터
   2. 그래서, 바뀌면 뭐가 어떻게 되는지?
   - 사이드로딩과 서드파티 앱 마켓 허용
   - 앱이 자체적인 결제환경 구축하도록 허용
   3. 대체 이해관계자들은 누구인지?
   - ""대부분의 이용자, 대부분의 테크 회사들에게는 그다지 큰 상관 없는 그런 이슈는 아닌지""
"
"https://news.hada.io/topic?id=4555","atto - 브라우저에서 실행되는 BASIC","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        atto - 브라우저에서 실행되는 BASIC

   - BASIC과 비슷한 언어로 구동되는 가상 컴퓨터 오픈소스
   - 1980년대 언어에 구문강조, 멀티라인 편집 기능등을 추가
   - 640x480 해상도 RGBA 그래픽 (turtle 드로잉 모드)
   - 접근성 지원(스크린 리더)
   - 작성된 프로그램 링크 공유 지원

   전 초등학교때 처음 프로그래밍 배우면서 for 문으로 삼각형 찍던게 항상 기억이 납니다.
   10 for i = 1 to 5
   20 ㅤfor j = 1 to i
   30 ㅤㅤprint ""*"";
   40 ㅤnext j
   50 ㅤprint """"
   60 next i
   run
   *
   **
   ***
   ****
   *****
   위 코드 링크
   https://jamesl.me/atto/…
"
"https://news.hada.io/topic?id=4649","이 해변은 존재하지 않습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            이 해변은 존재하지 않습니다

   - 2만장의 해변 이미지로 학습된 StyleGAN2-ADA 네트웍으로 AI가 생성한 해변 이미지들
   - 랜덤 이미지 와 K-Means 클러스터링(376개) 된 이미지들 보기
   - 2만장의 이미지 네트웍 데이터는 데이터셋으로 제공 (362MB, 1280x768px)
"
"https://news.hada.io/topic?id=4596","Creep - 4px 넓이 픽셀 폰트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Creep - 4px 넓이 픽셀 폰트

   - 작은 화면을 가진 기기의 터미널에서 사용하기 위한 영문 폰트
   - Box Drawing 지원 (NCurses, Tmux) - light, heavy, single, double, rounded
   - Powerline / Sparkline 지원
   - Haskell 문법 지원
   - Braille(점자) 알파벳 내장으로 Drawille 라이브러리 지원

   제가 작은 폰트를 엄청 좋아하는데.. 이 폰트 깔끔하고 좋네요.
   한글도 이런 작은 비트맵 폰트들이 많으면 좋겠는데, 예전 윈도우즈에 있던 Small Fonts 말고는 딱히 생각 나는게 없군요.
   예전 둥근모꼴이 생각나서 찾아보니 ""Neo둥근모"" 로 바뀌어서 트루타입 폰트가 만들어졌군요. 가변글꼴 및 Ligature 지원하는 코딩용 폰트도 제공합니다.
   - https://neodgm.dalgona.dev/
   이 Creep 폰트가 바운딩 박스를 벗어나는 부분이 있어서 맥 터미널 외에는 사용하기 어렵다고 박스를 좀 엄격하게 확장한 Creep2 도 있습니다.
   - https://github.com/raymond-w-ko/creep2
   그외의 픽셀 폰트들
   - PICO-8 (3px wide) : https://www.lexaloffle.com/bbs/?tid=3760
   - Cozette (5px wide) : https://github.com/slavfox/Cozette
   - 4x4 : https://simplifier.neocities.org/4x4.html
   - Spleen (5x8,6x12,8x16..) : https://github.com/fcambus/spleen
   - 2x3 : https://zserge.com/posts/tiny-font/
   - Tasword Two : https://worldofspectrum.org/archive/software/…
   - Misake (8x8 일본어,한자) : https://littlelimit.net/misaki.htm
   - metis : https://github.com/kori/metis-font
   - 80columns (4x8, Commodore 64) : https://github.com/mist64/80columns
   - Ultimate Oldschool PC Font Pack : https://int10h.org/oldschool-pc-fonts/
   폰트 편집 도구들
   - FontForge https://fontforge.org/en-US/
   - FontStruct https://fontstruct.com/
   - Bits'N'Picas https://github.com/kreativekorp/bitsnpicas
   - BitFontmaker2 http://www.pentacom.jp/pentacom/bitfontmaker2/
"
"https://news.hada.io/topic?id=4566","Tenacity - Audacity 에서 Telemetry를 제거한 포크 버전 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Tenacity - Audacity 에서 Telemetry를 제거한 포크 버전

   - 오픈소스 크로스플랫폼 오디오 편집기 Audacity를 포크해서 Telemetry 와 Reporting 을 모두 제거
   - Audacity 의 변경된 Privacy Policy / Contributer's License Agreement 가 GPL을 위반하고, Google Analytics가 추가되는 것 때문

   GPL 위반애 대해서는 잘 모르겠군요. Qt, MuseScore 같이 GPL 소프트웨어 중에서도 CLA 있는 프로그램은 많고 애널리틱스도 opt-in인데....

   Privacy policy:
   If you are under 13 years old, please do not use the App.
   개인정보 정책 속에 다음 문구가 나이에 대한 차별을 두기 때문에 GPL 위반이라고 합니다.
   GPLv2:
   The act of running the Program is not restricted
   GPLv3:
   This License explicitly affirms your unlimited permission to run the unmodified Program.

   - Audacity 3.0.0 릴리즈 https://news.hada.io/topic?id=3915
   - Audacity 프로젝트에 데이터 수집 및 전송 기능(telemetry)을 추가하는 PR이 등록됨 https://news.hada.io/topic?id=4212
"
"https://news.hada.io/topic?id=4648","Robinhood - IPO S-1 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Robinhood - IPO S-1 분석

   - S-1은 파티 초대장과 같다
   ㅤ→ ""Unity는 메타버스, Roblox는 13세 생일파티, Bumble은 젊은 여성 임원을 위한 Paint N' Sip, Palantir는 십자군 LARP(라이브액션 롤플레잉)""
   ㅤ→ ""그런데 Robinhood 는 그들이 어떤 파티를 여는지 모르는 것 같음""
   - ""모두를 위한 금융 민주화"" 라고 얘기하지만, 진지한 재미있는 회사가 되고 싶은 건지, 재미난 진지한 회사가 되고 싶은 건지 모르겠음
   - 하지만, 기업이 이런 포지셔닝이 가능하다는건 기업의 강점을 나타내는 것이기도 함. 로빈후드 만큼 투자를 문화 현상으로 만드는데 중요한 역할을 한 회사는 없음
   - 엄청 긴 분량의 회사 분석
   ㅤ→ 역사, 게임스톱 관련, 타겟 시장, 제품, 비즈니스 모델 (Payment for Order Flow), 경영진, 투자자, 재무 하이라이트, 경쟁상대, 성장 경로, 기업가치, 규제

   앞부분만 간단히 옮겼는데, 글이 엄청 길어서 번역은 포기했습니다..
   하지만, 제품이나 비즈니스 모델에 대해서 정말로 잘 정리된 글이어서, 국내 핀테크 업체나 주식관련 회사들은 참조하시면 좋을 것 같아요.
"
"https://news.hada.io/topic?id=4619","SQLBolt - 인터랙티브 예제로 SQL 배우기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      SQLBolt - 인터랙티브 예제로 SQL 배우기

   - 브라우저에서 SQL을 직접 실행하면서 빠르게 학습 가능
   1: SELECT queries 101
   2~3: Queries with constraints
   4: Filtering and sorting Query results
   5: Simple SELECT Queries
   6: Multi-table queries with JOINs
   7: OUTER JOINs
   8: A short note on NULLs
   9: Queries with expressions
   10~11: Queries with aggregates
   12: Order of execution of a Query
   13: Inserting rows
   14: Updating rows
   15: Deleting rows
   16: Creating tables
   17: Altering tables
   18: Dropping tables

   Stripe가 다수의 사람들(변호사들 포함)이 분석을 하기위해 SQL을 배우는데 이 사이트를 추천한다고 하네요
"
"https://news.hada.io/topic?id=4561","Acid Tabs - 탭 자동그룹핑 크롬 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Acid Tabs - 탭 자동그룹핑 크롬 확장

   - URL 패턴을 이용해서 탭들을 자동 그룹핑하고 정렬
   ㅤ→ 그룹 이름 및 컬러 설정 가능
   ㅤ→ 그룹당 멀티 패턴 지원
   ㅤ→ 룰 순서에 따라 자동으로 탭/그룹 정렬
   ㅤ→ 그룹 단위 Collapse 가능 (Alt+Shift+C)
   ㅤ→ 벌크 편집 모드 지원
   - 오픈소스

   크롬 탭그룹은 써보니까 옛날 오페라 탭스택의 개선판 같더군요.

   Repo : https://github.com/jdhayford/acid-tabs-extension
   설정을 ""잘""하면 나름 편하게 쓸 수 있네요. 자신의 브라우저 사용방식에 맞게 설정하는게 귀찮은게 흠..
"
"https://news.hada.io/topic?id=4572","엔터프라이즈 프론트엔드 애플리케이션 아키텍쳐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        엔터프라이즈 프론트엔드 애플리케이션 아키텍쳐

   - 코드베이스가 커진다는 것 = 이해하기도, 수정하기도 어려워진다는 것
   - 해결 방법은? 코드베이스를 작게 유지하면 됨.
   - 도메인 별 코드베이스 분리 & 마이크로 프론트엔드 to rescue!
   - 모노레포 안에서 라이브러리의 의존 관계 설정 & 의존성 확인 등의 니즈는 [Nx](https://nx.dev/)를 도입하여 해결
   - 애플리케이션과 라이브러리로 코드를 분리
   - 애플리케이션은 의존성 및 설정 주입의 역할
   - 라이브러리에 대부분의 기능을 구현
   - 라이브러리에는 범용적으로 사용할 수 있는 디자인 시스템, 국제화, 서드파티 모듈 뿐만 아니라 홈 페이지의 히어로 배너, 상품 상세 페이지, 주문 내역 등 재사용하지 않는 코드까지 작성.
   ### Feature 라이브러리
   - 기본적으로 한 페이지에서 사용되는 모든 컴포넌트들은 같은 이름의 Feature 라이브러리에 작성
   - ex) `account` 도메인의 `SignInPage` 페이지의 모든 컴포넌트들은 `account/feature-sign-in` 라이브러리에 작성
   - 같은 도메인의 둘 이상의 페이지에서 공유하는 컴포넌트는 해당 도메인 내 별도의 feature로 분리
   - ex) `account` 도메인의 `SignInPage`와 `SignUpPage`에서 `KakaoLoginButton` 컴포넌트를 공통으로 사용한다면 해당 컴포넌트는 `account/feature-social-login` 라이브러리에 작성
   - 서로 다른 도메인의 페이지들에서 공유하는 컴포넌트는 공용 도메인 내 별도의 feature로 분리
   - ex) `landing` 도메인의 `HomePage`와 `classroom` 도메인의 `LecturePage`에서 공유하는 `GlobalNavigation` 컴포넌트는 `shared/feature-navigation` 라이브러리에 작성
   ### Shell 라이브러리
   - Feature, UI 라이브러리의 컴포넌트들을 조합해 페이지들을 만듦
   - ex) `SignInPage` 컴포넌트는 account/shell-kr-web 라이브러리의 컴포넌트. 여기에는 `SignUpPage`, `PhoneVerificationPage` 등이 있음.
   - Shell 라이브러리는 애플리케이션에 제공되는 특정 도메인의 진입점
   - 애플리케이션 별로 다른 진입점을 제공할 수 있음
   - 예를 들어..
   - `HomePage` 컴포넌트에서 사용하는 컴포넌트들은 `landing/feature-home` 라이브러리에 작성되어 있음.
   - 하지만 같은 `HomePage`라도 미국 사이트의 `HomePage`인지, 일본 사이트의 `HomePage`인지, 한국 사이트의 `HomePage`인지에 따라 그 구성이 다를 것.
   - 따라서 `landing` 도메인에 접근하는 각각의 애플리케이션을 위한 `shell` 라이브러리를 만들 수 있음. (`shell-us-web`, `shell-jp-web`, `shell-kr-web`)
   ### Provider 라이브러리
   - 둘 이상의 Feature 라이브러리에서 공유하는 상태를 관리하는 라이브러리
   - ex) 로그인 상태를 관리하는 `shared/provider-auth-state`
   ### UI 라이브러리
   - 둘 이상의 라이브러리에서 공유하는 Presentational 컴포넌트의 모음.
   ### Utility 라이브러리
   - 위 4가지 분류에 해당하지 않는 모든 모듈들
   - 클래스101의 도메인 모델과 무관하게 테스트 및 배포가 가능한 수준으로 독립적인 기능을 제공해야 함.
   - ex) `shared/utils-apollo-client`, `shared/utils-i18n`
   ### 애플리케이션
   - 설정 및 의존성 관리의 역할만 담당하게 됨 = 애플리케이션의 코드는 거의 없음
"
"https://news.hada.io/topic?id=4558","SQLite의 알려지지 않은 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          SQLite의 알려지지 않은 이야기

     * SQLite 개발자 Richard Hipp의 인터뷰 팟캐스트 요약(38분, 스크립트 있음)
     * 본업은 미국 해군의 구축함에 들어가는 소프트웨어 개발자
       ㅤ→ 함선 내부에서 사용하는 Informix가 에러가 잦고, 서버가 죽고 연결이 끊어지곤 했음
       ㅤ→ 전함이기 때문에 전투중에 피해를 입어도 “DB에 연결할 수 없습니다” 팝업 안보이고 튼튼하게 잘 동작해야 함.
       ㅤㅤ트랜잭션도 필요 없고, 어떤 상황에서도 데이터를 램에 읽어들여야 했음
       ㅤ→ 서버 없이 실행되는 SQL DB 엔진을 찾아봤는데 없어서, 직접 만들기로 함

SQLite V1 (2000년)

     * SQL문을 프로그램으로 생각해서 쿼리를 컴파일하고 실행하는 바이트 코드 엔진을 작성
     * 실제로 프로젝트에서 사용되지는 않음 (고객이 Informix를 쓰기 원함)
     * 개발 용도로 쓰면서, 인터넷에 공개했고 그걸 사람들이 쓰기 시작
     * ""Palm Pilot에서 SQL DB를 실행했어요"" 같은 말들을 보게 되고 사람들의 주목을 끌었음. 그래서 더 작업을 진행하도록 격려받음.

Motorola

     * 2001~2002년 사이, 모토로라가 자신들의 새로운 전화 OS에 SQLite를 넣겠다고 전화가 옴
     * 필요한 기능을 지원해주면 비용을 내겠다는 것
     * 오픈소스로 돈을 벌 수 있다는 사실을 그때 처음 알게 됨
     * 약 $80,000로 요즘에 비하면 많지 않은 돈이었지만, 본인한테는 굉장히 놀라운 금액이었음.
     * 같이 일하던 세명과 함께 프로젝트를 진행했고 그게 시작이었음

America Online Phones

     * 그 다음으로 연락이 온 것은 AOL 이었음
     * CD를 우편으로 보내던 시절이었는데, 그 CD 안에는 Database 가 필요했음
     * 즉 CD 안에 SQLite를 넣기를 원했고 새로운 기능을 필요로 했음

Symbian OS 와 Nokia

     * 추수감사절에 런던으로 가서 미팅을 진행(영국은 추수감사절이 없으니까)
     * Symbian OS를 위한 DB를 원했고, 다른 DB들과 경쟁을 벌임(2개의 오픈소스,7개의 상용)
     * 다른 9개 DB에 튜닝할 기회를 주었지만, SQLite가 최종 승리

Bus Factor [1] 와 콘소시엄

     * 버스팩터는 몇명이 버스에 치이면 개발이 중단되는 지를 의미하는 지표
     * 본인은 풀타임으로 여럿과 함께 일을 하고 있었지만, Symbian 쪽에서 버스 팩터를 높여야 한다고 얘기가 나왔음
     * SQLite 컨소시엄을 시작해서 프로젝트에 자금을 지원하고 더 많은 사람들이 장기적으로 참여하도록 하자는 것
     * 모든 컨소시엄 멤버들이 투표권을 가지게 하는 것 같은 미친 아이디어를 내었음
     * 모질라 재단의 Mitchell Backer가 이걸 어디선가 듣고 전화를 걸어옴
       ㅤ→ ""리차드, 당신은 완전히 잘못하고 있어요. 컨소시엄을 만드는 법을 알려줄께요""
       ㅤ→ 그녀가 규칙을 만들기 시작
       ㅤ→ ""개발자들이 통제권을 가져야 해요. 그들의 결정이 최종입니다. 들어간다는 것 만으로 투표권을 가지면 안돼요.""
       ㅤ→ ""이걸 이용하는 회사들은 돈을 기부하는 명예를 얻지만, 최종 결정은 당신이 해야합니다.""
       ㅤ→ 그녀는 매우 단호했고, 모든 걸 정리했음. 그녀는 변호사임
     * 리차드는 ""어떻게 사람들이 참여하게 하죠? 인센티브는 뭐구요?"" 라고 얘기하자,
       ㅤ→ ""걱정하지 마세요. 그들은 참여할 겁니다. 그리고, 실제로 이렇게 하면 Mozilla가 창립 멤버가 될 겁니다.""
     * Mozilla, Symbian 및 Adobe의 지원을 받고, 세 회사와 컨소시엄을 시작
       ㅤ→ 처음에 심비안이 콘소시엄이 필요하다고 얘기했을 때 어찌 해야 할지 몰랐음. 어떻게 미첼베이커가 이걸 듣고 전화했는지는 모르지만, 이 모든게 놀라운 여정.

Enter Android : 안드로이드의 시작

     * 모든 스마트폰이 SQLite를 사용하고 있기 때문에, 리차드는 초기 스마트폰 개발을 모든 측면에서 볼 수 있었음
     * 2005년에 안드로이드와 회의를 진행. 그때는 안드로이드도, 아이폰도 나오기 전
     * 상단에 작은 디스플레이와 풀 QWERTY 키보드를 가진 블랙베리와 비슷한 폰에 연결해서 SQLite를 디버깅 했음
     * 실제 동작하는 전화망에 붙은 폰에서 GDB로 디버깅하는 것은 놀라운 경험이었음
     * 그때는 모토로라, 심비안, 노키아의 누구도 그런 걸 하지 않았을 때였고, 이때 안드로이드가 거대해질 것이라는 걸 알았음

Guy, This Is Important : 여러분, 이게 정말 중요해요

     * 그 시절 다른 업체들은 하드웨어와 소프트웨어 업데이트 주기가 30일 정도로 굉장히 길었는데, Android는 실제 망에 붙은 전화기에 하루에 몇 번씩 새로운 OS를 넣었음.
     * NDA 하에 받은 프로토타입 안드로이드 폰은 3D 프린트 된 것 같은 케이스였지만, 휴대는 가능할 정도 였음.
       ㅤ→ 다른 회사의 것들은 큰 브레드보드 & 프로토타입에, 망에도 붙어 있지 않아서 폰으로 쓸 수도 없었음
     * 모토로라, 심비안 사람들에게 ""이거 중요하니까 이걸 해결해야 한다고 말하고 싶었지만 말할 수 없었음"" (NDA 때문에) 그리고 그게 차이를 만듦

Testing and Aviation Standards : 테스팅과 항법 표준

     * Adam(인터뷰어) : ""지금 리차드의 DB는 정말 활기찬 상태임. 재능 있고 팀도 능력 있지만, 모든 안드로이드폰에 들어가는 DB를 지원하는 1~4명의 소프트웨어 컨설팅 회사임. 개발자들은 DB에 굉장히 열심이고, 데이터에 문제가 생기는 걸 싫어합니다""
     * 우리는 모든 사람에게 Naive하게 SQLite 는 버그가 없다고 자랑하고 있었지만, 안드로이드는 확실히 우리가 틀렸다는 것을 증명했음.
     * 버그없이 소프트웨어를 만들수 있을거라 생각했지만, 소프트웨어가 수백만개의 장비에 설치될 때 얼마나 버그가 많이 날 수 있는지 놀라울 정도임.
     * 그때쯤에 항공전자공학(Avionics) 회사인 Rockwell Collins와 일을 하고 있었는데, 그들이 DO-178B [2] 개념을 소개해줬음.
       ㅤ→ DO-178B는 안전이 중요한 항공 제품들의 품질 표준에 관한 것인데, 다른 품질 표준과 달리 ""읽을 수 있음(readable)""
       ㅤ→ 몇백달러 쯤 하는데 얇으니까 꼭 읽어보기를 권함
     * 실제로 DO-178B의 프로세스를 따르기 시작했고, 그중 하나가 100% MCDC Test Coverage
     * MCDC(Modified Condition / Decision Coverage) [3] 는 테스트가 개별 분기를 적어도 한번 이상 통과해야 하는 것
     * SQLite 가 MCDC 100% 가 되는데 주당 60시간 기준으로 1년이 걸렸음. 정말 정말 어려웠음. 매일 12시간을 해야 했고 정말 피곤.
     * 90~95% 의 테스트 커버리지는 쉬운데 나머지 5%가 정말 어려움. 하지만 1년간 그렇게 해서 최종적으로 100%에 도달하자 Android 에서 버그리포트가 오지 않게 되었음
     * 그때부터 작동하기 시작했고, 큰 차이를 내었음. 그 이후 8~-9년동안 버그가 없었음.

수십억개의 테스트

     * 첫번째는 TCL(Tool Command Language)로 작성되었고, 일반적인 개발자 테스트 였음
     * 아직도 첫번째 TCL테스트는 유지 보수하고 있고 공개되어 있음. 100%는 아니지만 SQLite 의 모든 기능을 상세 테스트 함.
     * MCDC 100% 커버리지는 TH3 라고 부르고 공개하지 않음 (proprietary)
     * 이걸 항공회사에 팔아서 돈을 벌어보려고 했지만 한개도 못팔았으니 효과는 없었음..
     * 하지만 우리 제품을 정말 견고하게 유지하고 새로운 기능 과 버그 수정을 빠르게 해볼 수 있게 해줌
     * 테스트 갯수를 세기는 어렵지만 10만개의 개별테스트가 매개 변수화 되어서 수십억개의 테스트가 실행 됨
     * 체크리스트가 있고, 릴리즈전 최소 3일 동안 테스트를 진행함
     * 의도적으로 여러 개의 OS에서 테스트를 진행함
       ㅤ→ 요즘은 모든 장비들이 리틀 엔디안이지만 예전엔 빅엔디안들도 많았음. 그래서 PowerPC iBook 에서 빅엔디안 테스트를 진행
       ㅤ→ 32비트 플랫폼과 ARM 과 Intel, 64 Bit 플랫폼, 윈도우, 리눅스, 맥, OpenBSD 등 우리가 할수 있는 모든 플랫폼과 OS에서 테스트를 진행
       ㅤ→ 여러개의 다른 테스트 스윗이 있고, 원래 TCL도 있고, TH3도 있음. 지속적으로 실행되는 Fuzzer(퍼지 테스팅)도 있음.
     * SQL Logic 테스트도 있음
       ㅤ→ 10년전에 Shane Harrelson 이 만든 엄청난 더미의 SQL 문장
       ㅤ→ 손댈 수 있는 모든 DB에서 테스트 했는데 모든 DB엔진이 답을 못내고, 세그멘테이션 폴트를 내었음. SQLite 포함. 단, Postgres 만 빼고.
       ㅤ→ Postgres 만 항상 결과를 내었고 결점을 찾을수 없었음. Postgres 개발자들은 우리가 충분히 노력하지 않은거라고 했지만.. Postgres에 에러를 내는 것은 가능은 했겠지만, 우린 매우 감동했음
       ㅤ→ 상용 버전 Oracle도 크래시 내었고, DB2도 크래시 냄
       ㅤ→ 중요한 포인트는 SQLite가 이 모든 쿼리들에 대해서 동일한 답을 내도록 했다는 것

Building From First Principles

     * 처음에 작성을 시작했을 때, 어떻게 SQL DB 엔진을 만드는지 레퍼런스가 있는지 찾아보려고 했는데 없었음. 그래서 직접 만들어야 했고, 완전히 독립적인 임무였음.
     * 많은 이론들이 MIT, 하바드, 버클리에서 일어나고 있었지만 그 학교들에 가지 않으면 이론이 존재한다는 사실조차 몰랐고, 찾는 방법도 없었음.
     * Postgres 가 사용하는 Volcano 모델과 SQLite 가 사용하는 Byte Code 모델은 살펴보면 우린 모두 같은 아이디어로 수렴됨
     * 위에서 보면 매우 다른 곳에서 시작하지만, 우린 어떻게 그걸 더 빠르게 하는가에서 같은 영역에 수렴함
     * 이게 이론적으로 일종의 검증이라고 생각함. 두개의 독립적인 개발라인이 동일한 답을 내놓는 것
     * 예를 들어서, 나는 Covering Index에 대해서는 전혀 몰랐는데, 독일에서 열린 PHP 컨퍼런스에 참석했을 때, MySQL의 David Axmark도 참여해서 강연을 했음
       ㅤ→ 그 강연에서 MysQL 이 어떻게 Covering Index를 만들었는지 설명함
       ㅤ→ DB의 인덱스에 어러개 컬럼이 있을때, 인덱스의 앞쪽 컬럼에 대해서만 쿼리하고 답이 나머지 컬럼에 있다면 DB는 원본 테이블 조회없이 인덱스만으로도 사용 가능해서 작업이 빨라짐
       ㅤ→ 그래서 집으로 돌아오는 비행기에서 사람이 별로 없길래, 랩탑을 열고 대서양 상공에서 SQLite 의 커버링 인덱스를 구현했음

B-Trees and The Art of Computer Programming

     * 많은걸 직접 만들어야 했음. 아무도 나에게 B Tree를 가르쳐 준적이 없음. 그냥 들어봤을뿐.
     * 직접 B트리를 개발하려고 할때, 책장에서 Don Knuth의 TAOCP 가 있어서 B트리를 찾았고 그가 알고리듬을 설명해줬음
     * 재미난건, 책에는 B트리 검색과 삽입 알고리듬은 자세히 설명하지만, 삭제하는 알고리듬은 제공하지 않음. 그건 챕터 끝 연습문제에 있어서, 나만의 B 트리를 만들기 전에 문제를 풀어야 했음. ""고마워요 Don, 정말 감사해요.""
     * 현 시대의 사람들은 적어도 TAOCP 를 읽거나 훑어보기라도 해야함

Freedom to Build It Yourself : 직접 만들 수 있는 자유

     * SQLite 는 Richard 가 직접 만든 것 외에는 아무것에도 의존성이 없음 (C 컴파일러와 libc 제외하고). 직접 버전관리 시스템도 만들고 버그 트래커도 만듬. 이게 리차드에게 자유를 줌
     * 자유(Freedom)라는 것은 자신을 스스로 돌보는 것을 의미
     * 배낭여행 가는 사람들이 필요한 모든 것을 등에 지고 가면서 자유롭다고 하는 것은 그들이 직접 자신을 케어하기 때문
     * 모든 것을 직접 만든다면 누군가에게 묶여있지 않기 때문에 그 안에 자유가 있음
     * 만약 SQLite 2의 스토리지 엔진으로 Berkeley DB를 선택했다고 가정해보면
       ㅤ→ 그 당시엔 Berkeley DB는 오픈소스 였지만 나중에 Oracle 에 매각되어서 듀얼 소스 독점 모델이 되어서 라이선스 비용을 내지 않고는 최신 버전의 소스코드를 얻지 못하게 되었음
     * 지금 SQLite 의 Parser Generator는 Yak 나 Bison 을 사용하지 않고 Lemon 이라 불리는 직접 작성한 것인데, 그래서 새로운 언어 기능이 필요할 때 그것들에 묶이지 않고 수정할 수 있었음
     * 2000년대 초에는 모든 프로젝트 CVS를 사용하기에 그걸 썼지만, 2000년대 중반이 되면서 분산 버전 관리 아이디어가 나오기 시작

Fossil 구축

     * Git 과 Mercurial 을 보고 요구사항을 정리한뒤 직접 버전관리 시스템을 개발하기로 함
     * 이제 Fossil 은 잘 동작해서, 자체 프로젝트가 되었음
     * 토발즈가 Linux Kernel 개발을 지원하기 위해 Git을 만들었기에, Linux Kernel 관련 일을 한다면 Git 이 완벽한 버전관리 시스템
     * Fossil 은 SQLite 작업을 하기위해 딱 맞는 버전 관리 시스템임. 내가 직접 만들었기에 내 요구사항을 정확히 충족
     * 직접 개발함으로써, 자신의 운명을 통제하고, 더 많은 자유를 가지고, 제3자에게 의존하지 않게 됨

자급자족하기

     * 도시를 벗어나서 직접 식량을 키우고 사는 사람을 뭐라고 할까요? Survivalist (생존주의자) ? 또는 Prepper (준비자)
       ""당신과 연락하는 동안에도 봤듯이 제 Gmail 이 조금 이상해요. 메일이 자꾸 리턴됩니다. 그래서 내 메일 서버를 만들려고 해요. 우리가 이 미팅을 셋업하는 중에도 관련 노트를 작성하고 있었어요. DB 엔진을 작성하는 것보다 어렵지는 않겠지만 Gmail 에 얽매이고 싶지는 않아요. 그들이 내 운명을 통제하는 것을 원하지 않아요. 그들이 내 모든 대화의 기록을 제어하는 것을 원하지 않아요. 내가 직접 통제하고 싶고, 그래서 고통스럽고 할일이 많겠지만 직접 통제할 해결책을 찾기위해 노력하려고 합니다. 클라우드에서 가상머신을 임대해서 실행해서 제3자에 의존하지 않아도 됩니다.""
     * 누군가 찾아와서 당신의 문제를 해결해 주겠어요 한다면, 그들이 당신의 자유를 빼앗아 갈거라는 것을 알아야 합니다. ""자유롭고 싶다면 직접 해야 해요""

다른 사람을 위한 조언

     * 저는 서버가 필요없이 직접 디스크에서 읽고 쓰는 DB 엔진을 만들겟다는 미친 아이디어로 시작했습니다.
     * 전문가들에게 물어보면 ""그건 불가능해요. 절대 동작하지 않을꺼에요. 멍청한 아이디어 입니다.""라고 할겁니다.
     * 다행스럽게도 난 그런 전문가들을 몰라서 그냥 했고, 이런 일들이 일어났습니다.
     * 전문가들의 말을 많이 듣지 말고, 말이 되는 일을 하세요. 당신의 문제를 해결하세요

   --

   [1] Bus Factor : 팀원이 버스에 치어서 팀이 위기에 빠질 수 있는 위험도.
     * 팀 멤버 간에 정보 및 기능들이 공유되지 않아서 생길수 있는 위험을 말하는 지표.
     * 이 지수를 높여야 정보가 공유되고, 특정인에게 업무가 집중되지 않음.

   [2] DO-178B : 항공기 시스템과 장비 인증에 관한 소프트웨어 고려사항 (Software Considerations in Airborne Systems and Equipment Certification )
     * 미연방항공국(FAA)에 의해 항공용 소프트웨어 인증을 위한 적합성 입증 방법으로 채택

   [3] MCDC : Modified Condition / Decision Coverage
     * 여러 개의 조건식이 있을 때, 각 개별 조건식이 다른 조건식에 영향을 받지 않고 전체 조건식의 결과에 독립적으로 영향을 주도록 테스트 케이스를 설계하는 방법

   몇번이고 다시 읽어보게 하는 글이네요. 감사합니다.
   자유롭고 싶다면 직접 해야 해요.
   말이 되는 일을 하세요.
   당신의 문제를 해결하세요.

   정말 흥미로운 글입니다!
   ""90~95% 의 테스트 커버리지는 쉬운데 나머지 5%가 정말 어려움. 하지만 1년간 그렇게 해서 최종적으로 100%에 도달하자 Android 에서 버그리포트가 오지 않게 되었음""
   이럴 수가 있군요.

   잘 읽었습니다. 감사합니다!

   너무 잘 읽었습니다. 감사합니다

   잘 읽었습니다.

   재밌게 읽었습니다!

   재미있게 잘 읽었습니다. 감사합니다.

   잘읽었습니다.
   요약 정리하는게 더 힘들거 같네요.

   잘 읽었습니다. 많은 생각이 드네요. 감사합니다 :)

   잘 읽었습니다. 감사합니다!

   잘 읽었습니다.

   시간 가는줄 모르고 읽었네요 ㅎㅎ
   간단한 임베디드 DB라고 과소평가했던 제가 부끄러워지네요^^;

   그냥 단순한 로컬 개발용 DBMS 정도로만 생각하고 썼는데, 전혀 단순하지가 않군요!!

   너무 재미있게 읽었습니다.

   현재 전세계에서 운영중인 SQLite는 1조개가 넘습니다.
   - 40억대가 넘는 모든 스마트폰(Android,iOS)
   - 맥/윈도우
   - FF/크롬/Safari 브라우저
   - PHP/Python
   - Skype/iTunes/Dropbox/Turbotax
   - 대부분의 셋탑박스와 TV
   - 대부분의 자동차의 멀티미디어 시스템
   https://www.sqlite.org/mostdeployed.html

   이렇게 좋은 글이 있었군요. 번역본으로 볼 수 있어서 다행입니다.
"
"https://news.hada.io/topic?id=4569","Riot Games, 창작자용 무료 음원 "세션: 바이" 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Riot Games, 창작자용 무료 음원 ""세션: 바이"" 공개

   - 모든 창작자들이 저작권 걱정없이 사용할 수 있는 음원을 만들어서 무료 앨범으로 공개
   - 첫 공개한 앨범 ""Sessions: Vi"" 는 총 37 곡 (1시간 40분 분량)
   ㅤ→ 더 많은 음원 추가 예정
   - 2.4GB .wav 파일로 다운로드 제공
   - Youtube Music, Spotify, iTunes, Deezer 등에서 들어볼 수 있음
"
"https://news.hada.io/topic?id=4548","TikTok, 숏 비디오 길이를 최대 3분으로 연장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TikTok, 숏 비디오 길이를 최대 3분으로 연장

   - 기존 1분에서 3분으로 변경
   ㅤ→ 요리, 교육, 그림 그리기 등에서 시간이 더 필요하다는 요구를 받아왔음
   - 작년 12월 부터 일부 사용자 대상으로 테스트 해왔고, 앞으로 몇주동안 전체 사용자에게 순차 적용 예정
   ㅤ→ 준비된 사용자는 알림 받게됨

   숏 비디오라는 장르를 만들면서 시장에 뛰어들었는데, 이걸 약간 확장하는 군요.
   영상이 길어지면 체류시간이 늘어나는 효과가 발생할테니 틱톡한테는 더 좋은 일이긴 할 것 같고, 알고리즘 픽이 어떻게 변화될지가 궁금하네요.
   유튜브 알고리즘도 10분 이상의 영상을 선호하면서 많은 영상들이 다 이정도 사이즈로 바뀌었는데 틱톡도 그렇게 될까요?
"
"https://news.hada.io/topic?id=4607","OpenSearch 1.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenSearch 1.0 릴리즈

   - 마지막 아파치 2.0 라이센스 버전인 Elasticsearch 7.10.2 & Kibana 7.10.2 를 포크한 오픈소스 검색엔진
   ㅤ→ 검색엔진 데몬(OpenSearch) +
   ㅤ→ 시각화 및 UI (OpenSearch Dashboard) +
   ㅤ→ Open Distro for Elasticsearch 의 고급 기능등 (보안, 알림, 이상감지 등)
   - 독점코드를 제거하고, 업그레이드, 호환성 유지, 테스트 추가
   - 리눅스 ARM64 아키텍처 지원
   - OpenSearch Dashboard 에서 Data stream 지원
   - Reporting 플러그인에서 스케쥴링 및 테넌트 지원

   AWS, ElasticSearch와 Kibana의 포크버전 OpenSearch 공개 https://news.hada.io/topic?id=4064

   아... aws 의 포크군요..

   어느새 3.0까지 출시가 되었네요
   https://opensearch.org/blog/…

   OpenSearch 3.0 릴리즈 - 벡터 데이터베이스 성능 및 AI 기반 검색 인프라 대폭 강화

   별도 뉴스로 등록되었습니다. 고맙습니다!
"
"https://news.hada.io/topic?id=4599","Kotlin API for Apache Spark 1.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Kotlin API for Apache Spark 1.0 릴리즈

   - Kotlin 과 Spark 간의 호환성 레이어
   ㅤ→ 가능하면 Spark 3.x 에 기본 포함되는 것을 목표로 함
   - 첫번째 Stable 릴리즈
   ㅤ→ Scala API 의 Typed select & sort 를 Type-safe 하게 추가
   ㅤ→ 다양한 컬럼 함수 지원
   ㅤ→ KeyValueGroupedDataset Wrapper 함수
   ㅤ→ Scala TupleN 클래스 지원 : 인코더 명시 할 필요 없음
   ㅤ→ 날짜/시간 타입 지원 : LocalDate, Date, Timestamp, Instant
"
"https://news.hada.io/topic?id=4552","Spatie/Fork - PHP 코드를 동시 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Spatie/Fork - PHP 코드를 동시 실행하기

   - PHP 코드를 동시에 실행하게 해주는 가벼운 패키지
   ㅤ→ 내부적으로 메인 PHP 프로세스를 포크해서 동작
   - CLI 에서만 사용 가능
   - PHP8 & pcntrl 확장을 이용
   $results = Fork::new()
   ㅤ->run(
   ㅤㅤfn () => (new Api)->fetchData(userId: 1),
   ㅤㅤfn () => (new Api)->fetchData(userId: 2),
   ㅤㅤfn () => (new Api)->fetchData(userId: 3),
   ㅤ);
"
"https://news.hada.io/topic?id=4645","Ask GN: GeekNews에 올라오는 소식을 주로 언제, 어떻게 보시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ask GN: GeekNews에 올라오는 소식을 주로 언제, 어떻게 보시나요?

   우선 GeekNews에 Ask라는 멋진 기능까지 생겨서 너무나 기쁩니다!
   GeekNews 이용자분들께 꼭 아래 질문을 드리고 싶었습니다.
   ---
   GeekNews에 올라오는 내용들을 주로 언제, 어떻게 보시나요?
   GeekNews에 올라오는 컨텐츠를 잘 흡수하는 방법이 궁금합니다.
   ---

   GeekNews에 정말 유용한 내용들이 자주 올라오기에, 올라오는 요약은 모두 보고, 최대한 링크된 원본도 많이 보려 하는데요.
   전 슬랙을 연동해놓고, 주로 [출근 직전, 점심 식사 후, 저녁 식사 후]에 각각 몰아서 쌓인 글들을 봅니다.

   GeekNews를 보시는 분들 중엔 많은 컨텐츠를 소화하는 나만의 방법이 있는 분도 많이 계실 듯한데, 팁을 주실 수 있다면 정말 큰 도움이 될 것 같습니다 🙏

   저는 트위터를 통해서 봅니다.

   회사에서 틈나는 시간이 있으면 들어와 봅니다.

   출근하고 30분 이내 / 점심 / 퇴근 할 때 읽습니다. 특히 전 10시 30분마다 팀원분들에게 TOD(IT) 이라는 오늘의 IT 뉴스! 를 고르는데. 그래서 호다다닥 읽습니다(...

   아침에 출근해서 한번 훑습니다.
   좋은 아티클이 있다면 동료에게 공유하고 해당 주제에 대해 의견을 나누는 편입니다.

   전 보통 빌드하는 시간에 보는거 같아요.
   그래서 하루에 10번 넘게 들어올때도,,,

   비싼 장비가 들어오면 긱뉴스 사용율이 떨어지겠군요 ㅠㅠ

   주로 새 소식이 점심 이전에 올라오고 그 이후로는 자주 올라오진 않아서 오전에 커피 마시는 시간에 확인을 하고 있습니다.
   새 글은 모두 요약을 읽고, 관심이 있는 주제만 원문으로 넘어가서 읽어보는 편입니다.
   소식을 모두 소화해야지 하는 생각보다는 재미난 것을 읽었다는 것에 만족하고 나중에 연관된 키워드를 만나면 다시 찾아보고 읽어보고 있습니다.
"
"https://news.hada.io/topic?id=4625","Mitmproxy 7 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Mitmproxy 7 공개

   - HTTP 1/2, 웹소켓, SSL/TLS 등의 웹 트래픽을 인터셉트, 수정, 리플레이 하기 위한 오픈소스 HTTPS Proxy
   - CLI + Web UI + Python API 제공 및 강력한 에코 시스템
   - 7.0 추가 기능
   ㅤ→ Full TCP 지원 (SMTP 같은 프로토콜)
   ㅤ→ HTTP/1 과 HTTP/2 상호 연동 : HTTP/2 클라이언트를 HTTP/1 서버로 연결
   ㅤ→ UI에서 WebSocket 메시지 표시 지원
   ㅤ→ Secure Web Proxy (TLS-over-TLS)
   ㅤ→ 윈도우OS에서도 Console UI 지원
"
"https://news.hada.io/topic?id=4594","tilemaker - OpenStreetMap 데이터로 지도 벡터 타일 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              tilemaker - OpenStreetMap 데이터로 지도 벡터 타일 만들기

   - OSM 데이터를 추출해서 나만의 지도 데이터를 생성하는 오픈소스
   ㅤ→ 추출한 지도는 웹/앱에서 무제한으로 사용 가능
   ㅤ→ Mapbox Vector Tiles 포맷
   ㅤ→ MapLibre GL 로 웹/모바일에서 렌더링 가능
   ㅤ→ 맥/윈/리눅스용 실행파일
   - Lua 스크립트 지원
   ㅤ→ 원하는 OSM Tag 선택 가능
   ㅤ→ Zoom 레벨 조정 및 필터링
   ㅤ→ 고급 처리를 위한 Spatial Query 가능
   ㅤ→ 외부 Shapefile 데이터 추가 가능
   ㅤ→ 기본 스크립트 제공
   - C++ + Google Protocol Buffers, Boost, Lua, sqlite3, shapelib

   - MapLibre GL - MapboxGL JS의 오픈소스 포크 https://news.hada.io/topic?id=4026
"
"https://news.hada.io/topic?id=4610","Earthly - 컨테이너 기반 빌드 자동화 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Earthly - 컨테이너 기반 빌드 자동화 도구

   - 모든 빌드를 컨테이너를 통해 실행하여 자동화 및 언어 상관없이 동작하게 만들어주는 오픈소스
   ㅤ→ 독립적, 재실행, 병렬 빌드 가능
   ㅤ→ CI 에서나 로컬에서나 똑같이 빌드 실행/재실행 지원
   - Earthfile 스크립트 사용
   ㅤ→ Makefile + Dockerfile 형태의 장점만 가져온 친숙한 문법
   ㅤ→ 캐쉬 가능(Docker 와 같은 캐쉬 기술 사용), 캐쉬는 클라우드를 통해서 공유 가능
   ㅤ→ Repeatable Build
"
"https://news.hada.io/topic?id=4664","Sioyek - 논문/기술서적을 위한 빠른 PDF 뷰어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Sioyek - 논문/기술서적을 위한 빠른 PDF 뷰어
"https://news.hada.io/topic?id=4571","리눅스재단에 게임엔진(Lumberyard)을 기부한 AWS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    리눅스재단에 게임엔진(Lumberyard)을 기부한 AWS


   - C로 된 오픈소스, 윈도우 실행파일 제공(맥/리눅스 제공 예정)
   - 리눅스재단이 3D그래픽스, 렌더링, 저작, 개발에 연관된 프로젝트를 지원하는 Open 3D Foundation 설립
   - 키보드로 네비게이션 가능, 모든 단축키 커스터마이징 지원
   - 첫번째 프로젝트로 O3DE 엔진 개발을 추진. 아파치2.0 라이센스. https://o3de.org
   - 예전에 봤던 문서들 빠르게 검색 & 오픈 지원
   - O3DE의 초기 코드베이스는 AWS가 개발한 Lumberyard 게임엔진. AWS가 기부함.
   - 목차 검색 및 바로 가기
   - Lumberyard는 AWS가 크라이텍사의 크라이엔진을 구매하여 추가 개발한 엔진으로 자사 스튜디오에서 사용 및 외부에 공개한 게임엔진.
   - Smart Jump : 참조한 그림/문서 등에 링크 없어도 바로 가기 지원
"
   - Mark : 문서내에서 특정 부분에 마킹하고 빠른 바로 가기 (영문 한글자)
   - Bookmarks : 문자열로 이름 붙인 마크, 글로벌로 동작 (파일 이름까지 기억)
   - Portals : 멀티 모니터 사용시 참조하는 그림들을 우측에 별도로 보여주기

   개발자가 직접 대응하는 댓글들 보니, 빠르게 다른 OS 및 추가 기능들이 들어갈 것 같네요.
   https://news.ycombinator.com/item?id=27893303
"
"https://news.hada.io/topic?id=4659","Copilot은 오픈소스에 무슨 의미인가.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Copilot은 오픈소스에 무슨 의미인가.

   GitHub Copilot은 코드를 자동으로 생성해 주고, 대체 솔루션 코드도 추천해 주는 등 멋진 도구이지만, GitHub에 호스팅 된 수많은 오픈소스 코드로 트레이닝된 AI 기반으로 개발된 서비스여서 논란이 되고 있기도 합니다.
   이에 대한 Open Source Initiative 의견이 담긴 글 입니다.
   - 법률 전문가의 의견을 고려, 저작권 관련 미국 법률을 위반하는 문제는 없겠지만, 그것이 GitHub에 올라간 코드가 AI 학습 자원으로 활용 및 새탁 되는것이 괜찮다는 것은 아님.
   - 그렇다고 이것이 올바르지 않다고 단정 하기에는 너무 이르고, 법적으로 문제가 없는지만 따지지는 것으론 부족함. 새로운 영역이기 때문.
   - GitHub측에서 오픈소스 커뮤니티와 소통해서 Copilot 과 관련하여 오픈소스 라이선싱에 관해 지속적으로 논의할 필요가 있다는 의견.

   public에 한정되긴 하지만 공짜로 저장소를 제공해주는데 좀 넘어가줬으면... (법알못입니다ㅎㅎ)
"
"https://news.hada.io/topic?id=4606","The Logfile Navigator","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         The Logfile Navigator

   - 터미널에서 로그파일을 별도의 서버나 설정 없이 쉽게 볼 수 있게 해주는 도구
   - 폴더만 지정하면 알아서 파일 포맷을 인식해서 처리 (압축된 파일도 실시간으로 해제)
   ㅤ→ Web Access Log, CUPS page_log, Syslog, Glog, dpkg.log, uwsgi 및 Timestamp 로 시작하는 일반적인 로그 모두
   ㅤ→ 폴더안의 모든 로그를 하나의 뷰로 묶어 보기
   ㅤ→ 타임라인 뷰 : 워닝/에러를 시간대별로 그래프로 묶어 보기 한 후 상세 보기 가능
   ㅤ→ XML/JSON 등 Pretty-Print 지원
   ㅤ→ SQL 문장으로 로그 쿼리 가능 (SQLite Virtual Table 이용)
   ㅤ→ 글자 타이핑할 때마다 실시간 쿼리 가능 (새로 추가되는 로그 줄도 검색에 포함됨)
   ㅤ→ 구문 강조 : 에러(Red), 워닝(Yellow), SQL 키워드, XML 태그, Java 라인번호 등
   ㅤ→ 탭 자동완성 지원
   - 리눅스/맥 바이너리 제공

   윈도우용 바이너리도 있었으면 정말 좋았을 텐데…
"
"https://news.hada.io/topic?id=4597","스타트업에서 데이터 팀 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            스타트업에서 데이터 팀 만들기

   - 연 매출 100억 규모 Mid-Stage 스타트업에 4명 정도 소규모 데이터 팀을 키우기 위해 합류한 사람의 이야기
   - 몇 번의 경험에 의한 비유적인 글이며, 편향적*일 수 있으니 고려하고 읽을 것
   7월 1일 : 아침
   - 데이터팀 책임자로 출근 첫날
   - CMO와 인사
   ㅤ(CMO는 내가 왔다는 사실에 매우 흥분하고 있음, 자기 친구네 회사가 AI를 이용해서 고객 세그멘테이션을 하고 있는데 멋져 보인다고 얘기함)
   ㅤ(간단한 얘기 후 마케팅팀의 데이터 프랙티스를 조사)
   ㅤDATA: ""고객 확보 비용 (CAC)은 어떤가요 ?""
   ㅤCMO: ""음.. 실제로 아주 훌륭해요. 우리 데이터 사이언티스트가 수치를 측정해보니 클릭당 비용이 점점 줄고 있어요""
   ㅤDATA: (모든 데이터 사이언티스트는 데이터 팀에 보고한다고 들었는데, 다른 조직에 데이터 사이언티스트가 있다고?)
   ㅤCMO: ""진짜 문제는 Growth 팀이 우리가 사이트로 가져오는 트래픽을 다 전환시키지 못한다는 거에요""
   ㅤDATA: ""컨버전 퍼널을 볼수 있는 대시보드가 있나요 ?""
   ㅤCMO: ""리드를 전환하는 건 Growth 팀의 일이잖아요.""
   - Product Manager 중의 한명과 대화
   ㅤ시작 페이지를 전체 재설계한 PM은 사용자 등록수가 14%나 증가했다고 흥분했음
   ㅤDATA: ""그 숫자의 차이가 통계적으로 유의미 한가요 ?""
   ㅤPM: ""그건 내 일이 아니고 당신의 팀이 할 일이죠""
   ㅤPM: ""우리가 전에 물었을 때는, 데이터 팀에서 데이터가 없다고 얘기했고, 데이터를 얻는데 몇달이 걸릴 거라고 했어요""
   ㅤPM: ""놀라운 건 이걸 인크리멘털하게 변경하지 않았다는 거에요. 우린 이 변경에 대해서는 A/B테스트를 하지 않기로 했어요. 가끔은 극값(Local Maxima) 를 벗어 나기 위해선 큰 베팅을 해야해요.""
   ㅤPM: ""스티브 잡스는 iPhone 런칭할때 A/B 테스트를 하지 않았어요. 우리 팀은 마감 2일전에 이걸 런칭했고, 그게 중요한거죠!""
   ㅤDATA: (바빠 보이는 척 노트에 끄적인다)
   - 새로운 팀 멤버들과 대화
   ㅤ→ 3명 팀이지만 연말까지 10명으로 늘릴수 있는 예산을 받았음
   ㅤ→ 내가 와서 팀원들은 흥분한 듯
   ㅤ→ 기존에 만든 것들을 보여줌. 꽤 많은 것들이 있고 그 중 일부는 멋짐
   ㅤㅤ✓ 사용자 이탈 예측(Churn Prediction)을 위한 신경망
   ㅤㅤ✓ 관련 상품 추천 시스템이 구현된 노트북
   ㅤ→ 많은 코드가 다양한 시스템에서 데이터를 가져와야 하는 매우 복잡한 전처리 단계로 시작
   ㅤㅤ✓ 이 작업중 일부를 수행하려면 올바른 순서로 수동으로 실행해야 하는 여러 스크립트가 있는 것 같음
   ㅤ→ 팀원들에게 왜 프로덕션에 도입하지 않았는 지를 묻자
   ㅤㅤ✓ 엔지니어들이 이걸 프로덕션 레벨로 하려면 매우 큰 프로젝트라고 얘기함
   ㅤㅤ✓ Product Manager 가 백로그에 넣기는 했지만, 다른 일이 계속 발생해서 미뤄지는 중
   ㅤㅤ✓ 이를 위한 경영진의 지원이 필요하다고 얘기함
   7월 1일 : 오후
   - 공급망 책임자(Head of Supply Chain)와의 대화 ( 그는 CMO 만큼은 흥분하진 않는듯 )
   ㅤ""솔직히 데이터 팀의 도움이 필요한지 모르겠어요""
   ㅤ""우린 그런 종류의 문제가 없거든요. 우리에게 필요한 건 비즈니스 분석가에요""
   ㅤ""저에게는 전체 팀이 있고, 그들은 매우 복잡한 모델에 작업하는데 매일 몇시간씩 쓰고 있어요""
   ㅤ""그들은 내가 가진 기본적인 질문에 대답할 시간조차 없어요.""
   ㅤ""전 답변을 구하고 싶은 질문들로 가득 찬 스프레드 시트가 있어요""
   ㅤ(스프레드 시트를 보니 이런 것들이 있다)
   ㅤ""고객이 티켓을 발행하고 1시간 내에 해결된 고객과, 1시간 이후에 해결된 고객의 전환율 비교를 주문 금액 $100 달러 간격으로 분류하기""
   ㅤ(모델에 대해 물어보니)
   ㅤ- 수많은 VLOOKUP 들로 구성된 구글시트에 올바른 형식으로 알맞는 탭에 복사 해야하는 것 같음
   ㅤ- 데이터는 매일 업데이트 되고, 모델의 출력에 따라 팀의 그날 우선순위가 결정
   ㅤ- 공급업체(벤더)들에게 나가는 비용도 스프레드 시트로 계산하고 있음
   (집에 가서 위스키 한잔을 가득 따른다.. )
   [ 무슨 일이 있었던 걸까 ?]
   - 이건 기본적으로 데이터 성숙 단계에 있는 초기의 많은 회사에서 일어나는 일에 대한 (다소 냉소적인) 묘사임
   - 데이터 부족 및 조각난 데이터
   ㅤ→ 제품이 제대로 계측(Instrumented) 되지 않아서 데이터가 처음부터 존재하지 않는 경우가 많음
   ㅤ→ 데이터가 여러 시스템에 분산되어 있는 데이터 시스템 단편화
   ㅤ→ 데이터 드리븐으로 실행은 되지만 자동화가 거의 또는 전혀 없는 취약한 비즈니스 프로세스
   - 데이터 팀의 업무가 무엇 인지에 대한 불명확한 기대
   ㅤ→ R&D를 하고 AI를 배포하기 위해 고용된 데이터 사이언티스트 - 결과적으로 명확한 비즈니스 목표가 없음
   ㅤ→ 데이터팀은 ML을 프로덕션화하기 어렵다고 불평하지만, 정작 제품팀은 그 기능에 별로 신경을 쓰지 않음
   ㅤ→ ""English-to-SQL 번역기""가 필요한 사람들
   - 데이터 드리븐 트레이닝이 되지 않은 제품팀
   ㅤ→ 프로덕트 매니저는 데이터를 더 좋은 기능을 구축하기 위한 도구로 생각하지 않음
   ㅤ→ 제품팀이 구축하고자 하는 것과 데이터팀이 가진것 사이의 얼라인이 부족
   - 근본적으로 데이터 중심 문화와 상충하는 문화
   ㅤ→ 측정 가능한 발전과 학습을 축하하는게 아닌 배포(Shipping)를 축하하는 문화
   ㅤ→ 실제로 메트릭을 사용하는 팀들도 일관되지 않고, 측정이 제대로 이루어지지 않으며, 경우에 따라선 다른 팀과 충돌함
   - 데이터 리더십 없음
   ㅤ→ 다양한 데이터 인력들이 여러 다른 부서(기능)들에 보고하는 분열된 데이터 조직
   ㅤ→ 다른 부서들은 필요한 도움을 받지 못하므로 데이터 팀을 둘러싸고 많은 분석가를 고용
   ㅤ→ 툴체인 및 모범사례의 표준화 부족
   (와 이건 우울하다. 이 문제를 해결하기 위해선 어떤 일을 해야할까)
   7월 8일
   - 다음주 부터 데이터팀의 새로운 방향을 세우기 시작
   - 한명이 인프라에 경험이 있는 것 같으니 그에게 Centralized 데이터 웨어하우스 구축하게 함
   - 당장은 데이터를 한 곳으로 모으기 위한 가장 빠른 경로만 있으면 됨
   - 계획은 기본적으로 매시간 마다 프로덕션 DB를 데이터 웨어하우스에 덤프 하는 것
   - 프론트엔드에서 광고 추적 트래킹에 사용하는 프레임워크에서도 방대한 이벤트 로그를 보낼수 있지만 그건 기술부채로 담아두기
   - 채용팀과 함께 Generalist Data Role 정의
   ㅤ→ 핵심 소프트웨어 기술을 강조하지만, Generalist(모든 것을 다 하는) 적인 태도와 비즈니스 요구사항에 대해 깊이 공감할 수 있는 사람
   ㅤ→ 당장은 인공지능 및 머신러닝에 대한 모든 언급은 제거함
   - 데이터팀에 보고하지 않는 다른 데이터 인력들과 시간을 보냄
   ㅤ→ 마케팅 팀에 있다는 데이터 과학자는 젊은 사람이었음. ""저는 항상 데이터 사이언티스트가 되고 싶었어요. 당신에게 많이 배우고 싶어요""
   - 코딩 부트캠프를 운영하는 친구에게 좋은 ""SQL 교육 강의""가 있는지 물어봤고, 있다고 해서 이달 말에 도입하기로
   - 제품팀을 위해서 A/B 테스트 가 무엇이고 어떻게 동작하는지를 설명하는 발표자료 작성
   ㅤ→ 예상치 못한 결과가 나온 테스트의 많은 예를 보여주고,
   ㅤ→ 어떤 것이 이겼는지 추측해 볼 수 있게 인터랙티브 하게 작성
   - CEO의 비서를 만나서 ""매주 자동 발송되는 이메일을 통해서 보고 되었으면 하는 지표들""을 알아내기
   - Supply Chain 팀의 비즈니스 분석가들과 얘기해보니, 합리적인 사람들인데 이전에 데이터팀과 얘기하면서 상처를 입었음
   - 그들중 한명은 과거에 SQL을 사용한 경험이 있었음. 그가 전환율에 대해 질문하는 걸 보고 데이터 웨어하우스 접근권한을 줌
   - 데이터를 필요로 하는 조직 전체의 사람들과 주간 1:1 미팅을 셋업
   ㅤ→ 요점은 데이터 격차(Gap)와 기회들을 찾아서 데이터 사이언티스트에게 보내는 것
   ㅤ→ 데이터 사이언티스트 들은 연구 우선순위가 밀리므로 실망할 수 있음
   ㅤ→ ""가능한 한 빨리 비즈니스 가치를 제공하는데 집중"" 이라고 말하면서도 ""곧 머신러닝관련 작업으로 돌아갈 수도 있어요. 일단 보시죠"" 라고 얘기함
   9월 1일 : 아침
   - 3개월이 지나고, 이제 조금씩 일이 되어가는 것 같은 느낌
   - 다양한 이해관계자들과 매주 1:1로 미팅하면서 데이터가 변화를 일으킬수 있는 사각지대와 기회를 계속 찾음
   - 찾은 것들을 핵심 플랫폼 작업에 강제하도록 이용
   - ""파생된"" 데이터 세트를 만들려면 많은 파이프라인을 구축해야함. 초기 비용이 많이 들지만 올바른 데이터셋이 만들어지면 후속 분석이 훨씬 쉬움
   - 다른 부서들에 데이터 웨어하우스 액세스를 개방 시작
   - 직접 SQL을 사용해서 기본 분석을 하기 시작
   ㅤ→ 훌륭했던 일 : 쥬니어 프로덕트 매니저가 iOS Safari 의 전환율이 엄청 나쁘다는 것을 발견. 로컬스토리지 관련 프론트엔드 버그였고 한줄로 수정되었음
   - 공급망 책임자가 화난 이메일을 보냄
   ㅤ→ 데이터베이스가 변경되어서 500줄짜리 쿼리가 실패한다는 것..
   ㅤ→ 투덜대는 데이터 사이언티스트에게 수정을 맡기고 다른 당근을 매달아줌 ""이번 달 말에 멋진 머신러닝 문제를 찾아줄께요""
   9월 1일 : 오후
   - 아직 체크아웃팀의 제품 관리자는 메트릭 분석은 하지 않고 있음
   - 마케팅팀의 데이터 과학자가 매니저와 얘기해서 나에게 직접 보고하기로 함
   [ 무슨 일이 일어나고 있을까 ? ]
   - 가장 시급한 것들의 기본 토대를 마련 하는 중
   ㅤ→ 중요한 데이터를 한 곳에서 쿼리가능하게 함
   ㅤ→ SQL 접근을 개방하고 다른팀에서 사용하도록 해서 많은 ""SQL 번역"" 일들을 없앰
   - 반대로 다른 팀은 이런 자유 때문에 더 멀리가려고 할 수도 있음. 데이터 접근에 권한을 설정해서 방지할수는 있지만 단점이 더 많음
   - 체크아웃팀이 데이터 분석을 못한것은 누구에게 물어봐야 할 지를 몰랐기 때문
   - 이건 주로 조직의 문제임
   ㅤ→ 팀들은 데이터 팀과 협력하는 방법을 모름
   ㅤ→ 깨닫지 못하지만 데이터팀이 병목일 수도 있음
   - 가장 합리적인 것은 ""보고는 중앙 집중화 하고, 작업 관리는 분산화 하는 것""
   ㅤ→ 데이터와 결정이 더 긴밀한 피드백 루프를 생성하기 때문
   ㅤ→ 데이터 팀 멤버들이 각각의 팀에서 협업하고 보고만 나(데이터팀 리드)에게 할 수 있도록
   9월 2일
   - 데이터 팀이 6명으로 늘어남
   ㅤ→ 1명 데이터 웨어하우스 인프라
   ㅤ→ 5명은 각각 팀에 할당 : 온보딩, 공급망, 체크아웃, 마케팅, CEO 지원및 투자자/이사회용 발표자료 작성
   - 전사에 변경을 설명하고, 데이터 요구 사항을 위해서는 누구와 일해야 하는 지를 명확히 함
   - 앞으로 데이터 인력은 뽑더라도 다른 팀에 할당할 계획
   1월 3일
   - 데이터 사이언티스트 한명이 떠나기로 함. 그가 즐거워할 일도 많지 않기 때문에 잡지 않기로 함
   - 팀에는 새로운 사람들이 많음. 약간의 소프트웨어 엔지니어링 지식과 SQL, 그리고 데이터에서 흥미로운 것들을 찾고자 하는 사람들
   ㅤ→ 데이터에서 ""특종""을 찾는 사람들이니 ""데이터 저널리스트"" 라고 생각
   - 온보딩 팀과 작업하는 멤버의 경우
   ㅤ→ 온보딩 흐름에서 고객 주소가 필요하지 않아도 주소를 묻는 것을 발견
   ㅤ→ 이걸 제거하면 A/B 테스트에서 전환율이 21% 증가
   ㅤ→ 데이터를 쿼리하기 쉽게 하기 위해 ETL 작업이 필요해서 쉽지는 않았지만, Python 이 살짝 도와서 가능해졌음
   - CEO 와 분기 보고
   ㅤ→ 성장 이니셔티브 에서 PM이 새로 런칭한 랜딩페이지 재 설계를 소개
   ㅤ→ PM은 20명의 엔지니어 들이 마감을 맞추기 위해서 초과 근무를 하고 있다고 강조
   ㅤ→ CMO도 이 재설계의 일환으로 Direct Mail 에 큰 기대를 걸었기 때문에 깊게 관여하고 있음
   ㅤ→ CEO의 질문 ""현재 지표는 어떻습니까? 고객 확보 비용이 줄어들었습니까 ?""
   ㅤㅤ(당신은 CEO가 이런 질문을 하길 기대했는데 딱 나와서 미소 지음)
   ㅤ→ PM은 실제로 A/B 테스트를 진행했다고 부록에 있는 숫자들을 보여줌
   ㅤ→ 일부 지표는 상승하고, 일부는 하락해서 유의미한 결과를 보여주는 결과가 없음, 고객 확보 비용 수치는 안 좋아 보임
   ㅤ→ CMO는 아직 숫자는 만들어 가는 중이며, 이런 캠페인은 몇 달이 걸릴 수 있다고 강조
   [ 무슨 일이 일어나고 있을까 ? ]
   - 좋은 소식은 제품 팀이 A/B 테스트를 하기 시작했다는 것
   - 나쁜 소식은 결과를 무시하고 프로젝트가 대부분 마일스톤과 인위적인 데드라인에 맞추도록 진행된다 는 것
   - 최고의 소식은 CEO가 각 팀들이 데이터가 진실(truth)로 사용되도록 푸시하고 있다는 것
   - 조직이 더 데이터 드리븐이 되도록 압력을 받게 되면, 데이터 팀이 다른 팀과 협력하는 방식을 가속화 해야 함
   - 특히 최고 경영진들은 더 지표에 집중하게 되고, 데이터 팀이 이런 지표들을 작업하도록 하는게 당신의 일
   - 가장 간단한 방법 하나는 각 팀들이 중요시 하는 지표에 대한 대시보드가 있는지 확인 하는 것
   4월 1일
   - 데이터 팀에서 수행했던 예전 머신 러닝 작업들은 아직 그대로 있음
   - 인벤토리 제품 팀에서 일하는 데이터 사이언티스트가 예전에 만든 추천 시스템 작업들에 관심을 가지고 있음
   - 새로 뽑은 멤버중 한명으로 Generalist 인 사람이어서, 추천 시스템 노트북을 작은 Flask 앱으로 만들어서 내부에 배포했음
   - 인벤팀의 제품 관리자가 보고 좋아함 ""이거 어떻게 배포하죠?""
   - 인벤팀의 주요 지표중 하나는 ""평균 주문 금액"" 이고 이 추천이 그걸 크게 개선 할수 있을 것으로 봄
   - 짧은 추정으로도 크게 배포하는 건 어려울 것 같지만, ""고객중 1%에만 배포해보면 어떨까요?"" 라는 아이디어를 냄
   - ""멍청하지만 Cron Job으로 추천 제품들을 미리 생성해두면 되고, 며칠 안에 만들수 있을 것 같아요""
   - 공급망 팀과 일하면서 더 많은 거대한 SQL 쿼리들을 발견
   - 계속 깨지고 있지만, 데이터 팀이 이걸 적절한 파이프라인으로 변환 작업중
   - 공급망 팀 헤드가 더 많은 데이터 사이언티스트를 고용해 달라고 요청
   [ OK, 무슨 일이 일어나고 있는건가요 ? ]
   - 먼저, 멋진 기계 학습 작업에 대한 희망이 생겼음
   - 제품팀이 드디어 추천 시스템을 작은 테스트로 런칭 하는 것에 흥분해 있음
   - 예전에는 제품 엔지니어링팀이 작업을 예측하기 힘들고, 직접 기여하기 원치 않았고, 데이터팀이 프로덕션화할 스킬이 없었으므로 진행할 수가 없었던 일
   - 이 문제를 해결 한 것은 데이터팀이 실제로 데모를 구축했기에 가능한 것. 이렇게 하면 프로덕션에 가까워 질 뿐 아니라 가능성을 명확하게 보여줌
   - 또 하나는 공급망 팀에 일어나는 일
   ㅤ→ 자체 ""비즈니스 분석가"" 로 시작했지만, 데이터를 얻기 위해서는 데이타 팀이 쿼리를 실행해줘야 했음
   ㅤ→ 분석가들이 데이터팀의 도움을 받아서 직접 쿼리를 실행하기 시작
   ㅤ→ 먼저는 데이터팀과 마찰이 생겼던 ""그림자 기술 부채""(괴물 같은 크기의 SQL 쿼리)를 없애기 시작
   ㅤ→ 데이터 팀이 공급망 팀에 붙어서 돕기 시작
   ㅤ→ 데이터 팀 멤버가 임베딩 되면서 비즈니스 분석가의 필요성은 줄어들고 데이터 과학자들이 증가함
   - 처음에 프로덕션 DB를 데이터 웨어하우스에 직접 덤핑하기 시작할때 ""기술 부채""을 떠맡았음을 기억할 것
   - 처음에는 많은 것들이 깨지지만 안정적으로 쿼리하도록 하는 레이어를 추가 해야함. 굉장히 많은 일이 될수 있음
   7월 1일
   - 3분기 기획회의
   ㅤ→ 에전에는 다음 분기에 회사가 뭐에 베팅할 지를 논쟁했음
   ㅤ→ 이번에는 당신이 회사의 최상위 지표들을 발표하고, 각 팀들이 서브 지표들을 통해서 최상위 지표들을 세분화 해서 발표
   - 제품관리 팀 작업이 성과를 내었음
   ㅤ→ PM이 테스트를 실행하면서 배운 내용이나 데이터에서 발견한 내용에 대해 이야기 하면서 프로젝트에 대한 투자를 정당화
   - 큰 성과는 체크아웃 팀과 일하는 데이터 과학자가 사용자가 확인페이지에서 뒤로 가기 버튼을 눌렀을 때 장바구니 개체가 이상하게 되는 것을 발견했다는 것
   ㅤ→ 이 문제를 해결하자 전환율이 크게 상승 되었음
   - 또 다른 인사이트는 서로 다른 광고 캠페인을 통해서 온 트래픽들이 매우 다른 전환 프로필을 가진 다는 것
   ㅤ→ 일부 캠페인은 클릭 가격이 쌌지만 전환율이 끔찍했고, 다른 캠페인은 비용이 많이 들었지만 전환율이 매우 높았음
   - UTM 변수를 추적하고 계정 생성에 연결해서, 광고 클릭에서 구매까지의 전환율 측정이 가능해졌음
   ㅤ→ 모든 데이터를 같은 데이터 웨어하우스로 가져와서 쉽게 쿼리할 수 있도록 정규화 하기 전에는 불가능 했음
   ㅤ→ 마케팅과 협력을 통해 주요 KPI는 클릭당 비용이 아닌 End-to-End 고객 확보 비용임
   - 또 다른 재미난 소식은 1% 추천 시스템 테스트가 이례적으로 성공했다는 것
   ㅤ→ 사용자의 100%까지 확장하는 것은 매우 큰 프로젝트이지만 CEO가 프로젝트를 승인했음
   - 모든 결과물이 긍정적인 것은 아니고, 많은 테스트는 실패했음.
   ㅤ→ 슬라이드중 하나는 배송비가 별도로 청구되지 않고 가격에 포함된 테스트에 대한 설명이었음
   ㅤ→ CEO가 이렇게 말함 ""여기서 무엇을 배웠습니까?""
   ㅤ→ 이건 다시 일련의 후속 실험을 계획하는 대화로 이어짐
   (집에 가서 샴페인을 터뜨림)
   [ 무슨 일이 일어난거지 ?]
   - 당신이 해냈습니다.
   - 조직을 진정한 데이터 네이티브로 변화 시켰습니다.
   - 데이터 팀은 다양한 이해 관계자와 교차 기능적으로 작업합니다.
   - 데이터와 인사이트가 계획에 이용되고, 데이터는 목표가 불분명한 연구가 아닌 비즈니스 가치를 창출하는데 사용됩니다.
   - 회사는 빠른 데이터 기반 피드백 주기를 이용해서 대규모 ""워터폴"" 스타일 계획 대신 반복적인 방식으로 작업 합니다.
   - 지표들은 비즈니스 가치를 만들고 그에 대한 책임감을 가질 수 있는 방식으로 정의됩니다.
   - 데이터 문화는 위(CEO가 추진하고)와 아래(직원들)로부터 양쪽이 함께 주도 합니다.
   - 적어도 무언가를 배웠다면 실패해도 괜찮습니다.
   (축하합니다. 당신은 샴페인을 들 자격이 있어요)

   초반부 읽는데 저희회사인줄 알았네요,,,,ㅠㅡㅠ(물론 저희는 데이터팀조차 없습니다ㅎ)

   재밌게 읽었습니다. 감사합니다~!

   엔지니어들이 즐겨볼만 한 테크 스타트업 관련 드라마의 어느 에피소드를 시청한 느낌입니다. 재미있어요! 👍

   22222

   사람이 많아 보이는데 이 정도가 mid-stage군용

   아마도 국내하고는 보는 규모가 좀 다를 것 같습니다.

   편향적(Opinionated)* 에 대해서는 깔끔하게 번역이 어려운데, 저는 주로 ""자신의 의견이 반영되어 편향적이다"" 의미에서 ""편향적"" 으로 쓰긴 합니다.
   이에 대해서 다른 분이 적은 글이 있으니 참고하세요
   - 컴퓨터 용어로서의 opinionated(편향적)의 의미 https://www.clien.net/service/board/cm_app/13558026
   그리고, 원래 글은 내용이 풀어 써져 있는데, 조금 읽기 쉽게 대화체로 재구성했습니다.
"
"https://news.hada.io/topic?id=4638","나 같은 사람이 수학에 무슨 공헌을 할 수 있을까요? (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   나 같은 사람이 수학에 무슨 공헌을 할 수 있을까요? (번역)

   Math Overflow 에 올라온 질문에 대한 빌 서스턴(1982 필즈상 수상자)의 답변.
   Q.
   - 나 같은 사람이 수학에 무슨 공헌을 할 수 있을까요?
   - 수학은 가우스나 오일러 같은 천재들의 영역이고, 저처럼 평범한 사람들이 할 수 있는 의미있는 일이란 없는 것 같습니다. 그저 총알받이 병사가 아닐까요? 이 질문에 대한 답을 정말 찾고 싶습니다. 경험담이든 누군가의 전기이든 무엇으로부터든지요.
   A.
   - 당신이 공헌해야 하는 것은 수학이 아닙니다. 그보다 심오한 것이죠. 바로 수학을 추구함으로서 인간성에, 그리고 더 심오하게는 세상의 복리에 어떻게 공헌할 것인지입니다.
   - 수학은 인간의 마음에 강하게 의존하고 있습니다. 수학적 이해력은 한 방향으로 단조롭게 확장되지 않고, 단순한 아이디어라 할지라도 다른 사람에게 전달하는 것은 어려울 때가 많습니다.
   - 그래서 수학은 옛 아이디어와 새 아이디어에 숨결을 불어넣고 수학적 이해를 널리 퍼뜨리는 살아있는 수학자 커뮤니티에서만 존재할 수 있습니다.
   - 몇 제곱미터의 땅에 첫 발을 디딘 것이 누구인지를 묻는 것은 정말로 부차적인 문제입니다. 혁명적인 변화는 중요하지만, 혁명은 드물고 스스로 유지되지도 않습니다. 혁명은 수학자 '사회'에 매우 많이 의존하니까요.

   제 나름 요약을 하긴 했지만, 요약문보다는 전문을 읽는 것을 강하게 추천드립니다.

   좋은 글 소개 고맙습니다.
"
"https://news.hada.io/topic?id=4621","MS 경영진과 스티브잡스의 미팅 요약 메일 (1998년 4월)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MS 경영진과 스티브잡스의 미팅 요약 메일 (1998년 4월)

   애플의 새 OS와 AppleWorks 에 관해 양사가 회의한 내용

   1998년의 애플은 어떤 생각을 가지고 있었고, 그 시절의 MS는 어떻게 애플을 보고 있는지 엿볼수 있는 메일이네요.
   두번째 이미지 첫줄에 Mac OS 기술 제품 마케팅 담당인 Ken Bereskin 에 대해 (바보) 라고 적은게 흥미롭군요.
"
"https://news.hada.io/topic?id=4559","Music for 프로그래밍","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Music for 프로그래밍

   - 개발할 때 집중도와 생산성을 올려 주는 음악 믹스
   - 현재 총 62개의 에피소드
   - 한 에피소드당 1~2시간 분량의 곡들을 큐레이션 해서 통합 mp3로 제공
   ㅤ→ 페이지에서 직접 재생 또는 mp3 다운로드 가능
   ㅤ→ RSS 및 팟캐스트로도 제공
   function musicForProgramming(task)
   {
   ㅤtask = (task === undefined) ? 'programming' : task;
   ㅤreturn 'A series of mixes intended for listening while '+task+' to aid concentration and increase productivity (also compatible with other activities).';
   }

   들어봤는데 상당히 무서운 노래들이 있네요 ㅠ

   비슷하지만 다른 것
   - Programmer's Music - 코딩중에 집중력/생산성을 높이기 위한 논보컬 음악 큐레이션 https://news.hada.io/topic?id=341

   HN 댓글에서 게임 및 영화 배경음악 추천도 좋네요 https://news.ycombinator.com/item?id=27741722
   World of Warcraft Ambient Music
   - https://www.youtube.com/watch?v=xTPn_Nk_KrM
   - https://www.youtube.com/watch?v=Oeo2VCCtUZQ
   - https://www.youtube.com/watch?v=wjTe0R2bREY
   Skyrim
   - https://www.youtube.com/watch?v=hBkcwy-iWt8
   - https://www.youtube.com/watch?v=vgUaZz04bkw
   Blade Runner
   - https://www.youtube.com/watch?v=k3fz6CC45ok
   LOTR - Nazgul Ambience
   - https://www.youtube.com/watch?v=y1Wum6hQclU
   VICTORIAN ERA AMBIENCE: Soft Rain Sounds, Horses, Crows, Bell Sound
   - https://www.youtube.com/watch?v=UzEfSjTYvDc
   Progressive Trance Mix - Dreamscape
   - https://www.youtube.com/watch?v=_RlJig87Px0
"
"https://news.hada.io/topic?id=4616","Kool - 더 나은 로컬 개발 환경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Kool - 더 나은 로컬 개발 환경

   - Docker를 이용해서 로컬 개발 환경을 더 쉽고 빠르게 만들어주는 CLI 오픈소스
   ㅤ→ 복잡한 Docker / Docker Compose 설정 없이
   ㅤ→ 다양한 언어와 프레임워크에 최적화된 커스텀 도커이미지 사용
   ㅤ→ 여러 개의 로컬 환경을 구성하고 스위치 가능
   ㅤ→ 로컬 작업을 외부에서 접속 가능하게 공유
   - 기본 프리셋 제공
   ㅤ→ PHP, Node.js, Laravel, AdonisJS, NextJS, NuxtJS, NestJS, Symfony, Hugo, Wordpress
   ㅤ→ 초기 생성시 옵션 선택 가능 : 버전, 사용할 DB, 패키지 매니저 등

   필요한 툴이긴 한데 새로운 프리셋을 만들고 싶으면 어차피 Docker compose를 알아야 하네요.
   저도 docker 기반으로 로컬개발을 구축하는 것에 관심이 많아서 이런 저런 시도를 해보는데,
   지금까지는 Makefile을 만들어서 상황에 맞게 docker compose를 실행하는 것으로 정착하고 있습니다.
"
"https://news.hada.io/topic?id=4661","Quickwit - 비용 효율적인 분산 검색엔진 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Quickwit - 비용 효율적인 분산 검색엔진 오픈소스

   - Rust + Tantivy 기반 (Rust로 구현된 Apache Lucene과 비슷한 오픈소스, 한글 토크나이저 지원)
   - 빅 데이터셋을 인덱싱 하기 좋게 설계
   ㅤ→ Compute 와 Storage 를 분리 : S3 같은 저장소를 검색 가능
   ㅤ→ 손쉬운 서치 클러스터 관리 : 몇초 만에 인스턴스 추가/삭제 가능
   - 지원 기능
   ㅤ→ 인덱스와 클러스터 관리를 위한 간단한 CLI
   ㅤ→ 로컬/리모트 인덱스
   ㅤ→ Stateless 인스턴스
   ㅤ→ Byte Range 쿼리를 지원하는 아무 객체 스토리지에나 사용 가능
   ㅤ→ Full Text 검색(Phrase Query 포함)
   ㅤ→ 타임 파티셔닝 지원 내장
   ㅤ→ Boolean 쿼리 지원
   ㅤ→ Text, i64, f64, date, bytes, composite types object, array 데이터 타입 지원

   어떻게 비용 효율 적인 걸 구현했는 지는 블로그에 적은 소개글에 나와 있습니다.
   - Quickwit: A highly cost-efficient search engine in Rust https://quickwit.io/blog/quickwit-first-release/
   - Tantivy https://github.com/tantivy-search/tantivy
   예전에 "" Bayard - Rust 로 구현된 풀텍스트 검색 & 인덱싱 서버 https://news.hada.io/topic?id=841 "" 소개할때는 Tantivy에 한글 토크나이저가 없었는데 추가되었네요.
   https://github.com/lindera-morphology/lindera-ko-dic-builder
   한글 토크나이저
"
"https://news.hada.io/topic?id=4590","Pulse - 애플 OS를 위한 네트웍 인스펙터 & 로거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Pulse - 애플 OS를 위한 네트웍 인스펙터 & 로거

   - iOS/macOS/watchOS/tvOS 의 네이티브 앱 디버깅을 위한 프레임워크
   ㅤ→ 앱내에 프레임워크를 심어서 모든 로그와 네트웍 트래픽을 캡쳐
   ㅤ→ UI 프레임워크로 앱 내에서 로그를 직접 보는 콘솔 추가 가능
   - 전송된 HTTP Req/Res 헤더와 요약 보기. 타이밍 차트 지원
   - 트래픽 로그를 호스트/경로/날짜 등으로 필터링하고 검색 가능
   - 전체 또는 각각의 트래픽 로그를 저장 및 공유 가능
   ㅤ→ 공유된 로그를 보는 별도 앱(iOS/macOS) 제공
"
"https://news.hada.io/topic?id=4631","Zorbi - 무료 플래시 카드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Zorbi - 무료 플래시 카드

   - 크롬 확장을 이용한 플래시카드 생성
   ㅤ→ 웹 페이지/PDF 에서 보던 내용으로 바로 만들기
   ㅤ→ Notion에 작성한 노트에서 만들고 공유 및 협업 가능
   - 이미지, 수식, 마크다운 지원
   - 트리 형태로 카드 정리 가능
   - 다른 사람들과 카드 공유 가능

   이상하게 메모 관련은 아직까지 마음에 드는 프로그램이 하나도 없더라고요.
"
"https://news.hada.io/topic?id=4668","RAWGraphs - 스프레드시트와 데이터 시각화 사이의 미싱링크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  RAWGraphs - 스프레드시트와 데이터 시각화 사이의 미싱링크

   - 빠른 시각화를 도와주는 d3.js 기반의 오픈소스 웹앱
   1. 엑셀,CSV,TSV 등에서 데이터 붙여 넣기 (브라우저내에서만 데이터 보관 및 처리. 서버로 전송되지 않음)
   2. 다양한 시각화 모델에서 선택(자신의 모델도 쉽게 만들기 가능)
   3. 차트와 데이터를 맘에 들게 튜닝
   4. SVG/PNG로 Export
   - 다양한 시각화 방법에 대한 동영상 가이드 제공
   ㅤ→ hexagonal binning, alluvial diagram, Voronoi diagram, violin plot..
"
"https://news.hada.io/topic?id=4575","미 국방부, MS와의 11조원 클라우드 계약 취소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      미 국방부, MS와의 11조원 클라우드 계약 취소

   - MS와 계약했던 $10b 규모의 JEDI 프로젝트를 취소
   ㅤ→ 계약이 오래 지연되어서 기술환경의 변화때문에 요구사항을 충족하지 못해서라고 발표
   ㅤ→ 대신, MS/아마존 및 다른 클라우드 회사들과 새로운 계약을 추진할 것
   - 아마존은 2019년에 이 계약이 체결 되자마자, 정치적인 이슈에 의해서 아마존을 배제한 것이라고 소송을 제기한 바 있음
   - JEDI 프로젝트는 전장에서 병사들의 통신을 개선하고, 인공지능을 사용해서 전쟁 계획 및 전투 능력을 높이기 위한 프로젝트
   - JEDI를 Joint Warfighter Cloud Capability 라는 새로운 프로그램으로 대체할 것이며, MS, 아마존 을 포함해서 구글, IBM, 오라클도 자격이 될수 있다고

   몇달간 고만고만 하던 아마존 주가가 이거 발표 이후로 올랐죠.
   MS 주가는 그닥 변화 없는거 봐서는 소송때문에 기대 안했던 것 일수도
"
"https://news.hada.io/topic?id=4601","Firefox 90, Fetch Metadata Request Headers 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Firefox 90, Fetch Metadata Request Headers 지원

   - 웹 어플리케이션들이 CSRF, XS-Leaks, Spectre 등의 크로스 사이트 공격으로부터 자신을 보호 가능
   - Sec-Fetch-* 로 시작하는 Fetch Metadata 헤더를 기본 전송해서 서버측에서 요청들을 구분
   ㅤ→ Sec-Fetch-Site : same-origin, same-site, cross-site, none
   ㅤ→ Sec-Fetch-Mode : cors, navigate, no-cors, same-origin, websocket
   ㅤ→ Sec-Fetch-User : ?0 또는 ?1
   ㅤ→ Sec-Fetch-Dest : audio, audioworklet, document, embed, empty, font, image, manifest, object, paintworklet, report, script, serviceworker, sharedworker, style, track, video, worker, xslt
   * CSRF : Cross-Site Request Forgery
   * XS-Leaks : Cross-Site Leaks
   * Spectre : Speculative Cross-site Execution Side Channel

   Fetch Metadata Request Headers 는 W3C Working Draft 단계입니다
   - https://www.w3.org/TR/fetch-metadata/
   - Protect your resources from web attacks with Fetch Metadata https://web.dev/fetch-metadata/
   크롬 및 크로미엄 기반 브라우저들은 76버전 부터 데스크탑/안드로이드/웹뷰 까지 모두 지원 합니다.
   - https://www.chromestatus.com/feature/5155867204780032
   IE(6~11) 랑 Safari(맥/iOS) 빼면 대부분 적용 가능합니다.
   - https://caniuse.com/?search=sec-fetch
"
"https://news.hada.io/topic?id=4598","github1s - 1초만에 GitHub 코드를 VS Code에서 보는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               github1s - 1초만에 GitHub 코드를 VS Code에서 보는 방법

   GitHub에 있는 코드를 VS Code로 보고싶을 때 레포를 로컬에 클론해서 보는 방법 대신 브라우저에서 바로 열어 볼 수 있게 해주는 프로젝트입니다. github.com 주소를 github1s.com 로 바꾸면 바로 사용할 수 있습니다.
   예시: https://github1s.com/microsoft/vscode

   저도 가끔 이거 유용하게 사용하긴 하는데, github private repo 엑세스권한을 요구해서 좀 꺼림찍 하더라구요

   vscode에 remote repository가 정식 런칭되서, 이쪽을 추천드려요

   와... 감사합니다.!
   편안하네요

   이 도구에서 영감 받은 Git-Peek 도 있습니다. 로컬로 Tarball을 빠르게 받아서 보고 지워줍니다.
   - git-peek : Repo를 에디터에서 빠르게 열기 https://news.hada.io/topic?id=3732
   가볍게 웹UI로 볼때는 Github1s 로 보고, 로컬에서 내 에디터로 찬찬히 볼때는 Git-Peek을 사용하면 좋을듯 합니다.

   같은 서비스로 surf도 있습니다.
   https://github.com/surfcodes/surf
"
"https://news.hada.io/topic?id=4600","Tech Giant가 되려면 뭐가 필요한가 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Tech Giant가 되려면 뭐가 필요한가 ?

   - 구글, MS, 애플, 아마존, 소니, 텐센트, 알리바바, 삼성, 네이버, 페이스북 같은 Top 20 기술 회사들이 가지고 있는 것들
   1. AI 연구소 (100%)
   2. 머신러닝 프레임워크 (95%)
   3. 웹 어플리케이션 프레임워크 (85%)
   4. 벤처캐피탈 (80%)
   5~12. (75%) 웹브라우저, 데이터베이스, 모바일 OS, Payment, 쇼핑, 스마트 스피커, 스마트폰, 가상 비서
   13~17. (70%) 실시간 비디오 스트리밍, 음악 스트리밍, 클라우드 스토리지, 소셜네트워크, 글꼴
   18~22. (65%) 컴퓨터 칩, 클라우드 컴퓨팅, 모바일 어플리케이션 프레임워크, 실시간 메신저, 화상 회의
   23~28. (60%) 앱스토어, 북 스토어, Emojis, 자율운전 자동차, 클라우드 게이밍, 비즈니스 커뮤니케이션 플랫폼,
   29~34. (55%) Virtual Currency, 개발환경(IDE), 뉴스, 검색엔진, 무선 이어폰, 비디오 공유 플랫폼
   35~42. (50%) 디자인 언어, 이메일 서비스, Embedded OS, 자동차 엔터테인먼트 시스템, 화상 통화, 개발 언어, 로봇, 번역
   44~52. (45%) 이메일 클라이언트, 영화 스튜디오, 헬스 트래킹 플랫폼, 지도, 노트북(랩탑), 인터랙티브 노트북(Google Colab같은), 태블릿, 비디오 게임 스튜디오, 웨어러블, 웹캠
   53~61. (40%) 캘린더, Desktop OS, Asset 트래킹, VOD 구독, 사진 관리 앱, 숏 비디오, 스마트 홈 플랫폼, 디지털 미디어 플레이어, 디지털 미디어 플레이어 OS
   62~67. (35%) 증강현실 헤드셋, 전기자동차, 오피스 Suite, Stories (소셜미디어), 태스크 관리자, Wi-Fi Router
   68~ JavaScript Engine, 근거리 공유 프로토콜, 노트 테이킹 도구, 팟캐스트 앱, 보안 카메라, 스타트업 억셀러레이터, 가상현실 헤드셋, 웹브라우저 엔진, VOD 서비스, 날씨 앱, 비디오 게임 구독

   1. Google (77)
   2. Microsoft (70)
   3. Apple (68)
   4. Amazon (61)
   5. Sony (48)
   6. Tencent (46)
   7. Alibaba (45)
   8. Samsung (45)
   9. Huawei (44)
   10. ByteDance (43)

   대부분의 기술 선도 회사들이 다 비슷한 걸 하고 있군요.
   작성자가 각 회사가 진행하는 기술 프로젝트에 따라 Top 20 리스트를 뽑은거긴 하지만 중국회사가 6개나 되네요.
"
"https://news.hada.io/topic?id=4663","Node-RED 2.0 릴리즈 - Low-Code 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Node-RED 2.0 릴리즈 - Low-Code 오픈소스

   이벤트 기반으로 하드웨어,API,온라인 서비스를 연결하는 비주얼 Low-Code 프로그래밍 도구
   - Node 12.17.x 이상
   - Monaco 에디터 추가 지원(기본값은 ACE)
   - Flow Debugger 추가 : 노드당 브레이크포인트 걸고 디버깅 지원
   - Flow Linter 추가
   - 노드들 변경 : 외장 모듈 지원(CJS, ES6), RBE 노드를 Filter로 변경

   - Node-RED - Low-Code 프로그래밍 도구 https://news.hada.io/topic?id=2142
"
"https://news.hada.io/topic?id=4560","아이슬란드의 주4일 근무 시험 '압도적인 성공'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       아이슬란드의 주4일 근무 시험 '압도적인 성공'

   - 아이슬란드 노동 인구의 1% 이상이 전체 임금을 줄이지 않고 근무시간을 35~36시간으로 단축하는 파일럿 프로그램에 참여
   ㅤ→ 2015년 부터 2019년까지 2500명 이상 (세계 최대 규모)
   ㅤ→ 생산성과 웰빙 향상 시켰고, 영구적인 변화로 이어지는 중
   - 아이슬란드 노조 연맹이 재판을 통해서 전체 노동 시간 단축하는 협상을 시작
   ㅤ→ 전체 노동 인구의 86%가 시간을 단축하거나 단축할 수 있는 유연성을 가지게 될 것으로 예상
   - 실험에 포함된 근로자는 9to5 근무자 및 비정규 교대 근무자를 포함한 사무실, 놀이학교, 병원, 사회복지 담당자 등
   - 참여한 근로자들의 웰빙이 다양한 지표에 걸쳐서 좋아졌고, 스트레스 / 번아웃 / 워크 라이프 밸런스 등은 모든 그룹에서 대폭 개선 되었음

   저는 AI와 로봇의 발달 등으로 언젠가 주4일 근무를 넘어서 30시간 이하의 근무로 갈 수 있을 거라 봅니다.

   엑셈이라는곳에서 주 30시간 근무를 선언했는데 잘되었으면 좋겠네요 :)

   완전 옳습니다! 로봇을 왜 만들었겠어요!!

   세계정복? >ㅁ<
"
"https://news.hada.io/topic?id=4657","FanFan: M1 맥용 팬소리 시뮬레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FanFan: M1 맥용 팬소리 시뮬레이션

   CPU 사용량에 비례해 팬 소리를 내주는 앱. 2021년 만우절에 장난삼아 두시간만에 만들었다고. 개발자의 2019 맥북프로에서 팬 컨트롤 앱으로 조절해가며 녹음한 사운드.
   https://github.com/insidegui/FanFan

   제 Air 에도 설치를... ㅋㅋㅋ

   엌ㅋㅋㅋ
"
"https://news.hada.io/topic?id=4666","Salesforce, Slack 인수 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Salesforce, Slack 인수 완료

   2020년 12월 1일 Salesforce의 Slack 인수 소식 후 약 8개월 만에 공식적으로 Salesforce가 Slack 인수를 완료했습니다.

   우와

   - Salesforce 블로그에 올라온 포스트: 슬랙에 처음이세요? 여기 슬랙을 WFA에 사용할 수 있는 방법을 알려드립니다 https://www.salesforce.com/blog/slack-basics-work-anywhere/
"
"https://news.hada.io/topic?id=4613","RabbitMQ Streams","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            RabbitMQ Streams

   - Streams : RabbitMQ 3.9에 새로 추가된 데이터 구조
   ㅤ→ 기존 큐와 달리 메시지를 삭제하지 않는 Append-Only 모델
   ㅤ→ 데이터가 유지되고 복제됨
   - Usecase
   ㅤ→ 여러 어플리케이션이 동시에 같은 메시지를 받아야 할때
   ㅤ→ 대용량 백로그 저장
   ㅤ→ Timestamp 기준으로 Replay 및 시간여행 가능
   ㅤ→ 기존 큐 대비 엄청 빠름
   - 주요 기능
   ㅤ→ 최소 1회 전송 보장
   ㅤ→ 서버측 오프셋 트래킹 지원. 컨슈머가 원하는 부분부터 재시작 가능
   ㅤ→ 무한 확장 가능. 크기/기간 기준 저장정책을 통해 삭제 지원
   ㅤ→ 초고속의 전용 바이너리 프로토콜 및 AMQP 0.91 & 1.0 지원
   ㅤ→ 클라이언트-서버 TLS 지원
   ㅤ→ Java / Client 제공

   Kafka 대신 작게 스트림 처리하고 싶을 때 사용하라는 거네요.
   Redis Streams 랑 기존 인프라에 맞게 취사선택 하면 될 듯

   오.. rabbitmq 가 카프카에 비하면 설치가 쉽긴 해서 좋겠는데요!
"
"https://news.hada.io/topic?id=4563","Feed me up - CSS셀렉터를 이용한 RSS생성기 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Feed me up - CSS셀렉터를 이용한 RSS생성기 오픈소스

   - 임의의 웹사이트에 대해서 CSS 셀렉터로 RSS를 생성해주는 Typescript 오픈소스
   1. 여러 사이트의 스크랩 설정을 TOML 파일로 저장
   2. GitHub Actions / GitLab CI/CD 등에 TOML 업로드
   3. GitHub Pages / GitLab Pages 에서 호스팅해서 사이트별 각각의 피드 XML로 제공
"
"https://news.hada.io/topic?id=4562","XiangShan, 오픈소스 64비트 RISC-V 프로세서 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  XiangShan, 오픈소스 64비트 RISC-V 프로세서 공개

   - SiFive Performance P550 이 현재 가장 강력한 RISC-V 로 Arm Cortex-A75 를 능가하고 효율면에서는 3배 이상
   - 중국과학원(CAS)이 연구프로젝트로 만들어 발표한 XiangShan은 Cortex-A76 성능을 목표로 함
   ㅤ→ 25명의 학생과 교수들이 참여
   - TSMC의 28나노 공정으로 1.2~1.3Ghz 8코어 프로토타입을 만들었고, 연말까지 SMIC의 14나노 공정으로 2Ghz 버전을 개발할 것
   - RV64GC 아키텍처 기반 (2MB 캐쉬, PCIe 인터페이스, 32GB DDR4 메모리 지원)
   - FPGA 위에서 Debian 으로 테스트 했고, 최근에 HiFive RISC-V 용으로 포팅된 Ubuntu 도 지원할 예정
   - RISC-V 코어는 Chisel 언어로 개발
   ㅤ→ Verilog 보다 1/5 분량의 코드만으로 개발 가능
   - 대학 프로젝트라서 상용화 될지는 불분명하지만, 중국이 x86 과 Arm 의 대체제를 찾고 있어서 중국 시장용 프로세서로 충분히 가능할 듯

   - SiFive 고성능 RISC-V 프로세서 공개 https://news.hada.io/topic?id=4545
"
"https://news.hada.io/topic?id=4587","AWS InfiniDash 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           AWS InfiniDash 이야기

   - 가짜 제품인 AWS InfiniDash가 바이럴 된 현상을 정리
   - Twilio의 개발자 Joe Nash가 가짜로 만든 InfiniDash 가 언젠가 JD에 포함될 수 있을것이라고 트윗
   - 여기저기 퍼지다가 AWS의 CTO인 Werner Vogels도 이 농담에 참여해서 ""Infinidash 의 GA Launch는 정말 중요하다""고 트윗
   - @_skris가 InfiniDash 의 오픈소스 대체제인 OpenDash 를 발표, @DataMiller는 이 라이센스가 별로라고 다시 Fork한 DashIO를 멘션
   - Signal 메신저가 AWS InifiniDash 경력을 가진 사람을 찾는다는 구인공고를 냄. (OpenDash 경력도 가능하다는 문구와 함께)
   ㅤ→ 작년에 IBM이 나온지 6년밖에 안된 쿠버네티스의 최소 12년 경력자를 찾는다는 구인공고를 냈던 것을 놀리는 것
   - 그외에 온라인 튜토리얼 ""How to use AWS Infinidash with Node JS"" 이나, ""Advanced Infinidash: The Definitive Guide"" 같은 가짜 책이 만들어짐
   - 원 트윗한 Joe Nash는 깃헙의 CoPilot에 대해서 생각하다 나온 것이라고
   ㅤ→ ""많은 개발자들이 온라인에서 본 글들을 통해서만 기술에 대해 알게 될 것""
   - AWS는 공식적으로는 대답하지 않았는데, 이에 대해서 한 연구자는 ""아마존에는 제품이 너무 많이 때문에 이게 공식적으로 그들의 제품이 아닌지 확인하는데 오래 걸릴 것"" 이라고..

   재밌네요
   ""작년에 IBM이 나온지 6년밖에 안된 쿠버네티스의 최소 12년 경력자를 찾는다는 구인공고를 냈던 것을 놀리는 것""
   이거 비슷한 공고는 국내에서도 본 것 같은데ㅎㅎ

   지난 몇일간 HN및 해외 개발자 트위터에서 시끄러웠는데(?) 잘 정리가 되어있어서 옮겨와 봅니다.

   만우절도 아닌데 이게 다 뭔일인가요 ㅋㅋㅋ
"
"https://news.hada.io/topic?id=4589","2021년 상반기 - 개발자는 이 책을 읽었다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2021년 상반기 - 개발자는 이 책을 읽었다

   - 교보문고의 1월부터 6월까지 월 별 판매량 기준 Top
   1. 혼자 공부하는 파이썬
   2. 비전공자를 위한 이해할 수 있는 IT 지식
   3. Do it! 점프 투 파이썬
   4. 혼자 공부하는 머신러닝+딥러닝
   5. 이것이 취업을 위한 코딩 테스트다 with 파이썬
   6. Do it! HTML+CSS+자바스크립트 웹 표준의 정석
   7. 밑바닥부터 시작하는 딥러닝
   8. 파이썬 알고리즘 인터뷰
   9. 윤성우의 열혈 C 프로그래밍
   10. 혼자 공부하는 C 언어(혼자 공부하는 시리즈)
   11. 파이썬 증권 데이터 분석
   12. 핸즈온 머신러닝(2판)
   13. Clean Code(클린 코드)
   14. 파이썬 머신러닝 완벽 가이드
   15. 한 권으로 읽는 컴퓨터 구조와 프로그래밍
   16. 모던 자바스크립트 Deep Dive
   17. 혼자 공부하는 자바
   18. 리팩터링(2판)
   19. 파이썬을 이용한 비트코인 자동매매
   20. 밑바닥부터 시작하는 딥러닝 3
   21. 리액트를 다루는 기술(개정판)
   22. 수학과 함께하는 AI 기초(EBS)
   23. 시작하세요! 도커/쿠버네티스
   24. Java의 정석(3판)
   25. 밑바닥부터 시작하는 딥러닝 2
   26. 시스코 네트워킹(후니의 쉽게 쓴)
   27. 스프링 부트와 AWS로 혼자 구현하는 웹 서비스
   28. UX/UI의 10가지 심리학 법칙
   29. Node.js 교과서(2판)
   30. 프로그래밍 대회에서 배우는 알고리즘 문제 해결 전략 세트

   근데 여기 있는 책 대부분은 입문자/주니어 용 책 아닌가요? 그때 이후론 다들 책을 잘 안읽으시나요..ㅎㅎ (저는 잘 안읽..)

   일단 사람수면에서 입문자가 더 많아서.. ㅎㅎ (저도 잘 안읽..)

   저는 한 4~8년 정도 읽으려고 + 곧 있으면 왠지 절판될 것 같은 불안감에 The Art of Computer Programing을 전권으로 질렀습니다. 사실 당장 읽는다! .. 보다는 제가 보고 싶었던 책들이 전부 절판되서 ;ㅁ ;

   이 친구도 절판되기 전에 호다닥 샀습니다. 알라딘은 1권 절판됐더라고요 =ㅁ=.

   1권은 아직까진 출판사인 한빛미디어 페이지에서는 구매가능한듯 합니다 ㅎㅎ
   https://www.hanbit.co.kr/store/books/look.php?p_code=B3301714641
   2025년에 5권 Syntactic Algorithms 가 출판 예정이니 그 이후에 뭔가 전체 양장본 같은게 나오지 않을까요.. ?
   그나저나 Knuth 옹은 38년생이신데 아직도 책을 쓰고 계시는 군요.

   한 분야에 대한 열정이 Knuth 옹처럼 꺼지지 않고 오래 계속 타오르고 싶네요. 저는 이 일이 죽을 때 은퇴하고 싶을 정도로 사랑스러운 일인데. 부디 정말 죽을 때까지 그랬으면 좋겠어요. 👃

   나름 요즘의 트렌드를 알수 있는 것 같네요. 파이썬/머신러닝 이 대세로군요 ㅎㅎ
   C 서적이 많은 이유는 아마도 학교 교재이기 때문일 거 같구요.
"
"https://news.hada.io/topic?id=4557","Prebid - 오픈소스 헤더(광고) 비딩 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Prebid - 오픈소스 헤더(광고) 비딩 플랫폼

   - Header Bidding : 퍼블리셔(웹,앱)가 광고 노출전에 여러 Ad Exchange / Ad Network에 인벤토리를 열어 입찰하게 해서 가장 높은 광고료를 비딩한 곳의 광고를 노출하는 방식
   ㅤ→ 광고 노출자의 수익을 극대화
   ㅤ→ 다양한 광고 포맷 지원 (Display,Video,Native)
   - Prebid.js (웹), Prebid Server (클라우드), Prebid Mobile(iOS,Android) 등 자신의 플랫폼에 맞게 선택 가능
   ㅤ→ 오픈소스
   ㅤ→ 비동기 처리로 사용자 경험 향상
   ㅤ→ 200개 이상의 광고 파트너 아답터, 15개 Analytics 어댑터
   ㅤ→ 통화(Currency) 변환, GDPR 지원

   - https://adop.cc/헤더비딩이-뭘까요/
"
"https://news.hada.io/topic?id=4547","Milkdown - 플러그인 기반 WYSIWYG 마크다운 데이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Milkdown - 플러그인 기반 WYSIWYG 마크다운 데이터

   - Prosemirror 에디터와 Remark 마크다운 프로세서 기반
   - 모든 기능을 플러그인을 통해서 지원, 커스터마이징 가능.
   ㅤ→ Commonmark, Prism(구문 강조), Slash 명령, 툴팁, Math, 테이블
   - 테마 지원(npm)
   - React / Vue 3.x 지원

   아 좋네요. 드디어 쓸만한 WYSIWYG 마크다운 에디터가 나오는 건가요.
"
"https://news.hada.io/topic?id=4611","MS, Windows 365 클라우드 PC 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       MS, Windows 365 클라우드 PC 공개

   - MS 클라우드에서 원하는 디바이스로 윈도우 10/11을 스트리밍하는 하이브리드 방식
   ㅤ→ 모든 앱/데이터/설정을 클라우드에 저장하고 어디서나 그대로 사용 가능
   ㅤ→ 맥/아이패드/리눅스/안드로이드등 기기 지원
   ㅤ→ Microsoft 365, Microsoft Dynamics 365, Microsoft Power Platform 등 지원
   - Azure Virtual Desktop 기반
   - Zero Trust 아키텍처
   - 8월 2일부터 사용 가능

   작동말 잘하면 쓸만하겠다 싶은.

   좋네요..
"
"https://news.hada.io/topic?id=4591","CSS에서 100%는 어떤 의미일까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          CSS에서 100%는 어떤 의미일까

   ""상황에 따라 달라요""
   ""어떤 것의 % 인가요?""
   - 인터랙티브 예제로 알아보기
   ㅤ→ Width & Height
   ㅤ→ Top & Left
   ㅤ→ Margins
   ㅤ→ Padding
   ㅤ→ Transform: translate
   - translate 를 제외하고는 부모 개체의 %

   예전에 이거 엄청 헷갈렸는데, 그래도 vw vh 가 나와서 살만해졌습니다..ㅋㅋ

   글에서는 Parent 개체라고 얘기하는데 실제로는 Containing Block 이라고 얘기하는게 맞다고 하네요.
   대부분 Parent가 맞지만 아닌 경우도 있다고.
   - https://developer.mozilla.org/ko/docs/Web/CSS/Containing_block
   ""대부분의 경우, 어떤 요소의 컨테이닝 블록은 가장 가까운 블록 레벨 조상의 콘텐츠 영역이나, 항상 그런 것은 아님""
"
"https://news.hada.io/topic?id=4650","ToyDB - Rust로 작성된 분산 SQL DB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ToyDB - Rust로 작성된 분산 SQL DB

   - 학습용 프로젝트로 작성되어 대부분의 컴포넌트를 밑바닥부터 직접 개발
   ㅤ→ Raft 기반 분산 컨센서스 엔진
   ㅤ→ ACID 호환 트랜잭션 엔진
   ㅤ→ 플러깅 가능한 스토리지 엔진
   ㅤ→ Iterator 기반 쿼리 엔진
   ㅤ→ 프로젝션, 필터, 어그리게이션 등을 지원하는 SQL 인터페이스
   - 상세한 문서화
   ㅤ→ 아키텍쳐 가이드 : 각 컴포넌트의 구조에 대해 설명
   ㅤ→ SQL 예제와 SQL Dialect 레퍼런스
   ㅤ→ 작성하는데 참고한 CMU DB 강의, 책, 유튜브 영상 : Raft, Parsing, Transactions
"
"https://news.hada.io/topic?id=4652","'자바스크립트는 왜 이모양인가' 읽기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          '자바스크립트는 왜 이모양인가' 읽기

   “다음 세대의 프로그래밍 패러다임은 ‘분산 비동기 프로그래밍’ 이 될 것이다”
   “자바스크립트가 재미있는 것은, 자바스크립트는 특별히 분산 비동기 프로그래밍을 위해 만들어졌기 때문이라고 생각한다.”
   - 이 책은 자바스크립트를 철저하게 ‘프로그래밍 언어’ 관점에서 접근하고 있다. 엔진이나 웹의 구동 환경 등을 다루지 않고, 언어 자체에 대해 모든 개발자가 알아야 할 것들을 다룬다.
   - 그래서 자바스크립트라는 언어에 대해 조금 더 깊이있게 알아보고 싶은 사람들, 분야에 따라 관심은 없지만 ‘현재 대세인 언어 중 하나’ 에 대해 관심이 있다면 살펴볼만 하다.
   - 하지만 이 책은 언어 스펙의 세세한 부분을 다루지 않는다. 오히려 배우는 사람이 그런 것을 알지 않기를 바란다. “언어의 간결하고 분명한 부분만 가까이 하라” 는 것이 필자의 주장이며, 자바스크립트는 그렇지 않은 부분이 충분히 많다. 그래서 스펙의 세세한 부분을 건너뛰면서 내용을 전달하는 것인지도 모른다.

   이 책은 이 책(Javascript the good parts, 자바스크립트 핵심 가이드)을 쓰신 더글라스 크락포드가 쓰신 책이군요!
"
"https://news.hada.io/topic?id=4568","Transfer.sh - 쉘에서 쉽게 파일 공유하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Transfer.sh - 쉘에서 쉽게 파일 공유하기

   - 별도 툴 설치 없이 cURL 또는 transfer 쉘스크립트 커맨드로 파일을 전송하면 파일 공유용 URL이 리턴
   - 10GB 까지 14일간 암호화 해서 무료로 저장됨
   - Go 오픈소스
   ㅤ→ S3, 구글드라이브, Storj 및 Local 지원해서 자신의 서버 호스팅 가능
   - 멀티업로드, gpg 암호화, 메일로 첨부해서 보내기, keybase 연동등 다양한 예제 제공

   이런 류의 웹서비스들 중 file.io가 도메인은 제일 멋있는 것 같습니다.

   저는 https://webwormhole.io 이나 https://github.com/magic-wormhole/magic-wormhole이 좋더라고요. 별도 설치가 필요하긴 하지만.

   저도 웹에서는 웹웜홀이나 파일키위 서비스를 사용합니다!
   - 종단암호화 지원하는 무제한 용량 실시간 파일전송 서비스 https://news.hada.io/topic?id=1695

   파일키위를 전달용으로 사용해봤는데 파일이 깨져서 열리지 않더라고요. ㅠㅠ 웜홀은 첨 들어보는데 써봐야겠네요.
"
"https://news.hada.io/topic?id=4658","Arvis - Alfred 워크플로우를 지원하는 크로스플랫폼 런처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Arvis - Alfred 워크플로우를 지원하는 크로스플랫폼 런처

   Alfred의 워크플로우를 윈도우와 리눅스에서도 사용하고 싶다는 생각에 만들기 시작한 Electron, react 기반 크로스플랫폼 런처 프로그램 입니다.
   Arvis의 소개 영상입니다.
   https://www.youtube.com/watch?v=arRfdSaGM8I

   글 제목에 간단한 소개가 있으면 좋을 것 같아서 ""Alfred 워크플로우를 지원하는 크로스플랫폼 런처"" 라고 추가해 두었습니다.
   긱뉴스 사용자들이 제목만 보고 클릭하는 경향이 많아서, 제목에 간단한 설명을 붙여주시면 좋습니다.

   네 감사합니다!
"
"https://news.hada.io/topic?id=4642","LiveKit - 실시간 커뮤니케이션 플랫폼 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     LiveKit - 실시간 커뮤니케이션 플랫폼 오픈소스

   - 앱/웹에서 10~1000명 단위의 실시간 오디오/비디오 회의 기능을 내장할 수 있게 지원
   - Agora의 오픈소스 대체제
   - 크로스 플랫폼 SDK : JS, React, Swift, Kotlin, Go
   ㅤ→ React Native, Flutter, Unity/C# 지원 예정
   - JWT기반 인증 및 RBAC 지원
   - 셀룰러 와 WiFi 간 부드러운 스위칭
   - GKE/EKS 및 기타 K8s 에 쉽게 배포할수 있는 Helm Chart 제공
   - ICE,STUN,TURN 및 WebRTC 프로토콜 수준의 지식은 필요 없이 쉽게 사용 가능
   - 훌륭한 성능 : 싱글 인스턴스(GCP c2-standard-16) 기준
   ㅤ→ 오디오 : 송출 10명, 청취자 1000명
   ㅤ→ 비디오 : 송출 4명, 청취자 440명
   * JWT : JSON Web Token
   * RBAC : Rule Based Access Control

   소개글 : And…We’re Live(Kit)! https://blog.livekit.io/and-were-live-kit-5dc7fe03e1bd
"
"https://news.hada.io/topic?id=4673","Ultimate Backend - 멀티테넌트 SaaS 스타터 킷 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ultimate Backend - 멀티테넌트 SaaS 스타터 킷 오픈소스

   - 대용량 확장이 가능한 마이크로 서비스 기반 백엔드
   - CQRS 패턴을 이용한 DDD
   - OAuth2, GraphQL API, gRPC
   - Role Based Access Control
   - Stripe 를 이용한 Payment 및 SaaS Plan 결제 지원
   - Consul을 이용한 Service Discovery
   - Multi Tenancy 지원
   - TypeScript 오픈소스
"
"https://news.hada.io/topic?id=4620","크롬, HTTPS 채택을 가속화 할 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         크롬, HTTPS 채택을 가속화 할 것

   - 현재 대부분 환경에서 90% 이상의 페이지들이 HTTPS를 사용
   - M94 버전 부터 사용자가 선택 가능한 HTTPS-First 모드 제공
   ㅤ→ HTTPS 접속을 먼저 시도하고, 지원 안 할 경우 전체화면 경고 표시
   ㅤ→ 차후엔 기본 모드로 적용할 예정
   ㅤ→ Firefox의 HTTPS-Only 모드와 비슷
   - M93 버전부터 주소창의 자물쇠 아이콘을 드랍다운을 보여주는 아래 화살표로 대체하는 실험 시작
   ㅤ→ 페이지 정보/권한등을 보여주는 것은 같으나 사람들이 자물쇠를 클릭하면 동작한다는 것을 인식하지 못함(11%만 인식)
   - HTTP 지원은 계속 되지만, 안전하지 않다는 경고를 보여주게 될 것
"
"https://news.hada.io/topic?id=4570","제프 베조스가 CEO로서 전한 최고의 교훈들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        제프 베조스가 CEO로서 전한 최고의 교훈들

   - Take risks : 위험을 감수하라.
   - Make good decisions - fast : 빠른 결정을 내려라.
   - Finding your calling : 천직을 찾아라.
   - Embrace the inefficiency of wandering : 방황의 비효율성을 수용하라.
   - Don’t lose your distinctiveness : 개성을 잃지 마라.

   하나같이 아름다운 문장입니다
"
"https://news.hada.io/topic?id=4556","BitTorrent 20 주년 : 파일공유 혁명의 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BitTorrent 20 주년 : 파일공유 혁명의 시작

   - 2001/07/02에 Bram Cohen이 야후 게시판에 BitTorrent를 공개
   - Napster 같은 다른 경쟁자들이 있었지만, 속도와 탈 중앙화로 차별화. 더 많은 사람이 참여하면 다운로드 속도가 증가
   ㅤ→ 그 시절엔 소셜미디어도 없고, PR팀도 없었지만 널리 퍼짐
   Embracing the Web
   - BitTorrent가 공개되고 나서 몇달 뒤, 토렌트 사이트들이 생겨 나기 시작
   ㅤ→ 음악,사진,소프트웨어,영화들 (종종 불법복제된)을 대중에게 공개하는 것은 이전에는 대역폭과 스토리지 때문에 불가능했음
   ㅤ→ BitTorrent를 사용하면 작은 .torrent 파일만 호스팅하면 되므로 이게 게임 체인저가 됨
   - Bram Cohen은 이런 논쟁의 여지가 있는 사이트들과는 거리를 두었지만, 일반적인 미디어 공유 기능은 수용
   ㅤ→ etree 는 2001년말 BitTorrent 프로토콜을 채택한 최초의 사이트중 하나
   ㅤㅤ라이브 콘서트 녹음을 온라인으로 배포하는 사람들로 구성된 커뮤니티
   ㅤㅤ20년이 지난 지금도 운영중
   - BitTorrent의 초기 성공은 대용량 파일을 빠르게 공유할 수 있는 비용절감 때문. 유튜브가 등장하기도 전이고, 인터넷도 전화 접속을 하던 당시에는 혁명적이었음.
   - 웹과 빗토렌트 의 심리스한 연결은 검색이 가능하다는 장점도 있음
   ㅤ→ 검색엔진의 도움으로 토렌트 사이트가 빠르게 성장
   ㅤ→ 형사 기소된 The Pirate Bay 는 아직도 운영중 (전세대 최대 규모의 공개 토렌트 사이트)
   토렌트 트래픽
   - 2004년엔 인터넷 트래픽의 1/3 이 빗토렌트 였음
   - 인터넷 업체들의 인프라에 부담이 되었고, 많은 ISP들이 토렌트 트래픽을 쓰로틀링하기 시작
   - 쓰로틀링이 망 중립성 논쟁을 유발하는 시발점이 됨
   - 쓰로틀링을 하는 ISP들을 정리해서 공개하기도 하고, 빗토렌트는 쓰로틀링을 하지 못하도록 프로토콜 헤더 암호화 기능을 추가
   - uTP 기능은 ISP의 부하를 줄이기 위해 추가되기도.
   BitTorrent, Inc
   - 빗토렌트 프로토콜의 업데이트는 개발자인 Cohen이 모니터링했고, 그는 BitTorrent, Inc로 스타트업을 설립하고 투자를 받음
   - BitTorrent, Inc는 해적 사이트들과는 전혀 관련 없고, 아티스트 및 권리 보유자들이 콘텐츠를 공유하는데 도움을 주도록 BitTorrent 개발에 집중
   - 2007년에는 자체 비디오 스토어인 ""torrent Entertainment Network""를 런칭했으나 1년후 폐쇄
   - 최고의 결정 중 하나는 2006년에 스웨덴 개발자 Ludvig Strigeus 로부터 uTorrent 클라이언트를 구입한 것. 현재 시장 지배적인 클라이언트
   - Ludvig Strigeus은 Spoitfy의 초기 개발자중 한명임
   - uTorrent의 수익은 회사를 유지하는데 도움이 되었지만, 다른 프로젝트는 실패
   - 2018년에 BitTorrent, Inc 는 TRON 재단에 인수되고, Bram Cohen은 회사를 떠남
   - 최근 몇 년간 빗토렌트는 'Crypto'에 중점을 두었고, TRON 에서 BitTorrent Token(BTT)를 출시
   - Bram Cohen은 Chia 코인을 개발 (제공하는 하드용량 기반으로 채굴이 되는 암호화폐)
   BitTorrent ≠ Piracy
   - 미디어에서는 빗토렌트는 불법 복제와 관련지어 얘기하지만, 빗토렌트는 그 이상이라는 걸 강조할 필요가 있음
   - 트위터, 구글, 페이스북, NASA 를 포함한 많은 조직이 빗토렌트 기술을 활용해 왔음
   - 많은 리눅스 배포판과 OpenStreetMap은 토렌트 피드를 제공
   - 네트웍 밴드위스 비용이 줄어들면서 빗토렌트가 그 엣지를 좀 잃기는 했지만, 아직도 우수한 기술이자 혁신의 원천
   - 빗토렌트의 미래가 어떻든 간에 인터넷 역사에는 한 자리를 차지했음

   리눅스 iso파일들은 확실히 토렌트가 빠르더라고요.

   예전에 WoW (월드 오브 워크래프트) 클라이언트가 초기에 빗토렌트 프로토콜로 다운로드를 받게 했던게 생각이 나네요.
   대용량의 데이터를 서버 비용 줄이면서 배포하는 데에는 분명 강점이 있지만, 불법복제 용도로 너무 널리 쓰여서 다들 오해하는 기술이 아닐까 합니다.
   - Academic Torrents - 토렌트로 연구자료 공유하는 사이트 https://news.hada.io/topic?id=1291
"
"https://news.hada.io/topic?id=4639","GitHub Copilot : 첫인상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GitHub Copilot : 첫인상

   - 몇 주 사용해 보고 느낀 점
   ㅤ→ ""3~5년내에 우리 모두는 더 많은 코멘트를 작성하고, 모든 것에 더 설명적인 이름을 사용하고, 훨씬 적은 코드를 작성하고, 수많은 코드 리뷰를 하게 될 것""
   - 장점
   ㅤ→ 반복적이고, 지겨운, 보일러플레이트 코드 작성에 탁월
   ㅤ→ 최소한의 컨텍스트로 데이터셋을 조각내고, 훈련 및 평가하는 코드를 생성 가능
   ㅤ→ ""이젠 퀵 매크로 작성할 필요가 없음""
   - 단점
   ㅤ→ 고급 기능에 대해서는 Copliot의 유용성은 미묘함
   ㅤ→ 올바른 일을 할 수도/못 할수도 있는 대량의 코드를 생성하는 것은 주의 해야함
   ㅤ→ 오래된 버전의 라이브러리를 추천하기도 하고, 구문적으로 올바르지 않은 코드를 사용하기도 하고, 존재하지 않는 ML 알고리즘 파라미터를 채우기도 함
   ㅤ→ ""항상 주의를 기울여야함""
   [ 연구 ]
   GPT에 대한 Codex 논문에서 중요한 인사이트를 얻었음
   - 가능성
   ㅤ→ ""Codex는 다양한 방식으로 유용할 수 있음. 예를 들어 사용자를 새로운 코드베이스에 온보딩 하고, 순련된 코더들의 컨텍스트 스위칭을 줄이고, 비 개발자들이 사양을 작성하면 Codex가 드래프트 구현을 만들고, 교육이나 탐색을 도와줄 수 있음""
   ㅤ→ 즉 회사의 코드베이스를 학습하고 회사 전체에서 사용되는 패턴이나 모듈을 추천하면, Pattern 과 Practice를 표준화 하는데 도움이 될 것(금새 일어나진 않겠지만)
   ㅤ→ 또한 비 개발자들이 사양을 작성할 수 있게 된다는 게 매우 흥분됨. 특히 테스터들. API나 UI를 테스트하기 위해 코드를 작성할 수는 없지만, 뭘 하려는지 설명을 작성할 수 있으므로, 그들이 필요한 대부분의 코드는 Copilot 이 충분히 작성 가능할 정도로 단순하고, 생산성을 크게 높일 수 있을 것. 현재 프리뷰 버전의 Copilot 으로도 이미 어느정도 가능
   - 제한점
   ㅤ→ Codex 는 실제로 의도한 작업을 제대로 수행하지 않는 솔루션을 제안할 수 있으므로 ""코드 리뷰"" 가 중요
   ㅤ→ 또한 ""Automation Bias""(자동화 편향) 때문에 Copilot 이 좋아질수록 생성된 코드에서 버그를 찾으려는 의지가 줄어들고, 생성된 코드의 버그는 미묘하고 식별이 어려울 것
   - 잘못된 코드를 추천할 수 있음

   저도 예상보다 훨씬 더 추천을 잘 해준다고는 생각했습니다. (영어) 글쓰기 능력이 더 중요해질 것 같고요. 다만 비개발자나 주니어 개발자가 쉽게 비즈니스 로직 코드를 작성할 수 있게 돕는 거랑은 아직은 거리가 꽤 있어 보이고, 숙련된 개발자가 지루한 코드 작성 시간을 줄이는 데는 도움이 상당히 되는 것 같습니다.
   단점은 여기 적힌 것과 비슷하게 느꼈습니다. 특히 '구문적으로 올바르지 않는 코드를 추천'하는 경우가 있다는 것에서요. 지금은 오히려 추천이 완전하지 않기 때문에 이렇게 추천했구나, 하면서 조금 참고해서 코드 쓰는 수준인데 추천 수준이 올라갈수록 위에 적힌대로 그걸 그대로 썼다가 생기는 버그가 많아질 것 같긴 해요.
"
"https://news.hada.io/topic?id=4665","Brython - 파이썬3의 브라우저 구현체 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Brython - 파이썬3의 브라우저 구현체

   ""Browser Python""
   - 브라우저의 DOM 개체와 이벤트 접근 가능한 파이썬3 구현체
   ㅤ→ 웹페이지에서 JS 대신 Python 으로 스크립트 실행 가능
   ㅤ→ HTML5/CSS3 최신 스펙 및 jQuery, D3 및 Bootstrap, LESS, SASS 등 지원
   - 별도 설치 필요없이 CDN에서 brython.js 로드만으로 사용 가능
   - 온라인 에디터와 콘솔 제공해서 테스트 가능

   PyScript - HTML에서 Python 코드 실행하기 아래 말씀하신 pyodide 기반이라고 합니다.

   장기적으로 아예 브라우저에서 네이티브로 파이썬 엔진 탑재해주면 자바스크립트 독점(?)에서 벗어날 수 있지 않을까 싶습니다.

   https://github.com/pyodide/pyodide
   pyodide 라는 비슷한 프로젝트를 봤던게 생각났네요.
   WebAssemply 컴파일 / js <-> python 간 상호 스콥에 접근 가능 / 같은 특징이 있는거 같습니다.
"
"https://news.hada.io/topic?id=4628","2021 와이콤비네이터 탑스타트업 (167개)의 모든 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2021 와이콤비네이터 탑스타트업 (167개)의 모든 것

   7월에 공개된 Y Combinator의 탑 컴패니 리스트(167개 스타트업)를 분석해서 인사이트를 정리한 글.
   YC 탑 컴패니: https://www.ycombinator.com/topcompanies
   1. 167개 사의 합산 기업 가치는 약 400조 원이다.
   2. 이 중 161개 회사는 비상장이다.
   3. 비상장 스타트업 중 상위 10개 회사의 합산 기업 가치가 전체의 51%인 200조 원 정도이다.
   4. 50위권 안팎으로 유니콘이라고 불리는 10억 달러의 기업 가치의 스타트업이 있다.
   5. 59%는 Bay Area에 본사기 있고 17%는 다른 미국 지역에 본사를 두고 있다.
   6. 14개의 스타트업은 사무실이 없고 원격 근무로만 운영한다.
   7. B2B 소프트웨어/서비스 부문이 약 44%이다.
   8. 탑 컴퍼니는 1년에 두번(2월/7월) 발표하는데 현재 정확한 기업가치와는 약간 차이가 있다.
   9. 2021년 리스트에는 2016년도 기수가 가장 많이 포함되어 있다.
   10. 기업가치가 10억 달러인 20개 스타트업을 보면 C 라운드까지 누적 2,500억 원을 평균적으로 투자받았다.

   YC가 저렇게 성공적으로 이끈 회사들이 많아서 (돈을 많이 벌었으므로) 다른 프로젝트들로 에코시스템에 기여하는 일들을 할수 있다고 생각합니다.
   - 해커뉴스 : https://news.ycombinator.com/
   - 스타트업 스쿨 : https://www.startupschool.org/
   - 코파운더 매칭 플랫폼 : https://www.startupschool.org/cofounder-matching
   국내에서도 저 정도로 성공한 투자자들이 좀 더 많아져서,
   직접 투자뿐만 아니라 에코시스템에 대한 투자가 이루어지면 좋을 것 같아요.
"
"https://news.hada.io/topic?id=4608","Apache Heron - 실시간, 분산, fault-tolerant 스트림 처리 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Apache Heron - 실시간, 분산, fault-tolerant 스트림 처리 엔진

   - 트위터에서 실시간 분석용으로 개발해서 대규모로 사용중 (2014~)
   - Apache Storm 과 API 호환되어 그대로 교체 가능
   ㅤ→ 속도, 성능, 확장성, 안정성 에 중점을 둔 설계
   ㅤ→ 개발 및 트러블 슈팅이 쉽게
   ㅤ→ 심플하고 반응이 빠른 UI 제공
   - 아파치 인큐베이터 프로젝트
"
"https://news.hada.io/topic?id=4574","Y Combinator, Co-Founder 매칭 플랫폼 오픈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Y Combinator, Co-Founder 매칭 플랫폼 오픈

   - 무료 온라인 프로그램/커뮤니티인 스타트업 스쿨을 통해서 서비스 제공
   - 베타기간 동안 약 9천번(4500명)의 매치 성사
   - 공동창업자가 중요하다는 것은 데이터로 검증됨
   ㅤ→ Top 100 YC 회사중 4개만 공동창업자가 없었음
   - 찾고 있는 공동 창업자의 관심사, 위치, 기술 등에 대해서 적으면 매칭되는 프로필을 찾아주고 메시지 가능
   ㅤ→ 심사과정을 거쳐서 등록
   ㅤ→ 마치 온라인 데이트 같은 형태의 프로그램

   재미난 시도인 것 같네요. 보통은 다들 CTO를 찾을거 같습니다만 ㅎㅎ
   국내에도 생기면 재미날 것 같아요. 누가 안 하면 나중에 제가..

   디스콰이엇도 관심을 갖고 있는데 혹시 같이 만들어보실 생각은 없으실까요? ㅎㅎ
"
"https://news.hada.io/topic?id=4602","EdgeDB - 개발자를 위한 차세대 오픈소스 ORDB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     EdgeDB - 개발자를 위한 차세대 오픈소스 ORDB

   - PostgreSQL 위에 만든 객체 관계형 데이터베이스
   ㅤ→ 엄격한 선언형, Typed Schema : EdgeDB SDL
   ㅤ→ SQL과 비슷하지만 쉽고 강력한 쿼리 언어 : EdgeQL
   ㅤ→ Schema 자동 Migration 기능 내장
   ㅤ→ GraphQL 지원 내장
   ㅤ→ ORM 들보다 훨씬 빠른 속도
   - TypeScript/JavaScript, Python, Go, Deno 공식 라이브러리 제공
   - 리눅스/맥/윈도우에 1줄 스크립트로 설치 지원

   좋네요

   :=

   EdgeQL 문법이 특이한데 엄청 편해보이긴 합니다.
   - https://www.edgedb.com/docs/tutorial/queries
   왜 EdgeQL을 만들었는지 설명한 글도 적어놨네요.
   - [We Can Do Better Than SQL](https://www.edgedb.com/blog/we-can-do-better-than-sql)
"
"https://news.hada.io/topic?id=4647","Gorse - 추천 시스템 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Gorse - 추천 시스템 오픈소스

   - 다양한 종류의 온라인 서비스에 사용 가능한 유니버설 추천시스템을 목표
   - 아이템, 사용자, 인터랙션 데이터를 넣는 것 만으로 모델을 학습하고 추천을 생성해주는 자동화 시스템
   ㅤ→ AutoML : 최적의 추천 모델과 전략을 자동으로 선택
   ㅤ→ 분산 추천 : 싱글 노드 학습, 분산 예측. 추천 단계에서 수평 확장
   ㅤ→ RESTful API : CRUD 및 추천 요청
   ㅤ→ Dashboard : 데이터 import/export, 모니터링, 클러스터 상태 체킹
   - Go + MySQL/MongoDB + Redis
"
"https://news.hada.io/topic?id=4675","NSO Group Pegasus 포렌식 보고서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       NSO Group Pegasus 포렌식 보고서

   Amnesty International이 Pegasus가 민간인 사찰에 이용되었다는 사실을 공개하면서 같이 발간한 포렌식 레포트입니다.
   Pegasus 스파이웨어가 어떤 식으로 iOS 디바이스에 침투하는지, 또 디바이스에 어떤 흔적을 남기는 지 등의 내용이 담겨있습니다.
   보고서 말미에는 모바일 디바이스가 일련의 공격을 당했는지 검증하는 툴인 Mobile Verification Tool도 소개하고 있습니다.
   1. Pegasus의 Network Injection을 통한 공격 흔적
   2. BridgeHead(Pegasus의 페이로드 딜리버리 컴포넌트) 및 각종 Pegasus 관련 프로세스의 실행 기록
   3. Photos 앱 익스플로잇 후 Pegasus 프로세스의 실행 기록(추정)
   4. 2019년 광범위하게 사용되던 iMessage 제로 클릭 제로데이 익스플로잇의 흔적
   5. 2020년 Apple Music을 통해 Pegasus를 배포한 흔적
   6. Megalodon: 2019년에 발견된 것과 비슷한 iMessage 제로 클릭 제로데이 익스플로잇이 현재까지도 (2021/07) 사용 중
   7. 침투 흔적을 가리려는 Pegasus의 시도들(과 그 흔적)
   8. iOS 시스템 서비스 프로세스와 비슷한 이름을 가진 Pegasus 컴포넌트들
   9. Pegasus 공격에 사용된 인프라들

   https://github.com/mvt-project/mvt
   글에서 소개된 Mobile Verification Tool
"
"https://news.hada.io/topic?id=4585","Goomics - 구글 사내 만화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Goomics - 구글 사내 만화

   이 만화는 구글에서 14년 간 소프트웨어 엔지니어로 일해온 (그리고 1주 전에 트위터로 이직한) Manu Cornet이 2010년 이래로 그려온 만화입니다. 구글에 대한 풍자가 주된 내용인데, 윗사람(CEO 포함)의 눈밖에 날 만한 내용도 꽤 있습니다.
"
"https://news.hada.io/topic?id=4644","KLUE 한국어 데이터 셋한국어 데이터 셋

   국내외 여러 연구원들과 기업들이 모여서 만든 한국어 데이터셋
   8개의 테스크로 분류 되어 있고 각각 10K ~ 63K의 데이터 셋을 가지고 있음
   -----
   나름 큰 뉴스여서, GeekNews에도 소식이 올라온 줄 알았는데 찾아보니 없어서 올립니다.
"
"https://news.hada.io/topic?id=4671","Startup Concepts - 만화책 스타일의 스타트업 단어 설명 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Startup Concepts - 만화책 스타일의 스타트업 단어 설명

   만화 캐릭터들의 대화 형태로 개념 설명하고 관련 링크들 제공
   A/B Testing, Product Market Fit, Burn rate and Runway,
   MVP, Pivot, Growth Hacking, ARR & MRR, SPAC, Moat,
   LTV/CAC, Cohort Analysis, ARPU & AOV, Churn and Bounce rate,
   Traction, Payback Period, B2B vs B2C, DAU/WAU/MAU, Bootstrapping vs Raising Funds,
   Valuation and Stages, NFT
"
"https://news.hada.io/topic?id=4670","AVPress - 인-브라우저 비디오 압축 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AVPress - 인-브라우저 비디오 압축 도구

   - FFMPEG.wasm으로 작성된 100% 클라이언트 도구
   - 지원 코덱
   ㅤ→ 비디오 : x264, x265, WebM, OGV
   ㅤ→ 오디오 : MP3, AAC, AC3, OGG, Opus
   - 트림, 리사이징, 크롭 가능
   - Frame-rate 수정 : 5~60
   - 프리셋 : ultrafast, superfast, veryfast ~ veryslow
"
"https://news.hada.io/topic?id=4609","구글 코리아, 온라인 머신러닝 부트캠프 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        구글 코리아, 온라인 머신러닝 부트캠프 시작

   - 머신러닝에 관심있는 개발자를 양성하여 관련 인력을 찾고 있는 국내 IT회사들에 연결
   - 머신러닝 이론을 공부하는 것 뿐만 아니라 현업의 엔지니어링 문제를 해결하는 수준까지 이르는 것을 목표
   - 약 4개월간 딥러닝 이론 과정, 머신러닝 자격증 취득, 실무 프로젝트를 수료
   ㅤ→ 이수하면 국내 IT회사들에 정규직 혹은 인턴 머신러닝 개발자로 채용될 수 있는 기회 제공
   1. 머신러닝 이론 과정 수료
   - Deep Learning Specialization : Coursera(한글자막)
   2. 머신러닝 관련 자격증 획득 : 세개중 하나 필수 취득, 응시료는 구글이 부담
   - TensorFlow certification
   - GCP Professional Data Engineer certification
   - GCP Professional ML Engineer certification
   3. 프로젝트 실습
   - Kaggle Competition 참여
   4. 머신러닝 회사와의 네트워크 형성 및 취업 연계
   - Tech Talk, Career Talk/Resume Clinic, Meet up 등 진행
   - 국내 15개사 : 11번가, 카카오 모빌리티, 스마일게이트, 보이저엑스, 넷마블, 롯데이커머스, 몰로코, 원티드, 쿠팡, 업스테이지, 네이버 클로바, 커먼컴퓨터, 비플랙스, 매스프레소, 뤼이드
"
"https://news.hada.io/topic?id=4634","Ask GN: 업무말고 생활에 필요해서 개발한 코드가 있나요 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 업무말고 생활에 필요해서 개발한 코드가 있나요 ?

   저는 약 10~20명 정도의 그룹에 주기적으로 SMS 문자를 보내야 하는 일이 생겼는데, 문자의 내용이 각각 다르고 내용을 여기저기서 조합해야 하는거라, 구글 스프레드 시트에 SMS 보내기 기능을 구현했습니다. 국내에서 Javascript 로만 호출 가능한 SMS API를 제공하는데[1]가 많지 않아서 찾느라 고생했지만 만들고 나니 꽤 쓸모가 있더군요. 구글 시트에 메뉴 추가가 쉽게 가능하다는 걸 알게 된 것도 유용했습니다.
   var ui = SpreadsheetApp.getUi();
   ui.createMenu('SMS 전송')
   ㅤ.addItem('전체에게 보내기', 'sendAll')
   ㅤ.addSeparator()
   ㅤ.addItem('테스트 보내기', 'sendTest')
   ㅤ.addToUi();
   이런식으로 뭔가 일상 생활에 필요해서 만드신 코드가 있다면 알려주세요.
   [1] https://coolsms.co.kr/

   Typora라는 마크다운 편집기의 이미지 상대경로를 ghost blog의 서버 주소로 치환해주는 프로그램을 go로 만들었었네요..
   https://github.com/Indosaram/tgug

   캠핑장 빈자리가 나면 알려주는 텔레그램 봇을 만들어 사용하고 있어요.

   매일 오전에 텔레그램으로 코로나 확진자수 알려주는 코로나봇 & 예상날씨 물어보면 알려주는 weather bot 만들어봤습니다 ㅎㅎ

   저는 시간대를 지정하면 그 시간대에 자동으로 흘러가게 해주는 Time Timer가 필요해서 만들어봤어용. React로 짜고 라즈베리 파이에 올려서 쓰고 있는데, 계속 시간이 몇 분 남았는지 확인할 수 있어 나름 괜찮았습니다.
   http://media.choice-story-wiki.de:3000/ ( 써볼 수 있는 페이지 )
   https://github.com/ffdd270/time_devider (레포)
   React가 이 정도 간단한 거 만들긴 너무 쉬워서(... ) 본업이 웹이 아닌데도 완전 빨리 개발해도 / 크로스 플렛폼에 / 배포와 관해서 신경 꺼도되서 너무 좋았어요. Qt로 짰으면 세팅부터 욕했을 텐데 =ㅁ =...

   생활에 필요해서…는 아닌데, 심심풀이로 [우리나라의 역 이름 중에서 특정 자모가 들어간 이름을 모두 찾아 빈도별로 정렬하기] 같은 코드를 작성한 적은 있습니다.
   그리고 제가 직접 한 것은 아니지만, 저희 팀원 중 한 분이 간단한 챗봇을 만들어서 쓰시는 것은 보았습니다. 특정 키워드를 입력하면 정해진 응답을 리턴하는 식인데, 그 정도 챗봇을 만들어 쓰시는 분은 꽤 많은 것 같더군요. 아마 생활밀착형 코드로는 가장 흔한 유형이 아닐까 합니다.

   모든 알람을 텔레그램으로 모으고 있는데, 긱뉴스를 텔레그램으로 전달해서 보고 있습니다. :-)
   긱뉴스 슬랙 -> 슬랙웹훅 -> AWS Lambda(프리티어!) -> 텔레그램
   https://t.me/geeknews_chat

   텔레그램을 주로 사용해서 이걸 만들까 했었는데, 있네요 :D
   감사합니다.

   일상생활은 아니지만 좋아하는 가수를 조금이라도 더 알리고 싶어서 만든 팬앱과 유튜브에서 관련 영상을 찾아주는 서비스/관리 페이지를 만들어서 사용하고 있습니다.
"
"https://news.hada.io/topic?id=4554","Chimera Linux - FreeBSD & LLVM 기반 리눅스 배포본","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Chimera Linux - FreeBSD & LLVM 기반 리눅스 배포본

   - 시스템 툴체인으로 LLVM과 Clang 사용
   ㅤ→ GCC 없음
   ㅤ→ compiler-rt가 코어 런타임. libc++이 표준 C++ 라이브러리
   - No GNU
   ㅤ→ userland 대부분을 FreeBSD에서 가져옴 (GNU Make와 ncurses만 사용)
   ㅤ→ musl 을 표준 C 라이브러리로 이용
   - 빠른 소스 패키지 빌드 시스템
   ㅤ→ 완전히 새로운 패키징 시스템
   ㅤ→ bubblewrap으로 샌드박싱
   ㅤ→ 바이너리 패키징 시스템은 Alpine Linux의 apk-tools 이용
   - Bootstrappable
   ㅤ→ 시스템이 자신을 빌드 가능
   - Portable
   ㅤ→ 현재는 ppc64le, aarch64, x86_64 아키텍처 타겟
   ㅤ→ LLVM/Clang 지원되는 어떤 어키텍처로든 쉽게 변환 가능할 것

   LLCM은 LLVM의 오타인가요? LLVM이 GCC에 비해 이식성이 한참 부족한데 지원되는 아키텍쳐는 적겠네요.

   수정해두었습니다~!

   FreeBSD 기반인데 어째 Linux라는 이름을...

   저도 옮기면서 응? 스러웠는데.. 그냥 유저랜드 들만 가져와서 그런가 보다 합니다..

   이름 그대로 뭔가 키메라 같네요 ㅎㅎ
"
"https://news.hada.io/topic?id=4672","아카마이 Edge DNS 서비스 장애","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          아카마이 Edge DNS 서비스 장애

   한국시간 23일 01시 09분에 Edge DNS에 장애가 발생했다고 상태 페이지에 올라왔습니다.
"
"https://news.hada.io/topic?id=4586","Deno Deploy Beta 1","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Deno Deploy Beta 1

   - 멀티테넌트 JavaScript 서버리스 엔진
   ㅤ→ V8 및 Deno CLI를 그대로 사용
   ㅤ→ 전세계 25개 데이터센터에서 실행
   ㅤ→ TypeScript, JSX, ES Modules, HTTPS Imports 지원
   ㅤ→ BroadcastChannel API : 탭간에 실시간 커뮤니케이션 지원
   - Deploy GitHub App 으로 푸시하여 즉시 배포
   - Fresh : JIT SSR for Deno, 빌드가 필요 없는 웹 프레임워크
   - 2021 Q4에 GA 예정

   The Deno Company 발표 https://news.hada.io/topic?id=3978
   예상했던 대로 Deno 회사의 첫 수익화 모델이 Deploy 서버리스가 될 것 같네요.
   ~~
   실제 테스트 해본 후기 : https://aidangee.dev/blog/deno-deploy-beta-first-look
   Deploy 공식 사이트에서 가장 빠른 서버리스 시스템이라고 홍보를 해서 TTFB(Time to First Byte) 속도 테스트를 해봤군요.
   Deno Deploy
   - Cold Start TTFB : 575ms
   - Warmed TTFB : 44ms
   Netlify Functions : https://www.netlify.com/products/functions/
   - Cold Start TTFB : 812ms
   - Warmed TTFB : 138ms
   베타1 상태에서 이 정도면 꽤 인상적인듯
   다만 CDN 엣지에서 실행되는 Lambda@Edge 나 Cloudflare Workers 와 비교하면 아직 느리긴 합니다만, 추가될 기능들이 흥미로운 것 같아요.
   ~~
   Deno Deploy: Crazy Fast Cloud Functions - Architecture Speedun
   https://www.youtube.com/watch?v=yZDvE0mP4Y4
   17분짜리 영상인데, Deno Deploy 를 설명하고 BroadcastChannel API 로 채팅을 간단히 만들어보고 있네요.

   와... 콜드 스타트가 0.5초대이면 준수하네요~
"
"https://news.hada.io/topic?id=4643","개발자 온보딩 가이드 : 첫 90일을 어떻게 계획해야 할까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    개발자 온보딩 가이드 : 첫 90일을 어떻게 계획해야 할까

   - 온보딩은 신규 입사자가 환영받고 회사의 일부라는 느낌을 주고, 이직률도 감소 시킴
   - 3A : 관리(Administration) → 동화(Assimilation) → 가속(Acceleration)
   - 전반적인 지침은 HR이 제공하되, 매니저가 주도해서 실행하는 것이 중요
   [ 역할과 책임 ]
   - HR : 일을 시작하는데 필요한 모든 지원
   ㅤ→ 엔지니어링 매니저 및 C레벨 매니저들과 온보딩 미팅 잡기
   ㅤ→ 전사에서 사용하는 도구들 기본 설명
   ㅤ→ 팀에서 환영받는 느낌을 받도록
   ㅤ→ 출근 첫날 : 전사에 소개(그룹웨어 같은 것), 사용자 계정 추가, 급여 및 근무시간에 대한 상세 소개, 모든 도구와 장비 지급, 사무실 투어, 다른 동료들과 점심식사 제안
   - 엔지니어링 매니저
   ㅤ→ 개발자를 팀 내부/외부에 소개
   ㅤ→ 팀 구조, 팀의 회의 일정, 개발 도구 및 티켓 시스템 등 소개
   ㅤ→ 1:1 체크인, 분기별 검토 미팅, 퍼포먼스 리뷰 등을 진행
   - C-레벨 매니저
   ㅤ→ 회사의 일부라고 느끼게 하고, 회사의 미래 비전과 목표를 향해 즐겁게 일하도록
   ㅤ→ 이상적으로, CEO는 회사의 비전과 역사 소개, 제품 헤드는 제품과 사용자 소개, COO/CMO 는 현재 문제들에 대한 인사이트, CTO는 기술로드맵을 설명
   ㅤ→ 신규인력이 자신의 업무가 회사의 장기목표에 어떻게 기여하는지 확인하는 정기적인 미팅을 가지는게 중요
   [ 온보딩 프로그램 모범사례 ]
   - 충분한 시간을 주고, 초반에는 기대치를 낮춰야함, 압박감을 받지 않도록 하기
   # 프리보딩(Pre-boarding)
   - 최종 면접일과 근무 첫날 사이의 시간
   - 이때는 지원자가 다른 회사를 인터뷰하고 있을수도 있다는걸 염두에 두어야 함
   - 채용 최종 단자에서 지원자를 미래의 팀원,팀장 관리자에게 소개
   - 지원자가 입사를 결정하면, 첫 출근전에 사무적인 일들은 다 끝내는게 좋음
   - 출근 일주일 전에 해야할 일들
   ㅤ→ 출근 첫날에 대한 일정을 정리해서 보낼 것 : 언제 어디서 누구를 만나는지, 원격 회사라면 새 이메일 및 Slack 계정등에 대한 로그인 세부정보
   ㅤ→ 필요한 모든 계약서 및 서류 작성
   ㅤ→ 원격 근무에 대한 장비를 제공한다면 장비요청을 미리 작성완료 하도록
   ㅤ→ 회사의 문화, 비전, 미션에 자세한 정보 공유
   - 좀 더 세심한 터치를 원한다면
   ㅤ→ 팀원들이 짧은 비디오/GIF로 신입사원 합류 축하 메시지를 보내거나
   ㅤ→ 간단히 손으로 적은 환영 메모/카드를 우편으로 보내기
   ㅤ→ 예산이 넉넉하다면, 회사 굿즈(SWAG, 컵/스티커/티셔츠 등등)를 보내주기
   # 첫날
   - 첫인상은 중요. 신규 입사자에게 레드카펫 경험이 되어야 함
   - 환영받는 느낌을 주고, 새 팀원들과 의미있는 상호작용을 할 수 있는 기회를 주는 걸 목표
   - 채용 담당자와 인포멀한 커피타임을 통해서 서로에 대해 알고나서, 공식 체크인 미팅을 통해서 R & R을 명확히 하고 기대치를 서로 맞춤
   - 회사 및 여러 팀들 소개 (이때 조직도를 훓어보면 좋음)
   - 동료나 멘토 소개
   - Slack을 통해서 회사 전체에 신규 입사자 소개
   - 담당하는 역할에 중요한 도구들의 매뉴얼 공유 또는 교육
   - 회사 위키 및 기술문서 접근 방법 공유
   - 아이스 브레이킹을 포함한 팀 점심 또는 원격의 경우 팀 화상통화
   - 정기 팀 미팅을 포함해서 남은 한주 동안의 일정을 공유
   - 관계 구축을 가속화 하기 위해 엔지니어링 매니저가 신규 입사자에게 물어볼수 있는 것들
   ㅤ→ 어떻게 최선을 다해서 일하시나요? 제가 뭘 도와드리면 되나요?
   ㅤ→ 어떤 작업들이 활력을 주고 당신을 흥분시키나요 ?
   ㅤ→ 하루 일정을 어떻게 계획하는 것이 좋으세요? 미팅을 오전/오후 언제 하는게 좋으세요 ?
   ㅤ→ 피드백을 주고 받는 것은 어떻습니까 ?
   ㅤ→ 어떻게 인정을 주거나 받는것을 선호하시나요 ?
   # 첫 주
   - 첫주에는 회사, 제품 및 고객에 대해 학습
   - 회사의 첫 시작 이야기, 가치, 비젼, 미션, 주요 마일스톤을 포함한 회사 문화와 역사에 대한 소개
   - 제품에 대한 소개. SaaS 제품을 팔고 있다면, 신규 입사자에게 테스트 계정 만들어 주기
   - 고객과 그들이 어떻게 제품을 사용하는지 소개. 제품에 대한 레코딩(실 사용 화면 녹화) 및 고객 인터뷰
   - 기술 문서에 대한 소개
   - 전사 회의 (all-hands meeting)에서 신규 입사자 소개
   - 동료 / 멘토 체크인 예약
   - 온보딩 피드백 받아서 향우 온보딩 프로그램 개선. 설문조사면 충분
   - 그 주의 마지막 날에 체크인 : 성공한 것과 도움이 필요한 영역들 알기
   - 신규 입사자와의 첫 킥오프 미팅에서 다루어야할 요점 들
   ㅤ→ Role clarity (역할 명확성) : 자신이 할 일들(resposiblities) 검토, JD 리뷰, 기대치 설정.
   ㅤ→ Development, compensation, and rewards (경력 개발 및 보상들) : 회사에서 지원하는 금전/비금전적 인센티브 및 커리어 패스 논의
   ㅤ→ Motivators at work(업무상 동기부요 요소) : 이전에 가장 즐겁고 활력넘쳤던 프로젝트 물어보기. 이를 통해서 지정할 업무 유형의 선택과 최상의 업무를 수행하는데 도움이 되는 조건 파악
   # 처음 30일
   - 첫 달은 회사에서 어떻게 일이 진행되는지를 배우는 것을 포함
   - 코딩 표준, 프로그래밍 프로세스, 워크플로우 프레임워크, 팀내의 로컬 개발 환경 설정 방법
   - 소프트웨어 개발 방법론 소개
   - 팀의 리포지토리 문서 공유
   - 신규 입사자가 일반적인 버그 수정이나 예전 기능 업데이트등의 작은 작업으로 시작하도록 할 것. 시작하기 쉬운 일을 통해서 팀에 의미있는 기여를 했다는 성취감을 느끼게 할 것.
   - 동료/멘토 체크인을 스케줄링하고 점차 빈도를 줄임
   - 매주 매니저와 체크인을 통해서 신규 입사자가 성과를 내는데 필요한 모든 지원을 받고 있는지 확인 할 것
   - 페어프로그래밍 세션은 신규 입사자가 전체 코드베이스 및 코딩 표준에 쉽게 익숙해지도록 하는 방법
   - 이달 말에 심도 높은 체크인을 통해서, 성공한 것과 목표 검토, 지원이 필요한 영역 확인
   - 향후 온보딩 프로그램에 대한 추가 피드백 요청
   # 처음 60일
   - 다음 30일 동안 신규 입사자는 작업 환경과 새 팀원들에 대해 더 편안하게 느끼게 될 것
   - 매니저는 신규 입사자에게 장기 Responibilities를 할당하는 것을 고려할 것
   - 체크인 중에 매니저는 계속 신규입사자가 업무를 잘 수행하는데 필요한 모든 정보와 지원을 받는지 확인
   # 처음 90일
   - 세번째 달이 되면, 신규 입사자는 비교적 편안하게 토론에 참여하고 업무를 수행할 수 있음
   - 이제 좀 더 독립적으로 작업할 수 있게 됨
   - 이달 말까지 엔지니어링 매니저는 신규 입사자에게 좀 더 장기적인 목표를 구체화하고, 정기 1:1 체크인에서 진행
   # 장기 성장 및 관리로의 전환
   - 온보딩에서 종종 간과되는 것은 장기적인 커리어 개발 단계로의 전환 과정
   - 정기 1:1 미팅에서 온보딩에서 장기 개발로 전환할 것
   ㅤ→ 첫 30일 후부터 향후 3~6개월간의 개발을 지원할 방법들을 고려하기 시작할 것
   ㅤ→ 첫번째 퍼포먼스 리뷰 전까지 명확한 골과 타겟을 설정하도록 할 것
   [ 기타 온보딩 고려사항 ]
   - 신규 입사자가 필요할때 찾아볼수 있는 문서 정리는 꼭 필요
   ㅤ→ 내부 위키가 있으면 좋음
   - 신규 입사자에게 필요한 기술 문서들
   ㅤ→ 소스 코드 및 팀의 Git Repo 접근 가이드
   ㅤ→ 프로젝트간 디펜던시, 버전번호 포함
   ㅤ→ 프로젝트에 사용된 도구들의 API 키와 Credentials
   ㅤ→ 샘플 데이터 및 입력 매뉴얼
   ㅤ→ 디자인 패턴 및 스타일 가이드
   ㅤ→ 모든 것이 잘 동작하는지 확인하는 테스트 스위트
   ㅤ→ 스테이징 / 프로덕선 서버에 대한 Deployment Credentials
   ㅤ→ 팀 멤버가 제품의 단점과 과거 실수에서 배울수 있는 것들을 정리한 배포 노트
   - 프로젝트 또는 피쳐의 문서
   ㅤ→ 이 피쳐 또는 프로젝트의 목표
   ㅤ→ 같은 SaaS 제품이나 에코시스템의 다른 기능과 비교해서 각 기능은 어떻게 동작해야 하는지
   ㅤ→ 디자인 가이드라인, 사용자 흐름 및 코딩 표준
   ㅤ→ 팀이 프로젝트나 기능을 어떻게 처음부터 끝까지 작업하는지. 각각의 환경(개발,스테이징,프로덕션) 및 배포 담당자
   ㅤ→ 과거에 이 프로젝트 또는 유사한 프로젝트에서 처한 문제점들과 어떻게 해결 했는지
   ㅤ→ 현재 어떤게 문제이고, 어떤 해결책들을 작업하는 중인지
   [ 원격 회사를 위한 팁 ]
   - 신규 입사자에게 근무 첫날에 물질적인 선물 보내기
   - 매니저와 팀 리더는 처음부터 커뮤니케이션 기대치를 명확히 할 것 (슬랙의 메시지 하나로 일일 스탠드업은 건너뛸수 있다던가)
   - 주간 체크인, 전사 미팅등 빠지면 안되는 사항들에 동의할 것
   - 올바른 도구를 선택하고 회사 전체의 동의를 얻을 것(이메일을 선호하는데 Slack을 설치하는 것은 의미가 없을 수도)
   - 가능하면 최선의 작업환경을 위해 장비/환경/인터넷 접속 비용을 지원
   - 신규입사자와 직원들이 경계를 설정할수 있도록 도울 것(유연 근무나 타임존이 다른 경우 등)
   [ 온보딩 성과 측정 ]
   - 적어도 한번 이상의 설문조사를 보낼 것 (HR전문가는 7일,30일,60일,90일에 설문조사를 보내는 것을 권장)
   - 물어볼 질문들
   ㅤ→ 일하기 좋은 곳으로 [우리 회사]를 추천합니다.
   ㅤ→ [우리 회사]는 내가 다른곳에서 비슷한 역할을 했을때 보다 더 나아갈수 있게 동기를 부여합니다.
   ㅤ→ 나는 내 롤에 필요한 시스템과 도구를 사용하는데 자신이 있습니다.
   ㅤ→ 나는 내 일을 잘하기 위해 아직 배워야 할 것이 무엇인지 잘 알고 있다.
   ㅤ→ 나는 내 롤이 [우리 회사]의 조직 목표에 어떻게 기여하는지 이해하고 있습니다.
   ㅤ→ 지금까지 내 역할은 JD에서 얘기했던 것과 일치합니다.
   [ 온보딩 개선 시작하기 ]
   - 일정과 목표 계획하기 : 첫날, 첫 주, 30일, 60일, 90일 동안의 주요 마일 스톤
   - HR팀이 매니저 및 모든 관련자를 지원 하도록 : 개인별 체크리스트, 관리자와 팀 리더 교육
   - 매일의 워크플로우에 문서를 포함 : 변경사항과 업데이트를 기록하는 습관 만들기(신규 입사자에게 오래된 변경 전 문서를 주지 않도록)
   - 신규 입사자의 입장이 되어보기
   ""어떤 식으로든 신규 입사자를 도운 것은 작든 크든 몇 년간 기억될 것""

   안 그래도 오늘 첫 출근 하시는 분이 계신데, 반성하며 따라해야겠네요ㅠ

   - 신규입사자를 잘 온보딩 시키는 방법 - How to onboard a new hire https://news.hada.io/topic?id=233
   - Spotify의 신입사원 온보딩 절차 https://news.hada.io/topic?id=2469

   위에 2개는 회사에 새로 합류하는 인원을 위한 온보딩이고,
   아래 2개는 서비스를 처음 이용하는 사용자를 위한 온보딩이네요.

   엇 ㅎㅎ 그러고보니 ㅠㅠ
   수정해 두었습니다. 고맙습니다.
"
"https://news.hada.io/topic?id=4604","드롭박스의 엔지니어링 커리어 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         드롭박스의 엔지니어링 커리어 프레임워크

   - 엔지니어의 경력을 성장시키기 위한 방법을 정리한 프레임 워크
   - 승진 체크리스트가 아닌, 각 단계에서 어떤 모습일지 파악하는데 도움 되도록 설계
   ㅤ→ 레벨 기대치 : 업무 범위, 협업 범위, 임팩트 레버
   ㅤ→ 핵심 행동과 기술 책임
   * 임팩트 : 엔지니어의 성공을 비즈니스 임팩트로 측정. ""고객에게 더 나은 서비스를 제공하는 것""
   ㅤ→ 일관성(Consistency), 속도(Velocity), 책무성(Accountability)
   - 분야별로 레벨을 분리하고 항목들을 정리
   ㅤ→ 레벨 : IC1 ~ IC4 일반, IC5 Staff, IC6 Principal, IC7 Senior Principal
   ㅤ→ 레벨 기대치 : Scope, Collaborative Reach, Impact Levers
   ㅤ→ 결과 : 임팩트, 오너십, 의사결정
   ㅤ→ 방향 : 민첩, 혁신, 전략
   ㅤ→ 능력 : 개인적 성장, 인재 채용, 능력 개발
   ㅤ→ 문화 : 협동, 조직의 건강, 커뮤니 케이션
   ㅤ→ 기술 : (분야별 주요 기술들) - 코드/ML/System/Testing Fluency, 소프트웨어 설계, 기술 전략, 아키텍처 디자인, 보안,
   - 분야별 프레임워크
   ㅤ→ Software Engineer : IC1 ~ IC7
   ㅤ→ QA Engineer : IC1 ~ IC5
   ㅤ→ Reliability Engineer (SRE) : IC1 ~ IC7
   ㅤ→ Machine Learning Engineer : IC1 ~ IC5
   ㅤ→ Security Engineer : IC2 ~ IC6
   ㅤ→ Technical Program Manager : IC1 ~ IC6
   ㅤ→ Engineering Manager : M3 ~ M7 ( M5 Senior, M6 Director, M7 Senior Director )

   이런 가이드라인 보고 개인적으로 짚어 보면서 '내가 어느 정도 수준인지', '무엇을 더 해야 하는지' 볼 수 있어서 좋은 참고자료로 생각되네요. 👍

   이런 커리어 프레임워크 가 실제 동작하긴 하나요? 라는 비난이 있긴 한데요.
   저는 이런 가이드라도 있어야 살짝 참고라도 가능하다고 봅니다.
   이마저도 없는 회사들이 대부분이니까요.
"
"https://news.hada.io/topic?id=4567","neeva - 광고없는 유료 검색엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          neeva - 광고없는 유료 검색엔진

   - 구글 전 임원들이 나와서 만든 유료 검색엔진 서비스
   ㅤ→ 광고 전혀 없음
   ㅤ→ 선호하는 뉴스 소스 와 리테일러 지정해서 검색 결과 커스터마이징 가능
   ㅤ→ 개인의 이메일/캘린더/문서와 연동해서 통합 검색을 지원
   ㅤ→ 모든 트래커 차단하는 브라우저 확장 제공
   ㅤ→ 쇼핑 : 전문가의 상품 추천 및 리뷰 모음
   - 첫 3달 무료, 그후 월 $4.95

   아직 미국내에서만 사용 가능한듯 한데.. 과연 웹 검색을 돈 내고 사용할 사람이 있을까 의구심은 드네요.

   kagi.com 을 10달러에 사용해보고 있어요 광고성 결과는 줄어들기는 하는데 검색 결과가 유용한지는 써보면서 판단을 해야할 듯 합니다.
"
"https://news.hada.io/topic?id=4549","HTTP Request Code Generator","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HTTP Request Code Generator

   - GET/POST/PUT/PATCH/DELETE HTTP Request 생성기
   - Node.js(axios), Google Apps Script, cURL, JavaScript용 코드 생성
   - Query Param, Authorization, Headers, Request Body 편집 지원
"
"https://news.hada.io/topic?id=4576","WikipediaQL - 위키피디어 쿼리 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       WikipediaQL - 위키피디어 쿼리 언어

   - 위키피디어에서 원하는 정보를 쉽게 추출할수 있는 언어 및 파이썬 라이브러리
   ㅤ→ 위키 데이터는 사람이 읽기는 편하지만 일부만 구조적이고 자동으로 추출하기가 어려움
   - 구현 목표
   ㅤ→ 사용 및 기억하기 쉽고, 명확하고 강력한 쿼리 언어 개발
   ㅤ→ CSS 와 비슷한 셀렉터 사용
   ㅤ→ MediaWiki API 로 메타 데이터 취득
   ㅤ→ action=parse API 로 페이지 컨텐츠를 HTML로 취득
"
"https://news.hada.io/topic?id=4622","틱톡, 비-페이스북 앱중에 첫 30억 다운로드 돌파","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      틱톡, 비-페이스북 앱중에 첫 30억 다운로드 돌파

   - 앱스토어/구글플레이 포함 30억을 넘은 앱은 현재까지 총 5개
   ㅤ→ WhatsApp, Messenger, Facebook, Instagram 그리고 TikTok
   - 누적 소비자 지출 금액이 $1B(1.1조원)을 넘은 비 게임앱은 총 16개
   ㅤ→ 그중 $2.5B (2.8조원) 를 넘은 앱은 5개 : Tinder, Netflix, YouTube, Tencent Video 그리고 TikTok
   - 올 상반기 설치가 3.8억회, 소비자 지출은 약 1조원($919M)

   지금까지 다운로드 30억을 넘은 앱이 다 페이스북 꺼였다는게 무섭군요.
   Youtube 는 충분히 30억 보다는 많을 거 같은데 안드로이드 기기에 기본 내장이라 카운트가 안된듯 합니다. ( 찾아보니 약 50억 이라고 하긴 하네요 )
"
"https://news.hada.io/topic?id=4655"," Android ML Platform, TFLite가 Google Play Services로 통합","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Android ML Platform, TFLite가 Google Play Services로 통합

   On-Device Machine Learning은 여러 장점이 있지만 개발자들은 공통적인 문제에 직면하게 됨
   - ML을 위한 추가 라이브러리로 앱 싸이즈가 증가함
   - 디바이스에 따라 성능, 안정성, 정확도가 많이 달라짐
   - 최대한 많은 디바이스에 적용하기 위해 오래된 API를 사용해야 하며, 이로 인해 최신 ML 기술을 적용하기 어려움
   구글은 이 문제를 풀기 위해 Android ML Platform를 구축.
   - TFLite가 Google Play Services에 포함됨
   - 앱 개발자는 On-Device ML를 위해 라이브러리를 추가할 필요가 없음
   - 일관된 API를 제공하며 Google Play Services를 통해 정기적으로 업데이트 됨.
   - Automatic Acceleration 기능 적용
   모든 장치에서 최적의 성능 (Automatic Acceleration)
   - Automatic Acceleration은 Android용 TensorFlowLite의 새로운 기능
   - 모델별 테스트를 통해 성능, 정확성 및 안정성을 고려하여 특정 장치에 대한 allowlist를 생성
   - Allowlist는 런타임에 하드웨어 가속을 활성화 할 시기를 결정하는 데 사용
   올해 말에 출시될 예정
"
"https://news.hada.io/topic?id=4630","페이스북 Blenderbot 2.0 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         페이스북 Blenderbot 2.0 공개

   - 장기 기억(LongTerm Memory)을 생성하고, 지속적으로 인터넷을 검색하는 오픈소스 챗봇
   ㅤ→ 거의 모든 주제에 대해 대화 가능
   ㅤ→ 대화중에 나오는 정보를 기억하고, 몇주/몇달동안 지속되는 대화에서 활용 (대화하는 사람별로 정보 별도 저장)
   ㅤ→ 대화중에 상황에 맞는 인터넷 검색을 하고 그 결과를 읽어서 대답할 때 통합하여 사용 (최신 상태를 자동 유지)
   - 완전한 모델, 코드, 평가 설정과 함께 2개의 데이터 세트 공개
   ㅤ→ 인터넷 검색을 통해서 강화되는 인간형 대화
   ㅤ→ 이전 대화 세션을 참고하는 멀티 세션 대화

   GPT3가 다 좋은데 소스코드 공개 안하고 MS에 베타 사용권 줘서 좀 그랬는데요. 얘는 기대가 많이 되긴 하네요.
   Blender 예전 버전은 여기서 테스트 해보실 수 있습니다.
   https://main-openchat-fpem123.endpoint.ainize.ai/
"
"https://news.hada.io/topic?id=4623","라자루스 강도 사건: 북한은 어떻게 최정예 해커 부대를 만들어 냈나","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 라자루스 강도 사건: 북한은 어떻게 최정예 해커 부대를 만들어 냈나

   최근 북한의 소행으로 추측되는 해킹 사건이 국내에서 연달아 벌어지고 있습니다. 한국원자력연구원이나 한국항공우주산업, 대우조선해양 등이 사이버 공격을 받아 개인정보 등이 유출되었는데, 이 회사들은 모두 같은 취약점이 있는 VPN을 사용하고 있었다는군요. 이러한 일련의 해킹을 저지른 주체로는 김수키(a.k.a. 탈륨)라는 조직이 지목되고 있는데, 이 조직은 북한군의 첩보기관인 정찰총국 산하에 소속된 것으로 알려져 있습니다. 며칠 전(15일)에는 서울대학교병원에서 약 7천여건에 달하는 개인정보를 유출시킨 해킹의 주체가 바로 김수키라는 주장도 등장했습니다.
   [전자신문] 北, VPN 뚫고 '백도어' 설치…대규모 공격 가능성 (2021-07-07)
   https://n.news.naver.com/article/030/0002956114
   [조선일보] 7000명 환자정보 턴 서울대병원 해킹... “北김수키 소행 추정” (2021-07-15)
   https://n.news.naver.com/article/023/0003626825
   사실 북한의 해킹 조직은 김수키만 있는 것이 아닙니다. 그 전에는 라자루스 그룹이 더 유명했습니다. 이들은 농협 전산망을 마비시키거나, 소니 픽쳐스를 공격하거나, 방글라데시 중앙은행의 외화를 빼돌리는 등의 큼지막한 사건을 일으켜 악명을 떨쳤거든요. 이 중에서 2016년 방글라데시 중앙은행 해킹 사건의 전말 및 미국 FBI가 공개수배한 라자루스 그룹의 주요 인물인 박진혁에 관하여 쓴 BBC의 기사를 소개합니다. (한국어)

   재밌습니다
"
"https://news.hada.io/topic?id=4546","LibreCellular - 오픈소스로 4G 셀룰러망 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   LibreCellular - 오픈소스로 4G 셀룰러망 구축하기

   - 오픈소스와 저비용 SDR(Software Defined Radio) 하드웨어 이용해서 유연한 LTE 기지국 만들기
   - 1.4Mhz 와 3Mhz 의 대역폭으로 구성된 저전력 소형 셀
   - 처음엔 데이터 서비스만 지원하지만, VoLTE(HD Voice) 를 이용한 네이티브 음성 전화 및 Circuit-switched FallBack(CSFB) 도 지원 예정
   - 소프트웨어 스택
   ㅤ→ eNodeB(4G 기지국) : srsRAN
   ㅤ→ EPC(Evolved Packet Core) : Open5Gs
   ㅤ→ IP Multimedia Subsystem(IMS) : Kamailio
   - 레퍼런스 하드웨어
   ㅤ→ 베이스밴드 프로세싱 : 인텔 NUC7i7DNBE 싱글보드 컴퓨터
   ㅤ→ SDR : LimeSDR-USB
   ㅤ→ RF Front End : LimeRFE
   ㅤ→ Reference Clock : Leo Bodnar 의 Mini Precision GPS Reference Clock
"
"https://news.hada.io/topic?id=4626","Chromium이 발표한 RenderingNG가 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Chromium이 발표한 RenderingNG가 무엇인가?

   - RenderingNG(Rendering Next Generation)는 크로미엄의 차세대 렌더링 아키텍처
   ㅤ→ 크로스 브라우저 이슈를 최대한 없애고 안정적인 렌더링 성능을 구현하는 것
   ㅤ→ 크롬의 Blink 엔진에 이미 적용되어서 사용중
   - 렌더링 호환성 문제를 해결하는 방법
   - 안정적인 렌더링 성능을 제공하는 방법
   * 프론트엔드 개발자가 알고 있으면 좋을 내용들을 요약 정리

   CSS의 레이아웃을 다루는 LayoutNG가 있었죠.
   - https://developers.google.com/web/updates/2019/06/layoutNG?hl=ko
   - https://docs.google.com/document/d/…
"
"https://news.hada.io/topic?id=4551","Petite-Vue - 점진적 향상에 최적화된 5kb 짜리 Vue 서브셋","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Petite-Vue - 점진적 향상에 최적화된 5kb 짜리 Vue 서브셋

   - 점진적 향상(Progressive Enhancement) : 가능한 많은 사용자에게 필수 콘텐츠와 기능을 제공하기 위한 설계 철학
   - Vue.js가 직접 만든 대체 배포본
   ㅤ→ 표준 Vue와 같은 템플릿 문법과 Reactivy 모델을 사용
   ㅤ→ 서버 프레임워크에 의해 렌더링된 HTML 페이지에 인터랙션을 분배(Sprinkling) 하는데 최적화 됨
   ㅤ→ 빌드 단계없이 CDN에서 바로 로딩해서 사용 가능

   정말 가볍게 Vue를 쓸수 있도록 해주는 거네요. 정말 가볍다는 Alpine.js 보다도 절반 사이즈로 훨 작다고.
   Vue에 익숙하신 분들은 다양한 용도로 쓸수 있을거 같네요.
"
"https://news.hada.io/topic?id=4573","Flicking v4 - 오픈소스 캐로셀 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Flicking v4 - 오픈소스 캐로셀 라이브러리

   - 네이버 FE팀의 Carousel 오픈소스
   - 사용자의 UI를 그대로 유지 : Flexbox 기반
   - SSR(Server-Side Rendering) 지원
   - 더 쉬운 커스터마이징 : 프레임워크별 튜토리얼, 내부 컴포넌트 정보 제공
   - Vue3 추가 지원 : 기존 React, Angular, Preact 지원 포함, Svelte 지원 예정
   - 새로운 Arrow, Pagination 플러그인
"
"https://news.hada.io/topic?id=4646","Jetbrains의 2021 개발자 에코시스템 현황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Jetbrains의 2021 개발자 에코시스템 현황

   2021년이 들어서자마자 Jetbrains 제품군을 쓰는 모든 프로그래머를 대상으로 한 설문조사의 결과가, 오늘 발표되었습니다. 최근 다국어 지원을 강화하는 행보를 보이던 Jetbrains가, 이 문서도 한국어로도 제공하는 게 인상깊네요.
   꽤 많은 내용을 자세하고 심도 깊게 다뤘습니다. 한국어로 멋있게 번역되어있으니, 원문을 읽어주세요 'ㅁ '!

   흥미로운 점들 :
   - 저 설문조사를 제출한 프로그래머의 57퍼센트는 프로그래밍을 취미로 하고 있습니다.
   - 프로그래머의 8퍼센트만이 헤드폰(이어셋)을 끼지 않습니다.
   - 18~39세까지는 선호하는 음료 1위는 탄산음료나 커피가 아닌 물입니다. 2위가 커피고, 3위가 차, 4위까지 가야 탄산음료가 보입니다.

   설문조사 자체가 한 번 하면 30분~1시간이 걸릴만큼 굉장히(... ) 방대한 것처럼, 나온 결과도 굉장히 방대하네요.

   대한민국은 Java! 가 눈에 띄네요 ^^;

   SI가 한몫을 한 것 같기는 한데, Kotlin 이 10%로 다른 국가들에 비해 높다는 것도 눈길을 끄네요.
   근데 PHP가 정말 5% 일까요 ㅡ.ㅡ;

   대표군이 JetBrains 사용자들에 한정될 수 있다는 ( 적어도 Jetbrains에 관심을 가져야 저 설문조사를 받을 수 있으니 ) 점을 주의하라는 문구가 있는 걸 보아하니, 한국에는 PHPStorm 유저가 적다는 말만 될지도 모르겠네여 ㅋㅋ
"
"https://news.hada.io/topic?id=4583","ModernCloud - 브라우저 기반 서버리스 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ModernCloud - 브라우저 기반 서버리스 플랫폼

   - AWS Lambda 개발을 브라우저에서 가능하게 해주는 오픈소스
   ㅤ→ 로컬 개발환경 설정 필요없이 Function/Endpoint 개발
   ㅤ→ 코드/테스트/배포를 브라우저만으로 (VSCode 웹, 자동완성)
   - 별도 레이어 없음 : Terraform 기반 설정으로 세부 조절 가능
   - GitHub 연동해서 싱크 및 CI/CD 지원
   - 대시보드 제공
   - Docker 로 실행 (기본 설정파일 제공)
"
"https://news.hada.io/topic?id=4617","밸브, 휴대용 PC게임 콘솔 Steam Deck 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     밸브, 휴대용 PC게임 콘솔 Steam Deck 공개

   - AMD Zen 2 (2.4~3.5Ghz) + RDNA 2 + 16GB램 LPDDR5
   - 16:10 1280X800 7인치 LCD, 터치 입력, 60Hz
   - MicroSD, USB-C로 확장 가능
   - 무게 669g
   - 리눅스 기반 SteamOS 3.0 : 스팀의 모든 기능 내장, Proton으로 윈도우 게임 실행
   - DP1.4 포트로 외부 디스플레이 8K 60hz, 4K 120hz 지원
   - HD Haptics 진동, 6축 자이로 센서
   - 십자버튼 + ABXY, 썸스틱 2개, 트랙패드 2개, R1,R2/L1,L2 트리거, R4,R5/L4,L5 그립버튼
   - 공식 Dock : USB + 이더넷, DP 1.4 , HDMI 2.0
   - 64G $399 / 256G $529 / 512G $649 : 가격에 따라 저장장치 속도/용량 차이
   - 올해말 미국/캐나다/유럽/영국 출시, 내년에 지역 확대 예정, 한국 판매 미정

   아치OS에 KDE가 들어갔다고 하더군요.

   https://reddit.com/r/linux/…

   용량 문제가 좀 걸리네요. 요즘 AAA pc 게임들 용량 50기가 넘는게 수두룩 해서..

   요즘 1tb MicroSD도 있으니 괜찮지 않을까요 ?
   일단 속도때문에라도 512G 모델을 사야 할 거 같은데 1.5t 정도면 ^^;;

   아 외장 sd 카드 사용할수 있군요..괜찮네요

   - Valve, 스위치와 비슷한 휴대용 게임기 개발중 https://news.hada.io/topic?id=4343
   - 윈도용 게임을 리눅스용 스팀에서 실행시켜주는 Proton 4.11 출시 https://news.hada.io/topic?id=218
   - Valve Proton, 지원하는 게임 7000개 돌파 https://news.hada.io/topic?id=3843
   역시 Proton 에 신경쓰는건 로드맵상 이 스팀덱 때문이었을 듯
   RL4,5 버튼은 엑스박스 엘리트 패드의 그립 버튼 생각나네요. 입력 많은 게임에 편하긴 합니다.
"
"https://news.hada.io/topic?id=4662","CATS - OpenAPI 스펙 기반 테스트 자동 생성 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  CATS - OpenAPI 스펙 기반 테스트 자동 생성 오픈소스

   - Open API contract / Swagger 기반으로 동작
   - 72개의 Fuzzer를 이용해서 자동으로 수만개의 테스트케이스를 생성하고 실행
   ㅤ→ negative, boundary, structural validation, security, e2e functional flows..
   - 전체 Endpoint 에 대해, 모든 HTTP Method 및 연관 Body & Parameter 로 테스트 케이스 생성
   - Java 오픈소스
"
"https://news.hada.io/topic?id=4669","Svelte Storm - 오픈소스 Svelte IDE","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Svelte Storm - 오픈소스 Svelte IDE

   - Svelte 프로젝트를 실시간으로 보면서 개발 가능한 State Manager 제공
   - Svelte 와 Electron 으로 개발되어, 윈/맥/리눅스 지원
   - 빌트인 터미널 제공
   - 파일/디렉토리 접근 가능
"
"https://news.hada.io/topic?id=4553","윈도우 11 Pro 버전만 로컬계정으로 설치 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      윈도우 11 Pro 버전만 로컬계정으로 설치 가능

   - 윈도우 11 Home 은 MS 계정(MSA)를 설치시에 필요로 함 (인터넷 연결 필수)
   - 윈도우 11 프로 버전은 MSA 대신 로컬 계정으로 설치 가능
   - 홈 버전도 설치가 완료되면 로컬계정으로 전환하는 것은 허용
"
"https://news.hada.io/topic?id=4584","최선을 다한다는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               최선을 다한다는 것

   - YC 창업자 폴 그레이엄의 How to Work Hard 글 번역
   - 위대한 일을 해내기 위해서는 재능, 연습, 노력 세 가지가 모두 필요
   - 두 가지만 만족 시켜도 어떤 일이든 잘할 수 있지만, 최고의 결과를 위해선 세가지 모두가 필요
   - 엄청난 재능과, 수많은 연습, 그리고 그 일에 최선을 다해야 함
   - 이 말은 당연해 보이지만, 실제로 이를 깨닫는 것은 쉽지 않음
   ㅤ→ 재능과 노력이 마치 반대인 것처럼 보이기 때문
   - 목표가 명확하지도 않으며, 외부에서 어떤 목표가 주어지지도 않았을 때 최선을 다하기 위해서는 어떻게 해야하는가
   ㅤ→ 다른 사람이 당신에게 요구하지 않아도 스스로 일을 하는 마음가짐을 가지는 것이 기본
   - 흥미로운 사실은, 무언가에 최선을 다하게 만드는데 가장 큰 방해가 되는 것이 바로 학교
   ㅤ→ 학교는 학생이 해야 할 일인 공부를 지루하고 무의미한 것으로 보이게 만듬
   ㅤ→ 나는 진짜 일이란게 어떤 건지 알고 나서야 비로소 최선을 다해 일할 수 있게 되었음
   - 진짜 일이란 어떤 것인지를 이해하기 위해서는 먼저 두 가지 사실을 깨달아야 함
   ㅤ→ 학교에서 배우는 과목은 아이들에게 쉽게 가르칠 수 있도록 손질된 것이며, 때로 진짜 학자들이 한 일과는 전혀 다른 모습으로 바뀌어 있다는 것
   ㅤ→ 어떤 종류의 일은 본질적으로 가짜이며, 잘 해야 소일거리에 불과하다는 것
   - 진짜 일에는 어떤 확실성이 있음. 적어도 그 일이 반드시 필요한 일이라는 느낌
   - 최선을 다한다는 것은 가장 가운데를 향한다는 것이며, 가장 위대한 문제에 도전한다는 것
   - 이 일에 당신이 계속 매달려야 할지를 말해주는 가장 좋은 기준은 바로 당신이 그 문제를 흥미롭게 생각하는가
   - 매 순간 당신이 스스로에게 정직하고 스스로를 잘 판단할 수 있다면, 당신은 저절로 최적의 상태에 돌입하게 되며, 이 세상에 얼마 없는 생산적인 사람이 될 수 있을 것

   최선을 다하는 것도 중요하지만 너무 최선을 다하지 않는 것도 중요하다고 생각합니다. 이것만 보고 최선을 다해서 달려왔을 때 결과가 좋지 않았을 때 누구나 인간인지라 번아웃이 올 수 있기 때문에 최선을 80%만 하겠다는 마음가짐도 필요하다고 봅니다. 그래야 실패했을 때 원인을 너무 자신이나 남에게서 찾지 않고 다하지 않은 20%에 남겨둘 수 있거든요.

   위 요약엔 빠진 것 같은데, 본문에는 그러한 부분도 언급되어 있습니다. (최선을 다한다 != 항상 노력한다)

   위 요약에는 크게 의미가 부여되지 못한 부분 중에서 하나를 꼽자면 ""자신에게 솔직해야만 한다""라는 말이 여러 번 언급되더군요, 찔리고, 또한 부끄러웠습니다.

   폴 그레이엄이 쓰고 뉴스페퍼민트에서 번역한 이 글도 매우 좋았습니다.
   https://newspeppermint.com/2020/04/23/m-test1/

   영감에 불을 지피는 멋진 글이네요!

   매우 요약하기 어려운 산문성 글이네요. 근데 주루룩 읽기엔 좋습니다.
   뉴스페퍼민트에서 장문을 잘 번역해주셨으니 꼭 원 링크의 번역문을 읽어보시기 바랍니다.
   2부 링크 : https://newspeppermint.com/2021/07/08/workhard2/
"
