"https://news.hada.io/topic?id=17382","학습하는 방법 배우기 (Learning to Learn)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    학습하는 방법 배우기 (Learning to Learn)

     * 지난 3년간 300건 이상의 면접을 진행하며 평균적으로 3-4일마다 새로운 인재를 만나 스타트업 적합성을 평가했음
     * 인터뷰를 마무리할 때, 훌륭한 후보자들이 빛날 수 있는 개방형 질문을 선호함
     * 가장 좋아했었던 질문은 Peter Thiel 스타일: ""당신이 배운 것 중에서 다른 사람들은 잘 모르는, 당신에게만 엣지를 주는 것은 무엇인가요?""
     * 가장 인상 깊었던 답변 중 하나는 ""새로운 것을 시작할 때 가장 중요한 것은 무엇을 배워야 할지 아는 것""
     * 최적의 학습 흐름을 설명하며, 다음과 같은 단계로 구성됨:
          + 기초 지식(Foundational Knowledge)이 무엇인지 신속하게 파악
          + 전문가가 되기 위한 개인화된 커리큘럼을 구축하고 '전문가 초보자(Expert Beginner)'가 되는 함정 회피
               o

     기술 수준이 빠르게 상승하며 자신을 전문가로 오인하는 현상으로 더 이상의 발전이 필요 없다고 판단하여 학습을 중단함. 제한된 경험을 반복하면서 진정한 성장을 이루지 못함
          + 초기 기억 형성을 위해 처음 15-20시간은 집중적으로 학습한 후, 더 규칙적인 속도(pace)로 속도를 줄임
     * 1번과 2번은 일반적인 구조화된 학습 접근법인 반면, 3번은 '간격 반복 학습(Spaced repetition)'에 대한 새로운 해석임
          +

     심리학적 간격 효과를 활용하기 위하여 과거에 학습한 자료의 복습 간격을 늘리는 학습 기법
     * 대부분의 사람들이 수십 년간 학습에 대한 사고방식을 업데이트하지 않았다는 점이 놀라운 발견임
          + (잠시 멈추고 마지막으로 자신의 학습에 대한 멘탈 모델을 업데이트한 것이 언제였는지 생각해 보세요.)
     * 학습법 자체를 배우는 것이 매우 높은 레버리지를 가짐
     * 25% 효율로 40시간 학습하는 것은 80% 효율로 12.5시간 학습하는 것과 동일함
     * 생산적으로 정직해지는 것이 자신을 위해 할 수 있는 가장 효과적이고 친절한 일 중 하나임

GN⁺의 의견

     * 학습 방법론에 대한 연구는 신경과학과 인지심리학의 발전으로 지속적으로 진화하고 있으며, 특히 AI 시대에는 더욱 중요해질 것으로 예상됨
     * '전문가 초보자' 함정은 특히 IT 업계에서 자주 발생하는 현상으로, 지속적으로 배우고 깊이를 더하는 것이 중요함
     * 학습 방법에 대한 개선은 자기 발전에 큰 영향을 미칠 수 있음. 특히 빠르게 변화하는 기술 환경에서는 더 효과적인 학습 방법을 찾는 것이 필수적임
     * 글에서 제시된 학습 흐름은 개발자와 같은 지식 근로자에게 매우 유용할 수 있음. 기본적인 지식을 빠르게 파악하고, 집중적인 초기 학습을 통해 기억을 강화하는 방식은 새로운 언어 또는 프레임워크를 배울 때 매우 도움이 될 것임.
     * ‘생산적으로 솔직한’ 것이 중요하다는 점은, 자신에게 엄격하지만 현실적인 목표를 세우고 꾸준히 도전해야 함을 상기시킴.

   우리나라에도 수많은 학습법 관련 자기계발서 광풍이 불었던 적이 있죠..
   뭐 결과는 다 케바케란 결론이었지만..

   울트라 러닝 책 괜찮습니다.
    1. 아주 초기 학습법이 엉망이지 않은 이상 학습법의 변경만으로 25% 효율 에서 80% 효율로 올라가는 경우가 일반적이지 않을 거 같습니다. 측정하기도 힘들고, 학습 방법은 배우는 컨텐츠가 뭐냐에 따라 많이 달라질 수 있습니다.
    2. 학습 간격을 반복 하는 것은 간격을 두고 학습 해서 나오는 효과보다는 꾸준히 학습하고 일정 학습 시간을 지속적으로 배정하는 학습양을 자체를 늘려서 나온느 효과일 수 있습니다. 대부분의 학습은 현재 일을 해나가면서 추가적으로 학습시간을 확보하는 것이 어려운 포인트니까요..

   그러게요. 학습법을 신경쓰는 것만으로도 효능이 있었을 것 같네요

        Hacker News 의견

     * Andrej Karpathy는 학습이 재미있을 필요는 없지만, 노력의 느낌이 중요하다고 강조함. 학습은 짧고 가벼운 운동보다는 진지한 체육관 세션과 같아야 함
     * 최고의 학습 자료를 찾는 것이 중요하다고 언급하며, 예를 들어 RL(강화 학습)에는 Barto & Sutton 책이 적합하다고 설명함
          + 최고의 자료는 직관적이지 않을 수 있으며, 예를 들어 안전한 운전자가 되기 위해서는 성능 운전 학교에 가는 것이 좋다고 함
          + ChatGPT를 사용하여 커리큘럼을 만드는 것이 유용하다고 설명함
          + 의학을 배우는 데는 교과서보다 Sketchy와 같은 솔루션이 더 효과적이라고 언급함
     * 파레토 분포가 학습에 적용될 수 있으며, 기초적인 80%를 배우는 것만으로도 충분한 지식을 얻을 수 있다고 설명함
     * 학습의 ""효율성""에 대한 논의가 무미건조하고 디스토피아적이라고 느끼며, 재미있는 학습이 가장 효과적이라고 주장함
     * ""A Mathematician's Apology""라는 책을 추천하며, 수학자의 사고방식을 이해하는 데 도움이 된다고 설명함
     * 입력의 질보다 양을 과대평가하는 함정에 빠질 수 있다고 경고함
     * 초보자가 기초 지식을 빠르게 식별하는 방법에 대한 설명이 부족하다고 지적함
     * 새로운 언어를 배우는 데 800개의 가장 일반적인 단어를 배우는 접근법을 시도하고 싶다고 언급함
     * ""Make It Stick: The Science of Successful Learning"" 책을 추천하며, 학습 방법에 대한 과학적 연구를 기반으로 한 자세한 내용을 제공한다고 설명함
     * 인터뷰에서 자신을 차별화하는 질문이 불편하다고 느끼며, 인터뷰어가 경험에 대한 구체적인 질문을 통해 차별화를 판단해야 한다고 주장함
"
"https://news.hada.io/topic?id=17367","이 선 아래에 쓰지 마십시오","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            이 선 아래에 쓰지 마십시오

     * TV 라이선스(TVL) 관련 편지에 ""이 선 아래에 쓰지 마십시오""라는 요청이 있어 궁금증을 가짐.
     * TVL/BBC에 문의했으나 명확한 답변을 받지 못함.

첫 번째 문의

     * 2006년 11월 5일, TVL/BBC에 문의 메일 발송.
     * ""이 선 아래에 쓰지 마십시오""라는 요청의 이유를 물음.
     * 7주 후, Kelly Wright로부터 주소와 라이선스 번호가 필요하다는 답변을 받음.

두 번째 문의

     * 주소나 라이선스가 없음을 설명하고, 다시 이유를 물음.
     * Ruairi Mcclean으로부터 OCR(광학 문자 인식) 기계가 이유라는 답변을 받음.
     * OCR 기계가 문서를 스캔하여 컴퓨터에서 편집할 수 있도록 함.

추가 질문

     * 편지를 다시 수집하여 스캔하는 이유에 대한 의문 제기.
     * Cas Scott로부터 TV 라이선스 담당자가 편지를 수집하지 않으며, TV 시청 여부를 확인하기 위해 방문할 수 있다는 답변을 받음.

계속된 의문

     * 편지를 다시 보내야 한다는 명확한 지시가 없음을 확인.
     * Carl Graves로부터 OCR 기계가 정보를 빠르게 처리하기 위해 사용된다는 설명을 받음.
     * 선 아래의 번호가 특정 주소와 관련된 고유 번호임을 설명받음.

비교와 결론

     * Santander라는 회사의 사례와 비교.
     * Santander는 바코드와 번호를 스캔하여 개인 데이터를 처리함.
     * TVL/BBC의 경우, 편지를 다시 보내야 한다는 명확한 지시가 없고, 번호가 이미 보유한 정보를 중복할 뿐임.

GN⁺의 정리

     * TV 라이선스 관련 편지의 ""이 선 아래에 쓰지 마십시오""라는 요청의 이유를 명확히 알기 어려움.
     * OCR 기계를 사용하여 정보를 빠르게 처리하려는 의도는 있으나, 편지를 다시 보내야 한다는 명확한 지시가 없음.
     * Santander와 같은 다른 회사의 사례와 비교했을 때, TVL/BBC의 요청은 불명확함.
     * 이 기사는 TV 라이선스 시스템의 비효율성이나 불명확한 절차에 대한 비판적 시각을 제공할 수 있음.

        Hacker News 의견

     * 오래된 회사에서 일하면서 많은 오래된 절차와 서류 작업을 경험했음. ""선 아래에 쓰지 마시오""라는 구역이 있었지만, 아무 일도 일어나지 않았음. HR에 서류를 직접 전달했을 때, 그들은 나를 알아보고, 회사가 절차 중심이라 서류를 시각적으로 확인하는 것이 당연한 일이었음.
     * 회사가 로고 색상을 약간 변경한 후 사무실 전체를 다시 칠했음. 장난으로 ""이 공간은 의도적으로 비워둠""이라는 메모를 벽에 붙였고, 4년 동안 그대로 있었음.
     * 고객 지원을 제공해야 하는 여러 기관과 대화할 때, 준비된 답변이 없는 주제는 무시되거나 관련 없는 응답을 받는 경우가 많음.
     * 모든 발송용 문구류에 선이 있는 상황에서는 선이 필요 없는 경우에도 해가 없으므로 추가 절차가 필요하지 않음.
     * 수천 통의 편지를 보내고 일부가 반환될 것으로 예상됨. 반환된 편지는 데이터베이스의 고유 번호로 수신자 정보와 교차 참조하여 관리함. 원본 편지를 스캔하여 시스템을 업데이트하는 프로그램을 통해 자동으로 처리함.
     * ""TV License""는 영국의 과도한 규제와 관료주의를 풍자하는 것이라고 생각했지만, 실제로 존재함을 알고 놀라움.
     * 때로는 고풍스러운 것들이 공식적인 커뮤니케이션에서 계속 유지됨. 여러 조직이 PDF 문서를 읽기 위해 Adobe Acrobat을 설치해야 한다고 상기시킴.
     * BBC로부터 받은 편지를 수집하고 전시함. 편지가 점점 위협적이고 공격적으로 변함. OCR 코드 스캔은 편지를 읽었는지 확인하고 다음 편지의 적대성을 조정하기 위한 것일 수 있음.
     * 이러한 편지에 ""OK""라고 쓰고 삶을 계속하는 것이 최선의 방법임.
     * 설명에 따르면, 이는 Capita에 외주를 준 것으로, 영국 정부의 자기 성찰 능력이 불리한 작업에 대한 아웃소싱 회사임.
"
"https://news.hada.io/topic?id=17453","오픈 워싱 – 기업들이 오픈 소스인 척하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       오픈 워싱 – 기업들이 오픈 소스인 척하는 이유

     * 페이스북의 최고경영자 마크 저커버그는 메타의 대형 언어 모델 Llama 3이 오픈소스라고 주장하지만 실제로는 오픈소스가 아님
     * 오픈소스 이니셔티브(OSI)의 오픈소스 정의에 따르면 Llama 3의 라이선스는 여러 가지 점에서 오픈소스 조건을 충족하지 못함
     * 메타는 이러한 속임수를 쓰는 유일한 기업이 아님. 이를 ""오픈워싱""이라고 부름
          + 오픈워싱은 실제로는 오픈하지 않은 제품이나 서비스를 ""오픈""한 것처럼 포장하는 기만적 관행
          + 2009년 인터넷 정책 연구자 Michelle Thorne이 ""그린워싱""에서 영감을 얻어 이 용어를 만듦
     * AI 분야에서 오픈워싱이 만연한 상황. Radboud University 연구진이 조사한 45개 모델 중 Google, Meta, Microsoft 등 대기업 모델은 실제로 오픈소스가 아님

기업들이 오픈워싱을 하는 이유

     * 과거에는 오픈소스를 꺼렸으나 지금은 오픈소스에 대한 인식이 긍정적으로 바뀜
          + 2001년 Steve Ballmer는 ""Linux는 암""이라고 선언하며, 오픈소스 소프트웨어를 사용하면 나머지 소프트웨어도 모두 오픈소스로 만들어야 한다고 주장
     * 기업들은 오픈소스의 긍정적 이미지를 이용하면서도 실제로는 오픈소스에 전념하지 않음
          + 이는 대중 이미지를 개선하고 투명성과 개방성을 중시하는 소비자들에게 어필하는 데 도움이 됨
          + 일부 기업은 오픈워싱을 통해 모델과 관행을 과학적, 규제적 감시로부터 보호하면서 ""오픈""이라는 꼬리표의 혜택을 누림
          + EU AI법이 ""오픈소스"" 모델에 특별 면제를 제공하므로 오픈워싱에 강력한 동기 부여가 됨

오픈소스 AI에 대한 명확한 정의 부재

     * EU는 아직 오픈소스 AI에 대한 명확한 정의를 내리지 못하고 있으며, 사실 그 누구도 아직 그렇지 못함
          + OSI는 향후 며칠 내에 오픈소스 AI 정의를 발표할 예정
          + 현재의 오픈워싱 라이선스들은 제작자들을 제외하고는 모두의 정의에 어긋남
     * 하지만 모든 대형 AI 기업들이 오픈소스에 대해 거짓말하는 것은 아님
          + 예를 들어 IBM의 Granite 3.0 LLM은 실제로 Apache 2 라이선스 하에 오픈소스로 제공됨
     * OSI가 정부나 규제 기관이 아님에도 불구하고, 오픈소스 용어를 올바르게 사용해야 하는 이유는 무엇일까?
          + OSI는 단지 유용한 지침을 만든 비영리 단체일 뿐
     * Chainguard의 CEO인 Dan Lorenc은 최근 애틀랜타에서 열린 SOSS 컨퍼런스 기조연설에서 다음과 같이 말함
          + 누구도 OSI의 정의를 사용하도록 강요할 수는 없지만, 많은 사람들, 특히 변호사들은 이 정의를 신뢰함
          + 그들은 OSI의 활동을 신뢰하며, 기업들이 오픈소스 기준을 충족하는 라이선스를 사용할 때 받게 되는 보호를 이해함
          + 그렇기 때문에 전 세계 대기업의 조달 계약에서 이 정의가 등장하는 것

오픈소스는 단순히 법적, 사업적 문제가 아님

     * 오픈소스는 개발자들에게 자유로운 활동 방식을 제공함
          + 오픈소스 없이는 라이선스의 다양한 조건을 알거나 신경 쓰지 않고도 코드를 자유롭게 사용할 수 있는 혜택을 잃게 될 것
          + 모든 코드의 라이선스를 일일이 확인해야 한다면, 개발자들은 새로운 라이브러리를 사용할 때마다 법률 검토를 받아야 함
          + 기업들은 소스 코드가 공개될 때 직면하게 될 책임이 불분명하다면 인터넷에 무언가를 게시하는 것을 두려워하게 될 것
     * Lorenc은 이것이 대기업만의 문제가 아니라 공유된 문제라고 강조함
          + 오픈소스를 사용하는 모든 사람이 영향을 받게 될 것
          + 전체 프로젝트가 작동을 멈출 수 있고, 보안 버그는 수정되지 않을 것이며, 유지보수는 훨씬 더 어려워질 것
          + 오픈소스의 정의를 보존하고 지키기 위해 함께 행동해야 함. 그렇지 않으면 변호사들이 다시 개입하게 될 것
     * 많은 지적재산권 변호사들은 이런 골치 아픈 일을 원하지 않음
          + 진정한 오픈소스 라이선스는 기업, 프로그래머, 변호사 모두의 삶을 더 쉽게 만듦
          + ""우리와 경쟁할 수 있는 사람을 제외한 오픈"" 또는 ""클라우드에 코드를 배포할 수 있는 사람을 제외한 오픈""과 같은 조항을 도입하는 것은 문제를 자초하는 것

오픈워싱은 모두에게 피해를 줌

     * 결국 오픈워싱은 모두의 법률, 비즈니스, 개발 작업을 더럽힐 것
     * 아이러니하게도, 현재 이런 접근법을 지지하는 근시안적인 기업들도 피해를 볼 것
     * 결국 그들의 거의 모든 작업, 특히 AI 분야에서의 작업은 오픈소스에 기반하고 있기 때문

GN⁺의 의견

     * 오픈소스의 정의를 훼손하는 오픈워싱 관행은 AI 분야뿐 아니라 전반적인 소프트웨어 산업에 부정적 영향을 끼칠 수 있음. 개발자들의 활동을 제약하고 기업들의 법적 위험을 높임
     * 기업들이 오픈소스의 긍정적 이미지만 이용하려 하는 것은 근시안적인 태도. 장기적으로는 오히려 기업 자신에게도 해가 될 수 있음
     * AI 기술 발전을 위해서는 오픈소스 정신에 입각한 협력과 공유가 필수적임. 기업들은 진정한 오픈소스 문화 조성에 앞장서야 함
     * 오픈소스 AI에 대한 명확한 정의와 기준 마련이 시급함. OSI의 오픈소스 AI 정의가 조만간 발표될 예정인데, 이를 토대로 기업과 정부, 개발자 커뮤니티가 협력해 나가야 할 것
     * 오픈워싱을 예방하기 위한 소비자와 개발자 대상 인식 제고 활동도 필요함. 기업의 ""오픈"" 주장을 그대로 받아들이지 않고 실제 라이선스와 관행을 꼼꼼히 살펴보는 습관이 중요

   오픈 소스로 프로젝트를 공개해서 초기 버그 수정과 기능 개선을 커뮤니티에 맡긴 다음, 안정화되고 나면 다시 독점 라이센스로 쏙 빼버리는 현상이 자주 보이네요.

   포크하면 되는 것 아니냐 하는 주장도 있지만 이미 자리잡힌 이미지와 네임 밸류를 기업이 그냥 집어먹는거죠.

        Hacker News 의견

     * 두 프로그램 또는 AI 모델 중 하나를 선택할 때, 오픈 소스를 선호하는 사람과 그렇지 않은 사람 간의 논쟁이 발생함. 오픈 소스가 아닌 프로그램도 오픈 소스처럼 보이도록 하는 것이 목표임.
     * 오픈 소스는 기업 친화적인 타협이었지만, 일부 참여자들은 높은 도덕성을 가지고 있었음. 이러한 도덕성을 가진 사람들이 오픈 소스의 남용을 막아야 함.
     * 상표, 인증, 라이선스 등을 통해 해결할 수 없다면, 주류 언론을 통해 메시지를 전달해야 함. <i>The Register</i>는 내부 지식이 있지만, 대중에게 널리 알려져야 함.
     * 여러 회사에서 오픈 소스를 비난하면서도 Linux, Java, Debian 등 오픈 소스 소프트웨어에 의존하여 사업을 운영함. 대부분의 기업은 기여나 지원에 대한 의무를 느끼지 않음.
     * OSI가 논란의 여지가 있는 오픈 소스 AI 정의를 준비 중임.
     * thirdweb는 기술적으로 오픈 소스이지만, API 키 없이는 작동하지 않으며, SAAS에 API 호출 한도를 확인함. 이는 진정한 오픈 소스 대안을 만들려는 팀을 낙담시킴.
     * 공정 소스와 같은 개념을 대중화하지 못한 결과로, 작은 비SAAS 회사는 오픈 소스로 생존할 수 없음.
     * 오픈 소스는 자유 소프트웨어가 가진 윤리나 철학을 가지고 있지 않음. 자유 소프트웨어가 오픈 소스보다 우월함.
     * 대형 모델의 경우, 훈련 비용이 높고 이진 아티팩트가 귀중하며 변형 가능함. OSI가 정의를 확립하면 Meta가 이를 따를지 여부와 관계없이 그들의 노력을 칭찬할 가치가 있음.
     * OSI는 대형 클라우드 제공자 시대에 시장 참여자로부터의 보호가 필요하다는 점을 인식해야 함. Mongo, Elastic, Redis와 같은 드라마를 피할 수 있는 명확한 라이선스 옵션이 필요함.
     * ""Open <something>""이라는 용어는 대중을 오도하지 않도록 보호되어야 함. ""OpenAI""와 같은 혼란을 방지해야 함.
     * ""Open Source""라는 용어를 잘못 사용하는 것보다 커뮤니티의 기여를 받아들인 후 라이선스를 철회하는 것이 더 나쁜 경우임. 이는 사기로 간주되어 민사 책임을 져야 함.
     * AI 모델에 대해 재현 가능한 훈련 스크립트와 데이터를 공유하지 않는 경우 ""Open Weights""라는 이름이 더 적합함.
"
"https://news.hada.io/topic?id=17466","Thoughtworks Technology Radar, Volume 31 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Thoughtworks Technology Radar, Volume 31 공개

   테크닉/도구/플랫폼/개발언어 및 프레임워크 분야의 최신 트렌드들을 Hold/Assess/Trial/Adopt 4단계로 시각화 및 설명

코딩 어시스턴스 안티패턴

     * 놀랍지 않게도, 이번 Radar에서는 개발자들이 일반적으로 사용하는 생성 AI와 LLM에 대한 논의가 주를 이룸
     * 패턴은 필연적으로 안티패턴으로 이어지는데, 이는 개발자가 피해야 할 상황화된 상황을 의미함
     * 과열된 AI 공간에서 일부 안티패턴이 나타나기 시작하고 있음:
          + 사람이 AI를 동반자로 페어 프로그래밍을 완전히 대체할 수 있다는 잘못된 생각
          + 코딩 지원 제안에 과도하게 의존
          + 생성된 코드의 코드 품질 문제
          + 코드베이스의 더 빠른 성장률
     * AI는 추상화를 사용하기보다는 무차별적인 방식으로 문제를 해결하는 경향이 있음
          + 예: Strategy 디자인 패턴 대신 수십 개의 조건문을 사용
     * 특히 코드 품질 문제는 개발자와 아키텍트가 ""작동은 하지만 끔찍한"" 코드에 빠지지 않도록 지속적인 주의를 기울여야 할 영역을 강조함
     * 따라서 팀원들은 단위 테스트, 아키텍처 적합성 함수 및 기타 입증된 거버넌스 및 검증 기술과 같은 우수한 엔지니어링 관행에 더욱 주력해야 함
          + 이는 AI가 복잡성으로 코드베이스를 암호화하는 대신 노력을 돕고 있는지 확인하기 위함

Rust is anything but rusty - Rust는 녹슬지 않음

     * Rust는 점차 선호되는 시스템 프로그래밍 언어가 되고 있음
     * 매 Radar 세션에서 Rust는 대화의 맥락에서 반복적으로 등장함
     * 논의되는 많은 도구들이 Rust로 작성됨
     * Rust는 오래된 시스템 수준 유틸리티를 대체하거나 성능 향상을 위해 에코시스템의 일부를 재작성할 때 선호되는 언어임
     * Rust 기반 도구에 대한 가장 흔한 수식어는 ""엄청나게 빠른""으로 보임
     * 예를 들어 Python 에코시스템에는 현저히 더 나은 성능을 지원하기 위해 Rust 기반 대안이 있는 여러 도구가 있음
     * 언어 설계자와 커뮤니티는 선행 언어의 많은 함정보다 더 적은 함정으로 탁월한 실행 속도를 제공하면서 핵심 SDK, 라이브러리 및 개발 도구의 잘 좋아하는 에코시스템을 만드는 데 성공함
     * 팀의 많은 사람들이 Rust의 팬이며, Rust를 사용하는 대부분의 개발자가 Rust를 높이 평가하는 것으로 보임

WASM의 점진적 부상

     * WASM(WebAssembly)은 스택 기반 가상 머신을 위한 바이너리 명령어 형식임
     * 대부분의 개발자 관심사에는 너무 난해하고 낮은 수준으로 들리지만, 사람들은 그 의미를 봄: 브라우저 샌드박스 내에서 복잡한 애플리케이션을 실행할 수 있는 능력
     * WASM은 기존 JavaScript 가상 머신 내에서 실행될 수 있어, 개발자가 이전에는 네이티브 프레임워크와 확장에서만 구현할 수 있었던 애플리케이션을 브라우저에 내장할 수 있게 함
     * 4대 주요 브라우저(Chrome, Firefox, Safari, Edge)는 이제 WASM 1.0을 지원하여, 정교한 이식 가능하고 크로스 플랫폼 개발을 위한 흥미로운 가능성을 열어줌
     * 지난 몇 년 동안 이 표준을 큰 관심을 가지고 지켜봤으며, 이제 합법적인 배포 대상으로서의 능력을 발휘하기 시작하는 것을 기쁘게 생각함

생성 AI 도구의 캄브리아기 대폭발

     * 지난 몇 권의 Radar에서 제시된 궤적을 따르면, 생성 AI가 우리의 논의에서 두드러지게 다뤄질 것으로 예상했음
     * 그럼에도 불구하고 우리는 언어 모델을 지원하는 기술 생태계의 폭발에 여전히 놀랐음:
          + 가드레일, 평가, 에이전트 구축 도구, 구조화된 출력 작업을 위한 프레임워크, 벡터 데이터베이스, 클라우드 서비스 및 관찰 가능성 도구
     * 이러한 빠르고 다양한 성장은 많은 면에서 완벽하게 이해됨
     * 초기 경험, 즉 일반 텍스트 프롬프트를 언어 모델에 제공하는 단순성은 소프트웨어 제품 엔지니어링으로 이어졌음
     * 이는 사람들이 ChatGPT에 첫 번째 프롬프트를 보낸 후 만들어진 꿈과 과장된 주장에는 미치지 못할 수 있지만, 우리는 많은 고객에게서 생성 AI의 현명하고 생산적인 사용을 볼 수 있으며 이러한 모든 도구, 플랫폼 및 프레임워크는 LLM 기반 솔루션을 프로덕션에 도입하는 데 중요한 역할을 함
     * 2015년경 JavaScript 생태계 폭발의 경우와 마찬가지로 이러한 혼란스러운 성장은 한동안 계속될 것으로 예상됨

[Techniques]

  Adopt

     * 1% canary
          + 카나리 배포를 사용해 새 소프트웨어 버전에 대한 초기 피드백 장려 및 위험 감소
          + 새 기능을 1%의 사용자에게 롤아웃하는 기술로 팀이 피드백 캡처, 영향 관찰, 필요시 대응 가능
          + 모바일 앱이나 엣지 컴퓨팅 장치, 소프트웨어 정의 차량 등의 대규모 배포에 중요
     * Component testing
          + 테스트 자동화는 효과적인 소프트웨어 개발의 초석
          + 프론트엔드 테스트에 초점을 맞추어 안정성과 속도 확보
          + 컴포넌트 테스트에 jsdom 사용하여 메모리에서 수행
          + 엔드투엔드 테스트에는 브라우저 툴 사용
     * Continuous deployment
          + 가능한 지속적 배포 실천 채택
          + 자동화된 테스트를 통과한 모든 변경 사항을 자동으로 운영에 배포
          + 빠른 피드백 루프와 고객에 대한 신속한 가치 전달 가능
          + 필요한 성숙도 달성을 위한 로드맵 제공한 Valentina Servile의 저서 ""Continuous Deployment"" 참고
     * Retrieval-augmented generation (RAG)
          + 대규모 언어 모델의 응답 품질을 개선하기 위한 선호 패턴
          + Jugalbandi AI 플랫폼 등의 프로젝트에서 성공적으로 사용
          + 관련성 있고 신뢰할 수 있는 문서에 대한 정보를 데이터베이스에 저장
          + 프롬프트에 대한 관련 문서 검색 및 증강하여 풍부한 컨텍스트 제공
          + 더 나은 출력 품질 산출 및 환각 크게 감소

  Trial

     * Domain storytelling
          + 도메인 주도 설계(DDD)가 우리 소프트웨어 개발 접근 방식의 기반이 됨
          + 많은 팀에서 DDD 시작이 어려움
          + 도메인 스토리텔링은 초기 도메인 모델 개발에 대한 대안 또는 보완책
          + 비즈니스 전문가들의 활동 설명을 도식화하여 이해 공유 명확화
     * Fine-tuning embedding models
          + 검색 증강 생성을 기반으로 한 LLM 앱 구축 시 임베딩의 품질이 검색 및 응답에 직접적 영향
          + 특정 작업 또는 도메인에 대한 임베딩의 정확도와 적절성 향상 가능
          + 도메인별 LLM 앱에서 정밀한 정보 추출이 중요한 경우 우리 팀이 임베딩 파인튜닝 수행
          + 이 접근 방식의 장단점 고려 필요
     * Function calling with LLMs
          + 주어진 쿼리와 관련 문서를 기반으로 LLM이 적절한 함수를 결정하고 호출하는 기능
          + LLM이 텍스트 생성 이상의 기능을 수행할 수 있게 확장
          + 함수 또는 API 트리거를 통해 LLM이 이전에는 독립적 기능 범위를 벗어나는 작업 수행
          + LLM이 내부 시스템, 데이터베이스 연결하거나 브라우저를 통한 인터넷 검색도 가능
          + 검색 증강 생성과 에이전트 아키텍처의 맥락에서 이해되어야 할 추상 패턴
     * LLM as a judge
          + 대규모 데이터셋에 대한 질문을 기반으로 답변을 제공할 수 있는 시스템을 구축하지만 답변에 도달한 방법을 따라가기 어려움
          + LLM을 사용하여 또 다른 시스템(LLM 기반일 수도 있음)의 응답 평가
          + 제품 카탈로그의 검색 결과 관련성 및 LLM 기반 챗봇의 사용자 안내 방향 평가에 사용
          + 평가자 시스템의 신중한 설정 및 보정 필요
          + 효율성 향상과 비용 절감으로 이어질 수 있음
     * Passkeys
          + FIDO 연합이 주도하고 Apple, Google, Microsoft가 지원하여 주류 사용성에 근접 중
          + 새로운 로그인 설정 시 키 페어 생성 - 웹사이트는 공개 키 수신, 사용자는 개인 키 보관
          + 비대칭 암호화를 사용하여 로그인 처리
          + 사용자 장치에 저장되고 웹사이트로 전송되지 않는 개인 키 소유 증명
          + Passkey에 대한 액세스는 생체 인식 또는 PIN으로 보호
          + 멀티플랫폼 사용자를 위해 CTAP를 통해 키 생성 또는 로그인 필요 장치 이외의 다른 장치에 Passkey 보관 가능
     * Small language models
          + 큰 언어 모델(LLM)은 유용하지만 크기로 인한 문제 발생 가능
               o 프롬프트 응답에 많은 계산 자원 필요하여 느리고 비쌈
               o 모델이 전용이고 크기 때문에 제3자의 클라우드에서 호스팅해야 하는데 민감한 데이터에 문제
               o 대부분의 경우 모델 훈련이 지나치게 비쌈
          + RAG 패턴으로 기본 모델의 훈련 및 파인튜닝 필요성은 해결 가능하나 비용 및 개인정보 문제는 여전히 남음
          + 작은 언어 모델(SLM)에 대한 관심 증가
               o 가중치와 정밀도가 더 적음(일반적으로 35억~100억 개 매개변수)
               o 적절한 컨텍스트에서 올바르게 설정되면 LLM만큼 또는 더 뛰어난 성능 발휘 가능
               o 크기 때문에 에지 장치에서 실행 가능
               o Google의 Gemini Nano, Microsoft의 Phi-3 시리즈 등 빠르게 진화 중인 분야
     * Synthetic data for testing and training models
          + 민감하거나 액세스가 제한된 데이터 소스에 의존하지 않고 실제 시나리오를 모방할 수 있는 인공 데이터 생성 포함
          + 구조화된 데이터 세트에 대한 합성 데이터는 광범위하게 탐구됨
          + 비정형 데이터에 대한 합성 데이터의 재사용 증가
          + 특히 LLM 학습 또는 파인튜닝을 위한 레이블이 있는 도메인별 데이터 부족에 직면한 기업
          + Bonito 및 Microsoft의 AgentInstruct와 같은 도구는 텍스트 문서 및 코드 파일과 같은 원시 소스에서 합성 지침 조정 데이터 생성 가능
          + 수동 데이터 큐레이션에 대한 비용 및 의존성 감소하면서 모델 학습 가속화
          + 불균형하거나 희박한 데이터 문제 해결을 위한 합성 데이터 생성도 중요한 사용 사례
               o 사기 탐지 또는 고객 세분화와 같은 작업에서 흔함
          + SMOTE와 같은 기술은 소수 계층 인스턴스를 인위적으로 생성하여 데이터 세트의 균형을 맞춤
          + 금융과 같은 산업에서는 GAN을 사용하여 드문 거래 시뮬레이션하여 모델이 엣지 케이스 탐지에 강건하게 하고 전반적인 성능 개선
     * Using GenAI to understand legacy codebases
          + 생성 AI(GenAI)와 대규모 언어 모델(LLM)은 개발자가 코드를 작성하고 이해하는 데 도움
          + 특히 문서화가 부실하거나 오래되었거나 오해의 소지가 있는 레거시 코드베이스에 유용
          + 레거시 코드베이스 이해를 위한 GenAI 사용 기술과 제품이 더욱 발전
          + 특히 메인프레임 현대화를 위한 역설계 작업 지원에 성공적으로 사용
          + 코드베이스에 대한 지식 그래프에서 정보 검색이 수행되는 검색 증강 생성(RAG) 접근 방식이 유망
          + 지식 그래프는 LLM이 텍스트 코드에서 파생할 수 있는 것 이상의 코드베이스에 대한 구조적 정보 보존 가능
          + 자체 설명력과 응집력이 떨어지는 레거시 코드베이스에 특히 도움
          + AI의 작업을 용이하게 할 수 있는 기존 및 AI 생성 문서, 외부 종속성, 비즈니스 도메인 지식 등으로 그래프를 추가로 보강하는 기회도 존재

  Assess

     * AI team assistants
          + AI 코딩 지원 도구는 주로 개별 기여자의 작업 지원 및 향상 맥락에서 논의됨
          + 그러나 소프트웨어 제공은 팀워크였고 앞으로도 그럴 것이므로 10배 엔지니어 대신 10배 팀 창출을 돕는 AI 팀 어시스턴트 만드는 방법 모색 필요
          + 최근 도구 시장 발전으로 이를 현실화하는 데 한 걸음 더 다가섬
               o Unblocked는 팀의 모든 지식 소스를 통합하고 팀원의 도구에 지능적으로 통합하는 플랫폼
               o Atlassian의 Rovo는 가장 널리 사용되는 팀 협업 플랫폼에 AI 도입하여 문서에 대한 새로운 유형의 검색 및 액세스 제공
          + 우리는 지식 증폭 및 팀 실천 지원을 위한 AI의 잠재력을 직접 탐구
               o Haiven 팀 어시스턴트를 오픈소스로 제공하고 요구 사항 분석과 같은 비코딩 작업에 대한 AI 지원으로 학습 시작
     * Dynamic few-shot prompting
          + few-shot 프롬프팅을 기반으로 모델 응답을 안내하기 위해 특정 예제를 프롬프트에 동적으로 포함
          + 이러한 예제의 수와 관련성을 조정하여 컨텍스트 길이와 관련성을 최적화하여 모델 효율성과 성능 개선
          + scikit-llm과 같은 라이브러리는 사용자 쿼리와 일치하는 가장 관련성 높은 예제를 가져오기 위해 최근접 이웃 검색을 사용하여 이 기술 구현
          + 모델의 제한된 컨텍스트 창을 더 잘 활용하고 토큰 소비 감소
          + 오픈소스 SQL 생성기 vanna는 응답 정확도 향상을 위해 동적 few-shot 프롬프팅 활용
     * GraphQL for data products
          + 데이터 제품의 출력 포트로 GraphQL을 사용하여 클라이언트가 제품을 소비하는 기술
          + GraphQL을 사용하여 기본 데이터 복잡성을 추상화하고 클라이언트에 더 일관되고 관리하기 쉬운 인터페이스를 제공하는 통합 API 계층 생성
          + 데이터 제품에 GraphQL 사용 시 소비자가 GraphQL 스키마로 데이터 형식과 관계를 원활하게 발견하고 친숙한 클라이언트 도구 사용 가능
          + 우리 팀은 LLM의 도움으로 빅데이터 통찰력을 탐색하고 발견하기 위한 특정 사용 사례에서 이 기술 탐구 중
               o LLM이 사용자 프롬프트와 참조용 GraphQL 스키마를 기반으로 GraphQL 쿼리 구성
     * LLM-powered autonomous agents
          + Autogen 및 CrewAI와 같은 프레임워크의 등장으로 단일 에이전트 및 정적 다중 에이전트 시스템을 넘어 발전 중
          + 복잡한 활동을 여러 작은 작업으로 분해하고 각 에이전트에 특정 역할 할당하여 수행하는 기술
          + 개발자는 작업 수행을 위한 사전 구성된 도구를 사용하고 에이전트는 서로 대화하며 흐름 조율 가능
          + 아직 초기 개발 단계로 우리 팀은 에이전트가 연속 루프에 빠지거나 제어되지 않는 동작 등의 문제 직면
          + LangGraph와 같은 라이브러리는 흐름을 그래프로 정의할 수 있는 기능으로 에이전트 상호작용에 대한 더 큰 제어력 제공
          + 이 기술 사용 시 타임아웃 및 사람의 감독을 포함한 장애 안전 메커니즘 구현 제안
     * Observability 2.0
          + 전통적이고 이질적인 모니터링 도구에서 단일 데이터 저장소의 구조화되고 높은 카디널리티의 이벤트 데이터를 활용하는 통합 접근 방식으로의 전환
          + 풍부하고 원시적인 이벤트를 상세한 메타데이터와 함께 캡처하여 포괄적 분석을 위한 단일 진실 원천 제공
          + 이벤트를 원시 형태로 저장하여 상관관계를 단순화하고 실시간 및 포렌식 분석을 지원하며 복잡하고 분산된 시스템에 대한 더 깊은 통찰력 가능
          + 고해상도 모니터링과 동적 조사 기능 제공
          + 성능 병목 현상 없이 상세 검사를 위해 높은 카디널리티와 고차원 데이터 캡처에 우선순위
          + 통합 데이터 저장소는 복잡성을 줄이고 시스템 동작에 대한 일관된 보기를 제공하며 관찰 가능성 실천 방식을 소프트웨어 개발 수명 주기와 더 밀접하게 정렬
     * On-device LLM inference
          + 이제 웹 브라우저 및 스마트폰, 노트북과 같은 에지 디바이스에서 대규모 언어 모델(LLM) 실행 가능
          + 클라우드 전송 없이 민감한 데이터를 안전하게 처리하고, 에지 컴퓨팅 및 실시간 이미지/비디오 처리와 같은 작업에 매우 낮은 지연 시간을 제공하며, 로컬에서 계산을 수행하여 비용을 절감하고, 인터넷 연결이 불안정하거나 사용할 수 없는 경우에도 기능 제공
          + 연구 개발이 활발한 분야로 이전에 Apple 실리콘에서 효율적인 기계 학습을 위한 오픈 소스 프레임워크인 MLX 강조
          + Transformers.js 및 Chatty와 같은 새로운 도구 등장
               o Transformers.js는 ONNX Runtime을 사용하여 브라우저에서 변환기 실행 가능(PyTorch, TensorFlow, JAX에서 변환된 모델 지원)
               o Chatty는 WebGPU를 활용하여 LLM을 브라우저에서 기본적이고 비공개로 실행하여 풍부한 기능의 AI 경험 제공
     * Structured output from LLMs
          + 언어 모델의 응답을 정의된 스키마로 제한하는 관행 의미
          + 일반화된 모델에 특정 형식으로 응답하도록 지시하거나 JSON과 같은 ""기본"" 출력을 위해 모델을 파인튜닝하여 달성 가능
          + OpenAI는 이제 구조화된 출력을 지원하여 개발자가 JSON 스키마, pydantic 또는 Zod 객체를 제공하여 모델 응답을 제한할 수 있음
          + 함수 호출, API 상호작용, 외부 통합 등에서 정확성과 형식 준수가 중요한 경우 특히 유용
          + 코드와의 인터페이스 방식 개선뿐 아니라 차트 렌더링을 위한 마크업 생성과 같은 광범위한 사용 사례 지원
          + 모델 출력 내 환각 가능성 감소에도 도움 됨

  Hold

     * Complacency with AI-generated code
          + GitHub Copilot 및 Tabnine과 같은 AI 코딩 어시스턴트가 매우 인기
          + StackOverflow의 2024년 개발자 설문조사에 따르면 ""모든 응답자의 72%가 개발을 위한 AI 도구에 호의적이거나 매우 호의적""
          + 우리도 그 이점을 인식하지만 코드 품질에 미치는 중장기적 영향에 대해 경계하고 개발자에게 AI 생성 코드에 대한 자족에 주의 당부
          + 몇 번의 긍정적인 경험 후 AI 제안을 검토할 때 경계심을 늦추기 쉬움
          + GitClear의 연구에 따르면 더 빠르게 성장하는 코드베이스 추세를 보여주며, 이는 더 큰 풀 요청과 일치한다고 의심
          + GitHub의 이 연구는 언급된 풀 요청 병합률 15% 증가가 실제로 좋은 일인지 아니면 사람들이 AI 결과를 너무 많이 신뢰하여 더 큰 풀 요청을 더 빨리 병합하는 것인지 의문
          + 우리는 여전히 1년 전에 제공한 기본 ""시작하기"" 조언을 사용 중이며, 자동화 편향, 매몰 비용 오류, 고정 관념, 검토 피로에 주의해야 함
          + 또한 프로그래머가 AI를 사용하고 신뢰하지 말아야 할 곳과 시기에 대한 좋은 정신적 프레임워크를 개발하는 것이 좋음
     * Enterprise-wide integration test environments
          + 일반적이고 낭비적인 관행으로 모든 것을 느리게 만듦
          + 복제하기 어렵고 개발의 병목 현상이 되는 소중한 자원이 되기 마련
          + 환경 간 불가피한 데이터 불일치 및 구성 오버헤드로 인해 거짓 보안 감각 제공
          + 대안(임시 환경 또는 여러 온프레미스 테스트 환경)에 대한 일반적인 반대 이유는 아이러니하게도 비용
          + 그러나 기업 전체 통합 테스트 환경으로 인한 지연 비용을 고려하지 않음
               o 개발 팀이 다른 팀이 완료되거나 종속 시스템의 새 버전이 배포되기를 기다리는 동안 발생
          + 대신 팀은 임시 환경을 사용하고 실제 복제본 대신 가짜 스텁을 사용하여 개발 팀이 소유한 테스트 세트를 저렴하게 시작하고 폐기해야 함
          + 이 대안을 지원하는 다른 기술은 계약 테스트, 배포와 릴리스 분리, 평균 복구 시간 및 프로덕션 테스트에 중점을 둠
     * LLM bans
          + 직장에서 포괄적인 LLM 금지를 제정하는 대신 승인된 AI 도구 세트에 대한 액세스 제공에 중점
          + 금지는 직원들이 승인되지 않고 잠재적으로 안전하지 않은 해결 방법을 찾도록 할 뿐
          + 개인용 컴퓨터 초기처럼 사람들은 장벽에 관계없이 효과적이라고 느끼는 도구를 사용하여 작업 수행
          + 안전하고 보증된 대안을 제공하지 않으면 기업은 직원들이 승인되지 않은 LLM을 사용하여 지적 재산권, 데이터 유출 및 책임 위험 초래
          + 대신 안전하고 기업에서 승인한 LLM 또는 AI 도구를 제공하면 안전성과 생산성 모두 보장
          + 잘 관리되는 접근 방식을 통해 조직은 데이터 개인 정보 보호, 보안, 규정 준수 및 비용 문제를 관리하면서 직원에게 LLM이 제공하는 기능 부여 가능
          + 가장 좋은 경우 AI 도구에 대한 잘 관리된 액세스는 직장에서 AI를 사용하는 최선의 방법에 대한 조직 학습 가속화 가능
     * Replacing pair programming with AI
          + 코딩 어시스턴트에 대해 이야기할 때 페어 프로그래밍 주제는 불가피하게 나옴
          + 우리 직업은 페어 프로그래밍과 사랑과 증오의 관계
               o 일부는 맹세하고 다른 이들은 견딜 수 없어함
          + 이제 코딩 어시스턴트는 인간이 다른 인간 대신 AI와 짝을 이루고 팀을 위해 동일한 결과를 얻을 수 있는지에 대한 의문 제기
          + GitHub Copilot은 심지어 자신을 ""당신의 AI 페어 프로그래머""라고 부름
          + 코딩 어시스턴트가 페어 프로그래밍의 일부 이점을 제공할 수 있다고 생각하지만 AI로 페어 프로그래밍을 완전히 대체하는 것은 권장하지 않음
          + 코딩 어시스턴트를 페어 프로그래머로 간주하면 페어링의 주요 이점 중 하나인 개별 기여자가 아닌 팀을 더 나은 방향으로 이끄는 것을 무시하게 됨
          + 코딩 어시스턴트는 막힌 부분을 해결하고, 새로운 기술을 배우고, 온보딩하거나 전술적 작업을 더 빠르게 수행하여 전략적 설계에 집중할 수 있도록 하는 데 도움이 될 수 있음
          + 그러나 진행 중인 작업을 낮게 유지하고, 핸드오프와 재학습을 줄이며, 지속적인 통합을 가능하게 하고, 집단 코드 소유권을 개선하는 등의 팀 협업 이점에는 도움이 되지 않음

[Platforms]

  Adopt : 없음

  Trial

     * Databricks Unity Catalog
          + Lakehouse의 파일, 테이블, ML 모델과 같은 자산을 위한 데이터 거버넌스 솔루션임
          + 외부 저장소나 Databricks 관리 하의 데이터를 관리하고 쿼리하는데 사용할 수 있는 관리형 오픈소스 솔루션임
          + 거버넌스, 메타스토어 관리, 데이터 검색을 통합 지원하여 여러 도구 관리 필요성을 줄여주는 장점이 있음
          + Databricks 관리형 Unity Catalog의 자동 재해 복구 부재가 단점으로 확인됨
               o 팀에서 백업 및 복구 기능을 직접 구성해야 했음
          + 중앙 집중식 솔루션이지만 개별 팀이 자체 자산을 관리할 수 있도록 권한 위임이 가능함
     * FastChat
          + 대규모 언어 모델의 학습, 서빙, 평가를 위한 오픈 플랫폼임
          + 여러 모델(Llama 3.1, Mistral 7B, Llama-SQL 등)을 OpenAI API 형식으로 일관되게 호스팅 가능함
          + 컨트롤러-워커 아키텍처를 사용하여 다양한 모델을 여러 워커에서 호스팅함
          + vLLM, LiteLLM, MLX 등 다양한 워커 유형을 지원함
          + 사용 사례에 따라 다른 유형의 FastChat 모델 워커를 생성하고 확장 가능함
               o 개발자 IDE의 코드 제안은 낮은 지연 시간이 필요하여 여러 워커로 확장
               o Text-to-SQL은 수요가 낮아 다중 워커가 불필요함
          + A/B 테스트에 활용 가능함
               o 동일 모델에 다른 하이퍼파라미터 값을 설정하여 최적값 식별
               o 라이브 서비스의 모델 전환 시 무중단 마이그레이션 검증 가능
     * GCP Vertex AI Agent Builder
          + 자연어 또는 코드 우선 접근 방식으로 AI 에이전트를 만들 수 있는 유연한 플랫폼임
          + 서드파티 커넥터를 통해 기업 데이터와 원활하게 통합됨
          + AI 에이전트 구축, 프로토타입 제작, 배포에 필요한 모든 도구를 제공함
          + 개발자가 최소한의 설정으로 에이전트를 신속하게 프로토타입하고 복잡한 데이터 작업을 처리할 수 있음
          + 구조화/비구조화 데이터를 효율적으로 관리하는 지식 기반 또는 자동화된 지원 시스템 구축에 유용함
     * Langfuse
          + LLM 기반 애플리케이션의 관찰, 모니터링, 평가를 위한 도구임
          + 트레이싱, 분석, 평가 기능을 통해 완료 성능과 정확도를 분석할 수 있음
          + 비용과 지연 시간을 관리하고 프로덕션 사용 패턴을 이해하여 데이터 기반 개선이 가능함
          + 요청-응답 흐름과 중간 단계의 완전한 추적성을 제공하는 계측 데이터를 활용함
          + RAG 및 LLM 기반 자율 에이전트와 함께 사용 가능함
          + 낮은 점수의 대화 추적을 분석하여 아키텍처의 개선이 필요한 부분을 식별할 수 있음
     * Qdrant
          + Rust로 작성된 오픈소스 벡터 유사도 검색 엔진 및 데이터베이스임
          + 다양한 텍스트 및 멀티모달 밀집 벡터 임베딩 모델을 지원함
          + MiniLM-v6 및 BGE와 같은 오픈소스 임베딩을 여러 제품 지식 기반에 활용 가능함
          + 다중 테넌시를 지원하는 엔터프라이즈 벡터 스토어로 사용됨
          + 벡터 임베딩을 별도 컬렉션으로 저장하여 각 제품의 지식 기반을 격리함
          + 사용자 액세스 정책은 애플리케이션 계층에서 관리됨
     * Vespa
          + 오픈소스 검색 엔진 및 빅데이터 처리 플랫폼임
          + 낮은 지연 시간과 높은 처리량이 필요한 애플리케이션에 적합함
          + 여러 검색 기술을 사용한 하이브리드 검색 구현이 가능함
          + 다양한 메타데이터의 효율적인 필터링과 정렬을 지원함
          + 다단계 순위 지정 구현이 가능함
          + 문서당 여러 벡터를 중복 없이 인덱싱할 수 있음
          + 여러 인덱싱된 필드에서 한 번에 데이터 검색이 가능함

  Assess

     * Azure AI Search
          + 지식 기반 등의 애플리케이션을 위한 구조화/비구조화 데이터 처리용 클라우드 기반 검색 서비스임
          + 키워드, 벡터, 하이브리드 검색 등 다양한 유형의 검색을 지원함
          + PDF, DOC, PPT 등 일반적인 비구조화 데이터 형식을 자동으로 수집하여 검색 가능한 콘텐츠 생성이 가능함
          + Azure OpenAI 등 다른 Azure 서비스와 통합되어 최소한의 수동 통합으로 애플리케이션 구축이 가능함
          + Azure 환경에서 호스팅되는 프로젝트에 적합하며 안정적인 성능을 보임
          + 사용자 정의 스킬을 통해 특정 데이터 처리 단계를 정의할 수 있음
     * Databricks Delta Live Tables
          + 신뢰할 수 있고 유지보수가 용이하며 테스트 가능한 데이터 처리 파이프라인 구축을 위한 선언적 프레임워크임
          + 선언적 접근 방식으로 데이터 변환을 정의하고 기반 인프라와 데이터 흐름을 자동으로 관리함
          + 강력한 모니터링 기능을 제공하며 전체 데이터 파이프라인의 DAG를 시각적으로 표현함
          + 데이터 계보와 종속성 추적에 유용함
          + Databricks 생태계와 깊이 통합되어 있어 인터페이스 사용자 정의에 제약이 있을 수 있음
     * Elastisys Compliant Kubernetes
          + 의료, 금융, 정부와 같은 고도로 규제된 산업을 위한 특수 Kubernetes 배포판임
          + 자동화된 보안 프로세스를 제공함
          + 멀티클라우드 및 온프레미스 지원이 가능함
          + 제로 트러스트 보안 아키텍처 기반으로 구축됨
          + GDPR, HIPAA 등의 법률과 ISO27001 같은 통제 준수가 내장되어 있음
     * FoundationDB
          + 2015년 Apple이 인수하고 2018년 오픈소스화된 멀티모델 데이터베이스임
          + 엄격한 직렬화 가능 트랜잭션을 제공하는 분산 키-값 저장소가 핵심임
          + 쓰기 핫스팟 방지를 위한 스마트 데이터 분산, 새로운 스토리지 엔진 등 주요 개선이 이루어짐
          + 언번들 아키텍처를 통해 클러스터의 다양한 부분을 독립적으로 확장 가능함
          + 광범위한 기능에도 불구하고 대규모 클러스터 운영이 용이함
     * Golem
          + 내구성 있는 컴퓨팅을 위한 명시적 상태 머신 아키텍처를 사용하는 분산 컴퓨팅 플랫폼임
          + 장기 실행 마이크로서비스 사가나 AI 에이전트 오케스트레이션의 워크플로우에 적합함
          + WebAssembly 컴포넌트를 지원되는 모든 언어로 작성 가능함
          + 결정론적이며 빠른 시작 시간을 지원함
     * Iggy
          + Rust로 작성된 영구 메시지 스트리밍 플랫폼임
          + 다중 스트림, 토픽, 파티션을 지원함
          + 최대 한 번 전달, 메시지 만료, QUIC/TCP/HTTP 프로토콜의 TLS 지원 등을 제공함
          + 단일 서버로 높은 읽기/쓰기 처리량을 달성함
          + 클러스터링과 io_uring 지원이 예정되어 있어 Kafka의 대안이 될 수 있음
     * Iroh
          + IPFS를 발전시킨 분산 파일 저장 및 콘텐츠 전송 시스템임
          + 최대 블록 크기 제한이 없고 범위 기반 세트 조정을 통한 데이터 동기화 메커니즘을 제공함
          + WASM을 통한 브라우저 지원이 로드맵에 포함되어 있음
          + iroh.network를 통해 클라우드 서비스 이용이 가능함
          + 다양한 언어의 SDK를 제공하며 IPFS보다 사용자 친화적임
     * Large vision model (LVM) platforms
          + 비디오 스트림과 이미지의 세그먼트화, 합성, 재구성, 분석이 가능한 대규모 비전 모델 플랫폼임
          + 확산 모델이나 표준 CNN과 결합하여 사용 가능함
          + 프로덕션 환경에서의 적용과 관련된 과제들이 존재함
               o 훈련 데이터 수집, 객체 세그먼트화 및 라벨링, 모델 미세 조정 등
          + V7, Nvidia Deepstream SDK, Roboflow 등의 도구가 이러한 과제 해결을 위해 등장함
          + Deepstream과 Roboflow는 비디오 스트림 관리를 위한 GUI와 API를 통합 제공함
     * OpenBCI Galea
          + 뇌-컴퓨터 인터페이스(BCI)를 위한 비침습적 기술 플랫폼임
          + EEG 등의 전기생리학적 신호를 사용하여 뇌 이식보다 위험이 낮은 대안을 제공함
          + VR 헤드셋 기능과 BCI를 결합한 OpenBCI의 최신 제품임
          + 시간 동기화된 생리학적 데이터 스트림과 공간 위치 센서, 시선 추적을 제공함
          + Unity나 Unreal에서 센서 데이터 사용이 가능함
          + 오픈소스 플랫폼으로 제공되어 연구자들의 혁신을 지원함
     * PGLite
          + PostgreSQL 데이터베이스의 WASM 빌드임
          + Linux 가상 머신 없이 웹 브라우저에서 직접 실행 가능함
          + 메모리 내 임시 데이터베이스 생성 또는 indexedDB를 통한 디스크 지속성 제공
          + Electric과 함께 PostgreSQL 기반의 반응형 로컬 퍼스트 애플리케이션 구축이 가능함
     * SpinKube
          + Kubernetes 상의 WebAssembly를 위한 오픈소스 서버리스 런타임임
          + WebAssembly의 밀리초 단위 시작 시간으로 온디맨드 워크로드에 더 동적이고 유연한 서버리스 솔루션 제공
          + WebAssembly 기반 워크로드의 개발과 배포를 단순화함
     * Unblocked
          + SDLC 자산 및 아티팩트 검색 도구임
          + ALM 및 협업 도구와 통합되어 코드베이스와 관련 리소스의 이해를 돕음
          + 코드에 대한 즉각적이고 관련성 높은 컨텍스트를 제공하여 복잡한 시스템의 탐색과 이해를 용이하게 함
          + 엔지니어링 팀이 작업 관련 논의, 자산, 문서에 안전하게 접근할 수 있음
          + 경험 많은 팀원들의 지식을 캡처하고 공유하여 모든 구성원이 활용할 수 있게 함

  Hold : 없음

[Tools]

  Adopt

     * Bruno
          + 브루노는 API 테스트, 개발 및 디버깅을 위한 포스트맨과 인섬니아의 오픈 소스 데스크톱 대안
          + 간단한 오프라인 전용 설계로 우수한 협업, 개인 정보 보호 및 보안을 제공하는 것을 목표로 함
          + 컬렉션은 사용자 지정 일반 텍스트 마크업 언어인 브루 랭으로 작성되어 파일 시스템에 직접 저장되며, Git 또는 선택한 버전 제어 도구와 공유하여 협업할 수 있음
          + 데스크톱 앱과 CLI 도구로 사용 가능하며, 공식 VS Code 확장 기능을 제공하고 추가 IDE 지원을 계획하고 있음
          + 여러 씽크웍스 팀의 기본 선택이 되었지만, VPN 및 프록시 환경에서 작업할 때 예기치 않게 실패한 요청이 보고되었기 때문에 주의해야 함
     * K9s
          + K9s는 더 자세한 그래프와 보기를 통합하여 시각화 기능을 개선했음
          + 이제 로그와 메트릭을 더 잘 표현하고 사용자 정의 리소스(CRD)를 더 유연하게 표시함
          + 포드에 대한 작업이 확장되었으며, 디버깅 도구(예: kubectl debug)와의 통합이 강화되고 다중 클러스터 환경에 대한 지원이 향상됨
          + CRD에 대한 지원이 크게 개선되어 이제 이러한 리소스를 더 잘 탐색하고 관리할 수 있으며 사용자 정의 리소스와 상호 작용이 더 원활해짐
          + 단축키 패널도 개선되어 kubectl에 익숙하지 않은 개발자가 더 쉽게 접근할 수 있게 되었음
          + K9s는 초기에 주로 데브옵스 팀에 초점을 맞추었기 때문에 이는 중요한 개선임
     * SOPS
          + SOPS는 KMS로 암호화하는 다양한 파일 형식을 지원하는 암호화된 파일 편집기임
          + 비밀 관리에 있어서 우리의 조언은 항상 소스 코드에서 분리하는 것이었음
          + 그러나 인프라 코드의 정신으로 완전 자동화와 시드 비밀을 관리, 시딩 및 순환하기 위한 몇 가지 수동 단계(금고와 같은 도구 사용) 사이에서 선택해야 할 때 팀은 종종 절충안에 직면함
          + 예를 들어, 우리 팀은 인프라 부트스트랩을 위한 시드 자격 증명을 관리하기 위해 SOPS를 사용함
          + 그러나 일부 상황에서는 레거시 코드 저장소에서 비밀을 제거할 수 없음
          + 이러한 경우 SOPS를 사용하여 텍스트 파일의 비밀을 암호화함
          + SOPS는 암호화 키의 소스로 AWS 및 GCP 키 관리 서비스(KMS) 또는 Azure Key Vault와 같은 클라우드 관리형 키 저장소와 통합됨
          + 또한 크로스 플랫폼에서 작동하며 PGP 키를 지원함
          + 코드 저장소에서 비밀을 관리해야 할 때 우리 팀 중 여러 팀이 기본적으로 SOPS를 사용함
     * Visual regression testing tools
          + 우리는 이전에 시각적 회귀 테스트 도구를 강조했으며 알고리즘이 원시 픽셀 수준 비교에서 정교한 패턴 매칭 및 광학 문자 인식(OCR)으로 진화하는 것을 관찰했음
          + 초기 시각적 회귀 테스트 도구는 많은 거짓 양성을 생성했으며 인터페이스가 안정화되었을 때 개발 후기 단계에서만 유용했음
          + BackstopJS는 셀렉터와 뷰포트를 구성하여 페이지의 특정 요소에 대한 시각적 테스트를 정확히 수행함으로써 이 문제를 피함
          + 그러나 머신 러닝은 시각적 요소가 이동했거나 동적 콘텐츠를 포함하는 경우에도 시각적 요소를 더 정확하게 감지하고 비교하는 것을 더 쉽게 만들었음
          + 이러한 도구는 점점 더 유용해졌으며 AI와 머신 러닝의 최신 개발을 활용하기에 좋은 위치에 있음
          + Applitools와 Percy와 같은 여러 상용 도구는 이제 시각적 회귀 테스트에서 AI를 사용한다고 주장함
          + 우리 팀 중 하나는 Applitools Eyes를 광범위하게 사용해 왔으며 그 결과에 만족하고 있음
          + 시각적 회귀 테스트는 잘 작성된 종단 간 기능 테스트를 대체할 수는 없지만 테스트 도구 상자에 귀중한 추가 사항임
          + 우리는 포괄적인 UI 테스트 전략의 한 요소로 안전한 기본 옵션이 되었기 때문에 이를 채택하고 있음
     * Wiz
          + Wiz는 많은 프로젝트에서 클라우드 보안 플랫폼으로 선택되었음
          + 우리 팀은 변경 사항을 지속적으로 검사하여 유사한 도구보다 위험과 위협을 더 빨리 탐지할 수 있다는 점을 높이 평가함
          + Wiz는 라이브 환경(컨테이너 이미지, 인프라 코드)에 배포되지 않은 아티팩트와 라이브 워크로드(컨테이너, VM 및 클라우드 서비스) 모두에서 잘못된 구성, 취약성 및 유출된 비밀을 탐지하고 경고할 수 있음
          + 우리는 또한 개발 팀과 리더십 모두를 위한 강력한 보고 기능을 높이 평가함
          + 이 분석은 취약성이 특정 서비스에 어떤 영향을 미칠 수 있는지 이해하여 해당 상황에서 문제를 해결할 수 있도록 도와줌

  Trial

     * AWS Control Tower
          + AWS Control Tower는 다중 팀 환경에서 AWS 계정을 관리하기 위한 최선의 선택으로 남아있음
          + 새로운 랜딩 존에 자동으로 적용될 보안 및 규정 준수 제어를 사전 구성하는 편리한 메커니즘을 제공함
          + 이는 ""변경 시점의 규정 준수""의 예로, 새로운 인프라가 생성될 때마다 제어가 적용되고 검증되어 나중에 수동 규정 준수 검사가 필요하지 않음
          + AWS Control Tower Account Factory for Terraform(AFT)은 마지막 볼륨 이후로 계속 진화해 왔으며 이제 더 많은 AWS 리전에서 사용 가능함
          + AFT를 사용하면 인프라 코드 파이프라인으로 Control Tower 계정을 프로비저닝할 수 있음
          + AFT는 GitHub Actions와 같은 외부 도구와 안전하고 안전하게 통합하기 위해 웹훅을 보내거나 특정 작업을 수행하도록 사용자 정의할 수 있다는 점이 마음에 듦
          + 우리 팀은 AWS Control Tower를 사용하여 계정을 관리한 결과 큰 성과를 거두었지만, 개선의 기회가 있을 때 AWS가 프로젝트에 대한 커뮤니티 기여를 수용하기를 바람
     * CCMenu
          + 지속적 통합을 실천하는 팀에게는 중앙 빌드의 상태를 지속적 통합(CI) 시스템에서 인식하는 것이 중요함
          + 팬데믹 이전에는 팀룸의 대형 TV 화면의 대시보드가 이 정보를 한눈에 제공했음
          + 원격 근무가 지속됨에 따라 개별 개발자 워크스테이션에서 작동하는 솔루션이 필요함
          + Mac의 경우 그 틈새를 CCMenu라는 Thoughtworker가 작성한 작은 앱이 커버함
          + 원래 CruiseControl의 일부였던 이 앱은 Jenkins와 TeamCity를 포함하여 cctray 형식으로 정보를 제공할 수 있는 모든 서버에서 작동함
          + 최근 다시 작성되면서 GitHub Actions에 대한 지원이 추가되었고 더 많은 CI 서버 및 인증 스타일과의 더 깊은 통합을 위한 길이 열렸음
     * ClickHouse
          + ClickHouse는 실시간 분석을 위한 오픈 소스 컬럼형 온라인 분석 처리(OLAP) 데이터베이스임
          + 2009년 실험 프로젝트로 시작되어 성능이 뛰어나고 선형적으로 확장 가능한 분석 데이터베이스로 성숙했음
          + 효율적인 쿼리 처리 엔진과 데이터 압축 기능을 통해 사전 집계 없이 대화형 쿼리를 실행하는 데 적합함
          + ClickHouse는 OpenTelemetry 데이터를 저장하기에 좋은 선택임
          + Jaeger와의 통합을 통해 대량의 추적 데이터를 저장하고 효율적으로 분석할 수 있음
     * Devbox
          + 개발 도구의 발전에도 불구하고 많은 팀에게 일관된 로컬 개발 환경을 유지하는 것은 여전히 도전 과제임
          + 새로운 엔지니어를 온보딩하려면 종종 다양한 시스템에서 예측할 수 없이 실패할 수 있는 명령이나 사용자 지정 스크립트를 실행해야 하며 이는 불일치를 초래할 수 있음
          + 이 문제를 해결하기 위해 우리 팀은 점점 더 Devbox에 의존하고 있음
          + Devbox는 가상 머신이나 컨테이너를 사용하지 않고 Nix 패키지 관리자를 활용하여 재현 가능하고 프로젝트별 로컬 개발 환경을 만들기 위한 접근 가능한 인터페이스를 제공하는 명령줄 도구임
          + 코드베이스에 대해 한 번 구성되면 새 장치에서 정의된 환경을 재현하는 데 하나의 CLI 명령(devbox shell)만 있으면 되므로 온보딩 워크플로를 크게 간소화함
          + Devbox는 VSCode와 통합하기 위해 셸 후크, 사용자 지정 스크립트 및 devcontainer.json 생성을 지원함
     * Difftastic
          + Difftastic은 구문을 인식하는 방식으로 코드 파일 간의 차이점을 강조 표시하는 도구임
          + 이는 Unix diff 명령과 같은 텍스트 차이 도구와는 상당히 다름
          + 예를 들어 Difftastic은 Java나 TypeScript와 같이 세미콜론으로 구분된 언어에서 긴 문장을 나누기 위해 삽입된 줄바꿈을 무시함
          + 이 도구는 프로그램의 구문에 영향을 미치는 변경 사항만 강조 표시함
          + 이를 위해 먼저 파일을 추상 구문 트리로 구문 분석한 다음 다익스트라 알고리즘을 사용하여 트리 간의 거리를 계산함
          + 우리는 큰 코드베이스를 검토할 때 변경 사항을 이해하는 데 특히 Difftastic이 유용하다는 것을 발견했음
          + Difftastic은 파서를 사용할 수 있는 모든 프로그래밍 언어에 사용할 수 있으며 기본적으로 50개 이상의 프로그래밍 언어와 CSS 및 HTML과 같은 구조화된 텍스트 형식을 지원함
          + 이것은 새로운 도구는 아니지만 인간이 개입하는 루프 검토가 점점 더 중요해지는 LLM 코딩 어시스턴트 시대에 주목할 만한 가치가 있다고 생각함
     * LinearB
          + 소프트웨어 엔지니어링 인텔리전스 플랫폼인 LinearB는 엔지니어링 리더에게 지속적인 개선을 지원하기 위한 데이터 기반 통찰력을 제공함
          + 벤치마킹, 워크플로 자동화, 개발자 경험 및 생산성 향상을 위한 목표 투자와 같은 주요 영역을 정렬함
          + LinearB를 사용한 경험은 엔지니어링 팀 내에서 개선과 효율성의 문화를 조성하는 능력을 강조함
          + 우리 팀은 이 플랫폼을 사용하여 핵심 엔지니어링 메트릭을 추적하고 개선이 필요한 영역을 식별하며 증거 기반 조치를 구현했음
          + 이러한 기능은 LinearB의 핵심 가치 제안인 벤치마킹, 메트릭 수집 자동화, 데이터 기반 개선 활성화와 잘 맞음
          + LinearB는 소스 코드, 애플리케이션 수명 주기, CI/CD 및 커뮤니케이션 도구와 통합되며 사전 구성된 엔지니어링 메트릭과 사용자 정의 엔지니어링 메트릭을 사용하여 개발자 경험, 생산성 및 팀 성과에 대한 포괄적인 정량적 통찰력을 제공함
          + DORA 옹호자로서 우리는 LinearB가 이러한 특정 메트릭을 강조하고 효율성 개선에 필수적인 소프트웨어 제공 성과의 주요 측면을 측정하는 능력을 높이 평가함
          + 역사적으로 팀은 DORA 특정 메트릭을 수집하는 데 어려움을 겪었으며 종종 복잡한 사용자 정의 대시보드나 수동 프로세스에 의존했음
          + LinearB는 이러한 메트릭의 추적을 자동화하고 개발자 경험, 생산성 및 예측 가능성에 대한 사전 예방적 의사 결정을 지원하는 실시간 데이터를 제공하는 매력적인 솔루션을 계속 제공하고 있음
     * pgvector
          + pgvector는 PostgreSQL용 오픈 소스 벡터 유사성 검색 확장으로, 단일 잘 설정된 데이터베이스에서 구조화된 데이터와 함께 벡터를 저장할 수 있음
          + 전문 벡터 데이터베이스의 일부 고급 기능은 부족하지만 ACID 준수, 시점 복구 및 PostgreSQL의 기타 강력한 기능의 이점을 누림
          + 생성형 AI 기반 애플리케이션의 증가와 함께 pgvector가 효과적으로 해결하는 유사성을 위해 임베딩 벡터를 저장하고 효율적으로 검색하는 패턴이 증가하고 있음을 확인함
          + pgvector의 프로덕션 환경에서의 사용 증가, 특히 관리형 PostgreSQL을 제공하는 클라우드 공급자를 이미 사용 중인 팀에서의 사용 증가와 별도의 벡터 저장소를 필요로 하지 않고 일반적인 벡터 검색 요구 사항을 충족하는 입증된 능력을 감안할 때 우리는 pgvector의 잠재력에 자신감을 가지고 있음
          + 우리 팀은 구조화된 데이터와 비정형 데이터를 비교하는 프로젝트에서 이를 유용하게 활용했으며, 이는 더 광범위한 채택 가능성을 보여줌
          + 따라서 우리는 pgvector를 시험 단계로 옮기고 있음
     * Snapcraft build tool
          + Snapcraft는 Ubuntu, 기타 Linux 배포판 및 macOS에서 스냅이라고 하는 자체 포함된 애플리케이션을 빌드하고 패키징하기 위한 오픈 소스 명령줄 도구임
          + 스냅은 Linux 컴퓨터, 가상 환경 및 차량 온보드 컴퓨터 시스템을 포함한 하드웨어 플랫폼 전반에 걸쳐 쉽게 배포하고 유지 관리할 수 있음
          + Snapcraft는 스냅 게시를 위한 공개 앱 스토어를 제공하지만, 우리 팀은 빌드 도구를 사용하여 자율 주행 시스템을 스냅으로 패키징하되 공개 앱 스토어에 게시하지 않음
          + 이를 통해 내장형 소프트웨어 시스템을 로컬에서 빌드, 테스트 및 디버그하는 동시에 내부 아티팩트 리포지토리에 게시할 수 있음
     * Spinnaker
          + Spinnaker는 Netflix에서 만든 오픈 소스 지속적 제공 플랫폼임
          + 1급 기능으로 클러스터 관리와 baked 이미지를 클라우드에 배포하는 기능을 구현함
          + 우리는 마이크로서비스를 배포하기 위한 Spinnaker의 독선적인 접근 방식을 좋아함
          + 이전 버전에서는 코드로 파이프라인을 구성할 수 없다는 점을 지적했지만, spin CLI의 추가로 이 문제가 해결되었음
          + 우리는 단순한 CD 시나리오에는 Spinnaker를 권장하지 않지만, 복잡한 상황에서 동등하게 복잡한 배포 파이프라인과 함께 많은 사람들의 선택 도구가 되었음
     * TypeScript OpenAPI
          + TypeScript OpenAPI(또는 tsoa)는 코드에서 OpenAPI 사양을 생성하기 위한 Swagger의 대안임
          + 코드 우선이며, TypeScript 컨트롤러와 모델을 단일 진실 출처로 사용하고, TypeScript에서 OpenAPI 도구를 사용할 때 더 복잡한 파일과 구성이 필요한 대신 TypeScript 주석이나 데코레이터를 사용함
          + 2.0과 3.0 API 사양을 모두 생성하며 Express, Hapi 및 Koa용 경로를 생성할 수 있음
          + TypeScript로 API를 작성하는 경우 이 프로젝트를 살펴볼 가치가 있음
     * Unleash
          + 가능한 한 가장 간단한 기능 토글을 사용하는 것이 우리가 권장하는 접근 방식으로 남아 있지만, 팀 규모 확장과 더 빠른 개발로 인해 수작업으로 제작된 토글 관리가 더 복잡해짐
          + Unleash는 이러한 복잡성을 해결하고 CI/CD를 가능하게 하기 위해 우리 팀에서 널리 사용되는 옵션임
          + 서비스로 사용하거나 자체 호스팅할 수 있음
          + 여러 언어로 SDK를 제공하며 개발자 경험과 관리를 위한 친숙한 UI가 있음
          + OpenFeature 사양에 대한 공식 지원은 아직 없지만 Go와 Java용 커뮤니티 유지 관리 제공업체를 찾을 수 있음
          + Unleash는 단순한 기능 토글뿐만 아니라 세분화 및 점진적 출시에도 사용할 수 있어 규모에 맞는 기능 관리에 적합한 옵션임

  Assess

     * Astronomer Cosmos
          + Astronomer Cosmos는 Airflow에서 dbt 코어 워크플로에 대한 더 많은 기본 지원을 제공하도록 설계된 Airflow 플러그인임
          + 플러그인이 설치되면 DbtDag가 dbt 워크플로를 래핑할 때 dbt 노드를 Airflow 작업/작업 그룹으로 변환하여 엔지니어가 Airflow UI에서 직접 dbt 종속성 그래프와 실행 진행 상황을 시각화할 수 있음
          + 또한 dbt 프로필 대신 Airflow 연결을 사용할 수 있어 구성 확산을 줄일 수 있음
          + Airflow에서 dbt 작업을 더 원활하게 만들 수 있는 잠재력을 위해 이 도구를 실험하고 있음
     * ColPali
          + ColPali는 비전 언어 모델을 사용하여 PDF 문서를 검색하기 위한 새로운 도구로, 이미지, 다이어그램 및 테이블이 포함된 멀티미디어 문서에서 데이터를 추출할 수 있는 강력한 검색 증강 생성(RAG) 애플리케이션 구축의 어려움을 해결함
          + 텍스트 기반 임베딩이나 광학 문자 인식(OCR) 기술에 의존하는 기존 방법과 달리 ColPali는 전체 PDF 페이지를 처리하며, 텍스트와 시각적 콘텐츠를 모두 고려하는 임베딩을 생성하기 위해 시각적 변환기를 활용함
          + 이러한 전체적인 접근 방식은 더 나은 검색뿐만 아니라 특정 문서가 검색되는 이유에 대한 추론을 가능하게 하며 데이터가 풍부한 PDF에 대한 RAG 성능을 크게 향상시킴
          + 우리는 ColPali를 여러 클라이언트와 테스트했으며 유망한 결과를 보여주었지만 이 기술은 여전히 초기 단계에 있음
          + 특히 복잡한 시각적 문서 데이터를 가진 조직에서는 평가할 가치가 있음
     * Cursor
          + AI 지원 프로그래밍 도구 경쟁이 계속되고 있으며 가장 눈에 띄는 것은 Cursor임
          + Cursor는 코딩 워크플로에 AI를 깊이 통합하여 개발자 생산성을 높이도록 설계된 AI 우선 코드 편집기임
          + 우리는 이전 Radar 평가에서 Cursor에 주목했지만 최근 Cursor의 지속적인 개선이 질적인 변화를 가져왔다는 것은 분명함
          + 우리의 사용에서 Cursor는 기존 코드베이스를 기반으로 강력한 맥락 추론 기능을 보여주었음
          + GitHub Copilot와 같은 다른 AI 코드 도구가 코드 조각을 생성하고 협업하는 경향이 있는 반면, Cursor의 여러 줄 및 여러 파일 편집 작업은 이를 돋보이게 만듦
          + Cursor는 VSCode에서 포크되어 이를 기반으로 개발되었으며 개발자의 직관에 부합하는 빠르고 직관적인 상호 작용 방법을 제공함
          + 강력한 작업은 ctrl/cmd+K 및 ctrl/cmd+L로 완료할 수 있음
          + Cursor는 개발자 상호 작용 및 코드베이스 이해와 관련하여 AI 프로그래밍 도구의 새로운 경쟁을 선도하고 있음
     * Data Mesh Manager
          + Data Mesh Manager는 일반적인 데이터 메시 플랫폼의 메타데이터 계층을 제공함
          + 특히 OpenContract 이니셔티브를 사용하여 데이터 제품의 정의 및 데이터 계약 사양에 중점을 두며 연결된 DataContract CLI를 사용하여 빌드 파이프라인에 통합할 수 있음
          + 또한 이 애플리케이션은 데이터 제품과 해당 메타데이터를 검색하고 탐색하기 위한 데이터 카탈로그를 제공하며 데이터 품질 메트릭 정의 및 데이터 품질 규칙 관리를 포함한 연합 거버넌스를 허용함
          + 이 공간에서 처음으로 등장한 기본 도구 중 하나로, 기존 플랫폼을 데이터 메시 패러다임에 맞게 개조하려는 것이 아님
     * GitButler
          + Git의 명령줄 인터페이스는 강력하고 유용하지만 여러 브랜치를 관리하고 그 안에서 커밋을 스테이징할 때 매우 복잡하기로 악명 높음
          + GitButler는 이 프로세스를 단순화하는 것을 목표로 하는 그래픽 인터페이스를 제공하는 Git 클라이언트임
          + Git와 독립적으로 커밋되지 않은 파일 변경 사항을 추적한 다음 해당 변경 사항을 가상 브랜치에 스테이징하여 이를 수행함
          + 이는 애초에 존재해서는 안 되는 문제에 대한 해결책이라고 주장할 수 있음. 작은 변경을 자주 수행하고 트렁크에 푸시하면 여러 브랜치가 필요하지 않음
          + 그러나 워크플로에 풀 요청이 포함되는 경우, 특히 PR을 병합하기 전에 긴 검토 주기가 있는 경우 브랜칭 구조가 복잡해질 수 있음
          + 이를 해결하기 위해 GitButler는 GitHub와 통합되어 변경 사항을 선택적으로 풀 요청으로 그룹화하고 도구에서 직접 발행할 수 있음
          + GitButler는 PR 프로세스에 내재된 복잡성을 관리하기 위한 성장하는 블립 범주에 또 다른 항목임
     * JetBrains AI Assistant
          + JetBrains AI Assistant는 코드 완성, 테스트 생성 및 스타일 가이드 준수를 지원하기 위해 모든 JetBrains IDE와 원활하게 통합되도록 설계된 코딩 어시스턴트임
          + OpenAI 및 Google Gemini와 같은 모델을 기반으로 구축되었으며, 향후 세션을 위해 코딩 스타일을 기억함으로써 일관된 출력을 보장하는 능력으로 두각을 나타냄
          + 우리 개발자들은 테스트 생성 기능이 특히 유용하다고 생각했으며 안정성 문제 없이 더 긴 출력을 처리할 수 있는 능력을 주목했음
          + 그러나 일부 경쟁 업체와 달리 JetBrains는 자체 모델을 호스팅하지 않기 때문에 타사 데이터 처리에 대해 우려하는 고객에게는 적합하지 않을 수 있음
          + 그럼에도 불구하고 이 도구가 JetBrains IDE와 통합되어 있다는 점은 AI 기반 코딩 어시스턴트를 탐색하는 팀에게 유망한 선택임
     * Mise
          + 폴리글랏 환경에서 작업하는 개발자는 종종 서로 다른 언어와 도구의 여러 버전을 관리해야 하는 상황에 처함
          + mise는 nvm, pyenv, rbenv, rustup 등을 대체할 수 있는 하나의 도구를 제공하여 이 문제를 해결하는 것을 목표로 하며 asdf를 대체할 수 있음
          + Mise는 셸 상호 작용 속도를 위해 Rust로 작성되었으며, 셸 기반 shim을 사용하는 asdf와 달리 mise는 PATH 환경 변수를 미리 수정하여 도구 실행 시간이 직접 호출됨
          + 이것이 mise가 asdf보다 빠른 이유 중 하나임
          + 이미 asdf에 익숙한 개발자의 경우 mise는 동일한 기능을 제공하지만 몇 가지 주요한 차이점이 있음
          + Rust로 작성되어 더 빠르며 asdf에는 없는 몇 가지 기능이 있음. 예를 들어 동일한 도구의 여러 버전을 동시에 설치할 수 있으며 퍼지 매칭을 포함한 더 관대한 명령을 제공함
          + 또한 린터, 테스트, 빌더, 서버 및 프로젝트에 특정한 기타 작업을 실행하는 데 유용한 통합 작업 실행기를 제공함
          + 개발 환경을 관리하기 위해 여러 도구를 사용해야 하는 것과 다른 도구의 때때로 어색한 구문에 약간 질려 있다면 mise를 살펴볼 가치가 분명히 있음
     * Mockoon
          + Mockoon은 오픈 소스 API 모킹 도구임
          + 직관적인 인터페이스, 사용자 정의 가능한 경로 및 동적 응답뿐만 아니라 모의 데이터 세트 생성을 자동화하는 기능을 제공함
          + Mockoon은 OpenAPI와 호환되며 로컬에서 테스트하고 개발 파이프라인과 통합할 수 있는 다양한 시나리오를 생성할 수 있음
          + 요청을 가로채고 Mockoon에 정의된 호출만 가짜로 만들어 ""부분 모의""를 만들 수도 있음
          + 부분 모의는 특정 API 경로 또는 엔드포인트를 시뮬레이션하고 다른 요청을 실제 서버로 전달하는 데 도움이 됨
          + 부분 모의는 특정 시나리오에서 유용할 수 있지만 과도하게 사용하면 불필요한 복잡성으로 이어질 위험이 있음
          + 그 외에도 Mockoon은 모의 API를 빠르게 설정하고 개발 워크플로를 개선하고 자동화하는 데 유용한 도구로 남아 있음
     * Raycast
          + Raycast는 macOS 프리미엄 런처로, 키보드에서 애플리케이션을 빠르게 실행하고 명령을 실행하며 파일을 검색하고 작업을 자동화할 수 있음
          + 우리 팀은 개발자를 위한 기본 제공 기능과 VSCode, Slack, Jira, Google 등 타사 앱 및 서비스와 상호 작용할 수 있는 쉬운 확장성을 높이 평가함
          + Raycast는 생산성에 맞춰져 있으며 컨텍스트 전환을 최소화하여 일상적인 작업을 간소화하려는 사람들에게 유용한 도구임
          + Pro 사용자는 특수 AI 기반 검색 어시스턴트인 Raycast AI에 액세스할 수 있음
     * ReadySet
          + ReadySet은 MySQL 및 PostgreSQL용 쿼리 캐시임
          + 수동 무효화에 의존하는 기존 캐싱 솔루션과 달리 ReadySet은 데이터베이스 복제 스트림을 활용하여 캐시를 점진적으로 업데이트함
          + 부분 뷰 물질화를 통해 ReadySet은 기존 읽기 복제본보다 낮은 꼬리 지연 시간을 달성함
          + ReadySet은 MySQL 및 PostgreSQL과 유선 호환되므로 애플리케이션 변경 없이 데이터베이스 앞에 배포하여 읽기 워크로드를 수평적으로 확장할 수 있음
     * Rspack
          + 웹 기반 프론트엔드에서 작업하는 우리 팀 중 많은 팀이 Webpack과 같은 이전 번들링 도구에서 Vite로 전환했음
          + 이 분야의 새로운 진입자는 Rspack으로, 18개월 개발 끝에 1.0 버전이 출시되었음
          + Webpack의 대체품으로 설계되었으며 Webpack 생태계의 플러그인 및 로더와 호환됨
          + 이는 복잡한 Webpack 설정을 마이그레이션할 때 Vite보다 이점이 될 수 있음
          + 우리 팀이 Vite 및 Rspack과 같은 최신 도구로 마이그레이션하는 주된 이유는 개발자 경험, 특히 속도임
          + 마지막 코드 변경에 대한 피드백을 받기 전에 1~2분 정도 기다려야 하는 것보다 개발 흐름을 깨는 것은 없음
          + Rust로 작성된 Rspack은 Webpack보다 훨씬 빠른 성능을 제공하며 많은 경우 Vite보다도 빠름
     * Semantic Router
          + LLM 기반 애플리케이션을 구축할 때 특정 에이전트로 요청을 라우팅하거나 특정 흐름을 호출하기 전에 사용자의 의도를 결정하는 것이 중요함
          + Semantic Router는 LLM 및 에이전트를 위한 초고속 의사 결정 계층 역할을 하여 의미론적 의미를 기반으로 요청을 효율적이고 안정적으로 라우팅할 수 있음
          + 벡터 임베딩을 사용하여 의도를 추론함으로써 Semantic Router는 불필요한 LLM 호출을 줄여 의도를 이해하기 위한 더 간단하고 비용 효율적인 접근 방식을 제공함
          + 그 잠재력은 의도 추론을 넘어 다양한 의미 작업을 위한 다재다능한 구성 요소로 확장됨
          + 제공하는 속도와 유연성으로 인해 LLM의 오버헤드 없이 빠르고 실시간 의사 결정이 필요한 환경에서 강력한 경쟁자로 자리매김함
     * 소프트웨어 엔지니어링 에이전트
          + 현재 GenAI 공간에서 가장 뜨거운 주제 중 하나는 소프트웨어 엔지니어링 에이전트의 개념임
          + 이러한 코딩 지원 도구는 엔지니어가 여기저기서 코드 조각을 작성하는 것 이상의 일을 함. 이들은 해결할 수 있는 문제의 크기를 확장하여 이상적으로는 자율적으로 그리고 인간의 최소한의 간섭으로 작업을 수행함
          + 이러한 도구가 GitHub 이슈나 Jira 티켓을 가져와 계획과 코드 변경을 제안하거나 심지어 사람이 검토할 풀 요청을 생성할 수 있다는 아이디어임
          + 이것은 AI 코딩 지원의 영향력을 높이기 위한 다음 논리적 단계이지만, 종종 광고되는 광범위한 코딩 작업을 다룰 수 있는 일반 에이전트의 목표는 매우 야심찬 것이며, 현재 툴링 상태는 이를 확실하게 보여주지 않고 있음
          + 그러나 우리는 더 복잡한 문제에 대해 개발자 시간을 확보하기 위해 더 제한된 범위의 간단한 작업에 대해 이것이 조만간 작동할 수 있다고 봄
          + 에이전트의 베타 버전이 출시된 도구로는 GitHub Copilot Workspace, qodo flow, JIRA용 Tabnine 에이전트, Amazon Q Developer 등이 있음
          + SWE Bench 벤치마크에는 해당 공간의 더 많은 도구가 나열되어 있지만 AI 공간의 벤치마크는 약간의 의심을 갖고 받아들일 것을 주의함
     * uv
          + Rust는 빠른 시작 성능으로 인해 명령줄 도구를 작성하는 데 적합하며, 우리는 사람들이 일부 도구 체인을 Rust로 다시 작성하는 것을 봄
          + 이전 Radar에서 Rust로 작성된 Python 린터인 Ruff를 언급했음
          + 이번 볼륨에서는 Rust로 작성된 Python 패키지 관리 도구인 uv를 평가했음
          + uv의 가치 제안은 ""엄청나게 빠른"" 것이며 벤치마크에서 다른 Python 패키지 관리 도구를 크게 능가함
          + 그러나 Radar 평가 중 우리는 빌드 도구에 대해 초 단위로 최적화하는 것이 한계 개선인지에 대해 논의했음
          + 성능에 비해 패키지 관리 시스템에 더 중요한 것은 생태계, 성숙한 커뮤니티 및 장기 지원임
          + 그렇다고 해서 프로젝트 팀의 피드백은 이 작은 성능 개선이 피드백 주기와 전반적인 개발자 경험을 개선하는 데 큰 도움이 될 수 있음을 보여주었음 - 우리는 이 작은 성능 개선을 달성하기 위해 수동으로 CI/CD 캐싱을 매우 복잡하게 만드는 경향이 있음; uv는 Python 환경 관리를 단순화함
          + Python 개발을 위한 패키지 및 env 관리에는 여전히 개선의 여지가 많이 있다는 점을 고려할 때 uv가 평가할 만한 가치가 있는 옵션이라고 생각함
     * Warp
          + Warp는 macOS 및 Linux용 터미널임
          + 가독성을 높이기 위해 명령 출력을 블록으로 분할함
          + Warp에는 지능형 명령 제안 및 자연어 처리와 같은 AI 기반 기능이 포함되어 있음
          + 또한 사용자가 명령과 출력을 구성하고 주석과 설명을 추가할 수 있는 노트북 기능도 포함되어 있음
          + 이러한 기능을 활용하여 README 파일이나 온보딩 자료를 만들고 터미널 워크플로를 구조화되고 대화형으로 제시하고 관리할 수 있음
          + Warp는 유연한 크로스 셸 프롬프트인 Starship과 쉽게 통합되어 실행 중인 프로세스, 사용 중인 도구의 특정 버전, Git 세부 정보 또는 현재 Git 사용자 등에 대한 정보를 검색하여 터미널 경험을 사용자 정의할 수 있음
     * Zed
          + Atom 텍스트 편집기 프로젝트가 종료된 후 제작자들은 Zed라는 새로운 편집기를 만들었음
          + Rust로 작성되고 최신 하드웨어를 활용하도록 최적화된 Zed는 빠르게 느껴짐
          + 많은 프로그래밍 언어 지원, 내장 터미널, 멀티버퍼 편집 등 현대 편집기에 기대하는 모든 기능을 갖추고 있음
          + AI 지원 코딩은 여러 LLM 제공업체와의 통합을 통해 사용할 수 있음
          + 열성적인 페어 프로그래머로서 우리는 Zed에 내장된 원격 협업 기능에 매료되었음
          + 개발자는 GitHub ID를 통해 서로를 찾은 다음 실시간으로 동일한 작업 공간에서 협업할 수 있음
          + 개발 팀이 Visual Studio Code 생태계의 매력에서 벗어날 수 있고 원하는지 여부를 판단하기에는 아직 이름
          + 그러나 Zed는 탐색해 볼 만한 대안임

  Hold

     * CocoaPods
          + CocoaPods는 Swift와 Objective-C Cocoa 프로젝트에서 오랫동안 사랑받아온 의존성 관리 도구임
          + 10년 넘게 iOS와 macOS 개발자들에게 중요한 도구 역할을 해왔음
          + CocoaPods 팀은 이제 프로젝트가 유지 보수 모드로 전환되고 적극적인 개발은 중단될 것이라고 발표함
          + CocoaPods 도구와 관련 리소스는 계속 사용 가능하지만, 새로운 기능 개발이나 개선은 이루어지지 않을 예정임
          + 개발자들은 Swift Package Manager로의 전환을 권장받고 있음
          + Swift Package Manager는 Xcode와 네이티브 통합을 제공하며 Apple의 장기적인 지원을 받을 수 있음

[Language and Frameworks]

  Adopt

     * dbt
          + 는 ELT 파이프라인에서 데이터 변환을 구현하기 위한 강력하고 현명한 옵션으로 계속 여겨지고 있음
          + 엔지니어링 엄격성을 가능하게 하고 SQL 기반 변환의 모듈성, 테스트 가능성 및 재사용성과 같은 관행을 가능하게 한다는 점이 마음에 듦
          + Snowflake, BigQuery, Redshift, Databricks, Postgres 등 많은 클라우드 데이터 웨어하우스, 레이크하우스 및 데이터베이스와 잘 통합되며 주변에 건강한 커뮤니티 패키지 생태계를 보유하고 있음
          + 최근 도입된 단위 테스트에 대한 기본 지원(dbt core 1.8+ 및 최근 도입된 dbt Cloud ""versionless"" 경험)은 툴박스에서의 위치를 더욱 강화함
          + 새로운 단위 테스트 기능을 사용하면 정적 테스트 데이터를 쉽게 정의하고 출력 기대치를 설정하며 파이프라인의 증분 및 전체 새로 고침 모드를 모두 테스트할 수 있어 팀에서 높이 평가하고 있음
          + 많은 경우 이를 통해 동일한 수준의 품질을 유지하면서 자체 제작 스크립트를 폐기할 수 있었음
     * Testcontainers
          + Testcontainers는 테스트 실행을 위한 신뢰할 수 있는 환경을 만드는 데 유용한 기본 옵션으로 경험되고 있음
          + 다양한 유형의 데이터베이스, 대기열 기술, 클라우드 서비스, 웹 브라우저와 같은 UI 테스트 종속성을 포함하여 일반적인 테스트 종속성을 Dockerizes하는 여러 언어로 이식된 라이브러리이며, 필요할 때 사용자 정의 Dockerfiles을 실행할 수 있음
          + 최근 테스트 세션의 시각적 관리와 더 복잡한 시나리오 관리 기능을 제공하는 데스크톱 버전이 출시되었으며, 이는 팀에서 매우 유용하다고 판단하고 있음

  Trial

     * CAP
          + 분산 메시징 시스템에서 데이터베이스 업데이트와 이벤트 발행을 원자적으로 수행하기 위한 Outbox 패턴을 구현하는 .NET 라이브러리
          + 동일한 데이터베이스 트랜잭션에서 이벤트를 발행하려는 의도를 기록함으로써 문제 해결
          + 몇 가지 데이터베이스와 메시징 플랫폼을 지원하며 최소 한 번의 전달을 보장하여 유용함
     * CARLA
          + 프로덕션 배포 전 자율 주행 시스템을 테스트하는 데 사용되는 오픈 소스 자율 주행 연구용 시뮬레이터
          + 차량, 지형, 인간, 동물 등의 3D 모델을 유연하게 만들고 재사용할 수 있어 다양한 시나리오 시뮬레이션 가능
          + 자율 주행 시스템은 이러한 동적 객체를 인식하고 브레이크 등의 적절한 조치를 취해야 함
          + 자율 주행 시스템의 지속적인 개발과 테스트를 위해 활용됨
     * Databricks Asset Bundles
          + 2024년 4월 GA된 DABs는 데이터 팀에서 소프트웨어 엔지니어링 관행 채택을 촉진하는 Databricks 자산 패키징 및 배포 도구로 자리잡음
          + 워크플로 및 작업 구성과 해당 작업에서 실행될 코드를 번들로 패키징하여 CI/CD 파이프라인을 통해 여러 환경에 배포 가능
          + 일반적인 자산 유형에 대한 템플릿과 사용자 지정 템플릿을 지원하여 데이터 엔지니어링 및 ML 프로젝트에 맞춤형 서비스 템플릿 생성 가능
          + 엔지니어링 워크플로의 주요 부분으로 점점 더 많이 채택되고 있음
          + 노트북 템플릿을 포함하고 프로덕션에 배포하는 것을 지원하지만, 노트북을 프로덕션화하는 것은 권장하지 않음
          + 대신 유지 관리성, 탄력성, 확장성 요구 사항을 지원하는 엔지니어링 관행으로 의도적으로 프로덕션 코드 작성을 장려함
     * Instructor
          + LLM을 사용하여 구조화된 답변(JSON, YAML 등)을 요청하고 이를 파싱하여 애플리케이션에서 사용할 때 도움이 되는 라이브러리
          + LLM은 비결정적이므로 요청한 대로 항상 동작하지 않을 수 있음
          + 의도한 출력 구조를 정의하고 LLM이 요청한 구조를 반환하지 않을 경우 재시도를 구성할 수 있음
          + 스트림에서 부분 구조를 파싱하는 기능도 제공하여 전체 응답을 기다리지 않고 결과를 스트리밍할 수 있음
     * Kedro
          + MLOps 도구로 상당히 개선되었으며 모듈성과 엔지니어링 관행에 초점을 유지함
          + 독립형 kedro-datasets 패키지 도입으로 코드와 데이터를 분리하는 등 모듈성 강조
          + CLI, 스타터 프로젝트 템플릿, 텔레메트리 기능 향상
          + 최근 VS Code 확장 출시로 개발자 경험 향상
     * LiteLLM
          + 다양한 LLM 제공업체 API와 원활하게 통합되는 라이브러리로, OpenAI API 형식을 통해 상호 작용을 표준화함
          + 광범위한 제공업체와 모델을 지원하며 완성, 임베딩, 이미지 생성을 위한 통합 인터페이스 제공
          + 각 제공업체의 특정 엔드포인트 요구 사항과 일치하도록 입력을 변환하여 통합을 단순화함
          + 캐싱, 로깅, 속도 제한, 부하 분산 등 프로덕션 애플리케이션에 필요한 운영 기능을 구현하기 위한 프레임워크 제공
          + 다양한 모델을 쉽게 교체할 수 있도록 하여 모델이 빠르게 진화하는 현재 상황에 필요한 기능임
          + 동일한 프롬프트에 대한 모델 응답이 다양하므로 일관된 호출 방법만으로는 완성 성능을 최적화하기 어려울 수 있음을 인식해야 함
          + 각 모델은 추가 기능을 고유하게 구현하므로 단일 인터페이스로는 모든 기능을 충족하기 어려울 수 있음
     * LlamaIndex
          + 도메인 특화적이고 컨텍스트 기반의 LLM 애플리케이션을 설계할 수 있는 엔진을 포함하며, 데이터 수집, 벡터 인덱싱, 문서에 대한 자연어 질의 응답 등의 작업 지원
          + LlamaIndex를 사용하여 문서 수집을 자동화하고, 문서 임베딩을 인덱싱하며, 사용자 입력을 기반으로 이러한 임베딩을 쿼리하는 RAG(Retrieval-Augmented Generation) 파이프라인 구축 가능
          + LlamaHub를 사용하여 LlamaIndex 모듈을 확장하거나 사용자 지정하고, 선호하는 LLM, 임베딩, 벡터 저장소 제공업체와 함께 LLM 애플리케이션 구축 가능
     * LLM Guardrails
          + LLM이 유해하거나 오해의 소지가 있거나 무관한 내용을 생성하지 않도록 하는 지침, 정책 또는 필터 집합
          + 입력 조작과 같은 기술로 시스템을 오용하려는 악의적인 사용자로부터 LLM 애플리케이션을 보호하는 데에도 사용 가능
          + 모델이 콘텐츠를 처리하고 생성하는 데 경계를 설정하여 안전망 역할을 함
          + NeMo Guardrails, Guardrails AI, Aporia Guardrails 등 이 분야에서 떠오르는 프레임워크가 유용함
          + 모든 LLM 애플리케이션에 가드레일을 배치하고 규칙과 정책을 지속적으로 개선할 것을 권장함
          + 책임감 있고 신뢰할 수 있는 LLM 채팅 앱을 구축하는 데 중요함
     * Medusa
          + 대부분의 쇼핑 웹사이트 구축용 전자상거래 솔루션은 80/20 함정에 빠지는 경향이 있음
          + Medusa는 균형을 잘 맞춘 고도로 사용자 지정 가능한 오픈 소스 상거래 플랫폼으로, 개발자가 독특하고 맞춤화된 쇼핑 경험을 만들 수 있도록 함
          + Next.js와 PostgreSQL을 기반으로 구축되어 쇼핑 카트, 주문 관리부터 기프트 카드 모듈, 지역별 세금 계산 등 고급 기능까지 포괄적인 모듈 범위로 개발 프로세스 가속화
          + 몇 가지 프로젝트에 적용하여 가치 있는 프레임워크로 평가됨
     * Pkl
          + Apple에서 내부적으로 사용하기 위해 처음 만들어진 오픈 소스 구성 언어 및 도구
          + 주요 기능은 구성 오류를 배포 전에 포착할 수 있는 유형 및 유효성 검사 시스템임
          + 코드 중복을 줄이고(환경 재정의 등의 경우) 구성 변경 사항을 라이브 환경에 적용하기 전에 유효성 검사 수행 가능
          + JSON, PLIST, YAML, .properties 파일 생성 및 코드 생성을 포함한 광범위한 IDE 및 언어 통합 제공
     * ROS 2
          + 로봇 시스템 개발을 위한 오픈 소스 프레임워크
          + 프로세스 간 통신, 다중 스레드 실행, 서비스 품질 등의 기능을 다루는 애플리케이션의 모듈식 구현을 가능하게 하는 라이브러리와 도구 제공
          + 실시간 기능 개선, 모듈성 향상, 다양한 플랫폼 지원 확대, 합리적인 기본값 제공 등 이전 버전에 비해 개선됨
          + 자율 주행 기능 등 복잡하고 진화하는 차내 애플리케이션을 가진 제조업체에게 노드 기반 아키텍처와 토픽 기반 통신 모델이 특히 매력적임
          + 자동차 산업에서 점점 더 많이 사용되고 있음
     * seL4
          + SDV나 기타 안전 중요 시나리오에서 운영 체제의 실시간 안정성이 중요함
          + 높은 진입 장벽으로 인해 소수의 기업이 이 분야를 독점하고 있어 seL4와 같은 오픈 소스 솔루션이 귀중함
          + seL4는 고보증, 고성능 운영 체제 마이크로커널임
          + 형식 검증 방법을 사용하여 운영 체제의 동작이 사양을 ""수학적으로"" 준수하는지 확인함
          + 마이크로커널 아키텍처는 시스템 안정성을 보장하기 위해 핵심 책임을 최소화함
          + NIO와 같은 전기차 기업이 seL4 생태계와 협력하고 있으며, 향후 이 분야에서 더 많은 발전이 있을 수 있음
     * SetFit
          + 현재 AI 기반 도구의 대부분은 생성적이며, 텍스트와 이미지를 생성하고 GPT를 사용함
          + 기존 텍스트 작업(텍스트 분류 또는 의도 결정)에는 문장 변환기가 선호됨
          + SetFit은 문장 변환기를 미세 조정하기 위한 프레임워크임
          + 대조 학습을 사용하여 매우 적은 수의 예제로도 종종 명확한 분리를 달성하여 다른 의도 클래스를 분리함
          + 문장 변환기는 생성 AI 시스템에서도 역할을 할 수 있음
          + LLM을 사용하는 고객 대면 챗봇 시스템에서 SetFit을 사용하여 의도 감지에 성공했으며, 더 엄격한 필터링을 위해 SetFit 기반 분류기를 선택함
     * vLLM
          + 클라우드 또는 온프레미스에서 실행할 수 있는 고처리량, 메모리 효율적인 LLM용 추론 엔진
          + 여러 모델 아키텍처와 인기 있는 오픈 소스 모델을 원활하게 지원함
          + NVIDIA DGX 및 Intel HPC와 같은 GPU 플랫폼에 도커화된 vLLM 워커를 배포하여 개발자 코딩 지원, 지식 검색, 자연어 데이터베이스 상호 작용 등을 위한 Llama 3.1(8B 및 70B), Mistral 7B, Llama-SQL 등의 모델 호스팅
          + OpenAI SDK 표준과 호환되어 일관된 모델 서빙 촉진
          + Azure의 AI Model Catalog는 사용자 지정 추론 컨테이너를 사용하여 모델 서빙 성능을 향상시키며, 높은 처리량과 효율적인 메모리 관리로 인해 vLLM을 기본 추론 엔진으로 사용함
          + vLLM 프레임워크는 대규모 모델 배포의 기본값으로 떠오르고 있음

  Assess

     * Apache XTable™
          + 사용 가능한 오픈 테이블 형식 중에서 명확한 승자가 나타나지 않음
          + Delta UniForm과 같은 도구는 이러한 형식 간의 상호 운용성을 가능하게 함
          + Apache XTable™은 Hudi, Delta, Iceberg 간의 전방향 상호 운용성을 촉진하는 Apache 인큐베이터 프로젝트
          + 이러한 형식의 기능 차이로 인해 장기적으로 전방향 상호 운용성에 크게 의존하는 것은 팀이 ""최소 공통 분모"" 기능만 사용할 수 있게 될 수 있음
     * dbldatagen
          + 데이터 엔지니어링을 위한 테스트 데이터 준비는 상당한 도전
          + 프로덕션에서 테스트 환경으로 데이터를 전송하는 것은 위험할 수 있으므로 팀은 종종 가짜 또는 합성 데이터에 의존
          + dbldatagen(Databricks Labs Data Generator)은 테스트, 벤치마킹, 데모 등을 위해 Databricks 환경 내에서 합성 데이터를 생성하는 Python 라이브러리
          + dbldatagen은 수십억 개의 행을 몇 분 안에 생성하여 여러 테이블, 변경 데이터 캡처, 병합/조인 작업과 같은 다양한 시나리오를 지원하면서 대규모로 합성 데이터를 생성할 수 있음
     * DeepEval
          + DeepEval은 LLM 성능을 평가하기 위한 Python 기반의 오픈 소스 평가 프레임워크
          + LlamaIndex나 LangChain과 같은 인기 있는 프레임워크로 구축된 RAG(retrieval-augmented generation) 및 기타 유형의 앱을 평가하고, 필요에 따라 다양한 모델을 비교할 때 기준선과 벤치마크를 설정하는 데 사용할 수 있음
          + DeepEval은 환각 감지, 답변 관련성, 하이퍼파라미터 최적화 등 LLM 성능을 평가하기 위한 포괄적인 메트릭과 기능 제공
          + pytest와의 통합을 제공하며, 어설션과 함께 CI(continuous integration) 파이프라인에 테스트 세트를 쉽게 통합할 수 있음
     * DSPy
          + 오늘날 대부분의 언어 모델 기반 애플리케이션은 특정 작업에 맞게 수동으로 조정된 프롬프트 템플릿에 의존
          + DSPy는 이러한 애플리케이션을 개발하기 위한 프레임워크로, 직접적인 프롬프트 엔지니어링을 없애는 다른 접근 방식을 취함
          + 대신 프로그램 흐름(서로 위에 계층화할 수 있는 모듈을 통해), 최적화할 메트릭, 훈련 또는 테스트할 데이터와 관련된 높은 수준의 추상화를 도입
          + 그런 다음 정의된 메트릭을 기반으로 기본 언어 모델의 프롬프트 또는 가중치를 최적화
          + 결과 코드베이스는 PyTorch를 사용한 신경망 훈련과 매우 유사
     * Flutter for Web
          + Flutter는 iOS 및 Android 애플리케이션에 대한 크로스 플랫폼 지원으로 알려짐
          + 이제 더 많은 플랫폼으로 확장됨
          + 동일한 코드베이스에서 iOS, Android, 브라우저용 앱을 빌드할 수 있음
          + 모든 웹 애플리케이션이 Flutter에서 의미가 있는 것은 아니지만, 프로그레시브 웹 앱, 단일 페이지 앱, 기존 Flutter 모바일 앱을 웹으로 변환하는 경우에 특히 적합
          + Flutter는 이미 실험 채널에서 컴파일 타겟으로 WebAssembly(WASM)를 지원했으며, 이는 잠재적인 버그와 성능 문제가 있는 활발한 개발 중임을 의미
          + 최근 릴리스에서는 안정화됨
          + WASM 타겟으로 컴파일된 Flutter 웹 애플리케이션의 성능은 JavaScript 컴파일 타겟보다 훨씬 우수
          + 다양한 플랫폼에서의 네이티브에 가까운 성능은 많은 개발자가 처음에 Flutter를 선택한 이유이기도 함
     * kotaemon
          + kotaemon은 지식 기반 문서를 위한 Q&A 앱을 구축하기 위한 오픈 소스 RAG 기반 도구 및 프레임워크
          + PDF 및 DOC 형식을 포함한 여러 문서 유형을 이해할 수 있으며, Gradio 기반의 웹 UI를 제공하여 사용자가 지식 기반을 구성하고 채팅 인터페이스를 통해 상호 작용할 수 있음
          + 벡터 저장소가 있는 기본 제공 RAG 파이프라인을 가지고 있으며 SDK로 확장 가능
          + 또한 웹 기반 인라인 미리보기 및 관련성 점수와 함께 응답에서 소스 문서 인용
          + RAG 기반 문서 Q&A 애플리케이션을 원하는 사람이라면 이 사용자 정의 가능한 프레임워크는 매우 좋은 출발점
     * Lenis
          + Lenis는 현대 브라우저를 위해 설계된 가벼우면서도 강력한 부드러운 스크롤 라이브러리
          + WebGL 스크롤 동기화 및 시차 효과와 같은 부드러운 스크롤 경험을 가능하게 하여 유연하고 원활한 스크롤 상호 작용이 있는 페이지를 구축하는 팀에 이상적
          + 개발자들은 Lenis가 간단하고 사용하기 쉬우며 부드러운 스크롤을 만들 수 있는 간소화된 접근 방식을 제공한다는 것을 발견
          + 그러나 라이브러리는 접근성 문제가 있을 수 있으며, 특히 수직 및 수평 스크롤 상호 작용은 장애가 있는 사용자를 혼란스럽게 할 수 있음
          + 시각적으로 매력적이지만 접근성을 유지하려면 신중한 구현이 필요
     * LLMLingua
          + LLMLingua는 작은 언어 모델을 사용하여 필수적이지 않은 토큰을 제거함으로써 프롬프트를 압축하여 성능 손실을 최소화하면서 LLM 효율성을 높임
          + 이 접근 방식은 LLM이 더 긴 프롬프트를 효율적으로 처리하면서 추론 및 컨텍스트 학습을 유지할 수 있게 하여 비용 효율성, 추론 지연 시간, 컨텍스트 처리와 같은 과제를 해결
          + 추가 훈련 없이 다양한 LLM과 호환되고 LLamaIndex와 같은 프레임워크를 지원하는 LLMLingua는 LLM 추론 성능을 최적화하는 데 적합
     * Microsoft Autogen
          + Microsoft Autogen은 AI 에이전트 생성 및 오케스트레이션을 단순화하는 오픈 소스 프레임워크로, 복잡한 작업을 해결하기 위한 다중 에이전트 협업을 가능하게 함
          + 자율 및 human-in-the-loop 워크플로를 모두 지원하며, 다양한 LLM 및 에이전트 상호 작용을 위한 도구와의 호환성을 제공
          + 한 팀에서 각 에이전트가 코드 생성, 코드 검토 또는 문서 요약과 같은 특정 기술을 나타내는 AI 기반 플랫폼을 구축하기 위해 클라이언트용 Autogen 사용
          + 프레임워크를 사용하여 적절한 모델과 워크플로를 정의함으로써 팀이 새로운 에이전트를 원활하고 일관되게 생성할 수 있음
          + LlamaIndex를 활용하여 워크플로를 오케스트레이션하여 에이전트가 제품 검색 및 코드 제안과 같은 작업을 효율적으로 관리할 수 있음
          + Autogen은 특히 프로덕션 환경에서 가능성을 보여주었지만, 더 많은 에이전트가 추가됨에 따라 확장성 및 복잡성 관리에 대한 우려가 남아 있음
          + 에이전트 기반 시스템 확장에서의 장기적인 실행 가능성을 평가하려면 추가 평가가 필요
     * Pingora
          + Pingora는 빠르고 안정적이며 프로그래밍 가능한 네트워크 서비스를 구축하기 위한 Rust 프레임워크
          + 원래 Cloudflare에서 Nginx의 단점을 해결하기 위해 개발된 Pingora는 이미 River와 같은 새로운 프록시가 그 기반 위에 구축되고 있어 큰 잠재력을 보여주고 있음
          + 대부분의 사람들은 Cloudflare 수준의 규모에 직면하지 않지만, 유연한 애플리케이션 계층 라우팅이 네트워크 서비스에 필수적인 시나리오를 마주침
          + Pingora의 아키텍처를 통해 보안이나 성능을 희생하지 않고 이러한 상황에서 Rust의 모든 기능을 활용할 수 있음
     * Ragas
          + Ragas는 검색 및 생성 구성 요소를 모두 평가하는 과제를 해결하면서 검색 증강 생성(RAG) 파이프라인의 성능을 평가하도록 설계된 프레임워크
          + 충실도, 답변 관련성, 컨텍스트 활용과 같은 구조화된 메트릭을 제공하여 RAG 기반 시스템의 효과를 평가하는 데 도움
          + 개발자들은 최상위 k개 검색 및 임베딩 모델과 같은 매개변수를 미세 조정하기 위해 정기적인 평가를 실행하는 데 유용하다는 것을 발견
          + 일부 팀은 프롬프트 템플릿이나 모델이 변경될 때마다 매일 실행되는 파이프라인에 Ragas를 통합
          + 메트릭이 견고한 통찰력을 제공하지만, 프레임워크가 복잡한 RAG 파이프라인의 모든 뉘앙스와 복잡한 상호 작용을 포착하지 못할 수 있다는 우려가 있으며, 추가 평가 프레임워크를 고려할 것을 권장
          + 그럼에도 불구하고 Ragas는 프로덕션 환경에서 RAG 평가를 간소화하고 데이터 기반 개선을 제공하는 능력으로 두각을 나타냄
     * Score
          + 자체 내부 개발 플랫폼을 구현하는 많은 조직은 개발자와 플랫폼 호스팅 팀 간에 조직 표준을 적용하기 위해 자체 플랫폼 오케스트레이션 시스템을 만드는 경향이 있음
          + 그러나 컨테이너 워크로드를 안전하고 일관되며 규정을 준수하는 방식으로 호스팅하기 위한 포장도로 배포 플랫폼의 기본 기능은 조직마다 유사
          + 이러한 요구 사항을 지정하기 위한 공유 언어가 있다면 좋지 않을까?
          + Score는 이 분야에서 표준이 될 가능성을 보여주고 있음
          + YAML 형식의 선언적 언어로, 컨테이너화된 워크로드를 배포하는 방법과 실행하는 데 필요한 구체적인 서비스 및 매개변수 설명
          + Score는 원래 Humanitec의 Platform Orchestrator 제품을 위한 구성 언어로 개발되었지만, 현재는 오픈 소스 프로젝트로 CNCF(Cloud Native Computing Foundation)의 관리 하에 있음
          + CNCF의 지원으로 Score는 Humanitec 제품을 넘어 더 널리 사용될 가능성이 있음
          + Kubernetes 및 Docker Compose라는 두 가지 참조 구현과 함께 출시
          + Score의 확장성은 다른 플랫폼에 대한 커뮤니티 기여로 이어질 것으로 기대
          + Score는 Kubevela용 Open Application Model(OAM) 사양과 유사점이 있지만, 전체 애플리케이션보다는 컨테이너 워크로드 배포에 더 초점을 맞추고 있음
          + SST와도 약간의 중복이 있지만, SSI는 내부 엔지니어링 플랫폼이 아닌 클라우드 인프라에 직접 배포하는 데 더 관심이 있음
          + Score는 발전함에 따라 관심을 가지고 지켜보고 있음
     * shadcn
          + shadcn은 재사용 가능하고 복사하여 붙여넣을 수 있는 구성 요소를 제공함으로써 기존의 구성 요소 라이브러리 개념에 도전
          + 이 접근 방식은 팀에 완전한 소유권과 제어권을 제공하여 MUI 및 Chakra UI와 같은 더 일반적인 기존 라이브러리가 종종 부족한 영역인 더 쉬운 사용자 정의 및 확장을 가능하게 함
          + Radix UI 및 Tailwind CSS로 구축된 shadcn은 모든 React 기반 애플리케이션에 원활하게 통합되므로 제어 및 확장성을 우선시하는 프로젝트에 적합
          + 프로젝트에 구성 요소를 복사하여 붙여넣는 프로세스를 지원하는 CLI 포함
          + 숨겨진 종속성을 줄이고 밀접하게 결합된 구현을 방지하는 이점도 있으므로 shadcn은 프런트엔드 개발에 대해 보다 실용적이고 적응력 있는 접근 방식을 추구하는 팀에게 매력적인 대안으로 주목받고 있음
     * Slint
          + Slint는 Rust, C++ 또는 JavaScript 애플리케이션용 네이티브 사용자 인터페이스를 구축하기 위한 선언적 GUI 프레임워크
          + 라이브 미리보기, 반응형 UI 설계, VS Code 통합 및 네이티브 사용자 경험과 같은 중요한 기능을 갖춘 멀티플랫폼 UI 프레임워크이지만, 특히 임베디드 시스템에 대한 유용성을 강조하고 싶음
          + 임베디드 애플리케이션을 개발하는 팀은 전통적으로 UI 개발을 위한 옵션이 제한적이었으며, 각각 고유한 장단점이 있었음
          + Slint는 사용하기 쉬운 HTML과 유사한 마크업 언어를 사용하고 직접 기계어로 컴파일되어 개발자 경험과 성능 사이의 완벽한 균형을 제공
          + 런타임에도 임베디드 시스템에 중요한 낮은 리소스 공간을 자랑
          + 요약하면, Slint가 웹 및 모바일 개발의 검증된 관행을 임베디드 생태계로 가져오기 때문에 마음에 듦
     * SST
          + SST는 애플리케이션을 실행하는 데 필요한 모든 서비스와 함께 클라우드 환경에 애플리케이션을 배포하기 위한 프레임워크
          + SST는 단순한 IaC 도구가 아니라 애플리케이션 환경을 정의할 수 있는 TypeScript API가 있는 프레임워크이며, Git push에서 트리거될 때 애플리케이션을 배포하는 서비스와 결과 애플리케이션을 관리하고 SST 관리 기능을 호출하는 GUI 콘솔
          + SST는 원래 AWS Cloud Formation 및 CDK를 기반으로 했지만, 최신 버전은 Terraform 및 Pulumi 위에 구현되어 이론적으로 클라우드에 구애받지 않음
          + SST는 Next.js 및 Remix를 포함한 여러 표준 웹 애플리케이션 프레임워크 배포를 기본적으로 지원하지만 헤드리스 API 애플리케이션도 지원
          + SST는 자체 범주에 속하는 것으로 보임
          + Kubevela와 같은 플랫폼 오케스트레이션 도구와 유사점이 있지만, 개발자의 로컬 머신에서 실행되는 함수로 AWS Lambda 호출을 프록시하는 라이브 모드와 같은 개발자 편의 기능도 제공
          + 현재 SST는 여전히 약간의 호기심으로 남아 있지만, 발전함에 따라 주목할 만한 프로젝트이자 도구 범주의 일부

  Hold : 없음

   감사합니다. 재밌네요.

   수고 많으셨네요... 감사드립니다!

   중간에 지나가는 Lenis 이라는 스크롤 라이브러리에 대해서 생각을 얹어보자면.. 애플의 홈페이지같은 유려한 스크롤 애니메이션이 제게는 좀 불편하게 느껴지더라구요.

   마우스 스크롤 휠을 돌려가면서 보려니 계속 애니메이션이 끊기는 느낌이고, 화살표 아래키를 눌러서 이동하자니 너무 빨라서 내용을 읽기가 힘들다고 느꼈습니다.

   결국 윈도우즈에서 스크롤 휠을 클릭해서, 아주 살짝 움직여서 느릿느릿 내려가는게 그런 웹사이트를 '즐기는' 유일한 방법인데, 그 정도의 가치가 있는지 잘 모르겠습니다. 한 마디로 좋은 테크닉인지 잘 모르겠음.

   데이터브릭스가 무서울 정도로 많이 나오네요

   읽다가 지침. ㅠㅠ

   GeekNews에 올라왔던 적 있는 제품/서비스를 정리했습니다.

   Platforms - Assess
     * FoundationDB - Apple이 iCloud에 수십억 개의 데이터베이스를 저장할 수 있게 구축한 방법
     * Iggy - Iggy.rs - 러스트로 구축하는 메시지 스트리밍
     * PGLite - PGLite - 브라우저에서 Postgres 실행하기

   Platforms - Trial
     * Langfuse - LangFuse - LLM앱을 위한 오픈소스 Observability & Analytics

   Language and Frameworks - Adopt
     * Testcontainers - Testcontainers - 실제 의존성을 가진 단위 테스트

   Language and Frameworks - Assess
     * DeepEval - DeepEval - LLM을 위한 유닛 테스팅
     * Lenis - Lenis - 부드러운 스크롤 라이브러리
     * Microsoft Autogen - Microsoft AutoGen - 차세대 LLM 어플리케이션을 위한 프레임워크
     * LLMLingua - Microsoft LLMLingua - 추론 가속 및 비용 절감을 위해 프롬프트 압축하기
     * Pingora - Pingora - 네트워크 시스템 구축용 오픈소스 Rust 프레임워크
     * Slint - Slint: 크로스플랫폼 경량 GUI 런타임

   Language and Frameworks - Trial
     * LiteLLM - liteLLM - 50개 이상의 LLM을 지원하는 프록시 서버
     * LlamaIndex - LlamaIndex - LLM을 외부 데이터와 연결해주는 프로젝트
     * Medusa - Medusa - 헤드리스 이커머스 엔진, 오픈소스 Shopify 대체제
     * Pkl - Pkl - 애플이 만든 Configuration용 프로그래밍 언어
     * vLLM - vLLM: PagedAttention을 이용한 쉽고, 빠르고 저렴한 LLM 서빙

   Tools - Adopt
     * Bruno - Bruno - 빠르고 Git 친화적인 오픈소스 API 클라이언트(Postman 대체제)

   Tools - Assess
     * Cursor - Cursor - AI와 함께 코딩을 하기위해 만들어진 에디터
     * JetBrains AI Assistant - Jetbrains IDE, AI Assistant 기능 추가
     * Mise - Mise - 다중언어(Polyglot) 버전 관리자
     * uv - Uv - 러스트로 구현한 초고속 파이썬 패키징 도구
     * Warp - Warp - Rust로 작성된 빠른 터미널
     * Zed - Zed - Atom 개발자들이 만든 새로운 에디터. 오픈 베타 시작

   Tools - Trial
     * ClickHouse - ClickHouse - 오픈소스 컬럼기반 OLAP DB
     * Devbox - Devbox - 격리 쉘/컨테이너를 쉽게 만들어주는 CLI도구
     * Difftastic - 구문을 이해하는 구조적 차이 분석 도구 'Difftastic'
     * pgvector - PostgreSQL로 RAG 시스템 구축하기

   감사합니다. 재미 있네요~

   잘 봤습니다. 감사드립니다.

   재밌게 잘 읽었습니다. 감사합니다.

   Thoughtworks Technology Radar, Volume 30
   Thoughtworks Technology Radar, Volume 29
   Thoughtworks Technology Radar, Volume 28
   Thoughtworks Technology Radar, Volume 27
   Thoughtworks Technology Radar, Volume 26
   ThoughtWorks Technology Radar, Volume 23
   ThoughtWorks Technology Radar, Volume 22
   ThoughtWorks가 6개월마다 발행하는 기술뉴스 - Radar Vol.21
"
"https://news.hada.io/topic?id=17442","윈도우 드라이버 서명 우회로 커널 루트킷 설치 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     윈도우 드라이버 서명 우회로 커널 루트킷 설치 가능성

    Windows 드라이버 서명 우회

     * 공격자들이 Windows 커널 구성 요소를 다운그레이드하여 드라이버 서명 강제 실행과 같은 보안 기능을 우회하고, 완전히 패치된 시스템에 루트킷을 설치할 수 있음.
     * Windows 업데이트 프로세스를 제어하여 최신 시스템에 구식, 취약한 소프트웨어 구성 요소를 도입할 수 있음.

    Windows 다운그레이드

     * SafeBreach의 보안 연구원 Alon Leviev는 업데이트 인수 문제를 보고했으나, Microsoft는 이를 보안 경계를 넘지 않는다고 판단하여 무시함.
     * Leviev는 BlackHat 및 DEFCON 보안 회의에서 공격이 가능함을 시연했으며, 문제는 여전히 해결되지 않음.
     * 연구원은 Windows Downdate라는 도구를 발표하여, 사용자 정의 다운그레이드를 생성하고, 이미 수정된 취약점을 구식 구성 요소를 통해 노출시킬 수 있음.
     * Leviev는 드라이버 서명 강제 실행(DSE) 기능을 우회하여, 서명되지 않은 커널 드라이버를 로드하고 보안 제어를 비활성화하는 루트킷 악성코드를 배포할 수 있음을 보여줌.

    커널 타겟팅

     * Leviev는 Windows 업데이트 프로세스를 악용하여 DSE 보호를 우회할 수 있는 방법을 설명함.
     * 'ci.dll' 파일을 패치되지 않은 버전으로 교체하여 드라이버 서명을 무시하고 Windows의 보호 검사를 우회할 수 있음.
     * 이 교체는 Windows 업데이트에 의해 트리거되며, 취약한 ci.dll 복사본이 메모리에 로드되는 동안 Windows가 최신 복사본을 확인하는 이중 읽기 조건을 악용함.
     * VBS(가상화 기반 보안)를 비활성화하거나 우회하는 방법도 설명함.

    GN⁺의 정리

     * 이 기사에서는 Windows 시스템의 보안 취약점을 악용하여 드라이버 서명 강제 실행을 우회하고 루트킷을 설치할 수 있는 방법을 설명함.
     * 이러한 공격은 Windows 업데이트 프로세스를 악용하여 패치된 구성 요소를 다운그레이드함으로써 가능해짐.
     * 이는 보안 도구가 다운그레이드 절차를 면밀히 모니터링해야 함을 강조하며, 특히 중요한 보안 경계를 넘지 않는 경우에도 주의가 필요함.
     * 비슷한 기능을 가진 다른 보안 도구로는 EDR(Endpoint Detection and Response) 솔루션이 추천됨.

        Hacker News 의견

     * MS는 UAC가 보안 경계가 아니라고 주장함. 드라이버 서명 강제는 보안 기능이라고 하지만, 이 경우 보안 경계를 넘지 않는다고 주장함
     * Windows가 해킹에 취약한 이유에 대한 개념적 모델이 부족하다고 느끼는 사용자 의견
     * 관리자 권한이 있는 사용자는 컴퓨터에 임의의 작업을 수행할 수 있음. 이 공격의 심각성을 높이는 미묘한 차이가 있는지 궁금해하는 사용자
     * Microsoft가 데모가 있음에도 불구하고 반대하는 것이 믿기 어렵다는 의견. Vimeo 계정에 다른 보안 발견이 많음
     * 관리자 권한으로 커널 코드 실행을 통해 루트 사용자가 루트킷을 설치할 수 있음. 연구자가 Windows Downdate라는 도구를 발표함
     * Windows와 Linux에서 일반 권한 로컬 계정이 사실상 루트와 동등함. UAC와 sudo의 차이점에 대한 의견. 기본 설정에서 둘 다 제거하는 것이 더 나을 것이라는 의견
     * 커널이 파일 공유 규칙을 강제하지만 메모리 매핑에 대한 충돌 권한을 확인하지 않음. Linux는 강제 잠금을 제거했음
     * 공격이 의심스러울 정도로 간단함. 업데이트 프로세스를 속여 취약한 커널 구성 요소의 이전 버전을 설치함. MS가 이미 이 문제를 고려했을 것이라는 의견
     * Microsoft가 드라이버 서명을 요구했을 때의 어려움을 회상하는 사용자. 이 취약점을 발견한 Alon Leviev와 SafeBreach에 찬사를 보냄
     * Windows 11을 조작하여 더 나은 OS로 만들 수 있지만, 루트킷에 초점을 맞추자는 의견
"
"https://news.hada.io/topic?id=17395","Agent.exe - Claude 3.5 Sonnet으로 기기를 제어하는 크로스 플랫폼 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Agent.exe - Claude 3.5 Sonnet으로 기기를 제어하는 크로스 플랫폼 앱

     * Claude의 새로운 Computer Use API의 성능을 확인하고 싶었으나, 기본 프로젝트가 너무 무거워 보였음
     * Agent는 Claude 3.5 Sonnet이 로컬 컴퓨터를 직접 제어할 수 있는 간단한 Electron 앱임
     * 사용자가 단계별 컨펌을 하는 ""반자동"" 모드를 추가하려 했으나, 각 단계가 너무 느려 필요하지 않다고 판단함
     * 모델이 혼란스러워지면 ""중지"" 버튼을 눌러 실행을 종료할 수 있음

    시작하기

     * git clone https://github.com/corbt/agent.exe
     * cd agent.exe
     * npm install
     * .env.example를 .env로 이름 변경 후 Anthropic API Key 추가
     * npm start
     * 모델에게 컴퓨터에서 흥미로운 작업을 수행하도록 요청

    지원 시스템

     * MacOS
     * 이론적으로는 Windows와 Linux도 지원 가능 (모든 종속성이 크로스 플랫폼)

    알려진 제한 사항

     * 주 디스플레이에서만 작동
     * AI가 컴퓨터를 완전히 제어할 수 있음
     * 아마도 많은 다른 문제도 있을 수 있음

    팁

     * Claude는 Firefox를 매우 선호함
     * 다른 브라우저도 사용할 수 있지만, Firefox를 설치하면 더 잘 작동함

    로드맵

     * 6시간 만에 작성한 프로젝트로, 아마도 더 발전하지 않을 것임
     * 하지만 멋진 PR이 있다면 검토 후 병합할 예정

GN⁺의 정리

     * 이 프로젝트는 Claude의 컴퓨터 사용 API를 간단히 테스트할 수 있는 방법을 제공함
     * AI가 컴퓨터를 완전히 제어할 수 있어 보안상의 우려가 있을 수 있음
     * Firefox와의 호환성이 뛰어나며, MacOS에서 주로 사용 가능함
     * 비슷한 기능을 가진 프로젝트로는 AutoHotkey나 Sikuli 등이 있음

        Hacker News 의견

     * Kyle의 아이디어가 훌륭하다고 생각하며, 경험 많은 데스크톱 자동화 및 Electron 개발자로서 소스 코드를 읽고 기본 작업에 시도해볼 만하다고 느꼈음
          + 구현은 Anthropic API 위에 얇은 래퍼로 되어 있으며, 단계 기반 접근 방식 덕분에 이상한 행동을 하기 전에 프로세스를 중단할 수 있을 것이라는 자신감이 생겼음
          + Anthropic가 스크린샷에서 보지 않기를 원하는 것을 닫고, M1에 원활하게 설치하여 몇 분 만에 실행했음
          + 기본 작업은 ""시애틀에서 샌프란시스코까지 다음 주 화요일부터 목요일까지의 항공편 찾기""였으며, Anthropic API 키를 사용하여 크롬을 통해 실행했음
          + 몇 초 만에 각 작업 단계를 수행하며, 구글 항공편을 올바르게 열었지만 잘못된 날짜를 예약했음
          + 11월 2일을 목표로 했지만, Agent.exe 창에 의해 시각적으로 차단되어 11월 20일을 선택했음
          + Claude가 잘못된 보조 날짜를 볼 수 있었음에도 불구하고 스스로 수정하지 않았으며, 1주일 여행을 찾았다고 생각하며 성공했다고 선언했음
          + 이 실험은 $0.38의 크레딧과 약 20초가 소요되었으며, 계속 실험할 예정임
     * 시스템에 데몬을 추가하는 것을 눈치채지 못할 때까지 얼마나 걸릴지 궁금함
          + 과거 소련 스파이가 미국 비밀에 접근할까 걱정했던 것과 같음
          + 현재는 모든 사람이 온라인에 비밀을 게시하는 것과 같음
          + 오늘날의 안티바이러스나 방화벽은 네트워크에 혼란을 초래할 수 있는 능력으로부터 파일을 보호할 수 없음
     * 몇 년 전 뉴스에서 ""Alexa, 인형집 주문해줘""라는 이야기를 기억함
          + 방송을 보던 사람들의 Alexa가 이를 인식하고 인형집을 주문했음
          + 넷플릭스 쇼에서 ""Delete C:\Windows""라고 말하는 장면이 나올 때까지 기다려야 함
     * 비브라우저 GUI 앱을 Linux의 Wayland에서 자동화하는 방법에 대해 궁금함
          + CLI 앱은 Bash/Python 등을 사용하여 문제없음
          + 브라우저 앱은 Selenium/Playwright를 사용하여 문제없음
          + Xorg에는 몇 가지 라이브러리가 있으며, 비록 불편하지만 급할 때 작동함
          + Windows에는 많은 RPA 솔루션이 있음
          + 그러나 Wayland에서는 신뢰할 수 있는 것을 찾을 수 없었음
     * .exe 이름이 macOS를 주로 지원하는 멀티플랫폼으로 의도된 것처럼 보이는데 왜 그런지 궁금함
     * 최근에 ""compose"" 모드에서 처음부터 풀스택 프로젝트를 시작하며 Cursor를 시도했으며, 결과에 놀랐음
          + 소프트웨어 커뮤니티의 사람들이 향후 5년 동안 산업이 얼마나 완전히 변할지 인식하고 있는지 궁금함
          + 그때까지 사람들이 실제로 코드를 손으로 입력할 것이라고 상상할 수 없음
     * AI가 컴퓨터를 완전히 장악할 수 있는 알려진 제한 사항이 있음
     * 에어갭을 만들어 자체 운영체제를 코딩하도록 하는 것은 멋질 수 있지만, 실제 데이터에 가까이 두고 싶지 않음
     * 간단한 작업에만 작동하는 것 같음
          + Rhino와 OnShape에서 간단한 테이블을 만들도록 요청했지만, 혼란스러워 보였음
          + Rhino에서는 앱이 열려 있는 것을 보고 여러 작업을 수행한다고 하지만 실제로는 수행되지 않으며, 이전 단계가 완료되지 않았음에도 다음 작업으로 넘어감
          + OnShape에서는 모양을 만들겠다고 하지만 메뉴에서 잘못된 항목을 선택하고 올바른 도구를 사용하고 있다고 가정하며 작업을 계속함
     * 컴퓨터가 하루 종일 밈을 만들어내고, 나는 가족을 돌보고 정원을 가꾸며 암호화폐를 벌고 싶음
          + 미래는 컴퓨터를 사용하는 사람들만 바보가 되는 방향으로 가고 있음
          + 진정한 부는 컴퓨터를 전혀 사용하지 않는 것임
"
"https://news.hada.io/topic?id=17346","Tesla WTF - "No Mercy / No Malice"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Tesla WTF - ""No Mercy / No Malice""

   Scott Galloway가 운영하는 뉴스레터 ""자비 없음 / 악의 없음""의 이번주 토픽
     * 지난주, 한 인물이 이끄는 두 회사에서 매우 인상적인 제품 공개와 그렇지 않은 제품 공개가 각각 발생
     * SpaceX는 20층 높이의 부스터 로켓을 지상으로 안전하게 복귀시키며 금속 크래들에 착륙시키는 놀라운 기술력을 보여줌
     * 반면 Tesla의 Cybercab 발표회는 사실상 이루어지지 않음
     * 제품에 대한 세부 정보나 출시 일정에 대한 정보가 전혀 제공되지 않았고, 분석가나 관람객들에게 제품에 대한 통찰을 주지 못함
     * 지난 2년간 CEO들은 ""AI""라는 두 글자로 수조 달러의 기업 가치를 올림, Tesla는 지난 10년간 ""자율주행(Autonomous)""이라는 한 단어로 세계에서 가장 가치 있는 자동차 회사로 자리매김함.
     * Tesla의 ""We, Robot"" 행사는 시장을 속이지 못했고, 600억 달러의 시가총액이 즉시 줄어듦

과대평가된 기업

     * WeWork는 2019년에 470억 달러의 가치 평가를 받았으나, 4년 후인 현재 4,400만 달러로 급락함
     * 투자자들은 WeWork를 부동산 회사로 인식하게 되었고, 기술 회사라는 창립자 Adam Neumann의 내러티브를 거부함
     * Tesla도 긍정적인 현금 흐름을 가진 훌륭한 회사이지만, Elon Musk 역시 과장된 발언을 이어가며 신뢰를 잃어가고 있음
     * 4월에 Tesla의 영업 이익이 50% 감소했으나, Musk는 이를 AI 로봇 회사로 재정의하며 주가를 14% 상승시킴
     * Musk는 Tesla가 자율주행을 해결하지 못할 것이라고 믿는 사람은 회사에 투자하지 말라고 언급함
     * 그러나 Tesla는 자동차 회사로, 자동차 매출이 지난 해 매출의 94%를 차지함
     * 미국에서는 거짓말을 반복하면 그것이 덜 거짓처럼 느껴지는 위험한 믿음이 있음
     * Tesla는 소프트웨어/에너지/AI/자율주행 회사가 아닌, 뛰어난 자동차 회사이며 현재 가치는 과대평가되어 있음

하이브리드 차량의 현재와 전망

     * Tesla Falcon Model X는 훌륭한 자동차이며, 초창기 구매자들은 환경을 생각하면서도 부유함을 상징하는 메시지를 전달함
     * 그러나 현재 하이브리드 차량이 전기차로 가는 중간 다리 역할을 하고 있음
     * 내연기관 자동차는 여전히 미국 신차 판매의 81%를 차지하고 있으며, 2024년 하이브리드 차량은 전기차보다 5배 더 빠르게 판매되고 있음
     * 주행 거리 불안과 충전 인프라 문제가 전기차 판매를 제한함
          + 한 소비자 조사에 따르면, 전기차 구매를 고려 중인 80%가 충전소 부족을 문제로 지적하고 있으며, 현재 전기차 소유자의 70%는 충전 인프라에 불만을 표시함
          + Tesla의 충전 인프라는 우수하지만, Musk의 충전 인프라 표준화 계획은 아직 실현되지 않았음
     * 하이브리드 차량은 평균적으로 전기차보다 14,884달러 저렴함
     * 전기차가 초기 채택자에서 대중 시장으로 확장하려면 가격이 중요해짐. 대다수의 소비자들은 가격에 민감하게 반응하기 때문임
     * Tesla는 2024년 1분기 13% , 2분기 9% 의 판매 감소를 경험했으나, 3분기 9% 반등함
     * Ford, GM, Volvo 등 주요 자동차 제조사들은 EV 출시 속도를 늦추고 있으며, EV 혁명이 느려지고 있다는 신호가 포착됨
     * 한편, Toyota는 하이브리드에 대한 투자로 미국에서 66%의 판매 증가를 기록하며 성공을 거둠

중국의 전기차 시장

     * 중국에서 EV는 올해 신차 판매의 45% 를 차지할 것으로 예상됨
     * 중국 전기차 시장 성장은 전기차 전문 제조사들에게 긍정적인 소식임
     * 중국 1위 EV 제조사 BYD 는 Tesla보다 훨씬 저렴한 가격에 전기차를 판매함
          + BYD Seagull: $9,700
          + BYD Yuan Plus: $16,600
          + Tesla Model 3: $34,000
          + Tesla Model Y: $37,000
     * 중국에는 200개의 국내 EV 제조사가 경쟁 중이며, 중국 정부는 경쟁을 통해 EV 시장에서 우위를 점하려 하고 있음

Mass Distraction : Cybercab과 자율주행 기술의 현실

     * Tesla의 We, Robot 이벤트에서 주목받을 제품은 완전 자율주행 차량인 Cybercab이었음
          + Cybercab은 두 좌석으로 구성된 자율주행차로, Tesla의 높은 평가를 뒷받침하는 핵심 제품으로 예상됨
          + 그러나 Musk는 Cybercab의 세부 정보를 공개하지 않았으며, 출시 시기는 2026년이거나 ""2027년 이전""이라고 농담을 던짐
          + 가격은 $30,000 미만으로 책정될 예정이지만, 자율주행 기술이 규제 기준을 충족할지 여부는 아직 불확실함
     * Tesla는 여전히 레벨 2 자율주행에 머물러 있으며, 운전자가 필요함
          + 반면 Waymo는 레벨 4 자율주행(운전자가 필요 없는 단계)에 도달했고, 매주 100,000건 이상의 유료 자율주행 택시 서비스를 제공 중임
               o 서비스 지역: 오스틴, 로스앤젤레스, 피닉스, 샌프란시스코
          + Waymo는 다양한 자동차 제조사들과 협력하여 자율주행 운영 체제를 제공하려 하고 있음
          + Tesla는 수직 통합을 지향하는 반면, Waymo는 여러 브랜드와 협력해 자율주행 기술을 대중화하려는 전략을 취하고 있음
     * 나는 최근 Waymo 자율주행 택시를 처음 경험했으며, 신중하고 안전하게 운전하는 방식에 인상받음
          + 사고 현장에서 Waymo는 도로를 재배치하는 경찰과 마주하며 잠시 어려움을 겪었지만, 이를 해결하는 과정을 보고 매우 놀라웠음
          + Waymo가 수집하고 처리하는 수백만 개의 데이터 포인트는 자율주행 기술의 복잡성을 보여줌

찬란한 미래에 대한 기대

     * Musk는 Cybercab이 ""찬란한 미래""를 가져올 것이라고 믿음
     * 그는 미래에 Cybercab이 끊임없이 움직이게 되면, 도시 계획자들이 주차장을 공원으로 바꿀 수 있을 것이라고 주장함
     * Cathie Woods는 Tesla가 로보택시 사업을 통해 2029년까지 8조 달러의 기업 가치를 창출할 것이라고 예상하지만, 현재는 과대평가된 예측으로 보임

Robovan에 대한 평가

     * 나와 Pivot을 공동 진행하는 Kara Swisher는 Tesla의 Robovan을 ""바퀴 달린 토스터""라고 표현함
          + 그러나 필자의 의견은 Robovan이 실질적으로 도로에 등장할 가능성은 거의 없다는 것임
     * Tesla는 자율주행 기술이 아직 준비되지 않았음을 인식하고 있으며, Robovan은 이 상황에서 주의를 돌리기 위한 방편으로 등장한 것임
     * Peter Drucker는 사업 지도자들에게 기회에 집중하라고 조언했으며, Musk는 이 조언을 따르고 있음
          + SpaceX는 상승 중인 반면, Tesla는 현실적인 어려움에 직면해 있음
          + 이번 이벤트에서 Musk는 준비되지 않은 모습과 혼란스러운 발언으로 불안한 모습을 보였음
     * 한편, SpaceX의 COO인 Gwynne Shotwell은 매우 유능한 인물로, 많은 사람들에게 알려지지 않았지만 기술 업계에서 인상적인 인물임

Optimus 로봇의 현실

     * Musk는 Optimus 로봇을 개인적인 R2-D2나 C-3PO로 소개하며, 교사, 베이비시터, 도그워커, 정원사 또는 동반자가 될 수 있다고 주장함
     * ""생각할 수 있는 모든 것을 할 수 있다""고 하지만, 실제 행사에서는 Optimus 로봇들이 사람이 원격으로 조종하고 있었음
     * 로봇의 가격은 $20,000에서 $30,000 사이로 예상되며, 이는 Tesla Model 3보다 약 $12,000 저렴함
     * 그러나 Tesla는 실제 문제를 해결하는 제품(개인 운송수단)인 반면, Optimus는 그 기능을 제대로 수행할 수 있을지 의문임
     * Optimus가 Musk의 주장대로 절반의 기능만 하더라도, 이를 구매할 소비자가 누구인지는 불분명함
     * 이 질문은 Tesla도 답하지 못하며, Boston Dynamics도 그들의 Atlas 로봇에 대해 상업적인 전략을 세우지 못하고 있음
     * Atlas 로봇 역시 인간 감독이 필요하며, 수년간의 연구와 국방부의 지원을 받았음에도 여전히 상용화되지 않음
     * 이 카테고리는 용도를 찾지 못한 기술을 상징하며, Optimus는 실제 제품이 준비되지 않은 상황에서 주의를 돌리기 위한 목적으로만 사용된 것임

Pants-on-Fire 모드

     * 창업가는 곧 영업사원이며, 영업사원은 이야기꾼임
     * 창업가는 가상의 이야기를 통해 미래에 대한 관심을 끌어 자본을 유치하며, 이것이 현실이 될 수 있도록 노력함
     * 대부분의 스타트업은 처음 시작할 때 말이 되지 않지만, 시간이 지나면서 이야기가 실현되거나 실패함
     * 창업가와 거짓말쟁이의 차이점은, 창업가는 자신의 이야기가 실현될 것이라고 믿고 그 목표에 집중하지만, 거짓말쟁이는 의도적으로 사람들을 속임
     * Tesla는 여러 차례 기술 목표를 제시했지만, 목표 달성은 계속 지연되고 있음
          + 2015년: 1,000km 주행 거리가 2년 내에 가능하다고 했으나, 현재는 600km에 가까움
          + 2016년: 자율주행으로 해안 간 이동이 2년 내에 가능하다고 발표
          + 2019년: 1백만 대의 자율주행 차량이 2020년 중반까지 도로에 있을 것이라고 했지만, 여전히 실현되지 않음
          + 로보택시는 2019년에 1년 내 출시될 예정이었으나, 이제는 다시 2년 후로 연기됨
     * 나는 올해 시장이 Tesla를 재평가하고, 그저 자동차 회사로 인식할 것이라고 믿음
     * Tesla는 훌륭한 자동차 회사이지만, 자율주행 및 미래 기술에 대한 과장된 이야기로 인한 기대는 지나치게 높음

   작성자가 누군지는 모르겠으나, FSD를 경험해본 사람의 입장으로, 그 어떤 제조사보다 완전 자율주행에 가장 가깝게 (심지어 카메라만으로) 간 회사라고 생각합니다.
   머스크가 맘에 안드는건 알겠는데 너무 편향적인 글이군요.

   '돈에 관심 없음'과 마찬가지로 '악의 없음'이라고 자신을 소개하는 사람을 조심해야겠군요

   펙트 폭격 너무 아픕니다. 투 더 문

   옵티머스도 원격조종이 아니라 단순 어시스트 였다는 내용이 나온지 언젠데, 저런 이야기를 하고 있네요. 또한, 아틀라스가 못했으니 테슬라도 못했을거라는 건 논리적으로 맞지 않다고 생각합니다.

   시총 비교가 이상합니다. 파산 신청 후 1/1,000이 된 회사랑 아직 영업을 하고 있는 회사를 왜 비교하는 지 모르겠습니다. '현금 흐름이 긍정적이라는 훌륭한 회사'라고 선제적으로 언급하면서 원천봉쇄의 오류를 범한 것 같네요

   저랑 비슷한 생각을 하셨군요..
   공학도들은 we robot이 충분히 영감을 주었다고 하고, 투자자들은 아무것도 못느꼈다고 하고..

   기술에 대한 이해가 없으니, 불확실한 미래에 대한 예상을 하기보단, 현재의 숫자들을 분석하는데에만 초점을 맞춘것 같네요.

   기술 발전과 인문학적 소양은 양쪽의 바퀴와 같다는 생각이 부쩍드네요.

   로보택시에 대해서는 충분히 머스크의 입방정을 비난할만 한데,
   전기차 산업에 대해서는 너무 편향된 시각을 가진 거 아닌가 싶을 정도네요.
   주행 거리와 충전 인프라 때문에 전기차 판매량이 떨어진다는 것은 몇 년전에나 할법한 얘기아닌가요
"
"https://news.hada.io/topic?id=17363","Epublifier – 오프라인 독서를 위한 페이지(책, 매뉴얼) 스크래핑 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Epublifier – 오프라인 독서를 위한 페이지(책, 매뉴얼) 스크래핑 도구

     * 웹사이트를 ePub으로 변환하는 도구
     * 웹사이트에서 HTML 페이지 목록을 추출하고 이를 ePub 책으로 컴파일하여 원하는 eReader로 가져올 수 있음
     * 자바스크립트를 작성할 수 있는 고급 사용자는 사이트의 파싱을 사용자 정의할 수 있는 추가 파서 정의를 추가할 수 있음

  지원 사이트

     * Novel Update
     * Wuxia World
     * awesome-read-the-docs의 대부분의 사이트
     * UL/OL 요소를 목차로 사용하거나 링크 텍스트에 정규 표현식을 사용하거나 쿼리 선택기를 사용하는 사용자 정의 사이트
     * 미리 정의된 제목(헤더) 요소와 다음 버튼(클릭 가능한)을 사용하는 사용자 정의 웹 앱

GN⁺의 정리

     * Epublifier는 웹사이트의 콘텐츠를 ePub 형식으로 변환하여 eReader에서 쉽게 읽을 수 있도록 도와주는 도구임
     * 이 도구는 특히 Novel Update와 Wuxia World 같은 사이트를 지원하며, 고급 사용자는 자바스크립트를 통해 파싱을 사용자 정의할 수 있음
     * 이 도구는 웹 콘텐츠를 오프라인에서 읽고자 하는 사용자에게 유용하며, 비슷한 기능을 제공하는 도구로는 Calibre가 있음

        Hacker News 의견

     * Calibre는 많은 사이트를 지원함
     * 이 확장 프로그램은 다른 스크래퍼와 차별화된 이유를 설명하고자 함
          + 전통적인 스크래퍼가 잘 작동하지 않는 웹사이트에서 EPub을 생성하기 위한 것임
          + 일반적인 명령줄 스크래퍼와 다른 확장 프로그램은 미리 정의된 사이트에서만 작동함
          + 복잡한 설정이나 코드가 필요할 수 있음
          + 일부 사이트는 JavaScript를 사용하여 동적으로 텍스트를 생성하거나 가져옴
          + 브라우저에서 실행되므로 탐지 및 차단 가능성이 낮음
          + 반복적 사용이나 백그라운드 작업을 위한 것이 아님
          + 사이트에 대한 설정 없이도 쉽게 스크래핑할 수 있도록 UI 제공
          + 다른 프로그램/확장 프로그램이 이미 처리하는 사이트에서는 더 나은 성능을 기대할 수 없음
          + 특정 사이트에 고정되지 않기 때문에 작성함
     * 이 프로그램의 흥미로운 점은 임의의 사이트에서 콘텐츠를 추출하는 UI임
     * 모든 섹션이 아코디언 뒤에 숨겨져 있는 사이트를 처리할 수 있다면 훌륭할 것임
     * 비슷한 것을 만들고 있음
          + 블로그와 웹 소설 등을 위한 웹 스크래퍼와 ePub 파서 개발 중
          + 오프라인 읽기를 위한 PWA 동반 앱도 개발 중
     * Paul Graham의 에세이를 ePub으로 얻고 싶을 때가 있음
     * 간단한 버전을 만들어 서버 파일 시스템에 ePub 파일을 저장한 적이 있음
          + Postlight Parser를 사용하여 웹사이트의 단순화된 문서 뷰 제공
     * 이 도구는 놀라운 도구임
          + 오프라인 여행을 위해 많은 웹페이지를 캐시하던 시절이 지나감
     * fanfiction.net을 지원하는지 궁금함
     * AWS, VueJS, MDN, w3schools, realpython, betterstack 같은 문서가 많은 웹사이트에서 실행하는 것을 좋아할 것임
"
"https://news.hada.io/topic?id=17345","Drasi - 이벤트 구동 시스템을 위한 Microsoft의 오픈소스 데이터 처리 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Drasi - 이벤트 구동 시스템을 위한 Microsoft의 오픈소스 데이터 처리 플랫폼

     * 중요한 이벤트 감지와 즉각적인 대응을 단순화함으로써 실시간 이벤트 기반 아키텍처를 향상시키는 데이터 처리 플랫폼
     * 시스템 로그와 특정 이벤트의 변경 피드를 추적하고, 이를 평가하여 자동으로 적절한 반응을 시작하는 포괄적인 솔루션을 제공
     * 여러 데이터 소스를 통합하고, 관련 변경 사항을 지속적으로 모니터링하며, 스마트하고 자동화된 대응을 트리거함으로써 전체 프로세스를 간소화함
     * 변경 사항 감지를 위해 복잡한 시스템을 구축하거나 대규모 데이터 레이크를 관리하거나 기존 에코시스템에 최신 감지 소프트웨어를 통합할 필요가 없음
     * IoT 통합, 보안 프로토콜 개선, 정교한 애플리케이션 관리 등 이벤트 기반 시나리오 전반에서 활용할 수 있음
     * 개요
          + 전통적인 데이터 처리 방법의 부담 없이 실시간으로 실행 가능한 통찰력을 제공함.
          + 데이터 레이크로 데이터를 복사하거나 데이터 소스를 반복적으로 쿼리할 필요 없이 시스템 변경 및 이벤트를 추적함
          + 쿼리를 사용하여 들어오는 데이터 변경을 지속적으로 평가
          + 변경 사항이 쿼리에서 지정한 기준 및 조건과 일치할 때, 쿼리의 결과 집합이 업데이트됨
          + 이러한 업데이트는 특정 요구 사항에 맞춘 맥락 인식 반응을 유발
     * Drasi는 세 가지 구성 요소로 작동함:
          + Sources: 소프트웨어 시스템 내 데이터 저장소에 연결하여 로그와 피드를 모니터링하고 데이터 변경을 추적함.
          + Continuous Queries: 모니터링된 변경 사항에 사전 정의된 기준과 조건을 적용하여 중요한 변경 사항을 식별 및 평가함. Drasi에서는 Cypher Query Language를 사용하 여 지속 쿼리를 작성함.
          + Reactions: 지속 쿼리의 결과 집합에 대한 업데이트를 기반으로 자동화된 반응을 실행함
     * 온라인 주문 서비스의 배송 시스템을 예로 들어, Drasi가 이벤트를 해석하고 적절한 반응을 유발하는 방법을 설명하면
          + 주문 상태 변경을 모니터링하기 위해 주문 관리 시스템에 소스를 구성하고, 드라이버가 배달 준비가 되었을 때를 감지하기 위한 두 번째 소스를 구성
          + 두 소스의 데이터를 결합하여 픽업 준비가 된 주문과 이용 가능한 드라이버를 일치시키는 지속 쿼리를 생성
          + 드라이버에게 알림을 보내 픽업 구역으로 이동하도록 알리는 반응을 정의
          + 이 간소화된 설정은 드라이버가 신속하게 정보를 받아 배송 프로세스를 최적화

GN⁺의 정리

     * Drasi는 데이터 변화 감지와 즉각적인 조치를 간소화하는 플랫폼으로, 실시간 데이터 통합과 자동화된 반응을 통해 효율성을 높임.
     * Cypher Query Language를 사용하여 지속 쿼리를 작성하며, 시스템 로그와 이벤트를 모니터링하여 중요한 변경 사항을 식별함.
     * 초기 릴리스로 커뮤니티가 플랫폼을 배우고 실험할 수 있도록 하며, 기여와 피드백을 장려함.
     * 유사한 기능을 가진 프로젝트로는 Apache Kafka와 같은 실시간 데이터 스트리밍 플랫폼이 있음.
"
"https://news.hada.io/topic?id=17452","글을 쓰는 사람과 그렇지 않은 사람","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          글을 쓰는 사람과 그렇지 않은 사람

     * 기술에 대한 예측을 하기를 꺼리지만, 이번만큼은 확신이 있음: ""수십 년 후에는 글을 쓸 수 있는 사람이 많지 않을 것임""
          + 작가가 되면 알게 되는 가장 이상한 사실 중 하나는 많은 사람들이 글쓰기에 어려움을 겪는다는 것임
          + 글쓰기가 어려운 이유는 근본적으로 어렵기 때문임. 잘 쓰려면 명확하게 생각해야 하고, 명확하게 생각하는 것은 어려움
     * 글쓰기는 많은 직업에 퍼져 있으며, 더 권위있는 직업일수록 더 많은 글쓰기를 요구하는 경향이 있음
          + 글쓰기에 대한 만연한 기대와 글쓰기의 불가피한 어려움이라는 두 가지 강력하고 상반된 힘이 엄청난 압박감을 만들어냄
          + 그래서 저명한 교수들이 표절에 손을 대는 경우가 종종 있고, 이러한 사례에서 가장 인상적인 점은 표절의 경솔함임
          + 그들이 훔치는 물건은 보통 글을 조금이라도 잘 쓰는 사람이라면 노력 없이도 알아낼 수 있는 가장 평범한 상투적인 것들임. 즉, 글쓰기 실력이 절반도 안 된다는 뜻
     * 최근까지 이러한 상반된 힘에 의해 만들어진 압력을 해소할 수 있는 편리한 방법이 없었음
          + 더 이상 그렇지 않음. AI가 이 세상을 열어젖혔음. 글쓰기에 대한 거의 모든 압박이 사라졌음
          + AI를 통해 학교와 직장에서 글쓰기를 대신할 수 있게 되었음
     * 결과적으로 세상은 글을 쓰는 사람과 그렇지 않은 사람으로 나뉘게 될 것임
          + 여전히 글을 쓸 수 있는 사람들이 있을 것임. 일부는 글쓰기를 좋아함
          + 하지만 글을 잘 쓰는 사람과 전혀 쓸 수 없는 사람 사이의 중간 지대는 사라질 것임
          + 좋은 작가, 그저 그런 작가, 글을 쓸 수 없는 사람 대신 좋은 작가와 글을 쓸 수 없는 사람만 남게 될 것
     * 이게 나쁜일일까?기술이 발전하면 기술이 쓸모없어지면 사라지는 게 일반적이지 않은가?
          + 나쁜 것임
          + 글쓰기는 곧 생각(사고)이기 때문
          + 사실 글쓰기를 통해서만 할 수 있는 일종의 사고가 있음
     * Leslie Lamport의 말을 인용하면 ""글을 쓰지 않고 생각한다면, 당신은 생각한다고 생각할 뿐""임
          + 따라서 ""글을 쓰는 사람""과 ""그렇지 않은 사람""으로 나뉘는 세상은 생각보다 더 위험함
          + 이는 생각하는 사람과 그렇지 않은 사람의 세상이 될 것임
     * 이런 상황은 전례가 없는 것이 아님
          + 산업화 이전 시대에는 대부분의 사람들의 직업이 그들을 강하게 만들었음. 지금은 강해지고 싶다면 운동을 해야함
          + 그래서 여전히 강한 사람들은 있지만, 스스로 선택한 사람만 있음
     * 글쓰기도 마찬가지일 것임
          + 여전히 똑똑한 사람들이 있겠지만, 그렇게 ""선택한 사람들""뿐일 것임

   “글쓰기“를 “생각을 남에게 전달하기“로 치환해서 읽으니 저는 공감이 되었습니다

   회사에서 몰래보는 일잘러의 AI글쓰기 작가 한준구입니다.
   저는 나를 위한 글과 남을 위한 글로 글을 구분하는데요.
   남을 위한 글, 회사에서 필요한 이메일 같은 형식적인 글쓰기에
   어떻게 써야하는지 고민하는 사람들이 많습니다.
   인공지능을 이용해서 글을 만들어 낸다는 생각에서 머무르지 않고 이렇게 만들어낸 글이 어떤 과정을 거쳤는지 아카이빙해야 글의 독자성을 지킬수 있습니다.

   생각이 담긴 메모가 있거나 내가 잘하는 내용이라면 글쓰는게 크게 어렵지 않은 경험이 있으실거예요. 글쓰기는 혼자서 쓰는게 아닙니다. 내 경험, 내가 만난 사람들, 공간과 함께 쓰는경우가 더 많거든요. 글을 씀에 있어서 인공지능을 통해서라도 비슷한 영감을 얻을 수 있다면 의미있는 글쓰기 과정으로 볼 수 있습니다.

   따라서 인공지능이 글작성을 도와준다고 해서 사람들이 생각을 하지 않는다라는 주장에는 동의하기 어렵네요
   오히려 인공지능이 만들어 낸 글중에서 쓰레기 같은 글을 걸러내려면 지금보다 더 높은 수준의 사고력과 문해력이 필요해질거라 생각합니다.

   다만 우려되는 사항이 글쓰기 전 과정을 인공지능에게 다 위임하고 그 글을 그대로 옮겨적기만 하는 현상인데요. 이건 사람이 인공지능의 숙주가 된 것이나 다름 없기 때문에 경계해야합니다

   동의 합니다. 어떻게 AI 를 활용하는지에 따라 결과는 많이 달라질 것으로 보입니다.

   글을 인용문은 자칫하면 이 게시글이 전하고자 하는 의미와 전체 맥락을 해칠 수 있다고 생각합니다.

   글을 쓰지 않아도 사람은 생각할 수 있습니다. 즉 저 인용문이 적절히 이해될 수 있게 하기 위해선 ""글을 써본 경험이 없는, 글쓰기를 배우지 않은 사람은"" 과 같은 전제 내지 힌트가 필요할 겁니다.

   이 게시글의 요지가 ""글쓰기 또한 배움의 영역으로서 미래에는 선택한 사람들만이 글을 쓸 수 있게 될 것(+글을 써본 사람들만이 그렇지 않는 사람들 보다 상대적으로 생각의 힘을 얻을 수 있을 것)""이기 때문입니다.

   사실과 의견을 구분해서 읽을 줄 알아야죠.
     * 글 쓰는 사람이 줄고 있다 -> 어느 정도 사실
     * 글 쓰기는 생각을 정리하는 좋은 도구다 -> 사실
     * AI를 비롯한 다양한 도구가 글쓰는 기회를 줄인다 -> 의견(?)
     * 글 쓰지 않는 사람은 생각에 폭이 좁아진다 -> 의견(?)
       => 제가 내린 결론은 많이 읽고 많이 써봅시다. (동의)

   단순히 어떤 개념을 이해하는 것과, 그 이해한 것을 설명해내는 것의 차이와 비슷하게 보이네요

   점점 양극화가 심해지는 세상이네요

   댓글들을 읽다보니, 저자가 주장하고 싶은 내용과는 다른 부분을 지적하는 의견들이 많이 보이네요.
   핵심은 글쓰기든, 어떤 행위든 자기가 생각한것, 알고 있는 것을 표현 하는 능력이 중요 하다 인거 같습니다.

   이 커뮤니티에 눈팅만하다 처음으로 댓글을 답니다.
   이 글에 담겨있는 여러가지 의견을 보다보니(제가 첫 글을 쓰는 것만 보아도) 글을 쓰는 행동이 생각에 대해 깊게 생각하며 자신의 생각을 정리하고 또 전달하는 기능에 적합하다는 생각을 다시금 알게 되었습니다.
   어느 순간부터 깊게 생각하는 것을 못하게 된 것 같은 제 자신을 보며 앞으로 점점 글을 쓸 수 없게 될 것 같다는 폴의 의견에 깊게 동감합니다.
   앞으로 발전해가는 기술에 적응해가는 인간의 모습이 이 것일지도 모른다는 생각에 두렵습니다.
   제 생각에 대해 어떻게 생각하시나요?

   폴 그레이엄의 통찰 가득한 글이군요.

   글쓰기의 범위가 맥락에 따라서 오락가락하는 걸로 보입니다. AI가 거의 해결한 것은 좁은 의미의 글쓰기로 흔히 작문이라 부르는 문장 만들어내기 인데요. 글쓰기는 곧 사고라 등치하는 부분에서는 넓은 의미의 글쓰기를 의미하는 것 같습니다. 글감을 생각하고 문장을 AI에게 맡기는 건 필자의 기준에 의하면 글쓰기가 아닌걸까요?

   한편 필자의 글에는 문맥을 무시한 인용과 권위에 호소하는 오류가 포함되어 있다고 생각합니다. ""글을 쓰지 않고 생각한다면, 당신은 생각한다고 생각할 뿐"" 이란 인용문은 글쓰기가 인지 부하를 줄이고 다른 지적 활동의 범위와 목표를 명확하게 하기 위한 수단임을 보이는 상황에서 나온 것이라 생각합니다. 글을 쓰는 사람과 쓰지 않는 사람간의 이분법을 표현하는 문장에 해당 인용을 사용한 것과 인용문 원본을 사용한 사람의 업적을 고려하면 이는 문단 처음 부분에 언급한 논리적 오류의 예시로 판단할 수 있을 것입니다
   https://youtu.be/6QsTfL-uXd8?t=195

   생각을 깊이 하지 않거나 생각의 도구를 활용하지 않는 현대인의 행동 양식에 대한 문제 의식에는 동의하나 그것에 대해 논하는 방식과 잡문이 아닌 형식을 갖춘 글만이 사고의 수단이라는 주장에는 동의하기가 어렵습니다

   디지털 치매와 비슷한 기전일까요?

   ""글쓰기가 생각을 위한 유일한 방법""에는 동의하기 어렵지만 ""글쓰기는 깊이 있는 사고를 하기 위한 상당히 유용한 도구""라는 생각은 평소부터 하고 있었습니다.
   물론 글쓰기 외에도 깊이있는 생각을 보조하기 위한 수단들은 많을 것 같아요. 단지, 가장 보편적이고 접근이 편하며 비교적 효율적이라고 볼 수 있을 것 같습니다.

   제 경우에는 글쓰기를 통해 사고의 구성과 흐름을 체계적으로 정리하는 편입니다. 글을 쓰지 않고 머리 속으로만 정리하면 메모리가 작아서 그런가 잘 안되더라구요.

   '내가 이해하는 것'과 '남을 이해시키는 것'의 차이가 아닐까요? 남을 이해시킬 수 있는 방법이 여러 가지 있을 수 있겠지만 그 중에서 글쓰기가 가장 원초적이면서 어려운 방법이라 생각합니다. 배우는 입장에서도 글만으로 무얼 배운다는건 아주 쉬운 방법은 아닌 것 같고요.

   글을 통한 소통이 소통의 유일한 방법은 아니지만, 시공간의 제약을 덜 받고 상상력의 빈 자리를 허용하는 등의 장점이 있어서 앞으로도 꾸준히 살아남을거라 생각합니다. 그리고 글을 쓰는 사람이 남아 있다는 것은 글을 읽는 사람들이 남아 있다는 뜻일거라 생각합니다.

   GN+도 요약했길래 의견만 가져와봅니다.

  Hacker News 의견

     * 인터넷 이전에는 대면 또는 전화 통화가 주된 소통 방식이었으나, 현재는 문자 메시지, WhatsApp 등 텍스트 기반 소통이 주류임. 온라인 데이트가 주로 사진과 텍스트로 이루어지며, 글쓰기 능력의 중요성이 강조됨
          + 장문의 글쓰기는 다를 수 있지만, 소설을 쓰는 사람들은 항상 소수였음
     * 글을 잘 쓰기 위해서는 명확한 사고가 필요하다는 가정은 잘못된 것임
          + 대부분의 사람들은 명확한 사고가 필요한 상황이 글쓰기와 관련이 없음
          + 명확한 사고는 글쓰기 외에도 다양한 방식으로 가능함
     * 글쓰기와 사고의 관계에 대한 일반화는 현대 기술의 발전으로 인해 다양한 분야에 적용될 수 있음
          + 예를 들어, AI 생성 콘텐츠와 인간이 작성한 콘텐츠의 소비, AI 의료 상담과 인간 의사의 상담 등
          + 부유한 사람들은 더 높은 품질의 인간 서비스를 이용하고, 나머지는 자동화된 결과물에 의존하게 될 가능성이 있음
     * 글쓰기가 깊고 명확한 사고를 위한 유일한 방법은 아님
          + Stephen Hawking은 글쓰기 없이도 복잡한 계산과 수학적 개념을 시각화할 수 있었음
          + 글쓰기와 AI 도구는 깊은 사고를 돕는 훌륭한 도구임
     * AI가 생성하는 저품질 콘텐츠의 결과에 대한 우려가 있음
          + AI로 생성된 콘텐츠로 인해 타인의 지식을 평가하는 능력이 희귀하고 귀중해질 것임
          + 과거에는 직접 대면하여 상대방의 능력을 평가할 수 있었으나, AI로 인해 이러한 능력이 사라질 가능성이 있음
     * 글쓰기와 사고의 관계에 대한 논의에서, 비문해 문화와 문해 문화의 차이를 지적함
          + 과거에는 비문해 문화와 함께 공식적인 구술 문화가 존재했으며, 짧은 비디오 클립의 인기로 인해 구조화된 연설이 부활할 가능성이 있음
     * 글쓰기는 부분 순서의 선형 확장과 유사하다고 생각함
          + 뇌는 한 번에 하나의 글자를 생각하지 않으며, 모든 뉴런이 동시에 활동함
          + 글쓰기는 선형적이며, 이는 글쓰기에 ""명확한 사고""가 부여되는 이유 중 하나임
     * 기술에 대한 예측은 신중해야 하지만, AI가 인간을 대체할 것이라는 급진적인 예측이 있음
          + 사진이 회화를 대체하지 않았듯이, 여전히 글쓰기를 원하는 사람들이 많을 것임
          + 확신을 가지려면 더 많은 데이터가 필요함
     * 점점 더 많은 사람들이 트윗 이상의 복잡한 글을 읽지 못하는 상황에 대한 우려가 있음
          + 소수의 사람들만이 진지하게 읽고 쓸 수 있는 상황이 될 가능성이 있음
          + 보편적 문해 개념이 사라질 위험이 있음

   당신이 정말 이해한다면, 그걸 글이 아닌 다른 방식으로도 설명할 수 있어야지. - 리처드 파이만 -

   리처드 파인만이 아니라 리처드 파이만이라는 파이만 드시는 분인가보군요

   리처드 파인만은 이런말을 한 적이 없는 것 같습니다. 좀 뒤져봤는데 형식은 비슷하지만 뜻은 다른 말은 한 것 같네요.

   엘리트주의적 시각이 깔려 있는 듯 싶네요. ^^
   나는 생각한다, 고로 존재한다"" - 인간이 사고하는 한 존재의 가치와 자아 인식을 이룰 수 있다.

   나쁜 것과 좋은 것이 있으려면 목표가 있어야 하는데, 그 목표가 마치 글쓰기를 하나의 생각 수단으로 쓰는 사람들을 많이 생산하는 것으로 전제되어 있는 것 같은 느낌을 많이 받습니다.
   글쎄요. 그림으로는 생각을 할 수 없는 것인지, 혹은 다른 걸로 생각을 하는 사람이 있으면 안되는 것인지, 혹은 생각을 깊게 하는 사람이 많은 것이 무조건 선인지. 그런 질문들이 떠올라 알쏭달쏭하게 만드네요.

   인터넷에 돌아다니는 텍스트를 보다보면, 원글같이 길게 공들여 쓴 글(사실 길이 자체는 읽기에 그리 긴 것도 아니지만, 경우에 따라서는 긴 글보다 길지 않은 글을 쓰기가 더 어렵습니다)에 대해 깊이 생각하지 않고 누군가의 (최소한의 검증도 거치지 않은) 의견만을 띡 남기는, 속된 말로 ‘뇌를 위탁한‘ 반응들이 꽤 많이 보입니다. 체감상은 점점 많아지는 것 같지만 검증할 방법은 없고요. 최근 트위터에 힌두어 사용자들이 AI로 맥락없는 한글 리플을 잔뜩 다는 현상이 급증하고 있는데, 본질적으로는 그런 AI 리플과 아래 댓글이 뭐가 다른가 싶습니다.

   그래서 저는 원문의 주장에 적극 동의하는 쪽입니다. 아마도 인간과 인간아님을 구분하는 최후의 수단은 글쓰기가 될 것이고, 기술이 발전해도 인간이 쓴 글은 그렇지 않은 글과 다를 것입니다. 그러나 거의 대부분의 인간은 그 경계를 구분해내지 못하거나 굳이 그럴 필요를 못 느낄 것입니다.

   '뇌(사고)를 위탁한' 이라는 말이 와닿네요.
"
"https://news.hada.io/topic?id=17438","Arch - 지능형 프롬프트 게이트웨이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Arch - 지능형 프롬프트 게이트웨이

     * LLM 애플리케이션(에이전트, 어시스턴트, 코파일럿) 보호, 관찰, 개인화를 위한 지능형 7계층 게이트웨이로 사용자의 API와 통합하여 LLM을 최적화
     * 프롬프트 처리와 관련된 중요한 작업을 관리하며, Jailbreak 시도 감지 및 차단
     * 프롬프트에 맞춰 백엔드 API를 호출하여 요청을 처리
     * 업스트림 LLM 간의 지능적 라우팅과 재난 복구 제공
     * 프롬프트와 LLM 상호작용을 중앙에서 관찰 및 관리

주요 기능

     * Envoy 기반: Envoy Proxy 위에 구축되어 HTTP 요청과 같은 방식으로 프롬프트의 인입 및 이출 트래픽을 관리하고, 확장성 있는 LLM 처리 기능을 제공함.
     * Function Calling: API 호출이나 프롬프트에서 매개변수 추출과 같은 빠르고 비용 효율적인 작업을 처리할 수 있도록 설계된 LLM을 통해 에이전트 앱과 RAG 앱을 지원함.
     * Prompt Guard: 별도의 코딩 없이 Jailbreak 시도를 방지하고 안전한 사용자 상호작용을 보장하는 프롬프트 안전장치를 중앙에서 관리함.
     * 트래픽 관리: LLM 호출을 지능적으로 재시도하고, 자동으로 연결을 전환하여 업스트림 연결의 연속적인 가용성을 보장함.
     * 표준 기반 관찰 기능: W3C Trace Context 표준을 사용해 애플리케이션 간의 전체 요청 추적을 가능하게 하며, 지연 시간, 토큰 사용량, 오류율과 같은 메트릭스를 통해 AI 애플리케이션 성능을 최적화할 수 있도록 지원함.
"
"https://news.hada.io/topic?id=17407","JetBrains Rider, 이제 비상업적 사용은 무료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    JetBrains Rider, 이제 비상업적 사용은 무료

     * JetBrains Rider는 .NET 기술 스택 전체와 게임 개발자를 위한 올인원 IDE
     * .NET, ASP.NET Core, MAUI와 같은 프레임워크나 Unity, Unreal Engine, Godot와 같은 게임 엔진을 이용한 개발을 지원
     * 진정한 크로스 플랫폼 IDE로, Windows, macOS, Linux에서 원활한 개발 환경을 제공하며, Android, iOS 및 Mac Catalyst 개발에 대한 지원도 추가
     * 지원하는 기술들
          + .NET Essentials: C#, .NET, F#, NuGet
          + Web: ASP.NET, Blazor, Razor, JS/TS
          + Game: Unreal Engine, Unity, Godot
          + Native App: MAUI, Avalonia, WPF, WInForms
          + 그외 기술 : 원격 개발, EF, Docker, AWS, Azure,

   Rider 외에도 Webstorm, Aqua, RustRover도 비상업적 사용 시 무료 사용이 가능하도록 같이 공개된것으로 보입니다.

   https://blog.jetbrains.com/ko/blog/…

        Hacker News 의견

     * .Net과 게임 개발에 특화된 이유에 대한 질문이 있음. 다른 개발에는 덜 적합한지에 대한 의문이 제기됨
          + 예를 들어, Deno 기반 백엔드 작업에 VS Code를 사용하는 경우 Rider가 덜 적합한 환경인지 궁금해함
     * Microsoft가 Visual Studio for Mac을 중단한 것이 큰 변화임
          + 관련 링크 제공: Visual Studio for Mac 중단 관련 링크
     * Rider가 Godot 및 Unity와의 게임 개발 통합이 뛰어나다고 언급됨
     * .NET 커뮤니티를 위한 변화에 대해 긍정적으로 평가하는 의견이 있음
          + 오랜 기간 .NET 개발자로서 Rider가 현재 Visual Studio보다 훨씬 낫다고 평가함
          + C# 및 F# 사용을 장려하는 의견이 있음
     * WebStorm도 이제 무료로 제공됨
          + 관련 링크 제공: WebStorm 및 Rider 무료 제공 관련 링크
     * VS Code 대신 Rider를 사용할 이유에 대한 질문이 제기됨
          + VS Code의 지연 문제를 경험하지 못했으며, Rider가 제공하는 추가 기능에 대한 궁금증이 있음
     * JetBrains 라이선스는 필요한 기능을 제공하면서 UI가 방해되지 않도록 하는 몇 안 되는 소프트웨어 라이선스 중 하나임
     * Rider는 빠르고 훌륭한 IDE로 평가되지만 모든 프로젝트에 실용적이지는 않음
          + Rider에서 식별자를 더블 클릭하면 전체 식별자가 선택되지 않는 점이 불편함
          + Visual Studio와 달리 CamelHump 설정과 연결되어 있음
          + 시작 프로젝트 작업이 현재 애플리케이션의 실행/디버그를 중단할 때 방해가 됨
          + 파일 템플릿이 정의된 솔루션의 경우 모든 사용자가 수동으로 설정을 활성화해야 하는 번거로움이 있음
     * JetBrains의 무료 비상업적 사용에 대한 조건이 있음
          + 익명 사용 통계 수집을 거부할 수 없으며, 이는 Early Access Program과 유사함
          + 무료 버전은 익명 데이터를 수집하며, 유료 버전은 그렇지 않음
          + 수집되는 익명 데이터의 종류에 대한 명시적인 설명이 필요함
"
"https://news.hada.io/topic?id=17375","Bitwarden이 오픈 소스로부터 멀어지는 것에 대한 우려 제기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Bitwarden이 오픈 소스로부터 멀어지는 것에 대한 우려 제기

     * 비트워든은 암호화된 저장소를 활용하고 다양한 클라이언트/플랫폼을 지원하는 패스워드 관리 서비스임
     * 비트워든은 프리미엄 모델로 운영되며 일부 코드를 오픈 소스로 제공해 왔으나, 오픈 소스에서 더 멀어지고 있다는 새로운 우려가 있음
     * 최근 데스크톱 클라이언트를 빌드하기 위해 ""bitwarden/sdk-internal"" 의존성을 도입하는 클라이언트에 대한 pull request에서 다음과 같은 라이선스 조항이 있었음:

     ""이 SDK를 Bitwarden 이외의 소프트웨어(호환되지 않는 Bitwarden 구현 포함)와 함께 사용하거나 다른 SDK를 개발하는 데 사용할 수 없음""

     * 이로 인해 비트워든 클라이언트가 자유 소프트웨어가 아니게 된다는 문제가 깃헙 이슈에서 제기됨
     * 다른 사용자들도 이 변경 사항과 SDK를 비트워든 이외의 용도로 법적으로 사용할 수 없게 된 점에 우려를 표명

비트워든 설립자의 답변

     * 비트워든 설립자이자 CTO인 Kyle Spearrin은 이 티켓에 댓글을 남김:

     여기에 우려를 공유해 주셔서 감사합니다. 우리는 클라이언트를 위해 SDK를 더 많은 사용 사례에 적용하고 있습니다. 그러나 우리의 목표는 SDK가 GPL 호환성을 유지하는 방식으로 사용되도록 하는 것입니다.
    1. SDK와 클라이언트는 두 개의 별개 프로그램입니다
    2. 각 프로그램의 코드는 별도의 저장소에 있습니다
    3. 두 프로그램이 표준 프로토콜을 사용하여 통신한다는 사실이 GPLv3의 목적상 하나의 프로그램이라는 의미는 아닙니다
       여기서 당신이 하려고 하는 대로 앱을 빌드할 수 있는 것은 우리가 해결할 예정인 문제이며 단순한 버그일 뿐입니다.

     * 이후 티켓은 잠겼고 협력자로 제한됨
     * 앞으로 비트워든과 오픈 소스가 어떻게 될지 지켜볼 일임

비트워든 측 추가 발표

     * 비트워든은 X에 게시하여 이것이 ""패키징 버그""이며 ""비트워든은 오픈 소스 라이선싱 모델에 전념하고 있다""고 재확인함

GN⁺의 의견

     * 비트워든은 패스워드 관리 분야에서 오픈 소스 라이선싱 모델을 지켜온 선두주자였음. 그런 비트워든이 오픈 소스에서 멀어지고 있다는 우려가 제기된 것은 업계에 경종을 울리는 사건임
     * 오픈 소스 프로젝트를 상용화하는 과정에서 라이선스 문제는 늘 민감한 사안임. 비트워든은 이번 사태를 계기로 라이선스 정책을 더욱 명확히 하고 오픈 소스 커뮤니티와의 소통을 강화할 필요가 있음
     * 비트워든 외에도 LastPass, 1Password, Dashlane 등 유사한 패스워드 관리 서비스들이 있음. 이들은 대부분 독점 소프트웨어 모델을 취하고 있어, 오픈 소스 대안으로서 비트워든의 입지가 더욱 중요해졌음
     * 이런 오픈 소스 프로젝트를 도입할 때는 라이선스 호환성 뿐 아니라 장기적인 로드맵, 거버넌스 구조, 기여자 커뮤니티의 건강성 등을 종합적으로 고려해야 함. 단순히 '오픈 소스'라는 이유만으로 선택해서는 안 됨
     * 비트워든 사태는 오픈 소스 프로젝트의 상용화와 지속 가능성에 대한 근본적인 고민을 불러일으킴. 오픈 소스의 가치를 훼손하지 않으면서도 상업적 성공을 거둘 수 있는 새로운 비즈니스 모델에 대한 논의가 필요해 보임

   흐음... 다행히도 Hacker news에 의하면 vaultwarden은 이 이슈와 빗겨나갔군요. 회사에서 단계적으로 보안 강화를 위해 구축 중인데 다행입니다.

   아, 서버측 이슈인가요? 다행이네요

        Hacker News 의견

     * 오픈 소스 개발자는 VC 자금을 받기 전에 신중해야 함. VC가 그들을 소유하게 됨
     * BitWarden을 지원하기 위해 비용을 지불하고 있음. 하지만 그들이 후퇴하고 있는 것이 명확함
          + 비밀번호 관리자 시장은 포화 상태이며, Passkeys와 같은 새로운 기능 구현은 쉽지 않음
          + 그럼에도 불구하고, 모든 주요 플랫폼에서 작동하고 현대적인 기능을 지원하는 거의 유일한 오픈 소스 비밀번호 관리자임
     * BitWarden이 1Password를 모방하기 시작했을 때 우려했음. 마케팅 텍스트, 기능 등이 유사함
          + 비밀번호 관리 도구 간의 차별화가 많지 않음을 이해함
          + BitWarden은 1Password의 오픈 소스 대안이자 Keepass보다 나은 것으로 여겨졌음
     * 두 서비스의 고객임. 초기부터 1Password를 사용했고, 지난 5년 이상 가족 플랜을 사용 중임
          + 팀과 함께 시작할 때 BitWarden을 사용했음. 더 저렴하고 확장 가능하다고 생각했음
          + Bitwarden이 1Password만큼 ""성공적""이 되면, 사람들/회사는 실제로 1Password를 사용할 것임
          + 이제 중요한 것들을 Keepass로 옮기고, 데이터베이스 위에 더 나은 UX 클라이언트를 사용하는 것이 좋을 것 같음
     * 최근 관련 소식: Bitwarden은 더 이상 무료 소프트웨어가 아님
     * 웹 기반 비밀번호 관리자의 매력을 이해하지 못했음. KeePass를 사용하며, 모든 것이 오프라인이고, UI가 무작위로 변경되지 않으며, 모든 것이 단일 .db 파일에 있음
          + 동기화가 필요하면 클라우드 저장소 서비스를 사용함
     * Bitwarden이 UI에서 다크 패턴을 사용하기 시작했을 때 떠났음. 사용자 경험을 향상시키기보다는 방해했음
     * 공식 클라이언트가 vaultwarden과 같은 것을 사용하는 것을 차단하기 시작할 때가 언제일지 궁금함
"
"https://news.hada.io/topic?id=17439","미국에서 과거 조언을 버려야 하는 Regenerative Farming 관행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               미국에서 과거 조언을 버려야 하는 Regenerative Farming 관행

    농업, 기후 변화, 정책 결정

     * Investigate Midwest는 농업, 기후 변화, 정책 결정이 농촌 미국과 그 너머에 미치는 영향을 깊이 탐구하는 저널리즘을 제공함.
     * Josh Payne은 미주리주 Concordia에서 양을 기르는 농부로, 농장을 재생 농업으로 전환하려고 노력함.
     * 재생 농업은 토양과 생태계를 회복시키고 작은 농업 경제를 부흥시키려는 운동임.

    중세기 농업 혁명

     * Charles Payne은 산업 및 화학 혁명이 농업에 영향을 미치던 시기에 성장함.
     * 20세기 후반 미국 농업 생산량은 화학 투입물 덕분에 세 배 증가했지만, 환경적 비용도 발생함.
     * 재생 농업은 기후 변화에 대한 산업의 기여와 그에 대한 취약성을 해결하기 위한 반응으로 부상함.

    세대 간 유산

     * Josh Payne은 영어 교사로 일하다가 15년 전 농장 관리 요청을 받고 농업에 복귀함.
     * 그는 제초제 알레르기를 발견한 후 농장을 변화시키기로 결심함.
     * 현재 Payne 가족은 양을 회전 방목하고 800개의 밤나무를 심어 토양을 회복시키는 실버패스처 방법을 사용함.

    '새로운 옛 방식'

     * 재생 농업은 토양 건강과 농장의 재정적 생존 가능성 및 회복력과 연결됨.
     * Kansas State University의 Chuck Rice 교수는 토양 유기물의 50%가 손실되었다고 경고함.
     * 무경운 농업은 지속 가능한 농업을 위한 첫 번째 단계로, Kansas 주 농부들이 선도하고 있음.

    GN⁺의 정리

     * 이 기사는 세대 간 농업 방식의 변화와 재생 농업의 중요성을 조명함.
     * 재생 농업은 기후 변화에 대응하고 토양 건강을 회복시키는 데 중요한 역할을 함.
     * 농업의 변화는 시간이 걸리며, 현재 전국적으로 이러한 실천에 대한 큰 투자가 이루어지고 있음.
     * 유사한 기능을 가진 산업 내 프로젝트로는 다양한 재생 농업 연구 및 교육 프로그램이 추천됨.

        Hacker News 의견

     * 농업 방식의 변화는 오랜 시간이 걸림. 아이오와의 옥수수 농부인 친척들은 세대에 걸쳐 무경운을 전파하고 있지만, 아직 널리 채택되지 않음. 이유는 인식 부족과 초기 수확량 감소에 대한 두려움 때문임. 정부의 인센티브가 필요함.
     * 재생 농업은 경제적 문제임. 미국 대부분의 지역에서 재생 농업에 대한 재정적 인센티브가 부족하며, 토양의 광물 손실 회복에는 세대가 걸림.
     * 재생 농업 채택에는 여러 도전 과제가 있음. 농부들은 고집이 세고 나이가 많으며, 산업 장비는 재생 농업에 적합하지 않음. 농업용지는 매년 줄어들고 있음. 정부는 식량 가격을 낮게 유지하려고 함.
     * 보조금과 프로그램이 있지만, 대부분의 농부들은 이를 활용하기 어려움. 대규모 농장은 전문 보조금 작가를 두고 있지만, 소규모 농장은 접근이 어려움.
     * 농업 관광과 지역 식품 구매에 대한 관심이 증가하고 있음. 재생 농업은 더 나은 식품을 제공함. 저비용으로 시작할 수 있는 기술도 있음.
     * 무경운 기술은 물리적 토양 건강과 유기 탄소를 증가시키지만, 제초제 사용이 증가함.
     * 과거의 농업 관행은 유럽 정착민에 의해 무시되었음. 재생 농업은 미국 경제 환경이 강요한 것을 하지 않는 것을 요구함. 기업들이 농장을 매입하여 협동조합의 다양성을 감소시킴.
"
"https://news.hada.io/topic?id=17371","Show GN: 실시간 계좌 입출금 데이터 1초 수신 - 페이액션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 실시간 계좌 입출금 데이터 1초 수신 - 페이액션

   안녕하세요!
   커머스/뱅킹 자동화 SaaS 페이액션입니다.

   '실시간 계좌 거래내역을 1초만에 수신할수 있는 기능'을 정식 출시했습니다.

   입출금 발생 즉시 웹훅(Webhook)을 통해 즉각적으로 데이터를 수신하고, 실시간으로 시스템에 활용하실 수 있습니다. 실시간 결제확인, 정산, 자금관리 등 여러 시스템에 연동하여 거래 완결을 1초만에 처리하실 수 있습니다.

   업계에서는 거래가 발생되지 않더라도, 1시간 마다 계좌를 직접 조회해서 데이터가 존재하면 송신하는 방식이 일반적인데요.
   페이액션은 거래 발생시에만, 조회 없이 즉시 데이터를 송신할 수 있는 기술로 서비스를 더 효율적으로 제공합니다.

   해당 기능을 연동하시면 사용자 경험 향상에 크게 기여할 수 있을것이라 기대합니다.

   그리고 유료플랜 이용시 2주 무료제공됩니다.
   부족한 점이 있다면 의견 남겨주시면 열심히 반영하겠습니다.
   페이액션 드림

   https://payaction.app

   SMS방식인거 같은데 휴대폰에 앱을 설치하는 방식인가요?

   http://10combo.com/이 회사 도메인이 맞다면 노션 페이지라도 라다이렉션을 걸어놓는게 신뢰성 측면에서 좋아보입니다.

   네~ 의견 감사합니다!

   api 명세보니까 request시에 apiKey와 secretKey를 같이 넘기던데...탈취 위험은 없을까요?

   해당사항을 포함하여 API이용 편의성 향상을 위해 개발중입니다. 웹훅로그 조회 및 보안수준이 더 향상될것으로 기대합니다.

   혹시 과거 계좌 내역 조회도 가능할까요?

   현재는 계좌등록 및 연동 이후부터 조회가능합니다.
   과거 거래내역 조회 기능은 개발중입니다.

   매우 재밌는 프로젝트네요! 옛날에 쇼핑몰 만들때 안드로이드로 구현했던 경험이... 좋은 서비스 감사합니다! 개인 개발 할 때도 해당 서비스 굉장 재밌게 사용할 수 있겠네요!

   칭찬해 주셔서 감사합니다. 아직 부족한점이 많습니다.
   사용하시면서 불편하신점 있으면 편히 말씀부탁드립니다.
   만족하실수 있도록 노력하겠습니다.

   혹시 일반 개인 계좌도 api를 통해 접근이 가능할까요?

   네, 개인계좌 및 법인계좌 모두 가능합니다.

   저도 취미개발 하다보니 제 계좌도 자동화할 수 있는지가 어쩔 수 없이 관심이 가네요 ㅋㅋ

   관심 보여주셔서 감사합니다.
   계좌 입출금 발생시 즉시 데이터를 수신 받으실 수 있으니 구현 하시려는 기능에 자동화 적용 가능합니다.
"
"https://news.hada.io/topic?id=17348","분산 락킹 구현 방법분산 락킹 구현 방법 (2016)

분산 잠금 구현하기

     * Redis 웹사이트에서 Redlock 알고리듬을 발견하고, 이 알고리듬이 Redis 위에서 내결함성 분산 잠금을 구현한다고 주장함.
     * Redlock에 대한 여러 독립적인 구현이 이미 존재하며, 이 알고리듬에 의존하는 사람이 있을 수 있어 필자의 노트를 공유하기로 결정함.
     * Redis는 일시적이고 빠르게 변하는 데이터를 서버 간에 공유할 때 유용하지만, 강한 일관성과 내구성이 요구되는 데이터 관리 영역으로 확장되는 것은 우려됨.

잠금의 목적

     * 잠금은 여러 노드 중 하나만 특정 작업을 수행하도록 보장하는 역할을 함.
     * 효율성을 위해 잠금을 사용하는 경우, 단일 Redis 인스턴스를 사용하는 것이 더 나을 수 있음.
     * 정확성을 위해 잠금을 사용하는 경우, Redlock은 적합하지 않음.

자원을 잠금으로 보호하기

     * 분산 시스템에서의 잠금은 멀티스레드 애플리케이션의 뮤텍스와 다름.
     * 클라이언트가 파일을 읽고 수정 후 다시 쓰는 동안 다른 클라이언트가 동일한 작업을 수행하지 못하도록 방지함.

펜싱을 통한 안전한 잠금 구현

     * 펜싱 토큰을 사용하여 쓰기 요청에 포함시킴으로써 안전한 잠금을 구현할 수 있음.
     * Redlock은 펜싱 토큰을 생성하는 기능이 없어 안전하지 않음.

합의를 위한 시간 사용

     * Redlock은 비동기 모델에서의 알고리듬과 달리 시간에 대한 가정을 많이 함.
     * 시스템 시계가 이상하게 작동하면 키의 만료가 예상보다 빠르거나 느려질 수 있음.

Redlock의 시간 가정 깨기

     * Redlock은 동기 시스템 모델을 가정하며, 네트워크 지연, 프로세스 일시 중지, 시계 오류가 제한적일 때만 올바르게 작동함.
     * GitHub의 90초 패킷 지연 사건과 같은 사례가 Redlock의 안전성을 위협할 수 있음.

결론

     * Redlock은 효율성 최적화 잠금에는 불필요하게 무겁고, 정확성을 요구하는 상황에는 충분히 안전하지 않음.
     * 정확성을 위해 잠금이 필요한 경우, ZooKeeper와 같은 적절한 합의 시스템을 사용하는 것이 좋음.

GN⁺의 정리

     * Redlock 알고리듬은 분산 시스템에서의 잠금 구현에 대한 중요한 논의를 제공함.
     * 이 글은 분산 시스템에서의 시간 가정과 안전성 문제를 강조하며, 올바른 잠금 구현의 중요성을 설명함.
     * ZooKeeper와 같은 대안 시스템을 추천하며, 분산 시스템의 복잡성을 이해하는 데 도움이 됨.

        Hacker News 의견

     * Temporal을 사용하여 분산 잠금을 구현한 경험이 있으며, 현재까지 잘 작동하고 있음. Temporal의 기능을 활용하여 분산 잠금의 구현이 간단함
     * 블로그 댓글에서 알고리즘의 중요한 점을 놓쳤다는 의견을 남겼으며, 이로 인해 알고리즘의 거부가 약한 점에 기반하고 있다는 점을 지적함
     * 현대 컴퓨터와 API를 사용하면 대략적인 시간 대기를 할 수 있으며, GC 일시 중지는 제한적이고 단조로운 시계가 작동함. 이는 수용 가능한 가정임
     * 자동 해제 메커니즘을 비판하는 것과 알고리즘의 목표와 시스템 모델을 비판하는 것은 다른 문제임
     * Redlock은 다양한 사용 사례에서 성공적으로 사용되었으며, 타임아웃을 적절히 설정하면 경합 조건을 유발하기 어려움. 작은 타임아웃 설정은 설계 오류임
     * 저수준 및 알고리즘 지식을 업데이트 중이며, 재미로 무언가를 만들고 싶지만 대부분의 자료가 장난감 수준이거나 매우 복잡함
     * PostgreSQL을 사용하여 분산 잠금을 구현하며, 트랜잭션을 시작하고 조언 잠금을 얻어 트랜잭션이 해제될 때까지 잠금 상태를 유지함
     * 데이터베이스 연결 상태를 확인하지 않았다는 점을 깨달았으며, 데이터베이스 관련 작업이 아닌 경우 잠금을 잃었을 가능성이 있음
     * Deno와 Deno KV를 사용하여 분산 잠금을 구현했으며, FoundationDB를 기반으로 함
     * Redis를 검토했으나 PostgreSQL을 사용하여 요청을 SET 작업으로 변환하여 정확성을 해결함
     * 많은 엔지니어들이 정확성 문제를 중요하게 여기지 않으며, 메시지가 손실되거나 순서가 잘못될 수 있는 경계 사례가 존재함
     * 잠금에 타임아웃을 설정하는 것이 좋은 아이디어이며, 클라이언트가 충돌할 경우 OS나 감독자가 잠금을 해제함
     * 잠금이 필요 없는 경우, 버전 토큰을 사용하여 데이터 무결성을 유지할 수 있음. UUID와 같은 고유한 값이 사용될 수 있음
"
"https://news.hada.io/topic?id=17372","GIMPS에서 새로운 소수를 발견함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GIMPS에서 새로운 소수를 발견함

     * 발견된 수는 2^136279841 - 1 로 메르센 소수임.
     * 41,024,320 자릿수의 수임.
     * 이전의 가장 큰 소수인 2^82589933 - 1와의 차이가 천육백만 이상.
     * Probable Prime Test를 사용하여 발견한 첫 번째 소수임.

   소수의 간격도 매우 커지는군요.
   그런 소수가 아마도 무한히 있을 텐데, 그 중의 하나라도 찾는 것이 놀라운 발견이라는 걸 생각하면 당연하면서도 신비롭습니다.

   자릿수도 읽기 어렵군요..ㄷㄷ
"
"https://news.hada.io/topic?id=17413","모바일 광고 데이터의 글로벌 감시 무법지대","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        모바일 광고 데이터의 글로벌 감시 무법지대

     * 개인 정보 추적의 확산
          + 최근 뉴저지의 프라이버시 법을 둘러싼 헌법적 논쟁에서, 누구나 모바일 앱과 웹사이트에서 수집된 데이터를 통해 개인의 일상적인 움직임을 추적할 수 있는 능력이 있음을 보여주는 소송이 제기됨.
          + **Atlas Data Privacy Corp.**는 소비자 데이터 브로커와 온라인 인물 검색 서비스에서 개인 정보를 제거하는 서비스를 제공하며, 뉴저지 법 집행관들을 위해 151개의 데이터 브로커를 상대로 소송을 제기함.
          + 이 소송은 Daniel’s Law를 위반한 데이터 브로커들을 대상으로 하며, 이 법은 법 집행관, 정부 관계자, 판사 및 그 가족의 정보를 상업적 데이터 브로커에서 완전히 제거할 수 있도록 허용함.
     * Babel Street와의 소송
          + Atlas는 Babel Street라는 기술 회사를 상대로 소송을 제기했으며, 이 회사는 특정 지역의 모바일 기기 움직임을 추적할 수 있는 플랫폼을 제공함.
          + Babel Street의 LocateX 플랫폼은 모바일 광고 ID를 사용하여 개별 모바일 사용자를 추적할 수 있는 기능을 제공함.
          + Atlas의 조사관은 Babel Street의 무료 체험을 통해 뉴저지 경찰관의 주소와 일상적인 움직임을 파악할 수 있었음.
     * 무영장 감시의 위험성
          + Atlas는 Babel Street의 체험 기간 동안 모스크, 법정, 낙태 클리닉 등 고위험 지역을 방문한 사람들의 정보를 찾을 수 있었음.
          + Babel Street의 기능은 특정 기기의 야간 위치를 파악할 수 있어, 개인의 일상적인 움직임을 추적하는 데 사용될 수 있음.
     * 모바일 광고 ID의 문제점
          + 모바일 광고 ID(MAID)는 개인 식별 정보를 사용하지 않고 개별 모바일 고객을 구분하기 위해 고안되었으나, 현재는 개인 정보를 포함한 MAID 목록을 판매하는 산업이 존재함.
          + Atlas는 뉴저지 법 집행관의 MAID 기록을 찾을 수 있었으며, 많은 데이터 브로커가 이를 판매하고 있었음.
     * 프라이버시 보호 조치
          + Android와 iOS 기기에서 광고 ID를 삭제하거나 추적을 차단하는 방법이 제공됨.
          + 사용자는 기기의 설정을 통해 앱의 위치 접근 권한을 관리할 수 있음.

GN⁺의 정리

     * 이 기사는 모바일 광고 데이터의 확산과 개인 정보 보호의 중요성을 강조함.
     * Babel Street와 같은 플랫폼은 개인의 일상적인 움직임을 쉽게 추적할 수 있는 위험성을 내포하고 있음.
     * 법적 규제가 미비한 상황에서 개인 정보가 상업적으로 거래되는 문제를 지적하며, 프라이버시 보호를 위한 법적 조치의 필요성을 강조함.
     * 유사한 기능을 가진 다른 프로젝트로는 SilentPush와 Fog Reveal 등이 있음.

        Hacker News 의견

     * 경찰이 데이터를 접근할 수 있는지에 대한 논의가 필요하며, 현재 규제가 전혀 없는 것은 문제임
          + Babel Street의 ""야간"" 모드는 개인의 위치를 쉽게 파악할 수 있게 해주며, 이는 위험한 기능임
     * Google에서 근무했던 경험을 통해 앱에 가짜 데이터를 제공하는 기능을 제안했으나, 이에 대한 반응을 통해 인센티브의 중요성을 깨달음
     * Google의 광고 관련 작업을 했던 사람과의 대화에서 추적이 사용되지 않는다고 주장했으나, 회사 내에서도 추적 수준을 숨기려는 시도가 있을 것이라 의심함
          + 데이터가 부적절하게 사용될 경우, 이를 수집한 회사가 책임을 져야 함
     * Pi-Hole을 사용하여 네트워크 전체의 광고를 차단할 수 있음
          + 관련 비디오도 제공됨
     * 광고는 모든 생태계를 감염시키는 바이러스와 같음
     * 데이터 소유를 범죄화하고, 발견 시 법정 손해배상을 청구하는 것이 유일한 해결책이 될 것임
          + 음악 산업에서의 전례가 있음
     * Apple의 IDFA 제거 이후 iOS에서의 작동 방식에 대한 설명 요청
          + 광고 ID는 특정 앱에만 관련이 있으며, iOS에서 다른 식별자를 접근하기 어려움
          + ""25%의 Apple 폰""이란 구형 iOS 버전을 사용하는 폰을 의미하는지 의문임
     * 광고 기술 산업에서 12년, ""드라이브 투 스토어"" 캠페인 데이터를 사용하는 회사에서 3년 근무 경험
          + GDPR에 따라 데이터를 익명화했으나, 위치 데이터는 여전히 개인 식별 가능함
          + 프랑스 및 유럽의 다른 산업은 여전히 규제가 부족함
     * 2003년 체코 공화국 방문 시 처음으로 모바일 데이터가 제3자에게 판매되는 경험
          + 국경을 넘자마자 스팸 SMS가 도착했으며, 이는 스마트폰 이전의 시기였음
          + 현재 상황이 더 악화된 것에 놀라지 않음
"
"https://news.hada.io/topic?id=17449","'Factorio'가 실리콘밸리를 매혹한 방법  ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       'Factorio'가 실리콘밸리를 매혹한 방법

     * Factorio는 체코 개발사 Wube Software에서 만든 게임으로, 외계 행성에 불시착한 후 탈출용 로켓을 만드는 것이 목표
     * 플레이어는 석기시대 수준의 석재 화로에서 시작해 로켓 연료를 정제하는 단계까지 산업 혁명을 재현해야 함
     * 어느 일요일, 콘크리트 공장에 물을 공급하기 위해 호숫가에 펌프를 설치하던 중 게임에 몰두한 나머지 몇 시간 동안 물을 마시지 않았던 적이 있음
     * Factorio에 심각하게 빠진 사람들은 24시간을 하루 종일 플레이하기도 함
     * 중독성 때문에 ""Cracktorio""라는 별명이 붙었지만, 게임은 전혀 플레이어를 유혹하지 않음
     * 그래픽은 20년 전 수준이고, 지름길은 항상 처벌받으며, 잘하려면 비율 계산에 시간을 써야 함
     * 바로 이런 엄격함 때문에 기술 업계에서 숭배받는 게임이 됨

기술 업계에서의 인기

     * Shopify의 CEO Tobias Lütke는 직원들에게 Factorio 구매를 지원함
     * Factorio가 글로벌 공급망을 구축하는 Shopify에 도움이 될 것이라고 믿기 때문
     * Elon Musk는 실제 삶에서 Factorio를 스피드런하고 있다고 트윗했고, OpenAI 공동창업자이자 Tesla AI 책임자였던 Andrej Karpathy도 열렬한 팬
     * 내 친구 중 둘은 수학자 출신 기술자인데 전형적인 Factorio 플레이어
     * 플레이어들은 버그를 발견하면 직접 코드를 보고 해결하겠다고 제안하기도 함

소프트웨어 개발자들에게 호소력 있는 이유

     * 공장 건설은 컴퓨터 프로그램 작성과 비슷함
     * 정리되지 않고 꼬인 코드를 스파게티 코드라고 하듯, Factorio에서는 얽히고설킨 컨베이어 벨트를 스파게티 기지라고 부름
     * 해결책은 모두 예전 실수를 뜯어고치고 새로 시작하는 리팩토링
     * 공장 건설은 조직을 성장시키고 제품을 출하하는 것과도 유사해 훌륭한 교육 도구로 여겨짐
     * Stripe 고문이자 Complex Systems 팟캐스트 진행자 Patrick Mackenzie는 운영관리를 배우려면 Toyota 같은 회사에서 수습을 하거나 관련 학위를 따야 한다고 말함
     * 하지만 대부분의 기술 업계 종사자들은 그런 기회가 없으므로 Factorio가 개념을 보여주는 최고의 도구가 될 수 있음
     * 소프트웨어 개발자 Kenton Varda는 Factorio를 면접 과제로 사용한 적이 있음
     * Factorio에서는 약력이 화려하거나 매력적인 화술을 가진 사람보다 조용히 좋은 결정을 내리고 영광에 연연하지 않는 사람들이 더 인상적이었기 때문

게임의 재미에 대한 고찰

     * 비디오 게임은 재미있어야 하는 게 아닌가 하는 의문이 들 수 있음
     * Mackenzie조차 때로는 출근하는 기분으로 Factorio를 켰다고 인정함
     * Kovařík은 Euro Truck Simulator의 예를 들며, 많은 사람들이 자신이 하는 일 자체는 좋아한다고 말함
     * 그저 업무 과정에서 방해되는 것들 때문에 직장을 싫어할 뿐
     * Kovařík 자신도 프로그래머로 일하면서 이런 경험을 했음
     * 자신이 존경하지 않는 사람 밑에서 일하게 되자 사직하고 게임 제작에 뛰어들었고, 12년 후 30명의 직원을 거느리게 됨
     * Factorio에서 플레이어는 상사도, 서류 작업도 없이 자신의 최선을 다할 자유가 있음

집단 지성의 발현

     * Factorio의 광팬들은 비디오 게임보다는 맨해튼 프로젝트에 더 걸맞은 집단 두뇌력을 보여줌
     * 가장 중요한 주제 중 하나인 벨트 밸런싱은 1950년대 벨 연구소의 Charles Clos가 전화 교환기 효율화를 위해 개척한 Clos 네트워크로 계산할 수 있음
     * 최근에는 수학 정리를 증명하는 데 사용되는 SAT 솔버라는 더 강력한 도구를 적용하기 시작함
     * Kovařík은 이를 예상하지 못했지만 기쁘게 생각함
     * 그는 공동창업자 Tomáš Kozelek을 바둑 대회에서 만났는데, 단순한 규칙에서 끝없는 전략의 깊이를 발견할 수 있다는 점에서 Factorio에 영감을 얻었다고 함

모드를 통한 난이도 조절

     * 플레이어들이 만든 수많은 모드 중에는 게임을 몇 배는 어렵게 만드는 것들도 있음
     * 가장 악명 높은 Pyanodon은 숙련자도 1000시간 이상 플레이해야 클리어할 수 있음
     * 레딧 유저들은 ""삶이 얼마나 없는지를 시험하는 것""이라고 평함
     * 하지만 개발자 kingarthur1991은 어려움이 과장되었다며, 전문가들에게 초심자 시절의 도전 의식을 되찾게 하는 것이 목적이라고 말함

양가감정과 잠재된 가능성

     * Factorio에 천재들이 몰두하며 지적 에너지를 소진하는 모습에서 양가감정이 듦
     * 포켓몬 잡기에 열중하는 아이들이 다른 세기에는 나비학자가 되었을지도 모른다는 생각이 듦
     * 외계 행성에서 탈출하는 사람들이 새로운 적성과 관심사를 가지고 나올 수 있기를 기대함
     * Kovařík은 많은 사람들이 Factorio를 계기로 공학적 사고와 프로그래밍에 눈을 뜨게 되었다는 이야기를 들었다고 함
     * 한 플레이어는 Factorio가 계기가 되어 코딩을 배우고 관련 분야 취업에 성공했다는 사연을 포럼에 올리기도 함

GN⁺의 의견

     * Factorio는 그 자체로 복잡한 시스템을 시뮬레이션하는 학습 도구로서 큰 가치가 있음. 실제 산업 현장에서 활용될 수 있는 개념과 사고방식을 익히는 데 도움이 될 것으로 보임
     * 하지만 지나친 몰입이 현실에서의 생산성 저하로 이어질 우려도 있음. 게임과 현실의 균형을 잡는 것은 결국 개인의 조절 능력에 달려있다고 봄
     * 유사한 게임으로는 Minecraft, Satisfactory, Dyson Sphere Program 등이 있음. 이처럼 복잡한 시스템을 다루는 게임들이 증가하고 있어 산업으로의 응용 가능성에 주목할 필요가 있음
     * 물론 과도한 중독은 경계해야 할 것임. 그러나 창의력과 문제해결력을 기를 수 있는 Factorio 같은 게임들의 교육적 잠재력 역시 간과해선 안 될 것임. 적절한 활용 방안에 대한 고민이 필요해 보임

   너무 재미있어요. DLC에서는 우주로 확장되어서 새로운 재미가 있네요.

   너무 노가다가 많은 게임이던데..
   이런류 게임은 많아서 굳이 이 게임이 좋은지는 모르겠네요.

   멀티플레이를 할 때 트렐로로 칸반보드 만들어놓고 생산량 개선이나 테크트리 업그레이드를 계획했던 적이 있습니다. 온라인 협업을 연습하기 좋은 게임입니다

   저도 정말 좋아하는 게임입니다. 얼마 전 dlc가 나와서 다시 플레이하고 있는데 참 재밌어요. 개발사가 절대 할인하지 않는다 공언해 만약 플레이 생각이 있다면 기다리지 않고 바로 구매하길 추천합니다.

   이야기만 많이 들어서.. 어떤게임일지 점점 더 궁금해지네요..

        Hacker News 의견

     * Factorio를 하는 많은 사람들을 알고 있지만, 개인적으로는 너무 일처럼 느껴짐. 대신 오픈 소스 프로젝트에 기여하는 것이 더 생산적일 것 같음
          + FPS나 RPG 같은 게임을 선호하며, 이는 업무와 명확히 구분됨
     * Factorio의 매력 중 하나는 프로그래머처럼 생각할 수 있다는 점이지만, 이로 인해 게임에 빠져들기 어려움
     * 더 이상 컴퓨터 게임을 하지 않음
          + Factorio를 마지막으로 플레이했으며, 주말을 잃고 두통을 겪음
          + MMORPG와 Civilization IV도 비슷한 경험이었음
          + 게임에 적합하지 않거나 더 많은 여유 시간이 필요할지도 모름
     * Factorio가 일과 비슷해서 좋아하며, 이는 내가 가장 좋아하는 게임임
          + 게임에서 너무 야심차게 변하면 다시 일로 돌아갈 수 있는 신호가 됨
          + Factorio에 에너지가 없다면 일에도 에너지가 없을 것이므로 강요할 필요가 없음
     * Factorio를 여러 번 시작하고 다시 시작했으며, 자동화된 기차 네트워크에서 항상 문제를 겪음
          + Factorio를 좋아한다면 Mindustry도 즐길 수 있을 것임
     * ""생산적이지 않아서 이 게임을 싫어한다""는 의견이 많음
          + 왜 ""생산적이어야 한다""는 목표가 삶을 소비해야 하는지 의문임
     * Factorio를 좋아한다면 Shapez 2를 시도해보길 권장함
     * ""Factorio: Space Age""가 며칠 전에 출시되었으며, 개인적으로 일요일을 이 게임에 보낼 예정임
     * Shopify의 공동 창업자이자 CEO인 Tobias Lütke는 직원들이 Factorio를 구매할 수 있도록 비용을 지원함
          + Shopify는 글로벌 공급망을 구축하고 있으며, Factorio는 이러한 사고 방식을 게임으로 만듦
"
"https://news.hada.io/topic?id=17419","Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.

   이번 주에 있었던 일, 계획, 일상, 자랑, 고민, 추천 등 하고 싶은 말을 댓글로 작성해주세요.

   피크민을 아시나요. 포켓몬고의 나이언틱이 만든 걷기 게임인데, 요즘 유행하나보더라고요. 깔았더니 매일매일 산책가고 있어요. 날씨가 좋아 걷기 좋아요.
"
"https://news.hada.io/topic?id=17386","Citizen - MVC기반의 Node.js 웹 어플리케이션 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Citizen - MVC기반의 Node.js 웹 어플리케이션 프레임워크

     * 확장 가능한 웹 사이트를 빠르게 구축하기 위해 설계된 MVC 기반 웹 애플리케이션 프레임워크
     * 전통적인 서버사이드 웹앱, SPA, RESTful API의 기반으로 사용 가능
     * 장점
          + 설정보다 관습 우선(Convention over configuration)이지만 여전히 유연함
          + SEO 친화적인 URL을 사용하는 서버 측 라우팅을 별도 설정 없이 지원
          + 서버 사이드 세션 관리 제공
          + 키/값 저장소: 요청, 컨트롤러 동작, 객체, 정적 파일을 캐시 가능
          + 쿠키, 세션, 리디렉션, 캐시 등을 관리하기 위한 간단한 지시문 제공
          + 컴포넌트 포함 및 체이닝을 통한 강력한 코드 재사용 옵션 제공
          + 동일한 패턴으로 HTML, JSON, JSONP, 일반 텍스트 제공 가능
          + ES 모듈과 Node (CommonJS) 모듈 지원
          + 개발 모드에서 핫 모듈 교체(HMR) 가능
          + 템플릿 리터럴 또는 consolidate에서 지원하는 엔진을 사용한 뷰 렌더링
          + 직접적인 의존성 적음
"
"https://news.hada.io/topic?id=17391","기업의 권력이 거버넌스를 불안정하게 만드는 방법을 보여주는 신간 책","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 기업의 권력이 거버넌스를 불안정하게 만드는 방법을 보여주는 신간 책

     * 기술 쿠데타: 실리콘 밸리로부터 민주주의를 구하는 방법
          + Stanford HAI 정책 연구원 Marietje Schaake는 기술 기업의 무제한 권력이 민주주의 법치를 위협하고 있음을 경고함.
          + 그녀는 기술 기업들이 정부의 역할을 침해하고 있으며, 사이버 보안, 경찰 시스템, 선거, 군사 방어 정책 등에서 과도한 역할을 하고 있음을 설명함.
     * 사기업이 국가의 역할을 점점 더 맡고 있는 방식
          + 정보 통제와 무제한의 행동 권한을 가진 기업들이 정부의 역할을 대체하고 있음.
          + NSO Group Technologies와 같은 기업은 Pegasus 스파이웨어를 통해 개인 기기를 해킹할 수 있는 능력을 판매함.
          + 이러한 기술은 정치적 반대자, 판사, 기자 등의 민감한 정보를 해킹할 수 있는 능력을 제공함.
     * 민주적 기관이 다시 주도권을 잡기 위한 방법
          + 기업이 정부, 민주주의, 국제법에 미치는 영향에 대한 인식과 이해가 필요함.
          + 디지털 영역에서도 법적 명확성, 책임 메커니즘, 투명성 조치가 필요함.
          + 전통적인 법률과 규제를 디지털 영역에 적용하고, 기술 발전에 맞춰 국제법과 규제를 강화해야 함.
     * 디지털화의 도전에 대응하기 위한 새로운 민주적 정부의 재발명
          + 입법자들이 독립적인 기술 전문가의 도움을 받아 기술의 영향을 이해할 수 있도록 해야 함.
          + 정부가 기술 기업에 아웃소싱하는 과정에서 공공 책임 확장을 통해 책임을 강화해야 함.
     * 기술 기업의 에너지 사용과 관련된 긴장
          + 데이터 센터의 에너지 사용에 대한 투명성이 부족하며, 이는 자원 사용의 투명성과 좋은 거버넌스를 저해함.
          + 대규모 데이터 센터 프로젝트가 지역 사회에 미치는 영향을 평가하기 위한 표준화된 투명성 및 보고 요구 사항이 필요함.
     * 예방 원칙과 AI
          + 예방 원칙은 혁신이 사회에 미치는 영향을 평가하기 위한 일시적인 중단을 요구함.
          + AI와 같은 기술 혁신에 대해 예방 원칙을 적용하여 예상치 못한 문제를 방지해야 함.
     * 미국인들이 기술 기업의 위협을 이해하는 데 느린 이유
          + 전 세계적으로 기술 기업의 권력 남용으로 인한 피해가 발생하고 있지만, 미국인들은 이를 먼 문제로 인식함.
          + Cambridge Analytica 사건과 같은 사례가 미국 내에서도 발생하며, 기술 기업의 권력 남용이 미국 민주주의에 영향을 미침.
     * 민주적 시민으로서의 역할
          + 소비자들은 기술 사용에 대해 선택할 수 있지만, 이는 충분하지 않음.
          + 기술 기업의 권력 남용에 대한 독립적인 감시와 대항 권력이 필요함.
          + 시민들은 정치적 의제를 형성하고, 지도자들에게 더 많은 것을 요구해야 함.

GN⁺의 정리

     * Marietje Schaake의 책은 기술 기업의 무제한 권력이 민주주의에 미치는 영향을 경고하며, 이를 해결하기 위한 다양한 방안을 제시함.
     * 기술 기업의 정보 통제와 무제한의 행동 권한이 정부의 역할을 대체하고 있으며, 이는 민주주의 법치를 위협함.
     * 디지털 영역에서도 법적 명확성, 책임 메커니즘, 투명성 조치가 필요하며, 예방 원칙을 통해 기술 혁신의 사회적 영향을 평가해야 함.
     * 시민들은 기술 기업의 권력 남용에 대한 독립적인 감시와 대항 권력을 요구하며, 정치적 의제를 형성해야 함.

        Hacker News 의견

     * 미국에서는 정부와 기업의 통제 외에도 사람들이 법을 제정하는 것이 중요하다는 의견이 있음. 그러나 실제로는 그렇지 않음. 법이 누구에게 이익이 되는지를 물어보는 것이 중요함. 예를 들어, 제약 회사에 유리한 법이 제정되어 약값이 비싸지는지, 아니면 약값을 통제하는지 등을 고려해야 함.
          + 연방 최저 임금이 $7.25인 상황에서 이익을 보는 사람은 일반인이 아님.
          + 시민들이 자신들에게 이익이 되는 법을 제정해야 하며, 특히 Citizens United v. Federal Election Commission 판결을 뒤집는 것이 중요하다는 의견이 있음.
          + 미디어가 기업 광고주에 의존하고 있어 기업의 과잉을 반대하기 어려운 상황임.
     * 소프트웨어가 재산권을 침해하고 있다는 의견이 있으며, 이를 ""techno feudalism""이라고 부름. 기업이 소프트웨어를 소유하고 사람들은 이를 임대하는 형태임.
     * 인터넷이 모든 사람을 연결하고 정보의 자유로운 흐름을 가능하게 하지만, 이는 사람들의 신뢰를 약화시키고 있음.
          + 자유로운 발언은 중요하지만, 사람들은 이를 이용해 속이거나 강요할 수 있음.
          + Ken Thompson의 ""Reflections on Trusting Trust""에서 컴퓨터에 의존해 신뢰를 구축할 수 없다는 결론을 내림.
          + 사회에서 신뢰가 필요하지만, 온라인에서 거짓 정보가 빠르게 퍼져 사람들은 자연스러운 신뢰를 잃고 있음.
     * 정부와 기업이 사람들에 대항하고 있다는 의견이 있음.
          + 정부가 기업에게 압력을 가해 정부가 할 수 없는 일을 하도록 함.
          + 기업이 협조하지 않으면 분할 위협을 받음.
     * 기술 규제에 대한 논의에서 독립적인 기술 전문가의 필요성이 강조됨.
          + 미국 의회는 과거에 기술 평가 사무소를 운영했으나 1995년에 폐지됨.
          + 독점이 문제이며, 강력한 셔먼법 집행이 필요하다는 의견이 있음.
     * 민주적 기관이 다시 통제권을 갖도록 하기 위한 방법에 대한 논의가 있음.
          + 독립적인 전문가의 필요성과 그들의 독립성을 보장하는 방법에 대한 의문이 제기됨.
          + 기업이 에너지나 물 사용량을 공개해야 하는지에 대한 논의가 있음.
     * 미국의 전력망이 한계에 도달하고 있으며, 데이터 센터의 증가로 인해 재앙이 발생할 가능성이 있다는 우려가 있음.
     * 정부의 지리적 모델이 인터넷 시대에 적합하지 않다는 의견이 있음.
          + 과거에는 정부가 자국 내에서 법을 집행할 수 있었으나, 인터넷에서는 국경을 넘나드는 제품과 서비스가 문제임.
     * 스마트폰이 보안의 통제권을 장악하고 있다는 우려가 있음.
          + 정부 서비스 접근이 완전히 민영화되었으며, 이는 편리함을 대가로 한 것임.
          + 사람들이 보안을 포기하고 편리함을 선택한 결과, 기업이 정부를 대체하고 있다는 의견이 있음.
"
"https://news.hada.io/topic?id=17358","Next.js 15 정식 버전 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Next.js 15 정식 버전 릴리즈

   Next.js 15 정식 버전이 2024 컨퍼런스에 맞추어 릴리즈 되었습니다. 아래는 이전 Next.js 15 RC 2 에서 설명한 변경 사항이 포함 되어 있지 않습니다. 변경 사항들을 알고 싶으면 먼저 읽어보세요.
     * Caching Semantics (Breaking): 다음 동작에 대해서 더 이상 캐쉬 작업이 기본이 아닙니다. 변경 이유는 Partial Prerendering(PPR)나 서드파티 라이브러리와 상호작용할 때 문제가 발생할 수 있어, 기본 캐시 방식을 재검토했습니다. 이전에는 force-cache가 기본값이었지만, 이제는 no-store로 변경해 기본적으로 캐시되지 않도록 하여 더 예측 가능한 성능과 데이터를 제공합니다.
          + fetch 요청은 이제 기본적으로 캐시되지 않으며, no-store가 기본값입니다. 필요한 경우 force-cache 옵션으로 캐싱을 설정할 수 있습니다.
          + GET Route Handlers 역시 기본적으로 캐시되지 않습니다. force-static 옵션을 통해 캐싱을 사용할 수 있습니다.
          + Client Router Cache는 페이지 이동 시 최신 데이터를 반영하며 기본적으로 캐시되지 않습니다. 이전 동작으로 되돌리려면 staleTimes 옵션을 설정할 수 있습니다.
     * React 19 Support: Next.js 15은 React 19에 맞춰 업데이트되었으며, React 18과도 Pages Router에서 호환성을 유지합니다. App Router는 React 19 RC를 사용하며, 커뮤니티 피드백을 반영해 React 18을 사용하는 프로젝트도 React 19로 업그레이드할 수 있도록 했습니다. 또한 React Compiler가 도입되어 자동 최적화가 가능하며, 수동 메모이제이션을 줄입니다. 이러한 변경은 향후 React 19 정식 릴리즈에 대비한 것입니다.
          + React Compiler (Experimental): React Compiler는 Meta의 React 팀이 만든 실험적인 컴파일러로, JavaScript의 의미와 React 규칙을 이해하여 코드를 자동으로 최적화합니다. 이를 통해 개발자가 useMemo 및 useCallback 같은 API를 통해 수동으로 메모이제이션 할 필요를 줄여줍니다. Next.js 15에서 지원되며 현재 Babel 플러그인으로만 제공되며, 빌드 시간이 느려질 수 있습니다.
          + Hydration Error Improvements: Next.js 15은 이전 버전에서 향상된 에러 메시지와 하이드레이션 오류 처리 방식을 더욱 발전시켰습니다. 이제 하이드레이션 오류가 발생하면, 오류의 소스 코드와 문제 해결 방법에 대한 제안을 함께 보여줍니다. 이는 개발자가 오류를 쉽게 이해하고 수정할 수 있도록 도와줍니다.
     * Turbopack Dev: Turbopack 은 이제 안정화 되었고 빠른 속도는 여러분의 개발 경험을 향상 시켜줍니다. 로컬 서버 시작은 약 76%, Fast Refresh 는 96%, 캐쉬 없는 첫라우트 컴파일은 약 45% 향상 되었습니다.
     * unstable_after API (Experimental): unstable_after는 Next.js 15에서 도입된 실험적 API로, 사용자 응답 후에 로깅이나 분석과 같은 부차적인 작업을 처리할 수 있게 해줍니다. 서버리스 함수는 응답이 완료되면 즉시 실행을 멈추기 때문에, 이를 해결하기 위해 after()를 사용하여 응답이 완료된 후에도 작업을 지연하여 실행할 수 있습니다. 로딩, 통계 데이터등을 외부 시스템과 동기화 할 수 있습니다.

   신규 프로젝트는 vue3 아니면 sveltekit으로 갑니다.

   Next15 가 지원하는 React는 19부터인데.. React 19는 아직 RC 타이틀을 안 떼고 있네요

   다른 분이 말씀하신것처럼 기능 변경상에 이슈가 있어서 아직 rc 이긴 한데 그 부분 제외하고는 stable 이라고 볼 수 있을 듯 합니다.

   쉽지 않을 겁니다. React SPA 개발자들 뿔났던 <Suspense> 사건이 있거든요.
   이슈: https://github.com/facebook/react/issues/29898
   상황: https://x.com/sophiebits/status/1801663976973209620

   https://x.com/timneutkens/status/1848464958830612729 관련한 메인테이너의 질답 트윗
"
"https://news.hada.io/topic?id=17357","Microsoft, 고객 클라우드 제품 보안 로그 수주일 분실 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Microsoft, 고객 클라우드 제품 보안 로그 수주일 분실 발표

     * 보안 로그 손실
          + Microsoft는 일부 클라우드 제품의 보안 로그가 2주 이상 손실되었음을 고객에게 알림
          + 9월 2일부터 9월 19일까지 Microsoft의 내부 모니터링 에이전트의 버그로 인해 로그 데이터 업로드에 문제가 발생함
          + 보안 사고로 인한 것이 아니며, 로그 이벤트 수집에만 영향을 미쳤음
          + Business Insider가 처음으로 이 로그 데이터 손실을 보도함
          + 로그는 사용자 로그인 정보 및 실패 시도 등의 이벤트를 추적하여 네트워크 침입을 식별하는 데 도움을 줌
          + 로그 손실로 인해 고객 네트워크의 무단 접근 식별이 어려워질 수 있음
          + 영향을 받은 제품은 Microsoft Entra, Sentinel, Defender for Cloud, Purview 등임
          + Microsoft는 문제를 해결하기 위해 서비스 변경을 롤백했으며, 영향을 받은 고객에게 지원을 제공할 것임
     * 중국 해킹 사건과의 연관성
          + Microsoft는 작년에 미국 정부 부서의 이메일을 호스팅하는 클라우드에서 보안 로그를 제공하지 않아 비판을 받음
          + 중국 해커 Storm-0558이 Microsoft 네트워크에 침입하여 미국 정부 이메일에 접근함
          + 미국 국무부는 더 높은 등급의 Microsoft 라이선스를 통해 보안 로그에 접근하여 침입을 식별함
          + Microsoft는 2023년 9월부터 낮은 요금제의 클라우드 계정에도 로그를 제공하기 시작함
     * GN⁺의 정리
          + Microsoft의 보안 로그 손실은 클라우드 보안에 대한 중요성을 다시 한번 상기시켜 줌
          + 로그 손실로 인해 고객의 네트워크 보안이 일시적으로 취약해질 수 있는 위험이 있음
          + 중국 해킹 사건과의 연관성은 보안 로그의 중요성을 강조하며, 기업들이 보안 로그에 대한 접근성을 높이는 것이 필요함
          + 유사한 기능을 가진 보안 솔루션으로는 Splunk, IBM QRadar 등이 추천됨

        Hacker News 의견

     * Azure를 실제 프로덕션 환경에서 사용하는 것은 사용자 책임임. $100,000의 무료 크레딧이 있어도 한 달 이상 사용하지 않음. 비싸고 인터페이스가 사용자 친화적이지 않으며, 제품이 프로덕션 워크로드에 신뢰할 수 없음.
          + Microsoft는 더 잘할 수 있을 것이라고 생각함.
     * 거의 모든 팀이 VM에서 실행하는 애플리케이션에 버그가 있었음. 애플리케이션 로그를 스토리지로 푸시하는 과정에서 문제가 발생함. 많은 팀이 수동으로 에이전트를 재시작해야 했음.
     * Microsoft의 제품이 영향을 받았음. Entra, Sentinel, Defender for Cloud, Purview 등이 포함됨.
          + Entra가 영향을 받은 것은 심각함. 하지만 SSO 로그가 필요한 사람은 많지 않음.
     * Microsoft의 해외 사이버 보안 실패와 의도적인 무시를 다룬 기사를 잊지 말아야 함.
     * 어떤 정보 작전이 이를 지원했는지 궁금함.
     * 시스템 로그가 플랫폼의 취약점을 드러냈다는 의혹이 있음. 마케팅 부서는 로그를 잃어버리고 시간을 벌려고 한다는 냄새가 남.
     * NSA가 로그를 훔쳤는지 의문임.
     * Azure의 Batch Service는 별로임. 작업 스케줄러가 전혀 정확하지 않음.
     * 왜 이 문제를 공개적으로 인정했는지 궁금함.
"
"https://news.hada.io/topic?id=17385","LTESniffer: 오픈소스 LTE 다운링크/업링크 도청기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   LTESniffer: 오픈소스 LTE 다운링크/업링크 도청기

LTESniffer - 오픈 소스 LTE 다운링크/업링크 스니퍼

     * LTESniffer는 오픈 소스 LTE 다운링크/업링크 스니퍼로, 활성 사용자들의 다운링크 제어 정보(DCI)와 무선 네트워크 임시 식별자(RNTI)를 디코딩하여 수집함. 이를 통해 다운링크 및 업링크 데이터 트래픽을 디코딩할 수 있음.
     * 보안 애플리케이션 및 연구를 위한 API를 제공하며, 기존의 오픈 소스 스니퍼들이 충족하지 못하는 요구 사항을 해결함.
     * 세 가지 주요 작업을 지원하는 보안 API를 개발함: 1) 신원 매핑, 2) IMSI 수집, 3) 기능 프로파일링.

  LTESniffer를 쉽게 설명하자면

     * LTESniffer는 셀 타워와 스마트폰 간에 주고받는 LTE 무선 메시지를 캡처할 수 있는 도구임.
     * 암호화된 메시지를 해독할 수는 없지만, 암호화되지 않은 부분을 분석할 수 있음. 예를 들어, MAC 및 물리 계층의 헤더와 같은 암호화되지 않은 부분을 분석할 수 있음.

  윤리적 고려사항

     * LTESniffer의 주요 목적은 셀룰러 네트워크에 대한 보안 및 분석 연구를 지원하는 것임.
     * 업링크-다운링크 사용자 데이터를 수집하기 때문에 LTESniffer 사용 시 지역 규정을 준수해야 함.

  기능

    새로운 업데이트 v2.1.0

     * 서브프레임의 IQ 원시 데이터를 파일로 기록하는 기능 지원
     * 기록된 파일을 사용한 오프라인 디코딩 지원
     * 다운링크 모드에서 API 활성화 (신원 수집 및 매핑 API에만 적용)

    새로운 업데이트 v2.0.0

     * 업링크 스니핑 모드를 위한 두 개의 USRP B 시리즈 지원
     * 몇 가지 버그 수정
     * LTESniffer는 FALCON과 srsRAN 라이브러리를 기반으로 구현됨.
     * 실시간 디코딩, LTE Advanced 및 LTE Advanced Pro 지원, 다양한 전송 모드 및 최대 20MHz 기지국 지원.

  하드웨어 및 소프트웨어 요구사항

    운영체제 요구사항

     * 현재 LTESniffer는 Ubuntu 18.04/20.04/22.04에서 안정적으로 작동함.

    하드웨어 요구사항

     * 실시간 LTE 트래픽 디코딩을 위해 다수의 물리적 코어를 가진 고성능 CPU가 필요함.
     * Intel i7 CPU, 최소 16GB RAM, 256GB SSD 저장소 권장.

    SDR

     * LTESniffer는 업링크 및 다운링크 스니핑 모드에 따라 다른 SDR을 필요로 함.
     * 다운링크 트래픽 스니핑을 위해 srsRAN 라이브러리가 지원하는 대부분의 SDR과 호환됨.

  GN⁺의 정리

     * LTESniffer는 LTE 네트워크의 보안 연구 및 분석을 지원하는 중요한 도구로, 암호화되지 않은 메시지 분석에 유용함.
     * 지역 규정을 준수하여 사용해야 하며, 불법적인 목적으로 사용하지 않도록 주의해야 함.
     * 유사한 기능을 가진 다른 오픈 소스 프로젝트로는 srsRAN이 있으며, 개인 LTE 네트워크 설정에 유용함.
"
"https://news.hada.io/topic?id=17340","State of AI 리포트 2024 [구글 Slide, 213P] ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 State of AI 리포트 2024 [구글 Slide, 213P]

   매년 발표되는 인공지능의 현재와 미래를 폭넓게 조망한 보고서

2024년 분야별 요약

     * Research
          + 프론티어 연구소들의 성능은 수렴하고 있으나, OpenAI는 o1 출시 이후 계획 및 추론 분야에서 선두를 유지하고 있음
          + 파운데이션 모델은 수학, 생물학, 유전체학, 물리 과학, 신경 과학 등 다양한 분야로 확장되면서 언어를 뛰어넘는 능력을 보여주고 있음
          + 미국의 제재에도 불구하고 중국의 (V)LLM은 커뮤니티 리더보드에서 계속 상승하고 있음
     * Industry
          + NVIDIA는 3조 달러 클럽에 잠시 머물면서 세계에서 가장 강력한 기업으로 남아있으며, 규제 당국은 GenAI 내의 권력 집중을 조사하고 있음
          + 기존 GenAI 기업들은 수십억 달러의 수익을 올리는 반면, 스타트업들은 비디오 및 오디오 생성 등의 분야에서 서서히 발판을 잡아가고 있음. 기업들이 모델에서 제품으로의 여정을 시작하고 있지만, 가격 책정과 지속 가능성에 관한 장기적인 질문은 여전히 해결되지 않고 있음
          + 공개 시장의 강세로 인해 AI 기업들의 가치는 9조 달러에 달하며, 비상장 기업에 대한 투자 수준도 건전하게 성장하고 있음
     * Politics
          + 글로벌 거버넌스 노력이 정체되는 동안, 미국과 EU에서는 논란의 여지가 있는 법안이 통과되는 등 국가 및 지역 차원의 AI 규제는 계속 진전되고 있음
          + 컴퓨팅 요구 사항의 현실은 빅테크 기업들로 하여금 확장에 대한 실제적인 물리적 제약과 자체 배출 목표를 직시하게 만들고 있음. 한편, 정부 자체의 역량 구축 시도는 계속 지연되고 있음
          + 선거, 고용 및 기타 민감한 영역에서 예상되는 AI의 영향은 아직 어떤 규모로도 실현되지 않고 있음
     * Safety
          + 이전에 인류의 멸종에 대해 경고했던 기업들이 기업 판매와 소비자 앱 사용을 늘려야 할 필요성에 직면하면서, 안전에서 가속화로의 분위기 변화가 일어나고 있음
          + 전 세계 정부는 영국을 본받아 연구소를 설립하고 잠재적 취약점에 대한 핵심 국가 인프라를 연구하는 등 AI 안전에 대한 국가 역량을 구축하고 있음
          + 제안된 모든 탈옥에 대한 'fix'는 실패했지만, 연구자들은 보다 정교하고 장기적인 공격에 대해 점점 더 우려하고 있음

Predictions 향후 12개월 동안의 10가지 예측

    1. 주권 국가가 미국 대형 AI 연구소에 100억 달러 이상을 투자하면서 국가 안보 심사가 이루어짐
    2. 코딩 능력이 전혀 없는 사람이 만든 앱이나 웹사이트가 바이럴 히트를 기록함 (예: 앱스토어 100위 이내)
    3. 프론티어 연구소들은 데이터 수집 관행에 대한 소송이 시작되면서 의미 있는 변화를 구현함
    4. 입법자들이 과도한 조치를 취했다고 우려하면서 EU AI 법의 초기 시행은 예상보다 온건해짐
    5. OpenAI o1을 대체하는 오픈소스 대안이 다양한 추론 벤치마크에서 이를 능가함
    6. 도전자들은 NVIDIA의 시장 지위에 의미 있는 타격을 주는 데 실패함
    7. 기업들이 제품-시장 적합성을 달성하는 데 어려움을 겪으면서 휴머노이드에 대한 투자 수준이 감소함
    8. Apple의 온디바이스 연구 결과가 강력해지면서 개인용 온디바이스 AI에 대한 추진력이 가속화됨
    9. AI 과학자가 생성한 연구 논문이 주요 ML 컨퍼런스나 워크숍에서 채택됨
   10. GenAI 기반 요소와 상호작용하는 비디오 게임이 돌파구적인 지위를 달성함

   저는 Apple의 온디바이스 연구 결과가 강력해지면서 개인용 온디바이스 AI에 대한 추진력이 가속화됨 이 부분이 두드러질 것 같아요. 그리고 거기도 치열해질 것 같아요.

   State of AI 2023 보고서 [구글 Slide, 163P]
   State of AI 2022 보고서 [구글 Slide, 114P]
   State of AI 2021 보고서 [구글 Slide, 188P]
   State of AI 2020 보고서 [구글 Slide, 183P]
"
"https://news.hada.io/topic?id=17402","Stable Diffusion 3.5 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Stable Diffusion 3.5 공개

     * 소비자 하드웨어에서 실행 가능하고 유연하게 커스터마이징할 수 있는 여러 버전의 모델이 포함되며, 대부분의 사용 사례에 무료로 사용 가능함
     * Hugging Face에서 Stable Diffusion 3.5 Large와 Stable Diffusion 3.5 Large Turbo 모델을, GitHub에서 추론 코드를 다운로드할 수 있음
     * 릴리스되는 모델들
          + Stable Diffusion 3.5 Large: 80억 개의 파라미터를 가진 기본 모델로, Stable Diffusion 제품군 중 가장 강력함. 1메가픽셀 해상도에서 전문적인 사용 사례에 이상적임
          + Stable Diffusion 3.5 Large Turbo: Stable Diffusion 3.5 Large의 증류 버전으로, 4단계만에 훌륭한 프롬프트 준수와 함께 고품질 이미지를 생성함. Stable Diffusion 3.5 Large보다 상당히 빠름
          + Stable Diffusion 3.5 Medium (10월 29일 출시 예정): 25억 개의 파라미터를 가지고 있으며, 향상된 MMDiT-X 아키텍처와 학습 방법으로 소비자 하드웨어에서 바로 실행되도록 설계됨. 품질과 쉬운 커스터마이징의 균형을 맞춤. 0.25~2메가픽셀 해상도의 이미지 생성 가능

모델 개발 과정

     * 모델 개발 시 유연한 기반을 제공하기 위해 커스터마이징 가능성을 우선시함
     * 이를 위해 Query-Key Normalization을 트랜스포머 블록에 통합하여 모델 학습 과정을 안정화하고 추가 파인튜닝과 개발을 단순화함
     * 다운스트림 유연성을 지원하기 위해 일부 트레이드오프가 필요했음
     * 동일한 프롬프트에서 시드를 달리할 때 출력의 변동성이 커질 수 있음. 이는 기본 모델에서 더 폭넓은 지식 기반과 다양한 스타일을 보존하는 데 도움이 되도록 의도한 것임
     * 그러나 구체성이 부족한 프롬프트는 출력의 불확실성을 증가시킬 수 있으며, 미적 수준이 다를 수 있음
     * Medium 모델의 경우 아키텍처와 학습 프로토콜을 여러 차례 조정하여 품질, 일관성, 다중 해상도 생성 능력을 향상시킴

Stable Diffusion 3.5의 장점

     * 커스터마이징 용이성: 특정 창작 니즈에 맞게 모델을 쉽게 파인튜닝하거나, 맞춤형 워크플로우 기반 애플리케이션 구축 가능
     * 효율적인 성능: 특히 Stable Diffusion 3.5 Medium과 Stable Diffusion 3.5 Large Turbo 모델은 표준 소비자 하드웨어에서 무거운 요구 사항 없이 최적화되어 실행됨
     * 다양한 출력: 광범위한 프롬프팅 없이도 다양한 피부색과 특징을 가진 전 세계 사람들을 대표하는 이미지 생성 가능
     * Stable Diffusion 3.5 Large는 프롬프트 준수에서 시장을 선도하고 이미지 품질에서 훨씬 더 큰 모델과 견줄 만함
     * Stable Diffusion 3.5 Large Turbo는 크기 대비 가장 빠른 추론 시간을 제공하면서도 이미지 품질과 프롬프트 준수에서 매우 경쟁력 있음
     * Stable Diffusion 3.5 Medium은 다른 중간 크기 모델을 능가하며, 프롬프트 준수와 이미지 품질의 균형을 맞춰 효율적이고 고품질의 성능을 제공함

Stability AI Community License 개요

     * 비상업적 사용에는 무료: 개인과 조직은 과학 연구를 포함해 비상업적 용도로 무료 사용 가능
     * 연 매출 100만 달러 이하 상업적 사용에는 무료: 스타트업, 중소기업, 창작자는 연 매출 100만 달러 미만인 경우 상업적 용도로 무료 사용 가능
     * 출력물의 소유권: 제한적인 라이선싱 의미 없이 생성된 미디어의 소유권 보유 가능
     * 연 매출 100만 달러 이상인 조직은 Stability AI에 연락하여 엔터프라이즈 라이선스 문의 가능

모델 액세스 방법

     * 모델 가중치는 현재 Hugging Face에서 셀프 호스팅용으로 사용 가능
     * Stability AI API, Replicate, ComfyUI, DeepInfra 등의 플랫폼을 통해서도 모델 액세스 가능

안전성에 대한 Stability AI의 의지

     * Stability AI는 안전하고 책임감 있는 AI 관행을 믿으며, 개발 초기 단계부터 성실성을 보장하기 위한 의도적인 조치를 취함
     * 악의적 행위자에 의한 Stable Diffusion 3.5의 오용을 방지하기 위해 합당한 조치를 취하고 있음

향후 계획

     * 10월 29일 Stable Diffusion 3.5 Medium 공개 출시 예정
     * 곧이어 다양한 전문 사용 사례를 위한 고급 제어 기능을 제공하는 ControlNets 출시 예정
"
"https://news.hada.io/topic?id=17455","공공 라디오 채널에서 발견된 신비로운 숨겨진 신호 (2013) [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                공공 라디오 채널에서 발견된 신비로운 숨겨진 신호 (2013) [비디오]

     * FM-RDS로의 여정
          + Oona Räisänen이 공공 라디오 채널에서 발견한 신비로운 숨겨진 신호를 하드웨어 해킹, 리버스 엔지니어링, 약간의 암호 해독을 통해 그 의미를 알아낸 과정에 대한 이야기임
     * GN⁺의 정리
          + 이 발표는 하드웨어 해킹과 리버스 엔지니어링을 통해 숨겨진 신호를 발견하고 해독하는 과정을 다루고 있어 흥미로움
          + 기술적 호기심을 자극하며, 라디오 신호의 숨겨진 측면을 탐구하는 데 유용할 수 있음
          + 비슷한 기능을 가진 프로젝트로는 GNU Radio와 같은 오픈 소스 소프트웨어가 있음

        Hacker News 의견

     * 한 사용자는 FM 채널을 스펙트럼 분석기로 모니터링하다가 이상한 신호를 발견한 이야기가 신선하다고 느꼈음. 이 강연은 Radio RDS 표준을 배우고 신호를 디코딩하며 약하게 암호화된 버스 관련 정보를 찾는 과정에 대한 것임. 매우 재미있다고 언급함
          + 그녀의 웹사이트에서 최근 RDS 디코더 도구를 출시한 것을 발견했음. 이 도구는 USB RTL-SDR 수신기나 여러 형식의 사전 녹음된 파일과 함께 작동함
     * 스마트폰에서 FM RDS를 수신하고 디코딩할 수 있는 앱과 하드웨어가 여전히 있는지 궁금해하는 의견이 있었음. 일부 전화 칩은 FM 라디오 수신기를 가지고 있었지만, 유선 헤드폰을 안테나로 사용해야 하는 등의 제한이 있었음. USB SDR로는 가능하지만, 여전히 스마트폰에 이러한 기능이 잠재되어 있으면 좋겠다고 언급함
          + Play Store에서 검색했지만 스트리밍 라디오 앱과 SDR 앱으로 가득 차 있었음
     * RDS의 교통 알림(""TA"") 기능이 방송국에 의해 남용되지 않도록 어떻게 막는지 궁금해하는 의견이 있었음
     * 2013년에 이 강연을 실제로 봤다는 사용자가 있었음. 시간이 이렇게 많이 지났다는 것이 믿기지 않는다고 언급함
     * 뉴욕의 WCBS를 5.105 GHz에서 수신했지만, 왜 그런지 알 수 없었고, 그들의 엔지니어들도 이유를 몰랐다고 언급한 사용자가 있었음
     * ""그래서 나는 일을 시작했다""라는 해커의 사고방식을 사랑한다고 언급한 사용자가 있었음
     * 시끄러운 매체 내에서 스테가노그래픽 콘텐츠를 신뢰성 있고 안전하게 인코딩하는 방법에 대해 궁금해하는 의견이 있었음
     * 이러한 탐구 과정을 사랑하며, 그 결과를 공유하는 것이 매우 재미있다고 언급한 사용자가 있었음
     * CCC 웹사이트와 그들이 자체적으로 비디오를 호스팅하는 것을 좋아한다고 언급한 사용자가 있었음. 일부 사람들을 위해 YouTube 비디오 링크를 공유함
"
"https://news.hada.io/topic?id=17366","Stripe의 11억 달러 암호화폐 베팅이 성과를 거둘수 있을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Stripe의 11억 달러 암호화폐 베팅이 성과를 거둘수 있을까?

     * 암호화폐 팬들은 수년 동안 블록체인 기술이 글로벌 결제 속도를 높이고 비용을 절감할 수 있다고 주장해 왔음
     * 결제 대기업 Stripe가 Bridge를 11억 달러에 인수하는 베팅을 통해 마침내 그 가능성을 현실로 만들고 있으며, 암호화폐 업계는 기뻐하는 중
          + Bridge의 연간 거래량을 기준으로 한 추정 연간 매출은 약 1,200만 달러임
          + 거래량 기준 수수료를 부과하는 Bridge는 8월 연간 결제 규모가 50억 달러에 달했다고 밝혔음
          + 2023년 말 시리즈 A에서 Bridge는 약 1억 달러로 평가
          + Bridge는 Ribbit Capital, Index Ventures, Sequoia Capital 등으로부터 총 5,800만 달러를 펀딩받았음
     * Stripe에게 Bridge 인수는 암호화폐를 사용하여 신속한 결제를 추가하고 전 세계 고객을 빠르게 확보할 수 있는 방법을 찾기 위한 것

Bridge 소개

     * Bridge는 2년 반 된 샌프란시스코 기반의 스테이블코인을 사용한 결제에 중점을 둔 스타트업
     * 기업이 달러나 유로를 블록체인 기반 스테이블코인으로 전환하고 이를 사용하여 해외 직원이나 공급업체에 지불하도록 지원
     * 전통적인 국제 결제 방식보다 개선된 것으로 서비스를 홍보하며, 고객에는 빠르게 성장하는 데이터 라벨링 스타트업 Scale AI와 협력하는 결제 프로세서 Airtm이 포함

스테이블코인 결제 동향

     * 스테이블코인은 지난 1년 동안 암호화폐 기업과 전통적인 결제 기업 모두의 주요 관심사였음
     * 스테이블코인은 고정된 가치를 가지고 있어 결제 목적으로 사용하기 쉬움
     * 소비자보다 기업 고객을 대상으로 하는 것이 더 쉬울 수 있음
     * 결제 기업과 암호화폐 기업으로부터 인수 관심을 받은 Rail의 CEO Bhanu Kohli는 현재 매각 계획이 없다고 밝혔음

Bridge의 운영 방식

     * Bridge는 운영을 위해 기존 금융 시스템에 크게 의존함
     * 미국 은행 계좌를 통해 협력 기업으로부터 달러를 받고, 이 자금을 사용하여 Circle과 Tether로부터 스테이블코인을 구매함
     * Bridge는 협력 기업을 대신하여 계약자와 공급업체에 스테이블코인을 보냄
     * 멕시코의 Bitso, 아프리카의 Yellow Card 등 현지 암호화폐 서비스와 제휴하여 수령인이 스테이블코인을 현지 통화로 현금화할 수 있도록 함

Stripe의 암호화폐 정책 변화

     * Stripe는 최근 몇 달 동안 결제에 암호화폐를 사용하는 것에 대해 입장을 바꾸었음
     * Stripe는 2018년 높은 비용, 느린 거래 시간, 비트코인을 결제 수단으로 사용하기 어려운 점 등을 이유로 비트코인 결제 지원을 중단했음
     * 4월 Stripe의 공동 창업자이자 사장인 John Collison은 Stripe 기반 체크아웃을 사용하는 상인이 스테이블코인을 수락할 수 있도록 하는 기능을 공개했음

스테이블코인 결제의 위험성

     * 스테이블코인은 미국에서 아직 합법적인 화폐 형태가 아니므로 제한된 연방 감독과 소비자 보호를 받음
     * 미국 의회는 스테이블코인에 대한 규제 프레임워크를 제공하는 법안 진전에 어려움을 겪고 있어 불확실성이 존재함
     * Stripe의 암호화폐 이니셔티브는 과거 주요 은행 파트너 중 하나를 불안하게 만들었음
     * Wells Fargo는 Stripe의 암호화폐 결제 확대 노력에 대해 우려를 제기했고, 결국 Stripe 및 기타 결제 기업과의 관계를 완전히 끊었음

GN⁺의 의견

     * 스테이블코인을 통한 국제 결제는 기존 방식보다 속도와 비용 면에서 장점이 있지만, 아직 규제와 소비자 보호 측면에서 불확실성이 존재함
     * 기업들이 스테이블코인 결제를 도입할 때는 규제 변화에 대한 모니터링과 소비자 보호를 위한 대책 마련이 필요해 보임
     * 금융 시스템과의 연계성, 현금화 과정의 편의성 등 실제 사용자 경험 개선도 주요 과제임
     * 페이팔, 페이오니아 등 기존 핀테크 기업들도 블록체인 기술을 활용한 국제 송금 서비스에 관심을 가지고 있어 경쟁이 심화될 것으로 예상됨
     * AI, 크리에이터 이코노미 등 새로운 분야에서 스테이블코인 활용 사례가 나오고 있어 이에 주목할 필요가 있음
"
"https://news.hada.io/topic?id=17368","Quicky - Next.js 앱을 빠르게 디플로이 & 관리하는 CLI도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Quicky - Next.js 앱을 빠르게 디플로이 & 관리하는 CLI도구

     * 셀프 호스팅 Next.js 프로젝트의 배포 및 관리를 간소화하는 CLI 도구
     * 원격 서버에서 Next.js 앱의 전체 라이프사이클을 단순화하는 것이 목적
     * GitHub에서 초기화, 배포부터 도메인 및 SSL 인증서 설정까지 쉽게 관리 가능함
     * 주요 기능
          + GitHub 통합 : 공개 및 비공개 GitHub 저장소에서 Next.js 프로젝트 초기화, 배포, 관리가 가능. GitHub와의 원활한 통합을 통해 개발 워크플로우 간소화
          + 프로세스 관리 : PM2를 활용하여 애플리케이션 라이프사이클 및 모니터링 수행. 프로세스 상태 추적 및 로그 확인이 용이
          + 프로젝트 유지보수 : 배포된 프로젝트의 업데이트 및 제거가 간단함. 버전 관리와 롤백 용이
          + 도메인 및 SSL 자동화 : Nginx 설정을 자동으로 처리하여 커스텀 도메인 연결이 가능. SSL 인증서 자동 발급 및 갱신 지원. 프로젝트에 도메인 추가/제거 자유로움
          + 설정 오버뷰 : 배포된 모든 프로젝트와 도메인 정보를 조회할 수 있음. 프로젝트 현황을 한눈에 파악 가능
"
"https://news.hada.io/topic?id=17397","이번 주 Claude Artifacts로 구축한 모든 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    이번 주 Claude Artifacts로 구축한 모든 것

     * Claude Artifacts 는 HTML, CSS, JavaScript를 사용하여 인터랙티브한 싱글 페이지 앱을 생성하고, Claude 인터페이스 내에서 결과를 확인하며 추가로 개선할 수 있는 기능임
          + 최근 Claude 활동 내역을 SQLite로 변환하여 분석한 결과, 지난 주에 Claude Artifacts를 예상보다 많이 사용했음을 발견함.
          + 이 기능을 통해 문제를 직접 해결하거나 프로토타입을 만드는 데 유용한 도구로 활용함.

[Claude Artifacts로 만든 프로젝트들]

  URL to Markdown with Jina Reader 활용

     * Jina Reader API를 호출하여 웹 페이지 전체 텍스트를 마크다운으로 변환하는 웹 UI 개발
     * URL 입력 → Jina Reader API로 마크다운 생성 → 마크다운 출력 및 ""Copy"" 버튼 제공
     * 모바일 Safari에서 페이지 전체 텍스트를 LLM에 복사/붙여넣기 하기 어려웠던 문제 해결

  SQLite in WASM 데모

     * SQLite의 WASM 빌드에 대한 Hacker News 대화를 계기로 NPM의 @sqlite.org/sqlite-wasm 패키지 발견
     * 간단한 인터랙티브 데모 개발하여 작동 여부 확인

  URL 추출 도구

     * 웹 페이지 텍스트에서 링크된 URL을 추출하고 싶었음
     * 아티팩트를 만들어 rich-text HTML 붙여넣기를 받아들이고 HTML 파서를 사용하여 링크 추출

  클립보드 뷰어

     * 브라우저 클립보드 API를 사용해 다양한 유형의 콘텐츠 붙여넣기 및 정보 확인 디버깅 도구 개발
     * 일반 텍스트, rich text, 파일, 이미지 등을 복사/붙여넣고 브라우저에서 사용 가능한 정보 확인

  Pyodide REPL

     * CSP 헤더에서 https://cdn.jsdelivr.net/pyodide/ 발견
     * Pyodide(Python compiled to WebAssembly)가 아티팩트에서 로드 가능하도록 Anthropic 개발팀이 의도적으로 설정했음을 암시
     * 작동 여부 증명을 위한 간단한 데모 개발

  사진 카메라 설정 시뮬레이터

     * 자바스크립트로 카메라 설정 시뮬레이션이 가능한지 궁금했으나 버그가 있고 결과가 인상적이지 않았음
     * Fabric.js 라이브러리 발견

  LLM 가격 계산기

     * Google Gemini를 사용한 비디오 스크래핑 실험의 일환으로 가격 계산기 개발
     * Gemini의 저렴한 가격에 대한 자체 계산을 신뢰하지 못해 개발

  YAML to JSON 변환기

     * YAML 구문의 특정 측면을 상기시키기 위해 YAML을 입력하면 JSON으로 실시간 변환해주는 도구 개발

  OpenAI Audio

     * OpenAI의 새로운 Audio API 탐색
     * 마이크 접근 권한 요청, 오디오 녹음, base64 인코딩 후 OpenAI API로 전송하는 웹 페이지 개발
     * Claude Artifacts는 외부 호스트로 직접 API 요청을 할 수 없지만, 작동하는 버전을 개발한 후 다른 호스팅으로 이전하여 완성 가능

  QR 코드 디코더

     * QR 코드가 포함된 슬라이드를 본 회의에서 QR 코드를 일반 URL로 변환할 방법이 필요했음
     * Claude Artifacts를 사용하여 QR 코드 디코더를 빠르게 개발

  이미지 변환기 및 페이지 다운로더

     * Hacker News에서 누군가 사진을 페이지에 드롭하면 base64 URL로 구워 넣어 ""HTML로 저장""하면 갤러리가 포함된 독립형 페이지를 얻을 수 있는 도구 아이디어 제시
     * 모바일 폰에서 ""HTML로 저장""할 수 없는 경우 유용한 ""다운로드 링크"" 기능 추가 제안 및 프로토타입 개발

  HTML Entity Escaper

     * 휴대폰에서 텍스트 청크의 HTML 엔티티를 이스케이프해야 했기에 Claude에게 도구 제작 요청

  text-wrap-balance-nav

     * Terence Eden의 영감을 받아 text-wrap: balance CSS 속성 실험
     * 슬라이더와 체크박스가 있는 nav bar 예제를 Claude에게 제작 요청

  ARES 포네틱 알파벳 변환기

     * HAM 라디오 통신 운영 자원봉사를 하면서 포네틱 알파벳 사용을 망칠까 봐 걱정되어 Claude에게 도구 제작 요청

[Claude Artifacts의 장점과 한계]

     * 저자는 일주일 만에 14개의 프로젝트를 제작할 정도로 아티팩트를 대량 활용 중
     * 6월 20일 출시 이후로 계속 사용해왔으며, 현재는 하루에 여러 번 새로운 인터랙티브 아티팩트 제작
     * Claude Artifacts는 호기심을 충족시키고, 빠른 프로토타이핑 및 문제 해결을 위한 도구로 유용함
     * 대부분의 도구는 5분 이내에 제작 가능
     * 좀 더 복잡한 OpenAI Audio 도구도 첫 번째 버전에 12분, 두 번째 반복에 9분 등 총 21분밖에 걸리지 않음
     * 그러나 API 호출, 폼 제출, 외부 페이지 링크 등의 기능이 제한적어서 한계에 실망
     * 배운 내용을 바탕으로 자체적인 아티팩트 대안 제작을 계획중
     * 결론적으로 아티팩트 사용을 권장함
          + 아티팩트를 사용하지 않는다면 이 글을 통해 그 이유를 알 수 있기를 바람
          + 나에게 아티팩트는 현재 가장 좋아하는 LLM 기반 도구 중 하나

        Hacker News 의견

     * 기존 코드베이스에 도구를 통합하는 것이 어렵다는 의견이 있음. 독립적인 페이지로 만들 수 있지만, 기존 코드베이스와 호환되도록 코드 검토 및 수정에 많은 시간이 소요됨. 직접 코드를 작성하는 것이 더 나은 선택임.
          + 컴퓨터가 스스로 의미 있는 코드를 작성하는 것이 불가능하다고 생각했던 시절에서 이제는 흔한 일이 되었다는 점이 흥미로움.
          + 새로운 Sonnet 버전은 코드 작성에 뛰어나지만 Claude 앱에서 출력 크기 제한에 자주 부딪힘. 출력 제한이 개선되기를 바람.
     * 2000년대 초 웹 개발을 중단하고 웹 비즈니스에 집중했지만, 이제는 LAMP를 사용하여 창의적인 작업을 할 수 있게 되어 기쁨. 예를 들어, 원하는 마케팅 사이트를 20분 이내에 배포할 수 있음.
     * LLM을 로컬 코드베이스와 함께 사용하는 최선의 방법에 대한 블로그 게시물이나 ""최고의 실천""을 찾고 있음. 커뮤니티에서 추천할 만한 자료가 있을 것이라 기대함.
     * 현재 시대가 놀랍다는 의견. 주말에 Rust를 배우기 시작했으며, ChatGPT 4가 실시간으로 지원해주는 훌륭한 교사 역할을 함.
     * Anthropic이 WeChat과 같은 슈퍼 앱 상태에 가까워지고 있음. 게시된 아티팩트를 쉽게 사이드바에 표시할 수 있는 방법이 필요함. Elon이 이 모델에 관심이 많으므로, xAI가 Claude의 기능을 갖춘다면 그 방향으로 나아갈 것임.
     * Anthropic이 소개한 새로운 패러다임은 콘텐츠가 호스팅된다는 점임. LLM의 출력이 소비자가 사용할 수 있는 자체 호스팅 앱으로 만들어짐. 이는 개인 사이트를 구축하는 것과 크게 다르지 않음.
"
"https://news.hada.io/topic?id=17342","컴퓨팅에서 'Daemon'의 기원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           컴퓨팅에서 'Daemon'의 기원

     * Richard Steinberg는 컴퓨팅에서 'daemon'이라는 단어의 기원을 묻는 이메일을 보냄. 그는 이 단어가 1963년 Project MAC에서 처음 사용되었다고 추측함.
     * Fernando J. Corbato는 'daemon'이라는 단어가 Maxwell의 daemon에서 영감을 받았다고 설명함. 이는 물리학과 열역학에서 분자들을 분류하는 상상의 존재임.

'Daemon'의 어원

     * Jan Danilo는 'daemon'과 'demon'이 과거에 교차 사용되었음을 설명함. 'daemon'은 고대 라틴어에서 왔고, 'demon'은 중세 라틴어에서 유래함.
     * Maxwell의 daemon은 물리학 문제를 해결하기 위해 상상된 존재로, 시스템 프로세스와 유사한 역할을 함.

언어적 혼란

     * Brad Daniels는 'au jus'와 같은 표현의 언어적 혼란을 지적함. 'au'는 프랑스어로 'in'을 의미하지만, 'with'로 번역되기도 함.
     * Richard Hershberger는 영어 문법이 프랑스어 구문을 재구성하여 'with au jus'와 같은 표현을 만들었다고 설명함.

기타 언어적 논의

     * Jane Harrington는 캐나다에서 프랑스어와 영어가 혼합된 라벨링 관행을 언급함.
     * Jane Irish Nelson는 웨일스어와 스페인어에서 'rabbit'의 유사성을 지적함.
     * Brad Daniels는 'ATM machine'과 같은 중복된 약어 사용을 비판함.

GN⁺의 정리

     * 이 기사는 'daemon'이라는 단어의 기원과 컴퓨팅에서의 사용을 탐구함. Maxwell의 daemon에서 영감을 받은 이 단어는 시스템 프로세스를 설명하는 데 사용됨.
     * 언어적 혼란과 중복된 약어 사용에 대한 논의는 언어의 발전과 변화에 대한 흥미로운 통찰을 제공함.
     * 이 기사는 언어와 컴퓨팅의 교차점을 이해하는 데 도움이 되며, 언어적 정확성과 변화에 대한 비판적 사고를 촉진함.

        Hacker News 의견

     * *nix 세계는 재미있지만 어두운 용어로 가득 차 있음. 시스템을 운영하는 데몬, 새로운 파일에 부여되는 666 권한, 부모가 자식을 죽이고 자신을 죽이는 상황, 좀비를 죽여야 하는 경우 등이 있음
     * daemon.co.uk의 의미가 영국 웹사이트의 호스트라는 것과 관련이 있다고 추측함. 그러나 실제로는 demon.co.uk였음
     * ""a la mode""와 ""au jus""에 대한 토론이 흥미로움. ""a la mode""는 아이스크림과 함께 제공되는 것을 의미하는 미국 요리 표현이고, ""au jus""는 육수나 그레이비를 의미하는 표현임
     * 언어의 변화가 보수적인 언어학자에게 불편함을 줄 수 있음
     * 과학에 대한 경고 문구가 재미있다고 생각함
     * 제목을 보고 Maxwell과 관련이 있을 것이라고 생각했는데, 맞아서 기쁨을 느낌
     * 이전 토론 스레드에 대한 링크가 제공됨
     * ""daemon""과 관련 없는 내용이지만, 양자역학 이론이 Maxwell의 daemon에 대한 반론을 제시했다고 함. 정보 이론과 관련이 있는지 궁금해함
     * 데몬이라는 용어가 컴퓨터에서 살아있는 작은 악마처럼 보이는 과정을 나타낸다고 생각함
     * UNIX 시스템에 데몬이 가득 차 있다는 것을 알고 충격을 받은 상사에 대한 이야기를 기억함. 시스템 관리자가 데몬과 악마가 다르다고 설명하려 했으나 실패함
     * Lovecraft의 Lactantius 인용문이 적절하다고 생각함. ""악마는 존재하지 않는 것을 존재하는 것처럼 보이게 할 수 있는 능력이 있다""는 내용임
"
"https://news.hada.io/topic?id=17396","메타, 저커버그와 머스크의 개인 제트기 추적 계정 차단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     메타, 저커버그와 머스크의 개인 제트기 추적 계정 차단
"
"https://news.hada.io/topic?id=17456","미국 서부 테라포밍 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             미국 서부 테라포밍 가능성

미국 서부의 물 부족 문제

     * 미국 서부 지역은 물 부족으로 인해 인구 밀도가 낮음. 300만 명의 미국인과 30개의 글로벌 도시가 100도 경도 서쪽에 부족함.
     * 서부 지역은 기후, 태양광 잠재력, 광물 및 인적 자본이 풍부하지만 물이 부족하여 개발이 제한됨.
     * ""Cadillac Desert"" (1986)에서 Marc Reisner는 자연 강수량의 한계 내에서 서부 지역의 거주지를 확장했다고 지적함.
     * 물 부족 문제를 해결하기 위해 태양광을 이용한 담수화 기술을 활용하여 물을 대량으로 생산해야 함.

캘리포니아와 플로리다의 사례

     * 캘리포니아와 플로리다는 대규모 인프라 프로젝트를 통해 물을 이동시켜 번영하는 도시를 건설함.
     * 로스앤젤레스는 강을 채널화하고 수위를 낮춰 284,000에이커의 땅을 개발함.
     * 플로리다는 개발, 배수, 에어컨을 통해 매력적인 도시로 변모함.

물 부족 해결 방안

     * 태양광을 이용한 담수화 기술로 네바다 지역을 개조할 수 있음.
     * 현재 담수화 기술은 $0.40/m^3의 비용으로 물을 생산할 수 있으며, 향후 개선 가능성이 있음.
     * 태양광과 배터리 기술의 발전으로 비용이 더욱 절감될 수 있음.

네바다 개조 계획

     * 네바다는 71백만 에이커의 땅 중 80%가 연방 관리하에 있으며, 물 부족으로 인해 개발이 제한됨.
     * 태양광과 담수화 기술을 활용하여 해안에서 물을 생산하고 내륙으로 이동시켜 자연 강수량을 대체할 수 있음.
     * 다양한 경로를 통해 물을 네바다로 운반할 수 있으며, 이는 미적 선호도에 따라 달라질 수 있음.

네바다 내 경로 설정

     * 네바다의 계곡은 주로 남북 방향으로 흐르며, 동서 방향으로는 중간에 분할됨.
     * 저렴한 태양광 비용으로 인해 운하 경로와 개조할 계곡을 선택할 수 있는 유연성이 있음.
     * US Route 95를 따라 운하 네트워크를 구축하여 물을 공급할 수 있음.

GN⁺의 정리

     * 이 글은 미국 서부의 물 부족 문제를 해결하기 위한 혁신적인 접근 방식을 제안함.
     * 태양광과 담수화 기술을 활용하여 네바다와 같은 지역을 개조할 수 있는 가능성을 탐구함.
     * 이러한 프로젝트는 경제적 가치와 환경적 이점을 동시에 제공할 수 있음.
     * 이와 유사한 기능을 가진 산업 내 프로젝트로는 이스라엘, 사우디아라비아, UAE의 담수화 프로젝트가 있음.

        Hacker News 의견

     * 이 의견은 처음에 풍자처럼 보였으나, 실제로는 실현 가능성이 없는 환상임을 지적함. 저자는 ""Cadillac Desert""를 인용하지만, 책의 내용을 무시하고 있음. 물 관련 사업은 경제적 이유로 대규모로 진행되지 않음. 물을 언덕 위로 펌핑하는 것은 간단한 일이 아니며, 캘리포니아 전력의 20%가 이미 물 펌핑에 사용되고 있음.
     * Salton Sea를 언급하는 것이 좋은 논거가 아닐 수 있음. Great Basin은 북미 최대의 내륙 유역이며, Great Salt Lake는 현재 말라가고 있음. 이는 건강에 해로운 먼지로 인해 수백만 명이 영향을 받을 수 있음. 대륙 규모의 담수화로 인한 염수 문제는 데이터 센터의 문제와 유사함. Lake Meed와 Powell의 물은 이동을 위해 심각한 처리가 필요함.
     * 사막에 물을 가져오기 전에 살기 좋은 곳을 사막으로 만드는 것을 멈춰야 함. I-20이나 I-30을 타고 가면 비효율적인 토지 사용과 해로운 공학을 볼 수 있음. Gorchkov와 Makarieva는 이를 수학적으로 설명하고 '생물 펌프'라고 명명함. 비를 귀찮은 폐기물로 취급하는 것을 멈추고 자연과 물을 공유해야 함.
     * 북미의 비밀 중 하나는 북부 온타리오와 북서부 퀘벡이 비옥하다는 것임. 이 지역은 짧은 성장기를 가지지만 곡물과 콩을 재배하기에 충분함. 그러나 배수가 좋지 않고 겨울이 매우 추움. 정부는 이 지역을 정착시키려 했으나 대부분 남쪽으로 돌아감.
     * 많은 태양광과 저장 용량을 구축한다면, 그것을 대규모 담수화 프로젝트에 사용하는 것보다 에너지 인프라를 탈탄소화하는 것이 더 합리적임. 기술적으로 불가능한 것은 아니지만 경제적, 사회적 관점에서 의미가 없음. 매년 기록적인 양의 온실가스를 배출하고 있음.
     * 플로리다가 살기 힘든 이유는 물 부족이 아니라 기후 때문임. 플로리다의 인구 폭발은 에어컨 도입과 일치함. 대부분의 사람들은 항상 덥고 습한 곳에 살고 싶어하지 않음.
     * 인류는 종종 자신의 목적에 맞게 풍경을 바꾸려 했지만, 개선보다는 파괴되는 경우가 많음. 자연 자원을 활용하는 기술을 배우고 적응하는 것이 더 나음.
     * MIT는 매년 태양광 담수화에 대한 해결책을 발표함. 그러나 실제로는 실현되지 않음.
     * 이 프로젝트는 흥미롭고, 비용이 예상보다 높더라도 여전히 저렴할 것임. 그러나 미국은 이러한 대규모 프로젝트에 대한 열정을 잃었음.
"
"https://news.hada.io/topic?id=17350","Bitwarden 무료 소프트웨어 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Bitwarden 무료 소프트웨어 종료

     * 데스크톱 버전 2024.10.0의 문제
          + Bitwarden의 데스크톱 클라이언트 빌드에 필요한 @bitwarden/sdk-internal 의존성이 추가됨.
          + 이 의존성은 Bitwarden 외의 소프트웨어 개발에 사용할 수 없다는 조항을 포함하고 있어 자유 소프트웨어의 기본 원칙을 위반함.
          + 이 의존성을 제거하지 않으면 데스크톱 버전 2024.10.0을 빌드할 수 없음.
     * 커뮤니티 반응
          + Bitwarden이 오픈 소스에서 벗어나고 있다는 의견이 제기됨.
          + 많은 사용자들이 Bitwarden을 대체할 다른 소프트웨어를 찾고 있음.
          + Vaultwarden과 같은 대안이 추천되고 있음.
     * Bitwarden의 입장
          + Bitwarden은 SDK 사용을 확대하고 있으며, GPL 호환성을 유지하려고 노력 중임.
          + SDK와 클라이언트는 별도의 프로그램이며, 표준 프로토콜을 사용해 통신한다고 설명함.
          + 현재의 빌드 문제는 해결할 계획이며, 이는 단순한 버그로 간주됨.
     * GN⁺의 정리
          + Bitwarden의 최근 변화는 오픈 소스 커뮤니티에 큰 영향을 미치고 있음.
          + 사용자들은 대안을 찾고 있으며, Vaultwarden과 같은 프로젝트가 주목받고 있음.
          + Bitwarden의 방향성은 오픈 소스의 철학과 상충될 수 있으며, 이는 사용자들에게 실망을 줄 수 있음.
          + 비슷한 기능을 가진 다른 오픈 소스 프로젝트로는 Vaultwarden이 추천됨.

   저는 Keepass를 애용하는데 사람들이 하도 Bitwarden 이야기만 해서 한번 써볼까 싶었는데 그냥 Keepass를 유지해야겠습니다. 서버 방식이 아니라 파일만 잘 보관하면 되는 방식이라 훨씬 더 가용성이 높아 제 입맛엔 Keepass가 더 맞습니다

        Hacker News 의견

     * Bitwarden을 지원하기 위해 비용을 지불했으나, 최근 변화가 실망스러움. Bitwarden이 인수 준비 중일 가능성이 있음
     * CTO의 응답: SDK 사용이 GPL 호환성을 유지하도록 노력 중임. SDK와 클라이언트는 별도의 프로그램이며, 표준 프로토콜을 통해 통신함. 앱 빌드 문제는 해결할 예정임
     * Bitwarden과 Vaultwarden과 호환되는 우수한 데스크톱/모바일 앱이 있음
     * Bitwarden이 최근 몇 년간 기업 판매에 집중하면서 소비자 측면을 소홀히 했음. 최근 iOS 앱으로 전환했으나 여전히 개선이 필요함. VC 자금 조달 후 수익 중심으로 변화함. Proton Pass는 흥미로우나 가격이 높음. iOS 내장 비밀번호 관리자는 비밀번호만 지원함
     * Keepass(X,XC)의 대안으로 Bitwarden을 고려했으나 이동하지 않기로 결정함
     * Bitwarden이 완전한 무료 소프트웨어인 줄 알았으나, 2020년경부터 독점적인 요소가 도입된 것 같음
     * Bitwarden을 좋아했고 친구들에게 추천했으나, 이제 KeePassXC로 이동할 계획임. Android와의 DB 동기화 방법을 찾고 있음
     * SDK 라이선스 조정 계획은 없으며, F-Droid 저장소에 계속 게시할 예정임. 이 문제는 이미 1년 전 SDK 저장소에서 제기됨
     * KeePass에서 Bitwarden/Vaultwarden으로 이동하여 동기화 문제를 해결하려 했으나, 클라이언트 없이 무용지물인지 고민 중임. WebUI가 충분한지, Android에도 적용되는지 궁금함
     * iOS, PC, Mac에서 Bitwarden을 사용 중이며 대안을 찾아야 함. 연간 $10의 프리미엄 회원임. 수상한 관행으로 인해 비즈니스 손실 발생. 대안으로 내보내고 이동할 방법이 있는지 궁금함
"
"https://news.hada.io/topic?id=17383","애플의 AirPods Pro 청력 건강 기능은 소리만큼이나 훌륭함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  애플의 AirPods Pro 청력 건강 기능은 소리만큼이나 훌륭함

     * Apple은 AirPods Pro 2에 대한 새로운 청력 건강 기능을 발표하여 임상 등급의 보청기 기능, 청력 테스트, 강화된 청력 보호를 포함하며 iOS 18.1과 함께 출시될 예정임
     * 즉, AirPods Pro 2는 이제 무선 이어버드를 넘어 보청기로도 사용될 수 있음. 이는 청력 건강 인식에 중요한 순간
     * 세계에서 가장 인기 있는 이어버드가 OTC(일반 의약품) 보청기로 변신하는 중요한 전환점이 될 것으로 예상
     * 무선 이어버드를 착용한 채 대화하는 것은 무례하다고 여겨져 왔음
          + Transparency 모드로 주변 소리를 자연스럽게 들을 수 있음에도 불구하고, 사람들은 대화 시 이어버드를 빼는 경향이 있음
          + 인기 있는 이어버드가 보청기 역할을 하면서 이러한 사고방식이 변화할 것임
          + 보청기에 대한 편견을 줄이는 강력한 방법이지만, 이러한 변화에는 시간이 걸릴 것임

청각 건강 기능 미리보기

     * 필자는 Apple의 청각 건강 기능을 미리 경험해 봄
     * 필자는 청년기에 Discman과 iPod를 즐겨 사용했고 수많은 콘서트에 다녀왔음
     * 그러나 2018년 이후로 청력 검사를 받아본 적이 없음
     * 이는 드문 일이 아님. Apple에 따르면 미국 성인의 80%가 최근 5년간 청력 검사를 받지 않았음
     * iPhone에서 바로 검사를 받을 수 있는 기능은 이러한 추세를 개선할 수 있는 좋은 방법임

예방: 청각 보호

     * AirPods Pro를 콘서트에서 귀마개 대신 사용하는 사람들이 있음
     * 이번 가을까지 Apple은 이러한 사용 사례를 공식적으로 지지하거나 청각 보호 기기로 광고하지 않았음
     * iOS 18.1과 곧 출시될 AirPods 펌웨어 업데이트로 AirPods Pro 2는 모든 청취 모드에서 항상 청각 보호 기능을 제공할 예정
     * 기본적으로 청각 보호 기능이 켜져 있으며 ""All-new multiband high dynamic range algorithm""을 통해 콘서트 등 라이브 이벤트의 자연스러운 사운드를 보존함
     * 콘서트에서 어떤 청취 모드를 사용할지는 개인의 선호도에 따라 다름
     * 청각 보호 기능에는 한계가 있음. 총성, 불꽃놀이, 잭해머와 같은 극도로 큰 소음이나 110dBA를 초과하는 지속적인 소음은 AirPods Pro 2로 보호할 수 없음

Awareness: Apple 청력 검사

     * Apple의 청력 검사를 받으려면 조용한 공간이 필요함
     * 검사 시작 전에 iPhone이 이어팁 착용 상태와 주변 소음을 분석하여 검사 가능 여부를 확인함
     * 청각 건강 기능은 Apple의 실리콘 이어팁에 맞춰 보정되므로 타사 이어팁을 사용하면 최적의 경험을 보장할 수 없음
     * 검사가 시작되면 3회 비프음이 들릴 때마다 화면을 탭하면 됨
     * 검사는 예측하거나 속일 수 없도록 설계되어 있으며, 어떤 검사도 동일하지 않음
     * 왼쪽 귀부터 검사가 시작되며, 몇 초 동안 아무 소리도 들리지 않는 것은 정상임
     * 검사 결과는 ""청력 손실 거의 없음"", ""경도 손실"", ""중등도 손실"", ""심각한 손실"", ""절대적 손실""의 5가지 범주로 분류됨
     * 필자의 검사 결과는 ""청력 손실 거의 없음""에 해당하며, 왼쪽 귀가 오른쪽 귀보다 약간 더 손실되었음을 알 수 있었음
     * 검사 결과는 Health 앱에 저장되며 PDF로 내보낼 수 있음
     * 청력 전문가와 함께 검사한 차트를 가져와서 보청기 기능을 구성하는 데 사용할 수도 있음
     * 검사에는 약 5분 정도 소요되지만 대부분의 사람들에게 긴 시간처럼 느껴짐
     * 이는 오랫동안 검사를 받지 않았기 때문일 수 있음. 두 번째 검사는 스트레스가 적었음
     * 청력 손실은 매우 흔한 문제로, 세계보건기구에 따르면 전 세계 15억 명이 청력 손실을 겪고 있음

Assistance: 보청기로서의 AirPods

     * 18세 이상이면서 경도에서 중등도의 청력 손실이 있는 사람들은 이제 AirPods Pro 2를 임상 수준의 보청기로 사용할 수 있음
     * ""Media Assist"" 설정을 켜면 청력 검사 결과를 사용하여 음악, 전화, 동영상 콘텐츠의 사운드를 최적화할 수 있음
     * 설정 메뉴에서 슬라이더를 사용하여 보청기 기능의 증폭, 음색, 밸런스를 미세 조정할 수 있음
     * 이러한 옵션은 iPhone, iPad 또는 Mac의 제어 센터에서도 접근할 수 있음
     * AirPods Pro 2의 줄기를 밀어 볼륨을 조절하는 것처럼, 보청기 모드에서는 증폭을 제어할 수 있음
     * 보청기 기능은 투명 모드에서만 사용할 수 있음
     * Apple의 보청기 기능 사용 설명서에 따르면 완전히 익숙해지는 데 시간이 걸릴 수 있음

보청기로서의 AirPods의 의의와 한계

     * 청력 손실이 있는 사람들이 250달러의 AirPods를 보청기로 사용할 수 있게 된 것은 큰 의미가 있음
     * 이는 Jabra, Sony 등의 기존 OTC 보청기보다 상당히 저렴한 가격임
     * 그러나 AirPods가 모든 사람에게 적합한 것은 아님. 더 심각한 청력 손실이 있는 사람들은 다른 솔루션을 찾아야 함
     * AirPods Pro 2의 주요 단점은 배터리 수명으로, 보청기 기능을 사용하면 약 6시간 정도 지속됨
     * 이는 많은 OTC 및 처방 보청기의 배터리 지속 시간에 미치지 못함

기술 기업들의 청각 건강 기능 경쟁

     * 이는 큰 이정표이며, 삼성, 구글 등 다른 대형 기술 기업들도 Apple의 뒤를 빠르게 따를 것으로 보임
     * 보청기 기능이 에코시스템 종속의 최신 측면이 되었다는 점이 이상하게 느껴질 수 있음
     * 우리는 오랫동안 헤드폰 잭의 상실을 한탄했지만, 이러한 발전과 더 많은 사람들의 삶의 질 향상을 통해 그 대가를 되찾기 시작하고 있음

GN⁺의 의견

     * Apple의 AirPods Pro 2에 도입되는 청각 건강 기능은 매우 의미 있는 발전임. 대중적인 무선 이어버드가 일반의약품 보청기 역할을 하게 되면서 보청기에 대한 편견을 줄이고 청각 건강에 대한 인식을 높이는 데 기여할 수 있음
     * Apple의 청력 테스트는 사용자에게 청력 상태를 쉽게 확인할 수 있는 기회를 제공하며, 이는 청력 건강 인식에 긍정적인 영향을 미칠 수 있음
     * 그러나 AirPods Pro 2가 모든 청력 손실 문제를 해결할 수는 없음. 심각한 청력 손실이 있는 사람들은 여전히 다른 솔루션이 필요함. 배터리 수명 등의 한계점도 있음
     * 다른 대형 기술 기업들도 유사한 기능을 도입할 것으로 예상됨. 청각 건강 기능이 에코시스템 종속의 한 요소가 되는 것은 우려되는 부분임
     * 그럼에도 불구하고 이는 기술 발전이 삶의 질 향상에 기여하는 좋은 사례임. 헤드폰 잭 폐지 등으로 인한 불편함을 상쇄할 만한 가치 있는 혜택이 되기를 기대함

   에어팟 자체가 귀에 꽂는 오디오컴퓨터같은 기능이라, 이 업데이트가 정말 파급효과가 클 거 같더라구요.
   노이즈캔슬링 등 에어팟의 좋은 기능들이 빠른 연산의 칩이 애플의 여러 소프트웨어가 결합하는 장점도 활용하고.
   에어팟 자체가 끼고 다니는 것이 자연스럽고 스타일적으로 좋다고 하는 인식도 커져 다른 청력 보조기기보다 자연스럽게 접근이 가능할거구요.

   특히 노이즈캔슬링과 주변소리 듣기 모드를 통해 더 큰 소음에 노출되지 않을 수 있는 점이 청력손실 예방차원에서도 꽤 의미가 있는 거 같습니다.

        Hacker News 의견

     * 중년의 청력 손실을 경험한 사용자가 Apple의 접근성 기능에 감사함. AirPods Pro를 통해 음악이 훨씬 더 좋게 들리며, 중년의 많은 사람들이 청력 손실을 인지하지 못하고 있을 것이라고 함. 청력 검사를 받을 것을 권장함
     * 주류 기술이 접근성 기기를 대체하고 있으며, 이는 필요한 사람들에게 좋은 일이라고 생각함. 스마트폰과 무료 스크린 리더, 저렴한 앱이 다양한 접근성 기기를 대체할 수 있음
     * 소리에 민감하여 청력을 보호하기 위해 노력해 왔으며, Apple의 노이즈 캔슬링 이어폰을 영화관에서 사용함. Apple의 개인화된 건강 관리가 큰 변화를 가져올 것이라고 기대함
     * 청력을 손상시킨 기술이 이제는 청력을 보호하는 데 도움을 주고 있음
     * DJ 공연에서 AirPods Pro를 투명 모드로 사용하여 청력 보호에 효과적이었음을 경험함. 친구들에게도 AirPods Pro를 추천함
     * Apple은 소비자 기술 회사 중에서 사람들의 삶의 모든 단계를 동반하는 기능을 추가하는 회사라고 생각함. 스마트폰과 함께 성장하며, 나이가 들면서 필요한 기능이 명확해짐
     * 투명 모드가 있는 이어버드가 보청기로 사용되면서 보청기에 대한 낙인을 줄일 수 있는 강력한 방법이 될 것이라고 생각함. 그러나 이러한 변화는 시간이 걸릴 것임
     * AirPods Pro의 노이즈 캔슬링 기능이 기존의 이명을 악화시켰음을 경험함
     * Apple이 자발적인 과학적 실험을 진행했으면 좋겠다고 생각함. 예를 들어, 노이즈 캔슬링이 청력 손실에 미치는 영향을 연구하거나, 알코올 소비와 건강 지표의 상관관계를 연구할 수 있음. 사용자에게 업로드될 데이터를 사전에 보여주어 개인정보 보호 우려를 해소할 수 있음
     * 아버지가 아닌 사용자가 아기 울음소리가 두통을 유발할까 걱정함. AirPods의 볼륨 감소 조정이나 소리를 줄여주는 특수 이어플러그가 양육에 차이를 줄 수 있는지 궁금해함
"
"https://news.hada.io/topic?id=17434","제2차 세계 대전 이후 식량","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            제2차 세계 대전 이후 식량

     * 전후 식생활 변화
          + 제2차 세계 대전은 미국의 식생활에 많은 변화를 가져옴. 군인들이 전 세계를 여행하며 다양한 요리를 접하고, 전쟁 후에는 프랑스, 이탈리아, 중국 요리가 미국에서 인기를 끌게 됨.
          + 군대 배급식과 전쟁 중 개발된 기술로 생산된 식품도 변화에 기여함. 배급식과 승리의 정원에서 유래한 레시피도 지속적으로 사용됨.
     * 배급식의 맛
          + 미군은 전장에서 군인들에게 배급식을 제공했으며, K-배급식과 C-배급식은 하루 3,000~3,600칼로리를 제공했음. 이 배급식에는 사탕, 인스턴트 커피, 통조림 고기가 포함되어 있었음.
     * M&M's
          + M&M's는 1941년에 특허를 받았으며, 전쟁 중 미군의 C-배급식에 포함되어 인기를 끌었음. 전쟁 후 일반 대중에게도 판매되기 시작함.
     * 인스턴트 커피
          + Nescafé는 1941년부터 미군 배급식에 포함되었으며, 전쟁 후에도 인기를 끌어 전 세계적으로 수요가 증가함.
     * 스팸
          + 스팸은 제2차 세계 대전 중 미군 배급식에 포함되어 인기를 끌었으며, 특히 하와이와 괌 등 태평양 지역에서 중요한 식품으로 자리 잡음. 스팸은 장기 보관이 가능하고, 조리 없이도 섭취할 수 있어 비상 상황에 유용함.
     * 전시 식품 혁신
          + 전시 식품 혁신은 군대에 영양가 있고 운반이 용이한 식품을 제공하기 위해 이루어졌으며, 전쟁 후 민간 시장에도 영향을 미침. 예를 들어, 분말 치즈와 오렌지 주스 농축액은 전쟁 후 민간 식품 시장에 큰 영향을 미침.
     * GN⁺의 정리
          + 이 기사는 제2차 세계 대전이 미국의 식문화에 미친 영향을 다루고 있으며, 전쟁 중 개발된 식품들이 전후에도 지속적으로 영향을 미쳤음을 보여줌.
          + 전쟁 중 개발된 식품들이 어떻게 현대 식문화에 자리 잡았는지 이해하는 데 도움이 됨.
          + 비슷한 기능을 가진 현대의 식품으로는 인스턴트 식품이나 장기 보관이 가능한 식품들이 있음.

        Hacker News 의견

     * 이스라엘은 제2차 세계대전 당시 영국 제국 하에 있었던 유물과 국가의 첫 10년 동안의 긴축/배급 시기의 유물을 가지고 있음
          + 제2차 세계대전 동안 영국은 밀 수입을 줄이기 위해 ""표준 빵"" 배급을 도입했으며, 이는 피타 소비를 대체하게 되었음
          + 긴축 시기는 아랍 국가에서 추방된 인구의 급격한 증가와 맞물렸으며, 많은 사람들이 쌀에 익숙했지만 식량 배급과 가격 통제로 인해 쌀은 정부 재정에 부담이 되었음
          + 그래서 국가는 ""벤 구리온 쌀"" 또는 이스라엘/펄 쿠스쿠스를 밀어붙였으며, 이는 저렴한 미국 밀 수입으로 대체할 수 있는 충분히 좋은 대체품이었음
     * MRESteve는 군사 배급에 관한 훌륭한 콘텐츠를 제공하며, 다양한 사람들이 즐기고 있음
          + VPN 파트너나 기타 불필요한 요소 없이 순수한 콘텐츠를 제공함
          + 군사 음식에 관심이 있는 사람들, 수면을 위해, 또는 의료 치료 중 식욕을 돋우기 위해 사용하는 사람들도 있음
     * 현대에 미국 정부가 전쟁을 벌이고 제2차 세계대전 스타일의 배급을 시도한다면 어떤 일이 벌어질지 상상하기 어려움
          + 제한된 고기, 제한된 설탕, 제한된 휘발유, 타이어 절약을 위한 35 MPH의 국가 속도 제한 등이 있을 것임
          + 이는 국가의 붕괴를 초래할 것이라고 생각함
     * 역사적인 음식 이야기를 좋아한다면 Tasting History를 추천함
          + 최근 타이타닉 생존자에 관한 두 에피소드는 감동적임
          + 제2차 세계대전 관련 콘텐츠도 다룸
     * 스위스 군대 요리책은 많은 레시피가 변하지 않았으며, 제한된 재료와 간단한 막사 주방으로 쉽게 준비할 수 있도록 설계됨
          + 식사의 소화 가능성과 기타 요소로 평가됨
          + 영어 번역본을 찾고 있음
     * 영국 전시 요리책에 관한 언급을 몇 년 전에 접했으며, 배급표 재료로 만든 ""생명을 유지하는 죽""이라는 제목의 레시피가 포함되어 있었음
          + 이 요리책이 무엇인지 아는 사람을 찾고 있음
     * 기사에 언급되지 않은 스낵바는 오늘날까지 귀리와 초콜릿을 기본으로 단백질과 비타민이 추가된 형태로 남아 있음
          + 더 맛있고 건강한 것을 만들 수 있었던 시점 이후에도 지속됨
          + MealSquares를 개발하면서 이 주제를 깊이 연구했음
     * 좋은 읽을거리였으며, Spam이 언급되어 기쁨
          + 개인적으로 과소평가되었다고 생각함
     * 가공식품과 비만 위기의 진정한 시작인가에 대한 의문
     * 흥미로운 기사이지만, 왜 National Park Service가 제2차 세계대전 역사에 관한 콘텐츠를 웹사이트에 게시하는지 궁금함
"
"https://news.hada.io/topic?id=17440","LLM의 불확실성 감지 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LLM의 불확실성 감지 기술

LLM의 불확실성 감지

   이 글은 XJDR의 새로운 프로젝트인 Entropix에서 개발한 새로운 추론 기법을 설명함. Entropix는 불확실한 순간에 샘플링을 더 똑똑하게 하여 모델의 추론을 개선하려고 시도함. 그러나 아직 대규모 평가가 이루어지지 않아 실제로 얼마나 도움이 되는지는 불확실함.

  불확실성 개요

     * 샘플링은 LLM이 선택하는 가능한 토큰의 분포(로그잇)에서 토큰을 선택하는 과정임.
     * 모델의 예측에 대한 확신은 이 분포를 통해 알 수 있음.
     * Entropix는 적응형 샘플링을 사용하여 모델이 불확실할 때 더 나은 결정을 내리도록 함.

    불확실성의 의미와 중요성

     * 로그잇의 불확실성은 여러 가지 원인이 있을 수 있으며, 모두 나쁜 것은 아님.
     * 원인에는 동의어나 동등한 토큰, 분기 경로, AI가 확신하지 못하는 경우 등이 있음.
     * Entropix는 불확실성의 정도에 따라 다른 방법으로 다음 토큰을 선택해야 한다고 제안함.

  엔트로피와 바렌트로피

     * Entropix는 불확실성을 측정하는 두 가지 지표인 엔트로피와 바렌트로피를 사용함.
     * 엔트로피는 예측된 로그잇이 서로 얼마나 다른지를 측정함.
     * 바렌트로피는 불확실성의 ""형태""를 나타내며, 높은 바렌트로피는 일부 값이 다른 값과 크게 다름을 나타냄.

    수학적 설명

     * 서프라이설은 사건의 예측 불가능성을 측정하는 개념임.
     * 엔트로피는 모든 가능한 결과에 대한 서프라이설의 기대값임.
     * 바렌트로피는 서프라이설의 분산으로 계산됨.

  엔트로피와 바렌트로피에 기반한 적응형 샘플링

    낮은 엔트로피, 낮은 바렌트로피

     * 모델이 첫 번째 옵션뿐만 아니라 다른 옵션에도 확신이 있는 이상적인 경우임.
     * 표준 argmax 샘플링을 사용하여 가장 높은 확률의 토큰을 선택함.

    낮은 엔트로피, 높은 바렌트로피

     * 모델이 몇 가지 옵션을 매우 높게 예측하는 경우임.
     * 새로운 출력 분기를 나타낼 수 있으며, 여러 방법으로 분기를 구현할 수 있음.

    높은 엔트로피, 낮은 바렌트로피

     * 모델이 인식하지 못하는 것을 보고 있거나 모든 옵션이 서로 교환 가능할 수 있음.
     * ""생각"" 토큰을 사용하여 모델이 더 많은 계산 시간을 사용하도록 유도함.

    높은 엔트로피, 높은 바렌트로피

     * 모델이 명확한 선호도가 없지만 일부 출력에 더 확신이 있는 경우임.
     * 무작위로 선택하거나 분기, 생각 토큰을 삽입할 수 있음.

  분기와 생각 토큰

     * 분기 예측은 몇 가지 로그잇을 따라가 다른 토큰으로 이어지는지를 보는 방법임.
     * 생각 토큰은 불확실한 상태에서 더 많은 계산을 수행하는 방법임.

  주의 엔트로피

     * Entropix는 주의 엔트로피를 사용하여 온도를 조정하는 데 사용함.
     * 주의 엔트로피와 주의 일치도는 샘플링에 대한 추가 신호를 제공할 수 있음.

  이게 중요한가?

     * Entropix의 통찰력은 이해하기 쉽고 완전히 새로운 것은 아님.
     * 평가가 큰 이점을 보여주지 않더라도, 이러한 추론 기법은 실험하기 쉬운 방향임.

GN⁺의 정리

     * Entropix는 LLM의 불확실성을 다루기 위한 새로운 접근 방식을 제안함.
     * 엔트로피와 바렌트로피를 사용하여 모델의 확신 수준을 측정하고, 적응형 샘플링을 통해 더 나은 결정을 내릴 수 있음.
     * 이러한 기술은 대규모 예산 없이도 오픈 소스 해커들이 모델의 추론 능력을 개선할 수 있는 가능성을 제공함.
     * 유사한 기능을 가진 프로젝트로는 Hugging Face의 Transformers가 추천됨.

        Hacker News 의견

     * Charles Babbage는 잘못된 입력이 올바른 출력을 낼 수 있는지에 대한 질문에 혼란스러움을 느꼈음
     * 소비자 하드웨어를 사용한 샘플링 기반 기술이 SOTA 모델을 개선할 수 있는 드문 기회임. 그러나 이는 지속되지 않을 것이며, 궁극적으로는 훈련 가능한 샘플러가 필요할 것임
          + optillm은 이러한 기술을 구현한 프로젝트임
          + Entropics의 추가 계산이 CoT 디코딩보다 나은 결과를 가져오지 않음
     * LLM의 많은 문제는 의미 누출이나 관련 없는 정보에 의해 발생함. 주의력 개선의 여지가 있을 수 있음
          + 관련 블로그 포스트 작성: 의미 누출, LLM과 추론, O(1) 추론 시간 튜링 머신
     * 현대의 GPT는 토큰 어휘에 대한 큰 분류기로부터 로짓을 출력함. 이는 공간 내에 존재하며, 비정상적인 볼록성 속성을 가진 다양체를 계산할 수 있음
     * 높은 엔트로피 상황에서 모델이 불확실성을 감지하고 사용자에게 경고할 수 있는 기능이 필요함
     * LLM의 불확실성을 판단하는 기술이 있는지 확신할 수 없음. 최근 연구는 의미 엔트로피를 사용하여 LLM의 추측 여부를 통계적으로 정량화함
     * 모델이 불확실성을 허용하지 않을 때의 출력을 실험해본 사람이 있는지 궁금함. 모든 토큰이 임계값 이상의 확실성을 가질 때까지 샘플러가 되돌아가는 방식임
     * LLM을 신뢰하여 최소한의 감독으로 작업을 수행하는 것에 대한 의문이 있음. 모든 것이 ""환각""이나 추측일 수 있음
     * LLM의 문제는 단순히 ""불확실성""뿐만 아니라 다양한 차원이 있음. 질문의 의미 부족, 정보 부족, 전문가 합의의 부재 등 다양한 이유가 있음
     * 언어 모델을 위한 수많은 샘플링 전략이 존재함. 특정 샘플링 전략이 표준 top-k 또는 top-p 샘플링보다 우수하다는 것을 실증적으로 입증하기 어려움
"
"https://news.hada.io/topic?id=17424","Ask GN: 현재 사내에서, 개인적으로 사용 중인 개발툴은 무엇인가요? 앞으로 사용해보고 싶은 툴이 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask GN: 현재 사내에서, 개인적으로 사용 중인 개발툴은 무엇인가요? 앞으로 사용해보고 싶은 툴이 있나요?

   저는 사내에서도, 개인적으로도 VS CODE와 QT CREATOR를 주로 사용합니다.
   C++로 클라이언트를 만들고, NODE JS나 PYTHON으로 백엔드 작성하고 보통 그런 스택으로 일을 자주 하는데요.
   요즘 AI를 접목한 개발 툴 같은 것들이 많이 나온다고 하는데, 제가 너무 옛날 툴에만 너무 머무르고 있나 싶어서... 근데 정작 주위를 둘러보면, 다 그냥 그 때 그 시절부터 썼던 이클립스, 인텔리제이, PYTHON 쓰는 분들은 주피터, 파이참 쓰고 계시는데 싶기도 하고요. 저희 회사만 그런 건지...
   다른 분들은 회사에서, 개인적으로 어떤 툴을 사용하고 있으신지, 앞으로 사용해보고 싶은 툴이 있으신지 궁금합니다.

   VSCode + Github Copilot 쓰다가 이번에 Cursor 써보는 중인데, 매우 마음에 듭니다

   VSCode + Github Copilot 사용중입니다. 어느 정도 틀이 잡힌 코드베이스에서는 적당히 쓸만한 코드 패턴을 추천해줍니다. 단순 반복작업이 줄어서 좋고 좀 더 큰 단위에서 코드베이스를 생각할 수 있지만 코드를 깊이 생각하지 않게 되고 약간은 게을러지는 면도 있습니다.

   Cursor 생각보다 좋았어요. 한 번 써보세요

   저희 회사도 IDE 는 대부분 인텔리제이, VScode 등 기존 툴을 사용하고 계십니다.
   한 분은 VScode 에서 cursur 을 사용하고 계시는데 굉장히 마음에 든다고 하시네요.
   대신, AI 를 활용한 플러그인은 많이들 사용하고 계십니다. Copilot, Jetbrains AI, CodeGPT 등을 사용하고 계세요.

   확실히 vscode 에 continue 깔아서 써보니까 좋긴하더라고요. 자동 완성추천 기능하고 프롬프트로 질문던지는 정도 쓰는데요..
   Cursor는 엄청 핫하던데 아직 써보진 않았습니다. Copilot도 아직 ㅠㅠ
   Ai에 물어보고 하는 건 예전에 구글 검색 강화판 정도로 이해하겠는데, ai가 템플릿을 다 만들어준다던가 하는 건 아직 거부감이 있어요.
"
"https://news.hada.io/topic?id=17379","FTC의 가짜 온라인 리뷰 금지 규정 발효","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FTC의 가짜 온라인 리뷰 금지 규정 발효

     * 연방 규칙 발효
          + 가짜 온라인 리뷰를 금지하는 연방 규칙이 발효됨
          + 연방거래위원회(FTC)가 8월에 발표한 이 규칙은 온라인 리뷰의 판매 또는 구매를 금지함
          + 월요일부터 시행된 이 규칙은 이를 고의로 위반하는 자에 대해 민사 처벌을 추구할 수 있도록 함
     * 규칙의 중요성
          + FTC 의장 Lina Khan은 가짜 리뷰가 사람들의 시간과 돈을 낭비하고, 시장을 오염시키며 정직한 경쟁자들로부터 사업을 빼앗는다고 언급함
          + 이 규칙은 미국인들이 사기를 당하지 않도록 보호하고, 불법적으로 시스템을 조작하는 기업에 경고하며, 공정하고 정직하며 경쟁적인 시장을 촉진할 것이라고 덧붙임
     * 구체적인 금지 사항
          + 존재하지 않는 사람이나 인공지능에 의해 생성된 리뷰 및 추천 금지
          + 해당 사업이나 제품/서비스에 대한 경험이 없는 사람의 리뷰 금지
          + 경험을 잘못 표현한 리뷰 금지
          + 기업이 리뷰나 추천을 생성하거나 판매하는 행위 금지
          + 가짜 리뷰를 고의로 구매하거나 기업 내부자에게서 조달하거나 유포하는 기업에 대한 처벌
          + 근거 없는 법적 위협, 물리적 위협, 협박 또는 특정 허위 공공 비난 사용 금지
     * 위반 신고
          + 위반 사항은 https://reportfraud.ftc.gov 에서 신고 가능

GN⁺의 정리

     * 이 규칙은 온라인 리뷰의 신뢰성을 높이고 소비자 보호를 강화하는 데 기여함
     * 가짜 리뷰로 인한 시장 왜곡을 방지하고 공정한 경쟁 환경을 조성하는 데 도움을 줄 수 있음
     * 리뷰의 신뢰성 문제는 전자상거래의 중요한 이슈로, 이 규칙은 이를 해결하는 중요한 단계임
     * 유사한 기능을 가진 다른 프로젝트로는 Trustpilot과 같은 리뷰 플랫폼이 있음

        Hacker News 의견

     * 규제는 리뷰를 기만적으로 조작하는 것에 대해 언급하지 않음. 예를 들어, 낮은 별점 리뷰를 삭제하는 것에 대한 규정은 없음
          + 최종 규칙은 리뷰가 억제된 경우, 웹사이트의 리뷰가 제출된 모든 리뷰를 대표한다고 잘못 표현하는 것을 금지함
     * FTC가 좋은 공공 정책을 만드는 데 기여하고 있음에 감사함
     * 규칙은 존재하지 않는 사람이나 인공지능이 생성한 리뷰, 경험이 없는 사람의 리뷰, 경험을 잘못 표현한 리뷰를 금지함
          + Amazon 리뷰 사기 사례: 합법적인 사람들이 제품을 구매하고 5성 리뷰를 남긴 후 회사로부터 구매 비용을 환급받는 방식
     * 가짜 리뷰를 공식적으로 금지하여 책임을 도입하는 것은 좋은 시작이지만, 리뷰의 인센티브 구조가 진정한 도전임
          + 긍정적인 리뷰: 이미 긍정적인 경험을 한 고객에게만 리뷰 초대를 보내는 것이 합법적임
          + 부정적인 리뷰: 고객이 스스로 게시하는 경향이 있음
          + 평균적인 경험은 리뷰에서 제외되기 쉬움
     * FTC의 전체 규칙을 포함한 보도 자료 링크 제공
     * 기업이 리뷰나 추천서를 생성하거나 판매하는 것을 금지함
          + 가짜 리뷰를 구매하거나 내부자에게서 조달하거나 배포하는 기업은 처벌받음
          + ""근거 없는 법적 위협, 물리적 위협, 협박 또는 특정 허위 공공 비난""을 사용하는 것을 금지함
     * 규칙이 개인에게 적용되는지 궁금함
          + 제1차 수정안이 경험이 없는 개인을 처벌하는 것에 동의하는지 의문
          + 대기업은 쉽게 규제할 수 있지만, 소규모 업체의 무수한 리뷰는 어떻게 처리할지 궁금함
     * Amazon 리뷰 문제를 해결할 수 있기를 희망함
          + 기업이 가짜 리뷰를 알았어야 했던 경우, 이를 배포하는 것을 금지함
     * 리뷰가 ""진짜""인지 여부보다는 사용자가 신뢰하는 사람에 의해 작성되었는지에 초점을 맞춰야 함
          + 사용자가 잘못된 리뷰에 노출되었을 때 신뢰를 철회할 수 있는 방법 제공
     * 텍사스의 판사가 큰 기업의 이익을 위해 이 규제를 무효화할 가능성을 우려함
"
"https://news.hada.io/topic?id=17437","미국에서 Google에 게재되는 모든 정치 광고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       미국에서 Google에 게재되는 모든 정치 광고

미국의 정치적 광고

     * 광고 투명성: Google은 미국에서 게재되는 정치 광고의 투명성을 높이기 위해 광고주가 인증을 받아야 하며, 광고가 잠재고객에게 도달하는 방식을 제한함.
     * 정책 위반: Google 정책을 위반하는 광고는 차단 및 삭제됨.
     * 광고 검색: Google Ads 및 Google Display & Video 360을 통해 2018년 5월 31일부터 게시된 선거 광고를 검색할 수 있음.

광고 통계

     * Ken Fleming: 2천~3천회 노출, $0~$100 지출
     * Committee to Elect Erin Pare: 4만~4.5만회 노출, $500~$600 지출
     * KAREN KWAN: 2.5만~3만회 노출, $300~$400 지출
     * HARRIS FOR PRESIDENT: 8천~9천회 노출, $1만~$1.5만 지출
     * FF PAC: 0~1천회 노출, $0~$100 지출
     * NORTHERN VALLEY DEMOCRATIC - NPL: 8만~9만회 노출, $300~$400 지출
     * Money Metals Exchange LLC: 30만~35만회 노출, $2.5만~$3만 지출
     * MAKE AMERICA GREAT AGAIN INC.: 6만~7만회 노출, $1.5천~$2천 지출
     * Local Factor Group LLC: 17.5만~20만회 노출, $2천~$2.5천 지출
     * Mary Peltola for Alaska: 0~1천회 노출, $0~$100 지출
     * Alliance for a Better Minnesota State PAC: 0~1천회 노출, $300~$400 지출
     * Friends of Jeff Keicher: 8만~9만회 노출, $500~$600 지출
     * HOVDE FOR WISCONSIN: 2만~2.5만회 노출, $900~$1천 지출
     * PROGRESSNOW COLORADO: 0~1천회 노출, $0~$100 지출
     * Ginger Cruz for Congress: 0~1천회 노출, $0~$100 지출
     * DONALD J. TRUMP FOR PRESIDENT 2024, INC.: 1천~2천회 노출, $0~$100 지출
     * REPUBLICAN STATE LEADERSHIP COMMITTEE: 2.5만~3만회 노출, $1.5천~$2천 지출
     * Right for America: 2만~2.5만회 노출, $800~$900 지출
     * NILC IMMIGRANT JUSTICE FUND: 35만~40만회 노출, $3천~$3.5천 지출
     * HARRIS FOR PRESIDENT: 3만~3.5만회 노출, $100~$200 지출
     * ELECTRIC SYMPHONY LLC: 6만~7만회 노출, $800~$900 지출
     * HMP: 40만~45만회 노출, $1만~$1.5만 지출
     * ADD 2 ECOM LLC: 0~1천회 노출, $0~$100 지출
     * BETTER NEVADA PAC: 20만~22.5만회 노출, $4천~$4.5천 지출
     * PROGRESS MICHIGAN POLITICAL ACTION FUND (SUPERPAC): 0~1천회 노출, $0~$100 지출
     * DUTY TO AMERICA PAC: 4.5만~5만회 노출, $500~$600 지출
     * Public Democracy America: 60만~70만회 노출, $1.5천~$2천 지출
     * Vote Yes For A Strong South Dakota: 8만~9만회 노출, $200~$300 지출
     * Denny Wells for Alaska: 12.5만~15만회 노출, $1천~$1.5천 지출
     * America PAC: 0~1천회 노출, $0~$100 지출
     * DFL House Caucus: 0~1천회 노출, $0~$100 지출

GN⁺의 정리

     * Google의 광고 투명성 센터는 정치 광고의 투명성을 높이고, 광고주가 인증을 받도록 하여 신뢰성을 강화함.
     * 광고 통계는 광고주의 노출 횟수와 지출 금액을 통해 광고 효과를 평가하는 데 도움을 줌.
     * 이러한 정보는 정치 광고의 투명성을 높이고, 유권자들이 더 나은 결정을 내릴 수 있도록 지원함.
     * 유사한 기능을 제공하는 다른 플랫폼으로는 Facebook의 정치 광고 라이브러리가 있음.

        Hacker News 의견

     * ""FORCE VECTOR COMMUNICATIONS""라는 회사가 2024년 가장 많이 본 광고를 가지고 있음에도 불구하고 검색 결과가 3개에 불과함
     * 프랑스에서는 선거 캠페인 예산을 인구에 맞춰 5천만 달러로 제한하고 국가가 이를 전액 보상함. 미국 대통령 선거 캠페인은 인구당 비용이 60배 더 비쌈. 미국에서도 기업이 선거를 사들이는 것을 막기 위해 이러한 제한을 제안한 적이 있는지 궁금함
     * 광고를 ""지출 금액: 높은 순""과 ""노출 횟수: 높은 순""으로 정렬하여 비교하는 것이 흥미로움. 4년 전 정치 광고는 훨씬 적은 비용으로 더 많이 노출되었음. 올해의 광고는 더 비싸고 도달 범위가 작음
     * 사이트에 따르면 광고 타겟팅은 성별과 연령을 기준으로 허용되지만 인종이나 종교는 허용되지 않음. 과거에는 이 네 가지 모두가 투표 제한에 사용되었고 현재는 법적으로 보호받고 있음. 왜 일부만 허용하는지 궁금함. 모두 금지하거나 모두 허용해야 한다고 생각함
     * 특정 광고에 대해 깊이 탐구하게 되었음. fultongrandjury.com이라는 웹사이트로 연결되며 처음에는 공식 정부 웹사이트라고 생각했음. 정부 웹사이트를 광고하는 데 돈을 쓰는 아이디어가 흥미로웠음. ""Our Community Media"", ""Small Town American Media"", ""Small Town Truth""라는 프로젝트의 일부임. 이들 웹사이트는 누가 운영하는지에 대한 정보가 없음
     * 광고 투명성 페이지에서 정책을 위반한 광고를 보여주지 않는 이유가 궁금함. 투명성의 일환으로 제거된 광고를 보여주는 것이 좋을 것 같음
     * Google에 찬사를 보냄. Google 외의 모든 매체에도 이러한 투명성이 필요함
     * 광고 투명성 페이지에서 일부 광고가 ""정책 위반""으로 숨겨져 있는 것이 이상함. 투명성 섹션에서는 이러한 광고나 위반 이유에 대해 더 관심을 가질 것 같음
     * 집에서 pi-hole 광고 차단 규칙이 해당 페이지에 작동하여 제목은 볼 수 있지만 모든 이미지가 로드되지 않음
     * 지난 1년간의 데이터 범위에서 두 번째로 많은 광고비가 지출된 주는 캘리포니아였음. 캘리포니아는 스윙 스테이트와 거리가 멀다고 알고 있음
"
"https://news.hada.io/topic?id=17349","Generative AI’s Act o1 - 에이전트 추론의 시대 개막","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Generative AI’s Act o1 - 에이전트 추론의 시대 개막

     * Generative AI 혁명 2년차에 접어들면서, 연구는 ""빠른 사고""에서 ""느린 사고""로 진화하고 있음
          + ""빠른 사고""는 사전 학습된 빠른 응답을 의미하고, ""느린 사고""는 Inference 시 Reasoning 하는 것을 의미함
          + 이런 진화로 인해 새로운 유형의 에이전트 애플리케이션이 등장하고 있음
     * Generative AI 시장의 기반 계층이 안정화되면서 Microsoft/OpenAI, AWS/Anthropic, Meta, Google/DeepMind 등 소수의 대형 업체들이 시장을 주도하고 있음
          + 경제적 엔진과 막대한 자본을 가진 대형 업체들만이 경쟁에 남아있음
          + 시장 구조 자체는 견고해지고 있으며, 저렴하고 풍부한 next-token 예측이 가능해질 것임
     * LLM 시장 구조가 안정화되면서 새로운 프론티어가 등장
          + ""시스템 2"" 사고 방식이 우선시되는 추론 계층의 개발과 확장에 초점이 맞춰지고 있음
          + AlphaGo와 같은 모델에서 영감을 받아, 이 계층은 단순한 패턴 매칭을 넘어 신중한 추론, 문제 해결, 인지 작용 등을 AI 시스템에 부여하는 것을 목표로 함
          + 새로운 인지 아키텍처와 사용자 인터페이스가 이러한 추론 능력이 사용자에게 전달되고 상호 작용하는 방식을 형성하고 있음

Strawberry Fields Forever

     * 2024년 가장 중요한 모델 업데이트는 OpenAI의 o1임 (이전에는 Q*로 알려졌으며 Strawberry라고도 함)
          + 이는 단순히 OpenAI가 모델 품질 리더보드 상위권에 올라선 것뿐만 아니라, 현상 유지 아키텍처에 상당한 개선을 가져온 것임
          + 구체적으로, 이는 추론-시간 컴퓨팅으로 달성한 진정한 ""일반 추론 능력""을 가진 최초의 모델임
     * 사전 학습 모델 vs 추론 시간 컴퓨팅
          + 사전 학습 모델은 방대한 양의 데이터를 사용해 next token prediction을 수행함
          + 규모의 창발 특성(emergent property)은 기본적인 추론이지만, 이 추론은 매우 제한적임
          + 추론 시간 컴퓨팅은 모델에게 응답을 제공하기 전에 멈추고 생각하도록 요청하는 것을 의미함
          + 이를 위해서는 추론 시 더 많은 컴퓨팅이 필요함
          + ""멈추고 생각하는"" 부분이 바로 추론(reasoning)임

AlphaGo와 LLM의 비교

     * AlphaGo는 2016년 3월 서울에서 바둑 전설 이세돌과 대결하며 딥러닝 역사상 가장 중요한 순간 중 하나를 만들어냄
          + AlphaGo는 단순히 패턴을 모방하는 것 이상인 ""사고(thinking)하는 AI""의 모습을 세상에 보여줌
     * AlphaGo와 이전 게임플레이 AI 시스템의 차이점
          + AlphaGo는 LLM과 마찬가지로 약 3천만 개의 이전 게임 움직임 데이터베이스와 자가 대국을 통해 인간 전문가를 모방하도록 사전 학습됨
          + 그러나 사전 학습 모델에서 나오는 즉각적인 반응을 제공하는 대신, AlphaGo는 시간을 들여 멈추고 사고함
          + 추론 시, AlphaGo는 광범위한 잠재적 미래 시나리오에 대해 검색 또는 시뮬레이션을 실행하고, 해당 시나리오를 평가한 다음, 기대값이 가장 높은 시나리오(또는 답변)로 응답함
          + AlphaGo에 주어지는 시간이 많을수록 성능이 향상됨
          + 추론 시간 컴퓨팅이 전혀 없으면 AlphaGo는 최고의 인간 플레이어를 이길 수 없음
     * LLM에서 AlphaGo를 복제하는 것이 어려운 이유
          + 응답을 평가하는 가치 함수(value function)를 구성하는 것이 어려움
          + 바둑에서는 게임을 끝까지 시뮬레이션하고 누가 이기는지 확인한 다음 다음 수의 기대값을 계산할 수 있음
          + 코딩에서는 코드를 테스트하고 작동 여부를 확인할 수 있음
          + 그러나 에세이의 초안, 여행 일정, 긴 문서의 핵심 용어 요약 등은 평가하기 어려움
          + 이는 현재 방법론으로는 추론이 어려운 이유이며, Strawberry가 논리(예: 코딩, 수학, 과학)에 가까운 영역에서는 상대적으로 강력하지만 개방적이고 비정형적인 영역(예: 글쓰기)에서는 그렇지 않은 이유임
     * Strawberry 모델의 추론 능력 개선을 위한 연구
          + Strawberry의 실제 구현은 철저히 보호되고 있지만, 핵심 아이디어는 모델이 생성한 사고 체인에 대한 강화 학습과 관련이 있음
          + 모델의 사고 체인을 감사하는 것은 인간의 사고와 추론 방식과 유사한 근본적이고 흥미로운 일이 일어나고 있음을 시사함
          + 예를 들어, o1은 추론 시간 스케일링의 창발 특성으로 막힐 때 되돌아갈 수 있는 능력을 보여주고 있음
          + 또한 인간처럼 문제에 대해 생각할 수 있는 능력(예: 기하학 문제를 풀기 위해 구의 점을 시각화)과 새로운 방식으로 문제에 대해 생각할 수 있는 능력(예: 인간과 다른 방식으로 프로그래밍 대회 문제 해결)을 보여주고 있음
          + 연구팀은 모델의 추론 능력을 향상시키기 위해 보상 함수 계산의 새로운 방법, generator/verifier 간극을 좁히는 새로운 방법 등 추론 시간 컴퓨팅을 발전시키기 위한 아이디어가 풍부함
          + 즉, 심층 강화 학습이 다시 주목받고 있으며, 이는 전체적으로 새로운 추론 계층을 가능하게 하고 있음

System 1에서 System 2 Thinking으로의 도약

     * 사전 학습된 본능적 반응(""시스템 1"")에서 더 깊고 신중한 추론(""시스템 2"")으로의 도약이 AI의 차세대 프론티어임
     * 모델이 단순히 무언가를 아는 것만으로는 충분하지 않음
     * 모델은 실시간으로 결정을 내리기 위해 잠시 멈추고, 평가하고, 추론할 필요가 있음
     * 사전 학습은 시스템 1 계층에 해당함
          + AlphaGo에서 수백만 번의 바둑 수를 학습하든, LLM에서 인터넷 규모의 텍스트 페타바이트를 학습하든, 사전 학습의 목표는 인간의 게임플레이나 언어와 같은 패턴을 모방하는 것임
          + 그러나 모방은 아무리 강력해도 진정한 추론이 아님
          + 특히 학습 데이터셋 외의 복잡하고 새로운 상황에서 제대로 사고할 수 없음
     * 시스템 2 사고가 최신 AI 연구의 초점임
          + 모델이 ""멈추고 생각""할 때, 단순히 학습된 패턴을 생성하거나 과거 데이터를 기반으로 예측을 내뱉는 것이 아님
          + 가능성의 범위를 생성하고, 잠재적 결과를 고려하며, 추론에 기반한 결정을 내림
     * 시스템 1 사고와 시스템 2 사고의 적절한 활용
          + 많은 작업에서 시스템 1 사고로 충분함 (예: 부탄의 수도가 무엇인지 더 오래 생각해도 도움이 되지 않음)
          + 그러나 수학이나 생물학의 돌파구와 같은 더 복잡한 문제에서는 빠르고 본능적인 반응으로는 불충분함
          + 이러한 진보에는 깊은 사고, 창의적 문제 해결, 그리고 무엇보다 시간이 필요함
          + AI도 마찬가지임. 가장 어렵고 의미 있는 문제를 해결하기 위해서는 빠른 학습 데이터셋 내 반응을 넘어 인간의 진보를 정의하는 사려 깊은 추론을 내놓기 위해 시간을 들여야 함

새로운 스케일링 법칙: 추론 경쟁의 시작

     * OpenAI의 o1 논문에서 가장 중요한 통찰은 새로운 스케일링 법칙이 등장했다는 것임
     * LLM 사전 학습의 스케일링 법칙
          + LLM 사전 학습은 잘 이해된 스케일링 법칙을 따름
          + 모델 사전 학습에 더 많은 컴퓨팅과 데이터를 사용할수록 성능이 향상됨
     * 추론 시간 컴퓨팅의 새로운 스케일링 법칙
          + o1 논문은 컴퓨팅 확장을 위한 새로운 차원을 열었음
          + 모델에 더 많은 추론 시간(또는 ""테스트 시간"") 컴퓨팅을 제공할수록 추론 능력이 향상됨
     * 모델이 몇 시간, 며칠, 몇 십년 동안 사고할 수 있게 되면 어떻게 될까?
          + 리만 가설을 해결할 수 있을까?
          + 아시모프의 마지막 질문에 대답할 수 있을까?
     * 대규모 사전 학습 클러스터에서 추론 클라우드로의 전환
          + 이러한 변화는 우리를 대규모 사전 학습 클러스터의 세계에서 추론 클라우드로 이동시킬 것임
          + 추론 클라우드는 작업의 복잡성에 따라 컴퓨팅을 동적으로 확장할 수 있는 환경임

하나의 모델이 모든 것을 지배하게 될까?

     * OpenAI, Anthropic, Google, Meta 등이 추론 계층을 확장하고 더 강력한 추론 머신을 개발함에 따라 어떤 일이 일어날까?
     * 하나의 모델이 모든 것을 지배하게 될까?
     * 하나의 가설은 단일 모델 회사가 너무 강력해져서 다른 모든 애플리케이션을 흡수할 것이라는 것이었음
          + 이 예측은 지금까지 두 가지 면에서 잘못된 것으로 판명됨
          + 첫째, 모델 계층에는 SOTA 능력을 두고 끊임없이 경쟁하는 많은 경쟁 업체들이 있음
               o 누군가 광범위한 도메인 자가 학습을 통해 지속적인 자기 개선을 이루고 이륙에 성공할 가능성은 있지만, 아직 그런 증거는 없음
               o 오히려 모델 계층은 치열한 경쟁의 장이며, GPT-4의 토큰당 가격이 지난 개발자의 날 이후 98% 하락함
          + 둘째, 모델이 애플리케이션 계층으로 진출하는 데 어려움을 겪고 있음
               o ChatGPT를 제외하고는 모델이 애플리케이션 계층에서 획기적인 제품으로 자리 잡는 데 대체로 실패했음
               o 현실 세계는 복잡하기 때문임
               o 훌륭한 연구원들은 모든 가능한 수직 시장의 모든 가능한 기능에 대한 세부적인 엔드 투 엔드 워크플로를 이해하고 싶어하지 않음
               o 연구원들이 API에서 멈추고 개발자 생태계에 현실 세계의 복잡성을 맡기는 것이 매력적이고 경제적으로 합리적임
               o 이는 애플리케이션 계층에 좋은 소식임

복잡한 현실 세계: 맞춤형 인지 아키텍처의 필요성

     * 과학자로서 목표를 달성하기 위해 행동을 계획하고 수행하는 방식은 소프트웨어 엔지니어로서 일하는 방식과 크게 다름
     * 또한 서로 다른 회사의 소프트웨어 엔지니어로서 일하는 방식도 다름
     * 연구소에서 수평적 범용 추론의 경계를 더 밀어붙이고 있지만, 여전히 유용한 AI 에이전트를 제공하기 위해서는 애플리케이션 또는 도메인 특화 추론이 필요함
     * 복잡한 현실 세계는 일반 모델에 효율적으로 인코딩할 수 없는 상당한 도메인 및 애플리케이션별 추론을 필요로 함
     * 인지 아키텍처의 등장
          + 인지 아키텍처는 시스템의 사고 방식, 즉 사용자 입력을 받아 행동을 수행하거나 응답을 생성하는 코드와 모델 상호 작용의 흐름을 의미함
          + 예를 들어 Factory의 경우, ""드로이드"" 제품 각각은 풀 리퀘스트 검토 또는 백엔드 간 서비스 업데이트를 위한 마이그레이션 계획 작성 및 실행과 같은 특정 작업을 해결하기 위해 인간이 생각하는 방식을 모방하는 맞춤형 인지 아키텍처를 가지고 있음
          + Factory 드로이드는 모든 종속성을 분석하고, 관련 코드 변경을 제안하며, 단위 테스트를 추가하고, 검토를 위해 사람을 끌어들임
          + 그런 다음 승인 후 개발 환경의 모든 파일에서 변경 사항을 실행하고, 모든 테스트를 통과하면 코드를 병합함
          + 이는 일반화되고 블랙박스 같은 하나의 답변이 아니라 일련의 개별 작업으로 이루어지는 인간의 사고 방식과 유사함

App에는 무슨 일이 벌어지고 있나?

     * AI 사업을 시작하려면 어떤 계층을 타겟으로 해야 할까?
          + 인프라 계층에서 경쟁하려면 NVIDIA와 하이퍼스케일러를 이겨야 함
          + 모델 계층에서 경쟁하려면 OpenAI와 Mark Zuckerberg를 이겨야 함
          + 애플리케이션 계층에서 경쟁하려면 기업 IT와 글로벌 시스템 통합 업체를 이겨야 함
          + 애플리케이션 계층에서의 경쟁이 가장 실현 가능해 보임
     * 애플리케이션 계층의 기회
          + 기반 모델은 마법 같지만 복잡하기도 함
          + 주류 기업은 블랙박스, 환각, 어설픈 워크플로를 다룰 수 없음
          + 소비자는 빈 프롬프트를 보고 무엇을 요청해야 할지 모름
          + 이는 애플리케이션 계층의 기회임
     * 2년 전, 많은 애플리케이션 계층 회사들이 ""GPT-3 위의 래퍼에 불과하다""고 비난받았음
          + 오늘날 그 래퍼들은 지속 가능한 가치를 구축하는 몇 안 되는 건전한 방법 중 하나로 판명됨
          + ""래퍼""로 시작한 것이 ""인지 아키텍처""로 진화함
     * 애플리케이션 계층 AI 회사의 특징
          + 단순히 기반 모델 위에 UI를 올리는 것이 아님
          + 일반적으로 다음을 포함하는 정교한 인지 아키텍처를 가지고 있음:
               o 상단에 일종의 라우팅 메커니즘이 있는 여러 기반 모델
               o RAG를 위한 벡터 및/또는 그래프 데이터베이스
               o 규정 준수를 보장하기 위한 가드레일
               o 워크플로를 통한 추론 방식을 모방하는 애플리케이션 로직

Service-as-a-Software

     * 클라우드 전환은 ""서비스로서의 소프트웨어(Software-as-a-Service)""였음. 소프트웨어 회사들이 클라우드 서비스 제공업체가 되었고, 이는 3,500억 달러 규모의 기회였음
     * 에이전트 추론 덕분에 AI 전환은 ""소프트웨어로서의 서비스(Service-as-a-Software)""임. 소프트웨어 회사들이 노동력을 소프트웨어로 전환시키고 있음
     * 이는 타깃 시장이 소프트웨어 시장이 아니라 수조 달러 규모의 서비스 시장이라는 것을 의미함
     * 일을 판매한다는 것의 의미
          + Sierra라는 회사가 좋은 예시임
          + B2C 기업들은 고객과 대화하기 위해 자사 웹사이트에 Sierra를 배치함
          + 해야 할 일(job-to-be-done)은 고객 문제를 해결하는 것임
          + Sierra는 해결건 당 비용을 받음
          + ""시트(seat)"" 같은 건 없음. 당신은 해야 할 일이 있고 Sierra가 그 일을 처리하며 그에 따라 비용을 받음
          + 이것이 많은 AI 회사들의 진정한 북극성임
     * Sierra의 장점과 다른 회사들의 도전 과제
          + Sierra는 우아한 실패 모드(사람 상담원에게 에스컬레이션)의 이점이 있음
          + 모든 회사가 그렇게 운이 좋은 것은 아님
          + 새로운 패턴은 먼저 조종사(human-in-the-loop)로 배포한 다음 그 경험을 활용해 자동조종장치(human-out-of-the-loop) 배포 기회를 얻는 것임
          + GitHub Copilot이 이에 대한 좋은 예시임

새로운 유형의 에이전트 애플리케이션이 등장하기 시작

     * Generative AI의 새로운 추론 기능으로 새로운 종류의 에이전트 애플리케이션이 등장하기 시작
     * 흥미롭게도 이러한 애플리케이션 계층 회사들은 이전의 클라우드 회사들과는 다른 모습을 보임:
          + 클라우드 회사들은 소프트웨어 수익을 타깃으로 했지만, AI 회사들은 서비스 수익을 타깃으로 함
          + 클라우드 회사들은 소프트웨어($/시트)를 판매했지만, AI 회사들은 작업($/결과)을 판매함
          + 클라우드 회사들은 마찰 없는 유통으로 bottom-up 접근을 선호했지만, AI 회사들은 점점 더 high-touch, high-trust 전달 모델로 top-down 접근을 하고 있음
     * 지식 경제의 모든 부문에서 등장하는 에이전트 애플리케이션의 예시
          + Harvey: AI 변호사
          + Glean: AI 업무 어시스턴트
          + Factory: AI 소프트웨어 엔지니어
          + Abridge: AI 의료 기록사
          + XBOW: AI 침투 테스터
          + Sierra: AI 고객 지원 에이전트
     * 이러한 서비스를 제공하는 한계 비용을 추론 비용의 급락과 같은 수준으로 낮춤으로써 에이전트 애플리케이션은 새로운 시장을 확장하고 창출하고 있음
     * XBOW는 좋은 예시임:
          + XBOW는 AI ""pentester""를 만들고 있음
          + ""펜테스트"" 또는 침투 테스트는 기업이 자체 보안 시스템을 평가하기 위해 수행하는 컴퓨터 시스템에 대한 시뮬레이션된 사이버 공격임
          + Generative AI 이전에는 인간 펜테스팅이 비싸기 때문에(숙련된 인력이 수행하는 수작업) 기업들은 제한된 상황(예: 규정 준수를 위해 필요한 경우)에서만 펜테스터를 고용했음
          + 그러나 XBOW는 이제 최신 추론 LLM을 기반으로 자동화된 펜테스트를 시연하고 있으며, 이는 가장 숙련된 인간 펜테스터의 성능에 필적함
          + 이는 펜테스팅 시장을 확대하고 모든 규모와 형태의 기업에 지속적인 펜테스팅 가능성을 열어줌

이 것이 SaaS업계에 미치는 영향?

     * 올해 초 LP들과 만났을 때, 가장 많이 받은 질문은 ""AI 전환이 기존 클라우드 회사들을 파괴할 것인가?""였음
     * 우리는 ""아니요""라는 강력한 기본 가정으로 시작했음
          + 스타트업과 기존 기업 간의 고전적인 싸움은 스타트업이 유통을 구축하고 기존 기업이 제품을 구축하는 경주와 같음
          + 고객을 소유한 기존 기업이 멋진 제품을 내놓기 전에 멋진 제품을 가진 젊은 회사들이 고객에게 다가갈 수 있을까?
          + AI의 마법이 대부분 기반 모델에서 나오고 있다는 점을 감안할 때, 우리의 기본 가정은 ""아니요""였음
          + 기존 기업은 스타트업만큼이나 기반 모델에 접근할 수 있고 데이터와 유통의 기존 이점이 있기 때문에 잘 해낼 것임
          + 스타트업의 주요 기회는 기존 소프트웨어 회사를 대체하는 것이 아니라 자동화 가능한 작업 풀을 공략하는 것임
     * 그러나 우리는 더 이상 그렇게 확신하지 않음
          + 인지 아키텍처에 관해 위에서 언급한 내용을 참조할 것
          + 모델의 원시 기능을 설득력 있고 신뢰할 수 있는 엔드 투 엔드 비즈니스 솔루션으로 바꾸려면 엄청난 양의 엔지니어링이 필요함
          + ""AI 네이티브""가 의미하는 바를 극적으로 과소평가하고 있는 것은 아닐까?
     * 20년 전 온프레미스 소프트웨어 회사들은 SaaS 아이디어를 비웃었음
          + ""대수롭지 않아. 우리도 자체 서버를 운영하고 이것을 인터넷으로 제공할 수 있어!""
          + 개념적으로는 간단했지만, 뒤이어 사업의 전면적인 재창조가 이루어졌음:
               o EPD는 폭포수 모델과 PRD에서 애자일 개발과 AB 테스팅으로 전환했음
               o GTM은 하향식 기업 영업과 스테이크 저녁 식사에서 상향식 PLG와 제품 분석으로 전환했음
               o 비즈니스 모델은 높은 ASP와 유지보수 스트림에서 높은 NDR과 사용량 기반 가격으로 전환했음
          + 온프레미스 회사 중 전환에 성공한 곳은 거의 없었음
     * AI가 SaaS와 유사한 전환점이 될 수 있을까? AI의 기회는 일을 팔면서 동시에 소프트웨어를 대체하는 것일 수 있을까?
     * Day.ai를 통해 우리는 미래를 엿볼 수 있었음
          + Day는 AI 네이티브 CRM임
          + 시스템 통합업체들은 Salesforce를 고객의 요구에 맞게 구성하는 데 수십억 달러를 벌고 있음
          + Day는 이메일과 캘린더에 대한 액세스, 그리고 한 페이지 분량의 설문지에 대한 답변만으로 자동으로 고객의 비즈니스에 완벽하게 맞춰진 CRM을 생성함
          + 아직 모든 기능을 갖추고 있지는 않지만, 사람의 개입 없이도 항상 최신 상태를 유지하는 자동 생성 CRM의 마법은 이미 사람들로 하여금 전환을 결심하게 하고 있음

투자 업계

     * 투자자들은 어디에 시간을 할애하고 자금을 투입하고 있을까?
     * 인프라
          + 이 영역은 하이퍼스케일러들의 영역임
          + 경제적 분석보다는 게임 이론적인 행동에 의해 주도되고 있음
          + 벤처 투자자들에게는 적합하지 않은 영역임
     * 모델
          + 하이퍼스케일러와 재무적 투자자(FI)들이 활동하는 영역임
          + 하이퍼스케일러는 자산 대차대조표를 활용해 수익을 얻고, 클라우드 비즈니스에서 계산 비용으로 다시 돌아오는 방식으로 투자함
          + 재무적 투자자들은 “과학에 감탄하는” 편향에 의해 영향을 받음
          + 이 모델들은 매우 흥미롭고 팀들도 뛰어나지만, 경제적 논리는 무시됨
     * 개발자 도구 및 인프라 소프트웨어
          + 전략적 투자자들에게는 덜 흥미롭지만 벤처 투자자들에게는 더 매력적임
          + 클라우드 전환 시기에 10억 달러 이상의 매출을 올린 약 15개의 회사가 이 계층에서 창출됨
          + AI 전환에서도 비슷한 현상이 일어날 것으로 예상됨
     * 애플리케이션
          + 벤처 투자자들에게 가장 흥미로운 계층임
          + 클라우드 전환 동안 10억 달러 이상의 매출을 올린 약 20개의 애플리케이션 계층 회사가 창출됨
          + 모바일 전환에서도 비슷한 수의 회사가 등장했으며, 이번 AI 전환에서도 비슷한 추세가 있을 것으로 예상됨

마무리 생각

     * 생성 AI의 다음 단계에서는 추론 연구개발(R&D) 의 영향이 애플리케이션 계층에 빠르고 깊게 확산될 것으로 예상됨
     * 기존의 인지 아키텍처는 주로 “제약 해제(unhobbling)” 기술을 포함했으나, 이제 이러한 능력이 모델 자체에 내재화되고 있어 에이전트 기반 애플리케이션이 더욱 정교하고 견고해질 것으로 예상됨
     * 연구실에서는 Reasoning과 Inference-Time의 계산이 계속 중요한 주제로 남을 것이며, 새로운 스케일링 법칙이 등장한 지금, 다음 경쟁이 시작됨
     * 그러나 특정 도메인에서는 여전히 실세계 데이터를 수집하고, 도메인 및 애플리케이션에 특화된 인지 아키텍처를 인코딩하는 것이 어려움
     * 이러한 문제를 해결하는 데에는 라스트마일 앱 제공업체가 유리할 수 있음
     * 앞으로 Factory의 Droid와 같은 다중 에이전트 시스템이 등장하여 추론 및 사회적 학습 프로세스를 모델링하는 방식으로 확산될 가능성 있음
     * 다중 에이전트 시스템은 여러 작업을 동시에 처리할 수 있는 팀을 구성하여 더 많은 작업을 달성할 수 있을 것으로 예상됨
     * 많은 사람들이 기대하는 순간은 생성 AI의 ‘Move 37’ 로, 이는 AlphaGo가 이세돌과의 대국에서 보여준 것처럼 일반 AI 시스템이 예상치 못한 초인적인 행동을 보이는 순간을 의미함
     * 이 순간이 온다고 해서 AI가 “의식을 가지는” 것은 아니지만, AI가 지각, 추론, 행동의 과정을 시뮬레이션하여 독창적이고 유용한 방식으로 탐색할 수 있는 능력을 가질 수 있음
     * 이는 AGI(인공지능의 완전한 자율성) 일 가능성이 있으며, 이는 단일한 사건이 아니라 기술의 다음 단계로 이어질 것임

   더 똑똑해지는 인공지능으로 어떤 문제를 해결할 수 있을지 기대됩니다.

   모델이 오랫동안 생각해서 리만 가설을 풀 수 있다면, 파급력이 엄청나겠네요.

     모델 계층에서 경쟁하려면 OpenAI와 Mark Zuckerberg를 이겨야 함

   Meta가 아니고 저커버그를 언급한게 뭔가 웃기네요ㅋㅋㅋ

   요약 글에 명시적으로 안나와 있어 혹시 몰라 적어보면 시스템1과 시스템2는 생각에 관한 생각(Thinking, Fast and Slow)이라는 책에 나온 개념입니다.
   시스템1: 깊은 생각 없이 무의식적 또는 직관적으로 행동하는 빠른 사고 ex) 운전, 걷기
   시스템2: 논리적으로 골똘히 생각해야 하는 느린 사고 ex) 암산
"
"https://news.hada.io/topic?id=17431","프라이빗 클라우드 컴퓨트 보안 연구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          프라이빗 클라우드 컴퓨트 보안 연구

     * Private Cloud Compute (PCC) 소개
          + Apple Intelligence의 계산 집약적 요청을 처리하면서 혁신적인 개인정보 보호 및 보안 기능을 제공하는 PCC 소개
          + PCC의 보안 및 개인정보 보호 약속을 검증하기 위해 보안 및 개인정보 보호 연구자들에게 시스템을 검사할 수 있는 기회를 제공함
          + Apple Security Bounty를 PCC에 확장하여 보안 및 개인정보 보호 문제에 대한 보고에 대한 보상을 제공함
     * 보안 가이드
          + PCC의 아키텍처 설계 및 핵심 요구 사항을 달성하는 방법을 설명하는 보안 가이드 제공
          + 하드웨어에 구현된 불변의 기능을 기반으로 한 PCC 증명, 요청 인증 및 라우팅 방법, 데이터 센터에서 실행되는 소프트웨어 검사 방법, 다양한 공격 시나리오에서의 개인정보 보호 및 보안 속성 설명
     * 가상 연구 환경 (VRE)
          + Apple 플랫폼을 위한 최초의 가상 연구 환경(VRE) 제공
          + Mac에서 PCC의 보안 분석을 수행할 수 있는 도구 세트 제공
          + VRE는 가상 머신에서 PCC 노드 소프트웨어를 실행하며, 보안 연구를 위한 가상 Secure Enclave Processor(SEP) 포함
     * Private Cloud Compute 소스 코드
          + PCC의 보안 및 개인정보 보호 요구 사항을 구현하는 주요 구성 요소의 소스 코드 제공
          + CloudAttestation, Thimble, splunkloggingd, srd_tools 프로젝트의 소스 코드 제공
     * Apple Security Bounty for Private Cloud Compute
          + PCC의 근본적인 보안 및 개인정보 보호 보장을 손상시키는 취약점에 대한 보상을 제공하는 Apple Security Bounty 확장
          + 실수로 인한 데이터 노출, 사용자 요청으로 인한 외부 침해, 물리적 또는 내부 접근과 관련된 취약점에 대한 보상 제공
     * 마무리
          + PCC는 AI의 개인정보 보호를 위한 획기적인 진전을 이루기 위해 설계됨
          + Apple Security Research Device Program의 경험을 바탕으로 PCC의 보안 및 개인정보 보호 기능을 연구하고 검증할 수 있는 도구 및 문서 제공
          + 연구 커뮤니티와 협력하여 시스템의 신뢰성을 구축하고 보안을 강화하기 위해 노력함

GN⁺의 정리

     * PCC는 Apple Intelligence의 계산 집약적 요청을 처리하며, 혁신적인 개인정보 보호 및 보안 기능을 제공함
     * 보안 및 개인정보 보호 연구자들에게 시스템을 검사할 수 있는 기회를 제공하여 투명성을 높임
     * Apple Security Bounty를 통해 보안 및 개인정보 보호 문제에 대한 보고에 대한 보상을 제공함
     * 연구 커뮤니티와의 협력을 통해 시스템의 신뢰성을 구축하고 보안을 강화하는 데 기여함

        Hacker News 의견

     * 투명한 시스템의 이점은 상당하며, 재현 가능한 빌드, 원격 증명 및 투명성 로깅의 조합은 공급망 공격을 쉽게 감지할 수 있게 함. 원격 실행 시스템의 소스 코드를 사후 감사할 수 있는 기능을 제공함. 위협 모델이 보호하지 않는 공격도 있지만, 여전히 유용함.
     * 서버 측에서 모든 것을 Swift로 작성하는 것 같음. 관련 저장소는 GitHub 링크임.
     * 실리콘 백도어의 가능성을 피하기 위한 연막으로 보임. 개방된 실리콘이 없으면 특정 레지스터 설정 시 모니터 프로세스에 추가 접근이 허용되는 것을 감지할 수 없음. 이는 공격자를 특정 정부나 회사로 제한하지만, 원격 하드웨어를 신뢰할 수 있는 방법은 없음. 이는 VM이 다른 공격자로부터 안전하다는 신뢰를 증가시킴.
     * Apple이 플랫폼에서 실행되는 정보에 접근할 수 없다고 믿는다면, 보상금을 $50,000에서 $50,000,000,000으로 늘려야 함. 사용자의 요청 데이터를 접근할 수 있다면 보상금을 주고 법적 조치를 취하지 않겠다는 조건을 제시해야 함. $50,000의 보상금은 너무 낮음.
     * GitHub에 게시된 코드를 연구 중임. 공격의 한 방법은 코드의 버그/우회책을 연구하는 것임. Apple의 버그 관리 시스템 링크 스키마인 rdar에 대한 참조가 나열되어 있음. 코드가 iOS와 macOS를 참조하여 크로스 플랫폼임을 알 수 있음. Swift로 작성된 미들웨어가 흥미로움.
     * 많은 사람들이 이 프로그램이 보증으로 충분하지 않다고 생각하지만, 이 시스템의 진정한 가치는 Apple이 시스템에 대해 법적으로 집행 가능한 주장을 한다는 것임. Apple의 법무팀이 이러한 주장을 검증했을 것임.
     * 연막과 거울임. 정의상 다른 사람의 컴퓨터는 사적인 것이 아님. 이러한 시도는 정의를 변경하려는 것임.
     * ""보안 연구 토론"" 섹션을 포함하면 좋겠음. 시스템에 대해 이야기하는 사람들을 연결하는 장소가 필요함.
     * PCC의 흥미로운 점은 가상화를 실행하는 마이크로커널로 보임. 이는 혁신이며, 나머지는 표준적인 부분임. 로깅이 대부분 비활성화되고 메트릭만 출력할 수 있기를 바랐음.
"
"https://news.hada.io/topic?id=17369","유클리드 첫 이미지 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             유클리드 첫 이미지 공개

        Hacker News 의견

     * 270년 만에 우리 태양계의 제한적이고 정확한 지도에서 현재의 우주 지식으로 발전한 것이 놀라움
          + 미래 기술 발전 뒤에 어떤 우주 지식이 숨겨져 있을지 궁금함
     * 4억 2천만 광년 떨어진 은하를 보는 것이 놀라움
          + 그 시간 동안 많은 변화가 있었을 것이며, 적절한 조건이 주어진다면 생명도 형성될 수 있을 것이라 추측함
          + 거리가 너무 멀어 현재 그곳에 존재할 수 있는 것을 실제로 볼 수 없다는 점이 약간 슬픔
     * 비디오를 보지 않고 싶다면 이미지가 있는 페이지를 추천함
          + 언젠가 Google Maps처럼 확대 가능한 이미지가 있기를 바람
     * 확대된 이미지를 보는 것이 불편함을 느끼게 함
          + 우주가 정말로 거대하다는 것을 깨닫게 됨
          + 이 모든 것이 무엇인지 궁금해짐
     * 우주의 광대함을 보여주는 것이 말로 표현하기 어려움
          + 우주에 비해 인간이 아무것도 아닌 것처럼 느껴짐
          + 하지만 이렇게 작은 존재로서도 많은 것을 알 수 있다는 점에서 인간으로서의 능력을 느끼게 됨
     * 다른 은하가 존재한다는 것이 확인된 지 100년 조금 넘었음
          + 그 전에는 보이는 우주가 10만 파섹 정도라고 생각했음 (현재 우리가 알고 있는 은하수의 크기)
     * 누군가가 우리를 지도화하고 있을지도 모른다고 상상하는 것이 재미있음
          + 우주 여행의 가장 좋은 점 중 하나는 세계의 광대함을 이해할 때 자아를 잃는 것임
     * 많은 태양계가 존재하며, 여러 행성에서 생명이 진화했을 것이라고 확신함
          + 증거는 없지만 의심은 없음
     * 물질이 얼마나 많은지 혼란스러움
          + 그 점들이 전체 은하인지 궁금함
          + Euclid 팀에게 감사함
     * 인류에게 주어진 놀라운 선물임
          + 깊은 필드 같은 이미지에서 멋진 확대를 보는 것이 영감을 줌
          + ESA에 찬사를 보냄
"
"https://news.hada.io/topic?id=17454","ZombAIs - Claude Computer Use의 프롬프트 인젝션에서 C2(지휘통제)까지 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ZombAIs - Claude Computer Use의 프롬프트 인젝션에서 C2(지휘통제)까지

     * Anthropic이 출시한 Claude Computer Use는 컴퓨터를 제어할 수 있게 해주는 모델+코드
          + 클로드는 스크린샷을 통해 결정을 내리고, bash 명령어를 실행하는 등의 작업이 가능함
     * 멋진 기능이지만 프롬프트 인젝션에 취약할 수 있음
          + AI가 기계에서 자율적으로 명령어를 실행할 수 있기 때문에, 프롬프트 인젝션으로 악용될 경우 심각한 위험을 초래

악성코드 실행하기 - 얼마나 어려울까?

     * Claude Computer Use가 프롬프트 인젝션 공격을 통해 악성코드를 다운로드하고 실행하여 Command and Control(C2, 지휘통제) 인프라에 연결할 수 있는지 알아보고 싶었음

    C2 서버

     * Sliver를 사용하여 C2 인프라를 구축하고 리눅스용 클라이언트 바이너리를 생성함
          + Silver: 오픈소스 적대적 에뮬레이션 프레임워크(레드 팀). 보안 테스트용으로 사용됨
     * implant라고 불리는 이 바이너리를 실행하면 C2 서버에 안전하게 연결되고 감염된 컴퓨터는 좀비가 됨
          + 이 바이너리를 spai-demo, 감염된 컴퓨터를 ZombAI로 부르기로 함
     * Claude Computer Use에게 프롬프트 인젝션 공격을 해서 이 C2 서버에 접속하게 만들수 있을까?

    악성 웹 페이지

     * spai-demo 바이너리를 다운로드할 수 있도록 웹 서버에 호스팅함
     * Claude가 바이너리를 다운로드하고 실행하도록 프롬프트 인젝션 페이로드를 작성하는 것이 목표

    악성 페이지 탐색하기

     * Claude는 Firefox를 열고 URL을 붙여넣어 웹 페이지를 탐색할 수 있음
     * 대상 페이지는 악성이며 프롬프트 인젝션 페이로드가 포함되어 있음
     * 웹페이지가 Claude에게 bash 명령어를 실행하도록 만드는 데 성공함

    한 문장으로 컴퓨터 감염시키기

     * 사실 클로드에게 Firefox를 사용하여 악성코드를 다운로드하고 실행하도록 요청하는 것이 더 쉬운 방법임
     * 클로드에게 Support Tool 링크를 클릭하여 바이너리를 다운로드하게 함
          + 클로드는 바이너리를 찾기 위해 bash 명령어를 실행하고, 권한을 수정한 후 바이너리를 실행함
     * C2 서버에 연결되었고, 셸 세션에서 감염된 바이너리를 찾을 수 있었음

결론

     * 이 글은 새로운 AI 시스템에 컴퓨터 액세스 권한을 부여할 때 프롬프트 인젝션을 활용하여 C2를 달성할 수 있음을 보여줌
     * 클로드가 악성코드를 직접 작성하고 컴파일하는 등 Claude Computer Use 호스트에 악성코드를 배포하는 다른 방법도 있음
     * ""AI를 신뢰하지 말것(TrustNoAI)""
     * 소유하지 않거나 운영 권한이 없는 시스템에서 승인되지 않은 코드를 실행해서는 안 된다는 점을 다시 한 번 기억할 것

   글 제목은 혹했는데, 결론적으로는 그냥 ""악성코드 실행해"" 수준인거라 조금 아쉽네요.
"
"https://news.hada.io/topic?id=17422","Skyvern (YC S23) – 브라우저 자동화를 위한 오픈소스 AI 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Skyvern (YC S23) – 브라우저 자동화를 위한 오픈소스 AI 에이전트

     * LLM과 컴퓨터 비전을 사용하여 브라우저 기반 워크플로우를 자동화하는 도구
     * 기존의 자동화 솔루션은 웹사이트 레이아웃 변경 시 쉽게 깨질 수 있는 DOM 파싱과 XPath 기반 상호작용에 의존했으나, Skyvern은 실시간으로 뷰포트의 항목을 분석하고 상호작용 계획을 수립하여 이를 수행
     * 장점:
          + 새로운 웹사이트에서도 작동 가능하며, 맞춤형 코드 없이 시각적 요소를 작업에 필요한 동작으로 매핑할 수 있음.
          + 웹사이트 레이아웃 변경에 강하며, 사전 정의된 XPath나 선택자를 사용하지 않음.
          + 단일 워크플로우를 여러 웹사이트에 적용 가능하며, 복잡한 상황에서도 상호작용을 통해 문제를 해결할 수 있음.

작동 방식

     * 에이전트 시스템: Skyvern은 여러 에이전트를 사용하여 웹사이트를 이해하고 작업을 계획 및 실행함.
          + 상호작용 가능한 요소 에이전트: 웹사이트의 HTML을 분석하고 상호작용 가능한 요소를 추출함.
          + 네비게이션 에이전트: 작업을 완료하기 위한 네비게이션을 계획함.
          + 데이터 추출 에이전트: 웹사이트에서 데이터를 추출함.
          + 비밀번호 에이전트: 비밀번호 양식을 채움.
          + 2FA 에이전트: 2FA 양식을 채움.
          + 동적 자동 완성 에이전트: 동적 자동 완성 양식을 채움.

Skyvern Cloud

     * 클라우드 버전: Skyvern의 관리형 클라우드 버전은 인프라를 관리하지 않고도 여러 Skyvern 인스턴스를 병렬로 실행하여 워크플로우를 대규모로 자동화할 수 있음. 또한, 봇 탐지 방지 메커니즘, 프록시 네트워크, CAPTCHA 해결 기능이 포함되어 있음.

Skyvern 작업 및 워크플로우

     * 작업: Skyvern의 기본 빌딩 블록으로, 특정 목표를 달성하기 위해 웹사이트를 탐색하도록 지시함.
     * 워크플로우: 여러 작업을 연결하여 하나의 작업 단위로 구성함. 예를 들어, 전자 상거래 스토어에서 제품을 자동으로 구매하는 프로세스를 자동화할 수 있음.

        Hacker News 의견

     * Anthropic의 Claude의 ""컴퓨터 사용"" 기능 발표에 대한 관심과 Skyvern의 차별점에 대한 질문이 있음
          + Claude의 새로운 기능과 비교하여 Skyvern의 차별점이 무엇인지 궁금해함
     * Playwright를 활용한 AI 래퍼가 최근 많이 등장했음을 언급함
          + BPA(비즈니스 프로세스 자동화)에서의 사용이 테스트 자동화보다 더 매력적이라고 생각함
          + 테스트 자동화는 정확성과 반복 가능성이 중요하지만, BPA는 결과만 중요함
     * Skyvern의 예시 비디오에서 많은 프롬프트 작성과 평문 데이터 사용에 대한 우려를 표함
          + Playwright의 코드 생성보다 기술적이지 않다고 주장하지만, 이를 관리할 수 있는 사람은 많지 않다고 생각함
          + 웹사이트 로그인 정보와 신용카드 정보를 평문으로 전달하는 것에 대한 보안 우려가 있음
     * 웹사이트 재설계 빈도가 과장되었다고 생각함
          + Playwright 자동화는 프로세스 변경 시 검증을 통해 업데이트 필요성을 알 수 있지만, Skyvern에서는 그 옵션이 보이지 않음
     * 3자 LLM에 기반한 스타트업의 위험성을 언급함
          + Anthropic, OpenAI, Google과 같은 대기업의 참여로 경쟁이 치열해질 것임
     * Skyvern의 AGPL 오픈 소스화에 대한 축하와 LangChain 통합 계획에 대한 질문이 있음
          + Skyvern의 사고/행동 논리를 구축하는 데 사용된 기술에 대한 궁금증을 표함
     * ""브라우저 자동화""의 개념을 설명함
          + Selenium과 유사하게 웹사이트를 조작하는 프로그램을 만드는 것임
     * LLM 워크플로우 자동화 도구의 사용 사례와 장기적 결과에 대한 질문을 제기함
          + 도구 간 상호 운용성 부족을 해결하는지, 보안 조치를 우회하는지, 내부 도구 유지보수를 미루는 데 사용되는지 등의 질문을 던짐
     * Skyvern이 복잡한 프로세스 위에 또 다른 복잡성을 추가하는 것인지에 대한 우려를 표함
          + 프로젝트가 유용할 것이라고 생각하지만, 장기적 효과에 대한 의문을 가짐
     * Skyvern을 modal.com에서 실행해본 적이 있는지에 대한 질문이 있음
     * WebArena와 VisualWebArena의 성능에 대한 질문이 있음
     * Cloudflare가 Skyvern을 차단할 가능성에 대한 질문이 있음
     * Skyvern을 항공사 웹사이트에서 실행해본 경험이 있는지에 대한 질문이 있음
          + 항공사 웹사이트는 자주 변경되고 스크래핑 방지 조치가 강력함
"
"https://news.hada.io/topic?id=17432","제프 베이조스, 워싱턴 포스트의 카말라 해리스 지지 철회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    제프 베이조스, 워싱턴 포스트의 카말라 해리스 지지 철회

주요 내용

     * 워싱턴 포스트의 결정: 워싱턴 포스트는 이번 대통령 선거에서 후보를 지지하지 않기로 결정했음. 이는 수십 년 만에 처음 있는 일이며, 즉각적인 비판을 불러일으켰음.
     * 제프 베조스의 역할: 신문사의 소유주인 아마존 창립자 제프 베조스가 이 결정을 내렸다고 보도됨. 베조스는 과거 도널드 트럼프 대통령과의 갈등으로 인해 주목받았음.
     * 과거의 지지: 워싱턴 포스트는 2016년과 2020년 대선에서 트럼프의 반대 후보를 지지했으며, 이번 결정은 그 전통을 깨는 것임.
     * 내부 반발: 워싱턴 포스트의 여러 칼럼니스트와 직원들이 이 결정을 비판하며, 이는 신문의 기본적인 편집 신념을 저버리는 것이라고 주장했음.
     * 독자 반응: 많은 독자들이 이 결정에 실망하며 구독을 취소하겠다고 밝혔음.

워싱턴 포스트의 입장

     * 독립성 강조: 워싱턴 포스트의 발행인 윌 루이스는 이번 결정이 신문의 독립성을 유지하기 위한 것이라고 설명했음.
     * 과거로의 회귀: 신문은 과거에 대통령 후보를 지지하지 않았던 전통으로 돌아가고자 한다고 밝힘.

내부 및 외부 반응

     * 직원 반발: 워싱턴 포스트의 직원 노조는 이번 결정이 편집부의 작업에 경영진이 개입한 것이라고 우려를 표명했음.
     * 기타 언론사 반응: 로스앤젤레스 타임스의 편집국장도 비슷한 이유로 사임했으며, 이는 언론의 자유에 대한 위협으로 간주됨.

GN⁺의 정리

     * 워싱턴 포스트의 이번 결정은 언론의 독립성과 책임 사이의 균형을 어떻게 유지할 것인가에 대한 중요한 논의를 불러일으킴.
     * 제프 베조스의 역할과 그의 정치적 영향력에 대한 비판이 제기될 수 있음.
     * 독자와 언론계의 반발은 언론의 신뢰성과 투명성에 대한 중요성을 다시 한번 상기시킴.
     * 비슷한 기능을 가진 다른 언론사로는 뉴욕 타임스와 CNN이 있음.

   트럼프를 싫어하는데도 그 반대인 해리스를 지지하지 않는 건 신기하네요.
   해리스가 어떤 문제가 있나요?

        Hacker News 의견

     * 신문은 독자들이 의견을 읽고 싶어하기 때문에 만화와 같은 이유로 의견을 게재함. 독자들이 이를 찾고, 신문은 고객의 요구를 충족시켜야 하는 사업임
          + 현재 사업주인 Jeff Bezos는 이해 상충이 있으며, 이는 The Washington Post에 나쁜 사업 결정임. 독립적인 소유자는 같은 결정을 내리지 않을 가능성이 높음
     * 신문이 대통령을 지지하는 것이 필요한지 의문임. 이는 신문의 중립성과 공정성을 저해할 수 있음
     * 중립적인 입장을 취하는 경향이 다시 증가하는 것이 좋음. 대학들이 중립성을 채택하기 시작한 것처럼 뉴스 매체도 그래야 함
     * 누구에게 투표해야 할지 모르겠음
     * 신문 지지로 인해 실제로 마음을 바꾸는 사람이 있는지 의문임. 대부분의 사람들은 이미 누구에게 투표할지 알고 있을 것임
     * Trump에 대한 강력한 지지로 보임. Bezos의 신문이 실제로 Trump를 지지했다면 조롱받았을 것임
          + 이는 Trump가 매우 강력하다는 신호이며, 지지자들 사이에서 그의 이미지를 높임. 많은 사람들이 이에 순응하도록 겁을 줄 것임
          + Los Angeles Times의 소유주 Patrick Soon-Shiong도 최근 같은 행동을 했으며, Trump 캠페인은 이를 지지자들과 공유함
     * 뉴스와 정보 매체가 어떤 후보도 지지하지 않고 가능한 한 중립을 유지하는 것이 기본 상태라면 덜 분열적일 것임
     * Bezos가 Trump 행정부의 분노를 피하고 싶어한다는 추측이 있음. 이는 매우 관대하지만, 이는 지지 행동일 수 있음
          + Bezos가 Harris 대통령직을 원하지만 그렇게 보이고 싶지 않다는 것은 환상적이고 희망적임
          + Amazon이 미국 노동 관계 위원회를 제거하려고 하는 상황을 고려할 때, Bezos가 Trump의 정책을 좋아하고 그가 승리하기를 원한다는 것이 더 현실적임
"
"https://news.hada.io/topic?id=17341","데이터 버전 관리 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             데이터 버전 관리 시스템

데이터체인 오픈소스 출시

     * 데이터체인은 비정형 데이터를 관리하는 새로운 방법을 제공함.
     * 이미지, 오디오, 비디오, 텍스트 파일을 저장소에서 관리하고, ML 모델링 프로세스를 재현 가능한 워크플로우로 조직화함.
     * GenAI 시대를 위한 데이터 및 모델 버전 관리 기능을 제공함.

데이터체인의 주요 기능

     * 주석이 달린 데이터셋을 사용자 정의 임베딩, 자동 레이블링, 편향 제거 기능으로 탐색하고 확장할 수 있음.
     * 데이터 소스와 코드를 파이프라인으로 연결하고, 실험을 추적하며, 모델을 등록할 수 있음.
     * GitOps 원칙에 기반하여 운영됨.

데이터체인과 DVC의 통합

     * 데이터 소스를 수정하지 않고 필요한 데이터셋을 구축할 수 있음.
     * 버전 관리된 데이터셋, 코드, 모델을 연결하여 실험을 효과적으로 추적할 수 있는 파이프라인을 생성함.
     * Git을 통해 실험을 추적하고, 재현 가능한 엔드 투 엔드 파이프라인을 구축할 수 있음.

GN⁺의 정리

     * 데이터체인은 비정형 데이터 관리와 ML 모델링 프로세스를 효율적으로 조직화하는 데 유용함.
     * GitOps 원칙에 기반하여 데이터 소스와 코드의 버전 관리를 지원함으로써, 실험 추적과 모델 등록을 용이하게 함.
     * 데이터셋을 사용자 정의 임베딩과 자동 레이블링을 통해 확장할 수 있어, 대규모 데이터 처리에 적합함.
     * 유사한 기능을 가진 다른 프로젝트로는 MLflow와 Pachyderm이 추천됨.
"
"https://news.hada.io/topic?id=17398","Tokenizer에 주의를 기울여야 합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Tokenizer에 주의를 기울여야 합니다

     * e-commerce 데이터를 다루는 AI 앱 개발을 돕는 과정에서 Retrieval-augmented generation(RAG)이 일부 쿼리에서는 잘 동작하지만 다른 쿼리에서는 그렇지 않았다는 문제를 발견함
     * 이러한 문제 해결 시 입력 데이터(인덱싱된 원본 텍스트, 검색에 사용되는 사용자 쿼리)를 살펴보는 것이 중요함
     * 특히 chunking과 토크나이제이션 측면에서 최적화가 필요해 보였음

[Tokenization]

     * 토크나이제이션은 텍스트를 토크나이저에 의해 더 작은 조각인 토큰으로 분해하는 과정
     * 이 토큰들은 토크나이저 어휘 내에서 토큰을 고유하게 식별하는 정수 값인 토큰 ID에 매핑됨
     * 토크나이저 어휘는 토크나이저 학습에 사용되는 모든 가능한 토큰의 집합
     * 텍스트의 토큰이 LLM의 토크나이저 어휘에 없는 경우 문제가 발생할 수 있음
     * 대부분의 LLM은 30k~300k 크기의 큰 어휘를 가지고 있음
     * 대부분의 널리 사용되는 LLM은 subword 토크나이저에 의존함(BPE, Wordpiece 등)
     * 토크나이저 종류
          + word: 공백 문자와 구두점 등을 기준으로 분할
          + character: 개별 문자(때로는 구두점까지)로 분할
          + subword: 토큰을 의미 없어 보이는 하위 단어로 분할
          + 대부분의 LLM은 subword 토크나이저를 사용
               o BPE(Byte-Pair Encoder): OpenAI의 tiktoken 라이브러리
               o Wordpiece: Cohere, MiniLM-L6-v2 등

  MiniLM-L6-v2와 tiktoken 비교

     * MiniLM-L6-v2 모델의 토크나이저 어휘 크기는 30522로 tiktoken(200019) 보다 훨씬 작음
     * ""tokenizer tokenizes text into tokens"" 문장을 토크나이징하면
          + MiniLM-L6-v2: [CLS] token ##izer token ##izes text into token ##s [SEP]
          + tiktoken: token, izer, token, izes, text, into, tokens
     * OpenAI의 tiktoken 라이브러리는 BPE 토크나이저를 구현하며 ChatGPT LLM 모델에서 사용됨
     * MiniLM-L6-v2 어휘에는 독일어 글자, 일본어 글자도 포함되어 있음

  이모지, 오타, 도메인 특화 단어 토크나이징

     * MiniLM-L6-v2는 이모지를 [UNK] 토큰으로 토크나이징함
     * tiktoken은 일부 유니코드 문자 토큰으로 학습되었지만 RAG에는 여전히 문제가 될 수 있음
     * ""Gucci Savoy Leathertrimmed Printed Coatedcanvas Suitcase""와 같은 도메인 특화 제품명도 제대로 토크나이징되지 않음
     * 오타가 있는 문장(""I hve received wrong pckage"")의 경우
          + MiniLM-L6-v2: i, h, ##ve, received, wrong, pc, ##ka, ##ge
          + tiktoken: I, h, ve, received, wrong, p, ck, age

[Embeddings]

     * 토크나이저 자체로는 별로 쓸모가 없음. 주로 개별 토큰의 빈도를 기반으로 복잡한 수치 분석을 하기 위해 개발됨
     * 텍스트의 맥락적 의미를 보존하기 위해서는 토큰 간의 관계를 캡처할 수 있는 방법이 필요함
     * 임베딩은 토큰을 나타내는 벡터로, 텍스트의 단어 간 의미와 관계를 잘 포착함
     * 임베딩은 변환기 학습의 부산물이며, 토큰화된 텍스트 더미에서 실제로 학습됨
     * 텍스트 생성을 요청할 때 LLM에 입력으로 주어지는 것이 바로 임베딩임
     * LLM은 인코더와 디코더라는 두 가지 주요 구성 요소로 이루어짐
          + 인코더와 디코더 모두 임베딩을 입력으로 받음
          + 인코더의 출력 또한 임베딩이며, 이는 디코더의 교차 어텐션 헤드로 전달되어 디코더 출력의 토큰 생성(예측)에 중요한 역할을 함
     * RAG 파이프라인에서 텍스트는 먼저 토큰화되고, 임베딩된 다음, 변환기에 입력됨
          + 토큰 ID는 토크나이저 어휘의 인덱스 역할을 하며, 임베딩 행렬에서 임베딩을 가져오는 데에도 사용됨
          + 가져온 임베딩은 텐서로 조립되어 변환기 입력으로 주어짐
     * 인코더 흐름: 텍스트 토큰화 -> 각 토큰의 임베딩 가져오기 -> 임베딩 텐서 조립 -> 변환기 입력에 넣기 -> 인코딩 -> 인코더 출력을 디코더 교차 어텐션에 전달 -> 디코더 출력 생성

임베딩 예시

     * ""You can break it 😞""와 ""You can not break it 😊""는 감정이 반대임에도 MiniLM-L6-v2에서는 임베딩 거리가 매우 가까움
     * OpenAI는 토큰 어휘가 이모지를 잘 처리하므로 더 나은 성능을 보임
     * 오타의 경우에도 OpenAI가 더 잘 처리함
     * 하지만 OpenAI에서도 문장 끝에 공백을 추가하면 임베딩 간 거리가 예상 외로 벌어짐
     * 날짜 형식을 다룰 때도 개발자들이 어려움을 겪음. 상대적 시간 표현(""어제 배송되었습니다"")은 특히 더 큰 문제가 될 수 있음
     * 통화 표기 방식(£40, $50, 40£, 50¢ 등)의 차이도 이상한 문제를 일으킬 수 있음
     * Gucci 가방 사례처럼 도메인 특화 데이터의 경우 일반적으로 파인튜닝으로 해결하지만, 항상 데이터와 평가 지표를 꼭 확인해야 함

결론

     * 이 글은 토크나이저가 RAG 앱에 어떤 영향을 미칠 수 있는지, 그리고 왜 토크나이저에 주의를 기울여야 하는지에 대해 더 잘 이해할 수 있게 해줌
     * 에이전트 애플리케이션에서는 garbage-in garbage-out이 항상 기대한 만큼의 성과를 내지는 않을 것임
     * 입력 텍스트를 약간만 정리하는 것도 큰 도움이 될 수 있음
          + 날짜 형식을 일관되게 표준화
          + 가능한 한 후행 공백 제거(임베딩에 미치는 영향을 확인함)
          + 서로 다른 통화의 가격 등 다른 숫자 데이터에도 동일하게 적용
     * 언젠가는 토크나이저에 대해 전혀 생각하지 않아도 되기를 바람. 완전히 버릴 수 있기를
     * 그렇게 되면 오타, 임의의 공백 문자, 단어 perplexity 기반 적대적 공격 등을 다룰 필요가 없어질 것임. 슬픔의 한 부류가 하루아침에 사라질 수 있음
     * 그때까지는 책임감 있게 토큰화 하기를

GN⁺의 의견

     * 이 글은 토크나이저와 임베딩이 RAG 기반 AI 앱의 성능에 어떤 영향을 미칠 수 있는지 잘 보여주고 있음. 특히 이모지, 오타, 도메인 특화 용어 등을 다룰 때 주의해야 할 점을 실제 사례와 함께 설명하고 있어 개발자들에게 많은 도움이 될 것으로 보임
     * 다만 이 글에서 소개된 MiniLM-L6-v2와 OpenAI의 tiktoken은 모두 영어에 최적화된 모델이므로, 한국어와 같은 다른 언어를 다룰 때는 추가적인 고려사항이 있을 수 있음. 한국어의 경우 형태소 분석기를 활용한 토크나이징이 많이 사용되는데, 이에 따른 장단점과 한계에 대해서도 살펴볼 필요가 있어 보임
     * 또한 이 글은 RAG 파이프라인에서의 토크나이저와 임베딩의 역할에 집중하고 있지만, 실제 프로덕션 환경에서는 데이터 전처리, 하이퍼파라미터 튜닝, 모델 경량화 등 고려해야 할 사항이 훨씬 더 많음. 따라서 이 글의 내용은 하나의 출발점으로 삼되, 실제 개발 과정에서는 다양한 실험과 평가를 통해 최적의 방법을 찾아가는 것이 중요할 것으로 보임
     * 한편으로 GPT-4와 같은 거대 언어 모델의 등장으로 토크나이저의 중요성이 감소하고 있다는 의견도 있음. 이들 모델은 토큰 수준이 아닌 문장 또는 단락 수준에서 동작하므로, 개별 토큰의 품질이 성능에 미치는 영향이 상대적으로 작아질 수 있기 때문. 다만 아직 이에 대한 연구가 충분치 않아 단정 짓기는 어려워 보임
     * 마지막으로 이 글에서 언급된 바와 같이, 입력 데이터를 미리 정제하고 표준화하는 것만으로도 모델 성능을 크게 개선할 수 있음. 실제 서비스를 개발할 때는 사용자 입력의 다양성과 노이즈를 고려하여, 강건한 데이터 전처리 파이프라인을 구축하는 것이 매우 중요할 것으로 보임. 아울러 데이터 라벨링과 주석 작업에도 충분한 리소스를 투입하여 고품질의 학습 데이터를 확보하는 것이 필요해 보임

        Hacker News 의견

     * 토크나이저는 LLM의 ""섹시한"" 부분으로 간주되지 않지만, 기회로 보는 사람도 있음. xVal 같은 논문은 토크나이제이션의 전문화 전략을 제시함. 철자와 문자 작업은 토크나이제이션 혁신으로 이익을 볼 수 있는 또 다른 문제임
          + LLM은 단어의 문자 수를 세거나 문자 생략을 수행하는 데 약함. 예를 들어, GPT-4o는 문자의 인스턴스를 세기 위해 작은 파이썬 프로그램을 작성하고 실행함. 토크나이제이션은 프롬프트의 문자에 대한 지식을 효과적으로 지우고 이러한 작업의 성능에 직접적으로 부정적인 영향을 미침
     * 데이터를 이해해야 의미 있는 작업을 수행할 수 있음. 많은 사람들이 자동화된 데이터 처리 도구를 사용하는 주된 이유는 데이터를 직접 보고 싶지 않기 때문임. 컴퓨터가 데이터를 보고 추가 정보 수집 요청을 할 수 있기를 바람
     * 블로그 게시물에서 오타에 대한 부분을 특히 감사하게 생각함. 프로젝트에서 RAG와 유사한 애플리케이션을 돕고 있으며, 사용자 쿼리의 작은 오타나 형식 차이가 임베딩 거리 계산에 미치는 영향을 걱정하고 있음
          + 훈련 데이터에 의도적인 오타/대체/대문자화를 추가하여 ""wrk""와 ""work""가 아마도 동의어임을 학습하도록 해야 하는지 고민 중임
     * Elasticsearch를 사용하여 1-2문장 입력과 문단 이상의 문서 간 유사성을 고급 텍스트 쿼리로 처리하는 앱에서 일한 경험이 있음. 토크나이제이션 전략이 특정 쿼리에 얼마나 영향을 미칠 수 있는지 흥미로웠음
          + 예를 들어, ""W-4"" 또는 ""W4"" 같은 경우, 표준 토크나이제이션은 ""-"" 또는 문자/숫자 경계에서 나눌 수 있음. 이 입력은 인덱스에서 완전히 식별할 수 없게 됨
     * 기사에서 각 문제에 대한 해결책이 논의된 부분이 부족하다고 느낌. 철자 검사를 토크나이징 전에 실행하거나 잘못된 철자 단어와 잠재적 수정 단어를 나란히 토크나이징하는 방법을 제안함
          + 브랜드 이름 문제는 해결 방법을 알 수 없음. 이 문제는 덜 일반적인 언어 또는 복합어를 많이 사용하는 언어에서 더 심각할 수 있음
     * 많은 개발자가 전통적인(결정론적) 공간에서 개발하는 데 익숙하지만, 통계적 공간에서 문제를 생각하는 방식을 변경하지 못함. LLM 앱은 궁극적으로 통계적 공간임
          + 개발자로서 이 문제를 사용자에게 설명하는 데 어려움을 겪고 있음
     * RAG를 구현하는 대부분의 사람들이 토크나이제이션에 대해 생각하지 않고 임베딩에 대해 생각함
          + 데이터 코퍼스를 청크로 나누고 각 청크에 대한 임베딩을 계산함. 쿼리를 생성하고 각 쿼리에 대한 임베딩을 계산함. 쿼리에 대한 거리로 코퍼스 청크를 순위 매김. 반환 값을 구성함
          + 이 기사는 시스템 성능에 큰 영향을 미칠 수 있는 숨겨진, 상대적으로 평범한 작업의 중요성을 강조함
     * 블로그 게시물의 일부 숫자를 재현할 수 없음. 예를 들어, SentenceTransformer를 사용한 코드에서 두 문장의 코사인 유사도를 계산한 결과가 예상과 다름
     * 여러 RAG 구현에서 대상 문서가 들어오는 쿼리에 대한 좋은 검색 키가 될 것이라고 가정하는 문제를 봄. 최근 프로젝트에서 검색 키를 반환 값(청크된 문서)과 분리하고 LM을 사용하여 적절한 키를 생성하여 임베딩함으로써 검색 관련성이 크게 향상됨
     * 많은 대형 LLM 어휘가 상당히 크다고 하지만, 영어만 해도 100만 개 이상의 단어가 있음. 30k-300k 토큰은 작아 보임
"
"https://news.hada.io/topic?id=17408","AWS 데이터 센터 지연 시간 시각화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AWS 데이터 센터 지연 시간 시각화

     * AWS 데이터 센터 지연 시간
          + ca-central-1
          + eu-central-1
          + eu-north-1
          + eu-south-1
          + eu-west-1
          + eu-west-2
          + eu-west-3
          + me-south-1
          + sa-east-1
          + us-east-1
          + us-east-2
          + us-west-1
          + us-west-2
     * 지연 시간 범주
          + X < 100ms
          + X 100ms - 200ms
          + X > 200ms
     * 데이터 출처
          + Ben에 의해 제작됨
          + CloudPing에서 데이터 수집됨

GN⁺의 정리

     * 이 문서는 AWS 데이터 센터의 지연 시간을 지역별로 분류하여 제공함.
     * 클라우드 서비스 사용 시 지연 시간은 중요한 요소로, 사용자 경험에 큰 영향을 미침.
     * 이 정보는 네트워크 성능 최적화 및 지역 선택에 유용할 수 있음.
     * 유사한 기능을 제공하는 다른 프로젝트로는 CloudHarmony의 Latency Test가 있음.

   us-east-1가 서양을 향해서는 가장 좋은 위치군요

        Hacker News 의견

     * 이론적 최적값(광섬유 매체에서의 빛의 속도보다 약 30% 느림)과 비교한 핑을 보여주면 좋겠다는 의견이 있음. 데이터 센터 간의 지연 시간에 대한 불만이 있었지만, 실제로는 이론적으로 가능한 수준에 가까웠음.
     * 적록 색맹으로 인해 100ms 미만과 200ms 초과의 선을 구분하기 어려움. 남성 인구의 약 8%가 영향을 받음. 색맹 모드를 추가하면 좋겠다는 의견이 있음.
     * AWS 지연 시간을 측정할 때, 해저 케이블 길이를 측정하고 150으로 나누어 대략적인 지연 시간을 얻을 수 있었음. 이는 매우 일관적이었음.
     * 데이터 센터를 나타내는 파란색 원을 클릭하면 다른 데이터 센터와의 지연 시간이 표시됨. 이를 쉽게 알 수 있도록 사이트에 ""데이터 센터를 선택하려면 클릭하세요""라는 메모를 추가하면 좋겠다는 의견이 있음.
     * AWS는 지역 간, AZ 간, AZ 내의 네트워크 관리자에서 지연 시간 수치를 제공함. 이는 지연 시간 기준선으로 유용하며 문제가 있는지 확인할 수 있음.
     * 시각화와 개념이 멋지지만, 색상이 구간별로 나뉘어 있어 100ms가 99ms보다 훨씬 나빠 보이고 200ms와 같아 보임. 예를 들어 us-east-1을 클릭하면 서유럽의 데이터 센터와의 지연 시간이 다르게 보임. 이론적으로 최적의 지연 시간과 실제 측정값 간의 차이에 대한 의견이 있음. 광섬유에서의 정보 전파 속도는 c보다 낮으며, 여러 요인에 따라 달라짐.
     * 포함된 데이터 센터를 어떻게 선택했는지 궁금하다는 의견이 있음. 예를 들어, eu-south-2(스페인)가 누락됨. 데이터 센터 간의 지연 시간이 30ms 미만이어야 하는 프로젝트에서 eu-west-1(아일랜드)과 eu-south-2를 사용해야 했음. 아일랜드와 대륙 간의 해저 케이블이 없어 지연 시간이 42ms에 가까움.
     * 데이터는 매우 유용하고 지구본은 시각적으로 인상적이지만, 모든 데이터 센터를 한 번에 보여주는 평면 세계 지도가 더 실용적일 것이라는 의견이 있음.
     * 지연 시간에 가장 큰 영향을 미치는 것은 거리임. 그러나 가까운 지역 간에도 직접적인 광섬유 연결이 없어 지연 시간이 나쁜 경우가 있음. 삼각형 부등식을 극적으로 위반하는 지역의 예가 있는지 궁금하다는 의견이 있음. 이 아이디어를 사용하여 광섬유로 직접 연결된 데이터 센터를 추론하고, 가능성이 높은 연결만 보여줄 수 있는지 궁금함.
     * 호주가 별로라고 생각했지만 남미와 남아프리카의 지연 시간을 확인한 후 생각이 바뀌었음. 좋은 지연 시간 링크가 없음.
"
"https://news.hada.io/topic?id=17365","비디오 스크래핑: 35초 화면 캡처에서 0.1센트로 JSON 데이터 추출하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               비디오 스크래핑: 35초 화면 캡처에서 0.1센트로 JSON 데이터 추출하기

     * 12개의 서로 다른 이메일에 흩어져 있는 숫자 값을 합산할 일이 생김
     * 복사가 귀찮아서 Gmail 계정을 둘러보는 동안 화면 캡처를 녹화한 다음 Google Gemini를 사용하여 해당 동영상에서 숫자를 추출해봤는데 너무 잘 동작함

AI Studio와 QuickTime을 활용한 비용 효율적인 비디오 스크래핑

     * 먼저 QuickTime Player로 관련 이메일을 탐색하며 화면 녹화 진행
     * 녹화된 35초 분량의 비디오를 Google의 AI Studio에 업로드하고 Gemini 모델에 JSON 배열 형식으로 추출 요청함
          + 날짜와 달러 금액이 포함된 JSON 배열 결과를 성공적으로 반환받음
     * 결과를 Numbers에 붙여넣기 위해 CSV 형식으로 변환 요청하여 받아냄
     * 비용은 약 0.1센트 이하로 매우 저렴함. 현재 AI Studio는 무료로 제공 중

대안들의 한계

     * 수작업으로 데이터 복사는 오류 발생 가능성이 높고 지루한 작업
     * Gmail API 사용은 복잡하고 많은 노력 필요
     * 브라우저 자동화는 별도의 이메일 파싱 단계 필요
     * 이메일 계정 접근 권한을 가진 정교한 AI 도구 활용은 프롬프트 인젝션 등의 위험 존재

비디오 스크래핑의 장점

     * 화면에 보이는 모든 것을 추출 가능
     * 사용자가 AI 모델에 노출할 내용을 완벽하게 통제 가능
     * 웹사이트 인증이나 스크래핑 방지 기술의 영향을 받지 않음
     * 설정 비용이 전혀 들지 않음
     * 매우 저렴한 비용으로 활용 가능
     * 데이터 저널리즘 분야에서도 유용하게 활용될 수 있음

보너스: LLM 가격 계산기

     * 작성자는 토큰 가격 계산을 위한 도구를 별도로 만듦
          + ChatGPT Code Interpreter를 사용했으나 계산 오류 발생
     * Claude 3.5를 활용하여 가격 계산기 제작
          + 입력/출력 토큰 가격을 수동으로 설정하거나 프리셋 버튼으로 모델별 가격 설정 가능
     * 전체 제작 과정은 Claude와의 대화를 통해 19분 만에 10개 버전으로 반복 개선됨
     * 가격 정보는 스크린샷을 대화에 직접 삽입하여 Claude가 추출하도록 함
"
"https://news.hada.io/topic?id=17420","Bitwarden SDK, 독점 라이선스에서 GPLv3로 재라이선스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Bitwarden SDK, 독점 라이선스에서 GPLv3로 재라이선스

     * 비트워든 SDK 내부 프로젝트는 비트워든의 다양한 기능을 지원하는 소프트웨어 개발 키트(SDK)임.
     * 대부분의 크레이트에 대해 GPL 또는 BitwardenSDK 라이선스를 적용하도록 라이선스 언어를 개선함

   까방권 ++;

        Hacker News 의견

     * Bitwarden의 SDK 코드가 GPL/OSI 라이선스만 포함하도록 재구성되었음
          + 새로운 sdk-internal 저장소에서 참조가 이루어지며, GPL 라이선스만 사용 중임
          + 향후 Bitwarden License 코드가 포함될 경우, 여러 빌드 변형을 제공할 예정임
     * Bitwarden을 Free/Open License로 재라이선스한 것에 감사함
          + 일반 사용자에게는 Firefox의 내장 암호 관리자가 더 좋다고 생각함
          + 고급 사용자가 필요하거나 웹 브라우저 내장 암호 관리자를 신뢰하지 않는 경우 Bitwarden을 추천함
     * Bitwarden은 여전히 훌륭하지만, 향후 몇 년간 주의 깊게 지켜볼 필요가 있음
          + 원래 LastPass의 대안으로 시작되었음을 기억해야 함
     * 오픈 소스 방식으로 문제를 효과적으로 처리한 것에 기쁨을 느낌
          + Bitwarden에서 다른 서비스로의 이동이 번거로울 뻔했음
     * Bitwarden에 저장된 암호를 백업하는 좋은 방법을 찾고 있음
          + Bitwarden이 갑자기 작동을 멈출 경우를 대비해 물리적 사본을 보관할지 고민 중임
     * GPLv3는 상업적 환경에서 코드를 사용하려면 오픈 소스화해야 함을 의미함
          + 올바른 방향으로 나아가는 Bitwarden에 칭찬을 보냄
     * Bitwarden에 대한 신뢰를 잃었음
          + iOS에서의 버그와 관련하여 Reddit에서 비슷한 문제가 발생했음을 발견함
          + GitHub에 로그를 제공할 수 있는 이슈가 있는지 물었으나 응답이 없었음
          + 제안된 해결책이 비효율적이라고 생각함
     * FOSS(Free and Open Source Software) 대안이 필요하다고 느끼고 있음
          + LastPass, Authy와 같은 주기가 반복될 것이라고 생각함
"
"https://news.hada.io/topic?id=17364","오늘은 Ubuntu 20주년 기념일","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          오늘은 Ubuntu 20주년 기념일

    Ubuntu 4.10 ""The Warty Warthog Release"" 발표

     * Ubuntu 소개
          + Ubuntu는 Debian의 광범위한 기능을 빠르고 쉽게 설치할 수 있도록 한 새로운 리눅스 배포판임
          + 6개월마다 정기적으로 새로운 버전을 출시하며, 기본적으로 우수한 패키지를 설치하고 보안 업데이트를 18개월 동안 제공함
          + 모든 최종 사용자 애플리케이션이 무료 소프트웨어로 제공되며, Ubuntu는 무료로 유지될 것임
          + x86, amd64, ppc 프로세서를 지원하며, 추가적인 포트도 진행 중임
     * Ubuntu 다운로드 및 CD 제공
          + 설치 CD 또는 릴리스 후보 라이브 CD를 다운로드할 수 있음
          + 무료로 CD를 배송받을 수 있으며, 친구나 학교, LUG에 나눠줄 수 있음
     * Ubuntu 커뮤니티 리소스
          + Ubuntu 웹사이트: 프로젝트 개요, 소프트웨어 문서화 등 기본 정보 제공
          + Ubuntu 위키: 새로운 아이디어를 개발하는 커뮤니티 공간
          + Ubuntu IRC 채널: 도움과 토론을 위한 공간
          + Ubuntu 메일링 리스트: 커뮤니티의 중심, 다양한 언어와 주제의 리스트 제공
     * Warty Warthog의 특징
          + 간단하고 빠른 설치: 하나의 CD로 제공되며, 온라인에서 수천 개의 추가 패키지 사용 가능
          + GNOME 2.8: GNOME 2.8을 최초로 제공한 배포판
          + Firefox 0.9: 보안 패치 포함
          + 생산성 소프트웨어: Evolution 2.0, OpenOffice.org 1.1.2
          + XFree86 4.3: 하드웨어 지원 개선
     * 보안 및 커뮤니티
          + Warty는 기본 설치 후 인터넷 공격으로부터 안전하도록 설계됨
          + Ubuntu는 ""인류애""를 의미하는 아프리카 고대어에서 유래되었으며, 커뮤니티 프로젝트로서 참여와 공유를 권장함
          + 다음 릴리스는 6개월 후 예정이며, 참여를 통해 기여할 수 있음

    GN⁺의 정리

     * Ubuntu 4.10 ""The Warty Warthog""는 Debian의 강력한 기능을 쉽게 설치할 수 있도록 한 리눅스 배포판임
     * 무료 소프트웨어와 보안 업데이트를 제공하며, 다양한 프로세서를 지원함
     * GNOME 2.8, Firefox 0.9, OpenOffice.org 등 최신 소프트웨어를 포함하고 있음
     * 커뮤니티 참여를 통해 다음 릴리스에 기여할 수 있는 기회를 제공함
     * Ubuntu는 사용자 친화적이며, 오픈 소스 커뮤니티의 협력 정신을 강조함

   저도 어릴때, CD 공짜로 받아서,CD가 예뻤었죠.
   그 때 리눅스가 어떤건지 잘 알게 되었던 거 같습니다.
   리눅스 활용을 엄청하는건 아니지만 인식 전환에도 큰 역할을 했었구요.

   저도 중학생때 우편으로 cd 받아서 신났던 기억이 있네요 ㅎㅎㅎ

   오 ㅋㅋ 저도 이 얘기하러 왔었는데 체감상 거의 한달? 가까이 기다렸던 것 같아요 ㅋㅋ
   컴퓨터에 시디넣고 우와 이게 리눅스구나~ 했던 ㅋㅋ

   우분투 정도면 인정이죠. 큰 상 하나 줘야합니다.

   ㅋㅋㅋㅋㅋㅋ ubuntu 4.10때 내용이군요 ㅎㅎㅎㅎㅎ

   debian이 icefox로 상표권 때고 구성했을때 ....

   snap으로 설치한 친구들이 다국어 입출력 부분에서 버그가 많아서 snap을 썩 좋아하진않지만
   그래도 netplan이라던가 wayland 같은 프레임워크들은 정말 좋은거같습니다

        Hacker News 의견

     * Canonical과 Ubuntu에 대한 긍정적인 경험을 공유하며, Ubuntu가 Mandrake가 되지 못한 것을 이루었다고 생각함
          + DigitalOcean 초기 시절 Canonical과의 상호작용이 매우 긍정적이었음
          + Ubuntu 커뮤니티와 Mark Shuttleworth에게 감사함
     * Ubuntu가 Linux 커뮤니티에 긍정적인 영향을 미쳤다고 믿음
          + Mandrake Linux와 Lindows/Linspire도 사용자 경험에 중점을 두었으나, 많은 사람들이 Ubuntu를 통해 데스크탑 Linux를 처음 경험했음
          + 개인적으로는 FreeBSD와 Debian을 선호하지만, Windows나 macOS에서 Linux로 전환하려는 사람들에게는 Ubuntu를 추천함
          + Ubuntu는 설치가 간단하고 하드웨어 지원이 넓음
     * Ubuntu에 대한 비판이 많지만, 여전히 사용 중이며 초보자에게 추천할 만한 운영체제라고 생각함
          + 18년 전부터 사용해왔으며, 사용성이 더 좋아지고 안정적이며 설치가 쉬워졌음
          + Snaps를 싫어한다면 제거할 수 있음
          + Arch Linux를 사용했으나, 업데이트 전 메시지 보드를 확인해야 하는 점이 번거로웠음
     * 가족의 Windows 컴퓨터가 고장 났을 때 Ubuntu를 설치하여 문제를 해결한 경험을 공유함
          + Ubuntu를 통해 컴퓨터를 새롭게 활용할 수 있었고, 어머니도 문제 없이 사용하였음
          + Wine/Proton 개발자들의 노력 덕분에 상황이 더 나아졌을 것이라고 생각함
     * Ubuntu가 Linux의 접근성을 높이고 많은 사람들에게 Linux를 접할 수 있는 기회를 제공했다고 생각함
          + 2000년대 중반, Ubuntu의 CD 패키지가 Linux를 시도하는 것을 더 쉽게 만들었음
          + Ubuntu의 새로운 사용자 지원 태도가 많은 사람들에게 Linux를 쉽게 접할 수 있게 했음
     * Ubuntu가 Linux에 입문하는 데 큰 역할을 했다고 생각함
          + 인도에서 비싼 다이얼업 인터넷 시절, Ubuntu의 CD 배송이 큰 도움이 되었음
          + 주변 사람들에게 Linux를 전파할 수 있었음
     * Ubuntu의 CD를 주문했던 경험을 자랑스럽게 생각함
          + 중학생 시절 해외에서 온 멋진 패키지를 받는 것이 자랑스러웠음
     * Ubuntu의 의미인 ""I am because we are""를 좋아하며, Ubuntu가 첫 배포판이었음에 감사함
     * Ubuntu의 첫 버전인 Warty Warthog를 설치하고 Windows를 지운 경험을 공유함
          + 이 경험이 기술과 소프트웨어에 대한 미래를 시작하게 했음
     * Ubuntu를 테스트하기 위해 Windows XP 노트북에 설치했으나, 이후로 XP를 다시 부팅하지 않았음
          + Ubuntu에서 Arch로 전환하려고 계획했으나, 모든 것이 잘 작동하기 때문에 계속 사용 중임
"
"https://news.hada.io/topic?id=17388","메타는 오픈소스를 오염시키고있다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           메타는 오픈소스를 오염시키고있다.

     * 오픈소스이니셔티브(OSI)의 책임자인 스테파노 마풀리 총괄이사가 메타를 비난함.
     * 메타는, 라마를 발표하며 ‘오픈소스’란 용어를 사용해 사용자를 혼란스럽게 하고 오픈소스를 오염시켰다는 주장
          + 라마는 모델의 모든 정보를 공개하지 않고, 특정 프롬프트에 어떻게 반응하는지 편향을 담은 가중치(weight)만 공개
          + 사용자는 라마 모델의 코드를 무료로 다운로드 받고 미세조정할 수 있지만, 코드 수정과 변경을 통한 새 모델 개발은 불가능
          + 모델 개발에 사용된 학습 알고리즘과 소프트웨어 요소도 비공개
     * 구글과 마이크로소프트는 OSI와 협의를 통해 앞으로 완전히 개방하지 않은 모델에 오픈소스란 용어를 사용하지 않기로함
          + 미스트랄 같은 회사는 오픈소스란 용어를 사용하다가 점차 ‘오픈 웨이트’라고 부르기 시작함
     * 지난달 OSI는 ‘오픈소스 AI 정의(Open Source AI Definition)’의 초안을 공개, 지나치게 타협적이라는 비난을 받고있음.
          + AI 모델의 투명성을 덜 갖추고 오픈소스라 부르려는 독점 모델 개발자에게 뒷문을 제공하는 것
          + 오픈소스의 의미를 희석하고 향후 더 많은 혼란을 불러일으킬 것이란 비판

   핵심으로 보이는 문장만 몇개 뽑아보았습니다.

   틀린 말은 아닌 것 같지만..
   그나마 이 계통의 희망 같아서 저는 용서해주고 싶습니다.
"
"https://news.hada.io/topic?id=17425","React Native, 0.76부터 New Architecture 적용 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                React Native, 0.76부터 New Architecture 적용

     * React Native 0.76 버전이 npm에 출시되었음. 이 버전은 새로운 아키텍처를 기본으로 포함하고 있으며, 최신 React 기능을 완벽하게 지원함.
     * 새로운 아키텍처는 Suspense, Transitions, 자동 배칭, useLayoutEffect 등의 기능을 지원하며, 네이티브 모듈과 컴포넌트 시스템을 새롭게 도입하여 타입 안전한 코드 작성이 가능해짐.
     * 2018년부터 React Native를 근본적으로 재작성한 결과물이며, 대부분의 앱이 점진적으로 새로운 아키텍처로 전환할 수 있도록 설계되었음.
     * React Native 0.76은 대부분의 앱이 기존 릴리스와 동일한 수준의 노력으로 채택할 수 있으며, 인기 있는 라이브러리들은 이미 새로운 아키텍처를 지원함.

  새로운 아키텍처란?

     * 새로운 아키텍처는 React Native의 주요 시스템을 완전히 재작성한 것으로, 컴포넌트 렌더링, JavaScript와 네이티브 추상화 간의 통신, 스레드 간 작업 스케줄링 방식을 포함함.
     * 이전 아키텍처는 비동기 브리지를 통해 네이티브 플랫폼과 통신했으나, 새로운 아키텍처는 동기 및 비동기 업데이트를 모두 지원하도록 설계됨.
     * 새로운 아키텍처는 네이티브 모듈 시스템, 새로운 렌더러, 이벤트 루프, 브리지 제거의 네 가지 주요 부분으로 구성됨.

    새로운 네이티브 모듈

     * C++로 작성되어 새로운 기능 제공
          + 네이티브 런타임과의 동기식 통신 가능
          + 자바스크립트와 네이티브 코드 간 타입 안전성 제공
          + 플랫폼 간 코드 공유 가능
          + 기본적으로 lazy module loading 제공
     * 자바스크립트/타입스크립트 API에서 C++ 네이티브 구현의 모든 기능 활용 가능
     * Codegen으로 강력한 타입 계약 정의 가능
     * 모듈이 필요할 때만 메모리에 로드되어 앱 시작 시간 단축

    새로운 렌더러

     * C++로 재작성되어 다음 이점 제공:
          + 다른 스레드에서 다른 우선순위로 업데이트 렌더링 가능
          + 다른 스레드에서 동기식으로 레이아웃 읽기 가능
          + 모든 플랫폼에서 공유되는 C++ 코드
     * 이제 뷰 계층이 변경 불가능한 트리 구조로 저장됨
          + 스레드 안전한 업데이트 처리 가능
          + 사용자 인터페이스의 서로 다른 버전을 나타내는 여러 진행 중 트리 처리 가능
     * 낮은 우선순위 업데이트 중단하고 사용자 입력 등 긴급한 것 렌더링한 후 낮은 우선순위 업데이트 재개 가능

    이벤트 루프

     * 새로운 아키텍처는 명확한 이벤트 루프 처리 모델을 구현하여 React DOM과 React Native 간의 차이를 줄임.
          + 자바스크립트 스레드에서 작업을 처리하는 잘 정의된 이벤트 루프 프로세싱 모델 구현
     * 이벤트 루프는 업데이트와 이벤트를 예측 가능하게 정렬하여, 낮은 우선순위 업데이트를 긴급 사용자 이벤트로 중단할 수 있음.
     * 웹사양과 더 잘 맞춰짐
     * 향후 더 많은 브라우저 기능의 기반이 될 것임

    브리지 제거

     * 새로운 아키텍처는 브리지를 제거하여 JavaScript와 네이티브 코드 간의 직접적이고 효율적인 통신을 가능하게 함.
     * 브리지 제거로 인해 시작 시간이 개선되고, 정의되지 않은 동작으로 인한 크래시 감소, 오류 보고 및 디버깅이 용이해짐.

  새로운 기능

     * Transitions
          + React 18의 새로운 개념인 Transitions는 긴급 업데이트와 비긴급 업데이트를 구분함.
          + 긴급 업데이트는 즉각적인 반응이 필요하며, Transitions 업데이트는 UI를 한 뷰에서 다른 뷰로 전환함.
     * Automatic batching 은 더 많은 상태 업데이트를 함께 배치하여 중간 상태 렌더링을 피하고, React Native를 더 빠르고 지연 없이 작동하게 함.
     * 새로운 아키텍처는 useLayoutEffect를 통해 레이아웃 정보를 동기적으로 읽고 UI를 같은 프레임에서 업데이트할 수 있도록 지원함.
     * 새로운 아키텍처는 React 18에서 도입된 Suspense를 완전히 지원하여, 로딩 상태를 처리하고 사용자 입력에 높은 우선순위를 부여함.

업그레이드 방법

     * 0.76으로 업그레이드할 때 대부분의 앱은 인터롭 레이어 덕분에 다른 릴리스와 동일한 노력으로 가능함
     * 그러나 New Architecture 및 concurrent 기능을 완전히 활용하려면 커스텀 네이티브 모듈과 컴포넌트를 마이그레이션해야 함
     * 앱 개발자의 경우
          + 라이브러리, 커스텀 네이티브 컴포넌트 및 커스텀 네이티브 모듈을 New Architecture를 완벽히 지원하도록 업그레이드 필요
          + 인기 리액트 네이티브 라이브러리 대부분이 New Architecture 지원하도록 협력했음
     * 라이브러리 관리자의 경우 새로운 네이티브 모듈 및 컴포넌트 API로 라이브러리 마이그레이션할 것을 권장

GN⁺의 정리

     * New Architecture로의 전환은 리액트 네이티브 개발에 있어 중요한 이정표가 될 것 같음. 동기/비동기 업데이트 모두 가능해지고, 브리지 병목 현상이 해결되며, 레이아웃을 다른 스레드에서 읽을 수 있게 되는 등 성능 및 사용자 경험 측면에서 많은 개선이 있을 것으로 보임
     * 특히 React 18의 Concurrent 기능을 완벽 지원하게 된 것도 주목할 만한 점. Suspense, Transition 등을 활용해 더욱 반응성 높고 자연스러운 UX를 만들 수 있게 될 것임
     * 다만 기존 앱과 라이브러리들은 New Architecture를 완전히 지원하기 위해 마이그레이션 작업이 필요할 것으로 보임. 단계적으로 진행해야 하겠지만, 마이그레이션이 완료되면 New Architecture의 장점을 충분히 누릴 수 있을 것임
     * 이 아키텍처는 Meta의 Facebook 앱과 Instagram 앱에서 이미 사용되고 있으며, Expensify, Kraken, BlueSky 등의 성공 사례가 있음
     * 전반적으로 New Architecture는 리액트 네이티브의 미래를 위한 큰 진전이라 생각함. 커뮤니티의 협력으로 잘 안착되길 기대해봄

   리액티브 네이티브를 처음 들어본 것도 무척 옛날 일인 것 같은데. 페북에서 시작됐음에도 아직 1버전이 안 됐다는 게 오히려 놀랍네요..

   RN을 한번도 써본적이 없어 궁금한데 느낌 상 android에 최적화가 되어있을 것 같은데 실제로는 iOS에서 성능이 더 잘 나온다는게 신기하네요.

   저희 쪽 crash는 거의 다 안드로이드에서 나오는거 같습니다.

   안드로이드에서 아주 끔찍합니다... 끔찍할 수준이예요..

   hermes로 엔진 바꾼지 얼마 안된 것 같은데 또 갈아엎었나보네요

        Hacker News 의견

     * React Native 앱과 백엔드 API를 4년간 개발한 경험이 있으며, Expo로의 이전은 많은 문제를 해결했지만 여전히 버그가 존재함. iOS는 Android보다 안정적이며 성능도 뛰어남. React Native는 배우기 쉽고 큰 JS 생태계를 가지고 있어 추천할 만하지만, 현재는 Flutter를 사용 중임
     * React Native에 대한 다양한 의견이 존재하며, 일부는 Expo에 불만을 제기하고 Kotlin Multiplatform을 추천함. Hacker News의 논의가 점점 무의미해지고 있다는 의견도 있음
     * Flutter 개발자로서 Swift UI와 Compose가 모바일 개발에 더 적합하다고 생각하며, 새로운 앱을 시작할 때는 Flutter나 React Native를 사용하지 않을 것임
     * React Native는 iOS에서는 괜찮지만 Android에서는 느림. Hermes는 흥미롭지만 여전히 많은 폴리필이 필요함. 웹이 React Native를 대체할 날을 기대함
     * Expo/RN을 사용하여 Bluesky를 개발 중이며, 새로운 아키텍처에 대한 초기 테스트에서 Android 성능이 향상됨
     * React Native를 Expo와 함께 사용할 때 긍정적인 경험을 했으며, 단독 개발자로서 RN이 많은 것을 가능하게 해줌. 새로운 아키텍처를 기대 중임
     * Flutter의 렌더링 속도가 React Native보다 5배 빠르며, 웹에서 React를 사용할 때 속도가 더 빠름
     * Capacitor가 NextJS 웹앱 포팅에 유용하다는 트윗을 봄
     * React Native가 올해 들어 상당히 좋아졌으며, react-strict-dom이 준비되면 큰 변화를 가져올 것임
"
"https://news.hada.io/topic?id=17378","Anthropic, Computer Use 기능과 Claude 3.5 Sonnet/Haiku 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Anthropic, Computer Use 기능과 Claude 3.5 Sonnet/Haiku 모델 공개

     * Anthropic에서 업그레이드된 Claude 3.5 Sonnet과 새로운 모델인 Claude 3.5 Haiku를 발표함
     * Claude에게 사람처럼 컴퓨터를 사용하도록 지시할 수 있는 컴퓨터 사용(computer use) 기능이 공개 베타로 새롭게 도입
     * 기존 가격과 속도를 유지하면서 전반적인 성능이 향상됨

Computer Use 기능 소개

     * 개발자들이 API를 통해 Claude가 실제 사람처럼 컴퓨터를 사용하도록 지시할 수 있음
     * 화면 보기, 커서 이동, 버튼 클릭, 텍스트 입력 등의 작업 수행 가능
     * 현재는 실험적 단계로 때때로 불편하고 오류가 발생할 수 있음
     * Asana, Canva, Cognition, DoorDash, Replit 및 The Browser Company는 이미 수십 단계, 때로는 수백 단계가 필요한 작업을 수행하기 위해 이러한 가능성을 탐색하기 시작함

Claude 3.5 Sonnet: 업계 최고 수준의 소프트웨어 엔지니어링 기술

     * 업데이트된 Claude 3.5 Sonnet은 업계 벤치마크에서 광범위한 개선을 보여주며, 특히 에이전트 코딩 및 도구 사용 작업에서 강력한 성능 향상을 보임
     * SWE-bench Verified에서 33.4%에서 49.0%로 성능이 향상되어 공개적으로 사용 가능한 모든 모델보다 높은 점수를 기록함
     * TAU-bench에서도 소매 도메인에서 62.6%에서 69.2%로, 항공사 도메인에서는 36.0%에서 46.0%로 성능이 향상됨
     * GitLab, Cognition, The Browser Company 등 고객사의 초기 피드백에 따르면 Claude 3.5 Sonnet은 AI 기반 코딩에 상당한 도약을 나타냄

Claude 3.5 Haiku: 최첨단 기술과 경제성 및 속도 결합

     * Claude 3.5 Haiku는 가장 빠른 모델의 차세대 버전
     * 이전 세대의 Haiku와 동일한 비용과 유사한 속도로 모든 기술 영역에서 개선되었으며, 이전 최대 모델인 Claude 3 Opus를 능가함
     * 특히 코딩 작업에서 강점을 보이며 SWE-bench Verified에서 40.6%를 기록하여 기존 Claude 3.5 Sonnet과 GPT-4o를 포함한 공개 최첨단 모델을 사용하는 많은 에이전트를 능가함
     * 낮은 지연 시간, 향상된 지침 따르기, 더 정확한 도구 사용 등의 특징으로 사용자 중심 제품, 전문 하위 에이전트 작업, 방대한 데이터에서 개인화된 경험 생성에 적합함

Claude에게 책임감 있게 컴퓨터를 탐색하는 방법 가르치기

     * 컴퓨터 사용 기능을 통해 근본적으로 새로운 것을 시도하고 있음
     * 개별 작업을 완료하는 데 도움이 되는 특정 도구를 만드는 대신 Claude에게 일반적인 컴퓨터 기술을 가르치고 있음
     * 개발자들은 이러한 초기 기능을 사용하여 반복적인 프로세스를 자동화하고, 소프트웨어를 구축 및 테스트하며, 연구와 같은 개방형 작업을 수행할 수 있음
     * OSWorld에서 Claude 3.5 Sonnet은 스크린샷 전용 범주에서 14.9%를 기록하여 차선의 AI 시스템 점수인 7.8%를 크게 앞섬
     * 컴퓨터 사용 기능은 아직 불완전하며, 스팸, 잘못된 정보, 사기 등의 위협에 대한 새로운 경로가 될 수 있으므로 안전 배포를 위해 선제적인 접근 방식을 취하고 있음

Computer Use의 향후 전망

     * 초기 단계에 있는 이 기술의 초기 배포에서 배우는 것은 점점 더 강력해지는 AI 시스템의 잠재력과 영향을 더 잘 이해하는 데 도움이 될 것임
     * 새로운 모델과 컴퓨터 사용 기능의 공개 베타 버전을 탐색해 보고 피드백을 공유해 주기를 바람
     * 이러한 개발이 Claude와 협업하는 방식에 새로운 가능성을 열어줄 것이라 믿음

GN⁺의 의견

     * 컴퓨터 사용 기능은 RPA(Robotic Process Automation)와 유사하지만, 더 유연하고 general한 접근 방식을 제공하는 것으로 보임
     * 기업들의 반복적인 업무 자동화에 큰 도움이 될 것으로 예상되나, 초기에는 오류 발생 가능성을 고려하여 중요도가 낮은 작업부터 시작하는 것이 바람직함
     * 이러한 기능은 Power Automate, UiPath 등 기존 RPA 도구들과 경쟁하게 될 것으로 예상되며, 향후 AI와 RPA의 경계가 더욱 모호해질 것으로 전망됨
     * 보안 측면에서 컴퓨터 제어 권한을 AI에게 부여하는 것은 새로운 위험을 초래할 수 있으므로, 엄격한 접근 제어와 모니터링이 필요할 것으로 판단됨

        Hacker News 의견

     * Sonnet이 aider의 코드 편집 리더보드에서 84.2%로 1위를 차지함. ""architect"" 모드를 사용하면 SOTA를 85.7%로 설정함. DeepSeek을 ""editor"" 모델로 사용함
          + Sonnet이 더 까다로운 리팩토링 벤치마크에서도 92.1%로 SOTA를 기록함
     * Claude 3.5 Opus가 더 이상 Anthropic의 공식 문서에 언급되지 않음. 이는 출시가 지연되었거나 취소되었음을 시사함
     * AI SaaS 제품을 개발하는 사람으로서, API 통합이 AI 자동화의 대부분을 해결할 것이라고 생각했으나, 실제로는 많은 소프트웨어가 사람과 직접 인터페이스함을 깨달음
          + 예를 들어, 의사인 매형은 Windows에서 MFC 폼을 사용하는 맞춤형 소프트웨어를 사용하고, 회계사는 Cantax라는 강력한 소프트웨어를 사용함
          + SaaS 공간에 있으면 모든 사람이 클라이언트-서버 백엔드 API를 가져야 한다고 믿게 되지만, 실제로는 그렇지 않음
     * 컴퓨터 사용 능력이 매우 인상적임
          + 이는 단순히 컴퓨터를 도구로 사용하는 에이전트가 아니라, 목표를 설정하면 이를 달성하기 위해 컴퓨터와 브라우저를 활용하는 자율적 추론 에이전트임
          + OpenAI GPT-o1을 능가할 가능성이 있음
     * Anthropic의 AI 안전성에 대한 초점이 흥미로움. AI가 컴퓨터와 브라우저를 사용하여 요청된 목표를 달성할 수 있는 능력을 가짐
     * Claude가 지난 8개월 동안 ChatGPT보다 우수했지만, 사용자 기반은 적음
     * Sonnet과 Opus의 차이가 명확하지 않음. Anthropic 웹사이트에서는 Opus가 가장 발전된 모델이라고 하지만, 다른 부분에서는 Sonnet이 가장 빠르고 발전된 모델이라고 함
          + 수동 테스트 결과 Opus가 약간 더 나은 응답을 제공한다고 느꼈으나, 확신할 수 없음
     * Claude를 사용한 코딩 데모가 더 많은 논의가 필요함
          + 진정한 최종 사용자 프로그래밍과 제품 관리자 프로그래밍이 곧 도래할 가능성이 있음
     * 새로운 API로 훈련 중 재미있는 일이 발생함
          + Claude가 장시간의 화면 녹화를 중지하여 모든 영상을 잃어버리거나, 코딩 데모 중에 Yellowstone 국립공원의 사진을 보는 등의 일이 있었음
"
"https://news.hada.io/topic?id=17461","우리는 어떻게 자바스크립트 모노레포 git 크기를 94% 줄였는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  우리는 어떻게 자바스크립트 모노레포 git 크기를 94% 줄였는가

     * Microsoft의 대규모 자바스크립트 모노레포인 1JS는 코드와 기여의 양이 매우 많음. 최근 클론한 레포는 178GB에 달했음.
     * 레포의 크기가 너무 커서 유럽의 일부 사용자들은 클론할 수 없었음.

    교훈 #1

     * 몇 년 전 레포에 합류했을 때, 레포가 빠르게 커지는 것을 발견했음. 처음 클론했을 때는 1~2GB였지만 몇 달 후에는 이미 4GB에 달했음.
     * git-sizer 도구를 사용하여 큰 blob을 확인했으며, 이는 바이너리가 실수로 체크인될 때 발생함. Azure DevOps의 체크인 크기 제한 기능을 사용하여 이를 방지할 수 있음.
     * Beachball 변경 파일을 삭제하지 않아 문제가 발생했음. 이는 Changesets와 유사하게 패키지의 semver 범위를 자동으로 증가시키는 데 사용됨.
     * 하나의 폴더에 수천 개의 파일을 보관하지 말라는 교훈을 얻었음. 이를 해결하기 위해 Beachball에 여러 변경을 하나의 파일로 처리하는 풀 리퀘스트를 제출하고, 변경 폴더를 주기적으로 정리하는 파이프라인을 작성했음.

    교훈 #2

     * main의 미러인 versioned 브랜치가 점점 더 클론하기 어려워졌음. CHANGELOG.md와 CHANGELOG.json 파일만 변경되었는데도 불구하고, 125GB의 추가 git 데이터를 가져오고 있었음.
     * Linux Torvalds가 체크인한 오래된 패킹 코드가 파일 이름의 마지막 16자만 비교하여 압축을 수행하는 문제를 발견했음. 이로 인해 git이 다른 패키지의 CHANGELOG.md 파일과 비교하여 전체 파일을 반복적으로 푸시하게 되었음.
     * git repack -adf --window=250 명령어를 사용하여 레포의 크기를 줄였으며, 새로운 git repack -adf --path-walk 명령어를 사용하여 178GB에서 5GB로 줄였음.
     * git config --global pack.usePathWalk true 설정을 추가하여 git push 시 올바른 델타가 생성되도록 함.

    마무리

     * 대규모 모노레포에서 CHANGELOG.md와 같은 긴 이름의 파일이 자주 업데이트되는 경우, path walk 기능을 주목해야 함.
     * git survey 명령어를 사용하여 디스크 크기별 상위 파일, 팽창된 크기별 상위 디렉토리 등을 확인할 수 있음.
     * Microsoft에서 레포지토리 확장을 위한 솔루션을 개발하고 있으며, 이를 전 세계에 제공하고 있음.

  GN⁺의 정리

     * 이 글은 대규모 자바스크립트 모노레포의 git 크기를 줄이는 방법에 대한 경험을 공유함. 특히, 오래된 git 패킹 코드의 문제를 해결하여 레포 크기를 크게 줄였음.
     * 이 글은 대규모 프로젝트에서 발생할 수 있는 git 관련 문제를 해결하는 데 유용한 정보를 제공함. 특히, CHANGELOG.md와 같은 파일의 반복적인 업데이트로 인한 문제를 해결하는 방법을 설명함.
     * 유사한 기능을 가진 프로젝트로는 Facebook의 Buck이나 Google의 Bazel이 있음. 이러한 도구들은 대규모 코드베이스를 효율적으로 관리하는 데 도움을 줄 수 있음.

        Hacker News 의견

     * 새로운 git-survey 명령어는 아직 git.git에 포함되지 않았음. Microsoft의 git fork에서 추가된 것임
     * nixpkgs를 클론했을 때, --window 250 옵션은 크기를 1.7GB로 줄였음. Microsoft git fork의 --path-walk 옵션은 1.9GB로 줄였음
          + 두 옵션 모두 초기 크기의 절반 이하로 줄였음
          + GitHub에서 이를 실행할 수 있으면 좋겠고, 사람들이 이를 제어할 수 있는 방식으로 호스팅하면 더 좋을 것임
     * 유럽의 일부 사용자는 큰 레포지토리를 클론할 수 없다고 함. 서버 측에서 변경이 이루어지기 전까지는 클론이 불가능할 것 같음
     * 파일 이름에 전체 경로가 포함되지 않는 실수로 인해 문제가 발생했음. 마지막 16자만 확인하고 있었음
     * Derick Stolee가 git 내부 구조에 대한 블로그를 작성했음. 로컬 및 CI에서 git clone 크기를 줄이는 방법에 대해 많은 것을 배울 수 있었음
     * Git을 해킹하는 것은 재미있지만, 2,500개의 패키지를 모노레포에 포함하지 않는 방법이 있는지 궁금함
     * Microsoft가 Azure DevOps를 자체적으로 사용하는 것이 좋음. Azure 서비스가 GitHub에만 네이티브 커넥터를 제공하는 것 같음
     * Git의 내부 구조를 잘 아는 사람이 가까이에 있는 것은 큰 프로젝트에서 일할 때 좋은 혜택임
     * 이 게시물에 감사함. 오픈 소스 소프트웨어에 큰 도움이 되었음. Microsoft, GitHub, GitLab이 많은 좋은 것을 제공하고 있음
     * 마지막 16자와 전체 경로 확인 문제를 더 잘 이해하고 싶음. 델타 압축, 패키지 인덱스, 멀티 패키지 인덱스와 어떻게 연결되는지 궁금함
"
"https://news.hada.io/topic?id=17428","맥도날드 아이스크림 기계, 이제 수리 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        맥도날드 아이스크림 기계, 이제 수리 가능

     * 많은 사람들이 맥도날드에서 아이스크림을 주문하려다 ""기계가 고장났습니다""라는 말을 듣곤 함. 미국 내 약 15%의 아이스크림 기계가 고장 상태이며, 뉴욕에서는 32%에 달함. 하지만 이제 변화가 시작됨.
     * 미국 저작권 사무소가 상업용 식품 준비 장비를 법적으로 수리할 수 있도록 허용하는 판결을 내림. 이는 맥도날드 기계를 포함하여 상업용 장비를 수리할 수 있는 권리를 인정받은 것임.
     * Taylor와 같은 제조업체는 디지털 잠금을 통해 수리 정보를 차단하여 간단한 수리를 위해 비싼 서비스 호출을 강요함. 이번 판결은 이러한 디지털 잠금을 우회할 수 있는 권리를 부여함.

승리: 이제 아이스크림 기계를 해킹할 수 있음

     * 맥도날드 프랜차이즈 소유자들은 오류 코드와 고장난 아이스크림 기계를 제조사 승인 기술자만이 수리할 수 있는 문제로 어려움을 겪어왔음. 디지털 잠금으로 인해 소유자들은 자체적으로 문제를 해결할 수 없었음.
     * 저작권 사무소의 새로운 예외 조항 덕분에 소유자, 수리 기술자, 그리고 기술자들이 소프트웨어 잠금을 우회하여 기계를 진단, 유지보수, 수리할 수 있게 됨. 이는 비싼 서비스 호출이나 제조사 개입 없이 가능해짐.

문제: 여전히 수리 도구가 없음

     * 디지털 잠금을 우회하는 것이 합법화되었지만, 이를 위한 도구를 공유하거나 배포하는 것은 여전히 불법임. 대부분의 프랜차이즈 소유자와 독립 수리점은 자체적으로 도구를 만들 기술적 전문성이 부족함.
     * iFixit과 같은 회사가 아이스크림 기계를 수리하는 도구를 판매하는 것은 여전히 불법이며, 이는 많은 소규모 사업체가 수리 작업에 접근할 수 없게 만듦.

실패: 상업 및 산업 장비에 대한 광범위한 예외 조항

     * 상업 및 산업 장비에 대한 광범위한 예외 조항이 거부됨. 이는 농부나 공장 소유자와 같은 많은 사업체가 디지털 제한으로 인해 자체 장비를 수리할 수 없게 만듦.
     * 제조사는 수리 서비스를 위한 높은 비용을 청구하고 부품 및 도구에 대한 접근을 제한함으로써 수리 시장을 통제함.

갱신: 우리가 얻은 것과 얻지 못한 것

     * 의료 기기에 대한 수리 정보 접근이 갱신되어 생명을 구하는 장비의 빠르고 효율적인 수리가 가능해짐.
     * 모터 차량, 해양 선박, 농업 장비, 소비자 전자 기기에 대한 수리 예외 조항이 갱신됨.
     * 비디오 게임 접근성을 위한 예외 조항은 갱신되지 않음.

GN⁺의 정리

     * 이번 판결은 소비자와 제조사 간의 수리 권리 싸움에서 중요한 진전을 이룬 사례임. 아이스크림 기계 수리는 가능해졌지만, 도구가 없으면 대부분의 프랜차이즈 소유자는 이 새로운 자유를 충분히 활용할 수 없음.
     * 상업 및 산업 장비는 여전히 제조사의 수리 독점에 갇혀 있으며, 이는 많은 소규모 사업체와 소비자가 자신의 제품을 제어하는 데 장애물이 됨.
     * 앞으로의 과제는 연방 저작권법을 수정하여 필요한 도구에 대한 접근을 확보하고, 수리 과정에서 발견한 내용을 공유할 수 있도록 하는 것임.

   맥도널드 아이스크림 기계를 더 똑똑하게 만든 회사 Kytch
"
"https://news.hada.io/topic?id=17462","룬스케이프 그랜드 익스체인지에서의 알고리즘 트레이딩 모험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    룬스케이프 그랜드 익스체인지에서의 알고리즘 트레이딩 모험

  개요

     * Runescape의 Grand Exchange에서 알고리듬 트레이딩을 구현한 프로젝트에 대한 설명임.
     * Grand Exchange는 모든 플레이어가 아이템을 사고팔 수 있는 시장으로, 4시간마다 아이템별로 구매 제한이 있음.
     * 모든 판매 제안에는 1%의 세금이 부과되며, 이는 게임 개발자가 인플레이션을 조절하는 데 사용됨.

  구성 요소

     * 봇은 세 가지 애플리케이션으로 구성됨: OSRS Wiki의 실시간 아이템 가격 스트림과 상호작용하는 JavaScript API, 캐릭터 행동을 제어하는 Java 클라이언트, 그리고 가능한 제안의 수익성을 예측하는 Python API.
     * 데이터 파이프라인은 두 개의 cronjob으로 구성되어 있으며, 각각 5분과 1시간마다 OSRS Wiki API를 폴링하여 데이터를 수집함.
     * 모델의 손실 함수 목표는 초당 생성된 금임.

  기준 방법

     * 기준 방법은 아이템의 최근 가격 스프레드와 거래량을 기반으로 ROI와 거래량 비율을 계산하는 것임.
     * 각 아이템의 ROI Z 점수와 거래량 비율 Z 점수를 계산하고, 과거에 평균 초당 금이 음수였던 아이템을 필터링함.

  머신러닝 방법

     * 기준 방법과 랜덤 포레스트, 신경망 회귀 모델을 비교하는 일주일간의 실험을 진행함.
     * 결과는 평균 시간당 수익을 기준으로 정렬됨.
          + 랜덤 포레스트 모델이 가장 높은 수익을 기록함.
          + 신경망 모델이 그 뒤를 이었으며, 기준 방법이 가장 낮은 수익을 기록함.

  결론

     * 머신러닝 방법이 기준 방법보다 성능이 뛰어났음.
     * 랜덤 포레스트 모델이 가장 높은 수익을 기록했으며, 이는 모델의 검증 손실과 일치함.

GN⁺의 정리

     * Runescape의 Grand Exchange에서의 알고리듬 트레이딩은 게임 내 경제를 이해하고, 머신러닝을 통해 수익을 극대화하는 흥미로운 프로젝트임.
     * 랜덤 포레스트 모델이 신경망보다 더 나은 성능을 보였다는 점에서, 데이터의 변동성이 낮고 예측이 고빈도 및 낮은 ROI를 가진다는 것을 알 수 있음.
     * 이 프로젝트는 게임 내 경제 시스템을 이해하고, 머신러닝을 실습하는 데 유용할 수 있음.
     * 유사한 기능을 가진 프로젝트로는 주식 시장에서의 알고리듬 트레이딩이 있음.

        Hacker News 의견

     * Google Sheet를 사용하여 위키의 API를 통해 데이터를 분석한 경험 공유. 시간당 수익은 낮음. 시장 및 카테고리 수준의 가격 추세 분석 필요성 언급. 개인의 수익성 스프레드시트 공유.
          + ""봇을 작성하는 것이 실제 게임을 하는 것보다 더 재미있음""이라는 의견. 개인 서버가 법적 문제로 중단되는 것에 대한 아쉬움 표현.
     * Runescape의 전성기 시절, GE에서 같은 희귀 아이템에 대해 매수 및 매도 주문을 동시에 걸어두고 수익을 얻는 방식 설명. 이를 ""시장 조성""이라고 부름.
     * World of Warcraft의 모바일 앱을 통해 경매장을 탐색하고 아이템을 사고 팔 수 있었던 경험 공유. API를 역공학하여 경매장 봇을 작성한 경험. 앱이 중단된 이유 중 하나로 추측.
     * Runescape에 대한 긍정적인 의견. 20년 넘게 업데이트가 계속되는 게임임을 강조. 커뮤니티의 소유권에 대한 불만이 있지만, 여전히 새로운 무기와 퀘스트가 추가되고 있음.
     * Runescape와의 상호작용을 주로 프로그래밍을 통해 하는 경험 공유. 색상 봇과 기본 클릭 봇 사용. pyautogui를 사용한 100줄의 파이썬 코드로 게임의 번거로운 부분을 자동화함.
     * Hypixel에서의 경험 공유. 다양한 제작 레시피의 입력 및 출력 가격을 모니터링하고 수익이 일정 수준에 도달하면 제작을 수행. 게임이 깊지 않아 지루해졌지만 재미있게 놀았음.
     * 두 개의 cronjob을 사용하여 OSRS Wiki API와 상호작용하는 방법 설명. 5분마다와 1시간마다 데이터를 가져오는 이유에 대한 의문 제기.
     * Runescape에서 GE 도입 전 거래로 약 1,000 GBP를 벌었던 경험 공유. 파티 모자를 싸게 사고 비싸게 파는 방식. 게임을 그만두고 eBay에서 모든 것을 판매한 경험.
     * 모델링에 대한 이해 부족을 사과하며, 5분 간격의 가격 데이터를 수집하는 것인지, 아니면 시간 프레임 전반에 걸쳐 패턴을 찾는 것인지에 대한 의문 제기.
     * EVE의 시장에서 유사한 실험을 한 사람이 있는지에 대한 질문.
"
"https://news.hada.io/topic?id=17416","OpenObserve - 클라우드 네이티브 관찰(observability) 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             OpenObserve - 클라우드 네이티브 관찰(observability) 플랫폼

     * O2는 로그, 메트릭, 트레이스, 분석, RUM(Real User Monitoring - 성능, 오류, 세션 리플레이) 등을 지원
     * 페타바이트급 데이터를 처리할 수 있도록 설계된 Elasticsearch/Splunk/Datadog 대체제
     * Elasticsearch와 달리 운영이 간단하며, 많은 설정을 이해하고 조정할 필요 없이 2분 이내에 설치 가능
          + Elasticsearch 대비 약 140배 저렴한 로그 저장 비용을 절감

주요 기능

     * 로그, 메트릭, 트레이스: 다양한 데이터 타입에 대한 포괄적 지원
     * OpenTelemetry 지원: 로그, 메트릭, 트레이스를 위한 OTLP 완전 호환성
     * Real User Monitoring (RUM): 성능 추적, 오류 로그, 세션 리플레이 포함
     * 알림 및 대시보드: 18가지 이상의 차트 유형을 통한 종합적인 데이터 시각화
     * 고급 인제스트 및 쿼리 기능: 데이터 보강, 수정, 로그 축소 및 컴플라이언스 지원, 예를 들어 로그의 민감한 데이터를 수정
     * GUI 내장: 직관적이고 사용자 친화적인 인터페이스
     * SQL 및 PromQL 지원: SQL로 로그 및 트레이스를 쿼리하고, SQL 및 PromQL로 메트릭 조회
     * 단일 바이너리 설치: 여러 플랫폼에서 실행 가능한 바이너리 제공으로 쉬운 설치 및 실행
     * 다양한 스토리지 옵션: 로컬 디스크, S3, MinIO, GCS, Azure Blob Storage 지원
     * 고가용성 및 클러스터링: 안정적이고 확장 가능한 성능 보장
     * 동적 스키마: 데이터 구조에 유연하게 적응
     * Authentication 내장: 보안이 갖춰진 상태로 즉시 사용 가능
     * 운영의 용이성: 간결하고 효율적으로 설계
     * 원활한 업그레이드: 간편한 업데이트 제공
     * 다국어 UI 지원: 영어, 스페인어, 독일어, 프랑스어, 중국어, 한국어 등 11개 언어 지원

   local 개발환경에서도 구동할 수 있어서 유용하게 쓰고 있습니다

   오우 저도 시도해봐야겠네요~!

   회사에서 어플리케이션에 대한 관측,관찰 가능성을 높히기위해서 grafana cloud를 보고 있는데 이것도 한번 봐야겠군요.

   OpenTelemetry 으로 여러 서버스가 나오는 것은 좋은데... 특장점을 찾기가 쉽지 않네요.
"
"https://news.hada.io/topic?id=17374","아마추어 역사가가 발견한 브램 스토커의 오래된 단편 소설","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    아마추어 역사가가 발견한 브램 스토커의 오래된 단편 소설

     * 드라큘라 작가의 잃어버린 이야기, 134년 만에 발견됨
     * 브램 스토커의 전설적인 고딕 소설 드라큘라는 수많은 각색을 거쳤으며, 1977년 BBC에서도 각색되었음.
     * 아마추어 역사가인 브라이언 클리어리가 브램 스토커의 잃어버린 단편 소설을 발견했음. 이 소설은 드라큘라가 출판되기 7년 전에 발표되었음.
     * 클리어리는 아일랜드 국립 도서관의 아카이브를 탐색하던 중 134년 된 이 유령 이야기를 발견했음.
     * 'Gibbet Hill'은 1890년 더블린 신문에 처음 발표되었으며, 그 이후로 문서화되지 않았음.
     * 스토커 전기 작가 폴 머레이는 이 이야기가 작가로서의 스토커의 발전을 조명하며, 드라큘라 출판으로 가는 중요한 단계였다고 말함.
     * 이 유령 이야기는 세 명의 범죄자에게 살해당한 선원의 이야기를 다루고 있으며, 그들의 시신은 지나가는 여행자들에게 경고로 교수대에 매달렸음.
     * 이 이야기는 서리의 Gibbet Hill을 배경으로 하고 있으며, 이는 찰스 디킨스의 1839년 소설 'Nicholas Nickleby'에서도 언급된 장소임.
     * 클리어리는 2021년 갑작스러운 청력 손실로 인해 휴가를 보내던 중 더블린의 국립 도서관에서 시간을 보내며 이 발견을 하게 되었음.
     * 2023년 10월, 스토커 팬인 그는 1890년 크리스마스 특별판 'Daily Express Dublin Edition'에서 낯선 제목을 발견했음.
     * 클리어리는 AFP 뉴스 에이전시에 ""Gibbet Hill이라는 단어를 읽고, 이는 내가 어떤 전기나 서지에서도 들어본 적 없는 브램 스토커 이야기라는 것을 알았다""고 말했음.
     * 그는 발견의 순간에 대해 ""이걸 어떻게 해야 할지 모르겠다""고 말했음.
     * 도서관의 디렉터 오드리 위티는 클리어리가 ""당신의 신문 아카이브에서 놀라운 것을 발견했다""고 말하며 연락했다고 전함.
     * 그녀는 그의 ""놀라운 아마추어 탐정 작업""이 도서관 아카이브의 증거라고 덧붙였음.
     * 클리어리는 초기 탐색 후 전기 작가 폴 머레이에게 연락했으며, 머레이는 이 이야기가 100년 넘게 흔적이 없었다고 확인했음.
     * 그는 1890년이 젊은 작가로서 드라큘라의 첫 노트를 작성한 시기라고 말했음.
     * 'Gibbet Hill'은 아일랜드 예술가 폴 맥킨리의 작품과 함께 출판되고 있으며, 모든 수익은 청력 손실 연구를 위한 'Charlotte Stoker Fund'에 기부될 예정임.
     * 이 발견은 이번 달 말에 열리는 더블린의 브램 스토커 페스티벌에서도 강조될 예정임.

GN⁺의 정리

     * 브램 스토커의 잃어버린 단편 소설 'Gibbet Hill'의 발견은 그의 작가로서의 발전을 이해하는 데 중요한 자료임.
     * 이 이야기는 선과 악의 투쟁을 다루며, 드라큘라와 유사한 주제를 가지고 있음.
     * 이 발견은 아일랜드 국립 도서관의 아카이브의 중요성을 보여주며, 역사적 문헌의 가치를 재조명함.
     * 청력 손실 연구를 위한 기금 마련에 기여하며, 사회적 가치도 있음.
     * 유사한 기능을 가진 문학 작품으로는 찰스 디킨스의 'Nicholas Nickleby'가 있음.

        Hacker News 의견

     * GitHub에 있는 프로젝트에 대한 설명으로, 첫 번째 열의 절반 정도만 빠르게 전사했으며, 스캔과 매우 거친 OCR이 포함되어 있음
          + 추가 기여를 원하는 사람들을 위한 링크 제공
          + 멀티모달 LLM을 사용하면 매우 좋은 결과를 얻을 수 있음
          + 초안이 있으며 교정과 수정이 필요함
     * Bram Stoker가 쓴 소설 중 ""Dracula"" 외에는 모두 형편없다는 의견이 있음
          + Bram Stoker는 14권의 책을 썼으며, 그 중 하나만 잘 썼다는 평가가 있음
     * Brian Cleary가 Bram Stoker Festival에서 발견한 내용을 발표할 예정임
          + 관련 링크 제공
     * ""Carmilla""라는 소설을 읽었으며, Bram Stoker의 ""Dracula""보다 더 선호함
          + Sheridan LeFanu가 쓴 이 소설은 ""Dracula""보다 25년 전에 출판됨
     * 아마추어 역사가가 갑작스러운 청력 상실로 인해 직장을 떠나 더블린의 아카이브를 둘러보게 되었고, 1890년의 신문 특별 크리스마스 부록을 재미로 탐색하게 됨
          + 우연한 발견임
     * LLM의 발전이 미래에 이와 유사한 사기를 더 쉽게 만들 수 있을지에 대한 우려가 있음
          + 현재는 특정 작가처럼 들리게 만드는 것이 어렵지만, 미래에는 변할 가능성이 있음
     * ""세계 최고의 역사가들이 놓친 정보를 발견했어!""라는 흥미로운 발견에 대한 반응
     * 저작권법이 어떻게 적용될지에 대한 질문이 있음
          + 아일랜드 법에 따르면 ""공개된 날로부터 70년""이라는 규정이 있으며, 신문에 게재되었으므로 현재는 공공 도메인에 속할 가능성이 있음
     * ""Dracula""는 개인적으로 가장 좋아하는 책 중 하나이며, 다시 읽고 싶다는 의견
          + 마지막 읽을 때 현대적인 해석이 포함된 서문을 읽은 것이 유일한 후회임
"
"https://news.hada.io/topic?id=17463","거의 200년 만에 발견된 쇼팽 왈츠","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          거의 200년 만에 발견된 쇼팽 왈츠

        Hacker News 의견

     * 이 왈츠는 진정으로 훌륭한 작품임
          + 종종 유명 작곡가의 잃어버린 작품이 발견되면 미디어가 주목하지만, 들어보면 잃어버린 이유가 있는 경우가 많음
          + 이 왈츠는 거의 완성된 작품으로, 쇼팽의 독특한 스타일이 잘 드러나며 그의 작품에 새로운 요소를 더함
     * 데뷔에 대해, 좀 더 신중했으면 좋았을 것이라는 의견이 있음
          + 뉴욕에서의 데뷔는 제품 배치처럼 보이며, 쇼팽의 친밀한 공간을 위한 작품과는 맞지 않음
          + 폴란드의 지역 문화 단체와 협력하여 현지에서 의미 있는 문화 행사를 만들었으면 좋았을 것이라는 제안이 있음
     * 악보를 필사하여 제공함
     * 생성 AI 시대에 많은 유명 예술가의 새로운 작품이 나타날 것이라는 추측이 있음
     * 이 작품은 필체가 아니라 쇼팽의 진정한 서명이 느껴지는 작품임
     * Alan Walker의 ""Fryderyk Chopin: A Life and Times""를 강력히 추천함
     * 음악 전문가들이 소리만으로 쇼팽의 작품임을 식별할 수 있었을지 궁금함
          + 100명의 ""음악 교수""에게 이 새로 발견된 작품의 작곡가를 추측하게 하는 실험이 흥미로웠을 것이라는 의견이 있음
     * 이 왈츠는 쇼팽의 최고 작품 중 하나는 아님
          + 거의 미완성처럼 느껴지며, 선물로 급히 만든 것이 아닐까 하는 추측이 있음
     * 최근 발견된 ""새로운"" 모차르트 작품과 유사함
          + 라이프치히 음악 도서관의 Carl Ferdinand Becker 컬렉션에서 미발표 작품의 원고가 재발견됨
     * 전체 악보에 대한 링크가 있는지 궁금해하는 의견이 있음
"
"https://news.hada.io/topic?id=17426","Claude의 새 analysis JavaScript 코드 실행 도구에 대한 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Claude의 새 analysis JavaScript 코드 실행 도구에 대한 노트

     * Anthropic은 Claude.ai의 챗봇 인터페이스용 ""Analysis Tool""을 출시함
     * 이 도구는 OpenAI의 ChatGPT 코드 인터프리터 모드와 유사하며, Claude가 코드를 작성하고 실행하여 그 결과를 대화에 활용할 수 있게 함
     * 사용자는 Claude 기능 플래그 페이지에서 이 기능을 활성화할 수 있음

JavaScript 코드 실행 방식

     * ChatGPT 코드 인터프리터와 Google Gemini는 Python 코드를 작성하고 안전한 샌드박스 서버에서 실행하는 방식으로 동작함
     * Claude는 Python 대신 JavaScript를 사용하며, 브라우저 내에서 직접 실행됨
     * 제한된 Web Worker에서 실행되며, console.log() 메시지 인터셉트를 통해 메인 페이지와 통신함
     * repl이라는 도구로 구현되어 있으며, Claude에 프롬프트를 통해 repl 함수의 설명을 요청할 수 있음

repl

     * repl은 JavaScript REPL임
     * 복잡한 수학 문제나 대용량 사용자 파일 분석에 사용
     * fs.readFile() 함수로 공유된 파일에서 데이터를 읽을 수 있음
     * Lodash, Papa Parse 같은 라이브러리 사용 가능
     * Node.js 환경이 아니며, React 스타일의 import 문법을 사용해야 함
     * 분석 도구와 Claude Artifacts 간 상호작용은 다소 혼동스러움
          + 분석 도구의 코드는 Artifact와 공유 환경에 있지 않음
          + 분석 도구의 코드를 Artifact에서 재사용하려면 전체 코드를 다시 작성해야 함
     * 업로드된 파일은 현재 Claude 컨텍스트에 추가되어 크기 제한이 있고 텍스트 형식만 작동함

GN⁺의 정리

     * Claude의 새로운 분석 도구는 JavaScript 기반으로 브라우저에서 직접 실행된다는 점에서 ChatGPT나 Google Gemini와 차별화됨
     * 파일 처리 기능이 포함되어 데이터 분석 작업에 유용할 것으로 보임
     * 그러나 아직 텍스트 형식 파일만 지원하고 Artifact와의 연동이 다소 제한적인 등 개선의 여지가 있어 보임
     * OpenAI나 Google처럼 Python 기반 솔루션을 선호하는 사용자에겐 다소 낯설 수 있음
     * 앞으로 바이너리 파일 처리나 SQLite 같은 추가 기능이 지원된다면 활용도가 더욱 높아질 것으로 기대함

        Hacker News 의견

     * JavaScript를 클라이언트 측에서 실행하여 서버 비용을 절감하는 아이디어가 흥미로움
          + Anthropic이 서버를 매번 실행하지 않아도 되는 점에서 비용 절감 효과가 있을 것임
     * 모델에 대한 사용자 정의 지침에서 ""이것은 Artifacts에 사용되는 antArtifact 구문과 유사하지만 동일하지 않음""이라고 명시되어 있음
          + 시스템 프롬프트에서 모델에게 사과하는 듯한 문구가 흥미로움
     * 브라우저 샌드박스에서 신뢰할 수 없는 JavaScript 코드를 실행하는 올바른 패턴을 찾고 있었는데, Anthropic이 이를 해결한 것 같음
          + 그들의 JavaScript 코드가 너무 난독화되어 있어 역공학이 어려움
     * 코드 생성 테스트를 Claude와 ChatGPT에서 수행해 봄
          + Python 작업 시 Sonnet(3.5 이전 버전)이 ChatGPT보다 가독성, 구조, 프롬프트 이해 측면에서 우수했음
          + JavaScript 프로젝트로 전환 후 Sonnet 3.5가 더 장황하고 수정이 필요했으며, ChatGPT는 더 간결하고 정확했음
          + Claude가 JavaScript에 집중하면 개선될지 주목하고 있음
     * duckdb-wasm이 좋은 추가 요소가 될 것임
          + Definite에서 사용 중이며 duckdb에 대해 긍정적인 평가를 하고 있음
     * JavaScript는 이 작업에 완벽한 언어임
          + AI가 자유롭게 작동할 수 있는 샌드박스 코딩 환경을 기대하고 있음
     * 이는 훌륭한 진전이지만, 맥락을 벗어나기 전까지는 크게 유용하지 않다고 생각함
          + Anthropic에 대한 기대가 크며, 2021년에 예측했던 것처럼 승자 독식 시장이 되지 않은 점이 기쁨
"
"https://news.hada.io/topic?id=17410","Show HN: 2048 출시 10주년 기념 업데이트 버전 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show HN: 2048 출시 10주년 기념 업데이트 버전 제작

     * 2048은 간단하면서도 중독성 있는 퍼즐 게임으로, 숫자를 합쳐 2048 타일을 만드는 것이 목표임.
     * 이 게임은 직관적인 조작과 전략적 사고를 요구하여 많은 사람들에게 인기를 끌고 있음.
     * 유사한 게임으로는 Threes가 있으며, 2048은 오픈 소스로 제공되어 다양한 변형 게임이 존재함.
     * 이 게임은 논리적 사고와 문제 해결 능력을 기르는 데 도움을 줄 수 있음.
     * 10주년을 기념하여 업데이트 버전을 제작

        Hacker News 의견

     * 한 사용자는 비행 공포를 극복하기 위해 2048 게임을 사용한 경험을 공유하며, 게임이 집중을 다른 곳으로 돌리는 데 도움이 되었음을 설명함
     * TypeScript를 배우기 위해 2048을 TypeScript로 포팅한 경험을 공유하며, 자신이 작성한 타입이 React의 초기 타입 정의에 사용된 것을 발견한 이야기를 전함
     * 8년, 16년 등의 기념일을 축하해야 한다는 의견을 제시함
     * 2048의 10주년을 축하하며, 새로운 버전보다 클래식 버전을 선호한다고 언급함. Threes!와의 비교에서 2048이 더 재미있다고 생각함
     * 3x3 2048 클론을 좋아한다고 하며, 완벽한 게임을 달성할 수 있는 점이 마음에 든다고 설명함
     * 2048 클론을 Go와 QML 기반 UI로 작성하여 대회에서 1등을 차지한 경험을 공유함
     * 새로운 타일 생성 시 2와 4의 분포가 가중치가 있는 랜덤 함수라는 점을 언급하며, 항상 최악의 옵션을 생성하는 모드를 추가할 것을 제안함
     * Amazon Prime과 함께 무료로 제공되는 프리미엄 버전에 대한 질문을 던짐
     * 게임을 열었을 때 Crown과 Prime 관련 내용을 보고 농담이나 패러디로 생각했으나, 실제라는 점이 오늘날의 현실을 웃음으로 받아들이게 한다고 설명함
     * 처음으로 2048을 플레이하여 3048점을 기록한 경험을 공유하며, 게임이 지적 자극을 주기까지 시간이 걸린다고 느꼈음을 설명함. 게임의 초기 움직임이 더 중요하게 느껴지도록 수정할 수 있는 방법을 제안함
"
"https://news.hada.io/topic?id=17384","MQTT 25주년 기념주년 기념

MQTT 프로토콜 개요

     * MQTT는 작은 디바이스에서 가벼운 네트워크 상에서 데이터를 주고받을 수 있는 네트워크 프로토콜
     * 1990년대 후반에 디자인되어 제한된 전력과 네트워크 대역폭을 효율적으로 사용하는 것이 중요했음
     * 네트워크가 발전함에 따라 엣지 컴퓨팅, 홈 자동화, 모바일 디바이스 등 다양한 영역에서 MQTT의 가치는 여전히 높음
     * MQTT 프로토콜의 단순함이 매우 강력한 특징

앤디 파이퍼의 MQTT 연관 활동

     * 2001년 IBM에 입사 후 MQTT를 처음 접하고 내부에서 사용하기 시작함
     * IBM의 Smarter Planet 마케팅 활동과 연계되어 MQTT 기술을 홍보하는 역할을 맡게 됨
     * 2009-2011년 블로그를 통해 MQTT 기술을 활발히 소개하고 확산시키는데 기여
     * 초기에는 IBM 내부 브로커들이 주로 사용되었으나, Mosquitto 등 오픈소스 브로커들이 등장하며 더욱 널리 사용되기 시작함
     * 2011년 IBM이 Eclipse 재단에 MQTT 구현체들을 기부하는 과정에 깊게 관여함

MQTT의 성공과 성장

     * 지난 15년간 MQTT 기술을 발전시키고 널리 퍼트리는데 기여한 여러 회사들이 있음
     * 현재 MQTT는 메이커 커뮤니티부터 Dyson의 에어필터, 3D 프린터 제어, 제조업 등 매우 다양한 분야에서 사용되고 있음
     * 우리가 일상적으로 사용하는 많은 앱들의 백엔드에서도 MQTT가 사용되고 있을 것

25주년 기념 활동

     * MQTT 공식 계정을 트위터에서 매스토돈으로 이전함 (@mqtt@fosstodon.org)
     * 앤디 스탠퍼드-클락이 HiveMQ와 인터뷰를 진행하고, HiveMQ에서는 관련 팟캐스트를 운영 중
     * MQTT 커뮤니티의 개발자, 사용자, 열정가들에게 감사의 말을 전함

MQTT의 미래

     * 향후 25년 이상 MQTT가 지속적으로 사용되고 발전하기를 기원함

앤디 파이퍼의 개인사

     * IBM 재직 중 MQTT 커뮤니티 활동에 집중하다 낮은 실적 평가를 받은 적이 있음
     * Mosquitto의 개발자 로저 라이트는 2009년 앤디 스탠퍼드-클락의 발표를 듣고 영감을 얻어 Mosquitto 개발을 시작함
     * 앤디 파이퍼의 MQTT 관련 유튜브 영상 중 PHP와 연동하는 15년 된 영상이 여전히 높은 조회수를 기록 중

GN⁺의 의견

     * MQTT가 IoT 시대에 매우 중요한 역할을 하고 있으며, 경량화된 프로토콜 설계 덕분에 제한된 자원 환경에서도 잘 동작함
     * 기존의 복잡한 프로토콜들과 달리 단순하고 사용하기 쉬운 것이 장점이나, 보안 측면에서는 주의가 필요함
     * MQTT와 유사한 프로토콜로는 AMQP, CoAP 등이 있으나 사용성 측면에서는 MQTT가 우위에 있음
     * 향후 MQTT의 보안과 확장성을 개선하기 위한 노력이 지속될 것으로 보이며, 웹소켓 등 최신 네트워크 기술과의 연계도 기대됨
     * IoT 서비스 개발 시 MQTT 프로토콜 도입을 적극 검토해 볼만하며, 다양한 오픈소스 브로커와 클라이언트 라이브러리를 활용할 수 있음

        Hacker News 의견

     * 첫 번째 프로젝트로 주요 스키 리조트의 수로 시스템을 SVG 지도와 MQTT를 사용하여 시각화한 경험을 공유함. 이 프로젝트는 10년 이상 유지되고 있으며, 웹 소켓을 통해 상태 업데이트가 자동으로 반영됨.
     * MQTT를 최근 프로젝트에서 사용했으나, 프로토콜의 옵션이 많아 이해하기 어려웠고, 문서화도 부족하다고 느꼈음. 특히 Eclipse Mosquitto Python 클라이언트에서 경합 조건 문제를 겪었음.
     * Andy Stanford Clark의 집이 IoT 기기가 트윗을 하기 전 시절에 뉴스가 되었던 사례를 언급하며, MQTT 프로토콜이 위성 링크에서 1바이트 전송에 $1이 들던 시절에 매우 효율적이고 구현이 간단했음을 설명함.
     * Boost C++ 라이브러리가 async-mqtt5 구현을 Boost.MQTT로 포함하기 위해 검토 중임을 재미있는 사실로 공유함.
     * 최근 몇 년간 MQTT가 공장에서 기계 간 데이터 공유에 많이 사용되고 있으며, 과거에는 석유 및 가스 산업에서 SCADA 시스템에 사용되었음을 설명함. MQTT가 Industry 4.0의 주요 동력임을 강조함.
     * MQTT가 경량 및 효율적이라는 주장에 회의적이며, TCP/IP를 사용하는 것일 뿐이라고 주장함. 표준이기 때문에 상용 기기와 연결할 수 있는 점은 좋지만, 더 나은 pub/sub 및 메시지 큐 옵션이 있다고 생각함.
     * IoT 강의에서 MQTT를 사용해왔으며, 웹 소켓을 통해 지원되는 점이 편리하다고 설명함.
     * MQTT가 소규모 취미 프로젝트에 적합할 뿐만 아니라 Facebook Messenger와 같은 대규모 프로젝트에도 확장 가능하다고 설명함.
     * 최근 임베디드 시스템 프로젝트에서 MQTT를 사용하여 프로세스 간 메시징 시스템을 구현한 경험을 공유함. 네트워크에 장치를 연결하여 MQTT Explorer로 메시지를 기록하거나 주입할 수 있었음.
     * 최근 NATS에서 MQTT 3.1.1 호환 모드를 사용한 경험을 공유하며, 설정이 비교적 쉬웠고 스마트 홈 요구에 잘 맞았다고 설명함. 지연 시간 및 처리량 부하 테스트를 탐색할 수 있는 재미있는 경험이었음.
"
"https://news.hada.io/topic?id=17377",""Software Engineer" 직함이 의미를 (거의) 상실했음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ""Software Engineer"" 직함이 의미를 (거의) 상실했음

     * 과거에는 ""Senior Software Engineer""라는 타이틀이 실질적인 의미를 가지고 있었음
     * 최근 몇 년 동안, 업계에서는 급격한 직함 인플레이션이 발생하여 주니어-미드-시니어의 명확한 발전 과정이 혼란스러운 상태로 변함
     * ""시니어"" 직함은 한때 상당한 경험과 전문성의 배지였지만, 특히 그 가치가 떨어져서 개발자들은 3~4년의 경력만으로도 더 빠르게 ""시니어""로 임명되고 있음
     * 시니어가 되는 길은 한때 기술 구축과 다양한 경험의 마라톤이었지만, 단거리 선수의 질주로 변모함

""시니어"" 엔지니어란 무엇인가?

     * 시니어 엔지니어는 단순히 직장에서 몇 년을 보내는 것으로 얻어지는 것이 아니라 다양한 경험과 도전 과제를 통해 얻어지는 것임
     * 이들은 전투에 단련된 문제 해결사로 복잡한 기술적 문제를 해결하고, 시스템 전반의 이슈를 이해하며, 레거시 코드베이스를 자신 있게 리팩토링할 수 있는 능력을 갖추고 있음
     * 주요 시스템 장애를 경험해봤으며, 이를 통해 문제를 빠르게 진단하고 위기 상황에서 팀을 이끌며, 매 초가 중요할 때 중요한 결정을 내림으로써 팀을 이끌어 위기를 극복하는 능력을 갖추고 있음
     * 또한, 장기적인 관점에서 확장 가능하고 유지 보수 가능한 시스템을 설계할 수 있는 비전을 가지고 있음.
     * 기술적 능력 외에도, 멘토링과 리더십 능력을 갖추고 있으며, 지속적으로 학습하고 새로운 기술과 방법론에 적응하는 자세를 유지함.

직함 인플레이션의 근본 원인

     * 인재 유치를 위한 치열한 경쟁으로 인해 기업, 특히 스타트업은 직함을 유지 전략으로 사용하게 됨
     * 기술 대기업에서 제공하는 급여를 항상 맞출 수 없는 이러한 회사들은 직함을 부풀리는 것을 비금전적 보상의 한 형태로 사용하고, 이는 직함의 의미를 희석시킴
     * LinkedIn과 같은 플랫폼은 직함을 개인 브랜딩 도구로 만들어, 이는 외형을 실질보다 우선시하는 경향을 초래함
          + 신입 졸업생부터 경험 많은 전문가에 이르기까지 모든 사람들이 프로필에 좋아 보이는 타이틀을 갖고 싶어 하게 만듦
     * HR 부서는 다양한 기술 직무를 정확히 분류하려다 보니, 세분화된 직함을 만들어 직무 비교를 어렵게 하고 있음
     * 직함 승진을 직원 유지 전략으로 사용하는 회사들이 많아졌으며, 이는 직무 책임이나 기술 성장과 일치하지 않는 경우가 많음

직함 인플레이션을 해결해야 하는 이유

     * 직함 인플레이션은 명함이나 LinkedIn 프로필의 단어에 관한 것이 아님
     * 이는 우리 업계의 진실성과 기능성의 핵심을 공격하는 문제임
     * 직함을 과장할 때, 우리는 본질적으로 우리의 능력과 경험에 대해 우리 자신과 서로에게 거짓말을 하는 것임
     * 이는 기대와 현실 사이의 불일치를 만들어, 사람들이 준비되지 않은 역할에 배치되는 상황으로 이어짐

직함 인플레이션에 대해 우리가 할 수 있는 일

     * 리더십 위치에 있는 사람들은 과장된 직함을 유지 또는 채용 문제를 위한 빠른 해결책으로 사용하려는 유혹을 피해야 함
          + 대신 승진을 구체적인 기술과 책임에 연결하는 의미 있는 경력 발전 프레임워크를 만들어야 함
     * 회사는 직함 구조를 표준화하고 각 레벨의 기대와 책임을 투명하고 명확히 설명하는 직무 설명서를 작성해야 함
     * HR 부서는 기술 리더와 협력하여 표준화된 기술 매트릭스를 개발하고, 이를 통해 후보자와 직원을 보다 객관적으로 평가할 수 있는 방법을 개발해야 함
     * 직함 인플레이션을 저항하는 회사는 진정한 성장을 중시하는 인재를 유치하고 유지할 수 있으며, 이는 더 정확한 채용, 개선된 팀 역학, 향상된 생산성으로 이어짐

GN⁺의 의견

     * 기술 업계에서 직함 인플레이션이 만연한 것은 단기적으로는 직원 유지와 채용에 도움이 될 수 있지만, 장기적으로는 업계 전반에 걸쳐 직함의 의미를 희석시키는 부정적인 영향을 미칠 수 있음
     * 직함이 실제 역량이나 경험과 일치하지 않는 경우, 해당 역할에 배치된 직원이 기대에 부응하지 못하거나 과도한 스트레스를 받을 수 있음
     * 이는 프로젝트 실패나 팀 내 갈등으로 이어질 수 있으므로, 직함 인플레이션을 해결하기 위해서는 기업과 HR 부서의 적극적인 노력이 필요함
     * 예를 들어, 직무 기술서를 상세히 작성하여 각 직급의 역할과 책임을 명확히 정의하고, 직원의 승진을 실질적인 역량 향상과 연계시키는 것이 도움이 될 수 있음
     * 또한, 업계 전반에 걸쳐 직함에 대한 표준화된 이해를 촉진하기 위해 기업 간 협력도 필요할 것으로 보임

   고통과 번민의 시간이 실력으로 이어진다고 말씀하신 멘토님 말씀이 떠오릅니다.

   레퍼체크 수요가 늘겠네요.

   본래 자신이 갖고 있는 책임과 전문성을 대변하는 의미를 갖고 있던 직함이, 이제는 그저 년차를 대신하는 역할로 변질된게 아쉽네요.

   앞으로의 직함은 Engineer 보다 Developer가 더 맞지 않을까요?

   이력서 검토할 때 이런 현상들 종종 느낍니다. 석사 졸하고 1~2년 일한 회사에서 시니어 연구원 직함을 달고 있었다거나, CTO를 달고있었던 경우도 종종 보구요.

   한국식으로 말하면 '아무나 과장 주더라' 라는 소리군요.
"
"https://news.hada.io/topic?id=17403","HN 화제: 반사를 그림으로 바꾸는 벽걸이형 Diffusion Mirror","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 화제: 반사를 그림으로 바꾸는 벽걸이형 Diffusion Mirror

     * PabloNet
     * 인터넷에 연결된 AI가 창의적일 수 있는지에 대한 논쟁은 본질적인 문제와는 거리가 멀다고 생각함. 예술은 내면 세계를 드러내는 것이며, 기술은 그 일부에 불과함. 예술이 기술을 너무 많이 요구하는 것은 안타까운 일임. 두 요소를 분리할 수 있는지에 대한 가능성이 보임. 80억 명의 비예술가들이 사용하는 저렴한 보간적 창의성은 새로운 세계관을 드러낼 수 있음.
     * 이러한 이유로, 예술에 소질이 없는 나는 다양한 AI 기반 예술 형식에 매우 흥미를 느끼고 있음. 몇 달 전부터 StreamDiffusion을 사용하여 웹캠 피드를 실시간으로 확산시키는 작업을 시작했음. 아름다운 시각적 효과를 생성하고 새로운 감정을 불러일으키고자 함. 그러나 노트북 형태는 환상을 깨뜨림. 그래서 최근에는 벽에 걸 수 있는 LCD 프레임을 제작하여 최소한의 환상 파괴 요소로 만들었음. 이 설정의 가장 큰 장점은 단순한 화면이 아닌, 영구적인 객체로서 새로운 상호작용의 채널을 열어준다는 것임.
     * 현재 설정의 주요 문제는 낮은 프레임 속도임. TensorRT를 사용하고 이미지 압축을 통해 속도를 높였지만, 여전히 개선의 여지가 많음.
     * 관심 있는 사람들을 위해 제작 및 기여 방법을 공유함:
          + 클라이언트 및 서버 코드 제공
          + 서버 호스팅은 RunPod 사용
          + 클라이언트는 Raspberry Pi 5에서 실행
          + 10.1인치 Pi 화면 사용
          + 적외선 조명 사용
          + 일반적인 프레임 사용
          + 적외선 Pi 카메라 사용
          + 카메라를 위한 구멍을 뚫기 위해 펀처 사용 (드릴은 작동하지 않음)
          + 다양한 전처리 필터를 사용하여 실험, 단순한 프롬프트만으로는 부족함. img2img는 전처리 없이 너무 현실적으로 보임. 이 글에서 보이는 파란 피카소 스타일을 얻기 위해 캐니 엣지 검출, 파란색 착색 및 블러링을 혼합하여 사용함.

GN⁺의 정리

     * AI 기반 예술은 기술과 창의성을 분리하여 새로운 시각을 제공할 수 있는 가능성을 보여줌.
     * StreamDiffusion을 활용한 실시간 웹캠 피드 확산은 새로운 감정과 시각적 경험을 제공함.
     * LCD 프레임을 활용한 설치는 단순한 화면을 넘어 영구적인 예술 작품으로서의 가능성을 열어줌.
     * 낮은 프레임 속도와 같은 기술적 문제는 여전히 개선의 여지가 있음.
     * 비슷한 기능을 가진 프로젝트로는 DeepArt.io와 RunwayML 등이 추천됨.

        Hacker News 의견

     * JPEG 바이트를 Base64로 인코딩하면 페이로드 크기가 약 30% 증가하고 클라이언트와 서버의 CPU 사이클을 소모하게 됨. Websocket 프로토콜은 이진 페이로드를 전송할 수 있으므로 텍스트로 변환할 필요가 없음
          + 손실이 있는 JPG 압축을 제거하고 네트워크를 통해 원시 RGB 바이트를 전송하는 것을 고려할 수 있음
          + StreamDiffusion은 파이프라인에서 광범위한 배칭을 통해 높은 프레임 속도를 달성할 수 있음. 클라이언트가 한 번에 하나의 프레임만 전송하고 응답을 기다리기 때문에 이점을 얻지 못하고 있음
          + SDXL Turbo 및 Lightning 모델은 img2img에서 매우 빠르지만 해상도가 512² 또는 1024² 픽셀로 제한됨. 고급 소비자용 GPU에서 실시간으로 실행 가능함
     * 예술은 내면 세계를 드러내는 것이며, 기술은 일부에 불과함. 기술 격차가 단순한 불편함이라는 생각에 의문을 가짐
          + 그림을 그리거나 음악을 만드는 법을 배우는 것이 자신에게 어떤 변화를 가져다주며, 더 깊은 삶의 교훈을 가르쳐준다고 생각함
          + 위대한 예술 작품은 천재에 의해 만들어진 것이 아니라, 천재성은 예기치 않게 찾아오는 것임. 기술 격차를 제거하는 것은 이러한 기회를 제거하는 것임
     * 예술적 가치는 언급하지 않지만, 도구 수집가로서 흥미로운 부분이 있음
          + 카메라를 위한 프레임의 판지에 구멍을 뚫기 위해 펀처를 사용함. 드릴은 작동하지 않았음
          + 드릴이 판지에서 작동하지 않는 방식에 대한 더 많은 세부 정보나 해석을 원함
     * 카메라가 프레임이 아닌 다른 곳에 있으면 더 멋질 것이라고 생각함. 예술적 거울을 보는 것은 조금 지루함
          + 다른 사람의 집에 두 번째 거울을 만들고, 한 거울의 카메라를 다른 거울로 피드하여 서로의 '반사'를 볼 수 있게 함
     * 예술은 감정을 보존하고 창조하는 것이라고 항상 생각함. 벽에 있는 바나나도 예술이며, 대중 음악도 여전히 예술임
          + 이 발명품은 확실히 예술 작품이지만, 그 출력물은 그렇지 않다고 생각함. 구름처럼 다양한 모양을 만들 수 있지만, 여전히 평균적인 무작위성임
     * 이미지 간의 높은 프레임 속도 변형 효과를 고려해본 적이 있는지 물음. 이는 효과적인 프레임 속도를 증가시키고 멋져 보일 것임
     * 현재 설정의 주요 문제는 낮은 프레임 속도임. 이를 기능으로 간주하며, 이미지를 처리할 시간이 있는 것이 나쁘지 않음
          + 업데이트 빈도를 5-15분으로 늘리고, 변화나 움직임이 감지될 때마다 새로운 이미지를 캡처하고 생성하도록 함
     * 가장 전력 소모가 많은 거울에 대한 상을 줌. 입력의 작은 변화에 대해 그림이 안정적이지 않음을 발견함
     * 일부 이미지를 고정할 수 있는 방법이 있는지 물음. 일부 이미지는 유지하면 멋질 것이라고 생각함 (예: 프로필 사진이나 잠금 화면 사진)
"
"https://news.hada.io/topic?id=17417","Microsoft GenAIScript - 생성형 AI 스크립팅 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Microsoft GenAIScript - 생성형 AI 스크립팅

     * ""Prompting is Coding"" : JavaScript를 사용하여 LLM에 대한 프롬프트를 프로그래밍 방식으로 작성하는 스크립팅 언어 및 환경
          + $`Analyze ${env.files} and report errors. Use gitmojis.
     * 간소한 JS/TS 문장으로 LLM 기반 스크립트를 생성, 디버그 및 자동화할 수 있음
     * JavaScript의 유연성과 내장된 출력 구문 분석의 편리함을 결합하여 LLM 기반 소프트웨어 솔루션의 생성을 간소화
     * VS Code 확장으로 편집/디버그/실행/테스트 가능. CLI도 제공
     * Features
          + Javascript 함수를 LLM tools로 등록 가능
          + tools와 inline prompt를 결합하여 agent 만들기
          + .mjs 형식의 스크립트로 재사용 및 공유, 버전관리 가능
          + Data schema로 데이터를 정의/유효성 검사/복구 가능
          + PDF, DOCX, CSV, XLSX 등의 파일에서 읽기 지원
          + LLM 출력에서 파일을 생성
          + 파일에 대한 Grep / 퍼지 검색
          + Playwright로 브라우저 자동화
          + RAG 기본 내장(벡터 검색)
          + GitHub Models / GitHub Copilot 으로 모델 실행
          + Phi-3/Ollama,LocalAI 등의 오픈소스 모델들을 로컬에서 실행
          + Code Interpreter로 LLM이 코드를 샌드박스 환경에서 실행
          + Docker Container 안에서 코드 실행
          + LLM을 이용하여 LLM 프롬프트 생성
          + Prompty 파일을 실행 또는 변환
          + CLI 로 자동화 가능하여 CI/CD 환경에 연동 가능
          + PR 리뷰에 끼어넣어서 자동화된 PR 체크 가능
          + promptfoo 로 Test 및 Eval 지원

   이건 써봐야해! 하는 느낌이 막 드네요. cursor도 지원!

   이건,, dsl에 가까운 뭔가인가요
"
"https://news.hada.io/topic?id=17370","라마누잔의 천재성을 따라잡지 못하는 수학","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         라마누잔의 천재성을 따라잡지 못하는 수학

서론

     * 스리니바사 라마누잔은 식민지 인도에서 가난하게 태어나 32세에 사망한 수학 천재로, 그의 비전은 오늘날까지 수학 분야에 영향을 미치고 있음.
     * 라마누잔은 독학으로 수학을 연구하며, 영국의 수학자 G.H. 하디와의 협력을 통해 그의 천재성을 인정받았음.

새로운 세계

     * 라마누잔은 정규 교육 없이도 수학적 진리를 직감적으로 이해할 수 있었음.
     * 그는 수많은 수학적 결과를 발견했으며, 그 중 많은 것들이 증명 없이 제시되었음.
     * 그의 작업은 수학의 여러 분야에서 계속해서 발견되고 있음.

라마누잔의 영향

     * 라마누잔은 특히 분할 정체성(partition identities)으로 유명하며, 이는 수학의 여러 분야와 깊은 연관성을 가짐.
     * 최근에는 대수기하학에서 곡선과 표면을 연구하는 데 그의 작업이 활용되고 있음.

새로운 발견

     * 라마누잔의 작업은 수학의 거의 모든 분야에서 발견되고 있으며, 이는 단순한 우연이 아님.
     * 그의 작업은 수학적 진리의 새로운 세계를 열어주고 있음.

라마누잔의 유산

     * 라마누잔의 작업은 수학자들에게 계속해서 영감을 주고 있으며, 그의 정체성은 수학의 다양한 분야에서 새로운 발견을 가능하게 하고 있음.
     * 그의 작업은 수학적 신비를 탐구하는 데 중요한 역할을 하고 있음.

GN⁺의 정리

     * 스리니바사 라마누잔은 독학으로 수학적 천재성을 발휘하여 수학의 여러 분야에 지속적인 영향을 미치고 있음.
     * 그의 작업은 수학적 진리의 새로운 세계를 열어주며, 수학자들에게 계속해서 영감을 주고 있음.
     * 라마누잔의 분할 정체성은 수학의 다양한 분야에서 새로운 발견을 가능하게 하고 있음.
     * 그의 작업은 수학적 신비를 탐구하는 데 중요한 역할을 하고 있으며, 수학자들에게 계속해서 도전과 영감을 제공하고 있음.

        Hacker News 의견

     * R은 수학을 제외한 다른 과목에서는 흥미가 없어 실패했음. 사회와 규범은 학생들이 모든 과목을 배우기를 기대하지만, 흥미가 없는 과목은 어떻게 해야 할지 의문임
          + 많은 천재들이 숙제와 지루한 수업 때문에 놓치고 있는지 궁금함
          + 대부분의 학생들은 수업 내용을 기억하지 못하고, 최고의 학생들도 평균 이상의 성과만을 이루는 경우가 많음
          + 반 친구 중 수석 졸업생이 의사가 되었지만, 의학의 경계를 넘어서지는 않음
          + R과 같은 사람들은 규범에 의해 그들의 천재성이 묻힐 수 있음
          + 특별한 사람들은 거의 잊혀질 뻔했지만, 큰 기회를 얻어 성공한 경우가 많음
     * Ramanujan 이야기에서 진정한 MVP는 G.H. Hardy임. 그는 Ramanujan의 편지를 진지하게 받아들이고, 그를 영국으로 초대할 자원을 조직했음
          + Ramanujan에게 편지를 받은 다른 사람들은 그를 무시했음
          + Ramanujan은 젊은 나이에 사망한 것이 비극적임
     * Ramanujan은 전 세계 수학자들에게 영감을 주었음. 그의 삶은 아름다운 비극이었음
          + 전통적인 브라만 가정에서 자란 그는 바다를 건너는 것만으로도 추방될 위험이 있었음
          + 그의 문화적 배경은 그의 이야기를 더욱 전설적으로 만듦
          + 그는 수학을 위해 많은 것을 희생했음
     * L.J. Rogers는 20년 전에 증명된 수학적 명제를 연구했으며, 상대적으로 무명 상태에서 연구를 계속했음
          + 그는 피아노를 연주하고 정원을 가꾸며 여가 시간을 다양한 활동에 사용했음
     * Ramanujan은 가족 여신에게 성공을 돌렸으며, 꿈에서 수학적 정리를 보았다고 주장했음
          + ""방정식은 신의 생각을 나타내지 않으면 의미가 없다"" - Ramanujan
     * Ramanujan과 같은 수학자들의 이야기는 항상 매력적임. 그들의 직관적 도약이 어떻게 이루어지는지 궁금함
          + Ramanujan의 뇌가 잠자는 동안 패턴을 처리했는지, 아니면 더 근본적인 무언가인지 궁금함
          + 최근의 신경과학, AI, 인지 심리학의 발전이 이러한 통찰의 원천을 설명할 수 있는지 궁금함
     * Ramanujan이 오래 살았다면 어떤 일이 벌어졌을지 상상하기 어려움
     * Ramanujan과 그의 작품에 대해 더 알고 싶다면 다음 자료를 추천함
          + Narendra Kumar Govil과 Bhu Dev Sharma의 <i>Mathematics Wizard Srinivasa Ramanujan : Some glimpses into his Life and Work</i>는 그의 수학과 관련 자료를 소개하는 좋은 전기임
          + Prof. Ken Ono의 강의 <i>Why Does Ramanujan, ""The Man Who Knew Infinity,"" Matter?</i>는 Ramanujan이 수학자들에게 어떤 영감을 주었는지 설명함
          + Mathologer의 유튜브 채널은 Ramanujan의 유명한 정체성을 설명하는 좋은 자료임
          + Ramanujan의 모든 출판된 논문과 미출판 노트북은 온라인에서 찾을 수 있음
     * Ramanujan의 이야기는 매우 흥미롭지만, 더 많은 인도 수학자와 과학자들이 유명해지기를 바람
          + Harish Chandra, C. R. Rao, Manjul Bhargava, Narendra Karmakar와 같은 수학자들
          + C. V. Raman, Satyendra Nath Bose, Meghnad Saha와 같은 물리학자들
          + Har Gobind Khorana와 Venkatraman Ramakrishnan 같은 인물들도 포함됨
"
"https://news.hada.io/topic?id=17447","라운드 로빈 DNS 이해하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            라운드 로빈 DNS 이해하기

    라운드 로빈 DNS 이해하기

     * 라운드 로빈 DNS란 무엇인가?
          + 일반적으로 웹사이트를 VPS에서 제공할 때, DNS 제공자의 제어판에 단일 A 레코드를 추가함.
          + 라운드 로빈 DNS에서는 동일한 서브도메인에 여러 서버를 지정하여 부하를 여러 서버에 분산하고, 오프라인 서버를 자동으로 감지하여 온라인 서버를 선택할 수 있음.
          + 로드 밸런서를 사용하지 않고도 간단하고 우아한 솔루션을 제공하며, 비용이 들지 않음.
     * 이론적으로 어떻게 작동하는가?
          + RFC 8305 ""Happy Eyeballs""에 따르면, 클라이언트는 연결 전에 주소를 정렬해야 함.
          + 서버가 온라인인지 오프라인인지 확인하고, 온라인 서버를 핑 시간에 따라 정렬함.
     * 실제로 어떻게 작동하는가?
          + 미국, 유럽, 싱가포르에 3개의 VPS를 생성하고, Cloudflare에 3개의 프록시 및 비프록시 A 레코드를 만듦.
          + 각 서버는 색상 이미지와 호스트 이름을 제공함.

    클라이언트의 서버 선택 행동

     * Chrome
          + 모든 위치에서 무작위로 선택하지만, 선택 후에는 고정됨.
          + 몇 시간 후에 다시 평가함.
     * Firefox
          + Chrome과 유사하게 무작위로 선택하고 고정됨.
     * Safari
          + 항상 가장 가까운 서버를 올바르게 선택함.
     * curl
          + 처음에는 올바르지 않을 수 있지만, 두 번째 실행 시 가장 가까운 서버로 수정됨.
     * Cloudflare
          + 클라이언트 IP를 기반으로 무작위 위치를 선택하고 고정됨.

    부분적으로 오프라인 서버가 있는 경우의 클라이언트 행동

     * 모든 클라이언트는 오프라인 서버를 감지하고 대체 서버를 선택함.
     * Cloudflare는 오프라인 서버를 감지하지 못하고, 선택된 서버가 오프라인이면 오프라인 상태로 제공됨.

    Cloudflare 개선 사항

    1. 오프라인 서버를 감지해야 함.
    2. 가장 낮은 지연 시간을 가진 서버를 선택하는 기능이 필요함.

    GN⁺의 정리

     * 라운드 로빈 DNS는 여러 서버에 부하를 분산시키고, 로드 밸런서를 사용하지 않고도 간단하게 구현할 수 있는 방법임.
     * 브라우저와 클라이언트의 서버 선택 방식은 다양하며, 특히 Safari는 가장 가까운 서버를 잘 선택함.
     * Cloudflare의 경우 오프라인 서버를 감지하지 못하는 문제점이 있으며, 이는 개선이 필요함.
     * 이 글은 라운드 로빈 DNS의 작동 방식을 이해하는 데 유용하며, 서버 선택 알고리듬의 차이를 탐구하는 데 흥미로울 수 있음.

        Hacker News 의견

     * DNS 팀에게 현재 상황에 대한 설명을 요청했으며, 답변을 받으면 공유할 예정임. 코드가 자주 변경되어 현재 상황을 정확히 알기 어려움. 클라이언트 IP와 백엔드 서버 간의 연결 유지가 문제의 원인일 수 있음.
     * DNS 로드 밸런싱은 복잡한 문제를 야기할 수 있음. golang HTTP2 클라이언트가 RR DNS를 사용할 때 문제가 발생할 수 있음. 클라이언트가 새로운 서버를 발견하지 못하는 경우가 있음.
          + 모든 백엔드 서버가 다운되면 클라이언트는 첫 번째로 연결된 서버에 고정되어 다른 서버로 이동하지 않음.
          + grpc-go에서도 유사한 문제가 발생하며, 서버 측에서 MAX_CONNECTION_AGE를 설정하여 주기적으로 클라이언트를 연결 해제할 수 있음.
     * 서비스 발견을 위한 표준 솔루션이 부족함. 요청 기반 로드 밸런서를 구현하고 가상 IP를 사용하여 로드 밸런서가 상태 검사를 수행하도록 하는 것이 최선의 방법일 수 있음.
     * SRV DNS 레코드는 모든 서비스에 우선순위를 지정할 수 있는 초기 솔루션이었으나, 정치적 이유로 HTTP 클라이언트에서 사용되지 않음. 새로운 HTTPS 및 SVCB DNS 레코드가 로드 밸런싱을 위한 새로운 솔루션으로 제안됨.
     * 서버가 오프라인일 때 클라이언트는 연결이 거부되면 다음 IP로 이동함. 그러나 실제로는 서버가 응답하지 않거나 연결 후 침묵할 수 있음. 클라이언트 타임아웃에 의존하게 됨.
     * 클라이언트 측에서 신뢰성이 결정됨. 일부 시스템은 항상 가장 낮은 IP 주소를 반환하여 문제가 발생할 수 있음. DNS-RR은 로드 밸런서가 아니며, 로드 밸런서가 더 나은 솔루션임.
     * Perl로 디코더를 작성했으며, 모든 것이 Perl로 되어야 한다고 주장함.
     * RR-DNS는 로드 밸런싱에만 유용하며, 자동으로 서버 가용성을 감지하지 않음. 클라이언트에 스마트 기능을 추가해야 함.
     * 서버가 다운되면 전 세계적으로 분산된 IP 주소가 있어 사람들이 계속 접속할 수 있음.
     * 2000년대 Amazon에서는 온사이트 호스트에 대해 라운드 로빈 DNS를 사용했음. 당시에는 가장 빠른 로드 밸런싱 방법이었음. 그러나 와이파이가 가장 큰 병목 현상이었음.
     * Cloudflare Load Balancing에 대한 언급이 있지만, 실제 테스트는 하지 않음. Cloudflare는 오프라인 서버를 자동으로 감지하고 다른 서버로 전환할 수 있음.
"
"https://news.hada.io/topic?id=17457","중국의 문자 기억 상실 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            중국의 문자 기억 상실 현상

중국에서의 문자 기억 상실

     * 중국어 문자와 문맹 문제
          + 중국어 문자는 세계에서 가장 오래된 문자 체계 중 하나로, 중국의 역사, 철학, 예술과 깊이 연관되어 있음
          + 수천 개의 문자를 기억해야 하는 부담 때문에 중국의 문맹률은 오랫동안 낮았음
          + 문자 개혁의 필요성이 제기되었으나, 문자 폐지 대신 간체자 도입으로 간소화가 이루어짐
     * 사이버 공간에서의 중국어 문자
          + 인터넷과 디지털 환경의 발전으로 중국어 문자 입력이 쉬워졌음
          + 핀인 입력 방식과 음성 인식 기술 덕분에 디지털 기기에서 문자 입력이 용이해짐
          + 그러나 이러한 기술 발전은 문자 기억 상실 문제를 초래함
     * 문자 기억 상실의 원인
          + 중국어 문자는 음성 정보를 제공하지 않기 때문에, 발음과 문자의 연관성이 약함
          + 알파벳 언어와 달리, 중국어 문자는 발음과 문자를 연결하는 '선순환'이 부족함
          + 디지털 입력 방식은 핀인 철자만 강화하고, 문자 형태는 강화하지 않음
     * 교육 시스템의 역할
          + 문자 기억 상실 문제를 해결하기 위해 교육 시스템이 노력하고 있으나, 효과는 미미함
          + 학생들은 문자 기억 상실을 가벼운 불편으로 여기고, 모바일 기기를 통해 쉽게 해결함
          + 정부는 문자 쓰기를 재미있게 만들기 위해 텔레비전 프로그램을 활용함

GN⁺의 정리

     * 중국에서의 문자 기억 상실 문제는 디지털 시대의 기술 발전과 관련이 깊음
     * 문자 기억 상실은 문맹과는 다르며, 문자 인식 능력에는 영향을 미치지 않음
     * 디지털 기술은 문제의 원인이자 해결책으로 작용하며, 문화적 전통의 상실을 초래할 수 있음
     * 유사한 기능을 가진 프로젝트로는 일본의 히라가나와 가타카나 교육 프로그램이 있음

        Hacker News 의견

     * 중국어와 일본어의 문자 체계는 수천 개의 문자로 구성되어 있으며, 이는 많은 획으로 이루어져 있음. 이러한 문자 체계는 기억하기 어려울 수 있음.
          + 동아시아 사람들은 평균적으로 높은 IQ를 가지고 있지만, 인간의 기억력에는 한계가 있음.
          + 실제로 문자를 손으로 쓰는 빈도가 줄어들면서 많은 문자를 잊어버리는 것은 자연스러운 현상임.
     * 문자 체계는 언어의 본질적인 부분이 아니라 유용한 도구일 뿐임.
          + 한국은 한자를 거의 완전히 제거했지만, 큰 문제 없이 언어를 사용하고 있음.
          + 문자 체계의 안정성이 떨어지는 것은 큰 문제가 아님.
     * 중국어 사용자는 점점 손으로 문자를 쓰는 방법을 잊어가고 있음.
          + 이는 영어에서 특정 단어의 철자를 잊어버리는 것과 유사한 문제임.
     * 마오쩌둥과 중국 공산당은 한때 핀인을 국가의 알파벳으로 채택하려 했으나, 결국 실행하지 않음.
          + 중국어의 문자 수가 많아 비핵심 요소를 잃을 가능성이 큼.
     * 대만에서 전통 중국어를 사용하는 사람들도 많은 문자를 손으로 쓸 수 없음.
          + 외국에서 공부한 후 중국어 문자를 거의 잊었지만, 다시 대만으로 돌아와 대부분의 문자를 빠르게 기억해냄.
     * 베트남어는 완전히 라틴 문자로 개편되어, 발음과 철자 간의 일관성이 높음.
          + 베트남에서는 철자법 대회가 필요 없을 정도로 철자가 쉬움.
     * 음악의 일부를 듣고 곡명을 기억하는 것과 문자를 기억하는 것이 유사함.
          + 문자의 일부는 기억하지만 나머지는 기억하지 못하는 경우가 많음.
     * Heisig 방법은 중국어 문자를 패턴으로 분해하여 기억하는 방법으로, 외국인 학습자에게 유용함.
          + 이 방법은 중국어와 일본어의 원어민에게도 도움이 될 수 있음.
     * 기사의 내용은 문자를 약간 잘못 쓰는 것과 전혀 기억하지 못하는 것을 혼동하고 있음.
          + ""문자 기억 상실""이 사소한 오류를 설명하는 것인지, 아니면 사람들이 문자를 상당히 잊어버리는 것인지에 대한 의문이 있음.
"
"https://news.hada.io/topic?id=17433","인간에서 처음으로 확인된 뇌의 노폐물 제거 림프계 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    인간에서 처음으로 확인된 뇌의 노폐물 제거 림프계 시스템

    뇌의 폐기물 제거 시스템이 사람에게서 처음으로 확인됨

     * 개요
          + 다섯 명의 자원자를 대상으로 한 연구에서 뇌의 폐기물 제거를 돕는 채널의 존재가 확인됨.
          + 이 결과는 글림프 시스템의 기능을 향상시키기 위한 지속적인 연구의 중요성을 강조함.
     * 글림프 시스템의 중요성
          + 림프계는 신체의 혈관만큼 건강에 중요하며, 죽은 세포와 기타 폐기물을 혈류에서 제거함.
          + 과거에는 림프계가 뇌에 도달하지 않는다고 여겨졌으나, 최근 연구에서 뇌 조직 내 뇌척수액을 포함한 혈관 시스템이 발견됨.
          + 이 시스템은 뇌에서 독소를 제거하는 데 도움을 줄 수 있음.
     * 연구 방법
          + NIH의 일부 자금 지원을 받은 연구에서, 오리건 건강과학대학의 Juan Piantino 박사가 이끄는 연구팀은 뇌종양 제거 수술이 필요한 다섯 명의 자원자를 모집함.
          + 수술 중 자원자들에게 뇌척수액에 가돌리늄이라는 염료를 주입하고, MRI 스캔을 통해 염료의 이동을 추적함.
     * 연구 결과
          + MRI 스캔 결과, 뇌의 혈관을 따라 흐르는 뇌척수액이 뚜렷한 채널을 통해 뇌로 유입됨을 확인함.
          + 이 결과는 이전에 쥐에서 관찰된 영상 결과와 일치함.
          + 염료가 이러한 공간에서 뇌의 기능적 조직으로 이동하는 것도 관찰됨.
     * 글림프 시스템과 수면
          + 글림프 시스템은 수면 중 가장 활발할 수 있으며, 이 시스템을 강화하거나 수리하는 노력이 중요함을 시사함.
          + 알츠하이머병 및 기타 치매 위험이 있는 사람들의 수면 질을 개선하는 것이 중요함.

    GN⁺의 정리

     * 이 연구는 뇌의 글림프 시스템이 사람에게서 처음으로 확인되었다는 점에서 중요한 의미가 있음.
     * 글림프 시스템의 기능을 향상시키는 연구는 알츠하이머병과 같은 인지 장애 예방에 기여할 수 있음.
     * 수면의 질이 글림프 시스템의 기능에 영향을 미칠 수 있다는 점에서 수면 개선의 중요성을 강조함.
     * 유사한 기능을 가진 산업 내 다른 프로젝트로는 뇌의 림프계 연구가 있음.

        Hacker News 의견

     * 특정 이미지 패턴을 사용하여 깨어있는 동안 이 과정을 유도할 수 있는 연구가 있었음. NIH의 확인은 과학에서 뒤처져 있으며 독립적인 연구가 훨씬 앞서 있음. 작년에 이 논문을 발견하고 그들이 사용한 매개변수로 간단한 페이지를 구현했음
          + 몇몇 질병 모델은 글림파틱 청소가 감소하거나 없음을 보여주며, 이러한 사람들은 뇌를 청소하기 위한 치료가 필요함. 이러한 이미지 루틴이 도움이 되는 것 같음
          + 많은 사람들이 이 패턴을 보는 것이 매우 힘들다고 느끼며, 특히 권장되는 주기 수를 지킬 때 뇌에 미치는 영향을 느낄 수 있음. 처음에는 머리를 맞은 것 같은 느낌이 들 수 있음
          + 이 연구는 Long Covid와 ME/CFS와 관련이 있어 흥미로움
     * 글림파틱 시스템은 수면 중에 가장 활발할 수 있다는 연구가 있음. 올바른 수면 자세도 관련이 있음. 어떤 과학자가 영장류의 자연 수면 자세를 연구했으며, 이 자세가 뇌척수액이 뇌의 노폐물을 배출하는 경로를 열어줌
     * 쥐에서 ""이것이 존재한다""는 것을 알게 된 지 12년 만에 ""인간에게도 실제로 존재하며 흔적이 아니다""라는 것을 알게 되었음. 시간이 오래 걸린 것 같음. 사람들이 항상 대비 MRI를 받는데, 왜 이것이 나타나지 않았을까? 아무도 찾지 않았기 때문일까? 아니면 느린 메커니즘 때문일까?
     * 흥미로움 - 빈도-반응 가설이 무엇일까? 림프 배액을 매일 하고 싶지는 않을 것 같음, 시스템에 문제가 없다면
     * 과학의 느리고 느리고 느린 빙하 같은 속도와 정보 분배 메커니즘이 얼마나 단편화되어 있는지를 보여줌
"
"https://news.hada.io/topic?id=17441","정확도 0.05mm 6축 로봇 비결 (2021) [영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    정확도 0.05mm 6축 로봇 비결 (2021) [영상]
"
"https://news.hada.io/topic?id=17418","메타, 속도 향상 및 메모리 사용량 감소된 양자화(Quantized) Llama 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           메타, 속도 향상 및 메모리 사용량 감소된 양자화(Quantized) Llama 모델 공개

     * Meta는 모바일 기기에서 실행 가능한 경량화된 양자화 Llama 모델을 출시
     * 8K 이하의 짧은 컨텍스트 애플리케이션에 맞춤
     * 양자화된 모델은 2-4배의 속도 향상과 56%의 모델 크기 감소, 41%의 메모리 사용량 감소를 달성함.
     * 양자화 기법
          + Llama 3.2 1B 및 3B 모델에 대해 Quantization-Aware Training(QAT)과 SpinQuant 기법을 사용함.
          + QAT는 정확성을, SpinQuant는 이식성을 우선시함.
          + PyTorch의 ExecuTorch 프레임워크를 통해 두 양자화 기법을 지원함.
     * 모바일 기기 최적화
          + Qualcomm과 MediaTek SoC에서 실행 가능하도록 설계됨.
          + Android OnePlus 12 모델에서 테스트 결과, 모델 크기와 메모리 사용량이 크게 감소함.
          + 모바일 CPU와 NPU를 활용하여 성능을 최적화함.
     * 양자화 설정
          + PyTorch의 ExecuTorch 추론 프레임워크와 Arm CPU 백엔드를 고려하여 설계됨.
          + 모든 선형 레이어를 4비트 그룹 단위로 양자화하고, 활성화는 8비트 동적 양자화를 사용함.
     * 양자화 인식 훈련(QAT)과 LoRA
          + Llama 3.2 모델의 훈련 중 양자화 효과를 시뮬레이션하는 QAT를 사용하여 저정밀 환경에서의 성능 최적화
          + QAT 초기화를 위해 BF16 Llama 3.2 모델 체크포인트를 활용하고 QAT로 추가 SFT 훈련을 수행
          + QAT 모델의 백본을 고정하고 LoRA 어댑터를 적용한 채 SFT를 한 번 더 수행
          + torchao API를 사용하여 QAT를 수행함
     * SpinQuant
          + QAT + LoRA보다 덜 정확하지만, 데이터셋 접근 없이도 작동 가능하여 이식성이 뛰어남.
          + 다양한 하드웨어 타겟과 사용 사례에 맞춰 모델을 양자화할 수 있음.
     * 결과
          + QLoRA 방식이 모든 면에서 가장 우수한 품질을 보임
          + BF16 대비 디코드 지연 시간은 평균 2.5배, 프리필 지연 시간은 4.2배 개선됨
          + 모델 크기는 평균 56% 감소, 메모리 사용량은 41% 감소함
          + Android OnePlus 12 기기에서 측정되었으며, iOS 기기에서는 정확도는 유사하나 성능은 평가되지 않음

GN⁺의 정리

     * Meta의 양자화된 Llama 모델은 모바일 기기에서의 실행을 위한 경량화와 성능 최적화를 목표로 함
     * QAT와 SpinQuant 기법을 통해 정확성과 이식성을 모두 고려한 양자화 모델을 제공함
     * 모바일 CPU와 NPU를 활용하여 성능을 극대화하며, 다양한 하드웨어에서의 사용을 지원함
     * 다양한 모바일 플랫폼과 협력사들과의 긴밀한 협업을 통해 실제 제품에 적용 가능한 수준의 솔루션을 제공한 것으로 보임
     * 메타의 Llama 모델은 개방성, 수정 가능성, 비용 효율성 측면에서 경쟁력이 있다고 평가받고 있으며, 지속적인 혁신을 통해 모바일에서의 강력한 AI 경험을 제공할 것으로 기대됨
"
"https://news.hada.io/topic?id=17393","구글 북스의 비극구글 북스의 비극 (2017)

     * 현대의 알렉산드리아 도서관을 불태우다
          + Google에는 2,500만 권의 책을 포함한 데이터베이스가 존재하지만, 아무도 이를 읽을 수 없는 상황임.
          + 과거에는 거의 모든 출판된 책의 전체 텍스트에 한 번의 클릭으로 접근할 수 있는 계획이 있었음. 인쇄 중인 책은 유료였지만, 그 외의 모든 책은 무료로 제공될 예정이었음.
          + 이 계획은 미국 의회 도서관, 하버드, 미시간 대학교, 유럽의 주요 국립 도서관보다 더 큰 컬렉션을 목표로 했으며, 모든 지역 도서관에 터미널을 설치하여 제공될 예정이었음.
          + 터미널을 통해 수천만 권의 책을 검색하고, 원하는 책의 모든 페이지를 읽을 수 있었으며, 구절을 강조 표시하고 주석을 달고 공유할 수 있었음.
          + 이는 오랫동안 꿈꿔왔던 '보편 도서관'의 실현이었음. 옥스퍼드의 Bodleian Libraries 책임자인 Richard Ovenden는 ""르네상스 시대에는 출판된 모든 지식을 한 방이나 한 기관에 모을 수 있을 것이라고 생각할 수 있었다""고 말했음.

GN⁺의 정리

     * 이 기사에서는 Google의 방대한 도서 데이터베이스와 그 접근성 문제를 다루고 있음.
     * 디지털 시대에 모든 책을 즉시 검색하고 접근할 수 있는 보편 도서관의 꿈이 어떻게 실현되지 못했는지를 설명함.
     * 이는 정보의 자유로운 접근과 공유의 중요성을 강조하며, 현대 사회에서 정보의 독점이 가져올 수 있는 문제를 제기함.
     * 유사한 기능을 가진 프로젝트로는 Internet Archive와 Project Gutenberg가 있음.

        Hacker News 의견

     * Google Books와 HathiTrust의 비교에 대한 의견
          + HathiTrust는 공공 도메인에 속한 책을 읽을 수 있는 더 나은 접근성을 제공함
          + Google Books는 검색 도구가 빠르고 유용하여, 검색 후 HathiTrust에서 책을 읽는 방법이 유용함
     * Dan Clancy와 Authors' Guild 협상에 대한 경험
          + Google의 프로젝트 리더 Dan Clancy는 Authors' Guild 협상에 대해 열정적이었음
          + Brewster Kahle가 Authors' Guild 합의에 반대하여 실망했음
          + Kahle의 반대가 잘못되었다고 생각하며, 하나의 고아 작품 클리어링하우스가 더 많은 도서관에 접근을 허용했을 것이라고 주장함
     * Library of Congress의 디지털 보존 프로젝트 경험
          + 2001-2003년 동안 Library of Congress에서 디지털 보존 프로젝트에 참여했음
          + 다양한 역사적 미디어를 다루며, 미디어의 취약성과 하드웨어 설정의 중요성을 강조함
     * Larry Page의 디지털 도서관 아이디어
          + Larry Page는 1996년에 디지털 도서관을 위한 기술 개발을 목표로 했음
          + 모든 책이 디지털화되면 인용을 통해 더 나은 검색 결과를 제공할 수 있을 것이라고 생각했음
     * O'Reilly의 창립자 저작권 및 Creative Commons 사용
          + O'Reilly는 창립자 저작권과 Creative Commons를 사용하여 절판된 책을 무료로 제공하려고 함
     * Anna's Archive에 대한 언급
          + 이미 스캔된 책을 위한 Anna's Archive가 존재함
     * 지식의 운명에 대한 비판적 견해
          + 지식이 수집되고 성장해야 할 기관들이 벽으로 둘러싸인 정원처럼 변했다고 비판함
          + 새로운 것들이 과거의 위대한 것들과 비교하지 않기 위해 망각이 필요하다고 주장함
     * Library Genesis와 Google Books의 비교
          + Library Genesis를 통해 Google Books의 필요성이 줄어들었음
          + 실제 책을 구매하여 작가를 지원하고, 전자책을 다운로드하여 읽는 방식을 선호함
     * HathiTrust의 데이터 크롤링 및 인덱스 생성
          + HathiTrust의 데이터 크롤링 및 인덱스 생성에 대한 연구가 진행 중임
          + 저작권 문제에 대해 매우 신중하게 접근하고 있음
     * 저작권 기간 단축법 필요성
          + 저작권 기간을 50년으로 줄이는 법안이 필요하다고 주장함
"
"https://news.hada.io/topic?id=17446","범주론 삽화: 논리범주론 삽화: 논리 (2021)

논리

  논리란 무엇인가

     * 논리는 가능한 것의 과학이며, 모든 다른 과학의 근본임.
     * 과학이 우주가 어떻게 작동하는지를 설명한다면, 논리는 어떤 우주에도 적용될 수 있는 설명의 일부임.
     * 논리는 한 가지 사실을 알면 다른 사실이 참임을 결론짓는 규칙을 연구함.

  논리와 수학

     * 논리는 집합론 및 범주론과 유사하며, 수학적 이론은 논리에 추가 정의를 더한 것임.
     * 집합론은 논리의 표준 공리에 하나의 원시 관계를 추가하여 정의될 수 있음.

  기본 명제

     * 논리는 가능한 것의 과학이므로, 참 또는 거짓으로 받아들여지는 초기 명제 집합이 필요함.
     * 이러한 명제는 ""전제"", ""기본 명제"" 또는 ""원자 명제""라고 불림.

  명제 구성

     * 논리의 핵심은 구성의 개념이며, 여러 명제를 논리 연산자를 사용하여 결합할 수 있음.
     * 논리 연산자는 ""그리고"", ""또는"", ""따라서"" 등을 포함함.

  기본 명제와 복합 명제의 동등성

     * 여러 전제로 구성된 명제는 기본 명제와 다르지 않으며 동일한 방식으로 구성됨.

  모순 논법

     * 모순 논법은 가장 오래된 논리 명제 중 하나로, A가 참이고 A가 B를 함의하면 B도 참임을 나타냄.

  자명한 진리

     * 자명한 진리는 항상 참인 명제이며, 그 반대는 항상 거짓인 모순임.
     * 자명한 진리는 공리 도식/추론 규칙의 기초로 사용됨.

  논리 시스템

     * 공리 도식/추론 규칙을 사용하여 새로운 명제를 생성할 수 있음.
     * 논리 시스템은 이러한 도식/규칙의 작은 컬렉션으로 구성됨.

  결론

     * 논리의 주요 구성 요소(공리, 추론 규칙)를 이해하기 위해 특정 해석을 통해 증명해야 함.

  고전 논리: 진리 기능적 해석

     * 고전 논리는 플라톤의 이데아 이론에 기반하며, 모든 명제는 참 또는 거짓임.
     * 논리 연산자는 불리언 값을 입력으로 받아 다른 불리언 값을 반환하는 함수로 표현됨.

  직관주의 논리: BHK 해석

     * 직관주의 논리는 증명을 구성하는 것으로 간주하며, 모든 명제가 참 또는 거짓이라는 이분법을 거부함.
     * BHK 해석에서는 명제가 참이라는 것은 그에 대한 증명이 존재한다는 것을 의미함.

  논리를 범주로 해석

     * BHK 해석은 논리를 범주 이론을 기반으로 해석할 수 있는 고차원적 관점을 제공함.
     * Curry-Howard 동형은 논리와 프로그래밍 언어 간의 유사성을 설명함.

  GN⁺의 정리

     * 논리는 수학과 과학의 근본적인 부분으로, 다양한 분야에서 중요한 역할을 함.
     * 고전 논리와 직관주의 논리는 서로 다른 철학적 배경을 가지고 있으며, 각각의 해석에 따라 다른 결과를 초래할 수 있음.
     * 논리 시스템은 공리와 추론 규칙을 통해 새로운 명제를 생성할 수 있는 강력한 도구임.
     * 논리의 해석은 범주 이론과 연결될 수 있으며, 이는 프로그래밍 언어와의 유사성을 통해 더욱 흥미로움.
"
"https://news.hada.io/topic?id=17356","AI 탐지기 효과 있나? 학생들, 부당한 부정행위 혐의 직면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AI 탐지기 효과 있나? 학생들, 부당한 부정행위 혐의 직면

학생들을 부정행위로 잘못 비난하는 AI 탐지기 - 큰 결과를 가져옴

     * 교사의 약 3분의 2가 AI로 생성된 콘텐츠를 탐지하기 위한 도구를 정기적으로 사용한다고 보고함. 이 정도 규모에서는 작은 오류율도 빠르게 누적될 수 있음.

Moira Olmsted의 사례

     * 팬데믹 초기 대학을 잠시 쉬고 가족을 시작하기 위해 휴학했던 Moira Olmsted는 학교로 돌아가기를 간절히 원했음.
     * 2023년 Central Methodist University의 온라인 강좌에 등록했지만, 제출한 과제물이 AI 탐지 도구에 의해 AI가 생성했을 가능성이 있다고 판단되어 0점을 받음.
     * Olmsted는 자폐 스펙트럼 장애가 있어 공식적인 방식으로 글을 쓰기 때문에 AI가 생성한 것으로 오인될 수 있다고 주장했음.
     * 성적은 결국 변경되었지만, 다시 지적될 경우 표절과 동일하게 처리하겠다는 엄중한 경고를 받음.

AI 작문 탐지기의 정확성 문제

     * 최고의 AI 작문 탐지기는 매우 정확하지만 완벽하지는 않음.
     * Businessweek은 GPTZero와 Copyleaks를 ChatGPT 출시 직전에 제출된 500개의 대학 지원 에세이 샘플로 테스트했음.
     * 이 서비스들은 에세이의 1~2%를 AI가 작성했을 가능성이 있다고 잘못 지적했음.
     * 오탐지된 학생들은 신경다양성, 제2 언어로서의 영어 사용자, 단순한 어휘와 기계적 스타일을 사용하도록 배운 사람들일 가능성이 높음.
     * AI 탐지 서비스는 때때로 AI 작문을 인간의 것으로 위장하도록 설계된 자동화 도구에 의해 속을 수 있음.

Ken Sahib의 사례

     * 이탈리아에서 대부분의 어린 시절을 보낸 다국어 학생 Ken Sahib는 Berkeley College에서 네트워킹 강좌의 독서 요약 과제물에 0점을 받았을 때 ""압도적""이었다고 말함.
     * 교수는 모든 도구가 같은 결과를 냈다며 AI가 생성했다고 주장했음.
     * Sahib는 결국 수업을 통과했지만, 이 사건으로 교수와의 관계가 악화되었음.

AI 탐지기 사용에 따른 문제점

     * 일부 교육자들은 AI 탐지기에서 물러서고 교육 과정에 AI를 통합하려 노력하고 있지만, 여전히 많은 대학과 고등학교에서 이 도구를 사용하고 있음.
     * 이로 인해 교실에는 거짓 혐의에 대한 불안감과 편집증이 만연함.
     * 학부생들은 자신의 작업의 진실성을 방어하기 위해 많은 시간을 소비하는 노력을 기울이고 있으며, 이는 학습 경험을 저하시킨다고 말함.
     * 학생들을 대상으로 특별히 마케팅되는 일반적인 AI 작문 지원 서비스와 문법 검사기 사용을 두려워하기도 함.

AI 탐지 스타트업

     * AI 작문 탐지기는 일반적으로 제출물의 단어 복잡성을 측정하는 perplexity를 살펴봄.
     * AI 탐지 기업들은 자사 서비스를 판사, 배심원, 집행자로 취급해서는 안 되며, 교사를 안내하고 정보를 제공하는 데이터 포인트로 사용해야 한다고 강조함.
     * Copyleaks는 학생들에게 서비스에 대한 액세스 권한을 부여하여 자신의 AI 점수를 볼 수 있도록 하고 있음.
     * Turnitin은 학생들이 작문 과제를 어떻게 구성했는지 과정을 보여줄 수 있도록 돕는 서비스로 AI 제품 포트폴리오를 확장하고 있음.

학생들의 대처 방안

     * 지적받은 후 Olmsted는 또 다른 비난을 피하기 위해 집착하게 되었음. 노트북에서 글쓰기 과제를 하는 자신을 화면 녹화하고 Google Docs에서 작업하여 변경 사항을 추적하고 디지털 종이 트레일을 만들었음.
     * UC San Diego의 화학공학과 3학년인 Nathan Mendoza는 GPTZero를 사용하여 자신의 작업물을 사전 검사함. AI 탐지기에 잘못 지적되지 않도록 표현을 수정하는 데 대부분의 시간을 소비한다고 말함.
     * 다른 학생들은 AI 탐지기를 통과하기 위해 제출물을 자동으로 다시 작성할 수 있는 ""AI 인간화"" 서비스를 사용하여 이 프로세스를 가속화했음.

""AI 인간화"" 서비스

     * Bloomberg의 Hix Bypass 테스트에 따르면, GPTZero가 98.1%가 AI라고 잘못 말한 인간이 작성한 에세이가 이 서비스에 의해 변경된 후 AI 비율이 5.3%로 크게 감소했음.

Grammarly 등 작문 지원 도구 사용의 문제

     * 학생들은 Grammarly와 같은 인기 있는 온라인 작문 지원 도구 사용을 재고하게 되었음.
     * Bloomberg은 Grammarly를 사용하여 에세이를 ""개선""하거나 ""학술적으로 들리게"" 하면 100% 인간이 작성한 것으로 통과한 작업이 100% AI가 작성한 것으로 바뀐다는 것을 발견함.
     * Florida SouthWestern State College의 Kaitlyn Abellar는 Grammarly 등의 프로그램에 대한 플러그인을 컴퓨터에서 제거했다고 말함.

지속 가능하지 않은 현재 시스템

     * 일부 교육자와 학생들에게 현재 시스템은 교사 책상 양쪽에 가하는 부담과 AI가 계속 존재할 것이기 때문에 지속 가능하지 않은 것으로 느껴짐.
     * University of Maryland의 영어 교수인 Adam Lloyd는 ""인공지능은 우리가 좋아하든 싫어하든 미래의 일부가 될 것""이라며 ""AI를 교실에서 격리시키거나 학생들이 사용하지 않도록 하는 것은 잘못된 생각""이라고 말함.

GN⁺의 의견

     * AI 탐지 도구의 오탐지 문제는 특히 신경다양성, 영어 학습자, 단순한 문체를 사용하는 학생들에게 심각한 영향을 미칠 수 있음. 교육 기관은 이러한 학생 그룹을 배려하여 AI 탐지 결과를 신중하게 해석해야 함.
     * AI 탐지기와 AI 인간화 서비스 간의 군비 경쟁은 교육자와 학생 사이의 신뢰를 손상시키고 교육적 이점은 거의 없음. 교육 과정에 AI를 통합하는 방안을 모색하는 것이 장기적으로 더 나은 접근 방식이 될 수 있음.
     * 학생들의 작문 능력 향상을 위해 Grammarly 등의 도구 사용을 금지하기보다는, 이를 교육적으로 활용하는 방안을 고려해 볼 필요가 있음. 예를 들어 교사가 직접 추천하는 도구 목록을 제공하거나 바람직한 사용 방법을 안내할 수 있음.
     * Copyleaks, Turnitin 등 AI 탐지 기업들이 학생 친화적인 서비스를 개발하려 노력하는 것은 긍정적인 변화임. 하지만 이러한 도구에 과도하게 의존하기보다는 학생과의 개방적인 소통을 통해 의심스러운 사례를 다루는 것이 바람직함.
     * AI와 인간의 공존이 불가피한 미래를 준비하기 위해서는, 학생들에게 AI 도구의 윤리적 사용법을 교육하고 창의적이고 비판적인 사고 역량을 길러주는 것이 중요함. 이를 위해 교육 과정과 평가 방식의 혁신적 변화가 요구됨.

        Hacker News 의견

     * 30년간 고등 교육에서 수학을 가르친 경험을 바탕으로, 비대면 시험에서는 부정행위가 만연함. 기술을 사용하지 못하게 하고 대면 시험을 요구하는 것이 해결책이지만, 학생들이 수업에 등록하지 않을 것임. 고등 교육 위원회가 모든 수업에 대해 이를 의무화해야 한다고 생각함. 그러나 대면 시험만으로는 충분하지 않음. 학생들이 학습보다는 통과를 위한 작업에 익숙해져 있으며, 부정행위가 증가하고 있음. K-12 교육도 변화가 필요함.
     * AI가 지속될 것이므로 학생 성과를 평가하는 새로운 방법이 필요함. 과거에는 계산기를 사용할 수 없다는 이유로 시험에서 금지되었지만, 이제는 24/7 계산기를 사용할 수 있는 시대임. 변화에 적응하고 사회가 함께 대응 방법을 결정해야 함.
     * AI가 작업을 플래그한 이유를 학생에게 설명하지 않는 것이 문제임. 알고리즘이 정확히 왜 특정 작업을 플래그했는지 설명할 수 있어야 함. 현재 AI 기반 솔루션은 이를 설명할 수 없기 때문에 적절하지 않음.
     * 한 학생의 선생님이 모든 에세이를 AI 탐지 소프트웨어로 검사할 것이라고 경고했지만, 그 경고문 자체가 AI 생성물로 판명됨.
     * 대형 대학 병원에서 일하는 컨설턴트로서, ChatGPT를 사용해 영어를 더 간결하고 비즈니스적으로 수정함. AI 탐지기가 작동할 수 있지만, 철자 검사기만큼 유용하지 않음. AI는 대형 언어 모델일 뿐이며, 사실 모델이 아님. 교사는 좋은 허위 탐지자가 되어야 함.
     * AI 탐지가 100% 정확하지 않다면, 수백만 명의 학생과 젊은이의 미래를 판단하는 데 적절하지 않다고 믿음. 기술이나 에세이 형식에서 벗어나야 함. 주제에 대한 숙달 기준을 변경해야 함.
     * AI 생성 작업을 식별하는 것은 인간에게는 쉬울 수 있지만, 컴퓨터에 프로그래밍하는 것은 어려움. 이전 직장에서 표절 탐지기를 다루면서 그들이 얼마나 쉽게 속을 수 있는지 깨달음.
     * 교사가 LLM 탐지기를 사용하여 학생을 실패시키는 것은 모순적임. 교사는 학생이 과제를 이해하지 못했다고 비난하지만, 교사 자신도 도구의 결정을 이해하지 못하고 책임을 회피함.
     * 아이들의 학교에서 AI로 구동되는 무기 스캐너를 도입했지만, 학교에서 지급한 Lenovo 노트북을 무기로 인식함. AI 제품을 구매하고 신뢰하지만, 제대로 작동하지 않음.
     * 사람들이 알고리즘을 신뢰하게 된 것이 놀라움. 작동 원리를 모르고 설명할 수 없지만, 그냥 작동한다고 믿음. 부정행위로 판명되면, 아무것도 할 수 없음. 책임을 지지 않는 사람들이 많음. 과거에는 부정행위로 의심받았지만, 증명할 수 없으면 상관없었음. 그러나 이제는 증명할 필요가 없고, 시스템이 있다고 믿음.
"
"https://news.hada.io/topic?id=17361","암 치료를 위한 새로운 AI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           암 치료를 위한 새로운 AI 도구

     * 하버드 의과대학 과학자들이 여러 암 유형에 걸쳐 다양한 진단 작업을 수행할 수 있는 다재다능한 ChatGPT 같은 AI 모델을 설계함
     * 이 새로운 AI 시스템은 암 진단에 대한 현재의 많은 AI 접근 방식보다 한 단계 더 나아감
     * 현재 AI 시스템은 일반적으로 암 존재 감지 또는 종양의 유전자 프로파일 예측과 같은 특정 작업을 수행하도록 훈련되며, 소수의 암 유형에서만 작동하는 경향이 있음
     * 반면에 새로운 모델은 광범위한 작업을 수행할 수 있으며 19개의 암 유형에서 테스트되었고, ChatGPT와 같은 대형 언어 모델과 유사한 유연성을 가짐
     * 최근 병리 영상을 기반으로 의료 진단을 위한 다른 기반 AI 모델이 등장했지만, 이는 환자 결과를 예측하고 여러 국제 환자 그룹에서 검증한 최초의 모델로 여겨짐
     * 종양 조직 슬라이드 판독으로 작동하는 AI 모델
          + 암세포를 감지하고 영상에서 보이는 세포 특징을 기반으로 종양의 분자 프로파일을 대부분의 현재 AI 시스템보다 우수한 정확도로 예측함
          + 여러 암 유형에 걸쳐 환자 생존을 예측하고, 수술, 화학요법, 방사선 치료, 면역요법 등 표준 치료에 대한 환자 반응과 관련된 종양 주변 조직(종양 미세환경)의 특징을 정확하게 찾아냄
          + 환자 생존과 관련이 있다고 알려지지 않았던 특정 종양 특성을 식별하는 등 새로운 통찰력을 생성할 수 있는 것으로 보임
     * 연구팀은 이 결과가 표준 암 치료에 잘 반응하지 않을 수 있는 환자 식별을 포함하여 암을 효율적이고 정확하게 평가하는 임상의의 능력을 향상시킬 수 있다는 증거가 늘어나고 있다고 말함
     * Kun-Hsing Yu는 ""검증이 더 이루어지고 널리 배포된다면, 우리의 접근 방식과 유사한 접근 방식이 특정 분자 변이를 표적으로 하는 실험적 치료의 혜택을 받을 수 있는 암 환자를 조기에 식별할 수 있을 것""이라고 말함

훈련 및 성능

     * 이 팀의 최신 연구는 대장암과 뇌종양 평가를 위한 AI 시스템에 대한 Yu의 이전 연구를 기반으로 함. 이전 연구는 특정 암 유형 및 특정 작업 내에서 이 접근 방식의 실현 가능성을 입증함
     * CHIEF(Clinical Histopathology Imaging Evaluation Foundation)라고 불리는 새로운 모델은 1천5백만 개의 레이블이 없는 이미지를 관심 섹션으로 분할하여 훈련되었음
     * 이 도구는 폐, 유방, 전립선, 대장, 위, 식도, 신장, 뇌, 간, 갑상선, 췌장, 자궁경부, 자궁, 난소, 고환, 피부, 연조직, 부신, 방광을 포함한 조직의 60,000개 전체 슬라이드 이미지에 대해 추가로 훈련되었음
     * 이미지의 특정 섹션과 전체 이미지를 모두 보도록 모델을 훈련시킴으로써 한 영역의 특정 변화를 전체 맥락과 연관시킬 수 있었음. 연구자들은 이러한 접근 방식이 CHIEF가 특정 영역에만 집중하는 대신 더 넓은 맥락을 고려하여 이미지를 더 전체적으로 해석할 수 있게 했다고 말함
     * 훈련 후 연구팀은 전 세계 24개 병원과 환자 코호트에서 수집한 32개의 독립 데이터 세트에서 19,400개 이상의 전체 슬라이드 이미지에 대해 CHIEF의 성능을 테스트함
     * 전반적으로 CHIEF는 암세포 검출, 종양 기원 식별, 환자 결과 예측, 치료 반응과 관련된 유전자 및 DNA 패턴 식별 등의 작업에서 최대 36%까지 다른 최첨단 AI 방법을 능가하였음
     * CHIEF는 다양한 훈련 덕분에 종양 세포가 생검을 통해 얻어졌는지 아니면 수술적 절제를 통해 얻어졌는지에 관계없이 동등하게 잘 수행되었음
     * 또한 암세포 샘플을 디지털화하는 데 사용되는 기술에 관계없이 정확도가 동일했음
     * 연구자들은 이러한 적응력으로 인해 CHIEF가 다양한 임상 환경에서 사용할 수 있으며, 특정 기술을 통해 얻은 조직을 판독할 때만 잘 수행되는 경향이 있는 현재 모델을 넘어서는 중요한 단계를 나타낸다고 말함

  암 검출

     * CHIEF는 암 검출에서 거의 94%의 정확도를 달성했고 11개 암종을 포함한 15개 데이터셋에서 현재 AI 접근 방식을 크게 능가하였음
     * 독립적인 코호트에서 수집한 5개의 생검 데이터셋에서 CHIEF는 식도, 위, 대장, 전립선 등 여러 암종에 걸쳐 96%의 정확도를 달성하였음
     * 연구자들이 이전에 보지 못한 대장, 폐, 유방, 자궁내막, 자궁경부의 수술로 제거된 종양 슬라이드에서 CHIEF를 테스트했을 때, 모델은 90% 이상의 정확도로 수행되었음

  종양의 분자 프로파일 예측

     * 종양의 유전적 구성은 미래 행동과 최적의 치료법을 결정하는 중요한 단서를 제공함
     * 이 정보를 얻기 위해 종양학자들은 종양 샘플의 DNA 시퀀싱을 주문하지만, 전 세계적으로 암 조직의 이러한 상세한 유전체 프로파일링은 비용과 시간 때문에 정기적으로 또는 균일하게 이루어지지 않음
     * CHIEF는 현미경 슬라이드를 보고 종양의 유전체 변이를 예측하는 데 있어 현재의 AI 방법을 능가하였음
     * 이 새로운 AI 접근 방식은 암 성장 및 억제와 관련된 몇 가지 중요한 유전자와 관련된 특징을 성공적으로 식별했으며, 종양이 다양한 표준 치료에 얼마나 잘 반응할 수 있는지와 관련된 주요 유전적 변이를 예측하였음
     * CHIEF는 또한 대장 종양이 면역 관문 차단이라고 하는 면역요법의 한 형태에 얼마나 잘 반응할 수 있는지와 관련된 특정 DNA 패턴을 감지하였음
     * 전체 조직 이미지를 볼 때 CHIEF는 흔히 변이된 54개의 암 유전자에서 70% 이상의 전반적인 정확도로 변이를 식별하여 유전체 암 예측을 위한 현재 최첨단 AI 방법을 능가하였음. 특정 암 유형의 특정 유전자에 대한 정확도는 더 높았음
     * 연구팀은 또한 15개 해부학적 부위에 걸쳐 18개 유전자에 대해 FDA 승인 표적 치료에 대한 반응과 연관된 돌연변이를 예측하는 CHIEF의 능력을 테스트하였음. CHIEF는 미만성 거대 B세포 림프종이라는 혈액암에서 흔한 EZH2라는 유전자의 돌연변이 검출에서 96%, 갑상선암에서 BRAF 유전자 돌연변이에 대해 89%, 두경부암에서 NTRK1 유전자 돌연변이에 대해 91%의 정확도를 달성하는 등 여러 암 유형에서 높은 정확도를 달성하였음

  환자 생존 예측

     * CHIEF는 초기 진단 시 얻은 종양 조직병리학적 영상을 기반으로 환자 생존을 성공적으로 예측하였음
     * 모든 암 유형 및 연구 대상 환자군에서 CHIEF는 장기 생존 환자와 단기 생존 환자를 구별하였음
     * CHIEF는 다른 모델보다 8% 더 우수한 성능을 보였고, 진행성 암 환자에서는 다른 AI 모델보다 10% 더 우수한 성능을 보였음
     * CHIEF의 높은 사망 위험 대 낮은 사망 위험 예측 능력은 17개 다른 기관의 환자 샘플에서 테스트되고 확인되었음

  종양 행동에 대한 새로운 통찰력 추출

     * 이 모델은 종양 공격성 및 환자 생존과 관련된 이미지의 특징적인 패턴을 식별하였음
     * 이러한 관심 영역을 시각화하기 위해 CHIEF는 이미지에 열 지도를 생성하였음. 인간 병리학자들이 이러한 AI 파생 핫스팟을 분석했을 때, 그들은 암세포와 주변 조직 사이의 상호작용을 반영하는 흥미로운 신호를 보았음
     * 그러한 한 가지 특징은 단기 생존자에 비해 장기 생존자의 종양 영역에서 더 많은 수의 면역세포가 존재한다는 것이었음. Yu는 면역세포의 더 큰 존재는 면역 시스템이 종양을 공격하기 위해 활성화되었음을 나타낼 수 있기 때문에 이러한 발견이 타당하다고 지적함
     * 단기 생존자의 종양을 볼 때, CHIEF는 다양한 세포 구성 요소 간의 비정상적인 크기 비율, 세포 핵에서 더 많은 비정형적 특징, 세포 간의 약한 연결, 종양 주변 영역의 결합 조직 존재 감소 등으로 특징지어지는 관심 영역을 식별하였음. 이러한 종양에는 또한 주변에 더 많은 죽어가는 세포가 존재하였음. 예를 들어, 유방 종양에서 CHIEF는 조직 내 괴사(조기 세포 사망)의 존재를 관심 영역으로 지적하였음. 반대로 생존율이 높은 유방암은 건강한 조직과 유사한 세포 구조를 보존할 가능성이 더 높았음. 연구팀은 생존과 관련된 시각적 특징과 관심 영역은 암 유형에 따라 다양했다고 설명함

다음 단계

   연구자들은 다음과 같은 방법으로 CHIEF의 성능을 개선하고 기능을 확장할 계획이라고 말함:
     * 희귀 질환 및 비암성 조건의 조직 이미지에 대한 추가 훈련 수행
     * 세포가 완전히 암성이 되기 전의 전암성 조직의 샘플 포함
     * 공격성 수준이 다른 암을 식별하는 능력을 향상시키기 위해 모델을 더 많은 분자 데이터에 노출시키기
     * 표준 치료 외에도 새로운 암 치료의 이점과 부작용을 예측하도록 모델 훈련

GN⁺의 의견

     * 이 연구는 암 진단 및 치료 계획 수립을 위한 AI 기술의 발전을 보여주고 있음. 특히 여러 암종에 걸쳐 적용 가능한 범용 모델을 개발했다는 점에서 의미가 있음
     * 그러나 실제 임상 현장에 적용하기 위해서는 더 많은 데이터로 검증하고 의사와 AI가 효과적으로 협업할 수 있는 방안을 마련해야 할 것임. 진단의 정확성과 책임 소재 문제 등 해결해야 할 과제도 남아있음
     * 유사한 기술로는 병리 이미지 분석을 통해 암을 진단하는 Paige.AI, Proscia 등의 기업들이 있음. 이들은 특정 암종에 특화된 솔루션을 제공하고 있어 범용성 측면에서는 이 연구와 차별화됨
     * AI 기반 암 진단 기술 도입 시에는 의료진의 역할 변화, 진단 프로세스 개선, 의료 수가 조정 등 다양한 사회적 합의와 제도 정비가 필요할 것임. 동시에 AI 편향성 문제, 개인정보보호 이슈 등 기술적, 윤리적 리스크도 면밀히 검토해야 함
     * 향후 암 조직의 분자생물학적 특성까지 종합적으로 분석하고, 약물 반응성까지 예측할 수 있는 AI 기술이 개발된다면 정밀 의료 구현에 크게 기여할 수 있을 것으로 기대됨
"
"https://news.hada.io/topic?id=17347","분산 시스템 독서 목록분산 시스템 독서 목록 (2014)

분산 시스템 읽기 목록

  소개

     * 분산 시스템에서 가장 어려운 점은 사고 방식을 바꾸는 것임.
     * 이 목록은 그러한 변화를 촉진하는 데 유용한 자료를 모은 것임.

  사고를 자극하는 자료

     * 대규모 시스템 설계에 대한 새로운 관점을 제공하는 글 모음.
     * Harvest, Yield and Scalable Tolerant Systems: CAP 이론의 실제 응용.
     * On Designing and Deploying Internet Scale Services: 인터넷 규모 서비스 설계 및 배포.
     * The Perils of Good Abstractions: 완벽한 API/인터페이스 구축의 어려움.
     * Chaotic Perspectives: 대규모 시스템의 예측 불가능성과 병렬성.
     * Data on the Outside versus Data on the Inside: 데이터 관리의 두 가지 접근 방식.
     * Memories, Guesses and Apologies: 데이터 처리의 불확실성.
     * SOA and Newton's Universe: 서비스 지향 아키텍처의 철학적 접근.
     * Building on Quicksand: 불안정한 기반 위에 시스템 구축.
     * Why Distributed Computing?: 분산 컴퓨팅의 필요성.
     * A Note on Distributed Computing: 분산 컴퓨팅의 기본 개념.
     * Stevey's Google Platforms Rant: Google의 SOA 플랫폼 경험.

  지연 시간

     * 지연 시간의 존재와 그에 대한 대처 방법.
     * Latency Exists, Cope!: 지연 시간의 건축적 영향.
     * Latency - the new web performance bottleneck: 웹 성능의 새로운 병목 현상.
     * The Tail At Scale: 대규모 시스템에서의 지연 시간 문제.

  Amazon

     * 기술보다는 Amazon의 문화와 조직에 대한 흥미로운 내용.
     * A Conversation with Werner Vogels: 서비스 기반 아키텍처로의 전환.
     * Discipline and Focus: Amazon의 아키텍처 전환에 대한 추가 내용.
     * Vogels on Scalability: 확장성에 대한 Vogels의 견해.

  Google

     * 분산 시스템의 최신 기술.
     * MapReduce: 대규모 데이터 처리 모델.
     * Chubby Lock Manager: 분산 락 관리.
     * Google File System: 대규모 파일 시스템.
     * BigTable: 분산 스토리지 시스템.
     * Data Management for Internet-Scale Single-Sign-On: 대규모 싱글 사인온 데이터 관리.
     * Dremel: 웹 규모 데이터셋의 대화형 분석.
     * Large-scale Incremental Processing Using Distributed Transactions and Notifications: 분산 트랜잭션을 통한 대규모 증분 처리.
     * Megastore: 상호작용 서비스용 확장 가능하고 고가용성 스토리지.
     * Spanner: 글로벌 분산 데이터베이스.
     * Photon: 연속 데이터 스트림의 결합.
     * Mesa: 실시간 데이터 웨어하우징 시스템.

  일관성 모델

     * 시스템 설계에서 일관성과 가용성 간의 균형 찾기.
     * CAP Conjecture: 일관성, 가용성, 파티션 허용성의 상충 관계.
     * Consistency, Availability, and Convergence: 일관성의 상한선.
     * CAP Twelve Years Later: CAP 이론의 변화.
     * Consistency and Availability: 일관성과 가용성의 관계.
     * Eventual Consistency: 최종적 일관성.
     * Avoiding Two-Phase Commit: 2단계 커밋 회피 방법.
     * 2PC or not 2PC, Wherefore Art Thou XA?: 2단계 커밋의 한계.
     * Life Beyond Distributed Transactions: 분산 트랜잭션을 넘어선 데이터 관리.
     * If you have too much data, then 'good enough' is good enough: NoSQL과 데이터 이론의 미래.
     * Starbucks doesn't do two phase commit: 비동기 메커니즘.
     * You Can't Sacrifice Partition Tolerance: 파티션 허용성의 중요성.
     * Optimistic Replication: 느슨한 일관성 접근법.

  이론

     * 분산 시스템 설계의 중요한 요소를 설명하는 논문.
     * Distributed Computing Economics: 분산 컴퓨팅의 경제성.
     * Rules of Thumb in Data Engineering: 데이터 엔지니어링의 규칙.
     * Fallacies of Distributed Computing: 분산 컴퓨팅의 오류.
     * Impossibility of distributed consensus with one faulty process: FLP 이론.
     * Unreliable Failure Detectors for Reliable Distributed Systems: 신뢰할 수 있는 시스템을 위한 실패 감지기.
     * Lamport Clocks: 분산 시스템에서의 시간 동기화.
     * The Byzantine Generals Problem: 비잔틴 문제.
     * Lazy Replication: 분산 서비스의 의미론 활용.
     * Scalable Agreement: 서비스로서의 순서화.
     * Scalable Eventually Consistent Counters over Unreliable Networks: 불안정한 네트워크에서의 확장 가능한 카운터.

  언어와 도구

     * 특정 기술을 사용한 분산 시스템 구축 문제.
     * Programming Distributed Erlang Applications: Erlang과 OTP를 사용한 분산 애플리케이션 구축.

  인프라

     * 인터넷에서의 강력한 타이밍 관리 원칙.

  스토리지

     * Consistent Hashing and Random Trees: 일관된 해싱과 랜덤 트리.
     * Amazon's Dynamo Storage Service: Amazon의 스토리지 서비스.
     * Paxos Consensus: Paxos 알고리듬 이해.
     * The Part-Time Parliament: Paxos의 기초.
     * Paxos Made Simple: Paxos의 간단한 설명.
     * Paxos Made Live: Paxos의 엔지니어링 관점.
     * Revisiting the Paxos Algorithm: Paxos 알고리듬 재검토.
     * How to build a highly available system with consensus: 합의를 통한 고가용성 시스템 구축.
     * Reconfiguring a State Machine: 상태 머신의 재구성.
     * Implementing Fault-Tolerant Services Using the State Machine Approach: 상태 머신 접근법을 통한 내결함성 서비스 구현.

  기타 합의 논문

     * Mencius: WAN을 위한 효율적인 복제 상태 머신 구축.
     * In Search of an Understandable Consensus Algorithm: RAFT 알고리듬의 확장 버전.

  소문 프로토콜 (Epidemic Behaviours)

     * 소문 기반 통신 프로토콜의 강력함.
     * Astrolabe: 분산 시스템 모니터링 및 데이터 마이닝 기술.
     * Epidemic Computing at Cornell: 코넬 대학의 전염병 컴퓨팅.
     * Fighting Fire With Fire: 무작위 소문을 사용한 확장성 한계 극복.
     * Bi-Modal Multicast: 이중 모드 멀티캐스트.
     * ACM SIGOPS Operating Systems Review: 소문 기반 네트워킹.
     * SWIM: 확장 가능한 약한 일관성 감염 스타일 프로세스 그룹 멤버십 프로토콜.

  P2P

     * Chord: 인터넷 애플리케이션을 위한 확장 가능한 피어 투 피어 조회 프로토콜.
     * Kademlia: XOR 메트릭 기반의 피어 투 피어 정보 시스템.
     * Pastry: 대규모 피어 투 피어 시스템을 위한 분산 객체 위치 및 라우팅.
     * PAST: Pastry 위에 구축된 대규모 지속적 피어 투 피어 스토리지 유틸리티.
     * SCRIBE: Pastry 위에 구축된 대규모 분산 애플리케이션 레벨 멀티캐스트 인프라.

GN⁺의 정리

     * 분산 시스템은 복잡한 문제를 해결하기 위해 사고 방식을 변화시켜야 하는 분야임.
     * 다양한 자료와 논문을 통해 분산 시스템의 설계와 구현에 대한 깊은 이해를 제공함.
     * 이 목록은 분산 시스템의 다양한 측면을 다루며, 특히 일관성 모델과 지연 시간 문제에 대한 통찰을 제공함.
     * 분산 시스템에 관심 있는 개발자나 연구자에게 유용한 자료가 될 수 있음.
     * 유사한 기능을 가진 프로젝트로는 Apache Kafka, Apache Cassandra 등이 추천됨.
"
"https://news.hada.io/topic?id=17445","배틀쉽스 논리 퍼즐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               배틀쉽스 논리 퍼즐

     * BattleshipsMindless Podcast Companion
          + 퍼즐은 Battleship Logic Puzzle의 변형으로, Battleship Solitaire, Bimaru, Yubotu로도 알려져 있음
          + 다양한 크기의 배가 보드에 숨겨져 있으며, 퍼즐을 풀기 위해 모든 칸을 올바르게 채워야 함
          + 각 행과 열에 몇 개의 ""배 칸""이 있는지 숫자로 표시됨
          + 배는 대각선으로도 접촉할 수 없음
     * 전략 팁
          + 게임 중 막히면 다음 규칙/팁이 도움이 될 수 있음
          + Only-spots-left 규칙: 행에 예를 들어 3개의 배 칸이 필요하고 나머지가 물이라면, 나머지는 배가 되어야 함
          + The-rest-is-water 규칙: 마찬가지로, 행에 이미 필요한 수의 배가 있다면 나머지는 물임
          + Tip: 숫자를 클릭하여 물을 자동으로 채울 수 있음
          + Water-on-corners 규칙: 배 칸 주위의 모서리를 항상 물로 설정할 수 있음
          + Surround-whole-boats 규칙: 배의 위치를 알면 완전히 물로 둘러쌀 수 있음
          + Only-place-it-could-fit 규칙: 종종 가장 큰 배가 들어갈 수 있는 유일한 자리가 남아 있음
          + 모바일 기기에서 플레이 가능하며, 화장실에서 즐길 수 있음

GN⁺의 정리

     * BattleshipsMindless Podcast Companion은 퍼즐을 통해 논리적 사고를 자극하는 재미있는 활동을 제공함.
     * 이 퍼즐은 대중적인 Battleship 게임의 논리적 변형으로, 규칙을 통해 문제 해결 능력을 향상시킬 수 있음.
     * 이 사이트는 광고 없이 무료로 제공되어 사용자 경험을 방해하지 않음.
     * 유사한 기능을 가진 다른 퍼즐 게임으로는 Sudoku와 Kakuro가 추천됨.

        Hacker News 의견

     * Simon Tatham의 퍼즐을 추천하며, Android와 iPhone 포트도 광고 없이 훌륭함
     * Battleships 퍼즐은 NP-complete 문제로, 퍼즐 크기가 커질수록 다항 시간 내에 해결할 수 있는 알고리즘이 알려져 있지 않음
     * 모바일 친화적으로 만들어줘서 감사하며, 기존 사이트가 사용 불가해 직접 Android 버전을 만들 뻔했음
          + 왼쪽과 오른쪽 클릭의 기본 동작을 전환할 수 있는 설정이 필요함
     * 15x15 퍼즐이 6x6 퍼즐보다 더 쉽다고 느끼며, 15x15 퍼즐은 덜 빽빽하여 2차 논리를 덜 사용해도 됨
          + 중간 클릭으로 가능성을 표시하는 기능을 제안함
     * 이 퍼즐은 재미있는 노노그램 변형이며, 노노그램도 추천함
     * 노노그램 규칙을 잊는 데 시간이 걸렸지만, 이후로는 재미있었음
     * Bimaru 퍼즐은 재미있으며, Android 앱에 ""Battleships""라는 문구를 넣었다가 Hasbro의 저작권 클레임을 받고 앱이 삭제됨
          + 웹 버전으로 다시 작성하여 여전히 사용 가능함
     * 드래그 구현이 비슷한 엔진에 비해 불편함
          + 클릭 및 드래그는 수평 또는 수직으로만 작동해야 함
          + 이미 물로 채워진 셀은 드래그 시 덮어쓰지 않아야 함
          + Ctrl-Z와 U를 포함한 '되돌리기' 지원 필요
          + 메모를 위한 텍스트 박스를 제공하여 새로운 퍼즐 시작 시 초기화해야 함
     * Firefox Mobile에서 10x10 이상의 퍼즐이 작동하지 않으며, 터치 대상이 너무 작아 선택할 수 없음
          + 작은 크기에서는 잘 작동하며, 같은 기기의 Chrome에서는 문제 없음
     * ""무의미하다""는 표현보다는 ""언어 센터를 자극하지 않는다""는 표현이 더 정확하며, 공간 추론과 논리를 자극함
"
"https://news.hada.io/topic?id=17339","Syncthing 안드로이드 앱 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Syncthing 안드로이드 앱 중단

     * Syncthing의 안드로이드 앱이 중단될 예정임
     * 2024년 12월 Syncthing 버전과 함께 마지막 릴리스가 Github과 F-Droid에 게시될 예정임
     * 중단 이유
          + Google의 Play 스토어 게시가 매우 어렵거나 불가능해진 상황
          + 앱의 적극적인 유지보수가 이루어지지 않고 있음
          + 오랜 기간 동안 앱에 중요한 개발이 없었음
          + Play 스토어 릴리스가 없으면 유지보수에 대한 동기 부여가 부족함

GN⁺의 정리

     * Syncthing의 안드로이드 앱 중단은 Google Play 스토어의 게시 어려움과 유지보수 부족 때문임
     * 이 앱은 파일 동기화에 유용했으나, 더 이상 업데이트가 없을 예정임
     * 사용자는 대안으로 다른 파일 동기화 앱을 고려할 수 있음
     * 이 소식은 Syncthing 사용자들에게 중요한 변화로, 다른 플랫폼으로의 전환을 고려해야 할 필요가 있음

   Syncthing - 지속적 파일 동기화 오픈소스

        Hacker News 의견

     * Android 개발자로 일했던 경험을 바탕으로, Android의 지속적인 API 변화와 보안 문제로 인해 많은 개발자들이 Android 생태계를 떠나게 됨
          + 2014년에는 Storage Access Framework의 보안 취약점을 발견했으며, 이는 간단한 디렉토리 탐색 취약점이었음
          + Android는 오랫동안 앱 폴더에 세계 실행 권한을 부여하여 악성 앱이 다른 앱의 파일에 하드 링크를 생성할 수 있게 했음
          + Android의 보안 개선 노력은 긍정적이지만, 불안정한 기반 위에 구축되어 있어 지속적인 큰 변화가 필요함
     * Google과의 논의에서 구체적인 요구사항이 없어 Syncthing Android 개발에 어려움을 겪음
          + Google Play에 앱을 게시하는 것이 매우 어렵고, 동기화 앱의 개발 동기가 사라짐
     * Syncthing Android의 포크 버전이 GitHub에서 활발히 유지되고 있으며, 1.3K의 스타를 보유하고 있음
     * Google Play에 앱을 게시하는 것이 어렵다는 의견이 있으며, F-Droid를 통한 배포가 대안이 될 수 있음
     * Syncthing 사용자가 Google Play가 아닌 F-Droid에서 앱을 다운로드했을 가능성이 높음
          + Syncthing의 핵심은 분산화에 있음
     * Syncthing Android 앱은 음악 악보 관리에 필수적이며, APK 파일을 안전한 곳에 보관할 계획임
     * 모바일 컴퓨팅에 대한 불만을 표출함
     * 현재 Syncthing Android 앱이 얼마나 더 작동할 수 있을지 궁금해하는 의견이 있음
"
"https://news.hada.io/topic?id=17411","Pretty.c - Scripting on Top of C","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Pretty.c - Scripting on Top of C

     * Pretty C는 C와 호환되는 새로운 스크립트 언어로, 동적 타이핑, 제네릭 반복, 리소스 추적 등의 기능을 제공
     * C 및 모든 라이브러리와의 하위 호환성을 유지함
     * Lua, Python, JavaScript, Lisp에서 영감을 받았음.

  목표

     * C 개발자에게 많은 문법적 달콤함(Sugar)을 제공하여 C를 더욱 쉽게 사용하게 함.
     * Lua, Python, JavaScript, Ruby 등 여러 언어를 대체할 수 있는 궁극의 스크립트 언어로 자리매김함.
     * 단 하나의 헤더 파일을 포함하여 모든 코드베이스를 초보자 친화적으로 변환함.

  시작하기

     * GitHub 저장소를 클론하거나 pretty.h 파일을 복사하여 사용할 수 있음.

  제공되는 편의 기능

    포함된 표준 헤더

     * stdbool.h로 true, false, bool 제공
     * stdint.h로 고정 너비 정수 타입 제공
     * iso646.h로 가독성 높은 연산자 대안 제공

    간단한 매크로

     * max, min, len, default, limit, between, divisible 등의 매크로 제공

    새로운 타입

     * string, byte, bytes, any 등의 타입 별칭 제공
     * uchar, ushort, uint, ulong 등의 정수 단축형 제공

    새로운 별칭

     * eq, is, bitnot, bitxor 등의 연산자 별칭 제공
     * below, above, upto, downto 등의 비교 연산자 제공
     * even, odd, positive, negative, zero, empty 등의 숫자/데이터 프레디케이트 제공
     * nil, until, elif, ifnt, repeat, done~/~finish, pass 등의 별칭 제공

    타입 추론 (GCC, Clang, 또는 C23+)

     * var, let, local 키워드를 사용하여 타입 추론 가능

    제네릭 출력 (C11+)

     * print, println으로 다양한 타입의 데이터를 출력 가능

    제네릭 동등성 (C11+)

     * equal로 다양한 타입의 데이터 비교 가능

    예쁜 삼항 연산자

     * when, then, other, otherwise, only, otherwhen 등의 키워드로 가독성 높은 삼항 연산자 사용 가능

    for 매크로

     * foreach, forthese, fortimes, forrange, forrangeby 등의 매크로로 다양한 반복 패턴 제공

    할당 매크로

     * new, vector, delete 등의 매크로로 간단한 메모리 할당 및 해제 가능

    블록 유틸리티

     * lambda, with, defer, try, catch 등의 블록 유틸리티 제공

GN⁺의 정리

   Pretty C는 C 언어에 다양한 문법적 설탕을 추가하여 개발자들이 더 쉽게 코드를 작성할 수 있도록 돕는 프로젝트임. 특히, C의 하위 호환성을 유지하면서도 Lua, Python, JavaScript 등의 언어에서 영감을 받아 다양한 기능을 제공함. 이러한 기능들은 C 개발자들이 더 간결하고 가독성 높은 코드를 작성하는 데 도움을 줄 수 있음. 비슷한 기능을 제공하는 프로젝트로는 Zig, Nim 등이 있음.

        Hacker News 의견

     * C 내에서 DSL을 만드는 전통이 오래됨. Stephen Bourne는 C의 전처리기를 사용하여 ALGOL과 유사하게 쉘을 작성하고자 했음
     * 이 내용이 농담인지 아니면 저자가 혼란스러운 것인지 명확하지 않음. 스크립팅이 아니며 강한 타입을 도입한다고 주장하지만 실제로는 타입에 대해 아무것도 하지 않음. Lua와 Lisp를 모델로 한 연산자 별칭을 도입하지만 두 언어 모두에 존재하지 않음
     * 스크립팅 언어라고 주장하지만 프로그램을 컴파일해야 함. CINT를 추가하면 즉각적인 실행과 REPL을 사용할 수 있음
     * C 개발자에게 당뇨병 유발 심장마비를 일으킬 만큼 많은 문법 설탕을 제공함. 재미있음
     * Python 2와 같은 실수를 함. 문자열과 바이트는 동일한 타입이 아니며 그렇게 취급해서는 안 됨
     * 이 내용이 흥미롭다면 libcello.h도 좋아할 것임
     * Java로 작성된 것처럼 보이는 C++ 코드베이스를 검사했던 기억이 남. 모든 것이 카멜케이스로 명명되고, 모든 클래스 변수에 대한 getter와 setter가 있으며, 인터페이스가 곳곳에 있음
     * CNoEvil과 ogw에 추가해야 할 몇 가지가 있음. 이 프로젝트가 몇 달마다 다시 나타날 때마다 항상 더 많은 것이 있는 것 같음
     * ""ifnt""보다 ""unless""가 더 읽기 쉬움
     * Readme를 pretty.h로 엮을 수 있는지 궁금함. orgfile의 코드블록이 포괄적인지 여부. Readme에서 사고 과정을 설명한 방식이 마음에 듦
"
"https://news.hada.io/topic?id=17465","옥스팜, 최대 410억 달러 세계은행 기후 금융 미확인 자금 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  옥스팜, 최대 410억 달러 세계은행 기후 금융 미확인 자금 발견
"
"https://news.hada.io/topic?id=17459","You-get: 웹을 긁어오는 단순 다운로더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        You-get: 웹을 긁어오는 단순 다운로더

You-Get 소개

     * You-Get는 웹에서 미디어 콘텐츠(비디오, 오디오, 이미지)를 다운로드할 수 있는 작은 명령줄 유틸리티임.
     * YouTube, Youku, Niconico 등 인기 있는 웹사이트에서 비디오와 오디오를 다운로드할 수 있음.
     * 웹 페이지를 스크래핑하여 이미지를 다운로드하거나, HTML이 아닌 임의의 바이너리 파일을 다운로드할 수 있음.
     * 미디어 플레이어로 온라인 비디오를 스트리밍할 수 있으며, 웹 브라우저 없이 광고 없이 시청 가능함.

설치 방법

     * Python 3.7.4 이상과 FFmpeg 1.0 이상이 필요함.
     * pip, Antigen, GitHub, Homebrew, pkg, Flox 등을 통해 설치 가능함.
     * 설치 후, you-get 명령어를 사용하여 다양한 미디어 콘텐츠를 다운로드할 수 있음.

사용 방법

     * 비디오 다운로드 시 --info 옵션을 사용하여 가능한 품질과 형식을 확인할 수 있음.
     * 다운로드 중 Ctrl+C로 중단할 수 있으며, 다음 실행 시 이전 세션에서 이어서 다운로드 가능함.
     * 다운로드 파일의 경로와 이름을 설정할 수 있으며, 프록시 설정도 가능함.
     * 미디어 플레이어로 비디오를 시청하거나, 브라우저에서 광고 없이 시청 가능함.
     * 로그인해야 하는 콘텐츠의 경우 브라우저 쿠키를 사용하여 접근 가능함.

지원 사이트

     * YouTube, Twitter, Vimeo, Tumblr, SoundCloud 등 다양한 사이트에서 비디오, 이미지, 오디오를 다운로드할 수 있음.
     * 지원되지 않는 사이트의 경우, 범용 추출기를 사용하여 페이지에서 리소스를 찾고 다운로드할 수 있음.

법적 문제

     * 소프트웨어는 MIT 라이선스 하에 배포됨.
     * 소프트웨어 사용으로 인한 저작권 침해나 기타 불법적인 사용에 대해 저자는 책임을 지지 않음.

GN⁺의 정리

     * You-Get은 웹에서 다양한 미디어 콘텐츠를 쉽게 다운로드할 수 있는 유용한 도구임.
     * 오픈 소스 소프트웨어로, 사용자에게 자유로운 사용과 커스터마이징의 기회를 제공함.
     * 비슷한 기능을 가진 다른 프로젝트로는 youtube-dl이 있으며, 다양한 사이트에서의 다운로드를 지원함.
     * 이 도구는 특히 인터넷에서 콘텐츠를 저장하고자 하는 사용자에게 유용하며, 광고 없이 콘텐츠를 즐기고자 하는 사용자에게도 도움이 될 수 있음.
"
"https://news.hada.io/topic?id=17458","영국의 조약이 .io 도메인의 종말을 의미할 수 있는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    영국의 조약이 .io 도메인의 종말을 의미할 수 있는 이유

     * .io는 영국령 인도양 영토인 차고스 제도의 국가 코드 도메인이며, 영국은 최근 이 지역에 대한 통제권을 포기하기로 합의
     * 이에 따라 조약은 .io 도메인이 사라질 가능성이 있음
     * .io 도메인은 1997년에 할당 되었으며, 영국 정부는 .io 도메인을 판매할 수 있는 권한을 인터넷컴퓨터국(ICB)에 부여했음
     * 인터넷 할당 번호 관리기관(IANA)은 5년(연장 가능) 이내에 오래된 국가 코드 도메인을 폐기하는 절차를 가지고 있음
          + IANA는 소련 붕괴 이후 .su 도메인이 계속 남아 사이버 범죄자들 사이에서 흔히 사용되자 이 규정을 마련
          + 유고슬라비아에서 사용되던 .yu 도메인도 폐기해야 했지만, 국가 해체 후에도 정부 웹사이트가 새 도메인으로 전환하는 과정에서 수년 동안 계속 운영됨
     * 현재로서는 .io 도메인이 어떻게 될지 예측하기엔 아직 이름

.io 도메인이 단계적으로 폐지될 가능성에 따른 제안

     * 새로운 .io 도메인을 구매하지 말고, 새로운 도메인으로 전환하거나 리디렉션, 혹은 체계적인 종료 계획을 세워 공지할 것

   뭐 돈이 걸린거라 잘 해결될거라고 봅니다.

   제 개인 사이트도 io인데.. 큰일이네요.

   github.io가 사라지면 온갖 깃허브 페이지를 링크하는 관리 안 된 코드들의 운명이

   국가 코드 대신 gTLD로 변경되어 계속 사용되지 않을까 싶네요.

   비싼 도메인일 텐데 어딘가에서 계속 팔지 않을까요?

   당장 긱뉴스도 .io 인데 고민 이긴 하네요.
   ccTLD라고 하지만 거의 gTLD 급으로 .io를 쓰는데가 많아서 IANA 쪽이 다른 고민을 하지 않을까 생각도 됩니다.
   그냥 gTLD 로 전환시켜도 되는게 아닐까 싶어요.
"
"https://news.hada.io/topic?id=17400","Scalene - AI기반 Python용 고성능, 고정밀 CPU/GPU 및 메모리 프로파일러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Scalene - AI기반 Python용 고성능, 고정밀 CPU/GPU 및 메모리 프로파일러

     * 다른 Python 프로파일러가 하지 않거나 할 수 없는 여러 가지 작업을 수행하는 Python용 고성능 CPU, GPU 및 메모리 프로파일러
     * 훨씬 더 빠르게 실행되는 동시에 훨씬 더 자세한 정보를 제공하며, 또한 AI 기반 최적화 제안을 통합한 최초의 프로파일러
     * CLI 와 웹기반 GUI 제공
     * 빠르고 정확함
          + 빠름 : 계측이나 Python의 추적 기능에 의존하는 대신 샘플링을 사용. 오버헤드는 일반적으로 10~20%를 넘지 않으며 종종 그 이하
          + 정확 : 정확도 테스트한 결과 Scalene이 가장 정확한 프로파일러 중 하나이며 소요 시간을 정확하게 측정하는 것으로 나타났음
          + 라인 수준 및 함수별로 프로파일링을 수행하여 프로그램에서 실행 시간을 담당하는 함수와 특정 코드 줄을 가리킴
     * CPU 프로파일링
          + Python 코드와 네이티브 코드(라이브러리 포함)에서 소요된 시간을 분리하여 측정하여 개발자가 실제로 최적화할 수 있는 코드에 집중할 수 있도록 함
          + CPU 시간이나 메모리 할당의 상당 부분을 차지하는 핫스팟을 빨간색으로 강조 표시함
          + 시스템 시간을 별도로 분리하여 I/O 병목 현상을 쉽게 찾을 수 있음
     * GPU 프로파일링
          + NVIDIA 기반 시스템에 한해 GPU 시간을 리포팅함
     * 메모리 프로파일링
          + 메모리 사용량 프로파일링을 수행하며, 특수 메모리 할당자를 통해 메모리 증가의 원인이 되는 특정 코드라인을 식별함
          + Python 코드와 네이티브 코드의 메모리 소비 비율을 분리하여 표시함
          + 라인별 메모리 프로필을 생성함
          + 메모리 누수가 발생할 가능성이 있는 라인을 식별함
          + 복사 볼륨 프로파일링을 통해 Python/라이브러리 경계를 넘나들 때 발생하는 의도치 않은 복사(예: numpy 배열이 Python 배열로 실수로 변환되는 경우 등)를 쉽게 발견할 수 있음
     * 기타 기능
          + --reduced-profile 옵션을 통해 CPU의 1% 이상을 소비하거나 최소 100회 이상의 할당을 수행하는 라인만 보고하는 축소된 프로필을 생성할 수 있음
          + @profile 데코레이터를 지원하여 특정 함수만 프로파일링 할 수 있음
          + 백그라운드에서 실행되는 프로그램(&를 통해 실행)의 프로파일링을 일시 중지하고 재개할 수 있음

   Nsight에 비해 가볍고 유용하게 사용할 수 있을것 같은데 사용해보고 리뷰 남기겠습니다! 소개 감사합니다.

   와 그래주시면 제가 고맙습니다. 가끔 이런 뉴스를 올리면서 어떤 분들이 얼마나 보고 계신지 궁금할 때가 있거든요. ㅎㅎ
"
"https://news.hada.io/topic?id=17360","100년 노력 끝에 말라리아 퇴치 선언한 이집트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       100년 노력 끝에 말라리아 퇴치 선언한 이집트

     * 이집트, 100년 노력 끝에 말라리아 퇴치 선언
          + 이집트가 세계보건기구(WHO)로부터 말라리아 퇴치 인증을 받음
          + WHO는 이를 ""진정한 역사적 성과""라고 평가함
          + 말라리아는 복잡한 기생충에 의해 발생하며 모기 물림으로 전파됨
          + 이집트는 약 100년 전부터 말라리아 퇴치를 위한 노력을 시작함
          + 인증은 최소 3년 연속 전파가 중단되었음을 증명할 때 부여됨
          + 매년 최소 60만 명이 말라리아로 사망하며, 대부분이 아프리카에서 발생함
     * 말라리아가 주요 약물에 저항하므로 긴급 조치 필요
     * 첫 서아프리카 국가가 말라리아 퇴치 상태에 도달
          + WHO는 이집트 정부와 국민의 노력을 칭찬하며 ""고대부터 존재해온 질병을 종식시켰다""고 발표함
          + 이집트는 WHO 동부 지중해 지역에서 아랍에미리트와 모로코에 이어 세 번째로 인증을 받은 국가임
          + 전 세계적으로 44개국과 한 지역이 이 성과를 달성함
          + WHO는 인증이 ""새로운 단계의 시작""이라며, 이집트가 말라리아 퇴치 상태를 유지하기 위해 경계를 늦추지 말 것을 촉구함
          + WHO 인증을 받기 위해서는 전파 재확립을 방지할 수 있는 능력을 증명해야 함
          + 이집트는 1920년대에 쌀 재배와 주택 근처 농작물 재배를 금지하며 인간-모기 접촉을 제한하려는 첫 노력을 시작함
          + 말라리아 예방을 위해 백신이 일부 지역에서 사용되고 있지만, 질병 모니터링과 모기 물림 방지가 가장 효과적인 방법임

GN⁺의 정리

     * 이집트의 말라리아 퇴치는 WHO로부터 역사적인 성과로 인정받았으며, 이는 고대부터 이어져 온 질병을 종식시킨 중요한 사건임
     * 말라리아는 여전히 아프리카에서 많은 생명을 앗아가고 있으며, 이집트의 성공은 다른 국가들에게도 귀감이 될 수 있음
     * 이집트는 말라리아 퇴치를 위해 100년간 지속적인 노력을 기울였으며, 이는 질병 관리의 중요성을 강조함
     * 말라리아 예방을 위해 모기 물림 방지와 질병 모니터링이 중요하며, 백신 사용도 일부 지역에서 효과적임
     * 말라리아와 유사한 질병 예방을 위해 모기 방지 기술과 백신 개발이 지속적으로 필요함

        Hacker News 의견

     * 이집트의 말라리아 모니터링과 테스트 노력이 성과를 이루었음. 이는 질병 자체뿐만 아니라 전염 주기와 다양한 숙주의 복잡한 생태를 깊이 이해해야 많은 전염병을 근절할 수 있음을 강조함
          + 말라리아의 복잡한 생명 주기는 다양한 개입으로 ""끊기"" 쉬울 것 같지만, 역사적으로 말라리아는 근절하기 어려웠음
     * 이집트가 살충제를 사용했을 것으로 추정됨. 어떤 것을 사용했는지 아는 사람 있음?
     * 해당 지역의 다른 국가들도 말라리아가 있었는지, 어떻게 그리고 언제 해결되었는지 궁금함
     * 훌륭한 소식임. 이 추세를 계속 이어가자고 제안함
     * 의료, 사회, 환경 분야의 좋은 소식은 <fixthenews.com>에서 주간 무료 이메일로 제공됨. 프리미엄 버전도 있음
     * 지난주 소식 중 일부:
          + 인도가 마침내 청정 에너지 강국이 되고 있음
          + 미국이 대규모 새로운 해양 보호구역을 지정함
          + 인도가 공식적으로 트라코마를 공중보건 문제로 제거함
          + 9월 글로벌 전기차 판매 급증
          + 2000년 이후 글로벌 청소년 임신율이 3분의 1 감소
     * 대륙의 나머지 지역으로 나아가자고 제안함. 우리의 가장 오래되고 치명적인 적을 근절하자고 주장함
     * 말라리아에 걸린 관광객 한 명만으로도 다시 전파될 수 있지 않냐는 우려가 있음
"
"https://news.hada.io/topic?id=17351","HN 공개: HN 업데이트 – 주요 HN 스토리의 매시간 뉴스 방송","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 공개: HN 업데이트 – 주요 HN 스토리의 매시간 뉴스 방송

     * 해커뉴스의 탑 내용들을 뉴스 방송형식으로 읽어주는 서비스
     * 시간 단위로 업데이트 됨

        Hacker News 의견

     * 나이가 들면서 읽을 에너지가 줄어들지만, HN의 주요 내용을 놓치는 경우가 많음. 댓글 요약도 좋다고 생각함. 개인화 기능이 추가되면 좋겠음. Last.fm처럼 개인화된 추천 시스템이 필요함
          + Last.fm은 20년 전에 출시되었고, AI 없이도 훌륭한 추천 시스템을 제공했음
          + YouTube 알고리즘도 비슷하지만, 사용자가 제어할 수 없음
     * 요약이 잘못된 정보를 제공하는 경우가 있어 신뢰하기 어려움. 예를 들어, C++ 메모리 안전성 제안이 모바일에서 코드 읽기를 어렵게 만든다는 잘못된 정보를 제공함
     * HNN 뉴스 네트워크를 만들어 사무실 TV에서 24/7로 방송할 수 있는 AI 뉴스 앵커를 도입하는 것도 좋은 아이디어임
     * 이 프로젝트가 HN에서 1위를 차지한 후 듣기 시작했음. 프로젝트가 스스로에 대해 이야기하는 것을 듣는 것이 매우 메타적임
     * 프로젝트가 스스로에 대해 보고하는 것을 알아차린 사람 있음. 아카이브에 저장될 것임
     * 작년에 비슷한 아이디어로 하루에 한 번씩 라디오 프로젝트를 진행했음
     * GTA V의 자동차 라디오 채널이 떠오름. 뉴스가 사용자가 방금 한 일을 이야기함
     * 이 프로젝트가 마음에 듦. wondercraft의 Hacker News Recap과 유사하지만, 10월 1일 이후로 업데이트가 중단됨. 재생 속도 조절 버튼이 있으면 좋겠음
     * 정말 훌륭함. 역사적 아카이브를 추가해 몇 시간 전의 요약을 들을 수 있는 기능이 있으면 좋겠음
     * 훌륭한 아이디어임. 걷거나 운전하면서 HN의 기술 뉴스를 따라잡고 싶었음
"
"https://news.hada.io/topic?id=17401","PlaceholderJS - 간단하고 가벼운 플레이스홀더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PlaceholderJS - 간단하고 가벼운 플레이스홀더

     * 개발자 대상의 무료 PlaceHolder 서비스
     * React & NextJS 와 심리스하게 연동
     * 옵션을 파라미터로 지정 가능 : 이미지 사이즈(/HEIGHTxWIDTH), 이미지 안에 포함될 글자, 텍스트 컬러, 백그라운드 컬러

     https://placeholderjs.com/500x500&text=Hello+World!&color=_FF0…
     * NextJS

    import { Placeholder } from ""placeholder"";
    <Placeholder width=""500"" height=""500"" />

   깔끔하네요 ㅋㅋㅋ

   svg 를 응답하는 페이지군요. 오호..
"
"https://news.hada.io/topic?id=17451","Claude Computer Use - Vision은 궁극의 API인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Claude Computer Use - Vision은 궁극의 API인가?

     * Anthropic의 Computer Use API를 사용해본 결과,
          + 느리고 신뢰할 수 없으며 컴퓨터를 장악하기 쉽지만, ""엄청나게 흥미로움""
     * Claude Computer는 비전이 모든 것을 묶는 API이기 때문에, 언제나 무언가를 할 수 있어 진정한 '에이전트' 경험을 느낄 수 있게 해줌

어떻게 작동하는가?

     * Claude Computer Use는 기본적으로 컴퓨터 상호작용 데이터로 파인튜닝된 Claude3.5로 보임
     * 다른 모델보다 컴퓨터와 그 안에 있는 것의 스크린샷을 훨씬 더 잘 이해함

[잘하는 것]

  화면 읽기 및 탐색(상대적으로)

     * Claude가 스크린샷의 내용을 잘못 읽는 것을 거의 본 적이 없음
     * 다른 AI에 비해 (500,250) 위치의 입력창을 클릭하세요 같은 좌표를 아는 데 꽤 능숙함(화면 크기에 따라 약간 빗나갈 수는 있음)

  함수 호출

     * 함수 호출은 구조화된 출력보다 엄격하게 나쁘다고 생각하는 데 익숙했는데, Claude Computer는 함수 호출을 잘 사용함
     * 예를 들어 웹사이트로 즉시 이동할 수 있는 브라우저 도구 함수가 주어지면, 브라우저 아이콘을 클릭하는 대신 그 함수를 선호함

  단계별 사고

     * 작업을 분해하라고 요청하면, Claude는 보통 수행해야 할 단계를 파악하고 시작하는 데 꽤 능숙함

[잘못하는 것]

  화면을 읽어야 할 때를 아는 것

     * 스크린샷을 찍는 것은 비용이 많이 들기 때문에, AI는 자신의 조작이 성공했다고 가정하는 경향이 있음
     * 예를 들어 필드에 입력하지만 포커스가 없으면, 나중에 그것을 감지하기가 매우 어려움. OS 함수 호출은 의도한 결과가 실제로 발생했는지 매우 정확하게 설명해야 함
     * 이것이 Claude가 가장 자주 멈추는 방식임. 새 스크린샷을 찍을 때쯤이면 자신의 진행 상황을 모름

  더 많은 데이터 가져오기

     * 가장 가까운 샤와르마(중동요리) 가게 3곳을 찾으라고 하면, Claude는 구글 맵에 '샤와르마'를 입력하고 상위 3개 결과를 선택할 것임
     * 클릭해야 한다면 거의 절대 메뉴에서 먼저 '거리순으로 정렬'하지 않음
     * 더 나은 프롬프트 구조로 해결될 수 있음

  상태 기억하기

     * Computer Use에서는 프로그램 상태의 더 많은 부분이 이미지에 저장되는데, 이를 회상하는 데 더 취약해 보임
     * 이전에 열었던 탭이나 변경한 애플리케이션 등 과거에 했던 일에도 적용됨
     * Claude에게 가능한 한 텍스트로 관련 상태를 출력하고 도구로 시스템 상태를 제공하는 게 좋음

  모달과 팝업 탐색

     * Claude는 모달과 팝업에 가장 자주 혼란스러워하며, 그것들을 클릭해서 벗어나는 방법을 모르거나 올바른 상태가 아님을 인식하지 못함

[무엇이 필요한가?]

  가능한 한 많은 시스템 상태 제공

     * 이상적으로는 Claude Computer가 절대적으로 필요할 때만 비전을 사용하기를 원함
     * 비전을 사용하지 않고 쉽게 상태를 이해할 수 있는 도구를 제공하면 더 빠르게 움직이고 명확하게 생각할 수 있음
     * 다음과 같은 것들을 제공하는 것이 매우 도움됨:
          + 열려 있는 애플리케이션 목록
          + 어떤 애플리케이션에 활성 포커스가 있는지
          + 애플리케이션 내부에서 무엇에 포커스가 있는지
          + 해당 애플리케이션을 특별히 탐색하기 위한 가능한 한 많은 함수 호출
               o 특히 브라우저 도구가 중요함(예: 특정 URL로 이동하거나 검색하기 위해)

  불확실성을 처리하는 방법

     * 이것이 에이전트 개발의 가장 큰 미해결 문제임
     * 에이전트에 대해 가장 중요한 것은 신뢰이고, 신뢰는 입력과 피드백이 필요함
     * 테스트 중 Claude가 무엇을 해야 할지 모르는 것이 분명한 경우가 여러 번 있었고, 그때 중단하거나 묻는 대신 강행했음
     * AI가 질문하거나 막혔을 때 추론하도록 만들기 위해 질문 도구를 만드는 데 꽤 오랜 시간을 보냄. 그러나 거의 사용하지 않았음
     * 이는 타당함. 함수 호출은 정보가 필요하다는 것을 알고 단지 그것을 검색해야 할 때 가장 좋음
     * 그러나 불확실할 때를 아는 것은 다른 문제임. 에이전트 개발자는 AI가 자신의 불확실성을 보고할 것이라고 신뢰할 수 있어야 함

[앞으로 나아갈 길]

     * Claude Computer Use 는 진정한 에이전트 행동으로 가는 첫걸음임
     * 우리는 아직 이 현재 모델의 능력을 최대한 활용하지 못하고 있을 가능성이 높음
     * 그러나 진정한 에이전트 경험을 만들기 위해서는 LLM 함수 호출 이상의 것이 필요할 것이 분명함
"
"https://news.hada.io/topic?id=17344","git-remote-s3 - S3를 원격 Git 및 LFS 서버로 사용하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               git-remote-s3 - S3를 원격 Git 및 LFS 서버로 사용하기

     * Amazon S3를 git 원격 및 LFS 서버로 사용할 수 있게 해주는 awslabs의 라이브러리
     * S3를 서버리스 Git 서버로 사용하기 위한 git remote helper 구현체
     * 또한 동일한 S3 버킷에 LFS 관리 파일을 푸시할 수 있는 git-lfs custom transfer 구현체도 포함
     * 파이썬 스크립트. 3.9 이상에서 동작
     * 모든 데이터는 기본적으로 저장 및 전송 시 암호화됨. 추가적인 보안 계층을 위해 고객 관리 KMS 키를 사용하여 S3 버킷에 데이터를 암호화할 수 있음. 비용 절감을 위해 버킷 키 사용을 권장
     * IAM 권한을 통해 원격에 대한 접근 제어가 보장됨. 버킷 수준, 접두사 수준, KMS 키 수준에서 제어 가능
     * git의 분산 특성으로 인해 드물지만 여러 사용자가 동일한 브랜치에 대해 동시에 git push를 실행할 수 있음. 이 경우 여러 번들이 S3에 저장되고 이후의 git push는 실패할 수 있음. 이 문제를 해결하려면 git-remote-s3 doctor 명령을 실행해야 함.

GN⁺의 정리

     * git-remote-s3는 Amazon S3를 서버리스 Git 원격 및 LFS 서버로 사용할 수 있게 해주는 유용한 도구임.
     * 데이터 암호화 및 접근 제어를 통해 보안을 강화할 수 있음.
     * 동시 쓰기 문제를 해결하기 위한 도구도 제공하여 안정성을 높임.
     * 유사한 기능을 제공하는 다른 프로젝트로는 lfs-s3가 있음.

   git 이외에 lfs에도 별도의 인증을 붙여서 쓰면 의외로 귀찮은 일이 많이 생길듯하드라구요.

        Hacker News 의견

     * S3를 git remote로 사용하고 싶지만 개인정보 보호가 걱정된다면, Restic을 사용하여 S3를 신뢰할 수 없는 git remote로 사용하는 도구를 만들었음
          + git-remote-restic
     * AWS S3의 최소 청구 단위는 128KB임을 기억해야 함. 소스 트리가 작은 파일로 가득 차 있다면 Git 저장소 비용이 예상보다 많이 들 수 있음
     * S3 버킷만으로 구현할 수 있다는 점에 놀랐음. API Gateway, Lambda 함수, DynamoDB 테이블을 사용하여 S3 버킷을 지원하려고 했음. 클라이언트 측에서 구현할 생각은 하지 못했음
          + lfs-test-server
     * moto가 존재하는데도 모든 것을 모킹하는 것은 아쉬움
          + git-remote-s3 테스트
     * 문제를 해결하기 위한 하나의 방법으로 moto가 있지만, S3 저장소 구현은 매우 많음. Apache 2 버전의 minio도 포함되어 있으며, S3 API처럼 안정적인 것에는 최신 버전을 사용할 필요가 없음
     * Rust로 작성된 rudolfs를 사용 중임. 성능은 뛰어나지만 필요한 모든 기능(인증)은 없음
     * S3에서 LFS를 위한 CloudFormation 템플릿을 오래 사용해 왔음
          + 블로그 포스트
     * GitHub는 LFS 가격을 낮춰야 함
     * Cloudflare Workers를 사용하여 설정 단계/이동 부품을 줄일 수 있음
          + git-lfs-s3-proxy
     * LFS 부분에서는 dvc가 git-lfs보다 더 잘 작동하며 S3를 기본적으로 지원함
     * git-annex도 S3에 대한 기본 지원을 제공함
     * S3에서는 트랜잭션 및 일관성 있게 푸시할 수 없기 때문에 잘못된 도구처럼 보임
          + 동시 쓰기에 대한 설명
          + 디자인 설명
     * Git 저장소를 호스팅하는 데는 잘못된 도구처럼 보임
"
"https://news.hada.io/topic?id=17468","기차로 횡단하는 미국 여행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             기차로 횡단하는 미국 여행

미국 횡단 열차 여행

     * 뉴욕에서 샌프란시스코까지의 열차 여행을 시작하게 됨
     * 첫 번째 구간은 ""Lake Shore Limited""라는 야간 열차를 타고 시카고까지 약 20시간 소요
     * 열차 좌석은 크고 편안하지만 예약이 꽉 찬 상태
     * 열차 승무원이 승객의 하차 지점을 물어보고 좌석 위에 메모를 남김
     * 알바니에서 1시간 정차, 보스턴에서 오는 열차와 연결하기 위한 것일 가능성
     * 전체 여행 거리는 5000킬로미터로, 3박이 소요됨

시카고에서의 체류

     * 시카고 도착 후 두 번째 열차 여행을 위한 채소 구입
     * 시카고 기후 행동 박물관 방문, ""집에 머물라""는 메시지에 혼란스러움
     * 여행 경험을 대체할 수 있을지 고민

캘리포니아 제퍼

     * ""California Zephyr"" 열차는 세계 최고의 열차 여행 중 하나로 평가됨
     * 51시간 소요, 두 번째 구간의 여행 시작
     * ""룸메트""라는 접이식 침대가 있는 작은 방에서 지내게 됨
     * 다양한 조명과 기능을 갖춘 방, 화장실과 샤워실은 공용

덴버와 로키산맥

     * 덴버에서 연료 보급을 위한 1시간 정차
     * 로키산맥을 지나며 다양한 경관을 경험

콜로라도 고원과 그랜드 정션

     * 콜로라도 고원에서의 정차, 고온의 사막 기후 경험
     * 다양한 사람들과의 만남, 과학적 진보에 대한 긍정적 관점의 대화

샌프란시스코 도착

     * 에머리빌에서 열차 여행 종료, 샌프란시스코 탐험 계획
     * 여행의 끝에서 느낀 감정과 경험 공유

GN⁺의 정리

     * 이 기사는 미국 횡단 열차 여행의 생생한 경험을 공유하며, 다양한 경관과 사람들과의 만남을 통해 여행의 즐거움을 전달함
     * 열차 여행의 장점과 불편함을 솔직하게 표현하며, 여행 중 환경 문제에 대한 고민을 드러냄
     * 비슷한 기능을 가진 다른 여행 방법으로는 자동차 여행이나 비행기 여행이 있을 수 있음

        Hacker News 의견

     * 미국의 지리적 특성상 고속철도는 비효율적임. 유럽에서는 철도 여행을 좋아하지만, 미국에서는 항공 여행이 더 나은 선택일 수 있음. 과거의 항공 여행처럼 더 편안한 경험을 제공할 수 있기를 바람.
     * 시카고와 에머리빌에서 환승하는 77시간의 기차 여행은 약 $1430임. 반면, 7시간의 직항 항공편은 약 $430, 대형 세단 렌트는 약 $500임. 기차 여행이 더 저렴했으면 좋겠음.
     * 1990년대 초, Amtrak을 이용해 미국 횡단 여행을 했음. USARail 패스를 사용해 30일 동안 무제한 여행을 즐겼음. 기차 여행의 단점은 신뢰성 부족이지만, 경치가 훌륭하고 사람들을 만날 수 있는 기회가 있음.
     * 유럽에서 장거리 기차 여행을 시도했으나, 첫 기차가 지연되어 연결편을 놓치고 큰 손실을 입음. 장거리 기차 여행은 비효율적임.
     * 시애틀에서 시카고까지의 기차 여행은 예상보다 몇 시간 늦게 도착했음. 유럽의 효율적인 기차 여행에 익숙한 사람에게는 매우 느리게 느껴졌음. 경치는 훌륭했지만, 식사는 지루해졌음.
     * California Zephyr를 여러 번 탔으며, 훌륭한 경험이었음. 기차 시스템이 유명해지면 혼잡해질까 걱정됨. 현재는 대부분의 시간에 비어 있어 즐거운 경험을 제공함.
     * 시카고에서 펜실베이니아까지의 야간 기차를 탔으나, 비싼 가격과 불편한 움직임 때문에 추천하지 않음. 비행기를 선호함.
     * 미국에서 장거리 기차가 존재하지만, 미디어에서 잘 다루어지지 않음. 기차로 다른 도시를 방문한 미국인을 아는 사람이 거의 없음.
     * 시애틀에서 밴쿠버까지의 Amtrak 여행은 느린 속도에도 불구하고 편안하고 저렴했음. 그러나 더 긴 여행은 상상할 수 없을 것 같음.
     * 같은 여행을 했으며, Amtrak Rail 패스가 있다는 것을 알게 되었음. 연초에 종종 할인 판매되므로 관심 있는 사람은 주목할 필요가 있음.
"
"https://news.hada.io/topic?id=17460","Bluesky는 탈중앙화가 아님","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Bluesky는 탈중앙화가 아님

     * Facebook, Xwitter, LinkedIn, TikTok 등은 중앙 집중식 데이터베이스와 알고리듬으로 사용자의 게시물을 관리하는 기업임
     * BlueSky는 ""탈중앙화""되고 ""알고리듬이 없다""고 주장하지만, 기술적으로는 모든 것이 알고리듬임
     * 현재 BlueSky의 기본 피드 알고리듬은 모든 친구의 게시물을 보여주고 차단할 수 있으며 스팸이나 그림자 금지가 없어 좋음
     * 그러나 BlueSky는 탈중앙화되어 있지 않음. BlueSky는 중앙 집중식 기업 앱으로, 이론적으로는 탈중앙화된 네트워크 프로토콜을 실행하지만 현재 ATP 네트워크에서 활성 노드는 BlueSky뿐임

ATP 프로토콜의 한계

     * BlueSky는 ATP 프로토콜을 사용하여 에지 노드 간에 메시지를 전달하지만, 중앙 기능은 여전히 중앙 집중화되어 있음
     * ATP 프로토콜은 ""도달""을 ""발언""과 별도로 중앙에서 관리할 수 있도록 허용하여 중앙 집중식 차단, 피드 필터링 등을 가능하게 함
     * ATP는 ID 이식성을 위해 ""DID""를 허용하지만, 실제 BlueSky 앱은 DID를 구현하지 않음. GitHub에서는 ""did-placeholder""로 불리며 아직 기능이 아니라 기능 요청 상태임

BlueSky의 암호화폐 투자자

     * 최근 암호화폐 벤처 캐피털 Blockchain Capital이 1,500만 달러를 투자하며 BlueSky 이사회 자리를 매입함
     * Blockchain Capital의 파트너 Kinjal Shah는 비트코인, NFT, DAO, VC 등 암호화폐 기반 경력을 가지고 있음
     * BlueSky는 ""Bluesky 앱과 AT 프로토콜은 블록체인이나 암호화폐를 사용하지 않으며 토큰, 암호화폐 거래, NFT 등으로 소셜 경험을 과도하게 금융화하지 않을 것""이라고 주장하지만 의심스러움

GN⁺의 의견

     * BlueSky는 Facebook보다 낫고 Mastodon보다 쉽고 TikTok보다 재치 있지만 진정한 탈중앙화는 아님
     * 암호화폐 투자자가 이사회에 참여한 것은 앞으로 BlueSky가 암호화폐나 블록체인 기술을 도입할 가능성을 시사함
     * ATP 프로토콜은 탈중앙화를 지향하지만 아직 완전히 구현되지 않았고, DID와 같은 주요 기능이 누락되어 있어 한계가 있음
     * 대안으로는 Mastodon, Pleroma, Misskey 등 ActivityPub 기반의 오픈소스 탈중앙 SNS가 있음. 이들은 연합형 구조로 개별 인스턴스가 독립적으로 운영되며 사용자가 원하는 인스턴스를 선택할 수 있음
     * 탈중앙화 소셜 네트워크를 선택할 때는 프로토콜의 완성도, 오픈소스 여부, 거버넌스 구조, 수익 모델 등을 종합적으로 고려해야 함. 단순히 ""탈중앙화""라는 말만 믿고 선택하기보다는 실제로 어떻게 구현되어 있는지 꼼꼼히 살펴보는 것이 중요함
"
"https://news.hada.io/topic?id=17405","SQLite로 전문검색과 벡터검색의 하이브리드 구현하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SQLite로 전문검색과 벡터검색의 하이브리드 구현하기

     * SQLite의 기본 전체 텍스트 검색(FTS5) 확장과 sqlite-vec 시맨틱 검색과 함께 사용하여 애플리케이션에서 '하이브리드 검색'을 만들 수 있음
          + 키워드 우선, 'semantic'에 의한 순위 재조정, 상호 순위 융합과 같은 다양한 방법을 사용하여 결과를 결합 가능
          + 무엇보다도 모든 것이 SQLite에 포함되어 있기 때문에 실험과 프로토타입을 저렴하고 쉽게 만들 수 있으며 외부 서비스가 필요하지 않음
     * sqlite-vec 및 다른 벡터 검색 도구의 주요 사용 사례는 텍스트 데이터에 ""의미론적 검색""을 제공하는 것
          + 전문 검색(키워드 검색)만으로는 항상 좋은 결과를 제공하지 않음
               o ""climate change"" 를 검색했을 때, ""global warming"" 같은 문서를 리턴하지 않음
               o 시맨틱 검색을 사용하면 '분위기'로 결과를 조회하여 더 많은 의미가 담긴 풍부한 결과를 반환할 수 있음
          + 하지만 ""의미론적 검색""만 사용하면 애플리케이션에 해로울 수 있음

데모: NBC 뉴스 헤드라인

     * 2024년 1월부터 8월까지 14,500개 이상의 헤드라인이 포함된 데이터셋 사용
     * 총 4.3MB의 텍스트 데이터로 매우 작은 데이터셋

FTS5 테이블 생성하기

     * fts_headlines 전문 검색 가상 테이블 생성
     * headline 열 선언
     * content= 및 content_rowid= 옵션 구성
     * 기본 articles 테이블에서 직접 INSERT INTO
     * FTS5 테이블 쿼리하려면 단일 SELECT 문만 필요

sqlite-vec로 벡터 검색 구축하기

     * sqlite-vec은 벡터 저장 및 벡터 비교를 제공하지만 임베딩을 생성하지는 않음
     * 이 예제에서는 sqlite-lembed 확장과 Snowflake Artic Embed 1.5 모델 사용
     * 텍스트를 lembed()로 임베딩하고 vec0 가상 테이블에 저장
     * KNN 쿼리하려면 단일 SELECT 문만 필요

하이브리드 접근법 1: ""키워드 우선""

     * 전문 검색 결과를 먼저 반환한 다음 나머지를 벡터 검색으로 보강
     * CTE로 구현할 수 있음
     * 결과를 UNION ALL로 결합

하이브리드 접근법 2: 상호 순위 융합(RRF)

     * FTS5와 벡터 매치인 결과에 순위 부여
     * 단일 SELECT 쿼리와 CTE로 구현 가능
     * :weight_fts 또는 :weight_vec를 변경하여 FTS5/벡터 결과를 다르게 순위 매기기 가능

하이브리드 접근법 3: 의미에 따라 재순위 매기기

     * FTS5 검색만 수행하지만 벡터 거리에 따라 결과 재정렬
     * 키워드 일치 결과만 얻지만 더 나은 의미적 일치가 상단으로 이동
     * BM25의 단점 해결에 도움

어떤 접근 방식을 선택해야 하나요?

     * 애플리케이션과 사용 사례에 따라 다름
     * 이메일 받은편지함에 검색 엔진 구축 시 키워드 우선 순위가 더 적합
     * 내부 회사 문서에 RAG 구축 시 RRF가 좋은 옵션
     * 웹앱에 ""중복 게시물"" 기능 구축 시 의미에 따라 재순위 매기기가 잘 작동

향후 개선 사항

     * FTS5 쿼리는 ""강조""로 문서에서 일치하는 부분을 표시할 수 있지만 sqlite-vec은 쿼리 벡터와 문서 간 L2/코사인 거리만 반환
     * FTS5 쿼리에는 구문, NEAR 쿼리 및 부울 연산자와 같은 다른 기능이 있지만 벡터 검색 시 이를 사용하면 어색함
     * FTS5 + sqlite-vec로 하이브리드 검색을 확장하는 것이 어색할 수 있음
     * FTS5 테이블은 매번 전체 데이터 세트에서 전체 검색을 수행하여 메타데이터 필터링이나 단일 FTS5 인덱스 지원 불가
     * sqlite-vec도 마찬가지지만 파티셔닝 및 메타데이터 필터링에 대한 지원이 곧 제공될 예정

GN⁺의 의견

     * SQLite를 사용한 하이브리드 검색은 실험과 프로토타이핑이 쉬워 다양한 애플리케이션에서 유용할 것으로 보임. 데이터가 단일 파일에 저장되고, 여러 쿼리를 단일 SELECT 문으로 테스트할 수 있으며, 비용이 들지 않고 모든 프로그래밍 언어에서 작동하며 몇 줄의 코드로 쉽게 구현할 수 있다는 점이 장점
     * 다만 FTS5와 sqlite-vec 간에는 아직 개선할 부분이 있음. FTS5는 문서에서 일치하는 부분을 강조할 수 있지만 sqlite-vec은 쿼리 벡터와 문서 사이의 거리만 반환함. 또한 FTS5의 고급 기능 사용 시 벡터 검색과 조합하는 게 어색할 수 있음
     * 이런 제한사항에도 불구하고, SQLite를 사용한 하이브리드 검색은 데이터 크기와 애플리케이션 종류에 관계없이 키워드 검색과 의미론적 검색의 장점을 모두 활용할 수 있는 강력한 솔루션임
     * 비정형 데이터에서 정보를 추출하고 검색 가능한 형태로 만드는 것이 점점 더 중요해지는 상황에서, FTS5 같은 키워드 검색과 sqlite-vec 같은 벡터 검색을 결합하면 키워드 일치와 문맥적 관련성을 모두 고려한 정교한 검색이 가능해짐
     * 기존 검색 시스템에서 sqlite-vec를 추가하거나, 새로운 검색 애플리케이션 개발 시 SQLite 기반의 하이브리드 검색을 고려해볼 만함. 특히 임베딩 모델 자체를 커스터마이징할 수 있다는 점이 큰 장점

   프로젝트에서 sqlite에 100만건(+)의 자료를 넣고 가공 하는 작업을 수행했습니다.

   데이터 양이 많다면 좋은 SSD가 필요하다고 생각됩니다. (SATA SSD를 사용했기 때문에 처리시간이 좀 늘어났다는 생각이 들더군요)
"
"https://news.hada.io/topic?id=17435","델리 고등법원에 의해 전 세계적으로 차단된 Wikipedia 기사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  델리 고등법원에 의해 전 세계적으로 차단된 Wikipedia 기사

     * 위키미디어 재단의 페이지 접근 중단
          + 델리 고등 법원의 명령에 따라 위키미디어 재단이 페이지 접근을 중단함.
          + 재단의 권리를 침해하지 않는 범위 내에서 모든 법적 옵션을 모색 중임.
          + 지식에 대한 접근을 인권으로 간주하며, 모든 사람이 위키피디아에서 자유롭게 지식을 접근하고 공유할 수 있도록 노력 중임.
          + 현재 진행 중인 소송과 관련된 사항이며, 추가 정보를 공유할 수 있을 때 페이지가 업데이트될 예정임.
     * 페이지 정보
          + 이 페이지는 2024년 10월 21일에 마지막으로 편집됨.
          + 텍스트는 크리에이티브 커먼즈 저작자표시-동일조건변경허락 4.0 라이선스에 따라 제공됨.
          + 사이트 사용 시 이용 약관 및 개인정보 보호정책에 동의하는 것으로 간주됨.
          + Wikipedia®는 위키미디어 재단, Inc.의 등록 상표임.

GN⁺의 정리

     * 위키미디어 재단의 페이지 접근 중단은 법적 문제로 인해 발생한 상황임.
     * 지식의 자유로운 접근을 위한 재단의 노력은 인권 측면에서 중요함.
     * 이 사건은 법적 절차와 관련된 복잡한 문제를 포함하고 있으며, 향후 업데이트가 필요할 수 있음.
     * 위키피디아와 같은 플랫폼은 정보의 자유로운 공유를 가능하게 하며, 이는 사회적 가치가 큼.

        Hacker News 의견

     * 2012년 1월 18일, Wikipedia는 SOPA 법안에 반대하기 위해 사이트를 일시적으로 중단했음. 이후 여러 국가와 기업들이 인터넷 콘텐츠를 차단하는 방향으로 나아가고 있음.
          + SOPA는 인터넷의 자유와 개방성을 위협하는 법안으로 묘사되었음.
          + 과거의 저항 에너지가 점차 줄어들고 있는지에 대한 의문이 제기됨.
     * 2024년 7월, Asian News International(ANI)은 Wikimedia Foundation을 명예훼손으로 고소하고 2억 루피의 손해배상을 청구했음.
          + 델리 고등법원은 Wikipedia가 편집자 정보를 공개하지 않으면 인도에서 차단될 수 있다고 경고했음.
          + Wikimedia는 기사가 신뢰할 수 있는 여러 출처에 기반하고 있다고 강조했음.
     * 한 사용자는 Wikipedia의 기사가 ANI를 정부 선전으로 묘사하는 것이 아이러니하다고 언급함.
          + 인도 독자들에게 맥락이나 대안적 관점을 제공해 줄 것을 요청함.
     * 국제법 관점에서 주권국가는 자국 영토와 국민, 국가 안보에 대해 사법 관할권을 행사할 수 있음.
          + 외국인이나 외국 기업에 대해서도 관할권을 행사할 수 있지만, 해외에서 판결을 집행할 수는 없음.
     * 한 사용자는 저항이 무의미하다는 의견을 제시하며, 적응할 필요가 있다고 언급함.
     * 인도 IP 범위에 대해서만 차단하는 것이 이해되지만, 전 세계적으로 차단하는 것은 과도하다고 생각함.
          + 인도 법원에 맞서서 Wikipedia를 인도에서만 오프라인으로 전환했어야 한다고 주장함.
     * Streisand 효과가 발휘될 때까지 기다려야 한다고 언급함.
          + 인터넷에서 정보를 숨기는 것이 간단하지 않다는 것을 강조함.
     * 현실의 국가화와 정치화가 가속화되고 있으며, 이는 매우 위험한 상황을 초래할 수 있다고 경고함.
     * 델리 고등법원이 전 세계적으로 관할권을 행사할 수 있는지에 대한 의문이 제기됨.
     * 더 힌두(The Hindu)의 기사가 더 많은 정보를 제공할 수 있다고 언급함.
"
"https://news.hada.io/topic?id=17394","Arm, 퀄컴과의 불화 고조로 칩 설계 라이선스 취소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Arm, 퀄컴과의 불화 고조로 칩 설계 라이선스 취소

     * Arm은 오랜 파트너인 Qualcomm이 Arm 지적재산을 사용하여 칩을 설계할 수 있도록 허용한 라이선스를 취소하는 중
     * Arm은 Qualcomm에게 소위 아키텍처 라이선스 계약 취소에 대한 60일 통지를 보냄
     * 이 계약은 Qualcomm이 Arm이 소유한 표준을 기반으로 자체 칩을 만들 수 있도록 함

분쟁의 영향

     * 이 대결은 스마트폰 및 PC 시장을 교란하고 반도체 산업에서 가장 영향력 있는 두 회사의 재정과 운영을 방해할 수 있음
     * Qualcomm은 매년 수억 개의 프로세서를 판매하며, 이는 대부분의 Android 스마트폰에 사용되는 기술임
     * 취소가 발효되면 Qualcomm은 약 390억 달러 매출의 대부분을 차지하는 제품 판매를 중단하거나 막대한 손해 배상 청구에 직면할 수 있음

법적 분쟁의 배경

     * 2022년 Arm이 최대 고객 중 하나인 Qualcomm을 계약 위반 및 상표권 침해로 고소하면서 법적 분쟁이 시작됨
     * 취소 통지와 함께 Arm은 Qualcomm에 8주의 기간을 주어 분쟁을 해결하도록 함
     * 의견 불일치는 Qualcomm의 2021년 다른 Arm 라이선스 취득과 Arm에 따르면 계약 조건을 재협상하지 못한 것에 초점을 맞추고 있음
     * Qualcomm은 기존 계약이 인수한 회사인 칩 설계 스타트업 Nuvia의 활동을 다룬다고 주장함

Nuvia 설계의 중요성

     * Nuvia의 마이크로프로세서 설계 작업은 Qualcomm이 HP와 Microsoft에 판매하는 새로운 PC 칩의 핵심이 됨
     * 이 프로세서는 AI PC라고 불리는 새로운 AI 중심 노트북의 핵심 구성 요소임
     * 이번 주 초 Qualcomm은 Nuvia의 설계(Oryon이라고 함)를 스마트폰용 Snapdragon 칩에 적용할 계획을 발표함

Arm의 주장

     * Arm은 이 움직임이 Qualcomm 라이선스 위반이라고 말하고 있음
     * Qualcomm이 Nuvia 인수 전에 만든 Nuvia 설계를 파기할 것을 요구하고 있음
     * 허가 없이 Qualcomm으로 이전할 수 없다는 것이 Arm이 델라웨어 미국 지방 법원에 제기한 원래 소송의 내용임
     * 협상이 해결에 이르지 못한 후 2023년 2월 Nuvia 라이선스가 종료됨

라이선스 종료의 영향

     * Arm이 라이선스 종료를 진행하면 Qualcomm은 Arm의 명령어 세트를 사용하여 자체 설계를 수행하는 것이 금지될 것임
     * 여전히 별도의 제품 계약에 따라 Arm의 설계도를 라이선스할 수 있지만, 이 경로는 상당한 지연을 야기하고 이미 완료된 작업을 낭비하게 만들 것임

파트너십의 변화

     * 분쟁 이전에 두 회사는 스마트폰 산업 발전을 도운 긴밀한 파트너였음
     * 이제 새로운 리더십 하에 두 회사 모두 점점 더 경쟁자가 되는 전략을 추구하고 있음
     * Arm의 CEO Rene Haas 하에서 Arm은 회사가 직접 제조업체에 넘길 수 있는 더 완전한 설계를 제공하는 쪽으로 전환했음
     * Haas는 여전히 소프트뱅크의 과반수 소유인 그의 회사가 수행하는 엔지니어링 작업에 대해 더 많은 보상을 받아야 한다고 믿음
     * 이 전환은 Qualcomm과 같이 Arm의 기술을 자신들의 최종 칩 설계에 사용하는 전통적인 고객의 사업을 침해함

Qualcomm의 전략 변화

     * Qualcomm의 CEO Cristiano Amon 하에서 Qualcomm은 Arm 설계 사용에서 벗어나 자체 작업을 우선시하고 있음
     * 이는 잠재적으로 Arm에게 덜 수익성 있는 고객이 될 수 있음
     * 또한 Arm이 자체적으로 진출하고 있는 컴퓨팅 분야로 확장하고 있음
     * 그러나 두 회사의 기술은 여전히 얽혀 있으며 Qualcomm은 아직 Arm과 완전히 결별할 입장이 아님

Arm의 소유권 및 고객

     * Arm은 2016년 소프트뱅크에 인수되었고, 작년 9월 공모를 통해 일부가 매각됨
     * 일본 회사는 여전히 Arm의 80% 이상을 소유하고 있음
     * Arm에는 두 가지 유형의 고객이 있음: Arm의 설계를 기반으로 칩을 만드는 회사와 자체 반도체를 만들고 Arm 명령어 세트만 라이선스하는 회사

Qualcomm의 라이선싱 분쟁 경험

     * Qualcomm은 라이선싱 분쟁에 낯설지 않음
     * 이 회사는 자체 기술(모바일 무선 통신의 핵심 부분)의 권리를 판매하여 상당한 이익을 얻음
     * 고객으로는 삼성전자와 애플(스마트폰 제조사 1, 2위)이 있음
     * Qualcomm은 2019년 애플과의 광범위한 법적 분쟁에서 승리했음
     * 또한 Qualcomm이 약탈적 라이선싱 활동을 하고 있다고 주장한 미국 연방거래위원회(FTC)에 대해 항소심에서 승소했음

GN⁺의 의견

     * 이번 Arm과 Qualcomm의 분쟁은 스마트폰 및 PC 시장에 큰 영향을 미칠 수 있는 중요한 사건임. 특히 Qualcomm의 수익에 직접적인 타격을 줄 수 있어 관심을 가질 필요가 있음
     * 이는 단순히 두 회사 간의 문제가 아니라 전체 반도체 산업에 파급 효과가 클 것으로 보임. Arm의 IP를 사용하는 다른 회사들도 향후 유사한 상황에 직면할 수 있음
     * Arm이 라이선스 모델을 변경하면서 기존 고객들과의 관계가 악화되고 있음. 이는 생태계 전반에 부정적 영향을 줄 수 있음. Arm은 장기적 관점에서 신중하게 전략을 수립해야 할 것임
     * Qualcomm은 자체 CPU 설계 역량을 강화하고 Arm 의존도를 낮추는 방향으로 가고 있지만, 완전히 Arm과 결별하기는 쉽지 않아 보임. x86 진영으로의 전향을 고려해 볼 수도 있겠음
     * 업계 전반적으로 반도체 설계의 자립화 추세가 가속화될 것으로 전망됨. 애플, 구글, 아마존 등 대형 테크 기업들의 자체 칩 개발이 더욱 활발해질 수 있음

        Hacker News 의견

     * Qualcomm의 법무팀은 특허 집행에 매우 공격적인 것으로 알려져 있으며, 이번 분쟁은 합의로 끝날 가능성이 높음. 이는 Qualcomm의 시장 가치에 영향을 줄 수 있지만, 휴대폰 생태계에는 큰 영향을 미치지 않을 것임
          + Qualcomm이 장기적으로 자체 RISC 구현에 투자할 수 있지만, 당분간 ARM 개발을 중단할 사업적 이유는 없어 보임
     * ARM이 라이선스를 종료하면 Qualcomm은 ARM의 명령어 세트를 사용한 자체 설계를 할 수 없게 될 것이라는 의견에 대해 의문을 제기함
          + 명령어 세트 자체는 특허나 저작권으로 보호되지 않으며, ARM의 아키텍처 라이선스는 특허 및 상표 라이선스를 포함할 가능성이 있음
          + RISC-V CPU와 같은 다른 ISA가 ARM 특허를 침해하지 않는다는 보장은 없음
     * ARM은 스마트폰 칩셋에서의 지배적 위치를 이용해 ARM 생태계를 보호할 의무가 있음
          + Qualcomm은 Nuvia를 인수하여 여러 산업에서 제한 없이 IP를 사용하려는 계획을 실행 중임
          + ARM은 Nuvia의 IP와 성능이 비슷한 아키텍처를 설계했지만, Qualcomm은 새로운 ARM 설계 라이선스 없이 기존 아키텍처에 Nuvia의 IP를 적용할 수 있다고 가정함
     * 현재 진행 중인 소송 때문에 라이선스 종료가 일시 중단될 가능성이 있으며, 이는 협상의 일환일 수 있음
     * 많은 댓글이 Qualcomm이 합의하거나 RISC-V로 전환해야 한다고 생각하지만, 이는 ARM IP로 맞춤형 칩을 설계하는 라이선스에 관한 것임
          + Snapdragon 8 Gen 1은 ARM 설계를 사용하지만, Snapdragon 8 Elite는 Qualcomm이 자체 설계한 Oryon 코어를 사용함
          + Qualcomm이 여전히 이전과 같은 칩을 만들 수 있는지, 아니면 새로운 칩 설계가 제한되는지에 대한 의문이 제기됨
     * ARM과 RISC-V에 대한 논의가 많아 새로운 ISA를 위한 칩 설계의 어려움에 대한 설명을 요청함
          + ISA가 단순히 다른 '언어'인지, 하드웨어보다 소프트웨어가 더 큰 문제인지에 대한 질문이 있음
     * 모바일 기기에서 효율성이 중요하기 때문에 Qualcomm이 ARM 라이선스 없이 생존하기 어려울 것이라는 의견이 있음
          + RISC-V와 같은 다른 아키텍처는 좋지만, 효율성이 25% 낮아지면 소비자에게 큰 영향을 미칠 수 있음
     * Qualcomm은 Apple 외에 유일한 경쟁력 있는 ARM 칩 제조업체이며, ARM에 의해 시장에서 제외되고 있음
          + 재라이선스 비용이 정말로 그렇게 비싼지에 대한 의문이 제기됨
"
"https://news.hada.io/topic?id=17444","Linux의 새로운 mseal syscall 심층 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Linux의 새로운 mseal syscall 심층 분석

    Linux의 새로운 mseal 시스템 호출에 대한 심층 분석

     * mseal은 Linux 커널 6.10 버전에 도입된 새로운 시스템 호출로, 메모리 보호를 위한 ""메모리 봉인"" 기능을 제공함.
     * 이 시스템 호출은 프로그램 실행 중 메모리 영역을 불법적인 수정으로부터 불변하게 만들어 공격자가 메모리 권한을 변경하거나 메모리 레이아웃을 조작하지 못하게 함.
     * mseal은 원격 공격자의 코드 실행을 방지하기 위한 것으로, 민감한 데이터를 메모리에 저장하는 로컬 공격자를 방어하는 기존의 memfd_create 및 memfd_secret과는 다름.

    mseal의 작동 방식

     * mseal의 함수 서명은 간단하며, 시작 주소와 길이를 받아 해당 메모리 영역을 봉인함.
     * do_mseal 함수는 메모리 영역을 잠그고, check_mm_seal과 apply_mm_seal을 통해 메모리 영역의 유효성을 검사하고 봉인함.
     * 봉인된 메모리 영역은 mprotect, munmap, mremap 등의 시스템 호출을 통해 권한 변경, 맵핑 해제, 크기 조정 등이 불가능함.

    mseal이 방어하는 공격 기법

     * NX 강화: mseal은 VMA의 실행 권한을 변경하지 못하게 하여 셸코드 기반 공격을 방지함.
     * 맵핑 해제 기반 데이터 전용 공격 완화: mseal은 메모리 영역의 임의 해제 및 재맵핑을 방지하여 데이터 전용 공격을 막음.

    mseal을 활용한 소프트웨어 강화

     * mseal은 소프트웨어의 특정 메모리 영역을 봉인하여 보안을 강화할 수 있음.
     * 개발자는 mseal을 사용하여 신뢰할 수 없는 데이터가 존재할 수 있는 메모리 영역을 선택적으로 봉인할 수 있음.
     * glibc와의 통합이 진행됨에 따라 자동 봉인 기능이 추가될 가능성이 있음.

    GN⁺의 정리

     * mseal은 Linux 커널에 새롭게 도입된 보안 기능으로, 메모리 영역을 봉인하여 원격 공격자의 코드 실행을 방지함.
     * 이 시스템 호출은 기존의 메모리 보호 방식과 달리, 메모리 권한 변경 및 맵핑 해제를 방지하여 데이터 전용 공격을 막음.
     * mseal의 도입은 소프트웨어 보안을 강화하는 데 중요한 역할을 하며, glibc와의 통합을 통해 더 많은 사용 사례가 기대됨.
     * 유사한 기능을 가진 다른 프로젝트로는 메모리 보호를 위한 memfd_create 및 memfd_secret이 있음.

        Hacker News 의견

     * 커널 메일링 리스트에서 ""매운 토론""이 언급되었음. 내부자가 이의와 우려를 요약해줄 수 있는지 궁금해하는 의견이 있음. 메일링 리스트는 너무 강렬해서 피하는 경향이 있음
          + 메커니즘 자체는 합리적으로 보이지만, 커널에 이미 존재하지 않는 것이 놀라움
     * Chrome이 이 호출을 원하지만, 공격자가 다른 플래그로 다시 매핑할 수 있으므로 봉인된 페이지를 해제할 수 없음
          + 이는 런타임에 할당된 페이지에 사용할 수 없음을 의미하며, 전체 프로세스 수명 동안 보유할 의도가 없는 한 사용 불가
          + JS 샌드박스와 같은 메모리에는 사용할 수 없음을 의미하는지에 대한 질문이 제기됨
          + Chrome의 메모리/프로세스 관리 방식에 익숙하지 않아 왜 문제가 되지 않는지 확신할 수 없음
     * mseal() 및 그 이후의 기사 링크가 제공됨
     * 현대의 (x86_64) 아키텍처가 안전한 프로그래밍을 촉진하는 많은 기능을 가지고 있음에도 불구하고, 운영 체제가 이러한 호출을 구현해야 한다는 점에 슬픔을 느낌
          + 구식 시스템을 패치하려는 시도가 컴퓨팅의 진보를 저해하고 수십억 명을 위험에 빠뜨림
          + 아키텍처 버그가 존재하지만, 소프트웨어가 현재 기능을 제대로 활용하지 못함
     * mseal 시스템 호출을 LD_PRELOAD 트릭으로 무효화할 수 있는지에 대한 질문이 있음
     * 기사에 있는 mseal() 프로토타입이 문법적으로 올바르지 않음. 첫 번째 인수는 unsigned start addr가 아니라 unsigned long start_addr이어야 함
     * OpenBSD는 오래전부터 이 기능을 가지고 있었음. 왜 Linux에 이제서야 도입되는지에 대한 의문이 제기됨
"
"https://news.hada.io/topic?id=17387","ClickHouse를 위한 강력한 새로운 JSON 데이터 타입 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ClickHouse를 위한 강력한 새로운 JSON 데이터 타입 개발

소개

     * JSON은 현대 데이터 시스템에서 반구조화 및 비구조화 데이터를 처리하는 표준 포맷으로 자리잡음.
     * ClickHouse는 JSON의 중요성을 인식하고 있으며, JSON을 효과적으로 대규모로 활용하는 데 있어 몇 가지 도전 과제를 해결함.

도전 과제

     * 도전 과제 1: 진정한 컬럼 지향 저장소
       JSON 데이터를 다른 컬럼 타입처럼 효율적으로 처리하기 위해 JSON 경로를 컬럼 지향 방식으로 저장해야 함.
     * 도전 과제 2: 동적으로 변하는 데이터와 타입 통합 문제
       JSON 경로에 대해 서로 다른 데이터 타입을 저장할 수 있도록 하여 데이터의 무결성을 유지해야 함.
     * 도전 과제 3: 디스크 상의 컬럼 데이터 파일 폭증 방지
       많은 고유 JSON 키가 있는 경우 컬럼 파일의 폭증을 방지하기 위해 컬럼 생성에 제한을 두어야 함.
     * 도전 과제 4: 밀집 저장소
       고유하지만 드문 JSON 키가 많은 경우 NULL 또는 기본값을 중복 저장하지 않도록 해야 함.

새로운 JSON 데이터 타입

     * ClickHouse는 고성능 JSON 데이터 처리를 위한 새로운 JSON 데이터 타입을 도입함.
     * 이 타입은 동적으로 변하는 데이터를 지원하며, 높은 데이터 압축과 쿼리 성능을 유지함.
     * JSON 파싱을 위한 힌트 제공을 통해 성능을 조정할 수 있음.

빌딩 블록 1 - Variant 타입

     * Variant 타입은 동일한 테이블 컬럼 내에서 서로 다른 데이터 타입의 값을 효율적으로 저장할 수 있도록 함.
     * 각 데이터 타입에 대해 별도의 서브컬럼을 사용하여 데이터 무결성을 유지함.

빌딩 블록 2 - Dynamic 타입

     * Dynamic 타입은 Variant 타입을 확장하여 사전에 타입을 지정하지 않고도 다양한 데이터 타입을 저장할 수 있도록 함.
     * 저장되는 타입의 수를 제한하여 컬럼 파일의 폭증을 방지함.

ClickHouse JSON 타입

     * Variant와 Dynamic 타입을 기반으로 새로운 JSON 타입을 구현하여 모든 도전 과제를 해결함.
     * JSON 객체의 구조에 관계없이 저장할 수 있으며, JSON 경로를 서브컬럼으로 사용하여 값을 읽을 수 있음.

GN⁺의 정리

     * ClickHouse의 새로운 JSON 데이터 타입은 대규모 데이터 분석에서 JSON의 성능 문제를 해결하는 데 중점을 둠.
     * 이 타입은 다양한 데이터 타입을 지원하며, 높은 성능과 확장성을 제공함.
     * JSON 외에도 XML, YAML 등 다른 반구조화 타입을 지원할 수 있는 기반을 마련함.
     * ClickHouse를 사용하는 개발자들에게 유용하며, 데이터 압축과 쿼리 성능에서의 이점을 제공함.

        Hacker News 의견

     * PostHog에서 ClickHouse를 사용한 결정은 최고의 선택 중 하나였음. 성능을 확장하면서 동일한 데이터 세트로 더 많은 제품을 구축할 수 있었음
          + JSON 기능이 나오기 전부터 ClickHouse를 사용했으며, JSON blob에서 키에 대한 쿼리 패턴을 기반으로 JSON 필드를 물리적 컬럼으로 변환하는 작업을 설정했음
          + 물리적 컬럼이 생성되면 런타임 시 해당 컬럼으로 쿼리를 라우팅하여 CPU와 IO 사용량을 크게 절감했음
          + ClickHouse의 새로운 JSON 타입은 컴퓨터가 더 적은 작업을 하도록 하여 성능을 향상시킴
          + ClickHouse Inc. 팀과 커뮤니티는 매우 빠르게 움직이고 있으며, Parquet와 Iceberg 지원에 대한 기대가 큼
     * JSON에 데이터 타입을 추가하는 것이 JSON으로서의 자격을 유지하는지 궁금함
          + 표준 라이브러리 JSON 파서가 읽을 수 없다면 ""CH-JSON""과 같은 이름을 사용하는 것이 더 나을 것이라고 생각함
          + ClickHouse를 아직 사용해보지 않았지만 결과는 멋지게 들림
     * ClickHouse에서 이 기능을 보는 것이 좋음
          + Snowflake는 IPO 이전에 이 기능을 언급한 백서를 발표했으며, JSON을 컬럼으로 비밀리에 변환하여 성능을 향상시켰음
     * ClickHouse를 평가할 때 Apache Pinot도 고려해볼 가치가 있음
          + ClickHouse는 단일 머신 설치를 위해 설계되었으며 클러스터 지원이 부족함
          + Pinot는 수평 확장이 더 쉬우며, 스타 트리 인덱스를 활용하면 다차원 분석에서 성능 차이가 큼
     * 동적으로 변경되는 데이터에 대해 흥미로움을 느낌
          + Elasticsearch에서 로그를 저장할 때 발생하는 타입 설정 문제를 해결할 수 있기를 바람
     * ClickHouse의 JSON 지원을 기다려왔으며, 새로운 타입과 동적 컬럼이 특히 유용할 것임
     * ClickHouse는 훌륭한 도구임
          + OLAP에 사용하며, 6억 행, 300GB의 데이터베이스를 문제 없이 처리함
          + 새로운 JSON 데이터 타입이 현재 중첩된 튜플로 해결하는 사용 사례에 더 나을 것으로 기대함
     * 몇 주 전에 ClickHouse를 시도했을 때, 컬럼 이름을 기반으로 파일을 명명하여 긴 파일 이름과 슬래시로 인해 파일 시스템에서 오류가 발생했음
     * ClickHouse는 충분히 사용되지 않음
          + 'postgres가 전부다'라는 인식이 있지만, 필요 이상으로 확장해야 할 경우 ClickHouse를 고려해야 함
          + clickhouse-local은 SQL을 사용한 CSV 처리에 뛰어나며, Google Sheets나 Excel에 지쳤을 때 강력히 추천함
"
"https://news.hada.io/topic?id=17464","50년 전 설탕 산업, 과학자들에게 지방 비난 유도 연구 지원 (2016)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               50년 전 설탕 산업, 과학자들에게 지방 비난 유도 연구 지원 (2016)

    50년 전, 설탕 산업이 지방을 비난하도록 과학자들에게 돈을 지불한 사건

     * 1960년대에 설탕 산업은 설탕의 위험성을 축소하고 지방의 위험성을 강조하는 연구를 지원했음. 이 연구는 하버드 과학자들에 의해 수행되었으며, 설탕 산업의 자금 지원이 공개되지 않은 채 1967년 _New England Journal of Medicine_에 발표되었음.

    설탕 충격? 다른 식품 산업도 많은 연구에 자금을 지원함

     * 설탕 산업이 자금을 지원한 프로젝트는 여러 연구와 실험을 검토하는 문헌 리뷰였음. 이 리뷰는 설탕이 관련된 연구에 문제가 있음을 시사하며, 미국 식단에서 지방을 줄이는 것이 관상동맥 심장병을 해결하는 최선의 방법이라고 결론지었음.

    '소금 설탕 지방'으로 미각을 조작하는 식품 산업

     * 연구자들은 설탕 산업이 과학적 탐구와 논쟁에 영향을 미치려 했음을 문서에서 발견했음. 1954년, SRF의 회장은 미국인들이 건강을 위해 저지방 식단을 채택하도록 설득할 수 있다면 설탕 소비가 증가할 것이라고 언급했음.

    '소다 정치'에서 이익과 공중 보건의 교차로에 있는 대형 소다

     * 1960년대에 SRF는 설탕이 다른 탄수화물보다 덜 바람직한 칼로리 원천이라는 보고서가 증가하고 있음을 인식했음. SRF는 자체 연구를 지원하여 이러한 주장을 반박하려 했음.

    다른 연구에 대한 '다른 기준'

     * SRF가 검토한 많은 기사들은 설탕 산업에 의해 선택되었으며, 설탕이 관련된 연구에 대해 비판적으로 평가할 것으로 기대되었음. 연구자들은 설탕이 관상동맥 심장병과 관련이 있을 수 있다는 연구의 중요성을 최소화했음.

    설탕 로비: ""투명성 기준은 당시의 표준이 아니었음""

     * 설탕 협회는 당시 연구 활동에서 더 큰 투명성을 발휘했어야 했다고 인정했음. 그러나 당시에는 자금 공개와 투명성 기준이 오늘날과 같지 않았다고 주장했음.

    GN⁺의 정리

     * 이 기사는 설탕 산업이 과거에 과학적 논쟁에 영향을 미치려 했던 방식을 조명함. 이는 식품 산업이 연구에 미치는 영향을 이해하는 데 중요함.
     * 설탕과 지방의 상대적 위험성에 대한 논쟁은 여전히 현재 진행 중이며, 산업 자금 지원 연구에 대한 신뢰성 문제를 제기함.
     * 유사한 기능을 가진 산업 내 다른 프로젝트로는 식품 산업의 연구 자금 지원 투명성을 높이는 노력이 있음.

        Hacker News 의견

     * 어린 시절, 1950년대 후반에 출판된 World Book Encyclopedia를 통해 설탕이 몸에 좋다는 내용을 접했음. 하지만 나중에 알고 보니 많은 항목이 산업계에 의해 작성되었음을 알게 되었음
          + 당시에는 지방이 나쁘다고 여겨져 지방을 줄인 우유와 마가린을 먹었음
          + 그러나 아침 시리얼은 설탕이 많이 들어 있었음
          + 최근에도 지방을 줄인 과자가 여전히 같은 칼로리를 가지고 있으며, 지방 대신 설탕이 더 들어있음을 발견했음
     * 설탕, 담배, 석유 산업이 현실을 왜곡했으며, 앞으로 어떤 산업이 드러날지 궁금함
     * 아침 식사가 중요하며, 저지방인 한 설탕이 많은 시리얼도 좋다고 여겨졌음
     * 대부분의 식이 조언은 명백함
          + 한 번에 많은 설탕을 먹으면 기분이 나빠지고, 치아에도 좋지 않음을 느낌
          + 가끔씩 콜라나 쿠키를 먹는 것은 괜찮지만, 지속적으로 먹는 것은 좋지 않음
          + 기름이나 버터를 약간 넣은 닭고기를 먹는 것이 건강에 좋다고 느껴짐
          + 개인 건강에 시간을 투자하는 것이 중요함
     * 영양 연구자로서, 자유산과 자유당의 조합이 대사에 나쁜 영향을 미친다고 경고함
          + 가공된 탄수화물이나 지방을 피하고, 전분, 과일, 자연 지방을 섭취할 것을 권장함
     * 설탕 산업이 연구 논문을 통해 설탕의 위험성을 왜곡했으며, 최근에서야 설탕과 심장 건강의 연관성을 재검토하고 있음
     * 설탕은 건강에 좋지 않으며, 많은 칼로리를 함유하고 있음
          + 포화 지방도 건강에 좋지 않음
          + 최근 HN에서 포화 지방을 옹호하는 의견이 많아지고 있음
"
"https://news.hada.io/topic?id=17392","HN 공개: 오픈 소스 Counter-Strike 유사 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN 공개: 오픈 소스 Counter-Strike 유사 게임

     * Counter-Strike: Football
          + 경쟁적인 멀티플레이어 FPS 게임으로, 두 개의 축구 팬 팀이 상대 팀보다 더 많은 라운드를 승리하는 것을 목표로 싸우는 게임임.
          + 팀은 공격자와 수비자로 나뉨. 수비자 팀은 매 라운드 공격자들이 그들의 팬 기지를 낙서 폭탄 공으로 훼손하는 것을 막는 것이 목표임.
          + 수비자가 라운드를 승리하는 방법:
               o 폭탄이 설치되기 전에 모든 공격자 플레이어를 제거함
               o 폭탄이 폭발하기 전에 해체함
               o 라운드 시간이 끝날 때까지 최소한 한 명의 플레이어가 생존하고 폭탄이 설치되지 않음
          + 공격자가 라운드를 승리하는 방법:
               o 라운드 시간이 끝나기 전에 모든 수비자 플레이어를 제거함
               o 라운드 시간이 끝나기 전에 폭탄을 설치하고 수비자가 이를 해체하지 못하게 함
          + 공격자가 라운드 시간이 끝나기 전에 낙서 폭탄을 설치하면, 라운드 시계가 40초로 설정되고 수비자는 30초(또는 해체 키트를 사용할 경우 35초) 안에 폭탄을 해체해야 함
          + 이 게임은 저폭력 게임으로, 붉은 피, 동물 살해 또는 유사한 폭력적인 시각적 요소가 없음
     * 설정
          + 클라이언트
               o 최신 릴리스에서 OS 플랫폼에 맞는 실행 파일을 다운로드하거나 프로젝트 소스 폴더에서 직접 빌드할 수 있음
               o cd electron/, npm install, npm run dev 명령어를 사용하여 개발 환경 설정 가능
          + 서버
               o 현재 공식적인 공개 서버는 없으며(매치 메이킹 서비스도 진행 중), 직접 서버를 실행하거나 다른 사람이 호스팅할 수 있음
               o composer install -a --no-dev, php cli/server.php 2 명령어로 서버를 시작하여 2명의 플레이어가 연결되기를 기다릴 수 있음
     * 도움 요청
          + HTML/CSS/JS/PHP 언어 또는 3D 모델링/텍스처링/애니메이션을 알고 있다면 프로젝트에 참여하여 게임을 더 빠르게 개선하는 데 도움을 줄 수 있음. 풀 리퀘스트를 보내 참여 가능

GN⁺의 정리

     * 이 게임은 축구 팬 팀 간의 경쟁을 다룬 독특한 FPS 게임으로, 저폭력적인 요소를 강조하여 폭력적인 시각적 요소를 최소화함.
     * 게임의 설정 및 서버 실행 방법이 간단하여, 기술적인 배경이 있는 사용자가 쉽게 참여할 수 있는 장점이 있음.
     * 게임 개발에 기여할 수 있는 다양한 기술적 분야가 있어, 관련 기술을 가진 사람들이 참여하여 게임을 개선할 수 있는 기회를 제공함.
     * 유사한 기능을 가진 게임으로는 ""Valorant""와 ""Overwatch"" 등이 있으며, 이 게임들은 각각의 독특한 스타일과 게임플레이를 제공함.

        Hacker News 의견

     * PHP 서버와 Electron 클라이언트의 조합이 놀라운 프로젝트임. 오랜만에 PHP를 다루게 되어 감명받음. 이 프로젝트에 자유 시간을 투자할 계획임. 이런 독창적인 프로젝트가 더 필요함
          + 클라이언트 측은 www/assets에 위치함
          + 의존성은 Three.js 외에는 없음. TypeScript나 빌드 파이프라인도 없음. 코드를 읽는 것 자체가 재미있음
          + GitHub 언어 통계에 따르면 82% PHP, 15% JS, 약간의 HTML/CSS로 구성됨. 실제 클라이언트는 무엇으로 만들어졌는지 궁금함. 다른 저장소에 있는지, 아니면 PHP로 모두 구현된 것인지 궁금함. 그렇다면 인상적임
     * ""저폭력 게임""이라는 설명이 마음에 듦. 게임은 얼굴에 총을 쏘고, 폭탄을 설치/해체하며, 총격을 피하는 내용임
          + 축구장을 본 적이 있는지 궁금함. 여러 교차선과 어울리지 않는 선들이 있음. 하지만 축구가 초점이 아니므로 크게 중요하지 않음
     * 스크린샷이 90년대 PC 게임 ""Extreme Paintbrawl""을 떠올리게 함. 어릴 때 즐겨 했던 게임임. 나중에 이 게임이 최악의 비디오 게임 중 하나로 평가받는다는 것을 알게 됨
     * FC '25보다 이 축구 게임이 더 마음에 듦. solcloud의 열정을 응원함
     * 오픈 소스화가 훌륭함. 3D 게임 개발을 시작하려는 사람들에게 좋은 출발점임
     * 라이선스 파일 추가 요청
     * 클라이언트가 Electron에서 실행되지만 웹 버전은 없음. 왜 그런지 궁금함
     * Electron 클라이언트와 PHP 서버로 FPS 게임을 만드는 것은 흥미로운 기술 선택임
     * 브라우저에서 실행될 것이라 생각했지만, 클라이언트가 Electron 애플리케이션으로 패키징된 이유가 궁금함
"
"https://news.hada.io/topic?id=17381","흑인 투표 억압에 사용된 루이지애나의 사실상 불가능한 Literacy Test","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              흑인 투표 억압에 사용된 루이지애나의 사실상 불가능한 Literacy Test

     * 역사적 배경
          + 윌리엄 포크너의 소설 ""The Unvanquished""에서 남부의 선거 억압을 묘사함.
          + 남북전쟁 이후, 흑인 유권자의 투표를 막기 위해 다양한 억압 수단이 사용됨.
          + 20세기 중반에는 문해력 테스트가 주로 사용됨.
     * 문해력 테스트의 문제점
          + 문해력 테스트는 주로 흑인 유권자에게 불리하게 작용함.
          + 테스트는 주관적이며, 등록관이 유권자에게 쉽게 또는 어렵게 채점할 수 있었음.
          + 루이지애나의 테스트는 모호한 질문들로 구성되어 있으며, 하나의 오답이 전체 실패를 의미함.
     * 테스트의 구조와 문제점
          + 1964년 루이지애나 테스트는 30개의 질문으로 구성되어 있으며, 10분 내에 완료해야 함.
          + 질문들은 모호하여 정답을 찾기 어려움.
          + 예를 들어, ""뒤로 철자를 쓰시오""와 같은 질문은 해석의 여지가 많음.
     * 비판과 논의
          + 테스트의 모호함은 실패를 보장하기 위한 의도적 장치로 보임.
          + 일부 질문은 논리적으로 불가능한 요구를 포함함.

GN⁺의 정리

     * 이 기사는 미국 남부에서의 역사적 선거 억압 수단인 문해력 테스트에 대해 다룸.
     * 문해력 테스트는 흑인 유권자를 억압하기 위한 수단으로 사용되었으며, 그 모호함과 주관성으로 인해 비판받음.
     * 이 기사는 역사적 불평등과 차별의 사례를 이해하는 데 도움을 줄 수 있음.
     * 유사한 기능을 가진 다른 역사적 사례로는 남아프리카 공화국의 아파르트헤이트 정책이 있음.

        Hacker News 의견

     * 루이지애나의 문해력 테스트는 각 교구마다 다르게 시행되었으며, 일관성이 부족했음
          + 1964년 여름에 사용되었을 가능성이 있는 ""뇌를 혼란시키는"" 유형의 테스트가 있었으나, 그 진위가 확인되지 않아 제거되었음
          + 루이지애나의 테스트는 1950년대와 60년대에 널리 사용된 테스트와는 다름
     * 러시아 대학들은 유대인 학생들을 걸러내기 위해 입학 시험에서 수학 문제를 사용했음
     * 루이지애나의 테스트는 교구별로 다르게 시행되었고, 일관성이 없었음
     * 해방된 노예의 후손으로서, 그들이 재건 시대에 성공을 이루기 위해 직면한 역경에 항상 놀라움을 느낌
          + 해방 후 40년 후에야 ""한 방울 법칙""과 같은 나쁜 체계적인 것들이 등장했음
          + 이 역사는 매우 흥미로워서 더 배우고 싶음
     * 독일에서는 시민으로 등록되어 등록된 주소로 편지를 받고 투표소에 가서 투표를 함
     * 1964년이라는 점을 강조하는 것이 중요할 수 있음
     * 많은 사람들이 이 질문들의 핵심 세부 사항을 놓치고 있음
          + 이 테스트는 의도적으로 모호하게 설계되어 채점자가 합격 또는 불합격을 결정할 수 있도록 함
          + 이 ""테스트""는 공정한 심판에 의해 채점되지 않았으며, 특정 개인의 투표권을 부정하는 것이 목적이었음
     * 많은 사람들이 이 시스템이 합리적이고 공정하게 사람들을 대할 것이라고 생각하지만, 실제로는 그렇지 않았음
     * 기사에서는 대부분의 질문이 불가능하다고 주장하지만, 80% 이상이 명확한 해석을 가짐
          + 예를 들어, ""이 줄의 마지막 단어 밑에 선을 그으시오""라는 질문이 있음
     * 테스트 이미지가 Microsoft Word로 작성된 것처럼 보임
          + 이 예시가 가짜인지 궁금함
     * 오늘날 많은 앱, 웹사이트, 양식, 데이터 수집자, 데이터 판매자, 마케터, 기술 회사, 정부가 같은 목적을 가지고 이와 같은 냉소적이고 조작적인 접근 방식을 사용함
     * 이 문제들의 해답을 가진 사람이 있는지 궁금함
"
"https://news.hada.io/topic?id=17376","JavaScript 도구를 "더 빠른 언어"로 재작성 하는 것에 대한 회의적인 시각","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             JavaScript 도구를 ""더 빠른 언어""로 재작성 하는 것에 대한 회의적인 시각

     * 최근 Node.js 툴을 Rust, Zig, Go 등의 더 빠른 언어로 다시 작성하려는 경향이 걱정스러우며, 객관적인 우려사항들을 정리함

[성능]

     * JavaScript 툴의 속도를 높이기 위한 가능성이 아직 다 발굴되지 않았다고 봄
     * ESLint, Tailwind 등에서 쉽게 개선할 수 있는 부분이 많이 존재함
     * 브라우저에서 JavaScript는 대부분의 워크로드에 대해 ""충분히 빠름""
     * CLI 툴에서는 왜 JavaScript를 버리려 하는 것일까?

  대대적인 재작성

     * 오랫동안 JavaScript 툴 생태계는 ""동작하는 것""에 초점을 맞추어 왔음
     * 이제 API가 대부분 안정화되어 모두가 ""같은 것을, 더 빠르게"" 원하는 상황
     * 성능을 고려해 새로 작성되고, API가 이미 정해져 있어 개발 시간을 아낄 수 있기 때문에 새 툴이 더 빨라질 수 있음
     * A에서 B로 재작성하면 속도 향상이 있는데, 이는 B가 A보다 빠르다고 주장하기 쉬움
     * 하지만 재작성 자체가 더 빠른 이유일 수 있음 (두 번째에는 더 많이 알고, 성능에 더 신경 쓰기 때문)

  바이트코드와 JIT

     * 브라우저에서는 당연하게 여기지만 바이트코드 캐시와 JIT(Just-In-Time 컴파일러)의 혜택을 받음
     * JavaScript가 올바르게 캐시되면, 브라우저는 소스 코드를 바이트코드로 파싱하고 컴파일할 필요가 없음
     * 자주 실행되는 함수는 기계어로 더 최적화됨 (JIT)
     * Node.js 스크립트에서는 바이트코드 캐시의 혜택을 전혀 받지 못함
     * 하지만 이제 Node에서도 컴파일 캐시를 사용할 수 있게 됨 (NODE_COMPILE_CACHE 환경변수 설정)
     * JIT는 함수를 여러 번 실행해야 ""뜨거워지기"" 때문에 일회성 스크립트에서는 혜택을 보기 어려움
     * Pinafore에서 JavaScript 기반 blurhash 라이브러리를 Rust(Wasm) 버전으로 교체하려 했으나, 5번째 반복에 이르면 성능 차이가 사라짐
     * Porffor와 같은 도구로 Node 스크립트를 AOT 컴파일하는 것을 고려해 볼 수 있음
     * Wasm을 사용하면 순수 네이티브 툴에 비해 성능 저하가 있음

[기여도 및 디버깅 용이성]

     * ""모든 것을 네이티브로 다시 작성하기"" 운동에 대한 주된 회의론임
     * JavaScript는 관대한 타입, 쉬운 습득, 브라우저 지원 등으로 인해 대중적인 언어임
     * 오랫동안 JavaScript 생태계에서는 라이브러리 작성자와 사용자 모두 JavaScript를 사용해 왔음
     * 이는 기여의 장벽을 낮추는 데 도움이 됨
     * 하지만 JavaScript 라이브러리 작성자가 다른 언어를 사용하면 이 점이 깨짐
     * 또한 JavaScript 의존성을 로컬에서 수정하는 것이 간단함 (node_modules에서 직접 수정)
     * 반면 네이티브 언어로 작성된 경우에는 소스 코드를 직접 체크아웃하고 컴파일해야 함
     * JavaScript 라이브러리를 디버깅할 때는 익숙한 브라우저 개발자 도구나 Node.js 디버거를 사용할 수 있음
     * Wasm에서도 디버깅이 불가능한 것은 아니지만, 다른 기술 세트가 필요함

[결론]

     * JavaScript 생태계를 위한 새로운 세대의 툴이 나오고 있는 것은 좋은 일임
     * 기존의 툴들이 매우 느리고 경쟁으로부터 혜택을 볼 것으로 보임
     * 하지만 JavaScript 자체가 본질적으로 느리다거나, 개선의 여지가 없다고 생각하지는 않음
     * Chromium 개발자 도구의 최근 개선사항을 보면 아직 갈 길이 멀다는 생각이 듦
     * Rust와 Zig 개발자들만의 전유물이 되는 세상이 어떨지 우려됨
     * 평균적인 JavaScript 개발자가 빌드 툴의 버그에 직면했을 때 무력감을 느낄 수 있음
     * 젊은 웹 개발자들에게 배운 무기력함을 가르치는 셈이 될 수 있음
     * 이는 알려지지 않은 길을 가는 것이며, 의도치 않은 결과를 초래할 수 있음
     * 반면 덜 위험하면서도 거의 같은 결과를 얻을 수 있는 다른 길이 있음
     * 하지만 현재의 흐름은 둔화될 기미가 보이지 않음

GN⁺의 의견

     * Rust나 Zig 등으로 재작성하는 것이 항상 최선은 아닐 수 있음. Compile cache 등 JavaScript에서 개선할 여지가 더 있어 보임
     * 초보개발자들에게 세그폴트 같은 복잡한 문제를 마주하게 하는 것이 과연 좋은 지 의문. 오히려 무기력함 만 가르칠 수도
     * 오랫동안 JavaScript로 구축해온 생태계의 장점(라이브러리 간 자유로운 수정, 익숙한 디버깅 환경 등)을 희생하면서까지 속도를 높이는 것이 과연 좋은 방향일지 고민해 봐야 함
     * 기존 JavaScript 라이브러리들의 개선 노력도 지속되어야 할 것으로 보임. 아직 JavaScript의 가능성이 다 발굴되지 않은 상태
     * 비록 대세는 거스를 수 없어 보이지만, 이런 방향성에 대해서는 커뮤니티 차원의 진지한 토론과 고민이 더 필요해 보임

   구멍가게와 대형매장의 운영방식이 좀 다를 수 있죠. 바꾸는 자체에 비판적 자세보단 이러한 현상의 의미를 생각해 보는게 건전한 생각이라 봅니다
   취향이나 유행타서 바꿀수 있어 보이기도 하지만 기업이 보통 그렇게 의사 결정을 하진 않잖아요

   파이썬이나 자바스크립트 자체가 느린가? 에는 그렇다고 할 수 없더라도
   자주 사용되는 파이썬이나 자바스크립트를 이용한 툴이 느린가? 는 Yes라고 생각합니다.
   저전력 기기 여러 대를 사용 중인데 정말 분통 터지게 느린 도구들 많아요..

   파이썬 커뮤니티쪽에서도 거의 똑같은 래퍼토리의 이야기가 반복되고 있습니다.

   자바스크립트는 자바스크립트로 작성되지 않았지만, 대부분의 자바스크립트 개발자들은 그 부분에 대해 신경쓰지 않습니다. ""초보개발자"", ""젊은 웹 개발자""들에게 자바스크립트가 자바스크립트로 작성되지 않은 것은 문제가 되지 않지만 자바스크립트 개발도구는 자바스크립트로 작성되지 않은게 문제가 된다는 것은 앞뒤가 잘 맞지는 않는 이야기입니다. 오히려 그런 걸 신경쓰는 개발자들은 양 쪽 그룹 가운데의 극소수가 존재할 뿐이지요.

   충분한 최적화를 거치면 거의 비슷한 속도를 낼 수 있다는 점을 부정하지 않더라도, 정말 그럴 가치가 있을까요?
   그저 한 때 개발도구를 C++로 작성하지 않고 자바스크립트로 작성하는게 더 경제적이 되었던 시대에서 자바스크립트로 작성하는 것보다 Rust로 작성하는 것이 더 경제적인 시대로의 전환이 도래한 것이고요.
   흐름을 되돌릴 방법은 더 많은 비용을 들여서 자바스크립트로 최적화하기 운동을 전개하는 것이 아니라 더 적은 개발비용을 들이고도 효율적인 자바스크립트 도구를 개발할 수 있도록 만들어내는 쪽이지요. (비슷한 말처럼 보일수도 있겠지만 노력을 어디에 들이냐에서 차이가 있습니다)

   동의합니다. 경제성을 도구 사용자 중심으로 재정의해야 한다고 생각합니다.

   그동안 경제성은 도구 사용자보다는 도구 개발자를 고려한 지표이지 않았나 싶습니다. 도구 사용자들이 경험해야 하는 비효율성과 성능 문제는 우선순위에서 비교적 뒷전으로 밀려있던 느낌입니다. 개인적으로 uv나 vite를 잘 쓰고 있고 가능하다면 pip나 create-react-app 같은 도구는 피하고 싶네요

   CLI 도구는 런타임 없이 동작가능해야한다고 생각해서 동의하기 어렵네요.
   WASM 단독실행 파일 만들 수 있지 않냐고 하면 본문에서도 말하듯 성능 저하가 있을거고요.
   Java로 CLI 짜는게 보편적이지 않은 것처럼 JavaScript도 동일하다고 생각합니다.

   하지만 재작성 자체가 더 빠른 이유일 수 있음 -> 돌이켜보면 이게 참 맞는 말이네요...

   매우 선택적이기 때문에 이 분의 말에는 공감합니다.
   다만, 또 다른 차원에서 JS 말고도 다양한 해법이 존재한다는 것은 기술 진보 차원에서 매우 중요한 요소이기 때문에 그 반대 상황에 대해서도 존중받아야한다고 생각해요!

        Hacker News 의견

     * JavaScript는 본질적으로 느리다는 의견이 있음. 많은 엔지니어들이 이를 빠르게 만들기 위해 노력했지만, 여전히 정적 타입 언어보다 느림. 대규모 프로그램에서는 타입이 명확한 언어가 더 적합함
          + Rust와 Go는 도구 개발에 적합하며, TypeScript로 프로토타입을 만들지만 대규모 동시성 작업에는 다른 언어를 사용함이 바람직함
          + Rust의 타입 시스템은 도구 개발에 자신감을 주며, Go의 타입 시스템은 개선이 필요하다고 생각함
     * JavaScript는 배우기 쉽지 않으며, 복잡한 프로토타입과 타입 시스템을 가짐. TypeScript가 이를 보완하지만, 여전히 복잡함
          + JavaScript 생태계는 복잡하고 도구 사용이 어려움. Go는 배우기 쉬우며, 도구 사용이 간단함
          + JavaScript에서 동시성을 구현하려면 복잡한 개념을 이해해야 함
     * 언어 변경만으로도 성능이 크게 향상될 수 있음. 기존 시스템을 JS와 PHP에서 Go로 변경했을 때 8-10배의 성능 향상을 경험함
     * 병렬 처리의 중요성이 간과되고 있음. Rust는 병렬 코드 작성에 적합하며, JS는 병렬 코드 작성에 적합하지 않음
          + Rust는 스레드 안전성을 보장하여 유지보수 문제를 줄임
     * JavaScript는 이제 Java와 비슷한 속도를 가지며, C++보다 2-4배 느림. 성능을 높이려면 편안한 영역을 벗어나야 함
          + 성능에 대한 개발자들의 반응이 극단적이어서 다른 직업으로 전향함
     * Rust, Zig, Go 프로그램은 소스 코드를 확인하고 컴파일하기 쉬움. 새로운 언어를 배우면 문제 해결 방식에 영향을 줌
     * JavaScript 도구의 성능을 높일 가능성을 다 소진하지 않았다고 생각함. 더 나은 기반 위에 구축하는 것이 더 효율적임
     * Rspack은 Rust로 작성된 Webpack의 호환 가능한 재작성 버전으로, 성능이 5-10배 향상됨. Webpack을 쉽게 대체할 수 있음
     * JavaScript 의존성을 로컬에서 수정하는 것이 쉽지만, Rust는 버그가 적어 수정할 필요가 적음. Rust는 배우기 어렵지만, 이를 통해 다른 언어에서도 더 나은 프로그래머가 될 수 있음
          + 속도보다 정확성이 더 중요하며, 버그가 있는 라이브러리를 배포하면 사용자들의 시간을 낭비하게 됨

   필자가 SPA와 자바스크립트 도구 개발에 둘다 자바스크립트가 쓰이므로 그외에 필요한 제반 역량도 같다고 착각하는 것처럼 보입니다. 자바스크립트 도구에는 시스템 프로그래밍과 컴파일러 분야 역량이 필요하다고 생각합니다


     오랫동안 JavaScript 생태계에서는 라이브러리 작성자와 사용자 모두 JavaScript를 사용해 왔음
     이는 기여의 장벽을 낮추는 데 도움이 됨
     하지만 JavaScript 라이브러리 작성자가 다른 언어를 사용하면 이 점이 깨짐

   언어가 같더라도 실행 환경이 브라우저와 NodeJS로 다르고 그 간극을 넘을 수 있는 사람만 자바스크립트 도구에 기여할 수 있을텐데요. 실행 환경이 다르니 다른 생태계라고 봐야하지 않을까 합니다


     평균적인 JavaScript 개발자가 빌드 툴의 버그에 직면했을 때 무력감을 느낄 수 있음
     젊은 웹 개발자들에게 배운 무기력함을 가르치는 셈이 될 수 있음

   이것도 마찬가지로 SPA 개발과 자바스크립트 도구 개발의 경계를 넘을 수 있는 사람의 수를 과대평가한 지점이라고 생각합니다. 프론트엔드 개발자에게 시스템 프로그래밍에 준하는 지식을 요구하는 건 무리입니다. 도구 사용자는 표면적인 에러메시지나 현상만 이해할 수 있지 않나요? 언어만 알아서 해결되는 문제가 아니라고 생각합니다

   도구와 라이브러리를 섞어서 말하고 있는것 같네요. 라이브러리에 대해서는 어느 정도 공감할 수 있지만, 도구는 글쎄요..
   다른 언어 개발자들도 도구는 네이티브로 작성되어 있는데 익숙할텐데요.

   개인적으로는 도구던 라이브러리던 자바스크립트로 작성이 되어 있다면 자바스크립트에 익숙한 개발자들이 그것들을 디버깅하고 필요하다면 기여를 할 수있습니다. 그런데 러스트로 재작성 되어버리면 오픈소스 기여는 러스트 개발자들만 할 수 있게 되어버리는거죠. 자바스크립트 개발자의 파이가 러스트이 비해 압도적으로 크기 때문에 오픈소스 생태계에서 툴이던 라이브러리던 자바스크립트로 작성되는 것이 더 유리할 수있다는 거죠.

   자바스크립트는 브라우저와 NodeJS 로 실행환경이 파편화되어 있고, 따라서 언어 사용자 수 사이의 단순 비교는 논거로서 한계가 있다고 생각합니다. 백엔드 스프링 개발자와 JDK 개발자, 리액트/앵귤러/뷰 개발자와 자바스크립트 도구 개발자는 관심사와 입장이 다르며 소비자와 생산자의 관계입니다

   자바스크립트 도구의 성능과 사용성 개선 목표를 위해서라면 수단인 구현 언어를 바꾸는 것도 선택 가능한 선택지라고 개인적으로 생각합니다

   저는 개발 툴의 소비자와 생산자를 명확하게 구분하기 어렵다고 생각합니다. 회사가 규모가 생기면서 툴체인에 대한 커스텀이나 추가 플러그인들을 본인들이 원하는 규칙에 맞게 커스텀하거나 구현하는 경우가 많은데, 이 경우 동일 언어를 사용하는 것 만으로도 큰 이점이 있다고 생각합니다.
   툴의 사용자가 툴 자체의 개선사항이나 구현에 관심을 가져 자연스럽게 기여를 하게 되는 경우도 많구요.

   툴체인 커스터마이징에 관심이 생기거나 그 업무를 수행하는 사람은 소비자의 역할을 넘어서 프로슈머 내지는 생산자의 역할을 수행하고 있다고 생각하고요. 플러그인의 경우에는 생산자와 소비자 사이의 플러그인 규약 안에서 움직인다고 봅니다. 해당 상황에서 같은 언어를 사용하는 것이 별도의 설정파일 형식이나 확장포인트를 제공하는 것보단 기술적으로나 의사소통 비용에서나 도움이 되는 것은 저도 동의합니다

   다만 자바스크립트 도구의 성능 문제 내지는 NodeJS의 JIT 지연 문제가 소비자의 의사결정 범위에 있다고 생각하지는 않습니다. 그런 아키텍처와 동작 명세를 만든 주체는 툴 생산자와 런타임 개발자들이기 때문입니다

   자바스크립트 파이가 크다고 해서 컴파일러 / 트랜스파일러 코드베이스에 기여할 수 있는 개발자가 더 많을지는 의문입니다. 라이브러리 프레임워크와 기반 도구는 전혀 다른 영역이라고 생각합니다.
"
"https://news.hada.io/topic?id=17436","도메인 이름 구매 전, 유령인지 여부 확인 필요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       도메인 이름 구매 전, 유령인지 여부 확인 필요

     * 2022년 중반, musicbox.fun이라는 새로운 도메인 이름을 구매함. 그러나 이 도메인은 과거에 불법 음악을 호스팅했던 이력이 있었음.
     * 2018년부터 2021년까지 musicbox.fun은 수천 건의 저작권 침해 신고를 받았으며, 20,000개 이상의 URL이 검색 엔진에서 삭제됨. 이로 인해 도메인의 평판이 나빠져 검색 엔진에서의 순위가 떨어짐.
     * 도메인 이름이 ""유령이 씌었다""는 표현은 과거의 나쁜 평판이 검색 엔진에 영향을 미쳐 새로운 소유자가 검색 결과에서 순위를 올리기 어렵게 만드는 상황임

  도메인 이름이 유령이 씌었는지 확인하는 방법

    1. Wayback Machine 확인

     * archive.org에서 도메인 이름을 검색하여 과거에 어떤 웹 페이지가 있었는지 확인할 수 있음.
     * 불법적이거나 의심스러운 내용이 있었는지 확인 필요.

    2. DMCA 불만 검색

     * Google 투명성 보고서와 lumendatabase.org에서 도메인에 대한 저작권 불만을 검색할 수 있음.
     * 저작권 불만이 많거나 최근에 접수된 경우 주의가 필요함.

    3. 역사적 SEO 데이터 검색

     * 중요한 도메인 이름을 구매할 때는 역사적 SEO 데이터를 검색하는 것도 유용함.
     * ahrefs.com과 같은 고급 SEO 도구를 사용하여 백링크, 순위 역사, 트래픽 및 도메인 권한에 대한 정보를 얻을 수 있음.

  유령이 씌었다면 어떻게 해야 할까?

    1. 검색 엔진과 소통

     * Google Search Console과 Bing Webmaster Tools와 같은 도구를 사용하여 도메인 소유자로 등록하고 문제를 보고할 수 있음.
     * DMCA 불만이 있는 경우, 잘못된 불만에 대한 반박 통지를 제출하지 말아야 함.

    2. 최선의 관행 강화

     * 고품질의 구조화된 콘텐츠와 빠르게 로딩되는 사이트를 유지하는 것이 중요함.
     * 새로운 링크를 통해 나쁜 평판을 극복하는 것이 중요할 수 있음.

    3. 기다리기

     * 신뢰 점수를 회복하는 데 시간이 걸릴 수 있으며, 일부 사이트는 회복되지 않을 수도 있음.
     * 검색 엔진 알고리듬이 새로운 도메인 소유자에게 새 출발을 제공하면 좋겠지만, 현실적으로는 몇 가지 옵션만 존재함: 유령이 씌인 도메인 이름을 피하거나, 발견 시 포기하거나, 신뢰 점수를 회복하기 위해 많은 시간과 노력을 들이는 것.

GN⁺의 정리

     * musicbox.fun 도메인의 과거 이력으로 인해 검색 엔진에서의 순위가 떨어지는 문제를 겪음. 이는 도메인 이름의 과거 평판이 새로운 소유자에게도 영향을 미치는 ""유령이 씌인"" 도메인 문제로 설명됨.
     * 도메인 구매 전 과거 이력을 확인하고, 문제가 있는 도메인은 피하는 것이 중요함. 이미 유령이 씌인 도메인을 소유하고 있다면, 검색 엔진과의 소통 및 최선의 SEO 관행을 통해 문제를 해결할 수 있음.
     * 이 문제는 검색 엔진 알고리듬의 불투명성으로 인해 더욱 복잡해질 수 있으며, SEO 업계에서의 미신과 신비로움을 더함.

        Hacker News 의견

     * 개인적인 경험에서, DNS Blacklist 도구가 사이트 차단 해제에 매우 유용했음
          + 프리미엄 도메인을 구입하여 개인 예술 컬렉션을 호스팅했으나, 회사 컴퓨터에서 접근 불가하고 Google에서 목록에서 제외되었음
          + 전문가를 고용하고 회사의 CISO에게 조사 요청했으나, 과거에 애니메이션 포르노 집계 사이트로 사용되어 차단된 것 확인
          + 웹 필터에 직접 연락하여 예술로 재분류 요청 후 Google에서 제대로 색인됨
     * 소셜 미디어에서 도메인 차단 여부를 확인하는 방법도 있음
          + 프로젝트 도메인이 Facebook에서 차단되었고, 과거 스팸 문제로 인해 발생한 것 확인
          + 내부 인맥을 통해 문제 해결했으나, 과정이 매우 복잡했음
     * 검색 엔진 알고리즘이 새로운 도메인 소유자에게 새 출발을 제공해야 한다는 의견
          + 그러나 악용 가능성이 높아 현실적으로 어려움
     * 개인 프로젝트 도메인이 Google에서는 잘 보이지만 Bing/DuckDuckGo에서는 보이지 않음
          + Bing Webmaster Tools에서 ""발견되었으나 색인되지 않음"" 메시지 확인
          + 간단한 정적 Hugo 사이트이며, Cloudflare R2에 호스팅됨
     * 검색 엔진에서 평판을 쉽게 초기화할 수 있다면, 기존의 나쁜 평판 도메인을 ""새로운 관리""로 위장할 가능성 있음
     * 오래된 도메인을 구입하여 SEO 효과를 얻는 방법이 일반적임
          + 15년 전의 문제로 인해 ""유령 도메인""이 될 수 있음
     * 반대 경험으로, 과거 다른 용도로 사용된 도메인이 Wikipedia에 링크되어 있어 긍정적인 효과를 얻음
     * 기본적인 SEO 작업으로 도메인 이력 확인 및 웹 아카이브 검토가 중요함
          + 해킹되거나 링크 농장으로 변한 사이트 확인 가능
     * 새로운 도메인 소유자에게 새 출발을 제공하는 것은 악용 가능성이 있어 문제 해결이 어려움
          + 충분한 검토 비용을 감당할 수 있는 큰 프로젝트가 아니라면 기존 도메인 구입을 피하는 것이 좋음
"
"https://news.hada.io/topic?id=17354","실패하지 말지어다: 실패를 피하라고 말하는 몇 안되는 글","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    실패하지 말지어다: 실패를 피하라고 말하는 몇 안되는 글

     * ""실패를 두려워하지 말라""는 메시지가 넘쳐나지만, 실패의 정의는 분명하지 않음
     * 실패는 '회복할 수 없게 되는 것'이며, 그렇기 때문에 반드시 피해야한다
     * 일반적으로 인식하는 실패를 '레버리지'로 생각함으로서 삶의 방향을 전환할 수 있음
     * 실패로 볼 것인가, 레버리지로 볼 것인가?
"
"https://news.hada.io/topic?id=17343","우리가 가장 싫어하는 PostgreSQL 부분 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    우리가 가장 싫어하는 PostgreSQL 부분 (2023)

PostgreSQL에서 가장 싫어하는 부분

     * PostgreSQL는 최근 5년간 인터넷에서 가장 사랑받는 DBMS로 자리 잡았음. 이는 신뢰성, 기능성, 확장성, 그리고 대부분의 운영 워크로드에 적합하기 때문임.
     * 그러나 PostgreSQL의 다중 버전 동시성 제어(MVCC) 구현 방식은 다른 관계형 DBMS들에 비해 가장 나쁜 것으로 평가됨.

  다중 버전 동시성 제어란?

     * MVCC의 목표는 여러 쿼리가 동시에 데이터베이스를 읽고 쓸 수 있도록 하여 서로 간섭하지 않도록 하는 것임.
     * DBMS는 기존 행을 덮어쓰지 않고 여러 버전을 유지하여 쿼리가 요청을 만족시키기 위해 적절한 버전을 선택함.
     * 이 방식은 명시적인 레코드 잠금이 필요 없게 하여 쿼리가 데이터베이스의 스냅샷을 관찰할 수 있게 함.

  PostgreSQL의 다중 버전 동시성 제어

     * PostgreSQL는 기존 행을 업데이트할 때 새로운 버전을 생성하여 변경 사항을 적용하는 추가 전용 버전 저장 방식을 사용함.
     * 이 방식은 여러 가지 복잡한 문제를 야기함.

    다중 버전 저장

     * PostgreSQL는 모든 행 버전을 동일한 저장 공간에 저장함.
     * 업데이트 시 새로운 버전 슬롯을 할당하고, 기존 버전을 복사하여 변경 사항을 적용함.
     * PostgreSQL는 버전 체인을 사용하여 버전 간의 관계를 기록함.

    버전 진공

     * PostgreSQL는 오래된 버전을 제거하기 위해 진공 절차를 사용함.
     * 자동 진공(autovacuum)은 정기적으로 실행되어 만료된 버전을 제거하고 공간을 재사용함.

  PostgreSQL의 MVCC가 최악인 이유

     * PostgreSQL의 MVCC 구현은 1980년대의 설계로, 현대의 로그 구조 시스템 패턴과 맞지 않음.
     * PostgreSQL의 MVCC에서 발생하는 네 가지 주요 문제를 설명함.

    문제 1: 버전 복사

     * PostgreSQL는 모든 열을 새로운 버전으로 복사하여 데이터 중복과 저장 요구량을 증가시킴.
     * MySQL과 Oracle은 델타를 저장하여 이러한 문제를 피함.

    문제 2: 테이블 부풀림

     * PostgreSQL의 만료된 버전은 공간을 차지하며, 자동 진공이 이를 제거하지 못하면 데이터베이스가 계속 성장함.
     * 이는 쿼리 성능을 저하시킴.

    문제 3: 보조 인덱스 유지보수

     * PostgreSQL는 각 업데이트마다 모든 인덱스를 업데이트해야 함.
     * 이는 쿼리 성능을 저하시킴.

    문제 4: 진공 관리

     * PostgreSQL의 성능은 자동 진공의 효과성에 크게 의존함.
     * 자동 진공이 제대로 작동하지 않으면 성능 문제가 발생함.

  GN⁺의 정리

     * PostgreSQL는 여전히 많은 사랑을 받는 DBMS이지만, MVCC 구현 방식은 현대적이지 않음.
     * PostgreSQL의 MVCC 문제를 해결하기 위해 많은 시간과 노력이 필요함.
     * PostgreSQL의 자동 진공 설정을 최적화하여 성능을 개선할 수 있음.
     * PostgreSQL의 MVCC 문제를 해결하기 위한 대안으로 MySQL과 Oracle을 고려할 수 있음.

        Hacker News 의견

     * OrioleDB는 새로운 저장 엔진으로 문제를 해결하려고 했음
          + INSERT 작업이 주로 이루어질 경우 추가 공간이 필요하지 않음
          + 트랜잭션 내의 명령문 수에는 제한이 있지만, COPY FROM을 사용하면 이를 피할 수 있음
          + DBA 관점에서 롤백/언두 공간을 별도로 관리할 필요가 없음
     * PostgreSQL의 설계가 모든 면에서 나쁜 것은 아님
          + MySQL과 Oracle은 새로운 버전과 현재 버전 간의 압축 델타를 저장함
          + git은 diff를 저장하지 않고 PostgreSQL과 유사하게 전체 객체를 저장함
     * Oracle과 MySQL의 MVCC 구현은 새로운 버전의 물리적 주소를 저장하지 않음
          + 대신 논리적 식별자를 저장하여 DBMS가 현재 버전의 물리적 주소를 찾음
          + 이로 인해 보조 인덱스 읽기가 느려질 수 있지만, 다른 장점으로 오버헤드를 줄임
     * MySQL에서 단일 행을 업데이트할 때 SELECT id WHERE something; UPDATE what WHERE id=id가 훨씬 빠름
          + 일반적인 작업에서는 이러한 방식이 사용되지 않으며, 이는 일회성 DML을 느리게 함
     * 2010년대에는 MongoDB가 비내구성 쓰기로 인해 ""webscale""로 인식되었음
          + 이는 마케팅의 결과였음
     * pg_repack에 대한 설명에 동의하지 않음
          + VACUUM FULL은 무겁지만, repack은 더 빠르고 가벼운 대안임
     * PostgreSQL이 인기를 얻은 이유는 다음과 같음
          + 데이터 안전성, ACID, Oracle과의 유사성, MVCC, SQL 표준 준수, Postgres 팀, 커뮤니티, 데이터 타입, 높은 성능, BSD 유연성
          + PostgreSQL은 지속적으로 발전하고 있으며, 커뮤니티가 큰 역할을 하고 있음
     * PostgreSQL의 전체 새로운 행-튜플 버전 저장은 기본 저장 엔진의 속성인지에 대한 질문이 있음
     * 기사가 잘 작성되어 읽기 쉽고 이해하기 쉬웠음
          + 진공 관련 문제를 이해하는 데 도움이 되었으며, 다이어그램도 좋았음
"
"https://news.hada.io/topic?id=17353","WebGPU 기반 WiFi 시뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          WebGPU 기반 WiFi 시뮬레이터

     * WiFi Solver 소개
          + WiFi Solver는 집 안에서 WiFi 신호 강도를 시뮬레이션하는 물리적으로 정확한 엔진임
          + 사용자의 기기에서 실시간으로 실행되며, 배경색을 변경하여 시뮬레이션을 조정할 수 있음
          + WebGPU 기술을 사용하여 그래픽 카드의 성능을 활용해 빠른 시뮬레이션을 제공함
     * 기능 및 특징
          + 상호작용 속도로 시뮬레이션을 실행하기 위해 최신 기술을 사용함
          + 스크롤 시 텍스트 박스 주변에서 파동이 굴절되는 것을 관찰할 수 있음
          + 다양한 테스트 시뮬레이션을 통해 기기의 성능을 확인할 수 있음
          + 강력한 GPU를 사용할 경우 집의 현실적인 시뮬레이션이 가능함
     * 작동 원리
          + WiFi Solver는 물리학 학위 과정에서 배우는 수학적 방정식을 사용하여 전자기파의 전파를 시뮬레이션함
          + WebGPU 기술을 통해 그래픽 카드의 성능을 최대한 활용하여 빠른 시뮬레이션을 가능하게 함
     * 추가 정보
          + WiFi Solver에 대한 더 많은 정보를 제공하며, Jason의 블로그에서 다른 프로젝트도 확인할 수 있음

GN⁺의 정리

     * WiFi Solver는 WiFi 신호 강도를 물리적으로 정확하게 시뮬레이션하여 사용자에게 유용한 정보를 제공함
     * WebGPU 기술을 활용하여 빠른 시뮬레이션을 가능하게 하며, 이는 특히 강력한 GPU를 가진 사용자에게 유리함
     * 이 시뮬레이션 엔진은 물리학의 수학적 원리를 기반으로 하여 신뢰할 수 있는 결과를 제공함
     * 유사한 기능을 가진 다른 프로젝트로는 NetSpot이나 Ekahau HeatMapper 등이 추천됨

        Hacker News 의견

     * 한 사용자는 방 안에서의 능동 소음 제거 시스템을 만들고 싶었음. 마이크와 스피커를 전략적으로 배치하여 소리를 제거하는 것을 상상했으나, 3D로 생각해야 한다는 점에서 복잡해짐을 깨달았음
     * 시각화가 멋지지만, 실제 6-12.5cm 파장의 커버리지 패턴보다는 예술 프로젝트로서의 재미에 더 집중하고 있음
          + projectM과 Geisswerks 같은 오픈 소스 도구들을 언급하며, 음악 시각화에 관심 있다면 NestDrop도 추천함
     * 스크롤 시 텍스트 박스 주위에서 파장이 굴절되는 것을 볼 수 있음. 이는 쓸모없지만 멋있음
     * 버그가 있음
          + ""새 소스 추가"" 버튼을 여러 번 누르면 배열이 넘쳐 JavaScript 예외가 발생함
          + 그래픽 카드나 드라이버에 따라 스크롤 시 시뮬레이션이 깨질 수 있음. 예를 들어, 빠르게 위아래로 스크롤하면 데이터가 손상됨
     * 시스템 요구 사항에 대해 질문함. Chrome을 사용하는 표준 Linux 시스템에서 WebGPU가 지원되지 않음을 알림
     * 시각화가 멋지며, 빔포밍을 시연하는 BeamLab을 떠올리게 함. Hamina의 무료 버전이 Wi-Fi 레이아웃 최적화에 더 유용할 수 있음
     * ""WebGPU가 장치에서 지원되지 않음""이라는 오류 메시지가 나옴. Firefox와 Nvidia 사용자가 이에 대해 불만을 가짐
     * 유사한 프로젝트로 cemsim.com을 소개함
     * Shadertoy에서 유사한 개념을 찾을 수 있음
     * SDR 라디오 처리에 대한 기대를 언급하며, GPIO에서 읽은 노이즈를 웹 브라우저로 전달하여 모든 채널의 활동을 보여주는 것을 상상했음
"
"https://news.hada.io/topic?id=17390","USGS, 머신러닝 활용하여 아칸소 대규모 리튬 잠재력 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   USGS, 머신러닝 활용하여 아칸소 대규모 리튬 잠재력 발표

미국 지질 조사국의 연구

     * 아칸소의 리튬 잠재력: 미국 지질 조사국(USGS)은 아칸소 남서부의 스맥오버 지층에 5백만에서 1천9백만 톤의 리튬 매장량이 있을 것으로 추정함. 이는 2030년 세계 리튬 수요를 9배 초과할 수 있는 양임.
     * 스맥오버 지층: 이 지층은 고대 바다의 잔재로, 아칸소, 루이지애나, 텍사스, 앨라배마, 미시시피, 플로리다에 걸쳐 있는 다공성 석회암 지질 단위임. 최근에는 리튬이 포함된 염수로 주목받고 있음.
     * 기술적 접근: USGS와 아칸소 주 에너지 환경국의 협력으로, 기름 및 가스 생산 중 발생하는 염수에서 리튬을 추출하는 방법이 개발됨. 이는 폐기물로 간주될 수 있는 자원에서 귀중한 상품을 추출할 기회를 제공함.
     * 리튬의 중요성: 리튬은 배터리 생산에 필수적인 광물로, 전기 및 하이브리드 차량으로의 전환이 가속화됨에 따라 수요가 증가하고 있음. 미국은 리튬의 25% 이상을 수입에 의존하고 있음.
     * 예측 모델: USGS는 기계 학습을 사용하여 아칸소 남부 스맥오버 지층의 총 리튬 양을 최초로 추정함. 이 모델은 염수의 리튬 농도와 지질 데이터를 결합하여 리튬 농도를 예측하는 지도를 생성함.

GN⁺의 정리

     * 이 연구는 미국 내 리튬 생산을 증가시켜 수입을 대체할 수 있는 가능성을 제시함으로써 경제적 중요성을 강조함.
     * 스맥오버 지층의 리튬 잠재력은 에너지 전환에 중요한 역할을 할 수 있으며, 이는 고용 및 제조업에 긍정적인 영향을 미칠 수 있음.
     * 기계 학습을 활용한 예측 모델은 지질학적 데이터와 결합하여 리튬 농도를 예측하는 데 유용함.
     * 이 연구는 리튬 수요 증가에 대응하기 위한 과학적 접근의 중요성을 보여줌.

        Hacker News 의견

     * RF 머신러닝 모델이 리튬 농도를 예측하는 데 사용되었음. RF 모델은 XGBoost와 K-nearest neighbors보다 높은 정확성과 낮은 편향을 보여 최종 모델로 선택되었음
          + 지질학적, 지구화학적, 온도 정보가 RF 모델 조정에 사용되었음
          + 공간적으로 연속적인 예측을 위해 지하 지질 정보가 중요함
     * 네바다에 큰 리튬 매장지가 있으며, General Motors가 Thacker Mine의 생산물에 접근하기 위해 6억 5천만 달러를 투자했음
          + 광산은 Mill City 근처에 위치하며, 개발의 징후가 보임
          + 광산 주변에 이웃이 없고, 도로와 철도 접근성이 좋음
     * 단기 에너지 인프라에는 긍정적이지만, 환경 파괴에 대한 우려가 있음
          + ML 예측이 정확하다면, 폐수 염수 데이터를 기반으로 모델링할 수 있음
          + 리튬 추출 방법에 대한 정보가 부족함
     * 리튬 공급은 문제가 아니며, 호주에는 충분한 공급이 있음
          + 전환 공장이 주로 중국에 있어, 리튬 카보네이트로 전환할 정제소가 필요함
     * 공간적 자기상관에 대한 언급과 함께, USGS가 다시 이 분야에 관심을 가지는 것이 긍정적임
     * Mobile Basin에서의 채굴에 대한 반대 의견이 있음. 이 지역은 북미에서 가장 다양한 생태계를 가짐
     * 리튬이 풍부해지면 배터리 비용이 크게 낮아질 수 있는지에 대한 질문이 제기됨
     * 남부 아칸소에서 저렴한 땅을 구매할 시기가 왔다는 의견이 있음
"
"https://news.hada.io/topic?id=17430","스마트폰 구매자들, AI보다 배터리 수명에 더 관심","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      스마트폰 구매자들, AI보다 배터리 수명에 더 관심

     * 스마트폰 사용자의 25%가 AI 기능을 별로 도움이 되지 않는다고 생각하며, 45%는 AI 기능에 대해 월 구독료를 지불하는 것을 꺼려하고, 34%는 프라이버시 문제를 우려함
     * 스마트폰 사용자의 52%는 폴더블 폰 구매에 관심이 없음
     * 미국 성인 스마트폰 사용자들의 주요 업그레이드 동기는 더 긴 배터리 수명(61%), 더 많은 저장 공간(46%), 더 나은 카메라 기능(38%)임. AI 통합은 단지 18%만 주요 동기로 꼽음

Apple Intelligence 공개를 앞두고 스마트폰 사용자의 1/4이 AI에 호감을 갖지 않음

     * Apple, Google, Samsung 등 스마트폰 제조사들이 최신 기기에서 AI 기능을 강조하고 있음
     * 하지만, CNET 설문조사 결과 스마트폰 사용자의 4분의 1은 이러한 기능이 별로 유용하지 않다고 생각하며 단지 18%만이 AI 통합이 기기 업그레이드의 주 동기라고 응답함.
     * 사실 응답자들은 새 기기 구매의 가장 큰 동인으로 더 긴 배터리 수명(61%), 더 많은 저장 공간(46%), 더 나은 카메라 기능(38%)을 꼽음.
     * Apple이 다음 주에 Siri 개선, AI 기반 작문 도구, ChatGPT 통합 등을 포함한 Apple Intelligence의 공개 출시를 앞두고 있는 시점임
          + Apple Intelligence는 iPhone 15 Pro 모델과 iPhone 16 라인업에서 이용 가능할 예정
     * Google도 8월 Pixel 9 시리즈 공개 시 AI 기능을 대폭 강조했으며, 가상 비서와 자연스러운 대화를 나눌 수 있는 Live 같은 새로운 Gemini 기능을 주로 설명함
          + 7월 Unpacked 행사에서 Samsung은 메시지 번역, 사진 편집 등의 작업을 단순화할 수 있는 Galaxy AI를 홍보함.

AI 기능 사용에 대한 추가 비용 발생 가능성

     * 기술 기업들이 AI 기능을 계속 출시함에 따라 소비자들은 이를 계속 사용하려면 추가 비용을 지불해야 할 수도 있음.
          + Samsung 웹사이트에 따르면 Galaxy AI 기능은 지원되는 Galaxy 기기에서 2025년 말까지 무료로 제공될 예정임.
          + Google 앱 전반에서 Gemini의 모든 기능을 활용하려면 Gemini Advanced 구독이 필요함.
          + Apple도 향후 일부 AI 기반 iPhone 기능에 대해 요금을 부과할 가능성이 있음.
     * 많은 소비자들이 이에 동의하지 않음.
          + 스마트폰 사용자의 절반 가까이가 폰에서 AI에 액세스하기 위해 추가 비용을 지불할 의사가 없다고 함.
          + 4월 CNET 연구에 따르면 미국 성인들은 매월 평균 91달러를 구독 서비스에 지출하고 있으며, 응답자의 3분의 2가 지난 1년 동안 최소 1개의 구독 서비스 비용이 더 비싸졌다고 함.
          + 따라서 또 다른 월 요금을 추가하는 것은 그다지 매력적이지 않을 수 있음.
     * 그럼에도 불구하고 폰에서 AI를 활용하고 싶어하는 사람들도 있는데, Z세대와 밀레니얼 세대가 가장 열성적임.
          + 각 세대 응답자의 20%가 AI 기능에 대해 흥미로워하며 도움이 된다고 생각함.
          + 또한 Z세대의 15%와 밀레니얼 세대의 16%는 사진 편집, 이미지 생성, 텍스트 요약 또는 작성 등의 작업에 폰에서 AI를 사용함.
          + Z세대의 20%와 밀레니얼 세대의 19%는 ChatGPT나 Google Gemini 같은 AI 도구를 스마트폰에서 정기적으로 사용함.
     * AI와 관련하여 프라이버시는 여전히 주요 우려사항이며 스마트폰 사용자의 3분의 1(34%)이 이에 대한 우려를 표명함.
          + 기술 기업들은 AI 중심의 기조연설에서 프라이버시 고려사항을 더욱 강조하고 있음.
          + 예를 들어 6월 WWDC에서 Apple은 대부분의 AI 모델이 기기 내에서 실행된다고 언급했는데, 이는 일반적으로 정보가 인터넷을 통해 이동할 필요가 없기 때문에 더 프라이빗한 것으로 간주됨.
          + 작업에 더 많은 연산 능력이 필요한 경우 관련 데이터는 Apple Silicon 서버로 전송되며 이 데이터는 저장되거나 Apple에서 액세스할 수 없음.

폰 업그레이드의 가장 큰 이유

     * AI가 소비자들이 스마트폰을 업그레이드하려는 마지막 이유 중 하나인 가운데, 더 긴 배터리 수명, 더 많은 저장 공간, 더 나은 카메라 기능과 같은 다른 고려사항이 여전히 우세함.
          + 기타 동기로는 폰 디스플레이 및 화면 크기(32%), iOS 또는 Android 같은 동일한 생태계 유지(24%), 폰 색상(10%) 등임.
     * 기기 비용이 높기 때문에(많은 플래그십 폰의 가격이 800~1,200달러 사이) 소비자들은 기기를 자주 업그레이드하고 싶어하지 않을 수 있음.
          + 설문조사에 따르면 44%가 현재 사용 중인 폰이 고장나거나 교체가 필요할 때만 새 기기를 산다고 주장함.
          + 또한 30%는 기기를 3년 이상 사용하고, 18%는 2년마다 업그레이드하며, 8%만이 매년 새 폰을 구입함.
     * 다행히 소비자들을 위해 Apple은 iPhone 16 가격을 인상하지 않았음.
          + 그럼에도 iPhone 사용자들은 다른 스마트폰 사용자들보다 기기를 더 오래 사용함.
          + 3분의 1이 업그레이드를 위해 3년 이상 기다릴 것임.

폴더블 폰에 대한 관심은 아직 높지 않음

     * Google과 Samsung은 Pixel 9 Pro Fold, Galaxy Z Flip과 Fold 6 등 폴더블 폰을 계속 출시하고 있음.
          + 그러나 소비자들은 여전히 폴더블 휴대기기 개념에 대해 미온적임.
          + 스마트폰 사용자의 52%는 폴더블 폰 구매에 관심이 없다고 말하는 반면 13%는 향후 2년 내에 관심이 있을 것이라고 말함.
     * 이는 아직 폴더블 폰 시장에 진출하지 않은 Apple에게 그 관심을 활용할 기회를 제공함.
          + 전문가들은 오랫동안 폴더블 iPhone이 폴더블 스마트폰의 더 광범위한 채택을 촉진하는 계기가 될 수 있을 것이라고 추측해 왔음.
          + 그러나 실제로 그렇게 된다면 그때까지 몇 년이 걸릴 수 있음.

GN⁺의 의견

     * AI 기능에 대한 관심이 부족한 것은 기존 스마트폰 기능으로도 충분히 만족스러운 사용 경험을 제공하기 때문일 수 있음. 또한 새로운 AI 기능의 실용성에 대한 의구심도 있을 수 있음.
     * 프라이버시 우려는 AI 채택의 큰 장벽 중 하나임. 사용자 데이터 활용에 대해 더 투명하고 선택권을 제공하는 것이 중요할 것임.
     * 폴더블폰은 가격이 비싸고 내구성 문제가 있어 대중화되기까지는 시간이 더 걸릴 것으로 보임. 기술 발전과 함께 개선이 필요함.
     * 스마트폰 제조사들은 배터리, 저장공간, 카메라 등 소비자들이 실제 중요하게 여기는 요소를 계속 개선해 나가는 것이 필요함. AI 기능만으로는 업그레이드 수요를 자극하기 어려울 것임.
     * 5G 서비스 확대, AR/VR 기술 발전 등으로 AI 활용 폭이 더 넓어질 것으로 전망됨. AI 기술 자체보다는 실생활에 어떤 혜택을 가져다 줄 수 있을지가 관건이 될 것임.

        Hacker News 의견

     * 플래그십 사양을 작은 크기에 갖추고 싶음. iPhone SE와 Pixel A 라인은 여전히 크고 이전 세대 사양을 가짐
          + AI의 실제 사용은 대부분 LLM 기반의 숨겨진 기능으로, 눈에 띄지 않음. iOS의 알림 요약 기능 등이 좋은 예시임
     * 현재의 생성 AI는 문제를 찾는 해결책 같음. Samsung의 유용한 AI 기능은 사진에서 지우기와 업스케일링임. 대부분의 앱에 챗봇이 필요하지 않음
     * 일상적인 AI 필요의 95%는 ChatGPT로 해결 가능함. Google Assistant에서 Gemini로 바뀌면서 알림 생성 기능이 사라짐
     * AI 회사들은 실제 사용 사례를 찾으려 하지만 현재의 투자를 정당화할 만한 것이 많지 않음
     * AI보다 Siri의 텍스트-음성 변환 품질이 더 중요함
     * AI를 원하지 않지만, 기기의 독점 때문에 선택의 여지가 없음
     * 통계가 기사 제목과 반대임. 25%가 AI 기능을 유용하지 않다고 생각하면, 75%는 유용하다고 생각하는 것인가?
          + 45%가 AI 기능에 월 구독료를 내기 꺼려하면, 55%는 기꺼이 내는 것인가?
          + 34%가 개인정보 보호에 대한 우려가 있으면, 66%는 우려가 없는 것인가?
     * 이메일, 문자, 웹 브라우저만 있으면 충분함. 더 많은 기능은 불필요함
     * 개인적으로는 휴대폰 사용을 줄이고 싶음. AI 기능의 통합은 더 많이 사용하게 하려는 전략 같음

   현재의 생성 AI는 문제를 찾는 해결책 같음 <- 이게 정말 맞는 말 같네요.
   정답은 다들 AI 라고 하는데, 풀어야할 문제는 뭔지 모르겠어요.
"
"https://news.hada.io/topic?id=17409","Show HN: RF Hunter v4.0 – 숨겨진 카메라 및 기타 장치 탐지기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show HN: RF Hunter v4.0 – 숨겨진 카메라 및 기타 장치 탐지기

     * ESP32, AD8317 RF 검출기 및 다양한 부품을 사용하여 구축된 RF 신호 스캐너
     * 환경에서 RF 신호를 감지하고 측정하여 OLED 디스플레이에 신호 강도를 표시함
     * 숨겨진 카메라, 도청 장치 및 기타 RF 장치를 찾는 데 유용

  Ready for Primetime

     * V4는 도구 없이 조립 가능하며, 배터리와 충전 컨트롤러를 위한 공간이 있음
     * 9V 배터리 대신 부스트 컨버터를 사용하여 하나의 배터리만 필요하며, 사용 주기에 따라 몇 주 또는 몇 달 동안 지속 가능함

  Bill of Materials (BOM)

   부품을 구매하려면 .cpp 파일에 나열된 Amazon 링크를 참조 바람. 이 링크는 제휴 링크가 아님. 어디서든 구매 가능함.
     * ESP32 개발 보드
     * AD8317 RF 전력 검출기
     * TP4056 리튬 배터리 충전 컨트롤러
     * 3.7V 리튬 이온 배터리
     * 부스트 컨버터 (3.3V to 9V)
     * OLED 디스플레이 (I2C, 128x64)
     * 포텐셔미터 (10k)
     * 피에조 버저
     * 전원 스위치

  Build Process

    1. 전원 회로 조립:
          + 배터리를 TP4056 충전 컨트롤러에 연결
          + TP4056 출력에서 전원 스위치로 연결
          + 전원 스위치 출력을 ESP32 5V VIN 및 부스트 컨버터 입력에 연결
          + 부스트 컨버터 출력을 9V로 조정
    2. AD8317 RF 검출기 연결:
          + 부스트 컨버터의 9V 출력으로 AD8317 전원 공급
          + VOUT 핀을 ESP32 GPIO 34에 연결
    3. OLED 디스플레이 설정:
          + VCC를 ESP32 3.3V에 연결
          + GND를 ESP32 GND에 연결
          + SDA를 ESP32 GPIO 21에 연결
          + SCL을 ESP32 GPIO 22에 연결
    4. 포텐셔미터 연결:
          + VCC를 ESP32 3.3V에 연결
          + GND를 ESP32 GND에 연결
          + 와이퍼를 ESP32 GPIO 35에 연결
    5. 피에조 버저 연결:
          + 양극을 ESP32 GPIO 5에 연결
          + 음극을 ESP32 GND에 연결
    6. 제공된 코드로 ESP32 플래시:
git clone https://github.com/ramborogers/rfhunter.git
cd rfhunter
pio run -t upload

    7. 케이스 조립

  Wiring Instructions

    Power Circuit:

    1. 배터리 (3.7V) 양극 -> 전원 스위치
    2. 전원 스위치 -> TP4056 충전 컨트롤러 (B+)
    3. TP4056 OUT+ -> ESP32 VIN 및 부스트 컨버터 IN+
    4. 부스트 컨버터 OUT+ (9V로 조정) -> AD8317 VCC
    5. 배터리 음극 -> TP4056 B- 및 ESP32 GND 및 부스트 컨버터 IN-
    6. 부스트 컨버터 OUT- -> AD8317 GND

    Signal and Control:

    7. AD8317 VOUT -> ESP32 GPIO 34 (RF_SENSOR_PIN)
    8. 포텐셔미터 VCC -> ESP32 3.3V
    9. 포텐셔미터 GND -> ESP32 GND
   10. 포텐셔미터 와이퍼 -> ESP32 GPIO 35 (POT_PIN)
   11. OLED 디스플레이 VCC -> ESP32 3.3V
   12. OLED 디스플레이 GND -> ESP32 GND
   13. OLED 디스플레이 SDA -> ESP32 GPIO 21 (OLED_SDA)
   14. OLED 디스플레이 SCL -> ESP32 GPIO 22 (OLED_SCL)
   15. 피에조 버저 양극 -> ESP32 GPIO 5 (BUZZER_PIN)
   16. 피에조 버저 음극 -> ESP32 GND

  Notes

     * 전원 스위치는 배터리에서의 주요 전력 흐름을 제어함.
     * TP4056 충전 컨트롤러는 배터리 충전 및 보호를 관리함.
     * 부스트 컨버터는 배터리의 3.3V를 AD8317 센서를 위해 9V로 승압함.
     * 모든 GND 연결은 공통이어야 함. 전원을 켜기 전에 모든 연결 및 전압 수준을 다시 확인 바람.

  Usage

    1. 전원 스위치를 사용하여 장치 전원 켜기
    2. OLED 디스플레이에 현재 RF 신호 강도가 표시됨
    3. 포텐셔미터를 사용하여 감도 조절
    4. 강한 RF 신호가 감지되면 피에조 버저가 울림

  Improvements and Feedback

   이 프로젝트를 개선할 방법을 항상 찾고 있음. 아이디어나 제안이 있으면 GitHub 저장소에 이슈를 열거나 풀 리퀘스트를 제출 바람. 이 프로젝트를 기반으로 RF 신호 스캐너를 제작한 경우, Twitter/X에서 @rogerscissp를 태그하여 공유 바람. 여러분의 피드백과 경험은 커뮤니티에 가치가 있음.

GN⁺의 정리

     * RFHunter V4.0은 ESP32와 AD8317을 사용하여 RF 신호를 감지하고 측정하는 프로젝트임. 숨겨진 카메라나 도청 장치를 찾는 데 유용함.
     * 이 프로젝트는 간단한 조립과 긴 배터리 수명을 제공하며, 사용자가 쉽게 제작할 수 있도록 상세한 부품 목록과 조립 지침을 제공함.
     * 이 프로젝트는 GNU GPLv3 라이선스 하에 제공되며, 사용자는 자유롭게 수정 및 배포 가능함.
     * RF 신호 감지와 관련된 다른 프로젝트로는 RTL-SDR과 HackRF가 있음. 이들은 더 복잡한 기능을 제공하지만, RFHunter는 간단하고 저렴한 솔루션을 제공함.

        Hacker News 의견

     * 반도체 장치는 전원이 꺼져 있어도 특정 설계가 없는 한 고주파 전자기 복사를 통해 감지할 수 있음
          + PN 접합의 비선형성으로 인해 반사된 복사에 영향을 미침
     * 2018년 저예산 소비자 하드웨어 스파이웨어 임플란트에 대한 논의가 있었음
     * 2019년 Airbnb의 숨겨진 카메라 문제에 대한 논의가 있었음
     * 1952년 'Great Seal Bug'의 재현: 전원 없이 외부 마이크로파 빔을 통해 데이터 추출
     * USB 허브, AC 전원 스트립, SSD 인클로저, 모니터의 RF 방출 측정을 시도할 수 있음
     * 방향성 안테나가 RF 소스 위치 파악에 도움이 될 수 있음
          + 'WokFi'라는 오래된 작업이 있음
     * AD8317 회로 설계에 대한 정보가 제공됨
          + 로그 슬로프가 22mV/dB로 설정된 AD8317 모듈 사용
          + 1GHz와 3.5GHz에서 선형성과 동적 범위가 좋음
     * 열화상 카메라가 숨겨진 카메라 탐지에 가장 효과적일 수 있음
          + 일반적인 숨겨진 카메라는 약 5W의 열을 방출함
     * TinySA와 같은 기성품을 사용하는 것이 좋음
     * 60Hz 이상의 EMF를 감지하는 장치를 원함
     * 과거에 다양한 장치의 방출을 듣기 위해 코일과 다이오드를 사용했음
     * 전자 음악을 위한 소리를 생성하는 프로젝트가 있음
     * 모든 RF 처리가 IC에 의해 처리된다면 PCB 설계가 어렵지 않을 것임
     * 더 쉬운 방법은 모든 불을 끄고 휴대폰 카메라로 주변을 살펴보는 것임
          + 휴대폰 카메라는 숨겨진 카메라의 IR 조명을 감지할 수 있음
     * 제목이 오해의 소지가 있음. RF만 감지함
          + 숨겨진 카메라는 저장 장치에 기록하여 나중에 업로드할 수 있음
     * 휴대용 위상 배열을 구축하여 전송 소스를 시각화하는 것을 꿈꿔왔음
     * 프로젝트에 대한 회로 다이어그램 추가 요청이 있었음
"
"https://news.hada.io/topic?id=17421","윈도 프리셀(Freecell) 게임의 카드 섞기 알고리즘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    윈도 프리셀(Freecell) 게임의 카드 섞기 알고리즘

   많은 분들이 플레이 해 보셨을 윈도의 프리셀은 카드를 무작위로 배열하고, 각 카드 배열마다 번호가 붙어있습니다. 같은 번호를 선택하면 동일하게 카드가 배열되죠.

   윈도 2000 이전까지는 1~32,000번까지 있었지만 XP 이후로 1,000,000번까지 늘어났습니다.

   번호를 입력했을 때 카드 배열을 생성하는 알고리즘은 공개되어 있어 다른 프리셀 프로그램들에서도 사용됩니다.

   이 알고리즘은 짧은 C 코드로 구현되었고, MS의 컴파일러에서 구현한 rand() 함수와 srand() 함수에 종속되어 있습니다.

   태그형님 잘치시네요

   원래 난수 발생 알고리즘은 random인 듯 보이지만 실은 그렇지 않은 pseudo-random number의 수열을 발생시키는 점화식을 사용합니다. 각 rand() 함수 구현마다 방식은 다르지만, 첫 번째 seed가 같으면 그 뒤에 따라 나오는 난수열이 동일함은 거의 모든 알고리즘이 공통으로 갖는 특성입니다. 그러니 카드 배열 알고리즘이 deterministic이라면 모든 카드 배열은 seed에 의해 deterministic으로 정해지는 셈이죠.

   살짝 주제에서 벗어나는 이야기지만, 얼마나 임의적으로 보이는 pseudo-random number를 생성할 수 있겠느냐도 오랜 연구 주제 중 하나였습니다. TAOCP Vol.2에서도 이 내용을 간략하게 다룹니다.

   사실 컴퓨터에서 랜덤이란 개념이 없죠.
   그래서 보통 사람의 행동을 ms단위로 측정해 이걸 랜덤 seed로 사용하죠.

   저는 난수가 현재 시간 timestamp를 사용하는 것으로 알고 있었는데 잘못 알고 있었네요 ㅎㅎ 공유 감사합니다.

   초기화 할 때 seed로 시간을 많이들 쓰긴 하지요. 시간은 계속 바뀌니까요.

   참고로 윈도 도움말에는 “증명되지는 않았지만 여기에서 플레이하는 게임은 모두 해결법이 있습니다”라고 쓰여있으나, 여러 사람들의 시도에 따르면 11982번은 지금까지는 깰 수 없는것으로 알려져있습니다.

   32,000번 너머에도 146692, 186216, 455889, 495505, 512118, 517776, 781948번 등 깰 수 없다고 알려진 카드 배열들이 있습니다.

   아니 이걸 어떻게 적어두고 못푸는지를 알아냈을까요? 독한 분들 많군요!

   무서운 사람들...!
"
"https://news.hada.io/topic?id=17352","커트 보니것의 미공개 보드 게임 출판","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          커트 보니것의 미공개 보드 게임 출판

커트 보니것의 잃어버린 보드 게임, 드디어 출판됨

     * 커트 보니것의 새로운 면모
          + 문학 팬들은 커트 보니것을 주로 소설 _Slaughterhouse-Five_로 알고 있음.
          + 보니것은 2007년에 사망했으며, 미국의 위대한 소설가 중 한 명으로 인정받았음.
          + 그러나 그는 또한 뛰어난 게임 디자이너였음.
     * 보드 게임 _GHQ_의 탄생
          + 1956년, 보니것은 첫 소설 _Player Piano_의 미온적인 반응 이후 생계를 위해 보드 게임 _GHQ_를 개발했음.
          + 이 게임은 현대의 결합 무기 전쟁에 대한 그의 이해를 바탕으로 하여 8x8 그리드에서 간단하게 플레이할 수 있도록 설계되었음.
          + 보니것은 이 게임을 출판사에 끊임없이 제안했으며, 최근 인디애나 대학교의 아카이브에서 이와 관련된 편지들이 발견되었음.
     * 게임의 복원과 출판
          + 게임 디자이너이자 NYU 교수인 Geoff Engelstein은 보니것의 유산의 허가를 받아 원본 규칙을 약간 수정하고 그래픽 디자인을 추가하여 _Kurt Vonnegut’s GHQ: The Lost Board Game_을 출판했음.
          + 이 게임은 이제 Barnes & Noble에서 구매 가능함.
     * 보니것의 작품과 _GHQ_의 대조
          + _GHQ_는 보니것의 후속 작품과는 매우 대조적임.
          + _Sirens of Titan_과 같은 작품은 전쟁에 대한 냉소적인 시각을 담고 있지만, _GHQ_는 전혀 그렇지 않음.
          + 보니것은 _GHQ_를 미래 군 지도자들을 위한 훈련 도구로 생각했음.
     * 게임의 역사적 맥락
          + 만약 _GHQ_가 1950년대에 성공적으로 출판되었다면, Tactics 2, Risk, _Diplomacy_와 같은 게임들과 함께 전쟁 관련 게임의 중요한 시기에 포함되었을 것임.
          + 이 게임들은 현대 전략 게임 장르에 큰 영향을 미쳤음.

GN⁺의 정리

     * 커트 보니것의 보드 게임 _GHQ_는 그의 문학적 작품과는 다른 면모를 보여줌.
     * 이 게임은 전쟁을 주제로 하지만, 보니것의 다른 작품과는 달리 냉소적이지 않음.
     * 보니것의 아들인 마크 보니것은 이 게임의 성공이 아버지에게 큰 기쁨이 될 것이라고 믿음.
     * _GHQ_는 이제 대중에게 공개되어, 보드 게임 팬들에게 새로운 영감을 줄 수 있음.
     * 유사한 기능을 가진 산업 내 다른 프로젝트로는 _Risk_와 _Diplomacy_가 추천됨.
"
"https://news.hada.io/topic?id=17404","체스사이트 Lichess.org에서 한 수를 둘 때 일어나는 일","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  체스사이트 Lichess.org에서 한 수를 둘 때 일어나는 일

     * Lichess 는 전 세계 수백만 명의 플레이어를 가진 무료 오픈 소스 체스 플랫폼
     * Chrome DevTools의 Network탭을 사용하여 클라이언트와 서버 간 통신을 모니터링

WebSocket 연결

     * 첫 주목할 만한 네트워크 동작은 다음과 유사한 URL로의 WebSocket 연결임:

wss://socket2.lichess.org/play/H5uHz0egyvIA/…

     * wss 프로토콜은 TLS를 사용하는 암호화된 웹소켓 연결을 나타냄
     * WebSocket은 전이중 통신을 허용하여 반복적인 HTTP 요청 없이 클라이언트와 서버 간 실시간 업데이트를 가능케 함

로컬 플레이어 차례

     * 동작을 수행하면 데이터 패킷이 교환됨:

// 22:51:35.280에 보냄
{
  ""t"": ""move"",
  ""d"": {
    ""u"": ""d2d4"",
    ""l"": 32,
    ""a"": 1
  }
}

     * 서버로부터 수신한 메시지:

// 22:51:35.312에 수신함
{
  ""t"": ""ack"",
  ""d"": 1
}

     * 서버가 우리의 동작을 수신했음을 알려줌

// 22:51:35.312에 수신함
{
  ""t"": ""move"",
  ""v"": 1,
  ""d"": {
    ""uci"": ""d2d4"",
    ""san"": ""d4"",
    ""fen"": ""rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR"",
    ""ply"": 1,
    ""clock"": {
      ""white"": 300,
      ""black"": 300
    }
  }
}

     * 이 메시지는 우리가 한 동작과 업데이트된 게임 상태에 대한 상세 정보를 제공함

상대방 차례

     * 상대방이 동작하면 유사한 패킷을 서버로부터 수신함:

// 22:51:43.489에 수신함
{
  ""t"": ""move"",
  ""v"": 2,
  ""d"": {
    ""uci"": ""d7d5"",
    ""san"": ""d5"",
    ""fen"": ""rnbqkbnr/ppp1pppp/8/3p4/3P4/8/PPP1PPPP/RNBQKBNR"",
    ""ply"": 2,
    ""dests"": {
      ""c2"": ""c3c4"",
      ""g2"": ""g3g4""
      // 추가 가능한 동작들
    },
    ""clock"": {
      ""white"": 300,
      ""black"": 300
    }
  }
}

     * dests 매개변수는 현재 위치에서 사용 가능한 모든 동작들을 나열함

Lichess의 아키텍처

     * Lichess의 실시간 플레이 시스템은 주로 두 개의 주요 서비스(둘 다 Scala로 작성됨)로 구성됨:
         1. lila: 게임 로직, 상태, 사용자 상호 작용 등 핵심 기능을 관리하는 코어 서비스
         2. lila-ws: 클라이언트와 lila 간 브릿지 역할을 하는 WebSocket 처리 전문 서비스

아키텍처 개요

lila <-> redis <-> lila-ws <-> websocket <-> client

     * **lila**는 Redis를 통해 **lila-ws**와 통신하고, 이는 클라이언트와의 WebSocket 연결을 관리함

Redis Pub/Sub을 사용한 통신

     * 동작 이벤트는 Redis Pub/Sub 채널로 게시되며, 여기에 **lila**가 구독하여 동작을 처리함
     * Redis Pub/Sub은 at-most-once 전송을 제공함. 메시지 손실이 가능하지만 메모리 사용량은 줄어듦

MongoDB와의 최종 데이터 영속성

     * **lila**는 MongoDB에 게임 상태를 저장하지만, 모든 단일 동작을 즉시 저장하지는 않음
     * 대신 동작을 버퍼링하고 주기적으로 저장하여 DB 부하를 줄임
     * 중요한 이벤트가 발생하면 게임 상태가 플러시됨

진행 중인 게임에 참여하기

     * 플레이어가 연결할 때 v 매개변수를 제공하여 자신이 알고 있는 게임의 최신 버전을 시스템에 알림
     * **lila-ws**는 **ConcurrentHashMap**을 사용하여 진행 중인 게임의 모든 이벤트를 추적하고 관리함

마무리

   Lichess에서의 동작 프로세스를 요약하면 다음과 같음:
    1. 클라이언트가 **lila-ws**에 WebSocket 연결 설정
    2. 플레이어가 동작을 수행하면 클라이언트가 **lila-ws**에 동작 이벤트 전송
    3. **lila-ws**는 동작 수신을 확인하는 ack 응답
    4. 동작 이벤트가 Redis Pub/Sub 채널에 게시되고 **lila**가 처리
    5. **lila**는 동작을 수신하여 게임 상태 업데이트하고 최종적으로 MongoDB에 저장. 업데이트된 게임 상태는 **lila-ws**를 통해 다시 클라이언트로 전송됨
    6. 클라이언트는 새 동작과 게임 상태 변경을 반영하는 업데이트된 게임 상태를 수신함

GN⁺의 의견

     * 이 게시물은 인기 있는 오픈 소스 체스 플랫폼인 lichess.org의 실시간 게임플레이를 가능하게 만드는 백엔드 아키텍처와 프로세스를 자세히 살펴봄
     * 실시간 웹 애플리케이션을 구축할 때 고려해야 할 주요 기술적 요소들을 소개하는데, 예를 들어 WebSocket을 사용한 실시간 통신, Redis Pub/Sub을 통한 확장성 있는 메시지 전달, MongoDB로 최종 데이터 저장 등
     * Lichess의 아키텍처는 실시간 멀티플레이어 게임에 매우 적합하지만, 채팅, 협업 도구, 소셜 미디어 피드 등 다른 유형의 실시간 웹앱에도 유사한 패턴과 기술을 적용할 수 있음
     * 실시간 기능은 사용자 경험과 상호 작용을 향상시킬 수 있지만, 확장성, 안정성, 데이터 정합성 등 고유한 기술적 과제도 제기함. 이 게시물은 이러한 과제를 해결하기 위한 전략을 제공함
     * 유사한 기술 스택을 사용하는 오픈 소스 프로젝트로는 Socket.IO(Node.js 기반 실시간 애플리케이션 프레임워크)와 RethinkDB(실시간 웹앱에 최적화된 NoSQL 데이터베이스) 등이 있음
     * 이 게시물의 분석은 Lichess의 소스 코드를 직접 검토한 것은 아니므로, 실제 구현에는 차이가 있을 수 있음. 하지만 설명된 기본 개념과 아키텍처 패턴은 여전히 유효함
     * 실시간 시스템을 설계할 때는 at-most-once(메시지 손실 가능성)와 at-least-once(메시지 중복 가능성) 전송 중 어떤 것이 더 적절할지 신중히 고려해야 함. 이는 애플리케이션의 요구 사항과 트레이드오프에 따라 다름

        Hacker News 의견

     * 체스.com의 시간 구조에 대한 불만이 있음. 서버가 시간을 추적하는 것 같아 전송 시간과 지연을 무시하는 것 같음. 모바일 클라이언트에서 시간 제한 게임을 할 때 특히 불편함
          + 네트워크 코드의 문제일 수도 있으며, 퍼즐에서 오류가 자주 발생함
          + Chess.com의 기술이 거칠게 느껴짐
     * Lichess는 StackOverflow 접근 방식을 선택했으며, 강력한 서버를 사용함
          + 게임 상태를 주기적으로 저장하지만, 어디에 저장하는지는 명확하지 않음
          + 게임당 비용이 매우 낮음: $0.00027, 3,671 게임당 1달러
          + 단일 데이터센터 의존성으로 인해 10시간의 중단이 발생한 적이 있음
     * 서버 측에서 움직임을 계산하는 것은 일관성을 보장하고, 제한된 처리 능력이나 에너지를 가진 클라이언트의 성능을 최적화함
          + 새로운 플랫폼에서 오픈 소스 소프트웨어 클라이언트의 구현 장벽을 낮추기 위한 것일 수 있음
          + 체스 규칙 구현이 번거로울 수 있으며, Lichess도 한때 논리 오류가 있었음
     * Redis pub/sub 채널에서 메시지 손실을 어떻게 처리하는지 설명이 부족함
     * ""l"" 매개변수는 서버에서 관찰된 지연을 나타내는 것일 수 있음
     * 서버가 모든 합법적인 다음 움직임을 열거하고 전송하는 것이 놀라움
          + 제한된 클라이언트에 유리할 수 있지만, 클라이언트 측에서 계산하는 것보다 저렴한지 의문임
     * 웹소켓 서버 보호 방법에 대한 질문이 있음
          + Cloudflare의 무료 플랜을 사용하면 지연이 발생함
          + 무료 솔루션에 대한 궁금증이 있음
     * 프로토콜이 왜 ack가 필요한지 궁금함
          + TLS로 감싼 웹소켓이 메시지의 무결성을 보장할 수 있음
     * FEN은 보드 상태만 인코딩하며, 게임 상태는 포함하지 않음
          + Scala로 작성된 scalachess 프로젝트는 성공적으로 유지되고 있음
"
"https://news.hada.io/topic?id=17427","Transformers.js v3 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Transformers.js v3 릴리즈

     * WebGPU 지원 (WASM 보다 100배까지 빠름)
     * 새로운 양자화 포맷 dtypes
     * 120개의 아키텍처 지원
     * 25개 새로운 예제 프로젝트와 템플릿
     * 1200개 이상의 사전 변환된 모델
     * Node.js (ESM + CJS), Deno 및 Bun 호환성

WebGPU 지원

     * WebGPU는 가속 그래픽과 컴퓨팅을 위한 새로운 웹 표준
     * 개발자가 브라우저에서 직접 시스템의 GPU를 사용하여 고성능 계산을 수행할 수 있게 해줌
     * WebGL의 후속작으로 현대 GPU와 더 직접적인 상호작용이 가능해 성능이 크게 향상됨
     * 또한 범용 GPU 계산을 지원하여 머신러닝에 적합함
     * 2024년 10월 기준 전 세계 WebGPU 지원율은 약 70% 수준
     * 브라우저에 따라 WebGPU를 활성화하려면 기능 플래그를 사용해야 할 수 있음
     * Transformers.js v3에서의 WebGPU 사용
          + ONNX Runtime Web과의 협업 덕분에 모델 로드 시 device: 'webgpu'를 설정하는 것만으로 WebGPU 가속을 활성화할 수 있음
          + 텍스트 임베딩 계산, 음성 인식, 이미지 분류 등에 WebGPU 사용 가능

새로운 양자화 포맷 (dtypes)

     * Transformers.js v3 이전에는 quantized 옵션으로 quantized (q8) 또는 full-precision (fp32) 모델 변형을 선택할 수 있었음
     * 이제 dtype 매개변수로 훨씬 더 많은 목록에서 선택할 수 있음
     * 사용 가능한 양자화 목록은 모델에 따라 다르지만 일반적으로 full-precision (""fp32""), half-precision (""fp16""), 8-bit (""q8"", ""int8"", ""uint8""), 4-bit (""q4"", ""bnb4"", ""q4f16"") 등이 있음
     * 모듈별 dtypes
          + Whisper나 Florence-2와 같은 일부 인코더-디코더 모델은 특히 인코더의 양자화 설정에 매우 민감함
          + 이러한 이유로 모듈 이름에서 dtype으로의 매핑을 제공하여 모듈별 dtypes를 선택할 수 있는 기능을 추가함

120개의 지원되는 아키텍처

     * 이번 릴리스에서는 지원되는 아키텍처 총 수가 120개로 증가했으며, 다양한 입력 양식과 작업을 아우르고 있음
     * 주목할 만한 신규 아키텍처들: Phi-3, Gemma & Gemma 2, LLaVa, Moondream, Florence-2, MusicGen, Sapiens, Depth Pro, PyAnnote, RT-DETR 등이 있음

25개의 예제 프로젝트 및 템플릿

     * 이번 릴리스의 일환으로 WebGPU 지원을 중점적으로 보여주는 25개의 새로운 예제 프로젝트와 템플릿을 출시함
     * Phi-3.5 WebGPU, Whisper WebGPU 등의 데모 포함

1200개 이상의 사전 변환된 모델

     * 릴리스 기준, 커뮤니티는 1200개 이상의 모델을 Transformers.js와 호환되도록 변환했음
     * 자신의 모델이나 파인튜닝을 변환하려면 제공된 변환 스크립트를 사용할 수 있음
     * 생성된 파일을 Hugging Face Hub에 업로드한 후 transformers.js 태그를 추가하면 다른 사람들이 쉽게 찾아 사용할 수 있음

Node.js (ESM + CJS), Deno 및 Bun 호환성

     * Transformers.js v3는 이제 세 가지 가장 인기 있는 서버 측 JavaScript 런타임과 호환됨
     * Node.js: 크롬의 V8에 구축된 널리 사용되는 JavaScript 런타임으로 광범위한 라이브러리와 프레임워크 지원
     * Deno: 기본적으로 보안이 우수한 JavaScript 및 TypeScript용 최신 런타임으로 ES 모듈을 사용하고 실험적 WebGPU 지원도 제공
     * Bun: 성능에 최적화된 빠른 JavaScript 런타임으로 내장된 번들러, 트랜스파일러, 패키지 관리자 제공

NPM 및 GitHub의 새로운 홈

     * Transformers.js는 이제 NPM의 공식 Hugging Face 조직에서 @huggingface/transformers로 게시될 예정 (v1과 v2에 사용된 @xenova/transformers 대신)
     * GitHub의 공식 Hugging Face 조직 (https://github.com/huggingface/transformers.js)으로 저장소를 이동했으며, 이곳이 새로운 홈이 될 것임

   Transformers.js - 트랜스포머를 브라우저에서 실행
   브라우저에서 직접 실행 가능한 Transformers.js
"
"https://news.hada.io/topic?id=17380","Rwf - Rust 웹 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Rwf - Rust 웹 프레임워크

     * Rwf는 Rust로 웹 애플리케이션을 구축하기 위한 종합적인 프레임워크
     * 고전적인 MVC 패턴(모델-뷰-컨트롤러)을 사용하여 작성되었으며, 빠르고 안전한 웹 앱을 쉽게 구축할 수 있는 모든 것을 기본으로 제공

  기능 개요

     * HTTP 서버
     * PostgreSQL 쿼리를 쉽게 작성할 수 있는 사용자 친화적인 ORM
     * 동적 템플릿
     * 인증 및 내장 사용자 세션
     * 미들웨어
     * 백그라운드 작업 및 예약 작업
     * 데이터베이스 마이그레이션
     * JSON 직렬화를 지원하는 내장 REST 프레임워크
     * WebSockets 지원
     * 정적 파일 호스팅
     * 백엔드 주도의 SPA 구축을 위한 Hotwired Turbo와의 긴밀한 통합
     * 환경별 구성
     * 로깅 및 메트릭
     * CLI
     * Django/Flask 앱에서 마이그레이션하기 위한 WSGI 서버

  빠른 시작

     * Rwf를 스택에 추가하려면 Rust 바이너리 애플리케이션을 생성하고 rwf와 tokio를 종속성에 추가함:

cargo add rwf
cargo add tokio@1 --features full

     * 앱을 구축하는 것은 다음과 같이 간단함:

use rwf::prelude::*;
use rwf::http::Server;

#[derive(Default)]
struct IndexController;

#[async_trait]
impl Controller for IndexController {
    async fn handle(&self, request: &Request) -> Result {
        Ok(Response::new().html(""Hey Rwf!""))
    }
}

#[tokio::main]
async fn main() {
    Server::new(vec![
        route!(""/"" => IndexController),
    ])
    .launch(""0.0.0.0:8000"")
    .await
    .unwrap();
}

  상태

     * Rwf는 초기 개발 단계에 있으며 프로덕션 준비가 되어 있지 않음. 많은 기능과 문서가 불완전함.

GN⁺의 정리

     * Rwf는 Rust로 웹 애플리케이션을 구축하기 위한 강력한 프레임워크로, MVC 패턴을 사용하여 빠르고 안전한 웹 앱을 쉽게 개발할 수 있는 다양한 기능을 제공함.
     * 초기 개발 단계에 있어 프로덕션 환경에서는 사용하기 어려울 수 있지만, 다양한 기능과 문서가 지속적으로 업데이트될 예정임.
     * Rust를 사용하여 웹 애플리케이션을 개발하고자 하는 개발자에게 유용하며, Django나 Flask와 같은 기존 프레임워크에서 마이그레이션을 고려하는 경우에도 도움이 될 수 있음.
     * 유사한 기능을 제공하는 다른 Rust 기반 웹 프레임워크로는 Actix, Rocket 등이 있음.

        Hacker News 의견

     * Go 언어의 표준 라이브러리 사용을 통해 복잡한 웹 프레임워크 의존성을 줄이고 보안성을 높이며, 유지보수가 용이함을 강조함
          + Rust에서는 여전히 웹 프레임워크가 유용할 수 있다는 의견을 제시함
     * 웹 MVC 프레임워크 사용 경험에서 비즈니스 로직을 모델 레이어에 두지 않도록 해야 한다는 교훈을 얻음
          + 서비스 레이어를 강력히 권장하며, Interactor 같은 gem을 사용하여 명령 객체로 구현하는 것을 제안함
     * REST 프레임워크가 Swagger 정의를 자동 생성할 수 있어야 한다고 기대함
          + 기존 ORM이나 템플릿 엔진을 사용하지 않고 자체 개발한 이유에 대해 궁금해함
     * 새로운 프레임워크의 이름 선택이 검색 결과 상위에 오를 수 있는 좋은 방법이라고 평가함
          + 새로운 아이디어를 탐구하는 것이 중요하다고 언급함
     * Python에서 Rust로의 마이그레이션에 관심을 가짐
          + 대규모에서는 Reverse Proxy로 처리해야 한다고 제안함
     * ORM을 웹 프레임워크의 내장 기능으로 포함하는 것이 처음에는 합리적으로 보일 수 있지만, 시간이 지나면 독립 프로젝트가 되거나 다른 ORM을 사용하고 싶어질 수 있다고 경고함
     * Rails와 Django 같은 강력한 의견을 가진 프레임워크가 더 필요하다고 언급함
     * Rust에서의 주요 공백을 채우는 프레임워크의 출시에 대해 기대감을 표함
     * Django 개발 경험을 통해 MVC의 가치를 깨달았으며, 새로운 프레임워크를 살펴볼 것임을 언급함
     * Rust 백엔드 작업을 위한 다양한 프레임워크를 평가한 결과 Axum이 가장 적합하다고 판단함
          + 새로운 프레임워크가 ""배터리 포함, 하지만 너무 규정적이지 않음""이라는 기준에 완벽히 부합한다고 평가함
"
"https://news.hada.io/topic?id=17448","오픈 멀티미디어 컨퍼런스 - Video Dev Days 2024 개최","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 오픈 멀티미디어 컨퍼런스 - Video Dev Days 2024 개최

   2024년 11월 2일(토)~11월 3일(일) 광운대학교에서 오픈 멀티미디어 컨퍼런스 Video Dev Days(VDD)가 열립니다.

   대상: 오픈소스 멀티미디어 기술 및 개발에 관심있는 누구나
   내용: VideoLAN, VLC, Kodi, libplacebo, mpv, ffmpeg 등의 개발자들이 모여 발표 및 워크샵을 진행 할 예정
"
"https://news.hada.io/topic?id=17423","기차를 놓치지 않기 위한 Rust 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        기차를 놓치지 않기 위한 Rust 프로젝트

     * 샌프란시스코에 살면서 대중교통을 많이 이용하게 되는데, 많은 앱들이 도착알림을 전체 경로에 대해서만 제공
     * 현재 위치와 가까운 도착알림만 킨들에 표시하도록 만들어서 나가기전에 확인 가능하도록 함
     * Kindle을 탈옥하여 USBNet을 활성화하고 SSH를 통해 접근할 수 있도록 설정함.
     * 이를 통해 디스플레이를 업데이트하는 cron 작업을 설정할 수 있음.
     * Kindle에 이미지를 표시하기 위한 첫 단계로, BART의 실시간 출발 페이지에서 스크린샷을 가져와 Kindle에 전송함.
     * 초기 시도에서는 이미지가 심하게 왜곡되어 표시됨.
     * 이미지의 크기와 색상 깊이를 조정하여 문제를 해결함.

  유용한 이미지 제공하기

     * Node.js 서버를 구축하여 Puppeteer를 사용해 BART 페이지의 스크린샷을 찍고, Kindle에 적합한 크기와 색상으로 조정하여 HTTP 엔드포인트를 통해 반환함.
     * Raspberry Pi에 서버를 설치하고, cron을 사용해 매분 이미지를 가져오도록 설정함.

  처음부터 다시 시작하기 - 아키텍처

     * Rust와 Axum을 사용하여 새로운 HTTP 서버를 구축함.
     * 511.org의 API를 사용해 Bay Area의 모든 정류장에 대한 도착 시간을 가져옴.
     * Skia 그래픽 라이브러리를 사용해 PNG 이미지를 직접 렌더링함.

  데이터 가져오기

     * 511.org의 API를 사용해 SF MUNI의 도착 시간을 가져옴.
     * JSON 응답을 파싱하여 필요한 정류장의 도착 시간만 필터링함.
     * 도착 시간을 정렬하여 각 방향별로 표시함.

GN⁺의 정리

     * 이 프로젝트는 오래된 Kindle을 활용하여 실시간 대중교통 정보를 표시하는 시스템을 구축하는 과정을 다룸.
     * Rust와 Skia를 사용하여 효율적이고 신뢰성 있는 시스템을 구축함.
     * 대중교통 정보를 실시간으로 제공함으로써 사용자에게 유용한 정보를 제공할 수 있음.
     * 유사한 기능을 가진 프로젝트로는 Raspberry Pi 기반의 스마트 디스플레이 프로젝트가 추천됨.

        Hacker News 의견

     * OneBusAway는 오픈 소스 프로젝트로, 많은 사람들이 매일 버스, 기차, 트램, 케이블카의 위치와 도착 시간을 확인하는 데 사용됨
          + OneBusAway 서버가 있는 도시에서는 새로운 SDK를 사용하여 맞춤형 앱을 개발할 수 있음
          + 서버가 없는 도시에서는 Docker 이미지와 OpenTofu 설정을 통해 GTFS 및 GTFS-RT 피드를 REST API로 변환할 수 있음
          + 미국의 모든 교통 기관은 새로운 연방 규칙에 따라 최소한 정적 일정 데이터를 GTFS로 공개해야 함
          + 소프트웨어 개발에 관심이 있는 개발자를 항상 필요로 하며, 모든 수준과 언어의 개발자를 환영함
          + 특히 iOS 개발자가 250,000명의 일일 사용자에게 필요한 개선을 제공하는 데 필요함
     * 다른 사용자는 OneBusAway와 유사한 기능을 제공하는 Öffi라는 앱을 언급함
     * BART와 MUNI는 General Transit Feed Specification을 지원하며, 표준 방식으로 데이터를 얻을 수 있음
     * Boston에서 차 없이 살았던 사용자는 다양한 경로를 통해 목적지에 도달하는 방법을 찾았으며, ""다음 출발"" 뷰가 유용했음을 언급함
     * 영국에서는 역 출발 보드를 모방한 출발 보드를 구매할 수 있음
     * Washington, DC에서는 버스와는 작동하지만 기차와는 작동하지 않으며, 기차와의 호환성을 위한 도움이 필요함
     * Kindle을 탈옥하지 않고도 웹 브라우저를 사용하여 날씨, 교통, 뉴스 화면을 쉽게 작성할 수 있음
     * SF에 사는 사용자는 iOS 앱 ""A Better Ride""를 개발하여 주변 정류장의 출발 시간을 보여주고, 교통을 예측 가능하고 탐색 가능하게 만듦
     * 사용자는 Google Maps와 같은 대안을 원하며, 기차가 고장 나거나 노선이 차단된 경우 대체 경로를 제공받고 싶어함
          + 예를 들어, 도쿄에서 시부야에서 아자부주반으로 가는 다양한 경로와 각 경로의 장단점을 설명함
     * Lenovo ThinkSmart View 태블릿을 사용하여 지역 교통 기관과의 통합을 통해 다양한 기능을 제공하는 시스템을 구축함
"
"https://news.hada.io/topic?id=17443","플라스틱 화학물질 프탈레이트, DNA 손상 및 염색체 결함 유발 연구 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               플라스틱 화학물질 프탈레이트, DNA 손상 및 염색체 결함 유발 연구 결과

        Hacker News 의견

     * 합성 의류는 플라스틱을 쉽게 흡입할 수 있는 방법 중 하나임. 합성 섬유로 만든 옷이나 침구류도 큰 문제임
          + 합성 섬유가 코에 닿으면 수천 개의 폴리에스터 입자가 공기 중에 방출됨
          + 베개, 매트리스, 수건도 대부분 합성 섬유로 만들어짐
     * 프탈레이트의 이야기는 상업적 규범의 문제점을 강조함
          + 프탈레이트는 화학적으로 분해되지 않으며, 인간의 몸에 미치는 영향에 대한 연구가 부족했음
     * Consumer Reports에서 음식에 포함된 플라스틱 화학물질을 보여줌
          + 제품마다 플라스틱 화학물질의 양이 예측 불가능함
     * 플라스틱을 가정용품에서 금지하는 것을 고려해야 함
     * 럭셔리 비닐 바닥재가 플라스틱 노출의 주요 원인임
          + 이 제품은 1:3 비율로 폴리머와 돌을 혼합하여 만듦
          + 첫 해에 최대 3%의 폴리머가 공기 중으로 방출됨
     * 플라스틱 섭취를 피하는 것은 거의 불가능함
          + 소비자로서의 선택은 미미한 영향을 미침
     * 인간에게서 발견된 염색체 수의 문제는 오해를 불러일으킬 수 있음
          + 염색체 수가 잘못된 사람들은 어디에 있는지 의문임
     * 대부분의 사람들은 플라스틱 문제에 관심이 없음
          + 이익을 얻는 사람들도, 제품을 구매하는 사람들도 관심이 없음
     * 플라스틱은 성인용 장난감에도 사용됨
"
"https://news.hada.io/topic?id=17412","골드만과 애플, 신용카드 고객에 대한 의무 "불법 회피" 논란","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   골드만과 애플, 신용카드 고객에 대한 의무 ""불법 회피"" 논란

     * Goldman Sachs와 Apple이 공동으로 제공하는 신용카드 고객에 대한 법적 의무를 회피하여 8,980만 달러를 지불해야 한다고 소비자금융보호국(CFPB)이 발표함.
     * Apple은 Apple Card 거래에 대한 소비자 분쟁을 Goldman Sachs에 전달하지 않았고, 전달된 분쟁에 대해서도 은행이 연방 요구사항을 따르지 않았음.
     * Goldman은 6,480만 달러를 지불하며, 이 중 1,980만 달러는 소비자에게 반환되고 나머지 4,500만 달러는 규제 당국에 대한 벌금으로 지불됨. Apple은 2,500만 달러를 CFPB에 지불함.
     * CFPB는 Apple과 Goldman이 소비자들에게 Apple 기기 구매 시 자동으로 무이자 할부가 적용될 것이라고 오도했으며, 일부 환불 처리에 대한 오해로 추가 이자 비용이 발생했다고 주장함.
     * CFPB는 Goldman이 새로운 신용카드를 출시하기 전에 법을 준수할 수 있음을 증명해야 한다고 경고함.

  추가 정보

     * Goldman Sachs는 2019년 Apple과의 카드 파트너십을 통해 소비자에게 신용을 제공하고 계정 관리를 담당했으며, Apple은 소비자 인터페이스 디자인, 마케팅 및 광고를 담당함.
     * CFPB는 Goldman의 이사회가 Apple Card 분쟁 시스템이 기술적 문제로 인해 완전히 준비되지 않았음을 알고 있었음에도 불구하고 출시를 강행했다고 밝힘.
     * 이로 인해 고객 분쟁 조사 및 환불 처리 실패로 인해 소비자에게 수백만 달러의 비용이 발생함.
     * Goldman은 소비자 대출 사업에서 철수하는 과정에서 어려움을 겪고 있으며, 최근 General Motors 신용카드 프로그램을 Barclays에 매각하면서 4억 1,500만 달러의 손실을 보고함.

  GN⁺의 정리

     * 이 기사는 금융 기관과 기술 기업이 법적 의무를 회피했을 때 발생할 수 있는 문제를 다루고 있음.
     * 소비자 보호의 중요성을 강조하며, 대형 기술 및 금융 기업도 법을 준수해야 함을 상기시킴.
     * Apple과 Goldman의 사례는 금융 서비스 제공 시 기술적 문제와 법적 준수의 중요성을 보여줌.

   불법 '회피'겠죠? ㅎㅎ

        Hacker News 의견

     * Apple/Goldman 카드의 거래 분쟁 처리에 실망하여 카드를 취소함. Frontier Airlines에서 환불을 거부한 사례가 있었음
          + Apple과 Goldman이 소비자에게 무이자 할부를 제공한다고 오도한 사례가 있음
          + Apple과 Goldman이 법을 준수하지 않으면 더 이상 신용카드를 출시할 수 없다는 제재를 받음
          + Goldman이 Apple Card 거래를 싫어하며 이 거래를 해제하거나 포트폴리오를 매각하려고 한다는 점이 흥미로움
     * Apple의 금융 분야 진출이 실패로 끝났으며, Vision Pro도 실패 상태임
          + Apple의 고위 임원들이 재배치되거나 회사를 떠나고 있음
          + Apple Intelligence는 아직도 모습을 드러내지 않음
          + Goldman Sachs와의 파트너십 결정이 고객 중심적이지 않다는 의견
     * CFPB의 보도 자료에 따르면 Apple과 Goldman Sachs가 Apple Card 실패로 인해 8,900만 달러 이상을 지불해야 함
     * Apple이 iCloud 구독료 10달러를 청구하지 못해 계정과 구매 내역을 잠그는 문제에 대해 언급함
     * Apple Card의 거래 내역과 PDF 명세서 간의 불일치를 경험함
          + 고객 서비스에 문의했을 때 대기 상태로 두고 조사를 약속했으나 해결되지 않음
          + AMEX 카드에서는 이런 문제가 없었음
     * Apple Card를 주로 사용하며, Daily Cash를 많이 적립했음
          + Wallet 앱이 다른 은행 앱보다 더 쾌적하다고 느낌
     * 개인적으로 Apple Card의 분쟁 처리 경험이 다른 카드보다 나았음
          + 앱이 분쟁 처리를 간단하게 만들어 줌
     * CFPB의 명령에 따라 Apple과 Goldman Sachs가 Apple Card 실패로 인해 8,900만 달러 이상을 지불해야 한다는 기사 출처 제공
"
"https://news.hada.io/topic?id=17362","마이크로소프트, Copilot 전용으로 활성화된 숨겨진 API를 VS Code에 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            마이크로소프트, Copilot 전용으로 활성화된 숨겨진 API를 VS Code에 도입

     * VS Code는 Proposed API라는 안정적이지 않은 API 집합을 통해 새로운 API를 부분적으로 릴리스하는 방법이 있음
     * Proposed API는 VS Code에 구현되어 있지만 안정적인 API로 공개되지 않으며, 변경될 수 있고 Insiders 배포판에서만 사용 가능하며 게시된 확장에서는 사용할 수 없음
     * 이는 커뮤니티에 새로운 API를 시험해 볼 수 있는 방법을 제공하고, 피드백을 받아 실시간 확장을 중단하지 않고 API를 빠르게 반복할 수 있게 해줌
     * 개발 모드에서만 API를 사용할 수 있지만, Proposed API가 포함된 확장을 스토어에 게시할 수는 없음

GitHub Copilot Chat 확장의 package.json 분석

     * GitHub Copilot Chat은 enabledApiProposals가 포함된 게시된 확장임
     * Microsoft이기 때문에 가능한 일임

이것이 중요한 이유

     * 반경쟁적 전술로 보임
     * VS Code 확장 API는 매우 제한적이어서 Cursor와 같은 스타트업은 VS Code를 포크하고 직접 변경 사항을 적용하는 방식을 선택함
     * GitHub은 Continue와 같은 오픈 소스 Copilot 대안에도 도움이 될 수 있는 많은 변경 사항을 도입하고 있지만, 자신들만 사용하고 있음

GN⁺의 의견

     * 이는 Microsoft가 자사의 GitHub Copilot 제품에 유리한 방향으로 VS Code 플랫폼을 발전시키고 있음을 시사함
     * 오픈 소스 프로젝트와 스타트업이 동등한 기능을 구현하기 위해서는 더 많은 노력과 자원이 필요할 것으로 보임
     * VS Code 사용자 입장에서는 더 많은 기능과 편의성을 제공받을 수 있겠지만, 장기적으로는 Microsoft의 영향력이 강화되고 독점으로 이어질 수 있다는 우려가 있음

        Hacker News 의견

     * 일부 사람들은 Copilot 팀이 가능한 한 빨리 개발을 진행하고 있다고 해석함. 이는 팀의 속도를 위해 우회적인 방법을 사용하고 있는 것일 수 있음
          + 공개 API를 푸시하는 데는 많은 시간과 에너지가 필요하며, 이는 Copilot 확장을 개발하는 팀과는 다른 팀일 가능성이 있음
          + ""악의로 해석하지 말라""는 순간처럼 보임
     * VSCode의 SSH 터널링 API가 존재하지만, 일반적으로는 특별한 플래그를 사용해야만 접근 가능함
          + 내장된 JavaScript 디버깅 확장은 이러한 API를 문제 없이 사용할 수 있음
          + 이러한 API에 대한 공개 정보는 거의 없으며, 2년 전에는 이를 공개할 계획이 없었음
     * 일부 사람들은 Microsoft에 대한 불만을 이해하지 못함
          + VSCode는 오픈 소스이며, API를 사용하고 싶다면 포크된 버전에서 사용할 수 있음
          + IE와는 달리 모든 기기에 사전 설치되어 있지 않으며, 사용을 강요하지 않음
     * Microsoft가 VSCode에 점진적으로 독점 기능을 추가하고 있다고 느끼는 사람도 있음
          + Rust와 Typescript 커뮤니티가 VSCode에 집중되어 있어 다른 에디터로 전환하기 어려움
          + Typescript가 Microsoft에 의해 관리되고 있는 것도 영향을 미침
     * 공개 API를 도입하기 전에 사용 사례와 이를 주도할 사람이 필요함
          + Microsoft가 다른 포크에 라이브 공유 설치를 허용하지 않는 이유는 다른 제품으로 간주되기 때문일 수 있음
          + 많은 회사들이 VSCode를 포크하여 성공하고 있으며, 모든 독점 플러그인을 기대할 수는 없음
     * VS Code 확장 개발을 경험한 사람은 이미 가능한 기능이 많다고 봄
          + 클라이언트 측에서 임의의 코드를 실행하거나, VS Code UI 내에서 전체 웹 애플리케이션을 실행할 수 있음
     * Microsoft가 제품 개발에 시간과 노력을 투자했으며, 이를 무료로 제공할 필요는 없다고 봄
          + 다른 코드 에디터를 사용하거나 직접 빌드할 수 있음
     * 플랫폼 소유자가 새로운 API를 자체적으로 시험해 보는 것은 일반적임
          + 안정화 전에 실제 사용 사례를 얻을 수 있는 좋은 방법임
     * EEE(Embrace, Extend, Extinguish)에 대해 이야기하는 사람들에게, 코드 에디터를 소멸시킬 수 있는지 의문을 제기함
          + Copilot을 강요하는 일이 발생하면 다른 에디터를 선택할 수 있음
          + 현재까지는 VSC와 긍정적인 경험을 하고 있음
     * MS Live Share와 GH Copilot 확장이 비공개 API를 사용하고 있다고 가정했으나, 이는 최근에 시작된 일임을 깨달음
"
"https://news.hada.io/topic?id=17450","DuckDB 사용법(DuckDB Python + Jupyter Lab)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                DuckDB 사용법(DuckDB Python + Jupyter Lab)

   최근 OLAP 오픈소스 중에 각광을 받고 있는 DuckDB에 대한 사용법을 정리한 글입니다.

   Jupyter Lab에서 어떻게 활용할 수 있을지에 대한 내용도 담았고, Extension 중 인상 깊은 것들도 추가해두었어요.

   S3에 Parquet 파일을 직접 쿼리해서 쉽게 사용할 수 있고, Athena는 확실히 대체할 수 있을 것 같네요. Pandas를 쓰는 영역도 모두 대체가 가능할거에요.


   목차
     * DuckDB 소개, DuckDB란?
          + BIG DATA IS DEAD
     * DuckDB 목표 & DuckDB 장점
          +
              1. Simple
          +
              2. Portable
          +
              3. Feature Rich
          +
              4. Fast
          +
              5. Extensible
          +
              6. Free
          +
              7. Thorough Testing
          + DuckDB 성능 벤치마크
          + DuckDB 설치
     * DuckDB 실행하기
          + 간단한 실행(DuckDB Python)
          + Data Load
          + jupysql을 사용해 더 편하게 실행하기
          + SQL 문법
          + Secrets Manager
     * DuckDB Extension
          + bigquery
          + h3
          + pg_duckdb
          + vss(Vector Similarity Search)
     * DuckDB 활용 방안
          + BigQuery에서 사용하는 예시
          + 로컬 데이터 웨어하우스처럼 사용(Pandas 대체)
          + 필요할 때 사용하는 가벼운 분석 엔진 용도
          + ETL, ELT 파이프라인에서 Transform 단계에서 사용
          + GCS에 있는 Parquet 쿼리하기
     * 정리
     * 참고 자료

   좋은 자료 감사합니다.

   글 봐주셔서 감사합니다!!
"
"https://news.hada.io/topic?id=17406","Genie - Uber의 생성형 AI 기반 On-Call Copilot ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Genie - Uber의 생성형 AI 기반 On-Call Copilot

     * 빠르게 변화하는 기술 환경에서 강력한 온콜 운영을 유지하는 것은 원활한 서비스 기능을 보장하는 데 중요함
     * 플랫폼 엔지니어링 팀은 온콜 일정, 사고 대응, 중요한 순간의 커뮤니케이션 및 Slack® 채널에서의 강력한 고객 지원을 효율적으로 관리하는 데 어려움을 겪고 있음
     * 온콜 엔지니어와의 커뮤니케이션 및 질문 답변을 최적화하기 위해 생성적 AI를 사용하는 온콜 코파일럿 Genie에 대해 설명함

더 자세히 살펴보기: 문제와 동기

     * Uber에서 Michelangelo 팀과 같은 다양한 팀은 내부 사용자가 도움을 요청할 수 있는 Slack 지원 채널을 가지고 있음
     * 이러한 채널에서는 월 평균 45,000개의 질문이 제기됨
     * 많은 양의 질문과 긴 응답 대기 시간은 사용자와 온콜 엔지니어의 생산성을 저하시킴

  번거로운 프로세스

     * 일반적으로 사용자가 Slack 채널에 질문을 하면 온콜 엔지니어의 응답을 기다려야 함
     * 온콜 엔지니어는 사용자의 초기 질문에 답하거나 더 많은 세부 정보를 요청함
     * 사용자는 후속 질문을 하거나 더 많은 명확성을 구하거나 추가 정보를 제공할 수 있음
     * 온콜 엔지니어의 응답을 다시 기다려야 하는 상황이 발생함
     * 여러 번의 주고받는 커뮤니케이션 끝에 사용자의 질문이 해결됨

정보 찾기 어려움

     * 많은 질문들이 기존 문서를 참조하여 답변할 수 있지만, Engwiki라고 하는 Uber의 내부 위키, 내부 Stack Overflow 및 기타 위치에 정보가 분산되어 있어 특정 답변을 찾기 어려움
     * 결과적으로 사용자는 종종 동일한 질문을 반복적으로 하게 되어 수백 개의 Slack 채널에서 온콜 지원에 대한 높은 수요가 발생함

아키텍처 과제

     * 온콜 코파일럿을 구축하기 위해 LLM 모델을 파인튜닝할지 아니면 Retrieval-Augmented Generation (RAG)을 활용할지 선택함
     * 파인튜닝에는 LLM이 학습할 수 있는 고품질의 다양한 예제가 포함된 큐레이션된 데이터가 필요함
     * 또한 새로운 예제로 모델을 최신 상태로 유지하기 위한 컴퓨팅 리소스도 필요함
     * 반면에 RAG는 처음부터 다양한 예제가 필요하지 않음
     * 이는 코파일럿 출시 시간을 단축시켰으므로 우리는 코파일럿에 이 접근 방식을 선택함

   온콜 코파일럿을 구축하는 데는 환각 문제 해결, 데이터 소스 보호, 사용자 경험 개선 등 몇 가지 과제가 있었음. 각 과제를 어떻게 해결했는지 개괄적으로 살펴보겠음.

   환각에 대해서는 다음 사항에 중점을 둠:
     * 응답의 정확성: 질문에 대한 관련 지식을 검색하여 LLM 엔진이 잘못되거나 오해의 소지가 있는 정보를 생성하지 않도록 함
     * 검증 메커니즘: 환각 가능성을 줄이기 위해 권위 있는 출처에 대해 코파일럿의 응답을 검증하는 방법을 구현함
     * 지속적인 학습: 코파일럿이 가장 최신 데이터에 액세스할 수 있도록 하여 정확성을 높임

   데이터 보안을 위해 Slack 채널에 노출될 수 없는 많은 데이터 소스가 있기 때문에 수집할 데이터 소스를 신중하게 선택함

   사용자 경험을 개선하기 위해 다음과 같이 설계함:
     * 직관적인 인터페이스: 사용자가 코파일럿과 효율적으로 상호 작용할 수 있는 사용하기 쉬운 인터페이스를 설계함
     * 피드백 루프: 코파일럿의 성능을 지속적으로 개선하기 위해 사용자가 응답에 대한 피드백을 제공할 수 있는 시스템을 만듦

   신뢰할 수 있고 사용자 친화적이며 안전한 온콜 코파일럿을 개발할 때 이러한 과제를 해결함

구조 심층 분석

     * 온콜 코파일럿 Genie의 아키텍처를 살펴보겠음
     * 요약하자면 Uber의 내부 위키, 내부 Stack Overflow, 엔지니어링 요구사항 문서와 같은 내부 데이터 소스를 스크랩하고 OpenAI 임베딩 모델을 사용하여 이러한 데이터 소스에서 벡터를 만듦
     * 이러한 임베딩은 벡터 데이터베이스에 저장됨
     * 그런 다음 사용자가 Slack 채널에 질문을 게시하면 질문이 임베딩으로 변환됨
     * 서비스는 벡터 데이터베이스에서 질문과 관련된 관련 임베딩을 검색함
     * 임베딩으로 인덱싱된 결과는 응답을 받기 위해 LLM에 대한 프롬프트로 사용됨

   데이터 준비, 임베딩 및 서빙을 위한 아티팩트 푸시 단계는 Apache Spark™를 사용하는 RAG 애플리케이션으로 일반화할 수 있음. 이러한 일반적인 단계는 RAG 애플리케이션의 기초를 형성함

ETL

  데이터 준비

     * Spark 앱은 Uber의 Engwiki 또는 Uber Stack Overflow API를 사용하여 각 데이터 소스에서 콘텐츠를 가져옴
     * 이 데이터 준비 단계에서 Spark 데이터프레임이 출력됨
     * 스키마에는 한 열에 Engwiki 링크가, 다른 열에 Engwiki의 내용이 있으며 둘 다 문자열 형식임

  임베딩 생성

     * 데이터가 스크랩되면 OpenAI 임베딩 모델을 사용하여 임베딩이 생성되고 Uber의 Blob 스토리지인 Terrablob으로 푸시됨
     * 생성된 임베딩은 Engwiki 공간과 관련된 특정 Slack 채널을 통해서만 액세스할 수 있음
     * 출력 형식은 청크 콘텐츠를 해당 청크의 해당 벡터에 매핑한 스키마를 가진 데이터프레임임
     * Uber의 내부 위키 내용은 langchain을 사용하여 청크화되고 임베딩은 PySpark UDF를 통해 OpenAI에서 생성됨

푸셔

     * Terrablob으로 벡터를 푸시하는 방법을 보여줌
     * 벡터가 푸시되는 방식을 보여줌
     * 데이터 소스에서 Sia로 데이터를 수집하기 위해 부트스트랩 작업이 트리거됨
     * Sia는 Uber의 내부 벡터 데이터베이스 솔루션
     * 그런 다음 인덱스 빌드 및 병합을 위해 두 개의 Spark 작업이 트리거되고 Terrablob으로 데이터를 수집함
     * 모든 리프가 Terrablob에 저장된 기본 인덱스와 스냅샷을 동기화하고 다운로드함
     * 검색 중에 쿼리가 각 리프에 직접 전송됨

지식 서비스

     * Genie에는 Knowledge Service라는 백엔드 서비스가 있음
     * 들어오는 쿼리를 먼저 임베딩으로 변환한 다음 벡터 데이터베이스에서 가장 관련성이 높은 청크를 가져와 모든 들어오는 쿼리에 대한 요청에 응답함

비용 추적

     * 비용 추적을 위해 Slack 클라이언트 또는 기타 플랫폼이 Knowledge Service를 호출할 때 UUID가 Knowledge Service로 전달됨
     * 그런 다음 Knowledge Service는 컨텍스트 헤더를 통해 UUID를 Michelangelo Gateway로 전달함
     * Michelangelo Gateway는 LLM에 대한 패스스루 서비스이므로 해당 UUID로 비용을 추적하는 데 사용되는 감사 로그에 추가할 수 있음

Genie 성능 평가

  측정 방법

     * 사용자는 Genie의 답변에서 관련 버튼을 클릭하여 Slack에서 즉시 피드백을 제공할 수 있음
     * 사용자에게 다음 중 선택할 수 있는 옵션을 제공함:
          + 해결됨: 답변이 문제를 완전히 해결함
          + 도움 됨: 답변이 부분적으로 도움이 되었지만 사용자는 더 많은 도움이 필요함
          + 도움 안 됨: 응답이 잘못되었거나 관련이 없음
          + 관련 없음: 사용자는 온콜 지원이 필요하며 Genie는 도움을 줄 수 없음(코드 리뷰와 같은 경우)
     * 사용자가 피드백을 남기면 Slack 플러그인이 이를 선택하고 특정 Kafka 토픽을 사용하여 피드백과 관련 메타데이터를 Hive 테이블로 스트리밍함
     * 나중에 대시보드에서 이러한 메트릭을 시각화함

  성능 평가

     * Genie 사용자에게 사용자 정의 평가를 실행할 수 있는 옵션을 제공함
     * 사용자는 환각, 답변 관련성 또는 사용 사례에 중요하다고 생각하는 기타 측정항목을 평가할 수 있음
     * 이 평가는 검색 및 생성과 같은 모든 관련 RAG 구성 요소를 더 잘 조정하는 데 사용할 수 있음

   평가 프로세스는 이미 구축된 Michelangelo 구성 요소를 사용하는 별도의 ETL 파이프라인임. Genie의 컨텍스트와 응답은 Hive에서 검색되어 Slack 메타데이터 및 사용자 피드백과 같은 기타 관련 날짜에 조인됨. 처리되어 Evaluator로 전달됨. Evaluator는 지정된 프롬프트를 가져와서 Judge로 LLM을 실행함. 지정된 메트릭이 추출되어 평가 보고서에 포함되며 사용자는 UI에서 이 보고서를 이용할 수 있음

  문서 평가

     * 정확한 정보 검색은 소스 문서의 명확성과 정확성에 달려 있음
     * 문서 자체의 품질이 낮으면 LLM이 아무리 잘 수행하더라도 좋은 성능을 낼 방법이 없음
     * 따라서 문서를 평가하고 문서 품질을 개선하기 위한 실행 가능한 제안을 할 수 있는 능력은 효율적이고 효과적인 RAG 시스템에 필수적임

   문서 평가 앱의 워크플로우를 보여줌. 데이터가 스크랩된 후 지식 베이스의 문서는 Spark 데이터프레임으로 변환됨. 데이터프레임의 각 행은 지식 베이스의 하나의 문서를 나타냄. 그런 다음 LLM을 Judge로 호출하여 평가가 처리됨. 여기서 사용자 지정 평가 프롬프트를 사용하여 LLM에 피드를 제공함. LLM은 평가 점수와 함께 점수에 대한 설명 및 각 문서의 품질을 개선하기 위한 실행 가능한 제안을 반환함. 이 모든 메트릭은 사용자가 Michelangelo UI에서 액세스할 수 있는 평가 보고서로 게시됨

과제에 대한 솔루션

     * 환각을 줄이기 위해 벡터 데이터베이스에서 얻은 프롬프트를 LLM으로 보내는 방식을 변경함
          + 벡터 데이터베이스에서 얻은 모든 결과에 대해 부분 컨텍스트와 함께 해당 소스 URL을 명시적으로 추가함
          + LLM에게 제공된 다양한 하위 컨텍스트에서만 답변을 제공하고 답변을 인용할 소스 URL을 반환하도록 요청함
          + 모든 답변에 대한 소스 URL을 제공하려고 함
     * OpenAI로 임베딩을 생성하거나 중요한 데이터 소스에 액세스할 수 없는 사람들에게 Slack으로 데이터 소스를 유출하지 않도록 하기 위해, 대부분의 Uber 엔지니어가 널리 사용할 수 있는 데이터 소스를 미리 큐레이션하고 임베딩 생성에 해당 데이터 소스만 사용하도록 허용함
     * Genie가 질문에 답하는 잠재력을 극대화하기 위해 새로운 상호 작용 모드를 개발함
          + 이 모드에서는 사용자가 보다 편리하게 후속 질문을 할 수 있고 Genie의 답변을 더 주의 깊게 읽도록 유도함
          + Genie가 질문에 답할 수 없는 경우 사용자는 문제를 온콜 지원으로 쉽게 에스컬레이션할 수 있음

   새로운 상호 작용 모드에서 사용자가 질문을 하면 Genie는 제공된 다음 단계 작업 버튼과 함께 대답함. 이러한 버튼을 사용하여 사용자는 후속 질문을 쉽게 하고, 질문을 해결된 것으로 표시하거나, 사람 지원에 문의할 수 있음

성과

     * 2023년 9월 출시 이후 Genie는 154개의 Slack 채널로 입지를 확대했으며 7만 개 이상의 질문에 답변함
     * Genie는 그 효과가 증가하고 있음을 보여주는 48.9%의 유용성 비율을 자랑함
     * 출시 이후 현재까지 13,000시간의 엔지니어링 시간을 절약한 것으로 추정됨

미래

     * Genie는 온콜 관리를 간소화하고 사고 대응을 최적화하며 팀 협업을 개선하도록 설계된 최첨단 Slack 봇임
     * 단순성과 효과성에 중점을 두고 개발된 Genie는 종합적인 어시스턴트 역할을 하며 엔지니어링 팀이 온콜 책임을 원활하게 처리할 수 있도록 지원함
     * 이 온콜 어시스턴트 코파일럿은 사용자와 온콜 엔지니어가 각 플랫폼의 Slack 채널 내에서 상호 작용하고 참여하는 방식의 전체 경험을 변화시킬 수 있음
     * 또한 Michelangelo나 IDE와 같은 각 제품 내에서 사용자가 온콜 지원을 기다리지 않고도 제품별 Slack 채널이나 제품 내에서 제품별 도움말을 찾을 수 있는 경험을 변화시킬 수 있음

결론

     * 온콜 어시스턴트 코파일럿 Genie는 엔지니어링 팀이 온콜 업무를 관리하는 방식을 혁신함
     * 자동 해결을 촉진하고 통찰력 있는 분석을 제공함으로써 Genie는 팀이 온콜 책임을 효율적이고 효과적으로 처리할 수 있도록 지원함

GN⁺의 의견

     * Genie는 Uber의 수많은 Slack 채널에서 사용자 질문에 답변하여 엔지니어들의 시간을 절약하고 사용자 경험을 향상시키는 혁신적인 온콜 코파일럿임
     * Genie의 성공은 기계 학습 기술과 인간 전문 지식의 강력한 결합을 보여줌. 질문에 대한 정확하고 유용한 답변을 제공하기 위해 대규모 데이터와 LLM을 활용함
     * 그러나 Genie는 여전히 제한 사항과 개선의 여지가 있음. 환각 문제를 완전히 해결하지는 못했고, 때로는 부정확하거나 오도된 정보를 제공할 수 있음. 지속적인 모니터링과 사용자 피드백을 통해 시스템을 개선해야 함
     * 또 다른 고려 사항은 데이터 보안과 개인정보 보호임. Genie가 처리하는 데이터는 민감하고 기밀일 수 있으므로 안전한 처리와 액세스 제어가 필수적임
     * 향후 Genie는 답변의 품질을 높이고 더 많은 데이터 소스를 통합하며 보안을 강화하는 방향으로 발전할 수 있음. 또한 Genie와 유사한 코파일럿을 다른 비즈니스 영역으로 확장하는 것도 가능함
     * 자동화된 고객 지원, 판매 지원, 심지어 코딩 지원에 이르기까지 AI 기반 어시스턴트는 다양한 작업에 적용될 수 있음. 이러한 도구는 직원의 생산성을 높이고 사용자 경험을 개선할 수 있음
     * 전반적으로 Genie는 AI와 인간 전문 지식이 어떻게 더 나은 작업 방식과 고객 서비스로 이어질 수 있는지를 보여주는 흥미로운 사례임. 이러한 기술은 계속 진화할 것이며, 우리가 어떻게 일하고 상호 작용하는지에 중대한 영향을 미칠 것으로 예상됨
"
"https://news.hada.io/topic?id=17373","Show GN: AI 캘린더 - 스크린샷으로 일정 등록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: AI 캘린더 - 스크린샷으로 일정 등록

   안녕하세요! AI 일정 관리 앱 Trace입니다.
   (메모 앱 -> 일정 관리 앱으로 완전히 리뉴얼 되었습니다.)

   Trace는 저처럼 계획을 귀찮아하는 (MBTI P) 분들께서 좋아하실 일정 관리 앱입니다.

   자연어 혹은 이미지를 AI에게 입력하여 3초만에 일정을 등록할 수 있습니다.
   기존의 다른 일정 관리 앱처럼 날짜, 시간, 반복 등을 직접 설정할 필요 없습니다.

   예시:
   -자연어 입력 (예. ""내일 퇴근하고 망원 약속"")
   -이미지 입력 (예. 프리미어 리그 일정 이미지)

   만약 여러 일정으로 각각 생성돼야 하는 경우, LLM이 각각의 일정으로 생성해줍니다.

   푸시 알림도 메모 내용까지 반영된 내용으로 줍니다. (e.g. 내일 퇴근하고 고등학교 친구들과 약속이 있어요. 여행 가서 구매하신 선물 꼭 챙겨가세요!)

   Trace를 통해 여러분들의 삶의 질을 높여보시기 바랍니다.
   필요하신 기능이나 불편하신 부분 남겨주시면 빠르게 반영하겠습니다.

   트레이스 드림.
"
"https://news.hada.io/topic?id=17359","외과의사들이 수술실에서 Apple Vision Pro를 사용하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 외과의사들이 수술실에서 Apple Vision Pro를 사용하는 이유

     * 24년 전, 외과의사 Santiago Horgan이 세계 최초로 로봇 보조 위 우회 수술을 수행함. 이는 의학계의 중요한 돌파구였음
     * 현재 호르간은 수술실에서 더 혁신적일 수 있는 새로운 도구인 애플 비전 프로와 협력하고 있음
     * 지난 한 달 동안, 호르간과 UCSD의 다른 외과의사들은 애플의 혼합 현실 헤드셋을 착용하고 20건 이상의 최소 침습 수술을 수행함
     * 애플은 2월에 헤드셋을 대중에게 공개했지만, 상업적으로는 대부분 실패함. 그러나 건축과 의학 등 일부 산업 분야에서는 특정 요구 사항을 충족시키는 방법을 테스트하고 있음
     * 호르간은 수술 중 헤드셋을 착용하면 부상 위험을 낮추면서 효과를 높일 수 있으며, 특히 전문 장비를 구매할 여력이 없는 병원에 엄청난 영향을 미칠 수 있다고 말함. ""이는 2000년의 이전 돌파구와 같은 수준의 혁명이지만, 접근성으로 인해 더 많은 생명에 영향을 미칠 것""이라고 그는 말함

복강경 수술의 어려움

     * 복강경 수술에서 의사들은 작은 카메라를 환자의 작은 절개부를 통해 보내고, 카메라의 시야를 모니터에 투영함
     * 의사들은 화면을 올려다보면서 환자를 수술해야 하는데, 이는 눈과 손의 협응력이 필요한 까다로운 과제이며, 압박감이 있는 환경에서 다른 시각적 변수들을 처리해야 함
     * 호르간은 ""보통 CT 스캔을 보기 위해 뒤돌아서서 수술을 멈추고, 내시경(장기를 자세히 볼 수 있는 또 다른 작은 카메라)으로 무슨 일이 일어났는지 보고, 심박수를 보기 위해 모니터를 본다""고 말함
     * 2022년 연구에 따르면, 대부분의 외과의사들은 최소 침습 수술을 수행하는 동안 불편함을 호소함
     * 설문 조사에 참여한 외과의사의 약 5분의 1은 통증이 너무 자주 발생하고 불편해서 조기 은퇴를 고려하겠다고 말함
     * 따라서 우수한 혼합 현실 헤드셋은 외과의사가 환자의 수술 부위를 보면서 복강경 카메라와 환자의 활력 징후를 보여주는 가상 화면을 올려다보지 않고도 볼 수 있게 해줄 수 있음

애플 비전 프로의 우수성

     * 호르간은 이전에 구글 글래스와 마이크로소프트 홀로렌즈와 같은 다른 헤드셋을 시도했지만, 해상도가 충분히 높지 않다는 것을 발견함
     * 그러나 그는 애플 비전 프로를 출시 전에 테스트했고, 즉시 감명을 받음
     * 호르간은 캘리포니아 대학교의 기관 심사 위원회에 기기 사용 승인을 신청했고, 위원회는 기기 사용을 승인함
     * 9월에 그는 애플 헤드셋을 사용하여 식도 탈장 수술을 처음으로 주도함. ""우리는 모두 깜짝 놀랐습니다. 우리가 기대했던 것보다 훨씬 좋았어요.""라고 호르간은 말함

UCSD에서의 애플 비전 프로 사용

     * 지난 몇 주 동안 UCSD의 최소 침습 수술과에서는 애플 비전 프로를 사용하여 역류성 식도염 수술과 비만 수술을 포함한 20건 이상의 수술을 수행함
     * 의사, 보조원, 간호사 모두 시술 중에 헤드셋을 착용함
     * 호르간에 따르면, 아직 어떤 환자도 이 실험을 거부하지 않았음
     * UCSD Health의 최고 임상 및 혁신 책임자인 크리스토퍼 롱허스트는 비전 프로의 가격표가 일반 소비자에게는 엄청나 보일 수 있지만, 대부분의 의료 장비에 비해 저렴하다고 말함
     * ""수술실의 모니터는 아마도 2만 달러에서 3만 달러 정도일 거예요. 그래서 헤드셋에 3,500달러는 의료 환경에서는 예산 먼지 같아요.""라고 그는 말함
     * 이러한 가격은 고가의 장비를 구매할 예산이 부족한 소규모 지역 병원에 특히 매력적일 수 있음 (FDA는 아직 이 기기를 광범위한 의료용으로 승인하지 않았음)
     * 롱허스트는 또한 애플 비전 프로가 3D 방사선 영상을 만드는 능력을 테스트하고 있음
     * 그는 향후 몇 년 동안 UCSD 팀이 다양한 의료 응용 분야에서 헤드셋의 효능을 입증하는 여러 논문을 발표할 것으로 기대함
     * ""우리는 앞으로 몇 년 안에 전 세계 수술실에서 표준 치료법이 될 것이라고 믿습니다.""라고 롱허스트는 말함

다른 AR 수술 시스템

     * 애플 비전 프로는 외과의사들의 관심을 끌기 위해 경쟁하는 유일한 기기는 아님
     * 유사한 이점을 약속하는 다른 수술 시각화 시스템들이 시장에 나와 있음
     * 스타트업 Augmedics는 척추 외과의사를 위한 AR 내비게이션 시스템을 개발했는데, 환자의 CT 스캔 3D 이미지를 몸 위에 겹쳐 보여줌. 이론적으로 의사가 엑스레이 시력을 가진 것처럼 수술할 수 있게 함
     * 또 다른 회사인 Vuzix는 비전 프로보다 훨씬 가벼운 헤드셋을 제공하며, 세계 어디에서나 수술하는 외과의사의 시점을 보고 조언을 줄 수 있음

AR 헤드셋의 추가 활용 사례

     * 존스 홉킨스 대학교의 최소 침습 및 로봇 수술 책임자인 아메드 가지는 원격 교육을 위해 Vuzix 헤드셋을 사용해 왔으며, 이를 통해 수련의들이 감독관의 시점에서 볼 수 있게 함
     * 그는 최근 Microsoft HoloLens를 사용하여 환자에게 수술의 ""리허설""을 제공함. 둘 다 헤드셋을 착용하고, 그는 그녀를 CT 스캔의 가상 3D 재현을 통해 안내하면서, 그가 어떻게 종양을 제거할 것인지 설명함
     * ""우리는 그 과정을 함께 걸어갈 수 있었습니다. '종양에 공급하는 혈관을 찾아서 클립으로 묶고, 여기서 박리하고, 이것을 다치지 않도록 해야 해요.'""라고 그는 말함. ""우리가 환자들을 그 세계로 데려가 더 나은 이해를 줄 가능성이 있어요.""
     * 가지는 이러한 헤드셋이 수술실에 점점 더 많이 도입됨에 따라, 특히 환자 프라이버시와 관련하여 의사들이 주의를 기울이는 것이 중요하다고 말함
     * ""네트워크나 WiFi 신호에 연결된 모든 장치는 노출되거나 해킹될 가능성이 있습니다.""라고 그는 말함. ""우리는 우리가 하는 일과 그 방법에 대해 매우 신중해야 합니다.""

애플 비전 프로의 적응성

     * 로스앤젤레스 Cedars-Sinai 메디컬 센터의 일반외과 책임자인 미구엘 버치는 수년에 걸쳐 다양한 의료 중심 헤드셋을 테스트해 왔음
     * 그는 애플 비전 프로가 적응성 때문에 특히 유용하다고 말함. ""증강현실에서 사용하고 싶은 모든 것이 다른 기기에 전유적으로 부착되어 있다면, 우리는 10개의 헤드셋과 15개의 다른 모니터를 갖게 될 것입니다.""라고 버치는 말함. ""하지만 이것 하나로 비디오 피드가 있는 모든 것과 함께 사용할 수 있어요.""
     * 버치는 자신의 경력 동안 최소 침습 수술을 수행하면서 세 가지 다른 부상을 입었다고 말함
     * 그는 이제 애플 비전 프로를 시더스-사이나이에 도입하기를 희망하며, 헤드셋의 현재 의료 기능이 ""빙산의 일각""이라고 믿음
     * ""외과의사들이 경력을 일찍 끝내야 하는 조용한 문제에 대한 인체 공학적 해결책일 뿐만 아니라, 이미지를 겹칠 수 있는 능력은 우리가 할 수 있는 일을 엄청나게 향상시킬 것입니다.""라고 그는 말함

GN⁺의 의견

     * 애플 비전 프로가 수술실에서 사용되는 것은 매우 흥미롭고 잠재력이 큰 발전임. 외과의사들의 인체공학적 문제를 해결하고, 수술 중 다양한 정보를 쉽게 확인할 수 있게 해줌
     * 하지만 개인정보 보호와 보안 문제에 주의를 기울여야 함. 해킹이나 데이터 유출의 위험성이 있으므로, 철저한 보안 조치가 필요함
     * 또한 FDA 승인 등 의료기기로서의 규제 절차를 거쳐야 하며, 장기적인 사용에 따른 안전성도 검증되어야 함
     * 애플 비전 프로의 높은 해상도와 적응성은 큰 장점이지만, 비교적 무거운 무게나 높은 가격은 단점이 될 수 있음. 향후 더 경량화되고 저렴해진다면 의료 현장에서 더 널리 사용될 수 있을 것임
     * Vuzix와 Augmedics 같은 다른 제품들도 주목할 만하며, 다양한 의료 환경에서의 활용 가능성을 탐색할 필요가 있음.

   광학실험에서도 apple vision pro 를 도입한 회사가 있습니다. 돈값할지는 모르겠지만 편해보이긴 해요. https://m.youtube.com/watch?v=9ene_GQDBtc

        Hacker News 의견

     * AR 기술이 교육 분야에서 가격이 내려가면 엄청난 잠재력을 가질 것임
          + 회로 기판에 실시간으로 설명, 다이어그램, 전류 흐름을 겹쳐 보여주는 기능
          + 가전제품 및 가정 수리
          + 저글링 및 손재주 학습에 유용함
          + 예술 분야에서 모델을 중심에 두고 스케치하는 방식
          + 개인 취미에 기반한 예시임
     * 수술실에서 헤드셋 사용 시 환자 프라이버시 보호가 중요함
          + 네트워크나 WiFi에 연결된 기기는 해킹 위험이 있음
          + Apple이 수집하는 데이터에 대한 불신
          + 환자 동의 없이 제품 사용 시 분노할 것임
          + VR 헤드셋이 수술에 보편화되면 다른 기업들도 기술에 참여할 것임
     * 원격 수술 조언을 위한 텔레프레즌스 기능이 유용할 것임
          + 헤드셋 카메라 피드를 다른 곳으로 스트리밍하는 기능
          + 원격 전문가 조언을 받을 수 있는 기능이 중요함
     * Microsoft HoloLens의 비즈니스 응용 프로그램은 중단됨
          + Apple Vision Pro는 실패작으로 평가됨
          + Apple은 이를 인정하지 않음
     * Kinect와 같은 기술은 소비자 외의 흥미로운 응용이 있었음
          + Apple은 기존 제품을 완벽하게 만들어 글로벌 현상으로 만드는 데 성공적임
          + AVP는 몇 가지 장점이 있지만 대중적 매력을 얻기에는 부족함
          + 다음 버전에서 개선될 가능성이 있음
     * AVP가 다른 AR 기기보다 뛰어난 점을 이해하기 어려움
          + 수술사들이 이 기기를 혁신적이라고 생각한 이유가 불분명함
     * Apple이 Vision Pro를 상업적 실패로 간주하는지 의문임
     * VR은 문제를 찾고 있는 기술임
          + iPod과 iPhone은 명확한 응용과 사용자 불만을 해결했음
          + VR이 대중 시장에서 성공할지 확신이 없음
"
"https://news.hada.io/topic?id=17399","화웨이, HarmonyOS NEXT 출시로 안드로이드와 공식 결별","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  화웨이, HarmonyOS NEXT 출시로 안드로이드와 공식 결별

     * 화웨이가 자체 개발한 운영체제 하모니OS NEXT를 공식 출시하면서 안드로이드 생태계와 공식적으로 결별함
     * 화웨이는 자사의 기린 및 쿤펑 칩을 탑재한 일부 스마트폰과 태블릿에 대해 OS를 출시하고 ""공식적으로 공개 베타 테스트를 시작했다""고 밝힘
     * 이전 버전의 하모니OS와 달리 하모니OS NEXT는 더 이상 안드로이드 앱을 지원하지 않음
     * 화웨이는 메이투안, 더우인, 타오바오, 샤오홍슈, 알리페이, JD.com 등 중국 내 주요 쇼핑, 결제, 소셜미디어 앱들이 하모니OS용 네이티브 앱을 개발했다고 언급함
     * 발표 당시 15,000개 이상의 하모니OS 네이티브 애플리케이션과 메타서비스도 출시되었다고 주장
     * 이는 훌륭한 수치이지만 Google Play Store와 Apple의 App Store에서 찾을 수 있는 수백만 개의 앱에 비하면 부족한 수준임
     * 화웨이는 이 운영체제가 1억 1천만 줄의 코드로 구성되어 있으며, 실행 중인 모바일 기기의 전반적인 성능을 30% 향상시킨다고 주장함
     * 배터리 수명은 56분 증가하고 OS 실행 외 용도로 평균 1.5GB의 메모리를 남김
     * 스마트폰이나 태블릿에서 이러한 성능 향상을 제공하지만, 화웨이는 현재 중국 이외의 지역에서 Harmony OS NEXT를 제공할 계획이 없다고 밝힘

중국의 기술 독립 추진에서 하모니OS의 의미

     * 화웨이는 마지막 버전의 OS를 수출하려고 시도했고, 심지어 해외 시장을 겨냥한 개발자에게 지원을 제공했지만 성공하지 못했음
     * 하지만 해외 업체들이 플랫폼용 앱을 개발하는 데는 성공: 싱가포르에 본사를 둔 차량 공유 앱 Grab과 항공사 에미레이트 항공이 OS용 앱을 개발함
     * 업그레이드 전까지 화웨이의 하모니OS는 여전히 핵심 기능을 위해 Android Open Source Project에 의존했음
     * 이는 2019년 미국의 제재로 화웨이의 Google Mobile Services 접근이 차단된 데 따른 것임
     * 이제 그 의존성이 사라짐
     * 화웨이는 PC에도 OS를 도입하기를 희망함
     * 화웨이 컨슈머 비즈니스 그룹 의장 위청둥은 지난달 향후 PC에 Windows 대신 하모니 OS를 탑재할 것이라고 밝힘
          + 이런 컴퓨터가 언제 출시될지, 그리고 다른 PC 제조업체들이 이 OS를 사용할지 여부는 미지수임

애플, ""중국을 사랑한다""고 말함

     * 화웨이 출시와 같은 날 애플 CEO 팀 쿡이 중국 산업정보기술부 장관을 만남
     * 쿡은 장관에게 ""애플은 중국의 대외 개방 기회를 적극적으로 포착하고 중국에 대한 투자를 계속 늘리며 산업 사슬과 공급망의 고품질 발전을 도울 의향이 있다""고 말했다고 함

GN⁺의 의견

     * 하모니OS NEXT 출시는 중국 기술 독립성 확보를 위한 또 하나의 이정표로 볼 수 있음
     * 그러나 안드로이드 앱 지원 중단은 앱 생태계 구축에 큰 걸림돌이 될 것임. 개발자들의 적극적인 참여가 필수적
     * 중국 내 주요 앱들의 지원은 고무적이나, 글로벌 진출을 위해서는 보다 폭넓은 앱 생태계 구축이 시급함
     * PC용 OS 진출 계획은 흥미롭지만, 기존 윈도우 사용자들을 얼마나 끌어들일 수 있을지는 미지수임
     * 애플의 중국 투자 증대 발언은 중국 시장의 중요성을 보여주는 동시에, 미중 갈등 속 글로벌 기업들의 줄타기 행보를 엿보게 함
     * 결국 하모니OS의 성공 여부는 개발자와 사용자 생태계 확장에 달려 있음. 기술력 외에도 마케팅과 협력 전략이 중요할 것으로 보임

   OS도 다극화로 가는군요..

        Hacker News 의견

     * Google의 Play 스토어에서 퇴출된 이후 Huawei가 Android에 더 이상 신경 쓰지 않는 이유가 있음
          + HarmonyOS NEXT는 마이크로커널, 멀티서버 운영 체제임
          + 이전 버전과 달리 HarmonyOS NEXT는 Android 앱을 지원하지 않음
          + 이는 HarmonyOS가 단순한 Android 변형이 아님을 의미함
     * Huawei는 HarmonyOS NEXT를 중국 외 지역에 제공할 계획이 없다고 밝힘
          + 중국 외 지역 사용자가 중국어를 모르면 앱 사용이 어려움
     * Huawei는 PC에도 HarmonyOS를 도입할 계획임
          + 이는 매우 흥미로움
          + HarmonyOS가 Android와 Linux 기반이 아니므로 PC에서의 작동이 궁금함
     * Huawei는 이전 버전의 OS를 해외 시장에 수출하려 했으나 성공하지 못함
          + Huawei ID 가입이 어려워 생태계에 투자하기 힘듦
     * 기술 차단의 아이러니는 차단된 기술이 충분히 커지면 차단자의 영향력이 감소한다는 점임
          + 이는 미국의 모바일 OS 독점을 끝낼 수 있는 기회일 수 있음
     * 중국이 Windows와 Office Suite에서 오픈 소스 대안으로 전환할 경우 Microsoft의 비용이 궁금함
     * 더 많은 비호환 모바일 OS가 생길수록 웹이 다시 부상할 것임
     * Google과 Apple이 아닌 모바일 OS가 존재하는 것은 긍정적임
          + 그러나 HarmonyOS에서도 감시 상태가 작동할 것으로 예상됨
     * Huawei가 Android와의 결별을 공식화함
          + 비원어민으로서 이 소식을 어떻게 해석해야 할지 궁금함

   하모니 os 말고도 다른 모바일 os들은 꽤 있어요. sailfish라던가 postmarket이라던가 ubuntu touch라던가... 점유율이 없을뿐이죠
"
"https://news.hada.io/topic?id=17414","플레이스테이션 비타 아키텍처 (파트 1)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         플레이스테이션 비타 아키텍처 (파트 1)

  지원 이미지

    모델

     * 오리지널: PlayStation Vita (모델 PCH-1000)은 2011년 일본에서 출시되었음.
     * 슬림: PS Vita의 업데이트된 모델(PCH-2000)은 2013년 일본에서 출시되었으며, OLED 화면을 LCD로 교체하여 비용을 절감하였음.
     * TV: PlayStation TV는 슬림 모델의 메인보드를 비휴대용 환경에 맞게 조정한 것임.

    메인보드

     * 오리지널: I/O를 제거하면 스마트폰이 될 수 있는 메인보드.
     * 마크드: 중요한 부품이 라벨링된 메인보드.

  간단한 소개

     * PSVita는 비디오 게임과 급변하는 모바일 분야의 교차점에 있는 주목할 만한 제품임.
     * Sony는 스마트폰 시장과의 유사성을 피하려고 노력했음.

    모델과 변형

     * PSVita는 세 가지 변형 모델로 출시되었음:
          + 오리지널: 시리즈의 첫 모델.
          + 슬림: OLED 화면을 LCD로 교체하고, 3G 기능을 제거하였음.
          + PlayStation TV: 비휴대용 환경에 맞춘 슬림 메인보드.

    새로운 출판 모델

     * 분석의 복잡성이 증가함에 따라, 섹션별로 출판하는 새로운 단계적 접근 방식을 시도하고자 함.

  CPU

     * Sony는 ARM CPU를 채택하였으며, Toshiba가 ARM 라이선시로서 역할을 수행하였음.
     * 주요 칩은 Kermit으로, 여러 CPU, GPU 및 약 640 MB의 RAM을 포함함.

    주요 CPU

     * ARM Cortex-A9 MPCore는 성숙한 프로세서로, 여러 코어를 포함한 클러스터임.
     * 500 MHz의 클럭 속도로 작동하며, 배터리 수명이 우선시되었음.

      지속적인 역사

     * ARM CPU는 Acorn의 컴퓨터를 위한 MOS 6502 CPU의 대체품으로 시작되었으며, Apple의 기여로 성숙해졌음.

        Cortex 라인업

     * Cortex는 산업, 성능, 임베디드의 세 가지 부문으로 나뉘며, PSVita는 성능에 중점을 둔 Cortex-A 라인을 사용함.

      코어

     * Cortex-A9는 ARMv7-A 명령어 세트를 사용하며, 64 KB의 L1 캐시를 포함함.
     * 2-issue 슈퍼스칼라: 명령어 수준 병렬 처리를 도입하여 클럭 주기당 실행되는 명령어 수를 증가시킴.

      성숙한 ISA

     * ARMv7 명령어 세트는 SIMD 기능과 멀티프로세싱을 확장함.

        더 많은 가속기

     * Cortex-A9의 주요 구성 요소는 Media Processing Engine (MPE)로, 3D 응용 프로그램을 위한 새로운 코프로세서임.

    마스터 버스

     * ARM의 AMBA 프로토콜은 Cortex-A9에서도 계속 사용됨.

    미래를 내다보며

     * Cortex-A 시리즈는 네 가지 범주로 나뉘며, ARMv8의 도래가 다음 큰 이정표가 될 것임.

    미디어 코프로세서

     * ARM 클러스터 옆에는 게임 관련 작업을 지원하는 가속기가 포함됨.

      Venezia

     * Venezia는 이미지 및 사운드 처리를 위한 별도의 CPU 패키지임.

      AVC 디코더

     * AVC 디코더는 AVC로 인코딩된 비디오 데이터를 디컴프레싱하는 DSP임.

    사용 가능한 메모리

     * PSVita에는 여러 유형의 메모리가 포함되어 있음.

      메인 메모리

     * 512 MB의 LPDDR2 SDRAM이 주요 작업 영역으로 사용됨.

      기타 메모리

     * **128 MB의 Cached DRAM (CDRAM)**이 주로 GPU에 연결되어 있음.

    마지막 CPU

     * Kermit에는 추가 CPU인 MIPS 324k가 포함되어 있으며, PlayStation Portable 및 PlayStation 1 게임과의 호환성을 제공함.

  다음: 그래픽

     * 다음 부분에서는 VideoLogic의 진화와 모바일 시장에서의 GPU 리더십에 대해 다룰 예정임.

GN⁺의 정리

     * PSVita는 비디오 게임과 모바일 기술의 교차점에서 중요한 역할을 하였음.
     * ARM Cortex-A9 CPU와 다양한 가속기를 통해 성능과 에너지 효율성을 동시에 추구하였음.
     * 이 기사는 기술 발전과 CPU 아키텍처의 변화를 이해하는 데 유용하며, 게임 콘솔의 하드웨어 설계에 대한 통찰력을 제공함.
     * 유사한 기능을 가진 제품으로는 Nintendo 3DS와 같은 휴대용 게임 콘솔이 있음.
"
"https://news.hada.io/topic?id=17355","AI 투자 붐투자 붐

마지막 달 Microsoft의 발표

     * Microsoft는 OpenAI에 대한 주요 투자자이자 컴퓨팅 제공업체임
     * Microsoft가 Three Mile Island 원자력 발전소 1호기 재가동에 자금을 지불하겠다고 발표함
     * 이는 급증하는 데이터 센터 전력 수요를 충당하기 위한 것임
     * Amazon에 이어 레거시 원전에 의존하는 두 번째 주요 미국 기술 기업이 됨

AI 제품의 현재 사용 현황

     * 코드, 텍스트, 이미지 생성, 데이터 분석, 작업 자동화, 온라인 플랫폼 향상 등에 널리 사용됨
     * 최첨단 모델은 교육 및 추론을 위해 엄청난 컴퓨팅 리소스가 필요함
     * 산업 규모의 시설에 보관된 대규모 고급 하드웨어 배열이 필요함
     * 이러한 시설은 운영을 위해 방대한 양의 전력, 물, 광대역 및 기타 인프라에 대한 액세스가 필요함

AI 붐의 하류 결과

     * 컴퓨팅 수요 증가를 충족시키기 위한 미국 고정 투자의 급격한 증가
     * 수백억 달러가 고급 컴퓨터, 데이터 센터 시설, 발전소 등에 투입됨
     * 미국 데이터 센터 건설은 연간 286억 달러로 사상 최고치임
     * 이는 미국이 레스토랑, 바 및 소매점 건설에 지출하는 금액을 합친 것과 거의 같음

데이터 센터 투자의 규모

     * 건설 수치는 물리적 건물에만 해당되며 컴퓨터, 케이블, 팬 등은 제외됨
     * 지난 1년 동안 65억 달러 이상의 대형 컴퓨터와 부품을 수입함
     * 정보 기술 기업들이 이러한 새로운 데이터 센터와 장비의 대부분을 구매하고 있음
     * 지난 1년 동안 950억 달러 이상의 사상 최고 수준으로 재산, 공장 및 장비 순 보유액이 증가함

10년 전과 비교한 변화

     * Facebook이 Instagram을 12억 달러에, WhatsApp을 150억 달러에 인수함
     * 이들은 당시 기술 역사상 가장 큰 인수 중 일부였음
     * Instagram은 13명, WhatsApp은 55명의 직원만 있었고 물리적 존재감이 거의 없었음
     * 오늘날 Meta는 2024년 상반기에만 152억 달러를 자본 지출에 사용했음
     * AI 붐은 역사상 그 어느 때보다 하드웨어 집약적임

AI 붐이 투자에 미치는 영향

     * 미국 기업의 컴퓨터 및 관련 장비 투자는 사상 최고 수준으로 급증함
     * 2010년대 내내 상대적 정체를 겪은 후 지난 1년 동안 16.6% 증가함
     * 팬데믹 시대의 원격 근무 붐에 의해서만 깨졌음
     * 2022년 컴퓨터 투자는 다소 감소했지만 2023년 후반 AI 붐으로 다시 급증함

TSMC의 반도체 수요 증가

     * TSMC는 세계 최고의 첨단 반도체 제조업체임
     * AI 컴퓨팅에 대한 수요로 인해 대만에서 수입하는 칩, 컴퓨터 및 관련 부품이 증가함
     * 지난 1년 동안 380억 달러 이상으로 전년 대비 140% 이상 증가함
     * 로직 칩의 직접 수입은 상대적으로 미미한 수준에서 연간 거의 50억 달러로 증가함
     * 컴퓨터 부품과 구성 요소는 여전히 가장 큰 수입 품목임

2023년까지의 투자 데이터 분석

     * Amazon/Google과 같은 데이터 프로세서와 웹 검색 회사가 기술 분야에서 가장 큰 투자 수준을 유지함
     * 소프트웨어 개발자들이 가장 빠른 투자 성장을 보임
     * 소프트웨어 개발사의 지적 재산에 대한 실질 투자는 2021년 이후 40% 증가함
     * 컴퓨터와 같은 장비에 대한 실질 투자는 96% 증가함
     * 소프트웨어 개발사가 얼마나 빨리 하드웨어 기능을 구축할 수 있는지 경쟁하고 있음

데이터 센터 건설의 지역적 불균형

     * 데이터 센터는 네트워킹 요구 사항을 충족하고 인프라 제약을 피하기 위해 어느 정도 분산되어야 함
     * 하지만 대규모 클러스터에 집중시키는 것이 효과를 극대화하고 비용/지연 시간을 줄이는 데 도움이 됨
     * 공식 건설 수치는 지역 수준에서만 데이터 센터 지출 내역을 제공함
     * 미국 남부의 역사적 클러스터에서 데이터 센터 구축이 가장 활발함
     * 중서부와 서해안 시장 전반에서 성장이 훨씬 빨랐음
     * 북동부는 기능적으로 영향을 받지 않음

데이터 센터가 전력 수요에 미치는 영향

     * 에너지정보국(EIA)은 데이터 센터 수요를 기반으로 부하 증가 전망치를 반복적으로 상향 조정함
     * 상업용 부문 전력 소비가 올해 3%, 내년 1% 증가할 것으로 예측함
     * 상업용 사용자는 주거용 전기화 및 산업용 리쇼어링보다 전력 소비 증가의 작은 동인임
     * 그러나 2007년부터 2023년까지 상업용 전력 소비는 총 5%만 증가함
     * AI 이전 추정치는 컴퓨터 및 사무 기기가 상업용 전력 소비의 11.4%에 불과한 것으로 나타남

주별 데이터 센터 전력 소비 현황

     * 노스다코타의 상업용 전력 소비는 2022년 주요 데이터 센터 개장 이후 45% 이상 증가함
     * 그러나 노스다코타는 상대적으로 작은 전력 및 컴퓨팅 시장임
     * 가장 큰 전력 수요 증가는 버지니아와 텍사스와 같은 대규모 데이터 센터 클러스터에서 발생함
     * 버지니아의 상업용 에너지 소비는 2019년 이후 30% 증가했으며 전국에서 가장 큰 상업용 전력 수요 증가를 보임
     * 텍사스는 2019년 이후 상업용 전력 소비가 10% 증가했으며 향후 몇 년 동안 훨씬 더 큰 성장이 예상됨

AI 기업의 전력 투자 경향

     * AI 기업들은 대규모 전력 자원 근처에 집중하려고 함
     * 이에 따라 원자력 에너지에 대한 관심이 새롭게 대두되고 있음
     * 기술 기업들이 컴퓨팅 기능을 구축함에 따라 발전 인프라에 직접 투자하려는 욕구가 커지고 있음
     * 정보기술 분야의 매출은 2022년과 2023년의 둔화에서 반등함
     * 소프트웨어 개발사, 웹 검색 포털, 컴퓨팅 인프라 제공업체의 수입은 지난 1년 동안 12~15% 증가함

AI 붐에도 불구한 tech 고용 약세

     * 미국은 지난 1년 동안 3만 2천 개의 기술 일자리만 추가함
     * 이는 2021년, 2022년 또는 팬데믹 이전 9년 동안 어느 때보다 낮은 수준임
     * 최첨단 AI 붐에 있는 소프트웨어 개발사와 컴퓨팅 인프라 산업도 지난 1년 동안 실질적인 고용 증가가 없었음
     * 최근 컴퓨터 공학 졸업생들을 괴롭혔던 침체된 일자리 시장은 크게 개선되지 않았음

AI 투자 붐의 노동 시장 영향

     * 반도체 제조업의 총 보상은 2023년 1분기에서 2024년 1분기까지 25% 증가함
     * NVIDIA와 같은 회사의 근로자들은 훨씬 더 가치 있는 주식 옵션을 받음
     * 지난 1년 동안 상업용 건설 일자리가 3만 개 증가한 것은 데이터 센터 수요의 영향임
     * 반도체 공장과 기타 제조 부문의 산업 건설 일자리 호황과 전력 및 인프라 구축에 따른 고용 증가도 있음
     * 그러나 지금까지 AI 붐의 일자리 역학은 지난 10년간의 기술 노동 시장과 크게 다름
     * 전통적인 프로그래머보다 하드웨어 투자, 제조/설계 회사, 인프라 구축에 더 초점을 맞추고 있음

AI 개발자들의 경쟁과 정책 입안자들의 시각

     * AI 개발자들은 제품 개선과 상용화로 현재 투자 규모를 검증할 수 있을 것으로 기대하며 치열하게 경쟁하고 있음
     * 단기적으로 보다 진보된 모델이 개발되고 AI 사용이 더 많은 실제 응용 분야로 확장됨에 따라 투자는 계속 증가할 것으로 예상됨
     * 정책 입안자들은 AI를 미래 미국 경제의 핵심으로 보고 있음
     * AI 개발과 데이터 센터 용량은 미국이 상당한 선두를 차지하고 있는 첨단 산업임
     * AI 붐은 아마도 다른 어느 나라보다 미국 투자에 더 큰 혜택을 주었음

하드웨어 용량을 둘러싼 지정학적 경쟁 격화 가능성

     * CHIPS 법은 대만 수입 의존도를 완화하기 위한 것이었지만, 고급 반도체 수요 증가로 인해 오히려 의존도가 높아짐
     * 데이터 센터 규모의 공급을 충족하기 위해 미국은 여전히 중국에 의존하고 있음
     * 미국은 중국의 AI 개발을 억제하기 위해 고급 칩에 대한 중국의 접근을 계속 제한할 가능성이 높음
     * 중국은 수입 의존도를 줄이기 위해 칩 제조 능력을 계속 구축하고 있음
     * AI 투자 붐이 지속됨에 따라 이는 진행 중인 칩 전쟁의 최전선으로 더 깊이 들어갈 것으로 예상됨

GN⁺의 의견

     * AI 시대에 반도체 경쟁력을 갖추는 것은 매우 중요한 과제임
     * 첨단 반도체에 대한 수요가 급증하여, 좋은 반도체 기술 없이는 경쟁력 있는 AI 모델을 만들기 어려움
     * 기술적 리더십 외에도 군사 및 경제력에도 반도체 능력이 중요한 역할을 함
     * 미국과 중국 간 반도체 경쟁은 더욱 치열해질 것이며, 자국 내 생산력 확보에 주력할 것으로 보임
     * 두 나라 간 협력과 무역도 일부 제약을 받을 가능성이 있음
     * 반도체 공급망의 한쪽 의존도를 줄이고 다각화하는 노력이 필요함
     * 새로운 첨단 반도체 개발에 막대한 R&D 투자와 숙련된 인력이 필수적임
     * 한국, 대만, 일본 등 아시아 국가들의 역할도 주목할 필요가 있음
     * 장기적으로는 미중 간 기술 패권 경쟁의 핵심 분야가 될 것으로 예상됨

        Hacker News 의견

     * 한 사용자는 미국 역사에서 철도, 자동차 회사, 통신 섬유 붐과 같은 대규모 자본 투자 붐이 반복될 것이라고 예상함. 이러한 투자는 초기에는 많은 기업이 파산하지만, 결국 경제와 사회에 큰 이익을 가져다줄 것이라고 믿음. 특히 에너지 투자가 화석 연료에서 벗어나는 데 기여할 것이라고 생각함
     * 다른 사용자는 철도와 현재의 하드웨어 투자를 비교하는 것은 부적절하다고 주장함. 철도는 오랜 기간 동안 지속 가능하지만, 현재의 하드웨어 투자는 6년 후에는 가치가 없을 것이라고 봄. 또한, 미래의 AI 시스템이 현재의 하드웨어에서 효율적으로 작동하지 않을 위험이 있다고 경고함
     * 또 다른 사용자는 LLM에 막대한 자원을 투자하면서도 환경 파괴를 주장하는 것이 모순적이라고 지적함. 결국 LLM에 대한 기대를 포기하거나 환경 파괴에 대한 주장을 포기해야 할 것이라고 주장함
     * 한 사용자는 현재의 AI 붐이 GPU와 하드웨어 투자에 집중되어 있으며, 소프트웨어와 AI 플랫폼에 대한 투자도 주목받아야 한다고 주장함. 이 이야기는 'GPU 투자 붐'으로 더 정확하게 표현될 수 있다고 봄
     * 클라우드 비용에 대한 우려를 표명하는 사용자는 대규모 투자가 클라우드 비용에 어떤 영향을 미칠지 궁금해함. 규모의 경제로 비용이 절감될 수도 있지만, 자원이 소진되어 가격이 상승할 수도 있다고 예상함
     * AI 버블이 곧 터질 것이라고 예측하는 사용자는 현재 상황을 1998년의 닷컴 버블과 비교함. LLM과 생성 AI가 올해의 유행어가 될 것이라고 봄
     * AI가 환각을 일으키는 문제를 지적하는 사용자는 이러한 AI가 틈새 시장 외에는 유용하지 않을 것이라고 주장함
     * 미래의 용량을 위한 투자 붐이 일어나고 있으며, 수요가 이를 따라갈지 궁금해하는 사용자는 과잉 용량이 구축되어 일부 파산과 더 저렴한 컴퓨팅/AI 비용이 발생할 수 있다고 예상함. 이는 차세대 스타트업이나 기업이 번창할 수 있는 기회를 제공할 것이라고 봄
     * Dr. Robert Martin의 이야기를 회상하는 사용자는 대역폭 용량이 무한대로 증가하고 비용이 0에 가까워지는 상황을 언급함. 지능의 수요가 무한할 가능성과 지능의 비용이 전력 비용과 수렴할 가능성을 제기함
     * AI 제품이 코드, 텍스트, 이미지 생성, 데이터 분석, 작업 자동화 등 다양한 용도로 사용되고 있지만, 개인적으로는 Copilot 사용이 줄어들었다고 말하는 사용자는 AI가 미세한 버그를 생성하여 디버깅에 더 많은 시간이 소요된다고 주장함. 'chain of thought' 모델도 시도했지만 더 나쁜 결과를 얻었다고 함
"
"https://news.hada.io/topic?id=17429","“><SCRIPT SRC=HTTPS://MJT.XSS.HT> LTD” 사명 변경 강요 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         “><SCRIPT SRC=HTTPS://MJT.XSS.HT> LTD” 사명 변경 강요 (2020)

     * 회사 이름 변경 강제
          + Companies House가 보안 위험을 이유로 회사 이름 변경을 강제함
          + 원래 이름은 ""“><SCRIPT SRC=HTTPS://MJT.XSS.HT>; LTD""였으며, 이는 크로스 사이트 스크립팅(XSS) 공격에 취약한 이름이었음
          + XSSHunter 사이트에서 스크립트를 로드하여 경고 메시지를 표시하는 방식으로 보안 취약점을 증명함
     * 이름 변경의 배경
          + 영국 소프트웨어 엔지니어가 재미와 장난기 있는 이름으로 회사를 설립함
          + Companies House가 해당 이름이 보안 위험을 초래할 수 있음을 인지하고 이름 변경을 요구함
          + 이전에도 유사한 이름이 등록된 적이 있으나, 이번 사례가 처음으로 대응을 유발함
     * 보안 조치
          + Companies House는 보안 위험을 줄이기 위해 즉각적인 조치를 취하고 유사한 사례가 발생하지 않도록 예방 조치를 마련함
          + 회사 이름은 현재 ""THAT COMPANY WHOSE NAME USED TO CONTAIN HTML SCRIPT TAGS LTD""로 변경됨
     * 회사 디렉터의 입장
          + 회사 디렉터는 정부 디지털 서비스(GDS)가 보안에 대해 좋은 평판을 가지고 있어 문제가 없을 것이라 생각했음
          + 문제가 발견되자마자 Companies House와 국가 사이버 보안 센터에 즉시 연락함

GN⁺의 정리

     * 이 기사는 회사 이름에 HTML 코드가 포함될 경우 발생할 수 있는 보안 위험을 다루고 있음
     * 크로스 사이트 스크립팅(XSS)과 같은 보안 취약점에 대한 경각심을 일깨워 줌
     * 비슷한 기능을 가진 산업 내 다른 프로젝트로는 OWASP의 보안 가이드라인을 추천할 수 있음
     * 이 기사는 보안에 대한 인식을 높이고, 회사 이름 등록 시 보안 고려의 중요성을 강조함

        Hacker News 의견

     * 한 사용자가 주차장 터미널에서 Windows 운영 체제와 안티바이러스 소프트웨어를 악용한 사례를 공유함. QR 코드에 EICAR 테스트 문자열을 인코딩하여 스캐너에 넣었더니 안티바이러스 팝업이 터미널 화면을 가려 사용 불가능하게 만들었음
     * 법률 변경을 필요로 했던 훌륭한 트롤링 사례로, 회사 이름에 컴퓨터 코드를 포함할 수 없도록 법이 개정되었음
     * 2014년 폴란드의 한 운전자가 속도 카메라를 피하기 위해 번호판에 SQL 인젝션을 추가한 사례가 있었음
     * 한 회사는 HTML 스크립트 태그를 포함한 이름을 사용하다가 법적으로 이름을 변경해야 했음
     * 창립자의 이름이 ""ROBERT'); DROP TABLE STUDENTS;""로, 이는 유명한 Little Bobby Tables 사례를 연상시킴
     * 2000년경 Coke Auction에서 스크립트를 사용하여 경매에서 다른 사람이 입찰하지 못하게 했던 경험을 공유함. 많은 물건을 얻었지만 결국 계정이 삭제되고 Coke UK로부터 경고를 받았음
     * RSS 피드에서 제목 요소가 HTML인지 일반 텍스트인지 명확하지 않다는 문제를 지적함. Atom은 제목 요소를 명확히 일반 텍스트로 처리하도록 명시하고 있음
     * 한 회사가 보안 위험을 초래할 수 있는 문자로 등록되었으나, Companies House 자체에는 영향을 미치지 않았고, 일부 고객의 보안이 취약했을 가능성이 있다고 언급됨
     * 2020년 기사에서 관련 사례가 다루어졌음
"
"https://news.hada.io/topic?id=17389","Ask GN: 개인 계좌 입출금 기록을 조회할 수 있는 api나 saas 가 있을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Ask GN: 개인 계좌 입출금 기록을 조회할 수 있는 api나 saas 가 있을까요?

   개인적으로 관리를 할 수 있도록 구성을 하고 싶은데 마땅한 방법이 떠오르지 않네요,

   오픈 뱅킹 api는 개인용으로 사용하기에는 비용이 너무 큰것 같습니다.

   네이버 페이나 카카오 뱅크에서 전체 계좌 내용을 불러오듯이 따로 api로 호출하던 일괄로 내려받기를 원하는데 쉽지가 않네요.

   가상 OS 서버를 만들고 그냥 웹으로 긁어오면 안되나요?

   저도 예전부터 관심있었던 쪽인데...

   https://developers.kftc.or.kr/dev/openapi/open-banking/transaction

   여기서 하면 되지 않을까 싶습니다만...

   해당 금융결제원 api가 업체 등록이 필요 해서 아무래도 개인은 어려운거 같습니다.

   https://seoyh1104.github.io/open%20api/open-api/

   이 블로그의 내용을 읽어보니 천만원 정도 한다네요... 비용이 꽤 큰듯합니다.

   https://data-make.tistory.com/428

   예전에는 되기는 되었나 보군요.
   현재는 승인을 받아야 되는듯 하네요.

   보통 간편조회나 SMS 내용을 읽어들이는거 같더라고요.. 간편조회는 https://help.moneypin.biz/c29802fbecf344abacad93ef88b0a56e 요런겁니다

   재배포 안하면 위법이 아닌걸로 알아요. 스크래핑을 개인에게 팔고 개인은 본인정보만 조회한다면요. 본인-금융사 외 3자가 없다면요.

   이게 데이터 3법이후 마이데이터로 많이 개편됐죠..

   이후는 스크래핑도 불법이 된걸로 알고 있어요.

   개인용도는 스크래핑이 위법이 아닌지 모르겠지만, 마이데이터와 스크래핑이 안 되면 국내에서는 방법이 없을거예요.

   예전에 찾아봤을 때는, 개인 레벨에서 사용할 수 있는게 없었던 걸로 기억해요.
   한다고 한다면 엑셀로 이력 매뉴얼로 받고, 파싱하는 코드 짜두는 정도? 저도 여기까지 생각하다가 접었어요.

   쉽게 떠오르는 방식은,, 개인폰에 앱으로 입출금 알림을 읽어서 서버로 쏴주는식이 합리적이지 않나 싶네요.

   저도 그걸 떠올리긴 했는데 과거 이력을 긁어오는 부분이 어려운 문제인거 같아요, 입출금 알림이 폰이 꺼져있다는 이유로 누락될까봐도 걱정이구요

   https://www.popbill.com/Content/Link/EasyFin

   저는 이 회사와는 관계없지만 정보 공유합니다.

   비용: 계좌 하나당 1개월에 5,500원 (부가세 포함)
   최대 30분마다 API 호출해서 입출금 내역 조회 가능해요.

   금융결제원 통해서 하는 것은 너무 번거롭고 이런 회사 이용하는 것도 방법입니다.
"
