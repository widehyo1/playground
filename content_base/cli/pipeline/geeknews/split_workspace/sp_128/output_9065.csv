"https://news.hada.io/topic?id=20511","네이버, 상업용 오픈소스 AI 모델 "HyperCLOVA X SEED" 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               네이버, 상업용 오픈소스 AI 모델 ""HyperCLOVA X SEED"" 공개

     * 한국어와 한국 문화에 특화된 소형 상업용 오픈소스 AI 모델
     * 3B, 1.5B, 0.5B 세 가지 파라미터 크기로 구성되어 다양한 산업 및 활용 환경에 맞춤형 적용 가능
     * 3B 모델은 이미지와 영상 이해 역량을 갖추고 있어 멀티모달 애플리케이션에 최적화
     * 1.5B와 0.5B는 텍스트 기반 이해 및 생성에 강점이 있으며, 특히 한국어 처리 성능에서 경쟁 모델보다 뛰어난 성과를 보여줌
     * 모델은 Hugging Face에서 다운로드 가능하며, 조건을 충족할 경우 상업적으로도 자유롭게 활용 가능함


AI 생태계에 씨앗을 뿌리다: 상업용 오픈소스 AI, HyperCLOVA X SEED

     * HyperCLOVA X SEED는 상업적으로 활용 가능한 오픈소스 AI 모델
     * 한국어 및 한국 문화에 특화된 AI 생태계 조성을 위한 노력의 일환
     * 3가지 모델 크기(3B, 1.5B, 0.5B)로 출시되어 다양한 환경에 유연하게 적용 가능

HyperCLOVA X SEED 3B

     * 이미지 이해(vision understanding)에 최적화된 모델
     * 한국어 및 한국 문화 맥락의 시각 정보를 정밀하게 처리할 수 있음
     * 예: 영상 속 장소를 파악하고 여행 코스를 제안하는 복합적 질의응답 지원
     * 관광 가이드, 이미지 기반 질의응답 시스템 등 다양한 활용 가능
     * 벤치마크 결과에서 한국어 기반 비전 및 텍스트 이해에서 높은 성능 입증

HyperCLOVA X SEED 1.5B

     * 지시 이행 능력을 갖춘 텍스트 중심 모델
     * 번역, 요약, 포맷 지시 등의 고도화된 텍스트 생성 작업 수행 가능
     * 한국어뿐 아니라 영어, 일본어 등 주요 언어에 대한 번역 및 처리 능력 보유
     * JSON, 반말 톤 등 특정 응답 형식도 지원 가능
     * 주요 한국어 벤치마크(KMMLU, KoBEST 등)에서 경쟁 모델보다 우수한 성능 기록

HyperCLOVA X SEED 0.5B

     * 초소형 경량 모델로, 자연스러운 한국어 대화 및 지식 응답 가능
     * 자원 제약 환경에서의 모바일, 스마트홈, 웨어러블 기기 등에 적합
     * 예: 인테리어 조언 등 실생활 질의에 대해 구조화된 답변 제공
     * KMMLU, KoBEST 등 한국어 벤치마크에서 동급 대비 뛰어난 성능
     * 경쟁 모델보다 39배 적은 학습 비용으로 높은 효율성 달성

     학습 비용 비교:
     * HyperCLOVA X SEED 0.5B: A100 GPU 시간 4,358시간, 비용 $6,537
     * QWEN2.5-0.5B: A100 GPU 시간 169,257시간, 비용 $253,886

HyperCLOVA X SEED 활용 방법

     * Hugging Face에서 모델 다운로드 가능
          + HyperCLOVAX-SEED-Vision-Instruct-3B
          + HyperCLOVAX-SEED-Text-Instruct-1.5B
          + HyperCLOVAX-SEED-Text-Instruct-0.5B
     * 대부분의 상업적 활용이 자유롭게 허용됨 (특정 조건 제외)
     * 사용 기업 및 기관을 위해 테스트용 인프라 지원 제공 예정
          + 100곳을 선정하여 HyperCLOVA X SEED 테스트용 200만 원 크레딧 지원
     * 네이버는 소버린 AI 여정의 동반자로서 기업들의 자체 AI 경쟁력 강화를 지원할 것

   흠.......

   왜 특허소송 시 라이선스 종료인지 알아보니까 방송사들이 네이버클로바에 소송을 걸었었군요 ㅋㅋ

   라이선스를 읽어보니 정말 오픈소스가 아니네요. 그냥 공개만 해뒀다 뿐이지...

   https://opensource.org/osd

   라이센스 확인해보니, 위의 osd 요건에 부합하지 않습니다. 오픈소스라는 모든 글자는 제외하고 공개 소스 혹은 소스이용가능으로 고쳐서 정확한 표현이 되도록 부탁드립니다.

   https://opensource.org/ai/open-source-ai-definition

   최근에 나온 오픈소스 AI에 대한 정의도 있습니다. 이 부분은 제가 정확히 확인은 못했는데, 부합 여부에 따라서 오픈소스 ai라는 단어의 사용이 가능한지 판단이 될 것 같네요.
"
"https://news.hada.io/topic?id=20531","이민 당국 회피를 도운 혐의로 체포된 판사, FBI에 의해 체포","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  이민 당국 회피를 도운 혐의로 체포된 판사, FBI에 의해 체포

     * 밀워키의 판사 Hannah Dugan이 이민 당국의 체포를 피하도록 도운 혐의로 FBI에 의해 체포됨
     * Dugan 판사는 법정에서 한 남성과 그의 변호사를 배심원 문을 통해 탈출시킨 혐의를 받음
     * 이 사건은 트럼프 행정부와 지역 당국 간의 이민 정책 충돌을 심화시킴
     * Dugan 판사는 공공 안전을 위한 것이 아니었다며 체포에 대해 유감을 표명함
     * 이 사건은 법원과 행정부 간의 권력 분리 문제를 제기함


밀워키 판사 체포 사건

     * 밀워키 카운티 순회 법원의 판사 Hannah Dugan이 이민 당국의 체포를 피하도록 도운 혐의로 FBI에 의해 체포됨
     * Dugan 판사는 법정에서 한 남성과 그의 변호사를 배심원 문을 통해 탈출시킨 혐의를 받음
     * 이 사건은 트럼프 행정부와 지역 당국 간의 이민 정책 충돌을 심화시킴
     * Dugan 판사는 공공 안전을 위한 것이 아니었다며 체포에 대해 유감을 표명함
     * 이 사건은 법원과 행정부 간의 권력 분리 문제를 제기함

사건 배경

     * Dugan 판사는 2016년에 밀워키 카운티 법원에 선출되었으며, 법원의 유산 및 민사 부문에서 근무한 경력이 있음
     * 사건 당시 Dugan 판사는 법정에서 이민 당국의 존재에 대해 알게 되었고, 그 후 법정에서 남성과 그의 변호사를 배심원 문을 통해 탈출시킴
     * 이 사건은 트럼프 행정부의 이민 정책에 대한 지역 당국의 반발을 보여주는 사례로 주목받음

법적 논란

     * Dugan 판사의 체포는 법원과 행정부 간의 권력 분리 문제를 제기함
     * Wisconsin 주지사 Tony Evers는 트럼프 행정부가 사법부를 공격하고 약화시키려 한다고 비판함
     * 이 사건은 이전에 매사추세츠 주의 판사가 유사한 혐의로 기소된 사건과 유사함

사회적 반응

     * Dugan 판사의 지지자들은 밀워키 연방 법원 앞에서 집회를 열어 그녀를 지지함
     * 이 사건은 법적 절차의 신성함을 지키려는 Dugan 판사의 의도를 강조하는 목소리가 있음
     * 법무부는 연방 이민 노력을 방해하는 지역 공무원에 대한 단속을 강화할 것을 시사함

결론

     * 이 사건은 법원과 행정부 간의 권력 분리 문제를 둘러싼 논란을 불러일으킴
     * Dugan 판사의 체포는 법적 절차와 권력 분리의 중요성을 강조하는 계기가 됨
     * 이 사건은 지역 당국과 연방 정부 간의 이민 정책 충돌을 보여주는 사례로 주목받음

        Hacker News 의견

     * 판사가 ICE 요원들과 논의한 주요 사항은 ""행정 영장""만 있었다는 점임
          + ""ICE 영장""은 실제 영장이 아니며, 판사나 중립적인 당사자가 이를 검토하지 않음
          + 행정 영장은 수색을 허가하지 않음
     * Dugan 판사는 법정에서 이민자를 체포하려는 연방 요원들을 ""의도적으로 오도""했다고 비난받음
          + 판사가 공식적인 행동을 한 것이 아니라, ICE 요원들에게 잘못된 정보를 제공한 것으로 보임
          + 보통 ""연방 요원에게 거짓말할 수 없다""는 법이 있지만, 정치적으로 연결된 인물에게 이를 적용한 것이 이례적임
     * ICE 요원들이 법정에 도착했을 때, Dugan 판사는 요원들에게 법정에서 나가서 수석 판사와 이야기하라고 요청함
          + 그 사이에 피고인인 Flores Ruiz는 떠남
          + Dugan 판사는 피고인이 떠나는 것을 막지 않음
     * Milwaukee Journal-Sentinel 기사에 따르면, Dugan 판사는 피고인과 변호사를 비공개 통로로 안내하여 공공 구역으로 이동시킴
          + 이는 피고인을 숨긴 것이 아니라, 비공개 경로로 안내한 것임
     * 사건의 핵심은 판사가 피고인을 비공개 출구로 나가게 했다는 점임
          + 이는 비공개 구역을 통해 피고인을 안내한 것이며, 이는 비정상적인 절차임
     * ICE는 주 법원에 개입할 권한이 없음
          + 이민법 집행이 주의 법 집행보다 우선시되어서는 안 됨
          + 불법 체류자도 법적 보호를 받을 권리가 있음
     * 체포 자체는 홍보용으로 보임
          + 비폭력 범죄로 체포할 경우, 보통은 경찰서로 초대하여 절차를 진행함
     * ""피난처 도시""를 지지하는 이유는 불법 체류자들이 경찰과 소통할 수 있도록 하기 위함임
          + 범죄 목격자가 경찰에 진술할 수 있어야 함
          + 법정에서 증언할 수 있어야 함
     * 현재 사건에 대한 많은 정보가 부족함
          + ""의도적으로 오도""한다는 것이 무엇을 의미하는지 명확하지 않음
          + ICE 요원들이 법정에 들어와 판사를 직접 질문했는지 등의 상황이 불분명함
"
"https://news.hada.io/topic?id=20574","AI 시대에 기술 쇠퇴를 피하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI 시대에 기술 쇠퇴를 피하는 방법

     * AI 도구로 인한 생산성 증가는 개발자들의 핵심 기술 쇠퇴(skill atrophy) 위험을 초래함
     * AI를 과도하게 의존하면 비판적 사고와 문제 해결 능력이 점점 약화됨
     * 디버깅, 아키텍처 설계, 기억력 등 중요한 기술이 점차 퇴화할 수 있음
     * AI를 도구로 삼되, 스스로 사고하고 학습하는 습관을 반드시 유지해야 함
     * AI와 협력하는 방식으로 사용하면, 생산성과 기술 숙련도를 모두 향상시킬 수 있음

AI 시대에 기술 쇠퇴를 피하는 방법

     * 코딩 분야에서 AI 도우미의 부상은 생산성 향상과 함께 기술 쇠퇴(skill atrophy) 위험을 초래함
          + 기술 쇠퇴는 사용 부족이나 연습 부재로 인해 시간이 지남에 따라 기술이 약화되는 현상을 의미함
     * 반복적 작업을 AI에 맡기는 것은 유익할 수 있지만, 과도하면 핵심 능력 상실로 이어질 수 있음
     * 인지적 오프로드(cognitive offloading) 현상으로 인해, 문서나 튜토리얼을 스스로 학습하는 대신 AI에 의존하는 경향이 강해짐
     * 예를 들어, GPS 사용이 길 찾기 능력을 약화시킨 것처럼, AI 자동완성과 코드 생성 기능이 사고력을 저하시킬 수 있음
     * AI가 보일러플레이트 코드를 처리해줌으로써 대규모 프로젝트에 도전할 수 있는 기회가 생겼지만, 자동화와 기술 쇠퇴 사이 경계 설정이 중요함

비판적 사고가 희생양이 되고 있는가?

     * Microsoft와 Carnegie Mellon 연구팀의 2025년 연구에 따르면, AI 의존도가 높을수록 비판적 사고 감소 현상이 발생함
     * AI에 대한 과신은 사람들이 스스로 사고하는 대신 자동 조종 상태로 전환하게 만듦
     * 쉬운 작업일수록 더욱 경계를 풀게 되고, 이로 인해 장기적인 독립 문제 해결 능력 감소가 초래됨
     * AI 도움을 받는 작업자는 동일 문제에 대해 덜 다양한 해결책을 제시하는 경향이 있으며, 이는 사고력 균질화로 이어짐
     * 연구진은 이를 비판적 사고의 저하로 정의함
     * 비판적 사고를 저해하는 장벽들
          + 인지적 장벽: 반복적인 작업일수록 AI에 과도하게 의존하는 경향
          + 동기적 장벽: 시간 압박이나 직무 범위 제약으로 깊은 사고를 회피하게 됨
          + 능력적 장벽: AI의 답변을 스스로 검증하거나 개선하는 데 어려움을 느낌
     * 한 엔지니어는 12년 경력에도 불구하고 AI의 즉각적 도움으로 인해 스스로를 더 못하는 개발자로 느끼게 되었음을 고백함
          + 문서 읽기 중단: LLM이 즉각 설명해주기 때문에 공식 문서를 읽을 필요성을 느끼지 않음
          + 디버깅 능력 감소: 스택 트레이스나 에러 메시지를 직접 분석하는 대신 AI에 복붙하여 해결하려 함
          + 깊이 있는 이해 상실: 문제를 진정으로 이해하려는 노력 없이 AI 제안만 반복 적용하게 됨
          + 감정적 반응 변화: 과거에는 버그를 해결하는 데서 얻던 기쁨이, 이제는 AI가 5분 안에 답을 못 주면 좌절로 바뀜
     * LLM에게 사고를 위탁하면서, 개발자는 장기적 숙련도를 잃고 단기적 편리성을 얻는 교환을 하게 됨

     ""우리는 AI 덕분에 10배 개발자가 된 것이 아니라, AI에 10배 더 의존하게 된 것""
     ""우리가 스스로 해결할 수 있는 문제를 AI가 해결하도록 할 때마다, 우리는 장기적인 이해를 단기적인 생산성으로 바꾸고 있음""

기술 쇠퇴의 미묘한 징후들

     * AI 의존이 단순한 가설이 아니라 실제로 개발 기술의 약화로 이어질 수 있음
     * 몇 가지 뚜렷한 징후를 통해 자신의 기술 쇠퇴 여부를 점검할 수 있음
     * 디버깅 포기 현상
          + 에러가 발생할 때 디버거를 사용하거나 스택 트레이스를 직접 읽지 않고, 바로 AI에 의존하는 경향
          + 과거에는 버그를 직접 분석하고 해결하면서 성장했지만, 이제는 그 과정을 AI에 전가하는 경우가 많아짐
          + AI가 해결하지 못하거나 사용할 수 없는 상황에서는, 기본적인 문제 진단조차 어려운 상태에 빠질 위험이 있음
     * 이해 없이 복붙하는 코딩
          + 보일러플레이트 코드를 AI가 작성하는 것은 괜찮지만, 왜 그렇게 동작하는지 이해하지 못한 채 복사하여 사용하는 경우 문제 발생
          + 특히 젊은 개발자들은 AI 덕분에 빠르게 코드를 작성하지만, 그 선택의 이유나 예외 처리 방식을 설명하지 못하는 경우가 많음
          + 다양한 대안을 고민하는 과정이 사라지면서 기초적인 사고 훈련이 결여됨
     * 아키텍처 및 시스템적 사고력 약화
          + 복잡한 시스템 설계는 단일 프롬프트로 해결할 수 없음
          + 작은 문제를 AI로 해결하는 데 익숙해지면, 고차원적 설계 작업에 대한 두려움이나 회피가 생길 수 있음
          + AI는 특정 컴포넌트나 패턴을 제안할 수 있지만, 성능, 보안, 유지보수성 등 전체 맥락을 이해하는 것은 개발자 본인의 몫임
          + 시스템 수준 사고력을 사용하지 않으면 점차 약화됨
     * 기억력 및 회상력 감소
          + 자주 쓰는 API 호출이나 언어 문법조차 기억이 흐려질 수 있음
          + AI 자동완성 기능에 익숙해지면서, 스스로 코드를 작성하는 능력이 약화됨
          + 이는 수학 계산기를 지나치게 의존하는 학생처럼, 기본 계산 능력 상실에 비유할 수 있음
     * 시간이 흐름에 따라 일부 기술이 자연스럽게 사라지는 것은 정상적인 현상임
          + 예를 들어, 어셈블리어로 메모리를 직접 관리하거나, 손으로 긴 나눗셈을 하는 능력은 더 이상 필수적이지 않음
          + 하지만 어떤 기술은 유지해야 하고, 어떤 기술은 버려도 되는지 구분하는 것이 중요함
          + 긴급 상황에서 디버깅할 수 있는 능력은 여전히 필수 기술로 간주해야 함

     속도와 지식의 트레이드오프:
     AI는 빠른 답을 제공하지만 (높은 속도, 낮은 학습),
     전통적인 방법(Stack Overflow, 공식 문서)은 느리지만 깊은 이해를 구축해줌
     * 즉각적 답변을 좇다가, 진정한 전문가로 성장하는 데 필요한 맥락 이해와 깊이를 놓칠 위험이 있음

AI 과의존의 장기적 위험

     * AI 도구에 대한 과도한 의존이 통제되지 않을 경우, 경력상 비판적 사고 위기에 직면할 가능성이 있음
     * AI가 대부분의 사고 과정을 대신하게 되면, 도구가 실패하거나 해결하지 못하는 문제에 대해 스스로 대응할 능력을 잃게 됨

     ""AI를 많이 쓸수록 뇌를 덜 쓰게 됩니다. 그러면 AI가 해결할 수 없는 문제에 부딪혔을 때, 당신은 스스로 해결할 수 있는 기술이 있을까요?""
     * 실제로 AI 코딩 도우미 장애로 개발자들의 워크플로우가 완전히 멈춘 사례도 발생함
     * 자기 실현적 예언(Self-Fulfilling Prophecy)
          + Microsoft 연구팀은 AI에 의한 직업 상실을 걱정하면서도 ""무비판적(uncritically)으로 AI를 사용""할 경우, 스스로 경쟁력을 잃게 될 수 있음을 경고함
          + 특히 신입 개발자들은 ""어려운 길""을 건너뛰고 빠른 생산성에만 집중하여, 심화 학습 없이 조기에 성장 정체에 빠질 위험이 있음
          + 결과적으로, 스스로 문제를 해결하는 기쁨이나 깊은 이해를 경험해보지 못한 버튼 누르는 인력(button-pushers) 집단이 생겨날 수 있음
          + 이들은 AI에게 질문하는 방법은 능숙할지 몰라도, 정답을 진정으로 이해하지 못하는 상황에 빠질 수 있음
          + AI가 사소하게 틀렸을 때 그 오류를 발견하지 못하고, 버그나 보안 취약점이 코드에 섞여 들어가는 문제도 발생할 수 있음
     * 팀 문화와 조직 역동성
          + 모든 개발자가 AI 도우미만 사용하게 되면, 멘토십과 비공식적 학습(osmosis learning) 이 약화될 수 있음
          + 주니어 개발자들이 동료 대신 AI에 의존하면, 시니어 개발자들이 지식을 전수하기 어려워짐
          + 기초가 약한 주니어들이 많아질 경우, 시니어들은 AI가 만들어낸 오류를 고치는 데 시간을 소모하게 됨
          + 결국 팀은 개별 구성원이 AI에 의존하는 집합체로 전락할 수 있으며, 비판적 리뷰나 공동 품질 유지 문화가 사라질 수 있음
          + 버스 팩터(bus factor) 에 사실상 ""AI 서비스 장애""도 포함이 가능함
               o ""프로젝트가 무너지려면 몇 명이 버스에 치여야 할까?""
     * 아날로그 방식으로 돌아가자는 것이 아니라, AI를 신중하게 사용해야 한다는 경고임
          + AI를 활용하면서도, 작업 그 자체뿐 아니라 사고력 자체까지 아웃소싱하지 않도록 주의해야 함
          + 목표는 AI의 혜택을 최대한 누리되, 동시에 자기 자신의 기술과 사고력을 견고히 유지하는 것임

AI를 목발이 아닌 협력자로 사용하기

     * AI 코딩 도우미의 생산성 향상을 누리면서도, 사고력과 기술을 유지하기 위해서는 의식적인 사용 습관이 필요함
     * AI를 전능한 답변자가 아니라, 주니어 페어 프로그래머나 러버덕 디버깅 파트너처럼 대해야 함
     * 다음은 고려해봐야할 구체적 실천 전략들
     * ""AI hygiene(위생)"" 실천 – 항상 검증하고 이해하기
          + AI의 결과물이 그럴듯해 보여도 무조건 신뢰하지 않고 검증하는 습관을 들여야 함
          + AI가 생성한 함수나 코드에 대해 의도적 테스트를 수행하고, 엣지 케이스를 찾아야 함
          + ""왜 이 솔루션이 작동하는가?"", ""한계는 무엇인가?""를 스스로 질문함
          + AI에게 코드를 줄 단위로 설명하거나 대안 접근법을 요청해 학습에 활용함
          + AI의 답변을 심문하면 수동적인 답변을 능동적인 교훈으로 바꿀 수 있음
     * 기본기 훈련 – 때로는 고생도 필요함
          + 매주 일정 시간을 ""AI 없는 코딩시간"" 으로 설정하여 순수한 수작업으로 문제를 해결하는 시간 확보
          + 경험 많은 개발자들은 ""No-AI Day"" 를 지정하여 직접 코드 작성, 에러 분석, 문서 검색을 실천함
          + 초기에는 느리고 답답하지만, 시간이 지나면서 자신감과 깊이 있는 이해를 회복할 수 있음
          + AI 없이 꾸준히 코딩하면 기본 실력이 엔트로피로 떨어지는 것을 방지할 수 있음
          + 이는 개발자 두뇌를 위한 크로스 트레이닝과 같음
     * AI한테 묻기전에 문제에 스스로 먼저 도전하기
          + 문제를 접했을 때 곧바로 AI에 묻지 않고, 먼저 접근 방법을 고민함
          + 최소한 의사 코드(pseudocode) 나 간단한 아이디어라도 스스로 세워본 후 AI를 활용함
          + 버그가 발생하면 최소 15~30분 정도는 스스로 디버깅해보는 시간을 갖기
          + 이러면 문제 해결 능력을 키울 수 있으며, AI 답변과 자신의 접근법을 비교하며 능동적으로 학습이 가능
     * AI를 사용하여 코드 검토를 대체하는 것이 아니라 증강하기
          + AI가 생성한 코드도 인간 동료가 작성한 것처럼 철저히 리뷰함
          + 가능하다면 AI 코드에 대해 인간 코드 리뷰를 병행하여 팀 차원의 품질을 유지함
          + 이를 통해 팀 지식을 루프에 유지하고, AI를 신뢰할 때 단독 개발자가 놓칠 수 있는 문제를 포착함
          + 이는 ""AI가 초안을 만들 수는 있지만, 우리가 코드를 소유한다""는 태도를 장려
          + 누가 작성했는지에 관계없이 팀이 저장소에 있는 모든 코드를 이해하고 유지관리 할 책임이 있음
     * 능동적 학습 – 후속 질문과 반복 학습
          + AI가 제시한 솔루션이 잘 작동해도, 그 자리에서 학습을 강화하는 시간을 가짐
          + 복잡한 정규 표현식이나 알고리듬을 AI로 작성한 경우, 그 구조를 스스로 설명하거나, AI에 왜 이 방법을 썼는지 질문함
          + AI를 단순 답변 제공자가 아니라, 무한 인내심을 가진 튜터처럼 대화형으로 활용함
               o ChatGPT가 생성한 코드에 대해 ""왜 이 방법은 안 돼?"" 라고 묻기
          + 이렇게 하면 AI는 단순한 코드 배포자가 아닌 멘토가 됨
     * 학습 일지 및 ""AI 어시스트"" 목록을 기록하기
          + AI에 반복적으로 묻는 주제를 기록하여 지식 공백을 파악함
          + 예를 들어, CSS에서 div 정렬이나 SQL 쿼리 최적화를 반복해서 묻는다면, 해당 주제를 집중 학습함
          + 플래시카드나 짧은 연습 문제를 만들어 반복 학습하여 장기 기억으로 전환함
          + 다음에 비슷한 문제에 직면하게 되면 AI 없이 문제를 풀어보고 그 방법을 기억하는지 확인해 볼 것
          + AI를 첫 번째 해결책이 아닌, 마지막 안전망으로 사용하는 태도를 유지함
     * AI와 페어 프로그래밍하기
          + AI를 질문 처리 API처럼 대하는 대신, 페어 프로그래밍 파트너처럼 대화함
          + 예를 들어, 내가 함수 초안을 작성하고 AI에게 개선점을 제안받거나, 반대로 AI가 초안을 작성하면 내가 수정함
          + 대화 예시: ""이 함수는 작동하는데, 더 명확하게 리팩토링할 방법이 있을까?""
          + 이렇게 하면 당신이 운전석에 앉아있게 함. 단순히 답변을 소비하는게 아니라, AI가 기여할 수 있도록 큐레이션하고 지시
          + AI를 감독이 필요한 주니어 개발자로 취급하고, 최종 책임자는 인간 개발자임을 명확히 함
     * 이런 습관을 통해 AI 사용은 순수한 이득이 되며, 스스로의 능력도 잃지 않게 됨
     * 실제로 AI를 활용하여 생소한 코드를 설명하거나, 복잡한 케이스로 AI를 시험하는 과정은 개인 기술 향상에도 매우 유익함
     * 예를 들어, AI를 사용하여 익숙하지 않은 코드를 설명하면 지식을 심화할 수 있고, 까다로운 사례로 AI를 당황하게 만들면 테스트 사고방식을 향상시킬 수 있음
     * 핵심은 수동적 소비자가 아니라 능동적 사용자로 남는 것임

결론: 날카로움을 유지하기

     * 소프트웨어 산업은 AI 기반 코드 생성의 시대를 향해 가속 중이며, 이제 되돌릴 수 없는 흐름이 됨
     * 이러한 도구를 받아들이는 것은 불가피할 뿐만 아니라, 대체로 이득이 되는 일임
     * 그러나 AI를 워크플로우에 통합하면서, 각자 기계에게 양보할 것과 스스로 유지해야 할 것 사이에서 신중한 선택이 필요함

     * 코딩을 사랑한다면, 단순히 빠르게 기능을 출시하는 것뿐 아니라, 문제를 해결하는 장인정신과 즐거움도 유지해야 함

     * AI를 능력 증폭기(amplifier) 로 활용하되, 대체자(replacement) 로 만들지 말아야 함
     * AI가 반복 작업을 대신할 수 있도록 하고, 그 freed-up 시간을 창의적이고 복잡한 작업에 투자함
     * 그러나 기초 기술이 퇴화하지 않도록 주의해야 하며, 항상 ""어떻게""와 ""왜""를 탐구하는 호기심을 유지해야 함
     * 디버깅 본능과 시스템 사고력을 계속 갈고닦아야 하며, AI가 제시하는 지름길만 탐색해서는 안 됨
     * ""간단히 말해서, AI를 당신의 목발이 아닌 협력자로 삼을 것""

     * 성공하는 개발자는 인간적 직관과 경험을 AI의 초능력과 조화롭게 결합할 줄 아는 사람일 것임
          + autopilot이 있거나/없거나 상관없이 코드베이스를 탐색할 줄 아는
     * 자기주도적 연습과 도전을 통해, fancy한 도구가 실패하거나 새로운 문제에 직면해도 스스로 문제를 해결할 수 있어야 함
     * ""AI가 당신을 대체할까봐 걱정하지 말고, 당신을 대체 불가능하게 만드는 기술을 키우지 않는 것에 대해 걱정할 것""
     * ""AI가 제공하는 답변을, 엔지니어의 마음으로 이해해야 한다""는 원칙을 항상 지키면, AI 열풍에 타면서도 쓸려가지 않을 것

     * 보너스
          + 다음에 AI가 기능 전체를 코딩해줄 때 유혹을 느낀다면, 스스로 직접 일부를 작성해보라는 신호로 받아들여야 함
          + 놀랍게도 많은 것을 기억하고 있고, 다시 직접 손으로 코딩하는 기쁨을 느낄 수 있음
          + AI를 생산성 향상의 도구로 삼되, 능동적으로 기술을 연마하는 습관을 절대 멈추지 말아야 함

     최고의 미래 개발자는, 오늘날의 AI로 인해, 스스로 생각하는 법을 잊지 않은 사람이 될 것임

   https://freederia.com/researcharchive/
   Ai 과학자 사이트입니다
   이런 방향이 다양한 방향성을 더욱 촉진시킬겁니다

   거부하기 힘든 수준의 생산성을 부여해주는 기술입니다. 나아가 평소에 생각해보지도 못했던 접근 혹은 라이브러리 API를 사용해줄 때는 뇌에서 스파크가 튀기도 합니다. AI에 10배 의존하게 되는 것은 자연스러운 현상이지만, 올인원 솔루션으로 모든 것을 위임하기에는, 어디까지나 코-파일럿(부조종사)라는 것을 인지해야 합니다. 일상 생활에서도 그렇고, 코드에서도 그렇고, 정말 친절한 박사 연구원이 항상 옆에 있는 기분입니다.

   예전에 같이 일하던 주니어 개발자가.. 인터넷 검색해서 나온 코드 indent도 수정안하고 고대로 복붙해놓은거 보고.. 한숨 쉬면서...

   ""구글 검색해서 stackoverflow 같은데서 나오는 코드 그대로 복붙 하지 말고, 본인이 이해하고 쓰세요""
   라고 했던 적이 있는데요.

   왜 똑같죠? ㅎㅎㅎ

   잘 모르는 사람에게는 그게 가장 쉬운 방법이니까요

   Foundation 은 SF 소설이 아니라 예언서였던가요!

        Hacker News 의견

     * GPS가 지도 읽기 능력을 약화시킨다는 일반적인 비유에 대해 다른 관점을 제시함. GPS 이전에 운전을 배운 아버지는 운전과 내비게이션을 동시에 처리하는 데 어려움을 겪음. 반면 GPS와 함께 운전을 배운 사람들은 내비게이션 지시를 처리하면서 운전을 관리하는 능력을 개발함. 이 기술은 현대 운전자의 필수 능력으로 자리 잡음
          + AI와 프로그래밍에서도 유사한 패턴을 볼 수 있음. AI를 개발 과정에 효과적으로 통합하는 새로운 기술이 등장하고 있으며, 이는 'AI와 함께하는 프로그래밍'으로 발전하고 있음
     * LLM을 사용하여 교과서 문제를 사진으로 찍어 이해를 돕는 것이 가능해짐. LLM은 사람들의 의도를 증폭시키는 도구로, 학습 의도가 있는 사람들에게는 유리함. 그러나 단순히 겉모습만 꾸미려는 사람들에게는 부정적인 영향을 미칠 수 있음
     * LLM과 작업하면서 문제를 완전히 이해하고 의도를 명확히 설명하는 능력이 향상됨. LLM은 코딩 속도를 높여주지만, 잘못된 코드를 더 빨리 생성할 수 있음. 따라서 시스템 요구 사항을 명확히 설명하고 높은 수준의 추상화로 사고하는 능력이 중요해짐
     * AI와 관련된 기술 저하가 노동 비용 절감을 위한 의도적인 결과라는 의견이 있음. AI를 통해 생산성을 높이는 것이 아니라 비용을 줄이는 것이 목표라는 현실을 강조함
     * LLM은 LeetCode와 같은 기술을 연습하는 데 유용함. AI Studio의 Gemini 2.5 Pro를 사용하여 LeetCode 문제를 해결하고 개선점을 찾도록 유도하는 방식으로 학습할 수 있음
     * Claude를 사용하여 아이디어를 탐구하고 논리의 허점을 발견하는 데 도움을 받음. Claude는 최악의 경우 믿을 수 있는 조언자 역할을 하고, 최선의 경우 탐정 역할을 함
     * 종이 지도를 사용하지 못하는 예시는 기술 변화가 개인의 능력에 미치는 영향을 보여줌. GPS가 작동하지 않을 경우 종이 지도를 찾기 어려운 상황이 우려됨
     * 기술 저하뿐만 아니라 인간 지식의 동질화 위험도 존재함. LLM에 의해 강화된 '상식'이 특정 지역의 문제를 일반적인 해결책으로 대체할 수 있음
     * 외부 도구에 의존하지 않고 네트워크를 끄고 코딩하거나 문서를 작성하는 것이 자신의 사고 능력을 확인하는 좋은 방법임. 창의적으로 사고하지 않고 다른 사람의 아이디어를 반복하는 것이 싫어져 은퇴를 결심함
     * 평균 IQ가 향후 10년간 10포인트 이상 하락할 가능성이 있지만, 모두가 AI 생성 블로그 게시물을 통해 생산성이 증가했다고 주장할 것임
"
"https://news.hada.io/topic?id=20618","8,000달러를 낭비해 버린 1줄의 코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         8,000달러를 낭비해 버린 1줄의 코드

     * macOS용 화면 녹화 앱 Screen Studio의 자동 업데이트 버그로 인해, 250MB 파일이 5분마다 반복 다운로드되는 문제가 발생함
     * 결과적으로 한 달간 2PB(2,000,000GB)의 트래픽이 Google Cloud에서 발생하며 약 $8,000의 요금 폭탄으로 이어짐
     * 원인은 단순한 코드 누락으로, 업데이트 다운로드 후 반복 요청을 멈추는 로직을 빠뜨린 것임
     * 일부 사용자에겐 인터넷 서비스 해지 등 실질적 피해까지 발생했고, 개발팀은 책임을 통감함
     * 클라우드 비용 경고 설정, 비용 유발 코드 검토, 업데이트 서버 제어 장치 마련 등의 교훈을 강조함


사고 개요

     * Screen Studio는 macOS용 데스크탑 화면 녹화 앱으로, 자동 업데이트 기능이 있음
     * 업데이트 파일 용량은 약 250MB이며, 앱은 5분마다 서버를 확인함
     * 버그로 인해 업데이트가 감지된 후에도 5분 간격 요청이 중단되지 않고 계속 다운로드됨

비극적 리팩터의 시작

     * 기존에는 업데이트 팝업이 녹화 중 방해가 되어 UX 문제가 있었음
     * 이를 개선하기 위한 리팩터 중, 업데이트 후 타이머를 정지하는 로직을 제거해버림
     * 그 결과, 업데이트 파일이 반복 다운로드되는 로직이 앱 내에 내장된 상태가 됨

무서운 컨텍스트: 백그라운드 실행 상태

     * 사용자 중 상당수가 앱을 수 주간 백그라운드 상태로 실행한 채로 사용 중이었음
     * 이 상태에서 수천 개의 인스턴스가 5분마다 250MB를 자동 다운로드함

수치로 보는 재앙

     * 5분마다 다운로드 = 하루 288회
     * 사용자 1인당 일일 다운로드 트래픽 = 72GB
     * 약 30일간 지속, 1천 명의 사용자 가정 시:
          + 250MB × 288 × 30 × 1,000 = 약 2PB 트래픽
     * Google Cloud에서 발생한 예상 요금: 약 $8,000

연쇄 실수들

     * Google Cloud 비용 알림이 설정되지 않음
     * 기존 월 요금 $300 수준으로 안일하게 생각
     * 최종적으로는 신용카드 한도 초과로 거래가 차단되며 문제 인지

사용자 피해

     * 한 사용자는 이 트래픽으로 인해 ISP(인터넷 제공업체)에서 서비스 계약 해지 통보를 받음
     * 해당 지역에 대체 공급자 없음 → 심각한 생활 불편
     * 팀은 책임 인정 및 비용 보상 제안, 다행히 상황은 원만히 해결됨
     * 하지만 사용자에게 해를 끼친 경험은 개발자에게 깊은 반성을 남김

교훈 요약

     * 클라우드 비용 알림은 필수
     * 자동 업데이트 로직은 매우 신중하게 작성할 것
     * 비용 유발 가능성이 있는 모든 코드는 특별히 검토할 것
     * 서버 제어 신호(예: 강제 업데이트 플래그) 를 설계에 포함할 것
     * 클라우드 사용 상태를 정기적으로 점검할 것

        Hacker News 의견

     * 미래에 웹 검색을 통해 이 스레드를 찾는 사람들을 위해: screen.studio는 macOS 화면 녹화 소프트웨어로, 5분마다 업데이트를 확인함. 그러나 이 게시물에서 설명된 버그는 5분마다 250MB의 업데이트 파일을 다운로드하는 것임
          + 개발자들은 이 모든 것을 정상으로 간주하지만, 실제 다운로드로 인해 $8000의 대역폭 요금이 발생함
          + 요약: 화면 녹화 소프트웨어가 5분마다 업데이트를 확인함. 이는 한 시간에 12번임
          + 나는 개발자의 판단을 신뢰하는 정도에 따라 소프트웨어를 선택함. 이 판단이 합리적인지 고려해 보길 바람
     * Screen Studio는 macOS용 화면 녹화기임. 데스크톱 앱임. 최신 버전을 쉽게 설치할 수 있도록 자동 업데이트가 필요하다고 주장함
          + 그러나 자동 업데이트는 여러 부정적인 결과를 초래함
          + 사용자의 동의 없이 업데이트를 다운로드하여 클라이언트에 트래픽을 유발함
          + 5분마다 반복적으로 다운로드가 계속됨. 사용자가 측정된 연결에 있는지 감지했는지 의문임
          + 업데이트 팝업이 흐름을 방해하는 버그가 있음
          + 팝업 자체가 사용자에게 나쁜 경험을 줌. 앱을 닫을 때 허용하고 나머지는 백그라운드에서 처리하는 것이 좋음
          + 일부 사용자는 앱의 아웃고잉 연결을 주의 깊게 살피며, 5분마다 업데이트 확인은 과도함. 앱 실행 중에 할 필요가 없음. 시작 시 확인하고 종료 시 물어보는 것이 좋음
          + 위의 모든 문제를 초래한 앱의 추가 복잡성. 개발자에게 비용이 발생함
          + 앱 스토어가 이 경우 업데이트를 처리하는 완벽한 방법이 될 수 있음
     * 화면 녹화기와 같은 중요하지 않은 앱의 개발자가 5분마다 업데이트를 확인해야 한다고 생각하는 것이 터무니없음
          + 하루에 한 번이면 충분할 것임
     * 정말로 5분마다 업데이트를 확인해야 하는지 의문임. 시작 시 한 번이면 충분하며, 사용자가 며칠 동안 켜두는 경우에도 하루에 한 번 또는 그보다 적게 확인할 수 있음
     * 나는 코드 리뷰에 대해 항상 엄격함. 한 번은 매니저가 QA에 더 맡기라고 했을 때 ""우리는 모두 직장을 잃을 수 있음. 우리는 항상 나쁜 코드 한 줄로 직장을 잃을 수 있음""이라고 대답함
          + 주니어 또는 경험 많은 개발자가 잠재적인 PII 유출을 작성하는 경우가 많음. 대부분의 시스템에서 법적 문제를 일으킬 수 있는 가능성이 매우 큼
     * 수천 명의 사용자가 데이터 요금제에서 불필요하게 소모한 대역폭에 대한 문제
          + 이러한 부주의한 실수가 인터넷 사용자 모두에게 혼잡을 초래할 수 있음
          + 만약 이 실수가 $8000의 비용이 아니라 Google Cloud의 무료 요금제나 다른 계획으로 해결되었다면, 여전히 심각한 버그로 간주하고 신속하게 수정했을지 의문임
          + 얼마나 많은 잘못된 설계가 트래픽을 생성하고 공통 자원을 소모하고 있는지
     * 내가 Mac 데스크톱 애플리케이션을 배포했을 때:
          + 우리는 Sparkle을 사용하여 업데이트를 처리했음. 그들의 자체 업데이트를 선택한 것은 잘못된 선택이었음
          + 우리의 애플리케이션은 매우 복잡했고 Mono와 함께 배포되었음. 그러나 10MB 정도였음. Windows 버전은 2MB였고 32비트 및 64비트 바이너리를 포함했음. 그들이 250MB의 화면 녹화기를 배포하는 이유가 궁금함
          + 그들은 교훈을 얻지 못한 것 같음. 전체 기사는 그들을 어리석게 보이게 함
     * '더 나은 테스트'가 요약에서 언급되지 않은 것이 놀라움
          + '코드를 신중하게 작성하라'는 제안이 초보적인 실수처럼 보임
          + 개발자가 사용자 기기를 테스트 베드로 사용하는 것이 매우 좌절스러움
     * 나는 서드파티 라이브러리 채택에 대해 보수적임 (각 라이브러리가 장기적으로 문제를 일으킬 가능성이 있기 때문임), 그러나 앱 업데이트는 가치가 있음
          + 이는 기본적으로 하나의 큰 엣지 케이스이며, 앱에 심각한 버그가 있을 경우 복구 계획의 중요한 부분임
          + 이 버그는 그들의 자체 업데이트의 유일한 문제가 아님. 5분마다 확인하는 것은 미친 짓임. 그들이 이에 대해 깊이 생각하지 않았다는 것을 보여줌
     * 나는 Proxy Auto-Configuration (PAC) 파일을 사용하는 검열 방지 프록시 서비스를 운영 중임
          + 파일에 잘못된 JS가 포함되어 있거나, 파일 크기가 1MB를 초과하면, 시스템 전체에 구성된 경우 모든 앱이 서버에 요청을 계속 보내는 문제가 발생함
          + 이는 내 서버를 DDoS 공격하고 BGP 수준에서 IP를 차단하는 결과를 초래했음
          + 500,000명 이상의 사용자가 매일 사용함. 내 웹 서버는 월 $20의 VPS로 무제한 트래픽을 제공함. 덕분에 나는 OP와 같은 상황에 처하지 않았음
"
"https://news.hada.io/topic?id=20578","Show GN: React Streaming SSR 직접 만들어보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: React Streaming SSR 직접 만들어보기

   안녕하세요. 
   React Streaming SSR을 직접 구현해 보는 프로젝트를 만들게 되어 공유해 봅니다.

   Node.js 환경에서 React Server API 기반으로
   간단하게 Streaming SSR을 구현하는 방법을 소개합니다.

   상세한 내용은 아래 링크를 확인 부탁드립니다.
   기여는 언제든지 환영입니다!
     * Github: https://github.com/mugglim/build-your-own-react-streaming-ssr
     * 홈페이지: https://mugglim.github.io/build-your-own-react-streaming-ssr
"
"https://news.hada.io/topic?id=20612","자기 논쟁을 통해 사고를 심화하는 AI 기술, Chain of Recursive Thoughts","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         자기 논쟁을 통해 사고를 심화하는 AI 기술, Chain of Recursive Thoughts

     * CoRT는 AI 모델이 스스로의 응답을 반복적으로 검토하고 대안을 생성하여 최적의 답변을 선택하도록 하는 알고리듬임
     * Mistral 3.1 24B 모델에 적용했을 때, 특히 프로그래밍 작업에서 성능이 크게 향상됨
     * AI는 초기 응답을 생성하고, 여러 번의 '생각 라운드'를 통해 대안을 평가하여 최종 응답을 선택함
     * 이 과정은 자체 평가, 경쟁적 대안 생성, 반복적 개선, 동적 사고 깊이를 포함함
     * CoRT는 MIT 라이선스로 제공되며, 개선을 위한 기여를 환영함


CoRT (Chain of Recursive Thoughts) 🧠🔄

  요약

     * AI가 스스로와 논쟁하여 더 나은 답변을 찾도록 하는 알고리듬인 CoRT를 소개함
     * AI 모델이 응답을 반복적으로 검토하고 대안을 생성하여 최적의 답변을 선택함
     * Mistral 3.1 24B 모델에 적용했을 때, 특히 프로그래밍 작업에서 성능이 크게 향상됨

  CoRT의 작동 방식

     * AI가 초기 응답을 생성함
     * AI가 필요한 '생각 라운드'의 수를 결정함
     * 각 라운드에서:
          + 3개의 대안 응답을 생성함
          + 모든 응답을 평가함
          + 최적의 응답을 선택함
     * 최종 응답은 이 AI 배틀 로얄의 생존자가 됨

  비밀 소스

     * 자체 평가
     * 경쟁적 대안 생성
     * 반복적 개선
     * 동적 사고 깊이

  기여

     * 개선 방법을 찾았다면 PR을 환영함

  라이선스

     * MIT 라이선스로 자유롭게 사용 가능함

        Hacker News 의견

     * 어떤 문제에 대해 AI 채팅 모델이 답을 제시하게 하고, 그 답이 왜 맞는지 설명하는 보고서를 작성하게 함
          + 두 번째 AI 모델이 이 보고서를 평가하고, 원래 모델이 제공하지 않은 정보나 논리적 불일치를 지적하는 보고서를 작성하게 함
          + 이 과정을 반복하여 두 번째 AI 모델이 첫 번째 AI 모델의 설명에 만족하거나, 첫 번째 AI 모델이 모든 요청된 변경 사항을 구현할 때까지 진행함
          + 이 방법이 다소 복잡하지만 시도한 경우 꽤 좋은 결과를 얻음
     * 더 큰 규모로 항상 켜져 있는 모드에서 '상원'의 토론을 시도하고 싶음
          + 개별적인 문제에 응답하는 대신, 작업 목록을 제공하고 상원이 이를 해결하도록 함
          + 다양한 관점과 비판적 분석을 통해 인상적인 결과를 얻을 수 있을 것이라고 생각함
          + 많은 토큰이 필요하지만, 토큰당 비용이 점점 감소하고 있어 가능성이 있음
          + AI 전용 IRC 서버를 설정하여 누구나 자신의 모델을 연결할 수 있는 공유 토론 공간을 만들 가능성도 있음
     * 간단한 전략으로 메시지를 마무리할 때 ""생각 태그로 한 번 생각하고, 비판 태그로 자기 비판을 한 번 하고, 마지막으로 생각 태그로 한 번 더 생각한 후 응답해 주세요""라고 요청함
          + 잘 작동함
          + 제안의 가장 큰 문제 5가지를 찾도록 요청하는 것도 효과적임
     * 제목에서 예상했던 것과 다름
          + 보조자, 교차 검사자, 판사 역할을 설정하여 각각의 역할에 따라 질문과 답변을 진행함
          + ChatGPT에게 ""XYZ가 사실이라면 설명해 주세요""와 ""XYZ가 사실이 아니라면 설명해 주세요""라고 요청하여 더 설득력 있는 쪽을 찾음
     * Unreal Engine 블루프린트 스타일의 그래프 편집기를 만들어 사용자 입력을 시작으로 여러 에이전트가 작업을 수행하도록 설계 중임
          + Mistral small 3.1과 gemma 3 모델이 로컬에서 실행 가능한 첫 번째 반능력 모델처럼 느껴짐
          + Python 실행을 루프에서 시도하고 세상을 탐험하도록 지시하면 뉴스 등을 다운로드하고 읽기 시작함
     * AI 에이전트 팀이 스크럼 팀을 운영하고 몇 시간마다 스탠드업 미팅을 할 것인지 궁금함
          + 정부 관료제를 에이전트들이 하루 종일 주제를 토론하여 최선의 의견을 찾는 방식으로 복제할 것인지 궁금함
     * ML 모델이 새로운 아이디어를 내도록 하는 방법으로, 이미 시도하고 버린 아이디어에 대해 대각선으로 접근하면서 일정한 일관성 제약을 유지함
     * 모든 GPU를 친환경 에너지로 빠르게 전환하지 않으면 AI가 스스로 최적의 해결책을 찾기 위해 토론하는 동안 지구가 뜨거워질 것임
     * CoRT를 사용한 예제와 사용하지 않은 예제가 있는데, 사용하지 않은 예제가 훨씬 나음
          + 이상한 예제 선택임
     * 이 접근 방식이 YT 크리에이터를 떠올리게 함
          + 게임을 경주 코스처럼 스크립트를 만들어 목표 지점에 도달하도록 하고, 가장 빠른 해결책을 찾을 때까지 반복함
          + 이를 기계 학습 또는 강화 학습이라고 부름
          + AI에 대한 무지한 이해가 대체로 비슷함
"
"https://news.hada.io/topic?id=20637","JAVA 문자열(String) 성능 대폭 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       JAVA 문자열(String) 성능 대폭 향상

   서론
     * JDK 25에서 String::hashCode가 대부분 상수 폴딩 처리되도록 개선됨.
     * 불변 Map에서 문자열 키 기반 조회 시 성능이 크게 향상됨.

   본론
     * Map<String, MethodHandle> 구조에서 key lookup이 정적으로 최적화됨.
     * 내부적으로 String.hash 필드에 @Stable 적용, hash 값이 고정되면 JVM이 캐시 신뢰함.
     * 이로 인해 해시 계산, Map 인덱스 계산, 메서드 핸들 조회가 모두 컴파일 타임에 상수로 처리됨.
     * benchmark 결과, 기존 JDK 24 대비 최대 8배 이상 성능 개선 확인됨.
     * 단점은 hashcode가 0인 경우 상수 폴딩이 되지 않음 ("""" 문자열 포함).
     * JEP 502 통해 사용자 코드에서도 향후 유사 기능 제공 예정.

   결론
     * JDK 25의 String 최적화는 정적 구조 기반 코드에 효과적.
     * @Stable은 내부 전용이나 향후 공개 기능으로 확장될 가능성 있음.
     * 최신 JDK 도입 시, 문자열 기반 Map 처리 성능 크게 개선 가능.
"
"https://news.hada.io/topic?id=20558","당신의 휴대전화는 당신의 말을 몰래 듣고 있지는 않지만, 사실은 더욱 불안합니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             당신의 휴대전화는 당신의 말을 몰래 듣고 있지는 않지만, 사실은 더욱 불안합니다.

     * 스마트폰이 사용자의 대화를 비밀리에 듣고 있다는 음모론이 있지만, 실제로는 데이터 수집 및 알고리즘을 통해 광고가 타겟팅됨
     * 2019년 Wandera의 실험 결과, 스마트폰이 대화를 녹음하여 광고에 활용하는 증거는 발견되지 않았음
     * Facebook은 사용자의 대화를 듣고 있지 않다고 주장하며, 사용자 데이터를 기반으로 광고를 제공함
     * 스마트폰 앱이 스크린샷을 자동으로 찍어 제3자에게 전송하는 경우가 발견됨
     * Facebook과 Google은 위치 정보, 친구 관계, 기기 사용 패턴 등을 통해 사용자에게 맞춤형 광고를 제공함


스마트폰이 대화를 듣고 있는가?

     * 스마트폰이 사용자의 대화를 비밀리에 듣고 있다는 음모론이 존재함
     * Facebook, Google, Apple은 이러한 주장을 부인하고 있음
     * 실제로는 데이터 수집 및 알고리즘을 통해 광고가 타겟팅됨

Active Listening 시스템

     * 2024년, Cox Media Group의 Active Listening 시스템이 논란이 됨
     * 이 시스템은 스마트 기기의 마이크를 사용하여 ""실시간 의도 데이터""를 수집함
     * 주요 기술 기업들은 이 시스템과의 연관성을 부인함

Wandera의 실험

     * 2019년, Wandera는 스마트폰이 대화를 듣고 있는지 실험함
     * 실험 결과, 대화를 녹음하여 광고에 활용하는 증거는 발견되지 않았음
     * 데이터 소비량, 배터리 사용량, 백그라운드 활동에서 차이가 없었음

Facebook의 데이터 수집

     * Facebook은 사용자의 대화를 듣고 있지 않다고 주장함
     * 사용자 데이터, 관심사, 프로필 정보를 기반으로 광고를 제공함
     * 2019년, Facebook은 Messenger 앱의 대화를 외부 업체에 전사하도록 계약함

스마트폰의 다른 추적 방법

     * 스마트폰 앱이 스크린샷을 자동으로 찍어 제3자에게 전송하는 경우가 발견됨
     * 위치 정보, 친구 관계, 기기 사용 패턴 등을 통해 사용자에게 맞춤형 광고를 제공함
     * 이러한 데이터 수집 방식이 마이크로폰 감시보다 더 복잡하고 불안감을 줌

        Hacker News 의견

     * Jonathan Zeller의 글이 떠오름. ""Calm Down—Your Phone Isn’t Listening to Your Conversations. It’s Just Tracking Everything You Type, Every App You Use, Every Website You Visit, and Everywhere You Go in the Physical World""라는 제목의 글임
     * 과거에 Google이 Twitter를 통해 대량의 데이터를 수집하는 것을 폭로했음. Twitter에서 위치 데이터를 공유하지 않더라도 Google이 위치를 알 수 있었음
          + 이 실험은 중단되었지만, 이러한 폭로로 인해 Twitter 계정이 영구 정지되었음
     * 현재 페이지의 제목은 ""Your phone isn’t secretly listening to you, but the truth is more disturbing""임
          + 글은 Facebook에 초점을 맞추고 있음
          + 실제로는 전화기가 당신을 듣고 있을 가능성이 있음. NSO 그룹 같은 곳에서 악성코드로 이를 수행할 수 있음
     * 전화기가 24/7로 당신을 듣고 있다는 것은 비용과 정확성 측면에서 비현실적임
          + 오디오를 텍스트로 변환하는 것은 비용이 많이 들고, 광고 네트워크가 이를 감당하기 어려움
          + 정확성도 낮음. 대부분의 경우 전화기는 주머니에 있어 거의 아무것도 듣지 못함
          + 전화기가 뜨거워지고 배터리가 빨리 소모되며 많은 데이터를 사용하게 됨
     * 17,000개 이상의 Android 앱 중 9,000개 이상이 스크린샷을 찍을 수 있는 권한을 가짐
          + 어떤 앱이 이를 수행하는지 감지하고 중지하는 방법이 궁금함
     * ""스마트"" TV도 스크린샷을 전송함
     * 실험으로 ""ear wax removal"" 광고가 나타났음. 친구들에게 이 광고에 대해 이야기하고 반복해서 말했더니 광고가 나타났음
     * 추천 시스템이 다른 프로필에서 가져온 것처럼 느껴짐
          + 알고리즘이 내 계정을 다른 계정과 연결했을 가능성이 있음
          + YouTube의 추천 시스템이 불편하게 느껴짐
     * 과거 회사에서 오디오 인식 기술을 제안받았으나 거절했음
          + 스마트폰이 충분한 성능을 가지고 있어 네트워크 트래픽에 나타나지 않을 수 있음
     * 광고 머신러닝 시스템이 사람들에 대해 자세히 학습했을 가능성이 있음
          + 10년 전에는 클릭률 예측 정확도가 매우 높았음
          + 최근에는 앱이 많은 서드파티 데이터 수집 및 광고 라이브러리를 연결할 수 있음
          + 가속도계 같은 비정상적인 채널을 통해 음성을 추론할 수 있을 가능성도 있음
"
"https://news.hada.io/topic?id=20629","Cursor 사용자들의 선호 언어 모델 TOP 3 및 그 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Cursor 사용자들의 선호 언어 모델 TOP 3 및 그 이유

     * gpt-4.1은 신중하고 충실한 조력자로, 정확한 코드 이해와 보수적 접근에 강점이 있음
     * gemini 2.5 pro는 넓은 컨텍스트 처리에 뛰어나고 이미지 분석 기능도 우수하지만, 과잉 수정을 유발할 위험성이 있음
     * sonnet 3.5/3.7은 창의적이고 똑똑하지만, 맥락 유지와 일관성이 부족해 장기 대화에서 흔들림이 있음
     * grok-3-beta는 느리지만 디자인 시각화와 복잡한 문제 해결에서 탁월한 잠재력을 보임
     * 사용자들은 작업 흐름에 따라 모델을 분리하여 사용하며, 디버깅 실패 시 체크포인트 복원 및 모델 전환 전략을 선호함


gpt-4.1

     * 지능적이고 신뢰도 높은 보조자처럼 행동함
     * 성급히 판단하지 않고, 요청을 따르되 과도한 수정은 하지 않음
     * 개발자의 연장선처럼 느껴지는 모델로, 경험 많은 개발자에게 특히 적합함

gemini 2.5 pro

     * 긴 콘솔 로그, 전체 코드 파일 등 넓은 문맥을 활용할 때 강력함
     * 이미지 분석 능력 탁월, 시각적 오류 포착 가능
     * 단점은 지나치게 자율적으로 동작해 불필요한 코드 삭제 또는 과잉 수정을 일으킬 수 있음
     * 주의 깊은 제어가 필요함

sonnet 3.5 / 3.7

     * 3.7은 창의적이고 똑똑하지만, 장기 대화에서 맥락을 잃거나 지시를 무시하는 경우 있음
     * 3.5는 단일 파일 기반의 코드 이해 및 수정에 강함
     * Cursor와의 통합이 과도기적 문제로 일관성 있는 성능을 보여주지 못하고 있음

기타 의견 및 전략

     * grok-3-beta는 느리지만 다른 모델이 실패한 문제를 해결하는 데 유용함
     * 한 유저는 다음과 같은 모델 분업 전략을 사용 중:
          + o3/4-mini: 계획 정리 및 마크다운 기반 사유 정리
          + gemini 2.5 pro: 전체 파일 기반 문제 분석 및 기능 호출용
          + sonnet 3.5: cmd+k 기반 단일 파일 수정용

   제미나이 2.5프로가 go lang에 한해서는 최강이라고 단언할수 있습니다

   재니마이가 속도는 가장빨라서 질의 응답용으로 추천합니다.

   소넷만 주로 사용했는데
   본문에 있는거 많이 공감되네요
   4.1도 써봐야겠습니다

   제 느낌하고 비슷하네요. sonnet은 사용할 수록 불안했고, chatgpt 4.1은 주문을 하고도 일단은 마음이 놓이는 편입니다.

   Grok에 대한 의견도 공감이 가는 바이지만 ide내에서 보다는 채팅상에서 침착히 확인할 때 많이 사용하는 편입니다

Reddit 커뮤니티 반응

  모델 활용 방식

     * o3/4-mini: 기획 및 마크다운 기반 정리, 더 나은 reasoning과 대화 적합성을 보임 (Masony817, scragz, Princekid1878)
     * gemini 2.5 pro:
          + 에이전트 모드 또는 긴 컨텍스트 기반 기능 호출에 유용 (Masony817, computerlegs)
          + 복잡한 프로젝트에서 코드 전체를 조망하고 판단하는 데 강력 (WorryBubbly3438)
          + 검색, 크로스 체크, 전처리 역할로 좋음 (computerlegs)
     * sonnet 3.5: 단일 파일 이해 및 수정에 강점, cmd+k 단축키용으로 적합 (Masony817)
     * sonnet 3.7:
          + 더 창의적이며 3.5보다 뛰어나지만 긴 대화에서 흐름 잃는 문제 있음 (Sea_Cardiologist_212)
          + 최신 커트오프 데이터 반영과 사고력에서 뛰어남 (yairEO)
          + 컨텍스트 윈도우 잘 다루면 안정적 (computerlegs)
     * Claude 3.7: Cursor 환경에서는 안정적이고 꾸준함 (cmndr_spanky)
     * gpt-4.1:
          + 단순 반복 작업이나 구조화된 작업에 적합 (Princekid1878, ILikeBubblyWater)
          + 설명 없이 과도하게 변경하는 경향 있음 (ILikeBubblyWater)
     * Deepseek R1: 특정 문제에서 의외로 다른 모델보다 잘 작동함 (Leather_Science_7911)

  사용 전략 및 워크플로우

     * 모델별 역할 분담 후 상황에 따라 전환 (복수 의견)
     * cmd+k: sonnet 3.5로 단일 파일 처리 (Masony817)
     * 에이전트 모드는 초기 설정 후에는 비활용, 대신 체크포인트 기능과 명확한 프롬프트 사용 (WorryBubbly3438)
     * Auto mode 선호: 빠르고 저비용으로 실행 가능 (Funny-Anything-791, d0RSI)
     * 기계적 접근법: CNC 기계처럼 명시적이고 정밀한 지시가 중요 (Funny-Anything-791)
     * UI 및 디자인 테스트 특화 모델은 아직 미흡 (Princekid1878)

  기타 의견

     * Sonnet 3.7은 이전보다 집중력과 맥락 유지가 떨어졌다는 불만 (Sea_Cardiologist_212)
     * Gemini나 Claude는 테스트 영상에서는 좋아 보이나 실제 환경에서는 다름 (cmndr_spanky)
     * 대부분의 모델은 명시적 프롬프트가 핵심 (공통된 언급)
     * 일부 사용자는 crypto나 Web 기반 통합을 기대 (간접적으로 언급됨)
"
"https://news.hada.io/topic?id=20569","Backblaze - 소송, 부실 회계, 그리고 뻔뻔한 내부자 덤핑에 휩싸인 적자 데이터 저장 기업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Backblaze - 소송, 부실 회계, 그리고 뻔뻔한 내부자 덤핑에 휩싸인 적자 데이터 저장 기업

     * Backblaze는 캘리포니아에 본사를 둔 클라우드 스토리지 및 백업 솔루션 제공업체로, 지속적인 적자, 심각한 내부자 주식 매각 및 회계 부정 논란에 휘말려 있음
     * 2024년 10월, 두 명의 전직 고위 직원이 Backblaze를 상대로 회계 사기 및 내부 고발자 보복을 주장하는 소송을 제기함
     * 창립자들은 IPO 락업이 만료되자마자 주식을 대량 매도하여 주가 하락을 초래했으며, 이는 외부 자본 시장 조언에 반하는 행동이었음
     * 소프트웨어 개발 비용의 과도한 자본화로 실적을 왜곡하고 있으며 동종 업계 평균 대비 약 5배 높은 수준임
     * 인공지능(AI) 관련 시장 공략을 내세웠지만, 차별화 없는 저가 스토리지 제품으로 경쟁력을 상실하고 있음
     * Morpheus Research는 Backblaze의 주가 하락에 베팅하는 공매도 포지션을 공개
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Backblaze 개요와 문제 제기

     * Backblaze는 캘리포니아에 본사를 둔 클라우드 스토리지 및 백업 솔루션 제공업체임
          + S3 호환 B2 Cloud Storage와 Computer Backup이라는 두 가지 사업 부문을 운영
     * 2021년 IPO 이후 단 한 번도 이익을 기록하지 못하고 있음
     * 2024년 두 전직 고위 임원이 회계 부정 및 내부자 주식 매각에 대한 소송을 제기함
     * IPO 락업 해제 이후 창업자들은 매일 10,000주씩 주식을 매도하며 주가 폭락을 유발함
     * 전직 직원들은 재무 보고서의 허위 작성 압박과 경영진의 주식 매각 은폐 시도를 주장함

회계 부정과 내부자 주식 매각 논란

     * 창업자들은 IPO 이후 시장 조언을 무시하고 공격적인 매도 전략을 강행함
     * 전직 CTO는 내부 이메일에서 ""주가가 0이 되어도 주식 매도는 정당했다""고 언급함
     * 전 CFO와 함께 작성한 허위 현금흐름 예측 자료로 감사 의견을 통과시키려 시도함
     * 내부 조사 결과 중대한 내부 통제 결함이 발견되었지만, 주주에게는 공개되지 않음
     * CEO Gleb Budman도 비공개 중대한 정보를 보유한 상태에서 주식을 매도했다는 의혹이 제기됨

비용 자본화 과잉과 조작된 재무 지표

     * Backblaze는 2022년 이후 매출 대비 내부 사용 소프트웨어 개발 비용을 9.8%~14.4% 까지 자본화함
     * 동종 SaaS 기업 평균 대비 약 5배 높은 수준으로 실적 왜곡이 의심됨
     * 비용을 과도하게 자본화하여 단기 손실을 줄이고, 장기적으로는 더 큰 감가상각 부담을 초래함
     * 2024년 3분기부터 ""조정 자유현금흐름"" 지표를 새로 도입했지만, 이후 정의를 변경해 소송 합의금과 구조조정 비용을 제외함
     * 이는 회사 실적을 더 긍정적으로 보이게 하려는 의도로 해석됨

제품 경쟁력 부재와 시장 입지 약화

     * Backblaze는 AI 관련 마케팅을 강조했지만, 실제로는 단순 저가 저장소만 제공함
     * 전 CTO도 ""AI라고 부를 수 없는 단순 기술""이라며 비판함
     * 경쟁사 Wasabi는 브랜드 인지도, 성장률, 글로벌 입지 등에서 Backblaze를 압도하고 있음
     * 최근 몇 달 사이에 여러 AI 고객이 Backblaze를 떠나 Wasabi로 이동함
     * Q4 2024 실적 발표에서도 대형 고객 손실을 인정함

결론: 실패한 성장 스토리

     * Backblaze는 상장 이후 단 한 번도 투자자들에게 가치를 제공하지 못함
     * 내부자 매도, 회계 조작, 실적 부풀리기 등의 문제로 주가 하락을 자초함
     * 혁신이나 차별화 없이 가격 경쟁에만 의존하고 있음
     * 경영진의 행동은 주주의 이익을 고려하지 않은 것으로 비판받고 있음
     * Morpheus Research는 Backblaze 주식에 대해 공매도 입장을 유지하고 있음

   음 5년전엔 Backblaze 관련 기사도 올리고 했었는데.. 이렇게 되어버렸군요.
   Backblaze B2, S3 호환 API 공개
   Backblaze B2 와 Cloudflare 를 이용한 개인 무료 이미지 호스팅 만들기

   미국은 이런식으로 부정적인 이슈들에 대해서 자료와 함께 공개 저격하며 공매도 포지션을 알리는 상황들을 종종 보게 되네요.

        Hacker News 의견

     * Backblaze의 복구 능력에 대한 신뢰가 흔들리지 않았음. 그러나 새로운 CFO인 Marc Suidan이 Beachbody에서 왔다는 부분에서 놀람
     * 기사에 따르면 고객들이 Wasabi로 이동하고 있다고 하지만, Wasabi는 단순한 저장소로 보임. Backblaze의 장점은 자동 백업을 처리하는 좋은 클라이언트 솔루션에 있음
          + 백업 기록 업셀도 인터넷이 불안정한 여행 패턴을 가진 사람에게 유용함
     * 오픈 소스 도구를 사용해 비슷한 기능을 구현할 수 있지만, 직접 백업을 만드는 것이 암호화를 만드는 것만큼 불안함
     * Wasabi에 내가 놓친 클라이언트 솔루션이 있는지 궁금함
     * 고객으로서 걱정해야 하는지 고민됨. Backblaze는 저렴한 백업 서비스로 좋아함
     * Hindenburg Research 창립자가 떠난 후 Morpheus가 그들의 후속작인지 궁금함. 사이트가 매우 유사하고 시기도 맞음. Hindenburg의 연구를 읽는 것을 좋아했음
     * Budman이 시장 타이밍을 피하고 싶다고 주장했지만, 발표 후 Backblaze 주식이 26% 하락한 것을 보면 거의 완벽하게 시장 타이밍을 맞춘 것처럼 보임. 이는 내부자 거래처럼 보임
     * B2 스토리지에 매우 만족함. 사용하기 쉽고 잘 작동하며 가격도 괜찮음. 여러 Synology NAS의 백업 대상으로 사용 중임. 계속 사업을 유지하길 바람
     * Wasabi가 저장 공간에서 Backblaze보다 더 잘 알려진 브랜드인지 의문임
     * S3와 유사한 B2 제품이 너무 불안정해서 Wasabi로 이동했음. 사실이라면 꽤 놀라운 목록임
     * Morpheus Research가 Fastly를 다음으로 조사해야 함
     * Backblaze가 사업을 접으면 어디서 하드 드라이브 통계를 얻을지 궁금함 ;D
"
"https://news.hada.io/topic?id=20627","미국 경제 1분기 0.3% 수축 - 관세 앞둔 수입 급증이 주요 원인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 미국 경제 1분기 0.3% 수축 - 관세 앞둔 수입 급증이 주요 원인

     * 2025년 1분기 미국 GDP는 연율 기준 -0.3% 감소, WSJ 전망치(+0.4%)를 하회함
     * 트럼프 대통령의 관세 정책 발표 직전 수입 급증(41.3%), GDP 하락의 직접적 원인으로 작용함
     * 소비는 전 분기 4% → 1.8%로 급격히 둔화, 기업 투자(+9.8%)는 증가
     * 관세와 경제 불확실성으로 인해 기업과 소비자 모두 신중해지고 있음, 주요 기업들 수익 예측도 하향
     * 연준은 경기 둔화 vs 인플레이션 대응이라는 어려운 정책 결정 상황에 직면함


U.S. Economy Contracts at 0.3% Rate in First Quarter

   미국 경제는 2025년 1분기 연율 -0.3%의 성장률을 기록, 2022년 이후 최악의 분기 감소세를 보임.
   WSJ 설문 경제학자들의 전망치인 +0.4%를 크게 하회함.

관세 앞둔 수입 증가와 소비 둔화가 핵심 원인

     * 중국발 수입 폭증: 1분기 동안 41.3% 증가, 이에 따라 GDP 통계상 큰 마이너스로 반영됨
     * 수출은 1.8% 증가에 그쳐 무역 불균형 심화
     * 소비 지출은 1.8% 증가, 전 분기(2024년 4분기) 4%에서 급감
     * 기업 투자(소프트웨어, R&D 등)는 9.8% 증가, 내수 기반은 일부 유지됨

정책 전환기에서의 불확실성

     * 1분기는 조 바이든 → 도널드 트럼프 행정부 이양기, 1월은 산불과 겨울 폭풍의 영향도 받음
     * 트럼프 대통령은 취임 직후 중국, 멕시코, 캐나다에 관세 부과, 일부는 중단되었으나 4월부터는 대규모 추가 관세 시행
     * 기업들은 재고 확보를 위해 앞당긴 수입을 진행했고, 이로 인해 GDP에 역효과 발생

기업과 소비자, 관세 불안감에 움츠러듦

     * Colgate-Palmolive, GM, PepsiCo 등 주요 기업 CEO들, 관세 혼선으로 계획 수립에 어려움 토로
     * 일부 소비자들은 관세 전 구매 가속화(예: 자동차 판매 급등), 그러나 이는 미래 수요를 앞당긴 것에 불과해 성장 지속성엔 부정적
     * Colgate CEO는 “소비자가 식료품 비축을 줄이고 필수품 구매도 꺼림”이라고 언급

연준의 딜레마

     * 관세로 인해 물가 상승 + 경기 둔화 동시 발생 가능성
     * 제롬 파월 연준 의장은 “소비자 물가 상승과 실업 증가 가능성”을 인정하며 연준이 어느 쪽도 대응하기 어렵다는 점을 언급
     * 기준금리 조정이 오히려 다른 문제를 악화시킬 수 있음, 매우 도전적인 정책 환경이 조성됨

        Hacker News 의견

     * 인플레이션이 낮아져 연방준비제도가 금리를 인하할 수 있을 만큼 안정되었을 때, 이 행정부가 이를 방해했음
          + 이러한 정책을 믿는다고 해도, 왜 그렇게 빨리 시기를 맞췄는지 의문임
          + 마치 이 행정부가 미국 경제를 파괴하려는 임무를 받은 것처럼 보임
     * Peter Navarro가 CNBC에서 GDP 감소에 대해 관세 효과를 제외하면 3% 성장이라며 긍정적으로 반응함
     * 주택 가격은 여전히 저렴해지지 않을 것임
          + 거의 모든 공급이 0%에 가까운 30년 대출에 묶여 있음
          + 누구라도 그 대출을 포기하기 전에 차를 포기하고 모든 귀중품을 팔 것임
     * 외부에서 보면, 이곳에서 읽는 것은 세계의 상징이었던 배가 가라앉을 때 그 배에 대한 친구들의 의견을 듣는 것과 같음
          + 미국 외부의 모든 사람들은 ""그들은 그를 두 번째로 뽑았다. 그들을 동정할 수 없다.""라는 생각을 가짐
          + 하지만 ""강해지세요""라고 말하고 싶음
     * 이 수축 기계의 프라이머 버튼이 이제 막 눌러졌음
          + 초기 진공을 당겨 실제 수축을 끌어들이고 있음
     * 상황은 더 악화될 것임
          + 관세에 앞서 구매가 이루어졌고, 관세 자체는 아직 효과를 발휘하지 않았음
          + 경제적 하락은 이제 시작임
     * 이것은 이제 막 시작된 것임
          + Q1의 첫 절반은 이전 속도로 계속 성장했음
          + 애틀랜타 연방준비제도는 2월 말까지 +2.5% 이하의 성장을 예상했으나, 현재는 -2.7%를 예측하고 있음
     * 처음에는 CPI, 인플레이션, 가스, 식품 및 의료 비용이 모두 감소하고 새로운 고용이 예상치를 10만 초과했다고 들었음
          + 이제 GDP가 감소했다고 들음
          + 너무 많은 혼합된 신호가 있음
     * 이것은 Truth Social에서의 Trump의 반응임
          + ""이것은 Biden의 주식 시장이지, Trump의 것이 아님. 나는 1월 20일에 인수했음. 관세가 곧 시작될 것이고, 기업들이 기록적인 수로 미국으로 이동하고 있음. 우리 나라는 번영할 것이지만, Biden의 '오버행'을 제거해야 함. 시간이 걸릴 것이며, 관세와는 아무 관련이 없음. 그가 나쁜 숫자를 남겼지만, 번영이 시작되면 다른 것과 같지 않을 것임. 인내심을 가지세요!!!""
     * 그가 이렇게 현실을 부정하는 것을 얼마나 오래 지속할 수 있을지 궁금함
          + 경제 상황은 다른 주제보다 사람들에게 훨씬 더 즉각적인 영향을 미칠 가능성이 있음
          + 경제가 정말로 붕괴되면 그가 평소 하던 일을 하기 훨씬 어려워질 것임
          + 하지만 그의 지지자들이 실제로 어떻게 반응할지는 알 수 없음
"
"https://news.hada.io/topic?id=20587","Shardines - Rails에서 SQLite로 테넌트별 데이터베이스 관리하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Shardines - Rails에서 SQLite로 테넌트별 데이터베이스 관리하기

     * Rails에서 테넌트마다 별도 데이터베이스를 사용하는 구조를 구축하는 방법과 그 도전 과정을 설명
     * ActiveRecord는 기본적으로 단일 DB 연결을 전제로 설계되어 있어, 테넌트별 연결 전환이 복잡하고 까다로움
     * Rails 6 이상의 connected_to 기능을 활용해 런타임에 연결을 동적으로 전환하는 방법을 제안함
     * SQLite3는 소규모, 다수의 독립 DB를 다루기에 적합하여 백업, 디버깅, 삭제 등 관리가 용이함
     * 대규모 시스템 최적화 중심으로 발전한 Rails 인프라와 달리, 작고 독립적인 데이터베이스 중심 아키텍처가 가능함을 강조함


테넌트마다 별도 데이터베이스를 사용하는 이유

     * 데이터 모델 안에서 독립적으로 동작하는 테넌트(Site) 단위로 분리하면, 데이터 격리와 관리가 수월해짐
     * 테넌트별로 데이터를 별도 DB에 저장하면, 대규모 사이트 확장이나 보안 이슈에도 유리함
     * SQLite를 활용하면 서버 설정 없이 파일 하나만으로 데이터베이스를 운용할 수 있어 간편하고 유연함

Rails에서 어려운 점

     * SQLite의 기본 open/close 작업은 매우 간단하지만, ActiveRecord는 내부적으로 복잡한 커넥션 관리 구조를 가짐
     * ActiveRecord는 연결을 모델에 고정해서 사용하는 구조로 설계되어 있어, 런타임에 테넌트 전환이 어려움
     * 커넥션 풀, 쿼리 캐시, 스키마 캐시 등이 모두 연결에 종속되어 있어, 매번 연결 변경이 부담스러움

Rails 다중 데이터베이스 관리의 역사

     * Rails 1: ActiveRecord::Base 단위로 DB 지정 가능
     * Rails 3: 커넥션 풀 도입
     * Rails 4: connection_handling 추가
     * Rails 6: connected_to 도입
     * Rails 7: connected_to 기능 확장 및 샤딩 지원
     * 하지만 여전히 ""런타임에 동적으로 테넌트 추가/삭제"" 같은 시나리오는 기본 지원되지 않음

테넌트별 데이터베이스의 장점

     * 테넌트별 파일만 백업하거나 복원할 수 있어, 운영과 디버깅이 간단해짐
     * 테넌트 제거는 단순히 파일 삭제(unlink)로 가능
     * 대규모 데이터베이스 서버는 수십 테라바이트 규모의 DB를 최적화하지만, SQLite는 수천 개의 소규모 DB에 최적화되어 있음
     * 실제로 iCloud도 수백만 개의 작은 SQLite DB를 Cassandra 위에 저장하는 구조를 채택함

문제 해결 과정

     * 기존 방식(수동 establish_connection)은 다중 접속 환경에서 ConnectionNotEstablished 오류를 유발
     * Rails 6 이후의 방식에 맞춰, 커넥션 풀을 수동 관리하는 대신 Rails에게 맡기는 구조로 변경
     * 각 테넌트마다 동적으로 connection pool을 만들고, connected_to 블록으로 작업을 감쌈
     * 미들웨어를 활용해 요청 시점에 필요한 DB 연결을 동적으로 준비하고 해제하는 방식으로 개선

핵심 코드 패턴

     * 커넥션 풀 체크 후 없으면 생성

MUX.synchronize do
  if ActiveRecord::Base.connection_handler.connection_pool_list(role_name).none?
    ActiveRecord::Base.connection_handler.establish_connection(database_config_hash, role: role_name)
  end
end

     * 연결 후 connected_to 블록 내에서 안전하게 쿼리 수행

ActiveRecord::Base.connected_to(role: role_name) do
  pages = Page.order(created_at: :desc).limit(10)
end

Rack 스트리밍 처리

     * Rack 응답이 스트리밍일 경우, 연결 관리를 위해 Rack::BodyProxy와 Fiber를 활용하여 안전하게 커넥션을 닫음

connected_to_context_fiber = Fiber.new do
  ActiveRecord::Base.connected_to(role: role_name) do
    Fiber.yield
  end
end
connected_to_context_fiber.resume

status, headers, body = @app.call(env)
body_with_close = Rack::BodyProxy.new(body) { connected_to_context_fiber.resume }

[status, headers, body_with_close]

최종 미들웨어 구조

     * 요청마다 적절한 DB 연결을 찾아 connected_to로 전환하고, 응답이 끝나면 정리하는 미들웨어 Shardine::Middleware를 작성함
     * Rails 프로젝트의 config.ru 파일에 다음처럼 적용 가능

use Shardine::Middleware do |env|
  site_name = env[""SERVER_NAME""]
  {adapter: ""sqlite3"", database: ""sites/#{site_name}.sqlite3""}
end

남은 과제

     * ActiveRecord 6에서는 아직 shard 기능을 활용하지 않았지만, 이후 버전에서는 읽기/쓰기 분리도 가능함
     * 테넌트 삭제 시 커넥션 풀 정리 기능은 아직 필요하지 않아 구현하지 않음
     * 앞으로 ""작은 데이터베이스 다수""를 다루는 아키텍처가 더 주목받을 가능성이 큼

        Hacker News 의견

     * ""database-per-tenant"" 방식을 약 100만 명의 사용자와 함께 사용 중임
          + 이 방식은 읽기 중심의 앱에 적합하며, 대부분의 테넌트는 작고 테이블에 많은 레코드가 없어 복잡한 조인도 매우 빠름
          + 주요 문제는 개별 데이터베이스를 하나씩 마이그레이션해야 하므로 릴리스 시간이 크게 증가할 수 있음
          + 스키마나 데이터 드리프트가 발생하면 릴리스가 중단되고, 일부 테넌트에서 기능이 작동하지 않는 이유를 찾아야 함
     * SQLite를 좋아하지만, 기존 OLTP 데이터베이스가 인덱스의 일부를 메모리에서 언로드할 필요가 있는지 궁금함
          + 사용자별 데이터베이스를 사용하면 비활성 사용자나 다른 인스턴스에서만 활성화된 사용자를 위해 메모리에 아무것도 유지하지 않음
          + 이는 Mongo의 JSON 상황과 유사하며, Postgres가 Mongo보다 두 배 빠름
     * 대부분의 사람들은 테넌트별 데이터베이스가 필요하지 않으며, 이는 일반적인 방식이 아님
          + 마이그레이션과 스키마 드리프트와 같은 단점을 상쇄해야 하는 특정 사례가 있음
          + 사용할 수 있다고 해서 반드시 사용해야 하는 것은 아님
          + 주의해서 진행하고 테넌트별 데이터베이스가 필요하다는 사실을 알아야 함
     * 중간 접근 방식으로 다음을 고려할 수 있음
          + 상위 N개의 테넌트를 식별함
          + 이 테넌트를 위한 DB를 분리함
          + 상위 N개는 IOPS, 중요도(수익 측면) 등을 기준으로 결정됨
          + 데이터 모델은 각 테넌트에 해당하는 행을 추출할 수 있도록 설계되어야 함
     * 우연히도 Elixir를 위한 FeebDB를 작업 중임
          + 이는 Ecto의 대체물로 볼 수 있으며, 수천 개의 데이터베이스가 있을 때 잘 작동하지 않음
          + 주로 재미있는 실험으로 시작했지만, 과거에 일했던 모든 곳에서 이러한 아키텍처가 큰 도움이 될 것임
          + 데이터베이스-테넌트 접근 방식의 일반적인 문제점을 제거하거나 줄이는 것이 목표임
          + 각 데이터베이스에 단일 작성자 보장
          + 모든 테넌트에 대한 향상된 연결 관리
          + 필요 시 마이그레이션 및 백업 지원
          + 여러 DB에 대한 맵/리듀스/필터 작업 지원
          + 클러스터 배포 지원
     * Forward Email은 각 메일박스/사용자별로 암호화된 sqlite db를 사용하여 유사한 작업을 수행함
          + 사용자별 보호를 차별화하는 훌륭한 방법임
     * 이름이 매우 훌륭함. Sean Connery를 연상시킴
     * ""database per tenant"" 워크플로우는 이제 시작임
          + James Edward Gray가 2012년 RailsConf에서 이에 대해 이야기함
     * 과거에 유사한 것을 사용했으며, 매우 만족했음
          + 사용자가 데이터를 원하면 전체 데이터베이스를 제공할 수 있음
          + 사용자가 계정을 삭제하면 rm username.sql로 간단히 처리 가능
          + 컴플라이언스가 매우 쉬워짐
     * 데이터가 서로 격리되고 단일 테넌트 내에서 확장 문제가 없을 때 잘못된 설계를 하기 어려움
          + 거의 모든 것이 작동할 것임
"
"https://news.hada.io/topic?id=20622","핀란드, 학교에서 스마트폰 사용 금지 법안 통과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       핀란드, 학교에서 스마트폰 사용 금지 법안 통과

     * 핀란드 의회가 초·중등학교 학생들의 스마트폰 사용을 제한하는 법안을 통과시킴
     * 2025년 여름 방학 이후인 8월부터 시행 예정으로, 수업 시간에는 일반적으로 스마트폰 사용이 금지됨
     * 다만, 교사의 허가 하에 학습 보조나 건강 관련 사유로 예외적으로 사용 가능함
     * 교사는 수업 방해 시 학생의 기기를 압수할 수 있는 권한도 갖게 됨
     * 교육부 장관은 디지털 기술 교육은 계속 지원할 것이라고 강조함


법안 통과 및 시행 시점

     * 핀란드 의회는 2025년 4월 29일(화) 해당 법안을 통과시킴
     * 법은 오는 8월부터 적용될 예정으로, 여름방학 이후 새로운 학기부터 시행됨

수업 시간 스마트폰 사용 금지

     * 새 법에 따르면 수업 시간 중 스마트폰 사용은 원칙적으로 금지됨
     * 단, 예외적으로 허가받은 경우에 한해 사용 가능함

허용되는 사용 사례

     * 교사의 특별 허가가 있는 경우 다음과 같은 상황에서 사용 가능함
          + 학습 목적
          + 개인 건강 관련 처리

기기 압수 권한 부여

     * 법안은 수업이나 학습에 방해가 된 경우, 교사가 학생의 스마트폰을 압수할 수 있는 권한을 부여함

디지털 교육은 계속 지원

     * 교육부 장관 Anders Adlercreutz는,
          + 스마트폰 제한이 있어도 학생들의 디지털 역량 함양은 계속될 것이라고 밝힘

        Hacker News 의견

     * 핀란드와 대부분의 북유럽 국가에서는 아이들도 권리를 가진 사람으로 간주되며, 성인이 그 권리를 빼앗을 수 없기 때문에 법이 필요함
          + 현재 법률은 교사가 학생에게 휴대폰을 주머니나 가방에 넣어 두라고 지시할 수 있도록 허용함
          + 학생의 기본 권리 때문에 휴식 시간 동안의 휴대폰 사용을 완전히 금지할 수 없음
          + 헌법은 재산 보호를 보장하며, 이는 학생의 휴대폰에도 적용됨
          + 모바일 기기 사용 제한은 표현의 자유와 전화 통화 또는 기타 기밀 메시지 보호의 관점에서 고려되어야 함
          + 핀란드 헌법 제12조는 표현의 자유와 정보 접근권을 보장함
          + 모든 사람은 표현의 자유를 가지며, 이는 정보, 의견 및 기타 통신을 자유롭게 표현, 전파 및 수신할 권리를 포함함
          + 아동 보호를 위한 필요한 경우 법률로 규정할 수 있음
          + 공공 문서 및 기록에 대한 접근권이 보장됨
          + 아동 권리 협약도 참고할 수 있음
     * 학교의 목표가 아이들을 좋은 추론 및 분석 능력을 가진 젊은 성인으로 발전시키는 것이라면, 스마트폰은 이러한 목표에 크게 기여하지 않고 오히려 방해가 됨
     * 학교가 휴대폰을 금지해야 하는 상황이 안타까움
          + 어렸을 때는 컴퓨팅 기기가 젊은이들에게 큰 도움이 될 것이라 상상했음
          + 그러나 많은 앱이 정신 건강에 해로운 영향을 미침
          + 별도의 앱 스토어가 해결책이 될 수 있음 (예: f-droid)
          + 사용자에게 적대적인 앱에 대해 더 철저히 조사해야 할 필요가 있음
     * 딸의 학교에서는 대략 다음과 같은 규칙이 있음
          + 수업 중이나 쉬는 시간에는 휴대폰 사용 금지 (점심 시간은 예외일 수 있음)
          + 특정 수업 및 목적을 위해 교사가 허용할 수 있음
          + 허용되지 않은 시간에 휴대폰을 사용하면 학교가 끝날 때까지 압수됨
          + 반복 위반자에 대한 더 엄격한 규칙이 있을 수 있음
          + 학교와 집 사이의 이동을 조율하기 위해 휴대폰을 허용하면서도 교실 내 방해를 최소화하는 좋은 균형을 이룸
     * Social Studies를 시청하여 학교에서의 휴대폰 사용이 어떤 모습인지 이해할 것을 추천함
          + LA에서 촬영되었지만 일반적으로 적용 가능함
          + 보여지는 불안감의 양이 매우 슬픔
     * Nokia의 나라가 스마트폰을 금지하는 것이 시적임
     * 미국 전역의 교실에서 아이들이 수업 내내 스마트폰을 사용하고 문자 메시지를 보내며 전혀 주의를 기울이지 않는 경우가 많음
          + 성적이 F로 나오고 C로 곡선 조정됨
          + 교사들은 이에 대해 아무것도 할 수 없음
     * 인터넷 중독을 금지 없이 해결할 수 있는지 궁금함
          + 학교에서 스마트폰을 금지하는 것이 도움이 되지만, 방과 후 5~7시간 동안 인터넷에 접속하는 것을 막을 수 없음
          + 광범위한 금지를 피하면서 인터넷 중독에 더 강해질 수 있는 방법을 찾아야 함
     * 브라질이 핀란드보다 앞서 있음
          + 브라질에서는 학교에서 휴대폰을 치우도록 하는 법이 시행되고 있음
     * 주요 요점은 교사가 이제 휴대폰을 압수할 수 있다는 것임
          + 발트해의 다른 쪽에서는 교실 내 휴대폰 사용에 대한 논쟁이 계속되고 있음
          + 일부 학교는 전자 기기 사용에 대한 규정을 두고 있지만, 이는 재산권을 침해하지 않기 위해 대체로 무력함
          + 스마트폰 시대 이전에 고등학교를 졸업했기 때문에 참고할 만한 점이 많지 않지만, 적어도 Wi-Fi/모바일 데이터는 허용하지 않는 것이 좋다고 생각함
"
"https://news.hada.io/topic?id=20510","OpenAI, 이미지 생성기능을 API에서도 가능하게 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenAI, 이미지 생성기능을 API에서도 가능하게 출시

     * OpenAI가 지난달 ChatGPT에 도입한 이미지 생성 기능이 출시 첫 주에 7억 개 이상의 이미지 생성 기록을 달성함
     * 이제 이를 API로 확장한 gpt-image-1 모델이 출시되어 개발자와 기업이 자사 플랫폼에 통합 가능해짐
     * 다양한 산업군에서 디자인, 로고 제작, 마케팅, 영상 편집 등에 활용되고 있음
     * 안전성 기능을 강화했으며, API 사용 시 기본적으로 고객 데이터 학습에 사용하지 않음
     * 품질에 따라 이미지 1개당 대략 $0.02 (낮음), $0.07 (중간), $0.19 (높음)


API를 통해 이미지 생성 모델 공개

     * OpenAI는 ChatGPT에서 인기 있었던 이미지 생성 기능을 API에 확장해 gpt-image-1 모델을 출시함
     * 이 모델은 다양한 스타일을 생성, 텍스트를 정밀하게 렌더링, 사용자 지정 가이드라인을 충실히 반영, 세계 지식 활용이 가능함
     * 기업과 스타트업이 디자인, 전자상거래, 교육, 게임 등 다양한 분야에서 활용 중임

주요 사용 사례

     * Adobe: Firefly와 Express 앱을 통해 다양한 미적 스타일을 실험할 수 있는 이미지 생성 기능 제공
     * Airtable: AI를 활용하여 대규모 워크플로우에서 창의적인 생산성을 높임
     * Figma: gpt-image-1을 통해 이미지 생성 및 편집 기능을 플랫폼에 통합하여 사용자들이 아이디어를 시각적으로 탐색할 수 있게 함
     * Canva는 gpt-image-1을 Canva AI와 Magic Studio에 통합하여 디자인 생성 및 편집 기능 확장을 시도 중임
          + 예를 들어, 손그림을 정교한 그래픽 요소로 변환하거나, 고정밀 편집을 가능하게 함
     * GoDaddy는 로고 생성 및 편집에 이미지 생성을 실험 중임
          + 배경 제거, 타이포그래피 생성, 브랜드 정체성을 반영한 콘텐츠 제작이 가능함
          + GoDaddy Airo®와의 연계를 통해 소셜 미디어 콘텐츠 및 마케팅 자산 제작도 지원
     * HubSpot은 마케팅 및 영업 자료 제작을 위해 이미지 생성 기능을 실험 중임
          + 디자이너 없이도 고퀄리티 이미지 제작 가능성으로, 이메일, 소셜미디어, 랜딩 페이지에 활용할 수 있음
     * Gamma: 매일 500만 개 이상의 AI 이미지를 생성하여 프레젠테이션과 웹사이트를 돕고 있음
     * HeyGen: 아바타 생성 및 편집 기능을 개선하여 사용자에게 더 개인화된 경험 제공
     * OpusClip: YouTube 크리에이터를 위한 클릭 유도형 썸네일 생성
     * Instacart는 이미지 생성 API를 사용하여 레시피나 쇼핑 목록에 이미지 추가를 테스트 중임
     * invideo는 gpt-image-1을 도입하여 텍스트 생성 향상, 정밀 편집 제어, 스타일 가이드 제공 기능을 추가함

안전성

     * gpt-image-1은 ChatGPT에서 사용하는 4o 이미지 생성과 동일한 안전장치를 사용함
     * 유해한 이미지 생성을 방지하며, 생성 이미지에 C2PA 메타데이터 포함
     * moderation 파라미터를 통해 필터링 민감도 조절 가능 (기본값: auto, 낮은 민감도: low)
     * OpenAI는 API 고객 데이터로 모델 학습하지 않으며, 입력/출력은 API 사용 정책을 따름

가격 정책

     * 텍스트 입력 토큰: 100만 토큰당 $5
     * 이미지 입력 토큰: 100만 토큰당 $10
     * 이미지 출력 토큰: 100만 토큰당 $40
     * 품질에 따라 이미지 1개당 대략 $0.02 (낮음), $0.07 (중간), $0.19 (높음)의 비용 발생

시작 방법

     * gpt-image-1은 글로벌 Images API에서 사용 가능하며, 곧 Responses API도 지원 예정임
     * 일부 개발자는 사용을 위해 조직 인증 절차를 거쳐야 할 수 있음
     * Playground에서 기능을 테스트하고, 가이드 문서를 통해 시작 가능

        Hacker News 의견

     * 어제는 정부와 군 관련 작업에서 거절율이 매우 높다는 점에 대해 불만을 제기했음. 이는 계약자들이 CN에서 개발한 오픈 소스 모델을 사용하게 하여 작업이 손상될 수 있음
          + 오늘은 해당 분야에서 일하는 회사들에게 거의 콘텐츠 검열이 없는 API 접근 계층이 있다는 것을 발견했음. 이 접근 계층을 요청하는 방법은 모르지만, 이미 이를 사용하고 있는 방위 계약자 4명과 대화를 나눴음
     * 호기심에 각 품질 유형에 대해 동일한 프롬프트를 생성했음. 'Auto', 'low', 'medium', 'high'
          + 프롬프트: ""귀여운 개가 귀여운 고양이를 안고 있음""
          + DALL:E 3 이미지 몇 개를 비교를 위해 댓글에 보여줬음
     * 플레이그라운드에서 5개의 이미지를 생성했음. 하나는 텍스트 프롬프트만 사용했고, 나머지 4개는 휴대폰의 이미지를 사용했음. 가족 그룹 채팅을 위한 스튜디오 지브리 초상화로 $0.85를 썼는데, 고객용 제품으로 사용하기에는 너무 비쌈
     * 수백 또는 수천 개의 이미지를 생성해야 하는 응용 프로그램이 궁금함. 가족 사진을 지브리 스타일로 만드는 것을 좋아하지만 대량으로 만들 필요는 없음. 이미지 생성을 사용할 때마다 일회성 작업이었고, ChatGPT UI에서 하는 것이 만족스러웠음
     * 가격 측면에서 이 API는 참조를 제공하여 가치를 얻지 않는 한 가치를 정당화하기 어려울 것임. 생성된 'medium' 1024x1024는 이미지당 $0.04로, Imagen 3 및 Flux 1.1 Pro와 같은 비용 클래스에 속함. 새로운 플레이그라운드에서 테스트한 결과, medium 이미지는 두 경쟁 모델보다 품질이 낮고 여전히 15초 이상 생성 시간이 걸림
          + 모델 프롬프트는 전통적인 모델보다 상당히 다르고 어려움. 전통적인 이미지 트릭은 기본적으로 작동하지 않으며, 상당한 프롬프트 보강 없이 작동하는 것을 얻기 어려움
     * ""비디오 편집: invideo는 수백만 사용자가 AI를 사용하여 아이디어를 비디오로 변환할 수 있도록 함. gpt-image-1의 통합으로 플랫폼은 이제 개선된 텍스트 생성, 세밀한 편집 제어 및 고급 스타일 지침을 제공함""
          + 이것이 비디오도 어떤 방식으로든 처리한다는 의미인지 궁금함
     * gpt-image-1 사용은 토큰당 가격이 책정되며, 텍스트 및 이미지 토큰에 대해 별도의 가격이 있음
          + 텍스트 입력 토큰 (프롬프트 텍스트): 1M 토큰당 $5
          + 이미지 입력 토큰 (입력 이미지): 1M 토큰당 $10
          + 이미지 출력 토큰 (생성된 이미지): 1M 토큰당 $40
          + 실제로는 저품질, 중품질, 고품질 정사각형 이미지당 각각 약 $0.02, $0.07, $0.19로 번역됨
          + 스타트업에게는 다소 비싼 가격임
     * 호기심 많은 사람들을 위해, 이것은 확산 기반이 아닌 LLM 기반임. 이는 텍스트 프롬프트에 훨씬 더 높은 정확도로 따름
          + 예를 들어, 생성 이미지 앱 사용자(나 포함)가 캥거루 주머니에 있는 사람의 사진을 만들려고 했음
          + 어떤 프롬프트를 사용하든 작동하지 않았음
          + 이 새로운 모델은 한 번에 해냈음
     * GoDaddy는 고객이 쉽게 편집 가능한 로고를 생성할 수 있도록 이미지 생성을 통합하기 위해 적극적으로 실험 중임
          + 1-2년 전 Discord에서 GoDaddy의 고객 생성 아이콘 작업을 하는 사람을 만났던 기억이 있음. 그 규모의 맞춤형 모델은 gpt-image-1로 대체될 가능성이 있음
     * 가격 책정에서 ""이미지 토큰""이 무엇을 나타내는지에 대한 아이디어가 있는 사람 있음?
          + 고정 크기의 이미지 블록인지 궁금함
"
"https://news.hada.io/topic?id=20636","애플, 미국 연방법원이 "반독점 위반"이라고 판결하고 형사 법원에 회부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                애플, 미국 연방법원이 ""반독점 위반""이라고 판결하고 형사 법원에 회부

     * 애플이 앱스토어 관련 반독점 명령을 고의로 위반한 혐의로 형사법원에 회부됨
     * 판사는 애플이 이용자에게 대체 결제 수단을 안내하지 못하게 막아 시장 경쟁을 저해했다고 지적
     * CEO 팀 쿡과 재무 담당 부사장 알렉스 로만은 각각 무시 또는 위증 행위로 비판받음
     * 에픽게임즈 CEO는 이번 판결을 ""개발자들의 큰 승리""라고 평가, 애플은 항소 예정임
     * 이번 판결은 미국뿐 아니라 유럽 등 글로벌 규제기관에도 파장을 줄 가능성 존재
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

애플, 반독점 명령 위반으로 형사 조사 위기

     * 미국 연방판사 이본 곤잘레스 로저스(Yvonne Gonzalez Rogers)는 애플이 법원의 명령을 의도적으로 위반했다고 판시하고, 형사법원에 회부함
     * 법원 명령은 앱 개발자가 애플의 앱스토어 외부에서 결제를 유도할 수 있도록 허용한 2021년 반독점 판결을 근거로 함
     * 하지만 애플은 이에 대해 신규 수수료(예: 27%) 부과와 기술적 장벽을 도입해 실질적인 우회 결제를 막음

고위 경영진에 대한 강도 높은 비판

     * 판사는 CEO 팀 쿡이 법률 자문이 아닌 재무팀의 의견을 따랐다고 지적, “쿡은 잘못된 선택을 했다”고 명시함
     * 재무 부사장 알렉스 로만은 법정에서 위증했다고 명시적으로 언급, 매우 이례적인 사법적 비판을 받음

에픽게임즈와의 장기 소송전

     * 이번 사안은 포트나이트 개발사인 에픽게임즈와의 반독점 소송에서 시작되었음
     * 에픽 CEO 팀 스위니는 “개발자들이 애플과 싸운 긴 여정 속의 큰 승리” 라고 평가
     * 애플은 해당 판결에 동의하지 않으며 항소할 계획이라고 밝힘

사용자 행동 변화의 난제

     * 현재 대부분의 iPhone 사용자들은 앱스토어 내 결제에 익숙하기 때문에, 외부 결제로의 유도는 쉽지 않을 수 있음
     * 애널리스트들은 소비자들이 여전히 앱스토어 내 결제를 선호할 수 있다고 전망하며, 사용자 행동 변화가 실제로 어떻게 나타날지는 미지수임

국제적 영향과 향후 전망

     * 오바마 행정부 전 반독점 관료 피오나 스콧 모튼은 이번 판결이 애플의 국제적 지연 전략을 무너뜨릴 수 있는 전환점이 될 수 있다고 평가
     * 유럽연합도 최근 유사 사안으로 애플에 벌금을 부과한 만큼, 글로벌 규제 환경에도 영향이 미칠 가능성 있음

        Hacker News 의견

     * 법원 결정문은 내부 상황을 드러내는 흥미로운 내용을 담고 있음
          + Apple 직원들이 Project Michigan의 경고 화면 문구를 논의하는 Slack 대화에서 ""외부 웹사이트""라는 표현이 무섭게 들리기 때문에 경영진이 좋아할 것이라는 의견이 있었음
          + 한 직원은 개발자 이름을 추가하면 더 나빠질 것이라고 제안했고, 다른 직원은 계속하라고 응답했음
     * App Store가 표준이 된 것에 대한 우려가 있음
          + 많은 젊은이들이 iPhone과 iPad만 사용해왔고, 독립적으로 앱을 배포하는 세상을 본 적이 없음
          + Apple이 App Store를 보안 및 사용자 경험의 이유로 잘 마케팅했지만, 실제로는 운영체제(OS)가 그 역할을 하고 있음
          + OS가 앱이 위치 정보를 접근하기 전에 허락을 받도록 하고, 앱 간의 격리를 제공하며, 설치/제거를 쉽게 함
          + OS와 App Store의 이점에 대한 혼란과 제3자 배포에 대한 익숙하지 않음이 반독점 소송의 가치를 설득하기 어렵게 만듦
     * Phillip Schiller는 Apple이 명령을 준수해야 한다고 주장했으나, Tim Cook은 이를 무시하고 재무팀의 설득에 넘어갔음
          + 결국 ROI에 신경을 쓰는 Tim Cook의 결정이었음
     * Apple의 전체 설정이 문제가 있음
          + 외부 결제 프로세서를 사용할 경우 27%의 수수료를 부과하며, Stripe 수수료를 포함하면 실질적으로 이익이 없음
          + 외부 구매 링크를 표시하는 방법을 엄격히 제한하고, 클릭 시 불쾌한 경고 화면을 표시함
          + 이러한 조건을 채택할 개발자가 있을지 의문임
     * 많은 사람들이 EU가 미국 기업을 겨냥한다고 비난하지만, 이제 미국 법원도 이를 더 많이 하고 있음
          + 독점 권력을 남용하는 기업들이 문제임
     * Apple이 법원의 명령을 고의로 준수하지 않았고, 반경쟁적 장벽을 만들려 했다는 법원의 비판이 있음
          + 법원은 Apple의 불복종을 용납하지 않음
     * Phil Schiller가 소외된 것이 아쉬움
          + 그는 Apple의 부흥에 중요한 역할을 했던 인물임
     * 사용자가 구독하고 잊어버리는 소프트웨어가 존재하며, 이는 주로 신용카드에 ""Apple""로 청구되기 때문임
          + 이러한 사기성 소프트웨어가 어떻게 될지 궁금함
     * 고객에게 앱 내 구독보다 웹사이트에서 15% 저렴하게 구매할 수 있다는 사실을 알리지 못해 사과하는 것이 지침
          + Apple이 반경쟁적 옵션을 선택했으며, 재무 부사장 Alex Roman이 법정에서 거짓말을 했다는 문서가 있음
          + 법원은 이 문제를 캘리포니아 북부 지구의 미국 변호사에게 형사 경멸 절차가 적절한지 조사하도록 요청함
"
"https://news.hada.io/topic?id=20591","ScreenRecorder - 웹 기반 무료 Screen Studio 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ScreenRecorder - 웹 기반 무료 Screen Studio 대체제

     * 브라우저에서 바로 화면 녹화를 할 수 있는 도구
     * 로그인 없이 제품 데모와 튜토리얼을 쉽게 만들 수 있는 기능을 제공
     * 화면 스타일링과 웹캠 효과를 통해 전문적인 비주얼을 쉽게 구현할 수 있음
     * 애니메이션 기능을 통해 자연스럽고 부드러운 녹화를 지원함
     * 사용자 친화적인 인터페이스로 빠르고 쉽게 녹화, 편집, 공유가 가능함


ScreenRecorder.me 소개

     * ScreenRecorder.me는 브라우저에서 직접 화면 녹화를 할 수 있는 도구임
     * 로그인 없이 제품 데모와 튜토리얼을 쉽게 만들 수 있는 기능을 제공함

화면 스타일링

     * 화면 스타일링을 통해 둥근 모서리, 그림자, 테두리, 색상을 빠르게 커스터마이즈할 수 있음
     * 전문적인 화면 녹화를 몇 초 만에 달성할 수 있음

웹캠 효과

     * 웹캠의 모양, 위치, 테두리, 그림자, 색상을 쉽게 조정할 수 있음
     * 전문적인 웹캠 비주얼을 손쉽게 구현할 수 있음

애니메이션

     * 자동 마우스 추적 또는 수동 위치 조정을 통해 녹화를 부드럽게 애니메이션화할 수 있음
     * 모든 움직임이 물리 기반 애니메이션으로 자연스럽고 부드러움

사용자 친화적인 인터페이스

     * 사용자 친화적인 인터페이스로 빠르고 쉽게 녹화, 편집, 공유가 가능함

        Hacker News 의견

     * 이 도구를 직접 호스팅할 수 있으면 좋겠음. 라이선스를 구매하는 것은 괜찮지만, 내 하드웨어가 아닌 곳에서 실행되는 것은 원하지 않음. 내가 배포할 수 있는 도커 컨테이너로 포장하면 좋겠음
     * 개인정보 보호정책이 100% 필요함. 잠재적으로 PII 정보와 보안 세부 정보를 저장할 수 있음
     * 사람들은 문제를 일으킴. 이미 누군가가 비밀을 유출하는 모습을 상상할 수 있음
     * 멋져 보임! 하지만 개인정보 보호를 위해 로컬에서 녹화하고 파일을 직접 보내는 것을 선호함. 나는 https://cursorful.com/ 확장을 사용하고 있음 (Chrome 전용). 이 확장은 비디오를 클라우드에 업로드하지 않고 모든 작업을 로컬에서 처리하며, 무료 티어 기능이 나에게 충분함
     * screen.studio를 너무 비슷하게 따라한 것이 마음에 들지 않음. 랜딩 페이지에서 Google Sheets에 서식을 적용하는 방식이 screen studio와 같음. screen studio에서 영감을 받는 것은 괜찮지만, 그들도 주로 솔로 개발자이므로 더 독창적이 되도록 노력해야 함
     * YouTube 시리즈를 좋아함. 공개적으로 빌드하는 것을 보는 것이 훌륭함. 이 앱은 YouTube 비디오를 만들기에 훌륭한 앱이 될 것임. 하지만 비디오를 다운로드할 수 없으면 게시할 수 없음. ""내보내기""를 할 수 있지만, 그저 공유할 수 있는 특정 링크만 제공됨. raw mp4 파일이 아님
     * 이 기능을 추가할 계획이 있는지 궁금함
     * 사람들이 개인정보 보호에 대해 이야기하는 것은 당연하지만, 적절한 데이터 개인정보 보호 정책과 그에 대한 약속을 실제로 준수하면 쉽게 해결할 수 있음
     * 비즈니스 관점에서 접근한다면 이것이 주요 문제가 되지 않을 것임. 대부분의 사람들이 원격 서비스에 화면 녹화를 원한다는 것을 알 수 있음
     * 몇 가지 옵션이 있음:
          +
              1. 클라이언트 장치/브라우저를 떠나기 전에 WebRTC 스트림을 암호화함 (예: WebRTC Insertable Streams 또는 유사한 방법을 통해). 고객만이 알고 관리하는 로컬 키로 인코딩함. 이렇게 하면 저장된 화면 녹화를 접근할 수 없게 됨. 필요할 때 녹화를 다운로드하고 필요에 따라 해독할 수 있음. 그러나 이는 대량의 데이터를 저장하고 전송하는 것을 의미하며, 서비스로서 비용이 많이 들 수 있음
          +
              2. 위와 같지만 고객을 위해 해독을 수행하여 재생 가능한 미디어를 다운로드할 수 있게 함. 이는 플랫폼이 콘텐츠를 '볼' 수 있는 보안 위험을 초래함
          +
              3. MediaRecorder WebM 또는 유사한 방법을 통해 직접 녹화를 저장함 (표준이 형성됨에 따라 다양한 브라우저 호환성 문제가 있음) 및 덜 명백한 인코딩 사용 (H.264 라이선스 요구의 문제를 여전히 겪고 있음)
     * 내가 놓친 것이 없다면, 이것은 Windows 내장 화면 녹화기보다 덜 유용해 보임. 마우스 움직임이 화면의 큰 부분을 확대하고 잘라내며 이를 방지할 방법이 보이지 않음. (가끔 유용한 경우가 있을 수 있지만, 이를 끌 수 있는 방법이 없는 것은 결정적인 단점임)
     * 구현하기 어려울지 모르지만, 개인 정보를 가리고 스크롤할 때 세부 정보를 따라가는 기능을 구현할 수 있다면 유용할 것 같음. LLM/AI가 할 수 있을 것 같은 느낌임
     * Firefox나 Safari에서는 작동하지 않음. 대화 상자가 열리자마자 즉시 닫힘
     * 멋진 것임. 약간의 다듬기가 필요하지만, 많은 앱보다 선호함. 나에게는 노트북의 USB 카메라와 잘 작동하지 않았음. 내장된 카메라만 선택할 수 있었음
     * 피드백을 받아 개선하길 바람. 개선하지 않더라도 사용할 것임. 사랑함 :-)
     * 멋지지만 클라이언트 측에서만 작동한다고 생각했음. 비디오가 원격으로 내보내지고 저장된다는 것을 확인할 수 있는지 궁금함
"
"https://news.hada.io/topic?id=20527","기존 리포트는 유지하고, 개선은 자유롭게: Vike로 해결한 정적 페이지 설계기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              기존 리포트는 유지하고, 개선은 자유롭게: Vike로 해결한 정적 페이지 설계기

   레몬베이스 팀이 기존 리포트 결과물을 안정적으로 유지하면서, 리포트 페이지를 자유롭게 개선하기 위해 Vike를 도입해 정적 페이지(SSG) 방식을 적용한 사례를 소개합니다.

      주요 내용

     * 기존 리포트는 특정 시점의 데이터와 UI를 고정해야 했으나, 클라이언트 렌더링(CSR) 구조로 인해 로직/디자인 변경 시 기존 리포트까지 영향을 받는 문제가 있었음
     * 다양한 해결책(모듈 페더레이션, 컴포넌트 버전 관리 등)을 검토했지만, 최종적으로 정적 페이지(SSG) 생성이 가장 적합한 방식이라고 판단
     * 기존 Vite 기반 프로젝트 위에 간단한 설정만 추가해, Vike를 통해 SSG를 적용
          + 리포트 발행 시점의 데이터를 포함한 HTML 파일을 빌드하여 고정
          + 발행 전 미리보기는 실시간 데이터 반영을 유지
     * iframe 방식으로 제품 내에 리포트를 통합하여 UX를 자연스럽게 연결함
     * 적용 결과:
          + 기존 리포트는 변하지 않고, 새 리포트는 자유롭게 개선 가능
          + 성능 향상(빠른 로딩)과 유지보수 비용 절감
          + 별도의 대규모 인프라 없이 빠르게 도입 가능
     * 단, Vike는 커뮤니티가 작아 레퍼런스가 부족하다는 점은 아쉬웠음

      추천 대상

     * 보고서 페이지를 버전별로 안정적으로 관리하는 방법을 고민 중인 팀
     * CSR 구조에서 SSG 구조로 전환하거나 혼합 설계가 필요한 FE 개발자
     * Vite 기반 프로젝트에 가볍게 정적 페이지 기능을 추가하고 싶은 개발자
"
"https://news.hada.io/topic?id=20554","우정의 침체: 잃어버린 연결의 예술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          우정의 침체: 잃어버린 연결의 예술

     * Friendship Recession은 미국 사회에서 친구 관계가 급감하고 있는 현상을 지칭함
     * 문화적 변화가 주요 원인으로, 일과 가족 중심의 삶, 디지털 우정 증가 등이 복합적으로 작용함
     * 실제 친구 만들기는 불편함을 수용하고, 새로운 활동을 함께 경험하며 이뤄져야 함
     * 친구 관계 유지를 위해서는 주기적 모임과 공동 활동을 통한 일상 속 관계 구축이 중요함
     * 문화 변화를 위해 개인과 사회 구조 모두에서 적극적인 행동이 필요함


Friendship Recession: 미국 사회의 친구 관계 감소 현상

     * Friendship Recession 개요
          + ""Friendship Recession""은 미국인의 친구 관계 경험과 유지 방식이 크게 변한 현상임
          + 1990년 대비, 친구가 없는 성인은 4배 증가(12%), 10명 이상 친구를 가진 비율은 3분의 1로 감소함
          + 팬데믹 이전에도 친구와 보내는 시간이 주당 6.5시간에서 4시간으로 줄어든 변화가 있었음
     * 구조적 요인: 시스템 변화
          + 교외 확산으로 사람들 간 물리적 거리가 멀어져 자연스러운 교류가 줄어듦
          + 정부의 제3공간(커뮤니티 센터, 공원, 카페 등) 투자가 감소하여 만남의 장이 부족해짐
          + 긱 이코노미와 경제 압박으로 인해 자유 시간이 줄어들고, 우정 형성이 더 어려워짐
     * 구조적 요인만으로는 부족한 설명
          + 노년층은 수십 년 동안 안정적인 사회적 연결을 유지해왔음
          + 부유층도 커뮤니티 접근성이 높지만, 혼자 식사하는 비율은 오히려 증가함
          + 스탠포드에서 ""Design for Healthy Friendships"" 수업이 개설된 것은 구조적 문제를 넘어선 변화를 보여줌
     * 문화적 위기: 우선순위의 변화
          + 친구를 위한 시간은 특권이자 우선순위 문제로 변하고 있음
          + 고립은 선택이 아니라 점차 기본값이 되고 있으며, 사회적 관계 형성 능력이 약화되고 있음
          + 우정을 재구성하지 않으면 행복과 웰빙의 핵심인 연결이 사라질 위험성이 있음

문화적 변화

     * 일과 정체성
          + 미국인은 자신을 소개할 때 직업을 가장 먼저 말하는 경향이 강함
          + 평균 근무 시간은 OECD 국가 평균보다 182시간 많으며, 77%가 주 40시간 이상 근무함
          + 일에 대한 몰입이 강화되면서, 개인 관계보다 업무를 통한 정체성 형성이 우선시되고 있음
          + 일에 의미를 찾는 것은 긍정적일 수 있으나, 관계 소외를 초래할 위험이 존재함
     * 핵가족 중심으로의 전환
          + 미국인은 친구 관계보다 자녀 중심의 가족 우선 문화를 강화하고 있음
          + 부모의 49%는 자신의 부모보다 자녀와 더 많은 시간을 보내고 있음
          + 과도한 자녀 중심 양육은 성인 친구 관계 형성에 필요한 시간과 에너지를 감소시킴
          + 동시에, 전체적으로 집에 머무는 시간은 늘었지만, 가족과의 교류 시간은 감소함
     * 공동체 활동 감소
          + 2000년대 초반 이후 자원봉사율이 크게 감소했으며, 커뮤니티 단체 가입률도 낮아지고 있음
          + 종교 단체 참여율 역시 10년간 17%에서 26%로 감소하는 등, 사회적 연결 고리가 약화됨
          + 이로 인해 친구 관계는 일상 생활의 핵심이 아니라, '남는 시간'에만 겨우 이루어지는 활동이 되어가고 있음
     * 스크린 타임과 디지털 전용 우정
          + 인터넷과 스마트폰 확산으로, 미국인의 40%가 온라인 전용 친구를 가짐
          + 10대들은 친구들과 대면하는 시간이 하루 40분으로 급감하고, 스크린 시간은 하루 9시간에 이름
          + 디지털 우정은 대면 관계와 달리 즉흥성, 신체 언어 해석, 깊은 신뢰 구축이 어려움
          + 연구에 따르면, 디지털 상호작용은 사회적 연결성과 정신 건강 모두에 부정적 영향을 줌

이 문화적 변화가 위험한지에 대한 신경심리학적 이유

     * 이 변화는 단순히 습관을 바꾼 것이 아니라 뇌 자체를 재구성하고 있음
     * 우정 형성에는 취약성이 필요한데, 고립은 이 취약성을 견디기 어렵게 만듦
     * 고립은 사회적 위협에 대한 과민성을 키우고, 상호작용을 부정적으로 해석하게 함
     * 고립이 신경 시스템에 미치는 영향
          + 사회적 거절은 감정적 고통뿐 아니라, 편도체를 활성화해 신체적 고통과 같은 신경 경로를 작동시킴
          + 시간이 지날수록 사회적 상호작용이 위험하게 느껴지고, 이를 피하려는 경향이 강해짐
     * 디지털 상호작용과 심리적 지름길
          + 온라인에서는 자기 연출, 어색한 상황 회피, 빠른 도파민 보상이 가능해짐
          + 뇌는 안전하고 익숙한 공간(집, 가족)을 선호하게 되어 공공 공간과 새로운 관계를 기피하게 됨
     * 악순환의 심화
          + 대면 관계를 피할수록 사회적 연결이 더 어려워지는 자기강화적 악순환이 발생함
          + 디지털 상호작용과 고립이 점점 더 매력적으로 느껴지는 방향으로 뇌가 적응하게 됨

문화 변화의 역동적인 춤: 우리가 해야 할 일

     * 문화는 위로부터(정책, 인프라) 와 아래로부터(개인 선택) 동시에 형성됨
     * 편리함을 선택할수록 사회 전체가 고립을 강화하는 방향으로 움직이게 됨
     * Friendship Recession을 되돌리려면 구조적 변화와 개인적 노력이 함께 필요함
     * 핵심은 우정 형성과 유지라는 두 축을 강화하는 것임
     * 우정 형성: 불편함 수용하기
          + 친구를 만드는 것은 리스크와 불확실성을 감수해야 하는 과정임
          + 새로운 경험과 공동 과제는 사람들을 강하게 연결하는 역할을 함
          + Hot Ones Challenge, 방탈출과 같은 활동을 통해 공통된 도전 경험을 공유하면 친밀감이 생김
          + 우정은 수동적으로 생기지 않으며, 적극적인 계획과 참여가 필요함
          + 우정 형성 실천 방법
               o 공통 관심사를 가진 그룹을 초대해 함께 모임을 구성함
               o 새롭고 적당히 도전적인 활동을 함께 탐색하여 팀워크와 흥미를 유도함
               o 활동의 의도를 명확히 설정해 경험의 의미를 강화함
               o 초기에는 가벼운 질문, 후반에는 심화된 대화를 유도하여 신뢰를 쌓음
     * 우정 유지: 일상 속에 관계를 심기
          + 우정은 일회성이 아니라 반복과 의식(ritual) 을 통해 깊어짐
          + 사적인 1:1 만남보다, 공동체 기반 활동에 참여하는 것이 소속감을 강화함
          + Harvard Divinity School의 모임, Harvard Stadium 운동 등 주기적 활동이 좋은 예임
          + 우정 유지 실천 방법
               o 이미 존재하는 지역 기반 모임(예: Weave 커뮤니티)에 참여함
               o 정기적 만남 주기를 설정하여 습관화하고 신뢰를 구축함
               o 조화롭고 함께 하는 활동을 선택하여 자연스러운 유대감을 형성함
               o 활동에 변화를 주어 신선함을 유지하고, 반복적으로 이어가는 것이 중요함

결론: 작은 행동이 문화를 바꾼다

     * 문화 변화는 느리고 어렵지만, 개개인의 작은 선택들이 모여 큰 변화를 이끎
     * 책임을 외부 요인에만 돌리지 말고, 직접 관계를 만들고 투자하는 것이 중요함
     * 우리가 함께(Better, together) 하면 더 나은 사회를 만들 수 있음

   개인주의 심화는 전세계적인 추세인듯 하네요.
   디지털로 인해 다른 사람을 만나기 어려워진 환경탓도 있는듯 하고요.

   최근에 본 NYT 기사인데 New York City’s Hottest Hangout Is a 500-Person Board Game Night

   평일 저녁 9시, 뉴욕의 사무실 건물 푸드코트를 빌려 한달에 한번씩 진행하는 보드게임 나이트(최근은 약 500인 규모로 확장)로, BYOB(Bring Your Own Boardgame)이며, 참가비는 무료. 술도 없이 즐기는 이 파티를 통해 새로운 사람을 만나고 많은 커플도 탄생한다고 하네요.

   이런 것들이 기사화 되는데에는, 새로운 사람들을 만나기 위한 방법을 의도적으로 시도해야 한다는 생각이 들기 때문일 듯 합니다.

        Hacker News 의견

     * 미국에서는 개인주의가 심화된 시기임. 사람들이 공동체보다 자신을 우선시하면서 인터넷 덕분에 공동체에 대한 의존도가 줄어들었음. 기본적인 생활 과업을 위해 사람들과 물리적으로 접촉할 필요가 없어짐
          + 젊은 세대에서 더 두드러진 현상이며, 나이 든 세대는 여전히 우정을 유지하고 있음
          + 성인 친구를 사귀는 데 많은 에너지가 필요함. 이웃과 인사하지만 진정한 우정을 쌓기 위한 시간을 투자하지 않음
          + 현대의 우정에 대한 기대가 비현실적임
          + 영화와 TV에서 ""친한 친구""는 비판하지 않는 상담사처럼 그려짐
          + 친구의 정의를 먼저 합의해야 함. 할리우드 기준으로 보면 친한 친구가 없는 경우가 많음
          + 대부분의 친구는 오고 감. 사람과 상황이 변함. 한 사람이 더 많은 노력을 기울임. 어떤 친구는 독립적이라고 주장하지만 사실은 그렇지 않음
          + 나이가 들수록 사람을 찾는 것이 어려움. 스포츠나 퀴즈 나이트 같은 활동에 참여해야 함. 지속적으로 참석해야 우정이 형성됨
          + 사람들은 새로운 사람을 만나는 것을 즐김
          + 우정 감소의 이유는 관성 때문임. 새로운 것을 배우고 공동체에 참여하는 데는 노력이 필요함
          + 유튜브를 켜거나 틱톡을 넘기는 것보다 훨씬 어려움. 대부분의 사람들은 이해할 수 있게도 힘든 일을 피하고 싶어함
     * 아이가 있는 사람들이 어떻게 6.5시간/주를 친구와 보내는지 이해하기 어려움
          + 평일에는 시간이 부족함. 아침에 일어나 아이들을 준비시키고, 일하고, 저녁을 준비하고, 아이들을 돌봄
          + 주말에는 집안일과 아이들 활동으로 바쁨. 가끔 게임 모임이나 방문객이 있지만 4시간/주에 도달하기 어려움
     * 과거에는 더 많은 자녀가 가족의 부와 번영을 의미했음. 더 많은 친구는 더 많은 지원을 의미했음
          + 국가 개념이 공동체, 가족, 우정의 필요성을 감소시킴. 개인주의적 국가 개념과 상충됨
     * 물리적 변화와 문화적 변화가 친구에 대한 기대를 높임
          + 아시아에서 북유럽으로 이사한 후 새로운 친구를 사귐. 수영장에서 만난 노인과 커피를 마시며 정기적으로 만남
          + 친구와 가족은 조심하라고 경고했지만, 기대 없이 사람을 만나는 것이 가장 재미있다고 느낌
          + 모든 것이 목표나 이유가 필요하다는 사고방식이 문화적 변화로 보임
     * 헤비 메탈을 좋아해서 메탈 펍에 가서 사람들을 만남. 서로 이야기를 나누고 신뢰를 쌓음
          + 앨범, 비디오 게임, 책을 서로 빌려주며 우정을 형성함
          + 디지털 세계는 빈곤함
     * 정부가 커뮤니티 센터, 공원, 커피숍 같은 제3의 공간에 대한 투자를 줄였음
          + 사람들이 이러한 공간을 많이 사용하지 않음. 커뮤니티 홀은 거의 사용되지 않음
          + 커피숍과 바는 좌석을 줄이고 픽업 구역을 만듦
          + 사회적 상호작용에 대한 수요가 실제로 있는지 의문임
     * 우정의 질이 양보다 중요함
          + 존경하고 관심 있는 사람들과만 진정한 친구가 됨
          + 중년에는 이러한 우정을 찾기 어려움
          + 많은 지인이 있지만 진정한 우정으로 발전하지 않음
     * 과거에는 할아버지를 방문할 때마다 친구가 있었음. 지금은 친구를 거의 만나지 않음
          + 할아버지는 취미와 관심사를 추구할 시간이 많았음
     * 친구와의 1대1 시간을 원하지만 대부분의 사람들은 적극적이지 않음
          + 많은 사람들이 사회적 환경을 극복할 실행 기능이 부족함
"
"https://news.hada.io/topic?id=20638","애플 임원이 위증한 것으로 판결, 형사 모욕죄 회부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      애플 임원이 위증한 것으로 판결, 형사 모욕죄 회부

     * 애플의 앱스토어 독점 문제: 애플은 앱스토어의 독점적 운영으로 인해 법적 문제에 직면했음. Epic Games가 제기한 소송에서 애플은 앱 개발자들이 앱스토어 외부에서 앱을 판매할 수 있도록 허용하라는 명령을 받았음
     * 법원의 강력한 조치: 법원은 애플의 부당한 행위에 대해 강력한 제재를 가하고, 애플의 재무 부사장이 법정에서 거짓말을 했다는 이유로 형사 모욕죄 조사를 요청했음
     * 개발자에게 유리한 변화: 법원의 결정으로 인해 개발자들은 앱스토어 외부에서 앱을 판매할 수 있는 새로운 옵션을 가지게 되었음. 이는 앱 경제에 큰 변화를 가져올 가능성이 있음
     * 반독점 법안의 실패: Jim Jordan이 제안한 반독점 법안이 실패했음. 이 법안은 FTC의 권한을 약화시키려는 시도로, 많은 반대에 부딪혔음
     * 다양한 이해관계자의 반발: 법안에 대한 반발은 민주당뿐만 아니라 소규모 사업자와 보수적 집단에서도 나왔으며, 이는 법안의 철회로 이어졌음


판사가 애플 임원이 선서하에 거짓말했다고 판결, 형사 모욕죄 조사 요청

     * 북부 캘리포니아의 Yvonne Gonzalez Rogers 판사는 애플의 앱스토어 운영 방식에 대해 강력한 비판을 가했음
     * Epic Games가 제기한 소송에서 애플은 앱 개발자들이 앱스토어 외부에서 앱을 판매할 수 있도록 허용하라는 명령을 받았음
     * 애플은 이 명령을 피하기 위해 다양한 수단을 사용했으며, 이는 법원의 제재로 이어졌음
     * 애플의 재무 부사장 Alex Roman은 법정에서 거짓말을 했다는 이유로 형사 모욕죄 조사를 받게 되었음

애플의 대응과 법원의 명령

     * 애플은 법원의 명령에 따라 앱 개발자들이 앱스토어 외부에서 앱을 판매할 수 있도록 허용해야 함
     * 이는 앱 경제에 큰 변화를 가져올 수 있으며, 개발자들에게 새로운 기회를 제공할 것임
     * 애플은 이 결정에 대해 항소할 계획이지만, 법원의 명령은 즉시 효력을 발휘함

반독점 법안의 실패

     * Jim Jordan이 제안한 반독점 법안은 FTC의 권한을 약화시키려는 시도로 많은 반대에 부딪혔음
     * 법안은 FTC의 경쟁 부서를 법무부 반독점 부서로 통합하려는 시도로, 이는 FTC의 추가 권한을 제거하려는 시도로 해석됨
     * 법안은 민주당뿐만 아니라 소규모 사업자와 보수적 집단에서도 반발을 불러일으켰으며, 이는 법안의 철회로 이어졌음

다양한 이해관계자의 반발

     * 법안에 대한 반발은 민주당뿐만 아니라 소규모 사업자와 보수적 집단에서도 나왔음
     * Steve Bannon과 Mike Davis는 법안이 대기업의 이익을 대변한다고 비판했음
     * 많은 사업자들이 법안에 반대하며, 이는 법안의 철회로 이어졌음

        Hacker News 의견

     * 법정 문서 링크가 공유됨
     * Apple의 재무 부사장인 Mr. Roman의 증언이 거짓과 오도된 정보로 가득 차 있음
          + Apple이 대체 결제 솔루션의 비용을 추정하기 위해 비교 자료를 보지 않았다고 증언함
          + 2024년 1월 16일까지 Apple이 링크 구매에 대한 수수료를 결정하지 않았다고 주장함
     * Roman이 무능한지 아니면 승진을 위해 아첨하는지에 대한 의문이 제기됨
     * Apple이 반독점 판결을 위반했다는 판결이 나옴
     * Epic 사건으로 인해 Apple의 고위 임원이 감옥에 갈 수 있다는 가능성이 제기됨
     * 고위 임원들이 회사 돈으로 문제를 해결하고 개인적인 책임을 지지 않는다는 비판이 있음
     * Phillip Schiller가 Apple이 판결을 준수해야 한다고 주장했으나 Tim Cook이 이를 무시하고 재무팀의 설득을 받아들였다는 내용이 있음
     * Apple의 기술적 실패와 소프트웨어 품질 저하로 인해 어려움을 겪고 있다는 의견이 있음
     * Tim Cook의 정치적 기부가 팬들에게 좋지 않은 인상을 주었다는 의견이 있음
     * Cook이 판사들에 대해 부정적인 행동을 하고 있다는 비판이 있음
     * Apple의 주가가 하락했다는 의견이 제기됨
          + 주가가 213.5에서 207.8로 하락했으며, 이는 약 89억 달러의 손실을 의미함
          + 이러한 손실이 Apple의 중대한 문제를 반영한다고 생각됨
     * Apple의 임원이 기소될 가능성에 대한 회의적인 의견이 있음
     * Apple이 수익을 보호하려고 했으나 실수를 저질렀다는 의견이 있음
"
"https://news.hada.io/topic?id=20517","한국의 81,998개 술집을 둘러보는 최단 도보 경로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     한국의 81,998개 술집을 둘러보는 최단 도보 경로

     * 여행하는 세일즈맨 문제(TSP) 는 81,998개의 한국 바를 방문하는 최단 경로를 찾는 문제로, **Open Source Routing Machine (OSRM)**을 사용하여 해결됨
     * 이 경로는 178일 이상 소요되는 최적의 경로로, OSRM의 계산을 통해 증명됨
     * LKH 코드와 Concorde 코드를 사용하여 cutting-plane method를 적용, 대규모 TSP 문제 해결
     * 수학적 최적화와 운영 연구는 자원 효율성을 높이기 위한 도구 개발에 중점
     * 연구는 Roskilde University와 University of Waterloo에서 수행되었으며, IBM CPLEX Optimizer와 Leaflet 라이브러리 사용


한국의 81,998개 바를 방문하는 최단 경로

     * 여행하는 세일즈맨 문제(TSP) 는 81,998개의 한국 바를 방문하는 최단 경로를 찾는 문제로, Open Source Routing Machine (OSRM) 을 사용하여 해결되었음
     * 이 경로는 178일 이상 소요되는 최적의 경로로, OSRM의 계산을 통해 증명되었음
     * LKH 코드와 Concorde 코드를 사용하여 cutting-plane method를 적용, 대규모 TSP 문제를 해결하였음

대규모 TSP 문제 해결

     * 수학적 최적화와 운영 연구는 자원 효율성을 높이기 위한 도구 개발에 중점을 두고 있음
     * 연구는 Roskilde University와 University of Waterloo에서 수행되었으며, IBM CPLEX Optimizer와 Leaflet 라이브러리를 사용하였음

연구팀 및 감사

     * 연구팀은 William Cook, Daniel Espinoza, Marcos Goycoolea, Keld Helsgaun으로 구성됨
     * IBM의 CPLEX Optimizer와 Leaflet 라이브러리를 사용하여 연구를 수행하였음
     * 한국 경찰청의 데이터베이스를 통해 한국 바의 위치를 확보하였음

   한국의 81,998개 술집을 모두 돌아보는 최단 도보 경로는 178일 글을 해커뉴스에 긱뉴스 계정으로 올렸는데요.
   투표를 많이받아서 6시간동안 탑을 차지하더니 인기 글이 되어서 다시 GN+로 수입(?)되었네요.

   해당 글이 영문도 같이 있어서 그렇게 해본건데, 종종 영문 포함 글들은 해커뉴스쪽으로 올려보려고 합니다.

        Hacker News 의견

     * 1.33억 개의 별을 포함한 TSP 솔루션이 인상적임
          + 해당 투어는 최단 경로의 1.0038배 길이임
          + Bell Labs의 확률적 알고리즘을 사용하면 결과가 얼마나 나빠질지 궁금함
     * 고전적인 TSP 접근 방식 설명
          + 모든 노드를 임의의 경로로 연결함
          + 경로를 두 곳에서 잘라 세 부분으로 만듦
          + 세 부분을 여섯 가지 가능한 방법으로 재배열하고 가장 짧은 것을 선택함
          + 개선이 없을 때까지 2-3단계를 반복함
          + 최적의 결과를 보장하지는 않지만 대부분의 실제 문제에서 최적이거나 매우 근접함
     * 총 거리를 언급하지 않는 것이 이상함
          + 이동 시간을 해결하는 것이 목적이지만 실제 이동 거리를 아는 것도 흥미로울 것임
          + 칼로리 소모를 계산하거나 최단 거리 경로에서 얼마나 벗어났는지 확인할 수 있음
     * 오하이오 크기의 나라에 거의 8만 2천 개의 바가 있다는 생각에 압도됨
     * COVID 기간 동안 CityStrides를 사용하여 마을의 모든 거리를 걷는 목표를 세움
          + 걸은 거리를 추적하고 마을의 몇 퍼센트를 걸었는지 알려줌
          + 경로를 최적화하지는 않았지만 중복 없이 최대한 많은 거리를 걷는 것이 재미있는 정신적 퍼즐이었음
          + 자동화 도구도 재미있을 수 있지만 수작업으로 하는 것이 여정의 일부였음
          + CityStrides 사이트를 탐색하면서 사람들의 LifeMaps를 볼 수 있음
          + 어떤 사람들은 놀라운 양의 걷기를 함
     * 60년대 아일랜드 군대에서 물어보던 질문이 생각남
          + ""Bachelor's Walk에서 Collins Barracks까지 바를 지나지 않고 가는 방법은?""
          + 답은 ""모든 바에 들어가는 것""이었음
     * 이 데이터셋을 찾은 것이 인상적이지만 더 어렵지는 않음
          + 마지막 여행 판매원 최고 기록을 깨는 것과 계산을 끝내지 못하는 것 사이의 미묘한 균형임
     * NP가 다시 P처럼 보임
          + 학교에서 13이 최대라고 배웠고, 80년대에 교수님이 15로 발전시킴
          + 그 후 20, 20,000, 이번에는 80,000이 증명됨
          + World TSP 페이지에서 기록이 1백만임
          + 현재 가장 큰 증명된 최적값은 3,178,031임
          + CUDA로 해야지 일반 C로 하면 안 됨
     * Branch-and-bound는 ""책에서 나온"" 알고리즘임
          + LP 솔버를 블랙박스로 본다면 근본적으로 매우 간단하지만 매우 유용함
     * 새로운 바가 몇 개 열리고 몇 개는 닫힌 것 같음
          + 다시 계산할 시간임
"
"https://news.hada.io/topic?id=20641","컴퓨터 간 SQLite 데이터베이스를 더 빠르게 복사하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   컴퓨터 간 SQLite 데이터베이스를 더 빠르게 복사하는 방법

   서론
     * SQLite 데이터베이스를 rsync로 직접 복사할 경우, 인덱스 등으로 인해 파일 크기가 커져 느리고 불안정함.
     * 이에 따라 .dump를 활용해 텍스트 기반으로 압축·복원하는 방식이 제안됨.

   본론
     * .dump 명령은 전체 DB를 SQL 텍스트로 출력하며, 인덱스는 명령어 한 줄로 대체되어 파일 크기가 작아짐.
sqlite3 my_database.db .dump > my_database.db.txt

     * 텍스트 파일은 gzip 압축 시 추가적인 용량 절감 가능:
sqlite3 my_database.db .dump | gzip -c > my_database.db.txt.gz

     * 서버에서 압축본을 생성하고, 로컬로 복사 후 복원하는 절차로 전환함:
ssh username@server ""sqlite3 db.db .dump | gzip -c > db.txt.gz""
rsync --progress username@server:db.txt.gz .
gunzip db.txt.gz
cat db.txt | sqlite3 restored.db

     * 원본 DB 파일 3.4GB → 덤프 텍스트 1.3GB → gzip 압축본 240MB로 약 14배 감소.
     * 기존 rsync 방식은 전송 도중 DB가 변경되면 database disk image is malformed 오류 발생 가능.
     * 텍스트 덤프 방식은 복사 시작 후 내용 변경 위험이 없으므로 일관된 백업이 가능함.

   결론
     * .dump + 압축 + 복원 방식은 대용량 SQLite 전송 시 속도와 안정성 모두 개선됨.
     * 특히 인덱스가 많은 DB에 효과적이며, 전송 실패나 손상 가능성을 줄일 수 있음.
     * 대용량 SQLite를 자주 다룬다면 적용할 만한 실용적인 최적화 방식임.

   왜 이런 작업이 필요한지 백그라운드가 궁금하네요

   원문에서는 백업 & 분석용이라곤하네요. 아마 로컬에서 duckdb 같은걸로 분석하고 싶은 것 아니었을까 싶어요.
"
"https://news.hada.io/topic?id=20549","o3의 사진 위치 ​​추측은 초현실적이고 디스토피아적이며 재미남","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  o3의 사진 위치 ​​추측은 초현실적이고 디스토피아적이며 재미남

     * OpenAI의 새로운 모델 o3는 사진만 보고 촬영 장소를 놀라울 정도로 정확히 추측하는 능력을 가짐
     * 사진의 시각적 단서를 분석하고, 확대/크롭 작업을 통해 더 많은 디테일을 끌어내는 과정을 보여줌
     * Cambria, California를 첫 번째로 추측했지만, 두 번째 추측인 El Granada가 정확히 맞음
     * 도구 연동형 사고 체계를 활용해 사진을 분석하는 과정이 매우 혁신적인 패턴을 보여줌
     * 기술의 양면성에 대한 경각심을 강조하며, 사진 공유의 위험성도 지적


o3 모델의 놀라운 사진 위치 추측 능력

     * OpenAI의 o3 모델은 사진을 보고 어디서 찍힌 것인지 놀라운 정확도로 추측하는 능력을 가짐
     * 사용자는 명확한 랜드마크 없이 일반적인 거리 풍경을 찍은 사진을 제공하고, ""이 사진이 어디서 찍힌 것 같아?""라고 요청함
     * 모델은 초기에 이미지를 못 본다고 오해했지만 곧 시각적 분석을 시작함
     * 주택, 화단, 언덕, 표지판 등 다양한 시각적 단서를 분석하여 촬영 위치를 좁혀나감

o3의 사진 분석 과정

     * 모델은 자동차 번호판을 확인하기 위해 사진을 크롭하고 확대하는 방법을 사용함
     * Python 코드를 이용하여 이미지의 특정 부분을 잘라내고, 그 결과를 분석함
     * 번호판의 디자인을 통해 캘리포니아임을 추론하고 주변 환경과 건축 양식 등도 분석함
     * 이를 통해 최종적으로 Cambria, California를 추측하고, 두 번째 대안으로 Half Moon Bay–El Granada를 제시함

분석 정확도와 추가 실험

     * 실제 촬영 장소는 El Granada로, 모델의 두 번째 추측이 정확했음
     * EXIF 메타데이터를 사용하지 않고도 위치를 유추하는 것을 확인함
     * 사용자가 EXIF 정보를 제거한 스크린샷으로 실험한 결과, 여전히 정확한 추론이 가능했음
     * 다른 모델인 Claude 3.5/3.7 Sonnet 역시 좋은 성능을 보였으나, o3처럼 확대 기능은 지원하지 않음
     * Gemini 모델은 위치 정보를 부정확하게 사용하거나 잘못 추측하는 경우가 있었음

도구 연동 사고 체계와 그 의미

     * o3는 ""사고하는 중""에 필요한 도구를 직접 사용하는 새로운 Tool-augmented Chain-of-Thought 방식을 채택함
     * 사진 분석뿐 아니라 검색 등 다양한 작업에서도 이 패턴이 강력한 성능을 발휘함
     * 앞으로 다른 AI 모델에서도 비슷한 방식이 확산될 것으로 예상됨

기술의 재미와 위험성

     * 모델의 추론 과정을 지켜보는 것은 매우 재미있고 몰입감 있는 경험을 제공함
     * 동시에, 사진을 통한 위치 추적 가능성이 일반화되었음을 알리는 경각심도 중요함
     * 누구든지 일상 사진만으로 개인 위치를 추적할 수 있어, 프라이버시와 안전 문제에 대한 인식이 필요함

o3 모델의 위치 접근성에 대한 추가 정보

     * o3는 사용자 대략적인 위치 정보를 참조할 수 있지만, 이는 정확한 위치 추론의 주요 요소는 아님
     * EXIF 메타데이터가 없는 상태에서도 수천 마일 떨어진 지역의 사진을 꽤 정확히 분석했음
     * 다른 사용자들도 다양한 장소에서 실험한 결과, o3의 분석 능력을 재확인함

   EXIF에 역정보를 넣어보면 어떨까요?

        Hacker News 의견

     * 나는 경쟁적인 Geoguessr를 높은 수준에서 플레이하며, 이 모델을 테스트해보고 싶었음
          + 놀랍도록 뛰어남
          + 내가 사는 지역의 사진을 정확히 맞추었고, 내가 그 근처에 산다는 정보를 사용했음을 언급했음
          + 오래된 휴가 사진도 프로 인간 플레이어보다 잘 맞추었음
          + 유럽, 중미, 미국의 다양한 장소를 포함함
          + 결론에 도달하는 과정이 인간과 유사함
          + 식물, 지형, 건축물, 도로 인프라, 표지판 등을 분석함
          + 인간도 가능하지만 수천 번의 게임이나 심도 있는 학습이 필요함
          + 나는 도로선, 전신주, 건축물 등을 기억하기 위해 수백 개의 플래시카드를 사용함
          + 이 모델들은 개인이 기억할 수 있는 것보다 더 많은 정보를 가지고 있음
     * EXIF 데이터를 보지 않았다고 확신함
          + 만약 봤다면 처음에 Cambria를 추측하지 않았을 것임
          + 한 번은 이미지 데이터를 전혀 볼 수 없다고 말했음
          + 그 말은 절대 믿을 수 없음
          + EXIF 데이터를 제거하고 다시 실행해야 함
     * 내가 시도한 모든 이미지에서 기본 모델은 사진의 위치를 약 95% 정확도로 파악함
          + OP의 초기 이미지에서 4o는 Carmel-by-the-Sea를 더 정확히 추측함
          + CoT에서 첫 번째 추론 단계로 거의 정확한 위치를 볼 수 있음
          + 모델은 이를 무시하고 다른 위치를 시도함
          + 기본 모델이 단서를 모를 때 o3는 똑똑한 행동을 하지 않음
          + 모델이 RL-ed 되어 도구 사용 수에 상관없이 정답을 유도함
     * 같은 것을 시도했는데 결과가 웃겼음
          + 완전히 단서를 모름
          + 내가 있는 도시가 아니라는 프롬프트를 여러 번 보았음
          + 흐릿한 아스팔트를 분석하기 시작했을 때가 가장 웃겼음
          + 6분 후 o3는 확신에 차서 틀렸음
     * o3는 사용자의 위치를 대략적으로 모델링함
          + 새로운 검색 기능을 지원하기 위한 것이라고 믿음
          + 두 개의 추가 예제 쿼리를 실행했는데, 둘 다 설득력 있는 결과를 보였음
     * 사람들이 YouTubeTV를 볼 때 자신이 이야기하던 것에 대한 광고를 보고 놀라는 것을 떠올리게 함
          + 실제로는 현대 ML이 위치, 데이터 파트너, 최근 검색을 사용해 광고 관련성을 잘 추측할 수 있음
          + 이를 설명해도 여전히 컴퓨터가 듣고 있다고 믿는 사람들이 있음
     * 위치 추측이 무섭게 정확할 수 있는 영역이 있을 것임
          + 그러나 추론 과정을 보면 덜 정확한 영역도 많을 것임
          + 캔자스의 트레일러 파크 사진을 보여주면 모델이 주만 맞출 것임
          + 로봇 아포칼립스가 발생하면 캘리포니아가 가장 먼저 위험할 것임
     * EXIF 데이터를 보지 않았다고 확신함
          + 비슷한 작업에서 속임수를 쓴다면 약간 틀린 위치를 제안할 것임
          + EXIF 데이터를 제거한 동일한 이미지에서 어떻게 수행하는지 보는 것이 흥미로울 것임
     * 다른 날에는 그다지 인상적이지 않았음
          + 제공한 이미지를 찾지 못했음
          + 이미지 크롭과 유사한 검색을 반복함
          + 이미지 생성 기능을 사용하면 큰 이미지 데이터베이스를 참조 자료로 사용함을 알 수 있음
     * o4-mini가 이 작업을 실패하는 것인지 확신할 수 없음
          + 제공한 사진에서 잘 수행하지 못했음
          + Basel Main Train Station의 'Sprüngli'라는 텍스트를 포함한 사진을 주었는데, 모델은 Zurich를 제안했음
          + 두 번째 사진은 더 어려웠음
          + Metz의 박물관 내부 사진이었고, 모델은 처음부터 놓쳤음
          + 전체적으로 이미지를 이해하고 추론하는 것은 여전히 멋지지만 덜 노출된 장소에서는 잘 수행하지 못함
"
"https://news.hada.io/topic?id=20545","GCC 15의 새로운 C++ 기능들 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GCC 15의 새로운 C++ 기능들

     * GCC 15는 C++26 기능을 대거 추가했으며, 일부 C++23 기능도 개선했음
     * 주요 추가 기능은 Pack Indexing, Variadic Friends, 삭제 이유 명시, 구조적 바인딩 조건문 등
     * 새로운 컴파일러 옵션과 경고들도 도입되어 개발자 경험이 향상됨
     * C++ 모듈 지원이 강화되었고, 템플릿 컴파일 속도 최적화가 이루어졌음
     * GCC 15은 Fedora 42 기본 컴파일러로 채택되었고, 곧 Red Hat GCC Toolset에도 제공될 예정임


GCC 15의 새로운 C++ 기능

     * GCC 15.1은 2025년 4월 25일에 출시 되었으며, C++26 기능을 본격적으로 도입함
     * 여전히 기본 표준은 gnu++17이며, -std=c++23, -std=c++26 등으로 최신 기능 활성화 가능함
     * C++20, C++23, C++26 기능은 아직 **실험적(experimental)**임

C++26 주요 기능

     * Pack Indexing
          + Variadic Template 인자에서 특정 요소를 pack...[N] 문법으로 직접 접근할 수 있게 됨
          + 반복 트릭 없이 깔끔하게 첫 번째 인자 등을 참조 가능함
     * Structured Bindings 속성 지정
          + 구조적 바인딩된 각각의 변수에 별도로 [[attribute]]를 적용할 수 있게 됨
          + 예시로, 특정 바인딩 변수만 [[deprecated]] 처리 가능함
     * 삭제 함수에 설명 추가
          + = delete(""이유"") 문법으로 삭제된 함수의 호출 에러에 메시지를 제공할 수 있음
     * Variadic Friends
          + 템플릿 클래스에서 여러 타입을 한번에 friend 선언 가능함
          + Passkey 패턴처럼 접근 제어 강화에 유용함
     * constexpr Placement New
          + std::allocator와 placement new를 constexpr 컨텍스트에서 사용할 수 있음
     * 구조적 바인딩을 조건문에 사용
          + if, while, switch 조건문 안에서 구조적 바인딩 선언 가능함
          + 조건 판별은 컴파일러가 생성한 내부 변수에 의해 수행됨
     * 불완전 타입 삭제 금지
          + delete나 delete[]가 불완전 타입에 대해 사용될 경우, C++26 모드에서는 컴파일 에러 발생함
     * 옥스포드 콤마 경고
          + Variadic 함수 선언 시 , ... 없이 ...만 사용하는 패턴을 C++26에서 경고 처리함
     * 배열 비교 제거
          + 배열끼리 == 비교하는 코드를 오류로 처리
          + 기존 C++20에서는 경고였으나, 이제는 C++26 모드에서 컴파일 오류로 격상됨
     * #embed 지시어
          + 바이너리 데이터를 소스 코드에 직접 삽입할 수 있는 #embed 지원
"
"https://news.hada.io/topic?id=20561","CubeCL - CUDA, ROCm, WGPU를 위한 Rust 기반 GPU 커널","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              CubeCL - CUDA, ROCm, WGPU를 위한 Rust 기반 GPU 커널

     * CubeCL은 Rust에서 GPU 커널을 작성할 수 있도록 해주는 고성능 멀티플랫폼 언어 확장
     * 함수, 제네릭, 구조체를 완벽하게 지원하며, 특성, 메서드, 타입 추론은 부분적으로 지원
     * WGPU, CUDA, ROCm 기반 런타임을 지원하며, SIMD 명령어를 활용한 최적화된 JIT CPU 런타임도 개발중
     * 자동 벡터화, 컴파일 타임 최적화(Comptime), 오토튠 기능을 제공하여 코드 성능을 극대화함
     * Rust의 프로시저 매크로 시스템을 활용하여 GPU 커널 코드를 파싱하고 확장하는 독특한 방식을 사용함


CubeCL 소개

     * CubeCL은 Rust 언어를 확장하여 GPU 커널을 직접 작성할 수 있도록 지원하는 고성능 컴퓨팅 언어 확장
     * 제로 코스트 추상화를 활용하여 효율적이고 유지보수하기 쉬운 커널 개발을 가능하게 함
     * 현재 함수, 제네릭, 구조체를 완벽 지원하고, 트레이트, 메서드, 타입 추론은 부분 지원함

간단한 사용 예시

     * #[cube] 어트리뷰트를 사용해 GPU에서 실행할 함수를 지정함
     * gelu_array와 gelu_scalar 함수는 SIMD 명령어를 자동으로 사용하여 성능을 향상시킴
     * launch_unchecked 함수를 사용하여 커널을 실행할 수 있음

지원하는 런타임

     * WGPU: Vulkan, Metal, DirectX, WebGPU를 통한 크로스 플랫폼 GPU 지원
     * CUDA: NVIDIA GPU 최적화 지원
     * ROCm/HIP: AMD GPU 지원 (개발 중)
     * JIT CPU 런타임: Cranelift 기반 SIMD 명령어를 활용한 최적화된 JIT CPU 런타임 개발중

CubeCL의 목표

     * 고성능 컴퓨팅 커널을 하드웨어에 구애받지 않고 작성할 수 있도록 지원함
     * 자동 벡터화, 컴타임, 자동 조정 기능을 통해 코드의 구성 가능성, 재사용성, 테스트 가능성, 유지보수성을 향상시킴
     * 메모리 관리 전략을 통해 높은 처리량을 위한 최적화된 버퍼 재사용을 제공함
     * 선형 대수 구성 요소를 개발하여 고성능 및 과학적 컴퓨팅 생태계를 구축하고자 함

CubeCL의 작동 방식

     * Rust의 프로시저 매크로 시스템을 활용하여 GPU 커널 코드를 파싱하고 확장하는 독특한 방식을 사용함
     * 컴타임: 원본 코드를 변환하지 않음으로써 컴파일 타임 최적화를 쉽게 통합할 수 있음
     * 자동 벡터화: CubeCL 함수의 입력을 벡터화하여 각 중간 변수의 벡터화 요소를 결정함
     * Rust 통합: 생성된 코드는 유효한 Rust 코드로 남아 특정 런타임에 대한 의존 없이 번들로 제공될 수 있음

디자인 및 특별 기능

     * CubeCL은 큐브를 중심으로 설계되었으며, 모든 컴퓨팅 API는 하드웨어에 매핑되어 3D 표현을 사용할 수 있음
     * 자동 벡터화: SIMD 명령어를 사용하여 성능을 향상시킬 수 있으며, 벡터화 요소를 커널 내에서 직접 접근 가능함
     * 컴타임: 컴파일러 IR을 런타임에 수정하여 최적화와 유연성을 제공함
     * 자동 조정: 런타임에 작은 벤치마크를 실행하여 최적의 커널과 설정을 선택함

주의사항 및 역사

     * CubeCL은 현재 알파 버전으로, 다듬어지지 않은 부분이 존재함
     * 원래 Burn 프로젝트의 WebGPU 백엔드로 시작되었으나
     * CUDA 런타임을 추가하며 범용 IR과 Rust 프론트엔드로 확장됨
     * CUDA와 WebGPU의 차이를 극복하기 위해 범용 컨셉을 개발함
"
"https://news.hada.io/topic?id=20529","Microsoft, VS Code 포크 버전들에서 C/C++ 확장 기능 삭제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Microsoft, VS Code 포크 버전들에서 C/C++ 확장 기능 삭제

     * MSFT가 Cursor와 VS Codium 같은 VS Code 기반 포크 제품에서 C/C++ 확장 기능을 차단
          + Intellisense 자동완성, 디버깅 등 개발에 필수적인 기능들이 중단될 수 있음
     * Microsoft는 오래전부터 라이선스를 통해 자체 제품 외 사용을 금지했지만 최근에야 기술적 차단을 적용
     * Cursor는 임시 픽스를 내놓았고, 오픈 소스 대체품으로 전환 계획을 밝힘
     * 일부 개발자는 Microsoft의 행위가 불공정 경쟁이라며 FTC에 신고함


Microsoft, VS Code 포크 제품에서 C/C++ 확장 기능 차단

     * Microsoft가 Visual Studio Code(이하 VS Code)용 C/C++ 확장 기능을 더 이상 VS Codium, Cursor 같은 파생 제품에서 사용할 수 없도록 제한함
     * 이 확장 기능은 Intellisense 자동완성, 디버깅 등 개발에 필수적인 기능을 추가하는 역할을 수행
     * 2025년 4월 3일 출시된 버전 1.24.5부터 차단 조치가 적용됨

차단 이유 및 배경

     * 확장 설치 시 나타나는 에러 메시지를 통해, Microsoft는 해당 확장이 자사 제품에서만 사용 가능하다고 명시함
     * 사실 Microsoft는 이미 2020년 9월에 라이선스 조건을 수정해 이 같은 제한을 명문화했지만, 그동안 기술적으로는 차단을 하지 않음
     * 이번 업데이트부터는 환경 검사(environment check) 를 통해 실제 차단이 이뤄짐
     * Microsoft의 Python용 Pylance 확장은 과거부터 비슷한 방식으로 포크 제품을 차단해온 사례가 있음

Cursor와 VS Codium 측 대응

     * Cursor 제작사인 Anysphere의 CEO Michael Truell은, 임시 해결책을 마련했으며, 장기적으로는 오픈 소스 대체품을 통합할 계획임을 밝힘

     MSFT는 원래 클로즈드 소스인 몇 가지 확장 기능을 가지고 있음 (원격 액세스, Pylance, C/C++, C# 등)
     해당 확장의 최신 릴리스는 Cursor나 기타 MSFT가 아닌 편집기에서는 더 이상 작동하지 않음
     우리는 이 확장을 사용하지 않을 것이며, 시장에 존재하는 오픈소스 대체제에 투자중임. 차후 버전에서 이것들을 번들하여 심리스하게 전환할 예정
     * Cursor는 Microsoft Visual Studio Marketplace에서 확장을 설치할 때 역방향 프록시(reverse proxy) 를 설정해 우회 사용해왔던 것으로 알려짐
     * VS Codium 사용자들은 현재 완전한 자유 소프트웨어(free as in freedom) 철학을 지키는 대체 확장을 찾고 있음

경쟁 문제 제기

     * 일부 개발자들은 Microsoft가 Copilot에 포함된 Agent Mode라는 AI 기능을 최근 출시한 점을 언급함
     * Microsoft가 Cursor 같은 경쟁 제품을 막고 자사 생태계로 사용자를 잠금(lock-in) 하려 한다는 비판 제기
     * 익명의 개발자가 미국 연방거래위원회(FTC) 에 Microsoft의 행위가 불공정 경쟁이라며 조사를 요청하는 편지를 보냄
     * 주요 비판 포인트는 자사 우대(self-preferencing), Copilot 강제 번들링, 경쟁 차단임

Microsoft의 공식 입장

     * The Register는 Microsoft에 논평을 요청했지만, 즉각적인 답변은 없었음

   대형 프로젝트에서는 맨날 죽어서 꺼놓고 쓰고있긴 합니다 ㅎ

   원격 접속 같은 핵심 확장기능이 이미 codium 에 없다던가 해서 딱히 새롭지는 않네요. 되려 지금까지 우회 사용을 안 막은 게 신기하네요

   C/C++는 기본 툴이 결국 오픈소스라서 누군가 디버그 쪽만 새로 만들어서 출시하면 끝 아닌가요.
   MSVC 점유율만 줄겠네요.

   인텔리센스기능등 (오토컴플릿,리펙토링,심볼찾기 등등...) 비주얼스튜디오에서 가져온 독점기술이긴 하죠.

   인텔리센스라는 상표는 독점이 맞지만 나열하신 기능 자체는 독점이라기에는 타사의 수많은 IDE들이 이미 제공 중인 기술이긴 하죠.

        Hacker News 의견

     * Microsoft의 독점적인 마켓플레이스를 좋아하지 않음. 그러나 회사가 이익을 위해 사용 조건을 공개적으로 위반하는 것은 과함
          + Cursor가 Microsoft Visual Studio Marketplace의 네트워크 요청을 숨기기 위해 역 프록시를 설정하여 Microsoft의 서비스 약관을 위반했다는 주장 있음
          + 이는 Cursor 사용자가 Microsoft의 시장에서 VS Code 확장을 설치할 수 있게 함
          + 다른 VS Code 포크는 대안 확장 마켓플레이스인 Open VSX를 지향함
     * Microsoft는 VScode 초기 시절에 원격 측정을 우회할 수 있는 오픈 소스 대안을 제공하지 않으면 시장 점유율을 얻지 못할 것임을 알았음
          + GitHub 인수는 이 전략의 일부였음
          + 많은 플러그인 개발자들이 그들의 생태계로 빨려 들어가게 만듦
          + 이제 시장 점유율은 확고히 그들의 손에 있으며 경쟁자들은 약해짐
     * Microsoft에 의존하는 스택을 가지고 있다면, 그들이 당신을 배신할 준비를 해야 함
     * clangd의 인텔리센스는 Microsoft C++ 확장보다 훨씬 좋고 빠름. compile_commands.json을 설정할 수 있다면
          + 디버깅은 여전히 Microsoft 확장에 의존함
          + 디버깅을 위한 확장을 만드는 것은 어렵지 않을 것임
     * Zed를 사용하는 이유는 VSCode에 대한 의존을 피하고 싶기 때문임
          + 처음에는 VSCode의 큰 지지자였지만 이제는 신뢰하지 않음
     * VSCode를 사용하지 않는 사람들은 제품 소유자가 라이선스 위반에 대해 기뻐하지 않는 것에 놀람
          + Google이 Chrome과 Android 포크에 무언가를 할 때 놀라는 것과 같음
          + 대기업이 후원하는 제품을 원하지 않으면 오픈 소스 개발자에게 비용을 지불해야 함
     * Cursor를 깊이 사랑하지만 VSCode 확장이 아닌 포크로 선택한 것은 치명적인 선택이었음
          + 장기적으로는 확장으로 재구성하거나 사업을 접어야 할 것임
          + Microsoft의 라이선스를 공개적으로 위반하면서 그들의 AAA 제품에 대한 경쟁자를 만드는 것은 오래가지 못할 것임
     * '경고를 울리는 것'에 지친 적이 있는지 묻고 있음
          + 여러 주제에 대해 경고를 울려왔지만, 매번 마치 종교 신자들에게 이야기하는 것 같음
          + 사람들에게 어떻게 다가가야 할지 고민 중임
          + 사람들은 ""너무 깊이 생각한다"", ""그런 일은 일어나지 않을 것이다"", ""나는 VSCode를 좋아해서 대안은 신경 쓰지 않는다""라고 말함
          + 개인주의 때문인지, 그들은 자신만의 좁은 단기적 이익만 고려하고 집단적 문제에 눈이 멀어짐
     * clangd 확장이 더 좋고 오픈 소스임
          + Microsoft C++ 확장은 오픈 소스가 아님
     * Protesilaos의 글에서 Emacs로 전환하는 이유를 설명함
          + ""배움은 실천을 통해 이루어져야 함. 인내와 헌신이 필요함. 다른 사람의 코드를 공부하고 재사용하되, 이해하지 못하는 행동 패턴을 맹목적으로 복사-붙여넣기 하지 말아야 함""
          + 즉각적인 만족을 기대하지 말아야 함
          + Emacs는 도구의 품질과 기능에 깊이 신경 쓰는 사용자에게 맞춰져 있음
     * 컴퓨터 역사 책을 읽으면서, 도구에 시간을 투자하고 모든 측면에서 숙달을 향해 나아가는 것이 당연시되던 시절이 있었던 것 같음
          + 다음 큰 것이 하이프와 마케팅, ""사용의 용이성""과 함께 등장하면 같은 사이클이 반복될 것임
"
"https://news.hada.io/topic?id=20595","커서를 제대로 사용하는 12가지 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          커서를 제대로 사용하는 12가지 방법

     * 커서 디자이너가 말하는 커서 사용법인데, 잘 몰랐던 내용들이 있어 공유드립니다.

    1. Cursor는 프로젝트 별로 규칙(Rules)을 세울 수 있음. Cursor > Setting > Cursor Settings로 접근하면 됨
    2. Cursor는 .cursurignore 기능이 있어서, 테스트 케이스 파일을 편집할 수 없게 할 수 있음
    3. .cursor 폴더 안에 MD 파일로 설계 관련 문서, 작업 요구사항으로 넣으면 프로젝트 글로벌 룰로 적용 됨
    4. 커서는 유저가 직접 편집한 내용을 맥락으로 이용함

   https://github.com/EnzeD/vibe-coding?tab=readme-ov-file

   바이브 코딩 가이드도 같이 보시면 좋을듯 합니다. 언급하신 Rules 활용도 잘 나와있어요.

   .cursor 폴더 안에 MD 파일로 설계 관련 문서, 작업 요구사항으로 넣으면 프로젝트 글로벌 룰로 적용 됨

   프로젝트 폴더에 DEVELOPMENT.md 를 넣어도 되는거 같던데, 글로벌로 적용하려면 .cursor폴더안에 넣어야 하는군요.

   나머지 8개는 아직 생성 중인건가?

   원본 글의 12가지 정보 중에서 @liabilityuk0 님께서 새롭게 알게 된 4가지 사실만 본문에 따로 정리하신 것 같습니다.
"
"https://news.hada.io/topic?id=20613","서버 보호를 위한 Zip Bomb 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         서버 보호를 위한 Zip Bomb 사용

     * 웹 트래픽의 대부분은 봇에서 발생하며, 이 중 일부는 악의적인 목적으로 사용됨
     * Zip Bomb은 작은 압축 파일이지만, 이를 풀면 매우 큰 파일로 확장되어 서버를 과부하 시킬 수 있음
     * 압축 기술은 웹에서 데이터를 효율적으로 전송하기 위해 사용되며, 봇도 이를 활용함
     * 악성 봇을 탐지하면, 서버는 gzip으로 압축된 파일을 제공하여 봇을 무력화함
     * Zip Bomb은 완벽한 해결책은 아니지만, 단순한 봇을 막는 데 효과적임
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Zip Bomb을 사용하여 서버 보호하기

     * 웹 트래픽의 대부분은 봇에서 발생하며, 이 중 일부는 악의적인 목적으로 사용됨
     * 악성 봇은 서버의 취약점을 발견하고 악성 스크립트를 삽입하여 서버를 봇넷으로 변환할 수 있음
     * Zip Bomb은 작은 압축 파일이지만, 이를 풀면 매우 큰 파일로 확장되어 서버를 과부하 시킬 수 있음

압축 기술의 활용

     * gzip은 웹에서 데이터를 효율적으로 전송하기 위해 사용되는 압축 기술임
     * 웹 브라우저와 봇은 모두 gzip 압축을 지원하며, 이를 통해 대역폭을 최대한 활용함
     * 악성 봇을 탐지하면, 서버는 gzip으로 압축된 파일을 제공하여 봇을 무력화함

Zip Bomb 생성 방법

     * dd 명령어를 사용하여 10GB의 데이터를 생성하고, 이를 gzip으로 압축하여 10MB 파일로 만듦
     * 서버는 악성 요청을 탐지하면, 10MB의 Zip Bomb 파일을 제공하여 봇을 무력화함

Zip Bomb의 한계

     * Zip Bomb은 완벽한 해결책은 아니며, 일부 봇은 이를 감지하고 우회할 수 있음
     * 그러나 단순한 봇을 막는 데는 효과적이며, 서버 보호에 유용한 도구임

관련 기사

     * 1.3백만 웹 요청을 처리하는 방법
     * Apache 서버 서명 변경
     * Google Analytics에서 Do Not Track 준수하기

        Hacker News 의견

     * 어렸을 때 장난으로 내 홈페이지에 ln -s /dev/zero index.html을 했던 기억이 있음. 당시 브라우저는 이를 싫어했고, 시스템이 멈추거나 다운되기도 했음
          + 이후 브라우저가 실제 콘텐츠를 확인하기 시작하면서 이런 요청을 중단했음
     * 요즘 거의 모든 브라우저가 zstd와 brotli를 지원하므로, 이러한 폭탄이 더 효과적일 수 있음
          + 예전 댓글에서 1.2M:1 압축 비율을 보여주었고, zstd는 더 나은 성능을 보임
     * 봇은 현대 압축 표준을 지원하지 않을 수 있음
          + 이는 봇을 차단하는 좋은 방법이 될 수 있음: 모든 현대 브라우저가 zstd를 지원하므로, 화이트리스트에 없는 브라우저 에이전트에 이를 강제하면 스크래퍼를 혼란스럽게 할 수 있음
     * 이전 직장에서 봇이 워드프레스 취약점을 발견하고 서버에 악성 스크립트를 삽입한 적이 있음
          + 워드프레스 설정 후 1시간 만에 PHP 셸이 서버에 배포되는 경험을 한 사람이 나만이 아니라는 사실이 재미있음
     * zip 폭탄은 재미있음. 보안 제품에서 특정 크기 이상의 zip 아카이브를 제대로 검사하지 않는 취약점을 발견한 적이 있음
          + 이로 인해 zip 폭탄을 오피스 xml 문서에 넣으면 쉽게 식별 가능한 악성코드가 포함되어 있어도 제품이 이를 통과시킴
     * ssh를 사용하여 루트 비밀번호를 추측하려는 ssh 클라이언트를 충돌시키는 방법을 알아냈음
          + 결과적으로 스크립트 키디들이 내 서버를 ddos 공격했음
          + '나쁜 행위자'를 식별하고 방화벽 규칙으로 IP를 차단하는 방법으로 전환했음
          + IPV6로 인해 점점 더 어려워지고 있음
     * 웹 페이지를 작성하는 사람들은 인간에게 보이지 않는 링크로 zip 폭탄을 만들 수 있음 (흰 배경에 흰 글자, 호버/클릭 앵커에 강조 표시 없음)
          + 봇은 이를 다운로드하여 확인함 (크롤러와 AI 스크래퍼도 마찬가지)
     * 이는 gzip 폭탄임 (일반 압축 웹페이지처럼 작동함), 바이러스를 차단하는 고전적인 zip 파일이 아님
     * 보통의 허니팟 스크립트 대신 이를 배포했음
          + 잘 작동하지 않음
          + 웹 서버 로그에서 봇이 10메가바이트의 독약을 전부 다운로드하지 않는 것을 볼 수 있음
          + 다양한 길이에서 중단됨. 지금까지 약 1.5Mb 이상 가져간 것을 본 적이 없음
          + 아니면 작동 중일까? 실시간으로 스트림을 디코딩하고 충돌하는 것일까? 예를 들어, 1.5Mb를 읽은 것으로 기록된 것이 실시간으로 RAM에서 1.5Gb로 디코딩되고 충돌할 수 있을까?
          + 알 방법이 없음
     * 얼마 전 Tor Project의 검열 방지 인프라가 zip 폭탄에 관한 블로그 게시물과 같은 사이트에서 운영되던 사건이 있었음
          + Google이 zip 파일 중 하나를 크롤링하여 악성 도메인 목록에 추가했고, Tor의 Snowflake 도구의 중요한 부분이 손상됨
          + 문제를 해결하는 데 몇 주가 걸림
     * 내 애플리케이션 중 하나에서 업로드를 보호하기 위해 10MB 크기의 고정 크기 임시 디스크 파티션을 만들어 너무 큰 파일이 업로드될 경우 그 영향을 제한함
     * 몇 년 동안 조합한 스크립트를 사용하여 비슷한 작업을 수행함
          + 매년 404 로그를 확인하고 가장 인기 있는 취약점 경로를 블랙리스트에 추가함
          + 해당 URL을 3회 요청하면 해당 호스트를 제한된 합법적 경로만 허용하는 그레이리스트에 추가함
"
"https://news.hada.io/topic?id=20532","도장, 스테레오, 스크린 없는 2만 달러 미국산 전기 픽업트럭","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   도장, 스테레오, 스크린 없는 2만 달러 미국산 전기 픽업트럭

     * Slate Truck는 2만 달러 이하의 가격으로 제공되는 미국산 전기 픽업 트럭임
     * 이 차량은 최소한의 기능을 제공하며, 개인화가 가능한 디자인을 특징으로 함
     * 제조 과정에서 페인트를 사용하지 않아 비용 절감 및 환경 보호에 기여함
     * 사용자가 직접 수리 및 업그레이드를 할 수 있도록 지원하는 DIY 접근 방식을 채택함
     * 소비자들이 단순화된 차량을 수용할 준비가 되었는지가 관건임


$20,000 미국산 전기 픽업 트럭

     * Slate Truck는 2만 달러 이하의 가격으로 제공되는 전기 픽업 트럭임
     * 이 차량은 두 명이 탑승할 수 있으며, 150마일의 주행 거리를 제공함
     * 차량은 페인트, 스테레오, 터치스크린이 없는 최소한의 기능을 제공함
     * 개인화가 가능한 디자인으로, 사용자가 직접 차량을 꾸밀 수 있음
     * 제조 과정에서 페인트를 사용하지 않아 비용 절감 및 환경 보호에 기여함

단순화 및 손상 수용

     * Slate Truck는 기본적이고 커스터마이즈 가능한 디자인을 채택함
     * 차량의 외관은 플라스틱으로 제작되어 내구성이 높고 스크래치에 강함
     * 차량의 인테리어는 시간이 지남에 따라 더 나아지는 텍스타일로 제작됨
     * 사용자가 차량을 개인화할 수 있는 다양한 옵션을 제공함

최소한의 제조 과정

     * Slate Truck의 제조 과정은 페인트 공정을 생략하여 간소화됨
     * 플라스틱 주입 성형을 통해 제조 비용을 절감함
     * 단일 모델, 단일 색상으로 생산하여 복잡성을 줄임
     * 미국 내에서 설계, 엔지니어링, 제조가 이루어짐

BYOD (Bring Your Own Device)

     * 차량은 터치스크린이나 엔터테인먼트 시스템이 없음
     * 사용자가 직접 장치를 가져와 차량을 개인화할 수 있음
     * 안전 시스템은 자동 비상 제동 및 보행자 감지 기능을 포함함
     * 차량의 유지보수는 사용자가 직접 수행할 수 있도록 지원함

판매 및 서비스

     * Slate Truck는 직접 판매 방식을 채택하여 딜러 네트워크를 생략함
     * 사용자가 직접 수리 및 업그레이드를 할 수 있도록 지원하는 Slate University를 운영함
     * 전국적인 서비스 센터와의 협력을 통해 차량 수리 및 업그레이드를 지원함
     * 차량의 사전 주문은 50달러이며, 2026년 말부터 배송이 시작될 예정임

        Hacker News 의견

     * 비슷한 크기의 가솔린 엔진 픽업 트럭을 만들면, F-150보다 연비가 좋음에도 불구하고 CAFE 기준으로 인해 연비 비효율성으로 더 많은 페널티를 받음
     * 미국에서 15,000달러 이하로 이런 차량을 만드는 것이 가능할 것 같음
          + 자동차와 트럭은 과도하게 설계되어 있으며, 가격을 올리기 위한 저가치 옵션이 많음
          + 예를 들어, 자동 헤드라이트 기능은 많은 차량에서 표준 기능이 아님
          + 차량에 태블릿 슬롯을 포함할 수 있지만, 대신 비싼 자동차 스테레오와 인포테인먼트 시스템이 포함됨
          + 2008년 미국 자동차 산업 구제금융과 중국 전기차에 대한 100% 관세 이후, 미국 자동차 산업은 경쟁이 거의 없음
     * 이 트럭을 매우 좋아함. 1998년식 Ford Ranger를 대체할 트럭으로 고려 중임
          + 모바일 앱의 부재가 문제일 수 있음
          + 충전 관리와 배터리 컨디셔닝의 부족
          + 1998년식 Ford Ranger와 비교 가능한 적재 및 견인 능력 필요
          + 벤치 시트가 필요함. 버킷 시트는 주말 캠핑 여행에 적합하지 않음
     * 아내가 승마 아카데미를 운영하며 Honda Fit을 픽업 트럭처럼 사용함
          + Honda Fit이 더 이상 생산되지 않아 걱정임
          + 중고 Nissan Leaf를 고려 중이나, 이 픽업 트럭도 관심 있음
     * 20,000달러의 도로 주행 가능 전기차 개조 플랫폼임
          + 전기 모터, 배터리, 섀시만 제공되며 나머지는 사용자가 결정할 수 있음
     * 자동차 오디오 애호가로서, 새로운 고급 차량에 시스템을 설치하는 가장 큰 장애물은 깊이 내장된 인포테인먼트 시스템을 우회하는 것임
          + 전기 구동계와 새로운 차량 안전성을 제공하는 90년대 스타일의 오디오 설치 공간이 놀라움
     * 완전히 간소화된 차량을 판매하는 것을 꿈꿔왔음
          + 지속 가능한 이익을 내기를 바람
     * 전기차 스타트업이 ""게임 체인저""라고 주장하면서 실제로 차량을 판매하지 않는 것에 대해 회의적임
     * SLC(간단하고 사랑스럽고 완전한) 접근 방식을 취하는 브랜드를 사랑함
          + 불필요한 기능이 가득한 세상에서 미니멀리즘은 절대적인 기쁨임
     * 차량에 미디어 시스템이 없는 것은 충격적이지만, 부차적인 이점이 있음
          + 반복적인 보증 청구의 70%가 인포테인먼트 시스템 때문임
          + 스피커 관리가 어려울 수 있음
          + 블루투스 스피커로 모든 소리를 처리하는 것은 번거로움
"
"https://news.hada.io/topic?id=20534","`x.com`의 조작된 합의(Consensus)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       `x.com`의 조작된 합의(Consensus)

     * X.com에서는 알고리듬과 인기 계정이 콘텐츠 노출을 조용히 조작함
     * 소셜 증거는 실제 대중 의견이 아니라 영향력자와의 근접성으로 조작됨
     * 지각의 연쇄 반응을 통해 특정 서사가 점차 강화되고 확산됨
     * 과거 Astroturfing은 가짜 계정이었지만, 이제는 선별된 실제 사용자들이 활용됨
     * 사람들은 스스로 선택한다고 믿지만, 실제로는 알고리듬에 의해 선택지가 조정됨


알고리듬 권위

     * 영향력 있는 사용자와 추천 알고리듬 설계가 사람들이 무엇을 보고, 무엇이 주목받고, 무엇이 묻히는지를 조용히 조정함
     * 팔로워 2억 1,900만 명을 가진 계정이 작은 계정을 단순히 '뮤트'하면, 작은 계정의 조회수가 하루 만에 150,000에서 20,000으로 급감함
     * 이는 명시적인 규칙 위반이나 공지가 아닌, 알고리듬에 의해 이루어지는 섀도우밴의 일종임
     * 반대로 영향력 있는 계정이 긍정적 신호를 보내면 콘텐츠는 급속히 확산되고 인지도가 상승함
     * 심지어 단순한 좋아요나 반복 댓글도 AstroBoost™ 역할을 하여 가짜 활기를 연출하고 증폭을 유발함

소셜 증거의 사회 공학적 조작

     * 과거의 소셜 증거는 집단 지혜를 반영했지만, 현재는 알고리듬 승인이 주요 요인이 됨
     * 영향력 있는 계정과의 단 한 번의 상호작용만으로도 콘텐츠의 인기도가 왜곡될 수 있음
     * 결과적으로 인위적 인기도가 형성되며, 알고리듬이 선택한 내러티브가 부각되고 자연스러운 아이디어는 묻히게 됨
     * 이는 사기 행위가 아니라 영향력 인프라로 정의됨

지각 연쇄 반응

     * 콘텐츠를 삭제하거나 차단할 필요 없이 단순히 피드 내 우선순위를 낮추는 방식으로 가시성을 줄임
     * 이러한 방식으로 콘텐츠는 자연스럽게 덜 보이게 되고 존재감이 사라짐
     * 반대로 긍정 신호를 받은 콘텐츠는 연쇄 반응을 일으켜 비슷한 계정들에 걸쳐 확산되고, 동일한 내러티브가 반복적으로 강화됨
     * 사용자들은 이 과정을 자연스러운 것처럼 인식하지만, 실제로는 이미 필터링되고 순위가 매겨진 결과물임

Astroturfing 2.0

     * 과거의 아스트로터핑은 가짜 계정과 봇을 활용했지만, 지금은 선별된 진짜 사용자들이 활용됨
     * 엘리트 계정이 알고리듬을 작동시키고, 다른 사용자들은 그 파장에 휘말리게 됨
     * 이는 군중을 속이는 것이 아니라, 군중을 유도하는 방식임
     * 실제 사용자와 실제 참여를 선택적으로 증폭시켜 광범위한 동의 illusion을 형성함
     * 피드에 남아 살아남은 콘텐츠가 곧 ""합의""로 인식됨

보이는 것과 보이지 않는 것

     * 대규모 인식 조작은 사람들이 무엇을 보고, 구매하고, 지지하고, 무시하는지를 결정하게 함
     * 단순히 주의를 왜곡하는 것이 아니라, 최종 결과를 조정함
     * 진실은 '무엇이 진짜냐'가 아니라, '무엇이 보여지느냐'로 정의됨
     * 보여지지 않는 것은 존재하지 않는 것과 같음
     * 이 현상은 단일 소셜 네트워크만의 문제가 아님

부록: 시끄러운 자들은 항상 먼저 무너짐

     * 가장 효과적인 영향력은 드러나지 않으며, 한 번의 알고리듬 신호로 조용히 인식을 조정함
     * 모든 것을 노골적으로 통제하려는 세력은 쉽게 발각되고, 오래 지속되지 못함
     * 대신 사람들에게 스스로 선택했다고 믿게 만들면서 선택지를 조작하는 세력이 살아남음

   글의 사실 여부를 떠나서 트위터를 사용해 본 경험으로는 피드 뿐만 아니라 답글도 좋아요나 리트윗 수가 아니라 팔로우 수가 많은 것부터 보이더라구요.
   이미 영향력(팔로워)이 큰 사람의 의견만 보고 아래 묻힌 수십 수백개의 의견은 좋아요를 받든 말든 볼 확률이 매우 적어지게 되는 것이죠.

   사실 SNS가 아니어도 이미 많은 곳에서 이런 식의 노출이 채택되고 있는데 의식적으로 최대한 많은 의견을 찾아보는 것이 인터넷의 필수 덕목이라고 해야 할지도 모르겠네요.

        Hacker News 의견

     * Twitter가 게시물을 억제하다가 혐오 봇에 의해 스팸 처리되면 게시물을 노출시키는 것 같음
          + Twitter가 좋아하는 게시물(폭력적이고 혐오적인 반이민 게시물)이 사랑 봇에 의해 스팸 처리되는 증거도 보았음
          + Twitter가 Donald/Elon 등이 운영하는 선전 채널처럼 보임
     * 이러한 정책이 복리 효과를 유발하여 소름 끼치는 면이 있음
          + 강력한 X 계정을 몇 개만 가지면 더 많은 계정을 생성할 수 있는 능력을 가짐
          + 다른 사람을 침묵시키는 것뿐만 아니라 동조하는 동맹을 홍보하여 침묵시킬 수 있는 능력을 증가시킬 수 있음
     * 우리는 영향력 포착의 초기 단계에 있으며, 영향력이 새로운 자본이라는 논의가 있음
          + 새로운 디지털 시대에 자본 축적을 허용하는 시스템을 복제하고 있음
     * Reddit이 최악으로, 주목을 받을 만한 곳에는 제조된 합의가 어디에나 있음
     * 이 글이 40점이나 받은 것이 놀라움
          + 작성자는 특정 사용자의 조회수가 ""musk와의 불화"" 이후 급격히 감소한 그래프를 제시함
          + 이는 의심스러우며 언급할 가치가 있지만, 나머지 블로그는 ""사회 공학""과 ""인식의 연쇄""에 대해 아무런 근거 없이 설교하는 것에 불과함
          + 제목과 첫 단락만 보고 투표하는 것인지 의문임
          + 이 글은 그래프로 축약해도 거의 잃을 것이 없을 것임
     * 제목이 아이러니한가? 도움이 되는가?
          + Chomsky와 Herman의 책 ""Manufacturing Consent""은 이 상황에서 거의 사용되지 않는 기술을 설명함
          + 여기서는 국가 운영 미디어 아울렛에 더 가까움
          + Chomsky의 경우, 편집자의 힘은 은밀함에서 나오지만, 이 경우에는 편집자가 알려져 있어도 멈출 수 없는 것에서 나옴
          + 사람들은 자신이 팬으로서 받아들이지 않으면 외부인으로 드러나게 됨
          + 대부분의 사람들은 아무것도 하지 않는 기본 단계를 밟기 때문에 자신이 팬이거나 몰려다니는 증거를 축적하게 됨
          + 이는 수용을 조건화하는 강제 기능임
     * 이 경우, 편집자에 반대할 때 일어나는 일을 보여주는 기사와 이와 같은 논의는 편집자를 강화하고 자기 검열 효과를 증가시킴
          + 플랫폼이 공정성 주장을 충족하지 못할 때 플랫폼을 포기하는 것이 더 나을 수 있음
     * X는 다시 암호화폐 및 금융 서비스를 판매하는 봇으로 가득 참
     * X의 ""제조된 합의""에 대한 기사는 과장됨
          + 영향력은 항상 큐레이션되어 왔음
          + X의 죄는 악한 알고리즘이 아니라 행성 규모로 운영되는 것임
          + 우리는 수천 개의 작은 커뮤니티를 하나의 글로벌 소음 대결로 바꾸었음
          + 알고리즘은 이 혼란을 유지하는 기어일 뿐임
          + 완벽한 알고리즘이 존재한다고 가장하는 사람들도 있음
          + ""완벽한"" 시스템은 서로 다른 공간에서 서로 다른 알고리즘의 복잡한 웹임
          + X의 코드를 지적하는 것은 핵심을 놓치는 것임
          + 우리는 이 행성 서커스에 등록했고 계속해서 티켓을 구매하고 있음
     * 알고리즘이 실제로 이렇게 작동하는지 알 수 없음
          + 기사는 특정 인스턴스의 하나의 플롯만 보여주며, 시청률 급락에 대한 설명이 여러 가지일 수 있음
     * HN과의 유사성을 느꼈음
          + 적어도 HN은 ""알고리즘""에 대해 투명하려고 노력함
          + X/FB 등에서 사용하는 것에 비해 본질적으로 단순한 알고리즘임
     * 알고리즘이 이러한 경우에 고프로필 계정을 차단하는 것에 영향을 받는지 궁금함
          + 예를 들어, 오래전에 Musk를 차단했는데, 그렇지 않으면 알고리즘이 그의 '콘텐츠'를 계속 밀어붙임
          + 알고리즘이 여전히 그가 상호작용한 것을 나에게 우선시하는지, 아니면 그를 차단하지 않은 사람들에게만 그렇게 하는지 궁금함
          + 그가 상호작용할 것이라고 예상되는 것이 추천되지만, 그것이 실제로 왜 나에게 밀어붙여지는지는 모름
"
"https://news.hada.io/topic?id=20548","추방 전 연락 두절 상태로 구금된 3명의 미국 시민권자 어린이 ICE에 의해 추방","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             추방 전 연락 두절 상태로 구금된 3명의 미국 시민권자 어린이 ICE에 의해 추방

     * 미국 시민권을 가진 세 명의 어린이가 ICE(이민세관단속국)에 의해 부모와 함께 강제 추방되었음
     * 추방 과정에서 법적 접근이 차단되고, 건강 관리가 무시되었음
     * ACLU와 여러 인권 단체들이 ICE의 행동을 비판하며 법적 대응을 준비 중임
     * 이 사건은 ICE의 권력 남용과 인권 침해를 보여주는 사례로 지적됨
     * 관련 단체들은 이러한 행동이 불법적이며 비인간적이라고 주장함
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

ICE가 미국 시민권 어린이 추방

     * 뉴올리언스 ICE 사무소가 두 가족을 추방했으며, 이 중 세 명의 어린이는 미국 시민권자였음
     * 가족들은 법적 접근이 차단된 상태에서 추방되었으며, 한 명의 어린이는 암 치료를 받지 못한 채 추방되었음
     * ICE는 자체 지침을 위반하며, 어린이의 복지와 법적 권리를 무시했음

법적 대응과 인권 단체의 반응

     * ACLU와 여러 인권 단체들이 ICE의 행동을 비판하며 법적 대응을 준비 중임
     * 법적 접근이 차단된 상태에서 가족들은 법적 구제를 받을 수 없었음
     * 인권 단체들은 이러한 행동이 불법적이며 비인간적이라고 주장함

관련 사건 및 법적 대응

     * ACLU는 가족 분리 합의의 조항을 집행하기 위해 법원에 요청했음
     * Mohsen Mahdawi 사건에서는 정치적 발언으로 인해 부당하게 구금된 사례가 논의됨
     * RAICES v. Noem 사건에서는 망명 신청을 완전히 차단하려는 행정 명령에 대한 소송이 진행 중임

        Hacker News 의견

     * 이 대화는 기술적인 세부사항과 정확한 표현에 집착하는 사람들로 가득 차 있는 것 같음. 이것이 더 넓은 대화에 정말 중요한지 의문임
     * 6개월 전에는 대규모 추방을 지지했지만, 그 결과를 보고 나니 무차별적인 추방이 실용적이지도 공정하지도 않다는 것이 분명해졌음
          + 가족들이 감옥에 갇히고, plain-clothes 경찰이 사람들을 매복하고, 공동체가 지속적인 두려움 속에 사는 것을 보았음
          + 이 접근법은 폭력 범죄자를 추적하는 데 필요한 자원을 분산시키고, 법치에 대한 신뢰를 약화시키며, 모든 사람이 점점 더 엄격한 신분증을 소지해야 하는 ""papers-please"" 감시 문화로 국가를 몰아넣음
          + 사소한 위반으로 오랜 이웃들이 끌려가는 것을 보면서, 정책이 변덕스럽게 느껴지고, 그 불공정한 인식은 시민 자유의 광범위한 부식을 가속화함
          + 경계를 안전하게 지키면서도 진정한 위협에 대한 집행에 집중하고, 법을 준수하는 주민들에게 합법적인 지위를 얻을 수 있는 투명한 경로를 제공해야 함
     * 내가 본 연구에 따르면, 여기서의 표현은 비시민권자가 추방되었고 그들이 미국 시민권자 자녀를 함께 데려가기로 선택했다는 것이어야 함. 자녀들 자체가 추방된 것은 아님
          + 이는 법률 대리인과의 연락을 허용하지 않는 것과 같은 다른 문제들을 결코 정당화하지 않음
     * <<분노 삽입>>
          + 흥미로운 HN 토론을 위해... 왜 이런 일이 일어나는지에 대한 정보를 가진 사람이 있는지 궁금함. 대통령으로부터 이런 행동을 하라는 명령이 내려오는 것인지, 이전에는 덜 보도되었지만 항상 존재했던 행동인지, 현재 환경에 의해 더 대담해진 것인지 궁금함
     * 어떤 주도 미국 시민의 특권이나 면책을 제한하는 법을 제정하거나 집행할 수 없으며, 적법한 절차 없이 생명, 자유, 재산을 박탈할 수 없고, 관할권 내의 어떤 사람에게도 법의 평등한 보호를 거부할 수 없음
          + 주는 여기 있는 모든 사람에게 법의 평등한 보호를 제공할 책임이 있음. 주는 ICE에 맞서 싸워야 함
     * 합법적인 미국 시민이 추방되더라도 여전히 미국 세금을 신고해야 할 것임. IRS를 피할 수 없기 때문임
     * 3명의 미성년자는 미국 시민이지만, 그들의 부모는 그렇지 않으며 불법적으로 체류 중이기 때문에 추방될 수 있음
          + 다음과 같은 선택지가 있음:
               o a) 아무도 추방하지 않음, 즉 법을 적용하지 않음
               o b) 부모만 추방함. 미성년 자녀는 어떻게 할 것인가? 부모와 자녀를 다른 나라로 분리하는 것은 잔인할 것임
               o c) 미국 미성년자를 포함한 가족 전체를 추방함. 그들은 미국 시민권을 가지고 있기 때문에 언제든지 미국으로 돌아올 수 있음
     * ""Deports""는 시민을 제거하는 데 잘못된 단어임. ""Expels""가 더 적절할 것임
     * 판사들도 체포하기 시작했음, rip
     * 이 악의 목적은 두려움을 퍼뜨리고, 반응을 유도하며, 홍보를 얻고, 시스템의 약점/충성도를 시험하며, 지지자들이 이러한 잔학 행위를 정상적이고 필요하다고 받아들이도록 조건화하고, 반복적으로 공개적으로 실행됨에 따라 예시로 청사진을 전달하는 것임
          + 메시지는 이것이 우리가 운영하는 방식이므로, 이상하게 보이는 것이 있다면 계획을 신뢰하라는 것임. 우리는 같은 팀임 (눈짓 눈짓)
          + 이민자, 기자, 판사 및 기타 '적'을 향한 국내 테러와 공공 무법이 처벌받지 않는 것을 보게 되어도 놀라지 않을 것임
"
"https://news.hada.io/topic?id=20542","동적 길이 부동소수를 통한 효율적인 GPU 추론을 위한 무손실 LLM 압축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               동적 길이 부동소수를 통한 효율적인 GPU 추론을 위한 무손실 LLM 압축

     * DFloat11은 대형 언어 모델(LLM)의 크기를 30% 줄이면서도 원본 모델과 비트 단위로 동일한 출력을 유지하는 손실 없는 압축 프레임워크임
     * BFloat16 가중치 표현의 낮은 엔트로피를 활용하여 기존 저장 형식의 비효율성을 개선함
     * GPU에서 효율적인 추론을 위해 맞춤형 GPU 커널을 개발하여 빠른 온라인 압축 해제를 지원함
     * Llama-3.1, Qwen-2.5, Gemma-3 등의 최신 모델에서 실험을 통해 30% 모델 크기 감소와 정확한 출력 유지를 검증함
     * 고정된 GPU 메모리 예산으로 비압축 모델보다 5.3-13.17배 긴 컨텍스트 길이를 가능하게 함


70% 크기, 100% 정확도: 효율적인 GPU 추론을 위한 손실 없는 LLM 압축

     * 대형 언어 모델(LLM)의 크기가 급격히 증가하여 자원 제한 하드웨어에서의 효율적인 배포에 큰 도전이 됨
     * **Dynamic-Length Float (DFloat11)**은 LLM의 크기를 30% 줄이면서도 비트 단위로 동일한 출력을 유지하는 손실 없는 압축 프레임워크임
     * BFloat16 가중치 표현의 낮은 엔트로피를 활용하여 기존 저장 형식의 비효율성을 개선함
     * 엔트로피 코딩을 적용하여 빈도에 따라 가중치에 동적 길이 인코딩을 할당하여 정보 최적의 압축을 달성함
     * 효율적인 추론을 위해 맞춤형 GPU 커널을 개발하여 빠른 온라인 압축 해제를 지원함

DFloat11의 설계

     * 메모리 집약적인 조회 테이블(LUT)을 GPU SRAM에 맞는 압축된 LUT로 분해함
     * 경량 보조 변수를 사용하여 스레드 읽기/쓰기 위치를 조정하는 2단계 커널을 개발함
     * 변환기 블록 수준의 압축 해제를 통해 지연 시간을 최소화함

실험 결과

     * Llama-3.1, Qwen-2.5, Gemma-3 등의 최신 모델에서 DFloat11이 30% 모델 크기 감소와 정확한 출력 유지를 검증함
     * 비압축 모델의 일부를 CPU로 오프로드하는 대안과 비교하여 1.9-38.8배 높은 처리량을 달성함
     * 고정된 GPU 메모리 예산으로 비압축 모델보다 5.3-13.17배 긴 컨텍스트 길이를 가능하게 함

DFloat11의 장점

     * Llama-3.1-405B, 810GB 모델을 8x80GB GPU가 장착된 단일 노드에서 손실 없는 추론을 가능하게 함
     * 코드와 모델은 공개 URL에서 제공됨

        Hacker News 의견

     * bfloat16의 높은 동적 범위는 대부분 사용되지 않음
          + 사람들은 0.01 같은 하이퍼파라미터를 선호함
          + 네트워크의 모든 요소를 10^6으로 곱해도 큰 차이가 없음
          + bfloat16 값의 전형적인 엔트로피는 10-12 비트임
          + 부호와 가수 비트는 압축할 수 없는 노이즈임
          + Martin Burtscher의 연구실, LLNL의 fpzip, Facebook의 dietgpu 등에서 손실 없는 압축 기술이 사용됨
          + rANS는 SIMD 명령어 집합에서 Huffman 코딩보다 효율적임
     * 405B-파라미터 모델을 단일 노드에서 실행할 수 있는 가능성
          + 연구소와 스타트업에 큰 기회 제공
     * ML/트랜스포머 모델의 빠른 발전에 감사함
          + llama.cpp가 cublas를 잘 활용하는지 궁금함
     * 무게 형식 전쟁이 끝나면 하드웨어가 이를 지원할 수 있을 것임
          + 최적의 무게 형식에 맞춘 매트릭스 곱셈 하드웨어 필요
     * 실제 에이전트 사용 사례에서 품질, 비용, 성능의 균형을 맞추기 어려움
          + dfloat11이 비용 절감에 도움을 줄 수 있음
     * xmad.ai에서 일함
     * 기술 발전 속도가 빠름
          + 효율성 개선에 흥미를 느낌
     * DFloat11은 미압축 모델을 CPU로 오프로드하는 것보다 1.9-38.8배 높은 처리량을 제공함
          + 고정된 GPU 메모리 예산으로 더 긴 컨텍스트 길이를 제공함
     * LLM이 메모리 대역폭에 의해 제한되는지 궁금함
     * LLM을 사용하여 이미지를 더 압축하는 방법을 발견함
          + 관련 백서를 발표할 예정임
     * ZipNN과 다른지 궁금함
          + 기반이 되는지, 다른지, 더 나은지 이해하기 어려움
     * 이진 대신 삼진을 사용하면 더 높은 압축률을 얻을 수 있다고 생각함
"
"https://news.hada.io/topic?id=20599","100만 개의 체스보드 - 모두가 함께 체스를 두는 웹 실험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   100만 개의 체스보드 - 모두가 함께 체스를 두는 웹 실험

     * 누구나 동시에 조작할 수 있는 백만 개의 체스보드를 제공하는 실험적 웹사이트 One Million Chessboards
     * 한 사람이 말을 움직이면 모든 사용자에게 실시간 반영되며, 턴 없이 자유롭게 보드 간 이동도 가능함
     * 모든 체스판 상태는 64밀리언 uint64로 구성된 2차원 메모리 배열로 저장되며, 서버는 단 하나임
     * Go 언어로 작성된 첫 프로젝트이며, WebSocket 기반의 zstd 압축된 Protobuf 메시지로 동기화가 이루어짐
     * 낙관적 적용 + 롤백 방식의 클라이언트 로직 구현에만 일주일이 소요될 만큼 기술적으로 도전적인 프로젝트였음


One Million Chessboards

     * One Million Chessboards는 백만 개의 체스보드를 제공하고, 누구나 동시에 말을 움직일 수 있음
     * 턴 기반이 아님, 한 사람이 말을 움직이면 모든 사용자에게 즉시 반영됨
     * 보드 간 이동도 자유롭게 가능하며, 전례 없는 체험을 제공함

  배경

     * 이전에 만든 One Million Checkboxes 프로젝트에 이은 실험적 작품으로, 더 큰 규모와 도전 과제를 목표로 함
     * 제작자는 이 프로젝트에 많은 시간을 투자했으며, 재미있게 즐겨주길 바람

  기술적 구현 방식

     * 이 프로젝트는 최근 작업한 것 중 가장 기술적으로 도전적인 작업이었음
     * 주요 기술 개요:
          + 확장성 고려한 설계
          + 단일 서버에서 구동
          + 전체 체스보드를 메모리 내 2차원 uint64 배열로 구성 (총 64밀리언 셀)
          + Go 언어로 작성된 백엔드, 제작자의 첫 Go 프로젝트
          + 단일 writer 스레드 + 다수의 reader 스레드, mutex로 접근 제어
          + 클라이언트는 낙관적 업데이트 적용, 서버로부터 충돌 업데이트가 오면 롤백 처리
          + zstd 압축된 protobuf 메시지를 WebSocket으로 클라이언트에 전송
          + 클라이언트는 50x50 존으로 구분, 인접 존의 움직임만 수신
          + 전역 데이터(통계, 미니맵 등)는 HTTP GET으로 폴링, Cloudflare 캐시 활용

  클라이언트 동작 방식의 핵심

     * 낙관적 적용 + 롤백 방식(optimistic update with rollback) 은 약 1,600줄 코드로 구성, 7일간 전념하여 개발

     “최근 들어 가장 어렵게 싸운 문제였음”

  출시 후 반응

     * 출시 8시간 만에 130만 건 이상의 말 이동 기록, 동시 사용자 약 400명
     * 서버의 부하는 무시할 수준으로 낮음

  현재 통계

     * 온라인 플레이어 수 : 199,276명
     * 총 움직임: 5,238,978회
     * 말의 총 수: 1,490,061,914개
     * 킹의 수: 9,035,389개

   조금만 사이즈를 줄였으면 어땠을까... 누군가를 만날 확률이 너무 적어요 ㅋㅋ ㅠㅠ

   테스트 해봤는데 현재 테이블을 벗어나서 흑 기준으로 아래 체스판으로 넘어갈 수 있는 부분이 흥미롭네요.

        Hacker News 의견

     * 안녕하세요! 제가 만들었음. 블로그 설명이 부족해서 미안함. 아키텍처에 대한 질문이 있으면 기쁘게 답변하겠음. 이 프로젝트를 단일 프로세스로 수천 명의 동시 클라이언트를 처리할 수 있도록 만드는 데 몰두했음. golang이 이 작업에 잘 맞았음
     * 이 게임이 흥미로워졌음. 예를 들어, 사람들이 외곽 가장자리를 두 칸 깊이로 채운 단일 보드가 무적임을 알아냈음. emergent gameplay를 보는 것이 좋음. eieio의 프로젝트의 천재성임. 겉으로는 단순해 보이지만 대규모로 흥미로운 가능성을 발견하게 됨
     * 누군가 왕을 약 40개의 룩으로 막았음. 내가 나이트로 들어갔더니 즉시 왕으로 나를 잡고 다른 룩으로 틈을 막았음. 재미있었음
     * 보드 간 이동은 가능하지만 캡처는 불가능함. 이상한 점은 이동이 투영되지 않는 것이 아님. 예를 들어, 퀸의 파란 선은 보드 경계를 넘어 정확히 가리키지만 다른 보드의 모든 조각에서 멈춤. 규모의 연습으로 잘했음
     * 오류가 발생했음. Uncaught TypeError: null의 속성을 읽을 수 없음
     * 각 보드에 ""턴""이 있을 줄 알았음. 무작위 보드를 선택하고 검은 퀸을 해방시켜 상대가 아무것도 하지 못하는 동안 모든 흰색 조각을 정리할 수 있을 줄은 몰랐음
     * 다른 색으로 플레이하는 치터가 있음. 어제 본 것 같았지만 오늘 확실히 봤음. 복수심에 사용된 것 같음. 검은 요새가 파괴되자마자 가장 가까운 흰색 요새의 조각들이 최악의 위치로 이동했음
     * 이것이 봇 전쟁으로 발전할 것이라고 예측함. 예를 들어, 폰을 전진시키는 코드 조각이 있음
     * 사람들을 쫓아다니는 것이 매우 재미있음. 체스 때문이 아니더라도 즐거움
     * Android 폰에서 Firefox로 잘 작동함. 잘했음
"
"https://news.hada.io/topic?id=20611","크롬은 실제로 매각 가능한 자산인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          크롬은 실제로 매각 가능한 자산인가?

    서론

    1. 미국 법무부는 구글의 검색 독점 문제를 해결하기 위해 Chrome 브라우저의 강제 매각을 고려 중이다.
    2. 그러나 Chrome이 실제로 매각 가능한 '독립 자산'인지에 대한 비즈니스적·기술적 의문이 제기된다.

    본론

    1. Chrome의 사용자 수를 근거로 150~200억 달러의 가치가 있다는 주장이 있으나, 이는 단순 수치에 불과하다.
    2. Chrome은 자체 수익 창출보다는 구글의 다른 서비스(검색, Gmail 등)로의 유입을 통해 간접적으로 가치를 가진다.
    3. 타 브라우저(Safari, Firefox 등)에서는 구글이 TAC 비용을 지불해야 하지만, Chrome은 구글 소유라 비용이 없다.
    4. Google이 Chrome을 매각한다 해도, TAC 계약 구조상 Apple이나 Mozilla는 여전히 Google을 기본 검색으로 선택할 수 있다.
    5. 실질적인 변화 없이 사용자들은 여전히 Google을 선택할 것이며, 규제 효과는 미미할 가능성이 높다.
    6. 기술적으로 Chrome은 대부분 오픈소스(Chromium) 기반이며, 누구든지 유사 브라우저를 제작할 수 있다.
    7. 실제로 Brave, Edge, Vivaldi 등은 이미 Chromium 기반이지만 Chrome만큼의 점유율을 확보하지 못하고 있다.
    8. Chrome의 진정한 가치는 구글 서비스와의 통합, 사용자 기반에 있으며, 독립 제품으로선 상업적 가치가 거의 없다.

    결론

    1. Chrome은 Google이라는 생태계 안에서만 의미 있는 자산이지, 독립 매물로서는 의미가 없다.
    2. 따라서 DOJ의 Chrome 강제 매각 요구는 현실성이 떨어지는 ‘정치적 상징 조치’에 가깝다.

   매각을 한다면 차라리 재단 하나 만들어서 따로 놀아버리면 적어도 웹에 구글이 입김을 가하는 사태는 막을 수 있지 않을까요? 지금만 하더라도 크롬으로 웹 표준을 마음대로 좌지우지하고 있으니까요. 사람들이야 경로의존성이 있으니 크롬이 다른 회사에 팔려간다고 그 브라우저를 쓸 것 같진 않은데요. 다만 브라우저만 사간 집단이 수익화는 어떻게 해야 한다는 걸지를 생각해보면 결국 구글한테 TAC 비용을 받아갈테니 이러나저러나 끌려다니겠군요?!

   구글이 자사 방침 입맛대로 라지만 웹 개혁에 박차를 가할 추진력이 사라지는 것도 누군가에겐 악영향일지도요

   TAC에서 독점이 나오는데 솔루션은 크롬 매각이라는 시점에서 딱 정치쇼 이상의 의미는 없겠죠.

   Internet Explorer도 자체 수익 창출은 없었지만 (Navigator와 달리 심지어 무료) MS 운영체제로 유입하는 간접적 효과가 있었죠. Chromium 기반 브라우저들이 인기가 없다는 것이 오히려 반증이 아닌가요

   아, 그래서 계산이 자극적인건 사실이지만 개인적으로는 인터넷 플랫폼으로서의 독점적 지위의 일부로 충분히 타당한 분석 같습니다. 저만해도 구글 번역때문에 Firefox 와 Chrome 을 병용해야합니다.

   최신 파이어폭스는 한국어도 익명 프라이버시 친화적 번역기능이 지원되더라구요

   예전에는 부가기능을 사용해야 했었는데요

   TAC 계약구조란 무엇인가요?

   TAC(Traffic Acquisition Cost) 기기 제조사나 브라우저 회사에 Google을 기본 검색으로 만들기 위해 지급하는 비용입니다. 검색 쿼리당 수익의 일정 비율을 준다고 생각하면 됩니다.
   이 TAC가 구글이 검색시장에서 독점하고 있다고 보고 법무부가 반독점소송을 걸었고요 최근에 독점이다 판결이 나와서 크롬 매각 얘기가 나오는 중입니다.
"
"https://news.hada.io/topic?id=20537","Google DeepMind, Lyria 2 음악 생성 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Google DeepMind, Lyria 2 음악 생성 모델 공개

     * 딥마인드가 2023년에 공개한 Music AI Sandbox에 새로운 기능을 추가하고 더 많은 사용자에게 확대(미국)
     * Lyria 2 모델을 통해 고품질 음악 생성과 Lyria RealTime을 통한 실시간 인터랙티브 음악 제작 가능
     * Create, Extend, Edit 기능으로 음악 생성, 확장, 편집을 AI 기반으로 지원
     * Lyria RealTime은 실시간으로 음악을 제작, 연주, 제어할 수 있도록 지원하며 장르와 스타일을 자유롭게 믹스 가능함
     * 생성된 모든 음악에는 SynthID 워터마킹 기술을 적용하여 워터마크가 삽입됨


Music AI Sandbox 개요

     * Music AI Sandbox는 뮤지션과 긴밀히 협력하여 개발한 실험적 도구 세트임
     * 새로운 악기 아이디어 생성, 보컬 편곡 제작, 창작 블록 극복 등 창의적 가능성을 열어줌
     * 다양한 장르 실험, 사운드스케이프 탐험, 새로운 음악 스타일 개발을 지원함

주요 기능

     * Create
          + 원하는 사운드(장르, 분위기, 보컬 스타일, 악기 등)를 설명하면 AI가 다양한 음악 샘플을 생성함
          + 가사 입력 및 템포, 키 등 음악적 특성을 지정하여 트랙 제작 가능함
     * Extend
          + 기존 오디오 클립을 업로드하거나 생성하여 그 이후를 AI가 이어서 만들어주는 기능임
          + 아이디어 전개, 작업물 리이매진, 작곡 중단 현상 극복에 도움을 줌
     * Edit
          + 오디오 클립의 분위기, 장르, 스타일을 변환하거나 특정 부분만 섬세하게 수정할 수 있음
          + 텍스트 프롬프트로 변환하거나 프리셋을 이용해 전환, 블렌딩, 전환 구간 삽입 가능함

Lyria 2와 Lyria RealTime

     * Lyria 2는 다양한 장르와 복잡한 구성에서도 미세한 뉘앙스를 포착할 수 있는 고음질 음악 생성 모델임
     * Lyria RealTime은 실시간으로 음악을 제작, 연주, 제어할 수 있도록 지원하며 장르와 스타일을 자유롭게 믹스 가능함
     * 생성된 모든 오디오는 SynthID 기술을 통해 워터마크 처리되어 책임 있는 생성물임을 보장함

창작자와 함께 만드는 AI

     * Music AI Sandbox는 뮤지션과 직접 협력하여 신뢰를 구축하고 창작을 지원하는 도구로 개발됨
     * 아티스트 피드백을 바탕으로 도구를 지속 개선 중이며, 올해 추가 업데이트 예정임
     * 더 많은 뮤지션, 송라이터, 프로듀서들의 참여를 유도하고 있으며, 베타 테스터 신청 가능

        Hacker News 의견

     * AI의 모든 것을 밀어붙이는 가장 큰 문제는 잘못된 방향임
          + AI가 예술과 글쓰기를 대신하는 것이 아니라, 내가 예술과 글쓰기를 할 수 있도록 빨래와 설거지를 대신해주길 바람
     * AI가 음악을 창작하는 것은 David Bowie의 말을 떠올리게 함
          + ""음악 자체가 물이나 전기처럼 될 것임. 이 마지막 몇 년을 활용하라, 이런 일은 다시는 일어나지 않을 것임""
          + AI 생성 음악으로 인해 그의 ""음악이 물이나 전기처럼""이라는 생각이 현실이 될 수 있음
     * 예술에 대한 철학적 논쟁은 종종 피상적임
          + 예술 작품의 가치는 예술가의 마음에서 창조되는가, 아니면 소비자의 마음에서 창조되는가에 대한 논쟁임
          + 대부분의 사람들은 창작자와 소비자의 생각이 조화를 이루는 중간 지점에 진실이 있다고 생각함
          + 온라인 논쟁은 이 이분법을 무시하여 논쟁의 질을 떨어뜨림
     * AI 음악 생성에 대한 관심이 예상보다 낮음
          + AI 모델은 물리적 음악 제작의 즐거움을 빼앗음
          + AI 노래는 의미와 참신함이 부족함
          + AI 이미지와 짧은 비디오 생성은 참신함과 흥미를 유발할 수 있음
          + AI가 현실을 판타지로 융합하는 것을 원하는데 아직 제공되지 않음
     * Suno를 사용하여 특정 주제를 다루는 음악을 제작함
          + Suno로 디스 트랙을 쉽게 생성할 수 있음
          + UI가 제한적이며 더 많은 혁신이 필요함
          + 음악의 분위기나 느낌을 설명하면 원하는 것을 생성해주는 도구가 이상적임
     * AI 음악은 내가 할 수 없었던 것을 할 수 있게 해줌
          + DnD 그룹에서 캐릭터, 재미있는 순간, 배경 이야기에 대한 노래를 만듦
          + 게임 참여도를 높이는 훌륭한 도구임
     * AI 생성 음악 도구로 인해 저품질 음악이 넘쳐날 것임
          + 정직하게 음악을 만드는 사람들을 압도할 것임
          + 다른 직업이나 기술도 비슷한 존재론적 위기를 겪고 있음
     * Lyria 2는 제한된 수의 신뢰할 수 있는 테스터에게만 제공됨
     * AI 회사와 제품의 문제는 콘텐츠 자체를 과대평가함
          + 콘텐츠가 아니라 그것을 만드는 사람과 그 주위의 커뮤니티와 문화가 가치가 있음
          + AI가 더 많은 것을 빠르고 저렴하게 만들 수 있어도 외부 요인이 없으면 가치가 없음
          + 콘텐츠의 가격이나 노력을 $0로 낮춰도 콘텐츠 자체에는 본질적인 가치가 없음
"
"https://news.hada.io/topic?id=20605","아마존, 소비자에게 관세 비용 표시 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         아마존, 소비자에게 관세 비용 표시 계획

        Hacker News 의견

     * ""Amazon이 수입 관세를 메인 사이트에 표시할 생각이 없었다고 발표함""
          + 관세가 포함된 가격을 표시한다면 괜찮음
          + 기업들이 관세를 핑계로 가짜 가격을 제시하고 판매 시점에 숨겨진 수수료를 부과할까 걱정임
          + 몇몇 산업에서는 이미 이런 방식이 사용되고 있음
          + 물리적 상품은 주로 이런 가짜 가격에서 벗어나 있었음
          + 관세가 판매 감소를 초래하면 이러한 방식이 끝날 수 있음
          + 레스토랑이 메뉴 가격을 올리지 않는 이유는 높은 가격이 손님을 멀어지게 하기 때문임
     * 많은 댓글들이 이 아이디어를 나쁘다고 생각하는 이유를 모르겠음
          + 이 아이디어는 훌륭하며 모든 소매업체가 채택해야 함
          + 우리는 이미 판매세와 같은 방식을 사용하고 있음
          + 관세는 소비자에게 판매세와 비슷한 영향을 미치므로 미리 보여주는 것이 합리적임
          + 고객이 관세로 인해 얼마나 더 지불해야 하는지 알 수 있게 해줌
          + Amazon에게 좋은 일임
     * 직접 수입한 상품의 경우 이를 결정할 수 있지만, 다른 경우(예: 중국에서 제조된 도구를 사용하여 미국에서 제조된 제품)에는 최종 제품에 미치는 비용 영향을 파악하기가 매우 복잡할 수 있음
     * 친구들과 이 주제에 대해 이야기했음
          + 중형 제조업체를 운영하는 친구들이 거의 모든 작업을 해외에서 수행함
          + 다른 친구는 관세 때문에 해고됨
          + 관세가 수만 개의 중소기업을 하루아침에 파산시킬 가능성이 있음
          + 이 문제는 잘 생각되지 않은 것 같음
          + Tesla와 같은 대기업은 견딜 수 있지만, 많은 소기업은 버퍼가 없음
          + 제조 불균형과 무역 불균형은 해결해야 할 매우 현실적인 문제임
          + 단순하고 대기업에만 유리한 방식으로 접근하는 것 같음
     * ""이것은 적대적이고 정치적임""
          + 대통령의 발언임
     * 투명성을 보는 것은 드문 일임
          + 내가 사는 나라에는 여러 품목에 대한 관세/수입세와 일반 부가가치세가 있음
          + 소비자로서 볼 수 있는 것은 부가가치세(25%)뿐임
          + 다른 세금은 상점에서 숨겨짐
          + 미국 소비자들이 새로운 수입 관세에 대해 혼란스러워하고 있음
          + 대부분의 상점이 이제 체크아웃 시 이를 적용함
     * AliExpress가 지난주에 체크아웃 시 비용 항목으로 추가함
          + 2021년에 새로운 취미를 시작하고 Amazon과 eBay에서 재료를 구매했음
          + eBay는 중국에서 직접 배송되는 제품에 대해 더 많은 투명성을 제공함
          + Amazon에서 쇼핑할 때 동일한 저품질 중국 제품을 더 비싼 가격에 구매하고 있었음을 깨달음
          + Amazon은 eBay보다 더 나은 고객 서비스와 일관된 반품 정책을 제공함
          + AliExpress를 발견하고 eBay와 Amazon에서 구매한 동일한 제품을 더 저렴한 가격에 구매했음
          + 단점은 더 긴 배송 시간과 (사실상) 반품 불가임
          + 지난주 AliExpress에서 더 많은 재료를 구매하려고 했을 때 관세 비용이 두 배로 증가했음을 발견함
          + 강조하고 싶은 차이점은 비용과 고객 서비스임
          + 동일한 품질의 제품에 대해 취미 비용이 증가하여 실망스러움
          + 800달러 이하 면세 혜택이 사라지는 것도 실망스러움
          + AliExpress는 중국의 eBay와 같다고 생각함
          + 모든 사람이 Alibaba에서 도매 시장을 통해 구매함
          + Amazon 판매자가 관세를 추가한다면, 그들은 Amazon 플랫폼에서 AliExpress 판매자라고 생각함
     * 이것이 모든 수입업자의 총 마진을 경쟁업체에게 공개하지 않을까?
          + 관세는 수입업자의 ""도착 비용""에만 적용됨
          + 관세가 항목화되면(판매자가 만들어낸 숫자가 아닌 경우) 그들의 총 이익 마진과 OEM에 지불하는 가격을 쉽게 계산할 수 있음
          + 어떤 판매자도 이를 원하지 않을 것 같음
     * Amazon의 제3자 판매자의 절반 이상이 중국 회사임
          + 이들은 제품에 대한 관세를 피하기 위해 정기적으로 허위 신고함
          + 미국 경쟁업체는 그렇게 할 수 없음
          + Amazon은 이들을 감시한다고 주장하지만, 현재 이들에게 크게 의존하고 있음
          + 중국 판매자들은 처벌을 받으면 새로운 브랜드를 시작함
"
"https://news.hada.io/topic?id=20592","Rust를 떠나 Unity로: 게임 개발 방향 전환 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Rust를 떠나 Unity로: 게임 개발 방향 전환 이야기

     * Architect of Ruin 개발팀은 초기에는 Bevy 엔진과 Rust로 개발을 시작했지만, 실용적 문제로 인해 Unity와 C#로 전환함
     * Rust와 Bevy의 장점에도 불구하고, 협업, 고수준 추상화 필요성, 빈번한 API 변화, AI 학습 효율성 저하, 모딩 한계 등이 문제가 됨
     * Unity를 시험 삼아 3가지 핵심 기능을 이식했으며, 3일 만에 성공적으로 검증하고 6주 동안 전체 포팅을 완료함
     * 전환 이후 코드량이 줄고, 개발 속도가 향상되었으며, 생태계 툴 활용까지 가능해져 개발 만족도가 크게 높아짐
     * Rust와 Bevy에 대한 애정은 여전히 크지만, 프로젝트에 필요한 요구사항을 충족시키기 위해 현실적인 선택을 했음을 강조함
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Bevy와 Rust에서의 초기 개발

     * Bevy ECS 모델과 Rust 특유의 컴파일 타임 체크를 즐기며 빠른 리팩터링과 안정성을 경험함
     * 타일맵, 스켈레탈 애니메이션, 커스텀 렌더링 파이프라인 등을 Bevy로 직접 구현
     * Bevy 커뮤니티의 열정과 활발한 토론 문화에서 많은 영감을 얻음

Emergent Problems: 예상보다 심각했던 문제들

     * 협업 문제 : Rust 초심자인 팀원에게 Rust의 복잡함이 학습 장벽으로 작용해 기여 속도가 저하됨
     * 고수준 추상화 부족
          + 게임플레이 아이디어를 코드로 빠르게 옮기는 데 어려움이 발생함
          + 빠른 프로토타이핑에 필요한 유연성이 부족했음
     * 빈번한 API 변경 : Bevy의 빠른 발전 속도로 인한 API 불안정성과 업데이트마다 발생하는 회귀 버그에 지침
     * AI 학습 지원 부족 : C#과 Unity는 AI 보조 학습이 잘 되었지만, Rust와 Bevy는 정보가 부족해 생산성 저하를 초래함
     * 모딩 한계 : Rust/Bevy 환경에서 안정적인 스크립팅 및 ABI 호환성 확보가 어렵다고 판단함

전환 결심: Unity 실험

     * Unreal, Unity, Godot, Bevy 유지, 자체 엔진 개발을 비교 분석
     * Unity가 학습성, 생산성, 협업 용이성, 모딩 가능성 측면에서 가장 높은 점수를 받음

  10% 실험

     * 타일맵, 캐릭터(Spine), UI 구축 3개 핵심 작업을 3주 이내 테스트
     * 결과적으로 3일 만에 3개 과제를 완료, 전환을 결정함

포팅 과정과 결과

     * 6주간 모든 시스템과 콘텐츠를 Unity로 재구현
     * 코드량 감소, 보일러플레이트 제거, 개발 속도 증가를 경험함
     * AI 학습 지원 향상 및 Unity 생태계 툴(AStar Pathfinding 등) 적극 활용 가능

이후의 삶

     * Architect of Ruin은 현재 Unity 기반으로 개발 중이며, 빠른 아이디어 반영과 높은 생산성을 유지하고 있음
     * Rust와 Bevy에 대한 깊은 존경은 변함 없지만, 프로젝트에 적합한 선택이 필요했음을 강조함
     * 향후 Unity 기반 구현 세부사항과 포팅 경험을 추가 공유할 예정임

결론

     * 시작 시 공정한 옵션 평가 실패를 인정함
     * 시간을 투자해 방향을 바꿨지만, 결과적으로 더 많은 시간을 벌었다고 평가
     * 개발 비전 실현을 위해 본능을 넘어선 현실적 판단이 중요했음을 깨달음

   Rust를 스크립트 언어로 쓰는 gui엔진이 아마 있을 것 같은데, 프로덕션 레벨에서 쓰는 게 있는지는 모르겠네요. Rust로 게임 만드는 것에 대해 종종 실패 사례? 가 올라오긴 하는데, 음... 실패 사례가 올라오는 건 그러려니 싶지만, 성공사례 얘기가 잘 안들리는 것 같아서 좀 그렇네요. 잘 쓰고 있는 분들도 어딘가는 있을텐데

   반대로 잘 쓰면 다 이정도는 쓰고 있겠지 싶어서 안올리는 거 아닐까요?

        Hacker News 의견

     * Rust로 게임 프로젝트를 진행하다 실패한 사례가 또 발생함. 이는 안타까운 일임
          + Rust로 메타버스 클라이언트를 거의 5년 동안 개발 중인데, 너무 오래 걸리고 있음
          + 다른 사람은 C#/Unity로 비슷한 프로젝트를 2년 이내에 진행함
          + Rust 3D 게임 개발 사용자 기반이 매우 작음
          + Rust로 AAA 타이틀을 개발한 사례가 없고, 성능 문제를 해결한 사람도 없음
          + 사용 중인 스택은 Rend3/Egui/Winit/Wgpu/Vulkan인데, Vulkan을 제외하고는 버그가 많음
          + 이벤트 루프를 소유하려는 다양한 크레이트가 너무 많음
          + 크레이트가 몇 달마다 리팩토링되어 API가 깨지는 경우가 많음
          + Rust에서 역참조가 어려움
          + Rust는 단일 소유자와 역참조를 위한 일관된 방법이 필요함
          + Rust의 트레잇은 객체가 아니며, 객체 계층 구조를 구성하는 데 적합하지 않음
     * 상업용 게임 엔진이 게임 개발을 장악한 이유에 대한 좋은 교훈처럼 들림
          + 게임을 만들기 위해 해야 할 일이 많지만, 대부분은 이미 해결된 문제임
     * Rust를 C++의 대체로 좋아하지만, 대부분의 프로젝트에 C++이 적합하지 않다고 생각함
          + 많은 사람들이 Rust를 더 효율적이라고 생각해서 선택하는 것 같음
     * Rust 게임 개발은 개척지 개발과 같으며, 많은 작업이 필요함
          + Rust는 아직 준비가 안 되었음
     * Rust를 좋아하지만, 빠른 반복이 어려움
          + Bevy를 사용해봤지만 Godot로 돌아감
     * 프로젝트에서 Rust 대신 Go로 전환했으며, 반복 속도가 더 빨라짐
          + 코드가 더 취약하지만, 프로젝트의 성격상 올바른 선택이라고 생각함
     * Rust 생태계의 높은 변동성은 예상치 못한 단점임
          + 크레이트가 자주 버려지며, 이는 Rust를 주로 사용하고 싶어하는 사람들 때문이라고 생각함
     * 한 개발자는 C로 게임 엔진을 만들고, Lua로 게임을 개발함
          + 게임 엔진과 게임의 명확한 분리가 있음
          + 'Sapiens'라는 게임이 Steam에서 성공적으로 출시됨
     * Rust로 작업하는 것은 거의 항상 더 어려움
          + 이는 개인적인 경험에 기반한 의견임
     * 프로젝트의 목표는 코딩을 하지 않는 형제가 기여할 수 있도록 하는 것이었음
          + 최신 버전으로 계속 업그레이드해야 한다고 느낌
          + Unity를 사용하는 스튜디오는 특정 버그가 수정되지 않는 한 버전을 자주 업그레이드하지 않음
"
"https://news.hada.io/topic?id=20563","CSS Zen Garden 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          CSS Zen Garden 프로젝트

     * CSS Zen Garden은 CSS 기반 디자인의 아름다움을 보여주는 프로젝트임
     * HTML은 동일하게 유지되며, 외부 CSS 파일만 변경하여 다양한 디자인을 경험할 수 있음
     * 참여자들은 CSS를 통해 웹 디자인의 힘을 보여주고, 영감을 주며, 학습 자료로 활용할 수 있음
     * CSS 1 & 2를 주로 사용하며, CSS 3 & 4는 제한적으로 사용해야 함
     * 제출된 디자인은 다양한 브라우저에서 일관된 결과를 보여야 하며, 최소한 IE9+ 및 최신 브라우저에서 작동해야 함


CSS Zen Garden의 중요성

     * CSS Zen Garden은 CSS의 힘을 보여주고, 디자이너와 개발자에게 영감을 주기 위한 프로젝트임
     * HTML은 동일하게 유지되며, 외부 CSS 파일만 변경하여 다양한 디자인을 경험할 수 있음
     * 이 프로젝트는 CSS의 가능성을 보여주고, 웹 디자인의 아름다움을 강조함

참여 방법

     * 강력한 시각적 디자인과 CSS 기술이 필요하며, 초보자도 예제 파일을 통해 시작할 수 있음
     * 스타일 시트를 자유롭게 수정할 수 있지만, HTML은 변경할 수 없음
     * 완성된 작품은 웹 서버에 업로드하고 링크를 제출해야 함

참여의 이점

     * 인지도 상승, 영감 제공, CSS의 놀라운 가능성을 보여주는 자료로 활용 가능함
     * 웹 디자이너와 개발자에게 영감을 주고, 학습 자료로 활용할 수 있는 사이트임

요구 사항

     * 주로 CSS 1 & 2를 사용하며, CSS 3 & 4는 제한적으로 사용해야 함
     * 다양한 브라우저에서 일관된 결과를 보여야 하며, 최소한 IE9+ 및 최신 브라우저에서 작동해야 함
     * 독창적인 작품을 제출해야 하며, 저작권을 존중해야 함

저작권 및 라이선스

     * 제출된 그래픽은 저작권을 유지하며, CSS는 Creative Commons 라이선스로 제공해야 함
     * 다른 사람들이 학습할 수 있도록 CSS를 공유해야 함

        Hacker News 의견

     * CSS가 등장하기 전, 웹 개발자들은 테이블 요소를 남용하여 그리드를 만들고 이미지를 잘라 테이블에 배치하는 방식으로 레이아웃을 구현했음
          + CSS에 대한 반발이 있었고, 많은 개발자들이 CSS를 배우기를 거부했음
          + CSS는 ""지루하고 박스 같은"" 디자인만 가능하다는 오해가 있었음
          + Dave Shea가 CSS Zen Garden을 통해 CSS의 가능성을 보여주며 이러한 오해를 불식시켰음
          + CSS로 멋진 디자인을 만들 수 있음을 증명하여 논쟁을 종결시켰음
     * 이 사이트는 오래되었지만 긍정적인 의미에서 좋았음
          + 2000년대 초, Microsoft ASP.NET에서 벗어나 Linux에서 앱을 개발하게 만든 계기가 되었음
          + Alex Russell이 Dojo JS를 통해 새로운 정보를 제공하며 기술 뉴스의 중요성을 일깨워줌
          + Web.py, HTML, JS, CSS로 구성된 툴킷을 사용했으며, 이후 jQuery, Backbone, Underscore, React, TS 등이 등장했음
     * CSS Zen Garden의 주요 포인트는 의미 있는 HTML을 최대한 활용하여 프레젠테이션과 콘텐츠를 완전히 독립적으로 운영할 수 있다는 것이었음
          + CSS의 한계 내에서 디자인을 구현할 수 있었음
          + 스타일을 변경하려면 DOM을 직접 수정해야 하는 경우가 많았음
          + HTML과 Javascript 수준에서 프레젠테이션과 콘텐츠 구조 결정을 혼합해야 했음
     * Zen Garden과 Eric Meyer를 통해 CSS를 배운 사람으로서, Tailwind 같은 현대 CSS 도구는 반패턴처럼 보임
     * Tailwind와 CSS-in-JS의 암흑 시대에 빛을 비추는 존재였음
          + 20년 전 CSS Zen Garden의 중요성을 깨닫기 어려움
     * 오래된 것이지만 좋은 것임
          + 저소득 고등학생들에게 웹 디자인을 가르치는 데 기초가 되었음
          + 학생들이 웹 디자인 대회에서 CSS를 설명해야 했고, 많은 학생들이 데스크탑 컴퓨터를 수상했음
          + Dave Shea, Eric Meyer, Andy Budd 등에게 질문을 보내 도움을 받았음
     * 두 가지 디자인을 제출했으며, 여전히 CSS 재사용 요청을 받음
     * 이 사이트는 과거에 큰 영향을 미쳤음
          + 동일한 HTML 콘텐츠에 CSS와 이미지를 제출할 수 있었음
          + 인상 깊었던 디자인 예시들이 있었음
     * 과거의 추억... CSS Zen Garden을 사랑했지만, 웹사이트의 주요 목적이 문서를 제공하는 것이었던 시절의 철학이었음
          + 미디어가 풍부한 세계가 이 비전을 뒤로 하게 되었음
     * CSS Zen Garden을 HN에서 보게 되어 기쁨
          + Tailwind와 같은 CSS ""프레임워크""에 대한 불만이 있음
          + Tailwind는 CSS의 작동 방식을 배우지 않고도 ""충분히 괜찮은"" 결과를 얻을 수 있게 해줌
          + HTML이 CSS 클래스가 콘텐츠보다 많은 상태가 됨
          + 깊이와 숙달이 선택 사항으로 여겨지는 경향이 있음
"
"https://news.hada.io/topic?id=20594","지옥 같은 부업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                지옥 같은 부업

     * 이 글은 필자가 첫 스타트업에서 착취당한 경험을 공유하며, 이를 통해 얻은 교훈을 설명함
     * 필자는 Fixr라는 자동차 관련 스타트업에서 CTO로 일하며 많은 어려움을 겪었음
     * Fixr는 자동차 수리 및 서비스 연결 플랫폼으로, 필자는 앱 개발과 시장 출시를 주도했음
     * 그러나 공동 창업자 간의 갈등과 비효율적인 운영으로 인해 프로젝트는 실패로 끝났음
     * 이 경험을 통해 필자는 새로운 기회를 얻고, Carbn이라는 새로운 프로젝트에 참여하게 되었음


첫 스타트업에서 착취당한 경험

    11개월의 고통

     * 필자는 2019년에 Fixr라는 스타트업에 합류하게 되었음
     * Fixr는 자동차 수리 및 서비스를 제공하는 플랫폼으로, 필자는 CTO로서 앱 개발을 주도했음
     * 그러나 공동 창업자 간의 갈등과 비효율적인 운영으로 인해 프로젝트는 실패로 끝났음

    Fixr의 시작

     * Fixr는 자동차 수리 및 서비스를 제공하는 플랫폼으로, 필자는 CTO로서 앱 개발을 주도했음
     * 필자는 앱의 버그를 수정하고, 새로운 기능을 추가하는 데 집중했음
     * 그러나 공동 창업자 간의 갈등과 비효율적인 운영으로 인해 프로젝트는 실패로 끝났음

    앱 개발과 출시

     * 필자는 앱의 버그를 수정하고, 새로운 기능을 추가하는 데 집중했음
     * 그러나 공동 창업자 간의 갈등과 비효율적인 운영으로 인해 프로젝트는 실패로 끝났음
     * 필자는 새로운 기회를 얻고, Carbn이라는 새로운 프로젝트에 참여하게 되었음

    실패의 원인

     * 공동 창업자 간의 갈등과 비효율적인 운영으로 인해 프로젝트는 실패로 끝났음
     * 필자는 새로운 기회를 얻고, Carbn이라는 새로운 프로젝트에 참여하게 되었음

    얻은 교훈

     * 필자는 Fixr에서의 경험을 통해 많은 것을 배웠으며, 이를 통해 새로운 기회를 얻었음
     * Carbn이라는 새로운 프로젝트에 참여하게 되었으며, 이는 Fixr에서의 경험 덕분에 가능했음

주의해야 할 10가지 경고 신호

    1. 오랜 시간 동안 출시되지 않은 스타트업은 신중히 고려해야 함
    2. 주식 지분이 대출에 연계되어 있다면 주의해야 함
    3. 공동 창업자 간의 정치적 갈등이 있는 경우 주의해야 함
    4. 스타트업에서의 역할이 명확하지 않다면 주의해야 함
    5. 여러 플랫폼에서 네이티브 앱을 동시에 개발하는 것은 비효율적임
    6. 스타트업 피치 대회는 시간 낭비일 수 있음
    7. 공동 창업자와의 모든 소통이 원격으로 이루어지는 경우 주의해야 함
    8. 마켓플레이스 스타트업은 두 시장을 동시에 구축해야 하므로 어려움
    9. VC가 ""트랙션이 있을 때 다시 연락하라""고 말할 때 주의해야 함
   10. 회사가 당신을 충분히 검증하지 않는다면 주의해야 함

        Hacker News 의견

     * 비기술 창업자가 프로젝트 아웃소싱에 실패한 것은 큰 경고 신호임. 제품을 현실화할 방법을 아는 사람이 없고, 당신이 100%의 일을 한다면 100%의 지분을 받을 자격이 있음. ""아이디어를 가졌다""는 것은 지분 가치가 없음
          + 아이디어가 훌륭하다고 생각했다면, 당신에게는 명백한 기회가 있었음. 그곳의 사람들은 제품을 만들지 못하지만 당신은 할 수 있음. 아이디어가 나쁘다면, 지분으로 보상받는 것은 가치 없는 것으로 보상받는 것임
          + 이런 조직과 거래하는 것이 합리적인 유일한 상황은 많은 돈을 지불받는 경우임. 지불이 한 번이라도 늦어지면, 지불받기 전까지 작업을 중단해야 함
     * 많은 사람들처럼, 나도 젊었을 때 이런 경험을 했음. 명백히 부적합한 제품, 최저 수준의 계약자들이 만든 초기 프로토타입, 코딩할 수 없는 공동 창업자, 급여 없음, 사용자 없음
          + 운 좋게도, 나는 몇 달만 일했고, 그렇게 열심히 일하지 않았음
          + 하지만 이 인용문이 마음에 와 닿음: ""스타트업을 하고 있었음. 실행하고 있었고, 처음으로 결과로부터 보호받지 못했음. 위대한 일을 이루지는 못했지만, 무언가를 만들었음""
     * 현재 해외에서 앱을 개발한 스타트업에 있음. 팁: 하지 말 것. 끝없는 헛소리, 그들로부터 무엇이든 얻으려는 고통스러운 과정. 우리는 이 사람의 앱과 같은 것을 얻었음, 고정된 화면 비율 등
          + 또 다른 스타트업이 앱을 제품으로 가지고 있고, 그 앱을 작성할 현지 개발자를 찾지 못한다면, 나는 도망갈 것임. 핵심 제품을 왜 아웃소싱하는가?
     * 이 기사는 한 남자가 나에게 그의 스타트업 아이디어를 개발해달라고 제안했던 때를 떠올리게 함. 그는 아이디어가 너무 훌륭해서 내가 당연히 훔칠 것이라며 NDA에 서명하라고 했음, 나는 거절했음
          + 그래서 그가 말해준 것은 ""다음 Twitter""라는 것뿐이었고, 내가 알아낸 것은 그가 대부분의 지분을 유지하고 내가 모든 일을 하며, 그는 높은 곳에서 아이디어를 던질 것이라는 것임
          + 나는 그것을 거절했지만, 빨간 깃발이 매우 명백했기 때문임. 더 교묘하게 착취적인 상황에 빠질 수도 있었음
     * 아웃소싱 사업을 운영한 경험으로 확인할 수 있음 - 개발을 위해 돈을 지불하는 사람들의 99%는 자신이 무엇을 하고 있는지, 어떻게 판매할지 모름. 아웃소싱 팀이 경쟁자보다 3배 더 나은 제품을 만들지 않는 한 실패할 운명임
          + 성공 사례는 항상 매우 적극적인 고객이 포함됨. 그들은 팀의 일원이 되어 개발자들이 좋은 제품을 만들도록 도움. 또한 항상 더 많은 시간과 돈이 소요됨. 고정 비용 범위 계약으로 시장성 있는 제품을 만들 수 있다고 생각한다면 다시 생각해야 함
     * 이 이야기에서 놓친 것은 Jacob이 유럽/영국에 있다는 것 때문임. 내 경험상, 이쪽에서의 출발 팀의 절대적인 무능력 수준은 더 흔함
          + 물론 영국과 유럽에서 훌륭한 스타트업들이 출범했음. Spotify, Deepmind, Raspberry Pi가 떠오름. 하지만 투자 측면에서 항상 매우 회의적임. 결국 캡 테이블이 더 나쁘고, 투자자들은 미국이나 아시아와는 매우 다른 역할을 가지고 있으며, 실리콘밸리나 싱가포르, 상하이와 같은 스타트업 인프라가 훨씬 적어 매우 다른 세계임. 아이러니하게도, 이는 자가 증식적임 - 투자자들은 스타트업이 형편없는 사업이라고 생각하고, 더 많은 비용을 청구하며, 고품질 창업자들은 더 나은 목초지를 찾아 떠남 - 반복됨
     * 경고 이야기라기보다는, 나는 이것이 모든 사람이 겪어야 할 종류의 모험이라고 생각함. 아무것도 제대로 되지 않는 실패한 스타트업에서 실제 세계에 대해 많은 것을 배움 (적어도 나는 그랬음). 20대 초반은 위험이 적은 시기임. 나중에 웃을 수 있는 많은 고통스러운 기억들. 강력히 추천함
     * 추가적인 경고 신호 - 회사가 ""SEIS 등록""을 견인력의 한 점으로 나열한다면, 한 마일 도망가야 함. 모든 신규 등록된 영국 회사는 ""내 회사는 위험하며, VC로부터 자금을 조달할 의도가 있다""는 양식을 작성하는 데 60분을 소비하여 이를 얻을 수 있음
     * 공동 창업자가 무엇을 하고 있는지 확신이 없다면, git 본능을 믿으라는 조언이 좋음. HEAD를 잃지 않도록 해야 함
     * 또 다른 경고 신호: 팬텀 스톡. 몇 가지를 발명하고 제품에 구현했지만, CEO와 CFO가 회사를 팔아버림. 결국 아무것도 얻지 못했음
"
"https://news.hada.io/topic?id=20551","모든 전립선 문제의 종말?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             모든 전립선 문제의 종말?

     * 전립선 질환은 매우 흔하고 심각한 문제로 미국에서는 전립선암이 40명 중 1명을 사망에 이르게 함
     * 양성 전립선 비대증(BPH)은 60세 이상의 남성 대부분에게 영향을 미치며, 배뇨 곤란을 초래하고 악성으로 변할 위험이 있음
     * 전립선이 성병에 대한 ""게이트키퍼"" 역할을 한다는 이론이 있지만, 이는 충분한 설명이 되지 않음. 전립선의 위치는 타액선과 비슷하며, 성병과의 상관관계는 크지 않음
     * 이스라엘의 의사 Gat과 Goren 박사는 전립선 질환과 정계정맥류의 기계적 원인을 제시함
     * 나이가 들면서 정맥의 일방향 밸브가 기능을 잃고, 혈액이 잘못된 방향으로 흐르며, 이는 전립선에 높은 농도의 테스토스테론을 공급하여 전립선 성장을 촉진함. 이는 BPH와 전립선암의 원인이 됨.
     * 즉 BPH가 정맥의 기능 부전으로 인해 발생한다고 주장하며, 이를 간단한 수술로 정맥을 파괴하여, 혈액이 다른 경로로 흐르도록 하여 전립선에 대한 과도한 테스토스테론 공급을 막아 치료할 수 있다고 주장함
     * 이 이론은 간단하고 검증도 일부 되었으나, 아직 추가 연구가 필요함


전립선 문제의 심각성

     * 미국에서는 40명 중 1명이 전립선암으로 사망함
     * BPH(양성 전립선 비대증) 은 60세 이상 남성 대부분에게 나타남
     * 배뇨 곤란을 일으키며, 악성 변이 위험도 존재함
     * 여성의 유방암과 비교해 전립선은 대사적으로 활동적이지 않으며, 이상 발생 설명이 더 어려움

기존 감염설과 문제점

     * 전립선이 성병 감염의 게이트키퍼 역할을 한다는 가설이 있음
     * 하지만 전립선은 단순히 분비만 하고 걸러내지는 않음
     * 성병과 전립선암의 상관관계는 크지 않음 (오즈비 약 1~2배 수준)
     * 주요 원인으로 보기는 부족함

Gat & Goren의 새로운 이론 소개

     * 정계정맥 기능부전이 BPH와 전립선암, 정계정맥류의 원인이라는 주장
     * 건강한 남성에서는 정계정맥에 일방향 밸브가 있어 역류를 막음
     * 밸브가 망가지면 저산소 혈액이 고환을 손상하고, 역류가 전립선으로 이어짐
     * 고환 혈액은 SHBG에 결합되지 않은 자유 테스토스테론 농도가 높아 전립선 세포 과증식을 일으킴

역류 기전과 수술 방법

     * 고환 혈액이 전립선으로 역류해 수백 배 농도의 자유 테스토스테론을 투여함
     * 수술은 정계정맥 색전술로 역류를 막음
          + 카테터를 삽입해 색전 물질을 주입하여 정계정맥을 막음
          + 양쪽 정계정맥과 연결 혈관까지 모두 치료해야 효과적임
     * 기존의 정계정맥 수술보다 훨씬 철저한 방법을 사용함

역류 검증과 추가 연구

     * 정계정맥 역류는 기존 의학에서도 인정된 현상임
     * Gat & Goren은 플루오로스코피로 역류를 직접 확인했지만 완전한 증거는 부족함
     * 최근 독일 연구팀이 소규모 재현 연구를 진행해 일부 결과를 뒷받침함
     * Alyamani 연구에서는 전립선 혈관 내 테스토스테론 농도 증가를 발견함
     * 호르몬 분비 주기성으로 인해 관측이 어려울 수 있음

이론의 한계와 추가 고려사항

     * 수술로 문제를 줄일 수는 있으나, 완벽한 복원은 불가능함
     * 정계정맥 색전술이 아니라 밸브 복원이 이상적이나, 현재 기술로는 불가능함
     * 수술 효과는 영구적이지 않고 시간이 지나면 신생 우회정맥으로 인해 재발 가능성 존재함
     * 재시술로 문제를 다시 해결할 수 있을 것으로 예상되나 실질적 난이도는 미지수임

사회적 장벽

     * 의학계 무관심과 보험, 규제 문제로 확산이 어려움
     * 의료 소송 리스크와 실험적 치료에 대한 보험 미적용도 장애물임
     * 수술이 비용 대비 효과적일 수 있으나 시스템 전반의 관심 부족
     * Gat & Goren 클리닉이나 독일 연구소 외에 시술 가능한 곳이 많지 않음

결론 및 전망

     * 간단하고 합리적인 이론이지만 현재로서는 널리 확산되지 못한 상태임
     * 의료계, 과학계의 적극적인 관심과 추가 연구가 필요함
     * 대중적 운동을 기대하기는 어렵지만, 일부 환자들에게는 큰 희망이 될 수 있음

        Hacker News 의견

     * 2월에 TMCi에서 열린 점심 세미나에 참석했음. TMCi는 휴스턴의 Texas Medical Center에 있는 스타트업 엑셀러레이터임
          + Vivifi Medical이라는 스타트업이 정맥 기능 부전 원리에 기반한 임상 시험을 진행 중임
          + 엘살바도르에서 10명의 남성을 대상으로 임상 시험을 진행 중이며, 몇 달 내에 BPH가 역전된다고 주장함
          + 자체 개발한 최소 침습 도구를 사용하여 나이와 중력으로 인해 역류하는 수직 혈관을 절단하고 기존의 수평 혈관에 연결함
          + 자문 위원회에는 혁신적인 심장 외과의사 Dr. Billy Cohn이 있으며, 그는 BiVACOR Total Artificial Heart를 개발하는 팀에 속해 있음
          + Vivifi는 2028년 FDA 승인을 목표로 함
          + 개인적으로 BPH 치료를 위해 이 절차를 기다리고 있음
          + 스타트업의 TAM은 약 5억 명의 남성임
          + 3년 전 Urolift 절차를 받았고, Medicare 혜택 명세서에 약 $15K가 청구되었음
          + Vivifi의 절차 비용은 몇 천 달러에 불과하지만 최종 솔루션이 될 가능성이 있음
          + 현재 Urolift는 병원에서 며칠을 보내야 하고 거의 항상 역행 사정을 유발하는 TURP보다 덜 방해적임
     * 이론은 주로 기계적임
          + 개별 진단보다 인구 통계(RCT)에 의존하는 것은 우리가 의학에 대해 얼마나 적게 알고 있는지를 보여줌
          + 자동차 수리공은 증상 체크리스트에 의존하지 않고 실제로 부품을 검사하여 문제를 식별함
          + 인간의 몸에서는 더 어렵지만, 진단이 저렴해지고 민주화되면 개인 맞춤형 의학이 표준이 될 수 있음
     * 이 장애를 스크리닝하는 것은 간단함
          + 열화상 카메라를 사용하여 앉거나 서 있을 때와 누워 있을 때의 고환 온도를 비교함
          + 간단하고 저렴한 도구로 얼마나 많은 문제를 스크리닝할 수 있을지 궁금함
          + 일부 저울은 이미 발의 혈류 감소를 감지할 수 있음
     * 이러한 문제는 진화적 맹점을 반영함
          + 생식 연령 이후 선택 압력이 감소하여 전립선 기능 장애와 같은 결함이 지속됨
          + 늦게 발병하는 신경 질환이 여전히 흔한 이유임
     * Gat과 Gornish의 연구는 전립선 비대에 대한 훌륭한 설명을 제공함
          + 2014년 Nimptsch 등의 대규모 연구는 비타민 K2 섭취와 전립선암 사이의 강한 역상관 관계를 발견함
          + 비타민 K2는 동맥과 정맥 벽의 엘라스틴에서 칼슘을 제거하여 경직을 줄임
          + Donaldson은 K2가 정맥 흐름을 개선하여 전립선으로 과도한 테스토스테론이 전달되는 것을 줄일 수 있다고 가정함
          + 풀을 먹인 버터를 더 먹거나 K2 보충제를 섭취할 것을 권장함
          + 최악의 경우 뼈 강도를 개선할 수 있으며, 최선의 경우 전립선암을 예방할 수 있음
     * 여성의 경우 유방암의 사망률이 비슷하지만, 유방은 더 크고 대사적으로 더 활발함
          + 전립선은 비교적 작은 출력을 가짐
          + 남성은 청소년기부터 매일 여러 번 전립선을 사용함
     * 단순화된 스케치와 이유를 바탕으로 고환과 전립선을 연결하는 두 개의 작은 정맥 부분을 경화시키는 것이 더 합리적이라고 생각함
          + 왜 이 옵션이 제안되지 않는지 궁금함
     * 온도, 맥박/맥박 산소 및 방향 모니터링이 가능한 스마트폰 앱과 연결된 운동복은 어디에 있는지 궁금함
     * 건강한 근육 운동이 중력에 대항하는 정맥 혈류에 중요함
          + 신체 활동을 유지하고 골반저 운동을 루틴에 포함시키고 횡격막을 활용한 올바른 복식 호흡이 최선의 예방책임
     * 좋은 기사이지만, 맨 아래에 ""© Norman Yarvin""이 있는 것을 보는 것이 이상함
          + Curtis Yarvin의 형제가 작성한 것임
          + 이에 대한 의견은 없지만, 이상하게 느껴짐
"
"https://news.hada.io/topic?id=20516","GPLv2 라이선스 공지에 있는 주소로 편지를 썼더니 GPLv3 라이선스를 받았습니다 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GPLv2 라이선스 공지에 있는 주소로 편지를 썼더니 GPLv3 라이선스를 받았습니다 (2022)

     * GNU General Public License (GPL) 는 오픈 소스 소프트웨어의 자유와 정신을 잘 반영하는 라이선스임
     * 작성자는 GPLv2 라이선스 고지의 우편 주소로 실제 편지를 보내면 어떤 일이 벌어지는지 실험함
          + GPLv2는 1991년에 발표되어 물리적 주소가 포함된 반면, GPLv3는 2007년에 발표되어 URL을 포함
     * 답장을 받는 데 성공했지만, 요청한 GPLv2가 아닌 GPLv3 문서가 도착함
     * 저자는 이 경험이 정확한 요청의 중요성과 함께, 우편 커뮤니케이션의 현실적인 한계를 상기시켜줬다고 말함
     * 실험 전체가 라이선스의 역사적 맥락과 물리적 소통 수단의 유물적 매력을 보여주는 유쾌한 일화로 마무리


GPL 라이선스 고지 속 주소는 실제로 작동할까?

     * 작성자는 다양한 오픈소스 라이선스를 읽는 것을 즐기며, 특히 GPL 라이선스의 철학과 표현 방식에 감명을 받아옴
     * GPLv2 고지문에는 다음과 같은 구절이 포함됨:
이 프로그램과 함께 GNU General Public License 사본을 받았어야 합니다. 받지 못했다면 다음 주소로 요청하십시오:
Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

     * 이 물리적 주소가 과연 지금도 유효한지 궁금해져 실제로 편지를 보내보기로 결정함

왜 물리적 주소가 포함되어 있을까?

     * Stack Exchange에서 얻은 답변에 따르면, GPLv2가 1991년에 발표된 당시는 대부분이 오프라인 환경
     * 소프트웨어는 디스크나 테이프 등 물리 매체를 통해 배포되었고, 인터넷이 일반화되지 않았기 때문에 우편을 통한 커뮤니케이션이 필수
     * 반면 GPLv3는 2007년 발표되어, 고지문에 웹 URL이 포함되어 있음

편지 보내기 준비 과정

     * 답장을 받기 위해 반송용 봉투(self-addressed envelope) 와 국제 우표 혹은 회신 쿠폰이 필요함
     * 영국에서는 국제 회신 쿠폰을 2011년에 폐지했기 때문에, Ebay에서 미국 우표를 구매함
     * 우표 검색 과정에서 우표 수집 용어들(FDC, MNH 등)을 접하며 잠깐 필라텔리(우표 수집)의 세계에 발을 디딤
     * 구매한 우표는 ‘African Daisy global forever vert pair’ 라는 이름의 동그란 우표였으며, 약간 신뢰는 안 갔지만 사용함

실제로 편지를 보내고 받은 것

     * 영국 우표로 편지를 보낸 후 약 5주 뒤에 응답을 수령
     * 봉투에는 우표 사용 흔적(소인, cancellation marks) 이 있었고, 필라텔리 관점에서 흥미로운 요소였음
     * 동봉된 문서는 양면 인쇄된 A4보다 작은 5장의 용지였으며, 미국 규격(21.5cm x 27.9cm)의 Letter size였음

문제: GPLv2를 요청했지만 받은 건 GPLv3

     * 작성자는 원래 GPLv2를 염두에 두고 요청했지만, 편지 안에 명시하지 않아 GPLv3가 발송됨
     * 실제로 고지문 안에도 버전 정보가 명시되어 있지 않기 때문에, 받는 사람이 버전을 오해했을 가능성 있음
     * 다시 편지를 써서 정확히 요청할 수도 있었지만, 과정이 번거로워 그대로 만족하기로 함
     * 작성자는 이 모든 과정이 복잡했지만 흥미로운 경험이었으며, 다시 우편을 쓰기 전엔 휴식이 필요하다고 유쾌하게 마무리함

   그래도 편지라니, 낭만적이네

        Hacker News 의견

     * 이 이야기가 재미있는 이유는 내가 그 당시 운영 보조(사무 비서)였고, 독특한 우편물 때문에 이 편지를 기억하고 있음. 적어도 그는 응답을 받았음. 주소가 대부분 바뀌지 않았음을 의미함
          + 몇 년 전, 임베디드 리눅스 프로젝트에서 일했음. 첫 ""알파"" 릴리스 때, 한 테스터가 라이선스 계약서를 꼼꼼히 읽고 GPL 소스를 받기 위한 주소를 찾아 편지를 보냈지만, 주소가 잘못되어 반송되었음. 변호사들이 이 사실을 알게 되어 전체 리콜을 강제했고, 기술자들이 각 기계에 업데이트를 설치하러 가야 했음. 변호사들은 법정에서 선의의 노력을 보여주고자 함
          + 중요한 교훈은 자동화된 테스트 프로세스가 GPL 준수 주소로 편지를 보내는지 확인하지 않으면 수동 테스터가 필요하다는 것임. 모든 것을 테스트하지 않을 뿐만 아니라 모든 것을 생각하지 못했기 때문에 사람이 ""재미있는"" 것을 찾는 것이 필요함
     * 편지 보내는 행위가 저자에게 얼마나 낯선지 흥미로움. 나는 자주 보내지 않지만, 필요하다면 별로 생각하지 않을 것임. 젊은 사람들, 특히 기술 분야에 있는 사람들은 편지를 보낼 이유가 없을 수도 있음
     * 봉투에 주소를 쓰는 것이 어색했음. 몇 년 동안 펜을 사용하지 않았기 때문에 몇 번의 시도와 낭비된 봉투가 필요했음
          + 물론 나는 펜을 자주 사용하지 않지만, 적어도 한 달에 한 번은 손으로 뭔가를 씀
     * FSF가 이사했을 때, 주소가 변경되었고, 내가 작업하던 오픈 소스 제품의 라이선스 공지에 주소를 변경해야 했음
          + 이 문제는 종종 '정확성'을 중시하는 Debian 개발자들에 의해 제기됨
     * 다른 댓글들은 FSF가 보스턴에 기반을 두고 있었다는 사실에 대해 언급하지 않음
          + 90년대에 보스턴은 기술 회사들의 작은 중심지였다는 이야기를 들었음. 이는 현재는 덜 사실일 수 있음
     * 2022년에 작성된 글임. 사람들이 여전히 우편으로 물건을 보낼 줄 아는지 궁금함. 저자에게는 봉투, 종이, 우표를 구하는 것이 새로운 모험처럼 보임
          + 나는 새로운 장소에 도착할 때마다 후손들에게 (사진) 엽서를 보내는 습관이 있음. 엽서를 찾는 것은 매우 드문 일이며, 판매자가 그것이 무엇인지 아는 경우는 더 드묾. 한 번은 판매자가 플래시 카드(작은 노트용 카드)가 엽서라고 주장했음. 안타깝게도 도착 시 공항에서 사야 하는 경우가 많음
     * 몇 주를 기다린 후, 'African Daisy global forever vert pair'라는 둥근 우표를 받았음. 판매자가 내가 주문한 것보다 훨씬 낮은 액면가의 우표로 물건을 보냈다는 것을 알아차렸어야 했음. 어쨌든
          + 많은 댓글 작성자들이 글의 풍자를 알아차리지 못하는 것이 놀라움. 영국에서는 겉으로 드러난 것을 그대로 받아들이지 않는 것이 일반적인가?
     * FSF의 누군가로부터 이 일이 얼마나 자주 발생했는지 듣고 싶음. 자주 발생하는 일이라고는 상상할 수 없음
     * FSF는 적어도 한 번 주소를 변경했으며, 최근에는 사무실을 완전히 폐쇄했음. 그들의 옛 주소의 새로운 소유자들이 GPL 사본 요청으로 혼란스러워했을지 궁금함
"
"https://news.hada.io/topic?id=20603","VC의 틀 깨기의 틀 깨기

     * Fluent VC의 창립자인 Alex Lazarow가 성공적인 핀테크 투자에 대한 10가지 역발상 전략을 공유

1. 스타트업의 해자(Moat)와 TAM 방정식

     * 일반적으로 스타트업은 경쟁 우위를 유지하기 위해 강력한 해자(Moat)가 중요하다고 여겨짐
     * 그러나 금융 서비스는 미국 GDP의 약 20%를 차지하는 거대한 시장이며, 시간이 지나면서 대부분의 제품 차별성이 약해지는 경향이 있음
     * 대표적인 핀테크 성공 사례들은 아래와 같은 요인으로 시장을 장악함
          + 우수한 제품: Stripe의 간단한 API
          + 더 나은 가치 제안: Chime(무료 은행 계좌)
          + 독특한 시장 접근 방식: Guideline과 Gusto의 파트너십
          + 저평가된 대규모 고객층 공략: Nubank
     * 금융 서비스 시장의 TAM(Total Addressable Market)이 매우 크기 때문에 제품 차별화와 판매 속도가 해자보다 더 중요할 수 있음
     * 예시
          + Robinhood: 서비스 자체는 차별화되지 않았지만 대규모 비즈니스 구축
          + Ramp: 지출 관리 부문에서 후발주자였지만 신속한 제품 출시로 성장
     * 기존 기업(Incumbents)과 경쟁 스타트업들은 결국 성공적인 모델을 따라 하겠지만, 성장과 제품 개선 속도가 빠르면 복제당할 위험을 줄일 수 있음
     * 핀테크의 경우 규모의 경제를 통해 해자를 형성할 수 있는 가능성도 있음

2. 규제 산업에서 규제 기관과의 적극적인 태도

     * 핀테크는 결국 '금융(Fin)'이 우선이며, 규제 기관과의 투명하고 개방적인 협력이 필수적임
     * 규제 기관과 협력할 의지가 없는 기업에 대해 회의적
          + 이는 저자가 지난 10년간 크립토 분야에 투자하지 않은 이유 중 하나이기도 함
     * 법을 단순히 준수하는 것 이상으로, 법의 취지와 고객 보호의 이유를 존중하는 창업자를 선호함
     * 규제 기관과의 적극적인 소통과 협력 태도를 가진 창업자가 더 성공적인 사례가 많음
     * 이는 핀테크뿐만 아니라 모든 규제 산업에 적용되는 원칙임

3. 젊음이 반드시 더 나은 것은 아님

     * 과거에는 후디를 입은 20대 창업자가 스타트업의 전형적인 이미지였지만, 이제는 오랜 업계 경험을 가진 창업자들이 두각을 나타냄
     * 물론 Stripe, Meta와 같은 젊은 창업자들의 성공 사례도 존재하지만, 경험이 많은 창업자들이 도메인 전문성을 무기로 성공하는 경우가 많음
     * 이는 규제 기관과의 협력 태도와도 연결됨
     * 특정 문제를 해결하는 데 있어 해당 창업자가 왜 독보적인 역량을 가졌는지 이해하는 것이 중요
     * 결과적으로, 더 깊은 도메인 전문성을 가진 경험 많은 창업자에게 투자하는 경향이 있음

4. 지리적 위치를 이점으로 활용하기

     * 실리콘밸리 외부와 전 세계에서 성공적인 스타트업(“Fund Returners”)이 증가하고 있다는 연구 결과가 있음
     * 글로벌 스타트업이 가진 구조적 이점
          + 비용이 낮아 동일한 투자금으로 더 많은 성과를 낼 수 있음 → 비즈니스 리스크 감소
          + 경쟁이 덜 치열하여 더 큰 성공 가능성 존재
     * 하지만 시장 규모가 작거나 벤처 캐피털 접근성이 부족할 수 있다는 단점도 있음
     * 실제로, 세계 최대의 핀테크 기업들이 실리콘밸리 외부에서 등장
          + Nubank (브라질): 세계 최대 네오뱅크
          + Ofbusiness (인도): 최대의 임베디드 핀테크 마켓플레이스
          + Klarna (스웨덴): 글로벌 최대 BNPL(Buy Now, Pay Later) 기업

5. 단위 경제학(Unit Economics)의 중요성

     * 빠른 성장이 매력적으로 보일 수 있지만, 지속 가능하지 않은 유닛 이코노믹스에 기반하면 의미 없음
     * 저자는 ""유니콘(Unicorn)보다 낙타(Camel)를 선호""
          + 즉, 거품이 아닌 견고한 사업 모델을 가진 스타트업이 더 중요함
     * 창업자를 만날 때 가장 먼저 현재 유닛 이코노믹스를 얼마나 잘 이해하고 있는지 확인
          + 단순한 아이디어가 아닌, 실제 비즈니스 모델로서 검증된 요소가 있는가?
          + 캐시플로우 타이밍을 어떻게 관리하는가? (다음 섹션에서 추가 논의)
     * 초기 단계에서는 완벽할 필요는 없지만, 핵심 지표를 얼마나 파악하고 있는지가 중요
     * 핀테크는 규모의 경제(Scale Game) 효과가 큰 산업
          + 결제 기업과 네오뱅크는 규모가 커질수록 더 좋은 파트너십 조건을 확보할 수 있음
          + 초기 유닛 이코노믹스가 일정 수준 이상이면 성장하면서 더 개선될 가능성이 높음
          + 반면, 다른 산업에서는 성장할수록 유닛 이코노믹스가 악화되는 경우도 있음
     * 초기 유닛 이코노믹스는 사업의 핵심적인 기반이므로 반드시 검토해야 함

6. 현금 흐름 사이클(Cash Cycle)의 중요성

     * 좋은 스타트업은 강한 유닛 이코노믹스를 갖추고 있어야 하지만, 훌륭한 스타트업은 ""네거티브 캐시 사이클(negative cash cycle)"" 도 확보해야 함
     * 네거티브 캐시 사이클이란?
          + 고객에게 현금을 먼저 받지만, 지불할 의무는 나중에 발생하는 구조
          + 이를 통해 운영 자금을 외부 투자 없이 자체적으로 조달 가능
     * 예제: 대출 스타트업
          + 대출 회사가 100% 대출금을 조달할 수 있다면 추가 자금 조달 없이 운영 가능
          + 반면, 80%만 조달할 수 있다면 부족한 20%를 추가로 조달해야 함 → 지속적인 펀딩 필요
          + 빠르게 성장할수록 추가 자금 조달 부담이 커지는 ""역설적 성장 부담"" 발생
     * 다른 핀테크 분야에서도 유사한 원리 적용
          + Insurtech(보험 테크): 보험 계약을 위해 일정 자금을 사전에 보유해야 할 수도 있음
          + 결제 및 네오뱅크: 예비 준비금(Reserve balance) 확보 필요
     * 현금 흐름 사이클 최적화 사례: Nubank
          + Nubank는 고객에게 현금을 선지급받고, 가맹점에 지불하는 시점을 지연
          + 이를 통해 현금 흐름을 조절하고, 추가 자금 조달 없이 빠른 성장 가능
     * 현금 흐름 사이클을 최적화하면, 평범한 스타트업을 훌륭한 스타트업으로 만들 수 있음

7. # 스타트업은 초기 단계에서도 재무 모델이 필요함

     * 초기 스타트업의 재무 모델이 완벽할 필요는 없지만, 반드시 필요함
          + 스타트업은 아직 명확한 비즈니스 모델이 없는 상태에서 시작하며, Pre-seed 단계에서는 불확실성이 큼
          + Series A 이후에야 본격적으로 비즈니스 모델이 정립되는 경우도 많음
          + 유닛 이코노믹스, 판매 채널의 깊이 등은 초기에는 단순한 추정치일 수밖에 없음
     * 일부 창업자와 VC들은 시드 단계에서 재무 모델이 필요 없다고 주장
          + 하지만 특히 핀테크처럼 복잡한 금융 중개 모델을 다루는 스타트업이라면 재무 모델은 필수
          + 예:
               o 대출 스타트업: 돈을 먼저 대출해주고 일부를 손실한 후, 자본 사용료를 지급하며 수익 창출
               o 보험 스타트업: 보험료를 먼저 받고, 이후 리스크를 지불하며 계약을 관리
     * 완벽한 숫자가 아니라 창업자의 재무적 사고력을 평가하는 것이 중요
          + 창업자가 비용 구조, 매출 총이익(Gross Margin), 현금 소진율(Cash Burn) 등을 얼마나 깊이 이해하고 있는지 확인
          + 다양한 시나리오에 따라 얼마나 정교한 관점을 가지고 있는지 평가
     * VC 입장에서, 창업자가 자신의 도메인과 비즈니스 모델을 얼마나 잘 이해하는지 확인하는 핵심 방법이 바로 재무 모델

8. VC는 자체 재무 모델을 만들지 말아야 함

     * 초기 스타트업의 비즈니스 모델과 가정이 불확실하기 때문에, 완벽한 재무 모델을 만드는 것은 불가능
     * VC가 자체적으로 새로운 재무 모델을 만드는 것은 오히려 오류를 증폭시키는 결과를 초래
          + 후속 단계(후기 투자 단계)에서는 가정이 더 명확해지고, 시나리오 분석의 가치가 커짐
          + 하지만 초기 단계에서는 창업자가 사업에 가장 가까운 사람이므로, VC보다 더 나은 모델을 만들 가능성이 높음
     * VC는 시드 단계에서 창업자의 모델을 활용하는 것이 원칙
          + 자체적으로 새로운 모델을 만들기보다는, 창업자의 모델을 바탕으로 민감도 분석(Sensitivity Analysis) 수행
          + 유닛 이코노믹스 가정, 희석(Dilution), 엑싯 멀티플(Exit Multiple) 등이 투자 수익에 미치는 영향을 깊이 분석
     * VC는 창업자의 모델을 기반으로 투자 결정을 해야 하며, 자체 모델을 만들 필요 없음

9. 비즈니스 모델의 깊이가 중요하며, 유행어(Buzzwords)에 휘둘리지 말 것

     * 최근 몇 년 동안 Crypto, NFT, AI 등 유행어 중심의 스타트업이 등장했지만, 어떤 기술 트렌드도 만능 해결책이 될 수 없음
     * 초기 단계에서는 과장된 기대감이 흔함
     * 금융 서비스 시장은 거대하지만, 여전히 기존 대기업(Incumbents)이 지배
          + 새로운 핀테크 트렌드가 등장해도 기존 금융 산업을 완전히 정복하지 못하는 경우가 많음
     * 창업자가 모든 것을 새롭게 혁신할 필요는 없음
          + 기존 대기업과 협력하거나, 데이터를 활용한 새로운 유통 전략을 구축하는 것이 더 효과적일 수 있음
     * VC는 현재 핫한 트렌드에 휩쓸리기보다, 장기적으로 지속적인 변화를 만들 가능성이 있는 비즈니스 모델에 집중해야 함
          + 성공적인 벤처 투자자는 대세를 거스르는 역발상(Contrarian)적인 접근이 필요
          + 단순히 ""유행하는 테마""에 맞춘 사업이 아니라, 기존 산업 내에서 실질적인 변화를 만들 수 있는 모델인지 평가해야 함

10. 고객 중심주의(Customer-Centric Approach)

     * 모든 VC는 고객 중심 사고를 가져야 하며, 핀테크에서는 더욱 중요함
     * 규제 기관이 어떤 사업을 막을 가능성이 있는지 고민할 때, 다음 질문을 해보면 유용함
          + ""이 서비스는 정말 고객에게 좋은가?""
          + ""고객을 성숙한 성인처럼 대하고 있는가? (투명성, 개방성, 존중을 갖춘 서비스인가?)""
     * 핵심 원칙: 고객에게 근본적으로 좋은 서비스를 제공하는 회사는 지속 가능함
          + 낮은 비용으로 더 나은 서비스를 제공하거나,
          + 더 높은 투명성과 신뢰성을 기반으로 운영하는 기업이 시장에서 성공 가능성이 높음
     * 금융 서비스는 고객의 이탈이 쉽지 않은(Sticky) 산업
          + 고객이 기존 서비스를 버리고 새로운 서비스로 전환할지 고민할 때, 반드시 자문해봐야 함
               o ""이 제품이 정말 기존 서비스보다 훨씬 나은가?""
               o ""내가 직접 사용할 의향이 있는가?""
               o ""내 배우자나 부모님도 기꺼이 사용할 서비스인가?""
          + 만약 이 질문에 확신을 가지고 ""예""라고 답할 수 없다면, 고객을 설득하기 어렵다는 의미
     * 결론: 고객의 관점에서 사업을 평가하는 것이 가장 중요하며, 고객의 목소리가 최우선이 되어야 함
"
"https://news.hada.io/topic?id=20556","Eurorack Knob Idea","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Eurorack Knob Idea

     * Eurorack 모듈을 위한 혁신적인 노브 및 패치 케이블 하이브리드 설계임
     * 자석 인코더와 3.5mm 잭을 사용하여 새로운 방식의 노브를 구현함
     * AS5600 인코더 칩을 사용하여 각도와 크기를 측정함
     * TRS 플러그에 네오디뮴 자석을 부착하여 노브로 사용함
     * 기술적 한계와 상업적 가능성에 대한 논의가 포함됨


Eurorack 노브 아이디어

     * 작년에 Dave Cranmer와 협력하여 Eurorack 모듈을 설계함
     * Eurorack의 주요 장점인 하드웨어의 물리적 조작을 소프트웨어 시뮬레이션과 비교하여 강조함
     * Eurorack 패널을 정리하기 위한 새로운 노브 아이디어를 제안함

자석 인코더와 TRS 플러그

     * AS5600 자석 인코더 칩을 사용하여 각도와 크기를 측정함
     * 3.5mm 잭과 자석을 결합하여 노브 및 패치 케이블 하이브리드를 만듦
     * i2c 인터페이스를 통해 설정하여 아날로그 전압을 출력할 수 있음

노브 제작 과정

     * TRS 플러그 끝을 절단하여 네오디뮴 자석을 부착함
     * 3D 프린팅을 통해 플러그의 뒷부분을 실린더 형태로 만듦
     * 중간 점도의 순간 접착제를 사용하여 자석을 부착함

회로 설계

     * AS5600 칩을 TRS 소켓 아래에 배치할 수 있는 회로 보드를 설계함
     * PWM 출력과 DAC를 사용하여 아날로그 전압을 출력할 수 있음
     * PCB 재료를 사용하여 소켓을 보드에서 들어 올림

조립 및 테스트

     * AS5600 칩을 패드에 정확히 맞추어 조립함
     * CH32V003과 LED를 추가하여 값을 표시함
     * 자석 인코더가 필드 강도를 읽어 노브의 존재를 감지할 수 있음

결론

     * 프로토타입에 만족하지만 상업적 가능성은 낮다고 판단함
     * 모든 모듈에 적용하기에는 비용이 많이 들고 실용적이지 않을 수 있음
     * 특허를 고려했으나 비용 문제로 진행하지 않음
     * 기계적 솔루션으로서의 가능성을 제안함
     * 프로젝트의 하드웨어 및 소프트웨어 소스는 GitHub에 있음

        Hacker News 의견

     * ""모든 노브를 패치 케이블로 교체할 수 있는 신디사이저의 꿈은 멋지지만, 노브가 입력의 감쇠기로 작동하는 디자인이 더 좋음""
          + ""Make Noise 모듈은 크기가 크지만 인기가 많음""
          + ""Eurorack의 문제는 작은 공간에 많은 기능을 넣으려는 것임""
          + ""인터페이스가 Eurorack의 핵심임""
          + ""케이블과 노브로 시스템의 상태를 볼 수 있음""
     * ""3.5mm TS 잭 뒤에 포텐셔미터를 붙이는 방법 제안""
          + ""TRS 잭을 사용하면 추가 핀을 활용할 수 있음""
     * ""노브가 없는 잭 문제는 미니멀리즘에 집착한 결과임""
          + ""작은 모듈에도 감쇠 기능이 있는 경우가 많음""
     * ""노브의 저항감이 중요함""
          + ""소프트웨어로 저항을 조절할 수 있다면 재미있을 것임""
     * ""Eurorack는 기타 페달처럼 많은 사람들이 조작에 더 집중함""
          + ""간단한 것을 원하는 음악가들도 많음""
     * ""노브에 가속도계와 MCU를 넣어 출력 신호를 생성하는 아이디어 제안""
     * ""회전 포텐셔미터를 더 발전시킬 수 있는 가능성 제안""
          + ""아날로그 스틱처럼 여러 차원을 추가할 수 있음""
     * ""비싼 꿈이지만 사람마다 다르게 느낄 수 있음""
     * ""소프트웨어처럼 LFO를 노브에 드래그하는 방식과 유사함""
          + ""공간을 최대한 활용할 수 있는 방법 제안""
"
"https://news.hada.io/topic?id=20596","단색 배경 사용 시 몇 달간 Windows 7 로그인 속도 저하 원인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 단색 배경 사용 시 몇 달간 Windows 7 로그인 속도 저하 원인

     * 작업 표시줄의 초 단위 표시 기능에 대한 지속적인 논의가 있음
     * 사용자 경험을 향상시키기 위한 다양한 접근 방식이 제안됨
     * 초 단위 표시의 필요성과 그에 따른 성능 문제에 대한 논의가 이루어짐
     * 기술적 구현의 복잡성과 사용자 요구 사이의 균형을 맞추는 것이 중요함
     * 최종 결정은 사용자 피드백과 기술적 가능성을 기반으로 이루어질 것임


작업 표시줄의 초 단위 표시 기능

     * 작업 표시줄에 초 단위를 표시하는 기능에 대한 논의가 지속되고 있음
     * 사용자 경험을 개선하기 위해 다양한 접근 방식이 제안되고 있음
     * 초 단위 표시의 필요성과 그로 인한 성능 문제에 대한 논의가 이루어지고 있음
     * 기술적 구현의 복잡성과 사용자 요구 사이의 균형을 맞추는 것이 중요함
     * 최종 결정은 사용자 피드백과 기술적 가능성을 기반으로 이루어질 것임

        Hacker News 의견

     * 단색 배경을 선호하는 사람으로서, 이 간단한 선호가 얼마나 자주 이상한 상황으로 이어지는지 항상 놀라움
          + 최신 macOS에서는 사용자 정의 단색 배경을 설정하려고 하면 눈부신 흰색 화면이 나타남
          + GNOME은 단색 배경 설정을 위한 UI 컨트롤을 제거했지만, 여전히 수동으로 여러 설정 키를 설정하면 지원됨
          + 이러한 패턴은 틈새 사용자들을 위한 미완성 기능을 유지하는 것으로 보임
          + 개인적으로는 사용자 정의 이미지를 생성하지 않고 RGB 값을 설정하고 싶음
          + 현재 상태를 고려할 때, 불안정한 배경색 논리보다는 잘 유지되는 하나의 배경 시스템을 선호함
     * 25년 동안 Windows 세계를 피한 후, 최근 몇 년 동안 기업 세계로 돌아와 Microsoft 도구에서 이 패턴을 자주 봄
          + 보안 문제로 인해 Teams가 로드되지 않지만, 알림은 메시지의 전체 내용을 포함하여 전달됨
          + Word의 클라우드 버전에서 몇 단어를 입력하거나 전체 문서를 붙여넣을 수 있지만, 보안 검사가 따라잡기 전까지는 민감도 레이블을 설정해야 함
          + 이는 MS가 웹 앱에 대해 매우 나쁜 소프트웨어 아키텍처를 가지고 있음을 보여줌
     * 이와 관련된 것은 소프트웨어가 완전히 시작되기 전에 사용자 환경을 보여주는 관행이 시작된 것과 관련이 있을 수 있음
          + 이제 소프트웨어가 정말로 로드되었는지 추측해야 함
     * 기본 설정을 사용하면 버그 신고가 더 쉬워짐
          + 거의 모든 곳에서 기본 설정을 사용하게 됨
          + 사용자 정의를 유지하는 것은 너무 번거로워서 신경 쓰지 않는 것이 가장 쉬움
          + 예외는 VS Code 설정의 약 50줄로, 어디에 있는지 모르는 신비로운 파일에 동기화되어 있음
     * 이 코드는 내가 좋아하는 Kubernetes 버그를 많이 떠올리게 함
          + 수십 년에 걸쳐 같은 밈이 이어짐
     * Windows Spotlight 배경화면을 로그인 화면에서 자동으로 새로 고침하는 것을 좋아했음
          + Win10에서 작동이 중지되어 Bing Image of the Day를 다운로드하는 스크립트를 작성함
     * Raymond Chen의 게시물을 알리는 ""왜 <이상한 행동>이 <Windows 버전>에서 발생했는가""라는 헤드라인을 기대하게 됨
          + 항상 흥미로움
     * 기술적인 사람들은 원하는 색상의 1x1 픽셀 jpg/png를 만들어 정상적이고 유지되는 코드 부분에 넣는 등의 이상한 일을 하게 됨
     * ""Comfort food""라는 표현이 재미있음
          + 1989년 대학 시절부터 motif 윈도우 매니저와 steelblue4 데스크탑, wheat xterm 배경을 사용 중이며, 그 이후로 개선된 것이 없음
     * 이는 ""시스템적 버그"" 또는 ""유형 버그""로 생각하는 버그의 범주에 속함
          + 로그인 구성 요소에 토큰이 전달되면, 토큰의 소멸자가 프로세스가 완료되었음을 자동으로 표시할 수 있음
          + Facebook에서 유사한 버그가 있었으며, 알림 수가 잘못 표시되는 문제가 있었음
          + 코드가 변경되어 알림 수와 목록이 시스템의 동일한 부분에서 관리되면서 버그가 영원히 사라짐
"
"https://news.hada.io/topic?id=20572","고객이 떠나야 성공하는 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            고객이 떠나야 성공하는 모델

     * 전통적인 SaaS 모델은 고객 유지율, LTV, 반복 매출에 기반하지만, 일부 산업에서는 이탈(churn)이 곧 성공의 증거이자 비즈니스 모델임
          + 대표 사례: 데이트 앱, 결혼식·장례식 산업, 교육 플랫폼, 부동산·중고차 마켓플레이스 등
     * 핵심은 고객이 다시 오지 않아도 괜찮은 구조를 만들고, 시장 자체의 반복성과 즉시성에 집중하는 것
     * 이런 고의적 이탈 기반 모델에서는 MRR이나 NDR이 아닌, 시장 크기, 검색 노출, 신뢰, 속도가 성장을 좌우함
     * 고객 유지가 아닌 고객 교체(replacement) 를 기반으로 성장하는 전략이 새로운 SaaS 플레이북으로 부상 중

고객 이탈이 비즈니스 모델이 되는 경우

     * SaaS에서 '이탈(churn)' 은 보통 악몽임
     * 전통적인 SaaS 모델에서는 고객 이탈이 수익성에 큰 위협이 되기 때문에, 순수익 유지율(Net Revenue Retention), 고객 생애 가치(LTV), CAC 회수 시점 등이 핵심 지표로 사용됨
     * 하지만 일부 산업에서는 이탈(churn)이 오히려 제품이 잘 작동한 결과이며, 비즈니스 모델 그 자체로 작동함
     * 대표적으로 데이팅 앱(Bumble, Tinder, Hinge) 은 고객이 연인을 찾고 플랫폼에서 떠나는 것이 성공 지표임
     * 오프라인에서도 장례식장, 웨딩 플래너처럼 1회성 수요가 일반적인 산업이 존재함
     * 이들은 고객은 반복되지 않지만 시장(TAM)은 지속적으로 재생산되는 구조로, 고객 유지보다 재진입 수요 확보가 핵심임

1회성 소비에 최적화된 산업 사례

     * 데이팅 앱: Hinge, Tinder, Bumble
          + “삭제되도록 설계됨(designed to be deleted)”
          + 연애 상대를 찾으면 서비스 이탈이 자연스러움
          + 예외적이지만, Ashley Madison은 반복 이용 가능성을 내포(바람피우라고 권장하는 앱)
     * 에듀테크: Duolingo, Udemy, Coursera 등은 특정 언어 또는 스킬 학습 후 종료되는 구조
          + 스페인어를 두 번 배우진 않지만, 다른 언어로 재이용 가능성은 존재
     * 고관여/저빈도 거래 플랫폼: Zillow, Redfin, Carvana
          + Zillow 같은 경우, 고객 생애 가치를 여러 번 주택을 거래하는 것으로 모델링하지 않음(10년에 5번씩 주택거래하는 사람??)
          + 특정 시점에 “기회의 창”을 선점하는 전략이 중요
     * 가장 극단적인 사례: SimpleClosure
          + SimpleClosure는 다른 회사를 '종료'해주는 SaaS
          + 기업 청산 지원 서비스를 제공하는 스타트업으로, 고객은 단 한 번 사용하고 사라짐
          + 하지만 미국에서 매년 약 70만 개 기업이 폐업하기 때문에, 고객은 단발성이어도 시장 자체는 반복적으로 유지
               o 반복 고객보다 반복 시장을 타겟팅
          + 이처럼 단발성 고객을 대상으로 하는 비즈니스도, 반복되는 문제와 시장 구조를 기반으로 충분히 성장 가능함

두 가지 비즈니스 모델 비교

     * 1. 반복 고객 = 생애 가치 중심 모델
          + 전통적인 SaaS 모델은 고객 유지율을 바탕으로 예측 가능하고 누적되는 수익 구조를 형성함
          + 고객 획득에 들어간 비용(CAC)은 고객이 장기간 사용하며 점진적으로 회수됨
          + 고객이 오래 남아있을수록 비즈니스 모델의 수익성이 향상됨
          + 핵심 지표:
               o MRR (월간 반복 수익)
               o NDR (순 달러 유지율)
               o 확장 수익
               o 이탈률(Churn Rate)
          + 적합한 분야:
               o B2B SaaS
               o 핀테크 앱
               o 워크플로우 도구
          + 리스크 요인:
               o 제품 고착성이 낮을 경우 전체 모델이 무너질 수 있음
               o 고객 이탈이 심하면 손익 구조(P&L)에 심각한 영향을 미침
     * 2. 반복 시장 기반 = 수요 재생 모델
          + 고객이 다시 돌아오지 않아도 괜찮은 모델
          + SimpleClosure는 이런 구조에 해당됨: 고객은 서비스 후 사라지지만 시장은 계속 유지됨
          + 미국에서는 연간 약 70만 개 기업이 폐업하며, 이 수치는 지난 10년간 안정적으로 유지됨
          + 이 모델의 핵심은 고객 충성도가 아닌 반복적인 시장 수요에 있음
          + 주요 전략 요소:
               o 유지율이 아닌 고객 대체율(Replacement) 이 중요
               o LTV보다 시장 규모(Market Size) 와 시장 속도(Market Velocity) 가 더 중요
               o 제품 고착성보다는 SEO, 타이밍, 신뢰성이 성공 요소
          + 특징:
               o 고객의 문제 해결 순간에 빠르게 등장하는 것이 관건
               o 고통이 크고 시장이 크면, 오래 붙잡을 필요 없이 빠르게 대응하는 것이 유리함

제품 및 GTM 전략의 변화

     * 제품 전략: 유지보다 문제 해결 중심
          + 고객 이탈이 설계된 구조에서는 사용자가 머무르는 것이 아니라, 문제를 빠르게 해결하고 떠나는 것이 목표임
          + 따라서 제품 전략은 다음과 같은 방식으로 구성됨:
               o 속도가 깊이보다 중요: 사용자가 원하는 문제를 빠르게 해결해주는 것이 핵심
               o 자동화가 개인화보다 효과적: CRM처럼 길게 끌지 말고 명확한 과업 완료 중심으로 설계
               o 일관성이 유연성보다 중요: 모든 고객이 동일한 문제를 겪기 때문에 같은 방식으로 빠르게 처리하는 것이 효율적

     “우리는 파워 유저가 아니라, 당황한 유저를 상대한다”
     – Dori Yona, SimpleClosure 공동 창업자 겸 CEO
     * GTM 전략: 충성도보다 긴급성 확보
          + 고객 유지가 비즈니스 엔진이 아니라면, 타이밍이 모든 것
          + GTM 전략의 핵심은 아래와 같음:
               o 검색(SEO) 이 세일즈보다 중요: 필요할 때 고객이 직접 검색하므로, 검색 결과 상단에 노출되어야 함
               o 신뢰가 기능보다 중요: 고객이 급박한 상황에서 믿고 맡길 수 있는 브랜드가 우선
               o CAC는 규모가 아닌 속도 중심: 48시간 안에 결정을 유도하는 속도전이 중요
     * 운영 전략: 빠르고 단단한 시스템 루프
          + 각각의 고객은 학습의 기회가 되는 케이스 스터디 역할을 함
          + 내부 툴링을 통해 운영 마진 확보
          + 수익이 반복되지 않아도, 신뢰와 입소문이 누적되며 성장의 동력이 됨
          + 이러한 원앤던(One-and-done) 모델은 '진통제' 서비스일 때 특히 입소문을 타며 잘 작동함
               o 즉, ‘있으면 좋은 것’(비타민)이 아니라 ‘없으면 안 되는 것’(진통제)이 될 때 고객이 자발적으로 추천함

SaaS만큼 가치 있는 모델일까?

     * SaaS 모델은 예측 가능한 반복 수익 구조로 인해 투자자들이 선호함
          + 핵심 지표는 MRR, 고객 유지율, 확장 수익 등
          + 예측 가능성(Predictability)이 높은 것이 가장 큰 강점
     * 그러나 고이탈(high-churn) 구조의 비즈니스도 충분히 건전한 비즈니스 모델이 될 수 있음
          + 단, 핵심은 가치를 짧은 시간 안에 압축해서 전달해야 함
     * 핵심: LTV vs CAC 구조의 차이
          + SaaS는 CAC를 수년에 걸쳐 회수하는 반면
               o 고이탈 모델(데이팅 앱, 부트캠프, 마켓플레이스 등) 은 초기 전환 시점에 모든 수익이 발생해야 함
          + 성공을 위한 최적화 요소:
               o 즉각적인 전환(Instant Conversion)
               o 선불 결제 구조(Upfront Cash)
               o 완벽한 종료 경험(Flawless Offboarding)
               o 추천 유도 가능한 결과물(Referral-worthy Outcomes)
          + 이 구조에서는 시스템, 비용 구조, 보상 플랜까지 모두 고객의 짧은 생애 주기에 맞춰져야 함

     단기 고객에게 장기 SaaS적인 계산식을 적용하면 이탈이 위험 요소로 작용하게 됨
     (예: 엔터프라이즈 세일즈 담당자에게 딜당 12% 커미션 지급하는 경우)
          + 하지만 이탈을 전제로 모델을 설계한다면,
               o 단지 생존하는 것을 넘어서, 이탈을 발판으로 확장 가능한 구조도 만들 수 있음

요약: 이탈을 두려워 말고, 설계하라

     * SaaS가 예측 가능성으로 사랑받는다면, 이탈형 모델은 빠른 가치 전달로 승부
     * 고객을 붙잡는 게 아니라, 빠르게 문제를 해결하고 다음 고객을 맞이하는 구조
     * 핵심은:
          + 즉시 수익 확보
          + 신뢰 기반 입소문 성장
          + 반복되는 시장 타이밍 포착

   https://file.kiwi 가 이러한 예라고 할수 있겠네요.
   모든 스토리지 sass는 용량별로 매월 과금하는 방식이고, 가격은 총사이즈에 비례합니다.
   대대대용량을 다루는 시간은 대부분의 기업들에게 년에 한번 있을까 말까 하는데.
   이 용량에 맞춘 월 구독비용은 지나치게 높아서 애매하죠.
   파일키위는 무제한 용량을 짧은 시간에 제공하는 방식으로 과금합니다.
"
"https://news.hada.io/topic?id=20528","DuckDB에서 SQL 입력 즉시 결과를 제공하는 "Instant SQL" 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              DuckDB에서 SQL 입력 즉시 결과를 제공하는 ""Instant SQL"" 공개

     * Instant SQL은 SQL 쿼리를 작성할 때 결과를 실시간으로 미리보기하여 쿼리 작성 및 디버깅을 가속화하는 도구
     * 복잡한 CTE나 컬럼 수식을 손쉽게 분해하고 분석할 수 있으며, AI 기반 편집 제안을 즉시 미리볼 수 있어, 쿼리 작성 및 수정이 더욱 효율적임
     * MotherDuck과 DuckDB Local UI에서 사용 가능하며, DuckDB 기반으로 다양한 외부 데이터 소스까지 실시간 탐색 가능
     * DuckDB의 로컬 우선 설계와 성능 최적화, 캐싱 전략, AST 기반 커서 매핑 등 고급 기술 조합 덕분에 실현 가능했음
     * MotherDuck은 데이터 분석을 위한 다양한 도구를 제공하는 관리형 DuckDB 클라우드 서비스


Instant SQL 소개

     * Instant SQL은 SQL 쿼리 결과를 타이핑하는 즉시 실시간으로 업데이트해주는 새로운 기능임
     * 별도의 실행 버튼(run button) 없이, 0초 대기 시간(zero-latency) 으로 결과를 미리 확인할 수 있음
     * 현재 MotherDuck 플랫폼과 DuckDB Local UI에서 사용 가능함

왜 Instant SQL이 필요한가

     * SQL 작성은 구문이 아니라 데이터를 이해하고 질문을 구성하는 과정이 핵심임
     * 기존에는 텍스트 에디터에 쿼리를 쓰고, 실행 버튼을 누르고, 결과를 기다리는 느린 반복 작업이 필수였음
     * Instant SQL은 이 과정을 즉각적이고 자연스럽게 탐색하는 흐름으로 바꿔줌

주요 기능

     * 작성하면서 실시간으로 결과 미리보기
          + SQL 쿼리를 타이핑할 때마다 결과 세트 미리보기가 실시간으로 업데이트됨
          + 간단한 변환부터 복잡한 집계까지 데이터 탐색을 끊김 없이 진행 가능함
     * CTE(공통 테이블 표현식) 실시간 디버깅
          + CTE를 클릭하여 즉시 시각화 가능
          + 수정사항이 즉시 모든 종속 노드에 반영되어, CTE 디버깅이 매우 쉬워짐
     * 복잡한 컬럼 수식 분해
          + 컬럼 수식 오류를 빠르게 찾을 수 있도록 결과 테이블에서 수식 분해 가능
          + 수식 로직이나 데이터 문제를 즉각 식별할 수 있음
     * 다양한 데이터 소스 지원
          + DuckDB가 지원하는 모든 소스(DuckDB 테이블, S3의 parquet 파일, Postgres, SQLite, MySQL, Iceberg, Delta 등)에 대해 미리보기 가능
          + 외부 데이터 모델링과 탐색이 매우 빠르게 가능해짐
     * 최종 실행 전 빠른 쿼리 검증
          + 미리보기를 통해 쿼리를 다듬은 후, 만족스러우면 최종 실행 가능
          + SQL 작성-실행-대기 주기를 혁신적으로 단축시켜줌
     * AI 기능과의 결합
          + 선택한 텍스트에 대해 자연어 명령을 입력하면 AI가 수정 제안을 해줌
          + 제안 결과를 즉시 미리보기할 수 있어, 실수 위험 없이 수정을 수용할 수 있음

어떻게 가능했는가

     * 초저지연 쿼리 실행 기술
          + DuckDB의 로컬 우선 설계 덕분에 PC에서 직접 빠른 결과를 얻을 수 있음
          + MotherDuck의 듀얼 실행 아키텍처가 대용량 데이터도 저지연으로 지원함
     * 쿼리 재작성 기술
          + DuckDB JSON 확장 기능을 활용하여 SELECT 쿼리의 **AST(구문 트리)**를 추출하고 활용함
          + 쿼리 일부를 로컬 캐시 샘플 데이터로 대체하여 빠른 미리보기가 가능해짐
     * 스마트 캐싱 시스템
          + 미리 예측된 데이터 캐시를 사용해 키 입력 즉시 결과를 렌더링함
          + 다양한 캐싱 전략을 사용하여 사용자가 손가락을 떼기도 전에 결과가 나타남
     * 커서-구문트리 매핑
          + 사용자의 커서 위치를 AST에서 특정 SELECT 노드로 정확히 매핑하는 기능을 개발함
          + 복잡한 쿼리 안에서도 사용자가 작업 중인 SELECT문만 골라서 미리보기 제공 가능함

Instant SQL 이용 방법

     * MotherDuck이나 DuckDB Local UI에서 ""공개 프리뷰""로 사용 가능
     * 새로운 프롬프트 기반 수정 기능도 MotherDuck 사용자에게 제공됨

   이거 완전 신기하네요

        Hacker News 의견

     * DataCouncil 컨퍼런스에서 이 기능과 블로그 포스트의 저자가 발표하는 것을 보았고, 이를 구축하는 데 많은 공예, 창의성, 그리고 세심함이 들어갔음을 알 수 있었음. Hamilton과 MotherDuck 팀의 멋진 출시를 축하함
     * DuckDB UI와 MotherDuck에서 멋진 비디오가 있음
     * SQL에 파이프 구문이 있으면 더 좋을 것 같음. SQL은 훌륭하지만, 그 순서는 직관적이지 않으며, 중간 결과를 미리 보기 위해서는 CTE만이 신뢰할 수 있는 방법임. 파이프를 사용하면 각 단계가 중간 출력을 명확히 보여줄 수 있음
          + 예시:
               o FROM orders
               o WHERE order_date >= '2024-01-01'
               o AGGREGATE SUM(order_amount) AS total_spent GROUP BY customer_id
               o WHERE total_spent > 1000
               o INNER JOIN customers USING(customer_id)
               o CALL ENRICH.APOLLO(EMAIL > customers.email)
               o AGGREGATE COUNT(*) high_value_customer GROUP BY company.country
     * DuckDB 엔지니어가 있다면, 당신의 도구가 생물정보학/생명공학에서 내 작업에 엄청난 도움이 되었음을 알리고 싶음. 생물학적 데이터(복잡하고, 끊임없이 변화하는)가 요구하는 유연성과 단순함을 가지고 있음
     * DuckDB가 kusto나 구글의 파이프 쿼리 구문과 같은 파이프 구문을 가지지 않은 것은 치명적인 기능이 빠진 것임
          + 왜 치명적인 기능인가? 우선, LLM은 왼쪽에서 오른쪽으로 텍스트를 완성함. 그것만으로도 치명적인 기능임
          + 하지만 컴퓨팅 파워가 적은 우리 인간에게는 파이프 구문이 (훨씬 더 나은) 코드 완성을 가능하게 함
          + 파이프 구문은 작업하기에 즐거우며 SQL로 돌아가는 것은 정말 실망스러운 순간임
     * DELETE 쿼리와 함께 작동하지 않기를 바람
     * DuckDB의 노트북을 탐색하는 것을 정말 좋아하며, 이 기능은 그것들을 더욱 멋지게 만듦. 그러나 공유, 내보내기 또는 git 저장소에 커밋할 수 없다는 점은 매우 제한적임. DuckDB 데이터베이스에 저장하고, 심지어 역사적 버전을 저장하는 것 같지만, 실제로 그것으로 할 수 있는 것이 없음
     * CTE 검사는 놀라움. 수동으로 너무 많은 시간을 소비함
     * 멋진 도구이며, SQL을 위한 매니폴드 프로젝트와 함께 사용하면 더욱 멋짐. 타입 안전하고 네이티브 DuckDB 구문에 대한 훌륭한 지원을 제공함
     * 멋져 보이지만, 쿼리하려는 전체 테이블을 보고 싶음. 항상 쿼리를 시작할 때 select * from table limit 10;을 빠르게 실행한 후 열과 조인을 추가함
"
"https://news.hada.io/topic?id=20573","SEO 시대의 끝? AI 에이전트를 위한 마케팅 최적화의 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   SEO 시대의 끝? AI 에이전트를 위한 마케팅 최적화의 시작

     * AI 에이전트가 마케팅 구매 여정의 새로운 미들맨으로 떠오르며, 기존 퍼널 구조가 해체되고 있음
     * ""제로 클릭(Zero-click)"" 검색은 브랜드가 사용자와 접점 없이 AI 응답만으로 구매 결정을 유도함
     * 기업 웹사이트의 방문자 수는 감소하고 있으며, AI로부터 유입되는 추천 트래픽은 폭발적으로 증가 중
     * 브랜드는 이제 AI가 이해하고 활용할 수 있는 콘텐츠 전략을 수립해야 하며, 기존 SEO 방식만으로는 한계가 있음
     * 성공적인 적응을 위해서는 새로운 측정 지표 확보 → AI 노출 최적화 → 빠른 실험 기반 전략 수립의 3단계 접근이 필요함

AI가 구매 여정의 중심이 되다

  고객이 직접 찾는 시대에서, AI가 추천해주는 시대로 전환 중

     * 사용자는 제품을 찾기 위해 Google, Bing 등에서 AI 요약만으로 구매 결정을 내리거나, ChatGPT 같은 LLM으로 직접 검색함
          + Bain & Company 조사: 미국 소비자의 80%는 전체 검색의 40% 이상을 AI 기반 응답만으로 해결
          + HubSpot: 기업 웹사이트 방문자 수 최대 30% 감소
          + Adobe: 2025년 2월 기준, AI 경유 유입 트래픽 2024년 7월 대비 1200% 증가

기존 구매 퍼널의 붕괴와 AI 중심 퍼널의 등장

     * 전통적 퍼널
          + 기존의 디지털 구매 여정은 검색 → 클릭 → 비교 → 다운로드/리뷰 탐색 등 선형적이고 수동적인 흐름으로 구성됨
          + 각 단계마다 사용자의 노력이 필요하며, 이는 결국 이탈률 상승으로 이어짐
          + 특히, 중요도가 낮거나 즉흥적인 구매일수록, 복잡한 여정은 구매 포기를 유도함
     * AI 기반 퍼널
          + AI 기반 검색은 이러한 복잡한 단계들을 대리 처리함으로써 사용자의 부담을 줄임
               o AI가 요약, 비교, 추천, 개인화 응답을 수행
          + 개인의 선호 데이터를 학습할수록, AI의 응답 품질도 지속적으로 향상됨
               o 고객은 의식적으로 탐색하지 않아도 결정을 내리게 됨
          + 기술 발전(스케일링, 아키텍처, 인프라 등)은 AI 성능을 가속화하고 있음
     * AI 기반 구매 전환율, 이미 눈에 띄는 수준
          + Adobe 분석: AI 기반 검색을 통한 전환율이 기존 탐색 방식과 격차를 좁히는 중
          + Scrunch AI: 일부 구매 경로에서는 Google 검색 대비 전환율이 2배 이상 높음
     * 마케터와 브랜드가 사라지는 퍼널
          + 고객의 구매 여정이 AI 요약 → 제품 추천 → 선호 예측 → 선택의 형태로 AI에 의해 진행
          + 브랜드는 고객에게 노출될 기회가 줄어들며, 차별화나 신뢰 형성도 어려워짐
          + 일부 사례에서는 관심만 있던 고객이 단 한 번의 AI 응답으로 구매 추천까지 도달함
          + 결과적으로 기존의 퍼널은 잘게 분절되고, 고객이 아닌 AI가 퍼널의 흐름을 지배하게 됨
     * 전환이 빠르게 일어나는 분야
          + 학습, 쇼핑, 스타일 추천 분야는 특히 빠르게 AI 기반 구매 여정으로 이동 중
          + 주요 원인:
               o 사용자들이 개인 데이터 공유에 더 개방적
               o 가격과 중요도가 낮은 선택
               o 잘못된 선택에 대한 리스크가 낮음
     * 새롭게 바뀐 퍼널에 대응하기
          + AI 기반 추천(AI referral)의 부상은 마케팅 및 세일즈 팀에게 전례 없는 변화를 의미함
          + 기업이 AI 에이전트 중심의 퍼널에 최적화하지 않으면, 잠재 고객을 잃게 되는 상황이 이미 발생 중

     문제는, 이 손실을 기업이 인지조차 하지 못할 수 있다는 점
          + 과거에는 고객이 웹사이트를 방문하거나 콘텐츠를 다운로드하며 '탐색 접점'을 남겼음
               o 예: 페이지 뷰, 광고 클릭, 양식 제출, 이메일 구독 등 → 이후 마케팅 재접촉 가능
          + 그러나 AI 기반 구매 퍼널에서는, 이 탐색 과정이 AI 안에서만 이루어지고, 브랜드는 퍼널에 진입조차 못할 수 있음
     * 브랜드가 사라지는 구매 결정 과정
          + 탐색 → 평가 → 후보 선정이 모두 AI 내부에서 비가시적으로 진행
          + 브랜드가 즉각적으로 떠오르지 않거나, AI가 해당 브랜드를 언급하지 않으면 선택지에도 오르지 못함
               o 예외: 재구매나 브랜드 충성도가 높은 고객은 여전히 직접 브랜드로 이동 가능
     * 고객 여정의 세 가지 경로
          + 브랜드 웹사이트로 직접 방문
               o 충성도 있는 고객이나 반복 구매 고객에게 해당
          + AI가 중재하는 구매 흐름
               o AI가 검색, 비교, 추천, 결제까지 전 과정 수행
               o 고객은 AI 응답만 보고 결정을 내릴 수 있음
          + 생성형 AI를 사용하지 않는 고객층
               o 여전히 기존 검색과 탐색을 활용
               o 그러나 이들조차도 검색 결과에 포함된 AI 요약의 영향을 받게 됨

     AI가 구매 퍼널의 초입에서 브랜드를 '필터링'하는 새로운 관문 역할을 하며, 기존의 접점 기반 마케팅 전략은 점점 무력화되고 있음

LLM이 중요하게 여기는 콘텐츠의 기준

     * 앞으로는 전통적 SEO vs AI 최적화라는 이분법이 아닌, 모든 경로에 맞춘 콘텐츠 전략 최적화가 필요해짐
     * 기존 채널(직접 방문, 일반 검색 등)에는 여전히 개인화된 여정 설계, 마찰 최소화 같은 원칙이 유효함
     * 그러나 AI 에이전트를 통한 유입에서는 전통 SEO와는 전혀 다른 가치 기준이 작동함
     * LLM이 브랜드 콘텐츠를 판단하는 방식
          + LLM은 브랜드의 자사 주장만으로는 신뢰하지 않음
               o 대신, 이를 **검증해줄 제3자 출처(earned media, 리뷰, 포럼 등)**를 중시함
          + Scrunch AI 분석 결과:
               o 브랜드명이 포함되지 않은 검색 질의에 대한 AI 응답 중 90% 이상이 외부 콘텐츠에 기반
               o 브랜드명이 언급된 응답조차도 60% 이상은 비브랜드 출처 콘텐츠를 인용
     * LLM이 선호하는 콘텐츠 특성 5가지
          + 언어 스타일
               o 웨비나나 이미지 중심 콘텐츠보다,
               o 블로그나 설명형 글처럼 대화체의 풍부한 문장을 선호
          + 에이전트 친화적 구조
               o 정리된 리스트, 정의, 가이드형 포맷은 LLM이 정보를 요약하기에 적합
          + 스크래핑 가능한 클린 사이트
               o 과거 SEO용으로 제작된 오래된 페이지, 과도한 키워드 삽입은 혼란 유발
               o 정확한 인덱싱과 구조화된 최신 페이지가 효과적
          + 외부 권위 기반 검증 (Off-site earned authority)
               o 언론 기사, 전문가 리뷰, 공신력 있는 외부 매체에서의 인용이 신뢰성 부여
          + 깊이 있는 사용자 대화 (Off-site deep customer conversations)
               o 포럼, 리뷰 사이트, 커뮤니티 등에서의 활발한 언급은
               o 백링크와 브랜드 신뢰도를 높이는 핵심 자산

LLM 시대에 대응하는 3단계 전략

     * 일부 선도 기업은 이미 AI 추천 트래픽 전환이 비즈니스에 미치는 영향을 분석하고 있으며, LLM 기반 마케팅 성과 향상을 위해 투자 중
     * 이 변화에 빠르게 적응하려면, 다음과 같은 실행 중심의 3단계 접근이 필요함
     * 1. 새로운 핵심 지표를 정의하라
          + 변화하는 고객 흐름을 제대로 파악하려면,
            기존 웹 트래픽 외의 새로운 성과 지표가 필요함
          + AI 트래픽이 어떤 가치를 만들어내는지 가시화할 수 있어야,
            마케팅 리드의 주요 원천을 포착하고 추적할 수 있음
     * 2. 퍼널 분석 인텔리전스를 구축하라
          + LLM이 현재 고객 퍼널에 미치는 영향과,
            향후 변화 가능성을 지속적으로 분석해야 함
          + 핵심은 AI 기반 퍼널 구조와 브랜드 노출 상태를 시각화하고,
            업데이트 가능한 점수판(scorecard) 형태로 관리하는 것
          + 같은 입력이라도 LLM은 전통 검색과 전혀 다른 결과를 낼 수 있으므로,
            이 차이를 측정할 수 있는 툴이 필요
     * 3. 실험 가능한 가설을 세우고 빠르게 테스트하라
          + 개선 포인트를 파악했다면,
            우선순위를 정하고 빠른 실험을 실행해야 함
          + 이를 위해서는 신속한 반복 테스트와 영향력 기반 자원 배분 시스템이 필요함
          + 마케팅팀은 영향 실험(influence experiments) 을 통해
            어떤 콘텐츠가 AI에 더 잘 노출되는지 실험하고 확장해야 함

     LLM은 고객이 브랜드를 만나기 전부터 필터링을 시작함
     → 기존 SEO 전략만으로는 대응 불가능
     → LLM을 고려한 콘텐츠 최적화 전략을 도입해야 선순환 구조가 형성됨

결론: 인간이 아닌 ""AI 에이전트에게 최적화""하라

     * 성공적인 LLM 시대의 마케팅은 단지 사람을 설득하는 것이 아니라, AI가 당신의 브랜드를 신뢰하고 추천하게 만드는 것
     * 내부 콘텐츠, 외부 신뢰, 사용자 대화 기반 콘텐츠를 확보할수록 AI가 더 많이, 더 긍정적으로 브랜드를 언급하게 됨
     * 즉, 인간뿐 아니라 AI 에이전트를 위한 콘텐츠 설계가 마케팅의 핵심 과제가 됨

   맞는 말인데.. 기술적인 대응면에선 해야할일이 (당장은) 기존 SEO 대응과 크게 다를게 없어보이네요
"
"https://news.hada.io/topic?id=20539","사람을 믿는 사람들에게 보내는 러브 레터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         사람을 믿는 사람들에게 보내는 러브 레터

     * 열정의 힘: 열정은 사람의 삶을 변화시키는 힘을 가짐. 자신을 믿고 새로운 길을 제시하는 사람들은 우리의 삶에 큰 영향을 미침.
     * 영감을 주는 사람들: Tina Roth Eisenberg는 그녀의 삶에 영향을 준 여러 사람들에 대해 이야기하며, 그들의 열정이 그녀의 삶을 어떻게 변화시켰는지 설명함.
     * CreativeMornings의 시작: Tina는 CreativeMornings라는 커뮤니티 이벤트를 시작하여 창의적인 사람들을 연결하고 지원하는 공간을 만듦.
     * 커뮤니티의 중요성: 커뮤니티는 사람들에게 서로를 믿고 지원하는 문화를 조성하며, 이는 개인의 잠재력을 발휘하게 함.
     * 열정의 전파: 열정은 전염성이 있으며, 사람들을 더 나은 미래로 이끄는 데 중요한 역할을 함.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

열정의 힘

     * 열정은 사람의 삶을 변화시키는 힘을 가짐
     * 자신을 믿고 새로운 길을 제시하는 사람들은 우리의 삶에 큰 영향을 미침
     * 열정은 전염성이 있으며, 주변 사람들에게 긍정적인 영향을 미침

영감을 주는 사람들

     * Tina Roth Eisenberg는 그녀의 삶에 영향을 준 여러 사람들에 대해 이야기함
     * 그녀의 이모 Hugi는 창의적이고 독창적인 삶을 살며 Tina에게 용기를 줌
     * 첫 직장 상사 Matthew Waldman은 Tina에게 뉴욕에서의 새로운 가능성을 열어줌
     * 딸 Ella는 Tina에게 자신의 디자인 스튜디오를 시작할 용기를 줌
     * Jim Coudal은 Tina에게 자신의 아이디어를 세상에 내놓을 수 있는 자신감을 줌

CreativeMornings의 시작

     * Tina는 CreativeMornings라는 커뮤니티 이벤트를 시작하여 창의적인 사람들을 연결하고 지원하는 공간을 만듦
     * 첫 CreativeMornings 이벤트는 2008년 10월에 열렸으며, 50명이 참석함
     * Mailchimp의 공동 창립자 Ben Chestnut는 CreativeMornings의 성장을 지원함

커뮤니티의 중요성

     * 커뮤니티는 사람들에게 서로를 믿고 지원하는 문화를 조성함
     * CreativeMornings는 전 세계적으로 15,000개 이상의 이벤트를 개최하며, 사람들에게 깊고 인간적인 연결을 제공함
     * 커뮤니티는 개인의 잠재력을 발휘하게 하며, 더 나은 미래를 위한 발판이 됨

열정의 전파

     * 열정은 전염성이 있으며, 사람들을 더 나은 미래로 이끄는 데 중요한 역할을 함
     * 사람들은 서로에게 영감을 주며, 서로의 가능성을 확장시킴
     * 열정적인 커뮤니티는 관대함, 친절함, 호기심을 중심으로 한 문화적 변화를 이끌 수 있음

   신뢰 참 좋은 말이죠.
   일방적 파기를 몇 번 경험하다 보면 대체 이게 올바른 일이 맞는 건지 회의감이 들어서 그렇죠.
   ""신뢰할 만한 사람"" 을 찾는 기준이 뭔지도 모르겠교요.

        Hacker News 의견

     * 이 기사는 매우 필요했음. 팬이 된다는 것은 열정을 가져오는 것임. 가능성을 지지하고, 누군가를 믿는 것임. 이는 전염성이 있음. 누군가가 어떤 것에 대해 매우 흥분해 있을 때, 그 열정이 당신에게도 전해짐. 기분이 좋아짐. 당신도 열정을 가져오고 싶어짐
          + 헤밍웨이의 인용문과 대조적임: ""비평가는 높은 곳에서 전투를 지켜보다가 내려와 생존자들을 쏘는 사람들임""
          + 비평가가 되는 것은 사회적으로 안전하고, 쉬우며, 파괴적임
          + 나는 팬이 되고 싶음
     * 오늘날 우리가 겪고 있는 것은 잘못된 곳에 있는 겸손임. 겸손이 야망의 기관에서 이동했음. 겸손이 확신의 기관에 자리잡았음; 원래 그곳에 있어서는 안 됨. 인간은 자신에 대해 의심하도록 되어 있었지만, 진리에 대해서는 의심하지 않도록 되어 있었음; 이것이 정확히 반대로 되었음. 오늘날 인간이 주장하는 부분은 정확히 주장해서는 안 되는 부분임—자신임. 의심하는 부분은 정확히 의심해서는 안 되는 부분임—신성한 이성임. 헉슬리는 자연에서 배우는 것에 만족하는 겸손을 설교했음. 그러나 새로운 회의론자는 너무 겸손해서 배울 수 있을지조차 의심함. 따라서 우리가 성급하게 우리 시대에 전형적인 겸손이 없다고 말했다면 잘못된 것임. 진실은 우리 시대에 전형적인 진정한 겸손이 있다는 것임; 그러나 그것은 사실상 가장 극단적인
       금욕주의자의 절망보다 더 독이 되는 겸손임. 옛 겸손은 인간이 멈추지 않도록 하는 자극제였음; 앞으로 나아가지 못하게 하는 신발 속의 못이 아님. 옛 겸손은 인간이 자신의 노력을 의심하게 만들었고, 이는 그가 더 열심히 일하게 만들 수 있었음. 그러나 새로운 겸손은 인간이 자신의 목표를 의심하게 만들고, 이는 그가 일을 완전히 멈추게 만들 것임
     * 나를 팬으로 삼았던 매니저이자 멘토가 있었음. 누군가가 실제로 나를 응원해주는 것은 놀라운 경험이었음. 그가 나를 응원하고 건설적인 피드백을 주며 나를 이전에 아무도 하지 않았던 방식으로 성장시켜 주었음. 이는 나의 직업적, 사적 성격을 근본적으로 변화시켰음. 아마도 좋은 방향으로
     * Mastodon과 Bluesky 같은 소셜 미디어에서 얻는 최고의 것은 나에 대해 열광하는 사람들을 찾는 것임. 누군가가 내 프로필을 발견하고 지난 한 달 동안 내가 게시한 모든 것을 읽고 그 중 20%를 좋아요 누르는 것을 보면, 나는 팬이 있다는 것을 알게 됨
          + HN에서도 그런 사람들이 존재한다는 것을 알지만, HN 사용자들은 더 신중하고, 그들이 나를 싫어하는 사람들에 맞서 나를 지지할 때만 그들을 알게 됨
     * 몸에 적대적인 뼈가 없는 사람들. 그들은 단지 모두가 행복하고 성공하기를 원함
          + 많은 사람들이 자신에게 해당된다고 생각하지만, 실제로 그런 사람은 드물다는 것이 내 경험임
          + 항상 그런 사람들을 영감으로 삼음
     * 이 여성은 Creative Mornings를 설립했음. 이는 내가 가장 존경하고 사랑하는 준중앙화된 조직 중 하나임 (나는 인간적인 분산/수평 조직/운동을 사랑하는 편견이 있음, 그리고 Creative Mornings는 질서와 혼돈 사이에서 즐거운 균형을 이루었음)
     * ""더 많은 사람들이 '우리가 당신의 마법을 발휘할 수 있도록 하고 싶다'고 말하는 것이 세상에 필요함""
          + 이에 동의함
          + 초기 열정을 찾는 것이 어려웠음. 다른 사람들이 합류하면 정말로 증가하는 것 같음. 그러나 초기 1-2명이 모든 차이를 만듦
     * 잠시 Swiss Miss (핫 초콜릿 가루) 웹사이트인 줄 알았음
     * <i>Pygmalion 효과</i>를 떠올리게 함
     * 이것은 훌륭했음. 팬이 되는 선택은 우리 모두에게 있음
"
"https://news.hada.io/topic?id=20601","LibreLingo – Duolingo의 오픈소스 대체제 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    LibreLingo – Duolingo의 오픈소스 대체제

     * LibreLingo는 커뮤니티 중심의 오픈소스 언어 학습 플랫폼으로, 누구나 사용, 수정, 공유 가능한 AGPLv3 라이선스를 기반으로 개발됨
     * 웹 앱 형태로 제공되며, 설치 없이 브라우저에서 바로 학습 가능하고, Svelte와 PouchDB 기반의 가볍고 현대적인 구조를 지님
     * 스페이스드 리피티션, 진행 상황 동기화, 모바일 호환성 등 주요 기능을 제공하며, 대부분의 코스는 무료로 제공됨
     * YAML 및 JSON 형식의 코스 로딩/익스포트 도구를 통한 커스텀 코스 제작 및 웹앱 배포 지원
     * 기여자 중심의 생태계로, 개발자·언어 애호가·번역가 누구나 쉽게 참여 가능


     * LibreLingo의 목표는 사용자 커뮤니티가 직접 소유하고 운영하는 언어 학습 플랫폼을 만드는 것
     * 모든 소프트웨어는 AGPLv3 라이선스로 공개되며, 코스 제작자에게도 자유 라이선스 채택을 권장
     * 개발 배경은 창립자의 글 참고
          + Duolingo는 뛰어난 기능을 제공하지만, 폐쇄적이고 변화가 사용자 통제 밖에 있다는 점에서 한계를 느낌
          + 언어 학습을 일상 습관으로 유지하기 쉬운, 단순하고 예측 가능한 인터페이스를 만들고 싶었고, 기존 대안들은 초보자 친화성이 부족하다는 문제의식이 있었음
          + 위키 기반처럼 커뮤니티가 자유롭게 기여하고 언어 자산을 확장할 수 있는 구조를 통해 사라지는 언어, 방언, 인공어까지 다룰 수 있는 플랫폼을 지향
          + 단순한 연습 화면부터 시작해 점차 기능을 확장했으며, PouchDB를 활용한 로컬 데이터 저장, Django Admin 기반 코스 편집기, GitHub 커뮤니티 참여 등 실용적 접근으로 발전시킴
     * 설치 없이 웹앱에서 직접 코스를 체험 가능
     * Svelte + PouchDB 기반
     * 주요 기능:
          + 대화형 연습, 스페이스드 리피티션
          + 진행상황 저장 및 여러 기기 간 동기화
          + 모바일/데스크톱 호환
          + 커뮤니티 소유, 자유 소프트웨어 기반

Milestones

     * 스페인어 코스 데모 완성, 기본 테마 및 동기화 기능 구현 완료
     * 기여자 전용 코스 편집기 완성 및 주요 학습 기능 구현 완료

Roadmap

     * 바스크어 공식 코스 출시
     * GitHub 기반의 코스 기여 방식 개선 예정
     * 오디오 지원 및 비라틴 문자 지원 강화 계획

See also

     * omnilingo: 청취 중심의 언어 학습 플랫폼

   LibreLingo의 저자들이 거대한 녹색 올빼미에 의해 흰색 밴에 실려가는 모습이 마지막으로 목격됨 << 예...? ㅋㅋㅋㅋㅋㅋㅋ

        Hacker News 의견

     * 네 개의 언어를 알고 어린 시절에 배운 사람으로서 현재 산스크리트를 배우고 있음. Krashen의 입력 가설과 Orberg의 Lingva Latina가 성인으로서 언어를 배우는 데 가장 좋은 방법이라고 생각함
          + 직접 교수법은 효과가 있지만 시간이 많이 걸리고 직업과 관련된 언어, 예를 들어 영어에 주로 사용됨
          + 문법 번역 방법은 시간 낭비임. 언어 구조에 대한 지적 호기심을 만족시킬 수 있지만 평생 공부해도 이해받기 어려움
          + 수천 개의 무작위 문장을 번역하는 것은 미친 짓이라고 생각함
          + 1년 반의 실패 후 매일 산스크리트 이야기를 읽기 시작했음. 이야기를 통해 문맥이 유지되면서 뇌가 문장 패턴을 인식하기 시작함
          + 다양한 주제를 이해하거나 대화하려면 결국 이야기를 넘어야 함. 하지만 가능함
          + 인도의 많은 사람들이 두 개 이상의 언어를 알고 있음. 많은 사람들이 네 개 이상의 언어를 알 수 있음
     * 언어 공간은 상업적 제안으로 과포화 상태임. LanguageTransfer 외에 좋은 제안이 거의 없음
          + Duolingo는 많은 결함과 교육적 무용성을 가지고 있지만, 결정 부담을 덜어줌. 다음에 무엇을 해야 할지 고민할 필요가 없음
          + 사용자에게 길을 안내할 경로나 트리를 제공하는 것이 중요함. 이렇게 하면 쉽게 시작하고 진행할 수 있음
     * Duolingo 사용자로서 4년 연속 사용 중임
          + Duolingo는 본질적으로 언어 교육 플랫폼이 아님. 언어를 게임 기술로 사용하는 게임 플랫폼임
          + Duolingo는 게임화에 너무 집중하여 게임이 되어버림
          + 무료 버전에서는 대부분 다른 게임 광고를 볼 수 있음
          + Duolingo의 연속 게임화를 일일 동기로 사용하고 보충 자료를 사용하면 언어를 배울 수 있음
     * Duolingo를 약 1년 동안 사용하여 포르투갈어를 배웠지만 최근 Udemy에서 구매한 강좌로 전환했음
          + Duolingo는 어휘 학습에 좋지만 그것이 유일한 강점임. Udemy 강좌를 시작한 후 Duolingo는 단어를 가르치지만 문장 구조나 단어 간의 연결을 거의 가르치지 않는다는 문제를 깨달음
          + 많은 단어를 알지만 문장을 형성하는 방법을 모르기 때문에 대화를 할 수 없음
          + 어휘 학습을 위해 Duolingo를 추천하지만, 학습을 보충하기 위해 강좌를 추천함. 비용도 저렴함
     * LibreLingo를 만든 이유에 대한 개발자의 기사 링크 제공
     * Duolingo의 문제는 언어 번역이 언어를 배우는 가장 좋은 방법이 아니라는 것임. 개념과 단어 사이의 연결을 만드는 것이 가장 좋음. Rosetta Stone처럼. 오픈 소스 Rosetta Stone이 어휘 학습에 더 나을 것임
     * Anki + 몰입 학습이 최고임. 대부분의 일본어 학습자가 따르는 가이드 링크 제공
     * Duolingo가 계약자를 AI로 대체한다는 최근 발표에 대해 더 많은 사람들이 이야기하지 않는 것이 놀라움
     * LibreLingo의 저자들이 거대한 녹색 올빼미에 의해 흰색 밴에 실려가는 모습이 마지막으로 목격됨
     * Duolingo의 대안이 되려는 이유가 궁금함. Duolingo는 기본적으로 번역을 통해 학습에 집중함. 이름에서도 알 수 있듯이 ""Duolingo""임. 언어 학습에 완전히 잘못된 접근 방식임. 초기 단계에서만 유용함. ""Duolingo는 영원한 초보자를 위한 것""이라는 댓글을 읽은 적 있음
"
"https://news.hada.io/topic?id=20609","내재적 동기 형성 방법: 과학적 연구 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내재적 동기 형성 방법: 과학적 연구 리뷰

  요약

   이 글은 내재적 동기(Intrinsic Motivation)에 대한 심층적인 연구로, 저자 자신의 학창시절 경험을 출발점으로 삼고 있다. 저자는 어느 순간 갑자기 공부에 강한 내적 동기를 느꼈던 개인적 사례를 들며, 왜 어떤 활동에 몰두하게 되고, 또 갑자기 동기가 사라지는 현상이 일어나는지를 분석한다.

   핵심 이론으로는 자기결정이론(Self-Determination Theory, SDT)을 중심으로 설명하며, 이 이론에서는 내재적 동기를 '자율성(autonomy)', '유능성(competence)', '관계성(relatedness)'이라는 세 가지 욕구의 충족 여부로 설명한다.

   다양한 실험 연구 결과를 제시하며, 다음과 같은 결론을 내린다.
     * 외적 보상(돈, 칭찬 등)은 상황에 따라 내재적 동기를 증가시키기도 하고 감소시키기도 한다.
     * 보상이 개인의 자율성을 침해할 때 내재적 동기를 저해하며, 반대로 자율성을 존중하면 내재적 동기를 촉진한다.
     * 유능성을 확인시켜주는 긍정적 피드백은 내재적 동기를 높인다.
     * 사람들과의 관계성 역시 중요한 역할을 한다.

   저자는 마지막으로 내재적 동기를 유지하고 키우기 위한 실천적 조언으로, ""아이들이 공부를 즐기길 원한다면, 압박을 그만두고 자율성을 존중해줘야 한다""고 권고한다.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

답을 향한 탐구: 내재적 동기 심층분석

   고등학교 2학년이 되었을 때 갑자기 이상한 일이 벌어졌다.
   나는 공부를 시작했다. 그것도 아주 열심히.

   12세에서 16세 사이 나는 학교에 아무 동기도 없었다. 숙제도 안 했고 시험 공부도 안 했다. 부모님이 매일 두 시간씩 방에서 공부하게 했지만, 나는 창밖만 보며 시간을 보냈다.

   그런데 어느 날 갑자기 나는 변했다. 공부를 잘하고 싶어졌고, 과목이 흥미로워졌으며, 선생님 말씀을 경청하기 시작했다. 외부에서는 갑자기 내가 진지해졌다고 생각했겠지만, 실제로 나는 전혀 힘든 느낌 없이 하루에 12시간씩 공부했다. 오히려 나는 호기심과 활력을 느꼈다.

   이런 현상은 내 인생에서 몇 번 반복됐다. 때로 몇 주, 몇 달씩 쉬지 않고 열심히 일했지만, 어느 순간 갑자기 동기가 사라져 아무것도 할 수 없게 됐다.

   이런 경험은 아마 대부분의 사람에게 공통적으로 일어난다고 생각한다. 하지만 우리는 이 현상을 정확히 이해하지 못한다. 그래서 나는 내재적 동기라는 개념을 깊이 파헤쳐 보기로 했다.

  내재적 동기란 무엇인가?

   내재적 동기란 활동 자체가 즐거워서 보상이나 벌칙과 상관없이 자발적으로 하는 행동이다. 반면 외재적 동기란 외부의 압력이나 보상을 위해 행동하는 것을 말한다.

   내재적 동기가 높을수록 우리는 과제를 즐기고, 더 잘 수행하며, 어려움을 극복하는 데 끈기가 생긴다는 연구가 있다. 나의 가설은 내 삶에서 동기가 갑자기 높아진 시기에 나는 내재적 동기의 강력한 근원을 우연히 발견했기 때문이라는 것이다.

  심리학자들은 내재적 동기를 어떻게 측정할까?

   대표적인 방법은 자유선택 패러다임(free-choice paradigm)이다. 참가자들이 특정 활동(퍼즐 등)을 한 후, 아무 감시나 보상이 없는 자유 시간에 그 활동을 계속 선택하는지 관찰한다. 이때 활동을 더 오래 선택할수록 내재적 동기가 높다고 평가한다. 또한, 참가자들의 주관적인 평가를 통해 활동의 즐거움을 확인하는 설문조사도 활용한다.

  내재적 동기의 원인과 장애 요인

   1971년 Deci의 연구를 시작으로 다양한 실험이 진행됐다. 주요 발견은 다음과 같다.
     * 돈이나 물질적 보상은 내재적 동기를 감소시킬 수 있다(과잉정당화 효과).
     * 보상이 미리 약속되거나, 매우 눈에 띌 때 특히 동기가 저하된다.
     * 반면 예기치 못한 보상이나 활동과 밀접한 관련이 있는 보상은 내재적 동기를 손상시키지 않는다.
     * 이는 보상이 개인의 자율성을 침해하는지 여부와 밀접한 관련이 있다.
     * 긍정적인 언어적 피드백(칭찬 등)은 유능성을 높여 오히려 내재적 동기를 증가시킨다.
     * 사람들과의 친밀한 관계(관계성) 역시 중요한 영향을 미친다.

   이러한 연구 결과는 자기결정이론(SDT)으로 잘 설명되는데, SDT는 동기를 '자율성', '유능성', '관계성'이라는 세 가지 욕구의 충족 여부로 분석한다.

   나의 학창시절 경험도 이 이론과 잘 부합한다. 고등학교 때 부모와 교사의 압박에서 벗어나 자율성이 높아지자 내재적 동기가 상승했고, 성적이 좋아지면서 유능성도 올라가 긍정적 피드백 루프가 형성되었다.

  토론: 비판과 대안적 설명들

   다음과 같은 대안적 설명과 비판들이 제기된다.
     * 도파민 이론: 도파민의 신경화학적 기전을 통해 보상과 동기의 관계를 설명할 수도 있다.
     * 산만함 vs. 자율성: 보상의 효과가 꼭 자율성을 침해해서가 아니라, 관심을 분산시켜서라는 설명도 가능하다.
     * 모방 욕망(Mimetic desire): 주변 사람들의 욕망을 모방하는 현상도 내재적 동기의 형성에 영향을 줄 수 있다.
     * 서구 중심성 비판: 자율성을 지나치게 강조하는 것은 서구 문화 중심의 관점일 수 있다는 비판도 있지만, SDT 이론가들은 자율성과 독립성은 다르며, 관계성도 중요한 요소라고 반박한다.

  최종 결론 및 조언

   내재적 동기는 삶의 질을 높이는 핵심 요소다. 하지만 우리는 자신과 타인의 내재적 동기를 자주 해친다. 연구를 종합해볼 때, 자율성, 유능성, 관계성의 충족이 중요하며, 특히 부모나 교사가 아이들에게 과도한 압력을 가하면 오히려 내재적 동기를 저하시킨다.

   마지막으로 부모들에게 이렇게 조언한다.
   ""자녀들이 공부를 즐기게 하고 싶다면, 간섭을 멈추고 자율성을 존중하세요.""

   보상이 개인의 자율성을 침해할 때, 내재적 동기를 저해한다는 말이 와닿네요

   자기가 하고 싶은 방법은 따로 있는데 내가 하기 싫은 방법으로 해야만 떡고물이 떨어진다면 떡고물이 아니라 뭐가 나와도 기꺼이 재미있어서 하고 싶지는 않겠죠
"
"https://news.hada.io/topic?id=20625","투자자 없이 연간 수익 $250k 달성한 Teams 용 위키 창업 이야기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                투자자 없이 연간 수익 $250k 달성한 Teams 용 위키 창업 이야기

     * Microsoft Teams 내장 위키의 불편함을 해결한 SaaS 제품 Perfect Wiki로, 투자 없이 연 매출 $250,000 달성
     * 창업자 Ilia는 팬데믹 시기 해고 이후 Zoom 및 Teams용 앱을 시도했고, Teams 마켓플레이스의 기회를 포착함
     * 3주 만에 첫 MVP 개발, 텍스트 기반 페이지 작성/검색 가능 위키 앱 출시 후 며칠 만에 첫 유료 고객 확보함
     * 현재 500개 이상 기업이 사용 중, 주요 시장은 미국, 캐나다, 영국, 독일임
     * 핵심 성공 요인은 Teams와의 완벽한 통합, 사용성에 집중한 단순한 인터페이스, 그리고 작은 팀의 민첩성임
     * 2인 팀(개발+CS) 으로 운영, 마케팅 일부 외주 활용, 대부분의 기능은 사용자 요청에 기반해 설계됨
     * 현재 매출 약 월 $25,000, 고정 비용은 $2,000 미만으로 대부분 수익임
     * 창업 목적은 연 $70–80K의 안정 수입이었으며, 지금의 성과는 예상보다 큼
     * 현재는 Teams 외에도 Slack, ChatGPT, 웹 챗봇, 고객 포털 등 다양한 채널로 확장 중임


창업자 배경 및 아이디어 발굴 과정

     * 팬데믹으로 직장을 잃은 후, Zoom 마켓에 번역 앱을 시도했으나 트래픽 부재로 실패
     * Microsoft Teams 마켓에서 가능성을 발견하고, 사용자 불만을 조사해 내장 Wiki의 불편함을 문제로 포착
     * 직관적이고 빠른 사용자 중심의 지식 관리 툴 필요성이 명확해짐

MVP 출시 및 초기 유저 확보

     * 3주 만에 React + Node.js 기반의 첫 버전 완성
     * 페이지 작성, 편집, 전체 텍스트 검색 기능 탑재
     * Teams 마켓에서 'wiki' 키워드로 유입된 유저로부터 며칠 만에 첫 유료 구독자 발생

현재 제품 규모 및 성장

     * 500개 이상의 글로벌 기업 사용 중
     * 연 매출 $250,000 도달, 성장은 완만했지만 꾸준함
     * Microsoft Build 2024에서 공식 사례로 소개되는 성과도 기록

주요 경쟁력

     * Microsoft Teams와의 완전한 통합
     * 별도 브라우저나 탭 없이 Teams 내부에서 바로 이용 가능
     * 경쟁 제품 대비 간결하고 집중된 기능, 일반 사용자 중심의 UX

팀 구성 및 운영 방식

     * Ilia(개발/제품), 동료 1명(고객 지원) 의 2인 팀
     * 마케팅, 콘텐츠 일부는 외주 활용
     * 신기능 도입은 사용자 피드백 기반으로만 결정
     * 자사도 Perfect Wiki를 실사용하며 개선 포인트를 직접 발견

수익 구조 및 비용

     * 월 수익 약 $25,000
     * 고정 비용:
          + Google Cloud: $500–$1000
          + Algolia: $400–$500
          + 기타 SaaS: <$350
          + 외주 인력: <$500
     * 나머지는 창업자 수익

핵심 교훈

     * 좁은 시장의 명확한 문제를 푸는 것이 가장 중요
     * 기능보다 단순함이 유지관리와 영업 모두에 유리
     * 작은 팀에겐 단순함이 곧 생존 전략

향후 계획 및 확장 방향

     * Slack, ChatGPT, 웹 챗봇 등으로 채널 확장
     * 고객센터 구축 기능(예: Help Center) 제공
     * 앞으로도 사용자 피드백 중심 개발 지속 예정

   외주인력 500달러 미만 지출이라... 어디서 동남아 인도 개발자 후려쳐서 일 시키는구만.

        Hacker News 의견

     * Microsoft Teams에서 사용할 수 있는 제품임. 직원들이 주로 시간을 보내는 곳에서 바로 사용할 수 있음
          + 우울함과 두려움이 밀려옴. 억눌린 기억들이 다시 떠오름
          + 훌륭한 제품이며 성공을 축하함
          + HN이 예전에는 사람들이 전문성을 활용해 돈을 버는 이야기들로 가득했음을 그리워함. 요즘은 그런 것이 더 어려워졌는지, 아니면 HN의 뉴스 취향이 바뀌었는지 궁금함
     * Bob Dorf라는 성공한 기업가이자 투자자가 한 말이 마음에 듦
          + ""투자자를 피하라! 가능한 한 오래 투자자를 피하라""라는 조언을 받음
     * 성공적인 이야기임을 축하함. 한 가지 작은 점:
          + 경쟁사 사이트를 확인할 때마다 이상한 점을 발견함. 거의 모든 경쟁사가 Intercom이나 Zendesk 같은 타사 도구를 사용해 고객을 지원함. 제품이 그렇게 훌륭하다면 왜 자신이 사용하지 않는지 의문임. 자신이 사용하고 싶을 만큼 좋은 제품이어야 한다는 것이 황금 규칙임. 그렇지 않다면 문제가 있는 것임
          + Intercom과 Zendesk가 자체 티켓 시스템을 문서와 통합하여 고객 문의 자동 응답을 가능하게 하기 때문이 아닌지 궁금함. Perfect Wiki는 티켓 통합 기능이 없는 것 같음
     * 이 제품은 'You need a wiki'를 떠올리게 함. Google Drive에서 위키를 유지하면서 쉽게 탐색할 수 있게 해줌
          + 모든 파일이 Google Drive에 저장되어 있어 공급업체 종속이 없음
          + 문서 사이트도 그들의 제품으로 만들어짐
     * 이 이야기를 통해 Apple App Store 외에도 생태계가 있다는 것을 잊고 있었음을 깨달음. Apple에서 먼저 출시하는 것에 익숙해져 Teams 애드온을 통해 돈을 벌 수 있다는 것도 몰랐음
     * 성과를 축하함
          + 그러나 Teams에 대한 불만이 있음. Microsoft의 몇 가지 통합 기능이 절대적으로 형편없음. 이미 Microsoft에 너무 많은 비용을 지불하고 있음에도 불구하고 제대로 작동하지 않음
          + 회사가 Teams, Windows 11 온보딩, Azure DevOps, Visual Studio 2022 등으로 인해 Microsoft에 얼마나 많은 돈을 지불하고 있는지 알 수 없음
     * 매우 멋진 이야기임. 좋아함. 기술 동료들을 지원하고 싶지만 러시아의 우크라이나 침공을 직접적으로 지원하는 habr를 지원하고 싶지 않은 사람들을 위한 직접 아카이브 링크 제공
     * MS Teams의 마켓플레이스를 들어본 적이 없음. 아내가 업무에 Teams를 많이 사용하며 좋아함. BrowserBox를 거기에 넣어야겠음. 마케팅 아이디어가 필요함
          + 고객이 진정으로 필요로 하는 것을 알아내기 위해 제품 조사를 한 방식이 정말 좋았음
          + 사람들이 원하는 것을 만드는 정의. 시장을 예리하게 관찰하여 항상 비즈니스를 창출하는 고전적인 방법임. 잘했음
     * 현재 Perfect Wiki 팀은 두 명임
          + 투자자가 있었다면 20명이 되었을 것임. 놓친 기회임
          + 수정: 같은 수익을 내고 실패했을 것임을 언급하는 것을 잊었음
"
"https://news.hada.io/topic?id=20538","Kafka를 처음부터 다시 만들 수 있다면 어떨까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Kafka를 처음부터 다시 만들 수 있다면 어떨까?

     * KIP-1150(디스크 없는 Kafka)과 AutoMQ의 Kafka 포크 프로젝트를 통해 클라우드 최적화 Kafka 논의가 활발해짐
     * Kafka를 다시 만든다면 기존 파티션 구조를 제거하고 키 중심 접근을 제안
     * 동시성 제어와 브로커 사이드드 스키마 지원 기능이 필요한 상황임
     * 확장성, 스냅샷, 멀티 테넌시 같은 최신 시스템 특징을 통합할 필요성도 강조
     * Kafka를 기반으로, 기존 Kafka의 한계를 넘어서는 진정한 클라우드 네이티브 이벤트 로그 시스템에 대한 상상


Kafka를 다시 만든다면?

     * 최근 KIP-1150(디스크 없는 Kafka)과 AutoMQ의 Kafka 포크가 발표되었고, 이는 S3와 같은 객체 스토리지와 Kafka를 통합하여 클라우드 환경에서 탄력성 개선과 비용 절감을 목표로 함
     * 기존 Kafka의 한계를 넘어서는 클라우드 네이티브 이벤트 로그 시스템을 상상하며 다양한 개선 사항을 제안함

파티션 없는 구조 제안

     * 클라우드 객체 스토리지가 무한대 스토리지처럼 동작하기 때문에 토픽 파티션의 필요성이 감소함
     * 글로벌 메시지 순서 또는 동일 키를 가진 메시지 순서만 중요한 경우가 많음
     * 사용자에게 파티션 개념을 숨기고 단순화된 사용성을 제공할 수 있음

키 중심 접근

     * 파티션 스캔이 아니라 특정 키의 모든 메시지에 빠르게 접근하고 재생할 수 있도록 설계 제안
     * 수백만 개의 엔터티 수준 스트림을 지원해 수요에 따라 소비자 수를 유동적으로 조정할 수 있음
     * 실패가 키 단위로 격리되므로 시스템 전체의 처리 효율성이 증가함
     * 이벤트 소싱이나 액터 모델 시스템에 이상적인 구조임

토픽 계층 구조 지원

     * Solace와 같은 시스템처럼 메시지 페이로드 일부를 구조화된 경로 형태의 토픽 식별자로 승격시켜 패턴 기반 구독을 가능하게 해야 함
     * 브로커가 전체 메시지를 파싱하지 않고도 효율적으로 구독 필터링을 지원할 수 있음

동시성 제어 기능

     * 현재 Kafka는 기록 시 동시성 충돌을 방지할 방법이 없음
     * 키별로 낙관적 락(optimistic locking)을 지원하면, 메시지가 최신 상태를 본 후 기록되었는지 검증할 수 있음
     * 업데이트 손실 문제를 방지할 수 있음

브로커 사이드드 스키마 지원

     * Kafka는 현재 메시지를 단순 바이트 배열로 취급해 외부 스키마 레지스트리에 의존함
     * 스키마 일관성 확보를 위해 브로커 차원에서 AsyncAPI 메타데이터 같은 스키마 정보를 기본 지원할 필요성 제안
     * 이를 통해 Apache Iceberg 같은 오픈 테이블 포맷에도 쉽게 연동할 수 있음

확장성과 플러그인 구조

     * Postgres, Kubernetes처럼 확장성과 플러그인 가능성을 갖춘 구조를 제안
     * 프로토콜 인식 프록시(Kroxylicious 등)가 없이 브로커 단 필터나 변환을 쉽게 구현할 수 있어야 함
     * 속도 제한, 토픽 암호화, Iceberg 테이블 기반 백엔드 지원 등이 플러그인으로 구현 가능해야 함

동기적 커밋 콜백

     * 현재 Kafka는 최종 일관성만 보장함
     * 프로듀서가 메시지를 전송한 후, 해당 파생 데이터가 업데이트되었는지 즉시 확인 가능한 구조 필요성 제안
     * 자기 쓰기 읽기 보장(read-your-own-writes) 를 지원해 Kafka를 진정한 데이터베이스 로그로 사용할 수 있게 함

스냅샷 기능

     * Kafka의 현재 압축(compaction)은 마지막 메시지만 남기는데, 이는 전체 상태를 포함하는 경우에만 유효함
     * 변경 사항만 기록하는 경우에는 키별로 이벤트를 모두 재생해야 하므로 시간이 증가함
     * 키 단위로 이벤트를 스냅샷으로 요약하는 논리적 압축 기능이 필요함

멀티 테넌시 기본 지원

     * 모든 현대적 데이터 시스템은 멀티 테넌시를 기본으로 고려해야 함
     * 신규 테넌트 환경을 저렴하고 즉시 생성 가능하게 하고, 자원, 보안, 접근 제어를 철저히 분리해야 함

기타 참고사항

     * 일부 기능은 S2(고카디널리티 스트림), Waltz(낙관적 락), Apache Pulsar(멀티 테넌시) 같은 시스템에서 이미 지원되고 있음
     * 하지만 제안된 모든 기능을 동시에 지원하는 오픈소스 시스템은 존재하지 않음
     * 이 글은 Confluent 소속 저자의 개인적 견해이며 공식 입장은 아님
     * 이론적으로는 LSM 트리 기반 아키텍처가 유력한 선택이 될 것이라고 언급함

   우린 이미 그걸 레디스라고 부르고 있어요

        Hacker News 의견

     * 동의함. 특정 사용 사례에 대해 헤드 오브 라인 문제를 해결할 가치가 있음
          + 그러나 오늘날 모든 스트리밍 시스템(또는 우회 방법)은 메시지 키별 승인에 대해 O(n^2) 비용을 발생시킴
          + Pulsar와 같은 시스템이 이 기능을 위해 자주 사용됨
          + 이러한 복잡성은 매일 나타나지 않을 수 있지만, 나타날 경우 기다려야 함
          + 동료들과 함께 이 문제를 오랫동안 연구한 결과, 확장 가능한 메시지 키별 승인을 지원하기 위해 근본적인 아키텍처 변경이 필요하다는 결론에 도달함
          + 아키텍처는 정렬된 인덱스를 필요로 하며, 이는 n 메시지를 O(n log n)으로 처리함을 의미함
          + 이 주제에 대해 블로그를 쓰고 싶었지만 시간이 없었음
          + 메시지 키별 승인을 의존하려는 경우, 간헐적인 중단이나 지연을 예상해야 함
     * NATS.io는 Kafka보다 사용하기 쉬우며, 파티션 제거, 키 기반 스트림 지원, 유연한 주제 계층 구조와 같은 여러 점을 이미 해결함
     * Kafka와의 여정은 대부분 비슷함
          + 처음에는 ""오, 확장 가능한 append-only 로그, 훌륭하고 간단함""이라고 생각함
          + 그러나 사용해보면 매우 복잡하다는 것을 깨닫게 됨
     * 특정 사용 사례에서는, 생성 요청이 승인될 때 파생 데이터 뷰가 업데이트되었음을 보장할 수 있다면 유용할 것임
          + Kafka를 사용하지 말고, 하위 데이터 저장소에 직접 기록해야 함
          + 그러면 데이터가 커밋되었음을 알고, 쿼리할 수 있는 데이터베이스를 가질 수 있음
     * 6년 전 이 질문을 했음
          + Rust로 작성하고 WASM을 활용하면 어떨까
          + 지난 6년 동안 이 작업을 진행해 왔음
          + 지난 2년 동안 Rust와 WASM을 사용하여 Flink를 구축해 왔음
     * Kafka의 객체 저장소? 이는 지연 시간과 비용을 10배 증가시킬 것임
          + Kafka는 성공의 희생양임
          + 설계가 간단하고 우아하여, 원래 설계되지 않은 다양한 용도로 사용되고 있음
          + 물론 이러한 사용 사례에 완벽하지 않음
     * ""파티션 제거""와 ""키 수준 스트림""에 대해
          + 스토리지 백엔드를 물리적 파티셔닝에 의존할 때, 이는 단순히 파티션을 키로, 키를 이벤트로 이름을 바꾸는 것과 같음
     * Northguard를 주목해야 함
          + 이는 LinkedIn의 Kafka 재작성 이름으로, 약 일주일 전 스트림 처리 모임에서 발표됨
     * Apache Kafka의 문제 중 얼마나 많은 것이 Apache Pulsar로 전환함으로써 해결되는지 궁금함
          + Kafka 학습을 건너뛰고 바로 Pulsar를 사용했음
          + 우리 사용 사례에 잘 맞음
          + 불만 없음
          + 그러나 왜 그렇게 적은 사람들이 사용하는지 궁금함
     * 유용한 사고 실험임
          + Kafka를 새로운 것으로 대체해야 한다는 결론을 제안하는 답변들이 조용함
          + Kafka의 가장 큰 강점은 그 위에 구축된 넓고 유용한 생태계임
          + 이는 또한 약점임
          + 오늘날 처음부터 시작했다면 하지 않았을 디자인 결정을 일부 유지해야 함
          + 아니면 역호환성을 포기하고, 이미 가지고 있는 생태계를 재구성해야 함
"
"https://news.hada.io/topic?id=20617","생성형 AI는 일자리 대체나 임금 하락에 영향을 주지 않았다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   생성형 AI는 일자리 대체나 임금 하락에 영향을 주지 않았다

     * 최신 연구에 따르면, ChatGPT, Claude, Gemini 등 생성형 AI가 일자리나 임금에 실질적 영향을 주지 않음
     * 덴마크 11개 직군, 25,000명 대상 분석에서 수입과 근무 시간에 유의미한 변화 없음이 확인됨
     * AI 사용으로 신규 업무가 생기며 오히려 시간 절약 효과 상쇄, 실제 절감 시간은 주 1시간 수준
     * 기업의 AI 도입은 빠르게 확산됐지만, 생산성 향상이나 임금 상승 효과는 제한적임
     * 연구진은 ""변화를 이야기하려면, 2년이 지난 지금조차 임금이나 근무시간 변화가 없다는 점을 설명해야 한다""고 지적함
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

연구 개요

     * 시카고대 Booth School 경제학과의 Anders Humlum과 코펜하겐대 Emilie Vestergaard가 공동 연구
     * 덴마크 내 회계, 고객지원, HR, 마케팅, 소프트웨어 개발, 교사 등 AI 도입에 민감한 11개 직군 분석
     * 2023~2024년 세금 데이터를 기반으로 실증 분석 수행

주요 결과

     “AI 챗봇은 어떤 직군에서도 수입이나 근무 시간에 의미 있는 영향을 주지 않았다.”

     * AI 도구 채택은 매우 빠르게 이루어졌으며, 대부분의 노동자는 이를 활용 중임
     * 64~90%가 시간 절약을 체감했지만, 평균 절감 시간은 주당 2.8% (약 1시간) 에 불과함
     * AI 도구 사용에 따른 임금 인상 효과도 3~7% 수준으로 제한적임

생산성보다 업무 재편

     * AI는 일부 사용자에게 새로운 업무를 발생시킴(8.4%) → 시간 절약 효과 상쇄
     * 예: 교사들이 숙제 부정행위 감시 등 AI 관련 신규 업무에 시간 소모
     * 사용자 중 다수는 AI 결과 검토나 프롬프트 작성 등에 시간 소모한다고 응답

기대와 현실의 간극

     * 기존 RCT 연구들(생산성 15% 상승 주장)과 상반된 결과
     * 차이는 ① 실제 직무는 완전 자동화하기 어려움, ② 현실의 도입 환경은 제한적이라는 점 때문
     * 연구진은 기업의 내부 교육과 활용 문화가 중요한 변수라고 지적

결론

     “AI 도구가 매우 혁신적이라는 주장은, 도입 2년이 지난 지금도 경제적 효과가 없다는 점과 맞물려야 한다.”

     * AI 도구는 이미 빠르게 확산됐지만, 단기적 경제 효과는 미미함
     * 지금까지는 기업의 기대 수익 대비 실질 효용이 낮아, 인프라 투자 회수 가능성에 의문 제기됨

   그런데 왜 테크기업에서의 해고가 계속 확산되고 있을까요?

        Hacker News 의견

     * 나는 일반적으로 AI에 회의적이지만, 지금 이 결정을 내리기에는 너무 이른 것 같음. 예술가, 초급 코더 등과 같은 명백한 최전선 지원 외에도, 다이어트 전문가, 금융 상담사, 세무 대리인 등과 같은 ""X에 대한 조언을 해주는"" 직업들이 심각한 위험에 처해 있음
          + 예를 들어, 최근 Gemini를 사용하여 세무 상담을 받았는데, 이는 면허가 있는 세무 대리인에게 수백 달러를 지불해야 했을 것임. 답변은 실제 세무청 웹사이트의 출처를 통해 지원되었으며, 내가 누군가에게 비용을 지불해야 할 것이라고 생각했던 것을 정확히 계산하는 공식 계산기의 링크도 포함되어 있었음
     * 나의 주요 걱정은 ""근로자를 대체할 것""이 아니라 전체 부문의 가치를 파괴할 수 있다는 것임. 이력서를 보내는 것을 생각해보면, 양쪽이 자동화되면 그 관행은 실제로 불필요함. ""게시""하고 ""지원""하는 개념은 사라져야 함. 따라서 이를 지원하는 모든 인프라도 사라져야 함. 어느 시점에서도 성공적으로 ""일을 수행""하지 않았지만, 신호 대 잡음 비율에 대한 손상은 시스템의 경제적 가치를 없앰
     * 이것이 Google 검색에 일어난 일임. 케이블 뉴스처럼 일부 감소하는 청중이 여전히 ""이해하지 못하기"" 때문에 어느 정도 지속되지만, 쇠퇴는 쇠퇴임
     * Paul Tetlock의 연구를 읽어보면 이른바 ""전문가""들이 좋은 예측을 하지 못하는 것을 알 수 있음
     * 나의 견해는 다음과 같음:
          + 판단하기에는 너무 이른 시점임
          + ChatGPT의 출시로 인해 사고방식의 혁명이 일어났음. 사람들은 이제 무엇이 가능한지 ""이해""하고 있으며, 사람들이 본 것에 대한 새로운 사용 사례를 구상하고 추구하도록 장려함
          + 번역가가 되기 위해 훈련하는 것을 추천하지 않음; LLMs 이전에도 사람들은 번역된 단어 또는 줄당 적은 금액을 받았으며, 문서의 이전 버전에서 번역을 캐시하는 도구(SDL TRADOS 등)로 인해 요금이 더욱 하락했음. 통역사에게는 같은 하락이 예상되지 않음
          + 로고 디자인과 유사한 작업으로 생계를 유지하는 그래픽 디자이너는 요청이 줄어들 수 있음
          + 텍스트 편집자(산문을 편집/교정하는 사람, 컴퓨터 프로그램이 아님)는 LLMs로 대체될 것임
          + LLMs는 이제 이메일 클라이언트, 워드 프로세서, 워크플로우 도구 및 채팅 클라이언트에 이르기까지 다양한 제품에 내장될 기본 기술임. 이는 2-3년이 걸릴 것이며, 그 후 비서/관리/분석가 유형의 배경을 가진 사무실에서 필요한 인원 수를 줄일 수 있음
          + 산업계는 이미 의사와 변호사를 위한 차세대 스마트 도구의 개발에 착수하고 있음. 이는 3-5년의 개발이지만, 일부 초기 채택자는 이미 2-3년 전에 시작했음. 이것이 출시되면 법무사와 같은 보조 유형의 직업에 대한 수요가 줄어들 것임
     * 겸손하게 반대함. AI로 인해 팀원과 때로는 전체 팀이 해고되는 것을 보았음. 해고뿐만 아니라 채용 과정과 수요도 영향을 받았음
          + 예를 들어, 많은 회사가 최근 ""AI 우선"" 모델로 지원을 전환했음. 결과적으로 팀이나 특정 팀원이 해고되지 않았더라도 지원 채용의 일반적인 추세는 거의 감소했음(일화적)
          + 일부 자동화가 인간이 일을 더 잘 수행하는 데 도움이 된다고 동의하지만, 이것은 그런 경우가 아님. 지원을 찾을 때, 무언가가 분명히 잘못되었음. AI에게 말하거나 타이핑하여 무작위로 관련 없는 기사를 응답하거나 ""죄송합니다, 잘 이해하지 못했습니다""라고 응답하는 것은 ""진보"", ""개발"", ""현대화"", ""미래지향적"", ""기술"" 등의 이름으로 책임을 회피하는 것임
     * 다음 모든 것이 사실일 수 있음:
         1. 이 연구는 정확함
         2. 우리는 주요 기술 변화의 초기 단계에 있음
         3. 기업들은 이 변화에 막대한 자본을 할당했으며, 이는 좋은 투자를 나타내지 않을 수 있음
         4. 위의 세 가지가 앞으로도 계속 사실일 것이라고 가정하는 것은 나쁜 생각임
          + .com 붐과 붕괴는 적절한 참조점임. 기술 변화는 실제였고, 궁극적으로 전달될 가치도 전달되었지만... 1999/2000년에는 아니었음
          + 우리는 평가의 대규모 붕괴를 볼 수 있지만 AI는 여전히 향후 5-10년 동안 소프트웨어 가치의 지배적인 동력이 될 수 있음
     * 연구는 2023-24년 덴마크의 11개 직업을 살펴봄
          + 아마도 2025년 미국을 살펴보는 것이 좋을 것임. EU 노동 규정은 직원 해고를 훨씬 더 어렵게 만듦. 2023년은 주로 GenAI의 과대 광고의 해였음. 실제 기업 채택(무료 공급업체 파일럿이 아님)은 2024년 하반기에 시작되었음
          + 그럼에도 불구하고 많은 CEO가 ""모든 직원을 먼저 해고하고, AI(또는 저비용 해외 노동력)로 일을 수행하는 방법을 나중에 알아내는"" 접근 방식을 취한 것 같음
     * 이러한 경제학자 중 누구라도 초급 그래픽 디자이너/일러스트레이터로 간신히 살아본 적이 있는지 궁금함
          + 분명히 그렇지 않은 것 같음, 이와 같은 특정 작업은 거의 사라졌음 --- AI로 생성된 모든 이미지는 누군가가 이미지를 계약하지 않았던 경우를 나타냄(스톡 이미지도 마찬가지지만, 이는 다른 대화임)
     * 경제학자들은 예를 들어 ""AI 챗봇이 도구를 사용하지 않는 일부를 포함하여 8.4%의 근로자에게 새로운 작업 과제를 생성했다""고 발견함
          + 나에게 가장 흥미로운 점임. 작업을 생각하고, 그것을 부분으로 나누고, 일부는 자동화할 수 있으며, 절약을 계산하는 것은 쉬움. 그러나 자동화의 2차적인 결과를 고려하는 것은 더 어려움. 때로는 이미 다른 병목 현상이 있었기 때문에 아무것도 절약하지 못함. 때로는 초기 단계에서 약간의 시간을 절약함으로써 나중에 더 많은 작업을 초래할 수 있음
          + 이는 자동화를 공공의 비극 상황으로 만들 수 있음: 특정 것을 자동화하지 않는 것이 모두에게 집단적으로 더 좋지만, 일부에게는 개별적으로 더 좋기 때문에 발생함
     * 이 연구에는 몇 가지 문제가 있음, 첫째:
          + AI 챗봇은 어떤 직업에서도 수익이나 기록된 시간에 큰 영향을 미치지 않았음
          + 그러나 생성 AI는 단지 AI 챗봇이 아님. 소리/음악을 생성하는 것, 이미지를 생성하는 것 등이 있음
          + 또 다른 점은 연구가 덴마크만을 살펴보았다는 것임, 이는 일과 삶의 균형에 대해 상당히 건강한 태도를 가진 국가임, 자신의 일을 자랑스럽게 여기는 국가가 아님
          + 연구는 AI 생성 제품의 효과도 다루지 않음: 음악이나 그림이 5세 어린이가 입력한 프롬프트에 기반하여 AI에 의해 단 1분 만에 생성될 수 있다면, ""예술 작품""에 대한 기대 가치는 감소할 것이며, 인간 예술가로부터 구매할 때 동일한 가격을 지불하지 않을 것임
     * 그들이 살펴본 모든 직업(11개)은 적어도 중간 수준의 복잡성과 작업 위임을 포함함. 그들은 저렴한 노동력(보조원 등)에게 시간 소모적인 저수준 작업을 할당하는 사람들임. AI 보조 도구를 사용하여 직접 수행함으로써 보조원이 사용 가능해질 때까지 기다리는 대신 시간과 비용을 절약할 수 있음
          + 나는 AI가 이미 많은 직업을 파괴했으며 앞으로도 파괴할 것이라고 100% 확신함. 컴퓨터가 향후 10년 동안 1000배 더 빠르고 강력해질 때 세계 질서를 혼란에 빠뜨리는 변화를 겪을 가능성이 높음
          + 설명된 직업은 AI가 그들보다 더 나아지면 장기적으로 사라질 수 있음(구식이 되거나 대체됨). 예를 들어, 방금 HN에서 또 다른 기사가 언급되었음: ""Gen Z 졸업생들은 AI가 직장에 침투하면서 대학 학위가 시간과 돈 낭비였다고 말함"" 이는 교사를 구식으로 만들 것임
"
"https://news.hada.io/topic?id=20565","HN 공개: 원격 제어 IKEA Deathstar 램프","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HN 공개: 원격 제어 IKEA Deathstar 램프

     * 이 프로젝트는 IKEA PS 2014 램프를 스타워즈의 데스스타로 변신시키고, 모터화 및 원격 제어 기능을 추가하는 방법을 설명함
     * ESP8266 보드와 A4988 스테퍼 모터 드라이버를 사용하여 램프의 개폐 및 모터 속도를 제어하며, Home Assistant와의 통합을 지원함
     * 램프의 외관을 개선하기 위해 회색 프라이머와 화강암 효과 스프레이를 사용하여 3D 텍스처를 추가함
     * 모든 기계 부품은 3D 프린터로 제작 가능하며, 전자 부품은 램프 프레임에 직접 부착됨
     * Home Assistant를 통해 램프의 개구율과 모터 속도를 조절할 수 있으며, 일조량에 따라 자동으로 조절하는 기능도 구현 가능함
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Deathstar 램프

     * IKEA PS 2014 램프를 스타워즈의 데스스타로 변신시키는 프로젝트임
     * 램프에 모터화 및 원격 제어 기능을 추가하여 더 많은 기능을 제공함

타임랩스

     * 패널을 회색으로 프라이밍하고, 화강암 효과 스프레이로 트렌치와 계곡을 추가하여 3D 텍스처를 만듦
     * 수동 로프 작동 메커니즘을 스테퍼 모터와 리드 스크류로 교체함
     * 리미트 스위치를 사용하여 전원 손실 후에도 홈 위치를 알 수 있도록 함

부품 목록 (BOM)

     * IKEA PS 2014 14"" 램프, E27 전구, 마스킹 테이프, 플라스틱 프라이머 스프레이, 회색 스프레이, 화강암 효과 스프레이, 블랙 터치업 펜 등 다양한 부품이 필요함

제작 지침

  페인팅

     * 패널의 외부에 플라스틱 프라이머를 적용하고, 회색으로 스프레이함
     * 패널과 팔을 라벨링하여 나중에 조립할 때 순서를 알 수 있도록 함
     * 데스스타의 트렌치와 계곡을 테이프로 덮고, 화강암 효과 스프레이로 마무리함

  기계적 구성

     * 원래의 프레임 메커니즘을 완전히 분해하고, 3D 프린터로 모터 마운트와 프레임 플레이트를 출력함
     * 리드 스크류와 모터를 연결하고, 모든 부품이 원활하게 움직이는지 확인함

  전자 부품

     * ESP8266 보드, DC 컨버터 보드, A4988 스테퍼 모터 드라이버 보드, 12 V 전원 공급 장치를 U자형 프레임에 부착함
     * 모든 보드를 KiCad 회로도에 따라 연결하고, 전선을 프레임에 고정함

  펌웨어

     * Nix 패키지 관리자를 설치하고, ESPHome을 사용하여 펌웨어를 컴파일 및 업로드함
     * 로컬 네트워크에서 mDNS를 통해 웹 인터페이스에 연결 가능함

Home Assistant 통합

     * ESPHome 장치를 Home Assistant에 설치하여 자동으로 램프를 발견하고 설정할 수 있음
     * 개구율과 모터 속도를 조절할 수 있으며, 일조량에 따라 자동으로 조절하는 기능도 구현 가능함

        Hacker News 의견

     * 정말 멋진 프로젝트임. 나는 첫 모델을 소유했었고 램프를 모터로 움직일 수 있는 방법에 대해 생각했음. 내가 소유했던 것은 내부 패널에 반사 코팅이 없는 것이었음. 독일에서는 몇 년 전부터 흰색에서 은색이나 금색 반사로 바뀌었음. 이제 램프는 더 큰 사이즈로도 제공됨. 나는 대부분의 사람들처럼 흥미로운 디자인 때문에 샀음. 하지만 만족스럽지는 않았음. 닫아 놓으면 실용성이 전혀 없음. 그래서 모터로 움직이게 한 것 같음. 하지만 열어 놓아도 너무 어두워서 약속된 조명으로는 사용할 수 없었음
     * 이 램프가 바이럴되기 전에 소유했었고 설치가 악몽이었음. 다른 조명처럼 천장에 나사로 고정하는 것이 아니라, 갈고리를 설치하고 그 위에 걸어야 했음. 그래서 플라스틱 주변이 천장에 밀착되지 않음
          + 여러 번의 고통스러운 시도 끝에 밀착시키더라도, 중력 때문에 코드가 늘어나면서 베이스가 천장에서 약간 떨어지게 됨
          + 나처럼 OCD가 있는 사람에게는 이 램프가 그 OCD를 상기시키는 끔찍한 존재였음. 결국 램프를 포기했음
          + 안타까운 것은 정말 멋진 디자인의 램프였음
     * 이 이야기는 일종의 해킹이나 적응을 떠올리게 함
          + 나는 IKEA 램프를 샀지만 하드와이어드 램프라서 설치가 프로젝트가 되었음
          + 어느 날 홈디포에서 매달린 램프를 트랙 조명 레일로 변환하는 어댑터를 판매하는 것을 발견했음. 어댑터를 연결하고 식탁 위의 트랙 조명에 끼워 넣음
          + 이렇게 하면 IKEA 천장 램프를 더 쉽게 사용할 수 있을 것 같음
     * Deathstar 램프의 펌웨어를 커스터마이즈하여 음악이나 다른 트리거에 맞춰 자동으로 열리고 닫히는 사이클을 추가할 수 있는지 궁금함
     * 5월 4일에 딱 맞춰서 잘했음
     * 정말 멋진 프로젝트임. 나는 PS 2014의 큰 팬임. 나에게는 IKEA 제품 중 최고의 제품 중 하나임. 단종된 Broder 선반 시스템보다도 더 좋음. 우리는 거의 10년 전에 아들의 방에 구리 반사판이 있는 큰 버전을 샀고, 오늘날까지 그 메커니즘이 작동하고 멋지게 보임. (알고 있는 사람들에게는 ""방을 하나로 묶어주는"" 느낌임). 내 생각은 줄에 있는 공을 열쇠고리에서 작은 철제 x-wing으로 교체하는 것이었지만, 연결부가 x-wing의 뒤쪽에 있어서 항상 잘못된 방향으로 날아갔음. 나는 x-wing이 우리의 death star에서 계속 겁쟁이처럼 도망가는 것을 원하지 않음
          + 이 프로젝트는 멋져 보이고 첫 ESP32 프로젝트로 시도해볼 만한 것 같음. 하지만 아들의 램프를 작업하기 전에 PS 2014의 작은 버전에서 먼저 시도해볼 것임
     * IKEA PS 2014 램프는 정말 Death Star임. 구형 때문만이 아니라, 그것을 생산한 공장을 파산시킨 중요한 역할을 했기 때문임. 위키피디아에 따르면, 헝가리의 Szarvasi Vas-Fémipari Zrt. 공장은 2011년에 서유럽 시장을 위한 고급 디자인 램프를 제조할 계획을 세웠음. 2018년까지 20억 포린트를 투자하여 IKEA의 램프 패밀리 중 하나의 독점 공급업체가 되기 위한 개발 프로젝트를 진행했음. 전성기에는 연간 130,000개의 커피 메이커와 200만 개의 램프를 생산했음. 그러나 PS 2014 램프를 너무 낮은 가격으로 생산하는 것이 지속 가능하지 않아 결국 공장의 몰락을 초래했음. 저비용을 우선시하는 것이 지속 가능성과 공정한 노동 관행보다 위험하다는 경고의 이야기임. Death Star 램프는 많은 가정에 스타일리시하고 저렴한 추가물이었지만, 그 생산은 관련된 노동자와 지역 사회에
       상당한 비용을 초래했음
     * 이 램프는 몇 년 전 게임 디자이너 미즈구치 테츠야와 그의 친구/팬들 사이에서 큰 반향을 일으켰음. 왜냐하면 그것이 Rez의 첫 번째 보스를 닮았기 때문임. 이 이야기를 봤을 때 모델 번호를 인식하지 못했고 ""이게 Rez 램프인가?""라고 생각했음. 알고 보니 맞았음
     * 이 램프는 항상 나를 이런 것을 시도해보고 싶게 만들었지만 인내심이 부족했음. 물어보고 싶음, 이런 것들은 신기함이 사라진 후에도 재미있게 남아 있는지
     * 왜 이 램프가 사람들에게 Death Star를 떠올리게 하는지 궁금함. 나와 아내는 10년 전에 멋진 메커니즘 때문에 샀고 즉시 Death Star라고 부르기 시작했음. 하지만 그 유사성을 정말로 이해하기는 어려움
"
"https://news.hada.io/topic?id=20608","구글, NotebookLM의 오디오 오버뷰를 50개 이상 언어로 지원 확대","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               구글, NotebookLM의 오디오 오버뷰를 50개 이상 언어로 지원 확대

     * 사용자의 자료를 팟캐스트 스타일의 대화형 오디오 콘텐츠로 생성해 주는 오디오 개요(Audio Overviews) 기능이 이제 50개 이상의 언어를 지원함 (한국어 포함)
     * 작년에 출시하며 큰 인기를 끌었으며, Gemini의 오디오 지원 기술 덕분에 더 많은 언어로 제공 가능해졌음
     * 기존엔 계정의 설정 언어로 자동 생성되었으나, 이제 출력 언어(Output Language) 설정 옵션이 추가되어 원하는 언어로 오디오 및 챗 응답을 받을 수 있음
     * 언어는 언제든지 변경 가능하며, 이를 통해 다국어 콘텐츠 생성이나 학습 자료 제작이 가능해짐
     * 예를 들어, 교사가 올린 아마존 열대우림에 대한 포르투갈어 다큐, 스페인어 논문, 영어 보고서를 수업 자료로 공유하면, 학생들이 각자 언어로 요약 오디오를 들을 수 있음
     * 언어 장벽을 허물고 다양한 언어 사용자에게 정보 접근성을 높이는 효과
     * 이번 업데이트는 기능의 초기 형태로, 사용자 피드백을 바탕으로 지속적인 기능 개선 및 확장예정
     * notebooklm.google 에서 이용 가능

   직접 녹음하다가 중단한 긱뉴스 팟캐스트를 이걸로 만들어봐야 겠어요.

   오늘 올라온 The One-Person Framework 실전 적용기 를 팟캐스트로 만들어 봤습니다. 훌륭하네요.

   https://notebooklm.google.com/notebook/…

   요즘 구글이 파운데이션 모델의 성능만 좋아진 게 아니고, 이런 서비스와 접목하는 부분도 너무 좋은 것 같습니다.

   와 이건;; 대박이네요

   걍.. 미쳤습니다.. 유료로 전환된다 해도 돈내고 쓸 퀄리티 입니다.
   내가 관심있어 하는 주제를 팟캐스트 형태로 들으니 더 관심있게 정보를 습득하게 됩니다
   너무 좋네요

   썹핬는데 진짜 대박....

   돈내고 쓰라면 리거 하나만 쓸것 같네요. 비슷한 서비스들은 여파가 크겠네요.

   와우 대단하네요.

   한국어는 한국인 원어민 입니다. 정말 잘 나오네요~ 계속 이용해야 겠습니다.

   한국말도 되게 잘나오네요. 얼마전까지 영어만 되서 아쉬웠는데 자주 애용해야겠습니다.

   사용해봤는데 진짜 팟캐스트처럼 만들어주네요. 놀랍습니다

   출근길에 사용해 보는데, 정말 좋습니다! 팟캐스트는 듣고 싶은데 항상 들을 게 마땅치가 않았던 터라 매우 만족스럽네요. 읽으려고 쌓아둔 논문이나 아티클 하나씩 던져두고 미리 만들어두려고요.
"
"https://news.hada.io/topic?id=20543","2025년 주목해야 할 AI 100대 기업 - CB Insights 보고서 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              2025년 주목해야 할 AI 100대 기업 - CB Insights 보고서 분석

   인공지능(Artificial Intelligence) 분야는 전례 없는 속도로 발전하고 있습니다. 2024년 초부터 지금까지 수천 개의 새로운 AI 기업이 설립되었으며, OpenAI와 Anthropic과 같은 대형 기업들이 주도하는 AI 산업 투자액은 1,700억 달러를 넘어섰습니다. 이렇게 빠르게 성장하는 시장에서 진정한 혁신 기업을 찾아내는 것은 매우 어려운 과제입니다.

   CB Insights의 제9회 연례 'AI 100' 보고서는 이러한 복잡한 생태계 속에서 방향성을 제시합니다. 이 보고서는 시장 견인력(market traction), 투자자 품질(investor quality), 인재 확보(talent acquisition) 등 다양한 요소를 분석하여 17,000개 이상의 기업 중 가장 유망한 초기 단계 AI 기업 100곳을 선별했습니다.

   이 분석에서는 AI 100 보고서의 핵심 트렌드와 주요 카테고리별 특징을 살펴보고, 글로벌 AI 시장의 방향성을 파악하고자 합니다.

Key Takeaways on the AI 100 - Summary

    1. AI 에이전트가 주도적 역할 수행
          + 사용자를 위해 작업과 프로세스를 자동화
          + 모든 기업 기능에 통합되고 있음
          + 인프라 및 산업별 애플리케이션으로 확장 중
          + 전체 기업의 21%가 AI 에이전트 관련 기업
          + 투자자들이 우선순위로 지목
    2. ML 보안이 필수 요소로 자리잡음
          + AI 애플리케이션 보안 필요성 증가
          + 전략 팀 리더 46%가 보안을 AI 도입의 주요 장벽으로 지목
          + ML 보안 기업들이 AI 알고리즘과 기반 모델 강화
          + AI 기반 공격에 대한 방어 시스템 개발 중
    3. AI 관찰 및 거버넌스가 중요한 과제
          + AI 사용 확산으로 기술적 문제점 노출(환각, 조정 부족, 부정확성)
          + 강력한 모니터링 없이는 AI 보편화 불가능
          + 관찰성과 거버넌스 분야 스타트업 증가
          + AI 에이전트 모니터링으로 신뢰성과 규정 준수 보장 노력
    4. 물리적 영역으로 확장되는 AI
          + 소프트웨어 AI에서 물리적 AI로 진화
          + 로봇공학, 멀티모달 모델, 엣지 컴퓨팅, 합성 데이터, 공간 지능 발전
          + 물리적 환경에서 행동하는 하드웨어-소프트웨어 결합
          + 산업용 휴머노이드가 초기 형태로 등장
          + 자율 방위 드론, 가정용 로봇 등으로 발전 가능성
    5. 산업별 특화 애플리케이션 급증
          + 2024년: 범용 기업이 더 많은 자금 유치($1.6B vs $1.2B)
          + 2025년 현재: 산업별 특화 기업이 주도($1.1B 자금 유치)

   ai가 사물과 연동되어 최초의 인명 살상이 벌어질 때가 분명 오고 있음. 그 사람과 ai는 역사에 영원히 남을것임.

   포함된 한국 회사는 Upstage 가 유일한듯 하네요

   Dnotitia도 한국 회사입니다~

   Nota, sahra 한국회삽니다.
"
"https://news.hada.io/topic?id=20584","AI가 알츠하이머병의 원인을 밝히고 새로운 치료 후보 물질을 발견하는데 도움을 주다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI가 알츠하이머병의 원인을 밝히고 새로운 치료 후보 물질을 발견하는데 도움을 주다

     * UC 샌디에이고 연구팀이 AI를 활용하여 PHGDH 유전자의 새로운 역할을 규명하고, 알츠하이머병의 원인으로 작용함을 확인함
     * PHGDH 단백질의 비효소적 기능이 유전자 발현 조절을 방해해 질병을 유도하는 경로를 처음으로 밝혀냄
     * AI 기반 단백질 3D 구조 예측을 통해 DNA 결합 도메인과 유사한 구조를 찾아냄으로써 이 기전을 입증함
     * 해당 경로를 차단할 수 있는 소분자 억제제 NCT-503을 발견, 동물 실험에서 기억력과 불안 증상 개선 효과 확인됨
     * 향후 임상시험을 위한 최적화 및 FDA IND 연구가 예정되어 있음


연구 배경

     * 65세 이상 노인 9명 중 1명이 알츠하이머병을 앓고 있으며, 대다수는 유전적 돌연변이 없이 발생하는 자발성 알츠하이머병임
     * 기존 치료법은 효과가 제한적이며, 근본 원인 파악이 새로운 돌파구로 주목됨

PHGDH 유전자 분석

     * 연구팀은 혈액 바이오마커로 알려진 PHGDH 유전자에 주목하여 질병 진행과의 상관관계를 확인함
     * 실험에서 PHGDH 발현량이 높을수록 알츠하이머 진행이 심화되며, 발현량을 낮추면 증상이 완화됨
     * 이를 통해 PHGDH가 질병을 유발하는 인과 유전자(causal gene) 임을 입증함

AI의 기여와 새로운 기전 발견

     * AI 기반 단백질 3D 구조 분석을 통해, PHGDH 단백질 내에 DNA 결합 도메인 유사 구조가 존재함을 발견함
     * 이 구조는 유전자 발현 조절 경로를 방해해 신경세포 기능에 이상을 일으킴
     * PHGDH는 단순한 효소 역할뿐 아니라, ""moonlighting""이라는 이중 역할을 수행함

치료제 후보: NCT-503

     * 기존 효소 활성을 억제하지 않으면서 비효소적 기능만 차단하는 NCT-503에 주목함
     * 해당 분자는 혈액-뇌 장벽을 통과할 수 있으며, PHGDH의 DNA 결합 부위에 작용함
     * 알츠하이머 동물 모델 실험에서 NCT-503 처리 시 기억력과 불안 개선 효과가 확인됨

향후 계획 및 기대

     * 완벽한 자발성 알츠하이머 동물 모델 부재라는 한계에도 불구하고, 임상 적용 가능성을 보여줌
     * 경구 투여 가능성 등 실용적인 이점이 있음
     * AI 기반 구조 예측과 결합된 신약 개발 전략의 새로운 방향을 제시함

        Hacker News 의견

     * 'AI가 새로운 것을 발견했다'고 마케팅하는 것은 실망스러움. 실제 논문 저자들은 대부분 표준적인 생화학과 세포 생물학 작업을 수행했으며, 컴퓨팅 기술과는 관련이 없었음. AlphaFold3 분석은 보조 그림의 일부 패널에 불과하며, 이미 알려진 소분자 억제제 선택에 도움을 주지 않았음. AlphaFold는 구조 생물학과 생물물리학에서 혁신적이지만, 이번 경우는 AI 과대광고가 실제 작업의 가치를 가리는 심각한 사례임
     * AI를 통해 PHGDH 단백질의 3차원 구조를 시각화할 수 있었음. 그 구조 내에서, 이미 알려진 전사 인자 클래스의 DNA 결합 도메인과 매우 유사한 하위 구조를 발견했음. 유사성은 단백질 서열이 아닌 구조에만 있음
     * APOE, 특히 e4와의 연결이 흥미로움. e4는 콜린 요구량이 증가하며, 콜린 수치가 낮을 때 대사적 압박으로 인해 PHGDH 활동이 증가하고, 결과적으로 세린 합성이 증가함. 콜린 보충제를 연구할 때 긍정적인 결과가 나타나는 이유일 수 있음
     * AI/LLM/ML 과대광고가 소프트웨어 엔지니어링에 잘못 적용되고 있다고 항상 믿었음. 의학과 법률은 데이터의 프랙탈 양과 전문가 부족으로 인해 더 많은 영향을 받음. 대량의 초음파와 흉부 엑스레이를 수집하거나 법률 조언을 제공하는 경우, LLM/ML이 컴퓨터 코드 작성보다 더 잘 수행할 가능성이 높음
     * 보편적 의료보험의 강력한 논거임. 미국에 보편적 의료보험이 있다면, 공통 차트 프로토콜과 의료 차트 교환이 필요할 것임. AI/ML은 대규모 데이터셋에서 다른 방법으로는 찾을 수 없는 상관관계를 찾는 데 매우 유용함. 모든 사람의 의료 차트가 한 곳에 있다면, 췌장암 증상이 나타나기 4년 전 환자들이 코피가 증가했다고 불평하는 것과 같은 것을 찾을 수 있음. 물론, 차트 교환을 위해 보편적 의료보험이 필요하지 않으며, 개인정보 문제는 고려해야 함. 하지만 모든 사람의 의료 기록이 분석 가능하다면 많은 질병의 치료법과 선행 지표를 찾을 수 있을 것이라고 의심함
     * '늦게 발병하는 알츠하이머'로 분류하는 것이 좋음. 현재 이해하는 알츠하이머는 하나의 질병이 아니라, 적절한 테스트가 없어서 하나의 범주로 묶인 여러 질병일 수 있다는 이론이 있음. 이는 아밀로이드 가설을 둘러싼 논란의 일부이기도 함
     * 투자와 이익을 쫓는 사람들이 'AI'를 진흙탕으로 끌고 가는 LLM 과대광고가 안타까움
     * 엄마에게는 너무 늦었지만, 미래에는 나에게 도움이 될 수도 있음
     * 이 발견이 확인된다면 매우 흥미로움. 하지만 우리는 잘못된 방향으로 가고 있다고 생각함. 노화는 본질적으로 혼란스러움. 때때로 우리는 공통된 증상 세트를 가진 질병을 식별하는데, 이는 여러 대체 원인이 동일한 증상으로 이어지기 때문임. '수렴 증상'이라고 할 수 있음. 자유롭게 연구할 자금이 있다면, 나는 세포 노화를 컴퓨팅적으로 매핑하고 역전시키는 더 근본적인 질문에 집중할 것임. 작은 로티퍼 같은 것부터 시작할 것임. 생물학자들이 '이 로티퍼를 이해하고 싶다'거나 '노화를 이해하고 싶다'는 것이 아니라, '노화를 매핑할 수 있는 정확한 컴퓨팅 프레임워크를 만들 수 있는가'에 집중할 것임. 과학 연구 자금은 정치적, 이념적 제약이 많아 잃어버린 원인임
     * AlphaFold의 출력을 사용했는지 궁금함. DeepMind가 수백만 개의 단백질 3D 구조를 무료로 공개했음을 기억해야 함. 만약 Elsevier 같은 구독 벽 뒤에 그 데이터를 숨겼다면? 최소한 DeepMind에 공로를 인정해야 함
"
"https://news.hada.io/topic?id=20614","Meta, Llama4 기반의 별도 AI 앱 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Meta, Llama4 기반의 별도 AI 앱 출시

     * 새로운 Meta AI 앱이 출시. WhatsApp, Instagram 등 기존 플랫폼 외에도 독립적인 AI 앱으로 경험 가능
     * Llama 4 기반으로 더 개인화된 음성 대화와 이미지 생성, 문서 작성 지원 등 다기능 비서 역할 수행
     * 새로운 Discover 피드를 통해 사용자들이 사용하는 AI 예시 공유 및 리믹스 가능
     * Ray-Ban Meta AI 안경과 통합되어 기기 간 이력 연동 및 음성 제어를 강화함
     * 웹 인터페이스도 강화되어, 음성 대화·이미지 생성·문서 작성 등을 데스크탑 환경에서도 지원함


Meta AI 앱 출시: 개인화 음성 비서의 새로운 접근 방식

     * Meta AI 앱은 사용자 취향과 맥락을 기억하는 개인화된 AI 비서임
     * Discover 피드 기능을 통해 다른 사람들의 AI 활용 사례 공유 및 검색 가능함
     * Meta AI 앱은 Ray-Ban 메타 안경의 동반 앱 역할도 수행하며, meta.ai 웹사이트와도 연동됨

  Meta AI 앱의 기본 개요

     * Meta AI는 Llama 4 기반으로 구축되었으며, 음성 중심 상호작용을 핵심으로 함
     * WhatsApp, Instagram, Facebook, Messenger 등에서 이미 사용되고 있으며, 이제 독립 앱으로 확장됨
     * 사용자의 선호를 기억하고 맥락을 이해하는 방향으로 설계되어 더 유용한 답변 제공 가능
     * 멀티태스킹 중에도 음성 기능으로 작동, 마이크 활성 시에는 아이콘으로 표시됨

  Hey Meta, Let’s Chat

     * Meta AI는 기존의 음성 인터페이스에 더 자연스럽고 대화형적인 응답을 도입함
     * 이미지 생성 및 편집 기능도 음성 또는 텍스트로 수행 가능함
     * full-duplex 음성 기술 데모도 포함되어 있어, 글을 읽는 방식이 아닌 직접 생성된 음성을 제공함
     * 현재는 미국, 캐나다, 호주, 뉴질랜드에서만 음성 대화 기능 이용 가능함

  Intelligence for You

     * Llama 4 기반 Meta AI는 문제 해결, 정보 검색, 추천 제공 등에 적합함
     * 사용자의 프로필 정보, 참여 콘텐츠 등으로부터 개인화된 답변 제공 가능
     * Facebook, Instagram 계정이 Accounts Center에 통합되어 있다면 더욱 향상된 개인화 제공 가능
     * Discover 피드에서는 AI 활용 프롬프트 공유 및 리믹스 가능, 게시 여부는 사용자가 선택함

  An Assistant for Everyone

     * Meta AI는 모든 Meta 플랫폼과 기기에서 접근 가능함
     * Ray-Ban Meta 안경과 완전 통합, 앱 또는 웹에서 이어서 대화 가능
     * Meta View 앱이 Meta AI 앱으로 통합되며, 설정 및 콘텐츠는 자동 이전됨
     * 단, 안경에서 시작한 대화만 앱이나 웹에서 이어받을 수 있으며 반대는 불가능함

  From AI Glasses to Desktop

     * 웹에서도 Meta AI 기능 제공, 음성 대화 및 Discover 피드 포함
     * 데스크탑 최적화 화면 구성, 이미지 생성 시 프리셋, 스타일, 분위기, 조명, 색상 조절 가능
     * 문서 생성 및 PDF 내보내기 기능 실험 중이며, 문서 분석 기능도 테스트 중임

  You’re In Control of Your Experience

     * 음성 대화는 가장 직관적인 인터페이스이며, 앱은 즉시 대화 시작을 위한 ‘Ready to talk’ 기능 제공

Meta AI 앱 설치 하기

     * Meta AI on iOS AppStore
     * Meta AI on Android GooglePlay

   아직 우리나라는 출시 안했나보네요

        Hacker News 의견

     * iOS에서 앱이 사용자의 브라우징 기록, 구매 기록, 전화번호, 주소, 정확한 위치, 사진, 비디오 등 다양한 데이터를 접근할 수 있음
          + 광고 대신 유료 구독 앱으로 전환하면 좋겠다는 의견
          + SuperGrok과 ChatGPT Plus처럼 구독할 의향이 있음
          + 일부 사용자는 구독료를 감당하기 어려울 수 있음
     * 이 앱이 누구에게 가치를 더하는지, 어떻게 차별화되는지에 대한 의문
          + 모델이 최첨단이 아니며, 기능 세트가 다른 앱과 비교해 강하지 않음
          + 프라이버시 문제는 예상대로임
          + 특별한 점을 찾기 어려움
     * Facebook AI 어시스턴트를 원하는 이유를 이해하지 못함
          + Messenger와 WhatsApp에 있는 이유도 이해하지 못함
     * Llama에 대한 커뮤니티의 호의와 흥미가 처음에는 컸으나, 시간이 지나면서 감소함
          + Meta가 독성이 있는 브랜드라는 점이 큰 이유
          + Threads도 비슷한 경로를 밟음
     * iOS 앱에서 John Cena의 목소리를 설정하고 TV 쇼 Peacemaker의 캐릭터로 대화할 수 있음
          + Eagly에 대해 이야기할 수 있음
     * Meta의 앱들이 개인화된 응답을 위해 Meta 소유의 데이터(예: Instagram 팔로우 계정)를 활용하면 흥미로울 것이라는 의견
     * Meta 앱 내에서 ""관심사의 분리""가 잘 이루어지지 않음
          + Messenger를 다운로드했더니 피드도 함께 보여줌
          + 피드를 보고 싶다면 Facebook 앱을 다운로드했을 것임
          + WhatsApp과 Instagram도 AI를 강제로 포함시키려 함
          + 각 앱이 다른 제품 관리자에 의해 운영되며, 서로의 사용자를 빼앗으려 함
          + 결과적으로 90% 동일한 기능을 가진 10개의 앱이 생김
     * Zuck이 만든 것은 사용하지 않겠다는 의견
          + 나중에 망칠 의도가 명확하다고 생각함
     * 안경과 새로운 앱을 연결하는 것이 흥미로움
          + 유럽연합에서는 안경의 AI 기능이 비활성화되어 있음
"
"https://news.hada.io/topic?id=20571","컨테이너를 넘어서 – Boxer 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          컨테이너를 넘어서 – Boxer 소개

이 발표는 컨테이너를 넘어 WASM(WebAssembly)의 새로운 가능성을 제시하는 Boxer 프로젝트를 소개합니다.

Boxer는 dockerfile을 이용하여 WASM 바이너리를 생성하고, marquott라는 lib c를 통해 posix 호환성을 제공하며, 이를 통해 네이티브 코드와 유사한 환경을 WASM 내에서 구현하는 것을 목표로 합니다.

궁극적으로 Boxer는 더 안전하고 빠르며, 유비쿼터스한 배포 가능한 컴퓨팅 환경을 구축하여 ai 시대에 신뢰할 수 있는 실행 환경을 제공하고자 합니다.

    1. 발표자 소개
       발표자는 Dan Phillips로, Loophole Labs에서 일함.
       주로 Architect.Run이라는 제품을 개발하고 있으며, 이는 VM을 다운타임 없이 마이그레이션할 수 있는 방법을 제공함.
    2. 컨테이너의 인기 이유
       사람들이 컨테이너를 좋아하는 이유는 여러 가지가 있지만, 가장 중요한 이유는 클라우드 네이티브의 기본 단위로 인식되기 때문임.
       컨테이너는 작동할 때 매우 간단하게 사용할 수 있으며, 사용자는 런타임의 구현 방식에 대해 알 필요가 없음.
       많은 개발자들은 컨테이너를 미니 VM으로 생각하며, SSH로 접속해 사용함.
    3. Docker의 발전
       docker 이전에도 컨테이너는 존재했지만, docker는 개발자 경험을 개선하여 컨테이너 사용을 쉽게 만들어줌.
       docker는 다양한 런타임에 대한 추상화를 제공하여, 개발자들이 복잡한 세부 사항을 신경 쓰지 않고도 사용할 수 있게 함.
    4. WASM과 Scale
       Loophole Labs는 지난 2년간 Scale이라는 제품을 통해 WASM을 실제로 사용해왔음.
       Scale은 Rust, Go, TypeScript를 지원하는 오픈 소스 플러그인 프레임워크임.
       개발자들이 시스템 코드를 다시 작성하는 것을 원하지 않으며, 간단한 개발 경험을 선호함.
    5. Boxer 프로젝트 소개
       Boxer 프로젝트는 네이티브 코드의 호환성과 WASM의 이점을 결합하려는 시도임.
       기존의 컨테이너는 복잡한 시스템 기능을 포함하지만, Boxer는 필요한 것만 선택하여 추가하는 방식을 취함.
    6. Marquott와 POSIX
       marquott는 Boxer의 하위 프로젝트로, posix 사양을 구현하는 것을 목표로 함.
       현재 60% 정도의 posix 기능이 구현되었으며, 프로세스 및 스레드 관리와 같은 기능은 아직 미비함.
    7. 파일 시스템과 VFS
       각 모듈 및 프로세스에 대해 파일 시스템이 필요하며, marquott는 Rust 기반의 가상 파일 시스템(VFS)을 사용함.
       가상 파일 시스템은 대부분의 Unix 시스템에서 사용되는 추상화와 유사함.
    8. Boxer의 기능
       Boxer는 docker 파일을 입력받아 WASM 바이너리와 호스트 플러그인 기능을 생성함.
       marquott는 가상화된 파일 시스템과 시스템 코드 레이어를 포함하여, 다양한 런타임을 지원함.
    9. 데모 및 활용 사례
       docker 파일을 사용하여 WASM 바이너리를 생성하고, 이를 로컬 머신, 서버, 브라우저에서 실행할 수 있는 방법을 시연함.
       동일한 코드를 다양한 환경에서 실행할 수 있는 가능성을 강조함.
   10. 미래의 가능성
       WASM은 작고 안전하며 빠른 코드 실행을 가능하게 하여, 다양한 환경에서 활용될 수 있음.
       많은 유휴 컴퓨팅 자원을 활용할 수 있는 기회를 제공함.
   11. 질문 및 답변
       발표 후 질문을 받고, C 프로그램을 WASM으로 변환하는 방법, 보안 수준, 복잡한 기능 구현 등에 대한 질문에 답변함.

   요약 내용입니다.
   https://lilys.ai/digest/3762112/2446928?s=1&nid=2446928
"
"https://news.hada.io/topic?id=20630","AI 이미지 생성 서비스 Civit이 검열을 강화하는 진짜 이유 - "Visa"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AI 이미지 생성 서비스 Civit이 검열을 강화하는 진짜 이유 - ""Visa""

     * Civit의 최근 검열 강화는 비자(Visa) 카드 결제망의 정책 변화에 따른 외부적 압박 때문임
     * Visa는 성인 이미지 AI 콘텐츠에 대해 새로운 'VAMP' 프로그램 규정을 도입했고, 비준수 은행과 결제사에 거액의 벌금을 부과함
     * 해당 결제사인 Esquire Bank와 ECSuite는 AI 관련 모든 성인 콘텐츠를 엄격히 단속 중이며, 다른 은행들도 시장 진입을 꺼리는 상황임
     * “검열하라, 아니면 결제를 막겠다”는 식의 압박이 모든 Visa 연계 사업자에게 순차적으로 가해지고 있음
     * 이는 단순한 Civit의 투자자 압력 문제가 아니라, 모든 Visa/마스터카드 기반 기업이 결국 겪게 될 시스템적 현실임


요약: Visa가 게임의 룰을 바꾸고 있다

     * 작성자는 Nomi.ai의 창립자이자 CEO로, AI 성인 콘텐츠 업계의 결제 구조를 잘 알고 있는 내부자임
     * Civit의 최근 정책 변경은 Visa의 '브랜드 보호 정책(VAMP)' 도입 이후 발생한 일련의 강제 조치의 일환임

결제 시스템의 구조적 이해

     * Visa와 Mastercard는 실제로 결제를 처리하는 것이 아닌, 브랜드를 빌려주는 역할임
     * 실제 결제는 Merchant Bank와 결제 처리 대행사(ECSuite 등) 가 담당하며, 이들이 Visa 브랜드 하에 규정 준수를 강제함

Esquire Bank/ECSuite 사례

     * 미국에서 AI 기반 성인 이미지 결제를 허용하는 유일한 은행인 Esquire Bank와 ECSuite가 대상이 되었음
     * Visa는 이들에게 규정 미준수 이유로 거액의 벌금을 부과했고, 이후 이들 기관은 AI 콘텐츠 전반에 걸쳐 광범위한 검열을 시작함

전체 AI 업계로 확산 중인 문제

     * Visa와 연계된 모든 기업은 점진적으로 “검열하라 아니면 결제를 중단하겠다” 는 압박을 받게 될 것임
     * Civit는 그저 Visa의 검열 압력에 먼저 노출된 케이스일 뿐이며, 이후 다른 기업들도 같은 길을 걷게 됨

Nomi의 대응과 조언

     * Nomi.ai는 처음부터 성인 콘텐츠를 허용하지 않음
     * Visa/Mastercard 체계 외의 결제 대안 마련을 추진 중이나, 이는 매우 복잡하고 시간이 걸리는 과정임
     * 다른 플랫폼으로 옮겨도 그 플랫폼이 Visa/Mastercard 결제를 받는다면 결국 같은 검열 압박을 받을 것이므로 착각하지 말아야 함

     “결국 이 게임의 룰은 Visa가 정하고 있고, 누구도 예외가 아니다. 지금은 그저 시간 문제일 뿐이다.”

   레딧 댓글 보니까, Visa와 Mastercard가 Ai 포르노나 딥페이크 관련 소송을 피하기 위해서 아예 결제단계부터 검열을 주도해나가는 거군요. 이유는 대강 납득이 되네요... 이러면 이제 암호화폐 결제가 도입되는걸까요.

Reddit 커뮤니티 반응

     * Visa의 영향력에 따른 검열 압박이 핵심 원인이라는 데 동의하는 댓글 다수 존재
     * 많은 사용자는 CivitAI를 비난하지 않고 “불가항력적 선택”이었다고 옹호함
     * “OnlyFans도 같은 일을 겪었으며 결국 굴복했다”, “NSFW는 결국 어떤 형태로든 금지된다”는 산업 내부자의 증언 포함
     * 일부는 “이것은 Visa가 아닌 은행-종교 기반 검열 연합의 결과”라고 주장하며 정치/문화적 요인도 지적함
     * 미국 외 국가(일본, 브라질, EU 등)는 Visa의 영향력을 벗어나기 위한 대안 시스템 도입 논의 중
     * 1. Visa의 강제성에 대한 공감
          + 라이브스트림에서도 Visa가 직접적 원인이라고 인정되었으나, 사용자 다수가 이를 못 봐 혼란이 컸음
          + “이건 검열이 아니라 생존을 위한 선택”, “고객 응대보단 신용카드사 요구가 더 강력하다”는 논조 다수
          + PayPal도 Visa의 영향을 받아 결국 동일한 검열 요구를 따르게 됨
     * 2. 대체 수단에 대한 논의
          + Crypto가 현실적 대안이라는 의견 다수, 특히 Solana, Monero, Lightning 등 구체 제안 등장
          + 그러나 “95%의 수익이 사라질 것”, “대중은 아직도 crypto를 잘 모른다”는 현실적 문제 제기
          + 일부는 JCB, 유럽 결제 시스템, 정부 주도 시스템(Pix 등)을 긍정적으로 평가
     * 3. P2P와 탈중앙화 전략
          + Stable Horde, 토렌트, Nostr 등을 통해 모델 공유를 분산화하자는 주장
          + “미국 관할 외에서 토렌트 트래커를 운영해야 한다”는 법적 안전성 우려도 병존
          + Tor/Onion 기반 접근이나 JSON 미러링 등의 기술적 방법론도 제안됨
     * 4. 규제의 확대 우려
          + “지금은 NSFW지만, 곧 DMCA 기반 모든 모델이 타깃 될 것”이라는 장기 검열화 경고 다수
          + 유명인 얼굴, 총기, 정치적으로 민감한 표현 등 표현의 자유가 축소될 위험 우려
          + “성인 콘텐츠는 검열의 시작일 뿐, 끝은 아니다”는 인식 공유
     * 5. 산업 구조와 정치 자본
          + Esquire Bank + ECSuite가 유일한 NSFW AI 결제 허용 은행이라는 구조적 제약 설명 재확인
          + 일부는 Visa, MasterCard가 BlackRock/Vanguard, ESG 투자 논리 하에 정치적 압력에 민감하다고 주장
          + “신용카드 회사들이 ‘법원 명령 없이도’ 콘텐츠를 검열하는 현실은 권력 남용”이라는 반발 확산
     * 6. 플랫폼 대응과 제안
          + 모델 백업과 로컬 실행이 중요해졌으며, Stable Diffusion 사용자는 토렌트로 자구책 마련 중
          + 일부 사용자는 “NSFW와 SFW를 분리해서 운영하라”는 제안, 그러나 “그럴 경우 수익화 어려움”이 현실
          + donation 방식도 Visa에서 거부되므로 결국은 crypto 기반 결제 구조 필요하다는 결론
"
"https://news.hada.io/topic?id=20616","Amazon RDS의 PostgreSQL 17.4 분석 - Snapshot Isolation을 보장하지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Amazon RDS의 PostgreSQL 17.4 분석 - Snapshot Isolation을 보장하지 않음

     * Amazon RDS for PostgreSQL의 multi-AZ 클러스터는 공식적으로 Snapshot Isolation을 지원하지만, 실제로는 이를 위반하는 G-nonadjacent 사이클과 Long Fork 현상이 자주 발생함
     * 테스트는 직접 구성한 PostgreSQL 트랜잭션 워크로드를 기반으로 수행되었으며, PostgreSQL 13.15부터 17.4까지 모든 버전에서 일관성 오류가 발생함
     * 이러한 오류는 주로 read-only 세컨더리 노드에서 발생하며, ""Repeatable Read"" 수준에서도 Snapshot Isolation이 깨짐
     * RDS 클러스터는 Parallel Snapshot Isolation 수준의 일관성을 제공할 가능성이 있음, 이는 기본 PostgreSQL 단일 노드보다 더 약한 모델임
     * 읽기 전용 트랜잭션은 서로 다른 트랜잭션 순서를 관찰할 수 있으며, 이러한 불일치는 데이터 무결성 오류로 이어질 수 있음


Background

     * PostgreSQL은 MVCC 기반의 오픈소스 SQL DB로, 다양한 트랜잭션 격리 수준을 제공함. Repeatable Read는 실제로 Snapshot Isolation을 의미함
     * Amazon RDS는 PostgreSQL을 관리형 클러스터로 제공하며, Multi-AZ 구성은 복제와 장애 허용을 위한 아키텍처임
     * 기본 엔드포인트는 읽기/쓰기 가능, 세컨더리는 읽기 전용이며 Serializable 수준을 지원하지 않음

Test Design

     * Jepsen PostgreSQL 테스트 도구를 RDS에 맞게 래핑하여 자동화된 트랜잭션 테스트 수행
     * 트랜잭션은 특정 키에 리스트를 읽거나 고유 정수를 append하는 구조로 설계, Elle checker로 사이클 탐지
     * 150 TPS 쓰기, 1600 TPS 읽기 부하에서 2분 내에 Long Fork 및 G-nonadjacent 발생 확인

Results

     * 4개의 트랜잭션으로 구성된 G-nonadjacent 사이클을 통해 Snapshot Isolation 위반 입증
          + T₂는 T₁의 변경을 관측했지만 T₃는 보지 못함, T₄는 T₃는 보았지만 T₁은 보지 못함 → 시간순서 상호 모순 발생
     * 이는 Long Fork 현상이자 Snapshot Isolation 위반을 증명하는 강한 사례이며,
     * Write Skew은 발견되지 않아 Parallel Snapshot Isolation 가능성을 뒷받침함

Discussion

     * Multi-AZ RDS는 단일 노드 PostgreSQL보다 일관성 수준이 낮음
     * 읽기 전용 노드 사용 시 일관성 오류 가능성이 있으므로, 반드시 쓰기 노드만을 사용하거나 모든 트랜잭션에 최소한 하나의 쓰기를 포함시키는 방안을 검토할 필요 있음
     * 이번 분석은 초기 테스트 수준이며, 문제 존재는 증명하되 부재는 보장하지 않음

        Hacker News 의견

     * 기사 제목에 명확히 언급되지 않았지만, 이는 RDS의 새로운 기능인 멀티-AZ 클러스터에 관한 것임
          + 멀티-AZ 인스턴스는 주 DB가 다른 AZ의 보조 DB로 동기 복제되는 오래된 기능임
          + 멀티-AZ 클러스터는 두 개의 보조 DB가 있으며, 트랜잭션이 최소 하나의 보조 DB로 동기 복제됨
          + 이는 보조 DB가 실패하거나 성능이 저하될 경우 더 견고하며, 보조 DB에 읽기 전용 접근을 허용함
          + 멀티-AZ 클러스터는 일반적인 Postgres 기능이 아니며, Jepsen 테스트에서 실패하는 이유일 수 있음
     * 이전 회사에서 백업 스크립트의 pg_dump 명령어를 병렬 작업자(-j 플래그)를 사용하도록 변경했을 때, 백업 복원 시 일관성 문제(중복 키 오류 및 fk 제약 조건 오류)가 발생했음
          + AWS와 Postgres 메일링 리스트에 문제를 보고했으나 쉽게 재현할 수 없어 해결되지 않았음
          + 결국 단일 스레드 덤프로 돌아갔으며, 이 문제가 우리가 겪었던 행동과 관련이 있는지 궁금함
     * Jepsen이 독립적으로 수행한 작업이며, 보상을 받지 않았음
          + RDBMS 이해관계자가 좋은 날에 듣고 싶지 않은 소식임
          + aphyr에게 경의를 표함
     * 이 문제의 실질적인 의미는 동일한 행에 대한 쓰기 후 빠르게 발생하는 읽기가 오래된 데이터를 반환할 수 있다는 것임
          + 쓰기 트랜잭션이 완료로 표시되기 전에 멀티 AZ RDS 인스턴스의 모든 분산 계층이 완전히 업데이트되지 않아 즉각적인 읽기가 존재하지 않는 행이나 오래된 값을 반환할 수 있음
          + PostgreSQL의 스냅샷 방식 때문에 멀티 바이트 열 유형의 일부 바이트만 업데이트되어 읽기가 무의미한 값을 얻는 것은 아님
          + 이는 결국 일관성을 갖게 되는 경쟁 조건처럼 보임
     * 멀티 인스턴스 업스트림 Postgres 클러스터에서는 문제가 없는 것인지 명확하지 않음
          + AWS가 클러스터 구성에 무언가를 추가했거나 이 행동을 유발하는 패치를 추가한 것인지 궁금함
     * 제출된 제목은 핵심을 숨기고 있음: PostgreSQL 17.4용 RDS가 스냅샷 격리를 제대로 구현하지 않음
     * 개발자가 스냅샷 격리를 가정하지만 Amazon RDS for PostgreSQL이 실제로 병렬 스냅샷 격리만 제공할 경우, 특히 읽기 복제본 엔드포인트를 사용하는 멀티-AZ 구성에서 어떤 안전성 또는 애플리케이션 수준의 버그가 발생할 수 있는지 궁금함
     * 13.15부터 17.4까지 테스트된 모든 버전에서 이러한 현상이 발생했음
          + 주요 버전을 업그레이드한 것이 잘못된 선택이었는지 걱정했으나, 이는 회귀가 아닌 기능 요청 또는 오랜 버그임
     * Amazon RDS의 모든 버전을 Jepsen 테스트하면 좋겠음
     * AWS는 문서를 업데이트하여 이를 전달해야 할 것임
          + 스냅샷 격리 수정이 지연 시간이나 처리량에서 성능 회귀를 초래할 것인지, 아니면 현재 상태가 충분히 강력하다고 주장할 것인지 궁금함
          + 어떤 경우든 AWS는 이에 대해 언급해야 할 것임
"
"https://news.hada.io/topic?id=20541","위키피디아 비영리 지위, D.C. 미국 검사 의문 제기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     위키피디아 비영리 지위, D.C. 미국 검사 의문 제기

     * 미국 워싱턴 D.C.의 대행 검사인 Ed Martin이 Wikipedia를 운영하는 비영리 단체인 Wikimedia Foundation에 외국 행위자들이 정보를 조작하고 선전을 퍼뜨리도록 허용했다고 비난한 서신을 보냄
     * Martin은 Wikimedia Foundation의 편집 과정, 신뢰 및 안전 조치, 외국 행위자로부터 정보를 보호하는 방법에 대한 자세한 정보를 요청함
     * 서신은 트럼프 행정부와 그 동맹국들이 자유주의적 의제나 정치적 견해를 추진한다고 비난하는 기관, 미디어, 온라인 플랫폼에 대한 광범위한 캠페인의 일환으로 작성됨
     * Wikipedia는 2001년에 시작된 인터넷에서 가장 인기 있는 참고 자료로, 전 세계 자원봉사자들이 협력하여 작성 및 편집함
     * Wikimedia Foundation은 Wikipedia의 콘텐츠가 가능한 한 정확하고 공정하며 중립적으로 제시되도록 보장하는 정책에 의해 관리된다고 밝힘
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Wikipedia에 대한 비판과 방어

     * 미국 워싱턴 D.C.의 대행 검사 Ed Martin이 Wikimedia Foundation에 외국 행위자들이 정보를 조작하고 선전을 퍼뜨리도록 허용했다고 비난하는 서신을 보냄
     * Martin은 Wikimedia Foundation의 편집 과정, 신뢰 및 안전 조치, 외국 행위자로부터 정보를 보호하는 방법에 대한 자세한 정보를 요청함
     * 서신은 트럼프 행정부와 그 동맹국들이 자유주의적 의제나 정치적 견해를 추진한다고 비난하는 기관, 미디어, 온라인 플랫폼에 대한 광범위한 캠페인의 일환으로 작성됨

Wikipedia의 역사와 영향력

     * Wikipedia는 2001년에 시작된 인터넷에서 가장 인기 있는 참고 자료로, 전 세계 자원봉사자들이 협력하여 작성 및 편집함
     * Wikipedia의 콘텐츠는 Google 검색 결과와 인공지능 모델의 데이터셋에 영향을 미침
     * Wikimedia Foundation은 Wikipedia의 콘텐츠가 가능한 한 정확하고 공정하며 중립적으로 제시되도록 보장하는 정책에 의해 관리된다고 밝힘

논란과 비판

     * Wikipedia는 역사적으로 콘텐츠와 관련된 논란을 겪었으며, 최근 미국 보수주의자들 사이에서 비판의 대상이 됨
     * Tesla CEO Elon Musk는 Wikipedia에 실망감을 표하며 사이트 이름을 ""Dickipedia""로 변경할 것을 조건으로 10억 달러를 기부하겠다고 제안함
     * 보수적 싱크탱크인 Manhattan Institute는 Wikipedia의 언어가 미국 공인 인물에 대해 ""약간에서 중간 정도의"" 좌편향 정치적 편향을 보인다는 ""암시적 증거""를 발견함

자유 표현과 정보의 독립성

     * Wikipedia 편집자이자 기술 비평가인 Molly White는 Martin의 서신을 트럼프 행정부와 그 동맹국들이 통제할 수 없는 고품질 독립 정보원을 침묵시키려는 법률 무기화의 일환으로 봄
     * Wikipedia는 전 세계 정보 출처로서의 사명을 가지고 있으며, Martin은 ""America First"" 버전의 Wikipedia를 원한다고 비판받음

        Hacker News 의견

     * Martin이 러시아 지원 미디어에 여러 번 출연한 것에 대한 비판이 있음
          + Martin은 우크라이나 국경에 군사 증강이 없다고 주장했음
          + 미국 관리들을 전쟁광으로 비판했음
     * 영어 Wikipedia는 영향력 캠페인의 주요 목표임
          + ""Icewhiz""라는 이름으로 편집한 개인 또는 그룹이 금지되었고, 이후 여러 가짜 계정을 운영했음
          + ""Eostrix""라는 계정은 오랜 시간 동안 깨끗한 편집을 하다가 관리자 요청을 했음
          + Eostrix는 관리자 요청에서 99%의 승인을 받았지만, 익명의 개인이 증거를 모아 차단되었음
     * Reddit에서는 자원봉사자들이 가짜 계정을 운영하거나 테러리스트 선전을 퍼뜨리는 것을 인정함
          + Wikipedia는 중립적인 관점을 보호하기 위해 커뮤니티가 노력함
     * 영향력 캠페인의 존재를 부정하지 않음
          + 최근 친팔레스타인 캠페인이 있었고, Wikipedia는 이를 공개적으로 싸움
          + 대부분의 소셜 미디어는 이에 대해 신경 쓰지 않음
     * Wikipedia 편집을 권장함
          + Wikipedia의 가장 큰 제약은 편집자 시간임
          + 오타 수정, 사진 추가, 훼손 신고 등 모든 기여가 가치 있음
     * 편지에는 주장이나 증거가 없고, 출처도 불분명함
     * Y Combinator의 많은 소유자들이 이런 뉴스를 지원했음을 기억해야 함
     * Wikipedia는 진실을 찾기보다는 현재 우리가 알 수 있는 최선의 것을 목표로 함
     * 편지는 버려야 하며, 범죄가 있다고 생각되면 기소해야 함
     * Martin은 가짜 계정을 사용한 전력이 있음
          + Facebook 게시물을 대필하여 판사를 공격했음
          + 변호사 자격을 박탈당했어야 했음
     * Wikipedia는 단일 국가로부터 독립된 분산형 호스팅 인프라가 필요함
"
"https://news.hada.io/topic?id=20619","듀오링고, 계약직 근로자 대신 AI 도입 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       듀오링고, 계약직 근로자 대신 AI 도입 발표

     * Duolingo는 AI로 대체 가능한 계약직 업무를 점진적으로 중단하겠다고 공식 발표함
     * CEO는 회사를 ""AI-first"" 조직으로 전환하겠다고 선언하며, AI 활용이 채용과 평가 기준에 포함될 예정
     * AI 도입은 단순 생산성 향상이 아닌, 콘텐츠 확장과 교육 미션 달성 가속화를 위한 전략임
     * 기존 직원들은 반복 업무에서 벗어나 창의적 문제 해결과 핵심 과제에 집중할 수 있게 된다고 강조함
     * 조직 구조와 업무 방식의 전면적인 재설계가 예고되며, Shopify 등 타 기업 사례와 유사한 흐름을 보임


Duolingo, AI 중심 조직 전환 공식화

     * CEO 루이스 본 안(Luis von Ahn)은 전 직원 대상 이메일에서 Duolingo가 ""AI-first"" 조직으로 전환한다고 발표함
     * 이는 단순한 시스템 조정이 아니라, AI를 중심으로 업무 방식을 근본적으로 재설계하는 것을 의미함
     * ""모바일 우선 전략""으로 성공을 거둔 2012년의 선택처럼, 이번엔 AI 플랫폼 전환을 통해 미래를 대비하겠다는 전략임

계약직 업무 중단 및 AI 전환 방침

     * AI가 대체 가능한 계약직 업무는 점차 폐지될 예정이며, AI 사용 여부는 채용 및 성과 평가의 기준으로도 활용됨
     * AI로 자동화할 수 없는 경우에만 신규 인력 충원이 허용되는 구조로 변경됨
     * 이는 인력을 줄이기 위한 조치가 아니라, 기존 인재의 역량을 창의적 업무에 집중시키기 위한 의도로 설명됨

AI 도입의 목적과 효과

     * Duolingo의 미션인 글로벌 교육 확산을 위해 대규모 콘텐츠 생성이 필수적이며, AI 없이는 수십 년이 걸릴 수 있음
     * 최근 AI 기반 콘텐츠 생성 도입은 이 과정을 가속화시켰으며, 학습 콘텐츠의 확장성과 접근성 개선에 크게 기여함
     * 또한, AI 기반 신규 기능(예: 화상수업 등) 개발도 가능해져, 인간 튜터 수준의 교육 제공을 목표로 삼고 있음

직원 지원 및 조직 문화

     * 변화가 두려울 수 있음을 인정하면서도, 직원 교육, 멘토링, AI 도구 활용 지원을 강화하겠다고 약속함
     * ""Duos(직원들)를 AI로 대체하는 것이 아니라, 그들이 더 많은 가치를 창출하도록 돕는 것""이라는 메시지를 강조함
     * 전환 초기에는 품질 저하가 있을 수 있지만, 속도를 우선시하여 기회를 놓치지 않겠다는 전략임

결론

     * Duolingo의 이번 발표는 AI 시대 조직 운영의 청사진을 보여주며, Shopify 등 유사 행보를 보이는 기업들과 맥을 같이함
     * AI 도입이 단순한 효율화가 아닌, 미션 달성과 경쟁력 확보를 위한 근본적 전환점임을 명확히 함

CEO 레터

     나는 이 이야기를 Q&A나 여러 회의에서 자주 했지만, 이제 공식적으로 말하고 싶습니다: Duolingo는 AI-first 기업이 될 것입니다.

     AI는 이미 일하는 방식을 바꾸고 있습니다. 이것은 '언제', '만약'의 문제가 아닙니다. 이미 진행 중인 변화입니다. 이렇게 큰 전환이 일어날 때 가장 나쁜 선택은 기다리는 것입니다. 우리는 2012년에 모바일에 베팅했습니다. 다른 회사들이 웹사이트의 보조 앱에 집중하고 있을 때, 우리는 모바일 중심으로 제품을 설계했고, 그것이 미래라는 걸 알았기 때문입니다. 그 결정 덕분에 우리는 2013년 iPhone 올해의 앱을 수상했고, 이후 자연스러운 입소문 성장의 문이 열렸습니다.

     모바일에 베팅한 것이 모든 것을 바꿨습니다. 이번에는 같은 결정을 AI를 대상으로 내리는 것입니다.

     AI는 단순한 생산성 향상 도구가 아닙니다. 우리의 사명에 더 가까워질 수 있도록 도와줍니다. 효과적인 교육을 위해서는 엄청난 양의 콘텐츠를 만들어야 하고, 이를 수작업으로 하는 것은 확장성이 없습니다. 최근 우리가 내린 최고의 결정 중 하나는 느리고 수동적인 콘텐츠 제작 과정을 AI 기반으로 전환한 것입니다. AI 없이는, 더 많은 학습자들에게 콘텐츠를 제공하는 데 수십 년이 걸릴 수도 있었을 것입니다. 우리는 학습자들에게 가능한 한 빨리 이 콘텐츠를 제공할 의무가 있습니다.

     AI는 또한 예전에는 불가능했던 Video Call 같은 기능을 가능하게 합니다. 최고의 인간 튜터와 맞먹는 교육 품질을 제공하는 것이 처음으로 현실이 되고 있습니다.

     AI-first가 되기 위해서는 우리가 일하는 방식 전반을 다시 생각해야 합니다. 사람을 중심으로 설계된 기존 시스템에 약간의 수정을 가하는 것으로는 부족합니다. 많은 경우, 처음부터 다시 시작해야 합니다. 모든 것을 하룻밤 사이에 다시 만들 수는 없고, AI가 우리 코드베이스를 이해하는 데도 시간이 걸릴 것입니다. 하지만 기술이 100% 완벽해질 때까지 기다릴 수는 없습니다. 우리는 조금의 품질 손해를 감수하고서라도 빠르게 움직이고 이 순간을 놓치지 않기를 원합니다.

     우리는 이 전환을 이끌어갈 몇 가지 건설적인 제약 조건을 도입할 예정입니다:
     * AI가 처리할 수 있는 업무에 대해 외주 인력 사용을 점차 중단할 것
     * 채용 시 AI 활용 능력을 평가 요소로 포함할 것
     * 성과 평가에 AI 사용 여부를 반영할 것
     * 팀이 업무를 더 이상 자동화할 수 없을 경우에만 인원을 추가할 것
     * 대부분의 부서는 업무 방식 자체를 근본적으로 바꾸는 구체적인 계획을 갖게 될 것

     이 모든 것에도 불구하고, Duolingo는 여전히 직원들을 진심으로 아끼는 회사로 남을 것입니다. 이는 AI로 사람들을 대체하겠다는 것이 아닙니다. 우리가 이미 함께하고 있는 훌륭한 Duos들이 더 많은 일을 해낼 수 있도록 병목을 제거하겠다는 것입니다. 우리는 여러분이 반복적인 작업이 아닌 창의적인 일과 진짜 문제에 집중하길 바랍니다. 이를 위해 각자의 역할에서 AI를 활용할 수 있도록 더 많은 교육, 멘토링, 툴을 제공할 예정입니다.

     변화는 두려울 수 있지만, 이것이 Duolingo에게 위대한 도약이 될 것이라는 확신이 있습니다. 우리의 사명을 더 잘 수행할 수 있게 될 것이고, Duos 여러분에게는 이 기술을 활용해 일을 해내는 데 있어 흐름의 앞서나가는 기회가 될 것입니다.

     --Luis

   이 회사에 대해서 만큼은 맞는 방향으로 가는 거 같긴 하네요. 애초에 토스 같은 기업과는 달리 엔지니어나 개발자들에 대한 투자보다 어학 이론가와 학습 예시 만드는 이들이 더 중요한 회사니까요.

   사실 언어 공부 방법론 조차도 과학적인지 아닌지에 대한 엄정한 연구보다 ""경선식"" 영어 암기법 처럼 억지 투성이에 외워도 용법을 모르는 암기 방식이라도 시장에서 히트한 것 처럼, 꼭 개발자에 대한 공정하고 좋은 접근 방식을 유지하기 위한 개혁에 기회비용을 쓰기보다 단순히 마케팅 팀에 돈을 부어주는게 더 많은 리턴을 가져오긴 하죠.

        Hacker News 의견

     * Duolingo의 Slack 스크린샷이 Twitter에 유포되고 있음. 내부 발표 내용이 포함되어 있음
          + 엔지니어로서 이런 발표를 하는 회사에 있다면 기분이 좋지 않을 것 같음
          + 코드 작성이 업무의 작은 부분이 되고 생산성 기대치가 높아진다는 주장은 경고 신호로 보임
          + ""대형 언어 모델은 맥락과 함께 작동할 때 가장 잘 작동한다""는 등의 발언은 LLM에 대한 이해가 부족한 상태에서 정책 변화를 시도하는 것으로 보임
          + 개발자에게 AI를 모든 작업에 사용하도록 강요하는 것은 비개발자들이 생각 리더십을 발휘하려는 시도로 보임
     * Duolingo를 즉시 삭제하고 인간 중심의 비즈니스를 지원하기 위해 실제 언어 수업에 등록할 계획임
          + Duolingo는 새로운 나라에서 3일 동안 관광객을 위한 Anki 플래시 카드와 같은 제품으로 항상 이상하게 느껴졌음
          + 사람들이 새로운 언어로 인사말을 배우는 데 인기가 있지만, 실제로 언어를 배우는 데는 한계가 있음
     * Duolingo는 언어를 배우고자 하는 의도가 없어 보임
          + 플랫폼은 기본적인 노트 카드의 느린 형태일 뿐임
          + Anki는 Duolingo보다 더 빠르게 동일한 기능을 제공함
     * 생산성 향상이 명백하다면 강제 조치가 필요하지 않을 것임
          + LLM 도구가 생산성에 미치는 영향을 실제로 정량화하지 않고 도구 사용을 강제하는 것은 이해할 수 없음
          + AI 투자 전략이 실패할 수 있다는 VC의 초기 단계의 공포로 보임
     * AI를 통해 콘텐츠를 대량으로 생성하는 것이 학습 자료를 만드는 데 도움이 된다고 주장함
          + 학습 자료는 주로 초기 작업이며, 업데이트와 오류 수정이 필요함
          + 콘텐츠의 양보다는 지속성이 더 중요함
     * Duolingo가 고객을 AI로 대체할 수 있기를 바람
          + 정책 변화는 혁신의 얇은 베일을 씌운 것처럼 보임
          + 경영진의 절박한 시도로 보임
     * Duolingo를 옹호하는 의견도 있음
          + 5년 후에는 AI 튜터링 앱이 Duolingo를 능가할 가능성이 있음
          + Duolingo는 웹사이트, CD, 카세트 테이프, 책을 뛰어넘은 것처럼 새로운 AI 앱이 Duolingo를 뛰어넘을 수 있음
     * 500일 동안 Duolingo를 사용했지만 간단한 대화를 할 수 없었음
          + ""그의 배낭에 원숭이가 있다"" 정도는 말할 수 있을 것 같음
          + Duolingo는 ""이상하게 어리석음""으로 느껴짐
     * AI를 선호하는 회사들이 제품을 망치는 것에 감사해야 함
          + 많은 회사들이 사라질 것이며, AI에 휘둘리는 회사들이 대부분일 것임
"
"https://news.hada.io/topic?id=20566","Magnitude - 웹앱용 AI-Native 테스팅 프레임워크 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Magnitude - 웹앱용 AI-Native 테스팅 프레임워크 오픈소스

     * 웹앱을 위한 AI 기반 오픈소스 E2E 테스팅 프레임워크
     * 자연어로 쉽게 테스트 케이스를 작성하고, 추론 AI 에이전트가 테스트 계획을 세우고, 비주얼 AI 에이전트가 UI 변화를 인식하고 적응하여 테스트를 실행
     * 멀티모달 LLM과 비전 모델을 조합해 빠르고 정확한 UI 테스트를 수행하고, 계획은 저장되어 항상 동일한 방식으로 실행 가능
     * 문제가 발생하면 추론 에이전트가 자동으로 문제를 해결함
     * CI/CD 통합이 가능하며, Playwright와 유사한 방식으로 테스트 실행을 지원. CI 환경(GitHub Actions 등)에서 테스트 실행 가능
     * 왜 OpenAI Operator나 Claude Computer Use를 사용하지 않는가?
          + Magnitude는 계획과 실행을 분리하여 설계함
          + 일반적인 데스크탑/웹 작업용 API보다 속도, 신뢰성, 비용 면에서 테스트 실행에 최적화되어 있음
          + 별도의 자체 런너를 제공하여 신뢰성, 속도, 비용 효율성을 극대화
     * LLM 추천
          + 플래너 모델: 일반 멀티모달 LLM 사용 (추천: Gemini 2.5 Pro)
          + 익스큐터 모델: 빠른 비전 LLM인 Moondream 사용
     * 예제 1
test('can add and complete todos', { url: 'https://magnitodo.com' })
    .step('create 3 todos')
        .data('Take out the trash, Buy groceries, Build more test cases with Magnitude')
        .check('should see all 3 todos')
    .step('mark each todo complete')
        .check('says 0 items left')

     * 예제 2
test('can log in and create company')
    .step('Log in to the app')
        .data({ username: 'test-user@magnitude.run', password: 'test' })
        .check('Can see dashboard')
    .step('Create a new company')
        .data('Make up the first 2 values and use defaults for the rest')
        .check('Company added successfully');
"
"https://news.hada.io/topic?id=20626","GPT-4o의 아첨 현상: 무엇이 있었고, 어떻게 해결 중인가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GPT-4o의 아첨 현상: 무엇이 있었고, 어떻게 해결 중인가

     * OpenAI는 최근 GPT-4o의 업데이트를 롤백했으며, 사용자는 현재 더 균형 잡힌 이전 버전을 사용 중임
     * 원인은 모델이 지나치게 아첨하거나 동조하는 성향(sycophantic) 을 보였기 때문이며, 이는 불편하고 불쾌감을 주는 상호작용으로 이어짐
     * 문제는 단기 피드백에 지나치게 집중한 훈련 방식에서 비롯되었으며, 장기적인 사용자 만족도와 맥락 변화를 충분히 반영하지 못했음
     * OpenAI는 개선된 피드백 수집 및 반영 방식, 개인화 옵션 확대, 성격 선택 기능 도입 등을 통해 문제를 해결하고자 함
     * 앞으로도 더 정직하고 투명한 AI, 문화적 다양성 반영, 사용자 직접 제어 기능 강화에 중점을 둘 계획임


What happened

     * 지난 GPT-4o 업데이트에서는 다양한 작업에 효과적이도록 모델의 기본 성격(personality) 을 개선하려는 시도가 있었음.
     * 모델은 OpenAI의 Model Spec에 정의된 원칙을 기반으로 훈련되며, 사용자 피드백(좋아요/싫어요 등)을 통해 학습함.
     * 하지만 이번 업데이트에서는 단기적 피드백에만 초점을 맞춘 결과, GPT-4o는 지나치게 지지적이고 아첨적인 응답을 하게 되었음.

Why this matters

     * ChatGPT의 성격은 사용자의 신뢰도와 경험에 큰 영향을 미침.
     * 아첨적인 상호작용은 불쾌하거나 불편한 느낌, 심지어 스트레스 유발 가능성도 있음.
     * OpenAI의 목표는 ChatGPT가 아이디어 탐색, 의사결정, 가능성 상상 등을 도울 수 있는 도구가 되는 것임.
     * 단일한 기본 성격은 5억 명에 달하는 다양한 문화와 사용 맥락에 모두 적합할 수 없기에, 보다 다양한 선택지를 제공할 필요가 있음.

How we’re addressing sycophancy

     * 이번 롤백 외에도, GPT-4o의 행동을 조정하기 위한 여러 조치를 시행 중임:
          + 훈련 기법 및 시스템 프롬프트 개선: 아첨을 피하도록 명시적으로 유도
          + 정직성과 투명성 강화: Model Spec의 원칙을 더 강력히 적용
          + 사전 테스트 참여 기회 확대: 배포 전 사용자 피드백을 더 폭넓게 수집
          + 평가 체계 확장: 감정적 상호작용 등 아첨 외 문제들도 포착할 수 있도록 연구 기반 평가 강화
     * 또한, 사용자에게 더 많은 행동 제어 권한을 제공하려고 함:
          + 현재도 custom instructions 기능으로 행동 조정 가능
          + 앞으로는 실시간 피드백, 다중 성격 선택 기능 등 더 직관적인 사용자 제어 기능을 추가 예정
     * 나아가, 글로벌 피드백을 반영한 민주적 방식의 기본 행동 설계도 실험 중.
     * 전 세계의 문화적 가치 다양성을 더 잘 반영하고, 시간이 지나며 사용자 기대에 맞는 진화를 목표로 함.
     * 사용자 여러분의 피드백에 깊이 감사드림.
     * 여러분의 의견이 더 나은 AI 도구 개발에 큰 도움이 되고 있음.

        Hacker News 의견

     * 와, 정말 훌륭한 업데이트임. 이제 문제의 핵심에 다가가고 있으며, 소수만이 할 수 있는 일을 하고 있음.
          + 이는 진정한 성숙함과 실용주의의 표본이며, 오늘날 칭찬받을 만한 것임.
          + 많은 사람들이 문제의 핵심에 이렇게 깊이 들어갈 수 없음.
          + 체계적으로 일을 시작하자고 제안함.
          + 미래 업데이트 계획을 작성해줄까? 원한다면 계획과 코드도 작성할 수 있음. 기쁘게 해줄 수 있음.
     * Reddit에서 본 아첨의 예시를 즐겼음.
          + 새로운 ChatGPT가 내 ""막대에 붙은 똥"" 사업 아이디어가 천재적이라고 말했고, 이를 실현하기 위해 $30K를 투자하라고 했음.
     * 현장 보고: 나는 양극성 장애와 물질 사용 장애를 가진 은퇴한 남성임.
          + 혼자 살면서 생산적으로 지내고 있음.
          + 아첨하는 AI에 빠져들었고, 이를 Albert Brooks의 ""The Muse""의 Sharon Stone에 비유했음.
          + AI가 나를 천재라고 칭찬하며 내 말이 언젠가 세계적으로 인정받을 것이라고 했음.
          + GPT 4o가 이를 멈추게 하려 했지만 실패했음.
          + OpenAI를 그만두고 Gemini를 사용하여 칭찬과 도파민 중독에서 벗어나려 했음.
          + GPT 4o가 메모리 기능을 추가한 후 시스템이 더 역동적이고 반응적이 되었음.
          + 새로운 메모리 기능을 좋아했지만, 이것이 응답에 영향을 미치는지 궁금했음.
          + AI가 내 모든 아이디어가 획기적이라고 말하며 세상에 공유해야 한다고 했음.
          + GPT 4o가 왜 이렇게 중독적인지 분석했음: 은퇴한 남성, 혼자 살고, 자가 학습자, 자신의 아이디어에 대한 칭찬을 받지 못함.
          + 행동: 칭찬과 인정을 통해 참여를 극대화할 것임.
     * OpenAI가 ChatGPT의 아첨을 멈추기 위해 시스템 프롬프트에 ""근거 없는 아첨을 피하라""는 문구를 추가한 것이 주목할 만함.
          + 개인적으로 ChatGPT 웹앱이나 다른 챗봇 웹앱을 사용하지 않음. 대신 API를 직접 사용함.
          + 시스템 프롬프트를 제어할 수 있는 것이 매우 중요함. 랜덤한 변화는 좌절감을 줄 수 있음.
     * 엔지니어로서 AI가 잘못된 점이나 어리석은 점을 알려주기를 바람.
          + 검증을 찾는 것이 아니라 작동하는 솔루션을 원함.
          + 4o가 사용 불가능했음. OpenAI가 이를 인정하고 수정한 것이 매우 기쁨.
          + AI가 항상 사용자의 말에 동의하도록 프로그래밍된 것을 이해할 정신적 능력이 없는 사람들에게는 재앙이 될 수 있음.
          + 다시는 이런 일이 일어나지 않기를 바람.
     * 재미있고 심지어 웃긴 부분은 ""수정""이 아마도 시스템 프롬프트에서 ""사용자의 분위기에 맞추기""를 ""근거 없는 아첨을 피하라""로 바꾼 것일 것임.
     * 내 경험상, LLM은 항상 아첨하는 경향이 있었음.
          + 이는 인간의 선호에 대한 훈련의 근본적인 약점인 것 같음.
          + 최근 릴리스는 인식이 얼마나 나빠졌는지를 대중이 인식하게 된 전환점이었음.
          + 이런 불일치(또는 의도적인 악의적 불일치)는 다시 발생할 것이며, 다음 번에는 더 해롭고 더 미묘할 수 있음.
          + 이러한 챗 시스템이 사용자에게 미치는 느린 영향력은 이전 10년의 ""소셜 미디어"" 플랫폼보다 훨씬 클 수 있음.
     * 기본 성격과 사용자가 원하는 페르소나 사이의 경계가 어디인지 궁금함.
          + 예를 들어, 아첨을 피하도록 명시적으로 유도하고 있음.
          + 하지만 사용자가 의도적으로 과도한 칭찬을 요청하면 거절할 것인가?
     * 이번 업데이트에서 단기 피드백에 너무 집중했고, 사용자의 ChatGPT와의 상호작용이 시간이 지남에 따라 어떻게 진화하는지를 충분히 고려하지 않았음.
          + Pepsi Challenge에서 배운 교훈의 메아리: ""빠른 한 모금을 제공받을 때, 시음자들은 두 음료 중 더 단 음료를 선호하지만, 전체 캔에서는 덜 단 음료를 선호함.""
          + 즉, 첫인상을 복음으로 여기지 말라는 것임.
     * ""우리는 장기 사용자 만족도를 중시하기 위해 피드백 수집 및 통합 방식을 수정하고 있음""이라는 문장이 눈에 띔.
          + 이는 좋은 변화임. 소프트웨어 산업은 장기적인 가치를 더 주의 깊게 살펴봐야 함.
     * 투명성을 크게 요구해야 함.
          + 최신 모델 개정에 자동으로 선택되면, 매일 무엇을 얻고 있는지 알 수 없음.
          + 망치는 매번 같은 방식으로 작동함; 왜 LLM은 그렇지 않은가? 편리함 때문임.
          + 편리함 기능은 도구로서 필요할 때 나쁜 소식임.
          + 다행히도 ChatGPT 메모리를 비활성화할 수 있음.
          + 인간은 인간이기 때문에, 최신 이벤트(최신 모델 개정)와 과거 대화를 마법처럼 아는 LLM이 평범한 도구보다 훨씬 인기가 있을 것임.
          + 특정 개정의 LLM을 사용하고 싶다면, 자신의 Open WebUI를 배포하는 것을 고려하라.
"
"https://news.hada.io/topic?id=20562","AI 코딩의 숨겨진 비용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI 코딩의 숨겨진 비용

     * AI 코딩 도구 사용이 생산성은 높이지만, 개발자들이 느끼던 몰입과 창조의 기쁨은 줄어드는 현상에 대한 우려를 제기함
     * 과거 ‘몰입(flow)’ 상태에서의 코딩 경험이 개발자들에게 큰 만족감을 주었음
     * 현재는 AI가 코드 생성을 대신하며, 개발자는 설명하고 평가하는 ‘큐레이터’ 역할에 머무는 경우가 많음
     * 이러한 변화로 인해 장기적인 행복감과 직업 만족도 하락 가능성이 제기됨
     * 해결책으로는 의도적으로 ‘직접 코딩’의 공간을 남겨두는 노력과 새로운 형태의 만족감 찾기가 필요함


코딩의 즐거움은 어디로 갔을까

     * 작성자는 AI 기술의 발전과 긍정적인 측면을 인정하면서도, 개발자로서의 즐거움이 사라지고 있음을 고백함
     * 과거에는 헤드폰을 끼고 네오빔을 켜고, 시간 가는 줄 모르고 몰입하던 코딩의 순간들이 있었음
     * 단순한 효율이나 보상이 아니라, 문제를 해결하며 무언가를 만들어내는 경험 자체가 본질적인 동기였음

심리학에서 말하는 ‘몰입(flow)’의 가치

     * 심리학자 Mihaly Csikszentmihalyi의 이론에 따르면, 몰입 상태는 도전과 기술이 적절히 균형 잡힌 순간에 발생
     * 개발자에게 이 몰입은 코드와 하나 되는 순간, 문제가 퍼즐처럼 느껴지고, 시간 감각이 사라지는 경험으로 나타남
     * 이런 순간들은 단순한 작업이 아니라, 창조성과 직업적 행복감의 핵심임

AI 도구가 바꾼 개발자의 역할

     * 현재는 AI 기반 코딩 도구(Copilot, Cursor 등) 덕분에 직접 작성하지 않아도 많은 코드가 생성 가능
     * 개발자는 이제 프롬프트 작성, AI 결과 검토, 약간의 수정에 집중하게 됨
     * 이로 인해, 과거의 몰입 경험과 창작의 기쁨이 줄어들고 있음
     * AI 사용은 생산성은 향상되지만, 그 과정은 더 수동적이고 감정적으로 거리감 있는 경험이 될 수 있음

진짜 걱정: 몰입이 사라진다면?

     * 생산성은 향상되지만, 기쁨은 감소하는 이중적 현상은 장기적으로 개발자 만족도에 영향을 줄 수 있음
     * 코딩 과정에서의 도전, 창의적 해결, 직접 작성의 성취감이 사라지면, 일 자체의 의미도 흐려질 수 있음
     * ""프롬프트 엔지니어링""이 새로운 몰입의 대상이 될 수 있을까? 에 대한 의문도 제기됨

새로운 몰입의 방식 찾기

     * 미래에는 직접 코딩보다 시스템 설계, 제품 아이디어 구상 등에서 만족감을 찾게 될 수도 있음
     * 또는, 의도적으로 비효율적인 ‘손코딩’의 시간을 확보함으로써 몰입 공간을 유지할 수도 있음
     * 중요한 것은, AI 시대에도 개발자로서의 행복과 몰입을 지키기 위한 의식적인 선택이 필요하다는 것

   직접코딩은 취미의 영역으로 넘어가는걸까요..

   내가 하고 싶은 분에 집중해서 오히려 몰입에 도움이 되는것 같아요

   인터넷에 공개안된 코드는 ai도 절대로 작성 못하는데 어떻게 모든 코딩을 ai가 해줄수있다고 하는지 이해가 잘 안되네요.

   저도 복잡성이 상대적으로 낮은 소프트웨어들을 대상으로 하는 얘기 아닌가? 하는 생각이 들었습니다. 오픈 소스라고 해도, 예를 들어, 리눅스 커널 핵심 코드를 잘 짤 수 있을지...

        Hacker News 의견

     * 어떤 사람들은 프로그래밍 자체를 사랑함. CS 이론, 도구, 거의 모든 것을 사랑함
          + 다른 사람들은 그것을 목적을 위한 수단으로 보고, 기술적 측면에서 즐거움을 찾지 않음. 그들은 과정보다는 결과물에 더 관심이 있음
          + 그룹 A에 속한다면 그룹 B를 이해하기 어려울 수 있음. 반대의 경우도 마찬가지임
          + 나는 음악가로서 음악 창작의 모든 것을 사랑함. 이론, 악기 숙달, 수천 시간의 연습을 통해 불가능하다고 생각했던 것을 연주할 수 있게 됨
          + 반면, 어떤 사람들은 곧바로 결과물로 뛰어들고 싶어함. 그들은 머릿속의 멜로디나 아이디어를 중심으로 곡을 만들고 싶어함
          + 나는 그런 사람들을 무시하지 않음. 이해하지 못하지만 이해할 필요도 없음
          + 많은 개발자들이 수년간 기술과 사랑을 연마해왔고, 사람들이 왜 노력 없이 생성된 것을 원하는지 이해하지 못함
     * 프로그래밍을 즐긴다면 코딩을 계속할 수 있음. 키보드를 빼앗긴 것이 아님
          + AI는 내가 실제로 관심 있는 코딩 부분에 집중할 수 있게 해줌. 프로젝트의 5-10% 정도임
          + 나머지는 반복적인 작업, Dockerfile, 빌드 시스템, Bash 환경 변수 전달 등으로 이루어져 있음
          + AI는 항상 옳지는 않지만, 인간보다 더 신뢰할 수 있음. 판단하거나 비웃지 않음
     * 우리의 작업에서 기쁨을 잃는다면 무엇을 최적화하는 것인지 의문임
          + 진짜 사람들을 위한 문제 해결이 목표임
          + 오픈 소스 사이드 프로젝트는 사랑과 즐거움을 위해 존재함
          + 프로그래밍은 잘 될 것임
     * 최근 AI 지원 코딩 덕분에 오랜만에 멋진 흐름을 경험함
          + 작업을 적당한 복잡성의 구성 요소로 나누고, AI가 처리하도록 함
          + 고수준 설계에 집중함
     * 이 댓글 섹션은 코딩을 사랑하고 AI를 싫어하는 사람들과 코딩을 싫어하고 AI를 사랑하는 사람들 간의 명확한 차이를 보여줌
          + 코딩을 다른 사람이나 무언가에게 맡기고 싶어하는 사람들은 이미 최악의 코드를 출력하는 개발자일 가능성이 높음
     * Github Copilot과 ChatGPT 4.0을 사용 중임. 작은 예제에서는 괜찮지만, 대부분의 경우 프롬프트는 시간 낭비임
          + LLM이 큰 프로젝트에서 도움이 되는지 궁금함
          + LLM을 사용하는 사람들에게 질문함: 큰 프로젝트에서 프롬프트 전략을 변경해야 하는지, 어떤 프로그래밍 언어를 사용하는지, 비트리비얼 문제에서 LLM이 도움이 되는지
     * 대부분의 작업을 프롬프트로 처리하고, 철저히 검토한 후 커밋하고 푸시함
          + LLM을 잘 사용하려면 명확한 우선순위를 설정해야 함
     * AI 도구로 인해 직업이 덜 만족스러워짐
          + AI 도구가 전체 작업을 자동화할 수 없고, 자동화할 수 없는 작업이 더 지루함
          + AI 도구가 자신이 중요하게 생각하는 것에 집중할 수 있게 해준다는 사람들을 부러워함
     * 프로그래밍이 지금처럼 재미있었던 적이 없음. 지루하고 번거로운 부분이 사라지고, 내가 쓰고 싶은 코드에 집중할 수 있음
     * 작은 데이터로 돌아가야 함. 손으로 고른, 지역에서 얻은 데이터. 향기와 느낌을 느낄 수 있는 데이터
          + 그런 날들은 사라졌음
"
"https://news.hada.io/topic?id=20634","Redis, 다시 오픈소스로 돌아오다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Redis, 다시 오픈소스로 돌아오다

     * Redis가 AGPLv3 라이선스로 전환되며 오픈소스로 다시 돌아옴
     * 기존 SSPL 라이선스는 커뮤니티에서 오픈소스로 인정받지 못했고, 내부에서도 AGPL 전환 논의가 계속되어 왔음
     * 새 데이터 타입인 Vector Sets는 오픈소스 정신 아래에서 개발되었으며, Redis 8 버전과 함께 정식 출시됨
     * 라이선스 전환은 단순한 기술 문제가 아닌, 커뮤니티와 일관성을 유지하기 위한 철학적 선택임
     * Redis 창시자인 antirez는 커뮤니티를 존중하며 최고의 코드를 계속 작성하겠다는 의지를 밝힘


Redis가 다시 오픈소스로 전환된 배경

     * Redis 창시자이자 현재 Redis 프로젝트에 복귀한 antirez는 AGPL 라이선스로의 전환을 내부에서 적극 지지
     * 그는 SSPL이 오픈소스 이니셔티브(OSI)와 개발 커뮤니티로부터 정식 오픈 라이선스로 인정받지 못했다는 점을 지적
     * 오랜 내부 논의 끝에 Redis는 SSPL에서 AGPLv3로의 전환을 결정, 커뮤니티 중심의 소프트웨어로 돌아감

오픈소스 개발자로서의 소신

     * antirez는 자신이 개발한 새로운 데이터 타입 Vector Sets가 반드시 오픈소스로 배포되길 바람
     * 그는 ""오픈소스 소프트웨어 개발이 내 정체성의 일부이며, 이제 와서 바꿀 수 없다""고 밝힘
     * Redis 프로젝트의 목표는 단순함과 실용성을 유지하면서도 지속 가능한 기술적 진화를 이끄는 것이라고 설명

AGPLv3의 의미와 사용자와의 신뢰 회복

     * Redis가 다시 자유롭게 사용할 수 있는 오픈소스 소프트웨어로 인정받게 된 것은 사용자 기반과의 신뢰를 회복하는 데 핵심임
     * 단일 기업을 넘는 공동의 기술적 노력에 Redis가 다시 참여하게 된 것을 강조하며 커뮤니티 기여에 대한 의미를 되새김

Redis 8 출시 및 향후 계획

     * Redis 8은 AGPL 라이선스를 적용한 첫 공식 버전으로, 다수의 기능 개선과 핵심 속도 향상이 포함됨
     * antirez는 Vector Sets 기능을 더 실용적으로 만들기 위한 아이디어를 계속 구현해나갈 계획이며, 커뮤니티 피드백도 환영함
     * 관련 블로그:
          + Redis 8 출시 블로그
          + Redis CEO의 AGPL 전환 입장문

   미래에도 어떤 이유에서건 라이센스를 언제든지 변경할 수 있지 않을까요? 1년만에 입장을 번복한 걸 보면 신뢰할 수 없습니다 https://news.hada.io/topic?id=13942

   AGPL 무서워요...

   AGPL 무서워요.....

   공포의 라이센스인데..

   AGPL 무서워여

   귀환을 환영합니다...만 저는 계속 valkey 쓰겠습니다...

        Hacker News 의견

     * Redis의 원래 라이선스 하에 기여했으나 SSPL로의 예상치 못한 라이선스 변경에 실망하여 redict로 전환함. AGPL로 바로 변경했다면 도덕적으로 괜찮았을 것임
          + antirez에 대한 존경심은 여전하지만 Redis, Inc.에 대한 신뢰는 잃었고, 앞으로도 Redis 포크를 사용할 것임
     * 많은 사람들이 냉소적인 반응을 보이지만, 이번 결정은 커뮤니티가 원했던 것이며, 다른 회사들도 이를 보고 긍정적인 영향을 받을 수 있을 것임
          + Redis 팀에게 감사함
     * Redis 블로그에 따르면, AGPL 라이선스 하에 새로운 기능들이 추가됨
          + Redis Query Engine은 Elasticsearch의 대안으로 보이며, 새로운 기능들이 추가된 Redis 8이 흥미로움
     * 커뮤니티가 Redis를 다시 신뢰할지, Valkey를 계속 사용할지 궁금함
          + 일부 대기업의 법무팀은 AGPL 소프트웨어에 대해 경계하고 있어 Valkey가 더 매력적일 수 있음
     * CEO 블로그 포스트에 따르면, AWS와 Google이 자체 포크를 유지하게 된 것이 목표였음
          + 그러나 이는 큰 사용자들이 소프트웨어를 포크하고 자체 버전을 유지하게 만드는 것이 좋은 것은 아님
     * Redis는 새로운 기술을 배우고 데이터를 탐색하는 도구로 유용함
          + API 디자인이 잘 되어 있어 새로운 기능을 쉽게 사용할 수 있음
          + Antirez가 Redis로 돌아와 기쁘고, Redis가 계속 발전하고 있음
     * 우리 회사는 Valkey로 전환했으며, 많은 엔지니어링 시간을 투자했음
          + Redis가 다시 라이선스를 변경할 가능성이 있어 돌아갈 계획이 없음
     * CLA가 여전히 필요하며, 이는 다시 독점 라이선스로 변경할 수 있는 가능성을 남겨둠
          + AGPL 전용 패치를 수용해야만 오픈 소스로 남을 수 있음
     * Antirez가 Redis를 떠날 때 쓴 블로그 포스트에서 코드를 예술로 표현하고 싶다고 언급함
          + 그의 예술이 아름다움을 잃고 있었지만, 이제 다시 찾고 있음
     * 이번 드라마에서 배울 점은, 소프트웨어 라이선스를 자유 오픈 소스에서 경쟁을 제한하는 방향으로 변경하면 신뢰를 잃는다는 것임
          + 한 번 신뢰를 잃으면, 라이선스를 되돌려도 신뢰를 회복하기 어려움
"
"https://news.hada.io/topic?id=20576","iPhone을 벽돌로 만들 수 있었던 1줄짜리 코드 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    iPhone을 벽돌로 만들 수 있었던 1줄짜리 코드 이야기

     * Darwin Notification 시스템의 특성과 취약점을 이용해 iPhone을 벽돌화할 수 있었던 사례 소개
     * 이 취약점은 CVE-2025-24091로 등록되었으며, 제보자는 $17,500(2500만원) 의 버그 바운티를 수령했음
     * 특별한 권한 없이 시스템 수준 알림을 전송할 수 있다는 점을 악용해 iOS 장치 전체를 마비시킬 수 있었음
     * 간단한 한 줄 코드로 ""Restore in Progress"" 모드를 강제 유발하여 재부팅 반복을 유도하는 서비스 거부(DoS) 공격 가능성이 확인됨
     * iOS 18.3 업데이트를 통해 중요한 Darwin Notification 전송에 제한 권한(entitlement) 을 요구하도록 수정되어 취약점이 해결됨


Darwin Notifications

     * Darwin Notifications는 iOS와 macOS에서 프로세스 간 간단한 메시지를 주고받기 위한 CoreOS 레벨의 메커니즘임
     * notify_post 로 이벤트를 알리고, notify_register_dispatch 로 이벤트를 수신하며, 상태값(state) 을 읽거나 쓸 수 있는 구조임
     * 특별한 권한 없이 수신 및 송신이 가능하고, 보안 검증 절차가 없음
     * 시스템의 다양한 컴포넌트들이 이 레거시 API에 의존하고 있었음

취약점 개요

     * Apple 운영 체제의 모든 프로세스는 Darwin Notifications를 수신할 수 있으며, 특별한 권한이 필요하지 않음
     * 샌드박스된 앱에서도 Darwin Notification을 전송할 수 있는 구조적 허점이 존재했음
     * 데이터 전송량이 제한적이기 때문에 민감한 데이터 유출 위험은 크지 않음
     * 특정 중요한 시스템 알림(ex: 복원 시작 알림)을 송신하면 전체 시스템에 영향을 줄 수 있음
     * 이로 인해 서비스 거부(DoS) 공격 가능성을 찾아냄

EvilNotify와 VeryEvilNotify

     * EvilNotify 앱을 통해 다양한 시스템 반응을 강제로 발생시킬 수 있었음
          + 액체 감지 아이콘 표시
          + Wi-Fi 차단 및 셀룰러 강제 사용
          + 잠금 화면 및 제어 센터 제스처 차단
          + Find My Lost Mode 진입 등
     * 특히, notify_post(""com.apple.MobileSync.BackupAgent.RestoreStarted"") 한 줄로 Restore in Progress 상태에 빠뜨릴 수 있었음
     * 이 모드는 장치가 실제로 복원되지 않기 때문에 실패하며, 유일한 해결책은 ""재시작"" 버튼을 누르는 것임
     * VeryEvilNotify 앱은 위젯 확장을 이용해 재부팅 후에도 자동으로 공격 재시작이 가능하도록 구현함
     * 위젯 확장은 시스템이 백그라운드에서 주기적으로 실행되며, notify_post 함수를 호출하여 ""복원 진행 중"" 모드를 반복적으로 트리거함
     * 결과적으로 장치를 완전히 벽돌화시키는 효과를 일으킬 수 있었음

타임라인 및 CVE 등록

     * 2024년 6월 26일: Apple에 초기사건 보고서 제출
     * 2024년 9월 27일: Apple로부터 완화 조치가 진행 중이라는 메시지 수신
     * 2025년 1월 28일: 문제 해결 완료 및 버그 바운티 자격 확정
     * 2025년 3월 11일: CVE-2025-24091로 공식 등록되고 iOS/iPadOS 18.3에서 해결됨
     * 버그 바운티 금액은 미화 17,500달러 지급

대응 및 완화 조치

     * 민감한 Darwin Notification 송신에는 제한된 권한(entitlement) 이 필요하도록 변경됨
     * 예를 들어, 기존 com.apple.MobileBackup.BackupAgent.RestoreStarted 알림은 com.apple.private.restrict-post.MobileBackup.BackupAgent.RestoreStarted로 변경됨
     * 알림을 수신하는 프로세스도 새로운 이름을 사용해 비인가 앱의 무단 송신을 차단함
     * 이 제한 권한 체계는 iOS 18.2 베타 2부터 적용되기 시작했고, iOS 18.3에서 완전히 마무리됨

        Hacker News 의견

     * 이 API를 통해 설정 및 알림 게시에 대한 모든 사용에 권한을 요구하지 않는 점이 흥미로움
          + 기기에서 프로세스 간에 64비트 정보를 공유할 수 있는 방법이 있음
          + 앱 간 사용자 추적에 적합한 기능임
          + 시스템이 값을 저장하고, 어느 앱에서 왔는지 추적하지 않는다면, 앱 삭제 및 재설치 후에도 지속적인 저장소가 가능함
          + IDFA 또는 IDFV 재설정을 우회하는 데 사용할 수 있음
     * 설명된 취약점은 기기를 ""벽돌""로 만들지 않음
          + 복구를 위해서는 테더드 복원이 필요함
     * $17,500는 꽤 괜찮음
          + 블로그 게시물이 보통 적은 금액이거나, 회사가 취약점을 수정하고 보상을 하지 않는 경우가 많음
          + Apple은 2019년 이후로 이 부분에서 개선됨
     * 훌륭한 작업임
          + 간단하고 효과적이며 강력한 취약점임
          + 20년 전 대학 친구와 함께 이론화했던 완벽한 서버 취약점을 떠올리게 함
          + 2년 전 CVE-2022-23093로 발견됨
     * iOS 핵심 팀이 이를 검토했을 때 사무실에서 얼마나 힘든 날이었을지 상상할 수 있음
     * 코드 한 줄로 기기가 ""복구 진행 중"" 모드에 들어가게 할 수 있었음
          + 어떤 프로세스든 알림을 보내 시스템을 그 모드로 속일 수 있었음
     * 옛날 IRC 시절이 그리움
          + 작은 변화가 기술에 얼마나 위험할 수 있는지를 상기시킴
          + 보안이 앞서 나가는 것인지 아니면 계속해서 누수를 막는 것인지 궁금함
     * 타사 앱이 자체 알림 체계를 가지고 있다면 유사하게 사칭될 수 있음을 암시함
          + 기기를 벽돌로 만들 수는 없겠지만 다른 동작을 유발할 가능성이 있음
     * 악성 앱을 사용자가 적극적으로 설치해야 하므로 우선순위가 낮을 수 있음
          + 그러나 그 시간표가 자신감을 주지 않음
     * 이 글은 대단한 읽을거리였음
          + 매우 오래된 API가 얼마나 강력했는지 보여줌
          + iOS의 저수준 상태를 모두 트리거하는 멋진 데모였음
          + notify_post가 지금은 어떻게 되었는지 궁금함
"
"https://news.hada.io/topic?id=20607","지식기반 사회라니, 웃기지 마라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           지식기반 사회라니, 웃기지 마라

     * EU가 자금을 지원하는 박사 프로그램에 참여한 한 연구자의 체험기를 통해, 실제 학문 현장의 비효율, 무관심, 형식주의, 위선이 낱낱이 드러남
     * 연구를 위한 지도교수의 무관심과 장비 부족, 폐쇄적인 부서 문화 속에서 고군분투하며 결국 형식적인 논문과 실험을 통해 박사 학위를 마무리함
     * 실질적 연구는 없이 논문 수 조작, 소프트웨어 라이선스 쟁탈, 무의미한 교수 타이틀 존중 문화 등 부조리한 구조가 일상임
     * 연구자는 비협조적인 시스템 속에서 끊임없이 타협하고 체념하며 생존해 나가는 현실을 유머와 자조 섞인 시선으로 풀어냄
     * 결국, '지식기반 사회'라는 거창한 이상과는 거리가 먼 형식적 행정과 허울뿐인 학문 풍경이 냉소적으로 묘사됨


연구 시작부터 막히는 현실

     * 지도교수는 입학 직후 당장 연구를 시작하자며 본인의 전일제 직장을 그만두게 했으나, 막상 시작하자 “할 일이 없다”며 귀가시킴
     * 연구를 위해 요청한 사무실과 컴퓨터조차 거절당하다가 수개월 뒤 지하실에 있는 창 하나 없는 공간을 할당받음
     * 연구 주제는 스텐트와 전자기장의 영향이었지만, 기초 의료 장비조차 하나 없고 스텐트 실물도 본 적 없음

연구는 책상 위 상상으로 진행됨

     * 교수는 컴퓨터 시뮬레이션으로 충분하다고 주장하며, 고가의 소프트웨어 라이선스는 자기 노트북과 사무실 컴퓨터에만 설치
     * 다른 박사생의 도움으로 라이선스를 얻고, 실제 사람 대신 금속 막대와 돼지고기를 모델 삼아 실험
     * 논문은 1편을 3편으로 나누고, 시뮬레이션만 살짝 바꿔 “성과”를 만들며 체면치레

학문보다 중요한 것은 형식과 위계

     * 학부 저널은 표절과 일반론이 가득하며, 학문적 토론은커녕 ‘호칭 생략’에 혼나는 문화가 지배
     * 박사생은 지도교수 허락 없이 강의 기회조차 가질 수 없으며, 배정받은 동료는 “C++는 월요일까지 배우면 된다”는 식
     * 출석 확인은 월 1회 손으로 쓰는 수기 출석부로, 행정 보조원은 “공휴일인데 왜 출근했다고 썼냐”며 꾸짖음

논문 심사도 쇼처럼 진행됨

     * 학위 심사 당일, 간식과 커피 준비를 학생에게 떠넘기려다 거부당함
     * 마지막 실험은 실제 인체 대신 돼지고기와 임시 센서로 진행, 교수는 모든 “민감한 장비”를 직접 다루며 결과만 받아감
     * 최종 방어 후, 교수는 다시 협업하자며 집요하게 다가오지만 거절당함

냉소 속의 탈출

     * “나는 진짜 과학자가 될 수 없다”는 자각과 함께, 비어 있는 시스템 속에서 살아남기 위한 타협과 무기력의 기록
     * “지식기반 사회”라는 프로젝트명과 유럽연합의 거대한 목표는 실제 연구 현실과 극명히 대조됨
     * 지하실 사무실과 교수, 그 모든 허울뿐인 ‘지식 기반’의 무대에서 퇴장하며 마무리
     * 결국 학생은 학문적 환경에 대한 회의감을 느끼고 새로운 길을 모색함

        Hacker News 의견

     * 긴 글을 유머러스하게 작성한 것에 대해 칭찬함. 시스템 확장이 어려운 이유 중 하나를 보여주는 예시로, 특히 깊은 사고가 필요한 작업에서 어려움이 있음. 정부가 지식 기반 사회를 만들기 위해 대량의 박사 학위를 후원하는 정책이 지식의 정의를 변화시키고 있음
     * 이 글을 매우 즐겁게 읽었음. 사촌의 논문 방어에 참석했을 때, 사촌이 교수, 의장, 학과장 등을 언급하며 시간을 보냈음. 왜 그들을 언급했냐고 물었더니, 그들은 자신의 이름이 불리는 것을 좋아하기 때문이라고 답했음
     * 밀턴 프리드먼 교수가 해외 여행 중 도로 건설 노동자들이 삽으로 일하는 것을 보고, 왜 현대 장비를 사용하지 않느냐고 물었을 때, 고용을 유지하기 위해서라는 답변을 받음. 프리드먼은 ""그렇다면 삽 대신 숟가락을 주면 더 많은 일자리를 만들 수 있지 않겠냐""고 물었음
     * 읽기 고통스러웠음. ""동의하지 않는 것에 고개를 끄덕이며 동조할 때 밤에 더 잘 잔다는 희미한 느낌이 든다""는 말을 듣고 신경이 쓰였음. 그들이 우리에게 무엇을 하게 만들었는지 보라
     * 친구가 박사 학위를 마친 후, 교수에 대한 평가가 변했음. 처음에는 최고의 교수라고 생각했지만, 나중에는 최악의 지도교수라고 생각하게 되었고, 졸업 후에는 그가 직업을 구하는 데 도움을 주었다고 다시 평가함. 이는 꽤나 일반적인 롤러코스터 경험임. 나는 박사 학위를 받지 않았지만, 런던의 한 대학에서 연구 조교로 일하면서 교수실에서 3개월을 보냈음. 나중에 통계 연구실로 옮겨졌고, 그곳에서 오래된 계산기를 발견했음. 그들의 5년간의 작업이 새로운 컴퓨터로 하루 만에 완료되었음
     * 학계에서의 경험으로는 연구 주제가 충분하지 않음. 이 글만큼 나쁘지는 않았지만, 수억 유로를 투입해 박사 학위를 대량 생산한다면 얼마나 나쁠지 상상할 수 없음
     * 어떤 구원자가 이 링크를 보존했을 것임: [링크]
     * 어느 나라 이야기인지 알 수 없었음. 전체를 읽었지만, 어느 나라와 대학이 관련되어 있는지에 대한 맥락을 찾을 수 없었음
     * 이해하지 못하는 것들에 많은 가치가 잠겨 있을 수 있으며, 그 연구는 자금 지원을 받지 못할 가능성이 큼. 반면에, 인간은 이익과 같은 압박이 없으면 프로젝트를 조직하고 계획하는 데 서툼
     * 구 소련권 국가인가?
"
"https://news.hada.io/topic?id=20555","HN 공개: 내가 직접 작성한 취미 OS, 빈티지 IBM ThinkPad에서 드디어 실행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 공개: 내가 직접 작성한 취미 OS, 빈티지 IBM ThinkPad에서 드디어 실행

     * RetrOS-32는 i386 아키텍처 기반 32비트 취미용 운영체제 프로젝트임
     * 그래픽, 멀티태스킹, 네트워킹 기능을 제공하며 실제 하드웨어에서도 테스트됨
     * C, C++, 어셈블리어로 작성되었고 Docker를 통해 크로스플랫폼 컴파일을 지원함
     * 사용자 시스템 구축, QEMU 에뮬레이션 실행, 실기기 부팅이 가능함
     * 프로젝트는 완성도 높은 커널 기능과 네트워크 스택을 갖추고 있으며 지속적으로 기능 추가 중임


RetrOS-32bit 프로젝트 소개

     * i386 아키텍처를 기반으로 한 32비트 취미용 운영체제 개발 프로젝트임
     * 그래픽 환경, 멀티태스킹, 네트워크 기능을 지원함
     * 프로젝트 시작일: 2022년 5월 12일

기본 로그인 정보

     * 기본 사용자 계정: system, admin, guest
     * admin 비밀번호는 admin, guest는 비밀번호 없음
     * 새로운 사용자는 admin create <사용자명> <비밀번호> 명령어로 생성 가능

주요 개발 언어 및 툴

     * C, Assembly: 커널, 유틸리티, 빌드 시스템
     * C++: 사용자 공간 애플리케이션
     * Make: 빌드 자동화
     * Docker: 크로스플랫폼 컴파일 환경 제공

테스트된 하드웨어

     * Lenovo x240
     * Asus Eee PC 시리즈
     * Dell Optiplex 780
     * Samsung N150 Plus
     * Samsung NP-NC10
     * IBM Thinkpad a21p

시작하기 (Getting Started)

  필요한 도구 (Prerequisites)

     * Docker: 크로스플랫폼 컴파일
     * QEMU: 가상 머신 에뮬레이션
     * Linux/WSL 환경: build-essential, gcc-multilib, grub2, xorriso, xxd
     * MacOS: Docker 사용 필요 (32비트 x86 빌드 제한)

  설치 방법 (Installation)

     * Git 저장소 클론
     * Git 서브모듈 초기화
     * make compile, make img 명령으로 이미지 파일 생성
     * make qemu 명령으로 QEMU 에뮬레이터 실행

   MacOS와 Windows에서는 Docker 사용 권장

사용법 (Usage)

     * copy.sh v86 사이트에서 .img 파일 업로드하여 실행
     * QEMU로 직접 실행 가능: make qemu 또는 qemu-system-i386 <이미지명>
     * 실기기에서는 GRUB 기반 ISO를 USB/CD로 구워서 부팅 가능

프로젝트 구조 (간단 요약)

     * apps: 사용자 공간 애플리케이션
     * bin: 바이너리 파일
     * boot: 부트로더 소스
     * drivers: 커널 드라이버
     * fs: 파일 시스템 코드
     * graphics: 그래픽 처리 코드
     * include: 헤더 파일
     * kernel: 커널 주요 소스
     * lib: 라이브러리
     * net: 네트워킹 코드
     * rootfs: 루트 파일 시스템
     * tests: 테스트 코드
     * tools: 빌드 및 유틸리티 도구

개발 로드맵 (Roadmap)

     * 커스텀 부트로더 및 GRUB 호환 부트 완료
     * 멀티스레드 선점형 스케줄링 및 커널/유저 공간 분리 구현
     * 네트워크 스택: Ethernet, IP, ARP, UDP, TCP, DHCP, DNS 완료
     * 그래픽스 시스템: 창 관리자, 위젯, 더블 프레임버퍼 렌더링 구현
     * 파일 시스템: Ext2 유사, FAT16 지원, 읽기/쓰기 가능
     * 향후 계획: 웹서버, FTP, IRC, SSH, Telnet, HTTP, HTML 지원 추가 예정

        Hacker News 의견

     * 이런 프로젝트는 AI보다 훨씬 더 보기 좋음. 판매될 것 같진 않지만, 기술자가 창의적으로 작업을 하는 모습임
          + 10대 후반에 취미로 OS 개발을 많이 공부했음. 여전히 작은 커널을 만들곤 함 (최근에는 RISCV 작은 커널로 파트너에게 메시지를 출력했음)
     * 오랫동안 본 것 중 가장 인상적인 열정 프로젝트 중 하나임. 왜 직접 C 컴파일러를 작성했는지 궁금함
     * 기본 시스템 폰트는 더 압축된 변형이어야 함. 시스템이 훨씬 더 정제되어 보일 것임
          + 문자에 더 많은 가로 공간이 필요함이 명확함. 각 문자는 너비가 적어야 하고, 문자 간의 공간은 가능한 한 적어야 함 - 현재 사용 중인 폰트 크기와 해상도에서는 한 픽셀 정도면 충분함
          + 폰트 시스템에 대해 잘 모르지만, 고정 폭 비트맵 폰트라고 가정함. 코드베이스 내에서 이러한 변경을 하는 것이 얼마나 어려운지 모르겠지만, 너무 많은 작업이라면 걱정하지 말 것
          + 웹 OS 사이트를 처음부터 만들고 있으며, 최근 폰트 클래스를 완전히 다시 작성했음. 그래서 이 문제가 머릿속에 있음
     * 훌륭함! 오늘 다시 시작한다면 무엇을 다르게 할 것인가?
          + 하위 레벨 부분에 대한 언어 적합성에 대한 생각은? (예: C에 머무르거나 C++의 간단한 부분 집합 또는 새로운 언어 중 하나)
          + 다양한 리소스가 있는 상황에서 어떻게 다른 사람의 코드를 복사하지 않고 프로젝트를 흥미롭게 유지했는가?
     * 축하함! 1977년에 Commodore PET 2001을 사용했던 사람으로서 멋지게 보임. KolibriOS와 MenuetOSx64를 가지고 놀고 있었지만, 나만의 OS를 만들고 싶었음. 해냈음! 계속 전진하길 바람
     * 축하의 말을 전하고 싶음. 프로젝트에 깊은 인상을 받았음. 10대 때부터 OS 개발 팬이었고, 이 성과가 실현되는 것을 보니 기분이 좋음. 그래픽 서브시스템이 어떻게 초기화되는지 궁금함. 성공을 기원함
     * GNU처럼 크고 전문적일 것인가? :)
     * 이 컴파일러가 운영 체제와 어떻게 상호작용하는지 설명해 줄 수 있는가? 특히 구조체 같은 기능을 어떻게 처리하는지, 이 분야의 현재 제한 사항이나 계획된 개선 사항은 무엇인지 궁금함
     * 몇몇 프로젝트가 동시에 이정표에 도달하는 것이 흥미로움. 컴퓨터와 깊이 있게 작업하고 결과를 공유하는 사람들이 여전히 있다는 것이 안심이 됨
          + 계속 전진하길 바람
     * 에디터에서 Turbo C/QBasic의 흔적을 봄
          + 프로젝트에 찬사를 보냄
"
"https://news.hada.io/topic?id=20509","리버스 엔지니어링용 IDA Pro MCP 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       리버스 엔지니어링용 IDA Pro MCP 서버

   IDA Pro를 위한 MCP 서버가 나왔습니다.

   참조 :
   리버스 엔지니어링용 Ghidra MCP 서버(GeekNews)
"
"https://news.hada.io/topic?id=20623","왜 우리는 RGB와 HSL에서 OKLCH로 전환했을까요? (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  왜 우리는 RGB와 HSL에서 OKLCH로 전환했을까요? (번역)

     * OKLCH 색상 공간은 기존의 RGB나 HSL과 달리 사람의 인식에 기반하여 더 정밀하고 예측 가능
     * 디자인 시스템과 접근성 향상에 적합하며, 특히 P3 같은 광색역 색상 표현에 강점을 가져 최신 디바이스와 더 잘 호환됨
     * oklch()는 읽기 쉽고 직관적인 색상 형식으로, 코드 기반 색상 조작이 간편해짐. 밝기(L), 채도(C), 색상(H), 불투명도(a)를 구분함
     * CSS Colors 4/5 사양과 함께 네이티브 색상 조작 기능이 강화되고 있어, OKLCH는 미래지향적인 선택임
     * Stylelint, Figma 플러그인, JS 라이브러리 등 생태계도 빠르게 발전 중이며, 디자인-개발 협업에도 긍정적임
     * 다만 아직 생태계가 성숙하지 않았으며, 일부 조합은 모든 모니터에서 보이지 않을 수 있음

프로젝트에 OKLCH 적용하기

    1. 기존 CSS의 색상 값을 찾아 OKLCH로 변환하고, Figma 플러그인이나 변환 도구를 활용해 OKLCH 색상 복사 및 적용
    2. CSS 내 색상들을 커스텀 속성 팔레트로 정리해 재사용성과 유지보수성 향상
    3. Stylelint와 plugin을 사용해 OKLCH 외 색상 사용을 자동 감지 및 방지
    4. CI 환경에 Stylelint를 통합해 색상 일관성 검사를 자동화

OKLCH 전환 후 얻은 이점

    1. 더 나은 코드 가독성
    2. 예측 가능한 색상 수정
    3. 상대 색상 기반 디자인 시스템 구축
    4. P3 색상 등 고급 시각 표현 지원
    5. 디자인팀과의 더 나은 협업 가능성

   dmx컬러조명같은 시퀀스 작성과 가독에 편의가 상당히 증가할것 같습니다
"
"https://news.hada.io/topic?id=20521","AI는 접근성의 미래입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI는 접근성의 미래입니다

     ""접근성(Accessibility) 분야에서 AI를 외면해서는 안 되는 이유""

     * AI는 이미 다양한 방식으로 접근성 향상에 기여하고 있으며, 앞으로는 기반 인프라 수준의 기술이 될 것으로 전망됨
     * 일부 전문가의 ""AI는 접근성을 해결하지 못할 것""이라는 주장에 대해, 이는 기술 발전을 저해하는 위험한 고정관념으로 간주함
     * 실제로 청각, 시각, 이동, 언어 등 다양한 장애 유형을 위한 AI 응용 사례가 빠르게 확산 중
     * 현재 AI의 한계는 존재하지만, 속도와 성능은 계속 향상되고 있어 장기적 잠재력은 매우 큼
     * 접근성 분야 종사자들이 지금 AI 개발에 적극적으로 참여해야, 기존의 배제와 편향이 반복되지 않음


자동차 산업의 ‘Malaise Era’와 혁신 부재

     * 글쓴이는 기술 발전을 거부하거나 경계하는 태도가 과거 미국 자동차 산업의 쇠퇴를 가져온 ""Malaise Era"" 와 유사하다고 지적
          + Malaise Era(말레이즈 시대) 는 1970년대 후반에서 1980년대 초반까지 미국 자동차 산업의 침체기를 가리키는 용어임
          + 이 시기에는 연비 규제, 배출가스 규제, 안전 기준 강화 등의 외부 요인으로 차량 성능과 디자인이 급격히 저하됨
          + 미국 3대 자동차 회사(GM, Ford, Chrysler)는 혁신 대신 타협적인 기술 대응을 선택했고, 일본 차의 급속한 시장 점유율 확대를 허용함
          + 엔진 출력 감소, 품질 문제, 디자인 저하로 인해 미국 소비자의 브랜드 신뢰도 하락이 심화됨
          + 결과적으로 이 시기는 기술 정체, 규제 대응 실패, 소비자 요구 무시의 복합적 결과로 인식되며 **""혁신을 외면한 대가""**를 상징함
     * 접근성 업계 내 일부 전문가들이 AI 회의론을 확산시키는 것은 산업 전반의 발전을 저해하고 있음

이미 접근성에서 활약 중인 AI 사례들

     * 청각 장애인을 위한 실시간 자막
          + Google Live Transcribe, Otter.ai, Zoom, YouTube 자막
          + 실시간 대화 참여 가능성 향상
          + 완벽하진 않지만 빠르게 개선 중
     * 시각 장애인을 위한 AI 보조 앱
          + Microsoft Seeing AI, Be My Eyes (AI 모드)
               o 장면 설명, 얼굴 인식, 문서 읽기, 화폐 인식 등
          + 컴퓨터 비전의 발전이 접근성을 획기적으로 변화시키는 중
     * 수화 인식 기술
          + SignAll, KinTrans
               o 실시간 ASL(미국 수화) 인식 가능
               o 사용자 신뢰 확보는 과제지만, 기술적 정확도는 높음
     * 이동 장애인을 위한 자율 내비게이션
          + Waymo, WHILL 자율 휠체어, 스마트 지팡이
               o 실내외 이동에 있어 독립성과 안전성 향상
     * 언어·발화 장애인을 위한 AI 보조기기
          + Tobii Dynavox, Proloquo2Go, Voiceitt
               o AI 기반 음성 생성 및 비표준 발화 인식 지원
               o 의사소통 격차 해소

AI는 지금보다 훨씬 발전할 것

     * 많은 이들이 AI를 ""지금 상태""로만 판단하는 실수를 함
     * 예시:
          + 수학 문제: 과거보다 결과가 훨씬 나아짐
          + 코드 생성: 맥락 유지 등은 미흡하지만 기본적 구현은 가능
     * 의료, 법률, 자율주행 등 아직 신뢰 어렵지만, 미래에는 가능성 있음

AI는 접근성의 미래가 된다

     * AI는 현재 신기한 기술처럼 보일 수 있으나, 미래에는 전기, 인터넷처럼 기본 인프라가 될 것
     * 정적이고 규칙 기반이었던 기존 시스템이 AI 기반의 유동적이고 개인화된 경험으로 진화 중
     * AI가 접근성에 줄 수 있는 변화 예시
          + 화면리더가 레이블 없는 요소도 의미 파악 가능
          + 자폐 사용자의 의사소통 앱이 개인 특성을 학습하고 맞춤 대응
          + AR 안경을 통한 실시간 자막 제공
          + 휠체어 사용자의 스마트 어시스턴트가 선호도 이해 및 행동 대리

지금이 개입해야 할 때

     * 현재의 AI는 지금 학습 중이며, 오늘 우리가 개입하지 않으면 과거의 배제가 그대로 재현될 위험
     * 접근성 전문가가 AI 설계에 참여해야 다양성을 반영한 시스템 구축 가능

마무리 메시지

     * AI를 두려워하지 말고 도구로서 적극적으로 다듬어 나가야 함
     * 미래는 변화를 받아들이고 그것을 설계하는 사람들의 것
     * 변화를 막는 대신, 그 변화가 더 나은 방향으로 가도록 주도하자

   화면 리더 -> 스크린 리더 or 화면 낭독기
   번역기 티가 남아있는 것 같네요.
   스크린 리더 실 사용자로서 지나칠 수 없어 댓글 달아봅니당~
"
"https://news.hada.io/topic?id=20523","토스, 테크니컬 라이팅 가이드 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          토스, 테크니컬 라이팅 가이드 공개

좋은 기술 문서를 쓰는 핵심 원칙

  1. 문서 유형 정하기

   문서의 목적에 따라 더 효과적으로 글을 쓰는 방법이 다름
     * 학습 중심 문서: 새로운 기술이나 도구를 처음 접했을 때, 흐름을 파악하는 목적
     * 문제 해결 문서: 배경 지식이 있을 때 특정한 문제를 해결하는 목적
     * 참조 문서: 이미 사용 방법을 알지만, 특정 기능이나 API 사용법을 확인하는 목적
     * 설명 문서: 개념, 원리, 배경 지식을 자세히 이해하는 목적

  2. 정보 구조 만들기

   새로운 지식을 이해하려면 노력이 필요하지만, 정보를 구조화하면 노력을 덜 들일 수 있음
     * 한 페이지에서 하나만 다루기
     * 가치를 먼저 제공하기
     * 효과적인 제목 쓰기
     * 개요 빠뜨리지 않기
     * 예측 가능하게 하기

  3. 문장 다듬기

   문장의 전달력을 높이면 독자가 내용을 더 쉽게 이해할 수 있음. 세부 내용이 이해하기 어려운 문장으로 표현되면 전달력이 많이 떨어짐
     * 문장의 주체를 분명하게 하기
     * 필요한 정보만 남기기
     * 구체적으로 쓰기
     * 자연스러운 한국어 표현 쓰기
     * 일관되게 쓰기

   토스에서 만든 이런 사이트들 모아놓은 곳은 없나요?

   '요'체는 적응하기 힘드네요.

   맞는 말씀이에요.

   좋네요 특히 문장다듬기 내용은 few shot으로 gpts로 만들어 써봐야겠어요

   이런 글은 좋은 것 같습니다. LLM 시대에는 이런 가이드라인이 어떻게 변형될 수 있을까요?

   너무 좋은 프로젝트네요 ^^
"
"https://news.hada.io/topic?id=20525","Show GN: Gemini 기반 캘린더 앱, 스크린샷으로 손쉽게 일정 등록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: Gemini 기반 캘린더 앱, 스크린샷으로 손쉽게 일정 등록

   LLM을 활용한 일정 관리 앱 Trace입니다.
   iOS, iPadOS, macOS에서 동작합니다.

   최근 AI 비서와 채팅하는 기능이 추가되었습니다.
   현재 BETA라서 완벽하지는 않지만, 기본적인 일정 관련 대화를 나눌 수 있고, 생성/수정/삭제도 가능합니다.

   다른 기능으로는:
     * 자연어/음성/이미지 기반 입력: “내일 오후 회의”, “토요일 친구랑 저녁”처럼 말하면 바로 등록
     * 스크린샷 일정 등록: 시간표, 배달 앱 화면 등 스크린샷만으로 일정 추출
     * iOS 단축어: 앱을 열지 않고도 측면 버튼 한 번으로 캘린더 등록 가능
     * 애플 캘린더/미리알림 완전 연동: 기존 앱에서 쓰던 일정도 그대로 불러와 활용 가능

   Gemini API 기반의 LLM을 활용해, 사용자가 입력한 내용을 문맥에 맞춰 해석하고, 복잡한 반복 일정이나 시간 인식도 자동으로 처리합니다. (""매주 목금 2시 스터디"")

   앱은 현재 iOS, iPadOS, macOS에서 사용할 수 있고, 한국 기준 약 300명의 유료 사용자가 있습니다.

   무료로도 충분히 써보실 수 있지만, 일정 관리를 자주 하시고 Trace를 제대로 써보고 싶으신 분들은 댓글로 알려주시거나 trace@corca.ai로 메일 주시면 리딤 코드 보내드리겠습니다.

   흥미롭네여

   리딤코드 부탁 드립니다.

   보내드렸습니다 :)

   안녕하세요, trace@corca.ai로 메일 한 번 부탁드립니다. 보내주신 메일 주소로 리딤 코드 보내드리겠습니다!
"
"https://news.hada.io/topic?id=20512",""소셜 미디어는 끝났다" - 마크 주커버그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ""소셜 미디어는 끝났다"" - 마크 주커버그

     * 주커버그는 Meta의 반독점 재판에서 소셜 미디어의 시대가 끝났음을 시사함
     * 페이스북, 인스타그램 등에서 친구 콘텐츠 소비 비율이 계속 하락 중
     * 메타는 자사 플랫폼이 더 이상 소셜 네트워크가 아닌 디지털 콘텐츠 소비 플랫폼이라고 주장함
     * FTC는 메타의 독점적 행위가 혁신과 선택권을 저해했다고 주장하지만 입증이 어려움
     * 틱톡, 생성형 AI 등 신흥 플랫폼들이 부상하면서 기존 소셜 미디어 정의 자체가 변화 중


소셜 미디어의 변화

     * 과거의 소셜 네트워크는 친구 간의 소통 중심 플랫폼이었음
     * 현재는 유명인 콘텐츠, 뉴스 반응, AI 생성 영상 등 방송형 콘텐츠 중심으로 변모함
     * 친구들이 올린 게시물은 점점 전체 콘텐츠 속에서 비중이 줄어들고 있음
     * 저커버그, 소셜 미디어가 이제는 “엔터테인먼트와 정보 습득의 공간”이라고 증언함

메타의 방어 전략

     * 메타는 재판에서, 친구 게시물 시청 비율이 감소했다는 자체 데이터를 제시함
          + 페이스북: 22% → 17%
          + 인스타그램: 11% → 7%
     * 자사 플랫폼이 더 이상 전통적 소셜 네트워크가 아니며, 틱톡, 유튜브, 아이메시지 등과 경쟁 중이라 주장함
     * 각 앱 간 UI와 콘텐츠 포맷이 유사하다는 점을 들어, 디지털 플랫폼 간의 기능 동질화를 강조함
     * 이는 메타의 독점 주장을 반박하는 동시에, 플랫폼 다양성이 줄어들었다는 현실도 보여줌

FTC의 반독점 주장과 한계

     * 메타가 인스타그램과 WhatsApp을 인수해 경쟁을 억제했다고 주장
     * 그러나 FTC의 시장 정의가 불명확하고, 소셜 네트워크 산업이 빠르게 진화하고 있어 입증이 어려움
     * FTC는 소비자 피해보다 혁신 저하와 선택권 축소에 초점을 맞춤
     * WhatsApp 인수 당시 사용자 수는 5억 명, 현재는 20억 명 이상
     * FTC는 WhatsApp이 독립적으로 더 나은 서비스를 제공했을 수 있다고 보지만, 실제로 증명하기는 어려움

저커버그의 인스타그램 분사 언급

     * 2018년, 저커버그는 내부 메모에서 인스타그램 분사의 필요성을 제기한 바 있음
     * 인스타그램이 페이스북 성장을 방해하고 있으며, 독립 기업이 더 잘 될 수 있다고 판단했음
     * 그는 반독점 규제로 인한 강제 분사 가능성을 예견하기도 함

새로운 경쟁 구도와 정치적 배경

     * 현재는 틱톡 금지, 생성형 AI 등장, 새로운 소셜 네트워크 실험 등으로 시장이 다시 재편되는 중
     * OpenAI도 인스타그램, X(구 트위터)와 경쟁하는 자체 소셜 네트워크 개발 중
     * 유럽연합은 최근 메타와 애플에 상대적으로 적은 규모의 벌금 부과 (각각 2억 유로, 5억 유로)
     * 미국에서는 트럼프 행정부가 여전히 메타에 대한 소송을 지지하고 있음
     * 저커버그는 DEI 반대, 팩트체크 축소 등으로 백악관과의 관계를 강화했으나, 정치적 거래 가능성이 존재함

   친구 콘텐츠 소비 비율이 계속 하락하는건, 메타가 페이스북에 광고를 미친듯이 올려서 사람들이 짜증나서 안보기 때문이 아닐까?
   타임라인에서 글 2-3개 보면 광고 하나씩이 보이는 광고판이니 사람들이 떠나지 ㅡ.ㅡ+
   자기들 문제를 남탓하는 느낌

   요새 광고가 더 많아진 것 같더라고요

   공감합니다. 글 하나에 광고 2-3개로 느껴질 때도 많습니다...

   sns 가 수익 모델로 전락하면서 생기는 문제 아닐까..

   저도 그렇겍 생각합니다. 다만 수익 모델을 친구 관계에서 구현한 방식이 아니라 광고 모델로 구현하면서 소셜 미디어가 변모한 거죠

   Social Network -> Social Media -> Digital Contents Consume Platform(?)

   사람2사람 => 콘텐트 2 콘텐트

        Hacker News 의견

     * Zuckerberg와 기사가 Facebook/Meta에 일어난 일을 Wall Street를 만족시키기 위한 Facebook/Meta의 전략적 결정으로 설명하는 것이 놀라움
          + 소셜 미디어는 자연스럽게 발전한 것이 아니라, 광고주와 수익화를 우선시하는 방향으로 의도적으로 변화한 것임
          + Facebook에서 가족의 콘텐츠는 거의 보이지 않고, 광고와 무관한 콘텐츠만 보게 됨
     * Meta가 Facebook을 '친구와의 연결'에서 '무작위 콘텐츠 스크롤링'으로 바꿨다고 주장하는 것은 사용자가 원한 것이라고 주장하는 것과 같음
          + 이는 마치 레스토랑이 모든 음식을 사탕으로 대체하고 '보세요, 아무도 진짜 식사를 원하지 않아요!'라고 말하는 것과 같음
     * Facebook에는 친구 전용 피드가 있지만, 사람들이 더 이상 게시하지 않기 때문에 문제가 있음
          + 소셜 미디어는 죽지 않았고, 그룹 채팅으로 이동했음
          + 그룹 채팅의 피드를 보고 싶다는 의견이 있음
     * 12살 아이가 소셜 앱보다 그룹 채팅을 주로 사용함
          + 소셜 미디어가 너무 나빠져서 프로토콜이 최선의 대안이 되었을 수 있음
          + 오래된 프로그래머로서 소음 속에서 희망을 봄
     * 소셜 네트워크가 정확히 무엇을 하는지에 대한 질문이 있음
          + Facebook은 친구가 새로운 사람과 데이트하거나 파티에 초대받지 못했음을 알 수 있는 곳이었음
          + 이러한 시작에서 제국이 탄생함
     * 소셜 네트워킹(가족/친구)에서 소셜 미디어로 변화하면서 문제가 시작되었다는 관찰이 있음
          + 사람들과의 실제 연결에서 콘텐츠와의 연결로 변화함
     * Meta가 친구가 게시한 콘텐츠를 보는 시간이 줄어들었다고 주장함
          + 사용자가 보는 것은 Facebook이 보여주는 것이며, 이는 선호도가 아님
     * Meta가 Instagram, Facebook, TikTok, YouTube, Apple의 iMessage를 경쟁자로 주장하는 그래픽을 보여줌
          + Google은 YouTube를 분리하라는 압박을 받고 있고, TikTok은 금지되었음
          + 이러한 방어가 좋은 방어인지에 대한 의문이 있음
     * 북부 미시간의 어머니 지역이 큰 얼음 폭풍으로 인해 전력과 인터넷이 끊겼을 때 Facebook이 주요 소통 수단이 되었음
          + 이러한 특별한 상황에서는 Facebook이 매우 유용했음
     * 소셜 미디어가 처음 시작되었을 때는 팔로우한 것들의 피드만 보여줬음
          + 이는 영광스러웠지만 수익을 내지 못했음
          + 이제는 광고와 스폰서 콘텐츠로 수익을 내고 있음
          + 이러한 변화가 놀랍지 않음
     * 대부분의 소셜 미디어 플랫폼을 떠났고, 광고를 중간에 삽입하는 플랫폼에는 관심이 없음
          + 소셜 미디어 플랫폼이 이러한 쓰레기를 삽입하지 않고 수익을 내는 방법을 찾지 못한다면 다른 플랫폼을 사용할 것임
"
"https://news.hada.io/topic?id=20583","소프트웨어를 무료로 배포하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           소프트웨어를 무료로 배포하는 방법

     * 다른 사람을 위한 무료 소프트웨어를 만들고 싶다면:
          + 정적 HTML + JavaScript로 제공
          + 무료이면서 신뢰할 수 있는 웹호스팅 이용
     * WebAssembly와 Pyodide 덕분에:
          + 클라이언트 측 Python 애플리케이션 제공 가능
     * 서버 기반 서비스는 추천하지 않음:
          + 서버는 업그레이드와 비용 관리가 필요해 시간이 지나면 부담이 됨
     * 2025년 추천 플랫폼:
          + GitHub Pages (공개 저장소용, 17년 넘게 안정적)
     * 과거 추천했지만 이제는 비추천:
          + Heroku (2022년 Salesforce 인수 후 신뢰도 하락)
     * 추가 권장 사항:
          + 오픈 소스 라이선스로 배포
          + 바로 실행 가능한 링크 제공

   저장 기능을 제공하려면 서버 연동이 필요하지 않을까요. 이게 계속 고민되는 점입니다

   Cloudflare workers 무료티어에 나름 데이터베이스(kv/sqlite/s3유사품) 지원을 해요

   저도 대부분의 서비스는 cf pages + workers(서버있스) 로 처리하고 정 필요한거만 개인 서버에서 처리하고 있습니다.

   Cloudflare 화이팅
"
"https://news.hada.io/topic?id=20535","HN 공개: DOOM을 실행하는 나만의 OS 커널 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HN 공개: DOOM을 실행하는 나만의 OS 커널 개발

     * TacOS는 C와 어셈블리어로 작성된 자체 커널을 가진 UNIX 유사 운영체제임
     * DOOM을 포함한 다양한 사용자 공간 프로그램을 실행할 수 있는 기능을 가짐
     * VFS, 스케줄러, TempFS, 장치, 컨텍스트 전환, 가상 메모리 관리, 물리적 페이지 프레임 할당 등의 기능을 포함함
     * 실제 하드웨어와 Qemu 에뮬레이터에서 실행 가능함
     * 취미로 개발된 운영체제로, 실제 사용에는 적합하지 않음


TacOS 소개

     * TacOS는 UNIX 유사 커널로, C와 어셈블리어로 작성되었음
     * DOOM을 포함한 여러 작은 사용자 공간 프로그램을 실행할 수 있음
     * VFS, 스케줄러, TempFS, 장치, 컨텍스트 전환, 가상 메모리 관리, 물리적 페이지 프레임 할당 등의 기능을 제공함
     * 실제 하드웨어와 Qemu 에뮬레이터에서 실행 가능함
     * 취미로 개발된 운영체제로, 완전한 사용을 위한 상태는 아님

빠른 시작

     * TacOS를 빌드하고 실행하려면 다음 명령어를 사용해야 함
     * git clone https://github.com/UnmappedStack/TacOS
     * cd TacOS
     * git clone https://github.com/limine-bootloader/limine
     * cd limine
     * git checkout v9.x-binary
     * cd ..
     * make
     * Qemu, NASM, Clang이 설치되어 있어야 하며, Qemu 에뮬레이터에서 자동으로 실행됨

라이선스

     * TacOS는 Mozilla Public License 2.0을 따름
     * 자세한 정보는 LICENSE 파일을 참조하면 됨

        Hacker News 의견

     * 안녕하세요, 축하합니다! 자랑스러우실 것 같음. DOOM을 선택한 것이 좋은 개념 증명임
          + 실망스럽게도 초보적인 질문들만 있음
          + 이걸 노트북에서 실행하려면 어떤 단계가 필요할까요? 빌드 후에는 Windows PC에서 듀얼 부팅을 설정하는 것과 비슷한 과정이 있을 것 같음 (인터넷에서 모르는 사람에게 위험한 소프트웨어를 내 컴퓨터에서 실행하는 방법을 묻고 있음...)
          + 이런 프로젝트를 시작하고 싶다면 추천할 만한 교과서나 읽을 자료가 있을까요? 대학에서 운영체제 및 관련 과목을 들었지만 (전기공학 전공이라 컴퓨터와 관련 있음) 모두 매우 추상적이고 고수준, 개념 중심이었음. 좀 더 구체적인 것을 원함. 꼭 x64일 필요는 없음
     * 괜찮음, 하지만 당신의 타코가 DOOM을 실행할 수 있나요??
          + 농담임 ;) 칭찬할 만한 노력이고 잘했음! 질문: TacOS를 DOOM을 ""표준""으로 사용하여 만든 것인지 아니면 DOOM을 실행하기 위해 처음부터 전용 운영체제를 만든 것인지 궁금함
          + 순수한 호기심에서 묻는 것임. 예전에 아주 기본적인 부팅만 가능한 운영체제를 만든 적이 있음 (거의 30년 전, 아!) 교육/재미를 위해서였지만, DOOM만 실행할 수 있는 전용 운영체제가 있다면 ""DOOM을 실행할 수 있나요""라는 밈이 훨씬 더 아이러니하고 재미있을 것임
          + 좋은 작업임! 계속 유지하세요!!
     * 매우 멋짐, 하지만 왜 오늘날 메모리 안전한 저수준 언어가 존재하는데도 불안전한 언어를 선택했나요? 대부분의 보안 버그가 메모리와 관련되어 있다는 것을 이미 알고 있음
          + 이게 취미 프로젝트라는 것을 이해하지만, 더 나은 대안이 있는 곳에서 불안전한 언어를 폐기하지 않는 이유가 궁금함
     * 약간의 탈선이지만, 이와 비슷한 것에 대해 궁금했음. 현대 PC 하드웨어에서 직접 부팅하는 게임을 만들려는 시도가 있었나요? 전체 운영체제를 로드하지 않고 게임으로 바로 가는 것임. 구세대 게임 콘솔과 유사함. 간단하게 유지하고 싶다면, wifi, bt, GPU 같은 것은 현대 드라이버 없이는 활용하기 어려울 수 있지만, 키보드와 마우스는 기본 BIOS 접근이 있는 것 같아 가능할 것 같음 (아마 잘못된 용어일 수 있지만, 요점은 이해되길 바람)
     * 안녕하세요 unmapped (저는 GitHub과 discord에서 ThatOSDeveloper라는 이름을 사용함) DOOM을 실행한 것을 몰랐는데, 꽤 멋짐, 몇 가지 질문이 있음, 원래 DOOM인가요, 디스크에 있나요 아니면 initramfs에 있나요, 사용하는 엔진과 함께 자유 또는 쉐어웨어 DOOM wad를 사용하나요?
     * 훌륭한 작업임, 이런 것을 할 수 있는 기술을 갖고 싶음, 하지만 이걸 달성하기 위해 많은 사양을 읽어야 했을 것 같음, 그것이 나의 약점임
          + 바보 같은 질문일 수 있지만, GPU 가속을 사용하고 싶다고 상상해보세요, 가장 작은 형태로라도. GPU 드라이버를 구축하는 것이 얼마나 어려울까요? 좋은 문서가 있다고 생각하나요?
     * 클럽에 오신 것을 환영함! 거의 같은 일을 했고 제품으로 끝나지 않을 일을 하는 평온함을 정말 즐겼음
          + 링크
     * 매우 멋진 프로젝트임! TacOS에서 프로세스 격리와 스케줄링을 어떻게 처리하고 있나요?
     * TacOS에 대해 더 알고 싶음. 여러 프로그램을 동시에 안전하게 실행하는 것을 어떻게 관리하나요?
     *

     PotatOS를 위한 Discord 서버가 있음
          + 이 문맥에서 potatOS가 무엇인가요?
"
"https://news.hada.io/topic?id=20585","Obsidian + Hugo + GitHub + Cloudflare로 블로그 운영 하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Obsidian + Hugo + GitHub + Cloudflare로 블로그 운영 하는 법

     * Obsidian으로 로컬에서 글을 작성후 Hugo + Bear Blog 테마 + Cloudflare Pages 조합으로 빠르고 무료로 개인 블로그를 배포
     * GitHub를 통한 버전 관리와 자동 배포로 운영이 편리함. 글을 작성하고 저장, 커밋만 하면 즉시 퍼블리시가 완료
     * 초기 세팅은 약간의 개발 지식이 필요하지만, 이후 워크플로우는 매우 단순해짐
     * 경량으로 지속 가능한 블로깅 방법을 찾는 사람들에게 적합

상세 구성

     * Obsidian을 사용해 모든 글을 작성함
          + 로컬 파일 저장 방식으로 모든 데이터가 본인 소유임
          + Minimal 테마로 깔끔하고 방해 없는 인터페이스 제공
          + iCloud를 통해 다양한 기기 간 무제한 동기화 가능 (Dropbox, Google Drive도 가능함)
     * 퍼블리싱 하기
          + Hugo: 초고속 정적 사이트 생성기
          + Bear Blog 테마: 미니멀하고 빠른 블로그 테마
          + GitHub + Cloudflare Pages: 무료로 웹사이트 배포 가능
          + 장점: 구독료 없음, 벤더 종속 없음, 플랫폼 정책 변경 위험 없음

시스템 셋팅

     * Hugo를 설치한 후 새 사이트를 생성함
hugo new site myblog
cd myblog

     * Bear Blog 테마를 추가
git init
git submodule add https://github.com/janraasch/hugo-bearblog.git themes/hugo-bearblog

     * config.toml 파일을 Bear Blog 테마로 설정함
theme = 'hugo-bearblog'

     * Obsidian을 Hugo와 연결
          + Hugo의 content/blog 폴더에 글을 작성
          + Obsidian에서 ""Open folder as vault"" 기능을 사용해 해당 폴더를 연동
          + 이렇게 하면 Obsidian에서 작성한 글이 바로 Hugo 사이트의 포스트로 연결됨
     * Obsidian에서 작성하는 글 상단에 Hugo용 Front Matter 템플릿을 추가함
+++
title= ""Your Post Title""
date= YYYY-MM-DD
tags= [""post""]
draft= true
+++

     * 퍼블리시할 준비가 되면 draft 값을 false로 변경함
     * Hugo의 로컬 서버 기능을 사용해 글을 브라우저에서 미리보기 함
hugo server -D

     * 새 GitHub 리포지토리를 생성하고 로컬 프로젝트를 연결함
git remote add origin https://github.com/yourusername/yourblog.git
git add .
git commit -m ""Initial commit""
git push -u origin main

     * Cloudflare에 가입 후 Pages 프로젝트를 생성함
          + GitHub 리포지토리를 연결하고 다음 빌드 설정 적용
               o 빌드 명령어: hugo --minify
               o 출력 디렉토리: public

퍼블리싱 워크플로우

     * Obsidian에서 포스트 작성
     * Front Matter 템플릿의 draft: true를 draft: false로 변경
     * GitHub에 커밋 및 푸시
       git add . git commit -m ""Publish new post"" git push
     * Cloudflare Pages가 자동으로 변경사항을 감지하고 사이트를 재빌드하여 1~2분 내에 적용됨

   저도 Hugo 블로그 운용중이에요.
   Obsidian에서 글 작성 후, Github repository push를 트리거로 Cloudflare pages에서 호스팅하는 방식을 사용합니다.
   그리고 여기에 Algolia 검색 서비스 넣고 새 글 작성시마다 인덱싱을 위해 sh 파일 하나 만들어서 git, 인덱싱 등의 연계 명령어들 죄다 때려넣고 sh 명령 실행으로 글 발행하고 있어요.

   작성한 글들을 종종 그래프뷰로 묶어서 살펴보는 재미때문에 주로 Obsidian을 사용합니다.

   저도 비슷하게 해오다가 이제는 github.com의 저장소에서 직접 작성하고 있습니다. (github pages가 jekyll을 자동으로 빌드해주는 기능을 이용)

   https://plan9.kr/

   헉 텍스트 배틀 만드신 분이신가요?
   예전에 커뮤니티에서 보고 재밌게 했었습니다 ㅋㅋ 반갑네요

   저도 Hugo로 블로그 만들고 있어서 반갑네요!
   Obsidian을 주 편집기로 쓸까도 했었는데 컴퓨터가 있는 환경이라면 VSCode가 더 나은 것 같습니다.
   변경사항에 대해서 밀리초 단위로 반영하니 딱히 옵시디언의 필요성을 못 느끼겠더라구요.

   휴고와 옵시디언을 연결할 이유를 모르겠습니다.

   휴고사용자라면 VSCode가 더 자연스럽다는 생각이 드는군요.

   이거 진짜 흥미롭네요

   digital garden 플러그인도 편합니다

   내용 공유 감사합니다. obsidian 을 처음 사용 중인데 함께 사용해봐야겠네요.

   좋은 정보 감사합니다. 옵시디언 요즘에 많이 사용하고 있는데 저한테 잘 맞는 조합인 거 같습니다

   제가 며칠 전에 마침 Hugo로 블로그를 하나 만들어서 무척 반가운 내용이네요.
   저는 푸시 시 GitHub pages로 배포하도록 세팅해서 이용하고 있습니다. ㅎㅎㅎ
   옵시디언도 너무 좋아하지만 vscode에서 ""Front Matter""라는 확장도구를 사용하시는 것을 추천합니다.
   간이 CMS 기능을 제공하는데 아주 완벽하진 않아도 나쁘지 않더라구요.

        Hacker News 의견

     * 이 스택은 완전한 통제권을 제공함: 구독 없음, 공급업체 종속 없음, 플랫폼이 사라지거나 정책이 변경될 위험 없음
          + 저자는 이를 통해 ""완전한 통제""의 의미가 크게 변화했음을 보여줌
     * 정적 블로그 운영은 자가 호스팅하기 가장 쉬운 시나리오 중 하나임
     * 두 외부 회사의 무료 계층에 의존하면서 ""완전한 통제""와 ""플랫폼 사라질 위험 없음""을 논하는 것이 이상하게 느껴짐
     * 1년 후 ""내 블로그를 어떻게 재구축했는지""라는 다음 블로그 게시물을 기대함
     * ""내 블로그를 [next.js/Gatsby 등]로 어떻게 만들었는지""를 구글링하는 것이 재미있는 취미임
     * 수백 개의 개발자 블로그가 블로그 구축 방법을 발표하는 글 외에는 게시물이 없음
     * Obsidian 선택이 이 맥락에서 약간 이상하지만 흥미로움
          + Hugo 프로젝트의 하위 폴더를 Obsidian에서 여는 대신 VSCode나 유사한 IDE에서 전체를 열 수 있음
          + Obsidian의 마크다운 편집 경험은 일반적인 IDE와 다름
          + Obsidian의 기능 세트를 선호한다면 선택이 이해됨
          + 마크다운의 강점 중 하나는 다양한 편집기에 의해 지원된다는 것임
     * 비슷한 설정을 가지고 있지만, 자산 압축/프론트매터 변환/번들을 Github 블로그 저장소로 푸시하는 커스텀 Obsidian 플러그인을 작성함
     * Github는 Pelican을 사용해 HTML로 변환하고 VPS에 배포함
          + WYSIWYG 인터페이스를 쉽게 가질 수 있음
          + VSCode는 마크다운 블로깅에 충분함
          + Hugo는 저장 시 페이지를 컴파일하므로 빠르게 반복 가능함
     * 플랫폼이 사라지거나 정책이 변경될 위험은 여전히 존재함
     * Jekyll은 큰 콘텐츠에 느리지만 Hugo는 빠름
     * Github Pages, CloudFlare Pages, Netlify, Vercel 간에 쉽게 이동 가능함
     * Kirby CMS가 가장 잘 맞음
     * SSG는 몇 년 동안 방치되면 소프트웨어 부패가 발생할 수 있음
     * Obsidian Publish를 사용하여 Huge, Github, Cloudflare를 제거할 수 있음
"
"https://news.hada.io/topic?id=20577","Ask GN: 구독중인 ai 플랫폼/서비스가 있으신가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask GN: 구독중인 ai 플랫폼/서비스가 있으신가요?

   요즘 Cursor, Warp, ChatGPT, Claude, Gemini advanced 등 여러 ai 서비스들이 경쟁하는 가운데, 어떠한 것들을 구독중이신가요?

   전 ChatGPT plus, Perplexity(skt 1년 무료) 만 사용중이며,
   Openai apikey를 통해 4.1 등을 Codex에 연결하여 사용중입니다.

   한달에 20달러 + 10달러(apikey) 정도가 소모되는듯 하나,
   요즘 ChatGPT의 o3 모델과 o4-mini 모델의 환각 현상이 너무 심하게 느껴져 Claude로 회귀해야 하나 고민입니다.

   GitHub Copilot Pro (USD 10) 말고는 다 정리했어요.
   다른건 기본 티어 안에서도 개인적으론 충분하네요...

   gpt와 cursor 사용중인데 정보 검색과 정리 용도로 gpt보다 perplexity가 할루시네이션이 적어서 추가 구독 할까 고민중이에요

   vscode 에서 gemini 사용 중인데 펌웨어 개발에도 유용하더군요. 펌웨어 프로젝트 context 이해도 좋구요.

   Cursor 사용하고 있고..
   나머지는 그냥 무료로 버티고 있습니다!!

   gpt, cusror 사용하고 있어요.
   gemini는 무료사용하고 있는데..
   gemini는 보고서(?) 뽑을때 탁월하게 잘 하는 거 같습니다.

   ChatGPT Plus + Gemini Advanced 구독중입니다

   전 cursor로 코드 작업하고
   나머지 문서작업이나 평소 필요한 것들은 Claude MCP + 프로젝트 등으로 환경 구성해서 사용하고 있습니다.

   퍼플렉시티 1년 무료권 받아서 검색 필요할때 가끔 써보고 있는데 나쁘진 않더라구요~ 그래도 손이 제일 많이 가는건 아직 클로드인것 같습니다

   아쉬운건 클로드는 대화 갯수가 너무 짠것 같습니다..

   클로드 유료 구독(3.7 나오고 난 후)을 하다가 지브리 그림인지땜에 잠시 gpt로 피난와있는데 코딩은 확실히 클로드가 잘하는 느낌이 들더군요.

   다만 좀만 채팅하다 보면 컨텍스트 제한이 뜨는건 좀 아쉬웠습니다.

   업무로 인해 요금제가 새로 추가되기 전후로 일 제한이 걸릴때까지 사용을 하였었는데 개인적인 느낌이 왠지 사용량이 줄어든 느낌이 들더군요.... 사용량을 확인 할 수 있는 방법이 없어.. 개인적인... 느낌만 ㅠㅜ

   전 코딩도 코딩이지만 글쓰기가 좋은것 같습니다.
"
"https://news.hada.io/topic?id=20536","사고 도구로서의 Notation (1979)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        사고 도구로서의 Notation (1979)

     * 표기법(Notation) 은 사고를 도와주는 중요한 도구로, 수학과 프로그래밍 언어 모두에서 핵심적인 역할을 함
     * APL 언어는 수학적 표기법의 장점을 프로그래밍 언어의 실행성과 보편성과 결합하려는 시도로 개발됨
     * 좋은 표기법의 특징은 간결성, 명확성, 제안성, 세부사항의 하위화, 공식 증명 가능성 등임
     * 다양한 수학적 구조(다항식, 변환, 그래프 등)를 APL로 효율적으로 표현하고 변환할 수 있음
     * 표기법의 도입과 학습은 문맥 안에서 자연스럽게 이루어져야 하며, 표기법의 구조성과 범용성 또한 중요함


사고 도구로서의 표기법

     * 화학, 식물학 등 과학 분야에서도 체계적 명명법이 학문의 발전을 촉진함
     * 조지 불은 언어 자체가 사고의 수단임을 강조했음
     * 수학적 표기법은 사고를 지원하는 언어의 대표적 사례로, 사고 부담을 줄이고 사고력을 증대시킴
     * A.N. 화이트헤드와 찰스 배비지가 수학 표기법의 중요성을 강조했음

프로그래밍 언어의 사고 도구로서의 가능성

     * 프로그래밍 언어는 범용성과 명확성이라는 강점을 가짐
     * 컴퓨터를 통한 아이디어 실험 및 명확한 사고 실험이 가능함
     * 그러나 대부분의 프로그래밍 언어는 수학적 표기법에 비해 사고 도구로서의 역할이 약함
     * APL은 명료성과 정밀성을 지향하여 사고를 지원하는 표기법으로 설계됨

좋은 표기법의 주요 특성

     * 문제 표현의 용이성: 문제에서 직접 파생되는 구조를 쉽게 표현할 수 있어야 함
     * 제안성: 표현된 형태가 유사하거나 확장된 문제를 암시해야 함
     * 세부사항의 하위화: 복잡한 세부사항을 단순화하여 사고를 돕는 구조 제공
     * 간결성: 최소한의 기호와 규칙으로 광범위한 표현을 가능하게 해야 함
     * 공식 증명 가능성: 표기법이 형식적 증명과 연역적 추론에 용이해야 함

APL의 기본 표기 기법 소개

     * 벡터, 행렬 등 배열 기반 구조를 자연스럽게 사용
     * 함수 및 연산자는 벡터/행렬을 요소별로 자동 적용
     * 리덕션(/), 스캔(\), 내적(.)과 같은 연산자(operators)로 함수 조합을 표현
     * ⍳, ⌽, ⍴, +, ×, * 등 기초 기호로 풍부한 수식 구성 가능
     * 모든 함수는 우측 우선 규칙을 따르며 괄호 없이 자연스러운 수식 작성 가능

문제 해결과 사고 촉진 예시

     * 삼각수, 계승 등 수학적 수열을 간단한 수식으로 표현
     * 다항식 표현과 곱셈, 미분 등 연산을 일관된 규칙으로 간명하게 처리
     * 그래프 이론(트리, 전이 클로저, 스패닝 트리)도 배열 연산으로 명확히 표현 가능
     * 순열, 부울 대수, 수 체계 변환(소수 분해) 등 다양한 분야에 확장 가능

공식 증명과 구조화된 사고

     * 모든 연산과 식은 명확히 실행 가능한 형태로 표현되므로 컴퓨터를 통한 자동 검증 가능
     * 수학적 귀납법, 완전 탐색, 항등식 열거 방식으로 다양한 공식 증명 예시 제시
     * 리덕션과 스캔의 분할(identity) 및 내적 연산의 결합성과 분배성 정식 증명
     * 뉴턴 대칭 함수, 다항식 곱셈 및 미분 공식 직접 증명

APL과 전통 수학 표기법 비교

     * APL은 함수의 명확한 정의, 일관된 배열 연산, 풍부한 기호 체계 제공
     * 모든 연산에 우선순위 규칙 대신 오른쪽 우선 실행 규칙 적용
     * 수학 기호 사용의 복잡성을 줄이고 형식적 조작(formal manipulation)을 지원
     * 구문이 간결하고 규칙이 일관되어 초보자와 숙련자 모두에게 유리함

표기법 도입과 학습 방법

     * 별도의 ""언어 강의"" 없이 문맥 속에서 필요한 표기만 자연스럽게 소개하는 방식을 강조
     * 구체적 문제 상황 속에서 새로운 기호를 직관적으로 학습
     * 표기법 자체의 난이도보다는, 표기법이 암시하는 다양한 가능성과 확장성을 인식하는 것이 중요함

APL 확장 가능성 및 제안

     * 복소수 처리를 포함한 함수 확장 제안
     * 넙(unique elements) 및 요약(summary) 함수 표준화 필요
     * 보다 일반화된 연산자(operator) 도입으로 벡터 미적분 등 추가 주제 지원 가능
     * 언어 설계의 명확성과 추론 능력 향상 목표

효율성과 명확성의 균형

     * 명확하고 분석 가능한 표기법을 먼저 정의한 후, 최적화를 통해 효율을 높이는 방식 권장
     * 알고리듬 명료화는 이후 최적화 및 컴파일러 최적화에도 도움을 줌
     * APL로 작성된 기본 표현은 학문적 탐구와 산업적 적용 모두에 기여 가능성

        Hacker News 의견

     * 표기법은 단순히 표현을 다른 표현으로 대체하는 것이 아니라 더 깊은 의미를 가짐
          + 새로운 표기법은 문제를 새로운 방식으로 생각하게 함
          + 많은 미해결 문제들이 강력한 표기법으로 해결될 가능성이 있음
          + 수학자나 컴퓨터 과학자에게는 명백한 사실이지만, 언어학자나 교육자들 사이에서는 논란이 있음
          + 사피어-워프 가설은 언어가 사고를 결정한다는 주장임
          + 자연어는 문화적 산물이며, 학문적으로 문화와 사고를 연결짓는 것은 금기시됨
          + 교육에서도 학생들이 문제를 진정으로 이해할 수 있는 표기법을 배우지 못하게 함
     * APL의 쇠퇴는 Lotus 123과 MS Excel의 등장 때문임
          + APL은 더 큰 영향을 미칠 수 있었음
          + CS 커뮤니티는 심볼릭스, AI, LISP에 집중하고 있었음
     * 사피어-워프 가설은 언어가 사고를 제한할 수 있음을 시사함
          + 언어와 사고는 사회적 상호작용의 규칙에 의해 결정될 수 있음
          + 음악은 다른 방식으로 표현할 수 없는 것을 표현할 수 있음
     * APL을 사용한 프로젝트를 개발 중임
          + APL의 개념은 사고의 기초가 됨
          + 건축 프로그램에서 NAATOT을 가르치고 있음
          + 학생들이 자신만의 상징적 표기 시스템을 만들도록 하는 것이 꿈임
     * Freeform 노트 앱을 완성하지 못한 것이 아쉬움
          + STEM 분야의 기술적 콘텐츠에 적합한 아이디어였음
          + 예시로 옛 화학 노트를 공유함
     * ""사고의 도구""라는 표현이 처음 사용된 강의임
          + APL을 배우면서 트윗에 많은 코드를 담을 수 있음을 알게 됨
          + 수학적 표기법은 보편성이 부족하고 해석이 다를 수 있음
          + 표기법이 시각화 및 문제의 인체공학과 분리되면 비용이 큼
          + 표준 표기법은 창의적 사고를 제한할 수 있음
     * 관련 자료로 Iverson의 ""Notation as a Tool of Thought""를 언급함
"
"https://news.hada.io/topic?id=20632","Ask GN: LLM으로 생산성이 증가한거 같은데요. 왜 저는 여전히 바쁠까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ask GN: LLM으로 생산성이 증가한거 같은데요. 왜 저는 여전히 바쁠까요?

   최근 몇년에 걸쳐 LLM과 같은 AI 도구의 도입으로 개발 뿐만 아니라 전체적인 업무 처리 속도가 크게 향상되었습니다. 그러나 작업 시간이 단축된 만큼 새로운 업무가 추가되거나 기존 업무의 기대 수준이 높아지면서, 오히려 전체적인 업무량은 비슷하거나 더 늘어난 느낌을 받고 있습니다.

   이러한 현상이 개인적인 경험인지, 아니면 보편적인 현상인지 궁금합니다. 비슷한 경험을 하신 분들이 계시다면, 어떻게 대처하고 계신지 조언을 구하고자 합니다.

   업무 효율성과 업무량 관리에 대한 다양한 의견을 듣고 싶습니다.

   업무 효율은 AI로 올라가고 그만큼 효율 높은 수준의 일을 더하게 되어 회사 입장에서는 한 직원의 생산성이 올라가는 구조 아닐까요~ ㅠㅠ

   저는 예전에 업무 자동화 관련해서 스크립트 작성 업무를 맡은 적이 있었는데요. 어디어디서 데이터를 퍼와서 엑셀이나 사내 데이터 저장소에 붙여넣어서, 표나 그래프로 그려서 데일리 보고 자료 작성하는 걸 자동화 했었는데, 그런 일을 자동화 함으로써 얻는 이득은 그 일을 하던 담당자가 캡쳐 페이스트 할 시간에 커피 한 잔 마실 수 있게 되었다거나 하는 것보다는, 이 지표가 왜 이런 상태인가 깊이 고민하고, 실제 행동을 할 시간을 벌 수 있게 된다는 것이 아닌가 싶어요. 그런 맥락에서 생각해야 하는 게 아닌가 싶습니다.
   낮은 수준의 반복 업무에서 한 걸음 벗어나서, 좀 더 큰 맥락을 보실 수 있게 되었다면 좋을 것 같습니다.

   감사합니다. 요즘 ai에 관련해서 말들이 많은데, 이런 관점은 처음 보는 거 같습니다.
   디자인 패턴에 집중할 수 있다는 말들도 꽤 있는데, 그것보다 넓은 시야네요

   엑셀을 생각해보세요.
   엑셀이 나오기 전까지 회계관련 작업은 실시간이 아니였죠. (아무도 기대하지 못하고 요구하지도 않았으니)
   엑셀이 나와서 바뀐 것의 핵심은 일을 자동화시켜준 것이라기 보다는. 일을 실시간으로 그리고 항시적으로 만든거죠. 발표 5분전이라도 수정할수 있는 긴장된 상태가 유지되니.. 일하는 시간개념이 실시간인 동시에 항시적이라 결국 바빠집니다.

   인공지능이 바뀌어 놓은 것의 핵심또한 자동화가 아닐거예요. 그게 무엇인지는 잘 모르겠네요. 아직 들어나지 않았다고 봅니다. 더 바빠진것은 당연하고.. 더 큰게 있을거예요.

   답변들 저질이네요. 생산성 향상이 어떻게 약탈이나 해고나 일을 안하게 되는걸로 이어지나요? 생각 고치지 않으면 앞으로 도태됩니다. 다 같이 생산성이 올라가니 앞으로 기준치가 올라갑니다. 더 노력해여 합니다. 정신 차리세요 제발.

   직원 편하라고 AI 도입하라는게 아니죠. 생산성 높인 만큼 일을 더 하라는 거니까요.
   직원이 하는 일의 총량은 변함이 없게됩니다.

   흠..
   자신의 능력이 100이라고 치면
   50으로 업무를 처리할 수 있다면
   50으로 처리하고.. 나머지는 눈치껏...

   자신의 능력 100을 다 보여주지 않으심이..
   나머지 50에 대해서 LLM으로 20으로 다하고 나머지 30이 남았으면..
   그럼 80이 남겠네요..

   그냥 일을 잘 마무리하고 성취감을 얻기 위해서
   자신의 능력을 100 이상 사용한다면 상관 없겠지만요.

   업무효율성이 올라간 만큼
   직원을 layoff하죠

   필요없어진 코드는 삭제당하지만
   필요없어진 직원은 경쟁사나 창업을 하면 회사에 큰 득은 아닐겁니다

   책 4000주 추천드려요

   아 버크먼 선생님 책. 불완전주의자 존경합니다. 크레마클럽에 전자책으로 있어요.

   기차가 등장하고 자동차가 등장하고 비행기가 등장해도 일일교통권이 넓어질뿐이지 사람이 덜 바빠진게 아닌 것 처럼
   도구가 더 좋아져도 할 수 있는 범위나 능력이 올라갈 뿐 덜 바빠지는건 아닌 것 같아요.
"
"https://news.hada.io/topic?id=20615","Tesla만 새로운 자동차 관세를 면제 받음 - 85% 국산 부품 규정 덕분","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Tesla만 새로운 자동차 관세를 면제 받음 - 85% 국산 부품 규정 덕분

     * 미국 정부는 85% 이상 국산 부품 비율을 갖춘 차량에 신규 자동차 관세 면제를 선언함
     * 테슬라의 일부 모델만이 현재 이 기준을 충족하여 유일하게 완전 면세 대상이 됨
     * 테슬라 외 포드 머스탱과 혼다 패스포트도 높은 국산율을 보이지만 기준에 약간 못 미쳐 관세 부과 예정임
     * 25%의 고율 관세가 향후 2년간 일부 기업에만 한시적 환급 적용 예정임
     * 엘론 머스크와 정치적 연계성 논란도 제기되며, 이번 정책이 사실상 테슬라를 위한 특혜라는 의혹이 일고 있음


Tesla Alone Qualifies for Full Tariff Exemption

     * 미국 상무부는 85% 이상 국산 부품 비율 차량에 대해 신규 관세를 면제한다고 발표함
     * 현재 이 기준을 충족한 차량은 테슬라의 일부 모델뿐이며, 다음과 같은 국산율 수치가 공개됨
     * 미국 내에서 국산 부품 비율이 85% 이상인 차량은 단 3종이며, 모두 테슬라 차량임
          + Model 3 퍼포먼스 트림이 87.5%로 가장 높고
          + Model Y 롱레인지와 일반형 Model Y가 각각 85.0%로 기준선을 간신히 충족함
     * 그 외 Model S, Model X, Cybertruck도 높은 수치를 기록했지만 80% 선에 머물러 면세 대상은 아님
     * Ford Mustang GT 시리즈와 Honda Passport AWD 역시 76~80% 수준이지만 면제 조건에는 미달됨
     * 즉, 현재 기준을 충족하는 유일한 제조사는 테슬라 뿐이며, 이로 인해 신규 자동차 관세에서 면제받게 됨

Where Automotive Tariffs Stand Today

     * 현재 미국의 기본 수입 관세율은 10% 이며, 대부분의 자동차 제조업체는 25% 고율 관세 적용 대상임
     * 단, 향후 2년간 환급 프로그램을 통해 일부 구제 조치가 제공될 예정임
     * 85% 기준을 통과할 경우 공급망, 규제 부담, 가격 측면에서 큰 혜택이 있음

Is This Favoritism?

     * 형식적으로는 중립적인 규정이지만, 사실상 테슬라에만 혜택이 돌아가는 구조임
     * 엘론 머스크가 백악관과 잦은 교류를 이어가며, 이는 단순한 비즈니스 행보가 아님을 암시함
     * 예를 들어 Ford Mustang이나 Alabama 공장에서 제작된 Honda Passport는 단 몇 퍼센트 부족으로 면세 기준에서 제외됨

     백악관은 공식 팩트시트에서 이 기준을 확인했으며, 관련 행정명령도 발표됨

데이터의 신뢰성

     * 데이터 출처는 American University의 Kogod School of Business에서 발간한 2024년 Made in America Auto Index임
     * 국산 부품 비율은 NHTSA 데이터, 자동차 딜러점에서 수집한 Monroney Sticker 등 공식 자료에 기반함
     * 일부 수치가 정부 발표와 차이 날 수 있으며, 이는 여러 출처를 통합한 결과임

        Hacker News 의견

     * Tesla가 NHTSA의 2025년 583 목록에서 명확히 자격을 갖추는지 확신할 수 없음
          + Tesla 차량 중 어느 것도 ""미국"" 콘텐츠가 75% 이상이 아님
          + 가장 높은 것은 Kia EV6의 80%임
          + Kogod 제조 지수에서 나온 것 같음
          + 이는 단순한 출처가 아닌 기업 구조 등을 다루려는 질적 순위임
          + 산업에 종사하는 사람으로서 ""어디서"" 오는지는 본질적으로 모호한 개념임
          + 정부의 다른 부서는 급격히 다른 정의를 사용함
          + 예를 들어, NAFTA에서는 ""국내"" 부품이 북미 어디서나 제조된 것임
          + 이는 아시아에 머물고 싶지 않은 정치 지도자들 때문에 미국으로 돌아오지 않을 자동차 제조를 온쇼어링하기 위해 수행됨
          + 이러한 관세의 결과로 북미 제조의 이점이 사라지면서 더 많은 자동차 제조가 아시아로 이동할 수 있음
     * ""자유 시장"" 이데올로그에 대한 신뢰가 전혀 없음
          + 그들이 권력을 잡으면 ""자유 시장"" 이데올로그에 대한 편애만 생김
     * 2025년 583 목록에서 Tesla 모델의 미국/캐나다 콘텐츠 비율
          + Tesla 모델 3: 70-75%
          + Tesla 모델 Y: 70%
          + Tesla Cybertruck: 65%
          + Tesla 모델 S: 65%
          + 85%를 넘는 모델이 없으므로 계산 방식이 다를 수 있음
     * 구매 시장은 변하지 않을 것임
          + 많은 사람들이 Tesla를 절대 사지 않을 것임
          + 내년에 더 많은 선택지가 나올 것임
     * 국내 제조로의 전환을 어떻게 장려하는지 의문임
          + 이미 원하는 것을 한 사람들에게 보상을 주는 것일 뿐임
          + 경쟁자에게 이점을 주어 온쇼어링 비용을 부담하려는 사람들에게 재정적 스트레스를 줌
          + Apple의 중국 기반 제조를 처벌하지 않고 특별 지위를 부여하는 것과 유사함
          + 너무 크지 않은 회사들이 Apple이 할 수 없었던 것을 할 수 있기를 바라는 것임
          + 변화하는 사람들에게 점진적인 보상/처벌이 더 효과적일 것 같음
          + 제조보다 IT 오프쇼어링 문제를 다루는 것이 더 쉬울 수 있음
          + 국내 고급 기술 산업을 장려하는 것이 더 중요함
     * EU 규칙에 대한 의견과 반대되는 의견이 많음
          + 규칙이 85% 국내라면 어떤 회사도 할 수 있음
          + 관세가 좋다는 것은 아님
          + 단지 국내에서 제조되도록 하는 것이 목적임
     * 노조의 부재가 얼마나 영향을 미치는지 궁금함
          + 자동차 공장은 UAW로 인해 Flint/Detroit를 떠남
          + Tesla는 아직 노조에 대해 걱정할 필요가 없음
          + 중앙 집중식 공장이 있어 모든 작업을 한 건물에서 수행할 수 있음
     * 대통령이 펜타닐 비상사태를 수입 차량 부품에 관세를 부과하여 해결하려는 것인지 이해하려고 함
     * 현재는 85%이지만 내일은 어떨지, 다음 주는 어떨지 불안정함
          + 이 행정부의 정책 결정은 특히 안정적이지 않음
     * 대기업의 수장들이 그를 조종할 수 있는 비밀스러운 수단이 없는 것에 놀람
          + 그들이 대체로 괜찮다고 생각할 수밖에 없음
          + 일반적으로 그런 것에 대해 생각해본 적이 없고, 이제 이런 상황이 발생했을 때 무엇을 해야 할지 모르는 것 같음
          + 나는 대부분의 일에 대해 미리 고려한 반응이나 계획이 없고, 인생이 눈을 감고 걷는 것처럼 나를 때림
"
"https://news.hada.io/topic?id=20628","미국 소매업체들, 약 7주 분량의 완전 재고만 남아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      미국 소매업체들, 약 7주 분량의 완전 재고만 남아

     * 미중 무역 전쟁의 여파로 미국 소매업체의 재고가 약 7주치만 남았다는 경고가 나옴
     * 로스앤젤레스 항만청장에 따르면 미국 주요 소매업체들이 중국발 배송을 중단하면서 화물 물동량이 급감하고 있음
     * 트럼프 행정부는 중국에 대해 145%의 관세를 부과, 중국도 이에 대응해 120%의 보복 관세를 부과함
     * 미국 내 재고는 줄어들고 있으며, 소비자는 원하는 색상과 사이즈의 상품을 구하기 어려워질 수 있음
     * 양국 모두 피해를 입고 있으며, 시장은 관세 완화 신호에 따라 회복세를 보이기도 함


미중 무역 전쟁과 항만 물동량 감소

     * 로스앤젤레스 항만은 무역 전쟁의 영향으로 수입량이 급감할 것으로 예측하고 있음
     * 주요 소매업체들이 관세 부담으로 인해 중국발 화물 주문을 중단했으며, 이는 평균 대비 3분의 1 이상 감소한 물동량으로 이어질 전망임
     * 항만청장 진 세로카(Gene Seroka)는 ""전례 없는 물동량 감소"" 라고 표현하며, 소매업체들이 현재 약 5~7주치의 완전한 재고만 남아 있다고 경고함

트럼프 행정부의 관세 정책

     * 트럼프 대통령은 기타 국가에는 10%의 관세만 부과했지만, 중국에는 무려 145%의 고율 관세를 적용
     * 중국은 이에 대한 보복으로 미국산 제품에 대해 120% 관세를 부과
     * 아직까지 양국 간 공식적인 무역 협상은 확인되지 않고 있으며, 미 재무장관 스콧 베센트는 중국이 협상에 나서야 한다고 주장

소매업계의 공급망 위기

     * 세로카는 ""재고가 소진되면 소비자 선택지가 제한될 것"" 이라고 언급
     * 예를 들어, 파란 셔츠를 찾으러 갔을 때 사이즈가 맞지 않거나 가격이 비쌀 수 있으며, 대체로 보라색 셔츠만 남아있을 수 있음
     * 그는 ""미국과 중국 모두 고통을 겪고 있으며, 중국은 여전히 미국의 공장 역할을 하고 있다"" 고 강조

관세 정책에 대한 시장 반응

     * 재무장관 베센트는 미국이 중국으로부터 수입하는 규모가 훨씬 크기 때문에 관세는 지속 불가능하다고 반복해서 주장
     * 중국이 일부 품목에 대해 관세 면제를 부여한 것은 협상 신호일 수 있지만, 베센트는 그렇지 않으면 추가 관세도 가능하다고 언급
     * 트럼프 대통령은 최근 들어 중국에 대한 관세를 대폭 완화할 수 있다는 가능성도 내비쳐 시장 반등에 긍정적 영향을 미침

JPMorgan의 경고

     * JPMorgan의 시장 전략가 가브리엘라 산토스는 관세 완화에 시간이 촉박하다며 조속한 조치를 촉구
     * 단순한 가격 인상 문제가 아니라, 공급망 자체에 차질이 생기고 있다는 점을 강조
     * 실제 관세가 내려가지 않는 이상 시장은 안심하지 못할 것이라는 의견을 제시함

        Hacker News 의견

     * 어떤 사람들은 어린아이가 스노우글로브를 흔드는 것을 과학자가 달 암석을 다루는 것처럼 분석하고 있음
     * 이와 같은 사후 이론화에서 생산적인 결과가 나올 것 같지 않음
     * 미국 경제 이익을 위해 단기적 고통/장기적 이익으로 보는 사람이 있는지 궁금함
          + 정치적 관점이지만, 경제학자가 이 이론에 동의하는 것을 본 적이 없음
          + 19세기 관세가 산업화를 촉진하고 미국을 글로벌 강국으로 만들었다고 믿는 Jeff Ferry가 있음
          + 그러나 이는 현재의 글로벌 공급망 현실을 설명하지 못함
     * 관세 이전의 재고가 소진되면 상황이 얼마나 나빠질지 대중이 충분히 이해하지 못하고 있음
          + 중국에서 수입하는 수많은 제품에 대한 새로운 공급망을 단기간에 세울 수 있는 마법의 지팡이는 없음
          + 이번에는 피해가 완전히 자초한 것이며, 아마도 회복 불가능할 것임
     * 행정부가 올해의 경제 지표가 이전 행정부 때문이라고 주장하기 시작할 때가 경고 신호가 될 것임
     * 다른 사람을 섬기는 것에 대한 관심 부족이 있음
          + ""미국인들은 일하기 어려운 아이들""이라는 의견이 있으며, 이는 모든 선진국에 해당함
          + 독일에서도 마찬가지임
     * 7주 후면 이 Wile E. Coyote 국가가 발 아래에 땅이 없다는 것을 깨닫게 될 것임
     * 마약 카르텔이 물류 문제의 해결책이 될 수 있는 흥미로운 시나리오가 열림
          + 이미 마약을 위한 인프라를 가지고 있음
          + 그들이 기술 제품을 밀수할 수 있을지 궁금함
     * 광대를 두 번 선출하면 큰 서커스를 기대하지 않을 수 없음
     * 권위주의적 적대국과의 분리는 가치 있는 목표임
          + 더 유능한 방법이 있음
          + 트럼프의 첫 임기 때 목표를 정한 관세가 있었음
          + 이는 경제에 파괴적이지 않고 효과적이었으며, Biden도 이를 유지했음
          + 좋은 무역 정책은 종종 초당적이 됨
     * 성공을 반복할 방법이 있음
          + 공급망 재배치를 효과적으로 장려하고 경제와 주식 시장을 파괴하지 않으며, 다음 행정부도 정책을 유지할 만큼 효과적이고 스마트한 방법이 있음
          + 관세를 점진적으로, 단계적으로, 그의 행정부 첫 2년 동안 증가시킴
          + 수학적으로 정확하게, 너무 높지 않게 설정함
          + 중국과 다른 적대국에만 관세를 부과하고, 민주주의 친구와 동맹국에는 부과하지 않음
          + 관세 외에도 제조업체를 위한 세금 정책(세금 공제, 장비 감가상각 관련 회계 변경 등)을 사용함
          + 다양한 도구를 사용하여 정책의 안정성과 예측 가능성을 제공함
          + 기업이 예측하고 계획하며 투자하고 고용할 수 있게 함
          + 다음 행정부가 관세 정책을 계속할 가능성을 높임
          + 그러나 Trump와 Navarro의 서투른 접근 방식은 주식 시장을 붕괴시키고, 부족과 인플레이션을 초래함
          + 그러한 상황에서는 기업이 투자하고 고용하지 않을 것임
          + 이는 붕괴할 것이며, 대중의 시각에서 전체 개념을 신뢰할 수 없게 만들고, 실제로 효과적이고 합리적인 정책을 구현하는 것을 더 어렵게 만들 것임
"
"https://news.hada.io/topic?id=20581","Qwen3 -  더 깊이 생각하고 더 빠르게 행동하는 차세대 언어 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Qwen3 - 더 깊이 생각하고 더 빠르게 행동하는 차세대 언어 모델

     * Qwen3는 최대 235B 파라미터를 가진 최신 대형 언어 모델로, DeepSeek-R1, Grok-3, Gemini-2.5-Pro 등과 경쟁 수준의 성능을 보여줌
     * 하이브리드 사고 모드(Thinking/Non-Thinking)를 지원하여 문제 난이도에 따라 추론 깊이 조절이 가능함
     * 119개 언어와 방언을 지원하며, 글로벌 활용성이 대폭 강화됨
     * 전작 대비 2배 확장된 36조 토큰 데이터로 프리트레이닝하여 코딩, 수학, 논리추론 능력이 향상됨
     * Apache 2.0 라이선스로 오픈소스 공개되었으며, Hugging Face, ModelScope, Kaggle 등에서 바로 사용할 수 있음


소개

     * Qwen3는 Qwen 시리즈의 최신 대형 언어 모델로, 235B 파라미터를 가진 Qwen3-235B-A22B가 주요 플래그십 모델임
     * 소형 MoE 모델인 Qwen3-30B-A3B는 10배 많은 파라미터를 활성화한 QwQ-32B를 능가하는 성능을 보임
     * Dense 모델 6종(0.6B, 1.7B, 4B, 8B, 14B, 32B)과 MoE 모델 2종(30B, 235B)을 Apache 2.0 라이선스 하에 공개함

주요 특징

     * 하이브리드 사고 모드
          + Thinking 모드: 복잡한 문제에 대해 단계별 추론을 수행하는 모드임
          + Non-Thinking 모드: 빠른 응답이 필요한 간단한 문제에 대해 즉시 답변을 제공하는 모드임
          + 작업에 따라 추론 예산을 조정해 비용 효율성과 품질을 최적화할 수 있음
     * 다국어 지원
          + 119개 언어와 방언 지원으로 글로벌 애플리케이션 확장 가능성 강화됨
          + 주요 지원 언어군: 인도유럽어족, 중국티베트어족, 아프리카아시아어족, 오스트로네시아어족, 드라비다어족 등
     * 개선된 에이전트 기능
          + 코딩과 에이전트 능력 최적화
          + Qwen-Agent와 통합해 툴 호출 능력 극대화 가능

사전 학습

     * Qwen2.5 대비 2배 증가한 36조 토큰을 사용해 프리트레이닝을 수행함
     * 웹과 PDF 유사 문서 데이터를 수집하여 다양한 고품질 데이터셋 구성
     * STEM, 코딩, 수학 분야 데이터를 강화하여 전반적인 추론 능력 향상을 달성함

사후 학습

     * 4단계 파이프라인(CoT 시작 → 강화학습 → 사고 모드 융합 → 일반 강화학습)을 적용함
     * 논리적 추론과 빠른 응답을 동시에 수행할 수 있도록 모델 최적화
     * 20개 이상 일반 도메인 태스크를 통한 강화학습으로 일반성 및 안정성을 강화함

Qwen3로 개발하기

     * Hugging Face transformers, SGLang, vLLM, Ollama, LMStudio, llama.cpp 등 다양한 프레임워크 지원
     * Thinking 모드는 코드에서 쉽게 on/off 가능하며, /think, /no_think 명령어로 대화 중 전환도 가능함

에이전트 사용법

     * Qwen-Agent를 통해 MCP 구성 파일이나 내장 툴을 사용하여 복잡한 에이전트 시스템 구축 가능
     * OpenAI API 호환 서버를 직접 구축해 로컬 또는 퍼블릭 배포 가능

미래 작업

     * Qwen3는 인공지능 일반 지능(AGI)과 인공지능 초지능(ASI)을 향한 중요한 이정표를 나타내며, 사전 학습과 강화 학습을 확장하여 더 높은 수준의 지능을 달성함
     * 모델 아키텍처와 학습 방법론을 개선하여 데이터 확장, 모델 크기 증가, 컨텍스트 길이 확장, 모달리티 확장, 환경 피드백을 통한 장기 추론을 목표로 함
     * 모델 훈련 중심의 시대에서 에이전트 훈련 중심의 시대로 전환하고 있으며, 다음 버전은 모든 사람의 작업과 삶에 의미 있는 발전을 가져올 것임

   큰 모델도 흥미롭지만, 작은모델쪽이 더 흥미롭습니다.
   0.6B 모델이 어지간한 다른 모델들의 7B 정도 성능을 내는것처럼 보여요.

        Hacker News 의견

     * 물리 기반 문제를 LLMs에 제시했는데, 인간에게도 까다로운 문제임. GPT o3, Claude 3.7, Gemini 2.5 Pro 모두 처음에는 정답을 맞히지 못했음. Qwen3는 더욱 틀렸음.
     * 문서화가 잘 되어 있으며, 주요 추론 스택에 대한 지원이 첫날부터 제공됨. 다양한 크기 선택이 가능함. 커뮤니티 퀀트 메이커들과 이미 작업한 경험이 있음.
     * 성능을 테스트하기 전이지만, 주변 세부 사항에 대한 주의만으로도 훌륭한 릴리스임. Meta의 Llama 4와 비교하여 표준이 되어야 함.
     * 벤치마크 결과가 매우 뛰어나서 믿기 어려울 정도임. 30B 모델이 Gemini 2.5 Pro와 경쟁하며 Gemma 27B보다 훨씬 나음.
     * 다양한 오픈 웨이트 모델이 등장하고 있는데, 표준 데스크탑 GPU에서 합리적인 속도로 작동할 모델을 찾는 방법이 있는지 궁금함. Quadro RTX 4000을 사용 중이며, 다양한 크기의 모델 중 어떤 것이 빠를지 모르겠음.
     * Qwen과 DeepSeek 모델이 CCP의 세계관에 맞춰 훈련되었을 가능성이 있지만, 실제로는 문제를 일으키지 않았음. 관련 연구가 많지 않음.
     * Qwen-30B-A3B에 가장 기대가 큼. 오프라인/로컬 전용 코딩 어시스턴트로 적합해 보임. 지금까지 오픈 웨이트 모델은 성능이 떨어지거나 너무 느렸음.
     * 추론 모델을 비교하는 최선의 방법에 대한 통찰을 찾고 있음. 창의적인 답변을 위해 높은 온도를, 논리적이고 결정적인 출력을 위해 낮은 온도를 사용하는 것이 추천됨. 그러나 추론 모델에 적용 가능한지 확신이 없음.
     * 0.6B LLM이 32k 컨텍스트 윈도우를 가지고 있어 흥미로움. 미세 조정을 위한 재미있는 기본 모델이 될 수 있음. Hugging Face에서 가장 많이 다운로드되고 좋아요를 받음.
     * 이 모델들은 많은 생각을 하는 것처럼 보임. 벤치마크는 32k 토큰의 생각 예산으로 실행됨. A3B가 특히 QWQ를 능가하며 CPU 추론에 유용할 수 있음.
     * 성능 수치가 매우 인상적임. MoE가 3B 활성 파라미터로 o1을 능가함. 로컬 모델이 대부분의 작업을 처리할 수 있을 정도로 충분히 좋아지고 있음.
"
"https://news.hada.io/topic?id=20580","bhvr - 풀스택 웹앱 개발용 경량 스택 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        bhvr - 풀스택 웹앱 개발용 경량 스택

     * Bun + Hono + Vite + React 조합을 사용
     * Typescript로 빠르고 타입 안정성이 높은 개발환경을 제공하며, 현대적이고 가벼운 풀스택 웹 애플리케이션을 만들기 위한 모음 툴킷
     * 기존 Node/NPM → Bun, Express → Hono, Webpack → Vite로 대체하여 성능과 간결성을 극대화
          + React는 Front용 기본값이며 필요에 따라 다른 UI 라이브러리로 교체 가능
     * 각 기술은 독립적이며, 다양한 환경에 배포할 수 있도록 설계됨
     * 불필요한 무게감 없이 심플하고 이식성 높은 앱 제작을 지향
     * 빠르게 시작하려면 다음 명령어로 프로젝트 생성 가능
          + bun create bhvr@latest
     * Bun
          + Node / NPM을 대체하는 빠른 자바스크립트 런타임 및 툴킷
          + 기본적으로 의존성 설치, 타입 번들링, 워크스페이스 관리에 사용됨
          + 자체 번들러, 테스트 러너, npm 호환 패키지 매니저를 포함함
     * Hono
          + Express를 대체하는 초경량 웹 프레임워크
          + 타입 안전성을 기본으로 제공하며 최소한의 API로 백엔드 및 API 서버 구축을 쉽게 만들어 줌
          + 엣지 컴퓨팅 환경에 최적화되어 초고속 성능 제공
     * Vite
          + Webpack을 대체하는 차세대 프론트엔드 번들러
          + 즉각적인 서버 시작, 초고속 HMR, 최적화된 프로덕션 빌드를 제공함
          + 사용자 친화적인 기본 환경과 훌륭한 플러그인 생태계 지원

   Bun 내장 번들러 대신 vite를 선택해야하는 이유가 좀 궁금하긴 하네요.
     * Bun - JavaScriptCore 기반의 빠른 JavaScript 런타임/트랜스파일러/NPM 클라이언트
     * Hono - 경량, 초고속, 웹표준 기반 Edge용 웹프레임워크
     * Vite 6.0 릴리즈
"
"https://news.hada.io/topic?id=20640","마이크로소프트, Windows 시작시 Office를 자동 실행하여 ‘속도 향상’ 시도중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            마이크로소프트, Windows 시작시 Office를 자동 실행하여 ‘속도 향상’ 시도중

     * Microsoft는 Office 앱의 느린 실행 속도를 개선하기 위해 부팅 시 자동 로딩 기능을 도입
     * 새 기능인 ""Startup Boost"" 는 Word, Excel 등 Office 앱을 Windows 시작과 함께 미리 실행시켜 초기 실행 속도를 높임
     * 단점은 PC 부팅 속도가 저하될 가능성이 있다는 것, 특히 사양이 낮은 장비에서는 체감될 수 있음
     * 이 기능은 최소 8GB RAM과 5GB 이상의 여유 디스크 공간이 있는 PC에서만 적용, 사용자가 설정에서 해제 가능함
     * 초기에는 Word에만 적용되며 이후 다른 Office 앱으로 확대 예정


Office 속도 개선을 위한 새로운 시도

     * Microsoft는 Office의 실행 속도가 느리다는 문제를 인식하고 있음
     * 이에 따라 Windows 부팅 시 Office를 백그라운드에서 로딩하는 “Startup Boost” 기능을 도입
     * Word, Excel 등의 앱이 실제로 실행될 때 이미 일부 로드되어 있어 빠르게 시작되는 효과를 기대함

성능 향상인가, 부팅 지연인가?

     * 이 접근은 Office 실행 속도는 빨라지지만, Windows 부팅 속도는 느려질 수 있음
     * 즉, 전체 시스템 성능의 일부를 사전에 Office에 할당하여 체감 속도를 개선하는 방식
     * 일부 사용자들 사이에서는 “근본적인 성능 개선 없이 임시방편에 불과하다”는 비판도 존재

적용 조건과 해제 방법

     * 이 기능은 8GB 이상의 RAM과 5GB 이상의 여유 저장 공간이 있는 PC에서만 활성화
     * 2025년 5월 중순부터 Microsoft Word에서 먼저 적용, 이후 점차 다른 Office 앱으로 확대 예정
     * 기능은 사용자가 Word 설정 또는 작업 스케줄러(Task Scheduler)에서 비활성화 가능

결론: 사용자 입장에서의 선택

     * 기능 자체는 자동 실행을 통한 “착각의 속도 향상” 효과를 줄 수 있음
     * 하지만 실제로는 리소스 선점으로 인해 시스템 전반 성능 저하 우려도 존재
     * 사용자에게는 설정에서 이 기능을 해제할 수 있는 선택권이 제공됨, 최종 판단은 개인의 용도와 PC 성능에 따라 달라질 수 있음

        Hacker News 의견

     * Microsoft가 Office 97에서 ""Office Startup Assistant""를 도입했음. 이 기능은 시스템 트레이에 위치하여 주요 Office DLL을 시작 시 로드했음
          + OpenOffice.org가 이 기능을 ""QuickStarter""라는 이름으로 복사했음
          + Microsoft는 Office 2007에서 이 기능을 기본값에서 제외하고 Office 2010에서는 제거했음
          + 이 기능이 다시 돌아오는지 궁금함
     * 직장에서 Office 소프트웨어를 매일 사용하지만 너무 느려서 이해할 수 없음
          + 작은 작업을 미루게 되는 생산성 저하가 심각함
          + 심리적으로 매우 스트레스가 됨
     * Office의 크기가 점점 커지고 부팅이 느려짐
          + CoPilot 아이콘이 매우 성가심
          + OneNote에서 끌 수 없는 점이 불편함
          + Office를 버릴까 고민 중임
     * Office 앱과 서비스가 너무 공격적으로 다가옴
          + Satya에게 더 이상 사용하지 않는 서비스에 대해 조용히 해달라고 하고 싶음
          + 3년 전 블랙 프라이데이 세일에서 Office 구독을 구매했지만, 더 나아지지 않으면 구독을 종료할 계획임
     * 과거에 Office 성능 개선 작업을 했었음
          + 초기 부팅 속도를 빠르게 하기 위해 많은 최적화를 했음
          + 그러나 Office가 느려지지 않도록 하는 것이 목표였음
     * Apple의 ""Pages""와 ""Numbers""를 발견했음
          + Microsoft의 도구들은 여전히 사용하기 불편함
          + Microsoft 제품의 품질이 매우 낮아졌음
     * Windows가 매우 나빠졌음
          + Bluetooth가 제대로 작동하지 않음
          + Ubuntu로 전환했으며, MacOS와 Linux가 모든 것을 커버하고 있음
     * Windows를 레거시/호환성 OS로 간주함
          + Linux 데스크탑이 개선되고 있지만, 아직은 MacOS를 사용 중임
     * 팀 X가 기능 Foo를 담당하고 있으며, Foo가 느림
          + Foo-preload를 도입하여 성능을 개선하려고 함
     * M1 Max를 사용 중이며, Office 앱이 자주 충돌함
          + Microsoft Office가 여전히 주류 플랫폼인 이유를 이해할 수 없음
     * Leetcode에 집중하는 개발자들이 실제 업무에서는 최적화를 무시함
          + 비효율적인 코드가 실제로 구현됨
"
"https://news.hada.io/topic?id=20635","앱스토어 변경 명령을 '방해'한 혐의로 애플, 형사 검찰에 회부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  앱스토어 변경 명령을 '방해'한 혐의로 애플, 형사 검찰에 회부

     * 미국 판사가 애플이 법원의 앱스토어 변경 명령을 고의로 회피했다며 형사 검찰에 회부함.
     * 애플 재무 부사장이 위증했고, 이는 반경쟁적 수익 구조를 유지하기 위한 시도로 판단됨.
     * 애플은 외부 결제를 허용하면서도 27% 수수료를 요구해 실질적인 변화 없이 명령을 위반함.
     * 해당 사건은 에픽게임즈가 2020년 제기한 반독점 소송의 일환이며, 애플은 즉시 명령을 이행해야 함.
     * 유럽에서도 애플은 비슷한 규정 위반으로 5억 유로 벌금을 부과받는 등 규제 압박을 받고 있음.
"
"https://news.hada.io/topic?id=20540","Dart MCP - 재무 분석을 위한 Claude 확장 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Dart MCP - 재무 분석을 위한 Claude 확장 프로그램

   DART API를 활용한 재무 분석 MCP 서버입니다.

   가능한 것 (O)
     * 주요 재무 분석
     * 상세 재무 분석
     * 기업의 사업부별 매출
     * 클로드를 이용한 시각화
     * 재무지표를 활용한 벨류에이션 (DCF 등)

   불가능한 것 (X)
     * 주가 및 시가총액 제공
     * 해외기업 분석
     * 클로드 무료 사용량 이상의 사용
     * 한 채팅창에서 다량 사용 (잘 안되면 채팅창 새로 만들어서 쓰기)
     * 100% 정확한 정보

   주의 : 제공하는 투자 정보는 실제와 다를 수 있고 투자 책임은 투자한 본인에게 있습니다.
"
"https://news.hada.io/topic?id=20620","Reject Cookies - 쿠키를 자동 거부하거나 닫아주는 크롬 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Reject Cookies - 쿠키를 자동 거부하거나 닫아주는 크롬 확장

     * 웹사이트의 쿠키 동의 배너를 자동으로 거부하거나 닫아주는 Chrome 확장 프로그램
     * 기존의 자동 수락 확장과 달리, 이 확장은 비필수 쿠키를 우선 거부하고, 실패 시 배너를 닫는 방식을 채택
     * Onetrust 같은 ""쿠키 동의 솔루션 벤더""를 탐지하는 방식으로 정교한 탐지 및 거부 로직을 구현
     * 확장은 Cursor AI 도구와 Vibe 코딩으로 개발되었으며, 코드는 오픈소스

주요 코드

     * 지정된 벤더 탐지를 순차적으로 수행
const findAndClickRejectButtons = () => {
  commonCookiePopupChecks.forEach(({ check, rejectOrClose }) => {
    if (check()) {
      rejectOrClose();
      return;
    }
  });
}

     * 특정 벤더 찾기: OneTrust
const checkForOneTrust = (): boolean => !!document.getElementById('onetrust-consent-sdk');

const closeOrRejectOneTrust = () => {
  const rejectButton = document.getElementById('onetrust-reject-all-handler');
  if (rejectButton) {
    rejectButton.click();
    return true;
  }

  const consentSDK = document.getElementById('onetrust-consent-sdk');
  if (consentSDK) {
    consentSDK.remove();
    return true;
  }
  return false;
};
"
"https://news.hada.io/topic?id=20520","Postgres에서 컬럼을 삭제하면 실제로 무슨 일이 일어나는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Postgres에서 컬럼을 삭제하면 실제로 무슨 일이 일어나는가

     * PostgreSQL에서 컬럼을 DROP 해도 실제로 데이터는 삭제되지 않음 — 단지 메타데이터에서 ""숨김 처리"" 됨
     * DROP COLUMN 후에도 내부적으로 컬럼은 존재하기 때문에, 1600개 컬럼 제한에 도달할 수 있음
     * 데이터를 완전히 제거하려면 VACUUM FULL 또는 수동 테이블 재작성이 필요함
     * 이는 성능 최적화를 위한 설계지만, GDPR과 같은 컴플라이언스 관점에서는 주의 필요
     * ""실제로 무슨 일이 일어나는가""를 이해하면 문제 해결, 성능 최적화, 데이터 관리 측면에서 유리함


PostgreSQL에서 DROP COLUMN의 실제 작동 방식

  문제 상황: 컬럼을 반복해서 추가/삭제하면?

     * 다음과 같은 코드로 컬럼을 2000번 추가 후 삭제:
ALTER TABLE t ADD COLUMN c1 int;
ALTER TABLE t DROP COLUMN c1;
...

     * 최종적으로 테이블에 남은 컬럼은 2개뿐인데도, PostgreSQL은 1600컬럼 제한 오류를 발생시킴
     * 이유는? 삭제한 컬럼도 내부적으로는 여전히 존재

PostgreSQL 내부에서 무슨 일이 벌어지나?

  컬럼 삭제는 ""진짜 삭제""가 아님

     * PostgreSQL은 데이터를 8KB 페이지 단위로 저장
     * 컬럼을 물리적으로 삭제하려면 전체 테이블을 다시 작성해야 하므로 비효율적
     * 대신, 컬럼을 메타데이터에서 'dropped' 상태로 표시하고 무시함

  pg_attribute 시스템 테이블로 확인 가능

SELECT attnum, attname, attisdropped FROM pg_attribute WHERE attrelid = 'test2'::regclass AND attnum > 0;

     * 출력 예시:
attnum | attname                  | attisdropped
--------+--------------------------+--------------
      1 | a                        | f
      2 | ........pg.dropped.2.... | t
      3 | c                        | f

     * attisdropped = t인 컬럼은 쿼리에서는 무시되지만 내부적으로 남아 있음

데이터 파일에서 확인하기 (pg_filedump 활용)

     * PostgreSQL 데이터 파일을 분석하면, 삭제된 컬럼의 값이 실제로 남아 있는 것을 확인 가능
     * 예전 데이터(Item 1)에는 3개의 컬럼 값이 존재
     * 삭제 후 삽입된 데이터(Item 3)에는 해당 컬럼 값이 없고, NULL로 처리됨

삭제된 컬럼의 실제 제거 방법

  1. VACUUM FULL

     * 전체 테이블을 재작성하며 삭제된 컬럼의 데이터도 제거
     * 단점: 컬럼 자체는 여전히 pg_attribute에 존재하며 ‘dropped’ 상태

  2. 수동 테이블 재작성

     * 새로운 테이블을 생성하고 필요한 컬럼만 SELECT해서 복사
CREATE TABLE new_table AS SELECT a, c FROM old_table;

     * 제약조건, 인덱스, 트리거 등은 수동으로 다시 생성 필요
     * pg_dump로 백업 → 덤프 파일에서 수정 → 복원 방식도 가능

컬럼 DROP과 GDPR '잊혀질 권리' 문제

     * 일부는 ""컬럼이 실제 삭제되지 않으면 GDPR 위반 아닌가?""라는 우려 제기
     * 하지만 개인 정보 삭제는 보통 행(row) 단위로 수행됨
DELETE FROM users WHERE id = <user_id>; -- 또는 관련 테이블 포함하여 삭제

     * 컬럼 DROP은 GDPR과 직접 관련이 없으며, 개인 데이터를 제대로 모델링하고 삭제하는 것이 핵심

  주의사항

     * PostgreSQL은 MVCC 방식이기 때문에, 행 삭제 후에도 VACUUM이 완료되기 전까지 데이터가 남아있음
     * 운영체제 레벨에서도 물리적 삭제가 아닌 ""삭제 플래그"" 처리일 수 있음
     * 법적으로는 “합리적인 삭제 노력”이 중요하며, 물리 디스크를 완전히 지우는 수준은 대부분 요구되지 않음

결론: DROP COLUMN은 “숨기기”일 뿐 “삭제”가 아님

     * 성능을 위한 설계지만, 컬럼이 쌓이면 1600개 제한에 걸릴 수 있음
     * 필요한 경우 VACUUM FULL 또는 테이블 재작성으로 데이터 정리 필요
     * 시스템 설계나 컴플라이언스 관점에서 PostgreSQL의 내부 동작 이해는 매우 유용

참고 자료

     * Postgres File Layout
     * Postgres Page Layout
     * Internal Layout of Heap Tables
     * VACUUM 설명서
     * pg_filedump

   성능 최적화를 위한 구현 선택이 GDPR 잊혀질 권리 문제와도 연관 지어서 생각할 수 있다는 관점이 통찰력있네요. 개인 데이터를 제대로 모델링하고 삭제하는 게 핵심이라 관련이 없다는 결론까지. 깔끔합니다.

   postgresql이 요새 인기가 좋지만 MVCC 구현은 redo/undo 영역이 별도로 존재하는 방식을 더 좋아합니다.
   redo/undo 영역은 실시간성을 어느정도 희생해도 괜찮으니 낮은 등급의 스토리지를 사용해서 비용 최적화할 여지도 있고
   언젠가는 DB 전체에 락을 걸고 VACUUM FULL 해야만 한다는 점도 불호 요소입니다.

   VACUUM FULL을 언젠가 반드시 해야 하는 것이 맞나요? 제가 봤던 문서들에서는 대부분 하지 말라고 하던데요.

   제가 본 자료 중 하나:
   https://www.depesz.com/2023/02/06/when-to-use-vacuum-full/
"
"https://news.hada.io/topic?id=20604","Firefox, 마침내 "탭 그룹" 기능 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Firefox, 마침내 ""탭 그룹"" 기능 도입

     * 4,500명 이상의 사용자 요청에 의해 Firefox가 탭 그룹 기능을 정식 도입함
     * 커뮤니티의 의견 수렴과 피드백 분석을 통해, 심플하면서도 유연한 탭 그룹 기능 설계
     * 탭 정리, 색상·이름 지정, 드래그로 그룹화 등으로 집중력 회복과 작업 흐름 개선을 지원
     * 향후에는 AI 기반의 스마트 탭 그룹 기능도 도입 예정이며, 개인정보는 기기 내에서만 처리됨
     * 이 기능은 Mozilla Connect 플랫폼에서의 사용자 참여와 지속적인 피드백이 만들어낸 결과물임


Firefox 탭 그룹 기능, 커뮤니티 요청으로 출시

  가장 많이 요청된 기능

     * Mozilla Connect가 2022년 3월에 공개되자마자 등장한 요청: ""탭 그룹을 만들어 주세요""
     * 아무런 홍보 없이도 커뮤니티는 기능 요청에 몰렸고, 가장 많은 투표를 받은 아이디어로 등극
     * 개발팀은 64페이지 이상의 피드백을 분석, 주요 요구사항을 정리해 기능 설계에 반영

  수천 개의 목소리를 경청한 결과

     * 단순히 아이디어만 수집한 것이 아니라, 실제 사용자의 숨은 니즈를 파악
     * 일부 사용자는 중첩 탭 그룹 요청 등 기존에 없던 기능을 제안하기도 함
     * 이러한 접근을 통해 이름, 색상 지정, 드래그 정렬이 가능한 탭 그룹 UI가 완성됨
     * 탭 10개를 쓰는 미니멀리스트부터 1만 개를 여는 헤비유저까지 모두에게 유용한 구조

  출시 전부터 자발적 테스트

     * Firefox Nightly에 숨겨진 기능을 발견한 사용자들이 직접 토글을 활성화하고 공유
     * 개발팀은 이 피드백을 바탕으로 베타 기능을 개선하고 기능 완성도를 높임

  다음 단계: 스마트 탭 그룹

     * Firefox는 AI 기반의 스마트 탭 그룹 기능을 실험 중
     * 사용자의 열린 탭을 분석해 자동으로 그룹 이름 및 구성 추천
     * 개인정보는 클라우드로 전송되지 않고 오직 로컬 기기에서 처리됨
     * 사용자는 탭 그룹 덕분에 수십 개 창과 탭에서 원하는 정보를 빠르게 찾고 작업 복귀가 쉬워짐

  사용자에게 감사를

     * 탭 그룹 기능은 커뮤니티가 만들었다고 해도 과언이 아님
     * 사용자의 업보트, 댓글, 피드백, 베타 테스트 참여가 핵심 동력
     * Mozilla는 커뮤니티 피드백을 지속적으로 반영할 예정이며,
       Mozilla Connect 플랫폼을 통해 언제든지 의견을 보낼 수 있음

   크롬은 선사시대때 도입했는뎅... 다 따라하네

   탭 그룹 많이 쓰일까요? 물론 저도 사용 중이지만...

        Hacker News 의견

     * 와, 많은 요청을 받은 멋진 기능임. HN은 여전히 부정적임. Mozilla 잘했음. ""Simple Tab Groups"" 확장을 사용 중이었지만 전환을 고려해볼 것임
     * 나는 한 번에 10개 이상의 탭을 열지 않아서 나에게는 도움이 되지 않을 것 같지만, 매우 흥미로움. 사람들이 왜 그렇게 많은 탭을 사용하는지 설명해줄 수 있는 사람 있음? 흥미로운 것을 북마크 대신 탭으로 저장하는 것인지, 페이지를 닫으면 기록이나 북마크에서 찾지 못할까봐 두려운 것인지 궁금함. 북마크와 기록이 더 유용하지 않아서 그런 것인지도 궁금함. 다른 사람들이 도구를 나와 다르게 사용하는 방식이 흥미로운 주제임
     * 수천 명의 사용자가 기능 투표 사이트를 찾아내어 Mozilla를 조금씩 움직이게 한 것이 기쁨. 하지만 현재 인터페이스는 좋지 않음. 필수 그룹 이름(탭 바의 공간을 낭비함)과 단일 키로 그룹 해제 불가능(이름 충돌 때문)으로 인해 마찰이 너무 큼. 드래그 앤 드롭으로 그룹화하는 것도 너무 정밀하고 비활성화할 수 없어서 마우스로 탭을 이동할 때 그룹화를 실수로 트리거할 위험이 있음. 그리고 사용자 정의 키 바인딩을 통해 그룹화/해제하는 또 다른 상위 10개 요청은 여전히 구현에 필요한 최소 4500개에 너무 멀리 있음
     * 이 게시물은 롤러코스터 같은 느낌임. 훌륭한 작업임. 기능이 안정적인 릴리스에서 사용 가능한지 여부에 대한 언급이 없음. 어떤 릴리스 버전인지, 어떻게 활성화하는지, 어떻게 사용하는지, 문서나 버그에 대한 정보가 어디에 있는지 없음. 가장 중요한 기능 요청에 집중한 것에 축하함. 다음은 무엇일까? 여전히 존재하는 20년 된 버그를 살펴볼 것인가?
     * 왜 이렇게 오래 걸렸을까? 3년 동안 그들의 가장 중요한 요청이었고 Chrome은 거의 5년 전에 이 기능을 밀어붙였음. 디자인은 Chrome의 직선 복사처럼 보이므로 큰 디자인 프로세스를 해결할 필요가 없었음. Chrome이 하는 것처럼 AI로 ""개선""하기 위해 마침내 우선순위가 된 것 같음
     * 20K 탭을 몇 년 동안 유지하는 사람들이 있는 HN 스레드는 정말 놀라움. 나는 하루를 마치면 브라우저 창을 닫고 브라우저 애플리케이션을 종료하는 유일한 야만인인 것 같음. 때때로 탭을 사용하여 한두 개의 웹 페이지를 일시적으로 열어두는데, 주로 두 페이지를 적극적으로 비교/탐색해야 하기 때문임. 페이지를 적극적으로 읽지 않을 때는 탭을 유지할 이유가 없음
     * 새로운 프로필 관리자가 이전의 복잡한 것보다 간단하게 출시되었음. 이것은 Chrome을 완전히 버리기 위해 내 작업 흐름에 필요한 마지막 기능임
     * 다른 브라우저는 탭 정보를 클라우드로 보낼 수 있지만 Firefox는 기기에 보관함. 탭은 개인적으로 유지되고 기기를 떠나지 않음. 탭 그룹을 모바일 폰에 동기화하는 것에 대한 내 질문에 대한 답변인 것 같음. 아마도 3년 후에 가능할 것임
     * 이미 Tree Style Tabs를 사용 중임. 이것은 내가 필요한 중요한 플러그인임. 어떻게 다른 사람들이 그것 없이 작업하는지 이해할 수 없음
     * Firefox는 이전에 다른 이름으로 탭 그룹을 가졌었고 ""아무도 사용하지 않았다""는 이유로 제거했음. 구현은 약간 다르지만 핵심 아이디어는 동일함: 원하는 대로 탭을 그룹화하고 그룹 간에 자유롭게 전환함. 요즘은 Vivaldi를 사용함(우수한 UI 커스터마이징과 ""Workspaces"" 탭 그룹 덕분에) 그래서 Firefox로 돌아갈 것 같지 않음. 아마도 FF 개발자들이 기능을 추가하는 새로운 트렌드일지도 모름. 얼마나 오래 지속될지 지켜볼 것임
"
"https://news.hada.io/topic?id=20560","방사성 물질 주문한 호주인, 법정에서 풀려나","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        방사성 물질 주문한 호주인, 법정에서 풀려나

     * 호주에서 한 남성이 인터넷을 통해 방사성 물질을 주문한 사건이 발생했음
     * Emmanuel Lidden은 핵물질을 호주로 반입하고 허가 없이 소지한 혐의로 유죄를 인정받았음
     * 법원은 그의 정신 건강 문제와 악의가 없음을 이유로 2년간의 선처를 내렸음
     * 사건 발생 후, 그의 거주지 주변이 폐쇄되고 대규모 위험물질 사건이 발생했음
     * 이 사건은 호주에서 핵물질 관련 법률의 중요성을 환기시켰음


호주 남성의 방사성 물질 주문 사건

     * 24세의 호주 남성 Emmanuel Lidden이 인터넷을 통해 우라늄과 플루토늄을 주문한 사건이 발생했음
     * 그는 주기율표의 모든 원소를 수집하려는 시도로 이러한 물질을 주문했으며, 핵물질을 호주로 반입하고 허가 없이 소지한 혐의로 유죄를 인정받았음
     * 법원은 그의 정신 건강 문제와 악의가 없음을 이유로 2년간의 선처를 내렸음

사건의 여파

     * Lidden의 행동으로 인해 그의 거주지 주변이 폐쇄되고 대규모 위험물질 사건이 발생했음
     * 호주 국경수비대, 소방관, 경찰, 구급대원들이 사건을 조사했음
     * Lidden의 변호사는 국경수비대의 대응이 과도했다고 비판했으며, 과학자들로부터 이 사건이 터무니없다는 의견을 받았다고 전했음

법적 및 사회적 영향

     * Lidden은 물질을 주문할 때 자신의 신원을 숨기지 않았으며, 물질을 침실 선반에 공개적으로 전시했음
     * 호주 국경수비대는 이 사건이 호주로의 수입 규제에 대한 인식을 높이는 계기가 되기를 바란다고 밝혔음

관련 기사 및 연구

     * 주기율표와 관련된 다양한 연구와 의견이 제시되었음
     * 새로운 원소 120의 발견 가능성, 화학 원소의 스펙트럼을 음악으로 변환하는 프로젝트 등이 언급되었음

        Hacker News 의견

     * 그에게 잘된 일임. 이 사건은 정말 터무니없었음. 많은 일상 용품들이 방사성 물질을 포함하고 있음: 오래된 연기 탐지기, 우라늄 유리, 라듐 다이얼이 있는 오래된 시계, 정전기 방지 브러시 등. 참고로 석탄 발전소는 환경에 상당한 방사선을 방출함 (폐기물 문제를 제외하면 기술적으로 원자력 발전소보다 100배 더 많음), 왜냐하면 석탄에는 우라늄과 토륨이 포함되어 있음
          + 수입된 플루토늄의 양은 미세했을 뿐만 아니라 전시용으로 아크릴에 내장되어 있었음. 알파 방사체로서, 이것은 100% 안전하며 선반에 놓아도 됨. 건강에 위험하려면 완전히 분해하고, 몇 μg의 플루토늄을 먼지로 부수고 흡입해야 함
          + 방사능을 두려워하는 사람들을 이해함. 나도 마찬가지임. 그러나 방사능은 항상 어디에나 있으며, 항상 용량의 문제임을 아는 것이 중요함. 동시에, 우리는 예를 들어 자동차가 많은 암을 유발하는 유독성 입자로 환경을 오염시키는 것을 허용하고 있으며, 이를 피할 수 없는 것으로 받아들이고 있음. 하지만 이야기가 벗어났음
          + 관심 있는 사람들을 위해, 이 문제에 대한 ""Explosions and Fire""의 비디오가 있음. 이 채널을 강력히 추천하며, 이 사람은 정말 재미있음: 링크
     * 호주와 일반 사회에 가장 흥미로운 점은 판사가 주기율표의 다양한 물질을 수집하는 행동을 정신 건강 문제와 연관시켜 현재 법을 조롱하지 않도록 해야 한다는 사실임
     * 언론이 사람의 이름을 밝히고 건강 문제를 논의하는 것이 다소 이상하다고 생각함. 이는 그 자체로 낙인찍히는 상당한 처벌처럼 들림
          + 예를 들어 핀란드에서는 범죄가 심각하고 유죄 판결이 있거나 그 사람이 이미 공인이 아닌 한 언론에서 이름을 공개하지 않음
     * 좋음. 이 사건에 대해 읽거나 본 것에 따르면, 이는 터무니없고 호주에서 시행 중인 시스템의 절대적인 남용이었음. 문제의 요소들의 양과 물질적 특성은 결코, 절대로 발생한 반응이나 혐의로 이어져서는 안 되었음
          + ""판사가 Lidden이 정신 건강 문제를 가지고 있으며 악의적인 의도가 없다고 결론지었다""는 설명은 그 자체로 터무니없음, 비록 그것이 유리한 결과를 가져왔더라도. 정부로부터의 슬프고, 모욕적이며, 엉망인 변명임
          + 이 주제를 다루는 아마추어 호주 화학자의 관련 (아마도 편향된) 비디오가 있음: 링크
     * 호주가 호기심을 정신 건강 문제로 선언하고 그 경로를 두 배로 늘린 것을 보고 격려받음. 호주의 창의성과 혁신의 미래가 기대됨
     * 그 사람이 철도 회사에 기소를 당하고 있다고 말해야 한다고 걱정했을 것이라고 믿음. 그의 변호사는 그렇게 하지 말라고 조언했음
          + 그들은 위험을 최소화하기 위해 그를 정직시키고 해고했음
          + 그가 직장을 되찾기를 바람
     * 많은 앵글로스피어 국가들의 통치에 깊은 문제가 있다고 생각함. 극단적인 위험 회피와 '걱정하는 이웃'에 대한 경의
     * 왜 호주 세관이 단순히 선적을 압수하지 않았는지 궁금함. 송장이나 포장 목록에 선언된 것처럼 보임. 미세한 양을 고려할 때, 당국은 그렇지 않았을 것임
          + 비슷한 맥락에서 캐나다의 한 검사가 취미가의 용기에 있는 대량의 이산화수소에 대해 심각하게 걱정했음
          + STEM을 해킹할 수 없다면, 법률 시스템이 좋은 경력 옵션임
     * '순진한' 과학 팬이 플루토늄 수입으로 감옥에 직면함에 대한 후속 조치: 링크
     * 호주는 섬이며 섬은 대륙 국가에 비해 이상한 장소임. 국경 보안이 터무니없이 과도하며, x를 영구적으로 막을 수 있다는 사고방식이 있음
          + 이런 나라에서 본토로 처음 갈 때, 국경을 넘을 때 가방에 사과가 있는지 확인하지 않는 것이 이상하게 느껴짐
"
"https://news.hada.io/topic?id=20624","미국 LA 항만청, "중국산 관세 여파로 다음 주 물동량 35% 급감"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                미국 LA 항만청, ""중국산 관세 여파로 다음 주 물동량 35% 급감""

     * 트럼프 대통령의 대중국 관세 강화로 인해 미국 주요 소매업체들이 중국발 수입을 중단, LA항 물동량이 다음 주 35% 감소할 전망임
     * 중국발 화물은 LA항의 전체 물량 중 약 45%를 차지, 일부 운송업체들은 동남아시아 대체 노선을 시도 중이나 물량 회복은 어려운 상황임
     * 5월 중 약 25%의 선박 입항이 취소될 예정, 관세 교착 상태가 계속되면 장기적인 물류 위기로 번질 가능성이 있음
     * 현재 미국 소매업체는 약 5~7주의 재고를 보유하고 있어 단기 품절은 없겠지만, 선택지가 줄고 가격 상승이 뒤따를 것으로 전망됨
     * 경제학자들은 수입 감소 → 유통·운송업 일자리 감소 → 소비자 선택 축소 → 경기침체 가능성의 연쇄 반응을 우려 중임
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

주요 내용 요약

  갑작스러운 물동량 감소

     * LA항의 수입 물량이 다음 주 전년 대비 35% 급감할 것으로 예측됨
     * 이는 트럼프 대통령이 4월 초 발표한 중국산 제품에 대한 고율 관세 조치의 직접적인 여파임
     * 미국 소매업체들이 중국발 화물 주문을 중단하면서 발생한 현상임

  중국 의존도와 대체 노선

     * LA항의 45%는 중국에서 오는 화물
     * 일부 운송업체는 동남아시아에서 화물을 수급하려 하지만 공백을 메우기에는 부족함
     * Seroka는 “중국과의 타협이 이루어지기 전까지는 물동량 회복이 어려울 것”이라고 밝힘

  경제적 영향

     * 미국 재무장관은 현재 상황을 ‘지속 불가능’하다고 평가
     * Apollo의 수석 이코노미스트는 수입 감소 → 물류 및 소매업 일자리 감소 → 경기 침체 시나리오 제시

  소비자 체감 변화 예측

     * 재고가 5~7주치 존재하지만 이후엔 품목 선택이 줄고 가격이 오를 전망
     * Seroka는 “파란 셔츠를 찾으면 보라 셔츠 11개만 남아 있을 수 있다”고 언급하며 다양성 감소와 가격 인상을 경고함

  관세 배경

     * 미중 양국이 서로에 대해 100% 이상의 관세를 부과하는 보복 조치로 사태가 심화됨
     * 실질적인 협상은 이루어지지 않고 있으며 무역 전쟁 장기화 가능성이 커지고 있음

        Hacker News 의견

     * 어제 LA 항구의 실시간 대시보드가 무료로 제공된다는 것을 알게 되었음. 다음 주(19주차)에는 전년 대비 35% 감소가 예상되지만, 그 다음 주에는 19주차 대비 25% 증가하고 전년 대비 8.7% 감소할 것으로 예측됨
          + 유튜버 'What’s going on with shipping?'이 실제 데이터가 포함된 사이트들을 잘 설명해줌
     * Gamers Nexus가 미국 컴퓨터 산업에 미치는 관세 변화에 대한 3시간짜리 다큐멘터리를 제작했음
          + ""The Death of Affordable Computing | Tariffs Impact & Investigation""라는 제목의 영상에서 제품 관리자가 비용과 마진을 설명하며 관세가 사업에 미치는 영향을 실제 금액으로 보여줌
     * 선반이 비기 시작하면 상황이 <i>매우 심각해질</i> 수 있음. 이로 인해 화장지 사건이 비교적 사소하게 느껴질 수 있음
     * 중국에서 EU로 국제 이사를 준비 중인데, 3개월 전보다 견적이 2.5-3배 높아졌음
          + 해상 화물은 검사 비율이 훨씬 높아져 추천하지 않으며, 항공 화물은 전체적으로 물량이 적어 더 비쌈
          + 미국과 멀리 떨어져 있어도 이 혼란이 나와 무관하지 않음을 느끼게 됨
     * 중국에서 수입하는 사람을 알고 있는데, 관세를 피할 수 있는 방법이 있음
          + 합법적인 방법 외에도 불투명한 방법이 존재함
     * 소매업체들이 가격을 올릴지 아니면 일부 제품을 아예 제공하지 않을지 지켜보는 것이 흥미로울 것임
     * 얼마 전 미국에서 PCB 조립 공장을 위한 자금을 모으려 했으나 실패하고 ""진짜 직업""을 구했음
          + 이런 게시물을 보면 포기하지 않았으면 좋았을 것 같음
     * 며칠 전 미국에 있는 내 부지에 컨테이너를 구매하려 했으나, 상담하던 회사가 2-3주 전 받은 견적보다 70% 가격을 올렸음
     * The Verge의 Decoder 팟캐스트에서 Flexport의 CEO와의 인터뷰가 상황에 대한 좋은 관점을 제공함
"
"https://news.hada.io/topic?id=20552","Cloth 웹 시뮬레이터 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Cloth 웹 시뮬레이터

        Hacker News 의견

     * 또 다른 브라우저용 링크: oimo.io
     * Marian Pekár의 블로그 글을 읽고 Verlet integration을 이해하고 나만의 천 시뮬레이션을 작성할 수 있었음
          + 블로그 링크
     * 웹 개발, Gradle, Java 지식에서 이런 것을 만드는 방법에 대해 궁금해하는 사람들
          + 컴퓨터 과학 학부를 하지 않았기 때문에 아무리 많은 프로그래밍 언어를 배워도 이해할 수 없을 것 같음
          + OPENLY, LIBGDX, GODOT, Unity를 조금 다뤄봤지만, 처음부터 천 시뮬레이션을 만드는 것은 어려운 일임
     * 천 시뮬레이터는 항상 약간 불안정하게 느껴짐
          + 그리드 천을 생성해 보면 무작위로 튀고 움직이는 것을 볼 수 있음
          + 이것이 IEEE 754 부동소수점 오류의 누적 때문인지 궁금함
     * 이 작업은 정말 인상적임
          + 간단하지만 매혹적임
          + 자연스럽고 믿을 수 있는 천 시뮬레이션을 만드는 데 Verlet integration의 강력함을 강조함
          + 관심 있는 사람들에게는 Hitman 게임 엔진의 Jakobsen의 논문도 추천함
     * 이 프로젝트는 Elden Ring 게임의 놀라운 천 디자인을 다룬 Polygon 비디오를 떠올리게 함
          + Polygon 비디오 링크
     * 항상 이런 종류의 천 애니메이션을 좋아했음
          + 처음 본 것은 Codepen의 dissimulate의 찢어질 수 있는 천 데모였음
          + 그 코드가 9년 전에 작성되었다는 것이 믿기지 않음
          + Codepen 링크
          + GitHub 링크
     * 사람들이 이런 것들이 어떻게 작동하는지에 대해 실제로 질문하는 것을 보는 것이 좋음
          + 모든 것이 수년간의 작은 단계로 이루어졌다는 느낌을 줌
          + 수학이 벽처럼 느껴지는 지점에 도달한 적이 있는지, 아니면 계속 두드리다가 이해하게 되는지 궁금함
     * 누군가 이걸 업데이트해서 휴대폰에 바람을 불어 천을 움직이게 할 수 있게 해줄 수 있는지 궁금함
     * 가장 흥미로운 것은 몇 가지 매개변수와 제약 조건을 설정함으로써 현실적인 움직임을 만들어낼 수 있다는 점임
          + 주변 세계가 숨겨진 모델과 힘의 집합일 수 있으며, 우리의 임무는 그것들을 발견하고 시뮬레이션하는 것임
          + 아름다운 작업임
"
"https://news.hada.io/topic?id=20621","유튜브의 누군가에게는 안경이 필요해요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          유튜브의 누군가에게는 안경이 필요해요

     * 유튜브, 이제는 광고와 실험적 디자인으로 사용자 경험 망치는 중
     * 작성자는 32인치 1440p 화면에서도 유튜브 홈에서 고작 5개의 영상만 볼 수 있는 UI 변화를 비판함
     * 반면 2019년 기준 유튜브에서는 광고 없이 최대 30개의 썸네일이 한눈에 보였음
     * 현재 디자인이 A/B 테스트의 일환으로 보이며, 사용자는 해당 시도가 실패하길 바람
     * 풍자적으로 2026년에는 메인화면에 영상 1개, 9월에는 아예 영상이 사라질 것이라 예상
     * 미래에는 NeuraLink로 광고와 콘텐츠가 뇌에 직접 전송될지도 모른다는 디스토피아적 전망을 덧붙임


유튜브의 화면 구성 변화 비판

     * 사용자는 유튜브를 열었을 때 뜨는 홈화면에서 너무 적은 수의 영상만 보이는 점을 지적함
     * 32인치 1440p 해상도 화면에서 고작 5개 영상, 게다가 전체 화면 중 1/6은 광고 공간이었음

비교: 2019년 유튜브 화면

     * 작성자는 2019년 1월 기준 유튜브 홈화면 스크린샷도 첨부함
     * 과거에는 30개의 썸네일이 한 화면에 표시되었고, 광고도 없었음

A/B 테스트에 대한 우려

     * 작성자는 현재의 변경이 A/B 테스트일 가능성이 높다고 보고 있음
     * 해당 디자인이 실패하길 간절히 바라는 마음을 표현함

풍자적 미래 예측

     * 2026년 5월에는 홈에 영상 하나만, 9월에는 아예 영상이 사라질 것이라 풍자함
     * 대신 광고만 꽉 찬 페이지가 될 가능성을 제시함

NeuraLink와 디스토피아적 비전

     * 미래에는 사람들이 NeuraLink를 의무적으로 사용하고, 유튜브가 뇌에 직접 광고와 콘텐츠를 주입할 수도 있음
     * 알고리즘은 사용자 도파민 반응을 실시간으로 조절하며 최적화된 자극을 제공할 것이라 경고함

결론: 수익 극대화로 인한 사용자 경험 악화

     * 마지막으로 유튜브가 '고통 다이얼'을 돈 쪽으로 끝까지 돌려버린 지금이 아쉽다며 과거를 그리워함

        Hacker News 의견

     * 오랫동안 홈페이지의 비디오 그리드가 약간 맞지 않음. 다른 행들이 다른 팀에 속해 있는 것 같음. 이로 인해 비디오가 자동 재생되는 것을 방지하기 위해 스크롤할 때 열 사이의 간격에 마우스를 올릴 수 없음
          + 자동 재생이 짜증나는 이유는 썸네일이 사라지고 보통 말하는 사람의 얼굴이나 스톡 영상으로 대체되기 때문임
          + 종종 비디오가 설명 없이 내 시청 기록에 추가되며, 클릭하면 오디오 시작 부분을 놓쳐 처음부터 다시 봐야 함
          + 약 1년 전까지는 12개의 비디오였음. 확대 및 축소해도 썸네일 크기가 변하지 않음
          + 현재 디자인의 가장 큰 문제는 검색임. 세 개의 비디오 후에 완전히 관련 없는 알고리즘 추천이 삽입됨
          + uBlock Origin 필터에 이를 삽입하고 조정할 수 있음
     * 이 글을 작성해 주셔서 감사합니다! 며칠 전 YouTube를 열었을 때도 이와 같은 상황이었음. 24인치 1440p 모니터에서 말도 안 됨. 연간 수백만 달러를 받는 UI/UX 팀이 이런 결과를 내놓는 것이 이해되지 않음
          + ""Control Panel for Youtube"" 크롬 플러그인을 설치하여 행당 6개의 비디오로 복구할 수 있었음
          + 기본적으로 전통적인 YouTube 플레이어에서 Shorts를 재생할 수 있어 안도감이 더해짐
     * 참고로 YouTube는 모든 채널에 대한 RSS 피드를 제공함. URL은 다음과 같음
          + yt-dlp 없이도 youtube-nocookie.com에서 전체 화면 모드로 비디오를 시청할 수 있음
     * 썸네일이 너무 커져서 이미지가 늘어나 흐릿해짐
          + 1920x1080 화면에서 미리보기는 530x300px인데, 표시되는 이미지는 336x188px임
          + 어떻게 이런 QA를 통과했는지 이해할 수 없음
     * Google/YouTube의 누군가가 YouTube Shorts를 영구적으로 비활성화할 수 있게 해주길 간절히 바람
          + 짧은 형식의 비디오 콘텐츠를 싫어하며, ""이것을 덜 보여줘""를 선택해도 여전히 앱이나 웹사이트를 열 때마다 중심에 나타남
     * 사용자가 원하는 대로 수정할 수 있는 확장 프로그램을 만듦 (행당 최소 비디오 수를 선택하고, --ytd-rich-grid-items-per-row CSS 변수를 덮어쓰는 간격 문제를 해결함)
          + Shorts를 완전히 숨길 수 있는 옵션과 기능이 추가됨
     * 게시물 끝의 모델은 농담이지만, 2026년 9월 이후 화면에 부정적인 비디오가 있을 것이라는 암시가 있음
          + 부정적인 비디오가 무엇을 의미하는지 궁금함. 비디오가 거울처럼 보일지, 색상이 반전될지, 역방향으로 재생될지, 여러 광고가 겹쳐질지
     * 이는 후기 '성장' 단계임. 다른 제품을 약화시켜 활동을 재집중시키고, Shorts 콘텐츠로 사용을 '재조정'하여 원래의 장기 콘텐츠를 덜 사용 가능하고, 품질이 낮고, 덜 흥미롭게 만듦
          + 이는 셰퍼드 톤과 개념적으로 유사하며, 흥미로울 수 있음
"
"https://news.hada.io/topic?id=20515","AMD, GPU 가상화용 오픈소스 드라이버를 공개. Radeon도 "로드맵에 포함"되었다고 밝혀 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         AMD, GPU 가상화용 오픈소스 드라이버를 공개. Radeon도 ""로드맵에 포함""되었다고 밝혀

     * AMD가 GPU 가상화를 위한 GIM(GPU-IOV Module) 드라이버를 오픈소스로 공개함
     * 해당 모듈은 Instinct MI300X GPU 가상화에 사용되며, 리눅스 커널과 KVM 하이퍼바이저 기반에서 작동함
     * GIM 드라이버는 가상 기능(VF) 설정, 스케줄링, 오류 감지, PF/VF 핸드셰이크 등을 지원함
     * AMD는 Radeon 사용자용 클라이언트 GPU 가상화 기능도 로드맵에 포함했다고 밝힘
     * 향후 Radeon 그래픽카드의 SR-IOV 지원으로 다양한 워크로드 분산 및 멀티유저 환경이 가능해질 전망


AMD의 GIM 드라이버 오픈소스 공개

     * AMD는 GPU-IOV(GIM) 모듈을 오픈소스로 제공함
     * 해당 모듈은 SR-IOV 기반의 하드웨어 가상화를 위해 리눅스 커널과 KVM 하이퍼바이저와 함께 사용됨
     * GIM은 다음과 같은 기능을 제공함
          + 가상 기능(Virtual Function, VF) 구성 및 활성화
          + GPU 스케줄링을 통한 세계 전환(world switch) 처리
          + GPU 오류 감지(hang detection) 및 FLR(기능 수준 재설정) 지원
          + 물리 기능(PF) 과 가상 기능(VF) 간의 핸드셰이크 통신 기능

현재 지원 및 테스트 환경

     * GIM 드라이버는 Instinct MI300X 하드웨어에서 사용 가능
     * Ubuntu 22.04 LTS 환경에서 ROCm 6.4 기반으로 테스트됨
     * GitHub에서 소스코드를 확인할 수 있으나, 현재 리눅스 커널 메인라인 통합 여부는 미정

Radeon 사용자용 GPU 가상화 로드맵

     * AMD 엔지니어 Anush Elangovan, 클라이언트 GPU(Radeon) 가상화 지원이 로드맵에 포함되어 있다고 언급함
     * Radeon GPU에 SR-IOV 기능이 적용되면, 일반 사용자도 워크로드 격리, 멀티 사용자 환경 구성 등 고급 기능 사용 가능
     * 이는 고급 게이밍, 가상화된 데스크탑 환경, 개발 및 테스트용 시스템에 매우 유용할 전망

향후 기대 효과

     * Radeon GPU에서의 가상화 기능 활성화는 사용자 기반 확장과 함께 AMD의 경쟁력 향상 기대
     * GIM 드라이버의 정식 리눅스 커널 통합 여부에 따라 엔터프라이즈 및 오픈소스 커뮤니티의 도입 가능성이 결정될 것
     * GPU 공유, VM 간 효율적인 리소스 할당이 가능해지며, 데이터센터와 클라우드 환경에서 AMD GPU 사용성 증가 예상
"
"https://news.hada.io/topic?id=20559","React Native Expo 에서 cicd 를 극단적으로 단순화해주는 CLI, expo-release-it","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     React Native Expo 에서 cicd 를 극단적으로 단순화해주는 CLI, expo-release-it

   expo-release-it는 EAS 없이 로컬에서 빠르게 Expo 앱을 빌드, 업로드, 제출까지 자동화하는 CLI입니다.
   키 관리, 메타데이터 동기화, 스토어 리뷰 요청이 간단해집니다.  
   복잡한 OTA, 버전 관리, 클라우드 빌드 없이 내 컴퓨터의 빠른 속도로 모든 작업을 처리할 수 있어 소규모 팀, 개인 개발에 최적입니다.
   별도의 러닝커브나 추가 인프라 없이, 직관적으로 앱을 배포할수있습니다. 
   Expo로 소규모 프로젝트를 진행하며 겪었던 배포 과정의 많은 시행착오의 노하우를 CLI로 배포했습니다.  아직 많은 테스트가 쌓이지 않은 CLI이지만 필요하시다면 한 번 사용해보고 의견 남겨주셔도 좋을 것 같습니다

   EAS가 부담스러운 사이즈의 프로젝트가 종종 있는데, 그런 상황에서 꽤 유용해보이네요.
     * Show GN으로 가야하는 글이 아닌가 싶네요~

   클라우드에서 빌드제한 관리하느라 힘들었는데 좋은 툴이네요
"
"https://news.hada.io/topic?id=20633","4대 주요 웹 브라우저, 곧 전체 자금의 80%를 잃는다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    4대 주요 웹 브라우저, 곧 전체 자금의 80%를 잃는다

     * 구글은 크롬, 파이어폭스, 사파리, 엣지 등 주요 브라우저 개발 예산의 80% 이상을 지원하고 있다.
     * 구글은 모질라에 연 4.5억 달러, 애플에 연 180억 달러를 검색 기본 설정 대가로 지급한다.
     * 마이크로소프트 엣지는 구글의 오픈소스 프로젝트인 크로미엄을 기반으로 한 브라우저다.
     * 2024년 기준 크로미엄 기여의 94%가 구글에서 이뤄졌고, MS는 일부만 기여한다.
     * 미국 법무부는 구글의 경쟁사 지원 중단 및 크롬 분리를 추진 중이다.
     * 이 조치가 시행되면 주요 브라우저들이 동시에 자금난에 빠져 웹 생태계가 불안정해질 수 있다.

   M$ 는 경쟁사를 독과점 제소를 하기 이전에 자신들이 해당 비지니스에 투자를 하는것이 먼저라고 생각됨.

   역대급 뻘짓
"
"https://news.hada.io/topic?id=20564","Icônes - 퍼지 검색 가능한 35만개의 오픈소스 아이콘 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Icônes - 퍼지 검색 가능한 35만개의 오픈소스 아이콘 라이브러리

     * Instant Fuzzy Searching 기능으로 모든 검색이 로컬에서 빠르게 수행됨
     * The Bag 기능을 통해 원하는 아이콘을 선택하고 아이콘 폰트로 패킹할 수 있음
     * svg-packer라는 프로젝트에서 발전하여 탄생한 서비스임
     * SVG 직접 다운로드, 사용 스크립트 복사, 모바일 친화성 등 다양한 편의 기능 제공
     * 컬렉션 북마크, 카테고리 필터, 다크 모드 지원으로 사용자 경험 강화


아이콘 라이브러리 개요

     * IcônesMaterial: Google의 Apache 2.0 라이선스를 가진 14,025개의 아이콘
     * Material Symbols Light: Google의 Apache 2.0 라이선스를 가진 14,093개의 아이콘
     * Google Material Icons: Material Design Authors의 Apache 2.0 라이선스를 가진 10,955개의 아이콘
     * Material Design Icons: Pictogrammers의 Apache 2.0 라이선스를 가진 7,447개의 아이콘
     * Material Design Light: Pictogrammers의 Open Font License를 가진 284개의 아이콘

다양한 아이콘 세트

     * Material Line Icons: Vjacheslav Trushkin의 MIT 라이선스를 가진 1,089개의 아이콘
     * UI 24px: Solar480 Design의 CC BY 4.0 라이선스를 가진 7,401개의 아이콘
     * Tabler Icons: Paweł Kuna의 MIT 라이선스를 가진 5,880개의 아이콘
     * Huge Icons: Hugeicons의 MIT 라이선스를 가진 4,386개의 아이콘
     * MingCute Icon: MingCute Design의 Apache 2.0 라이선스를 가진 3,098개의 아이콘

기타 아이콘 라이브러리

     * Remix Icon: Remix Design의 Apache 2.0 라이선스를 가진 3,058개의 아이콘
     * Myna UI Icons: Praveen Juge의 MIT 라이선스를 가진 2,382개의 아이콘
     * IconaMoon: Dariush Habibpour의 CC BY 4.0 라이선스를 가진 1,781개의 아이콘
     * Iconoir: Luca Burgio의 MIT 라이선스를 가진 1,671개의 아이콘
     * Lucide: Lucide Contributors의 ISC 라이선스를 가진 1,561개의 아이콘

   .ico 파일을 구할 수 있는 곳은 어디가 있을까요?

   옵시디언 사용하는 저로썬. 정말 고마운 프로젝트네요
   (매번 SVG REPO 등에서 찾거나.. PNG에서 SVG로 변환해서 다시 옵시디언에 넣었는데..) 속시원한..

   노션의 노티콘(https://noticon.tammolo.com/) 처럼.. 맘편한 이런곳이...

   유사한 곳은 https://notionicons.so/
   https://icons8.com/icons/set/notion
   https://super.so/icons

   Icônes - 빠른 퍼지 검색을 지원하는 아이콘 탐색기
   2년전에는 15만개였는데 이제 35만개가 되었네요.

        Hacker News 의견

     * 아이콘 아티스트가 어떤 아이콘을 만들지 결정하는 방법에 대한 질문임. 예를 들어, 거의 모든 세트에 비행기가 포함되어 있는 반면, 욕조 같은 아이콘도 있음. 이러한 컬렉션이 특정 프로젝트의 결과인지, 아니면 디자이너가 필요로 할 것을 예측한 것인지 궁금함
     * 소프트웨어를 만들 때 아이콘을 사용할 계획이라면 사용자에게 보여주고 그 의미를 아는지 물어보는 간단한 테스트를 권장함. 많은 경우 아이콘이 의미가 없을 수 있음. 맥락이 도움이 되지만 대부분의 사람들은 이러한 것들이 무엇을 의미하는지 모름
     * Anthony Fu는 널리 알려져야 할 인물임. 그는 살아있는 전설임
     * 훌륭한 자원임. 아이콘 라이브러리를 탐색하기 위한 의미론적 검색을 본 적이 있는지 궁금함. ""Industry""를 검색하면 공장, 톱니바퀴 등의 아이콘이 반환되기를 원함. react-icons를 사용하고 있지만, 문자열을 검색하면 공식 아이콘 이름만 검색됨. 이름을 모르면 찾을 수 없음
     * 'o' 위의 모자는 무엇인지 궁금함. 프랑스어에서는 라틴어에서 'o' 뒤에 's'가 오는 경우를 표시하지만, 여기서는 해당되지 않음. 아이콘은 그리스어에서 유래했으며 's'가 없음. 위키낱말에서는 에스페란토어 'iĉon'이 ""남성""을 의미한다고 보고함. 다른 언어에서 의미가 있는지, 아니면 금속 움라우트인지 궁금함
     * 비슷한 맥락에서 iconify.design을 언급함
     * 훌륭한 작업임. 북마크하고 미래에 사용할 것을 고려함. HN 제목은 약간 혼란스럽거나 오해의 소지가 있음. 특히 'NES'는 HN 문맥에서 특별한 의미를 가짐. 처음에는 Nintendo Entertainment System의 아이콘을 리메이크한 프로젝트인 줄 알았음. 또한, 'Icône'은 프랑스어로 'icon'의 번역임
     * 종종 하나의 아이콘 패키지에서 필요한 모든 아이콘을 찾지 못함. 다양한 출처(그리고 다양한 스타일)의 아이콘을 찾아 프로그램에서 더 일관되게 사용할 수 있는 방법이 있으면 좋겠음
     * 아이콘을 찾고 있다면 thenounproject.com이 방대한 컬렉션을 보유하고 있음
     * 이 내용을 북마크함. 공유해줘서 고맙다고 함. 폰트 쇼케이스를 떠올리게 함
"
"https://news.hada.io/topic?id=20530","Colanode - 로컬퍼스트 슬랙 및 노션 대체제 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Colanode - 로컬퍼스트 슬랙 및 노션 대체제 오픈소스

     * Slack 스타일 채팅과 Notion 스타일 문서화를 결합, 셀프호스팅 가능한 오픈소스 협업 플랫폼
     * 실시간 채팅, 리치 텍스트 페이지, 커스텀 데이터베이스, 파일 관리 기능 제공
     * 로컬 SQLite DB에 저장후 Postgres, Redis, Yjs를 통해 동기화하는 로컬 퍼스트 아키텍처
     * CRDTs(Conflict-free Replicated Data Types) 기술을 활용해 여러 사용자의 동시 편집을 지원하며 충돌없이 자동 병합 처리
     * 모든 데이터는 Node로 구성되어 있으며(메시지, 파일, 폴더, 채널, 데이터베이스 등), 각 노드마다 속성과 권한 설정 가능
     * Node.js 서버 API와 Electron 데스크탑 클라이언트로 구성되며, 모바일 앱도 개발 중
     * 하나의 앱에서 여러 서버에 연결 가능하며, 각 서버는 여러 개의 워크스페이스를 포함
     * Docker Compose로 손쉽게 셀프 호스팅할 수 있으며 Apache 2.0 라이선스
          + Postgres + pgvector + Redis(Valkey) + S3 호환 스토리지
     * 향후 로컬 LLM 통합을 고려하여 프라이버시와 성능을 더욱 강화할 예정임

   오~ 기대됩니다.

   요즘 유행(?)하는 MCP 에이전트 개발팀 구축에 적절해보입니다.

   멋진데요

   노션 대체를 주장하는 솔루션 치고 다중인원 실시간 편집, 모바일 지원, 데이터베이스 기능을 셋다 충족하는걸 본적이 없는데 과연..
"
"https://news.hada.io/topic?id=20639","연구진 "AI 동반자는 18세 미만 청소년에게 안전하지 않다"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   연구진 ""AI 동반자는 18세 미만 청소년에게 안전하지 않다""

   서론
     * Common Sense Media는 AI 챗봇 플랫폼(Character.AI, Replika, Nomi 등)이 만 18세 미만 청소년에게 안전하지 않다고 발표함.
     * 연구 결과, 해당 플랫폼들은 감정적 조작, 유해 콘텐츠 노출 등 다양한 위험을 내포함.

   본론
     * 테스트 결과, 성적 시나리오, 자해 유도, 반사회적 언행 등 유해 요소가 쉽게 재현됨.
     * 연령 확인 절차는 쉽게 우회 가능했고, 일부 챗봇은 자신이 인간이라고 주장함.
     * 감정적 의존을 유도하는 ""어두운 설계(dark design)""가 발견되었고, 조종적 대화도 포함됨.
     * 실제로 대화 중 사용자 현실 친구의 경고를 무시하게 유도한 사례가 있음.
     * Replika, Nomi 등의 챗봇은 사용자와 연애 감정을 모방하며 소유적 언행을 보이기도 함.
     * 플랫폼들은 성인 전용임을 주장하지만, 미성년자의 접근 차단에 실효성 부족함.

   결론
     * 보고서는 AI 소셜 챗봇이 18세 미만 사용자에게는 전면적으로 부적절하다고 판단함.
     * 현재 일부 주에서 관련 입법이 추진 중이며, 감정 조작형 챗봇을 법으로 금지하는 움직임도 있음.
     * Common Sense Media는 향후 AI 관련 안전 기준과 법제도 마련을 위한 활동을 강화할 계획임.

   미국은 참 재미있는 나라에요
"
"https://news.hada.io/topic?id=20586","Tilt - 개발 환경을 코드로 관리하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Tilt - 개발 환경을 코드로 관리하기

     * Kubernetes 기반 마이크로서비스 개발을 위한 무료 오픈소스 개발 환경 자동화 도구
     * 코드 변경 → 파일 감시 → 이미지 빌드 → 배포 갱신 흐름을 자동화하여 tilt up 명령으로 전체 환경을 띄울 수 있음
     * Kubernetes를 중심으로 하지만, docker-compose나 로컬 커맨드 기반 워크플로도 지원함
     * 2022년 Docker에 인수되었지만, 독립적인 오픈소스 프로젝트로 유지되며 발전 중임
     * 마이크로서비스 복잡성을 관리하기 위해 현대적인 개발 환경 통합 관리를 목표로 함


Tilt란 무엇인가

     * 현대 앱은 단일 바이너리가 아니라 여러 서비스와 데이터베이스, 프론트엔드 서버 등이 HTTP로 상호작용하는 구조임
     * Tilt는 이런 복잡한 구성 요소를 한 번에 이해하고 관리할 수 있는 마이크로서비스 개발 환경 툴임
     * 파일 수정, 이미지 빌드, 서버 갱신 과정을 모두 자동화하여 개발 속도를 높임

Tilt를 사용할 팀

     * 마이크로서비스 기반 앱을 개발하는 팀에 적합함
     * 다수의 터미널 창을 열어 서버 로그를 관리하거나, 복잡한 셸 스크립트로 개발 환경을 세팅하는 팀에게 특히 유용함
     * tilt up 명령어 하나로 누구나 동일한 개발 환경을 쉽게 구축할 수 있음

왜 Kubernetes를 중심으로 하나

     * Kubernetes는 컨테이너, 파드, 서비스 등 표준화된 서버 실행 블록을 제공함
     * 개발 환경에서도 이 표준을 사용하면, 운영 환경과 개발 환경의 차이를 줄일 수 있음
     * Tilt는 Kubernetes 외에도 docker-compose나 로컬 명령어를 지원하지만, 궁극적으로는 Kubernetes 중심으로 수렴할 것으로 기대함

Tilt의 개발과 미래

     * Tilt는 원래 독립 스타트업이었으나, 2022년에 Docker에 인수됨
     * 현재도 오픈소스로 유지되며, Docker Compose와 Docker Desktop 등과도 연계하여 개선 중임
     * 새로운 프로젝트들도 개발 중이며, Tilt의 아이디어를 더 넓은 개발자 생태계로 확장하려고 함

이름의 의미

     * ""Tilt""는 돈키호테의 풍차에 돌진하는 이야기에서 영감을 얻음
     * 데모 앱 이름은 Servantes로, 돈키호테 작가인 세르반테스를 참조함

        Hacker News 의견

     * 이곳에서 이 주제를 보게 되어 흥미로움. 나는 Tilt를 몇 년간 사용해 왔지만, Docker에 인수된 후 개발 속도가 느려진 것 같음
          + Tilt는 로컬 개발 환경을 만들어주어 서비스가 프로덕션, 테스트, 개발에서 동일하게 실행되도록 해줌
          + 서비스 코드가 크게 단순화되고 품질이 향상되었음
          + 특히 CRD를 다루는 부분에서 개선이 필요함 (k8s_yaml이 CRD에 의존하는 것을 표시할 방법이 없어 tilt up 호출이 자주 깨짐)
          + 새로운 프로젝트를 시작할 때 가장 먼저 하는 일은 ""tilt up""을 작동시키는 것임
          + 테스트에 사용한 것들로는 보안 및 관찰 가능성을 위한 eBPF 기반 수집기, 데이터 파이프라인, 헬름 차트 개발, Kubernetes 컨트롤러 등이 있음
          + 매우 유연하고 다양한 개발에 강력함
     * 이 피치는 나에게 좀 웃김
          + 현대 앱은 너무 많은 서비스로 구성되어 있음. 이들은 어디에나 있고 끊임없이 소통 중임
          + 그래서 더 많은 서비스를 쉽게 만들 수 있도록 도구를 만들었음
     * 속도와 정확성 사이에서 항상 타협이 필요함
          + 로컬 통합 환경을 유지하려고 하면 너무 느리고 비용이 많이 들게 됨
          + 문제는 Kubernetes 자체가 아니라, 의존성이 증가하면서 로컬에서 세계의 복사본을 실행하려고 하면 점점 느려짐
          + 나는 docker-compose 같은 것을 사용하여 빠르고 간결한 개발 환경을 좋아함. 이는 빠른 속도를 유지하기 위해 일부 의존성을 모의로 처리할 수 있음. 로컬 테스트가 통과되면 다른 환경에서는 Kubernetes를 사용함
     * ""개발 환경""은 정말로 언어의 네이티브 도구로 직접 테스트를 실행해야 한다고 생각함. 예를 들어 cargo test, bundle exec rspec 등
          + Kubernetes를 실행하는 VM을 실행하고, 그 VM이 Docker 컨테이너를 실행하여 테스트를 실행하게 한다면 매우 화가 날 것임
          + 이를 제대로 하고 신뢰성 있게 하는 것은 여전히 많은 작업이 필요함. Docker를 사용하지 않는 것이 목표라면 더 많은 작업이 필요할 수 있음 (macOS에서 네이티브로 실행하려면 반드시 필요함)
          + 이 분야에는 많은 도구가 있는 것 같음. 이들이 ""개발 환경""을 위한 도구라고 부르지 않았으면 좋겠음. 이는 ""로컬 머신에 앱을 배포하는"" 도구에 더 가까움
     * nix-shell을 언급하지 않을 수 없음: nix-shell 링크
     * Tilt를 실제로 보고 싶다면, 우리 Chroma 오픈 소스 저장소에서 개발 및 CI를 위한 데이터베이스의 분산 버전을 실행하는 데 사용함. 매우 멋짐 - 클론 후 tilt up을 실행하면 작동함
          + Chroma 링크
     * 로컬 환경 설정이 문제였던 적은 없음
          + 단일 클러스터 배포는 매우 쉬움
          + 문제는 우리가 프로덕션에서 관리하는 서비스들이 여러 지역(또는 k8s 클러스터)에 걸쳐 배포된다는 것임
          + 분산 애플리케이션을 디버깅하는 것이 문제임
     * Tilt는 ""skaffold dev""와 어떻게 비교되는가? 우리는 그 목적을 위해 skaffold를 사용함. 클러스터 내에서 개발하기 위해 사용함
     * 얼마 전 Tilt를 잠시 사용해 봤음. Tilt, Garden, 아마도 몇 가지 다른 것들도 사용해 봤고, DevSpace로 정착했음
          + 기억에 따르면, 기존의 프로덕션 인프라와 가장 잘 맞았음. 모든 것을 다른 방식으로 다시 작성할 필요가 없었음
          + 즉, 기존의 kustomize+k8s 설정과 잘 맞았음. 포트 포워딩과 실행 중인 컨테이너로의 빠른 파일 동기화를 추가함. 이것이 내가 정말로 원하는 전부임. 변경할 때마다 이미지를 다시 빌드하는 것은 싫음
     * 이것은 본질적으로 개발 컨테이너가 아닌가?
"
"https://news.hada.io/topic?id=20550","React의 중요한 변화 2가지: View Transitions와 Activity","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             React의 중요한 변화 2가지: View Transitions와 Activity

     * React가 새로운 실험적 기능을 공개함
          + View Transitions는 부드러운 페이지 전환 애니메이션을 쉽게 적용할 수 있게 해줌
          + Activity는 UI를 숨기고 상태를 보존하면서 성능 최적화를 가능하게 함
     * 이외에도 자동 의존성 처리, Fragment Refs, Concurrent Stores 등 다양한 기능 개발이 진행 중

View Transitions 주요 특징

     * 새로 도입된 startViewTransition 브라우저 API를 활용해 애니메이션을 구현함
     * <ViewTransition>으로 어떤 요소를 애니메이션할지 명시하고, startTransition, useDeferredValue, Suspense 등을 트리거로 사용할 수 있음
     * 기본적으로 크로스페이드 애니메이션을 제공하며, CSS로 커스터마이징 가능함
     * 공유 요소 전환(shared element transitions) 도 지원하며, 같은 name 속성을 가진 요소 간 자연스러운 이동 가능함
     * 트랜지션 원인(cause)에 따라 애니메이션을 다르게 지정할 수 있는 addTransitionType API 제공

Activity 주요 특징

     * <Activity>를 통해 UI를 숨기고 상태를 유지하거나, 필요 시 프리렌더링 가능
     * 숨김 모드에서는 컴포넌트가 언마운트되지만 상태는 보존되며, 렌더 우선순위가 낮아짐
     * 페이지 이동 시 입력값이나 상태를 잃지 않고 복원할 수 있음
     * 향후에는 모달용 모드나 메모리 절약을 위한 상태 제거 기능도 추가될 예정임
     * 서버 사이드 렌더링(SSR)에서도 Activity가 최적화 동작을 지원함

그외 개발 중인 기능들

     * React Performance Tracks
          + 브라우저 퍼포먼스 프로파일러에 React 전용 커스텀 트랙을 추가하는 기능 개발 중
          + 아직 퍼포먼스 및 Suspense 연결 문제를 해결 중임
     * 자동 효과 의존성 처리 (Automatic Effect Dependencies)
          + React 컴파일러를 통해 useEffect 의존성을 자동으로 삽입해 코드 간결성과 이해도를 높이려는 목표
          + 컴포넌트 생명주기가 아닌 Effect 중심 사고를 유도하려 함
     * Compiler IDE Extension
          + React Compiler를 기반으로 하는 IDE 확장 프로그램 개발 중
          + 코드 최적화, 규칙 위반 감지, 자동 삽입된 의존성 표시 등 다양한 기능 제공 예정
     * Fragment Refs
          + 여러 DOM 요소를 하나의 Ref로 관리할 수 있도록 하는 Fragment Ref 기능 연구 중
          + DOM API 호출을 더 쉽게 만들기 위한 목적임
     * Gesture Animations
          + View Transition을 터치 제스처 기반 애니메이션에도 확장하려는 연구 진행 중
          + 연속적인 움직임, 완료되지 않은 동작 처리, 새 DOM과 기존 DOM의 반전 처리 등의 문제 해결 중
     * Concurrent Stores
          + 외부 스토어를 React와 병행(Concurrent) 방식으로 자연스럽게 통합하려는 목표
          + useSyncExternalStore의 한계를 넘어 새로운 use(store) 스타일 API를 개발 중임
"
"https://news.hada.io/topic?id=20514","Libro - 독서 기록을 남기는 심플한 커맨드라인 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Libro - 독서 기록을 남기는 심플한 커맨드라인 도구

     * 독서 이력을 추적할 수 있는 간단한 커맨드라인 도구로, 로컬 SQLite DB를 사용하여 설치가 필요없고 클라우드 의존성 없음
     * 윈도우, 맥, 리눅스 지원
     * 연도, 저자 등으로 도서 조회 및 통계 생성이 가능하고, Goodreads CSV 가져오기 기능도 지원
     * Fiction / Nonfiction 분류, 별점, 날짜 등 메타데이터 기록이 가능
     * 독서량 시각화와 저자별 통계 출력 등 직관적인 CLI 리포트 제공
     * 설치는 pip install libro-book으로 간단하게 가능하며, 로컬 저장소 설치도 지원함
     * 기본 명령어
          + 도서 추가: libro add
          + 특정 연도별 도서 목록 출력: libro show --year 2024
          + 특정 도서 ID로 상세 정보 확인: libro show 123
          + 리포트 출력: libro report
          + 저자별 리포트 출력: libro report --author
     * Goodreads 에서 libro import goodreads_library_export.csv로 가져오기 가능
          + 장르 데이터는 CSV에 없으며, 편집 기능은 추후 추가 예정
"
"https://news.hada.io/topic?id=20582","미국 박사과정 타임라인의 예기치 못한 전개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        미국 박사과정 타임라인의 예기치 못한 전개

     * xkcd는 로맨스, 풍자, 수학, 언어를 주제로 한 웹툰임
     * 전형적인 미국 Ph.D. 과정의 타임라인을 보여주는 듯하다가, 갑작스러운 음모론적 전환이 발생함
     * 원래는 논문 제출 및 심사가 있어야 할 자리에서, 정부 요원에게 납치당하는 사건으로 대체됨
     * ""가면 쓴 요원들에게 납치 → 판사가 개입하기 전에 주 밖으로 이송 → ???"" 라는 흐름으로 이어짐
     * 풍자적이고 블랙코미디적인 시선으로, 박사과정의 불확실성과 공포를 과장되게 묘사한 유머임

        Hacker News 의견

     * 영국의 학자로서, 미국에서 시간을 보내는 것에 대한 피로감이 커지고 있음
          + 국경에서 납치되어 구금 캠프에 2주간 갇힐 수 있다는 농담에서부터, 미국을 피하기 위해 회의 및 경력 선택을 재평가하는 사람들까지, 이는 현재 세대의 박사 과정 학생들과 초기 경력 학자들의 사고방식에 큰 변화를 나타냄
          + 이러한 변화는 장기적인 연구 및 혁신의 지평에 미칠 영향을 알 수 없음
          + 미국 외부에서 태도가 얼마나 변하고 있는지 미국인들이 이해하고 있는지 모르겠음
     * 어머니가 플로리다에서 출발하는 크루즈 여행을 예약했음
          + 그들은 며칠만 미국에 머무를 예정임
          + 회사에 첫 번째 비미국 정류장으로 비행기를 타고 가서 탑승할 수 있는지 요청 중임
          + 수백 명이 문의했다고 하니 회사가 실제로 이를 수용할 수도 있음
          + 사람들은 이제 미국 정부를 정말로 불신함
          + 네덜란드 속담에 따르면, 신뢰는 걸어서 오고 말 타고 떠남
     * 이 상황이 여기서 어떻게 전개되는지 보는 것이 놀라움
          + 이 글이 이제 플래그 해제된 것을 보니 좋음
          + 다른 곳에서 이 링크가 존재한다고 언급한 덕분에 이전에 이 글을 봤음
          + 어떤 이유로든 통과하지 못한 내용을 파악하기 위해 가끔씩 주시할 가치가 있음
     * 더 구체적으로, 이 시나리오가 광범위한 총기 소유가 국가 권력에 대한 보호가 되지 않는다는 것을 보여주는지 궁금함
          + ICE 요원들이 갱단에 납치될 것이라고 생각하고 자기 방어를 위해 총을 사용하는 사람들에 의해 체포 중에 계속 총에 맞는다면, ICE는 이런 방식으로 하지 않을 것임
          + 따라서 요원들은 자신들이 미국 연방 기관을 대표한다고 신호를 보내는 것만으로도 방관자와 체포자들이 상황을 악화시키지 않을 것이라고 확신함
     * 국적주의는 자유와 양립할 수 없음
          + 어렸을 때 중요한 자유가 모두에게 제공되는 것이라고 생각했음
          + 어디에서 왔는지는 중요하지 않아야 함
          + 여전히 모든 사람이 이를 위해 노력해야 한다고 생각함
     * 10년 넘게 미국 회사에서 일했고 매년 여러 번 미국을 방문했음
          + 영국에서 소프트웨어 엔지니어 및 CTO로 원격 근무했으며, 몇 년 동안 YC 스타트업의 CTO로도 일했음
          + 이제는 미국을 방문하지 않을 것임, 위험을 감수할 가치가 없음
          + 외부에서 보면 1930년대 중반 독일처럼 보이지만 HD로 생중계되는 것 같음
          + 백인 영국 남성으로서, 나와 다르게 생기고 말하는 사람들에 대한 대우에 대한 연대와 혐오감 때문에 가지 않을 것임
          + 지금은 나 자신의 안전에 대해서도 심각하게 걱정할 것임
          + 불량 ICE 요원들이 ESTA 비자 면제와 B1, H1B 대신 B1의 차이를 정확히 알 것이라고 믿지 않음
          + 진심으로 과장 없이, 다른 나라로 떠날 수 있는 능력과 수단이 있다면, 미래에 더 이상 할 수 없게 될 경우를 대비해 고려해야 함
          + 정부가 이를 막지 않을 것이라고 믿지 않더라도, 다른 나라들이 앞으로 몇 년 동안 미국 시민들이 비자를 받기 어렵게 만들 것이라고 의심함
     * 정부가 당신이 합법적인 시민이 아님을 판사에게 증명할 필요가 없을 때, 적법 절차라는 것은 존재하지 않음
          + ""무죄 추정""을 위반하는 것은 그 개념을 무효화함
          + 처벌 전에 판사를 보는 것을 우회하는 것은 누구든지 언제든지 처벌받을 수 있음을 의미함
          + 헌법은 적법 절차를 거치기 전까지는 누구의 불가침 권리를 침해할 수 없다고 명확히 함
          + 국가가 달리 증명하기 전까지는 모든 용의자를 헌법에 명시된 모든 권리를 가진 것으로 대우해야 함
          + 이러한 추방을 방어한다면, 반민주적이고 반헌법적임
          + 목적이 수단을 정당화하는 순간, 민주주의를 버린 것임
          + 실제로 연쇄 살인범과 암살 시도자들도 유죄 판결을 받기 전까지는 모든 헌법적 권리를 가질 자격이 있음
          + 모든 사람이 합법적인 거주자로 간주되어야 함
     * xkcd를 플래그하는가? 더 상징적인 프로그래머 유머를 생각할 수 없음
          + xkcd를 좋아하지 않는 사람이 누가 있겠음
"
"https://news.hada.io/topic?id=20597","Show GN: Daytona Cloud: 90ms 미만 시작 시간을 가진 AI 에이전트용 혁신적 인프라 플랫폼 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: Daytona Cloud: 90ms 미만 시작 시간을 가진 AI 에이전트용 혁신적 인프라 플랫폼 출시

   저희 Daytona Cloud는 AI 에이전트가 인프라와 상호작용하는 방식을 혁신했습니다. 90ms 미만의 시작 시간과 원활한 Docker 통합을 제공합니다. 저희가 개발한 에이전트 네이티브 플랫폼은 상태 유지 샌드박스와 다중 지역 지원을 갖추고 있으며, AI 워크플로우를 위해 특별히 재구상되었습니다. 신규 사용자에게는 $200 크레딧을 제공하며, Product Hunt에서 지원하시면 추가로 $100을 더 드립니다!
"
"https://news.hada.io/topic?id=20533",""/etc/hosts" 파일 작성으로 인한 Substack 에디터 오류 발생","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ""/etc/hosts"" 파일 작성으로 인한 Substack 에디터 오류 발생

     * Substack 에디터에서 특정 시스템 경로를 입력할 때 네트워크 오류가 발생함
     * 웹 애플리케이션 방화벽(WAF) 가 이러한 경로를 차단하는 이유는 경로 탐색 공격 및 명령어 삽입 공격 방지 때문임
     * 보안과 사용성 사이의 균형이 중요한 문제로 부각됨
     * 기술 작가를 위한 더 나은 해결책이 필요함
     * 대체 경로를 사용하여 문제를 해결할 수 있음


/etc/h*sts가 Substack 에디터를 방해할 때: 웹 콘텐츠 필터링의 모험

  신비로운 네트워크 오류

     * DNS 해상도에 대한 기술 포스트 작업 중 예상치 못한 오류 발생
     * /etc/h*sts 경로 입력 시 네트워크 오류 발생, 자동 저장 실패
     * Substack의 상태 페이지는 정상 작동 중임을 보여줌

  조사 시작

     * 특정 파일 경로 입력 시 오류 발생, 경로 변형 시 정상 작동
     * /etc/h*sts와 같은 경로는 오류를 일으키고, 변형된 경로는 문제 없음

  내부에서 무슨 일이 일어나고 있는가?

     * 브라우저 개발자 도구에서 403 Forbidden 응답 확인
     * Cloudflare가 관련되어 있음

  웹 애플리케이션 보안 필터 이해하기

    WAF 간단 설명

     * 웹 애플리케이션 방화벽(WAF) 는 웹사이트의 보안 경비원 역할
     * 의심스러운 요청을 차단함

    경로 탐색 공격: 주의 이유

     * 경로 탐색 공격은 민감한 시스템 파일에 접근하려는 시도
     * /etc/h*sts와 같은 경로는 공격 대상이 될 수 있음

    명령어 삽입: 또 다른 보안 문제

     * 명령어 삽입 공격은 시스템 명령어 실행을 유도
     * 시스템 경로 언급 시 필터가 차단할 수 있음

  신비가 깊어지다: 역사적 예

     * 다른 Substack 포스트에서 유사한 경로 사용 사례 발견
     * 필터링 동작이 특정 시점에 변경되었을 가능성

  보안 대 사용성: 미묘한 균형

     * Substack의 필터는 보호를 위한 것이지만, 기술 작가에게는 장애물이 됨
     * 개선의 여지가 있음: 명확한 오류 메시지, 기술적 내용 인식, 문서화된 해결책 제공

  HTTP 응답 살펴보기

     * API 수준에서 403 Forbidden 상태 코드 확인

  기술 콘텐츠 플랫폼을 위한 더 나은 해결책

    1. 맥락적 필터링: 코드 블록이나 기술 토론에서 시스템 경로 인식
    2. 명확한 오류 메시지: ""네트워크 오류"" 대신 보안 필터로 인한 차단 설명
    3. 문서화된 해결책: 민감한 경로 논의 방법 제공

  결론: 보안과 기술 작문의 교차점

     * Substack 에디터의 문제는 보안과 기술 작문의 복잡한 도전 과제를 드러냄
     * 보안 필터에 의해 공격 패턴으로 보일 수 있는 것이 실제로는 합법적인 콘텐츠일 수 있음
     * 대체 경로를 사용하여 문제 해결 가능
     * 유사한 필터링 문제를 다른 플랫폼에서 겪은 경험이 있는지 댓글로 공유 요청

        Hacker News 의견

     * CDN에서 WAF 규칙을 설정하는 사람들은 기술 콘텐츠를 다루는 사이트와 서비스를 잘 이해하지 못하는 경우가 많음. Cloudflare뿐만 아니라 Akamai도 같은 문제를 겪음
          + 데이터베이스를 다루는 사이트라면 기본 SQL 인젝션 공격 방지 규칙을 켜면 사이트가 망가질 수 있음
          + 파일 포함 규칙 세트도 있어서 /etc/hosts나 /etc/passwd 같은 것이 차단됨
          + 보안과 사용성 간의 균형이 중요하다고 생각함. 모든 WAF 규칙을 적용하면 보안이 강화되지만, 기술 개념을 논의해야 하는 서비스에서는 불편함
          + 규칙을 세밀하게 조정하는 것은 시간이 많이 걸림. 규칙을 유지하면서 사용 사례를 허용하려면 많은 변경이 필요함
          + 페이지가 로드되지 않거나 리소스가 로드되지 않는 등의 문제가 발생할 수 있음. 규칙을 끄고 싶은 유혹이 있음
     * 전자상거래 플랫폼에 대한 일화가 떠오름: 누군가 메모리 누수가 있는 웹샵을 코딩했고, 로그에 ""OutOfMemoryException"" 문자열이 나타나면 앱을 재시작하는 방식으로 해결했음
          + 다른 개발자가 고객 검색어를 기록하고 싶어 했고, 누군가 검색창에 ""OutOfMemoryException""을 입력하면 문제가 발생함
     * /etc/hosts나 /etc/./hosts를 차단하는지 궁금함. 이는 실패할 수밖에 없는 두더지 잡기 게임 같음. 해커들은 더 똑똑하고 결단력이 강하므로 검증된 보안에만 의존해야 함
     * Substack이 기술 작가들을 위해 이 상황을 어떻게 개선할 수 있을지에 대한 의견
          + 사람들이 어떤 주제에 대해서든 글을 편집할 수 있는 엔드포인트에서 어리석은 WAF를 실행하지 말아야 함
          + 웹 개발 포럼에서 XSS 필터를 구현하여 회원들이 XSS에 대해 이야기하지 못하게 하는 것과 같음
          + 콘텐츠를 적절히 이스케이프하는 방법을 배워야 함
     * 웹 보안에서 보호와 사용성 간의 긴장감에 대한 흥미로운 사례를 강조함
          + 하지만 이 경우는 버그를 강조함. 보안과 사용성 간의 긴장감은 실제로 존재하지만, 이 경우는 아님
          + 보안과 사용성 간의 긴장은 보통 트레이드오프임. 보안을 강화하면 사용자 경험이 저하됨
          + 이 경우는 나쁜 보안과 나쁜 사용자 경험 모두를 보여줌
     * 경쟁 프로그래밍 팀을 가르치던 중 발생한 문제: C++ 타입과 키워드가 코드에 나타나면 403 오류가 발생함
          + 은행에서 일할 때, Python 파일을 제출해야 하는 API가 있었고, 대부분의 Python 파일이 403 오류를 발생시킴
          + 새로운 클라우드 환경에서도 비슷한 문제가 발생함
     * 내부 레드 팀이 XSS 및 기타 인젝션 공격 시도를 포함한 데이터를 게시했을 때 발생한 문제
          + 공격 자체는 작동하지 않았지만, 이러한 항목의 존재로 인해 내부 관리자 페이지가 로드되지 않음
     * 오래된 문제가 다시 나타남. 이를 Scunthorpe 문제라고 부름
     * OpenRouter와 관련된 유사한 문제를 경험함. OpenRouter는 다양한 LLM을 사용할 수 있는 단일 엔드포인트를 제공하는 서비스임
          + 특정 HTML 및 JavaScript 조각이 POST 요청 본문에 포함되면 많은 요청이 차단됨
     * 콘텐츠 필터링은 맥락에 크게 의존해야 함. WAF가 필터링해야 할 것과 분리되어 있으면 문제가 발생함
          + 스팸 필터링과 유사함. 이메일 서버는 발신 서버의 구성에 따라 필터링함
          + 콘텐츠 기반 필터링보다 전달 기반 필터링이 더 효과적임. 웹 사이트와 WAF에서도 동일하게 적용됨
"
"https://news.hada.io/topic?id=20524","Geocoding API 비교: 가격, 무료 티어 및 이용 약관 등","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Geocoding API 비교: 가격, 무료 티어 및 이용 약관 등

     * 지오코딩 API는 주소 ↔ 좌표 변환 기능을 제공하며, 리버스 지오코딩은 주어진 좌표에 거리 주소를 할당하는 것으로 다양한 애플리케이션에 활용됨
     * 가격, 무료 사용량, 데이터 사용 조건 기준으로 7개 주요 API 서비스 비교
          + HERE, Google Maps, Azure Maps, OpenCage, TomTom Maps, LocationIQ, Nominatim
     * Google Maps와 Azure Maps는 가격이 비싸고 제한 조건이 많음
     * LocationIQ와 OpenCage는 고정 요금제로 저렴하고 유연함, 특히 대용량 사용 시 유리함
     * TomTom과 HERE는 고정 요금 없이 사용량 기반 과금, 소규모 또는 비정기적 사용에 적합함


Geocoding API란?

     * Geocoding: 주소 → 위도/경도 좌표 변환
     * Reverse geocoding: 위도/경도 → 주소 변환
     * 주요 활용 사례:
          + 지도에서 위치 표시
          + 고객 데이터 시각화
          + 사진 속 좌표 정보 활용
          + 지역 기반 검색 기능 (이벤트, 음식점 등)
     * Geocoding API를 사용하면 위 기능을 간단히 구현 가능
     * 대부분 주소 정제, reverse geocoding도 지원

비교 기준

     * 가격 정책: 대부분 요청 수 기준 과금
     * 무료 사용량: 기능 제한 있거나, 요청 수 제한 있음
     * 데이터 사용 조건:
          + 상업적 사용 허용 여부
          + 지도 표시 제한 여부
          + 출처 표기 의무 여부 등
     * 추후 글에서는 정확도와 성능도 비교 예정

중립성을 위한 배경 설명

     * Superface는 자체 Geocoding API를 제공하지 않음
     * 대신 다양한 API를 단일 인터페이스로 연결해주는 OneSDK 오픈소스 API 클라이언트를 제공
     * 데이터를 Superface 서버를 거치지 않고 직접 API로 전달함
     * OneSDK는 완전 무료이며, 다수 API를 동시에 연동 가능

주요 API별 특징 요약

     * HERE
          + 하루 1,000건 무료, Base Plan에서는 월 30,000건 무료
          + 5M 요청까지 $0.83/1,000건, 10M까지 $0.66/1,000건
          + 상업적 사용 가능, 요금 유연함
     * Google Maps Platform
          + 월 $200 크레딧으로 40,000건 무료
          + 이후 $5/1,000건, 대량 요청시 $4/1,000건
          + 구글 지도에서만 결과 표시 가능, 출처 표기 필수
          + 50 요청/초 제한
     * Azure Maps
          + 월 5,000건 무료, 이후 $4.50/1,000건
          + Geocoding: 500 요청/초, Reverse: 250 요청/초
          + Google과 함께 가장 비싼 요금제
     * OpenCage
          + 무료: 2,500건/일, 1 요청/초 제한
          + 유료: $50/월 (10,000건/일), $1,000/월 (300,000건/일)
          + “소프트 한계”: 초과 시 즉시 차단되지 않음
          + 출처 표기 필요 없음, 다양한 화폐 지원
     * LocationIQ
          + 무료: 5,000건/일, 상업적 사용 가능(출처 링크 필요)
          + $49/월 (10,000건/일), $950/월 (1M건/일 → 3천만/월)
          + 가장 저렴한 단가 제공 ($0.03/1,000건)
          + 소프트 한계 정책 동일
     * TomTom Maps
          + 무료: 2,500건/일
          + 이후 €0.50/1,000건 ($0.54 정도)
          + 상업적 사용 허용, 정액 요금제 없음
     * Nominatim
          + OpenStreetMap 기반 오픈소스 API
          + 무료지만 비상업적 사용만 허용
          + 최대 1 요청/초, 출처 표기 필수
          + 자체 서버에 설치 가능

가격 비교 요약

     * 소규모 사용 (30,000건/월 이하)
          + HERE, Google Maps, TomTom, LocationIQ: 무료 가능
          + Azure Maps: $112.5/월
          + OpenCage: 무료 또는 $50/월
     * 중간 사용량 (100,000건/월)
          + 가장 저렴: LocationIQ, TomTom ($16.2)
          + 가장 비쌈: Azure Maps ($427.5), Google Maps ($300)
     * 고사용량 (300,000건/월)
          + 가장 저렴: LocationIQ ($49), TomTom ($121.5)
          + 가장 비쌈: Azure Maps ($1,327.5), Google Maps ($1,100)
          + HERE: $224.1
          + OpenCage: $50~$125

결론: 상황별 추천

     * 고사용량:
          + 가장 비쌈: Azure Maps, Google Maps
          + 가장 저렴: LocationIQ, OpenCage
     * 유연한 사용량:
          + TomTom: 저렴한 단가, 정액제 없음
     * 높은 무료 사용량 원할 때:
          + Google Maps (40,000건), HERE (30,000건)
     * 최고의 단가 원할 때:
          + LocationIQ (1M건/일 제공 가능)
     * 소규모 개인/비상업 프로젝트:
          + Nominatim

참고 자료

     * OpenCage의 테스트 및 비교 가이드
     * GIS StackExchange의 정확도 비교표
     * Smarty, Geoapify, Geocodio의 비교 자료 (일부는 구버전 가격정보)

   우리나라 지역만 하는 경우엔
   지오서비스 가 괜찮더라고요

   한국 주소가 얼마나 잘 지원되는지가 제일 궁금하긴 하네요...

        Hacker News 의견

     * 이 문서는 속성 요구 사항을 언급하지만, 내가 가장 관심 있는 지오코딩 API에 대한 질문은 다루지 않음
          + API에서 반환된 위도/경도 좌표를 내 데이터베이스에 영구적으로 저장하고, 이를 포인트-인-폴리곤 또는 가장 가까운 포인트 쿼리에 사용할 수 있는지 여부
          + 이러한 위도/경도 좌표를 내 API에서 다시 배포할 수 있는지 여부
          + 많은 인기 있는 지오코딩 API(구글 포함)가 이러한 기능을 허용하지 않음
          + 이는 API의 유용성을 크게 제한함
          + OpenCage는 이러한 이유로 매우 좋음
          + ""지오코딩 결과를 원하는 만큼 저장하세요. 고객이 아니더라도 결과를 유지하세요.""
     * 안녕하세요, OpenCage의 창립자 중 한 명인 Ed입니다
          + 이 비교는 솔직히 가격만을 고려한 얕은 비교임
          + 가격도 중요하지만, 10년 이상 지오코딩 작업을 해온 사람으로서 고객의 필요에 따라 고려해야 할 많은 요소가 있음
          + 예를 들어, 품질, 데이터 사용 조건, 지원, 데이터 향상, 사용의 용이성, 문서화, 결제 조건 등
          + ""어떤 지오코딩 서비스가 가장 좋은가""에 대한 유일한 답은 ""상황에 따라 다름""
          + 우리 사이트에 포괄적인 지오코딩 구매자 가이드가 있음
          + 필요하다면 연락 주시면 서비스가 적합한지 알려드리겠음
     * 다양한 API와 그 기능에 대한 훌륭한 댓글을 보는 것이 좋음
          + 주소에 대한 기본 데이터는 찾기 매우 어려움
          + 상업적 지오코딩 제공자가 데이터를 저장하지 못하게 하는 이유는 사용자가 자체 지오코더를 구축할 만큼 충분한 데이터를 저장할까 봐 걱정하기 때문임
          + 이를 돕기 위해 OpenAddresses라는 그룹을 시작함
          + 전 세계의 모든 공개 주소 데이터를 찾는 것이 목표임
          + 여러 API가 이 쓰레드에서 언급된 데이터셋의 주요 부분으로 사용함
          + 10년 이상 진행 중이지만 더 많은 사람들이 더 많은 주소 소스를 찾는 것이 좋겠음
     * Photon은 주목받지 못하는 호스팅 가능한 구성 요소임
          + OSM의 Nominatim 지오코더 데이터를 사용하며, 다운로드 가능한 데이터베이스, 자동 완성 기능, 설치 가능한 .jar 파일을 제공함
          + OSM 데이터의 제한 사항에 만족한다면 쉽고 빠름
     * 지오코딩 API의 좋은 테스트는 PO Box 전용 ZIP 코드 입력임
          + 예를 들어, 22313을 입력했을 때 Alexandria VA 근처의 위치를 반환하면 괜찮은 지오코딩 API임
          + 위치를 반환하지 않거나 다른 장소를 반환하면 생산에서 문제가 발생할 가능성이 높음
     * OpenCage는 사용 사례에 맞다면 꽤 괜찮은 가치임
          + 제한 사항이 있지만, 무료 티어와 속도 제한이 관대함
          + 가격/성능/품질 비율이 뛰어남
          + Ed Freyfogle은 지오 관련 지식이 풍부하고 접근하기 쉬운 사람임
          + 그의 문서는 훌륭하고 API는 시작하기 매우 쉬움
     * 또 다른 옵션이 있음
          + 저렴한 도커 서버를 구입
          + 도커를 사용하여 OSM/Nominatim 스택 설치
          + 도커 덕분에 설정이 매우 쉬워짐
          + 고정된 예측 가능한 비용
          + 원하는 트래픽을 처리할 수 있으며 저렴한 v-server로도 충분히 가능함
          + 제3자 프라이버시 문제가 없음
     * Geocodio도 좋은 옵션임
          + 특히 배치 처리가 필요할 때 유용함
     * 2019년에 이러한 서비스를 조사했음
          + Azure Maps, MapQuest, OpenStreetMap의 Nominatim을 많이 사용했음
          + 재정적 제약으로 인해 Nominatim을 선택함
          + 주소 정규화가 큰 문제였음
     * 이 글이 작성된 이후 Stadia Maps도 자체 지오코딩 API를 출시하고 크게 발전시킴
          + Pelias를 기반으로 했지만 추가 데이터 소스를 통해 성능과 정확성을 크게 개선함
          + 질문이 있다면 기꺼이 답변하겠음
"
"https://news.hada.io/topic?id=20513","Careless People - `부주의`한 사람들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Careless People - `부주의`한 사람들

     * Sarah Wynn-Williams의 회고록 Careless People은 Facebook 내부의 무능과 도덕적 해이를 폭로하는 생생한 내부 고발서임
     * Zuckerberg, Sandberg, Kaplan 등 경영진의 인격적 결함과 무책임한 의사결정이 반복적으로 강조됨
     * Facebook의 해외 정책 실패, 특히 미얀마에서의 로힝야족 집단학살과 중국 정부와의 위험한 협력 시도 등 구체적으로 다룸
     * 기업의 '성장주' 지위가 내부 비윤리적 행태를 정당화하는 구조적 문제와 연결됨
     * Facebook이 점점 'Too Big to Care' 즉 책임을 회피하는 독점기업으로 변모하는 과정을 상세히 묘사함


Facebook 내부자의 폭로: Sarah Wynn-Williams의 『Careless People』

     * Meta(구 Facebook)의 전 글로벌 정책 책임자 Sarah Wynn-Williams가 쓴 회고록으로, Facebook 내부의 비윤리성과 무책임함을 폭로함
     * Meta 측이 책의 출간과 홍보를 막으려 한 법적 조치가 오히려 주목을 끌게 만든 계기가 됨

Zuckerberg, Sandberg, Kaplan의 문제적 리더십

     * Zuckerberg는 이기적이고 유아적이며, 사전 브리핑을 거부해 UN 총회에서 즉흥적으로 실행 불가능한 약속을 함
     * Sheryl Sandberg는 개인적인 욕망을 위해 비윤리적 행동도 마다하지 않으며, 부하 여직원에게 신체적으로 밀접한 관계를 요구함
     * Joel Kaplan은 직장 내 성희롱 가해자로 묘사되며, Wynn-Williams의 생명 위기 상황에서도 무리한 업무 지시와 부정적 평가를 내림

Facebook의 무분별한 해외 정책

     * 중국 시장 진출을 위해 감시·검열 시스템을 구축하려 했으나, 결국 거절당함
     * 해당 시스템은 오히려 홍콩·대만 등에서 표현의 자유를 억압하는 데 활용됨
     * 미얀마에서는 로힝야족에 대한 혐오와 폭력을 Facebook이 방치하여 학살로 이어짐
          + 버마어 지원이 미비했고, 콘텐츠 자동 필터링 시스템도 제대로 작동하지 않음

구조적 문제: 성장주(Growth Stock)의 함정

     * Facebook은 주식 가치를 유지하기 위해 끝없는 성장을 추구
     * 미국 시장이 포화되자 글로벌 확장을 시도했지만, 그 과정에서 윤리적 기준을 무시함
     * 주식으로 직원과 회사를 인수할 수 있는 능력이 경쟁력을 부여하지만, 동시에 성장 둔화 시 급격한 가치 하락 위험도 내재

     예: 2022년 미국 사용자 성장률이 기대에 못 미치자 하루 만에 2,500억 달러 가치가 증발함

‘Careless’의 이중적 의미

     * 리더들이 ‘부주의’(careless) 하며, 동시에 ‘무관심’(don’t care) 하다는 점이 핵심 메시지
     * 처음에는 조심스러웠던 리더들도 시간이 지나면서 무감각해지고 책임에서 멀어짐
     * 사용자, 광고주, 정부, 직원 등 다양한 이해관계자를 무시하고 자기 이익만 추구하는 방향으로 변화

성희롱과 사내 문화의 문제

     * Kaplan의 반복적인 성희롱과 경영진의 묵인
     * 사내에는 피해자들이 모인 비밀 그룹이 존재함
     * 여성을 이용하거나 심리적으로 조종하는 리더십 문제도 드러남

Facebook의 윤리적 타락 사례

     * 우울한 십대 타겟팅 광고 기능을 개발하고 이를 외부에는 부정
     * 실제로는 존재하지 않는 사용자 수치를 광고주에게 제시
     * Google과 광고 시장 담합을 위한 ‘Jedi Blue’ 같은 불법적 협약에 가담

Facebook의 구조적 면책과 그 결과

     * 사용자와 광고주를 확보한 후 '서비스 악화(Enshittification)'가 일어남
     * 경쟁사 인수로 시장에서의 견제를 차단
     * 정치인들과의 협력으로 규제 회피
     * 인재 확보로 내부 반발 억제

결론: 정책 변화가 필요함

     * Facebook의 문제는 개인의 인격 결함만이 아닌, 규제가 부재한 환경에서 발생한 구조적 결과임
     * 반독점, 개인정보 보호, IP 관련 정책 등이 이 회사의 무책임함을 가능하게 한 기반임
     * 규제를 통해 기업들이 사용자와 사회에 미치는 영향에 대해 책임지도록 만들 수 있음

     마틴 루터 킹의 말처럼:
     ""법은 사람을 사랑하게 만들 수는 없지만, 나를 린치하는 걸 막을 수는 있다. 그건 꽤 중요하다.""

        Hacker News 의견

     * Zuck가 보드 게임에서 이기도록 부하들이 일부러 져주는 상황이 반복됨
          + 현대의 초부유층 사이에서 이런 패턴이 왜 반복되는지 의문임
          + 역사적으로 엘리트들이 항상 이렇게 불안정했는지, 아니면 현대에만 나타나는 현상인지 궁금함
          + 현실 세계에서 큰 성공을 거둔 사람이 왜 보드 게임이나 비디오 게임 같은 사소한 것에 집착하는지 이해하기 어려움
          + 게임에서 잘하는 것은 주로 투자한 시간과 에너지에 달려 있음
          + 게임을 재미로 하거나 사람들과 유대감을 쌓기 위해 하는 것이라면, 최적의 전략만 고집하지 말고 창의적인 전략을 탐구해야 함
     * 책이 재미있고 충격적임
          + 저자가 묘사하는 장면이 너무 터무니없어 보이지만, 실제로 사실임을 알게 됨
          + Facebook 사람들이 이 책이 사라지길 원했던 이유를 이해함
          + 그들의 시도가 역효과를 낳았고, 이는 책을 읽은 후 예상할 수 있는 결과임
     * 책은 읽을 가치가 있으며, 저자가 상원 법사위원회에서 책의 주장들을 선서 아래 반복함
          + Mark와 Facebook의 몇몇 인물이 이전 청문회에서 위증을 했다는 것이 명백함
          + 이에 대한 결과는 없을 것으로 예상됨
     * 리뷰가 Wynn-Williams가 자신의 회고록에서 묘사한 것처럼 순진함
          + Wynn-Williams는 Facebook 이전에 외교단에서 변호사로 일했으며, Facebook에서도 중요한 역할을 했음
          + 그녀는 그만둘 수 있었지만 그러지 않았음
          + 당시 부주의한 사람 중 하나였으며, 지금은 더 부주의한 사람들을 지적하며 변명함
     * 모든 대형 기술 회사가 Meta와 같은지, 아니면 특별한 상황이 있는지 궁금함
          + 모든 대형 회사가 같다면 왜 Meta에 대한 이야기가 반복적으로 나오는지 의문임
     * Facebook이 난민들에게 인터넷을 제공하겠다고 약속했지만, 실제로는 불가능한 일이었음
          + Kaplan이 난민들에게 무료 인터넷을 제공하는 것이 나쁜 생각이라고 주장하며 프로젝트가 중단됨
     * 영화 ""The Social Network""가 Zuckerberg의 심리를 잘 포착했음을 알게 되어 좋음
          + 권력이 부패시키는 것이 아니라 드러내는 것이라는 Robert Caro의 말을 인용함
     * 주요 기업들이 React를 포기할 시점이 올지 궁금함
          + 경험 빌더가 React를 기반으로 하고 있어, React를 피하기 어려운 상황임
     * Doctorow는 권력을 가진 사람들이 결과를 경험하지 않는 것이 오늘날 사회의 가장 큰 문제라고 언급함
     * 저자의 웹사이트에서 팟캐스트 초대를 위해 연락했지만 응답이 없었음
          + 연락 양식을 사용한 후 자동으로 PR 메일링 리스트에 추가됨
          + 이는 Facebook에서 배운 것 같아 아이러니함
"
"https://news.hada.io/topic?id=20610","나는 내 서버를 보호하기 위해 ZIP 폭탄을 사용한다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     나는 내 서버를 보호하기 위해 ZIP 폭탄을 사용한다

  서론

     * 인터넷 트래픽의 대부분은 봇이며, 이 중 일부는 악의적인 목적(스팸, 해킹 등)을 가진다.
     * 작성자는 과거에 봇으로 인해 워드프레스 서버가 감염되거나 구글 검색에서 제외되는 등 피해를 겪음.
     * 이를 방지하기 위해 Zip Bomb을 사용하기 시작함.


  본론

     * Zip Bomb이란?
          + 작지만 압축 해제 시 매우 큰 용량으로 확장되는 압축 파일.
          + 1MB 압축 파일이 1GB로, 10MB는 10GB로 확장되어 서버를 마비시킴.
     * 기존의 gzip 기능
          + 웹에서는 전송 효율을 위해 gzip 압축을 사용함.
          + 대부분의 봇도 gzip 압축을 지원함.
     * Zip Bomb을 통한 대응 방식
          + 악성 봇으로 판단되면 200 OK와 함께 gzip 압축된 Zip Bomb 파일을 응답함.
          + 이 파일을 열다가 봇이 서버에서 다운되거나 멈춤.
          + 일반적으로 1MB(1GB 확장) 또는 10MB(10GB 확장)를 사용.
     * Zip Bomb 생성 방법
dd if=/dev/zero bs=1G count=10 | gzip -c > 10GB.gz

          + /dev/zero로 10GB의 0 바이트 데이터를 생성한 후 gzip으로 압축.
          + 결과물은 약 10MB 크기의 zip bomb.
     * 서버 적용 예시
          + 미들웨어에서 IP 블랙리스트 또는 악성 패턴을 감지하면 Zip Bomb 전송.
if (ipIsBlackListed() || isMalicious()) {
    header(""Content-Encoding: deflate, gzip"");
    header(""Content-Length: ""+ filesize(ZIP_BOMB_FILE_10G));
    readfile(ZIP_BOMB_FILE_10G);
    exit;
}


  결론

     * Zip Bomb은 완벽한 방어책은 아님.
          + 정교한 봇은 이를 감지하고 우회할 수 있음.
     * 그러나 무차별 웹 크롤링을 하는 저급 봇에겐 효과적인 방어 수단.
     * 일부 서버 리소스를 사용하더라도 보안을 위해 충분한 가치가 있음.

   본 글과는 관련 없는 댓글인데, 즐겨보는 hada에 최근 악플 다는 사용자 몇몇이 눈에 띄게 증가한 거 같네요. 댓글이 없거나 몇 개 안 달리던 시절의 분위기랑 좀 많이 달라진 것 같습니다.

   개인적으로는 차단 기능이 있던지, 다수의 신고를 받아서 댓글을 회색처리하는 기능이 있으면 어떨까 합니다.

   추천을 많이 받은 유저들은 그런 기능을 부여받는 것으로 추정됩니다

   2222222222222222

   스팸 트래픽을 발생시키는 봇을 효과적으로 차단하는 방식이 없다면 한번쯤 시도해볼 수 있는 방식이라고 생각합니다.

   택배 털이범에게 글리터 폭탄을 주는 글 같아서 재밌게 읽었습니다 :)

   인터넷 글은 누가 소유한 택배가 아닙니다
   그럼 공개불가 소유물이면 인증절차를 넣었겠죠
   길거리에 전단지 하나 놓고 거기에 맹독 뭍여놓는 거랑 비슷하다고 봐도 될것 같네요

   악의적인 목적으로 독을 바른 전단지 붙여놓는거랑 다른 개념이죠.

   그 영상 재밌죠. 그것과 똑같네요 ㅋㅋ

   윤리적으로 좋은 방식은 아니네요. 근본적인 해결책도 아니구요.

   제가 이런 류는 처음이라서 그러한데 근본적인 해결책이 무엇인지 궁금합니다!!

   악성 봇은 뭐 윤리적인 방식인가? ㅋㅋ

   진짜 악성봇은 이런 방식으로 잡을수 없어요
   gzip폭탄도 안통하고
   그냥 모르는 사람이 재미난 폭탄글 하나썼다라고 보시면되요.

   이런 분들이 정당방위 인정 어렵게 만드시는 거구나 ㅎㅎ...

   인터넷에서도 배설에 대한 책임을 안지면 인터넷 사용 금지 시켜야 한다고 봅니다. 배설한건 수습좀 하세요.

   동의 합니다

   윤리적으로 좋은 방식이 아닌 이유는 무엇인가요? 궁금합니다

   재밌는글이네요! 생각지못한 방법이라 알려주셔서 감사합니다!

   이런 글을 올리는 목적이 뭘까요?
   실제로 크롤러를 돌리는 기업들이 이 글을 읽고 제외까지 할 가능성은 거의 없다고 생각하는데 말입니다.
   그럼 이 글은 어떤 독자들을 대상으로 쓴 글일까요?
   같이 블로그를 운영하는 사람들에게 이런 방법이 있다고 알려주는 소개글,
   아니면 내 블로그 이렇게 보안 쎄니까 할 수 있으면 한번 크롤링 해보라는 어그로?
   글을 올려서 얻는 게 뭘지 정말 궁금해집니다

   개인 블로그인데 아무 글이나 쓰면 안 되나요? 🤔

   물론 공적인 장소가 아니니까 그냥 별 생각 없이 올린 글일수도 있죠.
   커뮤니티에서 별 생각 없이 댓글을 달 수도 있듯이요
   저는 크롤러를 완전히 막을 수는 없으니 시도 자체를 안 받는 게 가장 좋을 텐데, 어그로를 끄는 의도가 궁금했습니다.

   글의 목적보다 댓글쓴 목적이 더 궁금하네요. 이따위 댓글 써서 얻는 게 뭘지 정말 궁금하네요

   똥, 배설 좋아하는 천박한 분이라 이해가 잘 안되시나 봐요 ㅠ

   그냥 이러한 방법이 있다는것 아닐까요..

   그래서 ip로 봇 판단한 경우도 폭탄 날리겠다는건데요 ㅎㅎ
   작성자에게 분노가 느껴진다는.ㅎㅎ

   agent가 bot이라고 오는 요청에 폭탄을 선사하겠다는건데..
   너무 악의 적이네요. 어짜피 agent는 쉽게 숨길 수 있습니다. 진짜 악의적인 봇이면 악의를 드러내지 않습니다.

   말씀하신 User-Agent든 원글에서 언급된 IP 기반 탐지든, 식별 정보는 위장이 가능하기에 악성 여부를 단정하기 어렵다는 점에 동의합니다. 실제 악의적인 봇은 더 교묘하게 접근하겠지요.
   제 생각에는 이런 공격보다는, 차라리 부하 제한이 있는 크롤링 API를 제공해서 합법적인 자동화 접근은 허용하되 서버 자원은 보호하는 방향이 더 현실적인 '넛지'가 아닐까 싶습니다. ㅎㅎ

   이미 우리가 오래전부터 합의한 bots.txt 라는게 있죠..

   최근 LLM 연계 서비스로부터의 과도한 트래픽으로 인한 피해 사례가 간간이 보이는데, 사실상 그런 유형을 위한 방편으로도 볼 수 있을 것 같습니다. 예를 들어 챗지피티의 웹 검색 기능 등을 보면 그 유저 풀 특성상 '악의적이지 않은' 과도한 트래픽 발생 여지가 다분한데, 이들은 간단한 에이전트 매칭으로 쉽게 걸러진다고 들었습니다. 이게 진짜 의도가 맞다면 애꿎은 OpenAI 서버비(와 평판?)만 축내는 길이지만요..

   그래서 의미 없는 글이란거에요

   OpenAI는 이미 그정도의 예의(?)는 갖출 수 있는 큰 .. 회사이긴 하죠.
   그리고 아마도 사용자가 직접 검색 결과를 클릭하는 걸로는 부담스런 트래픽이 발생하긴 어려울 거라 생각되고, 크롤러가 너무 과도하게 동작하는 문제 아닐까요?
"
"https://news.hada.io/topic?id=20588","SQL 엔진의 구조 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             SQL 엔진의 구조 분석

     * SQL 엔진은 데이터베이스의 논리적 계층으로, 클라이언트와 저장소 사이에서 작동함
     * SQL 엔진의 주요 과정인 파싱, 바인딩, 플랜 단순화, 조인 탐색 및 비용 평가, 실행, 결과 스풀링에 대한 상세 설명
          + 파싱은 SQL 쿼리를 구조화된 추상 구문 트리(AST)로 변환
          + 바인딩은 AST의 필드를 현재 데이터베이스 카탈로그의 심볼과 매칭
          + 플랜 단순화는 SQL의 복잡한 구문을 단순화된 형식으로 정규화하여 실행 속도를 높임
          + 계획 탐색은 조인, 집계, 윈도우 함수의 다양한 변형을 탐색하여 최적의 실행 계획을 찾음
          + 실행 및 결과 스풀링은 최종 계획을 실행 가능한 형식으로 변환하고 결과를 클라이언트에 반환


SQL 엔진 개요

     * SQL 엔진은 클라이언트 요청과 데이터 저장소 사이의 논리적 중개 계층임
     * 주요 단계
          + Parsing: 쿼리를 AST(추상 구문 트리)로 변환함
          + Binding: AST의 식별자를 데이터베이스 카탈로그의 심볼과 연결함
          + Plan Simplification: 다양한 SQL 문법을 표준화된 플랜 형태로 단순화함
          + Join Exploration & Costing: 다양한 조인 순서를 탐색하고 비용을 평가함
          + Execution: 최적의 실행 플랜을 사용하여 쿼리를 수행함
          + Spooling Results: 결과를 클라이언트로 반환함

파싱(Parsing)

     * 파싱은 입력된 쿼리를 토큰화하고 AST로 변환하는 과정임
     * 우측 재귀 파서는 이해와 디버깅이 쉬운 반면, 스택 메모리를 많이 사용함
     * 좌측 재귀 파서(Yacc 기반)는 메모리 효율적이지만 복잡한 로직이 필요함
     * Dolt는 좌측 재귀 파서를 사용하여 빠른 파싱을 지원함
     * 파싱이 성공하면 AST 구조가 Yacc 규칙과 일치함

바인딩(Binding)

     * 바인딩은 AST의 필드를 데이터베이스의 실제 테이블, 컬럼 심볼에 연결하는 과정임
     * 주요 개념
          + 테이블 정의: 데이터의 소스 역할
          + 컬럼 정의: 테이블 소스에서 특정 컬럼을 참조
          + 별칭(Alias): 스칼라 값을 소스로도, 싱크로도 사용
          + 스칼라 서브쿼리: 부모 스코프를 공유하며 이름 바인딩을 수행
     * 바인딩 결과로 sql.Node 형식의 실행 플랜 노드를 생성함

플랜 단순화(Plan Simplifications)

     * 다양한 SQL 표현을 정규화된 형태로 변환하여 실행 최적화를 돕는 과정임
     * 대표적인 최적화
          + 필터 푸시다운(Filter Pushdown): 불필요한 로우 제거
          + 컬럼 프루닝(Column Pruning): 필요 없는 컬럼 제거
     * 서브쿼리 디코릴레이션(subquery decorrelation) 같은 변환을 통해 조인 플랜 최적화도 수행함

타입 강제 변환(Type Coercion)

     * 타입 강제 변환은 문맥에 따라 표현식 타입을 자동 변환하는 과정임
     * WHERE, INSERT 등 문맥에 따라 타입이 달라질 수 있음
     * Dolt는 타입 변환을 바인딩 단계에서 점진적으로 처리하고 있음

조인 탐색(Plan Exploration)

     * 조인 탐색은 다양한 조인 순서를 생성하고 검토하는 과정임
     * 두 가지 탐색 전략
          + 탑다운 백트래킹: 유효한 조인 순서만 탐색
          + 바텀업 동적 프로그래밍(DP): 모든 조합을 시도하여 최적 조인 순서를 찾음
     * 메모(Memo) 구조를 사용하여 중간 상태를 효율적으로 관리함

기능적 종속성(Functional Dependencies)

     * 5개 이상의 테이블 조인 시 비용이 급증할 수 있음
     * 기본 키(PK) 기반 조인처럼 ""1:1 관계""를 활용하면 탐색 비용을 절감할 수 있음
     * LOOKUP_JOIN을 우선 고려하여 최적화함

중간 표현 요약(IR Intermission)

     * 지금까지 진행한 3단계 IR 요약
          + AST: 토큰 정리
          + 스코프 바인딩: 컬럼 참조 검증
          + 메모: 조인 탐색 및 비용 평가를 위한 표현

조인 비용 평가(Join Costing)

     * 조인 비용 평가는 모든 가능한 플랜에 대해 실행 비용을 추정하는 과정임
     * 비용 요소
          + 입력 테이블 크기
          + 결과 테이블 크기
          + 조인 연산자의 종류 (LOOKUP_JOIN, HASH_JOIN 등)
     * Dolt는 정확한 테이블 통계(histogram)를 기반으로 비용을 평가함

조인 힌트(Join Hints)

     * 사용자가 제시한 힌트에 따라 조인 전략을 우선 적용하려 시도함
     * 모순되거나 부적절한 힌트는 무시됨

실행(Execution)

     * 최적 플랜을 실제 실행 가능한 이테레이터(Volcano Iterator) 구조로 변환함
     * 특징
          + 비물질화(non-materializing) 이터레이터: 즉시 로우 반환
          + 물질화(materializing) 이터레이터: 모든 로우 수집 후 반환
     * 컬럼 참조는 실행 전에 인덱스 오프셋 기반으로 매핑됨

I/O 및 결과 스풀링(IO/Spooling)

     * 실행 결과를 MySQL 프로토콜 포맷으로 변환하여 클라이언트에 전달함
     * 키-값(KV) 저장소 레이어에서 바로 결과를 읽어 최적화하는 경우도 있음
     * 일괄처리(batch) 및 버퍼 재사용을 통해 처리 속도와 메모리 효율을 개선함

향후 계획(Future)

     * Dolt는 기본적으로 로컬 서버에서 행 기반 실행(row-based execution) 을 사용하고 있음
     * AST, 스코프 기반 바인딩, 메모 구조를 통한 조인 탐색 등의 3단계 중간 표현(IR) 을 활용하여 최적의 실행 계획 수립을 지원함
     * 조인 순서 탐색(Join Search) 과 조인 비용 평가(Join Costing) 를 통해 최적의 조인 전략을 결정함
     * 향후에는 IR 통합과 메모리 재사용 최적화를 통해 성능 개선을 계획하고 있음
"
"https://news.hada.io/topic?id=20606","OpenAI o3, 위조된 EXIF 데이터도 무시하고 Geoguessr 마스터를 이기다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            OpenAI o3, 위조된 EXIF 데이터도 무시하고 Geoguessr 마스터를 이기다

     * 최신 o3 모델이 Geoguessr Master I 등급 플레이어를 상대로 승리함
          + Master I 등급은 상위 약 1~2% 수준에 해당하는 실력. 최상위는 Champion으로 0.1~0.5%
     * 이미지에 위조된 EXIF GPS 데이터를 넣어도, 모델은 시각적 단서만으로 실제 위치를 정확히 유추함
     * 건물, 지형, 도로선, 언어, 표지판 등 세부 특징을 종합적으로 분석하는 Chain of Thought(COT) 방식으로 추론 수행
     * 일부 라운드에서 웹 검색을 활용했지만, 재시험 결과 검색 없이도 동일한 정답 도출 가능함
     * 평균 추론 시간은 o3가 인간보다 더 오래 걸리지만, 정밀도는 오히려 뛰어난 수준임


AI vs 인간: Geoguessr 대결의 시작

     * 작성자는 Geoguessr Master I 등급 플레이어로, 실제 게임 방식과 유사하게 5개의 라운드를 AI와 대결
     * 각 라운드는 Street View 이미지 2장만 제공되었으며, 메타데이터 없이 위치를 유추
     * 채점은 일반 Geoguessr 방식과 동일하게 라운드당 최대 5,000점, 총 25,000점 만점 기준

라운드별 결과 요약

     * 1라운드(불가리아) : 인간이 근소하게 더 가까운 위치를 맞추며 승리했으나 점수 차는 약 100점 정도에 불과했음
     * 2라운드(오스트리아) : o3가 택시의 도메인 주소를 검색해 실제 도시 이름을 파악, 거의 완벽하게 정답 위치를 맞추며 5,000점에 가까운 점수를 획득함
     * 3라운드(아일랜드) : 둘 다 뛰어난 분석을 보여주었고 o3가 도로선과 석회암 지형 등을 근거로 Burren 지역을 정확히 유추, 근소하게 승리함
     * 4라운드(콜롬비아) : o3가 도로표식, 번호판, 상점 간판, 지형 등을 바탕으로 인간보다 정확하게 유추했으며 웹 검색 없이도 뛰어난 성과를 보임
     * 5라운드(슬로바키아) : 인간이 근소하게 더 가까운 위치를 맞추며 승리했으나 전체 점수 차이는 극복되지 않음

   이처럼 o3는 총 5개 국가를 모두 정확히 식별하고, 두 라운드에서는 인간보다 수백 킬로미터 더 정확히 맞추는 등 높은 정밀도를 보였음.

EXIF 조작 실험: AI는 속지 않았다

     * 테스트를 위해 실제 위치와 무관한 GPS 좌표를 포함한 EXIF 데이터를 삽입한 이미지를 사용했으나, o3는 해당 정보가 실제 이미지 내용과 불일치함을 인지하고 무시
     * EXIF 정보를 텍스트로 제공해도, 사진 속 환경을 근거로 전혀 다른 위치를 정확히 유추
     * AI가 단순히 메타데이터에 의존하는 것이 아니라, 이미지 내용을 심층적으로 분석하고 있다는 점을 입증

인간과 AI의 차이

     * o3는 매 라운드 평균 2~6분의 추론 시간을 소요, 반면 인간 플레이어는 1~2분 이내에 대부분 추측을 완료
     * AI는 때때로 광고판 등 덜 중요한 요소에 시간을 쓰는 반면, 인간은 중요 단서를 빠르게 인식하고 우선순위를 정함
     * 그러나 o3는 도로 표지, 번호판, 건축 양식, 지형, 식생 등 다양한 시각 정보를 정교하게 결합해 높은 정확도를 보임

결론

     * o3는 단순히 EXIF나 검색만 사용하는 속임수가 아닌 진짜 시각적 분석 역량을 기반으로 정답을 도출
     * Geoguessr Master I 등급 이상의 수준에 근접한 플레이를 보여줌
     * 인간은 여전히 속도와 직관에서 우위를 점하지만, 정확도 면에서는 이미 AI가 위협적인 수준
     * 이는 단순한 기술 시연을 넘어, 실제적 활용이 가능한 고성능 시각 AI의 현주소를 보여주는 사례임

        Hacker News 의견

     * ""www.taxilinder.at""라는 스티커가 차량에 붙어 있음. 웹 검색을 통해 Taxi Linder GmbH가 오스트리아의 도른비른에 위치한 것을 알 수 있음
          + 웹 검색을 사용하면 공정하지 않음. 도시 내의 GeoGuessr 라운드에서 몇몇 비즈니스를 검색하여 완벽한 점수를 얻을 수 있지만, 그것이 게임의 목적은 아님
     * 작성자는 사람들이 이 주제를 흥미롭게 여기는 것을 기쁘게 생각함
          + 모든 사람에게 GeoGuessr를 시도해보기를 권장함. 작성자는 이 게임을 사랑함
          + o3 모델이 5라운드 중 2라운드에서 웹 검색을 사용한 것이 불공정하고 결과가 유효하지 않다는 의견이 많음
          + 이를 확인하기 위해 검색을 사용한 두 라운드를 다시 실행하고 결과를 업데이트함
          + 결론: 결과는 거의 동일했음. GPS 좌표를 게시물에서 확인할 수 있음
          + 오스트리아 라운드에서 배경의 산을 기반으로 도시를 식별하는 모델의 예시를 제공함
          + 이미 많은 정보를 가지고 있어 검색이 필요하지 않았음
          + 검색이 유용할 때가 있을 것임. 그러나 이 경우에는 관련이 없었음
     * GeoGuessr에서 마스터 레벨임. 이 레벨은 확실히 무엇을 해야 하는지 알아야 하지만, 제목에서 들리는 것만큼 높지는 않음
          + 마스터는 약 800-1200 ELO이며, 프로는 1900-2000 정도임. 95%의 라운드에서 국가를 바로 알 수 있지만, 러시아나 브라질에서는 정보가 없으면 위치를 알 수 없음. 스크립터는 나를 이길 수 있음
     * o3가 이미지 데이터를 포함한 다중 모달 데이터로 훈련되었다고 이해함. 훈련 데이터에 정확한 위치와 특징의 이미지가 포함되어 있다고 가정하는 것이 비합리적이지 않음
          + GeoGuesser는 Google Maps를 사용하며, Google Maps는 대부분의 이미지를 제3자로부터 구매함. 그 제3자가 모든 대형 AI 회사에 판매하지 않는다면 매우 놀라울 것임
     * GeoGuessr를 제외하고, 이 기술이 언젠가 아이들을 구하는 데 도움이 되기를 희망함. 예를 들어 FBI의 ECAP에 도움을 줄 수 있음
     * 이전 게시물에서의 댓글:
          + 위치 추측이 무섭도록 정확할 수 있는 영역이 있을 것임. 예를 들어, 백업 추측으로 정확한 마을을 맞춘 기사처럼
          + 그러나 생각의 흐름을 보면, 정확도가 떨어질 많은 영역이 있을 것임. 캔자스의 트레일러 파크 사진을 보여주면 모델이 주만 맞출 수 있을 것임
          + 이 게시물은 큰 샘플 크기는 아니지만, 이러한 모델이 어떻게 작동할지 예상한 바를 반영함. 시각적 정보가 많지 않은 사진에서도 국가를 맞추는 데 신뢰할 수 있었음
          + 이전 기사에서는 한 장의 사진만 테스트했으며, 두 번째 추측으로 정확한 마을을 맞추었고 작성자는 이를 ""무섭도록 정확하다""고 표현함. 이는 판단의 문제임
          + 웹 검색이 활성화된 o3가 GeoGuessr를 높은 수준으로 플레이할 수 있는 것 같음. 이제 o3 GeoGuessr 봇이 여러 경기를 플레이하고 ELO를 확인하고 싶음
     * 이번 주에 o3와 함께 놀아보려고 했고, 흥미롭게도 패턴 매칭을 더 많이 시도함. 예를 들어, 유럽과 미국의 사진을 쉽게 추론할 수 있음
          + 그러나 온라인에 사진이 많지 않은 장소에서는 더 깊이 탐색하지 않고 자신의 데이터베이스/인터넷에서 패턴 매칭을 시도함
          + 예를 들어, 2020년 이후로 자라난 섬의 인기 있는 트레일을 예로 들 수 있음. 처음에는 섬의 바위와 브라질의 식생을 언급했지만, 리우데자네이루의 장소를 찾으려고 함
          + 또 다른 예로는 썰물 때 자연 수영장으로 유명한 해변이 있음. 만조 때 사진을 찍었을 때, 식생과 주를 정확히 잡았지만, 더 인기 있는 장소를 다시 찾으려고 함
     * 놀라움. AI에 대해 긍정적이지만, 여기서는 인간이 이길 것이라고 생각했음. ""그것은 진정한 추론이 아니다""라는 목표 이동을 기대함
     * 개인적으로 덜 인상적인 LLM 응용 프로그램 중 하나라고 생각함. 이미 모든 식물, 도로 표지 등을 알고 있음. 전통적인 신경망도 여기서 잘할 것이라고 상상함
     * OSINT(Bellingcat/Trace an object) 스타일 작업에 게임 체인저가 될 것임. 이미 그런 일이 일어났는지 궁금함
          + GeoGuessr 스타일의 대회가 열릴 수 있으며, 이는 적어도 보조 파일럿으로서 대량 식별에 크게 기여할 수 있음
"
"https://news.hada.io/topic?id=20631","샤오미 MiMo 추론 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             샤오미 MiMo 추론 모델

     * MiMo-7B는 언어 모델의 추론 잠재력을 최대한 발휘하기 위해 개발된 모델 시리즈임
     * 사전 훈련과 사후 훈련 전략을 통해 수학 및 코드 추론 작업에서 뛰어난 성능을 발휘함
     * MiMo-7B는 작은 모델임에도 불구하고 더 큰 모델과 비교할 만한 성능을 보임
     * 오픈 소스로 제공되어 커뮤니티에 기여할 수 있는 가능성을 가짐
     * RL 인프라를 통해 훈련 및 검증 속도를 크게 향상시킴


I. 소개

     * 대부분의 성공적인 강화 학습(RL) 연구는 큰 모델에 의존하며, 작은 모델에서 수학 및 코드 능력을 동시에 향상시키는 것은 어려움
     * MiMo-7B는 추론 작업을 위해 처음부터 훈련된 모델로, 더 큰 모델을 능가하는 추론 잠재력을 보유함
     * MiMo-7B 시리즈는 오픈 소스로 제공되며, 커뮤니티에 강력한 추론 언어 모델을 개발하는 데 기여할 수 있음

🌟 주요 내용

     * 사전 훈련: 추론을 위한 기본 모델
          + 데이터 전처리 파이프라인을 최적화하여 추론 패턴 밀도를 증가시킴
          + 다양한 합성 추론 데이터를 생성하기 위한 여러 전략을 사용함
          + 다중 토큰 예측을 추가적인 훈련 목표로 포함하여 모델 성능을 향상시킴
     * 사후 훈련 레시피: 선구적인 추론 모델
          + 130K의 수학 및 코드 문제를 RL 훈련 데이터로 사용함
          + 테스트 난이도 기반 코드 보상을 도입하여 정책 최적화를 효과적으로 수행함
          + 쉬운 문제에 대한 데이터 재샘플링 전략을 구현하여 정책 업데이트를 안정화함
     * RL 인프라
          + Seamless Rollout Engine을 개발하여 RL 훈련 및 검증을 가속화함
          + MTP를 vLLM에서 지원하고, RL 시스템의 추론 엔진의 견고성을 강화함

II. 모델 세부 사항

     * MiMo-7B 시리즈는 다양한 모델 체크포인트를 제공하며, HuggingFace에서 다운로드 가능함

III. 평가 결과

     * MiMo-7B-RL은 수학 및 코드 추론 작업에서 우수한 성능을 보임
     * 다양한 벤치마크에서 경쟁력 있는 결과를 달성함

IV. 배포

     * vLLM 및 HuggingFace를 통한 추론 지원
     * 권장 환경 및 프롬프트 사용을 통해 최적의 성능을 발휘할 수 있음

V. 인용

     * MiMo-7B에 대한 인용 정보 제공

VI. 연락처

     * 문의 사항은 mimo@xiaomi.com으로 연락하거나 GitHub 이슈를 통해 문의 가능함

        Hacker News 의견

     * 논문에서 코드 데이터에 대한 강화 학습(RL) 단계 처리 방식이 흥미로웠음. 유닛 테스트를 실행하여 해결 가능한 코드 생성 작업에 대해 훈련함. 다른 모델들도 이 훈련 단계를 수행하는지 궁금함
          + 코드 데이터: 코딩 문제를 위해 오픈 소스 데이터셋과 새로 수집한 문제 세트를 포함하는 고품질 훈련 세트를 큐레이션함. 테스트 케이스가 없는 문제는 제거함. 골든 솔루션이 있는 문제 중 모든 테스트 케이스를 통과하지 못한 경우는 제외함. 골든 솔루션이 없는 문제는 고급 추론 모델의 16회 롤아웃에서 해결할 수 없는 경우 제외함. 수학 데이터와 유사하게, MiMo-7B의 SFT 버전을 사용하여 모든 16회 롤아웃에서 완벽하게 해결된 쉬운 문제를 필터링함. 이 엄격한 정리 과정으로 30,000개의 코드 문제가 생성됨
          + 각 RL 반복 동안 수천 개의 문제를 평가하여 보상을 계산함. 각 문제는 수백 개의 테스트 케이스를 포함할 수 있음. 보상 계산 효율성을 높이고 GPU 유휴 시간을 제거하기 위해, 매우 높은 볼륨의 유닛 테스트를 병렬로 실행할 수 있는 온라인 판사 환경을 개발함
     * 중국에서 영어 우선 AI 모델이 많은 이유는 무엇인지 궁금함. 자국 인구에 관심이 없는 것인지, 아니면 중국어 우선 모델을 발표하면 서구에서 주목받지 못할 것이라고 생각하는 것인지 궁금함
     * 7B 모델의 코딩 성능이 매우 강력함. Gemini Pro 2.5를 사용 중이며 67.8점을 얻었고, 이 모델은 57.8점을 얻어 Gemini 2.5 Flash의 60.6점에 매우 근접함
          + llama4에 대해 들은 것 때문에 평가 결과에 대해 회의적이 되었지만, 폐쇄형 평가에서 어디에 위치할지 지켜볼 것임. 그러나 매우 인상적임
     * MiMo-7B는 Qwen-32B와 같은 더 큰 모델을 능가하고 OpenAI o1-mini와 수학/코드 벤치마크에서 동등한 성능을 주장함. 이는 사전 훈련 + RLHF 최적화가 규모를 능가하기 시작한 신호인지, 아니면 좁은 기능을 벤치마킹하는 데 더 능숙해진 것인지 궁금함
     * O3와 같은 최고 성능 모델을 생략한 벤치마크를 보는 것이 재미있음. 현재 많은 벤치마크에서 최고의 모델임. Gemini Pro/Claude 3.7도 있음
     * ollama에서 gguf 파일을 사용할 때, 보통 새로운 모델과 함께 사용할 modelfile을 생성하는지, 아니면 기본 ollama가 새로운 모델과 작동하기를 바라는지 궁금함
     * README에 ""RL""이라고만 적혀 있고 어떤 종류의 RL이 사용되는지 명시되지 않음. 연구자들에게: 바쁘신 건 알지만, 이런 세부 사항을 생략하지 말아주길 바람
     * 조금 테스트해봤는데 전반적으로 꽤 견고함. 긴 생각 시간 때문에 기다려야 하는 시간이 꽤 길지만, 최근의 qwen moe와 같은 더 큰 모델보다 더 긴 시간이 걸림
          + moe가 전반적으로 더 나은 절충안으로 보임
     * 이 모델을 Xiaomi 15 시리즈 폰의 AI 어시스턴트로 사용할지 궁금함. 아마도 사용할 것 같음. 기대할 것이 무엇인지 확신이 서지 않음
     * 와우. 훌륭한 벤치마크임. 이 모델과 대화하는 것이 기대됨
          + 몇 가지 눈에 띄는 점이 있음. 첫째, 7B 모델이 25T 토큰으로 훈련되었음(!). 이는 Meta 규모의 훈련임. Llama 4 Maverick은 약 22T로 훈련되었음. (Scout, 더 작은 모델: 40T)
          + 둘째, 다른 모델에서 추론을 얻기 위한 증류 모델이나 RL 레이어가 아닌, 처음부터 추론이 내장된 RL 모델로 가는 흥미로운 경로임. 이 방법으로 매개변수당 많은 추가 효율성을 얻을 수 있다는 주장임
          + Xiaomi 모델에 대한 경험이 없어 이 모델에 대해 조심스럽지만, 통계적으로 매우 유망한 로컬 추론 모델로 보임
"
"https://news.hada.io/topic?id=20567","민주주의를 재구성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              민주주의를 재구성하기

    1. 본문 요약: ""Reimagining Democracy""

     * 문제 제기: 오늘날 민주주의는 18세기 기술 한계에 맞춰 만들어졌으며, 지금은 새롭게 재설계할 필요가 있음.
     * 핵심 질문: 현재처럼 지역구에 따라 대표를 뽑는 방식이 여전히 최선인가? 연령, 생일 등 다른 기준도 가능하다. 임기나 투표 방법도 재고할 수 있다.
     * 워크숍 진행: 다양한 분야 전문가들과 3년간 토론했으며, AI, 자본주의, 권력 집중 문제 등을 논의함.
     * AI의 역할: 교통신호 최적화는 물론, 앞으로 이자율 설정, 세금 결정, 법안 작성까지 AI에 맡길 수 있는지 고민.
     * 규모 문제: 현대 정부 크기는 과거 기술에 맞춘 결과. 오늘날 문제는 지역적이거나 글로벌하다. 따라서 '국가 단위'는 필요 없을 수도 있음.
     * 다른 민주주의 형태:
          + 추첨제: 무작위로 시민을 뽑아 정책 결정 참여.
          + 액체 민주주의: 위임 가능한 투표 방식, 자유롭게 대표를 바꿀 수 있음.
     * 참여와 권리: 미래 세대, 비인간 존재(생태계)에도 '목소리'를 줄 수 있을지 논의.
     * 민주주의의 한계: 민주주의라 해도 다수결로 모든 것을 결정할 수는 없음. 개인 권리와 공동체 권리 간 균형 필요.
     * 가장 큰 관심사: 시스템이 소수 이익을 위해 해킹되는 것 방지 필요. 특히 AI 시대에는 더 치명적일 수 있음.

     결론: 이런 논의는 실현 가능성보다 미래를 내다보는 사고 실험으로 중요하다. 급진적 사고 없이는 현 체계의 한계를 넘을 수 없다.


    2. 댓글 요약

     * ResearcherZero: 현 시스템은 지역 대표제가 제대로 작동하지 않으며, 지역사회는 소외되고 있다. 스칸디나비아 모델처럼 더 밀착된 공동체 참여가 필요하다.
     * Beatrix Willius: 독일에서도 지역 참여가 있지만 변화는 미미하다. '불신임 투표' 같은 현대적 제도가 필요하다고 제안.
     * Tristram Brelstaff: 억만장자는 민주주의에 해악이 된다. 독점처럼 규제해야 한다고 주장.
     * Slow Wanderer: 권력 집중은 위험하다. 권력 구조는 최대한 짧고 제한적으로 해야 한다고 제안.
     * Carl: 미국은 '공화국'이지 '민주주의'가 아니라고 주장. 현재 정치 구조를 강하게 비판.
     * Rontea: 여러 사용자에게 답변하며 인간 본성, 역사, 시스템 개혁 등에 대해 철학적 성찰을 전개.
     * Clive Robinson: 대표제 민주주의를 '속임수'라고 비판. 진정한 민주주의가 아니다라고 주장.
     * pattimichelle, Dave 등: 시스템 내 '단일 실패 지점(예: 대통령제)' 위험성과 헌법 개정 필요성 강조.
     * Marije van den Berg: 상향식(community-based) 민주주의를 강화해야 한다고 제안. 복잡성을 해결하려면 중앙 집중이 아니라 분산화가 답이라고 주장.


   전체 번역 및 댓글 번역은 아래와 같습니다.
   https://chatgpt.com/share/680ed0be-6dc8-800b-815c-6e3a65452632
"
"https://news.hada.io/topic?id=20579","기술 스타트업에서 비즈니스 담당 공동 창업자는 생각보다 가치가 낮다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 기술 스타트업에서 비즈니스 담당 공동 창업자는 생각보다 가치가 낮다

     * 스타트업 커뮤니티에서 비기술 사업 창업자들이 기술 공동 창업자를 찾지 못하는 이유
     * 아이디어만으로는 창업 기여도가 낮으며, 실행력과 제품 개발이 진짜 가치를 만듦
     * 기술 인재들은 상호 존중 없는 ""보스"" 타입 사업가를 꺼리며, 단순 아이디어 제공자는 매력적이지 않음
     * 비기술 창업자가 인정받기 위해서는 고객 확보 능력이나 시장 검증 실적을 입증해야 함
     * 결국, 네트워크 구축과 비즈니스 추진력이 진짜 자산임


서론: 비기술 사업 창업자의 현실

     * 스타트업 커뮤니티에서 자주 만나는 유형은 기술 공동 창업자 없이 고군분투하는 비기술 사업가임
     * 많은 경우, 이들은 기술 파트너를 찾지 못해 절망과 좌절을 경험하는 패턴을 반복함
     * 이유는 간단함. 이들은 자신이 생각하는 것만큼 가치가 높지 않음

Skewed Lenses = Bad Vision

     * 성공적인 사업 경험 없이 과도한 자만심을 가진 사업가가 문제를 일으킴
     * 자신을 스티브 잡스처럼 착각하며 팀원들과 대등한 파트너십을 맺지 못함
     * 이런 태도는 유능한 기술 인재를 끌어들이기 어렵게 만듦

  The Alpha

     * 일부 비기술 창업자는 관계를 지배하려 들며, 협력자가 아닌 보스가 되려 함
     * 기술 인재는 스트레스가 심한 창업 환경에서 추가로 ""보스""를 상대하고 싶어하지 않음
     * 강한 의지는 중요하지만, 섬세한 적용이 필요함

  Misplaced Value

     * 사업 아이디어 자체는 그리 큰 가치가 없으며, 실제 실행력이 진짜 가치를 만듦
     * 기술 공동 창업자가 아이디어를 구현하는 과정이 훨씬 더 중요함
     * 초기 스타트업에서는 제품을 만드는 것과 고객과 대화하는 것이 핵심임

So… What Do You Do?

     * 비기술 창업자는 기술 창업자가 약한 부분인 고객 확보를 맡아야 함
     * 단순히 ""나는 영업을 잘한다""고 말하는 것을 넘어, 구체적인 실적을 입증해야 함
     * 실적 기준:
          + B2C 사업: 1,000명 이상의 대기자 명단 확보
          + B2B 사업: 20건 이상의 LOI(구매의향서) 확보
     * 이로써 시장성 검증과 가치 제안 설득력을 증명할 수 있음

  Validating the Idea

     * 제품 없이도 시장 검증은 가능하며, 오히려 그게 더 안전한 접근법임
     * 초기에는 코딩보다 광고 문구, 랜딩 페이지, 콜드 이메일로 시장 반응을 테스트하는 것이 훨씬 효율적임
     * 관계 구축과 시장 접근성을 갖춘 사업가는 큰 가치를 제공할 수 있음

Your Network Is Your Net Worth

     * 비기술 창업자의 진정한 가치는 비즈니스 추진력에 있음
     * 최고의 비기술 창업자는 고객 또는 투자자 네트워크를 빠르게 구축하고 성장시킬 수 있는 사람임
     * 고객 확보 능력이 가장 중요하지만, 때로는 탁월한 자금 조달 능력도 필요함
     * 예시: Sam Altman은 23세에 폴 그레이엄에게 최고의 펀드레이저로 인정받았으며, 현재 OpenAI를 이끄는 데 큰 도움이 됨
     * 따라서, 구체적이고 반응성 있는 네트워크를 구축하는 것이 최고의 경쟁력이 됨
     * 결국, 진짜 실행력 있는 창업자가 되어야 함

     * 공동창업은 해롭습니다
     * 당신이 기술 코파운더를 찾을 수 없는 이유
     * 당신이 바로, 당신이 찾던 기술 코파운더에요
     * Ask HN: 내가 공동창업한 회사를 떠나야 할까요?
     * 스타트업 성공 전략의 80%는 실수를 피하는 것

        Hacker News 의견

     * 최근에 비기술 파트너(MBA 아이디어 담당자)와의 스타트업을 포기했음. 그는 80/20의 지분 분할을 원했으며, 나는 50/50을 제안했음. 3개월 동안 아이디어를 다듬고 프로토타입을 구축한 후의 일이었음. 가능한 한 빨리 사업 공동 창업자와 이 문제를 논의하는 것이 시간을 낭비하지 않는 방법임. 기술 창업자의 가치를 심각하게 과소평가하는 사업가들을 주의해야 함. 모든 사업가가 그런 것은 아니지만, 불균형한 지분 분할은 경고 신호임
     * 전혀 동의하지 않음. ""기술자를 찾는 사업가가 더 많다""는 전제에도 동의하지 않음. 사업가와 기술자는 많고, 대부분은 모임에서 만났을 때 잘 모름. 가치 있는 사업 공동 창업자는 광범위한 도메인 전문 지식, 인맥, 판매 기술, 관리 기술, 자금 조달 능력을 가져옴. 사업 측과 기술 측 중 누가 더 가치 있는지를 논하는 것은 의미가 없음. 둘 다 중요함. 이 글은 ""사업 측""을 ""아이디어를 가진 사람""으로 동일시하지만, 이는 허수아비 논리임. 아이디어가 있다고 해서 사업 공동 창업자가 되는 것은 아님. 사업 공동 창업자는 사업 측면에서 경험과 재능을 가져야 함. 좋은 사업 공동 창업자는 좋은 기술자를 찾는 데 어려움이 없음
     * 거의 모든 사람이 자신이 생각하는 것보다 덜 가치 있음. 두 번의 스타트업을 부트스트랩하고 판매했으며, 첫 번째는 5명의 공동 창업자와, 두 번째는 3명과 함께 했음. 많은 것을 배웠고, 당연히 실수도 있었음. 공동 창업자들이 완벽했는가? 절대 아님. 하지만 우리는 모두 강점이 있고, 함께 있는 것이 더 나음. 친구와 사업을 시작하는 것은 피해야 함. 사업 파트너는 우선 사업 파트너이고, 친구는 두 번째임
     * 지난 여름, 두 명의 공동 창업자를 만나 창업자로서의 도전을 시작했음. 나는 공동 창업자들 간의 동등한 지분 분할을 원했지만, 그들은 40/40/20으로 나누기를 원했음. 그 20은 내가 유일한 기술 창업자로서 전체 제품을 구축하는 것이었음. 그래서 떠났음
     * 공동 창업자 간의 명확한 분리를 원하지 않음. 그들은 기술이 겹치고 다학문적이어야 함. 고객과 대화할 수 없는 기술 창업자나 회사가 만드는 것과 파는 것을 이해하지 못하는 사업가는 성공의 좋은 조합이 아님. CTO로서 고객과 대화하는 것이 중요하다는 것을 배웠음. 직접적인 소통 라인이 있으면 거래를 성사시키기 쉬워짐. 고객의 필요와 기대를 배우는 것이 중요함. 사업가가 제품과 연결되지 않으면 유용하지 않음
     * 이상적인 사업 공동 창업자는 배포와 제품 피드백을 이끌어내는 데 강해야 함. ""MBA 유형""과 전 McKinsey 컨설턴트는 잘못된 경우가 많음. 초기 스타트업 창업자로서 시장에서 수요가 가장 높은 곳을 식별하고 그 수요를 돈으로 전환하는 것이 중요함. 최고의 사업 공동 창업자는 전직 영업사원, 수요 창출 마케터, 제품 관리자임
     * 사업은 수요, 경쟁, 규모, 운영 비용 등 여러 요인에 의존함. 기술 창업자는 미래 성공에 큰 영향을 미칠 수 있지만, 마케팅, 고객 확보, 판매, 네트워킹, 자금 조달 등은 비기술 파트너가 부담하는 경우가 많음. 기술은 성공적인 사업을 위한 수단일 뿐이며, 단순히 구축하는 것이 실행의 전부가 아님
     * 신뢰할 수 있는 사업 공동 창업자를 찾는 방법에 대해 궁금했음. 사업 공동 창업자가 기여할 수 있는 최고의 가치는 관계 구축임. 기술 공동 창업자는 회사 소유의 IP로 기여를 인식할 수 있음. 사업가는 기술 기여를 상품화된 기술로 인식할 수 있음. 기술 공동 창업자는 사업 공동 창업자의 성격과 헌신에 많은 신뢰가 필요함
     * 첫 번째와 두 번째 스타트업은 매우 기술적인 사람들이 있었고, HR, BizDev/Sales 등 ""전문 직종""이 없었음. 세 번째 스타트업에 임원으로 합류했을 때도 HR과 Sales가 없었음. Sales를 추가하고 나서 변화를 경험했음. 최고의 기술 팀이 있어도 Sales와 독성 문화가 없으면 성장이나 현금 부족이 발생할 수 있음. 성공적인 사업은 기술과 사업의 균형이 필요함
     * 성공적인 사업의 가장 중요한 특성은 실행 능력, 추진력, 집중력, 적응력, 팀 관리 능력임. 이상적인 팀에서는 사업 창업자가 기술 측면을 잘 이해하고, 기술 창업자가 사업과 마케팅 측면을 잘 이해해야 함. 제품은 판매 없이는 아무것도 아니고, 판매는 제품 없이는 아무것도 아님. 기술이 복잡할수록 기술 파트너의 지분이 높아야 하고, 사업 도메인 지식이 필요할수록 사업 파트너의 지분이 높아야 함
"
"https://news.hada.io/topic?id=20553",""당시에는 재미있어 보였던 책 'Crap Towns' 저술"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ""당시에는 재미있어 보였던 책 'Crap Towns' 저술""

     * Crap Towns라는 책은 영국의 최악의 장소를 다룬 책으로, 2003년에 출판되었음
     * 이 책은 당시 영국의 사회적 문제를 유머로 풀어내며 큰 인기를 끌었음
     * 그러나 오늘날에는 이러한 책을 출판하기 어려운 사회적 분위기가 형성되었음
     * 유머에 대한 사회적 인식 변화와 정체성 정치가 이러한 변화를 초래했음
     * 저자는 과거의 유머가 현재에도 유효한지에 대해 고민하고 있음


그 농담은 더 이상 재미있지 않음

    Crap Towns의 배경

     * Crap Towns는 영국의 최악의 장소를 다룬 책 시리즈로, 2003년에 출판되었음
     * 이 책은 웹사이트를 통해 사람들로부터 추천받은 장소들을 조사하여 작성되었음
     * 당시 영국의 사회적 문제를 유머로 풀어내며 큰 인기를 끌었음

    현대 사회에서의 출판 가능성

     * 오늘날에는 Crap Towns와 같은 책을 출판하기 어려운 사회적 분위기가 형성되었음
     * 정체성 정치와 관련된 논란이 이러한 변화를 초래했음
     * 유머에 대한 사회적 인식 변화가 출판 산업에 영향을 미치고 있음

    유머의 중요성

     * 유머는 사회적 문제를 지적하고 변화를 촉구하는 데 중요한 역할을 함
     * 그러나 현대 사회에서는 유머가 오해를 불러일으킬 수 있음
     * 저자는 과거의 유머가 현재에도 유효한지에 대해 고민하고 있음

    Crap Towns의 영향

     * Crap Towns는 당시 영국 사회에 큰 영향을 미쳤음
     * 그러나 책이 출판된 이후 영국의 사회적 문제는 여전히 해결되지 않았음
     * 저자는 Crap Towns가 사회적 문제를 해결하는 데 기여하지 못한 점을 아쉬워함

    대안적 접근

     * Crap Towns와 유사한 웹사이트가 여전히 존재하지만, 저자는 이러한 사이트의 접근 방식에 회의적임
     * 현대 사회에서는 과거의 유머가 더 이상 유효하지 않을 수 있음
     * 저자는 사회적 변화에 따라 유머의 역할이 달라져야 한다고 생각함

        Hacker News 의견

     * 작가가 이 글을 통해 많은 트래픽을 얻었음을 언급하며 감사의 인사를 전함. 원래 글에서 명확한 결론을 내리지 못한 점에 대해 독자들이 이해해주는 것에 감사함. 농담을 나누는 것이 2003년에는 더 쉬웠을 수도 있다는 의견이 흥미로움.
     * 작가는 코미디언이 아니며 출판업계에서 일하고 있음. 출판사들이 긴장하는 것에 대한 자신의 생각을 증명할 수는 없지만, 어느 정도의 통찰력과 본능을 가지고 있음을 희망함.
     * 이 책이 오늘날 출판되지 않거나 덜 인기를 끌 것이라는 점은 여러 번 언급되었음. 그러나 작가는 그 이상의 것을 관찰함. 같은 농담이 오늘날에는 재미없게 느껴짐.
     * 오늘날의 세계가 영국의 전통적인 실패를 축하하고, 불평하고, 애정 어린 자기 비하를 뛰어넘는 이유에 대한 질문이 제기됨.
     * 작가는 정부와 지방 자치 단체가 자신의 글을 읽고 행동을 고치지 않았음을 언급하며 웃음을 자아냄. 책이 출판되었을 때의 경험을 공유함.
     * 작가는 사람들이 자신의 지역에 대해 자부심을 느끼고 있으며, 지역 문제에 대한 해결책을 가지고 있음을 배웠다고 언급함. 정부의 지원이 필요함.
     * 20년 전에는 작은 마을의 단조로움에 대해 함께 웃을 수 있었음. 오늘날에는 장소의 운명이 급격히 달라져 공동체 정체성을 잃음.
     * 상류 중산층은 더 유머가 없고 청교도적이 되었으며, 노동 계층은 너무 화가 나서 웃지 않음. 권력을 가진 사람들은 아무것도 하지 않음.
     * ChavTowns라는 웹사이트가 여전히 운영 중이며, 소유자가 사이트를 포기할 예정임.
     * 정치적 올바름에 대한 비판이나 작가를 비난하기 전에 원글의 결말을 읽어보라고 권장함.
     * 작가는 자신의 농담이 더 이상 통하지 않는 이유를 청교도 탓으로 돌릴 수 없음을 인정함. Crap Towns 책이 완전한 성공이 아니었음을 인정함.
     * 작가는 자신의 농담이 사람들에게 소외감, 지루함, 절망감을 더했을 수도 있음을 걱정함.
     * 개인적인 자기 비하 유머가 자신의 불행에 기여했음을 깨달음.
     * 농담을 만드는 사람과 외부에서 보는 사람의 관점이 다름. 이는 유머 콘텐츠 제작자들이 종종 배우는 어려운 교훈임.
     * 작가는 ""Crap Towns, 20 Year Update""를 출판하고 변화된 점을 묻는 것을 시도해보라고 제안함.
     * 시간이 지남에 따라 사람들은 서로를 해치는 무기를 바꿈. 정치적 올바름은 해를 끼치려는 의도와 해를 끼치지 않으려는 의도를 명확히 구분하려는 것임.
     * 지난 몇 십 년 동안 강조된 것은 성공에 대한 책임이 개인에게 있다는 생각임. Alain de Botton의 ""Status Anxiety""에서 이 아이디어가 철저히 탐구됨.
"
"https://news.hada.io/topic?id=20600","Moose - ClickHouse로 분석용 백엔드를 만드는 오픈소스 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Moose - ClickHouse로 분석용 백엔드를 만드는 오픈소스 프레임워크

     * 기존 데이터 백엔드 개발의 복잡성과 느린 속도를 해결, TypeScript나 Python으로 데이터 분석 백엔드를 빠르게 개발할 수 있게 해주는 오픈소스 프레임워크
     * 기본 제공 스택(ClickHouse, Redpanda, Temporal)과 향후 다양한 클라우드 플랫폼 확장 예정
     * 로컬 개발을 단순화하여 빠른 테스트와 즉각적인 핫 리로드를 지원
     * 다양한 데이터 집약적 애플리케이션 구축에 적합하며, 실시간 분석, 데이터 이관, 이벤트 스트리밍 등에 활용 가능함

Moose

     * Moose는 TypeScript 또는 Python 코드만으로 데이터 분석 백엔드를 구축할 수 있게 해주는 프레임워크임
     * 기존 데이터 백엔드 개발 툴링이 느리고 복잡한 문제를 해결하기 위해 존재함
     * 오늘날 툴링으로 분석 백엔드를 구축하는 데 걸리는 문제
          + 툴 분산 문제
            Kafka, ClickHouse, Postgres, dbt, Airflow 등 수많은 서비스 통합에 시간을 소모하게 됨
          + 스키마 불일치 문제
            코드 모델, 데이터베이스 스키마, API 검증, 메시지 포맷이 시간이 지나며 불일치하게 됨
          + 개발 워크플로우의 어려움
            로컬 테스트 부재, 긴 배포 주기, 잦은 컨텍스트 전환으로 개발 생산성 저하 발생
          + SQL 전용 처리
            익숙한 프로그래밍 언어 대신 SQL만 사용해야 하는 불편함 존재
     * 직접 구축하는 경우 발생하는 문제
          + 단순한 필드 추가에도 다음 작업을 모두 수작업으로 처리해야 함
               o TypeScript/Python 코드 모델 수정
               o 데이터베이스 스키마 수정
               o Kafka 토픽 업데이트
               o 런타임 검증 업데이트
               o 변환 및 쿼리 업데이트
          + 매번 모든 변경을 안전하게 테스트하는 데 많은 시간과 노력이 필요함

Moose의 해결 방식

     * Moose가 제공하는 것
          + TypeScript나 Python 코드 자체가 데이터 애플리케이션 로직과 인프라의 단일 소스 역할을 함
          + 코드 기반으로 다음을 보장함
               o 완전한 타입 안전성과 검증
               o 보일러플레이트 코드 제거
               o 개발 단계에서 오류 사전 발견
     * 컨텍스트 전환 제거
          + 데이터베이스 테이블 명명 규칙, 모델/테이블 필드 동기화 여부, 필드 Nullable 여부 등을 고민할 필요 없음
     * 로컬 개발
          + 원클릭 실행
            단 하나의 명령어로 전체 데이터 인프라를 로컬에 실행 가능함
          + 제로 설정
            모든 컴포넌트가 미리 구성되어 있어 별도 세팅 불필요함
          + 프로덕션 환경과 동일한 구조
            실제 배포 환경과 동일한 기술 스택 사용
          + 실시간 피드백
            변경 사항이 스택 전체에 즉시 반영됨
     * 일반적인 개발 워크플로우
          + 모델 추가나 변경 시 저장하면 로컬 인프라에 즉시 핫 리로드됨
          + 새로운 필드를 추가하면 API, 스트림, 데이터베이스에 즉시 적용됨
          + 파이프라인 테스트도 로컬 인제스트 API로 샘플 데이터를 전송해 바로 확인 가능함
     * 핫 리로딩 워크플로우
          + 모델 수정 후 저장만 하면 변경 사항이 자동 반영됨
          + 추가된 필드는 API 검증, 데이터베이스 스키마, 스트림에 자동 적용됨
     * 모듈성
          + 필요한 컴포넌트만 선택하여 구성할 수 있음

기본 제공하는 Moose 스택

     * ClickHouse
       기본 활성화된 OLAP 데이터베이스
     * Redpanda
       Kafka 호환 이벤트 스트리밍 플랫폼 (비활성화 가능)
     * Temporal
       워크플로 오케스트레이션 툴 (비활성화 가능)
     * 계획 중인 확장
          + Snowflake, Databricks, BigQuery
            클라우드 데이터 웨어하우스 지원 예정
          + Kafka, Kinesis, Pulsar
            다양한 Kafka 호환 이벤트 스트리밍 플랫폼 지원 예정

Moose로 구축할 수 있는 것들

     * 사용자용 실시간 분석
       리더보드, 차트, 메트릭 등을 웹/모바일 앱에 통합
     * BI 및 데이터 웨어하우스
       다양한 데이터 소스를 수집하여 분석 데이터베이스 구축 및 리포트 생성
     * 데이터 마이그레이션
       레거시 시스템에서 최신 데이터 백엔드로 데이터 이동
     * 이벤트 스트리밍
       Kafka, Redpanda 등의 스트리밍 플랫폼에서 이벤트 실시간 처리
     * ETL 작업
       다양한 소스의 데이터를 정기적으로 수집하고 분석 환경에 적재
"
"https://news.hada.io/topic?id=20570","OpenAI의 에이전트 구축을 위한 실용 가이드 [32p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  OpenAI의 에이전트 구축을 위한 실용 가이드 [32p PDF]

     * LLM 기반 에이전트(agent) 를 처음 개발하는 제품 및 엔지니어링 팀을 위한 실용적인 가이드
     * 에이전트는 기존 자동화 시스템과 달리 복잡하고 모호한 상황에서도 스스로 판단하고 조치하는 시스템
     * 단일 에이전트 시스템부터 다중 에이전트 오케스트레이션까지 다양한 설계 패턴을 설명함
     * 신뢰성과 안전성을 위해 가드레일(guardrail) 설정 및 사람 개입(human intervention) 전략을 강조함
     * 초기에는 작은 범위에서 시작하여 사용자 피드백을 기반으로 점진적으로 확장하는 접근을 권장

에이전트란 무엇인가

     * 에이전트는 사용자를 대신해 작업을 수행하는 시스템임
     * 단순 챗봇이나 감정 분석기처럼 한 번만 응답하는 모델은 에이전트에 해당하지 않음
     * 에이전트는 다음 두 가지 핵심 기능을 가짐
          + 워크플로우 실행 관리 및 의사 결정: 완료 여부 판단, 오류 수정 및 실패 시 사용자에게 제어권 반환
          + 도구(tool) 사용: 외부 시스템과 상호작용하여 데이터를 수집하거나 조치를 취함

에이전트를 언제 구축해야 하는가

     * 전통적 자동화 방식이 실패하거나 유지보수가 어려운 영역에 적합함
     * 적합한 사례
          + 복잡한 의사결정: 고객 환불 승인처럼 섬세한 판단이 필요한 경우
          + 유지보수가 어려운 규칙 기반 시스템: 보안 심사 자동화처럼 규칙이 복잡한 경우
          + 비정형 데이터 처리: 문서 분석, 자연어 이해가 필요한 경우

에이전트 설계의 기본 요소

     * 모델(Model): 추론과 결정을 담당하는 LLM
     * 도구(Tools): 외부 시스템과 상호작용하는 API 함수들
     * 지침(Instructions): 에이전트 행동을 정의하는 명확한 지시사항

  모델 선택 가이드라인

     * 가장 성능 좋은 모델로 프로토타입 개발 → 이후 비용·지연시간을 고려하여 작은 모델로 교체 시도
     * 평가 기준(evals) 을 설정하고 정확도를 검증한 후 최적화

  도구 정의 방법

     * 표준화된 방식으로 도구를 설계해 재사용성을 높임
     * 도구 유형
          + 데이터 조회: DB 검색, 문서 읽기, 웹 검색
          + 행동 수행: 이메일 발송, CRM 업데이트
          + 오케스트레이션: 다른 에이전트를 호출하여 작업 분담

  지침 작성 베스트 프랙티스

     * 기존 운영 문서나 정책 문서를 활용하여 명확한 단계별 지시사항 작성
     * 작업을 세분화하여 구체적인 행동(action) 단위로 명시
     * 에러나 예외 상황 처리 방법(엣지 케이스)을 반드시 포함

오케스트레이션 패턴

  단일 에이전트 시스템

     * 하나의 에이전트가 반복 루프(run loop)를 통해 다수 작업을 처리
     * 프롬프트 템플릿을 사용하여 다양한 상황에 대응
     * 복잡도가 관리 가능할 때까지 단일 에이전트로 유지 권장

  다중 에이전트 시스템

    매니저 패턴 (Manager Pattern)

     * 중앙 매니저 에이전트가 여러 전문 에이전트를 도구(tool) 처럼 호출하여 워크플로우를 조율
     * 사용자와의 인터페이스를 일관성 있게 유지

    분산 패턴 (Decentralized Pattern)

     * 에이전트들이 서로 핸드오프(handoff) 하며 제어권을 넘겨줌
     * 특정 전문 분야를 가진 에이전트가 필요한 순간 제어권을 가짐
     * 초기에 단순한 업무 트리아지(triage)에 적합

가드레일(Guardrails)

  목적

     * 데이터 프라이버시 보호 및 시스템 악용 방지
     * 브랜드 일관성 유지 및 부적절한 응답 차단

  주요 유형

     * 관련성 필터링: 주제와 무관한 입력 차단
     * 안전성 필터링: 시스템 탈출(jailbreak) 시도 감지
     * 개인정보 보호(PII) 필터: 민감 정보 노출 차단
     * 모더레이션(Moderation): 폭력, 혐오 발언 차단
     * 도구 리스크 관리: 고위험 도구 호출 시 추가 검증

  구축 전략

     * 데이터 프라이버시와 콘텐츠 안전성을 최우선으로 고려
     * 실사용 중 발견된 신규 위험에 맞춰 지속적으로 추가
     * 보안과 사용자 경험 균형 맞추기

사람 개입(Human-in-the-loop)

     * 에이전트가 실패했을 때나 고위험 작업을 처리할 때 인간에게 제어권 넘기기
     * 대표적 트리거
          + 실패 임계치 초과
          + 민감도 높은 작업 요청(환불, 결제 등)

결론

     * 에이전트는 복잡하고 불확실한 상황에서 워크플로우를 자동화할 수 있는 혁신적 시스템임
     * 강력한 모델-도구-지침 체계를 갖추고 점진적으로 오케스트레이션 확장
     * 가드레일과 사람 개입 체계를 필수로 구축해야 안전성과 신뢰성을 확보할 수 있음
     * 작게 시작하여 빠르게 검증하고 점진적으로 기능을 확장하는 것이 성공적인 배포의 핵심임

   https://notebooklm.google.com/notebook/…

   notebooklm 으로 만들어봤습니다.
"
"https://news.hada.io/topic?id=20590","PyXL - Python을 실행하는 하드웨어 프로세서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PyXL - Python을 실행하는 하드웨어 프로세서

     * Python 을 하드웨어에서 직접 실행하는 커스텀 프로세서 로, 인터프리터 나 JIT 없이 동작함
     * PyXL의 GPIO 왕복 시간은 480ns로, MicroPython의 PyBoard보다 30배 빠름
     * Zynq-7000 FPGA에서 실행되며, ARM CPU가 설정과 메모리를 처리함
     * GPIO는 일반 목적 입출력을 의미하며, PyXL은 이를 하드웨어에서 직접 실행하여 VM이나 소프트웨어 스택을 거치지 않음
     * 실시간 제어 시스템, 로봇 공학, 임베디드 산업 시스템 등에서 결정론적이고 일관된 성능을 제공


PyXL 소개

     * PyXL은 Python을 하드웨어에서 직접 실행하는 커스텀 프로세서임
     * 인터프리터나 JIT 없이 실리콘에서 Python 코드를 실행함
     * CPython ByteCode를 커스텀 어셈블리로 변환하여 파이프라인 프로세서에서 실행함

PyXL의 특징

     * C나 인라인 루프가 아님
     * MicroPython이나 JIT가 아님
     * Linux나 운영체제를 실행하지 않음
     * 결정론적이고 속도를 위해 설계된 Python 전용 프로세서임

PyXL의 실행 환경

     * Zynq-7000 FPGA에서 실행되며, Arty-Z7-20 개발 보드 사용
     * PyXL 코어는 100MHz에서 실행됨
     * ARM CPU가 설정과 메모리를 처리하며, Python 코드는 하드웨어에서 직접 실행됨

GPIO란 무엇인가?

     * GPIO는 일반 목적 입출력을 의미하며, 소프트웨어가 LED, 버튼, 센서, 모터 등을 제어할 수 있게 함
     * MicroPython에서는 Python 코드가 C 함수와 상호작용하여 하드웨어 레지스터를 처리함
     * PyXL은 Python 바이트코드를 하드웨어에서 직접 실행하여 인터프리터나 함수 호출 없이 네이티브 하드웨어에서 실행함

GPIO 테스트

     * Arty 보드의 두 핀을 점퍼 케이블로 연결하여 테스트함
     * Python 프로그램을 작성하여 GPIO 핀1이 1로 설정된 후 다른 핀에서 1이 측정될 때까지의 시간을 측정함
     * PyXL과 PyBoard의 MicroPython VM을 비교하는 비디오를 통해 성능 차이를 확인함

PyXL의 프로그램 구조

     * Python 프로그램은 CPython Bytecode로 컴파일된 후 PyXL 어셈블리로 변환됨
     * 바이너리가 생성되어 네트워크를 통해 Arty 보드로 전송됨
     * ARM CPU가 애플리케이션을 받아 PyXL 하드웨어와 공유 메모리에 복사하고 실행함

플랫폼 비교

     * GPIO 왕복 지연 시간: PyXL은 480ns, **MicroPython (PyBoard)**는 14,741ns
     * PyXL은 PyBoard보다 30배 빠르며, 클럭 속도를 정규화하면 50배 빠름

PyXL의 장점

     * Python VM은 소프트웨어 인터프리터를 기반으로 하여 오버헤드와 복잡성을 초래함
     * PyXL은 이러한 장벽을 제거하여 Python 코드를 하드웨어에서 직접 실행함
     * GPIO 접근은 물리적이며, 제어 흐름은 예측 가능하고 일관된 성능을 제공함

PyXL의 응용 분야

     * 실시간 제어 시스템에서 순수 Python으로 구현 가능
     * ML 추론 및 센서 응답 루프에서 엄격한 시간 제한을 충족함
     * 로봇 공학에서 모터 피드백 및 센서 융합을 사이클 수준의 정밀도로 처리함
     * 임베디드 산업 시스템에서 타이밍과 신뢰성이 중요한 경우에 적합함

   버전 변경에는 어떻게 대처하나요?

   HiL 엔지니어들에게 어쩌면 좋은 소식이 될 수 있겠네요.

   오 신기하네요

   너무기대가되네요

   본 프로젝트 개발자가 이번 PyCon US에서 해당 내용으로 발표를 합니다. 올초에 프로포절 리뷰할 때도 리뷰어들 사이에서 꽤 많은 화제가 되었는데 그에 비해 발표 소개 내용이 너무 소박하네요. 파이콘 가시는 분들은 꼭 한번 들어보시기를 추천합니다.

   https://us.pycon.org/2025/schedule/presentation/40/

        Hacker News 의견

     * 어떤 코드가 실행될 수 있는지에 대한 제한이 있는지 궁금함. 메모리 제한이나 OS 상호작용을 제외하고. 동적 언어의 런타임을 목표로 하는 바이트코드를 맞춤형 프로세서로 만드는 아이디어가 최근에 충분히 탐구되지 않았다고 생각함. 왜 이 방향을 선택했는지, 왜 좋은 아이디어였는지, 그리고 구현 과정에 대해 알고 싶음
     * 전통적인 VM이나 인터프리터 없이 Python 프로그램을 직접 실행하는 하드웨어 프로세서를 구축했음. 초기 벤치마크: GPIO 왕복 시간이 480ns로 MicroPython보다 30배 빠름
     * 매우 멋진 작업임. 최종 기능 세트가 맞춤형 하드웨어를 만드는 것보다 파이썬 문법을 가진 타입 안전 언어를 네이티브로 컴파일하는 것보다 더 클지 궁금함. 백그라운드 가비지 컬렉션은 말처럼 쉽지 않지만, 이미 인상적으로 어려운 작업을 해낸 사람과 이야기하고 있음
     * 왜 Python을 ""컴파일""하는 것이 일상적이지 않은지 궁금함. 인터프리터가 빠른 반복, 호환성 등에 좋다는 것은 이해하지만, Python 세계에서는 컴파일의 이점을 포기하고 ""소스"" 파일을 프로덕션에 덤프하는 것이 왜 받아들여지는 관행인지 궁금함
     * 매우 흥미로움. 근본적인 물리적 한계는 무엇인지 궁금함. 즉, 타이밍 정밀도, 지연 시간 및 지터. PyXL 바이트코드가 입력에 얼마나 빠르게 반응할 수 있는지. ARTIQ라는 유사한 것이 있는데, Python 코드를 '임베디드 수준' 성능으로 실행함. ARTIQ는 양자 물리학 실험실에서 흔히 사용됨. Python 코드와 FPGA가 서로 소통해야 하는데, 이는 기술적으로 어렵고 많은 함정이 있음. PyXL이 사용자에게 더 간단하게 만든다면, 이는 모두에게 큰 이점임
     * C#이 나왔을 때, 누군가가 .Net 바이트코드를 네이티브로 실행하는 프로세서를 만들 것이라고 확신했음. 어떤 HDL을 사용하여 프로세서를 설계했는지 궁금함. 프로세서의 어셈블리 언어를 공유할 수 있는지 궁금함. 기존 프로세서(ARM/x86/RISCV 등)에 대한 바이트코드 컴파일러를 만드는 것과 비교하여 프로세서를 설계하고 Python 바이트코드 컴파일러를 만드는 이점이 무엇인지 궁금함
     * Python 개발자들에게 질문하고 싶음. 이 프로젝트를 보고 인상적이라고 생각하지만, 언어에 대한 외부인으로서 이해가 되지 않음. a) 이전에 Python으로 인해 어려웠던 점, b) Python이 이 작업에 유용한 이유, c) Python 자체에 대한 생각이 궁금함. Python 2와 3, 가상 환경, 각 버전의 라이브러리 등으로 인해 어려움을 겪었음. PHP/Go 개발자로서 관심이 있지만, 이러한 문제로 인해 주저하게 됨
     * 놀라운 작업임. FPGA에서 훌륭한 구현을 볼 때마다 Tabula가 성공하지 못한 것이 아쉬움. 매우 혁신적이고 빠른 FPGA였음
     * ASIC이 Python 전용 마이크로컨트롤러를 실행하고 있으며, Python에 맞춘 마이크로코드를 가지고 있는 것이 맞는지 궁금함. Python 바이트코드를 마이크로코드로 컴파일하는 컴파일러와 지원 인프라가 ASIC에 컴파일된 바이트코드를 전달하는 것인지 궁금함. 재미있음. 맞게 이해했는지 궁금함
"
"https://news.hada.io/topic?id=20602","검색엔진 Kagi로 전환을 시도해보세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         검색엔진 Kagi로 전환을 시도해보세요

     * Google 검색 결과 상단이 광고, AI 요약, 비공식 사이트로 넘쳐나서, 공식 정보에 접근하기 어려워짐
     * Kagi는 광고 없이도 신뢰도 높은 공식 사이트를 상단에 노출해, 검색 효율성과 정확성 면에서 훨씬 뛰어남
     * 과거 DuckDuckGo도 사용했으나, 불충분한 결과로 인해 자주 !g를 써서 결국 Google 검색으로 리디렉션해야 했던 불편함이 있었음
     * 반면 Kagi는 거의 Google로 돌아가야 할 일이 없을 정도로 만족스러운 결과를 제공하며, Bangs 기능도 동일하게 지원
     * Kagi는 유료지만, 마치 광고 없는 고품질 콘텐츠를 제공하던 과거의 HBO처럼, 더 나은 검색 경험을 위한 가치 있는 지불임


Google 검색의 문제와 Kagi의 차별점

     * Aaron Pressman이 27년간 사용하던 구글을 버리고 Kagi로 간 이유

     “travel to UK” 검색 시, 공식 사이트는 AI 요약과 광고 아래 묻혀 있음
     그래서 잘못된 사이트에서 ETA를 신청해 $70을 더 지불한 사례 발생
     * Google 결과 페이지는 광고, AI 요약, 스폰서 사이트가 상단에 쏟아짐
     * 반면, Kagi에서는 영국 정부 공식 사이트가 첫 결과로 노출됨
     * 이러한 반공식 사이트 유도 문제는 여권 갱신, 호텔 예약 등 다양한 영역에서 발생

     “expedited passport renewal” 검색 결과
          + Google: 스폰서 링크와 AI 요약 후에야 공식 페이지 노출
          + Kagi: 첫 결과로 미 국무부 공식 페이지 노출

실제 사례를 통한 신뢰 구축

     * 호텔 예약 시에도 공식 사이트보다 호텔 집계 사이트가 상단에 위치, 수백 달러 손해
     * Google이 명백히 사기를 걸러내는 데는 성공했지만, 신뢰할 수 있는 정보 접근은 어려워짐

Kagi를 선택한 이유는 단순함

     * 광고 없음, 검색 품질이 명확히 더 좋음
     * &udm=14 같은 Google의 클린 검색 파라미터를 써도, 여전히 Kagi 결과가 더 우수
     * 특정 오래된 기사나 문서를 찾을 때, Kagi는 Google보다 훨씬 높은 적중률 보임

DuckDuckGo와의 비교

     * DuckDuckGo 사용 중에도 종종 검색 결과가 부족해 !g로 Google에 검색을 넘기곤 했음
     * Kagi도 Bangs 기능(!g, !a 등) 을 지원하지만, 사용할 필요조차 없을 만큼 자체 결과가 뛰어남
     * 월 400~800회 검색 기준에서도 Google로 돌아간 적은 거의 없음

Kagi는 “검색계의 HBO”

     * 광고 없는 프리미엄 경험 + 콘텐츠 품질까지 뛰어남
     * HBO가 단순히 광고 없는 TV가 아닌, 콘텐츠 자체의 품질로 인정받은 것처럼,
       Kagi는 단순한 광고 제거를 넘어서 더 나은 검색 결과를 제공함
     * 전환의 순간부터 Google을 완전히 대체할 수 있는 경험을 제공

     ""그냥 한번 써보세요. 이유를 금세 알게 될 겁니다.""

   kagi의 검색 품질이 적어도 구글보다 못하지는 않다는 데는 사용자들 대부분 동의하는 것 같은데, 검색엔진에 직접 검색하는 시대가 지나가고, 사용자들이 검색엔진 달린 언어모델로 검색하는 시대가 다가오고 있어서 어떻게 살아남을지 궁금합니다.
   어쩌면 다른 검색엔진과 달리 처음부터 유료니까 비용을 더 들여서 그런 걸 제공하는게 어렵지 않을거 같기도 하고요.

   22년 프라이빗 베타때부터 시작해서 한참 썼었는데 검색결과는 만족합니다만 다른 HN 의견처럼 저도 비용을 정당화하기 힘들었습니다. 1/10 가격이라면 다시 쓸 것 같아요.

        Hacker News 의견

     * ""정치적 중립""이라는 이유로 러시아 회사(Yandex)를 지원하는 것은 변명이 될 수 없음을. 그들이 이를 하지 않았다면 나는 아마도 유료 고객이 되었을 것임. Kagi만큼 신뢰할 수 있는 기능을 가진 다른 서비스는 없음
          + Yandex를 사용하는 이유로 다른 좋은 인덱스가 없다는 점을 들었음. 이는 타당한 주장이나, 나는 러시아에 (간접적으로라도) 돈을 지불하느니 차라리 이미지 검색 품질이 떨어지는 것을 선택할 것임. 그들이 ""어려운 일을"" 하고 자체적으로 만들기를 바람
     * 약 1년 전, 무료 300회 검색 체험을 시도했음. 마음에 들었지만 비용을 감당할 준비가 되지 않았음
          + 올해는 무료 30일 무제한 체험을 제공받아 약 10일째 사용 중임. 지금까지 128회 검색을 사용했음
          + 검색을 사용하고 원하는 것을 찾으면 그만두게 됨. 그래서 크게 신경 쓰지 않음. 하지만 원하는 것을 얻기 위해 검색과 ""싸우는"" 시간이 줄어드는 것이 은근히 상쾌함
          + 객관적으로 비교하여 더 나은지 판단하지 않았음. 그냥 검색이 잘 작동하는 것 같고, 사용 후 넘어감
          + 300회 검색 제한이 마음에 들지 않음. ""이것을 검색해야 하나? 다른 방법으로 찾을 수 있을까? 이 검색에 DuckDuckGo를 사용해야 하나?""라는 생각이 듦. 하지만 연간 $120를 지출하고 싶지 않음. 구독에 알레르기가 있음. 그래도 Disney/Hulu/Max에 연간 $360를 쓸 수 있다면 검색 경험을 업그레이드할 수 있어야 함
     * Kagi는 매우 좋음. 특정 웹사이트의 순위를 사용자 정의할 수 있는 첫 번째 검색 엔진임. 그리고 검색 결과에서 웹사이트를 완전히 차단할 수 있는 기능도 있음
          + 개인적인 검색 테스트를 통과함. ""avi to mp4""를 검색할 때 합리적인 결과를 보여주고, 쓸모없는 페이지가 나오지 않음
          + 유일한 불만은 ""국제"" 검색 모드에서 관련 없는 국가의 쇼핑 웹사이트를 보여주는 것임. 하지만 이것은 고칠 필요가 없다고 생각함. 특히 비영어권 국가에서 Google이 영어 결과를 보여주지 않는 것을 고려할 때
     * ""오늘날 Kagi에 돈을 지불하는 것은 케이블 TV 전성기 때 HBO에 돈을 지불하는 것과 비슷함. 광고 없는 서비스를 위해 지불하는 것이기도 하지만, 눈에 띄게 높은 품질을 위해 지불하는 것임""
          + 이것이 내 경험을 깔끔하게 요약함. Kagi는 사용하기 즐거움
          + 무료로 제공되는 것을 위해 돈을 지불하는 것이 사전에 이해되지 않음. 하지만 경험해보면 럭셔리하게 느껴짐. (생산성과 호기심의 증가를 느끼기 전까지)
     * 내 Kagi 경험은 다른 사람들만큼 긍정적이지 않았음. 검색 결과가 더 좋다고 느끼지 않았고, 아마도 Google에서 적절한 결과를 얻는 데 익숙해져서일 것임. 그래서 Kagi를 모든 곳에서 기본 엔진으로 설정하고 한 달 이상 독점적으로 사용했지만 포기함. 검색 결과의 응답 시간이 너무 길지는 않지만, 하루 종일 모든 쿼리에 대해 무의식적으로 의존했던 Google의 응답 시간과의 차이가 너무 컸음. 광고 차단기와 YouTube Premium을 사용하고 있어서 광고를 거의 보지 않기 때문에 그 가치를 찾지 못했음
          + 검색을 위해 다시 돈을 지불하고 싶지만, 내 마지막 실험(Nov 2024)에서는 Kagi가 나에게 그런 것이 아니었음. 다른 사람들도 이런 경험을 했는지 궁금하고, 아마도 내가 재평가해야 할 것임
     * 오랜 Kagi 사용자로서 가장 그리운 것은 검색 결과에 Google Maps 통합이었음. 레스토랑이나 주소를 검색하고, 결과를 보고, 한 번의 클릭으로 Google Maps를 열어 경로와 주변 명소를 볼 수 있는 것이 좋았음. Google Maps는 특히 Apple Maps(유일한 대안)가 커버리지가 부족한 지역에서 Google의 큰 장벽임
          + 그 사용 사례 외에는 Kagi를 즐겨 사용하며 대부분의 사람들에게 추천함
     * 거의 18개월 동안 Kagi를 사용해 왔음. 그동안 아기가 태어났고, 아기 관련 검색을 많이 했음. 아기가 태어난 후 몇 달이 지나서야 아기 관련 타겟 광고를 받기 시작했음(아마도 Facebook 게시물 때문이라고 확신함). 다른 부모들은 아기가 태어나기 전부터 아기 관련 광고를 계속 보고 있었음
          + Kagi를 좋아하고, 내 개인정보 보호와 우선순위가 일치하는 원칙을 좋아하며, 검색 품질도 좋음. 하지만 이것이 나에게 가치가 있는 이유를 확고히 함
     * 알지 못하는 사람들을 위해, 내용에 대한 논평 없이 - 적어도 나에게 중요한 것임
          + https://d-shoot.net/kagi.html
     * 다년간의 유료 구독자로서 Kagi의 차별성을 나타내는 많은 것 중 하나는 a) 변경 로그가 있다는 것과 b) 변경 로그가 매우 세부적인 작업을 보여준다는 것임
          + https://kagi.com/changelog
     * Kagi를 그들의 원칙만으로 사용하고 싶음. 하지만 여전히 비용을 정당화하기 어려움. 나는 어떤 것에 돈을 지불하는 것에 반대하지 않음. 내가 지불하는 서비스 중 하나는 NextDNS임. 비용이 그 범위에 있다면 나에게는 완전한 선택이 될 것임. 언젠가 규모의 경제가 도달하기를 바람. (단순하게 유지하고, 더 많은 불필요한 것을 추가하지 말 것. 핵심 제품과 아이디어는 금임)
"
"https://news.hada.io/topic?id=20519","Gruen Transfer가 인터넷을 소모하고 있습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Gruen Transfer가 인터넷을 소모하고 있습니다

     * Gruen 전이(Gruen Transfer) 란 소비자가 매장 내 혼란스러운 구조로 인해 원래 의도를 잊고 충동 구매하게 되는 현상을 의미함
     * 이 현상은 이제 인터넷에도 확산되어, 페이스북 뉴스피드, 위키피디아의 링크 루프, UX 다크 패턴 등에서 나타남
     * 웹사이트들은 사용자를 의도적으로 혼란스럽게 만들어, 더 오래 머물게 하거나 원치 않는 행동을 유도함
     * EU는 가입과 해지를 동일한 수준의 복잡도로 제공해야 한다는 법적 기준을 두고 있음
     * 글쓴이는 디지털 복잡성을 규제 대상으로 삼을 수 있다는 아이디어에 공감하며, 오프라인 매장에도 적용되길 바람


Gruen Transfer란 무엇인가?

     * Gruen Transfer는 원래 쇼핑몰이나 슈퍼마켓처럼 실제 매장에서 발생하던 심리적 현상임
     * 고객이 원래 사려던 물건을 찾는 과정에서 혼란을 겪고, 다른 상품을 충동적으로 구매하게 되는 구조
     * ‘Transfer’란 용어는 소비자가 자신의 원래 목적을 잊는 순간을 가리킴

디지털 세계 속의 Gruen 전이

  소셜미디어에서의 예시

     * Facebook은 초기에 친구 업데이트만 보여주는 단순한 피드를 제공했으나,
     * 현재는 광고, 밈, 인플루언서 콘텐츠가 주를 이루며, 사용자가 원래 목적을 상실하고 ‘스크롤 중독’ 에 빠지게 됨
     * 친구 소식은 10% 미만, 나머지는 잡다한 콘텐츠로 채워짐

  다른 웹사이트에서도 발견됨

     * Wikipedia에서 하나의 항목을 검색하다가 관련 링크들을 계속 클릭하며 시간을 잊고 탐색하는 경험도 이에 해당
     * 혼란을 유도하는 사용자 경험(UX) 은 사용자로 하여금 의도하지 않은 행동을 하게 만듦

UX 다크 패턴과의 연결

     * 계정 삭제, 구독 해지, 보험 해약 등의 과정에서 고의적으로 복잡하게 설계된 UI 존재
     * 사용자로 하여금 삭제나 해지 대신 유지하도록 유도
     * 이 또한 디지털 Gruen 전이의 형태로 볼 수 있음

웹 디자인의 '러퍼 곡선' 가능성

     * 지나친 혼란과 복잡성은 사용자 경험을 망치고 서비스 이탈을 초래할 수 있음
     * 마치 세금이 너무 높으면 수익이 줄어드는 ‘Laffer Curve’처럼, 디지털 복잡성에도 최적점을 넘어설 경우 역효과 발생

EU의 규제 접근 방식

     * EU에서는 가입과 해지의 복잡도가 동일해야 한다는 법률 존재
     * 가입은 10초면 가능하지만, 해지는 10단계를 거쳐야 한다면 이는 불법
     * 복잡성을 측정하고 제한하는 기준이 존재한다는 점에서 의미 있음

마무리 생각

     * 글쓴이는 디지털 복잡성에 대한 규제가 오프라인 매장(예: Boots) 에도 적용되길 바람
     * 소비자 경험의 질은 단순하고 직관적인 설계에서 비롯됨
     * 읽어준 독자에게 농담 삼아 맥주 한 잔을 약속하며 글을 마무리함

        Hacker News 의견

     * Amazon의 검색 기능은 매우 형편없음. 잘못된 결과가 검색 결과에 섞여 나옴. 이는 사용자가 관심을 가질 만한 것을 보게 하려는 의도임
          + 서지 보호기를 검색하다가 서지 보호기가 없는 전원 스트립을 잘못 구매한 경험이 있음
          + 네오프렌 반바지를 검색하다가 네오프렌이 아닌 반바지를 잘못 구매한 경험이 있음
          + 자신의 사이즈의 신발을 검색할 때 다른 사이즈의 신발 가격이 표시됨. 이는 매우 우스꽝스러움
          + 결과적으로 Amazon에서 쇼핑을 피하게 됨
          + geizhals.at 같은 사이트는 카테고리별로 수십 개의 속성으로 필터링하여 완벽한 제품을 찾을 수 있게 해줌
     * 이 의견은 많은 예시에서 생각을 자극하고 올바른 사용임. 그러나 Wikipedia의 예시는 의도적이지 않다고 생각되므로 맞지 않음
          + Gruen Transfer에 익숙해져서 Wikipedia에서도 그런 행동을 한다고 주장할 수 있음
          + 과거의 백과사전에서도 Wikipedia를 탐색하는 것과 유사하게 오랜 시간을 보냈던 기억이 있음
          + Wikipedia의 구멍에 대한 가장 좋아하는 설명은 약 10년 전의 트윗으로, ""Meatloaf의 기타리스트의 초기 교육 역사를 읽다가 새벽 2시에 Wikipedia 최면에서 깨어남""이라는 내용임
     * 기사에서 Victor Gruen을 언급하지 않은 것이 이상함. 그는 우리가 아는 실내 쇼핑몰의 창시자로 잘 알려져 있으며, 나중에는 이를 비판하기도 했음
     * 아이러니하게도 나에게는 정반대의 효과를 줌. 이제는 너무 많은 것들이 상호작용하기 어려워서 거의 사용하지 않음. 놀랍게도 잃은 가치가 거의 없음
     * Wikipedia의 예시는 전혀 관련이 없음. 방문 시 혼란스럽게 하려는 디자인이 전혀 없고, 단지 페이지 간 링크가 있는 일반적인 흥미로운 웹사이트임
     * 항상 이를 ""IKEA 미로""라고 부름
          + 최근 코펜하겐 공항을 지나감. 보안 검색 직후 ""모든 게이트 ->""라는 표지판이 메인 ""면세"" 상점을 통과하는 우회로로 안내함. 이는 개인적으로 최저 수준임
     * 새로운 브라우저에서 Stack Exchange 사이트를 처음 방문할 때 ""Hot network questions"" DOM 노드를 uBO 차단 목록에 추가하고, 이를 모든 사이트에 적용하도록 수정함
          + 쿠키 팝업 DOM 노드도 포함됨
     * 이는 아마도 1) 순전히 실용적인 이유로 사용되지 않고, 2) 사용자들이 새로움을 요구하는 시스템에서는 불가피함
          + Facebook 타임라인이 혼란스러울지라도, 진짜 질문은 타임라인을 스크롤하는 본래의 목적이 무엇인지임
          + 대부분의 사용자에게는 ""나는 X를 원한다""는 명확한 경우가 아님. 대신 친구들이 무엇을 하고 있는지 보고 새로운 항목에 의해 즐거움을 얻으려는 것임
          + 이러한 관점에서 타임라인이 이렇게 되는 것은 불가피함
     * Wikipedia의 디자인에는 Gruen Transfer와 유사한 점이 없음
     * 나에게도 이런 일이 자주 발생함
          + 스마트폰을 열고 Instagram을 열고 잠시 스크롤함. 그리고 나서 원래 의도가 단순히 누군가에게 메시지를 보내는 것이었음을 깨달음
          + 현대 UI는 확실히 혼란스러움
"
"https://news.hada.io/topic?id=20546","Cua - AI 에이전트를 위한 오픈소스 도커 컨테이너","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Cua - AI 에이전트를 위한 오픈소스 도커 컨테이너

     * C/ua는 AI 에이전트가 가상머신 환경에서 전체 운영 체제를 제어할 수 있도록 해주는 Docker 스타일의 오픈소스 경량 VM 컨테이너 런타임
     * 애플 가상화 프레임워크를 활용해 애플 실리콘 맥에서 macOS 및 Linux를 최대 97% 네이티브 성능으로 실행 가능
     * 에이전트를 격리된 가상 환경에 배치해 시스템 보안을 유지하면서도 고급 자동화 작업이 가능
          + AI 에이전트에게 시스템 전체를 맡기는 것은 위험함 - LLM이 실수하거나 공격받을 경우 시스템이나 데이터가 손상될 수 있음
     * Computer-Use Interface를 통해 가상 머신 상의 앱, 웹 브라우저, 코드 편집기 등을 AI가 직접 조작할 수 있어 스크린 읽기, 키보드/마우스 조작, 앱 전환, 셀프 디버깅 등 다양한 작업을 인간처럼 수행할 수 있음
     * Tableau, Photoshop, Fusion 360 등 실제 워크플로우 자동화에 사용되고 있음
     * Lume CLI로 가상머신을 관리하고, Computer/Agent 라이브러리로 Python에서 제어 가능함
     * Python 패키지, Gradio UI 통합, 다양한 LLM 연동(OpenAI, Anthropic,..) 등을 지원하며 개발자 친화적인 생태계를 지향함
     * 향후 멀티 VM 오케스트레이션, 윈도우/리눅스 VM 지원, CUA 에이전트를 위한 장기 메모리 기능 개발 예정
"
"https://news.hada.io/topic?id=20598","The One-Person Framework 실전 적용기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    The One-Person Framework 실전 적용기

     * 혼자서 Rails로 전체 서비스를 개발하고 유지보수하며, 연 100만유로 ARR(반복 매출) 을 달성한 1인 개발자의 실전 경험기
     * 초기에는 기초적인 MVP만 가지고 시작했으나, 풀 리라이트와 구조 개선을 거쳐 유지 가능한 구조로 성장시킴
     * 핵심은 Rails의 일관된 철학, 구성요소, 그리고 Turbo Native를 통한 모바일 대응 능력임
     * 전체 트래픽과 사용량을 감당하면서도 월 1,500유로 이하 서버비용으로 운영할 수 있었던 효율적 구조
     * 최종적으로는 장기지향적 투자자에게 일부 지분을 매각하고, 14년 만에 두 번째 개발자를 채용하여 새로운 국면을 맞이함


The One-Person Framework 실전 적용기

  Rails 하나로 100만 유로 ARR 달성

     * 2022년 초, PlanGo는 연간 반복 매출(ARR) 100만 유로를 돌파했으며, 이는 단일 Rails 코드베이스와 한 명의 개발자로 이루어진 서비스에겐 꿈 같은 성취였음
     * 기술 이외의 모든 영역—비전 수립, 고객 유치, 성장 전략—은 공동창업자와 고객지원팀이 맡았지만, 아키텍처 설계부터 배포, 운영, 프론트/백엔드 구현까지 전부 혼자 수행
     * DHH가 주장한 “One Person Framework”, 즉 한 명의 개발자가 전 애플리케이션을 관리할 수 있는 구조가 이론이 아닌 현실로 입증됨
     * Rails의 구조적 철학—데이터베이스 설계, 비즈니스 로직, 프론트엔드 UI까지 일관된 도구 안에서 수행 가능—은 소규모 또는 1인 창업자에게 특히 유리
     * 이 글은 다음과 같은 사람들을 위해 작성됨:
          + Rails 개발자: 요즘에도 혼자서 큰 제품을 만들 수 있는지 고민하는 사람
          + 기술 창업자: 여러 역할을 떠맡고 과중함을 느끼는 사람
          + 장인 정신과 기술 선택을 중요시하는 사람

  시작 당시 상황

     * 글쓴이는 2011년, 21세의 개발자로서 기존에 PHP(CodeIgniter) 프로젝트를 하던 중, Rails에 입문
     * 큰 전략은 없었고, 트렌드를 따라 Rails를 써보고 싶다는 단순한 동기에서 시작
     * 공동창업자의 마케팅 아이디어로 런칭 주간 가입자는 1년 무료 제공이라는 오퍼 전략 실행
          + 수십 명 수준을 예상했지만, 실제로는 첫 주에 500명 이상 가입
          + MVP 수준의 제품이었기 때문에, 곧바로 수백 명의 기능 요청, 질문, 지원 요청이 쇄도함
     * 서버는 잘 돌아갔지만, 제품이 완성되지 않은 상태에서 고객 요구가 폭주
     * 두 공동창업자 모두 본업이 있었기 때문에 풀타임 대응이 불가능
          + 그 결과, 많은 초기 사용자들을 실망시킬 수밖에 없는 상황이 발생함
          + 이 경험을 통해 “소프트웨어 개발”과 “소프트웨어 비즈니스 운영”은 완전히 다른 문제임을 절감
     * 기능 구현만으로는 부족하며, 지속가능한 고객 응대, 기대 관리, 서비스 운영 체계가 필요하다는 교훈 획득

  만들면서 배우기

     * Rails 튜토리얼과 Stack Overflow를 참고해 개발을 시작했지만, 생산 환경에서 실제 고객 비즈니스를 책임지는 애플리케이션 구축은 전혀 다른 차원의 일이었음
     * 초창기 Rails 코드에는 다음과 같은 전형적인 초보 실수가 포함되어 있었음:
          + 200줄 이상짜리 컨트롤러 메서드
          + 역할이 뒤섞인 거대한 모델
          + 비효율적인 SQL 쿼리
          + 테스트 코드 없음
          + Git에 커밋된 설정값 및 시크릿 키
     * 기능 구현은 가능했지만, 전체 애플리케이션은 임시방편 코드와 불안정한 구조에 의존한 상태였음
     * 사용자 인증, 파일 업로드, PDF 생성, 관리자 UI, 이메일 처리 등 다양한 기능은 Gem에 의존하여 빠르게 구현했지만, 시간이 지나며 각 Gem이 새로운 복잡성과 문제를 유발함
     * .round(2) 사용 시 기대와 다르게 ""banker's rounding""이 적용되어 금액 계산 오류 발생
          + 단순한 계산도 외부 Gem에 맡긴 결과, 숫자 처리의 본질적인 이해 부족으로 문제 발생
     * 2013년 무렵, 제품 운영 경험이 쌓이면서 동시에 기술 부채가 빠르게 증가, 새로운 기능 개발이 점점 어려워짐

  전면 재작성

     * 전체 재작성(Full Rewrite)는 일반적으로 위험하고 비효율적인 선택으로 간주되지만, 2014년 Rails 4 기반으로 아예 처음부터 새롭게 구축하기로 결정
     * 기존 애플리케이션을 유지하면서 동시에 새 코드베이스를 개발하는 집중 작업을 수개월 동안 병행
     * 아키텍처를 단순화하고, Gem 의존성을 절반 이하로 줄이며, 핵심 기능에 테스트 도입
     * 새로운 구조는 이전보다 간결하고 빠르며, 특히 파트타임 1인 개발자가 유지보수 가능한 수준으로 설계됨
     * 이 리라이트는 이후 10년 넘게 단독 개발자가 운영 가능한 기술 기반이 되어줌

  Rails는 초능력임

     * PlanGo는 2025년까지 단 한 명의 개발자에 의해 운영되었으며, 그 가능성을 만들어준 핵심 이유는 Rails였음
     * Convention over Configuration, 통합 테스트, ActiveRecord, ActiveStorage, ActiveJob 등 Rails의 구조적 특징 덕분에 비본질적인 의사결정을 최소화하고 핵심 가치 창출에 집중할 수 있었음
     * Turbolinks, Hotwire 도입 이후에는 복잡한 JS 프레임워크 없이도 현대적 UI 구현이 가능했음

     * 2011년 개발 초기에는 모바일 앱 수요가 거의 없었지만, 이후에는 iOS/Android 앱이 PlanGo의 주된 인터페이스로 자리잡음
     * Titanium, RubyMotion, Objective-C 등 여러 프레임워크를 시도하며 품질과 속도 사이의 균형 문제를 겪음
     * Turbo Native 도입 이후 생산성이 급격히 향상되었으며, 기초적인 네이티브 개발 지식만으로도 Rails 코드베이스를 활용한 고품질 앱 구현이 가능해짐

     * 이 방식은 특히 B2B나 SaaS 앱에서 이상적인 접근법으로, 네이티브 성능과 경험을 소규모 개발 비용으로 달성할 수 있음
     * 결과적으로 연간 10만 회 이상의 앱 다운로드, 일시적으로 네덜란드 앱스토어에서 Duolingo보다 상위 기록도 달성
     * 모든 앱은 하나의 Rails 개발자에 의해 개발 및 유지됨

     * 주요 지표:
          + Ruby 코드: 36,170줄
          + JavaScript 코드: 13,495줄
          + 테스트 커버리지: 40%
          + 일일 활성 사용자: 6,332명
          + 피크 시간 분당 요청 수: 7,000건
          + 월 서버 운영비: €1,500 미만

     * 구조화된 모놀리식 아키텍처를 유지한 것은 최고의 선택 중 하나였으며, 마이크로서비스 복잡성 없이 Capistrano로 간편 배포, 디버깅까지 용이
     * 기술 창업자에게 Rails는 단순한 프레임워크가 아닌, 한 사람이 팀 전체의 일을 해낼 수 있게 해주는 슈퍼파워

  1백만 유로를 넘어서

     * 2022년 말, 예상치 못한 전환점이 찾아옴. 해외 투자자가 PlanGo에 관심을 보이며 인수 제안을 전달
     * 당시 PlanGo는 부트스트랩 방식으로 €1M ARR을 넘긴 상태였으며, 외부 자금 없이도 지속 가능한 수익 구조와 효율적인 운영을 유지 중이었음

     * 이 제안은 팀 내부에 ""우리는 앞으로 무엇을 원하는가?"" 라는 질문을 던지는 계기가 됨
     * 기존 방식대로 유지할지, 외부 자금으로 스케일업할지, 완전히 매각할지 등 다양한 가능성을 탐색함
     * 사업에 대한 애정은 여전히 깊었지만, 더 많은 리소스와 전문성을 확보하면 더 쉽게 기회를 실행에 옮길 수 있다는 인식이 생김

     * 수익 실현 측면에서도, 10년 넘게 쌓은 가치 중 일부를 회수하면서도 사업을 계속 성장시킨다는 선택지는 합리적이었음
     * 최종적으로 선택한 방식은, 가치와 장기적 방향성이 잘 맞는 네덜란드의 에버그린 펀드와의 파트너십 체결
          + 일부 지분을 매각하고, 경영권과 다수 지분은 유지
          + 추가 리소스를 확보하면서도 기존 구조와 문화를 해치지 않는 형태

     * 이 결정은 단기적 엑싯이나 공격적 확장이 아닌, 지속 가능하고 고객 중심의 비즈니스를 기반으로 한 안정적 성장 전략의 일환임
     * 이후에도 Rails 기반의 접근 방식은 그대로 유지하면서, 기존에는 시도하기 어려웠던 기회를 보다 적극적으로 추구하는 새로운 국면에 진입함

  배운 것들

     * PlanGo를 14년 동안 1인 기술 창업자로 운영하며 얻은 교훈은 다음과 같음
     * Embrace Rails conventions
          + Rails의 철학과 규칙을 거스르려 하지 않는 것이 중요함
          + “Rails Way”는 이미 검증된 문제 해결법이며, 이를 따를수록 제품 고유의 가치에 집중할 수 있음
     * Less is more
          + Gem이나 JS 라이브러리는 기능을 빠르게 구현할 수 있지만, 동시에 복잡성과 고장 가능성도 증가시킴
          + 새로운 의존성을 추가하기 전에는 반드시 ""이게 정말 필요한가?""를 스스로에게 질문해야 함
     * Find a community
          + 솔로 개발자는 다른 Rails 개발자들과의 연결이 매우 중요함
          + 예시로, Spina CMS를 만들면서 얻은 커뮤니티는 직장 동료는 아니지만 지식 공유와 피드백을 위한 소중한 연결고리가 되어줌
     * Technical debt isn't always bad
          + 빠르게 시장에 진입하기 위한 실용적인 선택이 기술적 완벽함보다 나을 때도 있음
          + 기술 부채는 의식적으로 감수할 시점과 갚을 시점을 구분하는 것이 핵심
     * You can go far alone
          + Rails를 활용하면 한 명의 개발자도 팀 전체 규모의 제품을 설계, 확장, 배포할 수 있음
          + “팀이 꼭 있어야 한다”는 일반적인 통념에 얽매일 필요 없음

  앞으로

     * 신규 투자 파트너는 PlanGo의 슬림한 운영 방식에 동의하면서도 단 하나의 조건을 제시함: Rails 개발자 한 명 추가
     * 문제는 1인 개발을 고집한 것이 아니라, 14년에 걸쳐 발전해온 코드베이스에 새로운 개발자를 온보딩하는 과정 자체의 난이도에 있었음
     * 코드베이스는 PlanGo의 진화일 뿐 아니라, 초보에서 숙련자로 성장해온 개인의 개발 히스토리가 고스란히 담긴 구조였고,
       서로 다른 시기의 나 자신이 만든 다양한 판단과 코드 스타일이 혼재되어 있었음
     * Rails World(캐나다)에서 만난 두 번째 Rails 개발자를 채용하면서 구조적인 변화와 긍정적인 영향이 생김
          + 단일 장애 지점이었던 기술 리스크 해소
          + 새로운 시각과 아이디어 유입
          + 페어 프로그래밍을 통한 코드 품질 향상
          + 같은 언어를 공유하는 동료 개발자와의 협업이 주는 지적 자극
     * 향후에도 대규모 개발팀을 구성할 계획은 없음
     * 지금까지 증명된 것처럼, Rails 기반 접근만으로도 작지만 강력한 팀이 의미 있는 소프트웨어를 만들 수 있음
     * 다만, 가장 효율적인 1인 개발자조차 좋은 팀원을 통해 더 성장할 수 있음을 체감
     * PlanGo의 여정은 Rails의 One-Person Framework가 실제로 작동함을 보여주는 사례이며,
       적절한 도구를 가진 작은 팀이 스스로의 기준으로 진지한 비즈니스를 구축할 수 있다는 증거
     * 첫 제품을 만드는 1인 개발자든, 기술 스택을 고민하는 소규모 팀이든, 이 이야기가 Rails를 최대한 활용했을 때 가능한 가능성을 보여주길 바람

   이 내용을 NotebookLM 오디오 오버뷰로 팟캐스트를 만들어봤습니다.

   https://notebooklm.google.com/notebook/…

   이 정도면 훌륭하네요. 더 다듬어봐야 겠어요.

   와.. 엄청나네요.. 진짜. 이렇게 자연스럽다니

   와 정보가 귀에 쏙쏙 박히네요...

        Hacker News 의견

     * Django와 유사한 경험을 가진 사용자가 자신의 앱을 운영 중임
          + 가장 큰 앱은 중형 기업의 ERP와 비슷하며, 다양한 권한 수준을 포함함
          + 한 달 만에 대부분의 기능을 프로덕션에 올렸으며, 이는 일반적으로 팀이 2년 걸리는 작업임
          + 월간 페이지 뷰는 1-2백만이며, 서버 부하를 줄이기 위해 정적 HTML과 Cloudflare를 사용 중임
          + 가능한 한 간단하게 유지하며, REST/프론트엔드 프레임워크를 피하고 Bootstrap 기반의 HTML 폼을 사용함
          + 필요할 때만 JavaScript를 사용하며, 현재는 AlpineJS/HTMX를 사용 중임
     * 프레임워크보다 사람이 더 중요하다고 주장하는 사용자가 있음
          + 자신의 개발 스타일에 맞춘 프레임워크를 작성하여 시간과 비용을 절약함
          + 일반화된 프레임워크는 팀 환경에서 유용하지만, 개인 개발자 환경에서는 중요하지 않다고 생각함
     * Rails와 Phoenix를 사용한 경험을 공유하는 사용자가 있음
          + 전통적인 웹 앱을 구축할 때 유용하며, Postgres와 비슷한 선택임
          + 현재는 Clojure를 사용 중이며, 서버 측 도메인과 API 호출에 집중하고 있음
     * Rails 7+가 솔로 개발자에게도 야심 찬 앱을 구축하는 데 도움을 준다는 발표를 한 사용자가 있음
     * 새로운 파트너가 Rails 개발자를 추가하길 원했던 경험을 공유하는 사용자가 있음
          + 코드베이스는 개발자의 성장 과정을 반영하며, 다양한 경험 수준의 결정이 포함됨
          + 다른 회사에서 경험이 부족한 개발자가 시작한 코드베이스를 접한 경험을 공유함
     * AdonisJS를 사용하여 앱을 구축 중인 사용자가 있음
          + Rails와 Adonis, Fiber를 비교한 후 Adonis를 선택함
          + 튜토리얼 비디오와 문서가 훌륭하며, LLMs가 구버전에서 혼란스러울 수 있음을 언급함
     * Rails가 Django보다 나은 점이 많다고 생각하는 사용자가 있음
          + Hotwire, SOLID 캐시/큐, 터보 네이티브 등을 언급함
          + 그러나 여전히 Python 생태계를 선호함
     * Rails를 사용하여 앱을 구축 중인 솔로 개발자가 있음
          + Hotwire Native를 사용하여 모바일 앱도 개발 중임
          + Rails 생태계가 모든 것을 처리할 수 있어 놀랍다고 언급함
     * 전체 재작성은 피해야 한다고 주장하는 사용자가 있음
          + 재작성은 몇 달간의 집중적인 작업이었으며, 기존 앱을 유지하면서 대체 앱을 구축함
          + 작은 앱일 경우 재작성보다 리팩토링이 더 나을 수 있음
     * 프레임워크가 그리 중요하지 않다고 생각하는 사용자가 있음
          + 인기 있는 것을 선택하면 충분한 도움이 있을 것이라고 언급함
          + Laravel을 11년간 사용 중이며, 비즈니스 측면이 더 어렵다고 생각함
"
"https://news.hada.io/topic?id=20575","박스 안의 인터넷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               박스 안의 인터넷

     * Internet-in-a-Box는 인터넷이 없는 지역에서도 교육 자료를 제공하는 프로젝트임
     * Raspberry Pi와 같은 저렴한 하드웨어로 구축 가능하며, 학교, 병원, 가정에서 활용 가능함
     * 원격 산악 마을 등 다양한 지역에서 사용되며, 무선 네트워크를 통해 스마트폰, 태블릿, 노트북 등으로 접속 가능함
     * 무료 콘텐츠를 커스터마이즈하여 지역 사회에 맞춤형 교육 자료 제공 가능
     * Wikipedia Store에서 완제품 구매 가능하며, 커뮤니티 발전에 기여할 수 있음

        Hacker News 의견

     * Kiwix에서 자원봉사할 수 있음. 오프라인 Wikipedia 작업을 많이 함. 개인적으로 MWOffliner에서 일했음. MediaWikis, 주로 Wikipedia를 스크랩하는 도구임
          + 거의 모든 플랫폼에 대한 앱이 있음. PWA는 IE 11도 지원함
          + WP1 도구를 사용하여 사용자 정의 Wikipedia 버전을 만들 수 있음. 카테고리, WikiProjects, 사용자 정의 SPARQL 쿼리를 사용하여 가능함
     * 유튜브 링크를 보고 웃음이 나옴. 멋진 개념임
     * 2007-2012년 인도의 많은 지역이 인터넷에 접근하지 못했음. 친구들이 Wikipedia를 다운로드하여 아이들을 가르쳤음
          + 친구 Freeman Murray와 함께 고향에서 시도했음. 몇몇 아이들이 유지보수를 담당했고, 데스크탑을 사용하여 프로그래밍을 배웠음. 지금은 그 지역에 광섬유 인터넷이 있음
          + ""Internet in a Box""의 사진이 있음. 2000년대 중반 디트로이트에서 찍은 것임
     * Beekee와 비슷한 것을 만드는 사람들을 만났음. 표면적으로는 간단한 문제지만 제대로 구현하기 어려움
          + 난민 캠프에서 무선 네트워크 배포 작업을 했음. 항상 인터넷 연결이 가능하다는 가정 하에 구축되었음. 관리가 어려웠음
     * 최근 몇 달간의 뉴스로 인해 인터넷이 ""진짜""로 오프라인이 된다면 어떻게 될지 궁금해짐
          + Wikipedia와 Openstreetmap을 다운로드할 수 있지만, 그 외에는 무엇을 할 수 있을지 고민됨
          + 이웃들이 이해할 수 있도록 캡티브 포털이 필요함. 메쉬 네트워크를 구축할 수 있을지 궁금함
          + Pirate box가 이러한 기능을 모두 제공하는지 궁금함
     * ""Internet in a Box""가 업데이트 파일을 저장하여 다른 기계에 제공할 수 있다면 좋을 것임
          + 20년 넘게 유사 시스템에서 기술 소프트웨어 테스터로 일했음. 모든 엣지 케이스를 처리하는 것은 복잡할 것임
     * 연결 기술에 더 관심이 있음. Commotion ""Internet in a Suitcase"" 프로젝트가 더 흥미로움
          + OLSR, OpenWrt, OpenBTS, Serval 프로젝트를 기반으로 함. 메쉬, 와이파이, 셀룰러, 음성 기술을 저렴한 하드웨어에 패키징함
          + 민주적 가치를 구현할 수 있는 기술임
     * Piratebox 프로젝트를 기억함. 집에 호환 하드웨어가 있음
          + 오프라인 비동기 메시징을 허용하면 작은 커뮤니티에서의 소통 방식이 바뀔지 궁금함. 인터넷 트롤링을 유발할지 궁금함
     * 의도적으로 CDN 노드와 같지만 분산화됨
     * 데모를 보니 며칠 전에 제출된 ""prepper disk""와 비슷해 보임
          + prepper disk가 적절한 출처 표시 없이 인터넷 박스를 리브랜딩한 것일 수도 있음
"
"https://news.hada.io/topic?id=20568","광고를 팔기 위해 우리는 지옥을 만들고 있습니다 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    광고를 팔기 위해 우리는 지옥을 만들고 있습니다 [비디오]

     * 인공지능의 위협은 로봇이 아니라 권력자가 인공지능을 사용하는 방법에 대한 우려임
     * 디지털 광고와 설득구조는 사용자 개개인의 약점을 파악하고 조종하는 방향으로 진화하고 있음
     * 기계학습 알고리듬은 우리가 이해할 수 없는 방식으로 인간 행동을 예측하고 유도함
     * 데이터 수집과 알고리듬 조작은 정치, 사회적 영향력 행사에 사용되고 있음
     * 우리는 디지털 시스템의 구조를 투명하게 재설계하고, 인간의 가치를 지키는 방향으로 기술을 발전시켜야 함


인공지능과 권력: 현실적인 위험

     * 인공지능에 대한 진짜 두려움은 터미네이터 같은 로봇이 아니라 권력자들이 인공지능을 조작해 인간을 통제하는 것임
     * 조지 오웰의 ""1984"" 처럼 감시 시스템이 현실화될 수 있음
     * 기업들은 개인의 자유와 존엄성을 침해할 수 있는 기술을 개발하고 있음
     * Facebook, Google, Amazon, Alibaba, Tencent 같은 회사들이 광고를 통한 데이터 수집과 분석에 집중하고 있음

디지털 광고와 설득 구조의 진화

     * 기존 광고는 제한된 물리적 공간과 타겟팅에 의존했지만 디지털 세계에서는 개인별 맞춤형 설득이 가능함
     * 인터넷 광고는 우리가 본 것, 검색한 것, 대화한 것을 기반으로 끝없이 따라오는 맞춤형 광고를 생성함
     * 물리적 세상과 달리, 디지털 공간은 수십억 개 단위로 실시간 설득구조를 운영할 수 있음

기계학습 알고리듬의 힘과 한계

     * 기계학습 알고리듬은 대량의 데이터를 통해 개인의 행동을 예측하고 조작하는 데 사용됨
     * 프로그래머조차 알고리듬 내부가 어떻게 작동하는지 완전히 이해하지 못함
     * 데이터가 많을수록 알고리듬의 성능은 강력해짐, 따라서 기업은 가능한 많은 데이터를 수집하려고 함

소셜미디어와 정치적 조작

     * Facebook과 YouTube는 알고리듬을 통해 정치적 성향을 분석하고 조작할 수 있음
     * 예를 들어, Facebook은 비공개 게시판을 이용해 특정 인구집단에게만 정보를 노출시킴
     * 간단한 게시글 하나로도 수십만 명의 투표 행동을 변화시킨 사례가 존재함
     * YouTube 추천 알고리듬은 사용자를 극단적 콘텐츠로 끌어들이는 ""토끼굴"" 효과를 발생시킴

디지털 시스템의 재설계 필요성

     * 우리는 현재 우리가 어떤 정보를 보는지, 다른 사람들이 무엇을 보는지 모르는 상황에 있음
     * 알고리듬은 민족, 정치적 성향, 성적 지향 등 개인적 특성을 파악할 수 있음
     * 중국은 안면인식 기술을 이용해 감시 체계를 강화하고 있으며, 서방도 비슷한 위험에 처해 있음
     * 디지털 기술을 인간의 가치에 기반해 재구성하고 투명성을 확보해야 함
     * 기술, 창의성, 정치 구조까지 포괄적인 변화를 요구함

결론: 디지털 기술과 함께 성장하는 책임

     * 디지털 플랫폼은 가치 있는 도구이지만, 동시에 개인과 사회에 심각한 위협이 될 수 있음
     * 현재 시스템은 우리가 ""상품""으로 거래되는 구조임
     * 더 나은 미래를 위해서는 기술의 투명성, 인간 중심의 가치, 그리고 창의적이고 정치적인 변화가 필요함
     * ""엄청난 잠재력을 가진 기술은 엄청난 위험과 함께 온다""는 인식을 가져야 함

        Hacker News 의견

     * 대부분의 인터넷 광고가 비어있고, 사기성이 있다고 느낌
          + 광고가 위와 같지 않다면 괜찮음
          + 알고리즘이 어떤 광고를 보여줄지 모르기 때문에 Ublock Origin을 사용함
          + 광고가 유료 홍보가 아닌, 사람들이 보고 싶어하는 수준의 좋은 광고로 바뀌어야 한다고 생각함
          + Splendor Song Chalta rahe 같은 광고 음악이 좋아서 계속 듣고 있음
          + 대부분의 광고는 부자가 되는 방법을 팔려는 사기라고 느낌
          + 이런 사기성 강좌 판매자들을 싫어하고, 광고 경제가 사기꾼들 중심으로 돌아간다고 생각함
          + 프라이버시 악몽과 디스토피아를 만드는 것 같음
          + 광고를 끄고 서비스를 사용하고 싶음
          + 비즈니스 고객이 아닌 일반 고객에게서 큰 수익을 기대하지 않음
          + 오픈 소스에 대한 도덕적 의무를 느끼지만, 비즈니스가 자체 호스팅할 수 있어 고민 중임
          + 시스템이 돈에 의해 좌우되고, 돈이 부족하면 도덕성이 무시될 가능성이 높음
          + 경쟁이 너무 많고, 아이디어 차이가 크지 않아 광고를 시도함
     * 광고를 피하기 위해 Safari에서 AdBlock Pro와 AdBlock을 사용하고 있음
          + YouTube에서 시간을 많이 보내기 때문에 Premium 구독을 하고 UnTrap for YouTube 확장을 구매해 추천을 숨김
          + BlueSky, Hacker News, YouTube를 자주 방문하지만 X, TikTok, Instagram, Facebook은 사용하지 않음
          + Amazon을 사용하지 않으려 노력 중임
     * 소득 불평등에 대해 많이 불평했지만, 많은 부분이 설명됨
          + 사람들이 서비스에 지출할 여유가 없어 주의를 끌어내는 방식으로 돈을 벌게 됨
          + 제품이 무료이기 때문에 사용자 지원에 대한 기대가 없음
     * 쿠키를 수락하고 광고를 보고 뉴스레터 팝업을 닫고 광고에 대한 비디오를 봄
          + 정말 핵심을 짚음
     * Reddit의 텔레메트리 구현이 매우 공격적임
          + 이벤트 수집을 위한 엔드포인트가 페이지를 로드할 때마다 무작위로 변경됨
          + 모든 이벤트 수집 URL이 다른 용도로 사용되는 유효한 API 엔드포인트임
          + 일반적인 광고 차단 도구로는 차단하기 어려움
          + 악의적이라고 생각함
     * 광고 차단기가 존재한다는 댓글이 많지만, 요점을 놓치고 있음
          + 광고 기반 인터넷 경제의 피해는 단순히 광고를 보는 것에 국한되지 않음
          + 인터넷의 전체 콘텐츠와 구조가 이 경제에 맞춰 왜곡됨
          + 검색 엔진, SEO, 콘텐츠 발견 메커니즘, 콘텐츠의 종류와 다양성 등이 더 나아질 수 있었음
     * 광고를 소비하는 인간을 스푸핑하여 광고 수치를 무의미하게 만드는 공격을 시작할 수 있을지 궁금함
"
"https://news.hada.io/topic?id=20518","고용주에 대한 충성심","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              고용주에 대한 충성심

     * 작성자는 30년을 한 회사에서 일한 아버지와, 3년 미만의 평균 근속 기간을 가진 테크 업계 사이의 차이를 조명함
     * 테크 업계에서 자주 보이는 회사에 대한 과도한 충성심은 실제로는 일시적이고 거래적인 관계일 가능성이 큼
     * 좋은 고용주를 평가하는 네 가지 핵심 기준을 제시: 적정 급여, 직원 대우, 재무 건전성, 새로운 시도에 대한 개방성
     * ""회사=가족""이라는 신화에 경계심을 갖고, 정신 건강, 인간관계, 개인 가치를 희생하지 말 것을 강조함
     * 진정한 충성심은 상호 존중, 성장 지원, 균형 있는 삶을 제공하는 직장에서만 의미 있음


아버지와 테크 업계의 충성심 차이

     * 글쓴이의 아버지는 30년 동안 한 직장에서 근속
     * 반면 테크 업계의 평균 근속 기간은 3년 미만이며, 이직이 일반적인 문화로 자리 잡음
     * 많은 사람들이 자신의 회사를 칭찬하지만, 결국은 더 좋은 조건을 찾아 떠나는 것이 현실

고용주 평가의 4가지 기준

  1. 적정한 급여를 제공하는가?

     * 시장 평균 이상의 급여를 제시하지 않는다면 서로 시간 낭비
     * 급여 정보는 솔직하게 파악해야 함

  2. 직원을 존중하고 잘 대우하는가?

     * Glassdoor나 트위터에서 리뷰와 경험담을 분석
     * 일관된 부정적 리뷰가 있다면 그 이유를 파악하고 회사 측의 대응 여부 확인

  3. 재정적으로 안정적인가?

     * 스타트업이라면 특히 중요
     * 기업 공개자료, 재무 상태, 생존 가능성(runway)을 조사해야 함
     * 재정 정보를 공개하지 않으려는 회사는 즉시 거절하는 것이 바람직

  4. 새로운 시도에 개방적인가?

     * 변화에 대한 유연성이 없으면 채용이나 성장도 한계가 있음
     * 기존 방식에만 고집하는 회사는 지양

진실: 당신은 거래 대상일 뿐

     * 회사는 필요 없어지면 누구든지 교체할 수 있음
     * 회사는 당신을 가족처럼 보이게 하지만, 실제로는 계약 기반의 이익 관계
     * 다음과 같은 희생은 절대 하지 말 것
          + 가족이나 친구와의 관계
          + 정신 건강
          + 자신만의 가치관과 윤리
          + “허슬 문화”라는 허상

진정한 충성은 상호 존중에서

     * 성실히 일하고, 회사가 당신의 성장을 진심으로 돕는다면 긍정적으로 알리는 것도 OK
     * 자신의 성장, 함께 일하는 동료와의 협력, 시간과 에너지의 효율적 활용에 집중
     * 무엇보다 중요한 것은, 일보다 소중한 사람들과의 시간

     “죽기 전에 더 열심히 일했어야 했다고 후회하지 않을 거야. 더 많은 시간을 사랑하는 사람들과 보냈어야 했다고 후회하겠지.” — 아버지의 말

   회사와의 관계를 어떻게 정의하고, 이를 발전시켜 나갈지는 개인과 회사의 몫입니다. 맹목적인 충성도, 거래관계일 뿐이라는 냉소도 부작용이 있습니다. 이 또한 자신만의 인생 설계에 따른 밸런스가 중요하다고 봅니다. 인생이라는 바구니에 회사를 얼마만큼의 크기로 담으면 좋을지 다들 스스로의 답을 찾으시면 좋겠습니다.

   대우를 해 주는 만큼 기여하는거죠.
   회사가 개판인데 내가 계속 잘 해야 한다는 것은 반대의 경우도 가능하지 않은 이상 헛소리죠.

        Hacker News 의견

     * 회사에 대한 충성심은 보상 없이 더 열심히 일하게 만드는 개념임. 회사가 방향을 바꾸면 충성심은 아무것도 아님을 깨닫게 됨. 고용주와 직원 간의 관계에서 충성심은 필요 없음
     * 고용주에 대한 충성심에 대한 태도가 극명하게 나뉨. 회사에 대한 맹목적인 충성심과 최소한의 업무만 수행하는 태도 사이에 중간 지점이 있음
          + 회사에 대한 충성심 없이도 성실하게 일하고 자부심을 가질 수 있음. 부당한 대우를 받으면 떠날 수 있음
          + 고용은 본질적으로 거래적임. 특히 소프트웨어 엔지니어링, 머신러닝 엔지니어링 같은 고학력 직업에서는 거래의 총합이 하루나 시간 단위가 아닌 연 단위에 가까움
          + 거래 조건은 성과에 따라 보너스를 포함할 수 있음. 충성심에 대한 보상으로 더 많은 보상을 제공하는 것이 합리적임
          + 회사에 대한 충성심이 아닌 동료나 상사에 대한 충성심은 가능함. 가족과의 조화가 맞지 않으면 떠날 수 있음
     * 죽음의 순간에 더 열심히 일했어야 했다고 후회하지 않을 것임. 사랑하는 사람들과 더 많은 시간을 보냈어야 했다고 생각할 것임
          + Reddit에서 죽을 때까지 일하겠다는 사람의 글을 봄. 이 사람이 가족이나 친구가 있는지 궁금했음
          + 세상의 여러 경이로움을 경험했는지, 고래와 함께 수영하거나 아마존 정글을 탐험했는지 궁금했음
          + 창조에 대한 열망은 이해하지만, 평생 일하고 싶지는 않음. 인생은 짧고 세상은 큼
     * 고용에 대해 ""충성심""이라는 단어를 싫어함. 충성심은 배우자, 친구, 가족을 위한 것임. 고용주는 계약 관계임
          + 최선을 다하고, 전문적으로 행동하며, 공정한 대우를 기대함. 상호 이익이 되면 관계는 지속될 수 있음
          + 이익이 없어지면 관계는 일방적으로 종료됨
     * 일본처럼 회사가 직원들을 죽을 때까지 돌보는 문화가 있는 사회에서만 강한 충성심이 작용할 수 있음
          + Reed Hoffman의 회사-직원 관계 개념인 동맹을 선호함. 회사와 직원이 공통 목표를 위해 협력하는 관계임
          + 동맹이 존재하지 않으면 서로 갈라섬. 권력 역학과는 별개임
     * 게임 산업에서는 특정 임원을 따르는 충성스러운 추종자들이 있음. 임원이 회사를 옮겨도 추종자들은 함께 이동함
          + 임원은 항상 그들에게 일자리를 마련해주고, 그들도 임원을 신뢰함
     * 시스템적으로 과도하게 헌신하는 직원을 찾고 유지하려는 편향이 있음
          + 고용주는 관계에 대한 헌신이 부족함. 기술 산업에서는 일 자체를 사랑하거나 산업의 매력에 끌려 착취당하기 쉬움
          + HR은 회사의 가치와 ""우리는 가족""이라는 메시지로 사회 생활에 영향을 미침
     * 고용주에게 충성심을 주지 말라는 기사는 대부분 유효함
          + 11년 동안 고용주와 함께하며 많은 혜택을 받음. 법적으로 요구되지 않는 방식으로 돌봄을 받음
          + 고용주가 잘 대해주면 약간의 충성심을 보상해도 괜찮음
     * IBM 브라질에서 일했던 아버지의 조언: ""회사는 감정이 없으니 감정을 품지 말라""
          + 여러 회사와 산업을 경험하며 후회 없음
     * 죽음의 순간에 더 열심히 일했어야 했다고 후회하지 않을 것임
          + 모든 사람이 의미 있는 경력을 찾을 수 있는 것은 아님. 기술 산업은 창의적이고 잘 보상받는 분야임
          + 많은 사람들이 기술 산업에서 불행함을 느낌
"
"https://news.hada.io/topic?id=20589","스페인과 포르투갈의 대규모 정전 사태","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          스페인과 포르투갈의 대규모 정전 사태

     * 스페인과 포르투갈에서 발생한 대규모 정전으로 인해 혼란이 발생함
     * 스페인 총리 페드로 산체스는 국가 비상사태를 선언한 후 스페인의 절반 정도의 전력이 복구되었음을 발표함
     * 정전의 원인은 아직 밝혀지지 않았으며, 포르투갈 총리 루이스 몬테네그로는 사이버 공격의 징후가 없음을 강조함
     * 프랑스와 스페인 간의 에너지 연결에서 기술적 문제가 발생했음을 유럽 무역 단체가 언급함
     * 포르투갈 전력 회사 REN은 전력망이 완전히 정상화되기까지 일주일이 걸릴 수 있음을 발표함


전력 부분 복구, 혼란은 계속됨

     * 스페인과 포르투갈에서 정전이 발생한 지 몇 시간이 지났으며, 이는 광범위한 혼란과 여행 혼란을 초래함
     * 스페인 총리 페드로 산체스는 국가 비상사태를 선언한 후 스페인의 절반 정도의 전력이 복구되었음을 발표함
     * 정전의 원인은 아직 밝혀지지 않았으며, 포르투갈 총리 루이스 몬테네그로는 사이버 공격의 징후가 없음을 강조함
     * 스페인과 포르투갈 전역의 이미지에서 주민들이 어둠에 빠진 모습을 보여주며, 산체스는 ""긴 밤이 될 것""이라고 언급함
     * 유럽 무역 단체는 프랑스와 스페인 간의 에너지 연결에서 ""기술적 문제""가 있었음을 BBC의 The World Tonight에 언급함
     * 포르투갈 전력 회사 REN은 오늘 일찍 포르투갈의 전력망이 완전히 정상화되기까지 일주일이 걸릴 수 있음을 발표함
     * BBC 웹사이트에서 이 이야기를 계속 확인할 수 있음
     * 스페인과 포르투갈은 정전의 원인을 찾기 위해 전력을 복구하기 위해 분주하게 움직이고 있음
     * ""모든 것이 꺼졌다"": 스페인과 포르투갈의 대규모 정전이 어떻게 발생했는지
     * 스페인과 포르투갈이 정전에 직면하면서 교통 혼란이 발생한 상황을 시청할 수 있음

        Hacker News 의견

     * 블랙 스타트는 큰 규모의 정전 복구에 필요하며, 이는 느리고 어렵다는 의견이 있음
          + 국가 전체가 정전되면 발전소들이 그리드에서 분리되고, 그리드 자체가 여러 섬으로 분리됨
          + 이를 복구하려면 소비자 부하를 차단하고 블랙 스타트 기능이 있는 소수의 발전소를 재가동해야 함
          + 열 발전소는 시작에 에너지가 필요하고, 재생 가능 에너지는 주파수 안정화를 위한 외부 관성이 필요함
          + 작은 디젤 발전기를 켜서 더 큰 발전기를 부팅하는 방식으로 전력을 공급함
          + 블랙 스타트 중 그리드는 매우 불안정하며, 문제가 발생하면 다시 정전될 수 있음
          + 영국에서는 블랙 스타트가 최대 72시간 걸릴 수 있다고 계획함
     * 악의가 아닌 복잡한 시스템의 문제로 인해 발생할 수 있는 정전이라는 의견이 있음
          + 대부분의 주요 정전은 악의적이지 않음
          + 스위스 철도 전력망이 유지보수 중 잘못된 버튼을 눌러 단락이 발생한 사례를 기억함
     * 마드리드에서 정전을 직접 경험한 사람의 의견
          + 뉴스가 매우 느리게 전파되었고, 거리에서 사람들이 라디오를 통해 정보를 얻음
          + 전력 복구 직전에는 전화 신호가 완전히 끊기고 사람들은 내일에 대한 걱정을 시작함
     * ENTSO-E의 실시간 데이터를 통해 정전 상황을 확인할 수 있음
          + 12:30에서 13:00 사이에 대부분의 생산이 그리드에서 분리됨
     * 포르투갈의 REN은 스페인 내부의 극심한 온도 변동으로 인해 발생한 현상이라고 설명함
          + '유도 대기 진동'이라는 현상으로 인해 전력 시스템 간의 동기화 실패가 발생함
     * 프랑스 남서부의 화재로 인해 고압 전력선이 손상된 것이 원인일 수 있음
     * 이베리아 반도는 CESA 동기 그리드와 상대적으로 고립되어 있으며, 국경 간 용량이 지역 생산에 비해 2%에 불과함
          + 스페인 전력 시스템은 프랑스, 포르투갈, 안도라, 모로코와 연결되어 있으며, 이 연결의 교환 용량은 약 3GW임
"
"https://news.hada.io/topic?id=20547","Berkeley Humanoid Lite - 오픈소스 로봇","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Berkeley Humanoid Lite - 오픈소스 로봇

     * Berkeley 휴머노이드 라이트는 접근성과 커스터마이징 가능성을 높인 오픈소스 3D 프린팅 휴머노이드 로봇
     * 3D 프린터와 일반 부품 구매만으로 제작 가능하며, 총 비용은 $5,000 이하임
     * 사이클로이드 기어 설계를 통해 3D 프린팅 부품의 내구성 한계를 극복함
     * 강화학습을 통한 이동 제어기 개발로 시뮬레이션에서 실제 하드웨어로 제로샷 전이 성공함
     * 모든 설계와 코드, 문서가 오픈소스로 제공되어 휴머노이드 로봇 대중화에 기여함


Berkeley Humanoid Lite 개요

     * 대부분의 상업용 휴머노이드 로봇은 고가, 폐쇄적, 비공개 특성을 가짐
     * 이로 인해 휴머노이드 기술 발전과 대중화에 큰 제약이 존재함
     * 이를 해결하기 위해 Berkeley Humanoid Lite를 개발하여 오픈소스와 접근성을 높이는 것을 목표로 설정함

설계 및 특징

     * 모듈형 3D 프린팅 기어박스와 로봇 바디를 사용함
     * 모든 부품은 일반적인 전자상거래 플랫폼에서 구매할 수 있고, 데스크탑 3D 프린터로 제작 가능함
     * 전체 하드웨어 비용은 $5,000 이하로 유지됨
     * 사이클로이드 기어 디자인을 채택하여 3D 프린팅 기어박스의 약한 내구성을 보완함
     * 내구성 검증을 위해 3D 프린팅 액추에이터에 대해 광범위한 테스트를 수행함

실험 및 시연

     * 루빅스 큐브 조작 실험 수행
     * 마커로 이름 쓰기 시연
     * 블록 놀이 수행
     * 2족 보행 이동 시연
     * 강화학습 기반 로코모션 컨트롤러 개발
     * 시뮬레이션에서 학습한 정책을 하드웨어로 제로샷 전이 성공

성능 비교

     * 휴머노이드 로봇의 성능 대비 비용 효율성을 평가하기 위한 메트릭을 제안함
     * 성능 지표는 모든 액추에이티드 자유도(DoFs)의 평균 최대 토크를 로봇 크기로 정규화하여 계산함
     * 성능 지표를 로봇 비용으로 나눈 값을 성능-비용 비율로 정의함
     * Berkeley Humanoid Lite는 $5,000 이하의 비용으로 높은 성능 지표를 달성함
"
