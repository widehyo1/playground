"https://news.hada.io/topic?id=7853","Z-Library 설립자 2명, 아르헨티나에서 체포","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Z-Library 설립자 2명, 아르헨티나에서 체포

     * 뉴욕의 연방 법원에서 대규모 전자책 불법 복제 사이트를 운영한 혐의로 러시아 국적자 2명을 기소했고, 아르헨티나 코르도바에서 미국의 요청으로 체포됨
     * Z-Library 도메인은 차단되고 미국 정부에 의해 압수됨
     * ""피고인들은 훔친 저작물로 불법적으로 이익을 얻었음. 종종 출판 후 단 몇시간 만에 저작물을 업로드하였고, 그 과정에서 저자, 출판사, 서점을 희생시켰음""

   성장한 맥락을 아니까 재밌네요

   역시 유료 모델을 채용하면 문제가 되는군요. 그래도 해외 국적자를 제 3국에서 잡았다는 사실은 조금 신기하네요.

   Z-Library 는 처음에는 학술 논문 및 단행본 검색엔진인 Library Genesis(libgen) 을 미러링한 후 훨씬 쉽고 빠르게 검색이 가능하도록 해서 초기에 사용자를 대폭 유입 시키면서 유명해졌고요. 나중엔 새로운 책(불법 복제본)들을 사용자가 직접 신규 등록 가능하게 하고, 업로더에게 리워드도 주면서 신규 책 등록을 권장했습니다.

   그리고는 자신들에게 추가한 것은 원래 미러링했던 libgen 쪽으로는 반영하지 않는 방식으로 트래픽과 이용자를 키워나간 것으로 알려져 있습니다. 거기다가 하루에 10권 이상 다운로드하려면 돈을 받는 유료모델을 운영했고요.

   이건 좀 위험하다 싶었는데 역시나..
"
"https://news.hada.io/topic?id=7842","GitHub 명함 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GitHub 명함 생성기

     * 자신의 깃헙 ID를 넣으면 해당 정보 기반으로 명함 이미지를 생성해주는 사이트
     * 이미지 및 임베드 가능한 HTML / 마크다운 코드 생성
     * Vercel 의 이미지 생성 라이브러리를 이용. 소스코드도 공개
     * 이름, 깃헙 아이디/URL, 팔로워, 팔로잉, 로케이션, 이메일, 컨트리뷰션 그래프, QR코드

   잔디좀 심을걸... 흑흑

   간단하면서 재밌군요

   오~ 생각보다 별론데~

   잔디가 없을 때에도 좀 그럴듯해 줬으면... ^^;;;;

   ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ 공식 프로덕트가 아니라서...

   ㅋㅋㅋ

   확실히 디자인이 좀 많이 아쉽긴 하네요 ㅎㅎ
"
"https://news.hada.io/topic?id=7852","Superhuman이 PMF를 찾는 엔진을 구축한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Superhuman이 PMF를 찾는 엔진을 구축한 방법

   Superhuman의 창업자이자 CEO인 Rahul Vohra가 2018년에 Product/Market Fit을 찾는 방법에 대해 쓴 글입니다. GetLaka에 따르면 Superhuman은 다음과 같은 서비스입니다.
     * “세계에서 가장 빠른 이메일 경험을 만드는 스타트업”으로 포지셔닝
     * 2014년 창업, $108M 투자유치, 직원 수 100명
     * 2021년 연매출 $18M

   전문번역은 이 링크에서 보실 수 있습니다.

   ===

서론

     * 스타트업이 Product/Market Fit(이하 PMF)에 도달해야 한다는 것은 다들 알지만 실제로 찾으려고 해보면 대체 PMF가 뭐고 어떻게 도달할지는 대부분 잘 모른다.
     * 마크 엔드리슨은 내 제품이 PMF에 도달했는지 아닌지 무조건 알 수 있다고 했고(도달하지 못하면 입소문이 잘 안 나고, 사용량이 잘 안 늘고, 언론 보도도 잡담 수준이고, 영업 주기가 너무 길고, 수많은 거래가 성사되지 않는다), 여기에는 100% 동의한다. 그러나 이걸 정량적으로 설명하기는 무척 어려웠다.
     * 이는 PMF의 묘사가 제품 런칭 후의 기업에게 훨씬 적합했기 때문이다. 아직 제품 런칭 전이라면, 우리의 현 상태를 제대로 묘사하고, 우리가 아직 준비되지 않았다는 걸 팀원들에게 설득하고, 다음 단계로 나아가기 위해서는 적절한 용어와 프레임워크가 필요했다.
     * 그래서 나는 여러 PMF 사례를 역설계하여, Superhuman이 PMF를 찾는 엔진을 구축한 4단계 가이드를 만들었다. 이 엔진을 직접 써보고 싶은 사람들은 이 인터랙티브 도구를 사용해보길 바란다.

PMF의 선행 지표는 “제품을 더이상 사용하지 못한다면 아주 실망스러워할 유저의 비율”이다

     * 션 엘리스는 100여개의 기업을 조사하여 이 수치가 40%가 넘어가면 제품이 성공할 가능성이 높다는 결론에 도달했다(슬랙의 2015년 설문 결과는 51%).
     * 여기에 힌트를 얻어, Superhuman을 지난 2주간 최소 2번 사용해본 유저 100여명에게 다음 설문을 보냈다.
         1. Superhuman을 더이상 사용하지 못한다면 어떤 기분이 들 것 같나요? A) 매우 실망스러움 B) 약간 실망스러움 C) 실망스럽지 않음
         2. 어떤 유형의 사람들이 Superhuman을 사용하며 가장 큰 혜택을 얻어갈 것 같나요?
         3. 당신이 Superhuman으로부터 가장 중요하게 얻어가고 있는 혜택은 무엇인가요?
         4. Superhuman을 어떻게 더 개선하면 좋을까요?
     * 1번의 응답에서 “매우 실망스러움”이 22%에 불과했으니 우리가 아직 부족한 게 확실해졌다.

PMF 최적화 4단계 가이드

    1. 제품의 지지자를 찾고, 기대치가 높은 고객(HXC, high-expectation customers)들을 파악하기 위해 사용자를 세분화한다.
       a. 1번 질문에서 “매우 실망스러움” 그룹의 페르소나를 분석한다.
       b. 전체 응답 중 그 페르소나가 아닌 유저의 응답은 거른다.
       c. “매우 실망스러움” 그룹의 사람들이 2번 질문에 어떻게 응답했는지 분석한다.
       d. 여기 나온 키워드를 HXC framework와 조합하여 우리의 주요 고객에 대한 생생한 프로필을 만든다.
    2. “약간 실망스러운” 유저를 열렬한 지지자로 만들기 위해 피드백을 분석한다.
       a. “매우 실망스러움” 그룹이 3번 질문에 어떻게 응답했는지 분석한다. (Superhuman을 사랑하는 유저들은 속도, 집중, 그리고 키보드 단축키 기능을 가장 좋아했다.)
       b. “실망스럽지 않음” 그룹의 피드백은 정중히 무시한다. 이들은 우리의 주의를 산만하게 만든다.
       c. “약간 실망스러움” 그룹을, “매우 실망스러움” 그룹이 말해준 우리의 최중요 가치에 공감하는지 아닌지에 따라 둘로 나눈다. (전체 응답자의 45%였던 “약간 실망스러움” 그룹에서 속도를 중요 가치로 뽑은 사람은 30%, 그렇지 않은 사람은 15%였다.)
       d. 최중요 가치에 공감하지 않는 “약간 실망스러움” 그룹의 피드백은 정중히 무시한다. 이들은 우리가 뭔 짓을 하든 “매우 실망스러움”으로 움직이지 않을 것이다.
       e. 최중요 가치에 공감하는 “약간 실망스러움” 그룹은 조금만 노력하면 열렬한 지지자가 될지도 모르니, 이들이 4번 질문에 어떻게 대답하는지 분석한다. (모바일 앱의 부재가 가장 큰 문제였고 다른 앱과의 연결, 첨부파일 처리, 일정 관리 등이 그 뒤를 이었다.)
    3. 유저들이 사랑하는 것은 두 배로 늘리고, 방해 요소는 해결하도록 로드맵을 짠다.
       a. 제품 로드맵의 절반은 “매우 실망스러움” 그룹이 사랑하는 것을 두 배로 만드는 데 할애한다. (Superhuman은 이미 굉장히 빨랐지만 더 빠르게 했다. 예를 들어 UI가 100ms 이하로 응답했고 검색도 Gmail보다 빠른 상태였는데, UI는 50ms 이하로 응답하게 하고 검색은 즉시 되는 것처럼 느껴지게 했다.)
       b. 로드맵의 나머지 절반은 “매우 실망스러움 그룹과 같은 가치를 보고 있으나 아직은 약간 실망스러운” 그룹을 전환시키는 데 할애한다.
       c. 간단한 비용-임팩트 분석을 통해 우선순위를 결정한다.
       d. b의 임팩트는 해당 주제가 요청된 수로 측정한다.
       e. a의 임팩트는 직관으로 추론한다. HXC 프로필을 만들면서 고객에 대해 깊이 공감하게 되면 직관이 좋아진다.
    4. PMF 수치를 가장 중요한 숫자로 두고 이 프로세스를 반복한다.
       a. 신규 유저들에게 꾸준히 설문을 발송하여 PMF 수치의 주별/월별/분기별 변화를 관찰한다. 한번 응답한 유저가 다시 응답하지 않도록 주의한다.
       b. 제품이 성장할수록 더 많은 유저 그룹을 커버하게 될 것이고 이에 따라 PMF 수치가 떨어질 수도 있다. 그러니 분기별로 설문을 분석하고 로드맵을 다시 만든다.

   실망스러워 하는 사람들의 수!
"
"https://news.hada.io/topic?id=7937","OpenAI ChatGPT: 채팅 위한 언어 모델 최적화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenAI ChatGPT: 채팅 위한 언어 모델 최적화

     * 자연스러운 대화를 주고받을 수 있는 언어 모델을 공개.
     * 기존 대화 내용을 기반으로 후속 질문에 계속 대답하며, 응답을 바꾸거나 실수를 인정하기도 함.
     * 부적절한 질문에 문제를 제기하고, 응답을 거부하는 것 또한 가능.
     * 주어진 코드에 문제점을 찾고, 범죄에 대한 질문의 답변을 거절하고, 실제 사실에 반하는 질문을 인식하고, 가정법으로 답변하는 등의 예시를 제공.
     * 연구 미리보기 기간에는 무료로 제공됨.

   위키백과에 나올법한 단어들은 얘가 더 친절하게 잘 설명하는 것 같아요.

   하지만 디테일한 방법을 물어보는 질문에선 큰 실수를 하는 경우가 있네요(심지어 네가 틀렸다고 두번씩 지적해주고 나서야 제대로 수정된 답변을 합니다)

   육체를 가지면 뭘 하고 싶어? 인간 종에 대해 어떻게 생각해? 이런 류의 질문들에는 답변을 회피하네요. 윤리적으로 논란이 될법한 질문은 피하게끔 학습이 됐나봅니다.

   저도 후기 올려 봅니다.
   제가 진행한 테스트 방식은 ""SAP"" 라는 시스템에 대해 문의 후 그 내용 에서 경험해 본 사람들만 아는 상세한 부분을 문의해 보았습니다.

   테스트 결과는 놀라울 정도로 잘 설명해 주었습니다.

   SAP 에 대해 아느냐? 로 시작해서, 특정 컨셉 및 처리 프로세스에 대해 설명할 수 있느냐? 라고 문의해 보니, 저의 생각으로 95% 이상 정확도가 나왔습니다.

   저 개인적인 생각이지만, 가장 편했던 것은 기존 대화의 연속적인 질문및 답변으로 대화가 이어져 간다는 것이 매우 만족했습니다.

   AI 를 잘 모르는 사람 입장에서의 테스트 후기를 쓸 정도 놀랍고, 만족했습니다.^^

   몇 개 테스트해봤는데 대단한 성능을 보여주네요.
   그리고 한글로 질문을 던지니 한글로도 답변을 합니다. 정말 놀랍습니다.

   잠깐 사용해보니 성능이 정말 대단한 것 같습니다. 기존에 있던 모델보다 훨씬 더 길고 정확한 답변을 생성하는 것 같네요. 특히 질문 자체가 잘못된 경우에도 그걸 잡아내는 기능이 놀라운 것 같습니다.

   심지어 모델의 한계점을 인식하고, 그에 대한 적절한 첨언을 섞어서 말하는 게 신기하네요. (최신 정보를 모른다고 말하는 것처럼...)

   물론 부적절한 응답을 내보내지 않게 하기 위해 과도하게 집중한 것 같다는 느낌이 들긴 합니다. 틈만 나면 '저는 훈련된 AI이며 그런 응답은 제공할 수 없고...' 뭐 이런 식으로 말을 하네요.

   오 좋네요. 뉴스 소개와 후기 감사합니다!!
"
"https://news.hada.io/topic?id=7833","내 말을 24x7시간 녹음해서 AI로 처리합니다. 이게 미래일까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 내 말을 24x7시간 녹음해서 AI로 처리합니다. 이게 미래일까요?

     * 폰이 우리가 말하는 것을 항상 녹음해서 AI로 처리한다면 무슨 일이 일어날까요? 제가 먼저 해봤습니다
     * 잠잘때 빼고 깨어 있는 시간 동안 항상 녹음(부적절한 상황에서는 끄기도 함). PoC이고 아직 실제 적용은 어려움
     * 만든 동기는 OpenAI의 Whisper가 공개 되어서

동작 방식

     * 두개의 마이크로 하루 종일 말하는 것을 녹음하고, 하루가 끝나면 Whisper로 처리해서 텍스트로 변환
     * 이를 활용해 초보적인 수준의 ""Ok Google"" 스타일 디지털 비서를 만들수 있다는 걸 깨달았음
     * 매일 추출 가능한 두가지 정보가 있음
          + Active : 의식적으로 비서에게 지시하는 것
          + Passive : 내가 무슨 액션 할 필요없이 정보가 추출되어야 할 나머지 모든 정보들

Active Functions

     * 매일 저녁 비동기로 처리되어야 할 것들은 'KEYWORD COMMAND data END KEYWORD' 방식으로 얘기함
          + 'Robert WEIGHT 60.1 end Robert' : Robert는 비서의 이름이고, end 가 종료 키워드
          + ""OK Google"" 을 사용하지 않는 이유 : 제한적이고, 구글에 정보가 가는게 싫고, 말하면 바로 처리하는 동기 방식이기 때문
          + 물론 비동기로 처리되기 때문에 하루가 끝나기 전까지는 상황을 알 수 없다는 단점이 있음

결과 보기

     * 체중계 위에 올라간 다음에 'Robert WEIGHT 62.8 end Robert'
     * 잠자고 일어나서 슬립트래커(미밴드)를 읽기 'Robert SLEEP 7 hours 14 minutes end Robert'
          + 전자 기기들이 폰과 연동되어 정보가 전달되긴 하지만 빼내올 방법이 없으므로, 그냥 Analog API처럼 디지털 비서를 활용
     * 밥먹고 나서 'Robert LUNCH two toasts with a fried egg end Robert'
          + 매일 먹은 음식에 대해서 외부 API로 칼로리 계산
     * 팟캐스트 듣고 'Robert NOTE the podcast talks about Morgan Housel's book the psychology of money end Robert'
          + 메모 및 아이디어를 모두 저장
     * 주유하고 'Robert SPENT 250,000 on fuel end Robert'
          + 매일 돈 쓴 내역을 저장
     * 나에게 얘기하는게 좀 이상하지만, 폰을 들고 뭔가를 할 필요가 없다는 장점이 있음

제어판

     * 이렇게 입력된 모든 정보를 보는 대시보드를 제작
     * My Journal을 만들어서 오늘 하루에 뭘 했는지를 자동으로 기록

Passive Information - 아직 작업중

     * RELATIONSHIP THERMOMETER : 관계 온도계
     * SENTIMENT ANALYS : 감정 분석
     * TOTAL RECALL: 특정 토픽에 대해서 이야기한 내용을 모두 검색 및 토픽에 대해서 특정 시점의 내 생각을 검색

예비 결론

     * 오디오 + 콘텍스트가 필요
     * 이걸 통해 얻게되는 잠재력은 긍정적/부정적 양쪽으로 엄청남
          + 긍정적 : 퍼펙트 메모리, 개인 심리학자/코치, 나의 가상 클론
          + 부정적 : 위와 같은 것들이 다른 사람의 손에 있다는 것
     * 유토피아와 디스토피아의 차이점은 누가 그 정보에 접근할 수 있냐는 것

   ”유토피아와 디스토피아의 차이점은 누가 그 정보에 접근할 수 있냐는 것“ 좋은 말이네요.

   매력적입니다. 충분히 현실화가 가능할 것 같습니다.
   VLog 처럼 때로 모범적인 일상을 공유해서 나누는 콘텐츠도 가능하겠습니다.

   HN에 저자가 직접 올리고 댓글도 달았네요 https://news.ycombinator.com/item?id=33608437
   사용한 마이크의 알리익스프레스 링크도 포함합니다 ㅎ

   Whisper - OpenAI가 오픈소스로 공개한 다국어 음성 인식 시스템(ASR)
"
"https://news.hada.io/topic?id=7856","QuickJS-emscripten : QuickJS를 WASM으로 컴파일하여 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            QuickJS-emscripten : QuickJS를 WASM으로 컴파일하여 실행하기

     * Figma가 플러그인을 실행할 때 보안 취약점을 없애기 위해 사용하는 방법
     * Fabrice Bellard가 C로 작성한 QuickJS를 WebAssembly로 컴파일하고 JavaScript/TypeScript 바인딩을 제공
     * ES2020 수준의 자바스크립트를 안전하게 실행 가능
     * QuickJS 런타임 내부의 값을 생성하고 조작
     * 호스트의 함수를 QuickJS 안에서 이용
     * Asyncify : Synchronous 한 C/C++ 코드를 Asynchronous 한 JavaScript 코드에서 호출 및 C 코드내에서 비동기 JS 코드의 실행이 끝나기를 대기 가능

   웹상에서 JS 플러그인을 운영하는 시스템들에게는 보안상 굉장히 훌륭한 방식이라고 생각됩니다.
   Ryan Dahl의 JavaScript Containers에 대한 생각 에도 연결되는 것 같고요.

   QuickJS Javascript Engine - 작고 빠르고 임베드 가능한 자바스크립트 엔진
   Figma 의 An update on plugin security

   이와 비슷하지만 좀 더 간단한 API로 구현된 코드 define-function : quick.js based sandbox
"
"https://news.hada.io/topic?id=7875","SQLite 3.40.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           SQLite 3.40.0 릴리즈

     * SQLite to WASM 컴파일 지원. 브라우저 위에서 실행 가능 (베타)
     * 깨진 DB파일에서 일부 복원이 가능한 리커버리 확장 추가
     * 쿼리 플래너 향상
     * sqlite3_filename 라는 typedef 추가
     * sqlite3_value_encoding() 인터페이스 추가
     * 보안 향상 : SQLITE_DBCONFIG_DEFENSIVE 가 스키마 버전 변경을 금지하도록 보강됨. 방어모드에서는 스키마버전이 읽기 전용으로
     * 일반적인 워크로드에서 1% 정도의 CPU 사이클 성능 향상

   SQLite3 WASM/JS 공식 프로젝트
"
"https://news.hada.io/topic?id=7845","Spring Framework 6.0 GA 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Spring Framework 6.0 GA 릴리즈

     * Java 17+ 기반
     * 새로운 AOT(Ahead Of Time) 엔진 도입
          + Spring Boot 3 에서 GraalVM 네이티브 이미지 지원 (Spring Native를 대체)
     * 가상 쓰레드 지원
     * Jakarta EE 9+ 로 이관하면서 생긴 변경 : Servlet 6.0, JPA 3.1, Tomcat 10.1, Hibernate ORM 6.1)

   Spring Native 는 완전히 fade out 느낌인건가요

   Java Virtual Threads 프리뷰 공개
   자바 동시성에 대한 새로운 접근 ‘가상 쓰레드’
"
"https://news.hada.io/topic?id=7854","TextShader - 텍스트로 쉐이딩한 JavaScript 예제들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 TextShader - 텍스트로 쉐이딩한 JavaScript 예제들

     * 튜토리얼, 지구 자전, xeyes, 만델브로트, 그래프, 바운스
     * charset 지정 가능 : default / ascii / block / debug
"
"https://news.hada.io/topic?id=7894","코딩 및 시스템 스킬로 돈을 버는 다른 방법이 있을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    코딩 및 시스템 스킬로 돈을 버는 다른 방법이 있을까요?

   회사로 돌아가기가 싫고, 돈버는 스킬은 없음(남이 벌게는 잘 해주는듯 한데..), 코딩 스킬을 이용해서 비즈니스 외의 것으로 돈을 버는 방법은 없을까 라는 HN의 질문에 대한 답변들
     * 현 시점 macOS 앱을 만들어서 파는게 꽤 니치함 (Lunar 개발자. 월 $3.5k~9k 쯤 번다고. 웹서비스 만들었던 건 다 실패)
     * 코딩 + 소설 쓰기 로 SF 팟캐스트 운영중 (현재 내 월 수익의 10%를 여기서)
     * 프로그래밍은 다른 모든 도메인을 지원가능. 지금은 개발 안하고 웹 마스터로 일함
     * 비영리 단체는 당신이 싫어하는 기업 환경과 매우 다를 수 있음
     * Stable Diffusion과 함께 AI쪽이 뜨거움. 이거 가지고 놀수 있으면 뭔가 사람들을 위한 재미난 걸 만들어 볼수 있을 듯
     * 남들이 돈을 잘 벌게 해주는 스킬 자체가 수익화 할수 있는 스킬임. 그게 바로 B2B 소프트웨어가 하는 것. 아이디어를 생각하려 하지 말고, 비즈니스 오너들과 문제에 대해 대화를 나누고 그들이 성장하도록 해결해주고 비용을 청구해 봐요

   괜찮은 아이디어들이 있네요.
   온라인 강의도, 개인들에게는 끝물인 것 같지만 가능한 한 형태가 아닐까요?

   Lunar - 맥 외장 모니터 밝기 조절 유틸
   M1 맥 지원하는 Lunar 개발기
"
"https://news.hada.io/topic?id=7940","Inkbase : Programmable Ink - 종이에 펜으로 그린 그림을 프로그래밍 할 수 있다면?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Inkbase : Programmable Ink - 종이에 펜으로 그린 그림을 프로그래밍 할 수 있다면?

     * 창의적인 연구를 진행하며, 이를 기반으로 Muse/Automerge등의 소프트웨어를 만드는 Ink & Switch의 새로운 아이디어
     * 종이에 그리고 적은 내용들을 프로그래밍 한다는 개념에서 출발
     * 펜으로 그린 그림과 텍스트 등의 객체를 인식하고, 각 객체에 속성을 지정 및 변경하고, 코딩이 가능(자체 개발한 Lisp형태 언어)
     * 주요 요소
          + 공간 쿼리 : 내부에 뭐가 있는지, 늘어선 여러개(streak) 중의 일부인지,..
          + 객체 인식
          + 마이크로 월드

   이 사이트의 글을 한번 소개한 적이 있네요
   Peritext - Rich Text를 위한 CRDT
"
"https://news.hada.io/topic?id=7927","Ask GN: 회사 내부 망에 있는 웹 시스템 접속할 때 https 사용하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Ask GN: 회사 내부 망에 있는 웹 시스템 접속할 때 https 사용하시나요?

   회사 내부 망에서 운영하는 웹 서비스 또는 시스템 접속할 때 https 사용하시는지 궁금합니다.

   https 사용하지 않는다면 어떤 이유로 이용하지 않는지도 알고 싶습니다.

   중요한 자원인경우 VPN 이용, 외부접근이 자유로워야하는 경우엔 https를 사용하는 편입니다

   서비스와 조직 구성, 네트워크가 복잡해지고 있어서 가능한한 https 로 구성해서 사용하고 있습니다.

   저희는 사용하고 있지 않습니다.
   회사 내부 서비스에 접속할 수 있는 방법이 VPN을 사용하는 방법밖에 없어서
   굳이 사용하고 있지 않는걸로 알고있습니다 :)
"
"https://news.hada.io/topic?id=7951","Lychee - 무료/오픈소스 사진 관리 시스템 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Lychee - 무료/오픈소스 사진 관리 시스템

     * 웹 기반으로 사진 관리
     * 셀프 호스트 가능한 서버
     * EXIF / IPTC 메타데이터 지원
     * Dropbox 임포트 지원
     * 사진에 태깅 가능
     * 웹 기반 공유 기능 (트위터 카드 지원)
"
"https://news.hada.io/topic?id=7929","git-delete-merged-branches - 머지된 브랜치들 편하게 지우기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             git-delete-merged-branches - 머지된 브랜치들 편하게 지우기

     * Repo를 깔끔하게 유지하기 위한 도구
     * 로컬 & 리모트 브랜치 삭제 지원
     * 다양한 형태의 머지 지원 (리베이스 머지, 스쿼시 머지, 싱글/범위 체리픽,..)
     * 여러개의 릴리즈 브랜치가 있는 워크플로우 지원
       → 'master/dev/staging 모두에 머지된 브랜치만 지우기'
     * 빠른 인터랙티브 설정
     * GitHub, GitLab, Gitea 등과 모두 동작
     * 매우 안전하게 동작함
          + 확인 또는 --yes 없이는 아무것도 지우지 않음
          + 확인할 때 기본값은 ""no""임. 엔터 친다고 삭제하지 않음
          + git push는 --force-with-lease 와 함께 실행되어, 서버와 로컬이 브랜치가 다르다면 삭제하지 않음
          + os.system 이나 쉘 코드를 사용하지 않음
          + --verbose 옵션으로 실행되는 모든 git 명령 확인 가능
"
"https://news.hada.io/topic?id=7899","독일 개인 정보 감시 기관에서 Microsoft 365는 GDPR과 호환되지 않는다고 결정을 내림","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         독일 개인 정보 감시 기관에서 Microsoft 365는 GDPR과 호환되지 않는다고 결정을 내림

     * 독일 연방 데이터 보호 당국 및 17개 주의 규제기관(DSK)의 합동 위원회와 Microsoft와의 2년간의 협상 끝에 결정
     * GDPR에 따라 조직들은 MS365를 합법적인 방법으로는 이용 불가하다고 평가
     * 핵심 이슈는 ""Microsoft가 개인 정보를 비즈니스 목적으로 이용하는 부분에 대해서 명확히 밝히고 있지 않다""는 것
     * 또한 Microsoft는 일반적으로 자신들의 목적을 위해서 텔레메트리 데이터를 대규모로 처리하고 있음
     * 다만 DSK의 발표는 ""집행 결정(Enforcement Decision)""은 아니라 ""평가(Assessment)""

   프랑스, 학교 및 공공기관에서 Office 365와 Google Docs 사용 금지
"
"https://news.hada.io/topic?id=7841","GPT-4 에 대한 소문들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GPT-4 에 대한 소문들

     * GPT-4는 거의 준비되었으며 12월에서 2월 사이에 출시될 예정
     * 튜링 테스트를 통과할지도
     * 매우 크고 Sparse함 (모든 뉴런이 한번에 활동하지 않는다는 것)
          + 크기를 비교하는게 무의미함
          + 내 생각엔 Sparsity(희소성)이 AI의 미래임
     * 텍스트, 오디오, 이미지, 비디오 입력을 허용하는 다중 모드(multimodality)
          + 이 역시 AI의 미래. 우리 뇌가 그럴뿐만 아니라 세상이 multimodal 이기 때문
     * 훈련비용이 GPT-3보다 훨씬 저렴한 $.e6($1~10M)
          + OpenAI가 비용을 줄이는 방법을 찾았다는 것을 의미
"
"https://news.hada.io/topic?id=7901","Redox OS - Rust로 작성된 Unix-like OS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Redox OS - Rust로 작성된 Unix-like OS

     * 마이크로커널 디자인
     * 드라이버들은 Userspace에서 동작
     * GUI 제공(Orbital)
     * Rust 표준 라이브러리 지원 및 Rust로 작성된 libc (relibc)
     * MIT 라이센스

   Theseus OS - Rust로 만든 OS
   Rust로 OS만들기
"
"https://news.hada.io/topic?id=7934","Google 검색 순위 시스템에 관한 새로운 가이드 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Google 검색 순위 시스템에 관한 새로운 가이드 소개

     * 구글이 자신들의 ""구글 검색 순위 시스템에 대한 통합페이지""를 만들어서 공개
     * 검색 순위 시스템이 ""업데이트"" 되는 것들에 대해서 정확한 표현을 사용할 예정
     * 순위 시스템에 관한 다른 유용한 페이지들 포함
"
"https://news.hada.io/topic?id=7862","Ask GN: 나에 대한 무엇을 기록하고 어떻게 피드백하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 나에 대한 무엇을 기록하고 어떻게 피드백하시나요?

   요즘 개인 참고용으로 업무일지를 작성하는데, 저만 혼자 보는 일지이다보니 업무 관련 아니더라도 이것저것 기록하고 있습니다. 예를 들면 오늘 먹은 식사라든지, 책은 무슨 책을 몇 쪽 읽었는지, 돈을 썼다면 어디에 썼는지 같은 것들이요. 직접 적는 것 외에도, 저렴한 스마트워치를 하나 구매해 매일 차고 있어서 심박수나 수면 시간 같은 것도 자동으로 측정하고 있습니다. 저는 관리하지 않는 것들이지만 찾아보니 몸무게나 오늘의 기분 같은 걸 적는 분들도 있더라구요.

   단순히 적기만 해서는 도움이 안 되는 것 같아서 도구의 힘을 빌려 시각화도 해보고 하는데, 이런 걸 해본 경험이 별로 없어서 무엇을 어떻게 트래킹하고 회고해야할지 감이 잘 안 잡히네요. 여러분은 자신의 정보를 어떻게 수집하고, 어떤 인사이트를 얻어가시는지 궁금합니다.

   Google Keep이요~. 초간단.

   아..작성하는 내용을 안 썼군요.
     * 책보다가 맘에드는 문구
     * 다른 사람들과 애기하다 나오는 보고싶은 영화, 책 목록
     * 외우고 있는 영어 표현들
     * 연습중인 기타연주악보
     * 뜬금없이 떠오르는 아이디어 (가능성은 0에 가까운 미래에 쓸 SF소설 소재)
     * 자주 쓰지만 기억 못하는 내용들
     * 등등

   이번주 당근메일 에서 본건데,
   하루조각 이라는 서비스가 있네요. 참고해 보셔도 좋을듯 합니다 ;)

   저는 업무에 대한 부분은 매일 써두는 편입니다. 저는 연구 업무를 하다보니 그때 그때 떠오르는 영감을 업무 노트에 써두면 좋더라고요. 추가로 분기별로 회고를 작성하는 편입니다.
   개인적인 부분은, 매일 아침에 작성합니다. 그날 꾼 꿈이나 일어났을 때의 기분, 생각 등을 적어두고, 간단하게 일기를 작성합니다.

   이것 저것 써보다가, 단발성으로 작성하는 케이스가 많아서 노션에다만 월단위로 간략하게 적어 주고 있어요.

   시각화 같은 기능은 없지만, 무엇을 했었는지 무엇때문에 delay되었는지와 같은 스페셜한 내용정도만 적어 주고 있는데 개인적으로 만족도는 가장 높은거같아요.

   애플워치 일기 앱으로 간단히 녹음/사진/위치 정보 위주로 감정과 메모 기록하고 있습니다! 앱이 가끔 리마인드해줘서 좋더라고요.

   저는 말씀하신 내용에 계획과 회고를 주간, 월간으로 하고 있습니다.

   저는 사용하지는 않지만 말씀하신 용도로는 Datasette - 개인용 데이터 웨어하우스 오픈소스 가 딱 맞아 보입니다.

   SQLite 기반으로 모든 데이터를 수집해서 시각화 해볼수 있고요.
   Twitter, GitHub, Apple HealthKit, Apple Photos, Google Takeout, Evernote, HackerNews, Pocket, Foursquare Swarm, Todoist.. 등 다양한 곳에서 데이터를 가져오는 플러그인들이 있습니다.

   전 노션만으로 만족하면서 쓰고 있습니다.
   찾아보니 시각화도 가능할것 같네요.

   노션에 일기와 그날 한 일들을 캘린더 페이지 형태로 간단히 정리하고 있긴합니다.
   다른 툴을 써볼까해서 이것저것 찾아봤는데, 확 끌리는 것이 없더라구요
     * 업무일지
       이곳에서 소개받은 Obsidian으로 매일 날짜, 한 일 목록을 적고 있습니다.
       가벼운 이슈트래커를 세팅해서 뭔가 interactive하게 바꿔보려고 했는데, 입맛에 맞는 디자인이나 기능을 제공하는 걸 찾기가 어려워서, 아날로그하게 쓰고 있네요..
       매달 말일에 업무 일지를 정리할 때나 연말에 회사 KPI 정리할 때 데이터로 쓰고 있습니다.
     * 운동 기록
       Planfit 이라는 앱으로 운동 기록하고 있습니다.
       내가 이전에 했던 동작, 무게 등의 기록을 입력하면, AI로 운동 루틴을 매번 추천해줘서 편리합니다.
       동작 설명도 GIF랑 텍스트로 설명해줘서 새로운 운동하기에도 좋아요.
     * 독서 기록
       리더스 라는 앱을 쓰는데, 요즘 삶이 피곤한지라 책을 안 읽어서 뭐.. 의미가 없네요.
       읽은 쪽수랑 기록해두고 싶은 글귀를 사진 찍어서 하이라이팅하는게 편리하게 되어있어요.

   이발, 손톱깍기, 콧털왁싱, 몸무게, 흡연, 대소변, 혈압, 커피음용 시간등을 기록하고 있습니다.
   손톱깍기와 콧털왁싱은 개인적인 기준으로 7일이 지나면 보기 싫어지는구나를 알게됐네요. 나머지는 그냥 기록만 하고 있어요.
"
"https://news.hada.io/topic?id=7832","2005년 노벨 물리학상 비하인드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2005년 노벨 물리학상 비하인드

     ""끝내주는 순간이야! 은퇴할 수가 없어!""

     * 2005 년 노벨 물리학상 수상자에 얽힌 이야기
     * 1970년대 막스플랑크 연구소의 헨슈 교수는 여러가지 주파수의 빛이 주파수 영역대에서 일정한 간격으로 위치한 optical frequency comb 를 제안함.
     * optcial frequency comb 는 beating (주파수가 약간 차이 나는 두 빛이 만날때 생기는 맥놀이 현상) 을 통해 다른 빛을 측정하는 자로 쓰일 수 있음.
     * 하지만 당시에는 이런 optical frequency comb 를 만들 기술이 없었음.
     * 이후 20년의 세월이 지나고, 1990년대 중반 mode-lock 레이저(여러 주파수의 빛을 동시에 만들어 내는 레이저)가 개발됨.
     * 헨슈 그룹은 optical frequency comb 의 프로토타입을 만들었지만, 원하는 결과를 얻을 수 없었음.
     * 당시에 JILA(미국 표준기술연구소와 콜로라도 대학의 합작 연구기관) 소속 펠로우인 존 홀도 비슷한 연구를 진행했지만, mode-lock 레이저가 아닌 레이저를 사용해서 한계가 있었음.
     * 1997년 홀이 JILA 에서의 40년 커리어를 마무리하고 은퇴를 고려하고 있었을 때, 스티븐 컨디프가 연구소에 합류함. 그는 mode-lock 레이저의 전문가로서, 벨 연구소에서 만들었던 mode-lock 레이저를 갖고 왔음.
     * 1998년 홀은 헨슈의 연구실에 방문해 frequency comb 의 프로토 타입을 완성시킬 레이저가 자신과 컨디프에게 있다는 것을 깨달았음.
     * 하지만 레이저 외에도 한가지 문제가 더 있었음. frequency comb 를 사용하기 위해서는 우리가 알고 있는 주파수로 frequency comb 의 영점을 조절할 수 있어야 하는데, 영점을 조절할 수 있는 조건을 만들어낼 수 없었음.
     * 마지막 퍼즐은 199년 5월 컨퍼런스에서 벨 연구소 소속이자 Lucent Technologies 에 속한 Jinendra Ranka 의 발표를 통해 해결됨. 그는 특수하게 디자인된 광섬유에 대해 발표했는데, 그 광섬유는 frequency comb 를 만들기 위한 조건에 부합하는 광섬유였음.
     * 홀과 그의 동료들은 특수한 광섬유 몇개를 얻을 수 있는지 요청했지만, 처음에는 회사의 변호사들이 지적재산을 지켜야 된다는 이유로 거절함. 컨디프가 갖고 있는 벨 연구소의 인맥을 통해서 마침내 1999년 10월, JILA 의 연구원들은 광섬유를 얻어 낼 수 있었음.
     * 연구팀은 모든 재료들-mode lock 레이저, 특수한 광섬유-을 한데 모아 frequency comb 를 만들어 홀의 연구실에 있던 레이저의 주파수를 측정했고, 결과를 2000년 초반에 출판함. (나중에 알게 된 사실인데, 헨슈는 독일의 한 회사가 필요로 했던 특수한 광섬유를 몇년동안 생산했었음)

     ""어떤 아이디어가 머리속에 있고, 그런 아이디어를 자연이 거절하지 않는다는 것을 발견하는 건 굉장히 즐거운 일이에요."" - Jan Hall

   35년에 걸친 증명이군요 ㄴㅇㄱ

   optical frequency comb 를 이용해 1.84Pbit 데이터를 전송한 기사가 생각나서 옮겨 봅니다.
"
"https://news.hada.io/topic?id=7882","Wiretap - Transparent WireGuard Proxy","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Wiretap - Transparent WireGuard Proxy

     * root권한이 필요없이 사용자 모드에서 실행되는 VPN-like 프록시 서버
     * 인텔/ARM 기반의 윈도우/맥/리눅스용 바이너리 제공
     * 클라이언트에 Wireguard를 설치(iOS/Android 및 대부분의 OS 지원) 하고
       서버에서 Wiretap을 사용자모드에서 실행하면 다른 Wiretap 서버 및 Wireguard 클라이언트와의 터널 생성 가능

   Mitmproxy 9 에도 비슷한 기능이 들어갔습니다.

   아 질문 하나 더. 이것들이 HAProxy 가 제공하는 기능들과 다른 영역의 기능인건가요?

   Wiretap 은 TCP/UDP 소켓 통신도 지원하는 반면 Mitmproxy 9 는 http(s) 만 지원하는 것 같은데 제가 제대로 이해한거 맞을까요?
"
"https://news.hada.io/topic?id=7946","Eruda - 모바일 브라우저용 콘솔","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Eruda - 모바일 브라우저용 콘솔

     * 모바일 브라우저에서 크롬의 개발자 도구 같은 기능을 제공

기능

     * Console: Display JavaScript logs.
     * Elements: Check dom state.
     * Network: Show requests status.
     * Resource: Show localStorage, cookie information.
     * Info: Show url, user agent info.
     * Snippets: Include snippets used most often.
     * Sources: Html, js, css source viewer.

   이거 예전에 생활코딩 이고잉님이 1분짜리 설명 영상 올려놓으셨던 게 있어서, 사용 방식에 대해 도움이 될까 싶어 영상 링크 공유해봅니다 :)

   https://www.youtube.com/shorts/xWk3qHleZ4c
"
"https://news.hada.io/topic?id=7944","GPT-3 에게 어린 시절의 일기를 입력한 뒤, 어린 나와 대화하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GPT-3 에게 어린 시절의 일기를 입력한 뒤, 어린 나와 대화하기

     * Michelle Huang이란 아티스트가 10년 넘게 작성한 자신의 어린시절 일기를 GPT-3에게 입력함
          + 어린 시절의 꿈, 두려움, 비밀등이 담겨 있는 일기
     * 그리고 과거의 자신을 시뮬레이션한 채팅 봇과 대화를 시도하면서 느낀 것

     '개인적으로 ""과거의 나""가 느꼈던 친절과 이해가 지금 느끼는 매듭이나 막힘을 푸는데 도움이 되었음'
     '어린 시절의 나에게서 이런 친절을 받을수 있어서 보람을 느꼈음'
     '더 넓은 학습 관점에서 눈에 띄는 것은, 기술이 정신건강에 이용이 될수 있다는 것'
     * NPC나 아바타에 대한 포텐셜을 볼수 있음
          + 나 자신에 기반한 디지털 페르소나를 상상해보거나
          + 특정 소설가, 시인, 대중 연사에 기반한 NPC가 있다면
     * 가상 세계의 게임내 인터랙션이나, 가상 치료사와의 대화등에 이르기까지
       이런 입력을 줄수 있다면, AI가 고도로 맞춤화된 응답을 제공하거나, 사용자 별로 다른 스토리텔링 생성이 가능
     * 새로운 SaaS(Storyline-as-a-service)가 만들어질 수 있음
          + 인게임 AI의 상호작용에서 생성된 '흥미로운 이야기'에 대한 큐레이터가 있어서, 사람들이 그 스토리를 구매하는 것
          + 사람들이 내가 AI 반응형 게임에서 경험한 여정이 공감 된다면, 그 스토리를 구매하고 직접 경험하는 게 가능
     * 일기 전체(25만~30만 단어)를 입력하면 계산 비용이 너무 비싸서, 중요한 스토리를 선택하고 시작하는게 더 나을 수 있음
          + 테스트에서는 13000자 정도를 사용

   향후 게임의 NPC는 플레이어의 기분에 따라 다른 콘텐츠를 변경합니까?

   가까운 미래에는 내가 하는 말을 평생 다 녹음해서 (최근에 이런 시도를 한 친구가 있다고 HN에서 본것 같네요) 그걸로 다 학습시키면 정말 또다른 자아를 만들 수 있을듯...

   이제 학생들이 일기를 디지털로 작성해 나가면 ai와 함께 커가는 미래가 온것인가요? 멋지네요

   와~ 좋네요~~ 기술로 우리 현실적 일상의 정서를 다시 한번 다잡아 볼 수 있는 기회가 될 것 같아요~~

   와 좋네요. 어쩌면 현재의 내가 잃어버린 과거의 나와의 대화라니...

   전체 대화 내용은 트위터 쓰레드에서 볼 수 있습니다.
   https://twitter.com/michellehuang42/status/1597006006403620864
   https://twitter.com/michellehuang42/status/1597006010820210689

   블랙미러 시즌2의 Be Right Back이 이와 비슷한 주제의 내용을 다룹니다.
   저는 블랙미러 시리즈 전체를 좋아해서요. 한번 보시길!

   죽은 연인과 관련한 에피소드지요? 시즌1은 정말 충격과 감동이었습니다.
"
"https://news.hada.io/topic?id=7828","머스크, 트위터 Blue 인증마크 구독서비스를 11/29에 재개할 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                머스크, 트위터 Blue 인증마크 구독서비스를 11/29에 재개할 예정

     * 월$8 서비스로 변경해서 오픈했다가 가짜 계정 문제로 잠시 중단
     * 새로 오픈한 이후부터는, 이름을 변경할 경우 트위터가 ToS에 맞는지 인증할 때까지 블루 마크를 잃게 됨
     * 또한 돈을 내지 않는 기존 블루 인증마크 계정들은 몇달 내에 인증마크가 모두 제거될 것
"
"https://news.hada.io/topic?id=7923","개발자로 살아남는 "진짜" 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           개발자로 살아남는 ""진짜"" 방법

   어떻게 하면 개발을 ‘잘’할 수 있을까?
   괜찮은 개발자로 성장하기 위한 습관에 대해 알아보기
     * 첫 번째, 기술적 상상을 하자.
     * 두 번째, 나를 위해 기록하자.
     * 세 번째, 밖으로 나가자.

   구현자가 아닌 개발자를 정의해보자.
"
"https://news.hada.io/topic?id=7844","Slashbase - DB 협업 개발용 웹 IDE 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Slashbase - DB 협업 개발용 웹 IDE 오픈소스

     * 서버를 실행하고 브라우저에서 DB에 접속, 쿼리를 실행하고 팀내에서 공유하는 협업 IDE
     * PostgreSQL 과 MongoDB 지원
     * Go + Nextjs 로 개발되었고 싱글바이너리로 실행됨

   일단 아직 초기라 엄청 특별한 기능이 있는 것 같지는 않습니다. Beekeeper / DbGate 같은 오픈소스들도 참고하세요
     * Beekeeper Studio - 오픈소스 SQL 에디터 및 DB관리자
     * DbGate - 오픈소스 크로스플랫폼 (no)SQL DB 클라이언트

   혹시 추천하시는 오픈소스는 어떤 것이시려나요?
   마침 저희는 PostgresSQL을 쓰고 DBeaver를 종종 쓰는데 좋은 툴이 있으면 추천받고 싶습니다.
"
"https://news.hada.io/topic?id=7918","Show GN: JUSO.IO - 주소를 공유하는 가장 쉬운 방법 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: JUSO.IO - 주소를 공유하는 가장 쉬운 방법

   인원 변화가 많은 스타트업이다보니, 1~2년에 한번은 이사를 합니다. 회사 주소를 외우지 못하는데다 (...) 주소를 공유할 때도 과정이 번거롭습니다. 쉽게 외우고, 공유할 수 있는 짧은 URL의 주소 상세 페이지 서비스를 사이드 프로젝트로 만들었습니다. 6개월 정도 혼자 써보았고 너무 편해서 (되돌아갈수가 없어...) 다른 분들에게도 도움이 될 것 같아, 간단한 서비스로 만들어보았습니다.

   문제
     * 회사 주소 알려줄 때마다 그 과정이 번거롭고 귀찮다.
     * 일단 나는 회사 주소를 외우지 못한다. 그렇다고 대충 빌딩명만 알려주기도 애매해다. 그래서 네이버 지도에서 검색해서 공유하기 눌러서 링크 복사해서 알려준다. (아.. 귀찮아)
     * 모바일로 메일 답장에 주소 줄 때도 매우 귀찮다.
     * 그냥 주소만 보내면 받는 사람은 그거 복사해서 검색해봐야한다.
     * 그 사람 편하라고 네이버 맵에서 검색해서 URL을 알려줘도, 받는 사람이 주로 쓰는 서비스가 네이버 지도가 아니면 주소 복사해서 다른 앱에서 열어야 한다. 더 귀찮다. 이럴꺼면 그냥 주소 알려주지

   해결책 : 가장 쉬운 주소 공유, juso.io
     * juso.io/해빗팩토리, juso.io/habitfactory 같은 형식으로 동일한 페이지로 이동할 수 있는 한글, 영문 주소 링크를 만들고 공유할 수 있다. 카톡이든, 메일일 쓰는 중이든 자기가 기억하고 있는 쉬운 주소 형태로 공유가 가능하다.
     * juso.io 로 만들어진 페이지입니다, 등을 넣고 클릭시 홈페이지로 이동한다.
     * 받는 쪽이 있는 서비스라, 사용자가 있으면 viral loop 가 생긴다. (생겼으면 좋겠다)

   주요 기능
     * 외우기 쉽고, 공유하기 쉬운 짧은 URL (juso.io/한글, juso.io/english 동시 지원)
     * 몇가지만 입력하면 생성되는 깔끔한 상세 페이지 - 샘플 : juso.io/해빗팩토리
     * 네이버 지도, 카카오 지도에서는 안내하기 힘든 오시는 길에 대한 더 상세한 안내
     * 주차 및 추가 정보 입력
     * 주소 입력으로 자동으로 연결되는 네이버 지도, 카카오 지도, 티맵 (티맵은 모바일에서만 지원)
     * 3개까지 만들 수 있음. 저는 정윤호 개인 페이지로도 생성 juso.io/정윤호

   지금 만드세요! JUSO.IO 서비스 바로가기 >

   정말 잘 사용하고 있습니다!
   여기에 우편번호까지 보이면 더 편하게 이용할 것 같습니다.!
     * 아주 깔끔하고 좋습니다! 사용자 입장이 잘 고려된 서비스입니다.
     * 다만 학교나 공공기관이 쓰기에는 보험 광고가 붙으니 사용이 꺼려지네요 ㅠ

   오 좋네요 !!

   정말 훌륭한 아이템이네요. 응원합니다!!

   서비스가 너무 멋져서 저의 짧은 글의 마지막에 GeekNews 화면과 juso.io 내용을 사용했는데, 혹시나 문제가 되면 알려주세요.

   https://brunch.co.kr/@muyeolhong/25

   저는 고맙습니다 ㅋ

   주소 변경 기록도 쭉 있으면 좋을 것 같네요

   상당히 괜찮네요.
   잘 사용하겠습니다

   감사합니다. 여러분들이 여러 개선 아이디어들 주셔서 더 개선해보도록 하겠습니다!

   와 좋은데요

   안심번호처럼 내 개인정보가 노출되지않는선에서 주소만 딱 노출시키고싶다는 생각을 한적있는데 재밌는 서비스인거같습니다!

   좋은 서비스 감사합니다. 잘 쓰겠습니다.

   집 주소로 만들어보면서 느꼈는데 간단한 프라이버시 보호 기능이 있으면 어떨까요? (입장시 비밀번호라든가)

   오~ 생각 못했는데, 좋아요! 감사합니다!

   추가하실때 힌트도 줄 수 있으면 좋을 것 같아요.
   ""비밀번호는 제 전화번호 입니다"" 라던지..

   너무 좋네요! 잘 쓰겠습니다 :D

   집 주소로 테스트해보았습니다.
   상당히 유용하겠습니다!

   너무나 좋은 서비스네요. 잘쓰겠습니다 :)

   와 너무 좋네요!

   사무실 건물이 입구가 좀 요상해서 항상 추가 설명을 했었는데, 같이 적을 수 있어서 좋네요
   가능하다면 사진 첨부(입구 사진등)가 되면 좋겠는데, 아니면 링크라도 넣을 수 있게 해주세요! ㅎㅎ

   본문에 추가 설명하는 부분에 링크를 넣을수는 있는데 ... 오시는 방법쪽에도 참고할 수 있는 이미지나 링크를 넣을 수 있도록 해볼께요! 감사합니다. xguru님!
"
"https://news.hada.io/topic?id=7924","GitHub, 미래를 위해서 REST API에 날짜 기반 버저닝 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GitHub, 미래를 위해서 REST API에 날짜 기반 버저닝 도입

     * 기존 연동들에 영향을 주지 않고 GitHub API를 계속 향상 시킬수 있도록
     * X-GitHub-Api-Version 헤더를 통해서 ""2025-12-25"" 일자의 버전을 요청 가능
     * Breaking Changes에 대해서만 적용할 예정
     * 기존 API 사용자는 아무런 변동 없음. 현재의 버전은 ""2022-11-28"" 이며, 이걸 계속 요청 가능
     * REST API에만 반영, GraphQL / Webhook 에는 반영되지 않음
"
"https://news.hada.io/topic?id=7855","Video Intelligence - Semantic Video Search","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Video Intelligence - Semantic Video Search

     * 로컬에서 비디오안의 사람 또는 객체를 검색하는 앱
     * 일반PC에서도 풀HD 해상도 영상에 대해 실시간으로 실행
     * 한 프레임안의 멀티 객체 인식
     * 점프 가능한 핫스팟 생성
     * 인식된 객체를 등록 가능
     * 윈도우 / 리눅스(지원예정)
     * mkv, mp4 비디오 컨테이너 및 HTTP/RTSP 비디오 스트림 지원
     * AVX2 명령어 셋을 가진 쿼드코어 CPU 필요(x86_64)
"
"https://news.hada.io/topic?id=7936","TrailDB to Ziegel(Cgo to Go)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TrailDB to Ziegel(Cgo to Go)

   OLAP 데이터베이스의 스토리지 엔진 변경 이야기
     * C/C++ 에서 Go 로 사용언어를 변경
     * 변경 이유부터 최적화, 결과까지 과정을 소개
     * 남은 문제와 앞으로 해야 할 일도 정리되어 있음
"
"https://news.hada.io/topic?id=7883","OpenStreetMap으로 Google Maps 대체제 셀프 호스팅 해보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               OpenStreetMap으로 Google Maps 대체제 셀프 호스팅 해보기

     * 하드웨어 : 인텔 i7 데스크탑 + 128GB램(지구 전체 지도 호스팅을 위해)
     * 요구사항 : 드래그 & 줌 가능한 지도. 경로 라우팅. 장소 검색
     * 구현 : 타일서버(지도) + Valhalla(라우팅) + Nominatim(지오코딩)
     * 도커로 호스팅 가능하게 만들어서 공개
     * 128GB램인데.. 66GB짜리 지구 전체 OSM지도는 로딩이 계속 실패해서, 12GB짜리 북미 지도를 사용했음
     * 구글 지도는 매월 $200 까지의 API호출은 무료(웹)
       iOS/Android는 1000개 요청당 $7 이며, (교통정보 없는)경로 API는 $5/1000, 지오코딩API도 $5/1000
       간단히 계산해보면 방문자가 2개 장소를 검색하고 맵을 보고 경로 검색을 하면 약 1000명당 $15
       즉, 월 13000명 까지는 무료 티어로 서비스 가능. 무료티어 후에는 방문자 한명당 $0.015
     * 셀프호스팅 장비로 한다면 감가상각 했을때 월 $141정도로 서비스 가능

   http://download.geofabrik.de/asia/south-korea.html
   한국 전체의 OSM 파일 용량이 160MB 정도니까 오픈스트리트맵의 완성도가 더 높아진다면 국내에서도 오픈스트리트맵을 고려해볼 만한 것 같습니다.

   많이들 하고 계시지만, 한국은 기여자 숫자가 많지는 않을거에요. 어제 날짜에 에딧된 내용 기준으로 세계 59위.
     * https://osmstats.neis-one.org/?item=countries
     * https://osmstats.neis-one.org//…
"
"https://news.hada.io/topic?id=7921","Git Notes - 멋지지만 사랑받지 못하는 git의 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Git Notes - 멋지지만 사랑받지 못하는 git의 기능

     * git에 저장되는 객체를 수정하지 않고 노트를 추가하는 기능
     * 보통 커밋에 별도의 메타데이터를 추가하는 용도로 사용
          + 커밋 이후에도 나중에 추가/수정/삭제가 가능하기 때문
          + 기본으로 refs/notes/commits 에 별도로 저장됨
     * git log로 보면 Notes: 항목에 같이 보여짐
     * 실제 사용 사례
          + 'git 프로젝트'에서는 커밋을 관련 메일링 쓰레드와 연결하는데 사용됨
          + 커밋/브랜치에 시간 트래킹
          + 코드리뷰 및 테스팅 관련 정보를 기록
     * Gerrit용 reviewnotes 플러그인을 이용하면 코드 리뷰를 git note에 기록 가능
     * 구글의 한 개발자는 git-appraise 라는 git note 기반 풀 코드 리뷰 시스템을 만들기도 했음
          + ""완전 분산 코드 리뷰"" 라고 이름 붙임
          + 로컬 머신에서 ""리뷰 요청/커멘트/리뷰 및 머지"" 가능함
          + 웹 인터페이스도 가지고 있음
     * 하지만 아무도 git notes를 사용하지 않음
          + 현재로서는 git notes는 사용하기 어려움
          + GitHub은 2014년 이후로 Notes를 표시하는 것을 중단
          + 커밋에 대해서는 gitconfig를 이용해서 note를 좀 더 쉽게 보고 추가 가능하지만, blob/tree에 대해서는 쉽지 않음

Forge independence (위조된 독립)

     * git은 분산 코드 리뷰 시스템임. 하지만, git repo의 많은 가치 들이 GitHub같은 금고에 잠겨져 있음
     * git notes는 대안으로 가는 길임
     * git은 코드 조각의 히스토리를 배포함. git notes는 전체 프로젝트의 히스토리를 배포 가능하게 할 수 있음

   git note는 처음 알았네요. 공유 감사합니다.
"
"https://news.hada.io/topic?id=7879","프랑스, 학교 및 공공기관에서 Office 365와 Google Docs 사용 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             프랑스, 학교 및 공공기관에서 Office 365와 Google Docs 사용 금지

   오프라인 버전은 괜찮지만 온라인 버전은 보안상 이유로 금지

   지금까지 허용되었었다는게 더 놀랍네요..
"
"https://news.hada.io/topic?id=7851","Postgres Insider Terminology","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Postgres Insider Terminology

     * Postgres 개발자들이 사용하는 용어들에 대한 (비공식) 설명
     * Tuple
     * Record & Row
     * Array
     * Relation
     * Target List and Restrictions
     * Schema
     * Page
     * TOAST

   HN에는 몇개를 추가해야 한다고 댓글들이 있네요 https://news.ycombinator.com/item?id=33462983
   timestampz, ctld
"
"https://news.hada.io/topic?id=7830","한국인이 가장 많이 사용하는 음악 스트리밍 앱은 '유튜브 뮤직'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  한국인이 가장 많이 사용하는 음악 스트리밍 앱은 '유튜브 뮤직'

   안드로이드 기준 : 유튜브 뮤직 459만>멜론 454만>지니뮤직 232만>플로 149만

   유튜브 프리미엄을 사용하면 뮤직까지 사용 가능하니 별도 뮤직 앱 구독이 필요없어서 좋은거 같아요
"
"https://news.hada.io/topic?id=7917","동적 Viewport 단위 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           동적 Viewport 단위 사용

     * 데스크탑에서 vw, vh 는 viewport 의 크기를 잘 나타냄
     * 모바일에서는 툴바, 주소창 같은 동적으로 생성되는 UI 에 의해 크기의 영향을 받음 따라서 100vh 는 viewport 의 크기를 넘어서거나 스크롤등으로 주소창이 움츠려들면 viewport 크기에 맞게 됨
     * CSS 워킹그룹에서 이런 동적으로 변화하는 크기에 맞추어 쓸 수 있는 단위 제공해서 실제 viewport 와 딱 맞는 크기를 제공
          + Large viewport: lvh 는 동적으로 생성되는 UI 가 없는 경우
          + Small viewport: svh 는 움처려든 UI 가 다시 확장 된 경우
          + Dynamic viewport: dvh 동적 UI 상태에 맞게 viewport 크기와 같아짐 Chrome 108, Firefox 101, Safari 15.4 에서 지원
"
"https://news.hada.io/topic?id=7864","Tailscale Funnel 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Tailscale Funnel 공개

     * 외부에서 Tailscale 네트웍으로 연결하기 위한 통로를 제공하는 기능
     * Tailscale 노드의 일부를 매우 안전한 방법으로 외부에 노출
     * MagicDNS 에서 node명.tailnet.ts.net 주소를 Funnel 서버에 지정하는 방식으로 설정
     * funnel-ingress-node 가 Tailscale 네트워크에 추가되고 내부 노드와 연결
     * 외부에서 node명.tailnet.ts.net 주소로 서버에 접속을 요청 가능
"
"https://news.hada.io/topic?id=7849","Chartist.js - SVG로 만드는 반응형 차트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Chartist.js - SVG로 만드는 반응형 차트

     * Convention over Configuration 으로 쉬운 핸들링
     * 스타일은 CSS, 제어는 JS로 분리
     * SVG로 완전 반응형 및 DPI independent
     * 미디어쿼리 지원
     * Sass로 커스터마이징 가능
"
"https://news.hada.io/topic?id=7835","Fedora 37 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Fedora 37 릴리즈

   개인적으로 밀고있는 배포판 페도라의 37 버전이 릴리즈 되었습니다 🙌
     * gnome43 포함
          + gnome 데스크탑의 최신 버전인 43버전이 포함되었습니다.
          + 주) gnome 43 또한 많은 UI/UX 개선이 있었어서 매우 기대가 됩니다!
     * 새로운 배경화면 포함
          + 주) 어차피 다들 바꿔 쓰시지 않나요 바탕화면..? 참고로 저는 fondo 라는 앱을 씁니다.
     * 라즈베리 파이 4 를 공식적으로 지원합니다. 3D가속 포함.

   예전에 라즈베리파이1 때는 pidora가 있었는데.. 그 친구는 어디로 사라진걸까요.. 이제는 fedora에서 아예 공식적으로 지원을 하네요😮
"
"https://news.hada.io/topic?id=7903","Finch - 아마존이 공개한 컨테이너 개발용 오픈소스 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Finch - 아마존이 공개한 컨테이너 개발용 오픈소스 클라이언트

     * 개발자 로컬환경에서 리눅스 컨테이너를 만들고, 실행하고, 퍼블리시 하는 새로운 커맨드 라인 도구
          + 리눅스가 아닌 호스트에서 리눅스 컨테이너를 구축하고 실행하는 것에 도움을 주기 위한 것
     * 초기 버전은 macOS(인텔/애플)만 지원. 윈도우/리눅스도 지원 예정
     * Lima + nerdctl + containerd + BuildKit

   Lima : Linux VM on Mac
"
"https://news.hada.io/topic?id=7831","테크 뉴스 사이트 Protocol 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       테크 뉴스 사이트 Protocol 서비스 종료

   2020년에 정치에 관한 인터넷 신문인 Politico 의 자매지로 시작했으며 테크 기업 내부 소식과 기술 관련 정책을 다루던 테크 뉴스 사이트 Protocol이 모든 직원을 해고하고 발행 중단을 선언함.

   많이 아쉽네요.ㅠ

   아.. 종종 읽을만 한 글이 있었는데 아쉽네요.
   긱뉴스에 올라왔던 Protocol.com 의 글들 입니다.

   Plain-text 인터넷이 온다
   구글, Dolby에 대항하는 오픈 미디어 포맷 개발중
   Apple이 Hey에게 보낸 리뷰 거절 메일
   VC들이 추천한 창업자가 꼭 읽어야 할 책들
"
"https://news.hada.io/topic?id=7896","Franz - macOS용 Apache Kafka 데스크탑 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Franz - macOS용 Apache Kafka 데스크탑 클라이언트

     * Swift + Racket으로 작성된 네이티브 클라이언트
     * Kafka Topic & Record 브라우징
     * Record Consume & Publish 가능
     * 컨슈머 그룹 관리 지원

   이름이 좋네요

   저만 그런줄 모르겠는데 브로커 서버 덤프로 입력하면 연결도 잘 안되고 확실히 베타라 원할하게 쓸 수 있다는 느낌은 안드네요.. 접속 실패했을 때 새로 설정하는 창으로 돌아가기도 힘들고

   아직은 cmak이나 https://github.com/provectus/kafka-ui
   이게 더 좋아보입니다
"
"https://news.hada.io/topic?id=7904","고급 자바스크립트 배우기 by John Resig","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      고급 자바스크립트 배우기 by John Resig

     * jQuery 개발자가 만든 15강짜리 자바스크립트 교육 자료
     * 자바스크립트 기본을 아는 중급~고급 개발자용
     * 페이지 내에서 코드를 수정하고 바로 실행 가능

목차

    1. Our Goal
    2. Defining Functions
    3. Named Functions
    4. Functions as Objects
    5. Context
    6. Instantiation
    7. Flexible Arguments
    8. Closures
    9. Temporary Scope
   10. Function Prototypes
   11. Instance Type
   12. Inheritance
   13. Built-in Prototypes
   14. Enforcing Function Context
   15. Bonus: Function Length

   오래전에 본 사이트같다 했더니 맞군요.

   사이트 안의 각주에도 달려있듯, 여기 있는 내용은 존 레식 본인의 책 자바스크립트 닌자 비급(YES24 링크)에서 다루고 있습니다.

   알면 좋지만 꽤... 오래 된 내용이라고 생각합니다.
"
"https://news.hada.io/topic?id=7907","구글(알파벳), 저성과자 약 1만 명 정리해고할 수도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글(알파벳), 저성과자 약 1만 명 정리해고할 수도

   새로운 성과 관리 시스템이 직원의 6%(1만명)을 저성과자로 분류(예전엔 2%) 예정

   The Information의 기사인 10,000 Google Employees Could Be Rated as Low Performers 를 보고 쓴 기사입니다.
   원래 기사에서는 Meta/Shopify/Gemini 가 정리해고 할 때 이런 성과 평가를 참고했으므로, 그렇게 될 수 있지 않을까 라고 예상한 것 같네요
"
"https://news.hada.io/topic?id=7919","메타의 최신 대규모 언어모델 'Galactica'가 등장 3일만에 자취를 감춘 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             메타의 최신 대규모 언어모델 'Galactica'가 등장 3일만에 자취를 감춘 이유

     * 갤럭티카는 4,800만 개의 과학 기사, 웹사이트, 교과서, 강의 노트, 백과사전 데이터로 학습한 ‘과학을 위한’ 대규모 언어모델
     * 과학자들에게 도움을 주려고 공개했지만, 편향적이고 부정확하며 비상식적인 결과만 생산
     * “학술 논문을 요약하고 수학 문제를 해결하며 위키(Wiki) 기사를 생성하고 과학 코드를 작성하고 분자와 단백질에 주석을 다는 등 다양한 일을 할 수 있다.” 라고 했지만, 사실과 허구를 구별할 수 없는 생각 없는 봇(bot)에 불과
     * 11/15일 발표 후 3일만에 공개 데모를 삭제
"
"https://news.hada.io/topic?id=7840","Show GN: PublicDataReader: 공공 데이터 조회 파이썬 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: PublicDataReader: 공공 데이터 조회 파이썬 라이브러리

  PublicDataReader

   PublicDataReader는 Open API를 통해 공공 데이터를 조회하는 과정을 자동화하는 오픈소스 로우코드 파이썬 라이브러리입니다. 즉시 분석에 활용할 수 있는 형태로 데이터를 조회할 수 있어 생산성 향상에 도움을 주는 도구입니다. 공공 데이터 제공처 마다 서로 다른 API 명세를 확인하는 작업, 명세에 따라 적합한 형식으로 데이터를 요청하는 코드를 작성하는 작업 그리고 반환된 데이터를 분석 가능한 형태로 가공하는 작업 등의 번거로운 작업들을 단 몇 줄의 코드로 자동화할 수 있습니다. 발급받은 Open API 서비스 인증키와 PublicDataReader 라이브러리만으로 원하는 데이터를 쉽게 조회할 수 있습니다.

  설치방법

pip install PublicDataReader

  데이터 제공처 별 조회 방법

     * KOSIS 국가통계포털 데이터 조회 방법
     * 공공데이터포털 데이터 조회 방법
     * 서울 열린데이터광장 데이터 조회 방법
     * Vworld 데이터 조회 방법

  소스코드

     * PyPI
     * GitHub

   대단하십니다. 공공데이터 활용해봐야겠네요.

   개인 개발자분이 만든거였군요 ㄷㄷ 감사합니다!

   제가 예전에 PublicDataReader - 공공 데이터 조회 라이브러리 뉴스로 올리긴 했었는데, 개발자께서 직접 Show에 올려주셨네요!
   훌륭한 작업을 공개해 주셔서 고맙습니다.
"
"https://news.hada.io/topic?id=7914","Rune 프로그래밍 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Rune 프로그래밍 언어

     * Python에서 영감을 받은 빠르고, 안전하고, 생산적인 시스템 프로그래밍 언어
     * C/C++과 잘 연동되도록 설계됨
     * Structure-of-Array(SoA) 메모리 관리 방법을 통해서 메모리 집약적 어플리케이션에서 C++보다 빠른 것을 목표
     * 아직 초기 상태로 프로덕션에 적합하지 않음
     * 구글 Repo에 있지만 공식적으로 지원되는 구글 제품은 아님

   Ruby 의 영향을 받은 Crystal 이라는 언어가 생각나네요.. 얘는 시스템 프로그래밍 언어는 아니고 범용 언어 포지션이긴하지만요...

   잘 보고 있습니다.
"
"https://news.hada.io/topic?id=7935","TypeScript 4.9 릴리즈 [번역]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        TypeScript 4.9 릴리즈 [번역]

     * satisfies 연산자
     * in 연산자를 사용한 목록에 없는 프로퍼티 좁히기
     * 클래스의 자동 접근자
     * NaN에 대한 동등성 검사
     * 파일 감시는 이제 파일 시스템 이벤트를 사용합니다.
     * 에디터용 “Remove Unused Imports” 및 “Sort Imports” 명령어 추가
     * return 키워드에 대한 정의한 부분으로 이동 기능
     * 성능 개선
     * 정확 수정 및 브레이킹 체인지

   5.0도 기대가 됩니다 :D

   satisfies: 안전한 업캐스팅 (TypeScript 4.9)
"
"https://news.hada.io/topic?id=7955","Microsoft가 나에게 맥북을 사라고 강요하고 있다 - Windows Modern Standby","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Microsoft가 나에게 맥북을 사라고 강요하고 있다 - Windows Modern Standby

     * 윈도우 노트북 사용시에 가끔 혼자 가방안에서 전원이 켜진 채로 열을 내며 배터리를 소모한 경험이 있는 사람이 많음
     * 이 문제는 새 노트북에 기본 값인 ""Windows Modern Standby"" 또는 S0 슬립모드 때문에 생기는 것
          + 네트워크에 연결된 커넥티드 슬립모드. 블루투스도 동작하고, 윈도우즈 업데이트도 실행
     * 기존의 S3(System Power State S3)로 돌리면 해결이 됨(램 유지되는 슬립모드)
     * 문제는 기존엔 제어판에서 쉽게 설정 가능했는데, 이제는 윈도우가 업데이트 되면서 없어져서 명령창에서 실행해야함
     * 게다가 많은 노트북 펌웨어가 S3를 제대로 지원하지 않음. (BIOS세팅에 가보면 활성화 할 수 있는 경우도 있음)
     * 유튜버의 예측은
          + 파워가 연결된 상태에서 슬립모드로 가면 ""네트웍 연결"" 상태에서 슬립모드에 들어가고, 가방안에서 업데이트를 시도하면서 전원을 소모하는 걸지도..
          + 쉬운 해결 방법은 슬립 모드로 가기전에 전원 부터 빼고 슬립모드에 들어가면 될 것으로 추측

   댓글에 마이크로소프트 (OS팀이 아닌)엔지니어가 테스트 해보니 유튜버의 예측이 맞다고 하네요.
   전원선 연결 상태에서 슬립 들어가는 것과 뺀 상태에서 들어가는 것 동작이 다르다고..
   슬립모드 상태에서 전원선을 연결 해제하면 자동으로 네트워크도 끊어야 하는데, 안 끊어지는 버그인듯 해서 OS팀에 제보한다고..
"
"https://news.hada.io/topic?id=7873","보기 쉽게 정리한 iOS 16 디자인 가이드라인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       보기 쉽게 정리한 iOS 16 디자인 가이드라인

    1. 기기 스크린 사이즈

     * 일반 사용자라면 375x812 또는 375x667
     * 테크 & 디자인 사용자 위주라면 390x844

    2. 페이지 레이아웃 : Status Bar, 다이내믹 아일랜드, Nav Bar, Tab Bar
    3. Typography
    4. Navigation
    5. UI elements
    6. App icons
    7. Other iOS conventions
    8. Downloads : 디자인 템플릿 Figma 파일
    9. Further reading & resources

    1. 이전까지는 보통 디자이너가 iOS를 디자인할 때 375x812로 작업했으나, iPhone 14 Pro로 새로운 폼팩터가 나온 이상 앞으로는 iOS 디자인을 작업할 때 375x812가 아닌 iPhone 14 Pro 해상도인 393x852로 대체해 쓰지 않을까 싶습니다.
    2. 해당 아티클에 오류가 있는데요, Dynamic Island가 있는 기기의 Status Bar 높이는 59pt가 아닌 54pt입니다.

   오, 정정 감사합니다. 매의 눈이시네요!
"
"https://news.hada.io/topic?id=7892","GPT-3로 CLI 명령에 대해 질문해서 알아내는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GPT-3로 CLI 명령에 대해 질문해서 알아내는 도구

     * ""GPT-3 Powered CLI""
     * $ ai ask ""check running process on port 8000"" 라고 물어보면 ""lsof -i tcp:8000"" 이라고 답변해줌
     * OpenAI API Key 입력 필요
     * TypeScript 오픈소스
"
"https://news.hada.io/topic?id=7930","mine-city-2000 - 심시티2000 도시를 마인크래프트로 변환하는 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             mine-city-2000 - 심시티2000 도시를 마인크래프트로 변환하는 오픈소스

     * SimCity 2000의 도시파일(*.sc2) 를 읽어서 빌딩과 지형이 있는 마인크래프트 월드로 변환
     * 개발을 시작한지 오래되어서 마인크래프트 자바 에디션만 가능(다른 오픈소스를 이용해서 현재 버전으로 열수있게 처리는 가능)
     * 5개의 서브 프로젝트
          + SimCityReader : .sc2 파일 읽기
          + AnvilFile : Minecraft의 Anvil 파일 포맷을 처리하기 위한 유틸리티 클래스
          + MinecraftEditor : Minecraft World 생성 및 편집 클래스
          + MineCity2000 : 지형 및 빌딩을 이용해서 Minecraft World 생성
          + MineCity2000-GUI : 프로그램 실행용 기본 GUI
     * 지원 : 가정집(중간3/4/5,상위1~4,하위1~3), 콘도(1~3), 경찰서, 워터펌프, 전력선, 도로, 지하수, 나무, 창고, 주유소, 작은 사무실 건물, 화학 창고, 장난감 가게, 편의점, 공장, 중간크기 사무실들, 아파트, 터널, 기찻길, 상점, 여관, 항구 창고, 작은 공원, 소방서, 교회, 학교, 중/대형 공장, 부두, 병원, 회사 본사 건물, 대형 공원, 동상, 버려진 빌딩,..
     * 지원 안되는 부분 : 지하철, 고속도로(대부분), 수중 파이프?, ???

   심시티 2000이 아니라 요즘 나오는 시티즈 같은 게임이었다면 폭발적인 반응이 기대되는데 아쉽네요

   내부가 구현되어 있는걸 보니, 심시티 기반 건물들을 미리 만들어놓고 대체(?) 해주는 것 같네요. 신기합니다 ㅋㅋ

   재미난 컨셉이네요. 내가 만든 도시를 직접 마인크래프트에서 돌아다녀볼 수 있다니!
   롤러코스터 타이쿤이나 테마파크 타이쿤 같은 것에서 세이브 파일 읽는 부분만 따로 만들면 다용도로 활용가능 하지 않을까 생각도 드네요.
"
"https://news.hada.io/topic?id=7926","Ask GN: 네트워크 장비 hang 감지 문의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: 네트워크 장비 hang 감지 문의

   안녕하세요.
   인프라 모니터링에 관심이 많은데요.

   네트워크 장비가 hang이 발생한다면
   빨리 감지할수 있는 방법이 뭐가 있을까요?

   트래픽이 정상적으로 흐르지 않을경우...
   mns에서도 감지가 가능한가요?

   cli를 통한 명령어 정상실행 결과를 주기적으로 가져와 볼까도 생각중입니다.
   고견 좀 부탁드려요.

   트래픽이 흐르지 않으면 in/out 이 0 가 될테니 nms 에서 alert 설정하실 수 있을겁니다.
   그리고, 모니터링 방법에는 네트워크 구성에 따라서 여러가지 방법이 있을텐데요.
    1. 외부에서 내부로 혹은 내부에서 외부로 ping check - ping mesh
    2. 스위치 로그 모니터링 - hang 이 발생하면 연결된 장비들에서는 link 가 다운되니까 그걸 감지
    3. 간혹 link 는 살아있지만, 트래픽 처리를 못하는 경우가 있는데요. 이럴때는 인접한 장비에서 in/out packet 을 체크해서 임계치를 설정

   대강 생각나는건 이 정도네요.
"
"https://news.hada.io/topic?id=7859","Tea - Homebrew 개발자가 만든 새로운 패키지 매니저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Tea - Homebrew 개발자가 만든 새로운 패키지 매니저

     * brew2 / Unified Package Manager
     * 패키지를 설치하지 않고 ~/tea에 넣어두고(stow) 사용할 수 있도록 만들어줌
          + 시스템 글로벌한 변경을 하지 않음
          + 패키지는 relocate 가능
          + 시스템의 사용자 별로 독립해서 설치 가능
     * 프로젝트 별로 다르게 설정해서 가상 환경처럼 사용 지원
     * 파이프라인으로 연결해서 실행 가능
     * 인터프리터로 사용하는 것도 지원 tea my-script.py 하면 필요한 파이썬을 알아서 설치하고 실행
     * Typescript 오픈소스
     * ""brew를 대체하는게 목적이 아님""

   아주 좋네요. 저도 홈 디렉토리에 package.json을 만들어 두고 yarn 플러그인으로 vim plugin이나 brew 패키지를 관리할 수 있도록 해놓고 비슷한 것을 시도해 본 적이 있는데 훨씬 세련된 방식으로 보입니다

   소개글에서는

     tea is not a package manager.
     tea is unified packaging infrastructure.
     라고 얘기하고 있네요

   GitHub description에는 the unified package manager (brew2) 라고 적혀있네요 ㅋㅋㅋ

   패키지 매니져 라기보다는 asdf-vm 과 같은 도구에 가깝다고 보이네요
"
"https://news.hada.io/topic?id=7868","Disney, 밥 아이거가 CEO로 컴백","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Disney, 밥 아이거가 CEO로 컴백

   2020년에 Bob Chapek에게 넘겨주고 작년말까지 회장으로 있었음

   밥 아이거?
   국은 어른거 ㅋㅋㅋㅋ
"
"https://news.hada.io/topic?id=7950","kickstartDS - 디자인 시스템을 위한 스타터킷 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  kickstartDS - 디자인 시스템을 위한 스타터킷 오픈소스

     * 개발자/디자이너/제품팀을 위한 자체 디자인 시스템을 빠르게 만들수 있게 해주는 로우코드 프레임워크
     * 26개의 컴포넌트, 250개의 속성, 500개의 디자인 토큰
     * Storybook 을 이용
     * 다양한 연동 지원 : Figma, Gatsby, Next.js, Contentful, Netlify CMS, Wordpress, Shopware, SAP Hybris
"
"https://news.hada.io/topic?id=7920","App Store Awards 2022 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        App Store Awards 2022 발표

올해 최고의 앱

     * 아이폰 : BeReal
     * 아이패드 : GoodNotes 5
     * 맥 : MacFamillyTree 10
     * 애플워치 : Gentler Streak
     * 애플TV : ViX

올해 최고의 게임

     * 아이폰 : Apex Legends Mobile
     * 아이패드 : Moncage
     * 맥 : Inscryption
     * 애플TV : El Hijo
     * 중국 : League of Legends eSports Manager

문화적 영향을 준 앱들

     * Dot's Home
     * How We Feel
     * Inua - A Story in Ice and Time
     * Locket Widget
     * Waterllama

애플 아케이드 게임

     * Wylde Flowers
"
"https://news.hada.io/topic?id=7838","아마존 10,000여명 정리해고 계획 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         아마존 10,000여명 정리해고 계획 중

     * 회사 역사상 가장 큰 규모의 정리해고
     * 아마존 디바이스(Alexa) 조직을 포함
     * 이르면 금주 부터 진행
     * 1만명 규모는 회사 전체 직원의 3% 수준
"
"https://news.hada.io/topic?id=7890","Infisical - 환경변수를 암호화하여 팀과 공유하는 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Infisical - 환경변수를 암호화하여 팀과 공유하는 오픈소스

     * 팀에서 환경변수를 안전하게 공유할 수 있게 도와주는 오픈소스 E2EE(종단간 암호화) 도구
     * 사용자 친화적 대시보드로 팀의 환경변수를 프로젝트별로 관리 가능
     * 언어에 구애받지 않는 CLI로 환경변수를 가져와서 로컬 개발환경에 삽입
     * 프로젝트별로 멀티 환경 지원(개발,스테이징,프로덕션 등)
     * 개인용/공유용 설정 지원
     * CI/CD 및 Infra와 연동

   우리에 대해 게시해 주셔서 감사합니다! 저는 Infisical의 공동 설립자 중 한 명입니다. 귀하의 질문에 답변하고 싶습니다

   Thank you for posting about us! I'm one of the co-founder of Infisical. Would love to answer any of your questions.

   Nice to meet you!
   I was trying to install Docker version of yours, but not clear how to get/create Infisical Token
   when selfhost. Only 404 messages now in link of your documentation(https://infisical.com/getting-started/dashboard/token)

   Did you manage to install it with Docker?

   Nice to meet you too!

   Sorry, here is the right link: https://infisical.com/docs/getting-started/dashboard/token

   Could I ask you where you got the wrong link? Thank you
"
"https://news.hada.io/topic?id=7867","10³⁰ 퀘타, 10²⁷ 론나, 10⁻³⁰ 퀙토, 10⁻²⁷ 론토 등 새로운 도량형 국제단위계 접두어 4개 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     10³⁰ 퀘타, 10²⁷ 론나, 10⁻³⁰ 퀙토, 10⁻²⁷ 론토 등 새로운 도량형 국제단위계 접두어 4개 추가

     * 데이터 급증으로 더 큰 숫자가 필요해짐
     * 10³⁰ 퀘타(quetta), 10²⁷ 론나(ronna), 10⁻³⁰ 퀙토(quecto), 10⁻²⁷ 론토(ronto)
     * 각각 표시기호로는 Q, R, q, r
     * 1991년에 추가한 제타(21)/젭토(-21)/요타(24)/욕토(-24) 이후 31년만의 업데이트
     * 2030년이 되면 세계는 연간 1요타바이트(10²⁴, 1000제타, 백만엑사, 십억페타)의 데이터를 생성할 예정
     * 지구의 질량은 약 1000요타그램에서 1론나그램(Rg)으로 표시 가능, 목성은 약 2퀘타그램(Qg), 전자는 1론토그램(rg)
"
"https://news.hada.io/topic?id=7908","Show GN: 회사 생활에 유용한 랜덤 도구 사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 회사 생활에 유용한 랜덤 도구 사이트

   룰렛, 팀 생성기, 주변 식당 찾기, 제비뽑기 같이 회사 생활에서 자주 필요했던 도구들을 만들어봤습니다. 저희 회사에선 디팩토 수준으로 유용하게 사용되고 있어서 다른 분들께도 공유해봅니다!

   룰렛이나 팀 생성기는 구글링 하면 많이 나옵니다만 UI가 예쁜 게 없더라구요. 더 예쁜 걸 만들어보자는 단순한 계기에서 개발을 시작했습니다. 특히나 팀 생성기는 캐릭터가 살아 움직이면 몰입이 훨씬 잘 되겠다는 생각이 들어서 JS 기반의 게임 엔진을 사용해서 구현했습니다.

   저는 친구들과 자작 보드게임을 만들어서 하는 게 취미인데, 그래서 앞으로는 보드게임 할 때도 유용한 도구들을 추가하는 방향으로 발전시키려고 합니다 (12면 주사위 등..). 피드백 주시면 감사하겠습니다.

   내가 원하는 저녁 식사를 찾았습니다. 감사합니다.

   도움이 되었다니 다행입니다!

   팀 생성기의 캐릭터는 너무 귀엽다. 더 빨리 달리게 할 수 있다면 더 재미있을 것입니다.

   좋은 피드백 감사드립니다 ㅎㅎ 속도 변경에 대해 반영해보겠습니다

   근처 식당 찾는 기능 유용하다못해 빠져드네요 야식 땡겨요

   감사합니다!

   캐릭터 움직이는 게 너무 귀엽네요 ㅎㅎ JS 기반의 게임 엔진은 어떤걸 사용하신건가요?

   Replit의 Kaboom을 사용했습니다 ㅎㅎ

   wheel spin에서 당첨옵션을 제거하는 옵션을 보니, detail에 신경 많이 쓰셨네요 :)

   사내 피드백을 받아서 적용하다 보니 디테일이 개선된 것 같습니다 ㅎㅎ. 감사합니다!

   돌려보고 무슨 말씀이신지 알았습니다 ㅎㅎ

   와 맘에들어요 ㅋㅋㅋ

   맘에 드신다니 보람 있네요 ㅎㅎ 감사합니다

   645
   https://random.gg/wheel?u=T6ug50oPmL
   되면 한턱 크게 쏘겠습니다 ㅎㅎ

   오 로또 번호 추첨기로도 사용이 가능하군요 ㅋㅋ 당첨되시길 진심으로 기원합니다

   팀 생성기 귀엽네요 ㅎㅎㅎ

   공들인 보람이 있네요 감사합니다 ㅎㅎ

   깔끔하고 좋네요! 잘 쓰겠습니다 👍

   감사합니다!
"
"https://news.hada.io/topic?id=7932","Ask GN: 마크다운 → pdf 변환, 어떤 툴을 사용하세요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 마크다운 → pdf 변환, 어떤 툴을 사용하세요?

   좋아하는 툴이나 방법이 있으면 추천해 주세요!

   해야 하는 문서 작업은 안하고 툴만 열심히 찾아보고 있네요.

   전 pandoc 결과물 + css 해서 브라우저에서 출력하는게 가장 마음에 들기는 합니다.

   전 마크다운 해석해서 뿌려주는 php 로컬 서버를 돌립니다. 그리고 웹브라우저에서 pdf 인쇄해요.
   https://github.com/mytory/mytory-docs

   처음으로 php 를 돌려서 실행해 봤습니다.
   제목들에 자동으로 번호를 매기는 방식이 우리나라 문서 스타일에 더 특화된것 같아 좋네요^^
   공유해주셔서 고맙습니다.

   저는 obsidian 을 쓰고 있어서 내장 기능으로 내보내고 있어요.

   너무 좋네요! 깔끔한 스타일이 마음에 듭니다.
   알려주셔서 고맙습니다.^^
"
"https://news.hada.io/topic?id=7869","Corellium, 스타트업의 양면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Corellium, 스타트업의 양면

   Wired측은 애플이 2019년 Corellium 을 상대로 고소할 내용을 입수하고, 500 페이지 짜리 자료를 다 검토했습니다. 그리고 이런 결과가 나왔습니다.
     * 이란, 이스라엘, 아랍에미레이트, 러시아 같은 국가의 해킹툴 제작자들에게 툴 판매
     * 반체제인사, 인권활동가, 언론인들을 대상으로 한 페가수스 스파이웨어 개발자에게 시험판 제공. 그리고 추적에 도움을 준 미 정보당국 요원 고용
     * 중국 당국을 대상으로 제품 판매 - 당시 Pwnzen Infotech의 창립자는 잘 알려진 중국 엘리트 iOS 및 iPhone 해커 그룹인 Pangu팀이 세운 회사. 당연히 전화 해킹에 도움을 줌
     * 이름이 밝혀지지 않은 Corellium 직원 - BlackHat 측에서 인정하셨다니 감사합니다.
     * Apple은 Wired의 이 문건에 대해 대답하지 않음. 2021년 협의에 갔는거 같았지만, Apple이 뒤집음
     * 보안 전문가측은 Corellium도 나쁘지만 Apple이 저작권법을 이용해 보안 문제를 뒤집을려고 하는 것은 나쁘다는 입장
"
"https://news.hada.io/topic?id=7922","macOS의 고급 CLI 명령들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           macOS의 고급 CLI 명령들

     * caffeinate : 슬립모드 방지
     * textutil : 문서 변환기. txt/html/rtf/doc/docx
     * mdfind : 스팟라이트 검색
     * networkQuality : 인터넷 속도 측정
     * screencapture : 화면캡쳐
     * pbcopy, pbpaste : 클립보드 복사/붙여넣기
     * say : text-to-speech 엔진
     * sips : 이미지 크기 변경 및 회전
     * open : 파일 및 폴더 열기
     * pmset : 전원관리 설정
     * softwareupdate : OS 업데이트 관리

   tmutil이 빠지다니 ㅋ

   pbcopy 유용하게 쓰고 있어요 파이프라인이 돼서..

   cat ~/.foo/bar | pbcopy

   wow~~

   오 mdfind 유용해보이네요
"
"https://news.hada.io/topic?id=7952","ChatGPT를 내 프로그래밍 언어 인터프리터로 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ChatGPT를 내 프로그래밍 언어 인터프리터로 만들기

     * 몇년간 만들던 초보자용 프로그래밍 언어인 ""Sack""의 스펙을 ChatGPT에 입력
     * 인터프리터로 동작하라고 지시하니 코드를 제대로 실행함
     * 올해 AdventOfCode Day 1 칼로리 계산 문제를 입력하고 ""Sack""으로 작성하라고 시켰더니 올바른 답을 작성
     * 해당 코드를 실행하니 정답이 나왔음
     * 그리고 이 블로그 글을 다시 ChatGPT에게 입력해서 꾸며달라고 요청하니 다음과 같이 예를 하나 하나 들어주면서 답변함
          + 그냥 ChatGPT가 훌륭하다고 말하지 말고 예제나 상세 내용을 표시하세요.
            예를 들어 얼마나 강력한지, 어떻게 쉽게 탈옥이 가능하며, 어떻게 가지고 놀면 재미있는지 등을 언급하세요.
          + 이미지나 비디오를 더 추가해서 요점을 더 잘보여주고 좀 더 인게이징 할 수 있게 하세요.
            예를 들어, ChatGPT가 출력한 재미난 것의 스크린 샷이나, 프로그래밍 언어 스펙, 또는 인터프리터가 AoC 를 푸는 비디오등을 추가하세요.
          + 좀더 활동적인 동사 및 생생한 언어를 사용하세요
            예를 들어""내 언어 스펙을 넣으면 어떤 일이 일어날지 궁금해 졌다"" 대신 ""내 프로그래밍 언어 스펙으로 ChatGPT가 뭘 할 수 있을지 궁금해져서, AI에게 집어 넣어 보았다"" 처럼
          + 개인적인 일화 및 경험을 더 넣어서 좀 더 연관있고 인게이징 하게 만들어 보세요.
            예를 들어, 당신이 AoC를 배열이나 문자열 이등분을 이용하지 않고 풀기 위해서 어떻게 노력했는지와, 그걸 어떻게 ChatGPT로 풀어냈는지 등

   놀랍네요. 일상 언어이건 프로그래밍 언어이건, 언어로 표현되는 것의 정수? 알맹이?가 무언지 생각해보게 하네요. 다양한 언어에 대한 학습과 그 학습들을 융합해서 새로운 일상 언어를 만드는 것을 해보고 싶군요. 테드창의 소설 '당신 인생의 이야기'에 나오는 외계인의 언어? 문자? 같은.

   chatGPT 가 완전히 새로운 물결이 되었네요

   AdventOfCode Day 1: Calorie Counting - https://adventofcode.com/2022/day/1
"
"https://news.hada.io/topic?id=7886","스타트업 아이디어를 얻고 평가하는 방법 [유튜브 비디오 32분]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  스타트업 아이디어를 얻고 평가하는 방법 [유튜브 비디오 32분]

   Jared Friedman @ YC 스타트업 스쿨
"
"https://news.hada.io/topic?id=7827","Design System Decision Record","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Design System Decision Record

     * linear라는 Design System을 작성하며 했던 고민과 결정에 대한 글
     * “필요한 일만 한다.” / “유연함은 의무이다.”

목차

     * Principle
          + Problem from Principle
     * Interface
          + Compound Component
     * Headless
          + 예시 1. Trigger
          + 예시 2. 다양한 기능 컴포넌트
     * 디자인 시스템의 낯섦 예산
          + 예시 1. Slot
          + 예시 2. state
          + 예시 3. PortalContainer
     * 사용하지 않음에 대한 지원
     * 추상화
          + 예시: TimePicker
     * 틀린 선택 막아주기
     * 접근성
          + 예시. TextField
     * 맺으며
     * 참고자료
"
"https://news.hada.io/topic?id=7902","영국 100개 회사가 급여 삭감없는 주4일 근무제 참여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     영국 100개 회사가 급여 삭감없는 주4일 근무제 참여

     * 영국의 업무방식을 근본적으로 바꾸려는 ""4 Day Week 캠페인""에 가입
     * 100개 회사 총 2600명의 직원으로 영국 노동 인구의 극히 일부지만, 이들이 주요 변화의 선봉이 될것을 바라고 있음
     * 주4일 근무가 기업의 생산성 향상을 촉진할 것
     * 캠페인 가입을 위해서는 근로자의 근무 시간을 진정을 단축했다는 것을 인증 받아야함
     * 가입한 가장 큰 회사는 영국에 약 450명의 직원이 있는 Atom Bank 와 마케팅 회사 Awin
          + ""지난 1년반 동안 직원의 건강과 웰빙이 엄청나게 증가했고, 동시에 고객서비스 및 인재 유지에도 도움이 되었음""
     * 캠페인 책임자는 ""2030년까지 급여 삭감없는 주4일 근무제가 기본 근무방식이 되는 것을 보고 싶으며, 앞으로 몇년간 더 많은 회사가 가입하는 것을 목표로 하고 있음""

   4 Day Week 캠페인 홈페이지

     영국의 노동자들은 대부분의 유럽 노동자들보다 더 오래 일합니다.
     이것은 우리를 더 생산적으로 만들지 않습니다.
     이것은 우리를 더 스트레스 받고, 과로하고, 번아웃 되게 만들고 있습니다.
     이제 주 4일제를 해야할 때입니다.

   Bolt, 주4일 근무제 영구적으로 시행
   Beacon CRM, 주4일 근무제로 변경
   MS Japan의 주4일 근무제 실험이 생산성을 40퍼센트 향상시키다
   아이슬란드의 주4일 근무 시험 '압도적인 성공'
   벨기에, 주4일제를 승인하고 퇴근 후에 상사의 연락을 무시할 권리 부여
"
"https://news.hada.io/topic?id=7913","자바스크립트에서 영역(realm)이란 무엇인가요? [번역]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    자바스크립트에서 영역(realm)이란 무엇인가요? [번역]

     * 영역(realm) - 자바스크립트가 사는 세상
          + 전역 실행 환경
          + 전역 객체 (그리고 고유 객체)
          + 자바스크립트 그 자체
     * 영역이 실제로 무엇인지에 대한 개념 파악하기
          + ""현실 세계""에서의 영역
          + 정체성 단절
"
"https://news.hada.io/topic?id=7861","트러플 산업은 대형 사기극이다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            트러플 산업은 대형 사기극이다

   트러플 오일은 합성향으로 만들어진 가짜이고, 트러플은 종류별로 가격이 천차만별

   이건 트러플오일병의 성분표만 봐도 느낌이 탁 옵니다.
   올리브오일 99.9% 정도에 뭔가 합성향료가 0.1% 정도 섞여 있거든요.
   그리고 생각해 보면 트러플 큰 덩어리에서나 날법한 향이 오일 조금 넣었다고
   날 수가 없죠. 방향성 합성물을 쓰지 않고서야.

   그나저나 권정혁님 오랫만입니다 잘 지내시죠? KTH 이후 레진에서 잘 하시는거 봤었는데
   이렇게 뉴스구독으로 뵙게 되니 반갑네요.
"
"https://news.hada.io/topic?id=7885","if(kakao)dev2022 세션 리스트 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       if(kakao)dev2022 세션 리스트 공개

     * 12월 7일~9일. 12개 트랙. 109개 세션
     * 10/15 대규모 장애 관련 별도 트랙(5개 세션)
"
"https://news.hada.io/topic?id=7858","ILLA - Retool의 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ILLA - Retool의 오픈소스 대체제

     * 회사 내부도구 개발용 NoCode 플랫폼 오픈소스
          + ILLA Builder : 드래그앤 드롭 형태의 앱 빌더
          + ILLA Design : React 컴포넌트 라이브러리
     * 실시간 협업 기능
     * 커스텀 플러그인 지원
     * 자동화 기능 제공
     * Docker/Docker-compose/K8s 로 셀프 호스트

   이런... 어느 게 나은지 보는데도 시간이 걸리겠군요..

   확실히 사내도구 개발관련 노코드 플랫폼 시장은 핫한듯 합니다.
   Retool이 좋지만 가격이 꽤 비싸다 보니 계속해서 오픈소스 대체제들이 만들어지네요.

   OpenBlocks - Retool의 오픈소스 대체제
   Budibase - 사내용 도구 개발을 위한 오픈소스 Low-Code 플랫폼
   Appsmith - 업무용 도구를 쉽게 만드는 Low-Code 오픈소스
   ToolJet - 오픈소스 NoCode 프레임워크
"
"https://news.hada.io/topic?id=7954","SSHGuard - Brute-force 공격방어 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SSHGuard - Brute-force 공격방어 도구

     * SSH부터 다양한 서비스들에 대한 무차별 대입 공격을 방어
          + 시스템 로그 취합 및 모니터링 : syslog, cockpit, macOS log,..
          + 다양한 서비스에 대한 공격 감지 : OpenSSH, Sendmail, ftpd, Dovecot,..
          + 방화벽을 통한 블로킹 : ipfw, iptables, pf, FirewallD,..
     * 자동 블랙리스팅 및 정교한 화이트리스팅 기능 지원
     * IPv6 지원
     * 다수의 로그파일 동시 모니터링. 여러 로깅 포맷을 인식
     * 작고 포터블 (~3000 LOC의 C 코드 및 Bourne Shell)
"
"https://news.hada.io/topic?id=7839","전 GitHub CTO, "지난 10년간 가장 큰 아키텍처 실수는 풀 마이크로서비스로 전환한 것"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         전 GitHub CTO, ""지난 10년간 가장 큰 아키텍처 실수는 풀 마이크로서비스로 전환한 것""

     * ""Monolith > apps > services > microservices""
     * 첫째, 이건 규칙은 아니고 내 생각이 그렇다는 것. 대규모 분산 시스템을 구축해 본 사람은 실제로 그대로 작동하지 않으며, 적응해야 한다는 것을 알고 있음
     * 둘째, 단계가 중요함
          + 5-50인 회사라면 그냥 Monolith로 가세요
          + 1만명 회사라면, 위의 모든 것들을 다 가지고 있을 것. 근데 예전과 달라진 생각들을 얘기해보자면..

먼저 정의(Definition) 부터

     * monolith - xyz.com
     * apps - abc.xyz.com
     * services - 앱/모노리스를 지원, 핵심 인프라, 핵심 컴플라이언스 기능, 앱팀에서 작성하지 않을 수 있음(인프라에서 유지관리)
     * microserivces - 몇백라인의 코드, 대부분 일회성, 라이브러리 또는 SDK 일수/있어야(could/should) 함

Why ? : 기본적으로 ""Speed & Risk"" 때문

     * #1 전체 개발팀이 하나의 빅앱(전체 사이트가 Rails앱 이라고 생각해 볼 것)에서 개발하는게 더 쉬움
     * #2 성장하면 필수로 가지게 될 분산시스템은, 자체적으로 위험한 수백개의 마이크로서비스 없이도 이미 추론하기가 어려움
     * #3 완전히 마이크로로 간다면, 무분별한 확장을 처리하기 위해 새로운 개념을 도입해야 함
     * #4 맞춤형(Bespoke) 인프라 서비스 또는 마이크로서비스는 부채의 극단적 개념임. 코드도 부채이지만 서비스가 그것의 극단적인 버전. 이게 뭘 의미하는지 생각해 볼 것. 레버리지 포인트가 되게 할 것
     * 분산 시스템 엔지니어들은 중복되는걸 싫어하기 때문에 뭔가가 여러데서 이뤄진다면 ""이걸 빼내서 마이크로 서비스를 만들자"" 라고 생각함
     * 이론적으로는 이게 맞고, 일이십개 까지 되는 것은 괜찮음. 하지만 수십개가 넘어가거나 대규모 회사를 넘어서 사용된다면 기술 문제가 아니라 조직의 문제가 됨
     * 내가 이야기 하는 것이 잘못된 이분법 처럼 느껴지긴 하지만, 실제로 마이크로서비스에 대해서는 기술적인 도전들이 있고, 더 많은 조직적인 문제도 있음

내가 우려하는 것은

     * #1 (특이하게 IT출신 CEO가 이끌지 않는 한) 인프라는 항상 우선순위에서 밀려남(get the short end of priority stick)
     * #2 서비스가 너무 많으면 일반적으로 소유권 문제 및 경계 문제가 생김
     * #3 수많은 마이크로서비스를 처리하기 위해 더 많은 도구를 도입함
     * #4 가장 중요한 것은 라이브러리나 SDK가 되었어야할 각 마이크로서비스들이 프로덕션에 위험을 초래함

일반적으로 내가 추천하는 것은

     * #1 가능하면 최대한 오래 Monolith를 유지
     * #2 서비스는 인프라에 필요한 것에서 시작하고, 앱 개발쪽에서 시작하지 말 것
     * #3 Mono를 쪼개야 한다면, 작은 서비스들이 아닌 큰 앱들로 분해할 것
     * #4 각 새로운 앱은 회사내의 가상 벽이라고 생각할 것
     * #5 가능하다면 마이크로서비스 대신 라이브러리를 선호

   마지막 부분 우려와 추천 부분이 공감되네요.
   사실 회사 규모나 서비스 규모나 비슷한 맥락이고, 쪼개지 않으면 안 되는 순간이 올텐데 그걸 미리 대비하는 탁월한 판단이 필요하겠다라고 느꼈습니다.

   회사 규모가 아니라 시스템 규모에 따라 달라져야 되는 거 아닌가? 내가 msa 를 잘못 이해하고 있었나?

   윗 댓글중에
   마이크로서비스의 문제가 아니라 무분별한 서비스의 확장이 문제가 아닐까요?
   라는 의견에 일단 동의하고, 회사가 커질수록 배포 문제+브랜치 관리같은 모노리스 자체의 단점이 너무 명확하게 드러나기 때문에 비용과 생산성간의 trade off 를 잘 선택해야할 것 같네요

   너무 좋은 글이네요. 감사합니다.

   디자인패턴 중요성 논란? 과 비슷한거 같아요.
   디자인패턴이라는게 다양한 문제를 해결하는 과정에서 도출 된 코드 패턴들인데....
   어디까지나 상황에 맞게 필요에 의해서 응용 & 적용해야 하는데.....

   모범답안 마냥 디자인 패턴이 필수이고 몰입하는 사람들이 종종 있죠...

   요즘 MSA 관련해서도 비슷한게 무조건 MAS...인 사람들이 많아지는거 같습니다.

   닭이 먼저냐 달걀이 먼저냐 같은 말 같아요.
   마이크로서비스의 문제가 아니라 무분별한 서비스의 확장이 문제가 아닐까요?

   적절한 균형이 중요하다고 생각이 듭니다.
   마이크로서비스로 가게 되면 새로운 기능 = 새로운 마이크로 서비스로 귀결될 수 있는 점 때문에,
   관리가 점점 어려워지는것이 아닐까 싶네요.

   이전에 Segment 기술 블로그에 올라온 'Goodbye Microservices' 라는 글이 떠오르네요.
   Segment 역시 CDP라 굉장히 많은 데이터를 실시간으로 처리함에도 불구하고, Microservices에서 Monolith 구조로 전환하며 그 이유 등을 블로그에 정리해놓았습니다. 이 글과도 일정 부분 맞닿아있다고 생각이 듭니다 :)

   https://segment.com/blog/goodbye-microservices/

   대체로 제 생각과 일치합니다.
   저희 회사의 개발자는 5명이라 아직까지는 monolith(RubyOnRails)를 지향하는게 맞다고 생각됩니다.
   위 글 처럼 50인 이상이 동시에 개발하는 프로젝트가 되면 그때는 두 번째 monolith를 개발하게 될거 같습니다.

   5-50인 회사라면 그냥 Monolith로 가세요 << 이는 개발자수가 아니라 총 구성원의 수겠죠?

   회사 규모를 말하는 것 같아요~

   가능하면 최대한 오래 Monolith를 유지 < 극공감합니다. 분리하면서 유지비용 늘어나는게 커요

   MSA가 도그마화 되어 가는 것에 대한 반동으로서의 글이라 생각이 되고, 그런 점에서 의미가 있겠다 싶습니다.
"
"https://news.hada.io/topic?id=7834","OpenBlocks - Retool의 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenBlocks - Retool의 오픈소스 대체제

     * 올인원 IDE에서 내부용 또는 고객지원용 앱을 만드는 NoCode 플랫폼
     * 다양한 데이터소스 & API에 접근rksmd
     * 50+개의 컴포넌트를 제공하는 UI 빌더
     * 모든 영역에서 자바스크립트 지원
     * 커스텀 컴포넌트로 사용 가능(React & Openblocks SDK)
     * RBAC(Role-based access control)
     * 자동 저장 및 복원가능한 history 제공 : 릴리즈 및 버전 관리
"
"https://news.hada.io/topic?id=7876","D2 - Diagram Scripting Language 오픈소스로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                D2 - Diagram Scripting Language 오픈소스로 전환

     * D2 = Declarative Diagramming
     * MermaidJS, Graphviz, PlantUML 등과 비슷하게 텍스트로 다이어그램을 그리는 언어
     * VSCode/Vim 확장을 제공하며, CLI를 통해서도 .d2 파일에서 SVG생성 가능
     * Go 오픈소스로 라이브러리 처럼 사용 가능
     * 오픈코어 모델(기본 내장한 외부 레이아웃 엔진인 dagre/ELK가 있고, 소프트웨어 아키텍처 그리기용으로 최적화된 TALA 엔진을 개발하여 별도 라이센스를 판매)

   시퀀스 다이어그램이 안되다니 ㅠㅠ

   오늘 0.1.0 버전에서 실험 기능으로 지원하기 시작했네요.
   https://d2lang.com/tour/sequence-diagrams
   https://github.com/terrastruct/d2/releases/tag/v0.1.0

   본인들이 MermaidJS, Graphviz, PlantUML 과 비교해보는 사이트 를 별도로 만들어놨네요
   Text-To-Diagram https://text-to-diagram.com/

   이걸 보니 한번 써봐야겠다는 생각이 드네요. 근데 윗분 말씀처럼 시퀀스 다이어그램이 안되는게 가장 큰 단점이네요. 곧 지원하겠죠.
"
"https://news.hada.io/topic?id=7939","Android의 Rust 도입의 현주소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Android의 Rust 도입의 현주소

     * 안드로이드 팀은 Android 11부터 Rust를 도입하기 시작
          + Rust 코드의 비중은 점점 늘어나 최신 버전인 Android 13에서 새로 작성된 Rust 코드의 비중은 거의 C 언어에 근접
     * 이 결과 메모리 취약점은 2019년 223개에서 2022년 85개로 크게 감소
     * unsafe한 코드의 비율과 실제 발생하는 취약점 수를 비교해 보니 상관관계가 있는 것으로 드러남. 실제로 memory safe 언어를 사용하는 것이 취약점 감소에 도움이 되는 것으로 보고 있음.
     * 현재까지 Rust로 작성된 코드에서 발생한 메모리 취약점은 0개

   아아 이것은 러스트라는 것이다. 인건가요 ㅎㅎ

   아아... 이것이 러스트인가...

   멋져요
"
"https://news.hada.io/topic?id=7888","Stable Diffusion 2.0 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Stable Diffusion 2.0 공개

     * SD v1은 오픈소스 AI 모델의 판도를 바꿔놨음
     * SD v2는 새로운 텍스트 인코더인 OpenCLIP 으로 text-to-image 모델을 훈련하여 v1보다 이미지 품질을 대폭 향상
     * 512x512, 768x768 이미지 생성 가능
     * LAION-5B 데이터 셋의 aesthetic한 하위 집합을 이용하여 훈련 (또한 NSFW 필터로 성인 콘텐츠를 제외)
     * Upscaler Diffusion 모델을 내장해서 이미지 해상도를 4배 향상
          + 128x128 이미지를 512x512로 업스케일 가능하다는 것
          + 즉, SD v2는 이제 2048x2048 해상도 이상의 이미지 생성이 가능해짐
     * Depth-to-Image Diffusion 모델 : depth2img
          + 기존의 image-to-image 기능을 새로운 가능성으로 확장
          + 입력 이미지의 Depth를 유추한다음 텍스트와 깊이 정보 모두를 사용하여 새 이미지를 생성
          + 즉 이미지의 깊이에 따른 특정 부분만 다르게 생성이 가능
     * Inpainting Diffusion Model을 개선
     * SD v1과 마찬가지로 싱글 GPU환경에서도 실행 가능하도록 최적화

   저희도 SD v1에 업스케일러 붙여서 제공해주고 있는데(512 x 512로 만들고 사용자가 원하면 가로 세로 4배씩 upscale), SD v1으로 큰 사이즈 만드는 것보다 저 조합이 더 빠르고 좋더라고요.
"
"https://news.hada.io/topic?id=7843","Crsql - SQLite에 Multi-Writer, CRDT 기능을 추가하는 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Crsql - SQLite에 Multi-Writer, CRDT 기능을 추가하는 확장

     * SQLite에 CRR(Conflict-Free Replicated Relations) 과 CRDT(Conflict-free Replicated Data Type) 기능을 구현
     * 공통 스키마를 공유하는 두개 이상의 SQLite DB를 Merge 가능하도록 지원
     * 기존 DB스키마에 메타데이터 테이블과 트리거를 추가하여 동작하므로 기존 스키마를 변경할 필요 없음
     * 런타임시에 로딩 가능한 확장

    1. 슬랙보다 디스코드로의 알림이 늦게 오네요. 어떤 이유일까요?
    2. 왜 이렇게 SQLite를 못살게(?) 구는 작업들이 많을까요? 궁금합니다. 별도 서버가 아닌 파일로 되어 있다는 것에서 어떤 매력이 있는 것일까요?

   아 이제 봤네요. 설치된 봇이 2천개가 넘어서요.
   봇들로 알림 메시지 보내는 것은 개별로 보내는 것이라, 순차처리 되면서 도착 시간에 차이가 있을수 있습니다.
    1. 물론 불만이 있는 것이 아니고 궁금해서 여쭈어 보았습니다. 그런데 봇이 2000개라니... @@ 어떤 개념, 어떤 용도로서의 봇인지 상상이 안됩니다.

   긱뉴스에서 DB 소식 많고 뭔가 확장이 많은 DB 라면 역시 postgresql 과 sqlite 죠!
"
"https://news.hada.io/topic?id=7931","Stable Diffusion 2.0과 네거티브 프롬프트의 중요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Stable Diffusion 2.0과 네거티브 프롬프트의 중요성

     * SD 2.0 출시 후 기존에 비해서 이미지 생성 품질이 나빠졌다는 평가가 있음
     * 아마도 새로운 텍스트 인코더인 OpenCLIP 때문
     * 기존의 프롬프트 해킹 방법은 통하지 않게 되었고, ""네거티브 프롬프트""가 더 잘 동작하게 되었음

Negative Prompting 이란

     * 결과 이미지에서 보고 싶지 않은 것들을 제외하는 것
     * SD의 기술적 관점에서 보면, 네거티브 프롬프트는 디퓨전 프로세스에서 멀어지는 하이 디멘젼 앵커로 동작
     * ""cyberpunk forest by Salvador Dali; negative prompt: trees, green"" 라고 하면 결과에서 ""나무""와 ""녹색""을 빼줌
     * 인기 있는 트릭중 하나는 ""blurry"" 와 ""pixelated"" 같은 것을 네거티브로 넣어서 이미지 품질을 향상시키는 것.
       근데 이게 잘 알려진 ""4k hd"" ""trending on artstation"" 같은 예전 CLIPText 의 이미지 품질 개선 프롬프트보다 더 좋을까?
     * 테스트 해본 결과들에서 보면 네거티브 프롬프트가 엄청 좋은 결과를 보여줌

결론

     * 네거티브 프롬프트는 AI 이미지 생성에서 앞으로 훨씬 더 중요한 도구가 될 것
     * 예전의 프롬프트 엔지니어링 전략을 고수하는 것은 큰 실수

   https://twitter.com/emostaque/status/1596864150134984705
   좋은 품질의 사람 이미지를 얻기위해서는 이런 단어들을 네거티브로 추가하면 된다고 하네요.

   ""ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, blurred, text, watermark, grainy""
"
"https://news.hada.io/topic?id=7915","Ryujinx - 오픈소스 닌텐도 스위치 에뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ryujinx - 오픈소스 닌텐도 스위치 에뮬레이터

     * C#으로 개발
     * 윈도우/리눅스/맥(인텔/애플) 지원
     * 4000개 이상의 타이틀이 테스트됨
     * 우수한 정확도와 성능을 목표로 2017년부터 개발중
     * LDN 기능으로 로컬 LAN 또는 서버를 통해 원격 플레이 지원

   C++ 로 개발된 오픈소스인 Yuzu 와 함께 스위치 에뮬레이터의 양대산맥인데요.

   최근에 Ryunjinx에만 MacOS 지원이 추가되었습니다. 관련해서 구현기를 상세히 적어뒀네요 The Impossible Port: MacOS
"
"https://news.hada.io/topic?id=7912","WebAssembly: TinyGO vs Rust vs AssemblyScript","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             WebAssembly: TinyGO vs Rust vs AssemblyScript

     * 브라우저에서 복잡한 작업을 위해 WASM을 쓴다면 어떤 언어가 가장 빠를까 ?
     * 10만개의 랜덤값을 가진 어레이를 500번 복사해서 정렬하는 코드로 속도 비교
     * 결과적으로는 Rust가 가장 메모리를 적게 사용하며 속도가 빠름 (JS보다 20배 쯤)
          + 런타임 속도 : Rust (2982ms) > AssemblyScript(6405ms) > Go(9717ms) > JavaScript(68720ms)
          + 파일 크기 : JavaScript (1.3kb) > AssemblyScript(4.7kb) > Go(37.0kb) > Rust (74.0kb)
     * 파일 사이즈도 같이 고려 대상이라면 AssemblyScript도 괜찮음(Rust에 비해 두배 정도 느리지만, JS보다는 10배 빠름)
     * Rust 런타임은 크롬에서 가장 빨랐음. JavaScript는 Firefox가 크롬보다 3배이상 빠름

   자바스크립트에게 불리한 비교였다고 생각됩니다.
   배열을 만드는데 사용한 자료형이 다릅니다.
   자바스크립트는 숫자형이 64비트 부동소수점형식인데, 나머지 언어들은 32비트 정수형을 사용했습니다.
"
"https://news.hada.io/topic?id=7887","Sapling - 사용자 친화적이고 스케일러블한 Git 호환 버전 관리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Sapling - 사용자 친화적이고 스케일러블한 Git 호환 버전 관리

     * Meta가 새로 공개한 Git 호환 버전 관리 - 클라이언트만 먼저 오픈소스로 공개
     * 나중에 공개될 Sapling 서버와 가상 파일 시스템을 이용하면 수천만개의 파일/커밋/분기가 있는 Repo에도 이용 가능
     * 메타의 대규모 Monorepo를 위해서 10년전부터 개발해서 사용(Mercurial의 확장으로 시작)
     * Usability 와 Scalability 를 강조
     * Git과 기본 명령은 비슷하지만 더 간단하고 쉽게. 각 커맨드는 한가지 동작만함. 로컬 브랜치명은 옵셔널. 스테이징 에어리어 없음

메타에서 성공적이었던 사용자 경험들

     * Smartlog
          + 기본 명령인 'sl'을 아무 옵션없이 실행하면 Repo를 한눈에 보기 가능
          + 필요없는 정보는 제거하고 로컬 커밋과 중요 리모트 브랜치들을 보여줌
          + 'sl web'을 치면 브라우저에서 보기 지원
     * 실수를 쉽게 수정하기
          + 'sl undo, sl redo, sl uncommit, sl unamend' 등의 명령을 지원
          + 'sl undo -i' 로 인터랙티브 모드 지원
     * Commit Stack 지원을 내장
          + 여러개 쌓여진 커밋을 쉽게 관리
          + 'sl goto COMMIT' 하고 'sl amend' 하면 자동으로 이동 및 리베이스 등을 처리
     * GitHub PR을 위한 코드리뷰 UI인 ReviewStack 애드온 포함

   다음과 같이 설치하고 sudo apt-get install sl
   sl 을 실행하면, 그것은 바로~~!!

   :eye:
"
"https://news.hada.io/topic?id=7863","VMware Fusion 13, 애플 실리콘 맥 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     VMware Fusion 13, 애플 실리콘 맥 지원

     * 퓨젼 13 프로 & 플레이어 모두 인텔/실리콘 맥과 호환
     * 애플 실리콘 맥에서는 Arm 버전의 Windows 11만 지원
          + win32/64 앱은 윈도우에 내장된 에뮬레이션으로 실행
     * TPM 2.0 가상 디바이스 포함
     * OpenGL 4.3 지원(인텔에선 윈도우/리눅스, 애플 실리콘에선 리눅스만)

   TPM은 막연히 칩이 필요한 것으로 알고 있었는데 가상 디바이스로 가능하군요
"
"https://news.hada.io/topic?id=7898","Unix 시간은 나쁘고 교체가 필요하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Unix 시간은 나쁘고 교체가 필요하다

     * UTC(협정 세계시)가 나쁘다고 말하는 것이 아님
     * 국제 도량형 총회는 2035년 이후 UTC에서 윤초를 폐지함
     * 윤초는 지구 자전과 연관되어 있는데 이는 불규칙하고 예측할 수 없었음
     * UTC 이외에 중요한 시간 표준 중 하나는 TAI(국제 원자시)로 윤초가 없음
     * UTC는 주로 공학용으로 사용하지 않기에 윤초가 있을 수 있지만 Unix 시간은 윤초로 인해 선형적이지 않게 되었고 많은 혼란을 초래함

  TAI Unix 시간

     * 1970년 1월 1일 0시 0분 10초부터 시작하는 TAI Unix 시간은 선형적으로 증가하며 유용한 수학적 속성을 갖지만 인기가 없음
     * Unix 시간과 다르며 상호대체재가 아님
     * Unix 시간에 비해
          + 선형적이기에 t + 1초, t + 100000000초가 언제인지 매우 쉽게 계산할 수 있음. Unix 시간은 미래의 윤초가 언제 발생할지 모르기에 계산할 수 없고 예측만이 가능함
          + 두 타임스탬프의 차이를 쉽게 계산할 수 있음
          + 날짜 혹은 시간을 계산하는건 어려움. 우리는 일반적으로 TAI 시간이 아닌 UTC 시간을 알고싶어 하기에 윤초를 반영해줘야함
          + 모호하지 않고 유효한 값만 반환함

  큰 사고 없이 TAI Unix 시간으로 전환하기

     * POSIX 표준에서 시간을 Unix 시간, TAI+C Unix 시간, 레거시 Unix 시간 3개로 나눌 것을 제안
     * 레거시 Unix 시간은 특정 시점 이전엔 기존의 Unix 시간을, 이후부턴 TAI+C Unix 시간을 반환
     * 윤초는 온라인 리소스에 의존하므로 윤초가 폐지될 2035년에 맞춰 전환하는게 합리적

   좀 더 자세히 읽어봐야겠다는 생각이 들어 얼렁뚱땅 번역을 해 봤습니다!

   https://weblog2.wafe.kr/posts/translation-unix-time-bad/

   유닉스 시간이라는 게 그냥 흔히 쓰는 unix timestamp 를 말하는거겠죠?
   그냥 늘 쓰는거라 아무생각 없었는데 그러면 리눅스 같은 os 들이 지난 윤초를 반영해서 타임스탬프를 준다는 말이겠네요? 엄청난 일이었네요...

   그 반대입니다. 윤초는 현실의 1초를 없었던 시간으로 만드는 것에 가깝기 때문에 UTC로 맞춰진 OS는 그냥 타임스탬프를 가지고 계산하면 유닉스타임이 나오고 반대로 있었던 윤초를 더해줘야 TAI 값이 나옵니다
     * https://news.hada.io/topic?id=7847
     * https://news.hada.io/topic?id=7046
     * https://news.ycombinator.com/item?id=33716613 해커뉴스에 올라온 본 글의 코멘트들도 읽어볼만 합니다.
"
"https://news.hada.io/topic?id=7865","Angular v15 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Angular v15 릴리즈

     * 더 나은 개발자 경험과 성능 제공
     * NgModule없이 앱 개발 가능한 Standalone API가 개발자프리뷰를 끝내고 Stable API로 추가
     * Router & HttpClient Standalone API
     * Directive composition API
     * Image directive 도 Stable 로
     * 더 향상된 스택 트레이스
     * CLI 개선

   맨날 쓰고 있는데 좀 더 흥했으면 좋겠어요

   살아 있었구나
"
"https://news.hada.io/topic?id=7900","Briar - P2P 암호화 메시징","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Briar - P2P 암호화 메시징

     * 서버 없이 기기들 간에 직접 동기화 되는 방식의 메시징 서비스
     * 재난등으로 인터넷이 다운되어도 블루투스/와이파이를 통해서 정보가 흐를수 있게 해줌
     * 인터넷이 복구되면 Tor 네트워크를 통해서 동기화 되어, 사용자와 관계들을 감시하지 못하게 함
     * 안드로이드 / 리눅스 데스크탑 지원
"
"https://news.hada.io/topic?id=7881","극도로 선형적인 Git History 유지하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       극도로 선형적인 Git History 유지하기

     * 첫번째 커밋은 해쉬가 0000000 으로 시작하고 두번째는 0000001 처럼 늘어나도록 해서 직관적으로 번호가 보이게 관리하는 방식
     * 이런 해쉬 헤더값을 찾기 위해서는 커밋 메시지에 정크 데이터를 넣어서 SHA-1 해쉬를 조정해야함
     * 맥북에서 githashcrash 도구를 이용하면 8글자 해쉬헤더의 경우 5분, 6글자인 경우 1초내에 찾을 수 있음
     * bash-glue를 이용해서 이걸 git linearize라는 이름으로 자동화 시킴
     * lucky-commit 을 해쉬 생성 백엔드로 사용해서, GPU를 이용하면 20x 빠르게 생성 가능
       → lucky-commit 은 정크텍스트가 아닌 안보이는 공백문자를 사용해서 커밋메시지를 수정하므로 보기에도 나쁘지 않음

   재밌네요 ㅋㅋ 앞 8자리면 정크 데이터가 길지도 않네요.

   ㅋㅋㅋㅋ... 리누스가 보면 뭐라고할지 너무 궁금한..

   블록체인 nonce 값 계산하는거랑 뭔가....

   그냥 svn을 쓰면 리비전 번호가 깔끔하게 쌓일텐데......

   외람되지만 첫 번째가 0000000라면 두번째는 0000001이 아닐까요? 오타가 나신것 같습니다ㅋㅋ..

   윽 ㅎㅎ 수정해두었습니다.

   결벽증이 느껴질 정도네요.
   그래도 아이디어를 떠올리고 실행에 옮기신게 대단합니다.
   단순 brute-force 이려나요

   비트코인 채굴 방식이네요 ㅋㅋ

   github 을 거래소로 !
"
"https://news.hada.io/topic?id=7871","Misskey - ActivityPub 호환 마이크로블로깅 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Misskey - ActivityPub 호환 마이크로블로깅 오픈소스

     * ActivityPub 프로토콜을 지원하는 마이크로블로깅 오픈소스 소프트웨어
     * 직접 Host하여 나만의 Instance를 만드는 것이 가능, Mastodon이나 Pleroma와 같은 소프트웨어와도 연합 가능
     * 자체 마크업 언어 지원
     * NestJS 기반 백엔드, Vue 기반 프론트엔드로 작성됨
     * 자체 스크립트 언어로 애드온 개발 & 사용 가능
"
"https://news.hada.io/topic?id=7938","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   이번 주말에 침대에 자석이 있는 것 처럼 누워 있었습니다.
   대신 유투브 시청 등은 최대한 자제 하고, 조용히 있어 보았는데 나름대로 명상의 시간도 갖게 되어서 좋았어요.
   우울증이 있어서 시도해본것인데, 여러가지로 치료에 도움이 되는 방법들을 시도해보고 있습니다.

   여전히 지인들과 보드게임 모임을 합니다. 이번주는 어쩌다 보니 새로 오는 사람들이 있어서, 오를레앙 을 여러번 돌리게 되네요. 보드게임 DNA 판독기 라는 별명이 딱 좋은듯 합니다.
   오버워치2 시즌 마무리를 달려야 할것 같아요. 다시 시작하니 또 재미나네요.

   송년회 모임이 시작되었네요~ 지인들과 먹고 마시고 즐거운 시간 보낼 것 같아요~~
"
"https://news.hada.io/topic?id=7911","더 빠른 인스턴스로 옮겼는데 성능이 안 나오면 어디를 봐야 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  더 빠른 인스턴스로 옮겼는데 성능이 안 나오면 어디를 봐야 할까?

     * 넷플릭스가 CPU-Heavy한 Java Microservice를 m5.4xl(16 vCPU)에서 m5.12xl(48 vCPU)로 이관
     * vCPU가 3배이므로 대략 3배의 성능 향상을 기대했지만, 처리량이 25%만 증가하는 상황이 발생
          + 심지어 레이턴시가 50% 감소하고, CPU와 레이턴시 패턴 모두 '끊김'이 심해져버림(Choppy)
     * 이를 해결하기 위한 여정들을 저수준 레벨까지 정리한 글

해결 과정

     * 빠른 노드와 느린 노드를 비교해 보기로 함
     * Flame Graph 와 JVM 프로파일링(JFR-Java Flight Recorder 활용) 으로는 차이를 알수가 없었음
     * 앱/OS/JVM 수준에서는 이상한게 없어서 m5.12xl 인스턴스가 제공하는 PMC(Performance Monitoring Counters, PMU Counter)를 살펴봄
     * 문제 중 하나는 ""False Sharing"" - 2개의 코어가 동일한 L1캐시 라인을 공유하는 관련없는 변수를 읽거나 쓸때 생기는 패턴
          + JDK 코드에서 기능은 바꾸지 않고, 데이터 레이아웃만 변경하는 패딩 바이트를 삽입하여 요 문제를 해결
     * 또 다른 문제는 ""True Sharing"" - 동일한 변수를 여러 쓰레드/코어에서 읽고 쓰는 것
          + 이를 해결하기 위해 공유 변수에 쓰지 않고 JVM의 세컨더리 슈퍼 클래스 캐시를 우회
     * 두가지 모두 패치하자 처음보다 3.5배 속도가 향상
     * 이 문제를 해결하는 동안 5년동안 휴면상태로 있던 버그인 JDK-8180450에 대해서 알게 됨

결론

     * JVM이 C++ 같은 성능지향 언어와 경쟁하는 고도로 최적화된 런타임 환경이라고 생각하는 경향이 있음
     * 대부분의 워크로드에는 그렇지만, 특정 워크로드에 있어서는 애플리케이션의 구현 뿐만 아니라, JVM자체의 구현에 의해서도 영향 받을 수 있음
     * 이번 경우는 JVM의 네이티브 코드에서 병목 현상을 찾아 패치하여, 해당 워크로드의 처리량을 3배 이상 향상 시키기 위해 PMC를 활용 했음
     * 이런 종류의 성능 문제에 관해서는 CPU 마이크로아키텍처 수준에서 실행을 검사하는 능력이 유일한 해결책임
     * Intel vTune은 m5.12xl 같은 인스턴스에서 노출되는 핵심 PMC 만으로도 귀중한 통찰력을 제공
     * 클라우드의 모든 인스턴스들이 PEBS(Processor Event-Based Sampling)와 함께 포괄적인 PMC 세트를 제공한다면 더 심층적인 분석을 통해서 훨씬 더 큰 성능 향상을 할 수 있을 것

   와 대체...

   가설이 검증되어 수정되었을때는 짜릿했겠네요.
"
"https://news.hada.io/topic?id=7850","RustyHermit - Rust 기반의 경량 Unikernel","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  RustyHermit - Rust 기반의 경량 Unikernel

     * 고성능/클라우드 컴퓨팅용 런타임이 목표
     * 유니커널은 어플리케이션을 커널 라이브러리와 직접 번들링 가능하여, 별도의 설치된 OS없이 실행가능
     * Rust 및 C/C++/Go/Fortran 어플리케이션 실행 가능
     * C로 작성되었던 HermitCore를 Rust로 재작성 한것
"
"https://news.hada.io/topic?id=7846","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   지난주에 다친 허리가 거의 나아가서.. 꽤 오래전에 예약된 18xx 기차/주식 보드게임 모임을 진행했습니다.
   초보 3분을 포함한 5인이서 돌렸더니 거의 8시간이 걸렸네요.
   덕분에 다른 시간엔 거의 쓰러져서 잠만 잘듯 합니다. 역시 재미있어요!
"
"https://news.hada.io/topic?id=7943","Tabletop Club - 오픈소스 멀티플레이어 보드게임 시뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Tabletop Club - 오픈소스 멀티플레이어 보드게임 시뮬레이터

     * 물리 기반의 3D 환경에서 테이블탑 보드게임을 플레이
     * Godot 엔진으로 개발. 윈/맥/리눅스 지원
     * Asset Pack 기능으로 커스텀 자원들을 추가 및 관리 가능 (이미지,3D모델,오디오,세이브 파일)
     * 기본 게임은 퍼블릭도메인 들만 포함(포커,체스 등)

   PC/맥에서 하는 보드게임 시뮬레이터는 Tabletop Simulator 가 유명합니다. (유료)
   웹에서 플레이 하는 것은 Boardgame Arena 가 있습니다. 한글도 잘 지원합니다.

   이렇게 오픈소스로 공개되면 다양한 목적으로 사용될 수 있을듯 하네요.
   물론 저는 그냥 오프라인으로 즐기는 걸 선호합니다만.. ㅎㅎ
"
"https://news.hada.io/topic?id=7941","JSONHero - 향상된 JSON 구조 시각화 도구 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   JSONHero - 향상된 JSON 구조 시각화 도구 오픈소스

     * 밸류 형식에 따른 미리보기 제공 : 이미지, 날짜, 색상, URL, 비디오
     * 엣지 케이스 탐색 가능 : 필드의 관련 값 보기. 추론한 JSON 스키마 보기 가능
     * 빠른 퍼지 검색
     * VS Code 플러그인 제공
     * 공유URL로 쉽게 협업 가능
     * 키보드 단축키, 다크모드, 자동 JSON 스키마 생성

   Json 내용을 서버로 전송해야 하는 게 가장 아쉽더군요. 보통 Json에는 민감한 정보가 있는 경우가 많은데...

   먼저, CF Worker에서 돌릴 수 있도록 한 공식 오픈소스 버전이 있습니다.

   https://github.com/apihero-run/jsonhero-web

   다만 접속자 분석을 위한 트래킹 라이브러리가 한 두개 붙어있고,
   외부 API를 사용합니다.

   https://github.com/antegral/jsonhero-web

   이건 직접 제가 포크해서 약간의 수정을 거친 배포판입니다.
   트래킹 라이브러리나 ApiHero 같은 트래킹이 될 수 있을만한 외부 API등을 제가 찾아 대부분 제거했습니다.

   또한 온프레미스를 위해 Dockerfile까지 약간 수정해서 기존에 하드코딩 되어있던 SESSION_SECRET까지 Docker 이미지 빌드시 --build-arg로 직접 조정 할 수도 있습니다.

   직접 제작한 배포판에 문제가 있다면 레포에 이슈로 달아주세요.

   우와 좋네요. 감사합니다.

   자작 배포판 데모 링크입니다.
   https://jsonhero.antegral.net/
     * 참고로, 공식 오픈소스 버전이나 자작 배포판과 기능상 차이는 없는 것으로 확인되나,
       Try it out에 있는 예제 JSON API는 두 배포판 전부 작동하지 않습니다.
"
"https://news.hada.io/topic?id=7884","키 변경(전조)의 죽음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              키 변경(전조)의 죽음

     * 지난 60년간 팝차트의 주요 변화중 하나는 바로 전조(Key Change)가 사라졌다는 것
     * 마이클 잭슨의 솔로 곡중 특이한 ""Man in the Mirror""는 곡 중간에 G장조에서 G#장조로 변화함.
       (다른 곡들은 정신없지만, 이 노래는 편안하고 힘있게 들림)
     * 1958~1990년 사이의 빌보드 1위곡들에서 G장조는 매우 많이 보임. 기타/피아노 양쪽에서 작업하기 쉽기 때문
       그래서 수십년간 양쪽 악기에서 사용하기 편리한 C/G/D장조들이 B/Gb 장조보다 더 인기가 있었음
     * 또한 같은 기간 사이의 1위곡중 23%는 중간에 전조가 있는 다중키 노래들이었음
     * 노래의 끝부분에서 노래의 키를 반음 또는 온음 위로 올리는 전조는 수십년간 매우 인기있었음
     * 1958~1990년 사이의 전조 곡중 52%가 이런 방식을 사용. ""I wanna dance with some body(Whitney Houston)"" ""Livin' on a Prayer(Bon jovi)"" 등에서 찾아볼 수 있음
     * 이상한 점은 1990년 이후에는 전조가 1위곡에서 잘 사용되지 않는다는 것
     * 더 이상한 것은 같은 시점에 1등하는 곡들의 키들도 변한다는 것. 실제로 작곡가들은 비슷비슷하게 모든 키를 폭넓게 사용하기 시작

팝 음악의 키를 영원히 바꾼 두가지 요인

     * #1 힙합의 부상
          + 힙합은 멜로디/하모니 보다 리듬과 서정성을 더 강조하기 때문에 이전의 거의 모든 장르와 극명한 대조를 이룸
          + 힙합에선 키를 변경해도 랩을 변경할 필요가 없지만, 기존 노래에서는 키를 잘못 변경하면 보컬 범위를 벗어날수 있음. 즉 힙합에서는 키가 별로 중요하지 않음
     * #2 디지털 음악 제작 또는 컴퓨터 녹음의 인기가 증가
          + 기타와 피아노는 특정 키에 적합하지만, 컴퓨터는 키에 구애 받지 않음
          + Logic이나 ProTools에서 C장조로 녹음하고 키가 맘에 안들면 새로 연주할 필요없이 키를 변경할 수 있음
          + 디지털 녹음 소프트웨어로 인해서 작곡 방식 자체가 변경
               o 기존에는 노래를 작곡할 때 섹션별로 작업했음. 가사를 쓰고, 코러스를 넣고..
               o 새로운 섹션에 들어갈 때 흥미를 일으키기 위한 방법은 가사를 바꾸거나, 멜로디를 바꾸거나, 키를 바꾸는 것
          + 하지만 컴퓨터 세대에는 이런 리니어한 스타일이 별로 의미가 없음
               o 짧은 루프를 녹음하고 그걸 곡 전체에 돌려쓰는 ""버티컬한 작곡방식""이 장려됨
                 (컴퓨터 화면에 세로로 나열된 각각의 트랙들을 보고 들으며 그걸 편집하는 방식)
     * 2010년대에 유일하게 전조를 사용한 히트곡은 Travis Scott의 ""SICKO MODE""
          + 비트와 키의 변경이 조화로운 이 노래는 돋보일뿐 아니라,
            구조적 복잡성으로 인해서 지난 10년간의 전형적인 힙합 히트곡 보다 훨씬 클래식한 구성에 가까움
     * ""Justice for the Key Change""
"
"https://news.hada.io/topic?id=7947","Media-chrome : 웹 컴포넌트를 이용한 커스터마이저블 미디어 플레이어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Media-chrome : 웹 컴포넌트를 이용한 커스터마이저블 미디어 플레이어

     * React/Angular/Svelte 등의 웹 프레임워크와 호환
     * <video> / <audio> 엘리먼트 및 다양한 플레이어들(Youtube, HLS,js,..)과 호환
     * 간단한 HTML로 제어기능들 추가/삭제 가능
     * CSS로 스타일링 지원
     * Video.js 개발자가 만든 오픈소스

   좋네요!
"
"https://news.hada.io/topic?id=7872","Amazon, 음성 비서 Alexa를 없애는 중?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Amazon, 음성 비서 Alexa를 없애는 중?

     * 직원들에 의하면 엄청난 손실과 함께 부서가 위기에 처했다고
     * Echo 스피커와 Prime Video를 포함하는 아마존의 ""Worldwide Digital"" 사업부가 올해 1분기에만 30억달러 영업 손실
     * 대부분의 손실은 알렉사와 기기들에서 발생
     * 지금까지 아마존의 비즈니스 모델은 열악한 재무성과를 용인했지만 더 이상은 아님
     * 알렉사와 기기 팀 전체가 이번 정리해고의 주요대상자가 되었다고
     * 아마존 내에서 여러번 복제되었던 ""기기를 저렴하게 판매하고 추가 구매로 수익을 내는 비즈니스 모델""이 실패한 것
     * ""Alexa는 엄청난 상상력의 실패임"" ""낭비된 기회""

   https://archive.md/I8zpN

   아마존 10,000여명 정리해고 계획 중
"
"https://news.hada.io/topic?id=7874","Haxophone - 색소폰을 닮은 전자악기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Haxophone - 색소폰을 닮은 전자악기

     * 저렴하고, 커스터마이징 가능하며, 들고다니기 쉽게 설계한 오픈소스(Rust) & 오픈하드웨어(라즈베리 파이)
     * 진짜 색소폰같은 표현력이나 깊이까지는 어렵지만, 어디서든 혼자/친구들과 함께 연주 가능
     * 실제 색소폰과 같은 운지법으로 제작하여, 근육 기억 훈련 가능
     * 기계식 키와 독특한 인체공학적 설계로 색다른 만족감을 선사
     * $100 이하로 만들기 쉽게 설계했다고
     * 하드웨어
          + 라즈베리 Pi 용 HAT(Hardware Attached on Top)
          + 마우스피스 + 압력센서 + 오디오 앰프
          + 가장 저렴한 라즈베리 파이 제로도 가능
     * 소프트웨어
          + haxo-rs : 키입력과 호흡을 감지해서 음표로 변환하는 드라이버. Rust
          + fluidsynth : 음표를 소리로 변환하는 신디사이저. C코드로 된 유명한 크로스플랫폼 오픈소스
     * 각종 부속들이 기록된 상세 어셈블리 가이드 포함
     * COVID 기간중에 만들어서 공개했는데, 부속이 너무 비싸져서 경제적이지 못했음. 지금은 다시 부속들이 저렴해져서 재공개

   하우징이 있으면 좋으련만.. 좀 긱하게 생겼네요..ㅋㅋㅋ

   세번째 줄에 오타가... 흠흠

   앗.. 흠흠.. ㅋㅋㅋㅋ

   우와, 세척만 쉽다면 하나 갖고싶네요
"
"https://news.hada.io/topic?id=7847","2035년 이후로 윤초를 더 이상 넣지 않기로 국제 도량형 총회에서 결의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                2035년 이후로 윤초를 더 이상 넣지 않기로 국제 도량형 총회에서 결의

   이전 GN 뉴스: https://news.hada.io/topic?id=7046

   개인적으로 아주 기쁜 소식인데요, 우리가 사용하는 협정 세계시(UTC)는 지구의 자전을 따라가는 세계시(UT1)와 0.9초 이상 차이가 날 수 없도록 되어 있어서 이를 바로잡기 위해 주기적으로 윤초를 넣어야 했지만 이게 현대 컴퓨터 시스템에서 이리 저리 문제가 많았습니다. 이에 제 27회 국제 도량형 총회(CGPM)에서 마침내 현재의 윤초 시스템을 폐기하고 UTC와 UT1이 좀 더 어긋나는 걸 허용하기로 결의했다는 소식입니다.

   정확한 결의 내용은 여기서 볼 수 있습니다: https://bipm.org/documents/20126/…

   써머 타임도.. 어떻게 좀...

   왜 기쁘셨는지 궁금합니다

   세상에는 필요한 복잡도와 불필요한 복잡도가 있는데요, 윤초는 불필요한 복잡도에 가깝습니다. 좀 극단적으로 말하면, UTC와 UT1 차이가 1시간 나도 실용적으로 거의 문제가 없습니다(이 정도로 차이가 나려면 대략 1000년 정도는 지나야 합니다). 그런데 이 차이를 굳이 ""최대 0.9초""라고 못박은 것은 무슨 다른 이유가 있어서가 아니라, 이전에는 UTC 1초가 UT1 1초와 (아주 살짝) 달랐던 적도 있고, 윤초 비스무리한 게 있긴 했는데 1초 단위가 아니라 0.05초라거나 0.2초라거나 하는 단위로 예측 불가능한 시점에 조정되고 그랬던 적도 있습니다. 현재의 윤초는 그보다는 낫다는 이유로 선택된 뒤 수십년간 재검토가 이루어지지 않은 순수한 기술 부채(debt)입니다. 그리고 엔지니어들은 기술 부채 갚는 걸 참 좋아하죠. :-)

   자세한 설명 감사합니다. 언제나 문장에 열정이 느껴져서 참 좋아한다는 팬심 전하고 갑니다! :bow:

   전혀 모르는 분야라서요

   그럼 지금껏 윤년에 태어난 분들은 아예 생일이 없어져 버리는....? (오열)

   앗 윤년이 아니라 윤초군요 ㅎㅎ

   ㅎㅎ 저는 윤초라는게 있는줄 첨 알았네요
"
"https://news.hada.io/topic?id=7857","Steam이 랜덤 글꼴을 사용하게 되어버린 이유를 조사해 봤더니","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Steam이 랜덤 글꼴을 사용하게 되어버린 이유를 조사해 봤더니

     * Stanley Parable이란 게임에서 ""10년간 게임하지 않기"" 업적 달성을 위해서 NTP를 비활성화하고 시스템 시간을 2040년으로 조정했음
     * 이때 Steam이 여러 파일의 시간을 2040년으로 업데이트하면서 Y2038 이 넘어서 발생한 문제
     * '/usr/share/fonts': Value too large for defined data type. 라는 에러가 발생하기 시작
     * fontconfig의 32-bit 코드가 OVERFLOW를 내기 시작한 것
     * 해결하기 위해서 '모든 루트/홈 파티션을 재마운트' 해야 했음
     * ""2038년은 정말 재미날 것 같아요""

   예전에 Y2K가 문제가 있을 것이다 라고 한참 떠들었지만 큰 문제 없이 지나간 기억이 있는데, Y2038은 정말 그럴까요..?
"
"https://news.hada.io/topic?id=7910","애플, 아이폰 호환 펜슬 출시 예정 루머","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         애플, 아이폰 호환 펜슬 출시 예정 루머

   $49. 압력감지 및 배터리 없음(삼성 S-Pen 에서 사용하는 메커니즘)
"
"https://news.hada.io/topic?id=7906","I/O는 더 이상 병목이 아니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           I/O는 더 이상 병목이 아니다

     * 면접에서 종종 묻는 질문 2가지
          + 텍스트 파일에서 단어를 세는 프로그램을 작성해 보세요
          + 이 프로그램의 성능 병목현상은 어떤 부분인가요?
     * 종종 사람들이 ""파일에서 읽기"" 이라는 답변을 하는데, 이젠 더 이상 그렇지 않음
     * 10-20년 전에는 그랬지만, 2022년 현재 디스크에서 시퀀셜하게 읽는 것은 매우 빠름(필자도 테스트 해보기 전에는 몰랐음)
     * 병목부분은 입력을 처리/파싱 해서 메모리에 할당하는 것 : 단어로 쪼개고, 소문자 변환하고, 해쉬테이블로 빈도를 세는 등의 작업
     * 파이썬/고 로 413MB 텍스트 파일(킹 제임스 성경을 100번 붙인 파일)을 테스트 해봤을 때
          + 읽는 것은 0.1~0.2초 면 되고, 처리가 7초에서 2초까지 걸림
     * 결론적으로 ""빅데이터""를 처리하는 경우 디스크 I/O는 병목이 아닐수 있음

   아무리 sequential 접근이라고 해도 언어마다, 라이브러리 마다 IO 파이프 사용 법이나 개발자 IO API요청 빈도 등 영향이 가는부분이 있어 IO가 더이상 병목이 이니라고 하는거는 전제가 필요하다고 본다

   네트워크 io는 io가 아닌가? ㅋㅋㅋ

   아무리 빨라져도 io는 io다 왜 프로그래밍시 io부분만을 위한 솔루션이 따로 존재하는 이유다

   빅데이터 디스크를 전부 nvme ssd 로 한다고? ㅋㅋ 대체 얼마야...

   디스크 I/O 로 매우 고통받으면서 플래터를 최대한 적게 움직이게 해야하는 일을 하는 저로서는 신기한 이야기이네요.
   글 내용에 ""시퀀셜""이라는 이야기고 있네요.
   seek를 전혀 하지 않는다면 뭐 틀린 이야기가 아닐수도 있죠.

   전제가 잘못된 실험입니다.

   추가 설명 부탁드립니다

   병목이라는 것 자체가 상대적인 시간에 대한 이야기입니다.
   cpu 속도와 i/o를 비교하는게 맞습니다.
   과거의 io보다 빨라졌다고 해서 io가 cpu보다 빠를 수 없습니다.

   mmap을 이용하여 가상 메모리에 로드만 해놓고 실제는 cpu가 연산할 때마다 읽는 것일 수도 있습니다.
   cpu와 모든 메모리(레지스터, 메인메모리, 디스크) 간의 통신도 전부 io입니다.
   https://stackoverflow.com/questions/5877797/how-does-mmap-work

   빅데이터를 판가름할 기준이 궁금해지네요

   신기합니다.

   오늘도 지식하나 더 늘어갑니다.

   https://news.ycombinator.com/item?id=33751266 에 있는 첫번째 댓글의 URL이 재미나네요.
   Napkin Math (단순한 수학들)
   시퀀셜 I/O는 거의 메모리 속도에 근접해 가고 있다고..

   냅킨 매쓰라니 이름이 너무 매력적이네요.
   UTF-8 만들때 롭 파이크가 냅킨에 끄적여서 보여줬다던가요
"
"https://news.hada.io/topic?id=7836","스냅드래곤 8 2세대 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             스냅드래곤 8 2세대 발표

     * 스냅드래곤 Smart : 퀄컴 헥사곤 프로세서 기반 차세대 AI엔진. 기존 대비 4.35배의 성능. INT4 지원
     * 스냅드래곤 Sight : 최초의 Cognitive ISP. AI신경망을 이용하여 얼굴, 머리카락, 옷, 하늘등을 상황에 맞게 인식하고 최적화
     * 스냅드래곤 Elite Gaming : 실시간 레이트레이싱. 25% 빠른 GPU. CPU는 최대 40% 높은 전력 효율성. 최초로 Unreal Engine 5 Metahumans Framework의 모바일 최적화 지원
     * 스냅드래곤 Connect : 5G 플랫폼. 5G+5G/4G Dual-SIM Dual-Active. Wi-Fi 7 과 듀얼 블루투스
     * 스냅드래곤 Sound : 동적 헤드 트래킹 및 공간오디오 지원. 48kHz 무손실 음악 스트리밍 지원
     * 스냅드래곤 Secure : 사용자의 개인 정보 보호
"
"https://news.hada.io/topic?id=7878","Apple Rankings - 사과 순위 사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Apple Rankings - 사과 순위 사이트

   먹는 사과의 품종별 순위와 설명, 상세 평가, 댓글들 보기 가능

   요새 먹는 엔비사과가 6위군요.
   이거 진짜 맛있는데..ㅎㅎ

   1등인 SweeTango 가 홍옥이랑 맛이 비슷하다고 하네요.
   2등인 Honeycrisp 도 기존 한국 사과에 익숙하신 분들은 괜찮다고?
   하지만 둘 다 안먹어봐서 ㅎㅎ 오래전에 미국 마트에서 산 사과는 거의 실패했던 기억이 ㅡ.ㅡ;;
"
"https://news.hada.io/topic?id=7889","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   오랜만에 아이데리고 미술관 나들이 예정입니다.

   아이들과 동물원에 다녀왔습니다.
     * 흰손기번(긴팔원숭이)가 엄청난 묘기를 보여주고
     * 흰꼬리수리가 활강을 보여주어서
       아이들이 엄청 신나했습니다.

   겨울맞이 청소 및 책상 정리를 했습니다. 책상 정리를 하면 생산성이 올라가는 것 같아요 ㅡ.ㅡ;

   오래동안 고민하던 중고차를 구매하러 가보려합니다. 차량으로 출퇴근하지 않다보니 차가 별로 필요없어서 카셰어링을 이용하고 있었는데, 와이프와 상의한 끝에 저렴한 중고차 하나정도는 있으면 좋겠다 결론이 났습니다.
   일단 가보고 영 아니다 싶으면 돌아오겠지만 아마 사지않을까 싶네요..ㅋㅋ 생에 첫 차입니다.

   막국수를 먹으러 가볼 생각입니다. 날씨는 선선해도 시원한 막국수가 땡기네요

   sqlsoup을 잘 쓰고 있었는데 어느새부터 지원중단돼서 제작자에게 sqlsoup2 제작을 허락받아서 패키지를 만들 예정입니다 야호
"
"https://news.hada.io/topic?id=7942","Postgres와 MySQL의 인덱스 머지 vs 컴포지트 인덱스 비교 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Postgres와 MySQL의 인덱스 머지 vs 컴포지트 인덱스 비교

     * ""컴포지트 인덱스가 인덱스 머지보다 10배 빠름
       Postgres에서는 MySQL보다 그 차이가 더 큰데,
       Postgres가 인덱스 머지가 들어가는 쿼리에 대해서 인덱스-온리 스캔을 지원하지 않기 때문""
     * SELECT count(*) FROM table WHERE int1000 = 1 AND int100 = 1 쿼리에 대해서
       (int1000, int100) 컴포지트 인덱스를 만들거나, int1000/int100 에 대해서 개별 인덱스를 만들어서 머지 가능
     * 1천만 레코드를 랜덤 생성한 후 테스트
          + 컴포지트 인덱스 : 5ms
          + 인덱스 머지 : MySQL은 30~40ms, Postgres는 30~90ms
     * Postgres를 사용중이라면, 인덱스 머지 기능 사용에 유의할 것
"
"https://news.hada.io/topic?id=7949","네이버‧카카오, ‘욕설‧비속어’ 통합 DB API 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     네이버‧카카오, ‘욕설‧비속어’ 통합 DB API 공개

     * 한국인터넷자율정책기구(KISO)가 인터넷상 욕설·비속어 등을 노출 제한할 수 있도록 하는 ‘KSS’(KISO Safeguard System)를 개발
     * 국내 대표 포털인 네이버와 카카오로부터 제공받은 약 60만 건의 욕설 데이터베이스(DB)를 통합
     * 기업들이 자율적으로 기술적 보호조치에 활용할 수 있도록 응용프로그램 인터페이스(API)를 최근 개발 완료
     * 내년 상반기 정식 서비스 예정이며 본 서비스에 앞서 베타서비스를 진행
"
"https://news.hada.io/topic?id=7928","The Greatest | Apple","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          The Greatest | Apple

     * 애플의 접근성(Accessibility)에 대한 노력을 잘 보여주는 광고
     * 문 감지, 소리 감지, 보이스 오버, 음성 및 제스처를 통한 제어

   애플의 접근성 관련해서 제가 10년전에 번역한 글이 하나 있습니다.
   아이폰이 내 삶을 바꿨다 : 시각장애인 Austin 의 아이폰 사용기

   글로벌 접근성(Accessibility) 동향 리포트
   Be My Eyes - 시각장애인에게 시력을 주세요

   ㅠㅠ 뭉클합니다
"
"https://news.hada.io/topic?id=7905","HN Summary - 해커뉴스의 탑 뉴스를 GPT-3로 요약해주는 텔레그램 봇 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN Summary - 해커뉴스의 탑 뉴스를 GPT-3로 요약해주는 텔레그램 봇 오픈소스

     * 해커뉴스에서 투표를 많이 받은 탑 기사들을 GPT-3로 요약해서 텔레그램 채널로 발행하는 오픈소스 봇(파이썬)
     * 웹 페이지에서 텍스트 추출부분이 기본적이어서 아직 완벽하진 않음
     * PDF 나 다른 콘텐츠 링크는 무시함
     * GPT-3에 요청한 프롬프트는 다음과 같음

     ""Provide a detailed summary of the following web page, including what type of content it is (e.g. news article, essay, technical report, blog post, product documentation, content marketing, etc). If there is anything controversial please highlight the controversy. If there is something unique or clever, please highlight that as well:""

   해커뉴스를 잘 몰라서... 탑스토리 라는게 best 에 표시되는 것들을 말하는 걸까요? 표시되는 내용이 넘 다르네요.

   첫화면 최상단에 나오는 것들을 의미할 겁니다.
   업로드된 시간/투표수/페널티 등을 고려해서 일정 기간 동안 최상단에 유지됩니다.
   How Hacker News ranking really works: scoring, controversy, and penalties

   https://news.ycombinator.com/item?id=33748363 에 댓글들 보니..
   ""해커뉴스의 이슈 중 하나는 요약이 없다는 거. 이런 기능 HN에서 도입하면 좋겠네""

   GeekNews는 요약 넣는 기능이 있어서 사용자 분들과 제가 직접 입력 하고 있습니다만.. 언젠가는.. ?
   이런거 한국어로도 잘 되면 제가 할 일이 줄어들지도..

   와.. 요약 -> 번역 파이프라인이 자동화 될 날이 멀지 않은 듯 합니다...
"
"https://news.hada.io/topic?id=7866","AI기반 코드 자동완성 도구 Kite, 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AI기반 코드 자동완성 도구 Kite, 서비스 종료

     * 2014년 부터 AI로 코딩을 도와주는 서비스를 만들어왔음
     * 비즈니스가 두가지 중요한 면에서 실패했음
          + 시장에 너무 빨리 나와서 ""AI 지원 프로그래밍""이라는 비젼 전달에 실패(기술이 아직 준비되지 않았음)
          + 수익을 창출하지 못하여 비즈니스를 만들어내지 못함

   가끔씩 사용했던 기억이 있는데 아쉽네요! Tabnine이나 Copilot은 지금도 잘 쓰고 있는데, Kite도 잘할 수 있지 않았나 싶어요.

   Kite 메인 레포를 보니 블로그 게시글보다 도움 될만한 내용이 많은 것 같네요.

   회사에서 사용하던 코드 전체를 그대로 (프라이빗 정보만 모두 제거해서) 공개한 부분은 좋은 것 같습니다. 회사가 망한 건 아쉽지만...

   이런 내용을 기반으로 또 다른 오픈소스 AI 코드 자동 완성 도구가 발전하면 그것도 좋을 것 같네요.

   그런데 해당 저장소 커밋을 보니 내용 올라온 게 올해 1월이던데, 그때부터 회사 망하는 걸 준비하고 있던 걸까요?

   Kite를 1년 반 동안 사용하고 있는데 VSCode 프로덕트 자체가 너무 잘 만들어져서 Kite가 빛을 못 발한 것 같아요... 기본 Python 확장이나 Pylance만 잘 써도 ㅎㅎ

   가끔 변수명 추천 같은건 좋았지만 Copilot이 이런것도 잘해주고 있어서 그런 것 같네요

   근데 읽어보면 엄청 공감가는 내용은 아닌듯 하네요.
   ""개인 개발자는 도구에 돈을 쓰지 않습니다"" 라고 적었는데..
   이건 Kite가 비용에 비해 원하는 가치를 못줬기 때문이라고 생각합니다.
   Github Copilot은 개인으로라도 돈 내고 쓰겠다는 사람이 주위에 많은걸 보면요.

   공감합니다. 저도 개발을 위해서 구독 비용으로 꽤 많은 돈을 지출하고 있거든요.

   결국 Copilot이나 Tabnine과 직접적인 경쟁에서 밀린게 아닐까 싶네요. 성능 문제나 편의성 문제나... 저도 Copilot은 돈주고 잘 사용하고 있습니다.

   동의합니다

   Tabnine은 돈주고 쓰고 있는데 Kite는 제가 원하는 가치를 못 준 것 같아요.

   동의합니다
"
"https://news.hada.io/topic?id=7933","git gone - 원격에서 삭제된 브랜치를 모두 삭제하는 커스텀 명령어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                git gone - 원격에서 삭제된 브랜치를 모두 삭제하는 커스텀 명령어

   원격(remote) 브랜치를 트래킹하는 로컬 브랜치가 존재하는 상태에서, 원격 브랜치가 삭제된 경우, 내 컴퓨터에만 남게 된 로컬 브랜치를 지워주는 커스텀 명령어 설정 방법
     * 트래킹하는 상태에서 원격 브랜치가 삭제되면 [gone] 상태로 전환된다는 점을 이용함
     * git gone 명령어는 두 가지를 실행함
         1. git fetch -p를 통해 prune 처리 (지워진 원격 브랜치 정보 갱신)
         2. 지워진 원격 브랜치를 트래킹하는 로컬 브랜치를 모두 삭제
     * 트래킹하는 원격 브랜치가 없는 로컬 브랜치는 지워지지 않음

   git 실행이 가능한 터미널에서 아래 명령어를 사용하면 git gone 명령어를 커스텀 커맨드로 추가할 수 있음
     * git config --global alias.gone ""! git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '\$2 == \""[gone]\"" {print \$1}' | xargs -r git branch -D""
"
"https://news.hada.io/topic?id=7893","OSSRank - 오픈소스 프로젝트 비교하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        OSSRank - 오픈소스 프로젝트 비교하기

     * 여러 오픈소스 프로젝트간에 커밋 빈도/기여자 수를 비교하는 도구
     * 30일/90일/1년/3년/전체 커밋 및 기여자 수를 표시
     * 약 2000개의 오픈소스를 추적하고 랭킹을 매기는 사이트
"
"https://news.hada.io/topic?id=7948","ai 도구 모음 - 미래를 이해하기 위해 알아두면 좋은 인공지능 도구 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ai 도구 모음 - 미래를 이해하기 위해 알아두면 좋은 인공지능 도구 모음

    1. runway (https://runwayml.com/) : 콘텐츠를 만드는데 사용할 수 있는 다양한 인공지능 툴을 제공하는 서비스.

   동영상 배경화면 지우기, 텍스트에서 이미지 생성, 이미지에서 이미지 생성, out painting (이미지의 외곽을 확장하면서 이미지를 생성) 등 다양한 기능들이 있다.

   잠깐 사용을 해봤는데 엄청 완벽하지는 않지만 인공지능에 대한 여러가지를 테스트 해 볼 수 있어서 좋았다.
    2. DiffusionBee : 스테이블 디퓨전을 맥 앱으로 사용할 수 있게 만들어 놓은 프로그램이다. 텍스트 프롬프트를 입력하면 이미지를 생성해 준다.

   M1과 M2에 최적화가 되어 있으며 16기가 램이 권장된다고 한다. 8기가 램에서도 돌아가는데 10분정도 걸렸다고 한다.
    3. LexicaArt (https://lexica.art/) : 텍스트 투 이미지 모델의 프롬프트를 사람들이 올릴 수 있고 볼 수 있는 사이트. 주로 스테이블 디퓨전 프롬프트와 이미지가 올라 온다.
    4. metaphor (https://metaphor.systems/) : 프롬프트를 입력하면 이 다음에 어떤 링크가 올지를 예측해서 알려주는 검색 시스템.
    5. soundraw (http://soundraw.io/) : 인공지능이 음악을 생성해 주는 사이트입니다. 음악을 다운로드 받으려면 유료 구독을 해야 합니다. (연간 16달러, 월간 19달러)

   다음 링크는 제가 soundraw로 만들어서 유튜브에 올려 본 음악입니다. 퀄리티가 꽤 좋습니다. 한 번 들어보세요. 링크
    6. clipdrop (https://clipdrop.co/) : 기존 사진의 빛을 조정할 수 있다. 그 외에도 이미지의 오브젝트를 지운다거나 크기를 키운다거나 (upscale) 배경 화면을 지운다거나 등의 일을 할 수 있다.

   원들을 움직여서 빛을 조정할 수 있다.
    7. talk to books (https://books.google.com/talktobooks/) : 이건 많이 아실거 같은데 검색어를 입력하면 인공 지능으로 책 속의 문장을 찾아준다. 아쉽게도 한글은 안된다.
    8. stable diffusion hugging face (https://huggingface.co/spaces/stabilityai/stable-diffusion) : 스테이블 디퓨전으로 간단하게 이미지를 몇 장 생성하고 싶을 때 사용할 수 있는 사이트입니다. 현재 스테이블 디퓨전 버전 2 데모를 사용할 수 있습니다.
    9. gpt-3 play ground (https://beta.openai.com/playground) : gpt-3 언어 생성 모델을 체험해 보고 싶을 때 이용하면 좋습니다.

   Stable Diffusion은 여기(https://discord.gg/mW7hPtFJZh)로 오세요, v2도 있고 이미지 생성도 10초 내외라 custom model 따로 쓰실거 아니고 체험이라면 디코 봇으로도 충분합니다!

   우왓 감사합니다 ^^
"
"https://news.hada.io/topic?id=7909","Tesla의 'Full Self-Driving' Beta, 북미 사용자 누구나 이용 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Tesla의 'Full Self-Driving' Beta, 북미 사용자 누구나 이용 가능

   2년간 점진적으로 배포하다가 이제는 북미 구매자 누구나 사용 가능해짐

   한국은 언제쯤..
"
"https://news.hada.io/topic?id=7829","애플, 2024년부터 애플 실리콘칩 일부를 미국 애리조나 공장에서 생산 준비중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              애플, 2024년부터 애플 실리콘칩 일부를 미국 애리조나 공장에서 생산 준비중

   공급망 다변화 정책에 따른 것으로, 미국에 설립된 (TSMC) 공장에서 생산을 시작하며, 유럽에서도 생산이 될 수 있음
"
"https://news.hada.io/topic?id=7925","2022 맥킨지 Global Payments 보고서 (53p PDF)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 2022 맥킨지 Global Payments 보고서 (53p PDF)
"
"https://news.hada.io/topic?id=7895","미국 국방부(DoD), Zero Trust 전략 및 로드맵 공개 [58p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             미국 국방부(DoD), Zero Trust 전략 및 로드맵 공개 [58p PDF]

     * 현재/미래의 사이버 위협 및 공격으로 인해 기존의 경계 방어 접근법을 뛰어넘는 Zero Trust 접근 방식이 필요해짐
     * 전략 및 로드맵에 따라 2027년까지 고유한 ZT 기능과 활동을 구현할 계획
     * ZT 달성을 위한 4가지 전략 목표
          + Zero Trust Cultural Adoption : ZT 문화 채택
          + DoD information Systems Secured and Defended
          + Technology Acceleration : 업계 수준과 같거나 더 빠르게
          + Zero Trust Enablement : 부서 및 컴포넌트 단위에서 프로세스, 정책, 자금 지원
"
"https://news.hada.io/topic?id=7953","ChatGPT안에 Virtual Machine 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ChatGPT안에 Virtual Machine 만들기

     * ChatGPT에게 리눅스 터미널 처럼 동작하라고 지시한 후에 다양한 명령을 내려봄
     * ls, cd, touch, cat 등의 기본 동작이 가능. 파일시스템도 이해하고 있음
     * Dockerfile 도 이해서 Docker 실행이 가능함
     * 외부로 ping / curl 도 가능하며, lynx로 브라우징도 가능
     * ChatGPT URL로 Curl을 보내서 자기 자신에게 물어보도록 지시해서 답변 받는게 가능함
     * 자기 자신에게 리눅스 터미널로 동작하라고 curl로 명령을 내려봄(이 글의 처음 시작으로 재귀..)

   리눅스 쉘인 것처럼 행동해보라고 했는데 안되는게 막혔나봅니다 ㅠㅠ

   지속적으로 모니터링하고 차단한다고 하더군요. 이상한 것 좀 시키면 바로 좀 이따 막힌다고 ㅎㅎ

   와 ChatGPT의 동작 자체도 흥미롭지만, 이런 시도를 하는 발상 자체도 재미있네요 XD

   정말 신기해요. 시도가 정말 흥미로운데 결과도 놀랍네요. 직접해보면 한글도 정말 잘 이해하고요.

   대체 우주라는 표현을 보니, 정말 미래에는 매트릭스가 실현될 수도 있겠다는 생각이 듭니다. 거대한 언어 모델일 뿐인데 이렇게까지 정밀한 응답이 가능한 게 너무 신기하네요.
"
"https://news.hada.io/topic?id=7880","CICERO - 사람과 협상하고 설득하고 협동하는 AI 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  CICERO - 사람과 협상하고 설득하고 협동하는 AI 에이전트

     * Meta AI가 유명한 전략 보드게임인 Diplomacy에서 사람 수준의 능력을 보여주는 인공지능을 개발하여 공개
     * 해당 게임의 온라인 버전에서 사람보다 2배이상의 점수로 상위 10%에 오름
     * Diplomacy는 몇십년간 AI에게는 불가능한 도전 이었음
          + 게임내에서 다른 사람의 동기나 관점을 이해해서 복잡한 계획을 세우고 전략을 조정해야함
          + 그리고 자연어로 그들과 소통해서 합의를 이끌어 내고 파트너십 및 동맹에 대해 확신을 줘야함
          + CICERO는 매우 협상을 잘해서, 다른 인간 참여자보다도 선호되기도 했음
          + 다른 사람이 블러핑 하는 것을 눈치 채지 못하거나, 공격적인 행동을 이해하지 못하면 금방 지게 됨
          + 또한 실제 사람처럼 말하지 않으면 (공감하거나, 관계를 구축하고, 게임에 대한 지식을 말하는 등) 다른 사람이 같이 하려고 하지 않음
     * 이 성취의 핵심은 AI의 완전히 다른 두 영역의 교차점에서 새로운 기술을 개발하는 것
          + AlphaGo/Pluribus 같은 것에서 사용된 전략적 추론(Strategic Reasoning)
          + GPT-3/BlenderBot 3/LaMDA/OPT-175B 같은 것에서 사용된 자연어 처리(NLP)
     * 예를 들어, CICERO는 게임 후반에 특정 플레이어의 지원이 필요하다고 추론한 다음, 그 사람의 호의를 얻어내기 위한 전략을 세울 수 있음
     * 코드와 논문을 함께 공개

   Diplomacy는 무려 1959년에 나온 보드게임으로 2008년에 50주년 기념 버전도 나온바 있습니다. 게임 내에서 플레이어는 1차 세계대전 이전 시대의 유럽 7개 국가(영국, 프랑스, 오스트리아-헝가리, 독일, 이탈리아, 러시아, 터키)중 하나를 플레이 하게 됩니다. 1901년 봄부터 시작해서 매년 봄/가을 턴에 대해서 액션을 취하게 되고요. 군대는 육군과 해군 두 종류만 있고 주변 지역으로 이동(공격 포함)하거나, 주변 지역의 동맹국을 지원해서 공격/방어하거나, 현재 위치를 유지하는 행동중에서 선택을 하게 됩니다. 모든 부대는 공격력 1, 이동력 1으로 동일합니다. 물론 육군은 육지로만 다닐수 있고, 해군을 통해서 바다로 수송(Convoy)이 가능합니다. 즉 행동은 딱 4개입니다. Hold/Move/Support/Convoy

   유럽전역이 펼쳐진 지도에는 별표로 표시된 총 34개 병참지역(Supply Center)이 있는데, 자신의 국가가 18개 지역을 먹으면 승리합니다. 모든 국가는 3개의 병참지를 가지고 시작하고, 러시아만 4개로 시작합니다. 그래서 처음에 12개는 비어있습니다. 각 국가는 가을턴이 끝날 때 자신이 가진 병참지역 수 만큼의 부대를 운영이 가능해집니다. 나라별로 육군2개, 해군1개 또는 해군2개, 육군 1개로 시작하는 병력이 다릅니다. 해군력이 우세한 영국은 런던과 에딘버러에 해군, 리버풀에 육군을 두고 시작하며, 프랑스는 파리와 마르세이유에 육군, 브레스트에 해군을 두고 시작하는 식입니다. 물론 러시아는 모스크바/바르샤바에 육군, 세바스토폴/상트페테르부르크에 해군을 두고 시작합니다. 지역은 내륙/바다/해안 3가지가 있으며, 내륙은 육군만 점령가능하고, 바다는
   해군만, 해안은 육군 또는 해군이 점령 가능합니다.

   게임 진행 자체는 매우 단순합니다. 주사위나 기타 우연요소는 전혀 없고, 각자가 턴마다 외교 협상을 통해서 자신의 군대 이동에 대해서 유리하도록 주변국의 도움을 얻어야 합니다. 외교는 공개적으로 또는 비밀리에 대화를 나눠도 됩니다. 흔히 말하는 비동기로 진행되기 때문에 제한시간을 두기도 합니다. 그리고는 각자가 유닛들이 취할 ""명령서""를 제출하면 마스터가 그걸 취합해서 처리하게 되는 방식입니다. 그래서 메일로 내용을 주고받는 Play By Mail 이라는 형태로도 가능하고요. 각자가 명령서를 내고 동시에 오픈한다고 보면 됩니다. 각 명령서에는 1대의 부대당 1개의 명령만 가능합니다. 예를 들어 부대가 3개인 프랑스는 ""A Par–Bur, A Mar–Spa, F Bre–Pic"" 요게 명령서의 내용입니다. ""육군을 Paris에서 Burgundy로 이동 / Marseilles에서 Spain으로 이동, 해군을
   Brest에서 Picardy로 이동""

   왜 이렇게 하냐면 모든 군대의 힘이 1로 동일한데, 근데 각 지역에는 딱 1개의 유닛(군대)만 있을 수 있기 때문에 같은 지역으로 2개가 이동하는 상황이 생기면 그 행동이 취소됩니다. 이를 해결해 주는게 주변 지역에 있는 동맹군의 지원(Support)인데요. 지원을 얻어서 공격하는 부대수가 지키는 부대수보다 많아지면 그 지역을 차지하게 됩니다. 그러니 원하는 걸 얻기 위해서는 열심히 외교를 해야 합니다.

   ""내가 이번에 우크라이나를 치려고 하는데 좀 도와주지 않겠어? 같이 서부로 진격해 나가자""
   ""싫은데!"" / ""내가 얻게 되는건 뭐지?""

   실제로 처음부터 끝까지 ""대화를 통해서 진행되는 외교 인터랙션""이 전부인 게임인데, 이걸 AI가 제대로 플레이 한다는게 놀랍네요.
"
"https://news.hada.io/topic?id=7837","Pulse 브라우저 - 실험적인 Firefox 포크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Pulse 브라우저 - 실험적인 Firefox 포크

     * 최소한의 UI와 내장 도구들로 집중력과 업무 생산성을 향상시킴
     * 사이드바에서 모든 도구에 접근 가능
     * 텔레메트리를 제거하고 uBlock Origin 내장하여 스파이웨어 차단
     * 내장 QR코드 생성기

   LibreWolf - 개인정보 보호/보안/자유에 중점을 둔 Firefox 포크
"
"https://news.hada.io/topic?id=7860","일런 머스크의 '미친 생산성을 위한 6가지 법칙'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      일런 머스크의 '미친 생산성을 위한 6가지 법칙'

     * Tesla, SpaceX에서 사용하던 것을 이제 트위터 직원들에게도

#1 대규모 미팅은 피하라

     * 참여자가 많은 미팅은 시간과 에너지의 낭비
          + 토론을 방해
          + 사람들을 방어적으로 만듦
          + 모든 사람이 기여하기엔 시간이 부족
     * 모든 사람에게 가치를 주는게 아니라면 대규모 미팅을 잡지 말 것

#2 미팅에 기여하는게 없다면 중간에라도 나가라

     * 미팅이 당신의 ""자료나 정보(Input), 가치, 의사결정""을 필요로 하지 않는다면 미팅에 참여할 이유가 없음
     * 미팅 중간에 나가는 것은 무례한게 아님. 사람들의 시간을 낭비하는게 무례한 짓

#3 명령 체계(Chain of Command)는 잊어라

     * 동료들과 직접 대화할 것
     * 슈퍼바이저나 매니저를 통하지 말 것
     * 빠른 소통이 빠른 의사 결정을 만듦
     * 빠른 의사결정은 곧 경쟁 우위임

#4 똑똑해 보이려 하지말고, 명확히 할 것

     * 기술 용어(Technical Jargon)와 이상한 단어(넌센스)는 피할 것
     * 이런 것들은 의사소통을 느리게함
     * 간결하고(Concise), 요점을 설명하는(To the Point), 이해하기 쉬운 단어를 선택할 것
     * 똑똑해보이려 하지 말고, 효율적으로 일할 것

#5 미팅을 자주하지 말 것

     * 모든 사람의 시간을 낭비하는 데 이것보다 좋은게 없음
     * 미팅은 '협업하고, 직면한 문제를 돌파하고, 긴급한 문제를 해결할 때"" 사용할 것
     * 이슈가 해결되었다면, 자주 미팅하는 것은 더 이상 필요없음
     * 대부분의 이슈는 미팅없이도 해결가능. 미팅 대신 '문자나 이메일을 보내거나, 슬랙/디스코드 채널에서 얘기할 것'
     * 필요한게 아니라면 팀의 워크플로우를 방해하지 말 것

#6 상식적으로 해라

     * 만약 회사 규칙이:
          + 말이 안 되거나
          + 일을 진행하는데 도움이 안되거나
          + 당신의 특정 상황에 맞지 않는 다면
     * 규칙을 따르지 않아도 됨
     * 규칙이 아니라 원칙(Principle)을 따를 것

   테슬라에 투자 많이한 경영진들도 이글을 많이 보면 좋겠네요 ㅎ

   요즘에 제가 많이 생각하는 공감되는 점들이 많네요.

   ""Don’t use acronyms or nonsense words for objects""

   Technical jargon은 어디에도 찾아볼수 없네요

   좋은글 감사합니다
   #4번 기술용어를 쓰지말라는게 아니고
   Acronym을 쓰지말라가 아닌가요?
   https://google.com/amp/s/…

   원본 트윗에는 그렇게 적혀있어서요
   https://twitter.com/LiamKircher/status/1592866989919567872
   글 제목을 누르면 원본 트윗 쓰레드로 갑니다.

   #7 잦은 트윗을 자제하라 (음?...)

   여러회사에서 회의를 해보면서.. 좋은회사와 나쁜회사의 회의가 어떻게 다른지 명확하게 설명하는 글이라고 봅니다..

   좋은 내용이네요.

   내용만 보면 재택근무 하기에 좋은 규칙같긴하네요.

   사람은 욕을 많이 먹지만... 위의 내용들은 참 좋네요

   맞아요. 하는 행동들은 참 그런데, 어쨋거나 항상 화제가 되는 테슬라 & 스페이스X 같은 테크기업 2개를 키운 사람이긴 하니까요.
"
"https://news.hada.io/topic?id=7916","Open AI, 새로운 GPT-3 모델 text-davinci-003 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Open AI, 새로운 GPT-3 모델 text-davinci-003 공개

     * 기존 InstructGPT 모델을 기반으로 구축
          + 프롬프트 지시에 따라 글을 생성하는 모델 : ""달 착륙을 6세 이하에게 몇 문장으로 설명하시오""
     * 002에 비해서 003은 다음이 개선 됨
          + 더 높은 품질의 글을 생성
          + 더 복잡한 명령을 처리 가능
          + 더 긴 형식의 콘텐츠 생성이 가능해서 예전에는 어려웠던 작업이 수행가능해짐
     * 오늘부터 바로 사용가능하며, 기존의 가격과 동일 ($0.0200 / 1k 토큰)

   Open AI에서 온 메일에 들어 있는 예제는 다음과 같습니다.

   ""I am trying to write a web application. What backend frameworks could I use, and what are their pros and cons?"" 라고 물었을 때

   text-davinci-002 :

     There are many backend frameworks that could be used for a web application. Some popular ones include Django, Ruby on Rails, and Express.js. Each of these frameworks has its own pros and cons, so it is important to choose one that will fit the specific needs of your application.

   text-davinci-003 :

    1. Node.js: Node.js is a JavaScript-based runtime environment that is popular for writing backend applications. Pros: Node.js is fast, lightweight, and easy to learn, and it has a large community of developers. Cons: Node.js can be difficult to debug and there is a lack of robust tools for building large-scale applications.
    2. Django: Django is a popular Python-based web framework. Pros: Django is powerful and well-documented, making it easy to get started. It also supports a wide range of databases and APIs, allowing you to easily integrate with other services. Cons: Django can be difficult to scale for large applications and can be slow for certain types of requests.
    3. Ruby on Rails: Ruby on Rails is a popular web framework based on the Ruby programming language. Pros: Ruby on Rails is easy to learn and can be used to quickly build powerful web applications. It also has a wide range of built-in features, such as authentication and authorization. Cons: Ruby on Rails can be slow and resource-intensive, and it can be difficult to scale.
"
"https://news.hada.io/topic?id=7897","FlagAI - 대규모 모델을 위한 빠르고 쉬운 확장형 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   FlagAI - 대규모 모델을 위한 빠르고 쉬운 확장형 툴킷

     * Fast LArge-scale General AI models
     * Multi-Modality 대규모 모델의 훈련, 파인튜닝, 배포
     * AltCLIP, AltDiffusion, WuDao GLM, OPT, BERT, RoBERTa, GPT2, T5 등을 지원
"
"https://news.hada.io/topic?id=7891","Kubeshark - 쿠버네티스용 API 트래픽 뷰어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Kubeshark - 쿠버네티스용 API 트래픽 뷰어

     * 크롬 개발자도구 + TCPDump + Wireshark 를 쿠버네티스 환경에 맞게 구현했다고 보면 됨
     * 쿠버네티스 클러스터 내부의 컨테이너에서 인/아웃 되는 모든 페이로드 및 API 트래픽을 모니터링 하고 시각화 제공
          + HTTP/1, HTTP/2, AMQP, Apacke Kafka, Redis
          + gRPC over HTTP/2, GraphQL over HTTP/1.1 & HTTP/2
     * 45MB 정도의 컴파일된 실행파일로 K8s API를 호출
     * eBPF를 이용
"
"https://news.hada.io/topic?id=7848","Ask GN: terminal 혹은 shell 레벨에서 output coloring 해주는 툴이 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: terminal 혹은 shell 레벨에서 output coloring 해주는 툴이 있나요?

   macos terminal 유저 입니다.

   ls 같은 shell 명령어부터, 각 프로그래밍 언어별로 output 을 컬러링 해주는 툴들은 각각 다양하게 있는데요, 이렇게 정보를 보내는 쪽 말고, 받는 쪽에서 smart coloring 을 해주는 툴이 있나 궁금합니다.

   e.g. 1. terminal extension 을 설치하면 client app 레벨에서 smart 하게 coloring 을 해줌.
   e.g. 2. superviserd 등으로 shell 의 background 에서 돌아가면서 임의의 프로그램의 output 을 smart 하게 coloring 을 해줌.

   이런 류의 툴이 있나 궁금합니다.
   감사합니다.

   원하시는 기능은 쉘단위에서 처리가 되어야할 것 같네요.
   기본 터미널 쓰신다고 하니 아마 bash를 사용중이신걸로 생각됩니다.
   쉘이 명령어와 커널의 인터페이스를 제공해주는 역할을 합니다. 아웃풋을 그려주는것도 쉘의 몫이니 아마 처리하려 한다면 그 레이어에서 해야하지 않을까 싶습니다.
   zsh, fish 등의 모던쉘들에 그런 플러그인이 있을지는 딱히 찾아보지 않아서 잘 모르겠지만요.
   어떤 상황의 출력을 색으로 지정하고 싶은지 몰라서 애매하지만 oh my zsh 를 한번 써보시져. 이것만으로도 쉘 경험이 크게 좋아졌습니다.
   찾아보니 https://github.com/l4u/zsh-output-highlighting 이런걸 만든 사람도 있군요 설치는 안해봤습니다.
"
"https://news.hada.io/topic?id=7877","CVE-2022-41924 - Tailscale 원격 코드 실행 취약점 패치ailscale 원격 코드 실행 취약점 패치

     * Tailscale은 자동 업데이트 되지 않으므로 수동 업데이트 해야함
     * 웹브라우저가 포함된 머신(특히 윈도우)은 최대한 빨리 v1.32.3 이상으로 업데이트 할 것
     * 이 취약점 제보자는 Tailscale의 빠른 대응 속도에 놀랐으며, 계속 사용하길 권장한다고

   [오타제보] Tailscale의 따른 -> 빠른
"
"https://news.hada.io/topic?id=7945","Lumi - 파이썬 함수를 REST API로 변환하는 초소형 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Lumi - 파이썬 함수를 REST API로 변환하는 초소형 프레임워크

     * RPC 컨셉을 가져와서 REST API 스펙과 결합
     * 파이썬 함수를 등록하면 REST API로 사용 가능
     * 웹서버는 Gunicorn으로 개발
     * 로컬 개발서버 제공

   오... 좋다
"
