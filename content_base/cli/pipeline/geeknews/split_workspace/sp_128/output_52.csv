"https://news.hada.io/topic?id=6844","moon - JavaScript를 위한 새로운 빌드 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    moon - JavaScript를 위한 새로운 빌드 도구

     * Rust로 작성
     * 스마트 해슁, 자동 다운로드, 멀티 플랫폼, 리모트 캐슁(예정)
     * 종속성 관리를 위한 프로젝트 그래프, Dependency Workspace, 오너십 메타데이터
     * 여러대로 분산 빌드 지원
     * 모니터링 가능(웹훅)
"
"https://news.hada.io/topic?id=6831","7-Zip 22.00 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            7-Zip 22.00 릴리즈

     * .DMG에서 사용하는 APFS(Apple File System) 추출 가능
     * POSIX(pax) tar 파일 생성 가능
     * 고정밀도 타임스탬프(1ns) 저장 가능
     * Linux Tar에서 owner/group id 저장 가능 옵션 추가
     * ""Add to archive"" 창에서 ""어떤 메타데이터를 저장할지 선택 가능""한 옵션 추가

   버전 생각 안하고 쓰고는 있는데 벌써 22 군요.
   근데 DMG를 별도로 압축을 풀어본 적이 없긴한데.. 윈도우쪽에서 사용할 일이 있으려나요.
"
"https://news.hada.io/topic?id=6892","기술 기업들의 정리해고가 쌓여가는 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          기술 기업들의 정리해고가 쌓여가는 중
"
"https://news.hada.io/topic?id=6801","텔레그램 프리미엄 구독 서비스 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          텔레그램 프리미엄 구독 서비스 발표

     * 7억명 이상의 월 활성 사용자 확보
     * 월 $4.99 구독으로 추가 기능 제공
          + 앱내 모든 제한이 2배로 상향
          + 4GB 파일 업로드와 더 빠른 다운로드
          + 음성 받아쓰기
          + 독점 스티커 및 메시지 리액션 제공
          + 대화 관리 기능 제공
          + 움직이는 프로필 사진
          + 아이디옆에 프리미엄 뱃지
          + 퍼블릭채널에서 광고 제거
     * 모든 사용자용 기능도 개선
          + 공개 그룹에 입장 요청 기능 제공
          + 대화내 인증 뱃지
          + 봇 기능 개선
          + 안드로이드 : 대화 미리보기 개선. 자동 갤러리 저장 옵션
          + iOS : 외부 공유 기능 개선
          + macOS : 움직이는 프로필 사진 생성기
"
"https://news.hada.io/topic?id=6851","무엇이 훌륭한 개발자 경험(DX)을 만드는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       무엇이 훌륭한 개발자 경험(DX)을 만드는가?

프레임워크와 라이브러리

     * 최대한 빠르게 온보딩 가능
     * 업그레이드 쉬움
     * 도움되는 에러 메시지
     * 강력한 기본값과 컨벤션
     * 기본 값 설정에서 탈출 가능하게 만들기
     * 종속성으로 위험 감소

문서

     * 코드로 설명하기(예제 제공)
     * 문제 해결해주기(질문에 대한 답변)
     * 자동으로 문서 생성(API 문서등을 최신으로 유지)
     * 에러에 대한 해결방법도 정리
     * Skimming(대충 읽기)에 최적화 하기
     * 정확할 것(전문용어와 관용구 피하기)
     * 복잡한 것들은 점진적으로 노출하기

APIs

     * API 워크플로우를 깨지 말 것 (Versioning) : Stripe 처럼
     * API를 빠르게 테스트 해볼수 있게 할 것 : Square가 이걸 잘함

   ""Skimming(대충 읽기)에 최적화 하기""는 엄청 공감되네요
"
"https://news.hada.io/topic?id=6845","SQLite 3.39.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           SQLite 3.39.0 릴리즈

     * RIGHT / FULL OUTER JOIN 지원
     * PostgreSQL 및 SQL 호환을 위한 IS NOT DISTINCT FROM / IS DISTINCT FROM 연산자 추가
     * sqlite3_vtab_distinct() 에 새로운 리턴코드 ""3"" 추가 (DISTINCT 이며 ORDER BY를 같이 있는 쿼리를 표시)
     * sqlite3_db_name() 인터페이스 추가
     * 실제 materialization이 필요할 때까지 materialized view 생성을 지연 (만들고 안쓰는 경우를 피하기 위해)
     * SELECT의 HAVING이 모든 aggregate 쿼리에 적용 가능 (GROUP BY 없는 경우에도)
     * CPU 사이클을 2.3% 줄이는 최적화
"
"https://news.hada.io/topic?id=6770","구글, 지구 표면을 거의 실시간으로 보여주는 Dynamic World 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               구글, 지구 표면을 거의 실시간으로 보여주는 Dynamic World 공개

     * 구글 Earth와 AI를 이용해서 10m 해상도로 전세계 데이터를 (거의) 실시간으로 제공
       → 기존에는 100m 단위였고 처리하는데 몇달씩 걸렸음
     * 위성에서 받은 데이터를 매일 처리하여 2015년 6월부터, 2일전 까지의 Land Cover Map(토지피복지도) 제공
       → 구분 : 수역(Water), 산림지역(Trees), 초지(Grass), 습지(Flooded vegetation), 농업지역(Crops), 덤불(Shrub and scrub), 주거지역(Built), 나지(Bare), 눈과얼음(Snow & Ice)
     * 각종 환경 변화를 실시간으로 알 수 있음

   토지피복지도 @ 위키피디아
"
"https://news.hada.io/topic?id=6894","Vim 9.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Vim 9.0 릴리즈

     * 2019년 12월의 8.2 이후 첫 릴리즈
     * 가장 중요한 변경은 Vim9 스크립트 언어 도입
          + 10~100배의 성능 향상
          + 일반적인 프로그래밍 언어와 더 비슷
          + 레거시 스크립트는 그대로 지원
     * 흥미로운 기능들
          + 속도향상의 이점을 보기 위해선 함수는 def로 정의되어야 함
          + 멀티 라인에서 백슬래시는 더 이상 필요 없음(호환성을 위해 쓰는 것도 인정)
          + 함수 호출에 call 필요없음. let/eval 필요 없음
          + export로 외부에서 호출 가능하게 하고, import로 가져오기
          + 커멘트는 #으로 시작

   Ask GN: 이맥스 20년 쓰다가 Vimmer로 전향했습니다.
   위 글에서 neovim 이 lua를 임베딩해서 XX같은 vimscript 안써도 되는게 장점이라고 하셨는데..
   조금 나아지는걸까요..? ㅎㅎ

   Vim 도대체 왜 쓰는가

   neovim nightly 에선 거의 모든 vimscript 의 lua 대체가 가능합니다.
   왠만한 플러그인들은 lua port가 다 이루어졌고, treesitter, lsp native 지원등
   vimscript 가 개선된건 좋은 소식이지만, 사실 의미를 찾기가.. 쉽지 않을 것 같습니다.
   뭔가 neovim 대비해서 매력적인 기능이라도 있어야할텐데..
"
"https://news.hada.io/topic?id=6779","랜덤 Favicon 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             랜덤 Favicon 생성기

     * 1950개의 MIT 라이센스 이미지인 Tabler 아이콘을 이용
     * 배경 타입(원,사각,둥근사각,투평), 채우기 색상, 선 굵기 및 색상, 회전, 스케일 등을 지정 가능
"
"https://news.hada.io/topic?id=6862","엔지니어들이 면접에서 물어야 할 질문들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         엔지니어들이 면접에서 물어야 할 질문들

     ""이 질문들은 매우 직설적이긴 하지만, 이에 대해 좋지 않은 반응을 보이는 회사는 좋은 직장이 아닐 수 있습니다""

이 회사는 Product-Market-Fit 한가요?

     * PMF한지 자신에게 질문한 적이 있나요?
     * PMF를 언제 달성했나요? 어떻게 아나요?
     * PMF를 달성하기 위해 뭘 해야 하나요?
     * 매출은 얼마인가요? 1년전에는 얼마였나요?
     * 일 활성사용자(DAU)는 얼마인가요?

   피해야 할 회사들 :
     * Pre-PMF를 설명하는데 시간을 많이 쓰지 않는 창업자들
     * 제품이나 그들이 주는 혜택이 뭔지 이해하기 어려운 회사들
     * 문제를 찾는 해결책들

Runway가 얼마나 남아있나요? 지출이 합리적인 것처럼 보이나요?

     * Default Alive 한가요?
       → 지금은 수익성이 없지만, 자금이 바닥나기 전에 수익을 낼 수 있을만큼 빠르게 성장 가능한가
     * Runway는 얼마인가요?
     * 이걸 계산하기 위한 가정은 뭔가요?
     * 펀드레이징 계획은 어떻게 되나요?

   피해야 할 회사들 :
     * Default Alive 한지 모르거나, 신경쓰지 않는 회사
     * 시간이 모자르거나 느려서, Default Alive 해질 것 같지 않은 회사
     * 생존을 위해서 단시간내에 매출의 급격한 증가를 가정하는 회사
     * 곧 자금이 바닥나기 때문에 펀드레이징을 하고 있지만, 라운드 클로징을 하지 않은 회사

문화는 어떤가요?

     * 회사의 가치는 뭐고, 왜 그것인가요? 그 가치를 따르는 구체적인 방법들을 알려주실수 있나요?
     * 뭘 만들지 누가 결정하나요 ?
     * 일반적인 하루(근무일)는 어떤 모습인가요?

어떤 미래를 기대하나요 ?

     * 어떤 것이 당신에게 동기를 부여하나요?
     * 지금까지 가장 자랑스러운 것은 뭔가요?
     * 회사를 팔 계획이 있나요 ?
     * 회사의 전략은 무엇이고 왜 그런가요 ?
     * 당신과 다른 공동창업자들은 어떻게 갈라서는 것을 피하나요?
     * 뭐가 당신을 저녁에 깨어있게 하나요?

   면접시 지원자에게 충분한 질문 시간을 제공하는데 질문하는 분들이 별로 없긴 합니다. 스타트업에 맞는 질문이 많긴 하지만, 다음 면접에서는 예시로 이런 것도 몇 가지 있다고 이야기해야겠네요.

   회사에 궁금한 점은 없으신가요? - Reverse Interview 한글 번역
   이 리스트에도 위와 같은 질문들은 어느정도 들어가 있습니다.
   너무 직설적이지 않게 돌려서 물어보는 것은 가능할 것 같아요.

   한국에서 이랬다간 면접관들이 모두다 입을 모아서 외칩니다. ""당장 나가주세요. 안뽑아요""

   일반화 할 필요는 없을 것 같네요. 저는 이런 대화를 나누며 지금 (한국) 회사에 들어왔습니다.

   https://simplicable.com/new/default-alive-vs-default-dead
   Default alive 개념이 안잡혀서 찾아봤네요

   K직장 신입면접에서 탈락 확률을 높이는 법.jpg
   차라리 돌려서 어떤 서비스를 하는지 물어보고 조사를 하는게 나을듯 합니다.
   특히 회사를 팔 계획이 있나요 같은건 좀..

   제 생각에는 K-직장과 좀 동떨어진 것 같습니다.

   많은 질문들 상당수는 직원들에게도 알려주지 않던데요...예로들면 Runway

   저희 회사는 전부 공개되어 있긴합니다.

   위 질문을 하고도 합격을 할 수 있는건지 궁금하네요 ㅋㅋㅋ

   글에도 써있지만 저런 질문을 한다고 불합격을 주는 회사라면 안가는게 나을듯 합니다 ...

   회사에 따라 다르겠지만,
   저희 회사의 경우 저런 질문을 했다고 해서 합격에 부정적인 영향은 없을 것 같습니다.
   또한 몇몇 질문들은 긍정적인 영향을 줄 것 같아요.
"
"https://news.hada.io/topic?id=6780","이 달의 CT 스캔 : 골프 장비","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           이 달의 CT 스캔 : 골프 장비

     * 매달 CT 스캐너로 특정 물품을 상세히 찍어서 공개하는 페이지
     * 스크롤 하면서 물체를 회전시키며 내부를 설명하는 형식
     * 가장 기술적으로 발전된 스포츠인 골프 장비들을 분석
     * Nike Air Zoom Infinity Tour 골프화
     * Titleist TSi3 티타늄 드라이버
     * TaylorMade Carbonwood Stealth Plus Driver 카본파이버 드라이버

   나올때마다 즐겨보는데 이 회사 참 재밌네요
   https://www.lumafield.com/products

   와.. 드라이버 안이 저렇게 생겼군요.
   저렇게 좋은 기술로 만들어졌는데 왜 나는 잘 못치는 거지..
"
"https://news.hada.io/topic?id=6804","GitHub Copilot을 모든 개발자가 일반적으로 사용할 수 있습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GitHub Copilot을 모든 개발자가 일반적으로 사용할 수 있습니다.

     * GitHub에서 그동안 기술 미리보기로 한정된 사용자에게 공개하던 AI 기반의 코드 자동 완성 도구인 Copilot이 미리보기를 끝내고 대중에게 공개됨.
     * 60일 무료 평가판이 있으며, 가격은 월 10달러, 연 100달러.
     * GitHub Student Developer Pack에는 무료로 포함되어 있으며, 인기 있는 오픈소스 개발자에게도 무료.
     * Visual Studio Code, Visual Studio, JetBrains IDE, Neovim등 다양한 편집기에서 이용 가능.
     * 연말에 기업용 버전 출시 예정.

   잘 사용했습니다.
   자연어 작성 -> 코드 완성 보다는, 함수 이름이나 시그니쳐만 작성하면 colipoit이 적당히 구현해주고 그걸 다듬는 정도로 사용했고, 매우 편리했어요.

   copilot 전에 사용했던 tabnine이 비슷한 정도로 자동 완성해주어서 다시 tabnine을 사용해 볼까 고민되네요.

   https://news.hada.io/topic?id=1624

   제가 작년에 공유 했었는데, 어떤지 궁금하신 분은 한번 참고해 보세요~
   https://news.hada.io/topic?id=4745

   잘 사용하고 있었는데 유료화돼서 아쉽네요. 무료여야하는건 아니지만 오픈소스 코드들 이용해서 만든 솔루션이 유료화된게 혹시 안좋은 선례가 되지는 않을지 걱정ㅎ

   조금 더 자세히 살펴보니 지원되는 편집기가 위에 나열된 4종류가 전부입니다.
     * Neovim등 다양한 편집기에서 이용 가능 -> Neovim에서 이용 가능.

   다 나열하고 등 붙이는 것은 흔한 일이죠

   부수효과로 영어작문실력이 향상되겠네요

   한국어로도 꽤 잘 되더라고요.

   오 그렇군여 감사합니다!!!!

   번역을 알아서 하는 건지, 한국어도 거의 인식하긴 합니다.
   그래도 영어로 작성하면 결과가 조금 더 잘 나오는 기분이 들더군요.
"
"https://news.hada.io/topic?id=6890","Python for Data Analysis 3판 - 오픈 억세스 버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Python for Data Analysis 3판 - 오픈 억세스 버전

     * 번역서가 나온 ""파이썬 라이브러리를 활용한 데이터 분석(2판)""의 최신 판
     * HTML 오픈 억세스 버전으로 선공개. 추가 편집후 연말에 출판 예정
     * pandas 1.4.0 및 Python 3.10 으로 업데이트
       → 2판과 3판 차이는 2017년 이후 바뀐 pandas 내용에 중점
"
"https://news.hada.io/topic?id=6888","Teapodo - 팟캐스트용 가벼운 오디오 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Teapodo - 팟캐스트용 가벼운 오디오 편집기

     * 원본 소스를 유지하는 비파괴 멀티트랙 편집
     * 쉬운 녹음 및 기존 트랙 일부에 덮어쓰기 가능
     * 각 챕터 정보를 ID3 챕터 프레임에 저장
     * 맥(M1/인텔)지원. 윈도우 지원예정
     * 오디오 엔진 및 데이터는 Rust + UI는 Qt 6 기반
"
"https://news.hada.io/topic?id=6889","Scunthorpe Sans - 욕설을 자동으로 필터링하는 폰트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Scunthorpe Sans - 욕설을 자동으로 필터링하는 폰트

     * f███, s███ 처럼 보이게 자동으로 표시
     * CC0 인 Aileron 폰트 기반으로 Ligature(합자)를 이용해서 처리
     * 폰트의 이름은 AOL에서 가입을 차단해서 유명해진 도시에서 유래 ( 가운데에 있는 c███ 때문에 )

   비슷한 걸로 테크기업들이 자주 쓰는 단어를 가려주는 Sans bullshit sans도 있습니다.
   https://www.sansbullshitsans.com

   합자를 이용하다니 ㅋㅋㅋㅋ 아이디어 신기하네요
"
"https://news.hada.io/topic?id=6876","Arm, 차세대 플래그십 코어 Cortex-X3 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Arm, 차세대 플래그십 코어 Cortex-X3 공개

     * 성능면에서 11%의 IPC 향상
     * 시스템 수준에서는 다른 모든 변경사항을 포함하면, 애플리케이션에서 최대 22% 높은 성능을 제공
     * 32bit를 제거하고 64bit ISA 전용으로 최적화
"
"https://news.hada.io/topic?id=6887","Raspberry Pi Pico W : $6짜리 IoT 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Raspberry Pi Pico W : $6짜리 IoT 플랫폼

     * 작년 1월에 출시한 RP2040기반 라즈베리 Pi Pico는 현재까지 2백만개 판매
     * 신형 $6 Pico W는 802.11n 을 추가
     * $5 Pico H / $7 Pico WH는 헤더와 3핀 디버그 커넥터 포함
     * Infineon CYW43439 Wireless칩 사용

   Raspberry Pi Pico - $4 마이크로 컨트롤러
"
"https://news.hada.io/topic?id=6877","HN은 어떻게 중단없이 운영되나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN은 어떻게 중단없이 운영되나요?

     * Master & Standby 2대의 머신으로 M5에서 호스팅중
     * HN전체는 한대의 머신으로 동작 : 인텔 Xeon E5-2637 v4 @ 3.50GHz + FreeBSD/SMP, 미러링된 Data용 SSD/Log용 자기테이프(UFS)
     * DB 사용하지 않고, Ad-hoc 파일시스템 기반
     * Lisp 방언인 Arc(존 그레이엄이 만든)로 개발됨
       코드는 공개되어 있어서 누구가 가져다 HN 같은 서비스 개발 가능
       https://github.com/wting/hackernews
       https://github.com/arclanguage/anarki/tree/master/apps/news

   https://github.com/wting/hackernews 마지막 코드 수정이 10년 전인데(readme, copyright 제외), 정말일까요? 와...

   해커뉴스의 반응성에 부족함을 느낀적이 없는데 이런 간단한 구조로 운영되고 있었군요.
   Ad-hoc filesystem이란게 어떤건지 궁금하네요

   이런 것에 대한 개념이 없어서 참 신기합니다.
   글로벌한 사이트 하나가 예비용 스탠바이 하나를 포함해서 단 2대로 운영이 되다니.

   COOL

   DB 없이 운영된다는게 흥미롭네요. 긱뉴스는 AWS에서 EC2 + RDS로 운영중입니다.
   가볍게 운영하기 좋은.. 손에 익은 구조로 하다보니..

   기술 스택도 궁금하네요. :-)
"
"https://news.hada.io/topic?id=6806","TMAP 미식로드 - 사람들이 많이 가는 맛집 추천","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TMAP 미식로드 - 사람들이 많이 가는 맛집 추천

     * Tmap 네비게이션에서 방문한 통계 데이터 기반으로 '맞춤 맛집' 찾기
       → 위치, 연령, 성별
       → 대상 : 친구, 부모님, 아이들, 연인, 혼자
       → 종류 : 유명 맛집, 뜨는 맛집, 인스타 감성, 로컬, 이달의 맛집
     *

     '서울 마포구 연남동' 에서 '30세' '여성'이 '친구'와 방문할 '뜨는 맛집'을 찾아주세요
     * 동네 맛집 찾기 기능도 별도 제공

   이렇게 또 맛없는 집들이 많이 사라지겠네요,

   네비 입력기준인거 같은데.. 지방 맛집 찾을때 유용할거 같네요.. 서울처럼 밀집지역은 음식점 이름치고 가질 않으니... 저희동네 해보니 결과가 처참합니다.

   주위에 보니까 골프장 근처에서 맛집 찾아갈 때 많이 쓰더군요. 끝나고 가는 곳이 다 비슷.. ㅎㅎ

   나온지는 꽤 되었는데 사람들이 잘 모르는 서비스 중 하나

     ""T맵 내비게이션 이용자 1,800만 명이 5년간 쌓은 18억 개의 데이터를 기반으로 ‘사람들이 많이 찾는 진짜 맛집’을 추천해주는 서비스""

   라고 홍보했었네요.
"
"https://news.hada.io/topic?id=6810","SpaceX, 36시간동안 3대의 Falcon 9 로켓 발사 성공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  SpaceX, 36시간동안 3대의 Falcon 9 로켓 발사 성공

     * 올해 52번 발사가 목표
     * 머스크는 ""1주에 한번 발사""를 목표로 한다고

   저 요즘 애플tv 오리지널 드라마인 For all mankind 보는데.. 뭔가 드라마에서 생략된 한 부분을 여기서 보는 듯 하네요.
   (이 드라마는 소련이 달에 먼저 갔다고 생각하고 시작되는 대체 역사 SF물 입니다. 미국이 뒤졌기 때문에 따라 잡으려고 더 열심히 우주개발을 한다는 내용)

   SpaceX가 이래저래 발전속도는 정말 빠른 것 같아요.
"
"https://news.hada.io/topic?id=6789","세상에서 가장 만족스러운 체크박스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           세상에서 가장 만족스러운 체크박스

     * 애플 디자인 어워드를 수상한 ""(Not Boring) Habits""가 자신의 체크박스를 디자인한 과정을 설명
     * 이 앱의 목표는 습관을 만들기 위해 뭔가를 하고 '체크박스를 누르는 행위'후에 보상 받는 것을 강조하는 것이기에 체크박스 디자인이 정말 중요
     * 게임 느낌을 주기 위해 인터랙션 적용, 3D모델, 애니메이션, 소리, 햅틱등을 정교하게 디자인

   뱀파이어 서바이버즈 상자깡 얘기도 생각나네요 ㅎㅎ
   https://pgr21.com/humor/452562

   개발자가 슬롯머신 개발 했었다고...

   제목만 보고 '체크박스가 뭘...' 이라고 생각했는데, 본문의 영상을 보니까 정말 차이가 크네요.
   한 번 사용해봐야겠습니다 ㅎㅎ

   습관, 할 일 등 스스로 관리하는 앱들이 대체로 체크박스 한 번만 누르면 끝나는지라 과연 이런 거로 동기부여가 될까 궁금했는데, 이런 정말 멋진 체크박스를 꾸욱 누를 수 있다면 상당히 재미있을 것 같다는 생각이 드네요!

   접근이 아주 탁월하시네요 와우
"
"https://news.hada.io/topic?id=6824","Viddy - Go로 재작성한 모던 Watch 커맨드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Viddy - Go로 재작성한 모던 Watch 커맨드

     * 기존 watch의 기본 기능 그대로 동작
          + 커맨드를 주기적으로 실행하고, 결과 표시
          + 컬러 출력, 변경부분 강조
     * 타임머신 모드 : 비디오 처럼 다시감기 가능. 과거 또는 미래로 이동하기
     * Pager에서 출력 보기
     * Vim 키맵
     * 검색 기능 지원
     * 중단/재시작 가능
     * 강제로 정확한 간격으로 커맨드 실행 가능
     * 쉘 Alias 지원
     * 커스텀 키매핑/색상 지원

   이전에 hwatch 라는 도구도 뉴스에 올라온 적이 있네요. https://news.hada.io/topic?id=5347
"
"https://news.hada.io/topic?id=6782","개발자를 위한 모니터 추천 / 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          개발자를 위한 모니터 추천 / 가이드

     * LG, 삼성, Dell 위주로 개발자를 위한 모니터 추천
     * 예산, 스펙(밝기, 패널), 단자(USB-C,Thunderbolt), 스탠드 기능에 따라 추천
     * 위 내용과 가격, 구매처를 정리한 노션 링크도 제공 #

   ""개발을 한다 = 맥북을 사용한다."" 라고 하기엔 아직...

   https://jetbrains.com/lp/devecosystem-2021/…
   https://insights.stackoverflow.com/survey/2021/…

   안녕하세요. 굴 작성자입니다. 내용을 업데이트할만한게 많은데... 이렇게 소개를 해주시니 슥삭 업데이트 하러 가보겠습니다😄

   글에선 27-32인치가 주 대상이라 조금 다르긴 합니다만
   전 요즘은 듀얼모니터 쓰는 것보다 울트라와이드 쓰는게 더 편해서 Dell U4021QW를 들였는데요.
   정말 맘에 듭니다. 글에서 얘기하는 UltraSharp 라인업이라 화질도 좋고요.
   집에서 쓰는 LG 34인치는 3440x1440 이라 세로 해상도가 조금 아쉬운데, 5120x2160 이라 쾌적합니다.

   200%로 Scale 해서 쓰시는 건가요? 아니면 혹시 40인치니 스케일 없이 그냥 쓰시는 건가요?

   폰트 크기만 조금씩 조절해서 씁니다. 브라우저는 125% 정도로 해놓으면 무리없더군요.

   모니터를 3개 써야하나 고민 중이었는데 흥미로워서 여러 질문을 남겼습니다.

   모니터 1개로만요? 다른 보조 모니터 안 쓰시고요?
   맥북1대 + 40인치 모니터 1대가 끝인가요?
   125% Scale 이면 화면이 엄청 넓을텐데 창 관리는 어떻게 하시나요?

   27인치 선호하시면 34WK95U + 27GN950 정도로 조합하시면 4k 27인치 2.5개 쓰는 정도의 기분 듭니다 ^^
   저는 저 조합에 150% 로 사용중 입니다

   그렇군요. 괜찮은 조합인 것 같습니다 .알려주셔서 감사합니다!

   맥북은 클램쉘로 써서 화면은 딱 1대입니다.
   여러대로 시선 이동하는 것보다 더 편해서 이렇게 하고 있습니다.
   창은 일반적으로 브라우저/vscode/슬랙 및 기타창 정도로 3분할로 씁니다.

   저기 있는 LG UP 시리즈는 곧 리뉴얼 버전이 나옵니다. 발표까지 작년에 되었는데 국내 출시만 아직 안되어서ㅠ

   넵 UQ 시리즈가 나오고 있죠. 공개일이랑 출시일이랑 차이가 많이 나는게 좀 아쉽더라구요 ㅎㅎ. 하위라인인 27UP550은 아직도 국내 출시를 안했으니 ㅠㅠ
"
"https://news.hada.io/topic?id=6791","공동창업시 주주간 계약서에 들어가야할 내용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        공동창업시 주주간 계약서에 들어가야할 내용

     * 주식회사의 공동창업자 = 회사 지분율을 나눠 가진 주주
     * 공동창업자 간 분쟁을 방지하기 위한 주주간계약서의 내용
          + 주주 간 지분비율 및 역할분담 확정
          + 자금관리 약정
          + 주주총회 구성
          + 이사회 의결
          + 회계 및 보고
          + 주식양도 제한 조항
          + 양도제한기간 후의 주식 처분
          + 교착상태 해결방안
          + 직위, 역할 포기금지 및 퇴사금지
     * 주주간계약서 무효 사례

   Startup Founder Agreement: The 13 Components to Include 라는 해외 글을 보다가 찾아보니 국내에도 잘 정리된 글이 있어서 올려봅니다.

   스타트업이 실패하는 이유의 절반 이상이 사람 문제고, 그중에 공동창업자와의 문제들도 정말 많습니다.
   참고하셔서 미연에 방지하시기 바랍니다.
"
"https://news.hada.io/topic?id=6863","Microvium - 마이크로콘트롤러를 위한 JavaScript엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Microvium - 마이크로콘트롤러를 위한 JavaScript엔진

     * 8.5kB의 가장 작은 JS-like 엔진 : JS의 핵심 Subset 지원
     * 16kB ROM 및 300B RAM으로 실행하며, 16비트 기기에 최적화
     * 샌드박싱으로 안전
     * 소스코드나 컴파일된 바이너리를 배포하는게 아닌, 실행하는 VM의 스냅샷을 저장하고 그걸 타겟디바이스에서 restore 하는 형태로 배포하는 방식
          + 설정파일 없음
          + 빌드단게에서 실행
          + 정확한 글로벌 최적화
          + 쉬운 분산 어플리케이션 가능
"
"https://news.hada.io/topic?id=6895","Open API를 이용한 고속 논문 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Open API를 이용한 고속 논문 분석

     * 대량의 논문을 빠르게 읽기 위해, ""처음 보는 논문을 요약해주는 모델""을 개발
       → 문서 요약과 번역은 Open API로 접근가능한 딥러닝 모델을 이용하고 파이썬으로 구현

실용인공지능학회(AAiCON) 발표 영상 (요약)

     * Skimming 단계에서 논문 abstract 를 이용
          + Scopus 쿼리
          + Wikipedia API를 이용해서 유의어중에서 대표성을 띄는 단어를 찾음
          + Knowledge Graph를 생성하고, Inverse Depth First Search를 수행해서 관련된 기술을 알아냄
          + 자연어 초록에서 의미있는 단어의 집합을 추출
     * 요약 : 타겟 선택
          + (1) 자연어 분석하여 문장형으로 요약
               o 최근 3년 출판내의 우수 저널 논문을 선정하고 Impact Factor 기준 정렬
               o 영문 초록을 Transformer 기반인 RapidAPI의 TLDRThis를 활용하여 짧은 문장으로 요약
               o 요약된 문장을 네이버 Papago 를 이용하여 영어-한글 기계 번역
          + (2) 규칙 기반 주요 문장 추출
               o ""we found that"", ""in this study"", ""we present that"", ""we provide"" 등을 이용
               o 이 주요 문장을 똑같이 Papago로 번역
          + 완성된 내용을 KR/EN 같이 들어있는 Doc 파일로 생성

   와 엄청 유용하겠내요.
   좋은 정보 감사합니다. 한번 살펴봐야겠내요.
"
"https://news.hada.io/topic?id=6874","Apple, 대한민국 App Store에서 외부 결제 옵션 허용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Apple, 대한민국 App Store에서 외부 결제 옵션 허용

     * 대한민국의 전기통신사업법 규정에 따라, 대체 앱 내 결제 처리 옵션(IAP)를 지원
     * 수수료는 26%
     * 외부 구입 권한 신청서를 작성해서 제출해야함
     * 사전 승인 결제 사업자 : KCP, Inicis, Toss, NICE
       → 그외 업체는 신청및 승인 필요
     * 한국 앱스토어에서만 허용됨
     * ""이 앱은 App Store의 안전한 비공개 지불 시스템을 지원하지 않습니다.""라는 문구의 팝업창을 띄워야 함

   딱 ""가능은 하다"" 정도로만 만들어놨네요

   거대 플랫폼 사업자들이 법안에 적힌 것만 아슬아슬하게 심지어 겉돌면서 지키는 게 참 안타깝네요. 지난번 애플 셀프 수리 도구도 그렇고, 뭐 하나 제대로 하는 게 없어 보입니다.

   앱마켓 사업자 결제방식 강제 금지' 법안 국회 본회의 통과
   애플, 한국 앱스토어서 외부결제 허용, 수수료도 인하

   법 개정되고 제대로된 공지가 나온건 데.. 역시나 수수료 26%에 구현하기 귀찮게 만들어서 유명무실해질듯 합니다.

   ""The entitlement cannot be used in the same app with Apple’s in-app purchase system.""
   ""If your app is a new version of an app that currently uses Apple’s in-app purchase system, you must remove the existing app from the App Store on iOS and/or iPadOS in South Korea before your StoreKit External Purchase-enabled app can be approved for distribution.""
   게다가 애플 인앱결제랑 같이 못쓰게 해놓은 데다가, 기존 앱은 제거 하라고 써있는 것 같은데..
   과연 이걸 받아들일 사업자가 ?
"
"https://news.hada.io/topic?id=6841","The Verge의 Starlink RV 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       The Verge의 Starlink RV 리뷰

   장점:
     * 주위 사람이 많을 때, Starlink는 Vodafone과 T-Mobile에서 제공하는 일반 모바일 네트워크보다 최대 100배 빠름.
     * 언제든지 정지 가능. (정지된 뒤에 계속 사용가능하며, 다음달 자동 결제가 취소됨.)
     * 구매 대기 할 필요 없이 당장 사용 가능.
     * 예상보다 전력을 적게 사용함.

   단점:
     * 날씨 영향을 크게 받음. (폭풍우가 올 때는 작동이 잘 되지 않음.)
     * 이동 중일 땐 사용 불가능.
     * 일반 Starlink 사용자보다 사용 우선순위가 낮음. (연결 병목시 일반 Starlink 사용자들보다 느리게 작동됨.)
     * 높은 가격. (전파 수신기 가격 $599 + 월 구독료 $135)

   Starlink for RVs
   공개된지 한달 된 거 같은데 나름 빠르게(?) 리뷰가 올라왔네요.

   앗 제가 Starlink RV에 대한 설명을 깜빡하고 안달았었군요.
"
"https://news.hada.io/topic?id=6786","Vale 프로그래밍 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Vale 프로그래밍 언어

     * 빠르고, 안전하고, 쉬운 언어
     * AOT 컴파일, 정적 타입
     * Generational Reference 기반 메모리 관리로 레퍼런스 카운팅보다 2.3x 빠르고 안전
     * 프로그램의 메모리를 Region 단위로 분할 : Main, Read-only, Mutexed..
     * Region 격리, Fearless FFI, Higher RAII

exported func main() {
  a str = ""world!"";
  println(""Hello "" + a);
}

   제 느낌은 그저 또다른 러스트네요
"
"https://news.hada.io/topic?id=6879","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   토요일엔 이슈로 인한 출근을 하구 일요일엔 지인이 부탁한 외주 일을 하려구해요 :)
   부디 이슈가 잘 해결되어 별탈 없이 지나가길..

   멘토링 알바 합니다.
   나름 재미있고 감동 포인트도 있어서 계속 열심히 준비해서 임하게 되네요..

   멘토링 알바는 대상이 어떻게 될까요?!
   요런 걸 경험하려면 어떤 경로를 알아보면 좋을지도 궁금하네요ㅎㅎ

   주로 단기 IT 개발자 (주로 ML관련임) 과정의 최종 프로젝트에 현업의 경험을 커멘트 해주거나, 커리어 패스, 최신 기술등에 대한 간단한 오버뷰를 제공합니다.

   저도 지인의 지인의 지인에게서 추천받아서 한번 해오다가 계속 하고 있네요...

   ML 쪽 경험이 있다면 제가 추천해드리는 방법도 있습니다. ㅎㅎ

   멘토쪽으로 커리어가 제법 있는 분들을 섭외하기가 어렵다고 하더라구요.

   6월동안 진행한 30일 그림 그리기를 마쳤어요.
   그동안 그린 것을 구글 사이트를 이용해서 올렸는데, 간단히 블로그 글 써보려고요.
   블로그 일년에 한번 쓸까 말까...하네요.
     * 지난주에 이어서 파운데이션 소설을 읽는 중입니다
     * 아마존 프라임비디오에 있는 수사물 ""보쉬""때문에 알게된 소설가 마이클 코널리의 ""링컨차를 타는 변호사"" 가 넷플릭스 오리지널로 나와서 감상 예정입니다. 2011년에 같은 제목의 영화도 있길래 그거도요. 이건 Wavve에 있더군요.
     * 에어브러싱을 배워 보려고 하는 중이라 ""아크릴 에어 브러슁 완전 정복"" 책도 읽으려고 합니다.
"
"https://news.hada.io/topic?id=6853","Maccy - 맥용 클립보드 매니저 오픈소스 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Maccy - 맥용 클립보드 매니저 오픈소스 앱

     * 가볍고 빠름
     * 파일,이미지,텍스트 모두 지원
     * 최대 999개까지 히스토리 저장 및 퍼지 검색 가능
     * 키보드로 모든 동작 수행
     * 특정 어플리케이션에서 복사된 것 Ignore 처리
     * 네이티브 UI
     * Swift 오픈소스

   전 Yippy - https://yippy.mattdavo.com/ 라는거 사용하는데 이것도 좋더라구요. 이미지 썸네일에 클립보드 내용 검색도 가능하고요.

   raycast 에 있는 히스토리 플러그인도 편해요

   copyem 이라는거 사서 쓰고있었는데 추천하기엔 이게 더 좋겠네요

   히스토리 검색되는 것이 너무 좋고, 패스워드 매니저에서 복사한 것은 알아서 ignore 해 두었는지 안떠서 좋습니다.

   clipy만 사용하고 있었는데 더 좋아보이네요

   이거 정말 좋습니다. 만나는 사람마다 다 영업하고 다니는데 GeekNews에도 올라오니 반갑네요.

   이거 괜찮네요! 좋은 앱 소개해주셔서 감사합니다.

   저 기존에 다른거 쓰다가 넘어왔는데 편하네요.
   단축키로 UI 팝업 되어서 기존 복사했던 내용 보이고, 바로 붙여넣기 가능해서 좋습니다.
"
"https://news.hada.io/topic?id=6809","삼성, TV 테스트 벤치마크 부정행위 적발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        삼성, TV 테스트 벤치마크 부정행위 적발

     * HDTVTest가 처음 찾아낸 뒤 FlatpanelsHD가 다시 확인
     * 삼성 S95B QD-OLED TV 와 QN95B ‘Neo QLED’ LCD TV 가 리뷰어에게 실제보다 더 정확하게 보인다고 속이기 위해 설계됨

     리뷰어/캘리브레이터/인증 기관등은 보통 HDR 테스트를 위해 10% 윈도우를 이용하는데, 삼성은 이 창 크기와 일반 창 크기를 인식하도록 만들어서 실제 화면보다 측정값이 더 정확하도록 화면 출력을 조정
     9% 같은 비표준 윈도우를 이용하면 이 치팅 알고리듬을 우회해서 실제 색상이 드러남. 이는 고의적인 속임수이며, 리뷰어를 오도하기 위한 조직적인 노력임
     * 즉, 테스트 중에 최대 밝기를 일시적으로 80% 까지 높여서 실제보다 더 뛰어난 성능을 보이는 척 함
     * 삼성은 성명서에서 잘못은 인정하지 않고, 문제를 해결하기 위한 업데이트를 발표할 것이라고만 밝힘

   하이패스 때부터 달라진 것이 없군요
   부끄럽습니다.

   삼성전자의 문화적인 문제가 파운드리,LSI,DRAM까지 재앙을 일으키고 있다
   Geekbench, 벤치마크에서 삼성 갤럭시 S10,S20,S21,S22 전모델 퇴출

   어째 삼성 소식은 좋은게 잘 안 들리는군요..
"
"https://news.hada.io/topic?id=6778","CLAP : 새로운 Audio Plug-in 표준","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      CLAP : 새로운 Audio Plug-in 표준

     * ""CLAP(CLever Audio Plug-in API)""
     * 오픈소스 & 자유 라이센스
     * 최신 CPU에 최적화 : 멀티쓰레드/멀티코어
     * 호스트가 플러그인 메타데이터를 읽을수 있어서 빠른 스캔 및 구성 가능
     * 더 나은 Automation,Modulation,Expression

   Apple Logic Pro 나 Steinberg Cubase 가 지원 안하면 표준으로 성공하지는 못할 거라는 얘기도 있군요.
   https://news.ycombinator.com/item?id=31762703
   CLAP을 많은 데서 지원하면 그들도 나중에는 어느정도 따라가지 않을까 싶습니다만..
"
"https://news.hada.io/topic?id=6842","Amazon CodeWhisperer 공개 - AI 프로그래밍 도우미","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Amazon CodeWhisperer 공개 - AI 프로그래밍 도우미

     * ML을 이용해서 오픈 소스 및 기존 작성한 코드와 코멘트(자연어)에 기반하여 자동 코드 추천
       → 자신의 코딩 스타일 및 변수명까지 비슷하게
     * 함수 전체 및 코드 블록단위 까지 생성 가능
     * 여러 개의 추천코드 중에 선택 가능
     * AWS API를 제대로 지원 → 'Upload a file to an S3 Bucket' 이라고 치면 예제 코드를 전체 생성
     * Java, Python, JavaScript 지원
       → Java/Python 프로젝트의 보안 취약점을 자동 스캔
     * JetBrains, VS Code, AWS Cloud9, Lambda 콘솔등에서 지원

   이름이 CodeWhisper가 아니고 CodeWhisper'er' 이네요. 속삭여주는 (사람이 아니고) AI... TabNine, GitHub Copilot 다 써보면서 꽤 만족해서 이 제품도 기대해봅니다.

   어라 그렇네요. 읽으면서도 전혀 생각 못하고 옮겼습니다. 수정해두었습니다.

   GitHub Copilot 보다 좀 더 실무에 연관된 문제를 해결하는데 집중했다고 하네요.
   AWS 지원 부분은 쓰기 편할듯
"
"https://news.hada.io/topic?id=6849","내가 죽었을 때를 위한 Cheat Sheet","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내가 죽었을 때를 위한 Cheat Sheet

   내가 갑자기 떠났을 때, 남겨진 사람들에게 내 정보를 전달하기 위해 정리할 내용들
     * 암호 : 2FA, 패스워드 관리자
     * 재무 정보 : 은행, 카드, 연금, 암호화폐 및 다른 재무 관련 서비스 정보들
     * 주요 문서들
     * 법률 문서들 : 유언장, 위임장

   자산에 접근하는 정보들이 서서히 추상적(?)으로 변해가는 현 시대에는 꼭 필요한 요소같습니다.
   그런데 이제 저 정보는 또 어떻게 관리하는지가 관건일 것 같네요.. 안전하게 믿을만한 사람에게 도달하도록 하는 것도 그렇구요. 비밀번호를 위한 비밀번호를 위한 비밀번호가 생겨날지도..
   출력한 뒤 금고에다가 넣어 두어야 하려나요..

   참고로 우리나라는 동사무소에 사망신고를 하면 왠만한 재무 내역을 볼 수 있습니다. (시간은 많이 걸립니다.)

   필요하다 싶은 서비스인데 역시나 있군요.

   댓글에 https://www.betterplacewishes.com/ 같은 사이트도 있긴 한데,
   예전에 올라온 도메인 소유자가 죽었을 때 도메인에 일어나는 일 글에서 소개한
   Kubera 같은 디지털 자산관리 서비스 회사도 있습니다 https://www.kubera.com/
   Kubera는 은행,주식,펀드,부동산,암호화폐,도메인,엔젤투자내역,수집품 등을 한눈에 볼수 있게 관리해주는 서비스에요.

   Kubera가 흥미로운 건 Beneficiary (수혜자) 설정입니다.
   https://kubera.com/blog/…
    1. 45일간 서비스에 접속을 안한다면 특정 이메일/전화번호로 알림 전송
    2. 알림받고도 2일안에 접속을 하지 않으면, 자산 포트폴리오를 수혜자에게 발송
    3. 이 알림을 5번이상 받고도 답변 하지 않으면 자신이 믿을 만한 다른 사람에게 이걸 전송

   이런 기능을 통해서 말하자면 디지털 유언장을 작성해 두는 거라고 볼수 있겠네요.
"
"https://news.hada.io/topic?id=6802","아직은 쿠버네티스를 사용하지 마라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           아직은 쿠버네티스를 사용하지 마라

   얼리스테이지에 있는 스타트업들은 쿠버네티스를 섣불리 도입하지 마라.
   시기상조인 경우가 대부분.

   작은 규모의 팀(1~10명)은 Serverless container service를 사용하는 것이 좋다.
   (AWS ECS - Fargate, GCP의 Google cloud run)

   k8s는 이미 호불호의 문제가 아니라 생존의 문제 아닐까요?
   AWS는 몰라도 k8s는 알아야 하는 상황이 되었다고 생각하는데요.

   저는 이 의견에 반대합니다.

   k8s가 가지는 유일한 단점은 러닝 커브 딱 하나라고 생각합니다.

   팀원이 5명 정도 수준일지라도 처음이야 어렵겠지만, 일정 수준 이상 k8s에 대한 수준이 올라오면, 절때 이전으로 돌아 갈 수 없습니다. 그로 인한 생산성 향상은 비교가 되질 않습니다.

   ci/cd, gitops, 카나리 배포 등등 k8s 없이도 할 수 있지만, k8s위에 함께 하는것이 더 이해하기 쉽고 관리하기 간편합니다.

   직접 이전기를 경험해본 저로서는 아직 시기 상조라고 말하는것은
   마치 aws cloud 가 생소하다고 해서 도입을 망설이던 on premise 시절을 떠올리게 합니다.

   ""비즈니스에 집중해라"" 이런 원론적인 차원의 얘기가 아니라 뭔가 특수한 기술에 락인되는 결정에는 동의하기 어렵네요.
   beanstalk/app engine/heroku 같은 PaaS를 적극 활용하라는 글이었다면 적극 동의했을 텐데 작은 팀에서 ECS/cloud run/docker swarm을 선택해서 얻는 장점은 요즘은 거의 없다시피 합니다 . 4~5년 전이었다면 모를까요.

   비용적인 측면에서 보면 serverless가 압도적으로 유리하죠

   저도 공감합니다. 대부분의 경우엔 docker-swarm 내지는 docker-compose로 충분하고도 넘칩니다

   해커뉴스 댓글에도 아주 많이 달린 의견인데..... [1]
   글이 ""쿠버네티스는 어렵다"" 라는 게 전제가 깔려있어서 좀 혼란스럽네요.

   요즘은 쿠버네티스 에코시스템이 많이 발전해서 온프렘에서 쿠버네티스를 직접 설치하지 않는 이상 그렇게 어려운 것이 아닙니다.
   또한 쿠버네티스 운영은 복잡도를 스스로 어느정도 결정할 수 있는데, 기본적인 구성만 만드는 데는 힘들지 않습니다. 나중에 이것저것 애드온들 붙이면 당연히 힘들어지고요.
   저 같이 신입때 EKS 부터 배포환경을 경험한 사람도 많이 생겼고요.

   콕 찝에서 말하자면,, 기본적인 k8s Deployment, Ingress (물론 DB는 별도의 매니지드 서비스) 를 구성하는 것이 저기 글에서 말하는 AWS ECS Fargate 를 직접 구성하는 것보다 딱히 어려운 것인지 이해가 가지 않네요.
   둘 다 같이 VPC, 클러스터, CDN, 로드밸런서 구성을 해야하는 건 똑같은 걸요...댓글에서는 오히려 ECS가 더 불편했다는 글도 많고요.

   [1] https://news.ycombinator.com/item?id=31795160

   동감입니다.기본적인 셋업이 그렇게 어렵지도 않고, 유지보수 난이도가 높은편도 아니라고 생각해요. 클라우드에서 복잡한 셋업 하나, 쿠버네티스 yml 셋업으로 넘기나 딱히 뭐가 더 좋다고 말 못하겠네요.

   저희 회사는 개발자가 100명을 넘어가면서 필요성이 느껴져서 ECS -> EKS 전환을 하고 있는데 조금 후회할 때도 있습니다.

   ""쿠버네티스 운영은 복잡도를 스스로 어느정도 결정할 수 있는데"" 라고 하시지만, 잘 모르는 입장에서는 쿠버네티스 생태계에 말이 나오는 것은 다 필요한 것인가보다라고 생각하고 다 넣게되는 측면이 있습니다.

   로드밸런서 구성을 해야 하는 건 똑같다고 하셨지만, ALB만 알면 되는 것 vs ALB + Ingress를 알아야 하는 것의 차이가 있다고 생각합니다.

   작은 규모에서 MSA가 필요하지 않은 것처럼, 쿠버네티스는 생각보다는 알아야 할게 많아서 '어플리케이션에 집중해야 하는 규모'에서는 오버 스펙은 맞다고 생각합니다.

   다만 쿠버네티스 환경을 누군가 잘 구축해뒀다면, 그 위에서 어플리케이션 배포하는 것은 클라우드 독립적인 표현으로 정의하다보니 락인 효과가 적을 것 같긴 했습니다.

   말씀들어보니 확실히 그런 측면들이 있을 거 같네요. 제가 쿠버네티스 쓰면서 알게 된 것들을 너무 당연하게 생각한거 같네요.
   그리고 요즘 쿠버네티스에서 나오는 애드온들 너무 많다보니 취사선택 결정에 어려움이 있다는 것도 인정하고요.

   제가 ECS -> EKS 같이 마이그레이션 경험이 없다보니...혹시 락인 효과 같은 거 말고 전환 이후에 좀 나아진 점이 있으신지 궁금합니다.

   아 참고로 제 경험은 EKS 기준으로 말씀드리는겁니다. 온프램에서 직접 k8s 설치해서 etcd, Control Plane 을 직접 운영하는 것과 많이 다르죠 ㅎ

   k8s부터 시작한 사람 입장에서는, 글을 읽으면서 드는 생각이 반대로 굳이 ECS를 시간들여가며 공부를 해야하나...라는 생각이 들더라고요.
   여튼 꼭 저렇게 공식 지정할 필요 없이 우선 팀에서 편하다고 느끼는 방식으로 쓰는게 맞지 않나 생각합니다.

   k8s 시작 입장에 동의합니다.

   매우 공감갑니다.

   10명 뿐만 아니라 어지간한 크기의 회사에서 k8s 도입하는 것에 저는 부정적입니다.

   클라우드 벤더 락인이 크리티컬한 수준이 되거나 온프람등의 인프라가 함께 사용되는 수준이나 되야 의미있지 않나 싶습니다.

   엔터프라이즈급 회사들의 기술스택을 관성적으로 따라가는 면이 없잖아 있다고 생각했었는데
   마침 글로 정리된 게 해커뉴스에 떠서 공유해봅니다
"
"https://news.hada.io/topic?id=6811","커버 불가능한 코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               커버 불가능한 코드

   이런 간단한 코틀린 코드도 모든 분기를 테스트하는 것은 불가능에 가까울 정도로 어렵다. 코틀린이 이 코드를 바이트코드로 컴파일하면서 코드 작성자가 의도하지 않은 분기를 만들어내기 때문이다.

   when(answer) {
   ""yes"" -> true
   else -> false
   }

   코틀린은 코드를 작성하는 개발자에게 편리한 기능을 많이 제공해주는 한편, 바이트코드로 컴파일하면 이와 같이 유저에게 드러나지 않는 분기문 역시 많이 만들어낸다. jvm 플랫폼에서 가장 널리 쓰이는 테스트 커버리지 도구인 jacoco는 브랜치 커버리지를 계산할 때 바이트코드 기준으로 계산하기 때문에 코틀린 언어를 사용하는 개발자가 눈치채지 못한 브랜치도 커버할 것을 요구할 수 있다. 따라서 코틀린 개발자가 테스트 커버리지 100%를 맞추려고 시도한다면 위와 같은 경우 디컴파일을 해 보아야 하는 경우가 있고, 더 운이 나쁘면 디컴파일에 실패해서 바이트코드를 직접 보고 어떤 브랜치가 있는지 확인해야 하는 경우도 있다.

   https://toss.im/slash-21/sessions/1-6

   커버리지 추적을 100% 찍으려고 코드를 비트는건 주객전도 느낌이네요

   코드는 비틀리지 않았죠. 인간적 관점에서 더 편한 다른 방법이 있을뿐이죠.

   국방(무기체계) 분야는 방사청의 지침에서 코드 커버리지 100%를 요구합니다.
   현실적으로 100% 달성은 어렵지만 대신 커버 안되는곳은 하나하나 왜 커버가 안 되는지 설명을 달아야 하는걸로 알고있어요.

   광기의 테스트 100%좌…

   ㅋㅋㅋㅋ

   enum / sealed / boolean 의 분기 경우에는 제대로 처리되지 않으면 kotlin 1.6에서는 경고가, 1.7부터는 오류가 나도록 컴파일러가 바뀌었습니다.

   https://youtrack.jetbrains.com/issue/KT-47709

   slash 21에서 내용 잘 봤습니다 ㅎㅎ

   아~ slash 21에서 나온 내용이었군요... 저는 지인 트위터에서 처음 봐서요... 뒷북 죄송...
"
"https://news.hada.io/topic?id=6788","Patreon의 수수료는 알려진 것보다 높음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Patreon의 수수료는 알려진 것보다 높음

     * Patreon의 수수료는 Lite 5% / Pro 8% / Premium 12%
     * 하지만 송금수수료는 별도고, 미국외의 창작자들은 더 많이 내야함
     * 환전수수료도 2.5%로 이상하게 높음
       → '환전을 통한 자국통화 지불'을 더 많은 고객을 확보하는 '피쳐'로 판매해서, 1년간 켜봤지만 변화는 없어 보임
     * 실제로 모든걸 고려해보면 Patreon의 수수료는 14~17% 임
     * Patreon Lite로 바꾸면 기능이 너무 부족
     * 수수료가 1/5인 Donorbox 를 주 후원수단으로 변경했다고
"
"https://news.hada.io/topic?id=6855","Bolt - 10배 빠른 매트릭스 & 벡터 연산 알고리듬","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Bolt - 10배 빠른 매트릭스 & 벡터 연산 알고리듬

     * 데이터의 벡터를 압축하고, 압축된 상태에서 직접 수학연산을 실행
     * 대규모의 밀도가 높은 벡터 컬렉션을 가지고 있고, 손실 압축을 견딜수 있다면
       → 10~200x 공간과 계산시간을 줄여줌
     * C++로 구현, Python Wrapper 제공
     * AVX2 명령어 지원 필수
"
"https://news.hada.io/topic?id=6852","Show GN: 블록체인 개발자를 위한 온라인 저지 사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: 블록체인 개발자를 위한 온라인 저지 사이트

   안녕하세요 블록체인 개발자들을 위한 온라인 저지 사이트 Web3OJ를 개발하고 있는 일론입니다.

   최근 블록체인 개발자 수요가 많은데요, 블록체인 개발자로서 공부하기 좋은 사이트를 만들고 있습니다.

   블록체인 개발자로 커리어 전환에 생각이 있으시거나 이미 블록체인 개발을 하고 계신다면,
   카카오톡 오픈 채팅방 혹은 디스코드도 있으니 들어오셔서 같이 소통해요~

   Web3OJ도 사용해보시고 피드백 부탁드립니다!
"
"https://news.hada.io/topic?id=6843","Dropbox Shop 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Dropbox Shop 공개

     * 미술작품, 플러그인, 음악등의 디지털 콘텐츠를 간편하게 판매 가능
     * 클릭 3번으로 제품을 만들고 결제 및 배송(다운로드)까지
       → 드롭박스에 파일을 올리고, 섬네일과 동영상 미리보기 추가 하고, 가격 설정(추가 팁 받기 가능)
     * 맞춤형 화면 제작 가능
     * 항목당 최대 50GB 이미지, 오디오, 동영상, 문서 다수 포함 가능
     * 공유 링크를 통해서 홍보 가능
     * PayPal, Stripe, Google Pay 등 결제 수단 지원
     * 판매 데이터 추적 : 제품 전체 또는 항목별로 판매, 조회 수, 수익을 검토하고, 접속 경로, 상세 활동, 이전 거래 등의 고객 정보를 확인
     * 현재 미국 내 사용자에게만 베타로 기능 오픈
       → 결제 수수료만 부과 (2.9%+거래당 $0.30)

   드랍박스는 매출 성장때문인지 갖가지 제품들을 내놓고 있는데...

   이정도 제품은 그냥 드랍박스 이름 떼고 독립적인 제품으로 내놓는게 좋을 거 같아요.

   드랍박스나 구글드라이브에서 판매용 데이터를 링크해서 제공하는 경우를 많이 봐서 그런지 판매 하려고 할 때 다른 사이트 가입 하지 않고 바로 할 수 있다는 것이 꽤 매력적인 것 같습니다.
"
"https://news.hada.io/topic?id=6792","가장 효과적인 창업자들을 연구해서 얻은 교훈들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       가장 효과적인 창업자들을 연구해서 얻은 교훈들

     * 55%의 스타트업은 사람 문제로 실패함
     * Google for Startups에서 40개국, 900명의 창업자/CEO/CTO를 조사
       → 최고의 리더십 전략들을 정리해서 'Effective Founders Project' PDF(59p)로 공개

핵심 7가지

  1. 사람들을 Volunteer처럼 대하세요

     * 대학졸업자,경력자 부터 세계 수준의 인재까지 최고의 사람들은 의미 있는 미션을 위해 위대한 일을 하고 싶어함
     * 목적을 가지고 팀에 영감을 주는 것은 최고의 인재를 고용하고 유지할 수 있는 기회를 제공함
     * 예를 들어 뛰어난 엔지니어들은 시장을 몰아내는 올드한 프로젝트 보다는 독특한 도전을 원함

  2. 방해요소로부터 팀을 보호하세요

     * CEO는 종종 새로운 아이디어들로 산만해 보이지만, 최고의 CEO들은 진정으로 중요한 것에 집중하게 만듦
     * 하지만 이것은 어려움 : 스타트업이 길을 찾을 때는 모든 것이 기회처럼 보여서 집중하기가 힘들게 함
     * 팀의 모멘텀을 만들기 위해 명확한 목표와 우선 순위를 설정할 것
     * 이것들이 점차 더 좋은 성과와 사기를 이끌어 냄
     * 훌륭한 아이디어를 묻어버릴 때를 위한 일종의 종료의식(Closure Ritual)을 만드는 것도 중요함

  3. 불필요한 마이크로매니지먼트를 최소화 하세요

     * 특정 상황에서는 도움이 되지만, 효율적인 리더들은 자신과 비즈니스를 성장시키기 위해 업무를 위임하는 것을 목표로 함

  4. 의견 불일치를 권장하세요

     * 창업자들은 종종 (공동창업자나 동료들은 높게 평가하는) 자신과 다른 의견을 과소 평가하는 경향이 있음
     * 몇몇 연구결과에선 여러 팀간의 의견 불일치가 실제로는 더 효과적인 결과로 이어진다고 함
     * 결과적으로 이는 더 혁신적이고 포괄적인 제품을 만들게 된다는 것

  5. 대인 형평성을 유지하세요

     * 공동창업자간 갈등의 주요 원인은 기대 위반(Viloated Expectations)
     * 데이터에 의하면 많은 창업자들의 공동창업자의 의무(Duty)를 트래킹 하지만, 자신도 모르게 기대치를 최소한으로 정의함
     * 가장 효과적인 공동창업자들은 공개적으로 토론하고 서로에게 기대하는 것을 문서화 하며, 우리가 ""대인 형평성(Interpersonal Equity)""이라 부르는 것을 지속적으로 확인
     * 둘 간의 기대치가 공정(fair)하다고 느끼나요? 당신이 주고 받는 것은 공동창업자와 비교했을 때 공정한가요 ?

  6. 전문 지식과 보조를 맞추세요

     * 모든 분야에서 전문가가 될 수는 없지만, 리더는 적합한 사람을 고용하고 팀을 성장시키기 위해 충분히 알아야 함
     * 가장 효과적인 창업자의 93%는 업무를 효과적으로 관리하고, 업계에서 앞서 나갈수 있도록 시간을 할애하는 기술적 전문성을 가지고 있음

  7. 낙담(discouragement)을 이겨내세요

     * 많은 사람들이 자신감(self-confidence)이 시간이 지나면 성장할 것이라고 기대하지만, 데이터에 의하면 가장 효과적인 설립자도 가장 효과적이지 않은 설립자와 비슷한 정도의 자신감을 가지고 있음
     * 이것은 더닝-크루거* 효과와 얼라인
       → 인지 편향의 하나로, 능력이 없는 사람이 잘못된 판단을 내려 잘못된 결론에 도달하지만, 능력이 없기 때문에 자신의 실수를 알아차리지 못하는 현상
     * 여정을 시작할때의 과신(overconfidence)은 창업자들이 시작하는데 도움이 되지만, 곧 낙담과 자기 회의(self-doubt)가 시작됨
     * 이 둘은 차례로 당신이 더 멀리 가는데 필요한 내적인 도전을 줄 수 있음
     * 일부에게는 자기 회의가 좌절로 다가옴
     * 만약 당신이 그렇다면, 필연적인 실패가 아닌 성장의 신호일 가능성이 있다는 걸 명심할 것
     * 당신을 위한 지원 시스템을 찾고, 긍정적인 것에 집중하고, 필요할 때 도움을 요청하는 방법을 알아둘 것

   너무 좋네요! 감사합니다.

   와닿습니다. 감사합니다.

   제게 지금 이 글이 딱 필요했던 것 같은데, 너무나 좋은 글 공유 감사합니다!

   5번과 관련해서 공동창업시 주주간 계약서에 들어가야할 내용도 참고하세요
"
"https://news.hada.io/topic?id=6857","iOS 16 UI Kit for Figma","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        iOS 16 UI Kit for Figma

     * 수백개의 컴포넌트,템플릿,데모 포함
     * 최신 버전의 Auto Layout으로 작성
     * Component Properties, Variants 및 다크모드 지원
     * 이번 버전 부터는 유료로 구입하면 Loom 워크스루 및 데모, 이메일 업데이트도 제공(파일 자체는 유료/무료 동일)
"
"https://news.hada.io/topic?id=6832","Miniflux - 경량 오픈소스 RSS 리더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Miniflux - 경량 오픈소스 RSS 리더

     * Go + PostgreSQL로 서버가 구성되어있으며, Hacker News, Lobsters와 Pinboard에 영향을 받은 자바스크립트를 적게 사용한 간단한 디자인.
     * Full-Text Search, 북마크 등의 기능 탑재
     * Telegram, Pinboard, Instapaper, Pocket, Wallabag, Linkding, Espial, Nunux Keeper와의 통합을 지원.
     * $15/년에 SaaS로 사용 가능

   지금은 Tiny Tiny RSS를 설치해서 쓰고있는데, 이것도 한번 써보고싶네요.

   오오오오!!!! 바로 설치해봐야겠군요!!!

   집 NAS 위에서 직접 굴리고 있는데 굉장히 돌리기 쉽고 유용합니다 ㅎㅎ

   전 Bloglines 에서 Google Reader로 옮겨 갔다가 현재는 Feedly로 RSS를 관리중인데요.
   요즘은 읽을 블로그 글이 많이 줄어서 그런가 Feedly 무료 버전으로도 나름 쓸만합니다.
   혹시나 Feedly 가 서비스를 중단한다면 그때는 이걸로 한번 직접 운영도 고려해 봐야할 듯.
"
"https://news.hada.io/topic?id=6819","Twitter, 블로그 형태의 Notes 기능 테스트 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Twitter, 블로그 형태의 Notes 기능 테스트 중

     * 트위터내에서 장문의 글과 이미지 등을 첨부하여 블로그 포스트 형태로 작성하고 공유할 수 있는 기능
     * 몇몇 작가 그룹이 Notes 기능을 테스트하고 있어서, 해당 쓰레드에서 긴 글들을 모아서 트윗중

   근데 아직 몇몇 국가에서 테스트 중이라고는 하는데, 저는 글 내용이 보이지도 않네요.
   웹이든 앱이든 누구한테나 보이게는 해두고 롤아웃을 하던지 하지..
   상장까지 한 회사가 초기 스타트업이나 하는 실수를 하고 있는듯 ㅡ.ㅡ;;
"
"https://news.hada.io/topic?id=6860","Electron 으로 Windows 95 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Electron 으로 Windows 95 실행하기

     * 브라우저에서 자바스크립트로 x86을 에뮬레이트하는 v86 기반으로, 윈도우를 실행하게 만들어서 Electron으로 감싼 것
     * 맥(인텔/M1), 윈도우(32/64/ARM64), 리눅스(64/ARM64/ARMv7) 바이너리 제공

   wasm을 어서 관심갖고 쭉 봐야겠네요 성장이 엄청 빠르네;;;

   Virtual X86 - 브라우저에서 각종 OS실행해보기

   깃허브 페이지에 친절하게도 Does it run Doom? 항목까지 ㅋㅋㅋㅋ

   Doom은 국룰이죠 ㅋㅋㅋㅋㅋㅋ
"
"https://news.hada.io/topic?id=6830","Linus Torvalds, "리눅스 커널 내에 Rust가 곧 머지될 수도 있다"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Linus Torvalds, ""리눅스 커널 내에 Rust가 곧 머지될 수도 있다""

     * 리눅스 재단의 오픈소스 서밋 키노트에서 Rust 인프라스트럭쳐 머지가 빠른 시일내에 가능할 수도 있다고 밝혀
       → 아마도 다음 커널 릴리즈인 5.20에(7월 말쯤 머지 윈도우 오픈 예정)
     * Rust for Linux PR이 아직 보내지거나 머지된 건 없지만, 커널 내 기본 인프라 및 샘플 드라이버 코드들이 안정화 작업중

   새로 작성되는 기능들은 러스트로 작성될 수도 있겠네요

   헐대박 마침 공부하고있었는데 기쁜소식이네요
"
"https://news.hada.io/topic?id=6772","UI Component Encyclopedia","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       UI Component Encyclopedia

     * Storybook이 Airbnb, Microsoft, GitHub 등이 사용하는 UI 컴포넌트 5132개를 정리
       → 공개 Storybook들을 한데 모은 것
     * 실시간 데모 와 함께 컴포넌트를 브라우징 & 검색 가능
     * 소스 보기 및 쉬운 재사용 지원

   와아...!!
"
"https://news.hada.io/topic?id=6834","난 Jira가 정말 싫어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             난 Jira가 정말 싫어요

   Jira에 대한 불만족 의견만 모아놓은 사이트
     * 느려요. 엄청 느려요
     * 마이크로매니지를 장려해요
     * 너무 복잡해요

   작은 회사는 gitlab/github 만으로도 충분한데, 지라가 문제가 많나 보군요.

   trac도 괜찮았아요.

   욕이 많다는 건 쓰는 사람도 많다는 방증인 것 같기는 해요.
   욕하면서도 계속 쓸수밖에 없는 이유가 있는…
   메이저 툴은 메이저 욕을 먹는 거 같아요.

   그나저나 마이크로매니지를 장려한다는 부분이 굉장히 와닿는군요..

   Asana, Github issue 쓰는 분들은 없나요?

   있지요

   저는 회사에서 지라를 쓰고 있긴 한데,,,
   개인적인 평은 어렵고 느리지만 조금만 시간을 투자했을때 지라만큼 관리 잘 되는 서비스도 없는거같네요.
   대시보드나 사용자 지정 필터 조금만 잘써도 솔직히 괜찮은거같고, 여러 방면에서 이슈 관리하기 좋은거같아요.

   물론 너무 느리긴 하죠 ㅋㅋ

   버그관리만 하기엔 맨티스도 괜찮습니다. ㅋ

   '복잡하다'라는 문제의식을 해결하기 위해서 단순하고 예쁜 이슈 관리 도구는 최근 5년간 많이 나와서 기본적인 이슈 관리 기능 정도가 필요한 회사들은 그런 도구를 쓰면 될 것 같아요.

   대체하기 힘든 JIRA의 가장 강력한 기능은 custom field 추가 기능을 통해서 각 팀 워크플로우에 맞출 수 있다는게 너무나도 강력하고 다른 도구들에서 찾아보기 힘든 기능이기는 하죠. 그런데, 이러한 customization이 제대로 관리되지 않고, 각자 알아서 하도록 내버려두면 엉망이 되어서 느리고, 복잡하고, 쓰기도 불편한 흔한 상황이 되는 것 같습니다. JIRA도 이러한 customization이 전역적으로 적용되고 어드민만 수정할 수 있는 제품이었다가 최근 수년간 팀별로 수정할 수 있는 방향으로 점점 개선되기는 했고, 요새는 그나마 적어도 팀에서 제대로 관리하려는 의지만 있다면 단순하고 깔끔하게 유지하기 쉽게 된 것 같아요. 보통 그런 의지를 가진 사람이 별로 없기는 하지만...

   TL;DR:
     * 회사의 규모나 필요에 따라 적절한 이슈 관리 도구를 골라서 쓰면 됨
     * JIRA의 경쟁 이슈 관리 도구를 개발하는 다른 회사들은 아직 많이 분발해야함
     * JIRA의 강력한 customization을 팀별로 수정하기 쉬운 방향으로 진화하고 있어서 이걸 잘 쓰면 강력한 도구가 되지만 그렇지 않으면 악몽이 될 것

   저는 써보지도 않았는데 저런 악평을 너무 많이 들어서(... ) Notion 캘린더로 프로젝트를 관리하다가, 이슈 트랙킹은 됐으면 좋겠어서 YouTrack을 섞어 쓰게 되었습니다. 어떤 프로젝트 매니징 툴을 쓰시나요? 질문을 올려도 재미있겠네요.

   지라 + 컨플루언스 대신 https://shortcut.com/ 과 노션을 쓰고 있습니다 .

   지라를 헤비하게 써야 하는 시점에서 주객전도가 아닐까 싶습니다
    1. 딱히 대체제가.. 레드마인도 영 마음에 안들고..
       2, 무조건 클라우드 쓰게 만드는 것도 맘에 안들고
    2. 소스하이라이팅 기능도 영... 차라리 온프레미스버전이 낫다.
    3. 컨플루언스와 페어로 안쓰면 이것 또한 답 없는.. 에흉

   항상 욕하지만, 마땅한 대체제가 없는거 같아요. 🥲

   마인드셋을 ""이 서비스는 지라에 있는 ㅇㅇㅇ기능이 없지만 그 기능은 다른 방식으로 풀어보자""가 되어야 될 것 같아요. ""이 서비스는 지라에 있는 ㅇㅇㅇ기능이 없으니 아웃""라는 마인드로는 절대 지라의 늪을 벗어날 수가 없어 보입니다. 저희 회사도 뭐 다르진 않네요 .

   이것저것 방황하다가 아직 지라를 쓰고있긴한데,,
   컨플루언스는 진짜 너무 별로긴 해요. 그래도 관리 채널을 늘리기는 싫어서 어거지로 쓰네요.
   애자일보드는 기능이 너무 많아서 어려워보이지만 그냥 적당히 '스프린트만' 하기에도 지라만한게 없긴 하더라구요..
   빗버킷연동해서 따로 티켓링크 연결 안해도 관리가 되는 부분도 좋고..
   모 회사에서 PM이 지라로 모든것을 컨트롤하려고할때는 진짜 쳐다도 보기 싫었는데
   적당히 카드관리만 하기에도 나쁘지 않은거같긴 해요.
   진짜 너무 느리긴 합니다....

   개같다 이거에요
    1. UI/UX 가 너무 복잡하고
    2. 플러그인들이 너무 느리고
    3. 설정항목들이 너무 많은것도 짜증나는데, 일목요연하게 모여있지도 않으며
    4. 도움말은 전혀 도움이 되지 않고
    5. 한글 서포트는 기대하지 않는 편이 좋고
    6. 국내 컨설팅 회사들의 지라에 대한 이해도는 나랑 별 차이 없음.

   지라는 욕하면서 쓰는게 국룰

   지라를 쓰느니 그냥 레드마인을 쓰겠다.. 라는게 저의 지론..

   내용도 내용이지만 사이트 동작이 인상적입니다
"
"https://news.hada.io/topic?id=6787","Google News Initiative 스타트업 플레이북 (한국어)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Google News Initiative 스타트업 플레이북 (한국어)

     * 구글 GNI가 디지털 뉴스 스타트업 창업 프로세스를 이해하기 쉽게 설명하고, 미디어 비즈니스 구축을 지원하기 위해 제작
     * 뉴스 스타트업 창업자들이 고민하는 보도 내용, 구독 대상, 배포 방법, 그리고 발전 가능성 등에 대한 질문의 해답을 찾고 뉴스 사업 운영을 본격적으로 시작할 수 있도록 돕기 위해 고안
     * 제품 구축, 독자 늘리기, 초기 자금원 및 수익원 파악, 운영 시스템 구성 등의 내용 포함

목차

    1. 저널리즘 스타트업 소개
    2. 뉴스 비즈니스에서 해결하려는 문제 정의하기
    3. 최소기능제품(MVP) 구축 및 측정하기
    4. 가이드가 되어줄 사명과 가치 확인하기
    5. 아이디어를 위한 사업계획 만들기
    6. 비즈니스 성공 정의하기

시작 가이드

    1. 제품 더 깊이 파고들기
    2. 독자 확대 및 참여 유도
    3. 비즈니스 시작 및 유지에 필요한 자금 확보하기
    4. 운영 시스템 구성하기

   Google News Initiative (GNI) 스타트업 플레이북이 한국에도 런칭 되었습니다!
"
"https://news.hada.io/topic?id=6868","W3C, 공익 비영리 단체로 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           W3C, 공익 비영리 단체로 변경

     * 2023년 1월에 새로운 법인을 출범하고 501(c)(3) 비영리 단체로
     * 1994년에 처음 만들때는 호스팅 모델로 출범. 미국(MIT),일본(Keio),프랑스(Inria),중국(Beihang) 4개 파트너가 호스팅
     * 웹의 빠른 변화와 요구를 감당하기 위해 더 강력한 거버넌스가 필요하여 그 간의 경험을 바탕으로 새로운 조직을 구성
     * W3C를 둘러싼 조직만 변경되는 것이며, 표준 개발 프로세스는 유지
     * 이사회는 W3C 회원에서 선출하며, 멤버 계약 및 직원 이전 등의 작업이 진행될 예정

   기존 W3C의 조직구조 : https://www.w3.org/Consortium/facts
"
"https://news.hada.io/topic?id=6828","TinyWow - 무료 파일 처리 도구 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        TinyWow - 무료 파일 처리 도구 모음

     * 각종 포맷 변환도구를 비롯한 수십가지 기능 제공
       → 배경 제거/Blur
       → PDF 합치기/분할/편집, PDF to JPG/PPT/Excel
       → Video to GIF, Video Trim/Mute/Resize
     * 무료. 별도의 제한 없음. 업로드된 파일은 15분 후 자동 삭제

   흠.. 믿고 써도 되려나요..

   Very good
"
"https://news.hada.io/topic?id=6867","“DevOps”의 인적 확장 (The human scalability of “DevOps”)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          “DevOps”의 인적 확장 (The human scalability of “DevOps”)

   Envoy의 창시자 Matt Klein이 작성한 글의 번역
   인터넷 시대의 역사를 따라가며 DevOps라는 역할이 생겨난 배경을 짚어보고 회사의 규모에 따른 DevOps 조직의 역할과 한계을 제시함
     * DevOps란 무엇인가
     * 인터넷 어플리케이션 운영의 역사
     * 왜 DevOps가 현대 인터넷 스타트업에서 잘 돌아갈까?
     * 현대 인터넷 스타트업이 급성장하면 무슨 일이 벌어지는가?
     * 중앙 인프라 팀
     * 대체 가능성에 대한 착오
     * 붕괴
     * ""오래된 방식""과 DevOps 방식의 중간 지점?
     * 올바른 SRE 모델이란 무엇인가?
     * 결론

   이렇게 멋진 글을 쓰는 사람을 보면 얼마나 많은 경험과 생각을 했을 지? 다시 생각해보게 됩니다.
"
"https://news.hada.io/topic?id=6836","MarkWhen - 마크다운으로 계단식 타임라인 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MarkWhen - 마크다운으로 계단식 타임라인 만들기

     * 헤더, 이벤트, 그룹, 섹션 으로 구성
     * 기간은 마우스로 조정 가능
     * Timeline / Map / Doc 보기 지원
     * URL 공유 가능
     * PDF / PNG 내보내기
     * Vue & TypeScript 오픈소스
"
"https://news.hada.io/topic?id=6827","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.
     * 달리기와 푸샵을 계획대로 했습니다.
     * 영화 남아있는 나날을 보았는데 후회없도록 용기있게 행동하자는 생각이 들었습니다. 좋은 영화였습니다.
     * 아직 어린 아이들과 페파피그를 영어로 보고 있는데 드디어 시즌3까지 다 보았네요.

   Foundation 소설을 읽을 예정입니다. 드라마랑은 여러 부분이 다르네요. 비교해가면서 천천히 읽고 있습니다.
   지금까지는 드라마를 먼저 본 게 더 좋은 것처럼 느껴집니다. 어떤 상황인지 대충 예상하며 보게 되네요.

   워낙 옛 소설이라 그런 것일까요? 그 시절 신선했던 아이디어들이 워낙 익숙해져서일까요?
   반대로 드라마화가 잘 되었다 볼 수도 있겠군요.
"
"https://news.hada.io/topic?id=6823","V언어 프로그래밍 리뷰언어 프로그래밍 리뷰(2022)

V 프로그래밍 언어 리뷰


     * V언어가 나온 몇년이 지난 2022년에 V언어가 홍보했던 기능들을 직접 테스트하며 리뷰하는 글입니다.
     * 피쳐들의 평가를 미작동, 경고, 작동으로 나눠서 평가했으며. 아래는 그 평가 리스트의 평가 결과입니다. 평가를 위한 예제 코드와 평가에 대한 근거는 모두 본문에 있습니다.
     * 아래 리스트는 영어 공부하면서 번역한거라 사실 관계에 오류가 있을 수 있습니다. 참고 용도로만 사용해주세요.


     * 유지보수하기 좋은 간단한 언어.
          + 주관적인 주장임.
          + N/A

안전

     * 널 없음.
          + V언어는 널 포인터( V 레퍼런스 )를 컴파일러 에러나 경고 없이 만들 수 있음.
          + 미지원.
     * undefined value 없음.
          + 초기화하지 않은 메모리를 컴파일러 에러나 경고 없이 읽을 수 있음.
          + 미지원.
     * undefined behavior 없음.
          + V 컴파일러는 3가지 다른 형태의 UB를 작성하는 걸 막지 않았음. UB 발생함.
          + 미지원.
     * 변수 쉐도잉 (서로다른 이름 공간에 같은 이름을 만들 때, 이름이 가려지는 현상) 없음.
          + 로컬 변수를 가릴 수 없었음.
          + 미지원.
     * 바운스 체크.
          + 몇가지 기본적인 확인은 있지만, 사소하게 바이패스할 수 있음.
          + 경고.
     * 상수 변수가 기본.
          + 변수들은 의미있는 상수가 아님. mut 선언된 변수에 상수 레퍼런스를 할당한 다음 변수를 바꾸면 원본 상수 변수도 변경되도록 손쉽게 바꿀 수 있음.
          + 미지원.
     * 순수 함수들이 기본.
          + 이 주장은 순수함을 불순함이 의미하는 것으로 재정의하므로 의미가 없음.
          + (저자는 I/O 함수 지원은 본질적으로 불순할 수 밖에 없다는 걸 지적했으며, 문서에는 I/O 함수를 제외한 모든 함수가 순수하다고 했지만. I/O 함수를 호출할 수 있을 때부터 그 함수들은 순수하지 않다고 말했습니다. 그래서 의미가 덮어졌다고 말하는 것 같습니다. 본문에는 순수 함수들이 불순한 값을 뱉는 우수꽝스러운 예제를 보여줍니다. )
          + 미지원.
     * 상수 구조체가 기본.
          + 이미 위에서 상수 변수들을 우회할 수 있음을 증명했습니다.
          + 미지원.
     * Option과 그 결과값에 대한 필수 에러 체크.
          + 광고대로 작동함.
     * Sum types(type MyType = string | int 와 같은 문법입니다.)
          + Sum Types는 일반적으로는 작동하는 것처럼 보이지만, 내부 구현 이슈가 있음. ( type을 두 개 더 만드는 걸로 V언어가 금지하는 레퍼런스를 Sum Types으로 삼는 행동을 가능하게 만듭니다. )
          + 경고.
     * 일반화(제너릭)
          + 기본 구현은 존재하지만 아주 버그 투성이며 자기 스스로 강조하며 설명한 안전과 컴파일러 성능과는 완전히 동떨어져있는 것처럼 보임.
          + 미지원.
     * 글로벌 변수 없음.
          + V는 전역적으로 공유되는 상태를 만들거나 변경하는 것에 어떠한 의미있는 방식으로도 막지 않음.
          + 미지원.

퍼포먼스

     * C만큼 빠름( V의 메인 벡엔드 컴파일러는 사람이 읽을 수 있는 C언어 코드 )
          + V의 퍼포먼스 주장은 검증되지 않은 것처럼 보임.
          + 미지원.
     * 추가 비용없는 C 상호 운용
          + 광고대로 작동함.
     * 최소화되어있는 할당
          + 주관적인 주장임.
          + N/A. (저자는 int를 선언한 V코드가 C언어로 번역될 때, C언어상에서는 int를 malloc 되는 결과물을 보여줬습니다.)
     * 런타임 리플렉션 없는 내장된 직렬화
          + 광고대로 작동함.
     * 아무런 디펜던시가 없는 네이티브 바이너리들로 컴파일됨.
          + V는 아직 그 주장을 달성하지 못한 것처럼 보이지만, 일반적인 아이디어로는 V 프로그램이 상대적으로 자급자족하며 작다는 약간의 진실도 있음.
          + 경고.

빠른 컴파일

     * V는 100만 라인을 초당, 그리고 CPU 코어마다 컴파일함.
          + V 컴파일러는 주장한 수준의 성능 근처에 오지 않았음. (V 컴파일러 밴치마크 사이트에서도 20만 V 라인을 컴파일정도임.)
          + 미지원.
     * V는 V로 쓰여졌고, 1초 언더로 V 스스로 컴파일할 수 있음.
          + 광고대로 작동함.
     * 혁신적 메모리 관리
          + V의 주장들은 잘 뒷받침되지 않으며, 현재 존재하는 구현은 혁신적이라고 설명할 수 없음.
          + 미지원

   사실 V가 멀었다는 건 널리 알려진 사실이지만 이 글은 그 멀었다는 걸 증명하는 과정이 잘 적혀있습니다. 리스트에서 관심있는 걸 고르신 다음 그걸 증명하는 것만 한번 확인해보세요.
"
"https://news.hada.io/topic?id=6873","Ask GN: 오픈 스타트업에 대해 어떻게 생각하세요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask GN: 오픈 스타트업에 대해 어떻게 생각하세요?

   원본 토픽: https://community.applepie.pro/t/topic/31
   한 달에 하나의 프로덕트를 만들고 1년에 12개의 프로덕트를 만드는 챌린지를 진행한 연쇄 프로덕트 메이커 Peter Levels는 본인의 웹사이트 내에 모든 수익과 관련된 통계, 모든 비용과 관련된 통계, 탄소 배출량, 일일 커밋, 사이트 유입 수단 등을 한 톨 남김없이 투명하게 공개하기로도 유명한데요,

   https://nomadlist.com/open
   https://remoteok.com/open
   https://readmake.com/open

   스타트업이 이렇게 '벌어서 남준다’는 마음으로 자기들의 노하우를 공짜로 누구에게나 공개하는 문화, '오픈 스타트업’에 대해서 어떻게 생각하세요?

   저는 지금 제가 만드는 프로덕트(https://www.applepie.pro/)를 비즈니스적으로 성장시키는 방법과 동시에 최대한 투명하고 건강하게 만드는 방법을 고민하고 있어요. 그런 목표가 너무 거창하게 느껴지는지, 아니면 의미가 있다고 느껴지는지. 다양한 분들의 의견을 듣고 싶어요.

   첫 버전만 보고서는 거래 횟수가 얼마나 일어날지가 굉장히 의문스럽습니다... 였는데 이제 특정 상품만 파는 형태에선 벗어나셨군요.

   그럼 또 이야기가 다를것 같긴합니다 :)

   ㅎㅎ 많은 분들의 피드백을 받은 결과 <소비자간 거래의 단순 중개 행위>에는 큰 메리트 (풀지못한 문제)가 없다고 느끼고 있어요, 그래서 주변부의 문제들을 어떻게 풀어드릴 수 있을까? 하는 생각으로 빠르게 피봇팅하고 있는 상황으로 봐주시면 좋을 것 같아요! 노력해보겠습니다!
"
"https://news.hada.io/topic?id=6826","Slack, 오디오 협업기능인 Huddles를 비디오까지 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Slack, 오디오 협업기능인 Huddles를 비디오까지 확장

     * 오디오 대화로 시작해서, 클릭 한번으로 영상 통화 가능
     * 여러 사용자 간 화면 공유, 그리기 및 라이브 커서 기능 제공
     * 허들에서 공유되는 모든 것(링크, 메모, 채팅)이 메시지 쓰레드에 자동으로 저장
     * 이모티콘, 리액티콘 등의 효과 가능

   Slack, 가벼운 오디오 대화 Huddles 및 여러 신기능 공개
"
"https://news.hada.io/topic?id=6858","Enclave - 따기 어려운 형태의 자물쇠","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Enclave - 따기 어려운 형태의 자물쇠

     * 기존 열쇠 삽입형 자물쇠의 문제는 키를 넣는 것과 그 키가 올바른지 테스트하는게 동시에 일어 난다는 것
       → 이를 통해서 다양한 방법으로 공격이 가능함
     * 키 삽입과 테스트를 분리해서 공격이 어렵게 만든 새로운 형태의 자물쇠를 제안

   디지털하면서도 클래식한 느낌(??)이 있어서 사고싶네요. 250달러는 좀 심했지만...

   전자식으로 바뀐 우리나라와 달리 유럽은 아직도 키를 들고 다녀야 한다는 얘기를 들었는데, 그쪽에서는 유용할수도 있겠네요

   열쇠 내부 설명이 재미나서 자세히 들여다 봤네요.
   근데 시제품이라지만 $250은 좀 비싸 보이는데.. 계속 팔리나 보네요.

   근데 HN의 댓글들을 살펴보다 보니..
   https://www.youtube.com/c/lockpickinglawyer 이런 채널이 있고, 무려 구독자가 420만명이라는데서 놀랐네요.
   자물쇠 따기 좋아하시는 분들이 이렇게 많은가요..?

   예전에 찾아보니 연습할 수 있는 키트도 있고, 약간 큐브맞추는 것 같은 취미느낌이었어요..ㅋㅋ 덕중의 덕은 역시 양덕...
"
"https://news.hada.io/topic?id=6861","iRedis - 인터랙티브 Redis 터미널 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     iRedis - 인터랙티브 Redis 터미널 클라이언트

     * 자동 완성, 자동 추천 및 구문 강조 지원
     * 입력한 코맨드 검증 기능
     * 읽기 쉬운 결과 출력
     * 파이프라인 가능
     * URL로 원격 Redis 연결 가능
     * Python 오픈 소스
"
"https://news.hada.io/topic?id=6848","VirtualBuddy - 애플 실리콘에서 macOS 12+를 가상화하는 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             VirtualBuddy - 애플 실리콘에서 macOS 12+를 가상화하는 오픈소스

     * macOS 12/13 (베타 포함) 여러 버전의 macOS에서 앱을 테스트하고 싶은 개발자를 위한 도구
     * 내장 설치 마법사 제공
          + 애플 서버에서 설치 이미지 선택
          + 로컬 IPSW 파일 또는 커스텀 URL
     * 리커버리 모드 부팅 가능(SIP 비활성화 등)
     * 네트워킹 및 파일 공유 지원
     * 클립보드 공유 지원

   애플의 Virtualization.framework 를 이용해서, 쓰기 편한 GUI를 붙인 것이라고 합니다.
   관련한 WWDC 2022의 세션 Create macOS or Linux virtual machines
   Running macOS in a Virtual Machine on Apple Silicon Macs
"
"https://news.hada.io/topic?id=6838","구형 안드로이드 폰을 Ruby 웹서버 로 사용하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구형 안드로이드 폰을 Ruby 웹서버 로 사용하기

    1. Termux 설치
    2. SSH 구성하기(Dropbear)
    3. DHCP 끄고 Static IP지정
    4. Ruby, Bundler, Sinatra, Puma 설치
    5. nginx 설치
    6. 포트 포워딩
    7. DDNS 설정
    8. Hello World
    9. Siege로 로드테스팅 하기

   집에서 굴러다니는 넥서스7도 가능할런지. (걍 액자로 쓰고 있네요.)
"
"https://news.hada.io/topic?id=6795","애플은 찐 파괴왕: 30분만에 20개 스타트업을 보내다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     애플은 찐 파괴왕: 30분만에 20개 스타트업을 보내다

   WWDC 2022 에서 발표한 기능들로 인해 힘들어 질 스타트업들
     * PM의 경쟁분석 방법 : 4개의 경쟁자 유형과, 5개의 경쟁 포인트
     * Apple Pay Later : Afterpay, Perpay, Sezzle, Splitit, Klarna, Affirm
     * Tab to Pay : Toast, Square, Clover
     * Freeform : Mural, Whiteboards, Muse, Miro, Figjam, Whimsical
     * Passkey : Dashlane, 1Password, LastPass, Keeper, LogMeOnce
     * WeatherKit API
     * 상생하자는 애플이 왜 이런걸 발표했을까 ?

   Embrace, Extend, Extinguish의 21세기 버전을 보는 것 같네요

   계속되던 일이긴 한데 어떤 앱은 완전히 사라지기도 하지만 어떤 앱은 애플이 kit 형태로 제공한 기능 덕분에 더 좋아지기도 하고 그렇더라고요.
   기본앱은 그냥 기본만 하는 경우가 많긴 해서요.

   저도 이런 상황에서 다시 또 틈새를 파고들어 성장하는 회사들도 많으리라고 봅니다. 좌절하지 않는게 중요하죠.. ;)
"
"https://news.hada.io/topic?id=6875","10년간 가짜 러시아 역사를 중국어 위키피디아에 적은 중국인의 행위가 발각","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               10년간 가짜 러시아 역사를 중국어 위키피디아에 적은 중국인의 행위가 발각

     * 영어/러시아 버전보다 훨씬 상세한 중국어 위키백과 항목을 발견
     * 실제 역사적 인물과 섞여 있어서 진짜와 가짜 구분이 어려움
     * 2010년부터 청나라와 러시아의 역사를 위조하기 위해 4개의 가짜 계정을 이용
     * 206개의 토픽을 생성하고, 수백개의 토픽을 수정하여 수백만단어의 가짜 러시아 역사를 적었음
     * 이 일을 벌인 여성이 영문 위키피디어 계정에 적은 사과편지에서 자신의 의도는 역사를 배우기 위함이었고, 본인은 고등학교만 졸업한 전업주부라고 밝힘
     * 처음에 편집한 항목의 빈자리를 채우기 위해서 대부분의 가짜 항목을 만들었다고

     ""속담에 나오듯, 거짓말을 하려면 거짓말을 더 많이 해야한다. 기존에 적은 수십만 단어를 지우기가 꺼려져서, 결과적으로 수백만 자를 작성했다""

     * 일부 위키피디어 편집자는 중국어 위키피디어의 신뢰도 전체를 떨어뜨리는 사건이라고 얘기함
     * 현재는 그녀가 작성한 모든 항목은 지워 졌음
       ""다만, 이 계정들이 꽤 오래동안 방해공작(Sabotage)을 해왔기 때문에, 허위 정보가 다른 플랫폼으로 퍼졌을 수 있음""

   10년 동안 200여개의 아티클을 만들어 낼 정도면 대체역사 소설가로 데뷔해도 되겠군요.. (농담)

   글에도 네티즌이 ""중국의 보르헤스"" 라고 부른다고..

   주작의 민족. 한국 역사도 저렇게 날조한 것들이 얼마나 많을까
"
"https://news.hada.io/topic?id=6822","세줄 아이디어 무한생성 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           세줄 아이디어 무한생성 프레임워크

     * 개요: 스타트업 열풍?
     * 타이탄의 도구들
          + 리처드 브랜슨을 소개
          + 항공사 서비스가 마음에 안 든다고 생각
          + 항공사를 차려야겠다고 결심
          + 보잉사를 찾아가 비행기를 빌릴 수 있는 지 물어봄
          + 버진 아틀란틱 에어라인의 사장이 되었고, 억만장자가 됨
          + 그의 행동방식은 세 줄로 요약 가능함
          + 문제 - 항공사가 맘에 안 든다.
          + 해결책 - 내가 항공사 차린다.
          + 첫걸음 - 일단 비행기를 빌린다.
     * 문제 / 해결책 / 첫걸음 프레임워크를 이용하면 아이디어를 만들 수 있음
     * 예시 아이디어 1: 소셜 서비스와 포털의 스팸봇과 허위정보를 검출하는 DeepFake 경찰 AI
          + 문제: 딥페이크
          + 해결책: 딥페이크 경찰 AI
          + 첫걸음: 이미지 1000장 수집
     * 예시 아이디어 2: 교육비가 비싸니 학생 지불이 아니라 기업, 지자체 등 기관이 지불하게 만들자.
          + 문제: 학생 입장에서 비싼 교육비
          + 해결책: 학생들 공짜로 교육하고 교육비를 기업과 지자체가 부담하게 만든다.
          + 첫걸음 - 유튜브 채널 만든다.
     * 예시 아이디어 3: 쓰레기 선별 자동화 AI 및 로봇, 공장 자동화 플랫폼
          + 문제: 쓰레기 선별 (플라스틱, 비닐, 유리병 등 구별)
          + 해결책: AI와 로봇 기술로 자동 선별
          + 첫걸음: 지자체별 쓰레기 선별장에 견학, 카메라 설치 가능여부 질문
     * 거꾸로 이미 완성된 제품과 서비스에서 아이디어를 도출하는 연습을 해볼 수 있다.
     * 토스는 어떻게 만들어졌는가
          + 문제: 송금이 어렵다
          + 해결책 - 간편송금앱을 만든다.
          + 첫걸음 - 은행과 출금 시스템 제휴를 구축한다.
          + 토스는 송금 아이디어만 만든 게 아니다.
          + 토스는 신용조회 아이디어도 만들었고, 보험 아이디어도 만들었고, 투자 아이디어도 만들었고, 본인인증 아이디어도 만들었고, 결제 아이디어도 만들었고, 서비스가 50개가 넘는다.
          + 세줄짜리 아이디어를 매일매일 만들면 된다.
          + 매일 하기 힘들다면, 한 가지 아이디어를 가진 사람들 여럿이 함께 일할 수 있다.
          + 아이디어가 서로 상관이 없더라도 상관없다.
          + 토스는 금융과 전혀 무관한 것 같았던 돈나오는 만보계 아이디어로 높은 유저 재방문율을 획득했다.
     * 가장 중요한 건 첫걸음을 떼는 것이다. 첫걸음을 떼야 해결사가 된다.
     * 그러나, 첫걸음이 조금 늦어지더라도 너무 걱정할 필요는 없다.
     * 다른 사람이 먼저 첫걸음을 떼더라도 전혀 상관이 없다.
     * 아이디어 하나에는 경쟁과 타이밍이 존재하지만, 가능성에는 경쟁과 타이밍이 존재하지 않는다.
     * 새로운 세줄 아이디어를 만들면 된다. 아이디어는 무한생성이 가능하다.
     * 아이디어 무한생성이 가능한 이유는 간단하다.
     * 세줄의 글을 쓰고 여러 사람이 모여 열심히 피땀 흘려 만든 제품과 서비스 등이 다음날 반드시 누군가의 문제가 되기 때문이다.
     * 구글이라는 서비스에 문제가 있다고 생각해본 적이 있는가
     * 구글 검색엔진의 아이디어는 다음과 같다.
          + 문제 - 인터넷에 정보가 많은데 내가 원하는 정보를 찾기 어렵다.
          + 해결책 - 검색엔진을 만든다.
          + 첫걸음 - 여기저기 흩어진 웹사이트의 정보 (글제목, 본문 등)를 수집한다.
     * 그런데 정교한 검색엔진인 구글을 만들기 위해선 웹사이트만 수집하는 것이 아니라 고객의 정보를 누구보다 많이 수집해야 한다.
     * 내가 cafe라고 영어로 검색하면, 한국어로 검색결과가 나오고 가장 가까운 카페가 미터단위로 지도와 함께 나온다.
     * 여기서 개인정보 문제가 발생한다.
          + 개인정보를 너무 많이 가지고 너무 잘 활용하는 서비스는 유저의 인지 능력을 조작하거나 중독을 부를 수 있다.
     * 이 문제에서 아이디어가 발생한다.
     * 문제 - 구글이 나의 개인정보 (현재 위치, 과거 위치, IP, 단말기, 브라우저, 예전 검색한 내용, 클릭한 웹사이트 등등)를 너무 많이 알고 있다.
     * 해결책 - 개인정보를 거의 수집하지 않는 검색엔진을 만든다.
     * 첫 걸음 - 유저의 개인정보를 받지 않고 검색 키워드 정보만 수집해 유저 대신 구글에 대신 검색해준다.
     * 구글은 Duckduckgo가 되고 Gmail은 Protonmail이 되고 Google Drive는 Proton Drive가 되고, 열린 통신을 위해 시작된 인터넷은 VPN과 Tor 프로토콜이 된다.
     * 문제를 멋지게 해결하는 모든 제품과 서비스를 냉정하게 생각해보면 그들의 해결책이 전부 문제라는 사실을 알 수 있다.
     * 배달의 민족이 해결한 문제와 배달의 민족이 만든 문제는?
     * 쿠팡이 해결한 문제와 쿠팡이 만든 문제는?
     * 카카오가 해결한 문제와 카카오가 만든 문제는?
     * 세상은 점점 더 복잡하고 어려워진다. (엔트로피, 복잡도가 반드시 증가한다.) 풀어야 할 문제는 무조건 늘어난다.
     * 문제를 해결하는 사람들을 도와주는 도구를 만들어 더 많은 문제를 해결하는 건 어떤가
     * 당신이 만들어낸 문제보다 당신이 해결한 문제로 인해 행복해지는 사람이 더 많은 문제를 푸는 건 어떤가
     * 지구 환경이나 평화에 기여할 수 있는 문제를 푸는 건 어떤가
     * 모든 문제와 해결책에는 언제나 사회적 가치가 내제되어 있다.
     * 당신이 믿고 있는 그 가치를 위해서 노력한다면 세상은 더 복잡해지더라도 다양하고 즐거운 공간이 될지도 모른다.
     * 문제를 해결하는 사람이 되어보라
     * 복잡한 세상이라도 복잡하고 다양해서 즐길거리가 많은 세상을 만들어보라
     * 세줄만 기억하라, 문제 해결책 첫걸음.

   문제의 해결책이 또 다른 문제를 만든다는게 생각하지 못했던 관점이네요. 좋은 글 감사합니다!

   chuckplet님, 도움이 될 수 있으면 좋겠습니다 댓글 감사합니다!

   좋은 글 잘 읽었습니다. 감사합니다. 어떤 분야에서든 적용할 수 있는 간단하면서도 강력한 방법이네요.

   tequila님, 말씀 정말 감사합니다. 도움이 될 수 있으면 좋겠습니다!

   좋은글이네요

   말씀 정말로 감사드립니다!

   덧) 소프트웨어 개발에 오픈소스가 있다면, 오픈 아이디어를 제시해봅니다.
"
"https://news.hada.io/topic?id=6793","ApplePie Pro - 프로덕트 아이디어에서 MVP 기획 디자인 개발 런칭 성장까지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ApplePie Pro - 프로덕트 아이디어에서 MVP 기획 디자인 개발 런칭 성장까지

     * 들어가며…
     * 사건의 발단
     * 세 줄 짜리 아이디어
     * 기획
     * 중고판매사업을 하는 이유, 버는 돈을 정당화할 수 있는 사회적 가치
     * 시장조사: 국내 최근 5년 맥북 시장 규모가 1조원일지도 모른다. (가설)
     * 서비스 특징 잡기
     * 고객 페르소나 만들기
     * 비즈니스 모델 만들기
     * 구현과 개발
     * 디자인
     * 개발 스펙 생각하기
     * 만들어낸 기능들
     * 출시 & 마케팅
     * 지인 피드백 받기
     * 클로즈베타 출시하기
     * 공개하기
     * 검색엔진 최적화
     * 현실에 부딪히기
     * 감동하기
     * 출시 그 이후 이야기
     * 서른개의 일감이 제품이 되었습니다.
     * 성장
     * 배움 - 기능을 만들기 전부터 고객을 만나자
     * Growth Hacking
     * 문제에 대한 가설
     * 문제를 해결하기 위한 지표 수립
     * 앞으로의 마음가짐 - 국내 최고의 중고애플 마켓플레이스가 될 수도 있다.

   P.S, 조용하게 서비스 유지보수하고 기능추가 하려고 했는데 제 생각보다는 너무 많은 분들이 페이지뷰 하고 계셔서 달달달 떨려요… 이런 글을 쓰면서도 고객분들이 조금 더 늦게 들어와주시면 안되는 걸까 괜한 걱정도 들고 그래요. 새로고침할 때마다 사이트가 달라지고 삐걱거리더라도 조금만 참아주시면 안전하고 좋은 서비스로 보답할게요!

   감사합니다.

   너무 멋지네요! 맥 한 번 사볼까 하는데 이용해보겠습니다.

   말씀 너무 감사합니다!! 구매하고 싶은 상품을 만들 수 있도록 노력하겠습니다!! ㅠㅠ

   즐겁게 읽었습니다.
   다른 분들에게도 큰 도움 될것 같네요. 국내에도 이런 개발 & 성장 후기가 많아지면 좋을 것 같아요!

   좋은 피드백 너무 감사합니다. 더 힘내겠습니다!
"
"https://news.hada.io/topic?id=6803","마크 저커버그의 '비쥬얼 튜링 테스트 통과하기' 강연 요약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    마크 저커버그의 '비쥬얼 튜링 테스트 통과하기' 강연 요약

     * 실제 세상처럼 생생하고 사실적인 3D 디스플레이를 만들려면 매우 흥미로운 문제들을 풀어야 함
          + 8K 디스플레이, 시야각, 시선 추적, 수차조정
     * 이를 해결한 메타의 6가지 VR 신기술
          + 하프돔 시리즈 : 변화하는 초점
          + 왜곡 보정 시뮬레이터 : 시선 추적
          + 버터스카치 : 시야각 1도당 60픽셀 보장
          + 스타버스트 : 1만니트의 밝디 밝은 VR
          + 홀로케이크 2 : 가장 얇은 홀로그램
          + 미러 레이크 : 뉴 VR 폼팩터
"
"https://news.hada.io/topic?id=6784","Sake - 로컬 & 리모트 서버들을 위한 명령 실행기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Sake - 로컬 & 리모트 서버들을 위한 명령 실행기

     * SSH로 다수 서버에서 명령을 실행해주는 CLI 도구
     * 여러대의 서버 또는 도커 컨테이너 대상으로 동작
       → 모든 서버를 ping 하거나, 같은 명령(파일 찾기나 rsync등 ) 실행
     * 서버들의 정보를 불러와서 테이블로 표시 가능

   secureCRT에서 여러창에 동시에 명령어 보내는 것 같은 기능인가요?

   ansible이 생각납니다.

   Mani - 여러개의 Repo 관리용 CLI 개발자의 다른 프로젝트 네요
"
"https://news.hada.io/topic?id=6884","Ask GN: 어떤 모니터 조합을 선호하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: 어떤 모니터 조합을 선호하시나요?

   전 작업할때 게임엔진이랑 ide, 문서 창을 동시에 열어놓기 때문에
   24인치 모니터 3개를 사용 했엇는데요, 먼가 복잡하고 지저분 한 것 같아 고민입니다.
   다른분들은 개발하실때 어떤 모니터 조합을 사용하시나요?
   개발 분야도 알려주시면 좋을 것 같습니다 :)

   38인치를 메인으로 쓰고 옆에 27인치를 피벗해서 사용합니당

   43인치 모니터 쓰고 있습니다. (얼마전 까지 49인치 모니터 쓰다가 고장으로 기존에 쓰던 43인치 사용)

   43인치 + 27인치 멀티 모니터 구성입니다.

   27인치 쓰다가 30인치대 패스하고 40인치대 쓴지 2년 넘었는데 꽤 좋더군요. 화면 커서 멀티태스킹할때도 편하고요. 43인치 이상 한번 써보시길 추천합니다.

   관련 트윗 스레드

   https://twitter.com/lunamoth/status/1344507671941005312

   43인치 급이면 배율은 어떻게 쓰실까요?
   24인치 FHD 보다 작은 글씨면 노안으로 힘들것 같아서요

   43인치, 49인치 모두 배율 4K 100% 로 쓰고 있습니다. 작게 느껴지진 않더군요. 요즘 웹페이지 17px 정도가 기본이라서 (네이버 뉴스 본문 폰트)

   저도 울트라와이드 모니터 씁니다. 썬더볼트로 노트북에 꽂으면 충전도 되니까 책상에 선이 깨끗해져서 더 좋네요.

   저는 맥북에 27인치 모니터 하나 연결해서 정면만 보고 개발해요.
   듀얼 쓸 때보다 목이 한결 편하더라고요.
   화면에도 창 하나만 앞에 두는 편이고 나머진 알트탭으로 오갑니다.
   서버 개발자입니다~

   오 27인치 모니터 하나만 사용하시는 분도 계시군요.. 고정된 자세로 집중할 수 있으니 정말 좋겠군요 32인치 1개는 너무 크셔서 안사용하시는 걸까요

   네 전 27인치가 딱 좋네요~

   웹개발 합니다.

   저도 24인치 트리플, 27인치 세로/가로 듀얼, 27인치 트리플, 48인치 와이드, 등등..다 사용해봤는데

   지금은 5K 싱글로 왔습니다. 제가 이전에 셋업을 사용할때는 5K를 듀얼로 사용하기가 힘들어서 사용을 못했는데

   지금은 5K 듀얼을 고려중입니다. 레티나에 익숙해지니까 다른건 못쓰겠더라구요

   와.. 5K 듀얼은 어떤 느낌이려나요

   어짜피 스케일링이라 화면 크기는 27인치 QHD랑 동일하고 그냥 더 또렷한거 말고는 없어요

   전 듀얼모니터보다 울트라와이드 쓰는게 좋아서 Dell U4021QW를 사용중입니다.
   5120x2160 이라 창 3분할로 올려놔도 쾌적합니다.
   브라우저 창 두개와 편집기를 같이 열고, 긱뉴스에 올리는 뉴스를 보고 번역하고요.
   웹 사이트 개발할 때는 Vscode + 브라우저 + 슬랙 및 터미널 창 이렇게 올려두고 합니다.

   저도 21:9 와이드이면서 수직 해상도가 2160인 모니터가 나오기만 기다리다가 델 u4021이 출시되자마자 구입해서 사용중입니다. 가끔 미드 볼 때 레터박스 생기는 거 말고 업무용으로는 대만족해요.

   퍄.. 울샵 울트라와이드라니.. 몰입감이 엄청날 것 같습니다.
   모니터 하나로만 사용하면 책상도, 선도 깔끔할 것 같군요..
"
"https://news.hada.io/topic?id=6820","HDMI Firewallirewall

     * HDMI는 오디오/비디오 전송용으로 주로 사용되지만, 다양한 부가 기능을 제공 (HPD, CEC, HEAC, MHL)
     * 이를 통해 공격이 가능해져서, 공격자가 악성코드를 삽입 가능
       → 예) 외부인이 발표를 위해 사내 프로젝터에 HDMI를 연결했을 때 해킹해두면, 차후에 직원이 프로젝터에 연결시 다시 랩탑을 해킹 가능하고, 이를 통해 외부에서 회사 네트웍에 침투 가능
     * HDMI 방화벽은 오디오/비디오 전송만 가능케 하고 나머지 인터페이스를 블로킹 하는 어댑터 장비

   뭔가 데이터 다이오드 같은 장비가 생각나는군요.

   실제로 저렇게 공격이 가능할지는 의문이지만.. 저런 시도 자체가 가능하다는게 재미나네요.
   스파이 영화들은 다 USB에 뭔가를 꼽는데, HDMI 연결해서 해킹하는 장면이 나올수도.. ?
"
"https://news.hada.io/topic?id=6816","Tabnine - 차세대 AI 모델 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Tabnine - 차세대 AI 모델 발표

     * 백만명 이상이 사용중인, GPT-2를 이용한 딥러닝 기반 코드 자동 완성 도구
     * 새로운 AI 모델은
       → 전체 라인 부터, 함수 전체의 자동 완성이 가능
       → 자연어-to-코드 지원
     * Python, JavaScript, TypeScript, Java 및 다른 7개 언어
     * VS Code 와 JetBrains IDE 지원

   TabNine - 딥러닝 기반 코드 자동완성 도구

   아무래도 Copilot 과 비교가 많이 됩니다만.. 여러가지면에서 CoPilot을 못 따라가는듯 하네요.

   GitHub Copilot을 모든 개발자가 일반적으로 사용할 수 있습니다.
   Copilot 설명 및 사용기
   GitHub Copilot : 첫인상

   HN의 댓글을 보니 https://news.ycombinator.com/item?id=31830867
   TabNine 과 Copilot 을 같이 써보니 좋다는 얘기도 있고,
   TabNine의 자동완성이 별로라서 포기했다는 사람(이번 버전은 아니고 예전 버전)도 있고,
   TabNine의 리소스 사용량이 너무 높다고도 하네요.
"
"https://news.hada.io/topic?id=6897","Apple Weatherkit, Swift & REST API로 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Apple Weatherkit, Swift & REST API로 제공

     * 애플 날씨 서비스 기반으로 시의적절한 지역 날씨 정보를 제공
     * 현재 기상 조건 및 온도, 강수량, 바람, UV 지수등에 대한 향후 10일간의 예측 정보
     * 일부 지역에 대해서는 다음 한시간 동안의 분당 강수량 및 악천후 경보도 포함
     * 날씨 정보를 요청하는데만 위치 정보를 사용하며, 개인을 식별하지 않음. 각 요청간 트래킹도 하지 않음
     * iOS 16, iPoadOS 16, macOS 13, tvOS 16, watchOS 9에는 Swift API로 제공
       → 그 외의 플랫폼엔 REST API로 제공

   Apple, 유료 일기예보 앱 Dark Sky 인수
   인수한지 2년만에 플랫폼 안으로 가져오네요.
   이제 대부분의 앱들이 날씨 정보를 편하게 가져다 쓸수 있을듯. 적용 분야를 생각해 보니 많더라고요.
     * 일기장에 자동으로 오늘 날씨 입력해주기
     * 예약한 골프장 위치에 대한 날씨 예보
     * 캘린더 일정에 대해서 우산 챙겨가라는 알림 주기
"
"https://news.hada.io/topic?id=6870","minimal DALL·E","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             minimal DALL·E

     * DALL·E Mini에서 추론에 필요한 최소 필수 요소만 추출해서 PyTorch로 변환한 오픈소스
     * numpy / torch / flax 만 이용
     * 기존에 공개된 VQGan, DALL·E Mini, DALL·E Mega 모델 이용 가능
"
"https://news.hada.io/topic?id=6846","Oh Shit, Git!?!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Oh Shit, Git!?!

Git을 사용하면서 겪는 문제들에 대한 해결책 설명

     * 뭔가 단단히 잘못됐는데, 다 뒤엎고 예전으로 돌리고 싶어!
     * 방금 커밋했는데 하나 깜빡한 걸 발견했어!
     * 커밋 메세지를 잘못 썼어!
     * 다른 브랜치에 커밋해야 하는 걸 실수로 master에 커밋해 버렸어!
     * 실수로 이상한 브랜치에 커밋을 해버렸어!
     * diff를 실행했는데 아무 것도 안 보이잖아?!
     * 다섯 커밋 전에 한 커밋을 되돌려야 하잖아!
     * 파일을 수정한 걸 되돌려야 하잖아!
     * 아 몰라, 다 포기할래.

   👍👍

   재작년쯤 제가 번역을 했던 글인데 오랜만에 다시 읽으니 말투가 살짝 오글거리네요 ㅎㅎ;

   앗 그렇군요. 번역 고맙습니다!!

   전 여기 나열된 상황에서 SourceTree 같은 GUI 도구를 적극 사용해서 해결하긴 합니다.. ㅎㅎ
   제가 커맨드라인 명령어로는 다루기엔 힘든 상황들도 많더라고요

   비속어 없는 버전도 있군요

   https://dangitgit.com/ko

   부담스러워서 옮기면서 제거했는데.. 이게 더 좋네요. 변경해두겠습니다 ㅎㅎ

   오오~ 흔치 않은 문제가 생길때마다 구글링하는데 딱 필요한 거네요.
"
"https://news.hada.io/topic?id=6854","XLite - 엑셀 파일을 가상 테이블로 쿼리하는 SQLite 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 XLite - 엑셀 파일을 가상 테이블로 쿼리하는 SQLite 확장

     * SQLite 내에서 .xlsx .xls .ods 파일을 열고 가상테이블로 쿼리 가능
     * 특정 워크 시트 선택, RANGE로 쿼리 범위 지정 가능
     * Rust로 작성된 SQLite 확장

CREATE VIRTUAL TABLE class_data USING xlite(
    FILENAME './path/to/example.xlsx',
    WORKSHEET 'Class Data',
    RANGE 'A2:F'
);

SELECT A, B, C, D, E, F from class_data;
SELECT COUNT(*), D FROM class_data GROUP BY D ORDER BY COUNT(*);
"
"https://news.hada.io/topic?id=6813","Deno, 270억원($21M) 규모 시리즈A 투자 유치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Deno, 270억원($21M) 규모 시리즈A 투자 유치

     * Sequoia Capital이 리드하여 Nat Friedman, Netlify, Dylan Field 및 여러 VC들이 참여
     * ""Deno는 Serverless 시대를 위한 JavaScript""
     * ""Deno Deploy는 격리(Isolate) 클라우드""
       → 클라우드 컴퓨팅 초기엔 가상 머신이 컴퓨트 추상화였음
       → 그 이후에 Docker가 Linux Container 아이디어를 대중화 하고, 더 가벼운 isolation 패키지를 허용
       → Linux Container는 호스트 머신과 커널을 공유하여, 더 빠른 패키지 빌드와 빠른 시작 시간을 가능케 함
       → Isolate Cloud는 컴퓨트 추상화 와 비슷하지만 ""어플리케이션 코드""만 최소한의 패키지로 사용 하고, 호스트 머신에서 커널과 런타임 환경까지 제공
       → 이를 통해서 Deno Deploy는 최소의 배포 시간, 빠른 콜드 스타트, 놀라운 확장성이 가능

   Ryan Dahl의 JavaScript Containers에 대한 생각

   이제 Deno는 JS Container 개념을 Isolate Cloud 라고 부르기로 했나 보네요.
"
"https://news.hada.io/topic?id=6833","사람들이 잠잘 때 암세포가 깨어난다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          사람들이 잠잘 때 암세포가 깨어난다

     * 암은 종양세포가 혈관을 타고 새로운 곳으로 이동해서 새로 자리잡을 때 가장 치명적 → 전이,metastatis
     * 한 연구에 따르면 유방암환자의 순환종양세포(CTC)가 낮보다 밤에 혈액속으로 뛰어들 가능성이 더 높다는 발견을 함
     * 이를 통해서 암의 진행을 추적하는 더 나은 방법으로 연결될 수 있음
     * 2007년 국제 암 연구소는 오랜 연구 끝에 ""승무원/야간 간호사 처럼 예외 시간에 일하는 사람들이 유방암에 걸릴 위험이 더 높다는 결론""을 내렸으나 이유는 오픈퀘스천이었음
     * 30명의 유방암 환자의 혈액을 채취해보니 시간에 따라 CTC 포함한 양이 다르고, 80%가 새벽 4시에 수집한 혈액에서 나옴
     * 유방암 세포를 쥐에 이식하고 실험해보니(쥐는 인간과는 주기 리듬이 반대라 낮에 쉬고, 저녁에 활발) 쉬는 낮 시간에만 CTC가 피크를 침. 가끔은 기본값보다 88배 많이
     * 이렇게 채집한 CTC를 다시 이식해보니, 새로운 종양으로 성장한 대부분의 CTC는 쥐가 쉴 때 수집된 세포들이었음. 즉, 쉴 때 취득한 CTC가 더 전이가 잘됨
     * 암환자를 생검할 때 혈액 샘플을 채취하는 시간이 중요하다는 것
     * 유방암 세포가 왜 밤에 더 활동적인 지는 아직 더 조사해봐야 함
     * 신체가 깨어나거나 잠자리에 들 시간이라는 신호를 보내는데 사용하는 도구중 하나인 호르몬이 역할을 할 수도 있음
     * 그렇다고, 수면이 암의 적은 아님.
       → 다른 연구에서 암환자 중 하루에 7시간 미만의 수면을 취하는 사람들은 사망 확율이 더 높고, 일주기 생체 리듬이 흐틀어진 쥐들은 암이 더 빠르게 움직일 수 있음
       → ""잠을 잘 필요가 없다 또는 잠을 적게 자는게 필요하다""가 아니라 ""암세포가 전이하기 위해 혈류에 뛰어들 때, 24시간 주기 중 특정 시간대를 선호한 다는 것""

   관련 전공자는 아니지만,

   보통 잠잘때 세포 재생과 분열이 촉진되고 -> 암세포는 세포분열이 너무 과다하게 이뤄져서 악성 종양이 되는거니까 -> 잠잘때 암세포도 활발해진다,

   이런게 아닐까 싶네요.

   글 제목만 보고 ""잠을 더 자지 말아야 하나!"" 해서 놀라서 읽었네요.
   전 애플워치에서 AutoSleep 앱으로 잠자는 시간을 재는데..
   대부분 빨간색이고 가끔 노란색.. 녹색이 나와본 적이 한번도 없거든요.
   결론적으로는 ""그래도 잠은 잘 자야 한다""로 귀결이..

   잘 때 워치를 차면 충전은 언제 하나요? -.- ㅎㅎ

   개인적으로는 자기 2시간 전에 운동을 해서 자기 1시간 전에 끝내기 떄문에 운동 끝나고 샤워하기 전에 충전시키고, 자러갈 떄 차면 100퍼센트이더라고요.

   전 최근에 5번 노란색 뜨고 나니 재정신으로 걸어다니기가 힘들어지더라고요(... ) 충분한 숙면은 정말 필수적인 요소인 것 같아요.
"
"https://news.hada.io/topic?id=6878","스타트업은 유치원이 아닙니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            스타트업은 유치원이 아닙니다

     * 실제 의미가 뭔지 불분명한 영어 단어 사용을 줄이자: “미스커뮤니케이션"", “ASAP”, “팔로우업” 등
     * 무의미한 관용구를 줄이자: ""점심 맛있게 드셨나요~”, “안녕하세요~” 등
     * 과잉된 감정을 표현하는 이모티콘을 줄이자: 🙏, 😊 등
     * “내가 듣기 싫은 말”이라는 이유로 인신 공격과 작업물에 대한 평가를 동일시
     * “감정상해서 의욕이 없어질까봐"" 돌려 말하지 말자
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

     * 본문에서 ""한때 트위터를 휩쓸던 독성 말투""라고 언급된 『기술 업계의 독성 말투 문제, 고칩시다!』 글도 같이 올립니다.
     * 본문을 두고 의견이 분분한데 본문이 올라온 트윗의 인용글도 같이 올립니다.

   이게 바로 젊은 꼰대군요 태헤란밸리 유투버에서 본 사람인데 되게 거기서 보는거랑 다른분이네요

   원문에 댓글로

   분명하게 말하는 것과, 공격적으로 말하는 것은 다릅니다.

   스타트업이 유치원은 아니지만, 그렇다고 기계들이 모여있는 것도 아니죠. 의도가 어떻든 다수가 공격적으로 받아들인다면 당연하게도 방어적인 반응이 나올 것입니다. 이 또한 사람이기에 당연합니다.

   대화는 혼자 하는 것이 아니에요. 모두가 글쓴이처럼 합의한다면 괜찮지만 글과 댓글에서 보이듯 공격적인 표현들이 다수가 불쾌감을 주고 있는것으로 보여 전혀 '합의되지 않은' 부분인 것으로 보입니다.

   화가 나서, 또는 이해가 되지 않아서 공격적으로 쓰시는 글과 분명하게 전달하는 것의 차이점을 조금 더 이해하시고, 사람과의 관계와 대화에서는 서로가 느끼는 감정도 배려하고 존중하는 것이 맞는 것 같습니다. (물론 앞서 말했듯이 서로가 합의 했다면 괜찮습니다.)

   이런 글을 썼었는데 글쓴이에게 차단당하고 삭제됐네요.

   “내가 듣기 싫은 말”이라는 이유로 인신 공격과 작업물에 대한 평가를 동일시 <-- ???;

   저도 간결하게 의사소통 하는거 좋아하고 저런 상황을 많이 겪어서 글쓴분 의도는 잘 이해됩니다. 근데 뭐...그냥 저런거 맞춰주거나 그러려니 하면서 넘기는 것도 능력이죠.

   대부분은 자기와 같은 성향의 사람과 대화하면서 깨닫게 되더라고요.
   거울치료라고 하던가요.

   저는 개인적으로 업무 중 소통은 감정을 빼고, 부정적이든 긍정적이든 불필요한 덧붙임 말을 빼어 요지만 말하려고 노력합니다. 굳이 공격적이지도 않고, 굳이 쿠션 언어를 쓰지도 않고요(최소한의 예의 제외).
   그런데 사실 사회는 좁고, 지금 일하는 곳이 평생 직장도 아닐 것이며, 굳이 사람과의 인간 관계에 부정적인 경험을 할 필요는 없다고 생각합니다.
   좋은 관계를 유지하고, 불필요한 조롱을 삼가는 것도 미덕이라고 생각합니다. 저만 상대를 평가하는 것이 아니라, 불특정 다수도 저를 평가하기 때문입니다.
   사회 구성원으로서 가장 무서운 건 ""너무 공격적이야, 저 사람과 같이 일하기 싫어"" 아닐까요?
   누군가가 작업물의 평가를 인신공격 수준으로 받아들인다면, 그것이 발화자 화법의 문제인지(쿠션어를 말하는 것이 아닙니다), 정말 듣기 싫은 말을 해서인지도 고민해볼 필요가 있다고 생각합니다.
   사실 회사가 학교가 아님에는 동의하지만 회사가 학교냐고 공격적으로 말하는 사람들은 경험상 협업하고 싶은 사람들은 아니었습니다.ㅎㅎ

   내용과 별개로 궁금한 것이 follow up 이 저 뜻이 맞나요?
   action 이 이어지는 경우도 follow up 이라고 하는 것 같은데, 글쓴분은 단순히 진행 사항 관련 정보를 얻는 것으로 말씀하셔서 혼란스럽네요.

   허허.. 글만 딱 읽어봐도 경험 부족이 느껴지네요. 어그로 끌려고 글 쓴거면 성공한거 같군요 ㅎㅎ
   저도 개발자고 효율성을 중시하지만, 저 글은 자신이 사회성이 부족하다는 걸 커버치려는 것으로밖에 안보이네요. ㅎㅎ
   ""피드백을 솔직하게 하는것""과 ""일을 잘 하는 것"" 등에 관한 개념이 아직 부족한 듯.. 다양한 규모의 회사에서 여러 경험을 쌓으면 좀 깨달으려나요 ㅎㅎ

   크게 감명 받으셨나보네요 이런글도 퍼오고

   풋풋하내요.

   https://news.hada.io/guidelines

   그리고 글에 대한 의견이 당연히 갈릴 수 있겠습니다만 ( 특히 이런 논쟁적인 부분에서는 ) 가이드라인을 지켜주시면 감사하겠습니다. 여기는 유치원이 아니니까요(... )

   TL;DR;
    1. 친절하고 점잖게 얘기해주세요.
    2. 글쓴이를 저격하지 말아주세요.
    3. 반론이 있다면 그 내용만을 적어주세요.

   본문에 대부분 긍정적인 코멘트밖에 없어서 정말 대다수가 그렇게 생각한다고? 싶었는데
   댓글을 보니 반대되는 코멘트를 지우신다네요...

   본인이 자유롭게 관리할 수 있는 영역이니 뭐라 하고 싶지는 않지만
   해당 medium에 달린 코멘트를 보거나, 직접 코멘트를 쓰실 분들은 참고하세요

   본문 작성자 분께서 코멘트를 지운 적 없다는 코멘트 달아주셨습니다. 참고 부탁드립니다...

   저는 유년기때에는 모르는 것이 많기에 다른 사람을 직설적인 말로 함부로 대할 수 있겠습니다만(어린애들이 뜬금없는 직설적인 말을 하는 것처럼), 성인이 되면서 다른 사람에게는 생각보다 많은 사정이 있다는 걸 알게 됨으로써 좀 더 말들이 모호해진다고 생각한답니다. 그렇기에 스타트업은 유치원도 아니고, 초등학교도 아니기에 글쓴이가 주장하는 건 이뤄져서 안된다고 생각합니다.

   이 글은 TL;DR과 본문이 전혀 다른 글입니다. 차라리 무의미한 글들과 모호한 적개심을 줄이고 TL;DR만 남겼다면 더 좋은 글이 되었을텐데요.

   원글에서 맘에 안드는 댓글 다 삭제하고 있네요..

   유치원도 아니고요(... )

   눈팅만 하다가 이 글 때문에 댓글 달고 싶어서 가입했습니다.
   글쓴이가 화나 있다는 사실 하나는 잘 전달되네요.

   문제제기 몇 개는 공감되지만
   글에 나온 몇 예시와 글쓴이가 원하는 방향성은 솔직히 부정적으로 느껴집니다.

   비효율적인 허례허식이라고 보기에 사람의 소통은 조금 더 복잡한 개념입니다.
   직접적인 표현과 효율만이 베스트라기엔 그 외적인 부분들이 업무 자체와 문화, 각 구성원에게 주는 영향이 크다고 봅니다.

   무의미한 느낌이기 보단, 예의라 지키는 것이라 생각하고
   팀 내로 가독성을 높이기 위한 방법이라면 여러가지를 고민해보면 좋겠단 생각이 듭니다.
   저는 아래와 같은 템플릿을 사용하고 있습니다.


  안녕하세요😉
  [ 목적 ] : ~,
  [ 이슈 ] : ~,
  [ 요청 ] : ~,
  좋은 하루 되세요!

   호들갑 떠는 내용이라서 별로네여

   요즘 독서를 통해서 혼자 심리학을 공부해보고 있는데, 얕은 지식으로 몇가지 적어봅니다.
   사람은 로봇이 아니기 때문에 효율적이고 논리적으로만 삶을 살아갈 수 없습니다. ""업무에 한정해서 그렇게 하자""라고 말해봤자 하루의 1/3 가량을 업무에 쓰는 사람들이게 이는 결코 작은 수치가 아닙니다.
   대화에는 크게 두가지 방법이 있습니다. 하나는 ""관계 중심의 대화""이고 다른 하나는 ""정황 중심의 대화""입니다.
   관계 중심의 대화는 대화를 하는 주체, 즉 화자와 청자가 서로의 관계를 최우선 순위로 고려하는 대화이고,
   정황 중심의 대화는 대화의 주제, 즉 대화 내용과 목적을 최우선 순위로 고려하는 대화입니다.
   보통 개발자들이(저도 개발자입니다.) 후자의 대화법에 익숙한데, 언듯 보면 이 방법이 효율적인 대화법 같지만 문제는 정황 중심의 대화에서 정도를 조절하는 것이 매우 어렵기 때문에 극단적인 정황 중심의 대화를 하는 사람들이 종종 있습니다. 쉽게 말해서 사람이랑 대화하는 것을 마치 컴퓨터에다 대고 코딩치는 거랑 똑같은 방식으로 대화를 하려고 합니다. 필자는 이런 방식을 추구하는거 같은데 저는 별로 공감할 수 없습니다. 적절히 조화를 이루어야 건강한 대화라고 할 수 있습니다.
   개발자가 컴퓨터에다 대고 ""컴퓨터야 안녕? 오늘 니 기분이 좀 어때?""라고 물어보지 않는 것처럼, 오롯이 행위의 목적에만 몰두하여 하루종일 일 하다보니 대화 자체도 그렇게 하는게 익숙한 것입니다. 그리고 따지고 보면 회사에서 대화를 하는 이유도 '어떤 문제를 해결하기 위한 목적'을 두고 시작하는 경우가 많다보니 '이런 식으로 대화하는 게 옳은 대화법이다'라고 착각할 수 있습니다. 하지만 그건 옳은게 아니라 그냥 본인이 그렇게 하기 편한 것이라고 말해야 맞습니다. 애초에 ""옳바른 대화법""이라는 기준을 정하는 것은 매우 어렵습니다.
   관계와 정황을 적절하게 균형을 맞춰서 대화하는게 너무 어렵다보니 한쪽 부분을 전혀 고려할 필요가 없는 극단적인 쉬운 대화법을 추구해야했고 필자는 둘 중에서 논리가 뒷바침 될 수 있는 ""정황 중심적인 대화"" 을 선택했으며, 그렇게 살아왔고 심지어는 그것을 타인에게 강요하는 것 입니다.
   ""인신공격!==작업평가""를 예로 들어보면 누군가에게는 ""작업 결과물에 대한 단순한 평가""라고 생각해서 던진 몇 개의 단어들이 누군가에게는 ""매우 공격적인 단어들의 조합""으로 느낄 수 있다는 것입니다.
   대화를 하는 상대방과 본인의 관계는 전혀 고려하지 않은 채로 단순히 ""작업 결과물 성적이 저조하다""라는 정황만 놓고 하고싶은 말을 막 던지는 극단적인 정황 중심적 대화라고 볼 수 있습니다.
   쓰여진 글을 읽어보니 위와같은 피드백을 많이 받은 상태고 스스로도 그런 현실을 인지하고 계신 것처럼 보이는데, 그럼에도 불구하고 ""내 말이 맞고 다수가 틀렸다""고 주장하는 것을 넘어서서 ""나는 지금 옳게 대화하고 있는거고 이 업계가 지금 잘못 흘러가고 있다""라고 까지 주장하는 부분은 매우 이해하기 힘들었습니다.
   쓰신 내용처럼 회사는 유치원이 아닙니다. 그렇기 때문에 모든 조직원들에게 원만한, 그런 합의점을 찾아야만 합니다. 다수의 의견과 피드백을 무시한채로 ""내가 맞으니까 그렇게 하는게 맞아 나를 따라와""라고 주장하는건 유치원 선생님들이 부족한 아이들을 지도할 때나 하는 행동입니다.
   효율적으로 일하고, 논리적으로 말하는 것이 세상의 진리처럼 여겨지고 있는 이 시대에 필자가 쓴 내용은 공감과 지지를 얻기가 매우 쉽습니다. 하지만 저렇게 극단적인 대화법을 추구하는 사람들은 단언컨데 매우 쉽게 가는 길이며 커뮤니케이션 능력이 부족한 사람들입니다.
   정말로 높은 수준의 대화를 구사하는 사람들은 타인의 심리를 고려하면서도 본인이 원하고자 하는 바를 모두 전달하고 또 모두 얻어옵니다.

   댓글에 내용을 추가해서 다시 달았는데...
   이전 댓글 삭제가 안되는군요.

   삭제하였습니다. 댓글의 시간 부분을 클릭하시면 상세페이지에서 직접 삭제 가능하오니 참고 부탁드립니다.

   오 감사합니다.

   원글 및 이 글 모두...
   많은 경험과 통찰력에서 비롯된 글인 것 같네요.
   저의 의견을 피력하자면...
   자신이 몸 담고 있는 회사의 방향성에 따라 다르다고 생각합니다.

   누구나 ""산은 산이요 물은 물이다"" 와 같은 절대적인 진리를 설파하고 싶겠지만...
   우리가 사는 이 세상은 너무나 복잡다단하기 때문에 하나의 공식을 만드는 것이 그냥 불가능하다고 보면 됩니다.
   그리고 이 세상의 거의 모든 이론이나 분석은 결과론입니다.
   이러이러하므로 앞으로 이러이러할 것이다...
   라고 예측하고 싶겠지만 인간은 절대 그럴 수 없습니다.
   원글은 효율중심적인 관점이고 이 글은 좀 더 인간중심적인 관점이네요.
   어떤 쪽이 회사의 성공 가능성이 높을까요?
   아무도 모릅니다.
   그러므로 정답은 둘 다 아닙니다.
   상황에 맞게 해야 하고...
   그리고 결국 성공하려면 인간의 힘으로 얻을 수 없는 '운' 이 따라야 합니다.
   만약 몸담고 있는 회사가 치열하게 성공을 추구하지 않는다면 얘기가 또 달라집니다.

   참고로 많은 사람들에게 영감을 끼쳤던 스티브 잡스를 인성 파탄자라고 생각하는 사람도 많습니다.

   저는 다양한 의견과 관점을 접하는 것을 굉장히 좋아하는 입장에서 처음으로 여기에 글을 남겨봅니다.

   엄청난 필력 이시군요 !

   혹시 읽으신 서적중 추천해주실만한 것들이 있을까요?

   아 너무 공감가서 회원가입하고 공감하고 갑니다

   전하려는 의도는 공감이 되지만 저런 사람과 일을 하면 별로 같이 하고 싶을것 같지는 않네요.

   “내가 듣기 싫은 말”이라는 이유로 ""점심 맛있게 드셨나요"" 와 무의미한 관용구를 동일시...

   무얼 말하고 싶으신지 짐작은 가지만 여러 면에서 엇나갔다는 생각이 듭니다. 매우 아쉽네요.

   geeknews에서 요약한 부분만 보면 일부 공감하지만,
   본문을 보면 예의와 존중이 없는 어그로꾼 같다는 생각 밖에 들지 않습니다.
   분명하게 말하는 것과 예의를 지키지 않고 존중하지 않는 것은 다릅니다.

   비아냥과 공격적인 말투로 대응하는 것이 감정을 배제하고 분명하게 표현한다고 생각하지는 않습니다.
   우선 본인이 말씀하시는 부분을 본인이 잘 지키고 있는지 성찰하는게 필요할 것으로 보입니다.

   본문 링크 들어가보니까 그냥 화나서 쓴 수준 낮은 글인 것 같습니다. 내용과 너무나 모순적이고요.

   안녕하세요~ 점심 맛있게 드셨나요~
   미스커뮤니케이션 줄이고 ASAP 하게 팔로우업 해주세요. :blush:

   글 내용을 이해한 결과 : 커뮤니케이션을 디씨인사이드化 하자.
    1. 전하려는 의도에 공감합니다.
    2. 솔직함과 정직함의 차이에 대해 다시 한 번 생각해보았습니다.

     * 김소연의 마음사전 중에서 ""솔직함과 정직함"" https://brunch.co.kr/@ym2066/150

   개인적으로 동의는 하지만 참 어렵습니다.

   글 내용처럼 직설적으로 말하는게 좋지만

   이게 조절을 제대로 하기가 어려워서 오래 지나면 또 이거 나름대로 안좋게 작용하기도 하고..

   그렇다고 맨날 ""안녕하세요~"" 등등 하면 글쓴이의 말처럼 불필요하고..

   적당히 밸런스를 맞추어야 하는데 쉽지가 않죠.

   낚시 기사제목이 생각나는군요, 댓글은 흥했어요
   광고만 넣으면 완벽합니다 👍🏼

     한때 트위터를 휩쓸던 “독성 말투” 나 “스타트업 방언”도 비슷한 관점에서 한국에서는 그 원래의 의미 (비합리적 이거나, 문제해결에 도움이 되지 않거나, 작업물이 아니라 개인의 인격을 공격하는) 를 상실해버리고 그냥 “공격적으로 느낄수 있는 말은 다 잘못된거니 하지말자"" 식으로 퉁쳐저 버리더군요.

   이 단락이 전혀 공감이 안 되네요.

   너무 공감이 잘됩니다

   공감이 되신다면 사례라도 들어 주세요. 본문이나 이 댓글이나 근거가 전혀 없군요.

   처음으로 엔지니어링 리드를 맡았을 때의 저를 보는 것 같군요.

   모호한 커뮤니케이션으로 전달되어야 하는 내용이 전달되지 않는 것은 분명히 문제인 것은 맞지만,
   세상에는 여러 종류의 사람들이 있고 다른 사람의 감정을 해치지 않는 것이 중요한 사람들도 있고, 잘못에 대한 직접적이고 공개적인 지적은 생각보다 자주 그 사람의 감정을 건드리게 됩니다.
   결국은, 커뮤니케이션을 통해서 어떤 행동의 변화를 만들고 싶은 것이 궁극적인 목표이기 때문에,
   상대의 성향과 상황에 따라서 어떤 방식의 커뮤니케이션을 해야할까를 고민하는 것이 중요한 것 같습니다.

   제목만 보고선 스타트업 문화라던가 혹은 실수할 수 있는 내용들을 적은 것인가 해서 들어왔는데, 댓글들이 많길래 해당 글 읽고 댓글 답니다.

   음.. 그냥 글쓴이가 화나서 글 쓴 것 같아요. 오타나 잘못된 용어는 넘어가더라도, medium이 블로그의 연장선이구나 생각든 글이네요. (개인적으론 medium은 조금 전문적인 기고 글들이 올라오는 곳으로 이해하고 있습니다.)

   사실 회사 용어 혹은 오피스 용어라는 것은 없었다만, 요 몇 년 사이에 유튜브나 다른 블로그들에게서 오피스 용어라고 정리된 글들이 올라오는 것을 봤었습니다.

   약간 억지스러운 면도 많았지만(굳이 영어 아니어도 되는 말들..), 그 외엔 해외에서도 곧잘 쓰는 표현들이라 거부감은 없었죠. 다만, 약간의 허세가 들어간 상황 들에서 나온 말들이 많았어요. 이 글을 쓴 분도 그런 것을 느낀 것 같지만, 저는 그게 MZ 세대들의 특징으로 보고 있습니다.

   제가 그 나이때에, 그 직책에 있었을 때, 저런 말을 썼을까? 생각했지만, 그렇게 많이 쓴 적이 없었습니다. 요즘은 엘리베이터 내에서 들리는 말 들에서도 영어/한국어가 섞여서 희한한 문장들이 오고 가는 것을 듣곤 합니다. 속으론 조금 웃겼는데, 그들은 너무나도 진지하기에.. 트렌드 아닌 트렌드인가? 싶었네요.

   글쓴이처럼 느껴진 부분도 있었지만, 아직 좀 더 사회 경험이 필요하다고 생각됩니다. 글쓴이를 모독하고 싶은 생각은 없지만, 그 불필요한 것들이라고 생각 되는 말들이 말의 온도를 조절하게 되는 역활이 되는 것을 느끼는 날이 오게 될 것이라 믿습니다.

   (물론 쓸데없이 영어/한국어를 합치는 문장은 사라져야겠지만 ^^)

   굳이 이야기하자면 ""니즈"" 라던가 VoC 같은 비즈니스 영단어도 오래 전 부터 남발되긴 했습니다.
   지금 MZ 세대 가 아니여도 공구리 등 각종 일본어에서 유래된 건설 관련 용어들만 보면 우리가 오래전 부터 외래어로 된 업계 용어들은 많이 써왔던거 같아요.
   저는 우리가 비즈니스 관련 용어들을 주로 해외 번역서를 통해서 배우는데 그 영향이 있지 않을까 추측해요.

   공감가는 부분들이 있긴한데, 중간중간 굉장히 공격적으로 표현된 부분들이 있네요;;

   몇 가지 공감가는 취지의 내용이 있습니다만은 나머지 내용은 그냥 사회화가 덜 된게 아닌가 싶은 내용들이 더러 있네요. 일단 제목부터 망치고 들어가지 않았나 싶습니다.

   쓸데없는 말을 줄이고, 정확하고 간결한 의사소통을 하자는 주장에 굉장히 동감합니다.

   의사소통도 결국 몸담고 있는 산업/시장에 따라 결정되지 않나 싶어요. 비교적 실패에 대한 리스크가 적고 자율성이 보장되는 IT 산업의 소통방식과 철강/선박 같은 대규모 제조업에서의 소통 방식은 다를 것 같고, 각각의 방식이 갖는 장단점이 발휘되는 방식도 다를것 같네요.

   안정적인 현금흐름이 없고 오늘내일을 걱정하는 스타트업에선 직설적이고 딱딱한 소통이 생존에 더 유리할 것 같은데... 이와 관련된 연구가 있는진 모르겠네요.

   고전 속담중에 ""말 한마디가 천냥 빚을 갚는다"", ""가는 말이 고와야 오는 말이 곱다""라고 하죠.

   커뮤니케이션은 상호 작용이기 때문에 무조건 어느 한쪽만의 잘못이라고는 할 수 없습니다.

   의미 전달이 불분명한 단어의 사용은 줄여야 하겠지만,
   본인의 아무런 의도가 포함되어 있지 않는 메세지에 상대방이 있지도 않은 의도를 발견하고 자주 과잉반응을 해온다면 그리고 그런 사람이 한사람이 아니라 여러사람이라면 본인의 문제가 아니다라고 단정하기는 쉽지 않겠죠.

   많은 분들이 불편해 하시는 거 같은데 굳이 이런 글을... 비슷한 내용의 더 좋은 글들도 많을 거 같은데요

   불필요한 언어를 줄이자라고 말하는 글 치고 덕지덕지 내용이 많네요.

   인간은 기계가 아닙니다. 기계가 아니기 때문에 단순 편의성만 찾을 순 없습니다.
   사람 인에 사이 간을 써서 인간인데, 인간관계를 위한 기본적인 것도 안하는게 말이되나요?

   한국 스타트업이 개판인 이유가 댓글에서 보이네요. 응석쟁이 MZ세대들

   해당 글쓴이도 MZ세대입니다만...

   취지는 상당히 이해되고 불분명한 영어 단어 사용은 저도 적극 공감하는 바 지만...제목 좀;;
   제목이 글의 설득력을 망쳤어요.
   제목부터 매우 공격적인데 피드백을 인신공격으로 받아들이지 말라니;;

   ""유치원""생 같다는 무신경하고 공격적인 피드백 하는 사람이 자신은 이성적이라고 자기 변호하는거 같아요;;

   내용 자체는 맞는 말입니다만...
   인간은 사회적 동물이니 다른 사람과의 관계도 중요하게 생각해야겠지요
   확실히 의사소통이라는 것은 어렵습니다

   공감 가는 부분이 더 많긴한데..

   원글에 댓글 처럼...
   공감이 많이 안가는 부분도, 가는 부분도 공존하는 혼란한 글이네요.

   직설적으로 말하되 듣는 상대방의 기분도 어느정도 신경써주는게 참 어려운 것 같습니다

   “내가 듣기 싫은 말”이라는 이유로 인신 공격과 작업물에 대한 평가를 동일시
   vs
   “감정상해서 의욕이 없어질까봐"" 돌려 말하지 말자

   +1

   메시지에 대한 비판을 하셔야지 메신저에 대한 욕은 하지 맙시다.

   글 내용이 '정확하고 간결한 의사소통을 하자'랑 '내가 나쁜게 아니야!' 가 섞여있어서 이런 반응이 나오는 것도 자연스러운 것 같습니다.

   메신저에 대한 ""욕""을 하지 말자는건 글 내용과는 별개입니다.
   여기 반응도 그렇고 트위터의 반응도 그렇고 굉장히 감정적으로 글쓴이를 욕하는 분들이 많던데, 애초에 공격적인 말을 하지말자고 주장하던 사람들이 발벗고 나서서 공격적인 말을 하는게 모순적이지 않나요? 제품 뒤에 사람 있다고 외치더니 메시지 뒤의 메신저는 사람이 아닌가보군요

   옳은 말씀입니다만 자연스러운 반응인 것도 사실입니다. 글이 공격적인만큼 감정을 자극하고 공격적인 반응으로 나오는건 어쩔 수 없는 것 같아요. 주변에 이런 분이 계시면 자기변호적인 내용들이 더 화나게 할 수도 있겠죠. 잘했다는 건 아닙니다. 글쓴이는 부정했지만, 사람은 감정적인 동물이니 어쩔 수 없는 현상이라 생각합니다.

   그렇다고 욕을 해도 된다는 말씀은 아닌거같은데
   욕은 하지 말자는 댓글에 달릴 답글은 아닌 것 같습니다

   제대로 이해했다면 이런 반응이 나올 수가 없는데

   이분 답글에서는 계속 선민의식이 느껴지네요.
   ""나는 이해 했으나 너는 하지 못했기 때문이다.""
   글쓴이 본인일지도?

   제대로 이해하신분께서 『기술 업계의 독성 말투 문제, 고칩시다!』 링크의 '거들먹거리는 말투'를 제대로 반응하고 계시면 곤란합니다 ㅋㅋㅋㅋㅋ
"
"https://news.hada.io/topic?id=6829","YaLM 100B - 1000억개 파라미터의 GPT-like 언어 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                YaLM 100B - 1000억개 파라미터의 GPT-like 언어 모델

     * Yandex가 공개해서 개발자/연구자 누구나 무료로 사용 가능
     * 영어와 러시아어 1.7TB 텍스트를 800대의 A100 GPU로 65일간 훈련
     * 마이크로소프트의 Megatron-LM 코드 기반
"
"https://news.hada.io/topic?id=6769","Tauri v1.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Tauri v1.0 릴리즈

     * 웹 프론트엔드 스택을 이용해 데스크탑 앱을 개발할 수 있는 툴킷
     * Electron alternative: 더 작은 번들 사이즈와 적은 메모리 사용량
     * 각 플랫폼의 WebView2, WebKit, WebKitGTK를 사용
     * 모바일 지원 예정

   Wails도 똑같이 네이티브 렌더링 엔진을 사용합니다.

   Wails - Go 사용 데스크톱 응용 프로그램 개발 프레임 워크

   Electron의 제대로된 대안이 될 수 있으면 좋겠네요.
     * Tauri - 작고 빠른 실행파일을 생성하는 데스크탑용 웹앱 프레임워크
"
"https://news.hada.io/topic?id=6864","Kaluma - A Real Javascript Engine for MCU","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Kaluma - A Real Javascript Engine for MCU

     * MCU에 Jerryscript를 포팅해서 Javascript로 MCU내부에서 동작하는 펌웨어 개발이 가능한 프로젝트
          + 많은 프로젝트들이 외부에서 컨트롤하는 형식 (http://johnny-five.io 같은 프로젝트) 으로 개발되고 있어서 Real Firmware라고 하기 힘듦
          + 이 프로젝트는 MCU에 JS 인터프리터와 함께 코드가 업로드되는 리얼 펌웨어
     * 메인 개발자가 한국인.
          + 이 개발자는 StarUML의 메인 개발자이기도 함.

   [장점]
     * 다양한 외부 기기의 드라이버를 지원함
       (I2C, GPIO, SPI, DAC, PWM 등등)
     * 웹으로 통합된 IDE 제공
     * CLI도 지원해서 원하는 개발툴에서 개발 가능
     * 다양한 예제와 프로토타입이 함께 공개되어 있음.
     * 아이들 교육용으로 매우 적합

   [단점]
     * 초창기에는 STM32를 지원했는데, 지금은 RPI2만 지원.
     * 보다 다양한 MCU 시리즈로 포팅되면 좋을 듯.
     * ESP32만 추가로 지원해줘도 좋을것 같음.

   https://kalumajs.org/
"
"https://news.hada.io/topic?id=6896","M2 MacBook Pro 분해는 우리가 항상 의심했던 것을 확인시켜줍니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               M2 MacBook Pro 분해는 우리가 항상 의심했던 것을 확인시켜줍니다

     * M1 MBP에서 칩만 M2로 교체하고, 일부만 수정한 것으로 섀시, 디스플레이, 터치바 및 레이아웃이 거의 동일함
     * iFixit에 의하면 케이블, 나사, 접지핀 등도 모두 동일
     * 하지만, M2 보급형 모델의 SSD는 구성이 달라서 M1 모델보다 느림
     * 이론적으로 M2 보드를 M1 MBP에 이식하면 동작해야 할것 같지만, 동작하지 않음
       → ""애플이 소프트웨어 락으로 수리 및 교체를 막으려는 것""

   모듈형 노트북, Framework Laptop 공개
   새롭게 업그레이드 된 Framework Laptop 발표

   뭐 애플은 당연하겠지만.. 인텔 11세대에서 12세대로 업그레이드 가능하게 해준 Framework 랑 많이 비교되네요. ㅎㅎ
"
"https://news.hada.io/topic?id=6859","DALL·E Mini·E Mini

     * 텍스트에서 이미지를 생성하는 OpenAI DALL·E의 오픈소스 구현체
     * VQGAN, BART, CLIP 등 기 훈련된 모델들을 적극 이용해서 비용을 줄이고 최적화해서 구현
     * 모델은 계속 훈련해서 개선 및 업데이트 중 ( DALL·E Mega)

   (건의) 혹시 링크는 새창으로 띄워주시면 안될까요?

   DALL-E 2는 어떻게 동작하는가?
   DALL·E 2 공개
   DALL·E : 텍스트에서 이미지 생성하기
   DALL·E 로 해볼만한 것들

   이 Mini 기반으로 만든 앱인 https://www.craiyon.com/ 이나
   플레이그라운드 https://github.com/saharmor/dalle-playground 로 테스트 해보기 괜찮습니다.
"
"https://news.hada.io/topic?id=6807","WarcDB - Web crawl data as SQLite DB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WarcDB - Web crawl data as SQLite DB

     * 웹 크롤링한 데이터를 SQL로 쿼리하기 쉽게 만든 SQLite DB 기반 파일 포맷
     * wget 및 WebRecorder 등에서 사용하는 표준 Web ARChive (.warc) 파일을 .warcdb 로 import 가능
     * sqlite-utils 명령어를 그대로 사용

wget --warc-file tselai ""https://tselai.com"";
warcdb import archive.warcdb tselai.warc.gz

// 모든 reponse header 가져오기
sqlite3 archive.warcdb <<SQL
select  json_extract(h.value, '$.header') as header,
        json_extract(h.value, '$.value') as value
from response,
     json_each(http_headers) h
SQL
"
"https://news.hada.io/topic?id=6799","Localhost 시대의 종말","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Localhost 시대의 종말

     * 미래에는 모든 개발은 로컬호스트가 아닌 '클라우드'에서 진행되고 노트북은 클라이언트에 불과할 것
     * 2030년대의 개발자 위시리스트를 적어보면
          + 저렴한 기가빗 인터넷(5G/Mesh WiFi)
          + 몇일 가는 배터리를 가진 저렴한 개발머신
          + 앱은 규모에 상관없이 몇초만에 빌드되고, 테스트와 스테이징 환경이 키입력하자 마자 바로 실시간 라이브됨
          + 개인 개발환경은 어떤 기기를 쓰는가와 상관없이 나랑 같이 여행가능
          + 앱의 환경적인 종속성(HTTPS 인증서부터 프로덕션DB의 샌드박스된 포크까지 모든 것들)은 기능을 개발하고자 하는 모든 팀원에게 즉시 제공됨. 문서도 Runbook도 필요 없이
          + 아이디어부터 고객에게 제공되기 까지 일주일 만에 가능 (로우코드 빌더와 Backends-as-a-Service 를 사용해서)
          + MVP에서 유니콘까지 몇주만에 성장 가능 : 서버리스 및 '새로운 Heroku'같은 플랫폼들을 이용. 인증/결제/DB/커뮤니케이션들은 월드클래스 SaaS를 통해서 처리
     * 위의 것들은 대부분 로컬호스트가 아닌 ""클라우드""에서 실행하는 것을 필요로 함

     브라우저가 운영체제를 ""잘 디버깅되지 않는 디바이스 드라이버의 집합""으로 축소시켰다면
     클라우드는 개발머신을 ""잘 관리되지 않는 모의 환경(Environment Mocks)의 집합""으로 축소시키고 있음

""Future is Just Not Evenly Distributed""

     * 개발자 생산성을 높이기 위해 투자한 큰 회사들은 이미 클라우드에서 일하고 있음
          + Google Cider : 구글의 웹 IDE. 거대한 Piper 파일 시스템을 탑재하고 코드리뷰/빌드/테스팅을 통합. 로컬머신에 코드를 내려받을 필요 없음
          + FB On-Demand : 로컬보다 더 충실하게 실시간 기능 프리뷰가 가능하게 ""On-Demand""로 환경을 프로비저닝. FB에선 ""로컬 개발"" 자체가 없음
          + Etsy : 모든 개발이 Cloud VM에서 진행 ""VSCode가 VM으로 SSH해서 동작하기 때문에, VM 외부로 코드를 체크아웃 해본 적이 없음""
          + Tesla : 자동차 OS 개발을 로컬에서 클라우드로 전환 (그 전엔 개발자에게 빌드용 비싼 데스크탑을 제공했었다고)
          + Palantir : Coder(리모트 개발환경 SaaS)와 EKS를 사용하는 Remote Ephemeral Workspace로 옮겨감
          + Shopify : 대부분의 개발자가 Spin 이라 불리는 클라우드 개발환경으로 이전 (xhyve 위에서 실행되는 경량 VM)
          + GitHub : 깃헙의 개발의 대부분을 Codespaces로 이관
     * 얘네는 큰 회사니까.. ""작은 회사에도 적합할까?"" 라는 질문이 따라옴
       → 답변은 ""아마 가능하겠지만, 그러나 아마도 현재의 형태로는 아닐 수도 있음""
       → 이런 대부분은 상당한 내부 투자가 필요하고, 기존의 내부 인프라를 활용했기때문에 가능
       → 하지만 이런 기술이 상품화 되고, 고객군 간의 공통점이 발견되면서 점점 더 많이 확산 될 것
     * Preview 환경을 상품화 하는 것은 이미 만들어졌음
       → Netlify의 초기 혁신은 프론트엔드 프로젝트를 미리보기 할수있도록 디플로이 가능하게 만든 것
       → 거의 모든 문서 사이트들은 이제 일종의 Deploy Preview 시스템을 사용하며, Jamstack 앱은 릴리즈 프로세스에도 사용 가능

Jobs to Be Done of Localhost

     * 로컬 개발시에 일어나는 일들은 이제 공격을 받고 있음
          + 원격에서 코드를 수정하고 실행 : GitHub Codespaces, Replit, Code.com, CodeSandbax, GitPod
          + 원격서버에서 실행하지만 로컬에서 코드를 수정 : VSCode + Azure VM/Amazon Workspace, Jetbrains Fleet, Okteto Sync
          + 브라우저내의 경량 JS Container에서 코드를 수정하고 실행 : Stackblitz
          + 코드를 원격 실행 : Bret.dev
          + 스테이징 : Planetscale Branches, Stripe Test mode keys, Railway Ephemeral Environments, Okteto environments, Coherence workspaces

Pushback: It's Still Not Good Enough

     * 충분히 좋지는 않으므로, 아직 흥분하지 말것
     * 이 ""로컬호스트를 죽이는 것""이 성공하려면 프로비저닝 자체가 필요없어져야 함
     * 사람마다 다르겠지만, 나는 작성한 코드의 Preview를 시작하는데 10초가 걸리는 것도 너무 길다고 느낌
     * Netlify Drop 으로 프론트엔드 프리뷰를 배포하는데는 1초가 걸리지만, Netlify CLI는 10초가 걸림
     * 하지만 아직 습관적으로 로컬호스트 개발환경을 사용중 : 내 반복주기가 밀리세컨드 단위 이기 때문에
     * 이 레이턴시 문제는 무어의 법칙이 클라우드 인프라에 적용되는 것과 비슷
     * 지금 충분하지 않다면, 5년 후에 다시 한번 볼 것

   랩탑의 역할은 정말 터미널 + 회의용 머신이 된것 같습니다. ARM기반의 밧데리 20시간 이상 가는 크롬북이 이상적인 랩탑이 되어가고 있는것 같습니다.

   이렇게만 된다면 너무 좋겠지만, 지금 가상 환경 클라우드 도입한 회사들 상황은 개발자에게 8GB memory, 4 cpu 사양의 환경을 강제하고 있죠(사정 사정 하면 겨우 16GB). 현실과 이상의 괴리가 너무 심각하죠.

   GitPod에서는 로컬 VSCode에서 편집하는 것도 지원합니다. 써보면 정말 seamless 합니다 (터미널 타이핑이 약간 밀리고, 폴더를 펼칠 때 약간 굼뜬 정도 빼고는 경험이 차이가 없어요)

   텐센트도 한다는데 놀랍습니다. https://zdnet.co.kr/view/?no=20220620003628

   워크스테이션의 시대가 오는 걸까요...

   태블릿은 지금보다 더 각광받겠군요.

   개인적인 프로젝트는 가능하면 클라우드 기반에서 개발하도록 옮기고 있지만 IDE 만으로는 한계가 있는 것 같아요. 레이턴시도 개선되면 좋을 것 같고 사용하는 간편 도구들도 모두 자유롭게 쓸 수 있는 환경이 필요하거나 어떤 보완적인 접근법이 필요할 것 같아요. 윈도우즈, 맥, 리눅스, VR 기기 안 가리고 같은 개발 경험으로 지속적으로 개발 할 수 있다면 정말 좋을 것 같아요. 마치 현재 엑스박스 게임같이 로컬의 장점, 클라우드의 장점이 있어서 바로 한가지 방법을 추구하기 힘든데 당연히 클라우드로 모두 가지 않을까요.

   개인적으로는 레이턴시 문제 등을 고려하면 WebContainers처럼 로컬 머신에서 컨테이너화된 풀스택 환경을 띄워서 개발하고, 그 결과물을 클라우드에 저장 및 반영하는 그런 방향이 되지 않을까 생각해 봅니다. 본문에 나온 것 중에서는 StackBlitz 같은 것이 있겠네요.

   localhost의 종말이라고기 보다는 thin client의 재림...이라고 봅니다.

   편의성으로 시작해서, 나중엔 보안때문에...로 흘러가지 않을까 싶네요.

   전체 번역은 아니고 요약을 한것이니 원문도 보시기 바랍니다.

   글 말미에 사람들의 반응 정리 부분에서, ""Reddit / HN 에선 모두가 이렇게 되는 것을 싫어한다"" 라고 했는데..
   저는 충분히 가능한 미래라고 상상이 됩니다. 물론 가는 과정중에는 ""로컬 코드 편집 + 리모트 VM에서 실행"" 이 섞여 가겠지만
   클라우드에서 로컬 코드 편집 수준의 레이턴시가 어느 정도 보장만 된다면, 대부분의 회사가 이걸 선택할 것 같아요.

   저도 그렇지만 Reddit과 HN에서는 '내 기기에 내 데이터' 를 사랑하시는 분들이 많아서 그런 것 같아요. 저도 제 데이터에 대한 통제권을 놓고 싶지 않아서 클라우드 IDE는 예제 코드 짤 때만 간간히 쓰게 되더라고요.
"
"https://news.hada.io/topic?id=6785","Anonfriendly - 익명으로 일할수 있는 직업 찾기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Anonfriendly - 익명으로 일할수 있는 직업 찾기

     * 자신의 개인정보를 공개하지 않고 일할 수 있는 Job들 리스트 사이트
     * AE Studio, Flashbots, LooksRare, Paradigm, DefiLlama, Yearn 등
     * 직접 구인공고 등록 가능

   안녕하세요! 저는 이 웹사이트의 제작자입니다. 공유해 주셔서 감사합니다.

   이 댓글을 작성하기 위해 Google 번역을 사용하고 있습니다. 나는 당신이 웹 사이트를 흥미롭게 알게되어 매우 기쁩니다. 나는 당신이 가지고 있는 모든 질문에 답하기 위해 여기 있습니다.

   진짜 사이트 제작자 인가요?

   흠.. 이게 가능할까? 싶은데요..
   일한 것에 대한 보상은 암호화폐로 받으면 익명은 가능할 듯 한데..
   회사가 보상을 준다는 것은 어떻게 보장하죠?

   보통의 경우에 에스크로 컨트랙트에 지급할 암호화폐를 미리 예치하여 지급합니다.
   컨트랙트 코드가 제대로 작성되어 있다면 어느정도 보장이 되지요.

   지급 주체도 한 명이 결정하는 것이 아니라 다수의 서명자들이 동의하여 지급하게 됩니다.
"
"https://news.hada.io/topic?id=6837","OpenCost - 쿠버네티스 비용 모니터링 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      OpenCost - 쿠버네티스 비용 모니터링 도구

     * 여러 클라우드에 걸친 쿠버네티스 비용 및 자원을 트래킹 해서 표시
     * K8s Namespace, Label, Statefulset, Daemonset, Pod, Container 별 실시간 비용 조회
     * AWS, Azure, GCP Billing API를 이용해 동적 가격 책정 적용
     * On-Prem K8s 클러스터도 지원(자체 가격표 설정)
     * CPU/GPU/메모리/볼륨등 클러스터 자원 할당 가능
     * 가격 데이터를 Prometheus로 Export 가능

   Stack Watch의 제품이죠..
   여기 CTO가 구글 클라우드 초기 개발자 였는데... 고객사들이 과금 관련한 문제가 많은 것을 보며 이 제품을 만들었다고 하네요.
"
"https://news.hada.io/topic?id=6821","Ask GN: 저번 달에 어떤 것들을 해내셨나요? (5월)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask GN: 저번 달에 어떤 것들을 해내셨나요? (5월)

   PMIDI, Previous Month I DID IT입니다. 저번 달에 어떤 것들을 해내셨나요? 혹은 어떤 기쁜 일이 있으셨나요? 생각보다 더 훌륭했을 저번 달의 자신을 돌아봅시다!

   으헛... 이번 달에 이런저런 일들로 바빠서 올리신걸 놓쳤었네요 ;ㅁ;
   저는 jekyll 플러그인에 PR을 올렸고, merge까지 되었습니다!

   사실 ruby는 전혀 쓸 줄 모르는 상황에서 jekyll로 만들어진 사이트에 기능을 추가하고 싶었는데요,
   왠지 한참을 기다려야 할 것 같아서 이슈 올리고, 버벅거리면서 PR을 만들어 올렸더니 메인테이너분께서 친절하게 하나하나 가르쳐주시면서 떠먹여주셔서 성공했습니다 ㅎㅎ

   https://github.com/jekyll/github-metadata/pull/234

   필요한 기능이었던지라 매일 새벽 github actions로 잘 돌아가는 것을 보면서 아직도 뿌듯해하고 있습니다!!

   크으. 멋지시답니다. 'ㅁ 'b 오픈소스에 기여를 하시다니. 제가 매번 꿈꾸던 일인데, 시간 관리를 좀 더 잘하여 어떻게서든... 해봐야겠답니다.

   Ruby는 처음 쓸 땐 python과 비슷하면서도 뭔가 괴상한 이터레이터가 많은 언어(... ) 라고 생각했는데. 생산성이 정말 좋더라고요. 멋진 경험을 하신 것 같아 부럽답니다.

   저도 항상 생각은 하고 있는데... 잘 안되더라고요ㅠ
   지난 달(벌써!)에 짬을 내어 자체 플젝을 하나 시작했는데 언제쯤 쓸만해질지는 모르겠습니다;;;
     * 디자인 패턴 스터디를 운영했었는데 아쉬운 듯 무사히 잘 마무리 했습니다.
     * 지인의 아이가 아픈데 지정헌혈을 했습니다.
     * 간헐적 단식, 달리기, 가벼운 몸운동을 계획대로 해냈습니다.

   스터디를 끝맺치시다니. 대단하시네요. 저는 끝까지 유지하는 게 참 어렵기도 하고, 고정된 약속에 무언가 불안감을 느껴서(... ) 시작을 잘 못하고 있는데. 요즘은 컴파일러 개발자가 알려주는 C 이야기라는 책으로 스터디를 하고 있답니다. 3주차인데, 저도 잘 끝맺었으면 좋겠네요.

   몸관리가 멋지시네요! 신체 관리는 계획대로 하는 게 참 어려운 것 같아요. 꾸준한 습관만이 살 길인 것 같은데. 특히 식단쪽이 제일 힘드네요. 제가 이번년도 건강검진때 고지혈증을 받아서... 어떻게든 해야할 것 같은데..

   지정헌혈을 해주시다니. 멋지세요. 꼭 아이분께서 쾌차하셨으면 좋겠습니다.
     * 소설을 10만자씩 꾸준히 적고 있습니다. 그리고 저번달에도 그걸 해냈군요!
     * 회사에 프로토타입을 제출했고, 프로토타입만 만드는 방을 만들었습니다. 멋진 걸 자유롭게 연구하는 채널이 만들어졌어요!
     * 취미로 만든 사이드 프로젝트가 이제 같은 회사에 다른 프로젝트 팀에도 정착되었습니다. 'ㅁ '!
     * 아주 귀찮고 복잡하며 기다려야 했던 작업을 시각적이고 즉각적으로 수정할 수 있는 에디터를 만들어서 제공해드렸어요. 아주 좋아해주셔서 기뻤답니다.
     * Python + ImGui로 간단하게 YouTube Music에 API를 하나 쏴서 리스트를 받아오는 걸 짜봤어요. 신나네요
     * 2022년이 중간이나 지나서 개인적인 중간 감사 보고서를 썼답니다.

   5월의 저도 훌륭하게 버텨줬네요. 다음부터 이 글은 매월 1일에 적어야겠답니다.

   소설이라니.... 엄청나시네요! :+1:
   저도 뭔가 써야겠다는 생각은 종종하는데 결국은 iOS 기본 노트 앱에 몇 자 끄적이다 말게 되더라고요.

   혹시 꾸준히 글을 적으실 수 있는 비결 같은게 있으실까요?

   5월도, 그리고 오늘까지인 6월도 고생 많으셨습니다!
    0. 하늘이 무너지더라도 매일 1000단어를 쓰겠다 라는 각오로 아무거나 썼습니다.
    1. 그러다보니 1화가 나와서, 글을 잘 보실 것 같은 분에게 리뷰를 요청드렸습니다.
    2. 그분에게 정기적인 리뷰를 요청드렸고, 2주마다 봐주신다고 하셨습니다.

   요 3가지가 섞여서 글을 계속 적게 된 것 같아요. 매일매일 하는 일은 매일매일 하는 나날이 길어질 수록 쉬워지고, 저는 다른 분과 하는 약속을 못 지키는 것에 많은 압력을 느끼며, 약속이 정기적으로 잡혀있어 명확한 데드라인이 있어 무한 폴리싱후 폭사(...) 함정에 빠지지 않을 수 있었습니다. 2주마다 글을 봐주시는 분에게는 정말 압도적인 감사함을 느끼고 있어요. 1년이나 됐는데...

   5,6월도 고생 많으셨습니다! 다음 달에도 뵈요! 'ㅁ '!

   와... 1년 씩이나 글을 봐주실 수 있는 분이 주변에 계시다니, 부럽습니다. +_+
   5, 6월도 고생 많으셨습니다. 벌써 올해도 절반이 지나갔네요.
   7월도 화이팅하시죠 ^^

   엄청나게 알찬 한 달이셨군요.

   정작 5월 내내 아아... 너무 생산성이 떨어지고 있어... 시간을 낭비하고 있는 것 같아... 라는 생각이 늘 들었답니다(...

   와 5월을 훌륭하게 보내셨네요! 👏

   감사합니다 'ㅁ '/ 다음 달에는 GN에도 더 기여하고 싶어요!
"
"https://news.hada.io/topic?id=6775","Ask GN: 부업하시는 분들 많으신가요 ??","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: 부업하시는 분들 많으신가요 ??

   저는 5천 라인 이하 규모의 개발 부업과 전문 IT 교육기관의 강사/멘토 부업을 주로 하는데요..

   멘토 아르바이트가 나름 재미있고 감동 포인트도 있어서 한때 전직도 생각해봤었죠.

   혹시 여러분들은 부업들 많이 하시나요 ??

   어떤 부업들을 하시나요 ??

   저는 요즘은 따로 안 합니다만.. 예전에 본 직업외에 이런 것들을 했습니다.
    1. 블로그 및 여러 웹사이트 만들어서 애드센스 운영
    2. 어필리에이트 : 아마존 및 원어데이,쿠팡,티몬 초기 시절
    3. 각종 강의, 멘토 및 심사위원
    4. 최근에 유튜브 채널 수익화 가능해질 때까지 조금 해보다가 너무 공수가 많이 들어서 일시 중단

   요즘 재택근무 때문에 부업 하는 사람들이 더 많이 늘어났다고 들었네요.
   그래서 회사 복귀하라고 하면 안하고 퇴사러쉬가 더 많이 난다고..
"
"https://news.hada.io/topic?id=6812","스택오버플로우 2022년도 전반기 설문조사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        스택오버플로우 2022년도 전반기 설문조사
"
"https://news.hada.io/topic?id=6869","대량의 tolower()를 빠르게 수행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        대량의 tolower()를 빠르게 수행하기

     * DNS서버는 종종 도메인명을 소문자로 변환해야 함
     * BIND는 기존 DNS값을 보존해야 하기 때문에 좀 더 작업이 필요함
     * SWAR를 tolower()에 적용해 보기로 함
       → SIMD within a register : 하나의 명령어로 레지스터 안에서 여러 데이터를 병렬 연산 하는 것
     * uint64_t 에 넣은 8개의 ASCII 문자를 처리하는 tolower8 함수를 생성
       → 구현한 C 코드의 각 라인당 설명은 원문 참조
     * 성능

    0.098 ms memmove() copy
    0.399 ms tolower8() copy
    1.817 ms tolower() copy
    0.280 ms tolower8() compare
    2.090 ms tolower() compare
"
"https://news.hada.io/topic?id=6783","리액트 오픈소스 어워드 2022","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           리액트 오픈소스 어워드 2022

올해의 혁신

     * jotai (atom 기반 상태관리 라이브러리)
     * remix (next.js와 비슷한 풀스택 프레임워크)
     * refine (빠른 프로토타이핑 가능한 기본 세팅 프레임워크)
     * wagmi (이더리움 연동 hooks)
     * preview.js (파일단위 컴퍼넌트 visual studio extension 통해 렌더링)

가장 흥미로운 기술 사용

     * Remotion (비디오 제작 및 렌더링)
     * React Flow (노드 연결 에디터)
     * react-native-tvos (애플, 안드로이드 티비 지원하는 리액트 네이티브)
     * React Unity WebGL (유니티 임베딩/인터랙션 지원)
     * Jest Preview (브라우저에서 테스트 결과 바로 확인)
     * Web3 React (웹3 지원)

올해의 재미있는 사이드 프로젝트

     * Cuberun (react-three-fiber로 만든 3d 장애물 회피 게임)
     * Tetromino (React, Redux and Tailwind로 만든 테트리스)
     * Corona Game (react-three-fiber로 만든 코로나 때려잡는 3D 게임)
     * Heart Switch (❤️ 하트 모양 토글 컴퍼넌트)
     * LBA2 Remake (Typescript, Three.js and React로 게임 A little big adventure 리메이크)

커뮤니티에 대한 가장 영향력 있는 기여

     * ReactJSGirls (여성 중심 리액트 개발자 밋업 트위터)
     * React Newsletter (리액트 뉴스레터)
     * React Native Radio (팟캐스트)
     * Poimandres (React Spring, React Three Fiber 생태계 유지보수 개발자 집단)
     * Reactiflux (디스코드)

생산성 부스터

     * Mantine (라이브러리 모음 레포)
     * React Use (훅 모음 레포)
     * Superplate (각 프레임워크 선택해 초기 세팅 하는 보일러플레이트)
     * React Uploady (파일 업로드 라이브러리)
     * React Virtual (엄청 많은 리스트 스크롤 최적화 라이브러리)

   --
   리액트 사용자로 모르고 있던 라이브러리가 많아 1시간 동안 다 들어가보고 정리했습니다. 긱뉴스 항상 눈팅만 하다 처음 올려봅니다. 항상 감사드립니다. 🙏🏽

   Jotai 정말 만족하면서 쓰고 있습니다

   Mantine 진짜 편하더라고요

   우어 정리 고맙습니다. 깔끔해서 보기 좋네요!
"
"https://news.hada.io/topic?id=6776","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   아우터 와일드를 끝냈습니다. 정말 멋진 게임이에요. 잊기 어려울 듯 싶어요...

   앗 게임패스에 있군요. 나중에 함 해봐야 겠어요

   저는 왕복 50키로 싸이클 입니다. 요즘 자전거 재미에 푹 빠졌어요..

   코와붕가.. 닌자거북이 신작이 나와서 주말에 달려보려 합니다.

   엑스박스 게임패스에 바로 등록되어서 게임구매도 않해도 되고 좋네요

   저는 뒤늦게 애플TV+의 Foundation 드라마를 봤는데
   너무 마음에 들어서 원작 소설을 주문했습니다.
   간만에 SF소설을 읽는 거라 천천히 음미하며 읽어볼까 합니다.
"
"https://news.hada.io/topic?id=6880","20년 된 Atlassian은 아직 수익이 없음 - 시장의 평가는 틀렸다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                20년 된 Atlassian은 아직 수익이 없음 - 시장의 평가는 틀렸다

     * 호주 회사로서 최고 가치에 이른 아틀라시안은 2021년 피크때 $162b 였음
     * 큰 투자를 받지 않았기에 공동창업자 둘이 아직도 각각 21%씩 지분을 보유중
     * 작년에 둘은 순자산 $70b가 넘는 호주 최고의 부자였음. (또한 Canva에 투자한 것으로도 몇조를 벌었음)
     * 하지만 최근 기술업계의 주식하락은 피할수 없었고, 현재 $52b의 가치임. 그래도 2015년 상장때의 11배
       ㅤ
     * 4월 수익 보고서에서 지난 9개월간 매출이 $1.5b 에서 $2.04b로 24% 증가했다고 발표
     * 구독비즈니스가 빠르게 성장했지만, 레거시 비즈니스의 손실로 상쇄됨
     * 60%가 빠지는 주가 위기에도 불구하고, 아틀라시안은 매출의 19배 이상의 배수로 거래되고 있음
     * 하지만 아틀라시안은 요즘 돈을 벌고 있지 못함. 실제로는 손실이 많음.
     * 2021년엔 이게 수용가능했지만, 지금은 그렇지 않음
       ㅤ
     * 아틀라시안의 문제는 수익성이 없을 뿐만 아니라, 비즈니스가 예전보다 훨씬 더 느리게 성장하고 있으며, 성장하기 위해서는 마케팅에 많은 돈을 지출해야 함
     * 아틀라시안은 ""제품 주도 성장""에 의존해서 처음 10년간 매우 빠르고 수익성있게 성장하면서도 마케팅에 거의 비용을 쓰지 않은 것으로 유명했음
     * 회사의 CTO/CPO들이 아틀라시안의 혁신적인 Jira를 매우 좋아했기 때문에, 기업세일즈 팀에 수백만 달러를 지출하지 않고도, 바이럴을 통해서 유기적으로 성장
       ㅤ
     * 아틀라시안의 사업 설명서는 2015년에 비즈니스가 48% 성장했다고 얘기하고 있음. 올해의 두배
     * 계속 영업사원이 하나도 없다고 자랑하면서도, 올해 영업 및 마케팅에 거의 $600m 을 쓰고 있다는 것
     * 8000명의 직원을 고용하고 있는 것과 합치면, 아틀라시안은 지난 9개월간 $500m 적자임
     * 잊지말아야 할것은 아틀라시안은 스타트업이 아니라 20년된 회사라는 것
     * 창업 20년째의 다른 회사들과 비교해보면 마이크로소프트는 1995년에 매출 $6b에 순수익 $1.5b 였고, 구글은 매출 $145b에 순이익 $31b 였음
       ㅤ
     * 아틀라시안은 기술업계의 벤자민 버튼이 되었음 : 스타트업때는 수익이 났지만, 점점 성숙하면서 적자가 나는..
       ㅤ
     * 아틀라시안은 긍정적인 영업 현금 흐름을 EBITDA 대용으로 얘기하지만, 그 현금 흐름은 직원들에게 급여용으로 주식을 주기 때문
     * $700m 이상을 직원들에게 주식 기반의 급여로 제공할 예정이며, 이건 거의 전체 영업 현금 흐름과 같음
     * 이건 훨씬 더 큰 문제로 이어짐 : 최근에 완전 원격을 주장한 아틀라시안 CEO의 입장을 이해할 수 있음
     * 아틀라시안에서 일하는 것은 최근에 훨씬 수익성이 떨어졌음. 지난 2년간 주식으로 급여를 받았던 사람들은 다 Underwater에 있을 것(가격이 훨씬 떨어짐)
     * 이건 실제로 엄청난 대규모 급여 삭감과 같음
     * 아틀라시안의 HR팀은 주식이 계속 오르지 않기 때문에, 새로운 사람을 뽑고, 기존 직원을 유지하기 어려워 질 것
       (아틀라시안 주가를 비합리적으로 부풀린 시장이 문제지, 아틀라시안의 잘못은 아니지만.. 이제는 실제 영향을 처리해야함)
       ㅤ
     * 더 안 좋은건, Jira는 투박하고 10년동안 거의 발전하지 않았음. 이 티켓 기반 시스템은 더이상 개발자들에게 사랑받지 못함
     * 흥미롭게도 CTO인 Sri Viswanath가 퇴사했음
     * 필자 포함 많은 회사에서 여전히 사용하고 있지만, 실제 네트워크 효과는 없음
     * 사용자들은 저렴한 비용으로 Asana, Basecamp, Monday 같은 서비스로 이전이 가능함
     * 이게 바로 영업사원이 필요없다는 아틀라시안이 영업 및 마케팅에 $600m 을 지출하게 된 이유를 설명함
       ㅤ
     * 요약하면, 아틀라시안은 경쟁이 치열한 시장에서 점점 비용이 늘고, 더 레거시가 되어가는 20년된 비즈니스임
     * 그럼에도 불구하고 시장에서는 수익의 거의 20배에 달하는 가치를 인정받고 있음
     * 느린 성장속도와 수익성, 기술 투자자들의 회의론을 감안하면, 아틀라시안은 약 5배수 정도가 합리적 (시총 $10b)
     * 비슷한 성장 프로필과 수익성을 가진 Salesforce는 연간 매출의 6배수 정도로 거래됨($31b 매출에 시총 $185b)
       ㅤ
     * 공동창업자 둘은 시장이 틀렸다는데 동의하는 것처럼 보임. 둘은 2016년부터 지금까지 계속 아틀라시안 주식 1500만주를 매각해서 각각 $2b 이상을 벌어들였음

   지라는 대단히 큰 성공을 거두었지만.. 지금의 지라는 너무나 사용하기 불편해요.
   정말 필요한 기능은 플러그인이 지원하고 있고, 또 대부분 비싸고, 느리고
   커스텀 필드나 커스텀 트랜지션 한번 설정 재대로 하는데만 책한권 쓸수 있을 정도로 쓸데없이 방대하고

   그래서 지라는 욕하면서 쓰는게 국룰이라고 들었습니다.

   마치 아침 막장 드라마 욕하면서 보는거랑 같은 이치..

   막장드라마는 재미라도 있지.. 지라는 재미도 없음..

   아틀라시안이 네트워크 효과가 없다니 엄청나게 박한(?) 평가로 와닿긴 하네요… 여전히 단 한 명의 리더가 아틀라시안에 끌리면 전사적으로 Jira 생태계가 도입되는 경우가 많은 걸로 알고 있는데, 재무성과가 이렇게나 평판에 중요하구나 하고 배웁니다…

   굉장히 공격적인 글이라.. 댓글에도 싸움이 나긴 했네요.

   난 Jira가 정말 싫어요 에도 댓글이 많이 달린 걸 보면.. 이런 저런 생각이 듭니다.
"
"https://news.hada.io/topic?id=6886","국내 최고의 개발 문화를 가진 회사는? – 설문 조사 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    국내 최고의 개발 문화를 가진 회사는? – 설문 조사 결과

     * 개발 문화 체크리스트로 415명 응답을 통계(원티드랩)

좋은 개발 문화를 가진 회사는?

     * 12점 – 카카오, 라인플러스, 우아한형제들, 컴투스, 업스테이지 등
     * 11점 – 네이버, 엔에이치엔, 하이퍼커넥트, 데브시스터즈, 크몽, 에이비일팔공 등
     * 10점 – 카카오뱅크, 크래프톤, 안랩, 당근마켓, 드림어스컴퍼니, 마이리얼트립, 원티드랩 등

12가지 훌륭한 개발문화 체크 리스트

    1. 코딩 테스트 인터뷰 – 개발자 입사 시 코딩 테스트 혹은 화이트 보드 인터뷰를 진행한다.
    2. 자율적 개인 개발 장비 선택 – 회사에 업무 장비 표준 (PC, 노트북 등)이 있더라도, 개인별로 원하는 개발 장비를 선택할 수 있다.
    3. 자율적 팀 개발 환경 선택 – 회사에 기술 표준 (프로그래밍 언어, 플랫폼 등)이 있더라도, 팀별로 원하는 개발 환경을 선택할 수 있다.
    4. 소스 코드 리뷰 및 테스트 – 모든 개발자가 다른 사람의 소스 커밋을 리뷰하고, 테스트하는 과정을 가지고 있다.
    5. 개발자 기여 로드맵/백로그 – 주요 개발 방향을 PM/기획 뿐만 아니라 개발자들이 주도 혹은 참여해서 정해나간다.
    6. 지속적 통합 및 배포 (CI/CD) – 코드 커밋 후 자동으로 통합 및 배포되는 시스템을 가지고 있다.
    7. 내부 소스 레포지터리 공유 – 다른 팀의 소스 코드에 접근(access), 포크(fork) 혹은 기여(contribution)할 수 있다.
    8. API를 기반한 연동 및 소통 – 내부 팀 및 플랫폼간 협업을 할 때, API를 개발해서 공유하거나, 검색할 수 있다.
    9. 기술을 이해하는 팀장/매니저 – 회사 내 개발팀장 대부분은 소프트웨어 개발 경력이 가지고 있으며, 내부 코드 및 기술 플랫폼을 이해하는 사람이다.
   10. 개발자 레벨 혹은 경력 관리 – 사내에 개발자의 업무 역량별 레벨 제도 혹은 팀장/매니저가 아닌 별도의 개발자 전용 승진 경로를 가지고 있다.
   11. 참여형 지식 공유 플랫폼 – 사내에 직접 참여 혹은 편집 가능한 위키(노션), 블로그 플랫폼을 운영하고 있다.
   12. 개발자 관계(DevRel) 활동 – 외부 개발자와 소통하는 채널(기술 블로그, 컨퍼런스 등)을 운영하거나 전담하는 사람/팀이 있다.
   13. 위의 모든 사항이 해당 안된다 ㅠㅠ (13일의 금요일의 저주)

   전반적으로 개발 프랙티스가 개발 문화의 일부이기도 하고 방향성과 철학을 어느 정도 반영한다는 가정하에 이루어지는 설문조사이기는 하지만, 개발 문화의 본질은 단편적인 프랙티스 사용 여부가 아니라, 실은 이면에 있는 원리들과 시도들에 있다고 생각합니다. 그래서, 이러한 시도가 정말 좋은 문화를 가진 조직인지 가려내는 기준이 되기는 힘들거라고 생각하고, 도구 (SaaS)를 이용해서 해결해야한다라는 진단 같은 것도 큰 의미를 가지기 힘들다고 생각합니다.
     * 일정 규모 이상의 회사에서는 대체로 일반적으로 받아들여지거나 특정 도구 사용에 의해서 자동적으로 얻어지는 개발 프랙티스에 관한 것 (4, 6, 7)
     * 회사나 제품의 규모에 따라서 의미가 적거나 (5, 8, 10, 12), 개발 문화에 대해 본질적이지 않은 항목들이 섞여있는 것 (2)이 신경쓰이네요.
     * 13번 항목...의 존재 자체가 신뢰도를 굉장히 떨어뜨립니다.

   고득점한 회사에 다니시는 개발자분들이 어떻게 생각하시는지 궁금하네요 ㅋㅋ

   굉장히 좋은 설문이고 시도라고 생각하지만, 제대로 활용하려면 몇 가지 더 생각할 만한 지점이 있을듯합니다.
    1. 단순히 yes or no 로 대답하기보다는 5점 스케일 같은 걸로 평가해야 하지 않을까?
    2. 각 항목이 평가에 동일한 비중을 가지게 되는데, 각 항목이 실제로 개발자의 리텐션, 만족도, 역량 향상 등에 동일한 영향을 미치지는 않을 것 같다.
    3. (2에 따라) 각 항목에 전부 yes라도 개발자가 만족하며 다닐 수 있는 회사임이 보장되지 않을 것 같다.

   동의합니다. 또한 점수를 매긴다 하더라도 그 기준이 절대적이기 어려워서 결국 여러 리뷰 점수처럼 그냥 참고만 하는 정도의 수준이지 않을까 싶네요.
"
"https://news.hada.io/topic?id=6818","RISC-V, 2022년의 첫번째 새로운 사양 발표년의 첫번째 새로운 사양 발표

     * Efficient Trace (E-Trace) : 디버깅 용도로 Branch Trace를 사용하는 고성능 프로세서 트레이싱
     * Supervisor Binary Interface (SBI) : 애플리케이션 바이너리 인터페이스를 이용하여 하드웨어와 OS커널 간에 펌웨어 레이어를 설계
     * Unified Extensible Firmware Interface (UEFI) 스펙을 RISC-V 플랫폼에 구현
     * Zmmul multiply-only extension : division 없이 multiplication 만 넣어서 저비용으로 구현 가능
"
"https://news.hada.io/topic?id=6893","Y Combinator, Launch YC 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Y Combinator, Launch YC 공개

     * YC가 투자한 스타트업들이 새로운 제품/기능을 홍보하는 공간
     * 업종, Batch별로 필터링. 투표/날짜 순 정렬 지원
     * 해커뉴스와 같은 형태로 투표에 따라 순위 조정
     * 이메일로 새 런칭 정보 구독 가능

   원래는 YC 투자사들의 내부 커뮤니티인 Bookface 안에 있던 걸 외부로 공개한거라고 하네요.
   https://ycombinator.com/blog/launch-yc-the-launchpad-for-yc-startups/

   실제로는 해커뉴스를 통해서도 주기적으로 런치 정보를 올리긴 했는데,
   이제 한 배치에 스타트업이 너무 많기도 하고, 다른 뉴스들에 밀려서 잘 안 보이니까 아예 별도로 사이트를 열은듯
"
"https://news.hada.io/topic?id=6800","여러가지 일을 할 수 있다는 건 애매한 게 아니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      여러가지 일을 할 수 있다는 건 애매한 게 아니다

     * 왜 우리는 '전문가'가 돼야한다고 자꾸 생각할까
     * 왜 우리는 '여러가지 일을 할 수 있다'고 말하지 않고 '전부 다 애매하다'고 말할까
     * 여러가지 일을 적당히 하는 게 한 가지 일을 잘하는 것보다 별로일까
     * 전문가가 되는 것, 중요하고 사회에 필요하다.
     * 하지만 그렇지 않은 사람도 존재할 것이다.
     * 갈릴레오 갈릴레이는 철학자이자 과학자이자 물리학자이자 천문학자였다.
     * 그의 저서에 그려진 달 표면의 삽화는 상당히 디테일한데, 그림도 잘 그린 것일까.
     * 그는 애매한 사람일까
     * 아인슈타인은 특허국 사무소 정규직으로 일하면서 특수 상대성 이론을 발표한다.
     * 그는 어릴 때부터 음악을 사랑해 바이올린을 자주 연주했다.
     * 책 '모든 것이 되는 법'에서 이런 사람들을 '다능인'이라고 부른다.
     * 매 1년마다 다른 직업을 가질 수 있는 사람도 있다.
     * 동시에 여러 직업을 가진 사람도 있다.
     * 여러 분야를 이해해야 하는 한 가지 직업을 가진 사람도 있다.
     * 본업이 있는데 '사이드 허슬', '사이드 프로젝트'를 하는 사람도 많다.
     * 인공지능 분야의 연구 분야 중 '전이학습'이 핫하다.
     * 전이학습은 하나의 업무 수행에 적합한 지식이 추후 다른 업무 수행에 도움이 된다는 뜻
     * 학습의 능력이 다른 학습의 능력으로 전이된다는 뜻
     * 서로 다른 분야에도 연결고리가 존재한다.
     * 인공지능 뿐 아니라 인간 뇌도 전이학습을 한다.
     * 한국어와 한글을 알면 일본어와 문자를 배우기 쉽다는 게 전이학습의 예시이다.
     * 인공지능 분야에서 예외도 존재한다. 전이학습 시에 한 가지 작업만 학습한 경우보다 능률이 떨어지는 '음의 전이'도 있다.
     * '음의 전이'를 제어하고 '양의 전이'하는 법을 연구하는 것도 중요하다.
     * 인간 뇌는 전이학습에 탁월하다.
     * 흔히 '가장 전문적인 직업'이 가장 먼저 대체될 것이라 얘기한다.
     * 그렇다면 다능인이 되는 것은 강력한 시장경쟁력이다.
     * E-sports 동시 통역사, 정치 동시 통역사, 과학 커뮤니케이터, 메이크업 아티스트 등 '한 가지만 잘해서는 할 수 없는 직업'도 강력한 무기다.
     * 여러가지 학문을 아는 이들이 모이면 새로운 학문도 생긴다.
     * 어쩌면, 여러가지 일을 하는 사람이 여러가지 일을 다 잘하게 될 수 있다.
     * '전문가'에 비해 한 분야를 더 잘 알지 못하더라도, 그들에겐 그들만의 장점이 있을 것이다.
     * 다능인이라고 생각된다면, 여러가지 일이 하고 싶은 당신의 뇌를 받아들이라.
     * 여러가지 일을 할 수 있다는 건 애매한 게 아니다.
     * 여러가지 일을 할 수 있다는 건 여러가지 일을 할 수 있다는 것이다.

   <폴리매쓰> 책 추천하고 갑니다.

   책 추천 감사드립니다!

   저의 경우가, 늘 한 가지를 더 잘 하는 것보다는 새로운 것들을 배우는 것에 훨씬 관심을 가지는 스타일인데요.
   다룰 수 있는 도구가 많고, 창의적인 시각들을 많이 가질 수 있다는 점이 좋은 점이지만
   무언가에 대해 관심이 너무 쉽게 꺼지는 것에 대해서는 늘 고민입니다.
   짧으면 하루, 길면 한 달 정도 지속되는 것 같아요. 예를 들어 이걸로 창업을 하면 좋겠다! 생각하며 가슴 두근두근 하던 것도 다음 날이 되면 전혀 무관심해져서 금새 잊어버리고 다른 아이디어에 열광하는 거죠..
   다양한 걸 조금씩 하는 게 좋다면 대기업 그룹 회장 같은 게 딱이려나? 싶지만 그건 아무래도 어려우니..ㅋㅋ
   무언가에 대해서 무관심한 순간이 와도 꾹참고 한번 시작한 것은 어느정도 성취가 있을 때까지 지속해봐야겠다는 생각을 하는 요즘입니다.

   장점과 단점이 담긴 좋은 이야기네요. 그래서인지 저는 ‘한 가지 일을 계속할 수 있는 끈기가 가장 큰 성공의 척도 중 하나다’를 이야기하는 책 ‘그릿’과 본문에서 소개한 ‘모든 것이 되는 법’을 번갈아서 읽으면서 두 가지 장점을 융합할 수 있을까 생각해봐요 ㅋㅋㅋ 예를 들면, 아주 넓은 주제 (예를 들면 사업)를 끈기있게 계속하고 그 안에서 여러가지 영역을 점프하는 사람이 될 수도 있지 않을까 싶어요!
     * 어떤 분께서 피드백 주신 내용이 있어 달아봅니다.
       '다능인'과 '전문가'는 딱히 '상충하는' 컨셉은 아니라고 생각해요, 다만 여러 유형의 사람들을 표현하기 위한 한 가지 접근법이라고 생각하고 있습니다!
       저는 '다능인'이라는 단어를 알게 된 이후로 여러 일에 있어 편한 마음가짐을 가질 수 있어 좋았어요.
       관점에 따라서는 '아인슈타인'이 '다능인'이라고 해석할 수도 있고, '전문가'라고 해석할 수도 있었을 것 같아요.
       이야기의 가장 출처가 되는 에밀리 와프닉은, 아인슈타인이 충분히 괜찮은 직업 (특허사무소 정규직)을 가지고 있는 와중에 다른 멋진 일을 할 수 있었다는 차원에서 다능인 모델의 하나라고 해석했어요.
       다른 의견도 언제나 환영합니다. 감사합니다!

   Serendipity 단어가 어울리는 글이네요

   말씀 감사합니다! ㅎㅎ

   예전에 한 기고문에 저도 에밀리에 왑닉의 다능인(Multipotentialite) 단어를 인용한 적이 있네요.
   에밀리에 왑닉의 12분짜리 TED 발표를 보시는 것도 추천드립니다. (한국어 자막)
   어떤 사람들에겐 하나의 천직이 없는 이유

   전 요즘 매년 새로운 것 하나씩 배우기를 실천하고 있습니다. 일이 아니고 취미 분야이긴 하지만.. ^^;

   <매년 새로운 것 하나>라니... 생각보다 어려운 일 같은데, 멋지네요!ㅋㅋ

   *별롱일까 > 별로일까
"
"https://news.hada.io/topic?id=6872","OpsFlow - No-Code DevOps","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        OpsFlow - No-Code DevOps

     * Webflow와 비슷하지만 인프라를 위한 Low-Code 도구
     * 코드를 분석하여 AWS를 자동으로 설정
     * Terraform 을 자동생성하고 GitHub에 양방향 싱크
     * AWS 계정 연결하고, 드래그앤 드롭으로 인프라를 구성하고, 원 클릭 디플로이
"
"https://news.hada.io/topic?id=6825","NFT 마켓플레이스 유형에 대해 알아봅시다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        NFT 마켓플레이스 유형에 대해 알아봅시다.

  NFT 마켓플레이스 분류

     * NFT 시장은 크게 4가지 분류로 볼 수 있음
     * 초기 시장: 양과 질의 선택에 따른 시장 방향성
          + OpenSea: 모두가 거래 가능
          + Foundation: 초대장 기반 크리에이터 필터링
          + Nifty Gateway, SuperRare: 엄격한 심사
     * 다양한 생태계: 확장성 측면과 여러 생태계
          + MagicEden: Solana
          + Paras: NEAR
          + AtomicMarket: WAX
          + tofuNFT: Optimism
     * 마켓 간 경쟁: UX+토크노믹스+수수료
          + Rarible: UX개선+토크노믹스 제공
          + LooksRare: OpenSea에 대한 뱀파이어 공격
          + X2Y2: 수수료 0.5%로 경쟁력 확보
     * 중앙거래소: 시장의 확장
          + Binance, FTX, Coinbase, Upbit, Korbit
          + 다만 여전히 사용성 부족

  NFT 마켓 플레이스 UX 개선 제언

     * 일부 NFT Marketplace의 장점 또는 개선될 점 등 제언
          + 지갑 및 편리한 계정 관리: 지갑은 여전히 사용이 어렵습니다. 아직은 카드 결제가 더 편리한 것 같습니다. 또한 단일 지갑이 아닌 멀티 지갑 확인 기능을 제공에 대한 아이디어 제안.
          + 지원하는 체인과 멀티체인: 앞으로 가장 기대되는 next step.
          + 바닥가 등 거래정보의 빠른 리프레시: 메타데이터 새로고침도 여전히 너무 느린편.
          + 거래 정보 시각화: 이전 거래 정보를 확인하기 어려움. 현재 대다수 외부 서비스를 사용.
          + NFT 제작 솔루션 통합: 대다수가 NFT를 쉽게 올릴 수 있으나, 속도나 사용성 측면에서 아직 더 많은 가능성이 보입니다. 현재는 IPFS를 사용하지 않고 자체 서버를 사용하는 경우도 다수.
          + 낮은 수수료를 위한 방법: 낮은 거래 수수료, 다량 구매 제공 등
          + 소셜 기능의 부재: 아직까지 소통이 트위터와 디스코드로 이루어진다는 점은 매우 아쉬운 포인트입니다.
          + 개인 페이지 NFT 관리: 디렉토리 단위로 관리나 개별 태그 등을 추가할 수 있으면 좋을 것 같습니다. 지금은 매우 원시적인 나열 방식.
          + 큐레이션 및 전시: 좋은 NFT에 대한 선별이 여전히 어렵고, 신뢰가능한 큐레이터가 필요함.
          + Rarity 표시: PFP Rarity 메타가 언제까지 유지될지는 모르지만 당분간은 좋은 기능.
          + 경매 및 비딩 방식의 다양화: 다양한 경매 방식과 자동 입찰 등
          + 모바일 UX: 아직은 대다수 마켓이 PC 화면에 최적화. OpenSea의 경우 모바일 어플은 있지만, 모바일 거래가 불가능.
"
"https://news.hada.io/topic?id=6866","Show GN: ApplePie Pro 2.0 - Notion MVP였는데 토이 프로젝트가 아니라 진심 100%","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: ApplePie Pro 2.0 - Notion MVP였는데 토이 프로젝트가 아니라 진심 100%

     * MVP는 시작일 뿐, 본질적 프로덕트 개선을 향한 무한질주
          + MVP 아이디어로부터 22일째, 애플 세계 개발자 컨퍼런스 WWDC를 시청한 이후 감명을 받아 시작한 토이프로젝트였던 ApplePie Pro
          + 초기 버젼의 아이디어는 단순, 맥북을 쉽고 안전하게 팔 수 있는 장소 만들자.
          + 아이디어는 딱 세 줄
          + 아이디어는 몇 가지 간단한 기능을 가진 제품이 되었다.
          + 별 기능은 없지만, 런칭도 경험했다.
          + 글 작성 시점은 MVP 출시로부터 11일. 2.0 버젼 출시를 앞두고 있다..
     * 린스타트업 MVP 성장 희망편
          + 런칭 첫날 페이지뷰 1634
          + 의도치 않은 후원, 13900원의 수익.
               o 13900원이지만 1억 3900만원을 번 것 같은 즐거움과 보람
               o 후원을 받은 시점에서 '중고장터' 뿐만 아니라 '컨텐츠와 미디어'를 좋아해주시는 분들이 계실 것이라는 아이디어를 떠올림.
               o 다양한 창작물과 프로덕트를 만들어내는 분들을 도와드릴 수 있는 컨텐츠와 서비스를 만들자. 새로운 미션을 떠올림.
          + 의도치 않은 인연과 가능성
               o 후원금 뿐만 아니라, 좋은 피드백, 조언, 개선점, 인간적 성장을 얻을 수 있었다.
               o 개발자 개인과 프로덕트의 가능성이 성장하고 있음을 느꼈다.
     * 린스타트업 MVP 절망편
          + 물밀듯이 들어오는 피드백이 때로는 벅찼다.
               o 이미 잘되고 있는 제품과 서비스들도 여전히 수많은 사람들에게 욕을 먹고 비판과 지적을 받으면서 발전하고 있다는 사실을 떠올렸다.
          + 누군가는 만족시키겠지만, 누군가는 실망시킬지도 모르겠다는 생각.
          + MVP 런칭시점부터 그랬다.
          + 아이디어는 문제를 해결함과 동시에 문제를 만드는 것 같다.
          + 가치의 총량이 문제의 총량보다 컸으면 좋겠다.
          + Product Market Fit 자체가 없는 프로덕트이거나, 시장일 수도 있겠다는 걱정
               o 제품과 시장의 수요가 만나는 지점을 Product Market Fit이라고 부른다는데
               o 시장 수요가 있는 제품을 만들었는지
               o 제품이 시장 수요와 만날 수 있는 지 불확실하다.
               o 망한다고 생각하면 반드시 망하게 만들 수 있지만, 계속해서 잘되겠다고 생각하면 10%든 1%든 잘될 확률이 있다.
               o 아직 잘 모르는 것 같다.
          + 자기자본 스타트업은 돈이 없다.
               o 별 거 아닌 MVP였지만, 이제 50만원에서 100만원을 투자하고 있다.
               o 소프트웨어도 구매해야 하고, SaaS 등도 구독해야 한다.
          + 해야 하는 일의 갯수 49개, 가짓수 약 서른 개, 처음 하는 일이 절반
               o 공이 매일 하나씩 늘어나는 저글링을 하는 것 같다.
     * 수요없는 공급이 될까? 아이디어와 기능 무한생성
          + 직접 판매: SNS 공유하기 괜찮은 중고거래 포스팅, 애플 제품에 대한 상세한 정보, 가격비교
          + ApplePie Vintage: 단 한 명의 고객을 위해 만든 오래된 Apple 상품 판매 및 진열 기능
          + Pro 컨텐츠 - 스타트업, 크리에이티브, 생산성을 둘러싼 프리미엄 컨텐츠 서비스
          + Pros & Cons - 스타트업, 아이디어, 소프트웨어, 디자인, 크리에이티브, 건강한 토론 커뮤니티
               o 앞으로는 GeekNews나 Disquiet처럼 프로덕트를 런칭하고 이야기하는 장소도 될 수 있으면 좋겠다는 개인적인 바람.
               o 커뮤니티에는 광고 배너를 통한 수익창출을 고려하지 않고 있다. 그보다는 더 많은 분들과 좋은 이야기를 하고 싶다.
          + Pro 위키 - Pro 사용자를 위한 다양한 단편적 정보를 제공하는 공간
          + 격동하는 사이트맵, 근본없는 브랜드 다각화
               o ApplePie Pro는 안전한 Apple 중심의 마켓플레이스를 만드는 브랜드 ApplePie와 세상의 모든 Pro들을 응원하는 브랜드 Pro로 구성하려고 준비중.
               o 많은 관심과 응원을 부탁드립니다.


   안녕하세요, 11일전 Notion으로 만든 중고맥북 판매 중개 서비스 ApplePie Pro를 긱뉴스에서 공개(https://news.hada.io/topic?id=6781)한 개발자 다운이에요. 이번에는 엄청나게 많은 기능과 서비스를 추가한 ApplePie Pro 2.0을 들고 와봤어요. 1인 개발이니만큼 삐걱대는 부분도 있고, 맨날맨날 맘대로 바뀌어서 혼란스럽기도 한 서비스이지만, 이제 점점 더 진지한 모습을 보여드릴 수 있도록 노력하려고 해요.

   감사합니다!

   그런데 1.0 에서 한건의 거래라도 실제로 발생을 했나요? MVP 단계에서 실제 거래가 일어나거나 혹은 그럴만한 시그널이 발생하지 않았다면 2.0 등 버젼 개선에 어떤 의미를 가지고 에너지를 투입 하고 계신건지 궁금해서요.

   안녕하세요, 본질적인 지적이시네요! 아무래도 가장 중요한 지표가 아닌가 싶어요.
   제가 제일 중점적으로 생각한 건 '차별화 지점 전혀 없고 당근 번개 중고나라 이런 것보다 복잡하고 어렵기만 하니까 아무도 안 쓴다' 였습니다. 그래서 '차별화 지점을 여러 개 만들고, 웹과 익명성을 존중하면서 좋은 판매와 구매 경험을 제공할 수 있으면 좋겠다'는 방향을 생각하고 있어요.

   이번 런칭을 통해서 한 건의 상품 등록 요청을 받았습니다. 문제는 시스템 문제로 정상적으로 상품 업로드가 되지 않았는데요, 이 부분을 수정해서 정상적으로 상품을 등록해드리고자 합니다.

   한 분의 상품을 받는 데에 성공했으니, 앞으로 10분의 상품을 등록받을 수 있도록 더 노력하겠습니다. 또한, 오래된 애플 상품을 등록할 수 있는 빈티지 기능은 '그런 기능이 있으면 올릴 수도 있겠다' 고 말씀해주신 고객님을 위해서 구현하였습니다. 해당 고객님이 빈티지 기능을 통해서 상품을 업로드 해주실 수 있겠다고 말씀해주셨습니다.
   답글 감사합니다!
"
"https://news.hada.io/topic?id=6768","Helix - kakoune / neovim에 영감을 받은 텍스트 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Helix - kakoune / neovim에 영감을 받은 텍스트 에디터

     * LSP support
     * Tree-sitter integration
     * Vim like modal editor
     * Kakoune like editing model
     * batteries included

   Kakoune 에디팅 모델은 Migrating-from-Vim에서 쉽게 설명합니다
"
"https://news.hada.io/topic?id=6814","엣지(Edge) 컴퓨팅이 뭘까요? 강아지 모자를 뜨개질하는 것과 같습니다. (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             엣지(Edge) 컴퓨팅이 뭘까요? 강아지 모자를 뜨개질하는 것과 같습니다. (번역)

“컴퓨팅”이 뭘까요?

“컴퓨팅”은 어디에서 이뤄질까요?

     * 기존 서버 : 상업용 작업 공간과 같습니다
     * 클라이언트 : DIY 뜨개질 키트와 같습니다
     * 정적 사이트 생성기(SSG) : 미리 만들어진 강아지 모자와 같습니다
     * 클라우드 함수 : 강아지 모자를 짜도록 훈련된 로봇과 같습니다

“엣지”란 뭘까요?

     * 컨텐츠 전송 네트워크(CDN) : CDN은 편의점 같습니다
     * 유저는 3-D로 삶을 경험합니다 : 거리(Distance), 다운로드(Download) 크기, 장치(Device) 능력

“엣지 컴퓨팅”이 뭘까요?

     * 유저 입장에서 장점
          + 서버/클라우드 함수에 비해 지연 시간이 짧습니다.
          + 클라이언트 사이드 렌더링에 비해 다운로드 횟수가 적습니다.
          + 다른 앱이나 배터리 수명을 증가 시키면서 장치 작업을 계속합니다.
     * 개발자 입장에서 장점
          + 개념 증명(proof-of-concepts)을 위한 낮은 장벽
          + (브라우저와 달리) 일관된 실행 환경
          + 각 팀은 각자의 책임을 갖습니다.
          + 위치 기반입니다.
          + 관리할 서버/인프라가 없습니다.
          + (클라이언트 사이드와 비교해서) 비밀은 비밀로 유지됩니다.
     * 이해당사자 입장에서 장점
          + 오리진 서버의 로드를 줄이면 성능, 신뢰성이 올라가고 비용이 줄어듭니다.
          + 자동 스케일링은 전반적인 성능과 안정성을 향상합니다.
          + 사용한 만큼 지불합니다.

엣지 컴퓨팅의 한계

언제 엣지 컴퓨팅을 사용해야 할까요?

왜 신경써야 할까요?
"
"https://news.hada.io/topic?id=6774","돈을 벌고 있지만, 감춰둔 사이드 프로젝트 있으신가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     돈을 벌고 있지만, 감춰둔 사이드 프로젝트 있으신가요?

   HN에 주기적으로 올라오는 질문 중 하나. 몇개만 가져와봅니다
     * 파킨슨 환자용 마우스 손떨림 제거 소프트웨어 (현재버전 $43 or 평생업글 $127)
     * 게임용 아이템 판매 마켓 (피크때 월 $300k). 처음엔 eBay 어필리에이트 링크를 사용하다가 빅셀러 컨택해서 독점 판매로 선회
     * 유명 트레이딩 소프트웨어와 연동해주는 엑셀 애드인(월 $10씩 내는 유료 사용자 몇천명)
     * 2006년에 PSD2HTML 기능으로 '페이지당' $70씩 받아서 9개월만에 $5000 벌고 도메인을 $1300에 팔았음
     * 예전 회사에서 교육자용 도구를 만들어서 제공중인걸 회사가 피봇하면서 인수. 연간 $5000 씩 내는 고객들 여럿

   이번에 번역작업을 해보았습니다.
     * 개발블로그를 하는데 평균 월 5달러정도 에드센스 수익이 생기는데
     * 나름의 개발 커뮤니티 기여 및 수익의 측면에서는 번역이 좀 더 나은 것 같습니다.
     * 번역의 이점은 내 이름이 찍힌 책, 수익, 영어공부 + 개발공부이네요.

   저는 10여년전에 직접 만든 영어 콘텐츠 몇 개만 구성된 사이트를 몇년 운영했었는데,
   피크때는 애드센스 광고 수익으로 월 몇백달러 이상 들어왔던 것으로 기억합니다.
   SEO는 기본이고, 그 시절에 있었던 영어 사용자들이 많이 쓰는 사이트들을 꽤 많이 활용했었습니다.
   지금은 SNS때문에 많이 안쓰이지만, 그때는 StumbleUpon 류가 굉장히 성공적이었어요.

   4대 보험 받고 있는 정규직이지만, 주말에 사이드잡으로 프리랜서 개발 외주도 받고 있는데요.. 년으로 따지만 4-500은 버는 듯?? 하네요.. 작년에는 천만원도 넘었구요..

   주로 크롤러를 만든 다음 엑셀이나 대쉬보드 그래프로 보여주는 걸 많이 만들어요.

   장기 고객들도 있어서, 유지보수 비용이 쏠쏠합니다.

   주말만 할 수 있는 프리랜서 개발업무가 있나요? 대부분 프로젝트 상주근무인데.. 신기하네요.

   어디서 구하시는지 공유 가능하시면 공유좀 부탁드립니다..

   지인들의 지인들에게서 들어오는 요청이 거의 전부라서요.. ㅎㅎ
   계약서도 따로 없이 일해요..

   주로 간단한 것들이라서 주말만 하는 공수로도 충분히 개발이 가능하거든요..
"
"https://news.hada.io/topic?id=6850","첫 창업자들이 펀드레이징에 대해 알아야할 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       첫 창업자들이 펀드레이징에 대해 알아야할 것들

     펀드레이징은 주식을 '판매'하는 것 → 판매의 핵심은 구매과정에서 일어나는 '마찰'을 줄이는 것

     * 과정 중간에 정직할 것
     * 숫자를 숨기지 말 것
     * 약한 팀 멤버를 숨기지 말 것
     * 안좋은 것을 숨기지 말고 먼저 공유할 것
     * 덱(IR자료)부터 공유할 것
     * 제품에 대해 객관적으로(차갑게) 알아둘 것(경쟁자부터 시장 상황등을 구매자 보다 더)
     * 실제 이메일 사례를 포함한 고객 조사 자료를 첨부할 것(VC들은 진짜 고객과 대화하기를 원함)
     * 신뢰를 쌓을 것
     * 시간을 엄수하고 프로처럼 행동할 것
     * VC에 대해서 자료 조사할 것
     * 자신만의 투자메모 작성하기(입장을 바꿔서 내가 VC라면 나의 스타트업에 투자할 것인지)
     * 발표를 연습할 것(친구들과 다른 CEO들 앞에서)
     * 가끔 정말 그들은 다음번에 투자할수 도 있음(아직 너무 일찍이기 때문에)
     * VC들의 브랜드나 펀드 규모보다 신뢰가 더 중요함. 몇 년이상 그들과 함께 가게 될 것

   폴그레이엄의 10년 가까이 된 에세이도 여전히 도움이 많이 되는 것 같아요. 개인적으로 관점을 많이 바꾸게 해주는 좋은 글이었습니다.

   http://paulgraham.com/fr.html

   요약 번역본 및 풀 번역 버전도 있네요
   http://nextransblog.blogspot.com/2014/05/…

   http://nextransblog.blogspot.com/2014/03/…
"
"https://news.hada.io/topic?id=6835","Show GN: 사이드프로젝트/창업 팀빌딩 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 사이드프로젝트/창업 팀빌딩 플랫폼

   안녕하세요, IT프로덕트 메이커들을 위한 소셜네트워킹 사이트 디스콰이엇을 만들고 있는 박현솔입니다. 최근 사이드프로젝트에 대한 관심이 많으신데요, 저희가 팀빌딩을 돕기 위해 메이커스퀘어라는 기능을 만들었습니다.

   기능
   •팀원 찾기: 자신의 프로젝트를 소개하고 메이커로부터 연락을 받을 수 있습니다.
   •프로젝트 찾기: 자신이 어떤 메이커이고 어떤 프로젝트를 찾는지 포스팅하여 제안을 받을 수 있습니다.

   사용해보시고 많은 피드백 부탁드려요!

   현솔님 안녕하세요! disquiet 정말 잘쓰고 있어요! ㅎㅎ 앞으로도 제 프로덕트 이야기, 신기능 이야기 등 많은 것들을 들고 가고 싶어요! 이번에 만들어주신 팀원 찾기 기능의 UX도 너무 아름답고 좋아요.

   안녕하세요! 좋게 봐주셔서 감사합니다 :) 많이 이용해주세요~
"
"https://news.hada.io/topic?id=6797","개발자의 학습과 성장 (46p 발표자료)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         개발자의 학습과 성장 (46p 발표자료)

     * 우리가 자주하는 고민에 대한 답들
          + 잘하는 개발자란게 뭘까?
          + 어떤걸 공부해야 할까?
          + 내가 공부한 것을 어떻게 활용하지?
          + 내가 성장하긴 한걸까?
          + 일정 계산을 어떻게 하지?
     * 전략적 학습
     * 패턴 학습
     * 산출물에 대해

   김사합니다. 덕분에 새로운 서비스도 알게되었습니다.

   호호 불어먹어야지

   개인적으로 어렴풋이 느끼며 참 정리가 잘 안되던 부분들이었는데 깔끔하게 잘 정리되어있네요. 좋은 글 잘읽었습니다.

   혹시, 발표자료를 공유받을 수 있을까요?
   Link가 제대로 작동하지 않는 것 같습니다.
   E-mail: hyegang_son@korea.ac.kr

   감사합니다!

   원저자는 아닙니다만 웹 검색 결과 공유드립니다
     * 저자의 블로그 글
     * Slideshare 사본
"
"https://news.hada.io/topic?id=6798","가명정보와 익명정보","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               가명정보와 익명정보

     * 2020/8/5부터 데이터 3법에 근거하여 개인정보를 가명정보, 익명정보화 해서 안전하게 거래하고 활용 가능
     * 가명정보와 익명정보란? : 가명은 ‘가짜 이름’, 익명은 ‘이름을 숨김’
          + 가명처리 : 주로 식별자 대체값을 생성. 랜덤값 생성, 해시값 생성, 암호화 기법 방식등을 사용
          + 익명처리 : 식별자를 삭제하는 것이 원칙. 단, 부득이하게 식별자가 필요한 경우 적절하게 익명처리
     * 개인정보, 가명정보, 익명정보의 활용 범위
"
"https://news.hada.io/topic?id=6839","Netflix, 직원의 3%인 300명 정리해고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Netflix, 직원의 3%인 300명 정리해고

     * 성장 둔화와 경기침체 때문
     * 5월에 150명 정리해고후 두달만에 다시 해고
     * 1년전 $512 였던 넷플릭스 주식은 65% 하락하여 $178

   해고 발표하고 나서 어제는 5% 가량 올라서 현재 $190이네요.
"
"https://news.hada.io/topic?id=6856","Darklang Release 2 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Darklang Release 2 공개

     * 서버리스 백엔드 개발용 통합 도구인 Dark의 언어 부분
     * 이제 런타임이 전체 비동기로 동작
     * 새로운 Worker 구현(기존엔 자체 큐에서 구글 PubSub 기반으로 변경)
     * 변수에 Lambda 넣기 가능. 에러 메시지 개선
     * 다양한 부분에서 성능 개선

   Dark 내용은 처음 소개 글을 보시면 됩니다.
   Dark - 서버리스 백엔드를 개발하는 새로운 방법
   기존에 OCaml 기반으로 백엔드를 만들었다가 F#으로 재작성 했다네요.
"
"https://news.hada.io/topic?id=6771","애플과 Cloudflare, Private Access Tokens로 CAPTCHA를 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           애플과 Cloudflare, Private Access Tokens로 CAPTCHA를 제거

     * iOS16 과 macOS Ventura에서 지원 예정
     * 사용자 경험을 해치지 않고 가짜 사용자인지 체크해서 CAPTCHA를 요구하지 않게 처리
     * IETF의 Privacy Pass 프로토콜 표준 이용
       → 서버가 PrivateToken HTTP 인증을 요구
       → 서버는 클라이언트 아이덴티티 트래킹 불가
       → RSA Blind Signature 이용
     * 애플기기의 Secure Enclave가 익명화된 통신으로 Attester 에게 사용자 인증을 요청하면,
       → Attester가 각 사이트가 지정한 issuer 서버(fastly 와 Cloudflare 같은 CDN)와 검증하고 토큰을 발급

   Privacy Pass 확장을 설치하면 다른 브라우저에서도 비슷하게 캡챠를 제거할 수 있습니다.
   https://privacypass.github.io/
"
"https://news.hada.io/topic?id=6808","BlueLink - 현대자동차 제어용 Python API Wrapper (Unofficial)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          BlueLink - 현대자동차 제어용 Python API Wrapper (Unofficial)

     * 현대 Bluelink® 를 통한 원격 제어 가능
     * lock , unlock, start, stop, find, odometer 명령 지원
     * CLI를 이용하거나 Python으로 호출 가능

   https://doi.org/10.8080/4020100041199 상표 등록도 되어 있는데 이걸 prefix나 suffix도 없이 그냥 프로젝트 이름으로 써도 되는지 잘 모르겠네요...

   뭐 이런 것 가지고 현대가 딴지 걸겠어? 하는 생각인듯 합니다.

   TMI: 위 예제 소스 코드에 등장하는 Elantra는 아반떼의 외국 명칭이라고 합니다.

   저 이름을 말 안해줘도 아는지, 모르는지도 대충 나이를 구분 할 수 있겠군요ㅠㅠ (한국에서도 처음엔 엘렌트라로 나왔다가 나중 연식에서 아반떼로 변경 되었습니다)
"
"https://news.hada.io/topic?id=6891","1년간 입은 옷과 신발들을 모두 트래킹 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        1년간 입은 옷과 신발들을 모두 트래킹 하기

     * NFC 단추와 iOS Shortcut을 이용해서 매일 입은 것들을 추적하여 Coda에 기록
     * 상품별 가격 입력후, 입은 횟수당 나눠서 CPW(Cost Per Wear)를 계산하고, 어떤 옷들을 주로 입는지 분석
     * 실제론 iOS Shortcut + Coda 만으로도 가능(단추를 못 넣는 신발등)

   미니멀리스트가 되기로 결심한 개발자가 하기 좋은 일이 아니라 싶네요 :)

   현관 전신거울에 자동촬영 카메라를 두면 어떨까 싶네요. 같은 옷, 신발, 장신구를 인식해서 데이터로 쌓아두면 의미있을듯

   재미있어 보이기는 한데, 전 매일 저거 태깅하는거 까먹을 것 같아요.
   RFID 대형 스캐너는 너무 비싸더군요. ㅎㅎ
"
"https://news.hada.io/topic?id=6781","Show GN: Notion으로 만든 중고맥북 판매 중개 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: Notion으로 만든 중고맥북 판매 중개 서비스

   기능 소개
     * MacBook 구매 / MacBook 판매
     * MacBook 대신 판매 서비스 제공
     * 당근마켓의 '끌올'과 비슷한 '자동가격할인' 기능
     * 구매자를 위한 상세한 MacBook 매물 정보 제공
     * 'Notion으로 이런 것도 만들 수 있구나' 아이디어 제공

   개발 이야기
     * 지난 주 화요일 애플 WWDC를 재밌게 시청하고 MacBook이 사고싶다는 생각이 들었습니다.
     * 노션 이력서 소개팅 (https://resume.knkn.co/)에서 영감을 받아서, Notion API를 활용해 중고 맥북 판매 플랫폼을 만들어봤습니다.
     * '중고나라는 네이버 카페에서 시작했다'는 사실이 갑자기 생각이 나서, 그럼 Notion으로 만들어도 되지 않을까? 하고 생각해봤어요.
     * 사업자 등록, 기능 기획, 디자인, 개발, 문서화, 서비스 런칭까지 1~2주 안에 끝내보겠다는 무모한 마음가짐으로 시작했는데, 여러모로 어설픈 부분도 많이 보이네요!
     * 활용한 기술 및 도구는 Notion API, Paperform, Oopy, FastAPI입니다.

   받은 피드백들
     * 왜 MacBook만 파나요?
     * 설명이 너무 장황해요.
     * 상품이 너무 없어요.
     * Apple의 카피라이팅을 따라한 게 재밌어요.
     * 긱뉴스 여러분들의 피드백도 궁금해요!

   와 신기하네요~
    1. Notion API 를 사용하면 자기 웹페이지 안에 Notion 페이지를 삽입해서 띄울 수 있는건가요?
    2. 실제론 며칠 걸렸나요?
    3. 받은 피드백들에 대한 답변은 어디서 볼 수 있나요?

   댓글 감사드립니다!
    1. applepie.pro 홈페이지는 Notion 공개 웹페이지를 oopy.io 서비스를 활용해 조금 더 세련되게 보여주고 있습니다. Notion API를 사용하시면, 프로그래밍을 통해 자유롭게 Notion 페이지와 블록을 추가, 업데이트, 삭제할 수 있습니다.
    2. 착수 시작은 6월 7일이니 11일이네요 ㅎㅎ 당시 휴가를 다녀오고 있던 차라 어느 날은 작업하고 어느 날은 쉬면서 working day는 약 일주일 정도 걸렸습니다!
    3. 받은 피드백들에 대한 답변은 실제로 피드백을 주신 여러 창구 (슬랙, 이메일, 카톡, 대면 등)에서 당사자분들에게 직접 보내드렸습니다. 모든 피드백이 공개적인 것은 아니기 때문에 한 눈에 볼 수 있는 공간은 아직 없네요!

   헉... 중계가 아니라 중개...

   헉,, 저의 부족함이 여기서 탄로가 나네요... 수정 기능이 없어서 아쉽군요 ㅋㅋ큐ㅠ 지적 감사합니다!

   수정해두었습니다!

   우와 감사합니다!

   런칭 축하드립니다!
   재미나네요. 요즘 노션 API로 이런 것들도 만드는군요.
   만드신 과정이나 서비스 성장 과정을 정리하면서 지속적인 홍보를 해보는 것도 좋을 것 같아요.

   말씀하신 것처럼 초기 상품이 너무 없기는 하네요.
   주위에 수소문해서 상품을 늘려보시는게 좋을 것 같아요!

   이력서 소개팅은 약간 재미성인데, 이건 실제 상품거래가 관련된 것이라 조금 커머스 적인 성격의 디자인이 들어가면 어떨까 싶습니다. 약간 더 신뢰가 가는 디자인이 필요할 것 같아요. (이건 제가 올드감성이라 그런걸수도;;;)

   말씀을 듣고보니 너무 가볍게만 만들었나 아쉬운 구석도 있네요!! 조금 더 믿을 수 있는? 느낌을 주는 방법 고민해보겠습니다. 피드백 정말 감사해요 xguru님 ㅎㅎ
"
"https://news.hada.io/topic?id=6794","Chrome OS Flex 얼리 억세스 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Chrome OS Flex 얼리 억세스 공개

     * Cloud-first, 빠르고, 관리하기 쉽고, 안전한 PC와 맥을 위한 새로운 크롬OS
     * 2020년 인수한 Neverware의 CloudReady를 통합한 것
     * 빠른 부팅, 샌드박싱을 통한 바이러스/랜섬웨어/피싱 차단
     * USB/네트워크를 통한 쉬운 설치 및 Google Admin 콘솔을 이용한 통합 관리
     * 기존 크롬OS와 같은 코드베이스 사용

   딱 인터넷 브라우징 용도로 쓰기에 적합할 듯 싶네요. 오래된 맥북에어에 설치 해볼까 합니다.
"
"https://news.hada.io/topic?id=6796","AWS Aurora Serverless v2 는 Serverless가 아니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               AWS Aurora Serverless v2 는 Serverless가 아니다

     * 사용하지 않을 때도 빌링 최소값인 0.5 ACU로 동작하며 중단되지 않음
       → 즉 한번도 호출되지 않아도, 월 $43이 최소로 빌링됨
     * '서버리스'라고 얘기하려면 사용하지 않을때 중단되어야 하지 하는데, 그렇게 동작하지 않는 것
       → Aurora Serverless v2는 auto-scaling 이지 서버리스가 아님

   이게 숨겨져 있는건 아니고, 문서에 그렇게 동작한다고 명확히 나와있긴 합니다. 용도에 맞게 사용하세요.
   https://docs.aws.amazon.com/ko_kr/AmazonRDS/…

     현재 Aurora Serverless v2 라이터와 리더는 ACU를 0으로 줄이지 않습니다. 유휴 Aurora Serverless v2 라이터 및 리더는 클러스터에 대해 지정한 최소 ACU 값으로 축소할 수 있습니다.

     해당 동작은 유휴 기간 후에 일시 중지될 수 있지만 새 연결을 열 때 다시 시작하는 데 시간이 걸리는 Aurora Serverless v1과 다릅니다. Aurora Serverless v2 용량의 DB 클러스터가 한동안 필요하지 않은 경우 프로비저닝된 DB 클러스터와 마찬가지로 클러스터를 중지했다가 시작할 수 있습니다
"
"https://news.hada.io/topic?id=6817","Map Projection Transitions","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Map Projection Transitions

   다양한 지도 프로젝션을 바꿔가며 확인 가능

   이렇게 프로젝션 종류가 많은지는 몰랐네요.
   다만 얘는 지도가 계속 이동해서 같은 장소를 두고 지켜보기가 어려운데
   누가 같은 위치만 두고 프로젝션만 자동으로 바뀌는 코드도 올려놨네요
   https://observablehq.com/@jrus/projection-transitions-nodrift
"
"https://news.hada.io/topic?id=6840","만화로 보는 Firefox 탄생  이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         만화로 보는 Firefox 탄생 이야기

     * 마이크로소프트는 1994년 모자익 소스코드를 구입해서 새로운 웹 브라우저인 인터넷 익스플로러를 개발하기 시작
     * 1년만에 인터넷 익스플로러(IE) 1.0을 출시하여 윈도95 사용자에게 무료로 제공
     * 1997년 출시된 IE 3.0 부터 MS와 경쟁에서 밀리기 시작
     * 1998년 3월 넷스케이프 네비게이터와 Gecko 엔진 소스코드를 공개하고 오픈소스 개발 활동을 지원을 위해 모질라(Mozilla)라는 팀을 만든다.
     * 넷스케이프 네비게이터의 시장 점유율은 5%이하로 떨어지고 1998년 결국 AOL에 인수
     * MS는 웹 브라우저 시장의 96%를 장악한 2001년 이후 IE6.0를 마지막으로 새로운 브라우저를 릴리스하지 않는다.
     * Gecko엔진 기반으로한 Netscape7이 , pop-up 블록 기능을 제외하자 따로 * 2000년 블레이크 로스(Blake Ross)라는 14살 모질라 인턴이 작은 브라우징을 지향하는 Firefox 개발 시작.
     * 훗날 웹킷 개발을 주도하는 데이비드 하얏(David Hyatt) 등이 참여 2002년 9월 23일 피닉스라는 이름으로 버전 0.1버전을 릴리스.
     * 2004년 11월 9일 새로운 이름인 파이어폭스 1.0 출시. 탭브라우징 등 지원.
     * 2005년 IE 7.0 출시: MS 4년만에 IE 메이저 업데이트.
     * 파이어폭스는 시장 점유율을 25%까지 올리면서 Web 2.0의 기폭제가 되었고 오픈웹을 내세우며 IE의 독점을 무너뜨리고 모든 웹브라우저가 웹표준 안에서 서로 경쟁할 수 있는 토대를 마련.

   링크가 안 열립니다 ㅠㅠ

   제가 쓴 UI/UX 히스토리
   https://github.com/black7375/Firefox-UI-Fix/…

   UI/UX의 역사네요. 정리 감사합니다!

   하지만 2008년에 크롬이 등장하면서 세를 확장하기 시작했죠.
   그래서 크롬을 메인으로 썼지만, 메모리 먹고, 배터리 녹는(?) 경험을 한 뒤로
   다시 파폭으로 돌아와 메인으로 쓰고 있습니다.
"
"https://news.hada.io/topic?id=6777","1993년 이후 가장 인기 있는 웹사이트 [유튜브]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      1993년 이후 가장 인기 있는 웹사이트 [유튜브]

   월간 방문자 기준 1~10위 그래프 변화 애니메이션

   X..X! 사롸있네!

   1등이 AOL → Yahoo → Google 로 그다지 재미가 없는데
   2등이 경쟁은 조금 흥미롭네요.
   Prodigy → Yahoo → MSN → AOL → Google → Yahoo → Facebook → Youtube

   2022년 현재의 순위는
   구글 > 유튜브 > 페이스북 > 트위터 > 인스타그램 > 바이두 > 위키피디아 > 얀덱스 > 야후 > XVideo
   근데 구글,유튜브,페이스북이 넘사벽이어서 4위 트위터/인스타 부터는 1/3수준으로 떨어지네요.
"
"https://news.hada.io/topic?id=6865","Metaverse Standards Forum","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Metaverse Standards Forum

     * 오픈 메타버스를 위한 무료 표준을 만들고, 다양한 활동을 하기 위해 모인 포럼
     * Meta, Microsoft, Nvidia, Unity 를 비롯한 AR, VR, Game 관련 다수 업체들이 참여
     * W3C, Khronos Group, OpenAR Cloud, Spatial Web 등 다른 단체들과 협동해서 만들어 나갈 것

   참여 업체에 구글과 애플이 없네요. 삼성도 안보이고요.
   국내에선 아주대학교 로고가 눈에 띕니다.
"
"https://news.hada.io/topic?id=6790","최고의 개발툴 발표는 어떤 건가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          최고의 개발툴 발표는 어떤 건가요?

   '개발툴을 만들어 발표하려는데 참고할만한 자료가 필요해요' 라는 HN의 질문에 대한 답들
     * 스티브 잡스의 NeXT 인터페이스 빌더 데모
     * 빌 게이츠의 Visual Basic 1.0 데모
     * Twilio Demo
     * Bret Victor의 Inventing on Principle
     * Light Table IDE
     * 2006년 제프 베조스의 AWS(S3) 인터뷰
     * IntelliJ Flow Analysis
     * 개발툴은 아니지만 Photosynth @ TED
     * Kelsey Hightower의 쿠버네티스 스케줄러와 테트리스 비교
     * a16z에서 $11M 시리즈 A를 받은 Meteor 피치자료

   ㅎㅎ 이런 질문과 답변도 재밌네요.
   NeXT 데모에서 인터페이스 빌더 데모는 23분부터 시작되네요 :)
"
"https://news.hada.io/topic?id=6767","Coinbase, 1100명 정리 해고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Coinbase, 1100명 정리 해고

     * 전체 직원의 18%에 해당
     * CEO曰
       → ""너무 빨리 성장했다""
       → ""10년이상의 경제 호황이후, 침체에 진입한것으로 보인다""
     * Coinbase 는 올해에만 주가가 80% 하락
     * 이번주에 이미 다른 Crypto 회사들이 정리해고를 발표했음
       → BlockFi 는 20% 감원, Crypto.com 은 260명, Gemini 도 10%
"
"https://news.hada.io/topic?id=6815","Tailscale SSH 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Tailscale SSH 공개

     * 자신의 Tailscale 네트워크내 장비간에 SSH 연결을 허용하고, 더 쉽게 인증 및 권한 관리 가능
          + SSH 키 관리 필요없음
          + WireGuard를 이용하여 SSH 연결을 인증하고 암호화
          + SSH가 Tailscale Identity를 사용
     * 고위험 연결(root)의 경우는 체크모드를 활성화 해서 SSO 재인증 요구 가능
"
"https://news.hada.io/topic?id=6871","warc-parquet - WARC를 Parquet으로 변환하는 CLI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                warc-parquet - WARC를 Parquet으로 변환하는 CLI

     * Web ARChive (.warc) 파일을 컬럼기반 Apache Parquet 포맷으로 변환해줌
     * DuckDB에 Parquet을 로드해서 편하게 쿼리 가능
     * Rust 오픈소스

   DuckDB - Embedded OLAP DB 오픈소스

   얼마전 올라온 WarcDB - Web crawl data as SQLite DB 와 비슷하네요.
   다만 Parquet 이용하는 인프라가 이미 있는 곳에서는 더 쓰기 편할듯
"
"https://news.hada.io/topic?id=6847","Tesla, 가상 발전소 서비스 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Tesla, 가상 발전소 서비스 공개

     * Virtual Power Plant (VPP)
     * Tesla Powerwall을 설치한 가정에서 전력 Grid에 연결하여, 전력이 부족한 위급상황에 자신의 배터리에 저장해둔 전력을 제공해주고 보상을 받는 프로그램
     * 파일롯 프로그램중에는 kWh당 $2의 보상 제공
     * PG&E와 협업하여 캘리포니아의 Grid를 안정화 하는데 기여
     * 약 5만대의 Powerwall이 VPP에 참여 가능해서, 위급할때 총 500MWh의 용량이 제공 가능할 것
"
"https://news.hada.io/topic?id=6805","Bunny Fonts - 개인정보를 보호하는 Google Fonts 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Bunny Fonts - 개인정보를 보호하는 Google Fonts 대체제

     * 오픈소스 웹 폰트 플랫폼
     * Zero Tracking & No-Logging 으로 GDPR 준수
     * Google Fonts CSS v1 API와 완벽히 호환
       → https://fonts.googleapis.com/css 를 https://fonts.bunny.net/css 로 교체하는 것만으로도 동작

   EU쪽 회사라서 GDPR을 준수하는 걸 강조하는거 같기는 한데..
   구글이 evil 이라 다른 회사의 웹폰트를 쓴다는 건 좀 이상한거 같기는 해요 ㅡ.ㅡ;;

   그럴바에야 그냥 셀프호스트 하는게 맞지 않나 생각도 듭니다.
"
"https://news.hada.io/topic?id=6885","박사학위 따면 좋은 점 - 세상에 더 많은 전문가가 필요한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  박사학위 따면 좋은 점 - 세상에 더 많은 전문가가 필요한 이유

   Matt Might - llustrated guide to Ph.D. (그림으로 본 박사학위)
     * 인류의 모든 지식을 원으로 표현
     * 초등학생, 고등학생, 학사, 석사, 박사에 이르는 과정을 원(인류의 지식)을 채워가는 과정으로 표현
     * 한 분야에서 가장 탁월한 전문가들은 인류가 아직 모르던 지식을 발견할 수 있다.
     * 이 표현 방식을 제시한 Matt Might의 아들은 불치병에 걸렸다.
     * 그와 아내 크리스티나 카사노바는 새로운 질병을 탐구할 수 있는 생물학 전문가들을 위한 기금을 만들었다.
     * 전문가들의 도움으로 그들은 아들이 희귀 유전병 NGLY1 결핍증이라는 것을 알게 된다.
     * 인류의 지식의 모서리 아주 작은 틈새에 불구한 그 연구의 결실이, 그의 아들에게는 거대한 도약이었다.

   Matt Might가 이 이야기를 모두에게 전하며 당부한 말입니다.
   Keep Pushing. 계속해서 모서리를 밀어나가세요.

   Emily Wapnick의 책 '모든 것이 되는 법'과 '다능인'을 소개하는 글 '여러가지 일을 할 수 있다는 건 애매한 게 아니다'를 남겼는데요, 많은 분들이 공감 해주셨던 게 생각나기도 하지만, 반대로 '전문가'의 필요성에 대한 이야기를 함께 보면 좋을 것 같다는 생각에 이미 많은 분들이 알고 계실 Matt Might의 '그림으로 본 박사학위'를 영상으로 만들었습니다.

   전문가가 될 수 없다면, 다능인이 될수도 있고
   세상에는 전문가도 필요하고, 다능인도 필요하고, 더 다양한 사람들이 필요하다.
   두 편의 이야기가 그런 식으로 이어졌으면 좋겠습니다.

   돌고돌아.. T 자형 인재가 참된 방향이지 않나 싶습니다

   T자형 인재도 좋죠!ㅋㅋ

   직접 쓴 컨텐츠를 몇 번 긱뉴스에 투고하는 게 뭔가 부끄럽기도 하고, 이렇게 해도 되나 싶기도 한데요.
   업보트와 다운보트, 카르마 시스템, 그리고 다양한 의견을 가진 커뮤니티의 자정작용 능력을 믿고 있습니다.
   만약 제가 쓴 글이 별로일 때는, 다운보트를 하고 의견을 적어 토론을 시작해주실 수 있으니 이렇게 해도 괜찮을 거라는 기대를 해봅니다.

   감사합니다.

   흥미롭습니다 자주올려주세용 :)

   정말로 감사합니다 bohblue23님!! 용기를 얻습니다!
"
"https://news.hada.io/topic?id=6773","Redbean 2.0 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Redbean 2.0 공개

     * Zip 파일에 html만 넣으면 6개 OS에서 직접 실행되는 웹서버
     * 취미프로젝트로 시작했지만, 이제는 Lua + SQLite가 호스팅 되는 1.9mb 크기의 복잡한 기능들을 제공
       → REPL 지원, Mbed TLS, 샌드박싱, argon2 패스워드 해슁, MaxMind IP Geolocation 등
       → Easy-Mode API 와 고수준 개발을 위한 웹프레임워크(Fullmoon) 제공
       → .args 파일로 명령행 인자 지정 가능
     * x86-64 Linux, MacOS, FreeBSD, NetBSD, OpenBSD 지원

   개인 프로젝트에 사용할까 하다가 개발 도중에 파일 수정할 때마다 zip으로 다시 묶어서 재실행하는 게 귀찮겠다 싶어서 제쳐 두었는데, 이번에 다시 보니 특정 지역 디렉터리의 파일들을 그대로 서빙할 수 있는 -D 옵션이 있네요.

   잠깐 시험해 봤는데 지역 파일의 수정 사항이 실시간으로 반영됩니다. 하위 디렉터리들도 인식하고요.

   와, 이게 신기한 프로젝트로 끝날 줄 알았는데..
   잘 지켜봐야겠습니다.

   Redbean - 파일1개로 실행되는 웹서버
"
