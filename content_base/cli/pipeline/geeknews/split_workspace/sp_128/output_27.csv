"https://news.hada.io/topic?id=3504","Adobe, 약속했던 대로 오늘 Flash Player 지원을 공식적으로 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Adobe, 약속했던 대로 오늘 Flash Player 지원을 공식적으로 종료

   2020/12/31 Flash Player의 지원이 중단됨에 따라 2021/01/12부터 Flash Player를 통해 실행되는 Flash 콘텐츠 또한 차단될 예정입니다.

   R.I.P.
"
"https://news.hada.io/topic?id=3572","Learn X by Doing Y","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Learn X by Doing Y

   - 뭔가를 학습 할 때 프로젝트 기반으로 배울수 있는 자료 모음. 검색가능
   ㅤ→ Project Based Learning
   - 프로그램 언어 : Javascript, Python, C/C++, Rust , Go..
   - 프레임워크 : Angular, Tailwind, NextJS..
   - 하드웨어 : Arduino, Raspberry Pi..
   - 그외 : Tensorflow, Keras, OpenCV 등
   - 약 1000개 가량 ( 깃헙에 추가 가능 )

   비슷하게 빠르게 뭔가를 배울수 있는 것만 모은
   - Learn X in Y Minutes https://news.hada.io/topic?id=1761
"
"https://news.hada.io/topic?id=3567","10기가비트 홈 네트워크 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           10기가비트 홈 네트워크 구축하기

   일반 사용자용 10기가비트 인터넷이 2018년 상용화된 이후, 지역 전화국에 10기가 장비가 들어오기 전 미리 10기가비트 홈 네트워크를 구축해보며 어떤 고민을 했고 어떤 장비를 어떤 이유로 선택했는지, 실제 구성 시 어떤 부분을 고려해야 하는지 등에 대한 내용을 정리해서 올렸습니다.
   Fun fact: Cat.5e 케이블을 이용해 10Gbps throughput이 나오는지도 테스트해 보았는데 아무런 문제가 없었습니다.

   10Gbe 구축시 고려해야할 점을 조목조목 설명해 주셔서 좋네요.
   특히 Cat 케이블 말고 DAC케이블 쓰라는 점은 저도 처음에 구축할때 몰랐다가 큰일 날 뻔했던 사항이네요.
   저는 극한의 가성비를 위해서 미크로틱 CRS305-1G-4S+IN 에다가 원래 쓰던 DIY NAS에 라우터용 OS인 opnsense (pfsense의 포크) 가상머신을 돌리고 있는데 성능 괜찮게 나오네요. 다만 Ubitquiti 의 이쁜 웹GUI는 부럽네요 ㅠ
   2020년 들어서 웬만한 새 보급형 메인보드에도 2.5기가 이더넷을 탑재하고 출시하기 시작해서, 얼마 안가서 가정용 가성비 10/5/2.5Gbe 장비들이 많이 출시하지 않을까 생각합니다.

   앗 저도 차기 홈네트워크는 Ubiquiti로 가보려고 생각중인데 좋네요.

   SOHO 수준으로는 Ubiquiti로 충분히 차고 넘칠 정도로 사용이 가능한 것 같습니다. 무엇보다 SW(UniFi OS)가 애플이 네트워크 사업에 진출했다면 이렇게 만들지 않았을까 싶을 정도로 UI/UX/반응성이 훌륭합니다. ㅎㅎ
"
"https://news.hada.io/topic?id=3561","Extension·dev - 크롬 확장으로 도구 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Extension·dev - 크롬 확장으로 도구 만들기

   - Contextual Internal Tools : 특정 페이지 위에서만 동작하는 확장 도구 만들기
   ㅤ→ 회사 내부용 도구를 크롬 확장으로 만들고, 기능 추가를 도와주는 개발 툴
   - 웹페이지에 버튼을 넣거나 설명을 넣는 등의 조작 가능
   - 웹페이지의 데이터를 추출해서 API호출하거나 처리
   - 접근 권한 관리
   - DB 및 API, SaaS 도구 접근 가능

   아직 개발자 프리뷰 단계인데, 재미난 아이디어 같아요.
   회사에서는 수많은 사내용 도구들(백오피스 라고 부르는)이 필요한데
   크롬 확장으로 그거를 더 편하게 만들거나, 다른 기존 도구를 확장하는게 가능하겠네요.
   Google Analytics 에 뭔가 사내 데이터를 조합해서 보이는 기능을 추가 한다거나
   실제 서비스 사이트를 사내용 확장 깔고 들어가면 별도의 메뉴를 보여주고 사용할수 있게 하는 것이 가능해 질 듯.

   웹 익스텐션 표준으로 할 수 있으면 Firefox / Safari 에서도 되지 않을까... 하는 생각이 얼핏 떠올랐습니다.
"
"https://news.hada.io/topic?id=3591","Be My Eyes - 시각장애인에게 시력을 주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Be My Eyes - 시각장애인에게 시력을 주세요

   - 시각 장애인 또는 저시력자를 돕는 무료 앱
   - 자원 봉사자들과의 실시간 영상통화를 지원
   ㅤ→ 도움 요청시, 사용 언어와 시간대에 기반해서 여러 봉사자에게 알림을 보내고 가장 먼저 응답하는 사람이 돕는 방식
   ㅤ→ 요청자의 카메라 영상을 보고 말로 설명
   - 150+개국, 180+개 언어, 27만명의 시각장애인, 450만명의 자원봉사자
   - iOS/Android
   - 기업들이 시각장애인들에게 직접 자신들의 제품에 대해 도와줄수 있는 연결도 제공
   ㅤ→ Microsoft, Google, P&G, Twitter, Clearblue..

   아이폰이 내 삶을 바꿨다 : 시각장애인 Austin 의 아이폰 사용기 - https://xguru.net/623

   위 링크는 제가 번역했던 10년전 글인데요.
   아이폰의 VoiceOver 가 시각장애인들에게 새로운 경험을 주었었는데, 이제 사람들의 도움으로 더 좋은 환경이 만들어 지는 것 같네요.

   MS가 만든 시각장애인용 앱 Seeing AI 도 있습니다.
     * MS의 이미지 캡셔닝 AI가 사람처럼 사진을 묘사하기 시작 https://news.hada.io/topic?id=3052
"
"https://news.hada.io/topic?id=3518","PhotoPrism - 개인 사진 관리 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       PhotoPrism - 개인 사진 관리 오픈소스

   - RAW 포맷 지원 : JPEG으로 보기 및 자동 인덱싱
   - TensorFlow로 이미지를 분류하고 검색지원 (날짜,위치,카메라,렌즈,색상,키워드,사물 등)
   - PWA로 만들어진 훌륭한 데스크탑/모바일 지원 웹 UI
   - 지도에서 사진보기 가능
   - WebDAV 로 원격접근 지원
   - 앨범의 링크 공유 가능
   - Exif 와 XMP 메타데이터 병합 및 관리
   - 중복 이미지 자동 인식
   - 도커로 설치가능한 Go + Vue 오픈소스

   https://news.hada.io/topic?id=3506 LibrePhotos - 구글 포토 오픈소스 대체제

   앗 한 발 늦었다....

   저도 찾고 있었어요 ㅋㅋㅋ

   아 경쟁자가 많군요.. 더 열심히 해야겠네요!..?

   LibrePhotos - 구글 포토 오픈소스 대체제 https://news.hada.io/topic?id=3506
   와는 또 다른 매력이 있는 사진관리 소프트웨어 입니다.
   사람 분류기능이 아직 안되는데, Roadmap 에 보면 얼굴인식도 개발 예정에 있네요.
   https://github.com/photoprism/photoprism/projects/5
"
"https://news.hada.io/topic?id=3570","BeagleV, 리눅스용 RISC-V 싱글보드 컴퓨터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BeagleV, 리눅스용 RISC-V 싱글보드 컴퓨터

   - 오픈소스, 오픈하드웨어
   - 듀얼코어 64bit SiFive U74 (1.5Ghz RISC-V), 8GB LPDDR4
   - Vision DSP, NVDLA*
   - 4K@60FPS 비디오 인코더/디코더
   - 2 x MIPI-CSI, 2x MIPI-DSI, 1 HDMI
   - 4 x USB 3.0 , 1 Gigabit 이더넷, 3.5 오디오 잭, 40pin GPIO, Micro-SD
   - 3월 얼리억세스, 9월 대량생산 목표
   ㅤ→ 얼리기준 8GB $149, 4GB $119
   * NVDLA : NVIDIA Deep Learning Accelerator

   https://riscv.org/blog/2020/…
   risc-v 를 이용해 rpi 처럼 오픈소스로 공개하는 보드도 있네요

   SiFive가 설계한 RISC-V 기반 U74 CPU를 중국의 RISC-V 칩업체인 StarFive가 생산하는 거네요
   - https://www.sifive.com/cores/u74
   RISC-V 와 SiFive 관련 설명은 긱뉴스 팟캐스트 20화에서 들으실 수 있습니다.
   - https://www.youtube.com/watch?v=F5sIQZvlJc8
"
"https://news.hada.io/topic?id=3577","Backslide - HTML 발표자료 쉽게 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Backslide - HTML 발표자료 쉽게 만들기

   - Remark.js 와 Markdown을 이용한 HTML 슬라이드 만들기
   - CLI 로 간단히 기본구조 생성하고 마크다운 편집
   - Sass 템플릿 생성기
   - 개발 서버 내장
   - CSS/JS까지 하나로 묶은 HTML 또는 웹사이트 로 Export해서 서비스 가능
   - 자동 PDF 변환 (Decktape 이용)

   개발관련 발표자료 만들기에 딱 좋네요.
   마크다운 편집하면, 개발서버가 브라우저에서 자동으로 리로드해서 보여주니 후다닥 만들수 있군요

   https://marpit.marp.app
   마크다운으로 슬라이드를 만드는 도구하면 이런 것도 있고,
   mdx-deck 도 좋은 대안 중 하나입니다.
   https://github.com/jxnblk/mdx-deck
"
"https://news.hada.io/topic?id=3606","Elastic, AWS가 사용 못하게 라이센스 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Elastic, AWS가 사용 못하게 라이센스 변경

   ""Amazon: NOT OK""
   - AWS 와 Amazon Elasticsearch 는 2015년부터 옳지 않은 일을 해왔고 점점 안 좋아짐
   ㅤ→ 이름도 가져다 쓰고, Open Distro 포크까지
   - Server Side Public License (SSPL) 과 Elastic License 로 듀얼 라이센스로 변경(기존 APL2)
   ㅤ→ 개인이나 기업 사용자는 차이 없음
   ㅤ→ 다만 클라우드 사업자들은 이제 Elastic과 협업없이 SaaS로 제공하지 못함

   AWS ElasticSearch로 오픈소스 기업 사업을 물먹인건 둘째치고, 이제보니 ElasticSearch 브랜드명을 허가없이 그대로 가져다 쓰고 있더라고요.
   거기다가 AWS 가 해당 서비스 론칭할때 ElasticSearch와 협업했다는데 실제로는 협업하지 않았고요. 그래서 고객들은 AWS서비스가 ElasticSearch에서 직접 제공하는 서비스인줄 알고 혼동한다고...합법여부를 떠나서 AWS행태가 지나치더라고요. 블로그글에서 AWS를 특정지어서 NOT OK 라고 공개적으로 비판할만합니다.

   오픈소스지만 SaaS 로 사용 못하게 하는 라이센스 방식은 많이들 도입하고 있습니다.
   - CockroachDB 라이센스 변경 - 오픈소스지만 상업화는 안됨 https://news.hada.io/topic?id=7
   - Sentry, BSL(Business Source License)로 오픈소스 라이센스 변경 https://news.hada.io/topic?id=870
   - Timescale, 멀티노드 TimescaleDB를 무료로 공개 https://news.hada.io/topic?id=2138

   + Mapbox https://news.hada.io/topic?id=3378
   이 글 말미의 문구가 한 번 더 떠오릅니다: ""클라우드가 오픈코어를 죽였다.""
"
"https://news.hada.io/topic?id=3605","Aegis - 안드로이드용 오픈소스 2FA Authenticator","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Aegis - 안드로이드용 오픈소스 2FA Authenticator

   - HOTP/TOTP 알고리즘 지원
   - 암호화 저장, 얼굴/지문 생체인증 언락
   - 조직 단위 및 그룹별 관리, 아이콘 지정
   - 검색 가능 (이름/발행자)
   - 백업 기능 지원
   ㅤ→ 안드로이드의 Storage Access Framework 지원하는 클라우드엔 자동 저장 지원(Nextcloud)
   - 임포트 가능
   ㅤ→ QR코드 스캔
   ㅤ→ 다른 OTP앱 : Authy, Google/MS Authenticator, FreeOTP, andOTP 등
   - 암호화된 파일로 Export (다른 앱에서 임포트 가능)
   - 매터리얼 디자인
   - 스크린샷 방지 기능

   구글 Authenticator 가 백업기능을 지원 안해서, Authy 를 많이 쓰긴 합니다만
   오픈소스로 깔끔하게 만들어서 괜찮은듯 합니다.
"
"https://news.hada.io/topic?id=3531","Unclack - 키보드 칠 때 마이크를 꺼주는 맥용 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Unclack - 키보드 칠 때 마이크를 꺼주는 맥용 앱

   - 화상 회의/영상 통화시 키보드 소리가 들어가지 않도록 자동으로 마이크를 꺼주는 앱
   - macOS 시스템 기능을 활용해서 어떤 마이크/영상통화 소프트웨어든 모두 지원
   - 켜두면 자동으로 키보드 입력을 감지해서 마이크를 음소거/해제

   마이크를 아예 꺼두면 되지 싶다가도, 회의중에 마이크 끄고 켜는게 애매하니 나름 쓸만할 것도 같습니다.
   Zoom은 스페이스바로 쉽게 뮤트/언뮤트 가능해서 그나마 편하긴 합니다만, 다른 것들은 그렇지 않아서요
   https://krisp.ai 는 소리를 통과시키면서 처리를 하는 건데,
   이건 키보드 입력 이벤트를 받아서 처리는 방식인가 보네요.
   전 Krisp 은 일반 통화시에는 괜찮은데, 유튜브 영상 녹화시에는 다른 문제가 생겨서 못쓰고 있습니다.
"
"https://news.hada.io/topic?id=3621","windows-rs : Rust for Windows","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     windows-rs : Rust for Windows

   - MS가 만든 오픈소스 Windows crate
   ㅤ→ MS가 언어별 SDK를 위해 제공하는 Win32 메타데이터 기반으로 개발
   - 다른 Rust 모듈 사용하듯이 편하게 Windows API 를 직접 호출
   - C++/WinRT 처럼, Rust 개발자들이 자연스럽고 관용적인 방법으로 Windows API를 호출할수 있게 설계 (natural and idiomatic way)

   작년에 베로나 라는 러스트 비슷한 언어 만든다고 했는데, 그거의 일환일 수도요.

   MS 내부에서 Windows의 일부를 Rust로 재작성하는 실험을 한 적도 있다니, MS 스스로의 필요에 의해 시작된 프로젝트일 수도 있겠다 싶습니다.
   https://news.hada.io/topic?id=1063

   Win32 Metadata 프로젝트 소개
   ""Making Win32 APIs More Accessible to More Languages""
   - https://blogs.windows.com/windowsdeveloper/2021/…
   요즘 MS는 정말 잘 하고 있는거 같아요. Win32 API를 이렇게 정리해서 공개해주는 것도 좋네요.
   다른 언어들도 Win32 API를 더 쉽고 편하게 호출할 수 있는 기반이 될듯
"
"https://news.hada.io/topic?id=3588","Altair - 크로스플랫폼 GraphQL 클라이언트 IDE","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Altair - 크로스플랫폼 GraphQL 클라이언트 IDE

   ""Postman for GraphQL""
   - GraphQL 쿼리 개발용 오픈소스 도구
   - 맥/윈도우/리눅스/웹 지원
   - 여러개의 환경 설정(local/stage/prod)
   - 쿼리 자동완성
   - 스키마 기반 쿼리 생성
   - 스키마 문서 검색 / 자동 리프레시
   - Subscription 지원 : Websocket, AWS AppSync, Rails Action Cable
   ㅤ→ 데스크탑 노티 기능 지원
"
"https://news.hada.io/topic?id=3625","개발자 or 연쇄살인범 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             개발자 or 연쇄살인범 ?

   얼굴 사진만 가지고 프로그래밍 언어 개발자인지 연쇄살인범인지 구분해 보는 퀴즈 사이트
   비슷한 사이트들 5개
   - 빅데이터 용어 or 포켓몬 : https://pixelastic.github.io/pokemonorbigdata/
   - 퀀트 펀드 or 헤비메탈 밴드 : http://www.quantfundormetalband.com/
   - Goth Band(고딕 록 밴드) or Moth : https://vole.wtf/goth-or-moth/
   - Prof or Hobo (교수 or 노숙자) : https://www.proforhobo.com/
   - IKEA or Death (이케아 제품 or 데스메탈 밴드) : http://ikeaordeath.com/

   저는 9/10점 기록했습니다. 얼굴보다는 사진의 특성(노이즈 등)을 보고 판별하게 되는군요

   ㅋㅋ 아.. 귀도반로섬을 못알아보고 살인범이라고 했네요... 괜히 죄송해지는군요..

   전 개발자 or 연쇄살인범은 6점 나왔네요. 어렵군요..
"
"https://news.hada.io/topic?id=3511","TabFS - 브라우저 탭을 파일시스템처럼 다루기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TabFS - 브라우저 탭을 파일시스템처럼 다루기

   - 브라우저의 탭들을 파일시스템 처럼 마운트 해주는 확장
   ㅤ→ 탭이 세개 열려있으면 폴더가 3개로 보임
   ㅤ→ 폴더안에 url.txt 는 주소 , title.txt 웹페이지 타이틀, text.txt 는 텍스트 내용
   ㅤ→ 폴더를 지우면 탭이 닫힘
   - 맥/리눅스 용 크롬/FF 브라우저 지원
   - 사용 가능한 모든 도구/언어로 브라우저 컨트롤이 가능 (브라우저 확장을 만들 필요 없이)
   [할 수 있는 작업들 예제]
   - 모든 탭의 제목만 보기
   ㅤ→ cat mnt/tabs/by-id/*/title.txt
   - 모든 스택 오버플로 탭만 닫기
   ㅤ→ rm mnt/tabs/by-title/*Stack_Overflow*
   - 모든 탭의 텍스트 내용을 파일로 저장
   ㅤ→ cat mnt/tabs/by-id/*/text.txt > text-of-all-tabs.txt
   - 원하는 스크립트 실행
   ㅤ→ echo 'document.body.style.background = ""green""' > mnt/tabs/last-focused/execute-script
   ㅤ→ echo 'alert(""hi!"")' > mnt/tabs/last-focused/execute-script

   와 재미있는 발상이네요! 윈도 지원이 안되어서 아쉽네요 ㅠㅠ

   오 상당히 매력적이네요. 한번 써봐야겠습니다.
"
"https://news.hada.io/topic?id=3585","최소한의, 그리고 안전한 Bash 스크립트 템플릿.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      최소한의, 그리고 안전한 Bash 스크립트 템플릿.

   "" 자전거를 타는 거랑 비슷해의 반대말은 '배시에서 프로그래밍하는 거 같아' 입니다.
   아무리 몇 번이나 무슨 짓을 하던 할 때마다 처음부터 다시 배워야 한다는 뜻입니다.""
   이 문구로 시작하는 이 글은, 여타 다른 프로그래밍 언어와 다르게 고개만 돌리면 까먹는 Bash 스크립트의, 작고 안전한 템플릿을 소개합니다.

   저도 맨날 까먹는...

   진짜 저만 그런게 아니었군요...

   이게 저만 그런게 아니였군요

   정말 배쉬 스크립트는 유독 계속 해도 까먹더라고요...
   왜 그런건지 정말 궁금하네요.
"
"https://news.hada.io/topic?id=3501","Do You Love Me? [video]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Do You Love Me? [video]

   - 보스턴 다이나믹스의 로봇들 Atlas, Spot, Handle이 노래에 맞춰 춤추는 영상
   ㅤ→ Atlas : 2족보행, 28개의 유압 조인트, 1.5m / 80kg
   ㅤ→ Spot : 4족보행, 84cm / 32.5kg, $75000(판매중)
   ㅤ→ Handle : 2바퀴로 움직이는 외팔 로봇, 3m팔로 15kg 까지 들수 있음
   * 노래는 The Contours 의 1988년도 곡 Do You Love Me?

   현대가 인수해서인지 음악만 한국노래로 바꾼것들이 나오네요. 묘하게 싱크로가 잘 맞습니다.
   이박사 몽키매직 : https://www.youtube.com/watch?v=QP2yapbF9i8
   Bot 내려온다 (범내려온다) : https://www.youtube.com/watch?v=9dWCuqxpwrg

   80키로 생각보다 가볍네요.

   3D 프린팅해서 무게 줄이면서 강도도 높였다고 하더군요. 저도 무게보고 놀라서 찾아봤습니다.

   보스턴 현다이나믹스

   이제 바위처럼만 배우면 현대 노조 가입할 수 있겠군요.

   현대가 인수해서 더 관심이 가는데요
   손에잡히는 경제에서 보스턴 다이나믹스의 주인이 바뀌는 사연과 상용화에 걸림돌이 되는 소음에 대한 자세한 이야기를 들을 수 있습니다.
   https://youtu.be/W8Ejbj6dnSQ?t=656

   오 재미나네요. 잘 들었습니다.

   헐.. 저보다 잘 추네요

   뭐 예전에 봤던 그 보스턴다이나믹스 영상과 비슷하겠지 하고 봤다가, 움직임이 넘 부드러워서 깜짝 놀랐네요.
"
"https://news.hada.io/topic?id=3590","제 사이드 프로젝트를 시작한지 2.5년만에 월 수입이 £ 500에 도달했습니다! (Show HN)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         제 사이드 프로젝트를 시작한지 2.5년만에 월 수입이 £ 500에 도달했습니다! (Show HN)

   '사이드 프로젝트에 시작한지 2.5년만에 월 수입이 500 파운드( 한화 72만 2천원 )에 도달했습니다.' 라는 글입니다.
   해당 글은 Show HN 카테고리인데요. 해당 카테고리는 다른 사람들에게 자신이 이룬 성과를 말하고 싶을 때 쓰는 카테고리입니다. 그러면 다른 사람들은 거기에 대해서 의견을 나누거나 피드백을 해주는데요. 의욕이 넘쳐나는 피드백들이 많으니 꼭 한번 읽어 보시길 추천드립니다 👍

   처음에 긱뉴스 만들면서 Ask/Show 기능을 만들어 놓긴 했는데 아직 공개를 못하고 있네요.
   올해는 꼭 공개하려고 합니다!

   언능 보고싶네요!

   👍
"
"https://news.hada.io/topic?id=3559","회의도, 데드라인도, 풀타임 직원도 없는 회사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       회의도, 데드라인도, 풀타임 직원도 없는 회사

   - 창작자를 위한 플랫폼 Gumroad의 일하는 방식 이야기
   - 총 25명이 일하지만, 대표 포함 누구도 풀타임으로 일하지 않음
   ㅤ→ 하지만, YoY로 85% 성장, 년 매출 120억달성, 창작자들은 1900억원을 벌었음
   - 우리가 일하는 방식을 카피하길 바라지 않음. 우린 큰 계획에 의한게 아니라 우연히 이렇게 되었음
   ㅤ→ 그래도 다른 사람들 또는 그들의 고객에 도움이 될거 같아서 정리해 봄
   [ Freedom at all costs, 무엇보다도 자유 ]
   - 2015년에 정리해고를 했지만, Gumroad 는 계속 성장
   - 그렇지만 풀타임(상근) 직원을 고용하고 샌프란시스코에 사무실을 두는 것은 불가능했음
   - BigBinary라는 인도 회사를 통해서 계약직을 고용
   - 이 계약직들이 회사를 살렸음. 내가 기능을 설계하고, 서포트 티켓에 답변하고, 새로운 걸 만드는 동안 그들이 버그를 잡고 사이트를 유지보수함
   - 정리 해고 했던 고객지원 담당 직원을 시간당 계약으로 재고용했음
   - 그러면서 Utah 로 옮기고, 풀타임 창작자가 되어보기로 함
   - Gumroad는 이제 1조 회사가 되지 못하지만, 나는 중요한 ""시간""을 얻었음. 이것으로 글을 쓰고 그림을 그리는 수업을 들음
   - 난 번아웃 상태였고, 필요이상으로 일하는 것에 대해 생각하고 싶지 않았기에, 난 ""미팅 과 데드라인 없는 문화""를 도입했음
   - ""어떤 대가를 치르더라도 성장"" 대신 ""어떤 대가를 치르더라도 자유(Freedom at all costs)""
   - 이 방식으로 Gumroad 는 수익을 유지하면서도, 취미를 위해 적절한 휴식을 취할수 있고, 시간이 지나면서 제품은 계속 개선 되었음
   [ How we work, 우리가 일하는 방식 ]
   - Gumroad 에서 일하는 것은 Rails같은 오픈소스 프로젝트에 일하는 것과 비슷. 하지만 오픈소스가 아니고, 돈을 받는다는 차이가 있음
   - 회의가 없는 대신, GitHub/Notion 그리고 가끔 Slack으로 얘기를 함. 24시간내에 답변을 받길 기대하며
   - 스탠드업 및 ""동기화(sync)""가 없기 때문에 명확하고 사려깊은 의사소통 방식이 필요
   ㅤ→ 모든 사람이 글(문서)을 잘 써야하고, 많이 써야함
   - 데드라인도 없음. 점진적으로 ship하고, 개발중인게 현재 프로덕션보다 좋을때 마다 배포함
   - 물론 세금처럼 특정 기한을 가지는 것들이 있긴 하지만, 원칙적으로 누구에게도 뭘 해야하는지, 얼마나 빨리해야 하는지 말하지 않으려고 노력함
   - 새로 누군가 조인하면, 다른 사람들이 하는 일을 함 : Notion 대기열에 가서 작업을 선택하고 일을 시작, 필요할때는 설명을 요청
   - 분기별 목표나 OKR을 사용하는 대신, 하나의 목표(북극성 지표)를 가지고 움직임 : ""창작자의 수익을 극대화 하는 것""
   - 이건 간단하고 측정가능하므로 회사의 모든 사람이 기능이나 버그수정의 가치를 계산할 수 있음
   - 하지만, 무자비하게 우선 순위를 정하진 않음
   - 사람들은 재미있는 일을 하거나 직관에 의존할 수 있음. 우리가 수익성을 유지하고 배포를 계속하는 한, 결국 중요한 것을 해내게 되기 때문
   - 공개된 로드맵은 창작자들이 우리가 이것을 책임지도록 함(accountable)
   ㅤ→ https://www.notion.so/gumroad/Roadmap-ce2ad07c483046e7941227ad7810730d
   - 거대한 제품들도 이런 방식으로 ship(배포)함
   - 2020년 11월에, 1년간 준비한 정기결제 모델인 Gumroad Membership을 런칭했고, 현재 수백명의 창작자가 월 150만불 이상을 벌고 있음
   ㅤ→ Gumroad, Membership 서비스 공개 https://news.hada.io/topic?id=3232
   - 멤버쉽 서비스를 개발한 엔지니어 Helen Hood 가 말하길,
   ""내 경력에서 가장 큰 제품 출시였고, 한번의 회의나 화상회의 없이 출시를 진행했어요.
   나는 개방형 사무실과 칠판,스탠드업 미팅 및 스프린트 계획이 있는 일반적인 스타트업에서 일해봤고,
   의사소통이 거의 없이 자신의 프로젝트만 보는 원격팀에서도 일해봤지만,
   Gumroad 에서 일하는 방식이 가장 이상적이에요.
   내 생산 시간을 극대화 하도록 해주고, 내 한계에 도달 하면 쉴수 있습니다.""
   이 말은 좀 광범위 하니까, 이걸 각각의 문서로 정리해보면
   ( 각 링크의 문서도 굉장히 재미납니다 )
   • 다음에 뭘 할지 어떻게 결정하나요? https://notion.so/gumroad/…
   ㅤ→ ""하루가 끝나갈때쯤 Gumroad에 다양한 감정이 듭니다. 예술 프로젝트와 별반 다르지 않아요. 우린 때때로 재미있고 일하기 좋은걸 선택합니다. 창작자들이 말하는 걸 듣는걸 좋아합니다. 어떤 일이 가치가 있는지 결정하기 위해 수많은 데이터 분석을 하지는 않습니다.""
   • 어떻게 의사소통 하나요? https://notion.so/gumroad/…
   ㅤ→ ""폰의 모든 알림을 끄세요""
   • Gumroad에서 일하는건 어떤 느낌인가요? https://notion.so/gumroad/…
   ㅤ→ ""우린 점진적,반복적으로 Ship하고 1년에 한번 대규모 핵심출시(tentpole launch)를 합니다. 매월 창작자가 얼마나 많은 수익을 얻었는지 확인하고 계속 진행합니다. 여행 자체가 재미난 것이지, 목적지에 도착하는 것을 기다리지 않습니다.""
   • Gumroad에서 안좋은 점은 ? https://notion.so/gumroad/…
   ㅤ→ ""성장의 여지가 많지 않습니다. 수익성을 유지하고 있고, 내년에 팀을 두배로 늘릴 계획같은건 없습니다. 몇가지 리더십 역할이 있을수 있지만, 그 수가 많지 않고 Gumroad의 커리어 패스에 포함되어 있지 않습니다""
   - Gumroad 의 Chris Maximin 이 말하길,
   ㅤ""이렇게 일하는 방식은 제가 경함한 최고 수준의 생산성을 보여줍니다.
   ㅤ실제 업무에만 집중할수 있도록 하기에 회사와 근로자 모두에게 이익이 되는 선순환을 만듭니다.
   ㅤ1) 회사는 끝없이 쓸모없는 회의에 참석하기 위해 값비싼 엔지니어를 고용할 필요가 없고
   ㅤ2) 엔지니어가 더 많은 일을 하고 배우게 됩니다.
   ㅤ이게 장기적으로는 그들에게 더 이득입니다""
   - 이것은 꼭 엔지니어에게만 해당하는 것은 아님
   ㅤ→ 고객지원, 위험관리, 콘텐츠, 성장, 제품 우선순위 결정, 디자인 피드백 등이 다 이런 방식으로 처리됨
   [ Minimum Viable Culture, 최소 실행 가능 문화 ]
   - 이렇게 일하는 방식은 모두에게 맞지는 않음
   - Retreat(휴양,수련회 등의 의미)도 없고, 슬랙에 소셜 채널도 없음. 성장의 기회도 제한적임. 큰 회사들이 제공하는 보상패키지 들과는 경쟁할 수 없음
   - 하지만 우린 유연성(flexibility)에서 경쟁하고 이길수 있음
   - Teachable 의 제품담당 부사장이었던 Sid Yadav는 2018년에 Gumroad에 조인했음. 그가 말하길
   ㅤ""대부분의 기업가들은 두가지 옵션이 있습니다.
   ㅤ풀타임 직업을 가지고 밤/주말에도 일하거나,
   ㅤ직장을 그만두고 회사를 시작하는 위험을 감수하기.
   ㅤGumroad는 세번째 방법을 제공합니다.
   ㅤ난 일주일에 20~35시간만 계약해서 일하고,
   ㅤ일주일에 이틀정도는 내 새로운 일을 위해 아이디어를 키울수 있었습니다.""
   2020년에 Sid는 Gumroad를 떠나서 자신의 창작자 이코노미 회사인 Circle https://circle.so/ 을 차림. 다른 Gumroad 동료와 함께
   ㅤ→ Circle은 회원제 유료 커뮤니티 플랫폼
   - Gumroad 에서 일하는 것은 누군가의 정체성의 전부가 아님
   ㅤ→ 자신의 시간과 에너지를 쓸 삶의 다른 부분( 창의적인 부업, 가족, 그외 많은 것들)을 위해서 필요한 만큼만 Gumroad 에서 일함
   - Gumroad 엔지니어인 Nathan Chan이 말하길,
   ㅤ""나는 내 경력에 있어 다른 어떤 회사보다, 내 시간으로 더 많은 가치를 만들고 있음.
   ㅤ육아에 완전히 참여하고 내 아이가 자라는 것을 볼수 있음""
   - 이것엔 나도 포함됨(창업자인 Sahil)
   ㅤ→ 2011년부터 2016년까지 Gumroad를 구축하는 것이 인생의 유일한 목표였음
   ㅤ→ 요즘은 취미처럼 내 삶의 일부임
   ㅤ→ 예를 들어 요즘은 재미로 그림을 그리고, 가끔씩 그림을 판매함
   [ Company of Creators, 창작자들의 회사 ]
   - 어느날 Daniel Vassallo로부터 이메일을 받음. 그는 Gumroad 에서 1년에 25만불(2.8억)을 버는 창작자였기에 이미 누군지 알고 있었음
   - 그가 우리 서비스를 이미 사용하고 있었기에, 다음에 해결할 문제가 뭐고, 자신이 뭘 도울수 있을지에 대한 아이디어가 있었음
   ㅤ""저는 Gumroad를 사랑해요(이걸로 살아가고 있죠!).
   ㅤ제품의 범위와 전략을 좋아하고 있어서, 내가 PM 작업을 맡을수 있다고 생각합니다.
   ㅤ하루에 평균 2시간 정도만 할애 할 수 있겠지만, 매일 가능해요.
   ㅤ이게 당신들이 원하는 방식의 Commitment인지는 모르겠지만, 이게 가능한 곳이 Gumroad라고 생각합니다.""
   - 이건 완벽하게 잘 맞았고, Daniel 은 우리의 Head of Product 가 되었음.
   - Gumroad 에도 큰 도움이 되는게, Daniel 이 Amazon 에서 그만두기 전에 그는 일년에 40만불을 벌었지만, 우린 그에게 일년에 12만불만 지불합니다.
   - ""어떻게 그렇수 있냐구요? 그는 일주일에 10시간만 일합니다""
   [ Getting Paid, 급여 받기 ]
   - 실제로 우린 각자의 Role에 따라 시간당 비용을 지불합니다. 범위는 시간당 $50(고객 지원) 에서 $250(Head of Product) 까지 다양합니다.
   ㅤ→ ( 그러니까 Daniel은 하루에 2시간 500달러씩 일년에 240일 = 12만불 받고 일하는 것 )
   - 최근에 나는 전세계적으로 급여를 표준화 했습니다.
   ㅤ→ 근무자가 샌프란시스코, 방갈로(인도), 라고스(나이지리아) 등 위치에 상관없이 동일한 급여
   - 이 급여는 인터뷰 프로세스 중에 서로 협의.
   ㅤ1. 양식을 통해서 지원
   ㅤ2. 급여를 받지 않는, 몇시간 짜리 챌린지를 진행
   ㅤㅤㅤ→ Gumroad 에서 실제 일하는 상위 레벨 업무와 비슷.
   ㅤㅤㅤ→ 큰 배포를 쪼개거나, 새 기능의 스키마를 디자인하거나, 고객센터의 아티클을 작성하거나)
   ㅤ3. 급여를 받는, 몇주짜리 Trial 기간을 거침.
   ㅤㅤㅤ→ Gumroad 에서 매일 진행하는 업무와 비슷
   ㅤㅤㅤ→ 버그 수정, 기능 배포, 고객 지원 티켓 답변
   - 회사내에 모든 사람의 평균 근무시간과 받는 급여를 정리한 문서가 있음. 이걸 통해서 각 팀이 보상결정을 할때 대표만큼 정보를 가질수 있음
   - ""잔업 방지(anti-overtime)"" 비율이 있어서, 일주일에 20시간이 넘어가면 급여의 50%만 받으며 더 일할수 있음.
   ㅤ→ 이걸 통해서 가장 높은 레버리지 작업에 대해 높은 시간당 레이트를 가질수 있고, 사람들이 원하면 주당 더 많이 일할수 있음.
   - 이 유연성과 현금 외에는 어떤 종류의 특전도 없음
   - 분명히 말해두지만, 의료서비스를 제공하지 않음. 모든 직원은 자신의 건강관리에 대해 책임이 있고, 자신의 전화/노트북/인터넷 및 기타 필요한 것을 모두 각자 지불해야함.
   - 이 시스템에는 단점이 있음. 사람들은 자신이 일하는 시간을 추적해야함. 어떤 사람들은 일이 조금 더 많거나 적더라도 그냥 일주일에 20시간만 청구하기도 하고, 어떤 사람들은 15분단위로 부지런히 추적해서 매우 자세한 청구서를 보내기도 함
   - Daniel 이 Quater-time(하루 8시간중 2시간만 일하는) Head of Product로 합류한 후, Randall Kanna도 Head of Community 로, Philip Kiely 도 Head of Marketing 으로 모두 2시간만 일하는 형태로 합류했음. Randall,Philip 역시 모두 Gumroad 창작자 이기도 함.
   - 창작자들은 자신이 뭔가를 만들어서 돈을 버는데, Gumroad 도 똑같이 할수 있지 않을까요 ?
   ㅤ→ 이게 바로 Creator Economy(창작자 경제)에서 일하는 느낌이어야 합니다.
   [ The future of work is not working, 일의 미래는 일하지 않는 것 ]
   - 최근에, 저는 풀타임 직원없이 회사가 성장하는 것이 잘못되었다고 생각해서 전체 풀타임 근무에 대해서 얘기했지만..
   ㅤ""아무도 받아들이지 않았습니다.""
   - 그때 내가 ""normal""한 방식으로 일해서 기분이 좋아지기 위해, 망가지지 않은 것을 고치려 한다는 것을 깨달았음
   - 우리가 이미 하고 있는 방식이 멤버들이 우선 순위를 두고 있는 것에 더 좋음.
   ㅤ""freedom over growth, sustainability over speed, life over work.""
   ㅤ""성장보다 자유, 속도보다 지속가능성, 일보다 삶""
   - Gumroad 홈페이지에는 이걸 사용하려는 창작자에게 장점에 대해 명확히 설명.
   ㅤ""9-5시 일하는 것에서 벗어나서, 양복과 넥타이를 벗고, 통근을 버리세요.
   ㅤ당신의 작업물(craft)에 대한 대가를 받으세요""
   - ""진부하지만(cliché) 우리는 창작자를 위한 창작자의 회사가 되고자 합니다.""

   참고할만한 스타트업!

   정말 멋진 회사!!

   무척 신기합니다.

   제가 Hada 와 GeekNews 를 만들고 운영하는 방식과 거의 비슷합니다. ㅎㅎㅎ
   긱뉴스도 서두르지 않고 천천히 기능을 만들고 사용자를 늘려가고 있어요.
   2015년에 정리해고를 했던 경험들을 포함한 Gumroad 창업자의 이야기는 아래 글에서 자세히 보실수 있습니다.
   - 1조 회사를 만들다 실패한 경험 이야기 https://news.hada.io/topic?id=2
   글에서 언급한 Head of Marketing 인 Philip Kiley 가 이 내용이 진실이라고 자신의 의견을 적었습니다.
   - https://news.ycombinator.com/item?id=25674516
   이 글의 제목처럼 Gumroad 와 비슷하게 회의/데드라인/상근 직원 없는 회사만 모아보는 페이지도 벌써 생겼습니다.
   - https://creatorjobs.co/

   xguru님. 그런데, Hada와 GeekNews에서도 작더라도 매출이 발생하나요?

   네 현재 트래픽 수준에서는 일반 광고를 붙이는 것 보다는 많이 벌고 있어요.
   올해는 좀 더 늘어나길 바라고 있습니다 ;)

   제가 보기에도 이상적인 회사네요. 5시 이전 퇴근과 주 4일 근무를 옛날 부터 꿈꾸었는데 전자는 이루었는데 후자는 멀었네요.
"
"https://news.hada.io/topic?id=3536","GitHub이 이제 Iran에서 완전히 사용가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GitHub이 이제 Iran에서 완전히 사용가능

   - 미국의 제재로 사용이 불가능했던 이란의 회사/개인 들이 모두 사용이 가능
   - 2년간의 노력끝에 GitHub이 미국 재무부의 해외자산관리 부서(OFAC)로부터 적법한 라이센스를 획득
   - 비슷한 제재국가인 Crimea 와 Syria 의 라이센스도 획득 예정

   정치적 이유로 GitHub가 차단되다니..
   그래서 그런가 중국이 열심히 공개 저장소들 긁어가더군요.

   중국은 더 할말이 없긴 하지만여 (... ) 생각해보면 해볼 수록 우울한 세계입니다.

   이틀전에 한 미국회사의 직원이 이란에 가족을 방문했다가 GitHub 을 접속했다는 이유로 그 회사의 전체 계정이 차단되는 이슈가 있었습니다.
   - https://twitter.com/sebslomski/status/1344219609923276801
   이 이슈에 대해 깃헙 CEO인 Nat Friedman 이 확인해보겠다고 한뒤에 얼마 안있어 이런 글이 올라온거네요.
   너무 타이밍이 절묘해서, 이미 할 수 있었는데 안한거 아니냐고 물어보니 Nat 는 정말 우연한 타이밍의 일치라고 얘기했습니다. 2년간 노력해서 거의 끝나가는 와중에 저 이슈가 터진거였다고 하네요.
   - https://news.ycombinator.com/item?id=25648849
"
"https://news.hada.io/topic?id=3563","Theseus OS - Rust로 만든 OS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Theseus OS - Rust로 만든 OS

   - 새로운 OS구조, 더 나은 상태 관리(*) 및 리소스 관리 책임을 OS에서 컴파일러로 넘기는 방법을 실험하기 위해 처음부터 Rust로 개발한 현대적인 OS
   - 리눅스/WSL/맥/도커 환경에서 빌드 및 실행(QEMU) 가능
   * State Spill 문제를 해결 : 어플리케이션들과 OS가 통신해서 실행될 때, 시스템이 크래쉬되거나 하더라도 OS가 관리하고 있는 각 어플리케이션의 상태를 독립적으로 유지할 수 있도록 만드는 것
   OSDI 2020 에서의 Theseus OS 발표 : https://www.youtube.com/watch?v=j4ZPZoPNjkw

   계속 새로운 OS는 만들어지는데, 이런 OS는 어디에서 사용될까요...

   해당 OS도 포함해서 이런거 대부분은 대학원생 논문용 OS라서 우선 실생활 이용보다는 새로운 OS이론 Proof용으로 내놓는 경우가 많은거 같습니다.
   이런거 쌓여서 지금 사용되고 있는 OS들이 더 발전하겠죠.
"
"https://news.hada.io/topic?id=3607","Novel Writer - 소설가를 위한 마크다운 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Novel Writer - 소설가를 위한 마크다운 에디터

   - 소설 작성 및 여러개의 작은 텍스트 문서로 된 대규모 프로젝트용 에디터
   - 맥/윈도우/리눅스 지원 오픈소스(파이썬+Qt5)
   - 노트(소설의 각 챕터)들을 폴더로 관리하여 드래그엔 드롭 지원
   - 노트에 메타 키/밸류 태그 및 크로스 레퍼런스 가능
   - 프로젝트 아웃라인 보기를 통해 챕터/씬 관리
   - 한개의 문서로 만들어서 HTML, ODF, 마크다운, PDF등 Export

   요즘 이런 류의 툴은 electron 기반으로 만드는게 보통인데 파이썬+qt 라니 새삼스럽네요 :)

   Ulysses , Scrivener 등의 오픈소스 대용이라고 보면 될 듯
   - https://ulysses.app/
   - https://literatureandlatte.com/scrivener/

   Scrivener는 저도 몇년 전에 다운을 받았는데, 진짜 소설 쓸 때 이렇게 쓰는지 알 수가 없으니..ㅠ
"
"https://news.hada.io/topic?id=3534","Trends의 2021년 예측","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Trends의 2021년 예측

   유료 뉴스레터 Trends의 올해 예측 요약
   - 온라인/가상 이벤트가 더욱 활성화
   - DeFi의 성장과 새로운 앱들. 이더리움 2.0
   - 주요 플랫폼의 언번들링 가속
   ㅤ→ Google Suite : Notion & Airtable
   ㅤ→ Adobe : Figma & Procreate
   ㅤ→ 틈새 사용자 시장으로도 언번들링 될것 : Patreon → OnlyFans, Twitter → Parlor
   - 헬스 테크(Sleep Number, Oura), 바이오해킹(CRISPR 키트), 운동 테크(Cubii, Zwift)
   ㅤ→ AlphaFold 가 수십년간 혁신의 길을 만들어 줄 것
   - AirBnB의 시가총액이 3배가 될 것
   11월에 있었던 향후 유망 산업 내용도 포함
   - 창작자 경제의 활성화
   - 오디오 관련 새로운 서비스의 출현 : Clubhouse, Rodeo..
   - 교육의 재발명 : ZipSchool
   - Privacy Awareness 가 더 중요하게
   - 남성들의 정신건강 관련이 메인 스트림으로 : 기존에 터부시 되었던 남성 그루밍/섹슈얼 웰니스가 메인스트림이 되었듯이
   ㅤ→ https://www.reddit.com/r/malementalhealth/
   - 긱 이코노미에 더 젊은 사람들이 참여
   - 실시간 글루코즈 모니터링 (당뇨)
   - 트럭 산업 : 미국에 트럭운전자가 3.5백만. 그들을 위한 도구와 서비스가 생겨날 것
   - 뉴스레터는 이미 레드오션. 지금 성공한 뉴스레터들은 5~8년전에 시작했음. 진짜 승자들은 이 컨셉을 새로운 매체로 가져가려 할 것.
   - 헬스 테크 : 웨어러블, 슬립 관련, CO2/글루코즈 모니터링, 스탠딩 데스크, Kombucha
   - 테슬라가 AR 글래스 전쟁에서 이길 것임 : https://thehustle.co/09152020-ar-glasses/

   의외로 노트앱 관련 언급은 없군용. 노션이랑 Roam의 경쟁이 기대되는데...
   곰곰히 생각해보니 둘 다 써보고 있는데, 두 개 포지션이 딱히 곂치는 것 같지는 않아서 의외로 공생으로 가지 않을까 생각도 드네여.
"
"https://news.hada.io/topic?id=3620","AWS가 Elasticsearch와 Kibana의 오픈소스 fork 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AWS가 Elasticsearch와 Kibana의 오픈소스 fork 발표

   - Elastic의 라이센스 변경(SSPL)으로 오픈소스가 아니게 되었으니,
   ㅤAWS가 마지막 Apache 2 라이센스 버전(7.10)을 포크해서 별도의 오픈소스로 유지 하겠다는 것
   - 현재 2019년부터 운영중인 Open Distro for Elasticsearch 배포본에도 이 오픈소스 기반 버전으로 적용 예정

   Kibana 오타일까요?

   윽 수정해두었습니다 ㅠㅠ

   Elastic, AWS가 사용 못하게 라이센스 변경 https://news.hada.io/topic?id=3606
   그리고 글 안에도 링크가 있지만 OSI(Open Source Initiative) 에서는
   ""Elastic의 SSPL 은 오픈소스 라이선스가 아니다"" 라는 글을 올렸습니다.
   https://opensource.org/node/1099
"
"https://news.hada.io/topic?id=3539","내가 소프트웨어 업계에서 45년간 배운 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내가 소프트웨어 업계에서 45년간 배운 것

   천공카드부터 클라우드까지 45년간 일해온 엔지니어가 은퇴하면서 남긴 교훈들

1. 지식의 저주를 조심하세요

     * 뭔가를 알게 되면, 그걸 모르는게 어떤건지를 상상할수 조차 없게 됨
     * 이게 많은 오해와 비효율성의 원인
     * 복잡한 것에 익숙한 똑똑한 사람들이 더 그런 경향이 있음
     * 지식의 저주를 경계하지 않으면 코드부터 의사 소통 하는 것 까지 모두 이해하기 어렵게 됨
     * 청중을 이해하려고 노력하고, 처음 배울때 어땠는지를 상상 할 것

2. 기초에 집중하세요

   기술은 계속 변화하지만, 소프트웨어 개발에 대한 기초들은 이 트렌드를 뛰어넘음
   오랜시간 유효할 여섯가지 기초
   ㅤ→ 팀 워크 : 훌륭한 팀이 위대한 소프트웨어를 만듭니다. 팀워크를 당연시하지 마세요
   ㅤ→ 신뢰 : 팀은 신뢰의 속도로 움직입니다. 함께 일하고 싶은 신뢰할수 있는 사람이 되세요
   ㅤ→ 의사 소통 : 정직하고 적극적으로 의사소통 하세요. 지식의 저주를 경계하세요
   ㅤ→ 합의 추구 : 전체 팀이 같이하는 시간을 가지세요. 토론과 불일치를 통해서 최고의 솔루션을 찾아보세요
   ㅤ→ 테스트 자동화 : 잘 테스트된 코드는 팀이 자신감을 가지고 빠르게 움직일수 있게 합니다.
   ㅤ→ 깔끔하고 이해하기 쉽고 탐색가능한 코드와 설계 : 코드를 인수할 다음 엔지니어를 고객이라고 생각하세요. 후임자가 읽고 유지보수하는데 문제가 없는 코드를 작성하세요.

3. 단순성

     * 복잡성과 싸우는 것은 끝이 없는 원인
     * 솔루션은 가능한 간단해야 함
     * 내 코드를 유지보수할 다음 사람이 나만큼 똑똑하지 않을거라고 가정하세요.
     * 더 적은 기술로 할 수있다면 그렇게 하세요.

   ""디자이너에게 완벽함이란, 추가할 것이 없을 때가 아니라 제거할 것이 없을때 입니다."" - 생 택 쥐페리

4. 먼저 이해하기

     * 스티븐 코비의 7가지 습관중 하나는 ""먼저 이해하고, 다음에 이해시키기""
       ㅤ→ 이 말이 다른 어떤 조언들보다 좋은 리스너이자 팀 동료가 되도록 도와주었음.
     * 다른 사람들에게 영향을 미치고 효율적으로 협력하고 싶다면 먼저 그들을 이해해야함.
     * 자신의 생각을 알리기 전에, 적극적으로 그들의 감정과 아이디어, 관점을 이해할수 있도록 경청하세요.

5. Lock-in 에 주의하세요

     * 소프트웨어 제작 방식에 혁신을 가져올 차세대 생산성 도구들은 항상 있을 것.
       ㅤ→ CASE, COTS, ERP, Ruby 등.
     * 그들은 전체적으로 자신의 개발철학을 채택하면 비용과 시간을 절감할수 있다고 주장하지만, 선행비용 또는 그로 인해 발생하는 제약들은 명확하지 않음.
     * 락인은 주로 소프트웨어 공급자들한테 일어났지만, 요즘은 프레임워크들에도 발생함
     * 락인은 변경에 상당한 비용이 발생함
     * 현명하게 선택하세요. 새로운게 항상 좋은 것은 아닙니다.

6. 정직하고, 역할에 맞지 않을 때는 인정하세요

     * 경력의 어느 시점에서 자신이 적합하지 않은 역할을 맡게 될 수 있음
     * 나쁜 핏은 캐릭터의 결함은 아니지만, 무시해서는 안되는 문제임
     * 이 딜레마 대한 해결책은 한가지 이상일수 있음
       ㅤ→ 당신이 진화하거나
       ㅤ→ 역할이 진화하거나
     * 중요한 건 ""어떤 일이 일어나고 있으며, 이 곳에서 벗어나려면 어떻게 해야하는지""에 대한 자기 지식을 가지는 것

   좋은 조언들이 지금까지 많이 올라왔었는데요. 한 개만 더 붙여보면 이 글을 뒤에 붙여보고 싶네요.
   https://news.hada.io/topic?id=2060
   물론 이 글도 어마어마하게 좋지만. 위 글은 좀 더 범용적인 측면에서( 소프트웨어에 국한되지 않고 ) 되돌아볼게 많았던 조언이었던 것 같습니다. 이런 것들을 모아놓아서 필요할때마다 꺼내 보면 참 좋을 듯한..

   와우~ 기술과 사람에 대해 통찰이 담겨있는 말이네요. 멋집니다~!

   결국 일은 컴퓨터가 아닌 사람이 한다는 선배의 말이 떠오르네여
   좋은 글 감사합니다

   입문자로서 새겨듣겠습니다!

   좋은 글 공유 고맙습니다. 찬찬히 읽고 곱씹어 볼 내용이 여럿 있네요.

   와 내용 너무 좋네요... 감사합니다.

   귀한 글 감사합니다!!
"
"https://news.hada.io/topic?id=3626","Rysolv - 오픈소스 이슈를 해결하고 돈 벌기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Rysolv - 오픈소스 이슈를 해결하고 돈 벌기

   - 오픈소스의 특정 이슈에 대해서 보상금을 걸면, 다른 사람이 그걸 해결하고 돈을 받아가는 사이트
   - 자신의 오픈소스 거나, 자신이 후원하고 싶은 프로젝트도 가능
   - 깃헙 이슈를 임포트 하거나 다른 사람이 올린 이슈에 추가 보상금을 넣는 것도 가능
   - 자신이 올린 PR이 머지되면 보상금을 수령 (Paypal)
   - 수수료는 10%

   OSS 프로젝트를 해보고 싶은데, 서포터는 잘 안 동작할 것 같고, '이슈가 있으면 돈 내, 먼저 해결해줄께.' 라는 모델은 어떨까 생각해본 적이 있는데 실행에 옮긴 사람들이 있군요. 잘 동작했으면 합니다.
"
"https://news.hada.io/topic?id=3516","JSON Lines 포맷ines 포맷

   ""Newline Delimited JSON""
   1. UTF-8 인코딩
   2. 각 라인은 유효한 JSON 값(객체)이어야 함
   3. 라인 구분자는 '\n'
   한줄 당 하나의 JSON 객체가 들어가는 데이터 저장 포맷
   ㅤ→ 데이터 스트리밍에 적합
   ㅤ→ 중첩구조 처리가 쉬움
   ㅤ→ .jsonl 파일 확장자를 추천
"
"https://news.hada.io/topic?id=3522","Rust 디자인 패턴들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Rust 디자인 패턴들

   러스트 언어의 특이점 및 디자인을 활용한 Idiom 과 Design Pattern, Anti Pattern 정리
   Idioms
   1. Concatenating Strings with format!
   2. Constructor
   3. The Default Trait
   4. Collections Are Smart Pointers
   5. Finalisation in Destructors
   6. mem::replace(_)
   7. On-Stack Dynamic Dispatch
   8. Iterating over an Option
   9. Pass Variables to Closure
   10. Privacy For Extensibility
   11. Easy doc initialization
   12. Temporary mutability
   Design Patterns
   1. Builder
   2. Compose Structs
   3. Fold
   4. Newtype
   5. RAII Guards
   6. Prefer Small Crates
   7. Contain unsafety in small modules
   8. Visitor
   Anti-patterns
   1. #[deny(warnings)]
   2. Deref Polymorphism

   Rust 패턴을 익히는 조금 편한 방법으로,
   작성한 Crate 의 시작부에
   ㅤ#![warn(clippy::all)]
   를 넣으라는 추천이 있더군요. 기본적으로 Rust 의 linter 를 동작시켜서 코드에 대해서 확인하고 다양한 추천을 보여주도록 하는 옵션입니다.
   https://github.com/rust-lang/rust-clippy
   여기 보면 400개가 넘는 Lint 들이 등록되어 있습니다.
"
"https://news.hada.io/topic?id=3601","Deskreen - 어떤 기기든 두번째 화면으로 만들어주는 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Deskreen - 어떤 기기든 두번째 화면으로 만들어주는 앱

   - 웹브라우저가 실행되는 모든 기기의 화면을 두번째 화면으로 사용 가능
   ㅤ→ WiFi 기반으로 연결
   ㅤ→ 윈/맥/리눅스/타블렛/폰
   ㅤ→ Display Dummy Plug를 사용하면 모니터 설정에서 두번째 모니터 화면인 것처럼 원격화면을 관리 가능
   ㅤ→ 메인 피씨에서 Deskreen 실행후 스마트폰/타블렛의 카메라로 QR코드 촬영하면 바로 연결
   - 화면 공유 / 특정 앱 공유
   ㅤ→ 여러대의 장비로도 동시에 공유 가능
   * Dummy Display Plug 는 HDMI,DP,Mini DP 등에 꼽아서, 마치 컴퓨터에 디스플레이가 꼽힌 것 처럼 인식되게 해주는 가짜 어댑터
   ㅤ→ 이걸 꼽아서 모니터가 하나 더 붙은 것 처럼 인식시킨후, Deskreen 앱으로 그 화면을 쓰는 방식

   별도 장비를 쓴다니 신기하네요...

   아마존 뒤져보니 4K@60hz 지원하는 Dummy HDMI 가 6개에 $16 정도 하더군요
   https://amazon.com/gp/product/…
   하지만! 비슷한 제품이 알리에서는 한개에 $0.86 입니다. 배송료랑 기간 잘 생각하셔서 사시면 괜찮을듯?
   전 주변 분들 나눠주려고 여러개 주문했네요.
   https://ko.aliexpress.com/item/4000203277708.html
   혹시나 하고 찾아보니, USB-C 용 더미는 1920x1080@60HZ 밖에 없고 1개에 $13이나 하네요. 이건 알리에서도 거의 비슷한 가격으로 비싸요.
   https://amazon.com/Cablecc-Virtual-Headless-Emulator-1920x1080p/dp/…

   예전 맥북 프로를 가지고 있다면 mini dp 제품도 있네요. 가격은 좀 나가지만
   https://ko.aliexpress.com/item/32814865211.html/…_

   BetterDummy - 인텔/M1 맥용 가짜 소프트웨어 HDMI 어댑터
   소프트웨어 더미 HDMI 어댑터
"
"https://news.hada.io/topic?id=3573","2020 게임게임

   - 2020년 있었던 큰 이슈들을 횡스크롤 게임으로 보기
   ㅤ→ 호주 산불
   ㅤ→ COVID-19
   ㅤ→ 주가 대폭락
   ㅤ→ 격리
   ㅤ→ Zoom 회의
   ㅤ→ 틱톡의 부상
   ㅤ→ 미국 선거
   - 화살표 + 스페이스(점프)

   저도 해보고 싶은데 저는 계속 혼자 뛰면서 직진만 해서 3번째 불구덩이 이상을 가질 못하내요 ㅠ

   끝나고 donate 페이지 가보니 벌써 $8,000 가 넘게 모였네요. 재밌게 잘 플레이했습니다

   플레이해보았는데 고퀄에 2020년 이슈들을 잘 그려놓았네요!

   은근 있었던 이슈들을 잘 표현했네요. 중간에 5G 기지국 에서 빵 터졌..
   1인이 혼자 6개월 걸려서 개발했다고 합니다.
"
"https://news.hada.io/topic?id=3497","Archivy - 셀프호스팅 지식 저장소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Archivy - 셀프호스팅 지식 저장소

   - 북마킹한 웹페이지 내용을 로컬에 자동 저장
   - 노트는 마크다운포맷으로 저장
   - ElasticSearch를 이용한 검색
   - 파이썬 오픈소스 : Flask 웹앱 + Click 으로 만든 CLI
   - 플러그인 시스템 : Pocket/HN 을 자동 저장, Git연동

   역시 지식을 소유하고 싶은 사람이 많은지 이런 종류의 툴도 다양하네요

   지식 소유도 그렇지만 넷상에서 좋은 글을 북마크해놓고 있다가 몇년 뒤에 참고하려고 다시 링크 가보면 url이 바뀌었다던가 해당 홈페이지가 날라갔다던가 하는 경우를 많이 접하게 되더라고요. 웬지 그런 경험이 싫으신 분들이 만들지 않았을까요.
"
"https://news.hada.io/topic?id=3568","나는 왜 회사를 그만두고 싶어졌는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          나는 왜 회사를 그만두고 싶어졌는가

   아주 예전에 북마크 했던 글인데.
   좋은 글이라 올립니다.
   나는 왜 회사를 그만두고 싶어졌는가
   1단계 - 도피 욕구 점검 (내 안의 도망치고 싶은 심리 확인하기)
   2단계 - 분노 원인 분석 :
   3단계 - 한계 상황 분석 :
   4단계 - 목표 상실
"
"https://news.hada.io/topic?id=3619","새 Intel CEO가 물결을 일으키다 : 은퇴한 CPU 아키텍트를 재고용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               새 Intel CEO가 물결을 일으키다 : 은퇴한 CPU 아키텍트를 재고용

   - 인텔에 30년 근무해서 CTO까지 올라갔던 Pat Gelsinger가 CEO로 귀환
   - 2/15에 자신의 대표 업무를 시작하지만 이미 변화가 만들어 지는중
   - 인텔의 Nehalem CPU 리드 아키텍트였던 시니어 펠로우 Glenn Hinton이 은퇴를 번복하고 복귀
   ㅤ→ 펜티엄 4 리드 개발
   ㅤ→ 인텔 P6 프로세서 디자인을 만들었던 3명 아키텍트중 한명(펜티엄 프로,P2,P3)
   ㅤ→ 세계 최초 슈퍼스칼라 마이크로프로세서인 인델 i960CA 의 리드 아키텍트
   - Glenn은 자신의 트위터에 ""흥미로운 고성능 CPU 프로젝트""에 참가하게 됬다고 밝히며, 3년동안 은퇴했던 자신이 복귀하는데 Pat Gelsinger가 최종 결정에 도움을 줬다고 얘기함
   - 아마도 인텔로 돌아올 아키텍트는 더 있을 것으로 예상

   MS처럼 인텔도 CEO가 긍정적인 변화를 일으키면 다시 한번 크게 성장할 저력이 충분하다고 생각합니다.
   MS가 리눅스와 오픈소스에 구애한 것처럼 ARM이나 RISC-V를 품는다든지 M1같은 SoC형태의 제품을 데이터센터용으로 개발한다든지..

   그래서 인텔 주가가 올라간건가요? ㅎㅎ

   다들 어느정도 기대하고 있지 않을까요? ㅎㅎ 근데 정말로 인텔이 정신차리려면 3년 넘게 걸릴거 같은데..

   글 뒤에 있는 내용들은 번역을 하진 않았는데,
   Glenn 이 돌아오더라도 그가 참여할 프로젝트는 장기 프로젝트가 될거고,
   적어도 3~5년 기다려야 그 결실을 볼 수 있을거 라고 얘기하고 있습니다.
   인텔의 현재 문제들 https://news.hada.io/topic?id=3612
"
"https://news.hada.io/topic?id=3510","억만장자 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                억만장자 만들기

   Y Combinator 의 창립자인 폴 그레이엄이 쓴 글, '억만장자 만들기' 입니다.
   인상깊게 읽어 내용을 요약해서 번역해봤습니다. 그리 영어 실력이 부족해서 번역 퀄리티가 좋지 않은 점은 양해 부탁드립니다. ;ㅁ ;
   ㅤ
   - 글을 두개 쓰려고 했는데.
   ㅤㅤ- 하나는 Y Combinator (북미의 스타트업 인큐베이터) 인터뷰에 성공하는 방법. 너무 설왕설래가 많아서 창립자인 내가 직접 쓰는 게 좋을 것 같아서.
   ㅤㅤ- 두번째는 일부 정치인이 가끔 말하는 '백만장자는 사람을 착취해야만 될 수 있어'가 왜 잘못되었는지.
   - 그런데 이 글 하나를 쓰니 둘 다 포함되더라. 끝까지 읽으면 다 알 수 있어.
   - 내 일은 억만장자가 될 사람을 찾는 건데, 정치인들이 말하는 건 틀렸음.
   ㅤㅤ- 만약 그랬다면 나는 미식축구 스카우터가 유망주를 찾는 속도처럼 사람을 잘 착취하는 사람들을 찾았을 텐데.
   ㅤㅤ- Y Combinator 가 찾는 것과 전혀 다름. 정확히 그 반대를 찾고 있음.
   ㅤㅤㅤㅤ- Y Combinator 는 사람이 원하는 걸 만든다가 모토.
   ㅤㅤ- 대기업은 별로 그 사람에게 맞지 않는 제품을 부적절한 고객들에게 강요하는 게 가능하지만. 스타트업은 그럴 힘이 없음.
   ㅤㅤㅤㅤ- 고객이 진정으로 기뻐할만한 걸 만들지 않으면 스타트업은 스타트도 못할 것.
   ㅤㅤㅤㅤㅤㅤ- 이 점이 YC 인터뷰에서 가장 어려운 부분임.
   ㅤㅤㅤㅤㅤㅤ- 시장 경제에서 사람들이 아직 가지고 있지 않는 건데 원하는 것을 만드는 건 어려움. 하지만 좋은 점이기도 함. 만약 다른 사람들이 다 알고, 만들어서 만족시킬 수 있다면 이미 그랬을 거고. 그럼 스타트업은 없을 테니까.
   ㅤㅤ- 그래서 YC 인터뷰는 새로운 요구나, 새로운 방법으로 만족시킬 수 있는 방법에 대한 것임. 다만 새롭기만 한 건 아니고. 불확실하기도 함.
   ㅤㅤㅤㅤ- 필요성이 확실하다면 투자 받을 이유가 없을 거고. 이미 성장하고 있을 테니까.
   ㅤㅤㅤㅤ- 따라서 인터뷰는 실제 요구 사항을 발견했는 지와, 이를 충족할 수 있는지 여부를 모두 추측해야 함. 인터뷰어들은 이걸 직업으로 하는 사람들임.
   ㅤㅤㅤㅤㅤㅤ- 그 사람들은 이 작업을 위한 1001 개의 휴리스틱스 ( 발견법 ) 를 가지고 있지만. 굳이 말하지는 않을 거임.
   ㅤㅤㅤㅤ- 하지만 중요한 점을 말할 수 있어서 기쁨.
   ㅤㅤㅤㅤㅤㅤ- 그 사람들을 속일 수는 없다는 것과, 그 사람들을 '해킹'할 수 있는(설득할 수 있는) 유일한 방법은 그냥 창업자로써 해야 할 일을 하는 거임.
   ㅤㅤ- 파트너 (인터뷰어) 가 가장 먼저 알려는 건, 지금 만들려는 게 많은 사람들이 원하게 될 것인가? 임.
   ㅤㅤㅤㅤ- 당장 모든 사람이 원하지 않아도 됨. 제품이랑 시장은 진화할 거고. 서로 진화하면서 영향을 미칠 테니까.
   ㅤㅤㅤㅤ- 그렇지만 결국 거대한 시장이 되어야 만함. 이게 파트너가 알아내려는 것.
   ㅤㅤ- 일반적으로 거대한 시작으로 가는 길은 작은 시장을 성장하는 것.
   ㅤㅤㅤㅤ- 이건 문구를 만들 가치가 있으니까 '애벌레 시장' 이라고 부르겠음.
   ㅤㅤ- 애벌레 시장의 완벽한 예는 1976년에 설립된 Apple이 만든 시장.
   ㅤㅤㅤㅤ- 76년에는 대다수의 사람들이 개인 컴퓨터를 원하지 않았는데.
   ㅤㅤㅤㅤ- 결국 점점 많은 사람들이 원하게 되었고
   ㅤㅤㅤㅤ- 이젠 10살 짜리 어린이도 컴퓨터를 원함.
   ㅤㅤ- 이상적인 그룹은 ""미래에 살고 있는"" 설립자 그룹 - ( http://paulgraham.com/startupideas.html )
   ㅤㅤㅤㅤ- 스티브 워즈니악은 컴퓨터를 원했고
   ㅤㅤㅤㅤ- 마크 쥬크버그는 대학 친구들과 온라인으로 소통하고 싶었고
   ㅤㅤㅤㅤ- 레니랑 세르게이는 웹에서 무언가를 찾고 싶어했음 (구글 창립자)
   ㅤㅤㅤㅤ- 이 모든 창립자들은 자기와 동료들이 원하는 걸 만들고 있었고. 변화의 선두에 있었다는 건 앞으로 더 많은 사람들이 이런 걸 원했을 것을 의미했음.
   ㅤㅤ- '자신과 동료'는 이상적인 애벌레 시장이지만, 이게 유일한 건 아님.
   ㅤㅤㅤㅤ- 지역적인 걸 수도 있음. 한 지역에 서비스하기 위해 만들다가. 다른 위치로 확장.
   ㅤㅤ- 초기 시장의 중요한 특징은, 시장이 존재한다는 것 자체.
   ㅤㅤㅤㅤ- 당연해 보이겠지만, 대부분 스타트업에서 가장 큰 문제는 시장이 부족하다는 것.
   ㅤㅤㅤㅤㅤㅤ- 지금 만들고 있는 걸 원하는 사람이 있어야 하고
   ㅤㅤㅤㅤㅤㅤ- 한번도 들어본 적이 없는 회사인데도 기꺼이 사용할 정도로 시급하게 원해야 하는 사람들이 있어야만 함.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 많은 필요는 없는데. 일부는 꼭 있어야 함.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 이 일부 사용자들만 있으면 더 많은 걸 얻을 수 있는 간단한 방법이 있음.
   ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ- 이 사람들이 원하는 걸 만들고.
   ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ- 비슷한 사람들을 찾고.
   ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ- 친구를 추천하게 만들어야 함.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 그렇지만 이 기술은 결국 이 그룹이 있어야만 함.
   ㅤㅤ- 그래서 이건 YC 파트너가 인터뷰 중 거의 100퍼센트 파헤칠 거임.
   ㅤㅤㅤㅤ- ""처음에는 누가 쓸 건가요?""
   ㅤㅤㅤㅤ- 스타트업에 자금을 넣어야 하나 여부를 결정해야 한다면. ""사람들이 이걸 원하는 지 어떻게 알 수 있나요?""
   ㅤㅤ- 가장 설득력 있는 대답은 ""우리와, 우리 친구들이 원해서.""
   ㅤㅤㅤㅤ- 이미 프로토타입을 만들었다는 소식이 이어지고.
   ㅤㅤㅤㅤ- 엄청 조잡해도 친구들이 쓰고 있고.
   ㅤㅤㅤㅤ- 입소문으로도 퍼지고 있다.
   ㅤㅤㅤㅤ- 이런 대답들을 할 수 있고, 거짓말을 하지 않는다면 파트너는 '아니오'에서 '예'로 바뀔 거임. 다른 결격이 없는 한 리스트에 당신이 있다는 말.
   ㅤㅤ- 하지만 이건 충족하기 어려운 기준.
   ㅤㅤㅤㅤ- Airbnb는 이 기준에 못 맞췄음.
   ㅤㅤㅤㅤㅤㅤ- 첫번째 부분 -> 원하는 걸 만들었다는 건 충족했지만.
   ㅤㅤㅤㅤㅤㅤ- 두번째 부분 -> 퍼지지는 않았음.
   ㅤㅤㅤㅤ- 하지만 여기 미치지 못했다고 기분 나쁠 필요는 없음. Airbnb도 못 맞췄으면 너무 높은 거니까.
   ㅤㅤ- 실제 YC 파트너는 사용자의 요구 사항을 깊이 이해하고 있다고 느끼면 만족할 거임.
   ㅤㅤㅤㅤ- 그리고 Airbnb는 이걸 가지고 있었음.
   ㅤㅤㅤㅤㅤㅤ- 호스트와 게스트의 동기에 대해 모두에게 말할 수 있었고.
   ㅤㅤㅤㅤㅤㅤ- 우리는 그 친구들이 답을 모르는 질문은 못했음. Airbnb는 모두 대답함.
   ㅤㅤ- YC 인터뷰에서 할 수 있는 좋은 일은 파트너에게 사용자에 대해 가르치는 것.
   ㅤㅤㅤㅤ- 인터뷰를 준비하고 싶으면, 사용자에게 가서 뭘 생각하는지 정확히 알아내면 됨.
   ㅤㅤㅤㅤ- 어차피 해야 할 일이기도 하고.
   ㅤㅤ- YC 파트너는 창업자에게 시장에 대해 이야기하기를 원함.
   ㅤㅤㅤㅤ- VC가 아이디어에 대한 잠재적 시장을 어떻게 판단하는지 생각하면...
   ㅤㅤㅤㅤㅤㅤ- 일반적으로 전문가는 아니니까. 아이디어를 누구에게 전달하고, 의견을 요청함.
   ㅤㅤㅤㅤㅤㅤ- YC는 그걸 수행할 시간은 없지만, 설립자가 만약
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 자신이 말하는 걸 전부 알고 있고.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 거짓말은 하고 있지 않다는 걸.
   ㅤㅤㅤㅤㅤㅤ- YC 파트너가 그걸 확신할 수 있다면, 다른 전문가를 필요하지 않음.
   ㅤㅤ- 이것들이 YC 인터뷰가 프레젠테이션이 아닌 이유들임.
   ㅤㅤㅤㅤ- 우린 최대한 많은 창립자에게 자금을 지원받을 기회를 주기 위해 최대한 짧게 인터뷰를 진행함. 10분.
   ㅤㅤㅤㅤ- 파트너는 간접적 증거들을 통해 당신이 뭔 말을 하고 있는지 알고 있어야 하고, 거짓말을 하는지도 알아 내야해서 충분한 시간이 아님.
   ㅤㅤㅤㅤ- 그래서 파고 들어 질문함. 순차 접근이 아니라 랜덤 접근으로.
   ㅤㅤ- YC 인터뷰에서 성공하는 방법으로 들은 것 중 최악의 조언은 '인터뷰를 통제하고, 원하는 메시지를 전달하라.' 임. 인터뷰를 프레젠테이션으로 바꾸라는 건데.
   ㅤㅤㅤㅤ- *우아한 욕설*
   ㅤㅤㅤㅤ- 그렇게 하려고 하면 너무 짜증남.
   ㅤㅤㅤㅤ- 그들이 질문을 하고, 당신이 대답하는 대신. 이미 정교하게 조립된 대사 덩어리를 전달하는 거고. 진짜 빨리 10분을 먹음.
   ㅤㅤ- 현재, 또는 이전 YC 파트너를 빼곤 YC 인터뷰에서 해야 할 일에 대해 정확한 조언을 줄 수 있는 사람은 없음.
   ㅤㅤㅤㅤ- 인터뷰에 응하는 사람은 성공하더라도 이를 알지 못하는데.
   ㅤㅤㅤㅤㅤㅤ- 왜냐하면 인터뷰는 파트너가 알고 싶어하는 내용에 따라 바뀌기 때문.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 가끔은 질문이 모두 창립자에 관한 거고
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 가끔은 모두 아이디어에 관한 거고
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 가끔은 아이디어의 아주 좁은 측면만 다루고.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 그래서 창업자들은 가끔 아이디어를 완전히 설명 못했다고 불평하면서 인터뷰를 떠나지만. 맞는 말이긴 해도 이미 충분히 설명한 거임.
   ㅤㅤ- YC 인터뷰는 질문으로 구성되어 있음. 그러니 인터뷰를 잘하는 방법은 질문에 답을 잘하는 것.
   ㅤㅤㅤㅤ- 그리고 솔직하게 말할 것.
   ㅤㅤㅤㅤ- 파트너는 당신이 모든 걸 알기를 기대하지 않음.
   ㅤㅤㅤㅤ- 그러니까, 질문에 대한 답을 모르면 그 질문에서 벗어나려고 헛소리하지 말아야 함.
   ㅤㅤㅤㅤㅤㅤ- 파트너는 경험이 풍부한 투자자와 마찬가지로, 전문적인 헛소리 탐지자인데.
   ㅤㅤㅤㅤㅤㅤ- 당신은 아마추어 헛소리 꾼임.
   ㅤㅤㅤㅤ- 그러니까 약파는 것보단 정직한 게 나음.
   ㅤㅤㅤㅤ- 예를 들어보면. 만약 '뭐가 잘못될 수 있나요?'라고 질문을 했을 때 최악의 대답은 '아무것도!' 임.
   ㅤㅤㅤㅤㅤㅤ- 이 대답은 당신의 아이디어가 '방탄유리' 라고 설득하는 게 아니라, 파트너에게 당신이 바보이거나 거짓말쟁이라는 걸 확신시켜줄 거임.
   ㅤㅤㅤㅤㅤㅤ- 그냥 끔찍하고 고통스러운 사항들을 알려주는 게 훨씬 좋음.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 이게 무엇이 잘못될 수 있는지 물어볼 때 전문가들이 하는 일.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 이미 파트너는 당신의 아이디어가 위험하다는 걸 알고 있음.
   ㅤㅤㅤㅤ- 경쟁사에 대해 묻는 경우도 마찬가지.
   ㅤㅤㅤㅤㅤㅤ- 경쟁자는 스타트업을 죽이는 경우가 거의 없음.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 아. 불쌍히도 몇몇 시도들은 그럼.
   ㅤㅤㅤㅤㅤㅤ- 하지만 경쟁자가 누구인지는 알고, YC 파트너에게 상대적인 강점과 약점이 무엇인지 말해줘야 함.
   ㅤㅤㅤㅤㅤㅤ- 파트너는 경쟁자가 스타트업을 죽이지 않을 거라는 걸 잘 알고 있어서 그리 오래 붙잡지는 않을 거임.
   ㅤㅤㅤㅤㅤㅤ- 그렇지만 전혀 모르거나, 위협을 최소화할 것 같으면 반드시 붙잡을 거임.
   ㅤㅤㅤㅤ- 파트너는 아이디어가 완벽할 거라고 기대하지 않음. 이건 시드 투자니까.
   ㅤㅤㅤㅤㅤㅤ- 이 단계에서 파트너들이 기대하는 건 그럴듯한 아이디어뿐임.
   ㅤㅤㅤㅤㅤㅤ- 그렇지만 파트너들은 당신이 사려 깊고 정직하길 원함.
   ㅤㅤㅤㅤㅤㅤ- 그래서 당신의 아이디어가 완벽하게 보이려고 애쓰는 게.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 당신을 슬기롭게 보이거나 어리석게 보이면
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 하지도 않을 것을 위해 필요한 걸 희생한 거임.
   ㅤㅤ- 파트너가 이제 큰 시장으로 가는 길이 있다고 충분히 확신하면. 다음 질문은: 이제 당신이 그걸 만들 수 있을지에 대한 여부.
   ㅤㅤㅤㅤ- 그 여부들은... 아래 세가지 질문으로 결정됨.
   ㅤㅤㅤㅤㅤㅤ- 설립자의 일반적인 자질과
   ㅤㅤㅤㅤㅤㅤ- 이 분야에 구체적인 전문 지식과
   ㅤㅤㅤㅤㅤㅤ- 다른 이들과의 관계.
   ㅤㅤㅤㅤ- 이런 질문들을 할거임.
   ㅤㅤㅤㅤㅤㅤ- 창립자는 어떻게 결정됨?
   ㅤㅤㅤㅤㅤㅤ- 만드는 데에는 능숙함?
   ㅤㅤㅤㅤㅤㅤ- 일이 잘못되어도 계속 갈 수 있을 만큼 탄력적임?
   ㅤㅤㅤㅤㅤㅤ- 우정은 얼마나 강함?
   ㅤㅤㅤㅤ- Airbnb는 아이디어 측면에서는 '괜찮았지만'. 이 측면에는 '훌륭하게 잘했음.'
   ㅤㅤㅤㅤㅤㅤ- 면접 중에 처음 자금을 어떻게 조달했는지에 대한 질문에 그들은 오바마랑 메케인을 테마로 한 아침 시리얼을 만들어서 조달하려고 했던 계획의 이야기는 투자와는 전혀 상관없어 보였지만. 우리가 투자하는 걸 결정한 중요한 요인이었음.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 이 이야기는 그들이 설립자로써 자질에 대한 엄청 좋은 증거였기 때문에.
   ㅤㅤㅤㅤㅤㅤ- 하지만 이걸 보여주는 건 시리얼 이야기 뿐만이 아니었음.
   ㅤㅤㅤㅤㅤㅤㅤㅤ- 그들은 돈이나 스타트업이 멋져서 이 일을 한 게 아님. 그들의 프로젝트였기 때문에 열심히 일했고. 그들은 흥미로운 새로운 아이디어를 찾았고, 그걸 놓아줄 수 없었음.
   ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ- 평범한 들리는 이 소리는 신생 기업 뿐만 아니라 가장 야심 찬 사업에서, 가장 강력한 동기 부여임.
   ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ- 이게 억만장자나 최소한 창업회사에서 억만장자가 되는 사람들을 이끄는 것.
   ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ- 회사가 곧 그들의 프로젝트였기 때문에.
   - 이게 사람을 착취해야 한다는 정치인들의 헛소리가 아닌. 창업회사에서 억만장자가 되는 사람들의 자질이고. 이게 YC가 창립자에게 요구하는 것임.
   ㅤㅤ- 진정성.
   - 스타트업을 시작하려는 동기들은 혼합되어있음.
   ㅤㅤ- 돈을 벌고 싶은 욕구나.
   ㅤㅤ- 멋지게 보이고 싶은 욕망.
   ㅤㅤ- 문제에 대한 진정한 관심.
   ㅤㅤ- 다른 사람을 위해 일하지 않으려는 마음의 조합으로.
   - 마지막 두 개는 처음 두 개보다 더 강력한 동기 부여.
   ㅤㅤ- 창업자들이 돈을 벌거나 멋지게 보이게 원하는 건 괜찮고. 대다수가 그럼.
   ㅤㅤ- 그렇지만 단지 돈을 벌거나, 단지 멋지게 보이기 위해 큰 규모로 성장하지는 않을 것 같음.
   ㅤㅤ- 돈을 위해 일 하는 창립자는 충분히 큰 인수 제안을 받을 거고.
   ㅤㅤ- 멋지게 보이려고 일하는 사람들은 멋져 보이는 방법들 중, 이것보단 다른 것들이 훨씬 덜 고통스럽다는 걸 빠르게 발견할 거임.
   - YC는 확실하게 사람을 착취하는 창립자를 봄.
   ㅤㅤ- YC 브랜드를 원하니까.
   ㅤㅤ- 하지만 우리는 그런 사람들을 거부함.
   ㅤㅤ- 만약 나쁜 사람들이 좋은 창업자를 만들면, 파트너들은 도덕적 딜레마에 직면하겠지만.
   ㅤㅤ- 다행히도 그렇지 않음. 나쁜 사람은 나쁜 창립자를 만듬. 이 착취적인 설립자들은 큰 규모로 성공하지 못할 거고, 항상 지름길을 택할 거니까 사실 작은 것도 성공하지 못함. YC를 지름길로 보기도 하고.
   ㅤㅤ- 그들의 착취는 보통 공동 창립자로부터 시작하는데. 공동 창립자는 회사의 기초라서 재앙임.
   - 그럼 전문적인 억만장자 스카우트가 '그건 아닌데' 라고 말하는데, 그럼 정치인들은 왜 그런 소리를 할까?
   ㅤㅤ- 주: 여기서 전문적인 억만장자 스카우트는 자기 자신입니다. Y Combination은 실제로 북미에서 가장 성공적인 스타트업 인큐베이터입니다.
   - 그건 한 사람이 다른 사람보다 더 많은 돈을 가질 수 있다는 게 잘못되었다는 느낌에서 출발함.
   ㅤㅤ- DNA에서부터 나오는 거고, 다른 종의 DNA에도 있는 거임.
   - -> 이하 내용은 북미 정치인들 까기라서 스킵.
   - 그래서 파트너들은 뭘 알고 싶냐면.
   ㅤㅤ- 사용자가 원하는 게 뭐임?
   ㅤㅤ- 그들을 위해 뭘 만들 수 있음?
   - 억만장자들은 항상 이 주제에 대해 이야기하고 싶어하고.
   - 그게 그들이 억만장자가 된 방법임.

   이 글보다 더 나은 번역본이 존재하여 링크를 겁니다 : (https://docs.google.com/document/d/…)

   좋은 글 요약 및 번역 감사 드립니다!

   YC가 말하는 착취와 정치인들이 말하는 착취는 서로 다른 의미인 것처럼 느껴집니다.
   그렇기에 YC는 착취가 아니라고 하는 거고, 정치인들은 착취라고 하는 것이 아닐까요.

   원문의 마지막 부분에 있는 문단이 인상적이어서 추가로 옮겨 둡니다.
   The most reliable way to become a billionaire is to start a company that grows fast, and the way to grow fast is to make what users want. Newly started startups have no choice but to delight users, or they'll never even get rolling. But this never stops being the lodestar, and bigger companies take their eye off it at their peril. Stop delighting users, and eventually someone else will.
   억만장자가 되는 가장 확실한 방법은 빠르게 성장하는 회사를 만드는 것이고 빠르게 성장하는 방법은 사용자가 원하는 것을 만드는 것이다.
   새로 시작한 스타트업들은 사용자를 기쁘게 해야 하며, 그렇게 하지 않으면 시작조차도 어렵다.
   이것은 항상 길잡이 별이 되어야 하고, 큰 회사들조차도 이것에서 눈을 떼면 위험에 빠지게 된다.
   사용자를 기쁘게 하지 않으면, 결국 다른 누군가가 그렇게 할 것이기 때문에.

   헉. 감사합니다. 이 부분은 마지막에 집중력이 부족해서 못 본 것 같네요 ;ㅁ; 정말 인상적인 문단 인 것 같아요.

   헉. 질문이랑 대답들에 인덴트를 맞춰놨는데 일자로 나오는군여 OTL.

   앗 빈칸으로 하면 그렇게 되어서요. 제가 수정해 두겠습니다.

   오오오오.. 굉장히 의도대로 됐네요. 감사합니다 ' ㅁ'!!!!

   감사합니다! 다음부터는 마크다운처럼 분리해놔야겠네용.
"
"https://news.hada.io/topic?id=3499","IntelliJ IDEA, Apple Silicon용 2020.3.1 공식 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             IntelliJ IDEA, Apple Silicon용 2020.3.1 공식 릴리즈

   Apple Silicon을 지원하는 IntelliJ IDEA가 공식으로 릴리즈되었습니다. (2020.3.1)

   한글 타이핑 문제 같은건 해결 됐을지 궁금하내요.
"
"https://news.hada.io/topic?id=3525","Rust가 이제 벤치마크에서 C보다 전반적으로 빠름","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Rust가 이제 벤치마크에서 C보다 전반적으로 빠름

   ""Which programs are fastest?""
   - n-body, mandelbrot, regex-redux, binarytrees 등의 프로그램으로 벤치마킹한 결과
   C++ > Rust > C > Fortran > Julia > C# .NET > Ada > Free Pascal > F# .NET > OCaml > Java > Go

   Go가 Java보다는 아직 느린가보군요.

   Go 가 제일 뒤에 있어서 깜짝 놀랐네요... 요즘 Go 로 개발되는 주요 오픈소스들이 많아서 성능도 좋아야 할텐데... (종합적 성능은 이런 벤치마크와 차이가 있기야 하겠지만요)

   아마도 벤치마크 테스트에 사용한 프로그램들이 멀티쓰레딩하고는 전혀 상관없는 것들이어서 그렇지 않나 생각도 듭니다.
"
"https://news.hada.io/topic?id=3549","V8-riscv : RISC-V용 구글 V8","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        V8-riscv : RISC-V용 구글 V8

   - V8 JavaScript 엔진을 RISC-V64용으로 포팅중
   - 현재 전체 Test Case의 94%(15000+) 통과
   - RISC-V와 가장 비슷한 MIPS64 버전을 기준으로 포팅 진행
   - 32비트 및, RISC-V ISA 확장, WebAssembly 를 위한 SIMD ISA 지원까지 예정
"
"https://news.hada.io/topic?id=3553","OpenMTP - 맥↔안드로이드 간 파일전송 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      OpenMTP - 맥↔안드로이드 간 파일전송 도구

   - 구글의 공식 ""Android File Transfer""의 단점을 보완한 오픈소스
   - USB Plug & Play
   - 내장메모리/SD 카드 선택
   - 4GB 이상의 파일 여러개 전송가능
   - 드래그 & 드랍 지원
   - 로컬/안드로이드 좌우 분할 보기
   - 키보드 숏컷 지원
"
"https://news.hada.io/topic?id=3533","minikeyvalue - 초소형 분산 키밸류 스토어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     minikeyvalue - 초소형 분산 키밸류 스토어

   - 1000라인 안되는 Go코드로 된 분산 키밸류 저장소
   - 저장소간 복제, 여러대의 머신, 머신별 여러개의 드라이브 지원
   - 1MB ~ 1GB 사이의 값에 최적화
   - nginx를 볼륨 서버, LevelDB를 인덱싱용으로 사용
   - 간단한 API
   ㅤ→ GET /key : nginx 로 302 redirect
   ㅤ→ PUT /key : 201면 성공
   ㅤ→ DELTE /key : 204면 성공
   - 1대의 마스터, n대의 볼륨서버로 구성

   익숙한 도메인(comma.ai)이 보여서 보니 geohot이네요..

   MSA에서 사이즈 작은 Key/Value가 필요한 경우에 사용하면 좋을 것 같은 느낌이군요
"
"https://news.hada.io/topic?id=3529","Typefully - 트위터 쓰레드 글쓰기 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Typefully - 트위터 쓰레드 글쓰기 도구

   - 트위터에 긴 글을 쓰레드 형식으로 남길때 사용하는 에디터
   - 실시간 프리뷰 기능으로 트위터에서 어떻게 쓰레드가 보일지 보면서 작성
   - 긴 글을 적으면서 두줄을 떼면 새로운 트윗으로 만들어짐
   - 원하는 시간에 트윗되도록 스케줄링 지원
   - 여러개의 드래프트 작성해서 관리 가능

   산해경(山海經)은 지리서 라기보다 인간의 지각이 미비했을 때 즉슨, 무의식이 바라보는 환경적 요소를 개괄했다. 천인지 사상에 비쳐보면 산해경은 지리서가 아닌 일종의 천리서라고 볼 수 있다. 고대사회의 정치와 인간에 관한 각종 이해서 조차도 미래의 향방을 가리는데 무리가 있는 시절로 접어들고 있다. 특히나, 대국이라고 자처하는 국가의 지도자가 돌대가리들이 많다.

   산해경(山海經)은 지리서 라기보다 인간의 지각이 미비했을 때 즉슨, 무의식이 바라보는 환경적 요소를 개괄했다. 천인지 사상에 비쳐보면 산해경은 지리서가 아닌 일종의 천리서라고 볼 수 있다. 고대사회의 정치와 인간에 관한 각종 이해서 조차도 미래의 향방을 가리는데 무리가 있는 시절로 접어들고 있다. 특히나, 대국이라고 자처하는 국가의 지도자가 돌대가리들이 많다.

   아이디어 좋네요.
   긴 글을 써야 한다면, 굳이 트위터에 써야 하나 의문이 들지만 뭐...ㅎㅎ
"
"https://news.hada.io/topic?id=3498","Kit FUI - 영화/TV/게임에 나온 미래 UI 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Kit FUI - 영화/TV/게임에 나온 미래 UI 모음

   - FUI : Fantasy / Fictional / Fake / Futuristic / Film / Future UI
   - 영화/TV/게임등에서 미래세계를 표현할 때 사용했던 UI 들을 모은 사이트
   ㅤ→ UI 스크린 샷
   ㅤ→ UI 비디오
   ㅤ→ 관련 정보(IMDb, TMDb, TheGamesDB)
   ㅤ→ 제작 스튜디오 및 디자이너들

   비슷한 다른 사이트들
   - SF영화의 폰트만 모은 사이트 Typeset In The Future : https://typesetinthefuture.com/
   - 영화에 나온 소스코드를 분석하는 유튜브 채널 Behind The Screens : https://www.youtube.com/channel/UCzOc0EEdwWAlnwrWV-7sDbg
   - 영화/TV에 나온 코드들만 클로즈업해서 보여주는 Source Code in TV and Films : https://moviecode.tumblr.com/
   - 영화/TV/뮤직비디오에 나온 모션 디자인 분석 https://paulroberts.tv/
   - FUI Vision Video 모음 https://visionsofcomputing.wiki.cs.st-andrews.ac.uk/index.php/…
   - 지난 50년간의 가상 컴퓨터 인터페이스 모음 https://glow-internet.com/infographics/…
"
"https://news.hada.io/topic?id=3515","Artichoke - Rust로 만든 Ruby","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Artichoke - Rust로 만든 Ruby

   - 어디든 임베드 가능한 루비 인터프리터
   ㅤ→ Rust코드를 루비젬 형태의 File API로 인터프리터에 삽입 가능
   - WebAssembly 로 빌드해서 브라우저에서 실행 가능
   ㅤ→ 루비 앱을 싱글 WASM 실행파일로 생성
   - 루비 MRI 호환. 2.6.3 타겟
   * 루비 MRI (Matz's Ruby Interpreter, CRuby) : 루비 프로그래밍 언어의 참조 구현. 루비 언어의 창시자인 마츠모토 유키히로의 이름을 딴 것

   ruby를 임베디드하기 위한 프로젝트인 mruby도 있는데. 이건 아예 ruby를 통째로 넣었군여. mruby는 ruby랑 규격이 다른 게 있어서...
"
"https://news.hada.io/topic?id=3609","M1 맥에서 부팅 가능한 리눅스 공개 (초기단계 베타)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     M1 맥에서 부팅 가능한 리눅스 공개 (초기단계 베타)

   Corellium에서 진행하고 있는 Apple Silicon 리눅스 프로젝트입니다. macOS 11.2 베타 1에서 kmutil을 이용해 bootloader chainload가 가능하게 되었고, macOS 11.2 베타 2부터 full custom kernel을 지원하기 시작하여 드디어 M1 맥에서 리눅스를 사용할 수 있게 되었습니다. 소스코드는 CorelliumHQ 깃헙 레포에서 확인 가능합니다. 앞으로 Corellium HQ에서 작업하는 리눅스 관련 작업물은 모두 permissive open-source license로 공개할 예정이며 Linux 업스트림에 보낼 예정이라 합니다.

   코렐리움 블로그에도 글이 올라왔습니다. https://corellium.com/blog/linux-m1

   - preloader 코드: https://github.com/corellium/preloader-m1
   - 커널 코드: https://github.com/corellium/linux-m1
   - 커널 diff: https://github.com/corellium/linux-m1/…
   - 부팅용 mach-o binary: downloads.corellium.info/linux.macho
"
"https://news.hada.io/topic?id=3526","Project Lightspeed - 라이브 스트리밍 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Project Lightspeed - 라이브 스트리밍 서버

   ""OBS Studio -> FTL -> WebRTC""
   - 1초 미만의 레이턴시로 라이브 스트리밍 가능한 오픈소스 서버
   ㅤ→ Twitch의 로우 레이턴시 모드도 2~4초 이상 지연됨
   - Rust + Golang + React
   * FTL : Faster-Than-Light, MS가 Mixer 용으로 만들었던 프로토콜로 스트리밍 레이턴시를 줄이기 위해서 RTP+WebRTC 를 사용
   ㅤ→ MS가 2016년에 인수한 Beam 의 기술

   다른 뉴스 링크 걸기입니다 : Owncast - 오픈소스 라이브 스트리밍 서버 https://news.hada.io/topic?id=3450
"
"https://news.hada.io/topic?id=3603","Vmctl/Vmcli - 맥에서 Linux VM 쉽게 실행하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Vmctl/Vmcli - 맥에서 Linux VM 쉽게 실행하기

   - 애플의 Virtualization.framework 를 활용해서 리눅스 VM을 관리/실행하는 오픈소스 유틸리티
   vmctl start ubuntu
   vmctl attach ubuntu (시리얼 콘솔)
   vmctl ssh ubuntu
   vmctl stop ubuntu

   성능은 패러럴스보다 지연시간이 약간 더 작아서 좋다고 합니다.
   M1 맥에서 셋업해보니 설정도 간단하고 사용하기 쉽네요.
"
"https://news.hada.io/topic?id=3544","애플 M1칩의 메모리 접근 방식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           애플 M1칩의 메모리 접근 방식

   ""M1의 싱글코어는 28단계 이상으로 메모리를 병렬처리""
   - 메모리 접근은 계산작업보다 비쌈
   - 이론상 x에 접근할때 근처의 x+1 등은 공짜로 읽어올 수 있다는 naive한 모델은 합리적으로 보이기도 하지만, 성능 예측이 불가
   - 어떨때 이 성능예측이 실패할까? CPU 코어는 동시에 여러곳의 메모리 접근을 시도함
   - 7개의 메모리 접근을 동시에 한다면 1개에 접근 하는것 보다는 느리겠지만, 7배가 느릴까 ?
   - 벤치마크 프로그램을 통해서 몇개의 동시접근(lane, 독립적인 포인터 추적 루틴)이 가능한지를 테스트
   ㅤ→ 어느 정도선에서 동시 접근 성능이 떨어지는지를 통해서 몇개의 lane을 가지는지를 예측
   - 애플 M1의 코어 하나는 28 lane이 넘어가면 성능이 떨어지는 것으로 봐서 28이라고 추측한 것
   ㅤ→ 그래서 높은 수준의 병렬처리때문에 저 naive 한 모델의 비용예측은 실패한다고

   CPU 이야기가 나올 때마다
   https://ridibooks.com/books/443000037
   이 책이 큰 도움이 되고 있네여. 혹시 처음부터 따라가고 싶으신 분들은 이 책을 읽고 읽으시면 조금은 따라갈만 한 것 같습니다.

   리디북스 홍보 방지 차원에서(...) 책 이름은 : 프로그래머가 몰랐던 멀티코어 CPU 이야기 입니다. 왜 하필 리디북스냐면, 종이책은 절판되었고. 전자책은 남은 상점이 리디북스만 있어 부득이하게 올렸습니당.

   김민장님이 이런책도 쓰셨군요... 벌써 10년이라니 세월이 무상하네요 ^^;

   이게 참 어려운 부분이죠. 일반화하기 어려우니까요. 하지만 요즘 CPU 구조나 병렬처리가 많아진 상황에서는 꽤 효과적일 수 있을것 같습니다. 그만큼 하드웨어 구조 개선 실험도 많이 하고 있구나 싶네요.

   전산 교수님이 쓰셔서 그런지 딱 자신이 파악한 사실만을 적어두셨는데..
   해당글의 댓글과 HN의 댓글을 조합해서 보면 https://news.ycombinator.com/item?id=25659615
   기본적으로는 M1이 28개 이상의 병렬화와 L1캐쉬의 사이즈 등 덕에 여러곳을 랜덤억세스 하더라도 훌륭한 성능을 보여준다 라고 이해하면 될 것 같습니다.
"
"https://news.hada.io/topic?id=3528","Tablerone - 크롬 탭 매니저 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Tablerone - 크롬 탭 매니저 확장

   - 여러 탭을 한번의 클릭으로 콜렉션으로 저장 및 다시 열기
   ㅤ→ Favorite 및 Tag 별 관리
   ㅤ→ 브라우징 세션별 관리
   - 90분간 안 쓴 탭은 가벼운 플레이스홀더로 바꿔서 메모리 절약(시간 조정 및 예외처리 가능)
   - 탭 메타정보(제목, URL, 노트, 썸네일)를 HTML, JSON, CSV, 텍스트로 저장
   - 내부에서 표준 북마크로 정보를 관리해서 모바일/데스크탑 기기 동기화도 가능

   저는 OneTab 사용 했었는데, 이게 기능이 많아서 좋네요. 탭 하나를 항상 먹는게 아쉽지만..

   tablerone 과 session buddy 둘다 처음 접해보았는데 저에겐 session buddy가 더 잘맞는 느낌이네요.

   좋내요. 감사합니다!

   저는 Session Buddy 가 더 간결해서 좋은 것 같군요. 유휴 탭 처리 필요하면 이걸 택해도 괜찮을듯

   MS Edge의 Collection 기능이 좋아서 잘 사용중인데, 그거만큼 편하네요
"
"https://news.hada.io/topic?id=3627","JerryScript - IoT기기용 초경량 JS엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     JerryScript - IoT기기용 초경량 JS엔진

   - 마이크로 콘트롤러 등 제한된 리소스 기기에서 실행되는 JavaScript 엔진
   ㅤ→ 64KB 이하의 RAM, 200KB 이하의 플래시 메모리에서도 실행 가능
   - ECMAScript 5.1 호환
   - ARM Thumb-2용으로 컴파일시 160K 크기
   - 적은 메모리 사용에 대해 최적화
   - C99 로 작성되어 훌륭한 이식성
   - JS 소스코드를 바이트 코드로 프리 컴파일 할수 있도록 스냅샷 지원
   - C API로 어디나 쉽게 임베드 가능

   QuickJS와 Ducktape와 비교하면 더 작은 JS 엔진일까요? 둘 다 충분히 작은 줄 알았는데..

   삼성전자에서 공개한 프로젝트죠. 실제로 많이 쓰이는지는 모르겠는데 어디에 쓰이는지 궁금하네요.

   es 5.1 이면 es 6 보다도 이전이니까 흔히 모던하다는 기능은 없다고 보면 되겠네요.

   권장 사양을 보니 얼마 전에 이곳에 소개되었던 라즈베리 파이 피코 같은 물건에서 자바스크립트를 구동하기 위한 물건인 것 같네요.
   https://news.hada.io/topic?id=3618

   1.5 인게 이상해서 내용을 봤습니닷
   Key characteristics of JerryScript:
   Full ECMAScript 5.1 standard compliance
   160K binary size when compiled for ARM Thumb-2
   Heavily optimized for low memory consumption
   Written in C99 for maximum portability
   Snapshot support for precompiling JavaScript source code to byte code
   Mature C API, easy to embed in applications

   으어 수정해 두었습니다 ㅠ 요즘 오타가 많아지네요.

   이 정도 오타는 사이트를 사랑하는 이용자들이 찾아드릴 겁니다 ㅋㅋㅋ

   ㅎㅎ 고맙습니다!
"
"https://news.hada.io/topic?id=3540","Wasmer 1.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Wasmer 1.0 릴리즈

   - 유니버설 WebAssembly 런타임
   ㅤ→ 다양한 언어를 WASM으로 컴파일해서 어떤 OS에서든 실행 가능
   ㅤ→ 서버사이드 런타임, 스탠드얼론으로 실행
   ㅤ→ Rust, C/C++, Go, Python, PHP, Ruby, C#, R, Elixir 등의 다른 언어에 임베딩도 가능
   - 프로덕션 사용 가능한 수준의 성능
   - 플러그인 인프라 : 여러개의 컴파일러(싱글패스,Cranelift,LLVM), JIT/Native 엔진
   - Native Object Engine : 프리컴파일한 WASM 모듈 만들고 실행가능
   - IOT에 적합한 Headless 버전 지원
   - WASM 크로스 컴파일
   - 사용하기 쉬운 API
   - Wasm-C-API 지원
   - 애플 실리콘 지원
"
"https://news.hada.io/topic?id=3532","Descript - 오디오/비디오 협업 편집도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Descript - 오디오/비디오 협업 편집도구

   - 팟캐스트,영상등을 구글 닥스처럼 실시간 협업 편집 및 댓글 기능
   - 스크린 녹화, 영상통화 멀티트랙 녹음, 음성인식 받아쓰기(Transcribe)
   - 받아쓰기한 글자를 편집해서 비디오/오디오 자체에 반영이 가능
   - Overdub 으로 내 음성을 복제해서 특정 단어만 입력한 글자로 오디오 교체가능
   - 단어 필터링기능으로 ""음"", ""어"", ""you knows"" 같은 것들만 삭제 가능
   - 버전히스토리, 클라우드싱크, 공유폴더 기능 제공
   - 팟캐스트 Audiogram (음성파형) 생성 기능
   - Fancy Caption : 비디오의 전체 캡션을 자동 생성해서 다양한 스타일로 입혀줌
   - 무료는 1개 프로젝트만 가능하고, 단게별 유료 구독모델로 사용 가능

   협업용은 아니지만...Vrew랑 비교하려면 어떨려나요.

   저도 그 생각했는데, Vrew 에 협업 및 사용자 편의 기능을 많이 넣으면 이 정도가 될듯 합니다.

   아쉽게도 많은 기능이 영어 Transcribe 으로 음성인식된 텍스트를 통해 타임라인을 생성하고 편집하는 것이라
   우리가 쓰기에는 좀 안맞지만 요즘 비디오/오디오 공동 편집이 이 정도 기능이 된다는 수준으로 한번 둘러 보시면 좋겠습니다.
   Um, Uh 같은거만 지워주는 기능도 재미나네요.
   제가 유튜브 녹화해보니 은근 말버릇이 있더군요.
   이런거만 삭제하고 올려도 팟캐스트가 듣기 좋아집니다.
"
"https://news.hada.io/topic?id=3503","2020년 Top 10 Python 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2020년 Top 10 Python 라이브러리

   - Typer : CLI 제작
   - Rich : CLI를 아름답게
   - Dear PyGui : GPU 가속 GUI
   - PrettyErrors : 에러를 보기좋게
   - Diagrams : 클라우드 아키텍쳐 그리기
   - Hydra & OmegaConf : 복잡하고 큰 어플 개발
   - PyTorch Lightning : PyTorch를 쓰기 쉽게
   - Hummingbird : 예전 ML모델을 PyTorch등으로 변환해서 더 빠르게
   - HiPlot : 고차원 데이터용 대화형 시각화 도구
   - Scalene : 고성능 고정밀 CPU & 메모리 프로파일러
   * Norfair : 실시간 2D 객체 트래킹
   그외 Honorable Mentions
   - quart : Flask 호환 API를 가진 비동기 웹프레임워크
   - alibi-detect : 테이블 데이터, 텍스트, 이미지, 시계열등에서 이상값(outlier) 모니터링
   - einops : 읽기 쉬운 텐서 코드. numpy,PyTorch,TensorFlow 등 지원
   - stanza : 자연 언어 처리
   - datasets : 공개 데이터셋을 쉽게 로딩하고 전처리 하도록 도와주는 라이브러리
   - pytorch-forecasting : 시계열 예측
   - sktime : 머신러닝용 시계열 처리 프레임워크
   - netron : 신경망/딥러닝/머신러닝 모델 뷰어
   - pycaret : Low-Code 머신러닝 라이브러리
   - tensor-sensor : 텐서 에러 메시지를 보기 좋게 시각화

   GeekNews에서 다뤘던 라이브러리들도 몇개 있네요!
   이 글을 작성한게 Norfair를 만든 Tryo Labs 여서 보너스로 포함되어 있습니다.
   2. Rich - 터미널을 화려하게 포매팅하는 파이썬 라이브러리 https://news.hada.io/topic?id=2025
   3. DearPyGui - GPU 가속되는 파이썬 GUI 프레임워크 https://news.hada.io/topic?id=2744
   5. Diagrams - 파이썬 코드로 클라우드 아키텍쳐 그리기 https://news.hada.io/topic?id=1781
   6. Hydra - 페이스북이 공개한 복잡한 Python 어플 개발을 쉽게 해주는 프레임워크 https://news.hada.io/topic?id=716
   * Norfair - 실시간 2D 객체 트래킹용 파이썬 라이브러리 https://news.hada.io/topic?id=2892
   * Stanza - 오픈소스 Python NLP Library https://news.hada.io/topic?id=1774
   * PyCaret - 오픈소스 Low-Code 파이썬 머신러닝 라이브러리 https://news.hada.io/topic?id=2232
"
"https://news.hada.io/topic?id=3506","LibrePhotos - 구글 포토 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      LibrePhotos - 구글 포토 오픈소스 대체제

   - 도커로 설치가능. Django + React
   - 얼굴 몇장에 수동 라벨링 하면 자동으로 나머지 분류하고 사람별 보기 지원
   - 사진에 객체 인식하고 검색가능
   - ""베를린에서의 목요일"" 같은 이벤트 자동 생성
   - 지도위에서 사진 보기 및 장소로 사진 검색
   - 일자별로 사진 보기
   - 커스텀 앨범 생성 가능
   - 백엔드 캐슁 및 최적화된 프론트 엔드

   원래 Ownphotos 라는 별도 오픈소스인데, 원 개발자가 1년전부터 업데이트를 안해서 포크한 뒤에 계속 작업하는 중
   올 6월부터 구글 포토에 용량 제한이 생기니까 사진많은 분들은 대체할 곳을 찾는게 필요할거 같아요

   (저는 없지만) 시놀로지 나스 같은데서 쉽게 돌릴 수 있으면 인기 있겠는데요

   (제 시놀로지는 넘 구형이라 잘 안돌지만) 시놀로지엔 Photo Station 이라는 사진 관리도구가 있고, Android/iOS/UWP 용 DS Photo 라는 전용앱도 제공합니다.
   https://www.synology.com/ko-kr/dsm/feature/photo_station

   시놀로지 내장 기능에는 왠지 얼굴인식 기능 같은 건 없을 것 같았어요 ^^; (빌트인이 그렇지뭐 하는 선입견이랄까요 )

   빙고! 시놀로지 CPU가 그정도는 안되거든요. 그냥 정리 하는 수준 까지만 지원합니다.

   시놀로지 Photo Station은 얼굴 인식을 지원하진 않지만,
   Moments는 지원하고 있습니다.
   현재 테스트 단계인 7.0이 아니라, 현재 버전에서도 지원하고 있어서 저는 잘 쓰고 있습니다.
   정확도도 꽤 괜찮은 편입니다~ ㅎㅎ

   곧 시놀로지 dsm7.0에서 업뎃되는 기능들이네요
   https://www.synology.com/ko-kr/dsm/feature/moments

   으헛.. 업글 욕심 나네요.
"
"https://news.hada.io/topic?id=3599","GPT-Neo : GPT-3 규모의 모델을 오픈소스/무료로 만드는 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GPT-Neo : GPT-3 규모의 모델을 오픈소스/무료로 만드는 프로젝트

   - GPT-3+ 사이즈로 스케일 가능한 두가지 구현체를 개발중
   ㅤ→ GPT-Neo : Tensorflow-mesh(TPU) 기반 코드
   ㅤ→ GPT-Neox : DeepSpeed(GPU) 기반 코드
   - 현재 GPT-2 규모는 학습완료하고 모델 평가 검토
   - 단일 단계 학습으로 2천억개 파라미터 까지 테스트
"
"https://news.hada.io/topic?id=3584","Snowpack 3.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Snowpack 3.0 릴리즈

   - 스트리밍 import 지원 : 미리 설치하지 않고 필요할 때 자동으로 모듈을 설치
   - 빌드 최적화 : Go로 작성된 초고속 번들러 esbuild 활용
   - 새로운 JS API 로 빌드 파이프라인을 상세 관리 및 외부 연동 지원
   - 새로운 Node.js 런타임

   출시 1년만에 3.0 찍고 꽤 잘 성장하네요.
   긱뉴스 통해서 계속 알려드리고 있어서 나름 뿌듯(?)
   Snowpack - 웹앱을 번들러 없이 빠르게 빌드해주는 도구 https://news.hada.io/topic?id=1267
   Snowpack 2.0 릴리즈 https://news.hada.io/topic?id=2174
"
"https://news.hada.io/topic?id=3509","Why Jira Sucks - 왜 지라는 짜증나는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Why Jira Sucks - 왜 지라는 짜증나는가

   - 지라가 불편한 25가지 이상의 이유들을 정리해둔 사이트
   - Jira 대체제로 Clubhouse 와 Zepel 을 추천
   - 불편한 이유 및 대체제들은 방문자가 추가 가능

   jetbrains의 space도 있습니다.
   https://www.jetbrains.com/ko-kr/space/

   이 사이트의 불편한 이유는 다 Missing 으로 시작하는데..
   사실 JIRA의 큰 단점은 기능이 너무 많고, 복잡하고, 느리다 아닐까 합니다.
   물론 이제 호스팅 버전 없어져서, ""비싸다"" 도 포함 될것 같네요.
   - Atlassian, 서버판매 중단하고 클라우드 퍼스트로 전환 https://news.hada.io/topic?id=3051
   - Tara - 무료 JIRA 대체도구 https://news.hada.io/topic?id=2010
"
"https://news.hada.io/topic?id=3519","Anti-Aging : 노화 방지의 최신 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Anti-Aging : 노화 방지의 최신 기술

   ""향후 5~10년내에 인간의 노화를 늦추거나 되돌릴 수 있다는 증거들을 보기 시작할 것""
   노화에 대한 기초 개념부터 노화방지에 관련된 최신 기술들까지 정리한 글
   Ⅰ:왜 노화가 문제인가?
   Ⅱ:노화가 되지 않는 세상은 어떤 모습일까 ?
   Ⅲ:노화란 무엇인가 ?
   Ⅳ:노화를 늦출 수 있을까 ?
   Ⅴ:가장 유망한 노화 방지 전략들
   ㅤ1. Parabiosis (혈액 교환)
   ㅤ2. Metabolic Manipulation (대사조작, mTOR 억제제)
   ㅤ3. Senolytics - 노화세포를 죽이는 약물
   ㅤ4. Cellular Reprogramming (새포 재 프로그래밍)
   ㅤ5. 그외
   Ⅵ:결론
   * 기타 추천 링크들

   매일 꾸준히 고압산소요법을 실시했더니 세포 수준의 노화가 역전되더라는 기사를 얼마 전에 보았는데, 그건 위 글에는 소개되지 않았네요.
   https://news.v.daum.net/v/20201122135603919

   구체적인 항목은 조금 다르지만 10년 전에도 이런 말이 나왔던 것 같은데.. ㅋㅋ ㅠ
"
"https://news.hada.io/topic?id=3521","Hadolint - 도커파일 린터 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Hadolint - 도커파일 린터

   ""Haskell Dockerfile Linter""
   - 베스트 프랙티스에 기반한 도커 이미지를 만들수 있게 도와주는 도구
   - Dockerfile을 AST로 파싱해서 룰기반 검증
   - 다양한 CI/코드리뷰/에디터 도구들과 연동 가능
   ㅤ→ Travis CI, GitHub Actions, CircleCI, Jenkins, Cdacy, VS Code, Vim, Emacs, SublimeText 등
   - 온라인 버전 제공 https://hadolint.github.io/hadolint/
"
"https://news.hada.io/topic?id=3594","mnm - 오픈소스 이메일/SMTP 대체 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      mnm - 오픈소스 이메일/SMTP 대체 프로젝트

   ""mnm is not mail"" : 이메일을 대체할 클라이언트/서버/프로토콜(TMTP)을 모두 만드는 프로젝트
   2개의 메인 목표
   1. 훨씬 더 안전한 메시지(correspondence) 모델
   - 메시지를 전달하는 조직/사이트를 선택 가능
   - 자신에게 메시지를 보낼수 있는 조직/사람 선택 가능
   - 메시지가 어디서 처음에 보내졌는지 알 수 있음
   - 컨택한 누구든 블락 가능
   - 사이트를 떠나면 그쪽 트래픽을 안 볼수 있음
   2. 이메일엔 없는 기능 제공
   - 테이블로 저장되는 폼/설문조사
   - 데이터 드리븐 차트
   - 슬라이드 덱 레이아웃
   - 해시태그 및 프라이빗 태깅
   - 메시지나 다른 쓰레드로의 하이퍼링크
   - 마크다운 기반 메시지 포맷팅 & 레이아웃
   - 효율성,창의성,집중력 및 이해를 돕는 더 많은 기능들
   현재 상태
   - 2019년 4월부터 개발 시작해서 9개의 프리뷰 릴리즈
   - 윈도우/맥/리눅스 지원, 안드로이드/iOS도 지원 예정
   - 클라이언트/서버 모두 Go로 개발
   * TMTP : Trusted Messaging Transfer Protocol

   2번 목표들이 좀 우려스럽네요. 프로젝트 하나에 너무 많은 기능을 제공하려는게 아닌지...

   이메일을 대체하려고 나온 수많은 아이디어들이 있었지만 대부분 길게 가지 못했는데요. 얘는 또 다를까 우려스럽기는 합니다.
   메일 이라는게 굉장히 익숙한 단어인지라, mail 대신 Correspondence 를 쓰는데 잘 와닿지는 않네요.
   스팸/피싱 등의 문제를 해결하려고 하는 듯 한데, 과연 해결 될지도 모르겠고, 그게 해결된다고 메일 대신 쓸까? 하는 원초적인 문제도..

   Correspondence는 형용하기 위에 사용한 단어 같고 서비스의 명칭은 mnm(mail not mail)인듯 합니다. 설명을 보니 메일보다는 조금 더 신기술에 친숙한 사람들을 대상으로 만든 듯합니다. 말씀하신 것처럼 메일 대신에 사용할 대체재는 실패거나 다른 용도로 쓰이는데 과연 어떻게 될지 궁금하긴 합니다.
"
"https://news.hada.io/topic?id=3600","Julia 사용자 급격히 증가중 - Python 경쟁자가 될까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Julia 사용자 급격히 증가중 - Python 경쟁자가 될까?

   - 2012년 MIT출신 과학자들이 만든 고성능 과학용 언어
   - LLVM 기반으로 다양한 플랫폼 지원
   - 2019년 대비 2020년에 다운로드수 87% 상승
   - TIOBE 인덱스에서 #47 에서 #23 으로 상승
   - 주 선택 이유 : 속도와 성능 (86%), 쉬운 사용성 (71%)
   - 주 사용 분야 : 데이터 사이언스 (57%), 모델링 & 시뮬레이션 (53%), 통계 (52%), 최적화 (48%), 머신러닝 (47%) , 시각화 (44%)
   - 다이나믹 타입 언어
   - Reproducible Environment 기능으로 다른 플랫폼에서도 항상 같은 환경을 구성 가능
"
"https://news.hada.io/topic?id=3592","UTM - 애플 실리콘 M1 맥 지원하는 가상머신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      UTM - 애플 실리콘 M1 맥 지원하는 가상머신

   - QEMU로 X86/RISC-V 등의 CPU를 에뮬레이트 해서 윈도우/리눅스 실행
   - iOS용으로 개발되었으나, M1 및 인텔 맥도 지원 (dmg 파일로 설치)
   - 갤러리에서 설치 방법 및 이미지 제공
   ㅤ→ x64 : Windows 7/XP
   ㅤ→ ARM64 : Debian/ReactOS/Ubuntu/Windows 10 ARM용(인사이더 프리뷰)
   ㅤ→ https://mac.getutm.app/gallery/
   - UTM 설치 DMG 파일 (246MB) https://github.com/utmapp/UTM/releases/tag/v2.0.17

   UTM - 가상머신 on iOS https://news.hada.io/topic?id=1570
   예전에 iOS용 가상머신으로 소개해드린적이 있는데, iOS14로 가면서 사용이 좀 불편해졌거든요.
   근데 2.0 버전으로 업그레이드되면서 macOS 11을 지원하게 되었구요.
   현재 M1 맥에서 쓸만한 가상머신이 아직 없어서 대용으로 사용가능합니다.
   위 갤러리에서 받지 않고 그냥 가상머신 생성해서 Windows 10 공식 ISO로 설치해 봤더니 최종 실행단계에서 계속 재부팅 되네요
   윈도우 7은 갤러리에서 하라는대로 하니 잘 설치 됩니다. 물론 속도는 아주 만족스럽지 않습니다만 쓸만은 합니다.
   데비안 ARM 버전이 가장 성능이 좋다고 하네요.

   2023년 9월 관련 기사: UTM - iOS 및 macOS를 위한 가상 머신 | GeekNews
"
"https://news.hada.io/topic?id=3624","어디서든 대용량파일을 링크로 첨부할수 있는 크롬 확장앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     어디서든 대용량파일을 링크로 첨부할수 있는 크롬 확장앱

   극도로 단순한 UX를 구현한 우클릭 파일첨부 크롬 익스텐션.
   A.text입력창에서 우클릭 메뉴선택 B.파일선택
   단 두가지 단계로 용량제한 없이 파일을 첨부할 수 있음.
   업로드를 완료를 기다릴필요가 없어서 10G도 이미지 보내듯이 즉시 전달가능
   트위터/지메일/블로그/게시판등 text입력가능한 모든 곳에서 사용가능

   파일키위라는 서비스를 처음 들어보네요. send anywhere 같은 느낌으로 쓸 수 있는 것처럼 보이는데 업로드를 안기다려도 되다니 편리할 것 같아 보이네요.

   대략 10달 전에 제작자 분이 이곳에서 직접 소개하셨던 파일 공유 서비스입니다.
   https://news.hada.io/topic?id=1695

   크롬기반의 MS엣지나 네이버웨일에서도 동일하게 설치해서 사용할수 있습니다.
"
"https://news.hada.io/topic?id=3574","Google의 Go 팀 리드 spf13과의 인터뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Google의 Go 팀 리드 spf13과의 인터뷰

   - Golang이 공개된지 13년이 지난 현재, Google Go 팀에서 Product & Strategy 리드를 맡고 있는 spf13을 infoq에서 한 인터뷰
   - Go의 심플함 덕분에, 빠르게 Go를 시작해볼 수 있다. 반나절이면 Go의 전체를 훑어볼 수도 있다.
   - Go가 오늘날 최고의 모던-언어라고 생각한다.(Dart+Flutter, Rust와 함께)
   - Go의 미래는 모든 기능 제안에 대해 논의하고 토론하는 오픈소스 커뮤니티에 의해 형성된다. 명확한 합의에 도달하지 않으면 기능이 구현되지 않는다.
   - Go 사용자 커뮤니티의 크기는 약 18 개월마다 두 배로 커지고 있다.
   - 처음에는 Python이나 Ruby 같은 다이나믹 언어를 사용하던 유저들이 Go를 선택했지만, 이제는 언어가 성숙해지면서, Java, .Net과 C++를 사용하는 프로그래머도 GO를 사용하기 시작했다.
   - 어려운 날들 속에서, 커뮤니티는 서로를 돕도록 적응했고, 많은 밋업이 열렸으며, 새로운 리소스들이 있었다.
   ---
   spf13은?
   - 현재 Google 소속으로 Golang의 개발을 리드하고 있으며, MongoDB의 Chief Developer Advocate, Docker의 COO 등을 경험했다.
   - Golang 커뮤니티에서 가장 유명한 라이브러리를 다수 작성했다. Hugo, cobra, viber, ...

   오타 정정, 마지막줄
   ---
   viber -> viper
"
"https://news.hada.io/topic?id=3575","애플, macOS 새 베타에서 자사앱들 방화벽 우회 하는 기능 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 애플, macOS 새 베타에서 자사앱들 방화벽 우회 하는 기능 제거

   - macOS 11.2 beta 2 에서 ContentFilterExclusionList 제거
   - BigSur로 오면서 써드파티 네트웍 커널 확장(kexts)이 빠지고 Network Kernel Extensions(NKEs)로 교체
   - 그러면서 애플의 앱스토어 및 각종 기본 앱들은 이걸 거치지 않게 해둬서(CFEL에 포함) 방화벽으로 차단이 불가능 해짐
   - 이번 베타에서 CFEL안에서 애플의 모든 앱이 제거 됨
   * 기능 자체가 제거된 것인지, 리스트만 빠진것인지는 아직 미 확인

   추가적으로 11.2 베타 2에서 Full Custom Kernel 지원이 가능해졌다는 얘기도 올라왔네요.
   https://twitter.com/marcan42/status/1349478954982232064
"
"https://news.hada.io/topic?id=3514","트럼프 행정명령으로 중국 3대 통신사(China Mobile, China Telecom, China Unicom) 뉴욕 증시 상장 폐지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                              트럼프 행정명령으로 중국 3대 통신사(China Mobile, China Telecom, China Unicom) 뉴욕 증시 상장 폐지

   트럼프 행정명령으로 중국 3대 통신사인 차이나 모바일, 차이나 텔레콤, 차이나 유니콤이 뉴욕증시에서 퇴출됩니다. 다만 이 세 통신사는 뉴욕증시보다 홍콩증시에서 메인으로 거래되고 있기 때문에 영향이 크지는 않고 상징적인 의미만 있을 것으로 보입니다.
"
"https://news.hada.io/topic?id=3496","YearCompass - 새해 나침반","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          YearCompass - 새해 나침반

   - 올 한해를 돌아보고 새해 계획을 도와주는 다이어리
   - 출력해서 손으로 적는 버전과 입력이 가능한 PDF 두가지 제공 (한글판)
   - 혼자 또는 그룹으로 같이 진행 가능
   작년
   - 나의 작년은 어땠나요
   - 6가지 문장으로 나의 작년을 적어보기
   - 작년 한해에 대한 6개의 질문
   - 최고의 순간은 ?
   - 내가 성취한 가장 큰 3가지 목표는 ?
   - 나의 가장 큰 도전 3가지
   - 용서하기
   - 흘려보내기
   - 작년의 3가지 단어
   - 작년에 읽었던 인상깊었던 책
   - 작년에 일어난 것들에게 작별을 고하세요
   새해
   - 꿈은 크게 꾸기
   - 새해에는 이런 일들이 일어날 거에요
   - 미래를 위한 마법의 3가지 단어
   - 6가지 문장으로 내년의 나를 표현해 보세요
   - 새해 의 나를 대표하는 단어는
   - 비밀스러운 소원

   이거.. .한국어를 누르면 일본어로 나오고 일본어를 누르면 한국어로 나오네요 :) ㅋㅋㅋㅋㅋ

   그거 뭔가 코딩을 잘못한건지 리프레시 하면 또 제대로 나오고 하길래.. 밑에 링크로 붙여놨습니다 ㅎㅎㅎ

   출력용 : https://yearcompass.com/booklets/…
   입력용 : https://yearcompass.com/booklets/…
"
"https://news.hada.io/topic?id=3569","Visa, 핀테크 스타트업 Plaid 인수 포기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Visa, 핀테크 스타트업 Plaid 인수 포기

   - 1년전 53억달러(6조원)로 인수하겠다는 계획을 발표
   - 작년 11월 미국 법무부가 반독점 소송을 제기한지 2개월만에 포기 결정
   ㅤ→ ""이 인수는 경쟁을 없애서 좀 더 혁신적인 온라인 지불 서비스들이 나오는데 위협이 될 것""
   * Plaid 는 작년 한해 60% 이상의 사용자 증가율과 매출면에서는 100% 이상 성장했을 것으로 예상
   * DoJ의 공식 문서 ""Visa and Plaid Abandon Merger After Antitrust Division’s Suit to Block""
   ㅤ→ https://justice.gov/opa/pr/…

   시리즈C에 들어간 투자사가 a16z, 골드만 삭스, 클라이너 퍼킨스 등인데..
   다들 아쉬울지 잘 되었다고 생각할지 궁금하네요.
   - VISA가 6조원에 인수하는 핀테크 스타트업 ‘Plaid’의 핵심 서비스들 https://news.hada.io/topic?id=1314
   - Plaid가 Node 병렬처리를 30배로 늘린 방법 https://news.hada.io/topic?id=1078
"
"https://news.hada.io/topic?id=3542","DOSBox-X : DOS 에뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          DOSBox-X : DOS 에뮬레이터

   - DOS, Windows 3.x ~ 9x 지원
   - 기존 DOSBox 대비 더 유연하고 다양한 기능 지원
   ㅤ→ GUI 드롭다운 메뉴 및 설정 도구
   ㅤ→ 상태 저장/로드 지원
   ㅤ→ 자동 드라이브 마운팅(윈도우)
   ㅤ→ 더 훌륭한 DOS 호환성
   ㅤ→ 4DOS 지원
   ㅤ→ ZIP/7Z 압축파일을 드라이므로 마운트 가능
   ㅤ→ 패러럴 포트로 프린트 기능 지원 (실제/가상)
   ㅤ→ FAT32 지원
   ㅤ→ CPU 속도 최적화 및 터보모드
   ㅤ→ Win 3.x ~ 9x 지원
   ㅤ→ Novell NE2000 네트웤 어댑터 에뮬레이션 지원
   ㅤ→ DirectX & Direct3D 픽셀쉐이더 지원
   ㅤ→ 일본 NEC PC-98 모드 에뮬레이션 지원
   ㅤ→ SDL2 지원 (Simple DirectMedia Layer)
   - 윈도우/맥/리눅스/DOS 용 바이너리 제공
"
"https://news.hada.io/topic?id=3543","Next Big Thing in 2021","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Next Big Thing in 2021

   미국 VC 50인들이 2021년에 클 것이라고 예상한 것들 모음
   - 기후 위기를 다루는 것
   - 헬스케어 : 기술, 커뮤니티, 모니터링
   - 미디어 : 음성 명령, Vtuber(가상 유튜버), 미디어 통합
   - 우주 : 상용 우주여행이 가능할 정도의 비용 절감
   - 음식 : 탄력적으로 살아남기, 온라인 식료품 사업
   - 핀테크 : 모든 회사가 핀테크 회사가 될수 있는 인프라
   - 엔터프라이즈 : Confluence/HashiCorp같은 회사의 성장. 생산성 개선 도구. ARR(Annual Recurring Revenue)이 바이럴 시작
   - 탈중앙화 : 더 다양한 곳, 예상치 못한 곳에 탈중앙화가 적용. DeFi
   - Individuality : 개인 브랜드, ""Personal Business OS"", 비공개 멤버 기반 커뮤니티
   - VC : TikToker(유튜버,팟캐스터,스트리머)의 VC화. 시드라운드가 더 커지고 활성화
   - 번들링 : 핀테크의 번들링, 통신/협업의 번들링, 데이터소프트웨어 공급자의 번들링. 메타 레이어 번들링
   - 일하는 방식 : 하이브리드 직장/재택 모델, 비동기 협업, 디지털 퍼스트/분산/글로벌/유연한 업무 방식
   - 연결 : 소셜 헬스, 디지털에서의 새로운 연결(클럽하우스 등), 소셜 거리두기 상태에서의 더 깊은 인간적 관계를 위한 경험들, 커머스를 내장한 버티컬 소셜 네트워크.
"
"https://news.hada.io/topic?id=3557","GCC Front-End for Rust","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GCC Front-End for Rust

   - gcc 툴체인 상에서 Rust를 사용하기 위한 Rust 컴파일러 대체 구현체
   ㅤ→ gfortran, g++ 프론트엔드 등과 같은 목표
   - 이를 이용하면 시스템 소프트웨어, 리눅스 커널을 포함한 더 많은 곳에서 C 대신 Rust를 사용 가능
   * GCC Frontend Howto : https://tldp.org/HOWTO/GCC-Frontend-HOWTO.html
"
"https://news.hada.io/topic?id=3587","2020 JavaScript Rising Stars","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2020 JavaScript Rising Stars

   1년간 받은 깃헙 Star 기준으로 뽑은 JS 관련 도구 순위
   - 인기 프로젝트 : Deno > Vue.js > React > Playwright > VS Code > esbuild > Vue Element Admin > eDEX-UI > Next.js > Tailwind CSS
   - 프론트엔드 프레임워크 : Vue.js > React > Angular > Svelte > Alpine.js
   - Node.js 프레임워크 : Next.js > Strapi > Next > Nuxt > Blitz
   - React 에코시스템 : Next.js > React Query > Recoil > Ant Design > React Hook Form
   - Vue 에코시스템 : Vue Element Admin > Vite > Nuxt > Element Plus > vue-next
   - Angular 에코시스템 : ngx-admin > Material Design for Angular > Scully > Angular CLI > NG-ZORRO
   - Build Tools : esbuild > Rome > Vite > Snowpack > Webpack
   - CSS 프레임워크 : Tailwind CSS > Bootstrap > Bulma > new.css > Halfmoon
   - CSS in JS : Styled Components > Twin > Emotion > Linaria > Theme UI
   - 테스팅 : Playwright > Storybook > Puppeteer > Cypress > Headless Recorder
   - 모바일 : React Native > Expo > Quasar > Ionic > Sonar
   - JS Flavors/Compilers : TypeScript > swc > Babel > Reason > Flow
   - State Management : Recoil > XState > Immer > Zustand > Redux
   - GraphQL : Gatsby > Hasura GraphQL Engine > Redwood > Prisma > Apollo Client
   - 교육 자료 : JS Algorithms & Data Structures > Node.js Best Practices > You Don't Know JS > Clean Code > 30 seconds of code

   State of JS 2020 [한국어] - https://news.hada.io/topic?id=3586
   이거랑 비교하면서 보니 재미나네요.
   Next.js 와 esbuild, snowpack 이 눈에 띕니다.
   작년 버전 : 2019년 한해동안 받은 GitHub Star갯수로 알아본 JavaScript 프로젝트 순위 https://news.hada.io/topic?id=1268
"
"https://news.hada.io/topic?id=3580","Google’s recommended architecture for Android apps","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Google’s recommended architecture for Android apps

   Android Architecture 그림과 설명이 잘 요약되어 있습니다.
   아주 자세하지는 않으나 한번 쓱 훝어보기에는 괜찮은 것 같습니다.
"
"https://news.hada.io/topic?id=3505","리눅스 강화 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               리눅스 강화 가이드

   보안 및 정보보호에 중점을 둔 리눅스를 설정하는 법
   1. 리눅스 배포본 선택하기
   2. 커널 강화
   3. 필수 접근 관리
   4. 샌드박싱
   5. 메모리 할당자 강화
   6. 컴파일 플래그 강화
   7. 메모리 세이프한 언어들
   8. 루트 계정
   9. 방화벽
   10. 식별자
   11. 파일 권한
   12. 코어 덤프
   13. 스왑
   14. PAM
   15. 마이크로코드 업데이트
   16. IPv6 개인정보보호 확장
   17. 파티션 & 마운트 옵션
   18. Entropy
   19. 루트계정으로 파일 편집
   20. 배포폰별 강화
   21. 물리적 보안
   22. 모범 사례

   이런 용도에 가장 적합한 배포본으로 Gentoo 를 추천하지만, 직접 선택하고 빌드해야 하는 사용성 문제가 있으니
   그나마 나은 대안으로 Void 의 musl 버전 빌드를 추천하네요.
   (글 내부에서 기본 C 라이브러리는 크고 복잡해서 공격지점이 많은 glibc 보다는 musl 을 추천하고 있습니다)
   ** 글 앞에 있는대로 이 가이드에서 추천하는 옵션들이 정확히 뭔지 더 조사해 보고,
   ㅤ 그에 따른 사이드이펙트가 어떤게 있는지도 알아본 뒤에 적용해야 한다는걸 명심하세요.
   배포본별 강화 가이드
   - Fedora https://static.open-scap.org/ssg-guides/ssg-fedora-guide-index.html
   - Debian https://wiki.debian.org/Hardening
   - Gentoo https://wiki.gentoo.org/wiki/Hardened_Gentoo
   - Redgat https://access.redhat.com/documentation/en-us/…
   - SUSE https://documentation.suse.com/sles/12-SP4/single-html/SLES-hardening/
   - 각 배포본용 보안 강화 Ansible 컬렉션 https://github.com/dev-sec/ansible-collection-hardening
"
"https://news.hada.io/topic?id=3579","JuiceFS - Redis와 S3를 이용한 분산 POSIX 파일시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                JuiceFS - Redis와 S3를 이용한 분산 POSIX 파일시스템

   - POSIX 완전 호환으로 기존 어플리케이션들도 모두 사용가능
   - 몇ms단위 레이턴시로 훌륭한 성능
   - BSD 락(flock) 과 POSIX 레코드 락(fcntl) 모두 지원
   - LZ4로 기본 압축(ZStandard도 선택가능)
   - Redis를 파일시스템 메타데이터 저장소로 활용
   - 클라우드 객체 저장소를 활용해서 무한 확장 가능한 공유 드라이브처럼 사용
   ㅤ→ 로컬디스크, Amazon S3, Google Cloud Storage, Azure Blob Storage 및 알리바바/텐센트 등도 지원
   - 차후 로드맵
   ㅤ→ 쿠버네티스 CSI 드라이버
   ㅤ→ Hadoop SDK
   ㅤ→ S3 gateway
   ㅤ→ Windows 클라이언트
   ㅤ→ Redis 외에 다른 DB지원
"
"https://news.hada.io/topic?id=3500","오늘날의 GPU 연산 API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            오늘날의 GPU 연산 API

   ## 엔비디아
   시장의 개척자, 발달한 툴킷. 여전히 빠르게 발전하고 있고 특히나 고레벨(higher-level) API는 더더욱 그러함. 엔비디아가 판매하는 모든 GPU는 CUDA를 지원함.
   PGI로 불렸던, 리눅스에서만 사용 가능한 HPC SDK는 OpACC, C++ 표준 병렬화 (stdpar), OpenMP (베타) 지원을 추가함.
   엔비디아의 HPC SDK 라이센싱의 문제 중 하나는 다음 조항임:
   **You shall strictly prohibit the further distribution of the Run-Time Files by users of an End-User Application**
   사용자가 번들된 앱에서 필요로 하는 런타임 파일을 포함한 채로 앱을 재배포할 수 없기 때문에 애플리케이션을 아예 배포할 수 없을 수도 있음. 이 문제는 대부분이 사용하고 있는 CUDA SDK에는 해당되지 않음.
   ## AMD
   AMD 하드웨어에서 주력하고 있는 GPGPU 프로그래밍은 ROCm임. AMD가 소유한 HIP 외에 공식적으로 지원되는 건 OpenMP와 OpenACC.
   여기에는 몇 가지 확실한 단점이 있음:
   - 리눅스 전용, 따라서 시장 상당 부분에서 선택지에 들지 못함.
   - ROCm 툴체인으로 생성된 바이너리는 IR을 타겟으로 하지 않고 하드웨어에 종속적임. 새로운 세대가 나오면 바이너리를 재컴파일 해야 함.
   - 릴리즈 이후 꽤 오랜 시간 동안 새 하드웨어에 대한 지원이 사실상 없음.
   이런 단점은 데스크탑에서의 유용성을 사실상 없는 것으로 만들고 OpenCL만 AMD GPU 하드웨어를 위한 벤더 제공 API로 남게함.
   ## Intel
   oneAPI는 최근 출시한 모든 인텔 GPU에서 지원되지만 고성능은 아직 없음. Intel의 Level Zero 외에 공식적으로 지원되는 API는 OpenMP와 SYLC.
   oneAPI의 Level Zero는 SPIR-V를 IR로 사용하여 향후 출시하게 될 하드웨어에 seamless한 지원을 가능하게 함. 윈도우 또한 지원함.
   ## Khronos
   여러 벤더사에서 사용할 수 있는 업계 표준을 제공함.
   OpenCL 3.0으로 알려진 reset은 아직 큰 영향이 없음. SYCL과 Vulkan 연산의 결합은 좋은 개발자 경험과 함께 단일 바이너리를 여러 벤더에서 사용 가능하게 하는 더 나은 길이 될 수 있음.
   실제 OpenCL 지원:
   오늘날 엔비디아는 extensions을 지원하는 OpenCL 1.2를 제공함.
   AMD는 쓸만한 OpenCL 1.2 구현과 함께 엄청나게 버그가 많은 OpenCL 2.x 구현을 제공함 (제대로 디버깅할 방법도 없음).
   Intel은 Intel GPU를 위한 OpenCL 3.0 구현을 제공함.
   OpenCL 1.2는 Apple Silicon을 포함, macOS에서도 지원하긴 하지만 문서는 deprecate됨.
   ## Microsoft
   C++ AMP는 죽은 것처럼 보임. Vendor-independent이면서 Visual C++의 지원을 받았지만 D3D11 후로 업데이트된 적이 없음. 오래된 ROCm 버전 또한 지원됐었음.
   ## Apple
   Metal 연산은 macOS/iOS/…를 위한 것일 뿐. GPGPU 분야에서는 매력이 상당히 떨어짐, 특히나 GPU 연산 성능에선 더욱 그러함.

   GPGPU는 벤더,OS마다 상황이 천차만별이라서 언젠가 통합이 되었으면 젛겠내요.
   그나저나 윈도우의 DirectML에 대한 언급은 없네요. 하드웨어 폭넓게 지원하고 최근애는 WSL에서도 돌아가게 만들어서 흥미가 생기던데 말이죠.
"
"https://news.hada.io/topic?id=3545","콘텐츠 마케팅 2021 가이드 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            콘텐츠 마케팅 2021 가이드

   1. 비디오 콘텐츠에 더 투자
   ㅤ→ 유튜브 15초 인트로가 중요
   ㅤ→ 유튜브 ""추천 동영상""에 최적화 하기
   2. 이메일의 귀환
   ㅤ→ 블로그 첫화면을 뉴스레터 구독페이지로
   ㅤ→ 토픽 업그레이드
   3. 콘텐츠 마케팅 스케일하기
   ㅤ→ 뭔가를 만들려 하지 말고, 하는 걸 문서로 적어보기
   ㅤ→ 팀 구성
   4. ""원본 소스""가 되는 콘텐츠 만들기
   ㅤ→ 남들이 인용할만한 흥미로운 데이터 기반의 글
   ㅤ→ 시각화 하기
   5. 새로운 주제에 뛰어들기
   ㅤ→ 구글 트렌드 쿼리
   ㅤ→ Exploding Topics
   6. 에픽 콘텐츠 만들기
   ㅤ→ 풍부한 내용의 깊고 인상적이면서 품질 좋은 콘텐츠
   7. 콘텐츠 용도 변경 2.0
   ㅤ→ 콘텐츠를 다양한 매체에 맞게 변화
   ㅤ→ 일부분만 재사용
   8. 2021년 콘텐트 마케팅 전략
   ㅤ→ 트위터 쓰레드 사용
   ㅤ→ 초 개인화된 이메일
   ㅤ→ 링크드인 포스트 활용
"
"https://news.hada.io/topic?id=3554","GoldenRabbit - 맥북프로의 터치바를 쓸모있게","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GoldenRabbit - 맥북프로의 터치바를 쓸모있게

   - BetterTouchTool 의 가벼운 프리셋 (램 30메가)
   ㅤ→ Main : ESC, 음악 컨트롤센터, 앱 스위처, 파인더, 음소거, 날짜&시간, 날씨, 배터리표시
   ㅤ→ Option키 : 밝기 조절 슬라이더, 볼륨 조절 슬라이더, 잠자기, 잠금, 키보드 백라이트 조절, 가상 데스크톱 이동

   전 위 세팅에다가, 이 글에서 참고했던 GoldenChaos 에서 몇개 더 빼다가 추가해서 사용중입니다.
   - https://goldenchaos.net/goldenchaos-btt.html

   혹시 어떤 기능 추가로 사용중이신지 물어봐도 되나요??

   저는 ctrl 키에 Window Snap 관련 기능들을 넣어두고요
   shift 에 제가 주로 쓰는 특수문자들 ( · ۰ • ㅤ→ ↑ ↓ ↔ ► ➔ ➟ ◄ ⇥⇦⇧⇨⇩ △ ▲ ▽ ▼ ↔ ✓ ) 같은것을 넣어두고 씁니다.

   감사합니다!
"
"https://news.hada.io/topic?id=3520","돈 내고 써도 만족스러운 SaaS들 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          돈 내고 써도 만족스러운 SaaS들

   3명 팀이 협업을 위해 사용중인 도구들을 비용과 함께 정리
   - Missive : GMail을 팀 인박스로 쓰게해주는 협업 도구. 이메일 쓰레드에 댓글/토론 가능
   - Notion : 팀 위키
   - Linear : GitHub과 잘 연동되는 이슈 트래킹 도구
   - Vercel : 프론트엔드/서버리스 호스팅
   - SavvyCal : 미팅 시간 스케줄링 도구
   - Plausible Analytics : 개인정보 보호에 신경쓴 Google Analytics 대체제
   - Mailbrew : RSS,트위터 피드,뉴스레터등을 묶어서 Digest 이메일로 보내주는 도구
   - Super : Notion 문서를 커스텀 도메인 웹사이트로 만들어주는 도구

   Linear 앱은 처음 접해보는데 좋아보입니다. 좋은글 감사합니다.

   오 Super 깔끔하네요. 블로그 업데이트 하는데 귀찮을때 좋을 것 같네요.
"
"https://news.hada.io/topic?id=3614","Wine 6.0 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Wine 6.0 릴리즈

   - 코어 모듈들 PE포맷으로 변경
   ㅤ→ NTDLL, KERNEL32, GDI32, USER32 등이 PE로
   ㅤ→ libwine.so 의존성 제거
   - Direct3D(WineD3D)용 Vulkan 렌더러 적용
   - DirectShow 및 Media Foundation 지원
   - 텍스트 콘솔 최근 윈도우에 맞게 재 구현
"
"https://news.hada.io/topic?id=3556","아마존이 HP/Linux로 교체한게 AWS의 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      아마존이 HP/Linux로 교체한게 AWS의 시작

   - 2000년 닷컴 버블 시절 아마존의 가장 큰 비용은 데이터센터의 비싼 Sun 서버들
   - 1년에 걸쳐서 Sun을 걷어내고 HP/Linux로 교체한 것이 AWS의 기초가 되었음
   - 그 시절 아마존의 모토는 ""Get big fast"". 사이트가 다운되면 바로 손실로 이어졌기에 안정성이 중요했음
   ㅤ→ 그래서 Sun 장비가 비싸고 독점적이지만, 가장 신뢰할 수 있었기에 모든 인터넷 회사들이 사용했음
   - 2000년도에 VC한테 투자받은 스타트업들이 사업을 중단하면서, 새 Sun서버들이 ebay 에 1달러도 안되는 가격으로 등장하기 시작
   - 이때 아마존은 Sun과 더 나은 거래를 협상할 수도 있었지만, Jeff는 더 급진적인 접근방식을 택함
   - 그시절 아마존의 CTO는 월마트 출신의 Rick Dalzell로, 그는 전체 기술조직을 중심으로 Sun을 HP/Linux로 대체
   - 리눅스 커널은 Jeff가 아마존을 시작한 같은 해인 94년에 출시되었음. 6년이 지난뒤, 새롭고 위험한 접근 방식으로 회사를 베팅
   - 전환하는 동안 제품 개발이 중단되고, 1년 이상 새로운 기능 출시를 동결했음. 엄청난 백로그가 있었지만, Linux로의 전환을 완료할 때까지 아무것도 ship 할수 없었음.
   - 또한 현금소진을 줄이기 위해 가격을 올리면서 수익 성장이 둔화. 안 좋은 순환이었고, 돈이 줄어들면서 시간이 부족했음. 이러다 파산하기 몇분기 전 이었음
   - 그러나 Linux 전환을 시작하자 돌아갈수 없었음. 코드베이스를 리팩토링하고, 서버를 교체하면서, 컷오버(빠른 단계 전환)을 준비함
   - 작동한다면 인프라 비용이 80+% 이상 감소하고, 실패하면 웹사이트가 무너지고 회사가 망할 것
   - 마침내 제 시간내에 문제없이 전환을 완료. 전체 기술팀에게 큰 성과였음. 사이트는 중단없이 계속되었고, CAPEX(설비 투자 비용)가 하루밤 새에 대폭 감소.
   ㅤ→ 그리고 갑자기 무한 확장 가능한 인프라가 생김
   - 그러자 더 흥미로운 일이 생김. 리테일러로서 매년 11/12월마다 트래픽과 매출이 급증하는 큰 계절적 상황을 겪고 있음
   ㅤ→ Jeff는 ""우린 연간 46주는 초과한 서버 용량을 보유하고 있는데, 이걸 다른 회사에 임대하는 건 어떨까 ?"" 라고 생각하기 시작
   - 같은 시기에 Jeff는 내부 종속성을 분리(Decoupling)해서 팀들이 다른 팀의 통제없이 개발하도록 하는데 관심이 있었음
   ㅤ→ 이 느슨한 결합 모델을 활성화 하는데 필요한 아키텍처 변경이 AWS를 위한 API 기본 요소가 되었음
   ㅤ→ 참고 : 아마존 역사에서 가장 중요한 제프베조스의 2002년 사내 메일 https://news.hada.io/topic?id=638
   - 이것들이 AWS를 만든 기본 Insight. Jeff가 전사 미팅(All-hands)에서 전력그리드 관점에서 이 아이디어를 설명한 것을 기억함
   ㅤ→ ""1900년대에 기업은 상점을 열기 위해서 자체 발전기를 가져야 했습니다. 2000년대에 기업이 자체 데이터 센터를 구축해야할 이유는 뭘까요 ?""
   - 클라우드 인프라는 AWS 없이도 등장 했을 것(예를 들어, Tesla 없는 전기자동차 처럼) 하지만 얼마나 후에 어떤 기회비용으로 가능 했을지는 모름
   ㅤ→ AWS가 회사를 시작하는 비용을 크게 줄인 후 혁신이 폭발하고, 현대적인 VC 에코시스템이 탄생 했음
   - 아마존은 2000~2003년에 거의 죽을뻔 했지만, 이런 위기가 없었다면 완전히 새로운 아키텍처로 전환하는 어려운 결정을 내리지 않았을 것
   ㅤ→ 이 변화가 없었다면 AWS는 만들어 지지 않았을 것. ""좋은 위기를 낭비하지 마세요""
   - PS : 아마존은 최근 Oracle을 뜯어 내는데 몇년이 걸렸음. 힘든 일을 하려면 근육이 필요하고, 힘든 일을 함으로써 근육이 만들어짐
   ㅤ→ ""최고의 기업은 모든 도전을 기회로 보고, 그 사고방식을 그들의 문화에 새깁니다""

   이런게 비전이다 하는 생각이 드네요.

   관련해서 실제로 교체한 장비는 Sun이 아니라 Compaq/Digital Tru64 Alpha 서버 였다는 Peter Vosshall의 답변이 있네요.
   - https://mobile.twitter.com/PeterVosshall/status/1347697560249458689
   Peter는 AWS에서 은퇴한 엔지니어라 이쪽이 더 신뢰할만 합니다.
   다만, 전체 흐름상 Sun인지 Alpha인지는 중요치 않아서 그냥 원문을 그대로 번역했습니다.
   * 리눅스 커널은 Linus Torvalds가 만든 첫 버전은 91년에 나왔지만, 94년에 나온 1.0 기준으로 작성한듯 합니다.
   AWS의 시작에 대해서는 이거 말고도 다양한 관점의 이야기들이 있습니다.
   실제로 처음 시작이 EC2가 아니고, 실제 Web Service, SQS/S3 등이 먼저 였다고 얘기되기도 합니다.
   https://news.ycombinator.com/item?id=25700519
   역시나, 전체 글의 흐름상 중요치 않은 것 같아서 원문 그대로 옮겼으니 참고하시기 바랍니다.
   이 트윗 쓰레드를 쓴 Dan Rose 는 킨들팀의 첫번째 멤버였는데, 아마존의 예전 얘기를 종종 이렇게 트윗 쓰레드로 남기곤 합니다.
   - Kindle 개발 초기에 Jeff Bezos에게 배운 것 https://news.hada.io/topic?id=2602
"
"https://news.hada.io/topic?id=3565","Bubbles - 화면/영상에 댓글로 원격 협업하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Bubbles - 화면/영상에 댓글로 원격 협업하는 도구

   - 화면/앱을 녹화/캡쳐한뒤 URL로 팀원들과 공유하는 협업 툴
   ㅤ→ 작성자만 크롬 확장 설치 필요, 수신자는 툴 설치 필요 없음
   - 화면의 특정 위치 또는 녹화한 영상의 특정 시간대에 댓글 달기
   ㅤ→ 다른 사람이 답변 남기거나, Resolve 눌러서 확인 가능
   - 별도 가입 필요없음. 무료.

   비디오 레코딩은 30분 정도까지만 되나보네요. Product Hunt에 2달 전에 남긴 댓글을 보니.

   전에도 다른 서비스에서 같은 생각을 한 적이 있는데, 영상을 녹화해서 저장하고 그걸로 다수에게 광고를 보여주는 것도 아닌데 어떻게 무료가 가능한지 정말 궁금하네요...

   저도 이 점을 생각해본 적 있는데, 로컬에서 작업해서 로컬 영상을 WebRTC로 뿌리는 것도 생각해봤는데...이게 가능한지 모르겠네요.
"
"https://news.hada.io/topic?id=3507","MS Monaco Editor","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            MS Monaco Editor

   - VSCode의 코드 에디터를 웹에서 사용 가능하게 분리한 모듈
   - 크롬/Edge/FF/Safari 등 지원. 모바일은 지원 안함
   - npm 모듈로 설치하여 사용 가능
   - HTML,JS,TS,CSS,LESS,SCSS,JSON 의 IntelliSense 및 Validation
   - 기본적인 언어들 Syntax Highlighting (Monarch 기반)
   ㅤ→ PHP,C#,C++,Java,VB,Lua,R,Python,Ruby,Markdown 등
   - 두 개의 창으로 Diff 보기 내장 (지원하는 모든 언어)
   - 다크 테마 지원
"
"https://news.hada.io/topic?id=3508","Rust 14.9.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Rust 14.9.0 릴리즈

   - 64bit ARM Linux Tier 1
   - 64bit ARM macOS & Windows Tier 2
   - 테스트 프레임워크가 쓰레드 출력을 캡쳐
   * Tier 1 : 코드의 모든 변경이 반영 및 테스트 되고, 선빌드된 바이너리를 제공
   * Tier 2 : 코드가 빌드 되는걸 보장하고 선빌드된 바이너리도 제공하지만, 모든 테스트를 수행한 것은 아님. 즉 버그가 있을 수 있음
   * Tier 3 : 컴파일러가 지원은 하지만, 빌드나 테스트는 해보지 않은 상태. 바이너리 제공도 없음
"
"https://news.hada.io/topic?id=3530","Termux 구글 플레이 버전 업데이트 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Termux 구글 플레이 버전 업데이트 중단

   - SDK Level 29(Android 10) 에서 생긴 SELinux 제한으로 execve() 함수 호출이 불가능
   ㅤ→ apt, bash 등이 실행 불가능 해짐
   - 최신 버전을 위해서는 F-Droid 버전으로 이전을 추천
   - 차후에 나올 1.0 메이저 버전에서는 사용자 경험을 약간 포기하고 SDK 29를 지원할 예정

   Termux - 안드로이드용 터미널 앱 https://news.hada.io/topic?id=1994
   apt로 다양한 패키지를 설치해서 쓰는게 장점이었는데, 그걸 포기할 수는 없으니 이렇게 처리한거 같네요.
"
"https://news.hada.io/topic?id=3602","GitHub 프로젝트에 보안 적용하기 (체크리스트)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GitHub 프로젝트에 보안 적용하기 (체크리스트)

   1. Git Credential Manager(GCM) Core 적용 필수
   2. 2FA 설정
   3. Signed Commit 강제 적용
   4. 릴리즈 브랜치 보호하기 (룰 기반 Protected branch)
   5. PR 리뷰 및 승인 강제
   6. 중요 정보 누출을 막기위한 Secret 스캐닝 도구 적용하기
   7. 누출된 기록 삭제를 위해 Git History 지우기(재작성)
   8. 신뢰할 수 있는 GitHub Action만 실행
   9. GitHub Action 으로 Secret 보호
   10. 디펜던시들에 대한 취약성 검사
   11. Dependabot 으로 취약한 디펜던시들 자동 보안 업데이트
   12. GitHub CodeQL 로 코드의 보안 취약성 검사
   13. 보안 정책 작성 및 Repo에 적용 하기
   14. 임시 Private Fork를 만들어서 보안 취약성 해결하기
   15. 사용자를 위해, 보안 업데이트에 대한 관리자 권고 게시 하기
"
"https://news.hada.io/topic?id=3564","LuLu - 맥용 오픈소스 방화벽 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           LuLu - 맥용 오픈소스 방화벽

   - 외부로 나가는 (outgoing) 트래픽 차단용 방화벽
   - macOS 10.15+
   - Rule 기반 관리 : 프로그램 경로, 원격 주소/도메인/포트 별 허용/거부
   - 유료인 LittleSnitch 의 훨씬 간단한 버전

   비슷한 방화벽들
   - simplewall [윈도우,오픈소스] https://www.henrypp.org/product/simplewall
   - Glasswire [윈도우,Freemium] https://www.glasswire.com/
   - Portmaster [윈도우/우분투/맥(예정,오픈소스)] https://safing.io/portmaster/
   - OpenSnitch [리눅스,오픈소스] https://github.com/evilsocket/opensnitch

   저는 테더링으로 사용할 때 원하는 것만 네트워크 되게 하려는 목적으로 TripMode https://tripmode.ch/ 를 쓰고 있는데 비슷한 목적으로 사용할 수도 있겠네요.
"
"https://news.hada.io/topic?id=3538","Asahi Linux : 애플 실리콘용 리눅스 프로젝트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Asahi Linux : 애플 실리콘용 리눅스 프로젝트

   - PS4 Linux 를 만들었던 fail0verflow의 marcan 이 시작
   - 애플 실리콘(M1)위에서 설치가능한 Arch Linux ARM의 리믹스 버전을 출시할 예정
   - 탈옥 필요없이 커스텀 커널 부팅 가능한 것을 이용
   - 애플 GPU를 리버스 엔지니어링 해서 오픈소스 드라이버 개발 예정

   아직 많은 사람이 참여한것은 아니고, 이제 시작하는 단계의 프로젝트 입니다.
   아마도 오랜 시간이 걸릴것으로 예상됩니다
"
"https://news.hada.io/topic?id=3616","WiFiman.com - Ubiquiti의 속도 측정 사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WiFiman.com - Ubiquiti의 속도 측정 사이트

   Ubiquiti에서 제공하는 인터넷 속도 측정 사이트입니다. 서울에 서버가 있고 1G 초과 속도 또한 측정이 가능합니다. 웹 뿐 아니라 아이폰, 안드로이드 앱도 제공됩니다.
   - 웹: http://wifiman.com/
   - 아이폰: https://apps.apple.com/us/app/id1385561119
   - 안드로이드: https://play.google.com/store/apps/details?id=com.ubnt.usurvey

   비슷한 사이트:
   - https://www.speedtest.net (Ookla에서 제공하는 OneProvider 서울 서버, kdatacenter.com 서울 서버 사용 가능)
   - http://speed.cloudflare.com (Cloudflare Edge Server를 사용하는 속도 측정 사이트)
   - http://beta.benchbee.co.kr (벤치비)
   - http://speed.nia.or.kr (한국지능정보사회진흥원)
"
"https://news.hada.io/topic?id=3547","Epic Games가 RAD Game Tools 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Epic Games가 RAD Game Tools 인수

   - Bink Video, Miles Sound System 등의 게임 개발툴을 만드는 회사
   ㅤ→ 거의 모든 플랫폼 지원: 윈도우,맥,Xbox,PS,닌텐도..
   ㅤ→ 1만개 이상의 유명 게임에서 사용중 (스타크래프트,둠,스카이림..)
   - 이 기술들을 Unreal 엔진과 결합할 예정
   - 기존 라이센스들도 계속 판매 할 것
   - Bink Video : 게임용 비디오 코덱. 고화질, 빠르고, 적은 메모리 사용
   - Miles Sound System : 1991년부터 개발 되어온 사운드 미들웨어. 멀티 채널 입출력, 믹싱, 스트리밍, 필터 등등
   - Oodle Data Compression and IO : 게임 데이터(텍스쳐,네트웍 패킷,이미지) 압축
   - Granny 3D : 3D 툴킷
   - Telemetry : 프로파일러
   RAD Game Tools 홈페이지(한국어) http://www.radgametools.com/kr/default.htm

   RAD Game Tools 글자는 스타크래프트 첫화면에서 아마 한번쯤 보셨을 겁니다.
   - 오리지널 https://mobygames.com/images/shots/…
   - 브루드워 https://d2skuhm0vrry40.cloudfront.net/2017/articles/…
   정말 많은 게임에서 쓰여서 전체 리스트 페이지가 따로 있습니다.
   - Bink (10,000개 이상) http://www.radgametools.com/kr/binkgames.htm
   - Miles (5,900개 이상) http://www.radgametools.com/kr/mssgames.htm
"
"https://news.hada.io/topic?id=3598","Deno ineno in 2020

   2020년 한해 동안의 Deno 개발 리뷰
   1월 : V8연동 라이브러리를 libdeno(C++) 에서 rusty_v8로
   2월 : deno fmt에 dprint 적용, deno test 추가
   3월 : V8디버거 지원, deno doc/upgrade 추가
   4월 : 1.0 릴리즈를 위한 API 확정(이전 버전과는 호환 안되지만, 2.0까지 변화 없음)
   5월 : Deno 1.0 릴리즈
   6월 : 1.1 - Incremental 타입 체크와 deno lint 추가
   7월 : 1.2 - 내부 런타임 코드를 TypeScript 에서 JavaScript로 전환
   8월 : 1.3 - 새로운 Registry 릴리즈
   9월 : 1.4 - 웹소켓 API, 콘솔 CSS 스타일링, run --watch 로 파일 변경시 리로드, test --coverage 추가
   10월 : 1.5 - isolatedModules 적용, deno bundle에 tree shaking 추가로 속도 15배, REPL 개선
   11월 : TSC 컴파일러 인프라 재작성
   12월 : 1.6 - deno compile로 단독 실행파일 생성, Deno Language Server 추가, Mac ARM64(M1) 실험적 지원

   deno가 실제로 많이 사용되나요 ? 얘기는 많이 들었는데 사용하는건 못 본거 같아서..

   작년 중반 정도에 시도해봤는데, express 같은 라이브러리는 둘째치고, db 를 연결할 것들이 없어서 web 개발은 어려웠습니다. 아직 이렇다 할 분야(?) 는 없는것 같아요.

   아직 프로덕션에서 사용한 성공사례는 잘 없는 듯 합니다. 1.0 공식 나온지 1년이 안되었으니 좀 더 기다려 봐야 할거 같아요

   여러 부분에서 강동윤님이 만드신 SWC가 언급되네요
   - deno 첫 외주 후기 https://news.hada.io/topic?id=2574
"
"https://news.hada.io/topic?id=3622","TUCOWS Download 사이트 폐쇄 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       TUCOWS Download 사이트 폐쇄 결정

   ""The Ultimate Collection Of Winsock Software""
   - 1993년에 BBS로 시작된 셰어웨어 및 각종 소프트웨어 다운로드 사이트
   - 운영했던 소프트웨어 및 자산들은 Internet Archive에 넘기기로
   - Tucows 는 현재 GoDaddy 다음으로 전세계로 두번째 크기의 도메인 레지스트라
   ㅤ→ Hover, OpenSRS, Ting Internet 등으로 다양한 서비스를 제공중
   ㅤ→ 즉, 2016년 이후로 다운로드 사이트는 유지만 해왔지만, 이제 중단하고 자신들의 다른 업무에 더 집중 하겠다는 것

   투카우즈 굉장히 오랜만에 들어본 이름이네요.
   글을 보고 찾아보니 나스닥에 상장하고 년매출 3천억이 넘는 다양한 인터넷 서비스를 제공하는 회사가 되었군요.
   https://en.wikipedia.org/wiki/Tucows
"
"https://news.hada.io/topic?id=3552","graphqurl - Curl for GraphQL ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      graphqurl - Curl for GraphQL

   - Hasura 팀이 만든 GraphQL용 curl CLI 오픈소스
   - Node.js용 라이브러리 또는 브라우저에서 사용가능
   - 스키마를 이용한 자동완성 지원
   - Subscription 지원
"
"https://news.hada.io/topic?id=3558","GCP Sketchnote - 그림으로 배우는 구글 클라우드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GCP Sketchnote - 그림으로 배우는 구글 클라우드

   - Google Cloud Platform 의 여러 개념들을 이해하기 쉬운 스케치로 설명
   ㅤ→ Compute Engine, Cloud Run, Cloud Functions, GKE, GCS, Cloud SQL
   ㅤ→ Data Analytics Pipeline, Redshift to BigQuery
   ㅤ→ Cloud Composer, Dataflow, Dataproc, Pub/Sub, Armor, CDN, Load Balancing, Build
   ㅤ→ Contact Center AI
   - 구글의 Developer Advocate인 Priyanka Vergadia 의 개인 저장소
"
"https://news.hada.io/topic?id=3608","tmpsms - 커맨드라인에서 임시 SMS 받기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       tmpsms - 커맨드라인에서 임시 SMS 받기

   - 커맨드라인에서 임시 전화 번호 생성후 계정인증용 SMS 받기
   ㅤ→ 내부에서 Upmasked 서비스를 이용
   - curl + jq + fzf 를 이용
   → tmpsms init 임시번호 생성(fzf로 선택가능)
   → tmpsms 최근 3개 메시지 출력
   → watch -n 5 ""tmpsms"" 로 새 메시지가 오는지 확인 가능
   * Upmasked https://upmasked.com/ 는 개인 정보 보호용 서비스를 만드는 독일의 팀
   ( 현재는 무료 SMS 인증기능만 있고 더 만들 예정이라고 )

   각종 서비스에 버그 바운티 등을 위해 임시 가입하는 계정 인증 할 때 쓰라는 서비스네요.
"
"https://news.hada.io/topic?id=3541","짐 켈러, AI 스타트업 Tesnstorrent에 사장 겸 CTO로 취임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                짐 켈러, AI 스타트업 Tesnstorrent에 사장 겸 CTO로 취임

   - 토론토의 AI칩 개발사 Tenstorrent
   ㅤ→ 인간의 두뇌를 모방해서, 중복정보를 무시하고 인식된 개체에 따라 다르게 반응하도록 설계된 AI칩을 개발 하는 회사
   - 짐 켈러는 AMD의 K7과 K8을 개발하고, 애플에 가서 A4~A5칩, 다시 AMD로 돌아가 Zen 아키텍처와 K12를 만든 사람
   ㅤ→ K8의 리드 디자이너. 지금 인텔계열 메인 명령어셋인 x86-64 및 HyperTransport 를 만드는데 기여
   - 2016년에 테슬라로 들어가서 자율주행용 고성능 AI칩을 개발
   - 2018년에 Intel 에 들어갔다가 2020년 6월에 퇴직

   짐 켈러는 CPU 관련해서 여러회사가 돌려 쓰는 외계인 으로 유명하죠.
   ( CPU 성능이 높아질때마다 외계인 잡아다 일시키는거 아니냐 했는데, 실제로 보니 한 사람..)
   x86-64에 대한 얘기는 긱뉴스 팟캐스트 20화에 잠깐 다뤘습니다 https://youtu.be/F5sIQZvlJc8
   AMD K8 은 인텔의 32비트 명령어를 호환하는 64비트 명령어세트인 x86-64가 처음으로 구현된 64비트 CPU 입니다.
   32비트 x86을 만들었던 인텔은, 64비트로 넘어갈때 기존 32비트와 호환되지 않는 IA-64를 만들어서 밀다가 포기하고,
   끝내는 AMD의 이 x86-64를 가져다가 현재의 64비트 CPU들을 만들게 됩니다. 현재 x64 는 바로 이 x86-64죠
"
"https://news.hada.io/topic?id=3550","게임기들의 구조","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                게임기들의 구조

   게임기들은 PC와 유사하면서도, PC와는 다른 구조를 취하는 구조를 가진 독특한 컴퓨터입니다. 왜냐하면 게임기의 목적은 MS 오피스나 Visual Studio를 켜기 위한 게 아니라. PC와 비교적 저렴한 가격으로, 더 높은 그래픽 수준을 뽐내기 위한 것이니까요.
   특히 요즘에야 사용자들의 컴퓨터에 무지막지한 그래픽 카드가 달려있기 때문에 PC보다 콘솔이 더 좋은 그래픽을 보여주는 데 한계가 있지만. 옛날에는 상황이 정반대였습니다. PC에는 그래픽 카드는 커녕 뿌릴 수 있는 게 초록색이나 흑백이었고, 가격도 비쌌었죠. 하지만 NES는 풀컬러에 부드럽게 움직이는 마리오도 있었습니다. 가격도 PC랑 비슷했고요.
   이 페이지는 과거 NES 시절부터 2000년 대 초반 등장한 XBOX 시절까지 게임기들이 어떤 구조를 취해서 그런 멋진 일들이 가능했는지 설명해주는 페이지입니다.

   우아 추억의 게임기들이 많이 보이네요

   콘솔이라고 쓰면 콘솔 어플리케이션이랑 햇갈리실 것 같아 부득이하게 게임기라고 썼습니다 (...)

   그래서 보통 게임 콘솔이라고도 하죠 ㅎㅎ 그러고보니 게임기는 영어+한자어 군요 ㅎㅎ
"
"https://news.hada.io/topic?id=3495","Waymarked Trails - 전세계 트레일 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Waymarked Trails - 전세계 트레일 지도

   - 전세계의 하이킹, 사이클링, MTB, 승마, 스케이트, 스키/보드 슬로프 정보
   - OpenStreetMap 위에 각 경로의 세부정보를 표시 (우하단 Route 버튼)
   ㅤ→ 전체 경로의 높이 정보 보기
   ㅤ→ GPX/KML 파일로 경로 정보 다운로드 가능
   ㅤ→ 경로 정보를 가져온 공식 웹사이트 링크

   - 긴 하이킹 코스만 보기 편하게 정리해 놓은 Thruhikes https://thruhikes.net/
   - 긴 하이킹 코스를 정리해놓은 위키피디아 https://en.wikipedia.org/wiki/List_of_long-distance_footpaths
   - 사용자들이 올린 2천만개의 트레일이 등록되어 있는 Wikiloc https://www.wikiloc.com/
"
"https://news.hada.io/topic?id=3582","DuckDuckGo, 일 검색 쿼리 1억건 돌파 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DuckDuckGo, 일 검색 쿼리 1억건 돌파

   - 사용자의 개인정보를 수집하지 않는 검색 엔진
   - 2020년 1월 일평균 5천만건 였던게 1년사이 2배로 증가
   - 2011년 1년 전체 검색량이 1억건 이었음

   개인정보를 수집하지 않는 검색 엔진 DuckDuckGo 사용 팁 모음 https://news.hada.io/topic?id=2684
   기본검색으로 DDG를 쓰고, 원하는 결과가 안나오면 !g 붙여서 구글 검색을 하는 방식이 가장 편한듯 합니다.
"
"https://news.hada.io/topic?id=3586","State of JavaScript 2020 [한국어]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     State of JavaScript 2020 [한국어]

   - 137개국, 23765명 설문조사, 영어가 82%
   - 연봉$ : 50~100K 29.9% > 100~200K 20.7%
   - 경력 : 5~10y 30% > 2~5y 27.9% > 10~20y 24.2%
   - 남성 91% 여성 5.8%
   - 풀스택 엔지니어 44.1% > 프론트엔드 33.6% > 웹개발자 12.1% > CTO 5.6% > 백엔드 3.7%
   - 숙련도 : JS전문가 52.6% , CSS전문가 43.1%
   - JS : Typescript 93% > PureScript 72% > Reason 71% > Elm 63% > ClojureScript 59%
   - 프론트엔드 프레임워크 : Svelte 89% > React 88% > Vue.js 85% > Alpine.js 82% > Preact 78% > LitElement 78% > Stimulus 67% > Angular 42% > Ember 27%
   - 데이터 레이어 : GraphQL 94% > Apollo 88% > Vuex 88% > XState 87% > Redux 67% > MobX 64% > Relay 56%
   - 백엔드 프레임워크 : Next.js 92% > Express 92% > Fastify 89% > Nuxt 88% > Nest 87% > Strapi 79% > Koa 76% > Gatsby 70% > Hapi 60% > Meteor 28%
   - 테스팅 : Testing Library 97% > Jest 96% > Cypress 94% > Playwright 93% > Storybook 91% > Puppeteer 88% > Mocha 74% > Jasmine 62%
   - 빌드도구 : esbuild 94% > Snowpack 94% > TypeScript 92% > Webpack 88% > Parcel 85% > Rollup 85% > SWC 80% > Rome 60% > Gulp 35%
   - 모바일&데스크탑 : Electron 89% > Capacitor 84% > React Native 82% > Native Apps 80% > Expo 76% > Quasor 70% > Ionic 52%
   - 기타 라이브러리 : Axios, Lodash, Moment, date-fns, RxJS, jQuery, Underscore, Day.js > Immer , Ramda, Luxon..
   - 에디터 : VS Code 18061명 > Vim 4196 > WebStorm 3888 > Sublime Text 2591 > Notepad++ 1715
   - 브라우저 : Chrome 18733 > Firefox 10619 > Safari 4782 > Edge 3508
   - JS 이외의 사용언어 : Python 6664 > PHP 5760 > Java 4209 > C# 3535 > Go 2501
   - 가장 많이 보는 사이트 : CSS-Tricks > Medium > Dev.to > Smasing Magazines > JavaScript Weekly > Kent C. Dodds
   - 즐겨듣는 팟캐스트 : Syntax 2916명 > Full Stack Radio 1165 > The Changelog 1074 > JS Party 921

   State of Javascript 2019 : https://news.hada.io/topic?id=1106
"
"https://news.hada.io/topic?id=3548","Thonny - 초보자를 위한 Python IDE ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Thonny - 초보자를 위한 Python IDE

   - 윈/맥/리눅스
   - 파이썬 3.7을 내장해서 IDE설치만으로 사용 가능
   - 사용하기 편한 디버거
   ㅤ→ 브레이크 포인트 없이 문장별 실행
   ㅤ→ 변수 값 보기
   ㅤ→ 함수 호출시 새 윈도우에서 로컬변수 및 콜스택 보기
   ㅤ→ 문법 에러표시
   ㅤ→ 변수 스코프 시각적으로 표시
   - CPython, MicroPython 지원
   - 2017년 부터 Raspberry Pi OS에 기본 내장
"
"https://news.hada.io/topic?id=3571","Linksys WRT54G의 역사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Linksys WRT54G의 역사

   실수로 오픈소스가 되고 유명해져버린 공유기 이야기
   - Linksys 는 대만 출신 미국 이민자 둘이 설립한 회사
   - 1990년대엔 가정용 네트워크/공유기 시장은 거의 존재하지 않았음
   - 90년대초엔 링크시스 장비들은 자체 네트워크 드라이버를 제공해야 해서 불편했지만,
   ㅤ→ 윈도우95가 네트워크 드라이버를 내장하면서 쉬워지고, 수요가 증가
   - 90년대말 가정용 브로드밴드 인터넷이 들어오면서 라우터 시장이 생겨남
   - 설치가 쉽고 사용하기 편한 파랑/검정색으로 디자인된 $199짜리 라우터를 만들어 큰 성공
   ㅤ→ 100메가 비트, 4개의 포트로 가정용에 합리적인 가격
   - 2003년 Cisco 가 5억달러에 Linksys를 인수
   - 인수하기 몇달 전 발표한 WRT54G 라우터 모델이 특히나 인기를 끌게 됨. ""전혀 예상하지 못했던 이유로""
   ㅤ→ 이 라우터는 Linux 기반이었고, 사용된 무선 펌웨어 코드 때문에 GPL 로 소스코드를 공개해야 했음
   ㅤ→ 하지만 개발한 Linksys도 인수한 Cisco도 이에 대해 잘 몰랐음.
   ㅤ→ Broadcom 칩셋을 썻고, 칩셋 펌웨어는 해외 개발자에게 아웃소싱했기 때문
   ㅤ→ 이에 대해 슬래시닷에서 논란이 있고 나서, Cisco가 오픈소스 버전 펌웨어를 발표
   - 해커들이 뛰어 들어서 기능을 추가하기 시작
   ㅤ→ FTC가 제한하는 세기보다 더 세게 무선 시그날을 쏘게 하거나
   ㅤ→ VPN을 추가하거나, 로봇의 두뇌로 활용하기도
   - 이 기반으로 OpenWrt 와 Tomato 같은 오픈소스 펌웨어들이 만들어짐
   - 시스코는 이 성공을 그다지 좋아하지 않았고, 리눅스를 제거한 버전을 출시했지만 환영받지 못함
   ㅤ→ 끝내 다시 리눅스 버전의 WRT54GL 을 출시했고 이것은 아직도 팔리고 있음
   ㅤ→ Linksys WRT54GL $39.99 https://amazon.com/Linksys-WRT54GL-Wireless-G-Broadband-Router/dp/…
   ""WRT54G 는 무선공유기의 NES(Nintendo Entertainment System)""
"
"https://news.hada.io/topic?id=3618","Raspberry Pi Pico - $4 마이크로 컨트롤러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Raspberry Pi Pico - $4 마이크로 컨트롤러

   - 라즈베리 파이의 첫번째 ARM 실리콘 RP2040 사용
   ㅤ→ 듀얼코어 Arm Cortex-M0+, 133Mhz
   ㅤ→ 264KB S램
   - RP2040 + 2M 플래시
   - Micro-USB B : 전원&데이터
   - 26핀 GPIO, 3핀 ARM Serial Wire Debug(SWD) 포트
   - 2×UART, 2×SPI, 2×I2C, 16×PWM
   - MicroPython & C++ SDK
   - 21mm x 51mm 사이즈
"
"https://news.hada.io/topic?id=3576","Lutris - 리눅스용 게임 런처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Lutris - 리눅스용 게임 런처

   - GOG, Steam, Battle.net, Origin, Uplay 의 각종 게임을 리눅스에서 실행하게 해주는 오픈소스 게임 플랫폼
   - Wine, RetroArch, Dosbox, ScummVM 등 20종 이상의 Runner를 이용해서 윈도우 및 콘솔 게임을 최적화 해서 실행
   ㅤ→ 윈도우, Sony PS2/PS3, Atari, Commodore, Web, MSDOS, Nintendo(3DS, Wii, Gameboy, NES, Switch)

   설치위치 변경이라던지, 다운/멈춤현상이라던지

   개선이 필요해요,,,,설치실패하는 경우도 많은거 같고요

   리눅스에서 게임하려면 Wine 부터 설치할게 많았는데 가장 편한 방식인듯 합니다.
"
"https://news.hada.io/topic?id=3502","PSX Party - PS1 온라인 멀티플레이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       PSX Party - PS1 온라인 멀티플레이

   - Playstation 1 게임을 브라우저에서 실행
   - WebRTC를 이용해서 방을 생성하고 URL을 공유해서 다른 사람을 초대해 같이 플레이
   - 영상/음성통화 및 채팅도 지원
   - 게임 롬파일은 Internet Archive 에서 자동 다운로드됨
   ㅤ→ 자신이 덤프한 파일로도 가능
   ㅤ→ 철권3, 메탈슬러그, 마블vs캡콤, 스트리트파이터 외 수백종
   - 같이 음악 듣기/비디오 보기도 지원

   비슷하게 NES도 가능 https://nes.party/
   ㅤ→ 이건 자신이 .nes 롬파일이 있어야만 가능합니다.
   이 서비스는 Kosmi 가 자신의 온라인 행아웃 기능을 활용한 것입니다.
   - Kosmi - Digital Hangout https://news.hada.io/topic?id=1718
"
"https://news.hada.io/topic?id=3546","WebAssembly 런타임 Wasmer 1.0 이 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WebAssembly 런타임 Wasmer 1.0 이 릴리즈

   WebAssembly 런타임 Wasmer 1.0 이 릴리즈 되었습니다. Docker 의 자리는 노리는 Wasmer 1.0 은
   - 훨씬 빠른 퍼포먼스
   - Headless Wasmer, IoT 플랫폼등에서 동작 가능
   - 네이티브 오프젝트 컴파일을 제공해서 다른 언어에서 임베딩해서 사용 가능 (so, dll, dylib)
   - 다른 플랫폼에서 크로스-컴파일 가능
   - 확장성 가능한 인프라와 사용하기 쉬운 API
   - Wasm-C-API support
   - Error handling and debugging

   “도커의 자리를 노리는”이라는 말을 들으니 뭔가 어마어마한 느낌이네요!

   Error handling and debugging이라고 되어 있지만 본문 어디에도 디버깅 얘기는 없군요.
"
"https://news.hada.io/topic?id=3623","안드로이드를 RISC-V 용으로 포팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          안드로이드를 RISC-V 용으로 포팅

   - 알리바바의 자회사인 T-Head Semiconductor가 Android 10을 자신들의 RISC-V 칩용으로 포팅 시연
   - 3개의 64비트 RISC-V 코어(1.2Ghz XuanTie C910) + 1 GPU 로 구성된 개발 보드에서 AOSP를 구동하고 코드를 깃헙에 공개
   - https://github.com/T-head-Semi/aosp-riscv
"
"https://news.hada.io/topic?id=3560","엔지니어링 매니저를 위한 추천 도서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          엔지니어링 매니저를 위한 추천 도서

   개발만 하다가 관리자가 된 엔지니어들을 위한 책 7권 [원서 및 한글판]
   - Manager's Path
   ㅤ→ 개발 7년차, 매니저 1일차
   - Thanks for the Feedback
   ㅤ→ 하버드 피드백의 기술 : 밀어붙이는 피드백에서 끌어당기는 피드백으로
   - The Hard Thing About Hard Things
   ㅤ→ 하드씽 : 경영의 난제, 어떻게 풀 것인가?
   - Accelerate : The Science of Lean Software and DevOps
   ㅤ→ 디지털 트랜스포메이션 엔진 [ 고성과 기술 조직 구축 및 진화 ]
   - Dare to Lead: Brave Work. Tough Conversations. Whole Hearts.
   ㅤ→ 리더의 용기: 대담하게 일하고, 냉정하게 대화하고, 매 순간 진심을 다하여
   - Switch: How to Change Things When Change is Hard
   ㅤ→ 스위치 : 손쉽게 극적인 변화를 이끌어내는 행동설계의 힘
   - Atomic Habits: An Easy & Proven Way to Build Good Habits
   ㅤ→ 아주 작은 습관의 힘

   감사합니다^^

   이 중에 스위치라는 책은 리디 셀렉트에 있어서 바로 읽기 시작했는데 첫 장을 브라이언 완싱크의 “작은 그릇을 쓰면 적게 먹는다”로 시작하는 바람에 접었습니다. 완싱크는 통계 조작으로 논문 다수가 취소되었는데, 주장 자체가 너무 섹시해서 엄청 많이 인용이 되었죠... (합리적이지 않은 결정일 수 있으나) 책에 나오는 사례를 다 검증해가며 봐야하는 생각이 들어서 집중이 안되길래 일단 접었습니다.

   근데 사실.. (30kg 다이어트 해본 사람의 입장에서 ) 다이어트의 기본은 가능하면 적게 먹는 것이고, 그러려면 그릇을 작은거로 바꾸는게 맞기는 한거 같아요. ㅋㅋ
   완싱크는 이걸 마치 통계적으로 검증한것 처럼 얘기한게 문제가 된것이지만 ㅎㅎ

   제가 팀장이 된지 며칠되지 않았는데 1년 전 프로젝트 관리하면서 답답한 마음에 ""개발 7년차, 매니저 1일차"" 책을 샀는데 지금 빛을 발하고 있습니다. 외국인의 경험이라 우리에게 안맞을 거 같지만 생각보다 많은 부분은 참고하고 있습니다. 멘토, 테크리드 부터 CTO까지 개발 관련 매니저로서 겪을 수 있는 케이스에 대해서 잘 정리되어 있습니다.

   좋은 글 감사합니다~

   우아 감사합니닷

   ㅤ→ 개발 7년차, 매니저 1일차 - http://www.yes24.com/Product/Goods/87336637
   ㅤ→ 하버드 피드백의 기술 : 밀어붙이는 피드백에서 끌어당기는 피드백으로 - http://www.yes24.com/Product/Goods/14759898
   ㅤ→ 하드씽 : 경영의 난제, 어떻게 풀 것인가? - http://www.yes24.com/Product/Goods/15345272
   ㅤ→ 디지털 트랜스포메이션 엔진 [ 고성과 기술 조직 구축 및 진화 ] - http://www.yes24.com/Product/Goods/90051525
   ㅤ→ 리더의 용기: 대담하게 일하고, 냉정하게 대화하고, 매 순간 진심을 다하여 - http://www.yes24.com/Product/Goods/84781264
   ㅤ→ 스위치 : 손쉽게 극적인 변화를 이끌어내는 행동설계의 힘 - http://www.yes24.com/Product/Goods/3776409
   ㅤ→ 아주 작은 습관의 힘 - http://www.yes24.com/Product/Goods/69655504

   하드씽이 경영의 난제가 있고 스타트업의 난제도 있는지 표지도 다르고 두개네요

   제가 리디북스랑 알라딘 위주로 사용해서 개인적으로 정리하다가 여기도 댓글을 달아봅니다.
   ㅤ→ 개발 7년차, 매니저 1일차 - https://ridibooks.com/books/443000823
   ㅤ→ 하버드 피드백의 기술 - https://ridibooks.com/books/222001263
   ㅤ→ 리더의 용기 - https://ridibooks.com/books/606002043
   ㅤ→ 스위치 - https://ridibooks.com/books/606000997
   ㅤ→ 아주 작은 습관의 힘 - https://ridibooks.com/books/1780000157
   → 하드씽(절판) - https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=49591677
   → 디지털 트랜스포메이션 엔진 - https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=238215326

   저는 리디북스와 밀리의 서재 위주로 사용해서 ^^;;
   하버드 피드백의 기술 - https://www.millie.co.kr/v3/bookDetail/6864873
   리더의 용기 - https://www.millie.co.kr/v3/bookDetail/179462632

   정리 감사합니다.
"
"https://news.hada.io/topic?id=3617","Forbes, 유료 뉴스레터 플랫폼 출시 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Forbes, 유료 뉴스레터 플랫폼 출시 예정

   - 언론인들이 자신의 뉴스레터를 만들고 Forbes와 수익을 공유하는 모델
   - Forbes는 팔로워 많은 작가 20~30명을 고용해서 플랫폼이 동작하게 하고,
   ㅤ현재 2800명인 기고자 네트워크에서 작가를 모집
   - 작성자가 Forbes 뉴스룸의 일부가 되어서 마케팅/편집/급여의 혜택을 받지만,
   ㅤ충분한 편집 독립성을 주고, 독자들이 Forbes를 팔로우 할수 있도록 함
   ㅤ→ 구독 수익은 Forbes와 5:5
   ㅤ→ 광고 수익 셰어 : 페이지 조회수 기준 고정 금액 및 재 방문수에 기준 보너스 지급
   ㅤ→ 풀타임 Forbes 급여에 준하는 미니멈 개런티 및 혜택과 법률지원, 편집 지침, 팩트 체킹 지원이 함께 제공
   - 느슨하게 운영되는 Substack 과는 다름
   ㅤ→ Forbes 가 뉴스레터 및 작가에 대한 편집 감독을 함
   ㅤ→ 각종 산업을 다루는 작가들에게 매력적일 것
   ㅤ→ 논란의 여지가 있는 정치적 견해를 가진 작가들에게는 덜 매력적
   - Forbes는 이미 몇명 채용을 시작했으며 이달안에 5~6개의 뉴스레터 발표 예정
   ㅤ→ Houston Chronicle의 테크 편집자 Dwight Silverman : 소비자 기술 관련
   ㅤ→ Forbes 기고자 이자 엔터테인먼트 비평가인 Scott Mendelson : 박스 오피스 관련
   ㅤ→ Forbes 여행 작가인 Suzanne Rowan Kelleher : 럭셔리 여행 관련
   - 기존 Forbes 직원도 뉴스레터 지원 가능하지만, 전문가이면서 팔로워가 많은 사람들을 찾고 있음.
   ㅤ→ 1분기 말에, Forbes 의 주요 프랜차이즈 들을 유료 뉴스레터로 추가할 예정
   ㅤㅤㅤ• 벤처 캐피탈 커뮤니티를 다루는 ""Midas List""
   ㅤㅤㅤ• 스포츠 비즈니스를 다루는 ""SportsMoney""
   ㅤ→ 기고자 네트웍의 유명 작가들 유료 뉴스레터는 2분기 쯤 시작예정
   ㅤ→ 뉴스레터는 Forbes의 자체 CMS인 Bertie를 통해서 제작/관리
   플랫폼의 내부 이름은 ""Journalist Entrepreneurs (언론인 기업가들)""
   - Forbes는 10년 넘게 기고자 네트워크(Contributor Network)를 운영중

   정말 멋진 시도네요.

   Forbes 의 기고자 네트워크는 ""디지털 시대의 저널리즘 원칙 : 정확성, 독립성, 불편부당성"" 48페이지에 간단히 소개가 나와있습니다.
   - http://download.kpf.or.kr/MediaPds/PMVATTSPHPOFFEI.pdf
"
"https://news.hada.io/topic?id=3555","Rewatch - 팀/회사를 위한 비디오 공유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Rewatch - 팀/회사를 위한 비디오 공유

   - 회사내에서 진행되는 모든 회의/교육/발표 비디오를 저장 및 공유
   ㅤ→ 교육 세션, 주간 회의, 제품 개발 회의, 타운 홀..
   - 모든 음성 내용은 자동으로 Transcribe(받아쓰기) 되고 검색 가능
   ㅤ→ 인식된 텍스트에 대해서 코멘트 달고, 팀원 멘션 가능
   - 누가 무엇을 봤는지 공유
   - Zoom/Meet 회의 영상을 자동으로 동기화 & 임포트
   - Dropbox/Google Drive 에 저장된 비디오 동기화
   - Slack 으로 알림
   - Okta 로 접근관리
   - 현재 얼리 억세스중
"
"https://news.hada.io/topic?id=3611","Brave 브라우저, IPFS 지원 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Brave 브라우저, IPFS 지원 시작

   - InterPlanetary File System : 분산 P2P 하이퍼미디어 프로토콜
   ㅤ→ CID기반으로 콘텐츠를 가져옴(이 콘텐츠의 위치는 정해져 있지 않음)
   - ipfs:// 로 시작하는 URI를 지정하면 기본으로 퍼블릭 HTTP 게이트웨이를 이용
   ㅤ→ go-ipfs 로컬 데몬 사용 가능(브라우저가 물어보고 자동 다운로드)
   차후 로드맵
   - 모바일버전 지원예정(안드로이드 부터)
   - DNSLink : DNS TXT레코드로 도메인을 IPFS주소로 매핑 하는 것
   - 컨텐츠 Pinning 하는 콘텍스트 메뉴 지원
   - Tor 트랜스포트 지원
   * IPFS - https://ipfs.io/
"
"https://news.hada.io/topic?id=3512","USDS 디지털 서비스 플레이북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           USDS 디지털 서비스 플레이북

   - 미국 대통령실 직속인 USDS(미국 디지털 서비스)가 정부의 디지털 서비스들이 성공하기 위한 13가지 핵심요소를 정리한 플레이북
   - 각 항목당 체크리스트 와 주요 질문들로 구성
   (꼭 정부뿐만 아니라 모든 디지털 서비스에 대응한다고 봐도 될듯 합니다)
   1. 사람들이 필요한게 무엇인지 이해할 것
   2. 처음부터 끝까지 전체 경험 해결을 목표로
   3. 간단하고 직관적으로
   4. 민첩하고 반복적인 방식을 사용하여 서비스 구축
   5. (외주 개발작업을 계약할 때) 납품이 성공적으로 가능하도록 예산과 계약을 구조화
   6. 한명의 리더를 지정하고, 그 사람에게 권한을 주고 책임지게 하기
   7. 경험이 풍부한 팀을 영입
   8. 최신 기술 스택을 선택
   9. 유연한 호스팅 환경에 배포
   10. 테스트 및 배포 자동화
   11. 재사용 가능한 프로세스를 통해 보안 및 개인 정보 관리
   12. 데이터를 사용하여 의사 결정
   13. 기본적으로 Open 할 것 : 공개 협업 및 구축, 데이터 공개, 대중의 쉬운 기여, 누구나 재사용

   USDS는 오바마가 오바마케어 초기시절 만들었던 https://www.healthcare.gov 의 실패 때문에 (트래픽을 감당 못하고 엄청 느림)
   2014년에 만든 조직으로 트럼프 정부에서도 살아남았고, 현재 직원은 175명 정도입니다.
   그들중 대부분은 기술 회사들에서 임시 휴직을 하고 들어온 기술 인력들입니다.
   정부가 멍청한 디지털 서비스를 만들어서 예산을 아끼는 걸 방지하고 효율적으로 일하는걸 돕는 역할을 합니다.
   지금은 구글에서 SafeSearch,Google Family Filter 개발에 참여했던 소프트웨어 엔지니어인 Matt Cutts가 수장으로 있습니다.
   ( Matt는 구글 검색결과에서 포르노 관련 결과물이 노출되는 걸 제보하는 사람에게 와이프가 만든 수제 쿠키를 선물하는 것으로 유명해서
   ""Porn Cookie Guy"" 라는 별명을 가지고 있습니다. )
   USDS 관련한 Wired의 기사 ""Obama's US Digital Service Survives Trump—Quietly""
   https://wired.com/story/…
"
"https://news.hada.io/topic?id=3593","Metrics - 깃헙 지표 이미지 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Metrics - 깃헙 지표 이미지 생성기

   - 깃헙 계정 정보를 읽어서 각종 통계 이미지를 생성하여 깃헙 프로필등 다양한 곳에 임베드 가능
   - GitHub Action으로 사용하거나 공유인스턴스 및 직접 설치도 가능
   각종 플러그인들
   → 깃헙 계정 통계
   → 구글 PageSpeed
   → 커밋 캘린더(Isometric)
   → 좋아하는 음악/최근 음악
   → 가장 많이 사용하는 언어
   → Follow-up : 이슈(Closed/Open) , PR(Merged/Open)
   → Lines of Code / Repository Traffic
   → Tweet
   → 최근 Post
   → Coding Habit : 언제 주로 커밋하는지 시간/주별 그래프
   → GitHub Activity
"
"https://news.hada.io/topic?id=3527","2020년 마케팅 분야 멍청한 일 Top 10","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2020년 마케팅 분야 멍청한 일 Top 10

   1. 기네스 팰트로의 이상한 향수
   2. 이해해 주기를 원하는 마크 주커버그
   3. 구글의 엔지니어들도 파악하지 못하는 구글의 개인정보 제어 기능
   4. 온라인 광고에 1100억원을 사기당한 우버(광고 예산의 2/3)
   5. 사실을 말해버린 Mark Read (광고업계가 저임금으로 젊은 사람들만을 고용하고 있어서 광고 품질이 떨어진다는)
   6. 페이스북이 몇개의 계정을 삭제 (2019년 1~3분기 동안 ""54억개""의 가짜 계정을 삭제 했다고)
   7. Show Me The Money(광고비용은 어디로 가는가?, 온라인 미디어 비용의 50%가 애드테크 생태계에 흡수됨)
   8. Unfluencer(언플루언서, 실패의 선구자들, 수박맛 오레오를 좋아하는, MBA아님)
   9. 이상한 이름의 선두주자 Mondelēz 의 Humaning
   10. 버거킹의 Moldy Whopper 광고(45일간 썩어가는 와퍼의 모습을 촬영해서 내보냄)

   4번 관련한 링크
   Uber의 전 퍼포먼스 마케팅 리드가 얘기한 관련 내용들을 정리한 트위터 쓰레드
   - https://twitter.com/nandoodles/status/1345774768746852353
   Forbes의 기사 ""When Big Brands Stopped Spending On Digital Ads, Nothing Happened. Why?""
   - https://forbes.com/sites/augustinefou/…
"
"https://news.hada.io/topic?id=3612","인텔의 현재 문제들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               인텔의 현재 문제들

   [문제1: 모바일]
   - 속도에만 주력하고 전원관리를 무시
   - 수년간의 노력에도 안드로이드에서 사용 못함
   - 지난 10년간 업계 수익의 대부분은 수십억대를 생산한 스마트폰 에서 나왔음
   ㅤ→ PC판매는 몇년간 성장하지도 않았음
   - 그나마 인텔이 수익을 내었던 것은 모바일의 카운터파트인 클라우드 시장도 폭발했기 때문
   [문제2: 서버의 성공]
   - 인텔은 얼마전까지도 Sun 같은 회사가 지배해왔던 서버시장의 파괴자(Disruptor)였음
   - PC의 폭발적 성장으로 낮은 가격에도 성능을 높일 수 있었음
   - 다만, 통합 서버의 안정성에는 미치지 못했음
   - 21세기 초 구글은 규모와 복잡성 때문에 진정하게 안정적인 스택은 불가능하다는 것을 깨닳았음
   ㅤ→ 해결책은 실패를 가정하여 구축하는 것이었고, 이에 따라 상대적으로 저렴한 x86 기반 데이터 센터를 구축했음
   - 이후 20년동안 모든 데이터 센터는 구글의 접근방식을 채택
   - 서버에서 독점적 디자인과 우수한 제조능력때문에 인텔은 가장 큰 수혜자였음
   - AMD는 데스크탑/노트북에서는 경쟁이 되었지만 데이터 센터에선 그렇지 못함
   - 이 성공 때문에 인텔은 재정적인 위험을 겪지 않으면서 변화를 해야할 시기에 변화하지 못함
   [문제3: 제조]
   - 방대한 모바일 공급량에 힘입어 TSMC가 인텔의 제조 능력을 추월
   ㅤ→ 이는 여러면에서 인텔을 위협
   - 애플의 M1칩 성능때문에 애플의 맥 비즈니스를 잃었음
   ㅤ→ 애플의 설계 능력도 있지만, TSMC의 5nm 공정에서 제조 된다는게 중요
   - AMD칩이 데스크탑에서 인텔보다 빠르고 데이터센터에서도 경쟁력이 있음
   ㅤ→ AMD의 설계도 중요하지만, TSMC의 7nm 공정에서 제조 된다는게 중요
   - 대규모 클라우드 업체들이 자체 칩 설계에 점점 많은 투자를 단행
   ㅤ→ 아마존 Graviton ARM 프로세서는 2세대에 들어갔음 (트위터가 타임라인을 이 기반으로 옮기겠다고 했음)
   ㅤ→ 아마존의 설계도 중요하지만, 또! 역시 TSMC의 7nm 공정 (인텔의 최신식 10nm 공정과 경쟁)
   - 즉, 인텔은 PC와 데이터센터용 x86 서버에서 AMD의 위협을 받고 있으며, 아마존과 같은 클라우드 회사한테도 위협당하는 상황
   - 심지어 엔비디아가 설계하고 삼성이 만드는 GPU들이 클라우드에서의 머신러닝에 사용 된다는 것은 위에서 언급하지도 않았음.
   - 인텔을 위험하게 만드는 것은 문제 1에서 얘기한 생산량의 문제
   ㅤ→ 인텔은 이미 모바일을 놓쳤고, 서버칩이 그나마 성장해서 지난 10년간 제조에 투자가능하게 해줬지만,
   ㅤㅤ이젠 어느 때보다도 더 투자를 해야하고, 그러기 위해선 생산량이 줄어들어선 안됨
   [문제4: TSMC]
   - 안타깝게도 더 나쁜건.. 인텔이 새로운 CEO를 지명한 다음날, TSMC는 수익과 함께 2021년의 Capex 지침을 발표
   ""TSMC는 올해 280억달러(30조원)을 투자하여 기술 개발 및 Arizona에 미국 고객용 공장을 건설할 것""
   - 이건 TSMC가 더 앞서나갈 수 있게 할 엄청난 금액
   - 세계에서 가장 칩을 잘 만드는 인텔이, 지난 몇번의 기술오류 이후에 TSMC에 외주를 줄 것으로 분석가들은 예상
   - 인텔은 현재 칩 제조에 대한 리더십을 포기 했을 것. TSMC에 아웃소싱 하면 AMD의 위협을 차단은 하겠지만
   ㅤ이건 TSMC의 우위를 증가시킬 뿐, 인텔의 다른 취약점을 해결하지 못함
   [문제5: 지정학(Geopolitics)]
   - 인텔의 취약점만 고려할 건 아님
   - 대만의 국제적 지위는 매우 복잡하고, 미중관계는 이걸 더 복잡하게 만듬
   - 대만은 중국해안에서 약간 떨어져있고, 최고급 칩을 생산하는 삼성이 있는 한국역시 그 근처
   - 하지만 미국은 태평양 반대편에 있고, 오레곤/뉴멕시코/애리조나에 인텔이 운영하는 고급 파운드리가 있지만 인텔 자체의 통합칩용
   - 이게 문제가 되는건, 인텔이 중점을 두는 PC/서버 외에도 칩은 중요하기 때문
   - 요즘 거의 모든 군사장비나 일반 장비에는 프로세스가 들어있고, 특별히 높은 성능이 필요하지 않은 것들은 미국을 포함한 세계 전역에서 제작 가능
   - 하지만 가장 진보된 공정이 필요한건 대만의 TSMC가 만들어야 함
   - 미국 군대의 계획가들한테는 이건 큰 문제. 그들의 임무는 미국과 중국간에 전쟁이 있을지 알아내는게 아니라, 결코 일어나지 않아야할 사태에 대해 대비하는 것
   - 근데 TSMC 와 삼성의 파운드리가 중국의 미사일 사정권 내에 있다는게 문제
   - TSMC는 애리조나에 5nm fab을 열겠다고 하지만, 이건 현재에나 최신이고, fab이 개장하는 2024년엔 최신은 아닐 것
   - 미국은 미국땅에 최첨단 범용 fab 이 필요함. 그냥 x86이 필요한 인텔과는 다름.
   - 어쨋거나 인텔의 제조에 대해서는 회의적임
   [해결책1: 회사분할(Breakup)]
   - 인텔의 성장에 설계/제조 통합이 중요했지만, 이제 이 통합이 설계/제조 양쪽 비즈니스에 제약이 됨
   - 설계는 제조에 발목잡히고, 제조에는 인센티브 문제가 있음
   - 칩 비즈니스의 핵심은 설계 마진이 훨씬 높다는 것
   - 예를들어, Nvidia의 매출 총 이익율은 60~65%고, Nvidia 칩을 만드는 TSMC는 50%근처
   - 인텔은 통합때문에 Nvidia와 비슷한 수익을 내어왔음
   - 하지만, 이것때문에 제조쪽이 개선되기가 어려워짐
   ㅤ→ 어차피 고정고객이므로 개선 및 최적화 의지가 덜함
   - 이 것을 해결하려면 인텔의 제조사업을 분리 해야함
   - 제3자의 칩를 제조하는 고객 서비스를 구축하는데 시간이 걸리겠지만,
   ㅤ이렇게 제조를 독립시켜야, 가장 강력한 인센티브인 ""생존""의 필요성을 가지게 됨
   [해결책2: 보조금(Subsidies)]
   - 미국이 이 부문에 돈을 펌핑할 수 있도록 해주는 것
   - 미국이 직접 인텔에 보조금을 주는것은 의미가 없음
   - 그들이 만드는 것은 미국에 도움이 안되고, 인텔은 돈으로는 해결되지 않는 문화/경영 문제를 가지고 있음
   - 연방 보조금 프로그램을 통해서 구매 보증을 해야함
   ㅤ→ 특정 가격으로 미국에서 생산된 5/3/2nm 프로세서를 몇개 구매하는 식
   - Global Foundries 같은 회사가 다시 참여하거나, TSMC가 미국에 직접 Fab을 더 열거나, 아니면 스타트업들이 뛰어들거나
   - 이 두개의 해결책은 문제를 너무 단순하게 만들기는 함
   - 칩 제조에는 많은 것들이 필요하기 때문
   - 하지만 중요한건 미국이 경쟁력을 회복하는데 수년이 걸릴 것이라는 것
   - 연방정부도 자신의 역할을 해야함
   - ""인텔은 자신의 통합 모델이 끝났다는 현실을 받아들여야함""

   중간에 오타가 있는 것 같습니다.
   “20세기초” → “21세기 초”

   앗 감사합니다! ^^

   미국인의 관점에서 씌여진 글이라서 해결책2는 우리랑 상관없어 보이긴 합니다만, 전체적으로 인텔의 현재 상황을 잘 이해할수 있는 글이네요.
   그리고, 정말로 인텔이 Core i3 를 TSMC에서 생산할거 라는 얘기가 나왔습니다. (정확한 소스는 아니고 조사에 따르면..)
   - Intel outsources Core i3 to TSMC's 5nm process https://www.eenewseurope.com/news/intel-TSMC-5nm
   전 삼성이 얼른 TSMC의 3나노 공정을 따라잡으면 좋겠습니다. 인텔을 포함한 다른 회사 제품들도 마구 생산하구요 ㅎ
   실제로 3나노 개발은 삼성이 빨랐지만, TSMC가 양산은 앞서고 있죠.
"
"https://news.hada.io/topic?id=3524","서비스 기획 뽀개기 [138p 슬라이드]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         서비스 기획 뽀개기 [138p 슬라이드]

   - IT서비스 기획자 : IT서비스 기획자란?, 서비스 기획이란?
   - 상위기획 : 비즈니스 모델 캔버스, 플라이휠, 페르소나, 고객 여정 지도, MVP
   - 정책 : 왜 역사와 문화, 생태계를 고려해야 하는가?, 관련 법령을 모르면..
   - 스토리보드 (Wireframe) : 변동성과 확장성에 대한 고려, 독자를 위한 배려
   - UI Component : 버튼, 링크, 인풋 박스, 입력값 유효성 체크
   - UX in Motion
   - ETC : 쿠키 vs. 세션 vs. 캐시
   - Information Architecture
   - 회원가입 / 로그인 : 회원의 종류, 회원가입 절차, 회원인증 시 고려사항, 회원인증 방법, 약관 및 인증의 종류, CI와 DI,로그인 및 비밀번호 찾기 종류
   - 배너
   - 상품 : 상품 등록 정보, 상품정보제공 고시
   - 결제 : 결제 관련 용어, 결제 상태 설명, 일반 상품 구매 및 결제 플로우, 일반 상품 배송 플로우, 온라인 강의 구매 및 결제 플로우
   - 멤버십(포인트)
   - 쿠폰
   - 취소/환불 : 일반 상품 취소/환불 정책, 온라인 강의 취소/환불 정책
   - 관리자 : 어드민 기획시 고려사항
   - QA : 웹 접근성, 다크패턴(Dark Pattens)과 윤리적 디자인
   - SEO/SMO/ASO : SEO(Search Engine Optimization), SMO(Social Media Optimization), ASO(Appstore Optimization)
   - 글로벌 서비스 : 중국의 서비스 기획, 글로벌 서비스 기획 시 고려사항

   흠..
   저 정도 스펙이면 ^^
   대단 하군요...

   이렇게 잘 아시는 분이 왜...
"
"https://news.hada.io/topic?id=3513","순수하게 CSS로만 만든 디지털 시계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          순수하게 CSS로만 만든 디지털 시계

   - JavaScript 및 HTML도 없이 CSS로만 만든 디지털 시계
   - 설명은 CSS 소스 주석에
   ㅤ→ 12:00:00 부터 시작
   ㅤ→ Keyframe을 이용한 CSS Animation 으로 7 세그먼트 표시장치(LCD)를 표현
   - 최소한의 코드를 위한 다양한 브라우저 트윅들을 볼수 있음
   ㅤ→
   태그만 넣어도 브라우저가 ,,는 암시적으로 생성
   ㅤ→ content: """" 이 없으면 ::before , ::after 가 보이지 않음
   ㅤ→ display: block 이 없으면 html, head, link 는 보이지 않음
   ㅤ→ border: 1px solid #fff 처럼 안보이는 보더를 지정하지 않으면 사파리는 애니메이션 안함

   스위스 메이드 라는데, 분 표시가 깔끔하지는 않네요 :)
"
"https://news.hada.io/topic?id=3517","CodeSwing - VSCode용 대화형 코딩 환경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     CodeSwing - VSCode용 대화형 코딩 환경

   - CodePen/JSFiddle 같은 웹 플레이그라운드를 VSCode내에서 실행하여 리치 웹앱(swing)을 빌드하게 해주는 확장
   - HTML/CSS/JS 및 React/Vue/Angular 코드를 라이브 프리뷰 가능
   - 템플릿/Gist 갤러리 지원
   - CodePen으로 Export 해서 남들과 공유
"
"https://news.hada.io/topic?id=3595","OLTP 성능 비교에서 구글 클라우드가 AWS/Azure를 제쳐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  OLTP 성능 비교에서 구글 클라우드가 AWS/Azure를 제쳐

   - Cockroach Labs가 3년째 매년 조사하는 클라우드 성능 보고서
   ㅤ→ CPU/Network/IO 를 비롯해서 OLTP 어플리케이션과 워크로드를 벤치마크
   1. 전체 처리량에서는 GCP가 최고(작년엔 GCP가 3등)
   2. CPU성능
   - 1코어 인텔 케스케이드 레이크 : GCP>Azure>AWS
   - 16코어 성능은 AWS Graviton2 > AMD EPYC7002(GCP) > EPYC 7452(Azure)
   3. 네트워크 레이턴시는 AWS가 최고(가장 작음, Azure보다 28%, GCP보다 37%)
   4. 고성능 디스크 비교
   - Azure의 Ultra-disk 가 가성비 훌륭
   - AWS advanced io2 레이턴시가 가장 작음

   Graviton2 성능은 의외군요.. 동 코어수 기준으로는 x86에 밀릴 줄 알았는데 말입니다

   다른데서도 유독 벤치마크할때는 ""코어""라고 표현하던데, 저게 같은 코어수를 맞춘게 아니라 16 ""쓰레드""인 모양이더라고요. 테스트된 하드웨어들 다 16코어는 훌쩍 넘어가는 녀석들이더라고요.
   그래도 확실히 그래비톤이 멀티쓰레드 환경에서 힘을 쓰네요.

   클라우드 퍼포먼스 벤치마크 2019-2020 [PDF,72p] https://news.hada.io/topic?id=1049
   - ThousandEyes가 2018부터 실시하는 AWS,Google,Azure,IBM,Alibaba 총 5개의 메이저 클라우드 벤더들 성능비교자료
"
"https://news.hada.io/topic?id=3596","AMX, 애플 M1의 숨겨진 보조프로세서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         AMX, 애플 M1의 숨겨진 보조프로세서

   Apple Matrix Coprocessor
   - M1 발표에서 전혀 얘기되지 않았던 행렬 전용 프로세서
   - 행렬은 이미지처리, 머신러닝, 음성/필기인식, 얼굴인식, 압축, 음성/영상 미디어 처리등에서 많이 사용됨
   - 그거 Neural엔진이 처리해주는거 아냐 ? Neural Engine과 뭐가 달라 ?
   ㅤ→ GPU 나 Neural Engine 은 Accelerator(가속기)
   ㅤ→ 가속기 들이 사용할 메모리 공간을 채우기 위해서 CPU가 작업하는 것은 비효율
   ㅤ→ 이때 명령어들을 보고 있다가(spy) 이걸 Coprocessor가 대신 처리함
   ㅤ→ 이걸 이용하려면 별도의 명령어 셋을 정의해야함
   ㅤ→ ARM은 커스텀 명령을 넣는것을 거부해 왔지만 2019년부터는 가능한 확장을 제공하기 시작
   ㅤ→ 이게 아마도 AMX명령이 공식 문서에 나와있지 않은 이유일 것
   - 그럼 ARM에 들어있는 SIMD Vector Engine 이랑은 뭐가 달라 ?
   ㅤ→ SIMD : Single Instruction Multiple Data
   ㅤ→ 여러 개의 데이터에 같은 Operation을 실행할때 높은 성능을 내는 방법
   ㅤ→ 매트릭스 연산과 관련되어 있음
   ㅤ→ 하지만 SIMD는 ALU,FPU처럼 CPU내장이고, 코프로세서는 외장임
   ㅤ→ 예전 인텔의 8087(FPU)은 8086보다도 트랜지스터 수가 많아서, 그 시절엔 같이 넣는게 어려웠음. 기술 발전으로 트랜지스터 갯수가 많아지고 CPU에 FPU가 내장되면서 사라짐
   - 왜 AMX가 Firestorm 코어 안에 안 들어 간건지는 명확하지 않음
   ㅤ→ 아마도 별도로 두어서 CPU와 병렬적으로 작업하도록 하는게 쉬웠을 것이고,
   ㅤ→ 애플 입장에선 ARM표준이 아닌 것들을 외부에 두는걸 원했을 수도.
   - 왜 그럼 AMX 는 숨겨둔거지 ?
   ㅤ→ AMX가 공식 문서에 없는데, 어떻게 알게 된거야 ?
   ㅤ→ Dougal Johnson 이 리버스 엔지니어링을 통해서 알아냄
   ㅤ→ 애플은 행렬연산용 프레임워크인 Accelerate 를 통해서 다양한 기능을 제공함
   ㅤㅤㅤ⇨ vImage : 고수준 이미지 처리. 포맷 변환 및 이미지 조작
   ㅤㅤㅤ⇨ BLAS : 선형대수 ( 행렬과 벡터 연산 )
   ㅤㅤㅤ⇨ BNNS : 신경망 및 학습
   ㅤㅤㅤ⇨ vDSP : 푸리에 변환등의 디지털 신호처리. 이미지 또는 오디오 처리용 수학 연산
   ㅤㅤㅤ⇨ LAPACK : 고수준 선형대수 함수, 선형방정식 등
   ㅤ→ 이 Accelerate 라이브러리가 AMX를 이용해서 계산을 가속
   ㅤ→ 명령 자체를 공개했다면 ARM 에코시스템이 파편화가 되었을 것(이건 ARM도 애플도 원하지 않음)
   ㅤ→ 애플은 이걸 공개 안하고 프레임워크로 열어서, 고성능을 제공하면서도 언제라도 명령어 세트를 수정할 수 있게 됨
   ㅤㅤㅤ⇨ 애플이 하드웨어/소프트웨어를 동시에 제어하는 것때문에 가능
   ㅤㅤㅤ⇨ 개발자는 Accelerate 를 통해서만 작업하면 차후 개선되는 것도 누리게 됨
   - Apple Matrix Coprocessor 의 장점은 ?
   ㅤ→ Nod Labs가 ARMv8.6의 SIMD 표준 명령인 NEON이랑 비교한 바에 의하면 AMX가 2배 이상 빠름
   ㅤ→ 모든 것에서 AMX가 좋다는 것은 아니지만, 적어도 머신러닝이나 고성능 컴퓨터(HPC)에서는 AMX가 우위를 차지 한다는 것

   OpenCL사라지고 Metal 가속 이외에 Accelerate는 그렇게 강조하지는 않았지만
   매년 라이브러리를 늘려가고 있었는데 하드웨어 가속을 하는 전용 코프로세스가 들어갔다니 놀랍네요.

   아래 두 글을 쓴 엔지니어의 후속 글입니다. 같이 읽어보시는걸 추천해 드려요.
   - Apple M1칩은 왜 그렇게 빠를까? https://news.hada.io/topic?id=3315
   ㅤ→ 유튜브로 설명 듣기 : https://youtu.be/71LlixEBK0o
   - M1은 RISC-V의 상승을 예고한다 https://news.hada.io/topic?id=3447
   ㅤ→ 유튜브로 설명 듣기 : https://youtu.be/F5sIQZvlJc8
"
"https://news.hada.io/topic?id=3566","각종 장비/SW 들의 기본 계정/암호 모음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        각종 장비/SW 들의 기본 계정/암호 모음

   - Product/Vendor 별 Default 계정과 암호를 모은 Cheat Sheet
   ㅤ→ 라우터,웹서버,DB(Oracle,MSSQL..),Unix,ERP 등
   - 사내 기본 보안테스트를 위한 도구
   - CSV 파일로 제공
   - 총 3523 개
"
"https://news.hada.io/topic?id=3537","DALL·E : 텍스트에서 이미지 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        DALL·E : 텍스트에서 이미지 생성하기

   - 120억개 파라미터 버전의 GPT-3
   - 텍스트-이미지 쌍으로 된 데이터 셋을 이용해서 텍스트 설명으로 부터 이미지를 생성하도록 훈련시킨 것
   - 동물과 물체의 의인화된 버전을 만들거나, 관련없는 개념을 그럴듯하게 결합하거나, 텍스트 렌더링 또는 기존 이미지에 변형을 가하는 등 다양한 기능을 보여줌
   ㅤ→ 속성 제어 : 형태, 색상, 재질, 나오는 횟수등
   ㅤ→ 여러개의 객체 동시 그리기 및 관계를 표현
   ㅤ→ 원근감 표현 및 3차원 시각화
   ㅤ→ 내부 외부의 구조 표현 : 호두 내부, 뇌산호 등
   ㅤ→ 상황별 세부 정보를 추론 : 상황에 맞는 그림자 표시 처럼 스타일/설정/시간을 바꿔서 표현
   ㅤ→ 패션 및 인테리어 디자인
   ㅤ→ 전혀 관련 없는 개념들을 조합 : 하프로 만들어진 달팽이, 아보카도 모양 의자
   ㅤ→ Zero-shot visual reasoning
   ㅤ→ 지리/시간정보에 기반한 이미지 생성
   - DALL·E 는 텍스트 256, 이미지 1024개의 토큰을 단일 스트림으로 받아서 자동회귀방식으로 모델링하는 간단한 Decoder-only transformer

   어우 이거 엄청나군요. 일상 생활에 접목되는 날이 기대됩니다.
"
"https://news.hada.io/topic?id=3578","KeystoneJS - Node용 헤드리스 CMS & GraphQL API 백엔드 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             KeystoneJS - Node용 헤드리스 CMS & GraphQL API 백엔드

   - 스키마를 작성하면 GraphQL 과 AdminUI를 생성해주는 오픈소스
   - React/Vue 등의 백엔드에 적합
   ㅤ→ Next.js / Nuxt.js
   - MongoDB 및 PostgreSQL 연동
   ㅤ→ 추가로 Prisma를 이용해서 MySQL과 SQLite도 지원 예정

   아직 strapi가 확장성 면에서는 더 나은 것 같습니다.
"
"https://news.hada.io/topic?id=3551","GitHub이 구축한 온콜 문화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GitHub이 구축한 온콜 문화

   GitHub은 Ruby on Rails로 구성된 커다란 모노리스 시스템이었다.
   # 모노리스 온콜 구조에서 가장 어려웟던 부분
   - 크고 많은 제품과 기능이 포함되어 있었기에 대부분의 엔지니어가 코드베이스를 충분히 이해하지 못하고 온콜때 장애에 대응할 수 있다고 자신하지 못함. 호출받았을때 다른 팀에 에스컬레이팅하면서 엔지니어 보다는 연결 운영자처럼 느껴지게 되었다.
   - 온콜간의 간격이 길었고 한번 온콜은 24시간 이었다. 엔지니어는 1년에 4번이내로 온콜을 했고 온콜 중 충분한 컨텍스트를 얻지 못했다.
   - 모니터링과 경고시스템이 여러 팀에 분산되었고 온콜을 24시간만 경험하므로 온콜 모니터링과 문서가 잘 유지되지 않았다.
   - 대부분의 엔지니어가 모노리스 온콜에 자신이 없었기 때문에 전체 시스템을 잘 아는 5~10명이 모든 프로덕션 장애에 참여하게 되고 온콜 책임의 불균형이 발생했다.
   # 새로운 온콜 문화
   ## 업무 조직상의 장애물
   - 파일오너쉽을 명확히 하도록 서비스 카탈로그를 만들어서 파일을 서비스에 매핑하고 서비스를 다시 팀에 매핑했다.
   - 모니터링과 알림이 모노리스 전체에 설정되어 있어서 각 팀이 책입지는 영역의 모니터링을 만들도록 했다.
   - 이 작업을 할 팀이 많아서 팀마다 GitHub에 이슈를 만들고 체크리스트를 제공했다.
   ## 문화적 교육적 장애물
   - 판데믹이 사람들에게 부정적인 영향을 끼쳐서 기존에 생각한 것보다 더 공감우선 접근을 해야했다.
   - 대부분의 엔지니어가 온콜 경험도 없고 운영 경헙도 많아서 교육을 만들어서 제공했다. 온콜 전문가와 근무시간을 설정하고 충분한 도구와 문서를 만들고 도움받을 수 있는 Slack 채널을 만들었다.
   - 많은 엔지니어가 온콜이 삶에 얼마나 영향을 줄지 걱정했다. 경험이 많지 않으면 온콜 중 일상 생활의 시간을 조정하는 것이 어려울 수 있다. 이를 위해 온콜 전문가들의 팁/트릭을 정리하고 호출을 놓쳤을 때 다른 사람이 백업할 수 있게 하는 등의 조치를 취했다. 이건 익숙치 않음의 문제라서 훈련보다는 온콜을 여러번하면서 시간이 지나야 편안함을 느끼게 될 것이다.
   - 온콜에 잘 대응하지 못할까봐 걱정이 많았기 때문에 실수를 저질러고 괜찮고 아무리 잘해도 장애는 발생할 수 밖에 없다는 안정감을 주려고 하고 있다.
   - 제품마다 심각도 수준이 다르므로 어떤 팀은 5분내에 응답해야 하지만 어떤 팀은 다음날 처리해도 된다. 어떤 사람들은 이것이 불공평하다고 얘기하지만 엔지니어마다 관심사가 다른 것일 뿐이다.
   - 변경사항을 적용하면서 각 팀이 온콜 경험을 개선시키는데 많은 시간을 쓸 수 없다. 온콜이 제대로 이루어지지 않을때 온콜 프로세스를 개선해야 한다. 팀에게 ~20%를 기술 부채를 갚는데 사용하고 ~20%를 온콜 경험을 개선하는데 써야 한다고 전달했고 리더쉽의 장기적인 관점이 필요하다.

   온콜이라는 게 대략 어떤건지 모르겠어요... 지원 요청이려나요. 우리나라처럼 전화 응대는 아닐 듯한데...

   저희 회사의 경우 보통 두달에 일주일 정도 업무외 시간 시스템 장애에 실시간으로 대응하는 걸 on-call이라고 합니다. PagerDuty 라는 앱을 많이 쓰는데, severity가 high인 장애가 발생하면, - dead letter가 생긴다든디, api failure rate가 어느 정도를 넘어간다든지 ... - 하면 휴대폰으로 즉시 alarm이 오고 회사 랩톱으로 접속해서 로그확인하면서 필요한 조치를 취합니다.

   당직 생각하시면 될 것 같습니다.

   당번 혹은 주번정도 되는 느낌이네요. 장애대응을 돌아가면서 하는..
"
"https://news.hada.io/topic?id=3613","edge-sql : 서버리스 SQLite","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         edge-sql : 서버리스 SQLite

   - Cloudflare Workers 에 WASM으로 SQLite를 임베드하고 Workers KV에 데이터를 저장
   - 서버리스 펑션을 원격 DB처럼 사용
   ㅤ→ SQL을 직접 리모트로 호출해서 데이터를 읽어오는 방식
   - 읽기전용 데이터셋을 REST API대신 쓰고자 할때 이용가능
   * 예제 데이터는 유럽중앙은행의 환율 데이터

   SQLite의 WASM 컴파일 결과물을 쉽게 쓸수 있도록 만든 sql.js 패키지도 있습니다. https://github.com/sql-js/sql.js

   SQLite DB자체는 원래 정말로 서버가 없는 Serverless 입니다만, https://www.sqlite.org/serverless.html
   여기서의 서버리스는 Function as a Service 위에서 SQLite 를 올리는 방식 입니다.
   다양한 용도로 사용가능 할 것 같아요. 특히나 지연시간이 거의 없는 Cloudflare 의 Workers 에 잘 맞을듯
   Workers는 일 10만 쿼리, 분당 1000리퀘 제한이라서 간단한 API용도로 충분히 사용가능합니다.
   https://developers.cloudflare.com/workers/platform/limits
"
"https://news.hada.io/topic?id=3610","JingOS - iPadOS 스타일 리눅스 배포본","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      JingOS - iPadOS 스타일 리눅스 배포본

   - 모바일 퍼스트, 아이패드 비슷한 UI/UX
   ㅤ→ 상단 코너 스와이프 다운 : 우측 제어센터, 좌측 알림창
   ㅤ→ 하단 스와이프 업 : 태스크 전환
   - 멀티 터치 제스쳐 지원
   - 캘린더/타이머/파일/미디어플레이어/계산기 등 최적화된 자체 Native 앱 내장
   - 서피스프로 6, 화웨이 메이트북 14등 터치 내장 노트북에 최적화
   - Ubuntu 기반이어서 Linux 앱들도 사용 가능
   - 올해 말엔 스마트폰용도 배포 예정. ARM 기기도 지원예정

   여.. 역시 중국이었군요. 너무나 대담하게 베껴서..

   그냥 애플 UI를 대놓고 베껴버린게 너무 중국스럽긴 합니다만, 이런 시도는 이제 종종 나올거 같아요.
"
"https://news.hada.io/topic?id=3597","Can't Unsee - UI 눈썰미 측정 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Can't Unsee - UI 눈썰미 측정 게임

   서로 아주 조금만 다른 2개의 UI를 보여주고, 어느 것이 UI 디자인적으로 좀 더 ‘올바른’ 것인지 분간하는 A/B 테스트 게임입니다. (영어) 둘 중 어느 하나를 고르고 나면 이미지의 어느 부분이 달랐던 것인지 간단한 설명 문장과 비교 버튼으로 확인할 수 있습니다. 사소해 보이는 디테일에 차이를 숨겨두기 때문에, 자신의 눈썰미가 어느 정도인지 점수를 통해 알 수 있습니다.
   참고로 이 단순한 게임에도 비즈니스 모델이 들어가 있는 모양입니다. 이 게임에서 높은 점수를 얻는 사람은 눈썰미가 좋은 것과 상관 관계가 있으므로, 이 게임을 통해 디자이너나 QA 등 좋은 눈썰미가 필요한 직군을 채용할 때 정량적 평가 요소로 사용할 수 있다고 이야기하고 있습니다.

   그런데 제가 보기에는 명백하게 '올바르'거나 최소한 중립적으로 처리해야 옳다고 보는 디자인에 오답 처리를 하는 문항이 많군요. 어떤 논리적 이유 때문에 그런 디자인이 올바른지에 대한 설명이 있으면 좋을 텐데 아쉽습니다.

   네. 저도 그런 걸 몇 번 봤는데, 확실히 아쉽더라고요.
"
"https://news.hada.io/topic?id=3523","Clutch - 인프라스트럭처 관리 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Clutch - 인프라스트럭처 관리 오픈소스

   - 개발자들이 인프라 설정/운영/관리를 손쉽게 할 수 있도록 도와주는 웹UI 및 API 플랫폼
   - Lyft가 Envoy의 성공에 영향을 받아서 그걸 반영하여 모델링한 오픈소스 ( Envoy 관리도 가능 )
   - 개발 인프라 통합 대시보드를 생성 가능
   특징
   - Highly extensible : 확장을 쉽게 개발하고 추가 가능
   - Built for discovery : 개발 자원의 쉬운 검색
   - 개발,운영,유지보수가 쉬움 : Go + TypeScript + Protobuf
   - Secure and observable : SSO, RBAC 지원, 로깅/슬랙 연동 지원
   기본 내장 워크플로우들 : ec2, envoy, k8s, kinesis

   Envoy Proxy 의 성공 모델이 뭔지 궁금해서 잠깐 찾아보았는데요,
   https://clutch.sh/docs/about/what-is-clutch
   Clutch has patterned itself off of the successful model used by Envoy Proxy, also developed at Lyft, offering a rich, configuration-driven alternative to legacy tools. Deploying Clutch is also dead simple, with a single binary for both frontend and backend.
   이런 식으로 기재되어 있는데 Envoy 의 성공적인 모델이라는게 많은 것을 설정할 수 있도록 한다는 이야기인 거겠죠...?

   Announcing Clutch, the Open-source Platform for Infrastructure Tooling
   https://eng.lyft.com/announcing-clutch-the-open-source-platform-for-in…
   Dropbox가 Nginx에서 Envoy로 전환한 이유와 방법 https://news.hada.io/topic?id=2625
"
"https://news.hada.io/topic?id=3583","개발자를 위한 애플 실리콘 M1 맥 세팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         개발자를 위한 애플 실리콘 M1 맥 세팅

   - iTerm2 설치
   - Oh my zsh 설치
   - zsh 꾸미기
   - homebrew 설치
   - go 언어 설치하기
   - 도커(프리뷰) 설치

   깡통에어의 가성비는 정말 좋은것 같습니다.
"
"https://news.hada.io/topic?id=3562","Klio - 대규모 미디어 처리 파이프라인 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Klio - 대규모 미디어 처리 파이프라인 프레임워크

   - 클라우드에서 대규모 오디오/비디오/이미지 처리를 위한 Google Pub/Sub, Python, Apache Beam 기반 오픈소스
   - ML에서 사용하는 데이터 파이프라인과 같은 도구를 사용하여 미디어 파이프라인을 구축
   - Spotify가 자신들의 대규모 오디오 데이터를 처리하기 위해 만들고 공개
"
