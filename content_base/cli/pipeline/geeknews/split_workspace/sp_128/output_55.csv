"https://news.hada.io/topic?id=7279","Devbox - 격리 쉘/컨테이너를 쉽게 만들어주는 CLI도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Devbox - 격리 쉘/컨테이너를 쉽게 만들어주는 CLI도구

     * 필요한 도구들 리스트를 정하면 그 기반으로 isolated 된 환경을 만들어 줌
       → 내부적으로 Nix 패키지 매니저와 Docker를 활용
     * yarn 같은 패키지 관리자랑 비슷하지만 OS레벨 단위의 패키지를 관리해줌. (devbox.json에 패키지 리스트 저장)

$ devbox init
$ devbox add python2 go_1_18
$ devbox shell
> python2 와 go가 설치된 독립 쉘 사용
> exit

     * devbox build 하면 코드를 분석해서 필요한 도구들이 포함된 OCI 호환 컨테이너 이미지를 생성해 줌
       → 현재는 Go 언어만 인식

   미니저는 오타같네요. (매니저로 바꾸셔야할 듯)
"
"https://news.hada.io/topic?id=7253","원격 근무 가능한 스타트업이 최고의 인재를 확보하는 전쟁에서 승리할 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                원격 근무 가능한 스타트업이 최고의 인재를 확보하는 전쟁에서 승리할 것

     * 2008~2018년 사이에 원격근무는 400% 증가
     * 현재 미국내에 4백만명의 원격근무자가 있음
     * 2030년에는 전세계 2.5억개의 데스크 잡중 5000~8000만 정도가 완전히 원격으로 수행될 것
     * 제프 베조스가 ""당신의 마진이 나의 기회임"" 라고 말했듯이, ""오늘 당신의 사무실은 경쟁자의 기회가 될 것""
     * 사무실로 돌아가야 하는 회사들은 약 39%의 인력을 잃게 될거라는 추정이 있음
     * Fortune 500대 기업의 메인 캠퍼스를 연구한 바에 의하면, 책상간의 거리가 500미터 이상 떨어진 직원간의 커뮤니케이션은 전체의 10%에 불과
          + 이것은 회사가 여러 층, 건물 또는 캠퍼스에 걸쳐있으면 이미 ""사무실에 함께 있다"" 라는 협업가치를 많이 상실했음을 의미
     * 가트너 조사에 의하면 원격근무 또는 하이브리드 근무 하는 직원이 사무실에 근무하는 직원보다 더 높은 문화적 만족도가 있음
     * 오늘날, 미국의 근로자들은 평균적으로 편도 약 30분을 통근하며 직장외의 취미와 인간관계용 시간을 빼앗김
     * 많은 연구에 의하면 개방형 사무실이 스트레스를 높이고, 생산성을 저하시킨다는 사실이 밝혀짐
     * Fortune 500대 기업 두곳의 본사를 칸막이에서 개방형 사무실 레이아웃으로 바꿔보니 실제로 대면 상호 작용이 70% 감소
     * 최근 몇년간의 조사에 의하면 대다수의 근로자들은 하이브리드 근무를 원함
     * 문제는 근로자들이 ""하이브리드""를 떠올리면 그들이 ""항상"" 어디서 일할수 있는지를 선택할 수 있다고 생각한다는 것
          + Gartner는 이것을 ""Radical Flexibility(급격한 유연성)"" 이라고 표현했음. (기대와 다르기 때문)
          + 평균적으로 일주일에 3일은 집에서, 다른 곳에서 2일
     * 연구에 따르면 직원들이 언제/어디서/얼마니 일할 것인지에 대한 유연성이 있을 때 조직의 고성과자가 눈에 띄게 증가함
     * 하지만 많은 회사들이 하이브리드로 전환할때 팀이 출근하는 요일과 시간을 지정하는 경우가 많음. 이게 같은 단어지만 실제로는 매우 다름
     * 휴대용 컴퓨팅, 훌륭한 커뮤니케이션&협업 소프트웨어, 인터넷의 결합으로 새로운 작업 방식과 생활 방식이 등장
     * 이런 상황에 적응하지 못하는 기업은 인재를 경쟁사에 빼앗길 것이고, 원격 근무를 채택한 기업들은 그렇지 않은 기업을 대체하게 될 것
          + 오늘도 아니고, 내일도 아닐지 아니지만, 이것은 되돌릴 수 없는 움직임
     * 전자상거래가 많은 실제 상점을 파괴한 것과 같은 방식으로 가상 회사들이 사무실 기반 회사를 압도할 것

   이렇게 흐름이 바뀌네요

   글의 작성자는 Firstbase의 창업자/CEO 인 Chris Herd 입니다.

   https://twitter.com/chris_herd

   Firebase가 아니라 Firstbase입니다. 비즈니스 설립/운영을 도와주는 회사네요.

   어랏.. 무슨 생각이었을까요 ㅠㅠ 수정해두었습니다
"
"https://news.hada.io/topic?id=7225","iOS 프라이버시: 인앱브라우저에 어떤 JavaScript가 주입되는지 볼 수 있는 InAppBrowser.com 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   iOS 프라이버시: 인앱브라우저에 어떤 JavaScript가 주입되는지 볼 수 있는 InAppBrowser.com 발표

   지난 주에 Facebook/Instagram이 pcm.js라는 파일을 인앱브라우저에 주입해서 사용자가 인앱브라우저에서 하는 행동을 모두 모니터링한다는 보고를 했다.

   이를 탐지할 수 있는 InAppBrowser.com를 공개함.
     * 앱에 해당 URL을 공유하고 인앱브라우저에서 열어보면
     * 인앱브라우저에 JavaScript가 주입되었는지를 볼 수 있다.
     * 노랜색으로 나오면 주입된 JavaScript가 탐지 되지 않은 것이다.(인앱브라우저에서 보지 않고 그냥 열어보면 노란색으로 나온다)
     * 빨간색으로 나오면 무언가 주입된 것이다.
     * 어떤 행동을 모니터링할 수 있고 어떤 코드가 주입되는지까지 정리해서 보여준다.

   코드 주입과 관련해서
     * iOS 14.3에서 WKContentWorld이 도입되어 JavaScript 코드 실행을 지원했는데 이를 통해서 코드 주입을 함
     * Apple에서는 이를 막기 위해 SFSafariViewController도 제공하고 있으므로 SFSafariViewController를 쓴다면 코드를 주입할 수 없다.
     * Twitter, Reddit, YouTube, Telegram, Slack, WhatsApp 등 유명 앱의 현황을 계속 업데이트하고 있음

   사용자는 인앱브라우저 외에 ""Open in browser""를 눌러서 OS의 기본 브라우저로 웹을 볼 것을 권장.

   카톡이랑 네이버 인앱 브라우저에선 뭐 뜨는게 없군요. 의외로 pc 브라우저에서 뭔가 뜨던..(범인은 브라우저 확장)

   인스타그램/페북은 인앱브라우저에서 하는 모든 일을 추적가능합니다
   요 글의 후속 글이네요. 꽤 이슈가 되어서 아예 사이트로 만들어서 공개한거군요. 공유 감사합니다!
"
"https://news.hada.io/topic?id=7264","NGINX의 미래 : 오픈소스 뿌리로의 귀환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        NGINX의 미래 : 오픈소스 뿌리로의 귀환

     * 출시 18년, 전세계 웹사이트 55.6%를 호스팅하는 #1 웹서버
     * HTTP3/QUIC 부터 NGINX JavaScript(njs), NGINX Unit(폴리글랏 앱 서버) 등 다양하게 진화중
     * NGINX MARA(Modern App Reference Architecture) 1.0 도 발표 했음

앞으로 1년간 NGINX는 Modernize, Optimize, Extend 에 집중할 것

     * #1 프로젝트 운영 및 커뮤니티 관리를 최신화
     * #2 개발자 경험(DX)를 최적화
     * #3 NGINX의 힘과 능력을 확장 : 레이어7을 넘어서

위 약속을 지키기 위한 제품들

     * Kubernetes API Gateway
     * 완전히 새로운 NGINX Amplify
     * NGINX Agent

   10년전부터 참 잘 쓰고 있습니다.
"
"https://news.hada.io/topic?id=7203","안드로이드 뜻밖의 역사 출간","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            안드로이드 뜻밖의 역사 출간

   안드로이드 팀의 Chet Hasse 가 안드로이드 팀의 역사에 대해 정리한 Androids: The Team that Built the Android Operating System 의 한국 번역서가 출간 되었습니다.

   (말년이 좋지 않았던)앤디 루빈이 카메라용 오픈소스 OS(라고 생각했던)로 준비하고 있었던 danger를 시작해서 android.com을 만들고, Google에 인수된 이야기, 겨우겨우 Android 1.x 가 출시되어서, 세상에 (싸고) 널리 퍼지게 된 여러가지 배경에 대해서 딱딱(?)하게 기술되어 있습니다.

   컴퓨터와 OS의 역사에 대해 관심있는 분들에게는 좋아하실 것 같습니다.
"
"https://news.hada.io/topic?id=7234","아픈 아기의 환부 사진을 찍은 아빠를 구글이 범죄자로 지목","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    아픈 아기의 환부 사진을 찍은 아빠를 구글이 범죄자로 지목

     * 21년 2월 당시 주말이고 팬데믹중이어서, 응급진료를 위해 간호사가 영상/사진을 찍어서 보내주면 의사가 미리 리뷰해 주겠다고 함
     * 아기의 아픈 곳이 ""중요 부위""여서 잘 보이게 사진을 찍어서 보냈더니, 의사가 확인 후 항생제를 빠르게 처방하여 금방 해결이 되었음
     * 그러나 해당 사진때문에 구글의 알고리듬에 의해 CSAM(아동학대자료)를 교환하는 사람으로 지목되어 구글 계정이 정지됨
          + 10년 넘게 사용한 Gmail, 구글캘린더, 사진과 동영상은 구글 클라우드에 백업, 전화는 Google Fi
     * 심지어 당사자인 Mark는 기술기업에서 사용자들이 플래그한 비디오 콘텐츠를 삭제하는 자동화도구의 소프트웨어 엔지니어 였음
     * 그래서 이런 일들 뒤에는 컴퓨터가 실수하지 않도록 사람이 있기에, 그 사람이 보면 문제가 해결될 것이라고 생각
          + 해명하는 메일을 보냈지만, 구글은 추가 설명없이 계정을 복원하지 않을 것이라고 응답
          + 모든 이메일 기록과 사진, 연락처가 날아갔고, 전화번호도 바꿔야함
          + Mark는 몰랐지만, 이미 구글의 검토팀은 그가 만든 영상을 신고해서 샌프란시스코 경찰이 그를 조사하기 시작
     * 비슷한 일이 텍사스의 Cassio 라는 사람에게도 발생
     * 2021년에 구글에 CSAM 신고는 60만건이 넘었고, 27만개의 계정이 비활성화 됨
     * 2009년 Microsoft 가 PhotoDNA 기술을 개발했고, 2018년엔 구글이 CSAM 이미지를 인식할 수 있는 AI도구를 개발
          + 페이스북을 비롯한 여러 회사에서 이 기술을 사용
     * 2021년 12월에 Mark는 샌프란시스코 경찰로부터 우편물을 받음
          + 그가 조사를 받았다는 내용과 함께 구글에게 전달된 수색영장 사본 포함
          + Mark의 구글 계정에 있는 모든 것(인터넷 검색, 위치기록, 메시지, 문서, 사진, 영상등)이 조사되었음
          + 이 수색은 2월에 사진을 찍은지 일주일 만에 이뤄졌음
          + Mark가 조사관에게 연락했더니, 이미 사건은 무혐의로 종결되었다고 함
          + 조사관이 Mark에게 연락하고 싶었지만 전화도 이메일도 닿지가 않았다고(중지되었으니까)
          + 조사관을 통해서 구글 계정을 복원할 수 있냐고 물었지만 ""구글과 이야기해야 한다"" 라고 말함
          + 이 경찰 보고서를 구글에 제출했지만 소용이 없었음
     * Cassio 역시 똑같이 문제가 해결되었지만, 구글 계정은 복원이 불가능했음
     * 의료용 이미지와 학대 이미지를 AI가 구분할 수 있을까 ?

   결국 국내 뉴스에도 뉴욕타임스를 인용해서 보도되었네요.

   ""구글, 진료 위해 유아 아들 성기 촬영한 아빠 성범죄자로 몰아""

   70년 전 핵폭탄을 보고 과학자들이 과학에 대한 자기 감시를 시작했듯, 개발자들도 대형 테크 기업들에 대한 자기 감시가 필요한 시기가 아닐까 싶네요.

   이 정도면 고소감 아닌가요..?

   아카이브된 기사 원문에 따르면, Mark도 구글을 고소할 수 있는지 변호사와 상담했지만 약 7천달러의 비용이 든다는 사실을 알고 포기한 모양입니다.

   도게자 해도 모자랄 상황인거 같은데요....

   이야 이건 오히려 피해를 입힌것에 대한 보상을 받아야 할 거 같은데 그거에 대해 무마하려고 저렇게 대처하는걸까요?

   구글 대응이나 처리가 수준이 낮네요..

   애플, 아동 보호를 위한 새로운 안전기능 도입
   애플, ""아이폰 스캐닝"" 논란 유감
"
"https://news.hada.io/topic?id=7294","넉넉한 프리티어를 가진 Heroku 대체제들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        넉넉한 프리티어를 가진 Heroku 대체제들

     * FlyIO
     * Northflank
     * Koyeb
     * Render (15분 대기후 슬립, 30초 스핀업)
     * qoddi (커스텀 도메인 지원안함)
     * railway (500시간/월)
     * appliku (Django만 지원, 커스텀 도메인 지원안함)

   Replit은 아예 마이그레이션을 지원하는듯 하네요

   Replit도 있습니다

   fly.io 써봤는데 참 편했어요~

   간단한 튜토리얼을 정리해봤습니다.
   https://44bits.io/ko/post/…

   안그래도 헤로쿠로 토이 프로젝트 진행 중이었는데... 참고하겠습니다.

   올해 11월 28일 heroku free, hobby-dev 중단
   왜 회사들이 Heroku를 떠나는가(비용 제외)

   Appliku - Python/Django 앱을 위한 Heroku 대체제
   Coolify - 오픈소스 Heroku & Netlify 대체제

   Stack on a Budget - 무료 티어 기반 개발
   개발자용 Free Tier를 제공하는 서비스들(+500개) 모음
"
"https://news.hada.io/topic?id=7255","Google Play 게임을 PC에서 할 수 있는 'Google Play Games for PC' 오픈 베타 출시 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Google Play 게임을 PC에서 할 수 있는 'Google Play Games for PC' 오픈 베타 출시

     * Windows에서 Android 게임을 플레이할 수 있는 프로그램인 Google Play Games for PC 오픈 베타 시작
     * 한국, 홍콩, 대만, 태국 및 호주의 모든 사용자가 오픈 베타 버전으로 사용할 수 있다고 발표

   예전에 베타 열리고 설치해봤는데 일단 게임 수가 매우 부족하더라고요.
   그리고 하나 설치해봤는데 실행이 안됨...

   드디어 나왔네요 ㄷㄷ

   Google Play Games 베타 시작 - 모바일 게임을 PC에서

   본 기사인듯 해서 찾아보니, 예전에는 대한민국/홍콩/대만 대상 베타로 신청을 받았는데,
   이제 태국/호주 포함해서 모든 사용자가 오픈베타로 접속가능하게 바뀐거군요.

   한국 오픈베타 페이지: https://abit.ly/google-play-for-pc
"
"https://news.hada.io/topic?id=7266","Slack 기반 AWS Support 앱 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Slack 기반 AWS Support 앱 출시

     * Slack에서 AWS Support case 작성 및 검색 가능
     * Slack에서 Live chat도 가능하며 서비스 할당량 증가 요청도 가능
"
"https://news.hada.io/topic?id=7282","듄 애널리틱스(Dune Analytics) - 온체인 데이터 분석 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                듄 애널리틱스(Dune Analytics) - 온체인 데이터 분석 플랫폼

     * 듄 애널리틱스는 쿼리, 시각화, 대시보드 기능을 제공하는 온체인 데이터 커뮤니티
     * 이 외에도 다양한 사이트 존재(난센, 크립토퀀트, 글래스노드 등)
     * 온체인 데이터란 블록체인 위에 올라가 있는 데이터
     * 실시간으로 데이터에 접근할 수 있어 다양한 데이터 분석 기회 제공
     * SQL을 사용하여 쿼리 후 대시보드 제작
          + 대시보드 예시: DEX, NFT Marketplace, STEPN, 고래 분석 등
     * 아직 일부 단점 존재
         1. 검색 불편
         2. 컬럼 정보 부족(데이터 추상화)
         3. 불편한 UX
         4. 쿼리 삭제 불가 (유료버전만 private 쿼리 제공)
         5. 불친절한 온보딩
     * 현재 시리즈 B 투자로 유니콘 기업.
     * 더 많은 소개(한글버전)
          + Dune Analytics: 온체인 데이터를 좋아하세요?
          + Dune Analytics를 여행하는 Wizard를 위한 안내서
"
"https://news.hada.io/topic?id=7205","Electronic Materials Office® - Altar I 무선 기계식 키보드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Electronic Materials Office® - Altar I 무선 기계식 키보드

     * Ultra-Low 프로파일, 77/78키 블루투스 기계식 키보드
     * 정밀 가공된 알루미늄 모노바디
     * 2대의 블루투스 기기 연결(스위치로 전환)
     * 독특한 모양의 키캡
     * 로터리 인코더 : 우상단, 돌리는 스위치
     * 305x121x15mm, 635g
     * Kailh Choc Low Profile v1 — 적축 리니어 스위치 50±10gf
     * ZMK 펌웨어 (오픈소스)

   이거 굉장히 예쁘네요. 소개 감사합니다.

   간만에 흥미가 돋는 키보드가 하나 나왔네요. 아직은 비공개 베타라서 이메일 등록하고 초대받아야 합니다.
"
"https://news.hada.io/topic?id=7268","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   저는 벌초ㅠㅠ
     * 테니스라켓 사러 동대문갈거에용.

     * 5인팟으로 보드게임 모임을 합니다
     * HBO에 올라온 House of the Dragon을 볼 예정입니다
     * 잠깐 멈췄던 피아노 연습을 재개해야 ㅠ
     * 간만에 아이콘 도트 작업을 할 예정입니다. 오랜 시간이 흘렀는데도 아직 아이콘 편집기는 윈도우의 Microangelo가 제일이더군요
"
"https://news.hada.io/topic?id=7173","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   보겜콘에서 산 보드게임들을 언박싱하고 룰북 좀 읽어볼 계획입니다!

   주말 내내 연구실서 일할예정입니다!

   파운데이션 책을 보고, 밀린 드라마들 볼 예정이에요.

   애플워치로 자는 시간을 체크하는데, 8시간이 기본이라 매번 빨간색이 나와서 7시간으로 줄이고 녹색 나와보려고 노력중입니다. 전 한번 깨면 다시 잠이 잘 안오더라고요. 주말에 다시 한번 시도를!

   간만에 기숙사 떠나서 집 갈예정입니다.
"
"https://news.hada.io/topic?id=7299","4.2 Gigabytes, or: How to Draw Anything","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                4.2 Gigabytes, or: How to Draw Anything

     * Stable Diffusion 의 img2img 를 사용해서 멋진 그림을 그려낸 과정을 설명
          + 간단한 그림을 그리고 프롬프트를 변경해가며 계속 수정
          + 추가 객체들을 별도로 그려서 변환한후 합치는 과정 포함
     * 4.2Gb 정도의 모델 데이터 와 12GB 메모리를 가진 GPU에서 이 정도 수준의 그림 생성이 가능하다는 것이 놀라움

   https://news.hada.io/topic?id=7321
"
"https://news.hada.io/topic?id=7278","크롬, 웹사이트 방문시 사용자 동의없이 클립보드에 쓰기 가능 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   크롬, 웹사이트 방문시 사용자 동의없이 클립보드에 쓰기 가능

     * 이 사이트를 방문하면 사용자 동의없이 클립보드에 특정 문자열이 복사됨
     * Safari 와 Firefox 는 navigator.clipboard.write() 와 writeText() 호출시 사용자 제스쳐를 필요로 하지만 크롬은 그냥 넘어감

   사이트 방문 후 아무데나 붙여넣기 해보면 아래 문자열이 나옵니다.

   Hello, this message is in your clipboard because you visited the website Web Platform News in a browser that allows websites to write to the clipboard without the user’s permission. Sorry for the inconvenience. For more information about this issue, see https://github.com/w3c/clipboard-apis/issues/182.
"
"https://news.hada.io/topic?id=7179","Ruck - Deno용 Buildless React 웹 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ruck - Deno용 Buildless React 웹 프레임워크

     * ESM, Dynamic Imports, HTTP Imports, Import Map등을 활용해서 트랜스파일/빌딩 단계가 없음
     * Deno 와 Browser가 코드를 직접 실행
     * 기존 프레임워크에서 복잡하거나 불가능했던 일들이 쉽게 가능
          + RegEx 나 커스텀 로직을 통한 다이나믹 라우팅
          + 컴포넌트가 TransfterContext 활용
          + useHead React hook으로 적절한 헤드 태그 렌더링
          + 컴포넌트 레벨 데이터 페칭 가능한 SSR
          + React Hook을 이용한 GraphQL 사용
"
"https://news.hada.io/topic?id=7252","M2 맥북에어가 더 비싼 델 XPS Plus 노트북보다 윈도우 11을 더 빠르게 실행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            M2 맥북에어가 더 비싼 델 XPS Plus 노트북보다 윈도우 11을 더 빠르게 실행

     * 2022 맥북에어($1599)에서 Parallels 18 위에 윈도우 11을 설치하고 Geekbench 5 실행
          + 싱글코어 1681, 멀티코어 7260
     * Dell XPS Plus($1849)는 싱글코어 1182, 멀티코어 5476 (전원 미연결 & 배터리 이용시)
          + 단, 배터리를 빼고 전원을 연결하면 싱글코어 1548, 멀티코어 8103 으로 멀티코어는 더 빠름

   최고의 윈도우 노트북은 사과노트북이라는 유구(?)한 전통이 있죠. ㅎ

   맥과 애플 실리콘을 좋아하지만 cultofmac 같은 데서 굳이 저런 걸 해서 다른 플랫폼에 애착이 있는 사용자들의 마음을 긁으려는 게 좀 짓궂다 싶어요. 그냥 맥 쓸 일에 맥 쓰면 되는 일이고, 가격대비 맥 성능이 좋아졌다고 하면 될 일인데.

   저도 제목 낚시는 강하다는 느낌이 들었어요. 하지만 정보성은 충분하다고 느끼는데요
   온라인으로 일반 윈11 라이센스를 구입하면 패러렐스에서 자동으로 암 윈도를 받아서 설치해준다는 것과
   가상화 안에서 도는 윈11 이 일반 윈 노트북과 어느 정도 견줄만한 성능으로 돈다는 건
   소비자 입장에서 놀랍고 중요한 정보라고 생각합니다.
   불만인 점은 아무래도 아키텍처가 다르니 벤치마크 수치는 좀… 그렇기도 하고 , x64 에뮬레이션되는 앱은 훨씬 느릴 거라고 예상되고 x86앱은 실행이 안될 건데 이런 내용은 조심해야 한다고 좀 더 눈에띄게 표현해주지 않은 점이네요.

   x86 에뮬레이션이 먼저 됐고, x64 에뮬레이션이 뒤에 되었답니다. x64 에뮬레이션이 미세하게 더 빠른데.....

   둘 중 뭘 쓰던 ARM 네이티브로 돌리는 것과 성능차이가 아ㅏㅏㅏㅏㅏㅏㅏ주 많이 나옵니다. 한 요즘 코어 펜티엄까지 성능이 떨어지는 듯해요(.. ) 그래서 재미있는 정보지만... 실제 사용과는 꽤 괴리가 많다고 생각한답니다.

   제가 ARM 서피스 프로 X에 ARM 윈도우를 실제로 돌려보고 있는데. ARM 앱들 리스트를 외워야 제대로 쓸 수 있을 정도로 x86 에뮬레이션 성능은 실망스럽습니다. 리디북스 앱 쓰다가 Resize 한번 했는데 10초 멍때리다가 허겁지겁 바꾸고...

   훌륭한 댓글을 달아주셔서 낚시성 제목의 글이 정보글이 되어가네요. 고맙습니다!

   지나치게 민감히 반응하는게 아닌가 싶습니다. 거짓을 얘기한 것도 아니고 부풀려 말한 것도 아닌데...

   별게 다 불편하시네 ㅋㅋ

   아키텍쳐가 달라서 벤치 점수로 비교하는 것은 큰 의미 없다고 생각합니다.

   기사의 동영상까지는 보지 못했는데 패러렐스가 설마 x64 윈11 을 실행해주는 건가요? 에뮬레이션으로 그정도면 엄청난 일인 것 같은데요!

   궁금함을 못 참고 스크립트만 좀 훑어보았는데 온라인 사이트에서 소매로 구매할 수 있는 윈도우를 구매해서 설치하는 걸 보니 arm 윈도우는 아닐 것 같다고 생각합니다.
   아직 그래픽작업류의 소프트웨어 는 드라이버 문제로 잘 안되지만 그런 건 맥용이 있으니 문제 안된다, 웬만한 업무용은 다 된다 그런 요지라고 이해됩니다.
   맥북에어 사도 되겠는데요? ^^;

   패러렐스 18 정보를 좀 찾아보니 윈11 ARM 버전을 자동으로 다운로드해주는 방식이라고 하는군요… 안되는 게 넘 많겠어요.

   심지어 OS까지 다른거였다니 벤치의 의미가 더더욱 없어 보이네요

   궁금함이 해결되었습니다.
"
"https://news.hada.io/topic?id=7247","1년차 개발자의 골드만삭스 → 스타트업 이직 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      1년차 개발자의 골드만삭스 → 스타트업 이직 후기

     * 빠른 속도로 제품을 개발하여 성장하고, 내가 회사에 유의미한 영향을 미칠 수 있는 환경에서 일을 하고 싶었음
     * 저명한 VC에게 투자를 받은 회사 309곳을 찾고, 그 중 5년 이하 경력의 엔지니어를 고용하는 회사 205곳에 지원
     * 동시에 면접을 준비. 4월~5월까지 LeetCode 중간 난이도 문제를 94개 풀어봄
     * 지원한 회사 중 절반 정도는 답장을 받지 못했고, 3분의 1 정도는 이력서 단계에서 탈락. 결국 7개의 최종 면접을 봤고, 그 중 5개에 합격
     * Apache Hudi 기반의 제품을 개발하는 Onehouse에 입사
     * 일을 시작한지 5주 정도 지났는데, 옳은 선택이었다고 생각
     * 골드만 삭스와는 다르게 일하는 것이 즐겁고 ~~주말에도 일을 해서~~ 더 이상 월요일이 무섭지 않음

   -주말에도 일을 해서- 문구는 원문에 없는 작성자의 유머인 것 같습니다만
   스타트업은 주말에도 일하는 문화가 정말 있기 때문에 마냥 유머로 받아들여지지가 않네요

   엇.. 작성자는 한국분이시고, 해당 블로그 글은 영어/한국어로 각각 작성하신거고요.
   말씀하신 문구는 한국어 버전에만 있습니다. 제가 추가한게 아닙니다. ^^;;

   어머나 그렇네요
   한국어버전에 본심을 숨기는 게 가능하다는 걸 정말 몰랐습니다

   xguru님 누명을 씌워서 죄송합니다

   아닙니다. 원작자의 유머를 제가 혹시 훔친게 될까봐서 ㅎㅎ

   ㅋㅋㅋㅋ
   일하는 것이 즐겁고 주말에도 일을 해서 더 이상 월요일이 무섭지 않음

   50주 후의 후기도 꼭 보고싶어지는 기사군요

   한국분이시군요

   -주말에도 일을 해서- 라는 말이 영어 원문(?)에도 있는지 갑자기 궁금함을 못참아서 그만...

   저도 그만... ㅋㅋㅋㅋㅋ

   저도 같은 게 궁금해서 그만...
"
"https://news.hada.io/topic?id=7167","Grafbase - 인스턴트 서버리스 GraphQL 백엔드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Grafbase - 인스턴트 서버리스 GraphQL 백엔드

     * 개발자를 위한 Edge-Native 데이터 플랫폼
     * 가볍고 빠르게 GraphQL 백엔드를 로컬에서 실행
          + SDL로 스키마 설정하고 실행하면 끝
     * Edge 서버에 배포해서 프로덕션 운영하고 사용량 단위로 가격 지불
"
"https://news.hada.io/topic?id=7254","나는 애플이 RCS를 절대 채택하지 않기를 바랍니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      나는 애플이 RCS를 절대 채택하지 않기를 바랍니다

     * 구글의 캠페인은 RCS의 장점을 나열하지만, 문제는 얘기하지 않음
     * 애플 iMessage는 제대로 하지만, RCS는 제대로 못하는 것들
          + 철학 : 없음. 사람이 이용하도록 만든게 아니라 그냥 기능 체크리스트임. 응집력이 부족
          + 도입 : RCS는 IMS(IP Multimedia System)에 의존하며, 통신사 단위로 지원 및 활성화 필요. 아직 RCS는 모든 통신사가 지원하는게 아님
          + 보안 : iMessage는 E2E를 사용하고, 백도어를 넣어달라는 요청을 거부해왔음. RCS는 기본 E2E가 없음. 구글이 확장 스펙을 만들긴 했지만, 통신사의 서비스이고, 통신사 명령으로 법적인 인터셉션이 가능.
          + 요구사항: iMessage 사용을 위해선 무료로 생성가능한 Apple ID만 있으면 됨. RCS를 사용하려면 통신사가 발급한 전화번호가 있어야함. LTE가 없는 타블렛에서는 사용 불가
     * 애플이 다른 것을 채택했으면 좋겠음
          + iMessage가 RCS보다 좋지만, 결함이 있음. 가장 중요한건 둔하고 폐쇄적인 시스템 이라는 것
          + RCS 프로토콜 스펙은 389페이지이지만, Matrix 프로토콜은 겨우 8페이지
          + 두 회사가 Matrix 같은 솔루션을 도입하지는 않겠지만, Matter(홈 자동화용 통신 표준) 같은 것을 보면 충분히 협력가능
          + 구글은 애플한테 RCS같은 new-yet-obsolete(새롭지만 구식인) 프로토콜을 수용하라고 하지말고, 둘이 같이 뭔가를 만들어 보면 좋겠음

   구글, 애플에게 RCS를 수용하라는 ""Get The Message"" 광고 캠페인 시작
"
"https://news.hada.io/topic?id=7199","애니메이션으로 배워보는 Raft Consensus","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      애니메이션으로 배워보는 Raft Consensus

     * 단계별 애니메이션을 통해 분산 합의 메커니즘 이해하기
     * What is Distributed Consensus?
     * Overview
          + States (Follower, Candidate, Leader)
     * Leader Election
          + Election Timeout
          + Candidacy
          + Leadership & heartbeat timeout.
          + Re-election
          + Split Vote
     * Log Replication
          + Complex state machine example.
          + Commitment rules
          + Network Partitions
          + Client reads.
     * Conclusion & Additional Resources

   애니메이션으로 보니까 이해가 잘되는군요(완벽히 이해했어!!)
"
"https://news.hada.io/topic?id=7267","올해 11월 28일 heroku free, hobby-dev 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  올해 11월 28일 heroku free, hobby-dev 중단

    1. 자사 github에 제품 로드맵 공개
    2. 미션 크리티컬한 목표를 위해 해당 dyno 타입을 종료, 또한 hobby-dev 플랜의 데이터베이스도 종료. 10월 26일에는 미사용 계정 삭제 시작
    3. 향후 비영리 활동과 오픈소스 지원 활동에 대한 계획

   제목 오타 정정합니다. 11월 28일 이후로 해당 서비스들이 중단됩니다.
   미사용 혹은 비활성 계정은 10월 26일이 맞아요.

   얼마 전에 Heroku 장애(https://status.heroku.com/incidents/2453)나서 저희 서비스도 한 4~5시간 다 죽었는데, 무료도 풀리면 굳이...이걸...?ㅠ

   https://blog.heroku.com/next-chapter
"
"https://news.hada.io/topic?id=7236","기술 분야의 성공을 이끄는 11가지 법칙 [67p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    기술 분야의 성공을 이끄는 11가지 법칙 [67p PDF]

     * Moore's Law : 트랜지스터는 매년 두배씩 커지고, 비용은 절반으로 줄어듬.
          + 양자컴퓨팅으로 가면서 트랜지스터 수가 아닌 컴퓨터 성능이 유사하게 증가하는 중
     * Metcalfe's Law : 네트워크의 규모가 증가하면 그 비용은 직선으로 증가하지만, 네트워크의 가치는 사용자수의 제곱에 비례한다
          + 페이스북이 소셜 미디어 자이언트가 된 방법
          + 사람들이 오픈소스 프로젝트에 공짜로 기여하는 이유
     * Law of Mobility : 모든 제품의 가치는 이동성이 생기면 증가됨
          + TV를 모바일화한 넷플릭스
          + 은행을 모바일화한 Monzo, Revolut, Nubank
     * Gall's Law : 복잡한 시스템은 간단한 시스템의 발전된 형태이다.
          + 클라우드 서비스를 장악하기 위해 갤의 법칙을 활용한 아마존 클라우드
          + 갤의 법칙을 무시한 ICQ에게 벌어진 일
     * Law of Modularity : 블록단위 모듈화 설계가 중요한 이유. IBM System/360을 디자인했던 Evans의 이 모듈화 설계가 하드웨어/소프트웨어 설계를 변화시켰음
          + Salesforce가 소프트웨어 모듈화를 시작한 방법
          + API가 모듈화 및 큰 가치를 만들어낸 방법
     * The 2-Pizza Rule : 제프 베조스의 피자두판 법칙. 팀 사이즈는 피자 두판을 나눠먹을수 있는 크기 정도로
          + 피자2판 법칙이 아마존에게 준 전략점 이점
          + 모두가 피자 2판 법칙에 만족하는 것은 아님
     * Conway's Law : 조직내에서 소통하는 방식이나 제품의 디자인과 조직의 구조는 서로 같다(서로간에 투사됨)
          + 애플이 End-to-End 고객 경험을 제공하는 방법
          + 깃헙이 오픈소스 프로젝트처럼 구조를 가지는 이유
     * Yule's Law of Complementarity : 두개의 제품이 보완재인 경우 하나의 가치/수요는 다른 것의 가격과 반비례한다
          + 적자를 내는 제품이 비즈니스엔 좋은 경우
          + 하드웨어 제조사들이 소프트웨어에서 싸우는 이유(Xbox, Sony, Nintendo)
     * The Law of Shitty Clickthroughs : 거지 같은 클릭율의 법칙. 좋은 마케팅 채널도 점점 효과가 줄어든다
          + 혁신적인 마케팅이 비싼 마케팅 보다 좋은 이유
          + Warby Parker, Bombas Hubble, Iris Nova, Axios
     * Zimmermann's Law : 기술은 감시를 쉽게하는 쪽으로 자연스럽게 흘러간다. 컴퓨터의 성능은 사람을 추적할수 있도록 18개월마다 두배씩 증가
          + 데이터 수집이 페이스북을 세계에서 가장 가치있는 회사로 만들었음
          + 가전제품을 트래킹하는 것이 새로운 매출을 만들어냄(Amazon Echo, Google Home, Nest, Ring, Withings)
     * Pareto Principle : 80/20 법칙.
          + 왜 스타트업들은 대부분이 실패하지만 자본을 조달할 수 있을까
          + Whatsapp에 투자한 Sequoia

   Conway's law와 비슷한 개념으로, 우리는 소비자이면서 생산자입니다. 소비자로서 두 개의 비슷한 제품을 바라볼 때, 그 제품을 만든 조직이 좀더 긍정적이고 바람직한 환경에서 생산한 제품을 선호한다는 말이 있다고 합니다.

   원문은 아래 링크에서 다운로드 가능합니다 ㅎㅎ

   https://cbinsights.com/reports/…

   이전 버전은 8가지 였는데, 그건 번역한 버전이 있네요
   https://brunch.co.kr/@sacony/67
"
"https://news.hada.io/topic?id=7240","QEMU Internalsnternals

     * QEMU가 어떻게 동작하는지 소스코드를 통해 설명하고, Fun & Profit을 위해 해킹하는 법 알아보기
     * 주요 토픽들
          + Creating a new machine
          + Controlling memory regions
          + Creating a new device
          + Interrupts controller
          + Timers
          + PCI controller
          + PCI devices
          + Options
          + Execution loop
          + Breakpoints handling
          + VM running states
          + TCG internals part 1, part 2 and part 3
          + Snapshots
"
"https://news.hada.io/topic?id=7197","Puppertino - 애플의 휴먼 가이드라인 기반 CSS 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Puppertino - 애플의 휴먼 가이드라인 기반 CSS 프레임워크

     * macOS 의 모습을 모방하고, 애플 HIG를 그대로 따르는 경량/모듈러 프레임워크
     * 현재 포함된 컴포넌트들
       → 버튼, 스위치, 액션, Form, 모달, 아이콘, 폰트 레이아웃, 탭, 섀도우, 다크모드, 컬러 팔레트,..
     * 반응형 시스템은 없으므로 Bootstrap, Flexbox Grid, Skeleton 같은 것을 사용해야함

   https://codedgar.github.io/Puppertino/ 들어가봤는데
   다른건 다 이쁜데 파란색 버튼이 좀 촌스럽네요
"
"https://news.hada.io/topic?id=7165","pls - Prettier & Powerful 'ls'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     pls - Prettier & Powerful 'ls'

     * 개발자 친화적 기능들을 가진 이쁘고 강력한 ls
     * p = pretty, powerful, programmer, professional, python
     * 파일/폴더명 옆에 아이콘 표시
     * 프로그래밍 언어에 따른 색상 변경. 중요한 파일은 진하게, 아닌 파일은 흐리게
     * 다양한 속성 표시 (Git status 포함)

   이거 ls를 pls로 알리어스 해서 써도 되는거죠?

     ⚠️ Note that pls is not a replacement for ls. ls is a tried, tested and trusted command with lots of features. pls, on the other hand, is a simple tool for people who just want to see the contents of their directories.

   감사합니다. 설치를 해봤는데 그 마저도 잘 안되더라구요.
   뭔가 설정을 해야하고 그런거겠죠? 굳이 거기까지는 보지 않았네요.

   전 exa( https://github.com/ogham/exa )에 LS_COLORS( https://github.com/trapd00r/LS_COLORS ) 조합 쓰는 중인데 꽤 쓸만합니다.

   저는 exa가 윈도우를 지원 안해서 lsd 사용합니다.
"
"https://news.hada.io/topic?id=7229","Numpad - 텍스트편집기 + 계산기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Numpad - 텍스트편집기 + 계산기

     * 맥용앱 Soulver에서 영향받은 자유로운 계산기
     * 기본 연산들 : + - * / ^
     * per/to/mod/sqrt/sin/cos/ln/log/pi 등
     * 빈칸으로 리스트하면 자동 합산
     * 각종 단위 환산 지원
     * ""="" 으로 변수 선언 가능
     * 날짜/시간 계산 : ""17:30 - 2 hours 20 minutes"" , ""16th August 2022 - 2 weeks""

   NoteCalc - 사용하기 편한 노트형 계산기
   Numi - 깔끔한 맥용 계산기 앱

   NoteCalc가 한글 입력이 안되는데 이건 가능하네요.
"
"https://news.hada.io/topic?id=7215","K-word : 일반적인 단어 3000여개를 구글플레이에서 검색해본다면.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                K-word : 일반적인 단어 3000여개를 구글플레이에서 검색해본다면.

   앱스토어 최적화에서 가장 중요한 부분은 ""키워드"" 인데요.

   국립국어원의 학습용 어휘를 이용하여 2022년 8월 15일 기준, 3000여개 어휘(명사)를 이용하여 구글플레이에 검색하여 1만 7천여개의 앱을 발견했습니다.

   어떤 단어가 어떤 검색 결과 (앱 리스트)를 가지는지 살펴보세요
   우연한 기회에 생각지도 못한 단어로 재미있는 앱을 발견하실 수도 있을거에요

   만약 앱 아이디어가 있다면, 아이디어가 표현하는 단어에 어떤 경쟁자가 있는지 살펴보세요.
   앱 아이디어가 없다면 어쩌면 아직 아무도 순위에 들어가지 못한 좋은 앱을 만들 수 있는 기회가 되었으면 좋겠습니다

   K-word 랜딩페이지 하단에 단어와 앱을 모으면서 발견했던 내용들을 적어두었어요
   다 읽어보시면 마지막에 여러 검색어로 이동할 수 있는 버튼을 발견하실 수 있을거에요

   너무 잘 만드신거 같아요! 단어도 추가할 수 있으면 좋을 것 같아요!

   그런일은 일어나지 않을 것 같습니다 ㅋㅋ

   Medium에 올리신 후기 글도 잘 읽었습니다.
   저도 뭐 하나 개인적으로 만들어보고 싶은 게 있는데, 머릿속으로 대충 구상만 했지 정작 퇴근하고 나니 피곤하다고 시작도 안 한 것이 벌써 며칠째입니다. 이 글을 보니 다시 동기부여가 되는 느낌이네요.

   여기에는 안적어두었는데 읽어주셔서 감사합니다!
   저도 만들어보고 싶은건 많은데 여러가지 핑계거리로 미루게 되더라구요 작고 재밌는 아이디어 발견하시길 바랍니다 :)

   소재도 재밌고 앱도 예뻐요!

   감사합니다 :) https://daisyui.com/ 가 다 했어요 ㅋㅋ

   이거 너무 재밌네요!!

   감사합니다!
"
"https://news.hada.io/topic?id=7181","eInk 기기를 위한 VNC 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         eInk 기기를 위한 VNC 클라이언트

     * eInk 디스플레이를 사용한 이북리더 에서 30fps로 화면 보기 지원
     * Kobo Libra 2 (모든 Kobo 기기 가능) + TightVNC 서버(필수)
     * 키보드를 붙여서 원격 서버에서 텍스트 기반 작업 가능(문서 편집 및 코딩등)

   E-Ink를 위한 브라우저 관련 글도 있습니다
   https://medium.com/einkbro/…
"
"https://news.hada.io/topic?id=7231","Kubernetes에서 수천개의 CRD를 사용하도록 확장하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Kubernetes에서 수천개의 CRD를 사용하도록 확장하기

   Upbound에서 만든 Crossplane은 Kubernetes에서 클라우드 control plane을 제공한다. 그래서 AWS, Azure, GCP 같은 클라우드 리소스에 대응하기 위해 수백개의 CRD(Custom Resource Definition)이 있다. Crossplane에서는 MR(Managed Resource)라고 부른다.

   고급 Kubernetes 사용자라고 하더라고 수십개 정도로 적절한 CR을 운영했지만 Crossplane에서는 수백개의 MR을 써야 하기 때문에 Kubernetes가 얼마나 많은 CRD를 다룰 수 있는지 한계를 살펴보기 시작했다.

   이는 클라이언트측 문제와 서버측 문제로 나누어 볼 수 있다.

  클라이언트측 문제

     * 클라이언트에서는 discovery 과정이 문제가 된다.
     * kubectl 같은 클라이언트가 어떤 API를 서버가 제공하는지 찾기 위해서 discovery하게 되믄데 이는 모든 API 엔드포인트를 한번 순회해야 한다.
     * CR은 API 엔드포인트로 제공된다.
     * https://example.org/apis/rds.aws.upbound.io/v1/instances/cool-db 같은 MR을 조회하려면 https://example.org/apis/에서 지원하는 API 그룹을 찾고 https://example.org/apis/rds.aws.upbound.io에서 지원되는 버전을 찾고 https://example.org/apis/rds.aws.upbound.io/v1에서 지원되는 CR을 찾아야 한다.
     * AWS, Azure, GCP 클라우드 프로바이더를 제공하는 Crossplane MR은 2,000개 정도 되고 300개의 API 그룹과 버전으로 나뉘어져 있다.
     * 클라이언트는 discovery에 300개의 HTTP 요청을 보내게 된다.
     * 요즘 네트워크 상황에서 큰 문제는 아니지만 발견한 문제는 레이트 리밋과 캐시였다.

    클라이언트 레이트 리밋

     * 평균 초당 5개 요청으로 레이트 리밋이 걸려있고(100개까지 버스트) 10분마다 discovery 캐시를 무효화한다.
     * 이는 레이트 리밋을 올리면 해결할 수 있는데 지금도 초당 5개 요청이지만 300개까지 올릴 수 있게 되었다.
     * kubectl v1.22에서 이 제한을 올려달라는 이슈가 제기되었고 discovery 캐시도 10분이 아니라 5시간으로 조정되어 Kubernetes v1.25에서 클라이언트의 증가된 리밋을 이용할 수 있다.

    클라이언트 캐시

     * 레이트 리밋을 끄고 테스트해도 300개의 API 그룹을 조회하는데 20초 가까이 걸렸다.
     * 처음엔 네트워크 문제인줄 알았는데 찾아보니 캐시파일을 조회하면서 생기는 문제였다.
     * Kubernetes 1.25에서 수정해서 macOS에서는 25배 빨라졌고 Linux에서는 2배 빨라졌다.

    차후 클라이언트 개선

     * 클라이언트에서 레이트 리밋을 거는 것은 합리적이긴 하지만 사실 서버를 제대로 보호하진 못한다.
     * Kubernetes 1.20에 도입된 API Priority and Fairness (AP&F)는 서버측에서 Queue와 트래픽 흘리기를 제공해서 API 서버를 보호한다.
     * discovery를 위한 하나의 수집된 HTTP 엔드포인트가 KEP에서 승인되어 1.26에서 알파로 지원될 예정이다.

  서버측 문제

    OpenAPI 스키마 계산

     * 수백개의 CRD를 등록한 후 거의 한시간 정도 API 요청이 오래 걸리는 현상을 발견했다.
     * 프로파일링을 통해 이 문제가 OpenAPI v2 스키마를 계산하는 로직 때문임을 찾았다.
     * CRD를 추가하거나 업데이트하면 OpenAPI 컨트롤러가 CR의 swagger 스펙을 빌드하고 모든 CR의 swagger과 합쳐서 하나의 큰 스펙으로 만든 뒤 JSON으로 직렬화해서 /openapi/v2 로 제공한다.
     * /openapi/v2를 지연 계산하도록 하고 실제 CR에 대한 엔드포인트가 요청될 때 계산되도록 수정했다.
     * 이 수정은 v1.24.0에 들어갔고 1.20.13, 1.21.7, 1.22.4에 백포트되었다.

    etcd 클라이언트

     * OpenAPI 문제를 해결하고 발견한 새로운 병목 부분이다.
     * API 서버는 CRD당 4MiB의 메모리를 사용한다는 걸 알게 되었다.
     * 이는 GKE, EKS같은 매니지드 Kubernetes에서 더 문제인데 API 서버의 CPU와 메모리를 제한하고 있기 때문이다. 리소스가 더 필요하면 API 서버를 알아서 확장해 주지만 안타깝게도 CRD 추가하는 확장을 결정하는 요소가 아니다. 그래서 API 서버가 반복적으로 OOM killed되지 않는 이상 화장하지 않는다.
     * GKE, AKE, EKS에서 테스트했을 때 자동 힐링은 되지만 API 서버를 5초에서 1시간 정도 이용할 수 없었다. 클러스터가 완전히 멈추는 것은 아니지만 모든 rerconciliation이 멈췄다.
     * 프라파일링을 통해서 로깅 라이브러리인 Zap이 메모리의 20%를 차지함을 알게 되었다.
     * API 서버는 CR의 버전마다 하나의 etcd 클라이언트를 생성하고 각 etcd 클라이언트는 Zap 로거를 생성한다.
     * 이 결과과 중복된 로거로 메모리가 증가했을 뿐 아니라 API 서버와 etcd 간에 불필요한 TCP 커넥션도 생기게 되었다.
     * 모든 CR 엔드포인트에 하나의 etcd 클라이언트를 쓰는게 맞다고 메인테이너도 동의했지만 Kubernetes 1.25 릴리스가 임박해서 다 고치긴 어렵고 좀 더 작게 만들어서 모든 etcd 클라이언트가 하나의 로거를 공유하도록 수정했다.
       -이는 1.25에 포함될 예정이고 1.22, 1.23, 1.24에 백포트 될 것이다. 메모리 사용을 20% 줄일 것이다.

    차후 서버측 개선

     * CR 버전마다 만들던 etcd 클라이언트를 트랜스포트 당 하나씩(etcd 클러스터 마다) 만들도록 변경할 예정이다.
     * GKE, EKS, AKE 엔지니어링 팀과도 협업해서 다수의 crossplane CRD 설치를 다룰 수 있도록 작업 중이다.

   무료화 -> 무효화

   클라잉언트 -> 클라이언트
"
"https://news.hada.io/topic?id=7275","Diffusers - Pytorch를 이용한 이미지/오디오 생성 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Diffusers - Pytorch를 이용한 이미지/오디오 생성 모델

     * 사전 학습된 Diffusion 모델을 제공하며, Diffusion 모델의 추론 및 훈련을 위한 툴세트로 이용 가능
     * 몇 줄의 코드만으로 추론을 실행가능한 State-of-the-art Diffusion Pipeline
     * 여러가지 스케줄러 제공 : DDPM, DDIM, PNDM
     * Stable Diffusion 과 호환

   Stable Diffusion - DALL-E 와 비슷한 Text-To-Image 오픈소스
"
"https://news.hada.io/topic?id=7290","fRPC - 빠르고 유연한 RPC 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        fRPC - 빠르고 유연한 RPC 프레임워크

     * Protocol Buffer v3(proto3) 호환
     * 기존 RPC에 비해 2-4배 빠름. 싱글서버에서 2백만 RPC/초 처리 가능
     * 표준 request/reply 패턴외에 사용자 지정 패턴도 구현 가능
       fRPC를 끄고 기본 TCP연결을 가져다 다른 용도로 재사용하는 것도 지원
     * gRPC와 비슷하여 쉽게 사용 가능
     * 현재는 Go만, JS/TS/Rust 지원 예정

   grpc와 frpc의 벤치마크 코드의 차이는 일반 log와 zerolog가 일단 너무 눈에 띄네요..
   이걸 추가해서 구현하는거랑 차이가 있는지는 더 코드를 봐야할 것 같습니다.
   https://github.com/philip-bui/grpc-zerolog

   Cap’n Proto 라고 C++로 구현된 포맷 + RPC 프레임워크도 있습니다.
   https://capnproto.org/

   2-4배 성능을 얻는게 쉽지는 않을텐데, allocation, copy, parsing 등을 세심하게 튜닝해서 성능을 얻어낸 것 같기는 하군요.
   https://frpc.io/performance/optimizations

   gRPC와의 벤치마크
   https://frpc.io/performance/grpc-benchmarks

   와 grpc 보다 훨씬 빠르네요.. 갈아타야 하나..
"
"https://news.hada.io/topic?id=7244","ClipStudio, 2023년 부터 2.0 버전 출시하며, 1.0은 올해로 업데이트 중단예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ClipStudio, 2023년 부터 2.0 버전 출시하며, 1.0은 올해로 업데이트 중단예정

     * 1.0은 10년간 80번 이상 무료로 기능을 확장해왔으나 2022년으로 무료 업데이트 종료
     * 2023년 새로운 기능이 포함된 2.0을 출시하며, 1.0 사용자는 업데이트 플랜(연간 계약)을 구매해야함
     * 기존 월정액 플랜 및 업데이트 플랜 계약 기간 중에는 그 시점의 최신 버전 이용 가능
     * 일시불(무기한) 버전 2.0도 판매
     * 1.0은 각 이용환경에서 작동하는 한 영구적으로 이용 가능
     * 무기한 버전의 새로운 기능은 주요 버전(예: 2.0 또는 3.0)마다 탑재되며, 이제 기능 추가 업데이트는 무료로 제공되지 않음.
       → 즉, 버전 2.0의 무기한 버전을 구입해도 이후의 기능 추가를 위해서는 업데이트 플랜 계약이 필요

   1.0도 버그는 잡아주겠죠? 2.X 이상에서 얼마나 매력적인 기능을 추가하냐가 관건일 것 같은데...

   OS차원의 변경으로 완전히 동작안하는 수준의 버그 말고는 별 수정이 없을듯 하네요.

   만화가/일러스트레이터를 위한 저렴한 포토샵이었는데.. 이제 요금제도 포토샵처럼 가는 군요.

   이것 때문인지 어떤 사람들은 Krita 같은 오픈소스 대체 도구를 홍보하고 있더군요.
"
"https://news.hada.io/topic?id=7250","주4일 근무하시는 분?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              주4일 근무하시는 분?

   HN에 올라온 ""주4일제 일자리를 찾은 방법 또는 32시간으로 협의한 방법은?""에 대한 답변들
     * 모든 인터뷰때 마다 4일근무가 가능한지를 물어봤음(현 직장에도 물어봤지만 거절) 요구한게 아니라 단순히 물어본 것. 그렇게 하다가 끝내 조건이 괜찮은 곳을 찾았음(지금 받는 급여보다 높음)
     * 15개월 아이를 돌보기 위해 보스에게 혹시 4일근무로 변경 가능한지를 물어봤음. 그의 대답은 ""당신이 그만두는 것보다 4일 근무가 나음"" 그래서 그렇게 하기로. 급여는 20% 줄였음(당연히 나도 이럴 것으로 예상했고 만족)
     * Johnny•Decimal 블로그를 운영하는 John Noble
          + 호주의 IT 통합업체에서 계약직으로 근무중
          + 내 삶의 71.4%가 아닌 57.1%정도만 일하는 것으로 바꿨고, 정말 좋음
          + 월요일은 일하지 않는 날이고 보통 사이드 프로젝트를 하거나 영화 보기/갤러리 구경/쇼핑 등을 함
          + 바쁠때는 40시간 일하지만 평균적으로 36이었고, 지금은 32시간이 되었음.
          + 실제로 일을 적게 하는 것은 아님. 버리는 시간없이 더 집중.
          + 이제 새로운 일을 찾고 있는데 이력서에도 아예 화~금 만 일한다고 적었음.
          + 정규직은 원하지 않는 Life-Long Contractor 임.
          + 희망급여는 일에 따라 다르지만 기본적으로 시간당 AU$220 정도임(약 20만원)
     * 현재 주당 35시간 일하고 있음. 4주 휴가 및 무제한 병가. 내 인생중 가장 건강하고 스트레스 수준이 낮음.
     * 주4일 근무를 두번 해봤는데, 감당 가능한 사람에게는 권하고 싶음. 세금때문에 실제 삭감되는 급여는 20% 보다는 낮음.

   일당도 아니고 시간당 20만원이라니 월 3천만원 정도인데 .. 임원급인건가요…

   시간당 20만원요..?

   데브컴 메인 화두로 떠오른 주 4일 근무, 가능할까? https://m.inven.co.kr/webzine/wznews.php?idx=275644 : 게임개발 해외 스튜디오에서 적용한 후기 강연입니다.

   저는 지방이지만 주4일제하는 회사에 다니고 있습니다
   주4일제를 시행하며 급여가 줄어든건 없구요
   다만 지방이라 서울대비 급여가 원래부터 많이 박하죠
   지방은 매출구조가 탄탄한 기업들이 거의 없더라구요
   암튼..
   임금 문제를 해결하기 힘드니 근로시간을 줄이는데 초점을 둔 회사의 입장도 공감하고

   주중에 연차 하루만써도 3박4일 여행이 가능하니
   늘 휴가가는 마음으로 쉴 수 있어 마음의 여유도 생기고 좋은 것 같습니다
   같은 급여를 받는데 근무일수는 줄어드니 사실상 임금인상 같은 기분도 드네요

   Bolt, 주4일 근무제 영구적으로 시행
   아이슬란드의 주4일 근무 시험 '압도적인 성공'
   Beacon CRM, 주4일 근무제로 변경
   MS Japan의 주4일 근무제 실험이 생산성을 40퍼센트 향상시키다
   벨기에, 주4일제를 승인하고 퇴근 후에 상사의 연락을 무시할 권리 부여

   주4일제 관련 기사를 보면 ""100% 급여를 받으면서, 80%의 시간만 일하는"" 회사들 얘기도 많은데요.
   여기 댓글에서는 아예 급여를 80%로 줄이는 얘기들이 여럿 있어서 흥미로웠습니다.
   물론 80%라도 그 직장이 어떤 수준의 연봉을 제공하느냐에 따르긴 하겠습니다만;;
"
"https://news.hada.io/topic?id=7289","소프트웨어 엔지니어에 대한 OnCall 보상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        소프트웨어 엔지니어에 대한 OnCall 보상

업계 전반의 온콜 철학

     * 회사별로 철학이 다름

    1. Oncall 담당자를 별도로 고용 : DevOps, SRE, Operations Engineer 등으로 부름
    2. 업무시간 외에는 근무 안함 : 업무시간 외에는 운영하지 않는다는 것을 고객도 알거나, 큰 문제가 아닌 경우(로컬,B2B, 고객이 별로 없는 스타트업등)
    3. 업무시간 외에는 일의 일부가 아니지만, 연락은 할 수 있음 : 누군가 온콜은 하고 있어서, 개발자에게 연락은 할 수 있음. 그러나 꼭 전화를 받는 다는 보장은 없음.
    4. 모든 소프트웨어 엔지니어가 해야할 일의 일부이며, (각 지역별 규제에 따라) 급여 및 휴가등으로 보상하는 방식으로 운영
    5. 업무의 일부이고, 급여와 휴가등으로 보상
    6. 대부분 사람들에게 자원(Voluntary)하게 하며, 급여 및 휴가를 제공
    7. 모든 소프트웨어 엔지니어들의 업무중 일부이고, 추가 보상은 하지 않음
       → 대부분의 많은 회사들

     * 복잡하게 나눠놨지만, 실제로는 1~6 과 7로 나뉨. 온콜이 추가 업무인가 아닌가

온콜에 대해 보상하는 회사들과 아닌 회사들

     * Unpaid : Airbnb, Amazon(대부분 지역), Apple, Cloudflare, Dropbox, GitHub, Grab, Linkedin, Meta, Microsoft(US), Netflix, Nike, Oracle, Plaid, Shopify, Square,..
     * Paid : Atlassian, Auth0, Datadog, Delivery Hero, Google, GitHub(Germany), Klarna, Microsoft(UK), Monzo, PayPal, Spotify, Snap, Snyk,..
     * 구글을 제외하고 대부분의 BigTech는 온콜 보상이 없음
       → 아마도 급여가 시장 최고 수준이기 때문

회사들은 온콜 보상으로 얼마나 지급하는가 ?

     * 주당 $100~$1250까지 다양함. 구글의 일부 엔지니어는 더 받을 수도
     * 보상은 3가지 정도로 나뉨
          + Flat rate : 주/일별로 고정 금액
          + 스탠바이는 Flat, 업무시간외 근무는 추가 보상
          + 사고에 대해 작업한 시간에 대해서만 보상
     * 회사별 보상 요약
          + Google
               o Tier 1: 월급여의 ~20%
               o Tier 2: 월급여의 ~10%
               o Tier 2 가 주당 $2000 이상
          + Netlify : $1125/주
          + Spotify : $700/주
          + Atlassian : $450/주

온콜을 비용으로 보상하지 않는 회사들이 주는 것

     * Apple : SRE팀이 대부분 Oncall을 처리. SRE들은 주말에 처리하고 나서 다음 주중에 휴일 보상
     * Microsoft(US) : 온콜 후 금요일 휴가 받음. 온콜이 힘든 주에는 휴일을 더 요청 가능
     * Shopify : 시프트당 하루 휴가

안 좋은 온콜 문화

     * 가장 불만을 많이 들은 회사는 Twilio, Amazon

   한국에도 온콜 문화가 있나요? 보통은 관제 외주를 주는 것 같은데... 문화 차이인지 회사 규모 차이인지 잘 모르겠네요.

   이 글에 대한 해커뉴스 토론 링크 : https://news.ycombinator.com/item?id=32378752
   건강한 On-Call 문화 만들기
   GitHub이 구축한 온콜 문화
   Grafana OnCall 공개 - 쉬운 온콜 관리 도구
"
"https://news.hada.io/topic?id=7210","음악을 재생하면 구형 노트북 HDD가 파괴되는 취약점: CVE-2022-38392","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             음악을 재생하면 구형 노트북 HDD가 파괴되는 취약점: CVE-2022-38392

     * 자넷 잭슨의 리듬 네이션은 1989년 팝 히트곡
     * 이 노래의 뮤직비디오를 재생하면 특정 노트북 모델이 손상된다는 걸 발견
     * 조사 결과 특정한 5400rpm 하드디스크를 이용하는 환경에서 뮤직비디오를 재생하면 공진 주파수로 인해 HDD가 파괴됨
     * 문제를 발견한 제조업체는 오디오 재생 중 문제가 되는 주파수를 감지하고 제거하기 위해 사용자 정의 필터를 추가
     * 최근 하드디스크에는 영향이 없음
     * 해당 취약점은 CVE-2022-38392로 명명되었음

   뮤직비디오 링크

   데이터센터 하드디스크에 대고 고함을 지르면 성능이 떨어지는 영상도 있네요... ㅋㅋㅋ

   https://m.youtube.com/watch?v=tDacjrSCeq4

   이게 레이몬드 첸의 블로그를 통해 처음 공개가 되었던 내용이었군요.
   Janet Jackson had the power to crash laptop computers
   https://twitter.com/WindowsDocs/status/1558114944738103297

   참고로 아시는 분은 다 아시겠지만, 이 분께서는 굉장히 흥미로운 이야기들을 많이 공유해 주시죠. 예를 들면 이런 거.
     * 제대로 연결했는지 묻지 말고 먼지를 불어 보라고 얘기하세요
     * Raymond Chen이 한글날에 밝히는 윈도우의 한글 자모 분리 현상

   500마일 이메일 문제처럼 재밌는 케이스네요.

   뭔지 몰라서 검색해봤는데 이것도 재밌네요.
   검색하다보니 바닐라 아이스크림 알레르기 자동차 사례도...ㅎㅎ

   최근 하드디스크에는 영향이 없다는데.. 괜히 링크 누르기가 무섭.. ㅎㅎㅎ

   ""약 2005년에 노트북과 함께 제공된 특정 5400RPM OEM 하드디스크""가 조건이라 많이 까다롭긴 한데 직접 재생하지 않고 주변에서 재생하는 걸로도 영향을 줄 수 있다네요. 무섭..

   참 별의 별일이 다 있네요.. -_-

   다시한번 알게 됩니다. 일어나기 어렵지만, 공진주파수가 무섭다는걸요..
"
"https://news.hada.io/topic?id=7265","애플, 9/7일(한국시간 9/8일 2am) 새 제품 발표 이벤트 개최 : 'Far Out'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           애플, 9/7일(한국시간 9/8일 2am) 새 제품 발표 이벤트 개최 : 'Far Out'

     * 신형 아이폰 14 및 애플워치 8 등의 제품이 발표 될 것으로 예상
     * 루머들
          + 아이폰 14는 4개의 제품이 될것 14, 14 Max, 14 Pro, 14 Pro Max (Mini 사라짐)
          + Always-On-Display, 48Mega Pixel 카메라, A16 프로세서등
          + Pro 모델은 Notch 대신 Pill + Hole 형태가 될지도
          + 워치 8 : 온도 트래커(체온 아니고 외부 온도), 수면 추적

   이미지는 꼭 AOD가 정말 들어올 것 처럼 보이네요.
"
"https://news.hada.io/topic?id=7194","a16z, WeWork 창업자였던 아담뉴먼의 Flow에 4500억원 투자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                a16z, WeWork 창업자였던 아담뉴먼의 Flow에 4500억원 투자

     * 아담뉴먼은 마이애미, 포트로더데일, 아틀란타, 내쉬빌 등지에 3천개의 아파트를 구매했음
     * Flow는 이 자산을 운영하는 주거용 부동산 회사
       → 저렴하고, 커뮤니티 중심이며, 기술에 의해 주도 되는 주택 경험을 제공
     * 젊은 세대들이 집을 사는게 점점 힘들어지니까, 빌려서 쓰라는 것
     * a16z는 주거용 부동산에 대한 접근 방식을 바꿀 수 있는 기회라고 표현

   앤드리슨 선생이 이제 제2의 손 선생님이 되시는 건가요?

   WeCrashed 도 다 봤는데.. 드는 생각은.. a16z가 왜 이런 투자를 했는지 잘 이해가 안되네요.

   관련해서 최근에 마크 앤드리슨의 NIMBY적 행태에 대해 꼬집은 기사도 같이 보세요
   The Billionaire’s Dilemma - Marc Andreessen says he’s all for more new housing, but public records tell a different story.
   https://theatlantic.com/ideas/archive/…

   이걸 꼬집는 트윗 하나 더

     ""Theranos 창업자인 엘리자베스 홈스는 투자자에게 1.3조원($1b) 손해을 입혔음. 그녀는 최대 징역 20년형을 바라보고 있음""
     ""WeWork 창업자인 아담 뉴먼은 투자자에게 14조원($11b) 손해를 입혔음. 그는 차기스타트업에 4500억($350m) 투자를 받았음""
     https://twitter.com/fintwit_news/status/1559271028454526976

   5월에 이미 a16z crypto로 부터 $70m을 투자받은 아담뉴먼의 Flowcarbon 과는 다른 회사입니다.
   https://flowcarbon.com/knowcarbon/…
"
"https://news.hada.io/topic?id=7163","Connect-Web : 브라우저에서 RPC 호출하는 TypeScript 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Connect-Web : 브라우저에서 RPC 호출하는 TypeScript 라이브러리

     * 구글의 grpc-web 은 TS지원이 약하고, JSON 및 ECMAScript 모듈 지원이 안되고, 생성된 코드가 10년된 Java같음
     * Connect-web은 손으로 작성한 듯한 REST 클라이언트 같은 코드를 생성
     * 2개의 RPC 프로토콜 지원 : gRPC-Web 과 Connect의 자체 프로토콜
     * Connect 프로토콜은 간단한 POST-only 프로토콜
          + HTTP/1.1 또는 HTTP/2 에서 동작
          + gRPC 와 gRPC-Web의 좋은 부분만 가져옴
     * Promise 및 Callback기반 API 동시 지원
          + React, Angular, Svelte 등과 잘 연동
     * 데모를 grpc-web 에서 변경해보니 번들 사이즈가 80% 감소
"
"https://news.hada.io/topic?id=7218","Supabase Realtime - Multiplayer 기능 GA로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Supabase Realtime - Multiplayer 기능 GA로 공개

     * Realtime 서버(PostgreSQL과 웹소켓으로 실시간 통신하는 서버, 오픈소스)에 Broadcast 와 Presence 기능을 추가
          + Broadcast : 다수의 리시버에게 메시지 전송. DB에 저장되지 않고 직접 클라이언트에게 릴레이 전송됨
          + Presence : 상태를 저장하고 클라이언트간 동기화
     * 이 기능을 위해 Realtime 서버의 모든 것을 Channel 구조로 변경

   GA가 뭔가요? 못찾겠네요

   저도 몰라서 찾아 봤습니다.
   참고하세요.
   https://ko.wikipedia.org/wiki/소프트웨어_배포_생명_주기

   General Availability
   https://www.techopedia.com/definition/32284/general-availability-ga

   Phoenix Channel 에 있는 기능들 붙였나보네요

   Supabase 공개 베타 시작 - 오픈소스 Firebase 대체제
   Supabase, GraphQL 지원 시작
"
"https://news.hada.io/topic?id=7209","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   만들어둔 .com 도메인 크롤러를 DB 사용하도록 구성했었는데 텍스트 파일을 이용하도록 단순화 시키려고 합니다.

   다양한 UI를 지원하는 파폭 테마 기능을 병합하고 문서화할 생각입니다.
   https://github.com/black7375/Firefox-UI-Fix/pull/438

   시외로 물놀이 나갑니다~

   해커톤 참가예정입니다

   언제나 그랬듯이 자전거 50키로 정도~~

   여름 & 휴가가 겹치면서 운동이랑 다양한 것들을 잠깐 쉬었는데 다시 시작하려고 합니다.
   긱뉴스 위클리에 기사 리스트가 보기가 좀 힘든것 같아서 그거는 주말에 수정해야 할듯 ㅠ
"
"https://news.hada.io/topic?id=7269","세상에서 색이 점점 사라져 가고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          세상에서 색이 점점 사라져 가고 있다

     * Science Museum Group Collection 은 1800년대 부터 7000장의 물건사진을 21개 항목으로 나눠서 컴퓨터 비전으로 분석했는데, 무채색 계통이 점점 증가하고 있음.
     * 자동차의 색상은 90년대 중반부터 무채색 계통이 증가하기 시작해, 오늘날에는 약 70%이상이 무채색.
     * 70, 80년대 가정집과 '모던하우스'를 비교하면 극명한 차이가 드러남.
     * 맥도날드 매장 또한 과거와 오늘날을 비교하면 색을 잃어가고 있음.

   색이 점점 사라지고 있다기보다는
   미니멀/심플한 디자인이 요즘 트렌드라서 색도 점점 미니멀해지고 있는거라고 생각합니다

   화려한 디자인 트렌드가 오면 또 다시 유채색이 많아지겠죠?

   유행때문에 그렇다기엔 200년 전부터 이어진 추세라서... 좀 더 근본적인 사회구조의 변화나, 무채색 계통을 많이 쓰는 새로운 물건의 대량생산(컴퓨터라던지) 때문은 아닐까 싶네요.

   브랜드 로고가 다 비슷비슷해져 가는 현상도 생각나네요. 왜 세상은 더욱 밋밋해져 가는걸까요?

   화학공학적 시각에서 조금 이야기를 해보자면, 1965년 클레어 패터슨이 납의 유독성을 경고해온 이래로 빠르게 페인트와 발색제 중 납을 필두로 한 중금속 계열이 대부분 퇴출되는 사건이 있었습니다. 지금도 납 중독의 주요 지표 중 하나가 60년대에 건축된 구축 건물에 사는지일 정도로, 80년대 이후에는 인공물에 이전과 같은 수준의 색을 넣는 비용이 그 전보다 수십 배 증가했고, 그 영향을 포함해서 디자인과 미술사조가 완전히 뒤바뀐 와중 2000년대 이후 디스플레이의 발달로 '현실보다 더 현실같은' 색감을 일상적으로 접할 수 있게 되면서 원색에 피로감을 느끼는(유지보수비용, 생산단가) 사업자와 밝은 원색을 유치하다고 느끼는 소비자의 합의가 주요한 원인 중 하나 아닐까, 짧은 식견이나마 적어보았습니다.
"
"https://news.hada.io/topic?id=7292","LastPass 소스코드 유출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LastPass 소스코드 유출

     * 침입자가 LastPass 개발자중 한명의 계정에 접속, 개발 환경에 접근하여 소스코드 일부와 일부 독점적인 기술정보를 훔쳐감
     * LastPass 제품과 서비스는 영향없이 정상적으로 운영중. 고객 데이터 유출 정황은 없음

   LastPass 개발자는 LastPass 를 사용하지 않은 것일까.
"
"https://news.hada.io/topic?id=7184","2022년 현재, 최고의 웹 스크래핑 도구는 무엇인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2022년 현재, 최고의 웹 스크래핑 도구는 무엇인가요?

   HN의 질문에 대한 답변들
     * Playwright : JS실행이 필요한 웹페이지가 많아져서, 브라우저 자동화 도구가 편함
     * Beautiful Soup : 다양한 스크래핑 앱 만들기 편한 파이썬 패키지
     * 쉘에서 cURL + pup(마크업)/cskit(CSV)/jq(JSON)/psql(DB)
     * Browserflow : 웹 브라우저 기반의 작업 자동화 도구
     * curl-impersonate : 브라우저 처럼 웹사이트를 가져오는 포크버전
     * Helium : 더 사용하기 편한 Selenium-Python
     * undetected_chromedriver : CloudFlare 봇 체크를 통과하는 커스텀 Selenium Chromedriver
     * estela : 쿠버네티스에서 동작하는 elastic web scraping cluster

   puppeteer팀이 ms로 흡수되면서 그대로 playwright이 됐다고 들었습니다

   Playwright, Scrapy 같은 툴들이 개발사 측에서 유지보수를 잘 해줘서 좋은 것 같아요.
   개인적으로는 scrapy-playwright 플러그인을 많이 사용하고 있습니다.

   Peppeteer가 안보이는걸 보니 Playwright로 많이들 넘어갔나보군요

   댓글에서도 실제 사용해본 사람들은 대부분 Playwright 가 좋다고 얘기하네요.

   Playwright 한표요

   Cloudflare 의 HTMLRewriter 종종 씁니다
"
"https://news.hada.io/topic?id=7287","Stable Diffusion은 지금까지 나온 것중 가장 중요한 AI Art 모델임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Stable Diffusion은 지금까지 나온 것중 가장 중요한 AI Art 모델임

     * DALL·E 2 나 MidJourney 와 품질이 비슷하지만 '오픈소스'
     * 이미 Google Colabs 에서 실행하거나 Figma 플러그인들이 만들어 졌음
     * MidJourney는 Stable Diffusion과 결합하는 시도를 하기도 했음
     * 기존에 나왔던 DALL·E Mini나 Disco Diffusion 같은 오픈소스들 보다 훨씬 품질이 좋음
     * Dreamstudio를 통해서 손쉽게 이미지 생성 가능 : 200장까지 무료, 그 이후 장당 £0.01(DALL·E 는 $0.03)
          + 곧 다른 이미지에 프롬프트를 추가하여 다른 이미지를 생성하는 기능 추가 예정
     * 오픈소스라는 장점을 살려서 다양한 곳에서 이용되기 시작
          + Outpainting + Inpainting 콜라쥬
          + 잡지 커버 디자인, 만화 그리기, 애니메이션 만들기
          + Img2Img
     * Stable Diffusion을 만들고 있는 Stability.AI 의 Emad Mostaque 는 이런 말을 했음

     우리가 더 빠르고, 더 좋고, Specific한 모델을 출시 함에 따라 품질은 점점 좋아질 것
     이미지 뿐만 아니라, 다음 달엔 오디오, 그리고 나서는 3D 와 비디오를 출시 예정
     언어, 코드 등 더 많은 모델을 훈련 중

   데모모델 속도가 빠르네요. 실사용 할 때도 이정도 속도라면, 이용 범위가 대단할 것 같습니다.
   한글로도 테스트 해 봤는데 사람 얼굴이 깨져서 좀 무서웠던 부분이 있습니다.

   Stable Diffusion - DALL-E 와 비슷한 Text-To-Image 오픈소스
   Lexica - 5백만장 이상의 Stable Diffusion 생성 이미지 검색
"
"https://news.hada.io/topic?id=7208","TikTok, 앱내에서 DALL-E 같은 Text-To-Image 생성기 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              TikTok, 앱내에서 DALL-E 같은 Text-To-Image 생성기 제공

     * ""AI Greenscreen"" 이라는 이미지 생성기능을 제공 시작
     * 비디오의 배경화면으로 사용 가능
     * DALL-E/MidJourney 등에 비해서는 매우 기본적인 수준의 이미지 생성

   누군가 이런거 할거라고 생각했는데, 틱톡이 참 빠르게 잘하네요.

   Pew 리서치가 조사한 2022년 미국 10대들의 소셜 미디어 선호도
   이 글에서도 틱톡이 정말 잘하고 있다고 얘기하는데, 확실히 뭔가 변화가 빨라요.
"
"https://news.hada.io/topic?id=7182","Learning Patterns - 웹 앱 설계를 위한 패턴들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Learning Patterns - 웹 앱 설계를 위한 패턴들

     * 디자인 패턴 및 웹 컴포넌트 패턴 설명을 웹 사이트 및 무료 e북으로 제공 (435p PDF)
       → 바닐라 자바스크립트 & React
     * CodeSandbox를 이용한 실전 예제
     * 애니메이션으로 패턴 설명

패턴들

     * Design Patterns : Singleton, Proxy, Provider, Prototype, Observer, Module, Mixin, Hooks, Factory, Compound, Command,..
     * Rendering Patterns : CSR, SSR, Static, Incremental Static Generation, Progressive Hydration, Streaming SSR, Islands Architecture,..
     * Performance Patterns : Static/Dynamic Import, Import on Visibility/Interaction, Route Based Splitting, Bundle Splitting, RPRL, Tree Shaking, Preloadk, Prefetch, List Virtualization,..

   간단히 이해하기에는 정말 좋은데 잘못된 정보도 간혹 있어서 다른 자료도 같이보면서 스터디하면 좋더라구요

   진짜 essential한 항목들만 있네요. 보고 배우기 정말 좋은것 같습니다.
   좋은 기사 감사합니다.

   3번째 항목에 애니메이션인데 오타가 있네요
"
"https://news.hada.io/topic?id=7283","존 카맥이 산만함을 피하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           존 카맥이 산만함을 피하는 방법

     * 다른 사람들처럼 산만한 것들에 많은 영향을 받음. 그래서 AI 작업을 진지하게 시작하고 나서 바꾼 것들
     * Meta VR일은 일주일에 하루만 하며, 그날 외에는 Meta의 노트북을 차고에 둠
     * AI작업 PC에서 트위터 DNS 경로를 제거하고, iOS 기기에서는 스크린타임을 켜둠
     * 매일 오디오북을 들으며 4마일을 걸음. 너무 더워서 아침에 하는 것으로 변경

   존카멕도 걷는군요.
   https://youtu.be/a9p3Z7L0f0U

   와~!!!

   존 카맥 정도 되는 사람도 이런 고민을 하는게 놀랍네요

   저도 그래서 공유를 ㅎㅎ 그나 우리나 똑같..!!

   존 카맥의 새로운 AGI회사 Keen Technologies, 260억 투자 받아
"
"https://news.hada.io/topic?id=7175","O&O AppBuster - 윈도우 10/11 기본 앱 삭제 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  O&O AppBuster - 윈도우 10/11 기본 앱 삭제 도구

     * 윈도우에 기본 설치된 앱들을 쉽고 빠르게 삭제 및 재설치해주는 도구
     * 시스템 복구 포인트 설정해서 변경에 대해서 Undo 가능
     * 포터블 버전이라 설치 필요 없음
     * 개인 사용자 무료

   오픈 소스가 아닌 건가요? 그렇다면 영 신뢰하기 어려운데... 오픈 소스로 비슷한 역할을 하는 것들은
     * privacy.sexy
     * Windows10Debloater

   등이 있고, 아예 ISO의 형태로 배포되는 Windows 10 AME도 있습니다.

   오! 기본앱 삭제하려면 제어판이 아니라 설정에서 삭제해야하는데 거긴 스토어 앱이랑 아닌 거랑 섞여있다보니까 포맷 직후 아니면 찾기가 힘들더라고요. 잘 쓰겠습니다. 무엇보다 포터블!ㅎㅎ

   같은 회사의 앱으로 ShutUp10++ 도 있습니다.
   https://www.oo-software.com/en/shutup10
   윈도우의 각종 보안 설정 및 Telemetry 에 대해서 상세 제어 기능을 제공합니다.
"
"https://news.hada.io/topic?id=7271","z-index:10000 를 대체하는 top layer","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     z-index:10000 를 대체하는 top layer

     * <dialog> 또는 Pop Up API (popup 속성) 이용
     * 브라우저의 document 위에 있으므로 Z-index 나 DOM구조 신경쓸 필요 없음
     * 나타나는 순서대로 스태킹 됨(맨 마지막이 맨 위, 제거후 다시 추가하면 맨위로)
     * 각 엘리먼트별로 ::backdrop 이용해서 뒷면 제어 가능
     * Pop Up API : popup=auto|hint|manual, popuptoggletarget/popupshowtarget/popuphidetarget
"
"https://news.hada.io/topic?id=7237","애플, 자가 수리 서비스를 맥북으로 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         애플, 자가 수리 서비스를 맥북으로 확장

     * 아이폰에 이어서 M1 칩 맥북에어/맥북프로 제품군에 대한 Self Service Repair 시작 (8/23부터)
     * 디스플레이, 탑케이스(배터리포함), 트랙패드 등 부품을 구매가능하고, 자가 수리를 위한 상세 가이드 제공
     * $49에 수리킷 렌탈도 가능

   국내도 들어왔으면 좋겠네요.

   애플, 셀프 서비스 수리 프로그램 발표
   애플, 미국내에서 수리 셀프 서비스 시작
   애플 아이폰 셀프 서비스 수리 키트 리뷰

   아이폰 보다는 수리 키트가 간단한가 보네요. 렌탈료가 조금 저렴합니다;;
"
"https://news.hada.io/topic?id=7169","맥킨지의 2022년 여름 추천도서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           맥킨지의 2022년 여름 추천도서

     * 매년 여름에 발표하는 분야별 추천 도서 리스트
       → 10개 분야 총 136권
     * 최고 추천 도서 5권
          + Citizens: Why the Key to Fixing Everything Is All of Us
          + How to Avoid a Climate Disaster (빌게이츠, 기후재앙을 피하는 법)
          + Leadership: Six Studies in World Strategy
          + Liberalism and Its Discontents
          + Think Again (싱크 어게인 : 모르는 것을 아는 힘)

카테고리

     * 전기 및 회고록
     * 비즈니스 경제학
     * 소설, 시 및 수필
     * 역사
     * 개인 개발
     * 정치 및 정부
     * 심리학
     * 공중위생
     * 과학 기술
     * 직장 문화

   한국 번역서가 있는지 자동으로 확인 가능한 방법이 있을까 궁금해졌습니다
"
"https://news.hada.io/topic?id=7296","오픈소스가 재정적 후원받는 방법과 장점/단점/사례 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     오픈소스가 재정적 후원받는 방법과 장점/단점/사례 정리

     * 도네이션 버튼 : 달기만 하면 끝. 별도 노력이 없는한 많은 돈은 안됨. Stripe/Paypal
     * Bounties : 회사들이 해결 필요한 버그들 수정. Bountysource, Gitgoin, GitHub Bug Bounty,..
     * Sponsorware : 어느정도 이상의 스폰서를 받고 오픈소스로 공개
     * 크라우드펀딩(1회성) : 특정 아이디어를 구현하기 위해 펀딩받기
     * 크라우드펀딩(반복) : Patreon, Salt, OpenCollective, Flattr,..
     * 책과 머천다이즈 : 인기있는 특정 도메인에 대한 전문가라면..
     * 광고와 스폰서십 : 많은 사용자가 있다면 광고주들에게 스폰서십 판매 가능. CodeFund/GitFund/Hoodie,..
     * 프로젝트 작업을 하도록 회사에 고용 : 특정 오픈소스를 많이 사용 하는 회사들이 종종 고용. 회사일50%+오픈소스작업50% 등으로 분할 하기도.
     * 현재 직장에서 프로젝트 시작 : 많은 오픈소스들이 직원들의 사이드 프로젝트로 시작. 회사의 오픈소스 정책을 명확히 알아둘 것. Facebook과 React, Google과 Go, Mozilla와 Rust,..
     * Grants : 상환이 꼭 필요하지 않은 보조금. 회사/재단/정부등 다양한 곳에서 가능
     * 컨설팅 : Baroque, Neighbourhoodie, Varnish Moral License
     * 유료 지원 : 코드는 무료지만, 지원은 유료. Fody, Prism, Redhat, Tidelift 유료 구독
     * SaaS : 코드는 오픈소스고 유료 서비스를 별도로. Discourse, Ghost, GitLab, Moodle, Sentry, Travis CI,..
     * Copyleft + Paid License : Metafizzy, MySQL, Qt, SQLite
     * Open Core : 주요 코드는 오픈, 별도 기능들은 유료료. GitLab, Caddy, Docker, Elastic, Sidekiq,..
     * 재단 & 컨소시엄 : Linux, Node.js, Python, Ruby Together, Signal,..
     * 벤처캐피탈 : 별도 회사를 만들어 투자받음. Confluent, Gatsby, Meteor, NodeSource, Npm, OSS Capital,..
     * 제한 라이센스 : BSL(MariaDB), Fair Source(Sourcegraph), License Zero, Markdown Monster,..
"
"https://news.hada.io/topic?id=7219","아메리칸 에어라인, Boom Supersonic의 Overture 비행기 20대 구매 계약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           아메리칸 에어라인, Boom Supersonic의 Overture 비행기 20대 구매 계약

     * Overture는 최대 마하 1.7의 속도로 65~80명의 승객을 태울 수 있음
       → 물 위에선 기존 비행기의 2배 속도, 땅위에선 20% 빠름
     * 4250해리(7871킬로미터) 까지 비행 가능
     * 전세계 600개 이상의 노선을 절반의 시간만에 효율적으로 비행 가능
     * 2025년에 출시예정이고, 2029년에 첫 승객을 태울 예정
     * AA는 20대 구매를 위한 환불 불가능한 보증금을 지불했으며, 추가로 40대를 더 구매가능한 옵션을 체결

   왜 땅 위와 물 위에서 속도가 다르죠?

   소닉붐으로 인한 소음때문에 내륙과 해양에서의 운행 제한속도가 달라서 그런게 아닐까요?

   아하. 감사합니다.

   퇴역한 콩코드가 생각나는데..
   초음속 여객기 시대 '퀀텀 점프' ...런던-뉴욕 3시간 30분에 비행
     * 美 붐 수퍼소닉, 첨단 항공기 모델 공개...2026년 첫 비행
     * 영국 ‘2022 판베러 에어쇼’에서 초음속 여객기 '오버추어'
"
"https://news.hada.io/topic?id=7211","애플, 베트남에서 애플워치/맥북 생산을 검토중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       애플, 베트남에서 애플워치/맥북 생산을 검토중

     * 애플 공급업체인 Luxshare/Foxconn이 베트남 북부에서 애플워치 테스트 생산을 시작
     * 베트남은 이미 중국 이외의 지역중에서 가장 중요한 애플의 생산 허브로, iPad/AirPods를 포함 다양한 제품을 생산중
     * 애플 워치는 매우 정교해서 작은 케이스에 많은 부품을 넣기위해 고도의 기술이 필요
       → 베트남이 기술 제조 부문을 강화하려고 하고 있어서, 애플워치 생산은 베트남에게 좋은 일이 될것
     * 애플은 상하이의 COVID 락다운 때문에 공급망이 중단되면서, iPad 생산을 베트남으로 계속 이전했음
     * 또한, 베트남에 HomePod 생산라인 구축을 위해서도 논의중
     * 맥북에 대해서도 애플은 베트남에 테스트 생산라인 구축을 요청했다는 관계자의 소식도 있음
     * 하지만, 대규모 생산라인 이전은 매우 느리게 진행되고 있음. 노트북 생산은 큰 공급망이 필요하기 때문. 현재 이 공급망은 중국중심이고 가격경쟁력이 높음.
     * 닛케이 아시아가 내부 소식통을 통해서 확인했는데, 애플은 이 관련 질의에 응답하지는 않음

   유료기사라 전문은 웹아카이브에서 보세요 https://archive.ph/pUZc3#selection-2651.0-2651.217

   유료기사라 웹아카이브에서 보라는 게 무슨 뜻인가요? 상단의 링크를 눌러도 결제 없이 전체 글이 잘 보이는 듯 해서요.

   아마도 첫 기사라 보이시는듯 해요! 한달에 한개인가 무료일겁니다

   그렇군요! 그럼 다른 질문인데요, @xguru 님을 비판하려는 의도는 아니고 순수하게 잘 몰라서 드리는 질문입니다: 웹아카이브를 통해서 유료기사를 보는 것은 법적, 윤리적으로 문제가 없는건지 궁금합니다. 댓글을 보고 '잘 모르지만 그렇게 우회해서 보면 안될것 같은데'라는 느낌이 들어서요.

   네 사실 이게 좀 애매한데요.

   이런 사이트들이 쿠키 기반으로 막아두고 있고 쿠키를 삭제하면 보이는 거라서 요런식으로 종종 공유하는듯 합니다. 구글검색 순위에 오르기 위해서 봇에는 무료로 열려있는거니 괜찮은거 아니냐? 라고 생각하는듯 해요.

   생각을 하면 할 수록 제 생각을 정리하기가 힘드네요. 한 번 생각하면 나쁜 것 같고, 또 한 번 생각하면 괜찮은 것 같기도 하고.
   처음부터 유료 컨텐츠인 IT 뉴스 아웃스탠딩의 기사를 아카이빙해서 보는건 나쁜 것 같고, 일정 개수의 아티클만 볼 수 있는 미디엄 아티클을 시크릿 크롬으로 보는 건 또 괜찮은 것 같고.

   명확한 기준을 잡기가 어렵네요.

   실제로 바로 그 점을 이용하는 12ft Ladder와 같은 페이월 우회 웹사이트도 있지요.
"
"https://news.hada.io/topic?id=7242","방망이 깎는 노인, 아니 특허를 깎는 구글: dropout 특허는 10년째 진행중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             방망이 깎는 노인, 아니 특허를 깎는 구글: dropout 특허는 10년째 진행중

     * Dropout은 딥러닝 모델의 과적합(overfitting)을 해결하기 위한 학습방법
     * 2012/2014년 두개의 논문으로 세상에 공개되었으나, 특허등록 절차는 아직도 10년째 진행중
       → 구글이 맘에 드는 특허를 받기 위해 계속 새로운 절차를 진행하고 있음 : 총 4개 특허로 3개는 등록, 1개는 심사중
     * 미국 출원 절차에 대한 설명과 구글이 특허를 계속 출원하는 이유
     * 한국 특허법 상 유사제도: 임시출원제도 및 분할출원 제도
"
"https://news.hada.io/topic?id=7223","Show GN: 리그오브레전드 전적 알림 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 리그오브레전드 전적 알림 앱

   주요 기능
     * 친구의 게임이 끝나면 바로 승리, 패배, 강등, 승격 알림이 옵니다
     * 내 전적에 댓글, 좋아요가 달리면 알림이 옵니다 (내 계정 등록 시)
     * 내 계정 팔로워가 많아지면 자동으로 하이라이트 영상을 만들어 줍니다 (게임 종료 후 2분 이내)

   POG를 만든 이유
     * 친구들의 전적을 캡쳐 후 단톡에 올려 장난치는 게 재미있더라고요
     * 그래서 친구의 게임이 끝나면 자동으로 소식을 받을 수 있게 만들었어요
     * 전적에 댓글, 좋아요를 달 수 있어요
     * 친구들과 같이 게임 이야기를 나눌 수 있는 공간이 되었으면 합니다

   이용 방법
     * 내 친구들의 롤 계정을 팔로우하세요
     * 내 롤 계정을 등록하세요
     * 푸시 알림을 꼭 켜야 더 재미있습니다

   안드로이드는 없나요 ㅠㅠ

   안드로이드도 개발 중입니다!
   다만 빠른 론칭을 위해서는 아래 2가지 기능 중 하나는 포기하고 론칭해야 할 것 같은데요
   혹시 어떤 기능이 더 필요하세요?
    1. 친구 전적 알림(강등, 승격, 승리, 패배)
    2. 내 하이라이트 자동 생성

   그리고 이메일 남겨주시면 론칭 시 연락드릴게요!

   우왕 앱이 너무 예뻐요!!

   좋게 봐주셔서 감사합니당 :)
"
"https://news.hada.io/topic?id=7177","Microsoft, Fluent Emoji 1538개를 오픈소스로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Microsoft, Fluent Emoji 1538개를 오픈소스로 공개

     * GitHub 와 Figma 를 통해 사용 가능
     * 컬러 벡터, 3D, Flat, 흑백 버전등 여러 버전을 포함
     * SVG 와 PNG 포맷으로 공개
     * 상표권 문제 때문에 Clippy, 국기, 비디오 게임, technologist 등은 미포함
"
"https://news.hada.io/topic?id=7170","인스타그램/페북은 인앱브라우저에서 하는 모든 일을 추적가능합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  인스타그램/페북은 인앱브라우저에서 하는 모든 일을 추적가능합니다

     * iOS 인스타그램/페북앱은 모든 외부링크를 인앱 브라우저를 통해 브라우징
     * 이때 브라우징하는 모든 사이트에 JavaScript 코드를 인젝션
       → pcm.js - 주로 이벤트 추적. 사용자의 텍스트 셀렉션 이벤트도 추적함
     * 웹사이트에서는 추적 코드가 있는 것처럼 태그를 미리 넣어두면 추적을 미리 방지하는 것도 가능

   이 글에 링크로 첨부된 ""Let websites framebust out of native apps"" 글에서는
   기존 웹사이트가 Frame 으로 삽입되는 것을 방지하는 X-Frame-Options 헤더를 애플/구글의 인앱브라우저가 인식하면 사용자의 웹브라우저로 열도록 변경해야 한다는 주장이 있습니다.
"
"https://news.hada.io/topic?id=7256","차세대 아이폰 디자인 해보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            차세대 아이폰 디자인 해보기

     * 각종 부품을 드래그 앤 드랍하여 차세대 아이폰을 맘대로 디자인
     * 카메라, 볼륨/무음/전원 버튼, 로고 등 오리지널 디자인 부품들
     * Type-C 포트, 안드로이드 로고, 클릭 휠, 안테나, 조이스틱, DPad등 이상한 부품들도 가능
     * 다 작성되면 360도 회전하는 비디오로 생성하여 다운로드 가능

   재밌네요 ㅎㅎ

   어째 아무것도 없는 저 디자인이 차세대 아이폰이 될 것만 같네요.
   모든 포트, 버튼 사라지고. 전면 카메라는 디스플레이 뒤에 숨고, 후면은 카메라와 로고만 남겠죠.
   충전은 무선으로만..ㅎ
"
"https://news.hada.io/topic?id=7288","JSON Visio - JSON 데이터를 그래프로 시각화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    JSON Visio - JSON 데이터를 그래프로 시각화

     * 왼쪽에 JSON 에디터가 있고, 이곳에 JSON 데이터를 넣으면 오른쪽에 그래프 뷰로 데이터 구조를 그려주는 유틸입니다.
     * 위 작업은 JSON을 넣자마자 Seamless하게 처리되며. 웹, 혹은 다운로드. 또는 웹에 임베드하여 사용할 수 있습니다.

   유용한진 모르겠는데 이쁜건 확실하네요

   안들어가져용

   https://jsoncrack.com/ 으로 변경된 것 같습니다 ' ㅁ'!

   헉. 오전엔 들어가졌는데 지금은 안되네요. 터졌나...
"
"https://news.hada.io/topic?id=7196","Cloud.gov - 미국 정부기관을 위한 클라우드 도움 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Cloud.gov - 미국 정부기관을 위한 클라우드 도움 서비스

     * 정부 기관들이 최신 클라우드 서비스를 쉽게 구매, 구축, 승인받을 수 있도록 지원하는 PaaS
     * 미국 연방정부 조달청(GSA)이 직접 운영
     * FedRAMP(연방정부 위험 및 인증관리프로그램) 인증을 받아서, 이 위에서 구현시 자동으로 연방 정부 규정을 준수
       → ""Compliance as a Service""
     * Sandbox 환경은 무료로 제공(연방 이메일 주소만 있으면 가능)
     * 프로토타이핑 패키지($1500/월), 실 서비스용 : FISMA Low($2070/월), FISMA Moderate($9300/월)
     * 지원 스택
          + 어플리케이션 호스팅 OS : 리눅스 (64bit ABI)
          + 어플리케이션 런타임 : Go, Java, .NET Core, Node.js, PHP, Python, R, Ruby, Stack HTML+JS+CSS, 64bit Linux Binary
          + DB : MySQL , Oracle, PosgreSQL
          + ElasticSearch, Redis, S3

   GOV.UK PaaS - 영국의 공공 서비스를 위한 클라우드
   SGTS - 싱가폴 정부 테크 스택
"
"https://news.hada.io/topic?id=7249","언어별로 구현해본 알고리듬 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           언어별로 구현해본 알고리듬 모음

     * 정렬, 그래프 탐색, 머신 러닝, 문자열, 검색, 동적 프로그래밍, 자료구조, 수학, 암호화, 디지털 이미지 처리 등
     * 플레이그라운드 에서 바로 실행 가능
     * 각 프로그래밍 언어별 Repo로 구성되어 언어 학습자들에게 유용
       → Python, Java, Rust, C++, Go, C#, Scala, Dart, PHP, Kotlin, Ruby, R, Jupyter, Swift, Haskell, Julia, OCaml, Elixir, Lua, Elm,..
"
"https://news.hada.io/topic?id=7183","시스템 설계 인터뷰 전에 알아둬야 할 알고리듬들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       시스템 설계 인터뷰 전에 알아둬야 할 알고리듬들

     * GeoHash, QuadTree : 위치기반 서비스
     * Consistent Hashing : 서비스 클러스터 안에서 로드밸런싱
     * Leaky Bucket / Token Bucket : Rate Limiter
     * Trie : 검색 자동 완성
     * Rsync : 파일 전송
     * Raft/Paxos : 컨센서스
     * Bloomfilter : 비싼 룩업 제거
     * Merkle Tree : 노드간 불일치 식별
     * HyperLogLog : 유니크한 값 빠르게 세기
     * Count-Min Sketch : 아이템 빈도 추정
     * Hierarchical Timing Wheels : 잡 스케줄러
     * Operational Transformation : 협업 편집

   감사합니다.

   이건좀 공부해 봐야겠네요

   공부할 거 많네요...

   잘 알고 있고 프로덕션에서 구현해봄: Consistent Hashing, Leaky Bucket
   잘 알고 있고 설명할 수 있음: Trie, Bloomfilter
   알지만 정확히 설명할 자신은 없음: Raft/Paxos, Merkle Tree, Operational Txform
   잘 모름: GeoHash, QuadTree, HyperLogLog, Count-Min Sketch, Hierarchical Timing Wheels
"
"https://news.hada.io/topic?id=7259","Crawlee - 웹스크래핑 & 브라우저 자동화 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Crawlee - 웹스크래핑 & 브라우저 자동화 라이브러리

     * Node.js용 빠르고 안정적인 크롤러 작성 라이브러리
     * Puppeteer & Playwright(헤드리스 브라우저 크롤링) + CheerIO/JSDOM(Raw HTTP 크롤링)
     * 브라우저 헤더 & TLS 핑거프린트를 모방하여 실제 트래픽처럼 보이게 함
     * 프록시 로테이션 자동화 로 대규모 확장 가능
     * 작업은 큐 처리되며 파일, 스크린샷, JSON 결과등을 쉽게 파일 또는 DB에 저장
"
"https://news.hada.io/topic?id=7263","Oven - Company behind Bun","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Oven - Company behind Bun

     * Oven은 새로운 JS런타임 Bun을 만들고 있으며, 클라이너 퍼킨스로부터 $7m 펀딩을 받음
     * 앞으로 백엔드 & 프론트엔드 JS앱을 위한 엄청빠른 서버리스 호스팅 & CI를 만들어 제공할 예정
          + 유명 프레임워크들 지원 : Next.js/Vite/SvelteKit/SolidStart, Express/Fastify/NestJS
     * 전세계 Edge 서버를 구축하고 직접 호스팅할 것
     * 시스템 엔지니어 구인 중 (Zig & C++)

   Bun - JavaScriptCore 기반의 빠른 JavaScript 런타임/트랜스파일러/NPM 클라이언트
"
"https://news.hada.io/topic?id=7185","Tour de Source - 오픈소스 코드를 설명하는 뉴스레터 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Tour de Source - 오픈소스 코드를 설명하는 뉴스레터

     * 2주 간격으로 발행하는 뉴스레터
     * Sourcegraph 서비스를 활용하여 코드를 실행하며 볼 수 있음
     * 현재까지 나온 포스트
          + How TypeScript ESLint Works
          + How Caddy Works
          + How Codesearch.ai Works
"
"https://news.hada.io/topic?id=7168","Mailing - React로 이메일 작성하고 보내기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Mailing - React로 이메일 작성하고 보내기

     * RoR의 Action Mailer 에서 영향받은 오픈소스
     * React 컴포넌트로 이메일 템플릿 만들기
     * MJML로 어떤 메일 클라이언트에서든 잘 보이게
     * 실시간 리로딩 되는 프리뷰 서버
     * 개발 모드에서는 전송 대신 브라우저에서 메일 오픈
     * next.js, redwood.js, remix 등과도 잘 동작

   MJML - 반응형 이메일 프레임워크 오픈소스
"
"https://news.hada.io/topic?id=7171","세계 Excel 챔피언십, ESPN에서 중계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        세계 Excel 챔피언십, ESPN에서 중계

     * ""Excel as eSports"" 를 표방하는 Financial Modeling World Cup 이 주관하는 엑셀 대회
       → 실제 사례 데이터를 가지고 엑셀로 최대한 빠르게 문제를 해결하는 대회
     * 주로 유튜브로 중계를 했는데, 이번 ""All-Star Battle""은 ESPN을 통해서 미국 전역에 중계됨
     * ESPN은 프리스비, 종이비행기, 에어기타(기타 연주를 흉내내는 대회) 챔피언십등 틈새 스포츠의 중계를 종종 하지만, Excel Esports는 처음

   Excel 월드컵 FMWC 2021 최종 승자 발표
"
"https://news.hada.io/topic?id=7192","Stable Diffusion - DALL-E 와 비슷한 Text-To-Image 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Stable Diffusion - DALL-E 와 비슷한 Text-To-Image 오픈소스

     * Latent Diffusion 모델을 LAION-5B 데이터베이스의 512x512 이미지에 대해 학습
     * 구글의 Imagen과 비슷하게 CLIP ViT-L/14 텍스트 인코더 사용
     * 경량이어서 10GB 이상의 VRAM을 가진 GPU 1개로도 동작
     * Stability AI 와 LAION 연구자들이 협업 및 후원

   현대 미술 일러스트 같은 부분에서는 DALL-E 2나 MidJourney 보다 더 결과물이 좋다고 합니다.
   개발자 Discord 에서 말하기로는 M1 맥에서도 실행된다고 하네요.
   일단 하드웨어 제약이 적어서, 누구나 쉽게 쓸 수 있다는게 큰 강점이 될 듯.
   물론 오픈소스긴 하지만, 아직은 학술용으로만 접근 가능합니다.

   직접 DALL-E 같은 AI 이미지 생성기 운영하기
   Imagen - 구글의 text-to-image diffusion model
   LAION-400M - 4억개짜리 이미지-텍스트 쌍 데이터셋
"
"https://news.hada.io/topic?id=7261","GoJq - 순수 Go 코드로 구현한 jq","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GoJq - 순수 Go 코드로 구현한 jq

     * 'sed for JSON' 이라 불리는 jq를 대부분 호환하는 Go 기반 구현체
     * 라이브러리 형태로 자신의 Go 코드에 임베드하여 이용 가능
     * jq의 일부 버그를 수정하고, YAML 입출력 기능을 추가
"
"https://news.hada.io/topic?id=7190","Horizon Linux - 닌텐도 스위치 게임을 실행할 수 있게 패치된 arm64 리눅스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Horizon Linux - 닌텐도 스위치 게임을 실행할 수 있게 패치된 arm64 리눅스

     * 닌텐도의 Horizon OS 시스템 콜을 리눅스 위에 구현하도록 arm64용 리눅스 커널을 패치
     * 처음엔 맥에서 스위치 게임을 유저모드에서 실행하려고 시작했지만, 커널 패치 말고는 힘들어서 이쪽으로 선회
     * 모든 arm64 하드웨어에서 네이티브하게 스위치 게임을 실행하려는 시도
       → 오픈소스 닌텐도 스위치 커널인 Mesosphere와는 다른 것
     * Yuzu 프로젝트를 가져와서 Kerner/CPU 에뮬레이션 부분을 제거한 ""Mizu""를 작성
     * 아직 완성단계는 아니지만, 첫번째 상용 게임인 ""뿌요 뿌요 테트리스"" 실행에 성공(매우 느림)
       → 맥북에서 가상화된 Fedora Rawhide 버전에 커널을 패치
       → Yuzu의 GPU 가속이 OpenGL 4.6을 필요로 하는데, 아직 맥 가상머신에서는 4.1~4.3밖에 지원 안되어서 GPU가속은 어려운 상태
       → 가장 저렴한 OpenGL4.6 지원 하드웨어인 Jetson Nano 에서도 실행 성공

   몬스터 헌터 더블크로스 덕분에 자주썼던 Citra와 Yuzu를 보니 반갑네요

   Yuzu - 닌텐도 스위치 에뮬레이터
"
"https://news.hada.io/topic?id=7204","Gen Z는 베이비붐 세대의 20대 시절보다 구매력이 86% 낮음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Gen Z는 베이비붐 세대의 20대 시절보다 구매력이 86% 낮음

     * MZ세대는 베이비붐 세대가 20대에 지불했던 것보다 100% 많은 비용을 ""집에 지불""하고 있으며, 기름값을 57% 더 내고 있음
     * 급여수준에 대한 표준 생활비 자체가 문제. 1970년 이후로 임금이 오르긴 했지만, 물가상승률을 따라잡지 못하고 있음
     * 1970년 평균소득 $24600 에서 2000년 $38700으로 30년동안 57%가 인상되었지만, 소비자 물가지수(CPI)는 38.8에서 172.2로 4배 이상 증가했음
          + 이 경향은 시간이 지날수록 악화, 2000~2010년 사이엔 임금은 7.5% 줄었지만, CPI는 25% 증가
     * 소득이 생활비를 따라 잡을 수 없게 되어, 젊은이들이 돈을 저축하고 삶의 단계에 맞는 일반적 구매를 할 수 있는 능력이 저해됨
     * Z세대는 베이비붐 세대의 20대 시절보다 구매력이 86% 낮음
          + 2022년 현재, 1970년 대비 CPI는 500% 인상되었지만, 임금은 80% 밖에 증가하지 않았음
     * 미국의 주택 가격은 지난 몇년간 급격히 상승해서, 2022년 현재 끓는 점에 도달
          + 최근의 인플레이션과 물가상승으로 연준은 금리를 여러번 인상했으며, 많은 미국인들이 주택 구입 비용을 감당할 수 없게 되었음
          + 그렇다고 주택이 이전에는 저렴했다는 것은 아님. 감당하기 어렵게 오르는 경향이 있었음
     * Z세대는 임대보다 주택소유를 선호하지만, 1970년대에 베이비붐 세대보다 훨씬 주택구입이 어려움
          + 2022년의 중간 주택가격은 $376000(4.9억)으로 1970년의 거의 2배임
     * 높은 주택 비용과 증가하는 이자때문에 주택 대출보다는 저렴한 렌트에 거주할 수 밖에 없음
          + 렌트비용도 1970년에 비해서 150% 상승했고, 렌트에 비용을 많이 쓰면 집 마련이 어려움
          + 2005~2010년 사이의 대공황 기간에도 주택가격은 하락했지만, 렌트비용은 하락하지 않았음
     * 이런 환경이 Z세대에게 끝없는 노력을 요구
       → 점점 더 비싸지는 집을 위해 저축하려고 노력하면서, 이상하게도 높은 임대료를 감당해야함

   너무나도 안타깝네요…

   지방은 일자리가 없거나 연봉이 낮고, 이직의 풀이 좁다고 생각하여 서울로 왔습니다.
   생활비용을 빼고 나면 지방 일자리를 선택하는 거랑 큰 차이가 없거나 더 낮아요.
   제 벌이로 수도권 집을 살 수 있을 것이라는 생각이 들지 않습니다. 다른 업종은 더 심하면 심했지 덜하진 않을 것 같아요.

   청년층/저소득층과 임대주 사이에 뭔가 개입이 필요한 상황 입니다.
   저 사는 지역 뉴스도 아침 꼭지 부터, 저렴한 주택의 씨가 마르고 있다는 내용이더군요. 정부나 대기업에서 일종의 펀드를 마련해서 해소해야만 할 것 같습니다. 이대로는 정말 생태계의 유지가 불가능한게 눈에 보일 정도에요.

   아이러니하게도 재개발을 하게 되면서 갈 곳이 계속 줄어들더라고요...

   ㅠㅠ

   ㅠㅠ

   과연 어떻게 해결 할 수 있을지...해결 가능한 것인지....

   미국 통계이긴 한데, 한국이라고 별 차이는 없을것 같아요.
   정말로 저 사회생활 시작할 때랑 비교해보면, ""모든게 다 오르는데 급여만 안 오른다""는게 맞는 얘기인듯.
"
"https://news.hada.io/topic?id=7162","Solidity 취약점 - Head Overflow Bug in Calldata Tuple ABI-Reencoding 번역","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Solidity 취약점 - Head Overflow Bug in Calldata Tuple ABI-Reencoding 번역

   solidity v0.5.8 ~ 0.8.15 까지 존재하는 버그가 있었는데 v0.8.16에 개선되어 릴리즈 되었습니다.

   핵심 부분 위주로 번역 및 정리하였고, 예제 코드도 직접 돌려보았습니다.

   요약하자면 튜플에 동적 크기의 타입이 존재하고, 마지막 구성요소가 정적크기타입인 경우, ABI coder v2버전을 사용하여 컴파일 했을 때 특정부분을 0값으로 덮어 씌우는 이슈가 있었습니다.

   ABI coder v2 는 0.8 버전 부터는 기본으로 사용하고 있습니다.

   배포한 컨트랙트 구조가 위와 같은 취약점이 발생할수 있는 코드인지 파악하시고 개선하시면 좋을듯 싶네요.
"
"https://news.hada.io/topic?id=7251","올해 DEVIEW를 내년 상반기로 연기합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        올해 DEVIEW를 내년 상반기로 연기합니다

     * 올해 연말에 진행 예정이었던 DEVIEW 컨퍼런스를 내년 상반기로 연기
     * 개발자분들과 조금 더 안전하게 오프라인에서 소통할 수 있는 시기를 고민
"
"https://news.hada.io/topic?id=7260","트위터의 전 보안 책임자, 회사가 봇과 안전에 대해 거짓말하고 있다고 내부 고발 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              트위터의 전 보안 책임자, 회사가 봇과 안전에 대해 거짓말하고 있다고 내부 고발

     * 해커였다가 사이버보안 전문가로 변신한 Peiter “Mudge” Zatko는 그 당시 CEO였던 잭 도시의 요청으로 2020년에 트위터에 합류
       → 오바마, 빌게이츠등 유명 계정들이 대규모 해킹된 사건 이후
     * 하지만 Zatko는 올해 1월에 트위터에서 해고되었으며, 이것은 회사의 취약성을 폭로한 것에 대한 보복이라고 주장
     * 그거 지난달 SEC에 고발한 내용에 의하면 트위터는 주주를 기만하고 FTC와 맺은 계약을 위반하였으며,
       새 CEO인 Parag Agrawal 은 보안 문제를 해결해야 한다는 제안을 거절했다고

고발장의 주요 내용(200페이지가 넘음)

     * 트위터의 주요 취약점은 너무 많은 직원이 중요 시스템에 접근 가능하다는 것. 트위터 직원 7천명중 절반이 사용자의 개인정보에 접근 가능하며, 세밀히 모니터링 되지 않음. 수많은 노트북들이 트위터 소스 코드를 복사해서 가지고 있음
     * 2010년 트위터는 사용자 개인정보를 보호하지 못한 혐의로 FTC와 합의했으나, 트위터는 반복적으로 '거짓 및 오해의 소지가 있는 진술'을 제공하였고 이를 위반
     * 트위터는 MAU의 5% 이하만 봇/가짜계정/스팸이라고 주장하고 있음. 그러나 Zatko는 이 계산방법이 오해의 소지가 있으며, 경영진은 스팸봇 제거보다는 사용자수를 늘리는 데에만 인센티브(최대 1천만 달러)가 있음
     * 트위터는 뉴스를 공유하고 시위를 조작하는데 핵심 도구로, 반대의견을 단속하려는 정부의 표적이 됨. Zatko의 주장에 의하면 인도 정부는 트위터에 정부 에이전트를 고용하여 트위터의 민감한 정보에 접근하게 했음

이에 대한 트위터의 답변

     * ""Zatko는 저조한 성과 및 비효율적인 리더십으로 6개월전에 해고 되었음. 그의 주장은 부정확하며 트위터와 트위터의 고객, 주주에게 피해를 주고 있음""
     * 엘런 머스크의 변호사는 이미 Zatko에 대한 소환장을 발부하여 머스크와 트위터 간의 소송에도 영향을 미치게 될 것

   엘런 머스크 소송이 재미나 지겠군요. 머스크는 이미 이걸 알고 발을 뺀걸까요 ?
"
"https://news.hada.io/topic?id=7297","Acorn - 쿠버네티스용 어플리케이션 배포 프레임워크 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Acorn - 쿠버네티스용 어플리케이션 배포 프레임워크 오픈소스

     * 하나의 아티팩트로 개발/테스트/프로덕션에 모두 사용
          + Acornfile을 작성하고, Acorn 이미지를 생성하여 OCI호환 레지스트리에 푸시
          + Acorn 이미지는 하나 이상의 도커이미지, 설정 파일, 배포 사양등을 포함 가능
          + Acorn 이미지는 모든 쿠버네티스 클러스터에서 실행 가능
     * 간단한 CLI와 강력한 API
     * 안전한 설계
"
"https://news.hada.io/topic?id=7248","Webhooks FYI - 웹훅 구현 및 사용을 위한 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Webhooks FYI - 웹훅 구현 및 사용을 위한 가이드

     * Webhook 디렉토리 : 가이드 링크, 인코딩, 타임스탬프/상위 호환성/ZDR 적용 여부 등
     * 보안 적용하기 : 1회성 인증, Shared Secret, HMAC, 비대칭키 암호화, OAuth2/JWT, mTLS, 리플레이 방지
     * 좋은 개발자 경험을 위한 조언 : Resiliency, 호환성과 버저닝, 제로 다운타임 로테이션, 멀티 URL, 문서화
     * 모범 사례 : Provider, Consumer 에 대해 각각 정리

   ngrok 제품이었군요 ㅎㅎ
"
"https://news.hada.io/topic?id=7220","ravynOS - macOS의 섬세함을 FreeBSD위에서 구현한 OS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ravynOS - macOS의 섬세함을 FreeBSD위에서 구현한 OS

     * macOS의 많은 부분을 가져옴
       → 깔끔한 디자인, 글로벌 메뉴, 쉬운 설치, 익숙한 폴더 구조, Cocoa API,..
     * FreeBSD/Linux 앱들과 일부의 Darwin 및 macOS 바이너리도 실행가능
          + Wayland를 지원하는 FreeBSD앱은 거의 그대로 또는 약간의 변경으로 동작 가능
          + Wayland를 지원하는 Linux앱은 FreeBSD의 Linux 에뮬레이션 레이어로 동작 가능
          + macOS앱중 AppKit 기반의 소스코드는 네이티브하게 빌드 및 실행 가능하게(작업 및 연구중)

   macOS를 좋아하는 편이라 신기하고 반갑긴 한데 UI 요소들은 저작권은 상관 없는 건지 궁금해지긴 하네요

   Airyx - 오픈소스 데스크탑 OS 가 이름을 바꾼 것입니다.
   독일에 Airyx 라는 회사가 있어서 이미 도메인을 사용하고 있어서 바꿨다고
"
"https://news.hada.io/topic?id=7241","Tauri vs. Electron - 실제 어플리케이션으로 비교하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Tauri vs. Electron - 실제 어플리케이션으로 비교하기

Authme라는 크로스플랫폼 2FA앱으로 항목별 비교

     * 번들 : OS의 웹뷰를 사용하는 Tauri가 훨씬 작음. 2.5MB vs. 85MB
     * 시작시간 : Tauri ~2초 vs. Electron ~4초
     * 램 사용량 :
          + 윈도우에서는 Tauri 80MB, Electron 120MB로 큰 차이 없음
          + 리눅스에서는 Tauri 80MB, Electron 쪽에 뭔가 많이 떠서 500MB 이상으로 큰 차이가 남
     * AppBackend : Electron은 Node.js 런타임을 사용하므로 JavaScript 코딩이면 되지만, Tauri는 Rust 코딩이 필요함
          + Tauri 로드맵에서는 Python, C++, Deno도 지원 예정이라고
     * 렌더링 : Electron은 윈/맥/리눅스 모두 크로미엄을 이용, Tauri는 윈(Edge WebView2)/리눅스(WebKitGTK)/맥(WebKit)
          + 브라우저별 차이가 있을 수 있어서, Tauri에서는 폴리필을 이용해야 할 경우가 있음
     * 보안 : Tauri는 매우 많은 보안 기능들을 내장하여 기본적으로 안전
     * 자동 업데이트 :
          + Tauri쪽이 더 간단. 내장 Updater가 있음(직접 업데이트 서버를 운영해야한다는 단점은 있음)
          + Electron은 electron-updater가 많이 쓰임. 장점은 GitHub 릴리즈에서 직접 바이너리를 가져오는게 가능해서 편리함
     * 개발자 경험 :
          + Tauri는 그냥 CLI만 설치하면 모든게 바로 사용 가능(핫 리로딩, 번들링, 앱 생성등)
          + Electron은 그런거 없이 프레임워크 자체만 줌. 핫 리로딩/번들링을 알아서 해야함
          + Tauri의 가장 큰 장점은 모든 웹프레임워크와 호환된다는 것

결론

     * Tauri를 선택
     * 아직 부족한 부분이 있지만, 몇년내에 Tauri팀이 Electron을 따라잡을 것
     * 특히 기대하는 것은 Deno를 백엔드로 사용가능하게 되는 것과 더 편한 자동 업데이트 및 iOS/Android 지원

   Tauri는 자체 빌드한 엔진이 아니라 시스템에 있는 webview라이브러리를 사용하는 것 같네요.

   인스톨러 용량 비교시 2.5MB vs. 85MB 이며,
   설치후는 3.64MB vs. 221MB 가 되네요.

   와 이거 좋아보여요!

   모바일 앱 지원이 정말 기대가 됩니다.

   Rustacean으로서 러스트 생태계가 커지는 건 매우 반갑네요. 맥에서 일렉트론 앱을 3개나 켜놔야 하는데 매우 맥북이 뜨겁습니다 ㅜㅜ

   Tauri - 작고 빠른 실행파일을 생성하는 데스크탑용 웹앱 프레임워크
   Tauri v1.0 릴리즈

   글 중간 보안 부분에 Electron이 Node API 풀 접근이 가능하다는 얘기가 있는데,
   이 nodeIntegration은 5.0 이후로 false가 기본 값이고, 20.0 부터는 샌드박싱 처리가 되어 Electron 도 나름 안전합니다.
   https://www.electronjs.org/docs/latest/tutorial/security
"
"https://news.hada.io/topic?id=7280","Lexica - 5백만장 이상의 Stable Diffusion 생성 이미지 검색","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Lexica - 5백만장 이상의 Stable Diffusion 생성 이미지 검색

     * Stable Diffusion 으로 생성한 이미지와 프롬프트를 검색할 수 있음
     * 특정 단어로 검색하여 나온 프롬프트에서 프롬프트 문장 일부를 클릭하여 상세히 검색해 들어가기 가능
     * 프롬프트 복사 / 이미지 URL 복사

   너무 좋네요!

   Stable Diffusion - DALL-E 와 비슷한 Text-To-Image 오픈소스

   직접 만들 필요 없이 기존 이미지를 찾아볼 수 있고, 남이 만들어본 프롬프트를 보고 배울 수 있어서 좋네요.
"
"https://news.hada.io/topic?id=7201","자동차에선 터치스크린보다 물리적 버튼이 훨씬 조작이 빠름","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    자동차에선 터치스크린보다 물리적 버튼이 훨씬 조작이 빠름

     * 스웨덴의 자동차 잡지에서 올 여름 신차 12종을 110km/h 로 달리며 조작을 테스트한 결과
     * 최신 자동차들의 스크린은 점점 거대해지고, 물리 버튼/스위치 보다는 터치스크린이 많아짐
     * 그러나, 터치스크린 내장 차들은 간단한 작업을 하는데도 2~4배 이상 시간이 소요
     * 제조사들은 이제 음성으로 조작 가능하다고 하지만, 사용하기 쉽지 않고 잘 되지도 않음
     * 테스트한 동작들은 4가지
          + 열선시트 활성화, 온도 2도 높이고, 서리 제거 장치 가동
          + 라디오 켜고, 특정 채널로 바꾸기
          + 트립 리셋
          + 조명을 가장 낮은 수준으로 맞추고, 센터 디스플레이 끔
     * BMW iX, 아이오닉 5, 벤츠 GLB, 테슬라 모델 3, 폭스바겐 ID.3, Seat Leon 등의 차를 테스트
          + 가장 높은 점수(빠른 시간내에 동작)는 Volvo v70(2005년, 터치스크린 없음)로 10초
          + 가장 낮은 점수는 MG Marvel R로 44.9초
          + 테슬라 모델3(23.5초), BMW iX(30.4초), 아이오닉5 (26.7초), 벤츠 GLB(20.2초 등)

   테슬라는 후진 기어도 없애고 있는데...

   자율주행이 보편화 되면 터치 조작하는 데에 시간이 좀 더 걸리는 건 큰 문제가 아닌 게 될지도요. 그리고 사람이 직접 조작할 일이 가능한 없게 만드는 게 기술이 지향해야 할 방향 아닌가 싶습니다.

   물리버튼은 보고 누를 필요가 없습니다.
   보고 제대로 눌렀나 확인할 필요도 없습니다.
   조작속도가 문제가 아닙니다 이건

   뭐 조만간 즐겨찾기 같은 기능이 강화되지 않을까 싶네요. 모델3 를 3년째 타고 있는데 여전히 글러브 박스 열때마다 햇갈려요 ㅋㅋ 다만 요즘 전기차들은 대부분 자동화 되어 있어서 크게 손댈 곳이 없긴 하죠.

   실험자들의 평균 나이가 궁금하네요
   연령대에 따라서 차이가 나는지도 궁금하고..

   터치만으로는 물리버튼 대비 안좋은게 명확합니다만
   물리버튼으로 돌아가기보다는
   자동으로 열선시트 켜주고 온도조절해주고 서리를 제거해주는 방향이 더 발전된 것이 아닐까 합니다.

   조금은 예전의 방식을 기준으로 평가한 것으로 보입니다.

   안전을 위해서라도.. 버튼식으로 돌아갔으면 하는 바램이 있는 1인입니다.
   조작의 시간보다도, 위치를 찾기 위해서 시선이 스크린으로 오랫동안 향한다는게 더 큰 위험인것 같아요.

   시선이 스크린으로 가야 한다는게 정말 위험한거에요.

   전투기에서도 HUD(Head-up display)에 이것저것 많은 심볼을 띄우는 이유가 Head-down display(MFD)를 보려고 조종사의 시야가 아래로 내려가는걸 최대한 막으려는 이유니까요.

   거기다가 자주 써야 하는 버튼/스위치들은 아예 조정간에 붙어 있어 손을 뗄 필요도 없고, 물리 버튼/스위치의 모양도 전부 달라서 눈으로 볼 필요가 없죠.

   맥 터치바가 머릿속에 떠오르는군요!
   운전 중 물리 대시보드를 더듬으면서 시각적인 정보 없이도 버튼을 누르는 습관이 우리에게 익숙한 점이 속도의 차이를 가져왔을 수 있을거같아요. 마치 키보드를 사용하며 익숙해지고 이전에 사용하던 2g폰 한글 자판을 보지 않고도 타이핑이 가능하던것 처럼요.(혹시 스마트폰부터 접해서 성장한 세대들은 터치 키보드도 안보고 타이핑이 가능한가요?? 궁금..)
   괜찮은 아이디어가 막 생각났는데, 만약 터치보드스크린이 평평한 단면이 아니라 버튼 모양에 따라서 굴곡이 동적으로 생기는(sf 장르의 영화에서 처럼요!) 기술이 적용되고 적절한 사용자 경험을 돕는 햅틱이 추가된다면 물리 버튼보다 한곳에 더 많은 기능을 담는 대시보드가 나올 수 있을거같군요. 닿기만 해도 화면전환이 되는게 아니라 1초 정도 머무르면 적절한 반응을 통해 안보도고 조작 가능한 느낌이랄까요?

   자동차 기능이 많아지다보니 터치스크린을 사용하는게 어쩔수 없을것 같네요.
   블랙베리폰에서 아이폰으로 바뀐것처럼요.

   저는 개인적으로 버튼식기어 방식도 싫어하는 편이라 터치는 뭔가 더 더욱 거부감이 있는 것 같아요.

   전 물리버튼이 좋아요!! 항상 그자리에 있으니까 ㅋㅋ

   원래 물리버튼이 항상 빠르고 정확했죠. 당연한 이야기구요.
   터치스크린은 안 보고 할 수 있는 거라고는 제스처 동작이 전부이기도 하고 애초에 상황에 따라 다른 UI를 띄우기 위해서 터치스크린이 사용되었지 더 빠르고 정확하라고 쓴 건 아니기도 하죠.

   근데 시속 110에서 이런 조작을 할 일이 있을까 싶네요. ㅡ.ㅡ;
   사실 운전하면 거의 아무것도 손 안 대게 되던데..
   전 물리 버튼 없는 차를 타서 그런지 그닥 공감은 안 가는 테스트네요.
"
"https://news.hada.io/topic?id=7245","Show GN: BakingSheet - Unity/C# 게임 기획 데이터를 위한 스프레드시트 스키마 작성 및 포맷 변환 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: BakingSheet - Unity/C# 게임 기획 데이터를 위한 스프레드시트 스키마 작성 및 포맷 변환 도구

   게임 기획 데이터를 스프레드시트로 간편하게 작성 및 편집하고,
   C#으로 정의된 스키마를 통해 로드하거나 포맷을 변환하여 저장할 수 있습니다.
     * C# 오브젝트를 비즈니스 로직에서 바로 사용할 수 있습니다.
     * Excel, Google Sheet, Json, CSV 포맷을 기본 지원합니다.
     * .NET 및 모든 Unity 빌드 플랫폼을 지원합니다.
     * List, Dictionary, Nested Struct 등 복잡한 구성도 깔끔하게 표현할 수 있습니다.
     * 다른 시트 간 ID 를 참조하여 관계를 표현할 수 있습니다.
     * 사용자 정의 검증 로직을 지원합니다. (에셋 경로 확인 등)

   유니티로 게임 회사 취업 준비중인데 감사합니다!
"
"https://news.hada.io/topic?id=7186","Sematic - 오픈소스 ML 파이프라인 개발 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Sematic - 오픈소스 ML 파이프라인 개발 툴킷

     * ""Prototype-to-Production ML in days not weeks""
     * 네이티브 파이썬 함수를 이용하여 ML 파이프라인 개발 및 실행
     * 파이프라인 단계별 입력/출력을 모니터링/시각화/추적하는 깔끔한 UI
     * 파이프라인을 로컬 또는 클라우드에서 실행
     * KubeFlow Pipelines 같은 도구의 대체제
"
"https://news.hada.io/topic?id=7172","Penumbra - 자연광을 기반으로 만든 색상구성표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Penumbra - 자연광을 기반으로 만든 색상구성표

     * VSCode, iTerm2 용 파일 제공
     * 태양과 하늘의 빛에 의해 자연에서 발생하는 색상들에서 영감을 받은 기본 색상을 사용
     * 일반 디스플레이들의 사용 가능한 색 공간을 최적으로 활용하면서, 각 색상들의 지각적 속성을 깔끔하게 분리. 수학적으로 균형 잡힌 색상 구성표
     * 대칭 구조의 9가지 기본 컬러로 구성
"
"https://news.hada.io/topic?id=7270","코드 골핑 팁 : JavaScript 코드 Minify 하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  코드 골핑 팁 : JavaScript 코드 Minify 하는 법

     * Javascript Golfing 이란?
     * 각 항목별로 설명을 통해 자바스크립트의 복잡성에 대해 이해를 도움
     * Arguments, Variables, Loops, Operators, Numbers, Strings, Conditionals, Arrays, Regular Expressions, Booleans, Functions, Delimiters, Minification and compression

   epyt: 1KB 타자 게임
   js1024 우승자 발표, 1등은 강성훈님의 epyt

   JS1024 2020 우승자 발표
   1Keys - JS1024 우승작 개발기
"
"https://news.hada.io/topic?id=7200","Ubuntu 22.04에 .NET 6 공식 포함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ubuntu 22.04에 .NET 6 공식 포함

     * 마이크로소프트가 캐노니컬과 직접 협력
     * 22.04 (Jammy) 에 기본 포함 되며, apt install dotnet6 만으로 설치 가능
     * 더 작은 용량의 Chiseled Ubuntu 컨테이너 이미지도 같이 공개
          + 기존 이미지에 비해 100MB 작음

   다행히 그 악마같은 스냅패키지는 아닌가보네요

   스냅ㅋㅋㅋㅋㅋㅋㅋ
"
"https://news.hada.io/topic?id=7258","Developer Imposter Syndrome","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Developer Imposter Syndrome

   성장하는 엔지니어가 겪기 쉬운 가면 증후군(Imposter Syndrome)에 대해 자세히 정리한 글
     * 가면 증후군(Imposter Syndrome)이란?
     * 가면 증후군에 빠지기 쉬운 사람들의 특징
         1. 완벽주의자
         2. 타고난 천재
         3. 전문가
         4. 강력한 개인주의자
         5. 슈퍼맨/슈퍼우먼
     * 개발자가 가면 증후군을 느낄 가능성이 높은 이유
     * 저자의 경험
     * 개발자들이 가면 증후군을 겪는 상황
         1. 승진 또는 팀/프로젝트를 이끄는 상황
         2. 지식 배경이 부족한 상황
         3. 동료들과 비교하기
         4. 업계 관련성 유지
     * 블라인드 포스팅 및 설문조사 사례
     * 가면 증후군 자가 진단 테스트
     * 가면 증후군의 긍정적/부정적 측면에 대한 분석
     * 가면 증후군을 극복한 사례
          + 미셸 오바마
          + 셰릴 샌드버그
          + 마이크 캐논 브룩
     * 개발자의 가면 증후군 극복 방법
         1. 포용 - 불편함을 편안하게 느끼자
         2. 나의 업적을 추적해보기
         3. 팀워크와 동료애
         4. 내가 개발자라는 사실을 상기하기
         5. Comfor Zone -> Growth Zone에 이르기까지
         6. 그 외 극복 방법들
         7. Growth Mindset 장착해보기

   공감 ㅎㅎ

   내가 쓴 글인가..? 하면서 읽었습니다

   공감이 많이가는 글이네요👍

   “내 실력이 너무 부족한 게 아닐까?”
   “다른 사람들에게 내 실력이 들통나면 어떡하지?”

   이런 생각을 한번이라도 해보신 분들이라면 도움이 될 만한 글입니다!

   이제 가면.. 언제 오나..

   하하하핫 진심으로 웃었습니다 ㅋㅋㅋ
"
"https://news.hada.io/topic?id=7176","Grex-JS - 테스트 케이스에서 정규식을 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Grex-JS - 테스트 케이스에서 정규식을 생성하기

     * 여러개의 문자열을 입력하면 전체에 맞는 정규식(Regular Expression)을 자동 생성
     * 그룹 캡처, 반복, non-ASCII 이스케이핑, 숫자/공백 등 변환등의 설정 가능
     * Grex Rust 코드를 WASM으로 컴파일하여 브라우저/Node.js 에서 사용가능

   오, 비슷한걸 아예 연구 주제로 한 경우를 봤습니다.
     * https://github.com/kupl/AlphaRegexPublic
     * https://doi.org/10.1145/3093335.2993244
     * http://prl.korea.ac.kr/~pronto/home/posters/regex-synthesis.pdf
"
"https://news.hada.io/topic?id=7284","AI로 재활용품 분리수거, 음식물 쓰레기 인식·측정, 물 사용 현황 관찰·누수 탐지하는 방식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI로 재활용품 분리수거, 음식물 쓰레기 인식·측정, 물 사용 현황 관찰·누수 탐지하는 방식

   1.미국 루이스빌 쓰레기 관리 솔루션 기업 'AMP 로보틱스'
     * 이 회사는 로봇공학, 컴퓨터 비전 기술, 딥러닝 기술로 쓰레기 안에서 재활용품을 자동으로 인식, 분류하는 기술을 선보임, 재활용품 선별 시설에 해당 기술을 제공함
     * 'AMP 코텍스 고속 로보틱스 시스템’과 ‘AMP 뉴런 AI 플랫폼’이 핵심
     * AMP 코텍스 고속 로보틱스 시스템은 로봇으로 쓰레기 안에서 재활용품을 확인하고, 분류하는 업무를 자동화함, 로봇이 쓰레기 안에서 재활용품을 발견해 이를 골라내는 시스템
     * AMP 뉴런 AI 플랫폼은 쓰레기와 재활용성을 확인하기 위해 쓰레기 색·질감·형태·크기·무늬·브랜드 라벨을 인식해서 스스로 계속 학습함, 이는 로봇이 재활용품을 집어서 다른 데 놓아두도록 안내함
     * 재활용품 분류 과정 :
       → 재활용품 선별 시설에서 컨베이어 벨트 위로 쓰레기가 지나가면 카메라가 이를 촬영함
       → AMP 뉴런 AI 플랫폼은 이 가운데 특정한 재활용품 특징을 컴퓨터 비전 기술로 인식함
       → 이는 플라스틱 고분자, 종이 형태, 금속 용기, 여러 겹으로 된 포장 상자 등을 알아봄
       → 재활용품, 다른 절차에서 분류해야 할 쓰레기를 특징 지음
       → AMP 뉴런 AI 플랫폼은 로봇에게 재활용품을 분류하도록 안내함
       → 로봇은 쓰레기 안에서 재활용품을 집어내 다른 곳에 둠
     * 이는 1분에 최대 80개 쓰레기를 집을 수 있으며 사람보다 약 두배 더 빠름
     * 분류 정확도 : 최대 99%

   2.미국 롱몬트 쓰레기 관리 솔루션 기업 '클린 로보틱스'
     * 이 회사는 로봇 공학, 컴퓨터 비전 기술, 머신러닝 기술로 매립 쓰레기와 재활용품을 자동으로 인식, 분류하는 스마트 쓰레기통 '트래시봇'을 개발함
     * 트래시봇은 공항, 병원, 경기장처럼 사람들이 많이 찾는 시설에 설치함
     * 재활용품 분류 과정 :
       → 사람들이 트래시봇에 쓰레기를 버리면 카메라로 이를 촬영함
       → 컴퓨터 비전 기술과 머신러닝 기술로 ‘이 쓰레기가 매립 쓰레기인지, 재활용품인지’ 확인함
       → 로봇 자동화 기술로 재활용품은 재활용 쓰레기통에, 오염된 쓰레기는 매립 쓰레기통에 분류함
     * 분류 정확도 : 95%, 이는 사람보다 300% 더 정확하게 쓰레기를 분류함
     * But 트래시봇에 쓰레기를 버릴 때는 한 번에 하나씩 버려야 함

   3.영국 런던 음식물 쓰레기 관리 솔루션 기업 '위노'
     * 이 회사는 컴퓨터 비전 기술, 머신러닝 기술, 디지털 저울로 음식물 쓰레기를 자동으로 인식, 측정하는 기술을 선보임, 호텔·식당·카지노·크루즈 선 등의 부엌에 이 기술을 제공함
     * ‘위노 비전 시스템’이라는 솔루션은 AI로 음식물 쓰레기를 인식하고 측정하는 데 핵심
     * 여기에는 동작 감지 카메라, 태블릿, 디지털 저울이 필요함, 위노는 이 기기들을 부엌에 제공함
     * 디지털 저울은 바닥에 두고, 태블릿은 그 위 벽면에 비치함, 동작 감지 카메라는 태블릿 아래에 장착됨
     * 음식물 쓰레기 인식, 측정 방식 :
       → 디지털 저울 위에 놓인 통에 음식물 쓰레기를 버리면 카메라는 이를 촬영함
       → 이때 컴퓨터 비전 기술로 음식물 쓰레기 이미지를 인식함
       → 저울로 무게도 측정함
       → 해당 데이터는 태블릿에 전송됨
       → 태블릿에서는 쓰레기로 배출된 음식 유형, 무게 등 정보를 볼 수 있음
     * 위노 비전 시스템으로 음식물 쓰레기를 인식하기 전에는 사전 학습이 필요함
     * 위노 비전 시스템에서 재공하는 음식물 쓰레기 데이터 : 음식물 쓰레기 이미지, 무게, 해당 쓰레기를 매일 버렸을 때 일주일치 비용·1년치 비용·1년치 환경 비용(이산화탄소 배출량)
     * 음식물 인식 정확도 : 80%

   4.이스라엘 텔아비브 물 관리 솔루션 기업 '윈트'
     * 이 회사는 머신러닝 기술, IoT 기술로 건물 안에서 물 사용 현황을 관찰하고, 누수를 탐지하는 기술을 개발함, 상업시설, 건설 현장, 제조업체 등에 이 기술을 제공함
     * 윈트는 지능형 수도 계량기와 수도 차단 장치를 제공함
     * 두 장치를 건물 수도관 시스템과 연동해야 물 사용 현황을 파악하고, 누수를 탐지할 수 있음
     * 아울러 큰 피해가 생기기 전에 물 공급을 차단할 수 있음
     * 계량기는 머신러닝으로 건물의 정상적 물 흐름 양식을 학습하고, 분석함, 이는 3~4주 걸림
     * 이렇게 정상적 물 흐름 양식을 파악하면, 나중에 누수와 같은 비정상적 양식도 탐지할 수 있음
     * 계량기는 무선 통신망으로 클라우드와 통신함
     * 문제를 탐지하면 담당자에게 앱으로 실시간 알림을 보냄, 이때 누수가 생긴 곳의 정확한 위치를 짚어줌
     * 계량기가 분석하는 정상적 물 흐름 양식 : '수영장을 채우는 데 평소 사용한 물의 양’, ‘부엌과 화장실에서 평소 사용한 물의 양’, ‘물을 사용하는 시기’
     * 계량기가 실시간 분석하는 비정상적 물 흐름 양식 : AI와 딥러닝을 적용해 ‘수영장이 제대로 채워지지 않고 있는지’, ‘예상 밖의 수원에서 물 사용량이 급격하게 늘었는지’ 등을 파악함
     * 비상상황을 탐지하면 윈트 장치는 물 공급을 자동으로 차단하도록 프로그램 될 수 있음, 심각한 누수나 수도관 파열 같은 상황이 비상상황 예
"
"https://news.hada.io/topic?id=7207","Pew 리서치가 조사한 2022년 미국 10대들의 소셜 미디어 선호도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Pew 리서치가 조사한 2022년 미국 10대들의 소셜 미디어 선호도

     * 유튜브가 1등 : 95%가 사용중, 19%는 거의 지속적으로 사용
     * 틱톡이 몇년새 급부상 : 67%가 사용해본 적 있고, 16%는 지속적으로 사용중
     * 페이스북은 급격히 떨어짐 : 2014~15년엔 71%, 현재는 32%
     * 인스타그램 52%→62%, 스냅챗 41%→59% 둘다 상승
     * 트위터 23%, 트위치 20%, 왓츠앱 17%, 레딧 14%, 텀블러 5%
     * 10대 남성들은 유튜브, 트위치, 레딧
     * 10대 여성들은 틱톡, 인스타그램, 스냅챗
     * 스마트폰 사용은 2014~15년 74%에서 95%로 증가
     * 97%가 매일 인터넷 사용(2014~15년엔 92%). 46%가 하루종일 지속적으로 사용
"
"https://news.hada.io/topic?id=7198","Discord가 네트웍 디스크의 지연시간을 최소화한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Discord가 네트웍 디스크의 지연시간을 최소화한 방법

     * 초당 200만개의 메시지를 처리하는 NoSQL DB 클러스터(ScyllaDB)를 운용 중
     * DB성능에 가장 큰 영향을 미치는 것은 피지컬 디스크 하드웨어의 레이턴시
       → 쿼리량이 낮은 수준에서는 상관없지만, 특정 시점을 초과하면 1~2ms가 걸리는 읽기 시간 만으로도 디스크에서 읽는 대기열이 발생하며 쿼리 자체에 대해 시간 초과가 발생
     * 디스크 레이턴시는 보통 마이크로세컨드 단위인데, 왜 디스크 오퍼레이션에 1~2ms가 걸릴까 ?
     * 디스코드는 대부분의 하드웨어를 Google Cloud에서 운용
          + NVMe 기반의 로컬 SSD를 지원하지만 자체적으로 테스트해보니 안정성 문제가 있어서 중요한 데이터 저장소로 사용하기엔 맘이 편하지 않았음
          + Persistent Disk는 서버에 실시간으로 연결/분리 가능하며, 다운타임 없이 리사이즈 가능, 언제나 스냅샷 생성가능하고, 기본으로 복제되게 설계됨
            → 문제는 서버에 직접 붙어있지 않고 네트웍으로 연결 된다는 것
     * 로컬 네트웍 커넥션 레이턴시가 아무리 낮아도, PCI/SATA 보다 낮지는 않음
       → 네트워크는 1~2ms, 직접연결된 디스크는 0.5ms
     * 로컬 SSD는 HDD처럼 하드웨어 문제가 생기면 그 디스크의 데이터를 잃어버리게 되며, 호스트 자체가 문제가 생기면 스냅샷도 불가능 해서 아예 데이터를 잃어 버리는 상황이 발생
       → 그래서 디스코드는 Local SSD 를 이용하지 않고, Persistent Disk 를 사용

문제 분석

     * 로컬 SSD와 Persistent Disk 의 장점만 모은 저장 장치가 있다면 최고겠지만 그런 것은 없음. 장점중 일부만 가져온다면?
     * 디스코드는 쓰기 지연시간은 문제가 아님. 성능에 영향을 미치는 것은 ""읽기 지연시간""
     * ""다운타임 없는 디스크 리사이징""은 필수 기능은 아님. 사이즈는 미리 예측 가능
     * 최종 요구 사항은
          + GCP 에 그대로 있으면서
          + 데이터 백업을 위해서 Point-in-Time 스냅샷 사용
          + 읽기 지연시간 최소화를 최우선 순위로
          + 기존 데이터베이스 업타임 보장을 희생하지 않을 것
     * 읽기는 GCP의 Local SSD를 활용하고, 쓰기는 Persistent Disk에 하면 좋을 것 같음
       → 소프트웨어 수준에서 이런 Super-disk를 만들 수 있을까?

Super-Disk 만들기

     * 요구사항은 기본적으로 Write-Through 캐쉬였음. GCP의 로컬 SSD를 캐쉬로 사용하고, PD를 저장 레이어로 사용
     * DB서버로 Ubunut를 사용하고 있어서, 리눅스 커널단에서 디스크 레벨의 캐쉬 적용 가능(dm-cache, lvm-cache, bcache 같은 모듈)
     * 하지만, 실험해보니 캐쉬디스크에 배드섹터 발생시 전체 읽기 작업이 실패함
          + 배드섹터가 발생하면 스토리지 레이어에서 읽어다 엎어써야 하는데, 평가한 디스크 캐슁 솔루션들은 이런 기능이 없었음
          + 배드섹터 발생시 데이터베이스가 데이터 안정성 문제로 셧다운 되어버림
     * 추가 요구사항으로 ""로컬 SSD에 배드섹터가 발생해도 살아남아야 함""이 추가됨
     * 그래서 리눅스 커널의 ""md""를 조사
          + md는 소프트웨어 RAID를 생성할수 있도록 지원
          + SSD와 PD를 미러링 하는 것으로는 문제가 해결 되지 않음. 절반이상의 읽기는 PD에서 될 것이기 때문에
          + md에는 전통적인 RAID에는 없는 ""write-mostly"" 가 있음
               o 특정 디스크를 write-mostly로 지정하면 일반 읽기에서는 제외되며, 다른 옵션이 없을 때만 읽기가 실행됨. ""느리게 연결된 기기에 유용""
               o 즉, SSD와 PD를 RAID1으로 묶고, PD를 write-mostly로 세팅하면 요구사항을 맞출 수 있음
     * 마지막 남은 문제는 GCP의 Local SSD는 크기가 딱 375GB라는 것
     * 디스코드는 특정 어플리케이션에 대해서는 DB 인스턴스당 1TB 이상이 필요하기도 함
     * 그래서 여러개의 SSD를 RAID0로 묶기로
     * 최종 모습은
          + RAID0 로 묶인 로컬 SSD 4개를 md0
          + md0 와 Persistent Disk를 RAID1으로 묶은 md1 을 구성

DB 성능

     * 딱 예상한 결과가 나왔음
     * 피크시에도 디스크 오퍼레이션들이 큐에 쌓이지 않으며, 쿼리 레이턴시가 변하지 않음
     * 성능 향상이 일어나서 각 서버당 처리 쿼리량이 더 늘어남
     * RAID 사용해본 사람들은 이게 ""그냥 동작할까?"" 라는 의구심이 들겠지만, 실제로는 다양한 일이 있었고, 나머지는 따로 상세히 소개할 예정

   이전에는 golang의 퍼포먼스에 만족을 못해서 rust로 서버도 짜는 것 보면 discord 회사의 geek함도 대단한 것 같아요.

   몬가 가래로 막을 것을 호미로 막는 느낌입니다.

   HN에서는 그거 그냥 GCP 문제 아냐? 라는 얘기도 있기는 합니다만..
   https://news.ycombinator.com/item?id=32474093
   이런 시도도 가능하구나 정도로 알아두면 좋을 것 같아요.
"
"https://news.hada.io/topic?id=7277","Slack의 무료 플랜 변경이 작은 팀들에게 안 좋은 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Slack의 무료 플랜 변경이 작은 팀들에게 안 좋은 이유

     * 9/1부터 무료플랜 사용자는 기존 ""1만개의 메시지"" 중 검색에서 ""지난 90일간의 메시지"" 검색으로 변경됨
     * 슬랙은 매우 액티브한 팀들에는 좋은 변경이라고 얘기하지만, 메시지가 많지 않았던 대부분의 작은 팀들에게는 아주 좋지 않은 변경임
       → 매일 111개, 업무일만 치면 일 156개씩 메시지가 발생해야 90일에 1만건 메시지가 발생
     * 비슷한 대체제인 Zulip은 기존 슬랙과 마찬가지로 1만건 검색히스토리를 지원
       → Zulip의 무료 사용팀들을 확인해보니 전체의 7%만 90일에 1만개가 넘으며, 54%는 90일간 1000개 이하의 메시지만 발생한다고

   슬랙과 가장 유사한 대안인 Mattermost 도 클라우드 서비스를 제공하는데 비슷한 제한 없이 합리적인 가격으로 제공합니다. 대안 찾는 분들은 한 번 검토해보세용

   https://mattermost.com/pricing/

   원래 만 개 제한이었을 때는 최근 메시지를 삭제하면 이전 메시지가 하나씩 보이기 시작했고 결제를 하면 이전의 메시지들을 다 볼 수 있었는데 이 용량낭비를(유료결제를 안 할 팀은 계속 안 하니까) 줄이기 위해서 정책을 바꾼 건 이해는 가더라구요.
   하지만 작은 팀들에게 안 좋은 것도 사실이구요.
   90일이 지날 쯤 해서 메시지를 리포스팅 해주는 어뷰징용 봇이 나오지 않을까 싶기도 합니다

   90일 제한이라도 슬랙이 메시지를 삭제할 수는 없습니다. 정책상 메시지는 숨겨져 있고 유료결제를 하면 보이게 되는데, 결제를 안 할지도 모른다고 해서 지우고 나면 export등의 목적으로 일시 결제를 하는 경우 등에 대응할 방법이 없으니까요. 사용 정책을 빡빡하게 만들어서 무료 사용자를 배제하는 쪽으로 가는 정책인건 확실하긴 합니다.

   글 내용과 도메인에도 나와있지만 슬랙의 경쟁자인 Zulip팀에서 쓴거라는 걸 인지하고 보시기 바랍니다
   무료 버전의 슬랙에서 검색이 더 안좋아지는 것은 사실인듯 합니다. 원래도 별로였지만 더더욱 별로가 됨..
"
"https://news.hada.io/topic?id=7281","TTOSA - 오픈소스 대체제가 나오는 데까지 걸리는 시간","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    TTOSA - 오픈소스 대체제가 나오는 데까지 걸리는 시간

     * “Time Till Open Source Alternative” 라는 개념을 제안하고 데이터를 조사해 봄
     * 평균적으로 7년
          + 독점 소프트웨어로 수익을 내기에는 충분한 시간
          + 특히 오픈소스가 나오더라도 완전히 대체할 수 있을 정도가 되려면 몇년 더 걸림
     * 점점 빨라지고 있으며, 최고 기록은 Roam의 대안인 Foam으로 244일
     * 39개의 사례
          + Unix (1973-10-01) → GNU/Linux (1991-09-17) = 6560일
          + Photoshop (1990-02-19) → GIMP (1998-06-02) = 3025일
          + 1Password (2006-06-18) → Bitwarden (2016-08-10) = 3706일
          + Slack (2013-08-01) → Mattermost (2015-10-02) = 792일
     * 2000년대 이후에 웹의 부상및 GitHub시대가 오면서 대체제 출현이 많아졌고, 점점 빨라지고 있음
     * TTOSA는 꼭 완전히 대체할수 있는 대안을 의미하지는 않음. 거의 사용 불가능한 초기 단계 대체제들도 있음
     * 많은 오픈소스 대체제들이 해커가 아닌 회사에 의해서 만들어졌고, 이런 회사들은 돈을 벌고 싶어함
          + 그들은 소프트웨어로 버는게 아닌, 클라우드 호스팅/후원/엔터프라이즈 기능 등으로 돈을 벌고 있음
     * 결국엔 어떻게 될까 ? (글쓴이의 주장)
          + ""All software will be open source, and no one will make money with software.""
          + ""모든 소프트웨어는 오픈소스가 될 것이고, 아무도 소프트웨어로 돈을 벌지 못할 것""
          + 소프트웨어는 점점 만들기 쉬워지고, 공유하기 쉬워짐
          + 폐쇄형 소프트웨어는 자원이 떨어지면 끝이지만, 오픈소스는 대중의 관심이 떨어질때 죽음
            → 유명 오픈소스는 절대 죽지 않음. 어느정도 인기를 끌면 지속적으로 기여자가 나옴
          + 오픈소스는 돈을 많이 벌지못하고, 미래에는 더 적게 벌게 될 것

     All software will be open source, and no one will make money with software.

   글쎄요. 많은 오픈소스 대안이 self-hosted 방식인 경우가 많아서...그것도 비용인지라.

   글쓴이는 글 마지막에 아래와 같은 주장을 하고 뒷받침하는 내용을 적었습니다만, 솔직히 많이 공감되지는 않습니다.

     ""All software will be open source, and no one will make money with software.""
     글에 포함된 39개 사례중에 실제로 완전히 대체 가능한 것은 몇 개 되지 않습니다.
     독점 소프트웨어가 인기를 끌고, 오픈소스 대체제가 나와서 그중 일부 사용자를 흡수하는 현재 모델이 굉장히 오래 지속되지 않을까 싶어요.

   여기서 당장의 비즈니스 기회를 찾는 걸 생각해 본다면.. 훌륭한 오픈소스 대체제를 만들고 그걸 확장시켜 나가는 사람들이 국내에도 많아지면 좋겠습니다.
"
"https://news.hada.io/topic?id=7227","AWS는 S3의 압축을 gzip에서 zstd로 바꿔서 30% 정도 크기를 줄였음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AWS는 S3의 압축을 gzip에서 zstd로 바꿔서 30% 정도 크기를 줄였음

     * Yann Collet가 만든 zstd가 얼마나 쓸데없는 것을 줄여줬냐는 질문에 대해서, Adrian Cockcroft가 대답한 내용
     * S3의 Exabyte 규모에서 30%는 엄청난 규모의 비용 절감임
     * 트위터도 HDFS에서 zstd로 바꾸면서 매년 수백억원(~ mid 8 figs/yr)을 절감했다고

   우버 또한 GZIP/SNAPPY에서 ZSTD로 변경했습니다.
   https://www.uber.com/en-TW/blog/cost-efficiency-big-data/

   zstd 엄청나군요!

   링크에 압축성능 비교자료가 있어서 공유합니다.
   https://github.com/facebook/zstd

   오늘 zstd 처음 사용해봤습니다.
   mac에 기본 내장되어있었군요.

   압축하기: ""zstd file"" => file.zst
   압축풀기: ""unzstd file.zst"" => file
     * 압축 알고리즘 르네상스
     * 파일시스템 업그레이드로 SSD비용 수백만불 절약한 후기
     * Arch Linux 가 패키지 압축 도구를 xz에서 Zstandard로 교체
"
"https://news.hada.io/topic?id=7246","OpenAI, 9/1부터 GPT-3 API 가격 인하","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenAI, 9/1부터 GPT-3 API 가격 인하

     * 표준 모델과 임베딩 모델 모두 1k 토큰당 가격을 약 절반에서 1/3정도로 인하
       → 1000개의 토큰은 약 750 단어
     * Davinci(가장 강력) $0.06 → $0.02
     * Curie $0.006 → $0.002
     * Babbage $0.0012 → $0.0005
     * Ada(가장 빠른) $0.0008 → $0.0004
     * 고급 검색, 클러스터링 등을 위한 임베딩 모델은 표준 모델 가격의 10배로 동일 : Davinci Embeddings $0.6 → $0.2
     * Fine-Tuned 모델의 가격은 변경 없음
"
"https://news.hada.io/topic?id=7164","Awesome SaaS Boilerplate","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Awesome SaaS Boilerplate

     * 스택별 SaaS boilerplate 모음
     * Ruby on Rails : Bullet Train, Kiso, Sjabloon,..
     * Node.js(JavaScript) : Usergravity, MERNKIT, Nodewood,...
     * Laravel(PHP) : Spark, SaaSWeb, Wave, Nana,..
     * Symfony(PHP) : Parthenon
     * Django(Python) : Pegasus, Djaodjin,..
     * Flask(Python) : SaaS Forge, Ignite,..
     * Rare
          + Serverless SaaS. (React)
          + SaaS Startup Kit. (Golang)
          + ASP.Net Zero (.NET)
          + Bedrock. (Next.js)
          + GeniePy (Python & Starlette)

   Wave - SaaS 개발 스타터 킷
   SaaS Boilerplate - SaaS를 손쉽게 개발 시작하기
   AWS SaaS Boost 오픈소스 공개
   Ultimate Backend - 멀티테넌트 SaaS 스타터 킷 오픈소스
"
"https://news.hada.io/topic?id=7298","The Big [Censored] Theory","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       The Big [Censored] Theory

     * 중국 Youku(알리바바)에서 스트리밍된 빅뱅이론은 삭제된 장면이 많음
     * 중국은 2014년에 정치적 결정으로 모든 수입 미국/영국 TV쇼들은 스트리밍전에 리뷰 및 승인을 받도록 변경
     * 100개의 에피소드를 비교해보니 77개가 편집되었고 206개의 씬이 삭제
          + 종류별로 색상 태깅해서 삭제된 문구들과 함께 설명
          + 꼭 직접적이 아니더라도, 은유로 표현된 문구들도 모두 삭제
          + 주로 섹스,동성애,중국 및 동맹국(북한,러시아)에 대한 무례함등이 가장 많고, 불법 행위, 종교, 건강에 해로운 중독 관련 내용도 포함
          + 중국내의 드라마에서는 허용되는 수준들도, 빅뱅이론에서는 모두 삭제
     * 이런 검열 행위는 중국 정부가 통제력을 유지하는데에 도움이 됨
       → 이게 페이스북,트위터,넷플릭스,HBO등이 중국에서 차단된 이유
     * 무간도의 엔딩이 중국/말레이지아 버전에서만 다름 : 정의가 항상 승리해야 하기 때문
       → 헐리웃 리메이크인 The Departed는 엔딩이 정의를 강조하지만, 중국내에서는 상영 금지
     * ""규칙들이 창의성을 죽이고 있음""

   글 내용과 별개로, 이 The Pudding 웹사이트는 문화 관련 콘텐츠를 비쥬얼하게 구성하여 보여주는데, 각 글의 구현방식이 굉장히 흥미롭습니다.
   빅뱅이론의 경우 삭제/무삭제 비디오를 비교해서 보는 UI라던가, 100개 에피소드의 짤린 장면을 시각화 했다가 합쳐서 보여주는 효과가 그렇고요
   미국내 도시들의 이상 기온을 추적 https://pudding.cool/projects/heat-records/
   전세계 지폐에 그려진 인물들의 성별/직업을 시각화 https://pudding.cool/2022/04/banknotes/

   다른 글들도 한번 둘러보세요. https://pudding.cool/
"
"https://news.hada.io/topic?id=7285","Soketi - 간단하고 빠른 오픈소스 웹소켓 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Soketi - 간단하고 빠른 오픈소스 웹소켓 서버

     * C로 작성되어 Node.js로 포팅. 빠르고 스케일러블
       → 1 CPU당 20만 커넥션 가능, 1k 사용자에게 메시지 전송하는데 6ms
     * 연결/메시지/채널 등 제한 없음
     * Pusher Protocol v7을 사용하므로 기존 코드 그대로 이용
     * HTTP Webhook지원 - 채널 점유시 트리거 (Lambda와 연결)
     * Prometheus 모니터링 지원
     * Pusher처럼 app 관리 지원
"
"https://news.hada.io/topic?id=7276","Vercel 의 Edge Computing 에서도 WebAssembly 실행가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Vercel 의 Edge Computing 에서도 WebAssembly 실행가능

   Vercel 에서 Web-interoperable 호환 API 를 지원하는 V8 과 같은 Edge 런타임을 이용해서 WASM 을 Edge Computing 에서도 실행할 수 있게 됨. SIMD 와 같은 WASM 의 장점와 특징을 그대로 사용가능
"
"https://news.hada.io/topic?id=7180","UI Fillers : 디자인을 위한 플레이스홀더들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      UI Fillers : 디자인을 위한 플레이스홀더들

     * 긴/중간/짧은 Lorem Ipsum
     * 이름, 도시, 회사, 국가, 이메일, 전화
     * 이미지 : 프로필, 추상, 랜덤
     * 로고 : 진짜 회사들, 가짜 회사들, 연동 서비스, 아이콘들

   ImgSrc.Space - 쓰기 편한 이미지/비디오 플레이스홀더
   SQIP - SVG 기반 이미지 플레이스홀더
   BlurHash - 블러 처리된 이미지 플레이스홀더 생성기
   Lorem Faces - AI로 자동 생성된 아바타용 얼굴들
"
"https://news.hada.io/topic?id=7286","당신만의 스크립트를 보여주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            당신만의 스크립트를 보여주세요

   혼자만 사용하는 스크립트를 알려달라는 HN의 질문에 대한 답변들
     * 접속하는 모든 서버에서 같은 환경을 구성하는 '.ssh/config'
       → 서버에 처음 접속시 필요한 dotfile을 자동으로 rsync 하고, 그 다음 접속부터는 자동 업데이트
     * command help (ch) 스크립트
       → 도움말 & man 페이지에서 명령행 부분만 추출해서 보여줌
     * MISC(Manually Installed or Source Compiled)
       → 수동 설치 또는 소스 컴파일한 패키지들만 관리해주는 스크립트
     * git-co-commit
       → 페어프로그래밍시 커밋 메시지 마지막에 ""Co-authored-by: ...""를 추가
       → git-co-commit 으로 path에 추가하면 git은 자동으로 git co-commit 서브코맨드로 인식함
     * 캡스락+마우스클릭 하면 초당 50번씩 클릭해주는 AutoHotkey 스크립트
     * rerun
       → 디렉토리의 파일이 변경되면 명령을 자동 재실행 하는 스크립트
     * git recent
       → 최근에 작업한 브랜치 보여주기
     * ccd
       → 디렉토리 만들고 그 디렉토리로 이동
     * git-move
       → Repo간 파일 이동. 히스토리 보존

   alias df='df -h -x tmpfs -x devtmpfs -x squashfs'
   alias xc='xclip -sel clipboard'
   alias ttfb='curl -so /dev/null -w ""HTTP %{http_version} %{http_code} Remote IP: %{remote_ip}\nConnect: %{time_connect}\nTTFB: %{time_starttransfer}\nTotal time: %{time_total}\nDownload speed: %{speed_download}bps\nBytes: %{size_download}\n""'

   ap() {
   https $@ Accept:application/activity+json
   }

   shodan() {
   xdg-open https://shodan.io/domain/$1
   dig +short $1 | xargs -i xdg-open https://shodan.io/host/{}
   }

   check_mtu() {
   local target=$1
   shift
   local lower=0
   local upper=1500
   until [[ $((lower + 1)) -eq $upper ]]; do
   current=$(((lower + upper) / 2))
   echo -n ""lower: $lower, upper: $upper, testing: $current -- ""
   if ping -M do -s $current -c 2 -i 0.2 $target $@ &> /dev/null; then
   echo ""ok""
   lower=$current
   else
   echo ""fail""
   upper=$current
   fi
   done
echo ""max packet size: $lower, mtu: $((lower + 28))""

   }
   제가 쓰는 건 이 정도 되네요
     * GIF -> Video
       → ffmpeg -v warning -i ""입력.gif"" -y ""출력.mp4"" -pix_fmt yuv420p -c:v libx264 -movflags +faststart -filter:v ""crop=floor(iw/2)*2:floor(ih/2)*2""
     * Video -> GIF
       → ffmpeg -v warning -i ""입력.mp4"" -y ""출력.gif"" -filter_complex ""[0:v] fps=15, split [1:v] [2:v]; [1:v] palettegen [p]; [2:v] fifo [3:v]; [3:v] [p] paletteuse"" -loop 0

   참고로 gif의 일반적인 최대 FPS는 50정도로 생각하시면 됩니다.
   https://wunkolo.github.io/post/2020/02/buttery-smooth-10fps/

   에뮬가능하다는 말은 있던데 해보지를 않아서 잘 모르겠네요.
   https://superuser.com/questions/1449366/…

   tmux 세션을 열고 세가지 프로젝트 코드(api, front, admin)를 세개의 윈도우로 띄우는 스크립트를 쓰고있습니다.
   tmux new-session -d ; new-window ; send-key ""nvim ~"" C-m ; attach;
   이전 회사에서는 출퇴근이 직접 회사 사이트에 로그인해서 찍는거였는데, puppeteer로 자동화 해서 쓰기도...

   git log --pretty=""%ad [%ae] %s"" --author E_MAIL_ADDRESS
   → git 리비전에서 지정한 커미터만 필터링해서 보기
     * .ssh/config : https://news.ycombinator.com/item?id=32468605
     * ch : https://github.com/learnbyexample/command_help/blob/master/ch
     * MISC : https://github.com/tpapastylianou/misc-updater
     * git-co-commit : https://gist.github.com/sshine/d5a2986a6fc377b440bc8aa096037ef0
     * AutoHotkey : https://news.ycombinator.com/item?id=32468167
     * rerun : https://news.ycombinator.com/item?id=32469012
     * git-recent : https://news.ycombinator.com/item?id=32470619
     * ccd : function ccd { mkdir -p ""$1"" && cd ""$1"" }
     * git move : https://gist.github.com/mnemnion/87b51dc8f15af3242204472391f3bf59
"
"https://news.hada.io/topic?id=7174","SQLite-html : HTML을 쿼리,조작,생성하는 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   SQLite-html : HTML을 쿼리,조작,생성하는 확장

     * HTML 스크래핑 도구와 비슷
     * CSS 셀렉터를 이용해서 텍스트 추출 : .querySelector(), innerHTML,..
     * .querySelectorAll()을 이용한 테이블 생성
     * .createElement(), .appendChild() 를 이용한 HTML 엘리먼트 생성
"
"https://news.hada.io/topic?id=7262","오픈소스가 자금지원을 받기 위해 준비해야할 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       오픈소스가 자금지원을 받기 위해 준비해야할 것들

     * FOSS펀드 들의 지원현황을 보면 중요 항목들을 알 수 있음
     * 라이센스 : OSI 승인된 것을 사용하는 걸 권장. Apache-2.0, MIT, LGPL, GPL
     * Tidelift를 통해서 지원받을 수 있는지 확인해보기
     * Open Collective / GitHub Sponsors 준비
     * Dependency Chain Metadata 확인하기
     * 인지도를 높여줄 Logo는 필수
     * 퍼블릭 Roadmap 작성해 두기(펀드들이 투자해야할 가치가 있는지 판단할때 사용)
     * Hype 만들기
          + Changelog는 기본. 메일링리스트, RSS가 있는 블로그, 트위터 계정 등 모든 것을 활용.
          + 컨퍼런스 발표(꼭 공식 발표 아니더라도 라이트닝 토크 같은 것도 좋음)
     * 커뮤니티 만들기
          + 디스코드, 슬랙, GitHub Discussions 같은 것들
          + 중요 발표들은 트위터, Reddit, HackerNews(GeekNews 도 좀..) 활용
          + Discord는 오픈소스 프로젝트용 커뮤니티 서버를 만들면 가상 URL도 지원해줌 (discord.gg/urllib3)
     * 보조금(Grant) : 유명해지고 나면..
     * 스티커 : 행사 참석시 꼭 준비해 가세요

   Choose a License - 오픈소스 라이센스 선택하기
"
"https://news.hada.io/topic?id=7189","Deno 큰 변화 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Deno 큰 변화 예정

     * npm 패키지 임포트를 쉽게 만드는 업데이트 작업을 했고, 3달안에 대부분의 npm 패키지가 Deno에서 동작하게 될 예정
     * 목표는 Deno를 가장 빠른 JavaScript 런타임으로 만드는 것이며, 다음 릴리즈에는 여태까지 가장 빠른 JavaScript HTTP 웹서버가 내장될 것
     * 대규모 회사에서 Deno 도입을 할 수 있도록, 상용 환경 구성을 위한 Office Hour 진행 예정(구글 폼으로 신청)
     * GitHub 에서 4.1m 다운로드를 넘었고, 25만 MAU 달성

   Bun이 속도와 node 호환을 들고 나와서...
   만약 node 호환이 된다면 권한 관리되는 node 런타임도 되네요.

   Bun/Deno 중 누가 nodejs를 먼저 따라잡을지 궁금하군요

   저는 일단 deno 에 한 표 던집니다!

   rust 에서 v8:fast_api 라는 raw pointer 를 참조할 수 있는 방법으로 v8 api 를 호출하려고 하네요.

   https://docs.rs/v8/latest/v8/fast_api/index.html

   내년에 deno의 활약상이 기대가 되네요~

   node 호환이 초기 목표는 아니었던 것 같은데 결국은 지원하게 되는군요. node 기존 생태계가 너무 크긴 하죠…
"
"https://news.hada.io/topic?id=7202","VSCode, Markdown Language Server 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  VSCode, Markdown Language Server 공개

     * VSCode 1.70+ 에서 이미 사용중
     * 2개의 오픈소스 라이브러리로 구성되어 다른 에디터에서도 사용 가능
          + Markdown Language Service : 마크다운 지원을 위한 도구를 제공하는 TypeScript 라이브러리
          + Markdown Language Sever : 마크다운 랭귀지 서버
     * 지원하는 기능들
          + Document outlines
          + Workspace symbols
          + Document links
          + Smart folding
          + Smart selection
          + Completions
          + Rename
          + Find All References
          + Go to Definition
          + Diagnostics for broken links
          + Updating of links on file moves / renames

   오 좋네요. 이맥스에서 적용해봐야겠습니다.
"
"https://news.hada.io/topic?id=7212","애플 macOS 12.5.1, iOS 15.6.1 제로데이 패치 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 애플 macOS 12.5.1, iOS 15.6.1 제로데이 패치 공개

     * CVE-2022-32894 : 커널 패치. 응용프로그램이 커널 권한으로 임의 코드 실행가능
     * CVE-2022-32893 : 웹킷 패치. 악의적으로 제작된 웹콘텐츠를 처리하면 임의 코드 실행가능
     * 맥,아이폰,아이패드 모두 업데이트 필요
"
"https://news.hada.io/topic?id=7295","DivKit - 오픈소스 Server-Driven UI 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  DivKit - 오픈소스 Server-Driven UI 프레임워크

     * 크로스플랫폼 프레임워크
     * 백엔드에서 앱을 디자인하고 JSON으로 구성하여 Android/IOS/Web 앱에 푸시하여 업데이트(앱 업데이트 없이)
          + DivKit(DSL) = 데이터소스 + 레이아웃 + 템플릿
     * Playground 제공
     * Client : Android(Kotlin), iOS(Swift), Web(SSR + Hydration, React)
     * Server Side JSON Builder : TypeScript, Kotlin
     * Yandex 가 만든 오픈소스
"
"https://news.hada.io/topic?id=7291","구글, 안드로이드용 Cross Device SDK 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글, 안드로이드용 Cross Device SDK 공개

     * 스마트폰/시계/TV/자동차등 멀티 디바이스에서 연동되는 앱 개발을 위한 SDK
     * 개발자 프리뷰에 포함된 기능들
          + 디바이스 디스커버리 : 주위의 기기를 찾고, P2P통신을 하고, 수신하는 장비에서 타겟 앱 실행
          + 안전한 연결 : 인증된 기기간에 안전/로우 레이턴시 양방향 데이터 공유
          + 멀티 디바이스 세션: 여러 기기간에 어플리케이션의 사용자 경험을 전송/확장

   그렇다는 것은.... 시너지가 안드로이드에서도 돌아가겠군요.
"
"https://news.hada.io/topic?id=7188","StemRoller - 노래에서 보컬과 악기를 분리해주는 무료 앱 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               StemRoller - 노래에서 보컬과 악기를 분리해주는 무료 앱 오픈소스

     * 페이스북의 Demucs 알고리듬을 사용
     * 노래/가수의 이름을 넣고 검색하면 유튜브에서 음악을 찾아서 몇분만에 추출
       → 보컬, 드럼, 베이스, 기타 악기로 분류됨
       → 보컬만 제외한 반주 통합 파일도 작성해 줌
     * 맥/윈도우용 바이너리 제공

   윈도우 버전은 뭔가 잘 동작이 안 되어서 맥에서 해보니 잘 분리해주네요.
   보컬 부분은 정말 깔끔하게 떨어집니다.

   Demucs - AI로 음원을 분리하기
   Spleeter - 노래에서 보컬/드럼/베이스/피아노를 분리 추출해주는 오픈소스
   Spleeter 를 이용한 ""Youka - Youtube to Karaoke""
"
"https://news.hada.io/topic?id=7195","Rallly - 미팅 날짜 선택을 도와주는 Doodle Poll 대체제 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Rallly - 미팅 날짜 선택을 도와주는 Doodle Poll 대체제 오픈소스

     * 팀원 또는 외부인들과 미팅하는 날짜를 쉽게 설정 가능
          + 다양한 타임슬롯 옵션(타임존 지원)
          + 모바일 지원. 로그인 필요 없음
          + 알림 및 코멘트 기능
     * Next.js + Prisma + tRPC + Tailwind CSS
"
"https://news.hada.io/topic?id=7166","유명 팟캐스트의 출연료는 약 $50,000(6500만원)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    유명 팟캐스트의 출연료는 약 $50,000(6500만원)

     * 유료 게스트 출연을 중개하는 GuestIO 같은 플랫폼도 있음
     * GuestIO에 의하면 ~50K 출연료를 받는 팟캐스트들이 여럿 있으며, 보통 청취자 1000명당 100~150달러 수준
     * Entrepreneurs on Fire는 출연료 $3500
       → 스폰서 문구, 어필리에이트 링크등을 포함해서 6월에 $140K를 벌었음. 이중 20~30%가 출연료
     * The Skinny Confidential Him and Her 팟캐스트는 인터뷰당 $20K~40K
       → 에피소드당 구독자가 25만~35만명
       → 아무나 출연자로 받지 않음. 사람/비즈니스가 매력적이고, 자신의 청중과 관련있어야 한다고
     * The Human Upgrade는 바이오해킹 팟캐스트로, 게스트당 $50K 출연료 받음
       → 월 1백만회 다운로드 됨. 1%의 에피소드가 돈내는 게스트라고
"
"https://news.hada.io/topic?id=7274","Gradientify - 웹기반 그래디언트 제작 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Gradientify - 웹기반 그래디언트 제작 도구

     * 100+ 이상의 아름다운 Gradient 제공
     * 그래디언트 방향/시작&종료 색상 정하고 생성 가능
     * 특정 컬러에서 Tint 와 Shade 생성 지원
     * CSS 스니펫으로 복사 및 PNG로 다운로드
     * PWA로도 이용 가능
"
"https://news.hada.io/topic?id=7235","Cosmopolitan v2.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Cosmopolitan v2.0 릴리즈

     * C/C++ 코드를 윈/맥/리눅스/BSD 등 어디서나 실행하게 만들어주는 libc 라이브러리
     * 새로운 APE 로더 사용. 자동으로 압축 해제
     * _spawn(), _join() 으로 6개 OS에서 쓰레딩 지원
     * Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + BIOS(UEFI)

   Cosmopolitan libc - Build-Once Run-Anywhere C
   Cosmopolitan v1.0 공개
   Redbean - 파일1개로 실행되는 웹서버
   Redbean 2.0 공개

   위 글의 댓글중에 있지만, 이 Cosmopolitan 의 개발과정이 참 해커스럽습니다. 다시 옮겨봅니다.
     * 유명한 해커인 Justine Tunney가 APE(αcτµαlly pδrταblε εxεcµταblε) 포맷을 공개
     * APE는 UNIX 쉘스크립트이면서 윈도우즈 실행파일 이어서 맥/윈/리눅스/BSD 어디서나 실행이 가능
     * Cosmopolitan 은 이렇게 포터블한 상황에서 C코드를 어디서나 실행가능하게 만들어주는 LibC
     * 이 APE 와 Cosmpolitan을 가지고 파일 1개로 실행되는 Redbean 웹서버를 개발
     * Redbean은 실행파일이면서 ZIP 파일이어서 모든 HTML/CSS/JS 등의 리소스를 내장하는게 가능
     * 이제 Cosmopolitan 1.0 에서는 Redbean 웹서버가 자기 자신인 Zip 파일의 내용을 수정하는게 가능
     * Dynamic한 웹페이지를 만들어서 내용도 수정이 되지만, 파일은 1개
"
"https://news.hada.io/topic?id=7206","DALL-E 2로 어드벤처 게임 그래픽을 만든 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      DALL-E 2로 어드벤처 게임 그래픽을 만든 후기

     * 1990년대 Sierra 와 LucasArts 스타일의 어드벤처 게임
     * DALL-E에게 픽셀아트를 직접 그리라고 지시하면 결과가 좋지 않음
     * 픽셀화 및 디더링은 ImageMagick을 이용
     * 여러번 시도끝에 적합한 이미지를 만드는 스타일 문구를 찾음
       → "" in the style of a high quality, atmospheric high renaissance oil on canvas painting""
     * 원근감을 조절하고 원하는 장소를 표현하기 위해 한 일들
          + 시대, 시간 및 조명을 지정 : ""on a sunny day in the 2000s""
          + 전체 위치에 대한 구체적 설명(""town"", ""city"" 또는 유명 장소)
          + 포커스할 위치 (""facade, ""hotel entrance"") 와 주변 건물들 ""houses"", ""streets"", ""plains""
          + 명시적으로 빈 공간 요청 가능 ""…and street in front"" , ""plaza surrounded by…""
          + 공간을 비워달라고 요청할 필요가 있음. 안그러면 DALL-E가 뭔가를 채워버림
          + 카메라 위치 지정 가능 ""seen from second-floor balcony""
          + 절대로 ""video game""은 포함하지 말 것. 그러면 모든 부분이 파란색 네온불빛으로 가득 참
     * DALL-E는 1024x1024 이미지를 만드니까 요즘 화면에 맞게 하려면 19:10 정도로 바꿔야 함
          + 이미지를 반으로 잘라서 양쪽 이미지의 빈 부분을 투명하게 만든 후,
          + DALL-E에 다시 업로드하여 같은 프롬프트로 나머지를 생성하도록 지시
          + 추가로 뭔가를 더 만들도록 프롬프트 수정 가능
     * 현재 DALL-E 가격 구조로 계산해보면
          + 성공적인 게임은 약 70개 정도의 장면을 가지지만, 50개로 만든다고 가정해보면
          + 원하는 장소 이미지 한장을 만들기 위해서는 약 200장을 만들어봐야함. 50장소면 총 10000장
          + 수정 및 수평확장을 위해서 2배정도 필요하다고 해보면 20000장 생성이 필요
          + 20,000 * $0.0543 = $1,087 정도니까 조금 빠르게 성공할때도 있다고 생각해보면, 약 $1000
          + 생성하는데 6초씩 걸리니까 120000초 = 33시간

   번외지만 imageMagick 은 정말 최고인것 같습니다...

   솔직히 말해서 쩌네요!
"
"https://news.hada.io/topic?id=7193","아직 소수의 사람만 얘기하는 Next Big Thing은 뭘까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  아직 소수의 사람만 얘기하는 Next Big Thing은 뭘까요?

   HN의 질문에 대한 1100개의 댓글 중 투표순으로 가져와 봅니다
     * 개인용 차량들이 커지고, 작아질 것 : 전기 모터는 내연기관에 비해 스케일이 쉬움. 장난감부터 대형 광산 트럭까지 다 전기로 가능
          + 작은 것 : 도시들이 중심부에서 전기차만 허용하기 시작(중국도시 일부는 이미 시작). 배기가스 때문. 다음 단계는 아마도 도시 중심부에서 일반 자동차의 절반 넓이인 EV만 허용하게 될 것. 도시 중심부의 차들이 대부분 혼자 이용하기 때문. 이렇게 하면 통행량을 2배로 늘릴 수 있음. 이런차들은 $10k 이하로도 가능
          + 큰 것 : 내연기관 RV(캠핑카)는 유지하기 어렵지만, 전기 RV는 훨씬 좋음. 온수,TV,난방,냉장 모든 기능이 전기로 동작하기 때문. 일반 집처럼 별로 유지보수가 필요없지만, 더 작음. 테슬라는 ""캠핑 모드""가 이미 있음. 테슬라가 전기 RV를 만든다면 아마도 젊은이들의 '첫번째 집'이 될 수도. $70k에 사서 집 렌트비용보다 더 싸게 이용 가능
     * 에너지 : 태양광 패널비용이 기하급수적으로 싸지는 중. 배터리 기술도 마찬가지. 두가지를 합치면, $4200만 들이면 일 30Kwh 를 만드는 태양광 패널 + 배터리를 구축 가능. 이러면 미국 가정의 연간 전기 소비금액인 $1200 을 3.5년만에 회수 가능. 곧 2년으로 감소될 듯.
       에너지 비용의 감소는 다양한 사이드 이펙트를 발생. 분산 에너지 그리드, 남는 에너지의 사용 케이스(비트코인 마이닝, 탄소 포집, 수소 생산 등)
     * WLAN 센싱 : MESH WiFi 시스템은 사람들의 수, 위치, 모션 및 제스처 등을 감지 가능. IEEE 802.11bf 스펙이 1~2년 내에 승인 받을 것. 홈 보안이 훌륭해 지겠지만, 소름돋기도 함. 옆 집에서 집안의 움직임을 감지하는 것을 어찌 막을수 있을까 ?
     * 실시간 협업 리모트 근무 환경용 도구들이 중요해짐. CRDT를 쉽게 지원해주는 툴킷이 많아졌고, 5년마다 새로운 DB들이 나오고 있는데, 실시간 CRDT 기반의 DB가 ""NBT""라고 생각
     * Michael Levin의 그룹이 진행하는 연구인 ""How organisms control anatomy growth(유기체가 해부학적 성장을 제어하는 방법)""가 매우 흥미로움. 유전적인 변화없이 새로운 종을 만드는 것(마이클 레빈은 전기를 사용해 개구리의 절단된 사지를 재생시키는데 성공함)
     * DC기반의 집 전기 시스템. 미래의 집이 태양광 및 배터리를 가지게 된다면, 집에서 전기를 사용하는 가전제품은 DC 기반으로 해도 되지 않을까?(우리가 집에서 쓰는 AC는 먼거리 송전에 유리함)
     * 태양전지판의 전력을 이용하여 식품을 합성하는 것
     * 큰 것은 아니지만 일상을 바꿔줄 경험들
          + 쇼핑할때 나를 따라다니는 로봇 카트
          + 직접 식량을 재배하는 정원이 있는 아파트와 같은 Eco-Village의 증가
          + 도시에 열섬효과를 줄이기위해 그늘을 제공하는 큰 나무 심기
          + 짧은 거리를 이용하는 전기 비행기 택시
          + 플라스틱 대체제의 폭넓은 활용(버섯으로 만든 포장재 등)
     * 실제와 같은 홀로그래픽 디스플레이
     * WebAssembly 의 가능성
     * 드론 기술이 점점 소형화 될 것. 마이크와 카메라를 내장하지만 추적이 불가능해짐. 이제 집과 사무실에 값비싼 보호장치를 들이지 않는 이상 완전한 사생활 보호는 힘들어짐. 물론 DeepFake가 너무 좋아져서 그거라고 주장은 가능하겠지만..
     * 5단계 자율 주행을 내장한 전기 RV(캠핑카) : 샤워 가능하고, 책상, 풀사이즈 주방, 퀸사이즈 침대, 50인치 TV가 설치된. 교통체증이나 운전에 신경쓸 필요없이 생활이 가능하면 출퇴근도 즐거워지지 않을까?
     * 범용 휴머노이드 로봇 : 노동이 소프트웨어가 될 것. 모든 노동이 반복가능하고, 테스트 가능하고, 시뮬레이션 가능하고, 확장가능하고, 검증가능해짐. 즉 지금 소프트웨어에 일어나는 모든일이 노동에 적용 가능.
          + 깃헙 오픈소스 레포에서 통나무집 설계도를 풀링하고, 원하는대로 변경하고 시뮬레이션 한뒤, 로봇에게 공구를 주고 숲속에 던져놓으면 스펙대로 완전한 통나무집이 만들어지는 것을 상상해보라
          + 경제 성장을 위해서 더 이상 인간이 필요하지 않게 될 것
          + 테슬라가 곧 휴머노이드 로봇 프로토타입을 선보인다는데, 애플도 만들지 않을까 ?
     * PGT(Preimplantation polygenetic testing, 착상전 유전 진단) : 원하는 특성(더 똑똑하거나 더 매력적인)을 가진 아기를 낳을 수 있게 된다는 것. 이게 만약 비싸다면?
     * 프롬프트 엔지니어링 : ""programming as verbal intelligence""
          + DALL-E 에게 완벽한 그림을 그리도록 잘 설명하는 법이나, GPT-3가 좋은 글을 만들어내도록 지시하는 것
     * 내연기관차(ICE) 포기에 따른 문제들 : 많은 자동차 회사가 내연기관차 생산을 중단한다는데, 우리는 준비되어 있나요?
     * 탈세계화(Deglobalization) : 미국은 1970년대 이후 아웃소싱한 제조업을 재건해야 하며, 수입식품이나 에너지에 의존하는 나라들은 어려워질수 있음. 러시아/우크라이나 전쟁으로 1~2년안에 기근이 발생할 가능성이 있음

   그래도 다들 낙관적이네요. 하기사 기술발전은 낙관적인 사람들이 주도하니까요.
   인간과 안드로이드의 중간단계인 사이보그 기술은 언제쯤 실현될까요.

   흥미롭고 여러 인사이트를 얻을 수 있네요. 좋은 글 소개해 주셔서 감사합니다 :)

   테슬라가 전기 RV를 만든다면 아마도 젊은이들의 '첫번째 집'이 될 수도 / 직접 식량을 재배하는 정원이 있는 아파트와 같은 Eco-Village의 증가

   저는 요런 것들이 실현됐으면 좋겠네요. 배양육 기술까지 더해진다면, 전기만 밖에서 끌어오는걸로 완전히 자급자족할 수 있는 개인용 바이오스피어를 만들 수 있지 않을까요?

   아, 태양발전 효율까지 좋아진다면 전기마저 밖에서 끌어올 필요가 없겠군요...

   전기차 캠핑카는 당장 사고 싶네요. 냉장고 TV 사용하려면 배터리 용량이나 충전 시간이 어느 정도 될 수 있을지 궁금하긴 하지만

   WebAssembly의 가능성이 기대됩니다.

   황당한 얘기들도 많은데, 다양한 생각이 들게하는 포스트입니다.
   저는 전기차/태양광으로 바뀌게 되는 것들과 AI와 다목적 로봇이 주게 될 변화가 가장 클 것 같아요.
"
"https://news.hada.io/topic?id=7230","DataDog의 Serverless 상태 보고서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DataDog의 Serverless 상태 보고서

    1. 각 클라우드에서 절반 이상의 조직이 서버리스를 채택했다.

     * 2020년에는 AWS에서 50%가 넘었는데 이젠 AWS, Azure, Google Cloud 모두에서 50%가 넘었다.
     * AWS: AWS Lambda, AWS App Runner, ECS Fargate, EKS Fargate
     * Azure: Azure Functions, AKS running on Azure Container Instances
     * Google Cloud: Google Cloud Functions, Google App Engine, Google Cloud Run

    2. Lambda 사용자에서 Python, Node.js가 여전히 지배적이다.

     * 이 두 언어는 Lambda 초기부터 지원되었던 언어이다.
     * 처음 Lambda를 도입할 때 편하고 자료도 많은 Python, Node.js를 주로 사용한다.
     * 이후 Lambda에 익숙해 지면 Python, Node.js로 작성되지 않은 워크로드를 Lambda로 마이그레이션 할 가능성이 높아진다.
     * 이로 인해 Lambda에서 Go와 Java의 채택이 높아져서 Lambda 조직의 30% 이상이 이 두 언어를 사용하고 있다.

    3. 큰 조직의 60% 이상이 최소 3개의 언어로 Lambda를 배포한다.

     * 이는 서버리스 애플리케이션을 만드는데 모든 상황에 맞는 한가지 방법은 없다는 것을 보여주고 사용사례에 따라 다른 런타임을 쓴다는 것을 의미한다.

    4. Lambda 함수를 가장 많이 호출하는 AWS 기술은 API Gateway와 SQS다.

    5. API Gateway가 호출하는 Lambda의 80%는 단일 목적 함수이다.

     * Lambda 함수에서 API를 제공하는 두가지 패턴은 모노리식 함수와 단일목적 함수다.
     * 모노리식 함수는 여러 HTTP 엔드포인트를 제공하고 여러 타입의 작업을 실행할 내부 라우팅 로직이 있다.
     * 단일목적 함수는 하나의 HTTP 메서드/엔드포인트에만 응답한다.
     * 이는 단일 목적함수가 많은 장점이 있다는 것을 보여준다.
     * 단일 목적함수는 다른 것과 격리되어 있고 더 안전하게 운영할 수 있으며 콜드 스타트시간도 짧다.

    6. Lambda 사용자 5명 중 한명은 컨테이너 이미지로 배포한다.

     * AWS는 2020년 zip 파일 외에 Docker 컨테이너 이미지로 배포할 수 있도록 Lambda에서 지원하기 시작했다.
     * 이후 서버리스와 컨테이너 기술의 장접을 합쳐서 쓰는 것이 지속적으로 증가해서 20%가 되었다.
     * zip 파일의 제한은 250MB이지만 컨테이너 이미지는 10GB까지 가능하다.

    7. Lambda 사용자의 20% 이상은 ECS Fargate도 사용한다.

     * Lambda가 인기를 끌면서 사용자들은 서버리스를 확장할 방법을 찾게되어 ECS Fargate도 쓰게 되었다.
     * ECS EC2의 사용은 줄어들고 ECS Fargate의 사용은 늘어나고 있다

    8. Google Cloud에서 서버리스 애플리케이션을 배포하는 방법 중 Google Cloud Run이 가장 빠르게 늘어나고 있다.

     * Google Cloud를 쓰는 DataDog 고객 중 40%가 Google Cloud Functions를 채택했지만 이는 Google Cloud Run보다 3% 정도만 높은 채택율이다.

    9. Azure Functions는 Azure에가 가장 인기있는 서버리스 제품이지만 Azure Container Instances의 채택이 빠르게 증가하고 있다.

     * Azure 고객 중 40% 이상이 Azure의 FaaS 제품인 Azure Functions를 사용하고 있다.
     * 서버리스 컨테이너 제품인 Azure Container Instances의 채택이 크게 증가해서 30%에 가까워졌다.

   거기에 데독 비용 자체를 아낄려면 서버리스를 써야해서...ㅎㅎ
"
"https://news.hada.io/topic?id=7217","제임스 웹 우주망원경의 통합과학기기모듈은 2003년에 나온 자바스크립트 엔진으로 작동함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            제임스 웹 우주망원경의 통합과학기기모듈은 2003년에 나온 자바스크립트 엔진으로 작동함

     * 제임스 웹 망원경의 통합과학기기모듈(Integrated Science Instrument Module)은 근적외선 카메라. 근적외선 분광기, 근적외선 이미지 및 분광기. 중적외선 기기로 구성되어 감지된 적외선을 디지털 화상처리하는 제임스 웹 망원경의 핵심 요소.
     * 제임스 웹 망원경의 통합과학기기모듈(Integrated Science Instrument Module)은 제어 소프트웨어가 자바스크립트로 만들어져 있으며 2003년 1월에 마지막으로 릴리즈된 Nombas ScriptEase 5.00e이라는 자바스크립트 엔진 위에 작동됨.
     * 자바스크립트를 사용한 이유로는 유연한 운영, 좋은 가독성, 지상에서의 테스트 후 수정이 편하다는 점 등을 꼽음.

   심지어 ES5가 나오기 한참 전 엔진인데...ㄷㄷ

   Nombas 창업자(2018년부터는 간호사로 일하고 있습니다.)가 쓴 Nombas사의 역사( http://brent-noorda.com/nombas/history/HistoryOfNombas.html ).
   Nombas는 2001년 파산 직전에 Openwave( https://en.wikipedia.org/wiki/Openwave )에 인수되어 사라졌습니다.

   2001년이 아니고 2003년이군요.
"
"https://news.hada.io/topic?id=7293","2022년에 가장 중요한 14가지 기술 동향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        2022년에 가장 중요한 14가지 기술 동향

     * 세계적인 컨설팅 회사인 맥킨지가 2022년에 가장 중요한 14가지 기술 동향에 대해 발표했어요. 투자, 연구 활동, 뉴스 보도 등의 데이터를 분석하고 수십 번의 인터뷰를 진행하며 연구에 수 백 시간을 투자했다고 하네요.
     * 맥킨지가 선정한 14가지 기술 동향은 다음과 같아요. 특정 기술에 대해 더 알아보고 싶으신 분들은 맥킨지 홈페이지에 가입하시면 원본 콘텐츠의 하단에서 각 기술별 PDF 파일을 다운로드하실 수 있어요.

    1. 응용 인공지능 (Applied AI)
       -> 머신 러닝을 통해 활동을 자동화하고 기능을 개선하고 더 나은 결정을 내릴 수 있도록 도움
    2. 진보한 연결성 (Advanced connectivity)
       -> 5G/6G 셀룰러, 무선 저전력 네트워크, 저궤도 위성 등의 기술을 통한 다양한 디지털 솔루션 지원
    3. 생명공학의 미래 (Future of bioengineering)
       -> 생물학 및 정보 기술의 융합을 통한 혁신적인 제품과 서비스 창출
    4. 청정에너지의 미래 (Future of clean energy)
       -> 청정에너지 전력 저장 및 분배 등을 통해 온실가스 배출량을 제로로 만드는 데 도움
    5. 모빌리티의 미래 (Future of mobility)
       -> 사람 혹은 상품의 이동 효율성과 지속 가능성을 개선하는 것을 목표로 함
    6. 지속 가능한 소비의 미래 (Future of sustainable consumption)
       -> 기후 변화를 포함한 환경 위험을 해결하기 위해 기술을 통해 소비를 변화시킴
    7. 웹3 (Web3)
       -> 개방형 표준 및 프로토콜을 사용하는 분산형 인터넷
       -> 디지털 소유권을 통해 새로운 비즈니스 모델을 만들 수 있음
    8. 머신 러닝 산업화 (Industrializing machine learning)
       -> 산업화된 머신 러닝은 소프트웨어 및 하드웨어 솔루션을 통해 머신 러닝의 개발을 빠르게 하고 성능 모니터링, 안정성, 지속적인 개선을 지원함
    9. 몰입형 현실 기술 (Immersive-reality technologies)
       -> 사용자가 혼합 또는 증강 현실을 통해 세계를 다르게 볼 수 있도록, 혹은 가상 현실을 통해 다른 세계를 볼 수 있도록 함
   10. 클라우드 및 엣지 컴퓨팅 (Cloud and edge computing)
       -> 데이터 주권, 자율성, 리소스 생산성, 대기 시간 및 보안을 개선하기 위해 원격 데이터 센터와 로컬 노드에 컴퓨팅 워크 로드를 분산하는 작업이 포함됨
   11. 트러스트 아키텍처 및 디지털 ID (Trust architectures and digital identity)
       -> 디지털 신뢰 기술을 통해 데이터와 디지털 지원 제품 및 서비스 사용에 대한 이해관계자의 신뢰를 구축, 확장 및 유지 가능
   12. 우주 기술의 미래 (Future of space technologies)
       -> 우주 기술의 발전 및 비용 절감은 혁신적인 우주 운영 및 서비스를 가능하게 함
   13. 양자 기술 (Quantum technologies)
       -> 특정 문제에 대한 계산 성능을 기하급수적으로 향상시키고 네트워크를 보다 안전하게 만들 수 있음
   14. 차세대 소프트웨어 개발 (Next-generation software development)
       -> 로우 코드 또는 노코드 플랫폼 등의 새로운 툴을 통해 소프트웨어 응용 프로그램 개발을 지원하여 프로세스 및 소프트웨어 품질을 개선

   뉴스레터 안에 링크가 잘못 걸려 있네요.

   https://mckinsey.com/business-functions/mckinsey-digital/…
   ↓
   https://mckinsey.com/business-functions/mckinsey-digital/…
"
"https://news.hada.io/topic?id=7239","SurrealDB - 분산 Document-Graph 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  SurrealDB - 분산 Document-Graph 데이터베이스

     * DB면서 실시간 협업 API 백엔드로 동작
     * REST API, SurrealQL/JSON-RPC over WebSocket, GraphQL(지원 예정)
     * 멀티테넌시 데이터 분리, Schemafull/Schemaless, 멀티테이블/멀티로우 트랜잭션, GeoSpatial 쿼리
     * 다양한 함수들 지원 : Array, Http, Math, String, Geo, Time, Embedded JavaScript,..
     * JavaScript/Go/Rust/Deno SDK 제공
       → WASM, Node.js, Python, C, PHP, Swift, Java SDK 제공 예정
     * 맥/리눅스/윈도우 설치 가능
     * 싱글노드(인메모리)), 분산(TiKV 클러스터)로 동작
       → 싱글노드(on-disk), 분산(RAFT) 등으로도 동작 예정
     * 데이터베이스 코어는 BSL(Business Source License)로 공개

   CockroachDB BSL로 라이센스 변경 - 오픈소스지만 상업화는 안됨
   Sentry, BSL(Business Source License)로 오픈소스 라이센스 변경
"
"https://news.hada.io/topic?id=7233","애플, 프라이버시 기능으로 약해진 경쟁자를 제치고 자신만의 광고 제국을 건설하기 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            애플, 프라이버시 기능으로 약해진 경쟁자를 제치고 자신만의 광고 제국을 건설하기 시작

     * 온라인 광고시장이 침체하는 가운데, 사용자 행동 추적을 금지한 애플의 행동으로 인해 Meta 같은 업체를 무릎 꿀림
     * 애플은 점점 광고 비즈니스를 키워나가는 중(앱스토어, 애플 맵)
     * 애플은 하드웨어 판매 둔화를 완충시키기 위해, 앱/미디어/소프트웨어로 수익을 내는 서비스 팀을 재구성했음
     * 지난 분기에 광고,앱스토어,애플뮤직,애플TV+,애플 페이 등으로 내는 서비스 수익이 $19.6b에 도달하여 분기 매출의 25%
     * 5년전 같은 분기에 애플의 서비스 매출은 13% 정도 였음
     * 애플이 서비스 수익의 어느정도가 광고 매출인지 밝히지 않지만, 블룸버그에 의하면 년 $4b(5.3조원)정도임
     * 분석가들은 애플의 광고 비즈니스가 2025년에 $6b 정도가 될 것이라고 봄
          + 광고로 대부분의 매출이 나는 스냅챗의 작년 연매출이 $4.1b 이며, 트위터도 작년 광고 매출이 $4.5b
     * 애플은 작년에 사용자를 추적하지 못하도록 하는 기능을 업데이트하면서 광고비즈니스가 호황을 누리기 시작
          + 이것은 Meta, Snapchat 같은 회사에는 재앙이었음
     * 애플은 오래전부터 프라이버시를 푸시해왔지만, 페이스북의 많은 데이터 유출과 개인 정보 문제가 이를 더 확장하는데 도움이 되었음
     * 애플의 가장 큰 광고 수익원은 검색 광고. 앱다운로드 홍보가 Meta,Snapchat 등에서 애플로 많이 이동했음
     * 애플의 검색광고를 통한 앱 다운로드는 약 50% 이며, 이는 2021년 4월의 20%에서 엄청 증가한 것

   이정도면 반독점으로 맞아야 하지 않나 싶은데... 정말 이미지 마케팅을 잘한건지 조용하네요

   예정된 수순이죠 모든 빅테크는 프라이버시 관점에선 똑같습니다 애플의 차이라고는 보안과 프라이버시에 신경 쓰는 듯한 이미지 마케팅에 굉장히 성공했단 거 하나뿐

   누구보다 privacy 침해를 열심히 했던 애플이 privacy를 명분으로 칼을 휘두르는게 코미디네요

   어메이징 사과찡 🍎

   애플, ATT도입 후 6개월간 광고시장 점유율 3배 증가
   iOS 14.5의 앱 추적 투명성(ATT)기능, 96%가 추적 비활성화
"
"https://news.hada.io/topic?id=7232","mvSQLite - SQLite 호환 분산 Database","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    mvSQLite - SQLite 호환 분산 Database

     * SQLite의 OS portability 레이어인 VFS를 이용,
       애플의 분산 키밸류 저장소 오픈소스인 FoundationDB 를 스토리지 레이어로 사용
     * 단순 replicate가 아닌 read/write 모두에 대한 scalability 제공
     * LD_PRELOAD=libmvsqlite_preload.s 를 추가하는 것만으로 작동. 기존 SQLite 이용 코드를 변경할 필요 없음
     * 자동 샤딩

   이런 주제에서 애플이 나오니까 왠지 신선한 느낌이 들어요 ^^;

   소개글 : Turning SQLite into a distributed database

   rqlite - SQLite 기반의 가벼운 분산 데이터베이스
   저는 서버사이드 SQLite에 올인합니다
   Litestream - SQLite 스트리밍 복제 도구
   SQLite를 Primary DB로 사용해보신 분?
"
"https://news.hada.io/topic?id=7214","컴퓨터/윈도우를 정리/관리하는 방법 Ver 5.7 (2022-08-14 업데이트) ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             컴퓨터/윈도우를 정리/관리하는 방법 Ver 5.7 (2022-08-14 업데이트)

   컴퓨터 스펙이 향상됨에 따라서 예전만큼 윈도우 최적화에 대한 필요성이 중요시 되지 않는 시대이긴 합니다만, 시간내서 한번쯤 관리하면 컴퓨터와 윈도우 좀 더 오래 쓰는데 도움이 되긴하더군요.

   오래전부터 윈도우 쓰면서 나름대로 체득한 윈도우, 시스템 관리법 정리 업데이트 해봤습니다. 이 글의 목록은 대략 아래와 같습니다.

   아래 정도만 주기적으로 수행하면 별도의 윈도우 재설치는 필요치 않더군요
    1. 윈도우 업데이트
    2. 하드웨어 드라이버, 펌웨어 업데이트
    3. 프로그램 업데이트
    4. 하드디스크 폴더, 파일 정리
    5. 시작 서비스, 프로그램, 프로세스 정리
    6. 스케줄 작업 정리
    7. CCleaner
    8. 악성 ActiveX 프로그램 예방
    9. Hosts 파일 업데이트
   10. 바이러스, 스파이웨어 검사
   11. 디스크 조각 모음
   12. 하드디스크 데이터 백업

   GeekNews 회원분들이 알고 계신 윈도우 정리, 관리와 관련된 유용한 팁, 프로그램, 서비스, 노하우 있으시면 답글로 알려주시면 좋을 것 같습니다 😄😄

   SSD 주로 쓰시는 분들은 디스크 조각 모음은 안하셔도 될 듯 합니다 ㅎㅎ

   아 예 본문 보시면 아시겠지만 언급해두긴했습니다

   https://news.hada.io/topic?id=4851
   식탁보 프로젝트의 샌드박스도 좋더라고요

   알려주셔서 감사합니다. 한번 써봐야겠네요

   맥을 주로 쓰고 게임용으로 오랜만에 PC구입했는데 많이 도움이 되네요

   예 윈도우 주기적으로 관리해주면 좋은 것 같습니다. 업데이트, 백업, 악성코드 트래커 차단하면 괜찮더군요

   예전부터 Malware Zero Kit을 가벼운 PUP 제거 도구 정도로 간간히 돌려주고 있습니다 ㅋㅋ https://malzero.xyz/

   저는 사용해본적 없긴한데 추천하시는 분들 꽤 있더군요. 나중에 한번 써봐야겠네요. 답글 감사합니다

   말씀하신대로 최적화의 필요성을 Windows 7 이후로는 거의 느껴보지 못했습니다. 직장인이 되고 최대한 능력되는 선에서 좋은 하드웨어를 구성한 것도 있구요.

   가끔 구라제거기 한번씩 돌려주는 정도면 쾌적한 듯 합니다. 예전에는 CCleaner 구입도 해서 썼었는데 존재 자체를 잊어버리고 있었네요 ;)

   프로 에디션부터는 샌드박스 기능이 있어서, 금융 전용 샌드박스를 만드는 것도 방법입니다요

   저도 프로 에디션의 샌드박스 기능을 활용하여 금융 서비스 이용을 위한 샌드박스를 간편하게 만들어주는 식탁보라는 프로그램을 쓰고 있는데 주변에 권할 만합니다.

   알려주셔서 감사합니다. 한번 써봐야겠네요 😄😄

   예 샌드박스 기능 활용도 좋을것 같네요

   예 구라제거기는 필수인것 같습니다. (보안프로그램 설치하면 컴퓨터 내상을 입는 느낌이라 인터넷 뱅킹 등은 모바일 앱에서 하게 습관이 바뀌긴한것 같습니다.)

   CCleaner 는 CCEnhancer 로 추가 삭제 설정 파일 업데이트 해서 쓰면 좋더군요. (물론 이것도 문제 생길 수 있으니 세세하게 살펴가면서 선택이 필요하겠네요)
"
"https://news.hada.io/topic?id=7238","Maps.earth - 셀프 호스트 가능한 오픈소스 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Maps.earth - 셀프 호스트 가능한 오픈소스 지도

     * 셀프 호스트 가능한 지도서버를 만드는 오픈소스 프로젝트인 Headway Project의 지구 전체 버전 설치본
     * 누구나 자신의 지역만 떼어서 쉽게 셀프 호스트 가능
          + 위치 및 주소 검색 가능
          + 자전거/자동차/도보 경로 라우팅 제공
          + $ earthly -P +build --area=Seoul
            $ cp .env-example .env
            $ docker-compose up -d
     * OpenStreetMap + MapLibre + Pelias + OpenTripPlanner + Planetiler + Valhalla 등

   Protomaps - OpenStreetMap 으로 나만의 지도시스템 만들기
   Geospatial 웹서비스를 만들때 추천하는 도구들 모음
   Switch2OSM - OpenStreetMap 전환 가이드
   tilemaker - OpenStreetMap 데이터로 지도 벡터 타일 만들기
"
"https://news.hada.io/topic?id=7272","Heroicons 2.0 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Heroicons 2.0 릴리즈

     * Tailwind CSS 개발자들이 만든 아이콘 모음. 오픈소스(MIT)
     * 264개의 아이콘을 완전히 새로 그림
     * 더 얇아진 24x24 1.5 px 아웃라인 스트로크 버전 추가(네비게이션 & 마케팅)
     * Solid Fill : 24x24, 20x20 (버튼/폼용) 버전도 제공 \
     * React/Vue 라이브러리 및 공식 Figma 컴포넌트도 제공

   Heroicons - Tailwind CSS 개발자들이 만든 아이콘 모음 226개
"
"https://news.hada.io/topic?id=7273","2022 카타르 월드컵: 사막 경기장을 식히는 '쿨'한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2022 카타르 월드컵: 사막 경기장을 식히는 '쿨'한 방법

     * 섭씨 40도를 넘는 나라가 환경에 해를 끼치지 않고 선수&관중이 경기를 즐길수 있게 한 방법
     * 알자누브 스타디움의 공기흐름을 애니메이션으로 설명
          + 공기가 타고 흐르면서 빠져나가는 개폐식 지붕
          + 관중석 아래 통풍구에서 나오는 신선한 공기
          + 선수들을 위해 시원한 공기층을 형성하는 노즐
          + 더워진 공기를 빼내는 흡수팬
          + 빼낸 공기는 지하 열교환기의 냉각수가 담긴 파이프를 통과하며 차가워짐
          + 열을 흡수해 따뜻해진 냉각수는 경기장에서 3km 떨어진 4만리터짜리 저장탱크로 옮겨지고 다시 차가워진뒤 다음날 경기에서 재사용
          + 전체 전력은 80km 떨어진 태양에너지 발전소를 통해 공급
     * ""월드컵 경기가 모두 끝난 뒤에도 유산으로 남을 만한 프로젝트를 꿈꾼다""
"
"https://news.hada.io/topic?id=7226","존 카맥의 새로운 AGI회사 Keen Technologies, 260억 투자 받아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             존 카맥의 새로운 AGI회사 Keen Technologies, 260억 투자 받아

     * AGI(Artificial General Intelligence, 인공 일반 지능) : 인간이 할 수 있는 어떠한 지적인 업무도 성공적으로 해낼 수 있는 (가상적인) 기계의 지능
     * Nat Friedman(GitHub)과 Daniel Gross (YC) 이 주도하고 Patrick Collison(Stripe CEO), Tobi Lutke(Shopify CEO) 및 Sequoia, CapitalFactory 등이 투자에 참여

   바로 다음 트윗들

     ""내가 직접 $20M 수표를 쓰는 것도 가능은 하지만, 다른 사람의 돈이 걸리면 더 큰 규율과 결단을 가지게 됨. 잠깐 가능성에 얘기했는데, Nat가 나를 밀어붙여서 기쁩니다.""
     ""Meta 의 VR쪽 컨설팅은 계속하고, 내 시간의 20%를 이 회사에 할애할 예정""
"
"https://news.hada.io/topic?id=7191","Android 13 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Android 13 출시

   안드로이드 13이 공식적으로 출시되었습니다.

   안드로이드 개발자 블로그나 개발자 레퍼런스에 있는 문서는 이제 슬슬 식상(?)해졌으니, OS자체 변경점이 정리된 페이지를 붙였습니다.

   덤으로 Android 기기 제조사에서 지켜야할 호환성목록문서(CDD)도 업데이트 되었습니다.

   Android 12에서 13으로 올라가면서 바뀐 호환성 목록은 아래 URL에서 확인할 수 있습니다.
   https://source.android.com/docs/compatibility/release-notes

   앱별 언어 설정이 가장 큰 변경점인 것 같은데 매니페스트에 android:localeConfig 항목을 넣어주지 않으면 동작하지 않는다는 사실이 너무 이상하네요.
   안드로이드 앱들은 원래부터 다국어 지원을 전제로 설계되어 있고 시스템 언어를 바꾸면 자동으로 언어가 바뀌는데, 저런 속성 없이도 시스템에서 앱에다가 ""현재 너의 언어설정은 한국어야""하고 알려주면 될 것을 왜 굳이 android:localeConfig 속성이 없으면 앱별 언어 설정을 아예 못 하게 만들었나 의문입니다.
   안드로이드 13보다 한참 전부터 Magisk 모듈 중에 앱별 언어 설정이 가능하게 해주는 게 있었는데 그런 식으로 동작했었거든요

   앱별로 언어설정을 할수있는 시스템 설정 기능을 추가 하는걸지도 모르겠네요

   기기에서 제공되지 않는 언어가 잘 동작할지 안할지 알수가 없는 상황에서, 선택권을 앱 개발사에게 주려는 것 같습니다.
   시스템 언어가 바뀌더라도, 앱 개발사가 해당 언어에 대한 추가 지원(문자열 리소스라던가 텍스트레이아웃 등등)이 포함되지 않으면, 억지로 로케일을 바꾼다고 하더라도 그렇게 효용이 없긴 합니다.
"
