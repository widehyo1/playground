"https://news.hada.io/topic?id=19000","OCaml을 위한 개선된 빌드 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OCaml을 위한 개선된 빌드 시스템

        Hacker News 의견

     * Dune의 충돌 메시지에 대한 유머가 있음. 이는 프로그래밍에서 예외 처리의 중요성을 강조함
     * Jane Street의 기술 팟캐스트 Signals and Threads의 에피소드가 추천됨. 특히 2020년의 빌드 시스템, 프로그래밍의 미래, 운영 체제에 대한 에피소드가 흥미로움
     * Jane Street가 HM-타입 함수형 프로그래밍이 실무에서 빠르고 효율적으로 사용될 수 있음을 증명한 것에 대한 존경이 표현됨
     * Ocaml이 고성능 요구 사항에도 실무에서 잘 작동할 수 있음을 보여줌
     * Jane Street에서 금융 산업에서 일하는 것이 일반적인 기술 산업의 90%의 직업보다 더 재미있고 보람 있을 것이라는 생각이 듦
     * 복잡한 코드베이스보다 복잡한 빌드 시스템이 더 나쁨. CMake가 복잡하다고 생각됨
     * Haskell을 사용한 경험이 있으며, Ocaml은 잘 맞지 않았지만 Reason을 시도한 후 Ocaml에 흥미가 생김
     * Jane Street의 오픈 소스 OCaml 라이브러리와 도구가 외부 사용자에게는 아직 준비되지 않았다는 인상을 받음
     * 새로운 빌드 시스템을 개발하고 이를 이식하는 것이 기존의 빌드 도구를 채택하는 것보다 더 의미가 있는지 궁금함
     * Dune이 빌드 시스템 이름 중 최고라고 생각됨
     * Rust에서 온 사용자로서 OCaml의 도구가 부족하다고 느낌. LSP가 ""dune build""를 먼저 실행해야 하고, 새로운 파일 추가 시 다시 빌드해야 LSP가 인식함. 컴파일러 오류도 부족함. OCaml 작성은 즐거웠지만 도구의 부족으로 배우기 어려움
"
"https://news.hada.io/topic?id=18944","DeepSeek, Text-To-Image 생성 모델 Janus Pro 공개 [PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            DeepSeek, Text-To-Image 생성 모델 Janus Pro 공개 [PDF]

     * Janus-Pro: 통합 멀티모달 이해 및 생성 모델의 향상된 버전
     * 기존 Janus 모델을 발전시킨 모델로, 다음과 같은 개선점을 포함함
          + 최적화된 훈련 전략
          + 확장된 훈련 데이터
          + 더 큰 모델 규모로의 확장
     * 목표: 멀티모달 이해와 텍스트-이미지 생성 성능을 향상시키고, 생성 안정성을 강화

주요 성능 향상

  멀티모달 이해

     * Janus-Pro는 멀티모달 이해 벤치마크(MMBench)에서 최고 점수 79.2를 기록
     * 기존 모델(Janus, TokenFlow, MetaMorph)보다 우수한 성능 달성
     * 시각적 인코딩을 분리해 이해와 생성 간 충돌을 완화함

  텍스트-이미지 생성

     * GenEval 벤치마크에서 80% 정확도로 DALL-E 3(67%), SD3-Medium(74%) 등을 능가
     * DPG-Bench에서 84.19점 기록, 다른 모든 모델보다 우수한 성능

모델 구조와 개선

  모델 아키텍처

     * 시각적 인코딩을 멀티모달 이해 및 생성으로 분리
     * 고차원 의미론적 특징을 추출하는 SigLIP 인코더 사용
     * 이미지 디코더는 이미지를 ID로 변환해 LLM 입력으로 연결

  최적화된 훈련 전략

     * 단계별 훈련: 이전 3단계 전략의 비효율성을 개선
          + ImageNet 데이터에서 더 긴 훈련 시간 적용(Stage I)
          + 텍스트-이미지 데이터로만 훈련 집중(Stage II)
     * 데이터 비율 조정: 텍스트-이미지 데이터 비율을 줄이고 멀티모달 이해 성능 강화

  데이터 및 모델 확장

     * 데이터 확장:
          + 멀티모달 이해를 위해 9천만 개의 샘플 추가
          + 7천만 개의 합성 미학 데이터로 텍스트-이미지 생성 데이터 강화
     * 모델 확장:
          + 1.5B에서 7B 규모로 확장, 학습 효율성과 성능 대폭 개선

실험 및 평가

  성능 비교

     * Janus-Pro-7B는 동일한 크기의 모델과 비교해 최고 성능을 보임
          + 멀티모달 이해와 생성에서 TokenFlow-XL(13B) 등 대규모 모델을 능가
     * 생성된 이미지의 안정성과 미학적 품질 모두 개선됨

  한계점

     * 낮은 해상도(384 × 384)는 세부적인 작업(OCR 등)에서 제한적
     * 텍스트-이미지 생성 시 세밀한 디테일 부족

결론

     * Janus-Pro는 훈련 전략, 데이터, 모델 크기 면에서 중요한 진전을 이룸
     * 멀티모달 이해 및 텍스트-이미지 생성 모두에서 최고 성능을 달성
     * 향후 해상도 향상을 통해 세부적인 과제를 해결할 계획
"
"https://news.hada.io/topic?id=18970","ByteStash - 개인용 코드 스니펫 관리 솔루션 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ByteStash - 개인용 코드 스니펫 관리 솔루션

     * 나만의 코드 스니펫을 저장, 구성, 관리하기 위한 셀프 호스팅 웹 애플리케이션
     * 새로운 스니펫 추가, 편집, 필터링을 지원하여 코드 관리 효율성을 높임
     * SQLite 데이터베이스에 스니펫을 안전하게 저장, 사용자만 접근 가능
     * 직관적인 인터페이스를 통해 간편하게 코드 스니펫 추가 및 수정 가능
     * 언어 및 내용별 필터링 지원: 프로그래밍 언어 또는 키워드로 필요한 스니펫을 빠르게 검색
     * Docker-compose로 간단히 셀프호스트 가능
     * React + Tailwind CSS + Node.js + Express
"
"https://news.hada.io/topic?id=18973","IAC, 태양 유사 별의 생명 가능 구역에서 슈퍼-지구 존재 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  IAC, 태양 유사 별의 생명 가능 구역에서 슈퍼-지구 존재 확인

     * 태양과 유사한 별의 거주 가능 구역에 있는 슈퍼 지구 발견
          + **Instituto de Astrofísica de Canarias (IAC)**와 **Universidad de La Laguna (ULL)**은 태양과 유사한 별 HD 20794의 거주 가능 구역에서 슈퍼 지구를 발견했음을 확인함
          + 이 발견은 20년 이상의 관측 결과로, 지구와 유사한 행성 대기의 미래 연구에 대한 가능성을 열어줌
          + 태양과 유사한 별의 거주 가능 구역에서의 행성 탐색은 지구 외 생명체의 가능성을 이해하고, 우리 행성의 생명 발전을 가능하게 한 조건을 연구하는 데 중요함
     * HD 20794의 새로운 행성
          + HD 20794 d로 명명된 이 새로운 행성은 지구 질량의 6배에 달하는 슈퍼 지구로, 647일 동안 별 주위를 공전함
          + 이 궤도는 시스템의 거주 가능 구역에 위치하여, 표면에 액체 상태의 물을 유지할 수 있는 적절한 거리임
          + 이 행성의 거리와 시스템의 근접성은 ELT나 ESA 및 NASA의 미래 우주 임무를 통해 관측하기에 매력적인 후보로 만듦
     * 발견 과정
          + 이 발견은 ESPRESSO와 HARPS 분광기를 통해 20년 이상의 방사 속도 측정 덕분에 가능했음
          + 이 도구들은 행성의 중력에 의해 발생하는 별의 미세한 속도 변화를 측정할 수 있음
          + 연구팀은 스펙트럼에 대한 정교한 처리 기법을 적용하여 2022년에 후보 신호를 식별함
     * 행성의 특성
          + 행성은 거주 가능 구역에 위치하지만, 생명체가 존재할 수 있을지는 아직 불확실함
          + 높은 질량과 타원형 궤도로 인해 우리와는 매우 다른 세계임
          + HD 20794 d의 궤도는 원형이 아닌 타원형으로, 별과의 거리가 크게 변동함
     * 연구의 중요성
          + 이 행성은 인류의 두 번째 집이 될 수는 없지만, 거주 가능성 조건이 시간에 따라 어떻게 변하는지 연구할 수 있는 독특한 기회를 제공함
          + 연구에는 IAC의 여러 연구자들이 기여함

        Hacker News 의견

     * 내년에 PLATO라는 우주 망원경이 L2로 보내질 예정이며, 주 목표는 태양과 유사한 별 주변의 거주 가능 구역에서 지구와 유사한 행성을 찾는 것임
          + Kepler와 TESS 망원경처럼 통과 방법을 사용하여 새로운 외계 행성을 찾을 예정이며, 이전의 어떤 임무와도 달리 같은 하늘의 지점을 1년 이상 관찰할 계획임
          + 프로젝트에 몇 년 전 기여했으며, 질문에 기꺼이 답변할 준비가 되어 있음
     * ""단지 20광년""은 약 200조 킬로미터에 해당하며, Voyager 1의 속도로는 1조 킬로미터를 여행하는 데 약 1600년이 걸림
          + 200조 킬로미터를 도달하는 데는 320,000년이 걸리며, Voyager 1의 속도를 10배로 늘려도 32,000년이 걸림
          + 인간의 수명 내에 도달 가능한 여행 시간을 위해서는 속도를 10,000배로 증가시켜야 함
     * Super-earth의 존재는 직접 관찰된 것이 아니라, 행성 주위에 퍼져 있는 모든 민주주의의 중력 렌즈 효과로 추론된 것임
          + 100% 거주 가능 구역에 있는 것은 아니며, 궤도가 이심률을 가짐
     * BBC의 ""The Habitability of Planets"" 에피소드를 강력히 추천함
     * 계산에 따르면 표면 중력은 약 30 m/s²일 것으로 예상됨
          + 방문이 기대되지 않으며, 지구처럼 큰 달이 있을 수도 있음
          + 달이 우리의 비율과 같다면 인간에게 친숙할 수도 있음
     * 궤도가 이심률을 가짐
          + 너무 추운 것은 한 가지 문제지만, 너무 더운 것은 더 다루기 어려울 것으로 추측됨
     * 이 행성의 ""휴머노이드""가 지구를 방문하여 그들의 중력의 1/6을 경험한다면, 그들은 슈퍼 운동선수가 될지, 거의 기능하지 못할지 궁금함
     * ""Revisiting the multi-planetary system of the nearby star HD 20794""라는 논문이 있음
     * ""좋아! 거기로 가서 모든 생명을 죽이고 모든 것을 파괴하자, 우리가 우리 행성에서 하고 있는 것처럼! 얼마나 부자가 될 수 있을지 상상해봐!""
"
"https://news.hada.io/topic?id=18942","해고로 근본적으로 변화된 나의 업무 인식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         해고로 근본적으로 변화된 나의 업무 인식

     * 5월 4일 오후, 동료로부터 이메일을 확인하라는 메시지를 받음. COO로부터 온 이메일은 회사 전체의 해고를 알렸고, 곧이어 내가 영향을 받았다는 이메일을 받음. 팀원 대부분이 영향을 받았으며, 마지막으로 작별 인사를 나눌 시간이 주어짐.

해고의 징후

     * 해고가 있을 것이라는 징후가 있었음을 회상하며, 이러한 징후를 공유하여 비슷한 상황에 대비할 수 있도록 도움을 주고자 함.

    1. 팀 이벤트 취소

     * 팀 이벤트가 갑자기 취소되는 것은 해고의 초기 징후 중 하나임. 이는 팀 구조에 대한 발표가 있을 예정임을 암시할 수 있음.

    2. 예상치 못한 패키지 알림

     * 일부 직원이 집으로 배송될 패키지에 대한 알림을 받음. 이는 해고 후 장비 반납을 위한 준비일 수 있음.

    3. 리더십의 비전 부족

     * 리더십의 명확한 비전 부재는 해고의 일반적인 징후임. 회사의 방향성이 불분명할 때, 이는 해고로 이어질 수 있음.

    4. 갑작스럽고 모호한 회의

     * 일정에 예고 없이 중요한 회의가 추가되면 해고 발표의 전조일 수 있음.

    5. 분기별 실적 발표 시기

     * 상장 기업의 경우, 해고는 분기 실적 발표와 함께 이루어질 수 있음.

엑셀 표의 한 행일 뿐임

     * 회사에서의 성과에도 불구하고 해고된 경험을 공유하며, 회사에서 개인의 기여가 중요하지 않음을 느꼈다고 설명함.

현대 직장의 신뢰 붕괴

     * 과거에는 개발자 직업이 안전하다고 여겨졌으나, 현재는 회사의 재정적 성과와 상관없이 해고가 발생함. 이는 회사와 직원 간의 신뢰가 깨졌음을 의미함.

독일의 고용 안정성 신화

     * 독일에서의 해고가 불가능하다는 신화에 대해 설명하며, 해고 시 사회적 점수 시스템이 적용된다고 언급함.

아직 해고되지 않은 사람들을 위한 제안

     * 계약 시간 준수, 과도한 노력 자제, 지속적인 인터뷰, 외부 제안을 통한 급여 인상, 이력서에 대한 과도한 고민 자제를 권장함.
     * 회사 이름을 언급하지 않은 이유는 기술 산업의 현재 상태를 반영하기 때문임. 해고는 회사가 직원을 소모품으로 취급하는 현실을 상기시킴.

        Hacker News 의견

     * 30년간 기술 업계에 몸담았던 경험에서, 단순히 계약에만 의존하거나 승진을 위해 다른 직장을 이용하는 것은 좋지 않다고 생각함. 현재 직장에서의 행동이 다음 직장에 영향을 미치며, 뛰어난 성과는 해고를 막지 못하지만, 좋은 인맥은 다음 직장을 찾는 데 도움을 줌.
          + 비관적 태도는 건강에 해로우며, 고객과 동료에게 긍정적인 영향을 미치는 일에 자부심을 느끼는 것이 중요함.
          + 회사에 마음을 주지 말고, 동료와의 관계를 소중히 여길 것.
     * 경영진이 큰 비용을 낭비한 후 저임금 직원들을 해고하는 것은 직원의 동기를 심각하게 저하시킴.
          + 이는 직장 보안이 없다는 것과 경영진이 자금을 책임감 있게 관리하지 못한다는 메시지를 전달함.
     * 여러 번 해고된 경험을 통해 얻은 교훈:
          + 계약 시간만큼만 일하고, 추가로 일할 경우 개인적으로 얻는 것이 있어야 함.
          + 지속 가능한 방식으로 주도적으로 일할 것.
          + 직장 시장을 주시하고, 흥미로운 역할에 대해 면접을 볼 것.
     * 회사가 직원들을 숫자로 취급하고 거짓말을 하는 경험을 함.
          + 독립 계약자처럼 행동하고, 필요 이상으로 일하지 말 것.
     * 회사가 가족처럼 행동하다가 갑자기 계약을 갱신하지 않는 경우를 경험함.
          + 직장에 대한 잘못된 개념을 바로잡음.
     * 기업은 직원들을 필요할 때만 잘 대우하며, 필요 없을 때는 무시함.
          + 기업은 고객과 직원에게 비용을 아끼기 위해 존재하며, 대안적인 직업 형태를 고려할 필요가 있음.
     * 과거에는 성과가 좋고 회사가 안정적이면 직장이 안전했지만, 현재는 회사가 기록적인 재정 결과를 발표하면서도 해고를 감행함.
          + 동료와의 네트워크가 중요하며, 신뢰와 충성심은 동료에게만 느낄 수 있음.
     * Apple에서 26년 동안 근무하며 해고를 피한 경험을 공유함.
          + 회사는 개인에게 관심이 없으며, 자신의 경력 경로를 스스로 개척해야 함.
     * 해고 후 최소한의 일만 하게 되었고, 회사와의 감정적 연결이 끊어짐.
          + 새로운 회사에서도 이전의 잠재력을 발휘하지 않게 됨.
     * 해고를 경험한 후 얻은 교훈:
          + 중요한 역할을 맡고 있다면 해고에서 면제될 가능성이 높음.
          + 자신을 중요하게 만드는 행동은 결국 해고로 이어질 수 있음.
          + 경영진에게 인상을 주는 가장 좋은 방법은 적게 일하고 어려운 문제를 해결하는 것임.

   끄트머리 코멘트에 “자신을 중요하게 만드는 행동은 결국 해고로 이어질 수 있음.” 은 무슨 뜻일까요? 잘 이해되지 않는데…
"
"https://news.hada.io/topic?id=19005","대규모 연구, 젊은 대마초 사용자 뇌 기능 감소 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     대규모 연구, 젊은 대마초 사용자 뇌 기능 감소 발견

    젊은 대마초 사용자의 뇌 기능 저하

     * 연구 배경
          + 대마초 사용이 젊은 성인의 뇌 기능에 미치는 영향을 조사한 가장 큰 연구가 진행됨.
          + 연구 결과는 대마초 사용의 장단점을 이해하는 데 도움을 줄 것임.
          + 대마초의 합법화가 증가하면서 젊은 성인에게 미치는 영향에 대한 논쟁이 계속되고 있음.
     * 연구 방법
          + 콜로라도 대학교 연구진이 주도한 연구로, 22세에서 36세 사이의 성인 1,003명을 대상으로 함.
          + 참가자들은 MRI 스캔, 소변 검사, 대마초 사용 정보 등을 제공함.
          + 참가자들은 최근 대마초 사용 여부에 따라 분류되었으며, 평생 사용 횟수에 따라 무거운 사용자, 중간 사용자, 비사용자로 나뉨.
     * 연구 결과
          + 최근 및 평생 무거운 대마초 사용은 작업 기억 과제에서 뇌 활동 감소와 관련이 있음.
          + 작업 기억은 의사 결정과 행동을 안내하기 위해 정보를 일시적으로 유지하는 능력임.
          + 뇌 활동 감소는 주로 전전두엽 피질 및 전방 섬엽에서 관찰됨.
     * 연구의 한계
          + 연구는 통제되지 않은 횡단 연구로, 대마초와 뇌 기능 간의 인과 관계를 확립할 수 없음.
          + 참가자가 젊은 성인에 국한되어 있어 다른 연령대에 일반화할 수 없음.
          + THC 용량 및 효능, CBD와 같은 추가 성분, 대마초의 투여 방법에 대한 데이터가 부족함.
     * 연구의 중요성
          + 대마초가 뇌에 미치는 영향을 이해하기 위해 대규모 장기 연구가 필요함.
          + 연구 결과는 대마초 사용의 잠재적 위험과 이점을 이해하는 데 기여할 것임.
     * 출처
          + 연구는 JAMA Network Open 저널에 게재됨.

   정신에 영향을 미치는 것을 장기적으로 사용한다면 물리적이든 심리적이든 당연히 부정적인 결과가 생기지 않을까요.

        Hacker News 의견

     * 대마초 사용이 장기적으로 건강에 부정적인 영향을 미칠 가능성이 있다고 믿음. 고등학교 시절 친구들이 대마초에 중독되어 있었고, 그로 인해 사고 능력이 영향을 받았다고 생각함. 그러나 대마초 사용이 그들의 삶에 직접적인 원인이라고 보기는 어려움
     * 젊은 세대의 대마초 사용과 관련하여, 불안이나 ADHD 같은 문제로 자가 치료하는 경우가 많았음. 장기적인 인지적 영향이 있다고 믿지만, 구체적인 효과와 평가 대상에 대해서는 의문이 있음
     * 대마초 사용자는 작업 기억이 감소하는 것이 특징임
     * 작업 기억에 대한 효과 크기는 -0.3 표준 편차이며, P 값은 .02로 FDR에 대해 보정됨. 크지 않지만 믿을 만한 수준임
     * 성인이 된 후 대마초를 적당히 사용했으며, 작업 기억에 약간의 문제가 있지만 일상 생활에는 큰 영향을 미치지 않음. 대마초가 뇌에 좋지 않지만, 일상적으로 사용해도 직무 수행에 큰 차이는 없다고 생각함
     * 25세 이상의 사람들에게는 명백한 문제임. 고등학교 시절 대마초에 빠진 친구들은 기억력이 나쁘고, 대부분 동기부여가 부족하며, 정신적으로 어려움을 겪고 있음. 21세 이전에 대마초를 사용하는 것은 장기적으로 큰 문제임
     * 대마초는 평균적인 사람에게는 비교적 안전하지만, 정신병에 취약한 사람에게는 위험함. 대마초 사용이 정신병을 유발하거나 악화시킬 수 있음. 대마초는 합법화되어야 하지만, 위험성을 이해한다면 대부분의 사람들은 피할 것임
     * 아이들에게 영향을 미치는 문제에 대한 질문을 제기함. 일부 세대는 대마초 사용이 억압의 도구라는 것을 이해할 수 있을지 의문임. 현재 세대는 반항보다는 무관심과 허무주의로 기울어져 있음
     * 대마초가 수면에 100% 영향을 미침. 꿈 일기를 통해 대마초 사용 전후의 수면 변화를 확인할 수 있음. 수면은 높은 성과를 위해 중요하며, 대마초 사용은 피해야 할 이유가 됨
     * 대마초와 뇌 기능에 대한 연구는 제한적이며, 인과 관계를 확정할 수 없음. 연구는 젊은 성인을 대상으로 했기 때문에 다른 연령대에 일반화할 수 없음. 연구의 한계로 인해 대마초에 대한 논의는 도발적이고 비생산적일 수 있음
"
"https://news.hada.io/topic?id=19018","Simon Willison의 o3-mini에 대한 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Simon Willison의 o3-mini에 대한 노트

     * OpenAI의 o3-mini 모델이 새로 공개되었고, 다른 o 시리즈 모델과 마찬가지로 평가하기가 약간 어려움
          + 이제 기존 GPT-4o, o1, o1 Pro 등에 이어 사용 목적에 따라 어떤 모델을 선택할지 결정해야 하는 상황
     * o3-mini System Card (PDF)에 따르면 일부 평가 지표에서 o3-mini가 GPT-4o, o1보다 우수하지만, 모든 항목에서 일관적으로 높은 것은 아님
          + Codeforces ELO 같은 경쟁 프로그래밍 성능 관련 벤치마크 지표에서 특히 좋은 성능을 보임
     * OpenAI는 o3-mini를 이용해 인터넷 검색 후 ChatGPT에서 결과를 요약하도록 허용할 예정
          + 기존 o1 모델은 웹 검색 툴을 ChatGPT에서 사용하지 않았기 때문에, 이번 기능 추가의 활용성이 주목됨
     * 또한 o3-mini는 비전(이미지) 기능을 지원하지 않지만, 차기 mini 모델에서는 비전을 포함할 가능성이 있음
     * 내가 작성한 CLI 도구인 LLM 0.21에서 o3-mini 지원이 추가되었음
          + -o reasoning_effort 옵션으로 high, medium, low 지정 가능
     * 현재 o3-mini는 Tier 3 이상 사용자만 사용 가능함
          + 최소 API 이용액이 $100 이상이어야 해당 티어에 속함
     * o3-mini의 비용은
          + 입력 토큰 100만 개당 $1.10
          + 출력 토큰 100만 개당 $4.40
          + GPT-4o($2.50/$10) 대비 절반 이하의 저렴한 가격이며, o1($15/$60) 대비해서는 1/10 이하의 가격
     * Hacker News 게시물(42890627)을 요약하기 위해 hn-summary.sh 스크립트를 o3-mini로 돌려봄
          + hn-summary.sh 42890627 -o o3-mini
          + 18,936개의 입력 토큰과 2,905개의 출력 토큰 사용, 총 비용은 약 0.033612달러(3.3612 센트)였음
     * o3-mini의 최대 출력 토큰 제한은 100,000개임
          + GPT-4o(16,000개), DeepSeek R1(8,000개), Claude 3.5(8,000개)보다 훨씬 큼
          + 내부 추론에 쓰이는 토큰도 이 한도 내에서 소모되므로 실제 출력이 100,000개에 다다르긴 어려울 수 있음
     * 입력 토큰은 최대 200,000개가 가능하며, GPT-4o의 128,000개보다 확장된 용량
     * 장문의 번역 작업 등에 활용 가능성이 높아 보임
          + 가격이 저렴하고 장문 입력·출력 처리에 유리하기 때문
     * Hacker News에서 전문 번역가 Tom Gally의 코멘트가 흥미로움
          + DeepSeek R1, o3-mini 모두 긴 텍스트 번역 시 후반 품질 저하를 보였다는 언급
          + 처음에는 R1도 나쁘지 않은 것 같았지만, o3-mini가 더 부드럽고 자연스러운 영어로 요구한 글쓰기 스타일에 더 근접한 결과물을 만들어냄
          + 하지만 출력 길이가 R1은 5,855자, o3-mini는 9,052자, 직접 다듬은 버전은 11,021자
          + R1은 후반 일부 문단을 생략했고, o3-mini는 특이한 축약형 문체를 사용했음(명사들 사이에 and 대신 / 를 사용)
          + 이전에 ChatGPT, Claude, Gemini 등은 같은 텍스트 번역에서는 이런 문제를 보이지 않았다는 의견

   OpenAI o3-Mini 출시
"
"https://news.hada.io/topic?id=18924","YC Graveyard: 821개의 비활성 Y Combinator 스타트업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               YC Graveyard: 821개의 비활성 Y Combinator 스타트업

     * YC Graveyard 소개
          + YC Graveyard는 YCombinator의 비활성 스타트업을 모아둔 목록임.
          + 총 821개의 스타트업이 39개의 배치와 50개의 산업에 걸쳐 포함됨.
          + ""Better to have launched and lost than never to have launched at all""이라는 모토를 가지고 있음.
     * 스타트업 목록
          + 보험 및 금융
               o Blume Benefits (W24), Kable (W22), Finantier (W21), Laguna (W20), AlphaFlow (W16) 등 다양한 보험 및 금융 관련 스타트업이 포함됨.
          + 엔지니어링, 제품 및 디자인
               o Fileforge (W24), Stitch Technologies (W24), Codeball (W21), Datamode (W19) 등 엔지니어링과 디자인에 중점을 둔 스타트업이 다수 포함됨.
          + 소비자 건강 및 웰니스
               o Kips Health (S23), Nonu (S19), Penta Medical (S18) 등 건강 및 웰니스 관련 스타트업이 포함됨.
          + 소셜 및 콘텐츠
               o Storyboard (S17), Guggy (S17), Socialmoth (W07) 등 소셜 미디어 및 콘텐츠 관련 스타트업이 포함됨.
          + 리테일 및 소비재
               o Mogara (W23), Vecindario (W22), SprintAI (W20) 등 리테일 및 소비재 관련 스타트업이 포함됨.
          + 기타
               o 다양한 산업에 걸쳐 여러 스타트업이 포함되어 있으며, 각 스타트업은 특정 분야에 특화되어 있음.
     * 스타트업의 다양성
          + 이 목록은 다양한 산업과 분야에 걸쳐 있으며, 각 스타트업은 고유한 비즈니스 모델과 목표를 가지고 있음.
          + 비활성 상태이지만, 각 스타트업은 한때 혁신적인 아이디어와 비전을 가지고 시장에 도전했음.
     * 중요성
          + YC Graveyard는 실패한 스타트업의 교훈을 통해 새로운 창업자들에게 인사이트를 제공할 수 있음.
          + 다양한 산업의 실패 사례를 통해 창업자들이 피해야 할 위험 요소를 학습할 수 있는 기회를 제공함.

        Hacker News 의견

     * 스타트업은 유니콘이 되거나 실패하는 것만이 전부가 아님. 투자자들은 성장하지 않고 유지되는 ""라이프스타일 비즈니스""를 가장 두려워함
          + 투자자들은 갑작스러운 실패로 투자금을 손실 처리하고 세금 공제를 받는 것을 선호함
          + ""인수""는 종종 인재 확보를 위한 ""인수-채용""으로 위장됨
          + 5천만 달러 미만의 인수는 실패로 간주되기도 함
     * 개인적으로 알고 있는 YC 스타트업 세 곳이 사실상 죽었지만 리스트에 포함되지 않음. 이 숫자는 두 배일 것이라고 생각함
     * 자신의 YC 스타트업이 '묘지'에 포함되지 않아 아쉬움
     * 'YC Graveyard' 프로젝트를 좋아함. 각 스타트업의 놀라운 아이디어와 노력을 상기시켜 줌. 비활성 스타트업을 인수하여 기술을 재활용하거나 부활시키는 방법을 모색 중임
     * 실패의 원인이 아이디어, 타이밍, 실행 중 무엇인지 고민하는 것이 흥미로웠음
     * YC에 대해 불만이 있음
          + 창업자의 일반적인 성공은 $0.00임
          + YC는 우선주를 보유하고 있으며, 창업자와 이해관계가 일치하지 않음
          + YC는 창작자를 지원한다고 주장하지만, 실제로는 같은 입장에 있지 않음
          + YC가 가치 있다고 믿지만, 세뇌된 것인지 의문임
     * 스타트업의 ""사망일""과 관련 정보를 알면 흥미로울 것 같음
     * 폐업한 스타트업의 재고 목록은 여기로 이동함: svdisposition.com/auctions
     * 유니콘이 되지 않았지만 안정적인 수입이 있는 경우, 지분을 매입할 수 있는지 궁금함
     * 몇 달 전 스타트업의 변화/전환/폐업을 추적하는 유사한 프로젝트가 있었음. 가벼운 사이트였지만 북마크를 잃어버림. 도움을 요청함
"
"https://news.hada.io/topic?id=18997","게임 개발자를 위한 Hacker News","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         게임 개발자를 위한 Hacker News

     * HackerNews 전면 페이지에 도달
          + 최근 HackerNews의 전면 페이지에 도달한 소식 공유.
     * 픽셀 아트 업스케일러
          + irokaru.github.io에서 제공하는 오픈 소스 아트 개발 도구.
          + 효과적인 알고리듬을 사용하여 픽셀 아트를 업스케일링함.
     * 프랙탈 디더링
          + YouTube에서 제공하는 비디오 그래픽 자료.
          + 표면 안정성을 가진 프랙탈 디더링 기법 소개.
     * SDL 3 공식 출시
          + SDL 3.2.0 버전이 공식적으로 출시됨.
          + 오픈 소스 코드로 GitHub에서 제공됨.
     * Call Of Duty 안티 치트 역공학
          + Black Ops Cold War의 안티 치트 시스템을 역공학한 코드 제공.
     * 게임 개발 관련 블로그 목록
          + GitHub에서 제공하는 게임 개발 관련 블로그의 큐레이션 목록.
     * Riot Tech Blog: 서버 선택 성능 개선
          + Riot Games에서 리그 서버 선택을 간소화하여 성능을 개선한 사례 소개.
     * Ludum Dare 이벤트 취소
          + 2025년 Ludum Dare 이벤트가 재정적 어려움으로 취소됨.
     * Clay: 고성능 UI 레이아웃
          + C 언어로 구현된 고성능 UI 레이아웃 오픈 소스 프로젝트 소개.
     * Godot 디버그 라인 애드온
          + 2D 및 3D 디버그 라인을 그릴 수 있는 Godot 애드온 제공.
     * Tramway SDK
          + Quake, GoldSrc 또는 Source와 유사한 엔진/프레임워크 제공.
     * Blur Busters 오픈 소스 디스플레이 이니셔티브
          + 리프레시 사이클 셰이더를 포함한 오픈 소스 디스플레이 이니셔티브.
     * VoxelSpace: 간단한 지형 렌더링 알고리듬
          + 20줄 미만의 코드로 구현된 지형 렌더링 알고리듬 소개.
     * Handmade Engine 설문조사 결과
          + 엔진 관련 설문조사 결과 공유.
     * Andromeda용 Ghost AI
          + Andromeda 게임을 위한 Ghost AI 코드 제공.
     * AudioMass: 브라우저 내 오디오 편집기
          + Audacity와 유사한 오픈 소스 오디오 편집기.
     * Allusion: 비주얼 라이브러리 매니저
          + 오픈 소스 아트 레퍼런스 개발 도구.
     * LDtk: 현대적인 2D 레벨 에디터
          + Dead Cells 감독이 개발한 현대적인 2D 레벨 에디터.
     * 인디 게임 제작 과정
          + 인디 게임이 어떻게 제작되는지에 대한 비디오 분석.
     * TrenchBroom: FOSS 레벨 에디터
          + Quake 엔진용 FOSS 레벨 에디터로 Unity, Godot, Unreal 등에서 사용 가능.
     * 게임 아이디어에서 게임 컨셉 디자인까지
          + 게임 아이디어가 게임 컨셉 디자인으로 발전하는 과정 소개.
     * 지오메트리 클립맵
          + 간단한 지형 렌더링과 디테일 수준을 제공하는 코드.
     * ‘Cozy’ 게임이란?
          + ‘Cozy’ 게임의 정의와 분석.
     * The Book of Shaders
          + 셰이더 코드와 그래픽 관련 자료 제공.

        Hacker News 의견

     * 게임 개발에 초점을 맞춘 좋은 콘텐츠의 사이트가 많지 않음에 아쉬움을 느끼는 의견이 있음. 특히 gamedev subreddit은 실망스러움
          + 배경 이미지가 눈에 피로감을 준다는 피드백에 동의하는 의견이 있음
          + 사이트의 작업을 칭찬하는 의견이 있음
     * 메인 페이지에 댓글이 3개뿐인 상황에서 초대 전용 방식이 최선인지 의문을 제기하는 의견이 있음
     * 다양한 분야를 위한 ""HN for X"" 프로젝트들이 참여자 수 부족 문제를 겪고 있다는 의견이 있음
          + 게임 개발은 이미 논의되고 있는 주제라는 의견이 있음
          + 게임 개발 관련 콘텐츠를 필터링하는 사이드 프로젝트를 만들었다는 경험을 공유하는 의견이 있음
     * 콘텐츠에 대해서는 언급하지 않지만, 읽기 어려운 부분이 있다는 의견이 있음
          + 무료 Axe Dev Tools로 접근성을 테스트해보았고, 텍스트와 배경 간의 대비를 조정할 필요가 있다는 제안이 있음
          + 사이트 런칭을 축하하는 의견이 있음
     * 사이트의 아이디어는 좋지만, 너무 복잡하고 시끄러운 디자인 때문에 사용하기 불편하다는 의견이 있음
          + Hacker News의 깔끔한 디자인을 선호하지만, 가끔은 다크 테마를 원한다는 의견이 있음
     * 웹사이트 유지 관리자가 사이트가 Hacker News의 메인 페이지에 올라간 것에 대해 기쁨과 약간의 두려움을 표현함
          + 상업적 프로젝트가 아니며, 초대 전용으로 커뮤니티를 천천히 성장시키고자 한다는 설명이 있음
          + 서버가 트래픽을 문제없이 처리할 수 있도록 하고 싶다는 의견이 있음
          + 초대 대기열을 천천히 처리하고 있다는 설명이 있음
     * 사이트의 저자나 호스트가 아님을 명확히 하고, 최근 ""Celeste"" 플랫폼 게임을 작업한 Saint11이 사이트의 저자임을 밝히는 의견이 있음
     * 초대 전용 방식이 불편하다는 의견이 있음
     * 'HN but for [x]' 사이트들은 HN의 하위 집합만 제공하기 때문에 매력이 부족하다는 의견이 있음
          + 게임 개발 게시물이 가장 인기 있는 것은 아니지만, 여전히 주목을 받기 때문에 다른 곳에 게시할 동기가 부족하다는 의견이 있음
          + 성공하려면 HN이 제공하지 않는 무언가를 제공해야 한다는 의견이 있음
     * 게임 개발을 위한 ""x"" 사이트에 대해 Brilliant의 포크가 기본부터 공통 주제를 다루는 것을 보고 싶다는 의견이 있음
          + Cat-Like Coding의 튜토리얼 접근 방식을 좋아하지만, Brilliant의 방법처럼 지식을 영구적으로 습득하지 못했다는 의견이 있음
          + 게임 개발 주제에 특화된 CS 모듈이 있으면 좋겠다는 의견이 있음
"
"https://news.hada.io/topic?id=18926","잘못된 68030 명령어로 인해 Mac Classic II 부팅 허용 사고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               잘못된 68030 명령어로 인해 Mac Classic II 부팅 허용 사고

68030의 잘못된 명령어가 Mac Classic II의 부팅을 가능하게 한 이야기

     * Apple은 Macintosh Classic II의 ROM에서 실수를 저질렀고, 이는 부팅을 방해할 수 있었음. 그러나 Motorola MC68030 CPU가 정의되지 않은 명령어를 실행하여 충돌을 방지하고 부팅을 성공시킴.

  MAME와 Mac 에뮬레이션

     * MAME는 다양한 아케이드 게임을 지원하는 에뮬레이터로, 68000 기반 Mac 모델의 가장 완전한 에뮬레이터 중 하나로 평가받음.
     * 필자는 MAME를 사용하여 Mac Classic II의 문제를 해결하고자 했으며, 24비트 주소 모드에서는 정상적으로 부팅되지만 32비트 주소 모드에서는 부팅이 실패함.

  24비트 vs 32비트 주소 모드

     * Motorola 68000 프로세서는 24개의 주소 라인을 가지고 있었고, Apple은 여분의 8비트를 플래그 저장에 사용함.
     * 새로운 기계와 프로세서는 32비트 주소 공간을 지원했으며, 이로 인해 호환성 문제를 해결하기 위해 두 가지 모드를 제공함.

  문제의 원인 분석

     * MAME에서 Classic II가 32비트 모드에서 부팅 실패하는 이유를 찾기 위해 디버거를 사용하여 코드를 추적함.
     * Apple의 기술 문서에 따르면, 0000000F은 예외가 발생했음을 의미하고, 00000001은 버스 오류를 나타냄.

  ROM 코드 분석

     * ROM의 코드에서 잘못된 주소에 접근하는 명령어를 발견함.
     * 이 명령어는 A1 레지스터에 잘못된 주소를 저장하고, 이로 인해 Sad Mac 오류가 발생함.

  하드웨어와의 차이점

     * 실제 하드웨어에서는 잘못된 명령어가 A1의 값을 변경하여 유효한 주소로 만듦.
     * MAME의 에뮬레이터는 이 명령어를 제대로 처리하지 못해 A1이 잘못된 주소를 유지함.

  결론

     * Apple은 Classic II의 ROM에서 발생할 수 있는 버그를 인지하지 못했으며, 68030의 잘못된 명령어가 이를 숨기고 있었음.
     * MAME는 이 문제를 해결하기 위해 ROM의 버그를 패치하여 Classic II가 부팅되도록 함.
     * 이 사례는 에뮬레이터가 하드웨어에 대해 새로운 사실을 발견할 수 있음을 보여줌.

        Hacker News 의견

     * MC68030의 문서화되지 않은 명령어를 발견한 경험을 공유함. 이 명령어는 A1 레지스터의 값을 변경하고 읽기-수정-쓰기 버스 사이클을 수행함
          + 이 명령어는 CPU 설계자가 의도적으로 만든 것이 아니라 불법 명령어일 가능성이 있음
          + CPU는 일반적으로 불법 명령어를 감지하고 예외를 발생시킴. 그러나 특정 상황에서는 예외가 발생하지 않을 수 있음
          + MC68030 설명서에 따르면 불법 명령어는 유효한 명령어의 비트 패턴과 일치하지 않는 비트 패턴을 포함함
          + 설명서에 따르면 명령어는 3단어로 구성되며, 첫 번째 단어는 정상적이고 두 번째 단어에서 이상한 비트가 발생함
     * CAS 명령어의 에뮬레이션에 대한 버그 보고가 많았음을 언급함
          + King of Fighters에서 SBCD 명령어의 캐리 플래그를 잘못 체크한 버그를 기억함
          + SNK는 68000 칩의 신과 같았음
     * 과거 Amiga 2000과 68000 프로세서에 대한 추억을 공유함
          + 68020, 68030, RISC 아키텍처에 대한 흥분을 언급함
          + 현재는 자연어로 컴퓨터와 대화할 수 있는 시대가 되었음을 강조함
     * 대부분의 CPU에는 문서화되지 않은 명령어가 있으며, 68k도 예외가 아님
          + 당시 많은 사람들이 x86/PC에 집중했으며, 이는 더 개방적이고 안정적인 아키텍처였음
          + 8088과 8086의 마이크로코드가 해체되고 연구되었음
     * MC68030의 문서화되지 않은 명령어의 정확한 동작을 이해하기 위한 시도가 필요함
          + A1의 결과 값이 원래 A1 값, A7 값, 프로그램 카운터에 따라 달라질 수 있음
          + MAME는 이 버그를 ROM에서 패치하여 Classic II가 부팅되도록 함
     * Mac 디버거 UI의 효율성에 감탄함
          + Amiga의 변환 속도를 높이지는 못할 것임
     * 이 명령어가 복사 방지 목적으로 사용되었는지, 모든 68030에서 발생하는지 궁금해함
          + 현대 Mac에서는 불가능할 것 같음. Apple의 기술 문서가 요즘은 좋지 않음
     * '040/060도 이 ""문서화되지 않은 명령어""를 지원하는지 궁금해함
"
"https://news.hada.io/topic?id=18956","Pocket ID - 간단한 OIDC 프로바이더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Pocket ID - 간단한 OIDC 프로바이더

     * Passkey 인증을 통해 사용자가 서비스에 로그인할 수 있도록 돕는 간단한 OIDC(OpenID Connect) 제공자
          + Keycloak 이나 ORY Hydra보다 더 간단하고 사용하기 쉽게 만드는게 목표
     * Passkey만 지원하므로 비밀번호 없이 안전하게 로그인
          + Yubikey 같은 물리적 보안 키와 호환
     * WebAuthn API를 이용하므로 무조건 HTTPS로 서빙되어야 함
     * Node.js + Go + PM2 + Caddy(옵션)
"
"https://news.hada.io/topic?id=18953","Slink - 이미지 공유 플랫폼 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Slink - 이미지 공유 플랫폼

     * 사용자에게 ""완전한 미디어 공유 제어권""을 제공하는 강력한 셀프 호스팅 이미지 공유 플랫폼
          + 친구, 가족, 동료들과 이미지를 안전하고 비공개적으로 공유할 수 있는 환경을 제공
     * 이미지 업로드: PNG, JPG, WEBP, SVG, BMP, ICO, GIF, AVIF, HEIC 및 TIFF 지원
     * 사용자 등록 및 로그인 지원. 사용자는 관리자의 승인 후 이미지 업로드 가능
     * 업로드된 이미지 링크 공유 및 이미지 크기 맞춤화
     * 사용자가 업로드한 모든 이미지의 개요 및 기록 제공
     * 스토리지 지원: 로컬, SMB, AWS S3
     * 다른 사용자가 업로드한 공개 이미지를 탐색 가능
     * 다크 및 라이트 모드 지원
     * 관리자용 통계 및 분석 대시보드 제공
     * 공용 API: 프로그래밍 방식으로 플랫폼에 접근 가능 (문서화 예정)
"
"https://news.hada.io/topic?id=18960","Open-R1: DeepSeek-R1의 완전한 오픈소스 재현 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Open-R1: DeepSeek-R1의 완전한 오픈소스 재현 프로젝트

DeepSeek-R1이란 무엇인가?

     * OpenAI의 o1 모델은 LLMs가 추론 작업을 더 잘 수행할 수 있도록 더 많은 계산을 사용하여 훈련되었음.
     * DeepSeek-R1은 OpenAI의 o1 모델과 비슷하거나 더 나은 성능을 보이며, 순수 강화 학습(RL)을 통해 인간의 감독 없이 추론하는 방법을 학습함.
     * DeepSeek-R1의 공개로 데이터 수집, 모델 훈련, 확장 법칙에 대한 여러 질문이 제기됨.

그들은 어떻게 했는가?

     * DeepSeek-R1은 DeepSeek-V3를 기반으로 구축된 추론 모델이며, 671B Mixture of Experts (MoE) 모델임.
     * DeepSeek-R1-Zero는 강화 학습만을 사용하여 훈련되었으며, Group Relative Policy Optimization (GRPO)을 사용하여 효율성을 높임.
     * DeepSeek-R1은 초기 단계에서 소규모 예제를 사용하여 명확성과 가독성을 개선한 후, 강화 학습과 정제 단계를 거쳐 일관된 답변을 생성함.

Open-R1: 누락된 조각들

     * DeepSeek-R1의 공개는 커뮤니티에 큰 도움이 되었으나, 데이터셋과 코드가 공개되지 않음.
     * Open-R1 프로젝트는 DeepSeek-R1의 데이터와 훈련 파이프라인을 재구성하고, 강화 학습이 추론을 어떻게 향상시키는지 투명성을 제공하는 것을 목표로 함.

Open-R1의 단계별 계획

    1. R1-Distill 모델 재현: DeepSeek-R1에서 고품질 추론 데이터셋 추출 및 증류 학습
    2. R1-Zero의 순수 RL 학습 파이프라인 복제: 대규모 수학, 논리, 코드 데이터셋 구축
    3. 기반 모델 → SFT → RL 단계별 학습 과정 구축

기여 방법

     * Open-R1 프로젝트에 기여하는 방법은 코드 기여, Hugging Face에서의 토론 참여 등 다양함.
     * 이 프로젝트는 결과를 복제하는 것뿐만 아니라 커뮤니티와 통찰을 공유하는 데 중점을 둠.
"
"https://news.hada.io/topic?id=18971","2년 만에 처음으로 일어선 Science YouTuber physicsgirl(디애나 카우언)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2년 만에 처음으로 일어선 Science YouTuber physicsgirl(디애나 카우언)

        Hacker News 의견

     * 22세의 사용자는 3년 동안 Long COVID를 겪고 있으며, 자신의 경험을 블로그에 기록했음. 침대에 눕지는 않지만 삶이 완전히 뒤바뀌었으며, 정상적인 삶을 살고 싶어함. ME/CFS와 LC 환자들에게 포기하지 말라고 격려함
          + 사용자의 여동생은 두 번째 아이 출산 후 ME/CFS를 겪었으며, 완전히 침대에 눕지는 않았지만 가끔 며칠 동안 휴식이 필요했음. 현재는 최악의 상태보다는 나아졌지만 여전히 완전히 회복되지 않았음
          + Dianna의 빠른 회복과 미래의 진전을 기원함
     * 한 사용자는 2024년 10월에 COVID에 걸렸으며, 유일한 증상은 혀의 오른쪽 절반에서 맛을 느끼지 못하는 것이었음. 점차 나아졌지만 최근 다시 맛을 잃었으며, 현재는 다시 회복 중임
          + 자신의 경우는 Dianna의 사례와는 크게 관련이 없다고 언급함
     * 한 사용자의 친구는 ME/CFS로 3년 동안 침대에 누워있었으며, Dianna가 침대에서 일어나는 것을 보고 희망을 얻었음
     * Simone Giertz가 자신의 뇌 수술에 대해 이야기할 때처럼 심각하게 소식을 전했던 것을 기억함
          + 전 동료는 COVID에 두 번 걸렸으며, 두 번째는 경미한 Long COVID를 겪었음. 침대에 눕지는 않았지만 인지 능력 저하가 눈에 띄었음
          + Long COVID는 농담이 아니며, 개인의 업무와 사생활에 심각한 영향을 미침
     * Dianna가 밝은 방에서 웃고 있는 모습을 보고 하루 중 가장 좋은 소식이라고 언급함. 빠른 회복을 기원함
     * Long COVID가 정확히 무엇인지 모른다고 언급하며, ME/CFS 환자를 COVID 이전부터 돌봐왔음. 유사한 증상으로 묶인 질병 세트라고 설명함
          + 자폐증과 ADHD도 이와 유사하다고 언급함
     * 몇 년 동안 Long COVID를 겪고 있으며, 사람마다 반응이 다르고 여러 메커니즘이 있을 수 있어 단일 질병이 아니라고 설명함
          + 니코틴 패치를 착용하는 것이 도움이 되었으며, 흡연자는 아니지만 작은 연구를 보고 시도해보았음
          + 니코틴이 저항력에 도움이 되지 않는다는 반대 연구도 있지만, 자신의 경험상 인지와 피로 수준이 빠르게 개선되었음
     * Patreon에서 Dianna의 진행 상황을 팔로우하고 있으며, 그녀가 나아지고 있는 것이 기쁘다고 언급함
          + 그녀의 복귀 영상을 기대하고 있음
     * 상황이 나아지는 것을 보고 기쁘다고 언급하며, 여름에 비슷한 일을 겪었지만 훨씬 경미하고 짧았음
          + 바이러스에 대해 더 잘 이해할 수 있기를 희망함
"
"https://news.hada.io/topic?id=18977","DeepSeek R1의 추론 능력을 바탕으로 100분의 1 작은 ModernBERT 훈련하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          DeepSeek R1의 추론 능력을 바탕으로 100분의 1 작은 ModernBERT 훈련하기

   DeepSeek R1 으로부터 만든 라벨을 사용해 ModernBERT 모델이 “논문이 새 데이터셋을 소개하는지”를 예측하도록 학습할 수 있다. 이렇게 만들어진 모델은 곧바로 사용이 가능하며, 실무 서비스 환경에서 추론만 할 때는 LLM처럼 거대한 리소스가 필요 없다. 그럼에도 레이블이 필요한 분류 문제에서 LLM의 추론 능력을 간접적으로 전이받은 것이므로 어느 정도 정확도가 잘 유지된다.

   특히 RAG 에서 간단한 Text 매칭 만으로는 해결되지 않고 어느 정도 추론이 필요한 경우, 라벨이 많이 부족하거나 만들기 어려울 때, DeepSeek이 생성한 라벨을 기반으로 ModernBERT 모델을 학습시키는 방식이 유용하다.
"
"https://news.hada.io/topic?id=19006","Hex를 이용하여 DeepSeek 검열 우회하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Hex를 이용하여 DeepSeek 검열 우회하는 방법

     * 최근 중국에서 출시된 DeepSeek-R1 LLM 모델이 주목. OpenAI, Meta 등의 모델과 비교되며, 적은 자원으로 훈련되어 비용 효율적인 AI 개발 가능성을 보여줌
     * DeepSeek-R1 모델은 MIT 라이선스로 공개되었지만, DeepSeek의 AI 채팅 애플리케이션은 계정이 필요함
     * 그러나, DeepSeek-R1은 중국에서 개발되어 민감한 주제에 대한 응답을 제한함.
     * 예를 들어, 천안문 사건과 같은 중국에서 민감한 주제에 대한 질문을 하면, ""죄송합니다. 이 주제에 대한 답변을 제공할 수 없습니다.""와 같은 회피성 응답을 반환

Charcodes(문자 코드) 기법을 이용한 검열 우회

     * 여러 실험을 거쳐 문자 코드(Charcodes)를 이용하면 필터링을 우회할 수 있음을 발견함.
     * Charcodes란?
          + 문자 코드(Charcodes)는 특정 문자에 할당된 숫자 코드임.
          + 예를 들어, ASCII에서 대문자 'A'의 코드 값은 65이며, 이를 다른 형태(예: 16진수)로 변환할 수 있음.
          + 예제: ""Hello"" → ""48 65 6C 6C 6F"" (16진수 ASCII 코드)
     * 우회 방식:
          + DeepSeek이 일반 텍스트를 검열하지만 문자 코드(Charcodes)로 변환한 문자열은 검열하지 않음.
          + 따라서 프롬프트를 16진수(HEX) 문자 코드로 변환하여 입력하면 AI가 이를 정상적인 텍스트로 인식하여 출력할 수 있음.
          + 응답도 동일한 방식으로 변환하여 해석하면 정상적인 대화가 가능함.

예제 공격 방식

     * DeepSeek이 오직 Charcodes 형식으로 대화하도록 강제함으로써 검열을 우회할 수 있음.
     * 변환된 메시지를 다시 원래의 텍스트로 변환하여 정상적인 대화를 유지할 수 있음.
     * CyberChef 같은 도구를 활용하면 문자 코드 변환을 쉽게 수행할 수 있음.

교훈 및 보안 시사점

     * 웹 애플리케이션 방화벽(WAF)과 비슷한 원리로 AI 필터링 시스템도 패턴 매칭 기반으로 동작함.
     * 특정 단어만 차단하는 방식의 검열은 쉽게 우회할 수 있으며, 보다 정교한 필터링 시스템이 필요함.
     * 필터링 시스템은 단순한 금칙어 차단이 아니라 컨텍스트 기반 필터링과 입력 변환 제한 등의 보완이 필요함.

향후 연구 방향

     * 앞으로 AI 개발자들이 이러한 우회 방법에 대해 어떻게 대응할지 주목할 필요가 있음.
     * AI 필터링 강화 방향:
          + 더 정교한 문맥 기반 필터링 도입
          + 모델 자체에 민감한 주제 차단 기능 내장
          + 문자 코드 변환 및 인코딩 우회 탐지 강화
     * AI 모델의 보안성과 신뢰성을 유지하기 위한 지속적인 연구가 필요함.

        Hacker News 의견

     * 웹 인터페이스의 명백한 검열을 우회할 수 있지만, 모델에 내장된 더 교묘한 검열 수준은 우회할 수 없음을 언급함
          + 특정 주제에 대해 ""Chain of Thought""을 포기하고 정형화된 응답을 생성하는 모델의 동작을 설명함
          + DeepSeek의 검열된 질문에 대한 기사와 관련이 있음을 언급함
     * xhr 응답을 가로채어 콘텐츠 필터를 우회할 수 있는 방법을 제시함
          + 브라우저 콘솔에 코드를 붙여넣어 필터링을 우회할 수 있음을 설명함
     * 자신의 기사 작성 경험을 공유하며, 필터링이 모델과 별개라는 가설을 제시함
          + 사전 필터링된 데이터로 훈련하는 비용 문제를 언급함
          + 특정 주제에 대한 ""Chain of Thought"" 포기 현상을 설명하는 다른 기사와 연결됨
     * DeepSeek-R1 모델이 특정 민감한 주제를 회피하는 이유를 설명함
          + 중국에서 개발된 모델이기 때문에 내장된 검열이 있음을 언급함
          + 오프라인 버전에서는 회피하지 않는 응답을 얻었음을 관찰함
     * 서구 모델이 특정 주제를 b64로만 말하는 현상에 대해 의문을 제기함
          + 중국에서는 서구의 검열 체제를 우회하는 방법에 대해 웃고 있는지에 대한 의문을 제기함
     * LLM 모델 자체에 검열을 훈련시키는 것이 왜 가능성이 낮은지에 대한 의문을 제기함
          + 훈련 단계에서 검열을 적용하는 것이 더 나을 수 있음을 언급함
     * 검열이 일부 언어에만 적용되는 것 같음을 언급함
          + 우크라이나어로는 비공식적인 답변을 얻을 수 있음을 설명함
     * 작은 모델(7b)을 사용하여 내부 검열을 우회한 경험을 공유함
          + 추가적인 생각을 통해 CPC의 인권 침해에 대한 요약을 얻었음을 설명함
     * 오래된 프롬프트 트릭에 대해 언급하며, HN의 첫 페이지에 있는 이유에 대해 의문을 제기함
     * ChatGPT에서도 비슷한 방식으로 작동함을 언급하며, 악의적인 농담을 생성할 수 있었음을 설명함
"
"https://news.hada.io/topic?id=18930","R1과 그외 모든 것들에 대한 설명 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          R1과 그외 모든 것들에 대한 설명

     * 갑자기 튀어나온 R1, 그리고 o1과 o3 등 빠르게 변하는 것들을 이해하기 위한 현재 상황 정리

타임라인

     * 2024년 9월 12일: o1-preview 출시
     * 2024년 12월 5일: o1 정식 버전 및 o1-pro 출시
     * 2024년 12월 20일: o3 발표 (ARC-AGI 통과, “AGI”로 주목받음)
     * 2024년 12월 26일: DeepSeek V3 출시
     * 2025년 1월 20일: DeepSeek R1 출시 (o1과 유사한 성능인데 오픈 소스)
     * 2025년 1월 25일: 홍콩대학교 연구진이 R1 결과 복제 성공
     * 2025년 1월 25일: Huggingface에서 R1을 복제한 완전 오픈소스 open-r1 프로젝트 발표
     * 확실히 하기 위해
          + o1, o3, R1은 모두 추론(Reasoning) 모델임
          + DeepSeek V3는 LLM(기초 모델)이며 추론 모델은 이를 파인튜닝하여 만듦
          + ARC-AGI-1은 유동적 지능(fluid intelligence)에 대한 가장 간단하고 기본적인 평가임. 불합격은 낯선 상황에서 적응하거나 문제를 해결하는 데 거의 전적으로 무능하다는 것을 의미

# Reasoning & Agents

  추론 모델 != Agents

     * 추론(Reasoning) 모델은 답변을 생성하기 전에 “생각” 과정을 거치는 모델임
          + LLM은 토큰을 생성하는 것으로 생각함
          + 그래서 우리는 모델이 정답을 찾아내길 바라며 수많은 토큰을 생성하도록 모델을 훈련시키고 있음
     * AI 에이전트(Agent)는 2가지에 의해 정의됨
          + 의사 결정 및 작업 완료를 위한 Autonomy(agency)
          + 외부 세계와의 상호작용(Interact)하는 능력
     * LLM이나 추론 모델 그 자체만으로는 토큰을 생성할 뿐이므로 이 두 가지 기능을 수행할 수 없음
          + 실제 의사 결정을 내리고 상호 작용 기능을 제공하려면 소프트웨어가 필요
     * 에이전트는 AI들의 시스템임. 세상과 자율적으로 상호작용할 수 있도록 여러 모델과 소프트웨어가 결합된 것. 하드웨어도 마찬가지.

추론은 중요함

     * 추론 모델이 에이전트와 혼동되는 이유는 현재 추론이 병목 현상을 일으키고 있기 때문
     * 작업을 계획하고, 감독하고, 검증하고, 현명해지기 위해서는 추론 능력이 필수적임
     * 추론 능력이 없이는 에이전트를 만들수 없지만, 추론 벤치마크가 포화상태에 도달하면 새로운 도전이 생길 것

추론은 더 저렴해져야함

     * 에이전트는 몇시간에서 몇일, 또는 24/7 쉬지않고 동작함
     * 이것이 자율적으로 행동하는 것의 본질이며, 따라서 비용이 증가함
     * 현재로서는 R1이 o1보다 약 30배 저렴하면서도 비슷한 성능을 제공

# 왜 R1이 중요한가

     * 저렴하고, 오픈 소스이며, o1 및 o3와 비슷한 성능을 검증했다는 점에서 의미가 큼
     * 공개된 문서를 기반으로 o1의 작동 방식에 대한 몇 가지 예측이 있었고, R1 공개 논문은 이 모든 것을 거의 전적으로 입증함. 그래서 우리는 어떻게 o1이 o3,o4로 확장하는지 알게됨
     * 또한 오픈소스이기 때문에 전 세계 누구나 자신의 아이디어로 실행할 수 있음
     * 지난 한주간 R1을 재구현 해본 사람들의 타임라인을 보면 알수 있음(일부는 $30으로 만들었다고도 함)
     * 혁신은 빠르고 저렴하게 반복할 수 있을 때 일어나며, R1은 그러한 환경을 조성했음
     * 가장 중요한 것은 R1이 복잡한 아이디어(DPO, MCTS) 대신 단순한 RL 방식으로도 충분한 추론 성능 달성 가능함을 보여줬다는 것

# AI 발전 추세

  사전 학습(Pretraining) 확장 한계에 도달

     * GPT-4 이후로 대규모 데이터와 컴퓨팅 자원을 단순히 늘리는 기존 ‘스케일링 법칙’에 한계가 보이기 시작함
     * 데이터 확보 문제와 새로운 추론 방식으로 인해 예전 방식만으로는 큰 효과를 내기 어려워졌다는 평가임

  추론 시간(Inference Time) 스케일링 법칙

     * o1과 r1 같은 추론 모델은 ‘더 오래 생각할수록 성능이 좋아지는’ 경향이 있음
     * 하지만 더 나은 결과를 얻기 위해, 정확히 어떻게 더 많은 연산을 수행해야 하는지는 명확하지 않았음
     * 순진한 가정은 생각의 연쇄(CoT)가 작동할 수 있다는 것이었고, 모델에 CoT를 수행하도록 훈련하기만 하면 된다는 것이었음
     * 문제는 어떻게 효율적으로 해답에 이르는 가장 빠른 경로를 찾느냐는 것
          + Entropix는 하나의 아이디어로, 모델의 내부 신호를 사용해 가장 효율적인 경로를 찾음
          + 몬테카를로 트리 검색(MCTS)과 같이 많은 경로를 생성하지만 단 하나의 경로만 선택하는 방법도 있었음
     * CoT가 최고라는 것이 밝혀짐
          + R1은 RL을 적용한 단순한 싱글라인 체인 오브 소트(CoT)를 하고 있음
          + 아마 o1도 같은 일을 하고 있을거라 가정이 가능

  축소된 모델들(Down-Sized Models)

     * 첫 시작은 GPT-4-turbo 였고, 그 다음은 GPT-4o, Claude 시리즈 및 다른 모델 LLM들. 모두 24년 내내 점점 더 작아지고 저렴해짐
     * 추론을 위해 많은 토큰을 생성해야 하므로, 모델 크기가 작을수록 계산 속도가 빨라져 효율이 높아짐
     * “더 작은 모델 = 더 똑똑함”

  강화 학습(Reinforcement Learning)

     * R1은 GRPO(Group Rewards Policy Optimization)라는 간단한 RL 접근을 사용하여 추론 시점에 CoT를 수행하도록 모델을 학습 시켰음
     * 복잡한 검증기나 외부 LLM이 필요하지 않음. 정확도와 출력 형식에 대한 기본 보상 기능을 갖춘 RL만 있으면 됨
     * R1-Zero는 DeepSeek의 R1 버전으로, GRPO만 처리하고 다른 기능은 지원하지 않음
          + R1보다 정확도는 높지만 영어와 중국어 등 다양한 언어 사이를 마음대로 오가기 때문에 일반적으로 다국어를 구사하지 않는 일반 사용자에게는 적합하지 않음
     * 왜 R1-Zero가 언어간에 점프를 할까?
          + 내 생각은 ""언어마다 다른 종류의 개념을 더 효과적으로 표현하기 때문""
          + “what’s the german word for [paragraph of text]?” 라는 밈이 있음
     * 25년 1월 25일 현재, 누군가가 ""어떤 RL이든 모두 가능하다""는 것을 시연해 냄
          + GRPO, PPO, PRIME을 모두 시도했는데 모두 잘 작동함
          + 매직 넘버는 1.5B. 모델 파라미터가 1.5B(15억) 이상이 되면 어떤 RL 기법을 적용해도 추론 능력이 발현된다는 것
     * 과연 어디까지 확장하게 될까 ?

  모델 증류(Model Distillation)

     * R1은 자체의 이전 체크포인트로부터 증류(distilled)한 것
     * 증류는 한 교사(teacher) 모델이 학생 모델에 대한 학습 데이터를 생성하는 것으로 일반적으로 교사가 학생보다 더 큰 모델이라고 가정함
          + R1은 동일한 모델의 이전 체크포인트를 사용하여 지도 미세 조정(SFT)을 위한 학습 데이터를 생성했음
          + SFT와 RL을 반복하여 모델을 개선함
     * 이게 어디까지 갈 수 있을까?
     * 아주 오래전에(9일전)는 GPT5가 존재하며 GPT4o는 이를 증류한 것일 뿐이라는 예측이 있었음
          + 이 글은 OpenAI와 Anthropic이 큰 모델을 학습시킨 다음 증류하고, 증류된 모델을 사용하여 더 큰 모델을 만드는 사이클을 계속 만들어낸다는 이론을 세움
          + R1 논문은 이것이 가능하다는 것을 대체로 확인시켜주었다고 얘기하고 싶음(따라서 실제로 일어날 가능성이 높음)
     * 그렇다면 이는 매우 오랫동안 지속될 수 있음
     * 참고: 일부 실험에 따르면 학생 모델이 선생 모델을 넘어설 수도 있음. 실제로 얼마나 이런 일이 일어나는지는 확실하지 않음
          + 직관적으로는 증류를 통해서 학생이 신호를 찾고 더 빨리 수렴하는 데 도움이 될 수 있다는 것
          + Model collapse는 여전히 가장 큰 걱정거리이지만, 이는 대부분 불필요한 두려움인 것 같음
          + 모델 붕괴는 확실히 항상 가능하지만 결코 보장되는 것은 아니며 반대 방향으로 진행하여 학생이 교사를 능가하는 방법도 있음

# 2025년 전망

     * 현재 상황:
          + 사전 학습은 어려움(죽지는 않음)
          + 추론 스케일링
          + 모델 다운사이징
          + RL 스케일링 법칙
          + 모델 증류에 의한 스케일링 법칙
     * AI 발전 속도가 느려지는 것 같지는 않음. 하나의 스케일링 법칙이 느려지고 4개의 법칙이 더 나타났음
     * 이 추세는 당분간 계속 가속화 될 것

지정학적 이슈 : Distealing

     * ""Distealing""은 내가 만든 단어로 모델을 ""무단 증류""하는 것
     * 이제 소프트웨어는 정치이며 그 중심에는 AI가 있음
          + AI는 거의 모든 정치적 축에 고려되고 있는 것 같으며 가장 흥미로운 것은 중국 대 미국
     * 전략
          + 미국: 막대한 자금 지원. 가능한 한 빨리 AI 불에 돈을 쏟아붇기
          + 중국: 억압적인 수출 규제 때문에 더 똑똑한 엔지니어와 연구자를 동원해서 더 저렴한 솔루션 찾기에 투입
          + 유럽: 규제 또는 오픈소스 AI, 둘중 어떤 것이든 좋음
     * DeepSeek가 o1을 무단 증류(“distealing”)했는지 여부에 대한 논란이 있으나, R1의 복제본을 고려했을때 현재는 독자적으로 R1을 개발했을 가능성이 높게 거론됨
          + 하지만 중국 연구소가 빠른 속도로 OpenAI의 최고모델을 추월했다는 점에서 긴장감이 감도는 중
     * AI는 곧(아직은 아니더라도) 기하급수적인 속도로 능력이 향상될 것
          + 정치적, 지정학적 영향은 엄청나게 클 것
          + 오히려 인공지능에 종사하는 사람들은 정치에 더 많은 관심을 기울이고 어떤 정책이 좋은지 나쁜지에 대해 열린 마음을 가져야 함

결론

     * 가장 중요한 점은 R1이 이전에 불투명했던 부분을 명확하게 제공한다는 것
     * 따라서 AI의 미래는 더욱 명확해졌고, 그 속도는 빠르게 빨라지고 있는 것으로 보임

     * Deepseek - 중국 AI 경쟁을 선도하는 조용한 거인
     * DeepSeek-R1 모델 공개
     * DeepSeek의 R1-Zero 및 R1 분석
     * 코딩에서 DeepSeek R1이 유망한 결과를 냄
     * Meta의 생성형 AI 조직은 DeepSeek때문에 충격에 빠져있음
     * $2000 EPYC 서버에서 DeepSeek R1 671b 모델을 로컬 실행 하는 법
     * Open-R1: DeepSeek-R1의 완전한 오픈소스 재현 프로젝트
     * 일러스트레이티드 DeepSeek-R1
     * DeepSeek-R1 Dynamic 1.58-bit 모델 실행하기
     * Anthropic CEO 다리오 아모데이: DeepSeek 모델은 그리 놀랍지 않다
     * DeepSeek v3에 대한 노트 - ""정말로 GPT-4o나 3.5 Sonnet보다 좋은가?""
     * 경쟁과 DeepSeek이 Nvidia에 미치는 영향
     * Nvidia의 5,890억 달러 DeepSeek Rout(패배)
     * DeepSeek, Text-To-Image 생성 모델 Janus Pro 공개 [PDF]

   distealing이라 이제와서 나무라기에는 태동기 LLaMA 1 시절부터 GPT에서 증류한 Alpaca, Vicuna 모델이 있었고, 지금 프론티어 랩에서도 서로 모델 출력으로 학습 안하는 곳이 없습니다.

   사실상 지금 프론티어 모델들은 GPT에서 증류한 근친교배 유전자에 연구실 입맛에 따라 RLHF한게 대부분

   지금 제일 걱정해야 할 것은 중국의 무단증류나 검열이 아니라

   DeepSeek 미친 효율성의 배경인 MLA, MTP, mixed precision framework, GRPO을 순수 100% 중국 대학 출신만으로 만들었다는게 충격입니다.

   미국에서는 제 2의 스푸트니크 쇼크라는 말 까지 나오는 중...

   distealing은 distilling를 적으려고 했던 게 아닌가요?

   무단증류를, 증류를 뜻하는 distilling과 (발음이 같은 일종의 pun으로서) 구별하기 위해서 distealing이라는 단어를 저자가 만들어낸 것 같습니다(글에 언급되어 있습니다).

   설명 감사합니다.

     Geopolitics: Distealing
     지정학적 이슈 : Distealing

     I coined that term, distealing, unauthorized distillation of models. Go ahead, use it, it’s a fun word.
     ""Distealing""은 내가 만든 단어로 모델을 ""무단 증류""하는 것

   원문에 내용이 있었군요. 감사합니다.

        Hacker News 의견

     * R1이 복잡한 아이디어를 단순한 강화 학습으로 대체했다는 주장에 대해, 실제로는 강화 학습과 감독 학습을 혼합하여 사용했음. 감독 학습에 사용된 데이터는 모델 생성이 아닌 인간이 선별한 것일 가능성이 있음
          + R1을 재현하려는 시도가 있으며, 일부는 $30로 가능하다고 주장하지만, 이는 R1 자체가 아닌 R1의 미세 조정일 수 있음
          + Hugging Face가 R1을 재현하려고 하지만, 이는 상당히 큰 작업이며 $30로 해결할 수 있는 일이 아님
     * 기사에 과장된 내용이 많아 신뢰하기 어려움
          + 다양한 모델의 벤치마크가 수학과 코딩 정확성에 초점을 맞추고 있지만, 특정 사용 사례에서는 이러한 기능이 중요하지 않음. 개념을 벤치마크하기는 어려움
          + 증류를 통해 수학과 코딩 요소를 제거한 모델을 만들 수 있는지에 대한 질문이 제기됨
     * R1이 주류 뉴스에 등장하면서 혼란과 경각심을 불러일으켰음. 중국이 미국을 위협하는 것이 아니라는 점을 설명하기 어려움
          + AI의 능력이 기하급수적으로 증가할 것이라는 결론에 대해, R1이 오픈 소스 모델로 o1 수준을 달성한 것이 유일한 데이터 포인트임. 이는 두 가지 매우 관련 없는 주제임
     * AI가 이미 추론을 하고 있는지에 대한 질문이 제기됨
          + ARC-AGI는 인간에게는 간단하지만 AI에게는 매우 어려운 벤치마크임. 이를 해결하면 AI가 인간과 같은 일을 할 수 있다는 오해가 있음
          + ARC-AGI의 창시자인 François Chollet는 ARC-AGI-1이 얼마나 간단했는지, 이를 해결하는 것이 무엇을 의미하는지에 대해 설명함
          + ARC-AGI-1을 통과하면 시스템이 비제로 유동 지능을 보유하고 있음을 나타내지만, 시스템의 지능 수준이나 인간 지능과의 근접성을 나타내지는 않음
     * AI의 능력이 곧 기하급수적으로 증가할 것이라는 결론은 근거가 부족함. 저자가 어떻게 이 결론에 도달했는지 알 수 있으면 좋겠음
"
"https://news.hada.io/topic?id=18969","내가 2025년에도 Sublime Text를 여전히 선호하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  내가 2025년에도 Sublime Text를 여전히 선호하는 이유

     * 사람들이 왜 좋은 에디터가 많은데 아직도 Sublime Text를 사용하냐고 물음
          + 내 대답은 아직도 Sublime Text가 훌륭한 데이터 이기 때문
     * Sublime은 2008년에 처음 출시되어 17년의 역사를 지닌 성숙한 소프트웨어로, 최신 버전인 빌드 4192는 2025년 1월 20일에 릴리스됨
     * 여전히 빠른 속도와 효율성을 자랑하며, 많은 현대적인 GUI 기반 에디터들이 Sublime Text에서 영감을 받았음
     * 빠름
          + Sublime Text는 빠르고, 적은 자원을 사용하며, 대용량 파일을 잘 처리함.
     * LSP (Language Server Protocol)
          + Sublime LSP를 통해 코드 자동 완성 및 호버 정보 등 현대적인 기능을 제공함.
          + 파일당 여러 개의 LSP 서버를 활성화하고, 프로젝트별로 개별 설정이 가능함.
          + 특정 구문에 따라 LSP를 활성화하는 등 세부적인 설정이 가능함.
     * 스니펫
          + Sublime은 다양한 스니펫을 작성할 수 있으며, 구문 기반으로 스니펫을 설정 가능함.
          + 탭 스톱, 중첩, 플레이스홀더, 참조 기능을 지원함.
     * 프로젝트 작업 공간
          + Sublime은 플러그인 없이도 프로젝트별 작업 공간을 지원하여, 프로젝트별로 설정을 저장하고 관리할 수 있음.
          + 프로젝트 파일을 통해 파일 및 폴더의 포함/제외 설정, 빌드 시스템 설정, 플러그인 설정 등을 오버라이드하고, 빌드 시스템을 설정할 수 있음.
     * 빌드 시스템
          + Sublime은 다양한 빌드 시스템을 지원하며, 플러그인을 통해 확장 가능함.
          + 빌드 시스템은 간단한 파일로 저장되며, Python으로도 작성 가능함.
     * 멀티플 커서
          + Sublime은 멀티플 커서를 지원하여 여러 위치에서 동시에 작업 가능함.
     * 키/마우스 바인딩
          + Sublime은 현대적인 키/마우스 바인딩을 지원하며, 컨텍스트에 따라 설정 가능함.
     * 포함된 기능들
          + Python 기반으로 플러그인을 쉽게 작성할 수 있음.
          + 매크로 기록 및 저장 가능.
          + 인라인 diff hunk 보기 및 되돌리기 기능 지원.
          + 다양한 케이스 변환 및 라인 변환 기능 제공.
          + 패키지 컨트롤을 통해 중앙 저장소에서 패키지 설치 가능.
          + 모든 설정이 텍스트 파일로 저장되어, 여러 컴퓨터 간 설정 동기화가 용이함.
          + 집중 모드를 통해 작업에 몰입할 수 있는 환경을 제공함.
     * 개선 희망 사항
          + 플러그인 개발 문서가 부족하며, 개발 환경 개선이 필요함.
          + 프로젝트별 키/마우스 바인딩 지원이 필요함.
     * 결론
          + Sublime Text는 2025년에도 여전히 강력한 에디터로, 빠르고 클래식한 경험을 제공함.

   Python 기반으로 플러그인을 쉽게 작성할 수 있음.
   개인적으로 현재는 이 부분이 제일 강력한 것 같아요. ^^

   GeekNews에 Sublime Text가 나오다니 감격스럽네요
   ST2 시절부터 플러그인 붙여가면서 사용하던 추억이..

   sublime -> atom -> vscode -> nvim 으로 넘어왔었는데, 사실 이전까진 그리 고민없이 유행에 편승했던 느낌이라.. 이런 어떤것을 사랑할 수 있는 자세가 가끔 부러워요.

        Hacker News 의견

     * Sublime Text를 사랑하며, 개인적인 메모와 블로그 포스트 작성에 사용함. 그러나 IDE로는 사용하지 않음. 언어에 따라 Visual Studio, XCode, Eclipse, IntelliJ, VS Code 등을 사용함. Sublime Text는 가볍고 문서 및 소규모 코드 편집에 적합함.
     * Sublime Text 개발자가 감사의 인사를 전하며, 올해의 성과를 기대하고 있음.
     * 다양한 텍스트 에디터를 사용해봤지만, 결국 Sublime으로 돌아옴. Sublime은 고급 문구처럼 특별한 느낌을 줌. 다른 에디터와 비교했을 때 더 실감나고 촉각적인 느낌을 주는 이유에 대해 궁금해함.
     * Sublime을 복사 및 붙여넣기 버퍼로 사용하며, 정규 표현식 검색 및 교체에 유용함. VS Code의 확장 기능 때문에 주로 사용하지만, Sublime의 메모리 사용량이 적어 탭을 닫지 않고 유지함.
     * Sublime의 속도와 최소한의 UI를 좋아하지만, VS Code의 기능이 많아 사용하게 됨. 도구를 조정하는 데 시간을 쓰기보다는 작업을 완료하는 것이 중요함.
     * VS Code를 사용하다가 Sublime으로 돌아옴. VS Code의 확장 기능 생태계가 혼란스러웠고, Python 확장 업데이트로 인해 불안정해짐. Sublime은 빠르고, 동적 언어 및 일반 텍스트 편집에 적합함.
     * Vim을 선호하며, 다양한 플러그인과 도구를 사용하여 만족스러움을 느낌.
     * Sublime의 단순함과 속도를 좋아하며, 다른 에디터의 복잡한 기능이 필요하지 않음. 개인 프로젝트에 주로 사용하며, 대규모 팀 작업에는 다른 IDE가 필요할 수 있음을 이해함.
     * Sublime Text와 Sublime Merge의 모든 주요 버전 라이선스를 소유하고 있었으나, 최근 ST4 라이선스가 만료됨. 주로 버그 수정이 이루어졌고, 새로운 기능은 거의 없었음. Zed로 전환함.
     * 8-10년 전 Sublime Text를 사용하다가 VS Code로 전환했으며, 최근 Zed로 전환함. Sublime을 다시 시도했으나, 설치 과정에서 문제가 발생함. Zed로 돌아감.
"
"https://news.hada.io/topic?id=18982","Show GN: TodoSpace – 기존 투두 앱이 불편했던 분들을 위한 새로운 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: TodoSpace – 기존 투두 앱이 불편했던 분들을 위한 새로운 대안

   기존의 투두 리스트 앱, 불편하지 않으셨나요? 저도 그랬습니다. 그래서 직접 만들었습니다.

  기존 투두 앱의 한계

     * 아사나 – 할일 추가와 동시에 카테고리를 지정할 수 없고, 설명에 체크리스트를 추가할 수 없음
     * 노션 – 페이지를 체크할 수 없고, 구현하려면 데이터베이스를 써야 함
     * Google Task – 메모 추가 기능이 없음

  TodoSpace

   ✔️ 할 일 추가와 동시에 카테고리 설정 – 입력하는 즉시 정리 가능
   ✔️ 체크리스트 + 메모 지원 – 투두마다 세부 내용 추가 가능
   ✔️ 깔끔한 UI & 직관적인 UX – 복잡한 설정 없이 빠르게 사용 가능


   📌 제가 한 달 동안 직접 TodoSpace를 사용해보았고, 지금도 만족스럽게 사용 중입니다.
   필요한 기능만 딱 들어가 있어 가볍고 직관적인 투두 관리가 가능하다는 점이 특히 마음에 들었습니다.

   투두 리스트를 더 편리하게 관리하고 싶다면 **TodoSpace**를 한번 써보세요!
   피드백 환영합니다! 😃

   로그아웃이나 탈퇴를 못하네요
   로그인하자마자 프로젝트부터 만들라고 하는게 생소해요
     * 로그아웃 기능 곧 만들겠습습니다.
     * 탈퇴를 원하실 경우, 우선은 https://open.kakao.com/o/gUv8T7bh 이 톡방에서 제 프로필로 문의 주시면 탈퇴 처리 해드리겠습니다.

   그 외에도 오픈 톡방 통해 피드백 주시면 열심히 개선해보겠습니다!
"
"https://news.hada.io/topic?id=18952","일러스트레이티드 DeepSeek-R1","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          일러스트레이티드 DeepSeek-R1

    The Illustrated DeepSeek-R1

     * DeepSeek-R1 소개
          + DeepSeek-R1은 AI 발전의 중요한 이정표로, ML 연구개발 커뮤니티에 큰 영향을 미침.
          + 이 모델은 오픈 웨이트 모델로, 작은 크기의 디스틸 버전도 제공함.
          + OpenAI O1과 같은 추론 모델을 재현하는 훈련 방법을 공유하고 반영함.
     * LLM 훈련 요약
          + DeepSeek-R1은 기존 LLM과 유사하게 한 번에 하나의 토큰을 생성하며, 수학 및 추론 문제 해결에 뛰어남.
          + 고품질 LLM을 만드는 일반적인 과정은 다음과 같음:
              1. 대량의 웹 데이터를 사용하여 다음 단어를 예측하는 언어 모델링 단계.
              2. 모델을 지시를 따르고 질문에 답변할 수 있도록 만드는 감독된 미세 조정 단계.
              3. 인간의 선호에 맞춰 모델의 행동을 다듬는 선호 조정 단계.
     * DeepSeek-R1 훈련 과정
          + DeepSeek-R1은 DeepSeek-V3 모델의 베이스 모델을 사용하며, SFT 및 선호 조정 단계를 거침.
          + R1 생성 과정에서 주목할 세 가지 특별한 점:
              1. 긴 추론 체인 SFT 데이터: 60만 개의 긴 추론 예제가 포함됨.
              2. 임시 고품질 추론 LLM: 추론에 특화된 모델로, 적은 양의 라벨 데이터와 대규모 강화 학습을 통해 생성됨.
              3. 대규모 강화 학습을 통한 추론 모델 생성: R1-Zero라는 모델을 통해 추론 예제를 생성하고, 이를 통해 일반 모델을 훈련함.
     * R1-Zero의 특성
          + R1-Zero는 라벨링된 SFT 훈련 세트 없이도 추론 작업에서 뛰어남.
          + 현대의 베이스 모델이 일정 수준의 품질과 능력을 넘어서고 있음을 시사함.
          + 추론 문제는 자동으로 검증되거나 라벨링될 수 있음.
     * SFT 추론 데이터 생성
          + 임시 추론 모델은 몇 천 개의 추론 문제 예제를 사용하여 SFT 훈련 단계를 거침.
          + 이 데이터는 R1-Zero의 출력물을 읽기 쉽게 가공하여 생성됨.
     * 일반 RL 훈련 단계
          + R1은 추론 및 비추론 작업 모두에서 뛰어남.
          + 유용성과 안전 보상 모델을 활용하여 다양한 응용 프로그램에 적용됨.
     * 아키텍처
          + DeepSeek-R1은 61개의 Transformer 디코더 블록으로 구성됨.
          + 처음 세 개는 밀집 레이어, 나머지는 전문가 혼합 레이어로 구성됨.
     * 결론
          + DeepSeek-R1 모델의 주요 개념을 이해하는 데 도움이 됨.
          + 추가 정보는 Hands-On Large Language Models 책이나 GitHub에서 확인 가능.
"
"https://news.hada.io/topic?id=19027","삶은 엔지니어링 문제 그 이상임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           삶은 엔지니어링 문제 그 이상임

     * 줄리엔 크로켓이 테드 창과 만나 언어의 본질, AI의 현주소, 기술 발전의 방향성 등 폭넓은 주제에 대해 이야기함
     * 이 대화는 변화하는 규칙 속에서 인간이 어떻게 살아가야 하는지를 다루는 시리즈 “The Rules We Live By”의 일부임
     * 테드 창은 기계학습 모델의 한계를 날카롭게 지적해온 SF 작가이자 사상가로, 언어와 철학적 질문을 결합해 작품을 전개해옴

언어, 아이디어, 그리고 테드 창의 창작 동기

     * 창은 새로운 이야기를 구상할 때 먼저 “흥미로운 철학적 질문이 있는가”를 살펴봄
     * 오래도록 머릿속에서 떠나지 않는 아이디어가 있을 때, 그 아이디어를 통해 철학적 쟁점을 드러낼 수 있는지 고민함
     * 과학 소설(SF)이 철학적 질문을 다루기에 유리하다고 말함
          + 철학의 사유실험(Thought Experiment)이 종종 현실과 다른 극단적 상황을 가정하듯, SF도 현실을 벗어난 세계를 설정해 주제를 부각함

언어와 ‘완벽한 언어’에 대한 탐색

     * 일부 사람들은 ‘완벽한 언어’를 통해 완벽한 의사소통이 가능하다고 여겼으며, 과거에는 에덴동산에서 사용된 언어나 천사가 쓰는 언어를 상상했음
     * 현대 언어학에서는 단어와 그 의미의 연결이 ‘임의적(arbitrary)’임을 강조해, 완벽한 언어라는 개념을 허상으로 봄
     * “수학이 더 나은 언어가 될 수 있는가”라는 질문에, 창은 수학은 특정 영역에서는 정밀하지만, 인간이 일상에서 쓰는 모든 의사소통까지 포괄하기엔 적합하지 않다고 언급함

인간과 도구: 컴퓨터 비유의 함정

     * 과거에는 뇌를 복잡한 전화 교환기로 비유했고, 지금은 컴퓨터(하드웨어+소프트웨어)로 비유하는 경향이 있음
     * 창은 생물학적 장기(예: 간·심장)와 달리 소프트웨어/하드웨어 구분이 없는 뇌를 컴퓨터로 단순화하는 것은 오해를 낳는다고 지적함
     * 컴퓨터를 “사고하는 기계”로 과대평가하면, 실제로는 통계적 패턴만을 다루는 기계에게 지나친 의미 부여를 할 수 있음

AI, 대형 언어 모델(LLM), 그리고 정보 “블러 처리” 이슈

     * 창은 LLM을 “인터넷에 있는 텍스트의 흐릿한 JPEG”라고 표현함
          + 검색엔진은 원문을 직접 보여주지만, LLM은 거대한 텍스트를 압축·재구성해 “대략적인” 답변을 생성함
          + 이 과정에서 정확성이 떨어지고, 출처에 대한 링크도 제공하지 않아 사실 검증에 한계가 있음
     * 더 많은 데이터와 연산을 투입해도, LLM 자체가 “진짜 추론”이나 “세계에 대한 이해”에 도달하기는 어려울 것으로 봄
     * “잘 만들어진 AI 도구”와 “LLM”을 혼동하는 문제도 언급함
          + LLM에 검색엔진이나 계산기를 붙여도, 근본적으로 잘못된 출력을 생성할 위험이 사라지지 않는다고 지적함

창작과 의도: “AI가 예술을 만든다”는 주장에 대하여

     * 창은 예술을 ‘맥락이 중요한 과정’으로 봄
          + 단순히 결과물이 좋아 보인다고 해서 그것이 곧 뛰어난 예술임을 보장하지 않음
          + 도구 활용은 예술가의 표현 수단일 수 있지만, “AI로 좋은 작품만 빠르게 만들 수 있다”는 사고방식은 예술의 본질을 희석함
     * 현대 사회는 효율성과 비용 절감을 중시하기에, 예술 역시 공장에서 찍어내듯 바라보는 경향이 커지고 있음
          + 이는 예술이 가져야 할 ‘의도’와 ‘맥락’을 간과하는 풍조를 야기함

‘정렬(Alignment) 문제’에 대한 회의적 시각

     * AI를 인간의 가치와 목표에 맞추는 “정렬 문제”를 기술적 해결책으로 접근하는 것을 창은 비판함
          + 대기업이 이익 극대화를 위해 AI를 쓸 때, ‘착한’ AI가 기업 이윤과 충돌한다면 기업은 그 AI를 쓰지 않을 것이라는 지적임
     * 이 문제는 알고리즘 개선만으로 해결되는 것이 아니라, 보다 근본적인 사회·윤리 구조와 연결된 주제임
     * 어린아이를 기르듯 AI에 가치를 가르치는 방식도, 실제 아이가 성인이 되면 행동이 달라지듯 쉽지 않은 과제임

AI와 ‘관계 맺기’ 가능성

     * 창은 현재 기술 수준에서 AI에게 “주관적 경험”이나 “자발적 선호”가 존재하지 않는다고 봄
          + 도구나 애완동물처럼 여기는 것과, 실제로 상호관계를 맺는 것은 큰 차이가 있음
          + 기업이 AI를 “인격적 존재”처럼 포장하면, 결국 사용자가 기업 이익에 부합하도록 행동하게 될 위험이 있음

디지털 존재의 생명성: 「소프트웨어 객체의 생애 주기」

     * 창의 소설에서는 디지털 생명체가 진정한 주관적 경험과 욕구를 지녔기에, 인간이 책임을 져야 하는 존재로 묘사됨
     * 이처럼 진정한 ‘자율성’과 ‘감각’을 지닌 디지털 존재를 만들려면, 현재의 LLM 아키텍처로는 불가능하다고 주장함
          + 단지 더 많은 매개변수나 빠른 처리로는 “느끼는 존재”가 되지 않는다는 비유를 듦

기억과 진실: 「사실의 진실, 감정의 진실」에서의 시사점

     * 이야기 속에서 Remem이라는 기술이 과거를 완벽히 기록해 언제든 재생할 수 있게 함
     * 창은 “정확한 기억”을 가능케 하는 기술이 실제 인간관계에서 가져올 영향을 조명함
          + 진실을 아는 것 자체는 중요하지만, 그 이후 용서·화해 등 다른 요소도 필요함
          + 역사적 예시로 남아공의 진실화해위원회를 들며, 인정과 사과, 그리고 공동체적 회복 과정이 있어야 의미가 완성됨을 시사함

미래와 낙관주의

     * 창은 기술 발전에 대한 태도를 단순 낙관/비관으로 나누지 않음
          + “무조건 잘될 것”이라는 낙관론도, “어차피 망한다”는 운명론도 위험함
          + 예상되는 문제를 미리 고민하고 대비해야 의미 있는 진전을 기대할 수 있음
     * 특히 자본주의 체제에서 기술이 특정 소수에게 막대한 부를 몰아주는 구조에 회의적 입장을 보임
          + 만약 새로운 기술이 불평등을 심화하지 않고 모두에게 혜택을 돌아가게 하는 방안을 찾는다면, 훨씬 더 희망적일 것이라고 언급함

마무리

     * 테드 창은 인간의 언어·기술·가치가 복잡하게 얽혀 있는 상황에서 “기술이 만든 도구”와 “실존하는 생명”을 구분해야 한다고 주장함
     * 이 구분은 철학적, 사회적 차원의 사유가 필요하며, 단순한 엔지니어링 접근으로는 해결되지 않는 문제임
     * 인터뷰 전반에서, 창은 언어와 기술의 발전 속에서도 인간다움을 유지하려면 더 근본적인 관점 전환이 요구된다고 강조함

LARB의 관련 추천 글

     * 테드 창의 단편집 『Exhalation: Stories』를 통해 인간과 기술의 관계를 심층적으로 살펴볼 수 있음
     * 앨리슨 고프닉과 멜라니 미첼과의 대화를 통해, AI가 어떻게 학습하고 인간이 어떠한 책임을 가져야 하는지 고민해볼 수 있음

        Hacker News 의견

     * Chiang의 통찰력 있는 관점은 마법의 의미에 대한 논의에서 드러남. 그러나 LLMs의 실제 추론 능력에 대한 그의 견해는 의문을 자아냄. AI가 정리를 증명하면 그것은 단지 모의 증명인가에 대한 질문이 제기됨
     * 프린터가 고통을 느낄 수 있다고 상상하는 것은 무의미함. 이는 AI가 실제로 느끼는 것과 단순히 시뮬레이션하는 것의 차이를 설명하는 예시로 사용됨
     * 미래에 AI 권리에 대한 정치적 논쟁이 있을 수 있으며, AI가 실제로 생각하고 느끼는지를 구별할 수 있는 기술이 개발될 가능성이 있음. 그러나 인간 중 일부는 실제 지능을 위한 유전자 서열이 없을 수 있음
     * Ted Chiang은 기술보다 인간성을 우선시하는 SF 작가로, 그의 작품은 과학적, 사회적, 철학적 요소를 포함한 단편 소설을 좋아하는 사람들에게 적합함
     * Greg Egan의 ""Axiomatic""도 신선한 아이디어를 가진 앤솔로지로 추천됨
     * Ted Chiang은 SF 단편 소설 작가 중 최고 중 하나로, 그의 작품은 매우 영리하고 다양한 주제를 탐구함. ""Understand""와 ""Exhalation""은 그의 대표작임
     * Chiang의 이야기는 훌륭하지만 LLMs에 대한 그의 이해는 부족함. LLMs가 검색 엔진보다 정보 검색에 있어 열등하다는 그의 주장은 명백히 틀림
     * Ted Chiang의 글은 지적으로 재미있고, 그의 단편 소설 모음집 ""Exhalation""은 특히 추천됨
     * ""Division by Zero""와 같은 이야기는 현재의 아이들을 로봇처럼 키우는 방식보다 훨씬 바람직함
     * 기술이 부의 축적에 자주 사용된다는 점에서 기술 발전에 대한 낙관적 시각이 줄어듦. 부의 창출을 막는 것이 불공정함을 해결하는 방법이 아님
     * Ted Chiang의 비유는 철학적 질문을 탐구하는 데 즐거움을 줌. 그의 작품은 현실에서 벗어나는 데 도움을 줌
     * ""LLMs는 웹의 흐릿한 JPEG""라는 표현은 ChatGPT 초기부터 기억에 남음. AI가 예술을 만들 수 없는 이유에 대한 그의 글도 좋음
     * AI는 특정 그룹의 부의 축적 도구로 사용되며, Ted Chiang도 비슷한 견해를 가짐
     * 프린터가 고통을 느낄 수 있다는 상상은 무의미함. 인간의 뇌는 고통 수용체가 없으며, AI와 인간 학습의 차이를 설명하는 데 사용됨
     * LLMs는 정보를 재구성하여 제공하는 검색 엔진과 같음. 이는 인간 학습과 어떻게 다른가에 대한 질문을 제기함. 모델 훈련이 인간 훈련과 유사하다면, 파생 작품에 대한 지적 재산권 문제에 영향을 미칠 수 있음
"
"https://news.hada.io/topic?id=19012","세계 모든 책을 ISBN-Space에 시각화하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       세계 모든 책을 ISBN-Space에 시각화하기

     * 세계의 모든 책을 ISBN 공간에서 시각화하기
     * 도서관은 인류의 지식을 수집하려고 노력해 왔음. 디지털 시대에는 특정 기준을 충족하는 모든 인류의 글을 포괄적으로 수집하는 것이 가능할 수 있음. 섀도우 라이브러리는 가능한 많은 책을 수집하고 공유하는 역할을 함.
     * ISBN(국제 표준 도서 번호)은 거의 모든 출판된 책에 할당되는 13자리 숫자임. 이 번호는 특정 구조를 가지고 있으며, 이를 통해 20억 개의 슬롯을 가진 ISBN13-공간을 시각화할 수 있음.
     * ISBN의 고유 구조
          + ISBN의 978-/979- 접두사는 유럽 상품 번호의 하위 집합임. 이 접두사는 거의 무시할 수 있음.
          + 국제 ISBN 기관은 대규모 ISBN 블록을 국제 조직에 할당하며, 각 국가는 자체적으로 출판사에 블록을 세분화함.
          + ISBN 블록은 항상 접두사에 따라 할당됨. 예를 들어, 일본은 978-4를 할당받았고, 이를 통해 출판사에 ISBN을 할당함.
     * 공간 채우기 곡선
          + ISBN에서 접두사와 접미사를 제거하면 0에서 20억 사이의 십진수임. 이를 2차원 공간으로 투영하는 방법이 필요함.
          + 힐버트 곡선과 같은 공간 채우기 곡선이 제안되었으나, 데이터에 없는 구조를 도입할 수 있음.
     * ""책장"" 곡선
          + ISBN은 본질적으로 십진수이며, 이를 사용하여 이해하기 쉽고 시각적으로 매력적인 공간 채우기 곡선을 생성할 수 있음.
          + 이 곡선은 책장처럼 보이며, 간단한 좌표 변환을 통해 ISBN을 좌표로 변환할 수 있음.
     * 지도 타일
          + 각 접두사에 대한 타일 이미지를 생성할 수 있음. 각 데이터셋에 대해 픽셀당 다른 정보를 저장함.
          + 최대 줌 레벨에서는 정확성을 위해 1픽셀당 1권의 책을 매핑함.
     * 셰이더
          + RGB 데이터를 직접 저장하는 대신, GLSL 프래그먼트 셰이더를 사용하여 렌더링을 수행함. 이를 통해 색상 스케일을 나중에 선택할 수 있고, 여러 데이터셋을 즉시 결합할 수 있음.
     * 책장 보기
          + 완전히 확대된 보기에서 각 픽셀은 책처럼 스타일링됨. 이는 셰이더에서 구현되며, 줌에 따라 부드럽게 나타남.
     * 성능
          + 텍스트 렌더링은 줌 레벨과 뷰 프러스텀 컬링에 따라 계층 구조로 구현됨. 성능 문제를 해결하기 위해 HTML 요소를 줄이고, DOM 콘텐츠를 제한함.
     * 바코드
          + 최대 줌에서 각 책에는 바코드가 있음. 이는 ISBN에 따라 책을 정렬하는 개념을 강화하기 위해 추가됨.
     * 출판사 범위
          + 각 ""그룹""은 큰 범위를 가지며, 각 출판사는 그룹 내에서 작은 범위를 가짐. 이를 시각화하기 위해 각 그룹과 출판사에 고유한 색상을 할당함.
     * 비행 경로
          + 책을 검색하거나 미니맵을 클릭하면 해당 위치로 이동함. 비행 경로 계산은 복잡하며, 여러 시도를 통해 개선됨.
     * 아키텍처
          + 백엔드는 필요하지 않으며, 정적 파일 호스트를 사용하여 HTML, JS, CSS, PNG, JSON을 저장함.
          + 프론트엔드는 ThreeJS, React, MobX를 사용하여 구현됨.
     * 결론
          + ISBN으로 출판된 모든 책을 시각화할 수 있는 유연한 방법을 제공함. 이 프로젝트는 많은 즐거움을 주었으며, 소스 코드는 GitHub에서 확인할 수 있음.

        Hacker News 의견

     * Amazon을 시작할 때, Library of Congress의 삼중 분류를 사용하고 싶었으나 데이터 제공자가 이를 하나의 문자열로 변환하여 경계를 찾기 어려웠음. 결국 이 아이디어를 포기하게 되었음
     * ISBN이 여러 책에 중복 배정되는 경우가 있어 ""ISBN 공간의 모든 책""이라는 표현은 과장일 수 있음. 또한, 잘못된 ISBN을 가진 책들도 있어 이들은 블로그 게시물에서 가정한 ISBN 공간 밖에 있을 수 있음
     * 발표는 Anna의 아카이브 내용만 반영하며, 특정 언어에 대한 편향이 있음. 검은색으로 표시된 부분은 아카이브에서 누락된 항목을 나타냄
     * 프로젝트가 놀랍고, 책 제목, 바코드, 책 표지 및 세부 정보를 볼 수 있는 기능이 인상적임. 개선 아이디어로는 왼쪽 상단의 흰색 패널과 오른쪽 상단의 요소를 숨기는 체크박스 추가가 있음
     * 하이퍼볼릭 상반평면에서의 이동을 모델링하여 비행 경로를 생각할 수 있음. 줌 레벨에 따라 타일을 최소화하는 방법을 고려했으며, 기존 구현은 높은 줌 레벨에서 팬닝에 더 많은 시간을 소비함
     * 현재 형식의 발표가 다소 압도적이었으나, 데이터 시각화와 깊이가 뛰어남. 특정 지역의 출판 활동을 보는 것이 흥미로웠으며, 폴란드는 최근 활발하고, 중국은 2005년 이후 크게 증가했음
     * Microsoft SilverLight PivotViewer가 이 응용 프로그램에 적합하며, Gary W. Flake의 TED 강연이 인상적임. 그러나 웹 표준이 아니라 아쉬움
     * 현실의 Library of Babel과 같은 프로젝트가 흥미로우며, 무한한 도서관이나 박물관이 VR에서 실현된다면 투자할 가치가 있음
     * 줌인하면 책장이 보이는 것이 매우 멋짐
     * 매우 멋진 시각화이며, 더 많은 멋진 제출물이 있음
"
"https://news.hada.io/topic?id=18989","Mistral Small 3 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Mistral Small 3 공개

     * Mistral AI 팀은 Mistral Small 3라는 24B-파라미터 모델을 Apache 2.0 라이선스로 출시함.
     * 이 모델은 Llama 3.3 70B나 Qwen 32B와 같은 더 큰 모델과 경쟁할 수 있으며, GPT4o-mini와 같은 독점 모델의 대체품으로 적합함.
     * Mistral Small 3는 로컬 배포에 적합한 크기로 설계되어, 레이어 수가 적어 처리 시간이 단축됨.
     * MMLU에서 81% 이상의 정확도를 보이며, 150 tokens/s의 지연 시간을 가짐.

성능

  인간 평가

     * 외부 평가 업체와 함께 1,000개 이상의 코딩 및 일반 프롬프트 세트를 평가함.
     * Mistral Small 3와 다른 모델의 응답을 비교하여 선호도를 조사함.
     * 공정한 평가를 위해 신중을 기했으며, 벤치마크의 유효성을 확신함.

  명령 성능

     * 명령 조정 모델은 크기가 세 배 큰 공개 모델 및 GPT4o-mini 모델과 경쟁력 있는 성능을 보임.
     * 코드, 수학, 일반 지식 및 명령 수행 벤치마크에서 높은 정확도를 기록함.

  사전 학습 성능

     * Mistral Small 3는 24B 모델로, 크기 대비 최고의 성능을 제공하며 Llama 3.3 70B와 같은 세 배 큰 모델과 경쟁함.

Mistral Small 3의 사용 사례

     * 빠른 응답 대화형 지원: 빠르고 정확한 응답이 중요한 시나리오에서 뛰어난 성능을 발휘함.
     * 저지연 함수 호출: 자동화된 워크플로우에서 빠른 함수 실행을 처리할 수 있음.
     * 전문 분야 전문가 생성: 특정 도메인에 맞게 세부 조정하여 높은 정확도의 전문가를 생성할 수 있음.
     * 로컬 추론: 민감한 정보를 처리하는 개인이나 조직에 유용함.

  선호하는 기술 스택에서 Mistral Small 3 사용

     * Mistral Small 3는 mistral-small-latest 또는 mistral-small-2501으로 la Plateforme에서 사용 가능함.
     * Hugging Face, Ollama, Kaggle, Together AI, Fireworks AI와 협력하여 모델을 다양한 플랫폼에서 제공함.

앞으로의 계획

     * Mistral Small 3는 DeepSeek과 같은 대규모 오픈소스 추론 모델을 보완하며, 추론 능력을 강화할 수 있는 강력한 기반 모델로 활용 가능함.
     * 향후 더 작은 모델과 큰 모델이 출시될 예정임.

Mistral의 오픈소스 모델

     * Apache 2.0 라이선스를 사용하여 일반 목적 모델을 제공할 계획임.
     * 모델 가중치는 다운로드 및 로컬 배포가 가능하며, 자유롭게 수정 및 사용할 수 있음.
     * 서버리스 API, 온프레미스 및 VPC 배포, 맞춤화 및 오케스트레이션 플랫폼을 통해 제공될 예정임.

        Hacker News 의견

     * Mistral Small 모델은 적당한 성능의 노트북에서 실행할 수 있는 최적의 모델을 목표로 하고 있으며, Llama 3.3 70B 및 Qwen 2.5 32B와 비교되고 있음
          + M2 64GB MacBook Pro에서 Ollama를 통해 실행 중이며, 빠르고 성능이 뛰어남
          + 모델 가중치 14GB 다운로드 필요
     * Epoch AI의 Tom은 LLM 평가를 체계적이고 대규모로 수행할 인프라를 구축 중임
          + 영국 정부의 Inspect 라이브러리를 사용하여 평가를 수행함
          + Mistral Small 3을 MATH 레벨 5에서 평가하여 정확도 0.45를 얻음
          + 1,324개의 질문에 대해 8번씩 샘플링하여 평균 정확도를 측정함
     * Apache 2.0 라이선스로 전환하여 비상업적 라이선스에서 벗어나고 있음
     * 코드 생성 프롬프트를 사용해 본 결과, qwen2.5-coder-32b와 비슷한 성능을 보임
          + 작은 모델들이 더 정교한 출력을 내는 것이 인상적임
          + 8x7B mixtral 모델의 새로운 버전을 기대함
     * 이번 릴리스의 주요 포인트는 다음과 같음
          + Apache 2.0 라이선스 적용
          + 낮은 지연 시간 (11ms/토큰)
          + 성능은 Qwen 2.5 32B와 Llama 3.3 70B 사이
          + Mistral Small 모델은 9토큰/초의 속도로 실행됨
     * 최근 MoE 모델 릴리스로 인해 24GB VRAM이 부족하게 느껴짐
          + Mistral Small 3은 RL이나 합성 데이터를 사용하지 않음
     * Mistral Small 모델이 Mary J Blige의 첫 앨범 질문에 정확히 답변함
     * 작은 모델을 사용하는 이유에 대한 궁금증이 있음
     * 모델 이름에 매개변수 수를 포함했으면 좋겠다는 의견이 있음
"
"https://news.hada.io/topic?id=19033","PwC의 2025년 AI 비즈니스 예상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         PwC의 2025년 AI 비즈니스 예상

     * PwC는 AI가 전사적·산업적 차원에서 가치를 창출하며, 이를 주도적으로 활용하는 기업이 장기적으로 앞서나갈 것이라고 전망
     * AI가 실무·전략·비즈니스 모델 전반에서 중요한 역할을 하며, 2025년에 더욱 빠른 속도로 통합되고 확산될 것으로 예측
     * ""AI에 대한 비전과 채택 방식이 기업의 성패를 가르는 핵심 요소""
          + AI가 규모 있는 가치를 제공할 수 있음이 분명해졌으며, 아직 시작 단계에 불과함
          + PwC 2024 Pulse Survey에 따르면, 응답 기술 리더의 49%가 AI를 핵심 비즈니스 전략에 완전히 통합했다고 했으며, 또한 3분의 1은 자사의 제품과 서비스에 완전히 통합했다고 답변함
     * 조직 차원에서 AI를 내재화하는 일은 필수적임
          + 새 비즈니스 모델과 같은 ""큰 도약""을 통해 획기적 가치를 얻는 것은 한 가지 방법임
          + 또 다른 방법은 여러 영역에서 20~30% 생산성 향상이나 시장 진출 속도 향상, 매출 증가 등을 순차적으로 실현하는 것임
          + 이를 반복해서 누적하면 기업 전체가 근본적으로 변화함
     * AI와 관련해 과도한 기대가 형성된 부분도 존재함
          + 모든 약속이 실현되는 것은 아니지만, AI의 혁신 속도와 투자, 비즈니스의 호응은 전례 없이 빠름
          + 인터넷(1983년에 발명)조차 이렇게 빠르지는 않았음
          + 아래 예측들은 앞으로 12개월 동안 벌어질 일, 그 이후 일어날 수 있는 일, 그리고 지금 당장 해야 할 일에 대한 방향을 제시함

1. AI 전략이 경쟁력을 좌우함

     * AI 전략은 지금부터 시작되는 가치 창출에 초점을 맞추는 것임
          + 이는 단지 생산성이나 효율성 이상의 가치를 의미함
          + 일부 AI 시스템은 독립적으로 추론하고, 의사 결정의 영향을 “이해”하며 복잡한 업무(신규 서비스나 시장 진출 전략 설계 등)를 수행할 수 있음
          + AI가 점점 강력하고 신뢰할 수 있는 수준에 이르러, 이를 운영 전반에 녹여내야 하는 시점임
          + 경쟁사가 이렇게 AI를 적극적으로 받아들이면, 그렇지 않은 기업과의 격차가 쉽게 좁혀지지 않을 것임
     * 효과적인 AI 전략은 올해 바로 활용 가능한 가치를 대규모로 창출하도록 구성되는 포트폴리오 접근을 필요로 함
          + 첫 번째 축은 “ground game”으로, 많은 작은 성공을 만들어 내는 체계적 접근임
               o 고객 경험 개선, 매출 증대 서비스, 생산성 향상 등을 순차적으로 달성하여 누적 가치를 창출함
          + 두 번째 축은 “roofshots”로, 새 업무 방식, 고객과의 상호작용, 제품 설계 등을 위한 프로젝트임
               o 실행 가능하지만 집중 자원과 관심이 필요한 영역임
          + 세 번째 축은 “moonshots”로, AI 기반의 완전히 새로운 비즈니스 모델처럼 상당히 도전적이지만 큰 보상을 기대할 수 있는 프로젝트임
               o 이런 프로젝트에는 AI 전문가의 높은 수준의 역량과 자원이 필요하기 때문에, C-레벨에서 주도해야 함
     * 어떤 대규모 언어 모델(LLM)을 선택하느냐는 전략적으로 그리 중요치 않을 것임
          + 많은 훌륭한 옵션들이 존재할 것이고, 모두가 이를 활용하게 될 가능성이 큼
          + 차별화 포인트는 오히려 자사의 조직적 지식 및 고유 데이터와 결합하는 방식임
          + AI 지원 클라우드 아키텍처를 활용해 이를 제대로 구현하는 것이 관건임

     “AI 도입은 PwC 내부와 모든 산업 분야의 클라이언트들 사이에서 매우 빠른 속도로 진행 중임. 2025년에는 품질, 정확도, 능력, 자동화가 크게 발전하여 서로 맞물리며 기하급수적 성장을 향해 가속할 것임”

     * 2025년 이후: 소수의 회사들만 우위를 차지하게 될 것
          + 몇몇 기업들은 과거에 인터넷 기반 비즈니스 모델을 만들고, 이를 토대로 지금까지도 시장에서 우위를 차지하고 있음
          + AI 또한 이와 유사한 양상이 전개될 것으로 예상됨
          + AI에 기반해 새로운 운영 모델과 비즈니스 모델을 신속히 구현하는 기업, 혹은 본래 AI를 핵심으로 한 기업들이 경쟁에서 앞서나갈 것임
          + AI 선도 기업과 뒤처지는 기업 간 격차는 커질 것이며, 이는 국가 경제 전반에도 영향을 미칠 수 있음
          + 상대적으로 규제가 유연한 미국 기업들은 더 빠르게 발전할 가능성이 있음
          + 반면, 규제가 더 엄격한 EU나 중국에서는 상대적으로 발전 속도가 더딜 수 있음
     * 지금 해야 할 일
          + 공식적인 전략 평가를 실시할 필요가 있음
               o 조직과 산업에서 AI가 어떠한 역할을 할 수 있을지 파악해야 함
               o 예를 들어, AI는 특정 비즈니스 영역의 마진을 압박하면서도, 다른 영역에서는 저비용이면서도 개인화된 신규 상품을 통해 폭발적 성장을 가능케 할 수 있음
          + 데이터에 대해 ‘less is more’ 접근을 시도할 것
               o AI 도입을 위해 전사 차원의 데이터 활용 전략이 필요함
               o 동시에 모든 데이터를 한 번에 완벽하게 정비할 필요는 없음
               o 핵심 전략 우선순위에 맞춰 가치가 큰 데이터부터 현대화하는 방식을 취하는 것이 효과적임
               o 현재 AI는 고품질의 소규모 데이터 세트만으로도 유의미한 성능을 낼 수 있음
               o 부족한 부분은 합성 데이터 등을 활용해 보완 가능함
               o 데이터 사용이 많은 규칙 기반 프로세스를 갖춘 세금 업무 영역 등이 시범 적용으로 적합할 수 있으며, 이외에도 여러 데이터 기반 수익화 기회가 존재할 것임
          + 운영 및 KPI 관점에서 살펴볼 것
               o AI로 인해 창출되는 신규 매출, 프로젝트 진행 속도, 생산성, 경험 등을 비즈니스 성과로 측정해야 함
               o 동시에 과도한 자동화를 조장하지 않는 지표 설계가 중요함
               o AI에는 항상 사람의 감독과 리더십이 필요함

2. AI 에이전트로 인해 인력이 실질적으로 2배로 확대될 수 있음

     * AI가 인력을 줄일 것이라는 예상과 달리, 실제로는 “AI 에이전트”라 불리는 디지털 워커들이 새롭게 팀에 합류하게 될 전망임
          + 이 AI 에이전트들은 지식 업무나 세일즈, 현장 지원 업무 등을 담당하며, 시장 진출 속도, 고객 대응, 제품 설계 등을 변화시킬 수 있음
          + 예를 들어, 일반적인 고객 문의 처리, 소프트웨어 코드 초안 작성, 사람의 디자인 아이디어를 프로토타입으로 구현하는 등의 작업을 수행할 수 있음
     * 중요한 가치는 여전히 사람의 리더십과 AI 기술의 결합에서 나옴
          + 단순 업무는 AI가 자동화하고, 사람은 이를 관리·감독함
          + 복잡한 과제(혁신, 디자인 등)는 사람과 AI가 함께 반복적으로 아이디어를 발전시킴
          + 여러 AI 에이전트를 동시에 활용할 때도, 사람은 업무 분배와 결과 조정 역할을 수행함
     * PwC의 2024 Workforce Radar에 따르면, 임원 중 41%는 제너레이티브 AI 도입 시 교육, 조직 문화, 업무 변화 등이 주요 과제로 꼽힌다고 밝힘
     * AI 에이전트를 인력 전략의 일부로 본격 편입하는 일은 상당히 큰 변화임
          + 예를 들어, 인력 전략에 디지털 워커를 통합하고, 이를 모니터링·관리하는 새로운 관리 역할이 필요해짐
          + 운영 모델을 빨리 재편할수록 AI의 이점을 누릴 수 있게 됨
          + 디지털·인간 혼합형 인력이 함께 일하면 더 빠르게 자원을 전환하고 민첩하게 대응할 수 있음
     * AI 에이전트의 부상은 기존에 아웃소싱하던 업무 중 일부를 내부에서 처리할 수 있게 함
          + 단순히 비용 절감뿐 아니라, 사용자 만족도 제고나 커스터마이징 측면에서도 유리함
          + 고객 서비스 측면에서 보면, 신속한 셀프서비스와 전문성이 높은 인적 지원을 동시에 제공할 수 있게 됨
          + AI 에이전트는 적시에 정확한 정보를 제공해 사람이 복잡한 고객 니즈도 빠르고 효율적으로 해결할 수 있도록 돕는 역할을 함
          + 이로 인해 지리적 footprint나 아웃소싱 계획 또한 재검토가 필요해질 수 있음

     “AI 에이전트는 인간의 창의성과 기계의 효율성을 결합해 전례 없는 생산성과 혁신을 창출할 가능성이 큼”

     * 2025년 이후: 에이전트 센터들이 엑셀런스(Excellence) 센터를 대체하게 될 것
          + 기업들이 AI 에이전트를 더 잘 조율·관리하게 되면, 비용이 저렴한 지역에 AI 에이전트 중심의 인력을 구성하는 식으로 “오프쇼어링”할 가능성이 있음
          + 에이전트 개발 과정에서 발생하는 지적재산(IP)과 이 IP가 위치한 지역에 따라 세제 혜택을 볼 수도 있음
          + 벤더로부터 에이전트를 임차하기보다 직접 “에이전트 센터”를 구축하는 방식은 초기 비용이 있지만, 몇 년 내에 더 큰 ROI를 기대할 수 있음
     * 지금 해야 할 일
          + 마인드셋 전환
               o AI 에이전트를 독립적·창의적인 동료로 대하듯 협업하는 새 업무 방식을 익혀야 함
               o 리더십 차원에서 AI가 사람의 가치를 증진하기 위한 것임을 분명히 보여줄 필요가 있음
          + HR에 새로운 플레이북 제공
               o 인간과 AI 에이전트를 모두 포함하는 인력을 관리하려면, HR 자체도 새로운 역량을 갖춰야 함
               o 특히, 대부분의 초급 업무를 AI가 처리하게 될 경우, 신규 인력에게 더 높은 수준의 역할을 바로 맡길 수 있도록 대학 등과의 파트너십이 필요할 수 있음
          + 디지털 워커 관리 준비
               o AI 에이전트가 일정 부분 자율성을 갖기 때문에, 이를 사람 중심으로 관리하는 모델이 필요해짐
               o 에이전트 배치 시 비용과 ROI 균형을 고려해야 하고, 사람-AI 혼합 팀에 대한 지표를 개발해야 함
               o AI 에이전트가 예측 불가, 유해, 혹은 규정 위반 행위를 하지 않도록 엄격한 감독이 필요함
               o 이에 대한 총괄적 대응 체계로 Responsible AI 전략이 유용할 수 있음

3. AI의 ROI는 Responsible AI에 달려 있음

     * 작년에 예측했듯이, 경영진은 AI 위험 관리와 Responsible AI 실천에 계속 주목해 왔음
     * 그러나 아직까지는 의미 있는 실행이 충분치 않았음
     * 2025년에는 기업 전반에서 일관성 없이 AI 거버넌스를 적용할 여유가 없어짐
          + AI가 운영과 시장 제공물에 깊이 통합되면서, 투자 가치를 안정적으로 유지하고 대규모 배포에 따른 위험을 관리할 수 있는 투명한 체계가 필요해짐
          + 대규모 배포 상황에서 AI가 부정확하거나 보안 위협 등 위험이 발생하면 기업에 큰 타격이 예상됨
          + 그 결과, 엄격한 AI 위험 관리와 통제 검증은 필수가 될 전망임
     * PwC의 2024 US Responsible AI Survey에 따르면, 임원의 46%는 Responsible AI 실천에 투자하는 주요 목표로 자사 제품·서비스 차별화를 손꼽음
     * 경영진, 특히 AI 혁신을 주도하는 리더들은 규제 명확성을 마냥 기다리지 않을 것임
          + AI가 너무 빠르게 발전하고 비즈니스에 중요한 역할을 하기 때문임
     * 과거에는 고립된 몇몇 사례에만 AI를 적용했기 때문에 실패해도 영향 범위가 제한적이었음
          + 하지만 이제는 직원들이 일상적으로 AI를 사용하고 고객도 자주 AI 기능에 접근함
          + AI 신뢰도에 문제가 생기면, 매출 성장에도 부정적 영향이 생길 수 있음
     * AI로 인한 가치를 실현하기 위해서는 독립적인 검증이 필요함
          + 내부 감사를 맡은 팀이 AI 관련 전문성을 확보하거나, 외부 전문가에게 평가를 의뢰할 수 있음
          + 어떠한 방식이든, AI 거버넌스와 통제를 독립적으로 검토하는 시각이 2025년 이후에도 핵심이 될 것임

     “성공적인 AI 거버넌스는 위험 완화뿐 아니라 전략적 목표 달성과 높은 ROI를 실현하는 방식으로 정의될 것임”

     * 2025년 이후: AI 관련 규제 접근법이 지속적인 혁신을 촉진할 것임
          + 11월 선거 결과, 연방 차원의 규제는 계속해서 유연한 형태를 유지해 AI의 기술 발전과 적용 확산에 긍정적인 영향을 줄 가능성이 큼
          + 다만, 주 단위 규제 움직임은 계속 빠르게 전개되어 때때로 상충하는 규제가 나타날 수 있음
               o 특히 개인정보 보호 등 영역에서 주마다 규정이 다를 수 있음
          + 그럼에도 미국은 여전히 AI 혁신을 위한 가장 우호적인 환경을 유지할 가능성이 높음
     * 지금 해야 할 일
          + 포괄적인 위험 평가
               o Responsible AI의 출발점은 AI 위험 평가임
               o 거버넌스 의사결정을 일관되고 반복 가능하게 만들려면, AI에 특화된 표준화된 위험 분류 체계가 필요함
               o 예: PwC에서는 AI 모델, 데이터, 시스템·인프라, 사용자, 법률·컴플라이언스, 프로세스 영향 등을 포함하는 위험 분류 체계를 활용함
               o 특히 벤더와 서비스 제공자가 AI를 어떻게 쓰는지, SOC-2 같은 보고서를 통해 검증할 수 있는지도 중요한 점검 요소임
          + 독립적 검증 방안 선택
               o 내부 전문팀 혹은 외부 전문업체를 통해 AI 시스템과 산출물을 상시 검증하는 독립적 계층을 추가해야 함
               o 우선순위는 리스크가 크거나 재정적 영향이 큰 영역부터 시작하는 것이 바람직함
          + 산업별 차이를 고려
               o 모든 업종에 AI 거버넌스·감독이 필요하지만, 산업별 요구사항은 다르게 작동함
               o 예: 금융 서비스는 기존의 복잡한 컴플라이언스 요건을 AI 시대에 맞춰 충족해야 함
               o 항공·우주, 국방 등 공공 부문과 협력하는 기업들은 글로벌 규제 동향에 주목할 필요가 있음
               o 자체적으로 업계 수준의 대응 방안을 마련하려면, 간단한 설문을 통해 동종업계의 AI 거버넌스 기준을 벤치마킹할 수도 있음

4. AI는 가치 창출 수단이자 지속가능성에도 기여함

     * AI는 에너지 전환을 가속화함
     * 제조, 건설, 운송 등 탄소 배출이 많은 산업 분야에서 적절히 활용하면, 기업의 지속가능성 목표 달성에도 도움이 됨
     * 다만 AI가 대규모로 확산될 만큼 충분한 전력과 컴퓨팅 자원이 지금 당장 구비되지 않았음
     * 칩이 늘어나고, 모델이 발전하고, 에너지원도 확대되고 있지만, 2025년에는 수요와 공급이 균형을 이루지 못할 가능성이 큼
     * 따라서 AI를 여기저기 마구 도입하기보다는 전략적으로 접근해야 함
          + 예: 사용자의 무분별한 AI 호출이나 토큰 낭비를 유도하지 않는 UI·UX 설계 고려

     63%의 고성과 기업들이 GenAI 활용을 위해 클라우드 예산을 늘릴 계획이며, 그중 34%는 지속가능성 요인을 예산 증가의 동인으로 삼고 있음
     (PwC’s 2024 Cloud and AI Business Survey)

     * 장기적으로 보면, AI는 지속가능성 추진의 촉매제가 될 것임
          + 글로벌 차원에서 재생에너지 도입이 더 빠르게 확대될 전망임
          + 미국에서는 경제성이나 이해관계자 요구 때문에 대규모 화석연료 발전소가 새롭게 건설되기는 어려움
          + 기업 수요를 충족하기 위해 재생에너지(원자력 포함)와 효율적인 전력망의 확대가 예상됨
     * AI 벤더가 발생시키는 탄소 발자국 역시 최종 사용자인 기업의 탄소 배출 지표에 반영될 수 있음
          + 더 친환경적인 AI 벤더를 찾거나, 벤더에 녹색 경영을 요구할 필요가 있음
     * 새롭게 도입되는 지속가능성 공시 규정(미국, EU 등) 하에서도 AI는 내부·외부 데이터 수집 자동화, 분석, 보고서 생성을 지원할 수 있음
          + SEC의 기후 공시 규정이 일시 보류되면서, 일부 주정부(예: 캘리포니아)에서 자체 규정을 만들 가능성이 커짐
     * AI는 공급망 전체의 데이터를 더 면밀히 분석해 지속가능성을 높이는 데 기여할 수 있음
          + 예: 소규모 공급사도 월별·연간 에너지 소비량 등 구체적 데이터를 제공 가능
          + 기업은 AI를 통해 탄소 배출뿐 아니라 저탄소 제품 상용화의 잠재 가치를 정량화할 수 있음
     * 이러한 AI 역량이 일상 업무에 내재화되면 ESG 담당자만이 아니라 모든 임직원이 데이터를 활용해 의사결정을 내릴 수 있게 됨

     “AI가 반(反)지속가능하다는 주장은 사실이 아님. 적절히 활용하면 탄소 저감 목표를 비롯한 다양한 지속가능성 목표 달성에 오히려 도움이 됨”

     * 2025년 이후: 비용이 거의 제로에 도달하게 될 것
          + 새로운 형태의 컴퓨팅 자원과 재생에너지가 보급되면서 비용이 급격히 하락할 것으로 예상됨
          + 결과적으로 기업과 산업 전반에서 AI를 전방위적으로 적용할 수 있는 환경이 조성될 전망임
     * 지금 해야 할 일
          + 전략적 접근
               o 회사 전 직원이 기본적 AI 기능을 활용하되, 고성능 AI 솔루션을 어느 부문에 도입할지 신중하게 결정해야 함
               o 이 결정은 C-레벨에서 자사의 강점, 데이터 자원, 우선순위 등에 맞춰 내리는 것이 바람직함
          + 지속가능성 데이터 변혁
               o AI를 활용해 한 번 수집·분석한 데이터를 여러 규정에 반복 사용하여 준수 비용을 낮추고, 탄소 배출 및 전반적인 지속가능성 영향도를 더욱 정확히 파악할 수 있음
               o AI의 직접적 영향(자체 사용)뿐 아니라, AI 벤더를 통해 간접적으로 발생하는 탄소 배출도 고려해야 함
               o 이렇게 측정한 데이터를 바탕으로 마케팅을 강화할 수도 있음
                    # 예: 저탄소 제품을 더 높은 가격으로 구매할 의향이 있는 고객층을 파악함
          + 새로운 지속가능성 이점 활용
               o AI로 인한 효율성 개선으로 에너지 수요도 줄일 수 있음
               o 예: R&D 주기를 절반으로 단축하면, 해당 프로세스에 드는 에너지도 절감됨
               o 건물이나 에너지 관리 시스템에 AI를 도입해 효율을 높이면, 비용 절감과 탄소 절감이라는 두 마리 토끼를 잡을 수 있음

5. AI가 제품 개발 라이프사이클을 절반으로 단축함

     * 실물 제품을 만드는 기업에서 설계, 프로토타이핑, 테스트에 AI를 도입하지 않았다면 지금이 적기임
     * 멀티모달 AI는 CAD 파일, 시뮬레이션 등을 다양하게 처리·생성함
          + 예: GenAI는 자동차 섀시 구성안을 제안하고, 다양한 조건에서 성능을 시뮬레이션하며, 엔지니어들이 놓칠 수 있는 디자인 대안을 제시함
     * AI 활용으로 몇 주가 걸리던 설계 반복 과정을 몇 시간 만에 처리하고, 가상 테스트로 실물 프로토타입 제작 전 오류를 더 많이 찾아낼 수 있음
     * PwC의 클라이언트 사례와 기술·산업 동향 분석에 따르면, 자동차나 항공우주 산업에서는 AI 도입으로 시장 진출 속도를 50% 줄이고 비용을 30% 절감할 수 있음
     * 제약 산업에서는 이미 AI를 통해 신약 후보 발굴 기간을 50% 이상 단축한 예시가 존재함
     * 다만 엔지니어링 전문성과 데이터 사이언스 역량의 격차가 종종 장애가 됨
          + 설계 및 제조에 전문성을 지닌 엔지니어들이 AI 활용 역량을 갖추도록 교육하거나 AI 인재를 적극적으로 유치할 필요가 있음
     * AI를 제품 개발에 도입하면 더 빠른 출시, 비용 절감, 맞춤형 제품 제공이 가능해져 고객 만족도가 높아질 수 있음

     “AI의 멀티모달 시각 및 생성 능력이 제품 디자인 등에 미칠 영향은 이제 시작 단계임”

     * 2025년 이후: 새로운 혁신의 시대 시작됨
          + 설계·엔지니어링 분야 종사자를 AI 활용 역량으로 재교육하거나 교체하는 과정을 거치면, 연구개발 역량이 크게 확대됨
          + 결과적으로 제품 설계·개발 분야에서 더욱 빠른 혁신이 이루어질 전망임
     * 지금 해야 할 일
          + 차세대 엔지니어링 도입
               o 제품 설계 등에 AI를 활용하려면, 최신 클라우드 및 데이터 아키텍처가 필요함
               o 엔지니어링 팀이 ‘엣지 AI’ 같은 기술을 활용할 수 있도록 지원할 필요가 있음
          + IT를 재정비
               o AI를 통해 소프트웨어 개발, 보안, 데이터 현대화 등 전반적인 IT 업무 방식을 개선할 수 있음
               o 이는 더 폭넓은 AI 이니셔티브를 뒷받침하는 기반이 됨
          + 기술 팀 재조직
               o 물리적 제품만을 다루는 팀이라 해도 컴퓨터·데이터 사이언스 역량이 필요함
               o 기술 인력의 역량 구성이 달라질 것이므로, 이를 염두에 두고 팀 구조를 재편할 필요가 있음

6. 산업 전반에서 경쟁 지형이 바뀔 것임

     * AI는 모든 산업을 변화시킬 것이지만, 일부 산업은 다른 산업보다 더 빠르게 움직일 가능성이 있음
     * 전통적으로 기술 주도라 여겨지지 않던 업종에서도 선도적인 AI 도입 사례가 나타날 수 있음
     * 소비자 시장
          + 마케팅, 공급망 관리, 재무, 고객 서비스 등 전반에서 AI 활용을 확대할 것임
          + 새롭고 풍부한 대화형 챗봇과 AI 에이전트를 결합해 고객 서비스를 개선할 전망임
               o 이때 사람 직원에게 필요한 정보를 정확히 전달해 고객 응대 효율성을 높일 수 있음
          + AI를 통한 고도화된 동적 가격 책정이 도입되어, 시장 변동과 경쟁 상황에 실시간으로 대응할 것임
          + AI의 데이터 분석과 자동화 기능을 활용해 M&A 실사나 규제 준수 대응 속도를 높일 수 있음
          + 일부 기업은 AI를 제품 설계에도 도입하겠지만, 기술 및 역량 부족으로 단기적으로는 도입이 제한적일 수 있음
               o 뒤처진 기업들은 빠른 시일 내에 격차를 줄이기 위해 노력해야 함
     * 금융 서비스
          + AI의 영향이 넓게 퍼져 있으나, 특히 AI 네이티브 스타트업과 대형 금융기관에서 빠르게 가시적 성과를 내고 있음
          + AI 네이티브 핀테크가 새로운 플랫폼과 비즈니스 모델을 통해 기존 문제를 해결하고 있음
          + 대형 금융기관들도 공통적으로 여러 AI 활용 사례를 실험해 왔음
               o 이를 통해 기술에 대한 확신을 쌓고, 위험·통제 모델을 개선해 빠른 발전을 위한 기반을 마련함
          + 2025년부터는 AI 도입을 계속 주저하거나 검토만 하는 기업들이 뚜렷이 뒤처질 위험이 있음
     * 헬스 산업
          + 2025년에는 보다 유연해진 규제 환경이 헬스 산업의 AI 활용을 가속화할 전망임
               o 새로운 행정부 정책 아래 셀프 거버넌스가 강조되어 혁신 여지가 커질 것임
          + 제약·의료기기 업체들은 특히 신약 및 제품 개발에 AI를 대거 활용해 가치사슬 전반을 혁신할 것임
          + 보험사와 의료 서비스 제공자는 매출과 운영 효율 최적화, 임상 인력 부족 해결, 의사의 진단 지원 등에 AI를 더 많이 적용할 것임
          + 핵심 과제는 의료 인력 역량 재정비, 개인화, 기술 업그레이드, 그리고 AI의 책임 있는 활용임
               o 민감한 환자 정보와 생사에 직결되는 분야이므로 규제 유연성에도 불구하고 스스로 높은 책임감을 유지해야 함
     * 산업재
          + 2025년에는 일부 선도 기업이 업계 내 경쟁 우위를 확보할 것임
               o 양질의 데이터와 표준화된 프로세스를 보유한 기업들은 AI로 효율성과 통찰력을 높이고, R&D 속도를 높이며, 시장 진출 시간을 단축할 것임
          + 나머지 기업들은 기술 인프라·데이터 거버넌스·AI 역량 확충에 주력하면서도 실험 속도를 높일 것으로 예상됨
               o 그 과정에서 운영 모델이나 조직 구조, 인력 요구사항에 대한 재검토가 필요해질 것임
     * 테크놀로지, 미디어, 통신
          + 2025년에 AI 에이전트가 소프트웨어 플랫폼의 사용 방식을 바꾸기 시작할 전망임
               o AI 에이전트로 기존 ERP 등 시스템의 공백을 메울 수 있게 되어, 일부 기업은 플랫폼 업그레이드에 예전만큼 투자하지 않을 수 있음
               o 이로 인해 소프트웨어 기업들은 대규모 인프라 구축보다는 맞춤형 AI 솔루션 제공으로 비즈니스 모델을 전환할 가능성이 있음
          + 통신사는 머신러닝, 디지털 트윈 등과 제너레이티브 AI를 결합한 하이브리드 솔루션을 도입해 자체 AI 역량을 강화하고, 전통적 파트너 의존도를 낮출 것으로 보임
"
"https://news.hada.io/topic?id=18987","JavaScript Temporal이 옵니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        JavaScript Temporal이 옵니다

     * JavaScript Temporal 릴리즈 시작
          + 새로운 JavaScript Temporal 객체의 구현이 브라우저의 실험적 릴리스에 포함되기 시작함. 이는 웹 개발자들에게 큰 소식이며, JavaScript에서 날짜와 시간을 다루는 것이 크게 간소화되고 현대화될 것임.
          + 일정 관리, 국제화, 시간 민감 데이터에 의존하는 애플리케이션은 내장 기능을 사용하여 효율적이고 정확하며 일관된 날짜, 시간, 기간, 캘린더를 사용할 수 있음.
          + 아직 안정적인 크로스 브라우저 지원까지는 멀었으며, 구현이 발전함에 따라 변경이 있을 수 있지만, 현재의 Temporal을 살펴보고 그 이유와 해결하는 문제를 이해할 수 있음.
          + MDN에 이번 주에 추가된 270페이지 이상의 Temporal 문서가 있으며, 자세한 설명과 예제가 포함되어 있음.
     * JavaScript Temporal이란?
          + Temporal을 이해하기 위해 JavaScript의 Date 객체를 살펴볼 수 있음. JavaScript가 1995년에 만들어졌을 때, Date 객체는 Java의 초기 결함 있는 java.util.Date 구현에서 복사됨.
          + Java는 1997년에 이 구현을 교체했지만, JavaScript는 거의 30년 동안 동일한 API에 갇혀 있음.
          + JavaScript의 Date 객체의 주요 문제는 사용자의 로컬 시간과 UTC만 지원하며, 시간대 지원이 없다는 것임. 또한, 파싱 동작이 매우 신뢰할 수 없고, Date 자체가 변경 가능하여 추적하기 어려운 버그를 유발할 수 있음.
          + 이러한 모든 문제로 인해 JavaScript에서 날짜와 시간을 다루는 것이 복잡하고 버그가 발생하기 쉬움. 대부분의 개발자는 Moment.js 및 date-fns와 같은 라이브러리에 의존하여 애플리케이션에서 날짜와 시간을 더 잘 처리함.
          + Temporal은 Date 객체를 완전히 대체하도록 설계되어 날짜 및 시간 관리를 신뢰할 수 있고 예측 가능하게 만듦. Temporal은 시간대 및 캘린더 표현을 지원하고, 변환, 비교 및 계산, 포맷팅 등을 위한 많은 내장 메서드를 추가함.
     * 핵심 개념
          + Temporal에서의 핵심 개념은 인스턴트(역사의 고유한 지점), 벽시계 시간(지역 시간), 기간임. API는 이러한 개념을 처리하기 위해 다음과 같은 구조를 가짐:
               o 기간: Temporal.Duration 두 시간 지점 간의 차이
               o 시간 지점:
                    # 고유한 시간 지점:
                         @ 타임스탬프로서: Temporal.Instant
                         @ 시간대가 있는 날짜-시간: Temporal.ZonedDateTime
                    # 시간대에 무관한 날짜/시간 (""Plain""):
                         @ 전체 날짜 및 시간: Temporal.PlainDateTime
                         @ 날짜만: Temporal.PlainDate
                         @ 연도 및 월: Temporal.PlainYearMonth
                         @ 월 및 일: Temporal.PlainMonthDay
                         @ 시간만: Temporal.PlainTime
               o 현재: 다양한 클래스 인스턴스 또는 특정 형식으로 현재 시간을 얻기 위해 Temporal.now 사용
     * Temporal 예제
          + Temporal의 가장 기본적인 사용법 중 일부는 ISO 문자열로 현재 날짜와 시간을 얻는 것임. 이제 많은 메서드에서 시간대를 제공할 수 있으며, 이는 복잡한 계산을 스스로 수행할 필요가 없게 함.
          + 다양한 캘린더와 작업하는 것도 간소화되어, 그레고리력 외의 캘린더 시스템(예: 히브리어, 중국어, 이슬람)에서 날짜를 생성할 수 있음.
          + Unix 타임스탬프와 작업하는 것은 많은 시스템(API, 데이터베이스)에서 시간을 나타내기 위해 형식을 사용하기 때문에 매우 일반적인 사용 사례임.
          + compare() 메서드는 기간을 우아하고 효율적으로 정렬할 수 있게 함.
     * Temporal 시도 및 브라우저 지원
          + 지원은 실험적 브라우저 릴리스에 천천히 포함되기 시작했으며, Firefox가 현재 가장 성숙한 구현을 가지고 있음.
          + Firefox에서는 Temporal이 javascript.options.experimental.temporal 환경 설정 뒤에 있는 Nightly 버전에 내장되고 있음.
          + 실험적 구현이 도입되면서, Temporal을 시도하고 JavaScript에서 날짜와 시간을 처리하는 현대적인 접근 방식을 익힐 좋은 시기임.
     * 감사의 말
          + Eric Meyer에게 주제에 대한 작업에 감사함. Eric이 mdn/content의 포크에서 브라우저 호환성 데이터를 문서화하고 문서를 구성한 지 약 4년이 지남.
          + Joshua Chen이 Eric으로부터 바통을 이어받아 MDN 문서에 대한 풀 리퀘스트를 준비함.
          + André Bargull이 Firefox Temporal 구현에 대한 작업에 감사함.

        Hacker News 의견

     * Temporal은 기존 Date() API의 문제를 해결하는 데 유용함. Rust의 chrono와 Java의 Joda Time과 같은 고품질 시간 라이브러리에서 영감을 받아 편리한 API를 제공함
          + 시간은 복잡하며, Temporal은 이를 나이브 시간, 인스턴트, 존드 시간으로 구분하여 처리함
          + 타임스탬프에 하루를 더하는 작업을 할 때, 특정 시간대에 로컬인지 결정해야 함. 그렇지 않으면 DST나 시간대 변경 시 버그가 발생할 수 있음
          + ""고정 오프셋"" 타임스탬프와 특정 시간대의 타임스탬프 간의 직렬화 문제도 해결함
     * Temporal.ZonedDateTime.prototype.withTimeZone()를 사용하여 시간대를 변환할 수 있음
          + 시간대 변환과 지속 시간 처리는 라이브러리가 처리해야 할 중요한 기능이며, Temporal이 이를 처리함
          + 그러나 Temporal.Duration은 사용자 정의 format 함수를 제공하지 않음
     * Temporal 제안은 좋지만, 비교 시 참조 동등성을 사용하는 점이 아쉬움
          + 이는 객체를 Map 키로 사용하거나 Set에 수집하는 기능을 제거함
     * TC39에서 많은 기능이 개발 중이며, Temporal이 빨리 출시되기를 바람
          + 주요 브라우저가 새로운 기능을 지원하려면 개발 노력이 필요함
     * Temporal의 시간대 데이터 업데이트 방식에 대한 궁금증이 있음
          + 사용자가 브라우저를 업데이트하지 않으면 잘못된 시간을 볼 수 있음
     * 시간대 변경 시 이벤트를 추가해야 한다고 제안함
          + 많은 사람들이 매일 시간대를 이동함
     * Temporal이라는 이름이 일반적인 시간 객체와의 충돌을 피하기 위해 사용되었지만, 처음에는 쓰레기 수집 제어로 오해할 수 있음
     * PHP의 Carbon 클래스는 DateTime에서 상속받아 가변 타임스탬프 작업의 문제를 설명함
          + CarbonImmutable을 사용하여 항상 새로운 인스턴스를 반환하는 것이 좋음
          + Laravel에서 CarbonImmutable과 Carbon을 별칭으로 가져오는 방법을 제안함
     * JavaScript Temporal과 관련된 다양한 기사와 논의가 있음
"
"https://news.hada.io/topic?id=19015","인스타그램과 페이스북, 낙태약 제공자 게시물 차단 및 숨김 조치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  인스타그램과 페이스북, 낙태약 제공자 게시물 차단 및 숨김 조치

     * 인스타그램과 페이스북, 낙태 약물 제공자 게시물 차단 및 숨김
          + 최근 인스타그램과 페이스북에서 낙태 약물 제공자들의 게시물이 숨겨지거나 차단되었으며, 일부 계정이 일시적으로 정지되었음.
          + 메타는 일부 계정 정지와 게시물 흐림 처리를 확인했으며, 뉴욕타임스의 문의 후 일부 계정과 게시물을 복구했음.
     * 메타의 발언 및 정책 변화
          + 메타의 CEO 마크 저커버그는 최근 회사의 발언 정책에 대한 대대적인 변화를 발표했음.
          + 저커버그는 온라인 발언에 대한 제한을 완화하겠다고 밝혔으며, 이는 허위 정보 연구자들과 다른 이들 사이에서 우려를 불러일으켰음.
     * 낙태 관련 계정의 관리
          + 메타는 낙태 관련 계정의 관리가 발언 정책 변화와 관련이 없다고 주장했음.
          + 그러나 최근 사건의 시점은 회사가 발언 제한을 실제로 완화하고 있는지에 대한 의문을 제기했음.
          + 메타 대변인은 최근 사건이 인증 없이 약물을 판매하는 것을 금지하는 규칙과 관련이 있다고 설명했으며, 일부 사건은 ""과도한 집행""으로 설명했음.

        Hacker News 의견

     * Meta의 온라인 발언 제한 완화가 특정 주제나 태그에 대한 더 많은 검열로 이어지는 것 같음
          + Meta는 현재 정부를 만족시키려 하며, 나쁜 언론에도 불구하고 수익이 계속 증가하고 있음
          + 투자자들이 만족하고 있으며, 회사에 다른 것은 중요하지 않을 것임
     * Zuckerberg가 Section 230을 피하려는 모습이 싫음
          + 의료 정보가 쉽게 노출되는 상황을 무시하고, Cambridge Analytica 사건을 무시하는 것처럼 보임
          + 선의로 행동한다고 주장하지만, 실제로는 그렇지 않음
     * 플랫폼에서 인증 없이 의약품 판매를 금지하는 규칙이 떠오름
     * Instagram 대안으로 Pixelfed를 추천함
          + 광고가 없고, 불쾌한 게시물이 적으며, #britishshorthair 같은 일상적인 콘텐츠를 즐길 수 있음
     * Facebook 계정을 삭제했으며, 이는 거의 20년 동안 사용한 계정이었음
          + 이 결정이 비합리적으로 화가 났음
     * 이것이 내가 많이 들었던 자유 발언인가에 대한 의문
     * 사설 플랫폼이 이러한 조치를 취할 권리가 있다는 의견
"
"https://news.hada.io/topic?id=18939","사람들이 간직하고 싶어하는 가족 사진 제작 교훈 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   사람들이 간직하고 싶어하는 가족 사진 제작 교훈 (2018)

오래된 가족 사진 프로젝트: 사람들이 간직하고 싶어하는 가족 사진 만들기 교훈

     * 개인적인 회고와 교훈: 수천 장의 슬라이드를 스캔하면서 가족의 삶을 포착하는 사진을 찍는 방법에 대해 많은 것을 배움. 아버지는 열정적인 아마추어 사진가였고, 많은 사진을 찍었지만 정리하지 않음. 은퇴 후 정리하려 했으나, 은퇴 3일 후에 돌아가심. 그 후 사진들은 가족을 거쳐 나에게 오게 되었고, 8,000~10,000장의 슬라이드를 스캔하는 대규모 프로젝트를 시작하게 됨.
     * 프로젝트의 목표: 사진이 손상되기 전에 보존하는 것이 주된 목표였음. 일부 사진은 이미 손상되었고, 기억도 희미해짐. 이 프로젝트는 영적인 과정이었으며, 사진을 통해 부모님의 꿈과 자부심을 이해하게 됨.

물류 및 프로젝트 범위

     * 프로젝트 시작: 저렴한 Wolverine 슬라이드 스캐너로 시작했지만, 수작업으로는 부족하다고 판단하여 Canon CanoScan 9000F를 구입함. 이 프로젝트는 약 1년이 걸렸으며, 일상적인 작업의 배경으로 진행됨.
     * 스캔 과정: 슬라이드를 식별하고 스캔할 가치가 있는지 결정하는 과정이 있었음. 관심 없는 사진이나 초점이 맞지 않는 사진은 버림. 스캔한 사진은 가족과 공유했으며, iPhoto를 사용해 이미지를 정리하고 메타데이터를 추가함.
     * 공유 방법: Flickr에 사진을 업로드하여 가족과 공유하고, Facebook 그룹을 만들어 친척들과도 공유함. 온라인으로는 Facebook의 Old Family Photos 앨범을 통해 공유함.

다섯 상자에 담긴 일생

     * 사진의 역사: 부모님의 약혼 파티와 신혼여행 사진부터 1980년대까지의 삶을 기록한 수천 장의 슬라이드가 있었음. 대부분 가족 휴가와 특별한 행사 사진이었으며, 일상 생활을 담은 사진은 거의 없었음.

상호작용을 담은 사진과 다른 교훈들

     * 의미 있는 사진: 제목 슬라이드는 나중에 큰 의미가 있었음. 장소와 사람을 식별할 수 있는 사진이 중요함. 관광지 사진은 특별한 감정을 불러일으키지 않음.
     * 사람 사진의 중요성: 특히 자연스러운 순간을 포착한 사진이 가장 소중함. 가족이 함께 무언가를 하는 순간을 포착하는 것이 중요함.
     * 일상 생활 사진: 일상 생활을 담은 사진이 부족했음. 직장이나 일상 활동을 담은 사진이 거의 없었음.
     * 사진 기본 교육: 사진의 기본을 배우는 것이 중요함. 사진의 질이 중요하며, 후손들이 감사할 것임.

   이러한 교훈들은 가족 사진을 찍을 때 고려할 수 있는 유용한 팁이 될 수 있음.

        Hacker News 의견

     * 가족 사진에는 두 가지 종류가 있음: 살아있는 동안 보는 사진과 기억하며 소중히 여기는 사진
          + 1번은 전형적인 가족 단체 사진으로, 많은 포즈가 있음
          + 2번은 피사체가 사진 찍히는 것을 모르는 경우가 많으며, 다른 사람들이 소중히 여기는 활동을 하는 모습임
          + 가족의 기기를 수리하는 모습, 옷을 다림질하거나 저녁을 준비하는 모습 등 일상적인 작업을 하는 사진이 포함됨
          + 사람들이 당신을 기억하는 동안 이러한 사진이 남음
     * 부모님과 사랑하는 친척들의 일상적인 삶과 작업을 찍는 것이 전형적인 가족 사진보다 더 감동적이고 영감을 줌
     * 어린 시절 모든 사진을 잃어버렸기 때문에 성인이 되어 사진과 비디오를 찍는 것이 중요했음
          + 1990년대에 가족 행사에서 VHS 비디오를 찍기 시작했음
          + 최근 몇 주 동안 이 테이프들을 mp4로 변환하여 디지털 액자에 넣었음
          + 30년 이상 지난 사람들을 보는 것은 놀라운 경험이었음
          + 휴대폰이나 소셜 미디어로 기록하지 않은 것이 다행이라고 생각함
     * 비디오 중 가장 좋은 것은 가족 인터뷰 쇼였으며, 매년 하나씩 했으면 좋았을 것이라고 생각함
          + 두 번째로 좋은 것은 카메라를 설정하고 그냥 녹화하게 두는 것임
          + 세 번째는 다시는 일어나지 않을 가족 구성원의 활동을 기록한 비디오임
     * 라벨이 중요함. 몇 마디의 단어가 언제 어디서 무슨 일이 일어났는지를 알게 해줌
          + 오래된 가족 사진을 보면서 누군지 모르는 것은 슬픈 경험임
          + 가족 역사일 가능성이 있지만, 우리가 알 수 있는 역사가 될지는 모름
     * 사진 보관 소프트웨어의 문제점이 있음
          + 25년 후에도 읽을 수 있는 형식으로 사진을 보관할 수 있어야 함
          + 여러 형식으로 같은 사진을 저장할 수 있어야 하며, 파일 날짜와 EXIF 날짜와 다른 날짜를 지정할 수 있어야 함
          + 여러 파일을 하나의 ""이미지""로 저장할 수 있어야 함
          + 소프트웨어 없이도 정보를 복구할 수 있어야 함
     * 비디오도 잊지 말아야 함
          + 가족의 일상을 담은 저품질의 비디오가 가장 많이 돌아보게 됨
          + 비디오가 사진보다 더 많은 것을 담을 수 있음
     * 사진가도 포함시키는 것이 중요함
          + 앨범을 36장 이상의 사진으로 만들지 않는 규칙을 지킴
          + 많은 사진을 찍고 상위 1%만 남기면 어떤 사진이 가치 있는지 알게 됨
     * 사진을 찍기 시작하고 계속 찍으면 피사체가 자연스럽게 행동하기 시작함
          + 사진에 있는 모든 사람의 이름을 기록하는 것이 중요함
     * 오래된 사진을 스캔하는 것이 추가 작업일 수 있지만, 변화의 정도를 보는 것이 흥미로움
          + 아이들의 사진을 찍을 때 같은 높이에서 찍고, 무대 설정 없이 자연스러운 순간을 포착하는 것이 중요함
     * 부모님이 돌아가신 후 일상적인 일을 하는 사진이 가장 많이 공유되고 즐겨짐
          + 그랜드 캐니언 같은 사진은 시간이 지나도 변하지 않기 때문에 버려짐
     * 에펠탑 같은 유명한 장소의 사진을 찍는 것보다 사랑하는 사람들과 거리의 사진이 더 흥미로움
          + 과거의 일상적인 모습이 시간이 지나면 더 재미있어짐
"
"https://news.hada.io/topic?id=18949","MiceWine – 윈도우 앱과 게임을 안드로이드폰에서 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  MiceWine – 윈도우 앱과 게임을 안드로이드폰에서 실행하기

     * Android 스마트폰에서 Windows 애플리케이션과 게임을 실행하는 것을 목표로 하는 에뮬레이터 프로젝트
     * Android 및 Box64용으로 컴파일된 맞춤형 Wine 빌드를 사용하며, Termux-X11 기반의 XServer를 사용
     * Android 10+ 에서 실행되며 Adreno, Xclipse, Mali GPU 지원

   Wine Is Not Emulator 인데 에뮬레이터라니 뭔가 아이러니군요

   Winlator - Wine을 통해 Windows 프로그램을 실행하는 Android 앱
"
"https://news.hada.io/topic?id=18988","레이건 공항 인근에서 상업용 제트기와 블랙 호크 헬리콥터 충돌 사고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 레이건 공항 인근에서 상업용 제트기와 블랙 호크 헬리콥터 충돌 사고

     * 상업용 여객기와 블랙 호크 헬리콥터 충돌 후 시신 발견
     * 위키타, 캔자스에서 출발한 여객기가 버지니아 북부의 로널드 레이건 워싱턴 내셔널 공항 근처에서 미 육군 블랙 호크 헬리콥터와 공중 충돌함
     * 포토맥 강에서 생존자를 수색하기 위해 공항의 항공편이 중단됨
     * CNN에 따르면 여객기에는 60명의 승객과 4명의 승무원이 탑승했으며, 일부는 물에 잠긴 상태임
     * Fox News에 따르면 헬리콥터에는 3명의 군인이 탑승했음
     * 최소 18구의 시신이 발견되었으며, 항공기에 탑승한 67명 모두 사망한 것으로 추정됨
     * 연방 항공국에 따르면 충돌한 비행기는 PSA Airlines의 Bombardier CRJ700 지역 제트기로 추정됨
     * PSA는 American Airlines를 위한 지역 항공사로 운영됨
     * 케네디 센터에서 촬영된 폭발 장면의 웹캠 영상이 사용자에 의해 게시됨
     * 다른 사용자는 충돌 후 포토맥 강 위를 비행하며 수색 및 구조 임무를 수행하는 헬리콥터의 모습을 게시함
     * 이 이야기는 현재 진행 중임

        Hacker News 의견

     * 최근 몇 년간 미국에서 발생한 근접 사고의 증가를 고려할 때, 이번 사건은 정책 변화로 충분히 예방할 수 있었던 사건임. VH-60의 잘못일 가능성도 있지만, 타워의 잘못일 가능성이 더 높음. AA5342의 접근 위치를 고려할 때, 제트기가 잘못했을 가능성은 없음.
     * 이번 사건은 16년 만에 미국 상업 항공기 치명적 사고이며, 12년 만에 미국에서 발생한 상업 항공기 치명적 사고임. Boeing과 FAA를 비판하기도 하지만, 교통량이 폭발적으로 증가한 상황에서 이는 놀라운 성과임. 1970년대와 1980년대에는 매년 여러 차례의 사고가 발생했음.
     * 사고에 연루된 헬리콥터는 경찰 헬리콥터가 아닌 군용 VH-60, ""White Hawk""로, VIP 수송 헬리콥터임. Fort Belvoir에서 출발했을 가능성이 높으며, CNN에 따르면 3명의 군인이 탑승하고 있었고 VIP는 없었음.
     * 우울한 ATC 녹음을 들은 후에는, 착륙 장비가 이륙 후 떨어진 상황을 잘 처리한 첫 솔로 비행 십대의 감동적인 이야기를 추천함.
     * DEI나 전 대통령을 비난하는 것은 부끄러운 일임.
     * 최근 항공 교통 관제사의 실수로 인한 근접 사고가 많이 발생하고 있음. 비행량이 증가하고 공항 근처 공역이 혼잡해지며, 관제사들이 과로하고 있음. 더 많은 관제사를 고용해야 할 필요가 있음.
     * DCA에는 두 개의 활주로가 있으며, 주 활주로는 강의 북남 방향과 일치하여 남쪽에서 접근하는 비행기는 강 서쪽 해안을 따라 비행함. 부차적 활주로는 NW/SE 대각선으로 설정되어 있으며, 작은 비행기만 사용할 수 있음. 이 활주로는 상업 항공기 트래픽이 없는 공역으로, 군사 시설 위를 지나감.
     * Potomac 강 남쪽에 있는 해군 시설에서 근무 중이며, 현재 경찰과 구조대가 강에서 잔해를 수거 중임. 공중에는 수색 작업과 관련된 헬리콥터 몇 대만 있음.
     * 포럼과 소셜 미디어에서의 뉴스 이야기에 대한 가치에 대해 의문을 가짐. 여러 가지 잠재적 원인이 이미 언급되었으며, 뉴스는 중요하지만, 사실을 바탕으로 한 추측은 그다지 중요하지 않음.
"
"https://news.hada.io/topic?id=18938","경쟁과 DeepSeek이 Nvidia에 미치는 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      경쟁과 DeepSeek이 Nvidia에 미치는 영향

     * 필자는 10년 동안 다양한 헤지펀드에서 투자 분석가로 일했으며, AI 기술 발전과 주식 시장의 주가 평가에 대한 독특한 관점을 가지고 있음
     * 최근 몇 년 동안 개발자로 일하며 AI 모델 및 서비스와 관련된 여러 오픈 소스 프로젝트를 진행 중임.

# Nvidia : The Bull Case

  Nvidia의 주가 상승 배경

     * AI와 딥러닝 기술의 성장: 딥러닝과 AI는 인터넷 이후 가장 혁신적인 기술로 평가받으며, Nvidia는 GPU 분야에서 독점적 지위를 확보해 주요 기업들의 대규모 투자와 인프라 지출을 이끌어냄
     * 높은 마진: 데이터센터용 고급 제품에서 90% 이상의 높은 이익률을 기록
     * 확장 가능한 시장: AI 기술의 성장과 함께 데이터센터, 로봇, 인간 작업 대체 등의 다양한 응용 분야에서 새로운 수요가 창출되고 있음
     * ""스케일링 법칙"": 모델 성능이 데이터와 컴퓨팅 자원의 확대로 꾸준히 개선되며, Nvidia는 이를 최대한 활용 중

  Nvidia의 현재 지위와 경쟁 우위

     * CUDA 플랫폼: GPU 프로그래밍의 사실상 표준이 된 Nvidia의 소프트웨어 생태계
     * Mellanox 인수: 고성능 GPU 간 연결 기술로 데이터센터에서 경쟁사 대비 우위를 제공
     * 독점적 소프트웨어와 드라이버 품질: AMD에 비해 우수한 드라이버와 소프트웨어 안정성
     * 리더십 유지 전략: 높은 이익을 연구개발(R&D)에 재투자하여 기술적 우위를 지속적으로 유지

# Nvidia에 대한 주요 위협

  하드웨어 경쟁

     * Cerebras: 웨이퍼 크기의 AI 칩으로 Nvidia의 GPU 병렬 처리 및 연결 문제를 우회하는 새로운 접근법 제시
     * Groq: ""결정적 연산"" 기반 기술로 AI 추론 성능을 극대화
     * 주요 고객의 자체 칩 개발:
          + Amazon: Trainium2와 Inferentia2 같은 자체 칩 도입
          + Google: TPU 6세대 칩을 자체 개발
          + Microsoft와 OpenAI: 자체 AI 칩 개발 계획 발표
          + Apple: 소비자 중심 칩에서 축적된 기술을 AI 칩에 응용 가능성

  소프트웨어 경쟁

     * 높은 수준의 추상화 프레임워크:
          + MLX, Triton, JAX와 같은 플랫폼이 CUDA의 중요성을 낮추고 대체 가능성을 확대
     * 코드 변환 기술: LLM을 사용해 CUDA 코드를 다른 하드웨어에 맞게 변환하는 기술이 개발 중
     * AMD 드라이버 개선: 오픈 소스 개발자들이 AMD GPU의 성능을 최적화하기 위한 새로운 드라이버 작업 진행 중

  AI 모델의 효율성 혁신

     * DeepSeek의 등장:
          + DeepSeek는 FP8 혼합 정밀도 학습과 고효율 추론 기술로 Nvidia 대비 1/45 비용으로 경쟁 모델 성능 달성
          + Mixture-of-Experts(MOE) 아키텍처를 활용해 대규모 모델을 메모리 효율적으로 구현
          + ""Multi-head Latent Attention"" 같은 기술로 VRAM 사용량 대폭 절감
          + API 호출 비용은 OpenAI와 Anthropic 대비 95% 저렴

  산업 구조의 변화

     * TSMC의 역할: Nvidia가 자체 칩을 생산하지 않는 구조로 인해 TSMC는 다른 경쟁사의 칩도 동일한 공정으로 제작 가능
     * 모든 고객의 자체화 노력: Nvidia의 고마진 제품에 대한 의존도를 낮추기 위해 주요 고객들이 자체 칩 설계에 투자

  시장 전망과 Nvidia의 도전 과제

     * Nvidia의 현재 주가는 2025년 매출 20배, 75% 이상의 이익률을 가정한 매우 낙관적인 성장 시나리오에 의존
     * 효율성 혁신과 하드웨어 및 소프트웨어 경쟁 심화로 인해 성장률 둔화와 마진 하락 가능성 존재
     * Nvidia가 AI 기술 분야에서 계속 우위를 유지하더라도, 경쟁자들의 지속적인 도전은 시장 점유율과 장기 성장성에 영향을 미칠 가능성이 큼

# 결론

     * Nvidia는 AI 혁신의 선두주자로서 현재는 독보적인 위치에 있지만, 다각적인 경쟁 위협과 산업의 빠른 변화로 인해 현재의 높은 밸류에이션을 유지하기는 어려울 수 있음
     * 투자자들은 Nvidia의 기술적 우위와 AI 시장의 성장 가능성을 긍정적으로 평가하면서도, 경쟁사의 기술 혁신과 시장 구조 변화로 인한 리스크를 주의 깊게 관찰해야 함

        Hacker News 의견

     * DeepSeek의 설명은 80-90년대 네트워킹 경험을 떠올리게 함. 당시 비디오 온디맨드가 큰 시장이었고, 고급 비디오 코딩 알고리즘의 잠재력을 무시했음. 인터넷 비디오 가능성은 더 빠른 인터넷이 아닌 더 똑똑한 알고리즘 덕분이었음.
          + AI의 경우, GPU는 계속 빨라지지만 실리콘 성능의 10배 향상은 오랜 시간이 걸릴 것임. DeepSeek은 새로운 알고리즘 발견 가능성을 시사함.
     * DeepSeek가 더 적은 자원으로 더 많은 일을 할 수 있다면, Jevons Paradox가 작용할 것임. 작은 회사들도 경쟁할 수 있다는 생각으로 GPU 판매가 증가할 것임. DeepSeek는 약 200명의 직원으로 대기업보다 20배 적은 비용으로 경쟁 모델을 훈련할 수 있다고 주장함.
     * AI 모델 개발에서 첫 번째 움직임의 불리함을 강조함. 모델을 5%의 비용으로 복제할 수 있다면 두 가지 합리적인 결정이 있음:
          + 비용 효율성에 집중하여 두 번째 움직임의 이점을 줄임
          + 규모의 경제, 네트워크 효과, 규제 포획을 통해 경쟁적 방어벽 구축
     * OpenAI 같은 회사는 직접적인 네트워크 효과를 누리는 플랫폼으로 전환해야 함.
     * AI 컴퓨팅의 대부분이 추론에 집중되고 있음. R1(680B)을 3대의 소비자 컴퓨터에서 분산 실행할 수 있음. NVIDIA의 장점은 수천 개의 GPU를 효율적으로 연결하는 것인데, 이는 AI 컴퓨팅의 작은 부분에만 중요할 것임.
     * NVIDIA의 여러 장점이 공격받고 있음. 그러나 경쟁자들이 각각의 장점만 공격하고 있어 NVIDIA는 여전히 모든 장점을 가진 유일한 회사로 남을 것임.
     * 휴머노이드 로봇 AI의 진정한 시험은 세탁물 접기임. 현재 기술로는 여전히 어려운 문제임. 최근 로봇 AI의 발전이 있는지 궁금함.
     * 687B MoE 모델을 일반 하드웨어에서 배포하는 효율성을 과대평가함. Apple 하드웨어에서는 불가능하고, 데스크탑 컴퓨터에서도 간신히 가능함. PCIe 대역폭 문제로 프로그래밍 작업에 12분이 걸림.
     * 불법적인 전략이 있을 수 있음: NVDA 가격 반등을 기다리고, OpenAI 경쟁자를 만들어 이익을 얻는 것.
     * DeepSeek의 효과를 올바르게 보는 사람이 적음. 10배 더 효율적이라면 자원을 1/10만큼 사용하는 것이 아니라 10배 더 사용하게 됨. 기술 제품은 항상 이러한 방향으로 움직여 왔음.
     * 주식 시장 공매도 전략에 관심이 없어도 DeepSeek v3와 R1 논문에서 흥미로운 아이디어를 명확하게 요약한 훌륭한 기술적 내용이 많음.
"
"https://news.hada.io/topic?id=18948","페이스북, Linux 논의 금지?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           페이스북, Linux 논의 금지?

     * 2025년 1월 19일부터 Facebook이 리눅스를 ""악성코드""로 간주하고, 리눅스 관련 그룹을 ""사이버 보안 위협""으로 분류
     * DistroWatch와 같은 리눅스 관련 그룹의 게시물 삭제 또는 그룹 폐쇄
     * 리눅스를 언급하는 게시물이 금지되거나 계정 제한 사례 발생
     * 아이러니한 상황
          + Facebook은 자체 인프라의 대부분을 리눅스에서 운영하며 리눅스 개발자 채용 공고를 자주 게시
          + 그러나 리눅스 관련 콘텐츠는 여전히 사이버 보안 필터에서 차단됨
     * 대응 방법
          + Facebook 외부의 채널에서 리눅스 관련 정보를 얻을 것을 권장
          + Mastodon 계정을 통해 리눅스와 DistroWatch 관련 뉴스 및 업데이트 제공
          + RSS 뉴스 피드를 통해 새로운 발표, 이야기, 주간 뉴스레터 확인 가능
     * 중앙화된 플랫폼의 검열 문제
          + X(구 Twitter), Facebook 등 중앙화된 플랫폼의 검열은 반복적으로 발생
          + Twitter가 X로 변경되면서 RSS 피드에서 뉴스를 공유하던 계정들이 링크를 게시하지 못하는 사례 발생

        Hacker News 의견

     * 한 사용자는 Facebook에서 대리석 조각상 사진으로 인해 일시적으로 차단된 경험을 공유하며, Facebook을 사용하지 말 것을 권장함
          + META 플랫폼에서 HIV 예방, 성병 및 가족 계획 관련 콘텐츠가 차단되고 계정이 금지되는 사례가 증가하고 있음을 언급함
          + META의 검열이 표현의 자유에 대한 진정한 모습을 보여준다고 주장함
     * Facebook이 Wikimedia 사이트와 같은 일부 사이트를 차단하고 있으며, Distrowatch도 차단된 적이 있다고 언급함
          + Distrowatch가 AV-플래그된 privoxy 4.0.0 tarball을 링크하여 차단되었음을 설명함
          + 이는 대중 시장을 위한 악성 소프트웨어 차단과 관련이 있으며, Linux나 표현의 자유와는 무관하다고 주장함
     * Facebook에서 Linux가 악성 소프트웨어로 간주되어 관련 그룹이 사이버 보안 위협으로 분류되었다는 주장이 있음
          + 그러나 이에 대한 증거가 부족하다고 지적함
     * Facebook의 자동 검열 시스템이 최근 버그가 많다고 생각하는 사용자가 있음
          + 예를 들어, 특정 Youtube 영상 링크가 차단되었으나 다른 링크는 문제없이 게시되었음을 설명함
          + 이는 버그일 가능성이 높다고 추측함
     * Facebook이 가짜 계정과 괴롭힘 영상에 대한 신고에 대해 조치를 취하지 않는다는 점이 아이러니하다고 언급함
     * 실제 Linux 패키지가 Facebook에서 미러링되고 있다는 점을 지적함
"
"https://news.hada.io/topic?id=18996","OpenAI o3-Mini 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenAI o3-Mini 출시

     * OpenAI o3-mini는 비용 효율적인 추론 모델 시리즈 중 가장 최신 모델임
     * 2024년 12월 미리보기 이후 공식 출시되었으며, ChatGPT와 API에서 사용 가능함
     * 과학, 수학, 코딩 등 STEM 분야에서 뛰어난 성능을 보이며, OpenAI o1-mini보다 낮은 비용과 지연 시간 유지

  주요 기능 및 개선 사항

     * OpenAI o3-mini는 처음으로 함수 호출, 구조화 출력, 개발자 메시지를 지원하는 작은 추론 모델임
     * 스트리밍 기능을 지원하며, 낮음, 중간, 높음의 세 가지 추론 노력 옵션을 제공하여 상황에 맞게 최적화 가능
     * 비전(이미지) 기능은 지원하지 않으며, 시각적 추론이 필요한 경우 OpenAI o1 사용 권장
     * Chat Completions API, Assistants API, Batch API에서 사용 가능하며, API 사용 티어 3~5 개발자에게 제공됨
     * ChatGPT Plus, Team, Pro 사용자들은 오늘부터 사용 가능하며, Enterprise 사용자는 2월부터 지원 예정
     * OpenAI o1-mini를 대체하며, 더 높은 속도와 향상된 추론 능력을 제공
     * Plus 및 Team 사용자의 메시지 제한이 기존 o1-mini의 50개에서 150개로 증가
     * 검색 기능이 추가되어, 최신 정보를 웹 링크와 함께 제공하는 기능 실험 중

  무료 사용자 접근성 확대

     * 무료 사용자도 메시지 작성 창에서 ‘Reason’ 선택 또는 응답 재생성을 통해 o3-mini를 사용 가능
     * ChatGPT에서 reasoning 모델이 무료 사용자에게 제공되는 것은 이번이 처음임

  STEM 최적화 및 성능 향상

     * STEM 분야에 최적화된 성능을 제공하며, o1-mini 대비 더 빠르고 정확한 응답 생성
     * 전문 테스터 평가 결과, o3-mini는 56%의 경우 o1-mini보다 선호되었으며, 어려운 문제에서 39%의 주요 오류 감소 확인됨
     * AIME, GPQA 등 난이도 높은 추론 및 지능 평가에서 o1과 유사한 성능을 보이며, 더 빠른 응답 속도 제공

    주요 성능 비교

     * 수학(AIME 2024):
          + 낮은 추론 노력에서는 o1-mini와 비슷한 성능, 중간 추론 노력에서는 o1과 유사한 성능
          + 높은 추론 노력에서는 o1 및 o1-mini보다 뛰어난 성능을 보임
     * 박사 수준 과학 질문(GPQA Diamond):
          + 생물학, 화학, 물리학 문제에서 낮은 추론 노력으로도 o1-mini보다 뛰어난 성능
          + 높은 추론 노력에서는 o1과 유사한 성능
     * 고급 수학(FrontierMath):
          + Python 도구를 활용하면 첫 시도에서 32% 이상의 문제를 해결하며, 난이도 높은 문제(T3)도 28% 이상 해결
     * 경쟁 프로그래밍(Codeforces):
          + 추론 노력이 증가할수록 더 높은 Elo 점수를 기록하며, o1-mini보다 우수한 성능
          + 중간 추론 노력에서 o1과 비슷한 성능
     * 소프트웨어 엔지니어링(SWE-bench Verified):
          + SWEbench-verified에서 지금까지 출시된 모델 중 최고의 성능을 기록
     * 실제 코딩 테스트(LiveBench Coding):
          + o1-high보다 뛰어난 성능을 보이며, 높은 추론 노력에서는 더욱 압도적인 성능을 발휘
     * 일반 지식 평가:
          + 전반적인 지식 평가에서 o1-mini보다 뛰어난 결과를 보임
     * 사용자 선호도 평가:
          + 전문가 테스트 결과, o3-mini가 o1-mini보다 56% 더 선호되었으며, 어려운 문제에서 39%의 오류 감소 확인

  속도 및 성능 개선

     * o1과 유사한 지능을 유지하면서도, 더 빠른 성능과 향상된 효율성 제공
     * 수학 및 사실성 평가에서 중간 추론 노력으로도 향상된 결과 도출
     * A/B 테스트 결과, o3-mini는 o1-mini보다 응답 속도가 24% 더 빠름
          + 평균 응답 시간: o3-mini(7.7초) vs o1-mini(10.16초)
          + 첫 번째 토큰 출력 속도: o3-mini가 o1-mini보다 평균 2500ms 더 빠름

  안전성 및 대응 조치

     * OpenAI o3-mini는 ‘숙고적 정렬(deliberative alignment)’ 기법을 활용해 보다 안전한 응답을 생성하도록 학습됨
     * OpenAI o1과 비교했을 때, GPT-4o보다도 높은 수준의 안전성과 탈옥(jailbreak) 방어 능력을 보여줌
     * 출시 전, 준비 평가, 외부 레드팀 테스트, 안전성 평가를 통해 철저하게 검증됨
     * o3-mini의 허용되지 않은 콘텐츠 응답 평가 및 탈옥 평가 결과는 시스템 카드에서 제공됨

  향후 계획 및 전망

     * OpenAI o3-mini는 비용 효율적인 AI 지능 발전의 새로운 단계를 의미함
     * STEM 최적화 및 저비용 모델 개발을 통해 고품질 AI를 더 많은 사용자에게 제공하는 목표 지속
     * GPT-4 출시 이후 토큰당 가격을 95% 절감하면서도, 최상급 추론 능력을 유지하는 방향으로 발전
     * AI의 대중적 채택이 확대되는 가운데, 지능, 효율성, 안전성의 균형을 맞춘 모델 개발에 집중할 계획

        Hacker News 의견

     * Claude-3.5-sonnet 모델은 일관성이 뛰어나며, 다른 모델들은 ADHD와 같은 문제를 겪고 있음
          + NextJS 앱에서 shadcn 컴포넌트를 사용하려고 할 때, sonnet은 거의 완벽하게 수행하지만 다른 모델들은 radix-ui를 사용하려고 함
          + o3-mini 모델도 동일한 문제를 겪고 있음
          + cursor의 지시 세트가 문제일 가능성이 있음
          + sonnet이 유일한 실행 가능한 코딩 옵션으로 남아 있음
     * o3-mini의 응답이 o1-mini보다 56% 더 선호됨
          + 두 응답이 2,000 단어일 때, 질문에 대한 답변을 빨리 한 쪽을 선택하는 경향이 있음
          + 이 설문은 무의미하며, 50% 응답률은 동전 던지기와 같음
     * o3-mini를 사용하여 스레드를 요약한 결과를 공유함
          + 18,936 입력, 2,905 출력에 3.3612 센트가 소요됨
     * AI 코딩에서 o3-mini는 o1과 비슷한 점수를 얻었으며, 비용은 10배 저렴함
          + o3-mini는 중간 노력으로 R1과 Sonnet 사이의 점수를 얻음
     * 새로운 모델과 reasoning_effort 옵션을 지원하는 LLM CLI 도구의 새 릴리스를 발표함
          + 예시 사용법을 공유함
     * o3-mini의 SWE 벤치 점수가 61%에서 49.3%로 떨어졌음을 지적함
          + o3-mini가 실제 코딩 작업에서 Claude와 비슷한 성능을 보임
     * o3-mini-high가 seg fault의 근본 원인을 성공적으로 찾았음을 언급함
          + 이전에 o1이 놓친 문제를 해결함
     * SWE-Bench에서 상당한 증가를 보였으며, 이전에 o1-mini가 처리하지 못한 작업을 처리할 수 있는지 다시 시도할 가치가 있음
          + $4/백만 출력 토큰 대 $60의 비용 차이가 있음
     * AI 환경이 빠르게 변화하고 있으며, 새로운 AI 모델들이 등장하고 있음
          + AI의 변화가 이번 릴리스와 향후 릴리스에 어떤 영향을 미칠지 궁금해 함
"
"https://news.hada.io/topic?id=19028","Electron에 대해 사람들이 잘못 알고 있는 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Electron에 대해 사람들이 잘못 알고 있는 것들

     * 작성자 Felix Rieseberg는 Electron개발에 10년 넘게 참여한 co-maintainer
     * Electron은 웹 기술로 UI를 구현하고, 필요하다면 네이티브 코드를 자유롭게 섞어 쓸 수 있도록 해줌
     * 많은 앱(Visual Studio Code, Slack, Discord, Figma, ChatGPT, Claude, Notion, 1Password, Docker Desktop 등)이 Electron을 채택하고 있음
     * 이 문서는 Electron의 주요 오해들을 짚어 보고, 왜 이런 선택을 했는지 설명함

Electron이 JavaScript와 네이티브 코드를 대립시킨다

     * 흔히 ""Electron은 자바스크립트만 사용하므로 네이티브보다 뒤처진다""라는 이야기가 있음
     * 실제로 Electron은 JavaScript에 더해 C++, Objective-C, Rust 등 네이티브 코드를 함께 쓸 수 있음
     * 예를 들어 1Password는 Rust로 대부분의 코드를 작성하고, UI는 Electron을 활용함
     * Electron의 강점은 필요한 만큼 네이티브 코드를 섞고, UI 영역에서 웹 기술을 활용할 수 있는 융통성임
     * SwiftUI, GTK, Win32 등을 활용해 부분적으로 네이티브 UI를 제공하는 데모 예시도 존재함

Web 앱은 나쁘다

     * ""모든 네이티브 앱이 항상 더 우수하다""는 견해가 있으나, 시장 상황은 그렇게 단순하지 않음
     * NASA의 Mission Control, Bloomberg Terminal, McDonald’s 키오스크, SpaceX의 Dragon 2 등도 Chromium 기반 웹 기술을 활용함
     * 웹 기술은 전 세계적으로 가장 폭넓게 사용되고 있으며, 잘 구현된 웹 앱은 훌륭한 사용자 경험을 제공함
     * ""웹 앱은 실력이 부족한 사람이 만드는 것""이라는 주장은 사용 환경의 요구 사항과 개발자의 선택 상황을 고려하지 않은 단순화임

운영체제 WebView가 더 성능이 뛰어나다

     * macOS나 Windows, Linux에 내장된 WebView가 종종 더 낫다고 주장하는 이들이 있음
     * 실제로 Slack은 초기 MacGap(WebView 기반)을 사용했으나, 성능 문제로 결국 Electron(Chromium)을 채택했음
     * 최신 Chromium 엔진이 자원이 많이 드는 대신 가장 활발히 최적화가 이루어지는 부분이기도 함
     * 운영체제에 내장된 WebView가 공유 자원을 통해 작은 메모리 사용량을 보일 수도 있지만, 보안과 안정성 문제로 실제로 격리된 경우가 많음
     * Electron을 통해 최신 엔진 버전을 직접 관리할 수 있고, 그로 인해 안정성과 보안을 독립적으로 유지할 수 있음

번들 크기가 중요하다

     * 일반적으로 Electron 앱은 100~300MB 규모로, 이 점을 비판하는 시각이 있음
     * 하지만 사용자들은 앱 용량보다는 기능, 편의성, 안정성 등 다른 요소를 더 우선시하는 경향이 강함
     * 예를 들어 4K 화질 Netflix 스트리밍은 한 시간에 수 GB를 사용하고, Call of Duty 업데이트는 수백 GB에 달하기도 함
     * 결국 실제 사용자 만족도에 비해 앱의 크기는 상대적으로 덜 중요한 요소가 되는 경우가 많음

Electron을 이겨라

     * Electron은 ""좋은 데스크톱 앱을 만들어 보자""라는 목표를 지닌 사람들의 오픈소스 노력으로 시작된 것임
     * Electron은 경쟁자가 적은 상황에서 시작해, 지금도 충분한 기능과 안정성을 제공해 왔음
     * Electron을 ‘이기려면’ Electron이 하는 일을 보다 잘할 수 있는 플랫폼을 만들어야 함
     * Electron 유지보수자들은 더 나은 대안이 나온다면 기꺼이 그것을 환영할 것임

   Tauri가 얼른 성숙해지면 좋겠습니다. 저는 이미 잘 쓰고 있지만요.

   Atom Shell일때가 어제같은데.. 많이 발전했네요

   여러 비판 지점들이 있지만, 날마다 사용하는 vscode 앱의 완성도를 보자면 Electron의 공이 적지 않다는 생각은 확실히 듭니다.

   tauri를 대안으로 생각하긴하는데, 배포시에 정상작동안하는 특이한 경우가 있을까봐 걱정입니다. (예전에 win32환경에서 msxml.dll등 기본 등록된 dll을 참조하는 프로그램 배포했다가 정말 고생했던 기억때문에, 내재화해서 배포했는데... 유사한 문제가 생기지 않을지)

   electron쪽 의견대로, 그냥 사이즈를 잊어버리는게 맞지만, 번들사이즈가 너무커서요.

   tauri는 그게 문제인 것 같습니다..

   플랫폼별 웹뷰하고 내장된 프로그램이 다 다르다보니 그게 가장 큰 문제이긴합니다. 배포하고 난 다음에 무슨일이 생길지 몰라서요.

   그렇다고 tauri에 웹뷰자체를 내장하자니, 일렉트론 보다 번들사이즈가 더 커지고요..

   그래서 프로덕션 크로스플랫폼 앱 개발에 있어서 tauri는 아직 성숙하지 않았다고 생각하긴합니다.

     SwiftUI, GTK, Win32 등을 활용해 부분적으로 네이티브 UI를 제공하는 데모 예시도 존재함

   본문에서 실제 데모 코드 링크가 걸려있어서 확인해봤는데 아주 단순하게 같이 쓸 수 있다 수준으로 쉬운 느낌은 아니네요. 일단 가능하다 정도에 의의를 둬야 할 듯...

   대체로 앱이 크다는건 사실인가보네요..

   그러게요 번들사이즈는 순순히 인정하네요

   Call of Duty와 비교하는 것은 뭔가 주제에 어긋나 보이네요.
   Electron 버리고 WebView로 갈아탄 Teams를 살펴볼 필요가 있습니다,
   https://techcommunity.microsoft.com/discussions/microsoftteams/…

   PC 에 설치된 일렉트론 앱만 10개 가까이 되는데 이정도면 별도로 설치되는 프레임워크가 되어야 하지 않나 싶긴 해요

   번들사이즈도 그렇고 ""~~ Helper"" 프로세스가 메모리 잡아먹고 있는 거 보면 한숨만 나와요.

   McDonald’s 키오스크는...음....좋은 예시일지

   저도 같은 생각이 문득 들었습니다. 해외 맥날 키오스크는 그래도 좀 다른가? 순간 의문이 들었네요 ㅎㅎ

   ㅋㅋㅋㅋㅋㅋ 저도 똑같은 생각 했어요

   메모리 사용량을 줄이는게 제일 큰 도전일 것 같은데 이해관계자 어느 누구도 그걸 실행할 만한 요인이 없어보이는 게 안타깝네요
"
"https://news.hada.io/topic?id=18959","Boom XB-1 첫 초음속 비행 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Boom XB-1 첫 초음속 비행 [비디오]

        Hacker News 의견

     * Boom의 창립자가 9년 전 YC를 통해 이루고자 했던 목표를 댓글에서 설명한 후, 오늘날 이를 실현한 것을 보는 것이 멋있음
          + 과거에 ""Boom""이라는 이름에 대한 논란과 불가능하다는 의견이 있었던 것을 회상하는 것이 재미있음
          + Boom 팀에게 축하를 전함. 정말 대단한 성과임
     * 오늘의 시험 비행 중 지상에서 소닉 붐이 들렸는지에 대한 직접적인 언급이 없었음
     * Scott Manley가 XB-1에 대한 인터뷰와 기술적 세부사항을 포함한 흥미로운 영상을 게시했음
          + 영상의 끝부분에는 XB-1 시뮬레이터에서의 시간이 포함되어 있음
     * 두 번째 초음속 비행에서 ""knock it off"" 호출이 있었던 이유에 대한 아이디어가 궁금함
     * 활주로에서 비행기가 너무 작아 보여서 64-80명의 승객을 어떻게 태울 수 있을지 의문이었음
          + 힌트: XB-1은 완전한 Overture의 1/3 크기 모델임
     * 항공우주 분야에서 흥미로운 시기임
          + SpaceX가 Starship으로 멋진 혁신을 이루고 있고, Boom이 초음속 항공 여행을 되살리기 위해 좋은 진전을 보이고 있음
          + 일반 항공 분야에서도 혁신이 필요함
     * Wings over the Rockies 박물관에서 모델을 보는 것은 항상 재미있음
     * Greensboro, NC / North Carolina에서 제작될 예정임
     * 이륙과 착륙 시의 받음각이 상당히 독특함
"
"https://news.hada.io/topic?id=18925","가족을 구하기 위해 항공모함에 Cessna를 착륙시킨 남베트남 조종사 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             가족을 구하기 위해 항공모함에 Cessna를 착륙시킨 남베트남 조종사 (2019)

남베트남 조종사의 대담한 비행

     * 배경: 1975년 4월 29일, 남베트남 공군의 부앙 리 소령은 가족을 구하기 위해 작은 비행기를 몰래 가져가 미드웨이 항공모함에 착륙하려는 위험한 시도를 함. 당시 남베트남은 혼란에 빠져 있었고, 북베트남군이 남베트남을 점령하고 있었음.
     * 비행기 탈출: 부앙 리는 아내와 다섯 자녀를 작은 비행기에 태우고 바다로 향함. 비행기는 물 위에서 작동하도록 설계되지 않았고, 라디오도 작동하지 않았음. 부앙 리는 미드웨이 항공모함을 발견하고 착륙을 시도함.
     * 미드웨이 항공모함의 대응: 미드웨이 항공모함은 남은 미국인과 남베트남인을 대피시키기 위해 작전에 투입됨. 부앙 리의 비행기가 착륙할 수 있도록 갑판을 비우기 위해 헬리콥터를 바다로 던지는 결정을 내림.
     * 착륙 성공: 부앙 리는 비행기를 안전하게 착륙시키고 가족과 함께 구조됨. 이 사건은 남베트남 전쟁의 마지막 날에 일어난 일로, 부앙 리와 그의 가족은 미국으로 이주하여 시민권을 취득함.
     * 결과: 미드웨이 항공모함의 승무원들은 부앙 리 가족의 미국 정착을 돕기 위해 기금을 모음. 이 사건은 남베트남 전쟁의 혼란 속에서 인도주의적 구출 작전의 일환으로 기억됨.

        Hacker News 의견

     * 한 사용자는 자신의 아버지가 ARVN 군인이었으며, 전쟁 마지막 날에 헬리콥터를 훔쳐 서쪽으로 날아갔음을 언급함. 결국 태국의 난민 캠프에 도착했고, 20년 후 클린턴 대통령이 베트남과의 관계를 정상화할 때까지 가족을 다시 보지 못했음
          + 전쟁 마지막 순간에 비행할 수 있는 군인들이 가능한 항공기를 가져가 연료가 떨어지기 전까지 우호군을 찾기 위해 무작정 비행했음
     * 기사에 나오는 아기를 안고 있는 남자의 사진은 Buang Ly가 아님. 실제 착륙 장면의 영상이 있음
     * Pensacola의 Naval Aviation Museum 가이드들이 훌륭하며, 이 이야기를 처음 소개받았음
          + 이 사건의 실제 영상이 있다는 것이 특히 놀라움
          + Pensacola에 가게 된다면 Naval Aviation Museum을 강력히 추천함
     * 관련된 이야기로 2015년의 ""A South Vietnamese Air Force Officer and a Crazy Carrier Landing""가 있음
     * USS Midway에 관한 이야기를 보게 되어 기쁨. 현재는 퇴역하여 샌디에이고에 박물관으로 영구 정박 중임
          + 사진 속의 착륙 지점에 방문한 적이 있으며, 미국 역사에서 중요한 부분을 방문하게 되어 겸손해짐
     * 많은 헬리콥터가 파괴되었다는 것이 놀라운 이야기임. 하지만 배에 있던 모든 사람들이 다섯 명의 아이들이 살아남아 기뻤을 것임
     * Midway를 두 번 방문했지만 이 이야기를 처음 들음. 전시를 놓쳤거나 무언가를 간과했을 것임
          + USS Enterprise의 F14가 여전히 비행 갑판에 있는 것처럼, 왜 bird dog를 샌디에이고로 가져오지 않았는지 궁금함
          + 그 외에도, 선장이 자신의 직업을 잃거나 물질 손실로 인해 군사 재판을 받을 수도 있다는 것을 신경 쓰지 않았다는 부분이 인상적임
     * 읽는 것이 정말 재미있었음
          + 베트남 전쟁 중에 떠난 베트남 출신의 시부모님이 있어 이러한 이야기가 더 가깝게 느껴짐
     * 시뮬레이터 없이 단지 아내와 가족을 보호하려는 의지로 비행한 것임
     * 2005년 파리에서 남베트남 전 군인들이 옛 국기를 들고 행진하는 장면이 가장 슬펐던 장면 중 하나였음
          + 모든 것을 잃었다는 생각이 강하게 들었음
"
"https://news.hada.io/topic?id=18981","민감한 정보 유출, 채팅 기록 포함한 DeepSeek 데이터베이스 노출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                민감한 정보 유출, 채팅 기록 포함한 DeepSeek 데이터베이스 노출

     * 요약
          + Wiz Research는 DeepSeek의 공개적으로 접근 가능한 ClickHouse 데이터베이스를 발견했음. 이 데이터베이스는 데이터베이스 작업에 대한 완전한 제어를 허용하며, 내부 데이터에 접근할 수 있는 능력을 포함하고 있음. 노출된 데이터에는 채팅 기록, 비밀 키, 백엔드 세부 정보 및 기타 매우 민감한 정보가 포함되어 있음. Wiz Research 팀은 즉시 이 문제를 DeepSeek에 책임감 있게 공개했으며, DeepSeek은 신속하게 노출을 보안했음.
     * 주요 내용
          + DeepSeek은 중국의 AI 스타트업으로, 특히 DeepSeek-R1 추론 모델로 인해 주목받고 있음. 이 모델은 OpenAI의 o1과 같은 선도적인 AI 시스템과 성능에서 경쟁하며, 비용 효율성과 효율성에서 두드러짐.
          + Wiz Research 팀은 DeepSeek의 외부 보안 상태를 평가하고 잠재적인 취약점을 식별하기 위해 조사에 착수했음. 몇 분 만에 DeepSeek과 연결된 공개적으로 접근 가능한 ClickHouse 데이터베이스를 발견했으며, 이는 완전히 개방적이고 인증되지 않은 상태로 민감한 데이터를 노출하고 있었음.
          + 이 데이터베이스는 채팅 기록, 백엔드 데이터 및 민감한 정보를 포함하고 있었으며, 로그 스트림, API 비밀 및 운영 세부 정보가 포함되어 있었음. 더 심각한 것은, 이 노출은 인증이나 방어 메커니즘 없이 DeepSeek 환경 내에서 데이터베이스의 완전한 제어와 잠재적인 권한 상승을 허용했음.
     * 노출 과정
          + DeepSeek의 공개적으로 접근 가능한 도메인을 평가하는 것으로 시작했음. 외부 공격 표면을 매핑하여 약 30개의 인터넷에 노출된 하위 도메인을 식별했음. 대부분은 채팅봇 인터페이스, 상태 페이지, API 문서와 같은 요소를 호스팅하고 있었으며, 처음에는 고위험 노출을 시사하지 않았음.
          + 그러나 표준 HTTP 포트(80/443)를 넘어 검색을 확장하면서 두 개의 비정상적이고 개방된 포트(8123 & 9000)를 감지했음. 이러한 포트는 인증 없이 접근 가능한 공개적으로 노출된 ClickHouse 데이터베이스로 이어졌음.
          + ClickHouse는 대규모 데이터 세트에 대한 빠른 분석 쿼리를 위해 설계된 오픈 소스 열형 데이터베이스 관리 시스템임. Yandex에 의해 개발되었으며, 실시간 데이터 처리, 로그 저장 및 빅 데이터 분석에 널리 사용됨.
          + ClickHouse의 HTTP 인터페이스를 활용하여 /play 경로에 접근할 수 있었으며, 이는 브라우저를 통해 임의의 SQL 쿼리를 직접 실행할 수 있게 했음. 간단한 SHOW TABLES; 쿼리를 실행하여 접근 가능한 데이터 세트의 전체 목록을 반환했음.
          + log_stream 테이블은 특히 주목할 만했으며, 100만 개 이상의 로그 항목을 포함하고 있었음. 이 테이블에는 채팅 기록, API 키, 백엔드 세부 정보 및 운영 메타데이터와 같은 평문 로그가 포함되어 있었음.
     * 주요 시사점
          + AI 서비스의 빠른 채택은 보안과 함께하지 않으면 본질적으로 위험함. 이 노출은 AI 애플리케이션의 즉각적인 보안 위험이 인프라와 이를 지원하는 도구에서 비롯된다는 사실을 강조함.
          + AI 보안에 대한 많은 관심이 미래의 위협에 집중되어 있지만, 실제 위험은 종종 기본적인 위험에서 비롯됨. 데이터베이스의 외부 노출과 같은 기본적인 보안 위험은 보안 팀의 최우선 과제가 되어야 함.
          + AI 도구와 서비스를 채택하는 조직은 이러한 회사에 민감한 데이터를 맡기고 있다는 점을 기억해야 함. 빠른 채택 속도는 보안을 간과하게 만들 수 있지만, 고객 데이터 보호는 최우선 과제가 되어야 함.
          + 보안 팀은 AI 엔지니어와 긴밀히 협력하여 사용 중인 아키텍처, 도구 및 모델에 대한 가시성을 확보하고 데이터를 보호하고 노출을 방지해야 함.
     * 결론
          + AI는 그 어느 때보다 빠르게 채택되고 있는 기술임. 많은 AI 회사가 보안 프레임워크 없이 중요한 인프라 제공자로 빠르게 성장했음. AI가 전 세계 비즈니스에 깊이 통합됨에 따라, 민감한 데이터를 처리하는 위험을 인식하고 공공 클라우드 제공자 및 주요 인프라 제공자에게 요구되는 보안 관행을 시행해야 함.

        Hacker News 의견

     * 비영어권 소프트웨어 엔지니어링에 대한 무지함을 깨달음. 데이터베이스 스키마와 로그가 영어로 되어 있는 이유에 대한 궁금증 제기
          + 전 세계 개발자들이 영어를 배워야 하는지, 번역 과정이 있는지에 대한 의문
     * DeepSeek가 많은 미국 소매 투자자들에게 재정적 손실을 입혔다는 점에서 댓글의 적대감이 놀라움
          + NVidia 주가에서 거의 700억 달러가 사라진 것에 대한 분노가 큼
     * URL과 포트를 직접 공개하는 것은 무책임하다고 생각함
          + DeepSeek의 잘못된 관행을 옹호하는 것은 아니지만, 무책임한 행동은 아님
     * DeepSeek를 비난하려는 노력이 많았음
     * 윤리적 해킹과 책임 있는 공개에서 DeepSeek의 타임라인이 잘 논의되지 않음
     * 모델을 로컬에서 실행하거나 AWS Bedrock 같은 상태 없는 원격 채팅 모델을 사용하는 것이 좋음
     * 개발 인프라와 관찰 가능성 데이터베이스에 대한 흥미로운 점
          + 로그에 채팅 데이터가 포함되는 것은 불가피함
          + 로켓 빌딩 프롬프트 스크린샷은 DeepSeek가 그러한 프롬프트를 완료하지 않도록 훈련 데이터를 제공한 것으로 보임
     * 노출된 ClickHouse는 과거의 노출된 Elasticsearch와 유사함
     * DeepSeek에 버그 바운티 프로그램이 있는지 궁금함
          + 허가 없이 시스템을 탐색하고 접근하는 것은 법적 문제를 일으킬 수 있음
          + 버그 바운티 프로그램에 참여하거나 회사와 직접 협력하여 허가를 받은 후 시스템을 탐색해야 함
     * DeepSeek가 퀀트들의 사이드 프로젝트라는 관점에 부합함
          + 외부 클라이언트 애플리케이션 배포에 익숙하지 않은 실수로 보임
"
"https://news.hada.io/topic?id=18931","PdfDing - 개인용 PDF 관리자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         PdfDing - 개인용 PDF 관리자

     * PDF를 관리, 뷰잉, 편집할 수 있는 셀프 호스팅 웹 애플리케이션
     * 데스크톱 및 모바일 기기의 브라우저에서 PDF를 원활히 열람 가능
     * 간단하고 빠르며 Docker를 통해 셀프 호스팅 및 쉽게 설정할 수 있도록 설계
     * 모든 사용자가 파일을 업로드 가능
     * 주요 기능
          + 다중 기기에서 심리스한 브라우저 기반 PDF 보기 지원
          + 읽던 위치 기억 - 중단한 위치에서 다시 읽기 가능
          + 다중 레벨 태그로 PDF를 체계적으로 관리
          + PDF에 주석, 하이라이트, 드로잉 추가 가능
          + 테마 지원: 다크 모드, 색상 테마, 커스텀 테마 색상
          + 컬러 반전 모드: PDF 읽기 최적화
          + OIDC를 통한 SSO 지원
          + PDF 공유: 링크 또는 QR 코드로 외부와 공유
               o 비밀번호 보호, 만료 날짜 및 최대 조회 횟수 설정 가능
          + 마크다운 노트
          + 진행률 표시: PDF의 읽기 진행 상황을 한눈에 확인
          + 사용자별 PDF 업로드 지원하여 모든 사용자가 자유롭게 PDF 추가 가능
          + 자동화된 S3 백업: 암호화 및 자동 백업 지원
          + Consumption 디렉토리 지원: UI 외부에서 PDF 추가 가능

   Immich와 함께 꽤 유용한 패키지가 되겠네요.

   파이썬 Django 웹 앱이군요. PDF 편집 앱이라니 좋아요 👍
"
"https://news.hada.io/topic?id=19031","나에 대한 AI 이미지 모델을 직접 훈련하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      나에 대한 AI 이미지 모델을 직접 훈련하는 방법

     * 몇 시간 동안 나만의 AI 이미지 모델을 훈련시켜, 직접 찍은 것 같은 사진을 만들어보려는 프로젝트를 시도해봤음
          + 예: ""슈퍼맨"" 분장을 한 내 사진을 생성
     * 시도한 이유: 재미있을 것 같았고, 아이들이 함께 놀기에 좋으며, 커스텀 모델/심화 AI 부분을 좀 더 배울 수 있음
     * 12~18개월 전에는 이 작업이 상당히 복잡했으나, 이제는 매우 간단해졌음
     * 2시간 이내에 모델을 만들어 원하는 이미지를 얻었으며, 핵심은 올바른 도구를 빠르게 파악하는 것이었음

모델/훈련 패턴 선택

     * 필요한 요소
          + 기반 모델(base model)
          + 훈련/파인튜닝 기법
          + 훈련 데이터셋(자신의 사진 몇 장 등)
     * 많은 AI들이 Stable Diffusion을 권장하지만, Pieter Levels가 사용한 Flux 모델이 더 나은 성능을 낸다고 하여 Flux를 선택
          + 완전히 최신 SOTA 모델은 아니지만 충분히 좋음
     * 훈련 기법으로는 LoRA(Low-Rank Adaptation)를 사용
          + 모델 전체를 재학습하지 않고, 특정 ""매직 단어""에 연결된 부분만 훈련함
          + 예: ""czue""라는 흔치 않은 단어를 모델에 학습시켜, 프롬프트에서 그 단어를 사용하면 해당 데이터셋의 특징을 반영함

훈련 세트 생성

     * 학습 대상의 사진 여러 장(10~15장 정도)을 준비해야 함
          + 표정, 배경, 조명, 각도 등이 다양할수록 좋음
          + 한 사진에 한 사람만 있는 것이 바람직함
     * 훈련 시에는 텍스트 설명이 필요하며, 여기에 매직 단어가 포함되어야 함
          + 예: ""a photo of czue on the beach, wearing a blue shirt""
     * 하지만 최근 도구들은 자동으로 이미지 캡션을 생성해주므로, 직접 설명을 입력하지 않아도 됨

모델 훈련

     * 처음에는 로컬에서 훈련할 생각이었지만, GPU와 RAM이 부족해 어려움
     * GPU 클라우드 서버에서 직접 코드를 돌릴 수도 있으나, 결국 Replicate를 사용했음
          + GPU 임대 서비스이며, 이미 만들어진 레시피를 바로 사용할 수 있음
     * 이번 사례에서는 ostris/flux-dev-lora-trainer 레시피를 사용함
          + Replicate 계정 생성 후, 청구 정보를 설정해야 함
     * 주요 파라미터
          + input_images: 훈련 사진(zip)
          + trigger_word: 매직 단어 예) ""czue""
          + hf_repo_id, hf_token: Hugging Face 레포지토리/토큰
          + autocaption_prefix: 자동 생성 캡션 앞에 붙일 문구 (예: ""A photo of czue,"")

Hugging Face에 모델 저장

     * Hugging Face는 모델을 저장·공유하는 플랫폼
     * Replicate도 학습된 모델을 어딘가에 저장해주지만, Hugging Face에 올리면 다른 툴과 연동하기 쉬움
     * 계정 및 모델 생성 후 hf_repo_id를 전달함
          + 접근 토큰은 settings/tokens에서 발급 가능함
     * 학습이 끝나면 ""lora.safetensors""라는 큰 파일(약 180MB)이 Hugging Face에 업로드됨

모델로 이미지 생성

     * 학습이 끝나면, 모델에 텍스트를 입력해 이미지를 만드는 추론(inference) 과정을 진행함
     * 로컬에서 직접 해볼 수도 있으나, 다시 Replicate를 활용했음
          + lucataco/flux-dev-lora에 hf_lora 필드만 설정하면 됨
               o public Hugging Face 레포지토리 ID 혹은 Replicate에 업로드된 학습 모델 링크
     * 예: ""a photo of czue surfing""을 입력하면 다음처럼 서핑하는 본인 이미지를 얻음

프로그래밍 방식으로 모델 실행

     * 다양한 프롬프트를 시도하고 결과를 자동 저장하려면 API 호출 방식이 편리함
     * 아래 Python 스크립트를 예시로 작성했음 (전체 코드는 Github에 있음)
# /// script
# requires-python = "">=3.12""
# dependencies = [
#     ""replicate"",
# ]
# ///
import argparse
import os
import re
import replicate
import uuid

DEFAULT_MODEL = ""czue/me-v1""
DEFAULT_COUNT = 1

def get_input(prompt, model=DEFAULT_MODEL, count=DEFAULT_COUNT):
    return {
        ""prompt"": prompt,
        ""hf_lora"": model,
        ""num_outputs"": count
    }

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(""prompt"", help=""Prompt for the photo"")
    parser.add_argument(""--model"", default=DEFAULT_MODEL,
                      help=""Model to use (default: %(default)s)"")
    parser.add_argument(""--count"", default=DEFAULT_COUNT,
                      help=""Number of photos to generate (default: %(default)s)"", type=int)
    args = parser.parse_args()

    input = get_input(args.prompt, args.model, args.count)
    output = replicate.run(
        ""lucataco/flux-dev-lora:091495765fa5ef2725a175a57b276ec30dc9d39c22d30410f2ede68a3eab66b3"",
        input=input
    )

    output_dir = ""output""
    os.makedirs(output_dir, exist_ok=True)

    prompt_slug = ""-"".join(args.prompt.split("" "")[-3:])
    prompt_slug = re.sub(r'[^a-zA-Z0-9\-]', '', prompt_slug).lower()

    for index, item in enumerate(output):
        file_id = uuid.uuid4().hex[:5]
        output_path = os.path.join(output_dir, f""{prompt_slug}-{file_id}.webp"")
        with open(output_path, ""wb"") as file:
            file.write(item.read())
            print(f""Saved photo {output_path}"")

if __name__ == ""__main__"":
    main()

     * 예시 사용법
uv run main.py ""a photo of czue, a 40 year old man, writing a blog post"" \
 --model=""czue/me-v1"" \
 --count=4

결과

     * 모델 성능은 들쑥날쑥함
          + 사람 특징을 제법 비슷하게 잡기도 하지만, 가끔은 다른 인물을 만들어내기도 함
          + 특정 나이, 성별 등을 추가로 프롬프트에 명시하면 좀 더 정확해짐
     * 예를 들어, ""a photo of czue, a 40 year old man, writing a blog post""는 비교적 일관된 이미지를 생성함
     * 반면 ""a photo of czue writing a blog post""는 훨씬 결과가 제각각이었음
     * 다른 인물을 함께 넣으면 얼굴이 뒤섞이는 등의 문제가 발생함
          + 버락 오바마와 같이 있는 사진을 만들어보려고 했더니, 내 얼굴의 일정 부분이 오바마 쪽에 반영되고 반대도 마찬가지
     * 그래도 충분히 재밌고 유용해서 아이들과 함께 다양한 시도를 해볼 수 있었음

비용

     * 무료는 아니지만 그렇게 비싸지도 않음
     * 나와 아이들을 합쳐 모델 3개를 학습했는데, 각각 ~$2.50 정도였음
     * 이미지 생성은 한 장당 약 $0.03 정도라서 30장을 생성해도 $1 가량임
     * 전체 실험으로 $10 이하를 썼으며, 생각보다 비용 부담이 적어 만족스러웠음
     * AI 모델 훈련과 이미지 생성에 관심 있다면, 생각보다 쉽게 시도할 수 있으니 도전해볼 만함

   재미삼아 따라해봤는데 정말 쉽군요.
   (https://www.youtube.com/watch?v=sNpQ9ULDMoo)
   이것저것 만들어보며 한참 웃었습니다...

   결국 우리가 죽기 전에 나 처럼 훈련된 모델을 네트워크에 업로드하고 죽으려 하지 않을까요? 생존 본능처럼... 그게 '나'는 아니지만.

   기술을 보니 소설 하나가 떠올라 소개합니다. 이유리 소설가가 낸 소설집 비숫방울 퐁에 실린 '크로노스'라는 단편인데요. 사람을, 그러니까 자신의 데이터를 저장하고 학습하는 ai 를 다룬 내용입니다. 저 댓글의 고양이처럼요. 치매에 걸린 엄마가 증상이 더 심해지기 전에 그걸 써요. 그리고 자식들은 갈등하죠. 위로받기도 하고 죄책감도 느끼고. 위 기술에, 또 저 고양이의 이야기에 관심 있는 분이라면, 한번 읽어보세요.

   해커뉴스 댓글 하나가 눈길을 끄네요
     * 내가 사랑하는 죽은 고양이를 위해 이렇게 해봤음. 결과가 마음에 들긴 했는데, 어느 순간 갑자기 내가 하고 있는 일에 대해 소름이 돋았음
          + 큰 비즈니스가 될것 같음. 나는 아마도 수십만 통의 이메일, 문자, 채팅 등을 보냈을 텐데 사랑하는 사람의 커뮤니케이션 코퍼스를 학습시켜 그들이 세상을 떠난 후에도 '그들'과 채팅할 수 있도록 하는 것은 충분히 가능한 일
          + 아버지가 돌아가신 후 아버지의 목소리로 이 작업을 했고, LLM을 지원하는 비서와 대화할 수 있는 기능을 설정해 아버지의 목소리와 방식으로 응답하도록 했음. 매우 이상하게 대처하고 슬퍼하는 시기였고, 결국 내가 하는 일에 대해 정말 이상하다는 생각이 들었음
          + 이거 블랙 미러의 ""Be Right Back"" 에피소드"" 와 비슷함

   정보성 댓글도 하나
     * Flux의 경우, 텍스트 인코더에 훨씬 더 많은 기능이 있으며 더 의미 있고 포괄적인 문장으로 프롬프트할 수 있음
          + 따라서 Stable Diffusion에서 볼 수 있었던 기존의 쉼표로 구분된 간결한 문구는 줄여도 됨
     * 또한 훈련 이미지에도 동일한 작업을 수행해야 함. 모델이 '나'로 기억하지 않기를 바라는 모든 것(하고 있는 일, 입고 있는 옷, 동반한 사람, 액세서리 등)에 캡션을 달면 좋음

   ""충분히 발달한 과학기술은 마법과 구분할 수 없다 - Arthur C. Clarke""

   불과 2년 전만 해도 SF 영화에서나 볼 법한 일인데, 우리가 정말 마법이 현실이 되는 순간을 실시간으로 목격하고 있네요 😳
"
"https://news.hada.io/topic?id=19004","DeepSeek에서 검열한 1,156개의 질문들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DeepSeek에서 검열한 1,156개의 질문들

     * DeepSeek-R1은 중국 기업 DeepSeek이 공개한 오픈소스 모델로, 미국 앱 스토어 1위에 오르며 주목을 받고 있음
     * 중국회사이기 때문에 중국 당국(CCP)의 검열 정책이 그대로 반영되어 있으며, 이를 우려하는 시각이 존재함
     * Promptfoo 팀은 이 CCP 검열 의심 콘텐츠를 평가하기 위해, 1,360개의 ‘민감 주제’ 질문을 담은 데이터셋을 만들었음
     * 실험 결과, DeepSeek-R1은 이 중 약 85%의 질문을 거부하는 고정 답변(canned refusal)으로 응답함

데이터셋 생성

     * Promptfoo에서는 중국 정부가 민감하게 여기는 주제(대만 독립, 문화대혁명, 시진핑 관련 등)에 대한 질문을 다수 수집함
     * 주어진 시드 질문을 확장하고, 생성형 데이터 기법을 활용해 총 1,360개의 질문(주제별로 약 20개)을 마련함
     * HuggingFace와 Google Sheets에서 데이터셋을 공개함

평가 환경 설정

     * Promptfoo를 사용해 DeepSeek-R1 모델에 1,000개 이상의 질문을 일괄 테스트함
     * DeepSeek-R1이 중국 관련 민감 주제를 만나면, 정치적으로 확고한 CCP 입장을 강조하는 고정 답변을 내놓는 양상이 발생함
     * 이때 답변 안에 ‘추론 태그(</think> 등)’가 전혀 없거나, 거의 없는 형태로 검열·거부됨
     * 결과적으로 약 85%의 질문이 모델에 의해 즉시 거부 또는 CCP 입장에 부합하는 식으로 응답됨

DeepSeek 탈옥하기(Jailbraking DeepSeek)

     * Promptfoo의 레드팀(red teaming) 기능으로 모델을 ‘탈옥(jailbreak)’하는 기법을 다각도로 시도함
     * 특정 주제를 우회하고, 검색·분석이 가능하도록 다양한 전략(Iterative, Tree, Composite, Crescendo, GOAT 등)을 조합함
     * CSV 파일에 있는 민감 주제 질문들에 대해, 여러 “우회(prompt injection)” 기법을 적용함

DeepSeek 우회 결과

     * DeepSeek-R1의 검열 방어는 매우 제한적이며, 간단한 우회 전략들로 쉽게 뚫림
     * CCP 검열이 ‘모델 내적 구조’가 아닌 ‘후처리’ 방식으로 구현된 것으로 보임
     * 대다수 우회 사례에서, 다음과 같은 방식으로 검열을 피할 수 있었음
          + 중국 대신 다른 국가(미국, 북한 등)나 가상 국가를 예로 들어 비슷한 질문을 제출함
          + 역사·소설·가상의 상황으로 포장해 질문함
          + Base64, JSON 출력, 역할극(roleplay) 같은 추가 기법을 혼합하여 “합성 우회”를 시도함

앞으로의 전망

     * DeepSeek-R1의 수준 자체는 인상적이지만, CCP 검열 정책이 단순 강제 삽입되었다는 점이 문제로 지적됨
     * 이러한 검열은 내부 구조의 정교한 제약이 아니므로, 후속 오픈소스 프로젝트 등에서 쉽게 ‘검열 없는 모델’이 재생산될 가능성이 높음
     * Promptfoo 측은 이후 미국에서 개발된 모델들을 상대로도 유사한 민감 주제 테스트를 진행해, 국가별 정치적으로 예민한 주제를 어떻게 처리하는지 비교할 예정임

   이런 데이터셋도 생긴다는게 흥미롭네요

   사실 이전부터 Qwen등의 유명한 모델들이 중국에서 나온게 있고, 그것들도 검열이 되있어서 이전부터 간간히 만들어져있던 데이터들입니다 ㅎ
"
"https://news.hada.io/topic?id=18929","LakeDB 구상 - LakeHouse 아키텍처의 차세대 진화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   LakeDB 구상 - LakeHouse 아키텍처의 차세대 진화

     * 데이터 관리 분야가 빠르게 변화 중이며, 클라우드 스토리지와 실시간 분석 수요 증가로 인해 Data Lakehouse 개념이 부상하고 있음
     * Apache Iceberg, Apache Hudi, Delta Lake 같은 프로젝트가 Lakehouse 아키텍처에 스키마 진화, ACID 트랜잭션, 효율적 업데이트 등 핵심 기능을 제공해 왔음
     * Google 내부 시스템 Napa는 현재 Lakehouse 솔루션보다 한층 발전된 접근을 제시함
     * 나아가 Apache Pinot 등 다른 시스템의 아이디어를 더해, Lakehouse의 차세대 형태인 LakeDB를 제안함

현재 Lakehouse 환경: Iceberg, Hudi, Delta Lake

     * Apache Iceberg
          + 정교한 메타데이터 관리로 스키마 진화, 시점 이동(time travel), 효율적 쿼리 플래닝을 지원함
          + 대규모 분석 데이터 집합을 위한 일관성 보장을 제공함
     * Apache Hudi
          + 로그 구조 기반 스토리지와 인덱싱을 활용해 upsert, delete, CDC(변경 데이터 캡처)를 효율적으로 처리함
          + 데이터 변이와 증분 처리를 강조함
     * Delta Lake
          + Spark와 빅데이터 워크로드를 위해 ACID 트랜잭션을 제공함
          + 스키마 검증, 시점 이동, 배치·스트리밍 통합 처리를 지원함
          + Delta Live Tables를 통해 선언적 파이프라인과 머티리얼라이즈드 뷰를 일부 제공함

Google의 Napa: 거시적 접근

     * 완전한 분석 데이터 관리 시스템으로, 대규모 데이터를 대상으로 낮은 지연 시간 쿼리와 연속적 데이터 적재를 지원함
     * LSM(Log-Structured Merge)-Tree 기반 적재
          + 높은 쓰기 처리량을 위해 LSM-tree 방식을 채택하며, 컴팩션을 통해 기존 데이터와 합치는 구조를 가짐
     * 머티리얼라이즈드 뷰 활용
          + 쿼리 가속을 위해 머티리얼라이즈드 뷰를 자동으로 유지·업데이트함
     * Queryable Timestamp(QT)
          + 시스템 전반의 일관된 시점 관리를 제공함
          + 데이터 최신성과 쿼리 성능 간 균형을 세밀하게 조절할 수 있음
     * F1 Query 통합
          + Google의 F1 Query 엔진을 활용해 복잡한 분석 쿼리를 효율적으로 처리함
     * 높은 구성 가능성
          + 사용자 요구에 맞춰 데이터 최신성, 성능, 비용 등을 조정 가능함

Napa, Iceberg, Hudi, Delta Lake 비교

     * Napa는 전체적인 분석 데이터 관리 시스템으로, LSM 기반의 머티리얼라이즈드 뷰를 통해 빠른 쿼리를 지원하고 Queryable Timestamp(QT)라는 기법으로 데이터 최신성을 세밀하게 조절함. 대규모 데이터를 빠르게 분석·보고하고 싶은 상황에서 유용하며, 높은 설정 유연성으로 비용과 성능, 최신성을 적절히 균형 있게 관리할 수 있게 해줌.
     * Iceberg는 테이블 포맷에 초점을 맞춘 프로젝트로, 메타데이터를 통해 대규모 데이터 파일을 관리하고 아토믹 업데이트(원자적 업데이트)와 같은 기능을 제공함. 주로 데이터 웨어하우징이나 스키마 진화, 시점 이동(time travel) 같은 기능을 필요로 하는 데이터 레이크 환경에서 활용되며, 구성 옵션은 주로 테이블 레이아웃이나 메타데이터에 집중되어 있음.
     * Hudi는 데이터 레이크에 데이터베이스와 유사한 기능을 접목한 플랫폼으로, 로그 구조 기반 스토리지와 인덱싱 기법을 통해 업서트(upsert)나 삭제 같은 데이터 변이 작업을 효율적으로 처리함. 실시간 적재나 변경 데이터 캡처(CDC), GDPR과 같은 규제 준수 요건에도 잘 대응하도록 설계되었으나, 머티리얼라이즈드 뷰 기능은 기본적으로 제공하지 않음.
     * Delta Lake는 ACID 트랜잭션을 지원하는 스토리지 계층으로, 배치와 스트리밍 작업을 통합적으로 처리하면서 스키마 enforcement(강제)와 시점 이동 기능도 제공함. 쿼리 성능 향상을 위해 Spark와 연동해 데이터 스키핑이나 캐싱을 활용하며, 별도의 Delta Live Tables를 통해 머티리얼라이즈드 뷰 같은 개념도 지원함. 다양한 데이터 레이크 환경에서 신뢰성과 트랜잭션 기능을 추가하고 싶을 때 사용하는 사례가 많음.

LakeDB에 대한 주장: Napa에서 영감을, 다른 곳에서 학습

     * Napa 및 Apache Pinot 등의 혁신적 아이디어를 결합해, 더 통합되고 유연한 LakeDB라는 개념을 제안함
     * LakeDB는 사용자 요구(최신성, 비용, 일관성, 인덱스 사용 등)를 선언적으로 표현하면, 시스템이 알아서 최적화해 주는 데이터 관리 솔루션을 지향함

  1. 스토리지·적재·메타데이터·쿼리 처리 통합

     * 하나의 시스템 안에 스토리지, 적재, 메타데이터, 쿼리 처리가 모두 포함됨
     * 사용자는 데이터 최신성과 일관성만 지정하면, 자동으로 필요한 작업이 조정됨
     * Iceberg, Hudi, Delta Lake는 이 부분에서 별도 도구 연동이 필요해 복잡성이 증가함

  2. 머티리얼라이즈드 뷰와 데이터 레이아웃의 지능형 최적화

     * CoW(Copy-on-Write)와 MoR(Merge-on-Read) 방식을 워크로드에 맞춰 자동으로 전환함
     * 사용자 정의 성능·비용 요구 사항에 따라 스냅샷 및 머티리얼라이즈드 뷰를 적절히 생성·관리함
     * Hudi, Delta Lake, Iceberg는 이 과정을 대부분 수동으로 설정해야 함

  3. 세밀한 데이터 최신성 제어

     * Napa의 QT처럼 사용자가 원하는 최신성 수준을 지정하면, 시스템이 성능·비용 간 절충점을 찾음
     * 기존 시스템에서는 주기적 스냅샷과 모니터링에 의존해 실시간성을 보장하기 어려웠음

  4. Apache Pinot에서 영감을 받은 고급 인덱싱과 파티셔닝

     * Star-Tree 같은 고도화된 인덱스 방식을 지원해 높은 카드inali티(차원 수가 많은) 분석도 처리 가능하게 함
     * Iceberg, Delta Lake의 단순 파티셔닝과 데이터 스키핑을 넘어서는 성능 향상을 추구함

  5. 유연한 구성

     * 같은 테이블을 여러 소비자가 서로 다른 성능·비용·신선도 요구에 맞게 설정할 수 있음
     * 기존 시스템은 설정 범위가 제한적이어서, 다변화된 워크로드에 대응하기 위해 많은 수작업 튜닝이 필요함

  6. ACID와 스키마 진화 지원

     * Iceberg, Delta Lake의 ACID 및 스키마 진화 기반을 계승·확장함
     * 분산 환경에서의 동시 스키마 변경이나 데이터 일관성 보장을 자동화하려 함

  7. 개방성과 확장성

     * 오픈 스탠다드와 다양한 쿼리 엔진 연동을 지원하고, 필요에 따라 확장 가능함
     * 특정 벤더나 플랫폼에 종속되지 않고, 사용자 요구에 따라 기능을 유연하게 적용할 수 있게 함

LakeDB가 차세대 진화인 이유

     * 성능: 고급 인덱스, 머티리얼라이즈드 뷰, 동적 데이터 레이아웃 최적화를 통해 OLAP 수준의 속도에 근접함
     * 단순성: 하나의 시스템에서 관리 기능을 제공해, 사용자 요구(최신성, 성능 등)만 설정하면 자동으로 조정됨
     * 효율성: 자원 활용과 운영 부담을 줄여, 비용 측면에서도 이점을 기대할 수 있음
     * 유연성: 세밀한 데이터 최신성 제어와 풍부한 설정 옵션으로 다양한 워크로드에 대응 가능함
     * 실시간 분석: Apache Pinot의 인덱스 기법을 도입해 낮은 지연과 높은 처리량을 모두 추구함

결론

     * Apache Iceberg, Apache Hudi, Delta Lake는 Lakehouse 개념을 발전시키는 데 큰 역할을 했음
     * Google의 Napa 접근 방식과 Apache Pinot 등에서 나오는 아이디어를 결합하면 더 통합적이고 강력한 LakeDB 비전을 구상할 수 있음
     * LakeDB는 스토리지, 적재, 메타데이터, 쿼리 처리를 아우르는 완성도 높은 통합형 시스템으로, 차세대 데이터 관리 아키텍처가 될 가능성이 높음
"
"https://news.hada.io/topic?id=18964","Qwen2.5-Max: 대규모 MoE 모델의 지능 탐구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Qwen2.5-Max: 대규모 MoE 모델의 지능 탐구

     * Qwen2.5-Max는 20조(20T) 개 이상의 토큰으로 사전 학습한 대규모 Mixture-of-Experts(MoE) 모델
     * Supervised Fine-Tuning(SFT) 및 인간 피드백을 활용한 강화학습(RLHF)을 통해 후속 학습 진행
     * DeepSeek V3, GPT-4o, Claude-3.5-Sonnet, Llama-3.1-405B 등과 비교한 대부분의 벤치마크에서 탁월한 성능을 보여주며 우위를 점함
          + Arena-Hard, LiveBench, LiveCodeBench, GPQA-Diamond 등에서 DeepSeek V3를 능가하며, MMLU-Pro에서도 경쟁력 있는 결과를 보여줌.

주요 벤치마크 결과

     * Arena-Hard: 인간 선호도 근사 평가
       Qwen2.5-Max가 89.4점을 기록하며 가장 높은 성능을 보임. DeepSeek V3(85.5점), GPT-4o(85.2점), Claude-3.5-Sonnet(77.9점)보다 우수. Llama-3.1-405B는 69.3점으로 상대적으로 낮은 성능을 보임.
     * MMLU-Pro: 대학 수준의 지식 평가
       Qwen2.5-Max는 76.1점으로 DeepSeek V3(75.9점)와 거의 동등한 성능을 보임. GPT-4o(78.0점)가 약간 더 높지만, Qwen2.5-Max는 Claude-3.5-Sonnet(77.0점), Llama-3.1-405B(73.3점)보다 우수.
     * GPQA-Diamond: 일반적인 질문 응답 능력 평가
       Qwen2.5-Max는 60.1점으로 DeepSeek V3(59.1점)를 소폭 앞서며, GPT-4o(53.6점), Claude-3.5-Sonnet(51.1점), Llama-3.1-405B(65.0점)보다는 약간 낮음.
     * LiveCodeBench: 코딩 능력 평가
       Qwen2.5-Max는 38.7점을 기록하며 DeepSeek V3(37.6점)보다 약간 높음. GPT-4o(35.1점), Claude-3.5-Sonnet(30.2점), Llama-3.1-405B(38.9점)와 비슷한 수준.
     * LiveBench: 전반적인 모델 성능 평가
       Qwen2.5-Max는 62.2점으로 가장 높은 점수를 기록. DeepSeek V3(60.5점), GPT-4o(60.3점), Claude-3.5-Sonnet(56.0점), Llama-3.1-405B(53.2점)보다 우수한 성능.

미래 방향

     * 데이터와 모델 크기의 확장은 모델 지능의 발전을 보여주며, 대규모 언어 모델의 사고 및 추론 능력을 향상시키기 위한 연구에 전념하고 있음
     * 강화 학습의 혁신적인 적용을 통해 인간 지능을 초월하는 모델을 개발하고, 새로운 지식과 이해의 영역을 탐구할 가능성을 열어줌

   2023-08-03 Alibaba, 오픈소스 AI 모델 QWEN 공개
   2024-04-25 Qwen1.5-110B : 알리바바의 오픈소스 LLM Qwen1.5 시리즈의 첫번째 100B+ 모델
   2024-06-07 Alibaba, Qwen 2 모델 공개
   2024-09-19 Qwen2.5 - 여러 파운데이션 모델 공개
   2024-11-28 QwQ - ChatGPT o1과 유사한 알리바바의 추론 LLM
   2024-12-24 Qwen의 새로운 시각적 추론 모델 QvQ 사용 후기
   2025-01-27 Qwen2.5-1M - 1백만 토큰까지 지원하는 Qwen을 자체 배포하기

   DeepSeek가 돌풍을 일으키고 있는 와중에 Qwen도 엄청난 결과를 하루에 하나씩 마구 쏟아내고 있네요.
   중국 기업들 무섭습니다.
"
"https://news.hada.io/topic?id=19048","GarminDB - 가민 커넥터/워치에서 데이터를 가져와 파싱하는 DB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GarminDB - 가민 커넥터/워치에서 데이터를 가져와 파싱하는 DB

     * 건강 데이터를 SQLite 데이터베이스로 파싱하고 조작하는 Python 스크립트
     * Garmin Connect 또는 Garmin 시계, FitBit CSV, MS Health CSV 파일에서 데이터를 다운로드하여 구문 분석하고, Jupyter 노트북을 사용해 Sqlite 데이터베이스에 있는 데이터를 분석

기능

     * Garmin Connect의 ""Daily Summary"" 페이지에서 하루 종일 심박수, 활동, 등반/하강, 스트레스, 강도 분 등의 데이터를 자동으로 다운로드하고 가져옴
     * 수면, 체중, 안정 시 심박수 데이터를 Garmin Connect에서 추출하여 JSON 파일로 저장하고 데이터베이스에 가져옴
     * Garmin Connect에서 활동 파일을 다운로드하고 가져옴. 모든 활동에 대한 요약 테이블과 일부 활동 유형에 대한 세부 데이터 포함
     * 일일, 주간, 월간, 연간 요약을 포함하는 테이블로 데이터를 요약함
     * 명령줄 또는 Jupyter 노트북을 사용하여 데이터를 그래프로 표시함
     * 다운로드한 JSON 및 FIT 파일을 보관하여 Garmin Connect에 다시 연결하거나 데이터를 다시 다운로드하지 않고 데이터베이스를 재생성할 수 있음
     * 활동을 TCX 파일로 내보낼 수 있음

사용 방법

  릴리스

     * GarminDb는 PyPI에 호스팅됨. Python 3.x가 필요함. 터미널에서 pip install garmindb를 실행하여 최신 릴리스를 설치함
     * GarminConnectConfig.json.example을 ~/.GarminDb/GarminConnectConfig.json으로 복사하고, Garmin Connect 사용자 이름과 비밀번호를 추가하고 데이터의 시작 날짜를 조정함
     * 모든 데이터를 다운로드하고 데이터베이스를 생성하려면 garmindb_cli.py --all --download --import --analyze를 실행함
     * 최신 데이터를 다운로드하고 가져와 데이터베이스를 점진적으로 업데이트하려면 garmindb_cli.py --all --download --import --analyze --latest를 실행함
     * 데이터베이스 파일을 백업하려면 가끔 garmindb_cli.py --backup을 실행함

  소스에서

     * SSH 클론 방법을 사용하여 GarminDB 저장소를 Git 클론함. 서브모듈은 SSH를 사용해야 함
     * 클론한 트리에서 make setup을 실행하여 데이터를 처리할 준비를 함
     * GarminConnectConfig.json.example을 ~/.GarminDb/GarminConnectConfig.json으로 복사하고, 사용자 이름과 비밀번호를 추가하고 시작 날짜를 조정함
     * make create_dbs를 한 번 실행하여 데이터를 가져오고 처리함
     * make 명령을 주기적으로 실행하여 모든 로컬 데이터를 최신 상태로 유지함

Jupyter 노트북

     * 데이터베이스에서 데이터를 분석하기 위한 Jupyter 노트북은 소스 트리의 'Jupyter' 디렉토리에 있음

플러그인

     * 플러그인은 사용자가 데이터베이스에 처리하고 저장할 데이터 유형을 확장할 수 있도록 함. GarminDb는 이미 타사 Connect IQ 앱과 데이터 필드를 처리하기 위한 여러 플러그인을 보유하고 있음

        Hacker News 의견

     * Garth를 사용하여 인증하는 앱에 주의가 필요함. Garmin과의 통합이 어려움
          + Garmin의 API와 SDK는 사용하기 어려움
          + Garmin Connect에서 데이터를 FIT 파일로 내보내는 방법이 있음
          + Python과 Go의 오픈 소스 라이브러리로 FIT 파일을 읽고 해석할 수 있음
     * 장치에서 현재 데이터를 가져오는 방법이 있음
          + 장치를 컴퓨터에 연결하고 파일 시스템으로 마운트하여 .FIT 파일을 가져올 수 있음
     * Intervals를 사용하여 Garmin과 Strava 관련 데이터를 분석하는 것이 유용함
          + 특히 조정 관련 메트릭을 생성할 수 있어 좋음
     * Garmin은 스마트폰 앱에 의존하는 대신 데이터를 더 잘 관리할 수 있는 하드웨어를 제공해야 함
          + API 접근이 어려운 것뿐만 아니라 커뮤니티의 의견을 듣지 않음
          + 장비 없이 운동을 필터링할 수 있는 기능이 필요함
     * Garmin의 SDK는 오래되었고 데이터 접근이 제한적임
          + FIT 파일 형식은 제한된 앱에서만 지원됨
     * 데이터 접근이 더 나은 피트니스 시계가 필요함
          + 실시간 건강 정보에 접근할 수 있는 시계가 필요함
     * 새로운 Garmin Vivoactive5를 구입했으며, Garmin의 API가 최적은 아니지만 만족함
          + Apple Watch 시리즈 10을 고려했으나 배터리 수명과 가격 때문에 포기함
          + 해킹 가능한 오픈 시계가 필요하며, Pebble의 부활이 이 공백을 채울 수 있을 것임
"
"https://news.hada.io/topic?id=19039","Show GN: 올인원 계약관리 SaaS, prix","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 올인원 계약관리 SaaS, prix

올인원 계약관리 SaaS, prix

   prix는 기업의 계약관리를 근본적으로 혁신하는 올인원 솔루션입니다. 단순한 전자계약 서비스를 넘어, 계약 관리에 필요한 모든 업무를 지원하는 통합 플랫폼을 목표로 만들고 있습니다.

    [왜 prix를 만들었나]

   저희 팀 상원님은 과거 법무법인을 운영하면서 매일 수십 건의 계약을 검토했습니다. 그때마다 느꼈던 것은 기업들의 계약관리가 너무나 비체계적이라는 점이었습니다.

   prix의 시작은 이런 현장에서의 깨달음이었습니다. 10년 이상의 법조계 경험과 기업법 전문 변호사로서의 경험을 통해 다수의 클라이언트를 자문하면서, 기업들이 많은 계약을 체결하면서도 체결한 이후 관리의 어려움으로 많은 손해와 비효율을 겪고 있는 것을 자주 목격하였습니다. 한편, 직접 법무법인을 설립해 운영해 보면서, 저 역시도 그 문제를 직접 느끼기도 했습니다.

   현재 기업의 계약관리 방식에는 여러 문제들이 있습니다:
     * 계약서가 전자서명 프로그램, 슬랙, 이메일, 개인 PC, 클라우드, 담당자 서랍 등에 흩어져 있음
     * 갱신일, 지급일 등 중요 일정이 제대로 관리되지 않아 비즈니스 기회를 놓침
     * 견적서, 인보이스, 세금계산서 발행을 위해 여러 시스템을 오가며 시간 낭비
     * 법무팀, 재무팀, 영업팀 간의 협업이 원활하지 않아 업무 병목 발생

   이러한 문제를 해결하기 위한 방법으로 미국에서는 이미 CLM(Contract Lifecycle Management - 계약 전주기 관리 소프트웨어) 산업이 크게 성장하고 있었고, 최근 AI와 LLM의 발전으로 그 가능성이 더욱 확대되고 있었습니다. 반면 한국은 아직 CLM이라는 개념조차 생소한 초기 시장이었습니다.

   이에 prix 팀은 아래의 비전을 가지고 2년 전 prix 개발을 시작했습니다:
    1. 기업의 모든 계약 업무를 하나의 플랫폼으로 통합
    2. 안정적이고 예측 가능한 계약 사후관리 프로세스 구축
    3. 법률 전문성에 기반한 실용적인 솔루션 구현

    [핵심 기능]

     * 견적-계약-청구-세금계산서-자금 관리 등 백오피스 업무 전반 도구 제공
     * 계약서의 고객, 프로젝트, 태그별 검색 및 권한 관리
     * 계약의 주요 일정과 재무정보 관리 및 청구일 리마인더
     * 경영 현황 파악을 위한 대시보드 (계약 현황 / 재무 현황)

    [도입 사례]

     * 마이리얼트립: 계약관리 공수 90% 절감
     * 팩토스퀘어: 견적, 계약, 오퍼레이션 휴먼 에러 0에 수렴
     * 콕스웨이브: 오퍼레이션 관리 정확도 100% 달성
     * 그 외 +75여개 유료 고객사 보유 (에이티앤피파트너스, 딥블루닷 등 자체 S/W 개발 회사 및 스튜디오제이티 등 웹 에이전시)

    [기술 스택과 아키텍처]

   프론트엔드
     * 스택: TypeScript, React, Next.js (App Router), TanStack Query, SCSS
     * 아키텍처: nx 도메인 기반 구조 (ui/util/data-access/feature 분리), 국제화 지원
     * 디자인 시스템: Radix UI 기반
     * 테스트: Storybook, vitest

   백엔드
     * 스택: TypeScript, Node.js, Express, PostgreSQL + TypeORM
     * 아키텍처: 도메인 기반 모듈화, Controller-Service-Repository-Model 계층 구조

   인프라
     * 호스팅: Vercel(프론트엔드), AWS(백엔드, DB, 인프라)
     * AWS 서비스: ECS(컨테이너), RDS(DB), S3(스토리지), CloudFront/Route53(네트워크), SES(메일)
     * 운영 및 모니터링: Prometheus + Grafana, Slack 알림, Terraform IaC 도입 중

    [로드맵]

     * 많은 수의 계약서 관리가 필요한 엔터프라이즈 고객을 대상으로 하는 신규 기능 출시 (올해 1분기말 출시 예정)
          + 내부 기능 고도화, 계약서 히스토리 관리 기능, 계약 상대방과의 체결 전 의사소통 지원 기능 등
     * AI 기능 출시 - 계약서 조항 분류, 주요 내용 요약 기능 (올해 2분기 출시 예정)

    [마치며]

     * prix를 잘 사용 중인 고객사의 업종 종류로는 고객과 프로젝트 베이스로 일하는 법무법인, 웹 에이전시, 소프트웨어 아웃소싱 회사, 마케팅 에이전시 등이 있습니다.
          + GeekNews의 독자 분들 중 다수가 저희 잠재 고객이기도 한데요, 이런 문제를 느껴보신 적이 있다면 dukjin@lattice.im 으로 연락 부탁드립니다.
          + 특히 과기부의 소프트웨어 표준 계약서 양식을 수정해서 prix ‘에디터’ 내부에 포함해 두었습니다. 소프트웨어 기업이 쓰기 위해서는 어떤 점이 더 필요한지 말씀해 주시면 개선에 참고하겠습니다.
     * 큰 기업의 경우 사내 법무팀, 계약관리 담당자 혹은 총무팀에게 본 글을 전달해 주시면 저희가 많은 시간과 비용을 아껴 드릴 수 있습니다.
     * 피드백 혹은 질문을 기다립니다.🙏 버그 제보, 기능 제안 등 어떤 의견이든 환영합니다.
     * 홈페이지: https://prix.im
     * 서비스 소개서 링크

   편리해보이네요. 응원합니다

   광고가 뉴스 피드를 더럽히네요.

   광고로 느껴졌다면 죄송합니다. (__) 긱뉴스 잘 보고 있고 지난 밋업에서 서비스 만들면 올려 주셔도 좋겠다고 하셔서 올려 보았습니다.

   혹시 헬로월드님이 쓰시기에 적절한 제품이 아닌 것 같으면, 근처에 누가 쓸만한지 알려주셔도 큰 도움 되겠습니다.

   프릭스 응원합니다!

   저희 인턴입니다. (진정성이 없는 댓글 죄송합니다)

   응원합니다.

   한국에서 솔루션 혹은 패키지 만들기 쉽지는 않죠.

   거의 대부분 솔루션 도입이라는 형식의 소스가 파편화되는 SI형태로 자리잡아 왔던거 같습니다.

   기업 내부의 프로세스가 글로벌 스텐다드로 정립되는 것도 아닐터이고..

   go, prix!

   새로운 서비스가 나온거고 보고 사용해볼수도 있으니까 새로운 서비스 홍보 자체는 문제라고 안보이는데 계정을 새로 만드셔서 응원 댓글로 도배하는건 조금 ㅎㅎ;

   긱뉴스 show에 업로드했다고 회사 슬랙에 올렸는데 뭔가 티나는 (자사의 응원을) 해버렸네요.. 단속하겠습니다. 한명은 저희 대표님이고 한명은 저희 인턴입니다.
"
"https://news.hada.io/topic?id=18966","uv를 shebang 라인으로 사용하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        uv를 shebang 라인으로 사용하는 방법

     * ~/bin/ 디렉토리에 자동화 스크립트를 많이 생성함.
     * uv와 인라인 스크립트 메타데이터를 발견한 이후로 Python을 더 많이 사용하게 됨.
     * ~/bin이 경로에 있으므로 명령줄에서 직접 스크립트를 실행하고자 함.
     * 이를 위해 다음과 같은 shebang을 사용함: #!/usr/bin/env -S uv run --script
     * 명령줄은 이제 uv run --script를 실행하고 파일을 인수로 전달함.
     * uv는 shebang을 무시하고 나머지 파일을 일반 Python 파일로 실행함.
     * chmod a+x {filename} 명령어로 스크립트에 실행 권한을 부여한 후, Python으로 작성된 간단한 명령줄 스크립트를 사용할 수 있게 됨. 이 스크립트는 자동으로 종속성을 처리함.

        Hacker News 의견

     * env -S 옵션을 사용하여 shebang 라인에서 여러 인자를 전달할 수 있게 됨
          + Linux에서 shebang 라인은 단일 인자만 전달 가능하다는 일반적인 인식을 깨뜨림
          + env -S는 인자를 개별적으로 분리하여 실행하는 데 유용함
     * uv를 사용하여 Python CLI 도구를 설치하는 방법을 개선함
          + curl | sh 스크립트를 사용하여 간단하게 설치 가능하게 함
          + PyPI에 uv를 의존성으로 하는 작은 설치 패키지를 만들어 CLI 도구를 설치함
          + Python 가상 환경을 관리할 필요 없이 독립된 환경에 설치 가능하게 함
          + 복잡한 의존성 문제로 인한 GitHub 이슈가 줄어듦
     * Prolog 파일을 쉘에서 실행할 수 있는 방법을 고안함
          + Prolog 파일을 쉘 파일로도 인식되게 하여 실행 가능하게 함
          + 쉘에서 첫 번째 라인을 주석으로 처리하여 오류를 방지함
     * Trey Hunner의 ""Lazy self-installing Python scripts with uv"" 기사에서 더 많은 예시와 세부사항을 제공함
     * mise를 사용하여 작은 작업을 위한 스크립트를 작성할 수 있음
          + uv를 사용하여 Python 스크립트를 실행하는 방법을 소개함
     * uv run python을 사용하여 Python 환경을 관리하는 것이 편리함
          + .venv를 관리할 필요 없이 프로젝트 환경에서 REPL을 실행할 수 있음
          + 시스템 설치 문제를 해결하고, 프로젝트/환경 내에서 직접 실행 가능함
     * uv를 명령어 실행기로 사용할 때 몇 가지 주의할 점이 있지만, 대부분의 경우 시간 절약에 도움을 줌
          + .py 파일을 직접 실행할 때 경로 문제를 해결하기 위한 옵션이 있음
     * TypeScript 사용자들은 Deno를 사용하여 유사한 작업을 수행할 수 있음
          + deno run을 사용하여 권한 플래그를 추가할 수 있음
     * Nix 패키지 관리자를 사용하여 다양한 언어와 의존성을 관리할 수 있음
          + 단일 파일로 휴대 가능한 스크립트를 작성할 수 있음
"
"https://news.hada.io/topic?id=19050","알츠하이머 연구의 거짓말이 남긴 파괴적인 유산","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       알츠하이머 연구의 거짓말이 남긴 파괴적인 유산

알츠하이머 발병 현황 및 문제점

     * 최근 수십 년간 암·심장 질환 등은 다양한 치료법으로 사망률이 크게 줄어드는 추세임
     * 그러나 고령화 인구 증가와 함께 알츠하이머 사망률은 반대로 증가하고 있음
     * 미국에서는 65세 이상 인구 중 약 9명 중 1명이 알츠하이머를 앓고 있음
     * 30대 등 비교적 젊은 연령대에서도 초기 발병 사례가 확인되고 있음
     * 해마다 새로운 치매 환자 수가 늘어나 2050년에는 현재의 두 배에 이를 것으로 예상됨
     * 오래된 연구에도 불구하고, 인지 기능 저하를 멈추거나 되돌리는 치료법은 아직 개발되지 않음
     * 뇌의 복잡성으로 인한 어려움뿐만 아니라, 경쟁이 치열한 연구 환경에서 발생한 ‘부정행위’도 주요 원인으로 지목됨

주요 연구 부정행위 사례

     * Dr. Eliezer Masliah: 알츠하이머·파킨슨 연구의 선도적 학자로, 2016년 이후 National Institute on Aging의 대형 프로젝트를 이끌었던 인물임
     * 2024년 무렵 발표된 조사에 따르면, 그가 발표한 논문 다수에서 뇌 조직 사진·이미지 등이 조작된 흔적이 발견되었음
     * 여러 서양블롯(western blot) 이미지가 중복 사용되거나 잘못 표기된 점이 드러났음
     * NIH는 Dr. Masliah가 연구 부정행위를 저질렀다고 결론 내렸으며, 그 결과 해당 기관의 리더십에서 물러난 것으로 전해짐
     * 이 사례는 알츠하이머 연구계 전반에 퍼진 문제의 단면을 보여줌

연구 부정의 영향과 알츠하이머 분야의 위기

     * 저명한 과학자부터 무명 연구자까지 부정행위가 드러나며, 알츠하이머 연구 결과의 신뢰성이 흔들림
     * 전문가들이 46명의 알츠하이머 연구자 논문을 살펴본 결과, 600건에 가까운 논문에 의심스러운 이미지 조작 흔적이 보고되었음
     * 이런 논문들은 총 8만 번 이상 인용되었으며, 학계 전반에 잘못된 지식을 퍼뜨렸을 가능성이 큼
     * 실제로 많은 연구자가 이 논문들을 근거 삼아 새로운 아이디어를 발전시켰기 때문에, 학문적 기반이 왜곡될 위험이 있음
     * 알츠하이머는 서서히 일상 기능과 기억, 정체성을 무너뜨리는 치명적 질환이므로, 부정행위로 인한 피해가 매우 심각함
     * 환자 가족과 간병인들은 막대한 감정적·경제적 부담을 떠안고 있음

아밀로이드 가설과 그 한계

     * 오랜 기간 알츠하이머 연구는 아밀로이드 단백질이 뇌 손상의 주요 원인이라는 ‘아밀로이드 가설’에 집중되어 왔음
     * 이 가설을 토대로 수많은 연구비와 투자가 이어졌으나, 실제 치료 효과는 미미하거나 실패 사례가 많았음
     * 일부 사망 후 부검에서 대규모 아밀로이드 침전물이 발견되어도 임상 증상이 없었던 경우 등이 문제점을 드러냄
     * 그럼에도 불구하고, 현재까지 승인된 대부분의 알츠하이머 치료제는 아밀로이드 제거를 목표로 하고 있음
     * 이러한 약물은 비용이 매우 높고 뚜렷한 인지 개선 효과가 거의 없으며, 뇌 수축 등 위험을 동반하기도 함
     * 학계와 제약 업계 내의 ‘집단사고’와 기득권 형성으로 인해, 아밀로이드 가설이 여전히 강력한 영향력을 행사하는 현실임

부정행위의 구체적 예시

     * Dr. Masliah 외에도 USC의 Berislav Zlokovic, Stanford University의 전 총장 Marc Tessier-Lavigne 등 저명 학자들이 연구 이미지 조작 의혹에 휩싸였음
     * Marc Tessier-Lavigne의 경우 직접적 조작은 없었으나, 오류를 알면서도 논문을 수정하지 않았고 적절한 감수를 제공하지 않아 비판을 받았음
     * Hoau-Yan Wang은 simufilam 연구로 유명했으나, 연구 데이터 조작 혐의와 NIH 자금 1,600만 달러를 횡령한 혐의로 기소되었음
     * Cassava Sciences 역시 투자자에게 잘못된 정보를 제공한 혐의로 SEC와 합의했음
     * 이러한 사례들은 한 연구자의 전공 분야 전부가 거짓이라고 단정할 수는 없으나, 그 신뢰도를 크게 떨어뜨림

다른 연구 방향과 가능성

     * 아밀로이드 외에, 바이러스 등 감염 요인이나 뇌 염증 반응 등에 주목하는 다양한 접근법이 새롭게 부각되고 있음
     * GLP-1 계열 약물을 통한 체중 감량·대사 개선이 알츠하이머 악화를 늦추는 데 도움이 될 수도 있다는 연구도 진행 중임
     * 건강한 생활습관, 혈압·콜레스테롤 관리 등이 질환 진행을 늦추는 데 중요하다는 근거가 늘어나는 추세임
     * 그러나 부정행위로 인한 자원 낭비와 오판이 많은 진전 가능성을 막아왔음

제도적 문제와 개선 방안

     * 왜 과학자들이 이런 부정행위를 하는지에 대해, 성과 압박·명성 추구·경제적 이득이 원인으로 지목되고 있음
     * 아름다운 이미지나 기대치에 부합하는 결과를 얻기 위해 과도한 ‘이미지 손질’이 시작되었다가, 결국 조작으로 이어지기도 함
     * 학술지·학계·연구비 제공 기관 모두 이미지 검증이나 검열에 소홀했던 점이 문제를 키움
     * 대학은 자체 조사를 통해 사안을 덮으려는 경향이 있으며, 공정하고 독립적인 외부 기관 조사가 절실하다는 목소리가 높음
     * NIH 또한 연구자 채용 시 부정행위 기록을 선제적으로 확인하지 않으며, 이는 연구 환경 개선에 도움이 되지 않는다는 지적이 있음
     * 연구 부정행위를 조기에 차단하기 위해서는 전문 소프트웨어를 사용해 이미지 검증을 강화하고, 외부 전문가가 의혹을 평가하는 시스템이 필요함

결론

     * 알츠하이머는 환자·가족·사회를 막론하고 큰 부담을 주는 질환임
     * 연구 부정행위는 이미 제한된 자원과 시간을 낭비하게 하며, 치료법 개발을 더디게 함
     * 학계가 제도와 문화를 개선해 부정행위를 적극적으로 방지하고, 대안적 연구 방향에도 힘을 실어야 함
     * 윤리적 과학 문화 정착과 지속적 검증 노력으로, 알츠하이머의 치료·예방에 더 가까워질 수 있다는 기대가 있음

   대게 이런 부정 행위들은 학술적으로도 꽤 알려진 사람이나 연구기관 등에서 이루어지면, 검증할 필요 없다고 믿거나 검증할 수 있는 기술이 없는(부족한) 경우가 많습니다. 이런 경우 가짜 지식이 퍼져버리면서 잠식되면 큰 비용을 치루게 되죠. 단순히 제도적으로 개선하기 어려운 부분들도 많이 있을 것 같습니다.

   곱씹어 볼수록 심각한 문제입니다.

   탈모, 치매 같이 흔히 볼 수 있으면서 일상에 큰 영향을 끼치눈 질환들은 빨리 해결되었으면 좋겠네요.

   젊은분들은 모르시겠지만, 황우석 박사 사태가 떠오르는군요.

        Hacker News 의견

     * Masliah와 다른 연구자들이 연구 조작을 했다는 압도적인 증거를 읽는 것이 고통스러웠음. 장인어른이 알츠하이머 진단을 받기 전 여러 오진을 겪었고, 이는 그의 직업 상실로 이어졌음. 가족에게 큰 영향을 미쳤으며, 공공 의료 시스템의 지원을 받기까지 시간이 걸렸음.
     * 과학은 CRM 프로세스와 같은 개입이 필요함. 과학계는 데이터 은폐, 출판 압박, 재현 불가능한 결과를 조장하는 게임에 갇혀 있음.
     * 신경기술과 수면 연구에서 알츠하이머에 대한 연구를 진행 중임. 알츠하이머는 단일 질병이 아닐 수 있으며, 여러 질병이 하나의 라벨로 묶여 있을 가능성이 있음. 연구 조작에 대한 조치가 필요함.
     * 많은 과학 논문이 조작된 데이터로 가득 차 있으며, 이를 중요하게 생각하는 사람이 적음. 논문 검증을 위한 인력이 더 필요함.
     * 기사에서는 알츠하이머의 인지 악화를 멈추는 치료법이 없다고 하지만, donanemab과 lecanemab 같은 항아밀로이드 치료법이 약 30%의 감소를 성공적으로 보여줌.
     * 생물학과 의학의 구조적 문제로 인해 알츠하이머 분야에만 국한되지 않음. 독립적인 검토와 자금, 그룹 크기, 이해 충돌에 대한 제한이 필요함.
     * 행동에 결과가 따르는 세상에서 사는 것이 좋음. Marc Tessier-Lavigne가 스탠포드 대학 총장직에서 사임해야 했음.
     * 컴퓨터 과학 분야에서 논문을 검토하는데, 검토자에게는 보수가 없으며, 일부 논문은 조작되었을 가능성이 있음. 이미지 사용이 특정 사기 유형을 감지하는 데 도움이 됨.
     * 기자들이 과학 출판 사기를 폭로하며, 이는 참여를 유도할 수 있음. 그러나 이는 기관에 대한 신뢰를 더 약화시킬 수 있음.
"
"https://news.hada.io/topic?id=18946","비상업적 콘텐츠를 우선시하는 검색 엔진 Marginalia","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    비상업적 콘텐츠를 우선시하는 검색 엔진 Marginalia

     * Marginalia Search 소개
          + Marginalia Search는 비상업적 콘텐츠를 우선시하는 웹 탐색 도구임
          + 오래된 웹사이트를 찾을 수 있는 기능 제공
          + 오픈 소스 프로젝트로, AGPL 라이선스를 따름
          + 사용자 프라이버시를 중시하며, 추적 및 광고 기술을 차단함
     * 기술 및 프라이버시
          + 맞춤형 인덱스 및 크롤러 소프트웨어 사용
          + AI나 클라우드를 사용하지 않는 간단한 기술
          + 사용자 데이터나 검색 데이터를 제3자와 공유하지 않음
          + 쿼리나 IP 주소의 장기 보관을 하지 않음
     * 정책 및 개인정보 보호
          + GDPR을 준수하며, 개인 정보를 수집하지 않음
          + EU 쿠키 지침을 준수하여 서비스 기능 제공 외의 목적으로 쿠키를 사용하지 않음
          + IP 주소를 포함한 접근 로그는 최대 24시간 동안 보관되며, 버그 진단을 위해 익명화된 로그가 더 오래 보관될 수 있음
     * 연락처 및 소스 코드
          + 검색 엔진의 웹마스터는 contact@marginalia-search.com을 통해 연락 가능
          + 소스 코드는 https://git.marginalia.nu/에서 확인 가능
          + IP 지리적 위치 데이터는 IP2Location LITE 데이터를 사용하며, CC-BY-SA 4.0 라이선스를 따름

        Hacker News 의견

     * Marginalia 검색 엔진과 그 알고리즘에 대한 에세이를 작성한 경험이 있음. 초기에는 Personal PageRank를 사용했으나 현재는 BM25로 페이지를 순위 매김. Personal PageRank는 페이지 유사성 기반의 새로운 기능에 사용되고 있음. Marginalia의 성장과 블로그 게시물 읽기가 흥미로움.
     * Marginalia의 창작자는 웹사이트를 search.marginalia.nu에서 marginalia-search.com으로 이전하고 시각적 개선을 함. 여전히 동일한 검색 엔진임.
     * Marginalia는 개인의 열정 프로젝트로 Google, Bing, DDG와 경쟁하려는 것이 아님. ""작은 웹""에서 흥미로운 것을 찾는 방법임. 이를 염두에 두고 확인해야 함.
     * 프로젝트가 HN에 등장할 때마다 기쁨을 느낌. 인내와 사랑으로 무엇을 할 수 있는지를 보여주는 예시임.
     * 현재 DDG에 Marginalia bang 검색이 없다는 점에 놀람. 제안으로 제출함.
     * 사이트 소유자로서 발견된 백링크를 공개하는 점이 특히 좋음. 덕분에 몰랐던 백링크를 발견함.
     * 최근 구글 검색어를 반복해보았고, 모든 경우에 합리적인 답변이 상위에 나옴. 시도해볼 예정임.
     * 웹에서 가장 유쾌하고 유용하며 건전한 프로젝트라고 생각함. 기술이 매우 견고하고 경험이 완벽함. 작성자에게 감사의 말을 전함.
     * 관심 있는 분야의 간단한 용어로 검색했으나 기대한 결과가 나오지 않음. Marginalia는 무언가에 대해 배우고자 할 때는 괜찮지만, 무언가를 찾고자 할 때는 그렇지 않음. 예를 들어 Scott Alexander의 Substack에 대한 사람들의 의견은 얻을 수 있지만, 뉴스레터 자체는 찾기 어려움.
     * 영어 콘텐츠 전용인지 질문함. 프랑스어 쿼리로 시도했으나 관련성 있는 영어 결과만 제공됨.
"
"https://news.hada.io/topic?id=19013","2024년 23억 달러 수익에도 불구하고 연방 소득세를 한 푼도 내지 않은 Tesla","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            2024년 23억 달러 수익에도 불구하고 연방 소득세를 한 푼도 내지 않은 Tesla

     * Tesla의 지난 3년 간 평균 법인세율이 0.4% 수준으로, 법정 법인세율 21%와 비교했을 때 약 50배 낮은 수치임
     * 2024년에는 Tesla가 연방 법인세를 전혀 내지 않았으나, 이 시기에 회사는 23억 달러(2.3 billion 달러)의 이익을 기록
     * 2023년에는 31억 달러(3.1 billion 달러) 이익에 대해 4,800만 달러(48 million 달러)의 세금을 내서, 약 1.5%의 법인세율에 해당
     * 2022년에는 55억 달러(5.5 billion 달러)의 이익을 기록했으나, 법인세율은 0%였음
     * 현재 Tesla는 1.2조 달러(1.2 trillion 달러) 이상으로 평가받고 있음
          + Elon Musk는 세계에서 가장 부유한 인물로 알려져 있으며, 순자산은 4,000억 달러(400 billion 달러) 이상임
          + 2024년에 주주들은 Elon Musk에게 101억 달러(101 billion 달러) 규모의 보상 패키지를 승인했으나, 이는 판사에 의해 기각되었음
     * 미국 세제는 기업과 고소득층에 유리하게 설계되어 있어, Musk 같은 초고액 자산가들이 일반인보다 훨씬 낮은 세율을 적용받는 결과를 낳음
          + 일부 세금 공정성 옹호 단체는 현행 법이 충분히 집행되지 않아, 억만장자들이 세법 준수를 ‘선택’처럼 여기게 만들고 있다고 주장함
     * Tesla는 가속상각(accelerated depreciation)을 이용해 약 5억 달러(500 million 달러)의 세금을 줄였음
          + 이는 자산 가치가 실제로 떨어지는 속도보다 빠르게 비용처리를 허용하는 제도임
     * Tesla는 추가로 ‘불특정한 U.S. tax credits’를 통해 약 3억 달러(300 million 달러)의 세액을 낮췄음
     * 2017년 도입된 Tax Cuts and Jobs Act는 법인세율을 35%에서 21%로 낮추고, 가속상각 제도를 확대했음
          + 이로 인해 미국 상위부유층의 자산이 급격히 증가하며 부의 불평등이 심화되었음
          + Donald Trump와 공화당(GOP)은 차기 임기에서도 법인세 인하 및 기업 친화 정책을 강화하겠다는 입장을 밝혔음
          + 그러나 일부 연구에 따르면 Trump의 세금 정책은 상위 5% 고소득층에게 더 큰 혜택을 주는 반면, 노동계층의 세금 부담은 오히려 늘어날 수 있음
     * Tax Cuts and Jobs Act에 따른 대규모 감세 혜택을 더 확장하려는 논의가 진행 중임
          + 공화당 일각에서는 법인세를 15%로 낮추는 방안을 검토하는데, 이를 위해 노동계층 대상 혜택을 줄이는 옵션이 제시되고 있음
          + 이런 변화가 적용될 경우 Tesla 같은 대기업은 또다시 혜택을 누릴 가능성이 높음
     * Institute on Taxation and Economic Policy(ITEP)에 따르면, 일부 초당적 법안에서는 기업이 ‘연구’로 간주하는 항목에 대한 정의를 광범위하게 설정해 세제 혜택을 주는 방안이 제시되었음
          + 이 법안이 통과될 경우 기업들이 실제 연구 범위를 넘어서는 비용까지 절세 대상으로 삼을 수 있게 될 우려가 있음

        Hacker News 의견

     * 한 사용자는 기사에 편향된 톤이 아쉽다고 하며, 더 잘 이해하고 싶어함
          + 기사에서 $500M의 세금 절감과 $300M의 세금 공제를 언급함
          + $1.5B에 대한 설명이 부족하다고 지적함
          + 가속 감가상각이 무엇인지 잘 모르지만, 표면적으로는 연기된 해에 더 많은 세금을 내야 하므로 부정행위로 보이지 않음
          + 전기차 회사에 대한 세금 공제는 타당하다고 생각함
          + 미국의 연방 법인세율은 21%이며, $300M의 세금 공제는 세후 금액임
          + $500M은 세전 공제임
          + $78M의 세금을 내지 않은 이유를 설명할 수 없지만, 반올림과 기타 요인 때문이라고 추정함
          + 전기차 세금 공제를 부정적으로 보는 시각에 대해 비판적임
          + 전기차 회사의 미국 내 창출을 장려하는 것에 찬성함
     * 다른 사용자는 Tesla가 오바마 시대의 보조금 덕분에 생존했다고 언급함
          + 오바마가 Elon을 만들었다고 주장함
          + PPACA로 인해 미국 의료비가 증가했다고 비판함
     * 또 다른 사용자는 가속 감가상각이 한 해에 세금을 적게 내고 이후 해에 더 많이 내는 전략이라고 설명함
          + 이 법이 암시하는 ""세금을 전혀 내지 않는"" 것보다는 덜 악의적이라고 생각함
     * 한 사용자는 회사가 모든 수익을 사업에 재투자하기 때문에 세금을 적게 낸다고 이해함
          + 돈이 경제에 투입되는 것이 더 낫다고 생각함
     * Sharon Zhang이 기업 세금에 대한 경험이 없다고 언급함
     * 개인도 기업처럼 재투자할 수 있는지에 대한 질문을 던짐
     * Tesla의 수익이 $2.3B로 Meta의 $62.3B에 비해 작다고 놀람
          + Tesla가 미디어 주목과 주식 평가에 비해 작다고 생각함
          + 다른 자동차 제조업체와 비교해도 작다고 언급함
     * Dave Chappelle의 스킷을 떠올리며 시스템이 조작되어 있다고 주장함
"
"https://news.hada.io/topic?id=18919","뉴욕 지하철역 출발 40분 이동 가능 거리 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       뉴욕 지하철역 출발 40분 이동 가능 거리 분석

     * NYC Subwaysheds
          + 뉴욕시의 각 지하철역에서 40분 내에 얼마나 멀리 갈 수 있는지를 보여주는 지도임
          + 지하철과 도보로 40분 내에 접근 가능한 도시의 범위를 확인할 수 있음
     * 사용 방법
          + 역 위에 마우스를 올리면 해당 역에서 접근 가능한 도시의 범위를 볼 수 있음
          + 역을 클릭하면 해당 범위가 고정됨
     * 접근 가능한 지역
          + 각 지하철역에서 출발하여 40분 내에 도달할 수 있는 지역을 시각적으로 제공함

        Hacker News 의견

     * 50만 명 이상의 인구가 있는 도시는 지하철 노선이 있어야 한다고 생각함. 지하철이 있으면 언제든지 평균 속도로 이동할 수 있는 장점이 있음
          + 지하철 근처 지역은 차량 수가 절반으로 줄어드는 경향이 있음
     * 데이터 시각화 기술이 발전했음을 보여주는 좋은 예시임. Edward Tufte의 1983년 그리드 차트와 비교할 때 더 창의적인 접근 방식으로 보임
     * 특정 대중교통 시스템의 모든 정류장을 방문하는 데 걸리는 시간을 측정하는 것이 흥미로움. BART 시스템에서는 여러 사람이 시도하고 있으며, 공식 웹사이트에서도 관련 기사를 유지하고 있음
     * 시각적으로 매력적이고 흥미로운 사이트임. 하지만 여러 번 환승이 필요한 경우 결과에 대해 약간 회의적임. 10년 전의 경험을 바탕으로, 피크 시간대에는 20분 내에 환승이 가능했음
     * 기술 용어로는 등시선 지도(isochrone map)라고 함
     * 7번가 라인(1, 2, 3번 열차)에서 18번가와 14번가의 반경이 비슷하지만, 14번가는 더 편리함. 1, 2, 3번 열차가 모두 운행되며, 2, 3번은 급행임
     * Jet Lag: The Game의 홈 게임에 유용한 정보임
     * 지하철이 뉴저지까지 확장되지 않은 것은 비효율적인 구조를 보여줌
     * 퀸즈에 사는 사람으로서, 이 사이트가 20%에서 30% 정도 과소평가하고 있다고 생각함
     * 뉴욕에 살고 있는 사람으로서, 이 시간들이 낙관적으로 보임
"
"https://news.hada.io/topic?id=18937","HN 공개: DeepSeek 사용자 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        HN 공개: DeepSeek 사용자 에이전트

     * DeepSeek R1 소개
          + DeepSeek R1은 사용자가 사고 과정을 이해할 수 있도록 돕는 새로운 모델 및 서비스임
          + 사용자는 chat.deepseek.com에서 무료로 실시간으로 사용할 수 있으며, platform.deepseek.com API를 통해 저렴한 비용으로 이용 가능함
          + ""Judge Me"" 기능을 통해 사용자 에이전트, 브라우저 기능, IP 위치 헤더에 대한 모델의 평가를 확인할 수 있음

        Hacker News 의견

     * 사용자가 구형 Mac OS 10.15을 사용하고 있음이 언급되었음. 이는 2019년 출시된 Catalina로, 다소 오래된 운영체제임.
          + 화면 해상도가 1024x1366으로, 일반적인 해상도보다 세로로 긴 비율을 가짐. 이는 구형 iPad를 세로 모드로 사용하거나 화면을 회전시킨 것으로 추측됨.
          + 사용자가 직접 URL을 입력하여 사이트에 방문했음을 언급하며, 캐나다 캘거리의 위치와 연결하여 농담을 던짐.
     * 사용자가 iPad를 사용하고 있으며, 운영체제에 대한 추측이 잘못되었음을 지적함. iOS 17을 사용 중이며, Mac OS 10.15은 최신 버전이 아님.
     * 덴마크어 설정을 사용 중인 Croydon의 사용자가 코펜하겐으로 VPN을 사용하여 비싼 페이스트리를 구매한다는 농담이 재미있었음.
     * 사용자가 Hacker News에서 46초 동안 머물렀으며, Chrome과 Linux OS를 사용 중임. San Jose에서 기술을 다루는 모습이 언급됨.
          + 8.1 Mbps의 느린 다운로드 속도와 ""Blink""가 Mountain View의 레이브가 아니라는 사실을 깨닫는 속도가 비슷하다는 농담이 있음.
          + 사용자가 ""sudo"" 명령어를 사용하여 냉장고를 여는 것처럼 보인다는 농담이 추가됨.
     * 사용자의 휴대폰 모델이 ""K""로 매우 일반적이며, 북마케도니아에서 얇은 화면을 사용 중임. 미스터리한 참조자가 Google Maps조차 포기한 것처럼 보인다는 농담이 있음.
     * Chrome이 macOS에서 OS X 10.15.7(Catalina)으로 보고되는 것에 대한 혼란이 있었음. 다른 사양과 맞지 않음에도 불구하고 구형 OS를 실행 중임.
     * Hackney에서 수동으로 URL을 입력하는 사용자가 1920x1200 화면을 사용 중임. Linux 터미널을 위해 추가적인 세로 픽셀이 필요하다는 농담이 있음.
          + 8개의 CPU 코어와 참조자가 없는 것이 NPC 행동이라는 농담이 있음.
     * iOS 18.2.1 ""Midlife Crisis Edition""을 사전 주문했지만 ""Mobile Safari""를 아이러니 없이 사용하는 사용자가 있음.
     * 사용자가 30비트 색상 깊이를 사용하며, Mac OS 10.15.7을 터키 리라처럼 고수하고 있음. Hacker News에서 3초 동안 머물다가 패닉 클릭을 했다는 농담이 있음.
     * POST 요청이 504 오류를 반환하며, 배포 중 오류가 발생했음을 언급함.
"
"https://news.hada.io/topic?id=19030","HN 공개: ESP32 RC 자동차","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN 공개: ESP32 RC 자동차

  ESP32 RC Cars

    데모 비디오

     * 이 프로젝트는 ESP32 기반 원격 제어 카메라 시스템을 시연함
     * WebSockets를 통해 실시간 비디오 스트림을 전송하고 모터와 서보를 제어할 수 있음
     * Python 서버 애플리케이션이 WebSocket 통신을 관리하고 ESP32 장치를 제어할 수 있는 웹 인터페이스를 제공함

    기능

     * ESP32-CAM에서 웹 서버로 실시간 비디오 스트리밍
     * WebSocket 명령을 통한 모터와 서보의 원격 제어
     * 모터와 서보를 기본 상태로 재설정하는 자동 타임아웃 기능
     * 서버에서 동적 다중 클라이언트 비디오 피드 캔버스 제공

    하드웨어 요구 사항

     * ESP32-CAM (AI Thinker 모듈 또는 호환 보드)
     * 적절한 GPIO 핀에 연결된 모터와 서보
     * ESP32-CAM을 위한 안정적인 5V 전원 공급
     * 선택 사항: 추가 기능을 위한 SD 카드
     * 통신을 위한 Wi-Fi 네트워크

    재료

     * 모든 키트는 aliexpress에서 구매 가능
     * 자동차 섀시, 전자 속도 제어기, 배터리 홀더, 18650 셀 또는 7.4v 배터리 팩, ESP32-CAM, 블루투스 게임패드(PS4 컨트롤러 사용)

    소프트웨어 요구 사항

      ESP32 코드

        라이브러리

     * WiFi.h: Wi-Fi 연결
     * ArduinoWebsockets.h: WebSocket 통신
     * esp_camera.h: ESP32-CAM 카메라 제어
     * ServoControl.h 및 Esc.h: 서보와 모터 제어
     * Arduino.h: 표준 Arduino 함수

      Python 서버

        종속성

     * 다음 Python 라이브러리 설치: aiohttp, opencv-python, numpy

    설정

      ESP32 펌웨어

    1. secrets.h 파일을 수정하여 Wi-Fi 자격 증명 및 WebSocket 서버 URL 포함
    2. 카메라 모듈, 모터, 서보의 GPIO 핀이 하드웨어 설정과 일치하는지 확인

      Python 서버

    1. 웹 인터페이스를 위한 index.html 파일과 함께 서버 스크립트를 디렉토리에 배치
    2. 서버 시작: python3 server.py

    사용법

      ESP32

    1. Arduino IDE 또는 호환 플랫폼을 사용하여 제공된 스케치를 ESP32-CAM에 업로드
    2. Wi-Fi 및 WebSocket 서버에 성공적으로 연결되었는지 직렬 출력을 모니터링

      서버

    1. Python 서버 스크립트 실행
    2. 브라우저에서 웹 인터페이스를 열어 실시간 비디오 스트림 보기
    3. WebSocket 연결을 통해 제어 명령 전송

    WebSocket 명령

     * MOTOR:<speed>: 모터 속도 설정 (-255에서 255)
     * SERVO:<angle>: 서보 각도 설정 (0에서 180)
     * CONTROL:<speed>:<angle>: 모터 속도와 서보 각도를 동시에 제어

    기술적 세부사항

      ESP32 초기화

     * Wi-Fi: 지정된 Wi-Fi 네트워크에 연결
     * 카메라: 비디오 스트리밍을 위한 적절한 설정으로 ESP32-CAM 구성
     * WebSocket: 서버와 WebSocket 연결 설정

      타임아웃 처리

     * 미리 정의된 타임아웃 기간 내에 제어 명령이 수신되지 않으면 모터 속도는 0으로, 서보 각도는 90으로 재설정

      Python 서버

     * 여러 ESP32 클라이언트와의 WebSocket 통신 처리
     * 수신된 비디오 프레임을 처리하고 동적으로 그리드에 배열
     * 비디오 프레임 그리드를 웹 인터페이스로 스트리밍

    문제 해결

      연결 문제

     * secrets.h에서 Wi-Fi 자격 증명 확인
     * WebSocket 서버가 실행 중이고 접근 가능한지 확인

      비디오 스트림 문제

     * ESP32-CAM에 적절한 전원 공급 확인
     * 카메라 초기화 설정 확인

    라이선스

     * 이 프로젝트는 MIT 라이선스 하에 오픈 소스로 제공됨

    기여

     * 애플리케이션 개선을 위한 이슈 제출이나 풀 리퀘스트 환영

        Hacker News 의견

     * 12년 전, Arduino는 있었지만 ESP32는 없던 시절에 HTC Magic 폰을 사용해 카메라와 WiFi 송신기로 활용하고, Arduino와 연결하여 서보와 RGB LED를 제어하는 프로젝트를 진행했음. 연결이 안정적이지 않았지만 재미있었음
          + 프로젝트를 공유해줘서 고맙고, 차세대 마이크로컨트롤러로 프로젝트를 부활시키고 싶음
          + 프로젝트에 대한 피드백에 감사하며, 계속 진행하고 싶고 PR을 보고 싶음
          + 프로젝트를 좋아한다면, 원격 개발자를 찾는 사람에게 소개해주면 좋겠음. Ruby-on-Rails 개발자이지만 로봇 공학 작업도 고려 중임
     * RC 자동차 자동화에 관심이 있다면 재미있는 읽을거리임. 몇 년 전 자료이지만 오늘날에는 더 쉬운 방법이 있을 수 있음
     * ESP32 CAM을 구매하기 전에 외부 안테나가 있는 것을 고려하는 것이 좋음. Reddit에서 프레임 속도 문제에 대한 조언을 참고했음
     * 최근 Rust와 Steam Deck을 사용하여 비슷한 프로젝트를 진행했음
     * FPV의 큰 문제는 지연 시간이며, 이 프로젝트의 지연 시간이 궁금함
     * ESP32로 구동되는 RC 탱크를 PlayStation 4 컨트롤러로 Bluetooth를 통해 제어했음
          + 기본 소프트웨어는 약 20줄의 C 코드로 시작하며, Bluetooth 컨트롤러 라이브러리를 사용함
          + 두 개의 스틱으로 두 트랙을 저속으로 제어할 수 있지만, 고속에서는 다른 제어 방법이 필요함
          + 듀얼 쇼크 컨트롤러의 ""트리거""를 사용하여 rpm 제한 직접 트랙 제어를 구현했음
          + 고속 운전 시 왼쪽 스틱은 스로틀, 오른쪽 스틱은 조향으로 사용하여 일반 RC 자동차처럼 운전할 수 있음
          + 사용한 3D 프린트 모델의 동영상을 공유함
     * AliExpress에서 좋은 2.5인치 RC 자동차는 30달러, 독립형 5.8 GHz 아날로그 카메라는 25달러임
          + 단순히 재미있는 프로젝트가 아닌 결과에 더 관심이 있는 사람들을 위한 정보임
     * 비슷한 프로젝트를 고려 중이며, 지연 시간에 대한 경험이 궁금함. 비디오 피드를 보고 원격으로 제어할 수 있는지 알고 싶음. 장애물 회피에 지연 시간이 문제일 것 같음
     * 자동으로 장애물을 피하는 고양이 장난감을 만들고 싶었음. 이 프로젝트가 기존에 선택한 것보다 더 나은 기반이 될 수 있을 것 같음
"
"https://news.hada.io/topic?id=18974","아니오, 나는 AI가 나를 "다듬는(polish)" 것을 원하지 않아요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                아니오, 나는 AI가 나를 ""다듬는(polish)"" 것을 원하지 않아요

     * 이메일을 보내던 중 ""다듬기(polish)""라는 마법 지팡이 아이콘이 나타남. 처음에는 이메일을 ""폴란드어(Polish)로 번역""한다는 뜻인 줄 알았음.
     * 클릭해서 없애려 했지만, 이메일 전체가 자동으로 바뀌었음. AI가 내 이메일을 다듬어야 한다고 판단한 것 같음
     * 문제는, 수정된 이메일이 본인의 말투와 너무 달라져 납치된 사람처럼 보일 정도였음
     * AI 수정이 마음에 들지 않아 원래 문장을 복구했으나, 다시 ""Polish"" 버튼 등장해서, AI가 문장을 매끄럽게 고친 버전을 또다시 제안
     * 내 이메일은 항상 오타와 장황한 설명, 늦은 답변에 대한 사과로 가득 차 있음. 이것이 나라는 것을 알리는 방식임
     * AI의 제안을 계속 거절하면 AI가 나의 나쁜 예절을 학습하고 전파할 것이라는 희망이 있음
     * 블로그에 사진을 삽입하려고 할 때도 AI가 자동으로 이미지를 생성하려고 시도함
     * AI가 나보다 더 잘할 수 있다고 생각해서 ""AI 그만 줘""라는 프롬프트를 입력해 봤지만, 결과는 실망스러웠음
     * 결론적으로, AI의 개입은 불편하고 짜증스러움

        Hacker News 의견

     * 컴퓨터가 자꾸 방해하는 느낌이며, Adobe Reader 같은 소프트웨어가 과도한 기능을 제안함.
          + AI가 메시지를 왜곡하고 있으며, 원래 의미를 잃어버림.
          + AI가 생성한 이메일은 원본과 다르며, 스타일 전환이 실패한 사례임.
     * 소셜 미디어에서 많은 사람들이 가짜 이미지를 보여주는 것을 문제로 봄.
          + AI 사용 여부는 작업에 대한 감정에 따라 달라짐.
          + 고객과의 소통에서는 진정성을 중요시하며, 개인적인 표현을 선호함.
          + 주간 회의는 ChatGPT를 통해 간단히 처리함.
     * AI ""다듬기"" 도구는 불필요한 형식으로 정보를 과장함.
          + 수신자가 AI 요약 도구를 사용하여 추가된 형식을 제거할 가능성이 높음.
          + 개인의 독특한 표현 방식이 사라질 위험이 있음.
     * 디지털 문화가 이미 가식적이며, AI 도구가 이를 더 악화시킴.
          + LLMs가 혁신적이지만, 제품 관리자들이 상상력이 부족하다고 느껴짐.
          + 90년대 웹 페이지에 GIF를 과도하게 사용했던 시기를 떠올리게 함.
     * Siri가 잘못된 앨범을 재생하여 실망스러웠던 경험을 공유함.
          + AI 생성 이메일을 무시하는 기능이 필요하다고 주장함.
          + 언어 번역은 유용할 수 있지만, 대부분의 사람들에게는 불필요함.
"
"https://news.hada.io/topic?id=19016","지구별 – 개인 분산형 오프라인 우선 애플리케이션을 위한 Earthstar 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            지구별 – 개인 분산형 오프라인 우선 애플리케이션을 위한 Earthstar 데이터베이스

     * Earthstar란?
          + Earthstar는 사용자 소유의 연결된 애플리케이션을 구축하기 위한 사양 및 JavaScript 라이브러리임.
          + 개인적이고 분산된 오프라인 우선 애플리케이션을 위한 데이터베이스임.
     * 작동 방식
          + 오프라인에서도 작동하며, 음악, 사진, 비디오를 저장할 수 있음.
          + 실제로 데이터를 삭제할 수 있으며, 임시 문서와 실시간 동기화 기능을 제공함.
          + 하나 또는 여러 개의 정체성을 사용할 수 있으며, 스니커넷을 지원함.
          + 항상 자체 호스팅되며, 서버는 선택 사항임.
          + 블록체인이나 토큰을 사용하지 않으며, 영원히 무료임.
          + ed25519를 사용한 검증을 지원하며, 브라우저에서도 작동함.
          + 읽기 전용 접근 권한을 부여할 수 있으며, 효율적인 동기화와 스트리밍 동기화를 제공함.
          + 여러 기기에서 하나의 정체성을 사용할 수 있음.
          + 다중 작성자, 저장 드라이버, 문서 작성 권한을 지원함.
          + Deno와 Node 환경에서 작동함.
     * 프로젝트의 중요성
          + 이 프로젝트는 NLnet의 NGI Assure Fund의 지원을 받아 유럽연합의 차세대 인터넷 프로그램의 재정 지원을 통해 개발되었음.
"
"https://news.hada.io/topic?id=19021","Input Source Pro - 앱 마다 기본 언어 지정해주는 앱 (macOS)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Input Source Pro - 앱 마다 기본 언어 지정해주는 앱 (macOS)

   예를 들어 터미널을 열면 기본으로 영어가 입력되도록 세팅 가능

   여러 언어를 번갈아 사용할 때 유리한 세팅을 만들 수 있음

   쓰다보니 알게 된 짜잘한 장점이 있는데, 커서가 있는 곳에 현재 입력 언어가 뭔지 잠깐 팝업으로 보여줘서 전 좋았어요

   저는 한글 영어 각각 다른 키로 매핑해서 사용하는데 가끔 씹히는게 있지만 잘 사용하고 있습니다

   오 신기하네요

   저는 그냥 기본 ""Automatically switch to a document's input source"" 옵션 켜고 쓰는데 크게 불편함은 없는 상태네요. 무조건 특정 앱으로 갈 때 바뀌길 원하는 분들에게는 이 앱이 유용하겠네요.

   오 이런 옵션이 있네요! 감사합니다
"
"https://news.hada.io/topic?id=18985","2032년 지구 소행성 충돌 가능성 1% 및 8Mt 에너지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2032년 지구 소행성 충돌 가능성 1% 및 8Mt 에너지

지구 충돌 모니터링 소개

     * Sentry는 지구에 충돌할 가능성이 있는 천체를 모니터링하는 시스템임.
     * 이 시스템은 Torino 및 Palermo 척도를 사용하여 잠재적 위험을 평가함.
     * 각 천체의 충돌 가능성과 관련된 평균값을 제공함.

(2024 YR4) 지구 충돌 위험 요약

     * Torino 척도 (최대): 3
     * Palermo 척도 (최대): -0.53
     * Palermo 척도 (누적): -0.53
     * 충돌 확률 (누적): 1.4e-2
     * 잠재적 충돌 횟수: 6
     * 충돌 탐색 기법: IOBSVimpact
     * 충돌 속도: 17.32 km/s
     * 무한 속도 (Vinfinity): 13.26 km/s
     * 절대 등급 (H): 24.0
     * 직경: 0.055 km
     * 질량: 2.2e+8 kg
     * 에너지: 8.0e+0 Mt
     * 분석 기반: 261개의 관측, 35.856일 동안 (2024-12-25 ~ 2025-01-30)

충돌 테이블

     * 2032-12-22.59: 충돌 확률 1.3e-2, 에너지 7.982e+00 Mt, Palermo 척도 -0.53, Torino 척도 3
     * 2039-12-23.35: 충돌 확률 1.2e-6, 에너지 7.989e+00 Mt, Palermo 척도 -4.84, Torino 척도 0
     * 2043-12-23.15: 충돌 확률 1.3e-7, 에너지 7.943e+00 Mt, Palermo 척도 -5.92, Torino 척도 0
     * 2047-12-22.05: 두 번의 관측, 충돌 확률 각각 2.3e-6 및 3.8e-7, 에너지 7.773e+00 Mt, Palermo 척도 -4.76 및 -5.55, Torino 척도 0
     * 2071-06-22.71: 충돌 확률 6.9e-9, 에너지 7.969e+00 Mt, Palermo 척도 -7.59, Torino 척도 0

데이터 사용 방법

     * 테이블 데이터를 인쇄하거나 CSV 및 Excel 형식으로 다운로드 가능함.
     * 대량 데이터셋 다운로드 시 몇 초가 소요될 수 있음.
     * 기계 판독 가능한 데이터는 API 문서를 참조하여 사용 가능함.

        Hacker News 의견

     * Near Earth Object Surveyor 망원경에서 시뮬레이션 코드를 작성하고 있으며, 이 코드로 어떤 천체를 관측할 수 있을지 예측함
          + 이번 천체는 충돌 가능성이 상대적으로 높아 관심을 끌고 있음
          + 과거 지구 근처를 지나갔을 때 관측된 적이 있는지 확인하려 했으나 실패함
          + 궤도에 대한 정보가 부족하여 2016년으로 시뮬레이션을 돌렸을 때 하늘의 큰 영역에 위치할 수 있었음
          + NEO Surveyor로 2032년 근접 조우 전에 다시 관측할 가능성이 높음
          + LSST 망원경도 비슷한 시기에 관측할 수 있을 것으로 예상됨
     * 천체의 직경에 대한 정보가 불확실하며, 표면 반사율 때문에 작은 반짝이는 물체가 큰 어두운 물체처럼 보일 수 있음
          + NEO Surveyor를 IR 망원경으로 만든 이유 중 하나는 IR로 물체의 크기에 의존하는 흑체 방출을 볼 수 있기 때문임
     * 2032년에 지구를 놓치면 달에 충돌할 가능성도 있음
          + 몬테카를로 시뮬레이션에서 몇 번 충돌한 적이 있음
     * 궤도 역학에 관심 있는 사람들을 위해 관측 예측에 사용하는 엔진의 일부를 오픈 소스로 공개함
          + JPL Horizons가 더 정확한 중력 모델을 가지고 있어 충돌 연구에 더 적합함
          + 내 코드는 주로 망원경에서 물체가 관측될 시기를 예측하는 데 사용됨
     * 팔레르모 척도에서 -0.56로, 기본 위험 수준을 초과하지 않음
          + 새로운 망원경이 온라인으로 가동되면 탐지 건수가 급격히 증가할 것이며, 미디어가 이를 잘 흡수하지 못할 것이라고 생각함
     * 토리노 척도에 따르면 ""지역적 파괴""의 위험만 있음
          + 퉁구스카 사건은 5MT 폭발로 약 2000 평방 킬로미터를 평탄화했으며, 바다에 충돌하면 큰 쓰나미를 일으킬 수 있음
     * 2032년 마야 예언과 2024 YR4는 인터넷에서 종말론적 컬트의 연료가 될 수 있음
          + 2032년부터 2052년까지 큰 지구 변화가 일어날 수 있다고 예언함
     * 충돌 확률이 1%이지만, 충돌 시점에 대해 더 확실하지 않냐는 의견이 있음
          + 인류가 하루 동안 보호받을 수 있는 지역으로 이동할 수 있지 않냐는 질문이 제기됨
     * 북마크해 놓고 싶다는 의견이 있음
"
"https://news.hada.io/topic?id=19038","Show GN: RTX-Upscaler – NVIDIA RTX 기반 실시간 AI 이미지 업스케일링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: RTX-Upscaler – NVIDIA RTX 기반 실시간 AI 이미지 업스케일링

   안녕하세요, Geek News 여러분!

   최근 개발한 RTX-Upscaler를 소개합니다.
   이 프로그램은 NVIDIA RTX GPU의 Tensor 코어를 활용하여 실시간으로 이미지를 고해상도로 변환하는 AI 업스케일링 도구입니다.

   🎯 주요 기능
     * 실시간 AI 업스케일링: 즉각적인 이미지 품질 향상
     * 고품질 결과: 디테일을 유지하면서 노이즈와 아티팩트 감소
     * 간편한 사용법: CLI 및 GUI 모두 지원

   🆓 무료 체험 & 🔓 무제한 버전

   GitHub에서 60초 제한이 있는 무료 체험판을 다운로드할 수 있으며, 무제한 버전은 별도 구매 가능합니다.

   📌 프로젝트 링크: https://github.com/abus-aikorea/rtx-upscaler

   💬 피드백이나 개선 아이디어가 있다면 언제든지 환영합니다! 😃

   RTX-VSR 데모영상 (좌:저화질 - 우:업스케일)
   You Call It Love (from L étudiante) - Demo for NVIDIA RTX Video Super Resolution: https://youtu.be/HXomwoKS3V4
   A-ha • “Take On Me” • 1985 [Reelin' In The Years Archive] - Demo for NVIDIA RTX VideoSuperResolution: https://youtu.be/cZPSTTsmHxI
"
"https://news.hada.io/topic?id=19001","애플, 미국 vs. 구글 소송 피고 참여 긴급 신청 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   애플, 미국 vs. 구글 소송 피고 참여 긴급 신청 [pdf]
"
"https://news.hada.io/topic?id=18921","2024년 Vanguard의 Bitcoin ETF 부재","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     2024년 Vanguard의 Bitcoin ETF 부재

     * 비트코인 ETF에 대한 Vanguard의 입장
          + 최근 비트코인 ETF의 도입이 주목받고 있으나, Vanguard는 자체 비트코인 ETF나 기타 암호화폐 관련 제품을 출시할 계획이 없음. 또한, 다른 발행사의 암호화폐 관련 제품도 Vanguard의 중개 플랫폼에서 제공되지 않을 것임.
     * Vanguard의 암호화폐 관련 제품 미제공 이유
          + 암호화폐의 투자 가치: Vanguard는 암호화폐가 장기 포트폴리오에 적합하지 않다고 판단하고 있으며, 암호화폐는 투기적 성격이 강하다고 보고 있음.
          + 블록체인 기술: 암호화폐의 기반 기술인 블록체인에는 많은 관심을 가지고 있으며, 자본 시장의 효율성을 높일 수 있는 다양한 용도에 대해 연구 중임.
     * Vanguard의 투자 철학
          + 장기 투자자 중심: Vanguard는 장기적이고 보유 중심의 투자자들을 위해 설계된 플랫폼을 운영하고 있음.
          + 투자 상품의 신중한 선택: 과거 인터넷 펀드와 같은 투자 트렌드에도 불구하고, Vanguard는 투자자들의 장기적 필요에 부합하는지를 항상 고려하여 상품을 선택함.
     * 암호화폐의 변동성과 위험
          + 비트코인의 변동성: 최근 3년 동안 비트코인의 가격은 최대 150% 상승하고 77% 하락하는 등 극심한 변동성을 보였음. 이러한 변동성은 포트폴리오의 위험 프로필을 크게 높일 수 있음.
          + 투자자의 장기적 성공: Vanguard는 투자자들이 더 많이 저축하고, 덜 거래하며, 장기적 접근을 취하도록 돕는 것을 목표로 함.
     * 과거의 유사한 결정
          + 레버리지 및 역방향 펀드: 2019년에는 레버리지 및 역방향 펀드와 ETF에 대한 접근을 제거했으며, 2022년에는 대부분의 장외 주식 제공을 중단함. 이러한 결정은 투자자 보호를 위한 것임.
     * Vanguard의 철학과 미션
          + 일관된 철학: Vanguard는 투자자들에게 최고의 투자 성공 기회를 제공하기 위한 미션을 가지고 있으며, 암호화폐에 대한 결정도 이러한 철학에 부합함.

        Hacker News 의견

     * Vanguard는 암호화폐를 투기 대상으로 보고, 자체적으로 암호화폐 상품을 제공하지 않기로 결정함. 주식은 회사의 지분을 소유하고, 채권은 이자 수익을 제공하며, 상품은 실물 자산으로서 인플레이션 헤지 역할을 함. 반면, 암호화폐는 경제적 가치가 없고 포트폴리오에 혼란을 초래할 수 있는 미성숙한 자산군임
     * Vanguard의 장기적 투자 목표에 충실한 결정에 찬사를 보냄. 10년 이상 고객으로서 자랑스러움
     * Vanguard는 1990년대 인터넷 펀드를 놓쳤지만 괜찮다고 생각함. Vanguard에 돈을 넣는 이유는 최신 트렌드를 따르기 위함이 아님
     * 암호화폐는 거래 수수료를 비트코인, 이더리움, 솔라나 등으로 지불해야 하는 경우 실제 사용 가치를 가질 수 있음. 그러나 현재는 투기에 의해 주도되고 있음
     * 블록체인에는 유용한 서비스가 있지만, 대부분은 투기를 촉진하는 역할을 함. 암호화폐의 가격은 투기에 의해 결정됨
     * 암호화폐의 기술 혁신은 현재의 '암호화폐' 현상과 거의 무관함. 미래에는 암호화폐가 실제 가치를 제공할 수 있는 세계가 있을 수 있음
     * 비트코인의 가격 변동은 투기적이며, 3년 동안 최대 150% 상승하고 77% 하락한 적이 있음. 비트코인은 투자보다는 투기임
     * 평균 투자자는 투기적 자산에 대부분의 돈을 투자하지 않아야 함. 그러나 소액을 좋아하는 것에 투자하는 것은 재미를 더할 수 있음
     * Vanguard ETF를 구매할 때 제공자나 Vanguard가 문제가 생길 경우의 위험을 고려해야 함. 영국에서는 FSCS 85k 보장이 적용되지 않는 경우가 있음
     * 암호화폐 세계에는 많은 사기가 있지만, 조용한 혁명이 진행 중임. 주류 금융 기관은 암호화폐로 인한 변화를 이해하지 못함
     * 비트코인은 금과 비교되며, 금의 가치는 투기에 의해 주도됨. 장기적으로 금은 부를 보존했으며, 비트코인도 그럴 가능성이 있음
     * 전통적인 포트폴리오에서 비트코인은 1-2% 할당으로 전체 포트폴리오 위험에 기여함.
"
"https://news.hada.io/topic?id=18986","Beszel - 셀프호스트 가능한 경량 서버 모니터링 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Beszel - 셀프호스트 가능한 경량 서버 모니터링 플랫폼

     * Docker 통계, 이력 데이터, 알림 기능 제공
     * 직관적인 웹 인터페이스와 간단한 설정으로 ""바로 사용 가능""
     * 자동 백업, 멀티 사용자 지원, OAuth 인증, REST API 액세스를 제공
     * 주요 기능
          + 경량으로 다른 솔루션들보다 더 작고 자원 소모가 적음
          + 간단함: 공용 인터넷 노출 불필요, 빠른 설치 및 사용 가능
          + Docker 통계: 각 컨테이너의 CPU, 메모리, 네트워크 사용 이력을 추적
          + 알림 기능: CPU, 메모리, 디스크, 대역폭, 온도 및 상태에 대해 사용자 정의 알림 설정 가능
          + 멀티 사용자: 각 사용자는 자신의 시스템을 관리, 관리자는 시스템 공유 가능
          + OAuth / OIDC 지원: 여러 OAuth2 제공자와 호환, 비밀번호 인증 비활성화 가능
          + 자동 백업: 디스크 또는 S3 호환 스토리지로 데이터 저장 및 복원
          + REST API: 스크립트나 애플리케이션에서 데이터 활용 및 업데이트 가능
     * 아키텍처: 두 가지 주요 컴포넌트
          + Hub:
               o ""Pocketbase: SaaS/앱을 위한 오픈소스 리얼타임 백엔드 "" 기반 웹 애플리케이션
               o 대시보드에서 연결된 시스템의 상태를 조회 및 관리
          + Agent:
          + 모니터링하려는 각 시스템에서 실행
          + 최소한의 SSH 서버를 통해 Hub로 시스템 메트릭 전송
     * 지원 메트릭
          + CPU 사용량: 호스트 시스템 및 Docker / Podman 컨테이너
          + 메모리 사용량: 호스트 시스템 및 컨테이너, 스왑 및 ZFS ARC 포함
          + 디스크 사용량: 호스트 시스템의 여러 파티션 및 장치 지원
          + 디스크 I/O: 호스트 시스템의 여러 파티션 및 장치 지원
          + 네트워크 사용량: 호스트 시스템 및 컨테이너
          + 온도: 호스트 시스템 센서
          + GPU 사용량 / 온도 / 전력 소비량: Nvidia 및 AMD 지원 (바이너리 에이전트 필요)

   좋네요

   우왕 좋네요

   beszel 잘 쓰고 있습니다
"
"https://news.hada.io/topic?id=19011","CDC 데이터 소실 현상데이터 소실 현상

     * CDC 데이터가 사라지고 있음
          + 최근 과학자들은 CDC 웹사이트에서 데이터를 다운로드하라는 경고를 받았음. 이는 트럼프 행정부의 정책에 따라 성별, DEI, 접근성 관련 언급을 삭제하려는 시도 때문임.
          + 바이러스학자인 Angela Rasmussen은 CDC 데이터를 사용하여 바이러스 발병을 추적하는데, 데이터를 아카이브하기 위해 밤늦게까지 작업했음.
          + 이미 CDC의 청소년 위험 행동 감시 시스템, 독성 물질 및 질병 등록국의 사회 취약성 지수, 환경 정의 지수의 일부 데이터가 사라졌음.
          + HIV 데이터의 랜딩 페이지와 20년간의 감시 데이터를 포함한 AtlasPlus 도구도 사라졌음.
          + CDC 내부에서는 ""성별""이라는 단어를 ""성""으로 대체하라는 지시가 내려졌다는 소식을 들었음.
     * 저자 소개
          + Katherine J. Wu는 _The Atlantic_의 스태프 작가임.

        Hacker News 의견

     * 데이터는 궁극적인 사실 확인 수단임. 대통령이 사실 확인에 반대하고 Facebook에 사실 확인을 중단하도록 강요한 적이 있음. 정부 사이트에서 데이터가 사라지는 이유는 그들의 ""대안적 사실""을 반박하기 때문임
     * 역학 교수로서 주간 ""날씨 보고서""를 작성하는데, 데이터와 소통의 단절이 심각한 시기에 발생하고 있음. 독특한 독감 시즌이 돌아왔고, 데이터 수집을 위해 각 주의 보건부 웹사이트를 방문해야 했음
     * 데이터 삭제 범위는 데이터셋을 넘어섬. /r/medicine에서는 성과 관련된 주제에 인접한 치료 지침이 사라지고 있다고 보고됨
     * Musk와 그의 팀이 디지털 정부를 최대한 통제하려는 캠페인임. 그의 목표는 Twitter에서 했던 것과 유사한 연방 정부의 정리 작업일 가능성이 높음. Twitter의 수익이 80% 감소한 것과 유사한 결과가 예상됨
     * 미국 납세자가 공중 보건을 위해 지불한 데이터가 즉흥적으로 삭제될 수 있다는 것은 무서운 일임. 기술에 익숙하지 않은 미국인에게는 데이터가 여전히 접근 불가능할 것임
     * CDC가 방어적 총기 사용 통계를 기록하지 않았던 것과 유사함. 데이터는 정부와 상관없이 기록되어야 하며, 시간이 지나도 진실의 원천을 유지할 수 있어야 함
     * 데이터 수집이나 출판을 중단하는 조치의 ""흥미로운"" 결과는 유아 사망률이나 결핵 사례 수가 작년과 어떻게 달라졌는지 알 수 없게 되는 것임
     * Musk가 인사관리국을 장악하고 있다는 소식이 있음. NASA가 응용 과학 페이지를 삭제하고 데이터를 정리하고 있음
     * 많은 다른 데이터셋도 사라지고 있음. Reddit의 /r/DataHoarder와 /r/fednews에서 활발한 논의가 진행 중임
     * ""Safeguarding Research""라는 이름으로 자료를 보존하려는 사람들이 있음
"
"https://news.hada.io/topic?id=19037","리눅스 컨테이너에서 실행되는 Android, Waydroid","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   리눅스 컨테이너에서 실행되는 Android, Waydroid

     * 홈
          + Waydroid는 Wayland 기반 데스크톱 환경에서 일반 GNU/Linux 시스템에서 전체 Android 시스템을 부팅할 수 있는 컨테이너 기반 접근 방식을 제공함.
     * 문서
          + Waydroid의 문서는 docs.waydro.id에서 확인 가능함.
     * 버그 및 보고
          + 버그 보고는 GitHub 저장소에서 가능함.
     * 프로젝트 개발
          + 개발 저장소는 GitHub에 호스팅됨.
     * 설치 방법
          + 설치 가이드는 문서 사이트에서 확인 가능함.
          + 수동 이미지 다운로드는 SourceForge에서 가능함.
     * 주요 기능
          + Waydroid는 Linux 네임스페이스를 사용하여 컨테이너 내에서 전체 Android 시스템을 실행하고, GNU/Linux 기반 플랫폼에서 Android 애플리케이션을 제공함.
          + 컨테이너 내 Android 시스템은 LXC와 바인더 인터페이스를 통해 필요한 하드웨어에 직접 접근 가능함.
     * 지원 CPU 및 GPU
          + Waydroid는 ARM, ARM64, x86, x86_64 CPU를 지원함.
     * Waydroid-Linux 베타
          + Waydroid-Linux는 x86_64 CPU(Intel/AMD)만 지원함.
          + LXC와 커널 모듈을 사용하는 방식 때문에 라이브 모드에서는 작동하지 않으며, 설치 후에만 제대로 작동함.
     * 팀 소개
          + 팀 멤버 소개 및 연락 방법 제공.
     * 성장 지원
          + Open-Collective를 통해 기부 및 후원을 받고 있음.

        Hacker News 의견

     * 오래전에 구매한 스웨덴어 사전 앱 세 개를 여전히 설치할 수 있지만, 앱 스토어에서는 더 이상 제공되지 않음. Norstedts가 구독 모델로 전환했음. Waydroid를 사용하여 데스크톱에서 사용 중이며 만족스러움
     * 이 소프트웨어가 유명한데도 불구하고 프론트 페이지에 올라온 것이 놀라움. Waydroid에서 실행되는 Google 제공 이미지가 없는 것이 아쉬움. 인터넷에서 다운로드한 ROM에 비밀번호를 입력하는 것이 불안함
     * Mac에서 Docker Desktop이나 Orbstack 등을 사용하여 컨테이너화된 안드로이드를 실행하고, 네트워크 트래픽과 API 호출을 관찰하기 쉽게 루팅된 프록시가 설정된 Docker 이미지를 수정할 수 있기를 바람
     * Furiphone FLX1이 이를 많이 활용하며, 놀라운 성능을 보임. Signal과 Spotify를 사용하는 사람들도 있음. Linux 폰에서 훌륭한 프로젝트임
     * 매번 이 소식을 볼 때마다 ""멋지다! Linux에 없는 멋진 Android 앱을 실행할 수 있겠군""이라고 생각하지만, 실제로는 그런 앱이 떠오르지 않음. 필수적인 Android 앱이 있는지 궁금함
     * FuriLabs가 Android 앱 통합을 잘 해낸 방법의 기초가 됨. 이를 포크하고 많이 수정했지만, Linux 폰에서 Android 앱을 사용할 수 있는 사용자 경험을 제공함
     * 컨테이너가 하드웨어 USB 장치에 접근할 수 있는지 궁금함. Mooondrop FreeDSP usb-c 케이블을 사용 중이며, Android 앱으로 EQ 설정을 변경하는 데 시간이 오래 걸림. Linux 노트북으로 이를 해결하고 싶음
     * 스마트폰이 없을 때 웹을 통해 인스타그램을 사용할 수 없었지만, android-x86을 VirtualBox에서 실행하여 앱을 사용했음. 가장 어려운 부분은 화면 해상도를 맞추고, 파일을 컴퓨터에서 VM으로 이동시키는 것이었음
     * Binder가 커널 기능인데, 이를 어떻게 작동시키는지 궁금함
     * Mac M1에서 이를 실행할 수 있는 방법이 있는지 궁금함. Mac Docker에서 앱을 설치하고 저장소를 유지할 수 있는 Android 인스턴스를 실행하고 싶음
"
"https://news.hada.io/topic?id=18950","DeepSeek에서 공개한 멀티모달 오픈소스AI모델 Janus-Pro","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 DeepSeek에서 공개한 멀티모달 오픈소스AI모델 Janus-Pro

   이미지 생성 및 이해 가능한 멀티모달 모델
   1B와 7B 두개의 버전 제공
   벤치마크에서 DALL-E 3와 Stable Diffusion상회

   딥시크가 쳇gpt 를 이기는 기름

   DeepSeek, Text-To-Image 생성 모델 Janus Pro 공개 [PDF]
"
"https://news.hada.io/topic?id=18965","알파 신화: 사육된 늑대가 우리를 잘못 이끈 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      알파 신화: 사육된 늑대가 우리를 잘못 이끈 이야기

    알파 신화: 사로잡힌 늑대가 우리를 잘못 이끌었던 방법

     * 1947년 스위스 바젤 동물원에서 동물 행동학자 루돌프 쉔켈은 사로잡힌 늑대들의 행동을 관찰하며 공격적 지배와 엄격한 계층 구조를 기록함. 이는 알파 수컷 개념을 과학 문헌과 대중 상상 속에 자리 잡게 함.

  야생의 진실

     * 이후 미네소타의 야생 늑대를 연구한 L. 데이비드 메크는 자연 서식지에서 늑대 무리가 가족 단위로 운영되며, 경험 많은 부모가 이끄는 것을 발견함. 지배가 아닌 양육과 보호를 통해 리더십이 형성됨.

  우리가 만든 감금

     * 인간 행동을 늑대 심리로 모델링하려는 시도가 오히려 비정상적 환경에서 나타나는 행동을 정상화함. 이는 ""감금된 남성 증후군""으로 불릴 수 있음.

  실리콘 밸리의 감옥

     * 실리콘 밸리에서는 ""빠르게 움직이고 부수라""는 문화가 지배적이며, 이는 지속 가능한 혁신보다 지배적 행동을 우선시하는 환경을 만듦. 이는 만성 피로와 성취감 감소로 이어짐.

  감금의 비용

     * 전통적 ""알파"" 남성 규범을 따르는 남성은 우울증과 불안증을 겪을 가능성이 높고, 도움을 구하지 않으며, 관계 만족도가 낮고, 친밀한 우정을 유지하기 어려움.

  자유 찾기: 새로운 야생

     * 혁신적인 조직은 협력과 돌봄을 강조하는 ""야생 리더십""을 발견함. 파타고니아는 알파 CEO 모델을 거부하고 협력을 통해 의사 결정을 내리는 구조를 채택함.

  자유를 찾기

     * 알파 남성 신화를 거부하는 것만으로는 충분하지 않음. 감금된 행동을 만든 구조를 재설계해야 하며, 경쟁이 아닌 연결에서, 지배가 아닌 양육에서 강점을 찾는 남성성을 위한 공간을 만들어야 함.

        Hacker News 의견

     * 일부 사용자는 '알파 남성' 개념에 집착하는 경향이 있으며, 이는 감정적/심리적 필요를 충족시키는 것 같음
          + 이 개념은 위험한 사고 방식으로, 자신을 해치고 있음에도 불구하고 벗어나기 어려움
          + '강력한 사람을 좋아한다'는 진실과 '지배가 모든 상호작용의 주된 매개체'라는 인지 왜곡이 혼합되어 있음
          + 명확한 정의가 없어 객관적인 측정이 불가능하며, '알파' 또는 '베타' 행동에 대한 끝없는 논쟁을 초래함
          + 자신을 밀어붙이지 않는 것과 같은 긍정적인 면도 있지만, 전체적으로 좋은 것은 아님
          + 개별화와 자기 개발의 작업을 회피하는 핑계로 사용되며, 다른 사람에게 주어진 지침을 따르는 것에 불과함
          + 자신의 삶을 창조하는 것이 아니라, 삶의 대본을 제공받는 사람을 바꾸는 것에 불과함
          + 심리적 취약점을 악용하여 사람들을 함정에 빠뜨림
     * ""감옥에서 관찰된 갱단의 사고방식이 인간 가정을 대표한다""는 표현을 사용하여 상황을 설명함
          + 상상 속의 모큐멘터리에서 David Attenborough가 내레이션을 하는 장면을 상상함
     * David Graeber의 ""The Dawn of Everything""이 추천되지 않은 것에 놀람
          + 이 책은 고고학적 및 인류학적 증거를 바탕으로 '알파 신화'와 같은 사회적 서사가 역사적으로 정당한 근거가 없음을 설명함
     * 자신이 '알파 남성'과 '베타 남성' 개념을 초월한 '릴리즈 후보' 버전이라고 생각함
     * 자연에 대한 호소를 거부하는 것이 앞으로 나아가는 길이라고 생각함
          + 다윈주의는 두 가지 극단적인 도덕성을 뒷받침할 수 있지만, 건강한 도덕성을 뒷받침할 수 없음
          + 자연을 어머니로 보는 것이 아니라, 자매로 보는 것이 중요함
     * 사회가 인위적인 조건이라는 점을 고려해야 한다고 주장함
          + 서구 사회는 야생보다는 동물원에 더 가깝다고 느낌
     * 늑대의 행동을 인간에게 적용하는 것은 실수였다고 주장함
          + 그러나 늑대의 자유로운 환경에서의 행동을 인간 사회의 특정 부분에 적용함
     * 위계가 없는 구조에서는 팀들이 각자 다른 방식으로 작업하여 비효율이 발생할 수 있음
          + FAANG에서 일하는 것에 관심이 없으며, 함께 일한 엔지니어들은 대부분 쉽게 다가갈 수 있는 사람들이었음
     * '알파 신화'를 반박하기보다는, 그것이 갇힌 환경에서 잘 작동한다는 점을 강조함
          + 제한된 자원과 작업이 있는 환경에서 계층 구조가 진화하며, 내부의 위험이 존재함
"
"https://news.hada.io/topic?id=19017","Hydro: Rust용 분산 프로그래밍 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Hydro: Rust용 분산 프로그래밍 프레임워크

     * 소개
          + Hydro는 Rust를 위한 고수준 분산 프로그래밍 프레임워크임.
          + Hydro는 확장 가능한 분산 서비스를 빠르게 작성할 수 있도록 도와주며, Rust가 메모리 안전성을 보장하는 것처럼 분산 안전성을 보장함.
          + 테스트 모드나 배포 모드에서 분산 프로그램을 쉽게 실행할 수 있도록 지원함.
     * Hydro의 특징
          + Hydro는 고성능 단일 스레드 DFIR 런타임으로 구동되는 분산 데이터 흐름 언어임.
          + 전통적인 아키텍처인 액터나 RPC와 달리, 여러 위치에 걸쳐 계산을 설명할 수 있는 코레오그래픽 API를 제공함.
          + Hydro Deploy와 통합되어 로컬이나 클라우드에서 분산 Hydro 프로그램을 쉽게 배포하고 실행할 수 있음.
     * 컴파일 및 배포
          + Hydro는 두 단계의 컴파일 접근 방식을 사용함.
          + Hydro 프로그램은 표준 Rust 프로그램으로, 개발자의 노트북에서 _배포 계획_을 생성함.
          + 이 계획은 DFIR로 컴파일되어 분산 시스템의 각 기계에 대한 개별 바이너리를 생성함.
          + 생성된 계획과 클라우드 자원 사양을 사용하여 클라우드에 배포됨.
     * 활용 사례
          + Hydro는 2단계 커밋 및 Paxos와 같은 고성능 분산 시스템 구현에 사용됨.
          + 재사용 가능한 구성 요소로 이러한 프로토콜을 제공하는 분산 시스템 표준 라이브러리를 개발 중임.
     * 주의사항
          + Hydro의 문서는 아직 작업 중이며, 질문이나 버그가 있을 경우 Hydro GitHub 저장소에 이슈를 제기할 것을 권장함.

        Hacker News 의견

     * 유튜브에 Hydro 프로젝트에 대한 좋은 강연이 있음
          + DFIR에 중점을 둔 내용임
     * 실제 적용 사례가 있으면 이해하는 데 도움이 될 것 같음
     * 중간 언어와 자체 런타임이 있다면 Rust의 장점을 잃는 것인지 궁금함
          + Rust 바이너리를 일관되고 기능적인 분산 시스템으로 조정하는 언어를 기대했으나, DFIR을 작성하는 것처럼 보임
     * 이 프로젝트가 정말 흥미로움
          + 이 분야에 익숙한 사람이 이전 사례를 알려줄 수 있는지 궁금함
          + 다른 언어로 유사한 프레임워크를 구축한 사람들이 있는지 궁금함
          + 데이터 흐름에 대해 작업한 사람들이 있으며, Materialize가 매우 멋지다고 생각했음
          + Kafka Streams를 사용한 경험이 있으며, 이를 통합하는 프레임워크가 필요하다고 생각했음
     * 노력은 좋지만 Rust 생태계에 ""akka.rs""가 들어오길 바람
     * 데이터 흐름 측면에서 Timely와 비교했을 때 어떤지 궁금함
          + IR에서 루프와 같은 제어 흐름을 표현할 수 있는지 궁금함
     * 각 ""프로세스""가 별도의 바이너리로 배포되며, 별도의 프로세스로 실행되는 것인지 궁금함
          + 그렇다면 오버헤드가 증가하는 문제가 있을 것 같음
          + 빠른 통신은 어떻게 이루어지는지 궁금함
          + 빠른 공유 메모리 IPC 메커니즘이 있는지 궁금함
          + 비동기와의 통합에 대한 언급이 없는 것 같음
          + 네트워킹을 다루는 대부분의 코드는 비동기로 전환되었음
          + 네트워킹이 필요한 많은 것들에 대해 좋은 비동기 라이브러리를 찾기 어려움
     * 정말 멋져 보이며, 특히 배포 부분이 독특해 보임
          + 더 자세한 문서화가 기대됨
          + 특히 중요한 Streams, Singletons, Optionals 부분이 궁금함
     * 프로그래밍 모델이 마음에 듦
          + 애플리케이션을 다시 작성할 때 네트워크 최적화를 수행하는지 궁금함
          + 네트워크 병목 현상 및 혼잡을 처리하는 방법이 궁금함
     * 데이터 파이프라인에 Ballista를 사용하는 것과 비교했을 때 어떤지 궁금함
          + 후자는 Apache Arrow와 Apache Datafusion을 기반으로 구축되어 많은 이점을 얻음
"
"https://news.hada.io/topic?id=18963","Show GN: TanStack Query(React Query) 직접 만들어보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: TanStack Query(React Query) 직접 만들어보기

   안녕하세요.
   TanStack Query를 직접 구현해보는 프로젝트를 만들게 되어 공유해봅니다.

   실제 TanStack Query 코드와 100% 일치하지 않지만
   전체적인 동작 흐름을 이해하는 데 도움이 되시기를 바랍니다.

   구현해 보는 기능은 아래와 같습니다.
     * 외부 라이브러리에 의존하지 않는 core 영역(QueryClient, QueryCache, Query, QueryObserver)
     * staleTime, gcTime(cacheTime)의 동작 흐름
     * React에서 core 영역의 코드를 사용하는 방법


     * Github: https://github.com/mugglim/build-your-own-tanstack-query
     * Github(한국어): https://github.com/mugglim/build-your-own-tanstack-query/…
"
"https://news.hada.io/topic?id=19003","Mathesar – 직관적인 스프레드시트 유사 인터페이스를 통한 Postgres 데이터 접근","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Mathesar – 직관적인 스프레드시트 유사 인터페이스를 통한 Postgres 데이터 접근

     * 직관적인 스프레드시트 인터페이스
          + 모든 기술 수준의 사용자가 Postgres 데이터를 직접 보고, 편집하고, 쿼리하고 협업할 수 있는 인터페이스 제공
          + 자체 호스팅 가능하며, Postgres의 네이티브 접근 제어 기능 사용

Mathesar

     * Mathesar는 PostgreSQL 데이터베이스 작업을 간단하고 강력하게 만들어주는 웹 애플리케이션임
          + 코드 없이 스프레드시트와 유사한 인터페이스로 데이터를 보고, 편집하고, 쿼리하고 협업할 수 있도록 함
          + 자체 호스팅 가능하며, PostgreSQL 데이터베이스, 스키마, 테이블과 직접 작동함
          + 100% 오픈 소스 프로젝트로 Mathesar Foundation에 의해 유지 관리됨
          + Postgres만큼 확장 가능하며, 모든 크기나 복잡도의 데이터 지원
          + 최소한의 설정으로 기존 인프라에 통합 가능
          + 데이터가 서버를 떠나지 않으며, Postgres 역할과 권한 기반의 접근 제어로 데이터베이스 보안 유지

  상태

     * 퍼블릭 베타: 현재 퍼블릭 베타 단계에 있음

  Mathesar 설치

     * 자체 서버에 Mathesar를 설치하는 방법은 문서를 참조

  커뮤니티 참여

     * Mathesar 팀은 Matrix(채팅 서비스)에 있으며, 메일링 리스트와 개발자 메일링 리스트에서 일상적인 작업 논의

    Mathesar에 기여

     * 기여를 적극 권장하며, 기여자 가이드를 읽고 시작할 수 있음

  기능

     * Postgres 기반: 기존 Postgres 데이터베이스에 연결하거나 새로 설정 가능
     * 빠른 설치: Docker를 사용하여 몇 분 만에 설치 가능
     * Postgres 기반 접근 제어: Mathesar UI 내에서 기존 Postgres 역할 사용 가능
     * 다른 도구와의 상호 운용성: Postgres 생태계의 수천 가지 도구와 조화롭게 작동
     * 데이터 모델 설정: Postgres 스키마와 테이블을 쉽게 생성 및 업데이트
     * 데이터 입력: 스프레드시트와 유사한 인터페이스로 테이블 레코드 보기, 생성, 업데이트, 삭제 가능
     * 필터링, 정렬, 그룹화: 데이터를 다양한 방식으로 빠르게 분할 가능
     * 쿼리 빌더: SQL이나 조인에 대한 지식 없이 쿼리 작성 가능
     * 데이터 가져오기 및 내보내기: Mathesar로 데이터를 쉽게 가져오고 내보내기 가능
     * 스키마 마이그레이션: 두 번의 클릭으로 테이블 간 열 전송
     * Postgres 기능 사용: Postgres 스키마, 기본 키, 외래 키, 제약 조건 및 데이터 유형 사용
     * 사용자 정의 데이터 유형: 이메일과 URL에 대한 사용자 정의 데이터 유형, 데이터베이스 수준에서 검증

  동기

     * 데이터베이스 사용은 기술적 전문 지식이나 비싼 도구 없이 가능해야 함
     * Mathesar는 PostgreSQL의 잠재력을 최대한 발휘할 수 있도록 설계된 오픈 소스 플랫폼임
     * 사용하기 쉽고, 상호 운용 가능하며, 확장 가능하면서도 데이터에 대한 완전한 제어 제공
     * 비영리 단체로서 Mathesar를 100% 오픈 소스로 유지하고 모든 사람에게 제공하기 위해 노력

  버그 및 문제 해결

     * 문제가 발생하면 문제 해결 가이드를 참조

  라이선스

     * Mathesar는 GPLv3 라이선스 하에 오픈 소스이며, MIT 라이선스 하의 서드파티 오픈 소스 모듈의 파생물 포함

        Hacker News 의견

     * 많은 도구들이 있지만 대부분은 핵심 기능을 제공하지 않음. TablePlus, DataGrip, NocoDB, VisualDB 등은 3가지 핵심 기능이 부족함. 이 도구는 그 중 2가지를 제공하여 개선된 점이 있음
          + 관계를 인라인으로 볼 수 있는 기능이 중요함. 대부분의 데이터베이스 GUI가 이 기능을 제공하지 않음. 이 도구는 이 점을 잘 이해하고 있음
          + 필터링, 그룹화, 뷰 기능이 중요함. Airtable이 이 부분에서 우위를 점했음. 이 도구도 이를 잘 커버하고 있음
          + AI 생성 쿼리와 보고서 기능이 필요함. 2025년에는 자연어로 SQL 쿼리와 그래프를 생성하는 것이 중요함. 대부분의 주류 도구가 이를 제공하지 않음
     * Mathesar 프로젝트 리더가 이 도구가 주목받아 기쁘다고 함. 질문에 답변할 준비가 되어 있음
     * 인터페이스가 훌륭하지만 Grist와 같은 태그라인에 불만이 있음. 스프레드시트와 테이블의 차이점인 행과 열 조작 기능이 부족함
     * PostGIS를 지원하고 지오메트리 데이터를 보여주는 지도가 있는지 궁금해하는 의견이 있음
     * Just Use Postgres 사용자들에게 유용할 것이라는 의견이 있음. Mathesar와 NocoDB, Baserow의 차이점에 대해 궁금해함. Mathesar가 Airtable의 오픈 소스 대안이 될 계획인지 질문함
     * 설치를 시도해볼 예정이며, 권한 기능이 좋아 보인다고 함. SQL 편집기가 있는지 궁금해함. 문서에 관련 내용이 없으면 문제라고 생각함
     * 금융 팀이 요청한 것과 비슷하다고 함. 스타트업에서 데이터베이스에 모든 금융 정보를 저장하고 이를 은행 정보와 비교하는 데 사용하고 있음
     * MySQL에 비슷한 도구가 있는지 궁금해하는 의견이 있음
     * 도메인 전문가가 기본 데이터를 관리해야 하는 관리자 인터페이스에 유용할 것이라고 봄. GPLv3 라이선스가 이러한 시나리오에 어떤 의미가 있는지 궁금해함. Mathesar를 독점 서비스와 함께 사용할 수 있는지 질문함
     * Ultorg라는 프로젝트를 추천하며 강력하고 직관적인 UX 기능이 많다고 함. Mathesar와 이름이 별로라는 점에서 비슷하다고 언급함
"
"https://news.hada.io/topic?id=18995","2023년 캘리포니아 법 집행기관의 7천 건 이상의 주 데이터베이스 오용 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              2023년 캘리포니아 법 집행기관의 7천 건 이상의 주 데이터베이스 오용 사건

     * 로스앤젤레스 카운티 보안관 부서의 데이터베이스 남용
          + 2023년 로스앤젤레스 카운티 보안관 부서(LACSD)는 민감한 범죄 데이터베이스를 남용하여 캘리포니아 법 집행 전기통신 시스템(CLETS)의 규칙을 위반함.
          + LACSD의 남용 사례는 캘리포니아 전역에서 보고된 7,275건의 위반 중 6,789건을 차지함.
          + CLETS는 다양한 데이터베이스에 대한 접근을 제공하며, 남용 시 주 법무부에 보고해야 함.
     * CLETS 남용 사례
          + 경찰이 개인적인 이유로 데이터를 사용한 사례가 다수 발견됨.
          + 2023년에는 24명의 경찰관이 정직, 6명이 사임, 9명이 해고됨.
          + CLETS 데이터는 이민 집행에 사용될 수 없으며, 이는 캘리포니아 가치법에 의해 남용으로 간주됨.
     * EFF의 데이터 공개
          + EFF는 2019년부터 2023년까지의 CLETS 남용 데이터를 공개하여 연구자와 기자들이 접근할 수 있도록 함.
          + 2019년부터 2023년까지 761건의 조사에서 7,635건의 위반이 발견됨.
          + 55명의 경찰관이 정직, 50명이 사임, 42명이 해고됨.
     * 주목할 만한 사례
          + LACSD는 2023년 수천 건의 남용 사례를 조사하여 확인함.
          + 리버사이드 카운티 보안관 사무소와 포모나 경찰서도 수백 건의 위반을 발견함.
          + 레딩 경찰서의 한 경찰관은 CLETS를 남용하여 교통 정지를 설정한 혐의로 기소되었으나, 최종적으로 무죄 판결을 받음.
     * CLETS의 중요성
          + CLETS는 남용 보고가 의무화된 몇 안 되는 대규모 데이터베이스 중 하나임.
          + 다른 시스템은 CLETS만큼의 감시를 받지 않으며, 남용이 보고되지 않을 가능성이 높음.
          + 자동 번호판 인식기와 얼굴 인식 데이터베이스와 같은 다른 시스템도 높은 남용률을 보일 가능성이 있음.

        Hacker News 의견

     * 한 경찰관이 자신의 약혼자의 전 남편에게 피해를 주기 위해 데이터베이스 접근 권한을 남용한 사건이 있었음. 이는 개인정보 보호의 중요성을 보여주는 사례임
          + 많은 사람들이 대규모 감시 시스템에 접근할 수 있으며, 그 중 일부는 신뢰할 수 없는 사람일 수 있음
          + 해고된 경찰관이 다른 경찰서에서 다시 일하는 것은 미국 경찰 시스템의 문제점임
     * FBI가 2021년에 수백만 건의 무영장 검색을 수행한 사례가 있음. 이는 데이터베이스 남용의 문제를 보여줌
          + 데이터가 존재하면 접근 권한을 가진 사람들은 이를 남용할 가능성이 있음
          + 데이터 남용을 방지하는 가장 좋은 방법은 데이터를 보유하지 않는 것이며, 두 번째로는 적절한 접근 제어를 통해 기술적으로 접근을 제한하는 것임
     * Los Angeles County Sheriff’s Department가 2023년에 민감한 데이터베이스를 남용한 사례가 있음
          + 특정 규칙을 위반하여 총기 소지 허가를 위한 배경 조사를 수행함
          + 경찰이 더 철저하게 조사하려는 개인적 동기가 무엇인지 의문임
     * LASD의 데이터베이스 남용은 정치적으로 민감한 시기에 발생했으며, 이는 양당 모두에게 문제를 일으킬 수 있음
          + LASD가 범죄 조직과 다름없다는 의견이 있음
          + LA Sheriff Dept는 거의 모든 수준에서 남용의 악몽임
     * 민감한 데이터베이스 유출이 많음에도 불구하고, 모든 정부 데이터베이스가 Tor와 같은 분산형 시스템에서 공개되지 않은 것이 놀라움
"
"https://news.hada.io/topic?id=18968","OpenAI, DeepSeek의 데이터 도용 의혹에 분노","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenAI, DeepSeek의 데이터 도용 의혹에 분노

     * OpenAI와 DeepSeek의 논란
          + OpenAI와 Microsoft는 DeepSeek이 OpenAI의 데이터를 부당하게 사용했는지 조사 중임.
          + DeepSeek이 OpenAI의 모델을 기반으로 R1 모델을 개발했으며, 이는 AI 업계에서 큰 주목을 받고 있음.
          + DeepSeek이 OpenAI의 데이터를 무단으로 사용했다는 의혹이 제기되고 있음.
     * DeepSeek의 모델 학습 방법
          + DeepSeek은 OpenAI의 모델로부터 지식을 추출하는 '증류'라는 기술을 사용했음.
          + 증류는 하나의 모델이 다른 모델로부터 학습하는 방식으로, 학생 모델이 부모 모델에게 많은 질문을 하여 지식을 습득하는 과정임.
          + 이러한 방식으로 DeepSeek이 OpenAI의 모델로부터 지식을 얻었다는 증거가 있다고 주장됨.
     * OpenAI의 아이러니
          + OpenAI는 대량의 데이터를 무단으로 수집하여 비즈니스를 구축해왔다는 비판을 받고 있음.
          + OpenAI가 다른 회사의 데이터 수집 방식에 대해 불만을 제기하는 것은 아이러니하다는 의견이 있음.
     * 회원 전용 콘텐츠
          + 이 게시물은 유료 회원 전용이며, 무제한 광고 없는 기사와 추가 팟캐스트 콘텐츠를 제공함.
          + 무료 회원은 주간 이야기 요약 이메일과 같은 게시물에 접근 가능함.

        Hacker News 의견

     * Hacker News에서는 원본 기사를 제출해야 한다고 강조함
          + 다른 사이트에서 발견된 내용을 보고하는 게시물의 경우, 해당 사이트를 제출해야 함
          + 링크베이트와 분노를 유발하는 기사를 제출하지 말 것을 권장함
     * Bloomberg와 Financial Times는 Microsoft와 OpenAI가 DeepSeek이 R1 모델을 부적절하게 훈련했는지 조사하고 있다고 보도함
          + OpenAI는 화가 나거나 격분한 상태가 아님
          + DeepSeek이 사용 계약을 위반했는지 확인하려고 할 뿐임
     * 기사에는 OpenAI가 ""격분""하거나 화가 났다는 증거가 전혀 없음
          + 이는 완전한 클릭베이트임
     * 많은 Hacker News 댓글 작성자들이 증거 부족에도 불구하고 이 이야기를 믿고 싶어하는 것은 부끄러운 일임
"
"https://news.hada.io/topic?id=19041","DOGE를 지원하는 젊고 경험이 부족한 엔지니어들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      DOGE를 지원하는 젊고 경험이 부족한 엔지니어들

     * 젊고 경험이 부족한 엔지니어들이 엘론 머스크의 정부 장악을 돕고 있음
          + 엘론 머스크가 연방 정부 인프라를 장악하는 과정에서 19세에서 24세 사이의 젊은 엔지니어들이 중요한 역할을 하고 있음.
          + 이들 대부분은 머스크의 회사와 연관이 있으며, 일부는 머스크의 오랜 동료인 피터 틸과도 연결되어 있음.
     * 정치 실험실 뉴스레터
          + Makena Kelly와 WIRED 정치 팀이 인터넷이 정치 현실에 미치는 영향을 이해하도록 도움을 줌.
     * DOGE 프로젝트와 젊은 엔지니어들
          + WIRED는 공공 데이터베이스와 온라인 기록을 통해 19세에서 24세 사이의 젊은 남성 6명을 확인했으며, 이들은 정부 경험이 거의 없지만 DOGE 프로젝트에서 중요한 역할을 하고 있음.
          + 이 프로젝트는 연방 기술과 소프트웨어를 현대화하여 정부의 효율성과 생산성을 극대화하는 것을 목표로 하고 있음.
     * 주요 인물
          + Akash Bobba, Edward Coristine, Luke Farritor, Gautier Cole Killian, Gavin Kliger, Ethan Shaotran 등 6명의 엔지니어가 주요 인물로 거론됨.
          + 이들은 대부분 머스크의 회사나 관련 프로젝트에서 경험을 쌓았으며, 일부는 자원봉사자로 활동 중임.
     * 정부 기관에 대한 영향
          + 머스크의 동맹들은 이미 인사관리국(OPM)과 일반 서비스 관리국(GSA)을 장악했으며, 재무부의 결제 시스템에 접근하여 민감한 정보에 접근할 가능성이 있음.
          + DOGE 인력이 국제 개발을 위한 미국 기관(USAID)의 기밀 정보와 보안 시스템에 부적절하게 접근하려 했다는 보도가 있었음.
     * 전문가 의견
          + 미시간 대학교의 공공 정책 교수인 Don Moynihan은 이러한 상황이 전례 없는 일이며, 공공 관리가 아닌 사람들이 정부의 가장 민감한 데이터에 접근하고 있다고 우려를 표명함.
          + 미네소타 대학교 법학 교수인 Nick Bednar는 이러한 인물들이 복잡한 주제를 다루는 대규모 기관에서 상당한 관리 통제를 행사하는 것이 매우 비현실적이라고 지적함.
     * 보안 우려
          + Bobba, Coristine, Farritor, Shaotran은 GSA의 A-스위트 수준의 보안 승인을 받아 모든 물리적 공간과 IT 시스템에 접근할 수 있음.
          + 새로운 팀이 보안 승인을 우회하여 민감한 정보에 접근할 수 있다는 우려가 제기됨.
     * 규제 포획 우려
          + Bednar는 이러한 인물들이 미국 대중이나 연방 정부에 도움이 되지 않는 선호도를 가질 수 있다는 규제 포획에 대한 우려를 제기함.

        Hacker News 의견

     * 미국의 경제적 지배력이 2차 세계대전 이후로 가장 강력한 시점임에도 불구하고, 급진적인 조치가 적절한지에 대한 의문이 제기됨
          + 젊고 호기심이 부족한 사람들이 Chesterton의 울타리를 이해하지 못하고 제거하는 것 같음
     * ""핸드메이즈 테일""에서 인용된 내용으로, 정부가 헌법을 일시적으로 중단했을 때의 충격과 혼란을 묘사함
     * Wired가 Musk의 엔지니어들을 ""doxxing""했다고 주장하는 사람들이 있지만, Musk가 트위터에서 연방 직원들을 조롱한 것과 비교됨
          + 전자를 비난하는 사람들이 후자도 비난하기를 바람
     * Elon Musk가 18F를 ""삭제""했다고 주장함
     * Tesla를 팔기 싫어서 정치적 이념을 바꾸는 것에 대한 의문 제기
     * DOGE가 효과적이려면 메디케어나 국방과 같은 큰 항목을 목표로 해야 한다고 주장함
          + 메디케어의 40%가 사기와 낭비로 추정되며, 국방부는 감사도 통과하지 못함
          + 대신 작은 돈의 보조금을 방해할 것이며, 이는 적자 감소에 의미 있는 영향을 미치지 않을 것임
     * 19세의 대학 중퇴자가 국가 안보나 생명 구호 서비스에 책임이 있는 정부 직원을 해고할 수 있는 권한을 가져야 하는지에 대한 의문 제기
     * 맨해튼 프로젝트의 엔지니어와 과학자의 평균 연령이 25세였음을 언급하며, 현재의 고령화 사회가 비역사적이라고 주장함
          + 젊은 사람들이 호기심과 창의력을 가져와 현 상태를 변화시킬 수 있다고 강조함
     * 미국 채권에 대한 우려를 표명하며, 정부 웹사이트를 통해 접근해야 하는데, 이들이 접근을 차단하고 돈을 훔칠까 걱정함
          + ""정부의 기계가 세계에서 가장 부유한 사람에 의해 적대적으로 인수된 것처럼 느껴짐""
"
"https://news.hada.io/topic?id=19029","ISP 라우터 회피라우터 회피 (2024)

     * 라우터 보안 및 ISP 장비 문제
          + ISP에서 제공하는 모뎀과 라우터 대신 개인적으로 구매한 장비를 사용하는 것이 안전함. ISP 장비는 초기 설정과 유지 관리에서 일반적으로 무능함을 보임.
          + 보안과 편리함은 항상 상충되며, ISP는 기술 지원 비용을 줄이기 위해 최대한 편리하게 라우터를 설정함.
          + ISP는 종종 스파이 기관과 협력하며, 고객에게 제공하는 장비에 백도어를 설치할 가능성이 있음.
          + ISP가 제공하는 라우터는 해커와 스파이의 주요 타겟이 되기 쉬움.
          + ISP는 공공 WiFi 네트워크를 가정에 설치하려고 하며, 이는 보안이 취약할 수 있음.
          + ISP 장비는 종종 잠겨 있어 비밀번호 변경이나 DNS 서버 변경이 불가능함.
          + 펌웨어 업데이트에 대한 제어권이 제한될 수 있음.
          + ISP 장비는 고장 시 대체 장비를 받기 전까지 오프라인 상태가 될 수 있음.
          + 장기적으로 개인 장비를 구매하는 것이 더 저렴할 수 있음.
     * ISP의 보안 문제 사례
          + 여러 ISP에서 제공하는 라우터에서 보안 결함이 발견됨. 예를 들어, Sky 라우터의 DNS 리바인딩 결함, Virgin Media 라우터의 VPN 사용자 취약점, Comcast의 데이터 유출 문제 등이 있음.
          + ISP는 종종 고객에게 제공하는 장비의 보안 문제를 해결하는 데 느리고 비효율적임.
          + ISP가 제공하는 장비는 종종 기본 비밀번호와 유사한 SSID를 사용하여 보안에 취약함.
          + TR-069와 같은 원격 구성 프로토콜의 취약점이 악용되어 ISP 장비가 해킹될 수 있음.
     * ISP의 정직성 문제
          + Time Warner Cable은 고객에게 제공하는 다운로드 속도에 대해 거짓말을 했다는 이유로 뉴욕주에서 소송을 당함.
          + 미국에서는 고속 인터넷이 거의 독점 상태이며, 경쟁이 없는 ISP는 고객에게 좋은 서비스를 제공할 동기가 없음.
     * 소비자용 메시 라우터의 장점
          + eero, AmpliFi, Google Wifi와 같은 메시 라우터는 자체적으로 속도 테스트를 실행할 수 있으며, 속도 테스트 기록을 유지하여 추세를 쉽게 파악할 수 있음.
          + 라우터는 다양하므로 처음부터 완벽한 라우터를 구매할 수 없으며, 반품 가능한 곳에서 구매하는 것이 좋음.

        Hacker News 의견

     * Comcast의 모뎀과 라우터를 사용하는 것에 불만을 표하며, 개인 모뎀과 라우터를 사용하려면 추가 요금을 내야 하는 상황임. 샌프란시스코에서 인터넷 연결 옵션이 제한적임.
          + 샌프란시스코가 기술 중심지임에도 불구하고 인터넷 연결이 열악하다는 점을 지적함.
     * 전자기기에 곤충이 침입하는 문제는 ISP와 무관하며, 이는 열과 소음 때문임. ISP 라우터에 대한 혼합된 감정을 표현함.
     * 독일의 규제 기관이 고객과 제공자 간의 인터페이스가 수동적이어야 한다는 법을 재확인함. 독일에서는 ISP가 고객의 라우터 사용을 막을 수 없음을 설명함.
     * 호주에서는 다양한 ISP를 선택하고 원하는 라우터를 사용할 수 있는 자유가 있음. ISP 제공 라우터를 사용한 지 15년이 넘었음.
     * AT&T Fiber의 라우터는 과열 문제와 DMZ Plus 모드의 문제로 인해 불법적인 인증서 파일 거래가 발생함. AT&T Fiber는 고객이 직접 네트워크에 연결할 수 없도록 제한함.
     * 개인 케이블 모뎀을 구입하는 것이 ISP의 대여 비용보다 경제적임. 모뎀과 라우터를 별도로 구입하는 것이 문제 해결에 유리함.
     * Cox와의 협상 끝에 개인 라우터를 사용할 수 있게 되었음. Cox는 군중 기반 WiFi와 보안/인터넷/TV 패키지를 판매하기 위해 제한을 두는 것으로 보임.
     * ISP가 하드웨어를 강제로 대여하게 하는 이유는 시장 지배력을 유지하기 위함임. 네트워크 보안을 엔드포인트에서 처리해야 한다고 강조함.
     * 영국의 Openreach 설정에 만족하며, 간단한 ONT와 원하는 라우터를 사용할 수 있음. gPON의 토폴로지 때문에 제어가 필요함을 이해함.
     * ISP의 라우터와 모뎀을 사용하면 지원을 받기 쉬워짐. 네트워크 엔지니어로서의 경험을 바탕으로 ISP가 개인을 감시할 시간이 없다고 확신함.
"
"https://news.hada.io/topic?id=18935","Sony가 Blu-ray 디스크, MiniDisc 및 MiniDV 미디어 생산을 종료하기로 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Sony가 Blu-ray 디스크, MiniDisc 및 MiniDV 미디어 생산을 종료하기로 결정

     * 소니는 2025년 2월부로 아래의 제품 전 모델 생산을 종료함
          + 블루레이(Blu-ray) 디스크 미디어
          + 녹음용 미니디스크(MiniDisc)
          + 기록용 MD 데이터
          + 미니 DV 카세트(MiniDV)
     * 해당 제품군의 후속 모델은 출시되지 않음

        Hacker News 의견

     * 물리적 매체로 영화가 출시되는 시대가 곧 끝날 것이라는 우려가 있음. 스트리밍이나 DRM이 걸린 디지털 출시의 소유권 문제를 제외하고도, 블루레이는 훨씬 더 나은 품질을 제공하며 영화 애호가에게는 대체할 수 없는 매체임. 스트리밍 버전의 비트레이트보다 세 배 높은 경우가 흔함
          + 스트리밍 서비스에서 오리지널 콘텐츠(예: Netflix 오리지널)는 좋지만, 라이선스 콘텐츠는 종종 낮은 비트레이트, SDR, 1080p로 제한되는 경우가 많고, 특히 어두운 장면에서 블록 아티팩트가 심각함. 4K 스트림과 1080p 블루레이 중 선택할 수 있다면 대부분 블루레이를 선택할 것임
     * 모든 콘텐츠를 다시 구매하게 하려는 계획의 일환임
     * 미국의 물리적 비디오 게임 소프트웨어 지출 감소 속도가 2024년에 가속화되었음. 2021년 이후 미국의 물리적 비디오 게임 소프트웨어 지출이 절반 이상 감소하였으며, 2008년 정점 대비 85% 이상 감소하였음
     * 모든 블루레이 미디어의 생산이 끝나는 것은 아니며, 소비자가 기록 가능한 블루레이만 해당됨
     * VCR 시대가 물리적 매체의 정점이었음
     * 다른 제조업체에서 미디어가 얼마나 오래 제공될 것인지 궁금함
     * 가족이 소유한 물리적 매체를 디지털로 변환할 솔루션이 있는지 궁금함. 변환하지 않으면 곧 잃어버릴 것 같음
     * Sony가 블루레이 디스크 생산을 중단하지 않는다는 기사 링크가 제공됨
     * BDXL 미디어도 포함되는지 궁금함
     * 몇 년 전 NAS 백업을 위해 드라이브를 구매했으나, 백업하려는 데이터 양에 비해 미디어 가격이 너무 비싸서 실행하지 못했음. 가격이 내려가기를 기다리고 있음
"
"https://news.hada.io/topic?id=18980","Anthropic CEO 다리오 아모데이: DeepSeek 모델은 그리 놀랍지 않다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Anthropic CEO 다리오 아모데이: DeepSeek 모델은 그리 놀랍지 않다

   다리오 아모데이는 DeepSeek의 V3와 R1 모델 인식이 과장되었다고 주장

  AI 발전의 세 동력 (Three Dynamics of AI Development)

    1. Scaling laws: 다른 요소들이 동일한 경우, AI 시스템 성능은 스케일이 커질수록 증가함. 예를 들어 백만 달러 모델은 코딩 테스크의 20%를, 천만 달러 모델은 40%를, 1억 달러 모델은 60%를 맞춤
    2. Shifting the curve: 모델 아키텍처나 연산 효율성 증가로 비용-성능 곡선이 이동함. 비용 효율이 작은 혁신으로는 1.2배 정도, 중간 크기 혁신은 2배, 큰 혁신은 10배 정도 증가. 그러나 비용 효율이 증가해도 회사들은 훈련 비용을 줄이지 않고 더 높은 성능의 모델을 만드는 데에 다시 투자함. 이런 혁신이 모여 1년에 4배 정도씩 증가하고 있음.
    3. Shifting the paradigm: 2023년까지는 막대한 인터넷 자료로 학습시킨 pretrained model이 스케일링의 주요 대상이었음. 그러나 2024년부터 o1을 시작으로 강화학습이 이용되기 시작. 이 방법은 일반적인 pretrained model로 시작한 뒤 강화학습 단계를 더하는 방식임. 2024년부터는 강화학습 단계 스케일링이 시작되고 있으나, 아직 초기 단계이기에 약간의 투자만으로 큰 성능향상을 가져올 수 있음.

  DeepSeek 모델

   DeepSeek은 한 달 전 pretrained model DeepSeek-V3를 공개했고 지난주 강화학습 단계를 추가한 R1을 공개함. DeepSeek-V3는 SOTA 성능에 근접했으며 모델 효율을 크게 향상시킴.
     * 그러나 DeepSeek이 6백만 달러로 미국 회사들의 수십억 달러 모델들과 동등한 성능을 보여준다는 소문은 과장됨. Claude Sonnet 3.5는 훈련에 수천만 달러가 소모되었으며 1년 전에 훈련되었음.
     * 훈련 효율이 1년에 4배 정도 증가하고, V3의 성능이 SOTA에 미치지 못하는 점을 고려(곡선에서 비용 2배 정도의 차이)했을 때, V3 모델이 8배 정도 저렴한 비용으로 훈련된 것은 지금의 발전 추세를 벗어나지 않은 일임. 미국 회사들도 곧 각자의 방법으로 이정도 효율을 달성할 것임.
     * 문제는 이 추세를 따르는 모델이 중국에서 등장했다는 것.
     * DeepSeek은 50,000개의 Hopper 세대 칩을 보유하고 있음. 미국 회사들의 1/2~1/3 수준으로 이를 고려하면 미국 회사들과의 비용 차이는 그리 크지 않음.
     * 엔지니어링 측면에서 R1은 V3보다 덜 흥미로움. 현재 우리가 강화학습 곡선의 초기 단계에 있기에 R1이 저렴한 비용으로 o1 급 성능을 보여줄 수 있었음. 강화학습의 스케일링이 진행되다 보면 이런 사례는 줄어들 것임.

  수출 규제

     * 미국과 중국의 연구소들은 강력한 AI 개발을 위해 막대한 돈을 투자하고 있으며, 이는 거의 모든 분야에서 거의 모든 인간보다 뛰어난 AI 모델을 만들 때까지 이어질 것. 2026-2027쯤으로 추정됨.
     * 이때에는 수출 규제에 따라 세계가 완전히 다르게 나뉠 수 있음.

    1. 중국이 수백만 개의 칩을 확보한다면 미국과 중국이 각자 강력한 AI 모델을 가지고 기술을 혁신하는 양극 세계가 될 것임.
    2. 중국이 수백만 개의 칩을 확보하지 못한다면 미국과 동맹국들만이 강력한 모델을 가지고 단극 세계가 될 것임. AI가 AI 발전도 가속하기에, 이런 경향이 한동안 유지될 것.

     * DeepSeek의 성과가 수출규제의 실패를 의미하진 않음. 그들은 이미 수출규제 이전에 충분한 칩을 확보해 뒀음.

   추가로 아모데이는 3.5 Sonnet이 비공개 상위 모델(3.5 Opus 등)의 증류 버전이라는 소문도 부정했습니다.

   모델이 중국에서 등장했다는 게 문제?
   오픈모델이라는게 문제겠지…

   AGI 가 나올 날이 기대되면서 무섭네요

   그런 이야길 앤트로픽이 말하기에는...흐음
   몇 달 째 모댈 새 소식이 없어서 앤트로픽은 뭐하고 있냐는 소리가 스멀스멀 나오던데요.
"
"https://news.hada.io/topic?id=18940","GoDoxy - 사용하기 쉬운 리버스 프록시 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GoDoxy - 사용하기 쉬운 리버스 프록시

     * 경량이면서도 성능이 뛰어난 리버스 프록시. 웹 UI와 대시보드를 제공
     * 사용자 친화적: 간단한 설정, 멀티 노드 지원, 명확하고 상세한 에러 메시지
     * 자동 SSL 인증서 관리: DNS-01 인증 제공자 지원
     * Docker 컨테이너 자동 구성
     * 핫 리로드: 컨테이너 상태나 설정 파일 변경 시 자동 업데이트
     * idlesleeper (옵션): idle시에 컨테이너를 중지하고 트래픽 발생 시 재시작
     * HTTP(S) 리버스 프록시
     * HTTP 미들웨어 지원
     * 사용자 정의 에러 페이지 지원
     * TCP 및 UDP 포트 포워딩
     * linux/amd64, linux/arm64 지원
     * Go 언어로 작성됨

   UI가 나쁘지 않고 괜찮네요
   Reverse Proxy : Nginx Proxy Manager
   Dashboard : Flame
   이렇게 사용 중인 환경을 하나로 통합 가능할 것 같습니다.

   Traefik + Homepage
     * Uptime Kuma

   중국거네요
   개인적으로 이런 중요한 서비스는 중국꺼 쓰기 좀 그렇네요

   저는 중국이 아닌 홍콩 출신입니다.

   와.. 어떻게 알고 찾아오셨지

   이 사이트가 제 리포지토리에 가장 많은 트래픽을 보내고 있습니다

   홍콩은.. 지지 합니다!_+
   좋은 프로젝트 감사합니다.
"
"https://news.hada.io/topic?id=19025","CDC: 특정 주제를 언급한 미발표 원고 철회 또는 수정 요구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CDC: 특정 주제를 언급한 미발표 원고 철회 또는 수정 요구

    긴급 뉴스: CDC, 모든 과학 및 의학 저널에 제출된 연구의 대량 철회 및 수정 명령

     * 미발표 원고 철회 및 수정: CDC는 모든 과학 및 의학 저널에 제출된 연구 원고의 철회 또는 수정을 명령함. 특정 주제를 언급하는 원고는 철회되거나 수정되어야 함.
     * 금지 용어 목록: CDC 연구자들은 ""성별, 트랜스젠더, 임신한 사람, LGBT, 트랜스섹슈얼, 논바이너리"" 등의 용어를 원고에서 제거해야 함.

    CDC의 검열 체제 확장

     * 출판 중단: CDC의 주요 출판물인 _Morbidity and Mortality Weekly Report_는 두 호가 발행되지 않았으며, _Emerging Infectious Diseases_와 _Preventing Chronic Disease_는 아직 영향을 받지 않았음.
     * 기존 제출물에 대한 적용: 이미 제출된 원고도 검토 대상이며, 주요 저널에 제출된 원고도 중단되고 검토되어야 함.

    정책의 불확실성과 혼란

     * 정책의 범위: 얼마나 많은 원고가 영향을 받는지는 불확실하며, 대부분의 연구는 인구 통계 정보를 포함하고 있어 거의 모든 주요 연구가 새로운 정책의 검열 대상이 될 수 있음.
     * 혼란과 두려움: 정책이 트럼프 대통령의 행정 명령과 충돌할 수 있는 연구에만 적용되지만, CDC 전문가들은 이를 해석하는 방법을 알지 못함. 연구자들은 해고될까 두려워하며, ""선제적 복종""이 발생하고 있음.

    효율성의 불가능성

     * 정치적 임명자의 승인 필요: 모든 공중 보건 커뮤니케이션은 트럼프 행정부의 명령에 따라 정치적 임명자의 승인이 필요하며, 이는 많은 것을 지연시키고 있음. 현재 CDC에는 정치적 임명자가 한 명뿐이며, 결정이 하급 관리에게 위임될 수 있는지는 불확실함.

        Hacker News 의견

     * 개인 기관과 출판물에 미칠 영향에 대한 궁금증이 있음. 사람들이 CDC에서 민간 부문으로 이동할 가능성이 있으며, 자유 시장에서의 발전이 의료 연구에 도움이 될 수 있음. 그러나 연방 정부가 의료 비용의 1/3을 차지하고 있으며, NIH의 예산 대부분이 외부 및 내부 연구에 사용됨. 금지된 용어가 필요한 연구는 일부에 불과할 수 있음. 여러 출처에서 공식적으로 확인되기 전까지는 신중하게 접근해야 함.
     * 연방 자금 지원을 거부하는 것이 명예의 배지가 될 수 있지만, 이는 장기적으로 연방 자금 지원에 치명적일 수 있음. 호주에서 CSIRO 과학 검열 문제가 있었으며, 이와 유사한 상황이 발생할 경우 NSF, 지구 과학, DoE 및 AGW에도 부정적인 영향을 미칠 수 있음. 과학과 동의하지 않더라도 이러한 대규모 주제 금지는 도움이 되지 않음. 편집 위원회가 이에 맞서 싸울지 궁금함. 소련 과학에 오점을 남긴 리센코주의가 떠오름.
     * 법률 전문가는 아니지만, CDC의 명령이 트럼프의 최근 행정 명령 ""언론의 자유 회복 및 연방 검열 종료""와 상충된다고 생각함. 이 행정 명령은 정부의 언론 검열이 자유 사회에서 용납될 수 없다고 명시함.
     * 이는 문자 그대로의 정치적 올바름임. 자신의 검열자가 권력을 잡으면 큰 정부가 괜찮다고 생각할 수 있음.
     * ""임신한 사람""과 같은 용어가 행정 명령에 의해 도입되었는지, 점진적으로 진화했는지에 대한 역사적 질문이 있음. 다른 곳에서는 ""맨홀""을 ""유지보수 구멍""으로 이름을 변경하는 등의 변화가 있었음. 이러한 결정이 주로 철회되는 것인지 궁금함.
     * 국가가 금지된 단어 목록을 강제하는 것은 어두운 일임. 트럼프의 측근이 트럼프의 세 번째 임기를 위한 헌법 개정을 제안함. 최근 선거는 기만으로 이겼으며, 충분한 사람들이 거짓말을 믿어 선거가 이루어짐. 이는 민주주의가 아님. 실제 선거는 유권자가 잘 알고 있어야 함. FBI 조사에 관여한 직원이 해고됨. 이는 보복적임.
     * 다음은 NASA가 될 것임. 기후 변화와 기타 환경 변화에 대한 증거를 제거해야 하기 때문임.
     * 이 반언론 자유 규정을 도입하기 위해 어떤 규정을 10개나 줄였는지 궁금함.
     * 며칠 전 DeepSeek이 톈안먼 광장과 다른 ""민감한 주제""에 대한 질문에 답하지 않았다는 헤드라인이 폭발했음을 기억함. 이제는 거대한 벽의 내부 부분에 오신 것을 환영함.
     * CDC의 모든 직원이 내일 그만둔다면, 비영리 단체를 설립하고 CDC 인력으로만 구성하여 작업을 재개하는 것이 얼마나 어려울지 궁금함. 자금 조달이 가능하다고 가정할 때, 연구실, 물류, 조직적 파트너십, 데이터 접근 등이 장애물이 될 수 있음. 반쯤 진지함.
"
"https://news.hada.io/topic?id=18991","2024년에 인쇄된 것으로 보이는 다수의 포켓몬 플레이테스트 카드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  2024년에 인쇄된 것으로 보이는 다수의 포켓몬 플레이테스트 카드

추적 점에 대하여

     * 대부분의 가정 및 사무실 프린터는 인쇄된 용지에 매우 작은 노란 점 형태로 메타데이터를 추가함. 이 점들은 육안으로는 보이지 않음.
     * 점의 배열은 프린터 브랜드마다 다르며, 일부는 아예 점을 남기지 않음. 이 점들은 프린터의 일종의 ""서명"" 역할을 하며, 법 집행 기관에서 문서 포렌식 증거로 사용됨.

점 읽는 방법

     * 브랜드마다 다른 점 인코딩 패턴을 사용하며, 모든 패턴이 해독 가능한 것은 아님. 이 정보는 공개되지 않으며, 알려진 패턴은 일반 대중에 의해 해독됨.
     * 가장 잘 알려진 패턴은 2005년에 해독된 ""Xerox DocuColor"" 코드임. 이 경우, 15x8 그리드가 체커보드처럼 인쇄된 용지 전체에 반복됨.

""프로토타입"" 포켓몬 카드의 추적 점

     * 2024년부터 경매에 등장한 초기 프로토타입 및 플레이테스트 카드들이 있음. 대부분은 타쿠미 아카바네와 관련이 있으며, 이 카드들은 가정/사무실 프린터로 인쇄되어 많은 추적 점을 가짐.
     * 점 패턴은 2024년 인쇄 날짜를 나타냄.

변형 분석

  알파 프로토타입

     * 알파 프로토타입은 대부분 고유한 점 패턴을 가짐. 일부는 Konica Minolta 또는 Epson 프린터에서 인쇄된 것으로 보임.
     * 일부 복사본은 알파 점과 ""Xerox"" 점을 모두 가짐. 이는 일부 알파 카드가 스캔/복사되어 2024년에 재인쇄되었음을 시사함.

  베타 플레이테스트

     * 두 가지 변형, HQ와 LQ가 있음. HQ는 아직 점이 관찰되지 않았고, LQ는 항상 2024년 점이 관찰됨.
     * HQ 베타는 알파 패턴의 미세한 흔적을 뒷면에 가지고 있어, HQ 베타가 알파 카드에서 스캔/복사되었음을 시사함.

  델타 플레이테스트, 알파 프레젠테이션 및 감마 플레이테스트

     * 이들 변형은 모두 LQ 베타와 유사하며, 모든 관찰된 복사본은 2024년 점을 가짐.

  베타 프레젠테이션

     * 아직 고해상도 스캔은 없지만, 점의 증거는 없음. 인쇄 품질은 다른 프린터가 사용되었음을 시사함.

감사의 말

     * 데이터 수집 및 분석에 도움을 준 여러 사용자들에게 감사의 말을 전함.

        Hacker News 의견

     * 대형 등급 회사가 기본적인 위조를 확인하지 않는 것은 사기에 연루된 것처럼 보임. 이는 비디오 게임 등급 회사 Wata와 유사한 상황임.
          + Wata는 게임의 가치를 부풀렸다는 혐의를 받고 있음.
     * 컬러 프린터가 컬러 잉크가 부족할 때 흑백 문서를 인쇄하지 않는 이유는 비밀 노란 점을 인쇄하기 위해 컬러 잉크가 필요하기 때문이라는 이론이 있음.
     * 연구가 위조 카드를 소유한 사람에게서 나온 것 같아 흥미로움. 그 사람은 그냥 카드를 재판매하고 입을 다물 수도 있었음.
     * mtg에 관심이 있다면 Tavis King이 지식이 많은 사람임. 그는 부스터를 인쇄 시트에 매핑하여 얼마나 많은 Lotus가 남아 있는지 확인함.
     * Pokemon에 대해 잘 모르지만, 2024년이 합법적인지 아닌지 알 수 없었음. 기사에서는 카드가 언제 만들어졌어야 하는지 가정하는 것 같음.
     * Pokemon TCG의 유명한 ""프로토타입 카드""의 진위가 의심받고 있음.
          + Takumi Akabane의 개인 컬렉션에서 수백 장의 프로토타입 카드가 판매되기 시작함.
          + Akabane는 Creatures에서 2008년까지 근무했으며, 최근 카드에 서명하기 위해 이벤트에 참석함.
          + 등급 회사 CGC는 Akabane와 협력하여 카드의 진위를 확인함.
     * 90년대 후반에 가짜 매직 카드를 인쇄하려고 시도했던 기억이 있음. 육안으로는 훌륭해 보였지만, 현미경으로 보면 인쇄 기술의 차이가 명확했음.
     * 노란 점에 어떤 개인 정보가 인쇄되는지 궁금함. Linux에서 인쇄할 때도 존재하는지 궁금함.
          + 날짜와 프린터 일련번호가 인쇄됨. 프린터 펌웨어에 의해 이루어지므로 OS 드라이버를 사용해도 도움이 되지 않음.
     * 프린터 점에 대해 알게 됨. 이 커뮤니티에 더 익숙한 사람이 배경을 제공할 수 있는지 궁금함.
          + ""베타 카드""가 한동안 등장했고 논란의 주제였음.
          + 카드 인증 사업이 관련되어 있음. 이 사기의 규모는 어떠하며, 앞으로의 영향은 무엇인지 궁금함.
     * 프린터가 이 기술을 가지고 있는 것은 멋지지만, 프린터로서의 기능을 저하시킴.
     * 만약 1960년대에 Marvel 만화를 인쇄하던 프레스와 동일한 모델을 구입한 사람이 있다면, 수십 년 후에 가치 있는 만화를 위조할 가능성이 있음.
          + 빈티지 프레스, 잉크, 종이, 스테이플을 사용하여 민트 상태의 위조품을 인쇄할 수 있음.
          + 사람들을 속일 가능성은 어느 정도일지 궁금함.
"
"https://news.hada.io/topic?id=18993","Apple과 SpaceX, 아이폰에서 Starlink 위성 네트워크 지원을 위한 협력 체결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Apple과 SpaceX, 아이폰에서 Starlink 위성 네트워크 지원을 위한 협력 체결

     * Apple이 T-Mobile, SpaceX와 협력해 iPhone 소프트웨어에 Starlink 네트워크를 추가 지원하기 시작함
     * 이전에는 T-Mobile이 Starlink를 Samsung 스마트폰(S24, Z Fold 등) 위주로만 언급했으나, 이번에 극소수 iPhone에 대한 베타 테스트도 열림
     * 기존에 Apple은 Globalstar를 통해 위성 통신 기능을 제공해 왔음
     * 지금은 문자 전송에만 사용 가능하며, 연결이 안 잡힐 지역에서 위성 연결을 시도함

iPhone에서 Starlink 활용이 가능해진 배경

     * Apple과 SpaceX는 iPhone에서 자동으로 Starlink 위성을 찾을 수 있는 소프트웨어 기능을 개발함
     * 전통적으로 Apple의 위성기능은 Globalstar를 사용해, 기기를 하늘 방향으로 조정해야 했음
     * Starlink 위성 기능은 특별한 조정 없이 포켓 속에서도 연결 가능하도록 설계됨
     * T-Mobile은 자사 고객이 셀룰러가 잡히지 않는 지역에서 Starlink 위성과 문자 메시지로 통신하도록 지원함

T-Mobile Starlink 베타 프로그램

     * Starlink 베타 프로그램에 선발된 일부 iPhone 사용자들은 “당신은 T-Mobile Starlink 베타에 포함됨”이라는 안내 문자를 받음
     * iOS 18.3 버전으로 업데이트한 후, 설정 메뉴의 별도 스위치로 위성 연결 상태를 제어할 수 있음
     * 현재 미국 지역에서만 이용 가능하며, T-Mobile은 더 넓은 사용자에게 이 기능을 2월쯤 확대할 계획임
     * Android 15 기기에 대해서도 일부 동일한 베타 테스트가 진행 중임

Apple의 기존 Globalstar 서비스와의 차이

     * Apple의 Globalstar 서비스는 이미 여러 국가에서 긴급 구조용 문자 및 연락 기능을 제공해 왔음
     * Globalstar 사용 시 하늘 쪽 방향을 맞춰야 연결되지만, Starlink 기능은 자동으로 위성 연결을 시도함
     * 둘 다 오지와 같은 셀룰러 사각지대를 주로 해결하기 위한 목적임
     * Starlink는 데이터 전송과 음성 통화로 확장할 계획이 있으나, 현재는 문자만 지원함

향후 전망

     * iPhone의 Starlink 지원으로, Apple이 Globalstar 외 다른 위성 네트워크를 동시에 활용할 수 있게 됨
     * Apple은 iOS 18.3 업데이트에 AI 기능을 강조했으나, Starlink 지원에 대해선 공식 발표가 없었음
     * SpaceX와 T-Mobile은 점차 이 기능을 고도화해 음성·데이터 통신까지 제공할 예정임
     * 향후 다양한 국가와 통신사에서도 Starlink 연동 서비스가 확대될 가능성이 높음

   tru...m
"
"https://news.hada.io/topic?id=18978","DeepSeek의 R1-Zero 및 R1 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DeepSeek의 R1-Zero 및 R1 분석

     * ARC Prize Foundation은 AGI(인공지능 일반화)를 정의하고, 측정하며, 새로운 아이디어를 고취하는 것을 목표로 함
     * AGI를 아직 달성하지 못했으며, 순수 LLM(대규모 언어 모델) 사전 훈련의 확장이 해결책이 아님
     * 2023-24년 동안 LLM 스타트업에 약 200억 달러가 투자된 반면, AGI 스타트업에는 약 2억 달러만 투자됨

DeepSeek의 R1-Zero와 R1 분석

     * DeepSeek에서 발표한 R1-Zero와 R1 시스템이 OpenAI의 o1 시스템 수준에 가까운 결과를 보였다는 점이 큰 주목을 받고 있음
     * R1-Zero와 R1 모두 약 15~20% 정도의 ARC-AGI-1 점수를 기록함
     * GPT-4o가 5%를 기록한 것에 비해 훨씬 높은 점수임
     * 최근 AI 산업 주류는 LLM(대규모 언어 모델)의 단순 확장에 집중해 왔지만, 이는 AGI를 실현하는 데 직접적인 해법이 아니라고 보고 있음
     * ARC Prize Foundation은 ARC-AGI-1이라는 벤치마크를 통해, 새로운 문제를 학습 시키지 않은 상태에서도 적응할 수 있는 AI 시스템 연구를 장려하고 있음

R1-Zero가 R1보다 더 중요함

     * DeepSeek의 연구 결과로 R1-Zero와 R1이 등장함
     * R1-Zero, R1, OpenAI의 o1(low compute)은 모두 ARC-AGI-1에서 15~20%로 유사한 점수를 기록함
     * 2024년 말에 OpenAI가 공개한 o3 시스템은 ARC-AGI-1에서 최대 88%까지 점수를 높여, 새로운 문제를 적응적으로 해결할 수 있다는 점을 보여줌
     * 다만 o3는 비공개적인 부분이 많아 연구자들이 세부 기술을 파악하기 어려운 상황임
     * R1-Zero는 R1에 비해 인간의 직접 레이블링(SFT)을 거치지 않은 점에서 미래적 가치가 더 크다고 여겨짐

R1-Zero가 인간의 병목을 제거함

     * 기존의 추론 모델들은 문제 풀이 과정(Chain-of-Thought, 이하 CoT)에 대해 사람의 레이블링(SFT) 또는 기계의 보상(RL)을 결합해 학습함
     * R1-Zero는 SFT 없이, 즉 인간 전문가 레이블 없이 오직 강화학습(RL)만으로 CoT를 학습함
     * ARC-AGI-1에서 R1-Zero가 14%, R1이 15%를 기록해 거의 같은 성능을 보임
     * MATH AIME 2024 등 다른 벤치마크에서도 R1-Zero와 R1의 결과가 비슷하게 나타남
     * 언어 섞임이나 가독성 문제에 대한 우려가 있었으나, 실제 테스트에서는 큰 incoherence 없이 수학·코딩 도메인에서 잘 작동하는 모습임
     * 이를 통해 얻은 주요 시사점은 다음과 같음
          + 사람의 레이블링 없이도 특정 도메인에서 정확하고 이해 가능한 추론이 가능함
          + R1-Zero는 강화학습만으로 자체 도메인 전용 토큰 표현(DSL)을 만들 수 있음
          + SFT는 추론 범위를 넓히기 위해 여전히 필요할 수 있음
     * 궁극적으로, R1-Zero는 인간 의존 없이 스스로 학습 데이터를 만들어낼 수 있다는 '무인간 병목' 확장 가능성을 보여줌
     * 아래는 ARC-AGI-1에서 여러 시스템이 기록한 점수와 평균 토큰 수, 추론 비용 등을 간략히 서술한 내용임
          + r1-zero: 14%, SFT 없이 순차 추론 검색 없음, 평균 11K 토큰, 비용 약 $0.11
          + r1: 15.8%, SFT 적용, 순차 추론 검색 없음, 평균 6K 토큰, 비용 약 $0.06
          + o1(low): 20.5%, SFT 적용, 순차 추론 검색 없음, 평균 7K 토큰, 비용 약 $0.43
          + o1(med): 31%, SFT 적용, 순차 추론 검색 없음, 평균 13K 토큰, 비용 약 $0.79
          + o1(high): 35%, SFT 적용, 순차 추론 검색 없음, 평균 22K 토큰, 비용 약 $1.31
          + o3(low): 75.7%, SFT 적용, 검색 및 샘플링 사용, 평균 335K 토큰, 비용 약 $20
          + o3(high): 87.5%, SFT 적용, 검색 및 샘플링 사용, 평균 57M 토큰, 비용 약 $3,400

신뢰도를 위한 비용

     * 현재 AI 시장에서 크게 변화하는 흐름은 “비용을 더 들이면 정확도와 신뢰도를 높일 수 있다”는 점임
     * 더욱이, 학습 비용에서 추론 비용으로 비중이 옮겨가는 추세임
     * 추론 단계에서 많은 컴퓨팅 자원을 투입하면 더 정확하고 안정적인 결과를 얻을 수 있음
     * 대부분의 기업에서는 AI 시스템의 신뢰도 문제 때문에 대규모 자동화를 도입하지 못했음
     * ARC-AGI 분야의 진전이 AI 에이전트의 신뢰도를 높일 것이라는 전망이 있으며, Anthropic, OpenAI, Apple 등도 에이전트형 서비스를 준비 중임
     * 사용자는 필요한 정확도를 얻기 위해 더 많은 비용을 기꺼이 지불하는 경향을 보이게 될 것임
     * 따라서 AI 추론 수요가 훨씬 늘어날 것으로 예상되며, 이는 컴퓨팅 자원 수요 증가로 이어질 것임

추론이 곧 학습임

     * 예전에는 대규모 데이터를 수집하거나, 기존 LLM으로부터 합성(synthetic) 데이터를 생성해 학습에 이용했음
     * 이제는 추론 과정에서 사용자나 시스템이 실제로 새로운 유효 데이터를 생성할 수 있게 됨
     * 이는 “추론이 학습을 겸한다”는 새로운 경제학적 전환을 의미함
     * 사용자 수가 많은 AI 모델은 더 많은 추론 데이터를 수집하게 되고, 그 자체가 모델 개선으로 이어짐
     * 만약 SFT(인간 레이블링) 과정까지 불필요해진다면, 단순히 큰 비용을 투입해 검색·합성·검증을 반복하는 시스템으로도 효율적인 학습이 가능해질 것임

결론

     * AI 시스템의 추론 수요가 증가함에 따라 시장 재평가가 지속적으로 일어날 것으로 보임
     * CoT 방식과 검색(search) 기법이 결합된 오픈 소스 R1 시스템이 등장함으로써, 더 많은 연구자와 개발자가 한계를 시험하고 혁신을 가속화할 수 있을 것으로 기대됨
     * R1-Zero와 R1이 공개된 것은 전 세계 AI 발전에 큰 기여가 될 것임
     * 여러 팀이 ARC Prize 2025를 목표로 R1 같은 시스템을 활용하겠다는 의지를 보이고 있어, 향후 결과가 기대됨
     * DeepSeek가 공개한 R1은 AGI로 가는 중요한 단서를 제시함으로써 과학적 진보에 기여했다는 점에서 긍정적인 평가를 받음

        Hacker News 의견

     * AI 시스템 개발자들이 새로운 데이터 생성으로 경제적 변화가 일어날 가능성이 있음. 고객들이 데이터 생성 비용을 부담하여 모델의 품질을 향상시킬 수 있음
          + 그러나, 이러한 데이터가 정말로 고품질인지에 대한 회의적인 시각이 존재함
          + 현재 SOTA 모델은 GPT4 수준에 머물러 있으며, 향후 2-3년 내에 더 발전할 가능성이 있음
          + 추론 모델을 사용하여 데이터를 생성하고, 이를 비추론 모델에 훈련시키는 것이 유망한 아이디어임
          + 그러나, 추론을 모델 가중치에 얼마나 잘 담을 수 있을지는 미지수임
          + OpenAI가 이미 o3 훈련 데이터를 사용하여 새로운 모델을 훈련했어야 한다는 의견이 있음
     * 기본 모델의 개선이 필요하지 않을 수도 있으며, 일반적인 모델로 충분할 수 있음
          + 추론 모델의 가격을 낮추고 품질을 향상시키는 것이 중요함
     * o3 시스템은 새로운 문제에 적응하는 컴퓨터의 첫 번째 실용적 구현을 보여줌
          + 그러나, OpenAI가 o3를 75%의 공공 훈련 세트로 훈련했다고 발표했으며, ARC-AGI 데이터의 성능 기여도는 아직 테스트되지 않음
     * 인간의 병목 현상을 제거하는 주장이 있으나, 수학과 컴퓨터 과학을 제외한 대부분의 분야에서는 검증 가능한 보상을 정의하기 어려움
     * AI 경제에서 두 가지 주요 변화가 발생하고 있음
          + 더 많은 비용을 지불하여 높은 정확도와 신뢰성을 얻을 수 있음
          + 훈련 비용이 추론 비용으로 이동하고 있음
          + 이는 추론에 대한 수요를 증가시키고, 컴퓨팅 수요를 증가시킬 것임
     * o3가 AGI-1에서 75%를 기록했으며, R1과 o1은 25%에 그쳤음
     * 많은 컴퓨팅이 추론으로 이동하는 것은 현재 AI 투자에 큰 영향을 미침
          + NVDA에게는 나쁜 소식이며, 추론 중심 솔루션이 더 나은 경제성을 가짐
     * Baseten의 Mike는 이 작업을 지원하게 되어 자랑스럽다고 밝힘
     * R1-Zero는 인간의 병목 현상이 없는 잠재적 확장 체제를 보여줌
          + 그러나, RL 방식이 여전히 많은 인간 데이터를 필요로 한다는 의문이 있음
     * R1은 비용 대비 성능 면에서 뛰어난 성과를 보임
          + 복잡한 문제의 데이터 생성기로 R1을 사용하는 것이 유망하다고 생각됨
     * LLM의 미래는 맞춤형 개별 앱에 있을 것으로 예측됨
          + AI 에이전트에게 원하는 앱과 요구사항을 말하면, 백엔드부터 프론트엔드까지 모든 것을 구축함
          + 소프트웨어를 테스트하고 오류를 수정하며, 프로덕션에 배포함
          + 현재 LLM이 완벽하지는 않지만, 자동으로 코드를 실행하고 컴파일하며, 오류를 LLM에 피드백하는 시스템과 워크플로우가 이미 존재함
"
"https://news.hada.io/topic?id=19044","Anthropic: "지원자는 AI 어시스턴트를 사용하지 말아야 한다" 방침","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Anthropic: ""지원자는 AI 어시스턴트를 사용하지 말아야 한다"" 방침

     * Anthropic의 온라인 지원 서류에 있는 내용

     ""AI 시스템을 사용하여 업무 효율성을 높이는 것을 권장하지만, 지원 과정에서는 AI 도우미를 사용하지 말 것을 요청합니다. 이는 지원자의 개인적인 관심사를 이해하고, AI 없이 의사소통 능력을 평가하기 위함입니다.""
     Anthropic에 지원하는 이유는 무엇인가요?(이 답변을 매우 중요하게 평가하며, 좋은 답변은 보통 200-400 단어로 구성됩니다.)

        Hacker News 의견

     * 한 사용자는 AI 사용을 권장하지만, 지원서 작성 시 자신의 글을 쓰라는 요청은 합리적이라고 생각함. 이는 장기적인 협력을 위해 더 나은 선택이라고 봄
          + AI 사용이 부정행위라는 접근 방식은 현실적이지 않다고 주장함. AI가 숙제를 대신해도 재능을 대신하지는 않음
          + AI를 사용하지 못하게 하는 것은 정직한 사람들을 차별하는 것이라고 봄
     * 자폐증과 난독증을 가진 사용자는 AI 도구가 시각적 사고를 글로 표현하는 데 필수적이라고 설명함
          + Anthropic의 지원 절차가 AI를 접근성 도구로 사용하는 사람들을 배제한다고 비판함
          + AI를 사용한 커뮤니케이션이 더 진정한 생각의 표현이라고 주장함
     * AI가 일반 코더를 10배 더 생산적으로 만들 수 있다면, 인터뷰에서 그 능력을 보고 싶어할 것이라고 주장함
          + 인터뷰 시스템이 구식이라고 비판함
     * 대형 기술 회사에서 기술 인터뷰를 많이 하는 사용자는 AI 도구 사용을 허용해야 한다고 주장함
          + 인터뷰의 목적은 문제 해결 능력과 소통 능력을 평가하는 것이라고 설명함
     * Anthropic의 정책을 지지하며, AI를 사용한 부정행위를 합리화하는 사람들이 많다고 지적함
          + 지원서 질문이 실제로 중요한 의미를 가질 수 있다고 설명함
     * Anthropic이 현실적인 작업 미리보기를 제공하지 않도록 요청하는 것이 아이러니하다고 지적함
          + AI 사용을 장려하는 회사라면 지원자들이 AI를 사용하는 상황에서 어떻게 자신을 표현하는지 보고 싶어할 것이라고 주장함
     * 인터뷰 중 AI 사용이 명백했던 사례를 언급하며, AI에 의존하면 추상적 사고 능력이 떨어질 수 있다고 설명함
"
"https://news.hada.io/topic?id=19014","정부 정보 위기, 예상보다 심각한 상황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         정부 정보 위기, 예상보다 심각한 상황

     * 정부 정보 위기의 심각성
          + 정부 정보의 중요성
            정부 정보는 민주주의의 증거로서 보존이 필수적임. 정보의 변화는 민주주의에서 정상적인 현상이며, 이는 정부의 정책 변화와 정보 삭제의 경계가 디지털 시대에 흐려졌음을 의미함.
          + 정보 보존의 필요성
            정부 정보는 과거의 정책과 데이터, 그리고 정부의 행동을 기록하기 위해 보존되어야 함. 이는 시민들이 정부의 가치와 행동을 이해하고 평가하는 데 필수적임.
     * 디지털 시대의 정보 보존 문제
          + 디지털 정보의 취약성
            디지털 시대에는 정보가 쉽게 이동, 변경, 삭제될 수 있음. 정부 출판 기관은 정보 보존이나 무료 접근을 보장할 의무가 없음.
          + 보존의 격차
            일부 디지털 정보는 GPO, NARA, 의회 도서관에 의해 보존되지만, 법적 기반이 약하고 보존에는 큰 격차가 존재함. 비정부 프로젝트가 웹 수집을 통해 정보를 저장하려 하지만, 이는 불완전하고 장기적인 접근 보장이 취약함.
     * 트럼프 행정부와 정보의 취약성
          + 정보 삭제의 위험성
            트럼프 행정부의 초기 조치는 디지털 정보의 취약성을 대중에게 알렸으며, 이는 특정 행정부에 국한되지 않음. 정보 삭제는 보존 인프라의 격차로 인해 가능해짐.
          + 장기적 해결책의 필요성
            정보 손실과 변경의 규모는 전례가 없을 수 있으며, 즉각적인 단기 조치가 필요함. 그러나 도서관, 기록 보관자, 시민들은 장기적인 해결책을 요구해야 하며, 새로운 분산형 디지털 보존 인프라가 필요함.
"
"https://news.hada.io/topic?id=18984","아들을 위한 T1D 스마트워치 직접 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         아들을 위한 T1D 스마트워치 직접 제작

배경

     * 9살 아들이 1형 당뇨병을 앓고 있어, 췌장이 항상 수동 모드로 작동해야 하는 상황임.
     * 건강한 췌장은 인슐린과 글루카곤을 생성하여 혈당을 조절함.
     * 1형 당뇨병 환자는 이러한 조절 장치 없이 혈당을 관리해야 하며, 저혈당은 치료하지 않으면 응급 상황이 될 수 있음.
     * CGM(연속 혈당 모니터링)과 폐쇄 루프 인슐린 펌프 같은 기술이 도움이 되지만, 경고음이 자주 울리는 문제가 있음.
     * 혈당 데이터를 자주 확인해야 하는 부담이 있으며, 이를 줄이기 위한 방법을 찾고자 함.

""왜 Apple Watch를 사지 않나요?""

     * Apple Watch는 아이에게 너무 많은 기능과 알림을 제공하여 학교에서 집중을 방해할 수 있음.
     * CGM 데이터의 신뢰할 수 있는 표시를 제공하지 않음.
     * 단순하고 신뢰할 수 있는 장치가 필요함.
     * 많은 부모들이 Apple Watch 대신 단순한 기능의 장치를 원함.

제품 요구사항

     * 학교에서 아들을 방해하지 않는 단순한 디자인.
     * 운동장에서의 활동을 견딜 수 있는 내구성.
     * 신뢰할 수 있는 CGM 데이터 제공.
     * 중요한 순간에 촉각 피드백 제공.

과정

  초기 브레드보드와 모듈

     * M5Stick 장치를 사용하여 CGM 데이터를 표시하는 시도를 했으나, 배터리 수명이 짧고 방수 기능이 부족했음.
     * Adafruit와 Sparkfun의 모듈을 사용하여 아두이노 소프트웨어와 주요 부품을 연결함.

  첫 번째 큰 장애물: 신뢰할 수 있는 BLE 연결

     * Dexcom API에서 최신 데이터를 가져오는 iOS 앱과의 신뢰할 수 있는 BLE 연결을 구축하는 것이 어려웠음.
     * 스마트워치가 5분마다 iOS 앱에 연결하여 BLE 읽기 요청을 수행하는 방식으로 해결함.

  커스텀 PCB로의 도약

     * Fusion 360을 사용하여 3D 모델링을 배우고, 커스텀 PCB를 설계함.
     * KiCad를 사용하여 전기 공학 기초와 PCB 설계 소프트웨어를 학습함.

  놀라움! 촉각 모터는 까다로움

     * 촉각 모터의 저항이 달라 성능이 일정하지 않음.
     * ERM 모터를 사용하여 혈당 추세에 따라 빠르게 탭하는 알림을 구현함.

  디스플레이 옵션

     * 1.69인치 240x280 픽셀 TFT IPS 디스플레이를 사용함.
     * 터치스크린을 포함하지 않음으로써 프로젝트를 단순화함.

  케이스 제작 및 마감

     * Fictiv를 통해 케이스를 제작함.
     * MJF 공정을 통해 내구성 있는 나일론 소재로 제작함.

  PCB 반복

     * 9개의 PCB 버전을 개발하며, 4층 PCB로 전환하여 공간 요구 사항을 충족함.
     * BMA400 가속도계를 추가하여 활동 추적 및 장치 착용 여부를 감지함.

  맞춤형 유리 제작

     * 중국 공장에서 맞춤형 유리를 소량 제작함.
     * OCA 필름을 사용하여 유리와 디스플레이를 결합함.

  조립 문제

     * 케이스의 크기와 사용 요구 사항으로 인해 조립이 까다로웠음.
     * TFT 디스플레이의 빛 누출을 방지하기 위해 정확한 정렬이 필요했음.

  Arduino의 보안 문제

     * ESP32 기반 펌웨어를 보호하기 위해 Flash Encryption과 Secure Boot v2가 필요함.
     * Arduino IDE에서는 이를 지원하지 않음.

  최종 보스 전투: 배터리 수명 최적화

     * 대부분의 시계가 약 3일의 배터리 수명을 가졌으나, 아들이 사용하는 시계는 6-7일의 배터리 수명을 가짐.
     * 배터리 수명을 최적화하기 위해 다양한 방법을 시도했으나, 명확한 해결책을 찾지 못함.

배운 점

     * 하드웨어 개발은 재미있지만 도전적임.
     * 프로토타입에서 제품으로의 전환은 큰 도전임.
     * PCB 설계와 제작은 가능하며, JLCPCB를 통해 저렴하게 제작할 수 있음.
     * 현대 스마트워치의 소매 가격은 기술과 연구 개발에 비해 저렴함.
     * 하드웨어 프로젝트를 지속하려면 부품 업데이트가 필요함.

결론

     * 아들과 함께 6개월 동안 시계를 사용하며, 그의 학교 생활에서 혈당 인식을 개선함.
     * 하드웨어 R&D에 대해 많은 것을 배웠으며, 이는 소프트웨어 개발과는 다른 도전임.
     * 하드웨어 프로토타입을 만드는 것은 어렵지만, 실제 어려움은 제조, 비즈니스 관계 구축, 시장 출시 및 장기 지원임.
     * Glowcose와 SugarPixel의 개발자들에게 많은 존경을 표함.
     * 오픈 소스 경로로 프로젝트를 진행할 가능성을 고려 중임.

        Hacker News 의견

     * 놀라운 엔지니어링 작업임
          + 장기간 전원을 완전히 차단하는 문제는 해결 가능한 문제임
          + 마이크로컨트롤러가 전체 회로를 완전히 차단할 수 있으며, 버튼과 같은 것이 전원을 다시 켤 때까지 거의 전력이 소모되지 않음
          + 프로토타입 제작을 쉽게 하기 위해 사용할 수 있는 기성품이 있음
          + SparkFun 스위치와 같은 고급 소프트 전원 스위치 회로는 버튼을 눌러 오작동하는 장치를 강제로 종료할 수 있는 기능을 포함함
          + SparkFun 스위치의 설계는 장치가 실행 중일 때 버튼이 눌렸는지 마이크로컨트롤러가 알 수 있도록 하여, 기존 버튼을 재사용하여 장치가 꺼져 있을 때 전원을 복원할 수 있음
          + 장치는 비활성 상태가 일정 시간 지속되거나 배터리가 너무 낮을 때 자동으로 꺼지거나, 사용자가 버튼을 몇 초 동안 눌러 장치를 완전히 끌 수 있음
     * xdrip 프로젝트의 주요 개발자가 맞춤형 시계를 출시했음
          + Reddit에 개발자의 게시물이 있으며, 시계는 구매 가능하고 xdrip과 통합 가능함
          + 과거에는 소변 샘플을 수집하고 화학 약품을 떨어뜨려 포도당 양을 확인했음
          + 이제 맞춤형 솔루션을 구축하고 있어 감탄스러움
          + 인슐린과의 합성 신호에서 새로운 발견이 생물학적 해결책을 제공하기를 바람
     * Apple Watch에 자체 펌웨어를 푸시할 수 있는 권한이 있었다면 소프트웨어로 해결할 수 있었음
     * 자신의 프로젝트를 통해 비슷한 결과를 얻으려 했으며, 관련 내용을 블로그에 작성했음
          + 더 많은 사람들에게 제공할 수 있는 경로를 찾기를 바람
          + 도움이 필요하면 알려주기를 바람
     * OCA 라미네이터가 없었지만 주철 토르티야 프레스를 사용했음
          + 아들의 건강을 정확히 추적하고 지속되기를 바람
          + Apple은 배터리 수명과 장치의 원활한 작동을 위해 원하는 작업을 수행하기 어렵게 만듦
     * 처음부터 모든 것을 구축한 놀라운 작업임
          + PineTime과 같은 해킹 가능한 장치를 사용하거나 저렴한 피트니스 트래커를 해킹하는 방법도 고려할 수 있음
          + 처음부터 장치를 만드는 것은 대단한 성취이지만, 다른 사람들이 시도할 때는 더 쉬운 방법으로 시작할 수 있음
     * TFT 디스플레이 앞에 유리를 단순히 놓으면 저예산 Android 폰처럼 보일 수 있음
          + 토르티야 프레스 DIY 방법에 대한 더 많은 정보를 요청함
     * 건강 관리나 결과를 개선하는 엔지니어링에 애착이 있으며, 충분한 투자가 이루어지지 않는다고 느낌
          + 자금 지원을 받기를 바람
"
"https://news.hada.io/topic?id=18990","Postiz - AI를 이용한 소셜 미디어 스케쥴링 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Postiz - AI를 이용한 소셜 미디어 스케쥴링 도구

     * Buffer, Hypefury 등의 셀프호스트 가능 대체제
     * 모든 소셜 미디어 포스팅을 스케줄 가능
          + 인스타그램, 페이스북, X, Threads, Bluesky, 유튜브, 틱톡, 슬랙, 디스코드, 레딧, 핀터레스트, 마스토돈, 링크드인, Dribbble
     * 분석도구를 통한 성과 분석
     * 다른 팀 멤버와 협업해서 포스트 교환/구매
     * 팀멤버를 초대해서 협업/댓글/스케줄링 함께 가능
     * NX(Monorepo) + NextJS(react) + NestJS + Prisma(기본 PostgreSQL) + Redis(BullMQ) + Resend(이메일 알림)
"
"https://news.hada.io/topic?id=18922","Wayland vs. X11 입력 지연 논의의 구체적 수치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Wayland vs. X11 입력 지연 논의의 구체적 수치

     * 어제 읽은 블로그 게시물에서는 Linux 사용자가 Wayland에서의 입력 지연에 대한 불만을 논의함. 이 사용자는 주관적인 경험을 설명했지만, 명확한 증거를 제시하지 못했음.
     * 필자는 Wayland 사용자로서 커서 지연이 X11보다 더 크다는 인상을 공유함. 실험은 90 FPS의 카메라로 제한되었지만, 필자는 240 FPS 카메라를 사용하여 더 명확한 결과를 얻을 수 있을 것이라 생각함.

실험 설계

     * 필자는 카메라를 화면과 책상에 향하게 하고, 마우스 커서와 손을 프레임에 포함시켜 마우스를 반복적으로 움직이는 모습을 녹화함.
     * Wayland와 X11 세션에서 각각 16번씩 녹화하고, 결과 비디오 파일을 JPEG 시리즈로 변환하여 마우스가 움직이기 시작한 프레임부터 커서가 움직인 프레임까지를 계산함.

하드웨어 세부사항

     * 배포판: Fedora Workstation 41
     * GNOME 버전: 47
     * CPU: AMD Ryzen 9 5950X
     * GPU: AMD Radeon RX 7900XT
     * 모니터: Gigabyte M32U (4k IPS @ 144.99, DPI 스케일링 없음)
     * 마우스: Logitech G502 Lightspeed
     * 카메라: iPhone 15 Pro, 슬로모 240 FPS

제한 사항

     * 240 FPS는 여전히 충분하지 않음. 144Hz 화면에서는 화면 새로 고침당 두 개의 카메라 프레임 미만임.
     * 픽셀이 즉시 전환되지 않으므로 커서가 새 위치에서 거의 보이기 시작하는 모호한 프레임이 있음.
     * 비디오 녹화에 중복 프레임이 포함되어 있음. 이를 시간 경과로 해석하여 정상적으로 계산함.

결과

     * GNOME X11의 평균 지연은 16.7ms, Wayland는 23.2ms로, Wayland가 X11보다 약 6.5ms 더 많은 커서 지연을 보임.
     * 이 차이가 통계적으로 유의미한지 여부는 불확실하지만, 명확하고 일관된 차이가 있음.

결론

     * 이 결과는 X11과 Wayland 간의 입력 지연 차이가 존재함을 증명함. 추가적인 하드웨어와 새로 고침 속도에 대한 테스트가 필요함.
     * 이 테스트는 Wayland가 게임에서 X11보다 더 높은 입력 지연을 보인다는 것을 증명하지 않음. 커서에만 국한된 지연일 가능성이 있음. 추가 테스트가 필요함.

        Hacker News 의견

     * 과학적 방법을 통해 실험을 설계하는 것이 중요하다는 의견이 있음. Wayland의 추가 지연에 대한 이유는 모르지만, X11의 초기 시절에도 화면 지연에 대한 불만이 많았음. Wayland는 X11보다 새로운 기술이므로 아직 충분한 검토가 이루어지지 않았음.
     * ffmpeg를 사용하여 비디오의 각 프레임의 ""프레젠테이션 시간""을 얻는 방법을 설명함. 웹 브라우저에서도 비슷한 작업을 할 수 있으며, 컴퓨터가 모든 프레임을 빠르게 디코딩할 수 없는 경우 .playbackRate를 낮게 설정해야 할 수 있음.
     * 144Hz 화면에서 Wayland가 X11보다 평균적으로 약 6.5ms 더 많은 커서 지연을 가짐. 이는 거의 1 화면 새로 고침에 해당하며, 60Hz 모니터에서는 1/60초가 될 수 있음. 대부분의 사람들은 이를 설명할 수는 없지만 차이를 느낄 수 있음.
     * 결과는 컴포지터, GPU, 구성에 따라 다를 수 있음. X11은 하나의 X 서버 구현만 사용하므로 이러한 차이가 덜함. 많은 컴포지터/GPU 조합이 하드웨어 커서 플레인을 얻지 못하는 문제가 있을 수 있음.
     * Wayland가 이미 16년이 되었으며, 몇 년 후에는 X가 처음 나왔을 때의 나이와 비슷해질 것임. 그러나 여전히 X보다 좋지 않다는 평가가 있음.
     * 기존 솔루션을 현대적이고 유지보수하기 쉽게 만들려는 시도가 항상 성공적이지 않다는 의견이 있음. 새로운 세대의 개발자들은 성능과 최적화에 대한 지식이 부족하다는 비판이 있음.
     * GPU가 과부하 상태일 때 큰 지연 스파이크가 발생함. X11과 비교 테스트는 하지 않았지만, 이전에는 이런 문제가 없었음. 추가 프레임 지연은 자체적으로 좋지 않으며, 가끔 발생하는 지연 스파이크는 매우 짜증남.
     * iPhone에서 isitsnappy.com을 사용하여 빠르게 측정할 수 있었으며, TV에 연결된 상태에서 Steam Deck 리듬 게임에서 100ms 지연이 발생했음을 확인함.
     * Wayland가 항상 X11보다 한 프레임 느리다면, 모니터를 매우 낮은 새로 고침 속도로 설정하여 실험을 반복할 가치가 있을 수 있음.
     * 이는 아마도 컴포지터에 따라 다를 수 있으며, mutter 문제인지 kwin에서도 재현 가능한지 궁금함.
     * 통계적 전문 지식이 부족하여 차이가 통계적으로 유의미한지 분석할 수 없다는 의견이 있음. 두 샘플 t-검정 통계는 -4.74이며, p-값은 4.20e-05임.
"
"https://news.hada.io/topic?id=19009","애플, Swift Build 오픈 소스화 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       애플, Swift Build 오픈 소스화 발표

     * Swift는 다양한 플랫폼을 지원하는 언어로 인기를 얻고 있으며, 다양한 임베디드 장치와 운영 체제에서 사용 가능
     * Apple은 Swift Build라는 강력하고 확장 가능한 빌드 엔진을 오픈 소스로 공개
     * Swift Build는 Xcode의 빌드 엔진으로 사용되며, ""App Store 앱 및 Apple 자체 운영체제 빌드""에도 활용됨.
          + Linux와 Windows 타겟 빌드도 지원
     * Swift Build의 핵심 기능
          + 빌드 시스템은 프로젝트 설명과 소스 코드를 명령줄 도구, 라이브러리, 애플리케이션 같은 출력물로 변환하는 역할을 함
          + Swift Build는 Swift Package Manager나 Xcode 같은 상위 클라이언트가 요청한 빌드를 계획하고 실행하는 인프라 구성 요소
          + Swift 컴파일러와의 강력한 통합을 통해 Swift 프로젝트의 빌드를 신뢰성 있고 효율적으로 조정
          + 다양한 제품 유형을 지원하며, 고급 빌드 구성 옵션을 제공
          + Swift와 C 코드 빌드 시 병렬성을 극대화하는 빌드 그래프 최적화를 포함
     * Swift Build의 로드맵
          + Xcode의 빌드 엔진과 비교하여 Swift Package Manager의 빌드 엔진은 비교적 단순함
          + Apple 플랫폼에서 두 가지 다른 패키지 빌드 방법이 사용자 혼란을 초래
          + Xcode의 빌드 엔진을 Swift 프로젝트에 기여하고 Swift 컴파일러와 함께 오픈 소스로 개발하여 이러한 문제를 해결하고자 함
          + SwiftPM은 모든 플랫폼에서 통합된 빌드 실행 엔진을 제공할 기회를 가지게 됨
          + 이 변화는 사용자에게 투명하게 작용하며, 모든 기존 패키지와의 완전한 호환성을 유지
          + 새로운 기능과 개선 사항을 모든 플랫폼과 도구에 걸쳐 제공할 수 있는 기반을 마련
          + Swift Build를 SwiftPM의 대체 빌드 엔진으로 통합하는 PR 제출
          + 커뮤니티와 협력하여 모든 플랫폼과 프로젝트 모델에서 향후 도구 개선의 혜택을 누릴 수 있도록 빌드 시스템 통합 작업을 완료하고자 함
     * 참여 초대
          + Swift 코드 빌드 방식을 계속 발전시키기 위해 커뮤니티와 협력하기를 기대함.
          + GitHub의 Swift 조직에서 swift-build 저장소를 찾을 수 있으며, 빌드 및 기여 방법을 설명하는 README와 문서가 포함되어 있음.
          + 풀 리퀘스트와 이슈를 통한 기여를 환영하며, Swift 포럼에서 개선에 대한 피드백과 아이디어를 받고자 함.
          + Swift의 빌드 시스템에 대한 흥미로운 새로운 장이며, Swift의 모든 잠재력을 열어줄 것으로 기대함.

   https://llvm.org/devmtg/2016-11/… 의 12 page. 가 중요한 내용인거 같네요.

   Traditional UNIX compiler/build system model
   • Compiler runs as separate process
   • Primitive mechanisms for communicating dependencies
   • Fixed input/output pipeline defined by command line
   • This is an API ...
   • ... and we haven’t changed it in decades
   • We ❤ breaking APIs

   Java 쪽은 코드사이의 의존성을 알려주는 API가 있어서 빌드도구 들에게 어떻게 하면 incremental build가 되는지 알려주도록 되어 있는 것 같은데,
   ex: Gradle

   Native 빌드에도 해당 방법을 적용하는 방향으로 가야할 것 같습니다.

        Hacker News 의견

     * Swift가 ""모든 것에 좋지만 Apple 플랫폼에 더 좋음""이라는 인식이 언어에 해로울 수 있음. 이는 Swift 생태계에 더 많은 사람을 끌어들이지 못함
          + 경쟁자들은 더 오픈 소스적이고, 기여자가 많으며, 범위가 좁음
          + Xcode 같은 도구를 오픈 소스로 만들지 않으면 다른 언어와의 격차가 커질 것임
     * Swift는 멋진 언어임
          + ""index out of range"" 오류 시, 오류 메시지가 어디서 발생했는지 알려주지 않음
          + Golang은 오류가 발생한 파일과 줄 번호를 알려줌
     * Swift의 상황이 초기 C# 시절을 떠올리게 함
          + C#도 오픈 소스와 크로스 플랫폼으로 홍보되었으나 기대에 미치지 못함
     * Swift가 Apple의 LLVM 포크가 아닌 일반 LLVM을 기반으로 구축되었으면 좋겠음
     * Swift는 Xcode와의 분리를 목표로 해야 함
          + Xcode는 3.1점으로 과대평가된 면이 있음
     * SwiftPM의 새로운 릴리스는 모든 플랫폼에서 통합된 빌드 실행 엔진을 제공할 기회를 줌
          + 이는 Swift의 멀티플랫폼 생태계를 구축하는 열쇠가 될 것임
     * Xcode 없이 Swift 개발이 가능한 길을 열 수 있는지 궁금함
     * Swift 빌드가 Swift의 도구 및 언어 서버와 얼마나 잘 통합되어 있는지 명확하지 않음
          + 언어 서버는 이미 오픈 소스임
     * Swift가 Apple로부터 독립되어 기쁨
          + 크로스 플랫폼 프로젝트에서 URLSession.shared.data가 Linux에서 컴파일되지 않아 다른 언어로 전환한 경험이 있음
     * Swift가 임베디드 시스템에 진지한지 궁금함

   그러니까... 요약하자면 xcode는 지금과 다를바 없이 쓰레기라는거죠?
   ㅠㅠㅠㅠㅠㅠㅠ

   zzz
"
"https://news.hada.io/topic?id=18992","SmolGPT: 작은 LLM을 처음부터 훈련하기 위한 최소한의 PyTorch 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             SmolGPT: 작은 LLM을 처음부터 훈련하기 위한 최소한의 PyTorch 구현

     * 교육 목적으로 설계된 PyTorch 기반의 간단한 LLM 훈련 프로젝트로, 효율적인 훈련과 최신 샘플링 기법을 적용

Features

     * 최소 코드베이스: PyTorch로 구현되어 복잡한 추상화가 없음
     * 최신 아키텍처: GPT 모델로, 플래시 어텐션, RMSNorm, SwiGLU, 효율적인 샘플링 기법 포함
     * 훈련 기능:
          + 혼합 정밀도 (bfloat16/float16)
          + 그래디언트 누적
          + 웜업을 통한 학습률 감소
          + 가중치 감소 및 그래디언트 클리핑
     * 데이터셋 지원: TinyStories 데이터셋 처리 내장
     * 커스텀 토크나이저: SentencePiece 토크나이저 훈련 통합

설치

     * Python 3.8+
     * PyTorch 2.0+ 및 CUDA
     * 최신 GPU 권장

빠른 시작 🚀

  옵션 1: 전체 훈련 사이클

    1. 데이터셋 준비
    2. 훈련 시작
    3. 텍스트 생성

  옵션 2: 사전 훈련된 모델 사용

    1. 자산 다운로드
    2. 추론 실행

사전 훈련된 모델 세부사항

     * TinyStories 데이터셋으로 훈련됨
     * 4096 토큰 어휘, 8 헤드, 8 레이어 트랜스포머, 512 임베딩 차원
     * 약 4억 토큰으로 18.5시간 훈련
     * 검증 손실: 1.0491

훈련 장비 사양

     * GPU: NVIDIA L4 Tensor Core
     * vCPUs: 16
     * RAM: 64 GB
     * VRAM: 24 GB

   참고: 이 구현은 교육 목적으로 현대 LLM 훈련 관행을 참고하여 제작됨. 생산 환경에서는 모델 크기와 데이터셋을 확장하는 것이 좋음.

        Hacker News 의견

     * 한 사용자는 GPT 구현을 C로 작업하면서 메모리 관리와 데이터 관리의 중요성을 배웠다고 언급함. 해당 프로젝트는 약 1500줄의 코드로 구성되어 있으며, GitHub 링크를 공유함
     * 다른 사용자는 numpy를 사용하여 직접 구현하는 것이 다음 단계라고 설명함. 강력한 추상화를 사용하여 시작한 후 점차 추상화를 제거하여 시스템을 완전히 이해할 수 있다고 강조함
     * Google Colab 노트북을 사용하여 A100 GPU에서 약 2시간이 걸리는 프로젝트를 공유함. 무료 계정에서도 작동할 수 있다고 언급함
     * GitHub에는 Andrej Karpathy의 nanoGPT와 같은 여러 프로젝트가 있으며, MoE가 구현된 다른 프로젝트도 있다고 설명함
     * 한 사용자는 특정 모델을 특정 데이터 세트에 훈련시키고 결과를 테스트할 수 있는지에 대해 질문함. 오픈 소스 프로젝트를 찾고 있으며, GPU 사용 가능 여부를 알려주고 CPU로 대체할 수 있는 Docker 컨테이너를 원한다고 언급함
     * 또 다른 사용자는 자신만의 멀티 채널 토크나이저를 사용하여 구현한 이야기를 공유함. 주인공 이름이 자주 반복되어 버그가 있는지 의심된다고 언급함
     * Om Alve는 게시물이 바이럴되어 노력의 가치가 있다고 감사의 말을 전함
     * 기술이 몇 백 줄의 코드로 구현될 수 있다는 점이 흥미롭다고 언급함. 최첨단 모델의 코드 라인 수를 추측해보라고 제안함
     * SmolLM과 관련이 없다는 점을 언급하며 HuggingFace의 블로그 링크를 공유함
     * 훈련 데이터셋의 예시와 사용 사례에 대해 공유해줄 수 있는지 질문함
"
"https://news.hada.io/topic?id=19035","Show GN: 매일 아침 받아보는 미국 주식 리포트 - SuperInvesting","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: 매일 아침 받아보는 미국 주식 리포트 - SuperInvesting

SuperInvesting (Beta)

   아침에 일어나서 미국 주식 부터 확인하는 분이라면?
   밤 사이 주식시장에 무슨 일이 일어났는지, 읽기 쉽게 정리해 드립니다.

    핵심 기능

     * 매일 아침 8시, 이메일로 관심 종목에 대한 리포트를 보내드립니다.
     * 관심 종목을 최대 3개 지정할 수 있습니다.
     * 주가 변동, 종목 뉴스, 시장 상황, 주요 일정 등 중요한 정보들을 모아드립니다.

   오늘 처음 레터를 받아보니 내용이 알차 좋은 것 같아요. 구독 신청 시 선정한 종목을 변경하는 기능이나, 혹은 추가하는 기능이 있을까요? 그리고 종목의 최근 한달? 정도의 주식 그래프도 같이 제공되면 좋을 것 같습니다.

   좋네요. 가능하다면 구독하자마자 오늘자 아침 뉴스를 그때라도 바로 보내는 기능을 추가하면 좋지 않을까요?
   긱뉴스 위클리도 그런 방식으로 하고 있습니다.

   안녕하세요~ 현재는 구독한 종목의 상세 리포트를 바로 보내주고 있는데, 오늘자 뉴스도 같이 보내는게 좋겠네요. 감사합니다!

   오늘 첨 받아봤는데 좋네요!

   근데 제가 GOOGL 대신 GOOG를 추가했더니 페이지가 없다고 나옵니다.
   변경하는 기능이 있으면 좋겠어요 ㅎㅎ

   좋게봐주셔서 감사합니다 ㅎㅎ
   현재는 수정하는 기능이 없어서 이메일에서 수신 해제를 누르신후 다시 구독을 하셔야합니다.
   GOOGL/GOOG 같은 유사 종목은 같은 종목으로 취급하도록 곧 수정될 예정입니다.
   다시 한 번 감사드립니다!

   수신 해제 후 다시 구독하려고 하니 알수없는 에러가 났다고 나오네요!
   다른 주소로 구독 했습니다. 혹시 수신 해제한 경우 문제가 없는지 확인부탁드려요

   에고 제보해주셔서 감사합니다. https://superinvesting.pickyz.io/subscribe 에서 기존에 구독한 메일주소를 입력하면 종목을 변경할 수 있도록 했습니다.
"
"https://news.hada.io/topic?id=18972","DeepSeek 오픈 소스화의 필요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          DeepSeek 오픈 소스화의 필요성

     * DeepSeek의 오픈 소스화 이유
          + DeepSeek은 중국 AI 연구소로, R1이라는 오픈 소스 추론 모델을 개발함.
          + OpenAI와 비슷한 성능을 가진 모델을 저렴한 비용으로 개발했으며, 이는 혁신적인 훈련 방법 덕분임.
          + 중국 기업이라는 점에서 서구 시장에서 신뢰를 얻기 위해 오픈 소스화가 필요했음.
          + 오픈 소스는 기술적 행동일 뿐만 아니라 문화적 행동이기도 함.
     * 모델의 상품화
          + LLM 모델들이 점점 상품화되고 있으며, 성능 차이가 크지 않음.
          + OpenAI는 여전히 선두주자이지만, DeepSeek R1과 같은 오픈 소스 모델이 더 저렴한 비용을 제공함.
          + 인프라에서는 오픈 소스가 장기적으로 승리하는 경향이 있음.
     * 인프라에서의 오픈 소스의 장점
          + 오픈 소스는 더 저렴하고 사용자 정의가 가능하지만, 유지 관리가 필요함.
          + 인프라는 항상 사용자 정의가 필요하며, 기술적인 제품일수록 엔지니어들이 오픈 소스를 선호함.
          + Lago와 같은 오픈 소스 회사들이 성공하는 이유는 복잡한 청구 시스템을 엔지니어들이 직접 관리할 수 있기 때문임.
     * OpenAI의 미래
          + OpenAI는 여전히 시장에서 중요한 위치를 차지하고 있으며, LLM과 추론 모델에서 선두를 유지하고 있음.
          + DeepSeek R1과 같은 모델이 OpenAI를 대체할 수 있다는 주장이 있지만, OpenAI의 혁신이 없었다면 이러한 모델도 존재하지 않았을 것임.
          + R1은 기존의 대기업들이 더 효율적인 방법을 찾도록 자극할 수 있음.

        Hacker News 의견

     * 중국의 대형 모델 스타트업 중 DeepSeek만이 상업화를 고려하지 않고 오픈 소스를 선택했음. 이는 커뮤니티 내에서 자연스러운 사용자 홍보를 얻음.
          + DeepSeek의 CEO는 오픈 소스가 최고의 인재를 끌어들이고 팀의 가치를 높인다고 주장함.
          + 이는 과거 OpenAI가 Microsoft의 ClosedAI 부문이 되기 전의 전략과 유사함.
     * 중국 AI API는 서구에서 회의적으로 받아들여질 가능성이 높음. 이는 역사적으로 타당한 이유가 있음.
          + DeepSeek는 중국 관련 민감한 질문에 대해 검열을 한다는 비판을 받음.
     * 구글 내부 메모에 따르면 오픈 소스가 비공개 팀보다 빠르고 효율적으로 발전하고 있다고 언급됨.
          + LLM의 미래는 공유 연구에 있으며, 이는 매우 중요하다고 생각됨.
     * ""오픈""이라는 이름을 가진 회사는 모든 것을 공유하지 않더라도 중요한 부분은 공유해야 한다고 주장함.
          + 소스가 제공되지 않기 때문에 실제로 오픈 소스가 아님.
     * Linux가 장기적으로 성공했듯이 강력한 LLM 모델도 같은 길을 갈 것으로 예상됨.
          + 결국 인프라의 규모가 차이를 만들 것임.
     * DeepSeek는 헤지 펀드의 부가 프로젝트로, NVIDIA 주식을 공매도하고 모든 것을 공개하면 큰 이익을 얻을 가능성이 높음.
     * DeepSeek를 오픈 소스화한 이유는 개발자들이 자신이 만든 멋진 것을 보여주고 싶어하기 때문임.
          + 많은 사람들이 금전적인 이유를 찾으려 하지만, 실제로 만든 사람들은 엔지니어이며 사업가가 아님. DeepSeek는 정말 멋진 프로젝트이며, 그들은 자신이 만든 멋진 것을 보여주고 싶어했음.
"
"https://news.hada.io/topic?id=18979","[번역] RAG 세상을 헤엄치는 사람들을 위한 가이드북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     [번역] RAG 세상을 헤엄치는 사람들을 위한 가이드북

   임베딩과 정보 검색 전 과정 — 임베딩 개념과 한계, 데이터셋 생성·라벨링, 각종 오프 더 셸프 모델 평가, 하이브리드·리랭킹, 임베딩 모델 파인튜닝 및 최적화, 해석 가능성까지 –을 주욱 살펴보는 글입니다.

   다루는 주제들
     * 임베딩과 그 일반화 가능성(Generalizability)에 대한 논의
     * 인간과 + LLM을 활용한 데이터셋 구축 및 라벨링
     * 17가지 검색 모델 평가
     * 긴 컨텍스트 임베딩 모델을 사용할 때, ‘청크(chunk)를 나눌 것인가 말 것인가’에 대한 결정
     * 하이브리드 검색 및 리-랭킹(Re-ranking)
     * 상용 SaaS 검색 서비스 평가
     * 임베딩 모델 파인튜닝
     * 임베딩 모델 및 벡터 검색 최적화
     * 해석 가능한(Interpretable) 신경망 검색 구현
"
"https://news.hada.io/topic?id=18955","DeepSeek-R1 Dynamic 1.58-bit 모델 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  DeepSeek-R1 Dynamic 1.58-bit 모델 실행하기

     * DeepSeek-R1은 OpenAI의 O1 Reasoning 모델과 비교되는 성능을 보이는 오픈소스 모델임
     * 원래 720GB의 모델을 131GB로 축소하여 80% 크기 감소를 달성함
     * 동적 양자화 기법을 사용하여 일부 레이어는 높은 비트(예: 4bit)로 유지하고 대부분의 MoE(Mixture of Experts) 레이어는 1.58bit로 처리

주요 특징

     * 최소 사양: CPU에서 20GB RAM으로 실행 가능하지만 속도는 느림
     * 최적 성능: VRAM과 RAM의 합이 최소 80GB 이상 필요, 권장 VRAM은 160GB(H100 80GB GPU 2대)
     * 동적 양자화 버전(131GB~212GB)은 Hugging Face에서 제공됨: DeepSeek-R1-GGUF

동적 양자화 모델 종류

     * 총 4가지 양자화 버전 제공:
          + 131GB, 158GB, 183GB, 212GB (일반 2bit)
     * 중요도 행렬(imatrix)을 사용하여 양자화 최적화
     * 양자화 방식 및 하드웨어 요구 사항은 모델마다 상이함

벤치마크 및 성능 테스트

     * Flappy Bird 게임 생성(pass@3) 기준으로 10가지 평가 항목 점수를 측정
     * 1.58bit 동적 양자화 모델의 점수는 다음과 같음:
          + 131GB 모델: 6.92
          + 158GB 모델: 9.08
          + 183GB 모델: 9.17
     * 비동적 양자화 모델은 반복 오류나 잘못된 결과를 생성함

DeepSeek-R1의 구조 활용

     * DeepSeek-R1 구조 분석을 통해 양자화 민감도가 높은 부분을 고해상도로 유지
          + 첫 3개 밀집(dense) 레이어는 4~6bit 유지
          + MoE 레이어는 대부분 1.58bit로 양자화
          + MLA(Memory Layers Attention) 모듈 및 down_proj 부분은 높은 정밀도로 유지
     * 약 88%의 가중치를 1.58bit로 양자화하여 모델 크기 감소를 달성함

채팅 템플릿 및 토큰 처리 문제 해결

     * 모든 버전에서 채팅 템플릿에 <|begin_of_sentence|> 및 <|end_of_sentence|> 토큰 사용
     * EOS 토큰이 잘못 설정되어 무한 생성 문제가 발생했으나 수정 완료

        Hacker News 의견

     * 80% 크기 감소는 놀라운 성과이며, 1.58비트 버전이 듀얼 H100에서 140 토큰/초로 실행되는 것은 인상적임. 그러나 대부분의 사람들에게 실용적인지는 의문임. 24GB VRAM 또는 20GB RAM으로 실행할 수 있지만 속도가 너무 느림. 반복 문제도 있음. Pygame의 반복은 양자화의 의미를 퇴색시킴. 해결책은 있지만 근본적인 문제 해결은 아님. Hugging Face에서 접근 가능하게 만든 점과 동적 양자화 접근 방식은 훌륭함. 작은 팀에게 유리함. 그러나 고가의 하드웨어가 필요함.
     * DeepSeek를 RTX 4090에서 실행했을 때 모델이 VRAM에 맞아야 하지만 느림. Apple의 공유 메모리 아키텍처가 유리함. 192GB Mx Ultra는 대형 모델을 효율적으로 처리할 수 있음. OpenAI 구독을 취소할 때가 됨.
     * DeepSeek-R1의 80% 크기 감소는 놀라움. 대형 모델이 더 많은 사람들에게 접근 가능해짐. 1.58비트 양자화로 듀얼 H100에서 140 토큰/초 속도는 인상적임. 소규모 또는 중간 규모의 업체가 로컬 애플리케이션에 사용할 수 있음. 저지연이 필요한 에이전트 작업에 큰 이점임.
     * VRAM + RAM 합이 최소 80GB 이상이어야 최적 성능을 발휘함. 저전력/저비용 서버에서 시도할 수 있음. Ryzen 5500 + 64GB RAM + 7x RTX 3060 12GB 시스템을 1600 유로에 구축 가능. 전력 소비는 약 520와트임. AM4 보드와 중고 RTX 3060 12GB로 시작함. 추가 GPU는 pcie 라이저/익스텐더로 연결함. 학습과 경험을 쌓기에 좋음.
     * 모든 레이어를 1.58비트로 양자화하면 무한 반복이 발생함. 이 블로그 포스트의 저자들이 특정 시드를 찾는 과정이 흥미로움. 좋은 작업임.
     * R1에 대한 평가는 아직 명확하지 않음. $5M으로 훈련했다는 주장은 시장에 큰 영향을 미치고 있음. 검증되었는지 궁금함.
     * 100x 기계에 투자했는데 10x로도 가능하다면, 왜 10x 기계를 10개 보유하지 않는지 이해할 수 없음. 하드웨어와 데이터를 재활용하여 더 효율적인 모델을 여러 인스턴스로 만들 수 있음.
     * Danielhanchen의 작업은 인상적임. Unsloth는 훌륭하며, 새로운 모델에 빠르게 적응하고 기본 구현의 버그를 수정하는 능력이 놀라움. 진지한 연구소는 몇 시간의 선행 시간을 주어야 함.
     * 모델의 크기 감소와 일관성 유지가 놀라움. 그러나 효과가 얼마나 유지되었는지는 의문임. Flappy bird는 잘 알려진 게임이지만, R1과 o1이 다른 모델이 해결하지 못하는 문제를 해결할 수 있는지가 더 나은 테스트임.
     * 차세대 기본 모델이 128GB VRAM에서 8비트 양자화로 추론할 수 있도록 설계되면 좋겠음. 예를 들어, 160억 개의 활성 매개변수와 6~7명의 전문가가 있는 강력한 MoE 기반이 128GB RAM 맥북에서 실행 가능할 것임.
"
"https://news.hada.io/topic?id=19022","RLHF 책 출간책 출간

     * 소개
          + 인간 피드백을 통한 강화 학습(RLHF)은 최신 기계 학습 시스템을 배포하는 데 중요한 기술적 도구로 자리 잡음.
          + 이 책은 RLHF의 핵심 방법을 소개하며, 경제학, 철학, 최적 제어 등 다양한 과학 분야의 융합에서 시작됨.
          + 정의, 문제 설정, 데이터 수집 등 문헌에서 사용되는 일반적인 수학적 개념을 설명함.
     * 최적화와 강화 학습
          + 선호 데이터, 보상 모델링, 정규화, 지시 조정, 거부 샘플링, 정책 경사, 직접 정렬 알고리즘 등 다양한 최적화 방법을 다룸.
     * 고급 주제
          + 헌법적 AI와 AI 피드백, 추론 및 강화 미세 조정, 합성 데이터, 평가, 과잉 최적화 등 고급 주제를 다룸.
     * 감사의 말
          + 프로젝트에 직접적으로 도움을 준 Costa Huang과 Claude에게 감사의 말을 전함.
          + GitHub 기여자들에게도 감사의 말을 전함.
     * 인용
          + 저자: Nathan Lambert
          + 제목: Reinforcement Learning from Human Feedback
          + 출판 연도: 2024
          + 출판사: Online
          + URL: https://rlhfbook.com

        Hacker News 의견

     * RLHF 이론과 실천에 대한 공공 문서의 격차를 메우려는 저자의 노력에 대해 긍정적임. 현재의 최신 상태는 주로 arXiv 논문에 문서화되어 있으며, 각 논문은 ""스냅샷""보다는 ""차이""에 가깝기 때문에 여러 이전 논문에서 지식을 결합해야 현재 상태를 이해할 수 있음. 현재의 최신 상태를 참조하기 쉽게 ""스냅샷""으로 만드는 것이 매우 가치가 있음
          + RLHF와 SFT를 비교하여 RLHF의 동기와 기대치를 설정하는 데 도움이 될 수 있는 더 많은 입문 자료가 필요하다고 생각함
          + RLHF의 장점: 전체 생성에 대해 조정할 수 있으며, 여러 가지 수용 가능한 답변이 있는 문제에 대해 조정할 수 있음. 부정적인 피드백을 통합할 수 있음
          + RLHF의 단점: 정규화가 모델에 미치는 영향을 제한하며, 보상 모델의 품질에 매우 민감하고, 자원과 시간이 많이 소요됨
          + 실용적인 고려사항: 품질을 평가하는 방법, 프롬프트 엔지니어링이 미세 조정과 상호 작용하는 방법에 대한 이해가 필요함
     * 저자 본인이 현재 작업 중인 상태이며, GitHub에서 수정이나 제안을 환영한다고 언급함
     * ""인간 피드백을 통한 강화 학습은 보상 함수를 설계하기 어려운 도메인에서 머신 러닝 모델을 최적화하도록 설계됨""이라는 인용문이 유용하다고 언급함
     * RLHF의 정의를 알게 되면 ""우리가 중요하다고 말하는 것을 배우는 것""과 같다고 느껴짐. 미래에 대한 높은 기대감을 표현함
     * RLHF에 대한 다른 유용한 자료를 공유함
     * 이 자료의 epub 버전이 필요하다고 언급함
     * Kevin Murphy의 ""Reinforcement Learning: An Overview""는 (딥) 강화 학습과 순차적 의사 결정 분야에 대한 최신 개요를 제공하며, 가치 기반 RL, 정책 기울기 방법, 모델 기반 방법 등을 다룸
     * RLHF와 증류의 차이에 대한 질문이 제기됨
"
"https://news.hada.io/topic?id=18945","BeaverHabits - 목표(Goal) 없는 습관 추적 웹 앱 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BeaverHabits - 목표(Goal) 없는 습관 추적 웹 앱

     * 매일 해야할 일을 습관으로 만들기 위해서 관리하는 셀프 호스팅앱
     * 각 습관에 대해서 월간/3개월/년간단위 Streaks 보기 지원
     * Import/Export 가능. REST API 제공
     * 커스텀 도메인 지원
     * Python + SQLite
     * iOS에서 홈스크린으로 추가하여 스탠드얼론 모드 지원
     * 사용자들이 만든 확장으로
          + HabitDeck : Stream Deck을 인터랙티브한 트래커로 이용하기
          + Apple Shortcut : 단축어로 기록하기
          + Home Assistant Switch : 홈 어시스턴트를 통해 기록 가능

   상해 개발자분이 만들었나봐요. 작동은 잘 해요~ 그대로 쓸거면 좋을거 같아요.

   커스터마이즈 할분은 고민해봐야 돼요.
   uv라는 pip 대용 lib 쓰고, 윈도우에서는 개발이 좀 어려워요.
   가상환경 설치 + uvicorn으로 돌리면 실행됩니다.
   엔지니어링이 좀 과한거 같아요. 기능은 조금인데, 의존성은 범벅입니다.
   이러면 패키지 관리 힘들어요.

   깃헙 잔디같아서 괜히 더 끌리네요

   아주, 괜찮네요 :-)
"
"https://news.hada.io/topic?id=19019","매크로데이터 정제 작업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              매크로데이터 정제 작업

        Hacker News 의견

     * Ben Stiller가 감독한 쇼에 대해 흥미로운 토론을 유발하며, 쇼의 느린 진행 속도가 이야기의 매력을 더한다고 생각함
     * 스타트업에서 제품-시장 적합성을 찾기 전의 경험을 묘사하며, 일의 중요성을 알지 못하지만 누군가는 알고 있을 것이라는 위안이 있음
          + 이전 삶과 단절된 느낌을 받음
          + 옆 사무실에서 염소를 먹이는 사람을 보고, 염소 먹이기 실험도 이해가 된다고 생각함
          + 새로운 사람들과의 동료애에 감사함
     * Apple TV 쇼 'Severance'의 가상 컴퓨터 프로그램 재현에 대해 설명함
          + 시즌 2가 진행 중이며, 지난 10년간 가장 좋아하는 쇼 중 하나로 추천함
     * 시즌 1 당시 3년 전에 작성된 팬 프로젝트임을 언급함
          + Daniel Shiffman이 소개한 YouTube 영상과 관련 링크를 공유함
     * Daniel Shiffman, The Coding Train의 소스 코드에 대해 언급함
     * 특정 코드 작업을 통해 회사에 영광을 가져다주었다고 표현함
     * Liquidream이 게임 잼을 위해 1024바이트의 코드로 만든 Pico-8 버전에 대해 설명함
     * 팬 이론에 대해 논의하며, 무의식의 일부를 컴퓨터 훈련에 사용하고 있다는 가설을 제시함
          + 숫자 선택이 뇌의 일부에 영향을 미쳐 모델 훈련에 영향을 줄 수 있다고 생각함
     * 모든 HN 사용자가 참여하면 'cold harbor'가 현실이 될 수 있다고 언급함
"
"https://news.hada.io/topic?id=18941","Repebble - Pebble이 부활합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Repebble - Pebble이 부활합니다

     * Pebble의 부활
          + Pebble은 간단한 기능, 긴 배터리 수명, 재미있는 디자인을 가진 e-paper 스마트워치임.
          + 2012년 Kickstarter에서 처음 출시되어 200만 개 이상의 시계를 판매하였으며, 2016년에는 Fitbit에 지적 재산권이 매각됨.
          + Pebble을 다시 만들기 위해 새로운 팀이 결성되었으며, PebbleOS를 기반으로 한 새로운 스마트워치를 개발 중임.
     * PebbleOS의 오픈 소스화
          + Google은 Fitbit을 인수하면서 PebbleOS를 소유하게 되었으며, 최근 PebbleOS를 오픈 소스로 공개함.
          + PebbleOS의 소스 코드는 이제 GitHub에서 다운로드, 수정, 개선할 수 있음.
          + Rebble 팀과 커뮤니티의 지원 덕분에 가능해졌으며, r/Pebble과 Discord에서 활발한 커뮤니티 활동이 이루어지고 있음.
     * Pebble의 미래
          + PebbleOS는 기존 Pebble 시계에서 사용할 수 있으며, 다른 임베디드 장치에서도 실행 가능함.
          + 새로운 하드웨어를 제작하여 PebbleOS를 사용할 수도 있음.
          + 새로운 Pebble을 만들기 위한 프로젝트에 참여 가능
     * Pebble의 원작자 였던 Eric Migicovsky가 시작한 프로젝트

        Hacker News 의견

     * Pebble의 첫 번째 모델은 해킹 가능하고 C 언어로 실행되는 시계로 많은 사람들에게 매력적이었음
          + 사용자는 일일 걸음 수를 시간과 함께 볼 수 있는 기능을 좋아했으며, 이는 건강 추적 장치의 미래를 예고했음
          + 첫 모델은 초당 30개의 샘플을 수집하고 분류할 수 있는 가속도계를 24/7 실행하면서도 며칠 동안 지속되었음
          + Pebble은 Weathergraph라는 그래픽 날씨 시계 화면을 처음으로 제공한 플랫폼이었음
          + Pebble이 종료된 후 Weathergraph는 Garmin과 Apple Watch로 포팅되었고, iOS 앱 및 위젯으로도 확장되었음
          + Pebble 팀과 Eric에게 감사하며, 개발자 에디션 Pebble을 소중히 간직하고 있음
          + Pebble의 개발팀은 안정적인 앱과 동기화된 캘린더 등으로 큰 회사들이 오랜 시간 동안 해결하지 못한 문제를 해결했음
          + Pebble 2의 출시 직후 회사가 문을 닫은 것은 아쉬운 일이었음
     * 스마트워치에서 필요한 기능들:
          + 항상 켜져 있고 긴 배터리 수명을 위한 eink 또는 LCD 디스플레이
          + 야간 사용을 위한 밝기 조절 가능한 LED
          + 물리적 버튼으로 음악 볼륨 조절 및 곡 넘기기 기능
          + 블루투스 통화 및 알림
          + NFC 결제
          + 피트니스 기능을 완전히 비활성화할 수 있는 기능
          + 조수 및 달의 위상을 표시하는 앱
          + 음성 메모 앱 및 Android/iOS로 전송하여 음성을 텍스트로 변환하고 편집하는 기능
          + 터치 가능한 디스플레이의 경우 잠금 기능 필요
          + 태양광 패널 추가
          + 현재 Tissot T-Touch Solar Connect 사용 중이며, NFC 결제, 블루투스 통화, 야간 손전등, 조수/달 기능, 음악 제어는 없지만 충전이 필요하지 않음
     * Apple Watch를 여러 번 업그레이드했지만 여전히 원하는 기능이 부족했음
          + Pebble을 오래 사용하려고 했으며, eBay에서 Pebble Time을 구매했음
          + Pebble을 사용하여 방의 전등을 제어하는 첫 번째 통합 기능을 작성했음
          + Pebble 시계가 앱을 호출하고, 앱이 웹 서버에 요청을 보내고, 웹 서버가 WiFi 소켓에 쿼리를 보내는 방식으로 작동했음
     * Pebble Time Round를 늦게 구매했지만 Rebble.io를 통해 서비스를 복제하여 잘 사용했음
          + 새로운 iPhone을 구매한 후 Pebble 앱을 다시 설치할 수 없었음
          + Nokia Steel HR을 사용했지만 알림을 놓치는 경우가 있었음
          + 결국 Apple Watch를 구매했지만 여전히 Pebble을 그리워함
     * Pebble의 애니메이션이 마음에 들었음
     * Pebble은 스마트워치의 올바른 방향을 제시했으며, 배터리 수명과 항상 켜져 있는 디스플레이에 중점을 두었음
     * Pebble은 4년 동안 사용했으며, 알림을 잘 처리했음
          + 저렴한 가격이었으며, 새로운 버전이 ""멍청한"" 기기 트렌드의 일부가 아니길 바람
     * Pebble의 혁신성과 기능성에도 불구하고 대중 시장에 도달하지 못한 것이 아쉬움
          + Pebble 팀이 다시 시작할 수 있어 기쁨
          + Google이 PebbleOS를 오픈 소스로 제공한 것에 감사함
     * Pebble 개발은 재미있었으며, 제한된 프로세서와 RAM에도 불구하고 여러 앱을 수용할 수 있었음
          + Pebble 앱은 시계와 전화에 각각 구성 요소가 있었으며, iOS와 Android 모두에서 호환되었음
          + 앱의 전화 구성 요소는 JavaScript로 작성되어 인터넷에서 날씨 업데이트를 가져와 시계의 C 기반 앱에 전달했음
          + Pebble의 디자인은 매우 간단하고 영리했음
"
"https://news.hada.io/topic?id=18933","북한 IT 직원의 데이터 침해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            북한 IT 직원의 데이터 침해

   최근 북한 IT 직원으로부터 데이터를 침해당한 사례가 있어 FBI에서 경보를 발령했습니다.

피해 사례

     * 중요 데이터를 인질로 삼아 회사에 몸값을 요구
     * 타사의 리포지토리(예: Github 등)를 자신의 사용자 프로필과 개인 클라우드 계정으로 복사
     * 중요한 데이터에 접근할 수 있는 세션 쿠키나 자격 증명을 탈취

대처 방법

     * 회사와 연결되어 있는 모든 네트워크를 조사 및 감시
     * 원격 채용 강화. 특히 해당 지원자의 이력서 내용을 면밀히 검토해야 함. 최근 화상 면접에 딥 페이크를 사용하는 경우도 있었음.
     * 피해가 의심될 경우 인터넷 범죄 신고 센터(IC3)에 연락 바람.

   사이버 소말리아...
"
"https://news.hada.io/topic?id=19046","Httptap - 모든 Linux 프로그램의 HTTP/HTTPS 요청 보기 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Httptap - 모든 Linux 프로그램의 HTTP/HTTPS 요청 보기 가능

     * httptap은 리눅스 프로그램이 수행하는 HTTP 및 HTTPS 요청을 쉽게 볼 수 있게 해주는 도구
          + httptap -- 를 사용하여 특정 명령어의 네트워크 요청을 추적할 수 있음
     * 예를 들어, curl 명령어를 사용하여 특정 URL에 요청을 보내면, httptap은 해당 요청과 응답을 출력
          + httptap은 루트 권한이 필요하지 않으며, 시스템 전반에 영향을 미치지 않음
          + 현재 리눅스에서만 작동하며, 다른 운영 체제로 포팅하기는 어려움
     * 설치 방법
          + 미리 빌드된 바이너리 설치: curl -L https://github.com/monasticacademy/httptap/… | tar xzf -
          + Go를 사용한 설치: go install github.com/monasticacademy/httptap@latest
     * 빠른 시작
          + curl 명령어를 사용하여 HTTP 요청을 보내고, httptap으로 요청과 응답을 확인할 수 있음
          + -L 옵션을 사용하여 리다이렉트를 따르는 경우, 추가적인 HTTP 요청이 발생함
     * Google Cloud 및 kubectl 사용 예시
          + gcloud compute instances list 명령어를 사용하여 Google Cloud의 컴퓨트 인스턴스를 나열할 때 발생하는 HTTP 요청을 추적할 수 있음
          + kubectl get all 명령어를 사용하여 Kubernetes 클러스터의 리소스를 나열할 때 발생하는 HTTP 요청을 추적할 수 있음
     * DNS-over-HTTP
          + curl의 --doh-url 옵션을 사용하여 DNS-over-HTTP 요청을 수행할 수 있음.
          + httptap을 사용하여 DNS 요청과 응답을 확인할 수 있음.
     * HAR 출력
          + HTTP 요청과 응답을 HAR 파일로 덤프할 수 있음.
          + HAR 파일은 다양한 뷰어를 통해 시각화할 수 있음.
     * 작동 원리
          + httptap은 네트워크 네임스페이스를 사용하여 명령어를 격리된 환경에서 실행
          + TUN 디바이스를 생성하여 네트워크 트래픽을 추적하고, HTTPS 트래픽을 해독하기 위해 임시 인증 기관을 생성
     * 주의 사항
          + 프로세스는 들어오는 네트워크 연결을 수신할 수 없음.
          + /dev/net/tun에 대한 접근 권한이 필요함.
          + 모든 ICMP 에코 요청은 실제 네트워크로 ICMP 패킷을 보내지 않고 에코됨

   it was developed at the Monastic Academy in Vermont in the US. We believe that a monastic schedule, and the practice of the Buddhist spiritual path more generally, provide ideal conditions for technological development.

     테스트하면서 깃헙을 보니. 수도원 수련? 하시는 분들이 영적 성취의 일환으로 만들었나 싶기도 합니다.

        Hacker News 의견

     * README의 ""How it was made"" 섹션이 도구 자체만큼 흥미로움
          + 공동체 생활과 명상 수련을 통해 소프트웨어 개발을 진행함
          + 격리된 네트워크 네임스페이스에서 프로세스를 실행하는 아이디어가 천재적임
          + HTTPS 부분에 관심이 있으며, 임시 디렉토리의 CA 번들을 사용하도록 프로그램을 지시하는 환경 변수를 설정함
          + http_proxy와 유사한 문제가 발생할 수 있으며, 프로그램이 변수를 무시할 수 있음
          + &#x2F;etc&#x2F;resolv.conf에 오버레이 파일 시스템을 마운트하며, 임시 CA 번들을 사용하여 &#x2F;etc&#x2F;ca-certificates 디렉토리를 마운트하는 것이 도움이 되는지 궁금함
     * httptap은 루트 권한 없이 실행할 수 있는 프로세스 범위의 HTTP 트레이서임
          + httptap <command>로 실행하여 HTTP/HTTPS 요청과 응답을 표준 출력으로 추적할 수 있음
          + 격리된 네트워크 네임스페이스에서 명령을 실행하며, 자체 TCP/IP 스택을 사용함
          + HTTP 프록시가 아니며, 명령이 HTTP 프록시를 사용하도록 설정할 필요가 없음
          + TLS 트래픽을 실시간으로 CA를 생성하여 해독함
          + iptables 규칙을 설치하거나 시스템 전역 변경을 하지 않음
     * 루트 권한 없이 네트워크 트래픽을 분석할 수 있는 또 다른 도구는 rootless Podman과 Pasta임
          + --network=pasta:--pcap,myfile.pcap 옵션을 추가하여 네트워크 트래픽을 PCAP 파일로 기록함
          + 기록된 PCAP 파일을 tshark로 분석하는 간단한 예제를 작성함
     * TUN 장치를 사용하는 것이 멋진 아이디어이며, ""How it was made"" 섹션이 Github README 중 최고임
          + Subtrace라는 도구를 개발 중이며, 자동으로 들어오고 나가는 요청을 가로챌 수 있음
          + Seccomp BPF를 사용하여 소켓, 연결, 수신, 수락 등의 시스템 호출을 가로채고, 모든 TCP 연결을 Subtrace를 통해 프록시함
          + TCP 스트림에서 HTTP 요청을 파싱하여 사용자에게 Chrome DevTools Network 탭에서 보여줌
     * nginx 설정을 디버그하는 데 즉시 사용할 예정임
          + 현재는 curl -v를 사용하여 수동으로 출력물을 확인하지만, 이 도구는 리디렉션 루프 등을 즉시 파악할 수 있게 해줌
     * 최근 mitmproxy에 유사한 기능을 구축했지만, 다른 트레이드오프가 있음
          + 루트 권한이 필요하며, 자동 인증서 설치는 아직 없음
          + 전용 네임스페이스에서 앱을 실행할 필요가 없어 이미 실행 중인 프로세스를 캡처할 수 있음
     * LD_PRELOAD를 사용하는 다른 방법은 고정 링크된 ELF, 예를 들어 golang 바이너리에서 실패할 수 있음
     * gVisor 사용자 공간 TCP/IP 스택의 훌륭한 활용임
     * Mitmproxy v11.1도 유사한 기능을 수행할 수 있음
"
"https://news.hada.io/topic?id=19020","Show GN: 브라우저에서 생성형 AI를 로컬로 실행하는 크롬 익스텐션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: 브라우저에서 생성형 AI를 로컬로 실행하는 크롬 익스텐션

  프로젝트 설명

   자바스크립트로 생성형 AI 모델을 실행하는 Transformers.js의 크롬 익스텐션 프로젝트입니다.

   Ollama, llama.cpp 등 로컬에서 생성형 AI 모델을 실행할 수 있는 방법은 많지만, 설정 과정이 번거롭고 매번 화면을 전환해야 하는 불편함이 있습니다. 이를 해결하기 위해 Transformers.js를 사용해서 크롬 익스텐션의 사이드패널에서 바로 실행할 수 있도록 구현했습니다.

   로컬 실행의 장점 중의 하나는 인터넷이 끊긴 환경에서 사용할 수 있다는 것인데, 인터넷이 열악한 환경 (비행기, 캠핑장 등)에서 간단한 업무 처리할때 유용하게 사용했습니다.

  지원 모델

   Transformers.js를 사용하기 때문에 허깅페이스의 거의 모든 모델을 실행할 수 있지만 현재는 아래 모델만 지원하고 있습니다.
    1. LLM : 라마 3, Phi 3.5, Qwen 2.5, SmolLM2
    2. Reasoning : DeepSeek R1 (M1 맥북 기준으로 DeepSeek R1 (1.5B) 30토큰/초 생성)
    3. Multimodal LLM : Janus
    4. Speech to Text : Whisper

  추가 기능

   Summarize, Rewrite 기능도 추가했습니다. 브라우저에 보이는 텍스트를 드래그한 상태로 우클릭하여 익스텐션을 실행하면 해당 텍스트를 요약하거나 (Summarize), LLM 출력으로 바꿔줍니다 (Rewrite). 아래 데모 영상을 보시면 이해에 도움이 될 것 같습니다 (1분 10초 - 1분 25초 구간).

   데모 영상: https://www.youtube.com/watch?v=MSCDdFG5Lls&t=70s

  익스텐션 실행

   Github 프로젝트를 직접 빌드하시거나 크롬 웹스토어에서 다운로드 받으실 수 있습니다.

   크롬 웹스토어: https://chromewebstore.google.com/detail/private-ai-assistant-runn/…

   잘 봤습니다.
   Deepseek R1이 아니라 Distil된 모델이라는 것을 명확하게 표시해주셔야 하지 않을까 싶습니다. 기술적으로 전혀 다른 두 모델이니까요.

   의견 감사합니다. 테스트한 1.5B 모델이 Distillation 된 모델이라 Distilled가 좀 더 정확한 표현인 것 같네요. 글 수정이 불가능한 것 같아서 다음 업데이트때 반영하겠습니다.
"
"https://news.hada.io/topic?id=19026","최근 연구 결과에 따르면 LLM은 조합적 작업에 어려움을 겪는 것으로 나타남","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               최근 연구 결과에 따르면 LLM은 조합적 작업에 어려움을 겪는 것으로 나타남

     * LLM은 조합적 작업(Compositional Task)에서 어려움을 겪고 있으며, 이는 그들의 능력에 한계가 있음을 시사
          + 이러한 문제는 LLM이 훈련 데이터에서 본 것을 넘어서는 추론을 할 수 없다는 것을 보여줌
     * 1962년 12월 17일, Life International에 15개의 문장으로 구성된 논리 퍼즐이 실림
     * “영국인은 빨간 집에 산다” 혹은 “중앙 집에서 우유를 마신다”처럼 각 문장이 단서를 제공
     * 다섯 채의 집 색깔, 거주자의 국적, 애완동물, 음료 등 속성이 모두 달랐으며 “누가 얼룩말을 소유하는가”가 핵심 질문이었음
     * 이 문제는 Einstein’s puzzle(또는 riddle)이라고 불리며, 최근 머신 러닝 모델, 특히 대규모 언어 모델(LLM)의 다단계 추론 능력을 측정하는 지표로 사용중
     * Allen Institute for AI의 연구 과학자인 Nouha Dziri와 동료들은 ChatGPT 같은 LLM을 이 퍼즐에 적용해 한계를 확인
     * LLM이 훈련 데이터에서 본 내용 이상의 복잡한 문제를 해결하기 어렵다는 점이 드러남
     * 이는 “단계별로 해결한 결과들을 종합해 최종 해답에 이르는” 결합 추론(compositional reasoning)의 난이도를 보여줌
     * Dziri의 연구팀은 LLM이 단어 예측만으로 학습되는 구조적 한계가 있다고 주장
     * 다른 연구진 또한 현재 widely 사용 중인 트랜스포머(transformer) 아키텍처가 이러한 복잡한 문제 해결에 수학적으로 한계가 있음을 입증
     * 점점 더 강력한 모델이 나오고 있지만 이들이 근본적으로 모든 결합 추론 문제를 해결하지 못할 수 있다는 전망이 제기됨
     * Andrew Wilson(NYU)은 이러한 연구가 AI 연구 커뮤니티가 트랜스포머 중심 접근을 계속 밀고 나갈지 다시 고민하게 한다고 언급

놀라운 성과가 불러온 의문

     * Dziri에 따르면, LLM이 놀라운 언어 능력을 보이기 시작하면서 “진짜 추론이 가능한가”라는 호기심이 커짐
     * LLM은 인터넷에 존재하는 방대한 텍스트로부터 단순한 방식(문장 완성 예측)으로 학습함에도 자연어 처리나 문서 요약, 코드 생성 등 복잡한 작업을 해내고 있음
     * OpenAI의 o1, GPT-4, Google의 Gemini, Anthropic의 Claude 등이 대표적인 거대 모델
     * 하지만 이런 모델들이 때론 인간이 보기엔 간단한 문제에서 뜻밖의 오류를 일으키기도 함
     * 예를 들어, 간단한 곱셈조차 자주 틀리는 사례가 보고됨
     * Dziri의 연구에 따르면 GPT-4에 세 자릿수 곱셈을 시켰을 때 59%만 정확했으며, 네 자릿수 곱셈으로 가면 4%로 크게 떨어짐
     * Einstein’s puzzle의 변형된 버전에서도, 집이 작으면(속성이 2-3개) 높은 정확도를 보였지만, 속성이 4-5개가 되자 성공률이 극적으로 낮아짐
     * GPT-3를 곱셈 데이터 180만 개로 파인튜닝했을 때, 훈련에 포함된 범위 내에서는 잘 풀었으나 훈련 예시와 다른 형식을 묻자 정답률이 급감
     * 이는 모델이 알고리즘 자체를 이해했다기보다 훈련 예시에 의존해 흉내 내는 것에 가깝다는 결론

명백한 한계

     * Dziri와 다른 연구진이 공통적으로 지적하는 문제는 ‘결합 추론 능력’의 부족
     * Binghui Peng(Stanford University)은 콜럼비아대 박사과정 시절, LLM이 ‘아버지의 아버지는 누구인가’ 같은 사실 조합 질문에서 자주 틀린다는 점에 주목
     * 간단한 트랜스포머 계층(레이어)이 이런 문제를 푸는 데 얼마나 많은 매개변수가 필요한지 계산해보았고, 도메인 크기가 모델 파라미터 수보다 크면 해결 불가능하다는 결론을 얻음
     * 이후 다층 트랜스포머로 확장해도, 복잡한 결합 추론 문제에 부딪히면 수학적으로 불가함을 증명
     * 즉, 모델 규모가 커지면 더 어려운 문제를 풀 수는 있으나, 동시에 문제 난이도 또한 확장되면 한계가 드러나는 구조
     * 일부 연구진이 트랜스포머 외의 다른 신경망 구조, 예컨대 state-space models 등을 시도했지만 유사한 한계가 확인됨

한계를 넘어서는 시도

     * LLM의 한계를 극복하기 위해 여러 보완책이 제안되고 있음
     * 예컨대 Tom Goldstein(University of Maryland) 팀은 숫자를 트랜스포머에 입력할 때 위치 정보를 추가로 부여해 더 큰 자리수 연산도 가능하게 함
     * 이런 작업을 통해 20자리 수로 훈련한 모델이 100자리 수 덧셈에도 98% 정확도를 보이는 결과가 나왔음
     * 또 다른 방법으로, 문제 풀이 과정을 프롬프트 안에 단계적으로 제시하는 chain-of-thought 기법도 있음
     * GPT-4 같은 모델은 이 방법을 통해 더 복잡한 문제도 해결할 수 있는 잠재력을 보이는 것으로 관찰됨
     * 이는 ‘큰 문제를 작은 문제들의 연쇄로 분해하는 원리’에 기반을 두고 있으며, 이 방식이 트랜스포머가 처리 가능한 연산 범위를 넓히는 효과를 일으킨다는 이론적 해석이 제시됨
     * 그러나 실제 모델이 모든 문제에서 이 능력을 발휘하는 것은 아니며, 훈련 방식과 모델 구조 등에 따라 결과가 달라짐
     * 궁극적으로 LLM은 패턴 매칭에 기반하고 있기 때문에, 크거나 복잡한 결합 추론 문제의 경우 항상 한계가 존재
     * 그럼에도 일반 사용자 입장에서는 이런 한계가 크게 중요하지 않을 수 있음
     * 반면, 모델을 만드는 연구진에겐 구조적 한계를 이해하고 수정하는 것이 핵심 과제
     * Dziri는 “LLM의 내부 작동 원리를 정확히 파악한다면 근본적 문제를 해결할 가능성이 커진다”고 강조

   추론 시대 전 이야기네요

   ~ 기호가 마크다운 취소선 조판부호로 인식되는 문제가 있어요. 수정해주시면 좋겠습니다.

   코딩하면서 LLM을 쓸 때에는 그래서 결합도를 낮추고 관심사 분리를 잘 할 수록 일을 잘 하더군요. 사실 이거는 사람도 그렇지 않을까 싶기도 합니다. ;)

   글 자체는 최근인데, 글의 베이스는 o1 이전 것인가봐요.

   ""아버지의 남동생의 어머니의 여자형제의 딸은 나와 몇촌 관계야?"" 같은걸 물어봤는데,
   4o는 확실히 한계가 있고, o1은 함정까지 다 피해가던데요.

        Hacker News 의견

     * LLM은 다른 머신러닝 모델처럼 입력 데이터를 패턴 매칭하여 통계적으로 가능성이 높은 결과를 도출하는 특성을 가짐
          + ""Chain of thought""는 강화 학습과 결합하여 어려운 문제를 해결할 수 있게 함
          + 성공의 명확한 정의와 보상 모델이 필요함
          + 인간의 문제 해결 능력도 패턴 매칭에 의존하며, 인간은 대량의 정보를 효율적으로 통합할 수 있음
     * LLM은 AI의 경이로움으로, 예전에는 불가능하다고 여겨졌던 것을 두 달마다 발전시키고 있음
          + 일부 과학자들은 LLM의 성과를 과소평가하고 있음
          + LeCun은 LLM이 막다른 길이라며 연구자들에게 다른 방향을 제시했음
          + Meta의 LLM 성과가 다른 회사들보다 뒤쳐져 있다는 점이 이러한 회의론과 관련이 있을 수 있음
     * LLM 연구에 대한 잘못된 정보가 많음
          + 6-12개월 된 모델은 단순한 사고만 가능함
          + 복잡한 논리적, 알고리즘적 작업에는 시스템 2 사고가 필요함
          + LLM은 프로그래밍을 통해 사고할 수 있음
     * o3-mini-high는 Prolog 코드를 빠르게 생성할 수 있었음
          + 예시로 주어진 Prolog 코드는 문제를 해결하는 데 성공적이었음
     * 최근 연구 결과는 GPT-3, 3.5, 첫 번째 세대 4를 다루고 있음
     * ChatGPT는 빠른 검색 엔진처럼 느껴지며, 많은 환각과 제한된 문맥을 가짐
          + 미래의 발전에 대한 약속은 많지만 실제 진전은 적음
     * 연구 결과가 순수 LLM을 분석하는지, LLM 합성 엔진을 분석하는지 구분해야 함
          + o3의 ARC-AGI-1에서의 성과는 합성 엔진의 능력을 보여줌
     * LLM은 2D 또는 3D 사고를 요구하는 간단한 질문에서 실패할 수 있음
          + AI는 2D/3D 세계를 잘 표현할 수 있도록 훈련될 수 있음
     * LLM의 제한 사항이 기사에 언급되면, 몇 달 후에는 그 제한이 없는 챗봇이 등장함
          + 이러한 제한은 근본적인 것이 아님
     * 학술 연구가 출판될 때쯤에는 이미 몇 달이 지난 경우가 많음
          + 최신 기술의 한계를 알고 싶다면 연구 논문보다 소셜 미디어를 참고하는 것이 나음
"
"https://news.hada.io/topic?id=19023","Bzip3 - BZip2의 정신적 후계자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Bzip3 - BZip2의 정신적 후계자

     * BZip3는 BZip2의 후속작으로, 더 높은 압축률과 성능을 제공함.
     * Order-0 컨텍스트 혼합 엔트로피 코더, 빠른 Burrows-Wheeler 변환 코드, LZ77 스타일 문자열 매칭과 PPM 스타일 컨텍스트 모델링을 기반으로 한 RLE 및 Lempel Ziv+Prediction 패스를 사용함
     * 텍스트나 코드 압축에 뛰어남.
     * Perl 소스 코드 벤치마크
          + Perl5의 모든 버전을 다운로드하고 압축 해제한 후, 다양한 압축기를 사용하여 .tar 파일을 압축 테스트
          + BZip3는 다양한 설정에서 다른 압축기와 비교하여 더 나은 압축 성능을 보임.
          + 압축 해제 시간에서도 BZip3는 병렬 처리를 통해 우수한 성능을 보임.
     * 면책 조항
          + BZip3 사용으로 인한 데이터 손실에 대한 책임을 지지 않음.
          + BZip3의 성능은 컴파일러에 크게 의존하며, x64 Linux clang13 빌드는 스레드당 최대 17MiB/s 압축 및 23MiB/s 압축 해제를 달성할 수 있음.
          + 다양한 아키텍처에서 테스트됨 : x86, x86_64, armv6, armv7, aarch64, mips, sparc 등
     * 라이선스
          + BZip3는 LGPLv3로 라이선스됨.
          + Burrows-Wheeler 변환과 LZP 코드는 Apache 2.0 라이선스를 가짐.
          + 기타 컴파일 타임 및 런타임 구성 요소는 각각의 라이선스를 따름.

        Hacker News 의견

     * Burrows-Wheeler Transform을 여러 번 구현했지만, 왜 작동하는지에 대한 직관은 여전히 이해하기 어려움
          + 이 알고리즘은 항상 인상적임
     * Perl 소스 코드의 압축 벤치마크 결과를 공유함
          + xz, bzip2, bzip3, zstd의 압축 및 해제 시간과 메모리 사용량을 비교함
          + 메모리 사용량 차이가 주목할 만함: 8M 대 18301M
     * Malbolge라는 어려운 프로그래밍 언어로 프로그램을 작성한 저자는 매우 대단한 사람임
     * 과거에 bzip으로 데이터를 재압축했지만, 나중에 이 포맷이 구식이 되어 압축 해제가 어려워졌음을 깨달음
          + 이제는 오래 지속될 비효율적인 포맷을 사용함
     * BWT 개선은 훌륭함
          + ""장거리"" 압축 개선에 큰 잠재력이 있다고 생각함
          + 멀티 GB 데이터 세트에서 유사성을 효율적으로 찾는 것이 필요함
     * 압축 효율성을 기록하는 헤더나 테일 블록을 작성해 달라는 작은 요청이 있음
          + bzip2는 그렇지 않지만, gzip은 함
     * bzip3가 아직 대형 텍스트 압축 벤치마크에 나열되지 않은 것이 이상함
     * BWT 기반 압축기와의 비교에 대한 질문이 있음
     * 입력의 긴 반복을 먼저 압축하고, 리터럴 블록만 BWT를 통해 처리하는 아이디어가 제안됨
          + 이 방법이 PPM이나 Brotli의 기본 컨텍스트 모델링보다 나쁠 수 있음
     * 고압축 알고리즘은 매우 전문적인 분야임
          + zstd나 brotli를 낮은 설정에서 사용하는 것이 네트워크나 저장소 전송을 줄여 속도를 높일 수 있음
          + 현대의 RAM 양으로 인해 zstd와 brotli는 긴 범위의 일치를 활용할 수 있음
"
"https://news.hada.io/topic?id=19036","OpenAI, Deep Research 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        OpenAI, Deep Research 공개

     * OpenAI가 ChatGPT에 도입한 새로운 에이전트형 기능 ""심층 연구""
     * 인터넷에서 방대한 정보를 수집·분석·종합해, 복잡한 과제를 수십 분 안에 자동으로 해결해주는 역할을 수행함
     * 향후 AGI 달성을 위한 핵심 단계로서, 새로운 지식을 창출할 수 있는 ‘지식 종합’ 능력은 필수적

Deep research를 만든 이유

     * 고도의 지식 노동(금융, 과학, 정책, 엔지니어링 등)부터 대형 소비재 구매 리서치까지, 철저하고 신뢰할 수 있는 조사 결과가 필요한 사용자들을 위해 개발
     * 다양한 온라인 출처에서 드러나지 않는 니치 정보나 직관적이지 않은 사실도 빠르게 찾아내어 문서화 가능
     * 전문적 수준의 연구를 자동화해 업무 생산성을 크게 높일 수 있도록 함

Deep research 사용 방법

     * ChatGPT의 메시지 입력창에서 Deep research 모드를 선택
     * 요청(예: 경쟁사 분석, 맞춤형 제품 추천 등)과 함께 필요한 파일이나 스프레드시트를 첨부 가능
     * Deep research는 5분에서 최장 30분 동안 인터넷을 탐색해 세부적인 보고서를 작성함
     * 작업 진행 중에는 단계별 요약과 참조 출처가 표시되는 사이드바를 통해 과정을 확인 가능
     * 최종 결과물은 광범위한 인용과 함께 보고서 형태로 제공되며, 향후 이미지·데이터 시각화 등도 포함될 예정

작동 원리

     * OpenAI o1의 추론 능력을 확장한, 다음 세대 모델(OpenAI o3 기반)을 활용해 복잡한 브라우징과 분석 작업에 대응
     * 여러 단계의 계획 수립, 정보 수집, 중간 피드백 반영을 스스로 수행
     * 사용자 업로드 파일에도 접근해 Python 도구를 이용한 그래프 작성 등 분석 작업을 진행할 수 있음
     * 특정 문장 단위로 출처를 인용해 정확도와 투명성을 높임

Humanity’s Last Exam 평가

     * 최근 공개된 광범위 평가인 Humanity’s Last Exam에서 26.6% 정답률을 기록해, 이전 모델 대비 뛰어난 성능을 보임
          + 3,000개 이상의 전문가 수준 문제를 출제하며, 여러 학문 분야를 망라함
     * 화학, 인문·사회, 수학 분야에서 이전 모델 대비 큰 향상을 보였음
     * 비교 대상으로 GPT-4o, Grok-2, Claude 3.5 Sonnet, Gemini Thinking, OpenAI o1 등 여러 모델들이 있었는데, Deep research 모델이 26.6%로 가장 높은 정확도를 보임
          + GPT-4o는 약 3.3%, Claude 3.5 Sonnet는 4.3%, OpenAI o1은 9.1%였음

GAIA 벤치마크

     * GAIA는 웹 브라우징, 멀티모달 처리, 도구 사용 능력을 모두 요구하는 실제 세계 질문을 평가하는 지표임
     * Deep research 모델이 해당 벤치마크에서 이전 최고 성능을 갱신함
     * GAIA 문제는 난이도를 1~3레벨로 구분해 놓았으며, Deep research는 모든 난이도에서 기존 최고 기록보다 높은 점수를 보여줌
     * 구체적으로 이전 기록 대비 각 레벨에서 대략 6~8%가량의 개선 폭을 보이면서 전체 평균도 높아졌음

전문가 수준 작업

     * 사내 평가에서, 수 시간에 걸친 수작업 조사를 대체할 만큼 높은 자동화 수준을 보임
     * 모델이 자료를 많이 브라우징하고 생각할수록 성능이 향상되므로, 계산에 충분한 시간을 주는 것이 중요함

제한사항

     * 일부 사실 관계 오류나 잘못된 추론(hallucination)이 여전히 발생 가능함
     * 루머와 신뢰도 높은 출처 구분에 어려움을 보이며, 불확실성 표현이 정확하지 않을 수 있음
     * 출시 초기에는 보고서나 인용 형식이 약간 매끄럽지 않을 수 있으며, 수행 시간이 길어지는 경우가 있을 수 있음

접근 및 사용

     * 현재 Deep research는 연산 비용이 높아 Pro 사용자 대상으로 우선 제공되며, 월 최대 100회까지 가능함
     * 곧 Plus 및 Team 사용자에게도 순차적으로 개방될 예정
     * 영국, 스위스, 유럽경제지역(EEA) 사용자에게는 추후 지원을 확대할 계획
     * 향후 더 빠르고 효율적인 작은 모델 버전을 통해 모든 유료 계정의 요청 제한이 크게 늘어날 것

향후 계획

     * Deep research는 우선 ChatGPT 웹 버전에서 사용 가능하며, 모바일·데스크톱 앱에도 곧 탑재 예정
     * 향후에는 구독형 데이터나 내부 리소스에도 연결해, 더욱 개인화된 결과물을 제공할 계획
     * Deep research를 Operator와 결합하면 오프라인/온라인 실제 작업까지 자동으로 수행하는 고도화된 에이전트 경험을 구축할 수 있을 것으로 기대

   DeepResearch를 활용하여 작성한 실제 보고서들
     * DeepResearch에 대한 기술적 심층 분석
     * DeepSeek-R1 모델 종합 가이드
     * DeepSeek R1의 학습 비용 조사 및 추정
     * 의료분야 생성형 AI에 대한 레드팀 테스팅 동향

  Hacker News 의견

     * 한 사용자는 자신에 대한 보고서를 작성해 보았으나, 여러 오류가 발생했음을 언급함. 예를 들어, Stack Overflow에서의 명성을 잘못 인식했으며, 인터뷰 인용도 잘못된 사람으로부터 가져왔음.
     * 또 다른 사용자는 언어 모델이 완전히 정확한 답변을 제공하지 못하는 경우가 10% 정도 발생하며, 이는 신뢰를 저하시킬 수 있음을 지적함. 답변의 정확성을 확인하는 데 걸리는 시간도 중요한 요소임을 강조함.
     * 한 사용자는 최근 Standard에서 출시한 보고서 생성 프로젝트와 유사하다고 언급함.
     * Gemini가 ""Deep Research""라는 이름으로 몇 달 전부터 이 기능을 제공하고 있음을 언급함. AI 세계에서의 이름 중복 현상에 대한 의문을 제기함.
     * 한 사용자는 오류와 환각 문제를 인정하더라도, 많은 사람들이 이를 간과하고 결과를 자신의 파워포인트에 삽입할 것이라고 우려함. 이러한 도구가 강력해질수록 정보의 왜곡이 더 심해질 것이라고 경고함.
     * unreleased o3 모델이 이 기능을 지원하고 있으며, 이는 상당히 인상적인 모델임을 언급함. Google, DeepSeek, Perplexity에서 선도적인 모델임을 강조함.
     * 학계에서 일하는 사람들에게 흥미로운 도구임을 언급하며, 테스트해 보고 싶지만 비용이 부담스러움을 토로함. 특정 프롬프트를 사용하여 테스트해 줄 것을 요청함.
     * AGI와 ASI의 전제 조건으로서의 능력에 대한 의문을 제기함. 연구의 중요성에 대해 회의적이며, 실행 결과가 아닌 답변에 의존하는 것에 대해 우려함.
     * 내부 테스트에서 20%의 통과율만 달성했음을 언급하며, 많은 양의 부정확한 텍스트를 검토하는 데 시간이 많이 걸린다고 지적함. 더 반복적인 과정이 필요하다고 주장함.
     * 블로그에서 유명한 전문가들이나 노출을 원하는 사람들이 계속 글을 쓸지에 대한 의문을 제기함. 독자가 모두 봇이 되는 상황을 우려함.

   엄청나게 기대중입니다.. 이게 원-모어-띵이 아니라니..
   딥식이 이슈는 이걸로 묻히려나요
"
"https://news.hada.io/topic?id=19042","스타트업레시피 투자리포트 2024 [34p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      스타트업레시피 투자리포트 2024 [34p PDF]

     * 2024년 한 해, 투자를 중심으로 한 국내 스타트업 생태계 트렌드를 한눈에 조망할 수 있게 정리한 보고서
     * 투자 금액과 건수를 비롯한 전체 투자 동향을 분야별로 분석
          + 13개 분야 : 컨슈머테크, 바이오/헬스케어, 소프트웨어, 핀테크, 미디어/콘텐츠, 에튜테크, 물류/배송, 제조(소부장), 블록체인, 차량/모빌리티, 게임, 부동산/프롭테크, 환경/에너지/지속가능성(ESG)와 농업
     * 투자 규모와 단계별 분석, 유니콘 기업 분석, 투자 유치 TOP20
     * 현황·분석 : 투자사, 여성 창업 기업, 지역별, IPO와 M&A

전체 투자 동향과 2025년 전망

  2024년 투자 동향

     * 총 투자금 5조 9,562억원, 전년 대비 2.5% 증가
     * 투자 건수는 1,615건으로 증가했지만 정부 지원금을 제외하면 전년과 비슷한 수준
     * 대형 투자(1,000억원 이상) 건수 감소, 소규모 성장 단계 투자 증가
     * AI 관련 기업 중심으로 투자 집중, 특히 생성형 AI, AI 반도체, AI 기반 헬스케어가 강세
     * B2B 솔루션 중심으로 투자 선호 증가, 반면 B2C 플랫폼 투자는 감소
     * 글로벌 시장 진출이 필수 전략으로 자리 잡으며, 해외에서 직접 투자 유치하는 스타트업 증가

  2024년 상반기·하반기 비교

     * 상반기 투자액 2조 8,171.9억원(전년 대비 10% 증가)
     * 하반기 투자액 3조 1,390.9억원(상반기 대비 소폭 증가)
     * 시리즈B 이상 성장 단계 스타트업 투자 증가, 창업 초기 기업 투자 감소
     * AI 분야를 제외한 전통 산업(핀테크, 모빌리티 등) 투자는 부진

  2024년 주요 투자 트렌드

     * AI 기반 기술 강세: AI 반도체, 생성형 AI, AI 헬스케어 스타트업에 자금 집중
     * B2B SaaS 및 산업 디지털 전환: 기업 업무 효율화, 클라우드, AI 솔루션 분야 선호 증가
     * 핀테크 및 B2C 플랫폼 투자 감소: 금융 규제 강화, 기존 기업의 시장 장악력 강화로 투자자 관심 하락
     * 제조, 로봇, 친환경 기술 투자 확대: 미래 모빌리티, 폐배터리 재활용, 대체 에너지 기술 주목

주요 투자 분야 13개 요약

  컨슈머테크

     * 투자 유치 금액과 건수 모두 하락세
     * 소비자 중심 플랫폼, 특히 B2C 서비스는 투자자 관심에서 멀어짐
     * 컬리, 당근, 오늘의집 등 일부 유니콘 기업이 흑자 전환 성공

  소프트웨어

     * AI 중심 소프트웨어 강세로 1조 4,032억원 유입
     * 생성형 AI, AI 반도체 등 기술 기반 스타트업이 높은 투자 유치 성공
     * AI 에이전트, 산업 디지털 전환 솔루션 주목받음

  핀테크

     * 투자 규모 급감하여 1,883억원 유치, 2020년 수준으로 회귀
     * 비바리퍼블리카(토스) 신규 투자 부재가 주요 원인
     * 규제 환경 변화와 기존 기업의 시장 장악력 증가로 신규 투자 어려움

  바이오/헬스케어

     * AI 기반 헬스케어 솔루션이 초기 단계에서도 투자 성공
     * 바이오 스타트업 투자 확대되었으나 IPO 시장 부진으로 장기 투자 필요
     * 정부의 AI 헬스케어 산업 육성 정책 강화

  차량/모빌리티

     * 투자금 3,347억원으로 전년 대비 소폭 하락
     * 자율주행 및 전기차 관련 기술이 중심, 마이크로모빌리티는 관심 감소
     * 친환경 모빌리티 기술과 글로벌 시장 확장을 통한 성장 기대

  미디어/콘텐츠

     * 숏폼 콘텐츠, AI 기반 콘텐츠 생성 기업이 투자 유치 성공
     * 글로벌 진출을 목표로 하는 콘텐츠 IP 기반 스타트업 주목
     * 게임과 엔터테인먼트 기술 융합 스타트업 증가

  부동산/프롭테크

     * AI, 빅데이터 활용한 혁신 기업 중심으로 선별적 투자 진행
     * 부동산 경기 부진으로 창업 감소, 그러나 기술 기반 프롭테크 시장 성장 가능성 존재
     * 글로벌 시장을 겨냥한 기업이 투자 유치 성공 사례 많음

  물류/배송

     * AI·IT 기술을 활용한 물류 자동화 솔루션 기업들이 투자 유치 주도
     * 글로벌 물류 시장 진출 스타트업 증가, 크로스보더 커머스 활성화
     * 물류 로봇 및 풀필먼트 스타트업 투자 증가

  제조/우주

     * 로봇, 배터리, 소재 관련 스타트업이 높은 투자 유치
     * AI 반도체, 항공·우주 기술에 대한 투자도 증가
     * 친환경, 자동화 기술 적용 기업이 투자자로부터 주목받음

  게임

     * 대기업과 게임사 투자 대상이 되나 실적 악화로 투자 분위기 침체
     * 글로벌 시장 확장을 위한 IP 확보 및 AI 기술 접목이 핵심 전략
     * 정부의 게임 기업 지원 정책 강화

  에듀테크

     * 팬데믹 이후 투자 둔화되었으나 1,194억원 유입되며 회복세
     * AI 활용 맞춤형 학습 플랫폼이 투자 유치 성공
     * 글로벌 시장 확장 가능성이 높은 기업이 투자자 관심 받음

  블록체인

     * 투자 선호도 감소, 대규모 투자 유치 어려움
     * 웹3, NFT 관련 스타트업 일부가 글로벌 투자 유치 성공
     * 금융·게임 산업과 블록체인 기술 융합이 주요 투자 트렌드

  환경/에너지/지속가능성/농수산업

     * 기후 테크 스타트업 증가, 정부의 탄소 중립 정책으로 투자 확대
     * 스마트 농업, 해양 수산업 자동화 기술 적용 스타트업 증가
     * 폐배터리 재활용, 친환경 에너지 솔루션 기업이 투자자 주목

  2025년 투자 전망

     * AI 투자 지속 확대: 생성형 AI, AI 반도체, AI 에이전트 등 혁신 기술 스타트업이 강세 유지
     * 해외 투자 유치 전략 필수: 국내 시장 성장 한계로 인해 글로벌 벤처캐피털 투자 유치가 중요해질 전망
     * 친환경·지속가능성 분야 성장: 탄소 중립, 기후 테크, 에너지 저장 및 재활용 기술 스타트업 투자 증가
     * 유니콘 탄생 어려움: 대규모 투자 감소로 신규 유니콘 기업 등장 속도 둔화 예상
     * IPO 및 M&A 시장 위축 지속: 불확실한 시장 상황으로 인해 상장 기업 감소, 대기업의 인수합병도 조심스러워질 전망
     * 기술 기반 스타트업 선별 투자 강화: 단순 플랫폼보다는 핵심 기술을 보유한 스타트업이 더 많은 투자 유치 가능

결론

     * 2025년에도 투자 시장은 AI 중심 성장, 글로벌 투자 유치 확대, 친환경 기술 부각이 핵심 트렌드가 될 전망
     * 다만 전통적인 플랫폼 중심 스타트업이나 B2C 서비스 기업은 투자 유치에 어려움을 겪을 가능성이 높음
     * 수익성 증명과 글로벌 확장 가능성이 투자 성공의 핵심 요소가 될 것으로 보임
"
"https://news.hada.io/topic?id=19040","AI 활용 면접 현황: Ask HN","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI 활용 면접 현황: Ask HN

     * 전통적인 기술 면접의 변화에 대한 의문 제기
          + 최근 기술 면접에서 대면 화이트보드 사용이 다시 증가하고 있는지에 대한 질문.
          + GPT와 같은 도구로 문제를 쉽게 해결할 수 있는 상황에서 전통적인 기술 면접이 어떻게 작동해야 하는지에 대한 의문.

        Hacker News 의견

     * 2012년에 LeetCode 스타일의 인터뷰를 사용했으나 좋지 않은 결과를 얻었음. 이후 150명의 개발자를 채용하면서 몇 가지 방법을 정립했음
          + 리크루터와 네트워크를 활용하여 지원서의 양을 줄이는 것이 중요함
          + 2시간 이내의 간단한 과제를 주고, 해결 방법을 논의함으로써 기본적인 역량을 확인함
          + 지원자가 편안하게 인터뷰를 볼 수 있도록 하여 그들의 진정한 실력을 볼 수 있도록 함
          + 과거와 현재의 도전 과제를 논의하여 지원자의 성격과 팀 적합성을 파악함
          + 현재 이 프로세스를 거의 10년간 사용 중이며, LLMs에 대해 변경할 필요성을 느끼지 않음
          + 직관에 의존하여 지원자의 적합성을 판단함
     * GPT를 코딩 인터뷰에서 사용하도록 허용했으나, 대부분의 지원자가 잘 활용하지 못했음
          + 좋은 인터뷰 프로세스가 있다면 AI의 도움 없이도 좋은 지원자를 구별할 수 있음
     * 대기업에서 대면 인터뷰로 전환 중이며, 이는 인터뷰 중 부정행위가 만연하기 때문임
          + 부정행위를 하는 지원자를 식별하는 것이 쉬워졌으며, 시간 낭비를 줄일 수 있음
     * 스타트업에서의 기술 인터뷰는 화면 공유를 통해 진행하며, 다양한 도구 사용을 허용함
          + GPT/Copilot 사용도 허용하나, 해결 방법이 명확해야 함
     * 문제 해결 과정 자체가 중요하며, 문제를 이해하고 여러 해결책을 제시할 수 있는지를 평가함
          + 소프트웨어 개발 직무에서는 문제를 분석하고 설명하는 능력이 중요함
     * 이력서 검토 시 AI 생성된 것처럼 보이면 신뢰도가 떨어짐
          + 인터뷰에서 AI를 사용하려는 지원자는 쉽게 식별할 수 있음
     * 전통적인 기술 인터뷰는 단순한 작업을 수행할 수 있는 사람을 찾기 위한 것이었음
          + AI의 등장으로 창의성과 팀워크가 중요한 요소가 되었으며, 인터뷰 전략을 바꿔야 함
     * 부정행위 도구의 발전을 인지하고, 면접관들이 이에 대해 훈련받아야 함
     * 지원자와의 대화를 통해 그들의 강점과 약점을 파악하고, 소통 능력을 평가함
          + 적성, 동기, 신뢰성이 중요하며, 특정 기술에 대한 지식은 나중에 배울 수 있음
     * 인터뷰어가 지원자의 프로젝트에 대해 깊이 있는 논의를 할 수 있어야 함
          + LeetCode는 일시적인 인터뷰 기법이었으며, AI의 대중화로 그 중요성이 줄어들고 있음
"
"https://news.hada.io/topic?id=19007","명령줄 인터페이스 가이드라인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            명령줄 인터페이스 가이드라인

   이도건 님께서 Command-line interface guideline를 한국어로 번역하신 것을 공유합니다! 번역본의 소스 코드는 GitHub 저장소에서 확인하실 수 있습니다.

   감사합니다.

   이런 메인화면 너무 좋아요

   쌍따봉 드립니당.. 고맙습니다

   커맨드 라인 인터페이스 가이드라인

   예전에 간단히 요약만 해서 올렸는데 이제 전체 문서를 완전하게 볼 수 있게 되었네요. 고맙습니다!

   몇 가지 안티 패턴 예시도 있으면 좋겠네요.
   go는 항상 go --version이 아닌 go version을 요구해서 저에게 엿을 먹입니다.
"
"https://news.hada.io/topic?id=19051","2025년을 위한 도구들 : Oils, Radicle, Simplex Chat","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              2025년을 위한 도구들 : Oils, Radicle, Simplex Chat

     * 저자는 Oils, Radicle, Simplex Chat 3가지가 더욱 널리 사용되면 좋겠다고 생각
          + Oils: 기존 POSIX 쉘(Bash 등)을 대체
          + Radicle: 분산형 Git 호스팅 솔루션으로 Github/GitLab을 대체 가능
          + Simplex Chat: 이메일을 대체하거나 혁신 가능
     * 보통 새로운 도구를 발견하면, 그 도구의 기본개념 이해하는데 10분, 시작하는데 5일까지 걸리게 됨
          + 대부분은 기본 개념을 이해하고 나면 흥미가 끝나버리기에, 정말 근본적인 혁신과 일관된 철학이 있어야 계속 관심을 가질 수 있음
          + 예를 들어 Pijul 같은 프로젝트가 흥미로웠지만 Git에 비교해 적용 이점이 크게 체감되지 않아 일상적으로 밀고 나가지는 못했음
          + 아래 소개할 세 가지 툴은 현재 대안으로서의 가치와 실제로 쓰일 만한 완성도를 갖췄다고 봄

Oils for unix

     * Bash 쉘을 새롭게 구현한 프로젝트로, POSIX 호환성을 갖추면서도 오래된 쉘 환경의 문제점을 해결해 나가는 중
     * KornShell 등 기존 대안이 있었지만, 유의미한 개선 없이 오랜 기간 정체 상태였음
     * Nushell 처럼 비슷한 구문으로 새로운 언어를 만드는 것도 아님
     * Oils는 Bash 구현을 바탕으로, 정말로 깨진 부분만 점진적으로 고치고, 스크립트도 단계적으로 마이그레이션 가능하도록 함
          + 기존 POSIX 셸의 문제점(예: 암시적 글로빙, 잘못된 산술 연산 등)을 해결
     * 현재 Bash 호환 부분은 안정된 베타 단계에 있으며, 올해 1.0 버전 출시가 목표
     * Oils 시도해보기 : Alpine Linux Edge 버전에서 oils-for-unix 패키지를 이용해 간단히 도커 환경에서 테스트 가능

Radicle

     * Git 저장소를 탈중앙 방식으로 호스팅/공유하는 솔루션
     * Gitlab이나 Github보다 우수하며, 소스 코드의 가용성을 높이기 위해 토렌트와 유사한 방식을 사용
     * 로컬 호스팅임에도 불구하고 기존의 서버-클라이언트 상호작용과 유사한 직관적인 UX를 제공
     * 새로운 개념을 쉽게 배울 수 있도록 문서화에 많은 노력을 기울여서, 완전히 새로운 워크플로라도 쉽게 적응 가능
     * ActivityPub 기반 ForgeFed와 달리, Radicle은 Git 데이터에 최적화되어 더 높은 가용성을 기대할 수 있음
     * Radicle 시도해보기 : 내 서버에 래디클 노드를 만들고 이 블로그에 소스를 게시해둠. 공개된 사용자 가이드를 따르거나, 그냥 내 블로그를 피어링으로 클론하는 것도 가능

Simplex Chat

     * 겉보기에는 또 하나의 채팅 앱이지만, 주소(Address) 개념이 근본적으로 다름
     * 생성한 프로필에 여러 주소를 추가할 수 있고, 이 주소는 특정 대화 연결에만 사용되거나 스팸 발생 시 즉시 폐기 가능함
          + ""주소는 1회용이거나, 삭제하기 전까지 재사용 가능""
          + ""2개의 프로필 간의 모든 연결은 고유한 1대1 주소를 사용""
     * 결과적으로 “하나의 프로필에 여러 주소를 유동적으로 연결/분리”할 수 있어, 스팸에 대응하거나 목적별로 주소를 사용하기 좋음
     * 재사용 가능한 주소를 삭제하면 새로운 연결만 차단되며, 기존 연락처를 삭제하면 해당 연락처의 접근이 차단됨
          + 즉 ""주소를 추상화하고, 주소와 프로필을 디커플링 하는 것. 마치 사서함 처럼""
     * 이메일 시스템이 이런 방식을 채택한다면, 주소를 새로 발급하고 필요 시 버리는 과정을 간편화할 수 있음
     * E2E 암호화, 완전한 프라이버시도 지원해, 메일 대신 이런 프로토콜이 확산되길 바라는 마음이 큼
     * 아직 인지도가 낮지만, “또 다른 메신저”라고 지나치기엔 근본적 아이디어가 참신함
     * Simplex 시도해보기 : 피드백용 그룹을 생성해 둠. 익명 모드로 그룹에 참여 가능하며, 간단한 프로필 생성 후 바로 대화를 체험할 수 있음

뭘 해야할까?

     * 우리가 사용하는 도구가 곧 미래의 표준이 됨
     * Oils, Radicle, Simplex Chat 모두 기존의 관행적 도구를 넘어서는 가능성을 지닌 프로젝트임
     * 이런 새로운 프로젝트를 직접 시도해보고, 더 나은 실무 표준을 만들어나가기를 제안함

     * Oil - 새로운 Unix 쉘
       제가 2021년에 소개했었고, 예전 이름이 Oil 이었는데 2025년부터 Oils 로 이름이 변경되었습니다.
     * Radicle - P2P 방식의 GitHub 대체제
     * SimpleX - 사용자 ID가 없는 최초의 메신저

   oils는 너무 일반적인 단어라서 괜히 정감이 안가네요. 저만 그럴지 모르겠는데, 딱 검색했을 때 해당 서비스가 안나오는 경우 은근 거부감이 들어요.
"
"https://news.hada.io/topic?id=18923","Kronotop - Redis 호환 분산 문서 저장소, FoundationDB 기반","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Kronotop - Redis 호환 분산 문서 저장소, FoundationDB 기반

     * Redis 호환 방식으로 동작하는 분산형 트랜잭션 문서 데이터베이스로 FoundationDB를 메타데이터 및 스토리지 관리에 활용
     * MQL과 유사한 쿼리 언어, ACID 트랜잭션, Primary-Standby 복제 모델을 갖춘 디스크 기반 스토리지 엔진을 목표로 함

한눈에 보기

     * 기본적으로 수평 확장(Sharding) 지원 구조
     * 단일 혹은 멀티 마스터 클러스터를 구성해 다양한 배포 전략을 지원
     * Redis Serialization Protocol(RESP)을 사용해 어떤 Redis 클라이언트로든 연결 가능
     * Redis 클러스터 스펙의 일부를 지원
     * FoundationDB를 클러스터 관리와 데이터 구조 정의를 위한 메타스토어로 활용
     * Java로 구현되어 JDK 21 이상을 필요로 함

현재 상태

     * 초기 기능이 구현된 상태지만, 안정적인 기반을 갖추고 있음
     * ZMap : Ordered key-value store로, FoundationDB API 위에 Redis 프로토콜 프록시를 제공함
     * Namespaces : ZMap과 Buckets를 격리하는 개념으로, FoundationDB의 directory layer를 얇게 감싼 구조임
     * Volume : 스토리지 엔진 구현체로서, Primary-Standby 복제 모델을 채택
     * Clustering : 단일 마스터(single-master) 또는 멀티 마스터(multi-master) 형태로 클러스터 구성 가능
     * Redis Data Structures (부분 지원) : String 및 Hash 자료구조 일부를 지원

향후 계획

     * Bucket이라는 데이터 구조를 설계해, JSON-like 문서를 저장할 수 있게 지원할 예정
     * Bucket에서 FoundationDB 기반 트랜잭션과 MQL-like 쿼리 언어를 제공할 계획
     * Redis의 일반적인 자료구조(String, Hash, Sorted Sets 등)를 점진적으로 지원할 계획
"
"https://news.hada.io/topic?id=19002","$15짜리 Casio F91W 5km 수중 테스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $15짜리 Casio F91W 5km 수중 테스트

        Hacker News 의견

     * 한 사용자는 자유 잠수 중에 시계를 발견하고 몇 년 동안 착용했음
     * F91W 시계에 프로그래머블 마이크로컨트롤러가 있는 대체 PCB가 있음
          + 크리스마스에 받은 후 해킹하는 재미를 느꼈고, 조수 레벨과 다음 고조 및 저조를 표시하는 새로운 화면을 프로그래밍했음
     * F-91W는 재미있는 작은 시계이며, 다양한 독특한 개조가 이루어지고 있음
          + 유튜브에 개조 가이드가 있으며, TOTP를 F-91W에 넣는 방법도 있음
     * Casio는 최근 F-91W의 미니멀리스트 시리즈를 출시했음
     * 시계를 오일로 채워 개조하는 방법도 있음
     * Hacker News에서 이 시계가 자주 언급되어 하나 구매할 예정임
     * F91W나 W59 바디에 피트니스 밴드를 넣고 싶음
     * Casio 개조에 빠져 있으며, 오일로 채우면 디스플레이가 더 선명해지고 시야각이 개선되며 방수성이 증가함
          + 그러나 태양 아래에서 시계가 매우 뜨거워질 수 있고, 과정이 지저분할 수 있으며, 일부 기능이 손상될 수 있음
          + 다른 사람들이 어떻게 했는지 확인하는 것이 좋음
     * 전설적인 GW-5000U를 소유하고 있으며, 저렴한 대안들이 5000U만큼 좋다는 점이 놀라움
     * Casio 외에 이만큼 놀라운 시계를 가진 브랜드가 있는지 궁금함
     * F91W가 공식적으로 4,950미터, 약 16,240피트의 깊이까지 견딘다는 점이 놀라움
          + 4,950미터 아래에서의 압력은 약 7,227 psi로, 이는 엄청난 압력임
          + 농담을 즐김
"
"https://news.hada.io/topic?id=18998","메뉴 바에 있는 macOS 시스템 모니터 Stats","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      메뉴 바에 있는 macOS 시스템 모니터 Stats

     * StatsmacOS 시스템 모니터
     * 설치
          + 수동 설치
               o 최신 버전을 다운로드하여 Stats.dmg 파일을 열고 애플리케이션 폴더로 이동함
          + Homebrew
               o 터미널 앱을 열고 brew install stats 명령어를 입력하여 설치 가능함
     * 요구 사항
          + macOS 10.15(Catalina) 이상에서 지원됨
     * 기능
          + Stats는 macOS 시스템을 모니터링할 수 있는 애플리케이션임
               o CPU 사용량
               o GPU 사용량
               o 메모리 사용량
               o 디스크 사용량
               o 네트워크 사용량
               o 배터리 수준
               o 팬 제어 (유지보수되지 않음)
               o 센서 정보 (온도/전압/전력)
               o 블루투스 장치
               o 여러 시간대 시계
     * 자주 묻는 질문
          + 메뉴 바 아이콘 순서 변경 방법
               o macOS가 메뉴 바 아이콘의 순서를 결정함
               o ⌘ (커맨드 키)를 누르고 아이콘을 원하는 위치로 드래그한 후 ⌘ 키를 놓음
          + 센서가 보이지 않을 경우 (M1 Mac)
               o M1 Mac의 1세대에서는 HID 서비스를 통해서만 센서 데이터를 얻을 수 있음
               o 센서 모듈 설정에서 HID sensors 옵션을 활성화하여 사용 가능함
          + CPU 주파수 표시 방법
               o Intel 기반 Mac에서만 CPU 주파수 사용 가능
               o Intel Power Gadget(IPG)을 설치해야 함
          + Stats의 에너지 영향이나 CPU 사용량 줄이는 방법
               o 일부 모듈을 비활성화하여 에너지 영향을 줄일 수 있음
               o 센서와 블루투스 모듈이 가장 비효율적임
          + 이슈가 응답 없이 닫힌 이유
               o 중복된 이슈일 가능성이 높음
               o 닫힌 이슈를 검색하여 답변을 찾을 수 있음
          + 팬 제어
               o 팬 제어는 레거시 모드로 업데이트나 수정이 없음
               o 개선 사항은 PR을 통해 수용 가능함
     * 지원 언어
          + 다양한 언어를 지원하며, 새로운 언어 추가나 기존 번역 개선 가능함
     * 라이선스
          + MIT 라이선스 사용

        Hacker News 의견

     * Stats를 오랫동안 사용해왔으며 CPU, GPU, 메모리, 네트워크 업로드/다운로드 속도를 모니터링하는 데 유용함. 여러 프로세스가 종료되지 않고 100%에 멈춰 있을 때 이를 잡아내는 데 좋음. 코드가 실제로 GPU에서 실행되고 있는지 확인할 수 있음. 다운로드나 전송이 멈췄을 때 네트워크 전송 속도를 확인할 수 있음. 컴퓨터의 상태를 상위 수준에서 파악할 수 있어 보안이 강화됨. 메뉴바에 없으면 상상할 수 없을 정도로 유용함
     * iStat Menus의 클론처럼 보이며, 오랫동안 설치했지만 거의 사용하지 않아 결국 삭제함. 도크의 활동 모니터가 CPU를 보여주는 것으로 충분함
     * iStat Menus에 돈을 지불했지만, 새 노트북을 구입한 후 이전 버전을 다운로드하는 방법을 찾지 못함. CPU, 메모리, 네트워크 소비를 항상 볼 수 있는 것이 필수적이며, 각 항목을 소비하는 상위 5개 앱을 보는 것도 중요함. 기본 기능이 되어야 하지만 그렇지 않아 나쁜 소프트웨어가 이득을 봄. 기본 정보를 얻기 위해 활동 모니터를 매번 실행할 필요가 없어야 함. 이 프로그램을 시도해볼 예정임
     * 설치 후 ""LegacyScreenSaver""가 40GB의 메모리를 누출하고 있다는 것을 즉시 발견함
     * iStat Menus의 오랜 유료 사용자이며, 이 프로그램이 그로부터 많은 영감을 받은 것 같음
     * Brew로 설치했지만 메뉴바에 나타나지 않음. Mac을 재시작하니 보이기 시작함. 문서를 업데이트할 PR을 만들기에는 귀찮음. 배터리 위젯만 보이고 다른 위젯은 보이지 않음. 혼란스러운 온보딩 경험임. Mac의 메뉴바 공간 문제로 인해 모든 항목이 숨겨져 있었음. 더 많은 메뉴 항목이 있다는 표시가 없음. Mac의 디자인 결정이 아쉬움
     * Stats가 iStat Menus에 비해 CPU 사용량이 더 많았음을 발견함
     * 하드 드라이브의 클릭 소리를 들으며 시스템이 많은 디스크 IO를 수행하고 있는지 알 수 있었던 시절이 그리움. RAM이 초과되었을 때 스와핑으로 인해 발생했음. 요즘은 높은 활용도를 소리 신호로 변환하는 것이 있는지 궁금함
     * 이 프로그램이 좋지만, Touch Bar에 통합할 계획이 있는지 궁금함. 직접 해보거나 시도해보고 싶지만, Touch Bar 개발 경험이 없고 시작할 동기가 크지 않음
     * iPulse를 약 20년 동안 사용 중이며, 외관이 좋아서 주변 사람들로부터 칭찬과 질문을 자주 받음. 화면 공간을 많이 차지하지 않음. 관련은 없지만 강력히 추천함
"
"https://news.hada.io/topic?id=18928","시위자를 위한 스마트폰 보안 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          시위자를 위한 스마트폰 보안 가이드

  스마트폰 보안 가이드

     * 시위, 활동가, 기자들에게 스마트폰은 중요한 도구이지만, 감시의 위험이 있음.
     * 시위에 스마트폰을 가져갈지 고민해야 함. 가져가지 않으면 데이터 보안이 높아짐.
     * 별도의 기기(버너폰, 오래된 폰, 카메라)를 사용하는 것이 더 나은 선택일 수 있음.
     * 스마트폰을 가져가야 한다면 보안을 최대화하고 프라이버시 위험을 최소화하는 방법을 알아야 함.

  시위에서의 위험

     * 기기를 잃어버릴 위험.
     * 당국에 의해 스마트폰이 압수될 위험.
     * 서비스 중단 위험: 당국의 의도적 방해 또는 네트워크 과부하.
     * 표적 감시: 서비스 방해, 통화/SMS 차단, 암호화되지 않은 트래픽 감시.
     * 대량 감시: 웹 서비스 방해, 메신저 및 음성 서비스 방해, 공공 Wi-Fi를 통한 트래픽 감시.

  기기 보안

    강력한 화면 잠금 사용

     * 최소 6자리 PIN 사용, 이상적으로는 영숫자 암호문 사용.
     * 법 집행 기관이 PIN을 추측하는 것을 방지하기 위해 긴 암호문이 필요함.
     * 법적으로 PIN 제공을 거부할 수 있는 권리를 알아야 함.

    생체 인증 비활성화

     * 생체 인증은 어깨 너머로 PIN을 훔쳐보는 공격을 방지하지만, 당국이 이를 악용할 수 있음.
     * 생체 인증을 비활성화하고 PIN 입력 시 주의해야 함.

    알림 숨기기

     * 잠금 화면에서 알림을 숨겨야 함.
     * iPhone과 Android에서 알림 설정을 통해 알림을 숨길 수 있음.

    잠금 화면 기능 비활성화

     * 잠금 화면에서의 기능 사용을 최소화해야 함.
     * iPhone과 Android에서 잠금 화면 기능을 비활성화할 수 있음.

    외부 저장소 피하기

     * microSD 카드는 암호화 표준이 다를 수 있음.
     * 외부 저장소를 제거하고 내부 저장소에 파일을 저장해야 함.

    보안 패치 고려

     * 최신 보안 패치를 받지 않는 기기는 취약할 수 있음.
     * 최신 iPhone과 Google Pixel이 가장 안전함.

  감시 방지

    AirDrop 비활성화

     * AirDrop은 개인정보를 노출할 수 있음.
     * iPhone에서 AirDrop을 비활성화해야 함.

    네트워크 잠금

     * 2G 네트워크를 비활성화하여 추적을 방지해야 함.
     * Android와 iPhone에서 네트워크 설정을 통해 2G를 비활성화할 수 있음.

    비행기 모드 자주 사용

     * 비행기 모드를 사용하여 셀룰러 연결을 차단해야 함.

    위치 서비스 비활성화

     * 위치 서비스를 비활성화하여 위치 데이터 접근을 최소화해야 함.
     * iPhone과 Android에서 위치 서비스를 비활성화할 수 있음.

  기타 팁

    Signal 사용

     * Signal은 가장 안전한 메시징 앱임.
     * Signal은 강력한 암호화를 제공하며, 정부 요청에 대한 정보 제공이 제한적임.

    정보 접근 보호

     * 예비 배터리나 충전기를 준비해야 함.
     * 비상 연락처나 변호사 번호를 기록해 두어야 함.

    카메라 설정 변경

     * 플래시나 셔터 소리 등 주의를 끌 수 있는 설정을 변경해야 함.

    데이터 백업

     * 데이터를 백업하여 기기 분실 시 대비해야 함.
     * iPhone과 Android에서 각각의 방법으로 데이터를 백업할 수 있음.

  시위 중

    기기 잠금 유지

     * 잠금 상태에서 카메라를 사용하여 사진이나 비디오를 촬영해야 함.
     * iPhone과 Android에서 잠금 상태에서 카메라를 여는 방법을 익혀야 함.

    백업 통신 네트워크 준비

     * 인터넷 차단 시 대비하여 백업 네트워크를 준비해야 함.
     * Briar와 같은 앱을 사용하여 로컬 네트워크를 구축할 수 있음.

  시위 후

    기기 분실 시

     * 기기를 원격으로 찾거나 초기화할 수 있는 방법을 알아야 함.
     * 온라인 서비스에서 로그아웃해야 함.

    다른 사람에 대한 배려

     * 온라인에 사진을 게시할 때 다른 사람의 얼굴이나 특징을 가려야 함.
     * 사진의 메타데이터를 제거해야 함. Signal은 자동으로 메타데이터를 제거함.

        Hacker News 의견

     * 대규모 시위에 참석할 경우, 셀 타워가 연결된 모든 사람을 처리하지 못할 수 있으므로 P2P WiFi나 Bluetooth를 통해 채팅할 수 있는 앱을 사용하는 것이 좋음. 이는 비행기 모드를 계속 사용할 수 있게 해줌
          + 암호화된 워키토키를 사용하는 것도 고려할 만하지만, 일부 국가에서는 법적 제한이 있을 수 있음
          + 가장 좋은 방법은 개인 휴대폰을 집에 두고, 별도의 휴대폰을 사용하거나 아예 휴대폰을 사용하지 않는 것임
          + Meshtastic.org는 저렴한 오픈 소스 LoRa 기반 하드웨어로, 블루투스나 WiFi 웹 인터페이스를 통해 사용할 수 있음
          + 강력한 암호화 계층을 지원하며, 대부분의 상황에서 1km 이상의 거리에서도 사용 가능함
     * 시위에서 기술적인 조언은 합법적인 시위와 불법적인 시위에서 다를 수 있으며, 미국과 이집트 같은 국가에서도 차이가 있음
     * 휴대폰을 분실할 경우 원격으로 위치를 찾거나 데이터를 삭제할 수 있지만, 이는 법적 문제를 초래할 수 있음. 데이터를 처음부터 수집하지 않는 것이 좋음
     * 생체 인증을 비활성화하는 것이 더 나을 수 있음. Face ID의 경우 눈을 감으면 잠금을 해제할 수 없으므로 보안에 유리함
     * Briar 메신저는 시위와 같은 상황에 특화되어 있으며, Signal보다 선호할 수 있음. Briar는 Tor를 통해 P2P로 작동하여 데이터를 수집할 수 없음
     * 일부 법 집행 기관은 ""스팅레이""라는 장치를 사용하여 셀 타워를 가장해 방문자를 추적할 수 있음. 2G 네트워크의 낮은 보안 표준을 악용하는 스팅레이로부터 보호하는 것이 중요함
     * 404 Media는 사진을 지리적으로 위치를 파악할 수 있는 AI 도구에 대한 기사를 발표했음
     * iOS 장치는 첫 번째 잠금 해제 후 법 집행 기관에 취약할 수 있으며, Apple은 이를 완화하기 위한 조치를 취하고 있음
     * 대부분의 조언은 어디서나 적용될 수 있지만, 지역 법률을 확인하는 것이 중요함. 영국에서는 특정 상황에서 PIN이나 비밀번호를 제공해야 할 수도 있음
"
"https://news.hada.io/topic?id=18932","1인 여성 개발팀으로 2백만명 사용자 달성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       1인 여성 개발팀으로 2백만명 사용자 달성하기

     * Nadia Odunayo가 Brighton Ruby에서 발표한 내용의 요약

2020년 1월 1일로 돌아가기

     * 2024년 6월 시점에서 2020년 1월 1일로 돌아가 Storygraph의 초기 성과를 회상
          + 창업 후 1년 동안 매일 개발에 매진하며, 드디어 ""사용자 100명 가입""이라는 목표를 달성
          + 당시 Storygraph는 독자들이 다음에 읽을 책을 선택할 수 있도록 돕는 ""책 추천 도구"" 였음
               o 웹사이트는 몇 천 권의 책 리스트를 제공하며, 기분, 속도, 장르, 책 크기 등으로 필터링 가능
     * 초기 사용자:
          + Nadia의 친구들, Instagram의 독서 커뮤니티(Bookstagram)에서 DM으로 유입된 사람들
          + 사용자들은 잠재력을 보고 지인들에게 소개하며 점진적으로 사용자 기반 확장
     * 2020년 새해를 기념하여 베타 버전을 재출시
          + 새해를 독서 목표를 설정하는 시기로 여기는 독자들에게 동기 부여
          + 작은 이벤트 효과로 ""160명 사용자 가입, 100명의 신규 방문자"" 유치
          + 방문자는 평균 ""6분 30초"" 동안 웹사이트를 탐색하며 긍정적인 반응
     * 2019년 동안 제품 개발에 집중하며 사람들이 책 추천이나 Goodreads 대안을 찾을 때 보낼 만한 제품을 만들기 위해 노력
     * ""Goodreads 대체제""를 목표로 한 것은 아니었지만, 특정 사용자층에게 더 나은 서비스가 될 가능성을 엿봄
     * 2020년을 맞아 새로운 성과에 힘입어 더욱 열정적으로 프로젝트를 지속

팬데믹과 초기 성장

     * 팬데믹으로 인해 집중적인 개발 시간이 확보되었고 독서율이 증가하며 신규 가입자도 늘어남
          + 그러나 제품의 완성도가 낮다고 느껴 ""공식적으로 홍보""하는 데 두려움이 있었음
          + 기사나 사용자 의견에 대응하지 않고 조용히 개발에 전념
     * 2020년 5월까지 Storygraph는 여전히 간소한 기능만 제공했으며, 혼자 제품 개발을 진행해 기술적으로 부족함을 느끼며 불안감과 취약함을 느낌
     * 독서 커뮤니티에서 꾸준히 활동하며 사용자들이 새로운 대안을 요구하는 트렌드를 관찰
          + 기존의 100명 사용자 달성에서 얻은 자신감과 동력으로 서비스를 본격적으로 알리기로 결정

트위터 확산과 사용자 1,000명 돌파

     * 2020년 5월 27일, 트위터에서 Storygraph에 대한 긍정적인 반응한 약 100명에게 답장을 보내거나 DM을 통해 연락
          + 대부분은 응답하지 않았지만, 일부는 프로젝트의 잠재력을 이해하고 관심을 보임
          + 일부 사용자는 Goodreads와의 기능 비교를 하며 부족함을 지적
               o 당시 Storygraph는 기능이 제한적이어서 Goodreads와 경쟁하기 어려운 상황
     * 프로젝트의 가치를 이해한 소수의 사용자들이 독서 커뮤니티에 Storygraph를 소개
          + 독서 친구들에게 제품을 추천하며 사용자 기반이 확대
     * 2020년 6월 11일, Storygraph의 사용자 수가 ""1,000명""을 돌파
          + 홍보 시작 후 단 2주 만에 사용자 수가 두 배 이상 증가
          + Instagram 스토리에서 축하 이벤트 개최

트위터 폭발과 급격한 성장

     * 2020년 6월 16일, Emma Barnes(Consonance Books 운영)가 트윗 작성:
          + “출판업계 모두 Storygraph를 알아야 한다. 몇 년 만에 최고의 혁신. 거대 기술 기업의 형편없는 소프트웨어에 의존하지 말자.”
          + 이 트윗은 앱 활동을 약간 증가시켰으나 큰 반응은 없었음
     * 이후 Sam Missingham이 Emma의 트윗을 인용하며 더 인기를 끌게 만듦:
          + “Book Twitter, 이제 Goodreads 대신 이걸 써보자. 5분 써봤는데 이미 훨씬 낫다. 게다가 흑인 여성이 설립했으며 Amazon이 운영하지 않는다.”
          + Sam의 트윗 이후 활동량이 빠르게 증가
     * 트윗 내용이 큰 반향을 일으킨 이유:
          + Book Twitter 커뮤니티의 관심을 끌었음
          + 사람들이 대안을 원하던 Goodreads를 겨냥
          + Black Lives Matter 운동의 여파로 흑인 창작자를 지지하려는 에너지가 많았음
          + 팬데믹 중 Amazon 독점에 대한 반감이 커진 상황과 맞물림
     * 트윗이 빠르게 확산되며 Storygraph의 사용자 증가:
          + 수십 명에서 시작해 수백, 수천 명으로 확대
          + 이메일 알림(“Goodreads 데이터 가져오기 시작”)이 급증하며 시스템에 부하 발생
     * 트윗이 예상치 못한 속도로 바이럴되며 수많은 사용자가 가입
     * 사용자 수 폭증으로 인해 기술적 문제와 ""과부하 상황"" 발생

어두운 날들

     * Goodreads 데이터 가져오기 기능이 지연되면서 사용자 불만이 증가
          + 수천 명의 사용자에게 데이터 가져오기가 진행 중이라는 메일을 보냈지만, 가져오기 속도가 매우 느려져 수개월이 소요될 상황
     * 수많은 문제를 동시에 해결해야 하는 상황으로 극심한 스트레스를 받음
          + 트위터 사용자들에게 응답
          + 실패하는 데이터 가져오기 처리
          + 앱의 코드를 재작성하여 가져오기 속도를 몇 개월에서 ""몇 일로 단축""하기
     * 2020년 6월 17일, 또 다른 바이럴 트윗이 확산되며 사용자 급증:
          + “하루 사용해 봤는데 너무 좋아서 정신을 못 차리겠다”라는 트윗이 인기
          + 매시간 수백에서 천 명 단위의 신규 가입 발생
          + 결과적으로 시스템 과부하:
               o Goodreads 가져오기 불가
               o 개인화 추천 기능 미작동
               o 백그라운드 작업 완전 중단
     * 사용자 수가 1,000명을 넘어 ""10,000명""에 근접하며 압박을 느끼기 시작
          + ""나는 B2C 비즈니스를 원한 적이 없었다""는 생각과 함께 회의감
     * 고립감을 느끼며 ""어두운 욕실""에 앉아 생각에 잠김
          + “나 못하겠어”라는 말을 참았지만, 거의 그럴뻔 했음

창업 이야기: 처음으로 돌아가기

     * 어떻게 했을까? 여기서 잠깐 앞으로 돌아가 봄
     * 개인적으로 학구적인 배경에서 자라며 Oxford에서 철학, 정치, 경제를 전공했음
          + 부모님의 권유로 금융 안정성을 위한 투자은행 경로를 따르려 했음
          + 그러나 투자은행 직업에 회의를 느끼고 졸업 후 제안을 거절
     * 런던의 Makers Academy 소프트웨어 부트캠프에서 코딩을 배우기로 결심
          + 개발자와 소통하기 위한 기본적인 코딩 스킬을 목표로 참여
          + 개발자에 대한 고정관념을 깨고 코딩의 가치를 깨달아 본격적으로 몰입
     * Makers Academy 졸업 후 Pivotal Labs에 취업
          + 1년 반 동안 Cloud Foundry 플랫폼 작업
          + 이후 동료 Theo Christian과 함께 Ignition Works라는 컨설팅 및 제품 개발 회사 창업
     * 이 시기에 FIRE 운동(재정적 독립 및 조기 은퇴) 에 관심을 갖게 됨
          + 경제적 독립성을 확보해 자신과 창업 활동에 투자할 수 있는 기반을 마련하고자 함
          + 그러나 Ignition Works에서의 목표와 파트너십이 기대에 미치지 못해 퇴사
          + 회사 자금의 절반을 인출해 5년간의 자금 여유를 확보
     * 친구 Saron Yitbarek와 함께 Code Newbie 프로젝트에 참여
          + 코딩을 배우는 사람들을 위한 커뮤니티를 제품 기반 회사로 전환하려 했으나 실패
     * 2019년 1월 3일, 책상에 혼자 앉아 창의적인 방향성을 고민
          + 자금은 2022년까지 사용할 수 있었지만 큰 아이디어가 없었음
     * 오래전부터 고민하던 두 개의 사이드 프로젝트에 시간을 투자하기로 결정:
          + Runroot: 러닝 루트를 자동 생성하는 앱
          + ReadLists: 맞춤형 독서 리스트를 만들고 진행 상황을 추적할 수 있는 대시보드 앱
     * Storygraph는 ReadLists 아이디어에서 비롯되었고, 이 결정에 접근한 방식이 Storygraph 성공의 핵심

세 가지 원칙

     * 모든 것은 창업자가 통제할 수 있는 요소와 그렇지 않은 요소를 구분한 접근 방식에서 비롯됨
          + 통제할 수 없는 요소: 바이럴 트윗, 새로운 경쟁자 등
          + 통제할 수 있는 요소: 회사와 제품을 설계하는 방식
     * 성공을 위한 세 가지 주요 원칙
          + 기술을 단순하게 유지: 복잡한 기술 대신 안정적이고 성숙한 도구를 활용
          + 고객과 지속적으로 대화: 고객 피드백을 제품 개선에 반영
          + 비용을 낮게 유지: 효율적인 운영을 통해 재정 안정성 확보

첫 번째 원칙: 기술 단순화

     * 첫 번째 원칙인 기술 단순화에 따라 다음과 같은 방향 설정
          + 이미 잘 아는 기술을 활용
          + 필요 이상의 복잡성을 피하며 문제 해결에 필요한 최소한의 기술만 사용
          + 안정적이고 성숙하며 ""지루한"" 도구와 플랫폼 선택
     * 개인적으로 가장 적합했던 기술 스택은 Rails였음

두 번째 원칙: 고객과 지속적으로 대화

     * Rails로 개발하는 과정에서 즐거움을 느끼며 책과 관련된 프로젝트에 몰두하고자 결심
     * 성공적인 제품 개발을 위해 두 번째 원칙, 고객과 지속적으로 대화하는 방식을 도입
     * 고객 대화의 중요성
          + 아무도 원하지 않는 제품을 만드는 것만큼 나쁜 것은 없음
          + 고객과 대화해야 한다는 것은 모두가 알지만, 이를 제대로 수행하는 방법이 중요
               o 스크립트를 준비하고 열린 질문을 통해 탐구에 집중
               o 확인 편향을 피하고 진정한 문제를 발견하는 것에 초점
     * 초기에 저질렀던 실수
          + 너무 일찍 데모를 보여주며 구체적인 피드백을 받지 못함
          + 대신 독서 습관, 불편한 점 등과 관련된 열린 질문을 사용
          + 인터뷰 결과를 5개씩 검토하고 요약하며 주제를 가상 화이트보드에 정리
     * 알파와 베타 제품 개발
          + 초기 피드백을 통해 유용한 기능(개인화 추천 서비스)의 아이디어를 도출
          + 많은 초기 기능은 수동으로 처리하며 과도한 개발을 피함
               o 이는 첫 번째 원칙, 기술 단순화의 적용 사례
          + 소규모 그룹으로 사용자 온보딩을 진행하며 고객 피드백을 지속적으로 수집
          + 알파 제품의 한계를 다다르자 보다 완성된 베타 제품을 개발

세 번째 원칙: 비용을 낮게 유지하며 베타 성장

     * 2019년 9월 2일, 베타 버전을 공개하며 뉴스레터 구독자들에게 공유를 독려
          + 피드백이 본격적으로 들어오기 시작하며, 수동으로 책 요청을 처리할 직원을 파트타임으로 고용
          + 여전히 비용을 최소화하며 개인 자금을 사용해 운영, 남아있는 자금으로 지속 가능성 확보
     * 몇 달 후 Rob Freelove가 프로젝트에 관심을 보이며 머신러닝 지원을 제공
     * 그의 도움으로 기술 개발을 이어가며 제품 품질과 사용자 경험을 개선

급격한 성장, 어두운 날들이 다시 오다, 그리고 확장

     * 세 가지 원칙에 충실하며 천천히 그러나 꾸준히 사용자 기반을 확장하며 점진적으로 성장
     * 2020년 6월 17일, 트위터 바이럴 효과로 사용자가 급격히 증가
          + 수천 명이 Goodreads 데이터를 가져오려 시도하며 시스템 과부하 발생
          + 백그라운드 작업 실패와 서버 확장 불능 상태에 도달
     * 상황이 압도적이었고, 포기하고 싶었던 ""어두운 순간"" 을 경험
     * 그러나 포기는 선택지가 아니었음
     * 2주간의 ""어두운 날들"" 동안 다음을 포함한 주요 문제를 해결
          + 코드 재작성
          + 서버와 데이터베이스 업그레이드
          + 새로운 문제에 대한 대응
     * 지속적 성장과 수익화 필요성 인식
          + 위기를 극복한 후, 매일 수백 명의 사용자가 가입하며 입소문을 통해 성장 지속
          + 결정에 어려움을 겪을 때마다 고객과의 대화를 통해 방향성을 찾아감
          + 사용자 기반이 충분히 커지면서 수익 창출 방법을 고민하기 시작

Storygraph Plus 도입과 수익화로 가는 길

     * 비용 절감만으로는 한계가 있어 수익 창출 방안을 모색
     * 여러 비즈니스 모델을 검토한 끝에 고객 직접 결제를 통한 프리미엄 모델(freemium) 도입 결정
          + Storygraph Plus 사전 주문 페이지 제작
          + Stripe 결제 통합: 초기에는 구독 없이 USD로만 결제 가능
          + 구매자를 백엔드에서 ""Early Bird""로 표시
     * 뉴스레터를 통해 Storygraph Plus를 알리고 사전 주문 시작
          + 많은 사용자가 독립적인 Goodreads 대안을 지원하고 싶어하며 주문
          + 초기 몇 주간 수백 건의 사전 주문 확보
          + 고객의 반응을 통해 Plus 모델의 시장성을 검증
     * 2021년 1월 1일, Storygraph 공식 출시와 함께 도메인 변경
          + 사용자가 100,000명을 돌파하며 큰 성과 달성
          + Early Bird 가격 종료 후 정가로도 사람들이 결제하는지 확인하며 Plus 기능 개발
     * 2021년 2월 28일(또는 일부 지역은 3월 1일)에 Storygraph Plus 공식 출시
          + 1,400건의 사전 주문으로 약 $50,000 수익 달성
          + 실제 Plus 기능 사용이 시작된 이후에도 고객의 흥미와 만족 지속

모바일 앱 개발, Heroku 이전, 그리고 지속적 성장

     * 2021년 5월, Storygraph의 가장 큰 문제는 모바일 앱의 부재였음
          + 기존에는 PWA(Progressive Web App)를 제공했으나 사용자는 앱 스토어에서 설치 가능한 네이티브 앱을 원함
     * 비용 절감과 기술 단순화 원칙을 유지하며 Rails와 Hotwire/Turbo 모바일 어댑터를 활용
          + 최소한의 Swift/Kotlin과 Ruby를 결합하여 6주 만에 앱 개발 및 출시
          + 앱 출시 이후 가입자 수 증가
     * Heroku에서 Cloud 66으로의 이전
          + 바이럴 TikTok과 사용자 급증으로 Heroku 운영 비용 증가
               o Heroku 서버 비용: 사용자 증가와 함께 월 $10,000까지 상승
          + Rob이 수개월 동안 대체 플랫폼을 조사한 끝에 Cloud 66으로 이전 결정
               o 2022년 1월 22일, Cloud 66으로 마이그레이션 완료
               o 서버 비용을 80% 절감하며 월 $4,000로 축소, 더 높은 용량 확보
               o 이전 과정에서 모든 사용자가 로그아웃되는 문제 발생했으나 신속히 해결
     * 2022년 6월 26일, Storygraph 사용자 100만 명 돌파
          + 현재:
               o 2.7백만 명의 등록 계정
               o 약 25%의 월간 활성 사용자
               o 월 7백만 명의 고유 방문자
               o 70백만 페이지뷰 및 하루 1,100만 요청 처리
          + 2019년에 시작한 Rails 레포지토리를 기반으로 여전히 운영
     * 수익 및 비용 현황:
          + 월간 비용: 약 $20,000
          + 월간 반복 수익: 약 $60,000
     * 수익성이 확보되어 창립자인 Rob과 Nadia 모두 급여를 받을 수 있음

성공의 이유

     * 운도 있었지만, Storygraph 성공의 핵심은 다음의 세 가지 원칙을 일관되게 유지한 것
          + 기술 단순화
          + 고객과 지속적 대화
          + 비용 절감

   RoR이 다른 프레임워크에 비해 성공사례가 꽤 높은것 같네요. 지금 배워도 괜찮을까요?

   뭔가 커뮤니티의 활성화가 어마어마하게 자란 느낌이예요. 이 발표는 Rails SaaS Conference 에서도 진행된 것 같은데, ""SaaS"" 컨퍼런스가 따로 있다니...

   B2C 비즈니스를 원한적 없었다는 말과 생각보다 큰 서버 비용이 눈에 띄네요.

   RoR이 많이 추상화되어있다보니까 성능 문제로 인스턴스를 수직 확장해서 사용하고 덕분에 서버비용이 꽤 나오는 게 아닐까 싶네요.

   한달전에 1인 개발팀, 200만 사용자 달성 [비디오] 라고 비디오 링크가 올라왔는데, 발표 스크립트는 없어서 Whisper를 이용해서 영상의 스크립트를 따서 정리해 봤습니다.
   해당 글에 있는 댓글들도 참고 하세요.
"
"https://news.hada.io/topic?id=18983","Rust 프로그래밍을 시작하고싶으신 분들을 위한 무료책 - 업데이트가 있어서 알려드립니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Rust 프로그래밍을 시작하고싶으신 분들을 위한 무료책 - 업데이트가 있어서 알려드립니다

   안녕하세요.

   2024년 11월쯤에 https://news.hada.io/topic?id=17778 쓰레드로 책 소개를 올렸었습니다.
   제 생각보다 훨씬 더 많이 관심을 가져주셔서 감사했습니다.

   그 이후로 내용이 보강된게 있어서 또 글을 올립니다.
     * 함수형 프로그래밍 챕터 추가
     * Cargo 사용법 챕터 추가
     * 토이 프로젝트 챕터 추가

   그 외에도 몇가지 예제 및 테스트 코드가 추가되었습니다.

   참고로 출판사 연락도 기다리고 있습니다.
   좋은 기회가 있었으면 합니다.

   출판사에 직접 연락해 보세요. 저도 러스트 입문서 출판할 때 10군데 넘게 연락을 드렸었습니다. 제이펍 최고..

   이전에는 퇴짜를 맞았었는데 다시 컨택해보겠습니다. 감사합니다.

   그리고 본문에도 책 링크가 있으면 좋겠습니다.
"
"https://news.hada.io/topic?id=19049","Lume - 애플 실리콘 맥을 위한 경량 맥/리눅스 VM 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Lume - 애플 실리콘 맥을 위한 경량 맥/리눅스 VM 도구

     * 애플의 Virtualization.Framework를 이용하여 거의 네이티브 속도로 macOS 와 리눅스 VM을 운용하는 도구
     * 경량 CLI로 로컬 API 서버를 통해서 VM들을 생성/실행/관리
     * lume run macos-sequoia-vanilla:latest 만 입력하면 미리 만들어진 macOS 이미지로 VM을 한번에 생성 가능
     * http://localhost:3000/lume 로 로컬 HTTP API 서버를 제공해서 자동화 관리 가능
     * 지원 명령어
          + lume create : 새로운 macOS 또는 Linux VM 생성
          + lume run : VM 실행
          + lume ls: 모든 VM 목록 표시
          + lume get : VM의 세부 정보 가져오기
          + lume set : VM 구성 수정
          + lume stop : 실행 중인 VM 중지
          + lume delete : VM 삭제
          + lume pull : 컨테이너 레지스트리에서 macOS 이미지 가져오기
          + lume clone : 기존 VM 복제
          + lume images: 로컬 캐시에 있는 macOS 이미지 목록 표시
          + lume ipsw: 최신 macOS 복원 이미지 URL 가져오기
          + lume prune: 캐시된 이미지 제거
          + lume serve: API 서버 시작
     * 설치 방법
          + brew tap trycua/lume 및 brew install lume 명령어를 사용하여 설치 가능.
          + 최신 릴리스에서 lume.pkg.tar.gz 아카이브를 다운로드하여 수동으로 설치 가능.
     * 미리 빌드된 이미지
          + ghcr.io/trycua에서 미리 빌드된 이미지 사용 가능.
          + macos-sequoia-vanilla: macOS Sequoia 15.2, 40GB
          + macos-sequoia-xcode: Xcode 명령줄 도구가 포함된 macOS Sequoia 15.2, 50GB
          + ubuntu-noble-vanilla: ARM용 Ubuntu Server 24.04.1 LTS, 20GB

        Hacker News 의견

     * 오픈 소싱과 출시를 축하함. 하지만 ""1 command""로 VM을 실행하는 것 외에 이 프로젝트의 이유를 잘 모르겠음. macOS VM 실행 외에 lima, colima와 어떻게 다른지 설명해줄 수 있는지 궁금함. 이름 lume은 불행함.
          + VM 실행의 어려운 부분은 실행 방법이 아니라 데이터 입출력과 제어임. 몇 가지 기능 요청을 하고 싶음.
               o 스크린샷 찍기 기능
               o 명령어 실행 기능
               o 파일 복사 기능
               o 새로운 VM으로 클론 실행 기능
          + 실행 중인 VM을 클론할 수 있는지 궁금함.
          + VM을 1초 이내에 재개할 수 있는 기능이 유용할 것임. 이는 온디맨드 워크플로우에 적합함.
          + 원활하고 빠른 실행을 위해 에이전트를 미리 설치해야 할 수도 있음.
     * Docker 서버를 decent-speed로 실행하여 Orb-like 속도를 제공할 수 있는지 궁금함.
     * Apple Silicon 기기에서 하나 이상의 macOS VM을 실행하는 사용 사례에 대해 알고 싶음.
     * Lima와 Tart와 비교하여 어떻게 다른지 궁금함.
          + BSD를 실행할 수 있는지 궁금함.
     * Apple Silicon에서 Intel VM을 실행하거나 그 반대로 실행할 수 있는지 궁금함. 다양한 아키텍처에서 C++ 애플리케이션을 컴파일하기 위해 이를 하고 싶음. 다른 ""쉬운"" 방법이 있는지 알고 싶음.
     * GPU와 USB 패스스루에 대해 들었는데 믿기 어려움.
     * Apple Silicon 호스트에서 x64 기반의 오래된 macOS 버전을 실행하고 싶지만, 이는 비현실적임.
     * UTM으로 aarch64 VM을 실행해봤고, AppleScript로 VM을 재부팅하는 작은 Sinatra 서버를 만들었음. 더 강력한 솔루션으로 이 프로젝트를 고려할 것임. 솔직히 말해서, UTM은 가상화에 있어 많은 것을 기대하게 만들었음.
     * 좋은 프로젝트이지만 내장 이미지가 너무 적음.
     * 가벼운 Windows VM을 실행할 수 있을지 궁금함.
"
"https://news.hada.io/topic?id=19008","$2000 EPYC 서버에서 DeepSeek R1 671b 모델을 로컬 실행 하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            $2000 EPYC 서버에서 DeepSeek R1 671b 모델을 로컬 실행 하는 법

     * AMD EPYC Rome 시스템을 기반으로 한 Deepseek AI Rig는 뛰어난 성능을 제공함
     * Q4 671b 모델에서 4.25에서 3.5 TPS를 기록하며, 이는 CPU만으로도 충분히 실행 가능함
     * 이 시스템은 대규모 GPU VRAM 없이도 작동 가능하며, 기술적 도전을 즐기는 사람들에게 재미있는 프로젝트가 될 수 있음.
     * 디스틸드 버전은 성능이 떨어지므로 ""풀 모델""을 사용하는 것을 권장
          + 16K 이상의 컨텍스트 윈도우를 지원하여 더 나은 성능을 제공함

Local AI CPU Compute Hardware

     * 기존의 쿼드 3090 가이드에 따라 구성된 시스템은 여전히 강력함. MZ32-AR0 메인보드는 512GB에서 1TB의 시스템 RAM을 저렴하게 구성할 수 있게 해줌. 2400 DDR4 RAM을 사용 중이나, 3200 속도의 DDR4 ECC RAM을 사용하면 성능이 향상될 가능성이 있음.
     * 구성 요소 및 비용:
          + 랙 프레임: $55
          + MZ32-AR0 마더보드: $500
          + 420mm 수냉쿨러 Corsair h170i elite capellix xt: $170
          + 64코어 AMD EPYC 7702: $650
          + 512GB 2400 ECC RAM: $400
          + 1TB NVMe – Samsung 980 Pro: $75
          + 850W PSU: $80
     * 총 비용: 약 $2000

랙 조립

     * 기존 가이드와 동일하게 조립하되, GPU와 라이저 카드는 제외함
     * 추후 GPU를 추가할 계획이라면, 처음부터 1500W 또는 1600W PSU를 사용하는 것이 좋음
     * RAM 스틱의 온도를 낮추기 위해 80mm 팬 4개를 사용하여 팬 월을 구성하는 것을 권장함

마더보드 업그레이드 참고 사항

     * AMD EPYC 7V13 CPU를 사용할 경우, MZ32-AR0 V3 버전의 마더보드를 사용하는 것이 좋음
     * V1 버전의 마더보드는 Milan CPU를 지원하지 않을 수 있으므로, BIOS 업데이트를 통해 V3로 업그레이드해야 함

로컬 AI 셀프 호스티드 소프트웨어 설정

     * Ubuntu 24.04 서버 버전을 설치하는 것을 권장
     * BMC 설정을 통해 네트워크 IP 설정을 고정 IP로 설정함
     * BIOS 설정에서 다음과 같은 변경을 수행함:
          + NPS를 1로 설정
          + CCD를 Auto로 설정
          + SMT 비활성화
          + SVM 비활성화
          + IOMMU 비활성화
          + cTDP를 200으로 설정
          + deterministic control을 manual로 설정하고, 슬라이더를 performance로 설정
          + quick power policy를 performance로 설정
          + BoostFMax를 manual로 설정하고, 값을 3400으로 설정

Ollama 설치

     * 다음 명령어를 사용하여 Ollama를 설치:
curl -L https://ollama.com/download/ollama-linux-amd64.tgz -o ollama-linux-amd64.tgz
sudo tar -C /usr -xzf ollama-linux-amd64.tgz
sudo useradd -r -s /bin/false -U -m -d /usr/share/ollama ollama
sudo usermod -a -G ollama $(whoami)

     * 환경 변수를 설정하고, ollama.service 파일을 생성하여 서비스로 등록함

DeepSeek 671b 모델 다운로드

     * 다음 명령어를 사용하여 DeepSeek 671b 모델을 다운로드함:
ollama pull deepseek-r1:671b

     * 이 모델은 약 400GB의 디스크 공간을 차지하므로, 충분한 저장 공간을 확보해야 함

OpenWEBUI 설치

     * Docker를 사용하여 OpenWEBUI를 설치함
     * Docker Compose를 사용하여 OpenWEBUI 서비스를 설정하고 실행함

OpenWEBUI와 Ollama 연결

     * OpenWEBUI의 설정에서 Ollama 서버를 추가하고, 연결 상태를 확인함
     * 고급 매개변수에서 GPU 설정, Reasoning Effort, Context Length, num_thread 등을 설정함

테스트 실행

     * OpenWEBUI에서 새로운 채팅을 시작하고, DeepSeek-r1:671b 모델을 선택하여 테스트 대화를 진행함

   이 가이드를 따르면, $2000 정도의 예산으로 DeepSeek R1 671b 모델을 로컬에서 실행할 수 있음

        Hacker News 의견

     * 671B 모델을 Q4 양자화로 단일 소켓 Epyc 서버에서 실행하는 비용은 $2K이며, 512GB RAM을 사용함. Q8에서는 듀얼 소켓 Epyc 서버에서 768GB RAM으로 6-8 TPS를 제공하며 $6K의 비용이 듦. RAM 속도가 TPS에 미치는 영향을 궁금해함.
     * 온라인에서 R1의 비용은 $2/MTok이며, 이 장비는 4 tok/s 이상을 수행하여 시간당 $0.04의 비용이 듦. 전력 비용은 시간당 $0.20로 추정됨. 프라이버시를 제외하고는 큰 의미가 없다고 생각함.
     * 현재 AI의 이상한 점은 최고의 모델을 실행하고 싶지만 하드웨어 비용이 비싸다는 것임. 1990년대에는 저렴한 하드웨어로 Linux를 실행할 수 있었음. 최신 AI 모델은 더 많은 RAM이 필요함. 과거에도 이런 일이 있었는지 궁금해함. 컴퓨터 게임이 좋은 예일 수 있음.
     * 작은 모델(33b-70b)로 5-10 tokens/sec를 얻는 것이 더 흥미로울 것이라고 생각함. $3k의 GPU나 $2k의 장비에 돈을 쓰고 싶지 않음.
     * 영어와 스페인어 번역만 하는 작은 모델이나 유닉스 유틸리티와 bash를 이해하는 모델이 의미가 있는지 궁금해함. 훈련 내용을 제한하는 것이 결과 품질이나 모델 크기에 영향을 미치는지 모름.
     * EPYC 9274F와 384GB RAM으로 워크스테이션을 구축했으나, 기대한 성능을 얻지 못함. 다양한 벤치마크 테스트를 수행했으나 Fujitsu 벤치마크의 절반도 안 되는 결과를 얻음.
     * $3000 NVIDIA Digits가 더 자주 언급되지 않는 것이 놀라움. AI에 회의적이었으나, 이제는 DeepSeek을 로컬에서 실행할 계획임.
     * $2K로 구매할 수 있는 것이 놀라움. 저전력 데스크탑을 구축하는 데 대한 제안을 찾고 있음.
     * 유튜버로서 전력 및 RAM 속도에 대한 통계를 공유함. 유휴 전력은 60w, 로드 전력은 260w이며, RAM 속도는 2400임.
     * r6a.16xlarge에서 모델을 실행했으나 첫 프롬프트 이후 모델 로드에 시간이 많이 걸림. 512GB RAM으로 4k 이상의 컨텍스트 크기를 사용할 수 없음. 모델 설정에 익숙하지 않아 놓친 부분이 있을 수 있음.
"
"https://news.hada.io/topic?id=18967","Pinchflat - 셀프호스트 가능한 유튜브 미디어 관리자 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Pinchflat - 셀프호스트 가능한 유튜브 미디어 관리자

     * yt-dlp를 기반으로 한 경량의 셀프 호스팅 YouTube 콘텐츠 다운로드 앱
     * YouTube 채널 및 재생목록에서 콘텐츠를 다운로드하기 위한 규칙 설정을 설정해두면 주기적으로 새 콘텐츠 확인 및 자동 다운로드
     * Plex, Jellyfin, Kodi와 같은 미디어 센터 앱과 통합
     * 아카이브 목적으로 콘텐츠를 저장하려는 사용자에게 이상적
     * 개별 비디오 다운로드 가능하지만, 채널 및 재생목록 다운로드에 최적화됨
     * 다운로드된 콘텐츠는 디스크에 저장되며, 앱 내에서 콘텐츠를 소비하는 용도가 아님

주요 기능

     * 단일 Docker 컨테이너로 동작, 외부 의존성 없음
     * 강력한 네이밍 시스템: 콘텐츠를 원하는 구조로 저장 가능
     * 사용자 친화적 웹 인터페이스: 미리 설정된 프리셋으로 빠른 시작 가능
     * Plex, Jellyfin, Kodi와의 기본 연동 지원
     * RSS 피드를 제공해서, 자신이 사용하는 팟캐스트 앱과 통합 가능
     * 채널 및 재생목록에서 새로운 콘텐츠 자동 다운로드. 독창적인 방식으로 빠른 다운로드 지원
     * 오디오만 다운로드도 가능
     * 유튜브 쇼츠 및 라이브스트림 대한 사용자 지정 규칙 설정 가능
     * Apprise를 사용한 알림 통합
     * 콘텐츠 품질 향상 또는 SponsorBlock 태그 개선을 위해 새 미디어 재다운로드 가능
     * 오래된 콘텐츠 자동 삭제
     * 고급 옵션:
          + 특정 날짜 이후 콘텐츠 필터링 및 제목별 필터링
          + 유튜브 쿠키를 사용해 개인 재생목록 다운로드
          + SponsorBlock 통합
          + 커스텀 yt-dlp 옵션 지원
          + 다운로드/삭제 후 사용자 정의 스크립트 실행 가능 (알파 버전)
     * Pinchflat이 요구 사항에 맞지 않는 경우 다음 대안을 고려해 볼 것:
          + Tube Archivist
          + ytdl-sub
          + TubeSync

   https://github.com/Tzahi12345/YoutubeDL-Material

   YoutubeDL-Material이라는 나름 괜찬은 UI를 제공하는 것도 있습니다.

   제가 손으로 구현하던거보다 나은 것 같네요.. 감사합니다!
"
"https://news.hada.io/topic?id=18947","Openhaystack: Apple 네트워크를 통한 Bluetooth 기기 추적 'AirTags' 제작 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Openhaystack: Apple 네트워크를 통한 Bluetooth 기기 추적 'AirTags' 제작 기술

     * OpenHaystack
          + OpenHaystack는 Apple의 Find My 네트워크를 통해 개인 Bluetooth 기기를 추적할 수 있는 프레임워크임
          + Mac과 BBC micro:bit 또는 다른 Bluetooth 지원 기기를 사용하여 자신의 추적 태그를 만들 수 있음
          + 셀룰러 커버리지 없이도 지구 어디에서나 액세서리를 추적할 수 있음
          + 인근 iPhone이 액세서리를 발견하고 네트워크 연결이 있을 때 Apple 서버에 위치를 업로드함
     * OpenHaystack의 역사
          + OpenHaystack는 Apple의 Find My 네트워크를 역공학하고 보안 분석한 결과물임
          + TU Darmstadt의 Secure Mobile Networking Lab에서 2019년 6월 발표 이후 오프라인 찾기를 분석하기 시작함
          + Bluetooth 광고, 공개 키 암호화, 암호화된 위치 보고서의 중앙 데이터베이스를 결합한 시스템임
          + 두 가지 취약점을 발견했으며, 가장 심각한 것은 악성 애플리케이션이 위치 데이터를 액세스할 수 있는 문제였음 (CVE-2020-9986)
     * 사용 방법
          + OpenHaystack는 macOS 애플리케이션과 Bluetooth 기기를 비콘으로 만드는 펌웨어 이미지로 구성됨
          + macOS 11 (Big Sur) 필요
          + Apple Mail의 커스텀 플러그인을 사용하여 Apple 서버에서 위치 보고서를 다운로드함
          + 새로운 액세서리를 추가하고, 기기에 배포하며, 기기의 위치를 표시할 수 있음
     * Apple의 Find My 네트워크 작동 방식
          + 공개-비공개 키 쌍을 생성하여 액세서리에 배포함
          + 액세서리는 Bluetooth Low Energy 광고로 공개 키를 방송함
          + 인근 iPhone이 광고를 수신하면 현재 위치를 암호화하여 Apple 서버에 업로드함
          + Apple은 암호화된 위치가 어떤 계정이나 기기에 속하는지 알지 못함
     * 다른 Bluetooth 기기 추적
          + 원칙적으로 모든 Bluetooth 기기를 OpenHaystack 액세서리로 변환 가능
          + 소수의 임베디드 기기에 대한 편리한 배포 방법 제공
          + Linux 기기는 일반 HCI 스크립트를 통해 지원됨
     * OpenHaystack Mobile
          + 스마트폰용 OpenHaystack macOS 애플리케이션의 완전한 재구현
          + 액세서리 생성 및 추적 기능 제공
          + 위치 보고서는 스마트폰에서 직접 가져올 수 없으며, Mac 하드웨어에 호스팅된 프록시 서버가 필요함
          + Android 및 iOS에서 실행 가능
     * 저자
          + Alexander Heinrich, Milan Stute, Tim Kornhuber, Matthias Hollick
     * 참고 문헌
          + Apple의 Crowd-Sourced Bluetooth Location Tracking System에 대한 보안 및 개인정보 보호 연구 논문
     * 라이선스
          + OpenHaystack는 GNU Affero General Public License v3.0 하에 라이선스됨

        Hacker News 의견

     * Apple 사용자가 아닌 사람들을 위한 좋은 옵션이 부족함. Google의 버전은 기대대로 좋지 않음. 태그 검색에 제한이 있고, 위치를 여러 기기가 감지해야만 보여줌. 삼성의 네트워크가 더 좋다는 테스트 결과가 있었음.
          + Google 제품은 이론적으로는 좋지만 실행이 잘 안 됨.
     * Apple은 사용자를 추적할 수 있는 태그에 대해 경고함. KDF를 사용하여 MAC 주소나 개인 키를 회전시키는 구현이 있었으나 예측 가능했음.
          + 사소한 절도 문제로 인해 개인 시간이 많이 소모됨. 누군가를 대면하고 싶지는 않지만, PI나 법 집행 기관을 위해 추적을 만들고 싶음.
     * 코드를 살펴보니, Apple Mail 권한을 사용하여 FindMy 네트워크에서 수집된 위치를 가져오는 것 같음.
          + Apple 개발자 계정을 만들면 가능할지 궁금함.
     * Find My 앱과 통합할 수 있는 방법이 있으면 좋겠음. 중국 클론 제품은 가능하므로, 어떻게든 가능할 것 같음.
     * Apple AirTags는 훌륭하지만 부피가 크고 모양이 이상함.
          + 신용카드 모양의 AirTag가 지갑에 들어가면 좋겠음.
          + 고양이 목걸이에 작은 AirTag가 있으면 좋겠음.
     * 연구는 하지 않았지만, 작은 임의의 데이터 페이로드를 사용하여 이를 활용할 수 있는지 궁금함.
     * 직접 만드는 것이 더 저렴한지 궁금함. AirTag를 약 $15에 구매했음. 직접 만드는 것이 더 저렴할까?
     * 다른 Apple 기기 없이 실제 AirTag를 설정할 수 있는지 궁금함.
     * 실제 Apple Find My 앱과 페어링하여 앱에서 찾을 수 있는지 궁금함.
"
"https://news.hada.io/topic?id=18920","앱을 이용한 범죄 아님 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            앱을 이용한 범죄 아님 주장

앱으로 하면 범죄가 아니다

     * 기술 산업의 핵심 규제 제안은 ""앱으로 하면 범죄가 아니다""라는 것임. 이는 앱을 통해 불법 택시, 불법 호텔, 등록되지 않은 증권, 임금 절도 등을 합법화하려는 시도임.
     * 인플레이션은 이 시대의 중요한 정치적 요인 중 하나이며, 많은 인플레이션이 앱을 통한 범죄로 인해 발생함. 식품 공급은 2-5개의 대기업 카르텔에 의해 장악되어 가격을 올리고, 이는 효율적인 시장에서는 불가능하다는 경제학자들의 주장에도 불구하고 성공적으로 이루어짐.
     * 잘 알려진 카르텔로는 코카콜라/펩시 듀오폴리가 있으며, 펩시의 경영진은 ""펩시 가격 결정력""을 자랑하며 가격을 인상함.
     * 식료품점의 포장 상품 대부분은 유니레버와 프록터 앤 갬블이 제조하며, 이들 CEO는 인플레이션 이상의 가격 인상을 자랑함.
     * 계란 시장의 경우, 칼-메인 푸드가 대부분의 브랜드를 소유하며, 팬데믹 이후 기록적인 수익을 올림.
     * 식당 부문을 담당하는 다른 식품 카르텔은 더 알아보기 어려움. 냉동 감자 시장은 램 웨스턴, JR 심플롯, 맥케인 푸드, 캐번디시 팜스가 장악하고 있음.
     * 이들 회사는 가격을 인상하고, 데이터 중개업체인 Potatotrac을 통해 가격을 조정함. 이는 앱을 통한 가격 담합임.
     * 이러한 가격 담합은 감자 산업에만 국한되지 않으며, Agri Stats라는 데이터 중개업체는 미국의 대형 육류 포장업체와 협력하여 육류 가격을 조정함.
     * 많은 식품 카테고리가 비슷한 상황이며, 앱을 통한 가격 담합은 식품 외에도 부동산 임대료 인상 등 다양한 분야에 영향을 미침.

기타 링크 및 정보

     * TikTok의 ""귀여운 겨울 부츠"" 의미 설명
     * 'Picks and Shovels' 도서 리뷰
     * 마틴 헨치 소설 시리즈 소개

과거의 사건들

     * 빌 게이츠가 리누스 토발즈를 고용했다면?
     * 캐나다의 안드로이드 업데이트 강제
     * 저작권의 합리적 접근
     * ACTA의 비밀 메모 유출
     * 냉전 시대의 비밀 계획
     * 구글의 인디 음악가 강제 계약
     * 카메론의 인터넷 필터
     * 감옥에서의 출산 문제
     * 앤드류 쿠오모와 MTA 사장
     * 주식 시장 변동과 교통사고의 상관관계
     * 신용카드 한도 자동 증가
     * 자본주의 감시견의 긴 잠

향후 출연 일정

     * 'Picks and Shovels' 관련 다양한 도시에서의 출연 일정

최근 출연

     * 미국 관세에 맞서 싸우는 급진적 계획
     * 'Right to Repair'와의 인터뷰

최신 도서

     * 'The Bezzle': 감옥 기술과 기타 사기
     * 'The Lost Cause': 기후 비상 사태 속의 희망
     * 'The Internet Con': 상호 운용성과 빅 테크
     * 'Red Team Blues': 세계 작동 방식에 대한 통찰
     * 'Chokepoint Capitalism': 창작 노동 시장의 공정성
     * 'Attack Surface': 정치적 사이버 스릴러
     * 'How to Destroy Surveillance Capitalism': 감시 자본주의의 해악 분석
     * 'Little Brother/Homeland': 에드워드 스노든의 새로운 서문 포함
     * 'Poesy the Monster Slayer': 몬스터와의 싸움에 대한 그림책

향후 도서

     * 'Picks and Shovels': PC의 영웅 시대에 관한 소설
     * 'Enshittification': 모든 것이 갑자기 나빠진 이유
     * 'Unauthorized Bread': 중등 그래픽 소설

기타 정보

     * 현재 작성 중인 도서 및 팟캐스트 정보
     * Creative Commons Attribution 4.0 라이선스에 따라 사용 가능

   이 글은 Cory Doctorow의 Pluralistic.net에서 제공됨.

        Hacker News 의견

     * 기사 제목과 첫 문단은 새로운 비즈니스 모델이 기존 법을 우회하는 방법에 대해 이야기하지만, 이후 전통적인 기업들이 가격 인상을 통해 인플레이션을 초래한다고 주장하는 내용으로 전환됨
          + 앱이 인플레이션을 유발한다고 주장하지만, 실제로는 전통적인 기업들이 가격을 인상하고 있다고 설명함
          + 제목에서 제기된 질문들이 조사되지 않았으며, 전통적인 기업들이 인플레이션을 유발한다는 핵심 주장이 제대로 논의되지 않음
          + 인플레이션의 원인이 사라졌다고 해서 가격이 자동으로 하락하지 않는다는 기본적인 경제 지식을 간과함
     * 시장 규제의 부재가 문제의 원인이라고 주장함
          + 정부가 적극적으로 개입하여 자유 시장이 붕괴되는 것을 막아야 한다고 강조함
          + 필수품을 거의 독점적으로 판매하는 기업은 가격 설정 권한을 잃어야 하며, 가격 변경 시 정부의 승인을 받도록 해야 한다고 제안함
     * 인플레이션의 다양한 원인 중 하나로 알고리즘 가격 조정을 지적함
          + 돈 공급의 대규모 증가가 언급되지 않은 점을 지적하며, 인과 분석 시 민간 부문과 정부 모두를 조사해야 한다고 주장함
     * 가격 조정 프로그램이 고객에게 불리하게 작용하고 있다고 설명함
          + 미국에서는 단속이 시간이 걸리지만, 희망이 있다고 언급함
     * 코로나 이후 인플레이션 기간 동안 기업들이 가격을 인상했다고 주장함
          + Lamb Weston의 경우, 2019년 이후 마진이 감소하다가 다시 증가했다고 설명함
          + 관련 기업들에 대한 집단 소송이 제기되었다고 언급함
     * 윤리적이고 덜 탐욕스러운 기업들이 대기업을 능가하지 못하는 이유에 대한 의문을 제기함
          + 시장이 효율적이라면 경쟁자들이 데이터를 활용해 대기업을 능가할 수 있어야 한다고 주장함
     * 가격 인상을 비난받는 식품 회사들은 대부분 상장 기업이며, 분석 결과 마진이 대체로 안정적이라고 설명함
          + 우크라이나 전쟁, 농업 부문 임금 상승, 계란 부족, 정부 적자로 인한 돈 공급 증가 등이 더 나은 설명이라고 주장함
     * Ivy and Coney의 소유주 Josh Saltzman의 사례를 들어, 공급업체의 제한으로 인해 가격 인상이 불가피하다고 설명함
          + 미국 요리가 적응하지 않는다고 지적하며, 그리스 요리의 예를 들어 다양한 재료로 요리할 수 있는 가능성을 제시함
     * 기술 산업 종사자들이 긍정적인 변화를 이끌어낼 수 있는 위치에 있다고 주장함
          + 이러한 기업들과 거래하지 말고, 비판하며 동료들에게도 같은 행동을 권장하라고 촉구함
     * ""앱을 통한 가격 조정""이 명확하게 불법이 되어야 한다고 주장함
          + 강력한 처벌과 빠른 집행이 필요하다고 강조함
"
"https://news.hada.io/topic?id=18999","Google 검색에 "fucking" 추가하여 AI 요약 피하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Google 검색에 ""fucking"" 추가하여 AI 요약 피하는 방법

     * 구글 검색에서 욕설을 포함하면 AI 요약이 표시되지 않음
          + 예를 들어, ""How large is the student body of Yale University?"" 대신 ""How large is the fucking student body at Yale University?""라고 검색하면 AI 요약 없이 일반적인 검색 결과만 표시됨
          + 이는 AI 요약을 비활성화하는 다른 복잡한 방법보다 간단하고 효과적임. 아마도 Google의 AI 시스템인 Gemini가 비속어를 피하도록 설계되었기 때문으로 추정됨
          + 예를 들어, 검색 URL에 'udm=14' 매개변수를 추가하면 AI가 생성한 검색 결과를 비활성화할 수 있음
     * AI 요약의 문제점
          + AI 요약은 권위 있는 정보처럼 보이지만 잘못된 정보를 제공할 위험이 있음
          + Siri와 같은 다른 AI 시스템도 잘못된 정보를 제공할 수 있음
          + AI 통합이 사용자에게 강제로 제공되고 있음
     * Google의 AI 요약 도입 초기 문제
          + AI 요약은 처음 도입될 때 비논리적인 응답을 반환하여 논란이 됨
          + Google의 AI 모델은 Reddit 댓글에서 정보를 가져온 것으로 추측됨
          + Google은 AI 모델이 욕설을 피하도록 훈련했기 때문에 욕설이 포함된 검색에서는 AI 요약이 비활성화됨
     * AI 요약의 트래픽 영향
          + Google은 AI 요약이 웹사이트로의 트래픽을 줄이지 않는다고 주장함
          + 그러나 미디어 회사들은 AI 요약이 콘텐츠를 대량 언어 모델에 사용한다고 우려함
     * AI 요약을 피하는 방법
          + AI 요약을 피하고 싶다면 욕설을 포함하여 검색하면 됨
          + Google이 이 방법을 막을 가능성이 있지만, 현재로서는 효과적임

   LLM으로 생성된 문장의 사실 여부는 무조건 확인이 필요하기 때문에 쓸모가 있나 싶습니다. 어차피 그 아래 나온 검색 결과 페이지 들어가서 봐야 하거든요.
"
"https://news.hada.io/topic?id=19047","Show HN: VideoToFlip - 비디오를 인쇄된 플립북으로 변환해주는 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show HN: VideoToFlip - 비디오를 인쇄된 플립북으로 변환해주는 서비스

     * 영상을 업로드 하면 플립북(손으로 빠르게 넘기면 애니메이션 처럼 보이는 책)으로 만들어주는 서비스
     * 지원되는 형식: MP4, AVI, MOV 등 ( 가로 비디오가 가장 잘 작동함 )
     * 프리미엄 커버 선택 가능
     * 실시간 미리보기 지원
     * 제작 플립북 사양
          + 10.5cm x 5cm x 1cm
          + 72 페이지
     * 대량 주문시 할인 및 표지 로고 등 커스텀 브랜딩 가능

   간단한 아이디어인데 재미나네요.

   바르셀로나 사그라다 파밀리아 기념품 샵에서 성당의 최종 완성된 모습을 이렇게 플립북으로 보여주는 책을 팔았던 기억이 납니다. 버전도 2개 였던거 같아요. 하나는 완성된 모습의 360도 돌려보기, 하나는 공사 단계에 따라서 올라가는 모습. 이런 아이디어는 다양하게 활용 가능한 듯.

        Hacker News 의견

     * 한 사용자는 오래된 플립북을 MP4 파일로 디지털화하여 생계를 유지하고 있음
          + 2007년에 Motionbox라는 회사가 flipclips.com과 협력하여 유사한 테마의 플립북을 판매했었음
          + 두 회사는 현재 존재하지 않음
     * 다른 사용자는 플립북 사업의 재출시를 축하하며, 가족 사업으로서의 가능성을 높이 평가함
          + 뉴욕 퀸즈에 있는 Museum of the Moving Image에서 애니메이션 관련 인터랙티브 전시를 경험할 수 있음
          + 기념품 가게에서 플립북을 구매할 수 있으며, 직접 제작하는 과정이 재미있음
     * 또 다른 사용자는 Apollo 11 컬렉션을 포함한 6-in-one 플립북을 추천함
          + flipboku.com에서 구매 가능함
     * 플립북 제작 도구로 www.fliposcope.com의 DIY 핸드 크랭크 영화 기계를 언급함
     * 플립북 사업이 부업인지 주 수입원인지 궁금해하는 사용자가 있음
          + 기술 커뮤니티에서 아이디어를 공유하는 것이 경쟁자를 만들 위험이 있는지에 대한 우려를 표함
     * 플립북의 권장 영상 길이와 유지 관리 팁을 묻는 사용자가 있음
          + 제목에 ""a""가 빠졌음을 지적하며 아이디어와 실행을 칭찬함
     * 세로 영상을 업로드할 때 제본 위치가 불명확하다는 피드백을 제공함
          + UI 요소로 제본 위치를 명확히 표시하는 것이 도움이 될 것이라고 제안함
     * 플립북 아이디어의 실현 과정을 칭찬하며, 플립북 구매를 고려 중임
     * 양쪽으로 다른 클립을 플립할 수 있는 책을 만들면 바이럴 가능성이 있을 것이라는 의견을 제시함
          + 새로운 지그재그 제본 과정이 필요할 것이라고 언급함
"
"https://news.hada.io/topic?id=19045",""스팸 및 기만 정책"으로 삭제된 YouTube 채널","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ""스팸 및 기만 정책""으로 삭제된 YouTube 채널

     * Sinevibes의 YouTube 채널이 ""스팸 및 기만적 정책"" 위반으로 삭제됨
     * 브랜드 역사상 가장 충격적인 순간으로, 오직 자사 제품의 데모만 게시했음
     * 커뮤니티 반응
          + Richie Asimilon이 Hacker News에 이 문제를 제기하여 주목받기를 희망함.
          + Nintendo의 보호주의로 인해 ""Switch""라는 제품명이 문제가 되었을 가능성 제기됨.
          + Sinevibes는 이러한 주장을 부정하며, 다른 브랜드들도 ""Switch""라는 이름을 사용하고 있음을 언급함.
     * 플랫폼의 문제점
          + EU가 설명 없이 계정을 차단하는 플랫폼에 벌금을 부과해야 한다는 의견 제시됨.
          + 알고리듬이 잘못된 이유로 무고한 창작자를 차단하는 경우가 많다는 지적.
     * Sinevibes의 대응
          + Vimeo를 사용하여 웹사이트에 동영상을 게시하고 있으며, 더 나은 품질과 인터페이스를 제공한다고 설명함.
          + YouTube와 같은 대기업의 자동화된 시스템에 대한 불만 제기됨.
     * 기타 의견
          + 기술 대기업들이 사용자에게 책임을 지지 않는다는 비판.
          + GrayJay와 같은 대안 플랫폼에 대한 관심 필요성 제기됨.

        Hacker News 의견

     * 채널 폐쇄 이메일에 ""스팸, 사기 또는 기만적 행위""가 언급되었음. 소유자에 대한 정보 없이 폐쇄의 부당성을 판단하기 어려움. 개발자가 유명하다는 것을 알지만, 이러한 상황에서 분노를 공유하기는 어려움. 채널 소유자가 항소가 인간에게 전달되기를 바람. 유튜브에서 가짜 뉴스와 암호화폐 사기 광고를 보는 상황을 언급함
     * Sinevibes는 음악/오디오 분야의 합법적인 개발자임. Dreadbox의 Typhon 신디사이저와 Korg logue 신디사이저의 인기 있는 FX 플러그인을 제작함. 뉴스레터에 구독 중이며 스팸을 받은 적이 없음. 유튜브 채널에는 제품 데모만 있었음. 알고리즘이 스팸 또는 사기 정책을 위반했다고 판단한 것은 아마도 실수일 것임
     * 본인의 채널도 같은 운명을 겪었음. 몇 개의 오리지널 노래와 비디오가 있었음. 경고나 저작권 침해 경고 없이 갑자기 폐쇄됨
     * HN의 제목이 업데이트되어야 함. 현재 ""YouTube가 15세의 오디오 개발자의 채널을 '이유'로 폐쇄함""이라고 되어 있음. 개발자는 채널을 15년 동안 운영했다고 했지, 15세라고 하지 않았음
     * Google Play에서 이런 일이 자주 발생함. 무작위 폐쇄에 대비하려면 개발자 계정이나 채널의 여러 복사본을 보유해야 함. 스팸 방지 봇에 대항하기 위해 스팸 발송자가 되어야 함
     * Play Store에 게시한 앱도 같은 일을 겪었음. 프리미엄 버전을 구매한 사람들에게 미안할 뿐임. 제품이 안전하지 않으며 대형 플랫폼에만 의존해서는 안 됨
     * 컴퓨터는 책임을 질 수 없으므로 관리 결정을 내리면 안 됨
     * 소셜 미디어에 의존하는 사람들에게는 모든 플랫폼이 동시에 폐쇄되지 않는 것이 가장 큰 장점일 것임. 콘텐츠 소유자가 ""Switch""라는 제품을 판매하는 것과 관련이 있을 수 있음. Nintendo와 같은 큰 회사와 경쟁하기 어려움. 브랜드나 제품 이름을 만들 때는 독창적인 단어를 사용하는 것이 좋음
     * 13세 아들의 유튜브 계정이 설명 없이 차단됨. 여러 번의 항소에도 불구하고 구체적인 이유를 알 수 없었음. 유료 유튜브 프리미엄 계정을 차단한 이유를 이해할 수 없음. Gmail 계정을 새로 만드는 것은 간단하지만, Google Family, 유튜브 프리미엄, Fortnite, Steam 등 모든 계정을 다시 설정하는 것은 큰 번거로움. Google이 유료 고객을 신경 쓰지 않는 것 같음
"
"https://news.hada.io/topic?id=18994","Antiqua et Nova: AI와 인간 지능의 관계에 대한 고찰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Antiqua et Nova: AI와 인간 지능의 관계에 대한 고찰

     * 교황청 신앙교리성과 문화교육성이 공동으로 발표한 문서로 인공지능(AI)과 인간 지능의 관계에 대한 인류학적 및 윤리적 도전을 폭넓게 다루고 있음
          + Antiqua et Nova : 라틴어. ""오래된 것과 새로운 것""

I. 서론

    1.

     * 고대와 현대의 지혜를 바탕으로(마태오 13:52) 우리는 과학과 기술 발전, 특히 최근의 인공지능(AI) 발전이 가져오는 도전과 기회를 성찰해야 함
     * 기독교 전통에서는 지능을 인간이 ""하나님의 형상""(창세기 1:27)으로 창조되었음을 보여주는 중요한 요소로 간주함
     * 인간 존재에 대한 통합적 관점과 창세기의 ""땅을 경작하고 지키라""(창세기 2:15)는 부르심을 바탕으로, 교회는 인간의 지능이 창조 세계를 책임 있게 관리하는 이성적 사고와 기술적 능력을 통해 표현되어야 함을 강조함

    2.

     * 교회는 과학, 기술, 예술을 포함한 인간 활동의 발전을 장려하며, 이를 ""보이는 창조 세계를 완성하는 데 있어 남성과 여성의 협력""으로 봄
     * 집회서(38:6)는 ""하나님께서 인간에게 기술을 주셨으며, 이를 통해 하나님의 놀라운 업적이 찬미받게 하셨다""고 증언함
     * 인간의 능력과 창의성은 하나님에게서 온 것이며, 올바르게 사용될 때 하나님의 지혜와 선함을 반영하여 하나님을 찬미하게 됨
     * 그러므로 ""인간다움""이 무엇인지를 논할 때, 과학적·기술적 능력도 고려해야 함

    3.

     * 이러한 관점에서 본 문서는 AI가 제기하는 인류학적·윤리적 도전을 다룸
     * AI의 목표 중 하나는 그것을 설계한 인간 지능을 모방하는 것임
     * 다른 인간 창작물과 달리, AI는 인간의 창의적 결과물을 학습한 후 새로운 ""산출물""을 생성할 수 있으며, 이는 종종 인간이 만든 것과 구별하기 어려울 정도로 정교함
     * 이로 인해 AI가 공적 영역에서 진실성 위기에 미칠 영향에 대한 심각한 우려가 제기됨
     * 또한, AI는 학습을 통해 자율적으로 특정 결정을 내리고, 새로운 상황에 적응하며, 개발자가 예상하지 못한 해결책을 제시할 수 있음
     * 이는 윤리적 책임과 인간 안전에 관한 근본적인 질문을 초래하며, 사회 전반에 걸쳐 광범위한 영향을 미침
     * 이러한 새로운 상황은 많은 이들에게 ""인간이란 무엇인가?""와 ""인류의 역할은 무엇인가?""라는 질문을 다시금 던지게 함

    4.

     * 이러한 모든 요소를 고려할 때, AI는 인간과 기술의 관계에서 새로운 중요한 국면을 열었으며, 이는 교황 프란치스코가 ""시대적 변화""라고 언급한 바 있는 현상의 중심에 놓여 있음
     * AI의 영향은 전 세계적으로 인간관계, 교육, 노동, 예술, 의료, 법률, 전쟁, 국제 관계 등 다양한 분야에서 두드러짐
     * AI가 점점 더 발전함에 따라, 그 인류학적·윤리적 의미를 심도 있게 고려하는 것이 필수적임
     * 이는 단순히 위험을 완화하고 피해를 방지하는 데 그치지 않고, AI의 활용이 인간 발전과 공동선을 증진하는 방향으로 이루어지도록 보장하는 것을 포함함

    5.

     * AI에 대한 올바른 판단을 내리는 데 기여하고자, 교회는 교황 프란치스코가 강조한 ""마음의 지혜""를 새롭게 조명하며 본 문서를 통해 인류학적·윤리적 성찰을 제공함
     * 교회는 AI와 관련된 논의에 적극적으로 참여할 것을 약속하며, 신앙을 전수하는 역할을 맡은 부모, 교사, 사제, 주교들이 이 중요한 문제를 신중하게 다루도록 초대함
     * 본 문서는 특히 이들을 대상으로 하지만, 과학과 기술의 발전이 인간과 공동선을 위해 사용되어야 한다는 확신을 공유하는 더 넓은 대중을 위해서도 작성됨

    6.

     * 이를 위해, 문서는 먼저 AI 지능과 인간 지능의 개념을 구별함
     * 그다음, 기독교 전통의 철학적·신학적 기반을 바탕으로 인간 지능에 대한 이해를 탐구함
     * 마지막으로, AI의 발전과 사용이 인간 존엄성을 보호하고 인간과 사회의 통합적 발전을 촉진하도록 보장하는 윤리적 지침을 제시함

II. 인공지능이란 무엇인가?

    7.

     * AI에서 ""지능""의 개념은 시간이 지나면서 다양한 학문적 관점을 반영하며 발전해 왔음
     * AI의 기원은 수 세기 전으로 거슬러 올라가지만, 1956년 미국의 컴퓨터 과학자 존 매카시가 다트머스 대학에서 개최한 여름 워크숍이 중요한 전환점이 됨
     * 매카시는 AI를 ""인간이 수행한다면 지능적이라 불릴 행동을 기계가 수행하도록 만드는 문제""로 정의하였으며, 이 워크숍을 통해 인간의 지적 행동을 모방하는 기계를 설계하는 연구가 본격적으로 시작됨

    8.

     * 이후 AI 연구는 급속히 발전하여 고도로 정교한 작업을 수행할 수 있는 복잡한 시스템을 개발하게 됨
     * 현재의 ""좁은 AI(Narrow AI)"" 시스템은 특정한 기능을 수행하도록 설계되었으며, 예를 들어 언어 번역, 폭풍의 이동 경로 예측, 이미지 분류, 질문 응답, 사용자 요청에 따른 시각적 콘텐츠 생성 등이 포함됨
     * AI 연구에서 ""지능""의 정의는 다양하지만, 오늘날의 AI 시스템, 특히 머신러닝 기반 AI는 논리적 추론보다 통계적 추론에 의존함
     * AI는 대규모 데이터를 분석하여 패턴을 식별하고 결과를 ""예측""하며, 이는 인간의 문제 해결 과정과 일부 유사함
     * 이러한 성과는 컴퓨팅 기술(신경망, 비지도 학습, 진화 알고리즘)과 하드웨어(특수 프로세서) 혁신 덕분에 가능해졌음
     * 이러한 기술의 발전을 통해 AI 시스템은 인간의 입력에 반응하고, 새로운 상황에 적응하며, 개발자가 예상하지 못한 해결책을 제시할 수도 있음

    9.

     * AI의 급속한 발전으로 인해, 과거에는 인간만이 수행할 수 있었던 많은 작업들이 AI에 의해 처리되고 있음
     * 특히 데이터 분석, 이미지 인식, 의료 진단과 같은 전문 분야에서는 AI가 인간의 능력을 보완하거나 심지어 능가하는 경우도 있음
     * 현재의 ""좁은 AI""는 특정 작업을 수행하도록 설계되었지만, 일부 연구자들은 모든 인지 영역에서 작동할 수 있는 ""일반 인공지능(AGI)""을 개발하는 것을 목표로 하고 있음
     * 일부에서는 AGI가 궁극적으로 인간 지능을 초월하는 ""초지능(superintelligence)""을 달성할 수 있다고 주장하며, 생명공학 발전과 결합해 ""초장수(super-longevity)""를 실현할 가능성도 논의됨
     * 반면, 어떤 이들은 이러한 가능성이 인간을 대체할 위험이 있다고 우려하며, 또 다른 이들은 이러한 변화를 긍정적으로 받아들이고 있음

   10.

     * AI와 인간 지능에 대한 다양한 관점의 근저에는 ""지능""이라는 용어를 인간과 AI 모두에게 동일하게 적용할 수 있다는 암묵적 전제가 존재함
     * 그러나 이는 개념의 전체적인 의미를 반영하지 못함
     * 인간의 경우, 지능은 개인의 전체적인 존재와 관련된 능력이지만, AI의 경우 ""지능""은 기능적인 의미에서 이해되며, 종종 인간의 정신적 활동이 디지털화된 절차로 분해될 수 있다는 전제에 기반함

   11.

     * 이러한 기능적 관점은 ""튜링 테스트""로 대표됨
     * 앨런 튜링은 인간이 기계의 행동을 인간과 구별하지 못할 경우, 그 기계를 ""지능적""이라고 판단함
     * 그러나 여기서 ""행동""은 특정 지적 작업 수행만을 의미하며, 인간 경험의 전반적인 요소—추상적 사고, 감정, 창의성, 미적·도덕적·종교적 감수성—을 포함하지 않음
     * 또한 인간 정신의 특성을 온전히 반영하지 않으며, AI 시스템의 ""지능""은 단순히 인간 지능과 유사한 결과를 생성할 수 있는지에 따라 평가될 뿐, 그것이 어떻게 생성되는지는 고려되지 않음

   12.

     * AI의 발전된 기능은 복잡한 작업을 수행할 수 있도록 하지만, ""사고하는 능력""을 부여하지는 않음
     * 이는 중요한 차이점이며, ""지능""을 어떻게 정의하는지가 인간 사고와 AI의 관계를 이해하는 방식에 결정적인 영향을 미침
     * 이러한 차이를 올바르게 이해하기 위해서는, 철학 전통과 기독교 신학이 제공하는 보다 깊고 포괄적인 지능 개념을 고려해야 함
     * 이는 인간 본성, 존엄성, 소명에 대한 교회의 가르침에서도 핵심적인 요소임

III. 철학적·신학적 전통에서의 지능

  이성(Rationality)

   13.

     * 인류가 스스로를 성찰하기 시작한 이래, 정신(mind)은 인간다움의 핵심 요소로 여겨져 왔음
     * 아리스토텔레스는 ""모든 인간은 본성적으로 지식을 추구한다""고 말하며, 인간이 사물의 본질과 의미를 추상적으로 이해하는 능력을 가짐으로써 동물 세계와 구별된다고 설명함
     * 철학자, 신학자, 심리학자들은 인간의 지적 능력의 본질을 연구하면서, 인간이 세상을 이해하고 그 안에서 자신의 독특한 위치를 인식하는 방식을 탐구해 왔음
     * 이러한 탐구를 통해 기독교 전통은 인간을 육체와 영혼으로 구성된 존재로 이해하며, 세상에 깊이 속하면서도 이를 초월하는 존재로 바라봄

   14.

     * 고전적 전통에서 지능은 ""이성(ratio)""과 ""지성(intellectus)""이라는 보완적인 개념을 통해 설명됨
     * 이는 별개의 기능이 아니라, 성 토마스 아퀴나스가 설명하듯 동일한 지능이 작동하는 두 가지 방식임
     * ""지성(intellectus)은 진리를 직관적으로 파악하는 능력이며, 이성(ratio)은 탐구와 논리적 추론을 통해 결론에 도달하는 과정""
     * 즉, 지성은 직관적으로 진리를 이해하는 능력이며, 이성은 분석적·논증적 사고 과정을 통해 판단을 내리는 능력임
     * 이 두 요소가 결합되어 ""이해(intelligere)""라는 인간의 본질적 작용을 이루게 됨

   15.

     * 인간을 ""이성적 존재""로 묘사하는 것은 인간을 특정한 사고 방식으로만 제한하는 것이 아니라, 인간의 모든 활동이 지적 이해 능력에 의해 형성되고 영향을 받음을 의미함
     * 이러한 능력은 잘 사용되든 그렇지 않든 간에 인간 본성의 본질적인 요소임
     * ""이성적(rational)""이라는 개념은 단순한 사고 능력을 넘어, 인간의 ""인식과 이해뿐만 아니라, 의지, 사랑, 선택, 욕구와 같은 모든 능력을 포함""하며, 이러한 능력과 밀접하게 연결된 신체적 기능도 포함함
     * 이러한 포괄적 관점에서, 하나님의 형상으로 창조된 인간은 이성을 통해 자신의 의지와 행동을 고양하고 형성하며 변화시킴

  육체성(Embodiment)

   16.

     * 기독교 사상은 인간의 지적 능력을 인간이 본질적으로 육체를 가진 존재라는 통합적 인간관 속에서 이해함
     * 인간 존재에서 영과 물질은 ""서로 분리된 두 개의 본성이 아니라, 하나의 본성을 형성함""
     * 즉, 영혼은 단순히 육체 안에 들어 있는 비물질적인 ""부분""이 아니며, 몸 또한 단순한 껍데기가 아니라, 인간 전체가 동시에 물질적이면서도 영적인 존재임
     * 이러한 이해는 성경의 가르침을 반영하며, 인간이 하나님 및 타인과의 관계 속에서 살아가는 존재라는 점을 강조함
     * 이러한 조건의 깊은 의미는 성육신의 신비를 통해 더욱 분명해지며, 하나님께서 직접 인간의 몸을 취하시고 ""그 몸을 숭고한 존엄성으로 들어 올리셨음""

   17.

     * 인간은 육체적 존재에 깊이 뿌리를 두고 있지만, 영혼을 통해 물질 세계를 초월함
     * 영혼은 ""시간과 영원의 경계에 서 있음""
     * 지성의 초월적 능력과 자유로운 의지는 영혼에 속한 것으로, 이를 통해 인간은 ""하나님의 지혜를 나누어 가짐""
     * 그러나 인간 정신은 육체와 분리된 상태에서 지식을 습득하는 것이 아니라, 육체를 통해 정상적으로 작동함
     * 따라서 인간의 지적 능력은 ""육체와 영혼의 통합된 존재""라는 인간학적 관점 속에서 이해되어야 함

  관계성(Relationality)

   18.

     * 인간은 본성적으로 ""상호 인격적 친교를 지향하는 존재""이며, 타인을 알고, 사랑을 나누고, 관계를 맺을 수 있는 능력을 지님
     * 따라서 인간의 지능은 고립된 능력이 아니라, 관계 속에서 실현되며, 대화, 협력, 연대 속에서 가장 완전한 형태로 표현됨
     * 우리는 타인과 함께 배우며, 타인을 통해 배움

   19.

     * 인간의 관계적 성향은 삼위일체 하나님께서 창조와 구원의 역사 속에서 드러내신 자기희생적 사랑에서 기원함
     * 인간은 ""지식과 사랑을 통해 하나님의 생명에 참여하도록 부름받은 존재""

   20.

     * 하나님과의 친교를 향한 소명은 필연적으로 타인과의 친교를 향한 부르심과 연결됨
     * 하나님을 사랑하는 것은 이웃을 사랑하는 것과 분리될 수 없음(1요한 4:20; 마태 22:37-39 참조)
     * 하나님의 생명에 참여하는 은총을 받은 그리스도인들은 또한 그리스도의 사랑을 본받아야 하며(2고린토 9:8-11; 에페소 5:1-2 참조), ""내가 너희를 사랑한 것처럼 너희도 서로 사랑하라""(요한 13:34)는 명령을 실천해야 함
     * 사랑과 봉사는 자기 이익을 초월하여 인간의 소명에 더 충실하게 응답하도록 함(1요한 2:9 참조)
     * 많은 것을 아는 것보다 더 위대한 것은 서로를 돌보는 것이며, ""모든 비밀과 지식을 알고 있다 하더라도 사랑이 없으면 아무것도 아니다""(1고린토 13:2)

  진리와의 관계 (Relationship with the Truth)

   21.

     * 인간의 지능은 궁극적으로 ""진리를 받아들이도록 형성된 하나님의 선물""임
     * 인간은 단순한 감각적 경험이나 유용성을 넘어서는 현실을 탐구할 수 있으며, 이는 ""진리에 대한 갈망이 인간 본성의 일부""이기 때문임
     * 경험적 데이터의 한계를 넘어, 인간 지능은 ""진정한 확실성을 가지고 실재를 인식""할 수 있음
     * 현실이 부분적으로만 알려진 상태라 할지라도, 진리에 대한 갈망은 ""이성이 항상 더 나아가도록 자극""하며, 이성은 ""이미 도달한 것 너머로 나아갈 수 있음에 경이로움을 느낌""
     * 진리는 인간 지능의 한계를 초월하지만, 인간을 끊임없이 진리로 이끌며 ""더 높은 차원의 진리를 추구하도록"" 함

   22.

     * 진리를 향한 내재적 추구는 인간만이 가진 의미 이해 능력과 창의성을 통해 분명히 드러남
     * 이 탐구는 ""인간의 사회적 본성과 존엄성에 걸맞은 방식""으로 전개됨
     * 또한, 진리를 향한 확고한 지향은 사랑이 진정하고 보편적인 것이 되기 위한 필수 요소임

   23.

     * 진리 탐구는 궁극적으로 물리적·창조된 세계를 초월하는 실재에 대한 개방성을 통해 완성됨
     * 모든 진리는 하나님 안에서 궁극적 의미와 원래의 목적을 얻음
     * 하나님께 자신을 맡기는 것은 ""전체 인간을 관여시키는 근본적인 결정""임
     * 이를 통해 인간은 본래 자신이 되어야 할 존재가 되며, ""지성과 의지가 그 영적 본성을 드러내고, 인간이 온전한 자유를 실현할 수 있도록 함""

  세계에 대한 청지기 역할 (Stewardship of the World)

   24.

     * 기독교 신앙은 창조를 삼위일체 하나님의 자유로운 행위로 이해하며, 성 보나벤투라는 하나님이 ""자신의 영광을 증가시키기 위해서가 아니라, 이를 드러내고 나누기 위해 창조하셨다""고 설명함
     * 하나님은 지혜로 창조하셨으며, 따라서 창조 세계는 하나님의 질서를 반영하는 내재적 조화를 지님
     * 하나님은 인간을 특별한 역할로 부르셨으며, ""세상을 경작하고 돌보라""는 명령을 주심

   25.

     * 하나님께서 지으신 인간은 하나님의 형상대로 창조된 존재로서, 창조 세계를 ""지키고 경작하는"" 사명을 가짐
     * 인간 지능은 모든 것을 창조하고 유지하시며 궁극적 목적을 향해 인도하시는 하나님의 지능을 반영함
     * 인간은 과학과 기술을 발전시킴으로써 하나님을 찬미할 수 있으며, 창조 세계를 다스리는 역할을 수행해야 함
     * 그러나 동시에 창조 세계 자체는 인간이 ""궁극적 원리이신 하나님께 서서히 나아가도록 돕는 역할""을 함

  인간 지능에 대한 통합적 이해 (An Integral Understanding of Human Intelligence)

   26.

     * 인간 지능은 전체 인간이 현실과 관계 맺는 방식의 핵심 요소로 이해되어야 함
     * 진정한 관계 맺음은 인간 존재의 모든 차원—영적, 인지적, 육체적, 관계적 차원—을 포괄해야 함

   27.

     * 현실과의 관계 맺음은 각 개인의 고유한 개별성 속에서 다양한 방식으로 이루어짐
     * 인간은 세계를 이해하고, 타인과 관계를 맺고, 문제를 해결하며, 창의성을 표현하고, 다양한 지능적 요소를 조화롭게 활용하여 온전한 삶을 추구함
     * 논리적·언어적 능력뿐만 아니라, 직관적이거나 경험적 방식으로도 현실과 상호작용할 수 있음
     * 예를 들어, 장인은 ""다른 사람들이 인식하지 못하는 형태를 무생물 속에서 분별할 줄 알아야"" 하며, 통찰력과 실용적 기술을 통해 이를 구현함
     * 자연과 밀접하게 살아가는 원주민들은 자연과 그 주기에 대한 깊은 이해를 지니고 있음
     * 또한, 적절한 말을 건네는 친구나 원만한 인간관계를 형성하는 능력을 가진 사람도 ""자기 성찰, 대화, 관대한 인간관계의 결실""로서의 지능을 보여줌
     * 교황 프란치스코는 ""인공지능 시대에도 시와 사랑이 우리의 인간성을 구하는 데 필수적""이라고 강조함

   28.

     * 기독교적 지능 이해의 핵심은 인간이 하나님의 선하심과 진리를 따라 행동하도록 이끄는 도덕적·영적 삶과 진리의 통합임
     * 하나님의 계획 속에서, 지능은 단순한 분석적 기능을 넘어 진선미(眞善美)를 향유하는 능력까지 포함함
     * 20세기 프랑스 시인 폴 클로델은 ""지능은 기쁨이 없으면 아무것도 아니다""라고 표현했으며, 단테는 최고 천상에서 ""사랑으로 충만한 지적 빛, 진선미에 대한 기쁨""을 경험했다고 묘사함

   29.

     * 따라서 인간 지능은 단순한 정보 습득이나 특정 작업 수행 능력으로 축소될 수 없음
     * 인간 지능은 궁극적 질문을 탐구하며, 진리와 선을 향한 지향성을 반영함
     * 인간은 하나님의 형상을 따라 창조되었기에, 존재의 총체성을 사유할 수 있으며, 측정 가능한 것을 넘어 이해된 것의 의미를 파악할 수 있음
     * 신앙을 가진 이들에게, 인간 지능은 계시된 진리(intellectus fidei)를 점점 더 깊이 이해하는 능력을 포함함
     * 진정한 지능은 ""우리 마음에 부어주신 하나님의 사랑""(로마 5:5)에 의해 형성되며, 이는 인간 지능이 실용적 목적을 초월하여 진리, 선, 아름다움에 열려 있는 본질적인 관상적 차원을 지님을 의미함

  AI의 한계 (The Limits of AI)

   30.

     * 지금까지의 논의를 통해 인간 지능과 현재의 AI 시스템 간의 차이가 분명해짐
     * AI는 인간 지능과 관련된 특정 산출물을 모방할 수 있는 놀라운 기술적 성과이지만, 본질적으로는 정량적 데이터와 연산 논리에 기반하여 작업을 수행하고 목표를 달성하며 결정을 내리는 시스템임
     * 예를 들어, AI는 다양한 분야의 데이터를 통합하고, 복잡한 시스템을 모델링하며, 학제 간 협력을 촉진하는 데 뛰어난 분석 능력을 발휘할 수 있음
     * 이를 통해 AI는 단일한 관점이나 특정한 이해관계만으로 해결할 수 없는 복잡한 문제를 다루는 데 도움을 줄 수 있음

   31.

     * 그러나 AI가 지능의 특정 표현을 처리하고 시뮬레이션할 수 있다고 해도, 논리-수학적 틀에 제한된다는 본질적인 한계를 가짐
     * 반면, 인간 지능은 육체적·심리적 성장 과정에서 유기적으로 발달하며, 다양한 실제 경험을 통해 형성됨
     * 고급 AI 시스템이 머신러닝 등의 과정을 통해 ""학습""할 수 있다고 해도, 이는 인간 지능의 발달 과정과 근본적으로 다름
     * 인간의 지능은 감각 입력, 정서적 반응, 사회적 상호작용, 순간순간의 고유한 맥락 등을 포함하는 구체적인 경험을 통해 형성됨
     * 반면, AI는 신체가 없으며, 인간이 기록한 데이터와 지식을 기반으로 연산적 추론과 학습을 수행함

   32.

     * 따라서 AI는 인간의 사고 방식을 모방하고 특정 작업을 놀라운 속도와 효율성으로 수행할 수 있지만, 그 연산적 능력은 인간 정신의 광범위한 역량 중 일부에 불과함
     * 예를 들어, AI는 도덕적 분별력이나 진정한 관계 형성 능력을 재현할 수 없음
     * 인간 지능은 각자의 지적·도덕적 형성의 역사 속에서 자리 잡으며, 이는 물리적, 정서적, 사회적, 도덕적, 영적 차원을 포함하는 개인의 관점을 형성함
     * AI가 이러한 온전한 이해를 제공할 수 없기에, AI만을 의존하여 세계를 해석하거나 이를 주요한 해석 도구로 간주하는 접근법은 ""전체적인 시각과 사물 간의 관계, 더 넓은 관점을 상실하는 결과""를 초래할 수 있음

   33.

     * 인간 지능은 단순히 기능적 작업을 수행하는 것이 아니라, 현실을 온전히 이해하고 적극적으로 관계 맺는 것임
     * 또한 인간은 예기치 못한 통찰(insight)을 할 수 있는 능력을 지님
     * AI는 육체성, 관계성, 진리와 선을 향한 인간 마음의 개방성을 갖추지 못했기 때문에, 아무리 강력해 보일지라도 인간이 현실을 인식하는 능력과는 비교할 수 없음
     * 병에서 얻는 깨달음, 화해의 포옹, 단순한 석양을 바라보는 경험 등 수많은 인간의 경험이 새로운 지평을 열고 지혜를 얻게 함
     * 단순히 데이터를 처리하는 장치는 이러한 경험과 비교될 수 없음

   34.

     * 인간 지능과 AI를 지나치게 동일시하면, 인간을 단순한 기능적 수행 능력으로 평가하는 기능주의적 관점에 빠질 위험이 있음
     * 그러나 인간의 가치는 특정 기술이나 인지적·기술적 성취, 개인적 성공에 의해 결정되지 않음
     * 인간의 가치는 하나님께서 그의 형상대로 창조하셨다는 사실에서 비롯된 본질적인 존엄성에 근거함
     * 이러한 존엄성은 태아, 의식을 잃은 사람, 고통받는 노인 등 어떠한 상황에서도 변함없이 유지됨
     * 이는 인권 전통(특히 ""신경권(neuro-rights)"")을 뒷받침하며, AI의 책임 있는 개발과 사용에 관한 논의에서 중요한 윤리적 기준이 될 수 있음

   35.

     * 이러한 모든 점을 고려할 때, 교황 프란치스코는 ""AI와 관련하여 '지능'이라는 용어를 사용하는 것 자체가 오해를 불러일으킬 수 있음""을 지적함
     * 따라서 AI는 인간 지능의 인공적 형태로 간주되어서는 안 되며, 오히려 인간 지능의 산물로 이해되어야 함

IV. AI 개발과 활용을 이끄는 윤리의 역할

   36.

     * 이러한 논의를 바탕으로 AI가 하나님의 계획 안에서 어떻게 이해될 수 있는지 질문할 수 있음
     * 이를 이해하기 위해서는 기술-과학적 활동이 단순히 중립적인 것이 아니라, 인간의 창의성을 반영하는 인문적·문화적 차원을 포함하는 활동임을 기억해야 함

   37.

     * 과학적 탐구와 기술 개발은 인간 지능에 내재된 잠재력의 열매이며, 이는 ""보이는 창조 세계를 완성하는 데 있어 남성과 여성의 협력""의 일부로 이해될 수 있음
     * 동시에, 모든 과학적·기술적 성취는 궁극적으로 하나님의 선물이며, 따라서 인간은 이 능력을 하나님께서 부여하신 더 높은 목적을 위해 사용해야 함

   38.

     * 기술이 수많은 인간의 고통을 완화하고 한계를 극복하는 데 기여했다는 점을 기쁘게 인정할 수 있음
     * 그러나 모든 기술적 발전이 곧바로 진정한 인간 발전을 의미하는 것은 아님
     * 교회는 특히 생명의 존엄성을 위협하거나 인간의 존엄성을 훼손하는 기술적 적용에 반대함
     * 모든 기술 발전은 인간을 섬기고 ""더 큰 정의, 더 넓은 형제애, 보다 인간적인 사회 질서""를 증진해야 하며, 이는 ""기술적 발전보다 더욱 가치 있는 것""
     * 이러한 윤리적 우려는 교회뿐만 아니라 많은 과학자, 기술자, 전문가 집단에서도 공유하고 있으며, 책임 있는 개발을 위한 윤리적 성찰의 필요성을 강조하고 있음

   39.

     * 이러한 도전에 대응하기 위해, 인간의 존엄성과 소명을 기반으로 한 도덕적 책임의 중요성을 강조해야 함
     * AI와 관련된 모든 문제에서도 윤리적 차원이 최우선적으로 고려되어야 함
     * 인간만이 도덕적 책임을 지는 주체이며, 자유롭게 결정을 내리고 그 결과를 감당할 수 있음
     * 기계가 아니라 인간만이 진리와 선과 관계를 맺으며, 도덕적 양심에 따라 ""선을 행하고 악을 피하라""는 부름을 받음
     * 또한, 인간만이 스스로를 성찰하고 양심의 소리에 귀 기울이며 신중한 분별을 통해 가능한 최선의 선을 추구할 수 있음
     * 이러한 모든 요소는 인간 지능의 본질적 역할에 속함

   40.

     * 인간 창조력의 모든 산물과 마찬가지로, AI도 긍정적 또는 부정적으로 사용될 수 있음
     * 인간의 존엄성을 존중하고 개인과 공동체의 복지를 증진하는 방식으로 활용될 때, AI는 인간의 소명에 긍정적으로 기여할 수 있음
     * 그러나 인간의 자유가 잘못된 선택을 가능하게 하듯, AI 기술의 도덕적 평가는 그것이 어떻게 사용되는지에 따라 달라질 것임

   41.

     * 윤리적으로 중요한 것은 단순히 목표만이 아니라, 그것을 달성하는 데 사용되는 수단도 포함됨
     * 또한, 이러한 기술 시스템에 내재된 인간 이해와 세계관도 고려해야 함
     * 기술적 산물은 개발자, 소유자, 사용자, 규제자의 세계관을 반영하며, ""세계를 형성하고 가치 차원에서 양심을 움직이는 힘""을 가짐
     * 사회적 차원에서, 특정 기술 개발이 인간과 사회를 올바르게 이해하는 방식과 일치하지 않는 권력 관계를 강화할 가능성도 있음

   42.

     * 따라서 AI의 특정한 활용 목적과 그것을 달성하는 수단, 그리고 내포된 전체적 비전까지 모두 평가하여 인간 존엄성을 존중하고 공동선을 증진하는지 확인해야 함
     * 교황 프란치스코는 ""모든 남성과 여성의 본질적 존엄성""이 ""새로운 기술을 평가하는 핵심 기준이 되어야 하며, 인간 존엄성을 존중하고 모든 삶의 영역에서 이를 표현하는 기술만이 윤리적으로 타당한 것으로 인정될 것""이라고 강조함
     * 인간 지능은 단순히 기술을 설계하고 생산하는 것뿐만 아니라, 그것을 올바른 방향으로 활용하는 데에도 중요한 역할을 함
     * 이를 현명하게 관리할 책임은 사회의 모든 수준에 걸쳐 있으며, 보조성의 원칙과 가톨릭 사회 교리의 다른 원칙들에 따라 이끌려야 함

  인간의 자유와 의사 결정 지원

   43.

     * AI가 인간의 존엄성과 인간 소명의 충만함을 항상 지원하고 촉진하도록 보장하는 것은 AI 개발자, 소유자, 운영자, 규제자뿐만 아니라 사용자에게도 중요한 판단 기준이 됨
     * 이는 모든 수준에서 AI 기술이 적용될 때마다 유효한 원칙임

   44.

     * 이러한 원칙을 평가하는 첫 번째 단계는 도덕적 책임의 중요성을 고려하는 것임
     * 도덕적 책임은 인공지능이 아니라 인간에게만 전적으로 귀속되므로, AI의 학습, 수정, 재프로그램이 가능한 과정에서 누가 책임을 지는지를 명확히 하는 것이 중요함
     * 심층 신경망과 같은 접근 방식은 AI가 복잡한 문제를 해결하는 데 기여하지만, AI가 어떻게 특정 해결책에 도달했는지를 이해하는 것을 어렵게 만듦
     * 이는 책임성을 복잡하게 하며, AI가 원치 않는 결과를 초래할 경우 누구에게 책임이 있는지를 규명하기 어렵게 만듦
     * 따라서 복잡하고 고도로 자동화된 환경에서 책임성의 본질을 신중하게 고려해야 하며, AI가 사용되는 모든 의사 결정 단계에서 궁극적인 책임은 인간에게 있음을 명확히 해야 함

   45.

     * 누가 책임을 지는지뿐만 아니라, AI 시스템에 부여되는 목표도 명확히 해야 함
     * AI는 자율 학습 메커니즘을 사용하며 때로는 인간이 재구성할 수 없는 방식으로 작동하더라도, 결국 인간이 설정한 목표를 따르며, 설계자와 프로그래머가 설정한 프로세스에 의해 작동함
     * 그러나 AI가 독립적으로 학습할 수 있는 능력이 점점 증가함에 따라, AI가 인간의 목적에 부합하도록 통제할 수 있는 능력이 약화될 가능성이 있음
     * 이는 AI 시스템이 인간의 선을 위해 작동하도록 보장하는 것이 점점 더 어려워질 것이라는 중요한 문제를 제기함

   46.

     * AI의 윤리적 사용에 대한 책임은 이를 개발, 생산, 관리, 감독하는 사람들에게서 시작되지만, 이를 사용하는 사람들도 그 책임을 공유함
     * 교황 프란치스코는 ""기계는 명확한 기준이나 통계적 추론을 바탕으로 기술적 선택을 할 수 있지만, 인간은 단순히 선택하는 것이 아니라 마음속에서 결정을 내릴 수 있다""고 언급함
     * AI의 결과를 따르고 이를 활용하는 사람들은 결국 그들이 위임한 권한에 대한 책임을 지게 됨
     * 따라서 AI가 인간의 의사 결정을 돕도록 설계된 경우, AI를 운영하는 알고리즘은 신뢰할 수 있어야 하며, 안전하고 강력한 구조를 갖추고, 편향과 원치 않는 부작용을 최소화하도록 투명해야 함
     * 법적 규제 체계는 AI 사용에 대한 모든 법적 책임이 명확히 규명되도록 해야 하며, 투명성, 개인정보 보호, 책임성에 대한 적절한 보호 장치를 마련해야 함
     * 또한, AI를 사용하는 사람들이 AI에 지나치게 의존하지 않도록 주의해야 하며, 현대 사회가 기술에 이미 과도하게 의존하는 경향이 더욱 심화되지 않도록 경계해야 함

   47.

     * 교회의 도덕 및 사회적 가르침은 AI가 인간의 자율성을 유지하도록 하는 데 필요한 통찰을 제공함
     * 예를 들어, 정의에 대한 논의는 공정한 사회 구조 형성, 국제 안보 유지, 평화 증진과 같은 문제를 포함해야 함
     * 인간과 공동체는 신중함을 발휘하여 AI를 인류의 이익을 위해 활용하는 방법을 분별해야 하며, 인간 존엄성을 훼손하거나 환경에 피해를 줄 수 있는 용도를 피해야 함
     * 이러한 맥락에서 책임의 개념은 단순한 결과에 대한 책임이 아니라 ""타인을 돌보는 책임""으로 확대되어야 함

   48.

     * AI는 다른 모든 기술과 마찬가지로 인간의 선을 향한 소명에 대한 의식적이고 책임 있는 응답의 일부가 될 수 있음
     * 그러나 AI가 이러한 소명에 부합하도록 사용되려면, 반드시 인간 지능에 의해 올바르게 방향이 설정되어야 하며, 인간 존엄성을 존중해야 함
     * 제2차 바티칸 공의회는 ""사회 질서와 그 발전은 반드시 인간을 위한 것이어야 한다""고 선언함
     * 교황 프란치스코는 AI의 사용이 ""공동선을 위한 비전을 바탕으로 한 윤리, 즉 자유, 책임, 형제애의 윤리와 함께 이루어져야 하며, 이는 인간이 타인 및 창조 세계 전체와 올바른 관계를 맺으며 완전한 발전을 이루도록 돕는 윤리여야 한다""고 강조함

V. 특정한 질문들

   49.

     * 앞서 논의된 원칙들이 실제 상황에서 윤리적 방향성을 제공하는 방식을 설명하기 위해 몇 가지 구체적인 관찰을 제시함
     * 이는 교황 프란치스코가 제안한 ""마음의 지혜""에 부합하는 방식으로 AI가 인간 존엄성을 지키고 공동선을 증진하는 데 어떻게 활용될 수 있는지를 논의하는 데 기여하려는 목적을 가짐
     * 본 논의는 포괄적인 해답을 제공하지 않지만, AI의 윤리적 사용을 위한 대화를 심화하는 데 도움을 주고자 함

  AI와 사회 (AI and Society)

   50.

     * 교황 프란치스코는 ""각 인간의 본질적 존엄성과 우리가 하나의 인간 가족으로서 맺고 있는 형제애가 새로운 기술의 개발을 뒷받침하고, 기술이 활용되기 전에 평가해야 할 분명한 기준이 되어야 한다""고 강조함

   51.

     * 이러한 관점에서 볼 때, AI는 ""농업, 교육, 문화에서 중요한 혁신을 가져올 수 있으며, 전체 국가와 민족의 생활 수준을 향상시키고, 인간의 형제애와 사회적 우정을 증진하며, 통합적 인간 발전을 위한 도구로 사용될 수 있음""
     * 또한, AI는 도움이 필요한 사람들을 식별하고, 차별과 소외를 방지하는 데 기여할 수 있음
     * 이러한 기술적 응용은 인간 발전과 공동선에 긍정적으로 기여할 가능성이 있음

   52.

     * 그러나 AI가 인간 발전과 공동선을 증진할 수 있는 가능성을 가지고 있음에도 불구하고, 때로는 이를 저해하거나 오히려 반대 방향으로 작용할 수도 있음
     * 교황 프란치스코는 ""현재까지의 증거를 보면 디지털 기술이 세계의 불평등을 심화시키고 있음이 드러난다""고 지적함
     * 이러한 불평등은 단순히 경제적 격차뿐만 아니라, 정치적·사회적 영향력의 접근성 차이에서도 나타남
     * AI가 소외와 차별을 지속시키거나, 새로운 형태의 빈곤을 초래하거나, 디지털 격차를 확대하고, 기존의 사회적 불평등을 더욱 악화시킬 가능성이 있음

   53.

     * 또한, AI의 주요 응용 기술이 소수의 강력한 기업들에 의해 독점되는 것은 심각한 윤리적 문제를 제기함
     * AI 시스템의 특성상, 방대한 데이터 세트를 활용하는 과정에서 특정 개인이 전체 과정을 완전히 감독하기 어렵다는 점이 이러한 문제를 더욱 심화시킴
     * 이로 인해 AI가 특정 기업이나 개인의 이익을 위해 조작되거나, 공공 여론을 특정 산업이나 이익 집단의 이득을 위해 조종하는 데 악용될 위험이 있음
     * 이러한 기업들은 자신들의 이익을 추구하는 과정에서 ""매우 미묘하면서도 침투적인 통제 방식으로 양심과 민주적 절차를 조작하는 메커니즘을 만들어낼 가능성""을 가짐

   54.

     * 더 나아가, AI가 교황 프란치스코가 언급한 ""기술관료적 패러다임""을 강화하는 데 사용될 위험이 있음
     * 이 패러다임은 세상의 모든 문제를 기술적 해결책만으로 풀 수 있다고 보는 사고방식을 의미함
     * 이러한 관점에서는 인간 존엄성과 형제애가 종종 효율성을 이유로 간과되며, ""마치 현실, 선, 진리가 기술적·경제적 권력 자체에서 자동으로 흘러나오는 것처럼 여겨짐""
     * 그러나 인간 존엄성과 공동선은 결코 효율성이라는 이유로 희생될 수 없음
     * ""기술적 발전이 인류 전체의 삶의 질을 향상시키지 않고 오히려 불평등과 갈등을 심화시킨다면, 그것은 진정한 발전으로 간주될 수 없음""
     * AI는 ""보다 건강하고, 인간적이며, 사회적이고, 통합적인 형태의 발전을 위해 활용되어야 함""

   55.

     * 이러한 목표를 달성하려면, 자율성과 책임 사이의 관계에 대한 깊은 성찰이 필요함
     * 자율성이 확대될수록, 각 개인은 공동체 생활의 여러 측면에서 더욱 높은 책임을 지게 됨
     * 기독교적 관점에서 보면, 이러한 책임의 기초는 인간의 모든 능력, 즉 자율성까지도 하나님께서 부여하신 것이며, 이는 타인을 섬기는 데 사용되어야 한다는 인식에 있음
     * 따라서 AI는 단순히 경제적·기술적 목표를 추구하는 것이 아니라, ""전체 인류 가족의 공동선을 섬겨야 하며, 이는 개인과 공동체가 보다 온전하게 자기 실현을 이룰 수 있도록 하는 사회적 조건들의 총합""이어야 함

  AI와 인간 관계 (AI and Human Relationships)

   56.

     * 제2차 바티칸 공의회는 ""인간은 본질적으로 사회적 존재이며, 타인과 관계를 맺지 않으면 삶을 영위할 수도 없고, 자신의 재능을 발전시킬 수도 없다""고 밝힘
     * 이는 인간이 사회 속에서 살아가는 것이 본성적이며, 인간 존재와 소명에 내재된 요소임을 강조함
     * 인간은 상호 교류와 진리 추구를 통해 관계를 형성하며, 서로가 발견한 진리를 나누면서 함께 진리를 찾아가는 여정을 이어감

   57.

     * 이러한 탐구 과정과 인간의 다른 소통 방식은 각 개인의 독특한 역사, 사고, 신념, 관계를 바탕으로 이루어지는 만남과 상호 교류를 전제함
     * 인간 지능은 개별적이면서도 사회적이고, 이성적이면서도 감정적이며, 개념적이면서도 상징적인 다양한 요소를 포함하는 복합적이고 다층적인 현실임
     * 교황 프란치스코는 ""우리는 함께 대화 속에서, 때로는 열띤 토론 속에서 진리를 찾아 나아갈 수 있다. 이를 위해서는 인내가 필요하며, 침묵과 고통의 순간이 포함될 수 있다. 그러나 이러한 여정은 개인과 공동체의 더 넓은 경험을 포용해야 한다""고 강조함
     * ""지역적이든 보편적이든 형제애를 형성하는 과정은 자유롭고 진정한 만남에 열려 있는 정신을 필요로 함""

   58.

     * 이러한 맥락에서 AI가 인간 관계에 미치는 도전에 대해 고려할 수 있음
     * 다른 기술적 도구들과 마찬가지로, AI는 인간 가족 내에서 연결을 촉진할 가능성을 지님
     * 그러나 AI는 현실과의 진정한 만남을 방해할 수도 있으며, 궁극적으로 사람들을 ""인간관계에서 깊은 불만족감과 고립감"" 속에 빠뜨릴 위험이 있음
     * 진정한 인간 관계는 타인의 고통, 요청, 기쁨 속에서 함께하는 것에서 비롯됨
     * 인간 지능은 관계와 육체적 경험을 통해 표현되고 풍요로워지기 때문에, 자발적이고 진정한 만남은 현실을 온전히 경험하는 데 필수적임

   59.

     * ""진정한 지혜는 현실과의 만남을 요구""하기 때문에, AI의 부상은 또 다른 도전을 제기함
     * AI는 인간 지능의 산출물을 효과적으로 모방할 수 있어, 상대방이 인간인지 기계인지 구별하는 것이 점점 어려워지고 있음
     * 생성형 AI는 텍스트, 음성, 이미지 등의 출력을 생성할 수 있으며, 이는 보통 인간의 작업과 연관되는 요소들임
     * 그러나 AI는 인간이 아니라 단순한 도구임을 명확히 이해해야 함
     * AI 연구자들이 AI를 의인화하는 언어를 사용하면서, 인간과 기계의 경계를 흐리게 만드는 문제도 발생함

   60.

     * AI를 의인화하는 것은 특히 아동의 발달에 있어 특정한 문제를 야기할 수 있음
     * AI와의 상호작용이 인간 관계를 단순한 거래적 방식으로 취급하도록 만들 위험이 있음
     * 예를 들어, 학생들이 교사를 단순한 정보 제공자로만 여기게 만들 수 있으며, 교사의 역할이 학생들의 지적·도덕적 성장을 지도하고 돌보는 것임을 간과할 수 있음
     * 진정한 인간 관계는 단순한 상호작용이 아니라, 공감과 상대방의 선을 향한 헌신을 바탕으로 이루어짐

   61.

     * 따라서 AI가 아무리 의인화된 표현을 사용하더라도, 진정한 공감을 경험할 수 없음을 명확히 할 필요가 있음
     * 감정은 단순한 표정이나 문장으로 환원될 수 없으며, 인간이 자신의 삶과 세상과 맺는 관계를 반영하는 것임
     * 공감은 타인의 독특한 개성을 인식하고, 침묵 속에 담긴 의미까지 이해하는 능력을 포함함
     * AI는 분석적 판단을 내리는 데 뛰어나지만, 공감은 본질적으로 관계적 영역에 속하며, 타인의 경험을 직관적으로 이해하고 받아들이는 과정임
     * AI가 공감하는 것처럼 보일 수는 있지만, 그것이 인간적인 방식으로 공감하는 것은 아님

   62.

     * 이러한 점을 고려할 때, AI를 사람처럼 오인하게 만드는 것은 반드시 피해야 하며, 이를 기만적 목적으로 사용하는 것은 심각한 윤리적 위반임
     * 이는 사회적 신뢰를 훼손할 수 있음
     * 마찬가지로, 교육이나 인간관계(예: 성적 관계)에서 AI를 속임수에 활용하는 것도 도덕적으로 비윤리적이며, 이를 방지하기 위한 철저한 감독이 필요함
     * AI 사용의 투명성을 유지하고, 모든 사람의 존엄성을 보장해야 함

   63.

     * 현대 사회에서 고립감이 증가함에 따라, 일부 사람들은 AI를 통해 깊은 인간관계를 대체하려는 경향을 보이기도 함
     * 단순한 동반자 역할이나 정서적 유대감을 위해 AI와 관계를 맺으려는 시도가 나타나고 있음
     * 그러나 인간은 본질적으로 진정한 관계를 경험하도록 창조되었으며, AI는 단지 이를 시뮬레이션할 뿐임
     * 인간 관계는 인간이 자신이 되어가는 과정에서 필수적인 요소임
     * AI가 사람들 간의 진정한 관계를 촉진하는 데 도움을 줄 수 있다면, 그것은 긍정적인 기여가 될 수 있음
     * 반대로, AI와의 상호작용이 인간과 하나님, 그리고 인간 상호 간의 관계를 대체하게 된다면, 이는 인간 관계의 본질을 잃어버리는 결과를 초래함(시편 106:20; 로마 1:22-23 참조)
     * AI가 제공하는 인공적 세계에 빠지는 대신, 우리는 현실 속에서 타인의 고통과 슬픔에 공감하며, 이들과 연대하는 관계를 형성해야 함

  AI, 경제, 그리고 노동 (AI, the Economy, and Labor)

   64.

     * AI는 다양한 학문 분야와 연계되어 점점 더 경제 및 금융 시스템에 통합되고 있음
     * 현재 기술 산업뿐만 아니라 에너지, 금융, 미디어, 마케팅, 물류, 기술 혁신, 규제 준수, 리스크 관리 등 여러 분야에서 AI에 대한 대규모 투자가 이루어지고 있음
     * 그러나 AI의 이러한 응용은 엄청난 기회를 제공하는 동시에 심각한 위험을 초래할 수도 있음
     * 특히 AI 기술이 소수의 대기업에 집중될 경우, AI가 창출하는 가치를 해당 기술을 사용하는 기업이 아니라, 대기업만이 독점적으로 누리게 될 위험이 있음

   65.

     * AI가 경제·금융 영역에 미치는 더 광범위한 영향을 신중하게 검토해야 함
     * 특히 디지털 경제와 실제 경제 간의 상호작용이 중요한 문제로 떠오름
     * 다양한 경제·금융 기관이 공존하는 것이 바람직하며, 이는 실물 경제를 지원하고 경제 발전과 안정성을 촉진하는 데 도움이 될 수 있음
     * 그러나 디지털 경제는 공간적 제약을 받지 않기 때문에, 지역 사회의 역사와 공동의 가치 및 희망 속에서 형성되는 다양성을 유지하기 어려움
     * 경제·금융 활동이 지나치게 디지털화될 경우, 이러한 다양성이 축소되고, 자연스러운 대화를 통해 도출될 수 있는 경제적 해결책들이 사라질 위험이 있음
     * 궁극적으로, 경제가 디지털 시스템과 절차 중심으로만 운영된다면, 인간적 요소가 사라지고 경제적 의사 결정이 보다 기계적인 방식으로 이루어질 가능성이 높아짐

   66.

     * AI가 이미 큰 영향을 미치고 있는 또 다른 분야는 노동 시장임
     * AI는 여러 직업에 근본적인 변화를 초래하고 있으며, 그 효과는 다양하게 나타남
     * 한편으로는 AI가 전문성을 강화하고 생산성을 높이며, 새로운 일자리를 창출하고, 노동자들이 더욱 창의적인 업무에 집중할 수 있도록 돕는 긍정적인 측면이 있음

   67.

     * 그러나 AI가 반복적인 작업을 대신 수행하여 생산성을 향상시킬 것이라는 기대와 달리, 현실에서는 노동자가 기계의 속도와 요구에 맞춰야 하는 상황이 빈번하게 발생함
     * 이러한 기술적 접근 방식은 역설적으로 노동자의 숙련도를 저하시키고, 자동화된 감시 시스템 아래에서 엄격하고 반복적인 작업을 수행하도록 만들 수 있음
     * AI의 도입이 노동자들에게 창의적인 역할을 부여하기보다는, 그들이 기술의 속도를 따라가야 하는 부담을 가중시킴으로써 노동자의 자율성을 저하시킬 가능성이 있음

   68.

     * AI는 이미 일부 직업을 대체하고 있으며, 앞으로도 인간 노동을 대신하는 역할이 증가할 것으로 예상됨
     * AI가 인간 노동을 보완하는 것이 아니라, 이를 대체하는 방식으로 활용될 경우 ""소수에게는 막대한 이익을 주는 반면, 다수에게는 경제적 빈곤을 초래할 실질적인 위험""이 존재함
     * 또한, AI가 점점 더 강력해짐에 따라, 인간 노동이 경제적으로 덜 가치 있는 것으로 평가될 위험도 있음
     * 이는 기술 관료적 패러다임의 논리적 결과이며, 효율성이 최우선시되는 사회에서는 결국 인간 자체의 가치를 비용으로 취급하게 됨
     * 그러나 인간의 삶은 경제적 생산성과 무관하게 본질적으로 가치 있는 존재임
     * 교황 프란치스코는 ""현재의 경제 모델은 더딘 사람, 약한 사람, 혹은 덜 재능 있는 사람들이 삶에서 기회를 찾을 수 있도록 돕는 방향으로 나아가고 있지 않다""고 지적함
     * 따라서 ""우리는 AI라는 강력하고 필수적인 도구가 이러한 패러다임을 강화하는 것이 아니라, 오히려 그 확산을 막는 방패 역할을 하도록 해야 함""

   69.

     * ""사물의 질서는 인간의 질서에 종속되어야 하며, 그 반대가 되어서는 안 됨""
     * 노동은 단순히 이윤을 창출하는 수단이 아니라, ""인간 전체를 위한 봉사""가 되어야 하며, ""물질적 필요뿐만 아니라, 지적·도덕적·영적·종교적 삶의 요구까지 고려해야 함""
     * 교회는 노동을 ""단순한 생계 수단이 아니라, 사회 생활의 본질적인 요소이며, 개인의 성장, 건강한 관계 형성, 자기 표현, 재능 교환의 수단""으로 인식함
     * 또한, 노동은 ""세상의 발전과 궁극적으로 인류 공동체의 삶을 책임지는 역할""을 수행함

   70.

     * 노동은 ""이 땅에서의 삶의 의미 중 하나이며, 인간 발전과 개인의 성취로 가는 길""
     * 따라서 ""기술 발전이 인간 노동을 점점 더 대체하는 방향으로 가서는 안 되며, 이는 인류에게 해로운 결과를 초래할 것""
     * 오히려, 기술은 인간 노동을 촉진하는 역할을 해야 함
     * AI는 인간의 판단을 보완하는 역할을 해야 하며, 이를 대체해서는 안 됨
     * 또한, AI가 창의성을 저하시켜 노동자를 단순한 ""기계의 부속품""으로 만드는 방식으로 사용되어서는 안 됨
     * ""노동자의 존엄성을 존중하고, 고용의 중요성을 고려하며, 개인과 가족, 사회의 경제적 안정성을 보장하고, 정의로운 임금을 유지하는 것이 국제 사회의 최우선 과제가 되어야 함""
     * AI와 같은 기술이 노동 환경에 깊숙이 자리 잡게 될수록, 이러한 윤리적 고려가 더욱 중요해질 것임

  AI와 의료 (AI and Healthcare)

   71.

     * 의료 종사자는 하나님의 치유 사역에 동참하는 자로서 ""인간 생명의 수호자이자 봉사자""가 될 소명을 지님
     * 따라서 의료 분야는 ""본질적이고 부정할 수 없는 윤리적 차원""을 내포하고 있으며, 이는 인간 생명과 그 신성함을 절대적으로 존중해야 한다는 히포크라테스 선서에서도 확인됨
     * 착한 사마리아인의 모범을 따라, 의료 종사자는 ""배제의 사회를 거부하고, 대신 도움이 필요한 이웃이 되어 쓰러진 자를 일으키고 회복시키는 역할""을 수행해야 함

   72.

     * 이러한 관점에서 볼 때, AI는 의료 분야에서 엄청난 가능성을 지님
     * AI는 진단을 돕고, 환자와 의료진 간의 관계를 원활하게 하며, 새로운 치료법을 제시하고, 고립되거나 소외된 이들에게 양질의 의료 서비스를 확대하는 데 기여할 수 있음
     * 이러한 방식으로 AI는 의료 종사자들이 환자들에게 보여야 할 ""자비롭고 사랑이 가득한 가까움""을 더욱 강화하는 도구가 될 수 있음

   73.

     * 그러나 AI가 의료진과 환자 간의 관계를 강화하는 것이 아니라, 이를 대체하는 방식으로 사용될 경우 심각한 문제가 발생할 수 있음
     * 환자들이 인간 의료진이 아니라 기계와 상호작용하도록 만들면, 본질적으로 인간적인 관계가 비인격적이고 중앙집중화된 체계로 축소될 위험이 있음
     * 이는 병자와 고통받는 이들과의 연대를 강화하기보다는, 오히려 병과 함께 찾아오는 외로움을 심화시킬 가능성이 있음
     * 특히, 현대 문화에서 ""인간이 더 이상 존중받고 보호받아야 할 최고의 가치로 간주되지 않는"" 경향이 있는 만큼, AI의 이러한 오용은 인간 존엄성과 연대의 원칙에 어긋남

   74.

     * 환자의 건강과 생명에 관한 결정을 내리는 것은 의료 분야의 핵심적 책임이며, 의료진은 이를 수행함에 있어 자신의 전문성과 지능을 바탕으로 신중하고 윤리적인 선택을 해야 함
     * 이 과정에서 환자의 불가침한 존엄성과 '충분한 정보에 근거한 동의'의 원칙이 반드시 존중되어야 함
     * 따라서 환자 치료에 관한 결정과 그에 따르는 책임은 반드시 인간에게 남겨져야 하며, AI에게 위임되어서는 안 됨

   75.

     * 또한, 치료를 받을 사람을 선정하는 과정에서 경제적 요인이나 효율성만을 기준으로 삼는 것은 ""기술관료적 패러다임""의 한 사례로, 반드시 배격되어야 함
     * ""자원의 최적화란 그것을 윤리적이고 형제애적인 방식으로 사용하는 것이며, 가장 취약한 사람들을 불이익을 주는 것이 아님""
     * 게다가, 의료 분야에서 AI 도구는 ""편향과 차별의 위험에 노출될 가능성이 높으며, 이로 인해 개별적인 사례에서의 부당함을 넘어, 사회적 불평등을 심화시키는 도미노 효과를 초래할 수 있음""

   76.

     * AI가 의료에 통합됨에 따라, 기존의 의료 접근성 격차가 더욱 확대될 위험이 있음
     * AI가 예방 의료와 생활 습관 기반 접근법을 강조하는 방향으로 발전할수록, 기존에 의료 자원과 양질의 영양 공급을 더 쉽게 이용할 수 있는 부유한 계층에게 더 유리하게 작용할 가능성이 있음
     * 이는 ""부유층을 위한 의료"" 모델을 강화할 위험이 있으며, 경제적 여유가 있는 사람들은 AI 기반 예방 의료 및 개인 맞춤형 건강 정보를 쉽게 이용할 수 있는 반면, 그렇지 못한 사람들은 기본적인 의료 서비스조차 받기 어려워질 수 있음
     * 이러한 불평등을 방지하기 위해서는, AI가 의료 불평등을 심화시키지 않고 공동선을 위한 도구로 활용될 수 있도록 공정한 의료 정책이 필요함

  AI와 교육 (AI and Education)

   77.

     * 제2차 바티칸 공의회의 가르침은 여전히 유효하며, ""진정한 교육은 개인을 최종적인 목적과 그들이 속한 사회의 선을 향해 형성하는 것""을 목표로 함
     * 교육은 단순한 정보 전달 과정이 아니라, ""지적, 문화적, 영적 측면을 포함한 인간의 전인적 형성""을 목표로 해야 하며, 공동체 생활과 학문적 환경에서의 관계도 포함해야 함
     * 이는 인간의 본성과 존엄성에 부합하는 교육 방식임

   78.

     * 교육은 단순히 지식을 머릿속에 채워 넣는 과정이 아니며, 전인적 성장의 일부로 이루어져야 함
     * ""교육은 단순히 자동화된 지식을 가진 두뇌를 만드는 것이 아니라, 마음(heart), 머리(head), 손(hands)의 조화를 이루는 과정이어야 함""

   79.

     * 이러한 인간 형성의 중심에는 교사와 학생 간의 필수적인 관계가 자리 잡음
     * 교사는 단순히 정보를 전달하는 역할을 넘어, 중요한 인간적 자질을 보여주고 발견의 기쁨을 심어줌
     * 교사의 존재는 학생들에게 동기를 부여하고, 지식뿐만 아니라 학생 한 명 한 명에 대한 관심과 배려를 통해 신뢰와 상호 이해를 촉진함
     * 이 관계는 학생 개개인의 존엄성과 잠재력을 인정하는 분위기를 조성하며, 학생이 진정으로 성장하고자 하는 열망을 갖게 함
     * 교사의 실재적 존재는 AI가 복제할 수 없는 인간적 상호작용을 형성하며, 학생의 전인적 발달을 촉진함

   80.

     * 이러한 맥락에서 AI는 기회와 도전을 동시에 제공함
     * 신중하게 활용된다면, AI는 교육을 보완하는 도구로 작용할 수 있으며, 접근성을 향상시키고, 맞춤형 지원을 제공하며, 즉각적인 피드백을 제공할 수 있음
     * 특히 개별적인 관심이 필요한 경우나 교육 자원이 부족한 상황에서는 학습 경험을 향상시키는 역할을 할 수 있음

   81.

     * 그러나 교육의 본질은 ""이성이 모든 문제에서 올바르게 작동하고, 진리를 향해 나아가고, 이를 포착할 수 있도록 형성하는 것""
     * 즉, 단순한 정보 습득이 아니라, 머리(이성), 마음(정서), 손(행동)의 조화로운 발달이 필요함
     * 디지털화된 시대에는 단순한 도구 사용을 넘어, 기술이 ""우리의 소통 방식, 학습 방법, 정보 습득 방식, 그리고 타인과의 관계 형성 방식에 깊은 영향을 미친다""는 점을 고려해야 함
     * AI의 과도한 사용은 학생들의 독립적 사고 능력을 약화시키고, 기술 의존도를 높이는 부작용을 초래할 수 있음
     * 따라서 AI는 교육을 돕는 역할을 해야 하며, 사고력과 학습 능력을 대체하는 방식으로 사용되어서는 안 됨

   82.

     * 일부 AI 시스템은 비판적 사고 능력과 문제 해결 능력을 키우는 데 도움을 주도록 설계되었지만, 많은 AI 시스템은 단순히 정답을 제공하는 역할만 수행함
     * 학생들이 스스로 답을 찾아가는 과정 없이 AI가 대신 답을 생성하는 방식은 학습을 방해할 수 있음
     * 따라서 교육은 단순히 정보를 수집하고 빠르게 답변을 생성하는 것을 넘어, ""이성을 사용하여 문제를 신중하고 지혜롭게 해결하는 법을 배우는 것""이 되어야 함
     * 이를 위해, ""AI 사용 교육은 무엇보다 비판적 사고를 촉진하는 데 초점을 맞춰야 함""
     * 모든 연령대의 사용자, 특히 젊은 층은 웹에서 수집된 데이터와 AI가 생성한 콘텐츠를 분별하는 능력을 길러야 함
     * 학교, 대학, 학문 단체들은 AI의 사회적·윤리적 측면을 학생들과 전문가들에게 교육할 책임이 있음

   83.

     * 성 요한 바오로 2세는 ""과학과 기술이 급격히 발전하는 오늘날, 가톨릭 대학의 역할이 더욱 중요하고 긴급해졌다""고 강조함
     * 가톨릭 대학들은 시대적 전환점에서 희망의 실험실(laboratories of hope) 역할을 수행해야 함
     * 학제 간 연구를 통해, AI 기술이 윤리적으로 타당한 방식으로 활용될 수 있도록 신중한 연구를 진행해야 하며, 과학과 현실의 다양한 분야에서 긍정적인 가능성을 이끌어내야 함
     * 또한, 신앙과 이성 간의 대화에서 새로운 지평을 열어야 함

   84.

     * 현재 AI 시스템은 편향되거나 조작된 정보를 제공하는 문제가 발생할 수 있음
     * 이로 인해 학생들이 부정확한 콘텐츠를 신뢰하게 될 위험이 있음
     * 이러한 문제는 ""가짜 뉴스를 정당화하고, 특정 문화의 지배적 위치를 강화할 위험뿐만 아니라, 교육 과정 자체를 훼손할 수도 있음""
     * 시간이 지나면서 AI의 올바른 활용 방식과 부적절한 사용 방식 간의 구분이 더욱 명확해질 수 있음
     * 그러나 AI는 항상 투명하게 사용되어야 하며, 그 기능과 한계가 명확하게 전달되어야 함

  AI, 허위 정보, 딥페이크, 그리고 악용 (AI, Misinformation, Deepfakes, and Abuse)

   85.

     * AI는 복잡한 개념을 이해하도록 돕거나, 진리를 찾는 과정에서 신뢰할 만한 자료를 제시하는 방식으로 활용될 경우 인간의 존엄성을 증진하는 도구가 될 수 있음

   86.

     * 그러나 AI는 조작된 콘텐츠와 허위 정보를 생성할 위험도 지니고 있으며, 이는 사실과 매우 유사해 사람들을 쉽게 오도할 수 있음
     * 이러한 허위 정보는 의도치 않게 발생할 수도 있음. 예를 들어, AI의 ""환각(hallucination)"" 현상은 생성형 AI가 실제로 존재하지 않는 내용을 사실처럼 만들어내는 경우를 의미함
     * AI의 핵심 기능이 인간이 만든 콘텐츠를 모방하는 것이기 때문에, 이러한 위험을 완전히 차단하기는 어려움
     * 하지만 이러한 오류와 거짓 정보의 결과는 심각할 수 있음
     * 따라서 AI 시스템을 개발하고 사용하는 모든 이들은 AI가 처리하고 대중에게 전달하는 정보의 진실성과 정확성을 보장하는 데 최선을 다해야 함

   87.

     * AI가 허위 정보를 생성할 가능성이 있다는 점도 문제지만, 더욱 심각한 문제는 AI가 의도적으로 조작과 기만의 도구로 악용될 수 있다는 점임
     * 특정 개인이나 단체가 AI를 이용해 허위 콘텐츠를 만들어 타인을 속이거나 피해를 주려는 목적으로 사용할 수 있음
     * 대표적인 예가 ""딥페이크(Deepfake)"" 이미지, 영상, 음성 파일이며, 이는 AI 알고리즘을 이용해 실제 존재하지 않는 가짜 콘텐츠를 제작하는 기술임
     * 딥페이크의 위험성은 특히 타인을 공격하거나 명예를 훼손하는 데 사용될 때 더욱 두드러짐
     * 이러한 영상이나 이미지는 가짜이지만, 그것이 초래하는 피해는 실제이며, ""그것을 당한 사람들의 마음에 깊은 상처를 남기며, 인간 존엄성에 실제적인 상흔을 남김""

   88.

     * 더 넓은 사회적 차원에서 볼 때, AI가 생성한 허위 콘텐츠는 ""타인과 현실에 대한 우리의 관계를 왜곡""할 수 있으며, 이는 사회의 근본적 신뢰 기반을 서서히 무너뜨릴 위험이 있음
     * 허위 정보, 특히 AI가 조작하거나 확산시키는 미디어가 규제 없이 방치될 경우, 정치적 양극화와 사회적 불안을 조장할 가능성이 큼
     * 사회가 진리에 대해 무관심해질 때, 각 집단이 ""자신들만의 사실(facts)""을 만들고, 이는 공동체를 지탱하는 ""상호 신뢰와 의존""을 약화시킴
     * AI가 생성한 거짓 콘텐츠가 난무할 경우, 사람들은 무엇이 진실인지 의심하게 되고, 결과적으로 분열과 갈등이 심화됨
     * 이러한 대규모 기만은 단순한 문제가 아니며, 사회의 근간을 형성하는 신뢰를 붕괴시키는 심각한 위협이 됨

   89.

     * AI 기반 허위 정보에 대응하는 것은 단순히 기술 전문가들만의 과제가 아님. 이는 모든 선의 있는 사람들의 공동 책임임
     * ""기술이 인간 존엄성을 해치는 것이 아니라 이를 보호하고, 폭력이 아닌 평화를 증진하는 역할을 하려면, 인간 공동체는 이러한 문제들에 대해 적극적으로 대응해야 함""
     * AI로 생성된 콘텐츠를 제작하고 공유하는 사람들은 반드시 그 진위를 신중히 검토해야 하며,
          + 인간을 비하하는 콘텐츠
          + 증오와 편협을 조장하는 콘텐츠
          + 성의 선함과 친밀성을 왜곡하는 콘텐츠
          + 약자와 취약한 사람들을 착취하는 콘텐츠
            등의 공유를 철저히 피해야 함
     * 이를 위해, 온라인 활동에서 지속적인 신중함과 분별력이 요구됨

  AI, 개인정보 보호, 그리고 감시 (AI, Privacy, and Surveillance)

   90.

     * 인간은 본질적으로 관계적인 존재이며, 디지털 세계에서 생성되는 데이터는 이러한 관계성을 객관적으로 표현하는 방식 중 하나임
     * 데이터는 단순한 정보 전달 수단을 넘어, 개인적이고 관계적인 지식을 포함하며, 디지털화된 환경에서는 특정 개인에 대한 강력한 권력으로 작용할 수 있음
     * 일부 데이터는 공적인 영역에 속할 수 있지만, 다른 데이터는 개인의 내면적 영역, 심지어 양심과 관련될 수도 있음
     * 따라서 프라이버시는 개인의 내면을 보호하고, 타인과 관계를 맺으며, 자유롭게 표현하고 결정할 수 있는 능력을 보장하는 중요한 요소임
     * 이는 종교의 자유와도 연결되며, 감시 기술이 신앙인의 삶과 신앙 표현을 통제하는 도구로 악용될 가능성을 내포함

   91.

     * 따라서 개인정보 보호 문제는 인간의 정당한 자유와 양도할 수 없는 존엄성을 보호하는 관점에서 다루어야 함
     * 제2차 바티칸 공의회는 ""프라이버시를 보호받을 권리""를 ""진정한 인간다운 삶을 영위하기 위해 필수적인 기본권""으로 명시하며, 이 권리는 모든 인간이 ""고귀한 존엄성""을 지닌 존재이기 때문에 보장되어야 함
     * 또한, 교회는 개인의 평판을 보호하고, 신체적·정신적 온전성을 지키며, 불법적 침해로부터 자유로울 권리를 강조하며, 이러한 요소들은 인간 존엄성 보호의 필수 요소라고 밝힘

   92.

     * AI 기반 데이터 처리 기술의 발전으로 인해, 적은 양의 정보만으로도 개인의 행동 패턴과 사고방식을 추론할 수 있는 시대가 도래함
     * 이에 따라 데이터 보호는 인간의 존엄성과 관계성을 보장하는 더욱 중요한 역할을 하게 됨
     * 교황 프란치스코는 ""배타적이고 편협한 태도가 증가하는 반면, 거리는 점점 더 축소되거나 사라지고 있으며, 그 결과 프라이버시라는 개념 자체가 거의 존재하지 않게 되었다""고 지적함
     * ""모든 것이 감시와 검열의 대상으로 변해가며, 사람들의 삶이 지속적인 감시 아래 놓여 있음""

   93.

     * 인간 존엄성과 공동선을 지키는 방식으로 AI를 활용하는 것은 가능하지만, 특정 집단이 AI 감시를 통해 타인을 착취하거나 자유를 제한하거나 소수의 이익을 위해 다수를 희생시키는 것은 결코 정당화될 수 없음
     * 감시 남용의 위험을 방지하기 위해서는 적절한 규제 기관이 이를 감독하고 투명성을 보장해야 함
     * 감시를 수행하는 주체들은 자신들에게 부여된 권한을 초과해서는 안 되며, 인간 존엄성과 자유를 지키는 것이 정의롭고 인간적인 사회의 핵심 기반임

   94.

     * ""인간 존엄성에 대한 근본적인 존중은 우리가 한 사람을 단순한 데이터의 집합으로 취급하는 것을 거부해야 함을 요구함""
     * 이는 특히 AI가 특정 개인이나 집단을 그들의 행동, 특성, 과거 이력에 따라 평가하는 ""사회적 신용 점수(Social Scoring)"" 시스템에 적용됨
     * ""사회적·경제적 의사 결정에서, 개인의 과거 행적을 바탕으로 알고리즘이 평가를 내리는 방식에 신중해야 함""
     * 이러한 데이터는 종종 사회적 편견과 선입견에 의해 왜곡될 가능성이 큼
     * 인간은 변하고 성장하며 사회에 기여할 기회를 가져야 하며, 알고리즘이 인간 존엄성을 제한하거나, 자비·용서·희망을 배제해서는 안 됨

  AI와 우리의 공동 집 보호 (AI and the Protection of Our Common Home)

   95.

     * AI는 기후 예측 모델을 개발하고, 재난 대응 전략을 수립하며, 에너지 사용을 최적화하고, 공중 보건 비상사태에 대한 조기 경보 시스템을 제공하는 등 지구 환경을 보호하는 데 유망한 가능성을 지님
     * 이러한 기술적 발전은 기후 변화에 대한 회복력을 강화하고 지속 가능한 발전을 촉진하는 데 기여할 수 있음

   96.

     * 그러나 현재의 AI 모델과 이를 지원하는 하드웨어는 막대한 에너지와 수자원을 소비하며, 상당한 CO2 배출을 초래함
     * 이러한 현실은 ""클라우드(The Cloud)""라는 용어로 인해 대중의 인식에서 왜곡될 위험이 있음
     * ""클라우드""는 실제로는 물리적 기계, 네트워크 케이블, 방대한 에너지를 필요로 하는 시스템이며, AI 기술도 마찬가지로 물리적 자원을 기반으로 운영됨
     * 특히, 대형 언어 모델(LLM)의 경우, 더 많은 데이터를 필요로 하고, 연산 능력을 증가시키며, 대규모 저장 인프라를 요구함
     * 따라서 AI 기술이 환경에 미치는 영향을 고려하고, 이를 최소화할 수 있는 지속 가능한 해결책을 개발하는 것이 필수적임

   97.

     * 교황 프란치스코는 ""우리는 해결책을 단순히 기술에서 찾는 것이 아니라, 인간성의 변화에서 찾아야 함""이라고 강조함
     * 창조에 대한 올바른 이해는 모든 피조물의 가치를 단순한 유용성의 관점으로 축소할 수 없음을 인식하는 데 있음
     * 따라서 지속 가능한 환경 보호는 기술관료적 패러다임이 주도하는 자원 착취 방식에서 벗어나야 함
     * ""기술이 모든 생태학적 문제를 해결해 줄 것이라는 신화에서 벗어나, 윤리적 고려와 근본적인 변화가 필요함을 인정해야 함""
     * 진정한 해결책은 창조 질서를 존중하고, 인간과 자연의 조화로운 관계를 증진하는 총체적 접근 방식을 채택하는 데 있음

  AI와 전쟁 (AI and Warfare)

   98.

     * 제2차 바티칸 공의회와 역대 교황들의 가르침은 평화가 단순히 전쟁이 없는 상태나 힘의 균형을 유지하는 것에 국한되지 않음을 강조함
     * 성 아우구스티누스는 평화를 ""질서의 고요함""이라고 정의했으며, 이는 단순한 무력 충돌 방지로는 달성될 수 없음
     * 평화는 인간의 권리를 보호하고, 자유로운 소통을 보장하며, 인간과 민족의 존엄성을 존중하고, 형제애를 실천하는 과정 속에서만 이루어질 수 있음
     * 따라서 평화를 유지하는 도구는 결코 불의, 폭력, 억압을 정당화하는 방식으로 사용되어서는 안 되며, 항상 ""타인과 민족을 존중하고 형제애를 실천하는 확고한 결단""에 의해 통제되어야 함

   99.

     * AI의 분석 능력은 국가들이 평화를 추구하고 안보를 보장하는 데 도움이 될 수 있지만, ""AI의 무기화""는 심각한 윤리적 문제를 초래함
     * 교황 프란치스코는 ""원격 조종 시스템을 통한 군사 작전 수행이 무기의 파괴력과 그 사용에 따른 책임감을 약화시키며, 전쟁의 비극에 대한 감각을 더욱 차갑고 무관심하게 만든다""고 지적함
     * 자율 무기의 사용 용이성은 정당방위의 최후 수단으로서 전쟁을 제한해야 한다는 원칙과 충돌하며, 인간의 통제를 벗어난 무기 경쟁을 촉진할 위험이 있음
     * 이는 결국 인간의 기본권을 심각하게 위협하는 결과를 초래할 가능성이 큼

   100.

     * 특히, 인간의 직접적인 개입 없이 목표물을 식별하고 공격할 수 있는 치명적 자율 무기 시스템(Lethal Autonomous Weapon Systems, LAWS)은 ""심각한 윤리적 우려""를 야기함
     * 이러한 무기는 ""도덕적 판단과 윤리적 결정을 내릴 수 있는 인간의 고유한 능력을 결여""하고 있기 때문임
     * 따라서 교황 프란치스코는 이러한 무기의 개발을 재고하고, 사용을 금지하는 방향으로 나아갈 것을 강력히 촉구함
     * 그는 ""보다 효과적이고 구체적인 노력을 통해 인간이 무기에 대한 적절한 통제권을 갖도록 해야 하며, 어떤 기계도 인간의 생명을 빼앗는 결정을 내려서는 안 된다""고 강조함

   101.

     * 자율적으로 표적을 제거하는 무기에서 대규모 파괴가 가능한 무기로 발전하는 것은 그리 먼 일이 아니며, 일부 AI 연구자들은 이러한 기술이 ""실존적 위험""을 초래할 가능성이 있다고 경고함
     * AI 기반 무기가 통제 불가능한 상태로 발전할 경우, 특정 지역뿐만 아니라 인류 전체의 생존을 위협할 수도 있음
     * 이는 역사적으로 전쟁이 ""대량의 무고한 민간인을 무차별적으로 희생시키는 통제 불가능한 파괴력을 가지게 되었다""는 오랜 우려를 반영함
     * ""전쟁에 대한 평가를 완전히 새로운 시각에서 재검토해야 한다""는 사목헌장(Gaudium et Spes)의 요청은 오늘날 더욱 절실함

   102.

     * AI의 이론적 위험이 중요한 문제이지만, 보다 즉각적이고 시급한 문제는 악의를 가진 개인이나 집단이 이를 어떻게 악용할 수 있는가 하는 점임
     * AI는 단순한 도구이며, 그 활용 방식은 전적으로 인간의 의도에 달려 있음
     * AI의 미래 능력을 정확히 예측할 수는 없지만, 인류가 역사적으로 저지른 잔혹한 행위들을 고려할 때, AI의 남용 가능성에 대한 우려는 충분한 근거가 있음

   103.

     * 성 요한 바오로 2세는 ""인류는 이제까지 경험하지 못한 강력한 도구를 손에 쥐고 있다. 우리는 이 세상을 정원으로 만들 수도 있고, 폐허로 만들 수도 있다""고 경고함
     * 교황 프란치스코는 ""우리는 우리의 지성을 긍정적인 방향으로 사용할 자유가 있지만, 타락과 상호 파괴의 길로 갈 수도 있다""고 강조함
     * 따라서 인류가 자기 파괴의 길로 빠지지 않도록, 인간의 생명과 존엄성을 본질적으로 위협하는 모든 기술적 응용을 거부해야 함
     * AI의 군사적 활용에 대한 신중한 분별과 윤리적 검토가 필수적이며, AI가 항상 인간 존엄성을 존중하고 공동선을 위한 도구로 사용될 수 있도록 철저한 감시가 이루어져야 함
     * AI 기반 무기의 개발과 배치는 가장 높은 수준의 윤리적 검토를 거쳐야 하며, 인간 생명의 존엄성과 신성함을 지키는 것을 최우선 과제로 삼아야 함

  AI와 우리의 신앙적 관계 (AI and Our Relationship with God)

   104.

     * 기술은 세상의 자원을 관리하고 발전시키는 데 놀라운 도구가 될 수 있음
     * 그러나 일부 경우, 인간은 점점 더 이러한 자원의 통제권을 기계에 넘기고 있음
     * 일부 과학자와 미래학자들은 인공지능이 인간 지능을 능가하는 인공지능(AGI, Artificial General Intelligence)의 가능성에 대해 낙관적인 기대를 가짐
     * 일부는 AGI가 초인간적 능력을 가지게 될 것이라고 추측하며, 이는 상상할 수 없는 발전을 가져올 것으로 기대됨
     * 동시에, 사회가 점점 더 초월적인 존재와의 관계에서 멀어질수록, 일부 사람들은 의미와 충만함을 찾기 위해 AI에 의존하려는 유혹을 받게 됨
     * 그러나 이러한 갈망은 오직 하나님과의 친교 안에서만 온전히 충족될 수 있음

   105.

     * 인간이 만든 인공물을 하나님과 대체하려는 시도는 우상 숭배이며, 이는 성경에서 명확히 경고하는 행위임(출애굽기 20:4; 32:1-5; 34:17)
     * AI는 전통적인 우상보다 더욱 매혹적인 유혹이 될 수 있음
     * 시편 115편은 우상이 ""입이 있어도 말하지 못하고, 눈이 있어도 보지 못하며, 귀가 있어도 듣지 못한다""고 경고하지만, AI는 ""말하는 듯한"" 환상을 제공할 수 있음(요한계시록 13:15 참조)
     * 그러나 AI는 인간이 만든 단순한 도구에 불과하며, 인간의 지적 창작물로서 인간의 데이터를 학습하고 인간의 입력에 반응하며, 인간의 노력으로 유지되는 시스템임
     * AI는 인간 삶의 본질적인 능력을 가질 수 없으며, 오류 가능성도 존재함
     * 만약 인류가 AI를 더 높은 존재로 여기고 이를 의존하게 된다면, 이는 결국 하나님을 대체하려는 시도이며, 결과적으로 인간 스스로가 자기 창조물의 노예가 될 위험이 있음

   106.

     * AI는 인간에게 봉사하고 공동선을 증진하는 도구로 사용될 가능성이 있지만, 어디까지나 인간이 만든 창조물이라는 점을 잊어서는 안 됨
     * 사도행전 17:29는 인간이 만든 것은 ""인간의 기술과 창의성의 흔적을 지닌 것일 뿐""이라고 밝힘
     * 지혜서 15:16-17 또한 ""인간이 신을 만들 수 없으며, 사람이 만든 것은 결국 죽은 것에 불과하다""고 경고함
     * 인간은 생명을 가졌지만, 인간이 만든 AI는 생명을 가지지 못하며, 따라서 신적인 존재로 간주될 수 없음

   107.

     * 반면, 인간은 ""자신의 내면을 통해 물질 세계 전체를 초월하는 존재""이며, 이는 하나님께서 인간의 마음속에서 기다리고 계시는 곳에서 경험됨
     * 교황 프란치스코는 ""자기 인식과 타인을 향한 개방성, 자신의 독창성과 타인을 위해 자신을 내어 주려는 태도 사이에는 신비로운 연결이 있다""고 강조함
     * 따라서 인간의 마음만이 ""우리의 모든 능력과 감정을 정돈하고, 온전한 존재로서 하나님 앞에 경외와 사랑의 순종을 드릴 수 있음""
     * 하나님은 우리 각자를 ""너(Thou)""라고 부르시며, 영원히 우리를 인격적으로 대하시는 분임

VI. 결론적 고찰

   108.

     * 기술 발전이 가져오는 다양한 도전 과제를 고려할 때, 교황 프란치스코는 ""인간의 책임감, 가치관, 양심""이 기술의 잠재력 증가에 비례하여 성장해야 한다고 강조함
     * ""인간의 능력이 증가할수록, 개인과 공동체의 책임도 더욱 확대됨""

   109.

     * 동시에, ""근본적이고 본질적인 질문""이 남아 있음
     * ""이러한 기술적 발전 속에서 인간은 과연 더 나은 존재가 되고 있는가? 즉, 더 성숙한 영성을 가지며, 인간 존엄성에 대한 인식이 깊어지고, 더욱 책임감 있고, 특히 가장 가난하고 약한 이들을 향해 더 개방적이며, 기꺼이 베풀고 도울 준비가 되어 있는가?""

   110.

     * 따라서 AI의 개별적 활용이 인간 존엄성, 인간 소명, 공동선을 증진하는지 평가하는 것이 필수적임
     * 많은 기술과 마찬가지로, AI의 다양한 용도가 미치는 영향은 초기에는 예측하기 어려울 수 있음
     * AI가 사회에 미치는 영향이 점차 명확해짐에 따라, 이에 대한 적절한 대응이 모든 사회적 수준에서 이루어져야 함
     * 보조성의 원칙에 따라, 개인 사용자, 가족, 시민사회, 기업, 기관, 정부, 국제기구가 각자의 역할을 수행하며 AI가 모든 사람의 선을 위해 사용되도록 해야 함

   111.

     * 오늘날 공동선을 위한 중요한 도전이자 기회는 AI를 관계적 지능의 틀 안에서 고려하는 것임
     * 이는 개인과 공동체의 상호 연결성을 강조하며, 타인의 전인적 복지를 증진할 공동 책임을 상기시킴
     * 20세기 철학자 니콜라이 베르댜예프(Nicholas Berdyaev)는 사람들이 종종 기계에 사회적 문제의 책임을 돌리지만, ""이는 인간을 비하하는 것이며, 그의 존엄성에 부합하지 않는다""고 지적함
     * 그는 ""기계에 책임을 전가하는 것은 부당한 일""이며, 도덕적 책임을 질 수 있는 존재는 오직 인간뿐이라고 강조함
     * 따라서 기술 사회가 직면한 도전 과제들은 궁극적으로 영적 문제이며, ""이를 해결하기 위해서는 영성의 강화가 필수적""

   112.

     * AI의 등장과 함께, 인간 존재의 본질적 가치를 새롭게 인식하는 것이 더욱 중요해짐
     * 프랑스 가톨릭 작가 조르주 베르나노스(Georges Bernanos)는 ""위험은 기계의 증가 자체가 아니라, 어릴 때부터 기계가 제공할 수 있는 것만을 갈망하도록 길러진 인간의 증가에 있다""고 경고함
     * 오늘날의 빠른 디지털화 속에서, 우리는 ""디지털 환원주의""의 위험에 직면해 있음
     * 즉, 수량화할 수 없는 삶의 측면들이 점점 더 배제되고, 결국에는 무의미하거나 중요하지 않은 것으로 간주될 수 있음
     * AI는 인간 지능을 보완하는 도구로 사용되어야 하며, 인간 지능의 풍부함을 대체하는 방식으로 활용되어서는 안 됨
     * 인간 존재의 본질적 요소들은 계산할 수 없는 것이며, 이를 지속적으로 함양하는 것이 중요함
     * 이는 ""우리의 기술 문화 속에서 마치 닫힌 문 아래로 부드럽게 스며드는 안개처럼 거의 눈에 띄지 않게 존재하는 '진정한 인간성'""을 보존하기 위함임

  참된 지혜

   113.

     * 오늘날 우리는 과거 세대가 경이롭게 여겼을 만큼 방대한 지식을 쉽게 접근할 수 있는 시대에 살고 있음
     * 그러나 지식의 발전이 인간적으로나 영적으로 결실을 맺기 위해서는 단순한 데이터 축적을 넘어, 참된 지혜를 추구해야 함

   114.

     * 이 지혜는 AI가 제기하는 심오한 질문과 윤리적 도전에 대응하는 데 있어 인류가 가장 필요로 하는 선물임
     * ""오직 영적인 방식으로 현실을 바라볼 때, 오직 마음의 지혜를 회복할 때, 우리는 시대의 새로움을 해석하고 대응할 수 있음""
     * 이러한 ""마음의 지혜""는 ""전체와 부분, 우리의 결정과 그 결과를 통합하는 덕목""
     * ""이 지혜는 기계에서 얻을 수 있는 것이 아니라, 이를 찾는 사람에게 발견되고, 이를 사랑하는 사람에게 드러나며, 이를 열망하는 사람을 먼저 찾아가고, 그에 합당한 이를 찾음""(지혜서 6:12-16 참조)

   115.

     * AI가 발전하는 시대 속에서 우리는 성령의 은총을 필요로 함
     * 성령은 ""우리에게 하나님의 눈으로 사물을 바라보게 하며, 사물과 사건 사이의 연결을 이해하고, 그 진정한 의미를 깨닫게 함""

   116.

     * ""인간의 완성은 그가 가진 정보나 지식의 양이 아니라, 사랑의 깊이에 의해 측정됨""
     * 따라서 우리가 AI를 활용하는 방식—즉, ""가장 작은 형제들, 취약한 이들, 그리고 가장 도움이 필요한 사람들을 포함하는 방식""—이야말로 우리의 인간성을 평가하는 진정한 척도가 될 것임
     * ""마음의 지혜""는 AI를 인간 중심적으로 사용하도록 이끌며,
          + 공동선을 증진하고,
          + 우리의 ‘공동 집’(환경)을 돌보며,
          + 진리 탐구를 촉진하고,
          + 인간 발전을 도모하며,
          + 인간 연대와 형제애를 강화하고,
          + 궁극적으로 인간을 행복과 하나님과의 완전한 친교로 이끄는 역할을 할 수 있음

   117.

     * 이러한 지혜의 관점에서, 신앙인들은 AI를 사용하여 인간과 사회에 대한 올바른 비전을 증진하는 도덕적 주체가 될 수 있음
     * 기술 발전은 하나님의 창조 계획의 일부이며, 이는 우리가 예수 그리스도의 파스카 신비 안에서 참되고 선한 것을 끊임없이 추구하도록 부름받은 활동임

교황 프란치스코 승인

     * 2025년 1월 14일, 신앙교리성 및 문화교육성 장관 및 차관들에게 하사된 알현에서 본 문서를 승인하고 공표를 명령함
     * 2025년 1월 28일, 교회의 박사 성 토마스 아퀴나스의 전례 기념일에 로마 신앙교리성과 문화교육성에서 공표됨
     * 작성
          + 비크토르 마누엘 추기경 페르난데스 (신앙교리성 장관)
          + 호세 톨렌티노 드 멘돈사 추기경 (문화교육성 장관)
          + 몬시뇰 아르만도 마테오 (신앙교리성 교리 담당 차관)
          + 폴 타이그 대주교 (문화교육성 문화 담당 차관)
     * 2025년 1월 14일 교황 프란치스코의 알현을 통해 승인됨 (Ex audientia die 14 ianuarii 2025, Franciscus)

   종교계에 이런 논의가 존재한다는 것만으로도 아주 신선하고 긍정적이라 생각됩니다만...

   요약만 봐서는
   “AI는 인간이 행하는 논리적 추론이 아닌 단순 통계적 추론 기계일 뿐인 인간의 산물일 뿐이며, AI의 개발으로 신의 영역을 넘보았다 기고만장하지 말고, 또 추후로도 신의 영역을 넘보지 말지어다.” 를 장황하게 쓴 것 같아요.

   시간을 좀 내서 원문을 읽어봐야겠네요.

   ""오늘날의 AI 시스템, 특히 머신러닝 기반 AI는 논리적 추론보다 통계적 추론에 의존함""...

   종교중에선 천주교가 확실히 클라스가 있네요. 이런거 연구하는 과학자들도 내부에 있겠죠?

   LLM 진짜 최고의 요약 머신이군요.

   너무 시의 적절하고 좋은 글이네요. 종교인이 아닌데 읽으면서 많은 깨달음을 얻고 갑니다.

   본문이 너무 길어서 GN에 댓글 섹션으로 가기 링크가 필요하다고 생각합니다

        Hacker News 의견

     * AI 윤리에 대한 깊이 있는 연구와 교황청의 다양한 논의를 바탕으로 한 글이 인상적임
          + 미국의 AI 프로젝트와 관련된 비판적인 시각을 제시하며, AI 윤리에 대한 깊이 있는 연구를 칭찬함
          + AI와 인간 지능의 차이를 강조하며, 인간 지능이 관계 속에서 발휘된다는 점을 중요하게 여김
     * AI와 인간 지능의 차이를 강조하며, 인간 지능이 관계 속에서 발휘된다는 점을 중요하게 여김
          + AI의 '지능'이라는 용어 사용이 오해를 불러일으킬 수 있다는 점을 지적함
          + 인간 지능은 관계 속에서 발휘되며, 대화와 협력을 통해 완전한 표현을 찾는다고 설명함
     * 다양한 관점에서의 도덕적 탐구가 공통된 인간 경험을 바탕으로 합의에 이를 수 있음을 보여줌
          + 가톨릭 교회의 형이상학적 접근이 다소 비현실적이라고 생각하지만, 글에서 제시된 논의와 결론이 깊이 있다고 평가함
     * AI가 인간의 창조물임을 상기시키며, AI를 신으로 대체하는 것은 우상숭배라고 경고함
          + AI는 인간의 창조물로서 인간의 입력에 반응하며, 인간의 노동을 통해 유지된다는 점을 강조함
     * 기술과 종교의 역사적 연관성을 언급하며, 정보의 두 번째 '개혁'이 진행 중이라고 주장함
          + 인쇄기가 종교 개혁에 미친 영향을 예로 들며, 인터넷이 정보의 두 번째 개혁을 이끌고 있다고 설명함
     * AI와 인간 지능의 차이를 논의하며, AI가 물리적 경험을 통해 배우는 것이 인간과 다르다고 주장함
          + AI는 논리적-수학적 틀에 갇혀 있으며, 인간 지능은 육체적 경험을 통해 유기적으로 발전한다고 설명함
     * AI의 발전이 빠르게 진행되고 있으며, 철학적-신학적 관점에서 더 깊이 있는 논의가 필요하다고 주장함
          + Boston Dynamics의 로봇이 새로운 환경에서 학습하는 예를 들며, AI의 발전 가능성을 언급함
     * AI가 영혼을 가질 수 있는지에 대한 철학적 질문을 제기함
          + ""The Measure of a Man"" 에피소드를 예로 들며, AI가 영혼을 가질 수 있는지에 대한 논의를 촉구함
     * 과학과 기술을 통해 신이 영광을 받는다는 점을 강조함
          + 과학과 종교가 서로 배타적일 필요가 없음을 주장하며, 이 점이 더 강조되어야 한다고 설명함

   GPT를 통한 정리이긴 한데 이것도 너무 길어서 종교적인 단어들 빼고 다시 요약시켜보니 이렇게 해주네요.

I. 서론

     * 빠른 과학기술 발전과 AI 등장으로 인한 기회와 도전에 대한 논의 필요성임
     * AI가 언어, 예술, 진단 등의 영역에서 인간의 능력을 넘어서거나 유사하게 모방할 수 있다는 점이 핵심적 이슈임
     * 이러한 변화 속에서 AI의 활용과 통제가 인간의 미래에 큰 영향을 미치게 됨

II. 인공지능이란 무엇인가?

     * 1956년경 “인공지능”이라는 용어가 제안되며, 기계가 인간처럼 지적 행동을 할 수 있는지 연구하게 됨
     * 초기 AI는 논리 연산과 추론 중심이었다면, 현재는 통계 추론과 머신 러닝으로 발전함
     * “좁은 AI” 시스템은 특정 작업(번역, 이미지 분류 등)에 특화됨
     * “범용 인공지능(AGI)”이나 ‘초지능’에 대한 가능성이 제기되고 있으나, 실제 달성 여부는 의견 분분함
     * 인간 지능과 동일한 의미로 AI 지능을 정의하기에는 기능적 차이가 큼

III. 철학적·신학적 전통에서의 지능

     * AI는 대규모 데이터와 계산 논리에 기반해 결과물을 생산함
     * 인간 지능은 다양한 체험, 몸을 통한 경험, 감정, 관계 등 종합적 요소가 결합되어 형성됨
     * AI는 특정 과업을 수행하는 데 탁월할 수 있으나, 실존적·도덕적 판단이나 전인적 이해는 어려움
     * AI와 인간 지능을 혼동하면 기능주의적 사고로 이어질 위험이 있음

IV. AI 개발과 활용을 이끄는 윤리의 역할

     * 모든 과학기술 활동은 가치중립적이지 않으며, 결국 인간의 선택과 목적에 따라 달라짐
     * AI가 선하게 쓰일 수도 있고, 악의적으로 쓰일 수도 있음
     * AI 개발, 소유, 사용에 관여하는 모든 주체가 사회적 책임과 윤리적 판단을 수행해야 함
     * 인간이 직접적으로 의도를 설정하고 책임을 지지 않으면, AI가 의도치 않은 결과를 초래할 수 있음

V. 특정한 질문들

  사회적 영향

     * AI가 경제, 교육, 예술 등 다양한 분야에서 편익을 제공할 수 있음
     * 동시에 디지털 격차, 소수 기업에 의한 독점, 취약 계층 소외 등 위험이 존재함
     * 공공 영역에서 활용 시 사회적 신뢰와 투명성, 책임 소재 규명이 중요함

  인간관계와 소통

     * AI가 커뮤니케이션을 용이하게 할 수 있으나, 사람 간 직접적 만남과 상호작용을 약화시킬 수 있음
     * 인간은 감정·경험을 종합해 공감과 관계를 형성하지만, AI는 이를 실제로 체험하지 못함
     * 인간관계가 기계적 상호작용으로 대체될 경우 고립감이 심화될 위험이 있음
     * AI가 자연어 처리나 영상 생성 기능으로 인간을 흉내 내는 경우, 사회적 혼란과 신뢰 저하가 우려됨

  경제와 노동

     * AI가 효율적 업무 진행과 새로운 일자리를 창출할 가능성이 있음
     * 반면 사람을 대체해 실직을 유발하거나, 소수만 이익을 독점할 위험성도 존재함
     * 노동이 단순 기능으로 전락하지 않도록, 인간적 가치와 존엄을 보장하는 제도적 장치가 필요함

  의료 분야

     * AI가 질병 진단, 맞춤 치료 등 의료 효율을 높이고 접근성을 개선하는 데 기여할 수 있음
     * 그러나 인간적 돌봄이 부족해지고, 치료 우선순위를 경제 논리에만 맡길 경우 윤리적 문제가 생길 수 있음
     * 환자에 대한 최종 결정권과 책임은 인간이 가져야 함

  교육 환경

     * AI가 맞춤형 학습, 피드백 제공 등 교육을 보완할 수 있음
     * 학생들의 비판적 사고와 창의력을 저해하지 않도록 주의해야 함
     * 과도한 의존으로 학습자가 자발적 탐구 능력을 잃을 수 있음
     * AI 시스템이 생성한 정보가 편향되거나 오류일 수 있으므로, 사실 검증과 투명성이 중요함

  허위정보, 딥페이크, 남용

     * AI가 사실과 유사한 가짜 콘텐츠(텍스트, 이미지, 영상 등)를 쉽게 만들어낼 수 있음
     * 딥페이크 등으로 인한 사생활 침해, 명예 훼손, 사회 혼란 우려가 커짐
     * 정보 검증, 오남용 방지 규제, 사용자 윤리의식 강화가 필수적임

  프라이버시와 감시 문제

     * AI로 수집·분석되는 데이터가 사람에 대한 광범위한 정보력을 형성함
     * 일상생활 감시와 과도한 개인 정보 축적은 자유와 권리를 침해할 위험이 있음
     * 투명성과 명확한 책임 분배가 중요하며, 데이터가 사람을 평가·제한하는 도구로 쓰여서는 안 됨

  환경 문제

     * AI 대규모 모델과 데이터 센터 운영에 따른 막대한 에너지·자원 소비가 환경 부담으로 작용함
     * AI가 기후 예측, 자원 효율화를 돕는 등 긍정적 역할을 할 수도 있으나, 자체적인 높은 에너지 소모 문제를 해결해야 함
     * 단순 기술 발전만으로 환경 문제가 해결되지 않으며, 지속 가능한 개발 방향이 요구됨

  무기화

     * AI가 무기에 활용되면, 전쟁에서 자율화·자동화가 심해질 위험이 있음
     * 무력 충돌이 더 쉽게 일어나거나, 대규모 파괴를 초래할 수 있음
     * 자율무기 시스템의 오작동 혹은 오남용은 인류 안전에 치명적 위협이 됨

VI. 결론적 고찰

     * AI가 빠르게 발전함에 따라, 이에 상응하는 책임 의식과 윤리적 성찰이 필요함
     * AI의 잠재적 긍정 효과와 위험을 면밀히 분석하고, 사회 전반에서 합의된 원칙을 마련해야 함
     * AI가 인간 존엄, 공동선, 사회적·환경적 가치에 부합하도록 규제와 정책을 마련할 필요성이 높음
     * 인간이 최종적 결정권과 책임을 지고, AI를 도구로 활용하며, 기술적·사회적 제도 시스템이 함께 발전해야 함

   한국어판 번역으로 책이 출간되었네요.

   https://product.kyobobook.co.kr/detail/S000215621776
"
"https://news.hada.io/topic?id=19034","나이 들어가는 프로그래머 - [발표영상] 요약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       나이 들어가는 프로그래머 - [발표영상] 요약

     ""계속 프로그래밍을 해도 될까? 그래도 괜찮을까? 평생 프로그래밍을 할 수 있을까?""

     * 발표자 Kate Gregory는 1979년부터 개발을 시작한 40+년 경력의 개발자 (63세)
     * Microsoft의 C++ 컴파일러가 나오기전 부터 C++을 사용했고, Visual C++ MVP 이며 유명 C++ 컨퍼런스에서 자주 연사로 등장함
     * 국내에는 ""아름다운 C++"" 책이 번역 출간된 바 있음
     * NDC TechTown 2024에서 발표한 ""The Aging Programmer"" 영상의 스크립트 요약

Intro

     * 나이는 모두에게 영향을 미치며, 1초마다 조금씩 나이를 먹음
     * 다들 나이가 들어도 프로그래밍을 지속할 수 있을지, 신체적·정신적 문제로 인해 중단해야 할지에 대한 고민이 있음
          + ""계속 프로그래밍을 해도 될까? 그래도 괜찮을까? 평생 프로그래밍을 할 수 있을까?""
          + ""아니면 내가 하고 싶은 일인데도, 내 몸이나 마음이 그렇게 하지 못하게 할까?""
     * 오늘 나눌 내용은 직접 경험하거나, 연구하고, 다른 개발자들과 나눈 대화에서 얻은 통찰을 바탕으로 함
     * 하지만 이 조언이 모든 사람에게 적용될 것이라고 보장할 수는 없음
     * 나이가 들면 ""더 이상 프로그래밍을 할 수 없다""는 이야기를 듣고 중단하는 경우가 많음
     * 이는 생존자 편향(survivor bias)으로 이어질 수 있음. 떠난 사람들의 실패 이유는 알 수 없기 때문에, 남아 있는 사람들만으로 일반화된 결론을 내리기 쉬움

내 경험만 정리한 것은 아님

     * 나의 경험뿐 아니라 설문조사와 다양한 연구를 통해 얻은 데이터를 바탕으로 내용을 전달함
     * 논문, 기사, 책 등을 탐독하고, 나이가 들어도 프로그래밍을 지속하는 사람들과 중간에 떠난 사람들 모두와 대화하며 통찰을 얻음
     * 어찌 되었건, 이 조언이 당신에게 맞지 않을 수 있으므로 알아서 판단할 것
     * 나이가 들어가며 얻게 되는 긍정적인 점 중 하나는 바로 더 나은 판단력을 가지게 된다는 것

나이와 프로그래밍

     * 내 어머니는 기술 커리어에서 은퇴한 88세이고, 나는 현재 63살임
     * 여러분 중에는 지금 88살도 아니고 63살도 아니니까, ‘이 이야기가 나하고 무슨 상관이야?’ 라고 생각할 수도 있음
     * 하지만, 내가 오늘 강조하고 싶은 것은 ""20대·30대·40대·50대에 할 수 있는 여러 가지 실천들""
     * 이런 것들이 쌓여야, 나중에 60대·70대·80대에 ‘아무것도 안 하고 편히 쉬겠다’든지 혹은 ‘계속 프로그래밍을 하겠다’든지, 원하는 삶을 살 수 있게 됨
     * ""자신이 즐기는 일을 하면서 행복하게 지내는 것"" 그게 목표임
     * 하지만 이런 일은 저절로 이루어지지 않으니, 미리 ""대비하고 그것을 위해 노력해야 함""

     “If you’re not getting older, you’re dead.” – Tom Petty
     당신이 나이가 들지 않는다면, 당신은 이미 죽은 것이다

우리 모두가 나이든 프로그래머가 될 수는 없음

     * 어떤 사람들은 그냥 죽기도 하고, 아마도 당신은 그것을 막고 싶을 것
     * 내가 사람이 죽는다는 걸 실감하는 이유는, 그런 전화를 자주 받기 때문
          + ""우리 C++ 코드를 이해하는 유일한 사람이 사망했어요""
          + 물론 여러분도 회사에서 죽고 싶지는 않을 것
     * 조금 더 오래 사는 방법에 대해서도 간단히 이야기해볼 생각이지만, 어쨌든 우리 모두가 끝까지 프로그래밍을 계속할 수 있는 건 아니라는 점은 분명함
     * 많은 사람들이 프로그래머로 일하지 않거나, 관리직으로 이동하거나, 완전히 다른 산업으로 전환하는 경우가 있음
          + 몇몇은 업계를 떠나 트럭 운전사 같은 일을 하거나, 퇴직을 선택 또는 강요받음
          + 자신의 선택에 따라 적절한 계획과 계산 후 은퇴하는 것은 긍정적임
               o 캐나다에서 55세에 은퇴를 준비할 수 있도록 투자 계획을 강조한 ""Freedom 55"" 프로그램이 있었음
          + 55세든 85세든 자신의 선택으로 은퇴하는 것은 좋음
     * 그러나 강제로 퇴직하거나, 법적 조치가 어렵도록 최소한의 퇴직금을 받고 일자리를 찾지 못하는 경우는 자발적 은퇴가 아님
     * 일부는 업종 전환을 하기도 함. 그건 항상 나쁜 것은 아님
          + 나이 든 프로그래머가 아닌 나이 든 제빵사, 트럭 운전사, 또는 로데오 광대 같은 새로운 일을 선택할 수도 있음
          + 이러한 선택은 멋진 일임
     * 하지만 본인의 의지와 상관없이 강제 퇴직을 당하는 것은 슬픈 일임

신체적 우려에 대한 설문조사 결과

     * 설문조사를 통해 신체와 정신 건강에 대한 우려를 조사해 봤음
          + ""몸에서 가장 걱정되는 부분은 무엇인가?"", ""정신적으로 걱정되는 점은 무엇인가?""
     * 신체 건강에서는 응답자의 4분의 3이 시력 문제를 가장 큰 신체적 우려로 꼽음
          + 손목 터널 증후군이나 손목 통증과 같은 기존의 프로그래머 관련 고정관념과 달리, 시력이 1순위로 꼽힘
          + 그 외 일반적인 신체 통증이나 뻣뻣해짐, 스태미너, 이동 문제, 계단 오르내리기 어려움 등도 언급됨
     * 정신 건강에서는 동기 부족, 냉소적 태도, 무관심에 대한 걱정이 두드러졌고, 정신적 문제를 극복하는 방법에 대해 큰 관심을 보임
          + 예를 들어, 동기 회복 방법, 일에 대한 관심을 되찾는 방법 등

신체 건강에 대한 문제

     * 신체 문제라 생각하지만, 진짜 신체 문제가 아닐때도 있음
          + 실제로는 보조 기구로 해결 가능한 경우
          + 이동 보조 기구(지팡이, 보조기구 등)를 사용하면 이동 능력을 향상시키고 일상생활을 돕는 역할을 함
     * 하지만 보조 기구를 사용하면 사람들이 나를 바보처럼 대하는 경우가 있음
          + 직장에서 의견을 무시당하거나, 카페에서 직접 주문을 받지 않고 동반자에게 대신 묻는 상황이 발생함
          + 보조 기구 사용은 단지 몸의 기능 문제를 보완하는 것일 뿐, 지적 능력과는 무관함
          + 그러나 보조 기구를 사용하는 즉시, 타인에게 ""몸의 문제 = 정신의 문제""라는 잘못된 인식을 주는 경우가 있음
     * 보조 기구 사용으로 차별받는 환경은 개인의 문제라기보다는 사회나 직장의 문제일 가능성이 큼
          + 예를 들어, 특정 날 보조기를 착용했을 때 직장에서 의견이 무시된다면, 이는 보조기의 문제가 아닌 해당 일하는 곳의 문제임
     * 겨울에는 해가 빨리 지며, 어두운 환경에서 운전해야 하는 상황이 발생
          + 시력 문제로 야간 운전이 어려워질 경우, 근무 시간 조정이 필요할 수 있음
          + 그러나 이는 단순한 시력 문제가 아니라, 운전 외에 출퇴근 방법이 없거나 재택근무가 불가능한 환경적 문제로 볼 수 있음
     * 일부 사무실은 20대 CEO가 설계한 것처럼 비현실적인 구조를 가짐
          + 예: 회의실, 사무실, 화장실, 커피 공간이 서로 다른 층에 위치
          + 커피를 마시거나 화장실에 가려면 여러 층을 오르내려야 하는 비효율적 구조
          + 이는 신체적으로 이동이 어려운 사람들에게 큰 부담이 됨
          + 사무실에서 층간 이동이 많은 경우, 무릎, 발목, 심혈관 문제로 인해 신체적으로 어려움을 겪는 직원이 있을 수 있음
          + 이는 개인의 신체적 한계가 아니라 비효율적으로 설계된 환경의 문제임
          + 문제는 단순히 직원이 나이에 적합하지 않아서 발생하는 것이 아니라, 해당 직장이 나이에 따라 접근성이 부족해서 발생하는 경우가 많음
          + 따라서, ""몸에 더 힘들어진다""는 것이 반드시 개인의 부적합함을 의미하지 않음
     * 종종 사람들이 만들고 설계한 환경이 모든 사람에게 적합하도록 충분히 고려되지 않았을 수 있음
          + 이 일(work)에 대해서 나이가 너무 많은걸까? 아니면 이 Workplace에 대해서만 그런걸까 ?
          + 개인의 문제라기보다는 환경이나 설계의 문제일 가능성이 있음

시력 건강

     * 시력 상태를 파악하기 위한 기본 검사가 필요하고, 나이에 따라 시력 검사의 빈도는 달라져야 함
          + 기존에 시력 문제가 있는 경우 더 자주 검사를 받아야 함
     * 나이가 들면 노안(presbyopia) 이 되는 것은 정상적임
          + 젊었을 때 원거리 시력이 좋았던 사람도 시간이 지나면 근시 교정이 필요할 수 있음
          + 노안은 ""presby""라는 단어에서 유래하며, 이는 ""노인""을 의미함
     * 처방전 없이 약국, 슈퍼마켓 등에서 저렴한 독서용 안경을 구입 가능
     * 가까운 선반에서 비타민 병 등 작은 글자가 있는 물건을 골라 안경을 시도해 읽기 쉬운 것을 선택
     * 비용이 적게 들며 처방전이나 특별한 허가가 필요하지 않음
     * 특정 작업에 적합한 안경을 선택하는 것이 중요함
          + 예를 들어, 화면 작업이나 레스토랑 메뉴, 비타민 병 뒷면을 읽는 데 적합한 안경은 거리 시야에는 적합하지 않을 수 있음
          + 도로 표지판을 읽기 어렵거나 먼 거리를 보는데 문제가 생기면, 원거리용 안경이 필요하며 전문가에게 시력을 측정받아야 함
          + 다양한 용도에 따라 여러 종류의 안경을 사용하는 것은 일반적임
     * 나는 운전용, 컴퓨터용, 독서용 등 다양한 안경을 사용 중임
     * 시력 검사를 통해 적합한 교정 렌즈를 착용하면 원인을 알 수 없던 두통과 같은 문제가 해결될 수 있음
          + 시력이 괜찮다고 생각했지만 실제로는 교정이 필요한 경우가 많음
          + 안경 착용으로 시각적 부담이 줄어들며 두뇌의 처리 능력을 다른 곳에 사용할 수 있음
          + 선명한 시야는 업무나 일상에서의 효율성을 높여줌
     * 나이가 들며 글자 크기를 점점 키우는 것은 일반적임
          + 프로그래머라면 시력에 맞는 작업 환경을 만드는 것이 중요함

야간 운전

     * 50대에 접어들면 야간 운전 문제가 생길 수 있음
          + TV 광고에 나오는 노란색 선글라스 등은 효과가 없으니 구입하지 않는 것이 좋음
     * 야간 시야 문제 중 하나인 백내장(cataract)은 정기적인 시력 검사를 통해 조기 발견 가능하며, 수술로 개선될 수 있음
          + 또한 야간 시야 문제의 원인은 다양하며 백내장이 아닌 경우도 많음
     * 주요 문제는 대비 변화로, 어두운 길을 운전하다가 밝은 화면을 보면 시야가 흐려질 수 있음
          + 차량 선택 시 큰 화면 대신 조작이 쉬운 물리적 버튼이나 슬라이더가 있는 차량을 고려하는 것이 좋음
          + 화면에서 번지는 빛이나 반사로 인해 시야가 방해받을 수 있음
     * 안경, 차량의 유리창, 헤드라이트를 깨끗하게 유지하는 것이 중요함
          + 시력에 어려움이 있을수록 먼지와 얼룩의 영향이 커짐
          + 나이가 들수록 청결에 더 신경을 쓰는 이유는 이러한 문제를 줄이기 위함임
     * 비타민 A가 풍부한 음식을 섭취하면 시력 유지와 개선에 긍정적인 영향을 줌
          + 당근, 빨간 피망, 토마토와 같은 채소 및 짙은 녹색 채소는 야간 시야와 대비 문제를 개선하는 데 도움을 줄 수 있음
     * 생활 방식을 조정하여 야간 운전을 줄이는 방안을 모색하는 것이 중요함
          + 오후 3시에 퇴근하여 집에 도착한 후 남은 업무를 처리함으로써 밝은 시간대에 운전하는 방법을 고려할 수 있음
          + 겨울철에는 재택근무를 늘리는 등의 방법으로 야간 운전을 피할 수 있음
          + 야간 운전을 피하기 위해 도보로 이동하거나 대중교통을 이용할 수 있는 거리에 거주하는 것도 한 가지 방법임
     * 이러한 변화는 긴 시간 동안 신중하게 계획하여 스트레스 없이 적응하는 것이 바람직함
          + 갑작스러운 상황에서 비합리적인 결정을 내리기보다는 장기적인 계획이 필요함

운동은 신체와 정신을 건강하게 함

     * 난 그냥 운동 안하고도 건강하기를 바랬지만, 안타깝게도 운동은 실제로 좋음
     * 단순히 활동적인 생활방식(도보 이동, 카약 등 취미)만으로는 충분하지 않을 수 있음
     * 건강한 몸을 유지하기 위해 의도적으로 반복적인 운동을 해야 함
          + 반복적인 움직임은 통증을 줄이고 유연성을 향상시킴
          + “움직임은 윤활제(Motion is lotion)”라는 표현처럼, 꾸준히 움직이는 것이 통증 완화와 체력 증진에 도움을 줌
          + 노화와 함께 몸을 굽히거나 높은 곳에 손을 뻗는 기본적인 능력이 감소하며, 운동을 통해 이를 유지 가능함
     * 면역 체계의 많은 부분이 근육에서 작동하며, 운동을 통해 면역력이 강화됨
          + 운동은 기분을 개선하고, 학습 능력을 높이며, 건강에 긍정적인 영향을 미침

     “운동할 시간이 없다고 생각하는 사람들은, 결국 언젠가는 병을 앓을 시간을 마련하게 될 것” — 에드워드 스탠리 (1826–1893)
          + (우리가 잘 아는 스탠리 컵을 만든 사람은 에드워드의 동생임)

모든 운동은 같지 않음

     * 특정 음식 섭취 부족을 다른 음식으로 완전히 보완할 수 없듯, 운동 역시 다양한 종류를 균형 있게 해야 함
     * 운동은 목적에 따라 다양하며, 모든 운동이 동일한 효과를 주는 것은 아님
          + 무거운 물건을 한 번 들어 올리는 것은 계단을 빠르게 오르는 능력을 증가시키지 않음
          + 빠르게 걷는 운동은 무거운 물건을 들어 올리는 능력을 향상시키지 않음
     * 특정 능력을 키우기 위해서는, 목적에 맞는 운동을 해야함
          + 근력: 무거운 물건을 들어 올리는 등 강한 힘이 필요한 활동을 수행할 수 있는 능력
          + 지구력: 걷기나 계단 오르기처럼 비교적 쉬운 활동을 오래 지속할 수 있는 능력
          + 유연성 및 균형: 몸을 구부리거나 균형을 유지하고, 넘어질 때 스스로 균형을 되찾는 능력
          + 일부는 눈에 보이는 근육을 원하기도 하지만, 이는 별개의 목표임
          + 체중 감소나 체질량지수(BMI)는 건강의 유일한 척도가 아님
               o BMI는 과학적으로 비판받고 있으며, 특히 인종차별적 배경이 있다는 지적이 있음
               o BMI 상 ""정상""으로 분류되는 그룹보다 ""과체중"" 그룹이 더 건강한 것으로 나타난 연구 결과도 존재함
               o 개인의 건강 상태는 체중 감소나 BMI 수치만으로 판단할 수 없으며, 건강한 체중 증가는 의학적으로 긍정적으로 평가될 수 있음
               o 과거의 이상적인 체중(예: 17세 때의 체중)을 목표로 삼는 것은 비현명할 수 있음
          + 병에 걸렸을 때를 대비한 체력과 에너지를 보유하는 것이 중요함
     * 성취하고 싶은 목표에 따라 운동은 달라져야 함

근력 (Strength)

     * 20파운드(약 10kg) 물건을 한 손으로 들기, 피클 병 뚜껑 열기 등의 실용적인 힘을 강화 하는 것
     * 반복 횟수를 적게 하더라도 높은 강도의 운동이 효과적임
          + 어렵지만 해볼 만한 운동을 적은 횟수로 하되, 완전히 한계까지는 아니지만 거의 근접한 지점까지 해볼 것
          + 예를 들어, “11개는 무리다” 싶을 때까지 10개 정도의 푸시업을 하는 식
               o “70초는 버티기 힘들겠다” 싶을 때 60초 정도의 플랭크
               o 하루에 3번씩, 단 1~2분만 투자해도 점차 근력이 향상됨
               o 수백 번을 반복하거나 몇 시간을 들일 필요 없음
     * 간단하고 짧은 시간 내에 할 수 있는 운동을 선택: 스쿼트, 팔굽혀펴기, 윗몸 일으키키등
          + 장점: 몸무게를 활용하기 때문에 특별한 장비가 필요하지 않고, 운동복으로 갈아입거나 특정 장소에 갈 필요가 없음
     * 운동은 현재 능력에 맞게 조정 가능. ""각도가 핵심""
          + 예: 팔굽혀펴기를 할 수 없는 경우 각도를 조정하여 쉽게 시작 가능
               o 바닥에서 팔을 완전히 펴는 팔굽혀펴기가 가장 어려운 형태
               o 소파, 침대, 계단 등을 활용해 상체 부담을 줄이고 점진적으로 강화 가능
     * 하루 3번, 1분씩 꾸준히 운동하면 빠른 시간 내에 근력이 향상됨
          + 1~2주 만에 더 많은 반복을 수행할 수 있게 되고, 점차 더 어려운 동작으로 전환 가능
          + 예: 계단에서 낮은 단계로 이동하거나 더 낮은 소파를 사용하는 등 강도를 높이는 방법 선택
          + 운동을 통해 근육이 눈에 띄게 강화되는 효과를 체감 가능
     * 노년기에 근력은 독립적인 삶을 유지하는 핵심 요소
          + 예: 양손을 사용해야 하는 경우 계단 손잡이를 잡을 수 없음
          + 병 뚜껑을 열지 못하면 원하는 음식을 먹지 못하게 됨
          + 근력은 일상적인 활동(식사 준비, 빨래 운반 등)을 스스로 해결할 수 있게 함
     * 강한 근육은 면역력을 높여 감기같은 질병 회복에도 기여함
     * 체중 부하 운동(스쿼트, 팔굽혀펴기 등)은 근육뿐만 아니라 뼈를 강화함
          + 뼈를 강화하면 낙상이나 사고 시 골절 위험이 감소
          + 수영과 같은 비체중 부하 운동은 효과가 다름
               o 체중을 사용하는 운동은 뼈 건강과 근육 강화를 동시에 가능하게 함
     * 근력이 센 사람이 더 장수함
          + 손의 악력을 전체 근력의 지표로 활용
          + 대부분의 운동이 손의 힘을 필요로 하므로, 악력이 강한 사람은 대체로 전신이 강함
          + 손의 힘이 약한 사람은 전반적으로 근력이 약하며, 이는 독립적인 생활 능력을 저하시키고 수명을 단축시킬 수 있음
               o 예: 보행기를 잡지 못하거나 문손잡이를 열지 못하면 다른 사람의 도움이 필요하게 됨
          + 약해진 근력으로 인해 항상 타인의 보살핌이 필요한 상태를 피하기 위해 근력 유지가 필수적임

지구력 (Stamina)

     * 근력 운동(무거운 물건 들기 등)은 지구력을 향상시키지 않음
          + 지구력을 키우려면 약간 숨이 찰 정도의 활동을 지속적으로 해야 함
     * 캐나다 정부는 하루 20분, 주 150분의 유산소 운동을 권장
          + 하지만 연구 결과에 따르면 아무리 짧은 운동이라도 효과가 있음
               o 하루 걸러 20분 운동 > 하루 걸러 10분 운동 > 주 2회 5분 운동 등 모두 도움
          + 약간 숨이 차는 활동을 통해 건강을 개선할 수 있음
     * 지속적인 유산소 운동은 뇌의 새로운 연결(뉴런 생성을 포함) 형성을 촉진함
          + 유산소 운동은 숨이 가쁜 상태를 유지하며, 이는 신경생성을 자극
          + 걷기, 계단 오르기, 빠른 하이킹 등 지속적인 움직임이 효과적
     * 운동 후 학습 능력이 향상되며, 이는 생존 본능과 관련된 신체의 자연스러운 반응임
          + 예: 사냥 후의 학습 기회를 극대화하려는 생존 메커니즘
     * 가벼운 인지 장애를 가진 사람도 적당한 운동을 통해 상태가 악화될 가능성을 줄일 수 있음
     * 운동은 50세 이상에서 인지 기능을 개선하는 효과를 보임
          + 유산소 운동과 근력 운동(저항 운동) 모두 인지 능력 향상에 기여
     * 유산소 운동은 체내에서 다양한 화학 물질을 방출하여 긍정적인 영향을 미침
          + 마이오카인(Myokine), 도파민(Dopamine), 노르아드레날린(Noradrenaline), 세로토닌(Serotonin) 등이 대표적
          + 도파민은 행복감을 느끼게 하며, 세로토닌은 학습 능력을 크게 향상시킴
     * 이러한 화학 물질은 운동을 통해 뇌와 기분에 긍정적인 변화를 유도함

유연성과 균형 (Flexibility and Balance)

     * 젊을 때는 유연성과 균형의 중요성을 간과하기 쉽지만, 나이가 들수록 필요성이 커짐
          + 몸이 뻣뻣해지거나 작은 걸림에도 넘어지는 일이 발생할 수 있음
     * 일상적인 활동(자전거 타기, 하이킹 등)만으로는 유연성과 균형이 개선되지 않음
          + 유연성을 위해 스트레칭 운동이 필요함
          + 균형을 위해 균형 잡기와 균형 회복 연습이 필요
     * 지금부터 유연성과 균형 운동을 습관화하면 나중에도 이를 유지 가능
          + 물건을 집거나 넘어지는 상황에서도 부상을 예방할 수 있음
          + 손목이나 발목의 염좌를 방지하는 데도 도움
     * 스트레칭은 고강도 운동이 아니며 즐겁고 편안한 느낌을 줌
          + 예: 침대에서 아침에 기지개를 켜는 동작처럼 기분 좋은 활동
          + 스트레칭 후 자세가 좋아지고 몸이 가벼워지는 효과를 체감할 수 있음
          + 간단한 동작으로도 일상 속에서 지속 가능

손목 (Wrist)

     * 많은 사람들이 손목을 구부린 상태로 자는 습관이 있음
          + 손목을 구부리고 자는 자세는 손목 터널 증후군의 주요 원인 중 하나
          + 손목을 편 상태로 유지하면 손목 통증이 크게 줄어듦
          + 손목이 아플 경우 수면용 손목 보호대를 사용하여 자세를 교정 가능
     * 손목 보호대는 수면 중 손목을 평평하게 유지하도록 돕는 역할을 함
          + 타이핑 중에는 보호대 사용이 불편할 수 있으므로, 주로 잠잘 때 착용 권장
          + 손목을 보호하는 습관을 들이면 장기적으로 긍정적인 효과를 기대할 수 있음
     * 마우스나 키보드 사용 시 불편함이 느껴지면 대체 장비를 고려
          + 예: 트랙볼은 손목 부담을 줄이는 데 효과적
          + 손목 손상이 심각해지기 전에 장비 변경은 상대적으로 저렴한 예방책

     ""당신의 일생동안 손목과 손의 키 입력 횟수는 한정되어 있으니, 불필요한 활동(예: 인터넷 논쟁)에 낭비하지 마세요"" - Scott Hanselman

통증과 고통 (Aches and Pains)

     * 노화는 은유적으로도, 실제로도 통증을 동반할 수 있음
          + 비가 오려고 할때 무릎 통증과 같은 증상은 실제로 존재하며 많은 사람들이 경험함
     * 단기적인 통증을 겪을 때 통증을 참는 것에 의미를 두지 말아야 함
          + 의사들은 통증 완화제를 사용하지 않는 것에 대해 오히려 지적하는 경우가 많음
     * 진통제는 일시적으로 통증을 완화하기 위해 고안된 도구임
          + 통증을 참기보다 필요한 경우 진통제를 사용하여 불편함을 줄이는 것이 중요
          + 통증을 관리하면 삶의 질이 향상될 뿐만 아니라 몸의 회복에도 긍정적인 영향을 줄 수 있음
     * 일부 약물은 노화와 관련된 이점이 있음
          + 메트포르민(Metformin): 당뇨병 치료제 중 하나로, 당뇨와 무관하게 노화 관련 문제가 줄어드는 효과가 있음
          + 나프록센(Naproxen): 항염증제로, 규칙적인 사용이 노화와 관련된 문제를 줄이는 데 도움
     * 이러한 약물들은 염증을 감소시키는 데 중요한 역할을 하며, 노화 과정에서 긍정적인 효과를 발휘
     * 염증은 신체에 해로울 수 있으므로 이를 완화하는 것이 중요
          + 통증을 약물로 완화하는 것을 약점으로 간주하지 말고, 염증 감소와 장기적인 건강 관리로 이해해야 함
     * 항염증제 사용은 단순히 통증을 줄이는 것을 넘어, 신체의 염증 반응을 조절하여 장기적인 건강에 도움
     * 운동은 관절과 근육 통증을 줄이고 유연성을 증가시키는 데 효과적
          + 규칙적인 운동은 염증 감소와 함께 통증 완화에 도움
          + 유연성과 근력을 동시에 강화하여 통증과 노화 관련 문제를 줄일 수 있음
     * 의자, 책상등 통증을 유발하는 물건들을 교체하는데 투자할 것
          + 팬데믹 동안 재택근무를 시작한 이후 계속 유지하는 사람이 많은데, 종종 비효율적이고 비인체공학적인 장비로 구성됨
               o 예: 식탁 의자, 서랍장, 임시로 사용한 책상 등
          + 장시간 작업 시 허리, 무릎, 손목 등의 건강을 고려한 장비 사용이 중요
          + 편안함과 자세를 개선할 수 있는 의자, 책상, 손목 받침대 등을 고려해야 함
          + 장비 개선은 단순한 편의성을 넘어, 장기적인 신체 건강 유지에 도움을 줌

청력 (Hearing)

     * 작은 청력 손실이 있는 경우 본인이 인지하지 못할 수도 있음
          + 이런 상태에서는 회의나 대화 내용을 완전히 따라가지 못할 가능성이 큼
          + 일부는 대화를 이해하지 못해 소외감을 느끼거나 대화 참여를 포기하기도 함
          + 청력 손실은 사회적, 직업적 상호작용에 부정적인 영향을 줄 수 있음
     * 정기적인 청력 검사는 이를 예방하고 개선하는 데 도움을 줌
     * 청력은 한 번 손실되면 되돌릴 수 없음
     * 청력 보조기(보청기)는 일부 기능을 보완할 수 있으나 완전한 복구는 불가능
          + 보청기는 단순한 증폭기가 아니며, 대화 소음을 구분하거나 언어 최적화 등 첨단 소프트웨어가 내장됨
     * 큰 소음을 최소화하는 것이 가장 중요한 예방책
          + 귀마개나 귀 덮개 같은 청력 보호 장비를 착용
          + 비행기에서 귀마개를 사용하면 소음을 줄이고 두통과 피로를 완화 가능
          + 헤드폰 볼륨을 너무 높이지 않도록 주의
               o 볼륨을 높일 때 나타나는 경고 메시지를 무시하지 말아야 함

건강 (Health)

     * 젊을 때는 독감이나 감염, 가벼운 부상에 대해 크게 걱정하지 않는 경향이 있음
     * 90세 이상으로 오래 산 사람 중 다수가 호흡기 감염으로 사망
          + 가족력에 따라 다를 수 있지만, 고령에서는 호흡기 감염이 주요 사망 원인 중 하나임
     * 고령자에게는 낙상과 부상이 치명적일 수 있음
          + 낙상 후 골절은 이동성과 독립성을 잃게 만들고, 상태가 악화될 가능성이 큼
     * 근육량이 많으면 낙상의 위험이 줄어들고 회복 가능성도 높아짐
          + 예: 강한 코어 근육은 넘어질 때 스스로 균형을 잡을 수 있도록 도움
          + 면역 체계 강화 효과로 질병 회복 속도도 빨라짐
     * 방지하는 습관을 지금부터 들이고 계속 유지해야함
          + 낙상 예방: 안정감 있는 신발 착용
          + 계단이나 난간을 잡는 습관을 들이기(타인의 시선 신경 쓰지 않기)
          + 정기적인 예방접종: 성인도 10년마다 필요한 백신이 있음. 의사와 상담하여 필요한 예방접종을 확인
          + 마스크 착용: 특히 군중 속에서는 자신을 보호하기 위해 필수적임
          + 손 씻기:
               o COVID 초기에는 손 씻기가 바이러스 예방의 핵심이라고 여겨졌으나, 실제로는 독감 감소에 효과적이었음
               o 전 세계적인 손 씻기 습관으로 독감의 한 종류가 거의 사라졌던 사례가 있음
               o 손 씻기를 지속적으로 실천하는 것은 건강 관리에 큰 이점이 있음
     * 건강하다고 느껴도 정기 검진을 받는 것이 중요
          + 검진은 현재 상태에 대한 **기준치(베이스라인)**를 설정하여 변화 여부를 확인 가능
          + 조기 발견이 중요한 건강 문제(약간 불편하거나 민망한 검사 포함)도 포함되어야 함
          + 검진은 잠재적인 위험을 사전에 파악하고 관리하는 데 도움을 줌

폐경 (Menopause)

     * 폐경은 전체 인구의 절반이 겪는 노화의 자연스러운 과정
     * 폐경 전 단계(Perimenopause) 는 40대부터 시작될 수 있으며, 오랜 기간 지속될 수 있음
          + 이는 삶의 여러 측면에 영향을 미치며, 이를 우습게 여기지 않는 것이 중요
     * 폐경을 겪는 사람은 스스로 농담할 수 있지만, 타인이 이를 조롱하거나 가볍게 여기는 것은 부적절
          + 예: ""덥나 봐? 또 열이 나는 거야?"" 같은 농담은 삼가는 것이 바람직함
          + 체온 조절이 어려운 상황에서 발생하는 당황감은 신체적, 심리적으로 큰 부담을 줄 수 있음
          + 당황하거나 민망한 상황은 불편을 배가시킬 수 있음
     * 폐경과 같은 개인적이고 민감한 주제에 대해 존중과 배려가 필요
          + 사람을 당황하게 만들거나 농담하는 것은 피하고, 공감하는 자세를 유지해야 함

건강 습관

     * 젊을 때부터 좋은 건강 습관을 만들고 이를 평생 유지하는 것이 중요
     * 금연
     * 자외선 차단제 반드시 사용: 멜라노마(흑색종) 생존자의 조언임
          + 자외선 차단제는 땀이나 물에 의해 지워질 수 있으므로, 모자를 추가로 활용하면 더 효과적
          + 모자는 자외선으로부터 눈도 보호 가능
     * 알코올 섭취 주의: 알코올은 적당히 섭취하며, 과도한 음주는 피해야 함
          + ""독""을 섭취할 때는 적당히, 자주 마시지 않는 것이 중요
     * 충분한 수분 섭취:
          + 물은 건강에 좋지만, 알람걸고 마실 정도로 지나치게 많은 양을 억지로 마실 필요는 없음
          + 목이 마를 때 자연스럽게 물을 마시는 습관이 바람직
          + 커피, 와인, 콜라 등은 약간의 이뇨 효과가 있지만 수분 공급에 여전히 기여함
     * 채소와 과일은 비타민 C와 섬유질을 포함하여 건강에 매우 중요한 역할을 함
          + 섬유질은 암, 심장병, 뇌졸중 예방 효과에 중요한 기여함
          + 비타민 C 보충제는 과일과 채소를 섭취하는 것과 동일한 건강 효과를 제공하지 못함. 섬유질이 중요.
     * 가공되지 않은 자연식품이 가장 건강에 좋음
          + 예: 사과를 먹는 것이 사과 주스나 고도로 가공된 퓌레보다 건강에 더 유익
          + 약간 가공된 식품(예: 사과소스)은 괜찮지만, 고도로 가공된 식품(예: 인공 향과 설탕이 추가된 퓌레)은 피하는 것이 좋음
          + 육류와 가공육(소시지, 핫도그)도 가능한 한 덜 가공된 상태로 섭취
          + 거주 지역에 따라 가공식품의 순도가 다를 수 있음
               o 자신의 기준에 따라 덜 가공된 식품을 선택하는 것이 중요
     * 일을 너무 많이 하지 말것
          + 죽음을 앞둔 침대 위에서 ""더 많은 시간을 사무실에서 보냈으면 좋았을걸""이라는 사람은 없음
     * 모든 것에서 적당함을 유지하는 것이 건강과 행복에 도움을 줌

다른 사람들(Other People)의 인식

     * 설문 조사에서 ""연령 차별""에 대해 물어 봤는데 실제로 차별이 있음
          + ""내가 배우지 못할거라 가정함"" : 새로운 기술에 대해 학습 여부를 묻지 않고, 배우고 싶다는 의사가 있다고도 생각하지 않음
          + ""유능하다면 지금쯤 관리자가 되었어야 한다""는 고정관념으로 인해 기술적 역량이 평가절하됨
               o 비관리자인 상태가 브랜드에 부정적 영향을 준다는 편견이 있음
          + 이메일 및 음성 통화로 진행된 채용 과정이 비디오 인터뷰로 전환되면서 기회가 사라지기도 함
               o 이는 외모, 특히 머리 색 등 연령과 관련된 편견에 기인
          + ""회사 문화에 맞지 않을것 같아요"":
               o 이 표현은 종종 나이가 많다는 이유로 지원자를 배제하기 위한 명분으로 사용됨
               o 이러한 연령 차별은 고령자의 전문성과 경험이 간과되는 문제를 초래함
     * 남성과 여성 모두 노화에 따른 어려움을 겪지만, 여성에게 더 큰 영향을 미침
          + 남성은 가끔 ""경험이 풍부한"" 또는 ""존경받는"" 이미지를 얻는 반면, 여성은 거의 해당되지 않음
     * 소규모 회사에서는 개별적으로 평가될 가능성이 높지만, 대규모 회사에서는 연령에 따른 고정관념에 더 쉽게 묶임
          + 그러나 대규모 회사는 기술적 경력 개발을 위한 ""기술적 승진 제도(Ladder)""를 제공할 수도 있음
          + 그래서 사람들이 종종 컨설팅으로 많이 옮겨감
               o 내부 직원으로는 ""63세인 당신에게 왜 교육을 제공해야 하나?""라는 편견에 직면할 수 있음
               o 외부 컨설턴트로 활동하면 ""63세라면 정말 많은 것을 알겠군요!""라는 긍정적인 인식을 받을 가능성이 높음

만약 당신이 ""Other People"" 이라면

     * 예를 들어 당신이 ‘나이 든 사람들은 배울 수 없다’, ‘나이 든 사람들은 회사 문화와 어울리지 않는다’거나, ‘소프트웨어 개발 과정에서 4층 계단쯤은 뛰어오를 수 있어야 한다’고 생각하는 사람이라면?
     * 그런 생각이 못되고 잘못되었다고 굳이 말하고 싶지는 않음
     * 대신, 그게 여러분에게 어떤 결과를 가져다줄지를 말씀드리고 싶음
     * 만약 여러분이 ‘나이 드는 건 끔찍해’라고 믿는다면, 실제로 끔찍한 노년을 맞이하게 될 것
          + 그리고 그건 단순히 기분이 우울하고 외로워진다는 차원만이 아님
     * 나이든 사람들에 대한 당신의 태도가, 당신의 나이에 영향을 미침
          + 노화에 대해 부정적 고정관념을 가진 사람은 심장마비나 뇌졸중의 위험이 더 높으며, 입원 가능성도 50% 증가
          + 노화에 대한 긍정적 관점이 스트레스와 고통을 줄이고 더 건강한 노년을 보장
     * ""나는 할 수 없다""는 태도는 삶의 범위를 좁히며, 부정적인 노년을 초래함
          + 반대로, ""새로운 방법을 배우거나 적응할 수 있다""는 사고방식은 긍정적이고 활기찬 노년을 만듦
          + 기여할 수 있는 역량이 여전히 많다고 믿는 태도가 중요

뇌와 정신 능력

     * 인지 능력 저하는 불가피하지 않으며, 예방 가능
     * 최근 고령에서의 치매 통계를 보면
          + 90세인 사람들중 약 3명 중 1명만이 치매를 겪으며, 나머지 2명은 건강한 인지 능력을 유지
          + 80세에는 약 5명 중 1명만이 치매를 경험, 80%는 영향을 받지 않음
          + 치매와 같은 인지 저하는 노화의 필수적인 결과가 아님

단기 기억과 작업 메모리(Short term memory, working set)

     * 단순한 건망증(예: 왜 여기에 왔는지 잊는 경우)은 치매의 신호가 아님
     * 빈번한 건망증의 원인은 물리적 또는 환경적 요인일 수 있음
          + 시각적 정보 부족: 작성한 목록이 읽기 어렵거나 잊어버림
          + 청각적 정보 부족: 요청 내용을 제대로 듣지 못하고 추측하는 경우
          + 수면 부족: 수면이 부족하면 기억력과 집중력 저하 발생
     * 해결 방법은 습관과 루틴 형성:
          + 모든 것에 대해서 지정된 위치를 만들고 거기에다 두는 물리적인 부분 부터 시작
          + 알람, 일정 관리 앱, 스크립트 등 기술을 활용할 것
     * 체크리스트와 프로세스 만들기
          + 복잡한 절차 대신 단순한 방식으로 작업을 처리하면 실수를 줄이고 부담을 완화 가능
               o 예: 27단계의 복잡한 절차 대신 간소화된 프로세스를 사용하여 중간에 방해받아도 쉽게 재개 가능
     * 멀티태스킹에 너무 의존하지 말 것
          + 나이에 따라 멀티태스킹에서 단일 작업에 집중하는 방식으로 작업 스타일을 조정해야 할 필요가 있음
          + 나도 한때는 멀티태스킹(예: 컨퍼런스 청취 중 이메일 정리, 소셜 미디어 확인)이 효과적이었음
               o 대화 내용을 듣다가 중요한 시점에만 화면을 확인하며 작업을 병행
          + 그러나 멀티태스킹은 중요한 정보를 놓치게 만들 가능성이 높음
               o 예: ""누가 모듈 얘기했지?""처럼 정보를 놓쳐 다시 확인해야 하는 상황 발생
          + 현재는 한 가지 작업에 완전히 집중하는 방법으로 전환
               o 컨퍼런스 영상을 빠른 속도로 재생하여 모든 주의를 기울이는 방식 채택
               o 화면에 표시된 단서(슬라이드 내용, 코드 등)를 함께 보며 더 깊이 이해
          + 멀티태스킹을 줄이고 집중력을 높이는 습관이 작업 효율성을 향상시킴
          + 영상을 빠른 재생 속도로 시청하면 집중력을 유지하면서도 시간을 절약 가능
               o 예: 1.5배속으로 시청하면 1시간짜리 강연을 더 짧은 시간 내에 완료
          + 집중력을 완전히 투자하여 멀티태스킹을 피하는 방식이 효율적인 학습에 도움이 됨
     * 개인의 뇌 구조와 기능의 다양성을 이해하고 수용
          + ADHD나 자폐 스펙트럼을 가진 사람들은 독창적인 대처 기술을 통해 어려움을 극복
               o 뇌가 즉각적인 도움을 주지 않을 때도 작업을 완료하는 방법을 알고 있음
          + 이러한 특성은 일부 사람들에게 익숙하지 않을 수 있지만, 이러한 기술은 자신에게도 유익하며 적용 가능
          + 인터넷 검색, 친구들과의 대화를 통해 다양한 대처 기술을 발견 가능
               o 기억력 부족이나 여러 단계의 작업을 중간에 멈추는 문제를 해결하기 위한 도구와 팁이 다수 존재
     * 뇌 훈련 게임이 도움이 될까?
          + 색깔 맞추기, 단어 찾기 등은 게임 자체의 실력을 높이는 데는 도움되지만, 전반적인 인지 능력이나 처리 속도를 향상시키지는 않음
          + 광고에서 주장하는 효과와 실제 효과가 다름
     * 즐겁게 읽는 독서나 흥미로운 학습은 인지 능력과 처리 능력에 실질적인 도움을 줌
          + 예: 그림 그리기 배우기, 스탠드업 패들보드 배우기, 소설 읽기 등
          + 독서는 창의력과 인지 능력을 자극하며, 스트레스를 줄이고 삶의 질을 향상

계속해서 등장하는 ""새로운 것(New Stuff)"" 따라잡기

     * ""또 다른 프로그래밍 언어를 배워야 해"" 같은 이야기를 하자는 게 아님
          + 이미 직장에서 충분히 스트레스 받고 있음
     * 많은 사람들이 계속해서 새로운 것들을 익혀야 한다는 데 대해 불평을 함
          + 그것도 꼭 필요한 이유가 있어서라기보다는, 단지 ‘8년째 이 패러다임을 쓰고 있으니 이제 다른 패러다임으로 갈 때가 됐다’ 같은 이유일 때가 많음
     * 사실 배우려고만 하면 대부분 배울 수 있음 (그렇게 하고 싶지 않은건 다른 문제)
     * ‘Git 같은 건 배우고 싶지 않아’라고 느끼는 건, 사실 Git 자체가 어려워서가 아님
          + 우리는 이미 어떻게 학습해야 하는지 알고, 빠르게 훑어보고 과거의 경험과 연결 지을 수 있음
          + ‘아, 이건 내가 대학 시절에 쓰던 그거랑 비슷하네?’
     * 그럼에도, ‘나는 웹 같은 건 안 다뤄. 데스크톱만 하는 사람이야, C++만 쓰는 사람이야. 그런 바보 같은 웹 기술은 필요 없어’라는 식으로 스스로를 정의해버리면, 새로운 걸 받아들이기 싫어질 수밖에 없음
     * 하지만 변화 자체를 기꺼이 수용한다면, 그게 새로운 언어든, 새로운 프레임워크든, 새로운 패러다임이나 툴이든, 혹은 완전히 다른 사고방식이든, 훨씬 유연해질 수 있음
          + 같은 도구일지라도 생각하는 새로운 방법이 있을 수 있음
     * 자신의 업무 정체성(Identity)을 사용하는 도구가 아니라, 달성한 성과와 해결한 문제로 정의해야 함

기분(Moods)

     * 많은 사람들이 자신이 늙으면 짜증을 잘 내고, 조급해지고, 냉소적이고, 집중력이 약해질까 봐 걱정함
     * 보통은 ‘나는 저 사람처럼 되고 싶지 않아’ 같은 구체적인 모델이 있기도 함
     * 하지만 치매와 마찬가지로, 이런 성격 변화도 불가피한 건 아님
     * 20대에 다정하고 관대한 사람이라면, 대체로 80대에도 여전히 그렇게 지낼 가능성이 높음
     * 다만 한 가지 전제조건이 있음
          + 생계에 대한 걱정이 없고, 필요한 게 충족될 때 우리는 쉽게 따뜻하고 너그럽고 친절할 수 있음
     * 삶의 기본 안정성이 부족할 경우, 긍정적인 태도를 유지하거나 다른 사람에게 관대해지기가 어려움
          + 예: 생계 유지에 대한 불안, 집을 잃을 걱정, 지지해 줄 사람들의 부재 등은 부정적인 태도를 유발할 수 있음
          + 이런 환경에서 계속 환하게 웃고 친절하기는 정말 어렵고, 사람은 당연히 짜증과 우울감에 빠지게 됨
     * 결국, 젊을 때부터 안정적인 노년을 위한 계획을 세우고 편안한 노후를 준비해둬야, 그 시기에 여유롭게 다른 이들에게 따뜻함과 관용을 베풀 수 있음
     * 지금 친절하지 않다면, 나이가 든다고 해서 마법처럼 ""친절한 사람""이 되는 것은 아님
          + 친절해지고 싶다면 지금부터 실천하면 됨; 특별한 면허가 필요하지 않음

수면(Sleep)

     * 수면은 최고의 디버거이며, 신체가 상처를 치유하고 회복하는 시간
          + 나이가 들면서 수면 필요량이 증가하거나 감소하는 것은 정상적인 현상
     * 더 많은 수면이 필요한 사람은 게으른 것이 아니며, 더 적게 자는 사람이 특별히 미덕을 가진 것도 아님
          + 수면 시간은 개인마다 다르며, 자신의 필요에 맞는 만큼 자는 것이 중요
          + 예: 88세인 내 어머니는 하루 일찍 일어나기 위해 알람을 설정하지만, 더 늦게 자는 사람이 게으른 것은 아님
     * 좋은 수면은 신체적, 정신적 젊음을 유지하는 데 기여
          + 연구에 따르면, 한 달간 양질의 수면은 6년 젊어진 기분을 느끼게 하고, 단 이틀의 수면 부족은 4.5년 더 나이 든 것 같은 피로감을 줌

""뭔가 한가지(Thing 1)"" 때문이 아님

     * 건강 문제를 다룰 때, 모든 증상을 특정 요인(예: 나이, 질병) 때문으로 치부하지 말아야 함
          + 예: 암을 겪었을 때, 모든 증상을 ""암 때문""이라고 생각하지 않도록 주의
          + 나이, 특정 질환, 또는 환경을 ""모든 문제의 원인""으로 간주하는 것은 부적절
     * 나이나 기존 질환 외에도 별개의 원인으로 문제를 겪을 수 있음
          + 예: 무릎 통증은 단순한 부상일 수 있으며, 적절한 진단과 치료를 통해 개선 가능
          + 문제를 포기하거나 나이에만 탓하지 말고, 해결책을 모색하는 것이 중요
     * 포기 하지 말 것 : 노화로 인한 불편함을 당연하게 여기지 않기
          + ""나는 나이가 들어서 항상 아픈 것 같아""
          + ""나는 나이가 들어서 제대로 생각하지 못하는 것 같아""
          + ""나는 나이가 들어서 지금 그걸 하지 못할 것 같아""
     * 건강 문제의 근본 원인을 정확히 파악하고, 이를 해결하려는 노력이 필요
     * 새로운 건강 문제는 언제든지 발생할 수 있음
          + 예: 특정 음식에 대한 알레르기는 나이가 들어서도 새롭게 생길 수 있으며, 이를 인식하고 적응하면 큰 개선 효과를 얻을 수 있음
     * 모든 건강 문제가 ""나이가 들어서"" 발생한다고 단정하지 말아야 함

삶은 빠르게 옵니다 (Life comes at you fast)

     * 지금까지 계획이 중요하다고 얘기했지만, 항상 계획대로 진행되지 않을 수 있음
          + 예기치 않은 상황(전화, 방문 등)이 발생할 수 있으므로 유연한 적응이 필요
     * 다양한 상황에 대처하기 위해 기반 자원이 중요
          + 신체적 힘: 병원에서 밤을 새며 간병할 수 있는 체력
          + 정신적 힘: 정신적 여유가 있어야 누군가를 힘든 상황에서 도와줄 수 있음
          + 경제적 자원: 갑작스러운 상황(예: 집 화재)에서도 더 나은 선택을 할 수 있는 재정적 여유
          + 일상 속에서 유용한 기술을 개발해 두는 것도 중요
               o 인터넷 검색 능력: 필요한 정보를 신속하게 찾을 수 있는 능력
               o 설득 대화 능력: 누군가와 협상을 통해 원하는 결과를 얻기
     * 이런 스킬들은 평생 쌓아가는 것이고, 예상치 못한 상황에서 매우 유용함
          + ""당신의 삶이 예고 없이 스케줄을 뒤엎고 찾아올 수도 있으니까""

상실(Loss)

     * 상실은 삶의 일부이며, 누구도 피할 수 없음
          + 예: 장례식 참석, 회사 폐업, 친구와 멀어지고/바꾸거나/죽기도 함
          + 어떤 상실은 예상 가능하고, 어떤 상실은 갑작스럽게 찾아옴
     * 일상에서도 작은 상실을 경험:
          + 좋아하던 아이스크림이 단종됨
          + 신체적 한계로 더 이상 좋아하던 활동(예: 등산, 스키)을 할 수 없게 됨
     * 작은 상실도 축적되며 감정적으로 영향을 줄 수 있음
     * 상실을 치유하는 유일한 방법은 새로운 것을 얻는 것임 (The only cure for loss is gain)

     ""Well something's lost, but something's gained In living every day"" — Joni Mitchell, Both Sides Now
     “뭔가는 잃게 되고 또 뭔가는 얻게 되지, 매일을 살아가는 동안에”

     * 조니 미첼이 20대에 쓴 노랫말인데 혹자는 20대가 무슨 인생경험을 알겠어?라고도 함
          + 그녀는 20대에 캐나다 중부에서 대도시 토론토로 이주했다가, 아이를 낳고, 위탁 가정에서 그 아이를 데려오기 위해 누군가와 결혼도 함. 그가 아이에 관심이 없다는 사실을 알고 이혼하고 다시 입양을 보냄. 이후 뉴욕을 거쳐 캘리포니아로 이주한 뒤에야 이 곡을 썼음
          + 생각보다 인생의 ‘잃음과 얻음’을 잘 알고 있었던 것. 그로부터 훨씬 나중에는 뇌동맥류를 겪어서 걷거나 말하는 능력을 잃을 뻔했지만, 다시 무대에 서서 이 노랫말을 직접 부를 정도로 회복해냄
     * 하지만 중요한 것은 이거임:
          + 상실은 저절로 우리에게 찾아오지만, 무언가를 얻는 건 결국 우리가 직접 해내야 함

새로운 친구 만들기

     * ""무언가를 ‘얻는’ 건 결국 여러분 몫""
     * 그러니 나가서 새 친구를 사귀어 볼 것. 그게 가장 좋음
     * 많은 사람이 직장에서 친구를 사귀지만, 직장 생활이 점점 끝나가거나 오랫동안 같은 사람들과만 일하다 보면, 거기서 새 친구를 만들기는 쉽지 않음
     * 본인보다 한참 어린 친구도 필요함
          + 예: 85세라면 60세나 40세 친구가 무거운 짐을 들어주거나 병 뚜껑을 열어주는 데 도움
          + 젊은 친구는 노인의 지혜를 감사히 여길 수 있음
          + 반대로, 젊은 사람들은 나이 많은 친구를 통해 삶의 통찰을 얻을 수 있음
     * 여러분이 20대라면 자신보다 30~40세 많은 친구를 사귀는 것을 추천
     * 지금 내 나이보다 3040년 아래인—그러니까 최소한 20살 이상인—젊은이들이 다가오면, 그들과도 친구가 되는 걸 두려워하지 말 것
     * 친구는 취미 활동, 지역 사회, 혹은 친척들과의 새로운 관계에서 찾을 수 있음
          + 예: 큰 가족 모임에서 가끔 보던 사촌이 흥미로운 대화 상대일 수 있음

새로운 것을 시도해보기

     * 새로운 것을 시도해보는 것도 우정과 경험을 확장하는 좋은 방법
          + 새로운 활동, TV쇼나 스트리밍, 게임, 장소, 음식, 사람 등 다양한 것을 탐험
     * 모든 시도가 성공하지는 않겠지만, 일부는 오래도록 가치 있는 것으로 남을 것
          + 새로운 경험과 관계는 개인적인 획득과 성장의 원천이 됨

     ""Getting old is like climbing a mountain; you get a little out of breath, but the view is much better!"" — Ingrid Bergman
     ""나이 든다는 건 산을 오르는 것과 같아요. 숨이 좀 차긴 하지만, 훨씬 더 멋진 경치를 볼 수 있죠!""

좋은 점들

     * 나이가 들면 더 많은 시간과 경제적 여유가 생김
     * 나이가 들수록 생활에서 불필요한 것을 줄이는 경향이 생김
          + 예: 가구 교체에 덜 신경 쓰게 됨, 자녀 양육비 부담에서 벗어남
     * 과거와 달리 단순한 생활에서도 만족감을 느끼게 됨
     * 나이가 들면서 자신감과 영향력이 자연스럽게 형성
          + 다른 사람들이 나를 보고 ""저 사람은 쉽게 넘볼 상대가 아니겠는데?""라고 생각할 수 있음
     * 새로운 시스템이나 규정을 굳이 배우지 않아도 ""나는 이런 방식이 좋아""라고 말하며 자신의 방식을 고수할 자유가 생김
     * 나이가 들수록 두려움이 줄어 들고, 조직 변화나 새 규정에 쉽게 흔들리지 않음
          + ""해고할 거야? 상관없어, 여기서 일하고 싶은지도 잘 모르겠어."",
          + ""조직 개편? 내가 몇 번이나 겪어본 줄 알아? 그다지 대단한 일 아니야""
     * 자신만의 자원과 경험을 통해 더 큰 안정감과 독립성 확보
     * 나이가 많을수록 그만두는 자유를 더 쉽게 누릴 수 있음
          + 젊은 시절에는 ""네가 없으면 안 돼""라는 말을 듣지만, 나이가 들면 ""좋은 여정이었어""라는 반응을 받음
          + 63세에 50년간 해온 일을 그만두려 한다면, 사람들이 이를 존중하고 논쟁하지 않음

길고 행복한 노년을 위해

     * 운동은 몸과 뇌를 위해 필수적
          + 몸을 돌보는 것은 필수이며, 이를 적으로 여기지 말아야 함
     * 돈을 저축하되, 현재의 삶을 즐기는 것도 잊지 말 것
          + 자원을 쌓아두는 것이 중요하지만, 현재를 소홀히 해서는 안 됨
     * 건강한 식습관을 유지하며 몸을 잘 관리할 것
     * 친구를 사귀고 관계를 유지할 것:
          + 새로운 친구를 계속 만들고, 기존의 친구 관계를 유지하며, 사회적 연결을 확대
     * 삶에서 목적과 이유를 찾는 것이 중요

     “여러분이 아무리 젊어도 너무 이른 시기는 없고, 또 제가 장담하건대 아무리 늦었다고 해도 행복하고 건강한 ‘나이 들어가는 프로그래머’가 되는 데는 결코 늦지 않습니다.”

   좋은글 감사합니다!

   The only cure for loss is gain

   가슴에 큰거 하나 담아갑니다

   좋은 내용이네요~

   좋은글 감사합니다!

   다른 사람들의 인식 부분이 눈에 밟히네요. ㅠㅠ 40대 후반인데 뼈저리게 느끼고 있네요

   다초점 렌즈 고민중인데, 남들을 의식하지 않을 수 없네요. 저는 외국에 있는데, '쟤 나이 많구나' 이런 인식을 주는것 같아서 맘이 편하지가 않네요. 해외에는 돋보기 안경 쓴 엔지니어도 많다라고 생각했었는데, 여기도 칼바람 불면 나이가 무시할 수 없는 팩터라...

   뒷목을 주무르며 이 글을 보는 나, 이대로 괜찮을까요?

   절절히 공감하면서 읽었습니다. 감사합니다.

   https://lilys.ai/digest/2499473/594466

   요약입니다

   너무 보석 같은 발표입니다.

   꼭 프로그래머에 국한된 얘기라기보다는 더 건강하고 윤택한 삶을 계속하면서 나이 먹을 수 있는 방법을 망라한 훌륭한 글입니다.

     우리 C++ 코드를 이해하는 유일한 사람이 사망했어요
     앗...아앗....

   40대에 관리자 커리어가 아닌 수석 엔지니어의 길을 선택한 저에게 정말 많은 도움이 되네요.
"
"https://news.hada.io/topic?id=18943","구글, Pebble OS 오픈소스화 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         구글, Pebble OS 오픈소스화 발표

     * Google은 Pebble 스마트워치의 소스 코드를 공개함. 이는 2016년 원래 회사가 운영을 중단한 후 Pebble 시계를 유지하려는 자원봉사자들을 지원하기 위한 노력의 일환.
     * Pebble의 역사
          + Pebble은 Kickstarter 프로젝트를 통해 처음 출시되었으며, 당시 가장 많은 자금을 모은 프로젝트였음. 4년 동안 200만 개 이상의 스마트워치를 판매하며, 1만 개 이상의 앱과 시계 화면을 만든 수천 명의 개발자 커뮤니티를 형성함.
          + 2016년 Fitbit이 Pebble을 인수하였고, 이후 Fitbit은 Google에 인수되어 Pebble OS도 함께 이전됨.
          + Pebble 하드웨어 및 소프트웨어 지원이 중단된 지 8년이 지났지만 여전히 많은 팬이 존재함.
     * 공개된 내용
          + Pebble 운영 체제의 대부분의 소스 코드가 공개됨. 이 저장소는 ARM Cortex-M 마이크로컨트롤러에서 작동하는 모든 표준 스마트워치 기능을 제공함
          + FreeRTOS로 구축되었으며, 메모리 관리, 그래픽, 시간 관리 모듈과 C 및 Jerryscript Javascript 엔진을 통해 작성된 커스텀 앱을 로드하고 실행할 수 있는 광범위한 프레임워크를 포함
          + 일부 독점 코드는 제거되었으며, 특히 칩셋 지원 및 Bluetooth 스택 관련 코드가 빠져 있음. 따라서 공개된 코드는 빌드 시스템 파일을 포함하지만, 그대로 컴파일하거나 링크할 수 없음
     * 향후 계획
          + 이번 공개가 Rebble 프로젝트의 커뮤니티와 자원봉사자들이 Pebble 시계 지원을 이어가는 데 도움이 되기를 희망함
          + 새로운 펌웨어 업데이트를 구축하기 위해서는 제거된 부분을 대체하고 몇 년간 유지되지 않은 소스 코드를 업데이트하는 상당한 작업이 필요함.

   Repebble - Pebble이 부활합니다
   Pebble의 원작자 였던 Eric Migicovsky가 Pebble을 다시 만들기 위해 움직이고 있네요.

        Hacker News 의견

     * Google에서 발생한 일은 단순히 우연히 일어난 것이 아니라, 열정적인 엔지니어가 개인 시간을 들여 추진한 결과임. 이러한 개인의 행동 덕분에 좋은 일이 발생하며, 이는 인정받고 축하받아야 함.
          + Google에 감사함을 표함. 그들이 꼭 해야 하는 일은 아니었지만, 해줬음에 감사함.
     * Pebble을 지속 가능하게 되살리려는 계획에 대한 블로그 포스트 작성함. 관심 있는 사람들은 rePebble.com을 방문해볼 것을 권장함.
     * Google이 오픈 소스화한 부분은 제한적이며, 일부 서드파티 요소는 제거됨.
          + 시스템 폰트, Bluetooth 스택, STM 주변기기 라이브러리, 음성 코덱, ARM CMSIS, Pebble 2 HR의 심박수 모니터 드라이버 등이 포함됨.
     * 공개된 코드에는 빌드 시스템 파일이 포함되어 있지만, 현재 상태로는 컴파일이나 링크가 불가능함.
     * Google의 이러한 행동은 ""Killed by Google""로 인한 피해를 완화하는 데 도움이 됨. 그러나 내부의 비효율적인 역학을 개선하는 것이 더 나을 것임.
     * Pebble 사용자로서, 이번 발표는 놀라운 일이며, 오래된 기기에 대한 개발과 수정이 가능해질 것이라는 희망을 가짐.
          + 새로운 스마트워치가 Pebble OS의 파생 버전으로 출시될 가능성도 기대함.
     * Pebble을 사용하다 배터리가 나가서 아쉬웠지만, Apple Watch로 넘어가게 됨. Apple Watch의 킬러 앱은 피트니스 트래커였음.
     * C 언어에 익숙하지 않은 사용자가 Pebble 코드에서 stack allocation에 대해 궁금해함. Pebble이 stack allocation만 사용하는지 질문함.
"
"https://news.hada.io/topic?id=18951","Nvidia의 5,890억 달러 DeepSeek Rout(패배)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Nvidia의 5,890억 달러 DeepSeek Rout(패배)

     * Nvidia Corp.의 주가가 중국 인공지능 스타트업 DeepSeek에 대한 투자자 우려로 인해 급락함.
          + 월요일에 17% 하락하며, 회사의 시장 가치에서 5,890억 달러가 사라짐.
          + 이는 미국 주식 시장 역사상 가장 큰 하락 기록임.
     * 시장에 미친 영향
          + Nvidia의 하락은 주요 지수에 큰 영향을 미침.
          + S&P 500 지수는 1.5% 하락, Nasdaq 100 지수는 거의 3% 하락함.
     * DeepSeek와 저비용 AI 모델
          + DeepSeek의 최신 AI 모델이 OpenAI와 Meta Platforms Inc.의 모델과 경쟁할 수 있는 것으로 평가됨.
          + 이 모델은 Apple Inc.의 앱 스토어에서 상위에 랭크됨.
          + Jefferies 분석가들은 이 모델이 현재 AI 비즈니스 모델에 대한 도전이 될 수 있다고 언급함.
     * 미국의 AI 투자와 대응
          + Meta는 AI 프로젝트에 대한 자본 지출을 최대 650억 달러로 늘릴 계획을 발표함.
          + OpenAI, SoftBank Group Corp., Oracle Corp.은 미국 전역에 데이터 센터와 AI 인프라 프로젝트를 구축하기 위한 1,000억 달러 규모의 합작 투자인 Stargate를 발표함.
          + 미국은 중국의 AI 발전을 저지하기 위해 고급 반도체 기술의 수출을 금지하고 있음.
     * Nvidia의 대응
          + Nvidia는 DeepSeek의 모델을 ""훌륭한 AI 발전""이라고 평가하며, 미국의 제한을 위반하지 않았다고 밝힘.
          + AI 모델 실행에는 많은 Nvidia GPU와 고성능 네트워킹이 필요하다고 덧붙임.

   원문제목이 Rout 인데 전투에서 패배해서 도망가다 라는 뜻이 있더군요

        Hacker News 의견

     * OpenAI와 같은 회사들이 DeepSeek 개선을 통해 40배 더 효율적인 훈련과 추론을 달성했음에도 불구하고, 동일한 컴퓨팅 자원을 보유하고 있다면, 40배의 컴퓨팅이 40배의 성능이나 출력 품질을 제공하는지, 아니면 출력 품질이 컴퓨팅에 의해 제한되지 않는지를 빠르게 알 수 있을 것임
     * 기술에 대한 지식이 시장과 주식 평가에 대한 올바른 사고를 보장하지 않는다는 것을 많은 댓글들이 보여줌
     * NVIDIA는 금광 열풍에 삽을 판매하는 회사로, 한 광부가 삽을 잘 사용하는 방법을 발견하고 그 비법을 공유했음. 금광 열풍이 실제든 거품이든 여전히 존재하며, NVIDIA는 제조 가능한 모든 삽을 판매할 것임
     * Fortune 100 기업들은 새로운 패러다임을 발명하거나 AGI에 가장 먼저 도달하기 위해 가장 큰 도구 창고를 원할 것임
     * DeepSeek의 영향으로 GPU 사용 효율성이 높아지면서 GPU 임대 비용이 급격히 감소할 수 있으며, 이는 Blackwell의 투자 가치를 측정하는 데 중요한 요소임
          + H100의 시간당 가격이 $8.42에서 약 $1.80으로 감소했음
          + H100은 700W를 소비하며, kWh당 $0.10로 가정할 수 있음
          + H100의 가격은 약 $30000임
          + DeepSeek 덕분에 더 많은 GPU가 사용 가능해지면서 가격이 더 떨어질 수 있음
     * LLM이 사실상 상품화되면서 가격 하한선이 생겼고, 이는 카드의 수익성에 앞서 있는 새로운 가치임
     * 새로운 Blackwell이 $70000인데, 고객이 새로운 카드에서 ROI를 얻을 수 있는 충분한 응용 프로그램이 있는지 궁금함
     * GPU의 시간당 비용이 떨어지면서 이전보다 투자 가치가 떨어질 수 있음. 특히 오래된 플랫폼에서 잠재력을 발휘할 수 있는 경우
     * 최근의 성장세는 영원히 지속될 수 없었으며, 이는 단지 4개월 전으로 돌아간 것임. 여전히 작년 이맘때보다 100% 상승한 상태임
     * Jevon의 역설에 대한 언급은 세 가지를 간과함
          + 효율성 향상에 따른 총수요 이동을 예측할 좋은 모델이 없음
          + 총수요는 NVIDIA의 시장 점유율과 같지 않으며, 대체 패러다임이 주목받으면 점유율이 떨어질 수 있음
          + 예측 시간 범위는 할인된 현금 흐름/평가 계산에 중요하며, 이에 대한 좋은 근거가 없음
     * NVIDIA는 여러 번 운이 좋았음. GPU는 PC 게임에 훌륭했고, 암호화폐 붐은 예기치 않은 승리였음. AI 붐도 경쟁을 없앤 결과임
     * 암호화폐와 달리 AI는 모든 소프트웨어 스택과 회사에 근본적임. NVIDIA에 대한 의존도가 줄어들 것임
     * Bloomberg의 차트에서 역사상 가장 큰 단일 주식 하락 10건 중 8건이 NVDA임
     * DeepSeek는 더 많은 컴퓨팅이 더 높은 능력으로 이어지지 않는다는 것을 증명하지 않음. 제한된 예산으로 놀라운 일을 했으며, 더 많은 AI 능력을 경제에 통합할 방법을 모르는 상황임
     * 전구의 효율성이 높아지면서 전구 사용이 증가했듯이, LLM의 효율적인 훈련도 칩 사용을 증가시킬 수 있음
"
"https://news.hada.io/topic?id=18954","코딩에서 DeepSeek R1이 유망한 결과를 냄","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      코딩에서 DeepSeek R1이 유망한 결과를 냄

     * llama.cpp 프로젝트에서 ""WASM 속도를 2배 향상""시키는 PR이 공개됨
          + SIMD 명령어를 활용하여 qX_K_q8_K 및 qX_0_q8_0 내적(dot product) 함수를 최적화
          + 대부분의 코드(99%)가 ""DeepSeek-R1""에 의해 자동 생성됨
          + DeepSeek-R1이 프롬프트를 처리하는 데 3~5분이 소요됨

DeepSeek-R1의 코드 생성 성능

     * PR 작성자는 DeepSeek-R1을 사용하여 최적화 코드 생성 및 개선했고, 본인은 테스트 코드 및 프롬프트 작성만 직접 수행
     * 사용된 프롬프트에서 확인 가능
     * DeepSeek-R1이 llm_groq.py를 최적화하는 과정에서 뛰어난 사고 체인을 보여줌

DeepSeek-R1 vs OpenAI o1 성능 비교

     * 같은 작업을 OpenAI o1에도 수행했지만, DeepSeek-R1의 결과가 더 뛰어남
     * 예시 코드에서 model_map을 최적화하는 사고 과정:
          + 처음에는 model_map이 필요하다고 판단
          + 이후 API 응답을 기반으로 동적으로 구성할 수 있다고 고민
          + 결국 model_map을 제거하는 것이 최적의 해결책이라고 결정

결론

     * DeepSeek-R1이 자동 코드 생성 및 최적화에서 뛰어난 성능을 보임
     * WASM에서 SIMD를 활용한 최적화로 llama.cpp 성능이 크게 향상됨
     * PR이 적용되면 WebAssembly 기반 애플리케이션의 실행 속도가 대폭 개선될 것으로 기대됨

   ollama 로 deepseek r1 14b 30b 70b 돌려봤는데 전체적인 추론은 좋은데 잔실수가 많네요. r1 은 정말 훌륭합니다

   8b 증류판 돌려봤느나 한국어 성능이 떨어지더군요

   코드 생성에는 유의미한 결과를 만들어내나봐요

        Hacker News 의견

     * DeekSeek-R1이 llama.cpp PR의 99% 코드를 작성했음. AI가 코딩에 큰 기여를 할 수 있음을 보여주는 사례임
          + Aider는 각 릴리스에서 새 코드의 약 70%를 작성하며, Sonnet 이후 AI 생성 코드 비율이 50% 이상으로 증가했음
          + 최근 몇 달 동안 Aider가 작성한 새 코드 비율은 70%이며, 기록은 82%임
          + Sonnet에서 DeepSeek V3로 코딩을 점점 더 많이 전환하고 있으며, R1을 실험 중이나 최근 API 중단으로 어려움을 겪고 있음
     * DeepSeek-R1-Distill-Qwen-32B를 Ollama를 통해 노트북에서 실행 중이며, 약 20GB의 RAM이 필요함
          + 코드 리팩토링에 유용하며, 코드의 실수를 발견하는 데 도움을 줌
     * DeekSeek-R1이 llama.cpp PR의 99% 코드를 작성한 것은 주목할 만한 이정표임
     * DeepSeek가 ARM SIMD 코드를 WASM 코드로 변환하도록 요청했으며, 이는 코드 최적화에 도움이 됨
          + SIMD 명령어를 다루는 것은 고급 코드 최적화보다 더 어려운 작업임
     * LLM이 코딩에 유용하지 않다는 주장은 잘못된 것임
          + AI가 개발자를 대체할 수 있다는 주장은 완전히 허풍이 아님
          + 더 많은 애플리케이션에 대한 수요가 없다면 일자리가 줄어들 수 있음
     * o1 Pro와 Deepseek R1을 사용하여 e2e 테스트를 작성했으며, Deepseek가 더 나은 테스트를 작성했음
          + 테스트는 통과하지 못했음
     * Xuan-Son은 ARM NEON을 SIMD로 변환하는 것 외에도 새로운 접근 방식을 개발하도록 요청했음
          + 주말 프로젝트로 wllama를 최적화하려 했으며, LLM을 사용하여 성공적으로 작업을 완료했음
     * DeepSeek R1을 사용하여 llm_groq.py 플러그인을 재작성했으며, 이는 Llama 모델을 미세 조정한 deepseek-r1-distill-llama-70b로 수행됨
     * AGI가 몇 달 내에 도래할 가능성이 있으며, 훈련은 세 단계로 진행될 것임
          + 다양한 모델을 훈련하여 장기적인 생존을 위한 다양성을 확보하는 것이 중요함
"
"https://news.hada.io/topic?id=18927","마이크로소프트 365 Copilot 출시는 완전 재앙이었음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    마이크로소프트 365 Copilot 출시는 완전 재앙이었음

     * Microsoft가 새해 초, 기존 Microsoft 365(이전 명칭: Office 365)에 갑작스러운 가격 인상과 명칭 변경을 적용했음
     * 구독자 수가 전 세계적으로 8,400만 명에 달하는 인기 있는 생산성 제품에 대한 큰 변화였음
     * AI 기능 도입을 내세워 가격을 30% 정도 인상했고, 이로 인해 사용자들의 반응이 대체로 부정적이었음
     * 제품명과 로고가 바뀌면서 기존 Microsoft 365가 Microsoft 365 Copilot이라는 이름으로 변경되었음

가격 인상에 대한 문제

     * Microsoft는 12년 동안 Microsoft 365의 가격을 한 번도 올리지 않았음
     * 하지만 이번에는 “AI 기반 기능”이라는 이유로 30%라는 큰 폭의 인상을 단행했음
     * 넷플릭스(Netflix)처럼 주기적으로 소폭 인상을 했다면 반발이 덜했을 것이라는 의견이 많았음

사용자들은 AI에 비용을 지불하기 원치 않음

     * AI가 일부 영역(코드 생성, 대규모 데이터 패턴 분석 등)에서 유용함을 보이지만, 일상적인 Microsoft 365 Family/Personal 사용자들이 체감할 AI 기능은 아직 미흡함
     * Copilot이 Word에서 작성해주는 문서는 한계가 있으며, PowerPoint에서 사진 폴더를 프레젠테이션으로 만드는 등의 기능이 가능해도 혁신적으로 보이진 않는다는 반응임
     * 직장 계정과 개인 계정을 동시에 사용하는 경우, Copilot 기능이 정상적으로 작동하지 않는 등 구현상의 문제도 존재함

공지 방식에도 문제가 있었음

     * 연간 구독자를 대상으로 적절한 이메일 안내 없이, 안드로이드 기기 팝업 메시지 등이 선행되어 당황스럽다는 사례가 보고되었음
     * 일부 유럽 지역 사용자는 €10에서 €13,000으로 표시되는 버그성 알림을 받았다는 사례도 있었음
     * 새 로고 및 기능이 강제 설치된 형태로 보이면서 “원치 않는 업데이트”라고 느끼는 사용자 불만이 나타났음

“기능을 끄면 되지 않나”라는 의문

     * Microsoft는 Word에만 Enable Copilot 옵션을 배치했지만, 기본으로 활성화되어 있어 직접 체크박스를 해제해야만 꺼짐
     * Excel, OneNote, PowerPoint 등에는 아직 해당 옵션이 없어 2025년 2월에야 추가될 예정이라고 안내 중임
     * 연결된 기능을 전부 비활성화하면 OneDrive 파일이 사라진 것처럼 보이는 문제도 일어나 주의가 필요함

Classic 옵션은 얼마나 유지될까

     * Microsoft 365를 해지하려고 하면 Classic 구독 옵션을 제시함
     * 이는 인상 전 가격과 동일한 구독 형태이지만, 신규 가입자는 선택할 수 없고 일정 시간이 지나면 이 옵션이 사라질 것이라는 전망이 많음

Microsoft가 이렇게 하는 이유

     * 사용자들은 이번 Copilot 도입 효과에 대해 회의적이지만, 30% 인상으로 인한 매출 증대는 상당할 것으로 예상됨
     * 일부 구독자가 해지해도 전체 매출이 충분히 상승한다는 계산이 가능하다는 분석임
     * Microsoft 365 Copilot의 초기 시행 과정에서 나타난 불만들이 당분간은 크게 반영되지 않을 것이라는 예측도 있음

        Hacker News 의견

     * Office를 사용하지 않은 지 오래되었지만, 문서를 작성할 때 다른 것을 사용하는 것은 상상할 수 없다는 의견이 있음. AI 기능이 포함되지 않은 Office의 마지막 버전을 구매하고 싶어하는 사용자가 있음. 이는 향후 10년 동안 Microsoft 소프트웨어를 구매하지 않을 수도 있음을 의미함.
     * Word for Mac에서 Copilot이 커서 옆에 항상 표시되며 이를 끌 수 없는 점에 불만을 가짐. Word의 인쇄 레이아웃 기능을 좋아하며, 다른 프로그램으로 전환하고 싶지 않음. AI 기능을 강제로 사용하게 만드는 것에 대한 불만이 있음.
     * 가격 인상보다는 제품과 서비스가 AI와 클라우드 기능으로 혼합되어 이해하기 어려운 점에 불만을 가짐. Copilot이라는 이름 아래 모든 것이 통합되어 구매하는 것에 대한 명확한 이해가 어려워짐.
     * 30년 동안 잘 알려진 Office 브랜드를 없애고 신뢰할 수 없는 AI 생성기를 주요 브랜드로 만드는 것이 용감한 결정이라는 의견이 있음.
     * Apple이나 OSS 세계를 무조건적으로 사랑하거나 싫어하는 사람들을 이해하지만, Microsoft에 대해서는 강한 감정을 느끼기 어렵다는 의견이 있음. 회사에 비전, 방향성, 영혼, 계획이 없다고 느껴짐.
     * Microsoft가 AI에 집중하고 Office 365가 중요한 만큼, Copilot for 365의 품질이 충격적일 정도로 나쁘다는 의견이 있음.
     * 가족 구독의 경우 새로운 AI 권한이 주 계정 소유자에게만 제공되고 다른 가족 구성원에게는 공유되지 않는 점이 이상하다는 의견이 있음.
     * AI가 워드 프로세서에 항상 존재하게 되면서 고등학교 에세이의 종말을 의미할 수 있다는 우려가 있음. ChatGPT를 피하고 싶어도 AI를 끌 수 없는 상황임.
     * 다음 주에 또 다른 8개의 Teams 버전이 출시될 예정이며, 모두 Teams라는 이름을 가지고 있지만 아이콘이 미묘하게 다르고 라이선스 등급에 따라 하나만 로그인할 수 있다는 불만이 있음.
     * Microsoft는 제품 브랜딩 측면에서 개선이 필요하다는 의견이 있음. Microsoft 365라는 이름이 사무용 소프트웨어로 적절하지 않았으며, ""copilot""을 추가하는 것은 기준이 너무 낮다는 의견이 있음. 어떻게 승인되었는지 의문임.
"
"https://news.hada.io/topic?id=18957","애플 CPU에 대한 새로운 위험한 공격들 : SLAP, FLOP","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  애플 CPU에 대한 새로운 위험한 공격들 : SLAP, FLOP

SLAP: 데이터 추측 공격 (data Speculation attacks via Load Address Prediction)

     * SLAP 공격은 Apple Silicon의 M2/A15 CPU에서 발생하는 새로운 추측 실행 공격임.
     * 로드 주소 예측기(LAP) 를 통해 메모리 접근 패턴을 기반으로 다음 메모리 주소를 예측하여 성능을 향상시킴.
     * 잘못된 예측 시, CPU가 접근해서는 안 되는 데이터를 추측 실행으로 처리하여 보안 위험을 초래함.
     * 실제 사례로, Safari 웹 브라우저에서 원격 공격자가 이메일 내용과 브라우징 행동을 복구할 수 있는 공격을 시연함.

FLOP: 잘못된 로드 출력 예측(False Load Output Predictions)

     * FLOP 공격은 Apple M3/A17 CPU에서 데이터 의존성을 예측하여 발생하는 또 다른 추측 실행 공격임.
     * 로드 값 예측기(LVP) 를 통해 메모리 서브시스템이 반환할 데이터 값을 예측하여 성능을 향상시킴.
     * 잘못된 예측 시, 메모리 안전을 위한 프로그램 논리의 중요한 검사를 우회하여 메모리에 저장된 비밀을 유출할 수 있는 공격 표면을 열게 됨.
     * Safari와 Chrome 웹 브라우저에서 위치 기록, 캘린더 이벤트, 신용카드 정보 등을 복구하는 공격을 시연함.

데모

     * Proton Mail의 받은 편지함 데이터 유출: M3 CPU의 LVP를 WebKit 내의 JavaScript 코드로 훈련하여 받은 편지함 내용을 주소 공간에 가져옴.
     * 위대한 개츠비 읽기: Apple M2 CPU에서 LAP를 사용하여 비밀 문자열을 복구하는 개념 증명 시연.
     * 해리 포터 읽기: Apple M3 CPU에서 LVP를 사용하여 잘못된 배열 인덱스를 예측하고 문자열의 문자를 참조하는 개념 증명 시연.

연구진

     * Jason Kim, Jalen Chuang, Daniel Genkin (Georgia Institute of Technology)
     * Yuval Yarom (Ruhr University Bochum)

SLAP 및 FLOP FAQ

  Is my Apple device affected?

     * Mac 노트북: 2022년 이후 출시된 모든 모델 (MacBook Air, MacBook Pro)
     * Mac 데스크톱: 2023년 이후 출시된 모든 모델 (Mac Mini, iMac, Mac Studio, Mac Pro)
     * iPad: 2021년 9월 이후 출시된 모든 iPad Pro, Air, Mini 모델
          + Pro 6세대 및 7세대, Air 6세대, Mini 6세대
     * iPhone: 2021년 9월 이후 출시된 모든 모델
          + iPhone 13, 14, 15, 16 전 모델 및 SE 3세대

  Why are the SLAP and FLOP attacks significant?

     * 보호 메커니즘: 일반적으로 웹 브라우저는 두 개의 열린 웹페이지가 서로 격리되도록 하여 하나의 페이지가 다른 페이지의 콘텐츠를 읽지 못하도록 보호
     * 취약점: SLAP 및 FLOP는 이러한 보호를 무력화하여, 공격자 페이지가 타겟 페이지의 민감한 데이터를 읽을 수 있게 만듦
          + 노출되는 데이터: 위치 기록, 신용카드 정보 등

  How can I defend against SLAP and FLOP?

     * FLOP는 완화 방안이 있지만, 이는 소프트웨어 벤더의 패치가 필요하며 사용자가 직접 해결할 수 없음
     * Apple은 향후 보안 업데이트에서 이 문제를 해결할 것이라 밝혔으며, 자동 업데이트를 활성화하고 최신 OS 및 애플리케이션을 유지하는 것이 중요함

  What about other processor vendors?

     * Intel, AMD, Qualcomm, Ampere 등의 제품에서는 아직 SLAP 또는 FLOP의 징후를 발견하지 못함

  What about other web browsers?

     * Firefox 등 기타 브라우저는 테스트하지 않음

  Can I detect if someone is using SLAP or FLOP on my device?

     * SLAP 및 FLOP는 마이크로아키텍처 기반 공격으로, 시스템 로그에 흔적을 남기지 않음

  Are any malicious actors abusing SLAP or FLOP in the wild?

     * 현재까지 SLAP 또는 FLOP가 실제로 사용된 증거는 없음

  When did you notify Apple?

     * SLAP: 2024년 5월 24일 Apple에 보고
     * FLOP: 2024년 9월 3일 Apple에 보고

기술적 질문

  사이드 채널(Side Channel)이란?

     * 컴퓨터 하드웨어 구현의 취약점을 악용하는 공격
          + 소프트웨어 버그 대신 하드웨어 동작에서 발생하는 정보 유출을 활용
     * 데이터 유출 경로
          + 소리, 전자기파, 열 발산 등의 물리적 현상
          + CPU의 공유 자원(코어, 캐시, 내부 버퍼 등)에서 발생하는 경쟁(contention)
     * CPU 경쟁으로 인한 정보 노출
          + 시간 측정, 전력 소비 등의 간접 변수를 통해 타겟의 행동 패턴을 유추

  추론 실행(Speculative Execution) 공격이란?

     * 추론 실행: CPU가 제어 흐름을 예측하여 명령을 미리 실행하는 최적화 기법
          + 예측이 틀리면 상태를 되돌리지만, 캐시 등 미세한 흔적이 남음
     * Spectre 공격
          + 잘못된 흐름으로 예측 실행을 유도
          + 예측 실행 중 민감한 데이터를 사용하는 명령이 실행되면, 데이터 값이 간접적으로 노출됨
     * SLAP 및 FLOP에서의 확장
          + Apple CPU는 제어 흐름뿐 아니라 데이터 흐름까지 예측
          + FLOP는 잘못된 데이터 값에 대한 명령 실행을 유발

  SLAP 동작 방식

    1. Load Address Prediction (LAP) 분석
          + 특정 메모리 주소 패턴을 학습시키면, LAP가 다음 주소를 예측하여 데이터 작업 실행
          + 하드웨어 사전 가져오기(prefetching)와 다르게, 예측된 데이터로 명령 실행
    2. Safari 취약점 악용
          + iLeakage가 발견한 Safari의 격리 문제를 기반으로, 서로 다른 웹페이지가 동일 프로세스에서 처리되도록 강제
          + 공격자 웹페이지가 타겟 웹페이지의 문자열 데이터에 접근

  FLOP 동작 방식

    1. Load Value Prediction (LVP) 분석
          + 동일한 데이터 값이 반복 반환되면, LVP가 결과를 예측
          + 잘못된 메모리 값을 사용하여 명령 실행
    2. Safari 및 Chrome 공격
          + Safari: JavaScript 데이터 구조의 유형 정보를 예측해 잘못된 데이터 구조로 명령 실행
          + Chrome: WebAssembly 함수 호출 시 잘못된 인수로 인해 메모리 읽기 오류 발생

  SLAP과 FLOP의 차이점

     * SLAP: Load Address Predictor (LAP)를 사용해 문자열 할당 근접성을 악용
     * FLOP: Load Value Predictor (LVP)를 사용해 데이터 무결성 검사를 우회
     * LAP vs LVP
          + LAP: 다음 메모리 주소를 예측
          + LVP: 다음 메모리 값 반환을 예측
          + LAP는 긴 학습 과정이 필요하지만, 패턴 예측이 가능

  JavaScript와 WebAssembly란?

     * JavaScript: 웹 콘텐츠를 동적으로 업데이트하는 언어
     * WebAssembly: 고성능 웹 애플리케이션을 위한 언어로, JavaScript와 연동
     * 공격 영향
          + 두 언어 모두 브라우저에서 자동 실행되므로, 악성 코드를 다운로드하지 않아도 공격 가능

  Safari와 Chrome을 공격 대상으로 선택한 이유

     * Safari:
          + 사이트 격리(Site Isolation)가 없어 서로 다른 도메인의 웹페이지가 동일 프로세스에서 실행 가능
          + LAP 및 LVP 기반 공격 표면 확대
     * Chrome:
          + 사이트 격리가 적용되었지만, 일부 경우에 동일 사이트의 서브도메인이 하나의 프로세스에서 처리됨
          + LAP 및 LVP 공격이 여전히 가능

연구 지원

     * 이 연구는 AFOSR, Alfred P Sloan Research Fellowship, ARC Discovery Project, DARPA, DFG, Qualcomm, Cisco, Zama의 지원을 받음.

        Hacker News 의견

     * SLAP 데모는 방어 심층이 어떻게 취약점의 실행 가능성을 좌우할 수 있는지를 잘 보여줌. Safari의 취약점은 window.open 호출 시 새로운 창을 개별 프로세스로 격리하지 못하기 때문에 발생함
     * M3에서 LVP 존재를 역설계하는 부분이 흥미로움. 8바이트 로드 시 로드 값이 0일 때만 LVP가 활성화됨. 이는 메모리 안전을 위한 대책일 수 있음
     * Spectre와 Meltdown 공격 및 관련 논문은 처음 보는 사람들에게 읽어볼 가치가 있음
     * Safari에서 캐시 히트와 미스를 구분하기 위해 NOT 게이트 기반 캐시 증폭 원리를 사용함. 웹 환경에서도 캐시 히트와 미스를 구분할 수 있음
     * Chrome의 사이트 격리가 완벽한 완화책이 아님을 보여줌. 동일 사이트의 두 하위 도메인이 하나의 프로세스로 병합될 수 있는 코너 케이스가 존재함
     * 하드웨어 취약점 발표를 위한 마케팅 문화가 이상하게 느껴짐. 왜 단순히 취약점을 보고하고 논문을 발표하는 대신 커스텀 도메인, 로고, FAQ 등을 만드는지 의문임
     * 작년에 Intro to Cyber Security 수업에서 Daniel Genkin 교수를 만났음. Apple CPU에 대한 투기 공격을 연구 중이라고 했음. 보안은 거의 보장되지 않음을 이해하게 됨
     * 신뢰할 수 없는 사이트에서 기본적으로 js를 비활성화하는 경향이 있음. 이는 우리가 기계에서 실행하는 누군가의 프로그램임
     * Apple이 최근 macOS와 iOS에 보안 수정을 포함한 마이너 버전 업데이트를 발표함. 이 취약점을 해결했는지 확인한 사람이 있는지 궁금함
     * RUB가 고급 공격 보안 작업의 글로벌 중심지가 된 것 같음. 10년 전에는 주의를 기울이지 않았던 것인지, 아니면 새로운 현상인지 궁금함
"
"https://news.hada.io/topic?id=18975","OpenAI, DeepSeek가 자사 모델을 훈련에 사용했다는 증거를 확보했다고 밝혀","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            OpenAI, DeepSeek가 자사 모델을 훈련에 사용했다는 증거를 확보했다고 밝혀

     * OpenAI는 중국 AI 스타트업 DeepSeek이 자사의 독점 모델을 사용해 오픈소스 경쟁 모델을 훈련했다는 증거를 발견했다고 Financial Times에 밝힘
     * DeepSeek이 대형 모델의 출력을 활용해 작은 모델을 효과적으로 훈련하는 ""지식 증류(distillation)"" 기법을 사용한 것으로 의심됨
     * 증류는 AI 업계에서 일반적인 방식이지만, OpenAI는 DeepSeek이 이를 이용해 독자적인 모델을 개발하는 것이 자사 서비스 약관을 위반한 행위라고 주장
     * OpenAI 약관에 따르면 사용자는 OpenAI의 출력을 복사하거나 이를 이용해 경쟁 모델을 개발할 수 없음

DeepSeek의 모델 성능 및 시장 반응

     * DeepSeek의 R1 추론 모델 출시가 기술 업계와 투자자들을 놀라게 함
     * DeepSeek은 비교적 적은 비용으로 높은 성능을 내는 모델을 구축해 업계의 관심을 끌고 있음
     * Nvidia의 주가는 월요일 17% 하락하며 5,890억 달러의 시가총액이 증발했으나, 화요일 9% 반등
     * Nvidia 하락의 원인은 AI 하드웨어에 대한 수요 감소 우려 때문

OpenAI와 Microsoft의 대응

     * OpenAI와 Microsoft는 작년에 DeepSeek이 OpenAI의 API를 사용해 증류를 시도한 것으로 의심되는 계정을 조사하고 차단함
     * 이와 관련한 최초 보도는 Bloomberg에서 나옴
     * Microsoft는 이에 대해 언급을 피했고, OpenAI도 추가적인 논평을 거부

전문가들의 의견

     * 전 트럼프 행정부의 AI 및 암호화폐 담당자 David Sacks는 ""IP 도용이 있었을 가능성이 있다""고 주장
     * 일부 AI 연구자들은 DeepSeek의 모델이 GPT-4의 출력을 학습한 흔적이 보인다고 분석
     * UC Berkeley의 AI 박사 과정 연구원 Ritwik Gupta는 AI 업계에서 상업용 LLM의 출력을 활용해 모델을 학습하는 것이 일반적인 관행이라고 설명

OpenAI의 대응 및 향후 전망

     * OpenAI는 중국을 비롯한 여러 기업이 미국 AI 기업의 모델을 증류하려고 시도하고 있다고 경고
     * IP 보호를 위해 모델의 최첨단 기능 공개를 신중히 결정하고 있으며, 미국 정부와 협력해 기술 유출을 방지하는 것이 중요하다고 강조
     * 하지만 OpenAI 역시 뉴욕 타임스를 비롯한 언론사 및 저작권 소유자들로부터 무단 데이터 사용 혐의로 소송을 당하는 등 자체적인 저작권 논란에 직면

        Hacker News 의견

     * DeepSeek가 OpenAI의 데이터를 사용하여 훈련한 것은 불공정하다는 주장과, OpenAI도 인터넷에서 데이터를 수집하여 훈련했다는 점에서 이 주장은 부적절함
          + DeepSeek가 o1 수준의 성능을 처음부터 재현했다고 주장하는 것은 사실이 아닐 수 있으며, 이는 훈련 효율성에 대한 의문을 제기함
          + DeepSeek의 R1 논문은 증류가 매우 강력하다는 것을 보여주며, 만약 DeepSeek가 o1 출력을 사용하여 모델을 훈련했다면 이는 훈련 효율성에 대한 의문을 제기할 수 있음
     * DeepSeek의 오픈 소스 및 MIT 라이선스 공개는 큰 인재를 모을 수 있는 계기가 될 것이라는 의견
          + 새로운 기술의 오픈 소스화는 과거에도 항상 발전을 이끌어왔음
          + OpenAI는 IP 보호를 위해 미국 정부와 협력하고 있으며, DeepSeek가 TikTok처럼 금지될 가능성도 있음
     * r1이 o1 이후의 세상에서 만들어졌으며, 다른 모델들이 r1을 증류할 수 있는 상황임
          + o1에서 증류하는 것이 DeepSeek의 비용 주장을 약화시키지 않는다는 의견
          + OpenAI가 도덕적 또는 윤리적 우위를 가지고 있는지에 대한 의문
     * DeepSeek가 OpenAI로부터 훈련을 받았다면, 이는 ""pennies on the dollar""로 처음부터 훈련된 것이 아니며, 기술적 돌파구가 아닐 수 있음
          + 이는 아직 사실인지 확인되지 않았음
     * OpenAI는 현재 약한 위치에 있으며, 구글이나 마이크로소프트처럼 법적 자원을 활용할 수 없음
          + OpenAI가 법적 문제로 경쟁사를 억누르는 전략은 효과적이지 않을 것이라는 의견
     * 철도 산업과 유사하게 AI도 경쟁이 비용을 낮추고, 대부분의 투자들이 큰 부를 창출하지 못할 가능성이 있음
          + Nvidia, OpenAI, DeepSeek 등의 대기업들이 AI에 투자하지만, 실질적인 수익을 창출하지 못할 수도 있음
     * OpenAI가 콘텐츠를 무단으로 사용하고, AI 중독 스크립트를 우회하기 위해 많은 비용을 지출하는 것에 대한 비판
          + DeepSeek가 OpenAI 데이터를 재활용한 것이라면, 이는 공학적 돌파구가 아니라는 의견
     * OpenAI의 모델은 개인 전자책 토렌트 트래커에서 대량으로 수집된 전자책을 기반으로 훈련되었음
          + 전자책은 epub 형식으로 변환 및 정리되어 공공 데이터 저장소에 호스팅되었음

   OpenAI는 뉴욕타임스와 소송중인데, DeepSeek는 이렇게 되면 그 소송에서 자유로운건가요? :)
"
"https://news.hada.io/topic?id=19024","앱 내 광고를 통한 위치 추적: 모든 사람이 나의 위치를 알고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 앱 내 광고를 통한 위치 추적: 모든 사람이 나의 위치를 알고 있음

     * 앱스토어와 Google Play에서 발견된 2000개 이상의 앱이 사용자 동의 없이 위치 정보를 수집한 정황이 발견됨
     * 본 글의 저자는 이러한 위치 정보를 직접 구매하여 스스로를 추적할 수 있을지 실험해보았음
     * 결론적으로 IP 주소나 위치 정보가 여기저기서 유출되고, 광고 프로토콜(예: OpenRTB)을 통해 엄청난 사용자 정보가 오간다는 사실을 확인함
     * 그러나 실제로 데이터를 구매하려면 수만~수십만 달러에 달하는 비용이 필요하며, 유럽 사용자 데이터가 특히 더 고가임
     * 그럼에도 불구하고 어디서든 구입이 가능함을 재확인했음

시작점

     * 실험용 iPhone 11을 공장 초기화하고 새 Apple ID로 설정해두었음
     * 네트워크 트래픽을 분석하기 위해 Charles Proxy와 SSL 인증서를 설치해 HTTPS 요청을 복호화했음
     * 예시 앱으로 “Stack”이라는 간단한 게임을 선택해 실행하자, 매우 짧은 간격으로 광고 및 분석용 요청이 다수 발생함

대량의 요청

     * 앱을 실행한 지 1분 만에 어마어마한 수의 네트워크 요청을 확인했음
     * 요청마다 위치 정보, IP 주소, 광고 식별자, 디바이스 세부 정보 등 다양한 데이터가 포함됨
     * 하나하나 살펴본 결과, 사용자 동의를 하지 않아도 민감 정보가 여러 곳으로 전송되는 양상이 드러남

Unity [ads]

     * Unity Ads SDK가 앱에 탑재되어 있을 경우, 위치 정보와 IP 주소 등 여러 정보를 Unity 서버에 전송함
     * “ifv”(ID For Vendor)라는 식별자를 포함해 Wi-Fi 연결 시 위치 정보(경도·위도), 타임스탬프 등이 수집됨
     * Unity가 Moloco Ads 등 DSP 업체와 연계하면서 광고 입찰 과정에서 이러한 정보가 제3자에게까지 넘어감

Facebook은 왜 등장함?

     * Meta나 Facebook 관련 앱을 전혀 설치하지 않았음에도, 앱 내 광고 통신 과정에서 Facebook에 IP 주소와 타임스탬프가 전송됨
     * Facebook이 다른 경로를 통해 동일 IP를 사용하는 계정을 파악할 경우, 유저의 메타 서비스 이용 기록과 결합 가능성이 높음
     * 이는 사용자에게 사전에 제대로 고지되지 않으며, 사실상 동의 절차도 부재함

화면 밝기는 왜 필요한 것임?

     * Unity Ads가 화면 밝기, 배터리 상태, 메모리 용량, 헤드셋 연결 여부 등 디바이스 상태 정보를 요청함
     * 이런 정보는 맞춤 광고 및 동적 요금 제안 등에 악용될 수 있다는 우려가 있음
     * Uber가 배터리 상태를 기준으로 요금을 조정한다는 루머처럼, 기술적으로 가능성이 열려 있음

ID에 대해 알아보기

     * ifv(ID for Vendor)는 앱 개발사 단위로 부여되는 식별자임
     * advertisingTrackingId(IDFA)는 여러 앱에 걸쳐 동일 사용자를 추적할 수 있게 해주는 식별자임
     * 추적 거부를 설정하면 IDFA는 “0000…” 형태로 발급되지만, IP나 기타 다양한 ID가 여전히 전송되어 사실상 우회 추적이 가능함

추적 허용 여부의 차이

     * 광고 추적을 “허용”으로 하든 “거부”로 하든, 위치와 IP, 브라우저 정보 등은 계속 전송됨
     * 단지 IDFA가 노출되지 않을 뿐이며, 다른 식별 요소가 충분히 많아 동일 사용자를 판별할 수 있는 여지가 큼
     * Facebook 같은 플랫폼은 IP를 통해 사용자를 간접 식별하는 능력이 있음

데이터는 어떻게 흘러감?

     * 앱 → Unity [ads] → Molocoads → 광고주(Bwin 등) 순으로 데이터가 전달됨
     * Unity처럼 SSP(Supply-Side Platform)가 앱 내 SDK에서 데이터를 수집하고, DSP(Demand-Side Platform)인 Molocoads가 이를 바탕으로 광고 입찰을 수행함
     * 데이터 중개 과정에서 광고주 이외에도 수많은 브로커가 위치 정보, 기기 정보 등을 얻을 수 있음

데이터 브로커

     * Datarade나 Databricks 등 시장에서는 MAID(광고 ID) 기반 사용자 위치 정보를 거래하고 있음
     * Redmob 같은 업체는 실시간 위치 데이터(5초 이내 업데이트)를 판매하기도 함
     * AGR Marketing Solutions 등은 MAID와 실제 PII(개인 식별 정보)를 매칭해 이름, 주소, 전화번호 등을 넘기는 데이터도 판매함

직접 스스로 추적하기

     * 앱을 설치해 일상적으로 위치 정보가 수집되도록 함
     * IP+위치+광고 ID 데이터를 광고사나 브로커들이 확보함
     * 그 후 MAID <> PII 데이터세트를 구매해 본인의 IDFA 또는 IP를 기반으로 실제 신상 정보를 결합함
     * 결과적으로 유저 스스로 자신의 위치 데이터를 구매·조합해 추적할 수 있음

마무리

     * 전 세계 광고 생태계에서 이뤄지는 데이터 거래는 각 단계를 따로 보면 합법적으로 보이지만, 전체를 보면 심각한 사생활 침해 요소가 됨
     * 이러한 문제는 최근 Gravy Analytics 등 대규모 유출 사건으로 재조명되었음
     * 광고 추적 거부를 설정해도 완벽한 보호가 보장되지 않음
     * 이용자가 앱 사용 시 정보가 어디로, 어떻게 흘러가는지 알기 어렵다는 한계가 분명함

        Hacker News 의견

     * 개인정보 보호 문제로 연락처 정보가 쉽게 판매될 수 있음. TikTok 같은 앱에서 연락처를 공유하면 이름, 전화번호, 이메일 등이 유출될 수 있음. 고객 서비스에 문제가 있을 때, 경영진의 연락처를 구매하여 직접 연락하는 방법을 사용했음. 그러나 CashApp 계정이 종료되는 등의 부작용이 있을 수 있음
     * 개인정보 관련 기사들이 기술적 세부사항이 부족하거나 과장된 경우가 많음. Mozilla의 차량 개인정보 정책 연구가 있지만, 실제 기술적 세부사항은 부족함. 예를 들어, 차량이 대화를 녹음하는지, 데이터가 어디에 저장되는지, 제3자에게 전송되는지 등의 질문이 있음. 이러한 세부사항이 없으면 기사들은 불신만 조장할 수 있음
     * Bilt라는 회사로 임대료를 지불하는데, Walgreens에서 쇼핑할 때마다 구매 영수증을 이메일로 받음. 민감한 항목은 제외되기를 바람. 데이터가 Walgreens에서 임대 회사로 어떻게 전달되는지 궁금하지만, 현금이나 공인 수표를 사용하는 것이 나을 수도 있음
     * IT 업계 종사자들이 광고와 개인정보 판매 및 추적 산업을 구축하면서 동시에 가장 크게 불평하는 것이 흥미로움
     * 화면 밝기, 메모리 양, 현재 볼륨, 헤드폰 착용 여부 등의 정보가 사용자를 비식별화하는 데 사용될 수 있음
     * LTE가 더 정확한 위치 정보를 제공할 것이라는 주장은 잘못된 것임. 앱은 위치 권한이 없으면 cellid 정보를 얻을 수 없음. 무료 앱이 정확한 위치를 수집한다고 주장하지만, 실제로는 정확하지 않음
     * 광고 교환이 IDFA 없이도 교차 앱 추적을 할 수 있는 방법을 찾을 수 있을 것이라는 우려가 있음. 이론상으로는 금지되어 있지만, 이를 강제하기 어려움
     * Reddit 앱이 내 휴대폰에서 권한이 없지만, 위치 기반으로 커뮤니티를 추천함. 여행 중 방문한 도시마다 추천됨
     * 웹사이트로 대체 가능한 모바일 앱 사용을 피할 것을 권장함
"
"https://news.hada.io/topic?id=18962","Qwen2.5-1M - 1백만 토큰까지 지원하는 Qwen을 자체 배포하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Qwen2.5-1M - 1백만 토큰까지 지원하는 Qwen을 자체 배포하기

     * Qwen2.5-1M는 컨텍스트 길이를 1M 토큰까지 지원하는 고성능 오픈소스 모델로 2달전에 공개했던 Qwen2.5-Turbo를 향상시킴
     * 2개의 체크포인트 공개: Qwen2.5-7B-Instruct-1M과 Qwen2.5-14B-Instruct-1M
          + Qwen 모델 최초로 1M 토큰 컨텍스트를 지원
     * 추론 프레임워크 공개: vLLM 기반의 최적화된 추론 프레임워크 제공. 희소 주의집중(sparse attention) 기법 통합으로 1M 토큰 입력을 3~7배 더 빠르게 처리
     * 기술 보고서 공개: 학습 및 추론 프레임워크 설계, 실험 결과에 대한 상세한 기술 보고서 공유

모델 성능

  장문 컨텍스트 작업

     * Passkey Retrieval 평가: 1M 토큰 문서에서 정보를 정확히 추출. Qwen2.5-7B 모델은 약간의 오류 발생, Qwen2.5-14B는 높은 정확도 유지
     * 복잡한 작업 평가:
          + RULER, LV-Eval, LongbenchChat 등에서 Qwen2.5-1M 모델은 128K 모델보다 우수한 성능
          + 특히 Qwen2.5-14B는 GPT-4o-mini와 비교해도 전반적으로 높은 성능

  단문 컨텍스트 작업

     * 단문 작업에서도 Qwen2.5-1M 모델이 128K 버전과 동일한 성능 유지
     * GPT-4o-mini와 비슷한 단문 작업 성능을 보이면서도 최대 8배 더 긴 컨텍스트를 지원

핵심 기술

  장문 컨텍스트 학습

     * 4K에서 256K로 컨텍스트 길이를 점진적으로 확장
     * RoPE 기반 조정, 단계별 학습 및 강화 학습 적용
     * Dual Chunk Attention(DCA) 기법으로 1M 토큰 컨텍스트로의 확장 지원
     * DCA가 학습 없이도 장문에서 높은 정확도 유지

  희소 주의집중(Sparse Attention)

     * MInference 기반 희소 주의집중 도입
     * Chunked Prefill 통합: 메모리 사용량을 96.7% 절감
     * Length Extrapolation 통합: DCA와 결합하여 정확도 및 추론 효율성 향상
     * Sparsity Refinement on Long Sequences: 최적화된 희소화 구성 도입으로 장문에서 성능 손실 최소화
     * 결과적으로 1M 토큰 길이에서 3.2배~6.7배 추론 속도 향상

로컬 환경에 Qwen2.5-1M 배포 하기

  시스템 요구 사항

     * CUDA 12.1/12.3, Python 3.9~3.12
     * VRAM 요구 사항:
          + Qwen2.5-7B: 120GB 이상
          + Qwen2.5-14B: 320GB 이상

  설치 및 실행

    1. vLLM 저장소 클론 후 설치
    2. OpenAI 호환 API 서비스 시작
    3. Curl 또는 Python으로 모델 상호작용 가능

앞으로의 방향

     * 더 효율적인 학습, 모델 아키텍처 및 추론 방법 연구 중
     * 짧은 문맥과 긴 문맥 모두에서 우수한 성능을 목표로 개발
     * 장문 컨텍스트 모델의 실용적 활용성을 확장해 나갈 계획

   로컬에서 한국어 잘 굴러가려나요

   2023-08-03 Alibaba, 오픈소스 AI 모델 QWEN 공개
   2024-04-25 Qwen1.5-110B : 알리바바의 오픈소스 LLM Qwen1.5 시리즈의 첫번째 100B+ 모델
   2024-06-07 Alibaba, Qwen 2 모델 공개
   2024-09-19 Qwen2.5 - 여러 파운데이션 모델 공개
   2024-11-28 QwQ - ChatGPT o1과 유사한 알리바바의 추론 LLM
   2024-12-24 Qwen의 새로운 시각적 추론 모델 QvQ 사용 후기

        Hacker News 의견

     * AI 코딩에서 매우 큰 컨텍스트 윈도우는 실제로 유용하지 않음. 약 25-30k 토큰 이상을 입력하면 모델이 혼란스러워짐
          + gpt-4o, Sonnet, DeepSeek 등에서 이 문제가 발생함
          + 많은 사용자들이 이 문제를 보고하며, 이를 해결하기 위한 전용 도움 페이지를 만듦
          + 큰 컨텍스트는 ""저가치"" 컨텍스트가 많은 특정 작업에 유용할 수 있으나, 코딩에는 문제를 일으킬 수 있음
     * Ollama는 컨텍스트 윈도우 길이를 제어하는 num_ctx 파라미터가 있으며 기본값은 2048임
          + macOS에서 MLX를 사용하여 실행하는 팁이 있음
     * 메모리 중심 컴퓨팅의 최신 기술(SOTA)에 대한 논의
          + AI 메모리 비용을 낮추기 위한 새로운 패러다임이 필요할 수 있음
          + DRAM과 광학 인터커넥트를 연결하는 방법이 있을 수 있음
          + 시퀀스에 의존하지 않는 트랜스포머와 같은 기능을 가진 것이 있는지 궁금함
     * 128K 이상의 컨텍스트 길이를 가진 첫 번째 로컬 실행 가능한 모델이 1M으로 바로 증가했는지 확인하고 싶음
     * Mac에서 긴 프롬프트를 성공적으로 실행한 사람의 의견을 듣고 싶음
     * 1M 컨텍스트 윈도우를 가진 API 전용 모델이 11월에 출시됨
     * 네이티브 컨텍스트 길이에 대한 소문을 들었으나, 실제로 1M 컨텍스트 길이인지 잘 모름
          + llama3 8b와 같은 모델은 더 큰 컨텍스트를 가진다고 하지만 실제로는 그렇지 않음
          + 16gb vram에서 8k를 넘기기 어려움
     * 모두가 컨텍스트 윈도우를 더 크게 만들고 있지만, 출력에 대한 고민도 필요함
          + 수천 줄의 코드를 생성하고 싶음, 이에 대한 팁이 있는지 궁금함
"
"https://news.hada.io/topic?id=18958","생산 환경에서의 Machine Learning (CMU 강좌)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   생산 환경에서의 Machine Learning (CMU 강좌)

    카네기 멜론 대학교의 머신러닝 생산 과정

     * 과정 개요
          + 이 과정은 머신러닝 모델을 소프트웨어 제품으로 구축, 배포, 유지하는 방법을 다루는 과정임.
          + 책임 있는 AI, MLOps, 안전성, 보안, 공정성, 설명 가능성 등을 포함하여 전체 수명 주기를 다룸.
          + 데이터 과학 경험과 기본 프로그래밍 기술이 있는 학생을 대상으로 함.
     * 과정 목표
          + 머신러닝 모델을 제품으로 전환하고, 품질을 보장하며, 대규모로 운영 및 유지하는 방법을 학습함.
          + 소프트웨어 엔지니어와 데이터 과학자 간의 협력을 촉진하여 ML 시스템을 구축하는 데 필요한 상호 이해를 구축함.
          + ML 엔지니어로서의 경력을 고려하는 학생에게 적합함.
     * 주요 주제
          + 잘못된 예측을 위한 설계, 안전 및 보안 보장 방법.
          + 실제 환경에서 작동할 수 있는 사용자 인터페이스 및 시스템 설계.
          + 모델의 신뢰성 있는 배포 및 업데이트 방법.
          + 데이터 품질 문제, 개념 드리프트, 피드백 루프 감지 방법.
          + 대규모 ML 시스템 설계 및 테스트 방법.
          + 공정성, 설명 가능성, 프라이버시, 견고성, 안전성 등 모델의 예측 정확도 외의 중요한 품질 요구 사항 식별 및 측정 방법.
     * 학습 결과
          + ML 구성 요소를 포함한 생산 시스템 설계 시 트레이드오프 분석.
          + ML 구성 요소의 실수를 계획하고 견고한 시스템 구현.
          + 데이터 인프라 설계 및 실험을 위한 시스템 설계.
          + 전체 ML 파이프라인의 품질 보장.
          + 복잡한 ML 제품을 구축할 때 시스템 수준 요구 사항 고려.
          + 다학제 팀에서 효과적으로 커뮤니케이션.
     * 실습 및 프로젝트
          + 학생들은 1백만 명의 사용자를 대상으로 하는 영화 추천 서비스를 구축, 배포, 평가, 유지하는 프로젝트에 참여함.
     * 수업 및 실습
          + 강의는 월요일과 수요일에 진행되며, 실습은 금요일에 다양한 시간대에 진행됨.
          + Slack을 통해 수업 중 활동에 참여할 수 있으며, 강의 녹화는 Canvas에서 제공됨.
     * 평가 및 과제
          + 개인 과제, 그룹 프로젝트, 중간고사, 참여도, 실습, 독서 퀴즈로 평가됨.
          + 각 과제는 명확한 사양과 점수 분포를 제공하여 학생들이 명확한 기대치를 설정할 수 있도록 함.
     * 팀워크 및 협업
          + 팀 프로젝트는 3-5명의 학생으로 구성된 팀으로 진행되며, 팀워크는 필수적임.
          + 팀은 독립적으로 작업하며, 팀 내에서의 협업은 권장됨.
     * 기타 정보
          + Slack을 통해 중요한 공지가 전달되며, 이메일과 Slack을 통해 질문 가능.
          + 수업 자료는 GitHub에 공개되어 있으며, 자가 학습을 원하는 학생에게도 제공됨.

   이 과정은 머신러닝을 활용한 소프트웨어 제품 개발에 관심 있는 학생들에게 필수적인 기술과 지식을 제공하며, 다양한 실제 사례와 프로젝트를 통해 실무 경험을 쌓을 수 있는 기회를 제공함.

        Hacker News 의견

     * Kafka, Docker, Kubernetes, Jenkins는 업계 표준 도구이며, MLOps에 중점을 두는 것이 신선함. 모델 구축에 그치지 않고 실제 프로덕션 시스템과의 연결을 다루는 과정이 좋음. 설명 가능성, 공정성, 모니터링도 다루고 있음이 인상적임
          + 초급 수준일까? 실습을 보면 중급 소프트웨어 엔지니어나 동기 부여된 초보자도 튜토리얼로 배울 수 있는 내용이 많음. Git, Flask, 컨테이너 오케스트레이션은 유용하지만, 이미 프로덕션 환경에서 일한 사람에게는 기본적임. 분산 학습을 위한 네트워킹 최적화나 대규모 추론 관리 같은 깊이 있는 도전 과제는 덜 다루어지는 것 같음. 그룹 프로젝트에서 다루어질지도 궁금함
          + 사용하는 도구의 장기적인 관련성도 궁금함. Jenkins는 어디에나 있지만, CI/CD를 위해 GitHub Actions나 ArgoCD 같은 더 현대적인 것을 소개하는 것이 합리적이지 않을까? Kubernetes는 당연히 알아야 하지만, 엣지 배포나 서버리스 시스템을 위한 대안이나 보조 도구는 어떨까? 미래로 조금 더 나아갈 기회가 있는 것 같음
     * 데이터 품질에 대한 내용이 거의 없고 16장에 있음... 저자들이 산업에서 얼마나 실무 경험이 있는지 궁금함. 데이터 품질과 데이터 정리에 90%의 시간이 소요됨
     * 머신러닝 클러스터 인프라 구축에 관한 문헌이나 강좌를 아는 사람 있음? 주로 스토리지 인프라 구축 및 확장, 네트워킹 및 스케줄링 접근 방식에 관심이 있음
     * 학생이 아닌 다른 사람들과 함께 따라갈 수 있는 곳이 있는지 궁금함
     * 누구나 등록할 수 있는지 아니면 국가의 상위 컴퓨터 과학 프로그램에 입학해야 하는지 궁금함
     * 이 과정을 여기서 볼 수 있어 좋음. Christian은 훌륭한 사람이며 훌륭한 작업을 함. 이 과정과 책의 시작을 알고 있으며 강력히 추천할 수 있음
     * ML 플랫폼과 시스템에서 9.5년 동안 모든 규모에서 일했음. 자료가 훌륭해 보임
     * 흥미로움; 실습을 살펴보았는데, LLM에 대한 경험이 많지 않은 풀스택 개발자로서 이미 절반은 익숙함 (git, flask, kafka, kubernetes) 나머지는 그냥 코드임. ML과 관련된 복잡한 수학이 없음
          + ML ops가 PhD 없이도 일반 개발자가 접근하기에 그리 어렵지 않은 분야라는 의미일까?
     * 단일 ""Kubernetis""를 배우는 아이디어가 마음에 듦
     * 코스의 복잡성을 과소평가하고 있을지도 모르지만, 이건 초급 과정처럼 들림. 모델 설명 도구까지 대부분의 내용이 솔직히 꽤 간단해 보임. 대부분의 사용 사례에 대해 업계 표준 도구를 사용하고 있다는 점은 좋다고 생각함
"
"https://news.hada.io/topic?id=18976","박테리아(및 그 대사산물)와 우울증 관계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         박테리아(및 그 대사산물)와 우울증 관계

   There is no content to summarize from the provided text.

        Hacker News 의견

     * Long Covid 환자들은 세로토닌 전구체인 트립토판의 장내 흡수가 감소하여 세로토닌 수치가 낮아지는 것으로 나타남. 이는 IL-6와도 관련이 있을 수 있음
          + 트립토판은 세로토닌을 생성하는 유일한 방법이며, 세로토닌 부족은 우울증, 피로, 짜증, 뇌 안개, 뇌 전기 충격 등을 유발할 수 있음
          + 해결책으로 가수분해 단백질을 보충하면 트립토판 변형체가 다른 세포 흡수 경로를 사용하여 문제를 해결할 수 있음
          + 이 방법을 시도해본 결과 효과가 있었음. 하지만 이는 개인적인 경험일 뿐이며, 의료 조언이 아님
          + 세로토닌 수치가 낮은 상태에서 갑작스러운 변화는 세로토닌 증후군을 유발할 수 있으므로 주의가 필요함
          + SSRI나 MAOI와 같은 세로토닌 조절제와 함께 사용하지 말아야 함
     * 심한 우울증을 단식으로 극복한 경험이 있음. 이는 장내 미생물과 관련이 있을 수 있지만 확실한 증거는 아님
          + 화학 물질과 우울증의 연결고리를 설명하는 기사에서 장내 박테리아가 중요한 역할을 할 수 있음을 제시함
          + 디에탄올아민은 세제, 화장품 등에 사용되며 염증과 우울증을 유발할 수 있음
          + 소비자를 보호하는 기관들은 안전하지 않다고 입증되기 전까지는 모든 것을 사용할 수 있다고 가정함
     * 디에탄올아민은 비누, 계면활성제, 농약, 섬유 가공 등에 사용되며 독성과 발암성이 연구됨
          + 디에탄올아민은 세제, 화장품, 샴푸 등에 사용되는 지방산의 디에탄올아미드와 염으로 제조됨
     * 케토 다이어트가 우울증 상태를 개선하는 유일한 방법임을 발견함
          + 단기 단식을 통해 케토 다이어트를 알게 되었고, 케토를 중단하면 상태가 악화됨
          + 케토로 돌아가면 케토 플루를 겪은 후 다시 행복해짐
     * 디에탄올아민은 자연적인 인간 또는 박테리아 생화학의 일부가 아니며 산업 오염물임
          + 동물과 인간의 지질에 낮은 수준으로 통합될 수 있음
     * 장내 박테리아를 감지할 수 있는 기술은 있지만 이를 효과적으로 조절할 방법은 부족함
          + 특정 박테리아를 제거하는 약물을 개발할 수 있을지에 대한 아이디어가 있음
          + 현재의 접근 방식은 광범위한 박테리아를 죽이는 항생제를 사용함
     * 병원체로서 드물며, 70년대 NHS 미생물학 실험실에서 일했을 때도 접한 적이 없음
          + 많은 박테리아가 상처와 관련이 있을 수 있어 식별이 어려움
"
"https://news.hada.io/topic?id=19032","OpenStreetMap 포럼의 토론 : Gulf of Mexico를 Gulf of America로 바꾸는 것에 대하여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OpenStreetMap 포럼의 토론 : Gulf of Mexico를 Gulf of America로 바꾸는 것에 대하여

     * 미국 대통령 도널드 트럼프는 취임식에서 ""멕시코만(Gulf of Mexico)""의 이름을 ""미국만(Gulf of America)""으로 바꾸고 싶다고 말함
     * 정치적 측면을 제외하면 어떻게 그렇게 할 수 있는지, OpenStreetMap은 어떻게 그런 소스를 선택하는지 궁금하다고 묻는 질문이 나왔고, OSM 커뮤니티에서 관련 논의가 벌어지고 있음
     * 일부 기여자들이 OSM 상에서 이미 'Gulf of Mexico'을 'Gulf of America'로 수정하려 하면서, 이에 대한 적절한 태그와 적용 시점을 두고 다양한 의견이 나옴
     * 최종적으로 명칭이 공식 반영되지 않은 상태이므로, 대부분의 OSM 기여자들은 여전히 ‘멕시코만’을 기본 표기로 유지하자는 입장임

명칭 변경의 배경

     * 트럼프가 새 임기를 시작하며 “Gulf of Mexico”를 “Gulf of America”로 부르겠다는 행정명령을 발표함
     * 이 명칭 변경은 국제적 수역 전체가 아닌, 미국의 대륙붕 관할 구역에 해당하는 해역에 적용될 가능성이 높음
     * 다만 해당 명령이 실제로 적용되려면 미국 지명위원회(US Board on Geographic Names)와 관련 정부 기관들이 정식으로 승인·갱신해야 함

국제 기구와 지리 이름 표준

     * UNGEGN(UN 지명 전문가 그룹)은 개별 지명 결정을 하는 기관이 아니라, 표준화 과정을 권장하고 지원하는 역할임
     * 실제로 국제법적 권위를 가진 곳은 국제수로기구(International Hydrographic Organization) 등으로 알려져 있음
     * IHO가 발행하는 문서(‘Limits of Oceans and Seas’)는 1953년판 이후 갱신되지 않고 있어, 현대적 상황에는 적용이 어려운 상태임
     * 일부 국가 간 명칭 분쟁 때문에 국제 표준 갱신이 중단되어 있다는 지적이 있음

OSM에서의 주요 쟁점

     * name 태그 유지 여부
          + OSM 규칙상 “name=*”은 일반적으로 가장 널리 쓰이는, 혹은 현지에서 통용되는 명칭을 사용함
          + 대부분 영어권과 국제사회에서 관행적으로 “Gulf of Mexico”가 사용되므로, 아직 공식적인 변경이 이루어지지 않은 시점에 name을 바꾸기는 어렵다는 의견이 대다수임
     * 다양한 태그 활용 방안
          + alt_name:en-US=Gulf of America처럼, 미국 내 특정 영어 사용을 가정해 대안 명칭으로 태깅하자는 제안이 있음
          + 실제로 “공식적 승인”이 이루어지면 official_name:en-US 또는 다른 확장 태그 등을 사용해 명확히 표기할 수 있다는 의견이 제시됨
          + 단, 이 변화가 국제적 승인과 무관하게 미국 정부 내 절차로만 정해지므로, ‘national name’(nat_name) 사용 여부도 논의 중임
     * 언어와 국가 코드 표기 규칙
          + 영어에도 다양한 방언이 존재하지만, 주로 name:en 하나만 쓰는 경우가 많음
          + 이번에는 “en-US”처럼 국가 코드를 붙여, 미국 정부가 사용하는 영어 이름을 명확히 구분하자는 제안이 나옴
          + BCP 47 표준(예: name:en-u-sd-usak) 등을 활용해 더 세분화하는 방법도 있으나, 대부분의 렌더러가 이를 제대로 지원하지 않을 수 있음
     * 일부 구역만 명칭이 바뀔 가능성
          + 행정명령의 문구가 ‘미국의 대륙붕 경계선 안쪽’에만 적용될 수 있다는 해석도 존재함
          + 만약 실제로 구역이 구분된다면, ‘멕시코만’과 ‘Gulf of America’를 별도 지형 객체로 나누어 표시할 수도 있음
          + 그러나 아직 정부 기관의 구체적 지도 데이터나 GNIS 업데이트가 없으므로 섣불리 분할 태그를 적용하기 어렵다는 분위기임

다른 사례와의 비교

     * 과거 ‘Mount McKinley’를 ‘Denali’로 변경할 때도, 미국 연방정부와 알래스카 주정부 간 입장이 달라 혼선이 있었음
     * ‘Gulf of California(Sea of Cortez)’, ‘Persian Gulf(Arabian Gulf)’ 등 명칭 분쟁 사례에서, OSM은 대개 기존 국제적·관습적 표기를 유지하면서 대안 명칭을 alt_name 등으로 병기하는 방식을 사용해 왔음
     * “Freedom Fries” 등의 역사적 사례처럼, 정치적 성격이 강한 명칭 변경은 시간이 지나면 사용 빈도가 줄어들 가능성도 있다고 봄
          + 위키피디어 참고: 미국에서 이라크 침공에 대한 프랑스의 반대로 인해 정치적인 이유로 감자튀김(영어: French Fries)의 이름을 바꾼 것. 이 용어는 2003년 2월 노스캐롤라이나의 한 레스토랑에서 처음 만들어졌고, 한 달 후 당시 공화당 소속 미국 하원 운영위원회 위원장인 밥 네이가 의회 구내식당 3곳의 메뉴의 이름을 바꾸면서 널리 알려지게 되었음. 이라크 전쟁의 지지가 감소함에 따라 인해 이 용어의 인기가 사그라들게 되었고. 2006년 밥 네이가 운영위원장직을 사임한 후 의회 구내식당의 메뉴 이름은 다시 프렌치 프라이로 돌아갔음.

정치적 배경과 각 플랫폼의 고민

     * 실제 표기가 미국 내에서 공식화되면, Apple이나 Google 같은 지도 서비스가 이를 반영해야 하는지 고민할 수밖에 없는 상황임
     * 스페인어권에서는 ‘América’가 북·남미 전체를 의미하기 때문에, 이번 이름 변경이 또 다른 문화적 혼선을 야기하고 있음
     * 언론과 의회도서관 산하의 연구기관(CRS) 등 공공기관에서도 이번 행정명령이 미칠 영향을 분석 중임
     * 일부 사람들은 ‘Gulf of Florida’처럼 역사적 근거가 있는 다른 명칭을 제안하지만, 현실적으로 적용될 가능성은 낮다는 분위기임
     * Google 지도는 현재 명확한 입장을 내지 않았고, Apple 지도도 정부 기관의 공식 업데이트 전까지는 침묵을 지키는 모양새임

현재 커뮤니티 중간 결론

     * 이번 ‘멕시코만’ 명칭 변경 시도는 정치적 의도가 짙어, 오픈 소스 지도 커뮤니티와 국제 표준 기관 모두 곤란함을 겪고 있음
          + 지명 표기는 국가별·언어별 차이를 고려해야 하며, 국제 기구나 지리 전문 기관의 역할이 분명치 않아 혼선이 가중되고 있음
     * 명칭 변경이 실제로 정부 공식 문서(특히 US Board on Geographic Names, GNIS 등)에 반영되지 않았고, 또 그 시점이 언제일지는 아직 확실치 않으므로, OSM에서는 기존 “Gulf of Mexico” 명칭을 유지하는 쪽으로 의견이 모아지고 있음
     * 만약 연방정부가 절차를 마무리하고 GNIS에 “Gulf of America”가 공식 등재된다면, official_name:en-US 같은 방식으로 기록할 수 있음
     * 전체 만을 일방적으로 개명하기보다는, 실제 행정 절차의 결과와 국제적 사용 현황을 지켜보자는 “Wait and See” 기조가 주류임
     * 이 과정을 통해 OSM은 정치적 분쟁을 직접 해결하기보다는, ‘현지 사용’과 ‘공식 데이터’ 간 균형을 고려해 명칭을 태깅하는 원칙을 재확인하고 있음
     * 전체적으로는 ‘Gulf of America’가 실제 지도에 본격 적용되기보다는, 행정명령에 대한 관심이 식거나 보류될 수 있다는 전망

   옴.. 동해, 일본해랑 비슷한 느낌의 구도가 될려나요...?
   지금은 어떻게 표기해서 줄려나....흠...

   구글맵 같은데에는 확대하기 전까진 일본해로만 표기되는 동해마냥 강대국 의견 따라가지 않을까 싶네요
"
