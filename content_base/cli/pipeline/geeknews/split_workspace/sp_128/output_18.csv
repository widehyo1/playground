"https://news.hada.io/topic?id=2363","IDFA가 없어진 이후의 모바일 마케팅 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       IDFA가 없어진 이후의 모바일 마케팅 가이드

   - iOS14에서 IDFA 승인창이 뜨면 OptIn 비율이 10~20%로 떨어져서 실제로 IDFA는 죽게 될 것
   - SKAdNetwork 도입 이후 사용자 레벨 Attrubution도 사실상 없어질 것
   - 리타게팅 및 커스텀 오디언스/LookAlike 오디언스는 광고식별자 기반이라, 사용자로부터 식별이 가능한 정보를 받도록 제품 디자인에 영향을 미치게 될 것
   - IDFA 가 없는 환경에서 DSP들도 큰 어려움을 겪을 것
   SkAdNetwork 의 변경사항에서 고려해야할 것들
   - updateConversionValue(_:)
   - Event-optimized campaigns
   - In-app ad monetization
   - Cross promotion
   iOS14의 광고 관련 변경사항이 사용자의 개인데이터에 대해 더욱 세밀한 제어를 제공한다는 점에서 긍정적인 변화.
   하지만, 광고주들에게는 중립 또는 약간 부정적.

   iOS14 : IDFA 시대가 저물어 갑니다 https://news.hada.io/topic?id=2337
"
"https://news.hada.io/topic?id=2349","macOS 11.0 Big Sur beta 1 지원되지 않는 맥에 설치하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               macOS 11.0 Big Sur beta 1 지원되지 않는 맥에 설치하기

   - 2012~2013 에 나온 MacBook Air/Pro/맥미니/iMac/맥프로 등에 설치하는 방법
   - 대부분 Wi-Fi 빼고는 동작 가능 ( 곧 WiFi 도 가능하게 패치 예정 )
   - 그 전 기기들은 CPU / Wifi 칩 / 그래픽 문제로 더 이상 지원 불가능

   관련된 자세한 설명 및 최신 업데이트는 맥루머 포럼 쓰레드 참고
   https://forums.macrumors.com/threads/…
"
"https://news.hada.io/topic?id=2323","페이스북이 개인화 광고를 위해 머신러닝을 사용하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     페이스북이 개인화 광고를 위해 머신러닝을 사용하는 방법

   - 사람들에게 어떤 광고가 보여질지는 두개의 주요 요소에 따라 결정
   ㅤ1. 광고주가 선택한 타겟 고객
   ㅤㅤ→ 페이스북이 제공하는 도구를 통해서 나이/성별/액션등에 의해서 선택된 고객 또는 Lookalike 고객들
   ㅤ2. 광고 입찰 결과
   ㅤㅤ→ 타겟 고객군에 해당 사용자가 들어간 광고들을 모아서 경매 단계로 들어감
   ㅤㅤ→ 3가지 값을 조합하여 가장 높은 가치를 가지는 광고가 선택
   ㅤㅤㅤa. 입찰가 : 광고주가 해당 광고에 설정한 입찰가
   ㅤㅤㅤb. 추산 행동률 : 특정 사람이 특정 광고에 반응을 보이거나 특정 광고로부터 전환하는 행동의 추정치
   ㅤㅤㅤc. 광고 품질 : 광고를 보거나 숨기는 사람들의 피드백이나 품질을 떨어뜨리는 속성등 요소를 평가
   - 광고 전달에 머신러닝이 어떻게 이용되는가
   ㅤ1. 추산 행동율 : 광고주가 원하는 동작을 할 가능성을 예측하기 위해 사용자 행동, 광고 내용, 시간, 상호 작용들을 고려
   ㅤㅤ→ 페이스북 앱에서 광고 클릭 또는 포스트 클릭등의 동작을 하는지
   ㅤㅤ→ 페이스북 외부에서 웹사이트 방문, 상품 구매, 앱 설치등을 하는지 픽셀,로그인,소셜플러그인 등을 통해서 확인
   ㅤ2 광고 품질(Ad Quality)
   ㅤㅤ→ 광고를 보거나 숨기는 사람들의 의견을 반영
   ㅤㅤ→ 이미지의 텍스트가 너무 많거나, 선정적인 언어 또는 사용자가 참여하게 만드는 미끼 같은게 있는지 여부등도 고려
"
"https://news.hada.io/topic?id=2441","Link Drop - 저장한 URL들을 개인 뉴스레터로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Link Drop - 저장한 URL들을 개인 뉴스레터로

   - 크롬/파이어폭스 확장을 이용해서 글 링크를 저장해두면 자신의 메일로 뉴스레터처럼 모아서 보내주는 서비스
   - 하루에 한번 발송 되며, 받아 보는 시간은 지정가능

   북마크 자체가 뉴스레터로 보내준다고 해도 잘 안 보게 되더라구요. 예전에 웹페이지나 PDF에서 문장을 선택하면 다음 날 메일로 보내주는 걸 만들어서 혼자 잘 쓰고 있었는데 맥이 Open Scripting Architecture (OSA) 지원을 거의 안 하게 되어서 버려진 기억이 나네요. 하이라이트 문장 + 페이스북/트위터 좋아요 + 리디북스 하이라이트 등을 뉴스레터로 서비스하는게 To Do 목록에 있지만.. 귀찮네요 ㅎㅎ

   오 컨셉 괜찮아 보이는데.. 얼렁 만들어서 여기다 공유를!! ㅎㅎ

   Pocket 과 Instapaper 의 단점은.. 넣어두고 안 읽는다는 건데
   이렇게 메일로 보내주면 좀 더 읽게 되지 않을까 생각은 듭니다.
   전 요즘 드는 생각은 정보가 너무 빨리 쏟아져나오고 있으니,
   좋은 글은 그때 바로 읽어버려야지 나중에 읽어야지 하는건 못 보게 된다고 생각합니다.
   대충이라도 글을 읽고 나서 나중에 다시 찾아볼 수 있게 Favorite 해두는게 좋은 방식인거 같아요.
   GeekNews 의 Favorite 기능을 많이 활용해주세요 ㅎㅎ

   점점 메일도 그냥 쌓아두기만 하는 곳간 같이 되고 있어요 ㅋㅋㅋ
"
"https://news.hada.io/topic?id=2414","전세계 Podcast 통계 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             전세계 Podcast 통계

   2020년 7월 현재. 공개된 RSS 기반 팟캐스트를 수집해서 낸 통계
   - 약 136만개의 팟캐스트. 7400만개의 에피소드
   - 년간 신규 팟캐스트 : 2020(39.8만) 2019(29.5만) 2018(18.8만) 2017(12.3만)
   ㅤ→ 매년 빠르게 증가하는 중
   - 년간 종료되는 팟캐스트 : 2017~2019 매년 약 3.7만개 수준
   - 영어>>>>>스페인어>포르투갈어>인도네시아어>독일어>프랑스어>중국어
   - 장르 : 사회&문화 > 교육 > 종료 > 비즈니스 > 예술 > 코미디 > 음악 > 헬스 & 피트니스 > 스포츠 > 뉴스 > 레져 > TV&영화 > 기술 > 과학 > 어린이&가족
   - 팟캐스트 RSS 호스팅 도메인 : anchor.fm (51만개, 38%) > soundcloud.com (10만개, 8.1%) > libsyn.com (7만개, 5.2%) > podbean.com (6만개, 4.4%)
   ㅤ→ 애플은 2.2만개 수준으로 전체의 1.6% 밖에 안됨
   - 개인 도메인으로 팟캐스트 RSS 를 호스팅하는 갯수 : 7.7만개
   * 이 Listen Notes 는 팟캐스트 검색엔진으로, 이렇게 수집한 데이터셋은 API로 접근하거나 DB 자체로 구입도 가능
"
"https://news.hada.io/topic?id=2341","Amazon Honeycode - 코드작성 없이 웹 & 모바일 앱 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Amazon Honeycode - 코드작성 없이 웹 & 모바일 앱 만들기

   - 스프레드 쉬트 형태로 작성하면 코딩없이 앱을 생성하게 만들어주는 No-Code 도구
   - 드래그 앤 드롭으로 비즈니스용 앱을 작성 가능
   - 엑셀과 비슷한 다양한 함수들 지원 (FindRow = VLookup)
   - 다양한 템플릿 : ToDo, 고객 트래커, 설문조사, 재고 관리, 콘텐츠 트래커, 이벤트 관리, 팀 태스크 관리 등
   - 빌더는 Chrome 에 최적화. 생성되는 웹 앱은 대부분의 브라우저 에서 실행됨
   - 모바일앱은 iOS11+ / Android 8.0+ 전용 Amazon Honeycode앱을 다운 받아 그 안에서 실행 가능

   Retool https://retool.com/ 의 경쟁 제품이 되겠네요.
   어찌 보면 AirTable https://airtable.com/ 하고도 겹치구요.
   No Code is New Programming https://news.hada.io/topic?id=1099
   위 글에서 제가 6개월전에 올해의 대세중 하나는 No-Code 가 될거 라고 말씀드리면서
   구글/아마존/MS 등에서도 나올거 같다고 댓글 단 적이 있는데 역시나 아마존에서 제품을 출시 했네요 ;)
   Low-Code / No-Code 개발 플랫폼들 리뷰 https://news.hada.io/topic?id=1799
"
"https://news.hada.io/topic?id=2360","애플, 개인 정보 보호 문제로 Safari 에서 16개 Web API 구현 거부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              애플, 개인 정보 보호 문제로 Safari 에서 16개 Web API 구현 거부

   - 사용자 핑거프린팅에 사용될 수 있어서 개인 정보 보호에 위협이 될 수 있다고 판단되어 구현하지 않겠다고
   Web BlueTooth, Web MIDI, Magnetometer, Web NFC, Device Memory, Network Information, Battery Status,
   Web BlueTooth Scanning, Ambient Light Sensor, HDCP Policy Check Extension for EME, Proximity Sensor,
   WebHID, Serial API, Web USB, Geolocation Sensor, User Idel Detection
   - 위 대부분의 API들은 현재 크로미움 기반에 많이 개발되어있고 모질라에는 몇개 정도만 구현됨
   - 애플은 이 API들이 온라인 광고 및 데이터 분석회사들이 사용자 와 기기를 핑거프린팅 하는데 사용할 수 있다고 주장
   - 핑거프린팅에 사용될 여지를 줄인다면 다시 추가하는 걸 고려해보겠다는 입장

   해당 API가 보안 문제 관련해서 논란이 많긴하지만, 저것들은 우선 PWA에 필요한 API들입니다.
   아무래도 앱스토어 생태계에 영향을 줄 수 있기 때문에 PWA개발을 방해하려는 일환 중 하나라는 인상을 지울 수가 없네요.

   말씀하신 측면도 타당한 의견인 것 같아요!

   구현은 하되, API 호출시 사용자의 동의가 필요한 방식으로 하면 될 것 같은데요.
   Geolocation(위치) API 처럼요.

   저거 동의창이 다 뜨면 사용자한테 너무 짜증나지 않을까요 ?
   동의창 UI를 단순화 해버리면 다들 OK 눌러버릴테고, 다 띄우자니 사용자 불편하고 하니 그냥 안해! 라고 해버리는게 속편할지도..

   지금도 Chrome에서 권한 확인을 조용하게 띄우고 있어요.
   https://blog.chromium.org/2020/01/…
   사용자가 해당 기능을 정말 필요하다고 느낀다면, 권한 허용을 통해 이용을 하는 방식이죠.
   말씀하신 것 처럼 필요하지 않은 너무 많은 권한을 요구한다면, 자연스럽게 사용자가 해당 사이트를 신뢰하지 않게하는 효과도 있구요.

   많은 사람들이 권한 요청시 제대로 확인하지 않고 수락만 연타하는 경우가 많아서 위험해보이긴 하네요

   이 부분은 브라우저 개발사에서 고민해야할 부분이기도 하지만, 어느 정도 사용자의 책임이 있는 부분이라고 생각해요.
   과도한 권한 허용이 초래할 수 있는 위험성에 대해서도 홍보와 교육이 많이 필요한 부분이죠.

   왠지 예전 ActiveX 때의 재림이 되는 것 같네요. 말씀하신대로 브라우저 쪽에서 이에 대해서 사람들이 무신경해지지 않도록 UX 적인 투자도 있어야 할듯 합니다.
"
"https://news.hada.io/topic?id=2400","Google gmail API 사용 방법 - Sample code","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Google gmail API 사용 방법 - Sample code

   구글의 Gmail REST API 및 OAutho 2.0 사용 방법에 대한 설명입니다. Web server application으로 구현하였고, 각 단계별 상세한 설명한 함께 Python 샘플 코드도 있습니다.
   Step 1: Google API Console에서 Gmail API 활성화 및 Client 생성
   1) Project 생성
   2) API 라이브러리 활성화
   3) OAutho 동의 화면 설정
   4) 사용자 인증 정보 구성
   5) OAutho Client ID 결과 확인
   Step 2. 구글 인증 서버에서 Authorization code 받기
   1) 구글 서버에 인증 요청하기
   2) Redirect URL 설정하기
   Step 3. Authorization code값을 활용해서 Access token을 받기
   Step 4. Gmail API 사용: curl 명령어 확인 및 Python code 작성
   링크) https://kibua20.tistory.com/70 (Step 1)
   https://kibua20.tistory.com/80 (Step 2, Step 3)
   https://kibua20.tistory.com/81 (Step 4)
"
"https://news.hada.io/topic?id=2356","Foam - VS Code 기반 개인 지식 관리 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Foam - VS Code 기반 개인 지식 관리 도구

   - 그래프 링킹 방식의 독특한 노트작성 도구 Roam 에서 영감을 얻은 오픈소스
   - VS Code / MarkDown / GitHub을 이용
   - 노트를 작성하고, 그래프 방식으로 연결하고, 웹에 퍼블리싱도 가능
   1. GitHub Repository 템플릿을 복사해서 저장소로 사용
   2. 해당 Repo를 VS Code 에서 열면 필수 추천 확장들 설치 가능
   3. 노트를 마크다운으로 작성
   4. Form의 숏컷 및 자동 완성 기능으로 다른 노트와 연결
   5. Graph Visualisation 으로 전체 워크스페이스 보기 가능, Backlinking 으로 현 노트에 연결된 다른 노트 보기 가능

   저는 에버노트도 페이지가 7000개 정도 되는데 윈도우 PC에서는 버벅거리고 있는 상태입니다(그래서 최근 본 노트만 싱크하게 설정해서 쓰는 중)
   프로젝트 페이지를 보니 전체 페이지 그래프를 그리는 것처럼 보이는데 페이지 수가 많아지면 과연...
   한글 페이지도 잘 지원이 될지 궁금하기도 하네요.

   저도 에버노트가 버벅거려서 원노트로 가야하나? 고민도

   Roam 보고 써보고 싶었는데, 오픈소스라 바로 써볼 수 있겠네요

   저는 Obsidian (https://news.hada.io/topic?id=2169)과 비슷하다고 생각했어요.

   이거 mindforger (https://www.mindforger.com/) 와도 비슷하네요

   내가 노트툴 Roam 을 사랑하는 이유와 사용법 https://news.hada.io/topic?id=1349

   Roam 써보셨다고 했는데 느낌은 어땠나요?

   사실 조금 써보다보니 제가 노트 남기는 방식하고는 안맞더라구요. 제가 맥 윈 모바일을 오가며 막 메모하는 타입이라..
"
"https://news.hada.io/topic?id=2434","Trail Router - 달리기 경로 생성 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Trail Router - 달리기 경로 생성 도구

   - 지도정보를 통해 녹지와 자연을 위주로 달리기 경로를 생성
   - 공원/숲/물을 거치는 경로를 선호하며, 교통정보가 있다면 바쁜 도로는 회피
   - 원하는 거리를 지정하면 왕복경로를 생성하거나, 지점 지점 찍어서 경로 생성 가능
   - 생성된 경로는 드래그앤 드롭으로 자유롭게 조정 가능
   - GPX 또는 KML 파일로 Export 가능하며, 남과 공유도 가능
   - Strava 데이터를 통한 도로별 heatmap 표시 가능
   - 안드로이드/아이폰 앱도 제공
"
"https://news.hada.io/topic?id=2377","Pylance - MS가 공개한 VS Code용 Python 랭귀지 서버 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Pylance - MS가 공개한 VS Code용 Python 랭귀지 서버 확장

   - MS의 Pyright 정적 타입 체킹 도구 기반으로 강력한 타입 정보 기능 제공
   - Python IntelliSense를 강화, 빠르고 훌륭하게 코드작성을 도와줌
   ㅤ→ Rich Type Information
   ㅤ→ Auto-Imports 지원
   ㅤ→ Type Checking Diagnostics
   ㅤ→ Multi-Root Workspace Support
   - Core Python 확장과 같이 설치해야 동작
   ㅤ→ 기존 Pyright 확장 설치한 사람은 제거해야함. Pylance에 Pyright 기능을 모두 내장

   설치 링크 : https://marketplace.visualstudio.com/items/…
"
"https://news.hada.io/topic?id=2420","Linux Mint, Ubuntu Snap을 버리기로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Linux Mint, Ubuntu Snap을 버리기로

   - Mint는 Ubuntu 및 Debian 기반 (LMDE) 으로 APT 를 사용
   - 우분투가 Snap을 주로 밀면서 문제 발생
   ㅤ→ 19.10 에서 크로미움을 APT로 설치해도 내부에서 Snap을 깔고 그를 통해서 설치하게만 변경하면서 문제가 발생
   ㅤ→ 점점 gnome 같은것에서도 비슷하게 Snap 을 통하게 변경
   - Linux Mint 20 은 어떤 Snaps 들이나 Snapd 역시 포함하지 않을 것
   ㅤ→ 크로미움은 Snap을 설치하게 만드는 패키지가 아니라 어디서 설치할지를 알려주는 빈 패키지가 될 것
   ㅤ→ APT 는 snapd 설치를 금지할 것

   snap은 컨셉 자체는 메인스트림인데 아무래도 덜 성숙하다보니 엔지니어링 이슈가 너무 많은 것 같다는 느낌을 받습니다. 차라리 오픈소스로 공개해서 빠르게 개선하는게 좋아보이는데, 왜 공개를 안하는걸까요?

   캐노니컬이 삽질 한게 많지만 (Unity, Mir) Flatpak은 너무 Community-driven해서 샌드박스 설정이 제대로 되어있지가 않고 Snap은 커맨드 라인 앱들도 설치가 가능하다는 장점이 있고 독점 앱들도 꽤 있어서 쉽게 망하지는 않을 것 같습니다.

   스냅 정말 싫은데 민트로 가야하는건가...

   Ubuntu 20.04에서 Snap을 끄는 방법 https://news.hada.io/topic?id=1968
   Flatpak - 샌드박스형 리눅스 앱 배포 플랫폼 https://news.hada.io/topic?id=1877
"
"https://news.hada.io/topic?id=2343","ARM Mac 에서의 가상화를 우려하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ARM Mac 에서의 가상화를 우려하는 이유

   - Docker는 5배 느려질 것
   ㅤ→ 맥용 도커는 Hypervisor 기반이라 호스트에서 게스트와 동일한 아키텍처여야 함
   ㅤ→ ARM Mac 에서는 ARM Linux를 돌려야 하고 그게 아닐경우 에뮬레이터로 실행되니 5x-10x 까지 속도가 느려질 것
   ㅤ→ 모든 도커이미지들이 ARM을 지원하게 만드는 것은 아주 오래 걸릴 것
   ㅤ→ 또한 이미지가 다른 패키지를 내려받는다면 그 역시 대부분 x86 기반일 것이라 실행자체도 어려울수도
   - VirtualBox 는 동작하지 않을 것
   ㅤ→ 버추얼박스 역시 Hypervisor 이고, x86 윈도우 또는 x86 리눅스는 실행불가
   ㅤ→ ARM 용 윈도우즈는 실행가능하겠지만, VirtualBox 는 x86전용이고, 포팅할 생각도 없음 (VirtualBox 포럼 모더레이터의 답변)
   ㅤ→ VMWare Fusion 역시 하이퍼바이저 이지만, ARM 포팅을 고려하고 있음
   ㅤ→ 대신 에뮬레이터인 QEMU 를 고려할수는 있겠지만 좋은 대안은 아님
   - BootCamp 역시 동작하지 않을 것
   ㅤ→ ARM Mac 에서 지원하지 않을 것(크레이그 페더리기가 팟캐스트에서 말한 바 있음)
   ㅤ→ 게다가 MS가 ARM Windows를 OEM으로만 판매하기 때문에 지원한다고 해도 MS가 그걸 승인해야만 가능
   - ARM Mac 을 사야할까 ?
   ㅤ→ 프론트엔드, 모바일, 네이티브 앱 개발자 라면 괜찮을 수 있음
   ㅤ→ 가상화를 많이 써야하는 개발자라면 추천하지 않음
   ㅤ→ 초기에 물론 많은 문제가 있겠지만, 해결책이 없을 수도 있음

   맥북의 개발자 수요가 많은 걸 생각해보면 인텔 맥북은 꾸준히 나온다고 예상하는 게 맞겠네요.

   가상화문제는 생각보다 큰 문제겠네요 정말

   WSL2의 Docker가 호평을 받고 있는 것과 대조적이내요.

   지원하지 않아서 곤란한 시장도 있지만, 그렇기 때문에 더 바빠질 시장도 있겠군요. 어찌보면 새로운 생태계가 열리는 셈이니...

   음.. 도커는 생각해볼만한 이슈네요
   컨테이너들 이슈도 있을텐데 애플이 얼마나 적극적이냐에 따라 다를 것 같네요

   당분간은 인텔 맥+ARM 맥 두개로 가겠지만, 언젠가는 ARM 맥으로 다 전환 될것이고,
   그러면 실제로 모든 플랫폼 개발자용 필수장비처럼 인식되던 맥이 그 지위를 어느정도는 잃어버릴 수도 있겠다는 생각이 드네요.
   MS가 ARM Mac 출시에 맞춰서 서피스 기기들을 대폭 할인 판매하길 기대해 봐도..
"
"https://news.hada.io/topic?id=2398","애플의 맥 하드웨어 변경 예상 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            애플의 맥 하드웨어 변경 예상

   Jason Snell*의 정리
   애플이 iOS의 기능들을 맥으로 가져오기 위해 노력했지만, 인텔 아키텍처에 의해 제한 되었었으나 애플칩이 그걸 해줄해 줄 것
   차세대 맥에 추가될 아이폰/아이패드의 기능들 예상
   - 둥근 화면 모서리 : 맥 오리지널 디스플레이는 둥근 모서리였음. 아이폰도 아이패드도. 맥도 당연히?
   - 터치스크린 : 애플은 터치스크린 맥을 만드는걸 계속 거부했지만 시대가 바뀌었음. 아이패드의 보조로 키보드/마우스/애플펜슬이 나온 것처럼, 맥이 터치도 다룰수 있게 될 것
   - Face ID : 왜 아직 맥에 Face ID가 도입 안되고 있는지 모르겠음. 윈도우즈도 Hello 로 이미 하고 있는데.. 더 좋은 웹캡과 함께 맥으로 가져와야 할 것
   - Apple Pencil : 터치를 넣을거면 애플 펜슬도
   - 새로운 인체공학적인 데스크탑 : iPad Pro Magic Keyboard 처럼 뭔가 새로운 것. 아니면 아예 테이블처럼 깔고 터치와 펜슬 입력이 가능한 것도 가능하지 않을까 ?
   - 새로운 인체공학적인 랩탑 : 투인원 맥북은 어떨까
   - ProMotion : 아이패드의 120Hz 주사율은 정말 훌륭. 맥에도 적용 가능 할거고, 애플펜슬과 함께라면 더더욱
   - 셀룰러 모뎀 : 아직도 맥북에는 모뎀이 없음. 아이패드는 거의 초기부터 가능했는데.. 끝내는 나올것이라고 봄. 아마도 애플이 직접 5G 모뎀을 만들기 시작한 이후에
   이런 일들이 올해 또는 내년에 일어나지는 않을 것.
   하지만 대기하고 있던 다른 제품의 수많은 기능들을 가져오게 될 것.
   Big Sur 는 소프트웨어가 어떻게 변해 갈지에 대한 단서를 주었고, 하드웨어 역시 그렇게 될 것

   * 애플 관련 유명 작가이자 팟캐스터인 제이슨 스넬(Jason Snell) 은 맥월드 편집장 이었고, 지금은 애플 제품과 관련 기술을 얘기하는 Six Colors 를 만들어서 운영중. 팝 컬쳐 및 게임쇼를 관련 팟캐스트 네트웍인 The Incomparable 도 운영중

   솔직히 27인치 아이패드에 키보드 붙인거라고 해도 좋겠네요. :-)

   애플이 만약 위 기능들을 다 넣는다면 6000$ 쯤부터 시작할듯 ㅎ

   $6000 정도면 요즘 애플 기기 가격에 비하면 싼거 아니겠습니까? 바퀴 몇개 사면 비슷...

   좋아해야 하는건지 말아야 하는건지 애매하네요... :|

   애플은 저걸 다 넣을수 있지만 다 넣지 않을 것 같습니다 ㅎㅎ

   전 사실 다 필요없고 모뎀만..

   macOS Catalina 와 Big Sur 의 UI 변경점 비교 https://news.hada.io/topic?id=2383
"
"https://news.hada.io/topic?id=2379","DecentDrops - 최근 기간만료된 도메인 이름 보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    DecentDrops - 최근 기간만료된 도메인 이름 보기

   - 매일 수만개의 도메인 이름들이 기간만료로 삭제되는데 이 리스트만 나열하는 서비스
   - 현재는 COM ORG NET 도메인만 지원
   - Brand 명으로 사용가능한 도메인들만 별도 보기 가능

   저는 인터넷에서 양파를 팝니다 https://news.hada.io/topic?id=3
   위 글에서 우스개로 얘기한 DDBD - Domain Driven Business Development 를 하기 좋은 도구네요.
"
"https://news.hada.io/topic?id=2435","AWS Well-Architected 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AWS Well-Architected 프레임워크

   기업들이 클라우드 애플리케이션을 구축하기 위한 올바른 방향을 알려주고, 그 과정을 안내하는 프레임 워크
   한국어 백서 PDF (86p) 및 5가지 기본요소에 대해서 각각 한국어 PDF들 제공
   - 운영 효율성 : 시스템을 실행, 모니터링하여 비즈니스 가치를 창출하고 지원하는 프로세스와 절차를 지속적으로 개선하는 능력
   - 보안 : 정보, 시스템, 자산을 보호하면서도 위험 평가와 완화 전략을 통해 비즈니스 가치를 창출하는 능력
   - 안정성 : 시스템이 인프라 또는 서비스 중단으로부터 복구되고, 수요에 맞게 동적으로 컴퓨팅 리소스를 확보하고, 잘못된 구성이나 일시적인 네트워크 문제 등으로 인한 중단 사태를 완화하는 능력
   - 성능 효율성 : 컴퓨팅 리소스를 효율적으로 사용하여 시스템 요구 사항을 따르고 수요 변화와 기술 발전 속에서도 그러한 효율성을 유지하는 능력
   - 비용 최적화 : 시스템을 실행하여 가장 낮은 가격대로 비즈니스 가치를 창출하는 능력

   오타 운용효율성이 두개네요. 아마 성능효율성?..
   그리고 Well Architected Lenses 에서는 특정 테크 도메인이나 기술에 좀더 집중해서 조명해 줍니다.

   헐 원본사이트에 오타가.. 영문으로 보니 Performance 길래 그걸로 수정해뒀네요.
"
"https://news.hada.io/topic?id=2411","Cloudflare TV 처음부터 구축하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Cloudflare TV 처음부터 구축하기

   - 24시간 온라인 스트리밍 하는 TV를 만든 기술 스택 이야기
   - 기본적으로 Zoom → RTMP → Nginx + RTMP모듈 → Cloudflare 네트웍
   ㅤ→ 쉽게 방송에 참가 할수 있도록 Zoom 을 활용
   - BBC의 Live 비디오 오픈소스인 Brave 활용해서 여러 채널로 부터 가져오기
   - 헤드리스 CMS 도구인 Contentful 로 콘텐츠 스케줄링
   - Nginx + Brave + Contentful 연결은 클라우드플레어의 서버리스인 Workers 로
"
"https://news.hada.io/topic?id=2389","당근마켓의 사용자 경험 디자인 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          당근마켓의 사용자 경험 디자인 분석

   - 직관적인 당근 인터페이스
   - 사용자 주도성을 높인 디자인
   - 당근 Holic!
   ㅤ(1) Interview
   ㅤ(2) Flow 상태에 돌입하다
   ㅤ(3) 난이도와 숙련도 분석
   - 기술수용모델(TAM)을 통해 분석한 당근마켓
   ㅤ(1) 인지된 재미요소(Perceived Enjoyment)
   ㅤㅤ온도계를 메타포로 한 흥미로운 디자인
   ㅤㅤ보내는 즐거움이 있는 거래후기
   ㅤㅤUX 제안: 구매 후기에 댓글 기능 추가
   ㅤ(2) 인지된 위험요소(Perceived Risk)
   ㅤㅤUX 제안 : 문구 수정과 텍스트 상자의 색깔 변경
   ㅤㅤUX 개선사항 분석
   ㅤㅤUX 제안 2 : 경고음과 진동으로 알려주기
   ㅤㅤUX 제안 3 : 'Disappear' 기능을 통해 보안 강화하기
   - 경영 전략 프레임, VRIO 통해 살펴본 당근마켓
   ㅤ(1) Value & Rarity, 가치와 희소성
   ㅤ(2) Imitability, 모방 난이도
   ㅤ(3) Organization, 조직적 차원
   - 당신의 인공지능, 당근이를 제안합니다!
   ㅤ(1) Explainable Dang-geun's Recommendation
   ㅤ(2) 당근마켓의 대화형 에이전트, 당근이가 출시된다면?
"
"https://news.hada.io/topic?id=2382","카카오 10년 간의 핵심기술이 집약된 Kakao i Cloud ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   카카오 10년 간의 핵심기술이 집약된 Kakao i Cloud

   카카오엔터프라이즈, B2B 클라우드 시장 진출
   - 올 하반기 공개 예정
   - 웹사이트 선공개

   카카오톡이 1년에도 몇번씩 터져서 솔직히 신뢰는 잘 안가내요.

   카카오톡이 터지는건 인프라 보다는 다른쪽 아닐까요? ㅎㅎ

   아직 가격이 공개가 안되었는데 과연 어느 정도 경쟁력을 가질지 궁금
   (아마도) 한국에만 리전이 있을듯 하니, 국내 서비스에서는 선택할 옵션이 하나 늘어나긴 하는 듯
   Scrap/WebShot 은 특이하네요

   관련 기사
   https://byline.network/2020/07/0703/
"
"https://news.hada.io/topic?id=2348","“Apple Silicon”: Macintosh 역사상 네 번째의 아키텍처 대전환은 어떤 의미인가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         “Apple Silicon”: Macintosh 역사상 네 번째의 아키텍처 대전환은 어떤 의미인가

   애플의 ARM칩 전환에 대한 총 정리
   - 주류 플랫폼 공룡들의 탈-x86 움직임은 이미 수 년 전부터 분명했다. 단지 제대로 성공한 기업이 없었을 뿐
   - “Performance per Watt”: 왜 굳이 전환하려 하는가
   - Universal 2와 Rosetta 2: 한 몸, 두 머리
   - 가상화와 Windows 사용
   - iOS 앱 실행과 Apple Silicon에서의 신규 보안 정책
   - 결론: 강력한 컴파일러, 강력한 칩, 빼앗기는 자유

   재밌는 분석이네요. 결국 잘 해내리라 봅니다. 완벽한(?) 생태계를 위한 마지막 발걸음이네요. 아이러니 하게도 Mac과 ios를 통합하는 순간 iphone - ipad - mac 은 완벽한 포지션을 만들겠네요.

   가상화 부분은 아래글도 같이 참고 하세요
   ARM Mac 에서의 가상화를 우려하는 이유 https://news.hada.io/topic?id=2343
"
"https://news.hada.io/topic?id=2397","UI/UX 디자이너를 위한 47가지 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         UI/UX 디자이너를 위한 47가지 교훈

   알기 쉬운 예제를 통해서 제품개발,PM,엔지니어,QA 등 에게도 유용한 리스트
   - 4 Rules of Thumb in UI Design
   1. Pixel 대신 Density(PPI)를 위해 디자인 할 것
   2. 8dp 단위 증분 사용
   3. Color Weight를 이용한 계층구조 잡기
   4. 느리게 만들지 말 것
   - 5 Principles of Ethical UX Designs
   5. 계속 알려줄 것
   6. 부정적인 정보는 강조
   7. 스팸은 그만
   8. 개인 정보는 투명하게
   9. 취소하기 쉽게
   - 4 Ways to Spice Up a UI Design
   10. 작은 문구에도 생명 불어넣기
   11. 다크모드 추가
   12. 에러 상태도 좋은 경험으로 만들기
   13. 패턴과 그라디언트 사용
   - 5 Commandments for UI Design
   14. 빈 화면 꾸미기
   15. 터치 인터페이스라면 타겟 크기를 넉넉히
   16. 무한 스크롤은 피드 스타일 콘텐츠에만
   17. 말로하지 말고 보여줄 것
   18. 네이티브 컴포넌트를 사용할 것
   - 5 Ways to Improve Dropdowns in UI & UX Design
   19. 많이 선택하는 값들을 기본값으로
   20. 단순화 할 것
   21. 개인화
   22. 시각적 요소 사용
   23. 콤보보다 리스트박스
   - 6 Soft Skills for UI & UX Designers
   24. 건설적인 피드백 주고 명확히 원하는 부분에 피드백 받기
   25. 적극적인 리스닝
   26. 모든 커뮤니케이션 자체가 UX 프로젝트
   27. Ego 버리기
   28. Autodidacticism (자율주의)
   29. 수용하기
   - 4 Common Mistakes UI Designers Make
   30. Scope를 무시하는 것
   31. 사용자 컨텍스트를 간과하는 것
   32. 동작보다 보이는거에 더 중점을 두는 것
   33. 상태에 대한 디자인 누락
   - 5 Insights from Apple's Human Interface Design Guidelines
   34. 로그인/회원가입은 최대한 뒤로 미룰 것
   35. 콘텐츠는 가능한 빨리 보일 것
   36. 도움요청이 있을거라 예상할 것
   37. 사용자들이 입력한 정보들을 잃어버리지 않도록 할 것
   38. 알림메시지에 민감하거나 개인적, 비밀 정보들을 포함하지 말 것
   - 6 Behavior Patterns for UX Design
   39. 안전한 탐색 : 어디로 움직이든 현재상태로 돌아올 수 있도록
   40. Instant Gratification : 즉각적으로 결과 보이기
   41. Habituation : 모든 동작이 어디서든 똑같이 움직이도록 하기
   42. 선택은 뒤로 미룰수 있게 하기
   43. 반복은 간소화
   - 4 Tips & Exercises to Develop Creativity
   44. 평가하지 말기 : 창의성의 결쇠는 판단에서 자유로워 지는 것
   45. 질 보다 양 : 창의성엔 더 많이 해보는게 도움이 된다.
   46. 입력을 차단하기 : 부족할때 더 창의적이 된다.
   47. 새로운 것을 시도하기
"
"https://news.hada.io/topic?id=2381","Sweetviz - EDA를 쉽고 빠르게 해주는 Python 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Sweetviz - EDA를 쉽고 빠르게 해주는 Python 라이브러리

   - EDA(Exploratory Data Analysis, 탐색적 데이터 분석)는 본격적인 모델링에 들어가기 전에 데이터셋의 특징을 알아내기 위해 필수로 선행되는 과정
   - 이 작업을 쉽게 할수 있도록 몇 줄의 코드로 고밀도 시각화를 생성해주는 파이썬 오픈소스
   - 실행 결과로 독립적인 HTML 응용프로그램을 생성해줌
   - 빠르게 목표값을 시각화하고 데이터셋을 비교(Train vs Test)하려고 만들어짐
   ㅤ→ EDA를 재미나게!

   개발자의 소개글 ""Powerful EDA (Exploratory Data Analysis) in just two lines of code using Sweetviz""
   https://towardsdatascience.com/powerful-eda-exploratory-data-analysis-…
"
"https://news.hada.io/topic?id=2444","개발자가 선택할 수 있는 23가지 커리어 패스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       개발자가 선택할 수 있는 23가지 커리어 패스

   코딩 말고 할 수 있는 일들을 6가지 분야로 구분
   - Customer-Facing Roles
   1. Developer Relations, Advocacy, or Evangelism
   2. Developer Marketing
   3. Sales Engineer
   4. Technical Recruiter
   - Product Roles
   5. Quality Assurance or Test Engineer
   6. Business Analyst
   7. Project Manager
   8. Scrum Master
   9. Product Manager
   10. Designer
   11. No or Low-Code Developer
   - Support Roles
   12. Sysadmin or DevOps Engineer
   13. Database Administrator
   14. Site Reliability Engineer
   15. Technical or Customer Support
   - Teaching and Writing Roles
   16. Technical Writer
   17. Teacher
   18. Trainer
   - Analytical Roles
   19. Data Scientist or Engineer
   20. Security Analyst
   21. R&D
   - Independence and Flexibility
   22. Freelancer or Consultant
   23. Startup Founder

   사실, ""개발자"" 라고 하면 실제로 코딩을 하는 사람들만을 지칭하는 것 같습니다만, 이 모든 사람들도 개발자라고 생각합니다.
   국내에선 1. DR & 에반젤리스트가 더 많이 나와야하고, 경영진이 이게 왜 필요한지 인식하는게 필요해요.
   DR이 필요한 환경이 되기 위해서는 플랫폼 기업이 많아지고, 기술얘기를 외부에 할만한, 또는 자신들의 오픈소스가 많은 회사가 더 많아져야 하는데 그런 회사가 국내에 많지 않은것도 사실이죠. 그런 회사가 생기라고 얘기할 수는 없으니 먼저 DR들이 많아지고 그들이 옮겨갈 회사들이 국내에도 많아지면 좋겠습니다.
   2번은 이름은 마케팅이지만, 이들이 Growth Hacker 들이라고 생각합니다. 3번에도 일부 포함되구요.
   개발자를 가장 잘 뽑을 수 있는건 개발자라고 생각하구요. 보통 스타트업들은 CTO들이 그 역할을 해주는 데요. 전문적으로 개발직군 출신 리크루터를 뽑을 수 있다면 큰 힘이 될거라고 생각합니다.
   개발자 출신 Project Manager 와 Product Manager 는 정말 중요한데, 개발자들이 사실 ""관리직"" 이라면서 싫어하기도 합니다만..
   하지만, 이 일에 알맞는 개발자들이 분명히 있고, 그들을 키우는 것은 국내에서 조직이 좀 커진 회사들의 의무가 아닐까 생각합니다.
"
"https://news.hada.io/topic?id=2427","Tabler icons : 550개의 고품질 무료 SVG 아이콘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Tabler icons : 550개의 고품질 무료 SVG 아이콘

   - 기본적으로 24x24 그리드에서 2px 라인으로 만들어진 SVG 아이콘들
   - MIT 라이센스로 무료로 사용 가능
   - SVG 태그로 사용시 Size (12~100px),Stroke (0.5~3px),색상 등을 조정 가능
"
"https://news.hada.io/topic?id=2393","Zettlr - 제텔카스텐을 위한 마크다운 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Zettlr - 제텔카스텐을 위한 마크다운 편집기

   - Zettelkasten (제텔카스텐, 메모상자) 기법에 적합
   - 학생, 연구원, 언론인, 작가등 글을 써야 하는 모든 사람을 위한 글쓰기 도구
   - 맥/윈/리눅스를 지원하는 FOSS 오픈소스 (Electron)
   - Zotero / JabRef 등과 연동 지원
   - 다크모드 지원
   - Pandoc, LaTeX 등을 이용한 다양한 Export 기능 (문서 및 슬라이드)
   * FOSS ( Free & Open Source Software )

   hada 에서 접하게 되는 이런 종류의 오픈소스도 정말 많네요.

   Zettelkasten (제텔카스텐, 메모상자) 은 독일의 사회학자인 니클라스 루만 (Niklas Luhmann) 이 공무원 재직 시절부터 자신의 메모를 정리한 방법으로 뭔가를 배우고, 자신의 지식으로 만들어가는 워크플로우를 최적화 하는 메모 기법.
   1. 종이 한장(A4용지, 인덱스카드 등)에 절반으로 선을 긋는다
   2. 한면(왼쪽면)에 머리속에 떠오른 모든 것을 적는다.
   3. 페이지당 문자+숫자로 붙은 번호를 적는다. 숫자+문자+숫자 등으로 어디든 끼워 넣을수 있게 하는게 포인트
   ㅤ→ 11과 12사이에 11a, 11b 가 들어갈 수 있고. 11a 와 11b 사이에는 11a1, 11a2 이런식
   4. 그리고 각 메모가 연관이 있다면 아까 선을 그은 반대쪽(오른면)에 연결된 메모 번호를 적는다.
   즉, 메모를 적고 그걸 연결하는 아날로그적 방법으로, 현대의 위키와도 비슷하다고 보면 됩니다.
   한글로는 잘 정리된 문서가 없어서 한장의 문서로 보려면 아래 링크를 추천
   The Zettelkasten Method https://lesswrong.com/posts/NfdHG6oHBJ8Qxc26s/…

   제텔카스텐을 가장 잘 디지털화 할 수 있는 도구중의 하나는 Roam 입니다.
   내가 노트툴 Roam 을 사랑하는 이유와 사용법 https://news.hada.io/topic?id=1349
   Foam - VS Code 기반 개인 지식 관리 도구 https://news.hada.io/topic?id=2356
"
"https://news.hada.io/topic?id=2347","LG전자, 사이버 범죄집단에게 소스코드 40GB 탈취당해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    LG전자, 사이버 범죄집단에게 소스코드 40GB 탈취당해

   악명높은 사이버 범죄집단 메이즈(Maze)가 이번에는 LG전자를 털었습니다. 그들은 LG전자 서버에서 약 40GB 분량의 정보를 탈취하고 랜섬웨어에 감염시켰다고 주장하며, 그 증거로 일부 파이썬 파일과 AT&T향 LG G8X(LG V50S ThinQ의 해외용 4G LTE판)의 펌웨어로 추정되는 파일들의 목록이 나와 있는 윈도우 탐색기 등의 캡쳐를 다크웹에서 공개했습니다. LG전자는 이에 대해 아직 공식 입장을 내놓지 않고 있으며, 정확한 피해 규모도 확인되지 않고 있습니다. 어쩌면 LG전자가 물밑에서 그들과 접촉하여 해당 데이터의 공개를 막기 위한 협상을 진행하고 있을 가능성도 있습니다. 이는 그들의 악랄한 수법 때문입니다.
   메이즈는 작년(2019년) 5월경 처음 발견된 랜섬웨어이자 이걸 사용하는 사이버 범죄조직의 이름입니다. 이들의 특징은 랜섬웨어로 데이터를 암호화하기 전에 먼저 파일들을 미리 빼돌려둔 다음, 피해 조직이 돈을 내라는 협박에 응하지 않으면 이 데이터 및 서버의 IP 주소 등 다른 해커들의 공격을 유도할 수 있는 기술적 정보를 공개하는 방법으로 피해를 극대화시킨다는 것입니다. 심지어는 피해 조직을 압박하기 위해서 피해 조직의 고객을 협박하는 경우도 있습니다. 예를 들어 병원을 털었는데 병원이 돈을 내지 않으면 각 환자에게 이메일로 의료기록을 공개하겠다고 협박하는 식으로, 설령 백업이 온전하다 해도 결국 돈을 낼 수 밖에 없게끔 하는 강도짓을 벌이는 것이죠. 이 짓을 처음 시작한 것이 바로 메이즈이며, 점차 다른 랜섬웨어 범죄자들도 이
   전략을 따라하기 시작했습니다. 작년 말 미국 연방수사국(FBI)은 자국 기업을 대상으로 이들에 대해 경고를 발령하기도 했지요. ( https://m.etnews.com/20200105000060 )
   메이즈는 피해 조직들에게 가격 협상이 얼마든지 가능하며, 돈을 낼 경우 추가 랜섬웨어 피해를 방지하기 위한 종합 보안 보고서까지 제공하겠다고 주장하고 있습니다. 그러나 이런 범죄자들의 말은 쉽게 믿을 것이 못 됩니다. 지난 3월 18일에 보안업체 엠시소프트(Emsisoft)가 블로그를 통해 랜섬웨어 그룹들에게 “적어도 이 시국에 의료기관에 대한 공격은 중단해야 하지 않겠느냐”고 공개적으로 호소하자( https://blog.emsisoft.com/en/35921 ) 메이즈는 “코로나19 사태가 진정될 때까지 의료기관에 대한 공격을 중단하겠다”고 선언하였지만, 사실 그 발표를 하던 시간에도 그들은 영국의 한 의료시설에 협박을 하고 있었다 합니다. 실은 올해 1분기 랜섬웨어 업계에서 가장 핫한 키워드가 바로 “코로나”였습니다. 이런 범죄자들에게는 세계적으로 사람이 잔뜩
   죽어나가고 사회적 혼란과 공포가 가중되는 요즘 시국조차도 그저 좋은 돈벌이 시기일 뿐이죠.
   p.s.
   참고로 이들은 한국어 메시지를 넣은 랜섬웨어를 국내에 퍼트릴 때 “Kim Jong Un is my God”이라는 문자열을 넣었놨었습니다. ( https://blog.alyac.co.kr/2461 ) 어그로 끄는 걸까요? 어차피 랜섬웨어 범죄자가 신분이 노출되어 걸리면 토막을 치겠다고 벼르는 사람이나 조직이 세계적으로 한둘이 아닐 텐데…

   참고용 링크 목록:
   https://www.boannews.com/media/view.asp?idx=85334
   https://www.boannews.com/media/view.asp?idx=87184
   https://www.boannews.com/media/view.asp?idx=88036
   https://www.boannews.com/media/view.asp?idx=89122
   https://cybleinc.com/2020/06/…
"
"https://news.hada.io/topic?id=2415","1인 SaaS 스타트업 6개월 운영 회고 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         1인 SaaS 스타트업 6개월 운영 회고

   Content Security Policy 도구 CSPer를 혼자 만드는 Stuart Larsen이라는 사람의 글
   - 아무도 신경쓰지 않아요
   ㅤ→ 사람들은 자신의 문제를 해결해 줄 도구를 원하지만, 만드는데 들어간 노력은 신경쓰지 않고, 어떻게 동작하는지도 관심없어요. 동작하기만 한다면 그들의 다른 문제에 신경을 쓸 수 있으니까요.
   ㅤ→ 잘못 되었다는게 아니에요. 이렇다는 것만 기억해 두세요.
   ㅤ→ 아무도 신경쓰지 않는 것의 장점도 있어요. 이관 작업하면서 2시간 서비스 다운되는걸 고민했지만, 아무도 신경쓰지 않았어요. 몇일 동안 다운되어 있어도 아무도 신경쓰지 않았을거라고 생각해요. 불행하게도 또는 운좋게도 저는 Reliability 에 초점을 뒀어요. (지금은 그게 약간 낭비였다고 깨달았지만)
   - 무료 트라이얼은 조심하세요
   ㅤ→ 무료 버전이 있으면 시도해보고 훌륭하면 업그레이드 할 것 같지만.. 실제로는 그리 많지 않아요
   ㅤ→ 수많은 무료 사용자가 있어도 업그레이드 하지 않으면 비용만 나갈 뿐이에요
   ㅤ→ 무료버전을 쉽고 사용하기 편하게 기능을 추가할수록 업그레이드 할 필요가 없어질 뿐이에요.
   - SEO / Pipeline / 광고
   ㅤ→ 지금은 분명해 보이지만, 시작할때는 이런 것들을 내재화 하지 못했어요.
   ㅤ→ 사람들은 당신의 제품을 단순히 우연히 발견하지 않아요
   ㅤ→ 처음에 제 제품(CSPer)를 발표했을때 부하가 많이 걸리지는 않을까 고민했어요. k8s 나 db 오토스케일링은 잘되나, 이슈를 트레이싱하고 모니터링할수 있는 모든 설정을 고민하고 추가했는데.. 실제로는 거의 아무도 오지 않았어요.
   ㅤ→ SEO/Marketing 은 가장 중요합니다.
   - 사람들은 Open Source 를 꽤 많이 좋아합니다.
   ㅤ→ 전 비슷한 오픈소스를 5-6년전에 만든적이 있어요. 사람들이 놀랍게도 빨리 유료제품에 비교해서 오픈소스를 추천합니다.
   ㅤ→ 지금 만든 제품이 그때의 오픈소스보다 훨씬 좋지만, 아직도 사람들은 그 오래된 동작하지도 않는 오픈소스의 링크를 공유합니다.
   ㅤ→ ""오픈 소스"" 라는게 안정성을 뛰어넘는 것처럼 보이기도 해요.
   ㅤ→ 오픈소스로 바꾸고 유료 플랜을 추가해 볼까 생각도 했지만 하진 않았어요.
   - 추가로, 자신을 위해 일하는건 놀랍습니다.
   ㅤ→ 일이 내 삶의 중심이고, 아침에 일어나 커피한잔 하고 12시간을 일하고 또 일하지만 계속 재미있어요.
   ㅤ→ 모든 작업에 대해서 뭘 했는지를 다 아는 것은 프로젝트를 재미있고 훌륭하게 만듭니다.
   - 지연된 보상
   ㅤ→ 다소 심리적인 것이지만, 열심히 일하고 보상을 받는 느낌을 제거하는게 꽤 어렵습니다.
   ㅤ→ 뭔가 큰 릴리즈를 했다고 즉시 새로운 고객이 생기는게 아니거든요.
   ㅤ→ 영향을 알려면 꽤 오래 기다려야해요. 즉시 고객이 오지 않아요.
   ㅤ→ 열심히 일하지만 아무것도 일어나지 않는 다는 것에 마음이 상할수 있어요. 그걸 분리하는게 저한테는 정신적인 장벽이었어요.
   - 약간은 롤러코스터 같아요
   ㅤ→ 일이 안좋아질 때는 많은일이 동시에 나빠지는 것 같아요. 고객이 떠나고, 파이어폭스 확장 스토어가 내 애드온을 삭제하고, 경쟁업체가 큰 투자를 받고..
   ㅤ→ 정서적인 버퍼가 중요합니다. 내 공간에 약간의 여지를 둬서 이런 충격을 버티도록 했었던거 같아요.
   ㅤ→ 영화/책/인터넷에서 모든 스타트업은 성공적이에요. 다들 성공하고 대가와 보상이 클것 같지만 실제로는 실패할 가능성이 가장 높습니다.
   - 외로움
   ㅤ→ 가장 큰 단점은 팀으로 일하지 않는 것입니다.
   ㅤ→ 새 고객이 생기면 여자친구한테 Twinkie(크림 들어간 케이크형 미국과자 ) 하나를 받는 시스템을 만들었어요.
   - 그외 좋았던 것
   ㅤ→ Staging/Prod 서버 분리. Staging 때문에 여러번 구원받았어요. 큰 변경할때 스트레스도 적구요. 돈가치를 합니다.
   ㅤ→ GKE 의 k8s는 꽤 좋았어요. 인프라 설정하는데 하루이틀이면 되었고 그 다음에 신경 안써도 되었어요. 알아서 스케일링됩니다.
   ㅤ→ 단일 명령으로 배포 및 여러개의 Makefile들. 나중에 쓸모 있는 모든 명령은 Makefile 에 넣기. 자잘한거에 신경쓰기 싫어요.
   - 실망스러운 것
   ㅤ→ 브라우저 확장 리뷰 프로세스 : 크롬은 몇주 걸리고, Firefox 는 코드가 잘 컴파일 되고, 그게 실제 앱스토어에 있는것과 일치하는지 매우 까다롭게 확인합니다.
   ㅤ→ SaaS 의 비용 청구 : 스타트업을 위해서 다른 서비스들을 많이 쓰는데, 정작 청구할 때 이메일 한통도 보내지 않는 서비스들이 있어요.
   ㅤ→ 링크드인,구글,페이스북,트위터에 광고를 시도했지만 별로 좋지 않았어요. 내가 광고를 잘 못 했을수도 있지만, 그 광고를 멈춰도 신규가입이 줄지는 않았어요.
   ㅤㅤ그 대신 저는 SEO에 더 집중하려고 합니다. 사람들이 문제가 생기면 보통 구글링을 하고, 그럴때 내 회사가 거기에 있으면 됩니다.

   저한테도 해당되는 말들인 것 같아서 살짝 요약해 봤습니다.
   위에서 아래 4가지가 가장 와닿는 것 같아요.
   ""아무도 신경쓰지 않아요""
   ""지연된 보상""
   ""SEO가 중요해요""
   ""Staging/Prod 서버 분리""

   항상 좋은 글과 번역, xguru님의 생각을 함께 공유해 주셔서 감사합니다!

   저도 blacktan님 댓글에 편승해서 같은 이유로 감사하다는 말씀드립니다!

   고맙습니다! 열심히 할께요 ^^
"
"https://news.hada.io/topic?id=2418","Puppeteer V5.0.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Puppeteer V5.0.0 릴리즈

   - 3주만에 메이저 버전업
   - 환경에 비 종속적으로 실행되도록 변경중
   ㅤ→ Node 종속 코드를 제거
   ㅤ→ 이미 제거된 puppeteer-web (브라우저 안에서 퍼펫티어를 사용케 하는 모듈) 기능을 다시 구현하기 위해서 필요한 선행 작업
   - 패키지의 /DeviceDescriptors /Errors 탑레벨 파일을 제거하고 .devices 와 .errors 로 스왑

   Puppeteer V4.0.0 릴리즈 https://news.hada.io/topic?id=2291
   Puppeteer V3.0.0 릴리즈 https://news.hada.io/topic?id=1912
"
"https://news.hada.io/topic?id=2407","1년 간의 유튜브 트렌딩 비디오 분석 (US)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       1년 간의 유튜브 트렌딩 비디오 분석 (US)

   - 개인이 API로 매일 크롤링해서 정제한 데이터를 통해 분석
   - 2019년 365일x매일200개 = 약 72,994 개중 중복 제거후 11,177개
   - 트렌딩에 들어가기 위한 조회수 : 최저 5.3만, 90%가 270만 이하에서 들어 갔고, 평균은 138만, 중위값은 77만
   - 30일간 트렌딩에 들어간 비디오가 총 6개 : BTS가 그중 2개
   - 트렌딩 비디오중 6%의 제목은 모두 대문자, 50%는 전체 대문자를 사용하지 않음, 20%는 1단어만 대문자, 10%는 2단어
   - 가장 많이 쓴 단어는 official,video,2019,vs,trailer 순
   - 제목의 길이는 36~64글자 사이. 평균 51글자
   - 가장 많은 트렌딩 비디오를 생산한 채널은 ""Linus Tech Tips"" 총 365개 - 2008년에 시작한 채널로 현재 5천개의 비디오
   ㅤ두번째 채널은 요리 채널인 ""Binging with Babish"" - 영화,드라마,애니에 나온 음식들을 재현해보는게 주요 컨텐츠
   - 카테고리 순위 엔터테인먼트(28%) > 음악(14%) > 스포츠 (10%) > 코미디 > 피플 & 블로그 > Howto > 영화&애니메이션
   - 업로드한 요일 화(11986) > 목,수,월 > 일,금 > 토(7345)
   - 업로드한 시간 : 피크는 오후 4시~6시(GMT)
   - 트렌딩 비디오가 되는데 걸리는 시간 : 평균 5.6일. 95% 이상이 13일 내에 트렌딩 리스트에 등록
   * 크롤링해서 정제한 데이터는 해당 페이지 하단에서 Gumroad 를 써서 판매중 ($19+ ~)

   유튜브의 데이터를 크롤링해서 데이터셋으로 판다는 것이 재미나네요.
   Gumroad 는 이런 용도로 가장 적절한 플랫폼인듯.
   Gumroad 얘기는 긱뉴스에 가장 처음에 올렸던 글이기도 합니다.
   1조 회사를 만들다 실패한 경험 이야기 - https://news.hada.io/topic?id=2
"
"https://news.hada.io/topic?id=2374","Nearby Sharing 베타 공개 - 안드로이드용 AirDrop","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Nearby Sharing 베타 공개 - 안드로이드용 AirDrop

   - 안드로이드 기기간에 빠르게 파일을 공유할수 있는 기능
   ㅤ→ 사진 / 비디오 / URL 등
   - 공유할 콘텐츠 종류에 따라 약간씩 다른 화면
   - 파일 받는 상대 선택 가능 : 모든 연락처, 연락처중 일부, 자신 숨김
   ㅤ→ 연락처 외부의 사람에게 파일을 받으려면 Nearby Share 창을 띄우고 기다리면 가능

   정말로 두개 플랫폼이 비슷해져 가네요. 이런건 둘이 협업해서 표준화하고 서로 호환되게 만들면 더 좋을텐데 말이죠..

   코로나19처럼 긴급한 경우가 아니면 어렵지 않을까 싶내요.
   특히 이런 기능은 사용자를 생태계 애플 생태계에 종속되게 만드는 효과가 크니까요.
   Apple, Google과 COVID-19 접촉 추적 기술 분야 제휴 - https://news.hada.io/topic?id=1865

   그러게요~ 양쪽 플랫폼이 호환되면 그보다 편한 건 없을 것 같습니다. ^*
"
"https://news.hada.io/topic?id=2350","Secretive - SSH키를 Secure Enclave에 저장하는 맥용 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Secretive - SSH키를 Secure Enclave에 저장하는 맥용 앱

   - Swift로 작성된 오픈소스 맥앱
   - Secure Enclave 내장된 맥(2016~7년 이후의 T1/T2 칩 탑재 모델) 대상
   - SSH키 사용필요 할 때 터치ID/애플워치 등으로 강화된 인증 필요
   - 키 접근시 시스템에 알림 메시지 노출
   - Secure Enclave 없는 모델은 YubiKey 같은 스마트 카드도 사용 가능
"
"https://news.hada.io/topic?id=2392","프론트엔드 개발자 면접 문제은행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           프론트엔드 개발자 면접 문제은행

   웹 프론트엔드 개발자 면접에서 나올 법한 각종 질문들에 대한 문제은행입니다. (영어, 한국어 등) Darcy Clarke라는 웹 개발자가 2009년부터 모으기 시작한 질문들을 2012년에 공개한 것이 시초로, 지금까지 100명에 가까운 사람이 기여하였지요. 이 문제은행에는 질문만 있고, 정답은 주어져 있지 않습니다. 회사 입장에서는 이를 프론트엔드 개발자 면접에 활용할 수 있겠고, 해당 분야 구직자 입장에서는 자신이 해당 분야를 얼마나 알고 있는지 점검하는 계기로 삼을 수 있겠습니다.
   참고 - (불완전한) 한국어 번역:
   https://h5bp.org/Front-end-Developer-Interview-Questions/translations/…
"
"https://news.hada.io/topic?id=2387","How to Target Email Clients","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      How to Target Email Clients

   - 특정 이메일 클라이언트를 구분해 낼수 있는 CSS 속성들 리스트
   - 메일링 리스트 등에서 주요 클라이언트 대상 최적화 할때 클라이언트 별로 사용 가능
   - Airmail, Android (버전별), Apple Mail (버전별), Gmail (Web,Android,Mobile Web), iOS (10+,13),
   ㅤOutlook ( mac,ios,android,web), Samsung email(S4,S5~S9), Thunderbird, Yahoo
"
"https://news.hada.io/topic?id=2409","ARM 프로세서의 즐거운 날들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ARM 프로세서의 즐거운 날들

   1. 애플의 ARM 전환
   2. Ampere의 128코어 서버용 ARM 칩 : 작년에 80코어, 지난주에 128코어 발표
   3. 세계에서 가장 빠른 슈퍼컴퓨터 ARM CPU 15.8만개짜리가 등극 (Fujitsu의 48코어 ARM SOC 사용)
   ARM이 모바일 시장은 이미 몇년전에 석권했지만, 다른 컴퓨터 산업 분야도 먹어치우려는 중
   맥뿐만이 아니라 다른 ARM 기반 데스크탑/노트북도 보게 될 것
   아마존은 이미 AWS용 자체 ARM 칩을 설계해서 사용중 (Graviton2)

   인텔은 지난 몇년간 정말로 문제가 많았어서, 애플이 ARM으로 전환하는데 가장 큰 도움준게 CPU에 대한 문제점 리포트를 애플이 계속 해왔다는 거라고 하더군요. 인텔은 정말 어디로 가는지 모르겠..
   AMD는 계속 CPU쪽에서 강력해 지고는 있는데, 아직 마켓셰어는 인텔한테 안되는지라 앞으로 몇년을 더 봐야 할거 같구요.
   글에 없는데 NVidia 는 Tegra 칩셋으로 이미 ARM 시장에서 입지가 있습니다. 닌텐도 스위치 와 Shield 가 이걸 이용중이기도 하죠.
"
"https://news.hada.io/topic?id=2423","SQLPad - 웹기반 SQL 편집기 & 시각화 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SQLPad - 웹기반 SQL 편집기 & 시각화 도구

   - Postgres, MySQL, SQL Server, Presto, Snowflake, BigQuery, SQLite 및 ODBC를 통한 모든 접속 지원
   - 도커로 셀프호스트 가능한 Node.js 웹앱 오픈소스
   - 사용자 기반 접속 및 권한 관리 (Admin,Editor)
   ㅤ→ Local / Google OAuth / OpenID / SAML/ LDAP
   ㅤ→ 사내용 웹 쿼리툴로 활용 가능
"
"https://news.hada.io/topic?id=2448","pgx - PostreSQL 확장을 Rust로 개발하는 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  pgx - PostreSQL 확장을 Rust로 개발하는 프레임워크

   - 원래 Postgres에 ElasticSearch를 연동해서 풀텍스트 검색을 하던 ZomboDB 확장을 Rust로 재구현하기 위해 개발
   - Postgres v10~v12 지원
   - cargo pgx 명령으로 확장 생성,컴파일,설치,테스트 가능
   - pgx::IntoDatum/FromDatum 으로 Datum 을 Rust 타입으로 변환가능
   - Rust의 panic!()을 Postgres ERROR로 변환

   보통 PostgreSQL 확장은 PG가 지원하지 않는 자료구조 나 데이터 타입을 지원하기 위해 종종 사용
   예를 들어 PostgreSQL Multiple Precision Arithmetic extension https://github.com/dvarrazzo/pgmp
   pgx 는 Rust 를 이용해 이런 확장을 쉽게 만들수 있게 해주는 프레임워크
"
"https://news.hada.io/topic?id=2327","WSL 2.0 Global configuration (.wslconfig) 을 통한 성능 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          WSL 2.0 Global configuration (.wslconfig) 을 통한 성능 향상

   WSL 2.0 Global configuration (.wslconfig) 을 통한 성능 향상
   * Windows 빌드 19041 이상에서 지원함
   - 커널 설정: 리눅스 커널을 사용자가 지정
   - kernelCommandLine : 사용자가 지정하는 kernel command line 추가
   - 메모리: WSL 2.0 사용하는 메모리 지정한다. 기본 값으로 윈도우의 80%를 설정함 (WSL 성능 향상)
   - CPU : WSL 2.0 에서 사용하는 CPU 개수 지정 (WSL 성능 향상)
   - localhostForwarding: localhost에 연결을 위한 포트 포워딩
   - 가상 메모리: SWAP 공간을 할당 크기 지정 가능 (WSL에서 메모리가 부족한 경우 사용)
   - 가상 메모리 파일 저정: Swap 파일을 지정 가능하다. 위치 설정을 하지 않으면 윈도우 프로파일 폴더 하위의 temp 폴더에 생성된다.
"
"https://news.hada.io/topic?id=2344","Quora 도 Remote First 로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Quora 도 Remote First 로 전환

   - 트위터, Shopify에 이어 영구적 재택근무(WFH) 회사로 전환
   - 실제로 코로나 기간동안 원격근무를 진행해보니 더 생산적이었음
   1. 출퇴근 스트레스가 없고
   2. 사무실보다 집에서 더 집중도가 높고, 많은 일을 하는게 가능
   3. Bay지역의 주택값이 너무 상승해서, 집이 멀어지고 통근시간이 더 길어짐
   4. 미국의 비자 및 이민 상황 등으로, 원격에서 더 좋은 인재들을 고용하기 쉬움
   5. 원격작업이 사무실근무보다 모든면에서 나은건 아니지만 점점 개선되어 갈 것
   - 사내 조사 결과 COVID-19 이후에도 60% 의 직원이 사무실 근무를 선택하지 않음
   - Remote First 가 의미하는 것
   1. 모든 직원은 (몇몇 예외를 제외하고는) 어디서든 근무 가능
   2. 마운틴뷰 사무실은 유지하지만, 코워킹 플레이스로 변경
   3. 대표도 사무실 근무를 안할 것이고, 한달에 한번 이내로 출근할 예정. 경영진들도 모두 리모트
   4. 모든 미팅은 화상으로
   - 다른 All-Remote 회사들과는 다르게 업무시간은 동기화 할 예정 ( PST 9AM ~ 3PM )

   한국만 해도 강남, 판교에 집중된 IT 회사들은 이런 업무동기화 시간만 맞춰준다면 리모트로 지방에서 일하는게 가능해지지 않을까요. 집값때문에 서울에서 월세나 전세로 올라오는 것보다 더 나은 상황을 마련할 수 있을 것 같다는 생각이 듭니다.

   단순히 우리 Remote 할꺼에요! 하고 자랑하는 글이 아니라
   이외에도 가정소득, 파트너(Significant Other)와의 근무 위치 문제, 노동의 도시 집중현상 등 다양한 부분에 대해서 깊이 있는 고민을 한 글이네요.
   혹시나 All-Remote 하겠다는 회사들은 공지글 쓸때 참고해서 읽어볼만 합니다 ;)
"
"https://news.hada.io/topic?id=2390","시니어 엔지니어로 넘어가기 위한 기술: 코드 읽기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      시니어 엔지니어로 넘어가기 위한 기술: 코드 읽기

   주니어 개발자가 시니어로 넘어가기 위해 필요한 핵심 역량 중 하나가 바로 [다른 사람이 작성한 코드를 탐색하고 읽는 방법을 아는 것]임을 이야기하며, 이와 관련된 몇몇 팁을 제시하는 블로그 글입니다. (한국어)

   2번째의 ""추측하면서 읽는다"" 와 3번째의 ""코드의 구조가 어떨 것인지 상상한다"" 는 개발 뿐만 아니라 영어책 읽는데에도 도움이 되는 방식입니다.
   영어로 된 소설 읽으려면 모르는 단어와 해석안되는 구절들에 겁먹고 포기하는 경우가 많은데, 추측하면서 읽어가다 보면 전개가 파악되고 이해가 되거든요. 계속 하다보면 그것도 빨라지고 점점 더 빈도가 줄어들구요.
   조금 과장해서 다르게 말하면 영어 원서로된 소설을 많이 읽으면 코드 읽는데도 도움이 되지 않을까 합니다.
"
"https://news.hada.io/topic?id=2432","구글 인앱결제 강제 파장, 공정위 들여다볼까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구글 인앱결제 강제 파장, 공정위 들여다볼까?

   구글이 하반기부터 게임 외 앱에 인앱결제 시스템 '구글 빌링 플랫폼'을 도입한다. 애플앱스토어와 마찬가지로 앱 매출의 약 30%를 수수료로 거둬들인다. 구글은 이 같은 내용을 국내 일부 업체에 알렸다. 업체 입장에서는 수익 감소, 이용자에게는 요금 상승 요인으로 작용할 전망이다. 디지털 콘텐츠 업계에게는 웹 결제가 대안이다. 웹에서 자체 결제시스템을 통해 결제하고 앱에 로그인해 콘텐츠를 이용하는 방법이다.
   넷플릭스가 대표적이다. 넷플릭스는 웹에서만 결제 정보를 입력할 수 있다. iOS, 안드로이드 결제시스템을 이용하지 않아 수수료를 내지 않는다.
   이 같은 방식을 적극 활용할 경우 플랫폼과 마찰이 생길 수 있다. 앱을 등록시켜주지 않거나 퇴출하는 상황도 배제할 수 없다.

   이해가 잘 안되는 기사네요. 이미 인앱결제 30%는 받고 있었고, 멀티플랫폼 콘텐츠의 경우는 그걸 예외처리 해주고 있었는데.. 섭스크립션을 한다는 건지, 뭘 한다는 걸까요?

   저는 이 내용으로 이해했습니다. 약관에 있었지만 엄격하게 적용하지 않았었는데 이제 강제한다는 내용으로...
   https://m.etnews.com/20200709000282
"
"https://news.hada.io/topic?id=2391","IT 개발자와 일할 때 필요한 모든 개발지식 A to Z 자료 모음집","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 IT 개발자와 일할 때 필요한 모든 개발지식 A to Z 자료 모음집

   비개발자가 온라인 서비스 개발 프로젝트에 참여해야 할 때 기본적으로 알아야 할 개발 관련 개념이나 업무 프로세스 등에 관해 대략 7개 페이지로 나누어 정리한 Notion 페이지입니다. (한국어) 각 개념을 엄밀하게 정의하기보다는 개발 프로젝트의 전반적인 큰 그림을 비개발자가 비교적 수월하게 받아들일 수 있게 하는 데 초점이 맞춰져 있습니다.

   비 개발자들이 보기에 편하게 구성된 자료네요.
   근데 전혀 다른 얘기지만, 블로그가 Notion 으로 만든거던데 노션 안느린가요 ㅡ.ㅡ?
   전 노션 웹사이트의 은근한 느림이 굉장히 신경쓰이던데..
   한국 사용자가 전체 국가중 2위라서 3분기에 한국어 버전 만든다고 하니 그러면 좀 나아지려나요

   생각보다 반응성이 그리 좋지 않습니다. 고사양 + 네이티브가 아니면 너무 느린 것 같아요. 묘하게 동기화도 느리고, 묘하게 애니메이션도 버벅이고..

   그 느림이 정말 은근 답답해서 못쓰겠던데 다들 잘 쓰셔서 신기해 하는중입니다.

   느린 게 저만 그런 게 아니었나 보군요.

   저도 저만 이상한 줄..
"
"https://news.hada.io/topic?id=2431","새로나오는 인텔 CPU에 대해서 리누스 토발즈옹이 악담을 함.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   새로나오는 인텔 CPU에 대해서 리누스 토발즈옹이 악담을 함.

   최근 본인이 사용하는 컴퓨터는 AMD 라고 얘기했던 리누스 토발즈가 앞으로 발표할 인텔 칩셋에(XEON Alder Lake) 대해서 고통스럽게 죽었으면 좋겠다고 악담을 함.
   벤치마킹이나 잘 받을려고 이상한 CPU 명령어는 (AVX-512, advanced vector extentions 이런 걸 보니 HPC같은 곳에서 쓰여질 것으로 예상) 그만 만들고 AMD처럼 CORE나 더 많이 달아주고 그런 계산할 것 있으면 GPU에나 맡기라는 얘기인 듯.
   그렇다고 고통스럽게 죽어버려라.... 라고 말할 정도면 정말 많이 열받은 듯.

   AMD가 정말 마음에 드신듯 ㅎ

   AVX-512 같은 쓸데없는거 하지말고 니네 할거나 잘 해라...가 요약이네요...

   그런 듯 합니다. core만 잔뜩 늘려주면 내가 알아서 할께라는 느낌도 들구요^^
"
"https://news.hada.io/topic?id=2370","EC2 Shop - EC2 인스턴스 가격정보 편하게 보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    EC2 Shop - EC2 인스턴스 가격정보 편하게 보기

   - 리젼별 / 인스턴스 종류별로 EC2 가격 편하게 보기
   - 쉘에서 CURL 로도 쉽게 볼 수 있음 (JSON으로도 리턴 가능)
   - 인스턴스 타입 / 메모리 / vCPU / 저장소 / 네트웍 / 시간당 비용 / 월간 비용
   - 스팟 인스턴스 가격은 5분마다 가져와서 갱신

   온디멘드의 경우에 예전 가격을 볼 수가 없어서 싸진건지 비싸진건지 파악이 어려운데,
   온디멘드 가격 히스토리를 볼 수 있는 사이트가 있었으면 좋겠내요.
   스팟 가격은 콘솔에서 볼 수 있던데 말이죠.
   https://docs.aws.amazon.com/ko_kr/AWSEC2/…

   얘 코드 보니 가격을 JSON 으로 기록하던데 그걸 버전별로 기록해두면 히스토리 보는거 가능은 하겠네요...

   많이 쓰는 한국 리전의 t2,t3만 본다면 요런 주소로 가능합니다.
   https://ec2.shop/?region=ap-northeast-2&filter=t2,t3
   curl -H 'accept: json' 'https://ec2.shop/?region=ap-northeast-2&filter=t2'
"
"https://news.hada.io/topic?id=2324","GitHub Sponsors 로 1.2억원을 벌은 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GitHub Sponsors 로 1.2억원을 벌은 방법

   - Lalavel 기반 풀스택 프레임워크인 LiveWire 개발자의 오픈소스 전업 후기
   - 2019년 12월 깃헙 스폰서 등록 후 7개월만에 $100K를 넘었음(전 직장 연봉 $90K)
   1단계: 처음 시작은 Good-Hearted Folks 들의 기부 → $6K
   2단계: Sponsorware 를 시작 → $17K
   ㅤ→ 좋은 소프트웨어를 만듬
   ㅤ→ 특정 숫자가 될 때까지는 스폰서 한사람들 한테만 공개
   ㅤ→ 어느 정도 숫자가 넘으면 오픈 소스로 공개
   3단계 : Sponsored Screencasts → 3달만에 $40K 에서 $100K로
   ㅤ→ LiveWire를 설명 하는 무료 스크린캐스트를 먼저 몇개 공개
   ㅤ→ 스폰서 전용 스크린캐스트를 추가 ( 스폰서 금액은 개인당 월 $14 )
   ㅤㅤ* 이걸 가능하게 하기 위해 GitHub 인증이 붙은 별도 Laravel 앱을 만듬 ( 스폰서인지 확인하기 위해 )
   중요했던 것들
   #1 좋은 소프트웨어를 만들 것
   #2 Audience 만들기
   #3 알맞은 스폰서 금액 정하기 : 너무 낮은 월 $1~5 보다 $9로 시작했고, 스크린캐스트는 $14로 설정
   #4 좋은 스폰서십 티어 이름 정하기 : ""Platinum"" 보다는 ""The Agency"" 같이 회사가 스폰서링 할 때 명확한 이름을
   #5 돈을 많이 번다는 것에 죄책감 느끼지 말기

   https://www.patreon.com/ 을 쓰면 아마도 비슷하게 스폰서 전용으로 스크린캐스트나 자료를 공개할 수는 있는데, 여긴 수수료가 5%~8% 라서 개발자라면 깃헙 스폰서가 훨씬 좋은 선택이긴 하겠네요.

   큰 오픈소스가 아니어도 돈을 벌수 있는 방법을 본인이 찾았네요.
   스폰서드 스크린캐스트는 정말 좋은 방식인듯
"
"https://news.hada.io/topic?id=2330","vSSH - 수만개 SSH 커넥션에 동시에 명령 내리기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     vSSH - 수만개 SSH 커넥션에 동시에 명령 내리기

   - Go로 작성된 Yahoo의 시스템 관리 및 자동화 도구 오픈소스
   - 수만개 SSH연결을 만들고 유지하며 명령을 내리고 전체 출력을 스트리밍 또는 최종 결과만 수신 가능
   - 연결당 Label 지정 후 DSL 쿼리 가능
   - 자동화를 위한 API 지원 (gRPC/RESTful)
   - 리눅스/윈/Darwin/BSD/솔라리스 지원
"
"https://news.hada.io/topic?id=2371","How to Code in Go [627P 무료 PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    How to Code in Go [627P 무료 PDF]

   - 디지털오션 커뮤니티의 Go 튜토리얼 시리즈에 기반해서 만든 무료 이북
   - 43개 챕터로 기초부터 쉽게 설명
   1. Go 설치 : 윈/맥/리눅스
   2. 주석, 자료형, 스트링, 변수, 상수
   3. Maps, Arrays, Slices
   4. Go 의 Error / Panic 처리 방식
   5. 패키지 만들기
   6. 조건문/Switch/Loop/함수 사용
   7. 재사용을 위한 자료구조 정의 및 인터페이스 만들기
   8. 다른 OS와 CPU 아키텍처를 위한 Go 프로그램 빌드 및 설치하기

   보면 마스터 되나요? ㅎㅎ
"
"https://news.hada.io/topic?id=2424","Pinboard is Eleven","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Pinboard is Eleven

   11년째 북마킹 서비스 Pinboard를 혼자 개발해온 maciej 의 회고.
   년간 신규 북마크 2.4억개, AU 1.9만명, 년 2.5억의 매출. 투자는 0원
   올해는 PHP와 MySQL을 최신버전으로 업그레이드 및 신규 API 개발

   I Can't Stop Winning! https://news.hada.io/topic?id=27
   10주년에 적은 글도 공유한 적 있는데 벌써 1년이 되었군요.
   긱뉴스 1주년 회고도 적어보려고 합니다 ;)
"
"https://news.hada.io/topic?id=2395","Readspike -해외 주요 IT 뉴스 사이트를 한눈에","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Readspike -해외 주요 IT 뉴스 사이트를 한눈에

   BBC, Reddit, Hacker News, The Verge 등. 해외의 주요 IT / 일반 뉴스들의 인기글들을 한눈에 볼 수 있는 사이트입니다. 매일 하루 한번씩 보고 있는데, 얻어가는 정보가 많네요!

   거의 비슷한 사이트로 https://skimfeed.com/ 도 있습니다.
   한국어 버전으로 이런걸 만들어보려고 했는데, 몇개 안되서 고민중이에요..

   한국어 버전은 GeekNews나 CNET.. 이외에는 크게 없을 것 같은 느낌이 ;ㅁ; 그래도 UI가 한국어고, 영미권 IT 뉴스 사이트 헤드라인만 번역 + 국내 IT 뉴스 사이트들 합쳐 놓으면 좋은 서비스가 될 것 같아요. 아무래도 접근성이 좋을테니까..
   저는 저렇게 리스트를 받아오는 표준이나 규격이 따로 있으면, 자기가 보고 싶은 웹사이트 몇개만 핀을 걸어서 리스트로 보여주는 사이트가 있으면 좋을 것 같아요. 시간만 나면 만들어보고 싶네요 ㅠ..
"
"https://news.hada.io/topic?id=2428","카메라에 덮개가 장착된 상태에서 MacBook을 닫지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   카메라에 덮개가 장착된 상태에서 MacBook을 닫지 마세요

   맥 노트북에 카메라 덮개가 장착된 상태에서 Mac 노트북을 닫으면 디스플레이가 손상될 수 있습니다.
   업무 환경의 특성상 Mac 노트북의 카메라를 가려야 하는 경우
   ㅤ→ 카메라 덮개가 평균 프린터 용지(0.1mm)보다 두껍지 않아야 합니다.
   FaceTime HD 카메라는 사용자의 개인 정보 보호를 염두에 두고 설계되었으며 카메라 표시등이 장착되어 있어 카메라가 활성화되면 녹색등이 켜집니다.

   저는 그냥 포스트잇으로 가려요 ㅎㅎ

   예전에 주커버그가 자신의 맥북 카메라를 가린 사진이 화제가 된적도 있고,
   https://9to5mac.com/2016/06/…
   컨퍼런스등에서 주는 기념품중에 개폐 가능한 노트북 카메라 커버 같은 것도 많이 나눠주는데 그거 때문에 A/S가 많이 들어와서 이런 공지가 나온듯
   HN에서는 카메라 사용중을 알려주는 LED 해킹이 가능한가 아닌가로 말이 많은데, 요즘 모델은 기본적으로 LED가 고장나지 않는한 카메라 전원이 들어오면 하드웨어적으로 무조건 켜진다고 합니다.
   그리고 Apple T2 칩이 내장된 맥북 또는 2020년 이후 iPad의 경우, 덮개가 닫히면 마이크가 하드웨어적으로 연결 해제되도록 되어 있다고 하네요. 애플이 사생활 침해에 대해서는 꽤 신경쓰고 있다는 걸 보여주는 예일듯
   https://support.apple.com/ko-kr/guide/security/secbbd20b00b/1/web/1
"
"https://news.hada.io/topic?id=2358","크로미움, 9월부터 TLS 인증서 유효 기간을 1년으로 적용예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  크로미움, 9월부터 TLS 인증서 유효 기간을 1년으로 적용예정

   - 2020-09-01 이후 발행되는 인증서에 대해 유효기간을 최대 398일로 강제
   - 이를 넘기는 인증서는 ERR_CERT_VALIDITY_TOO_LONG 에러와 함께 잘못된 인증서로 취급

   Safari 도 하겠다고 얘기한 바 있습니다.
   Safari 브라우저, 올 9월부터 13개월 이상 유효기간을 가진 인증서 거절예정 https://news.hada.io/topic?id=1589
"
"https://news.hada.io/topic?id=2357","Spotify로 월 $800벌기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Spotify로 월 $800벌기

   인디음악가 Steve Benjamins의 경험담
   1. Spotify 에서 월 17.7만회 재생 (96%, 나머지는 애플 및 구글)
   ㅤ 수익은 월 $800(약 100만원). Spotify가 그중 93%
   2. 알고리즘 기반 재생이 정말 중요
   ㅤ 매주 월요일 재생숫자가 확 올라가는데, Spotify 의 Discover Weekly 플레이리스트 덕분
   ㅤㅤ→ 사용자가 좋아할 것이라고 예상하는 음악들을 자동 추천하는 알고리즘 재생목록
   ㅤ 이는 인디음악가 뿐만 아니라 유명한 가수들에게도 마찬가지
   3. 앨범보다 곡들이 중요
   ㅤ 위 알고리즘은 앨범이 아닌 곡 기반. SEO랑 마찬가지 → 구글은 웹사이트가 아닌 페이지를 인덱싱
   ㅤ 유명가수라면 앨범을 내고 언론의 관심을 받겠지만, 작은 아티스트들에겐 그렇지 않음
   ㅤ 앨범을 내는것 보다 노래를 각각 릴리즈 하는것이 더 나음
   4. 편집자(Human Editor) 들은 여전히 중요.
   ㅤ 알고리즘 재생목록에 많이 들어가는 방법은 먼저 사람들이 만든 플레이리스트에 들어가는 것
   ㅤ SEO랑 비슷. 플레이리스트는 백링크와 같아서 플레이리스트에 들어가면 노래의 품질에 대한 투표와 같음
   ㅤ NY Times가 다른 웹사이트보다 권위있는 것처럼 모든 플레이리스트가 똑같은 파워를 가지는 것은 아님
   ㅤ Spotify 에서 가장 권위있는 재생목록은 ""Editorial Playlist"". Spotify 의 공식 편집자들이 선별한 재생목록
   ㅤ 경험에 의하면 여기에 등록되면 Discover Weekly 에 많이 등장
   ㅤ * 공식적으로 Editorial Playlist에 들어가는 방법은 없음. 유명 가수들은 조금 쉬운편. 하지만 그래도 그들이 차지하는건 20% 이하라 인디가수들에게도 희망은 있음
   5. 알고리즘은 아티스트와 청취자 간에 느슨한 관계를 만듬.
   ㅤ 가장 인기있는 곡 ""Circles""가 지금까지 135만회 재생되었고 매월 65000명이 Spotify에서 음악을 듣지만, 자신의 인스타그램 팔로워는 480명
   ㅤ Spotify에서 음악을 듣긴 하지만, 깊은 관계를 만들지는 않음. 그냥 Circles 를 자신의 라이브러리에 추가했을 뿐.
   ㅤ 좋아하니까 음악을 만들어야지, 유명해지려고 만들지 마세요. 유명해지려면 유튜버나 Tiktok 인플루언서가 되는게 나을거에요.
   6. 가장 깊은 관계는 청취자가 노래를 친구들과 공유할 때 생깁니다.
   7. 작고, 유명하지 않은 것도 훌륭합니다.
   ㅤ 투어도 하지않고 많이 판매하지도 않고 메이저 레이블과 계약한것도 아니지만, 그냥 음악 만드는게 좋음
   ㅤ 매주 3~4명의 사람들이 보내주는 따뜻하고 친절한 이메일/DM을 받는 것이 정말 훌륭한 경험
   ㅤ 유명했다면 사람들에게 계속 평가받고 너무 유심히 본다고 느꼈을 것
   ""기분이 좋아요. 이게 내가 필요한 전부고, 조용히 내 음악을 하는 것이 행복합니다.""

   요즘 개발자들은 앱스토어가 제공하는 것들을 원하지 않는다 https://news.hada.io/topic?id=2314
   위 글에서 Spotify 에서 곡 재생당 0.32¢를 받는 것에 대해서 너무 작다고 얘기되기는 했는데,
   어느 정도 이상의 수치가 되면 이렇게 자신만의 음악을 하면서 돈을 벌수 있게 만들어 준다는 점이 재미난 것 같습니다.
"
"https://news.hada.io/topic?id=2445","WindowSwap - 세상 다른 사람들 창밖에는 뭐가 보일까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WindowSwap - 세상 다른 사람들 창밖에는 뭐가 보일까

   - 전 세계 사람들이 자신의 창밖 모습을 공유하는 서비스
   - 클릭해서 계속 다음 창으로 이동하면 전 세계의 창밖 풍경을 감상 가능
   - 실시간은 아니고, 10분 정도의 HD영상을 찍어서 운영자에게 보내면 그걸 랜덤으로 보여주는 방식

   재밌네요~ 넷플릭스 불멍과 유사한 효과를 다채롭게 볼 수 있을 것 같네요~~

   전세계의 웹캠을 실시간으로 보는 EarthCam 같은 서비스도 있지만
   https://www.earthcam.com/
   남의 창문 밖이라는 컨셉 자체가 좋은거 같아요.
   이런 것은 실시간일 필요도 없고, 느낌 좋은 영상만 모아서 볼수 있으니까요.
   별도 장비 필요없이 스마트폰으로 10분정도 찍어서 공유하는게 많은 것 같습니다.
   보고 있으면 은근 재미있어요. (가끔 창가에 고양이가 같이 나오면 계속 보게됩니다..)
"
"https://news.hada.io/topic?id=2331","Android용 Microsoft Defender ATP 프리뷰 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Android용 Microsoft Defender ATP 프리뷰 공개

   - ATP(Advanced Threat Protection)
   - SmartScreen : 피싱/안전하지 않은 웹사이트를 차단
   - 멀웨어 스캐닝 : 안전하지 않은 앱 설치를 차단하고, 딥러닝을 통해 멀웨어 앱/파일을 감지
   - 위험한 앱이 설치되거나 하면 MS Endpoint Manager 를 통해서 중요 데이터 접근을 차단
   - 기업들을 위한 보안기능 포함 : MS Defender Security Center 를 통한 중앙 관리 등

   아무리 MS가 만든다고 해도.. 뭔가 거부감이 드는 건 사실이네요. 모바일에서까지 이래야 할까? 하는
"
"https://news.hada.io/topic?id=2352","Expose - PHP로 만들어진 ngrok 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Expose - PHP로 만들어진 ngrok 오픈소스 대체제

   - 로컬 웹사이트를 외부에서 접근하게 해주는 ngrok 같은 터널을 PHP로 작성
   - ngrok과 비슷한 CLI 제공
   - 전용 웹 대쉬보드에서 모든 요청사항들에 대해서 상세하게 확인 가능
   - SubdomainGenerator, UserRepository 등 인터페이스를 확장 가능

   ngrok 은 1.x 에서 2.x 대로 넘어가면서 오픈소스가 아니게 되었고 유료화 되어 1.x 코드는 더 이상 개발자가 지원 안합니다만
   1.x 프로젝트는 아직 오픈소스로 제공 되고, 그거 기반으로 많은 포크들이 있긴 합니다.
   Go 로 작성된 pgrok https://github.com/jerson/pgrok
   Expose 는 PHP 여서 자신이 운영하는 기존 PHP 설치된 서버에 올려서 간단히 운영이 가능하고,
   PHP 코드를 수정해서 쉽게 변경하고 즉시 반영해 볼수 있다는게 장점이 될 수 있겠네요.
   ( HN에선 이걸 왜 PHP로 짜냐! 라고 싸우긴 합니다만.. https://news.ycombinator.com/item?id=23550198 )
"
"https://news.hada.io/topic?id=2402","H.266/VVC(Versatile Video Coding) 코덱 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                H.266/VVC(Versatile Video Coding) 코덱 공개

   - H.265/HEVC 의 후속작으로 품질 저하없이 50%까지 데이터를 줄임
   ㅤ→ 90분 UHD영상의 경우 H.265가 10기가, H.266은 5기가
   - SD/HD/4K/8K 모든 해상도에서 효율적으로 전송
   - HDR 과 360° 영상까지 지원
   - Fraunhofer HHI 와 애플,에릭슨,인텔,화웨이,MS,퀄컴,소니 등이 참여

   가장 많이 비교되는게 오픈소스이고 로열티 없는 AV1 ( https://aomedia.org/av1/ ) 인데,
   작년에 BBC 에서 테스트 한 바로는 AV1 보다는 VVC가 효율이 더 좋긴 한거 같은데.. 어떻게 흘러갈지 모르겠네요.
   https://bbc.co.uk/rd/blog/…
   진짜 경쟁은 AV1 의 후속인 AV2 하고 될수도 있겠는데, AV2는 이제 시작하는 단계여서 별로 정보가 나오지도 않구요.

   H.265/HEVC 가 첫번째 드래프트가 나온게 2010년이고, 애플 제품에 HEVC가 들어온게 2017년 iOS11 때였으니까,
   H.266/VVC 가 애플 및 기타 제품에 들어가려면 빨라도 2025~2027년 이후가 될거라고 하는 군요.
   표준 마무리하고 칩만들고 적용하고 하려면..
"
"https://news.hada.io/topic?id=2365","뉴욕타임즈, Apple News에 더 이상 기사 공급 안할 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   뉴욕타임즈, Apple News에 더 이상 기사 공급 안할 것

   - 애플뉴스의 1.25억명의 구독자가 가져다 주는 트래픽이나 광고 수익은 좋지만, 실제 독자와의 직접적인 관계를 잃어버림
   - 물론 애플이 가져가는 신규 구독 수수료 비율(30%)도 부담
   - 애플은 작년에 Apple News + 라는 월 $9.99 에 유료 신문/잡지 구독 서비스를 시작
   ㅤWSJ,LA Times,Wired,Vanity Fair 등은 참여 해서 많은 신규 독자와 수익을 내었으나 NYT는 처음부터 참여 안했음
   - NYT 는 지난달 구독자가 6백만명을 넘었고 매출은 계속 성장중

   점점 애플 생태계에 묶이는거 보다 독자 노선을 걷는게 낫다고 판단한건데..
   구독자 6백만이 넘는 뉴욕타임즈니까 가능한 방법 같네요.
   뉴욕타임즈, 광고용 써드파티 데이터를 사용하지 않기로 https://news.hada.io/topic?id=2147
   뉴욕타임즈 CTO의 4년 회고 https://news.hada.io/topic?id=2016
   뉴욕타임즈가 뉴스룸 워크플로우를 개선하기위해 CMS를 설계한 방법 https://news.hada.io/topic?id=973
"
"https://news.hada.io/topic?id=2326","마켓플레이스 비즈니스 모델을 평가하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        마켓플레이스 비즈니스 모델을 평가하는 방법

   비즈니스를 평가할 때 봐야할 7가지
   1. Product-Market-Fit : 사람들이 정말 이걸 원하나 ?
   2. Why Now : 왜 지금? 뭐가 바뀌었나
   3. Market : 충분히 많은 사람들이 이걸 필요로 하나 ?
   4. Distribution : 그 사람들을 사용자로 끌어들일수 있나 ?
   5. Team : 우리 팀이 이걸 만들기에 적합한가 ?
   6. Moat : 우리가 1등을 하고 그걸 지킬수 있을까 ?
   7. Business Model : 이 비즈니스가 빠르게 성장하는 효율적인 것일까 ?
   마켓플레이스 비즈니스를 평가할 때 추가로 봐야할 7가지
   1. Demand Product-Market-Fit : 소비자들이 정말 이걸 원하나 ?
   2. Supply Product-Market-Fit : 판매자들이 정말 이걸 원하나 ?
   3. Scalability with Quality : 훌륭한 품질을 유지한 채로 성장 가능한가 ?
   4. High frequency and average order value : 재구매율, 평균 주문금액, 잠재 매출은 ?
   5. Reasons to stay on-platform : 판매자들이 우리 플랫폼에 남아 있어야만 할 이유는 ?
   6. Non-monogamous : 고객들이 꼭 다시와야 할 이유는 ?
   7. Fragmentation : 정말로 소비자/판매자 양쪽이 서로를 만나기 어려운가 ? (우리가 없다면)
"
"https://news.hada.io/topic?id=2388","gitqlite - Git Repo에 SQL 쿼리 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     gitqlite - Git Repo에 SQL 쿼리 하기

   - go-git 을 이용해서 Repo 내용을 SQLite 의 Virtual Table 로 구현
   - gitqlite ""SELECT * from commits"" 처럼 사용 가능
   - 테이블 & 필드 :
   ㅤ→ commits : id, message, summary, author, commiter, parent_id..
   ㅤ→ files : commit_id, name, type, contents..
   ㅤ→ refs : name, type, hash
   - SELECT count(*) AS commits, SUM(additions) AS additions, SUM(deletions) AS deletions, author_email FROM commits GROUP BY author_email ORDER BY commits
"
"https://news.hada.io/topic?id=2346","Amazon, 자율주행 회사 Zoox 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Amazon, 자율주행 회사 Zoox 인수

   - 가격은 비공개지만 약 1.2조($1B) 예상
   - Zoox는 처음부터 자율주행만이 아니라 완전히 통합된 차량을 개발하려고 계획한 야심찬 회사
   ㅤ→ 자율주행 기술 개발후, 차를 만들고, 로보택시 서비스 까지 계획
   ㅤ→ 자동차 개발에는 수조원 이상이 들어가므로, 아마존은 계속 더 투자를 해야할 것
   ㅤ→ 아마존이 Zoox의 기술로 정확히 뭘 하고 싶은지는 불분명. 창고 로봇이나 배송차량등에 일부를 적용하거나 그냥 프로젝트 전체를 계속 진행시키거나 할 듯
   - The Information이 처음으로 보도
   ㅤ→ Zoox 는 약 천명의 직원이 있는 자율주행 스타트업
   ㅤ→ 지난 6년간 ""운전대가 없는"" 자율주행 양방향 자동차를 만들어 왔음
   ㅤ→ 이 차는 앞뒤도 없어서 양쪽으로 갈수 있음. 막히거나 장애물을 만나면 코스를 빠르게 변경 가능
   ㅤ→ 아마존은 다른 자율주행차 개발회사인 Aurora Innovation 에도 투자했고, 또한 전기자동차 회사인 Rivian 에도 투자한 바 있음

   아마존, Rivian 에 10만대의 배달용 전기트럭 주문 https://news.hada.io/topic?id=563
   아마존이 자율주행 + 전기차에 다양하게 베팅하고 있는 듯.
   애플도 분명히 하고 있긴 할텐데, 어떤식으로 진행될지 궁금하네요.
"
"https://news.hada.io/topic?id=2333","App Store, 인앱결제 항목에 대한 환불 알림 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    App Store, 인앱결제 항목에 대한 환불 알림 지원

   - Consumables, Non-consumables, Non-Renewing Subscriptions 등 모든 인앱결제 항목의 환불에 대해서 알림 지원
   - 구독 상태 변경을 위해 사용하던 Server-To-Server Notifications 기능을 통해서
   ㅤ고객이 환불하면 거의 실시간으로 알림 전송

   드디어 이 기능이 지원 되는군요.
   인앱결제 항목을 사용자가 환불 받는 것들을 회사의 손실로 처리하고 있는 곳들이 많았을텐데 다행입니다
"
"https://news.hada.io/topic?id=2367","Firefox 78 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Firefox 78 릴리즈

   - Protections 대쉬보드 추가 : 트래킹 방지, 개인정보 유출등을 통합해서 보기
   - 문제 발생시 재설치 대신 사용가능한 Refresh 기능 제공
   - 인텔 GPU용 WebRender로 그래픽 속도 개선
   - Extended Support Release (ESR) 여서 지난 10개 릴리즈에 추가되었던 새 기능들이 ESR에도 추가
   ㅤ→ Kiosk, 서비스 워커, PIP 등
   * ESR : 최신 기능을 포함하지는 않지만 보안 및 안정성 수정사항들은 먼저 적용한 버전.
   안정적으로 사용해야 하는 기관등에서 새 기능 필요없이 보안패치만 적용해서 최신 버전을 사용하고자 할때 사용 가능.
   새로 만들어진 기능들이 안정적으로 다 테스트 된다음 ESR에 추가

   개발자용 변경 사항은 여기
   https://hacks.mozilla.org/2020/06/new-in-firefox-78/
"
"https://news.hada.io/topic?id=2364","자체 음식 배달 서비스 Sprig의 실패 경험담","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       자체 음식 배달 서비스 Sprig의 실패 경험담

   - 실리콘밸리에선 실패는 잘 얘기 안하지만 90%의 스타트업은 실패함
   - UDemy 의 공동창업자이자 Lyft의 Growth Advisor 였던 Gagan Biyani가 창업했던 Sprig의 4년간 성공-실패 경험을 다른 트위터 쓰레드
   1. 2013년 Lyft에 재직중일때 음식을 위한 Lyft 는 어떨까 라는 생각에서 시작
   2. 그 당시 음식 배달은 형편없었고 식당들도 배달에는 관심없었음. 1시간 이상 걸리고 비쌌음
   3. 몇번의 프로덕트 이터레이션 이후에 ""마법"" 을 찾음
   ㅤ→ 3번의 화면 탭과 $15로 15분만에 건강한 음식을 배달 받을수 있다면
   4. 이걸 가능케 하기 위해 직접 식당을 운영해야했음. 비쌌지만 그만큰 가치가 있었음
   5. 런칭하고 바로 성공적이었음. 믿을수 없을 정도로 버즈가 생겼고 몇달 만에 년 1백만 달러 매출이 가능해 보였음
   6. 시리즈 A는 뜨거웠고 하루에 4명의 투자자 미팅을 했음. 1천만달러 를 펀딩 받음
   7. 좋은 투자자와 좋은 팀으로 달리기 시작
   8. 2개의 챌린지가 생김
   ㅤa) 정부. 샌프란시스코의 Health+Planning 이 우리를 힘들게 했고, 공무원들에게 로비를 해야했음
   ㅤb) Gross Margins(총 이익). 커지면서 번레이트도 커졌고, 음식을 팔때마다 손해였음. 크리티컬 매스에 도달해야 했음
   9. 엄청난 매출 성장과 함께 번레이트도 커졌음. 곧 한달에 $1.5M ~ 2M 을 버닝하기 시작
   10. 우린 번레이트 보다 항상 ""1-2달 뒤쳐져"" 있었음
   11. 마침내 이익에 약간의 진전이 있었지만 그건 제품의 품질저하를 의미했음 : 음식은 변덕스러움
   ㅤ→ 돈이 적게 들어오면, 안 좋은 음식이 나옴
   12. 그럼에도 불구하곤 이건 로켓이었음. Udemy 보다 빠르게 성장했고 이익도 개선되어서 이제 음식 한끼당 $1만 손해를 보게 됨
   13. 피크는 2016년 2월이었음
   ㅤ→ 하루에 4500개의 음식 ( SF 에서 가장 큰 식당 )
   ㅤ→ $22M Run-Rate (샌프란+시카고)
   ㅤ→ 1300명의 직원
   ㅤ→ 총 6천만불 투자받음
   14. 이렇게 좋을수 없었음. 자신감이 넘쳤고 팀으로 부터 좋은 리뷰도 받음
   15. 대중이 나를 스타로 취급했는데, 불편하면서도 Awesome!했음
   16. 갑자기 모든게 바뀌기 시작
   17. 2016년 2월 22일 성장 곡선이 꺾임. +2%/주 였던게 -2%/주 가 됨
   18. 문제를 찾기 시작. 계절 문저인가 ? 가격인가 ? 음식의 품질인가 ?
   19. 결국 문제는 지난주 런칭한 UberEATS 였음
   20. 망할 Uber.. Lyft의 경쟁이야기를 모두 들은 후에, 나는 그들이 경쟁상대가 될수 없다는 것을 깨달음
   ㅤ→ 그들은 돈 많고, 무자비하고, 똑똑함
   21. 이사회 미팅은 긴장감이 감돌았음.
   ㅤ→ 다시 시작해야 할까? 여전히 천오백만달러 매출이 나는데? 닫으면 이걸 다 잃을꺼야
   ㅤ→ 세일을 하는건 어때 ? 정리해고를 하면 물건을 팔수가 없어
   ㅤ→ 음식 품질에 중점을 두도록 피봇 하기로 결정
   22. 다 망했음
   ㅤ→ 모든 사람(가족, 친구, 투자자)는 잘하고 있다고 생각하지만, 그들에게 난 아니야 라고 말할수 없음
   ㅤ→ Sprig 2.0 을 출시하고, 시카고 사업을 닫고, 본사 직원의 1/3을 해고
   23. 내부 외부 사람들을 관리하는게 힘들었음
   ㅤ→ 외부 활동을 접어서 Theranos 가 되지는 않음
   ㅤ→ 내부적으로는 경영진에 의지하고 직원들에게 정직하고 친절. 단 한명만 떠났음
   24. Sprig 2.0 은 충분하지 않았음
   ㅤ→ 이익은 $0 이었고, 트랙션도 향상되지 않음
   ㅤ→ 이사회가 물어봄. 완전히 수익화 하려면 뭐가 필요할까요 ?
   25. 우린 6백만 달러 수익을 올리는 식당을 운영했지만, 2천만달러 수익이 필요한 장소에 돈을 내고 있었음
   26. 팀은 열심히 싸웠지만 우리는 완전히 지쳤음
   ㅤ→ 3번의 피봇과 다수의 해고 후에 최종 결정에 직면. 800만 달러를 남겨두고 다시 시작하거나 돈을 돌려줘야 한다는 것을 알게 되었음
   27. 경영진들은 결정을 내렸고, 우린 2017년 6월 27일에 Sprig 서비스를 종료했음
   28. 실패한 3가지 이유
   ㅤ1) 2013년에 미래를 착각. 배달앱이 점점 성장하며 좋아졌지만 우리는 더 나빠짐
   ㅤ2) 이익 계산에 실패. SF의 시장규모는 우리의 부엌크기에 비해 너무 작았음.
   ㅤ3) Cap Table + BurnOut. $5M 손실후에 다시 시작하기 어려웠음
   29. Sprig에서의 4년 경험에 감사하고 UDemy 나 학교에서 보다 더 많이 배웠음.
   30. 모든 일이 4년안에 일어났음
   ㅤ→ ""실패 할거라면 빨리 하고, 성공 하려면 천천히 하세요.""
   ㅤ→ ""스타트업에서는 측면도 관찰해야 합니다. 경쟁사는 직접 경쟁자가 아니라 전체 시장 입니다.""

   Sprig 셧다운 관련 테크크런치 기사
   https://techcrunch.com/2017/05/…
"
"https://news.hada.io/topic?id=2401","한눈에 보는 타입스크립트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             한눈에 보는 타입스크립트

   기존에 프로그래밍 경험이 있는 사람이 TypeScript에 입문할 수 있게끔 안내하는 글입니다. (한국어) 특히 Java나 C#과 같은 정적 타입의 객체지향 언어 사용 경험이 있는 사람이 타입스크립트를 처음 배우려 할 때 딱 좋을 것 같군요.
"
"https://news.hada.io/topic?id=2406","Pinterest 의 구글 이미지 SEO Growth Hack 파헤치기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Pinterest 의 구글 이미지 SEO Growth Hack 파헤치기

   - 핀터레스트가 사용자가 Pin한 이미지에 대해 구글에 다시 그 이미지를 리버스 검색해서 메타데이터 정보를 모은 후 그 정보를 자신들의 사이트에 재 등록해서 그 사진의 원본이 자신인 것 처럼 위장한다는 주장
   ㅤ→ 즉 상위 검색결과와 같은 내용을 가진 이미지가 되므로 이미지 검색에선 항상 가장 상위가 되는 것
   - 이 주장이 흥미로운 점
   ㅤ→ 구글이 보통 자신들의 사이트를 스크래핑 하는걸 좋아하지 않기 때문에 이렇게 많은 이미지에 대해 블록 안 당하고 하는 것이 신기함
   ㅤ→ 이런 어두운 SEO전략(blackhat)들이 트위터등에 노출되면 구글은 보통 수동적으로 문제 사이트에 불이익을 가함으로써 조치를 취함
   ㅤㅤ( 에전 Rap Genius 사례등에서 볼수 있듯이 )
   ㅤ→ 핀터레스트는 상장회사 라서, 구글이 불이익을 준다면 주가에 영향을 줄 수 있음
   - 콘텐트 연관도(Content Relevance)는 구글의 검색 순위를 결정 하는 요소. 구글이 이해하는 방식과 비슷하게 설명한다면 당연히 순위가 높아짐. 구글이 이걸 blackhat 으로 규정하고 반응 할까 ?
   - Pinterest SEO Growth Hack 의 동작방식
   ㅤ1. 사용자가 아무런 메타정보 없이 사진을 업로드
   ㅤ2. 핀터레스트가 구글에서 그 이미지에 대해서 리버스 이미지 검색
   ㅤ3. 그 이미지와 관련된 모든 텍스트들을 스크래핑
   ㅤ4. 핀터레스트가 자신들의 페이지에 ""What others are saying"" 부분에 이 텍스트들을 표시
   ㅤ5. 구글이 이 페이지를 읽어오게 되면 이 사진에 대해서 구글이 이미 이해하고 있는 내용들을 가지고 있으므로, 관련도가 유사하다고 판단 순위를 높게 올림
   ㅤ6. 수백만개의 사진에 대해 반복
   - 구글의 반응
   ㅤ→ 담당팀에서 직접 답변은 없었지만 내부조사는 진행되고 있을 것.
   ㅤ→ 아직 이게 유효한건 구글에게 이미지 검색에 대한 우선순위가 높지 않기 때문일 것.
   ** 콘텐트 연관도를 이용하여 검색 순위 높이는 방법 **
   ㅤ→ 구글은 각 URL 및 콘텐츠에 대해서 특정 검색어나 키워드와 관련된 연관도를 조사하고 이를 순위에 반영한다는 것은 잘 알려진 사실
   ㅤ→ 위처럼 특정 이미지에 대해 Google이 이미 알고 있는 여러 텍스트를 모은 포괄적인 페이지를 만들면 연관도가 높음
   ㅤ→ 자신의 사이트에서 핀터레스트가 하는 것과 비슷한 일을 할 수 있는 방법은 TF-IDF(Term Frequency-Inverse Document Frequency) 라고 부르는 NLP 기법을 사용하는 것
   ㅤ→ TF-IDF는 특정 단어나 구절이 해당 문서에 얼마나 중요한지 밝히는데 도움이 되는 텍스트 분석 기술
   ㅤ→ 해당 이미지에 대해 상위 25개 정도의 URL을 가져와서 문서 전체에 TF-IDF 를 수행해서 주요 토픽을 분리 가능
   ㅤ→ 이렇게 만든 문구들을 당신의 페이지에 넣으면 검색 순위가 올라갈 수도 있다는 주장

   사실 핀터레스트가 저렇게 하는것 같다는 것도 하나의 주장일뿐이고, 이 사람의 글도 하나의 주장일뿐이긴 한데
   구글 이미지 검색이 핀터레스트 때문에 굉장히 보기 힘들어진 것은 맞는 것 같습니다.
   제가 피규어 도색때문에 다른 사람들의 페인팅 작례들을 많이 검색해보는데,
   대부분 핀터레스트가 상위에 나오니까 클릭해서 핀터레스트 가서 다시 찾아가는게 일상이 되어버린지 한참 되었어요.
   구글에서 ""* 작례"" 를 검색해보시면 최상위는 거의 다 핀터레스트가 차지하고 있습니다.
   영문검색할때 ""보드게임명 painting"" 을 검색해봐도 핀터레스트가 최상위인게 많더군요

   구글 검색에서 페널티 받은 브랜드들 모음
   https://marketingland.com/10-big-brands-that-were-penalized-by-google-…
"
"https://news.hada.io/topic?id=2369","애플 ARM Mac Developer Transfer Kit 벤치마크 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               애플 ARM Mac Developer Transfer Kit 벤치마크 공개

   - 가상화 환경에서 실행된거라 아직 최적화는 안되어 있음
   - DTK : Geekbench v5 싱글코어 800, 멀티코어 2600점
   - 엔트리레벨 2020 맥북에어의 성능이 싱글코어 1005, 멀티코어 2000점대
   - Rosetta2 의 성능이 알려지지 않았지만, 개발자들은 약 25~40%의 성능저하가 있을 것으로 추정
   - DTK 는 실제 개발장비가 아니고 전환을 위해서 사용하는 A12Z 칩 기반(2020 아이패드 프로에 들어간) 이라 실제 장비는 훨씬 고성능 일 것

   처음엔 조금 걱정됐는데, 점점 기대가 되내요.

   저도 예상외의 수치인듯 해서 정말 제품 나오면 어케 될지 모르겠어요

   로제타2가 아직 8개 코어중에 4개만 쓰고 있다더군요. 의도한건지 아닌지 모르겠네요

   나머지 4개는 저성능 코어라서, 우선 고성능 코어 4개만 쓰도록 한거 같더군요. 아직 개발이 완료되지 않아서 그런 모양인거 같아요.
"
"https://news.hada.io/topic?id=2337","iOS14 : IDFA 시대가 저물어 갑니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        iOS14 : IDFA 시대가 저물어 갑니다

   - iOS14 부터 모든앱은 IDFA를 사용하기 전에 사용자의 동의를 얻어야 합니다.
   ㅤ→ 사용자가 거절하면 해당 앱은 IDFA 접근 불가능 하고 ""광고 추적 차단"" 이 켜있는 것과 같은 값을 받게됨
   ㅤ→ 이제 IDFA를 대체할 방법을 찾아야 함
   - isAdvertisingTrackingEnabled 기능 지원 중단
   ㅤ→ AppTrackingTransparency 프레임워크를 이용해야 함
   * IDFA : Identifier for Advertisers , 광고식별자
"
"https://news.hada.io/topic?id=2336","OneSignal의 Rust 4년 실전 사용기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       OneSignal의 Rust 4년 실전 사용기

   - 2016년부터 프로덕션에서 Rust 이용중
   ㅤ→ 메인 푸시 딜리버리 서비스부터, 분석데이터 처리를 위한 Kafka Consumer 들까지
   - 2016년 초당 12.5만개, 주당 20억개 푸시 → 2020년 현재 초당 1.75백만개, 일 70억개로 24x 커지는데 Rust가 큰 도움
   Pros and Cons
   - Rust 는 여전히 안전에 대한 오버헤드 없이 강력하고 성능이 뛰어난 시스템을 만들수 있게함
   - 2015년에 비해서 많이 성숙했지만 아직도 언어가 변화중
   - Rust-Analyzer가 매우 발전해서 자동완성, 리치 툴팁, 정의로 이동, 오류/경고/린팅 표시 및 리팩토링 지원까지 추가됨
   - 컴파일속도 개선을 위해 인크리멘탈 컴파일이 추가되었으나, 아직 Go가 컴파일속도는 빠름. 하지만 Rust가 매 릴리즈마다 빨라지는 중
   - HTTP 에 대한 문제는 Future 와 async/await 덕분에 많이 사라짐
   ㅤ→ 2016년 부터 많은 향상이 있었지만 그중 가장 유용한 변화는 바로 비동기 프로그래밍의 도입
   - Rust가 엄청 새로운 것들이 많이 추가되어 왔지만 아직도 많은 재미난 변화가 있을것으로 예상
   ㅤ→ Generic Associated Types (#1598)
   ㅤ→ Custom Test Frameworks (#2318)
"
"https://news.hada.io/topic?id=2422","GitHub 에 개인 Profile 작성하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GitHub 에 개인 Profile 작성하기

   - 자신의 GitHub 페이지를 개인 Profile 로 변경 하는법
   - GitHub ID/ID 로 신규 Repo 를 만들고, Readme.md 에 자신의 프로필 내용을 적으면 끝
   - 이미지 및 외부 링크 가능
   - 아직 개발중이여서 전체에 열리지는 않았다고

   우와, 너무 좋은 기능인데요.
   저도 프로필 만들어봤습니다!
   https://github.com/BenjaminKim

   모든 계정에 다 열린거 같지는 않은데, 되는 계정의 경우에는
   새 Repo 생성시에 ID/ID 로 만들면 아래와 같은 문구가 보입니다.
   You found a secret! xguru/xguru is a ✨special ✨ repository that you can use to add a README.md to your GitHub profile. Make sure it’s public and initialize it with a README to get started.
   이렇게 만들어본 제 프로필 https://github.com/xguru
"
"https://news.hada.io/topic?id=2325","A/B Street - 도시 교통 시뮬레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        A/B Street - 도시 교통 시뮬레이션

   - 도시에 약간 변화를 주는 것이 어떻게 운전자,자전거,대중 교통 사용자 및 보행자의 움직임에 영향을 주는지 보여주는 게임
   - 윈/맥/리눅스 에서 실행가능한 Rust 오픈소스
   - 도로의 타입 변경, 신호등 변경, 교차로 진행 방향 변경 후의 교통 상황 변경을 보는게 가능
   - 시간 조정, 특정 차량 따라가기 등으로 도시의 문제를 확인 가능
   - 시애틀 지도(OpenStreetMap)를 사용하며 자동차/자전거/보행자/버스를 시뮬레이트
   - OSM 지도를 임포트 해서 새로운 도시에 적용해 보는 것도 가능(아직 쉽지는 않다고)

   와....

   잠깐 해보는데 시간이 쭉쭉 가네요. 은근 재미납니다.
   실제 도시에서 해보는 SimCity 느낌이네요.
   서울지도가 있으면 정말 재미날 것 같아요..

   서울 등 수도권을 누비는 지하철과 버스 노선이 전부 구현된다면 정말 ㅎㄷㄷ하겠군요. 교통 덕후들에게 이 프로그램을 알려주면 알아서 프로젝트를 진행하지 않을까 싶기도…
"
"https://news.hada.io/topic?id=2425","MS, PHP 8부터는 공식 빌드를 지원하지 않을 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MS, PHP 8부터는 공식 빌드를 지원하지 않을 것

   현재 https://windows.php.net/ 를 통해서 MS가 빌드하고 배포하는 PHP 공식 윈도우용 빌드는 7.4 까지만 지원하며, 8 이후의 버전대는 MS가 직접 빌드해서 배포하지 않겠다는 것.
   이것이 윈도우즈가 PHP 8를 지원하지 않는다는 것은 아님. 누군가는 빌드해서 배포 가능.

   이 문장에 오해가 있을수 있어서, 이에 대한 보충 설명은 아래
   https://reddit.com/r/PHP/…
   결론적으로는 MS가 PHP for Windows 개발에 투입한 개발자들을 다른곳에 배치한다는 것처럼 들리는 군요.
"
"https://news.hada.io/topic?id=2417","Fastify 3.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Fastify 3.0 릴리즈

   - Node.js 용 빠르고 오버헤드 적은 웹 프레임워크
   - Express 등 미들웨어 지원을 플러그인 방식으로 변경
   - 벤치마크 : Req/초
   ㅤExpress - 15978
   ㅤRestify - 49279
   ㅤhttp.Server - 70380
   ㅤFastify - 78956

   express가 빨라서 쓰는건 아니라서^^
"
"https://news.hada.io/topic?id=2396","Rust 웹 프레임워크 선정하기 2020","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Rust 웹 프레임워크 선정하기 2020

   actix-web, rocket, ride, warp 4개의 프레임워크를 비교
   1. 기능 종합
   ㅤactix,tide,warp : 슬림한 형태. Python Flask, JS Express 와 비슷
   ㅤrocket : 다양한 기능 내장. Python Django, PHP Symphony 등과 비슷
   2. 사용자
   ㅤ다운로드 : actix(1250k) > rocket(525k) > warp(435k) > tide(47k)
   3. Sync vs Async
   ㅤactix, warp : 새버전 부터 async 적용
   ㅤtide : 정식 전부터 nightly 통해서 async 지원
   ㅤrocket : 아직 sync, 차후 버전에서 지원 예정
   3.1 Futures 런타임
   ㅤactix, rocket, warp : tokio
   ㅤtide : async-std
   4. 문서화, 튜토리얼 & 예제
   ㅤactix-web , rocket 쪽 문서가 더 많지만 둘 다 이전 버전용 자료들이 많음
   최종 선택은
   ㅤ→ Production API 를 만든다면 actix-web
   ㅤㅤ실제 프로덕션에서 가장 많이 쓰이고, tokio 를 사용하고, 성숙된 커뮤니티와 플러그인들
   ㅤ→ tide 와 warp 는 async 를 최대한 활용중
   ㅤ→ rocket 의 차기버전도 기대해 볼만
"
"https://news.hada.io/topic?id=2362","클라우드 Analytics & BI 스택 구축 가이드 [PDF, 187p]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               클라우드 Analytics & BI 스택 구축 가이드 [PDF, 187p]

   현대적인 분석 스택을 설명하고, 작게 시작해서 키우는 방법을 정리
   #1 데이터 수집,통합 및 저장
   #2 데이터 처리 : 변환 및 모델링
   #3 데이터 보여주기 및 사용
   각 단계별로 추천할 만한 유료/오픈소스 도구들을 정리
   작성자들(풀스택 데이터플랫폼인 Holistics의 개발자들)이 선호하는 건
   - ELT over ETL
   - On-Premise 보다 Cloud Data Warehouse : BigQuery 추천
   - 분석도구 셋업시 Data Modeling 은 필수
   - SQL 기반 분석도구 가 non-SQL 기반 도구들을 이기게 될 것
   - 시각화에 중점을 주는 것 보다 Analytics workflow/operation 이 중요
   Chapter 1: High-level Overview of an Analytics Setup
   Chapter 2: Centralizing Data
   Chapter 3: Data Modeling for Analytics
   Chapter 4: Using Data
   Chapter 5: Conclusion

   다운로드: https://cdn.holistics.io/guidebook/the-analytics-stack-guidebook.pdf

   고맙습니다 ㅎㅎ 제가 뉴스 올리는 입장에서는 원 사이트도 링크해주려고 하다 보니 원문링크를 올리긴 합니다만 이렇게 댓글로 달아주시면 다른 사용자 분들께는 좋을것 같아요 ;)
"
"https://news.hada.io/topic?id=2447","Kano의 새로운 어린이용 Laptop - 수리할 수 있고, 싸고, 윈도우가 돌아감.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Kano의 새로운 어린이용 Laptop - 수리할 수 있고, 싸고, 윈도우가 돌아감.

   미국의 교육시장은 현재 크롬북, 아이패드의 접전이 이어지고 있는데요. 그 중 특이해 보이는 제품이 Wired에 소개되어 올려봅니다.
   어린 아이들의 첫 랩탑을 목표로 만든 다른 기성품들과 차별된 점이 있는데요. 우선은 DIY이며, 제품의 내부 부품이 그대로 노출되어있습니다. 11인치 터치 스크린과 윈도우를 탑재하고 있는데도 299달러로 나왔고, 마이크로소프트의 공식 파트너 계약도 맺었습니다. 교육 시장에 눈 여겨볼만한 새로운 제품인 것 같습니다. 특히 크롬북이나 아이패드는 프로그래밍에 그렇게 적합하다고 생각하지는 않는데, 해당 제품은 기본적인 코드 에디터는 제공해주는 것 같고요.
   Kano의 CEO가 교육 시장을 어떻게 파악하고 있는 지 알 수 있는 한 마디로. 글을 맺겠습니다.
   ""학교는 이미 윈도우에 많이 투자했어요. 아이들은 포트나이트를 하길 원하고. 선생님들은 마이크로소프트 오피스가 필요하죠.""
"
"https://news.hada.io/topic?id=2329","Safari 14 Beta 릴리즈 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Safari 14 Beta 릴리즈 노트

   iOS 14 및 macOS 11과 같이 배포 예정
   - HTTP/3 지원
   - WebP 이미지 포맷 및 HDR 비디오 재생 지원
   - Flash 지원 제거
   - Web Authentication 지원 (Face ID/Touch ID)
   - JavaScript BigInt 데이터 타입 지원
   - iOS Picture-In-Picture API 지원
   - PDF 점진적 로딩 지원

   Web Extensions API 를 지원하는 Safari Web Extensions 가 빠졌네요
   https://developer.apple.com/videos/play/wwdc2020/10665/
   이제 Firefox/Chrome/Safari 에서 다 실행되는 크로스브라우저 확장 만들기가 쉬워집니다.
"
"https://news.hada.io/topic?id=2375","맥용 랜섬웨어가 불법경로를 통해 퍼지는 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        맥용 랜섬웨어가 불법경로를 통해 퍼지는 중

   - OSX.ThiefQuest 라고 이름 붙여진 랜섬웨어
   - Little Snitch 같은 유료 프로그램의 크랙버전등에 붙어서 같이 배포
   - 설치되면 3일정도 기다린뒤 네트웍을 끊고 몇번 리부팅한후에 파일을 암호화 하고 돈을 요구
   - 디버깅 상태 또는 가상머신 안에서 돌아가는지를 확인 하는 함수를 가지고 있음

   그냥 정품 사서 쓰면 고민 해결인데..
   * Little Snitch 는 맥에서 꽤 유명한 소프트웨어 방화벽입니다. 내 맥에서 나가는 트래픽이 어떤건지를 검사하는 멀웨어 감지 도구로도 쓰이는데 거기에 랜섬웨어를 붙이다니..
"
"https://news.hada.io/topic?id=2399","핀테크 리포트 7월 2주차 (pdf) - 오픈뱅킹 투자대비 수익, 블록체인 도입 현황, 코로나19 관련 등","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      핀테크 리포트 7월 2주차 (pdf) - 오픈뱅킹 투자대비 수익, 블록체인 도입 현황, 코로나19 관련 등

   o 국경간 데이터 흐름, 도전과 기회
   o 오픈뱅킹에 관한 투자대비 수익
   o 글로벌 블록체인 도입 현황 2020
   o 안전한 원격근무·영상회의를 위한 핵심 점검사항
   o 지금 필요한 랜섬웨어 대비 수칙 및 데이터 백업 전략
   o 코로나19가 끌어올린 로보틱스의 가치
   o 코로나19 이후 변화 거센 디지털 트랜스포메이션
   o 코로나19가 재촉하는 미국 소매 분야 트렌드 7선
   o 코로나19 이후 변화 속의 글로벌 소매뱅킹
"
"https://news.hada.io/topic?id=2339","Deno, JavaScript와 TypeScript를 위한 Secure Runtime","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Deno, JavaScript와 TypeScript를 위한 Secure Runtime

   - Ryan Dahl 이 Deno의 현재에 대해서 OpenJS World 2020 에서 발표한 슬라이드 & 동영상 [12장, 27분]
   - C++, Rust, Go가 컴파일 언어들을 향상시키고 있지만,
   ㅤ근래의 많은 소프트웨어 작업들은 Python, Ruby, JavaScript 같은 동적 언어들에 의해서 진행되어 왔음.
   - Node.js 가 JavaScript 를 서버에서 가능하게 했음
   ㅤ→ 2010년대의 PHP
   ㅤ→ 여러 클라우드 벤더들이 지원
   ㅤ→ 모든 프론트엔드 프레임워크들(React, Vue, Angular)이 Node를 이용해서 번들링
   - JS Ecosystem의 큰 변화
   ㅤ→ ArrayBuffer, async / await , ES Modules, WASM, TypeScript
   - Deno
   ㅤ→ Node 처럼, JavaScript를 브라우저 밖에서 실행 가능하게 함
   ㅤ→ Node 처럼, 크롬의 V8 JavaScript VM을 이용
   ㅤ→ Node 처럼, 오픈소스이고 MIT 라이센스
   ㅤ→ C++ 대신 Rust로 작성됨
   ㅤ→ Testing, Linting, Formatting, 문서 생성등 도구를 내장
   ㅤ→ 다른 소프트웨어에 임베드 가능 : deno_core , rusty_v8
   ㅤ→ 웹 표준 API를 이용해서 가장 많은 수의 개발자들이 이용할수 있도록 타겟하여 설계됨
   - Deno 는 커맨드 라인 스크립트를 위한 브라우저
   ㅤ→ 인터넷에서 코드를 직접 임포트 하고 실행할수 있게 하여 프로그래밍을 쉽게 만들어 줌
   ㅤㅤㅤimport { serve } from ""https://deno.land/std@0.56.0/http/server.ts"";
   ㅤ→ Deno는 사용자 동의하에서만 OS에 접근할수 있는 안전한 샌드박스
   - Deno 임베드 하기 : deno_core
   ㅤ→ 스탠드얼론 실행파일로 릴리즈 되었지만, Rust Crate 로 임베드도 가능
   ㅤ→ 가능한 유스케이스
   ㅤㅤ- DB가 Map Reduce 함수를 위해 JavaScript 를 사용
   ㅤㅤ- Lambda@Edge 나 Cloudflare Workers 등의 서버리스 제품군
   ㅤㅤ- Electron 스타일의 GUI 어플리케이션 등
   - Roadmap
   ㅤ→ 버그 픽스, 버그 픽스, 버그 픽스
   ㅤ→ Deno API 안정화
   ㅤ→ 미래 작업들
   ㅤㅤ→ deno_core 를 좀더 유용하게 만들기
   ㅤㅤ→ GPU API 를 지원해서 머신러닝 지원
   ㅤㅤ→ deno compile 을 통해서 JS를 binary executable 로 만들기

   Deno 1.0 릴리즈 - https://news.hada.io/topic?id=2075
   Deno의 오픈소스 개발과정 비주얼라이제이션 - https://news.hada.io/topic?id=361
   From Node to Deno - https://news.hada.io/topic?id=2103
"
"https://news.hada.io/topic?id=2433","국가별 1GB 모바일 데이터 가격 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         국가별 1GB 모바일 데이터 가격 비교

   - 가장 비싼 국가들은 아프리카의 말라위등 3개국이 $20~30
   - 한국이 $10.94 로 비싼순위로 13등. 155개국중 143등
   - 미국 $8, 일본 $3.91, 영국 $1.39, 브라질 $1.01
   - 가장 싼 나라는 인도 $0.09 > 이스라엘 $0.11 > 키르기즈스탄 $0.21

   최저시급 같은 소득기준으로 나누면 더 의미있는 데이터가 도출할 수 있을 것 같내요.
   '데이터 1GB를 사용하기 위해 얼마 만큼 일해야 하는가' 같은 정보요.

   한국은 기술 발전도 및 인구밀집도에 비해 통신 비용이 너무 비싼 나라들 중 하나인듯
"
"https://news.hada.io/topic?id=2378","Caporal.js - Node CLI 개발용 풀 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Caporal.js - Node CLI 개발용 풀 프레임워크

   - TypeScript 오픈소스
   - bash,zsh,fish 용 자동완성 지원 및 Typo 오류 수정 제안 기능
   - 쉬운 인자 처리 : -h, -v, --quiet, --silent, -V 등 기본 지원 및 커스텀 플래그 쉽게 추가
   - git 과 비슷한 멀티 커맨드 CLI 개발
   - 다양한 색상 지원 ( chalk 사용 )
   - 도움말 자동 생성
"
"https://news.hada.io/topic?id=2450","AirPods Pro "Rattlegate" ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AirPods Pro ""Rattlegate""

   에어팟 프로의 잡음 문제에 대한 제보.
   낀채로 머리를 조금만 움직여도 윙윙거리는 소음이 나는데,
   새로 교체를 받아도 왼쪽과 오른쪽 번갈아 가면서 계속 문제가 있다는 건 제품 라인 자체에 문제가 있는거 아닌가 하는 의심

   이게 센터마다 대응이 다르다는 이야기도...
   https://www.clien.net/service/board/use/14967901
   저도 위글 보고 갔는데, 다행스럽게 교체받았습니다. 귀에서 자꾸 윙윙거려서 이명 현상인줄...

   저는 투바에 예약해서 서비스받았는데 교체해도 금방 다시 증상이 나타난다고 교체못해준다고 하더군요. 펌웨어나 기다리라고... 그후로 펌웨어 업데이트가 두번있었는데 증상은 똑같습니다. 가로수길 예약해서 가봐야겠어요..

   애플 홈페이지에 나오는 서비스센터들은 같은 대응을 해야하는거 아닌가 싶은데.. 가로수길은 해주고 협력서비스업체들은 안해주고 하는거 같네요.

   엇 저도 협력서비스 업체에서 받았습니다. 그냥 문제가 있다고 바로 교환해줬는데, 이게 증상이 여러가지인걸까요.

   교환받고 한두달있다가 같은 증상으로 많이 다시 온다고 합니다.

   저는 협력서비스 업체에서 교환했어요. (펌업 문제로 알려주긴 하더군요.)

   아하.. 저도 오른쪽이 그래요! 수리받을 수 있는건가보네요?

   네 이거 아마 애플내부에서도 아는지 지직거린다고 얘기하면 테스트해보고 그쪽만 바로 리퍼로 교환해주더라구요.

   바로 가로수길 예약했습니다 ㅎㅎ 안그래도 최근에 그래서 찾아봐야겠다고 생각했는데 말이죠

   실제로 저도 몇일전에 왼쪽 에어팟 프로를 수리센터가서 교체했는데요.
   노이즈캔슬을 켜거나 주변음허용으로 두면 지지직 잡음이 나더군요. 노캔 기능을 끄면 문제가 없구요.
   이 건으로 수리받은 사람들이 꽤 많은듯 합니다.
"
"https://news.hada.io/topic?id=2443","(요약) 할 일을 미루는 사람의 심리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (요약) 할 일을 미루는 사람의 심리

   너무나 와닿는 글이라 공유합니다.
   - 마감이 없는 일을 미루지 않도록 주의하라
   - 장기적인 미루기는 마치 자신을 자신의 삶의 구경꾼처럼 만든다.
   - 1주일을 상자로 표현하자면, 인생 달력에 상자가 많이 남지 않았으니 아마 오늘부터 시작해야 할 겁니다.

   글 마지막에 있는 1주일 단위로 삶을 그려보는 것만 해주는 서비스가 별도로 있습니다.
   생일을 입력하면 주단위로 그려주고, 주요 마일스톤들도 표시해 줍니다.
   내 삶을 주 단위로 그려 보기 https://news.hada.io/topic?id=1263
"
"https://news.hada.io/topic?id=2353","허니팟 구축을 통한 MongoDB 해킹 사건 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      허니팟 구축을 통한 MongoDB 해킹 사건 분석

   MongoDB 기반으로 개발할 때 서버에 랜섬 범죄자가 침투하여 DB 내용을 날려버린 뒤 비트코인을 요구하는 사례가 종종 있습니다. 개인적으로는 제 옆자리에서 팀 프로젝트하던 사람들이 실제로 이런 걸 당하는 사례를 2018년 초에 직접 봤습니다. 당시 저도 MongoDB를 다루고 있었기 때문에 식겁했었는데, 구체적으로 어떻게 침투당한 것인지는 알지 못했습니다.
   허니팟(Honeypot), 그러니까 공격자가 사용하는 수법을 분석하기 위해 고의로 취약점을 드러내어 끌어들이는 미끼 서버를 구축하여 이러한 종류의 해킹 범죄에 사용된 MongoDB 쿼리를 간략히 분석한 글을 소개합니다. (한국어) 아무래도 외부 인터넷에서 DB 서버에 접근할 수 있다면 스캐닝을 통해 존재가 금방 노출되고, 그러다 보면 취약점 같은 걸 통해서 어느 순간 훅 뚫리는 것 같습니다. 역시 DB는 직접 노출이 안 되게끔 꽁꽁 숨겨둬야 하는 법이죠.
   참고 - 허니팟의 개념:
   http://www.itworld.co.kr/tags/58302/%ED%97%88%EB%8B%88%ED%8C%9F/120233
"
"https://news.hada.io/topic?id=2408","Slack 의 2020-5-12 장애 보고 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Slack 의 2020-5-12 장애 보고

   슬랙이 처음으로 꽤 오래 전체 다운되었던 이슈에 대한 설명
   1. DB 구성변경 배포후 DB부하가 증가되는 퍼포먼스 버그가 발견되어서 몇분만에 롤백
   2. 그럼에도 이 이슈로 웹앱 오토스케일링이 활성화 되면서, Hard Limit 보다 많은 수의 인스턴스가 증가
   3. 이로 인해 로드밸런서 내에 호스트 리스트 업데이트 부분에 버그가 발생되면서 새로운 인스턴스들이 등록되지 못함
   ㅤ→ HAProxy + Consul
   4. 8시간이 지난뒤 호스트리스트에 남아있는 인스턴스들은 가장 오래된것들 뿐이었고, 스케일다운이 발생하자 오래된 인스턴스들이 셧다운
   5. 새 인스턴스들이 이걸 넘겨받아야 했지만, 로드밸런서 호스트리스트에 새 인스턴스들이 없었음.
"
"https://news.hada.io/topic?id=2419","Unavatar - 사용자 아바타 이미지 통합 불러오기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Unavatar - 사용자 아바타 이미지 통합 불러오기

   - ID/Email/Domain 으로 각종 SNS의 아바타 이미지를 가져오는 서비스
   ㅤ→ https://unavatar.now.sh/:username
   ㅤ→ https://unavatar.now.sh/:email
   - Fallback 파라미터 및 JSON 출력 지원
   - 직접 쿼리 가능한 사이트들
   ㅤ→ GitHub / Facebook / Gravatar / Instagram / Twitter / Telegram / YouTube / SoundCloud / Clearbit / DeviantArt
"
"https://news.hada.io/topic?id=2355","Hey 의 기술 스택","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Hey 의 기술 스택

   - 백엔드 : Vanilla Ruby on Rails
   - 프론트엔드 : Stimulus, Turbolinks, Trix + α(공개예정)
   - MySQL (Vitess 로 샤딩)
   - Redis 로 단기 데이터 및 캐슁
   - ElasticSearch
   - AWS/K8S/EKS
   - Majestic Monolith 코드베이스
   - ShapeUp 개발 방법론 적용
   - 모든 코드리뷰는 GitHub
   - 개발 프로세스 관리는 BaseCamp
   - 모바일 앱은 네이티브(Swift/Kotlin), 데스크탑은 Electron
   - Postfix 메일 서버 + Action Mailbox
   - Go로 작성된 이미지 캐시 서버 imageproxy
   - 로드밸런싱은 ALB
   - 백그라운드 Job은 Resque
   - 개발기간 2년
   - 분당 3만 Web Request 처리중
   - ""React is so 2019. HTML + minimum JS is 2020""
   - ""HEY is 99% K8s (EKS)""
   - 락인을 피하기 위해 k8s 사용
   - MySQL 은 Aurora 사용중
   - Basecamp 가 GCP에 너무 당해서 이번엔 AWS로 갔음 ( GCP 다운타임으로 전체 Basecamp 가 다운 )

   Hey - Basecamp가 만든 새로운 이메일 서비스 https://news.hada.io/topic?id=2285
   Turbolinks - 웹앱 내비게이션을 빠르게 https://news.hada.io/topic?id=2289
   추가로 Hey.com 의 웹 코드를 분석한 시리즈 글
   A few sneak peeks into Hey.com technology
   1 - Intro https://dev.to/borama/…
   2 - Keyboard Shortcuts https://dev.to/borama/…
   3 - Turbolinks Frames https://dev.to/borama/…
   4 - Turbolinks Frames 2 https://dev.to/borama/…
   5 - Stimulus Enhancements https://dev.to/borama/…
   6 - Template page updates https://dev.to/borama/…
"
"https://news.hada.io/topic?id=2449","Dark Web 가격 지수 2020","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Dark Web 가격 지수 2020

   다크웹에서 팔리는 정보들의 가격 리스트
   - 클론된 마스터/비자/아멕스 신용카드 with PIN : $15~$35
   - 훔친 PayPal 계정정보 이용해서 돈 보내기 : $198~
   - 가짜 미국 운전면허 : 평균 $70, 고품질 $550
   - 미국, 캐나다, 유럽 여권 : $1500
   - 해킹된 계정 : 페이스북 $74,인스타 $55,트위터 $49, 지메일 $155
   - 팔로워 1000명당 : 인스타 $7, 틱톡 $15, 링크드인 $10
   - 트위터 리트윗 1000개당 $25, 인스타 좋아요 1000개당 $6
   - 보안없는 사이트 DDoS 공격 : 초당 10~50k req, 1시간 $10, 24시간 $60, 1주 $400+, 1달 $800+
   - 보호된 사이트 공격 : 다수 프록시를 이용해서 초당 20~50k 공격. 24시간에 $200
"
"https://news.hada.io/topic?id=2437","폴 그레이엄, Y컴비네이터 보다 해커뉴스 운영이 더 스트레스 였다고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 폴 그레이엄, Y컴비네이터 보다 해커뉴스 운영이 더 스트레스 였다고

   ""그동안 가장 큰 스트레스는 스타트업을 선발하고, 조언하고, 데모데이를 하고, 스타트업들을 대신해서 사람들과 싸우는 것이 아니었어요.
   HackerNews(HN)를 운영하는게 가장 큰 스트레스였어요.
   (여러분은) 포럼 같은거 시작 하지 마세요.""

   GeekNews운영진 분들은 스트레스 안받으셨으면 ㅠㅠ

   재미나게 운영하고 있습니다. 고맙습니다!
   ( 사실은.. 댓글이 많이 안달려서 스트레스도 없.. ㅠㅠ )

   댓글이 달렸는지 확인할 방법이 없어서... ㅎㅎ
   근데 포럼 같은거 시작하지 말라잖아요~

   HN을 처음 보면 그냥 제목/링크만 무미건조하게 주루룩 올라오는 곳 같지만
   링크 하나당 달리는 수백개 댓글들을 보다 보면, 주제별로 치고박는 커뮤니티 느낌이 강하긴 하죠.
   해커뉴스의 전담 모더레이터인 Daniel Gackle (dang) 에 대해서는 아래 글에서 좀더 자세히 보실 수 있습니다.
   The Lonely Work of Moderating Hacker News https://news.hada.io/topic?id=272
   원래는 Scott Bell 과 둘이 같이 했는데, Scott 은 10개월쯤 전에 그만뒀습니다.
"
"https://news.hada.io/topic?id=2394","리누스 토발즈 - 전 이제 코딩을 하지 않아요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       리누스 토발즈 - 전 이제 코딩을 하지 않아요

   최근 오픈소스 서밋 키노트에서 한 대화를 옮김.
   개발자에게 보내는 좋은 메시지 라고 생각합니다.
   Q: 요즘 뭐하세요?
   A: 메일을 읽어요. 메일을 쓰고, 이제 코딩은 하지 않아요
   제가 작성하는 대부분의 코드는 메일리더 안에서 작성됩니다. 누가 나에게 패치나 PR을 보내면 그거에 반응해서 ""아니오, 이건 괜찮지만.."" 이라고 말하며 슈도코드를 보내고는 합니다. 패치를 컴파일해보지 않고, 테스트해보지 않고 말그대로 메일 리더에서 썼기 때문에 '내 생각에 이래야 할거 같아요' 라고 얘기하는게 내 일이에요. 난 이제 더 이상 프로그래머가 아닙니다.
   난 주로 메일 작성보다 더 많은 메일을 읽기 때문에 결국 내 직업은 ""No"" 라고 말하는 것입니다.
   누군가는 사람들에게 ""No"" 라고 거절 할 수 있어야 합니다.
   다른 개발자들이 뭔가 일을 잘못하면 내가 ""No""라고 할걸 알기 때문에 그들이 좀더 조심스러워지기를 희망합니다.
   No 라고 얘기할 수 있으려면 그 배경을 알아야 합니다. 그렇지 않으면 내 일을 할수 없기 때문입니다. 그래서 저의 모든 시간을 사람들이 어떤 일을 하는지를 알기 위한 이메일을 읽는데 씁니다. 흥미로운 일이지만 대부분의 시간을 이메일을 읽는데 소비합니다.
   개발자들에게 내가 희망하는건, 만드는 것이 좋은 코드 뿐만이 아니라 코드에 대한 좋은 설명도 작성했으면 합니다.
   그래서 저에게 커밋메시지는 코드 변경 만큼이나 중요합니다.
   때로는 코드 변경이 너무 분명해서 메시지가 필요없는 경우도 있긴 하지만 매우 매우 드뭅니다.
   그래서 개발자가 생각해 줬으면 하는 것중 하나는 실제로 코드를 작성하는 사람들은 코드 자체만이 아니라 왜 그 코드가 어떤 일을 하고, 왜 그런 변경이 필요했는지를 설명하는 것입니다. 코드를 저에게 설명해 줄수 있다면 코드를 신뢰할수 있게 되기 때문입니다.
   오픈소스의 대부분은 커뮤니케이션으로 이루어집니다. 그중의 일부는 커밋메시지고, 그중의 일부는 왔다갔다 하는 이메일입니다. 왜 당신이 그일을 하는가 또는 왜 그게 당신에게는 워킹하지 않는가를 설명하는 것은 정말 중요합니다.

   누군가의 생각,아이디어,작업에 대해서 No 라고 말하기는 정말 어려운 일이에요.
   No 라고 말하기 위해서는 그 배경을 알아야 한다는 말에 깊이 공감합니다.

   저 분 정도면 그냥 'No' 하면 알아서 자아비판을 하지 않을까 싶기도 합니다만.. 친절하시네요.. ㅎㅎ
"
"https://news.hada.io/topic?id=2440","SideQuest - 슬랙전용 티켓 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        SideQuest - 슬랙전용 티켓 시스템

   - 슬랙 앱으로 슬랙 안에서 모든 것이 사용가능
   - 워크스페이스내 멤버간 티켓 발행 및 수신
   - 개인 혹은 다수, 또는 채널 대상으로 티켓 발행 가능
   - 자동 일간 브리핑
   - 슬랙 대화/DM 메시지에서 티켓 생성 가능
   - 데드라인 설정 가능
   - 각 티켓 내부에서 대화 가능
   - 현재 베타기간 중이라 무료

   사용해 봐야 겠네요~~

   Hey everyone, it's Joshua with the Sidequest team in Zagreb and Munich. Super happy you came across our project and like it. If you have any questions, please make sure to let me know!
"
"https://news.hada.io/topic?id=2359","눈여겨 볼만한 9가지 색다른 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         눈여겨 볼만한 9가지 색다른 데이터베이스

   - DuckDB : 임베드 가능한 OLAP DB
   - EdgeDB : NoSQL + RDB
   - FoundationDB : 애플의 NoSQL DB
   - HarperDB : 정형+비정형 데이터를 싱글DB에
   - KeyDB : Redis 호환되는 빠른 KeyValue DB
   - M3DB : Uber의 메트릭 저장용 분산 시계열 DB
   - RediSQL : Redis KeyValue 데이터를 SQL로 쿼리 가능
   - RQLite : SQLite를 멀티노드 분산 DB로
   - UmbraDB : Postgres를 대체 가능한 인메모리 분석용 DB

   M3 - 오픈소스 Metrics 플랫폼 https://news.hada.io/topic?id=1572
   최근의 흥미로운 데이터베이스 기술들 https://news.hada.io/topic?id=2281
   위 글에 포함된 아래 기술들과 겹치는 Edge도 있지만 대부분 다른 것들이네요.
   - TileDB : 다차원 데이터 분석
   - Materialize : 실시간 SQL Streaming DB
   - Prisma : 현대적인 DB클라이언트
   - EdgeDB : NoSQL + RDB
   - Tremor : 비정형 데이터를 위한 이벤트 처리 시스템
   - Debezium : DB변경사항(Change Data Capture)을 스트리밍 하는 분산 플랫폼
"
"https://news.hada.io/topic?id=2328","Show GN: type-hangul - ⌨️ 한글 타이핑 효과 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: type-hangul - ⌨️ 한글 타이핑 효과 라이브러리

   한글 두벌식 자판에서 한 글자씩 타이핑되는 과정을 보여줄 수 있는 라이브러리입니다.

   와 좋네요 :)

   깔끔해서 좋네요! 나중에 이벤트 페이지 같은거 만들 때 꼭 써보겠습니다 ;)

   오 좋네요~ 나중에 프로젝트 할때 꼭 써보고 싶네요

   GitHub Pages 페이지 만들 때, GeekNews에서 접한 MVP.css 활용했습니다. https://news.hada.io/topic?id=1773
"
"https://news.hada.io/topic?id=2421","Nvidia 시가총액에서 Intel을 제쳐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Nvidia 시가총액에서 Intel을 제쳐

   - Nvidia $253B > 인텔 $248B > AMD $62B
   - Nvidia 는 미국 최대의 칩메이커, 세계에선 3위
   ㅤ→ 올해 68% 상승 (인텔은 3%)
   - 올해 매출은 Nvidia $14.6B , 인텔은 $73.8B 예상

   꽤 중요한 이벤트라고 생각합니다.
   Nvidia 가 블록체인의 수혜를 입은 것도 있고, 요즘은 AI 시장의 전망이 계속 크다 보니 그거에 대한 기대치가 반영된 것 같기도 합니다.
   거기다 자율주행 시스템 관련해서 벤츠랑 차량 개발초기부터 플랫폼 같이 개발하기로 했다는 소식까지 나오기도 했고요.
   http://scimonitors.com/메르세데스벤츠-엔비디아-자동차용…
   인텔은 계속 삽질을 하고 있어서.. 어디로 갈런지.
   ARM 프로세서의 즐거운 날들 https://news.hada.io/topic?id=2409 에 댓글로도 적었는데,
   요즘 가장 핫한 ARM 칩도 잘 하고 있어서 Nvidia의 앞날은 밝은 듯
"
"https://news.hada.io/topic?id=2354","KAIST 전산학부의 ‘프로그래밍 언어’ 과목 수업 보조 자료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   KAIST 전산학부의 ‘프로그래밍 언어’ 과목 수업 보조 자료

   KAIST 전산학부의 홍재민이라는 분이 2019년에 ‘프로그래밍 언어’(CS320) 과목의 조교로서 작성하고 류석영 교수님의 감수를 받은 수업 보조 자료의 모음집입니다. (한국어, 영어) 컴퓨터 과학에서 말하는 프로그래밍 언어의 이론적 배경을 설명하기 위해, 해당 분야의 각 개념을 순차적으로 추가해가며 작은 프로그래밍 언어를 수학적으로 정의하고 그 인터프리터를 Scala로 구현하는 흐름으로 되어 있습니다.

   홍재민씨가 '타입으로 견고하게 다형성으로 유연하게' 제목으로 책을 쓰셨네요. 프로그래밍 언어 이론을 잘 아는 분의 책이라니 기대가 됩니다.

   https://blog.insightbook.co.kr/2023/10/…

   Scala를 프로그래밍 언어 수업 자료로 쓴 건 흥미롭네요.
   ocaml 같이 ML계열 함수형 언어로 수업자료로 쓴건 많이 봤지만 Scala는 첨보네요. 나름 Scala가 현업에서 JVM기반언어로 많이 쓰니 실용성이 더 있어보이네요.
"
"https://news.hada.io/topic?id=2412","Easy OCR - 한글 포함 40+개언어 지원하는 OCR 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Easy OCR - 한글 포함 40+개언어 지원하는 OCR 오픈소스

   - 파이썬 오픈소스 : PyTorch, torchvision, scipy 등을 사용
   - 이미지 또는 OpenCV 이미지 객체를 넘겨서 글자 인식
   - 간단한 코드로 사용가능. 결과값은 위치,문자열,신뢰수준을 리스트로 리턴
   import easyocr
   reader = easyocr.Reader(['ko','en'])
   reader.readtext('test.jpg')
   - GPU가 있으면 자동 사용. CPU모드로 강제하는 것도 가능

   tesseract라고 오래 전부터 유지보수 되오던 C기반 오픈 소스가 있었는데, 그것의 Java Wapper인 것 같네요.

   오오... OCR 오픈소스라니 놀라워요

   tesseract라고 오래 전부터 유지보수 되오던 C기반 오픈 소스가 있었는데, 그것의 Java Wapper인 것 같네요.
"
"https://news.hada.io/topic?id=2373","크롬 85 개발자 도구 변경사항","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           크롬 85 개발자 도구 변경사항

   - CSS-in-JS 프레임워크를 위한 스타일 편집 기능
   - Lighthouse 6 적용 : LCP, CLS, TBT 도입 및 FMP 제거
   - JS 새 기능 지원
   ㅤ→ Optional Chaining 에도 자동완성 지원
   ㅤ→ ""#"" Private 클래스 필드, ""??"" Nullish coalescing 연산자도 구문강조
   - App Shortcut 아이콘 관련 경고 기능
   - 패딩/마진 정보를 그래픽으로 보여주는 Computed Pane이 창크기 변화에도 안정적으로 보이게 변경
   - Sources 패널에서 선택 없이 Copy 나 Cut 하면 현재 라인에 대해서 동작
   - Breakpoints, Conditional Breakpoints, Logpoints 아이콘 변경

   Lighthouse 6.0 릴리즈 https://news.hada.io/topic?id=2122
"
"https://news.hada.io/topic?id=2351","Relay - 이벤트 기반 인프라 자동화 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Relay - 이벤트 기반 인프라 자동화 도구

   - Puppet 이 만든 ""Zapier for DevOps""
   1. Git, Cloud, Security, Ticket, Monitoring 등의 이벤트 를 받아서
   2. 인스턴스 중단/재시작, Terraform Apply, JIRA 이슈 업데이트, 슬랙에 알림등으로 클라우드 인프라 관리를 자동화
   - 모든 동작에 대해서 기록하여 Audit 가능
   - Workflow 는 YAML 로 작성되어 쉽게 편집 및 관리 가능
   - 다양한 도구들과 이벤트 및 기능 연동
   ㅤ→ Bolt, GitHub, GCP, Docker Hub, Datadog, PagerDuty, Kubernetes, EC2, Azure VM, Terraform, VictorOps, Jira 등
"
"https://news.hada.io/topic?id=2345","Microsoft, 모든 Retail 스토어들 철수 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Microsoft, 모든 Retail 스토어들 철수 예정

   - 미국 및 전세계에 있는 매장들을 모두 철수
   - 뉴욕,런던,시드니,레드먼드에 있는 매장은 제품 판매없는 Experience Center로 변경
   - 원래 내년 예정이었지만 COVID-19로 앞 당겨짐
   - 2009년에 시작해서 11년만

   미국 쇼핑몰에서 애플매장과 MS매장이 종종 같이 있는 경우가 있어서 비교해보면 항상 애플쪽만 사람이 많았던 지라..
   저거 언제 접나 싶었는데 코로나로 매장을 임시로 닫은 지금이 딱 좋은 시점 같네요.
   (명예로운 죽음이라고 하면 너무 아프려나요..)

   그나저나 글의 제목이 참 회사 스럽네요.
   ""Microsoft Store announces new approach to retail.""
   Retail 에 대한 새로운 접근! 이라고 써놓고, 내용은
   ""우리 Retail Store 접어요""
"
"https://news.hada.io/topic?id=2439","Tour of Rust - 단계별로 배우는 Rust 가이드 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Tour of Rust - 단계별로 배우는 Rust 가이드

   - Rust Playground 를 활용하여 대화형으로 학습 가능
   - 영어 및 다양한 언어로 번역 (한국어는 초반만 번역됨)
   #1 언어 기본
   #2 기본 제어 흐름
   #3 기본 자료 구조 타입
   #4 제네릭 타입
   #5 소유권 & 데이터 빌려오기
   #6 텍스트
   #7 객체지향 프로그래밍
   #8 스마트 포인터
   #9 프로젝트 구성 및 구조
"
"https://news.hada.io/topic?id=2376","GitHub, 공식 문서 홈 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GitHub, 공식 문서 홈 공개

   - 사용자용 help 와 개발자용 developer 로 나뉘어졌던 GitHub의 전체 제품 문서를 하나로 통합
   - 영어 외 일본어, 중국어, 브라질 포르투갈어, 스페인어 지원
   - 지원 제품
   GitHub
   Enterprise Server
   GitHub Actions
   GitHub Packages
   Developers
   REST API
   GraphQL API
   GitHub Insights
   GitHub Desktop
   Atom (외부)
   Electron (외부)

   사이트 구현에 관한 상세 내용은 별도로
   How we launched docs.github.com
   https://github.blog/2020-07-02-how-we-launched-docs-github-com/
"
"https://news.hada.io/topic?id=2403","OpenDP - Open Differential Privacy 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenDP - Open Differential Privacy 플랫폼

   - Microsoft 와 Havard 가 같이 만든 DP(차등 개인정보 보호) 툴킷
   - 정부,산업 및 학술기관이 민감한 데이터를 안전하게 공유할 수 있도록 하여 과학적/공익 연구를 지원할 수 있는 것을 목표
   - C,C++,Python,R 및 기타 언어들을 지원하는 네이티브 런타임
   - 다양한 데이터 소스에 직접 접근 가능(Apache Spark/Presto, Postgres, SQL Server, Data Lakes, CSV 등)

   Differential Privacy Library 비교 https://news.hada.io/topic?id=1729
   - IBM/differential-privacy-library (Python)
   - google/differential-privacy (C++)
   - brubinstein/diffpriv (R)
   여기선 3개의 라이브러리를 비교했는데, 새로운 도구가 출현했네요.
"
"https://news.hada.io/topic?id=2451","dockle - Container Image Linter ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    dockle - Container Image Linter

   - 도커 이미지를 Best Practice 에 맞게 만들어주고, 보안 검사를 해주는 도구
   - Center for Internet Security (CIS) Benchmark 지원
   - Travis CI/CircleCI/Jenkins 와 연동해서 DevSecOps 도구로 사용 가능
"
"https://news.hada.io/topic?id=2384","Guietta - 파이썬으로 간단한 GUI 쉽게 만드는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Guietta - 파이썬으로 간단한 GUI 쉽게 만드는 도구

   - 문자열로 UI를 구성하면 그대로 GUI를 만들어주는 파이썬 모듈
   - 값을 입력받고 표시하는 등의 기능을 쉽게 구현
   - 실제로는 QT의 Thin Wrapper 로 동작하며 QT의 피쳐들을 그대로 사용 가능

   비슷한 것으로 TraitsUI 도 있습니다.
   https://github.com/enthought/traitsui
"
"https://news.hada.io/topic?id=2342","RSS Box - RSS를 지원하지 않는 서비스들의 RSS 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 RSS Box - RSS를 지원하지 않는 서비스들의 RSS 생성하기

   - 트위터, 유튜브, 인스타그램, Vimeo, Twitch, SoundCloud 등 서비스 지원
   - 서비스의 특정 계정 또는 채널을 RSS로 구독하고자 할 때 사용
   - 트위터의 경우 전체/리트윗&답변 제외/미디어 포함 등 가능

   예제로 만들어본 긱뉴스의 트위터 계정인 @GeekNewsBot 의 RSS 는 다음과 같습니다.
   https://rssbox.herokuapp.com/twitter/1149438140811116544/GeekNewsBot
"
"https://news.hada.io/topic?id=2416","Rush - 마이크로소프트의 monorepo 관리도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Rush - 마이크로소프트의 monorepo 관리도구

   - 마이크로소프트가 만들었다.
   - 마이크로소프트는 github의 주인이다.
   - github은 npm의 주인이다.
   - 그렇다면 이것은 de-facto?
   - PNPM, NPM, and Yarn 모두 지원(pnpm과 함께 쓰면 제일 빠름)
   - Phantom dependencies 없음 https://rushjs.io/pages/advanced/phantom_deps/
   - NPM doppelgangers 없음 https://rushjs.io/pages/advanced/npm_doppelgangers/
   적용해보고 후기 올리겠습니다.

   좋은 요약입니다. 후기 기다리겠습니다

   좋은 댓글 감사합니다 ㅋㅋ
"
"https://news.hada.io/topic?id=2361","인도, TikTok을 비롯한 59개의 중국 앱들 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     인도, TikTok을 비롯한 59개의 중국 앱들 금지

   - 인도 전자&IT부가 해당 앱들이 ""국가 안보 및 방어, 궁극적으로 인도의 주권에 영향을 미친다"" 는 발표
   - TikTok, WeChat, Weibo, Meitu 등 유명 앱들 및
   ㅤ알리바바의 브라우저인 UC Browser, Baidu Map, 샤오미의 커뮤니티앱, QQ의 대다수 앱들 등
   - 인도는 13억명의 온라인 사용자를 가진 세계에서 두번째로 큰 인터넷 마켓
   - 59개 앱중 27개가 인도에서 탑1000위 안에 들어가는 안드로이드 앱들
   - 저녁에 발표는 했지만 아직 구글플레이나 앱스토어에서는 다운 가능상태
   - 인도와 중국간의 분쟁이 영향을 미친듯
   - 중국 스마트폰 제조사들이 인도 스마트폰 시장의 80%를 차지하고 있음
"
"https://news.hada.io/topic?id=2429","Tauri - 작고 빠른 실행파일을 생성하는 데스크탑용 웹앱 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Tauri - 작고 빠른 실행파일을 생성하는 데스크탑용 웹앱 프레임워크

   - Electron과 비슷하게 HTML/JS/CSS 로 만들어진 웹앱을 데스크탑용으로 패키징
   - 백엔드는 Rust 를 이용
   - macOS 에선 Cocoa/WebKit, 윈도우 에선 MSHTML(IE10/11) 또는 Edge, 맥에선 gtk-webkit2를 활용
   ㅤ→ 브라우저 바이너리를 포함 안하므로 600KB 이하의 실행파일도 가능

   아무리 그래도 MSHTML은 좀...

   사이즈를 줄인다는 아이디어는 좋은데, 윈도우에서 IE웹브라우저 컨트롤 내장시켜서 개발 해 본 경험상으로는 피하고 싶은 방법이네요. 통신이나 제어가 너무 어렵고 브라우저 환경을 통일시켜서 얻을 수 있는 개발 생산성도 없어지면 뭐하러 이런 걸... 하는 생각이 먼저 듭니다.
"
"https://news.hada.io/topic?id=2338","Node 개발자를 위한 Rust 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Node 개발자를 위한 Rust 가이드

   - JavaScript / TypeScript 에 익숙한 개발자를 위해 유닉스 wc 명령어를 Rust로 만들어가면서 설명하는 가이드
   - 특정 함수/개념들을 비슷한 문법들을 들어 비교하면서 설명
   생성 : cargo new miniwc --bin
   → cargo ≒ npm
   ㅤ→ cargo.toml ≒ package.json
   ㅤ→ cargo.lock ≒ package-lock.json
   → cargo run start ≒ npm run start
   → struct ≒ Object
   → std::env::args() ≒ process.argv
   → std::fs::read_to_string ≒ fs.readFile
   → split_whitespace() ≒ split()
"
"https://news.hada.io/topic?id=2430","Service Account(JWT)을 활용한 Google Calendar API 사용  방법 설명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Service Account(JWT)을 활용한 Google Calendar API 사용 방법 설명

   Google API를 사용하기 위 OAuth 2.0 인증을 받은 방법 중 JWT (JSON Web Token) 을 이용한 Service account 인증 방법과 Google Calendar API를 통해서 사용자 계정의 calendar event를 얻어오는 방법을 설명합니다.
   Service Account 사용하기 위해서는 아래와 같이 5단계로 진행해야 합니다.
   1. Google API console 에서 Service Account 생성:
   - Service account를 생성하면 Client ID와 Private Key를 할당받는다.
   2, JWT (Json Web Token) 생성:
   - Header, Claim set, signature를 base64urlsafe 값으로 encoding 한다.
   - python인 경우 PyJWT 를 JWT string을 생성 가능함
   3. 구글 인증 서버에서 JWT을 사용해서 Token을 request 한다.
   4. 구글 서버에서 Access Token을 response로 내려준다.
   5. Access token을 사용해서 Google API를 호출한다.
   Google Calendar API 주의할 점은 사용자 계정과 서비스 계정은 별개의 계정이기 때문에 사용자 계정의 구글 Calendar에서 서비스 계정의 공유 권한을 추가해야 합니다. Google Calendar API 호출은 curl 명령어 또는 python requests 를 사용 가능합니다.

   음.. 실제 서비스에 적용하려고 한다면 사용자가 캘린더를 공유하는 UX 를 만들어야 할 것 같은데 가능은 하려나요?

   사용자 계정에서 캘린더를 공유해야 하기 때문에 jwt 보다는 oautho2 client가 맞는것 같습니다.
   Gmail 이 oautho2 로 구현한 예제입니다.
   https://kibua20.tistory.com/m/70
"
"https://news.hada.io/topic?id=2442","우리나라 소프트웨어 회사에는 Technical career path가 없다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               우리나라 소프트웨어 회사에는 Technical career path가 없다.

   공감되는 글이라 공유합니다.
   (저는 매니저로 일하고 있지만)
   - Technical Career를 어느 정도 걷다보면 모두가 매니저가 되어야하는 한국 커리어 구조
   - 반대로 전문적으로 매니저를 하는 인력도 부족
   - Technical Leading과 Management는 다른데 국내는 이를 통합하는 느낌.
"
"https://news.hada.io/topic?id=2446","devlog.today - 개발자 블로그를 등록할 수 있는 메타 블로그 사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              devlog.today - 개발자 블로그를 등록할 수 있는 메타 블로그 사이트

   우아한테크코스 1기 출신인 김지훈이라는 분이 학습 목적으로 만든 메타 개발자 블로그 사이트입니다. (한국어)
   참고 - 해당 사이트 개발자의 간략한 후기글:
   https://velog.io/@skygl/…
"
"https://news.hada.io/topic?id=2380","참을성 없는 개발자를 위한 JavaScript [영문 무료 e북]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  참을성 없는 개발자를 위한 JavaScript [영문 무료 e북]

   - JS를 새로 배우는 개발자에게 요즘 주요 기능들에만 집중해서 빠르게 설명하는 책
   - 정말 빠르게 보려면, 5장 빅픽쳐 부터 읽고 모든 (Advanced) 부분 건너뛰고 보는 것을 추천
   - HTML 버전은 보너스 챕터 4개 제외하고 전체 무료로 공개. PDF는 절반정도만 제공 (전체 548P중 293P만)
   - JS의 필수 요소부터 ES2020 까지 다 포함

   보통 초보자가 아닌 경력 개발자를 위한 JS 가이드로는
   MDN 의 ""A re-introduction to JavaScript (JS tutorial)"" 을 많이 추천합니다.
   https://developer.mozilla.org/en-US/docs/…

   이 저자가 쓴 JS책이 여러권인데, 예전에 나온 Speaking Javascript 는 ""자바스크립트를 말하다"" 라는 제목으로 한빛미디어에서 번역판이 나오긴 했네요.
   https://exploringjs.com/ 에 보시면 다른 책들도 보실수 있습니다.
   Deep JavaScript - 이것도 HTML 버전은 무료 (보너스 챕터 제외)
   Tackling TypeScript: Upgrading from JavaScript - 이건 50%만 무료
"
"https://news.hada.io/topic?id=2372","PHONK - 안드로이드 기기용 JavaScript 툴박스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PHONK - 안드로이드 기기용 JavaScript 툴박스

   - 안드로이드에서 JS로 즉시 실행하는 스크립트 환경 오픈소스
   - 모든 센서, UI, 그래픽, 지도(OSM) 들을 JS에서 제어 가능
   - 모질라 Rhino JS엔진을 이용, 네이티브 API를 직접 호출해서 빠름
   1. 기기에 Phonk 앱 설치
   2. 기기와 컴퓨터를 같은 WiFi 네트웍에 연결
   3. 컴에서 Phonk 의 주소를 입력하면 Web Editor 실행
   4. Web Editor 에서 스크립트 구동 및 테스트

   Play 버전이 아닌 F-Droid 나 APK 버전을 설치하면 SMS Send/Receive 등도 자동화 가능합니다.
   구형 안드로이드 기기를 다양한 용도로 테스트 해보기 좋을듯 하네요.

   아직 F-Droid에는 올라오지 않았군요.
"
"https://news.hada.io/topic?id=2383","macOS Catalina 와 Big Sur 의 UI 변경점 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  macOS Catalina 와 Big Sur 의 UI 변경점 비교

   같은 화면들을 크기조정등 하지 않고 캡쳐하여 양쪽에 놓고 비교
   - Big Sur가 전반적으로 더 밝고, 컬러풀
   - iOS와 비슷한 아이콘,느낌으로 변경
   ㅤ→ macOS의 터치지원을 위한 준비 ?
   ㅤ→ 사각형에 깊이감을 주는 튀어나온 요소들이 포함됨
   - Finder에 새 UI를 많이 도입해서 변화 되었고, 기본 창 크기가 커짐
   - Preferences 도 일부분은 크게 변경
   ㅤ→ Dock 이 Dock and Menu Bar 로 변경 되면서 새 macOS Control Center 기능이 통합
   - Menu Bar 와 Notification Center는 크게 개선
   - 많은 변경들이 있었지만, Terminal/Siri/Stickies 같은 것은 거의 변경 없음

   시스템 UI 컴포넌트들이 바뀌는 건지, 기본 앱들만 바뀌는 건지 궁금하내요.
   아마 전자겠죠? 한 화면에 두 스타일의 UI가 동시에 보이면 혼란스러울 것 같내요.

   아이패드와 룩앤필을 맞추고 대신 아이콘만 달라졌더라구요. 아무래도 큰 화면에서 아이패드보다 좀 더 멀리 놓고 봐야하니 그런 게 아닐까 싶어요.

   아이콘 변경은 Cult Of Mac 에서 비교한 글에서 더 확연히 볼수 있습니다.
   Fantastic to fugly: All the new app icons in macOS Big Sur
   https://cultofmac.com/715717/…
   원에서 사각형(실제로는 Squircle 이겠지만) 으로의 변화가 눈에 띄게 드러납니다.
   애플 제품의 둥근 모서리에는 Squircle이 있다 https://news.hada.io/topic?id=2277
"
"https://news.hada.io/topic?id=2413","리눅스용 Flutter 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            리눅스용 Flutter 공개

   - Canonical(Ubuntu) 과 구글이 Flutter 를 Linux 데스크탑 용으로 포팅
   - 앱 개발자들이 Snap Store 를 통해서 Flutter 앱을 쉽게 배포가능
   - 예제로 구글 Contacts를 관리하는 리눅스 앱 flokk 을 개발해서 오픈소스로 공개
   ㅤ→ GitHub, Twitter 와도 연계
   - Flutter for Linux SDK 를 Snap Store를 통해서 설치 가능

   이제 진짜 유니버셜 크로스 플랫폼이 됐내요.

   이제 Flutter는 윈도우만 있으면 데스크탑과 모바일,웹 모두 크로스 플랫폼이 가능해지는군요.
   그리고 욕을 좀 먹고있지만 개인적으로 우분투 Snap이 잘됐으면 좋겠네요. 보안으로는 Snap이 Flatpak보다 나아서..
"
"https://news.hada.io/topic?id=2335","Perl 버전 7 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Perl 버전 7 발표

   Perl이 버전 7에 관해 발표했습니다. (영어) Perl 7은 내년(2021년)에 나올 것입니다.
   Perl은 래리 월(Larry Wall)이 1987년에 처음 발표한 동적 타입의 고수준 인터프리터 언어입니다. 이식성이나 하위호환성이 좋으며, 문자열 처리능력이 뛰어나서 각종 스크립트를 만들거나 언어학·생물정보학 등에서 사용하기도 하지요. 2000년대 초반까지는 웹 프로그래밍에도 많이 사용되었습니다. 그 시절에는 CGI(Common Gateway Interface)라는 용어가 마치 Apache HTTP 서버와 Perl 언어의 조합을 가리키는 것처럼 잘못 사용되기도 했던 기억이 나네요. 대부분의 리눅스 시스템 및 macOS에는 Perl이 기본적으로 설치되어 있으므로 곧바로 사용할 수 있습니다. 지금 확인해보니 제 맥북의 macOS 10.15에는 Perl v5.18.4가, 라즈베리 파이 4에서 돌아가는 Ubuntu 20.04에는 Perl v5.30.0이 설치되어 있군요.
   Perl 6는 하위 호환성을 포기하고 역사적 이유로 쌓여 있던 불합리한 점을 모두 털어내는 것을 목표로 Perl 5.6이 발표되던 2000년부터 설계되기 시작했었지만, 아주 오랫동안 출시가 늦어진 끝에 결국 2019년에 Raku라는 별개의 언어로 아예 분리되었습니다. 그런 연유로, Perl은 6이라는 버전을 건너뛰고 바로 버전 7로 넘어갑니다. 또한 Perl 7은 기본적으로 현재의 최신 안정 버전인 5.32와 크게 다르지 않되, 더 현대적이고 안전한 기본 설정값을 사용할 것이라고 합니다. 만약 이 설정 때문에 호환성 문제가 발생한다면 Perl 5의 설정값을 대신 사용하는 호환성 모드를 사용할 수 있다는군요. 이는 기존에 잘 사용하던 Perl 스크립트나 CPAN(Comprehensive Perl Archive Network)에 올라와 있는 방대한 기존 코드를 최소한의 수정만으로 Perl 7에서도 계속 사용할 수 있을 것이라는 점을
   의미합니다.

   정리감사합니다. 제가 아는것과 조금 다른 부분이 있어서 코맨트 합니다.
   1. perl6의 설계목표는 perl5에 불합리성을 털어내는것이 아니었습니다 perl6는 perl5의 기본 정신위에 좀 더 현대적인 프로그래밍 페러다임과 런타임구조를 언어 코어에 기본적으로 반영하는 형태를 지향했기때문에 perl6가 perl5를 대체할 목표를 가진것이 아닙니다. 따라서 python 3와 python 2의 관계보다는 C와 C++의 관계로 봐야합니다.
   2. perl6는 출시가 늦어졌기때문에 raku로 이름변경한것이 아닙니다. perl6년 2015년 크리스마스에 정식출시되었으며 여러VM과 런타임이 존재합니다. 2019년에 이름을 변경한것은 위에 말한것 같이 perl5와 perl6 간의 독립적인 관계를 좀 더 부각하기 위한 선택이었습니다.
   감사합니다.

   그렇군요. 댓글 감사합니다.

   포스팅 감사합니다!
"
"https://news.hada.io/topic?id=2366","The end of the Redis adventure","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     The end of the Redis adventure

   Redis 개발자인 Antirez가 더 이상 새로운 것을 만드는 것이 아닌 소프트웨어 유지보수만 하는 것에 지쳐서, 한발 물러나 Redis 에 대한 새로운 기회를 제공하는 아이디어를 내는 위치로 옮기겠다고 발표
   ""본질적으로, 나는 좋은 프로그래머보다는 나쁜 예술가로 기억되고 싶습니다.""
   ""그렇다고 코딩을 안할 것 같지는 않아요. 코딩은 너무 재미있어요 :D""
   Redis 는 이제 Redis 커뮤니티가 유지보수 하고 발전시키게 될 것

   개인적인 프로젝트로 시작했으면 그럴 법하더라고요.
   처음에는 자신이 상상하던 프로그램을 만드는 맛으로 만들다가, 자신이 뜻하지도 않게 대박이 나면 서 그 프로젝트를 유지보수하게 되는 상황으로 바뀌겠죠. 그리고 유지보수는 재미가 없으니...
   그래도 10년 넘게 했던게 대단합니다.

   11년이나 한 프로젝트에 매달렸으면 이런 말을 할수 있을 것 같네요.
"
"https://news.hada.io/topic?id=2436","Netflix가 데이터 인프라 비용을 효율화하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Netflix가 데이터 인프라 비용을 효율화하는 방법

   넷플릭스의 분산된 인프라 구조 및 ""자유와 책임"" 사내 문화때문에 효율화는 꽤 어려운 일이어서, 비용 투명성을 제공하고 효율화 관련 컨텍스트를 의사 결정자 가까이에 두기 위해 맞춤형 대시 보드를 개발했음.
   이 ""데이터 효율성 대시보드""를 만든 방법과 교훈들
   * 넷플릭스의 데이터 플랫폼 환경 : 두가지로 분류가능
   1. Data at Rest : Snowflake, S3, Hive, RDS, ElasticSearch, Cassandra, Druid
   2. Data in Motion : Keystone, Flink, Mantis, Spark, Kafka, Presto
   ** 사용량 및 비용 가시성을 한눈에 보기 **
   모든 플랫폼의 비용을 취합하는데, 각 비용을 의미있는 유닛들로 쪼갤수 있는 정보를 포함한 채로 취합
   ㅤ→ 유닛 : 테이블, 인덱스, 컬럼 패밀리, 잡 등
   이 비용 정보의 원천은 기본적으로 서비스 및 태그로 분류한 AWS 빌링정보에 의존하는데, 이것 만으로는 리소스/팀 별 구분이 불가능해서 다음과 같은 방법들을 이용
   - EC2기반 플랫폼
   ㅤ→ 병목현상을 일으키는 메트릭(bottlenec metric)들을 플랫폼 별로 정의
   ㅤ→ 예를 들어, Kafka 는 네트웍에 바운드되지만, Spark 는 CPU와 메모리에 바운드.
   ㅤ→ Atlas 와 플랫폼 로그, Rest API를 활용해서 각 리소스당 메트릭들을 구분하고 비용을 할당
   - S3기반 플랫폼
   ㅤ→ 각 리소스당 S3 Prefix 를 붙이고, 스토리지 가격 기준으로 리소스당 비용을 계산
   - Dashboard View
   Apache Druid 기반의 커스텀 대시보드를 사용해서 각 비용을 팀에 할당.
   이 비용정보의 주요 고객은 엔지니어링 & 데이터팀. 그들이 해당 정보에 기반해서 액션 할수 있도록 제공
   추가로, 엔지니어링 리더들에게는 더 높은 수준에서 볼수 있도록 제공.
   유스케이스에 따라서 데이터 자원 단위 또는 조직 단위로 그룹화 해서 볼 수 있고, 스냅샷 및 시계열로 데이터 보는 것이 가능

   ** 자동화된 스토리지 추천 - Time to Live (TTL) **
   일부 시나리오에서는 투명성 제공을 넘어서 최적화 권장 사항도 제공.
   데이터 스토리지는 사용량도 많고, 비용 모멘텀(저장후 까먹어버리는 것 같은)이 많으므로,
   데이터 사용량 패턴을 기반으로 최적의 스토리지 기간(TTL)을 결정하는 분석을 자동화.
   S3의 빅데이터 웨어하우스용 테이블들에 대해서는 TTL 추천을 적용

   - 비용 계산과 비즈니스 로직
   가장 큰 S3 비용은 트랜잭션 테이블에서 발생하며, 일반적으로 날짜별로 파티셔닝
   S3 억세스로그와 S3 prefix-to-table-partition 매핑을 이용하여 액세스할 날짜 파티션을 결정할수 있음.
   지난 180일간의 액세스(읽기/쓰기) 활동을 보고 최대 Lookback(돌아보기) 일자를 확인.
   이 Lookback 일자에 의해 해당 테이블의 TTL 값이 결정.
   이 계산된 TTL을 기반으로 실현가능한 연간 절감액을 계산
   - Dashboard View
   데이터 오너들은 상세한 데이터 접근 패턴을 볼 수 있으며, TTL의 추천값 vs. 현재값을 보고, 가능한 비용 절감액도 확인 가능
   ** 커뮤니케이션과 사용자에게 알리기 **
   데이터 비용을 확인 하는 것은 기술팀의 일상 업무가 되어서는 안됨. 특히나 의미없는 데이터 비용들이라면.
   그래서 데이터 비용에 대한 인식을 높일수 있게 데이터 사용량이 많은 팀들에게만 이메일 푸시 알림 하는 기능을 개발.
   또한 비용 절감 가능성이 있는 테이블에 대해서만 자동으로 TTL 권장 값을 보냄.
   현재, 이런 이메일은 매월 전송되고 있음

   ** 교훈과 도전과제 **
   1. 각 자산들의 메타 데이터를 식별하고 유지하는 것은 비용 할당에 중요함
   ㅤ→ 이를 위해 Netflix Data Catalog (NDC) 라는 메타데이터 저장소를 구축
   ㅤ→ 데이터 접근 및 검색이 쉬워져서 기존 데이터나 신규 데이터 어떤 것이든 관리가 가능
   ㅤ→ NDC 를 비용 계산의 시작점으로 활용
   2. 시간 추세 데이터는 도전적
   ㅤ→ 추세 데이터는 스냅샷보다 유리 관리 부담이 훨씬 큼
   ㅤ→ 데이터 불일치 및 처리 대기 시간 때문에 일관된 보기를 제공하는 것은 어려운 일
   ㅤ→ 두가지의 과제를 해결 해야 했음
   ㅤㅤ- 자원의 소유권 변경 : 스냅샷은 자동으로 소유권 변경사항이 반영 되어야 하고, 시계열 보기의 경우는 변경 사항 조차도 메타데이터에 반영이 필요
   ㅤㅤ- 데이터 문제 발생시 상태 손실 : 자원의 메타데이터는 API를 통해서 다양한 소스에서 추출되다 보니 수집중 실패할 경우 상태가 손실. 이런 데이터 들은 일시적이므로 API추출만으로는 한계가 있음. Keystone 쪽으로 데이터를 펌핑하는 것 과 같은 대안을 찾아야 함

   ** 결론 **
   고도로 분산된 데이터 플랫폼이 있다면, 이런 대시보드를 통해 피드백 루프를 생성하고 사용량 및 비용 컨텍스트를 통합하면 효율성을 크게 향상 시킬수 있음.
   가능하다면 자동화된 추천을 통해서 효율성을 높이도록 해야함.
   넷플릭스의 경우 데이터 보존 기간을 추천하는 것이 높은 ROI 를 보여줬음.
   이 대쉬보드와 TTL 추천을 통해서 전체 데이터 웨어하우스의 저장 공간을 10% 이상 줄일 수 있었음.

   추천 기능은 시청자만을 위한 것이 아니었군요.

   좋네요. 실시간 모니터링 기계를 볼 수 있다면 불수의근도 움직일 수 있다는 연구를 어디선가 봤는데 갑자기 떠올랐습니다.
"
"https://news.hada.io/topic?id=2404","Apple Design Resources","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Apple Design Resources

   - 애플이 제공하는 자신들의 모든 플랫폼별 디자인 리소스 모음
   - San Francisco 시스템 폰트용 심볼 2400개
   - iOS / macOS / watchOS / tvOS
   ㅤ→ Sketch, Photoshop, XD 템플릿 등
   - Parallax PreviEwer App 및 포토샵용 Exporter 플러그인
   - 그외 Apple Watch Face, AirPlay, ARKit, CarPlay, Game Center, HealthKit, HomeKit, Sign in With Apple 용 디자인 자료들
"
"https://news.hada.io/topic?id=2332","Skeuomorphisim 이 돌아오고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Skeuomorphisim 이 돌아오고 있다

   지난 몇년간 Flat Design 에 밀려났던 스큐어모피즘이 돌아오고 있다
   WWDC 20에서 애플이 보여준 새 아이콘과 디자인들이 그 한 예
   사람들은 대부분 쉽게 지루해하기 때문에 트렌드는 원처럼 반복됨
   플랫디자인은 더 쉬웠고, 적은 노력으로도 결과물을 만들어낼수 있었음
   애플에게도 플랫 디자인은 리셋이었고 그를 통해서 일관된 시스템을 만들어냈음
   하지만 이런 모던 플랫 UI들은 깔끔하고 일관성있게, 생산성과 속도를 위해 최적화 되었지만 뭔가 하나 부족했음
   바로 ""Soul"" 을 잃어버리고 다들 비슷하게 보이고, 심지어 아이콘이 화면에 섞여버리기 시작했음
   그래서 다시 스큐어모피즘을 통해서 천천히 ""볼만한게 많은"" 디자인으로 변경 되어 갈 것

   맥 아이콘이 바뀌긴 했는데... 아이폰이나 아이패드는 아직 그대로죠.
   오히려 어색한 건 사실입니다 ㅎㅎ

   레티나로 해상도가 좋아졌는데 플랫하기만 한건 사실 해상도 낭비인듯 해서.. ㅎㅎ
   더 이쁘장한 아이콘을 원합니다!

   키노트에서 맥OS의 아이콘 설명부분에서 이 글에서 주장하는 것을 엿보실 수 있습니다.
   https://youtu.be/GEZhD3J89ZE?t=4270
   사실 플랫디자인이 좀 심심하긴 한데 예전처럼 마구 화려하기만한 스큐어모피즘으로 간다기 보다는
   플랫 디자인을 통해서 좀 더 정제되면서도 세련된 디자인들이 나오지 않을까 예상은 됩니다.
   저는 ""볼만한게 많은"" 디자인쪽에 한표

   관련해서
   뉴모피즘은 새로운 UI트렌드가 될 수 있을까 ? https://news.hada.io/topic?id=1553
   2020년에 눈여겨 봐야할 UI 트렌드 https://news.hada.io/topic?id=1292
"
"https://news.hada.io/topic?id=2410","구글 리치 검색결과 테스트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             구글 리치 검색결과 테스트

   - 웹페이지가 구글의 리치검색결과를 지원하는지 테스트 하는 도구
   - 몇년간의 베타 종료하고 정식 공개
   ㅤ→ 기존의 구조화 데이터 테스팅 도구는 지원 종료예정
   - 테스트 해볼수 있는 구조화 데이터들
   ㅤ→ 기사, 도서, 탐색경로, 캐러셀, 교육 과정, 비평가 리뷰, 데이터셋, 평점, 이벤트, FAQ, How-To, 채용정보, 지역 비즈니스, 로고, 영화, 예상 급여, 팟캐스트, 제품, Q&A 등

   웹사이트 운영자라면 구글의 검색갤러리를 한번 둘러보고
   자신의 사이트에서 제공되는 정보와 매칭되는게 있다면 이를 구현하고 이 리치검색결과 테스트 통해서 확인해보는 게 중요합니다.
   https://developers.google.com/search/docs/guides/search-gallery

   루니버스
"
"https://news.hada.io/topic?id=2386","시니어 세대를 위한 모바일 UX 디자인 Tips","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       시니어 세대를 위한 모바일 UX 디자인 Tips

   20~30대 UI/UX 디자이너들이 간과하기 쉬운 시니어 세대들을 위한 UX 디자인
   1. 시력
   ㅤ→ 색상 대비 비율 검사 : Figma 에선 Able 플러그인으로
   ㅤ→ 폰트는 16pt 이상. 커스터마이징 옵션 제공. 글꼴은 한두개로 통일
   ㅤ→ 콘트라스트 비율은 적어도 4.5:1 ( 큰 글자는 3:1 )
   ㅤ→ 중요 아이콘 색상은 푸른색 피하기. 레드와 그린은 사용에 주의
   ㅤ→ 대조를 주어서 색상을 구분
   2. 인지적 변화 - 기억,주의력,의사결정
   ㅤ→ 기억 : 한화면에 여러 기능 넣지 않기. 진행완료에 대한 명확한 피드백
   ㅤ→ 주의력 : 호흡이 긴 텍스트도 OK. 상호작용 필요할때 긴 시간간격 허용. 화면 중앙 배치
   ㅤ→ 의사결정 : 새로운 디자인 보다는 이미 익숙한 디자인과 레이아웃, 색상에 집중. 전문가의 의견 노출
   3. 운동 제어 능력
   ㅤ→ 터치 버튼은 대각선의 길이가 최소 9.6mm 이상 ( iPad의 44x44 픽셀 )
   ㅤ→ 과도한 핑거태핑 줄이기
"
"https://news.hada.io/topic?id=2385","추천시스템 기술 포스팅 20선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            추천시스템 기술 포스팅 20선

   카카오, 라인, 네이버, 당근마켓, 번개장터 등 현업에서 추천시스템을 연구하고 개발하고 계신 전문가 분들의 기술 포스팅 리스트
   1. 멜론에서 음악 추천을 어떻게 할까? - 전재호 (카카오 추천팀)
   2. LINE Timeline의 새로운 도전 1편 – 추천 컨텐츠 탐색을 위한 Discover와 새로운 구독 모델 Follow - 이경복 (라인)
   3. 네이버 급상승검색어에 AI 기술 ‘RIYO’가 적용되어 검색어 차트가 사용자 선택에 따라 개인 별로 차별화됩니다 - 네이버 다이어리 블로그
   4. 브런치 추천의 힘에 대한 6가지 기술(記述) - 최규민 (카카오 추천팀)
   5. 딥러닝 추천 시스템 in production - 전무익 (당근마켓)
   6. 딥러닝 개인화 추천 - 전무익 (당근마켓)
   7. AiTEMS가 추천하는 ‘함께 볼만한 영화 추천 서비스’가 오픈됩니다. - 네이버 검색 블로그
   8. ‘함께 볼 만한’ 상품도 맞춤형으로, 스타일 토픽 기반 쇼핑 추천 (AiTEMS)을 소개합니다. - 네이버 검색 블로그
   9. 번개장터 추천 시스템 개발 및 도입후기 Part3 - 이명휘 (번개장터)
   10. 번개장터 추천 시스템 개발 및 도입후기 Part2 - 이명휘 (번개장터)
   11. 번개장터 추천 시스템 개발 및 도입후기 Part1 - 이명휘 (번개장터)
   12. [네이버가 연구하는 기술] AI기반 장소 추천 시스템 AiRSPACE(에어스페이스) - 네이버 검색 블로그
   13. CIKM2017에서 발표한 네이버의 자동 뉴스 추천 기술 - 정후중 (네이버 검색), 박근찬 (네이버 AiRS)
   14. 카카오I 추천 엔진의 진화 - 성인재 (카카오 추천팀)
   15. 쇼핑을 자주 하지 않는 이용자도, 신규 판매자도 만족스러운 쇼핑 플랫폼을 만드는 에이아이템즈(AiTEMS)의 기술 - 이정태 (네이버 Personal Shopper), 박병선 (네이버 커뮤니케이션그룹)
   16. 취향저격 잇템 찾아주는 딥러닝 기반 개인화 상품 추천 시스템 ‘에이아이템즈 (AiTEMS) - 이정태 (네이버 Personal Shopper), 박병선 (네이버 커뮤니케이션그룹)
   17. 내 손안의 AI 비서, 추천 알고리듬 - 전상혁, 김광섭 (카카오 추천팀)
   18. 카카오 뉴스 추천 AI 알고리듬 '루빅스'의 비밀 - 카카오 정책산업 연구 브런치
   19. 인공지능 기반 추천 시스템 AiRS를 소개합니다 - 네이버 다이어리 블로그
   20. 루빅스(RUBICS) – kakao의 실시간 추천 시스템 - 서상원 (카카오 추천팀)
"
"https://news.hada.io/topic?id=2368","Hey vs Superhuman vs Gmail","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Hey vs Superhuman vs Gmail

   - Hey 8일, Superhuman 9개월, Gmail 15년 사용한 경험으로 정리
   - Hey의 똘똘한 기능
   ㅤ→ Label 별로 다른 보기 모드
   ㅤ→ 특정인이 미래에 보낼 메일에 대한 라벨링이 클릭 두번으로 끝 ( 지메일은 검색 필터 창을 여러번 )
   ㅤ→ 이메일 주소가 멋짐
   ㅤ→ 트래킹 방지 좋음. 지메일에도 이런게 있었으면
   ㅤ→ 메일 쓰레드의 제목 변경 및 메모 달기 기능
   - Hey의 문제점
   ㅤ→ RTL 지원 없음
   ㅤ→ 메일링 리스트 처리 필터 이상
   ㅤ→ 다음 메일 보기 단축키가 없음 (지메일/슈퍼휴먼의 e,j,k 같은)
   ㅤ→ 지메일의 프론트엔드로 쓸수있는 슈퍼휴먼과 달리 아예 새 메일 서비스 (이관이 어려움. 탈 구글 한다면 좋을수도 있지만)
   ㅤ→ 스크리너(처음 보낸 메일주소만 보이는 필터)가 좋아보였지만, 나중엔 저거도 내가 관리해야 하는 또 하나의 인박스임
   - Superhuman의 장점
   ㅤ→ 월 $30 라는 비싼 가격이지만, 메일 많을때는 그 가치를 충분히 함
   ㅤ→ 이메일을 잘 처리할 수 있게 도와주는 훌륭한 온보딩 세션
   ㅤ→ 검색 필터에 기반해서 메일을 똑똑하게 탭으로 분리
   ㅤ→ 모든 것에 대한 단축키가 다 있고, 그걸 잘 쓰도록 알려주는 UI
   ㅤ→ 메일 볼때 인박스로 다시 가지 않고 메일들 사이에서 움직이며 모든 기능을 처리할 수 있음
   ㅤ→ 한개의 단축키로 편리한 구독해지. 이메일에 구독해지 주소 및 기능이 있으면 그걸 사용하고, 기능이 없으면 자동으로 그 메일을 차단
   ㅤ→ Superhuman 자체는 Gmail 위에서 돌아가는 브라우저 확장. 모든 필터들도 여전히 동작하고 필요할 때 Gmail UI도 사용가능
   ㅤ→ 지금 해결할 수 없는 메일은 그냥 제거 가능. 알림기능으로 나중에 다시 인박스에 돌아오게 할 수 있음
   ㅤ→ 전반적으로 UI가 지메일보다 깔끔하고, 작업에만 집중할수 있음.
   - Vanilla Gmail
   ㅤ→ ""Zero Unreads"" 전략을 쓴다면 그냥 Gmail 쓰는 것도 괜찮음
   - Future of email
   ㅤ→ 여전히 GMail UI는 올드하고, 메일은 Disrupt 해야할 부분이 많아 보임.
   ㅤ→ YC의 폴그레이엄은 아직도 이메일에는 기회가 있다고 생각

   세상에서 가장 빠른 이메일 경험, 슈퍼휴먼 https://news.hada.io/topic?id=1652

   저도 Hey 좀 쓰다가 사실은 거의 포기 상태입니다.
   - 지메일을 버리고 옮겨가기가 쉽지 않음
   - 다음 메일 보기 단축키 없음 ( 이거 정말 큽니다. 저는 메일을 많이 보는 터라 지메일의 메일 지우는 단축키 # 과 아카이빙 단축키 [ 만 Six Keyboard 라는 조그만 별도 키보드에 등록하고 씁니다. )
   전반적으로 Hey는 아직 부족한 느낌이 많아서 좀 더 지켜봐야 할 것 같습니다.

   2012년에 HN에 올라온 Ask 글 ""Replacing Email - What problems/solution comes to your mind?""
   https://news.ycombinator.com/item?id=4228402
"
"https://news.hada.io/topic?id=2438","클라우드 Analytics & BI 스택 구축 가이드 한글 번역판","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  클라우드 Analytics & BI 스택 구축 가이드 한글 번역판

   Holistics에서 공개한 ""The Analytics Setup Guidebook""의 내용이 좋아 빠르게 한글 번역을 해 보았습니다.
   ※ 한글판 PDF 업로드에 관해, Holistics의 허락을 받았습니다.

   (7/15) 본문 내 오타를 수정하고 문장을 좀 더 다듬은 v1.02를 올려두었습니다. 아래 링크를 참고해 주세요 :D
   https://drive.google.com/file/d/…

   고맙습니다. 위에 원 링크도 1.02로 수정해두었습니다.

   앗, 감사합니다!

   이제 읽어봤는데.. 정말 도움이 되었습니다. 내부 분석시스템 설계에 많은 도움이 될것 같아요

   우왓 고맙습니다. 잘 보겠습니다!

   관련 뉴스 : https://news.hada.io/topic?id=2362
"
"https://news.hada.io/topic?id=2426","MonitorControl - 맥 외장 모니터의 밝기 조절 유틸","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  MonitorControl - 맥 외장 모니터의 밝기 조절 유틸

   - 맥에 연결된 외장 모니터 Contrast, Brightness, Volume 조절
   - 메뉴바 에서 슬라이더로 조절
   - 키보드 단축키 : fn+F1/F2 로 밝기 , fn+F10/F11/F12로 볼륨 조절
   ㅤ→ 네이티브 OSD 로 동작 표시
   ㅤ→ 현재 포커스 있는 모니터에 대해서 동작
   - 특정 모니터 또는 전체에 대해서 통합 조절 가능

   윈도우즈 에서 똑같은 기능을 하는 앱으로 Twinkle Tray 도 있습니다.
   https://twinkletray.com/
   리눅스에선 ddcutil setvcp 0x10 + [숫자] 또는 - [숫자] 로 조절 가능
"
"https://news.hada.io/topic?id=2340","iOS14, 앱이 클립보드를 억세스 할때 알리는 기능 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    iOS14, 앱이 클립보드를 억세스 할때 알리는 기능 도입

   - 앱이 클립보드에서 내용을 읽을때마다 배너로 알림 메시지 표시
   - 베타로 테스트 결과 엄청 많은 수의 앱들이 클립보드를 감시하고 있는 것으로 나타남
   - TikTok 의 경우 1-3개의 키 입력할때마다 계속 클립보드를 읽음

   민감한 정보 복사할 때가 종종 있는데.. 조심해야겠내요.

   이슈가 되었던 TikTok 테스트 영상 https://twitter.com/jeremyburge/status/1275896482433040386
"
"https://news.hada.io/topic?id=2405","Uber Magic 2.0 - 픽업을 완벽하게","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Uber Magic 2.0 - 픽업을 완벽하게

   우버의 사용자 픽업 경험을 개선한 UI/UX 사례
   - 2012년에 나왔던 Rider용 앱은 매우 편했지만, 2016년까지 회사가 성장하며 기능이 추가되고 문제가 많아지면서 재설계한 과정을 상세히 정리
   - 우버의 초기 처럼 ""버튼 누르면, 차를 탄다"" 같은 마법을 다시 재현하는 것
   - 목표
   ㅤ1. 빠르고 누구나, 어디서나 쓰기 쉽게
   ㅤ2. 사용자가 그들의 시간과 돈을 더 잘 제어할 수 있게
   ㅤ3. 혁신적이고 더 깊이 참여할 수 있는 플랫폼
   ""사용자의 기대는 점점 변화해감. 우버가 삶에 필수요소가 되어갈수록 기대는 진화함.""

   우버를 해외 갈때마다 써보면 픽업UI가 계속 조금씩 변하는 게 체감이 되긴 했었는데요.
   특정 도시 같은 경우 아무데나 픽업이 불가능하게 되어 있어서 근처의 픽업장소 추천이 뜨는게 나름 편했는데,
   이런 고민들을 했었네요. 굉장히 상세하게 사례를 정리해 놔서 재미나게 봤습니다.
"
