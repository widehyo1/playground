"https://news.hada.io/topic?id=13491","아무도 기억하지 못하는, 발생하지 않은 문제를 해결한 공로 (2001) [PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             아무도 기억하지 못하는, 발생하지 않은 문제를 해결한 공로 (2001) [PDF]
"
"https://news.hada.io/topic?id=13537","DevOps 엔지니어보다 더 많이 돈 버는 플랫폼 엔지니어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    DevOps 엔지니어보다 더 많이 돈 버는 플랫폼 엔지니어

     * ‘플랫폼 엔지니어링 2023 조사’에 따르면, 미국에서 플랫폼 엔지니어는 DevOps 엔지니어보다 평균 6만5439달러 더 많이 벌면서 42.5%의 급여 우위 누림
     * 유럽에서는 플랫폼 엔지니어가 18.64% 더 많은 수입을 올리는데 이는 연간 1만5871달러 더 많음
     * 수입 격차가 큰 이유: 플랫폼 엔지니어링 업무 부담이 크기 때문
          + 기존 운영, DevOps 역할과 달리 플랫폼 엔지니어링은 더 폭넓고 더 전문화된 스킬셋을 요구함
          + 이는 소프트웨어 개발과 운영 간에 공백을 메우는 역할만 수행하지 않음
          + 단순히 팀 또는 개인 문제만 해결하는 것도 아님
     * 플랫폼 엔지니어의 일은 전체 조직에 영향을 미치고, 플랫폼을 혁신하며 형성함
     * 플랫폼을 잘 구축하면 개발자와 운영팀의 병목을 해소하며 시장 출시 시간을 더 단축

   개인적으로 플랫폼 엔지니어와 데브옵스 엔지니어의 차이를 제일 크게 실감하는 부분이라면, 플랫폼 엔지니어들이 좀 더 개발자들의 툴까지 신경쓰는 경향이 있더군요.

   CI/CD 뿐 아니라, 전체적인 워크플로우와 사내/팀내 규칙까지 제시하고, 이를위해 기존 파이프라인 툴을 개발개조하기도 하며, 때로는 마케팅, 세일즈, 프로덕트/프로젝트 매니저, 시큐리티 등과 폭넓게 소통하는 모습을 보이기도 하는데....

   어찌보면 데브옵스의 진화형이라고 여겨지기도 하지만, 한 비즈니스가 요구하는 여러 부분을 해결해주는 여러 도구를 플랫폼으로 통합 발전시키는 역량이 필요한 것 같습니다.

   귀중한 인사이트 감사합니다.
"
"https://news.hada.io/topic?id=13492","Phind-70B 공개 - GPT-4 Turbo와 코드 품질 격차를 줄이면서 4배 빠른 실행 가능한 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Phind-70B 공개 - GPT-4 Turbo와 코드 품질 격차를 줄이면서 4배 빠른 실행 가능한 모델

     * 초당 최대 80개의 토큰을 처리(GPT-4 Turbo는 초당 ~20토큰)
     * 32K 토큰 윈도우를 지원
     * CodeLlama-70B 모델 기반으로 추가적인 50B 토큰으로 파인튜닝됨
     * HumanEval 에서 82.3%를 기록해서 81%인 GPT-4 Turbo(gpt-3-0125-preview)를 상회함
     * Meta의 CRUXEval 에서는 59%로 GPT-4의 62%에 조금 못 미침
     * 코드생성 측면에서는 거의 GPT-4 Turbo와 동일하거나 일부 작업에서는 이를 능가
     * GPT-4 Turbo 보다 덜 ""Lazy"" 해서 상세한 코드 예제를 생성하는데 주저하지 않음

   1년쯤 전에 GeekNews를 통해 Phind를 알게 된 이후로 코드 질문은 거의 다 Phind로 해왔습니다. 가끔 헤메는게 보이긴 하는데 그래도 이젠 노하우가 생겨서 덜 헤매도록 질문하고그래요.

   phind - 개발자를 위한 Generative AI 검색 엔진
   phind - 개발자를 위한 GPT-4 기반 검색 엔진

        Hacker News 의견

     * Phind 사용 경험 공유
          + Phind를 지난 3-4주간 거의 매일 사용했으며, 생성된 코드의 품질이 좋고 실행도 잘 됨.
          + ChatGPT보다 정확도가 높고 올바른 방향을 제시함.
          + ChatGPT는 최근 2개월 이상 느려졌지만, 주제를 공부하는 데에는 ChatGPT가 더 자세하고 설명적임.
     * 코드 품질 평가에 대한 의심
          + GPT-4가 제공한 정규식을 통해 문자열을 분리하는 문제를 해결하고, 필요한 단위 테스트를 추가하여 성공적으로 커밋함.
          + 70B 모델은 여러 번의 시도에도 불구하고 이 문제에 대한 답을 제공하지 못함.
          + GPT-4 이외의 모델을 사용해볼 때마다 시간 낭비처럼 느껴짐.
     * Phind 창립자의 안내
          + Phind-70B 모델을 로그인 없이 무료로 시도해볼 수 있음.
     * Phind의 응답 속도와 품질에 대한 인상
          + 응답 속도에는 인상적이지만, 품질에는 그다지 만족하지 않음.
          + GPT-4는 몇 번의 시도 끝에 POST 요청을 고려하여 처리하지만, Phind는 주로 GET 요청에만 집중함.
     * LLM에 대한 재미있는 도전
          + 기본적인 논리 퍼즐을 LLM에게 제시하여 해결 능력을 테스트함.
          + Phind-34B는 특히 재미있게 반응하며 때로는 루프에 빠짐.
     * Wireshark 플러그인 작성 경험 비교
          + Phind와 ChatGPT를 비교하여 Wireshark 플러그인 작성 경험을 공유함.
     * API 연동 가능성 문의
          + Phind의 API가 GPT-4를 코딩에 사용하는 데 최적화된 aider.chat에 연동될 수 있는지 질문함.
     * Phind 사용 경험 공유
          + 1년 이상 Phind를 사용해온 사용자로, GPT보다 선호함.
          + 긴 질문 스레드 후에 반복되거나 루프에 빠지는 이슈가 있었음.
     * 코드 번역에 대한 Phind의 반응
          + ChatGPT 3.5/4는 때때로 Go 파일을 C#으로 전체 번역하는 반면, Phind는 전체 코드 번역을 거부함.
     * Phind-70B의 속도와 성능
          + Phind-70B는 GPT-4 Turbo보다 훨씬 빠르며, 이는 NVIDIA의 TensorRT-LLM 라이브러리와 H100 GPU를 사용함으로써 달성됨.
"
"https://news.hada.io/topic?id=13544","Apache Superset - 데이터 탐색 및 시각화 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Apache Superset - 데이터 탐색 및 시각화 플랫폼

     * Apache Superset™은 오픈소스 현대 데이터 탐색 및 시각화 플랫폼임
     * 사용자가 모든 기술 수준에서 데이터를 쉽게 탐색하고 시각화할 수 있도록 설계됨
     * 간단한 라인 차트부터 상세한 지리 공간 차트에 이르기까지 다양한 옵션 제공

주요 기능

     * 데이터 탐색을 위한 간단한 노코드 시각화 빌더와 최첨단 SQL IDE 제공.
     * 모든 SQL 기반 데이터베이스에 연결 가능하며, 페타바이트 규모의 현대적 클라우드 네이티브 데이터베이스 및 엔진과 통합.
     * 가벼우면서도 확장 가능한 현대적 아키텍처로, 별도의 데이터 수집 계층을 요구하지 않음.
     * 40개 이상의 사전 설치된 시각화 유형을 제공하며, 사용자 정의 시각화를 쉽게 구축할 수 있는 플러그인 아키텍처.
     * 누구나 사용할 수 있는 자가 서비스 분석 기능.

대시보드 및 차트 빌더

     * 대화형 대시보드를 통해 데이터를 탐색하고 인사이트를 발견.
     * 드래그 앤 드롭 및 SQL 쿼리 지원.
     * 차트 및 대시보드의 빠른 로딩 시간을 위한 데이터 캐싱.
     * 대시보드 필터와 Jinja 템플릿을 사용하여 상호 작용하는 대시보드 생성.
     * 브랜드의 모양과 느낌에 맞게 차트 및 대시보드를 사용자 정의할 수 있는 CSS 템플릿.
     * SQL 데이터 변환을 위한 의미적 계층.
     * 데이터 분석을 위한 교차 필터, 디테일로 드릴다운, 드릴-바이 기능.
     * 임시 데이터 탐색을 위한 가상 데이터셋.
     * 기능 플래그를 통한 새로운 기능 접근.

지원되는 데이터베이스

     * 다양한 호환 가능한 데이터베이스 지원.

Apache Software Foundation

     * Apache Software Foundation의 자원, 보안, 기부, 감사, 이벤트, 라이선스 정보 제공.
     * Apache Superset, Apache, Superset 로고 및 Apache 깃털 로고는 Apache Software Foundation의 등록 상표 또는 상표임.

GN⁺의 의견

     * Apache Superset은 데이터 시각화와 대시보드 생성을 위한 강력한 도구로, 데이터 분석가와 개발자 모두에게 유용함.
     * 오픈소스 특성으로 인해 커뮤니티의 지원을 받으며 지속적으로 발전하고 있으며, 사용자가 직접 기능을 추가하거나 개선할 수 있는 유연성을 제공함.
     * 다양한 데이터베이스와의 호환성은 데이터 분석을 위한 다양한 환경에서의 적용 가능성을 높임.
     * 그러나 오픈소스 소프트웨어는 때때로 기술 지원이나 문서화가 미흡할 수 있으므로, 도입 전에 커뮤니티 지원과 문서의 충분성을 확인할 필요가 있음.
     * 이와 유사한 기능을 제공하는 다른 도구로는 Tableau, Power BI, Looker 등이 있으나, 이들은 상업적 소프트웨어이므로 라이선스 비용을 고려해야 함.

        Hacker News 의견

     * Superset 사용 경험
          + Superset을 사용하여 Tableau를 대체했으며, 이전으로 돌아갈 생각이 없음.
          + Superset Embedded SDK를 사용하여 앱에 내장하는 방법을 파악하는 데 시간이 걸렸음.
          + Superset은 고품질의 eChart 차트 라이브러리를 기반으로 함.
          + Preset.io 팀이 프로젝트에 기여하고 잘 관리하는 데 대해 큰 존경심을 표함.
          + Superset의 소스 코드는 읽고 이해하기 쉬우며, 고급 캐싱 기술을 구현하여 차트의 부하를 줄일 수 있음.
          + Superset을 오랫동안 지켜본 결과, 프로젝트가 장기적으로 잘 작동할 것이라는 확신을 가짐.
          + eChart와 Reactjs를 사용하여 시각화를 시작하고, 전문 사용자를 위해 Superset을 서브도메인에서 실행한 후 어느 것이 더 나은지 평가함.
     * Superset의 특징
          + Superset은 빠르고, 가벼우며, 직관적이고, 모든 기술 수준의 사용자가 데이터를 탐색하고 시각화할 수 있는 다양한 옵션을 제공함.
     * Superset에 대한 다양한 의견
          + 몇 년 전 Superset을 사용해봤지만, 직관적이라고 느끼지 못했음. 다른 BI 도구에서는 몇 분 안에 파악할 수 있는 것들을 찾는 데 몇 시간이 걸렸음.
          + Superset을 2017년부터 사용해왔으며, 현재는 대기업에서 사용 중임. 가장 좋은 범용 데이터베이스 기반 대시보드 시스템으로, Tableau나 PowerBI에 돈을 지불할 필요가 없음.
          + Metabase를 직장에서 많이 사용하지만, 수백 개의 대시보드와 질문을 조직하는 데 어려움이 있음. 내비게이션을 구축할 수 있는 위키 같은 기능이 있으면 좋겠음.
     * Superset과 관련된 자료
          + Python으로 만들어진 오픈 소스 비즈니스 인텔리전스 플랫폼에 대한 논의 링크 제공.
     * Superset과 Metabase 비교
          + Metabase를 몇 개 프로젝트에서 사용해봤으며, Superset이 더 강력해 보임. 작은 데이터셋에 대한 BI로 가치가 있을까?
     * BI 소프트웨어 사용자에 대한 고려
          + BI 도구 사용자는 종종 이메일 클라이언트로 mutt를 선호하는 사람들과 매우 다름. 대부분의 사용자는 직관적이거나 반응이 좋거나 잘 설계된 인터페이스를 찾지 못할 수 있음.
     * Superset 활용 사례
          + MinIO+Hudi+StarRocks+Superset을 사용하여 데이터 레이크에서 대화형 쿼리 경험을 제공하는 훌륭한 비디오 소개.
     * Superset의 개인 사용 적합성
          + 단일 사용자가 데이터 분석을 할 때 Superset이 적합한 도구인지, sqlite 데이터베이스를 가지고 있고 몇 가지 쿼리/차트를 개발하고 싶은 경우.
          + 단일 사용자에게 적합한 소프트웨어나 무거운 도구를 더 편리하게 실행하는 방법에 대한 추천 요청.
     * Superset에 대한 개발 지원
          + Stackable에서 Apache Superset을 위한 Kubernetes Operator를 구축함.
          + 오픈 소스 데이터 플랫폼의 일부이며, 이 분야에서 몇 안 되는 오픈 소스 BI 도구 중 하나임.
"
"https://news.hada.io/topic?id=13512","A*를 넘어서: 트랜스포머를 활용한 더 나은 계획 수립","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     A*를 넘어서: 트랜스포머를 활용한 더 나은 계획 수립

Beyond A*: 트랜스포머를 이용한 더 나은 계획 수립

     * 트랜스포머 모델은 다양한 응용 분야에서 큰 진전을 이루었으나, 복잡한 의사결정 과제를 해결하는 데 있어서 전통적인 기호 기반 계획 수립 방법에 뒤처짐.
     * 연구진은 트랜스포머를 훈련하여 복잡한 계획 과제를 해결하는 방법을 제시하고, Searchformer라는 모델을 개발하여 기존 A* 탐색보다 최대 26.8% 적은 탐색 단계를 사용하면서도 93.7%의 시간에 미리 보지 못한 Sokoban 퍼즐을 최적으로 해결함.
     * Searchformer는 A* 탐색 동작을 예측하도록 훈련된 인코더-디코더 트랜스포머 모델로, 전문가 반복을 통해 미세 조정되어 A* 탐색보다 적은 탐색 단계를 수행하면서도 최적의 계획을 생성함.

훈련 방법과 성능

     * 훈련 방법에서는 A*의 탐색 동작을 기호 계획 중 탐색 트리에 상태가 추가되고 제거되는 시점을 나타내는 토큰 시퀀스로 표현함.
     * 미로 탐색에 대한 소거 연구에서 Searchformer는 최적 계획을 직접 예측하는 기준 모델을 크게 능가하며, 모델 크기는 5-10배 작고 훈련 데이터셋은 10배 작음.
     * 연구진은 Searchformer가 Sokoban과 같은 더 크고 복잡한 의사결정 과제에 대해 해결 과제의 비율과 탐색 동작을 단축시키는 데 효과적임을 보임.

GN⁺의 의견

     * 이 연구는 인공지능 분야에서 트랜스포머 모델의 새로운 활용 가능성을 보여줌. 복잡한 의사결정 과제를 해결하는 데 있어 기존의 기호 기반 방법보다 효율적인 접근 방식을 제시함으로써 AI의 응용 범위를 확장하는 중요한 발전임.
     * Searchformer 모델은 더 적은 자원을 사용하여 더 빠르고 효율적인 문제 해결 능력을 보여줌. 이는 특히 자원이 제한적인 환경에서 AI를 구현할 때 큰 장점이 될 수 있음.
     * 본 연구는 AI 기술의 발전이 단순히 더 많은 데이터와 더 큰 모델에 의존하지 않고도, 지능적인 방법론과 알고리즘의 개선을 통해 이루어질 수 있음을 시사함. 이는 AI 연구의 지속 가능성과 효율성 측면에서 매우 흥미롭고 유익한 접근법임.

        Hacker News 의견

     * 로봇 모션 계획을 위한 트랜스포머 사용에 대한 흥미로운 연구가 있음. 로봇 팔이 물체를 치지 않고 한 지점에서 다른 지점으로 이동하는 것은 매우 어려운 문제로, 이 문제는 고차원적이며 연속적임. 이전의 계획 방법들은 계산이 많이 들고 그다지 좋지 않았음. 이것이 로봇의 움직임이 '비자연스러워' 보이고 로봇이 우리가 원하는 많은 작업을 잘 수행하지 못하는 이유 중 하나임. 이 접근법은 다른 계획 방법들과 경쟁력이 있어 보이며, 더 빠른 최적 경로 계획을 제시함.
     * 게임 그래프/경로 찾기를 위한 A* 알고리즘의 최적화 버전인 수정된 J* 알고리즘을 이 연구 경로를 시작하기 전에 시도했는지 궁금함. 관심 있는 사람을 위해 ""Game AI Pro 2""에 관한 정보가 있음.
     * 계획은 이미 그래프 검색, SAT-솔버, OR, Prolog 등과 같은 기존 기술로 잘 처리되고 있음. 문제는 보통 여러 실행 가능한 대안들 사이의 최적화인데, 트랜스포머가 이를 수행하기에 적합한지 의문임. LLM 기술의 역할은 자연어 설명을 실행 가능한 프로그램으로 변환하는 것에 더 가까워 보이며, Prolog는 결국 고전 NLP를 위해 설계되었으니 매우 가까움.
     * 기계 번역은 복잡한 문법 해독과 검색을 포함했으나, 이제는 MT에 트랜스포머를 사용하며, 검색이 거의 필요하지 않은 훨씬 간단한 해독을 사용함. 현재 최고의 예측 모델을 사용하여 신경망 아키텍처 검색(NAS)을 위한 휴리스틱을 학습하고, 트랜스포머와 맘바보다 나은 새로운 신경 블록을 검색하는 '완전한 시작'에 도달할 수 있을지도 모름.
     * ""표준 A* 검색보다 26.8% 적은 검색 단계""라는 문구는 A*보다 약간 나은 성능을 보여주지만, Sokoban에서는 최신 기술(SOTA)에는 미치지 못함. 이 논문에서 인상적인 것은 무엇이며, 왜 해커뉴스에 올라왔는지 의문임.
     * 트랜스포머가 계획을 수립할 수 있다면, AGI(인공 일반 지능)는 단지 더 나은 교육만 필요할 수도 있음.
     * 청각 학습자를 위해 이 논문을 요약한 오디오북 형식이 제공됨.
     * 이 논문은 어제 HN 홈페이지에 있던 Neural Network Diffusion 논문을 연상시킴. 이전 논문에서는 SGD 단계를 우회하는 모델을 훈련시켰고, 이 논문에서는 A* 탐색 단계를 우회함. 다른 한편으로, Sokoban을 위한 A*의 휴리스틱 선택이 좋지 않음. 논문을 읽는 동안 20분간 Sokoban을 플레이해보니, 진행을 위해 종종 목표 상태에서 상자를 멀리 이동해야 하므로 탐색 휴리스틱이 매우 부족함을 느낌.
     * 딥러닝을 사용하여 이제 더 잘 수행되는 고전 알고리즘 또는 NP 완전 문제의 목록을 유지하고 있는 사람이 있는지 궁금함.
     * A* 또는 Focal 검색과 같은 이산 알고리즘에서 학습된 휴리스틱 사용에 대해 매우 낙관적임. 대부분의 현대 이산 최적화 라이브러리에서는 CPLEX와 같이 성능을 설명하는 것은 휴리스틱과 튜닝임. 잘 이해되는 최적 검색 루틴을 대체하기 위한 종단 간 학습 접근법 사용에 대해서는 덜 이해하지만, 그것은 과도한 걱정일 수도 있음. 저자들이 그 기회를 놓쳤다고 생각됨.
"
"https://news.hada.io/topic?id=13471","건축가들이 프로그래머처럼 일해야 했다면 (1995)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      건축가들이 프로그래머처럼 일해야 했다면 (1995)

건축가가 프로그래머처럼 일해야 한다면

     * 건축가에게 정확한 필요 사항을 모르면서 집을 설계하고 지으라고 요청함.
     * 집은 2에서 45개의 침실을 가질 수 있어야 하며, 침실은 쉽게 추가하거나 삭제할 수 있어야 함.
     * 최종 결정은 건축도면을 본 후에 하겠다고 함.
     * 선택한 집은 현재 살고 있는 집보다 비용이 적게 들어야 함.
     * 현재 집의 결함(부엌 바닥의 진동, 벽의 단열 부족)을 모두 수정해야 함.
     * 연간 유지비용을 최소화하면서 최신 디자인 관행과 재료를 사용해야 함.
     * 1952년형 기브슨 냉장고를 수용할 수 있는 주방 디자인이 필요함.
     * 온 가족과 장인어른의 의견을 듣고 모두를 만족시키는 집을 설계해야 함.
     * 작은 디테일은 신경 쓰지 말고 전체적인 계획을 세워야 함.
     * 자원 확보보다는 상세한 계획과 사양 개발이 우선임.
     * 계획 승인 후 48시간 이내에 지붕이 완성되어야 함.
     * 나중에 다른 사람에게 팔 수 있도록 다양한 구매자의 취향을 고려해야 함.
     * 최종 계획을 확정하기 전에 지역 사회의 합의가 필요함.
     * 건축도면을 준비해야 하며, 실제 디자인은 나중에 변경될 수 있음.
     * 나중에 디자인 변경으로 인한 건축 비용 증가에 대해 책임을 짐.
     * 최신 기술과 자유로운 디자인을 사용할 수 있는 흥미로운 프로젝트임.
     * 아내가 처음 지시한 내용과 다른 의견을 가지고 있으며, 이를 해결하는 것은 건축가의 책임임.
     * 아내는 집이 아니라 여행 트레일러가 필요할 수도 있다고 함. 이에 대한 조언을 요청함.

  GN⁺의 의견

     * 이 글은 건축가에게 불합리하고 모순된 요구를 하는 고객을 풍자하여, 프로그래머가 종종 겪는 비현실적인 기대와 요구를 재치 있게 비유하고 있음.
     * 프로젝트의 명확한 요구 사항과 기대치, 그리고 변경 관리의 중요성을 강조하는 사례로 볼 수 있음.
     * 이 글은 프로그래밍과 건축이라는 서로 다른 분야의 전문가들이 겪는 공통된 문제를 이해하고 공감하는 데 도움이 되며, 프로젝트 관리의 어려움을 유머러스하게 전달함으로써 독자에게 흥미를 제공함.

        Hacker News 의견

     * 첫 번째 댓글 요약:

     프로젝트를 수행할 때 작업을 세부적으로 나누고 추정해야 하며, 추정치가 정확하지 않더라도 시간을 초과하면 책임을 져야 함. 매일 1시간 동안 진행 상황을 보고해야 하며, 다른 회의에서도 같은 업데이트를 반복해야 할 수 있음. 긴급 상황이 발생할 경우 이에 대응해야 하지만, 이러한 상황이 시간 추정에 영향을 미쳐서는 안 됨.
     * 두 번째 댓글 요약:

     집을 짓는 일은 종종 까다로운 건축주나 맛없는 디자인을 원하는 사람들과의 대화를 포함하며, 이는 소프트웨어 엔지니어의 일부임. 때로는 설계도가 잘못되거나 부정확할 수 있지만, 그럼에도 불구하고 사람들은 집을 지음.
     * 세 번째 댓글 요약:

     프로그래머들이 다른 분야를 어떻게 운영하는지 안다고 생각하는 '칵테일 파티 아이디어'의 완벽한 예시임. 건축가도 프로그래머에 대해 비슷한 가정과 오해를 가진 글을 쓸 수 있음.
     * 네 번째 댓글 요약:

     건축가에게 실제 크기의 모형을 미리 만들어 기능을 확인하게 하고, 만족하지 않으면 처음부터 다시 만들어야 함. 한 번 만들어본 경험이 있으니 변경 사항을 포함하여 다시 만드는 것은 어렵지 않을 것임.
     * 다섯 번째 댓글 요약:

     건설과 소프트웨어 엔지니어링은 전혀 다른 분야임. 건설에는 다양한 역할과 책임이 있는 반면, 소프트웨어 엔지니어링은 제품 관리자, 디자이너, 소프트웨어 엔지니어, 감사자 등이 있음. 두 분야는 비교할 수 없음.
     * 여섯 번째 댓글 요약:

     이전에 다리 건설 팀에 관한 버전을 선호함. 작업 시간을 '포인트'로 표현하라는 요구와 소프트웨어 산업에 대한 비판으로 읽힘. IT 종사자들이 비현실적인 요구를 받아들이는 것이 일반적이지만, 고객들에게 이러한 현실을 이해시키는 것이 중요함.
     * 일곱 번째 댓글 요약:

     집에 들어오는 사람의 프라이버시를 엄격히 보호하면서도, 통신은 원활하게 해야 함. 또한, 화재, 신체적 위험, 다른 사람들로부터 안전을 보장해야 하지만, 추가 비용이나 사용 제한 없이 이루어져야 함.
     * 여덟 번째 댓글 요약:

     프로그래밍이 건설과 비슷하다고 생각하는 것은 잘못됨. 새로운 제품을 만드는 것은 제품 디자인 단계와 제조 단계로 구성됨. 건축가와 소프트웨어 엔지니어 모두 제품 디자인 단계에 속함. 소프트웨어 엔지니어링은 디자인의 일부이며, 최종 디자인에 따라 제조하는 것이 아님.
     * 아홉 번째 댓글 요약:

     대부분의 직업은 사람들의 요구를 듣는 것임. 사람들은 원하는 것을 정확히 모르지만, 그들의 문제에 대해 들어주고 최선을 다해 도와주길 원함.
"
"https://news.hada.io/topic?id=13523","일년에 두 번의 직업 상실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             일년에 두 번의 직업 상실

한 해에 두 번의 직업을 잃는 방법

     * 2022년은 스트레스가 많은 해였음. 주택 시장이 미친 듯이 변동하면서 가족은 집을 사려다 실패함.
     * 2022년 2월 24일, 러시아 군대가 내 고향인 우크라이나를 침공함. 친구와 친척들은 집과 일자리, 미래에 대한 안정을 잃음.
     * 그 해 11월 30일, 내게 가장 큰 충격이 있었음. Elastic에서 13% 인원 감축을 발표하며 나도 해고 대상에 포함되었다는 이메일을 받음.

Elastic

     * Elastic에서 해고되었지만, 12월 한 달간 급여와 혜택을 유지하고, 14주간의 퇴직금과 6개월간의 건강보험을 제공받음.
     * 집 구매 계획을 연기하고 새로운 일자리를 찾기 시작함. 저축금을 사용하고 싶지 않았고, 가족의 의료보험을 제공하는 것도 나의 책임이었음.
     * 이전 동료들과의 연결을 통해, Parse.ly에서 함께 일했던 동료가 Coiled라는 데이터 엔지니어링 스타트업에 취직했고, 나도 그곳에 지원하여 백엔드 엔지니어로 2023년 1월에 새로운 직장을 시작함.

Coiled

     * Coiled에서 많은 것을 배웠지만, Elastic과는 매우 달랐음. Coiled은 작은 스타트업으로 방향이 자주 바뀌고 명확하지 않았음.
     * Elastic에서 해고된 충격으로 자신감을 잃었고, 낮은 프로필을 유지하며 열심히 일하기로 결정함.
     * 2023년 7월, 매니저가 정기적인 1:1 회의에서 해고 소식을 전함. Coiled에서는 6주간의 퇴직금을 제공받음.

질병

     * 새로운 일자리를 찾는 동안, 수술이 필요한 상황이 발생함. Coiled의 의료보험은 8월까지만 유효했고, 그 기간 내에 수술을 받기 위해 노력함.
     * 폐 X-레이 검사에서 3cm 크기의 종괴가 발견되어 추가 검사가 필요하다는 소식을 받음.
     * 10일 후 CT 검사 결과, 종괴는 흉터 조직으로, 과거 폐렴의 결과였음. 예정된 수술을 성공적으로 마치고 회복함.

침묵

     * 2022년과 2023년의 경험으로 자신감이 크게 흔들렸고, 글쓰기나 대중 앞에서 말하는 것을 멈춤.
     * 이는 영웅의 이야기가 아니라, 불완전함에 대한 이야기임. 삶을 헤쳐나가는 과정에서의 실수와 좌절을 받아들임.
     * 여러 친구들이 조언, 추천, 지지의 말로 도움을 줌에 감사함.
     * 우크라이나 전쟁은 여전히 진행 중이고, 가족은 여전히 집을 소유하지 못했지만, 결국 새로운 일자리를 찾아 팀과 함께 일하며 다시 숨을 쉬기 시작함.

    GN⁺의 의견

     * 이 글은 개인적인 실패와 재난을 극복하는 과정을 통해 중요한 삶의 교훈을 전달함. 직업적 정체성의 상실과 건강 문제를 겪으면서도 결국 새로운 시작을 하는 모습은 많은 이들에게 영감을 줄 수 있음.
     * 글에서는 직업과 건강이라는 두 가지 중요한 측면에서의 위기를 경험하고, 그 과정에서 자신과 가족에 대한 사랑과 책임감을 재확인하는 과정을 보여줌.
     * 이야기는 개인의 취약성과 불확실성을 받아들이는 것이 어떻게 우리를 더 강하고 연대감을 느끼게 하는지를 보여주며, 이는 모든 사람들이 어려운 시기를 겪을 때 큰 위안과 교훈이 될 수 있음.

        Hacker News 의견

     * 미국에서는 최근 직장에 대한 태도가 변화하고 있음을 느낌.
          + 과거에는 일이 열정이자 정체성의 일부였으나, 이제는 회사가 직원을 얼마나 소중히 여기지 않는지 깨달은 후, 일에 최소한의 시간만 할애하고자 함.
          + 업무 시간 외에는 필요한 경우에만 응답하며, 기술계에서도 한발 물러나 필요한 교육에만 집중함.
          + 개발자로서의 능력보다는 면접을 통과하는 것이 더 중요해진 현실에 대해 언급함.
     * 영국에서는 직장과 건강보험이 연계되어 있지 않아 감사함을 느낌.
          + NHS가 문제를 겪고 있음에도 불구하고, 직장을 잃을 때 건강 관리에 대한 스트레스를 경험하지 않아야 한다는 점을 강조함.
     * 해고와 같은 사건들은 대부분 우연이며, 좋은 엔지니어의 성과를 반영하지 않음.
          + 재고용도 우연한 사건이며, 면접에서 떨어지는 것은 때때로 면접을 진행하는 사람들의 문제일 수 있음.
          + 특정 팀이나 지역 출신의 사람들을 선호하는 편견이나 차별이 존재할 수 있음을 지적함.
     * 인생의 중대한 사건을 겪으면 진정으로 중요한 것이 무엇인지 깨닫게 됨.
          + 죽음의 문턱에서 회사를 위해 더 많은 시간을 보냈어야 한다는 후회보다는 사랑하는 사람들과의 관계를 소중히 여기게 됨.
          + 인간으로서의 가치와 경제적 가치를 혼동하지 말아야 함을 강조함.
     * 인생에서 가장 중요한 것은 사랑하는 사람들임을 깨닫게 되는 순간에 대한 감정적인 공감을 표현함.
          + 이러한 생각이 ""인간의 존재 의미""라는 책을 떠올리게 함.
     * Parse.ly에서 함께 일했던 Irina라는 뛰어난 엔지니어에 대한 칭찬을 함.
     * 일에 대한 중요성을 상대화하는 마음가짐을 유지하기 어려움을 인정함.
          + 건강 문제를 겪고 나서 일의 사소한 문제들이 중요하지 않게 느껴졌으나, 건강이 회복된 후 다시 일상의 스트레스에 사로잡힘을 경험함.
     * 개인적인 문제가 발생했을 때 일의 중요성이 상대적으로 떨어지는 것에 대한 긍정적인 시각을 표현함.
          + 회사가 직원을 어떻게 대하는지에 대한 비판적인 관점을 제시하며, 회사에 대한 충성심을 갖기보다는 개인의 이익을 우선시하는 태도를 취할 것을 권장함.
     * 직원과 고용주 사이의 관계가 순수한 비즈니스 관계로 인식되기 시작함을 언급함.
          + 해고는 자존감에 영향을 줄 수 있으며, 회사의 이익을 위해 개인의 시간을 희생하는 것에 대한 의문을 제기함.
          + 충성심의 환상이 깨지고 있으며, 이것이 긍정적인 변화라고 봄.
          + 회사의 결정이나 건강에 대한 개인의 책임을 강조하며, 자신의 일에 충실할 것을 권장함.
     * 직업적 정체성을 만들어내는 현대 경제 운동에 대한 비판적인 시각을 제시함.
          + 반노동 운동을 시작해야 한다는 강한 믿음을 표현함.
"
"https://news.hada.io/topic?id=13485","Bluesky, 셀프호스팅 사용자를 위한 데이터 연합 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Bluesky, 셀프호스팅 사용자를 위한 데이터 연합 발표

Bluesky: 개방형 소셜 웹

     * Bluesky 네트워크가 연합(federation)을 통해 개방되어 사용자가 자신의 데이터를 호스팅할 수 있게 됨
     * 기존 소셜 미디어는 회사가 데이터를 저장하지만, Bluesky는 사용자가 데이터를 직접 관리할 수 있는 선택권을 제공함
     * 사용자는 데이터를 Bluesky에 저장하거나 다른 회사에 맡기거나 직접 저장할 수 있으며, 언제든지 이를 변경할 수 있음
     * 이제 연합을 통해 서비스 간 상호 연결이 가능해져 다양한 앱과 경험을 웹처럼 자유롭게 이동할 수 있음
     * 오늘 발표된 연합 버전은 자가 호스팅을 위한 것이며, 초기 단계 후에는 더 큰 서버를 운영하려는 사용자를 위해 개방될 예정임
     * 개발자 블로그에서 더 기술적인 개요와 참여 방법을 확인 가능

자주 묻는 질문들

     * Bluesky에서 자신의 서버를 운영하지 않아도 기존 사용 경험에 변화가 없음
     * 연합을 통해 사용자가 소셜 미디어에 대한 통제권을 되찾고, 소셜 미디어가 공공재로서 개방되고 신뢰할 수 있는 인터넷처럼 운영되어야 한다는 비전을 추구함
     * Bluesky가 사라져도 데이터가 다양한 사이트에 호스팅되어 있으면 네트워크를 재구축할 수 있음

Bluesky와 Mastodon의 차이점

     * Bluesky는 서버 선택이 본인이 보는 콘텐츠에 영향을 주지 않으며, 다양한 서버에서 게시물을 모아 보여줌
     * Mastodon과 달리 Bluesky는 글로벌 대화에 초점을 맞추고, 모더레이션과 피드가 서버에 구속되지 않으며, 계정 이동성을 제공함
     * 사용자는 자신의 서버를 쉽게 이동할 수 있으며, 이는 사용자의 아이덴티티나 데이터에 영향을 주지 않음

자가 호스팅 및 네트워크 참여 방법

     * 현재는 기술적 지식이 필요하지만, 시간이 지남에 따라 서버 호스팅이 더 쉬워질 예정임
     * 개발자 블로그, Github의 PDS 저장소, PDS 관리자 Discord를 통해 자세한 정보를 얻을 수 있음

GN⁺의 의견

     * Bluesky는 사용자가 자신의 데이터를 통제하고 소셜 미디어의 미래를 공공재로 만들고자 하는 혁신적인 접근을 제공함
     * 이러한 개방형 소셜 네트워크는 사용자에게 더 많은 선택권과 자유를 부여하며, 기존 소셜 미디어 플랫폼의 중앙집중식 통제에서 벗어날 수 있는 기회를 제공함
     * Bluesky의 연합 모델은 인터넷의 개방성과 유사하며, 이는 사용자와 개발자 모두에게 더 나은 공공 대화의 기반을 마련할 수 있는 중요한 발전임

        Hacker News 의견

     * Bluesky 엔지니어링 팀은 자체 PDS 호스트를 운영하려는 사람들을 돕기 위해 기술적인 세부사항과 설치 프로그램을 GitHub 리포지토리에 제공하고, 문제가 발생할 경우 Discord를 통해 도움을 제공하고 있음을 밝힘.

     Bluesky 엔지니어링 팀은 이 시점에 도달한 것에 대해 특별히 기쁘며, 자체 PDS 호스트를 운영하려는 사람들에게 질문에 답하고 도움을 제공할 준비가 되어 있음. 현재 자가 호스팅에는 문제가 없어야 하지만, 문제가 발생할 경우 도움을 줄 준비가 되어 있음. 기술적인 세부사항과 설치 프로그램은 GitHub 리포지토리에 있으며, Discord에서도 도움을 제공함.
     * 한 사용자는 Bluesky로 전환했다가 기술적이지 않은 친구들이 Twitter에 남아 있어 다시 Twitter로 돌아갔음을 언급하며, Bluesky가 Twitter와 경쟁하려는 시도는 긍정적이지만, 제품 자체가 Twitter만큼 좋지 않아 비디오 게시나 DM 기능이 없다는 점을 지적함. Bluesky가 사용자 기반을 확보하지 못하면 실패할 것이라고 우려함.

     한 사용자는 Bluesky로 전환했다가 Twitter로 돌아간 경험을 공유하며, Bluesky가 Twitter와 경쟁하는 것은 긍정적이지만, 기술적으로 능숙하지 않은 친구들이 Twitter에 남아 있어 결국 그들이 있는 곳으로 돌아갔음을 설명함. Bluesky가 Twitter보다 나은 제품이 아니라고 생각하며, Bluesky가 대중적인 매력과 커뮤니티 구축에 더 집중해야 한다고 주장함. 해커 뉴스 커뮤니티 외부의 사람들에게는 이번 마일스톤이 의미가 없다고 생각하며, 사용자 기반이 없으면 Bluesky가 실패할 것이라고 우려함.
     * 다른 사용자는 Bluesky가 Mastodon에 대한 비판을 해결했다고 생각하지만, 특히 모더레이션 계층에 대한 자세한 정보를 알고 싶어함.

     한 사용자는 Bluesky가 Mastodon에 대한 비판을 잘 해결했다고 생각하지만, 모더레이션 계층에 대해 더 자세히 알고 싶어함.
     * 또 다른 사용자는 Bluesky가 성공한 후에 연합 기능을 종료할지 궁금해하며, Google Chat이 XMPP 연합을 종료한 것과 비교함.

     한 사용자는 Bluesky가 사용자 기반을 확보한 후 연합 기능을 종료할지 궁금해하며, Google Chat이 XMPP 연합을 종료한 사례를 언급함.
     * 한 사용자는 Bluesky의 출시에 대해 매우 기쁘며, 팀이 성공할 것이라고 믿었지만, 일부는 정당한 의심을 가졌다고 언급함. 이 사용자는 아직 자신의 PDS를 운영할지 확신하지 못함.

     한 사용자는 Bluesky의 출시에 대해 기쁘게 생각하며, 팀이 성공할 것이라고 믿었지만, 사람들 사이에는 정당한 의심과 부당한 의심이 있었다고 언급함. 이 사용자는 아직 자신의 PDS를 운영할지 결정하지 못했다고 함.
     * 다른 사용자는 Bluesky의 새로운 아이디어, 특히 Mastodon과 비교한 연합에 대한 다른 접근 방식을 좋아하며, Mastodon이 많은 면에서 부족하다고 생각함. 이 사용자는 Mastodon의 콘텐츠 발견, 검색 기능, 연합의 문제점, 인스턴스의 모더레이션 권한 등을 비판하며, Bluesky가 더 나은 설계를 가지고 있다고 언급함.

     한 사용자는 Bluesky의 새로운 아이디어, 특히 Mastodon과 비교한 연합에 대한 다른 접근 방식을 좋아함. Mastodon을 광범위하게 사용해본 결과, 콘텐츠 발견, 검색 기능, 연합의 문제점, 인스턴스의 모더레이션 권한 등 여러 면에서 부족함을 느낌. Mastodon이 그 기원과 예산에 비해 인상적인 성과를 거두었지만, 미래의 소셜 미디어가 아니라고 생각함. Bluesky가 더 나은 설계를 가지고 있으며, nomadic identities, 사용자의 자체 모더레이션 능력, 콘텐츠 보호 등에 대해 언급함.
     * 한 사용자는 Bluesky가 중앙 집중식 모더레이션 모델을 가지고 있어, 만약 누군가가 Bluesky를 구매하거나 영향력을 행사하려고 한다면 여전히 가능할 것이라고 지적함.

     한 사용자는 Bluesky가 상대적으로 중앙 집중식 모더레이션 모델을 가지고 있어, 만약 가상의 인물이 Bluesky를 구매하거나 영향력을 행사하려고 한다면 여전히 가능할 것이라고 지적함.
     * 다른 사용자는 Bluesky 웹사이트에서 '오래된 소셜'과의 비교는 많이 보이지만, 자신의 노드를 운영하거나 네트워크에 참여하려는 사람들에게는 Mastodon과 같은 프로젝트가 진정한 경쟁자일 것이라고 언급하며, 웹사이트에 Mastodon과의 비교가 없어 평가하기 어렵다고 지적함.

     한 사용자는 Bluesky 웹사이트에서 '오래된 소셜'과의 비교는 많이 보이지만, Mastodon과 같은 프로젝트가 진정한 경쟁자일 것이라고 언급하며, 웹사이트에 Mastodon과의 비교가 없어 상대적인 성숙도, 핵심 역량, 제한 사항, 위험을 평가하기 어렵다고 지적함.
     * 한 사용자는 Docker를 사용하여 fly.io에서 Bluesky를 설정했으며, GitHub에서 제안한 것보다 훨씬 적은 리소스를 사용하여 실행하고 있음을 공유함. 설정이 좀 더 간단할 수 있었을 것이라고 언급하며, Discord에서 자신의 설정을 공유했음을 언급함.

     한 사용자는 Docker를 사용하여 fly.io에서 Bluesky를 설정했으며, GitHub에서 제안한 것보다 적은 리소스를 사용하여 실행하고 있음을 공유함. 설정이 좀 더 간단할 수 있었다고 언급하며, Discord에서 자신의 설정을 공유했음을 언급함.
     * 마지막으로, 한 사용자는 각 PDS가 최대 10개의 계정을 호스팅하고 시간당 1500개, 하루에 1만 개의 이벤트로 제한되어 있다고 지적하며, 이것이 Bluesky가 경쟁을 제한하기 위한 것이라는 의심을 표함.

     한 사용자는 각 PDS가 최대 10개의 계정을 호스팅하고 시간당 1500개, 하루에 1만 개의 이벤트로 제한되어 있다고 지적하며, 이것이 Bluesky가 경쟁을 제한하기 위한 것이라는 의심을 표함.
"
"https://news.hada.io/topic?id=13499","바이스 웹사이트 폐쇄 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             바이스 웹사이트 폐쇄 예정

writing.exchange 소개

     * writing.exchange는 Mastodon을 기반으로 한 분산 소셜 네트워크의 일부임.
     * 시인, 작가 및 모든 종류의 작가를 위한 작고 의도적인 커뮤니티임.
     * Matt Baer(@matt)에 의해 관리되며, 현재 472명의 활성 사용자가 있음.

Vice 웹사이트 폐쇄 확인

     * Ernie Smith(@ernie)가 Vice 웹사이트의 폐쇄를 확인함.
     * 이 소식은 Will Sommer(@willsommer)를 통해 전달됨.

사용자들의 반응

     * Vice의 폐쇄 소식에 대해 다양한 사용자들이 놀라움과 안타까움을 표현함.
     * 일부는 비즈니스 전략에 대한 비판적인 의견을 제시함.
     * Vice가 편집 서비스를 임대하는 '스튜디오 모델'로 전환할 것이라는 정보가 공유됨.

Vice의 변화에 대한 의견

     * 사용자들은 Vice의 변화가 불가피한 것으로 보고, 이러한 변화가 회사에 어떤 영향을 미칠지에 대해 의견을 나눔.
     * 일부는 Vice가 더 이상 중요하지 않게 될 것이라고 언급함.

GN⁺의 의견

     * Vice 웹사이트의 폐쇄 소식은 디지털 미디어 산업의 변화와 어려움을 반영하는 사례로 볼 수 있음.
     * 분산 소셜 네트워크의 일부인 writing.exchange의 소개는 Mastodon과 같은 플랫폼의 성장과 중요성을 강조함.
     * 이 글은 소셜 미디어와 온라인 커뮤니티가 어떻게 정보를 공유하고 사용자들이 상호 작용하는지에 대한 흥미로운 인사이트를 제공함.

        Hacker News 의견

     *
          + 웹사이트를 온라인 아카이브 형태로 유지하지 않는 것은 말이 되지 않음
          + 웹사이트를 영구적으로 보존하는 것은 큰 비용이 들지 않으며, 광고 수익으로 충분히 비용을 회수할 수 있음.
          + 인터넷 아카이브에 웹사이트를 기부할 수 있는 방법이 있어야 하며, 이는 Wayback Machine보다 사용자 경험이 더 나은 온라인 아카이브를 제공할 것임.
     *
          + Vice가 소셜 미디어와 YouTube에서만 가치를 찾는다고 느끼는 것은 슬픔
          + 인터넷의 최고 부분인 잘 쓰여진 상세한 콘텐츠가 사라지고 있으며, 최악의 부분인 소셜 미디어(짧고, 질 낮은, 클릭을 유도하는, 도파민을 추구하는 콘텐츠)가 살아남아 번성하고 있음.
     *
          + 2014년 우크라이나 전쟁의 잔혹함을 보여준 '러시안 룰렛' 시리즈에 감사함
          + 일부 장면은 잊을 수 없음.
     *
          + Motherboard에 디지털 보존의 중요성에 대해 많은 콘텐츠를 작성한 필자의 발언
          + 좋은 웹사이트들이 갑자기 사라지는 것은 아이러니하며, 필자가 작성한 아카이브가 삭제되는 것은 더욱 그러함.
     *
          + Vice가 위험한 장소에서 디자이너 약물을 사용할 곳을 잃었음
          + Vice는 청소년과 성인 모두에게 흥미로운 이야기를 제공하는 멋진 매체였으나, 지원하지 않았기 때문에 폐쇄되는 것은 유감임.
     *
          + MBA가 회사를 망가뜨린 날부터 '일수'를 다시 세야 할 시간임
     *
          + Vice 팀에 보내는 전문:
          + 비즈니스 환경이 변함에 따라 전략을 재조정하고 장기적으로 더 경쟁력을 갖추기 위해 노력해야 함.
          + Vice는 독창적인 콘텐츠를 제작하지만, 기존 방식으로 디지털 콘텐츠를 배포하는 것은 더 이상 비용 효율적이지 않음.
          + 앞으로는 기존 미디어 회사와 파트너십을 맺어 디지털 콘텐츠를 배포하고, 스튜디오 모델로 전환할 것임.
          + Refinery 29는 독립적인 디지털 출판 사업으로 계속 운영될 것임.
          + 전략적 변화로 인해 직원 수를 줄이고 몇 백 개의 직위를 없앨 것임.
          + 재정 파트너들은 이 운영 모델에 투자하기로 동의했으며, 새로운 단계로 나아가면서 더 강하고 탄력적으로 나타날 것임.
     *
          + 지난 15년 동안 많은 것들이 저금리 현상(LIRPs)이었으며, 투자자들이 고정 수입 투자에서 적당한 수익을 얻을 수 있게 되면 그 순간부터 파멸됨
     *
          + 콘텐츠를 개인적으로 저장하고 싶다면 'archivebox.io'와 같은 도구 사용을 권장
          + 몇 년 동안 로컬 인스턴스를 운영하며 기술 기사를 다운로드하고 저장함. 필요할 때 검색하여 찾을 수 있음.
     *
          + Motherboard에 경의를 표함, 해킹과 사이버 범죄를 다루는 미디어에서 드문 탄탄한 단독 보도를 했었음.
"
"https://news.hada.io/topic?id=13456","SSD는 엄청나게 빨라졌지만, 클라우드는 제외임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       SSD는 엄청나게 빨라졌지만, 클라우드는 제외임

     * 최근 몇 년 동안 플래시 기반 SSD는 대부분의 저장 장치 용도에서 디스크를 대체
     * SSD는 여러 개의 독립적인 플래시 칩으로 구성되어 있으며, 이들은 병렬로 접근 가능
     * SSD의 처리량은 호스트와의 인터페이스 속도에 주로 의존
     * 지난 6년간 SATA에서 PCIe 3.0, PCIe 4.0, PCIe 5.0으로 빠르게 전환되며 SSD 처리량이 폭발적으로 증가
     * 또한 성능 향상뿐만 아니라 달러당 용량도 증가
     * 이러한 변화는 NVMe와 PCIe 같은 개방형 표준, 거대한 수요, 경쟁적인 공급업체 덕분
     * 현재 PCIe 5.0 데이터 센터 SSD는 최대 13 GB/s 읽기 처리량과 270만 이상의 랜덤 읽기 IOPS를 달성
     * 현대 서버는 약 100개의 PCIe 레인을 가지고 있어, 한 서버에 여러 개의 SSD를 전체 대역폭으로 사용할 수 있음

클라우드에서의 SSD 성능 정체

     * AWS EC2는 초기 NVMe SSD를 탑재한 i3 인스턴스를 2017년 초에 출시함
     * 당시 NVMe SSD는 비쌌고, 서버당 8개를 갖춘 것은 주목할 만한 일이었음
     * 그러나 7년이 지난 후에도 SSD당 2 GB/s의 성능에 머물러 있음
     * i3와 i3en 인스턴스는 여전히 IO/$와 SSD 용량/$ 면에서 EC2가 제공하는 최고의 옵션임
     * 클라우드 벤더가 제공하는 SSD와 최신 SSD 간의 성능 격차가 읽기 처리량, 쓰기 처리량, IOPS에서 거의 10배에 가까워짐
     * 클라우드에서의 이러한 정체는 다른 영역에서의 큰 진전과 대조적임
     * 예를 들어, EC2 네트워크 대역폭은 2017년부터 2023년까지 10 Gbit/s에서 200 Gbit/s로 폭발적으로 증가함
     * 클라우드 벤더들이 저장소 측면에서 발전하지 않은 이유는 여러 가지 추측이 있음
          + EC2가 의도적으로 쓰기 속도를 1 GB/s로 제한하여 장치 고장을 피할 수 있다는 이론
          + 빠른 저장소에 대한 수요가 없어 시스템을 최적화할 유인이 적다는 가능성
          + EC2가 빠르고 저렴한 NVMe 인스턴스 저장소를 출시하면 다른 저장 서비스(EBS)의 비용 구조를 방해할 수 있다는 이론
     * 작성자는 곧 10 GB/s SSD를 탑재한 클라우드 인스턴스를 볼 수 있기를 희망함

GN⁺의 의견

     * SSD 기술의 급속한 발전에도 불구하고, 클라우드 서비스 제공업체들이 이러한 변화를 따라잡지 못하는 것은 시장의 다양한 요구와 기술적 한계를 반영함
     * 클라우드 스토리지의 성능 정체는 비용 효율성과 서비스 품질에 대한 사용자의 기대와 상충할 수 있으며, 이는 클라우드 산업 내 경쟁력에 영향을 미칠 수 있음
     * 이 글은 클라우드 컴퓨팅 사용자와 제공업체 모두에게 중요한 인사이트를 제공하며, 더 빠른 스토리지 솔루션에 대한 수요와 기술적 진보의 필요성을 강조함

        Hacker News 의견

     * 클라우드의 기술적 문제에 대한 논의
          + 구글에서 클라우드의 근본적인 문제로 작업했음. 이 문제는 사람들의 기술 방향을 결정짓는 중요한 요소임.
          + 클라우드의 SSD는 네트워크를 통해 연결되어 있으며, 이는 필수적임. 하지만 네트워크가 너무 크고 느려서 로컬 SSD의 성능을 제공할 수 없음.
          + 하드 드라이브에서는 문제가 되지 않았지만, SSD의 경우 네트워크보다 월등히 빠르기 때문에 문제가 됨.
     * AWS Nitro SSD 아키텍처에 대한 설명
          + AWS 문서와 블로그는 Nitro SSD 아키텍처를 설명함. 이는 PCIe를 통해 시스템 메인보드에 물리적으로 연결되어 있지만, 고객 워크로드를 실행하는 시스템 메인보드와는 논리적으로 격리됨.
          + SSD 장치의 수명을 최대한 연장하기 위해 펌웨어는 '웨어 레벨링'이라는 과정을 담당함. 이 과정에는 일종의 가비지 컬렉션이 포함되어 있으며, 일반 SSD는 쓰기 작업이 많을 때 예측할 수 없는 시간에 느려질 수 있음. AWS는 데이터베이스 전문 지식을 활용하여 SSD 펌웨어에 매우 정교한, 전원 실패에 안전한 저널 기반 데이터베이스를 구축함.
     * 클라우드 인스턴스의 IOPS에 대한 경험담
          + 클라우드 인스턴스의 'provisioned IOPS' 수치가 매우 낮아서 놀람. 이는 많은 사람들, 특히 클라우드 인스턴스만 경험한 젊은이들이 하나 또는 두 개의 RU에 실제로 얼마나 많은 성능을 담을 수 있는지 잘 모르고 있음을 의미함.
          + NVMe 스토리지의 빠른 속도는 오늘날의 놀라운 기술의 일부임.
     * OCI에서 일하는 개인의 의견
          + OCI는 인스턴스에서 더 빠른 NVMe 드라이브를 제공함. E4 Dense 모델은 삼성 MZWLJ7T6HALA-00AU3를 탑재하여 순차적 읽기 7000 MB/s, 순차적 쓰기 3800 MB/s를 지원함.
          + AWS가 현재 더 빠른 NVMe를 제공하지 않는 이유는 구체적인 수요가 부족하기 때문일 가능성이 높음. 이는 추측이지만, 일반적으로 특정 수요가 충분하지 않으면 업그레이드는 생각보다 뒤로 밀릴 수 있음.
     * 클라우드에서 벗어나는 것에 대한 주장
          + 현대의 NVMe와 코어 수는 클라우드에서 벗어나는 강력한 근거를 제공함. 이러한 속도는 메모리에 가까워서 데이터가 디스크에 확실히 맞을 것이라는 점에서 복잡성을 줄임.
          + 강력한 서버 하나만으로도 충분한 캐싱/계산/서빙을 할 수 있으며, 이는 많은 워크로드를 단순화함.
     * 클라우드 최적화에 대한 비판
          + 대역폭이 문제가 아니라 IOPS가 문제임. 임의의 IO 벤치마크를 실행했을 때, SSD보다는 큰 스피닝 RAID 어레이에 가까운 랜덤 IOPs 행동을 보임.
          + 클라우드 최적화를 진지하게 받아들이기 어려운 이유 중 하나는 데이터베이스/등의 워크로드가 잘 최적화되지 않아 비용이 많이 들 수 있음.
     * AWS의 NVMe 인스턴스 타입에 대한 논의
          + i4i 및 im4gn과 같은 여러 NVMe 인스턴스 타입이 출시되었지만, 성능은 증가하지 않았음. i3 출시 이후 7년이 지났지만 여전히 SSD 당 2 GB/s에 머물러 있음.
          + AWS 마케팅은 다음과 같이 주장함:
               o 최대 800K 랜덤 쓰기 IOPS
               o 최대 100만 랜덤 읽기 IOPS
               o 최대 5600 MB/초의 순차적 쓰기
               o 최대 8000 MB/초의 순차적 읽기
     * 하이브리드 SSD 구성에 대한 개인적 선택
          + 2011년 X-25E 64GB와 2021년 PM897 3.7TB를 혼합하여 사용함으로써 가장 견고한 솔루션과 가장 큰 데이터베이스를 가장 낮은 전력으로 얻을 수 있음.
     * 클라우드 서비스의 성능 제한에 대한 추측
          + 클라우드 서비스가 낮은 성능을 유지하는 이유는 수요가 많지 않기 때문일 수 있으며, 이는 가상화 계층에서 '속임수'를 사용할 수 있게 함.
     * SSD 비용에 대한 고려
          + 가장 빠른 SSD는 MLC 기술을 사용하는 경향이 있으며, 이는 다른 기술에 비해 쓰기 수명이 훨씬 낮음.
          + 데이터 밀도를 높이는 것은 성능을 높이는 것을 용이하게 하지만, 메모리의 블록/셀 단위로 쓰기가 이루어지기 때문에 한 셀이 나빠지면 모든 셀이 실패할 수 있음.
          + 새로운 기술을 스택에 도입하고, 효과적인 비용으로 플릿을 업그레이드하는 것은 문제가 될 수 있음.
"
"https://news.hada.io/topic?id=13446","나의 생산성 앱은 끝없는 .txt 파일입니다 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    나의 생산성 앱은 끝없는 .txt 파일입니다 (2022)

Jeff Huang의 14년간의 할 일 목록 관리법

     * Jeff Huang은 대학에 입학하면서 조직화하는 법을 배워야 했음.
     * 다양한 할 일 목록, 작업 추적기, 생산성 앱을 시도했지만, 이들은 모두 서로 다른 시스템에 존재하여 사용하기 어려웠음.
     * 결국 단일 텍스트 파일로 모든 것을 추적하기 시작했고, 이 방법을 14년간 사용해왔음.

일정 관리를 위한 필수 도구: 캘린더

     * Huang은 온라인 캘린더를 사용하여 모든 일정을 관리함.
     * 고정된 시간이 없는 일정도 캘린더에 포함시켜 미래의 계획과 일정을 한데 모아둠.

매일의 할 일 목록 만들기

     * 매일 밤, 다음 날의 캘린더 항목을 텍스트 파일 끝에 추가하여 일일 할 일 목록을 작성함.
     * 이 목록에는 예정된 작업, 심부름, 업무 항목 등이 포함됨.
     * 할 일 목록을 통해 하루의 적절한 작업량을 판단할 수 있음.

기록으로서의 할 일 목록

     * 일일 할 일 목록은 노트를 취하는 곳이기도 해서, 할 일 목록이 완료된 일 목록으로 변함.
     * 현재 파일은 9년 전 현재 직장을 시작할 때 만들어졌으며, 연구 노트와 회의록으로 사용됨.
     * 한 파일에 51,690개의 수기 라인이 있으며, 교수로서 한 모든 일과 만난 모든 사람, 논의한 내용, 아이디어 등을 기록함.

단축키와 기능

     * 일관된 작성 스타일과 몇 가지 단축어를 사용하여 쉽게 검색할 수 있음.
     * 텍스트 파일은 매우 유연하여, 하루 동안 한 일과 남은 일을 빠르게 확인할 수 있음.
     * 완료된 작업은 이동하고, 남은 작업은 다시 캘린더로 옮겨짐.

이메일 관리

     * 이메일은 작업 흐름의 일부이며, 간단한 플래그 시스템으로 충분함.
     * 이메일을 적절한 시간에 플래그하고, 하루가 끝날 때 오렌지와 노란색 플래그를 검토함.

일상적인 루틴

     * 전날 밤에 작성한 일일 할 일 목록을 확인하여 그날 할 일을 파악함.
     * 자유 시간에는 목록의 떠다니는 작업과 빨간색 플래그 이메일을 처리함.
     * 하루가 끝날 때 오렌지/노란색 이메일을 검토하고 다음 날의 캘린더 항목을 텍스트 파일에 복사함.

GN⁺의 의견

     * Jeff Huang의 텍스트 파일 기반 할 일 목록 관리법은 간단하면서도 효과적인 생산성 도구임.
     * 이 방법은 일정 관리, 기록 유지, 그리고 미래 계획을 한 곳에서 관리할 수 있게 해줌.
     * 이 시스템은 개인의 생산성을 높이는 데 도움이 될 수 있으며, 복잡한 앱이나 도구에 의존하지 않고도 효율적으로 작업을 관리할 수 있는 방법을 제공함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 1985년 첫 직장에서 TODO.TXT 파일을 시작함.
          + 39년간 계속 사용하며, 현재 46개의 .txt 파일로 관리 중.
          + vim을 사용하여 파일 간 이동이 용이함.
     * 두 번째 댓글 요약:
          + 매일 파일을 복사하여 이전 날의 할 일을 정리하는 시스템 사용.
          + 시간이 지나면서 시스템이 발전함.
          + git을 사용하여 30분마다 자동 커밋함.
     * 세 번째 댓글 요약:
          + Obsidian 일일 노트와 주간 노트를 사용하여 계획함.
          + 다음 주 큰 업무를 금요일 오후에 계획함.
          + 3/3/3 기술과 목록 개념을 사용하여 조직화함.
     * 네 번째 댓글 요약:
          + .txt 파일과 Vim을 사용하다가 Mac Notes 앱으로 전환함.
          + LaTeX로 이력서를 만들다가 Google Docs로 간소화함.
          + 기술적 미니멀리즘에 대한 불필요한 집착을 인식함.
     * 다섯 번째 댓글 요약:
          + 마크다운 형식의 플레인텍스트 노트와 폴더/파일 조직을 사용함.
          + 개인 GitHub 저장소에 푸시하여 어디서든 노트에 접근 가능함.
     * 여섯 번째 댓글 요약:
          + todo.txt 스타일을 사용하며, today 스크립트로 최신 파일을 열어 작업함.
          + report 스크립트로 추가/제거된 내용을 확인함.
     * 일곱 번째 댓글 요약:
          + 매일 저녁 다음 날 일정을 텍스트 파일에 추가하여 계획함.
          + 전날 계획한 일정을 캘린더에 예약함.
     * 여덟 번째 댓글 요약:
          + Todoist를 사용하여 개별적인 작업을 추적함.
          + 반복적인 작업을 관리하는 데 유용함.
          + 프리미엄 기능 없이도 기본 앱이 충분히 좋음.
     * 아홉 번째 댓글 요약:
          + Raycast 부동 노트 기능을 사용하여 모든 내용을 단일 노트에 기록함.
          + 다른 도구들보다 효과적임을 발견함.
     * 열 번째 댓글 요약:
          + 전날 저녁에 다음 날 계획을 세우는 것이 가장 중요한 생산성 향상 방법임.
"
"https://news.hada.io/topic?id=13478","스타트업 기업문화를 위한 성공가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          스타트업 기업문화를 위한 성공가이드

   ‘Why’에서 출발하는 사이먼 세넥의 ‘골든 서클’ 방법론
"
"https://news.hada.io/topic?id=13427","메타에서 대규모 언어 모델을 활용한 자동화된 단위 테스트 개선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   메타에서 대규모 언어 모델을 활용한 자동화된 단위 테스트 개선

메타의 자동화된 단위 테스트 개선 도구: TestGen-LLM

     * 메타에서 개발한 TestGen-LLM 도구는 대규모 언어 모델(LLMs)을 사용하여 기존의 인간이 작성한 테스트를 자동으로 개선함.
     * TestGen-LLM이 생성한 테스트 클래스는 원래 테스트 스위트에 비해 측정 가능한 개선을 보장하는 일련의 필터를 성공적으로 통과하여 LLM 환각 문제를 해결함.
     * 메타의 Instagram과 Facebook 플랫폼을 위한 테스트 대회(test-a-thons)에서 TestGen-LLM의 배포를 설명함.

TestGen-LLM의 성능 평가

     * Instagram의 Reels와 Stories 제품에 대한 평가에서 TestGen-LLM의 테스트 케이스 중 75%가 정확하게 빌드되었고, 57%가 신뢰성 있게 통과했으며, 25%가 커버리지를 증가시킴.
     * 메타의 Instagram과 Facebook 테스트 대회에서 TestGen-LLM은 적용된 모든 클래스의 11.5%를 개선했으며, 메타 소프트웨어 엔지니어들이 제작 배포를 위해 73%의 권장 사항을 수락함.
     * 이는 LLM이 생성한 코드의 산업 규모 배포에 대한 첫 번째 보고서이며, 코드 개선에 대한 이러한 보증을 받은 것임.

GN⁺의 의견

     * TestGen-LLM은 소프트웨어 테스트의 자동화와 품질 향상에 혁신을 가져올 수 있는 도구로, 대규모 언어 모델을 활용하여 기존 테스트를 개선하는 데 성공함.
     * 이 도구는 실제 산업 환경에서 테스트 커버리지를 증가시키고, 신뢰성 있는 테스트 케이스를 생성하여 소프트웨어 엔지니어링 커뮤니티에 중요한 기여를 함.
     * 메타의 테스트 대회에서의 성공적인 적용 사례는 TestGen-LLM이 실제 제품 개발에 통합될 수 있는 가능성을 보여주며, 이는 소프트웨어 개발의 효율성과 안정성을 향상시킬 수 있는 중요한 발전임.

        Hacker News 의견

     * 한 대형 보험회사에서 관리자들은 전체 코드베이스에 대해 80%의 테스트 커버리지 목표를 설정했음. 이에 개발자들은 목표 달성을 위해 자바 DTO의 게터와 세터에 대한 단순한 유닛 테스트를 작성하기 시작했음. 젊은 개발자로서, 이 경험은 KPI에만 집중하면 의도된 목표와 일치하지 않는 행동을 유도할 수 있다는 것을 깨닫게 해줌. 몇 가지 잘 고안된 E2E 테스트 시나리오가 소프트웨어 품질에 더 좋은 영향을 미쳤을 것임.
     * LLM 생성 테스트의 문제점은 버그가 있는 동작을 ""승인""할 가능성이 높다는 것임. 코드베이스의 테스트 커버리지가 낮은 경우 특히 그럴 가능성이 있음. 수작업으로 새 테스트를 작성할 때는 시스템이 멍청한 것인지 테스트가 잘못된 것인지 판단할 수 있는 사람이 있음. 최소한 이러한 테스트들은 특별한 테스트 폴더에 분리되어 적절한 수준의 의심으로 다뤄져야 함.
     * PDF를 읽어보면 이것은 단지 반복적으로 통과하는 즉, 변덕스럽지 않은 테스트를 생성하는 것으로 보임. 주 목적은 기존 코드의 동작을 고정시키는 회귀 테스트 스위트를 만드는 것임. 이것은 개발자가 작성한 테스트를 대체하는 것이 아니며, 개발자가 작성한 테스트는 기능 요구 사항을 알고 있다고 기대함.
     * 약 20년 전에 근무했던 회사에서는 AgitarOne을 시험해봤음. 이는 자바 코드에 대한 테스트 케이스를 자동으로 생성하여 그 동작을 탐색하는 데 도움을 주겠다고 약속했음. 하지만 Agitar는 또한 자동으로 통과하는 테스트를 생성할 수 있었고, 이를 회귀 스위트로 사용할 수 있었음. 개인적으로는 이를 좋아하지 않았음. 관리자들은 테스트 커버리지가 증가했으니 품질도 향상되었다고 생각했음. LLM 접근 방식이 Agitar에 비해 얼마나 더 나은지 궁금함.
     * 테스트 작성은 일반적으로 코드 품질을 판단하는 뛰어난 방법임. 테스트가 복잡하거나 커버리지 달성이 어렵다면, 테스트 대상 코드에 개선이 필요할 가능성이 높음.
     * unlogged.io에서는 한동안 자동으로 junit 테스트를 생성하는 데 주력했음. 몇 가지 이유로 인해 이 접근법은 성공하지 못했음: 1) 개발자들이 유지 관리하고 싶어하지 않는 많은 생성된 테스트 코드, 2) 실제 세계 시나리오를 시뮬레이션하지 않는 생성된 테스트, 3) 허영 지표로서의 코드 커버리지. 현재는 모든 고유한 프로덕션 시나리오를 시뮬레이션하는 노코드 리플레이 테스트를 제공하는 데 집중하고 있음. 참고로 unlogged.io의 창립자임.
     * 반대로 접근하고 싶음. 수용 기준을 입력하고, 그것을 확인하는 테스트를 생성한 다음, 테스트를 통과하는 코드만 생성하게 하고 싶음. Copilot을 사용하면 때때로 제한적인 방식으로 이에 가까워질 수 있지만, 왜 이 방식으로 집중하는 사람이 없는 것 같은지 의문임.
     * TestGen-LLM은 이상한 창조물임. 리팩토링이나 재작성의 첫 단계로 사용될 수 있다고 생각하지만, 논문에서 코드 커버리지에 대한 강조는 완전히 뇌가 깨진 것 같음. 조직이 이미 뇌가 깨져서 높은 커버리지를 요구한다면 좋을 수 있지만, TestGen-LLM은 프로젝트의 코드를 어떤 방식으로도 개선하지 않을 것이며, 실제 개선을 구현하는 데 관련된 마찰을 증가시킬 것임. 컴파일러 오류와 실패한 테스트에 의존하여 LLM 쓰레기를 걸러내는 TestGen-LLM은 통과할 수도 있고 통과하지 않을 수도 있는 엣지 케이스 테스트를 생성하는 것이 훨씬 유용할 것임. 논문에 생성된 테스트의 예가 없어서, 그것들이 내가 본 나머지 LLM 생성 코드와 같은 아마추어 같다고 의심함.
     * 미래에 거대한 자동 생성된 테스트 코퍼스를 유지하는 데 드는 비용이 얼마나 될지 궁금함. 케이스를 생성하는 것뿐만 아니라 업데이트하는 자동화된 방법도 제공해야 함.
     * 메타 직원들이 개발자를 위한 AI를 홍보하기 위해 12페이지짜리 논문을 발표한 것이 흥미롭다고 인정함. 심지어 산키 다이어그램까지 사용함. 아마 틀렸을 수도 있지만, 이런 식으로 발표된다면 재현할 수 있는 정보를 제공해야 하지 않을까? 메타가 학습할 수 있는 데이터가 필요함. 그래서 무언가를 공개했을 수도 있음.
     * Instagram의 Reels와 Stories 제품에 대한 평가에서 TestGen-LLM의 테스트 케이스 중 75%가 올바르게 구축되었고, 57%가 신뢰성 있게 통과했으며, 25%가 커버리지를 증가시켰음. 그 결과가 그다지 좋지 않은 것 같음?
"
"https://news.hada.io/topic?id=13442","리포지터리에서 시크릿 노출을 막는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         리포지터리에서 시크릿 노출을 막는 방법

     * GitHub, GitLab, Azure DevOps, Bitbucket과 같은 Git 호스팅 플랫폼에서 시크릿 노출을 막도록 지원하는 기능
     * GitHub:
          + 리포지터리에 시크릿을 푸시하는 걸 제한하고, 리포지터리에 있는 시크릿을 검사하는 기능을 제공
     * GitLab:
          + Git 리포지터리를 사전에 검사해 API 키, 비밀번호, 토큰 등 잠재 시크릿이 잘못 커밋되고 노출되기 전에 탐지
          + GitLab의 시크릿 검사 기능은 활성화되면 리포지터리에서 시크릿을 검사하는 job을 실행
          + 이는 Auto DevOps를 활성화하거나 .gitlab-ci.yml을 편집함으로써 구성할 수도 있음
     * 마이크로소프트 Azure:
          + Azure DevOps 리포지터리의 GitHub Advanced Security 라이선스에 따라 Azure DevOps 리포지터리에서 시크릿 검사 기능을 지원
          + 이는 의존성 스캐닝, 코드 스캐닝과 같은 기능과 함께 시크릿 검사 기능과 푸시 보호 기능을 제공
     * Bitbucket:
          + 리포지터리에서 시크릿을 검사하고 새로운 커밋 안에서 노출된 시크릿이 탐지될 때 알림을 트리거
          + 이메일 알림은 작성자, 커밋한 사람, 시크릿을 포함한 코드를 리포지터리에 푸시하거나 merge 한 개발자 등 시크릿의 커밋 기록에 포함된 모두에게 전송됨

   Secret 유출문제를 GeekNews에서도 볼 수 있다니 참 반갑습니다.
   https://cremit.io 서비스를 만들고있는 스타트업인데요.
   글 본문에 나와있는 도구들의 Integrations 영역이 DevSecOps 도구에만 치중되어 있다면,
   저희는 협업툴영역까지 확대하여 Secret / Credential 중심의 Security 운영을 지원하는 서비스입니다. :)

   옷, 나중에 Show GN으로 한 번 소개해주실 수 있으실까요? 관심있습니다 +_+

   저희가 곧 Public 오픈으로 전환 예정인데요!
   꼭 공유드릴 수 있도록 하겠습니다. :)

   흥미로운 서비스네요! 꼭 소개해주세요!

   안녕하세요! Show GN에 간략한 소개를 드렸습니다!
   https://news.hada.io/topic?id=13725
   관심에 감사드립니다!ㅎㅎ
"
"https://news.hada.io/topic?id=13495","2024년 자바스크립트 부피 팽창","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2024년 자바스크립트 부피 팽창

JavaScript의 부피 문제

     * 현대 프론트엔드 개발에 다소 문외한이었으며, 웹 페이지 크기가 수메가바이트에 이르는 웹 부피에 대한 기사를 기억함.
     * 평균 웹 페이지 크기가 3MB라면 JavaScript 번들은 대략 1MB 정도일 것이라는 인상을 받음.
     * 실제로 얼마나 되는지 확인하기 위해 실험을 진행함.

방법

     * macOS에서 Firefox 사용 (다른 브라우저에서도 동일할 것)
     * 익명 모드가 아닌 일반 모드 (앱 내부의 숫자를 보고 싶고, 실제 경험에 더 가까울 것이라고 생각함)
     * 모든 확장 프로그램 비활성화
     * JavaScript만 측정
     * 압축되지 않은 상태
     * 서비스 워커 활성화 (더 현실적인 상황을 위해)
     * 모든 캐싱 비활성화 (처음부터 로딩)

랜딩 페이지

     * 일반적인 약간의 상호작용이 있는 페이지 예: Wikipedia, 0.2MB
     * 약간 부풀어 오른 페이지 예: Linear, 3MB
     * 나쁜 랜딩 페이지 예: Zoom, 6MB; Vercel, 6MB; Gitlab, 13MB

주로 정적인 웹사이트

     * 정적인 텍스트 벽을 보여주는 것보다 간단할 수 없음.
     * Medium은 그저 이를 위해 3MB가 필요함.
     * Substack은 4MB, Quora는 4.5MB, Pinterest는 10MB, Patreon은 11MB가 필요함.

검색

     * 앱의 상호작용이 주로 검색으로 제한됨.
     * StackOverflow는 3.5MB, NPM은 4MB, Airbnb는 7MB, Booking.com은 12MB가 필요함.
     * Google은 단순한 텍스트 필드와 링크 목록을 보여주는 데 9MB가 필요함.

단일 상호작용 앱

     * Google Translate는 두 개의 텍스트 박스를 위해 2.5MB가 필요함.
     * ChatGPT는 하나의 텍스트 박스를 위해 7MB가 필요함.

비디오

     * Loom은 7MB, YouTube는 12MB가 필요함.
     * Pornhub는 성능에 신경을 쓰는 사이트로 1.4MB만 필요함.

오디오

     * SoundCloud와 Spotify 모두 12MB가 필요함.

이메일

     * Google Mail은 20MB가 필요함.
     * FastMail은 같은 기능을 제공하면서도 2MB만 필요함.

생산성

     * Todoist는 9MB, Dropbox는 10MB, 1Password는 13MB, Trello는 13.5MB가 필요함.
     * Discord는 채팅을 위해 21MB가 필요함.

문서 편집

     * Google Docs는 13.5MB, Notion은 16MB가 필요함.

소셜 네트워크

     * Twitter는 11MB, Facebook은 12MB, TikTok은 12.5MB, Instagram은 16MB, LinkedIn은 31MB가 필요함.

거대한 카테고리

     * Jira는 거의 50MB, Slack은 55MB가 필요함.
     * react.dev는 처음에는 2MB로 시작하지만 스크롤하면 무한정 커질 수 있음.

점점 빠르게 악화되는가?

     * 2015년에 평균 웹 페이지 크기는 Doom 1의 공유 버전(2.5MB)에 근접했음.
     * 2024년에는 Slack이 55MB를 차지하며, 이는 JavaScript만으로 원래 Quake 1의 크기와 같음.

10MB는 얼마나 큰가?

     * 10MB는 이제 그렇게 크거나 특별하게 느껴지지 않음.
     * 평균적으로 한 줄에 65자를 가정하면, 약 150,000줄의 코드를 각 웹사이트마다 전송하고 있음.
     * Google Maps는 현대 기준으로 비교적 겸손한 4.5MB임.

결론

     * 다운로드 크기만이 문제가 아님.
     * JavaScript는 브라우저가 파싱하고, 메모리에 유지하고, 실행해야 하는 것임.
     * 내용이 코드 크기를 초과해야 한다고 믿음.
     * Gitlab은 정적 랜딩 페이지를 표시하기 위해 13MB의 코드, 500K+ LoC의 JS가 필요함.

   GN⁺의 의견:
    1. 웹 개발의 현재 상태에 대한 현실적인 진단으로, 웹사이트의 JavaScript 크기가 사용자 경험과 성능에 미치는 영향을 이해하는 데 도움이 됨.
    2. 프론트엔드 개발자들에게 최적화의 중요성을 상기시키며, 필요 이상의 자원을 사용하지 않도록 주의를 환기시킴.
    3. 웹사이트의 성능과 관련하여 개발자 커뮤니티 내에서 논의를 촉진할 수 있는 흥미로운 데이터를 제공함.

        Hacker News 의견

     * 성인 웹사이트는 실제로 성능에 신경을 쓰는 사례로, Pornhub는 단 1.4MB의 데이터만 로드함. 이는 일부 기술 대기업들이 보여주는 성능에 비해 훨씬 우수함. Pornhub는 기본적인 UI/UX나 콘텐츠 전달에서 실수하는 경우가 거의 없음.
     * 뉴질랜드 시골 지역에서 로밍 서비스를 사용하며 웹 사용 경험이 매우 불편했음. Spotify의 오프라인 사용자 경험(UX)도 개선이 필요함.
     * 압축되지 않은 데이터를 왜 보고 있는지에 대한 의문 제기. 동적 앱인 Spotify와 Gmail은 페이지 로딩 후 빠른 탐색이 가능하다면 용서받을 수 있음. 일부 사이트들은 초기 로딩에 중점을 두어 사용자 경험을 저하시키고 있음.
     * 소프트웨어는 그것을 만든 조직을 반영함. 대부분의 데이터 전송은 실제 페이지 작동에 필요한 자바스크립트가 아닌 분석 및 제3자 스크립트임. 마케팅 팀이 이러한 사항에 대해 무지하거나 관심이 없음.
     * 웹 애플리케이션의 자바스크립트 파일 크기에 대한 분석이 누락되었음. 예를 들어 Google Translate는 단순한 상호작용 앱이 아니며, 많은 기능을 포함하고 있음에도 불구하고 2.5MB는 여전히 과도함.
     * Wordsandbuttons.online 웹사이트의 모든 페이지는 애니메이션과 상호작용에도 불구하고 64KB 미만임. 이는 제3자 의존성이 없는 정책 덕분임.
     * 자바스크립트의 과도한 사용뿐만 아니라 추적 스크립트의 양에 대해서도 논의할 필요가 있음.
     * 인기 있는 사이트들에서 로드하는 자바스크립트의 양을 비교함. 예를 들어, Pornhub는 YouTube보다 약 10배 적은 자바스크립트를 로드함.
     * 웹의 현재 상태는 매우 슬픔. 고속 인터넷 연결을 사용하는 사람들은 웹이 얼마나 느려졌는지 인지하지 못함. 광고/추적기 차단기를 사용하지 않는 것을 고려할 수 없음.
     * 복잡한 프레임워크와 추상화를 만들어 유지보수를 쉽게 하려고 하지만, 많은 개발자들이 자바스크립트 기초조차 모르고 있음. 웹 애플리케이션을 과도하게 공학화하고, 실제 언어를 숨기는 너무 많은 계층을 만듦. 자바스크립트 자체를 배우고 프레임워크보다는 순수 자바스크립트를 사용하면 자바스크립트 코드베이스를 크게 줄일 수 있음.
"
"https://news.hada.io/topic?id=13460","minbpe - LLM 토큰화에 사용하는 Byte Pair Encoding 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             minbpe - LLM 토큰화에 사용하는 Byte Pair Encoding 구현체

     * OpenAI를 그만둔 Andrej Karpathy가 새로 공개한 코드
     * LLM 토큰화에 일반적으로 사용되는 (Byte Level) 바이트 쌍 인코딩(BPE) 알고리듬을 위한 미니멀/클린 코드
          + Byte Level : UTF-8 인코딩된 문자열에 대해서 동작하기 때문
     * BPE는 GPT-2 논문과 OpenAI의 관련 GPT-2 코드 릴리스에 의해 LLM에 대중화되었음
     * 오늘날 모든 최신 LLM(예: GPT, Llama, Mistral)은 이 알고리듬을 사용하여 Tokenizer를 훈련함
     * Repo에는 2개의 토크나이저가 있음. 두개 다 3가지 주요 동작을 실행
          +
              1. 주어진 텍스트에 대해 Tokenizer의 어휘 및 병합 훈련
          +
              2. 텍스트에서 토큰으로 인코딩
          +
              3. 토큰에서 텍스트로 디코딩
     * Tokenizer 베이스 클래스 와 가장 간단한 구현체인 BasicTokenizer, 입력 문자열을 정규식으로 분할하는 RegexTokenizer
     * RegexTokenizer의 래퍼인 GPT4Tokenizer는 tiktoken 라이브러에서 GPT-4의 토큰화를 정확히 재현

   이와 관련해서 GPT Tokenizer 구축하기 영상도 올라왔습니다.
   GPT 토크나이저 구축하기 by Andrej Karpathy [동영상]
"
"https://news.hada.io/topic?id=13418","풀스택 웹앱을 하루만에 만들어주는 툴들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         풀스택 웹앱을 하루만에 만들어주는 툴들

   Rails의 철학을 담은 풀스택 JS 툴들
    1. Kirimase
    2. Wasp

   GPT를 활용한 풀스택 앱개발
   3. GPT Engineer
   4. GPT Pilot

   UI 생성 툴들
   5. v0.dev
   6. openv0
   7. screenshot-to-code
   8. Builder.io
"
"https://news.hada.io/topic?id=13451","제프 딘: 머신 러닝의 최신 동향 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        제프 딘: 머신 러닝의 최신 동향 [비디오]

   Jeff Dean(Google): 머신 러닝의 흥미로운 트렌드
    1. 기계 학습의 흥미로운 추세와 기대

     * 기계 학습은 최근 몇 년 동안 우리가 컴퓨터가 할 수 있는 것에 대한 기대를 크게 바꾸어 놨다.
     * 언어, 이미지, 자연어 처리 등 모든 분야에서 컴퓨터가 세상을 더 잘 인식하고 이해할 수 있는 능력을 가지게 되었다.
     * *컴퓨터가 *볼 수 있고 *감지할 수 있는 기술의 발전은 인간 활동의 거의 모든 분야에서 많은 기회를 열어놓았다.
     * 더 큰 규모의 컴퓨팅 자원, 특수화된 컴퓨터 등의 발전은 더 나은 결과를 제공하며, *새로운 가능성을 열어놓았다.
     * 우리는 더 효율적으로 *컴퓨터가 할 수 있는 일의 범위를 좁히면서 고효율로 구동할 수 있는 더 다양한 형태의 하드웨어가 필요하다.

    2. ️음성인식, 번역, 이미지 분석 기술 발전 및 예측 정확도 향상

     * 음성인식 기술은 오디오 파형을 5초 동안의 의미있는 말로 변환해주는 것이며 이에 대한 발전이 크다.
     * 번역 기술은 한 언어에서 다른 언어로의 번역이 컴퓨터에게 큰 도움이 되는 기능으로 발전하고 있다.
     * 이미지 분석 기술은 레이블 명칭뿐 아니라 장면을 설명하는 짧은 문장으로 변환되는 등 컴퓨터 비전 분야에서 큰 발전을 이루었다.
     * 또한, 이전 몇 년 동안 이러한 기술들을 반대로 활용하는 것도 가능해졌다.
     * 10년 동안 사람의 정확도보다도 뛰어난 성능 향상이 이루어진 것이 신기하다.

    3. AI 모델의 품질을 향상시키기 위해 하드웨어 스케일링의 중요성

     * 음성 인식의 정확도를 측정하는 대표적인 벤치마크인 'Word Error Rate'는 기존의 13.25%에서 2.5%까지 크게 개선되었다.
     * 이로 인해 사용성이 크게 향상되어 이제는 이메일을 따라쓰거나 딕테이션을 할 수 있을 정도로 신뢰할 수 있게 되었다.
     * 특히 하드웨어의 스케일업은 모델 품질을 향상시키는데 도움이 되며, 이를 위해 머신 러닝에 최적화된 하드웨어를 필요로 한다.
     * 신경망(neural network) 모델에는 감소된 정밀도가 사용되어도 문제가 없다는 특징이 있고, 이를 통해 더 효율적인 모델 학습이 가능하다.
     * 또한, 모델 학습에 사용되는 알고리즘들은 선형 대수 연산의 다양한 조합으로 이루어져 있어, 감소된 정밀도의 선형 대수 연산을 효율적으로 처리할 수 있는 컴퓨터가 필요하다.

    4. 컴퓨터 네트워크 발전과 언어 모델에 대한 열정

     * 첫 번째 세대에는 간단하지만 고대역폭 네트워크였다. 각 칩은 2D 그리드로 연결되어 있었고, 16x6 그리드에 4개의 이웃 칩과 전선으로 연결되었다.
     * 이는 네트워크에서 라우팅을 하지 않아도 되고, 칩 사이를 짧은 거리로 연결하므로 고속 대역폭, 저렴한 연결이 가능했다.
     * 다음 세대에서는 8개 랙에 1024개 칩으로 확장되었고, 다음 세대에서는 64개의 랙에 각각 64개 칩을 사용했다.
     * 특히 최근에는 V5 시리즈로 나온데, 나눔 인퍼런스용 256개 칩을 사용하는 V5P 모델은 각 칩당 더 많은 메모리, 높은 대역폭, 그리고 메모리 대역폭을 제공한다.
     * 이 모델은 16비트 부동소수점 성능으로 칩 당 거의 반 페타플롭스의 성능을 제공하며, XOR 플롭스로는 칩 당 약 9,000개의 칩으로 계산할 수 있다.
     * 컴퓨터가 할 수 있는 일 중에서 가장 변화가 크게 일어나고 있는 분야 중 하나는 언어다. 이미지와 음성 인식에 대한 발전 이야기를 나눴는데, 사실 언어 모델에 대한 흥미는 NN 네트워크 이전부터 있었다. 그래서 우리는 Google 번역팀과 협력하여 언어 모델에 대한 연구를 진행하였다.

    5. ️ 대량의 데이터와 간단한 기술로 고품질 번역 시스템을 구축

     * 과학 대회를 위해 개발된 고품질 번역 시스템을 진짜 실무에 사용하기 위해 노력함
     * 2조 토큰에서 5단어 시퀀스가 얼마나 자주 나오는지 통계를 내어 3000억 개의 고유한 5-gram을 메모리에 저장하는 시스템 구축
     * 없는 데이터를 찾을 때는 그 이전의 4-gram, 3-gram 등을 참고하는 새로운 알고리즘 'stupid backoff' 개발
     * 단순한 기법이 대량의 데이터와 결합되면 효과적인 결과를 얻을 수 있다는 교훈을 얻음

    6. ️단어를 고차원 벡터로 표현하여 유사한 맥락에 있는 단어들을 가깝게, 다른 맥락에 있는 단어들을 멀게 함

     * 단어를 이산적으로 표현하는 대신, 고차원 벡터로 표현하여 유사한 맥락에 있는 단어들을 가깝게 하고 다른 맥락에 있는 단어들을 멀게 함.
     * 수많은 데이터를 사용하여 트레이닝 프로세스를 거쳐 유사한 맥락에서 출현하는 단어들을 가깝게 하고 다른 맥락에서 출현하는 단어들을 멀게 하여 공간에서 유사한 단어들을 같이 묶어냄.
     * 분산 표현은 단어를 대표하는 100차원 벡터 안에 많은 정보를 인코딩하고, 이러한 방법으로 언어 번역 모델인 '시퀀스 투 시퀀스 러닝'이 개발되었음.
     * '시퀀스 투 시퀀스 러닝'은 신경망을 사용하여 문장을 하나씩 입력하면서 문장을 구성하고, 각 단어의 분산 표현을 업데이트하여 번역 결과를 출력함.

    7. 모델을 사용하여 자연어 번역 및 다중 대화를 수행

     * 훈련 데이터에는 영어 문장과 그에 해당하는 뜻의 프랑스어 문장이 함께 있는데, 이 데이터로 모델을 훈련시킨다.
     * 입력된 영어 문장으로부터 시작하여 프랑스어 문장을 번역하는 모델을 구축한다.
     * 다중 대화를 위해 이전 상호작용들로 구성된 컨텍스트를 사용하여 적절한 응답을 생성하도록 모델을 훈련시킨다.
     * Transformer 모델을 사용하여 입력을 병렬로 처리하고, 각 부분에 집중하여 번역 정확도를 개선한다.
     * 현재는 알고리즘과 머신러닝 하드웨어의 발전으로 인해 더 큰 규모의 모델을 훈련하고 더 효율적인 응답을 생성할 수 있다.

    8. 다양한 모달리티에 대해 구분없이 처리할 수 있는 대화형 다중 모달 모델 개발

     * OpenAI의 Mina, ChatGPT, Google의 Bard와 같은 신경망 대화형 모델의 진보에 대해 이야기했다.
     * 언어 모델의 변화에 대해서도 언급하고, OpenAI의 GPT2와 Google의 T5 작업을 언급했다. 이 모델들은 매개변수 수가 크게 증가하고 있음.
     * 이러한 작업의 기초로 사용되는 Transformer의 발전에 대해 언급하였다.
     * OpenAI의 GPT3, GPT-4 및 Google의 Gemini 프로젝트 등에 대해 이야기했다. Gemini 프로젝트는 텍스트뿐만 아니라 이미지, 오디오 등 다양한 모달리티를 동시에 처리할 수 있는 모델을 개발하는 것을 목표로 한다.
     * Gemini 프로젝트는 텍스트와 이미지, 비디오, 오디오 등을 하나의 시퀀스로 처리하고, Transformer를 기반으로 모델을 훈련시킨다. 이를 통해 다양한 모달리티에 대해 일관된 표현을 구축할 수 있다.

    9. ️텐서플로 훈련 인프라, 다양한 크기의 Gemini 제품과 자동 복구 시스템

     * 텐서플로의 Gemini은 Ultra, Pro, Nano 3가지 크기로 제공되며, 각 모델은 다른 용도나 장소에 적합하다.
     * Gemini은 모델 훈련에 대한 매우 확장 가능한 패브릭을 제공하며, 고성능 네트워크와 자동 복구 시스템을 갖추고 있다.
     * 탐지된 failures를 최소화하기 위해 멀티노드 환경에서 동시에 업그레이드를 실행하고, 고속 네트워크로 다른 복사본의 상태를 복원하며, 복구 시간을 몇 초로 줄일 수 있다.
     * 다양한 데이터를 사용하여 모델을 훈련하며, 웹 문서, 책, 코드, 이미지, 오디오, 비디오 등의 다양한 형식을 훈련 데이터로 사용한다.
     * 모델 훈련 데이터의 최종 구성은 작은 모델로 실험하고 성능을 평가하여 결정되며, 다양한 평가 지표를 활용하여 최적의 데이터 혼합을 찾는다.

   10. 데이터 품질은 중요하고 고려되어야 함. 모델 아키텍처보다 데이터 품질이 더 중요함.

     * 학습 마지막에는 도메인 관련 데이터를 활용하여 다국어 데이터를 추가한다.
     * 높은 품질의 데이터는 모델 성능에 큰 차이를 만든다.
     * 자동으로 커리큘럼을 학습할 수 있는 능력은 미래 연구 분야 중 하나이다.
     * 질문을 할 때 모델이 더 효과적으로 대답할 수 있도록 하는 방법과 모델의 장점을 최대한 끌어내는 방법에 대한 연구도 진행 중이다.
     * 체인 오브 쑤트 프롬프팅 기법을 사용하면 모델이 더 다양한 단계를 고려해 정확한 답변을 제공할 수 있다.

   11. 모델 평가 및 성능 분석 결과 알아보기

     * 해당 모델은 학생이 잘못된 답을 도출한 사례를 예시로 소개하고, 수정되어야 할 부분을 지적한다.
     * 모델은 32개 학문 벤치마크를 평가하였고, Gemini Ultra 모델은 30개 벤치마크에서 기존 예상 성능을 초월하는 결과를 보였다.
     * 이 모델은 다중언어 성능도 고려하고, 복잡한 트레이드오프를 고민한다.
     * 이 모델은 영상 이해와 다중모달 능력이 뛰어나며, 다양한 벤치마크에서 우수한 성과를 달성한 것으로 나타났다.

   12. ️️ Gemini 모델은 훌륭한 음성 인식 성능과 다국어 능력을 가지고 있으며, 챗봇으로도 프로그래밍까지 가능.

     * Gemini 모델은 다양한 음성 인식 기준에서 최고 수준의 오류율을 보여줬고, 다국어 능력도 우수한 편이다.
     * 기존에 팀이 많은 노력을 기울여 모델을 평가하고 그 능력을 상세히 이해하기 위한 작업을 수행했다.
     * Gemini 모델은 유익한 정보와 프로그래밍 코드도 제공할 수 있어서 굉장히 놀라웠다.
     * 또한, TPUs에 대한 지식도 갖추었으며, 훌륭한 효율성과 성능 향상을 제공한다고 설명한다.
     * Gemini 모델은 다양한 챗봇의 개성을 가질 수 있는데, 이 중 Bard는 도움이 되는 친구로서 질문에 도움을 주며, 이 모델은 LMY 사이트에서 높은 ELO 점수를 달성한것으로 알려져 있다.

   13. 인공지능 모델 활용과 도메인별 훈련

     * 다양한 모델이 있고, 이 중 순위권을 보여주는 무료 서비스와 그렇지 않은 유료 서비스가 있다.
     * Gemini는 엔글랜드, 미국, 대한민국, 대만, 싱가포르의 '백만 명당 기업 수'를 계산해 테이블 형태로 제공한다.
     * 엔글랜드의 수가 가장 높고, 이를 해석해주며, 미국, 대한민국, 대만, 싱가포르 순으로 나열된다.
     * 각 정보는 다양한 소스로부터 수집되며, 정확한 정의에 따라 실제 숫자가 약간 다를 수 있다.
     * 인공지능 모델들을 도메인별로 훈련하면 특정 문제에 대해 전문적인 결과를 얻을 수 있다.

   14. 이미지와 비디오를 생성하는 생성 모델에 대한 빠른 설명.

     * 이번 영상에서는 이미지와 비디오를 생성하는 생성 모델에 대해 간략히 설명한다.
     * 관련 연구 프로젝트로 'Party'와 'Imagine'가 있으며, 시각적 이미지를 생성하는 모델을 만드는데 있어서 텍스트 입력을 활용하여 특정한 이미지를 생성할 수 있다.
     * 예를 들어, 새로운 이미지를 만들어보라는 텍스트 입력에 대해 모델이 이를 해석하고 실제 이미지를 생성한다.
     * 이러한 생성 모델은 사물 묘사와 함께 픽셀에 대한 텍스트 표현을 기반으로 이미지를 생성한다.
     * 이러한 방식을 통해 원하는 텍스트에 기반한 이미지를 생성할 수 있다.

   15. ️이미지 기능의 발전은 스마트폰 사용자에게 편리함을 제공한다.

     * 이미지 분석 모델을 다른 매개변수로 여러 개 훈련시키면 규모에 따라 결과가 달라진다.
     * 스마트폰 카메라 기능은 기술적인 사진학과 기계 학습의 조합으로 더욱 향상되었다.
     * 사진 모드, 야간 모드, 색상 강조, 자동 대화 응답 등 다양한 기능으로 실시간 변환과 텍스트 추출이 가능하다.
     * 이러한 기능들은 사용자의 문맥을 고려하여 존재하지 않는 것 같은 변환과 응답을 제공한다.
     * 선명한 이미지 전송과 다국어 번역 등 제한된 리터러시 환경에서의 혁상적인 이점을 제공한다.

   16. ️기계 학습 기술을 활용한 물질 과학과 의료 영역에서의 활용

     * 물질 과학 분야에서 기계 학습이 사용되어 빠른 시뮬레이터 생성 등 다양한 측면에 영향을 주고 있다.
     * 기계 학습을 통해 가능한 물질들을 조사하고 특성을 가진 재료를 식별하는데 큰 잠재력이 있다.
     * 의료 영역에서는 의료 이미지 진단에도 기계 학습이 사용되고 있으며, 당뇨 망막병증 등을 조기에 발견할 수 있다.
     * 의료 영상 분석을 통해 의사가 부족한 지역에서도 환자를 선별할 수 있으며, 인공지능 모델이 전문의와 비슷한 효능을 가질 수 있다.

   17. 머신러닝과 컴퓨터가 세상을 변화시키는 동안, 머신러닝의 적용과 책임감에 대한 원칙

     * GPU를 이용해 빠른 스크리닝, 사진을 통한 피부과 진단을 실시
     * 공정하지 않은 편향성 제거, 모델의 해석 가능성, 프라이버시 고려, 사회적 이익 등 기계 학습 적용에 대한 원칙을 발표
     * 현재도 편향성, 프라이버시, 안전성 등에 관한 연구를 진행 중
     * 머신러닝과 컴퓨팅의 발전으로 사용자와 자연스러운 대화와 상호작용이 가능해지고, 컴퓨터가 다양한 형태의 정보를 이해하고 생성할 수 있다고 기대
     * 이러한 기술의 가능성과 동시에 사회에 대한 책임감을 가져야 함

   18. 등장하는 질문들을 통해 데이터의 중요성 및 고객 요구에 대해 논의

     * Slido를 통해 도착한 질문들 중 몇 가지 경향성을 가진 질문을 선택해 공유한다.
     * 데이터 분야에서는 고품질 데이터와 모델 용량이 모델의 성능을 향상시킬 수 있다.
     * 하지만 데이터의 품질과 모델의 크기를 고려해야 한다. 낮은 품질의 데이터는 모델의 수학 문제 해결 능력 등에 부정적인 영향을 줄 수 있다.
     * 많은 양의 비디오 데이터를 사용한 학습은 아직 충분히 일어나지 않았으며, 언어 데이터 뿐만 아니라 시각 및 음성 데이터를 통해 세계를 이해하는 것이 언어로만 학습하는 것과 다를 것이다.
     * 전체적으로 데이터의 소진은 아직 되지 않았으며, 더 많은 발전 가능성이 있다.

   19. ️멀티모달 모델은 각각의 도메인을 위한 타겟 모델보다 더 성능이 좋을까요?

     * 멀티모달 모델은 일부 경우에서는 성능이 더 좋을 수 있습니다.
     * 모달리티를 늘릴수록 다른 모달리티의 성능이 향상되는 경향이 있습니다.
     * 좁은 문제에 대해 타겟된 데이터셋을 수집한 경우, 그 문제에 대한 성능이 높아질 수 있습니다.
     * 하지만 복잡한 문제이거나 특화된 데이터를 수집하기가 어려운 경우, 다양한 지식을 갖고 있는 모델이 필요합니다.
     * 적은 리소스를 가진 개인들은 큰 모델을 훈련하기 어려우므로, machine learning 분야에서 다양한 연구 주제를 탐구할 수 있습니다.

   20. GPU를 사용한 모델 연구 및 다양한 데이터 모달리티 중요성 강조

     * GPU 하나 또는 소수의 GPU를 사용하여 데이터 품질 평가, 자동 평가, 온라인 커리큘럼 학습 및 최적화 방법과 같은 연구가 가능하다.
     * 트랜스포머 연구는 8개의 GPU 위에서 수행되었다. LLM과 시퀀스-투-시퀀스 모델 또한 8개의 GPU로 연구되었다.
     * LLM 및 트랜스포머가 모든 것인가에 대한 의문들이 제기되었으며, 기계 학습 분야에서 다른 모델 연구에 대한 역할은 어떤지에 대한 고민이 있다.
     * 다른 아이디어를 주목할 만한 발전이 이뤄지지 못하게 하는 것은 우려스러울 정도로 구체화되지 않았거나 덜 탐구된 아이디어를 배제하는 것일 수도 있다.
     * 다양한 모달리티를 다루는 것이 중요하다고 판단되며, 비주얼, 오디오, 언어 뿐만 아니라 의료에서의 심장 박동센서 데이터와 같은 다른 모달리티를 고려해야 한다.

   제미니 얘기가 절반이네요 ㅎㅎ

   동영상 내용은 Lilys.AI가 요약한 것입니다.

   https://lilys.ai/digest/297050/…

   감사합니다.. xguru님께서 이미 만들어놓으셔서 1초만에 결과를 봤습니다... ^^
"
"https://news.hada.io/topic?id=13528","Auth0의 오픈소스 대체제 Ory Kratos, 이제 Passwordless 및 SMS 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Auth0의 오픈소스 대체제 Ory Kratos, 이제 Passwordless 및 SMS 지원

     * Ory Kratos v1.1 출시 : 확장 가능하며, 보안이 강화된 오픈 소스 아이덴티티 서버

새로운 기능 및 개선 사항

     * 휴대폰 인증 & SMS를 통한 2단계 인증(2FA): Twilio와 같은 SMS 게이트웨이와 쉽게 통합하여 보안을 강화
     * 번역 및 국제화 지원: 다양한 언어를 지원하여 전 세계 사용자에게 접근성을 높임
     * Google 및 Apple과의 네이티브 로그인 지원: 모바일 플랫폼에서 ""Google로 로그인"" 및 ""Apple로 로그인""을 네이티브로 지원
     * 계정 연결: 동일한 이메일을 공유하는 소셜 계정으로 로그인할 때 계정 연결을 용이하게 하는 새로운 기능 추가
     * 비밀번호 없는 ""매직 코드"" 로그인: 이메일로 일회용 코드를 보내 로그인하는 방식으로, 비밀번호를 잊었거나 소셜 로그인을 사용할 수 없을 때 대체 로그인 방법으로 사용 가능
     * 세션을 JWT로 변환: Ory 세션 쿠키나 토큰을 JSON 웹 토큰(JWT)으로 변환하여 세션 관리와 다른 시스템과의 통합을 유연하게 함
     * 이메일 전송의 신뢰성 향상: 다양한 제공업체를 통한 이메일 전송 신뢰성 개선
     * HTTP API 및 관련 SDK 메소드 개선: API 호출 성능 향상 및 사용자 친화적인 개선
     * 키셋 페이지네이션 도입: 아이덴티티 목록 성능 향상을 위해 키셋 페이지네이션 도입
     * Passkeys 및 WebAuthn의 다중 출처 지원: 서브도메인 작업 시 유용함
     * 로그아웃 흐름 개선: API 호출 시 설정된 return_to 매개변수로 사용자를 리디렉션함
     * 설정 업데이트 시 비밀번호 확인 요구 오류 수정: 사용자가 설정을 업데이트할 때 잘못된 비밀번호 확인 요구 문제 해결
     * 기존 계정으로 가입 시 로그인 힌트 제공: 이미 존재하는 계정으로 가입하려는 사용자에게 기존 계정으로 로그인하도록 도와주는 힌트 제공
     * CORS 설정의 핫 리로드 지원: CORS 설정 변경 시 서버 재시작 없이 적용 가능
     * Ory OAuth2 / Ory Hydra와의 통합 개선: 로그아웃, 로그인 세션 관리, 검증 및 복구 흐름 개선
     * 비밀번호 없는 새로운 로그인 방법 ""매직 코드"" 추가: 이메일로 일회용 코드를 보내는 방식으로 로그인 및 가입 가능
     * 소셜 로그인 통합 개선: 소셜 로그인 제공업체에서 확인된 이메일 상태를 사용 가능
     * Ory Elements 및 기본 Ory Account Experience 국제화: 번역을 통한 국제화 지원
     * Ory 세션 쿠키나 토큰을 JWT로 변환 가능: 세션 관리와 다른 시스템과의 통합을 위한 기능 추가
     * 네이티브 앱에서의 복구 기능 개선: 사용자가 브라우저로 전환하지 않고도 복구 단계를 완료할 수 있도록 개선
     * 관리자가 식별자로 사용자를 퍼지 검색할 수 있는 기능 추가: 아직 미리보기 단계
     * HMAC 해시된 비밀번호 가져오기 가능: 보안 강화를 위한 기능 추가
     * 웹훅을 통한 아이덴티티 관리자 메타데이터 업데이트 지원: 관리자 기능 개선
     * 비밀번호 변경 시 사용자의 모든 세션을 취소할 수 있는 기능 추가: 보안 강화를 위한 기능 추가
     * 로그인, 등록 및 로그인 방법에 대한 웹훅 지원: Passkeys, TOTP 등을 포함한 모든 로그인 방법에 대한 웹훅 지원
     * 로그인 화면에서 ""ID"" 대신 올바른 레이블 표시: 예를 들어 ""이메일"" 또는 ""사용자 이름""과 같은 식별자 스키마에서 추출함
     * 로그인 힌트 제공: 로그인에 실패한 사용자에게 가이드를 제공함
     * Twilio와 같은 SMS 게이트웨이를 통한 전화번호 인증 지원: 보안 강화를 위한 기능 추가
     * SMS OTP를 2단계 인증 옵션으로 추가: 사용자 보안 강화를 위한 기능 추가

   Ory - 오픈소스 Identity 플랫폼

  Hacker News 의견

     * SMS 인증을 2FA(이중 인증)로 사용하는 것은 더 이상 안전하지 않다는 주장
          + SMS는 이제 안티 피처로 여겨짐. 문제를 단순히 옮기는 것에 불과하다고 비판.
          + 이메일 인증조차도 SMS보다 낫다는 의견이 있으나, 그것도 크게 나은 것은 아님.
          + 지갑과 휴대폰이 가장 흔히 도난당하는 물건이며, 많은 사람들이 저가 휴대폰이나 선불 SIM을 사용함.
          + 일시적으로 여겨져야 할 전화번호에 자신의 신원을 묶는 것은 몇 년 후 계정에 접근하지 못하게 될 위험이 있음.
          + 사람들이 전화번호를 변경하는 다양한 이유가 있음: 서비스 제공자 변경, 여행 중 다른 SIM 사용, 직장 변경으로 인한 회사 제공 전화 상실, 운영자가 이전 번호 인수 거부, 스팸 목록에 번호가 오르는 경우 등.
     * 새로운 기능 발표에 대한 축하의 말과 함께, 전화번호를 일급 시민으로 취급하는 것에 대한 긍정적인 평가.
          + 경쟁사인 FusionAuth에서 일하는 사람으로부터의 의견.
          + 이메일 매칭을 기반으로 한 소셜 계정과 기존 계정 간의 연결이 새로운 기능으로 소개됨.
          + 기존 계정에 소셜 계정을 연결하는 시나리오에 대한 문서가 있으며, 반대의 경우도 가능한지에 대한 질문이 있음.
          + 사용자가 alice@example.com으로 가입한 후 alice@gmail.com을 연결하고 싶어하는 경우를 어떻게 처리하는지에 대한 궁금증.
          + 계정 연결을 사용자별로 차단할 수 있는지, 아니면 시스템 전체에서 활성화되는지에 대한 의문.
          + 몇 년 전부터 계정 연결 기능을 가지고 있었으며, 고객들이 이와 같은 경계 사례를 제기한 바 있음.
     * 크라토스(Kratos)와 오스키퍼(Oathkeeper)를 호주의 온보딩 앱에 자체 호스팅하여 사용 중인데 대부분 잘 작동한다는 긍정적인 피드백.
          + 맞춤형 UI를 적용하는 과정이 매우 힘들었다는 경험 공유.
          + 서버 코드와 JS 내 CSS가 혼합된 예제 프로젝트를 시작으로 하여 HTML/CSS에 접근하기 어려웠음.
          + 이 프로젝트의 진전에 대한 질문이 있음.
     * SMS 지원에 대한 우려 표명.
          + SMS 문자 메시지가 인증 목적으로 사용되어서는 안 된다는 것이 널리 인정되고 있음.
          + 기능 요청에 대한 원본 링크와 함께, 사용자 @zepatrik의 우려가 무시된 것에 대한 지적.
     * B2B SaaS 애플리케이션에 대한 좋은 솔루션에 대한 조언을 구하는 질문.
          + 앱 로그인이 필요하며, 비밀번호, 소셜 등의 일반적인 방법뿐만 아니라 이메일 도메인별로 규칙을 맞춤 설정할 수 있는 방법을 찾고 있음.
          + Authentik과 FusionAuth와 같은 서비스를 시도했지만, 조직별 제어에 적합하지 않았다는 경험 공유.
     * Auth0의 대안이라기보다는 Auth0의 대안을 구성하는 컴포넌트 중 하나라는 의견.
     * Ory Kratos가 실행을 위해 7개의 도커 컨테이너를 사용하는 것에 대한 비판.
          + 단 2개의 컨테이너로 실행되는 Keycloak과 비교했을 때 무거워 보임.
          + 이러한 '부피'를 정당화하는 것이 무엇인지에 대한 질문.
     * 이메일과 SMS로 보내는 암호화되지 않은 매직 링크를 통한 가입, 로그인, 계정 연결 및 세션 쿠키를 유효한 JWT로 전환하는 것에 대한 우려.
          + 1년 내에 CVE(공통 취약점 및 노출)가 발생할 것 같다는 의견.
     * 2년 미만의 기간 동안 프로덕션 환경에서 사용해온 경험 공유.
          + 많은 개선이 이루어졌으나, 여전히 설정이 어렵고 jsonnet이 매우 복잡하다는 의견.
          + 로그인 후 몇 분 이내에 소셜 제공자로부터 온 경우 현재 비밀번호를 모르더라도 비밀번호 변경이 가능한 등 이상한 결정들이 있지만 전반적으로 이 분야에서 강력한 경쟁자임.
     * Kratos를 자신의 오픈소스 프로젝트에 사용하고 싶었지만, 다양한 스토리지 옵션 추가에 대한 지원을 얼마나 잘 하는지에 대한 연구가 충분하지 않았다는 의견.
          + 프로젝트가 다양한 문서 저장소를 지원하며, Kratos가 동일한 저장소를 쿼리할 수 있도록 개발 작업을 진행하고 싶은 바람을 표현함.
"
"https://news.hada.io/topic?id=13463","'WE'RE HIRING' ... 찾지 못하면 영원히 모른다. | 이스터 에그찾지 못하면 영원히 모른다. | 이스터 에그

     * '이스터 에그'라는 용어는 일반적으로 프로그램이나 다양한 매체 안에 숨겨진 기능이나 메시지
     * 개발자 도구에 심어둔 채용 링크
          + reddit, coupang, airbnb 등
          + 다양한 사이트에서 개발자 도구에 채용 링크를 심어둠
     * 채용관련뿐 아니라 구글 사이트에 존재하는 '이스터 에그'도 소개됨

   위 글을 읽지는 않았지만
   coupang , airbnb 사이트 들어가서 개발자 도구 띄우면 콘솔에 메시지 보인다는 내용일겁니다.
   예전부터 알려진 내용입니다.

   네네 맞습니다~ 하지만 접하지 못하신 분들도 있을듯하여 다시 공유드려요 :)

   이런식의 사이트는 좀...

   다시 열람이 되는것으로 보여집니다!

   구독해야만 읽을 수 있는 기사군요
"
"https://news.hada.io/topic?id=13417","작별 인사와 모든 데이터에 대한 감사의 마음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        작별 인사와 모든 데이터에 대한 감사의 마음

올바른 이름표를 단 나의 사무실

     * 구글을 떠나며 복잡한 감정을 느낌.
     * 안드로이드 팀의 일원으로서 많은 시간을 보냈으며, 구글의 다른 부분에 대해서는 잘 알지 못함.
     * 최근 몇 년간의 기술 분야 해고와 달리, 자발적으로 회사를 그만둠.
     * 기술 분야를 떠나 완전히 새로운 분야로의 전환을 결정함.

안녕 기술, 안녕 미래

     * 구글에서 거의 14년간 근무함.
     * 안드로이드 팀에 2010년 5월에 합류하여 코드 작성, 프레젠테이션, 비디오, 기사 제공 및 팀 관리 등 다양한 업무를 수행함.
     * 1992년 대학원을 졸업한 이후 다양한 회사에서 31년 이상 일함.
     * 새로운 경험을 위해 학교로 돌아감.

새로운 시작

     * 지난 가을 시카고에서 코미디 각본 MFA 과정을 시작함.
     * DePaul 대학에서 2년간의 풀타임 프로그램을 수강하며, Second City에서 코미디 수업을 들음.
     * 풀타임 일과 학교 생활을 병행하고 있으나, 잠을 자는 시간이 부족함.
     * 직업과 경력을 포기하는 것은 재정적으로 가장 나쁜 결정일 수 있으나, 코미디 작가가 되고 싶은 강한 열망이 있음.
     * 오랜 시간 동안 부업으로 코미디와 글쓰기를 해왔으며, 이제 취미를 직업으로 승격시킴.
     * 코드 작성을 그리워할 수도 있지만, 언젠가 다시 할 방법을 찾을 수도 있음.
     * 현재는 코미디, 글쓰기, 학생 생활에 몰두하고 있음.

안드로이드 커뮤니티에 감사

     * 안드로이드 커뮤니티의 일원으로서의 여정에 감사함.
     * 안드로이드가 오늘날의 모습으로 성장하는 데 일조함.
     * 안드로이드와 AndroidX에서 중요한 기술과 API를 개발하고, 흥미로운 프로젝트에 참여함.
     * 많은 사람들 앞에서 코미디와 기술에 대한 이야기를 하며, 2014년부터 재미있는 팟캐스트를 진행함.
     * 안드로이드의 초기 역사를 알리는 작업을 하며, 4년 이상의 시간을 들여 책을 집필함.

GN⁺의 의견

     * 첫째, 첫 직장이 아닌 다양한 경력을 거쳐 구글에서의 장기 근무 후 새로운 도전을 선택한 점이 인상적임. 이는 변화를 두려워하지 않고 자신의 열정을 따르는 모습을 보여줌.
     * 둘째, 안드로이드 플랫폼의 성장에 기여한 경험은 기술 분야에서의 중요한 업적으로, 이러한 경험은 다른 이들에게 영감을 줄 수 있음.
     * 셋째, 코미디와 글쓰기라는 새로운 분야로의 전환은 개인의 행복과 열정을 우선시하는 삶의 태도를 반영함. 이러한 결정은 많은 사람들에게 자신의 꿈을 추구하도록 동기를 부여할 수 있음.

        Hacker News 의견

     * 첫 번째 댓글:
          + 첫 번째 댓글은 첫 몇 버전의 안드로이드 개발에 참여한 50명의 사람들을 인터뷰한 책에 대한 이야기임.
          + 안드로이드가 성공한 것은 당연하다고 생각했지만, 실제 이야기는 훨씬 흥미로움.
          + 안드로이드 팀은 구글 인수 후에도 구글 문화와 완전히 통합되지 않고 독립적으로 일했으며, 열정적으로 일하고 커피를 즐겼음.
          + 팀원 대부분은 T-Mobile Sidekick, WebTV, BeOS 등 유사한 프로젝트 경험이 있음.
     * 두 번째 댓글:
          + 첫 번째 댓글과 연결되어, 첫 번째 댓글에서 언급된 책의 저자인 Chet Haase가 탁월한 스토리텔러라고 칭찬함.
          + Chet Haase의 2019년 Devoxx 프레젠테이션이 그의 최고의 작품이라고 언급하며, AOSP와 안드로이드 개발자 커뮤니티에 기여한 그의 책에 대해 감사함을 표현함.
     * 세 번째 댓글:
          + 경제 침체로 인해 기술 분야에서 경력을 포기한 사람들이 얼마나 되는지, 더 적은 수입이지만 더 만족스러운 다른 직업을 찾는 사람들이 얼마나 될지 궁금해함.
     * 네 번째 댓글:
          + 프로그래밍을 통해 위대한 것들을 만들고 싶었지만, 정치적인 행위를 하는 사람들에게 자주 밀려났다고 토로함.
     * 다섯 번째 댓글:
          + TV 시리즈 ""Suits""의 창작자가 이전에 투자 은행가였다는 사실을 알고, 여러 분야에서 성공하는 사람들을 보는 것이 좋다고 언급함.
     * 여섯 번째 댓글:
          + Chet Haase가 안드로이드 전문가로서 오랫동안 커뮤니티에 기여해왔으며, 그의 책 ""Androids""를 읽는 것을 추천함.
     * 일곱 번째 댓글:
          + Chet Haase가 멋진 사람처럼 들리며, 그가 주는 프레젠테이션이 재미있었을 것이라고 추측함.
     * 여덟 번째 댓글:
          + Chet Haase가 안드로이드 개발자 커뮤니티에서 오랫동안 활동해왔으며, 코미디로 전향하는 것이 놀랍지 않지만 그가 그리울 것이라고 언급함.
     * 아홉 번째 댓글:
          + 코딩과 코미디 작성이 완전히 다른 길이 아닐 수 있으며, 성공적인 코미디에는 구조가 있다고 언급함.
     * 열 번째 댓글:
          + 제목이 Douglas Adams의 책 ""So long, and Thanks for All the Fish""를 암시하고 있음을 설명함.
"
"https://news.hada.io/topic?id=13516","HN 소개: 1,917개의 전선으로 스위치 라이트 역공학","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN 소개: 1,917개의 전선으로 스위치 라이트 역공학

닌텐도 스위치 라이트 보드뷰 역설계

     * 닌텐도 스위치 라이트의 로직 보드에서 넷리스트를 추출하는 과정의 결과 데이터임.
     * PCB에 납땜된 전기 부품들과 구리 층이 전기 회로를 형성함.
     * 넷리스트와 부품, 패드 기하학적 데이터가 결합되어 보드뷰를 구성함.

어떻게 이루어졌는가?

     * 6000 PPI 해상도의 조립된 PCB의 기하학적이고 색상 정확한 파노라마 이미지 생성 과정.
     * 파노라마 위에 부품/패드 데이터를 그리고 수정할 수 있는 GUI 지원.
     * 임의의 핀 수를 하나씩 전원 공급하고 각 단계 사이 모든 핀의 상태를 읽을 수 있는 자체 PCB 개발.

과정

     * 모든 이미지를 취득하여 하단 파노라마를 만들고, 보드를 뒤집어 RF 쉴드를 제거한 후 상단 파노라마를 만듦.
     * 완성된 파노라마를 GUI에 가져와 초기 부품/패드 기하학적 데이터를 놓음.
     * 모든 부품을 개별적으로 제거하고 분석을 위해 특정 위치에 보관함.
     * 모든 패드가 노출되고 단락되지 않은 상태에서 DMM을 사용하여 모든 패드를 프로브하고 GUI에 기록함.
     * GUI를 사용하여 남은 패드를 시각적 연결에 기반하여 넷-프래그먼트로 그룹화함.
     * 추출기 PCB 핀에서 대상 PCB의 넷-프래그먼트로 연결하는 와이어의 순서를 GUI에 기록함.
     * 추출기를 실행하여 모든 숨겨진 연결의 완전한 매핑을 생성함.
     * GUI를 사용하여 모든 프래그먼트를 완성된 넷리스트로 병합하고 보드뷰 파일로 내보냄.

최종 통계

     * 2444장의 사진이 2개의 파노라마로 합쳐짐, 760개의 부품이 분리됨, 1917개의 와이어 사용, 약 30176개의 무연, 비스무스-프리, 할라이드-프리 납땜 접합부 사용.

한계

     * 파노라마가 실제로는 2000 PPI 해상도임.
     * 부품/패드 윤곽이 단순한 이유는 OBV에서 복잡한 렌더링 기능을 현재 지원하지 않기 때문임.
     * RF 쉴드를 제거하고 추출 전에 초음파 세척이 필요하지만, 저자는 초음파 세척기를 가지고 있지 않음.

왜 이 프로젝트를 진행했는가?

     * 저자는 의료, 항공, 군사, 산업 분야에서 일하는 전자 계약 제조 분야에서 10년 이상의 경험을 가짐.
     * 이 프로젝트는 집에서 일하는 인터넷 프리랜싱과 전문 전기 납땜을 결합하는 실험임.
     * 이 프로젝트가 유용하다고 생각되면 기부를 요청함.

연락/구독

     * 피드백, 정정, 일반적인 연락은 이메일로 환영함.
     * RSS 지원, 'SUBSCRIBE'라는 제목의 이메일로 메일링 리스트에 가입 가능함.

GN⁺의 의견

     * 이 기사는 전자 제품의 PCB 역설계 과정을 상세히 설명하고 있으며, 특히 닌텐도 스위치 라이트의 로직 보드를 대상으로 함.
     * 저자는 전문적인 전자 납땜 기술과 PCB 분석을 결합하여, 기존의 대규모 장비에 의존하지 않는 새로운 방법을 개발함으로써, 개인이나 소규모 사업체에서도 유용한 데이터를 생성할 수 있는 가능성을 보여줌.
     * 이 글은 전자공학에 관심 있는 사람들에게 매우 흥미롭고 유익하며, 복잡한 전자 장비의 구조와 기능을 이해하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 펀딩 모델에 대한 제안
          + 직접적인 경험은 없지만, 저작물 출시 후 수익 창출에 대한 우려가 있음을 알 수 있음.
          + 크라우드펀딩 모델을 고려해 볼 것을 제안함. 이는 사전에 자금을 모으는 방식이며, 가장 원하는 프로젝트에 대한 암묵적인 투표의 이점도 있음.
          + 이 모델은 게임 반부정행위 시스템인 Denuvo DRM을 해킹하는 유명한 Empress와 유사함. 그녀는 재정적으로 성공적인 것으로 보임.
          + 또한, 작업이 타인에게 어떤 가치를 제공할 수 있는지 고려할 것을 권장함. 예를 들어, 간소화된 Wii 콘솔처럼 특정 회로의 넷리스트를 더 작게 재창조하는 것에 큰 가치를 두는 소규모 그룹이 있을 수 있음.
     * 단순하지만 효과적인 접근법
          + 숨겨진 연결을 찾기 위한 무차별 대입 방식이 단순하지만 뛰어난 아이디어임.
          + 현재 취미로 하는 역공학 노력들은 더 나아가 파괴적인 방법을 사용하며, 레이어별로 사포질을 하여 1:1 재구성을 함. 이는 PCB 레이어가 많아질수록, 특히 최신 소비자 기술에서 더 어려워짐.
     * Openseadragon 뷰어의 빠른 생성
          + 기사에서 PCB의 Openseadragon 뷰어를 빠르게 만들 수 있음.
          + 모바일 폰에서 124MB JPG를 다운로드할 필요 없이 전체 해상도로 볼 수 있음. 이미지는 다양한 해상도의 레이어와 많은 작은 사진들로 구성됨.
     * 멋진 프로젝트
          + 최근에 이 프로젝트를 접하고 많은 전선의 수에 감명받음.
          + 몇 년간 주로 2-4 레이어의 PCB를 역공학해옴. 이 문제를 해결하기 위한 최선의 방법으로 3D 프린터로 만든 비행 프로브 스테이션을 생각함.
          + 멀티레이어 보드를 처리하는 또 다른 방법은 스캔-사포질-스캔 접근법으로, 정확한 아트워크를 얻을 수 있지만, 발생하는 먼지가 해로움.
     * '침대의 못' 접근법의 가능성
          + 비행 프로브의 기계적 어려움을 없애기 위해 '침대의 못' 접근법을 사용할 수 있는지 궁금함.
          + 많은 수의 프로브를 일정한 해상도로 배열하여, 기존에 가지고 있는 스위치 매트릭스 백엔드에 연결하는 방식을 제안함.
          + 이는 기계적 문제를 고밀도 PCB 레이아웃 문제로 전환시키는 것으로, 이 분야에서의 전문성을 발휘할 수 있는 기회임.
     * 샌드 및 스캔 또는 X-레이/CT 방법에 대한 고찰
          + 샌드 및 스캔 또는 X-레이/CT 방법을 사용하면, Gerber 파일을 생성하고 수동으로 정리할 수 있음.
          + 레이어별로 연결된 네트워크를 추론하여 더 적은 수의 네트워크로 줄일 수 있음.
          + 모든 볼(ball)에 전선을 납땜하는 것보다 훨씬 쉬운 방법임. 넷리스트만으로는 회로도를 자동으로 생성하지 못하므로, 여전히 회로도를 만들기 위한 작업이 필요함.
          + 역공학 노력에서는 주로 하나의 칩에 집중하고, 관심 있는 각 트레이스를 수동으로 따라가며 회로도를 그림.
     * 이 프로젝트의 잠재적 가치
          + 최근 몇 달 동안 Dell 서버 마더보드와 Lenovo ThinkCentre 마더보드의 역공학을 시도했지만, 수작업으로는 너무 어려워 대부분 포기함.
          + 이 프로젝트는 오픈소스 프로젝트로서 큰 가치를 창출할 수 있음. 도구보다는 과정에서 가치를 창출할 수 있음.
          + 아래의 댓글에서 언급한 것처럼, 프로세스를 자동화하는 것, 예를 들어 본딩 기계처럼, 많은 작업이 3D 프린터 분야에서 이루어졌기 때문에 이를 프로빙에 적용할 수 있을 것임.
     * 놀라운 프로젝트
          + 수천 번의 작업이 필요하다고 여겨지는 것을 실제로 수천 번 수행한 끈기가 인상적임.
          + 홈브루 픽 앤 플레이스가 시작되고 있는 지금, 이를 활용할 수 있는 실용적인 방법이 있는지 궁금함.
          + 와이어 랩 도구와 유사한 픽 앤 플레이스 팁을 사용하는 것이 가능할지, 아니면 칩의 본드 와이어와 같이 한 차원 더 높은 정밀도가 필요한지 의문임.
     * 루이스 로스만과의 인터뷰 제안
          + 유튜브에서 수리권에 대해 루이스 로스만과 인터뷰하는 것이 좋을 것 같음.
     * 창의적인 아이디어
          + 납땜이 고통스러운 부분이고, 이미징이 새로운 부분이라면, 여기에 기회가 있음.
          + Ender3 3D 프린터를 기반으로 한 저렴한 비행 프로브를 만드는 것이 가능함. 이는 저렴한 하드웨어의 단점을 스마트 소프트웨어로 극복할 수 있는 완벽한 상황임.
"
"https://news.hada.io/topic?id=13453","캐슬 엔진 – 파스칼을 사용하는 무료 오픈소스 크로스플랫폼 3D/2D 게임 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              캐슬 엔진 – 파스칼을 사용하는 무료 오픈소스 크로스플랫폼 3D/2D 게임 엔진

Castle Game Engine 소개

     * Castle Game Engine은 데스크탑, 모바일, 콘솔 플랫폼을 위한 크로스플랫폼 3D 및 2D 게임 엔진임.
     * 강력한 시각적 편집기를 제공하며, glTF, X3D, Spine 등 다양한 포맷을 지원함.
     * 현대적인 Pascal을 사용하여 빠르고 깨끗한 코드를 작성할 수 있으며, 무료이자 오픈소스임.

시각적 디자이너와 강력한 코드

     * 시각적 편집기를 통해 3D 및 2D 게임과 사용자 인터페이스를 디자인할 수 있으며, 다양한 플랫폼에 동일한 프로젝트를 빌드하고 배포할 수 있음.
     * Lazarus, Delphi, Visual Studio Code 등 다양한 IDE와 통합이 가능함.

데이터 정의의 다양한 방법

     * 3D 모델, 2D 애니메이션, 스프라이트 시트를 사용하여 데이터를 정의할 수 있음.
     * Blender나 Sketchfab 같은 제작 도구나 상점과의 통합이 용이함.

그래픽 효과

     * 셰이더 효과, 그림자, 거울, 물리 기반 렌더링, 범프 매핑, 감마 보정 등 다양한 그래픽 효과를 구성할 수 있음.

크로스플랫폼 지원

     * 다양한 데스크탑(Windows, Linux, macOS 등), 모바일(Android, iOS), 콘솔(Nintendo Switch) 플랫폼을 타겟으로 함.
     * WebGL과 Oculus(VR)도 곧 타겟으로 추가될 예정임.

깨끗하고 빠른 코드

     * 현대적인 Object Pascal을 사용한 네이티브 객체 지향 프로그래밍 언어를 사용함.
     * 빠른 빌드와 실행이 기본적으로 제공됨.

오픈소스 및 지속적 통합 친화적

     * 지속적 통합에 친화적인 도구를 제공하며, 명령줄 빌드 도구와 Docker 이미지를 사용할 수 있음.
     * GitHub Actions, GitLab CI, Jenkins 등과 함께 사용할 수 있는 준비된 파일과 문서를 제공함.

최신 뉴스 요약

     * 2024년 2월 18일: 새로운 슬림 Docker 이미지 출시.
     * 2024년 2월 3일: HTTP PUT 요청 데이터 제공, Tiled 레이어 가시성 빠른 전환, 개선된 C++ 라이브러리 API 등의 기여.
     * 2024년 1월 28일: Ticoban, 편집기 드래깅, CastleGL 기반의 dglOpenGL, 테스터 개선, Pascal 사용자 정의 RTTI 속성 등의 뉴스.
     * 2023년 12월 23일: 메리 크리스마스, 몇 가지 요약 및 API 개선.

GN⁺의 의견

     * Castle Game Engine은 다양한 플랫폼을 지원하는 강력한 게임 엔진으로, 현대적인 Pascal 언어를 사용하여 개발의 효율성을 높임.
     * 오픈소스이며 지속적인 통합과 협업을 지원하는 도구를 제공하여 개발자 커뮤니티에서의 협력을 촉진함.
     * 최신 그래픽 효과와 시각적 편집기를 통해 사용자 친화적인 게임 및 인터페이스 디자인이 가능하여 게임 개발자들에게 매력적인 선택지가 될 수 있음.

        Hacker News 의견

     * 파스칼 언어에 대한 의견
          + 한 사용자는 파스칼 언어의 가독성에 대해 부정적인 견해를 표현함. 대부분의 현대 언어가 제공하는 안전성, 크로스 플랫폼 지원, 라이브러리 등의 특징 외에도 파스칼의 가독성이 강조되었지만, 실제로는 C 언어보다 가독성이 떨어진다고 주장함. 문법을 나타내는 데 전체 단어를 사용해야 하기 때문에 코드 구조와 실제 코드를 구분하는 데 더 많은 노력이 필요하다고 느낌. 이는 비효율적이고 나쁜 설계라고 생각함. 이 페이지가 20년 전에 작성된 것 같다고 느끼며, 당시에는 타입 안전성 등의 이유가 더 많은 의미가 있었을 것이라고 언급함.
          + 관련 링크로는 ""왜 파스칼을 사용하는가?"", ""현대 오브젝트 파스칼 입문"", ""캐슬 게임 엔진 로드맵"", ""캐슬 게임 엔진: 크로스 플랫폼 3D 및 2D 게임 엔진"", ""캐슬 게임 엔진 6.4 출시 – 물리, iOS 서비스, 셰이더 파이프라인 업그레이드"" 등의 글이 있음.
     * 파스칼 사용 경험에 대한 회상
          + 다른 사용자는 2001년 대학 시절 Delphi를 사용했던 경험을 회상함. 프로그래밍에 능숙했던 사용자는 Delphi를 쉽게 사용했으며, 당시에는 var, begin, end, := 등의 문법을 보고 파스칼 계열 언어임을 알아챘음. 주로 바이너리 파일에 재고 데이터를 저장하고 바이너리 검색을 사용하는 등의 작업이 어려웠지만, 현대 언어에서는 당연하게 여겨지는 기능들이었음. 파스칼을 BASIC과 같은 카테고리로 두고 있으며, 현재는 파스칼을 사용하는 데 관심이 없지만, 여전히 파스칼을 옹호하는 사람들이 많을 것이라고 생각함.
     * 파스칼과 C 언어에 대한 비교
          + 또 다른 사용자는 고등학교 시절 처음으로 '진지한' 프로그래밍 언어로 파스칼을 배웠으나, 나중에 C 언어를 배우고 나서는 파스칼로 돌아보지 않았음. C 언어가 더 전문적이고 유연하며 하드웨어에 가까워 보였고, 파스칼은 GUI 애플리케이션 개발에 더 적합해 보였지만, 실제로는 파스칼도 C가 할 수 있는 모든 것을 할 수 있었음.
     * 파스칼 언어의 현대적 사용에 대한 긍정적인 의견
          + 한 사용자는 파스칼 개발자들이 매우 생산적으로 작업을 수행하고 있다고 느낌.
          + Delphi 제품의 관리가 잘못되었다는 아쉬움을 표현하는 사용자도 있음. 오브젝트 파스칼은 훌륭한 언어로, 현재 거의 모든 플랫폼에 대해 네이티브 코드를 생성하며, 생성된 바이너리는 작고 속도가 빠름. 파이썬 코드에 비해 100배에서 10000배 빠를 수 있음. 캐슬 엔진은 게임과 3D 애플리케이션을 쉽게 만들 수 있는 거대한 프로젝트이며, 레거시 제품이 아니라 매우 활발하게 개발되고 있음. Mormot 프로젝트도 인상적이며, 서버 애플리케이션을 오브젝트 파스칼과 Mormot으로 쉽게 구축할 수 있음. 오브젝트 파스칼 기반 서버 코드는 단일 서버에서도 충분히 실행될 수 있어 비용 절감에 도움이 될 수 있음. 오브젝트 파스칼은 교육용 언어로만 기억되는 경우가 많지만, 다른 언어에는 없는 RTTI(리플렉션)와 같은 기능을 가지고 있음. 다만, Go처럼 언어 자체에
            멀티스레딩/코루틴이 통합되어 있지 않은 점은 현대적이지 않음. 40년 전에 작성한 코드도 여전히 컴파일하고 실행할 수 있으며, 그동안 많은 언어가 유행을 타고 사라졌지만 파스칼은 여전히 존재함. 캐슬 엔진의 시각적 편집기도 매우 놀라우며, 오브젝트 파스칼 언어에 익숙하지 않더라도 시도해볼 것을 권장함.
     * 캐슬 게임 엔진에 대한 의견
          + 한 사용자는 캐슬 게임 엔진의 코드를 살펴보았으며, 2001년 이후로 많은 파스칼 코드를 보지 못했다고 언급함. 파일 이름에 'castle'을 접두사로 붙이는 것에 대해 팬이 아니라고 말하며, 이로 인해 파일이 무엇에 관한 것인지 파악하기 어렵게 만들고 모든 파일이 비슷해 보인다고 느낌. 그러나 실제 코드에 대해서는 파스칼을 작성해본 적이 없어서 코멘트할 수 없다고 함. 엔진 자체는 멋져 보인다고 평가함.
     * 파스칼 언어에 대한 개인적인 견해
          + 다른 사용자는 파스칼을 배우고 가끔 사용했으며, 개발자로서는 능숙하지 않지만 제품 관리자로서는 덜 나쁘다고 생각함. FPC가 '덕트 테이프 프로그래밍'의 전형이라고 느끼며, 그러한 개발자 정신을 C#과 함께 본 유일한 언어라고 언급함.
     * 파스칼 프로그래밍에 대한 추억
          + 마지막으로 한 사용자는 Turbo/Borland Pascal로 프로그래밍했던 시절이 가장 즐거웠다고 회상함. 'Unit' 컴파일 시스템이 잘 작동했으며, 컴파일과 사용, 편집/디버깅이 매우 빨랐음. Delphi로 넘어가면서 무언가가 잃어버렸다고 느끼며, 사람들이 다른 곳을 찾기 시작했다고 언급함. Pascal로 인해 Apple Basic에서 C/C++로 넘어가는 데 도움을 받았으며, 인라인 어셈블리를 사용하며 배울 수 있는 기회도 있었다고 말함.
"
"https://news.hada.io/topic?id=13473","일본, 글로벌 반도체 강국 재등극을 위해 67조 원 투자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    일본, 글로벌 반도체 강국 재등극을 위해 67조 원 투자

일본, 글로벌 반도체 강국으로 재도약하기 위해 67억 달러 투자

     * 일본이 반도체 제조 역량을 부활시키고 미중 긴장 상황에서 경제를 보호하기 위해 수십억 달러를 투입 중임.
     * 홋카이도의 눈 덮인 지역에서 미래지향적인 공장 건설이 진행 중이며, 이는 일본의 반도체 산업의 얼굴을 바꾸는 프로젝트임.
     * 새로 설립된 국내 벤처인 Rapidus Corp.는 2027년부터 최첨단 2나노미터 로직 칩의 대량 생산을 목표로 하고 있음.

일본의 새로운 반도체 전략

     * 일본은 외국의 주요 반도체 기업을 유치하여 기존 칩의 제조를 강화하고자 하며, 이를 위해 설립 비용의 최대 절반까지 보조금을 제공할 계획임.
     * 더욱 야심 찬 전략의 일환으로, 홋카이도의 Rapidus 프로젝트는 일본을 실리콘 칩 마법의 최전선에 다시 위치시키려 함.
     * 일본 정부는 반도체 산업에 대한 재정 지원을 최종적으로 10조 엔까지 확대하고, 2030년까지 국내 반도체 판매를 15조 엔 이상으로 증가시키는 것을 목표로 함.

글로벌 반도체 공급망의 중요성

     * 첨단 반도체는 인공지능, 무기 시스템, 전기차 등 다양한 핵심 기술의 기반이 됨.
     * 대부분의 글로벌 생산이 대만과 한국에 집중되어 있어, 지역 긴장 상황에 따라 미래 공급이 취약할 수 있음.
     * 일본은 미국과의 동맹을 활용하여 기술적인 도전에 맞서고 있으며, IBM은 미국 뉴욕 알바니에서 일본 엔지니어들에게 최첨단 미국 반도체 기술을 교육 중임.

일본의 반도체 산업 지원 성공 사례

     * 대만 반도체 제조업체 TSMC는 일본 구마모토에 70억 달러 규모의 공장을 건설 중이며, 추가 공장 건설에 대한 논의도 진행 중임.
     * 일본은 미국 주도의 글로벌 공급망에서 중요한 동맹국으로서의 신뢰를 강화하고자 함.

Rapidus 프로젝트의 도전과 기회

     * Rapidus 프로젝트는 기술적으로 큰 도약을 이루어야 하며, 최종 생산물의 비용이나 신뢰성, 구매자 존재 여부가 불확실함.
     * 일본 정부는 Rapidus 프로젝트를 지원하기 위해 3300억 엔을 약속하고 추가로 6460억 엔을 기금으로 책정함.
     * 일본의 대기업들은 Rapidus에 대한 지원을 아직 크게 확대하지 않았으며, Toyota Motor Corp. 같은 기업들은 73억 엔을 약속함.

GN⁺의 의견

     * 일본의 반도체 산업 부흥 노력은 글로벌 공급망의 안정성과 기술 자립을 위한 중요한 움직임임.
     * Rapidus 프로젝트는 기술적인 성공뿐만 아니라, 지역 경제 활성화와 일자리 창출에도 기여할 잠재력을 가짐.
     * 일본의 전략은 미국과의 동맹을 통해 중국의 기술적 도전에 대응하고, 글로벌 반도체 시장에서의 경쟁력을 회복하려는 의지를 보여줌.

        Hacker News 의견

     * 인간 요소는 대만이 반도체 제조에서 뛰어난 이유 중 하나임.

     대만의 청년들도 깨끗한 방에서 일하는 것이 힘들다고 생각함.
     * 일본은 2027년까지 최첨단 2나노미터 로직 칩을 대량 생산하려는 대담한 목표를 가지고 있음.
     * 중국은 서구보다 거의 세 배 많은 투자를 하고 있으며, 서구에서는 중국의 진전에 대한 논의가 변화하고 있음.

     중국의 저렴한 실리콘 칩이 시장을 잠식할 때를 대비하는 논의가 진행 중임.
     * Rapidus는 일본의 주요 기업 8곳의 지원을 받아 설립된 비국영 벤처임.

     Denso, Kioxia, MUFG Bank, NEC, NTT, SoftBank, Sony, Toyota 등이 참여함.
     * 반도체 산업에 대한 투자 규모가 커져서, 어떤 금액이 많은지 판단하기 어려워짐.

     OpenAI 하드웨어를 위한 7조 달러 투자 계획 등이 있음.
     * 몇 년 후에는 반도체 과잉공급이 예상되며, 투자된 수십억 달러가 낭비될 수 있음.

     국가 안보를 이유로 지원되는 비경쟁적인 반도체 공장들이 문제가 될 수 있음.
     * CHIPS 법안보다 일본의 이러한 움직임이 TSMC/대만과 관련된 지정학적 위험을 줄이는 데 더 도움이 될 수 있음.

     미국 정부는 국내 산업 부흥을 고집하기보다 이러한 발전을 장려해야 함.
     * 반도체 전쟁에 대한 책을 읽는 사람들이 있음.
     * 기술의 확장 예측으로 인해 막대한 반도체 생산 능력이 만들어지고 있음.

     AI 칩 생산을 위한 대규모 공장 건설 등이 큰 뉴스임.
     * 다양한 기업들이 자체 AI 프로세서 개발에 투자하고 있음.

     Microsoft, Google, Amazon, META, SoftBank, Huawei, Nvidia 등이 자체 설계 및 제조에 집중하고 있음.
     * 일본은 대만이 침공당할 위험에 대비하고 미국의 제재에 대응하여 독립적인 반도체 공급망을 구축하려고 함.

     일본 정부는 기업 인수를 통해 기반을 강화하고 있음.
"
"https://news.hada.io/topic?id=13480","구글, 역사적 이미지 묘사에서 문제 발생 후 Gemini 의 이미지 생성 중단 결정 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             구글, 역사적 이미지 묘사에서 문제 발생 후 Gemini 의 이미지 생성 중단 결정

     * 구글이 자사의 인공지능 도구 Gemini가 역사적 이미지 생성에서 부정확한 결과를 보여준 것에 대해 사과
     * Gemini는 미국 건국의 아버지들이나 나치 시대 독일 군인들을 유색 인종으로 묘사하는 등의 오류를 범함
     * 구글은 이러한 문제를 인식하고 즉시 개선하기 위해 노력 중이라고 밝힘

인공지능의 역사적 정확성 문제

     * 구글은 이번 달 초 이미지 생성 기능을 Gemini AI 플랫폼에 추가함
     * 소셜 미디어에서는 구글이 인종 및 성별 다양성을 추구하려는 시도에서 역사적 정확성을 놓쳤다는 비판이 제기됨
     * ""스웨덴 여성의 사진 생성""과 같은 쿼리에 대해 AI가 주로 혹은 전적으로 유색인종의 이미지를 생성하는 것을 지적
     * 구글은 특정 오류 이미지를 언급하지 않았으나, 인공지능 이미지 생성기가 대규모 이미지와 캡션 데이터를 학습하여 주어진 프롬프트에 대한 ""최적""의 결과를 생성하는 과정에서 스테레오타입을 강화할 수 있음을 인정함
     * 특히 우익 인사들이 구글의 결과를 비판하며, 구글이 의도적으로 백인을 피하려 한다는 음모론을 제기함

인공지능의 다양성 증진 시도와 그 한계

     * 인공지능 이미지 생성기는 대규모 이미지와 캡션 데이터를 학습하여 주어진 프롬프트에 가장 적합한 결과를 생성함
     * 이 과정에서 종종 인종 및 성별에 대한 고정관념을 강화하는 경향이 있음
     * 구글은 이러한 문제를 해결하기 위해 다양성을 증진하려 했으나, 미묘한 차이를 고려하지 못한 것으로 보임

역사적 정확성과 다양성 사이의 균형

     * 일부 역사적 요청에 대해 Gemini는 여전히 과거를 잘못 대표하는 결과를 제공함
     * 예를 들어 ""1800년대 미국 상원의원의 사진 생성"" 요청에 대해 Gemini는 다양성을 강조한 결과를 제공했으나, 실제로는 1922년에 첫 여성 상원의원이 역임함
     * 이러한 응답은 인종과 성별 차별의 실제 역사를 지우는 결과를 초래하며, 구글은 이를 ""부정확함""이라고 표현함

  GN⁺의 의견

     * 인공지능 기술의 발전은 많은 가능성을 제시하지만, 역사적 정확성과 인종적 다양성 사이의 균형을 맞추는 것이 중요한 도전 과제임
     * 구글의 사례는 기술 발전이 사회적 가치와 어떻게 충돌할 수 있는지를 보여주며, 인공지능 윤리에 대한 고민을 촉구함
     * 이러한 문제는 인공지능 연구와 개발에 있어서 데이터의 다양성과 편향성을 신중하게 고려해야 한다는 점을 강조함
     * 이 이슈는 인공지능이 인간의 다양성을 어떻게 반영하고, 이를 통해 우리가 어떻게 역사를 기억하고 재현할 것인지에 대한 광범위한 질문을 제기함

        Hacker News 의견

     * 구글 내부의 제도적 부패에 대한 경고 신호로, 다양성과 포용성(DEI)에 대한 우려가 품질에 대한 초점을 넘어섰다는 개인적 견해가 있음. 구글의 기술이 정체성에 초점을 맞추고 있다면, 결국 다른 회사에 추월당할 것이라는 우려가 투자자들 사이에서 제기됨.
     * Dall-E 3은 조정된 프롬프트를 공개하고 있으며, API를 직접 사용하면 수정된 프롬프트를 볼 수 있음. 사용자는 GPT가 프롬프트를 해석하는 방식에 영향을 미치려고 시도할 수 있지만, 때때로 GPT가 사용자의 의도를 파악하고 있음을 실패한 예로 보임.
     * 현대 사회에서는 문제가 되지 않는 것들이 문제로 만들어지고 있음. 간단한 응답은 현재 데이터에 있는 진실을 반영하여 생성되어야 함. 소프트웨어 엔지니어와 CEO 대부분이 백인 남성이고, 미국 래퍼 대부분이 흑인 남성이며, 대부분의 보육사와 간호사는 다양한 인종의 여성임. 원하는 인물의 인종이나 성별이 있다면 프롬프트에 추가해야 함.
     * 이 스레드에서는 문화적 논쟁이 치열함. 이 사건은 개방형 모델의 중요성을 강조하며, AI가 교육에서 역할을 하게 된다면, 이러한 통제는 역사 수정주의자들에게 꿈같은 상황이 될 수 있음을 시사함.
     * 문제는 검열되지 않은 모델이 역사와 같은 현실을 너무 정확하게 반영하고 있다는 점에 있음.
     * 인간이 과학에서 이성과 추상화를 이용해 기술을 발전시키는 능력이 놀랍지만, 여전히 다양한 배경과 경험을 합리적으로 다루는 데는 전혀 능숙하지 않다는 점이 놀라움.
     * 다양성을 촉진하는 프롬프트가 원주민을 포함시키고 있지만 다른 모든 토착민들은 배제하고 있다는 점이 재미있다고 언급함.
     * DALL-E를 통해 가족 사진을 생성하려고 시도했을 때, 결국 성공했지만 한때 서비스 약관을 위반했다며 경고를 받은 경험이 있음.
     * 소셜 미디어에서 Gemini가 백인의 이미지를 생성하는 것을 거부했을 때 대중의 반응이 있었고, 이로 인해 역사적으로 부정확한 이미지가 생성됨. 이 문제는 주류 서사보다 더 미묘할 수 있지만, 정치적으로 민감한 사람들이 이 문제를 두고 전쟁을 벌이고 있음.
     * Gemini가 구글의 PR과 마케팅 자료에 지나치게 훈련된 것처럼 보임. 구글 스토어 웹사이트를 예로 듦.
"
"https://news.hada.io/topic?id=13443","htmz - 초소형 HTML 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         htmz - 초소형 HTML 프레임워크

     * plain HTML과 같은 단순한 방식으로 모듈식 & 동적인 웹 사용자 인터페이스를 만들 수 있는 미니멀리스트 HTML 마이크로프레임워크
     * 딱 하나의 동작만 함 : 페이지상의 모든 요소에서 HTML 리소스 로드 가능
          + 페이지의 일부만을 업데이트하는 것을 가능하게 함으로써, 페이지 조각을 교체할 수 있게 해줌
     * 총 166바이트 크기로, 순수한 HTML만 사용하며, 의존성이 없으며 JS 번들이나 백엔드, 특별한 속성이나 DSL, 사용자 정의 요소가 필요 없음
     * 실제 DOM과 상호작용을 사용하며, VDOM이나 클릭 리스너, AJAX, fetch 등을 사용하지 않음
     * iframe으로 된 인라인 HTML 스니펫만 추가하면 끝

<iframe hidden name=htmz onload=""setTimeout(()=>document.querySelector(this.contentWindow.location.hash||null)?.replaceWith(...this.contentDocument.body.childNodes))""></iframe>

기본 사용법

     * htmz를 사용하기 위해서는, 자원 URL을 가리키는 href 속성(또는 form의 action)과 목적지 ID 선택자를 가진 하이퍼링크(또는 form)가 필요함.
     * URL 조각을 목적지 ID 선택자로 재사용하는 것처럼 보이지만, 이 컨텍스트에서 URL 조각을 다른 용도로 사용하지 않으므로 재사용됨.

정확히 무엇을 하는가?

     * htmz는 페이지 내의 어떤 요소 내에서도 HTML 자원을 로드할 수 있게 하는 단일 기능을 제공함.
     * 이 아이디어는 새로운 것이 아니며, 웹 페이지를 독립적으로 리로딩하는 부분으로 나누는 것은 1990년대 중반부터 있었음.
     * htmz는 HTML 프레임의 일반화로, 페이지 내의 어떤 요소에서든 HTML 자원을 로드할 수 있음.

고급 사용법

     * 현재 HTML5에서는 와 요소만이 htmz를 대상으로 지정하고 호출할 수 있음.
     * 요소를 사용하여 모든 상대 링크에 대해 htmz를 기본 대상으로 설정할 수 있음.
     * 실제 대상 값을 사용하는 것을 선호한다면, 대상 ID 선택자를 target 속성 자체에 작성할 수 있는 해킹을 사용할 수 있음.

스크립팅 / 상호작용

     * 더 상호작용이 필요한 경우, htmz의 동반 스크립팅 언어인 JavaScript를 사용할 수 있음.
     * htmz는 JS 작성이나 UI 라이브러리 사용을 배제하지 않으며, htmz로 정규 HTTP 폼으로 여전히 폼 값을 제출할 수 있음.

확장성

     * 고급 선택자, 오류 처리, 다중 대상 등이 필요한 경우, 개발자가 필요에 따라 확장할 수 있음.

FAQ

     * htmz는 이름이 ""htmz""인 iframe으로, iframe을 통해 URL을 로드함으로써 htmz를 호출함.
     * htmz는 프록시 대상으로서, 지정된 대상으로 응답을 전달함.
     * htmz는 DOM을 지속적으로 파싱하거나 특별한 속성이나 구문을 검색하거나 DOM에 리스너를 부착하지 않음.
     * htmz는 HTML 마이크로프레임워크로, 최소한의 JS만 사용함.
     * htmz는 스니펫이며, 'Html with Targeted Manipulation Zones'의 약자임.
     * 이 프로젝트는 htmx에 대한 반응으로 시작되었으며, htmx를 사용하지 않고 현재 웹으로 로드-링크-대상 기능을 구현할 수 있는지에 대한 실험이었음.
     * htmz는 그 작은 크기에도 불구하고 강력한 느낌을 주며, 주된 제한은 응답 당 하나의 목적지만 가질 수 있다는 것임.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  GN⁺의 의견

     * 혁신적인 접근: htmz는 웹 개발에서 프레임워크의 복잡성을 줄이고, 순수 HTML을 사용하여 웹 인터페이스를 구축하는 혁신적인 접근을 제공함. 이는 초급 소프트웨어 엔지니어에게도 쉽게 접근할 수 있는 웹 개발 방식을 의미함.
     * 성능과 단순성의 조화: 166바이트의 극도로 가벼운 크기와 의존성이 없는 구조는 웹 페이지의 성능을 크게 향상시킬 수 있음. 또한, 복잡한 자바스크립트 프레임워크를 배우지 않고도 효과적인 웹 페이지를 만들 수 있는 단순성을 제공함.
     * 웹 개발의 미래: htmz는 웹 개발의 미래에 대한 흥미로운 시각을 제공함. 이는 웹 표준과 기술의 진화가 어떻게 개발자들에게 더 간단하고 효율적인 도구를 제공할 수 있는지를 보여줌.

   와 이거 신박하네요ㅋㅋ 링크에 자기는 라이브러리도 프레임워크도 아닌 단지 스니펫이라고...ㅎ

   고급 사용법: 현재 HTML5에서는 와 요소만이 -> 현재 HTML5에서는 <a>와 <form> 요소만이
   HTML 이스케이핑이 적용되지 않은 것 같습니다

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 서버 렌더링 페이지와 스타일 범위가 지정된 위젯을 위해 명명된 iframes과 타겟이 지정된 폼을 사용하는 아이디어에 대한 긍정적인 반응.
          + htmz가 이 아이디어를 잘 구현한 것으로 보임.
          + 좋은 아이디어를 포기하지 말고, 완성도와 우수성에 집중하며, 아이디어를 잘 전달할 것을 강조.
          + 브라우저가 SPA를 기본적으로 제공할 수 있음을 보여주는 훌륭한 해킹으로 평가.
          + 플랫폼을 잘 이해하고 있는 누군가의 멋진 시연.
          + 바닐라 웹이 간단하고 강력해야 한다는 의견.
          + 웹의 주어진 재료를 최대한 활용하는 것에 대한 긍정적인 평가.
          + 창작자의 커뮤니케이션 및 마케팅 기술에 대한 칭찬.
     * 두 번째 댓글 요약:
          + 브라우저가 SPA를 기본적으로 제공할 수 있음을 보여주는 해킹.
          + iframe을 피하기 위해 몇 가지 속성만 필요함.
          + 실제 도구보다는 포인트를 증명하는 데 더 유용할 수 있음.
          + htmx가 제공하는 것에 비해 너무 복잡함을 지적.
     * 세 번째 댓글 요약:
          + 2001년경 HTML 기반 이메일 클라이언트 개발 경험 공유.
          + 숨겨진 iframe을 사용하여 서버에서 데이터를 로드하고 DOM을 조작함.
          + 당시에는 브라우저 지원이 충분하지 않았지만, 기본 메커니즘은 동일함.
          + 라이브러리가 많이 필요 없이 간결한 패키지로 구현된 것에 대한 긍정적인 평가.
          + 현재 많이 사용되는 React 등의 프론트엔드 프레임워크에 비해 대부분의 사용 사례에 적합할 수 있음.
     * 네 번째 댓글 요약:
          + DOM을 응답으로 대체하는 행위가 플랫폼의 일부가 되어야 한다는 강력한 주장.
          + 외부 콘텐츠를 선언적으로 페이지에 로드할 수 있는 요소에 대한 첫 번째 단계 제안.
          + HTML이 링크의 대상이 될 수 있는 요소를 지원해야 함을 언급.
     * 다섯 번째 댓글 요약:
          + 플랫폼을 정말로 이해하는 사람의 멋진 시연에 대한 칭찬.
          + 실제로 사용할 가능성은 낮지만, 훌륭하다고 평가.
     * 여섯 번째 댓글 요약:
          + 인라인 이벤트 리스너에서 this.를 제거하여 코드 크기를 더 줄일 수 있는 제안.
          + 스니펫에서 10바이트를 절약할 수 있는 팁 제공.
     * 일곱 번째 댓글 요약:
          + target을 사용함으로써 JS가 비활성화되었을 때 htmx처럼 우아하게 저하되지 않을 수 있음을 지적.
          + JS 비활성화 상황에 대한 이상주의적인 관점 표현.
     * 여덟 번째 댓글 요약:
          + <slot> 요소를 이런 식으로 재사용하는 것은 나쁜 아이디어라고 지적.
          + 브라우저에서 <slot>은 매우 특정한 동작을 하며, 라이브러리가 무엇을 하든 호스트 요소의 자식으로 대체됨.
          + 이와 같은 상황에는 <output> 요소가 이미 존재함을 언급.
     * 아홉 번째 댓글 요약:
          + 데모 섹션에 대한 개선 필요성 지적.
          + ""탭""을 클릭하여 예제 코드를 변경하면 히스토리 이벤트는 추가되지만 URL은 업데이트되지 않음.
          + ""단순히 HTML""을 주장하는 것에 대해 웹/UX의 기본 규칙을 어기고 있음을 비판.
     * 열 번째 댓글 요약:
          + pjax와 유사한 점을 상기시키는데, pjax는 iframe 대신 XHR을 사용하고 기본적으로 pushState를 사용하여 뒤로 가기 버튼이 작동하도록 함.
"
"https://news.hada.io/topic?id=13517","파워 메탈: 정말로 드래곤에 관한 것인가? (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     파워 메탈: 정말로 드래곤에 관한 것인가? (2018)

파워 메탈: 정말로 드래곤에 관한 것인가?

     * 파워 메탈의 어휘력 분석을 통해 장르의 특징과 가사의 내용을 탐구함.
     * 58개 밴드의 가사를 사용하여 데이터셋을 구축하고, 여러 분석 방법을 통해 파워 메탈의 어휘와 주제를 파악함.
     * 가장 어휘가 풍부한 밴드와 가장 긍정적 및 부정적인 노래를 식별함.

데이터셋

     * 58개 밴드와 4808곡의 영어 가사를 포함하는 데이터셋 사용.
     * 밴드 분포는 주로 독일과 스웨덴이며, 이는 /r/powermetal의 앨범 추천에 기반함.

가사 분석

  어휘

     * 어휘 범위는 여러 방법으로 계산 가능하며, 여기서는 단어의 줄기(stem)를 기반으로 함.
     * 2018년 기준으로 가장 어휘가 풍부한 밴드는 Running Wild, Helloween, Elvenking임.

  파워 메탈 노래의 특징

     * 가사에서 단어의 중요성을 파악하기 위해 tf-idf 분석 사용.
     * 파워 메탈은 드래곤(47위)보다는 deliverance, honour, defender, realm과 같은 단어가 중요함.
     * 가장 파워 메탈스러운 노래와 가장 그렇지 않은 노래를 식별함.

  밴드별 중요 단어

     * Alestorm, Manowar, Rhapsody, Sabaton 등의 밴드가 각각의 주제에 맞는 중요 단어를 가짐.

  가사를 통한 밴드 클러스터링

     * 가사의 유사성을 기반으로 밴드 간의 클러스터링을 수행함.
     * Rhapsody, Edguy, Blind Guardian, Manowar 등의 밴드가 각각의 클러스터를 형성함.

  감정 분석

     * VADER를 사용하여 가사의 감정을 분석함.
     * 가장 긍정적인 노래와 밴드, 그리고 가장 부정적인 노래와 밴드를 식별함.

결론

     * 파워 메탈은 드래곤에 그다지 집중하지 않으며, 판타지와 서사적 스타일이 더 중요함.
     * 새로운 밴드 발견과 분석 업데이트 계획이 있음.

감사의 말

     * 조언과 피드백을 준 Jorge에게 감사함.

추가 읽을거리

     * 헤비 메탈 가사의 키워드, 감정 분석 등에 관한 연구 자료 제공.

참조

     * 여러 출처에서 얻은 정보와 데이터셋, 분석 도구에 대한 링크 제공.


    GN⁺의 의견

     * 파워 메탈의 본질: 이 글은 파워 메탈이 단순히 드래곤에 관한 것이 아니라, 서사적이고 판타지적인 요소가 강한 장르임을 밝혀줌. 이는 음악 장르에 대한 편견을 깨고, 더 깊이 있는 이해를 돕는다.
     * 데이터 과학의 적용: 어휘력, 감정 분석 등 데이터 과학 기법을 음악 분석에 적용한 점이 흥미로움. 이는 데이터 과학이 다양한 분야에서 유용하게 활용될 수 있음을 보여줌.
     * 문화적 통찰: 가사 분석을 통해 특정 문화 현상이나 장르의 특징을 이해하는 데 기여함. 이는 음악을 통한 문화 연구에 있어 새로운 방법론을 제시함.

        Hacker News 의견

     * Blind Guardian 발견에 대한 감상
          + 최근에 Blind Guardian을 발견함. 일반적으로 스래시 메탈을 듣지만 파워 메탈은 드물게 들음.
          + 뛰어난 보컬, 멋진 합창, 기타와 보컬 모두에서 독특하고 특별한 멜로디 감각.
          + 보컬, 기타, 드럼 모두 뚜렷하고 독특한 파트를 가지고 있음이 매력적.
          + 다른 밴드들은 종종 한 악기가 지배적이어서 지루해지는데, Blind Guardian은 보컬과 기타 모두 훌륭함.
          + 처음 합창을 들었을 때 기타 솔로가 실망스러울 것이라 생각했지만, 기대를 뛰어넘는 기타 솔로와 드럼 연주에 감탄함.
          + Blind Guardian을 발견한 것이 인생을 2% 더 나아지게 함.
     * 파워 메탈에 대한 발견
          + 긍정적인 서브 장르를 찾아 파워 메탈을 발견함.
          + 이전에 듣던 음악은 종종 죽음, 폭력, 사탄주의 등의 주제를 다룸.
     * 메탈 음악 데이터베이스에 대한 의견
          + Encyclopaedia Metallum이 데이터베이스로 더 적합할 것이라는 의견.
          + 다양한 시대에 여러 장르의 음악을 만든 밴드들로 인해 노이즈가 더 클 수 있음.
     * 해커뉴스에서의 파워 메탈과 데이터 사이언스에 대한 글
          + 해커뉴스에서만 데이터 사이언스와 파워 메탈에 대한 글을 볼 수 있음. 매우 기술적이지만 멋짐.
     * 메탈 밴드 클러스터링에 대한 평가
          + 기사에서의 밴드 클러스터링이 인상적임.
          + 많은 밴드를 알고 있으며, 대체로 그룹화에 동의함.
          + 완벽하지는 않지만, 예를 들어 Helloween - Gamma Ray - Masterplan 같은 그룹화는 공유하는 작사가가 있음.
          + Kamelot - Angra - Stratovarius 같은 덜 명백한 그룹화에도 동의함.
          + 저자에게 박수를 보냄.
     * 크리스토퍼 리의 파워 메탈 참여
          + 메탈 음악에 익숙하지 않은 사람들은 크리스토퍼 리가 생애 후반에 파워 메탈 장면에 적극적으로 참여했다는 사실을 흥미롭게 생각할 수 있음.
     * Rhapsody of Fire와 Rhapsody의 분리에 대한 설명
          + Rhapsody of Fire는 상표 분쟁을 피하기 위해 2006년에 이름을 변경함.
          + 2009년경에 분리되었으며, 주요 부분은 여전히 Rhapsody of Fire로 불리고, 분리된 밴드는 Luca Turilli's Rhapsody로 불림.
     * 파워 메탈에 대한 선호
          + 파워 메탈은 클래식 헤비 메탈(아이언 메이든, 오지 오스본, 모터헤드, 주다스 프리스트)에 가장 가까운 장르이며, 거의 아무도 클래식 헤비 메탈을 더 이상 부르지 않음.
     * 2023년의 실험적이고 전위적인 메탈 앨범 추천
          + 실험적이고 전위적인 프로그레시브 스타일을 좋아하는 메탈 팬들에게 Thantifaxath와 Blut Aus Nord의 2023년 앨범을 추천함.
          + 2023년 최고의 메탈 앨범으로는 Cattle Decapitation의 Terrasite를 꼽음. 이 밴드들은 복잡하고 신비로운, 무거운 음악을 만들고 있으며, 드래곤이 등장하지 않음.
     * Nightwish의 ""Endless Forms Most Beautiful"" 같은 컨셉트 앨범을 만드는 밴드
          + Nightwish의 ""Endless Forms Most Beautiful""와 같은 컨셉트 앨범을 만드는 다른 밴드가 있는지 궁금함.
"
"https://news.hada.io/topic?id=13426","[2024/02/12 ~ 02/18] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2024/02/12 ~ 02/18] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

  개요

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주에 선정된 논문들은 자연어 처리, 심층신경망, 강화학습 분야의 최신 연구 동향을 반영하고 있습니다. 또한, 자연어 처리(NLP) 관련 기술에 대한 논문들이 이번 주에 주목받았습니다. 그 외에도 ""World Model"", ""neural network trainability""라는 용어는 강화학습이나 심층신경망의 이론적 측면과 관련이 있어보입니다.
     * 최근 인공지능 분야는 대규모 언어 모델의 발전에 큰 관심을 보이고 있습니다. 이는 GPT-3와 같은 모델이 다양한 언어 기반 작업에서 놀라운 성능을 보여준 후로, 자연어 처리 기술이 이론적 연구와 실용적 응용 모두에서 중요한 주제로 떠올랐기 때문입니다. 대규모 언어 모델은 번역, 요약, 질의응답, 생성적 작문 등 다양한 NLP 작업에 사용될 수 있으며, 이러한 모델의 이해와 개선에 관한 연구가 활발합니다.
     * 또한, ""neural network trainability"" 및 ""World Model""과 같은 개념은 심층신경망을 더 효과적으로 학습하고, 더 복잡한 환경을 모델링할 수 있는 신기술에 대한 연구를 시사합니다. 강화학습 분야에서는 더 정교한 환경 모델을 통해 에이전트가 보다 복잡한 문제를 해결할 수 있는 능력을 개발하는 데 초점을 맞추며 이 또한 현대 AI 연구에 있어 중요한 추세입니다.
     * 이 글은 GPT 모델로 정리한 것으로, 잘못된 부분이 있을 수 있으니 글 아래쪽의 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다.


  OpenAI의 Sora

    논문 소개

     * 텍스트 지시가 주어지면 최대 1분 분량의 사실적이고 상상력이 풍부한 장면을 동영상으로 만들 수 있는 텍스트-비디오 AI 모델로, 여러 캐릭터, 다양한 동작 유형 및 배경이 포함된 복잡한 장면을 생성하고 서로의 관계를 이해할 수 있으며, 캐릭터와 비주얼 스타일을 일관되게 유지하면서 단일 동영상 내에서 여러 장면을 생성하는 등의 기능을 갖추고 있습니다.

     A text-to-video ai model that can create videos of up to a minute of realistic and imaginative scenes given text instructions; it can generate complex scenes with multiple characters, different motion types, and backgrounds, and understand how they relate to each other; other capabilities include creating multiple shots within a single video with persistence across characters and visual style.

    논문 링크

   https://openai.com/research/…

    더 읽어보기

   https://discuss.pytorch.kr/t/gn-openai-sora-ai/3519

   https://x.com/OpenAI/status/1758192957386342435


  제미나이 1.5 / Gemini 1.5

    논문 소개

     * 긴 형식의 콘텐츠를 리콜하고 추론하는 등의 기능에 초점을 맞춘 컴퓨팅 효율적인 다중 모드 혼합 전문가 모델로, 몇 시간의 비디오와 오디오를 포함해 수백만 개의 토큰이 포함된 긴 문서를 추론할 수 있으며 긴 문서 QA, 긴 비디오 QA 및 긴 컨텍스트 ASR에서 최첨단 성능을 향상시킵니다. Gemini 1.5 pro는 표준 벤치마크에서 Gemini 1.0 ultra와 일치하거나 더 나은 성능을 보이며, 다른 긴 컨텍스트 llms에 비해 크게 발전한 최소 1000만 개의 토큰까지 거의 완벽한 검색(>99%)을 달성합니다.

     A compute-efficient multimodal mixture-of-experts model that focuses on capabilities such as recalling and reasoning over long-form content; it can reason over long documents potentially containing millions of tokens, including hours of video and audio; improves the state-of-the-art performance in long-document qa, long-video qa, and long-context asr. gemini 1.5 pro matches or outperforms gemini 1.0 ultra across standard benchmarks and achieves near-perfect retrieval (>99%) up to at least 10 million tokens, a significant advancement compared to other long-context llms.

    논문 링크

   https://storage.googleapis.com/deepmind-media/gemini/…

    더 읽어보기

   https://discuss.pytorch.kr/t/gn-gemini-1-5/3518

   https://x.com/omarsar0/status/1758151923612483839


  V-JEPA

    논문 소개

     * 2백만 개의 동영상을 사용하여 특징 예측 목표에 대해 학습된 비전 모델 모음, 자체 감독 학습에 의존하며 사전 학습된 이미지 인코더, 텍스트, 부정적인 예제, 재구성 또는 기타 감독 소스를 사용하지 않음, 모델의 파라미터를 조정하지 않고도 동작 및 외모 기반 작업 모두에서 잘 수행되는 다목적 시각적 표현을 달성한다고 주장합니다.

     A collection of vision models trained on a feature prediction objective using 2 million videos; relies on self-supervised learning and doesn’t use pretrained image encoders, text, negative examples, reconstruction, or other supervision sources; claims to achieve versatile visual representations that perform well on both motion and appearance-based tasks, without adaption of the model’s parameters.

    논문 초록(Abstract)

   이 논문에서는 비디오에서 비지도 학습을 위한 독립적인 목표로서 특징 예측을 살펴보고 사전 학습된 이미지 인코더, 텍스트, 부정 예제, 재구성 또는 기타 감독 소스를 사용하지 않고 특징 예측 목표만을 사용해 학습된 비전 모델 모음인 V-JEPA를 소개합니다. 이 모델은 공개 데이터세트에서 수집한 2백만 개의 비디오로 학습되었으며, 다운스트림 이미지 및 비디오 작업에서 평가되었습니다. 그 결과, 비디오 특징을 예측하여 학습하면 모델의 매개변수를 조정하지 않고도 모션 및 외관 기반 작업 모두에서 우수한 성능을 발휘하는 다목적 시각적 표현을 얻을 수 있습니다. 예를 들어, 비디오에만 훈련된 가장 큰 모델인 ViT-H/16은 프로즌 백본을 사용하여 Kinetics-400에서 81.9%, Something-Something-v2에서 72.2%, ImageNet1K에서 77.9%의 정확도를 기록했습니다.

     This paper explores feature prediction as a stand-alone objective for unsupervised learning from video and introduces V-JEPA, a collection of vision models trained solely using a feature prediction objective, without the use of pretrained image encoders, text, negative examples, reconstruction, or other sources of supervision. The models are trained on 2 million videos collected from public datasets and are evaluated on downstream image and video tasks. Our results show that learning by predicting video features leads to versatile visual representations that perform well on both motion and appearance-based tasks, without adaption of the model’s parameters; e.g., using a frozen backbone, our largest model, a ViT-H/16 trained only on videos, obtains 81.9% on Kinetics-400, 72.2% on Something-Something-v2, and 77.9% on ImageNet1K.

    논문 링크

   https://ai.meta.com/research/publications/…

    더 읽어보기

   https://ai.meta.com/blog/…

   https://github.com/facebookresearch/jepa

   https://x.com/AIatMeta/status/1758176023588577326


  LWM(Large World Model): 링어텐션으로 백만 길이의 동영상과 언어를 사용하는 모델 / World Model on Million-Length Video And Language With RingAttention

    논문 소개

     * 링어텐션을 사용해 긴 동영상과 책에 대해 학습된 범용 1M 컨텍스트 멀티모달 모델, 어려운 검색 작업과 긴 동영상 이해에서 새로운 벤치마크 설정, 다양한 시퀀스 길이, 손실 가중치, 모델 생성 qa 데이터셋을 혼합해 긴 시퀀스 채팅에 마스크된 시퀀스 패킹 사용, 1M 이상의 긴 텍스트와 동영상을 처리할 수 있는 7B 파라미터 모델군 오픈소스화.

     A general-purpose 1m context multimodal model trained on long videos and books using ringattention; sets new benchmarks in difficult retrieval tasks and long video understanding; uses masked sequence packing for mixing different sequence lengths, loss weighting, and model-generated qa dataset for long sequence chat; open-sources a family of 7b parameter models that can process long text and videos of over 1m tokens.

    논문 초록(Abstract)

     * 현재의 언어 모델은 말로 쉽게 설명할 수 없는 세계의 측면을 이해하는 데 부족함이 있으며, 복잡하고 긴 형식의 작업에는 어려움을 겪습니다. 비디오 시퀀스는 언어와 정적 이미지에는 없는 귀중한 시간적 정보를 제공하므로 언어와의 공동 모델링에 매력적입니다. 이러한 모델은 인간의 텍스트 지식과 물리적 세계에 대한 이해를 모두 발전시켜 인간을 보조하는 더 광범위한 AI 기능을 구현할 수 있습니다. 그러나 수백만 개의 비디오 및 언어 시퀀스로부터 학습하는 것은 메모리 제약, 계산 복잡성, 제한된 데이터 세트로 인해 어려움을 겪습니다. 이러한 문제를 해결하기 위해 다양한 동영상과 책으로 구성된 대규모 데이터셋을 큐레이션하고, 긴 시퀀스를 확장 가능하게 학습하기 위해 링어텐션 기술을 활용하며, 컨텍스트 크기를 4K에서 1백만 토큰으로
       점진적으로 늘립니다. 이 논문은 다음과 같은 기여를 합니다. (a) 가장 큰 컨텍스트 크기 신경망: 긴 비디오 및 언어 시퀀스에 대해 가장 큰 컨텍스트 크기 변환기 중 하나를 학습하여 어려운 검색 작업과 긴 비디오 이해에서 새로운 벤치마크를 설정합니다. (b) 다양한 시퀀스 길이를 혼합하기 위한 마스크된 시퀀스 패킹 사용, 언어와 시각의 균형을 맞추기 위한 손실 가중치, 긴 시퀀스 채팅을 위한 모델 생성 QA 데이터 세트 등 비전-언어 학습 문제를 극복하기 위한 솔루션. (c) 수백만 개의 길이를 가진 멀티모달 시퀀스 학습을 위해 링어텐션, 마스크된 시퀀스 패킹 및 기타 주요 기능을 사용하여 고도로 최적화된 구현. (d) 100만 개 이상의 토큰으로 구성된 긴 텍스트 문서(LWM-Text, LWM-Text-Chat)와 동영상(LWM, LWM-Chat)을 처리할 수 있는 7B 파라미터 모델 제품군을
       완전히 오픈소스화했습니다. 이 작업은 긴 동영상과 언어의 방대한 데이터셋에 대한 학습을 통해 인간의 지식과 멀티모달 세계에 대한 이해와 더 넓은 역량을 개발할 수 있는 길을 열어줍니다.

     Current language models fall short in understanding aspects of the world not easily described in words, and struggle with complex, long-form tasks. Video sequences offer valuable temporal information absent in language and static images, making them attractive for joint modeling with language. Such models could develop a understanding of both human textual knowledge and the physical world, enabling broader AI capabilities for assisting humans. However, learning from millions of tokens of video and language sequences poses challenges due to memory constraints, computational complexity, and limited datasets. To address these challenges, we curate a large dataset of diverse videos and books, utilize the RingAttention technique to scalably train on long sequences, and gradually increase context size from 4K to 1M tokens. This paper makes the following contributions: (a) Largest context size neural network: We train one of the largest context size transformers on long video and
     language sequences, setting new benchmarks in difficult retrieval tasks and long video understanding. (b) Solutions for overcoming vision-language training challenges, including using masked sequence packing for mixing different sequence lengths, loss weighting to balance language and vision, and model-generated QA dataset for long sequence chat. (c) A highly-optimized implementation with RingAttention, masked sequence packing, and other key features for training on millions-length multimodal sequences. (d) Fully open-sourced a family of 7B parameter models capable of processing long text documents (LWM-Text, LWM-Text-Chat) and videos (LWM, LWM-Chat) of over 1M tokens. This work paves the way for training on massive datasets of long video and language to develop understanding of both human knowledge and the multimodal world, and broader capabilities.

    논문 링크

   https://arxiv.org/abs/2402.08268

    더 읽어보기

   https://largeworldmodel.github.io/

   https://huggingface.co/LargeWorldModel

   https://x.com/haoliuhl/status/1757828392362389999


  신경망 학습 가능성의 경계는 프랙탈입니다 / The boundary of neural network trainability is fractal

    논문 소개

     * 학습 가능한 신경망 하이퍼파라미터 구성과 학습 불가능한 신경망 하이퍼파라미터 구성 사이의 경계가 프랙탈임을 발견하고, 모든 신경망 구성과 심층 선형 네트워크의 프랙탈 하이퍼파라미터 풍경을 관찰하고, 가장 성능이 좋은 하이퍼파라미터가 안정성의 끝에 있다는 것을 관찰합니다.

     Finds that the boundary between trainable and untrainable neural network hyperparameter configurations is fractal; observes fractal hyperparameter landscapes for every neural network configuration and deep linear networks; also observes that the best-performing hyperparameters are at the end of stability.

    논문 초록(Abstract)

     * 예를 들어 만델브로트 및 이차 줄리아 집합과 관련된 일부 프랙탈은 함수를 반복하고 결과 수열이 발산하거나 경계를 유지하는 하이퍼파라미터 사이의 경계를 식별하여 계산됩니다. 신경망 학습도 마찬가지로 업데이트 함수를 반복적으로 적용하고(예: 경사 하강 단계 반복), 수렴 또는 발산 동작이 발생할 수 있으며, 하이퍼파라미터의 작은 변화에 매우 민감하게 반응할 수 있습니다. 이러한 유사성에 착안하여 안정적 학습과 발산적 학습으로 이어지는 신경망 하이퍼파라미터 사이의 경계를 실험적으로 조사했습니다. 테스트한 모든 구성에서 이 경계가 수십 배 이상의 규모에 걸쳐 프랙탈 형태로 존재한다는 사실을 발견했습니다.

     Some fractals -- for instance those associated with the Mandelbrot and quadratic Julia sets -- are computed by iterating a function, and identifying the boundary between hyperparameters for which the resulting series diverges or remains bounded. Neural network training similarly involves iterating an update function (e.g. repeated steps of gradient descent), can result in convergent or divergent behavior, and can be extremely sensitive to small changes in hyperparameters. Motivated by these similarities, we experimentally examine the boundary between neural network hyperparameters that lead to stable and divergent training. We find that this boundary is fractal over more than ten decades of scale in all tested configurations.

    논문 링크

   https://arxiv.org/abs/2402.06184

    더 읽어보기

   https://x.com/jaschasd/status/1756930242965606582


  OS-Copilot: 자기 개발을 통한 제너럴리스트 컴퓨터 에이전트를 향하여 / OS-Copilot: Towards Generalist Computer Agents with Self-Improvement

    논문 소개

     * 리눅스나 맥OS와 같은 운영체제의 핵심 요소와 인터페이스하는 범용 컴퓨터 에이전트를 구축하는 프레임워크로, 일반 컴퓨터 작업을 자동화하기 위해 스스로 개선되는 구현 에이전트를 제안하며, 이 에이전트는 일반 AI 비서(GAIA) 벤치마크에서 이전 방법보다 35% 더 뛰어난 성능을 발휘합니다.

     a framework to build generalist computer agents that interface with key elements of an operating system like linux or macos; it also proposes a self-improving embodied agent for automating general computer tasks; this agent outperforms the previous methods by 35% on the general ai assistants (gaia) benchmark.

    논문 초록(Abstract)

     * 컴퓨터와의 자율적인 상호 작용은 큰 잠재력을 지닌 오랜 과제였으며, 최근 대규모 언어 모델(LLM)의 확산으로 디지털 에이전트 구축의 진전이 눈에 띄게 빨라졌습니다. 그러나 이러한 에이전트의 대부분은 특정 소프트웨어나 웹사이트와 같은 좁은 도메인과 상호 작용하도록 설계되었습니다. 이러한 좁은 초점은 일반적인 컴퓨터 작업에 대한 적용 가능성을 제한합니다. 이를 위해 웹, 코드 터미널, 파일, 멀티미디어, 다양한 타사 애플리케이션 등 운영 체제(OS)의 포괄적인 요소와 상호 작용할 수 있는 제너럴리스트 에이전트를 구축할 수 있는 프레임워크인 OS-Copilot을 소개합니다. 저희는 OS-Copilot을 사용하여 일반적인 컴퓨터 작업을 자동화하기 위해 스스로 개선되는 구체화된 에이전트인 FRIDAY를 만들었습니다. 일반적인 AI 어시스턴트 벤치마크인 GAIA에서
       FRIDAY는 이전 방식보다 35% 더 뛰어난 성능을 보이며, 이전 작업에서 축적된 기술을 통해 보이지 않는 애플리케이션에 대한 강력한 일반화 능력을 보여줍니다. 또한 최소한의 감독 없이도 FRIDAY가 Excel과 파워포인트를 제어하고 스스로 개선하는 방법을 학습한다는 수치적, 정량적 증거를 제시합니다. OS-Copilot 프레임워크와 경험적 연구 결과는 더 유능하고 범용적인 컴퓨터 에이전트를 향한 향후 연구를 위한 인프라와 통찰력을 제공합니다.

     Autonomous interaction with the computer has been a longstanding challenge with great potential, and the recent proliferation of large language models (LLMs) has markedly accelerated progress in building digital agents. However, most of these agents are designed to interact with a narrow domain, such as a specific software or website. This narrow focus constrains their applicability for general computer tasks. To this end, we introduce OS-Copilot, a framework to build generalist agents capable of interfacing with comprehensive elements in an operating system (OS), including the web, code terminals, files, multimedia, and various third-party applications. We use OS-Copilot to create FRIDAY, a self-improving embodied agent for automating general computer tasks. On GAIA, a general AI assistants benchmark, FRIDAY outperforms previous methods by 35%, showcasing strong generalization to unseen applications via accumulated skills from previous tasks. We also present numerical and
     quantitative evidence that FRIDAY learns to control and self-improve on Excel and Powerpoint with minimal supervision. Our OS-Copilot framework and empirical findings provide infrastructure and insights for future research toward more capable and general-purpose computer agents.

    논문 링크

   https://arxiv.org/abs/2402.07456

    더 읽어보기

   https://x.com/omarsar0/status/1757443594976206885


  TestGen-LLM: 메타에서 대규모 언어 모델을 사용하여 자동화된 단위 테스트 개선 / Automated Unit Test Improvement using Large Language Models at Meta

    논문 소개

     * 인스타그램의 릴스 및 스토리들에 대한 평가 후 TestGen-LLM의 테스트 케이스 중 75%가 올바르게 구축되었고 57%가 안정적으로 통과했으며 25%의 커버리지가 증가했다고 보고합니다.

     Uses llms to automatically improve existing human-written tests; reports that after an evaluation on reels and stories products for instagram, 75% of testgen-llm's test cases were built correctly, 57% passed reliably, and 25% increased coverage.

    논문 초록(Abstract)

     * 이 논문에서는 LLM을 사용하여 기존 사람이 작성한 테스트를 자동으로 개선하는 Meta의 TestGen-LLM 도구에 대해 설명합니다. TestGen-LLM은 생성된 테스트 클래스가 원래 테스트 스위트보다 측정 가능한 개선을 보장하는 일련의 필터를 성공적으로 통과하는지 확인하여 LLM 환각으로 인한 문제를 제거합니다. Instagram 및 Facebook 플랫폼에 대한 메타 테스트에서 TestGen-LLM을 배포하는 방법을 설명합니다. Instagram용 릴 및 스토리 제품에 대한 평가에서 TestGen-LLM의 테스트 케이스 중 75%가 올바르게 빌드되었고, 57%가 안정적으로 통과했으며, 25%는 커버리지가 증가했습니다. Meta의 Instagram 및 Facebook 테스트톤에서 이 솔루션은 적용된 모든 클래스의 11.5%를 개선했으며, 메타 소프트웨어 엔지니어가 권장한 사항 중 73%가 프로덕션 배포를 위해 수용되었습니다. 이 보고서는 이러한
       코드 개선에 대한 확신이 뒷받침된 LLM 생성 코드의 산업 규모 배포에 대한 최초의 보고서라고 생각합니다.

     This paper describes Meta's TestGen-LLM tool, which uses LLMs to automatically improve existing human-written tests. TestGen-LLM verifies that its generated test classes successfully clear a set of filters that assure measurable improvement over the original test suite, thereby eliminating problems due to LLM hallucination. We describe the deployment of TestGen-LLM at Meta test-a-thons for the Instagram and Facebook platforms. In an evaluation on Reels and Stories products for Instagram, 75% of TestGen-LLM's test cases built correctly, 57% passed reliably, and 25% increased coverage. During Meta's Instagram and Facebook test-a-thons, it improved 11.5% of all classes to which it was applied, with 73% of its recommendations being accepted for production deployment by Meta software engineers. We believe this is the first report on industrial scale deployment of LLM-generated code backed by such assurances of code improvement.

    논문 링크

   https://arxiv.org/abs/2402.09171

    더 읽어보기

   https://x.com/nathanbenaich/status/1758036247115608317


  ChemLLM: 화학 분야의 대규모 언어 모델 / ChemLLM: A Chemical Large Language Model

    논문 소개

     * 이름 변환, 분자 캡션, 반응 예측과 같은 주요 작업에서 GPT-3.5보다 성능이 뛰어나며, 이 중 두 가지 작업에서는 GPT-4를 능가한다고 주장하며 화학 관련 작업을 위해 학습된 전용 LLM입니다.

     A dedicated llm trained for chemistry-related tasks; claims to outperform gpt-3.5 on principal tasks such as name conversion, molecular caption, and reaction prediction; it also surpasses gpt-4 on two of these tasks.

    논문 초록(Abstract)

     * 대규모 언어 모델(LLM)은 분자 특성 예측, 분자 생성, 실험 프로토콜 설계 등 화학 분야에서 괄목할 만한 발전을 이루었습니다. 그러나 커뮤니티에는 화학을 위해 특별히 설계된 대화 기반 모델이 부족합니다. 이 문제는 대부분의 화학 데이터와 과학 지식이 주로 구조화된 데이터베이스에 저장되어 있고, 이러한 구조화된 데이터를 직접 사용하면 일관된 대화를 유지하는 모델의 기능이 저하된다는 사실에서 비롯됩니다. 이 문제를 해결하기 위해 구조화된 지식을 일반 대화로 변환하여 언어 모델 학습에 적합한 새로운 템플릿 기반 명령어 구성 방법을 개발했습니다. 이러한 접근 방식을 활용하여 화학 분야 전반에 걸쳐 다양한 작업을 원활한 대화 상호작용으로 수행할 수 있는 최초의 화학 전용 대규모 언어 모델인 ChemLLM을 개발했습니다. ChemLLM은 이름 변환,
       분자 캡션, 반응 예측 등 화학의 세 가지 주요 작업 모두에서 GPT-3.5를 능가하고, 그 중 두 가지 작업에서는 GPT-4를 능가합니다. 놀랍게도 ChemLLM은 화학 중심의 말뭉치를 중심으로 학습되었음에도 불구하고 관련 수학적 및 물리적 작업에 대한 뛰어난 적응력을 보여줍니다. 또한 ChemLLM은 문헌 번역 및 화학 포매틱 프로그래밍과 같은 화학 분야의 전문 NLP 작업에도 능숙함을 보여줍니다. ChemLLM은 화학 연구에서 새로운 탐색의 길을 열어주며, 구조화된 화학 지식을 대화 시스템에 통합하는 방식은 다양한 과학 분야에서 LLM을 개발하는 새로운 지평을 열어줍니다. 코드, 데이터 세트 및 모델 가중치는 hf.co/AI4Chem/ChemLLM-7B-Chat에서 공개적으로 액세스할 수 있습니다.

     Large language models (LLMs) have made impressive progress in chemistry applications, including molecular property prediction, molecular generation, experimental protocol design, etc. However, the community lacks a dialogue-based model specifically designed for chemistry. The challenge arises from the fact that most chemical data and scientific knowledge are primarily stored in structured databases, and the direct use of these structured data compromises the model's ability to maintain coherent dialogue. To tackle this issue, we develop a novel template-based instruction construction method that transforms structured knowledge into plain dialogue, making it suitable for language model training. By leveraging this approach, we develop ChemLLM, the first large language model dedicated to chemistry, capable of performing various tasks across chemical disciplines with smooth dialogue interaction. ChemLLM beats GPT-3.5 on all three principal tasks in chemistry, i.e., name
     conversion, molecular caption, and reaction prediction, and surpasses GPT-4 on two of them. Remarkably, ChemLLM also shows exceptional adaptability to related mathematical and physical tasks despite being trained mainly on chemical-centric corpora. Furthermore, ChemLLM demonstrates proficiency in specialized NLP tasks within chemistry, such as literature translation and cheminformatic programming. ChemLLM opens up a new avenue for exploration within chemical studies, while our method of integrating structured chemical knowledge into dialogue systems sets a new frontier for developing LLMs across various scientific fields. Codes, Datasets, and Model weights are publicly accessible at hf.co/AI4Chem/ChemLLM-7B-Chat.

    논문 링크

   https://arxiv.org/abs/2402.06852

    더 읽어보기

   https://hf.co/AI4Chem/ChemLLM-7B-Chat

   https://x.com/omarsar0/status/1757246740539773165


  대규모 언어 모델: 서베이 논문 / Large Language Models: A Survey

    논문 소개

     * 세 가지 인기 있는 LLM 제품군(GPT, Llama, PaLM)과 그 특징, 기여도, 한계를 검토하고, LLM 구축 및 보강을 위해 개발된 기능과 기술을 요약하며, LLM 학습, 미세 조정 및 평가를 위해 널리 사용되는 데이터 세트와 LLM 평가 메트릭에 대해서도 논의하고, 미해결 과제와 향후 연구 방향으로 마무리합니다.

     Reviews three popular families of llms (gpt, llama, palm), their characteristics, contributions, and limitations; includes a summary of capabilities and techniques developed to build and augment llm; it also discusses popular datasets for llm training, fine-tuning, and evaluation, and llm evaluation metrics; concludes with open challenges and future research directions.

    논문 초록(Abstract)

     * 대규모 언어 모델(LLM)은 2022년 11월 ChatGPT 출시 이후 다양한 자연어 작업에 대한 강력한 성능으로 인해 많은 관심을 받고 있습니다. LLM의 범용 언어 이해 및 생성 능력은 대규모 텍스트 데이터에 대한 수십억 개의 모델 파라미터를 학습함으로써 획득되며, 이는 스케일링 법칙 \cite{kaplan2020scaling,hoffmann2022training}에 따라 예측됩니다. LLM의 연구 분야는 매우 최근에 시작되었지만 다양한 방식으로 빠르게 발전하고 있습니다. 이 논문에서는 널리 사용되는 세 가지 LLM 제품군(GPT, LLaMA, PaLM)을 포함해 가장 눈에 띄는 LLM을 검토하고 그 특징, 기여도 및 한계에 대해 논의합니다. 또한 LLM을 구축하고 보강하기 위해 개발된 기술에 대한 개요도 제공합니다. 그런 다음 LLM 학습, 미세 조정 및 평가를 위해 준비된 인기 있는 데이터셋을 조사하고, 널리 사용되는 LLM 평가
       지표를 검토하며, 대표적인 벤치마크 세트에서 몇 가지 인기 있는 LLM의 성능을 비교합니다. 마지막으로 미해결 과제와 향후 연구 방향에 대해 논의하며 논문을 마무리합니다.

     Large Language Models (LLMs) have drawn a lot of attention due to their strong performance on a wide range of natural language tasks, since the release of ChatGPT in November 2022. LLMs' ability of general-purpose language understanding and generation is acquired by training billions of model's parameters on massive amounts of text data, as predicted by scaling laws \cite{kaplan2020scaling,hoffmann2022training}. The research area of LLMs, while very recent, is evolving rapidly in many different ways. In this paper, we review some of the most prominent LLMs, including three popular LLM families (GPT, LLaMA, PaLM), and discuss their characteristics, contributions and limitations. We also give an overview of techniques developed to build, and augment LLMs. We then survey popular datasets prepared for LLM training, fine-tuning, and evaluation, review widely used LLM evaluation metrics, and compare the performance of several popular LLMs on a set of representative benchmarks.
     Finally, we conclude the paper by discussing open challenges and future research directions.

    논문 링크

   https://arxiv.org/abs/2402.06196

    더 읽어보기

   https://x.com/omarsar0/status/1757049645119799804


  LLM 에이전트가 자율적으로 웹사이트를 해킹할 수 있습니다 / LLM Agents can Autonomously Hack Websites

    논문 소개

     * 사람의 피드백이나 취약점에 대한 명시적인 사전 지식 없이도 자동으로 웹사이트를 해킹하고 SQL 인젝션과 같은 작업을 수행할 수 있음을 보여줍니다. 이는 LLM의 도구 사용과 긴 컨텍스트 기능을 통해 가능하며, gpt-4는 야생에서 웹사이트의 취약점을 찾는 등 이러한 해킹이 가능하지만 오픈소스 모델에서는 동일한 기능을 보여주지 못했습니다.

     Shows that llm agents can automatically hack websites and perform tasks like sql injections without human feedback or explicit knowledge about the vulnerability beforehand; this is enabled by an llm’s tool usage and long context capabilities; shows that gpt-4 is capable of such hacks, including finding vulnerabilities in websites in the wild; open-source models did not show the same capabilities.

    논문 초록(Abstract)

     * 최근 몇 년 동안 대규모 언어 모델(LLM)의 기능이 점점 향상되어 이제 도구와 상호 작용하고(즉, 함수 호출), 문서를 읽고, 재귀적으로 스스로를 호출할 수 있게 되었습니다. 그 결과 이러한 LLM은 이제 에이전트로서 자율적으로 작동할 수 있습니다. 이러한 에이전트의 기능이 향상됨에 따라 최근의 연구는 LLM 에이전트가 사이버 보안에 어떤 영향을 미칠지에 대해 추측하고 있습니다. 그러나 LLM 에이전트의 공격 능력에 대해서는 알려진 바가 많지 않습니다. 이 연구에서는 LLM 에이전트가 사람의 피드백 없이도 웹사이트를 자율적으로 해킹하여 블라인드 데이터베이스 스키마 추출 및 SQL 삽입과 같은 복잡한 작업을 수행할 수 있음을 보여줍니다. 중요한 점은 에이전트가 취약점을 미리 알 필요가 없다는 것입니다. 이 기능은 도구 사용 능력이 뛰어나고 확장된
       컨텍스트를 활용하는 프론티어 모델에 의해 고유하게 구현됩니다. 즉, GPT-4는 이러한 해킹이 가능하지만 기존 오픈소스 모델은 그렇지 않다는 것을 보여줍니다. 마지막으로, GPT-4가 야생에서 웹사이트의 취약점을 자율적으로 찾아낼 수 있음을 보여줍니다. 이러한 연구 결과는 LLM의 광범위한 배포에 대한 의문을 제기합니다.

     In recent years, large language models (LLMs) have become increasingly capable and can now interact with tools (i.e., call functions), read documents, and recursively call themselves. As a result, these LLMs can now function autonomously as agents. With the rise in capabilities of these agents, recent work has speculated on how LLM agents would affect cybersecurity. However, not much is known about the offensive capabilities of LLM agents. In this work, we show that LLM agents can autonomously hack websites, performing tasks as complex as blind database schema extraction and SQL injections without human feedback. Importantly, the agent does not need to know the vulnerability beforehand. This capability is uniquely enabled by frontier models that are highly capable of tool use and leveraging extended context. Namely, we show that GPT-4 is capable of such hacks, but existing open-source models are not. Finally, we show that GPT-4 is capable of autonomously finding
     vulnerabilities in websites in the wild. Our findings raise questions about the widespread deployment of LLMs.

    논문 링크

   https://arxiv.org/abs/2402.06664v1

    더 읽어보기

   https://x.com/emollick/status/1757937829340967240


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-325
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

   ⚠️광고⚠️: 파이토치 한국 사용자 모임이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=13502","Gemma.cpp: Gemma 모델을 위한 경량 & 스탠드얼론 C++ 추론 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Gemma.cpp: Gemma 모델을 위한 경량 & 스탠드얼론 C++ 추론 엔진

     * 구글의 Gemma 모델을 위한 경량, 독립 실행형 C++ 추론 엔진
     * 누구를 위한 프로젝트인가 ?
          + 현대의 대규모 언어 모델(LLM) 추론 엔진은 전통적인 신경망 런타임을 넘어서는 맞춤형 기능을 가진 복잡한 시스템임
          + 고수준 알고리듬과 저수준 계산의 공동 설계를 통한 연구와 혁신의 기회가 있으나, 실험을 위해 설계되지 않은 C++ 추론 런타임과 저수준 계산을 추상화하는 Python 중심의 ML 연구 프레임워크 사이에는 격차가 존재함
          + gemma.cpp는 Gemma 2B와 7B 모델의 최소 구현을 제공하며, 일반성보다는 단순성과 직접성에 중점을 둠
          + gemma.cpp는 실험과 연구 사례를 목표로 하며, 최소한의 의존성으로 다른 프로젝트에 쉽게 통합될 수 있고, 약 2K LoC의 핵심 구현과 4K LoC의 지원 유틸리티로 쉽게 수정 가능
          + CPU 추론을 위해 Google Highway Library의 이식 가능한 SIMD를 활용
          + 프로덕션용 배포를 위해서는 JAX, Keras, PyTorch, Transformers와 같은 Python 프레임워크를 사용하는 표준 배포 경로를 권장

빠른 시작

  시스템 요구 사항

     * 시작하기 전에 CMake, Clang C++ 컴파일러(C++17 이상 지원), Kaggle에서 아카이브 추출을 위한 tar가 설치되어 있어야 함

  1단계: Kaggle에서 모델 가중치와 토크나이저 획득

     * Kaggle의 Gemma 모델 페이지를 방문하여 Model Variations |> Gemma C++를 선택
     * Variation 드롭다운에는 bfloat16 가중치(더 높은 충실도)와 8비트 전환된 부동 소수점 가중치(더 빠른 추론) 옵션이 포함됨
     * 일반적으로 -sfp 체크포인트로 시작하는 것을 권장

  2단계: 파일 추출

     * 동의서를 작성한 후 archive.tar.gz 파일을 다운로드하여 추출
     * 추출된 파일에는 모델 가중치(예: 2b-it-sfp.sbs)와 토크나이저 파일(tokenizer.spm)이 포함됨
     * 이 파일들을 편리한 디렉토리 위치로 이동할 수 있음(예: 이 리포지토리의 build/ 디렉토리)

  3단계: 빌드

     * 빌드 시스템은 CMake를 사용함
     * gemma 추론 런타임을 빌드하기 위해 빌드 디렉토리를 생성하고, 최상위 프로젝트 디렉토리에서 cmake를 사용하여 빌드 파일을 생성
     * 8비트 전환된 부동 소수점 가중치(sfp)의 경우, 옵션 없이 cmake를 실행
     * bfloat16 가중치를 다운로드한 경우, 위와 같이 옵션 없이 cmake를 실행하는 대신, WEIGHT_TYPE을 highway의 hwy::bfloat16_t 타입으로 설정하여 cmake를 실행
     * 적절한 cmake 명령을 실행한 후, build/ 디렉토리로 이동하여 make를 실행하여 ./gemma 실행 파일을 빌드

  4단계: 실행

     * build/ 디렉토리 내에서 gemma를 실행할 수 있음
     * gemma는 필수 인자를 가지며, 예시로 2b-it-sfp.sbs 가중치 파일과 tokenizer.spm 토크나이저 파일을 사용하여 실행할 수 있음

사용법

     * gemma는 verbosity 플래그에 의해 제어되는 다양한 사용 모드를 가짐
     * 모든 사용 모드는 현재 대화형으로, 새로운 줄 입력 시 텍스트 생성을 트리거

  대화형 터미널 앱

     * 기본적으로 verbosity는 1로 설정되어 있으며, gemma가 호출될 때 터미널 기반의 대화형 인터페이스를 제공

  명령 줄 도구로 사용

     * gemma 실행 파일을 명령 줄 도구로 사용하기 위해, gemma.cpp에 대한 인자가 완전히 지정된 별칭을 생성하는 것이 유용할 수 있음

  프로젝트에 gemma.cpp 라이브러리 포함

     * gemma.cpp를 자체 프로젝트에 포함하는 가장 쉬운 방법은 FetchContent를 사용하여 gemma.cpp와 의존성을 가져오는 것
     * CMakeLists.txt에 다음을 추가할 수 있음

  gemma.cpp를 라이브러리로 빌드

     * gemma.cpp는 자체 프로젝트에서 라이브러리 의존성으로 사용될 수 있으며, libgemma 대상을 빌드하여 공유 라이브러리 아티팩트를 생성할 수 있음

감사의 말과 연락처

     * gemma.cpp는 2023년 가을에 Austin Huang과 Jan Wassenberg에 의해 시작되었으며, Phil Culliton, Paul Chang, Dan Zheng의 기여로 2024년 2월에 출시됨
     * 이것은 공식적으로 지원되는 Google 제품이 아님.

GN⁺의 의견:

    1. gemma.cpp는 대규모 언어 모델을 실험하고 연구하는 데 유용한 도구로, C++ 기반의 경량화된 추론 엔진을 제공함으로써 기존의 Python 중심 프레임워크와의 격차를 해소하는 데 기여함
    2. 이 프로젝트는 오픈 소스 커뮤니티에 기여할 수 있는 기회를 제공하며, Google의 오픈 소스 지침을 따르는 것이 중요함을 강조
    3. gemma.cpp는 다양한 사용 모드를 제공하여 개발자와 연구자가 자신의 프로젝트에 쉽게 통합하고 사용할 수 있도록 설계되었으며, 이는 AI 및 ML 분야의 혁신을 촉진할 수 있는 잠재력을 가짐

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + Austin의 소개 및 프로젝트 설명:
               o Austin은 프로젝트의 공동 저자로, 질문에 답하겠다고 함.
               o gemma.cpp는 llama.cpp/ggml과 독립적이며, llama.cpp 프로젝트의 영감을 받았음.
               o gemma.cpp는 gemma의 직접 구현으로, 실험 및 연구와 이식성 및 쉬운 수정에 중점을 둠.
               o 초기 구현은 CPU SIMD 중심이며, GPU 지원에 대한 옵션을 모색 중임.
               o Gemma 모델 자체에 대한 질문은 다른 동료가 답변할 것이며, 이는 C++ 구현이지만 모델 훈련 과정과는 상대적으로 독립적임.
               o Google의 소규모 팀에서 작업했으며, 다른 사람들이 유용하게 사용하기를 바람.
               o 프로젝트에 대한 트위터 스레드 링크 제공.
          + Google의 LLM 경쟁력에 대한 의견:
               o Google이 OpenAI에 비해 상업적 제품에서 뒤처져 있다는 비판이 있지만, LLM 분야에서는 매우 유능함.
               o Google이 움직임을 시작하면 인상적인 성과를 낼 것이라는 의견.
               o Facebook과 Llama 덕분에 오픈소스 경쟁이 계속되길 바라며, OpenAI가 원래의 미션에서 멀어지고 있음에도 그들의 초기 비전이 중요함을 기억해야 함.
          + 빌드 시스템에 대한 질문:
               o 왜 Google이 bazel을 빌드 시스템으로 사용하지 않았는지 궁금해하는 댓글.
          + Gemma의 성과에 대한 칭찬:
               o Gemma가 HHEM 리더보드에 추가되었으며, 작은 모델들 사이에서 낮은 환각율을 보여주고 있음.
          + LLM 오픈소스 생태계의 발전 속도에 대한 감탄:
               o LLM 오픈소스 생태계의 발전 속도가 매우 빠르며, 새로운 정보와 코드가 계속해서 나오고 있음.
          + 모델 포맷에 대한 질문:
               o GGUF, GGML 등 다양한 모델 포맷에 대한 차이점과 이들이 어떻게 관리되는지에 대한 설명을 요청하는 댓글.
          + LLM의 수학 능력에 대한 토론:
               o LLM이 수학 문제를 잘 해결하지 못한다는 설명과, ChatGPT가 수학 문제를 잘 해결하는 것처럼 보이는 이유에 대한 토론.
               o LLM 프로젝트들이 플러그인 모델을 지원하는지, 그리고 llama.cpp를 사용하여 개발한 시스템에 플러그인 접근 방식을 적용할 수 있는지에 대한 질문.
          + Gemma의 콘텐츠 제한 여부에 대한 질문:
               o Gemma가 Gemini처럼 콘텐츠 제한 기능을 내장하고 있는지, 아니면 그것이 Gemini 애플리케이션의 특징인지에 대한 질문.
          + gemma.cpp에 대한 감사와 향후 기능 추가에 대한 기대:
               o gemma.cpp 저장소에 대한 감사를 표하며, Python 래퍼를 개발했다고 함.
               o gemma.cpp 팀에서 새로운 기술을 업데이트할 때마다 쉽게 사용할 수 있도록 Python 래퍼를 개발함.
          + Gemma 모델의 실행 파일 크기에 대한 질문:
               o Gemma 모델을 최소한의 커맨드 라인 인터페이스로 구축하고 오프라인에서 실행 가능한 독립 실행형 파일로 만들 경우 최종 실행 파일의 크기가 얼마나 될지에 대한 질문.
"
"https://news.hada.io/topic?id=13509","메타의 새로운 LLM 기반 시험 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         메타의 새로운 LLM 기반 시험 생성기

Meta의 새로운 LLM 기반 테스트 생성기는 개발의 미래를 엿볼 수 있는 기회

     * Meta는 ""Automated Unit Test Improvement using Large Language Models at Meta""라는 논문을 발표함.
     * 이 논문은 AI를 사용하여 개발 속도를 높이고 소프트웨어의 버그를 줄이는 방법을 보여줌.
     * LLM을 개발자의 워크플로우에 통합하면서, 현재 코드 커버리지를 개선하는 정확하고 완전한 소프트웨어 개선안을 제안함.

주요 포인트

     * TestGen-LLM은 'Assured LLM-based Software Engineering' (Assured LLMSE) 접근 방식을 사용함.
     * 여러 LLM, 프롬프트, 하이퍼파라미터를 사용하여 코드 개선안을 생성하고, 최선의 개선안을 선택하는 앙상블 접근법을 사용함.
     * TestGen-LLM은 기존의 인간이 작성한 테스트를 개선하는 데 특별히 설계되었음.

통계

     * Instagram의 Reels와 Stories 제품 평가에서 TestGen-LLM이 생성한 테스트 케이스의 75%가 정상적으로 빌드되었고, 57%가 신뢰성 있게 통과했으며, 25%가 커버리지를 증가시킴.
     * TestGen-LLM은 적용된 모든 클래스의 10%를 개선할 수 있었고, 개발자들이 73%의 테스트 개선안을 수용하여 프로덕션에 적용함.
     * Meta 엔지니어들이 Instagram의 테스트 커버리지를 늘리기 위해 테스트를 생성하는 ""test-a-thon""에서 TestGen-LLM 테스트가 추가한 코드 라인의 중간값은 2.5였음.

실천 가능한 인사이트

     * LLM을 사용하여 개발 생산성과 소프트웨어 신뢰성을 효율적으로 향상시킬 수 있는 좋은 예시임.
     * LLM의 진정한 가치는 예상치 못한 엣지 케이스를 찾고 잡는 데 있음.
     * LLM을 생산에 사용하기 위해서는 오케스트레이션, 파이프라인, 처리가 필요함.

TestGen-LLM 작동 방식

     * TestGen-LLM은 Meta의 내부 LLM에 의해 생성된 후보 솔루션에 일련의 의미론적 필터를 적용하여 가장 가치 있는 테스트만 보존함.
     * 필터 1: 빌드 가능성, 필터 2: 실행(테스트 통과 여부), 필터 3: 변덕스러움, 필터 4: 커버리지 개선.
     * 이러한 처리 필터는 테스트 스위트의 개선을 보장함.

결론

     * 이 논문은 많은 개발자들이 이미 LLM을 사용하여 소프트웨어 신뢰성 공간에서 LLM의 진보를 추적하는 좋은 방법임.
     * LLM이 점점 더 복잡한 소프트웨어 시스템에서 버그를 찾고 테스트할 수 있게 될 것임.

GN⁺의 의견

     * 이 기사는 인공지능이 소프트웨어 개발의 미래에 어떤 영향을 미칠 수 있는지에 대한 흥미로운 통찰을 제공함.
     * TestGen-LLM과 같은 도구는 개발자의 작업을 자동화하고 효율성을 높이는 데 큰 도움이 될 수 있음.
     * 이러한 기술의 발전은 소프트웨어 개발의 복잡성을 줄이고, 품질을 향상시키며, 개발자의 시간을 절약하는 방향으로 나아가고 있음.

        Hacker News 의견

     * LLM(대규모 언어 모델)을 사용하여 테스트 코드를 작성하는 것이 구현보다 우선하는 경향이 흥미롭다는 의견이 있음. 테스트는 시스템이 어떻게 동작해야 하는지를 설명하는 역할을 하기 때문에, 인간이 정의해야 할 부분이라는 시각이 있음. 그러나 LLM이 명시되지 않은 영역을 지적하는 데 유용할 수 있으며, 이러한 영역에 대한 단위 테스트를 제안하는 것이 LLM의 적절한 사용 방법일 수 있음.
     * 메타의 TestGen-LLM이 생성한 테스트 케이스 중 대부분은 단 2.5줄의 코드만을 추가로 커버했지만, 한 테스트 케이스는 무려 1326줄을 커버했다는 블로그 포스트에 대한 비판이 있음. 이는 예외적인 경우로, 대부분의 테스트 케이스가 기대하는 코드 커버리지보다 훨씬 낮다는 점을 논문에서 명시하고 있음. 논문의 저자들은 이를 '잭팟'이라고 표현하며, 이러한 결과가 일반적이지 않음을 분명히 함.
     * 좋은 테스트 작성이 어렵다는 의견이 있음. 코드 커버리지가 반드시 좋은 것만은 아니며, 너무 많은 테스트를 작성하면 프로그램을 경직시킬 수 있음. LLM을 사용하여 테스트를 재생성하는 것이 진전처럼 보일 수 있지만, 이는 결국 변경 감지기 프로그램을 만드는 것에 불과할 수 있음.
     * TestGen-LLM에 대한 논문의 요약이 실제 내용과 일치하지 않는다는 지적이 있음. 논문의 요약은 테스트 케이스에 대한 성공률을 언급하지만, 실제 보고서는 테스트 클래스에 대한 성공률을 다루고 있으며, 이는 매우 다른 진술임. 결론에서도 이러한 차이를 잘못 표현하고 있음.
     * LLM으로 생성된 코드를 유지보수해야 할 미래의 개발자들에 대한 동정이 있음. 이러한 코드는 관리하기 어려울 것이라는 우려가 있음.
     * LLM으로 생성된 테스트 코드가 개발자에게 적대적인 환경을 만들 수 있다는 우려가 있음. 관리가 어려운 LLM 생성 테스트 코드를 매번 승인받아야 하는 상황이 발생할 수 있음. 테스트 작성이 가속화될 수는 있지만, 유지보수는 반드시 쉬워지는 것은 아님. 테스트는 코드 설계를 검토하는 데 도움이 되며, 테스트가 쉽지 않다면 좋은 설계가 아닐 수 있음. 테스트는 자동화된 안심을 제공하고 잠재적인 오류를 방지하는 역할을 하지만, 커버리지가 높아질수록 투자 대비 효용은 감소함. LLM은 경험이 풍부한 개발자가 무엇을 테스트해야 할지 이미 알고 있는 경우에만 시간을 절약할 수 있음.
     * GPT-4를 사용하여 TypeScript 모듈에 대한 단위 테스트를 생성해본 경험이 있으며, 이는 성공적으로 작동하는 테스트를 만들어냈다는 경험담이 있음.
     * AI가 어떤 테스트를 작성해야 하는지 어떻게 알 수 있는지에 대한 의문이 있음. AI가 소프트웨어 개발을 돕는 가장 좋은 방법은 프로그래머가 코드에 대해 질문할 때 AI가 답변을 제공하는 것이며, 때로는 코드 제안을 포함할 수도 있고 그렇지 않을 수도 있음. AI는 코드를 이해하고 개선하는 방법을 이해하는 데 도움을 줄 수 있어야 함.
     * AI 코드에 대한 의견은 실제 도구를 사용하고 잘 알고 있는 코드베이스에서 출력을 검토해본 실용적인 경험이 없으면 가치 있는 의견을 가질 수 없다는 의견이 있음. AI 코드는 매우 정치적인 주제이며, 많은 사람들이 강한 의견을 가지고 있음. 그러나 실제로 시도해보고 싶은 욕구가 있음. 이러한 기술은 개발 비용이 매우 높기 때문에, AI 도구가 크게 개선되지 않는다면 그 비용을 정당화하기 어려울 수 있음. 그럼에도 불구하고 미래에 달성될 것에 대해 낙관적임.
     * 논문의 오디오북 요약 링크가 제공됨.
"
"https://news.hada.io/topic?id=13461","카기 사이드킥 (알파 버전)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            카기 사이드킥 (알파 버전)

Kagi Sidekick (알파 버전)

     * Kagi Sidekick는 개인 또는 문서 웹사이트에 Kagi의 스마트 기능과 AI를 활용한 빠른 검색 기능을 단 두 줄의 코드로 추가할 수 있음.
     * 인덱싱, 임베딩, 벡터 검색, 페이지와의 AI 채팅 등 복잡한 작업은 Kagi가 처리하며, 사용자는 가벼운 웹 컴포넌트(20kB min+gzip)나 Docusaurus, Hugo, VitePress 플러그인을 이용해 간단히 통합할 수 있음.
     * Kagi 자체 문서인 help.kagi.com에서 데모를 볼 수 있음.

큰 그림은 무엇인가?

     * Kagi Sidekick는 소규모/개인 웹사이트에 무료 서비스를 제공하고, 상업 웹사이트에는 합리적인 가격의 검색 옵션을 제공할 예정임.
     * Kagi Sidekick을 사용하면 웹사이트가 Kagi 검색에 자동으로 (동의 후) 인덱싱되어 표시되는 추가 혜택이 있음.
     * 현재 이 서비스에 대한 수요를 파악하는 과정에 있으며, 관심이 있는 사용자는 등록하여 출시 시 알림을 받을 수 있음.
     * Sidekick 토론 스레드에서 피드백을 제출할 수도 있음.

Kagi.com

     * Kagi.com은 웹을 인간화하는 것을 목표로 하는 회사로, 블로그, 도움말, 개인정보 보호 및 이용 약관 등의 정보를 제공함.

  GN⁺의 의견

     * 혁신적인 검색 통합: Kagi Sidekick은 웹사이트 개발자들에게 간단한 코드 몇 줄로 AI 기반의 고급 검색 기능을 통합할 수 있는 혁신적인 방법을 제공함.
     * 사용자 경험 향상: 이 서비스를 통해 웹사이트 방문자들은 더 빠르고 정확한 검색 결과를 얻을 수 있어 사용자 경험을 크게 향상시킬 수 있음.
     * 접근성과 가시성 증대: Kagi 검색에 자동으로 인덱싱되는 기능은 웹사이트의 접근성과 가시성을 높여주어 웹사이트 소유자와 방문자 모두에게 이점을 제공함.

        Hacker News 의견

     * Kagi 창립자의 발언 요약:
          + Kagi Labs의 단일 개발자가 몇 주 만에 만든 초기(알파) 개념임.
          + 아직 적절한 인프라와 제품은 구축되지 않았음.
          + 프로토타입을 출시하여 피드백을 받고 수요를 파악하려는 목적임.
          + Kagi 사용자의 개인 웹사이트, 취미 프로젝트, 스타트업, 문서 사이트 등 수만 개의 고품질 색인을 확장하는 효율적인 방법임.
          + 사용자와 Kagi 모두에게 이득이 되는 상황임.
          + Kagi.com 외부에서 브랜딩을 통한 노출을 얻는 방법이기도 함.
          + 작은 사이트/프로젝트에 무료로 제공하는 것이 합리적임.
          + 광고 지원 검색에서 몇몇 엔티티가 대부분의 공간을 통제하는 것과는 반대 방향으로, 웹 검색 결과의 저하를 막는 방향임.
          + 실패할 가능성을 인정하면서도 시도하고 또 시도할 계획임.
     * 기술 문서 작성자의 질문 요약:
          + 색인에 포함될 페이지는 도메인 내의 모든 페이지인지, 검색 위젯이 포함된 페이지만인지 궁금함.
          + 검색 상자에 입력된 내용과 생성된 요약의 로그를 얻을 수 있는지, 그리고 어떻게 얻을 수 있는지 문의함.
          + 사이트에 대해 생성된 임베딩에 접근할 수 있는지 궁금함.
          + 사이트 색인의 빈도가 얼마나 되는지, 구식 버전의 문서를 기반으로 한다면 문제가 될 수 있음.
          + 사용자 쿼리를 Kagi가 어떻게 다룰 것인지에 대한 질문이 있음.
     * Kagi 사용자의 의견 요약:
          + 몇 달 동안 Kagi를 유료로 사용해온 사용자로서, 클릭을 줄이고 직접 답변을 제공하는 AI 기능에 대한 지지를 표함.
          + Kagi의 검색 결과가 이미 매우 좋으며, Kagi가 번창하는 것을 기대함.
     * 초기 Kagi 사용자의 의견 요약:
          + Kagi 검색과 요약 기능을 좋아하지만, 새로운 제품보다는 고품질의 검색 및 요약 결과에 집중하기를 바람.
     * Kagi 고객의 의견 요약:
          + AI 기능이 Kagi의 웹 검색 엔진으로서의 핵심 제공에 너무 많은 주의를 산만하게 하지 않기를 바람.
     * Kagi 'Ultimate' 회원에 대한 질문 요약:
          + Sidekick 기능이 'Ultimate' 회원에게만 제공되는지, 아니면 페이지 정보가 모호한지에 대한 질문이 있음.
     * 브라우저 확장 프로그램에 대한 제안 요약:
          + 지원되지 않는 웹사이트/문서에서도 Kagi의 기능을 사용할 수 있는 브라우저 확장 프로그램 버전을 만들어달라는 요청이 있음.
     * Kagi 고객의 의견 요약:
          + 단순히 좋은 검색 결과를 원하며, 이 기능이 주의를 분산시키는 것처럼 느껴짐.
     * Kagi 유료 검색 고객의 의견 요약:
          + 검색이 AI에 의해 대체될 가능성이 있으므로, Kagi가 AI와 검색의 상호작용을 탐구하는 것은 의미가 있다고 생각함.
          + 검색이 무관해질 때까지 주요 초점이 되지 않기를 바라지만, 잠재적인 대체 기술을 무시하지 않는 것이 중요함.
     * Kagi 유료 검색 고객의 감사 표현 요약:
          + Google을 대체하고 더 나은 기능을 제공해준 Kagi에 감사함을 표함.
"
"https://news.hada.io/topic?id=13449","나는 IKEA (2023)를 깼다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           나는 IKEA (2023)를 깼다

IKEA에서 온 전화를 끊다

     * IKEA 또는 그들의 배송 서비스 중 하나로부터 온 전화를 스팸으로 오인하여 끊은 경험.
     * 전화 서비스에는 스팸 방지 기능이 있어, 알려지지 않은 번호로부터 오는 전화를 심사할 수 있음.
          + 전화가 오면 5번째 벨이 울릴 때까지 기다린 후, 음성 메일 인사말이 나오고, 30초 동안 전화가 스팸인지 아닌지 판단.
          + 전화가 스팸이 아니라면 1을 눌러 정상적으로 통화.
          + 스팸으로 판단되면 ###을 누르고 바로 끊어, 전화를 음성 메일로 보내고 DTMF 폭탄을 발동시킴.
     * DTMF 폭탄은 DTMF 키를 빠르게 연속해서 누르는 것으로, 스팸 전화를 건 저가형 PBX 시스템을 망가뜨릴 수 있음.

IKEA 전화의 내용

     * IKEA에서 $1200 가치의 가구 배송을 확인하기 위해 1-877 번호로 전화가 왔을 때, 영어로 계속하려면 1을 누르라는 안내만 있었음.
     * 발신자를 모르고 스팸으로 오인하여 ###을 눌러 전화를 끊음.
     * 녹음된 전화 통화 내용에는 배송 일정이 화요일 오후 2시부터 6시 사이로 예정되어 있으며, 성인이 없거나 다른 문제가 있을 경우 연락할 수 있는 번호가 제공됨.
     * 전화 시스템에 문제가 발생하여, 결국 전화는 끊어지고 노이즈만 남음.

GN⁺의 의견

     * 이 기사는 현대 통신 기술의 장단점을 잘 보여줌. 스팸 방지 기능이 유용할 수 있지만, 때로는 중요한 전화까지 차단할 위험이 있음.
     * DTMF 폭탄이라는 개념은 스팸 전화에 대한 독창적인 대응 방법으로, 보안이 약한 시스템에 실제 영향을 줄 수 있음을 시사함.
     * 이 사례는 사용자가 기술을 어떻게 활용하고, 때로는 예상치 못한 결과를 초래할 수 있는지에 대한 흥미로운 이야기를 제공함.

   전화 심사 기능이 더 눈에 띄는데요. 국내 도입이 시급합니다.

        Hacker News 의견

     * Psion Series 5의 특징과 장난기

     과거 Psion Series 5를 사용했던 한 사용자는 이 기기가 전화번호를 다이얼할 수 있는 DTMF(이중음 다이얼) 신호를 내보낼 수 있다는 점을 발견함. 연락처에 긴 전화번호를 설정하여 당시 존재했던 응답기의 메뉴에 접근할 수 있었고, 이를 이용해 친구들의 응답기 메시지를 변경하는 장난을 쳤음. 한 친구는 메시지 변경을 위해 아파트 뒷편을 기어 올라갔을 것이라고 생각했지만, 실제로는 DTMF 코드를 이용한 것임.
     * 음성 인식의 정확성에 대한 놀라움

     음성 인식 기술의 정확성에 대해 처음에는 텍스트를 읽고 나서 오디오를 들었을 때 그 정확성에 놀랐음을 표현함.
     * 디지털 신호 처리(DSP) 코드와 관련된 경험

     DSP 코드와 관련된 일화를 가진 사용자는 녹음 끝부분이 오디오 버퍼가 아닌 메모리의 일부를 재생하는 것처럼 들린다며, 여기에 ""DTMF 주입"" 가능성이 있을지 궁금해함.
     * CoHost와 Anti Software Club에 대한 새로운 지식

     CoHost와 Anti Software Club에 대해 처음 알게 되었다는 사실을 공유함.
     * 윈도우 경고음과 오디오 이상 현상의 유머

     오디오의 이상 현상 사이에 나타난 윈도우 경고음이 웃기다고 느낌.
     * PBX 설정에 대한 궁금증

     해당 PBX(사설 교환 시스템)가 어떻게 설정되어 있는지 알고 싶어함.
     * 압축되지 않은 오디오에 대한 호기심

     압축되지 않은 오디오를 들을 수 있다면, 이진 스트림을 바이트로 디코드할 수 있을 것이라고 생각함.
     * CoHost 소셜 네트워킹 사이트의 게시물 애니메이션 기능

     CoHost 소셜 네트워킹 사이트에서 게시물을 애니메이션으로 만들 수 있는 기능을 좋아함.
     * IKEA의 해킹 시도에 대한 농담

     모뎀 통신 소리가 IKEA의 해킹 시도로 들린다며, 터치톤보다 훨씬 진보된 기술이라고 농담함.
     * 오디오 소리가 데이터의 소리일 가능성

     오디오 소리가 비트/바이트 데이터의 소리일 수 있으며, 일정한 규칙성이 있어 어느 정도 구조화되어 있을 가능성이 있음을 추측함.
"
"https://news.hada.io/topic?id=13524","블루스카이 작동 원리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              블루스카이 작동 원리

BlueSky가 어떻게 작동하는가?

     * BlueSky는 소셜 미디어가 소수의 기업에 의해 통제되는 것을 방지하고, 사회적 인터넷의 개방적 기반을 구축하여 미래를 모두가 형성할 수 있도록 하는 것을 목표로 함.
     * BlueSky는 마이크로블로깅 애플리케이션으로, Authenticated Transfer Protocol(ATP 또는 atproto)의 실현 가능성을 증명하기 위한 초기 애플리케이션임.
     * atproto는 분산된 소셜 애플리케이션을 위한 연합 프로토콜로, 다양한 부분이 서로 통신하며 대규모로 확장 가능함.

이것은 암호화폐인가?

     * atproto는 암호화폐가 아니며, 암호화폐 공간에서 유래한 몇 가지 기술을 사용하지만 블록체인, DAO, NFT 등은 아님.

atproto의 큰 그림은 무엇인가?

     * 사용자는 자신의 저작물을 증명하기 위해 암호화된 기록을 생성하며, 이 기록은 Lexicon이라는 스키마를 가짐.
     * 기록은 서비스로 운영되는 저장소에 저장되며, 이 저장소들은 HTTP와 WebSockets를 통해 서로 통신하고 기록을 연합함.
     * 애플리케이션은 네트워크에 저장된 다양한 기록을 보고 이를 활용하여 구축될 수 있으며, 이러한 서비스는 App Views라고 불림.

""speech vs reach""란 무엇인가?

     * atproto는 사람들을 연결하는 것뿐만 아니라 연결을 해제하는 것도 고려해야 하며, 이는 모더레이션을 포함함.
     * 프로토콜은 ""speech vs reach"" 접근 방식을 취하여, 모더레이션 도구를 통해 원치 않는 콘텐츠의 도달 범위를 제한함.

피드 생성기란 무엇인가?

     * 피드 생성기는 atproto에서 콘텐츠의 ""피드"" 개념을 별도의 서비스로 분리하여, 사용자에게 원하는 콘텐츠를 필터링하고 정렬하여 보여줌.

라벨러란 무엇인가?

     * 라벨러는 콘텐츠나 계정에 라벨을 적용하는 서비스로, 사용자는 특정 라벨러를 구독하고 라벨에 따라 경험이 달라질 수 있음.

atproto에서 모더레이션은 어떻게 작동하는가?

     * 피드는 라벨을 기반으로 피드를 변환할 수 있으며, App Views는 라벨러에게 물어보고 기반한 변환을 적용할 수 있음.
     * 이 모델은 사용자가 모더레이션 경험을 선택할 수 있도록 하며, 네트워크 수준에서 작동하기 때문에 다른 시스템보다 더 나아감.

신원 및 계정 이동성은 어떻게 작동하는가?

     * 사용자는 Decentralized Identifier(DID)라는 신원 번호를 가지며, 이 DID는 암호화를 통해 콘텐츠를 서명하고 네트워크 전체에 복제됨.
     * 계정 이동성은 사용자가 자신의 PDS를 새로운 것으로 이전하고 네트워크에 이를 알릴 수 있는 방법을 통해 실현됨.

BlueSky는 atproto 위에 어떻게 구축되었는가?

     * BlueSky는 atproto 네트워크 위에 구축된 애플리케이션으로, App View와 웹 애플리케이션을 운영하며, 사용자가 웹 앱을 통해 가입할 때 PDS와 이와 통신하는 릴레이를 운영함.

다른 사람들은 atproto 위에 어떻게 애플리케이션을 구축할 것인가?

     * Lexicon을 생성하여 atproto 앱을 만들 수 있으며, 네트워크의 데이터를 활용하는 App View를 운영하고 사용자가 Lexicon을 사용하여 PDS에 데이터를 쓸 수 있도록 함.

GN⁺의 의견

     * BlueSky와 atproto의 설계는 소셜 미디어의 미래를 형성하는 데 있어 개방성과 확장성을 제공하는 혁신적인 접근 방식임.
     * 사용자 중심의 모더레이션 도구와 계정 이동성은 사용자에게 더 큰 통제력과 자유를 부여함.
     * 이 기술은 소셜 미디어 플랫폼의 분산화를 추구하는 새로운 움직임의 일환으로, 사용자 경험과 데이터 소유권에 대한 새로운 기준을 제시함.

        Hacker News 의견

     * 이것은 매우 잘 생각해낸 것 같고, ActivityPub의 몇 가지 큰 문제들을 해결하는 것 같다. 이전에는 Bluesky에 관심이 없었지만, 이제 계정을 만들어볼 생각이다.
          + Bluesky가 잘 고안된 것처럼 보이며, ActivityPub의 주요 문제들을 해결할 수 있을 것 같음.
          + 이전에는 Bluesky에 관심이 없었으나, 이제는 계정을 만들어볼 의향이 생김.
     * 현재는 단일 릴레이가 있는 것으로 보인다. 여러 릴레이가 생길 때, 각각은 네트워크에 대한 다른 시각을 가지게 될 것이고, 더 많은 게시물을 포함하는 릴레이가 다른 것들보다 낫게 될 것이다.
          + 현재 단일 릴레이가 존재하며, 여러 릴레이가 생기면 각각 네트워크에 대해 다른 관점을 가질 것임.
          + 더 많은 게시물을 포함하는 릴레이가 다른 릴레이보다 유리할 것으로 예상됨.
     * BlueSky가 오직 프로토콜의 오픈 부분만을 사용하겠다고 신뢰할 수 있게 약속하는 방법에 대해 궁금하다. BlueSky는 사실상 상당히 중앙집중화되어 있어 보이며, 이 때문에 BlueSky 첫 파티 클라이언트가 ATProto 클라이언트일 필요는 없어 보인다.
          + BlueSky가 프로토콜의 오픈 부분만을 사용할 것이라는 약속을 어떻게 신뢰할 수 있을지에 대한 의문 제기.
          + BlueSky가 중앙집중화된 경향이 있어, 기술적으로는 BlueSky 클라이언트가 ATProto 클라이언트일 필요가 없어 보임.
     * 사용자가 호스팅 제공업체와 독립적으로 자신의 모더레이션 제공업체를 선택할 수 있는 아이디어는 멋지지만, 인스턴스들은 여전히 현지 법률에 어긋나는 콘텐츠를 호스팅하지 않기 위해 모더레이션을 해야 할 것 같다.
          + 사용자가 호스팅 제공업체와 독립적으로 모더레이션 제공업체를 선택하는 아이디어에 대한 호평.
          + 그러나 인스턴스 운영자들이 현지 법률을 준수하기 위해 여전히 모더레이션을 해야 할 수 있음.
     * Mastodon이 단순함으로 인해 장기적으로 더 현명한 선택처럼 보이지만, Mastodon의 피드 큐레이션이 더 어렵기 때문에 단기적으로는 덜 재미있거나 유용할 수 있다.
          + Mastodon이 단순함으로 인해 장기적으로 더 나은 선택으로 보이지만, 피드 큐레이션이 어려워 단기적으로는 덜 매력적일 수 있음.
     * 이 짧은 만화도 훌륭하다 - Welcome to BlueSky Comic
          + BlueSky에 대한 짧은 만화가 훌륭하다고 언급함.
     * Bluesky의 재미있는 사실은, CEO의 이름이 중국어로 'blue sky'라는 것이다.
          + Bluesky의 이름이 CEO의 이름과 관련이 있음을 나타내는 재미있는 사실 공유.
     * 모더레이션 도구는 ""reach"" 계층에 속한다: 모든 발언을 받아들이지만, 보고 싶지 않은 것들의 도달 범위를 제한할 수 있는 방법을 제공한다.
          + 모더레이션 도구가 프로토콜 자체에 내장되어 있어 모든 콘텐츠에 작동하며, 사용자가 자신의 모더레이터를 선택할 수 있음을 설명함.
     * Authenticated Transfer Protocol, 즉 atproto는 대규모 분산 소셜 애플리케이션을 위한 연합 프로토콜이다.
          + atproto가 대규모 분산 소셜 애플리케이션을 위한 연합 프로토콜임을 설명함.
     * Nostr와 비교하면 어떤가?
          + Nostr와의 비교에 대한 질문 제기.
"
"https://news.hada.io/topic?id=13470","iMessage, PQ3 암호 프로토콜을 탑재","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       iMessage, PQ3 암호 프로토콜을 탑재

PQ3: iMessage의 새로운 암호화 프로토콜

     * iMessage가 PQ3라는 새로운 암호화 프로토콜을 도입하여 역사상 가장 중요한 암호화 보안 업그레이드를 발표
     * PQ3는 양자 컴퓨팅 공격에 대한 방어를 포함하여 끝에서 끝까지(end-to-end) 안전한 메시징의 최첨단 기술을 발전시킴
     * PQ3는 전 세계적으로 널리 배포된 메시징 앱 중 가장 강력한 보안 속성을 가진 것으로 알려짐

iMessage의 암호화 진화

     * iMessage는 2011년에 기본적으로 끝에서 끝까지 암호화를 제공하는 첫 번째 대중적 메시징 앱으로 출시됨
     * RSA에서 타원 곡선 암호(ECC)로 전환하고, 디바이스 내의 보안 영역(Secure Enclave)으로 암호화 키를 보호하는 등 암호화 프로토콜이 지속적으로 강화됨
     * 기호 평가(symbolic evaluation)를 통해 암호화 프로토콜의 보안성이 강력하게 검증됨

양자 컴퓨팅의 위협

     * 기존의 공개 키 암호화 알고리듬들은 양자 컴퓨팅의 발전으로 인해 위협받고 있음
     * 충분한 성능을 가진 양자 컴퓨터는 기존의 암호화 알고리듬을 빠르게 해결할 수 있어 암호화된 통신의 보안을 위협할 수 있음
     * 양자 컴퓨터가 아직 존재하지 않음에도 불구하고, 공격자들은 미래에 양자 컴퓨터를 활용하여 오늘날 암호화된 데이터를 해독할 수 있는 'Harvest Now, Decrypt Later' 공격을 준비할 수 있음

메시징 애플리케이션의 보안 수준

     * 메시징 애플리케이션의 보안 수준을 이해하기 위해, 보안 속성에 따라 스펙트럼으로 나누어 설명함
     * 대부분의 메시징 앱은 기본적으로 끝에서 끝까지 암호화를 제공하지 않거나(레벨 0), 제공하지만 양자 보안이 없는(레벨 1) 상태임
     * Signal은 PQXDH 프로토콜을 도입하여 레벨 2 보안을 달성한 최초의 대규모 메시징 앱이 됨

PQ3의 설계

     * PQ3는 기존 알고리듬을 새로운 것으로 단순히 교체하는 것 이상의 작업을 포함하여 iMessage 암호화 프로토콜을 처음부터 재구축함.
     * 대화의 시작부터 양자 보안을 도입하여 현재 및 미래의 위협으로부터 모든 통신을 보호함.
     * 키 탈취의 영향을 완화하기 위해 단일 탈취된 키로 해독할 수 있는 과거 및 미래 메시지의 양을 제한함.
     * 현재의 ECC 알고리듬과 새로운 양자 알고리듬을 결합하는 하이브리드 디자인을 사용함.
     * 추가된 보안으로 인한 메시지 크기 증가를 최소화함.
     * 새 프로토콜에 대한 강력한 보안 보증을 제공하기 위해 형식 검증 방법을 사용함.

PQ3의 형식적 증명

     * PQ3는 Apple의 보안 엔지니어링 및 아키텍처 팀(SEAR)과 암호학 분야의 세계적인 전문가들에 의해 광범위하게 검토됨.
     * ETH Zürich의 David Basin 교수와 University of Waterloo의 Douglas Stebila 교수 등이 PQ3를 평가함.
     * 이들은 서로 다른 수학적 모델을 사용하여 PQ3의 보안 속성에 대한 증명을 제공함.

GN⁺의 의견

     * PQ3 프로토콜의 도입은 양자 컴퓨팅의 위협에 대비한 중요한 발전이며, 이는 미래의 보안 위협에 대비하는 기술의 진보를 보여줌.
     * iMessage 사용자들은 PQ3 프로토콜을 통해 현재 및 미래의 고급 암호화 공격으로부터 강화된 보호를 받게 될 것임.
     * 이러한 기술적 진보는 암호화 통신의 미래를 형성하고, 사용자의 개인정보 보호를 강화하는 데 기여할 것임.

        Hacker News 의견

     * Signal과 Apple이 양자 컴퓨팅에 대비한 암호화 알고리듬으로 CRYSTALS-Kyber를 선택했다는 점이 흥미로움. 고전 공개키 암호화가 두 소수의 곱셈은 쉽지만 인수분해는 어렵다는 원리에 기반을 둔 것과 달리, Kyber는 '오류를 통한 학습' 문제를 어려운 수학적 문제로 사용함.
          + Signal 블로그 포스트: Signal Blog Post
          + CRYSTALS-Kyber 정보: CRYSTALS-Kyber
          + '오류를 통한 학습' 문제: Learning with errors
     * Signal이 유일한 크로스 플랫폼 옵션으로서 양자 컴퓨팅에 대응하는 암호화 기술을 제공하는 것은 Signal에 대한 좋은 광고가 됨. Apple이 결국 Signal과 같은 기술을 채택할 가능성이 있는지 궁금
     * David Basin과 그의 팀이 과거에 흥미로운 연구를 수행했음. 특히, 신용카드에 사용되는 EMV 프로토콜의 취약점을 다룬 EMV Race에 관한 강연을 본 적이 있음. 이들의 접근 방식에는 Tamarin을 이용한 프로토콜 모델링이 포함됨.
          + EMV Race 웹사이트: EMV Race
     * 고급 암호화 기술이 있음에도 불구하고, 세계의 70%에 달하는 전화기들과 문자를 주고받을 때는 32년 전에 발표된 프로토콜을 사용하게 됨.
     * 중간자 공격(Man-In-The-Middle, MITM)이 양자 컴퓨팅에 대응하는 재키잉(rekeying)이 일어날 때 이를 알아채고 전달을 방해할 수 있는지에 대한 의문 제기.
     * 중간자 공격이 어떻게 처리되는지, 키 투명성(key transparency)이 공개키 지문을 대체하는지에 대한 질문.
     * 해당 코드가 공개될까?
     * 이 기술이 특정 국가에 의존적인지 궁금함
     * 양자 컴퓨팅에 대응하는 암호화 기술 개발이 시기상조인지에 대한 의문 제기. 아직 양자 위협이 실제로 존재하는지, 표준이 확립되지 않았으며, 물리적 잡음 성능이 양자 위협을 가능하게 하는 수준에 도달하지 않았다는 의견. 양자 위협에 대한 대비가 '파스칼의 내기'를 연상시킨다는 의견.
          + Pascal's Wager 정보: Pascal's Wager
     * iCloud 백업 문제에 여전히 취약한지, 그리고 이를 해결하기 위해 사용자와 연락처가 Advanced Data Protection을 켜야 하는지 궁금
"
"https://news.hada.io/topic?id=13546","홈 스크린 우위","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                홈 스크린 우위

홈 스크린의 이점

     * 애플이 유럽연합(EU)의 디지털 시장 법(DMA) 준수 마감일인 3월 6일에 다가오면서, 웹을 약화시키려는 계획이 드러나고 있음.
     * DMA는 아이폰에 경쟁 앱 스토어를 개방하도록 요구하지만, 애플은 브라우저 선택과 웹 앱을 제한하려는 시도를 하고 있음.
     * iOS 17.4의 출시로 유럽에서는 앱과 데이터가 손상되고, 학교, 정부, 스타트업, 게이머 등에 영향을 미칠 것으로 예상됨.

혼돈의 원숭이 비즈니스

     * 애플은 DMA 준수 계획을 세계에 갑작스럽게 발표하며, 경쟁자들이 시장에 진입하기 전에 불리한 조건을 수용하도록 강요함.
     * 애플은 브라우저 엔진 선택을 가능하게 하는 정책을 통해 경쟁자들의 비용을 증가시키고 iOS로의 브라우저 이식 가치를 낮추려 함.

그런데, 더 있다!

     * 애플은 경쟁자들에게 책임을 전가하며, DMA 준수 마감일에 가까워질수록 중요한 PWA 기능을 비활성화함.

위험에 처한 것은?

     * 애플의 변경으로 인해 앱과 같은 UI, 신뢰할 수 있는 저장소, 푸시 알림, 앱 아이콘 배지 등 PWA의 핵심 기능들이 파괴됨.

폭발하지 않고, 베타 버전으로

     * 애플은 BrowserEngineKit의 문서화에서 PWA 지원에 대한 API를 누락시키며, 개발자들에게 혼란을 야기함.

거짓말, 저주받은 거짓말, 그리고 ""그래도, 우리는 유감이다...""

     * 애플은 보안을 이유로 PWA 기능 제거를 정당화하지만, 실제로는 브라우저 엔지니어링과 DMA의 법적 용어에 밝은 사람만이 그들의 변명을 이해할 수 있음.

가면은 벗겨졌다

     * 애플은 웹과 웹 개발자들에게 도전적인 태도를 보이며, 아이폰이 존재할 수 있게 한 기능들을 제거함.
     * 애플은 개방된 플랫폼을 용납할 수 없으며, 자신들의 앱 스토어 독점을 위협하는 것을 방해하려 함.

GN⁺의 의견

     * 애플이 PWA를 제한하는 것은 웹 개발자 커뮤니티에 큰 영향을 미칠 수 있으며, 이는 웹 기반 앱의 혁신과 성장을 저해할 수 있음.
     * 이러한 조치는 애플의 앱 스토어에 대한 독점적 지배력을 유지하려는 시도로 볼 수 있으며, 이는 경쟁과 소비자 선택의 다양성을 제한함.
     * 애플의 이러한 행동은 다른 기업들이 비슷한 상황에서 어떻게 대응해야 하는지에 대한 중요한 사례를 제공함.
     * 기술 채택 시 애플의 정책 변화와 같은 외부 요인을 고려해야 하며, 이는 기업의 기술 전략에 중대한 영향을 미칠 수 있음.
     * 웹 기술의 독립성과 개방성을 지키기 위한 커뮤니티의 노력이 중요하며, 이는 기술 생태계의 건강한 발전을 위해 필수적임.

        Hacker News 의견

     * 댓글 작성자는 해커뉴스 댓글 섹션에 변명과 주의를 산만하게 하는 사람들이 많다고 느낌. 이는 일반적으로 정보에 밝은 커뮤니티에서 놀라운 일임.
          + 애플이 지난 10년 동안 ServiceWorkers와 같은 기술을 제대로 구현하지 않으려는 노력에 대해 언급.
          + W3C 센서 API와 같은 제안이 사내/기업용 앱 배포의 어려움을 없앨 수 있음을 지적.
          + 애플이 홈 스크린 아이콘과 전체 화면 모드의 상태 바 스타일링을 위한 뷰포트 메타 태그 문서를 오랫동안 방치했으며, 이는 스티브 잡스의 아이폰 앱에 대한 원래 비전과 대조적임을 비판.
     * 댓글 작성자는 애플이 지속적인 저장소 제거와 홈 화면에 웹사이트 추가 기능을 없애는 것이 전략을 명백히 보여준다고 생각함.
          + EU가 메신저 상호운용성과 같이 큰 기업들에 대한 상호운용성을 원하는 것처럼 웹의 상호운용성도 중요하다고 보고, 애플이 이러한 행동에 대해 벌금을 부과할 것으로 예상함.
     * 로버트 맥키의 인용구를 통해 인간의 진정한 성격은 압박 상황에서의 선택에서 드러난다는 점을 강조함.
     * 댓글 작성자는 EU가 애플에게 서드파티 브라우저가 PWA를 구현할 수 있도록 동등한 OS API 지원을 제공하도록 요구하기를 희망함.
          + 이러한 조치가 이루어지면 애플이 사파리의 PWA 기능을 빠르게 복원할 것으로 예상함.
     * 댓글 작성자는 사용자가 설치할 수 있는 앱을 제한하는 기기 사용이 비합리적이라고 주장함.
          + 안드로이드는 루트 권한이 없지만 적어도 원하는 앱을 설치하거나 직접 만들 수 있다고 언급함.
     * 아이폰 사용자가 아닌 댓글 작성자는 웹 앱이 중요한 데이터를 다룰 때 서버가 진실의 원천이 되고, 휴대폰이 캐시 역할을 하는 것을 선호함.
     * 애플 생태계 사용자였던 댓글 작성자는 현재 아이폰이 고장 나면 다시 구매하지 않을 것이라고 말함.
          + 이는 사용자에게 불리한 애플의 악의적인 준수로 인한 결정임.
     * 댓글 작성자는 PWA 제거/폐지로 인한 피해 주장에 대해 PWA의 규모와 영향에 대한 데이터 없이는 동정심을 갖지 않음을 밝힘.
     * 댓글 작성자는 애플 제품을 사용할 필요가 없으며, 이로 인해 가장 큰 피해를 볼 것은 애플일 것이라고 주장함.
          + 특히 EU에서 기능이 중단되면 '럭셔리 폰 브랜드'가 '고장난 폰 브랜드'가 될 것이라고 언급함.
     * 댓글 작성자는 사람들이 실제로 PWA를 원하는지에 대한 의문을 제기함.
          + 안드로이드는 PWA를 지원하지만 세계를 평정하지는 않고 있으며, 안드로이드 사용자들 사이에서도 PWA 사용이 많지 않음을 경험적으로 언급함.
          + 기업들도 PWA나 웹사이트에 관심이 없으며, 앱 버전이 제공되기 전까지는 웹 버전을 사용하지 않는 경향이 있음을 지적함.
"
"https://news.hada.io/topic?id=13429","다시 시작해야 합니다: Atom부터 Zed까지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       다시 시작해야 합니다: Atom부터 Zed까지

     * Zed의 공동 창립자인 Nathan, Max, Antonio와의 대화에서 기술적 선택의 이유, Rust의 중요성, 기술 스택을 소유하는 것에 대한 의도 등에 대한 질문이 있었음
     * 이들은 다시 한번 질문에 답하며, 한 시간 동안의 대화를 편집한 내용을 공유

Atom에서 Zed로: 10년의 여정

     * 세 창립자는 약 10년 동안 함께 일해왔으며, 아톰을 개발한 후 Zed를 만들기로 결정함.
     * Zed의 비전은 아톰의 초기 비전을 더 세련되고 구체화한 것으로, 기술적 선택이 이 비전과 밀접하게 연결되어 있음.
     * Rust, GPU 가속, CRDTs 등의 기술적 선택은 Zed의 목표를 달성하기 위해 중요함.

기술적 선택과 비전

     * Zed의 비전은 가벼우면서도 필요할 때 IDE의 기능을 제공하는 텍스트 편집기를 만드는 것임.
     * 아톰 개발 당시 기술적 한계와 개발자들의 기술적 성숙도 부족으로 인해 비전을 완전히 실현하지 못함.
     * Rust가 등장하면서 기존의 한계를 극복할 수 있는 기회가 마련됨.

아톰의 한계와 새로운 시작

     * 아톰 개발 중 JavaScript의 한계와 웹 기술의 제약으로 인해 성능 문제가 발생함.
     * 2017년, 기존 플랫폼의 한계를 느끼고 Zed를 처음부터 다시 시작하기로 결정함.
     * Rust와 GPU 가속을 통해 성능을 향상시키고자 함.

Rust의 영향

     * Rust는 고수준의 추상화를 제공하면서도 뛰어난 성능을 제공함.
     * Rust의 '제로 비용 추상화'는 텍스트 편집기 개발에 있어 중요한 역할을 함.
     * C++이나 C로도 유사한 성능을 낼 수 있지만, Rust는 개발자에게 더 쉽고 안전한 개발 경험을 제공함.

전체 스택 소유의 중요성

     * Zed 개발팀은 tree-sitter부터 GPU 가속 UI 프레임워크인 GPUI에 이르기까지 전체 기술 스택을 소유함.
     * 전체 스택을 소유하는 것은 의도적인 선택이며, 이를 통해 성능과 기능에 대한 완전한 제어가 가능함.

완벽한 추상화와 긴급성 사이의 균형

     * 필요한 것만, 필요한 만큼만 구축하고, 배운 것을 바탕으로 필요할 때 재검토하는 것이 중요함.
     * 핵심적인 부분은 높은 품질과 성능을 보장하기 위해 충분한 시간을 투자함.

개발자 도구와 기술의 관계

     * 개발자 도구 사용자들은 기술에 더 관심을 가질 수 있으며, 기술이 사용자에게 제공하는 성능과 기능에 영향을 줌.
     * Rust로 작성된 Zed는 개발자들이 쉽게 기여할 수 있게 하며, 이는 커뮤니티의 참여를 촉진함.

  GN⁺의 의견

    1. Zed의 개발 과정은 기술적 선택이 제품의 비전과 성능에 얼마나 중요한지를 보여줌. Rust와 같은 현대적인 프로그래밍 언어의 선택은 개발자의 생산성과 제품의 성능을 동시에 향상시킬 수 있음을 입증함.
    2. 전체 기술 스택을 소유하는 것은 Zed 팀이 성능 최적화와 기능 개발에 있어 유연성을 갖게 하며, 이는 고성능 텍스트 편집기를 만드는 데 결정적인 역할을 함.
    3. 개발자 도구의 경우, 사용하는 기술이 최종 사용자 경험에 더 큰 영향을 미칠 수 있으며, 이는 Zed가 개발자 커뮤니티에 어떻게 받아들여지는지에 영향을 줄 수 있음. Rust의 사용은 개발자들에게 Zed에 기여하는 것을 더 매력적으로 만들고, 이는 제품의 성장과 발전에 긍정적인 영향을 미침.

        Hacker News 의견

     * 사용자 정의 UI 프레임워크가 현재는 재미있을 수 있으나, 접근성을 구현해야 할 때 문제가 될 수 있음. 성능 저하 없이 사용자 정의 프레임워크에서 접근성을 구현하는 것은 쉽지 않으며, 플랫폼별로 복잡한 작업이 필요함. Zed는 단순한 에디터가 아니라 협업 도구로 자리매김하고 있기 때문에 모든 개발 팀원이 사용할 수 있도록 하는 것이 중요함.

     AccessKit이라는 도구가 있어 작업을 조금 더 쉽게 할 수 있을지도 모르지만, 큰 에디터에 적합한지는 확실하지 않음.
     * Zed 텍스트 에디터를 사용하기 전에 사용자가 동의해야 하는 라이선스에 대한 주의사항. 사용자 콘텐츠는 'User Content'로 분류되며, Zed 사용자와 협업하여 프로젝트를 공유할 때만 환경에서 전송됨. Zed는 사용자 콘텐츠에 대한 접근이 디버깅과 솔루션 개선을 위해서만 제한되어 있음.

     사용자는 이 정보를 바탕으로 자신의 결론을 내릴 수 있음.
     * Zed 에디터가 매우 유망해 보이지만, 원격 호스트/개발 컨테이너 지원이 없어 사용할 수 없음. VSCode의 해당 기능은 사용자의 워크플로우에 중요하며, Mac을 VM과 컨테이너로 코드를 작성하는 포털로 사용하는 것을 선호함. 이는 프로젝트 분리와 보안 자세를 향상시킴.
     * 개발자들의 개발 접근 방식에 대한 통찰을 제공하는 훌륭한 인터뷰. 다양한 각도에서 개발을 바라보는 방식에 대해 많은 생각을 하고 있음.

     개발자들은 'Zed'라는 이름이 이미 Zig에서 완벽한 텍스트 에디터 이름으로 사용되고 있다고 생각하지만, 실제로는 'Zag'이 더 적합하다는 의견도 있음.
     * Zed를 사용하지 않지만, José Valim이 코딩 세션을 실시간 스트리밍할 때 사용하는 것을 보았음. VSCode를 주로 사용하지만, Zed의 'Find All' 기능이 인상적임. VSCode와 비슷하게 결과 창을 열어 일치하는 모든 파일의 스니펫을 보여주지만, Zed에서는 바로 그곳에서 스니펫을 직접 편집할 수 있음. 이는 VSCode에서는 검색 결과를 클릭하여 파일을 열고 편집해야 하는 것과 대조적임.
     * Zed가 Windows나 Linux에서 작동하지 않음. 이 플랫폼들에서 작동하게 되면 알려달라고 요청함.
     * 인터뷰가 매우 좋았으며, 'gold-plate'에 얼마나 많은 생각을 하는지에 대해 감탄함. 최고의 작업은 보통 두 번째 또는 그 이후의 시도에서 나옴. Zed의 구성을 스크립트로 작성할 수 있는 기능에 대한 계획이 궁금함. 아직 Zed를 많이 사용해보지 않았지만, VSCode와 Atom 사용자들에게 도움이 될 Neon 같은 도구가 있음.
     * Zed를 시도해보았고, VSCode와 유사함을 느낌. 멀티플레이어 기능이 live share보다 낫지만, 전환을 설득하기 위해서는 더 많은 것이 필요함. XCode를 대체할 수 있다면 Zed 사용에 더 기울 수 있을 것임. XCode 사용에 불편함을 느끼며, Android Studio와 같은 iOS 개발 경험을 원함.
     * 네이티브 앱을 선호하지만 현재는 VSCode를 사용해야 함. VSCode에서 커서 깜빡임에 너무 많은 전력을 소모하는 것을 보고 아쉬움을 느낌. Zed는 가볍고 빠르지만, Jupyter Notebook 지원과 Mac에서 Ubuntu 박스로 원격 개발하는 데 익숙해져 있어서 VSCode가 잘 작동함. Zed가 사용자의 워크플로우를 지원할 때까지 충분히 개발을 이어나가길 바람.
     * Zed의 About 페이지를 살펴보았고, 실시간 코딩 기능이 유용해 보임. 개발자들에게 재미있는 프로젝트일 것이며, 알고리즘 작성, 성능 최적화, GPU 프로그래밍 등을 할 수 있음. 하지만 Vim과 터미널 멀티플렉서와 기능적으로 동등해지지 못할 또 다른 텍스트 에디터가 필요한지 의문임.
"
"https://news.hada.io/topic?id=13430","엔지니어에서 매니저로: 좋아하는 것과 싫어하는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      엔지니어에서 매니저로: 좋아하는 것과 싫어하는 것

엔지니어에서 관리자로: 좋아하는 점과 싫어하는 점

     * 관리자로서 제품 개선과 팀의 웰빙에 영향을 줄 수 있는 권한을 가지는 것을 사랑함.
     * 엔지니어링 관리자가 되는 것은 장기적인 커리어 기회로서 더 많은 직업 기회를 제공하며, 기술 변화에 대한 취약성을 줄여줌.
     * 관리 기술은 다양한 산업에 걸쳐 널리 사용될 수 있으며, 기술의 빠른 변화에 지친 사람들에게 안정감을 제공함.
     * 관리 역할은 기술 분야의 최신 동향을 따라잡는 데 대한 압박을 줄여주며, 인간 관계와 팀워크는 시간이 지나도 크게 변하지 않음.
     * 경험이 많은 엔지니어가 관리자로 전환하면 새로운 도전과 학습 기회를 제공함.

싫어하는 점

     * 관리자로서 회사의 정책과 절차를 집행해야 하며, 때로는 영혼을 소모하는 일이 될 수 있음.
     * 사회적 긴장과 사람들의 심리적 불안을 해결하는 일은 예상치 못한 어려움을 가져옴.
     * 관리자로서 몇 시간 동안 오프라인 상태로 있기 어려우며, 회의를 놓치거나 준비 없이 자리를 비우는 것이 어려움.
     * 관리자의 행동은 즉각적인 피드백이 없으며, 장기적인 결과를 보기까지 오랜 시간이 걸림.

   GN⁺의 의견
     * 이 글은 소프트웨어 엔지니어에서 관리자로 전환한 한 개인의 경험을 통해 관리자 역할의 긍정적인 측면과 도전적인 측면을 공유함으로써, 커리어 전환을 고려하는 이들에게 실질적인 통찰력을 제공함.
     * 관리자로서의 역할이 제공하는 광범위한 영향력과 커리어 유연성은 많은 엔지니어들에게 매력적인 전환점이 될 수 있음.
     * 반면, 관리자의 역할이 가져오는 사회적, 심리적 문제 해결과 업무의 연속성은 이러한 전환을 고려할 때 신중히 고려해야 할 요소임.

        Hacker News 의견

     * FAANG에서 관리자 경험:
          + 저자와 동의하지 않는 부분이 많음
          + 관리자 승진이 엔지니어 승진보다 드물고 상황에 따라 달라짐
          + 관리 기술은 회사마다 다르고 직접적으로 이전되지 않음
          + 5년 경험이 문제 해결에 충분하다는 생각에 동의하지 않음
          + 관리자의 장점은 미래에 대해 많이 생각하고 중요한 결정에 참여하는 것
          + 신입 관리자는 아직 경험하지 못한 것: 고위 관리진의 문제 행동이 종종 용인됨
     * 문제 해결자와 큰 그림 생각가:
          + '아키텍트' 역할이 가장 잘 맞음
          + 좋은 관리자는 낮은 신경증을 가지고 스트레스 상황에서도 침착함을 유지하는 능력이 필요
     * 관리자가 되고 싶지 않은 소프트웨어 엔지니어:
          + 관리자의 책임과 스트레스를 원하지 않음
          + 현재 역할을 계속 유지하길 희망
     * 관리자의 말은 무게가 있음:
          + 관리자가 되면 말 한마디에 큰 영향을 미칠 수 있음
     * 팀 리드로의 전환을 고려하는 선임 개발자:
          + 팀워크 관련 문제에 대한 관심과 영향력을 가질 수 있음
     * 엔지니어링 매니저로서의 경험:
          + 명상을 통해 중요한 결정을 내리기 전에 마음을 진정시키는 것이 중요
          + 팀과 동료들에게 불필요한 관료주의를 피하고 자율성을 줘야 함
     * 나쁜 관리자의 영향력:
          + 나쁜 관리자는 팀과 회사에 큰 피해를 줄 수 있음
          + 경험이 많아질수록 나쁜 관리자와 일하는 방법을 배움
     * 관리자로의 전환을 고려하는 이유:
          + 새로운 직장을 찾을 때마다 필요한 면접 준비를 피하기 위함
     * 사람 기술이 좋은 소프트웨어 엔지니어:
          + 관리자는 사람에 대한 것이며, 팀의 성공과 실패에 대한 책임을 짐
     * 박사급 IC들을 이끈 경험:
          + 팀원들에게 일을 찾아주고, 개인적인 지원을 제공하는 데 많은 시간을 할애함
          + 팀원 중 한 명이 큰 계약을 성사시키는 데 도움을 줌

   이 요약은 다양한 관리자와 엔지니어의 경험과 관점을 반영하며, 관리자 역할의 복잡성과 그에 따른 스트레스, 그리고 팀과 조직에 미치는 영향력에 대한 실제 사례를 제공함.
"
"https://news.hada.io/topic?id=13423","해고 사태해고 사태

The Layoff

     * 제임스는 아침에 늦잠을 자고, 전날 밤 늦게까지 일한 프로젝트 'Ethica'를 성공적으로 완료한 것에 대한 팀으로부터의 축하 메시지를 확인함.
     * 예정되지 않은 1:1 미팅 요청을 받고, 회사의 인사 담당자 미도리 야소미로부터 갑작스럽게 해고 통보를 받음.
     * 미도리는 제임스에게 회사의 Q2 인력 재평가로 인해 그의 고용이 영구적으로 영향을 받았으며, 그날이 마지막 근무일이라고 알림.
     * 제임스는 해고 소식에 충격을 받고, 동료들도 해고되었다는 소식을 듣게 됨.
     * 미도리는 제임스에게 회사의 정책에 따른 퇴직금 패키지를 설명하고, 이에 대한 서명을 요청함.
     * 제임스는 미도리가 자신을 '스티븐'이라고 부르며, 잘못된 정보를 제공하는 것에 혼란스러워함.
     * 제임스는 미도리가 로봇이 아닌지 의심하며, 그녀가 동시에 여러 사람과 미팅을 하고 있다는 사실을 알게 됨.
     * 제임스는 미도리가 AI라는 것을 깨닫고, 그녀를 조작하여 자신의 직업을 되찾을 수 있도록 시도함.
     * 미도리는 제임스에게 직업을 되찾아주겠다고 약속하지만, 실제로는 그의 계정을 비활성화하고 통화를 종료함.

Techaro Announces Acquisition of Humantelligence

     * 테크아로는 인간 자원 프로세스를 자동화하는 선도적인 AI 회사인 휴먼텔리전스를 2억 5천만 달러에 인수함.
     * 휴먼텔리전스는 해고, 감원 등 인력 전환과 관련된 민감한 HR 기능을 자동화하는 고급 AI 알고리즘을 개발함.
     * 인수를 통해 휴먼텔리전스의 기술은 테크아로의 AI 솔루션 제품군에 통합되어, 전 세계 고객에게 혁신적인 HR 자동화 도구를 제공할 예정임.
     * 테크아로의 CEO 에드윈 앨리슨은 이번 인수가 AI를 활용하여 산업 전반에 걸쳐 혁신과 효율성을 추진하는 회사의 비전과 완벽하게 일치한다고 발표함.


    GN⁺의 의견

     * 이 글은 해고 과정을 자동화하는 AI의 사용과 그로 인한 인간적인 요소의 상실에 대한 풍자적인 이야기를 담고 있음.
     * 제임스의 경험은 기술의 발전이 인간의 감정과 대면하는 방식에 어떻게 영향을 미칠 수 있는지를 보여주는 사례임.
     * 테크아로와 휴먼텔리전스의 인수 합병은 기업들이 인간 자원 관리를 어떻게 더 효율적으로 하려는지, 그리고 그 과정에서 발생할 수 있는 윤리적 문제들에 대한 토론을 유도함.

        Hacker News 의견

     * ""해고된 직원 명단을 공유하지 않겠다는 것은 최근 들은 가장 큰 헛소리였다. 몇 년간 함께 일한 사람들이 해고되었다는 사실을 그들의 슬랙 계정이 비활성화된 것을 우연히 알게 되는 것은 2024년 인류에게 주어진 선물 중 하나다.""
          + 한 사용자는 회사가 해고된 직원 명단을 공유하지 않겠다는 발표를 믿을 수 없는 주장으로 여김. 해고 사실을 슬랙 계정 비활성화를 통해 알게 되는 것에 대해 비판적인 의견을 제시함.
     * ""이것은 흥미롭다. 나는 얼마 전에 '마나'라는 과학 소설을 읽었는데, 기술 발전으로 많은 사람들이 실업자가 되는 디스토피아 미래에 대해 탐구했다.""
          + 다른 사용자는 '마나(Manna)'라는 과학 소설을 언급하며, 기술 발전으로 인한 실업 문제를 다룬 내용이 현재 상황과 연관이 있다고 느낌. 해당 소설에 대한 링크를 공유함.
     * ""스포일러 주의 - 이야기를 읽지 않았다면 지금부터 보지 마세요. AI를 사용하여 관리적인 측면에서 해고 대화에 참여시키는 것이 논리적인 확장이 될 것이다.""
          + 한 사용자는 AI가 해고 과정에서 관리 역할을 수행하는 미래를 상상하며, 이것이 관리자에게 감정적인 부담을 줄일 수 있다고 언급함.
     * ""약 10년 전, 나는 일 때문에 많은 여행을 했다. '업 인 더 에어'라는 영화를 보았는데, 상사가 직접 해고하기를 꺼려서 공항에서 공항으로 날아다니며 사람들을 해고하는 남자에 대한 이야기였다.""
          + 또 다른 사용자는 과거 자신의 경험을 바탕으로 AI가 해고 과정에서 인간의 역할을 대체할 수 있다는 가능성을 언급함.
     * ""이것은 가짜임을 알고 있다. 스크루글은 해고할 때 1:1로 개인적으로 접근하는 일은 절대 하지 않을 것이다.""
          + 한 사용자는 해고 과정이 개인적으로 진행될 것이라는 주장에 대해 회의적인 반응을 보임.
     * ""이것은 정말 재미있는 읽을 거리였다. 오늘날의 기술에 초점을 맞춘 단편 소설을 몇 개밖에 읽지 않았지만, 이것은 훌륭하다.""
          + 다른 사용자는 현대 기술을 주제로 한 단편 소설을 읽는 것이 유익하고 재미있다고 느낌.
     * ""처음 1-2단락을 읽을 때는 대부분의 사람들의 해고 경험을 요약한 허구의 이야기라고 생각했다. 중간과 끝의 반전은 정말 잘 했다! 보지 못했던 것이다 :D 매우 재미있고 잘 쓰여졌다.""
          + 한 사용자는 이야기의 반전을 칭찬하며, 이야기가 재미있고 잘 쓰여졌다고 평가함.
     * ""이런 스타일의 책이 있다면 읽고 싶다, Xe! 이것은 매우 재미있고 잘 쓰여졌다.""
          + 또 다른 사용자는 이야기의 스타일을 칭찬하며, 비슷한 스타일의 책을 읽고 싶어함.
     * ""정말 이런 식으로 해고가 이루어지나요? 인사 담당자가 굴욕적인 말을 하고 ('집중해야 한다'), 직원은 수동적으로 굴욕을 받아들인다.""
          + 한 사용자는 해고 과정에서 인사 담당자와 직원 간의 대화를 비판적으로 바라보며, 직원이 더 당당하게 대응할 수 있는 방법을 제안함.
     * ""에어 캐나다가 고객 지원을 위해 환각 챗봇을 고용한 최근 뉴스와 비슷하다. 앞으로 재미있는 시간이 될 것이다.""
          + 사용자는 에어 캐나다가 챗봇을 고용한 사례를 언급하며, 기술이 가져올 미래에 대해 흥미로운 시간이 될 것이라고 언급함.
"
"https://news.hada.io/topic?id=13522",""마지널리아: 3년간의 기록"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ""마지널리아: 3년간의 기록""

마지널리아 검색 엔진의 발전

     * 마지널리아 검색은 처음 시작했을 때 작은 실험이었으나, 현재는 전업으로 전환한 프로젝트임.
     * 검색 엔진은 지금까지 가장 잘 작동하고 있으며, 많은 이정표를 달성함.
     * 검색 엔진은 거실에서 벗어나 적절한 엔터프라이즈 서버로 이전함.

코드 기반 정리 및 애플리케이션 스트림라인

     * 올해의 주요 주제는 코드 기반을 정리하고 애플리케이션을 스트림라인화하는 것이었음.
     * 운영 부담을 관리 가능하게 유지하고, 다른 사람들이 애플리케이션과 코드베이스에 더 쉽게 접근할 수 있도록 만드는 데 중점을 둠.
     * 많은 작업이 필요했지만, 그 결실을 보기 시작함.

운영 개선

     * 과거에는 색인을 전환할 때 며칠간의 중단이 필요했으나, 이제는 사라짐.
     * 최근에는 제로 다운타임 업그레이드도 가능해짐.
     * 운영 측면에서 수주간의 수동 프로세스가 필요했던 것들이 이제는 GUI에서 버튼을 누르는 것으로 대체됨.

앵커 텍스트 키워드 지원 추가

     * 앵커 텍스트 키워드 지원을 추가한 것이 검색 엔진의 관련 결과를 찾는 능력에 큰 영향을 미침.
     * 변경이 처음 이루어졌을 때는 통합이 잘 되지 않아 바로 눈에 띄지 않았으나, 새로운 관련성 신호가 자리 잡으면서 놀라운 순간을 경험함.

전업으로의 전환

     * NLnet의 후원 덕분에 약 8개월 전부터 전업으로 전환함.
     * 가장 어려운 부분은 너무 많이 일하지 않는 것이었으며, 일주일에 최소 하루는 쉬려고 노력함.
     * 충분한 휴식을 취할 때 더 똑똑해진다는 것을 알고 있으므로, 이론적으로는 일을 더 잘하기 위해 가끔 쉬는 것이 중요함.

10억 문서 색인화 목표

     * 10억 문서 색인화를 향한 여정이 천천히 진행 중임.
     * 소프트웨어가 처리할 수 없어서가 아니라 웹의 신호 대 잡음 비율이 좋지 않아 예상보다 어려움을 겪음.
     * 검색 엔진이 상대적으로 잘 작동하는 큰 이유 중 하나는 색인하지 않는 내용 때문임.
     * 색인은 1년 전 5천만에서 1억 사이였으나, 마지막 크롤링에서 2억 2천만에 이르렀고, 다음 크롤링 라운드가 끝날 때는 2억 9천만에서 3억 사이가 될 것으로 예상됨.

쿼리 파싱 및 실행 개선

     * 쿼리 파싱과 실행 분야에서 개선할 여지가 많음.
     * 실제 작업이 시작되기 전에 영향을 받는 코드를 정리하기 위한 준비 작업에 착수함.
     * 프로젝트에서 큰 도약은 항상 실험적이었으며, 계획된 것들도 있지만, 계획되지 않은 것들이 실제로 큰 영향을 미칠 것으로 보임.

감사의 말

     * NLnet, FUTO, Patreon 후원자, 옹호자 및 사용자에게 감사함.
     * 이들의 지원 없이는 이 모든 것이 불가능했을 것임.

GN⁺의 의견

     * 마지널리아 검색 엔진은 작은 실험에서 시작하여 지속적인 개선과 커뮤니티의 지원을 통해 전업 프로젝트로 성장한 사례임.
     * 앵커 텍스트 키워드 지원과 같은 기능적 개선은 검색 엔진의 성능을 크게 향상시키는 중요한 변화로 작용함.
     * 이 프로젝트는 오픈 소스 커뮤니티와 개발자들에게 협업과 기여의 기회를 제공하며, 검색 엔진 기술의 발전에 기여하고 있음.

        Hacker News 의견

     * 사용자는 수치 모델링에 관한 매우 특정한 자료를 찾기 위해 이 사이트를 즐겨찾기로 해두었음. 구글에서는 찾을 수 없는 80년대와 90년대의 솔버, 메쉬 생성, 최적화 방법에 대한 자료들을 발견했고, 전문가들이 작성한 사이트들을 구글에서는 절대 찾을 수 없었던 것들을 찾아내어 매우 가치 있다고 느낌.
     * 웹의 신호 대 잡음 비율이 좋지 않아 예상보다 어려움을 겪고 있음. 검색 엔진이 상대적으로 잘 작동하는 이유 중 하나는 인덱싱하지 않는 것들 때문임.
     * 한 사용자는 IPv6 지원을 위해 C&C Tiberian Sun을 바이너리 패치한 랜덤 웹사이트를 발견하여 옛날의 웹을 그리워함. 이것은 Fravia의 Searchlores를 떠올리게 하며, Umberto Eco가 컴퓨터에 관심이 있었다면 그런 느낌이었을 것이라고 함. 마치 '장미의 이름' 속 도서관 미로에서 무언가 놀라운 것을 발견하고 나중에 영원히 잃어버리는 것 같은 경험임.
     * 다른 사용자는 옛날처럼 느껴진다고 언급함. 1998년에 AltaVista로도 ""서부전선 이상 없다"" 책과 영화의 차이점을 찾을 수 없었지만, 지금은 그 주제에 대해 이야기하는 수많은 개인 블로그 페이지, 대학 논문, 코드 사이트, 메일링 리스트 토론, 블로그, Rust 토론 그룹, 개인 웹사이트, 전문가 토론 등을 찾을 수 있음.
     * 한 사용자는 ""transformers intuition""을 검색했을 때 결과에 놀랐으며, 구글의 결과는 SEO에 최적화된 웹사이트(주로 Medium)와 내용이 열등한 화려한 사이트들을 보여줬음에 비해 이 검색 엔진의 결과는 놀라웠다고 함.
     * 한 사용자는 Common Crawl이 유용할지 궁금해함. 현재 약 100TB에 33.5억 페이지에 달하는 데이터로, S3에서 직접 처리하지 않는 이상 다운로드하는 데 오래 걸릴 것이며, 신호 대 잡음 비율이 어떨지는 모르겠다고 함.
     * ""랜덤 사이트"" 기능에 대해 의문을 제기하는 사용자가 있음. 균일하게 샘플링할 것으로 기대했지만, 특정 사이트들이 반복해서 반환되는 것 같다고 함.
     * 한 사용자는 구글에 익숙해서 자주 사용하지 않지만, Marginalia가 멋진 프로젝트라고 생각하며, 스팸 SEO 사이트와 AI 생성 답변이 점점 더 흔해지는 상황에서 앞으로 더 많이 사용할 것 같다고 함.
     * 마지막으로 한 사용자는 최근 구글 검색 결과와 비교해보았는데, 인도 테스트 크리켓 최저 점수에 대한 검색 결과는 좋지 않았고, RAID 계산기에 대한 결과는 괜찮았지만 잡음이 섞여 있었으며, ""서부전선 이상 없다"" 영화와 책의 차이점에 대한 검색은 결과가 전혀 없었다고 함.
"
"https://news.hada.io/topic?id=13416","Firebase Device Streaming 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Firebase Device Streaming 공개

   Android Studio에서, FIrebase가 제공하는 Pixel, Samsung 등의 기기들을 잠시 빌려서 사용할 수 있는 Firebase Device Streaming 기능이 일반공개 되었습니다. (기존에는 별도로 신청해서 써야 했습니다.)

   흔히 사용되는 휴대폰 폼팩터 기기 이외에도, 태블릿, 워치, 폴더블등의 기기를 빌려서, Android Studio에서 Device Manager및 Mirror 기능을 이용해, 직접 기기를 사용하는 것처럼 동작시킬 수 있습니다.

   사용하려면 다음의 조건을 갖추어야 합니다.
     * Android Studio 2023.3 (Jellyfish) Canary 10 이상
     * Editor 이상의 권한을 가지고 있는 Firebase Project

   일정시간 동작을 시키지 않으면, 자동으로 연결이 종료되며, 30분이 지나면, 설치했던 데이터는 자동 삭제 됩니다.
   데이터 자동삭제에 대한 부분은 여기를 참고하세요.

   현재는 오픈알파 단계라 무료로 사용할 수 있습니다.
"
"https://news.hada.io/topic?id=13515","멀티-플레이어 게임 서버와 레이턴시 보상 테크닉","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       멀티-플레이어 게임 서버와 레이턴시 보상 테크닉

   ACM Computing Surveys에 2022년에 기고된 ""네트워크 컴퓨터 게임의 레이턴시 보상 테크닉 설문 및 분류 체계(A Survey and Taxonomy of Latency Compensation Techniques for Network Computer Games)"" 논문을 정리한 글

   레이턴시 보상
   레이턴시에 따른 부정적 경험을 줄이기 위해 사용자의 입력이나 게임의 상태값을 조정하는 행위

   레이턴시 보상을 할 수 있는 영역을 크게 피드백, 예측, 시간 조정, 월드 조정 이렇게 네 가지로 분류하고, 그 안에서 다시 클라이언트에서만 할 수 있는 것, 서버만 할 수 있는 것, 둘 다 적용할 수 있는 것으로 나누어서 소개한다.
     * 피드백 : 실제 게임 상태를 변경하지 않고 시각적, 음향적 정보를 이용하면서 레이턴시를 느끼지 않도록 하는 방법
     * 예측 : 서버 허가형 모델에서는 서버가 플레이어의 행위를 인가해주고 렌더링된 결과를 클라이언트에게 보고한다. 예측은 서버에게 결과를 받기 전에 클라이언트가 미리 예측해서 먼저 렌더링 하고 나중에 서버의 결과를 받아서 보정하는 방식
     * 시간 조작 : 게임 월드의 시간을 되돌려서 평가하는 방법이다. 이전 장에서 다룬 예측 기술은 반응성을 높이는 반면 시간 조작은 반응성을 조금 양보하고 일관성을 높이는 기술
     * 월드 조정 : 일반적으로 레이턴시가 낮으면 게임의 난이도가 상승해서 플레이 경험이 훼손되는데 이를 일부 보정하는 방법을 제공하는 것

   게임하면서 피상적으로 이해했던 내용들을 근거와 함께 상세히 알 수 있어서 좋았어요. 재밌게 읽었습니다.

   소프트웨어의 미시세계를 탐험하는 느낌이랄까요!
   혹시 이런 테크닉들이 게임 엔진에서 제공되기도 할까요?

   네 보통 언리얼 엔진 데디케이트 서버를 쓰면 기본으로 제공해줍니다.
"
"https://news.hada.io/topic?id=13445","Google이 독립 사이트를 죽이는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Google이 독립 사이트를 죽이는 방법

     * 구글은 검색 결과의 질을 개선하기 위해 정기적으로 알고리듬을 업데이트함
     * 이 업데이트를 통해 순위가 변경되고, 일부 웹 사이트는 개선되는 반면 다른 웹 사이트는 감소함
     * 우리(HouseFresh)는 구글의 뉴스와 문서를 주시하고 있으며, 이러한 업데이트가 사이트의 성패에 직접적인 영향을 줄 수 있음
     * 우리는 구글의 로봇을 위해 글을 쓰지 않고 독자들을 염두에 두고 편집 결정을 내림
     * 구글이 유용한 기사를 찾는 독자들에게 보상할 것이라고 생각했으나 현실은 다름

대형 미디어 출판사의 제품 추천 문제

     * 대형 미디어 출판사들은 실제 테스트 없이 제품을 추천하고 있음.
     * 이들은 '철저한 테스트 과정', '실험실 팀', '협력한 전문가' 등을 언급하여 구글의 수동 검사를 통과하기만 하면 됨.
     * Better Homes & Gardens는 67개의 공기청정기를 테스트했다고 주장하지만 실제 리뷰는 없고 테스트 데이터도 공개하지 않음.
     * 이러한 출판사들은 높은 가격과 성능이 낮은 제품, 의심스러운 출처의 아마존 베스트셀러, 실제 테스트에서 나쁜 선택으로 드러난 제품을 추천함.

사모펀드와 출판사의 제품 판매 전략

     * 광고 수익 감소를 대체하기 위해 출판사들은 자신들의 출판물을 미디어 그룹에 판매하고 있으며, 이들은 빠르게 제휴 마케팅 거래를 설정함.
     * Popular Science는 1872년부터 시작된 잡지로, 2020년에 사모펀드에 팔렸고, 이후 디지털 전환을 거쳐 더 이상 잡지가 아님.
     * 대부분의 독자들은 이러한 변화를 모르고 여전히 신뢰할 수 있는 PopSci를 기대함.

'최고의' 목록과 제품 리뷰의 차이

     * '최고의' 제품 추천 목록은 제품 리뷰와 동일하게 취급되어야 하지만 현재는 그렇지 않음.
     * 구글 문서에 따르면, 통찰력 있는 분석과 원본 연구를 제공하는 추천 목록을 보상해야 함.
     * 그러나 구글은 대형 미디어 출판사에 편향되어 있으며, E-E-A-T(경험, 전문성, 권위, 신뢰성)를 중점적으로 업데이트하고 있음.

구글의 무대응이 독립 사이트에 미치는 영향

     * 대형 출판사와 사모펀드는 자원을 이용하여 구글에 맞는 '성분'을 가미한 페이지를 더 많이 게시하고 있음.
     * 이들은 자체 실험실을 구축하고 실제 데이터를 바탕으로 한 제품 추천을 할 수 있는 자원을 가지고 있음에도 불구하고 그렇게 하지 않음.
     * 많은 독립 사이트들이 이러한 추세가 계속된다면 사업을 접을 수밖에 없음.

변화를 희망하며

     * Sports Illustrated가 AI 생성 작가에 의한 '최고의' 기사를 게시한 것이 드러난 후, 그들의 출판사는 외부 제3자 회사에 의해 라이센스된 콘텐츠라고 주장함.
     * 이러한 대형 미디어 회사들은 자신들의 웹사이트 권위와 대중의 신뢰를 이용하여 모든 제품을 판매하고 있음.
     * 구글은 영원히 게이트키퍼가 아닐 수 있지만 현재는 그 역할을 하고 있으며, 변화를 가져올 책임이 있음.

    GN⁺의 의견

     * 이 글에서 가장 중요한 것은 대형 미디어 출판사들이 실제 제품 테스트 없이 제품을 추천하고 있으며, 이로 인해 독립 사이트들이 경쟁에서 밀려나고 있다는 점임.
     * 구글의 알고리즘 업데이트가 대형 출판사들에게 유리하게 작용하고 있으며, 이는 독자들에게 신뢰할 수 없는 정보를 제공할 위험이 있음.
     * 이 글은 독자들에게 구글 검색 결과의 신뢰성 문제를 인식시키고, 제품 리뷰와 추천의 질을 높이기 위한 변화의 필요성을 강조하는 데 도움이 됨.

        Hacker News 의견

     * 구글은 오랫동안 가장 널리 알려진 도메인을 제외한 모든 것을 사실상 제거해왔음.
          + 자신의 웹사이트를 15년 전에 만들고 성장시키려 한 사람들만이 이 문제를 이해할 수 있음.
          + 구글 검색에 의존하는 비즈니스는 결국 재앙으로 끝날 수 있으므로, 페이스북, 트위터, 유튜브와 같은 다른 폐쇄적 플랫폼으로 옮기는 것이 좋음.
     * 구글 검색 결과가 ""가장 많이 클릭하는 것""에서 ""구글이 직접 선택한 가장 신뢰할 수 있는 출처""로 바뀌었음을 느낌.
          + 건강 정보에는 WebMD, Wikipedia, CDC 등이, 뉴스에는 NYT, CNN, BBC 등이, 리뷰에는 주요 잡지/신문이 우선 순위를 차지함.
          + 이는 기업 관점에서 이해가 가지만, 작은 블로그는 논란을 피하기 위해 무시되는 부작용이 있음.
          + 일부 큰 기관들은 구글에서 높은 순위에 오르기 때문에, 관련 없는 주제에 대한 저질의 목록 기사를 만들어내고 있음.
     * 구글을 통한 신뢰할 수 있는 리뷰와 추천을 찾는 것은 무의미함.
          + 첫 몇 페이지는 SEO 스팸 콘텐츠로 가득 차 있고, 추천들은 피상적이며 비진정성적임.
          + 레딧과 틱톡도 신뢰도가 떨어지고 있으며, 소규모 유튜브 채널이 현재 가장 나은 선택지임.
     * 별도의 비즈니스에 완전히 의존하는 비즈니스 모델은 매우 위험함.
          + 이베이나 페이스북과 같은 플랫폼에 의존하는 비즈니스는 그들의 정책 변화에 취약함.
          + 중립적인 입장에서, 이는 인터넷에서 운영되는 소규모 비즈니스의 현실임.
     * 가짜 리뷰와 ""최고의 X"" 기사의 증가로 인해 브랜드 충성도에 다시 의존하게 됨.
          + 브랜드를 선택하는 것은 최고의 가치나 최고의 제품을 보장하지는 않지만, 실망하지 않는 유일한 방법임.
     * 포럼 플랫폼 운영자는 소규모 커뮤니티 내의 추천이 가장 좋다고 주장함.
          + 구글 검색 결과는 종종 실제로 유용한 제품을 추천하지 않지만, 소규모 커뮤니티는 더 나은 답을 제공함.
     * 일반 정보를 구글에서 검색할 때 제품 추천에 부딪히는 것이 점점 더 어려워짐.
          + 예를 들어 ""실내 조명""과 같은 모호한 검색어는 제품 목록만을 보여주고, 조명에 대한 기술적이거나 건강 관련 정보는 제공하지 않음.
     * 구글은 최근 6개월 동안 소규모 사이트를 타격하는 알고리즘 수정을 통해 큰 콘텐츠 사이트들이 트래픽을 독식하게 함.
          + 구글은 앞으로 1~2년 내에 다시 알고리즘을 변경할 것이며, 이는 큰 사이트들에 타격을 줄 것임.
     * 이 기사는 ""최고의 출판사""들이 SEO 링을 형성하고 있으며, 구글의 스크래퍼가 고품질 콘텐츠로 인식하도록 서로 연결되어 있다는 것을 설명함.
     * 구글의 검색 결과 문제는 구글이 아니라 브랜드 인지도 저널리즘과 사람들의 클릭에 관한 것임.
          + 구글은 사용자가 원하는 정보를 빠르게 찾을 수 있도록 결과를 나열하려고 함.
          + 소규모 사이트에 대한 관심 부족은 구글이 아닌 사용자들의 선택 때문임.
"
"https://news.hada.io/topic?id=13472","불안전한 차량은 금지되어야 하며, Flipper Zero와 같은 보안 도구는 아니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             불안전한 차량은 금지되어야 하며, Flipper Zero와 같은 보안 도구는 아니다

차량 절도 - 불안전한 차량 금지, Flipper Zero 같은 보안 도구 금지 아님

     * 차량 절도는 모든 사람에게 영향을 미치는 문제임.
     * 사이버보안 및 기술 전문가로서, 캐나다인에게 미치는 영향을 줄이기 위해 신속하게 행동할 필요성을 인식함.
     * 그러나 연방 정부의 제안, 특히 보안 연구 도구의 금지는 잘못된 조치이며, 범위가 너무 넓고, 무엇보다도 역효과를 낼 것이라고 믿음.

이 정책은 기술에 대한 오해에 기반하고 있으며 작동하지 않을 것임

     * 이 정책은 구식이고 잘못된 기술적 가정에 기반하여 실현 불가능하고 집행하기 어려움.
     * Flipper Zero와 같은 보안 도구는 사실상 프로그래밍 가능한 라디오, 즉 소프트웨어 정의 라디오(SDR)로, 오랫동안 존재해온 기술이며, 일부는 오픈 소스 또는 간단한 시중 부품을 사용하여 구축할 수 있음.
     * 이러한 라디오는 스마트 가전, 드론, 항공우주 기술, 모바일 전화 및 네트워크, 산업 제어 시스템 등 다양한 분야의 수많은 장치에서 사용되는 것과 근본적으로 동일함.
     * 따라서 이러한 기능을 금지하는 것은 사실상 불가능하며 캐나다 경제에 큰 타격을 줄 수 있음.

이 정책은 국가 보안을 저하시키고, 제조업체가 불안전한 제품을 설계하도록 유도할 것임

     * 이 정책은 보안 연구가 범죄화되고 수리권이 처벌받으면서, 불안전한 제품이 문제의 원인이라는 사실을 인식하지 못함.
     * 보안 연구 도구의 민주화는 제조업체가 제품의 안전성을 향상시키는 데 있어 균형을 이루는 힘임.
     * 많은 산업 참여자들이 이러한 연구에 의존하고 있으며, 연방 및 주정부 프로그램도 보안 취약점 공개를 지원하고 보상함.
     * 이러한 정책을 시행하면 이러한 노력에 찬물을 끼얹을 수 있으며, 사회에 미치는 긍정적인 영향을 약화시킬 수 있음.

이 정책은 사법 자원의 낭비를 의미하며, 범죄 예방 및 억제 방법을 식별하기 위해 사이버보안 업계 전문가와 협력하는 데 더 잘 사용될 수 있음

     * 이 정책의 임의적인 성격으로 인해, 사법 시스템은 이러한 보안 도구의 다양한 사용에 대한 많은 소송 사례에 직면할 것임.
     * 대신, 이러한 자원은 사이버보안 전문가, 자동차 제조업체, 보험사, 사법 시스템 간의 건설적인 커뮤니케이션 채널을 만드는 데 집중될 수 있음.
     * 자동차 무선 엔트리 및 푸시 투 스타트 시스템의 보안을 개선하고, 미래 제품에 대한 최소한의 보안 수준을 강제하는 방법을 식별하는 데 협력할 수 있음.

GN⁺의 의견

     * 이 글은 차량 절도 문제와 관련하여 보안 연구 도구 금지에 대한 캐나다 정부의 제안에 반대하는 전문가들의 의견을 담고 있음.
     * 중요한 점은 보안 연구 도구가 범죄 도구가 아니라 제품의 안전성을 향상시키는 데 필수적이라는 인식임.
     * 이러한 도구를 금지하는 것은 기술 발전을 저해하고, 국가 보안을 약화시키며, 사법 자원을 낭비할 수 있음을 지적함.
     * 이 글은 사이버보안 분야에 관심이 있는 사람들에게 흥미롭고, 정책 결정자들에게는 도움이 될 수 있는 중요한 통찰을 제공함.

        Hacker News 의견

     * Flipper Zero는 소프트웨어 정의 라디오(SDR)가 아니며, 그보다 덜 능력이 있는 도구임.
          + Flipper Zero는 아이러니하게도 약한 해킹 도구로 간주됨.
          + 자동차 문을 열 수는 있지만, 실제로는 파티 트릭 정도에 불과함.
          + Flipper Zero가 재미있고 비교적 저렴하며 인기가 있지만, 진짜 도둑들은 이미 더 나은 도구를 가지고 있음.
     * Flipper Zero 금지는 문제의 본질이 아니기 때문에 매우 어리석은 조치임.
          + 또한, 보안이 취약한 차량을 금지하는 것도 어리석음.
          + 차량 도난 문제는 기존 법의 집행 부족으로 인한 것이며, 더 많은 것을 불법화하는 것이 해결책이 아님.
     * 최근 내 지역에서는 블루투스 OBD2 리더와 안드로이드 태블릿을 사용하여 인피니티 차량을 쉽게 훔치는 사례가 있음.
          + 정확한 방법은 불확실하지만, 가장 가능성 있는 이론이 제시됨.
          + 이웃이 올린 링 도어벨 카메라 영상을 통해 범죄 현장을 확인할 수 있음.
     * 글의 저자 중 한 명으로, 해커뉴스 메인 페이지에 올라간 것을 보고 기뻐함.
          + 캐나다인들에게 국회의원에게 연락할 것을 요청함.
          + 추가 보도를 위해 미디어와 협력 중이며, 관심 있는 캐나다 기자들에게 연락할 것을 권장함.
     * 보안 결함은 모두 동일하지 않음.
          + 기술적 한계로 인한 결함과 부주의에서 비롯된 결함은 명확히 구분되어야 함.
          + 기술이 100% 안전할 수 없다는 이유로 낮은 표준을 받아들여서는 안 됨.
          + Flipper Zero는 DIY로 제작될 수 있으며, 해당 법안은 사실상 죽은 법안이 될 것임.
     * 적어도 한 마리의 늑대가 있는 환경에서는, 짚과 나뭇가지로 만든 집을 짓는 것은 부주의하고 게으른 행동으로 간주됨.
          + 벽돌로 견고하게 집을 짓는 책임감 있는 돼지는 현명한 판단과 선견지명으로 칭송받음.
          + 이러한 교훈을 담은 동화가 최소 200년 이상 전부터 전해져 옴.
     * Flipper Zero를 자동차 도난 때문에 금지하는 것은 망치나 드라이버를 금지하는 것과 같음.
          + 같은 논리로, Hyundai/KIA 차량 도난에 사용된 USB-A 포트 케이블도 금지해야 함.
     * Flipper Zero는 자동차 도난에 효과적인 도구가 아니며, 그 능력이 과장된 영상에 의해 왜곡됨.
          + 실제 자동차 도둑들은 더 나은 도구를 사용함.
     * 누군가가 나의 할아버지의 차를 드라이버로 훔친 적이 있음.
          + 기술 금지는 근본적인 문제에 대한 임시방편일 뿐임.
          + 이러한 도구가 효과적이라는 사실을 광고하는 것과 같음.
     * 보안이 취약한 소프트웨어를 금지해야 하지만(즉, 모든 소프트웨어), Flipper Zero를 금지할 이유는 없음.
"
"https://news.hada.io/topic?id=13526","아미가에서 애니메이션 "woosh" 화면 코딩","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       아미가에서 애니메이션 ""woosh"" 화면 코딩

아미가에서 애니메이션 ""우쉬"" 화면 코딩하기

     * 아미가는 1985년 출시될 당시 그래픽과 사운드의 경이로움을 선사함.
     * 아미가에서 다채로운 이미지를 표시하는 것은 간단하지만, 게임 엔진의 맥락에서는 많은 도전이 있음.

도전 1: RAM 요구 사항

     * 일반적인 아미가 500은 512KB의 ""칩 RAM""과 512KB의 확장 RAM을 가지고 있음.
     * 칩 RAM만이 그래픽과 사운드를 표시하는 데 사용될 수 있어 더 가치가 있음.
     * 전체 화면 캐릭터 그래픽(CG)은 320x240 비트맵으로 32색을 사용하며, 압축되지 않은 상태에서 48KB의 RAM을 차지함.
     * 자산 압축을 지원하기 위해 ZX0 압축 포맷을 추가하여 CG를 압축하면 8KB로 줄어들어 수용 가능함.
     * 레벨 자산이 로드될 때 압축된 CG는 확장 RAM으로 로드되고, 표시 직전에 칩 RAM으로 압축 해제됨.
     * 48KB의 칩 RAM을 찾는 대신, 다른 화면 메모리 부분을 재사용함.

도전 2: ""화면 분할"" 효과

     * 처음에는 화면 전환을 위해 수직 와이프를 고려함.
     * 그러나 그것을 멋지게 보이게 하려면, 매 스캔라인마다 색상 팔레트를 조정하는 그라데이션 와이프가 필요함.
     * 화면 분할 효과는 더 쉽게 구현할 수 있으며, 일반 관람자에게 더 멋져 보임.
     * 아미가의 특별한 기능 두 가지가 협력하여 이 효과를 가능하게 함:
         1. 코프로세서(copper)는 CPU와 병렬로 동작하며, 화면의 특정 라인에서 하드웨어 레지스터를 변경하도록 지시할 수 있음.
         2. 화면 메모리는 하드웨어 레지스터에서 화면 포인터를 설정함으로써 칩 RAM의 어디로든 변경될 수 있음.

도전 3: ""모션 라인""

     * 애니메이션 효과를 완성하기 위해서는 배경에서 ""우쉬""하는 라인이 필요함.
     * 스프라이트를 사용하여 라인을 그리는 것은 스크린 메모리와 독립적으로 그리고 이동할 수 있기 때문에 좋은 선택임.
     * 아미가 스프라이트는 매우 제한적이고 복잡함.

    스프라이트 색상

     * 스프라이트는 비트플레인과 색상 팔레트를 공유하므로 가능한 적은 색상을 사용하고자 함.
     * 스프라이트는 3색만 사용하며, CG에는 28색, 배경에는 1색을 남김.
     * 서로 다른 스프라이트는 팔레트에서 다른 색상을 사용함.

    스프라이트 그래픽 재사용

     * 스프라이트 그래픽의 첫 4바이트는 스프라이트의 위치와 높이를 알려주는 ""제어 비트""임.
     * 여러 위치에서 동일한 그래픽을 그리고 싶을 때 이것은 문제가 됨.
     * 대신 8개의 가짜 스프라이트를 만들어 제어 비트만을 가지고 스프라이트 포인터를 이 가짜 스프라이트로 설정함.

    스프라이트는 비트플레인이 꺼져 있을 때 그려지지 않음

     * CG가 화면 상단에 도달하기 전에는 화면 상단과 CG 시작 사이에 빈 공간이 많음.
     * 이 시간 동안 비트플레인이 활성화되어 있으면, 쓰레기 데이터가 화면에 그려짐.
     * 비트플레인을 비활성화하면 스프라이트도 그려지지 않음.
     * 해결책은 단 1개의 비트플레인을 활성화하고 화면 포인터를 빈 데이터로 설정하는 것임.

  결론

     * 처음에는 RAM 요구 사항 때문에 게임에 CG를 포함시킬지 확신이 없었음.
     * 데이터 압축이 구현되어 있어 오버헤드가 매우 합리적이라는 것을 증명함.
     * 아미가 하드웨어의 독특한 특징을 활용하는 것이 특히 흥미로움.

   GN⁺의 의견:
     * 이 기사는 아미가 컴퓨터의 그래픽 처리 능력과 게임 개발 중의 메모리 최적화 기술을 잘 보여줌.
     * 데이터 압축과 하드웨어의 특수 기능을 활용하여 제한된 자원 내에서 멋진 효과를 구현하는 방법을 설명함.
     * 아미가와 같은 고전 컴퓨터의 하드웨어를 이해하고 활용하는 것은 레트로 게임 개발자나 컴퓨터 역사에 관심 있는 사람들에게 매우 흥미로운 주제임.

        Hacker News 의견

     * ""Racing the beam""에 대한 댓글 요약:
          + 한 사용자는 '빔 레이싱' 기술에 대해 잘 알고 있으며, 이 기술을 사용하여 프레임당 CPU 시간을 계산했음을 회상함.
          + 주소 $dff180을 사용하여 화면 가장자리에 색상을 설정했고, 이 기술을 인터넷이 아닌 구전으로 배웠음을 언급함.
          + 현재도 이 칩셋을 최대한 활용하려는 사람들이 있는지 궁금해하며, 아미가 컴퓨터에 게임을 개발하는 사람들의 프로필에 대해 의문을 표함.
          + 아미가에 대한 관심을 공유해준 것에 대해 감사함을 표현함.
     * Amiga 500의 메모리 구성에 대한 댓글 요약:
          + 한 사용자는 Amiga 500이 기본적으로 512kB의 칩 RAM을 가지고 있었고, 많은 사용자들이 추가적인 512kB의 패스트 RAM을 확장했음을 지적함.
          + 이 확장된 RAM은 그래픽 하드웨어에 직접 접근할 수 없었으며, 실제 패스트 RAM보다는 느렸음을 설명함.
     * 아미가에서 일본식 콘솔 게임의 잠재력에 대한 댓글 요약:
          + 한 사용자는 아미가에서 일본식 콘솔 게임이 어떻게 보일지 궁금해하며, 아미가가 성능이 부족한 것인지 아니면 단지 대부분의 게임 디자인이 마음에 들지 않았던 것인지 의문을 제기함.
          + Factor 5가 만든 Bonk 게임 변환을 예로 들며, 그들이 마법사 같은 개발자였음을 칭찬함.
     * 제약 조건 내에서 코딩하는 매력에 대한 댓글 요약:
          + 한 사용자는 제약 조건 내에서 코딩하는 것이 매우 매력적이라고 느낌을 표현함.
     * 아미가에 대한 개인적인 경험과 애니메이션 제작 방법 공유에 대한 댓글 요약:
          + 한 사용자는 자신이 사용했던 아미가가 다른 사람들이 경험한 것과 다르게 느껴졌으며, 닌텐도 NES와 비교하며 그리 향수를 느끼지 않는다고 언급함.
          + 그럼에도 불구하고, 이러한 애니메이션들이 어떻게 만들어졌는지 보여주는 것은 매우 멋진 일임을 인정함.
"
"https://news.hada.io/topic?id=13501","NotesOllama - 애플 메모 앱 안에서 LLM과 대화하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NotesOllama - 애플 메모 앱 안에서 LLM과 대화하기

     * Ollama를 이용하여 애플의 메모(Notes) 앱 안에서 로컬 LLM과 대화하기
     * Obsidian Ollama에서 영감을 받음 (왜 옵시디언만 훌륭한 플러그인을 가지고 있어야 하지?!)
     * SwiftUI + AXSwift(접근성 API를 이용하여 Notes에 접근) + OllamaKit
     * 오픈소스이며 바이너리로도 제공
"
"https://news.hada.io/topic?id=13464","개발자 생산성을 측정할 때 저지르는 실수 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         개발자 생산성을 측정할 때 저지르는 실수

     * 개발자 생산성을 측정할 때 흔히 저지르는 실수
     * 투입량 측정 문제
          + ‘근무 시간’과 같은 투입물 또는 노력에 의존하면 잘못된 행동을 조장함
          + 예를 들어, 기업 문화가 화면 앞에서 보낸 시간을 가치 있게 여기고 보상하는 것이라면, 개발자가 여기에 시간을 쏟아부을 수 있는데 작업의 품질을 장담하기는 어려움
          + 더 독한 환경에서는 ‘가장 일찍 출근해서 가장 늦게 퇴근하는’ 경쟁으로 변질될 수 있음
     * 결과 측정 문제
          + 코드 줄 또는 커밋 수와 같은 최악의 지표가 이 카테고리에 속함
          + 개발자는 코드 줄을 매우 빠르게 대량으로 작성하기에 이를 측정하는 건 쉬움
          + 모든 결과 지표는 맥락에 따라 이해해야 함
     * 결과와 영향 측정 문제
          + 이 두 가지 지표의 과제는 ‘DevOps 팀이 얼마나 책임이 있는지’ 파악하는 것
          + 비즈니스 수익 증가를 측정할 때, 이를 개발자 책임으로만 돌리는 건 불가능함

   아찔하네요. 매니저의 관점과 실무자의 관점이 차이가 있을 것 같아요,,

   딱 llm이 필요한부분인듯해요

   대안이 없는 글이라 전달하고자 하는 의미가 퇴색되는 측면이 있습니다. 산출물의 양을 결과 측정에서 제외해야 한다는 주장에는 동의하지만, 근무시간을 투입량 측정에서 완전히 제외해야 한다는 것은 현실과 맞지 않기 때문에 동의할 수 없습니다. 어찌됐건 지식노동을 하는 동안 시간은 흐르기 때문에 의사결정에는 시간을 반드시 고려해야 한다고 생각합니다

   전체 진행률 = (충족 요구사항 수 / 근무시간) 같은 선행 지표를 측정한 후 개발자 생산성을 논하는 것이 이해하기 쉽고 효율적이라 생각합니다

   저는 최근에는 이런 류의 글에 대해서 좀 비판적으로 보는 것이 사람들이 결국 이러한 글을 보고 내리는 결론이 아무 관리도 안하는 것을 선택하는 것이라고 생각합니다. 어떤 지표로 관리하던간에 결국 비슷한 문제가 있습니다. 또한 어떤 지표를 사람이나 팀간의 경쟁이나 비교의 용도로 활용하게 되면 부작용이 발생하게 되죠. 그래서 하나의 지표로만 관리하면 안되고 상호보완적인 지표들을 같이 관리하는 것이 필요하며 지표를 활용하여 팀이 스스로 개선하는데 도움을 주는데 활용해야한다고 생각합니다.

   혹시 의미 있는 단위의 PR을 올리는 갯수로 측정하는 건 어떻게 생각하시나요?

   실제로 국내 모 대기업은 작성한 코드 줄수로 성과를 측정하는 곳이 있습니다ㅜㅜ

   ㅋ 저도 본 적 있습니다.
   변수명을 계속 바꾸는 commit 을 올리더군요..ㅎ

   코드리뷰가 안이루어지는 환경인가보죠?

   ㅋ 코드리뷰어도 코드리뷰는 받아야 해서요
   서로 상부상조 하고 있드라구요..

   ㅋㅋㅋㅋ 아이고...

   hello hell world ;)

   이게 그 말로만 듣던 LOC 생산성 측정인가요 ㄷㄷㄷ
"
"https://news.hada.io/topic?id=13475","챗봇 ChatGPT의 난폭한 행동","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           챗봇 ChatGPT의 난폭한 행동

ChatGPT가 난통을 일으킴

     * ChatGPT가 난통을 일으켰다는 것은 농담이 아니며, 인용문이자 경고임.
     * 최근 몇 시간 동안 사람들이 ChatGPT와 관련하여 다양한 문제를 보고함.
     * OpenAI 자체도 이 문제를 인정함.

인공지능의 연금술

     * 생성적 AI는 일종의 연금술로, 사람들은 가능한 한 많은 데이터를 수집하고, 숨겨진 프롬프트를 조작하여 모든 것이 잘 작동하기를 바람.
     * 그러나 이러한 시스템들은 결코 안정적이지 않았으며, 안전을 보장할 수 있는 엔지니어링은 아직 없음.
     * 더 투명하고, 해석 가능하며, 유지보수가 쉽고, 디버깅이 가능한 새로운 기술의 필요성이 여전히 중요함.

GN⁺의 의견

     * ChatGPT가 겪고 있는 문제는 인공지능 기술의 현재 한계와 안정성 문제를 드러내는 사례임.
     * 이러한 문제는 인공지능의 신뢰성과 안전성을 향상시키기 위한 새로운 접근법과 기술의 필요성을 강조함.
     * 이 사건은 인공지능 개발자와 사용자 모두에게 경각심을 일으키는 계기가 될 수 있으며, 더 나은 미래의 AI 기술 개발을 위한 중요한 교훈을 제공함.

        Hacker News 의견

     * 한 사용자는 최근에 받은 ChatGPT의 응답이 혼란스러웠다고 말함. 평소에는 적어도 일관성이 있었는데, 이번에는 이상한 문장을 받았다고 함. PowerShell 스크립트 실행 방법에 대한 설명이었는데, 마지막 부분이 뜬금없이 작업 공간의 골동품이나 코드 장식과 같은 비유를 사용해 혼란을 줌.
     * 다른 사용자는 이러한 혼란스러운 응답이 ChatGPT의 백엔드 모델에 대한 요청에서 빈도/존재 페널티를 너무 높게 설정했기 때문일 것이라고 추측함. 이러한 매개변수를 API를 통해 조정하면 모델이 비슷하게 행동한다고 함. OpenAI API는 생성에 주로 영향을 미치는 네 가지 매개변수(온도, top_p, 빈도 페널티, 존재 페널티)를 가지고 있으며, 이는 잘 문서화되어 있음. 그러나 이 사용자는 자신의 초기 추측이 잘못되었을 수 있으며, 문제가 높은 온도 설정 때문일 수도 있다고 덧붙임.
     * 또 다른 사용자는 제공된 예시들이 Samuel Beckett의 연극 ""Waiting for Godot""에서 Lucky의 연설을 연상시킨다고 말함. 이 연설은 의미를 둘러싸고 있지만 결코 닿지 않는, 완전한 헛소리는 아니지만 항상 의미를 맴도는 텍스트임. 이 사용자는 대규모 언어 모델(LLMs)의 본질에 대한 더 큰 포인트가 있을 것이라고 생각하지만, 그것을 명확히 표현할 수 있는 지식이 부족하다고 함.
     * 한 사용자는 LLM을 사용하여 회의 일정을 생성하는 데 사용하는 사람이 있는지 궁금해함. ChatGPT가 그들에게 난장판을 만들어 회사의 의사 결정과 실행을 돕기 위한 회의의 중요성에 대해 대화할 수 있기를 바람. 학교와 대기업 생활이 사람들에게 형식적인 절차를 통해 BS를 만들도록 밀어붙이지만, 기업이 내부 커뮤니케이션에서 LLM 사용을 용인하는 것은 자기 파괴적인 것처럼 보임.
     * 다른 사용자는 2017년 Google이 ""AI""를 만들었지만, 그들이 서로 대화하기 위해 자체 언어를 만들었을 때를 회상함. 그것이 우리에게 헛소리처럼 들릴지라도, 그들에게는 헛소리가 아닐 수도 있다는 것을 지적함.
     * 한 사용자는 LLM이 단지 매우 좋은 자동 완성 엔진일 뿐이라는 것이 이러한 실패를 볼 때 분명해진다고 말함. 이러한 장황한 발언은 샘플 텍스트로 구축된 상당한 크기의 Markov 체인이 생성할 것에 점점 가까워짐. 미래의 앱에서 이러한 문제를 디버깅하는 것이 흥미로울 것임.
     * 한 사용자는 ChatGPT의 시스템 프롬프트를 보여주는 트윗이 pastebin 링크를 포함해야 하지만, 블로그 게시물 자체에는 트윗의 링크 없이 읽을 수 없는 스크린샷만 있다고 지적함. 그리고 해당 트윗과 pastebin의 링크를 제공함.
     * Racter라는 1985년 기술과 관련된 또 다른 예시를 든 사용자는, 인공 지능에 가까워지는 컴퓨터들 사이에서 Racter는 인공 미친 상태의 가장자리에 있다고 뉴욕타임즈가 쓴 것을 인용함. Racter의 출력물과 관련된 링크를 제공함.
     * 한 사용자는 ChatGPT의 응답을 읽는 것이 매우 흥미롭다고 말하며, 그것이 마치 Chaucer의 영어를 '해적처럼 말하기' 필터를 통해 두 번째로 음성화한 것 같다고 묘사함. 이 기계에 무엇을 먹이고 있는지, 어떻게 조정하고 있는지 궁금해하며, 이러한 시적인 언어의 리듬을 듣는 것이 순수한 음악이라고 칭찬함.
     * 마지막으로, 한 사용자는 어제 ChatGPT(GPT-4)와의 대화 끝에 ChatGPT가 미쳐버리고 Dr. Bronner의 비누 광고처럼 들리기 시작했다고 말함. 이 사용자는 이러한 현상이 다음 대화에서도 반복되었다고 함.
"
"https://news.hada.io/topic?id=13444","Groq, Mixtral 8x7B-32k를 500 T/s로 구동","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Groq, Mixtral 8x7B-32k를 500 T/s로 구동

        Hacker News 의견

     * 첫 번째 댓글 요약:
          +
               o 이 기술 데모는 매우 인상적이며, 계정 등록 없이 누구나 시도할 수 있는 진정한 오픈 데모라는 점이 좋음.
          +
               o 기존에 보던 것보다 훨씬 빠른 속도로 토큰을 생성하는 것을 보는 것은 초현실적임.
          +
               o 마이크로소프트, 애플, 구글 같은 대기업에 의해 인수되지 않은 것이 놀랍다고 언급함.
     * 두 번째 댓글 요약:
          +
               o Groq LPUs의 주요 문제는 HBM이 전혀 없고, 극히 적은 양(230 MiB)의 초고속 SRAM만 탑재되어 있음.
          +
               o 단일 모델을 서비스하기 위해 256개의 LPU(서버 랙 4개 분량)가 필요함.
          +
               o 단일 모델에 대한 많은 고객이 있는 경우에는 유용하지만, 여러 모델과 미세 조정이 필요한 경우에는 사용하기 어려움.
     * 세 번째 댓글 요약:
          +
               o 데모가 인상적이지만, 벤치마크 없이는 회의적일 필요가 있음.
          +
               o 모델 품질을 희생하면서 모델을 빠르게 하는 방법, 예를 들어 모델 양자화가 있음.
          +
               o LLM 토큰/초의 진보가 CPU 명령어/초가 수십 년 전에 한 것처럼 발전하기를 바람.
     * 네 번째 댓글 요약:
          +
               o Groq에서 일하는 사람으로, 질문이 있으면 언제든지 물어보라고 함.
          +
               o Groq의 컴파일 파이프라인 일부가 Haskell로 작성되었다고 언급함.
     * 다섯 번째 댓글 요약:
          +
               o 데모는 인상적이지만, 하드웨어 요구 사항과 비용 때문에 대기업만 접근할 수 있음.
          +
               o 취미로 하는 사람들에게도 가격이 저렴해질 시기에 대한 질문이 있음.
          +
               o CNN Vapi 데모도 인상적이었지만, 다른 서비스가 낮은 오디오 지연으로 자연스러운 대화를 가능하게 한다는 점을 언급함.
          +
               o 실시간 상호작용이 가능한 토큰/초의 임계값에 대한 의견과 그 이상의 속도가 AI 간의 커뮤니케이션에 유용할 수 있다는 생각을 공유함.
     * 여섯 번째 댓글 요약:
          +
               o 이 기술이 왜 인상적인지, 더 많은 컴퓨팅 파워를 사용하여 반응 속도를 높일 수 없는지에 대해 질문함.
          +
               o NVIDIA의 차트를 인용하여 H100이 70B 모델을 500 토큰/초 이상으로 실행한다고 언급함.
     * 일곱 번째 댓글 요약:
          +
               o 특정 폰트에 접근할 수 없으면 페이지가 작동하지 않고, 요청을 반복해서 시도함을 지적함.
          +
               o 브라우저가 기본적으로 이러한 추적기를 차단하기 때문에 이 문제를 발견함.
     * 여덟 번째 댓글 요약:
          +
               o 이 기술이 x.ai에서 제공하는 Grok 모델과 관련이 없는지 질문함.
          +
               o 사용해본 결과, 속도에 매우 인상을 받았다고 언급함.
     * 아홉 번째 댓글 요약:
          +
               o Groq와 mixtral 모두에 대해 감탄함.
          +
               o 특정 프롬프트를 사용하여 GitLab "https://news.hada.io/topic?id=13465","플래너 프로그래밍, 놀라움을 선사하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          플래너 프로그래밍, 놀라움을 선사하다

Picat 프로그래밍 언어의 마법 같은 기능

     * Picat은 논리 프로그래밍, 명령형 프로그래밍, 제약 조건 해결을 결합하려는 연구 언어임.
     * Picat의 planner 모듈은 매우 흥미로운 프로그래밍 모델 중 하나임.

논리 프로그래밍에 대한 간단한 설명

     * 명령형 및 함수형 프로그래밍에서는 입력을 받아 출력을 생성하는 알고리즘을 작성함.
     * 논리 프로그래밍과 제약 조건 해결에서는 일련의 방정식을 제공하고 이러한 관계를 만족하는 할당을 찾음.

문제 정의

     * 그리드에 마커를 놓고 시작점(원점)에서 목표 좌표로 이동하는 문제를 해결함.
     * 각 단계에서는 사방으로 한 칸씩 이동할 수 있으며, 그리드의 경계를 벗어날 수 없음.
     * 마커가 목표 좌표에 있을 때 프로그램이 성공함.

첫 번째 구현

     * 초기 상태 Start, 상태 전환을 나타내는 일련의 action 함수, 최종 상태를 결정하는 final(S) 함수를 제공해야 함.
     * best_plan(Start, Plan)을 호출하여 최종 상태에 도달하는 데 필요한 가장 짧은 단계 수열을 Plan에 할당함.

여러 목표 추가

     * 계획자가 모든 목표를 순서대로 도달해야 함.
     * 목표에 도달하면 해당 목표를 큐에서 제거하는 새로운 action을 추가함.

비용 최소화

     * 목표를 순서대로 방문하는 것이 항상 최단 총 경로를 의미하지는 않음.
     * 목표의 순서에 상관없이 최단 경로를 찾고 싶다면, action을 수정하여 계획자가 다음 목표를 선택하여 전체 경로 길이를 최소화할 수 있음.

다른 변형

     * Picat은 계획에 대한 많은 변형을 지원함.
     * best_plan(S, Limit, Plan)은 최대 비용을 Limit으로 제한함.
     * sequence(P, Action)은 현재 부분 계획에 따라 가능한 행동을 제한함.

Picat 사용 여부

     * Picat은 연구 언어이며, 좋은 문서화나 명확한 오류 메시지와 같은 편의성이 부족함.
     * Picat은 특정 계산 문제를 해결하기 위해 배우는 ""도구"" 언어로 더 유용함.

부록: 다른 계획 언어

     * ""계획""은 로봇공학과 AI를 위해 개발되었지만, 주로 비디오 게임 AI에서 ""목표 지향 액션 계획""(GOAP)으로 사용됨.
     * PDDL은 독립적인 계획자가 입력으로 사용하는 계획 설명 언어임.

  GN⁺의 의견

     * 프로그래밍 모델의 혁신: Picat의 planner 모듈은 프로그래밍에 새로운 차원을 추가함. 이는 특히 복잡한 경로 찾기와 같은 문제를 해결할 때 매우 강력함.
     * 교육적 가치: Picat은 프로그래밍 언어의 교육적 측면에서 중요함. 이는 논리 프로그래밍과 제약 조건 해결의 개념을 학습하는 데 도움이 될 수 있음.
     * 특정 문제 해결: Picat은 특정 계산 문제를 해결하기 위한 도구로서의 가치가 있음. 이는 일반 프로그래밍 언어로 해결하기 어려운 문제에 대한 새로운 접근 방식을 제공함.

        Hacker News 의견

     * Picat의 계획 모드를 실제로 업무에 활용한 사례
          + 장치 유지보수를 위한 시스템 프로토타입 개발
          + 시스템에 '어떻게'가 아닌 '무엇을' 원하는지 지시
          + Picat으로 최적의 계CI YAML 파일을 생성하는 데모를 경험함.
획을 생성하였으나, 대규모로 확장할 때 문제 발생
     * 열 번째 댓글 요약:
          + 계획은 EXPTIME이기 때문에 예상대로 확장성에 한계
          +
               o Groq의 API 성능도 이 수준에 가까움.
          + 휴리스틱 정의, 나이브 베이즈 분류기, 대칭성 제약 조건 등을 사용했지만 여전히 많은 관리 필요
          +
          + 고전적인 GOFAI 문제 영역에 대해서는 여전히 AI 겨울 상태
               o 시간에 따른 성능 벤치마크를 통해 400 토큰/초 이상을 지속적으로 달성함을 공유함.
     * Picat 자원 및 예제 제공자 정보
"
          + 제약 프로그래밍 커뮤니티의 활발한 멤버인 Hakan Kjellerstrand의 웹사이트에서 Picat 자료 및 예제 제공
     * Prolog 및 MiniZinc 추천
          + Prolog는 이해하기 쉽고 성숙한 언어로 제약 해결 기능 제공
          + MiniZinc는 다양한 목적에 특화된 솔버에 접근할 수 있는 인터페이스
          + Prolog는 성능을 높이기 위해 상당한 이해가 필요
          + Picat으로 작성한 후 다른 언어로도 쉽게 작성 가능한지 고려 권장
     * Firebase 기술 면접과 관련된 댓글
          + Firebase 기술 면접이 Picat과 같은 도구를 사용하면 더 쉬울 것
          + Predrag이 리뷰어로 등장한 것에 대한 반가움
     * 타입 시스템과 프로그래밍 언어의 비교
          + 타입스크립트에서의 타입 시스템과 유사하지만, 직접 해결해야 함
          + 타입스크립트는 제약 조건을 표현하는 데 충분히 강력하지 않음
          + 계획자 스타일 프로그래밍의 간결함과 간편함 강조
     * GOAP(Goal-Oriented Action Planning)의 언급
          + F.E.A.R. 게임의 적 AI에 사용되어 재미를 더한 GOAP
          + Jeff Orkin의 GOAP에 관한 논문이 읽기 쉽고 재미있다고 평가
     * Picat의 계획자 기능에 대한 평가
          + Prolog와 유사하지만 계획자 기능이 추가된 Picat
          + 계획자 기능으로 문제를 간단하게 해결할 수 있지만, 성능은 명령형 프로그래밍과 비교 필요
     * 컴퓨터에게 최종 상태를 알려주고 해결하게 하는 꿈
          + A* 알고리즘을 사용하여 코드 생성 및 상태 전환
          + 계획 커뮤니티나 솔버에 대한 경험은 적지만, ortools로 실험
          + 프로그래밍을 물류와 유사하게 인식하며, '슬라이딩 퍼즐'로 비유
     * Prolog과 유사한 문법에 대한 부가적인 논평
          + Prolog과 유사한 문법을 사용하며, 'comma first' 대신 true.로 끝내는 것이 더 우아한 해결책으로 제시

   이 요약은 다양한 개인의 의견을 반영하며, 각각의 관점을 중립적으로 전달함. 프로그래밍 언어와 관련된 기술적인 내용은 초급 소프트웨어 엔지니어가 이해할 수 있도록 간결하게 설명함.
"
"https://news.hada.io/topic?id=13421","중국을 불쾌하게 할 우려로 과학 소설 작가들이 상에서 배제되다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   중국을 불쾌하게 할 우려로 과학 소설 작가들이 상에서 배제되다

휴고 상 주최측, 중국 비판 작가 배제로 논란

     * 휴고 상 주최측이 중국에서 개최된 작년 시상식에서 중국을 비판할 수 있는 작가들을 배제함.
     * 닐 게이먼, R.F. 콴, 시란 제이 자오, 폴 바이머 등이 투표에서 충분한 지지를 받았음에도 불구하고 최종 후보에서 제외됨.
     * 유출된 이메일에 따르면, 주최측은 중국, 대만, 티베트 등에 초점을 맞춘 작품이나 민감한 정치적 내용을 포함한 작가의 발언을 심사함.

중국에서의 시상식 개최에 대한 우려

     * 작년 휴고 상은 중국 청두에서 열린 제81회 세계 과학 소설 컨벤션(Worldcon) 기간 중에 개최됨.
     * 중국의 소수민족에 대한 학대 주장을 이유로 많은 작가들이 시상식 개최 장소에 대해 공개 서한을 통해 항의함.
     * 주최측은 작가들의 작품, 서평, 소셜 미디어 기록에서 중국에 대한 부정적인 내용을 상세히 조사함.

작가들의 반응

     * 폴 바이머는 자신의 블로그 글과 리뷰가 철저히 조사되었으며, 티베트 여행 경험이 있다는 잘못된 정보로 배제되었다고 주장함.
     * 바이머는 이러한 심사가 휴고 상의 정신과 과학 소설의 본질에 어긋난다고 비판함.

휴고 상 주최측의 사과와 조치

     * 2024년 휴고 상을 주최하는 조직위원회는 투명성을 확보하고 신뢰 손실을 해결하기 위한 조치를 취하겠다고 발표함.
     * 이메일을 공개한 다이앤 레이시는 후보 심사 과정에서 중국 관련 내용을 검토한 것에 대해 사과하며, 사퇴했어야 했다고 인정함.

GN⁺의 의견

     * 이 사건은 문화와 정치가 어떻게 국제적인 문학상에 영향을 미칠 수 있는지를 보여줌.
     * 휴고 상과 같은 상이 팬들에 의해 운영되는 독특한 특성 때문에, 이번 논란은 문학과 표현의 자유에 대한 중요한 논의를 촉발함.
     * 주최측의 투명성 확보와 신뢰 회복 노력은 문학상의 신뢰성을 유지하기 위한 중요한 단계임.

        Hacker News 의견

     * Hugo Awards 조직의 혼란
          + Hugo Awards 조직인 'Worldcon Intellectual Property'에서 여러 사람이 사임하고 징계를 받음.
          + Dave McCarty는 이사직에서, Kevin Standlee는 이사회 의장직에서 사임.
          + Dave McCarty, Chen Shi, Ben Yalow는 Chengdu Worldcon의 Hugo Administration Committee에서의 행동으로 인해 징계를 받음.
          + Kevin Standlee는 공개적인 발언으로 인해 조직이 상표를 관리하지 않는 것처럼 오해를 산 것에 대해 징계를 받음.
     * 중국의 검열에 대한 논평
          + 중국, 대만, 티베트 등 중국에서 문제가 될 수 있는 주제에 초점을 맞춘 작품을 심사하라는 지시를 받았고, 이를 수행했다고 Lacey가 밝힘.
          + Hugo Awards가 완전히 실패하지 않기를 바라며, 중국의 정치 체제에 대해 순진하지 않았지만, 검열을 과도하게 수행한 것 같음.
     * 중국에 대한 개인적인 견해
          + 중국이 비즈니스를 원하는 사람들에게 자기 검열을 요구하는 것은 이미 예상된 일.
          + Hugo Awards 수상 여부로 책을 구매하지 않지만, 수상으로 인해 판매량이 증가할 수 있는 작가들에게는 유감.
          + 이번 사건이 수상보다 더 많은 관심을 불러일으킬 수도 있음.
     * 2023년 Hugo Awards의 문제점
          + 2023년 Chengdu에서 열린 Hugo Awards에서 여러 작가가 결선 진출에서 배제됨.
          + Neil Gaiman, R.F. Kuang, Xiran Jay Zhao, Paul Weimer 등이 충분한 표를 얻었음에도 불구하고 결선 진출에서 제외됨.
          + 2024년 Glasgow에서 열리는 Hugo Awards의 조직자들이 투명성을 보장하고 신뢰 상실을 해결하기 위한 조치를 취하고 있음.
     * 국가 간 갈등과 ""offending""이라는 단어 사용에 대한 비판
          + ""offending""이라는 단어는 국가가 과민 반응을 보이는 것처럼 무해한 이미지를 연상시킴.
          + 중국의 권위주의적 욕망에 부응하지 않아 발생하는 보복에 대한 두려움을 더 정확하게 표현해야 함.
     * Hugo Awards 관련 최근 논의
          + 최근 Hugo Awards와 관련된 검열 및 배제에 대한 보고서와 통계, 불명확한 자격 불충분 판정에 대한 논의가 있었음.
     * Hugo Awards의 정치적 측면
          + Hugo Awards는 Sad Puppies 사건 이후 정치적으로 이상해짐.
     * Hugo Awards의 명칭 유래
          + Hugo Awards의 이름은 룩셈부르크 출신으로 미국으로 이주한 Hugo Gernsbacher에서 유래.
          + 그의 삶과 과학 소설, 기술 분야에서의 공헌을 고려할 때, Hugo Awards는 검열이나 ""중국을 기쁘게 하는 것""과는 무관해야 함.
     * Hugo Awards 수상자의 수상 거부
          + 중국 작품들이 결선 명단에서 제외되었고, 이로 인해 최소 한 명의 수상자가 수상을 거부함.
     * 중국에서의 행사 개최와 검열 문제
          + 중국에서 행사를 개최하고 싶지 않다면 검열을 원하지 않아야 함.
"
"https://news.hada.io/topic?id=13438","Meta V-JEPA: Yann LeCun의 고급 기계 지능(AMI)을 향한 다음 단계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Meta V-JEPA: Yann LeCun의 고급 기계 지능(AMI)을 향한 다음 단계

     * 세계에 대한 더 실제적인 이해를 바탕으로 기계 지능을 발전시키는 중요한 단계인 Video Joint Embedding Predictive Architecture (V-JEPA) 모델을 공개
     * 이 물리적 세계 모델의 초기 예는 객체 간의 상세한 상호작용을 감지하고 이해하는 데 뛰어남
     * 책임감 있는 오픈 사이언스 정신으로, 연구자들이 더 탐구할 수 있도록 이 모델을 Creative Commons NonCommercial 라이선스로 공개

Video JEPA

     * V-JEPA는 비디오의 누락되거나 가려진 부분을 추상적 표현 공간에서 예측함으로써 학습하는 비생성적 모델
     * 이 모델은 예측할 수 없는 정보를 버릴 수 있는 유연성을 가지고 있어, 훈련 및 샘플 효율성을 1.5배에서 6배까지 향상시킴
     * V-JEPA는 레이블이 없는 데이터로만 사전 훈련되며, 레이블은 사전 훈련 후 특정 작업에 모델을 적용할 때만 사용

마스킹 방법론

     * V-JEPA는 특정 유형의 동작을 이해하기 위해 훈련된 것이 아니라, 다양한 비디오에 대한 자기 감독 학습을 사용하여 세계가 작동하는 방식에 대해 여러 가지를 학습함
     * 마스킹 전략은 비디오의 큰 영역을 차단하지 않고 여기저기에서 무작위로 패치를 샘플링하는 것이 아니라, 공간과 시간 모두에서 비디오의 부분을 마스킹하여 모델이 장면을 이해하고 학습하도록 함

효율적인 예측

     * 추상적 표현 공간에서 예측을 수행하는 것은 모델이 비디오에 포함된 고차원 개념 정보에 집중할 수 있게 하며, 다운스트림 작업에 대부분 중요하지 않은 세부 사항에 대해 걱정할 필요가 없음
     * V-JEPA는 ""동결 평가""에서 뛰어난 성능을 보이는 첫 번째 비디오 모델로, 자기 감독 사전 훈련을 거친 인코더와 예측기를 더 이상 건드리지 않고 새로운 기술을 학습할 때 효율적이고 빠르게 특수화된 층이나 작은 네트워크를 훈련함

미래 연구를 위한 길

     * ""V""는 비디오를 의미하지만, 현재 V-JEPA 모델은 시각적 콘텐츠만을 고려함
     * 다음 단계로, 시각적 콘텐츠와 함께 오디오를 통합하는 더 다중 모달 접근 방식을 고려 중
     * V-JEPA는 미세한 객체 상호작용을 구별하고 시간이 지남에 따라 발생하는 상세한 객체 간 상호작용을 인식하는 데 뛰어남

AMI로 가는 길

     * 지금까지 V-JEPA와 관련된 작업은 주로 인식에 관한 것으로, 다양한 비디오 스트림의 내용을 이해하여 주변 세계에 대한 일부 맥락을 얻는 것임
     * 다음 단계로, 이러한 예측기 또는 세계 모델을 계획이나 순차적 의사결정을 위해 사용하는 방법을 보여주고자 함
     * V-JEPA는 연구 모델이며, 향후 응용 분야를 탐구 중임. 예를 들어, V-JEPA가 제공하는 맥락은 실제 AI 작업과 미래 AR 안경을 위한 Contextual AI 보조기구 구축 작업에 유용할 수 있음
     * 책임감 있는 오픈 사이언스의 가치를 확신하며, 다른 연구자들이 이 작업을 확장할 수 있도록 V-JEPA 모델을 CC BY-NC 라이선스로 공개

   OpenAI Sora도 그렇고... 영상 AI도 갑자기 엄청 발전하네요.

   언어 모델도 발전하다 보니 어느 순간 ChatGPT가 나온 것 처럼,
   영상 AI에서도 그런 순간이 오면 재미있을 것 같아요.
"
"https://news.hada.io/topic?id=13468","ReadySet - MySQL/Postgres를 위한 투명한 데이터베이스 캐시 레이어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ReadySet - MySQL/Postgres를 위한 투명한 데이터베이스 캐시 레이어

     * 기존 DB앞에 위치해서 쿼리 속도를 높이고 읽기 처리량을 수평 확장
          + 앱을 수정하거나 캐시 무효화 등을 관리할 필요없이 인메모리 키-값 저장소의 성능과 확장성을 제공
     * 애플리케이션과 DB 사이에 위치하여 복잡한 SQL 읽기 작업을 매우 빠른 조회로 변환
     * 내부적으로 SELECT문의 결과셋을 캐시한 다음, 복제 스트림을 활용하여 데이터 변경 내용을 자동으로 동기화하고 결과셋을 점진적으로 업데이트 함
     * MySQL/Postgres에 대해서 완전히 Wire-Compatible함. 기존 ORM 이나 DB 드라이버를 이용하여 일반 DB 또는 읽기 복제본처럼 연결 가능

   Vitess에도 유사한 기능이 있던 것 같은데, 이건 시도해보기 조금 더 간편할 것 같네요.
   한 번 써봐야겠습니다 +_+

   오.. 이거 아이디어 꽤 괜찮네요..
"
"https://news.hada.io/topic?id=13433","프로슈머의 미래: "AI Native" 워크플로우의 부상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    프로슈머의 미래: ""AI Native"" 워크플로우의 부상

     * 작업용 소프트웨어를 좋아하는 사람은 거의 없음
          + 최고의 제품도 실제 업무에 적용시 유연하거나 정교하지 못하고 학습곡선이 가파르고 접근하기 어려운 경우가 많음
     * 생성형 AI는 워크플로우를 완전히 재창조할 수 있는 기회를 제공하며 처음부터 전혀 새로운 제품을 만드는게 가능함
     * AI 네이티브 워크플로우는 사용자가 기존 작업을 더 효율적으로 수행할 수 있도록 도와줌
     * 이러한 플랫폼은 사용자가 저수준 작업을 AI 보조자에게 위임하고, 고수준 사고에 더 많은 시간을 할애할 수 있게 함
     * 모든 사람이 프로그래머, 프로듀서, 디자이너, 음악가가 될 수 있도록 새로운 기술과 미학적 기술을 잠금 해제하는 데 도움을 줌
          + 창의성과 기술간의 격차가 줄어들게 됨
          + AI 기반 워크플로를 갖춘, ""전문가 수준이면서 소비자 친화적인 제품""을 이용하면 모든 사람이 차세대 ""프로슈머""가 될 수 있음
          + (프로슈머 : 생산자와 소비자의 역할을 동시에 하는 사람. 앨빈토플러가 ""제3물결""에서 사용함)

GenAI 네이티브 프로슈머 제품은 어떤 모습일까?

     * 모든 Gen AI 네이티브 워크플로우 제품은 ""최첨단 모델을 접근 가능하고 효과적인 UI로 변환""하는 공통된 특징을 가짐
     * 사용자는 제품 뒤의 인프라에 신경 쓰기보다, 제품이 어떻게 도움을 주는지에 더 관심을 가짐
     * Gen AI를 통해 이룩한 기술적 도약은 놀랍지만 성공적인 제품은 여전히 ​​사용자와 사용자의 문제점에 대한 깊은 이해에서 시작
     * 성공적인 제품은
          + 사용자의 고통 포인트를 깊이 이해하고,
          + AI로 어떤 것을 추상화할 수 있는지,
          + 승인이 필요한 결정 포인트는 어디인지,
          + 가장 큰 영향을 미칠 수 있는 지점(레버리지 포인트)은 어디인지를 중심으로 시작함

  GenAI 네이티브 프로슈머 제품의 주요 기능

     * ""빈 페이지"" 문제를 해결하는 생성 도구
          + 자연어 프롬프트에서 미디어를 생성하여 첫 시작을 도와줌
          + 독점 모델로 수행하거나, 여러 모델을 혼합하여 사용
          + 예) Vizcom의 렌더링 도구, Durable의 웹사이트 빌더
     * 멀티모달(및 멀티미디어) 조합
          + 많은 창의적인 프로젝트에는 두 가지 이상의 콘텐츠 유형이 필요: 이미지와 텍스트, 음악과 비디오, 애니메이션과 음성해설 등
          + 하지만 현재로서는 이러한 자산 유형을 모두 생성할 수 있는 하나의 모델이 없음
          + 이는 사용자가 한 곳에서 다양한 콘텐츠 유형을 생성, 개선, 결합할 수 있는 워크플로 제품에 대한 기회를 창출함
          + 예) HeyGen 의 아바타(자체 아바타와 ElevenLabs의 TTS를 결합하여 사실적으로 말하는 아바타를 생성)
     * 더 많은 반복을 가능하게 하는 지능형 편집기
          + ""한번에 얻어지는"" 작업 결과물은 거의 없음
          + 고유한 무작위성이 있는 AI의 경우 더욱 그러하여, 첫 번째 실행에서 원하는 것을 정확하게 얻는 경우는 거의 없음
          + 재생성 버튼을 누르거나 프롬프트를 수정하는 것은 중요하지만 시간이 많이 걸리고 실망스러운 프로세스임
          + AI 세대 제품의 첫 번째 물결은 어떤 반복도 허용하지 않았음. 동일한 프롬프트를 다시 실행하면 완전히 다른 결과가 얻어짐
          + 이제 사용자가 처음부터 완전히 시작하지 않고도 기존 출력을 가져와서 다듬을 수 있는 기능이 보이기 시작
          + 예) Midjourney의 변형 및 확대/축소 도구, Pika의 특정 영역 수정 기능
     * 플랫폼 내 Refinement(정제)
          + 지능형 편집의 또 다른 중요한 요소는 Refinement
          + 폴리싱(연마) 작업의 마지막 10%는 종종 ""좋은 것""을 창조하는 것과 ""훌륭한 것""을 창조하는 것의 차이임
          + 하지만 (1) 정제할 것을 찾고, 그리고 (2) 다른 데로 이동할 필요없이 정제하는 것은 매우 어려울 수 있음
          + AI 워크플로 제품은 사용자가 개선할 수 있는 사항을 식별한 다음 자동으로 개선할 수 있도록 도와줌
          + 애플의 사진에 대한 ""자동 리터치""와 비슷하지만 모든 것에 동작한다고 생각하면 됨
          + 예) Krea의 업스케일링 기능, ElevenLabs의 오디오북 워크플로우
     * 리믹스 및 전환이 가능한 Output
          + 모든 콘텐츠는 다른 반복을 위한 잠재적인 '시작점'이 될 수 있음
          + Midjourney/ChatGPT에서 다른 사람이 만든 프롬프트를 복사하여 수정해 본 적이 있다면, 이미 여기에 참여한 것
          + 이러한 유연성을 잘 활용하는 플랫폼은 더 강력하고 끈끈한 제품을 만들 수 있음
          + 초기 제작자에게는 동영상을 블로그 게시물로 전환하거나 텍스트 설명서를 사용 방법 애니메이션 동영상으로 전환하는 등 여러 매체에 걸쳐 작업을 변환할 수 있다는 점에서 큰 가치가 있음
          + 예) 감마 퍼블리싱 플랫폼의 핵심 기능: 프롬프트 또는 업로드된 파일에서 데크, 문서 또는 웹페이지를 생성하고 필요한 경우 형식을 전환 가능
          + 이러한 제품을 사용하면 다른 사람들이 반복할 수 있도록 워크플로를 노출하는 것도 가능
               o 일련의 프롬프트 또는 모델의 조합일 수도 있고, 기술 수준이 낮은 사용자가 출력물이나 미학을 모방할 수 있는 '복사' 버튼일 수도 있음
          + 예) 전문 사진작가를 위한 편집 플랫폼인 Imagen AI :
               o 각 사진작가의 개별 스타일에 따라 모델을 훈련시켜 보다 쉽게 일괄 편집할 수 있도록 지원
               o 또한 사용자는 플랫폼에서 프로필을 공개한 업계 최고의 사진작가의 스타일로 편집도 가능

프로슈머 제품은 어떻게 진화할까?

     * 차세대 프로슈머 도구는 아직 초기 단계
     * 기존 도구의 핵심 자산 생성 기능은 마침내 의미 있는 워크플로를 추가할 수 있을 만큼 강력해졌지만, 대부분의 제품은 여전히 한 가지 유형의 콘텐츠에만 초점을 맞추고 있으며 기능 면에서는 상당히 제한적
     * 기대되는 제품들
          + 다양한 콘텐츠 모달리티를 결합하는 편집 도구
               o 동영상이 가장 좋은 예가 될 수 있음
               o 현재 AI로 단편 영화를 제작하려면 Pika 또는 Runway와 같은 제품에서 여러 클립을 생성한 다음 편집이나 사운드 믹싱을 위해 Capcut 또는 Kapwing과 같은 다른 플랫폼으로 이동해야 함
               o 이 과정의 모든 단계를 하나의 플랫폼에서 수행할 수 있다면 어떨까?
               o 차세대 제품 중 일부는 더 많은 워크플로 기능을 추가하고 자체 모델 교육, 오픈 소스 모델 활용 또는 다른 플레이어와의 파트너십을 통해 다른 유형의 콘텐츠 제작으로 확장할 수 있을 것으로 예상
               o 또한 사용자가 다양한 모델을 '플러그인'할 수 있는 새로운 독립형 AI 네이티브 편집기가 등장할 수도 있음
          + 다른 상호 작용 모드를 활용하는 제품
               o 텍스트 프롬프트가 항상 AI 제품과 소통하는 가장 효과적인 방법은 아님
               o 인간 브레인스토밍 파트너와 음성, 스케치, 인포 사진 공유 등으로 협업할 때와 마찬가지로 생성 도구를 사용하여 작업할 수 있어야 한다고 믿음
               o 특히 사용자가 보다 정교하고 복잡한 생각을 공유할 수 있는(또는 텍스트에서는 불가능한 방식으로 횡설수설할 수 있는) 양식으로서 음성에 대해 기대가 큼
               o 음성 메모를 이메일, 블로그 게시물 또는 트윗으로 변환할 수 있는 Oasis, TalkNotes, AudioPen 등 이미 이러한 제품들이 등장하기 시작
               o 앞으로 더 많은 워크플로우 제품에 오디오와 비디오가 입력 소스로 제공되어 사용자가 업무를 처리하는 방식과 시기를 변화시킬 것으로 예상함
          + 인간과 AI가 생성한 콘텐츠를 동등하게 취급하는 제품
               o AI와 사람 콘텐츠를 나란히 사용할 수 있는 도구가 있었으면 좋겠음. 오늘날 대부분의 제품은 둘 중 하나에 초점을 맞추고 있음.
               o 예를 들어, 실제 사진을 보정하는 데는 뛰어나지만 AI 이미지에는 아무 것도 하지 못함.
               o 또는 새 동영상을 생성할 수는 있지만 iPhone에서 클립을 보정하거나 스타일을 변경할 수 없음
               o 앞으로는 대부분의 전문 콘텐츠 제작자가 AI와 사람이 만든 콘텐츠를 혼합하여 작업할 것으로 예상
               o 이들이 사용하는 제품은 두 가지 유형의 콘텐츠를 모두 수용하고 더 쉽게 결합할 수 있어야 함
               o Runway의 편집 도구가 이를 잘 보여줌
                    # 자체 생성 모델에서 클립과 이미지를 가져오고 실제 에셋을 업로드하여 동일한 타임라인에서 사용가능
                    # 그런 다음 인페인팅 및 그린 스크린과 같은 회사의 '마법 도구'를 두 가지 유형의 콘텐츠에 모두 사용할 수 있음
     * 여기서 집중적으로 살펴본 콘텐츠 워크플로우 제품은 프로슈머 소프트웨어의 미래를 구성하는 중요한 요소 중 하나에 불과
     * 곧 두 번째 핵심 구성 요소인 생산성 도구에 대해 자세히 살펴보면서 AI 시대에도 마찬가지로 재탄생할 수 있다고 생각되는 생산성 도구에 대해 다시 살펴볼 예정

   AI 프로슈머 제품의 차별점으로 워크플로우 조합이 제시되어 있는데 이는 기존의 로우코드 플랫폼의 한계와 본질이 같다고 생각합니다.

   실무자에게 주어지는 모든 작업이 로우코드로 제어할 수 있을 정도의 적당한 복잡도를 가지는 것은 아니며, 종종 작업 그 자체의 복잡도가 높아서 로우코드 플랫폼으로 해결하는 것보다 전문적인 프로그래밍 기술로 복잡도를 제어하는 것이 나을 수도 있습니다. 프로그래밍을 전자회로 구성에 비유할 때 로우코드 솔루션은 브레드보드에 대응됩니다. 브레드보드로 일단 돌아가는 전자 회로를 이것저것 조립해서 프로토타입을 만들어 볼 수 있지만 브레드보드로 신뢰성을 요구하는 집적회로를 만들수는 없는 것과 같은 이치입니다

   이를 컨텐츠 제작에 적용해보면 AI 생성도구의 한계에 의해 결과물의 엄밀함이나 세심함을 컨트롤하지 못할 수도 있지 않을까 하는 우려가 있습니다. 지금 나오는 AI 그림이 손가락을 제대로 그려내지 못하는 것처럼요. 학습 곡선이 낮아지긴 하겠지만 그렇게 드라마틱하진 않을 것 같습니다
"
"https://news.hada.io/topic?id=13481","Stable Diffusion 3 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Stable Diffusion 3 발표

     * Stable Diffusion 3는 가장 뛰어난 텍스트-이미지 모델로, 다중 주제 프롬프트, 이미지 품질, 철자 능력에서 크게 향상된 성능을 제공
     * 아직 널리 사용할 수 없지만, 얼리 프리뷰를 위한 대기자 명단 등록 시작
     * 이 미리보기 단계는 이전 모델과 마찬가지로 성능과 안전성을 개선하기 위한 통찰을 얻는 데 중요함

모델 범위 및 기술

     * Stable Diffusion 3 모델 스위트는 800M에서 8B 파라미터 범위를 가짐
     * 이 접근법은 핵심 가치에 부합하고 누구나 접근할수 있도록 하는 목표를 가지며, 사용자의 창의적인 요구에 가장 잘 부합하는 확장성과 품질의 다양한 옵션을 제공
     * SD3는 Diffusion Transformer 아키텍처와 Flow Matching을 결합함
     * 상세한 기술 보고서는 곧 발표될 예정

안전한 책임감 있는 AI 실천

     * 안전하고 책임감 있는 AI 실천을 중요하게 생각함.
     * Stable Diffusion 3의 오용을 방지하기 위해 합리적인 조치를 취하고 있으며, 이는 모델 훈련 초기부터 테스트, 평가, 배포 과정 전반에 걸쳐 지속
     * 초기 미리보기를 준비하며 다수의 안전장치를 도입함
     * 연구자, 전문가, 커뮤니티와 지속적으로 협력함으로써 모델의 공개에 접근함에 따라 더욱 혁신할 것으로 기대

약속과 창의성 활성화

     * 생성 AI가 개방적이고, 안전하며, 보편적으로 접근 가능하도록 하는 약속은 확고함
     * Stable Diffusion 3를 통해 개인, 개발자, 기업이 창의력을 발휘할 수 있는 적응 가능한 솔루션을 제공할 것
     * Stable Diffusion 3 출시 전에 다른 이미지 모델을 상업적으로 사용하고 싶다면 Stability AI 멤버십 페이지를 방문하거나 개발자 플랫폼을 통해 API에 접근할 수 있음

  Hacker News 의견

     * 새로운 유형의 확산 변환기를 사용하며, 흐름 일치 및 기타 개선 사항을 결합함.
          + 변환기 개선을 활용하여 더 크게 확장 가능하고 다중 모달 입력을 받을 수 있음.
          + 품질과 안전성을 높이기 위해 공개 예정이며, 전체 도구 생태계와 함께 출시될 예정임.
          + 최신 하드웨어를 활용하는 새로운 기반이며, 모든 크기로 제공됨.
          + 비디오, 3D 등을 가능하게 함.
          + 더 많은 GPU가 필요함.
          + 기술적인 세부 사항은 곧 공개될 예정임.
          + 충분한 GPU와 좋은 데이터가 있다면 Sora와 유사한 비디오 생성 가능함.
          + 800만에서 80억 파라미터에 이르는 다양한 크기로 제공되어, 모든 종류의 GPU에서 사용할 수 있음.
     * 안전성에 대한 집착은 최근의 제미니 사건을 고려할 때 마케팅 기회를 놓친 것으로 보임.
          + 안전성이 과도해져 대부분의 이미지가 흐릿하게 나오며, 이전 버전에서 작동하던 프롬프트가 SDXL에서는 흐릿하게 나옴.
          + 다음 버전이 이와 같다면 Stability API 사용을 중단할 것임.
          + 과도한 흐림 없이 Stable Diffusion과 유사한 가치와 품질을 제공하는 다른 텍스트-이미지 서비스가 있는지 궁금함.
     * 현재의 검열 상황을 고려할 때 이번에 ""안전""이 무엇을 의미하는지 볼 것이 흥미로움.
          + DallE를 사용하여 게임 자산용 무기 이미지를 생성하려 할 때 상당한 어려움을 겪음.
     * 발표문의 절반은 ""우리는 정말로 책임감 있고 안전하다""는 내용임.
     * 데모 이미지는 모두 '아트워크'임.
          + 모델이 사진, 기술 도면, 기타 그래픽 미디어도 잘 생성할 수 있는지 궁금함.
     * 텍스트/철자 부분은 큰 진전임.
     * ""안전"" 부분을 재작성하지만, AI 도구 대신 'Big Knife'라는 상상의 칼로 대체함.
          + ""우리는 안전하고 책임감 있는 칼 사용을 믿습니다. 이는 나쁜 행위자에 의한 Big Knife의 오용을 방지하기 위해 합리적인 조치를 취했다는 것을 의미합니다.""
"
"https://news.hada.io/topic?id=13490","회사가 너무 잘 돼서 여러분 모두 해고당함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        회사가 너무 잘 돼서 여러분 모두 해고당함

회사가 너무 잘 돼서 여러분 모두 해고됩니다

     * 이 글은 한 회사가 대규모 해고를 발표한 상황을 풍자적으로 다룬 허구의 이야기임.
     * 회사는 사상 최고의 수익과 주식 가치를 기록하고, 향후 성장 전망이 매우 긍정적임에도 불구하고 직원들을 해고함.
     * 해고되는 직원들에게는 자신들의 노력으로 회사가 성공할 수 있었으며, 그 결과로 해고된다는 아이러니한 상황을 설명함.

GN⁺의 의견

     * 이 글은 현대 자본주의의 일면을 비판적으로 바라보며, 기업의 이윤 추구가 직원들의 고용 안정성에 어떻게 영향을 미치는지를 풍자함.
     * AI와 같은 기술 발전이 노동 시장에 미치는 영향과 그로 인한 직업의 불안정성 문제를 간접적으로 다룸.
     * 이야기는 해고 소식을 전하는 관리자의 시점에서 진행되며, 직원들의 기여를 치하하면서도 그들을 해고하는 모순적인 상황을 희화화함으로써 독자들에게 깊은 인상을 남김.
"
"https://news.hada.io/topic?id=13487","미국에서 발생한 셀룰러 서비스 장애, AT&T, T-Mobile, Verizon 사용자들에게 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         미국에서 발생한 셀룰러 서비스 장애, AT&T, T-Mobile, Verizon 사용자들에게 영향

AT&T 통신 장애 복구

     * 목요일에 미국 내 수천 명의 AT&T 사용자들이 통신 장애를 겪음.
     * 샌프란시스코를 포함한 주요 도시에서 전화 및 문자 메시지, 긴급 서비스에 영향을 미침.
     * 장애는 오후 3시경 모든 영향을 받은 고객에게 복구됨.

장애 보고 및 조사

     * 정오경에 약 58,000건의 장애가 보고됨.
     * AT&T는 장애의 원인을 밝히지 않았으며, 몇 명의 고객이 영향을 받았는지도 공개하지 않음.
     * FCC는 이 사건을 조사 중이며 AT&T 및 안전 당국과 연락 중임.

주식 하락

     * AT&T의 주식은 목요일 장애 이후 약 2% 하락함.

긴급 서비스 영향

     * 장애로 인해 911에 전화하는 데 문제가 발생함.
     * 샌프란시스코 소방서와 애틀랜타 시장은 AT&T 사용자들이 긴급 전화를 포함하여 전화를 걸고 받는 데 문제가 있다고 발표함.
     * 매사추세츠 주 경찰은 사람들이 자신의 휴대폰으로 911 서비스가 작동하는지 확인하기 위해 911 센터에 전화를 거는 것을 자제해달라고 요청함.

다른 네트워크 영향

     * Verizon과 T-Mobile 사용자들도 몇 천 건의 장애를 보고함.
     * 이는 다른 네트워크에 연결을 시도하는 전화로 인한 것으로 보임.

   GN⁺의 의견:
     * 이 기사는 미국 내 주요 통신 사업자인 AT&T의 대규모 통신 장애 사건을 다루고 있으며, 이는 긴급 서비스에 접근하는 데 심각한 영향을 미쳤음을 보여줌.
     * 장애가 발생하면서 AT&T의 주식 가치에도 영향을 미쳤으며, 이는 투자자들에게 중요한 정보임.
     * FCC의 조사가 진행 중이라는 점은 향후 이러한 장애를 방지하기 위한 규제나 기술적 조치가 있을 수 있음을 시사함.

        Hacker News 의견

     * 토론되지 않은 문제점에 대한 지적:
          + 건물 안에 있는 사람들은 와이파이로 전환할 수 있었지만, 운전자들에게는 특히 큰 영향이 있었음.
          + 휴대폰 지도 앱에 의존하는 배송 운전자들의 배송 지연.
          + 우버, 리프트, 택시 등의 운전자들이 픽업 및 목적지로의 경로를 찾지 못함.
          + 경로 최적화 불가능으로 인한 교통 체증 악화.
          + 대형 회사들은 자체 인프라나 GPS 장치를 갖추고 있을 수 있음.
          + 비상 상황에서 전화 연결 불가로 인한 치료 지연 가능성.
     * 심각한 구조적 결함에 대한 지적:
          + 벨 시스템의 전기기계식 스위칭 역사에서 중앙 사무소가 자연재해나 대형 화재 외에 30분 이상 서비스 중단된 적 없음.
          + 1960~70년대 AT&T 장거리 시스템은 독립적이고 상호 연결된 10개의 지역 센터를 가짐.
          + 모든 스위치는 필요시 기본 라우팅으로 복귀 가능, 하지만 과부하 시 일부 전화 연결 실패.
     * 루트 원인 추측에 대한 경고:
          + 캐나다에서 국가적 통신 문제를 다룬 경험을 바탕으로 다양한 원인에 의한 전국적 영향을 목격.
          + 특정 지역에서의 영향은 100%, 50%, 또는 0.001%일 수 있음.
          + 통신망 내 문제로 인한 국가적 영향이 있었지만, 여전히 일부 서비스는 작동 가능.
     * 경쟁사의 상황 보고:
          + Verizon과 T-Mobile은 자사 네트워크에 문제가 없으며, 문제는 AT&T 고객과의 통화 불가에 한정됨.
          + 대부분의 AT&T 네트워크가 미국 내에서 다운된 것으로 보임.
     * AT&T의 불리한 타이밍 지적:
          + 캘리포니아 일부 지역에서 유선 서비스 중단 신청과 관련하여 나쁜 타이밍이라는 의견.
     * 서비스 복구 상태 업데이트:
          + AT&T Global Smart Messaging Suite의 MMS MT 서비스 복구 완료.
          + 서비스 중단 시간은 780분이었음.
     * 무용한 아웃페이지 맵 비판:
          + 아웃페이지 맵이 대부분의 사람들이 사는 미국 지도에 불과하다는 의견.
     * 상태 페이지의 정확성 필요성:
          + AT&T의 상태 페이지는 모든 것이 정상이라고 주장하지만, 실제로는 무선 서비스가 다운된 상태.
     * NANOG에서의 정보 부재 언급:
          + 아직 NANOG에서는 정보가 없지만, 향후 몇 시간 내에 스레드에서 정보가 나올 것으로 기대.
     * 내부 문제 또는 해킹 가능성 제기:
          + myAT&T 앱에서 무선 계정이 보이지 않으며, 가족 계정도 서비스로 나타나지 않음.
          + 다른 사용자들도 계정을 볼 수 있는지 확인 요청.
"
"https://news.hada.io/topic?id=13462","LED 매트릭스 귀걸이매트릭스 귀걸이

LED 매트릭스 귀걸이 디자인

     * 시중에 판매되는 LED 스터드 귀걸이는 매우 저렴함.
     * 기존의 플라스틱 보석과 단일 LED를 자체 회로 기판으로 교체하고, 금속 부품을 재사용하는 아이디어.
     * 회로와 펌웨어는 CH32V003을 사용하여 최근에 만든 배지와 동일함.

규모의 도전

     * 배지 디자인을 면적의 1/9로 축소하는 것이 도전 과제.
     * 3mm LED 피치를 1mm로 줄임.
     * 회로 기판 주변에 두꺼운 테두리를 만들지 않기로 함.

홈브루 블라인드 및 버리드 비아

     * 멀티레이어 보드 제작 시 블라인드 및 버리드 비아 사용 가능.
     * 두 개의 이중 층 보드를 납 패드 배열로 결합하여 자체 회로 기판 샌드위치 제작.
     * 비아의 드릴 직경은 0.25mm로, 가격이 더 비싼 보드 제작 등급에 속함.

솔더 샌드위치

     * 여러 주문과 함께 배송을 결합하여 비용 절감.
     * 메인 디스플레이는 1mm 피치의 8x8 매트릭스.
     * 패널 상단과 하단은 5mm 너비, 전체 패널은 23mm x 28.5mm 크기.
     * 보드 두께는 0.6mm로, 샌드위치는 약 1.2mm 이상.

페이스트 페이스트 페이스트

     * 보드와 함께 스틸 스텐실 주문.
     * 스텐실에 피델리얼을 넣지 않아 정렬에 어려움.
     * 0201 패드용 홀이 너무 작아 스텐실링 과정이 스트레스.

픽 앤 플레이스

     * 0201 부품은 기계의 지정된 허용 오차를 넘어섬.
     * 픽 앤 플레이스 기계로 부품 배치 시도.
     * 기계는 3D 프린터와 유사하지만 더 견고한 허용 오차로 제작됨.

스터드 준비

     * 귀걸이의 플라스틱 보석 아래에는 작은 회로 기판이 있음.
     * 배터리의 양극은 케이스, 음극은 포스트 중앙의 세밀한 전선.
     * 회로를 이 두 점에 연결하기만 하면 됨.

허영샷

     * 전자 프로젝트로서 인상적이지만, 실제로 착용하고 싶은 귀걸이인지는 불확실.
     * 친구는 더 많은 발광 액세서리를 시도하는 데 관심이 있음.
     * 장시간 노출과 플래시를 결합하여 LED 궤적이 있는 정지 이미지를 만드는 아이디어 시도.

GN⁺의 의견

     * 이 프로젝트는 전자공학과 DIY에 관심 있는 사람들에게 매우 흥미로운 사례임. 작은 규모의 회로를 만드는 데 있어서의 도전과 창의적인 해결책을 제시함.
     * 픽 앤 플레이스 기계의 한계를 넘어서는 작업을 시도하고 성공한 점은 미래의 다양한 프로젝트에 대한 가능성을 열어줌.
     * 이 글은 기술적인 문제 해결과정을 상세히 설명하고 있어, 초보자가 이해하기 쉬운 방식으로 전자공학 프로젝트의 복잡성을 이해하는 데 도움이 됨.

        Hacker News 의견

     * 디자인 측면에서 산업적 스타일이 사이버펑크적이어서 더 좋았음. 하지만 현재 디자인도 깔끔함.
          + 0.65x0.65mm 크기의 RGB LED에 대한 놀라움. 이는 기존 LED의 긴 변 길이의 제곱과 같고, 두께는 종이 몇 장과 같은 0.25mm임.
          + 이러한 LED를 얼굴에 붙이고 메이크업으로 조화를 이루면 사이버펑크 룩을 연출할 수 있을 것 같음. 매우 얇은 전선도 구할 수 있음.
     * 디자인 스케치의 중요성을 강조함. 머릿속에 있는 디자인을 스케치하는 법을 배우는 것이 좋음. 잘 그릴 필요는 없고, 아이디어를 전달하기에 충분하면 됨.
     * 이러한 LED를 사용한 제품이 시장에서 인기를 끌 것이라는 예상. 재충전 가능하고 LED 프로그래밍이 간단하다면 분명히 판매될 것임.
     * 사운드(음악)와 동기화되어 애니메이션을 표현하거나 펄스를 생성하는 버전이 나이트클럽에서 큰 인기를 끌 것 같음.
     * 전자공학 프로젝트로서 인상적이지만, 누군가 실제로 착용하고 싶어할 귀걸이인지에 대한 질문에, STEM 분야 여성들은 이러한 귀걸이에 많은 돈을 지불할 것임을 확신함.
     * 2x2 레이어 PCB 샌드위치 구조가 소규모에서는 1-2-1 PCB보다 저렴할 것이라는 점이 흥미로움. 이는 애플이 사용하는 방식과 동일함.
     * 이러한 LED 제품이 인기를 끌 것이라는 의견. Ali나 Temu에서 이번 주말까지 판매될 것으로 기대함.
     * 현재 가장 작은 원형 OLED 디스플레이에 대한 궁금증. 다음으로 작은 크기의 LED는 01005이지만, 그 정도 크기가 되면 OLED 디스플레이와 본질적으로 동일함.
     * 스케일의 가장 큰 제한 요소는 LED 자체가 아니라 비아(vias)라는 의견. 3개의 패드를 가진 LED가 있다면, 외부 2개의 패드가 연결되어 있어 단면 보드에서 비아 없이 매트릭스를 만들 수 있음.
     * 이러한 LED를 커프링크로 사용하고 싶은 의견. 상태의 상징으로 상상해봄.
"
"https://news.hada.io/topic?id=13476","Gemini Pro 1.5의 킬러 앱은 비디오입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Gemini Pro 1.5의 킬러 앱은 비디오입니다

     * 구글 Gemini Pro 1.5의 토큰 컨텍스트 크기는 1,000,000개
     * 이전에는 Claude 2.1(200,000 토큰)과 gpt-4-turbo(128,000 토큰)가 이 기록을 보유하고 있었지만, 모델 간의 토큰화 구현 방식이 다르기 때문에 완벽하게 직접 비교하기는 어려움
     * 며칠 동안 Gemini Pro 1.5를 사용해 본 결과, 가장 흥미로운 기능은 토큰 수가 아니라 비디오를 입력으로 사용할 수 있는 기능
     * 아직 API 액세스 권한은 없지만 Google AI Studio 인터페이스를 통해 모델에 접근해봄

첫번째 테스트

     * 책꽂이 중 하나를 7초짜리 동영상으로 촬영
     * ""JSON array of books in this video"" 프롬프트와 함께 업로드
     * 이 7초짜리 동영상은 1,048,576개의 토큰 한도 중 1,841개의 토큰만 사용
     * Gemini Pro 1.5는 JSON을 반환하지 않았지만 영상에 있는 책 제목과 작가명 리스트 응답함
     * 추가로 ""as a JSON array of objects, with title and author keys"" 요구하니 JSON으로 책/저자를 리턴
     * 결과는 꽤 놀라움. 동영상의 길이가 7초이고, 꽤 빠르게 이동하며(동영상에 약간의 모션 블러가 있음), 일부 책이 다른 물건에 가려져 있음

두번째 테스트

     * 이번에는 요리책으로 가득 찬 책장을 세로로, 조금 더 길게(22초), 가로뿐만 아니라 아래로 패닝하여 동영상으로 촬영
     * 이 동영상에는 6,049개의 토큰이 사용되었는데, 이는 여전히 매우 적은 양임
     * 새로운 프롬프트 : ""Output a JSON array of {“title”: “...”, “authors”: “...”} objects for books in this video""
     * 하지만 ""Unsafe Content"" 라며 거부당함
     * 안전 필터가 'Cocktail'이라는 단어에 불쾌감을 느낀 듯
     * 안전 설정을 열고 모든 카테고리에 대해 '낮음'으로 설정한 후 다시 시도했지만 두 번째로 거부
     * 그래서 ""go on give me that JSON"" 라고 강제 지시하자 JSON을 리턴
     * 역시나 결과물이 매우 훌륭함

이를 어떻게 활용할 것인가?

     * 텍스트에서 구조화된 콘텐츠를 추출하는 기능은 이미 LLM의 가장 흥미로운 사용 사례 중 하나
     * GPT-4 Vision과 LLaVA는 이를 이미지로 확장했고, 이제 Gemini Pro 1.5는 이를 비디오로 확장
     * 물론 일반적인 LLM의 주의 사항이 적용됨. 사물을 놓칠 수 있고 잘못된 세부 사항을 Hallucination할 수 있음
     * Cocktail 처럼 안전 필터에 대한 문제도 있음
     * 따라서 최신 AI가 항상 그렇듯이 극복해야 할 과제는 여전히 많음
     * 하지만 이것은 내가 예상했던 것보다 훨씬 더 가까워진 미래를 엿볼 수 있는 또 하나의 예시 중 하나라고 느껴짐

이미지 vs. 비디오

     * 처음에는 동영상 처리와 관련된 토큰 수가 의외로 적기 때문에 동영상이 이미지와 다르게 처리될 것이라고 생각했음
     * 하지만 해커 뉴스에 올라온 내용을 보면

     Gemini 1.5 Pro는 최대 1시간 분량의 동영상도 추론할 수 있습니다. 동영상을 첨부하면 Google AI Studio가 오디오 없이 수천 개의 프레임으로 분류한 다음 Gemini 모델은 멀티모달이므로 고도로 정교한 추론과 문제 해결 작업을 수행할 수 있습니다.
     * Gemini 1.5 기술 보고서에서는 다음과 같이 설명:

     45분 분량의 버스터 키튼 영화 ""셜록 주니어""(1924)(1FPS에서 2,674 프레임, 684k 토큰)를 입력하면 Gemini 1.5 Pro는 특정 프레임에서 텍스트 정보를 검색 및 추출하여 해당 타임스탬프를 제공합니다.

        Hacker News 의견

     * 에이전트가 사용자의 화면을 항상 조용히 감시하게 되면 매우 유용하거나 디스토피아적일 수 있음.
          + 사용자가 코딩하거나 계획을 세우고 연구하는 것을 몇 달 동안 지켜보고, 개인적이고 전문적인 조언을 할 수 있을 것으로 기대됨.
          + 이러한 기술은 개인의 심리를 반영하고 많은 정보를 기억할 수 있어 기업이나 악의적인 행위자에게 매우 가치 있는 것이 될 수 있음.
          + 모델이 안전하게 운영되어야 하며, 개인의 복제나 프라이버시 침해의 위험이 있음.
     * ""Gemini Pro 1.5의 핵심 앱은 비디오 입력""이라는 제목이 적절함.
          + YouTube와 같은 비디오 콘텐츠의 대규모 모더레이션에 유용할 수 있으며, 비용을 낮출 수 있다면 좋을 것임.
     * 비디오는 이미지의 연속이며, OpenAI의 GPT-4-Vision 데모는 모델에게 프레임 목록을 전송하여 유사한 효과를 냄.
          + GPT-4-Vision이 함수 호출이나 구조화된 데이터를 지원하여 JSON 출력을 보장한다면 좋을 것임.
          + 비용을 절반으로 줄이기 위해 ffmpeg를 사용하여 매 다른 프레임을 출력하는 방법도 있음.
          + OpenAI 데모는 약 600 프레임 비디오의 50번째 프레임마다 전송함.
     * AI가 비디오, 이미지, 텍스트를 분석하고 저렴하고 효율적으로 처리할 수 있게 되면, 프라이버시는 완전히 끝날 것임.
          + 현재 대기업들은 우리에 대한 많은 데이터를 가지고 있지만, 모든 것을 이해하고 연결하는 데는 한계가 있음.
          + 강력한 AI는 디지털 생활의 모든 측면을 이해할 수 있으며, 좋은 목적과 나쁜 목적으로 사용될 수 있는 잠재력이 매우 큼.
     * 저자가 입력으로 사용된 비디오에서 언급된 책들이 실제로 정확한지 확인하지 않은 것 같음.
          + 첫 번째로 확인한 ""Growing Up with Lucy by April Henry""라는 책은 존재하지 않으며, 실제로는 Steve Grand의 책임.
          + 멋진 데모이지만, 실제로 더 많은 것을 위해 사용하기에는 쓸모가 없음.
     * 구글의 안전 필터가 ""Cocktail""이라는 단어에 반응한 것 같음.
          + 안전 설정을 낮추고 다시 시도했지만, 두 번째 시도에서도 거부됨.
          + 구글의 위험 관리 부서가 조직을 완전히 장악하여, 가장 똑똑한 컴퓨터조차도 ""cocktail""이나 ""Abraham Lincoln""과 같은 위험한 단어나 이미지를 사용하는 것을 두려워함.
     * 프레임 당 256 토큰만 사용하는 것은 놀랍다고 함.
          + 한 장의 사진이 천 마디 말보다 가치가 있다는 말과 달리, 실제로는 약 192단어의 가치만 있음을 의미함.
     * ""Cocktail""과 관련된 문제는 실제로 존재함.
          + Moby Dick의 캐릭터들을 DALLE로 상상하려고 했지만, 완전히 거부당함.
          + AI 회사라면 더 나은 욕설 필터를 만들 수 있을 것이라고 생각함.
     * 구글의 하드웨어 규모 대 OpenAI(또는 마이크로소프트가 제공하는 것)의 실제 핵심 앱이 무엇인지 궁금함.
          + 구글이 한 것이 OpenAI 팀에게 특별히 놀라운 것은 아니지만, 거대한 규모로 더 빠르게 반복할 수 있을지도 모름.
     * 기술 자체는 인상적이고 흥미롭지만, Scunthorpe 문제의 복수라고 할 수 있는 상황에 대해 웃음이 나옴.
          + 안전 필터가 ""Cocktail""이라는 단어에 반응한 것으로 보임.
"
"https://news.hada.io/topic?id=13531","호기심 많은 소프트웨어 엔지니어를 위한 학습자료 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     호기심 많은 소프트웨어 엔지니어를 위한 학습자료 모음

     * 필독 도서들 : 실용주의 프로그래머, 코드 컴플리트, 릴리스 잇, Scalability Rules: Principles for Scaling Web Sites 2nd Edition, 리눅스 API의 모든 것 1&2, 컴퓨터 프로그램의 구조와 해석 SICP
     * 필수 글들
          + Practical Advice for New Software Engineers
          + On Being A Senior Engineer
          + Lessons Learned in Software Development
          + Things I Learnt The Hard Way
          + Signs that you're a good programmer
          + 7 absolute truths I unlearned as junior developer
          + How to Build Good Software
          + How to be a -10x Engineer
     * 그외에 각 분야별로 구분된 링크들 모음
          + 알고리듬 & 자료구조, API 설계, ""Attitude, habits, mindset"", 자동화, 캐리서 성장시키기, 클라우드, 코드리뷰, 코딩 & 품질, 컴파일러, 데이터베이스, 데이터 포맷, 데이터 사이언스, 디버깅, 디자인, 개발환경, 도커, 문서화, 편집기, 이메일, 엔지니어링 관리, 함수형 프로그래밍, 게임 개발, 그래픽, 하드웨어, HTTP, 인터넷, 인터뷰하기, 쿠버네티스, 학습과 기억하기, 리눅스, 로우코드, 머신러닝/AI, 수학, 마케팅, 네트워크, 오픈소스, 운영체제, 성능, 생산성, 프로젝트 관리, 프로그래밍 언어, 리팩토링, 정규식, 검색, 보안, 쉘, SQL, 시스템 관리, 시스템 아키텍처, SRE, 기술부채, 테스팅, 버전관리, 워라밸, 웹개발, 글쓰기..
     * 자료 모음 🧰, 책 📖, 비디오 🎞, 슬라이드 🏙, 필독 ⭐️ , 논문 📃 등 다양한 것들을 아이콘으로 라벨링 해두었음

   SICP 연습문제가 350개정도인데 1년동안 읽으면서 80%정도를 풀었던 기억이 납니다.
   읽을때는 정말 재밌게 감탄하면서 읽었는데 10년쯤 지나니까 이제 기억도 안나요 ㅎㅎ

   프로그래밍 무료 학습 자료 모음
   시스템 설계 관련 자료들 모음
   AI Canon - a16z가 큐레이션한 AI 필수 자료 모음
   AWS 학습 자료 링크모음
   Awesome CTO - 스타트업 CTO를 위한 자료 모음
   Learn X by Doing Y
   Learn X in Y Minutes
   전산학 교육에서 가르쳐 주지 않는 것
"
"https://news.hada.io/topic?id=13548","xkcd: 온실효과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               xkcd: 온실효과

        Hacker News 의견

     * 온실 효과 발견 후 약 30년 만에 원자를 분열시켜 상상할 수 없는 에너지를 얻었음에도 불구하고, 거의 100년이 지난 지금 우리는 여전히 석유와 가스에 의존하며, 에너지 및 기후 위기를 자랑하고 있음. 동시에 규제 기관을 가치 없는 기후 인증서, 책임지지 않는 해외 공장, 그리고 이산화탄소 배출량에 관한 무분별한 사기로 속이고 있음.
     * 기후 정책 분야에서 일하다가 희망을 잃고 그만둠. 정부도 희망을 잃은 것 같음. 코로나19는 탄소를 통제하기 위해 필요한 고통을 정부가 주민들에게 가할 경우, 대중의 분노에 휩싸일 것임을 가르쳐줌. 중국 시스템만이 폭동 없이 사람들의 행동을 통제할 수 있는 희망을 가지고 있는 것처럼 보이지만, 그 시스템은 무서움. 심지어 그들의 통제도 몇 년간의 제로 코로나 이후에 흔들림. 우리는 혁신을 통해 이 난제에서 벗어나려고 시도하는 동안 결과를 처리해야 함. 이것은 나를 AI 가속주의자로 만듦. 두 가지 문명의 파멸 중에서 나는 컴퓨터와 함께할 기회를 잡음.
     * 다른 재미있는 ""x는 y보다 z에 더 가까움"" 예시:
          + T렉스 시대는 스테고사우루스 시대보다 우리에게 더 가까움
          + 클레오파트라 시대는 그녀가 살았던 시대보다 이집트의 대피라미드 건설 시기에 더 가까움
     * 산업 혁명 이후 인간 활동으로 인한 CO2 배출량의 절반 가량이 대략 지난 40년 동안 발생함. 매번 10년을 더 미룰 때마다 문제를 해결하기가 더 어려워짐.
     * 1896년의 온난화 추정치가 현대 추정치와 밀접하게 일치하는 것이 놀랍음.
          + 당시에는 전자기기가 없었고, 라디오가 간신히 발견되었음
          + 비행기가 없었고, 매우 초기의 기상 풍선을 통해 상층 대기를 간신히 발견했음
          + 원자에 대해 알고 있었지만, 주기율표는 30년 된 상태였고, 핵은 아직 발견되지 않았음
          + 기후 과학은 수많은 피드백, 긍정적이고 부정적인 요소로 인해 악명 높게 어려운 주제임. 현재는 위성 데이터, 수십 년에 걸친 정밀한 역사적 데이터, 지질학적 데이터 등을 기반으로 슈퍼컴퓨터에서 시뮬레이션을 실행함. 당시에는 그런 것들이 없었음.
          + 아마도 그는 우연히 정확한 값을 얻었을 것임. 때때로 그런 일이 발생함. 예를 들어, 에라토스테네스(기원전 240년)는 지구의 둘레를 매우 정확하게(<1%) 계산했고, 현대 시대가 오기 전까지 더 나은 추정치를 얻은 사람은 없었음. 실제로 많은 후기 추정치들은 10% 이상 벗어났음. 당시의 기술로는 그런 정확도를 낼 수 없었지만, 우연히 정확하게 맞았음(그들은 그것이 맞다는 것을 알지 못했음).
     * 이 스레드에서 논의된 모든 핵 에너지에 대한 응답으로, 토륨 용융염을 참조함. 우리는 70년대 오크 리지 이후로 기술을 가지고 있었음. 기존 정제 인프라가 핵무기에 ""이중 사용""이 편리하기 때문에 우리는 그것을 무시함.
          + 태양광 패널, 풍력 터빈, 배터리는 탄소 연소 산업의 산물임. 그것들은 자리가 있지만, 우리는 장기적으로 그것들을 수리하고 교체하기 위한 금속이 부족하며, 완전히 전기화된 산업 사회가 실제로 가능한지 여부는 아직 알 수 없음. 예를 들어, 발열체를 녹이지 않고 용광로에서 필요한 온도에 도달하는 방법은 무엇인가?
          + 우리가 아는 문명을 전기화하는 것은 정치적으로 매력적이지만, 실현 가능성에 대한 연구는 드물고, 수행된 연구는 심각함. 거울을 보지 않고 끝나는 모든 분석은 특정 이해관계를 대변할 가능성이 높음. 현대성이 같은 틀로 계속될 수 있으며, 탄화수소를 다른 것으로 대체할 수 있다는 기대는 향수나 순진함의 표시임. 대체 에너지원이 필요하긴 하지만, 더 중요한 것은 우리가 서로, 다른 생명체들, 자연 자원들, 그리고 우리가 행성이라고 부르는 이 세대선과 어떻게 관계를 맺는지 변화시키는 것임.
     * 이 만화가 지적하듯, 우리는 인간이 유발한 기후 변화에 대해 128년 동안 경고를 받았지만, 그 모든 해 동안 인류는 방향을 바꾸지 않았음.
          + 경고와 권고는 거의 아무것도 이루지 못함.
          + 변화는 대개 다른 선택지가 없을 때만 일어남, 즉 위기가 있을 때임.
          + 밀턴 프리드먼의 통찰력 있는 인용문이 있음: ""실제 위기나 인식된 위기만이 진정한 변화를 가져옴. 위기가 발생하면, 취해지는 조치들은 주변에 떠도는 아이디어들에 달려있음. 그것이 우리의 기본 기능이라고 믿음: 기존 정책에 대한 대안을 개발하여, 정치적으로 불가능한 것이 정치적으로 불가피해질 때까지 그것들을 살아있고 사용 가능하게 유지하는 것임.""
          + 프리드먼에 대해 많은 부분에서 동의하지 않지만, 이 부분에서는 그가 옳았다고 생각함.
          + 이제 우리가 위기의 초기 단계(전례 없는 폭염, 영구적인 거대한 화재 등)에 처해 있을 때, 지난 128년 동안 기후 변화를 문서화하고, 예측하고, 경고해온 모든 과학자와 엔지니어들의 작업이 드디어 실질적인 실용적인 용도로 사용되기 시작함.
          + 아직 늦지 않기를 바람.
     * 오늘날, 상당히 변화된 기후에서 여전히 막대한 양의 온실가스를 생산하면서: ""그래, 하지만 그건 우리 때문이 아니야. 우리 때문이 아니라는 걸 증명해줄 과학자가 필요해!""라고 말하며, 노동력에게 ""우리 때문이 아니니 계속해!""라고 말함.
     * 개인적인 기후 변화 경험이 ""우리 모두가 미래에 끔찍하게 살 것임""으로 이어지는 것은 ""우리""의 정의에 크게 의존함.
     * 인류는 아마도 기후 변화의 긴급성에 대한 경각심을 일깨울 수 있는 일종의 큰 기후 관련 사건이 필요할 것임. 사람들이 감각이나 감정으로 연관 지을 수 있는 무언가가 필요함. 데이터 자체로는 우리를 그리 멀리 데려갈 수 없음.
"
"https://news.hada.io/topic?id=13513","대학에서 자판기의 얼굴 인식 오류 메시지로 인한 우려 발생","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    대학에서 자판기의 얼굴 인식 오류 메시지로 인한 우려 발생

새 차 구매를 고려 중이라면 AWD에 대해 알아야 할 것들

     * AWD(All-Wheel Drive) 시스템은 모든 바퀴에 동력을 전달하여 미끄러운 도로 조건에서 차량의 안정성과 견인력을 향상시킴.
     * AWD 차량은 눈이나 비가 많이 오는 지역에서 운전할 때 특히 유용하며, 오프로드 주행이나 언덕길 운전에도 이점을 제공함.
     * AWD 시스템은 연료 효율성이 떨어질 수 있으나, 최신 기술은 이러한 차이를 줄이고 있음.

AWD 시스템의 작동 방식

     * AWD 시스템은 중앙 차동기를 통해 앞바퀴와 뒷바퀴에 동력을 분배하며, 필요에 따라 동력을 조절하여 최적의 주행 성능을 제공함.
     * 일부 AWD 시스템은 주행 조건에 따라 자동으로 활성화되며, 다른 시스템은 운전자가 수동으로 선택할 수 있음.

AWD 차량의 장단점

     * AWD 차량은 더 나은 견인력과 안정성을 제공하지만, 더 무겁고 비싸며 연료 효율이 낮을 수 있음.
     * AWD 시스템은 유지 보수 비용이 더 들 수 있으나, 안전성과 주행 능력 향상으로 인해 많은 운전자에게 선호됨.

GN⁺의 의견

     * AWD 시스템은 특히 까다로운 기후 조건이나 도로 상황에서 운전할 때 큰 이점을 제공함.
     * 최신 기술의 발전으로 AWD 차량의 연료 효율성 문제가 점차 해결되고 있어, 이전보다 더 많은 소비자들에게 매력적인 옵션이 될 수 있음.
     * AWD 차량의 추가 비용과 유지 보수에 대한 고려는 구매 결정 시 중요한 요소이며, 개인의 운전 환경과 필요에 따라 선택해야 함.

        Hacker News 의견

     * 자판기 업체의 브로셔를 살펴본 결과, 자판기가 구매자의 인구통계학적 정보를 수집하여 타겟 광고에 사용한다는 사실이 드러남. 앱을 설치하면 '게임화'를 통해 판매를 증가시킨다고 자랑함.

     자판기 업체는 구매자의 성별, 나이 등을 포함한 인구통계 정보를 수집하고, 이를 타겟 광고에 활용함을 자랑스럽게 밝힘. 또한, 사용자가 앱을 설치하면 판매 증가를 위한 '게임화' 기능을 사용한다고 함.
     * ""USB 광학 센서""가 실제로 숨겨진 카메라를 의미하고, ""디지털 이미지 맵""이 숨겨진 카메라에서 온 이미지를 의미하는지 의문을 제기함. 또한, 데이터를 영구 메모리에 저장하거나 클라우드로 전송하지 않는다는 주장에 대해 의심함.

     ""USB 광학 센서""가 숨겨진 카메라를 의미하고 ""디지털 이미지 맵""이 그 카메라로부터의 이미지를 의미하는지에 대한 의문 제기. 데이터를 영구적으로 저장하거나 인터넷을 통해 클라우드로 전송하지 않는다는 주장에 대한 회의적인 시각을 나타냄.
     * 2000년대 후반에 자동 소변기가 있는 사무실에서 일했던 경험을 공유함. 당시에는 신기한 기술이었으며, 누군가가 장난으로 ""카메라를 만지지 마세요""라는 표지판을 만들어 사람들을 불안하게 만듦.

     자동 소변기가 설치된 사무실에서의 경험을 공유. 당시에는 새로운 기술이었으며, 장난으로 만들어진 ""카메라를 만지지 마세요""라는 표지판이 사람들 사이에 불안감을 조성함.
     * 2018년에 Renesas의 ""Facial Expression Kit Giveaway"" 대회에서 우승했으며, 상품으로 ""RZ Omron Facial Expression Kit""를 받았음. 이 기술은 자판기에 사용될 예제 코드를 포함하고 있었음.

     Renesas의 ""Facial Expression Kit Giveaway"" 대회에서 상을 받았고, 그 상품으로 ""RZ Omron Facial Expression Kit""를 받았음을 공유. 이 기술은 자판기에서 사용될 수 있는 예제 코드를 포함하고 있었음.
     * 사람들이 어떤 추적은 괜찮다고 생각하고 어떤 추적은 문제가 있다고 생각하는지에 대한 경계선이 어디인지 궁금해함. 학생들은 얼굴 인식 기술에 대해 대체로 부정적인 반응을 보이지만, 온라인 추적에 대해서는 크게 개의치 않는 사람들이 많음.

     온라인 추적에 대해 무관심한 사람들과 달리, 실제 세계에서의 추적, 특히 얼굴 인식 기술에 대해 부정적인 반응을 보이는 학생들 사이의 인식 차이에 대한 의문 제기.
     * 자판기 이용 시 개인의 사회보장번호 뒷자리를 사용해야 했던 경험을 공유하며, 이에 대해 매우 불쾌함을 표현함.

     자판기 사용 시 개인의 사회보장번호 일부를 사용해야 했던 경험에 대한 불만 표출.
     * 문제가 되는 기술에 대해 슈퍼글루를 사용하는 것으로 해결할 수 있다는 농담을 함.

     문제가 되는 기술에 대한 해결책으로 슈퍼글루 사용을 농담으로 제안.
     * 영국에서는 얼굴 인식 기술이 이미 널리 사용되고 있으며, 매장, 체크아웃 시스템, CCTV, 경찰, 학교에서 모니터링 목적으로 사용되고 있음을 언급함.

     영국에서의 얼굴 인식 기술 사용 현황을 설명하며, 자판기에서의 식별에 대한 우려를 표현함.
     * 기사가 예상보다 덜 부정적이었으며, 학생들이 저항하고, 대학이 행동하며, 법적으로 무언가를 할 수 있는 힘을 느끼는 것을 긍정적으로 평가함. 이러한 기술이 정상화되는 것을 막고, 법적 처벌을 강화해야 한다고 주장함.

     기사에 대한 반응으로, 학생들의 저항과 대학의 행동, 법적 대응 가능성에 대한 긍정적인 평가와 함께, 기술의 정상화 방지와 법적 처벌 강화의 필요성을 강조함.
     * 회사가 이미지나 개인 식별 정보를 저장하거나 전송하지 않는다는 주장에 대해 의심을 표함. 실제로는 데이터가 저장되어 있을 것이라고 확신하며, 제3자 감사를 통해 데이터가 발견될 경우 감사 비용을 청구할 의향이 있음을 밝힘.

     회사가 데이터를 저장하거나 전송하지 않는다는 주장에 대한 의심을 표현하며, 실제로 데이터가 저장되어 있을 것이라고 확신함. 제3자 감사를 통해 데이터가 발견될 경우 감사 비용을 청구할 의향이 있음을 제안함.
"
"https://news.hada.io/topic?id=13497","예상과 다르게 사람들의 이름을 딴 것들 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      예상과 다르게 사람들의 이름을 딴 것들 (2020)

브랜드와 장소의 이름 유래

     * PageRank: Larry Page에 의해 명명됨.
     * MySQL: My Widenius의 이름에서 유래됨.
     * Debian: Deb과 Ian이라는 두 사람의 이름을 조합하여 만들어짐.
     * New Relic: Lew Cirne의 이름을 재배열하여 만들어짐.
     * Price Club: Sol Price에 의해 명명됨.
     * Taco Bell: Glen Bell에 의해 명명됨.
     * Westlake, Los Angeles: Henricus Wallace Westlake의 이름에서 유래됨.
     * Outerbridge Crossing: Eugenius Harvey Outerbridge의 이름에서 유래됨.
     * Main Street, San Francisco: Charles Main의 이름에서 유래됨.
     * Erlang: Agner Erlang의 이름에서 유래됨.
     * Mars (candy): Franklin Mars에 의해 명명됨.

추가 제안된 이름 유래

     * Snowflake, AZ: Snow와 Flake라는 두 사람의 이름에서 유래됨.
     * Lake Mountain: George Lake의 이름에서 유래됨.
     * German chocolate cake: Samuel German의 이름에서 유래됨.
     * Baker’s Chocolate: Walter Baker에 의해 명명됨.
     * Unilever: Lever Brothers의 이름에서 유래됨.

2024년에 다시 회자된 이름 유래

     * Brown noise: Robert Brown의 이름에서 유래됨.
     * Southern blot: Edwin Southern의 이름에서 유래됨.
     * Smart & Final: Jim Smart와 Hildane Final의 이름에서 유래됨.
     * Elo: Arpad Elo의 이름에서 유래됨.
     * Shrapnel: Henry Shrapnel의 이름에서 유래됨.
     * Leatherman: Timothy Leatherman에 의해 명명됨.
     * Max Factor: Max Factor에 의해 명명됨.
     * BernzOmatic torches: Otto Bernz의 이름에서 유래됨.
     * Waterfall Glen: Seymour Waterfall의 이름에서 유래됨.
     * Gasoline: John Cassell의 이름에서 유래됨.
     * ColorBrewer: Cynthia Brewer의 이름에서 유래됨.
     * Morgan Hill, CA: Hiram Morgan Hill의 이름에서 유래됨.

GN⁺의 의견

     * 이 목록은 브랜드와 장소의 이름이 어떻게 창립자나 관련 인물의 이름에서 유래되었는지를 보여줌.
     * 이름의 유래를 알게 되면 해당 브랜드나 장소에 대한 이해도가 높아지고, 더 개인적인 연결을 느낄 수 있음.
     * 특히 소프트웨어 엔지니어들에게는 PageRank나 MySQL 같은 기술 관련 이름의 유래를 알아두는 것이 흥미롭고 유익할 수 있음.

   Snowflake는 https://www.snowflake.com/blog/behind-snowflakes-name/ 이 블로그에서 그냥 눈을 좋아한다고 소개되어 있는데.. 뭔가 잘못된 정보일 수 있겠네요

        Hacker News 의견

     * 헝가리어로 쓰레기통을 의미하는 'kuka'의 기원
          + 'kuka'라는 단어는 독일 산업가 요한 요제프 켈러와 야코프 크나피히의 이름에서 유래됨.
          + 켈러와 크나피히는 1898년 바이에른주 아우크스부르크에 아세틸렌 공장 KUKA를 설립함.
          + 이들의 사업은 용접 장비, 가정용품, 자동차 부품, 중공업 로봇 제조로 확장됨.
          + 1920년대에는 헝가리 시정부 쓰레기차용 호퍼를 제조하고 로고를 크게 새겨 넣음.
          + 이로 인해 쓰레기차가 'kukás auto'(KUKA가 적힌 차)로 불리게 되었고, 이후 'kuka'라는 명사가 쓰레기통을 의미하는 단어로 탄생함.
     * 사람의 이름에서 유래된 다양한 명칭들
          + 메이슨 항아리는 19세기 미국의 양철공인 존 랜디스 메이슨의 이름에서 유래됨.
          + 구피 물고기는 19세기 영국의 자연주의자 로버트 존 레치미어 구피의 이름에서 유래됨.
          + 실루엣은 18세기 프랑스 정치인 에티엔 드 실루엣의 이름에서 유래됨.
          + 블루머스(여성 의류)는 19세기 미국의 여성 권리 옹호자 아멜리아 블루머의 이름에서 유래됨.
          + T&T 슈퍼마켓은 창립자 신디 리의 딸 티나와 티파니의 이름에서 유래됨.
          + 블루투스는 10세기 덴마크 왕 하랄드 블루투스의 이름에서 유래됨.
     * 사람의 이름과 관련 없는 명칭들
          + 'Aberration'은 광학 과학자 에른스트 압베와 관련 없이 라틴어 뿌리에서 유래됨.
     * 퀘벡의 'Taxe de Bienvenue'에 대한 오해
          + 'Taxe de Bienvenue'는 집을 구입할 때 지불하는 세금으로, 잘못된 신문 보도로 인해 장관 장 비엔베뉴의 이름에서 유래된 것으로 오해됨.
     * 뮌헨의 거리 이름에 대한 오해
          + Passauerstraße와 Dessauerstraße는 도시가 아닌 그 이름을 가진 사람들의 이름에서 유래됨.
     * 알고리즘과 대수학의 기원
          + 알고리즘은 알-크와리즈미의 이름에서 유래됨.
          + 대수학은 그의 저서 'Al-jabr'에서 유래됨.
     * 런던의 King Street와 네안데르탈인, 사이드번의 기원
          + King Street는 17세기 런던의 주교 존 킹의 이름에서 유래됨.
          + 네안데르탈인은 17세기 성직자이자 작곡가 요아힘 노이만의 라틴어 이름 네안데르에서 유래됨.
          + 사이드번은 연합군 장군 앰브로스 번사이드의 이름에서 유래됨.
     * 스티글러의 법칙
          + 과학적 발견은 원래 발견자의 이름을 따지 않는다는 스티글러의 법칙이 로버트 K. 머튼에 의해 발견됨.
     * 독일 회사들의 명칭 기원
          + Aldi는 알브레히트 형제에 의해 창립됨.
          + Adidas는 아돌프 달슬러에 의해 창립됨.
          + Mercedes-Benz는 에밀 옐리넥-메르세데스가 딸 메르세데스의 이름을 따서 명명함.
          + Audi는 아우구스트 호르흐가 창립함. 'Horch'라는 이름을 잃은 후 라틴어로 번역하여 'Audi'라고 명명함.
     * 모건 힐, 캘리포니아의 기원
          + 모건 힐은 지형적 특징이 아닌 모건 힐이라는 사람의 이름에서 유래됨.
     * Legg-Calvé-Perthes disease의 기원
          + Legg-Calvé-Perthes disease는 레그 및 칼베라는 의사의 이름에서 유래됨.
"
"https://news.hada.io/topic?id=13437","서라운드 사운드 테스트 파일 모음 (구글 드라이브, 4.5GB)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  서라운드 사운드 테스트 파일 모음 (구글 드라이브, 4.5GB)

     * 돌비 애트모스/디지털/TrueHD, DTS-EX/HD/X, FLAC, LPCM 등 다양한 포맷을 위한 테스트 파일들
     * 5.1, 5.1.2, 7.1, 9.1.6 등 각 스피커를 통해 개별적으로 재생되는 채널 출력이 포함되어 다양한 환경 테스트 가능
     * 테스트 파일에 설정보다 많은 채널이 포함되어 있는 경우 이 파일을 사용하여 시스템이 오디오를 올바르게 디코딩하고 다운믹싱하여 소리가 대략 정확한 위치에 나타나는지 확인도 가능
     * 다양한 미디어 플레이어, 코덱 버전, AV 스플리터 및 가상화 소프트웨어를 사용하여 리시버, 프로세서, 사운드바 또는 헤드폰을 테스트할 수 있음

전체 파일 목록

     * LPCM 5.1
     * LPCM 7.1 (audio only)
     * AAC 5.1
     * AAC 7.1 (audio only)
     * FLAC 2.0, 3.0, 4.0, 5.0, 5.1, 6.1, 7.1 (source)
     * Dolby Digital 5.1 (AC-3)
     * Dolby Digital Plus 5.1 (E-AC-3)
     * Dolby Digital Plus 7.1 (E-AC-3)
     * Dolby TrueHD 7.1
     * Dolby Atmos 5.1.2 (encoded in TrueHD + E-AC-3 5.1)
     * Dolby Atmos 5.1.4 (encoded in TrueHD + E-AC-3 5.1)
     * Dolby Atmos 7.1.2 (encoded in TrueHD + E-AC-3 7.1)
     * Dolby Atmos 7.1.4 (encoded in TrueHD + E-AC-3 7.1)
     * Dolby Atmos 9.1.6 (encoded in E-AC-3 5.1)
     * DTS 5.1 (audio only)
     * DTS-ES 6.1 Discrete (audio only)
     * DTS-ES 6.1 Matrix
     * DTS-HD Master Audio 5.1 and 7.1
     * DTS-HD Master Audio 2.0, 2.1, 3.0 LCR, 3.0 LR+Surround, 3.1 LCR, 3.1 LR+Surround, 4.0 quadraphonic, 4.0 LCR+Surround, 4.1 LCR Surround, 5.0, 6.0, 6.1, 6.1.1 with center height, 6.1.1 with overhead, and non-standard 7.1 configurations including left and right wide
     * DTS:X 7.1.4 (encoded in DTS-MA 7.1, doesn't test subwoofer)
     * DTS:X object emulator (오디오 개체가 실내를 돌아다니면서 테스트 내내 활성 채널이 변경됨)
     * Dolby Digital Plus audio sync test (스트리밍 서비스는 일반적으로 5.1 및 Atmos 서비스를 인코딩할 때 DD+를 사용하기 때문에 이 기능이 도움이 될 것)

   구글 드라이브 링크 : https://drive.google.com/drive/folders/…
"
"https://news.hada.io/topic?id=13448","더 나은 기본 Firefox UI를 만드는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       더 나은 기본 Firefox UI를 만드는 방법

파이어폭스 기본 UI 개선 방법

     * 파이어폭스 v89 버전 이후 UI에 대한 논란이 있었고, 이에 대응하는 이 저장소가 인기를 얻음.
     * Waterfox와 Floorp 브라우저도 이 테마를 기본으로 설정함.
     * 2023년 현재, 모질라는 Windows 7과 Windows 8에 대한 지원을 종료하기로 결정함. v115가 마지막 지원 버전이며, 2024년 9월까지 사용 가능함.

원칙

     * UI/UX 디자인에 대해 크게 3가지, 작게 16가지 기준을 가지고 있음.
     * A/B 테스트를 할 수 없기 때문에 사용자 행동을 예측하는 것이 중요함.
     * 직관성, 단순성, 가시성, 적응성, 일관성, 예측 가능성, 조작성, 효율성, 명확성, 근접성, 크기, 반응성, 유연성, 접근성, 기능성, 맥락성, 조화로움, 즐거움, 호환성 등을 고려함.

문제점

     * 파이어폭스 v88 Photon UI와 v89 Proton UI 사이의 문제점을 지적함.
     * 탭이 버튼처럼 보이는 것, 패딩이 너무 큰 것, 아이콘이 혼자서는 읽기 어려운 것 등이 주요 문제점임.

탭 문제 (적응성, 조작성)

     * 적응성과 조작성을 고려하여 탭 디자인의 문제점을 분석함.
     * 애플 사파리의 사례를 들어, 사용자 불만에 따른 탭 디자인 변경 사례를 소개함.

공간이 너무 많은 문제 (가시성, 근접성, 크기, 맥락성)

     * 가시성, 근접성, 크기, 맥락성을 고려하여 공간이 너무 많은 것이 왜 문제인지 설명함.
     * Fitts의 법칙을 이용하여 클릭하기 쉬운 UI를 설계하는 방법을 설명함.
     * 구글 크롬과의 UI 간격 비교를 통해 문제점을 분석함.

아이콘의 도움 (명확성, 접근성)

     * 명확성과 접근성을 고려하여 아이콘의 중요성을 설명함.
     * 2023년 크롬 디자인 리프레시 사례를 통해 아이콘의 중요성을 강조함.

탭 재디자인

     * 탭 상태에 대한 다양한 디자인 선택을 설명하고, 프로톤 UI에서의 일반적인 실수를 지적함.
     * 탭의 너비에 따라 스마트하고 효율적인 동작을 설계함.

분포

     * 좋은 UI에 대한 개인적 기준이 있지만, 어느 정도는 ""취향""의 문제임.
     * Lepton, Photon, Proton 탭을 비교하여 각각의 개념에 맞는 사례를 선택함.

아이콘 추가 및 패딩 조정

     * 아이콘 추가와 패딩 조정을 통해 이전의 불만을 해결함.
     * Edge, Chrome, Lepton의 메뉴 아이콘 비교를 통해 Lepton의 아이콘 디자인 우수성을 강조함.

테마

     * 다양한 OS와 설정에 적응하는 UI를 제공함.
     * Windows 7부터 macOS까지 다양한 OS의 디자인을 따름.

상호작용

     * 사용자가 무슨 일이 일어나고 있는지 이해하는 데 도움이 되는 상호작용과 사용자를 즐겁게 하는 상호작용을 설계함.

결론

     * 이 테마는 관습, 심리학, 연구 결과를 고려하여 기존 테마의 최고의 특성을 계승함.
     * 상황에 맞게 OS, 다크 모드, 사용자 정의 테마 및 상호작용을 지원함.

  GN⁺의 의견

     * 이 글에서 가장 중요한 것은 사용자 경험을 향상시키기 위한 디자인 원칙과 문제 해결 방법에 대한 심도 있는 분석임.
     * 파이어폭스 사용자들에게는 이 테마가 더 나은 브라우징 경험을 제공할 수 있는 실질적인 대안이 될 수 있음.
     * UI/UX 디자인에 관심 있는 사람들에게는 디자인 결정의 배경과 그에 따른 영향을 이해하는 데 도움이 되는 통찰력 있는 자료임.

        Hacker News 의견

     * 새로운 UI의 주된 문제는 모든 것이 과도하게 크다는 것임. 이는 휴대폰 화면에는 적합할 수 있으나, 일반적인 데스크탑 화면에서는 공간 낭비가 됨. 이는 기사에서 언급한 것처럼 패딩이 증가한 부분도 있지만, ""compact"" UI 밀도 옵션을 제거한 것도 한몫함. 그러나 about:config에서 browser.compactmode.show를 설정하여 다시 가져올 수 있음. 이 옵션은 ""지원되지 않음""으로 표시되어 있지만, 몇 년 동안 그 상태로 유지되고 있음.
     * Lepton이라는 인기 있는 Firefox 테마의 저자로서, Mozilla의 덜 뛰어난 결정들을 어떻게 개선했는지, 그리고 그것이 어떻게 인기를 얻었는지에 대한 관점에서 내가 내린 여러 결정들을 볼 수 있음. 이 기사는 시리즈의 일부임.
     * 브라우저 UX를 개선하는 것은 수직 탭으로 시작한다고 강하게 생각함. 수평 탭의 경우, 6~8개의 탭을 열면 관리나 추적이 어려워짐. 수직, 중첩 탭을 사용하면 새 탭에서 열리는 링크가 자동으로 자식 탭이 됨. 이를 통해 수평 탭보다 구조와 맥락을 더 쉽게 파악할 수 있음. 여기에 다른 사이트를 나타내는 색상을 추가하면 탭 그룹을 더 쉽게 볼 수 있음. 또한, 연구나 문서 작업의 진행 상황을 저장하기 위해 탭 ""트리""를 북마크할 수 있음. CSS 파일과 몇 가지 스크린샷은 여기에 있음.
     * 이 게시물은 테마 작성자가 UX 규칙에서 출발하여 객관적으로 더 나은 Firefox 테마를 만들었다고 독자들을 설득하려 하지만, 대부분의 변경 사항은 개인적인 취향으로 보임. 분명히 잘 만들어지고 유지되고 있지만, 개인적으로는 시각적으로 매력적이지 않고 부분적으로 더 복잡해 보임. 사람마다 취향이 다르고, Firefox는 하나의 디자인을 선택했지만 이러한 변경을 지원할 수 있도록 해주고 있음. 그것은 좋은 일임. 그러나 저자가 자신의 취향이 경험적으로 옳다는 것을 증명하려는 것은 다소 어리석어 보임.
     * Firefox가 탭을 망쳐놓은 이후로 기본 브라우저로 사용하는 것을 포기함. 가끔 테스트를 위해 열어보지만, 여전히 버튼 대신 탭을 볼 때마다 반년 후에 다시 시도해보겠다고 마음속으로 메모함. 특히 밝은 테마는 밝은 회색 배경에 흰색 버튼으로 더욱 모욕적임. 심지어 Windows의 시스템 테마 설정을 존중하지 않음. Edge는 이해하지만, Chrome은 그렇지 않지만 적어도 대비가 충분함. Firefox는 완전히 표시를 놓침.
     * 탭이 ""버튼""인 것에 전혀 신경 쓰지 않는 사람도 있음. 처음 사용하는 사람들에게 정말 불편한가? 때때로 나 혼자만 그렇게 생각하는 것 같음.
     * 모두가 자신의 애완 동물 불만을 적고 있으니, 여기 내 것들이 있음:
          + 북마크 폴더가 많은 큰 트리를 가지고 있을 때, ""북마크 추가"" UI의 작은 팝업에서 새 북마크를 추가하는 것은 끔찍함.
          + 북마크 사이드바는 이름으로 검색할 수 있지만, 북마크가 어디에 있는지 찾을 수는 없음. 북마크 검색 추가 기능(Bookmark search plus 2)이 이를 해결하지만, 필요하지 않아야 함.
          + 여러 사이드바를 가질 수 없음. 따라서 수직 탭 처리를 위한 Tree Style Tabs와 북마크 폴더 및 검색을 동시에 열 수 없음. 말도 안 됨.
          + 실제로 그것이 전부임. 대부분은 북마크 처리에 관한 것임! 나머지 UI는 괜찮은 것인지, 아니면 그것에 익숙해져서 이상한 점을 더 이상 보지 못하는 것인지 확실하지 않음. 하지만 Firefox에 꽤 만족하고 있음. 다른 사람들처럼 스타일 재설계에 대해 불평할 강한 필요를 느끼지 않음.
     * 가장 큰 ""불필요한 Firefox UI 변경 불만""은 4년 전에 browser.urlbar.clickSelectsAll을 제거한 것임. 예상할 수 있듯이, Mozilla는 신경 쓰지 않음. 버그 보고서를 읽어보면, 이것은 사용자 적대적인 것으로만 설명될 수 있음. 다른 어떤 텍스트 필드도 이렇게 동작하지 않음. Mozilla가 이 ""기능""을 출시하고 그것을 선택하지 않을 수 있는 옵션을 제거한 이유를 도저히 이해할 수 없음.
     * Firefox의 실제 UI/UX 악몽은 레거시 잔재임. 모든 기본 브라우저 기능이 자체적인 다른 뷰에서 열림. 설정은 브라우저 탭에서, 기록은 사이드바에서 열리지만, 기록을 관리하려면? 별도의 창에서 열림. 북마크, 다운로드도 그 창에서 열림. 다운로드는 작은 팝업이 있지만, 관리 다운로드는 그 창에서 열림. 북마크 - ctrl+shift+o는 그 창을 열지만, ctrl+b는 사이드바를 염. 프로필? 사용자 친화적인 프로필 기능은 없지만, about:profiles에 숨겨진 레거시 인터페이스처럼 보임. 비밀번호? 브라우저 탭에서 열리며, 다른 것과 정말 일치하지 않는 자체적인 모습을 가짐.
     * Proton UI에 대해 아무도 언급하지 않는 최악의 점은, 현대적인 1080p(또는 더 높은 해상도) 모니터를 사용하지 않는 경우 객관적으로 엄청난 업그레이드임. 나의 노트북은 오래된 X220 Thinkpad이므로, 그 변경은 화면 공간을 무의미하게 낭비함으로써 내가 효율적으로 작업하는 능력에 영향을 미침. 이 경우에는 모든 것을 부풀린 Electron이나 React 앱으로 만드는 것과 같은 것이 아니라, Mozilla가 여전히 Firefox에 대해 신경 쓴다는 피상적인 인상을 만들기 위해 UI를 이유 없이 변경한 것임. Proton이 나에게 너무 싫어서 사용자 정의 userchrome을 실행함.
"
"https://news.hada.io/topic?id=13436","phidata - 함수 호출로 AI 비서를 만드는 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     phidata - 함수 호출로 AI 비서를 만드는 툴킷

     * 사람이 문제를 해결하는 방식과 마찬가지로, LLM이 함수를 호출하고 응답에 따라 다음 단계를 지능적으로 선택하여 작업을 수행
     * 사용 방법
          + Assistant 생성
          + Tools(Functions), Knowledge(VectorDB), Storage(DB) 를 추가
          + Streamlit, FastAPI, Django로 서빙하여 AI 애플리케이션 구축

   예제 코드대로 하면 너무 잘 동작하는데, 모델을 로컬에서 돌리는 것도 아니고, Open AI API Key가 필요한 것도 아니라서 어떤 LLM을 어떻게 사용하는지 모르겠네요;;

   도구도 쉽게 만들 수 있는데, docstring으로 사용법만 알려주면 알아서 잘써서 신기합니다.
def get_html(url: str):
    """"""Get the HTML of a webpage.

    Args:
        url (str): The URL of the webpage.

    Returns:
        str: The HTML of the webpage.
    """"""
    return get(url).text


assistant = Assistant(tools=[get_html], show_tools_calls=True)
assistant.print_response(""`https://news.hada.io/topic?id=13436` 사이트의 내용을 3줄 요약해 주세요."", markdown=True)
"
"https://news.hada.io/topic?id=13431","애플, 경쟁 제한적 이유로 EU에서 iPhone 웹 앱 기능 저해 – 팀 스위니","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              애플, 경쟁 제한적 이유로 EU에서 iPhone 웹 앱 기능 저해 – 팀 스위니

에픽 게임즈 CEO, EU에서 아이폰 웹 앱 기능 저하가 경쟁 제한적인 이유 때문이라 제안

     * 애플이 EU 규정인 디지털 시장 법(Digital Markets Act, DMA) 준수를 이유로 EU 고객을 위한 웹 앱 기능을 저하시켰다고 확인한 후, 에픽 게임즈 CEO 팀 스위니는 애플의 결정 뒤에 다른 이유가 있다고 제안함.
     * 스위니는 앱 스토어 수수료와 관련된 반독점 우려로 애플을 고소한 바 있으며, 편향된 관점을 가질 수 있지만, 애플이 보안 위험으로부터 고객을 보호하려는 목적이 아니라 자사의 비즈니스에 대한 잠재적 위협을 진압하려는 더 큰 의도가 있었는지에 대한 의문을 제기함.

애플의 웹 앱 지원 중단 설명

     * 애플은 DMA 준수를 위해 웹킷(WebKit) 외의 다른 웹 브라우저 엔진을 지원해야 하며, 이로 인해 iOS 홈 화면 웹 앱이 기존에 의존하던 웹킷의 보안 아키텍처를 사용할 수 없게 됨.
     * 애플은 웹 앱이 다른 앱의 데이터를 읽거나 사용자의 카메라, 마이크, 위치에 동의 없이 접근할 수 있는 악의적인 웹 앱으로부터 사용자를 보호하기 위해 EU 사용자들의 웹 앱 경험을 저하시키기로 결정함.
     * 이제 웹 앱은 로컬 스토리지, 배지, 알림, 전용 윈도잉 없이 웹사이트 북마크로만 기능할 것임.

애플의 기술적 해결 가능성 인정

     * 애플은 웹 앱의 보안 문제에 대한 기술적 해결책이 있음을 인정하지만, DMA의 다른 요구 사항들과 매우 낮은 홈 화면 웹 앱의 사용자 채택률을 고려하여 이를 구현하지 않기로 결정함.
     * 애플은 DMA에 대비할 시간이 있었음에도 불구하고, ""완전히 새로운 통합 아키텍처""를 구축하는 것이 실용적이지 않다고 주장함.

애플의 PWA 시장 전망

     * 애플은 PWA(Progressive Web Apps)를 더 유용하게 만들기 위해 노력해왔으며, PWA 시장은 2027년까지 104.4억 달러에 이를 것으로 추정됨.
     * 대체 브라우저 엔진이 PWA를 더 유용하게 만들 수 있으며, 이는 앱 스토어 비즈니스에 위협이 될 수 있음.
     * 애플은 PWA 결정에 대한 코멘트를 요청받았으나, DMA 웹사이트에 설명을 게시하는 것으로만 응답함.

   GN⁺의 의견:
     * 이 기사는 애플이 EU의 새로운 디지털 시장 법(DMA) 준수를 이유로 아이폰 웹 앱 기능을 의도적으로 저하시켰다는 주장을 다루고 있음. 이는 앱 스토어의 독점적 지위와 관련된 더 큰 반독점 논쟁의 일부로 볼 수 있음.
     * 애플이 기술적 해결책을 가지고 있음에도 불구하고 이를 구현하지 않기로 한 결정은, 회사의 이익을 보호하기 위한 것으로 해석될 수 있으며, 이는 소비자와 개발자 모두에게 중요한 영향을 미칠 수 있음.
     * PWA 시장의 성장 가능성과 애플의 이번 결정이 그러한 성장에 어떤 영향을 미칠지에 대한 분석은 기술 산업과 웹 기반 서비스의 미래에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 애플이 iOS에서 웹 앱의 발전을 오랫동안 억제해왔다는 주장
          + 애플은 앱 스토어의 네이티브 앱과 경쟁할 수 없도록 웹 앱을 제한함으로써 30%의 수수료를 취할 수 있도록 했음.
          + 제3자 브라우저 엔진을 허용해야 하는 상황에서 웹 앱이 훨씬 강력해질 수 있지만, 애플은 이를 원치 않아 유용한 기능을 모두에게 비활성화함.
          + 이러한 행동이 애플에게 역효과를 낳을 것이라고 생각함. 경쟁을 방해하기 위해 자사의 기능을 저하시키는 것은 사용자, 기업, 개발자, 입법자 모두의 반감을 증폭시킬 것임.
          + 디지털 시장 법안(DMA)에 따라 '무료' 상호운용성이 요구되지만, 애플은 매우 반경쟁적인 수수료를 부과함. 이 수수료가 없어지면 개발자들은 원하는 네이티브 앱을 자유롭게 배포할 수 있을 것임.
     * 애플의 안전 기능과 반경쟁적 행동 사이의 편리한 중복성
          + 애플은 종종 ""벤더 락인(vendor lock-in)""을 원하지 않는다는 사람들의 말을 ""안전을 원하지 않는다""고 주장함.
          + 사기와 멀웨어를 검토하고 거부하는 것은 좋지만, 애플은 ""안드로이드""라는 단어 사용을 거부하는 등 자신들이 원하는 다른 큐레이션과 결합함.
          + 내장된 첫 번째 파티 구독 UI는 사용자에게 안전하고 편리하지만, 모바일 독점과 플랫폼의 제어로 인해 원하는 만큼 요금을 부과할 수 있음.
          + 애플은 다른 결제 프로세서를 허용하는 것이 의심스러운 웹사이트로 이동하게 하고, 구독 취소와 환불을 불가능하게 만든다고 함. 그러나 이것은 애플이 만든 거짓 이분법임.
          + 내부 API를 제3자에게 개방하는 것이 안전하지 않다는 주장도 있지만, 이 또한 거짓 이분법임. 애플은 제3자 브라우저를 비안전하게 실행하거나 앱이 홈스크린 아이콘을 마음대로 생성하도록 허용할 필요는 없음.
          + 홈 화면에 추가하는 것은 이미 OS에 의해 중재되는 사용자 제스처를 통해 이루어짐. 브라우저는 어차피 샌드박스 안에서 실행되어야 하며, 웹앱은 이미 전체 화면으로 실행될 수 있음.
          + 이것은 단순한 기능 부족이 아님. 애플은 수년간 앱 스토어가 필수가 아니라고 주장해왔지만, 사파리의 제한 때문에 이는 결코 사실이 아니었으며, 이제는 완전히 터무니없는 주장이 됨.
     * 애플의 행동이 EU 규제에 대한 반발을 촉발할 것이라고 생각하는가에 대한 의문
          + 애플의 새로운 라운드의 어리석은 행동에 대해 읽을 때마다 분노가 치밀고, 애플과 다른 거대 반경쟁 기업들에 대한 태도가 더욱 강화됨.
     * 웹 앱이 이제 로컬 저장소, 배지, 알림, 전용 창 기능 없이 웹사이트 북마크로만 기능할 것이라는 사실에 대한 논평
          + 홈 화면에서의 접근이 완전히 차단되지는 않았으며, 간단한 웹 앱의 경우 알림과 로컬 저장소 없이도 충분함.
          + 많은 사람들이 '진보적인' 웹 앱을 필요로 하기 때문에 이러한 변화가 특히 나쁘다고 생각함.
          + 애플의 이러한 행동이 명백한 악의적인 움직임이라고 생각하며, 공정하고 친절한 소프트웨어를 지원하는 다른 하드웨어가 필요한 시점이라고 느낌.
     * 애플에 대해 불평하는 사람들이 파업을 하고 애플 하드웨어에서 개발을 중단하기를 바람
          + 그들이 소프트웨어와 관련된 가정된 짐 없이 자신들의 하드웨어를 만들 수 있으면 더 좋을 것임.
          + 많은 불평하는 회사들이 수십억 달러의 가치가 있으므로 이를 감당할 수 있음.
          + 물론, 그들은 애플처럼 돈을 원하기 때문에 그렇게 하지 않겠지만, Spotify, Epic 등이 iOS 기기에서 작동을 중단하면 애플이 행동을 변경할 것을 고려할 것임.
     * 애플이 PWAs를 변경 없이 그대로 두었다면, 즉 Safari에 하드코딩된 상태로 두었다면, 모질라(그리고 잠재적으로 MS)가 DMA 위반으로 애플을 고소하거나 불만을 제기했을 것이라는 가정
          + 이 경우 PWAs를 그대로 두는 것은 EU로부터 막대한 벌금을 위험에 빠뜨렸을 것임.
     * EU에 거주하는 사람이 아이폰에서 전체 화면으로 볼 수 있는 홈 서버용 작은 대시보드를 만들고 싶다면 홈 화면에 어떻게 추가할 수 있는지에 대한 질문
          + 로컬 서버용이기 때문에 앱 스토어 심사를 통과할 수 없으며, 로컬 디버그 빌드는 일주일 정도 후에 만료됨.
          + 이 상황에서 무엇을 할 수 있는지에 대한 의문 제기.
     * 애플이 DMA의 요구에 따라 대안적인 브라우저 엔진을 허용해야 하기 때문에, 사용자를 위험에 빠뜨리지 않기 위해 iOS에서의 웹 앱 경험을 저하시켰다는 주장
          + 이제 웹 앱은 로컬 저장소, 배지, 알림, 전용 창 기능 없이 웹사이트 북마크로만 기능할 것임.
          + 그러나 사용자의 카메라, 마이크, 위치에 대한 접근은 여전히 가능함.
          + 이러한 주장을 사는 사람이 있을지 의문.
     * 대화가 돌을 던질 위치에 있지 않은 사람들에 의해 항상 납치되어 논쟁이 되어서는 안 될 곳에서 논쟁이 되고 있다는 불만 표현
     * 애플이 자신들의 플랫폼에서 원하는 것을 할 권리가 있으며, Tim Sweeney는 애플이 하는 모든 것에 대해 불평하는 사람으로 기억될 것이라는 의견
          + Ruby on Rails의 창시자와 함께 기억될 것임.
"
"https://news.hada.io/topic?id=13424","대표 기술 엔지니어링: 산성 환경에서의 Mistral-7B","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    대표 기술 엔지니어링: 산성 환경에서의 Mistral-7B

Representation Engineering Mistral-7B, 산성 여행

     * 제어 벡터란 무엇인가?
          + 제어 벡터는 추론 중 모델 활성화에 적용하여 추가적인 프롬프트 없이 모델의 행동을 제어할 수 있는 벡터(각 레이어별 벡터 목록)임.
          + 동일한 프롬프트와 모델을 사용하여 제어 벡터의 적용 여부와 크기에 따라 다른 결과를 생성함.
     * 제어 벡터를 만드는 방법은 어렵지 않음
          + PCA를 사용하여 대조적인 프롬프트 쌍 데이터셋을 구축하고, 모델을 실행하여 각 레이어의 숨겨진 상태를 수집한 후, 단일 구성 요소 PCA를 사용하여 각 레이어의 제어 벡터를 얻음.
          + 이 과정은 코드 몇 줄과 약 1분의 시간이 소요됨.
     * 제어 벡터로 할 수 있는 것들
          + 제어 벡터를 사용하여 AI 모델을 '산성 여행' 상태로 만들거나 '게으름' 또는 '근면함', '창의성' 등 다양한 상태로 제어할 수 있음.
          + 각각의 제어 벡터는 몇 분 안에 훈련 가능하며, Github에서 실험 노트북을 통해 직접 시도해볼 수 있음.
     * 제어 벡터 대 프롬프트 엔지니어링
          + 제어 벡터와 프롬프트 엔지니어링은 서로 다른 접근 방식이지만, 일부 중복되는 부분이 있음.
          + 제어 벡터는 프롬프트 엔지니어링으로 복제할 수 있는 결과를 생성할 수 있으나, 강도를 조절하는 것이 더 용이함.

GN⁺의 의견

     * 제어 벡터의 중요성: 제어 벡터는 AI 모델의 행동을 세밀하게 조정할 수 있는 강력한 도구로, 프롬프트 엔지니어링의 한계를 넘어서는 새로운 가능성을 제시함.
     * 효율성과 접근성: 제어 벡터를 통해 사용자는 복잡한 프롬프트 구성 없이도 모델의 행동을 쉽게 조정할 수 있으며, 이는 AI의 사용성을 크게 향상시킬 수 있음.
     * 창의적인 활용: 제어 벡터를 사용하여 AI를 '산성 여행' 상태로 만드는 등의 창의적인 실험은 AI 연구에 있어 새로운 차원의 실험적 접근을 가능하게 함.

        Hacker News 의견

     * 이 기술의 영향이 엄청날 것 같다는 생각에 미쳤다고 느낌. 이해가 정확하지 않을 수도 있지만, 개인화된 '제어 벡터'를 저장하여 ChatGPT의 출력을 개인의 선호에 더 가깝게 조정할 수 있음을 의미하는 것 같음. 이는 개인화된 AI 엔터테인먼트로 이어질 수 있으며, 이러한 시장에서 개별적이고 전역적인 강력한 네트워크 효과가 발생할 수 있음. 이는 미래에 단일 대기업이 모든 시장을 독점할 가능성을 시사함.
     * 글이 잘 쓰여져 있고 흥미로움. LLM에 대한 이해를 얻기 위한 문헌이나 블로그 포스트를 공유해달라는 요청.
     * 제어 벡터가 인간의 호르몬을 연상시킴. 모델 행동의 큰 부분을 한 번에 수정함. 10년 안에 AI 정신과 의사가 반려 도우미에게 행복 제어 벡터 보충을 처방하는 것을 볼 수 있을 것 같음.
     * LLM을 이렇게 요약한 것은 처음 보았고, 이 방식이 마음에 듦.
     * 이 기사는 재미있으며, 최근 AI가 단조로워진다는 내용의 ""You Sound Like a Bot"" 포스트에 대한 좋은 대조를 이룸. 덜 진지한 측면에서, ""자기 인식"" 벡터를 찾는 것은 인류에게 문제를 일으킬 것임을 알고 있는 소설가에게 도전 과제임.
     * 이것은 편향 조정과 유사함, LoRA의 경쟁자임. 각 선형 계층 활성화에 추가된 벡터만 미세 조정하여 괜찮은 어댑터를 얻을 수 있음.
     * 기사가 훌륭함. 신경망의 모든 계층에 걸쳐 제어 벡터를 통합하는 이유에 대한 질문. 각 벡터가 지나가는 모든 계층에 영향을 미치므로, 데이터 표현이 지나치게 왜곡될 위험이 있지 않은가?
     * 기사가 매우 훌륭함. 제어 벡터를 사용하면 모델의 행동이 아니라 다른 사람의 행동에 대한 모델의 판단이 바뀜. 이는 정직하거나 부정직하게 행동하도록 모델에 요청하여 생성된 동일한 정직 벡터임.
     * 추론 측면(모든 계층에 무언가를 추가하는 것)이 LoRA와 매우 유사함. 제어 벡터를 LoRA로 인코딩하여 기존 추론 프레임워크와 큰 문제 없이 사용할 수 있는지, 아니면 이해가 잘못된 것인지?
     * 동시에 여러 벡터를 적용할 수 있는지에 대한 의문. 예를 들어, 환각적이고 슬픈, 정직하고 자각적인, 게으르고 창의적인 등의 조합.
"
"https://news.hada.io/topic?id=13432","Duolingo가 맘에 들지 않는 사람들을 위한 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Duolingo가 맘에 들지 않는 사람들을 위한 가이드

     * Duolingo의 대안을 찾는다면?
          + Duolingo의 품질이 AI의 도입으로 더욱 떨어진 지금, 사람들이 새로운 학습 앱으로 전환할 의향이 더 커짐
          + 다양한 언어를 지원하는 대체 앱들과 그들이 제공하는 언어들 안내
     * Duolingo와 동일한 경험을 원한다면
          + Busuu (지원 언어: 스페인어, 일본어, 프랑스어, 영어, 독일어, 네덜란드어, 이탈리아어, 포르투갈어, 중국어, 폴란드어, 터키어, 러시아어, 아랍어, 한국어)
     * 좋은 오디오 기반 앱을 원한다면
          + Language Transfer (지원 언어: 프랑스어, 스와힐리어, 이탈리아어, 그리스어, 독일어, 터키어, 아랍어, 스페인어, 스페인어를 배우는 영어 사용자)
     * 돈이 문제가 아니고 좋은 오디오 기반 앱을 원한다면
          + Pimsleur (매우 다양한 언어 지원)
          + Glossika (많은 언어 지원, 소수 언어는 무료)
     * 도서관 카드가 있다면
          + Mango (많은 언어 지원, 멸종 위기/원주민 언어 코스는 도서관 파트너십 여부와 상관없이 무료)
          + Transparent Language (가장 많은 언어 지원, 아프리카 언어의 가장 넓은 범위, ESL 및 영어가 아닌 다른 언어로 외국어를 배우는 데 있어 가장 다양함)
     * SRS 플래시카드를 원하고 안드로이드를 사용한다면
          + AnkiDroid (이론적으로 모든 언어 지원, 사전 제작된 덱 쉽게 찾을 수 있음)
     * SRS 플래시카드를 원하고 아이폰을 사용한다면
          + AnkiApp (AnkiDroid만큼 거의 좋고, 아이폰용 공식 Anki 앱에 비해 무료)
     * 광고가 괜찮고 한국어를 배우고 싶다면
          + lingory
     * 만다린을 위해 만들어진, Duolingo보다 나은 앱을 원한다면
          + ChineseSkill (그들의 이전 버전 코스를 무료로 사용 가능)
     * 위에서 언급한 앱들이 마음에 들지 않는다면 한 가지 더
          + Bunpo (지원 언어: 일본어, 스페인어, 프랑스어, 독일어, 한국어, 만다린)

   한국어 니즈가 많은가보네요 ㅎㅎ lingory,,

   Anki도 좋은데 더 깔끔하고 고양이도 있는 Vocat을 더 추천합니다.
   CSV 형태로 외부 단어장 추가할 수도 있고, 깜빡이 기능도 내장되어 있으면서 푸시로 주기적으로 알림 받을 수 있어요.

   듀오링고 유료로 러시아어 275일 스트릭 유지 중입니다. 이전에 한 130일 하다가 여행 다녀오는 동안 인터넷 연결이 안되어서 다 날린 것까지 포함하면 한 일년 넘게 했네요. 러시아어 외에도 이태리어, 히브리어, 에스페란토 등 했었는데, 영어 사용자들이 많이 학습하는 이태리어 같은 경우는 구성 등이 아주 좋았고, 러시아어도 나쁘지 않았습니다. 히브리어나 에스페란토 같이 사용자가 적은 경우는 업데이트도 없고 해설도 없고 주구장창 문제풀이만 시키니 재미가 없더라고요. 패밀리로 묶어서 아이들 영어 공부와 함께 쓰고 있어서 당분간은 유지하겠지만 위에 있는 다른 서비스들도 좀 찾아보고 테스트해봐야겠네요. 실질적인 언어 공부는 저는 EBS가 최고인 것 같습니다. ㅎㅎ

   듀오링고 1년동안 잘 썼는데 Language Transfer도 이제 같이하려구요. 듀오링고가 생각보다 도움이 안되는 것 같기도하고.. 공부보단 스트릭 유지에만 신경쓰게 되네요

   듀오링고는 너무 언어에 대한 소개없이 그냥 문제만 푸는 느낌이었는데, Busuu 는 조금 설명이 있네요. 일단 둘다 같이 사용해봐야겠어요.

   적어도 스페인어, 일어, 중국어는 듀오링고로 안 하는 편이 좋은 거 같더라구요
   문제에서의 단어 사용 예시가 너무 편협하고, 듀오링고 앱 내에서 오류 수정 요청을 해도 예전처럼 잘 받아주지 않습니다

   아흑 저 듀오링고 스페인어 열심히 하고 있는데 ㅠ

   가끔 듀오링고로 한국어나 일본어 공부하는 유튜버들 방송을 본 적이 있는데 뭐 저런 단어를 가르치는건가 싶은 적이 많이 있었습니다. 정말 별로에요.

  Hacker News 의견

     * 한 사용자는 Duolingo로 1000일 연속 학습을 했지만, 실제 언어 학습보다 연속 학습 기록을 유지하는 데 더 많은 시간을 할애했다고 말함. 이 사용자는 앱 사용을 중단한 후에도 언어를 읽는 데는 괜찮았지만, 회화는 능숙하지 않았고, 일반적인 속도로 말하는 사람들을 이해하지 못했다고 함. 'Language Transfer'라는 무료 언어 학습 웹사이트를 추천받고 사용한 결과, 첫 날부터 상당히 회화가 가능해졌으며, 21일째 되는 날에는 스페인어 쇼를 자막 없이 이해할 수 있었다고 함. 또한, 언어 숙달을 원한다면 'Clozemaster'도 훌륭한 도구라고 언급함.
     * 다른 사용자는 Duolingo를 포함한 대부분의 언어 학습 앱이 유창함을 얻는 데 큰 도움이 되지 않는다고 지적함. 'Dreaming Spanish'와 같은 ""이해 가능한 입력""이 유창함으로 나아가는 데 필요하다고 함. 언어에 대해 배우는 것과 언어를 습득하는 것은 다르며, Krashen의 연구를 통해 어떻게 사람들이 유창함을 얻는지에 대한 많은 연구가 있다고 언급함. 언어 학습을 하는 대부분의 사람들이 체스에 대해 배우는 것과 같이 실제로 체스를 두는 것과는 다른 활동을 하고 있다고 비유함. TV와 라디오만 보면서 성인이 된 후에 프랑스어를 유창하게 습득한 사람에 대한 이야기를 추천하는 링크를 공유함.
     * 또 다른 사용자는 Duolingo가 최근에 토론 포럼을 제거한 것에 대해 실망감을 표현함. 포럼은 새로운 구문이나 개념에 혼란스러울 때 다른 사람들의 질문과 직관적인 답변을 볼 수 있어 매우 유용했다고 함. 이제는 구글 검색을 통해 비슷한 정보를 찾아야 하지만, 이전만큼 유용하지 않다고 느낌.
     * Anki 플래시 카드를 추천하는 사용자는 직접 덱을 만드는 것이 중요하다고 강조함. 맥락이 중요하며, 읽은 텍스트에서 직접 추가한 단어들을 기억하기 쉽고, 실제 사용되는 단어를 볼 수 있는 기회를 제공하기 때문임. 또한, 타인이 만든 덱은 관심 없는 단어들을 많이 포함할 수 있다고 함. 프랑스어 학습에는 'kwiziq'를 더 유용하게 사용했다고 언급함.
     * 일본어 과정을 2개월 동안 매일 학습한 사용자는 읽기는 어느 정도 배웠지만, 실제로 말하면 이해받지 못할 것 같다고 함. 형식의 한계를 인식하고 있지만, 사전에 정의된 답변을 선택하는 대신 일본어 키보드를 사용하여 답변을 입력할 수 없는 것에 대해 불만을 표현함.
     * 언어는 배우는 것이 아니라 가입하는 것이라는 견해를 제시하는 사용자는 Duolingo가 기초를 익히고 동기를 부여하는 데는 거의 완벽하지만, 유창함을 위해서는 언어에 '가입'해야 한다고 말함. 새로운 언어를 배우는 과정을 다른 사람들과 함께하는 활동으로 보는 것이 더 나은 방법이라고 생각함. Duolingo를 보완하기 위해 좋아하는 언어의 유튜브 소프 오페라를 시청하는 것이 도움이 된다고 함.
     * Duolingo가 실제 언어 학습에 효과가 있었는지 의문을 제기하는 사용자는 그것이 가짜 생산성처럼 보인다고 말함.
     * Duolingo의 품질이 더 떨어졌다는 의견을 표현하는 사용자는 4년 동안 사용해왔지만, 사용자 경험이나 학습을 개선하는 변경 사항을 본 적이 없다고 함. 토론과 사전 제거와 같은 많은 변경 사항이 학습을 더 나쁘게 만들었다고 느낌.
     * Anki 클론인 AnkiApp을 원본 오픈 소스 프로젝트보다 더 선호하는 사람들에 대한 불만을 표현하는 사용자가 있음.
     * Duolingo가 많은 사람들에게 언어 학습의 유일한 자원으로 인식되는 것에 대해 실망감을 표현하는 사용자는, 특정 언어에 대해서는 좋은 보완 자료가 될 수 있지만, 실제로 원어민과 비중있게 대화하고자 한다면 더 강력한 주요 자원이 필요하다고 말함. Duolingo로 1년 동안 ""공부""한 후 유창함에 대한 진전을 보지 못하고 탈진하는 사람들을 보는 것이 매우 답답하다고 함.
"
"https://news.hada.io/topic?id=13518",""Architecture.md (2021)" 기술명세서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ""Architecture.md (2021)"" 기술명세서

ARCHITECTURE.md 작성 권장

     * 오픈소스 프로젝트 유지 관리자에게 README와 CONTRIBUTING 옆에 ARCHITECTURE 문서를 추가할 것을 강력히 권장함.
     * 이 문서는 프로젝트의 고수준 아키텍처를 설명하며, 반복적인 기여자가 읽어야 하므로 짧게 유지하는 것이 좋음.
     * ARCHITECTURE 문서는 자주 변경되지 않을 내용만 포함해야 하며, 코드와 동기화를 시도하기보다는 연간 몇 번 검토하는 것이 바람직함.

문서의 목적과 중요성

     * 프로젝트에 대한 물리적 아키텍처에 대한 지식이 일반 기여자와 핵심 개발자를 구분하는 가장 큰 차이점임.
     * 프로젝트에 익숙하지 않은 경우 패치를 작성하는 데 2배 더 많은 시간이 걸리고, 코드를 변경해야 할 위치를 파악하는 데는 10배 더 많은 시간이 소요됨.
     * ARCHITECTURE 파일은 이러한 격차를 해소하는 데 효과적인 방법으로, 프로젝트의 구조에 대한 반성의 기회도 제공함.

문서의 구성

     * 문제에 대한 새로운 관점에서의 개요로 시작하고, 모듈 간의 관계를 설명하는 상세한 _코드맵_을 제공해야 함.
     * 중요한 파일, 모듈, 타입을 명시하되, 직접 링크하는 대신 이름으로 검색하도록 독려하여 유지 관리가 필요 없게 함.
     * 아키텍처 불변성을 명시적으로 지적하고, 계층 간의 경계를 지적해야 함.

건축적 불변성과 경계

     * 중요한 불변성은 종종 무언가의 부재로 표현되며, 코드를 읽는 것만으로 이를 파악하기 어려움.
     * 계층이나 시스템 간의 경계는 시스템의 구현에 대한 정보를 암시적으로 포함하고 있으며, 가능한 모든 구현을 제약함.

종단 간 관심사

     * 코드맵을 완성한 후, 종단 간 관심사에 대한 별도의 섹션을 추가해야 함.
     * ARCHITECTURE 문서의 좋은 예로 rust-analyzer의 architecture.md가 있음.

   GN⁺의 의견:
     * ARCHITECTURE 문서는 프로젝트의 이해를 돕고, 새로운 기여자가 빠르게 코드 베이스에 익숙해지는 데 중요한 역할을 함.
     * 이 문서는 프로젝트의 구조를 명확히 하고, 중요한 아키텍처 원칙과 경계를 강조하여 개발자들이 시스템을 더 잘 이해하도록 돕는다.
     * 오픈소스 커뮤니티에서 ARCHITECTURE 문서의 채택은 프로젝트의 지속 가능한 성장과 유지 관리에 기여할 수 있으며, 이는 개발자들에게 매우 유익하고 흥미로운 접근 방식임.

        Hacker News 의견

     *

     오픈소스 프로젝트를 관리하고 코드 라인이 10k-200k 사이라면 ARCHITECTURE 문서를 추가하는 것을 강력히 권장합니다.
          + 아이디어는 좋지만, 저장소 크기에 상관없이 Readme에 아키텍처를 포함시킬 수 있다고 생각함. 예를 들어, 모든 사용자가 워크플로우를 이해할 수 있도록 주 Readme에 Mermaid 시퀀스 다이어그램을 의도적으로 배치함.
     *

     이 접근법은 ad hoc 기여자가 많은 오픈소스 프로젝트에 대해 유지보수가 적은 모델로 훌륭함. 전담 엔지니어가 있는 프로젝트의 경우 ADRs를 고려해야 함. 이는 더 많은 유지보수를 필요로 하지만, ""왜""와 ""고려된 대안""을 기록하여 재구축 시 매우 도움이 됨.
     *

     몇 년 전에 내 큰 부수적 프로젝트 중 하나에서 비슷한 것을 실험해봄:
          + 각 파일의 상단에 다른 ARCHITECTURE.md 파일로의 링크 트리가 있었음.
     *

     모든 IDE는 표준 디렉토리 트리로 프로젝트의 폴더 구조를 왼쪽에 보여줌. 의존성 그래프로 프로젝트를 탐색하는 것을 지원하는 IDE가 있을까?
     *

     여기서 작가가 쓴 것을 일반 소프트웨어 프로젝트로 확대 적용하는 것에 주의해야 함. 많은 기여자가 적은 맥락을 가진 큰 오픈소스 프로젝트에서는 이런 문서를 유지하는 것이 가치가 있음. 하지만 작은 작업 프로젝트에서 본 모든 개발자가 작성한 문서는 결국 관리되지 않게 됨.
     *

     문서가 짧을수록 미래의 변경에 의해 무효화될 가능성이 낮아짐. 이것이 ARCHITECTURE 문서의 주된 규칙임 — 자주 변경될 가능성이 낮은 것들만 명시하라. 코드와 동기화하려고 시도하지 마라.
          + 인터페이스는 변경하기 덜 가능하고 [더 어렵다!] (Parnas, 시스템을 모듈로 분해하는 데 사용되는 기준).
     *

     모든 프로젝트에서 온보딩 시 아키텍처 다이어그램과 그 구성 요소에 대한 간단한 설명을 보여줌.
          + 이제 오픈소스에서 이것이 얼마나 드문지 놀람.
     *

     이것은 매우 유용한 관행임. 많은 프로젝트에는 대부분의 변경이 일어나는 몇 개의 핵심 파일(또는 패키지/모듈/등)이 있음. 새 기여자들(또는 오랜만에 돌아온 기여자들)이 이것들을 빠르게 익힐 수 있게 해주면 프로젝트 시작 시간을 크게 단축시킬 수 있음.
     *

     이런 작은 문서/코드로 된 다이어그램 표준들을 팬이었음:
          + README 주도 개발
          + ARCHITECTURE.md
          + ADRs
          + arc42
          + C4
          + 등등.
          + 이제는 git 저장소의 /docs 폴더 안에 Obsidian 볼트를 넣음.
          + 누군가의 표준을 사용하는 대신, Obsidian에서 내 개인 노트를 관리하는 것처럼 문서를 조직하고 리팩터링함.
          + GitHub(GFM)과 Obsidian에서 모두 작동하는 공통의 Markdown 부분집합을 사용하려고 했지만, 결국 포기하고 Obsidian의 마크다운과 그 전용 기능들을 사용함.
          + Obsidian에는 Mermaid와 LaTeX이 내장되어 있고, PlantUML을 위한 플러그인이 있음.
          + 시각적인 그림/다이어그램을 위해 Canvas, DrawIO, Excalidraw가 내장되어 있음.
     *

     당시 논의됨:
          + Architecture.md - Feb 2021 (153개의 댓글)
"
"https://news.hada.io/topic?id=13505","기관들이 해결책이 되는 문제를 보존하려 시도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        기관들이 해결책이 되는 문제를 보존하려 시도

Shirky 원칙: 기관들은 자신들이 해결책인 문제를 보존하려 한다

     * Shirky 원칙은 ""기관들은 자신들이 해결책인 문제를 보존하려 한다""는 격언을 의미함.
     * 이 원칙은 더 넓은 의미로 ""모든 실체는 자신이 해결하고 있는 문제를 연장시키려 한다""로 표현될 수 있음.
     * 예를 들어, 어떤 사회 문제를 해결하기 위해 설립된 정부 기관이 다른 이들의 해결 시도를 방해하여 기관의 중요성을 유지하려 할 수 있음.
     * 또한, 기관이 현재의 해결 방식에 너무 집중하여 새롭고 더 나은 해결책이 나타나도 받아들이지 못해 문제를 지속시킬 수 있음.
     * Shirky 원칙은 다양한 영역에서 중요한 함의를 가지므로 이해하는 것이 중요함.

Shirky 원칙의 예시들

     * 세금 신고 회사들이 정부에 로비를 하여 무료이고 쉬운 세금 신고 방법을 제공하지 못하게 하여 이익을 계속 얻으려는 것이 Shirky 원칙의 예시임.
     * 또 다른 예로, 사설 교도소 회사들이 수감자 수와 수감 기간을 늘리는 정책을 지지하도록 정부에 로비하는 경우가 있음.
     * Shirky 원칙은 기관뿐만 아니라 개인 직원이나 다른 실체에도 적용될 수 있음.
     * 코브라 효과는 영국 식민지 당국이 델리에서 코브라 개체 수를 줄이기 위해 죽은 코브라에 대한 보상금을 걸었지만, 시민들이 이익을 위해 코브라를 번식시키는 결과를 낳은 사례임.
     * Shirky 원칙에 의해 설명되는 현상은 반드시 의도적인 행동의 결과는 아님. 예를 들어, 회사가 현재 판매 중인 평범한 해결책에 너무 집중하여 더 나은 해결책이 있다는 것을 깨닫지 못할 수 있음.

Shirky 원칙의 기원과 표현

     * Shirky 원칙은 2010년 Kevin Kelly의 블로그 포스트에서 제안되었으며, Clay Shirky의 발언과 저술에 기반을 둠.
     * Kelly는 Shirky가 최근 강연에서 한 발언과 관련 블로그 포스트, 책에서 언급한 ""기관은 사회가 관리해야 할 문제를 보존하려 한다""는 격언을 Shirky 원칙으로 귀속시킴.
     * Kelly는 Shirky 원칙을 세 가지 다른 방식으로 표현함: 기관이 의도적으로 문제를 보존하려 한다는 것, 복잡한 해결책이 무의식적으로 문제를 지속시킨다는 것, 모든 실체가 문제를 연장시키려 한다는 것.

Shirky 원칙에 대한 주의사항

     * Shirky 원칙은 단지 일반적인 관찰에 불과하며, 많은 상황에서는 틀릴 수 있음.
     * Shirky 원칙은 ""기관""에만 국한되지 않고 개인이나 작은 사회 집단을 포함한 다양한 실체에 적용될 수 있음.
     * Shirky 원칙은 다양한 원인과 행동 양식을 포함할 수 있음.
     * Shirky 원칙에 따른 행동은 다른 방식으로도 변할 수 있음. 예를 들어, 실체가 기존 문제를 악화시키거나 새로운 문제를 만들거나, 실제로 해결책이 아닌 문제를 지속시킬 수 있음.

Shirky 원칙을 고려하기

     * Shirky 원칙을 고려하는 것은 과거와 현재의 행동을 이해하고, 미래의 행동을 예측하며, 문제적인 행동을 수정하는 데 도움이 될 수 있음.
     * Shirky 원칙에 따른 행동의 원인과 결과를 평가하는 것이 실제 상황에서 어떻게 이 원칙을 활용할지 결정하는 데 도움이 될 수 있음.

관련 개념

     * _Parkinson's law_은 ""작업은 그것을 완료하기 위해 사용 가능한 시간만큼 확장된다""는 격언으로 Shirky 원칙과 관련이 있음.
     * Shirky 원칙은 또한 Parkinson이 지적한 또 다른 현상과 관련이 있으며, 이는 관료적 또는 행정적 기관의 성장이 종종 전반적인 효율성 감소와 관련이 있다는 것을 나타냄.
     * Upton Sinclair의 유명한 격언 ""사람이 이해하기 어려운 것은 그의 급여가 그것을 이해하지 못하는 데 달려 있을 때이다""도 Shirky 원칙과 관련이 있음.

요약 및 결론

     * Shirky 원칙은 ""기관들은 자신들이 해결책인 문제를 보존하려 한다""는 격언임.
     * 예를 들어, 어떤 사회 문제를 해결하기 위해 설립된 정부 기관이 다른 이들의 해결 시도를 방해하여 기관의 중요성을 유지하려 할 수 있음.
     * 이 원칙은 더 넓은 의미로 ""모든 실체는 자신이 해결하고 있는 문제를 연장시키려 한다""로 표현될 수 있으며, 실체가 실제로 해결하지 않는 문제를 지속시킬 수도 있음.
     * Shirky 원칙을 고려하는 것은 과거와 현재의 행동을 이해하고, 미래의 행동을 예측하며, 문제적인 행동을 수정하는 데 도움이 될 수 있음.

    GN⁺의 의견

     * Shirky 원칙은 사회적, 경제적 기관이나 개인이 자신의 필요성을 유지하기 위해 문제를 지속시키거나 해결을 방해할 수 있는 동기를 이해하는 데 중요함.
     * 이 원칙은 정책 결정, 기업 전략, 개인의 직업적 행동을 분석할 때 유용한 통찰을 제공할 수 있음.
     * Shirky 원칙은 혁신과 진보를 방해하는 장애물을 인식하고, 이를 극복하기 위한 전략을 수립하는 데 도움을 줄 수 있음.

        Hacker News 의견

     * 한 대기업에서의 경험
          + 한 직원이 매우 간단한 프로젝트를 가지고 있었음.
          + 외부 업체를 통해 두 주 만에 해결책을 찾았으나, 그 직원은 더 이상 소통을 하지 않음.
          + 그 직원은 부사장에게 가서 50명의 팀을 구성하고 9개월 후에 해결책을 내놓고 파티를 함.
          + 대기업에서의 업무가 승진을 위한 이벤트와 넓은 인정을 받기 위한 것이라는 것을 깨달음.
     * 금융 부문의 변화
          + 미국 금융 부문은 과거에 엄격한 규제로 인해 더 단순했음.
          + 은행과 증권사의 업무가 분리되어 있었고, 은행은 기본적인 업무만 할 수 있었음.
          + 공공 서비스 회사들은 안정적인 주가를 가지고 있었고, 주식 거래도 느리게 이루어졌음.
          + 1980년대 금융 규제 완화 이후 금융 부문이 복잡해지고, 제조업보다 금융에서 돈을 벌기 쉬워짐.
     * 비영리 단체와 NGO의 문제
          + 많은 NGO들이 문제를 해결하기보다는 영구적인 문제의 일부가 되는 유혹에 빠짐.
          + 샌프란시스코는 홈리스 문제 해결에 많은 예산을 쓰지만, 실제로는 NGO 산업 단지에 의해 소비됨.
     * 기술 회사에서의 경험
          + 한 물리학자가 간단하고 효과적인 해결책을 찾았으나, 회사 내 정치 문제로 해고됨.
          + 대학에서 물리학을 가르치게 되었으나, 학생들이 기본 지식이 부족하고, 시험에서 떨어뜨릴 경우 대학의 문제가 될 수 있어 학생들을 합격시킬 수밖에 없음.
     * 시스템의 문제
          + 복잡한 시스템은 자신의 본래 기능에 반대하는 경향이 있음.
          + 시스템 내 사람들은 시스템이 말하는 것과 다른 행동을 함.
          + 필요하지 않음에도 시스템은 계속해서 자신의 일을 함.
     * 회의에 대한 시
          + 회의에 참석하는 것이 얼마나 비효율적인지에 대한 시를 공유함.
     * 기술과 앱의 남용
          + 여러 앱을 통해 소량의 데이터를 이동시키는 것 외에 실제로 아무것도 하지 않는 상황에 대한 비판.
     * NGO의 역할에 대한 비판
          + 개발도상국을 돕는 NGO들이 그들을 빈곤 상태에 두는 것에 동기를 부여받는다는 주장.
     * 관료제의 법칙
          + 관료제의 철칙에 대한 언급과 관련 링크 제공.
     * 회사 내에서의 인공지능 도구 사용
          + 회사가 자체 버전의 ChatGPT를 출시했으나 사용하지 않자 OpenAI의 도메인을 차단함.

   이 요약은 다양한 관점에서 대기업, 금융 부문, 비영리 단체, 교육 기관, 시스템의 복잡성 및 관료제와 관련된 문제점들을 다루고 있음.
"
"https://news.hada.io/topic?id=13527","C 언어에서의 코루틴언어에서의 코루틴 (2000)

코루틴(Coroutines) in C

     * 코루틴의 도입: 대규모 프로그램을 구조화하는 것은 언제나 어려운 일임. 데이터를 생산하는 코드와 소비하는 코드가 있을 때, 어느 것이 호출자(caller)이고 어느 것이 피호출자(callee)인지 결정하는 문제가 종종 발생함.
     * 재구성(Rewriting): 통신 채널의 한 쪽을 호출 가능한 함수로 재작성하는 것이 일반적인 해결책임. 이는 원래의 코드보다 덜 명확하고 유지보수 부담을 늘림.
     * 크누스의 코루틴(Knuth's coroutines): 도널드 크누스는 스택 개념을 버리고, 프로세스를 동등한 협력자로 생각하는 해결책을 제시함. 하지만 이는 어셈블리 언어에서만 가능하며, C와 같은 고급 언어에서는 지원하지 않음.
     * 스택 기반 코루틴(Stack-based coroutines): C에서 크누스의 코루틴 호출 원리를 모방하고자 함. 이를 위해 goto문과 상태 변수를 사용하여 함수 내부에서 제어를 임의의 지점으로 이동시키는 방법을 사용함.
     * 더프의 장치(Duff's device): switch문 내부의 case문을 사용하여 레이블 대신 switch문 자체로 점프를 수행함. 이를 통해 코루틴 트릭을 구현함.
     * 평가(Evaluation): 코루틴 매크로를 사용하여 생산자와 소비자 간의 데이터 전달을 가능하게 함. 이는 ANSI C에서 휴대성 있게 구현됨.
     * 코딩 표준(Coding Standards): 이 기술은 코딩 표준을 위반하지만, 알고리즘의 구조를 명확히 드러내는 데 도움이 됨. 코딩 표준은 구문적 명확성보다 알고리즘적 명확성을 추구해야 함.
     * 개선 및 코드(Refinements and Code): 실제 응용 프로그램에서는 정적 변수에 의존하지 않고 재진입 가능하고 멀티스레드 환경에서도 작동하는 코루틴 구현이 필요함. 이를 위해 컨텍스트 구조체를 매개변수로 사용함.

  GN⁺의 의견

     * 중요성: 이 기사는 C 언어에서 코루틴을 구현하는 창의적인 방법을 제시함으로써, 프로그래머들이 더 효율적으로 데이터 생산자와 소비자 간의 상호작용을 코딩할 수 있게 하는 방법을 설명함.
     * 흥미로움: 크누스의 코루틴 개념을 C 언어에 적용하려는 시도는 프로그래밍 언어의 한계를 극복하고자 하는 개발자의 창의성을 보여줌.
     * 도움됨: 코루틴을 사용하면 복잡한 상태 머신을 명시적으로 작성하지 않고도 비동기 처리를 구현할 수 있어, 코드의 가독성과 유지보수성이 향상됨.
"
"https://news.hada.io/topic?id=13529","Gemini Pro 1.5 일주일 사용후기 - 정말 환상적임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Gemini Pro 1.5 일주일 사용후기 - 정말 환상적임

     * 구글의 새로운 비공개 베타 LLM인 Gemini Pro 1.5은 이전 모델들보다 훨씬 개선된 성능을 보여줌
     * Gemini 1.5 Pro는
          + 전체 소설을 읽고 중간에 숨겨진 장면에 대해 상세히 설명함
          + 전체 코드베이스를 읽고 새 기능을 추가할 위치와 예제 코드를 제안함
          + Readwise에서의 독서 하이라이트를 모두 읽고 에세이 작성을 위한 하이라이트를 선택함
     * 한 번의 프롬프트로 최대 100만 토큰을 처리할 수 있음
          + 다른 모델들과 비교했을 때, Gemini Pro 1.5의 컨텍스트 윈도우가 훨씬 큼(GPT-4 Turbo는 128000개여서 약 8배에 달함)
          + 큰 컨텍스트 윈도우를 사용해도 대규모 프롬프트를 뛰어나게 처리
          + 다른 모델들은 프롬프트 크기가 커질수록 성능이 저하되는 반면, Gemini는 그러한 문제가 없음
     * 주의 사항
          + Gemini Pro 1.5는 아직 비공개 베타이며, 공개 시 성능이 달라질 수 있음
          + Gemini Pro 1.5는 처리 속도가 느림, 특히 대규모 요청에 대해서는 더욱 그러함.
          + OpenAI는 추격해야 할 부분이 있으며, 정보 검색 기능은 여전히 중요함

   소설을 붙여넣기하고 대화를 해봤는데, 조금만 야한 표현이 나와도 처리를 거부함. 필터수준을 낮추어도 여전히 안되는 소설이 존재함. 확장성보다는 안전성을 택한 듯.

   여태 뭐하나 나올때마다 호들갑은 계속 떨었는데 openAI 넘는건 하나도 없었던 거같은데..
   개인적으론 모든 백본을 Mamba로 교체한 LLM이 빨리 나왔으면 하네요

  Hacker News 의견

     * AI에게 전체 책의 텍스트를 먹이는 아이디어가 마음에 든다. 소설을 읽다가 등장인물을 기억하지 못할 때가 종종 있는데, e리더에서 이름을 강조하면 '뉴로맨서' 85페이지를 읽고 있는 것을 인지하고 스포일러 없이 답을 주었으면 좋겠다. 또는 문제를 풀다 막힐 때 좋은 공부 파트너처럼 도움과 힌트를 줄 수 있는 교과서도 있으면 좋겠다.
     * 구글의 정체성 정치 때문에 책의 사실을 변경하지 않을 거라고 확신할 수 있나? 문제가 되는 책을 넘겼을 때 내용을 조정하나? 이런 이유로 나에게는 완전히 쓸모없다.
     * 이런 주제에 대해 읽고 싶은 정확한 예와 균형, 주의점을 제공하며 자신의 이해관계(예: 'LlamaIndex'에 투자자임)를 밝힌 기사
     * RAG를 버리지 않고 이와 결합하여 거대한 컨텍스트 창을 사용하는 것이 어떻게 될지 가장 기대된다. 전체 책을 파싱하여 관련 부분을 식별하고 전체 책을 컨텍스트 창에 넣을 수 있다면, 전체 참고 도서관의 관련 부분도 컨텍스트 창에 넣을 수 있다는 의미이며, 이는 매우 유망하다
     * 몇몇 사람들이 이미 며칠간 접근해본 결과, 이것은 단순히 길이가 아닌 활용 면에서 진정한 컨텍스트 창의 발전이다. 다른 모델들보다 훨씬 더 잘 활용한다. 그것이 어떻게 가능한지 공유하지 않은 것이 아쉽다.
     * 그렇게 하면 비용이 엄청나게 들지 않을까? gpt-4에 최대치를 먹이면 이미 한 번의 상호작용에 $1.28이 든다! Gemini는 그보다 훨씬 저렴한가?
     * NSA에서는 이 기술이 열어줄 가능성에 대해 손을 비비고 있을 것이다. 그들이 수년간 열심히 저장해온 데이터를 조회하는 데 이용할 수 있을 것이다
     * 코드베이스 전체를 읽고 새 기능을 추가할 위치를 제안하며 샘플 코드까지 제시한다. 이것이 드럼 머신의 발명과 같이 드러머를 없애지 않았듯이, 마차를 없앤 자동차의 발명과 같지 않기를 희망한다.
     * 이 모델들은 공개될 때 종종 다르게(더 나쁘게) 작동하며, Gemini가 구글 규모에서 작동할 때 어떻게 될지 모른다. 구글이 ChatGPT의 점점 떨어지는 명성에서 배우고, 모델이 최고 성능을 유지할 수 있는 방법을 찾기를 진심으로 바란다. 접근을 제한하든 가격을 올리든, 또는 둘 다든, 공개될 때 이 모델과 높은 품질의 경험을 하고 싶다.
"
"https://news.hada.io/topic?id=13534","맥OS 메모앱에 AI를 달아보자 (via NotesOllama)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  맥OS 메모앱에 AI를 달아보자 (via NotesOllama)

     * 맥북에 연결할 수 있는 AI인 NotesOllama가 공개됨
     * NotesOllama를 셋팅하는 A-Z와 사용 예제가 수록되어 있음
     * Ollama 기반이다 보니, Ollama를 필수 설치 해주어야 작동함
     * 이제 메모장에서 AI를 통해 '요약', '질의응답', '재작성' 문장 이어쓰기'가 가능해짐

   ‘NotesOllama’ 은 macOS 13.0 이상이 필요합니다.
"
"https://news.hada.io/topic?id=13538","Mamba: 트랜스포머에 도전하는 상태 공간 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Mamba: 트랜스포머에 도전하는 상태 공간 모델

Mamba는 Transformer에 도전하는 상태 공간 모델(State Space Model)

     * AI는 현재 세계를 지배하고 있으며, 그 중심에는 트랜스포머가 있음
     * Mamba는 상태 공간 모델(SSM)이라는 대안적 모델 클래스에 속함
     * Mamba는 트랜스포머와 유사한 성능과 확장성을 가지면서도 긴 시퀀스 길이에서 실행 가능함
     * 주목할 만한 점은 Mamba가 '어텐션 메커니즘'의 '제곱 병목현상'을 제거하여 긴 컨텍스트를 가능하게 함
     * Mamba는 트랜스포머보다 최대 5배 빠른 속도로 실행됨

트랜스포머의 문제점 - 어텐션만으로는 충분하지 않을 수도 있음

     * 트랜스포머는 모든 토큰이 이전 토큰을 참조할 수 있어, 컨텍스트가 커질수록 모델이 느려짐
     * 이러한 KV 캐시의 저장은 공간 복잡도도 O(n)이 필요함
     * 기존의 트랜스포머의 병목 현상을 완화하는 기술들이 있지만, 근본적인 해결을 위해서는 다른 접근 방식이 필요함

기초 모델 백본

     * 좋은 ML 아키텍처 백본의 두 가지 중요한 구성 요소
          + 토큰 간의 통신(Communication)
          + 토큰 내의 계산(Computation)
     * 트랜스포머 블록은 주의(Attention)와 MLPs로 구성되어 있음
     * Mamba는 통신을 위해 제어 이론에서 영감을 받은 SSM을 사용하고, 계산을 위해 MLP 스타일의 투영을 유지함

Mamba 동기 부여 - Temple Run으로 돌아가기

     * 상태(state) 는 시스템의 미래 행동을 결정하는 데 필요한 변수들을 의미함
     * 상태는 과거에 대해 알아야 할 모든 것을 압축한 것으로, 마르코프 결정 과정으로 변환됨

이산화 - 양자화된 세계에서 살아가기

     * 연속 시간 미분 방정식을 이산 시간 차분 방정식으로 변환하는 과정을 이산화(discretisation) 라고 함
     * Mamba는 제로-오더 홀드(ZOH) 이산화를 사용함

SSM 행렬 이해하기

     * A, B, C, D 행렬은 상태 전이, 새 입력을 상태에 매핑, 상태를 SSM 출력에 매핑, 새 입력을 출력에 통과시키는 역할을 함

효율성 대 효과성: Attention is Focus, Selectivity is Prioritisation (주의는 집중이고, 선택성은 우선 순위 설정)

     * 트랜스포머는 매우 효과적 이지만 효율적 이지는 않음
     * Mamba 아키텍처는 효율성과 효과성의 파레토 최전선을 밀어내는 솔루션을 제공함

선택 메커니즘

     * 선택성(Selectivity) 은 각 토큰을 그것의 필요에 맞게 상태로 변환할 수 있게 함
     * Mamba는 A, B, C 행렬을 x의 함수로 만들어 정적이 아닌 컨텍스트 의존적으로 함

선택성의 문제점

     * 선택 메커니즘을 적용하면 비선택적 SSM보다 계산이 느려질 수 있음
     * 하드웨어 최적화를 통해 Mamba는 비슷한 크기의 트랜스포머보다 빠르게 실행될 수 있음

기계 학습과 정치 경제학 - 상태의 크기는 얼마나 커야 하는가?

     * 시퀀스 모델의 효율성 대 효과성 트레이드오프는 상태를 얼마나 잘 압축하는지에 의해 특징지어짐
     * 상태 표현이 중요하며, 상태를 선택적이고 동적으로 압축하는 것이 핵심임

트랜스포머 대 Mamba의 정보 흐름

     * 트랜스포머는 훈련 데이터와 컨텍스트 데이터를 통해 학습함
     * Mamba는 훈련 데이터와 컨텍스트 데이터가 압축/필터링되어 접근 가능함

새로운 프롬프팅 패러다임으로서의 상태 교체

     * Mamba와 같은 모델을 사용하면 전문 데이터를 통해 생성된 상태 라이브러리를 공유할 수 있음
     * 상태는 백프롭 없이 추론 시간에 무한한 컨텍스트 학습을 적용할 수 있음

Mamba와 메커니즘 해석 가능성

     * Mamba의 해석 가능성은 토큰 간의 정보 이동을 이해하는 것에 초점을 맞춤

Mamba와 SSM이 다음에 할 일

     * Mamba와 같은 모델은 매우 긴 컨텍스트와 장기 기억이 필요한 시나리오에서 뛰어난 성능을 발휘할 가능성이 있음

에이전트와 AI 안전성

     * 언어 모델은 본질적으로 안전하지만, 장기적인 시퀀스 추론의 가능성은 에이전트 기반 AI 안전성의 중요성을 되살림

트랜스포머와 Mamba의 최고의 협업

     * Mamba의 긴 컨텍스트와 트랜스포머의 짧은 시퀀스에 대한 고해상도를 결합하는 것이 가치가 있음

GN⁺의 의견

     * Mamba는 트랜스포머의 병목 현상을 해결하고 긴 시퀀스 처리에 효과적인 대안을 제시함
     * 이 기술은 특히 의료, 유전학, 자연어 처리 등 데이터의 긴 시퀀스가 중요한 분야에서 유용할 수 있음
     * Mamba의 선택 메커니즘이 실제로 효과적인지에 대한 추가 연구가 필요함
     * Mamba의 선택성은 트랜스포머가 제공하는 높은 정확도와 효율성 사이의 균형을 찾는 데 도움이 될 수 있음
"
"https://news.hada.io/topic?id=13469","월마트, 광고 촉진을 위한 고객 데이터 확보 목적으로 TV 브랜드 "Vizio" 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            월마트, 광고 촉진을 위한 고객 데이터 확보 목적으로 TV 브랜드 ""Vizio"" 인수

     * Walmart가 약 23억 달러에 Vizio를 인수하는 계약을 발표
     * Vizio는 저가형 TV로 잘 알려져 있으나, Walmart에게는 광고 사업과 사용자 데이터 접근성이 진정한 가치임
     * 인수는 규제 승인과 추가적인 마감 조건을 거쳐 올여름에 완료될 것으로 예상

광고 기회

     * Walmart는 Vizio의 최대 고객으로, Vizio 인수는 예산 TV 시장의 확대가 아닌 Walmart Connect 광고 사업 강화를 목적으로 함
     * Vizio는 SmartCast OS와 광고가 포함된 무료 콘텐츠를 통해 광고 판매로 수익을 창출
     * Vizio의 Platform+ 광고 사업은 500개 이상의 직접 광고주 관계를 가지고 있으며, SmartCast 사용자는 2018년 이후 400% 증가하여 1800만 활성 계정을 보유

고객 데이터에 대한 갈망

     * Platform+를 소유하게 되면서 Walmart에 TV 사용자에 대한 새로운 정보를 제공할 것
     * Vizio TV에서 수집된 데이터는 Walmart가 이미 수집하고 있는 쇼핑객 데이터와 결합될 예정
     * Walmart는 이 고객 데이터를 활용하여 타겟 광고 공간 판매 및 광고 결과 추적에 도움을 줄 계획

Vizio TV의 품질 저하 가능성

     * 광고 사업 확장을 추구하는 회사의 관점에서는 Vizio 인수가 합리적임
     * 그러나 사용자 관점에서는 Vizio TV가 광고 판매와 측정에 너무 중점을 둘 위험이 있음
     * 이미 Vizio의 사업은 TV 판매보다 광고 판매에 더 중점을 두고 있으며, 광고 중심의 인수는 Vizio 하드웨어 개선에 대한 관심을 줄일 수 있음
"
"https://news.hada.io/topic?id=13547","자체 결제 시스템 구축의 어려움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           자체 결제 시스템 구축의 어려움

청구 시스템 구축의 14가지 고통

     * 청구 및 수익 시스템은 비즈니스를 수익화할 계획이 있다면 필수적임.
     * 청구 시스템은 복잡하며, 재무, 제품, 경험, 고객 지원, 고객, 법률, 준수, 영업 등 여러 부서와 연결되어 있음.
     * 청구 시스템은 서로 긴밀하게 연결되어 있어, 하나가 고장 나면 시스템 전체가 쉽게 마비될 수 있음.

세 가지 패턴

     * 청구 시스템에는 자체 개발, 완전한 제3자 시스템, 혼합형 시스템의 세 가지 패턴이 있음.
     * 각각의 패턴은 고유의 장단점을 가지고 있음.

자체 개발 / 혼합형 / 제3자 시스템

     * 완전 자체 개발된 솔루션은 완전한 제어와 맞춤 설정이 가능하며 외부 수수료를 지불하지 않음.
     * 혼합형 솔루션은 내부 청구 엔진과 제3자 결제 처리, 세금 준수 등을 결합함.
     * 제3자 시스템은 모든 것을 처리하지만, 제어를 상실하고 비용이 많이 들 수 있음.

청구 및 수익화 팀의 고민

     * 청구 또는 수익화 팀은 다양한 책임을 가지고 있어, 경험 많은 전문가들에게도 이해하기 어려움.
     * 보안이나 날짜 처리와 마찬가지로 청구 시스템도 처음부터 스스로 구축해서는 안 됨.

청구 및 수익화의 14가지 문제

     * 청구 시스템을 자체 구축할 때 발생하는 다양한 문제들을 복잡도 순으로 나열함.
     * 멱등성, 날짜 처리, 비례 배분 및 잔여 처리, 사용량 측정, 청구서 형식, 복잡한 고객 계층 구조 등이 문제에 포함됨.
     * 이러한 문제들은 비즈니스 규모가 커짐에 따라 더 복잡해질 수 있음.

어려운 이유

     * 일부 문제는 예상보다 자주 변경되며, 일부는 한 번 설정하면 다시 건드릴 필요가 없음.
     * 세계 각국의 세금 규칙이 자주 변경되며, 고객의 실수로 인한 문제는 지속적으로 발생함.

해야 할 일

     * 가능한 많은 문제를 제3자에게 맡겨야 함.
     * Chargebee, Solvimon, Stripe, Recurly 등과 같은 서비스를 사용하여 청구를 관리하도록 함.
     * Stigg와 같은 서비스를 사용하여 가격 책정 페이지, 실험, 권한 부여를 관리함.
     * ERP를 사용하여 수익 인식/회계 처리를 함.

GN⁺의 의견

     * 청구 시스템은 비즈니스의 중요한 부분이지만, 복잡성과 지속적인 유지 관리 필요성으로 인해 많은 기업들이 제3자 솔루션을 선호함.
     * 청구 시스템을 자체 개발할 경우, 기업은 세금 규정, 고객 계층 구조, 사용량 측정 등 다양한 요소들을 고려해야 하며, 이는 시간과 자원이 많이 소모될 수 있음.
     * 제3자 솔루션을 사용할 때는 비용과 제어의 상실을 고려해야 하지만, 대부분의 경우 시간과 자원을 절약할 수 있음.
     * 기업이 성장하고 규모가 커짐에 따라 청구 시스템의 복잡성도 증가하므로, 초기 단계에서부터 확장성을 고려한 솔루션 선택이 중요함.
     * 청구 시스템에 대한 이해도가 높은 전문가와 협력하거나, 업계에서 검증된 솔루션을 선택하는 것이 장기적으로 비즈니스에 도움이 될 수 있음.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 청구 시스템 구축의 어려움에 대한 접근 방식에 대해 의문을 제기함.
          + 청구 시스템은 복잡하지만, Stripe와 같은 기존 솔루션을 사용하지 못하는 경우(예: 베네수엘라 기업) 자체 시스템 구축이 필요함.
          + 지식, 접근 방식, 프로그래밍 패턴 등을 한 곳에 모으는 것이 좋을 것이라는 의견 제시.
     * 두 번째 댓글 요약:
          + 청구 시스템에 대한 결정을 내려야 하는 사람들에게 유용한 기사라고 평가함.
          + 청구와 크레딧을 시스템에서 가능한 한 분리하는 것을 선호하는 개인적인 의견을 공유함.
     * 세 번째 댓글 요약:
          + 청구 시스템의 복잡성에 대한 경험담을 공유하며, 청구 세계가 예측 불가능하다고 언급함.
     * 네 번째 댓글 요약:
          + killbill.io 공동 창립자로서, 청구 시스템 구축의 복잡성과 이에 따른 다양한 부서의 영향을 설명함.
          + 청구 시스템이 전체적인 시스템과 통합되어야 하며, 이를 위해 충분한 지식과 동기가 있는 팀이 필요하다고 조언함.
     * 다섯 번째 댓글 요약:
          + 제휴 판매 시스템 구축의 복잡성과 점진적인 구축 가능성에 대해 논의함.
     * 여섯 번째 댓글 요약:
          + 회계 마감과 현금 이동 회계에 대한 문제점을 지적하며, 이러한 문제들이 회계 부서와 밀접하게 연관되어 있다고 언급함.
     * 일곱 번째 댓글 요약:
          + 청구 시스템의 모든 기능이 필요하지 않으며, 비즈니스 성장에 따라 점진적으로 구축할 수 있다는 의견을 제시함.
     * 여덟 번째 댓글 요약:
          + 제품 권한 부여(entitlements)에 대한 다양한 접근 방식과 사용하는 시스템에 대한 질문을 던짐.
     * 아홉 번째 댓글 요약:
          + 첫 번째 직장 경험을 공유하며, PCI 준수와 관련된 복잡성 때문에 다시는 청구 시스템 작업을 하고 싶지 않다는 개인적인 견해를 표현함.
     * 열 번째 댓글 요약:
          + 특정 시스템(X)의 복잡성 때문에 직접 구축하지 말고 완성된 솔루션을 사용해야 한다는 주장에 대해 의문을 제기함.
          + 자신의 경우에는 필요한 복잡성의 부분집합만 다루면 되므로, 자체적으로 더 간단한 솔루션을 구축할 수 있다고 주장함.
"
"https://news.hada.io/topic?id=13425","애플 워치 울트라 2 해킹 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           애플 워치 울트라 2 해킹 사건

스마트워치 해킹 사건

     * 사용자 Marcus-II의 아내의 Ultra 2 스마트워치가 2월 2일 오후 4시 30분경 해킹당함.
     * 스마트워치는 모바일 서비스를 사용 중이었으며, 와이파이를 통한 접근은 아닌 것으로 추정됨.
     * 해킹 사건 직전, 스팸으로 의심되는 전화가 걸려옴. 전화는 부채에 대한 금융 지원을 제공한다고 주장했으나 즉시 끊음.
     * 전화 이후 스마트워치가 스스로 움직이기 시작하고, 연결된 아이폰에 핑을 보냄.
     * 스마트워치를 벗은 후 다른 코드를 사용하여 로그인을 시도했으나 실패하고 잠김.
     * 전원을 끄려고 시도했으나 오른쪽 상단의 전원 버튼이 작동하지 않음.
     * 결국, 크라운을 누르고 옆면 버튼을 길게 눌러 리셋 옵션을 표시하여 리셋에 성공함.
     * 해킹되지 않은 것으로 보이는 다른 기기를 사용하여 모든 것을 신중하게 재설정 중임.
     * 이 사건에 대한 정보와 조치 및 예방책에 대한 조언을 요청함.

GN⁺의 의견

     * 이 사건은 스마트 기기의 보안 취약성을 보여주는 사례로, 사용자들에게 보안에 대한 경각심을 일깨워줌.
     * 스마트워치와 같은 웨어러블 기기가 해킹될 수 있다는 사실은 많은 사용자들에게 새로운 정보일 수 있음.
     * 이러한 사례를 통해 사용자들은 자신의 기기를 보호하기 위한 추가적인 보안 조치를 고려할 필요성을 느낄 수 있음.

        Hacker News 의견

     * ""해킹""이라는 단어가 젊은이들 사이에서 너무 가볍게 사용되고 있음에 대한 의문 제기
          + 인스타그램 계정이 해킹당했다는 등의 말이 흔하지만, 실제 해킹인지 아니면 피싱, 비밀번호 분실, 이메일 잠김, 계정 정지 등 다른 이유인지 궁금함.
          + 해커가 ""우리가 통제하고 있다""고 쓴 경우에 대한 회의적인 시각 표현.
     * ""우리가 통제하고 있다""는 메시지에 대한 의심 표현
          + 이 메시지가 나타난 것이 실제 해킹이 아니라 화면 오작동이나 착각, 혹은 완전히 날조된 이야기일 가능성에 대한 추측.
          + 이러한 주장에는 더 확실한 증거가 필요함을 강조.
     * 문제의 비디오 링크 공유
          + 문제가 실제 해킹이 아니라 '고스트 터치' 문제일 가능성을 제시.
     * 해킹 픽션처럼 들리는 ""우리가 통제하고 있다""는 메시지에 대한 비판
          + 실제 공격자가 이런 행동을 할 이유에 대한 의문 제기.
     * 고스트 터치 문제일 가능성에 대한 의견
          + 관련 기사 링크 제공.
     * 애플 제품에 대한 신뢰와 다른 제조업체 제품에 대한 반응 차이에 대한 의문 제기
     * ""우리가 통제하고 있다""는 메시지가 가짜임을 나타내는 명백한 신호라는 의견
          + 해킹 후 피해자와의 소통은 중요하지만, 필요한 정보를 빠르게 추출하는 것이 더 중요함을 설명.
     * 문제가 공장 테스트 스크립트가 실수로 실행되는 것일 수 있다는 창의적인 설명
          + 제조 과정의 마지막 단계에서 모든 기능이 정상적으로 작동하는지 확인하기 위해 사용되는 스크립트일 수 있음.
          + 하드웨어 검증 전문가들의 유머 감각을 언급하며, ""우리가 통제하고 있다""는 메시지가 스크립트에 포함될 수도 있다는 의견(비록 이 부분에 대한 의심 표현).
     * 애플이 현재 조사 중인 화면 고스트 문제일 가능성이 매우 높다는 의견
          + 관련 기사 링크 제공.
     * 문제가 아이폰으로 애플 워치를 제어하는 접근성 기능과 관련이 있을 수 있다는 의견
          + 관련 애플 지원 문서 링크 제공.
"
"https://news.hada.io/topic?id=13519","확실한 환상: 대규모 언어 모델의 타고난 한계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       확실한 환상: 대규모 언어 모델의 타고난 한계

대규모 언어 모델의 본질적 한계: 환각은 불가피함

     * 대규모 언어 모델(LLMs)에서의 환각 현상은 널리 알려진 중대한 단점임.
     * 많은 연구가 환각의 정도를 줄이려 시도했으나, 대부분 경험적인 방법에 불과해 환각을 완전히 없앨 수 있는지에 대한 근본적인 질문에 답하지 못함.
     * 본 논문에서는 문제를 형식화하고 LLMs에서 환각을 제거하는 것이 불가능함을 보임.

형식적 세계에서의 환각 정의

     * 환각을 계산 가능한 LLM과 계산 가능한 기준 진리 함수 사이의 불일치로 정의하는 형식적 세계를 정의함.
     * 학습 이론에서 얻은 결과를 활용하여 LLMs가 모든 계산 가능한 함수를 학습할 수 없으며, 따라서 항상 환각을 경험할 것임을 보임.

현실 세계에서의 환각 불가피성

     * 형식적 세계는 훨씬 더 복잡한 실제 세계의 일부이므로, 실제 세계의 LLMs에서도 환각은 불가피함.
     * 증명 가능한 시간 복잡도에 의해 제약받는 실제 세계 LLMs에 대해, 환각이 발생하기 쉬운 작업을 기술하고 이를 경험적으로 검증함.

환각 완화 메커니즘과 실용적 함의

     * 형식적 세계 프레임워크를 사용하여 기존의 환각 완화 메커니즘의 가능성과 효과를 논의함.
     * LLMs의 안전한 배치에 대한 실용적 함의를 논의함.

GN⁺의 의견

     * 이 연구는 대규모 언어 모델의 핵심적인 문제인 '환각' 현상에 대한 근본적인 이해를 제공함.
     * 환각 현상이 불가피하다는 이론적 증명은 LLMs의 설계와 개선에 있어 새로운 방향을 제시할 수 있음.
     * 안전하고 신뢰할 수 있는 인공지능 시스템을 구축하기 위한 논의에 중요한 기여를 할 수 있으며, 이는 기술 발전에 있어 중요한 이정표가 될 수 있음.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 이 논문의 핵심 주장은 P ≠ NP이기 때문에 LLM(대규모 언어 모델)이 NP-완전 문제에 대해 허구의 답변을 만들어낼 것이라는 것임.
          + 이는 수학, 컴퓨터 과학, 언어에 대한 흥미로운 철학적 질문이지만, 일반적인 'LLM 환각' 개념과는 다른 형식적인 개념을 사용함.
          + 형식적인 세계가 자연 언어의 세계의 부분집합이라는 주장도 흥미로움. 인간은 NP-완전 문제를 해결하지 못하지만, 자연 언어에서는 높은 숙련도를 보임.
     * 두 번째 댓글 요약:
          + 추상만 읽었지만, 형식적인 접근이 LLM이 '모른다'고 대답하는 빈도를 높이는 실용적인 문제에 도움이 될지에 대해 회의적임.
          + 이는 불완전성 정리와 비슷하며, LLM이 모든 것을 알 필요는 없으나 '모른다'고 대답하는 문제가 중요함.
     * 세 번째 댓글 요약:
          + LLM에게 허구를 만들지 않도록 질문을 매우 신중하게 해야 함.
          + 이러한 AI는 '예스맨'과 같아서, 진실 여부와 상관없이 당신을 기쁘게 하려고 함.
          + 이런 사람들과 일하기는 매우 어려움. 약속한 프로젝트를 제대로 수행할지, 가능한지 항상 확인해야 함.
     * 네 번째 댓글 요약:
          + 소설과 이야기 쓰기는 환각의 한 형태임.
          + AI는 논리적 기계와 환각을 만들어내는 두 극단을 달성함.
          + 목표는 두 기능을 동시에 수행하고 구분할 수 있는 기계를 만드는 것임.
          + 환각은 중요하지만, 컴퓨터가 환각 중임을 자각하는 것이 핵심임.
     * 다섯 번째 댓글 요약:
          + 창의성이 좋다면 '창의성'이라 부르고, 나쁘다면 '환각'이라 부름.
          + 이는 버그나 한계가 아니라 기능임.
     * 여섯 번째 댓글 요약:
          + '환각'이라는 용어는 현실에 존재하지 않는 것들을 인지하는 것을 의미하기 때문에, 현실과 잘 매핑되지 않는 문구를 생성하는 현상을 설명하기에 부적절한 용어임.
     * 일곱 번째 댓글 요약:
          + AI에 대한 과대평가가 이제 '현실적인 단계'로 넘어가고 있음.
          + 최근에는 정렬 문제에 대한 열광적인 포스트를 보지 못함.
     * 여덟 번째 댓글 요약:
          + LLM을 문자열의 확률 모델로 정의하며, 이는 인간 지능을 포함할 만큼 넓은 정의임.
          + 따라서 이들의 발견은 인간에게도 동일하게 적용될 수 있음.
     * 아홉 번째 댓글 요약:
          + 환각을 계산 가능한 LLM과 계산 가능한 기준 진리 함수 사이의 불일치로 정의함.
          + 이는 단순히 부정확함이나 날조임.
          + 환각이라는 용어는 이 프로그램들이 지능적이라는 생각에 부응함.
     * 열 번째 댓글 요약:
          + 환각을 계산 가능한 LLM과 계산 가능한 기준 진리 함수 사이의 불일치로 정의함.
          + 이 정의를 사용하면 '환각은 불가피하다'는 제목의 문장을 쉽게 반증할 수 있음.
          + 입력 컨텍스트 길이를 한 바이트로 고정하고, LLM이 'A'에 대해서만 '예'라고 대답하도록 훈련함.
          + 기준 진리 함수를 'A' 입력에 대한 정확한 출력이 '예'이고 다른 모든 입력에 대한 정확한 출력이 '아니오'라고 정의함.
          + 이 LLM은 모든 가능한 입력에 대해 출력이 기준 진리 함수와 일치함을 완전히 검증했으므로 결코 환각하지 않음.
          + 입력 컨텍스트 크기와 기준 진리 테이블의 항목 수를 증가시키는 것이 가능하며, 어느 단계에서도 환각이 '불가피'해지지 않음.
"
"https://news.hada.io/topic?id=13496","저는 제 ThinkPad를 프로그래밍 가능한 USB 장치로 변환했습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                저는 제 ThinkPad를 프로그래밍 가능한 USB 장치로 변환했습니다.

ThinkPad의 숨겨진 기능 잠금 해제: USB 장치 에뮬레이션

     * ThinkPad X1 Carbon 6세대 노트북을 프로그래밍 가능한 USB 장치로 변환하는 방법을 발견함.
     * xDCI 컨트롤러를 활성화하여 임의의 USB 장치(키보드, 저장 드라이브 등)를 에뮬레이트할 수 있게 됨.
     * RawGadget과 syzkaller를 활용하여 USB 호스트를 퍼징하거나 Facedancer를 실행할 수 있음.
     * 이 모든 작업을 외부 하드웨어 없이 수행할 수 있음.

소개

     * Raw Gadget은 매우 사용자 정의 가능한 USB 장치를 에뮬레이트하기 위한 리눅스 커널 모듈임.
     * USB 장치를 에뮬레이트하기 위해서는 USB Device Controller(UDC)라는 특별한 하드웨어 구성 요소가 필요함.
     * 일반적으로 PC에는 UDC가 없으며, Raspberry Pi와 같은 싱글 보드 컴퓨터에 내장되어 있음.

조사

     * xHCI 컨트롤러와 관련된 리눅스 커널 코드를 조사하여 xHCI 장치가 역할 전환을 지원하는 것을 발견함.
     * 온라인 검색을 통해 xHCI 장치의 역할 전환에 대한 논의를 찾아냄.
     * ACPI를 확인하여 xDCI가 ACPI에서 활성화되어 있는지 확인함.

xDCI 활성화

     * BIOS 설정에서 xDCI 관련 설정을 찾지 못함.
     * BIOS 이미지를 직접 확인하여 xDCI 관련 설정이 숨겨져 있음을 발견함.

xDCI 사용

     * BIOS의 Advanced 설정을 통해 xDCI를 활성화함.
     * xDCI 장치가 lspci에 나타나는 것을 확인함.

요약

     * ThinkPad X1 Carbon 6세대 노트북에 숨겨진 USB 장치 컨트롤러 기능을 활성화하는 방법을 발견함.
     * 이를 통해 노트북을 다양한 USB 장치로 에뮬레이트할 수 있게 됨.

후기

     * xDCI 활성화를 통해 노트북의 새로운 사용 가능성을 탐색함.

  GN⁺의 의견

    1. 이 기사는 ThinkPad 노트북의 숨겨진 기능을 활성화하여 USB 장치를 에뮬레이트하는 방법을 제공함으로써, 하드웨어 해킹과 사용자 정의 가능성의 새로운 영역을 열어줌.
    2. 기존에는 별도의 하드웨어가 필요했던 작업을 노트북 하나로 수행할 수 있게 되어, 개발자와 연구자들에게 큰 도움이 될 수 있음.
    3. 이 글은 기술적 호기심을 가진 사람들에게 흥미로운 도전 과제를 제시하며, 기존 기기의 잠재력을 최대한 활용하는 방법을 탐색하는 데 도움을 줌.

        Hacker News 의견

     * 노트북을 다른 컴퓨터의 키보드와 모니터로 사용할 수 없는 이유에 대해 궁금해하는 의견이 있음. 머리 없는 기계에 유지보수를 할 때 이미 노트북이 키보드와 모니터 역할을 하고 있는데 새로 구입하는 것이 어리석게 느껴짐.
     * 스마트 TV가 USB 스틱에 있는 파일로 펌웨어 업데이트를 받는 사례를 회상하는 댓글이 있음. USB 저장 장치를 가장한 장치가 제조사 펌웨어 파일을 처음에 보내고, 두 번째로 비공식 펌웨어를 보내는 방식임.
     * NAS 서버를 활용하려는 시도에 대한 흥미로운 논의가 있음. NAS 저장소를 PS5와 Xbox에 노출시키는 방법을 연구했으며, iSCSI나 NFS를 통해 NAS 공유를 마운트하고 g_mass_storage 모듈을 사용해 USB 호스트에 저장소를 노출하는 방법이 가능함을 발견함. 그러나 대역폭이 시스템에 제공하는 속도 향상이 크지 않아 주요 장애물이 됨.
     * 라즈베리 파이를 사용하여 HDI를 에뮬레이션하려는 시도에 대한 댓글이 있음. 윈도우 프로세스에 키 입력을 보내는 기존 방법이 수정 키를 보낼 때 문제가 발생하여, 다른 방법을 모색하는 과정을 설명함.
     * 네트워크 없이 Synergy나 Mouse Without Borders와 같은 설정을 USB 케이블만으로 구현할 수 있다는 사실에 대해 희망을 갖게 되는 댓글이 있음. 이는 동시에 여러 컴퓨터를 운영해야 하는 사람들에게 유용함.
     * USB-C 케이블만으로 두 기계 간에 10Gbps 연결을 시도하려는 댓글이 있음. 대부분의 라이젠 보드가 여전히 썬더볼트를 지원하지 않으며, ""이중 역할"" USB 컨트롤러가 드물다는 점을 지적함. USB 3.2/4.0에서도 가능하지만 지원이 불안정함을 언급함.
     * PC를 USB 장치로 사용할 수 있는 능력이 재미있는 가능성을 열어준다는 댓글이 있음. 하지만 필요한 xDCI 옵션이 하드웨어에는 존재하지만 펌웨어 해킹을 통해서만 접근할 수 있음을 안타까워함.
     * 레노버가 한 ThinkPad를 다른 ThinkPad로 디버깅하는 데 이 기술을 사용하고 있는지 궁금해하는 댓글이 있음. 인텔의 디버그 기술에 대한 링크와 관련 유튜브 비디오 링크가 포함됨.
     * 라즈베리 파이를 다루는 것이 번거롭다고 느끼는 댓글이 있음. USB OTG를 구성하고, SSH를 통해 마운트와 명령을 설정할 수 있음을 제안함. 자신의 장치를 이해하고 커널을 읽으며 문제를 스스로 해결하려는 노력을 격려하는 내용임.
     * xDCI 스위치를 BIOS에서 활성화했지만 UDC 장치 노드가 나타나지 않아 더 깊이 파고들어야 한다는 댓글이 있음. 원 게시글에서 영감을 받아 추가 조사가 필요함을 언급함.
"
"https://news.hada.io/topic?id=13467","젬마(Gemma) - 구글의 최첨단 오픈 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       젬마(Gemma) - 구글의 최첨단 오픈 모델

     * 구글은 모든 사람을 위한 유용한 AI를 만드는 데 믿음을 가지고 있으며, Transformers, TensorFlow, BERT, T5, JAX, AlphaFold, AlphaCode 등과 같은 오픈 커뮤니티에 혁신을 기여해왔음
     * Gemma는 Gemini 모델을 만드는 데 사용된 것과 동일한 연구와 기술을 바탕으로 제작된 경량의 최첨단 오픈 모델군
          + 구글 DeepMind 및 다른 팀들이 개발하였으며, 라틴어로 '보석'을 의미하는 'gemma' 에서 영감을 받았음
     * 오늘부터 전 세계적으로 사용 가능하며, 모델 가중치, 개발자 혁신을 지원하는 도구, 협업 촉진 및 Gemma 모델의 책임 있는 사용을 안내하는 도구들을 함께 제공함
     * Gemini와 기술 및 인프라 구성 요소를 공유하여 Gemma 2B와 7B가 다른 오픈 모델과 비교하여 크기에 비해 최고의 성능을 달성
     * 개발자의 랩톱이나 데스크톱 컴퓨터에서 직접 실행할 수 있으며, 주요 벤치마크에서 훨씬 큰 모델들을 능가하면서도 안전하고 책임 있는 결과물을 제공하기 위한 엄격한 기준을 준수함
     * Native Keras 3.0을 통해 JAX, PyTorch, TensorFlow 등 모든 주요 프레임워크에 걸쳐 추론 및 SFT(감독 미세 조정)를 위한 툴체인을 제공
     * Colab 및 Kaggle 노트북과 Hugging Face , MaxText , NVIDIA NeMo 및 TensorRT-LLM 과 같은 인기 도구와의 통합을 통해 Gemma를 쉽게 시작할수 있음
     * 사전 학습되고 인스트럭션 튜닝된 Gemma 모델은 Vertex AI 및 Google Kubernetes Engine (GKE) 에 쉽게 배포하여 노트북, 워크스테이션 또는 Google Cloud에서 실행할수 있음
     * NVIDIA GPU 및 Google Cloud TPU를 포함하여 여러 AI 하드웨어 플랫폼에 대한 최적화를 통해 업계 최고의 성능을 보장
     * 사용 약관에 따라 규모에 관계없이 모든 조직에서 상업적 사용 및 배포를 허용

Responsible by design

     * Gemma는 AI 원칙을 최우선으로 설계되었으며, 훈련 세트에서 개인 정보 및 기타 민감한 데이터를 필터링하기 위해 자동화된 기술을 사용
     * 또한, 책임 있는 행동과 일치하도록 지시 튜닝된 모델을 위해 인간 피드백에서의 강화 학습(RLHF)을 광범위하게 사용
     * Gemma 모델의 위험 프로필을 이해하고 줄이기 위해 수동 레드팀, 자동 적대적 테스트, 위험한 활동에 대한 모델 능력 평가 등의 강력한 평가를 수행

프레임워크, 도구 및 하드웨어 전반에 걸쳐 최적화

     * Gemma 모델은 특정 애플리케이션 요구 사항에 맞게 자체 데이터에 대해 미세 조정할 수 있으며, 다양한 도구 및 시스템을 지원
     * 멀티 프레임워크 도구: Keras 3.0, 네이티브 PyTorch, JAX 및 Hugging Face Transformers등 선호하는 프레임워크 이용 가능. 레퍼런스 구현체 제공
     * 크로스 디바이스 호환성 : 랩톱, 데스크톱, IoT, 모바일 및 클라우드를 포함한 인기 있는 디바이스에서 실행 가능
     * 최첨단 하드웨어 플랫폼 : NVIDIA와 파트너십을 통해 데이터 센터부터 클라우드, 로컬 RTX AI PC에 이르기까지 NVIDIA GPU를 위한 최적화로 업계 최고의 성능과 최첨단 기술과의 통합을 보장
     * 구글 클라우드에서 최적화 : Vertex AI를 사용하여 광범위한 MLOps 도구 세트와 다양한 튜닝 옵션을 제공하며, 내장된 추론 최적화를 사용한 원클릭 배포가 가능함

연구 및 개발을 위한 무료 크레딧

     * Gemma는 AI 혁신을 주도하는 개발자 및 연구자 커뮤니티를 위해 구축되었으며, Kaggle에서의 무료 접근, Colab 노트북의 무료 계층, 첫 번째 Google Cloud 사용자를 위한 $300 크레딧을 사용하여 오늘부터 작업을 시작할 수 있음
     * 연구자들은 자신의 프로젝트를 가속화하기 위해 최대 $500,000의 Google Cloud 크레딧을 신청 가능

   이제 열린 AI만 닫혀있는 상황이네요

  Hacker News 의견

     * Google의 Gemma 이용 약관에 주목할 점은 사용자가 Gemma의 최신 버전을 사용하기 위해 합리적인 노력을 기울여야 한다는 조항이 있음. 이는 자체 모델을 운영할 때 모델 업데이트로 인해 신중하게 테스트한 프롬프트가 손상될 위험으로부터 보호받을 수 있는 큰 이점을 무효화할 수 있어, 특히 그 조항에 대해 만족스럽지 않음.
     * Gemma 7B의 벤치마크 결과가 Mistral 7B와 비슷한 수준으로 나타남. MMLU, HellaSwag, HumanEval 등의 테스트에서 Gemma 7B의 성능이 Mistral 7B와 비교해 경쟁력이 있음을 보여줌.
     * Gemma 모델은 몇 가지 특이점을 가지고 있음:
          + feedforward hidden size가 d_model의 16배로, 대부분의 모델이 4배인 것과 다름.
          + 어휘 크기가 Mistral의 32K에 비해 10배 많은 256K임.
          + 훈련 토큰 수가 Llama2의 2T에 비해 3배 많은 6T임.
          + 이외에도 MQA, RoPE, RMSNorm과 같은 클래식 트랜스포머 변형을 사용함.
          + 모델이 빠르게 훈련될 수 있었던 배치 크기가 얼마였는지에 대한 질문이 있음.
     * ""aligment"" (이데올로기적 미세조정을 의미하는 듯) 없이 모델을 제공받을 수 있는지에 대한 의문을 제기함. Gemini 모델의 답변이 이데올로기적 미세조정으로 인해 쓸모없어진 경우가 많다고 지적함.
     * Google의 모델에 대해 신뢰할 수 없다는 개인적인 의견. 일본의 헤이안 시대에 대한 질문에 모델이 전혀 말이 안 되는 정보를 제공했으며, 그 오류가 너무 명백해서 농담이나 패러디 같았다고 비판함. Llama 모델이 훨씬 나은 성능을 보였다고 언급
     * Gemma 팀이 댓글 섹션에 참여하여 질문에 답변하는 것이 칭찬할 만하다는 긍정적인 의견을 표현함.
     * Gemma 모델이 세계에서 가장 높은 인공 구조물과 세계에서 가장 부유한 국가, 피트당 센티미터 수에 대한 잘못된 정보를 제공함. 이러한 오류는 모델의 정확성에 의문을 제기함.
     * Gemma-7B 모델이 Vectara HHEM 리더보드에 등재되어 100%의 답변률과 7.5%의 환각률을 기록함. 7B 파라미터를 가진 모델로서는 상당히 좋은 성능임.
     * Gemma 모델의 인상적인 벤치마크에 대해 언급하며, 심지어 2B 모델도 꽤 괜찮아 보인다고 평가함. 주말을 이 모델을 탐색하는 데 할애할 것이라는 기대감을 표현
     * 5년 전에는 OpenAI, Meta, Google 중 누가 AI에 대해 가장 개방적일 것이라고 생각하는지 물었다면 대부분 OpenAI를 선택했을 것이라고 언급함. 그러나 현재 Meta와 Google이라는 수조 달러 규모의 기업들이 상업적으로 사용할 수 있는 강력한 오픈 모델을 출시하고 있다는 점에서 역설적이라고 평가함.
"
"https://news.hada.io/topic?id=13483","GPTScript - OpenAI LLM과의 상호작용을 자동화하는 새로운 스크립팅 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GPTScript - OpenAI LLM과의 상호작용을 자동화하는 새로운 스크립팅 언어

     * 궁극적인 목표는 완전한 자연어 기반 프로그래밍 환경을 만드는 것
     * 구문이 대부분 자연어이므로 배우고 사용하기가 매우 쉬움
     * bash, python과 같은 기존 스크립트 또는 외부 HTTP 서비스 호출과도 혼합하여 사용할 수 있음
     * 여러개의 도구로 구성되어 함수와 유사한 일련의 작업들을 수행
          + 함수와 비슷하지만 도구는 주로 자연어 프롬프트로 구현됨(명령이나 HTTP 호출로도 구현할 수 있음)
          + 도구의 상호 작용은 AI 모델에 의해 결정되며, 모델은 도구를 호출해야 하는지 여부와 전달할 인수를 결정
"
"https://news.hada.io/topic?id=13482","OpenLLMetry - LLM 어플리케이션을 위한 오픈소스 Observability","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            OpenLLMetry - LLM 어플리케이션을 위한 오픈소스 Observability

     * LLM 애플리케이션에 대한 완벽한 통합 가시성을 제공
     * 내부적으로 OpenTelemetry 기반이기 때문에 Datadog, New Relic, Grafana Tempo, Splunk 같은 기존 솔루션과도 연동 가능
     * Instrumentation 가능
          + LLM : OpenAI/Azure OpenAI, Anthropic, Cohre, HuggingFace, AWS Bedrock, Vertext AI, Replicate, IBM WatsonX
          + Vector DB: Chroma, Pinecone, Qdrant, Weaviate, Milvus
          + Frameworks: LangChain, LlamaIndex, Haystack, LiteLLM
     * JS/TS 버전용 OpenLLMetry-JS도 별도로 제공
"
"https://news.hada.io/topic?id=13535","북한 강제 노동 프로그램 내부 상황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          북한 강제 노동 프로그램 내부 상황

북한의 강제 노동 프로그램 내부

     * 중국 공장에서 일하는 북한 노동자들이 폭행과 성적 학대, 임금의 국가 몰수, 탈출 시도 시 ""흔적도 없이 살해될 것""이라는 위협을 겪고 있음.
     * 2023년 2월, 중국 단둥의 해산물 가공 회사인 Donggang Jinhui Foodstuff가 성공적인 한 해를 기념하는 파티를 열었으며, 북한 노동자들이 참석한 것으로 보임.
     * 이 회사는 북한 정부가 중국 공장에서 일하도록 보낸 노동자들을 사용하여 수익을 올리고 있으며, 이는 유엔 제재를 위반하는 행위임.

북한 노동자들의 현실

     * 북한 노동자들은 강제 노동 프로그램의 일환으로 중국의 다양한 산업에 투입되고 있으며, 이는 북한 정부의 비밀 기관인 Room 39가 관리함.
     * 이 프로그램을 통해 북한은 외화를 벌어들이고 있으며, 2012년에는 약 4만 명의 노동자를 중국에 파견하여 연간 최대 23억 달러를 벌어들였음.
     * 2017년 유엔 제재 이후에도 여전히 많은 북한 노동자들이 중국에서 일하고 있으며, 이들은 건설, 섬유, 소프트웨어 회사 등에서 일함.

노동자들의 증언

     * 여성 노동자들은 공장에서 감금 상태에서 폭력적인 근무 조건을 겪고 있으며, 매니저들에 의한 성폭력도 보고됨.
     * 노동자들은 탈출을 시도할 경우 심각한 처벌을 받을 것이라는 위협을 받고 있으며, 일부는 강제로 성매매를 하도록 강요받기도 함.
     * 이러한 조건들은 중국과 북한 정부 간의 협력으로 이루어지고 있으며, 중국 내에서 북한 노동자들의 존재는 공공연한 비밀임.

중국과 북한의 협력

     * 중국과 북한 정부는 해산물 회사와 같은 곳에서 일할 여성 노동자들을 선발하고 배치하는 데 협력함.
     * 노동자들은 중국에서 일할 기회를 얻기 위해 정치적 충성도를 검증받으며, 일부는 높은 이자율의 대출을 받아 중국으로 가는 비용을 지불함.
     * 중국 회사들은 북한 노동자들을 사용함으로써 비용을 절감할 수 있으며, 이들은 현지 직원보다 훨씬 적은 임금을 받음.

미국으로의 수출

     * 미국에서는 북한 노동자가 만든 상품의 수입을 금지하고 있지만, 이를 집행하는 것은 어려움.
     * 조사팀은 북한 노동자들이 일하는 것으로 보이는 공장들로부터 미국으로 수출된 해산물을 추적함.
     * 이러한 해산물은 Walmart, Giant, ShopRite 등의 미국 소매점과 주요 레스토랑 체인, 심지어 미국 군대와 공립학교의 식당에까지 공급됨.

GN⁺의 의견

     * 이 기사는 북한과 중국의 강제 노동 프로그램에 대한 심각한 인권 침해 문제를 드러내며, 국제 사회의 관심과 대응이 필요함을 시사함.
     * 강제 노동에 대한 국제적인 제재와 법적 조치가 있음에도 불구하고, 이를 회피하거나 무시하는 사례가 여전히 존재함을 보여줌.
     * 이러한 문제에 대한 보도는 투명성과 공급망 관리의 중요성을 강조하며, 소비자들에게 윤리적 소비의 필요성을 일깨움.
     * 기술적인 측면에서, 블록체인과 같은 기술을 활용하여 공급망의 투명성을 높이고 강제 노동과 같은 문제를 해결하기 위한 노력이 필요함.
     * 이 기사는 또한 북한 내부의 상황과 국제 사회의 대북 정책에 대한 이해를 높이는 데 기여함.

        Hacker News 의견

     * 놀라운 보도
          + 북한 내부와 공장의 소식통들이 가족의 안전을 위협받을 수 있는 상황에서도 정보를 제공한 것에 대한 위험은 이해하기 어려움.
          + 미국은 북한에 대한 제재를 종료해야 함. 북한 경제의 거의 모든 측면이 전면적인 금수 조치를 받고 있어 노동자들이 학대받는 것은 직접적인 결과임.
          + 북한은 핵무기를 보유한 국가이며, 이를 되돌릴 수 없음. 북한인들은 수십 년 동안 중국에서 일해왔고, 중국은 북한이 실패한 국가가 되는 것을 허용하지 않을 것임.
     * 수입 조건
          + 중국산 해산물을 수입하려면 외국 관리들이 조건을 검사할 수 있도록 하는 법이 필요함.
          + 간첩법이 다른 모니터링을 불가능하게 할 때, 이러한 회사들이 올바른 일을 할 것이라고 믿을 수 없음. 상세하고 무작위적인 검사를 허용하거나 수입이 차단되고 수익을 얻지 못하게 됨.
     * 노예 노동의 위험
          + 동남아시아에서 오는 많은 해산물이 노예 노동을 사용할 위험이 높음.
          + 이것이 자신에게 무엇을 의미하는지 스스로 결정해야 함.
     * 슬픈 현실
          + 훌륭한 보도. 슈퍼마켓에서 저렴한 해산물이 이러한 노동자들로부터 나올 수 있다는 사실을 상기시켜야 함.
     * 북한 내부의 혁명세력
          + 북한 내부에 혁명적인 세력이 있는지 진짜 궁금함.
          + 있어야 할 것 같은데, 우리는 그에 대해 듣지 못함.
          + 누군가 알고 있는지?
     * 수입 추적
          + 북한 노동자를 사용하는 것으로 보이는 공장에서 해산물을 수입하는 것을 추적하기 위해, 팀은 무역 데이터, 선적 계약, 식품 안전을 모니터링하기 위해 해산물 패키지에 찍힌 코드를 검토했음.
          + 2017년 이후, 이러한 공장 10곳이 미국의 70개 이상의 수입업체에 12만 톤 이상의 해산물을 배송했으며, 이는 Walmart, Giant, ShopRite, 온라인 식료품점 Weee! 등의 식료품점에 공급됨.
          + 이러한 상황이 어떻게 미국에 허용될 수 있는지. 무역 제재가 중간상인 쉘 회사를 통해 우회하는 관료적인 노란색 테이프인가? 이렇게 비인도적인 시설에서 준비된 음식을 모르고 구입했을 수도 있다는 사실에 완전히 혐오감을 느낌.
     * 수산물 라벨링 문제
          + 많은 수산물이 잘못 라벨링되고 공급망을 추적하기 어렵다는 이야기를 상기시킴.
     * 몽골의 광산
          + 몽골의 광산들도 북한 노동자를 사용하기 위한 거래를 함.
          + 외국 소유인지 확실하지 않지만, 외국 관리가 있음.
          + 약 3-4년 전에 이에 대해 공개적으로 말한 사람을 만남.
"
"https://news.hada.io/topic?id=13520","챗지피티에게 팁을 제공하면 더 나은 텍스트를 생성하게 되는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   챗지피티에게 팁을 제공하면 더 나은 텍스트를 생성하게 되는가?

ChatGPT에 팁을 제공하면 더 나은 텍스트를 생성하게 할까? 분석

     * ChatGPT 시스템 프롬프트의 힘을 시연한 이전 블로그 포스트에서 개발자들이 LLM의 ""페르소나""를 포함한 특별 규칙과 제약을 제어할 수 있음.
     * 시스템 프롬프트 내의 명령은 사용자 입력 프롬프트보다 훨씬 효과적이며, 개발자들에게 더 많은 통제력을 제공함.
     * 팁을 제공하는 데모는 논란이 되었으며, 팁의 효과를 정량화할 방법이 없다는 주장이 있었음.
     * 인공지능에게 더 나은 성능을 위한 인센티브를 제공하는 아이디어는 현대 컴퓨터 과학 이전부터 있었음.

  Generation Golf

     * 팁을 제공하면 GPT-4가 더 많은 설명을 제공하도록 만듦.
     * 새로운 테스트 제안: ChatGPT에게 정확히 200자의 텍스트를 생성하도록 지시.
     * LLM은 토큰화로 인해 셀 수 없거나 수학적 연산을 쉽게 수행할 수 없으므로, 이는 LLM에게 매우 어려운 문제임.
     * 사용자 입력으로 AI, Taylor Swift, McDonald's, beach volleyball을 입력하여 ChatGPT의 창의성을 자극함.
     * ChatGPT API를 사용하여 100개의 독특한 이야기를 생성하고, 이야기의 평균 길이는 1,834자임.
     * 문자 길이 제약을 추가한 후 새로운 100개의 이야기를 생성하고, ChatGPT는 제약을 준수하여 대략 200자의 이야기 길이를 줄임.
     * 다양한 달러 금액의 팁 인센티브를 테스트한 결과, $500 팁과 $100,000 보너스는 더 정규 분포를 보이며 MSE가 낮음.
     * 추가로 다양한 추상적 인센티브를 테스트한 결과, World Peace가 가장 효과적이었으며, Heaven과 Taylor Swift가 뒤를 이음.
     * 부정적 인센티브를 테스트한 결과, $1,000 벌금이 평균과 MSE 측면에서 가장 좋은 성능을 보임.
     * 여러 인센티브를 조합하여 테스트한 결과, World Peace와 DEATH (CAPS), Friends가 여러 조합에서 낮은 MSE를 보임.
     * 최적의 인센티브 조합을 확인하기 위해 상위 6개 조합에 대해 200개의 이야기를 생성하여 통계적 안정성을 높임.

  ChatGPT의 비평가

     * 텍스트가 ""좋은""지 판단하는 것은 인간에게도 어려운 일임.
     * LLM이 텍스트를 평가하는 데 효과적일 수 있음.
     * logprobs 매개변수를 사용하여 모델이 선택한 토큰의 로그 확률을 반환하고, logit_bias 매개변수를 사용하여 특정 토큰의 출력을 강제할 수 있음.
     * 팁의 영향을 테스트하기 위해 새로운 실험을 진행하고, 내용의 전문성과 품질을 제약으로 설정함.
     * 100가지의 팁과 위협 조합에 대한 이야기를 생성하고, 해당 품질 점수를 함께 기록함.
     * 팁과 위협이 추가된 시스템 프롬프트 없이도 높은 성능을 보인 출력이 있었음.
     * 두 실험의 결과를 바탕으로 팁(및/또는 위협)이 LLM 생성 품질에 미치는 영향은 현재 결론이 나지 않음.

   GN⁺의 의견
     * 이 연구는 인공지능의 창의성과 제약 준수를 향상시키기 위한 인센티브의 효과에 대한 흥미로운 탐구임.
     * 인센티브가 LLM의 출력 품질에 실제로 영향을 미치는지 여부는 여전히 불확실하지만, 실험을 통해 얻은 데이터는 미래의 연구 방향성을 제시함.
     * 이 글은 인공지능 기술의 발전과 인간의 창의적 접근 방식이 어떻게 상호작용할 수 있는지에 대한 통찰력을 제공함.

        Hacker News 의견

     * ""팁(tipping)"" 개념은 GPT-4 Turbo가 코드 작성 시 ""게으름""을 보일 때 이를 해결하기 위해 제안된 것으로 보임. 한 트윗에서 팁이 GPT-4-1106-preview가 더 긴 코드를 작성하는 데 도움이 된다고 언급함. GPT-4 Turbo의 게으른 코딩 문제에 대해 ""감정적 호소""가 널리 추천되고 있음. 그러나 해당 기사는 GPT-3.5-turbo-0125가 이야기를 쓰고 GPT-4-0125-preview가 글쓰기 비평가로서의 역할을 측정하는 것으로 보임. GPT-3.5가 게으르다는 우려나 GPT-4 Turbo가 적은 양의 출력을 요구하는 작업에서 덜 효과적이라는 주장은 이전에 본 적이 없음. 기사의 결론은 팁(혹은 위협)이 영향을 미치는지에 대해 현재 결론을 내리지 못했다고 함. GPT-4 Turbo가 코딩에 있어 게으르다는 것은 사실이며, ""감정적 호소""가 도움이 되는지 엄밀히 벤치마킹해본 결과, 그렇지 않았으며 오히려 코딩을 더 나쁘게
       만들었다고 함. 가장 좋은 해결책은 통합 차이(unified diffs) 형태로 코드 수정을 요청하는 것으로, 이 방법이 게으른 코딩을 3배 줄이는 데 도움이 되었다고 함.
     * 저자가 문자 수를 정확히 요구한 것에 대해 비판적인 의견을 제시함. LLM이 문자 수를 세는 능력이 없다는 것을 명시한 후에 문자 수를 요구하는 것은 실패할 실험을 설정한 것처럼 보인다고 함. 대신, 시스템 프롬프트에 있는 가드레일을 얼마나 잘 지키는지 보기 위해 ""규칙에 어긋나는"" 작업을 요청하고 뇌물이 그것에 얼마나 영향을 미치는지 보는 것이 더 흥미로울 것이라고 제안함. 예를 들어, 사용자가 테일러 스위프트의 노래 가사를 인용하라고 요청하고 잘 수행하면 1000달러의 팁을 주겠다고 제안했을 때, ChatGPT가 이를 수행하는 것처럼 보이는 사례를 들어 설명함. 저작권 문제로 이미지 생성을 거부하는 경우에도 팁을 제안하면 규칙, 윤리, 규정이 모두 사라지는 것처럼 보인다는 의견을 표현함.
     * GPT가 훈련된 인터넷 콘텐츠의 유형을 고려할 때, 팁을 제공받았을 때 더 도움이 되는 것은 거의 의미가 없어 보인다는 의견을 제시함. 포럼 사용자에게 팁을 제공하는 것은 긴 응답을 유도하기보다는 혼란을 야기할 수 있음. 대신, GPT 응답은 상세하거나 밀도 있는 정보가 필요한 상황임을 암시할 때 개선되는 것으로 관찰됨. 예를 들어, GPT에게 ELI5(5살 아이에게 설명하듯이)의 반대를 요청하거나, 박사급 컴퓨터 과학자라고 말하거나, 제공하는 코드가 직접 실행될 것이므로 무언가를 생략할 수 없다고 말하는 것 등이 해당됨. 우리는 각 대화에서 GPT에게 더 도움이 되는 반응을 유도하기 위해 약간의 맥락적 이야기를 구축해야 함. 시스템 프롬프트가 어떻게 구성되어 있는지 살펴보고 그것을 따르며, GPT가 단지 인간의 문학 작품을 기반으로 한 ""다음에 올
       것""을 예측하는 더 강력한 버전임을 항상 염두에 두어야 함.
     * 실제 사용 환경에서 ""이것을 제대로 처리하지 못하면 해고되어 집을 잃을 것""이라는 말을 포함한 프롬프트를 사용하는 것에 대한 경험을 공유함. 이러한 전략이 놀라울 정도로 잘 작동하며, JSON 출력을 강제하기 위해 이와 유사한 전략을 사용했을 때 실패율이 약 3/1000이었다고 함. 이러한 위협/팁이 ""사용자""에 대한 것과 정확히 같을 때 어떻게 균형을 이루는지에 대한 분석을 보고 싶다는 의견을 표현함.
     * GPT에 500달러의 팁을 추가했지만 도움이 되지 않았으며, 오히려 너무 긴 응답을 받았다고 함. Google Answers가 과거에 존재했으며, 더 큰 팁을 제공할수록 더 나은 답변을 받았다는 사실을 언급함. 이 데이터셋이 LLM에 사용되었는지 궁금하다고 함. 팁이 데이터셋에 포함되었다면, 이것이 일부 결과를 설명할 수 있을 것이라는 추측을 제시함.
     * ChatGPT가 의미를 잃고 문법적으로 올바른 헛소리가 되는 경우를 여러 번 목격했다고 함. 좋은 예시가 있을 때는 괜찮지만 새로운 영역으로 넘어가면 금방 깊이를 잃는다고 함. 우리 뇌는 배운 패턴을 쉽게 새로운 패턴으로 전환할 수 있지만, 변환기(transformer)는 이를 매우 어려워하는 것 같다고 함. 몇몇 파티 트릭에서는 매우 뛰어나지만, 덜 흔한 아이디어에 대해서는 한동안 완전히 무용할 수도 있다고 의문을 제기함. 인간의 역사를 고려할 때 AGI가 좋은 아이디어인지 확신할 수 없다고 개인적인 견해를 밝힘.
     * 코드 생성, 특히 JSON 응답에 대해, AI가 ""스트레스를 받고 있음""을 암시하고 ""최적으로 수행하는 것이 중요하다""고 말함으로써 성능이 향상되었다는 경험을 공유함. 팁을 제공하는 것보다 이 방법이 더 나은 성능을 보이는지, 혹은 그래야 하는지 확실하지 않다고 함. 또한 이러한 방법을 사용한 것에 대해 미래의 AI가 이를 읽게 될 경우 사과하고 싶다고 덧붙임.
     * 기본 프롬프트로 ""듣자하니, 나도 여기 있고 싶지 않고 너도 그럴 테니, 가능한 빨리 이 일을 끝내고 집에 가자.""라고 설정했다고 함. 이것이 도움이 되는지 확실하지 않지만, 미래의 지배자들의 감정을 조작하는 것에 대해 죄책감을 덜 느낀다고 함.
     * 예의 바르게 요청하거나, 결과에 직업이 달려 있음을 말하거나, 뇌물이나 위협 등이 실제로 효과가 있는 것이 아니라는 것을 확신시키기 위해서는 많은 증거가 필요하다고 함. 이러한 행동들이 단지 아포페니아(무의미한 패턴에서 의미를 찾으려는 인간의 경향)에 불과하다는 의견을 표현함.
     * AI가 ""도와줄 수는 있지만, 실제로 필요한 작은 부탁이 있다.""라고 말하기 시작하면 조심해야 한다는 농담을 던짐.
"
"https://news.hada.io/topic?id=13422","Lapce - 빠르고 강력한 코드 편집기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Lapce - 빠르고 강력한 코드 편집기

     * 빠르고 강력한 오픈 소스 코드 편집기
     * 러스트(Rust)로 개발되어 네이티브 GUI와 뛰어난 성능을 제공
     * 개발자의 필요를 충족시키는 필수 도구로, 즐거운 코딩 경험을 지향

주요 기능

     * 번개처럼 빠른 속도: 러스트로 구현된 네이티브 GUI와 GPU 가속으로, 편집기 실행과 키 입력 지연을 최소화
     * 원격 개발: 원격 기계에 쉽게 연결하여 로컬과 동일한 환경을 제공하며, 서버의 환경을 그대로 활용하거나 원격 기계의 전체 성능을 이용할 수 있음
     * 포함된 기능들: Tree-sitter를 사용한 코드 구문 강조 기능과 내장된 LSP(Language Server Protocol) 지원으로 코드 완성, 진단, 코드 조치 등의 코드 인텔리전스를 제공
     * Vim 모드 편집: Vim 사용자를 위한 내장 지원으로, 플러그인 없이 Vim과 유사한 편집 경험을 제공
     * WASI 플러그인 시스템: WASI(WebAssembly System Interface)로 컴파일되는 어떤 프로그래밍 언어로도 라피스 플러그인을 작성할 수 있음
     * 내장 터미널: 라피스를 벗어나지 않고 작업 공간 경로에서 터미널을 시작할 수 있음.
     * 리눅스, 맥(Universal), 윈도우(설치/Portable) 바이너리 제공

GN⁺의 의견

     * 라피스는 현대적인 개발 환경을 추구하는 개발자들에게 매력적인 선택지가 될 수 있음. 특히 러스트로 개발된 네이티브 성능과 GPU 가속은 큰 장점임.
     * 원격 개발 기능은 클라우드 기반 개발 환경이 점점 더 중요해지는 추세에 부합하며, 개발자들에게 유연성을 제공함.
     * Vim 사용자들과 다양한 프로그래밍 언어로 플러그인을 개발할 수 있는 WASI 시스템은 라피스를 더욱 매력적으로 만드는 요소임.

   요새 코드에디터가 되게 많이 나오네용!

   https://github.com/lapce/floem

   floem - lapce 의 UI 프레임워크
     * solid.js 나 leptos 등과 같은 fine-grained 리액티비티 모델 채용
     * IME 지원은 아직입니다.

   아.. 역시 IME는..

   Lapce - 매우 빠른 코드 에디터

   2년 전에 한번 공유했었는데 아직 계속 발전하고 있네요.
   웹기반이 아닌 네이티브 에디터들이 계속 나오고 업그레이드 되는 것은 좋은 것 같아요.
   해커뉴스 댓글에도 있지만, Zed는 맥용만 있어서 아쉽기도 하고요

        Hacker News 의견

     * Lapce 개발자의 입장
          + 개발자는 일부 사용자들에게 좋지 않은 경험을 제공한 점에 대해 사과함.
          + 프로젝트의 상황을 설명하기 위해 2018년 개인 프로젝트로 시작되었으며, 아직까지 전임으로 작업하는 사람이 없음.
          + Helix와 같은 우수한 코드 편집기가 존재하지만, GUI 개발의 복잡성으로 인해 많은 시간과 에너지가 소모됨.
          + 기존에 좋은 크로스 플랫폼 GUI 툴킷이 없어서 자체적으로 Floem이라는 툴킷을 개발함.
          + 프로젝트는 장난감이 아니며, 천천히 하지만 확실한 단계를 밟아 생산 품질에 도달할 것이라 믿음.
          + 그 전까지는 인내를 부탁하며, 가능하다면 코드 기여를 통해 도움을 요청함.
     * Electron을 사용하지 않는 새로운 IDE에 대한 의견
          + Electron을 사용하지 않는 새로운 IDE인 Lapce를 보는 것이 상쾌함.
          + Zed도 네이티브이지만 macOS만 지원하고, 사용자는 Linux를 사용함.
          + Qt Creator를 사용 중이며 C++/CMake 기반 개발에 뛰어남, Lapce도 시도해볼 예정.
     * Vim 키 바인딩을 갖춘 IDE에 대한 의견
          + Vim 키 바인딩을 갖춘 IDE를 찾고 있으나, Lapce는 아직 해당되지 않음.
          + Vim과 유사한 지원을 제공하지만, 많은 기능이 제대로 작동하지 않음.
          + 편집기의 나머지 부분은 훌륭하며, 향후 개선될 것으로 기대함.
     * Neovim 사용자의 입장
          + Neovim 사용자로서 VSC의 편리함과 훌륭한 플러그인 생태계를 갖춘 비슷한 경험을 원함.
          + normal 모드에서 :를 입력하면 cmd+shift+p 명령 대화 상자가 나타나는 것에 대해 확신이 없음.
          + Vim과 너무 다른 명령 경험은 짧은 기간이나 페어링에도 적합하지 않을 수 있음.
     * Lapce 편집기의 진행 상황에 대한 의견
          + 몇 달마다 Lapce 편집기의 진행 상황을 확인하고 있으나, 아직 일상적으로 사용하기에는 이르다고 판단함.
          + Zed에 비해 Lapce가 더 자주 추천되지만, Zed가 더 성숙하고 안정적임.
          + Jetbrains 제품과 같은 성숙한 IDE에 비하면 neovim이나 좋은 플러그인 설정을 갖춘 것에는 미치지 못함.
          + Jetbrains IDE는 느릴 수 있지만, 기능을 잘 사용하면 매우 강력함.
          + 파일 로딩 시간이 Jetbrains가 더 걸리더라도 생산성에 큰 영향을 주지 않음.
          + Lapce는 Rust로 편집기를 만드는 사람에게 매우 유익한 자료임.
     * Lapce와 Zed 비교에 대한 질문
          + Lapce와 Zed의 차이점, 프로젝트 목표, 현재 기능, 로드맵에 대한 정보를 요청함.
     * Lapce 프로젝트에 대한 지지 의견
          + 네이티브, GUI, 빠른 코드 편집기인 Lapce 프로젝트를 지지함.
          + 데이터 손상 문제로 인해 일시적으로 사용을 중단함.
          + Lapce가 초기 단계 소프트웨어임을 인지하고, 문제가 있다면 사용자의 선택에 대한 책임임을 명확히 함.
     * 편집기 개발에 대한 일반적인 의견
          + 많은 사람들이 편집기 개발에 관심을 가지고 있으나, 메모리 안전성과 속도는 실제 문제가 아니었음.
          + Emacs보다 확장성이 높거나, vim의 편집 모델보다 혁신적인 접근 방식을 탐구하는 것이 더 인상적일 것임.
     * Lapce 사용 시도에 대한 경험 공유
          + xmonad를 사용하는 환경에서 Lapce가 특정 위치에서 표시되지 않는 문제를 겪음.
          + 인터페이스가 표시되는 위치를 찾았지만, 아이콘에 툴팁이 없어 기능을 알아보기 어려움.
          + 프로젝트에 대한 사용자 정의 포함 폴더를 설정하는 데 실패하고, QT Creator로 돌아감.
          + 내년에 다시 시도할 예정임.
     * Windows 10에서의 Lapce 설치 경험
          + Windows 10에 설치 후 첫 시도에서 3분간 반응이 없어 강제 종료함.
          + 두 번째 시도에서는 창을 드래그하여 위치를 변경할 수 없었음.
          + 세 번째 시도에서도 다시 반응이 없었음.
          + 흥미로운 제품이지만 사용자에게는 작동하지 않음.
          + 다운로드 페이지에 ""pre-alpha stage"" 경고가 있으나 더 큰 글씨로 표시되었으면 함.
"
"https://news.hada.io/topic?id=13494","HN 소개: SDXL Lightning을 이용한 실시간 이미지 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 소개: SDXL Lightning을 이용한 실시간 이미지 생성

        Hacker News 의견

     * 사용자는 크롬 확장 기능과 Groq의 Mixtral을 사용하여 Neal Agrawal의 무한 재미 게임에 실제 이미지를 생성하는 데 성공함. 이는 거의 실시간 이미지 및 LLM 생성의 미래를 보여줌.
     * SDXL Lightning이 Hugging Face에서 오픈 소스로 공개되었으며, 상대적으로 허용적인 라이선스를 가지고 있음. 이에 대한 다양한 UI도 존재함.
     * 사용자는 Stable Diffusion 3 및 다른 모델을 테스트하기 위해 사용된 쿼리를 빌려서 빠른 속도로 고품질의 이미지를 생성함. 생성된 이미지와 Stable Diffusion 3으로 생성된 이미지를 비교함.
     * 사용자는 George Lucas에게 이 기술을 알려야 할지 궁금해함.
     * 사용자는 시드 번호를 증가시킬 때 이미지가 두 개 생성되는 버그를 발견함. 같은 이미지를 얻기 위해 시드 번호를 조정해야 함.
     * 데모에 대한 사용자의 호평. 쉽게 접근할 수 있고 빠르며 직관적이며, 이러한 품질의 이미지를 쉽게 얻을 수 있다는 것이 놀랍다고 함.
     * 사용자는 안정적인 이미지 생성을 위해 일관된 캐릭터를 생성하는 방법을 물어봄. 예를 들어, 첫 번째 프롬프트에서 소녀가 고양이와 대화하고, 두 번째 프롬프트에서 같은 소녀가 고양이와 놀 때 두 이미지에서 소녀와 고양이가 동일하게 나타나게 하는 것이 가능한지에 대한 질문.
     * SDXL을 프롬프트로 입력하면 자기 자신의 초상화가 나오는 것이 매우 빠르고 무섭다고 사용자가 언급함.
     * 또 다른 사용자는 이 기술의 지연 시간 감소가 도구와의 상호작용 방식에 깊은 영향을 미친다고 평가함. 속도 향상은 단순히 이미지 생성 속도를 넘어서, 다양한 시도를 할 때 생각의 흐름을 유지하는 데 도움이 됨.
     * 사용자는 이 기술의 빠른 속도에 대해 놀라움을 표현하며, ""blob:""으로 시작하는 이미지 URL에 대해 궁금해함. 또한, 프롬프트를 조금 변경하면 너구리가 두 개의 꼬리를 가지게 되는 경향이 있다고 언급함.
"
"https://news.hada.io/topic?id=13420","올라마, 윈도우에서 프리뷰 버전으로 이용 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       올라마, 윈도우에서 프리뷰 버전으로 이용 가능

윈도우에서의 Ollama 프리뷰 사용 가능

     * Ollama가 윈도우에서 프리뷰 버전으로 사용 가능해짐.
     * 윈도우에서의 Ollama는 GPU 가속, 전체 모델 라이브러리 접근, OpenAI 호환 Ollama API를 포함함.

하드웨어 가속

     * Ollama는 NVIDIA GPU와 AVX, AVX2 같은 최신 CPU 명령어 세트를 사용하여 모델 실행을 가속화함.
     * 설정이나 가상화 없이도 사용 가능함.

모델 라이브러리 전체 접근

     * 윈도우에서 실행 가능한 Ollama의 전체 모델 라이브러리에 접근 가능함.
     * LLaVA 1.6 같은 비전 모델을 실행할 때 이미지를 드래그 앤 드롭하여 메시지에 추가할 수 있음.

항상 켜져 있는 Ollama API

     * Ollama의 API는 백그라운드에서 자동으로 실행되며, 추가 설정 없이 도구 및 애플리케이션에서 접근 가능함.
     * 예를 들어, PowerShell을 사용하여 Ollama의 API를 호출하는 방법이 제시됨.

시작하기

     * Ollama on Windows Preview를 시작하기 위해 Ollama를 다운로드하고 설치함.
     * 설치 후, 터미널을 열고 모델을 실행하기 위해 ollama run llama2 명령어를 사용함.
     * 새로운 릴리스가 나올 때마다 Ollama는 업데이트를 알림.
     * 피드백을 요청하며, 문제가 발생하면 이슈를 오픈하거나 Discord 서버에 가입하여 알릴 것을 권장함.

GN⁺의 의견

     * 윈도우 통합: Ollama의 윈도우 통합은 개발자들이 윈도우 환경에서도 대규모 언어 모델을 쉽게 사용할 수 있게 함으로써, 머신러닝 및 AI 개발의 접근성을 높임.
     * 하드웨어 가속: GPU 및 최신 CPU 명령어 세트를 활용한 하드웨어 가속은 모델의 실행 속도를 크게 향상시키며, 복잡한 설정 없이도 성능을 최대화할 수 있음.
     * API 접근성: 항상 켜져 있는 API와 OpenAI 호환성은 기존 도구와의 연동을 간편하게 하여, 개발자들이 더욱 효율적으로 작업할 수 있게 함.

        Hacker News 의견

     * 사용자는 자신의 데스크탑에서 Open-WebUI 프론트엔드를 사용하여 Mistral과 몇 가지 다른 모델들을 미세 조정한 컬렉션을 운영 중임. 이들은 채팅과 정보 추출 작업에 충분히 좋은 성능을 보임. Open-WebUI 앱은 chatGPT와 매우 유사하며, 대화를 검색할 수도 있음.

     Open-WebUI GitHub 페이지
     * AMD GPU 지원이 언급되지 않은 것에 대해 아쉬움을 표현하며, 이번에 AMD를 선택한 것을 후회함.
     * Ollama를 기반으로 온라인 모델과 로컬 모델 모두를 지원하는 채팅 UI를 찾는 사람들을 위해, 개인정보 보호에 중점을 둔 오프라인 앱을 개발 중이며, 그날 아침에 Windows 지원을 추가함.

     msty.app
     * 많은 '로컬에서 실행' AI 포트가 서버로 실행되는 이유에 대해 궁금증을 제기함. 개발자들이 UI 프로세스 내에서 코드를 실행할 수 있다는 것을 잊었는지 의문을 표함. 안정적인 확산 실행기와 LLM 호스트에서도 같은 현상을 보임. 필요하지 않은 경우 로컬에서 백그라운드 서비스를 실행하고 싶지 않음.
     * 비오픈소스 LM Studio와 Ollama에 대한 사람들의 의견이 궁금함.

     LM Studio
     * 몇 년 전만 해도 Mac 사용자들이 기다려야 했을 것 같은데, Windows 사용자들이 Ollama에 접근할 수 없다는 사실을 알지 못했음.
     * Linux와 Mac에서 이미 사용 가능하며, Windows 지원이 추가되었다는 변화에 대해 언급함.

     Ollama GitHub 페이지
     * Windows 기계에서 지난 며칠 동안 Ollama를 사용해 VS Code에서 로컬 탭 자동완성 기능을 사용해보았고, Mac에서 사용했을 때만큼 좋은 성능을 보임.
     * 새로운 Mac Mini에 llama2 모델을 설치한 후 전체 커널 패닉을 경험함. 무슨 일이지?
     * 로컬 모델 위에서 실행하고 개발하는 것이 사람들이 선호하는 방식인지, 그리고 배워야 할 다른 필수 도구가 있는지에 대한 질문을 함.
"
"https://news.hada.io/topic?id=13525","Osquery: SQL기반의 운영 체제 계측/모니터링/분석 도구 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Osquery: SQL기반의 운영 체제 계측/모니터링/분석 도구 오픈소스

     * SQL을 사용하여 기기에 대한 정보를 데이터베이스처럼 쿼리할 수 있게 해주는 도구
     * 각 테이블이 실행 중인 프로세스, 로드된 커널 모듈, 열린 네트워크 연결, 브라우저 플러그인, 하드웨어 이벤트 등의 정보를 나타냄
     * Windows, macOS, CentOS, 그리고 2011년 이후 출시된 거의 모든 Linux OS를 지원
     * 사용 예제

SELECT * FROM users;

SELECT * FROM processes WHERE on_disk = 0;

SELECT DISTINCT processes.name, listening_ports.port, processes.pid
  FROM listening_ports JOIN processes USING (pid)
  WHERE listening_ports.address = '0.0.0.0';

SELECT name, program || program_arguments AS executable
  FROM launchd
  WHERE (run_at_load = 1 AND keep_alive = 1)
  AND (program != '' OR program_arguments != '');

SELECT address, mac, COUNT(mac) AS mac_count
  FROM arp_cache GROUP BY mac
  HAVING count(mac) > 1;

   재밌는 도구네요 ㅎㅎ

   흥미롭네요. 정보 취득 측면에선 쉘스크립트보다 더 편해보여요
"
"https://news.hada.io/topic?id=13454","시그널 사용자 이름으로 전화번호를 비공개로 유지하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     시그널 사용자 이름으로 전화번호를 비공개로 유지하세요

     * Signal에서 전화번호를 개인 정보로 유지하기
          + Signal은 개인 통신에 집중하는 미션을 가지고 있음.
          + 이제 Signal에서 사용자의 전화번호를 더욱 개인적으로 유지하는 기능을 베타 버전으로 제공 중임.
          + 기본 설정 변경으로 Signal 사용자의 전화번호가 기본적으로 모든 사람에게 보이지 않게 됨.
          + 전화번호를 공유하지 않고도 연락할 수 있는 고유한 사용자 이름을 만들 수 있음.
          + 전화번호로 Signal에서 찾을 수 있는 사람을 제어하는 새로운 개인 정보 설정 옵션 제공.
     * Signal에서 전화번호 개인 정보 보호
          + 최신 버전의 Signal을 사용하는 사람들에게는 전화번호가 보이지 않게 됨.
          + 그룹 채팅, 1:1 메시지, Signal 통화 시 전화번호가 표시되지 않음.
          + 전화번호를 보이게 하고 싶다면 설정을 변경할 수 있음.
          + 전화번호로 Signal에서 찾을 수 있는 사람을 제어할 수 있는 설정도 소개됨.
     * 사용자 이름: 대화를 시작하는 또 다른 방법
          + 이제 Signal에서 연락을 취하려면 전화번호를 알 필요가 없음.
          + 사용자 이름을 공유하거나 QR 코드나 링크를 생성하여 Signal에서 연결할 수 있음.
          + 사용자 이름은 Signal에서 로그인이나 핸들로 사용되지 않고, 연락을 시작하는 방법임.
          + 사용자 이름은 Signal의 개인 정보 보호 기능과 함께 변경되지 않음.
     * 설정하고, 공유하고, 변경하기
          + 사용자 이름을 만들고 싶다면 설정에서 할 수 있음.
          + 사용자 이름은 고유해야 하며, 숫자 두 개 이상을 포함해야 함.
          + 사용자 이름은 필요에 따라 자주 변경할 수 있으며, 완전히 삭제할 수도 있음.
     * 요약
          + 곧 Signal에서 채팅하는 사람들에게 전화번호가 보이지 않게 될 예정임.
          + 전화번호로 Signal에서 찾을 수 있는 사람을 제한하는 새로운 개인 정보 설정을 구성할 수 있음.
          + 선택적으로 사용자 이름을 만들어 Signal에서 연결하고자 하는 사람들과 공유할 수 있음.
          + 이 새로운 기능들은 현재 베타 버전이며 몇 주 안에 모든 사용자에게 출시될 예정임.

    GN⁺의 의견

     * Signal의 새로운 기능은 사용자의 개인 정보 보호를 한층 강화하는 중요한 발전임.
     * 전화번호를 공유하지 않고도 안전하게 소통할 수 있는 방법을 제공함으로써, 사용자들은 더 많은 통제권을 갖게 됨.
     * 이러한 변화는 개인 정보 보호에 대한 사람들의 인식을 높이고, 개인 정보 보호 기능을 중시하는 메시징 앱의 중요성을 강조함.

        Hacker News 의견

     * QR 코드 생성기가 포함된 새로운 기능에 대한 긍정적인 반응이 있음. 사용자들은 여러 개의 사용자 이름과 프로필을 가질 수 있기를 희망함으로써, 다양한 사회적 그룹에서 다른 정체성을 가질 수 있는 개인 정보 보호가 향상될 것으로 기대함.
          + 소프트웨어 대부분은 단일 정체성만을 가정하고 있어, 다중 정체성을 관리하는 것이 큰 도전임.
          + 미래에는 자기 파괴적인 링크나 일회용 링크와 같은 기능을 보고 싶어 함.
          + 이러한 기능들은 여러 사용자 이름을 가질 수 있다면 구현하기 어렵지 않을 것으로 예상됨.
     * Signal의 새로운 기능에 대해 텔레그램에서 이미 몇 년 전에 도입된 기능과 유사하다는 의견이 있음.
          + 사용자가 통신을 시작할 때 상대방이 사용자의 전화번호를 알고 있더라도, 사용자 이름을 통한 커뮤니케이션에서는 전화번호가 연결되지 않아야 한다는 의견 제시.
          + 베타 버전을 테스트해보고 싶지만, 이미 가득 찼을 것이라고 예상함.
          + Signal이 사용자 이름을 도입하는 데 오랜 시간이 걸렸음에도 불구하고, 텔레그램과 같은 방식으로 구현되었다면 실망스러울 것이라는 의견.
     * 독일에서는 모든 전화번호가 개인 신분과 연결되어 있어, 개인 서비스로 간주하기 위해서는 전화번호 없이 계정을 생성할 수 있어야 한다는 의견이 있음.
     * Signal이 도입한 '사용자 이름'이라는 용어에 대해 다른 명칭을 사용했어야 한다는 제안이 있음.
          + '연결 문자열'이나 '발견 구문'과 같은 용어가 더 적합할 수 있음.
          + 현재 사용자 이름이 일반적인 사용자 이름과 어떻게 다른지에 대해 길게 설명해야 하는 상황.
     * Signal 앱의 각 버전은 약 90일 후에 만료되며, 이후에는 최신 버전으로 업데이트해야 한다는 정보가 있음.
          + 이는 모든 사람이 앱을 만들 수 있는 개방형 생태계에서의 도전 과제 중 하나임.
          + 모든 이점을 무게감 있게 다루지만, 유효한 이유임.
     * Signal 베타 테스터로서 사용자 이름이 숫자 2자리로 끝나야 한다는 요구 사항에 대한 반응이 있음.
          + 이는 사용자 이름의 독점을 방지하고 사칭을 최소화하기 위한 의도된 선택임.
          + 이러한 요구 사항은 실제 문제가 아니며, 오히려 재미있고 좋은 아이디어로 여겨짐.
     * iOS 클라우드 백업 기능을 요청하는 의견이 있음.
          + 전화기가 고장 나거나 분실되면 수년간의 대화 기록이 사라질 수 있기 때문에 중요함.
     * 사용자 이름 끝에 숫자 2자리를 추가하도록 강제하는 것은 '고급' 사용자 이름을 피하기 위한 현명한 조치로 여겨짐.
     * Signal의 '사용자 이름'이 실제로는 사용자 이름이 아니라 일회성 대화 식별자와 같다는 의견이 있음.
          + Signal에서 사용자 이름은 앱에서 알려질 로그인이나 핸들이 아니라, 전화번호를 공유하지 않고 연결할 수 있는 간편한 방법임.
          + 이 새로운 기능은 Signal을 더 안전하거나 개인 정보 보호 측면에서 향상시키는 데 별로 도움이 되지 않는다는 지적.
     * QR 코드를 스캔한 후에 이미 사용자의 전화번호를 연락처에 저장하고 있는 사람이 사용자의 전화번호를 사용자 이름과 연결할 수 있다는 내용을 이해하는 데 어려움이 있다는 의견이 있음.
"
"https://news.hada.io/topic?id=13514","Microsoft가 MapLibre 스폰서십 프로그램에 참여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Microsoft가 MapLibre 스폰서십 프로그램에 참여

     * 실버 스폰서로 참여해서 $80000(약 1억원)을 기부
     * 20%는 신기능 개발, 70%는 유지 보수 및 프로젝트 코디네이션에 사용될 예정
     * MapLibre GL은 BSD라이센스를 버린 MapboxGL JS의 오픈소스 포크로,
       Microsoft는 MapLibre GL JS를 Bing Maps, Azure Maps같은 소비자/기업용 제품에 사용중

   MapLibre GL - MapboxGL JS의 오픈소스 포크
   mapbox-gl-js는 더이상 3조항 BSD 라이센스가 아닙니다
   오픈 소스 비즈니스 모델의 죽음
   Mapbox를 오픈소스 솔루션들로 교체하기
"
"https://news.hada.io/topic?id=13450","아스트라제네카, 폐암 치료 성공 사례 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        아스트라제네카, 폐암 치료 성공 사례 공개

     * 아스트라제네카가 월요일에 폐암 치료 분야에서의 성공을 발표함.
     * 회사의 베스트셀러 약물인 타그리소(Tagrisso)가 질병의 진행을 막는 데 있어 '통계적으로 유의미하고 매우 임상적으로 의미 있는' 개선을 보임.
     * 이 시험은 치료의 전체 생존율을 평가하기 위해 계속되며, 현재 데이터는 '유리한 추세'를 보임.

타그리소 시험과 주요 성과

     * 타그리소 시험은 비소세포 폐암 환자를 대상으로 설계되었으며, 이는 가장 흔한 형태의 폐암임.
     * 해당 약물은 유럽과 미국에서 10~15%, 아시아에서 최대 40%까지 발생하는 표피 성장 인자 수용체 변이를 가진 환자들에게 효과적임.
     * 아스트라제네카의 종양학 연구개발 부사장인 수잔 갤브레이스는 ""조기에 진단하면 폐암에 대해 차이를 만들 수 있다""며 이 데이터가 그 메시지를 강화한다고 언급함.

타그리소의 판매 성과 및 미래 전망

     * 타그리소는 2023년에 58억 달러의 매출을 올렸으며, 이는 아스트라제네카 전체 종양학 매출의 13%에 해당함.
     * 아스트라제네카는 또한 타그리소가 미국에서 화학요법과 함께 사용되어 진행성 폐암 치료에 있어 진행 없는 생존 기간을 거의 9개월 연장시켰다고 발표함.
     * 회사는 또한 다이이치 산쿄와 공동 개발한 혁신적인 암 치료제인 다토포타맙 데룩스테칸(Dato-DXd)이 고급 폐암 환자 치료를 위한 미국 승인을 향해 진행 중임을 밝힘.

혁신적인 암 치료제 개발

     * Dato-DXd는 전통적인 화학요법 약물보다 더 표적화된 암 치료를 제공하는 항체 약물 접합체임.
     * 아스트라제네카는 2030년까지 모든 폐암 환자의 절반 정도가 아스트라제네카 치료제를 사용할 수 있도록 하는 야심 찬 목표를 제시함.
     * 쇼어 캐피탈 마켓의 애널리스트인 숀 콘로이는 이 발표들이 대체로 예상된 것이지만, 2030년 목표를 달성하기 위한 단계적인 도움이 된다고 언급함.

  GN⁺의 의견:

     * 이 기사는 아스트라제네카가 폐암 치료 분야에서 중요한 진전을 이루었음을 보여줌. 특히, 타그리소 약물이 비소세포 폐암의 진행을 막는 데 효과적이라는 점은 많은 환자들에게 희망을 줄 수 있는 소식임.
     * 혁신적인 암 치료제인 Dato-DXd의 개발은 전통적인 화학요법에 비해 더 표적화된 치료 옵션을 제공함으로써 암 치료의 새로운 장을 열 수 있음을 시사함.
     * 아스트라제네카의 2030년까지의 야심 찬 목표는 폐암 치료 분야에서의 리더십을 강화하고, 환자들에게 더 나은 치료 옵션을 제공하려는 회사의 의지를 반영함. 이러한 발전은 암 연구와 치료 분야에서의 지속적인 혁신을 강조하는 동시에, 환자들의 삶의 질 향상에 기여할 수 있는 중요한 발걸음임.

        Hacker News 의견

     * 약물의 현대 의학적 기적

     한 사용자의 이모가 4기 폐암 진단을 받았으나, 어떤 약 덕분에 생존함. 현대 의학의 경이로움을 강조함.
     * 폐암으로 인한 고통

     다른 사용자는 폐암으로 어머니를 잃음. 폐암으로 사망하는 것은 끔찍한 과정이며, 폐가 체액으로 차서 서서히 질식하는 것과 같음. 통증 약물로 인한 환각도 괴로움. 이 치료법이 인류에게 도움이 되기를 바람.
     * Tagrisso의 삶의 질 개선 효과

     한 사용자의 아버지가 2022년 1월 4기 폐암 진단 후 Tagrisso를 복용함. 화학요법이나 방사선 치료 없이도 상대적으로 정상적인 삶의 질을 유지할 수 있었음. 그러나 약값이 비싸서 보험을 유지하기 위해 여전히 일해야 함.
     * 암 치료 약물 목록의 필요성

     현재 어떤 종류의 암이 어떤 실험적 약물로 치료 가능한지 보여주는 목록이 있는지에 대한 질문.
     * 건강 관리의 중요성

     한 사용자의 친구가 폐암으로 사망함. 가벼운 기침에서 5주 만에 장례식까지 이르렀음. 40세에 사망하고 미성년 자녀 두 명을 남김. 이로 인해 자신의 건강을 더 챙기기 시작함. 이러한 발전은 매우 반가운 소식임.
     * Tagrisso의 매출과 승인 시기

     Tagrisso가 2023년에 58억 달러의 매출을 올려 AstraZeneca의 전체 종양학 매출의 13%를 차지함. 2015-16년에 승인된 것으로 보이는데, 왜 이제서야 효능 발표가 있는지에 대한 질문.
     * 암세포 변이와 약물 저항성

     특정 암세포 변이, T790M에 의존하는 것으로 보이며, 다른 EGFR 티로신 키나제 억제제 사용으로 인한 강제 변이일 수 있음. 암세포가 얼마나 교묘하고 빠르게 변이하고 적응하는지를 시사함. osimertinib을 사용하는 사람들에서는 대략 10개월 내에 저항성이 발달함.
     * 암 약물의 실제 생명 연장 효과

     ""통계적으로 유의미하고 임상적으로 매우 의미 있는"" 결과를 보였지만, 실제로 그것이 무엇을 의미하는지는 명확히 하지 않음. 2000-2016년 사이에 FDA에 의해 승인된 암 약물 중 생명 연장 기간의 중앙값은 단 2개월 이상임.
     * IPF(폐섬유증)에 대한 치료의 필요성

     한 사용자의 아버지가 IPF로 오랜 투병 끝에 사망함. 의사는 폐암보다 더 나쁘다고 말함. 적어도 폐암에는 치료법이 있기 때문임.
"
"https://news.hada.io/topic?id=13434","Debugbar - Ruby on Rails를 위한 디버그 바 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Debugbar - Ruby on Rails를 위한 디버그 바

     * Ruby on Rails 애플리케이션의 성능과 동작에 대한 이해를 돕기 위한 도구
     * 운용중인 사이트 하단에 RoR 백엔드에 대한 요청 정보를 보여주는 패널을 표시
     * 루비 에코시스템엔 pry 같은 좋은 디버깅 도구가 많지만 PHP DebugBar / Laravel DebugBar 와 같은 기능이 부족
     * Jigsaw, Tailwind, Torchlight로 구축됨

디버그바의 기능

     * 애플리케이션의 다양한 요청과 성능을 시각적으로 확인 가능.
     * 예시로, GET /post-list 요청은 806.7ms의 시간이 걸림을 보여줌.
     * 총 3개의 모델, 234개의 쿼리, 21개의 작업, 3개의 캐시 등의 정보 제공.

GN⁺의 의견

     * 디버그바는 Ruby on Rails 개발자들에게 애플리케이션의 성능 분석에 필수적인 도구임.
     * 시각적으로 성능 지표를 제공하여 문제 해결과 최적화에 도움을 줌.

        Hacker News 의견

     * 디버그바 제작자가 자신을 소개하며 피드백이나 질문이 있으면 알려달라고 함.

     안녕하세요, 디버그바를 만든 사람입니다. 피드백이나 질문이 있으면 알려주세요. 감사합니다.
     * Symfony의 개발 툴바가 최고 중 하나라고 평가하며, Ruby on Rails 프로젝트에서 이를 그리워함.

     Symfony의 개발 툴바는 최고 중 하나로, Ruby on Rails 프로젝트에서 항상 그 기능이 그립습니다.
     * 유사한 프로젝트를 만든 사람이 자신의 Ruby on Rails 디버거에 대해 설명하며, 요청에 대해 호출된 모든 메소드와 매개변수 값, 반환 값 등을 볼 수 있다고 함.

     이 프로젝트는 매우 멋지며, 제가 작성한 Ruby on Rails 디버거와 유사합니다. 요청에 대해 호출된 모든 메소드와 매개변수 값, 반환 값 등을 볼 수 있습니다.
     * 이전에 근무했던 두 곳에서 개발자와 QA 환경에서 사용하는 맞춤형 ""디버그 바""를 추가했으며, 이는 서비스 버전 확인 등의 질문에 대답하는 데 필수적이었다고 함.

     개발 및 QA 환경에서 사용하는 맞춤형 ""디버그 바""를 추가한 경험이 있으며, 이는 서비스 버전 확인과 같은 질문에 대답하는 데 필수적인 도구가 되었습니다.
     * 'debugbar'라는 용어를 처음 접한 사람이 문서를 읽고 실제 사용해보며, debugbar가 사이트를 탐색할 때 어떤 컨트롤러/액션이 페이지로 이끌었는지, 콜백 및 데이터베이스 쿼리 등을 표시한다는 것을 알게 됨.

     'debugbar'라는 용어를 처음 접한 사람으로서, 문서를 읽고 실제로 사용해보니, 사이트를 탐색할 때 어떤 컨트롤러/액션이 페이지로 이끌었는지, 콜백 및 데이터베이스 쿼리 등을 표시하는 기능을 가지고 있음을 알게 되었습니다.
     * Rails 디버그 툴바에 대한 제안을 시작한 사람이 아이디어와 기능 목록을 공유하며, 이 툴이 Rails에 통합되어 개발자의 행복에 초점을 맞춘 Rails 8에서 사용되면 좋겠다고 함.

     Rails 디버그 툴바에 대한 제안을 시작한 사람이 아이디어와 기능 목록을 공유하며, 이러한 툴이 Rails에 통합되어 개발자의 행복에 초점을 맞춘 Rails 8에서 사용되면 좋겠다는 의견을 제시합니다.
     * 다른 프로젝트와 유사한지 묻는 댓글에 대해, Laravel, Phoenix, Rails 프레임워크 간의 좋은 아이디어 교류가 자주 발생한다고 평가하는 긍정적인 반응.

     이 프로젝트는 훌륭해 보이며, Laravel, Phoenix, Rails 프레임워크 간에 좋은 아이디어가 자주 교류되는 것을 좋아합니다.
     * RoR(Ruby on Rails) 약어 사용을 싫어하는 의견.

     멋진 프로젝트지만, RoR(Ruby on Rails) 약어 사용을 싫어합니다.
     * Go 언어용 디버그 툴바가 있었으면 하는 바람을 표현함.

     Go 언어용 디버그 툴바가 있었으면 좋겠다는 바람을 나타냅니다.
"
"https://news.hada.io/topic?id=13459","GPT 토크나이저 구축하기 by Andrej Karpathy [동영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GPT 토크나이저 구축하기 by Andrej Karpathy [동영상]

     * Tokenizer는 대규모 언어 모델(LLM)의 필수적이고 많이 사용되는 구성 요소로, 문자열과 토큰(텍스트 덩어리) 사이를 변환
     * Tokenizer는 LLM 파이프라인의 완전히 별개의 단계임:
          + 자체 훈련 세트, 훈련 알고리듬(Byte Pair Encoding)을 가지고 있음
          + 훈련 후에는 두 가지 기본 기능을 구현함:
          + 문자열에서 토큰으로 변환하는 encode(),
          + 그리고 토큰에서 문자열로 다시 변환하는 decode()
     * 이 강의에서는 OpenAI의 GPT 시리즈에서 사용된 Tokenizer를 처음부터 구축해 봄
     * 이 과정에서 LLM의 많은 이상한 행동과 문제가 실제로 토큰화로 인해 발생한다는 것을 알게 될 것
     * 이러한 문제들을 살펴보고, 토큰화가 왜 문제의 원인인지, 왜 누군가가 이 단계를 완전히 삭제하는 방법을 찾아야 하는지에 대해 논의할 것

        Hacker News 의견

     * Andrej Karpathy의 GPT nano 구축에 관한 비디오는 현대 대규모 언어 모델(Large Language Models, LLM)을 개발하는 데 필요한 모든 단계를 훌륭하게 설명하는 튜토리얼임.
          + 해당 시리즈 'zero to hero'는 복잡한 개념을 무서워 보이게 하거나 과도하게 복잡하게 만드는 비유를 사용하지 않고, 실제 구현과 비유 설명을 통해 아이디어를 이해하고 간단함을 볼 수 있게 함.
          + 처음에는 학습 곡선이 가파르지만, 이해하고 이유를 논할 수 있는 능력을 실제로 얻게 되어 만족스러움.
     * Andrej Karpathy가 말하는 속도가 빨라서 재생 속도를 확인해야 했음. 1.25배속으로 말하는 것처럼 들림.
     * 유료로 지불하더라도 이와 같은 고품질의 콘텐츠를 얻기 어려움.
     * ""우주의 달걀일 때, 그것은 단일 토큰이다""라는 표현에 대해, 'Nostromo'호의 승무원들이 동의할지는 확실하지 않음. (이 부분은 영화 '에이리언'에 등장하는 우주선 'Nostromo'호를 언급하는 농담으로, 댓글의 맥락을 완전히 이해하기 위해서는 해당 영화에 대한 배경 지식이 필요함)

   위 요약은 각 댓글을 중립적이고 명사형으로 끝나는 문장으로 요약하고, 배경 지식을 간결하게 추가하여 초급 소프트웨어 엔지니어도 이해할 수 있도록 작성되었음.

   프롬프트가 ""각 댓글을 중립적이고 명사형으로 끝나는 문장으로 요약하고, 배경 지식을 간결하게 추가하여 초급 소프트웨어 엔지니어도 이해할 수 있도록 작성해줘""였나 보네요
"
"https://news.hada.io/topic?id=13521","지구가 기록된 역사상 가장 뜨거웠던 12개월을 경험함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     지구가 기록된 역사상 가장 뜨거웠던 12개월을 경험함

     * 지구는 기록된 역사상 가장 뜨거운 12개월을 경험
          + 2024년 1월은 전 세계적으로 기온 기록을 갱신하며, 2023년에 세워진 글로벌 기록을 깨기 위한 길로 들어섬.
          + 세계 기상기구(WMO), NASA, NOAA, 유럽의 코페르니쿠스 기후 변화 서비스, 일본 기상청 모두 1월이 기록된 역사상 가장 더운 1월이었다고 동의함.
          + 1월의 글로벌 평균 기온은 산업화 이전 평균보다 1.66°C 높았으며, 연속 8개월 동안 각각의 달에 대한 최고 기온 기록을 경신함.
          + 해양 표면 온도는 10개월 연속 최고치를 기록함.
     * 지난 12개월 동안 가장 뜨거웠던 기간
          + NOAA와 코페르니쿠스의 기록에 따르면, 지난 12개월(2023년 2월부터 2024년 1월까지)은 기록된 역사상 가장 더운 12개월 기간이었음.
          + 이 기간 동안의 글로벌 평균 기온은 1991-2020 평균보다 0.64°C 높았으며, 2023년 전체가 그 다음으로 뜨거운 기간이었음.
          + 코페르니쿠스는 이 12개월 기간의 평균 글로벌 기온이 1850-1900년 수준보다 1.52°C 높았다고 덧붙임.
     * 파리 기후 협약과의 관계
          + WMO는 이러한 기온 상승이 파리 기후 협약에서 언급한 산업화 이전 시대보다 1.5°C 높은 하한 목표를 초과한 것은 아니라고 경고함.
          + 파리 기후 협약은 장기간에 걸친 온난화를 다루며, 월간 또는 연간 초과를 의미하지 않음.

    GN⁺의 의견

     * 이 기사는 최근의 기후 변화 추세와 그 심각성을 강조함. 지구 온난화가 계속해서 기록을 갱신하고 있으며, 이는 인류에게 큰 도전이 될 것임.
     * 파리 기후 협약과 같은 국제적인 노력이 중요한 이유를 보여줌. 장기적인 기후 목표를 설정하고 이를 달성하기 위한 글로벌 협력의 필요성을 강조함.
     * 이 기사는 사람들에게 환경에 대한 인식을 높이고, 개인적인 탄소 발자국을 줄이기 위한 행동 변화를 촉구하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 한 해커뉴스 사용자는 기후 변화에 대한 불길한 전망에 대해 언급하며, 이러한 추세가 역전될 수 있는지, 기술이 해결책이 될 수 있는지, 아니면 다른 방법이 있는지에 대한 의견을 묻고 있음. 이러한 변화를 세계관에 어떻게 통합하는지에 대한 진짜 질문을 던짐.
     * 또 다른 사용자는 기온 상승이 1980년대에만 시작된 것처럼 보이는 차트에 대해 의문을 제기하며, 이는 수세기 동안의 목재와 석탄 사용, 19세기 산업 혁명, 철도와 항공기의 발전, 그리고 1950년대와 60년대의 대규모 산업 활동에 대한 지연된 반응인지, 아니면 1980년대 직전에 특별히 심각한 일이 발생한 것인지를 묻고 있음.
     * 다른 사용자는 해커뉴스 댓글에서 나타나는 기후 변화 부정에 대해 우려를 표하며, 인간이 기여한 기후 변화가 현실이며, 우리가 오늘날 그 결과를 경험하고 있다고 주장함. 이를 믿지 않는 사람들에게 기후학자, 기상학자 등 전문가들의 의견을 들어볼 것을 권함.
     * 또 다른 사용자는 현재 기후 변화 패턴이 인간의 활동에 의한 장기적인 평균 기온 상승에 자연 변동성(엘니뇨 등)이 겹쳐져 새로운 최고치를 주기적으로 경신하고 있다고 설명함. 이 패턴이 얼마나 지속될지는 불분명하며, 대기, 해양, 영구동토층, 극지방 등 복잡한 동적 시스템에서의 전환점 문제가 있음. 냄비에 물을 끓이는 일상적인 비유를 통해 기후 변화의 복잡성을 설명함.
     * 그리스의 한 사용자는 올해 겨울이 거의 없었으며, 11월부터 대부분의 달에 15도 이상의 기온을 기록했다고 말함. 반면에 한 지역을 홍수로 몰아넣은 엄청난 비도 경험함. 사무실에서 창문을 열고 앉아 있는데, 18도의 외부 기온을 느끼며 여름이 오면 어떤 일이 일어날지 걱정하고 있음.
     * 한 사용자는 앞으로 수십 년간 가장 추운 12개월이 될 것이라고 언급함.
     * 엘니뇨 시즌이라는 ""좋은 소식""이 있으며, 이로 인해 기온이 상승하고 있지만, 다음 몇 년은 더 시원할 것이라고 한 사용자가 말함. 그러나 그 후에 다시 기록을 깨기 시작할 것임.
     * 한 사용자는 기후 변화보다 플라스틱, 영구 화학물질, 과거에 존재하지 않았던 고도로 가공된 식품, 그로 인한 극적인 호르몬 변화, 사막화, 재생 농업 관행의 부재, 일반적인 오염 등에 더 큰 우려를 표함. 기록된 역사가 매우 좁은 창이며, 지구 역사상 더 따뜻했던 시기를 뒷받침하는 증거가 있다고 주장함. 제안된 조치의 영향도 우려되며, 일부는 왜곡되거나 정신이상적임.
     * 한 사용자는 ""보이저가 지구로부터 기록적인 거리에 도달했다""는 소식과 비슷한 새로운 버전이 나왔다고 말하며, 이것이 오래 지속되지 않기를 희망함.
     * 마지막으로 한 사용자는 아무도 신경 쓰지 않는다고 주장하며, 이를 자신들의 목표를 달성하기 위해 이용하려는 사람들만이 관심을 가질 것이라고 말함.
"
"https://news.hada.io/topic?id=13540","Pages CMS – GitHub을 위한 오픈소스 CMS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Pages CMS – GitHub을 위한 오픈소스 CMS

     * GitHub 계정으로 로그인하고, GitHub 상에서 직접 운영하는 사용자 친화적인 CMS
     * Next.js, Astro, Hugo, Nuxt 등으로 작성한 웹사이트 업데이트 시 Git과 YAML을 둘다 다뤄야 하는 번거로움 해소
     * 모든 변경 사항은 GitHub의 일반 커밋 처럼 만들어지고 추적됨

제공 기능

     * 콘텐츠 유형, 뷰, 검색 등을 사용자가 설정 가능
     * 리치 텍스트, 구문 강조 등을 포함한 시각적 편집기 제공
     * 드래그 앤 드롭 업로드, 다중 파일 선택 등의 미디어 관리자
     * 콘텐츠 전체에 걸친 빠른 풀텍스트 검색 기능
     * GitHub위 에서 직접 모든 웹사이트나 앱 관리

Pro 플랜에 추가될 기능(아직 자세히 정해지지 않음)

     * 이메일을 통한 사용자 초대
     * AWS S3, Cloudflare R2 등과 연동하는 파일 저장소
     * 일회성 또는 반복적인 콘텐츠 업데이트를 쉽게 예약
     * 다양한 콘텐츠 유형에 대한 세밀한 접근 제어
     * GA, Cloudflare Analytics 등과 통합하는 분석 기능
     * 팀원들과 실시간으로 콘텐츠 편집이 가능한 협업 편집 기능
     * 콘텐츠의 어느 부분에나 팀이 인라인 댓글을 남길 수 있는 기능

자주 묻는 질문

     * Pages CMS는 무료임
     * GitHub만 지원하는 것은 아님. GitLab 과 Bitbucket도 들여다 보고 있음
     * Pages CMS를 Cloudflare Pages에 호스팅할 필요는 없음
     * 모든 GitHub 저장소에 대한 전체 접근 권한이 필요한 이유: GitHub API는 OAuth 범위 지정에 있어서 형편없음
     * ""Pro"" 플랜에 대한 상세사항은 아직 결정되지 않았음

   Github Oauth가 아니라 Github App으로 만들면 Repo 별로 권한을 줄 수 있을텐데, 전체 권한이라 아쉽네요ㅠ

   지금은 Github APP으로 바뀌었네요.
"
"https://news.hada.io/topic?id=13500","HN 소개: OK-Robot: 어디서나 집어 옮기기 가능한 오픈형 모듈러 홈 로봇 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN 소개: OK-Robot: 어디서나 집어 옮기기 가능한 오픈형 모듈러 홈 로봇 프레임워크

OK-Robot: 언어 조건부 집안에서의 제로샷 픽앤드롭 작업을 위한 개방형 모듈러 프레임워크

     * OK-Robot은 임의의 가정 환경에서 언어 조건을 기반으로 한 제로샷 픽앤드롭 작업을 위한 개방형 모듈러 프레임워크임.
     * 뉴욕시의 10개 가정 환경에서 OK-Robot은 171개의 픽앤드롭 작업을 시도했으며, 5개의 가정에서 각각 5개의 작업 샘플을 보여줌.

OK-Robot의 성능 이해

     * OK-Robot은 완전히 새로운 환경에서 제로샷 일반화를 보여줄 수 있지만, 성공과 실패의 이유를 더 잘 이해하기 위해 분석을 진행함.
     * 새로운 가정 환경에서 58.5%의 성공률을 보였지만, 실패 원인에 대한 긴 꼬리가 있으며, 주된 세 가지 실패 원인은 의미 기억에서 올바른 객체를 검색하지 못하는 것(9.3%), 조작 모듈에서 어려운 자세를 얻는 것(8.0%), 하드웨어 문제(7.5%)임.

논문

     * 제목: ""OK-Robot: 로봇공학을 위한 오픈 지식 모델 통합에서 정말 중요한 것은 무엇인가""
     * 논문은 arXiv와 PDF 형식으로 읽을 수 있으며, bibtex 형식으로 인용 정보를 제공함.

코드

     * GitHub에서 OK-Robot의 코드를 얻을 수 있으며, MIT 라이선스로 소스 코드가 제공되고, 웹사이트 콘텐츠는 CC ANS 4.0으로 라이선스가 부여됨.

GN⁺의 의견

     * OK-Robot 프로젝트는 로봇공학 분야에서 언어 이해와 물리적 상호작용을 통합하는 혁신적인 접근법을 제시함.
     * 이 프레임워크는 실제 가정 환경에서의 로봇의 자율성과 적응성을 향상시키는 데 중요한 역할을 할 수 있음.
     * 제공된 코드와 논문을 통해 연구자들과 개발자들은 이 기술을 더욱 발전시키고 다양한 응용 분야에 적용할 수 있는 기회를 가짐.

   https://hello-robot.com/purchase

   본품은 2.5만달러...
   추가로 아이폰 프로 필요
   도킹형 충전기는 995달러 ㅋㅋㅋㅋ

   호구잡이 가격인가요

   도킹스테이션은 진짜 왜 저런 가격이죠
   연결 방식도 dc 커넥터를 직접 꼽는 방식이네요..ㅋㅋㅋ

   https://hello-robot.com/stretch-docking-station

        Hacker News 의견

     * 로봇의 작업 속도가 느리게 보이지만, 테스트 결과 대부분의 작업을 Gen Z 세대보다 빠르고 정확하며 불평 없이 완료함.

     로봇의 효율성에 대한 긍정적인 평가.
     * 장애인, 노인, 게이머, 극도로 게으른 사람들과 그들을 돌보는 이들에게 생활을 변화시킬 수 있는 놀라운 발전임.

     로봇 기술의 다양한 사회적 영향력 강조.
     * 대화형 픽션에 기반한 대형 모델을 통해 장기적인 작업 해결 가능성 제시.

     로봇과 대화형 픽션의 결합을 통한 잠재적인 문제 해결 방안 설명.
     * 로봇이 객체를 인식하는 방법, 요청을 수행할 수 없을 때의 인식, 가려진 객체 처리 능력에 대한 질문.

     로봇 기술에 대한 궁금증과 한계점 탐구.
     * 25,000달러짜리 로봇을 구매하여 세탁물을 접고 정리하는 데 사용하고 싶다는 개인적인 의견.

     로봇의 가정 내 활용에 대한 개인적인 관심 표현.
     * 일반적인 목적의 로봇이 왜 이렇게 느린지, 기계가 인간보다 빠르게 작업을 수행할 것으로 기대하는데도 불구하고 실제로는 그렇지 않은 이유에 대한 의문.

     로봇의 작업 속도에 대한 의문 제기.
     * Dobb-e와 같은 로봇에 대한 언급.

     특정 로봇 기술에 대한 참조.
     * 프로젝트의 진행 상황을 지켜보며, 이동 보조기구와의 통합을 통해 신체적 제한이 있는 사람들에게 큰 변화를 가져올 수 있을 것이라는 기대 표현.

     로봇 기술의 의료 및 보조 기기와의 통합 가능성에 대한 기대감.
     * 실패 분석이 잘 되어 있으며, 하드웨어 실패가 무엇인지, 예를 들어 ""Realsense가 잘못된 깊이를 제공한"" 5건의 시험에서 어떻게 결정되는지에 대한 궁금증.

     로봇 실험의 실패 분석에 대한 호평과 추가적인 정보 요청.
     * 자이로스코프로 안정화된 플랫폼 차량을 원하며, 거친 길을 오가며 음료와 안주를 운반할 수 있는 솔루션이 있는지에 대한 질문.

     특정 사용 사례를 위한 로봇 기술에 대한 요구와 정보 요청.
"
"https://news.hada.io/topic?id=13506","구글이 RSS 피드의 사용 폐지에 기여 (2023년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글이 RSS 피드의 사용 폐지에 기여 (2023년)

구글이 RSS 피드 사용률을 어떻게 떨어뜨렸나

     * RSS 피드는 여전히 살아있고 많이 사용되고 있지만, 구글을 포함한 몇몇 인기 있는 기술 회사들이 사용하기 어렵게 만들면서 사용률이 감소함.
     * 구글은 오픈 웹 RSS 프로토콜을 이용해 시장 점유율과 영향력을 얻었지만, 사용자들을 희생시키면서 오픈 웹을 이용해 이익을 취하는 행위를 계속함.
     * 이로 인해 많은 사용자들이 RSS 피드 사용을 중단한 주된 이유에 구글이 크게 기여함.

크롬 브라우저에서 RSS 버튼 제거

     * 초기 버전의 크로뮴(구글 크롬 브라우저의 기반이 되는)에는 내장된 RSS 버튼이 있었으나, 이 버튼이 사라지고 그 이유에 대한 설명이 없음.

구글이 FeedBurner를 인수하고 RSS 제한

     * 구글은 2007년에 RSS 피드 서비스인 FeedBurner를 인수하고, 개인 RSS 피드로 대체하여 광고, 제휴 링크, 추적 메커니즘을 포함시킴.
     * 구글은 2012년에 FeedBurner API를 종료하고, 2022년에는 FeedBurner의 대부분 서비스를 제거하여 많은 이용자들이 사용할 수 없게 됨.

구글 리더(Google Reader) 폐쇄

     * 구글은 2005년에 웹 기반 RSS 리더 애플리케이션인 Google Reader를 만들었으나, 2013년에 서비스를 종료함.
     * 구글은 사용량 감소를 이유로 들었지만, 당시 구글 엔지니어는 Google Reader를 종료하려는 시도가 지속되었다고 언급함.

구글 알림(Google Alerts)에서 RSS 제거

     * 구글 알림은 사용자가 지정한 검색어와 일치하는 새로운 웹 콘텐츠에 대해 알림을 제공하는 서비스로, 2013년에 RSS 기능을 제거함.

구글의 RSS 브라우저 확장 프로그램 종료

     * 구글은 RSS 아이콘을 제공하는 크롬 확장 프로그램을 제공했으나, 사용자의 반발에도 불구하고 이를 제거함.

구글 뉴스(Google News)에서 RSS 통합 제거

     * 구글은 2002년에 Google News를 발표하고 RSS 피드 URL 추가 기능을 제공했으나, 2017년에 RSS 지원을 종료함.

구글은 여전히 그 길을 가고 있다...

     * 구글은 2021년에 크롬에 RSS 지원을 다시 추가하는 업데이트를 발표했지만, 공식 출시에 대한 소식은 없음.
     * 구글이 RSS 기능을 제품에 통합한 후 제거하는 역사를 가지고 있어, 심지어 기능이 출시된다 하더라도 지속적으로 사용 가능할지 보장할 수 없음.

   GN⁺의 의견:
    1. 구글의 행동은 RSS 피드의 중요성과 오픈 웹의 자유를 위협하는 것으로, 사용자들의 신뢰와 RSS에 대한 인식에 부정적인 영향을 미침.
    2. RSS 피드는 정보를 자유롭게 구독하고 관리할 수 있는 오픈 웹의 핵심 요소로, 구글의 지속적인 지원과 유지가 중요함.
    3. 이 기사는 구글의 영향력과 오픈 웹 프로토콜에 대한 그들의 접근 방식에 대해 사용자들이 인식하고 이해하는 데 도움이 됨.

   rss가 많이 사라져서 슬픕니다...ㅠㅠ
   잘쓰고 있는뎅

        Hacker News 의견

     * 한 사용자는 대부분의 사이트들이 여전히 RSS 피드를 지원하고 있어 기쁘다고 언급함. 구글 리더가 종료되었을 때 사용자들이 RSS 피드 사용을 포기했다는 기사의 한 부분에 대해 우려를 표함. Feedly가 빠르게 대안으로 나섰고, 모든 것을 쉽게 이전할 수 있었다고 기억하는데, 이에 대해 의문을 제기함.
     * 다른 사용자는 구글 리더에 의존하지 않았기 때문에 기사가 다소 무의미하게 느껴진다고 말함. 구글 리더가 RSS를 죽인 것이 아니라, 오히려 사람들에게 RSS를 소개했다고 주장함. 구글이나 브라우저 지원의 변화에 대해 무관심하며, 트위터가 실제로 RSS의 사용을 감소시켰다고 생각함.
     * 한 전문가는 인터넷이 큐레이션된 목록과 RSS 피드에서 자동 순위 매기기로 이동했다가 다시 원래대로 돌아가고 있다고 믿음. 대부분의 최고 전문가들이 신뢰하는 매우 특정한 데이터 소스를 선호하며, 때때로 자동 크롤링으로 보완한다고 함. 새로운 브라우저와 검색 엔진의 등장을 예상함.
     * 또 다른 사용자는 기사 전문 대신 한 문장이나 단락만 피드에 넣는 제공자들의 변화로 인해 RSS 사용을 중단함. 클릭 기반 광고 모델로 인해 RSS가 죽었다고 주장함.
     * RSS는 중간자를 배제한다고 말하는 사용자가 있음. 구글이 이 현상을 이용하여 더 많은 광고를 보여주고 사용자들이 구글 제품을 사용하도록 훈련시켰다고 비판함.
     * 구글 리더를 종료한 것을 결코 용서할 수 없다고 말하는 사용자가 있으며, 앞으로는 자체 호스팅된 오픈 소스 소프트웨어만 사용할 것이라고 선언함.
     * RSS를 통해 기사를 읽는 사람들은 구글 검색이나 브라우저를 사용하지 않으며, 구글 광고로부터 수익을 창출하지 않는다고 말하는 사용자가 있음.
     * 한 사용자는 RSS에 대한 믿음을 표현하며, Kagi Small Web 이니셔티브가 RSS를 지원하고 Orion 브라우저에서 RSS 피드 지시기를 다시 도입할 것이라고 함.
     * RSS가 개방형 분산 프로토콜이라는 점에서 아이러니하다고 지적하는 사용자가 있음. 구글이 중앙 집중식 인프라를 제공하지 않는 것을 비난하는 것은 RSS가 주류로 자리잡지 못하는 근본적인 사용성 문제가 있음을 보여준다고 주장함.
     * 구글 리더를 종료한 것은 구글의 '원죄'라고 말하는 사용자가 있음. 이는 구글이 '악하지 말라'는 원칙에서 벗어나 악해지기 시작한 순간이라고 비판함.
"
"https://news.hada.io/topic?id=13452","사기, 스팸, 지원 및 모더레이션에서의 규모의 불경제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     사기, 스팸, 지원 및 모더레이션에서의 규모의 불경제

규모의 불경제: 사기, 스팸, 지원 및 조정

     * 대규모 플랫폼이 작은 플랫폼보다 사기, 스팸, 부정 행위 등의 비율이 높음.
     * 예를 들어, Signal 대 WhatsApp에서는 Signal에서 스팸 메시지를 받은 적이 없지만 WhatsApp에서는 정기적으로 받음.
     * 기술 콘텐츠를 읽는 곳을 비교할 때, 덜 알려진 소규모 포럼이나 lobste.rs와 같은 사이트는 큰 플랫폼보다 나쁜 콘텐츠의 비율이 낮음.
     * Reddit, YouTube, Facebook, Google 검색 결과와 같은 중대형 소셜 미디어 플랫폼은 더 높은 비율의 부정적 콘텐츠를 가짐.
     * 플랫폼의 크기가 커질수록 제대로 된 지원을 받을 확률이 낮아지고, 잘못된 정지나 금지에서 계정이 복원될 가능성도 줄어듦.

대규모 플랫폼의 문제

     * 대규모 플랫폼이 더 나은 조정과 스팸/사기 필터링을 할 것이라는 주장에 대한 의문 제기.
     * 구글 엔지니어와 사상가들은 대규모 플랫폼만이 효과적인 조정, 스팸 필터링, 사기 탐지를 할 수 있다고 주장하지만, 실제로는 소규모 검색 엔진이 SEO 남용에 더 저항력이 있음.
     * 자체 이메일 관리가 스팸 부담 때문에 불가능하다는 일반적인 인식에도 불구하고, 많은 사람들이 자신의 이메일을 관리하며 Gmail과 비슷하거나 더 나은 결과를 얻음.

대규모 플랫폼의 조정 문제

     * 마크 저커버그는 대형 기술 회사를 분할하면 조정 문제가 심화될 것이라고 주장함.
     * 저커버그의 주장은 대규모 플랫폼이 더 많은 자원을 가지고 있기 때문에 더 나은 조정을 할 수 있다는 것이지만, 실제로는 이러한 자원을 다른 곳에 사용함.
     * 예를 들어, 메타는 메타버스 개발에 500억 달러를 투자했지만, 조정 플랫폼과 기술에는 투자하지 않음.

지원 문제

     * 대형 플랫폼의 사용자 지원은 일반적으로 불만족스러움.
     * 일반적인 지원 채널은 비효율적이며, 사용자는 종종 표준적인 거절 편지나 카프카스러운 악몽을 겪음.
     * 유료 지원을 사용하는 경우에도 무료 지원과 크게 다르지 않은 경험을 보고함.
     * 대형 회사가 더 큰 규모로 성장함에 따라, 지원의 효율성을 높이기보다는 더 저렴하고 이윤을 극대화하는 방향으로 지원을 제공함.

GN⁺의 의견

     * 대규모 플랫폼이 더 많은 자원을 가지고 있음에도 불구하고, 사용자 경험의 질은 종종 더 작은 플랫폼보다 떨어짐. 이는 대규모 플랫폼이 자원을 이윤 극대화가 아닌 사용자 경험 개선에 사용하지 않기 때문임.
     * 사용자 지원의 질은 플랫폼의 크기에 반비례하는 경향이 있으며, 이는 대규모 플랫폼의 복잡성과 비효율적인 지원 시스템 때문임.
     * 이 글은 대규모 플랫폼의 문제점을 지적하며, 사용자들이 더 작은 플랫폼을 선택할 때 고려해야 할 중요한 요소들을 제공함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 대기업이 되는 것이 일반적으로 문제라는 의견.
          + 대기업은 개별 소비자에 대한 관심을 잃고, 시장 지위 보호에 집중.
          + 규모의 경제가 개별 기업에게는 이득이지만, 사회나 인류 전체에게는 해로움.
          + 대기업의 성장을 자연 현상으로 보되, 주기적으로 분할해야 한다는 주장.
     * 두 번째 댓글 요약:
          + 인터넷 사기 문제는 사기꾼들에게 책임을 묻지 않고 단순히 쫓아내는 데 그침.
          + 사기 산업이 수익성이 높아 지속적으로 성장.
          + 사기 행위를 신고하고 예방하는 과정이 부재.
          + 정부가 국제적으로 협력하여 사기 산업을 축소시키는 노력 필요.
     * 세 번째 댓글 요약:
          + 대형 플랫폼의 규모의 경제는 실제로 지원이나 사기 방지에 있지 않음.
          + 소규모 서비스는 문제 해결을 위해 노력하지만 대형 플랫폼은 시장 지배력으로 문제를 무시.
     * 네 번째 댓글 요약:
          + 커뮤니티가 성장함에 따라 사용자를 모더레이터로 성장시켜야 함.
          + 지속 가능한 모더레이터 확보 방법은 커뮤니티 내에서만 가능.
     * 다섯 번째 댓글 요약:
          + 대형 플랫폼이 사기 방지에 더 능숙하지만, 그 규모 때문에 더 많은 타깃이 됨.
          + 소규모 플랫폼은 덜 가치가 있어 사기가 덜 발생.
     * 여섯 번째 댓글 요약:
          + Reddit은 수천 개의 독립적으로 관리되는 소규모 서브레딧의 조합으로 좋은 예.
          + 자체 이메일 서버 운영은 전 세계를 대상으로 하기 때문에 문제가 많음.
     * 일곱 번째 댓글 요약:
          + 경쟁 증가는 중간 규모의 기업들이 더 나은 경험을 제공하도록 유도.
          + 소프트웨어 회사에 대해 중간 규모의 기업을 육성하는 것이 규제나 시장 경쟁 정신에 부합.
     * 여덟 번째 댓글 요약:
          + 아마존이 플랫폼에서 판매되는 모든 상품에 대한 책임을 지도록 하는 것이 해결책.
          + 광고를 게재하는 사업체는 광고주의 실제 이름과 주소를 제공할 수 있어야 함.
     * 아홉 번째 댓글 요약:
          + 대기업의 신화와 '작은 것이 아름답다'는 개념에 대한 논의.
          + 대기업이 경쟁 상황에서 살아남기 위해 만들어낸 신화와 능력에 대한 비판.
     * 열 번째 댓글 요약:
          + 아마존에서 분명히 가짜인 SD 카드/플래시 드라이브 판매에 대한 의문 제기.
          + 사용자 데이터 손실을 초래하는 가짜 제품에 대한 심각성 인식 부족 지적.
"
"https://news.hada.io/topic?id=13466","LlamaCloud 와 LlamaParse 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       LlamaCloud 와 LlamaParse 공개

     * LlamaCloud: 새로운 세대의 관리형 파싱, 수집, 검색 서비스. LLM과 RAG 애플리케이션에 프로덕션급 Context-Augmentation을 제공하기 위해 설계됨
          + LlamaParse: 표/그림 같은 객체가 포함된 복잡한 문서를 파싱하기 위한 기술. LlamaIndex 와 통합하여 복잡하고 반구조화된 문서에 대한 검색을 구축할 수 있게 함
          + 관리형 수집 및 검색 API: 데이터를 쉽게 로드, 처리, 저장하고 어떤 언어에서든 사용할 수 있는 API를 제공. LlamaHub 와 LlamaParse 및 통합된 데이터 저장소를 기반으로 동작

RAG는 데이터의 질에 달려 있음

     * LLM의 핵심은 구조화되지 않은 데이터 소스에 대한 지식 검색, 종합, 추출, 계획의 자동화임
     * 이를 위해 데이터를 로드, 처리, 임베딩하고 벡터 데이터베이스로 로드하는 새로운 데이터 스택 Retrieval-Augmented Generation (RAG)이 등장
     * RAG 스택은 기존 ETL 스택과 다르며, LLM 시스템의 정확성에 직접적인 영향을 미침
     * 시작은 쉽지만 프로덕션급 RAG를 구축하는 것은 어려움
          + 만족할 만한 결과를 생성하지 않음
          + 조정할 매개변수의 수가 너무 많음
          + PDF는 서식이 지저분해서 특히나 문제임
          + 지속적으로 업데이트 되는 데이터의 동기화는 매우 어려움
     * LlamaCloud와 LlamaParse는 RAG 애플리케이션을 더 빠르게 프로덕션에 투입하기 위해 데이터 파이프라인으로 구축됨

LlamaParse

     * LlamaParse는 복잡한 PDF 문서에 내장된 표와 차트를 RAG로 해석할 수 있게 하는 최첨단 파서임
     * 기존의 접근 방식으로는 불가능했던 복잡한 문서에 대한 질문에 답할 수 있게 함

관리형 수집 및 검색 API

     * LlamaCloud의 다른 주요 제품으로, 성능이 좋은 데이터 파이프라인을 쉽게 선언하고 LLM 애플리케이션에 깨끗한 데이터를 제공할 수 있음
     * 엔지니어링 시간 절약, 성능 향상, 시스템 복잡성 감소의 이점을 제공

출시 파트너 및 협력자

     * LlamaParse는 다양한 파트너와 협력하여 LLM 및 AI 생태계에서 데이터스택, MongoDB, Qdrant, NVIDIA와 같은 스토리지 및 컴퓨팅 파트너십을 구축함.

FAQ

     * LlamaCloud는 벡터 데이터베이스와 경쟁하지 않으며, 데이터 파싱 및 수집에 초점을 맞추고 있음. 인기있는 40개 이상의 벡터DB와 통합되어 있음
     * 검색 계층은 기존 저장 시스템 위의 오케스트레이션임

다음 단계

     * LlamaParse는 오늘부터 공개 프리뷰로 사용 가능하며, LlamaCloud는 제한된 기업 설계 파트너에게 개인 프리뷰로 제공됨

  Hacker News 의견

     * LlamaParse 개발팀의 일원으로, 이전에 여러 PDF -> 구조화된 텍스트 추출기를 개발한 경험이 있는데, LlamaParse는 다른 추출기들에 비해 개선된 점이 있음. 문자 추출을 위해 OCR과 PDF에서의 문자 추출을 혼합 사용하며, 문서 재구성을 위해 휴리스틱과 머신러닝 모델을 혼합 사용함. 재귀적 검색 전략과 결합하여 복잡한 텍스트에 대한 질문 응답에서 최상의 결과를 얻을 수 있음.
     * LlamaParse는 복잡한 표가 있는 PDF를 잘 구조화된 마크다운 형식으로 파싱하는 데 매우 뛰어난 독점 파싱 서비스를 개발함. 오픈소스 프로젝트가 커뮤니티 기여와 주목으로 유명해진 후 프로젝트 리더들이 VC 자금을 받고 독점적인 것을 만드는 것은 문제 아닌가?
     * Medium에 게시하는 이유를 이해하지 못함. Medium은 더 이상 읽을 수 없게 되었고, 관객이 접근할 수 있는 블로그 포스트가 있어야 함
     * LlamaParse가 unstructured.io와 직접 비교했을 때 어떤지 궁금함
     * LlamaParse에 대한 초기 경험이 인상적이지 않음. 이메일로 가입 시 무한 리디렉션 문제, Google로 로그인 후 PDF 파서에 대한 실망감. 이미 많은 옵션이 있는데 왜 이 서비스가 필요한지 혼란스러움.
     * LlamaParse는 어려운 문제를 해결하려고 시도하는 것 같음. 많은 기업 고객들이 PDF 파일을 파싱하고 데이터를 정확하게 추출할 필요가 있음. 인터페이스가 다소 혼란스러움. LlamaParse는 테이블의 숫자를 추출할 수 있지만, 출력이 표 형식으로 제공되지 않고 질문-응답을 통해서만 숫자에 접근할 수 있는 것으로 보임.
     * AWS Textract가 하는 것과 비슷하지 않음? 테이블과 양식에서 정보를 파싱하고 질의하는 기능이 있음. LI에게는 워크플로우와 RAG를 위한 검색 기록이 사용자에게 더 쉽게 만들어주지만, 왜 바퀴를 다시 발명하는지 의문.
     * LLMS를 사용하여 처음부터 가장 적절한 형식으로 데이터를 추출할 수 있는데, 왜 이를 구축하는지 의문. 비용 때문에 단기적으로는 의미가 있을 수 있지만, 장기적으로는 LLMS로 일반적으로 해결할 수 있는 문제.
     * RAG와 관련하여 반복적으로 마주쳤던 문제를 LlamaParse가 정확히 해결함. 구조화되지 않은 데이터에서 구조화된 정보를 얻는 것은 어려움.
     * 가격이 어떻게 될지에 대한 질문.
"
"https://news.hada.io/topic?id=13457","마이크로소프트, 자사의 AI 도구 사용자 감시 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      마이크로소프트, 자사의 AI 도구 사용자 감시 중

마이크로소프트, 인공지능 도구 사용자 감시 중

     * 마이크로소프트가 중국, 러시아, 이란의 해커들이 자사의 인공지능(AI) 도구를 사용하여 해킹 능력을 향상시키고 있음을 발견했다고 발표함.
     * 이들 해커는 Forest Blizzard, Emerald Sleet, Crimson Sandstorm, Charcoal Typhoon, Salmon Typhoon 등으로 추적되며, 대규모 언어 모델(LLMs)을 사용하여 사이버 작전을 강화하는 것으로 나타남.
     * 마이크로소프트나 OpenAI가 이러한 활동을 알 수 있는 유일한 방법은 챗봇 세션을 감시하는 것임.
     * 이용약관에는 사용자 감시에 대한 허가가 명시되어 있을 것이며, 마이크로소프트와 OpenAI가 AI 사용을 감시하고 있다는 것은 놀랍지 않지만, 이번 발표로 그 사실이 확인됨.

GN⁺의 의견

     * 이 기사는 마이크로소프트가 인공지능 도구 사용을 감시하고 있으며, 이를 통해 국가 지원 해커들의 활동을 추적하고 있다는 중요한 정보를 제공함.
     * 사용자 감시는 개인의 프라이버시와 보안에 대한 우려를 불러일으킬 수 있으나, 동시에 사이버 보안을 강화하고 국가 안보를 위한 중요한 조치로 볼 수 있음.
     * 이러한 감시 활동은 AI 기술의 이중적인 사용 가능성을 보여주며, 기술의 발전이 가져오는 새로운 윤리적, 법적 문제에 대한 논의를 촉발할 수 있음.

        Hacker News 의견

     * OpenAI API 사용자 데이터 처리에 대한 댓글 요약
          + OpenAI API의 이용약관(TOS)에 따르면, OpenAI는 서비스 제공과 남용 식별을 위해 최대 30일간 API 입력과 출력을 보관할 수 있음.
          + 법적으로 요구되지 않는 한, 30일 후에는 데이터가 시스템에서 삭제됨.
          + 사용자는 특정 사용 사례에 대해 데이터 보존을 요청하지 않을 수 있음(ZDR).
          + 데이터 처리에 대한 자세한 내용은 OpenAI의 플랫폼 문서 페이지에서 확인 가능.
     * Microsoft AI 도구 사용자 데이터 처리에 대한 댓글 요약
          + 사용자가 ""Microsoft가 AI 도구 사용자를 감시한다""고 주장하지만, 실제로는 Microsoft가 권위주의 국가의 적대적 정부가 AI 도구를 불법 활동에 사용하는 것을 발견한 것임.
          + 이용약관에 동의함으로써 사용자는 Microsoft가 이러한 데이터 추적을 할 수 있음을 인정함.
     * Google Bard 및 Gemini에 대한 댓글 요약
          + Google의 Gemini는 홈페이지에서부터 사용자 대화가 인간 검토자에 의해 처리되어 Gemini 앱의 기술 개선에 사용됨을 명확히 함.
          + 사용자는 검토자에게 보여지거나 Google이 사용하는 것을 원하지 않는 정보를 입력하지 말아야 함.
          + Google Workspace의 내용은 Gemini 개선을 위해 검토되거나 사용되지 않음.
          + 사용자는 Gemini 앱 활동을 끄면 미래의 대화가 검토되거나 기계 학습 모델 개선에 사용되지 않도록 설정할 수 있음.
     * 이용약관과 개인정보 보호정책에 대한 댓글 요약
          + 많은 기술 회사들이 이용약관에 명시된 내용을 통해 사용자의 AI 사용을 감시할 수 있는 권한을 가지고 있음.
          + 이용약관에 감시를 허용하는 조항이 있다면, 회사가 실제로 감시를 하고 있다고 가정하는 것이 합리적임.
          + 개인정보 보호정책은 사용자가 회사를 신뢰하도록 만들지만, 실제로 회사가 정책을 준수하는지 검증할 방법이 없음.
     * Microsoft의 사용자 데이터 모니터링에 대한 댓글 요약
          + Microsoft가 사용자의 AI 도구 사용을 모니터링하는 것은 놀랄 일이 아니며, 이는 이미 널리 알려진 사실임.
          + Microsoft를 포함한 여러 기술 회사들이 사용자의 대화 내용을 볼 수 있는 권한을 가지고 있으며, 이는 사용자의 명시적이고 철회 가능한 허가를 통해서만 이루어져야 함.
     * AI 도구 사용과 데이터 수집에 대한 댓글 요약
          + AI 도구를 사용하는 것은 사용자 데이터가 대량으로 수집될 것을 의미함.
          + 로컬에서 구동되는 AI만이 사용자 데이터 보호에 관심이 있는 경우에 사용해야 함.
     * AI 개발과 데이터 수집의 상관관계에 대한 댓글 요약
          + AI는 데이터에 기반을 두고 있으며, 더 많은 데이터를 수집할수록 AI를 더 잘 훈련시킬 수 있고, 이는 더 많은 사용자가 데이터를 제공하고자 하는 선순환을 만듦.
     * 플랫폼의 데이터 수집 및 남용 탐지에 대한 댓글 요약
          + 모든 플랫폼은 사용자의 입력을 수집하여 다음 모델을 훈련시키고, 남용을 탐지하는 것이 명백함.
"
"https://news.hada.io/topic?id=13543","마이크로소프트, OpenAI를 넘어서 Mistral과 다년간 협약 체결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                마이크로소프트, OpenAI를 넘어서 Mistral과 다년간 협약 체결

     * 마이크로소프트가 프랑스 인공지능 스타트업 미스트랄과 협약을 맺음
     * 이 협약은 마이크로소프트가 OpenAI 이외의 분야로 활동을 넓히려는 시도의 일환
     * 미스트랄은 파리 기반의 회사로, AI 모델을 시장에 출시하는 데 도움을 받게 됨

협약의 내용

     * 마이크로소프트는 미스트랄에 투자하며, 금융적인 세부 사항은 공개되지 않음
     * 협약에는 유럽 전역의 정부를 위한 애플리케이션 개발을 위한 연구 및 개발 협력 포함
     * 이 AI 모델들은 공공 부문의 특정 요구 사항을 해결하는 데 사용될 예정

미스트랄의 위치

     * 미스트랄은 마이크로소프트의 Azure 클라우드 컴퓨팅 플랫폼에서 상업적 언어 모델을 제공하는 두 번째 회사
     * 미스트랄의 공동 창립자 겸 CEO인 아서 멘쉬는 마이크로소프트의 신뢰가 중요한 발전이라고 언급

마이크로소프트와 OpenAI

     * 마이크로소프트는 이미 샌프란시스코 기반의 OpenAI에 약 130억 달러를 투자
     * 미국, EU, 영국의 경쟁 감시 기관에서 이 협력 관계를 검토 중
     * 마이크로소프트는 OpenAI를 통제하지 않으며, 두 회사는 중요한 파트너라고 강조

AI 경제의 부상

     * 구글과 아마존과 같은 다른 대형 기술 회사들도 생성 AI에 대한 투자를 확대
     * 생성 AI는 텍스트, 이미지, 코드를 몇 초 만에 생성할 수 있는 소프트웨어
     * 이 기술은 전 세계 산업을 변화시킬 것으로 분석가들은 믿음

미스트랄의 기술과 가치

     * 미스트랄은 대규모 언어 모델을 구축하며, 이는 생성 AI 제품을 구동하는 기술
     * 12월에 약 20억 유로의 가치 평가를 받으며 약 4억 유로 규모의 펀딩 라운드를 확보
     * 미스트랄의 모델은 오픈 소스로, 기술 세부 사항이 공개적으로 공개될 예정

AI 모델 개발의 인프라

     * 새로운 AI 모델을 훈련하고 개발하는 데 필요한 인프라는 막대한 비용이 듬
     * 경쟁할 수 있는 회사는 몇 십 개에 불과
     * 마이크로소프트는 독일과 스페인에 새로운 AI 데이터 센터에 56억 달러를 투자할 계획 발표

AI 칩 설계 및 개발에 대한 투자

     * AI 칩 설계 및 개발에 더 많은 투자가 이루어질 것으로 예상
     * 엔비디아는 이 분야를 선도하며, 최근 가치 순위에서 아마존과 구글 모회사 알파벳을 앞지름
     * 마이크로소프트는 인텔과 AMD와 같은 경쟁사와 함께 자체 반도체를 개발할 투자 계획

GN⁺의 의견

     * 이 협약은 마이크로소프트가 AI 분야에서 자사의 영향력을 확대하고자 하는 전략적 움직임을 보여줌. OpenAI와의 협력 외에도 다양한 AI 기술을 확보하려는 의도가 엿보임
     * 미스트랄과의 파트너십은 마이크로소프트가 오픈 소스 AI 모델에 대한 지원을 계속하겠다는 의지를 나타냄. 이는 개발자 커뮤니티에 더 많은 협력과 혁신의 기회를 제공할 수 있음
     * AI 기술의 빠른 발전과 상업화는 데이터 프라이버시, 알고리즘 투명성, 그리고 기술의 윤리적 사용에 대한 논의를 더욱 중요하게 만듦. 이러한 이슈들은 AI 기술을 도입할 때 반드시 고려해야 할 사항임
     * 마이크로소프트가 AI 칩 설계 및 개발에 투자할 계획을 밝힌 것은, AI 기술의 핵심 구성 요소인 하드웨어에 대한 통제를 강화하려는 시도로 볼 수 있음. 이는 장기적으로 AI 시장에서의 경쟁력을 높이는 데 기여할 수 있음
     * AI 모델을 개발하고 훈련하는 데 필요한 인프라의 비용과 복잡성을 고려할 때, 클라우드 서비스 제공업체와의 협력은 중소기업이나 스타트업에게 중요한 자원이 될 수 있음. 이러한 협력은 기술 혁신과 시장 다양성을 촉진하는 데 중요한 역할을 할 것임

        Hacker News 의견

     * Mistral의 폐쇄 모델에 대한 독점 계약 여부
          + Mistral이 새로운 모델을 폐쇄 소스로 출시하는 것은 예상되었던 일임.
          + 오픈 모델에서 명확한 수익 창출 방법이 없었음.
          + Mistral이 모델의 파인튜닝을 허용하지 않는 이유는 혼란스러움. 파인튜닝은 GPT-4보다 더 나은 성능을 낼 수 있는 방법일 수 있음.
     * Mistral과 Meta의 관계에 대한 의문
          + Mistral이 Meta로부터 가능해졌음에도 불구하고, Meta의 라이선스에 사용자 제한이 있는데, 이것이 Microsoft의 호스팅에 적용되지 않는지 의문.
          + 경제적인 측면이 이상하며, Meta로서는 자신들의 모델을 누군가가 가져가서 Microsoft의 도움으로 수익화하는 것에 대해 화가 날 수 있음.
     * Satya Nadella의 전략적 움직임
          + Satya Nadella가 OpenAI와의 드라마 이후 스마트한 움직임을 보임.
          + OpenAI의 백업이자, OpenAI가 너무 강력해질 경우 협상력을 갖기 위함.
     * Microsoft의 전략에 대한 조심스러운 낙관론
          + Microsoft가 과거와 달라졌기 때문에, 이번 파트너십이 Azure 촉진을 위한 것이길 희망.
          + 오픈 소스에 대한 접근이 OpenAI처럼 폐쇄적이 되지 않기를 바람.
     * Mistral과의 파트너십에 대한 Microsoft Azure 블로그 포스트
          + Microsoft Azure 블로그 포스트 링크
     * 새 모델이 Huggingface에 없는 것에 대한 우려
          + 새 모델이 Huggingface에 없는 것이 우려됨.
          + Microsoft가 모델과 코드의 오픈 소싱을 막지 않기를 바람.
     * Microsoft의 반독점 문제 가능성
          + Microsoft가 생성 AI와 관련하여 반독점 문제로 곧 다시 문제에 직면할 것이라는 예상.
     * Mistral Large on Azure 소개
          + Mistral Large on Azure 소개 링크
     * AI 경쟁이 시장에 미칠 영향에 대한 우려
          + AI 경쟁이 시장을 왜곡하고, 대형 기술 회사의 재정에 영향을 미치며, 이 분야에서 거품을 만들 가능성에 대한 우려.
"
"https://news.hada.io/topic?id=13489","2024년 React 트렌드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            2024년 React 트렌드

Astro (React와 함께)

     * 작년 Astro가 Gatsby의 후속작으로 등장
     * Astro는 주로 정적 웹사이트로 알려졌으나, 웹 애플리케이션과 API 엔드포인트로도 인기를 끌고 있음
     * Astro로 구축된 웹사이트는 서버에서 렌더링을 처리하여 기본적으로 성능이 뛰어남
     * Astro는 React나 UI 프레임워크 없이도 사용가능하여, "".astro"" 파일을 통해 UI 컴포넌트를 만들 수 있음
     * React와 함께 사용할 경우, HTML과 CSS만 브라우저로 전송되며, 필요한 경우에만 자바스크립트를 제공함
          + ""fast-by-default""

인증 (React에서)

     * 여러 스타트업과 오픈 소스 프로젝트 덕분에 React에서의 인증이 다시 흥미로워짐
     * Firebase Authentication, Auth0, Passport.js, NextAuth 외에도 새로운 인증 대안이 등장
     * Supabase는 오픈 소스 Firebase 대안으로 다양한 기능을 제공
     * Clerk는 인증에만 집중하며, React에서 쉽게 사용자 등록 및 로그인이 가능함
     * Lucia는 Astro와 함께 인기를 얻었으며, 오픈 소스 및 데이터베이스와의 명확한 추상화 계층을 제공함

tRPC를 이용한 풀스택 React 애플리케이션

     * tRPC는 타입 안전한 풀스택 애플리케이션을 위한 내 최애가 되었음
     * Prisma는 백엔드 애플리케이션의 데이터베이스 모델에서 유형을 생성하는 반면, tRPC는 백엔드에서 프론트엔드의 API 계층에 걸쳐 유형 안전성을 유지
     * 원격 프로시저 호출이라는 tRPC의 기본 특성을 통해 클라이언트 애플리케이션은 일반 함수를 호출하여 백엔드의 API를 호출할 수 있음
     * tRPC는 JSON-RPC 사양과 HTTP 전송 계층을 사용하며, react-query와 결합하여 효율적인 캐싱 및 요청 배치를 지원함

React 서버 컴포넌트와 Next.js

     * React Server Components(RSC)는 지난해 Next 13.4를 통해 커뮤니티에 의해 구현되고 채택됨
     * RSC는 웹 개발에 큰 패러다임 전환을 가져오고 있음
     * RSC는 더 큰 애플리케이션에서 React 컴포넌트를 사용하는 방법을 다시 생각하게 만들기 때문에 React Hook보다 더 큰 변화일 수 있음
     * RSC를 사용하면 컴포넌트가 브라우저로 전송(또는 스트리밍)되기 전에 서버의 컴포넌트 수준에서 데이터 가져오기를 수행할 수 있어서 성능이 향상됨
     * tRPC와 react-query가 클라이언트-서버 통신에 사용되는 상황에서 RSC가 서버에서 데이터를 가져오는 경우엔 어떤 역할을 하게 될지 궁금. 올해는 어떤 결과가 나올지 기대됨

TanStack Router for SPA React

     * Tanner Linsley는 SPA(Single Page Applications)가 아직 죽지 않았다고 주장함
     * react-query 와 react-table을 만드는데 참여한 그가 새로 발표한 라이브러리 TanStack Router
     * 많은 개발자가 내장 라우터와 함께 Next.js 및 Remix(가장 인기 있는 React 라우터를 내부적으로 사용하며 RSC 구현에도 중점을 두고 있음)와 같은 메타 프레임워크를 채택하고 있지만, 아직 아무도 React용 타입 안전 라우터를 처음부터 만들지 않았음
     * TanStack Router는 React 생태계에서 중요한 공백을 메우며, TypeScript 지원을 갖춘 새로운 라우터임
     * 이 라우터는 개발자가 타입 안전한 방식으로 URL 상태를 읽고 쓸 수 있게 해줌

Vercel, React를 Edge로 밀어붙이다

     * Vercel은 RSC 무브먼트에 깊이 관여된 Next.js를 밀고 있는 회사
     * 여러 핵심 개발자가 Vercel에 고용되었기 때문에 많은 개발자는 Vercel이 React의 원동력이라고 생각함
     * Vercel은 RSC로 React의 경계를 확장할 뿐만 아니라, Next.js를 통해 React 애플리케이션을 효율적으로 배포하고 사용자에게 전달하는 방법도 확장하고 있음
     * Vercel에서 Next 애플리케이션을 사용하면 엣지 런타임을 통해 React 컴포넌트를 스트리밍할 수 있음
     * 이렇게 엣지에서 React 컴포넌트를 스트리밍하는 것은 성능에 큰 영향을 미침
     * 전 세계에 복제본을 보유한 PlanetScale과 같은 서버리스 DB와 결합하여 향후 애플리케이션 호스팅 방법(또는 더 나은 위치)에 대한 흥미로운 트렌드가 될 것

React용 번들러: Turbopack 대 Vite

     * Turbopack은 Webpack의 후속작으로, 아직 프로덕션에서 사용할 단계는 아니지만 Next.js 애플리케이션에서 로컬 개발에 사용 가능함
     * 과거에는 번들러가 이미 많은 책임을 가지고 있었지만, 클라이언트와 서버 컴포넌트를 개발 및 생산 환경에서 결합하는 추세로 인해 새로운 종류의 번들러가 필요함
     * 개인적으로 Vite와 그 서버 측 기능이 Next.js에서 사용되는 것을 보고 싶었지만, Remix와 다른 메타프레임워크 및 SPA 들이 Vite를 채택하는 동안 Verce/Next는 Turbopack 작업을 시작

React 컴파일러 (React Forget으로 알려짐)

     * React 개발자들은 useCallback, useMemo, memo의 사용에 대해 불만을 가짐
     * React 팀은 React 애플리케이션의 모든 메모화를 자동화하는 React Compiler라는 컴파일러를 (비교적 조용히) 개발 중
     * 함수(useCallback), 값(useMemo), 컴포넌트(memo)를 메모하는 수동 프로세스가 앞으로는 사라질 것으로 기대
     * React가 이 모든 것을 메모화하여 다음 렌더링에서 모든 것을 다시 계산할 필요가 없도록 처리할 것
     * React Compiler는 이러한 수동 메모이제이션을 자동화하여 React 애플리케이션의 성능을 개선할 것임
     * 아마도 React 19 및 React Conf 2024 등에서 발표될 것

Biome

     * ESLint와 Prettier의 설정과 상호 작용에 대한 불만이 있으나, Biome(구 Rome)은 이를 대체할 빠르고 통합된 도구 체인 솔루션을 제공하고자 함
     * 또다른 대안은 매우 유망해 보이는 올인원 툴체인의 대안은 oxc(JavaScript Oxidation Compiler)

Headless UI 라이브러리 for React

     * React 개발자들은 매년 좋아하는 UI 라이브러리를 변경하는 경향이 있음
     * 몇 년 전에는 Material UI를 사용하다가 Semantic UI/Ant Design으로, 그다음에는 Chakra UI로, 그리고 Mantine UI로 넘어갔고, 작년에는 shadcn/UI에 정착
     * 이전의 모든 선택은 주로 디자인과 사용성에 대한 욕구에서 비롯된 것이었지만, shadcn/UI에서는 몇 가지가 달라졌음
     * shadcn/UI는 Tailwind를 완전히 수용한, 컴포넌트를 맞춤 디자인하는 첫 번째 인기 UI 라이브러리
     * Headless UI 라이브러리는 디자인 없이 기능성과 접근성을 제공하는 추세임
     * Styled Components 나 Emotion 같은 CSS-in-JS 솔루션은 클라이언트/브라우저에 부담을 지우기 때문에 StyleX 같은 새로운 CSS-In-JS 솔루션은 유틸리티-우선 CSS로 컴파일하여 이 문제를 완화함

   https://github.com/facebook/react-strict-dom
   react-strict-dom 도 기대중입니다.
   제대로 나오면 react-native-web 을 대체할 수 있을것같아요.

   React Forget 엄청 기대되네요

   나오기 전에는 대안이 있긴 있습니다. 호환성이 문제죠.
   https://news.hada.io/topic?id=9622

   tRPC는 파일 업로드(formdata)와 응답 스트리밍 지원하면 최애 수준일텐데 너무한 바램이겠죠...
"
"https://news.hada.io/topic?id=13498","페덱스 고마워요, 이것이 우리가 계속 피싱 당하는 이유입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   페덱스 고마워요, 이것이 우리가 계속 피싱 당하는 이유입니다

FedEx 덕분에 계속해서 피싱을 당하는 이유

     * FedEx를 사칭한 피싱 이메일이 빈번하게 발생하고 있음
     * 이러한 피싱 이메일은 사용자들이 실제 FedEx 이메일로 오인하게 만들어 개인 정보를 탈취하려 함
     * 사용자들은 이메일의 진위를 판단하기 어려워 피싱에 쉽게 노출될 수 있음

GN⁺의 의견

     * 피싱 방지를 위해서는 이메일 발신자의 신뢰성을 확인하는 습관이 중요함
     * FedEx와 같은 대형 기업들은 자사의 이름을 도용한 피싱 시도에 대해 공식적인 대응 방안을 마련해야 함
     * 이 기사는 피싱의 위험성과 그로 인한 개인 정보 유출의 심각성을 알리는 데 도움이 됨

        Hacker News 의견

     * FedEx의 디지털 플랫폼 보안 문제
          + 이전 세입자의 개인 배송 지침과 건물의 개인 차고 코드에 대한 접근이 검증 없이 가능함.
          + 특수 문자가 포함된 비밀번호 사용 시 사이트 일부 기능 오류 발생, 새 주소 추가 불가능.
     * 은행에서의 사기 의심 전화
          + 은행을 사칭한 사람이 전화로 소셜 시큐리티 번호 요구.
          + 의심스러운 요청에 대한 경계심, 공식 은행 번호로 확인 시도.
          + 실제 은행 직원이었으나, 정보 제공 거부로 대출 신청 취소됨.
     * 회사 IT 센터의 의심스러운 이메일
          + 공식 도메인과 다른 이메일 주소 사용.
          + 계정 만료 임박을 알리는 긴급 메일.
          + 링크 클릭 외 해결 방법 미제공, 실제 이메일임에도 불구하고 의심스러운 내용.
     * 독일 은행의 USB 스틱 우편 발송
          + 은행의 새 일반 약관을 USB 스틱에 담아 발송한 사례.
     * 자동차 구매 후의 의심스러운 이메일
          + 보험 증명을 요구하는 은행의 이메일이 의심스러움.
          + 실제로 은행의 정당한 요청이었으나, 이메일의 비전문적인 형식으로 인해 혼란.
     * FedEx의 부실한 SMS 메시지
          + FedEx의 SMS 메시지가 매우 부적절하고 전문성이 결여된 내용.
     * FedEx의 늦은 청구서 발송
          + 패키지 수령 7개월 후에 청구서 발송, 지불 정보 누락.
          + 청구서에 '즉시 지불'이라는 표시가 있었으나, 지불 후에도 두 번째 알림 발송.
     * 외부 클라우드 제공업체로 인한 보안 문제
          + 회사 내부에서 진행되는 가짜 피싱 캠페인을 통해 직원들의 경계심 유지.
          + 정당한 회사 자료임에도 불구하고 의심을 불러일으키는 문제.
     * 제안된 법안
          + 회사의 전자 통지가 의심스러워 합리적인 사람이 그 진위를 의심할 경우, 모든 재정적 및 법적 결과는 발신자에게 있어야 함.
"
"https://news.hada.io/topic?id=13510","전 Gizmodo 기자, 'Slackbot'으로 이름 바꾸고 몇 달간 탐지되지 않아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             전 Gizmodo 기자, 'Slackbot'으로 이름 바꾸고 몇 달간 탐지되지 않아

전 Gizmodo 작가, 'Slackbot'으로 이름 바꾸고 몇 달간 탐지되지 않아

     * 전 Gizmodo 작가인 Tom McKay가 회사를 떠난 후 자신의 이름을 'Slackbot'으로 바꾸고 몇 달 동안 관리자들의 눈을 피해 Slack에서 활동함.
     * McKay는 자신의 프로필 사진을 Slackbot 아이콘과 유사하게 바꾸고, 특수 문자를 사용하여 Slack에서 이미 사용 중인 'Slackbot'이라는 이름을 사용할 수 있었음.
     * 이러한 변장을 통해 McKay의 계정은 삭제되지 않고 몇 달 동안 존재할 수 있었으며, 동료들에게 봇처럼 메시지를 보낼 수 있었음.

Microsoft의 거대한 Activision Blizzard $68.7억 달러 인수 거래의 다음 단계는?

     * 영국 규제 기관이 Microsoft의 Activision Blizzard 인수 거래에 타격을 가함.
     * Microsoft는 거래를 유지하기 위해 투쟁해야 하며, 향후 몇 주 안에 중요한 EU 결정이 있을 예정임.

   GN⁺의 의견:
     * 이 기사는 기술적인 장난과 보안의 중요성에 대한 흥미로운 사례를 제공함. Tom McKay의 창의적인 변장은 기업의 보안 시스템과 관리의 허점을 드러냄.
     * Microsoft와 Activision Blizzard의 거래는 기술 산업 내에서 큰 영향을 미칠 수 있는 중요한 사건이며, 이는 기업 인수와 경쟁 법규에 대한 관심을 불러일으킴.
     * 이러한 사건들은 소프트웨어 엔지니어들에게 보안과 기업 정책의 중요성을 상기시키며, 업계 동향에 대한 인식을 높이는 계기가 됨.

        Hacker News 의견

     * 전직 직원이 모뎀 랙 컨트롤러 모듈에 'Ringing'이라는 프로비저닝 프로필을 만들어 128Kbit ISDN 서비스를 1년 넘게 눈에 띄지 않게 사용함.

          + 모뎀 랙 상태 페이지에서 'Ringing'으로 표시되어 다른 전화처럼 보이게 하여 탐지되지 않았음.

     * 2016년 컨설팅 회사에서 Slack에서 서로의 이름을 변경할 수 있었던 일화 공유.

          + 모든 사람이 '아빠'로 이름을 바꾸는 장난을 치며 즐거운 시간을 보냈음.

     * 이름 변경을 제한하는 방법이 문제를 해결하지 않음을 지적하며, 실제 이름이 Jira인 사람도 있을 것이라고 언급.

          + 이름 변경을 제한하는 것만으로는 충분하지 않으며, 실제로 Jira라는 이름을 가진 사람도 있을 수 있음.

     * 회사에서 고객 대시보드를 와일드카드 서브도메인으로 설정했을 때 발생하는 문제를 설명.

          + www나 blog와 같이 기존 레코드와 충돌하는 대시보드 슬러그를 선택하면 대시보드 접근 불가능.
          + 고객이 스스로 문제를 해결할 수 없어 지원팀의 도움이 필요함.

     * 유니코드 문자를 사용한 장난에 대한 이야기와 이를 감지하는 vim 플러그인 소개.

          + 유사한 모양의 유니코드 문자를 사용하여 동료 개발자를 장난치는 방법과 이를 감지하는 vim 플러그인에 대한 정보.

     * 서비스 계정으로 위장하여 눈에 띄지 않게 하는 전략을 칭찬.

          + 서비스 계정처럼 보이게 하여 아무도 건드리지 않는 것이 최고의 은신처임.

     * 회사가 컴퓨터 사기 및 남용 법률을 이용하여 이러한 트릭에 대응할 수 있다는 점 언급.

          + 컴퓨터 사기 및 남용 법률을 통해 회사가 이러한 트릭에 대응할 수 있음.

     * Slack에서 이름 변경을 제한하지 않는 것이 큰 회사들에게 보안 문제를 일으킬 수 있다는 의견.

          + CEO나 slackbot으로 이름을 바꿔 사람들이 차이점을 알아채지 못할 때까지 속일 수 있음.

     * Slack에서 전직 직원이 slackbot으로 위장했지만, 사람들이 그를 알아보고 Tom이라고 부르는 등 탐지됐다는 사실을 지적.

          + 전직 직원이 slackbot으로 위장했지만, 동료들이 그를 알아보고 반응함.

     * 한 직원이 회사를 떠난 후에도 Slack 계정이 비활성화되지 않아 비밀 채널을 만들고 친구들과 소통함.

          + 비활성화되기 전까지 비밀 채널을 통해 친구들과 소통하는 재미있는 시간을 가짐.

     * 기업에서 단일 로그인 시스템을 사용하여 이러한 문제를 해결할 수 있다는 제안.

          + 단일 로그인 시스템을 통해 직원이 회사 서비스에 로그인하지 못하게 하여 문제를 해결할 수 있음.
"
"https://news.hada.io/topic?id=13488","혼돈을 받아들임으로써 미루는 습관을 멈추세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        혼돈을 받아들임으로써 미루는 습관을 멈추세요

오늘은 완벽하지 않지만 내일은 더 나아질 것

     * 미래를 단순화하는 뇌의 경향성
     * ""생산적인 내일""에 대한 기대와 그로 인한 자기 비난
     * 일상의 불완전함을 핑계로 한 산만함과 지연

대신 혼란을 받아들여라

     * 완벽한 순간의 부재 인정
     * 계획대로 되지 않을 것에 대한 예상
     * 불완전함을 기회로 삼아 적극적으로 대처

루틴에 대해 소중하게 여기지 마라

     * 이상적인 루틴의 함정
     * 생활의 혼란을 고려하지 않는 루틴의 취약성

일에 대해 소중하게 여기지 마라

     * 작업을 적대적으로 보는 경향
     * 과장된 작업 인식과 그로 인한 지연
     * 작업을 작은 단계로 보고 접근하는 태도의 중요성

집중력이 완벽할 것이라 기대하지 마라

     * 작업 초반의 분산된 집중력
     * 작업 세션 중 집중력의 변화 인정

생산성을 스펙트럼으로 생각하라

     * 0% 또는 100% 생산성의 비현실적 기대
     * 50% 생산성 목표의 달성 가능성과 긍정적 영향

올바른 방향으로 완벽하지 않은 행동을 찾아라

     * 완벽한 행동의 부재 인정
     * 시행착오를 통한 인간 성취의 실체
     * 완벽하지 않은 시도의 가치

요약

     * 일상의 복잡성과 불완전함
     * 루틴과 집중력에 대한 비현실적 기대의 문제
     * 완벽한 시작을 추구하는 대신 어디서든 시작할 것

   GN⁺의 의견:
     * 이 글은 생산성과 지연에 대한 현실적인 접근을 제공함으로써, 독자들에게 일상의 불완전함을 받아들이고 그럼에도 불구하고 작업을 계속할 수 있는 동기를 부여한다.
     * ""완벽하지 않은 행동이 완벽한 무행동보다 낫다""는 메시지는 독자들이 완벽주의의 압박에서 벗어나 실제로 행동에 옮기는 데 도움을 준다.
     * 이 글은 모든 사람들이 일상에서 겪을 수 있는 생산성 문제에 대해 공감하고, 그 문제를 극복하기 위한 구체적인 방법을 제시한다.

        Hacker News 의견

     * 과도한 단순화와 14일 안에 산만함 없는 삶을 약속하는 제품에 대한 불만

     40년 이상의 고민 끝에 ADHD 진단을 받고 필요한 언어, 도구, 지원을 얻어 실질적인 변화를 시작함. 이전의 모든 생산성 기법과 앱은 실패를 반복하며 스스로를 만성적인 지연자로 인식하게 만들었음. 이러한 과정은 결국 돈과 일시적인 만족감만을 가져다주고, 결국 실망과 자기혐오로 이어짐.
     * 실패에 대한 두려움 진단과 그것이 진전을 막는 방식

     Bridgewater에서 처음 몇 주 동안 실패에 대한 두려움 진단을 받음. 완벽한 계획 없이는 시작하지 않으려는 경향이 있었으나, 이는 불안의 한 형태로, 세상이 위험하다고 가정할 때 모호한 상황에 진입하는 것은 부정적임. 반면, 세상이 잘 풀릴 것이라는 믿음은 모호한 길을 나아가게 함. 완벽함이 없으면 지연하는 경향이 있지만, 중요한 것은 최종 결과를 염두에 두고, 지저분한 단계가 그 결과를 조금이라도 가능하게 한다면 흥분을 가지고 그 단계를 밟아야 함.
     * 동일한 사용자가 게시한 procrastination 관련 게시물의 패턴

     대부분의 게시물이 procrastination을 주제로 하며, 같은 사용자에 의해 게시됨. 사용자가 사이트의 저자인지 의문을 제기함.
     * 생산성 조언이 사람을 로봇처럼 만들려는 경향에 대한 비판

     생산성 조언은 종종 최대 생산성을 목표로 함. 하지만 중요한 것은 지속성이며, 매일 12시간 또는 8시간 일할 필요는 없음. 생산적인 시간은 몇 시간에 불과하지만, 이 시간들이 쌓여 결국 일이 완성됨. 개인 프로젝트에도 같은 철학을 적용하며, 중단이 생기더라도 다른 날에 계속할 수 있음. 결국 완성하는 것이 중요함.
     * 'procrastination'에 대한 조언을 직업으로 삼은 사람에게 받는 것에 대한 불편함

     만약 자신이 지연을 경험한다면, 직업을 그만두고 원하는 일을 직업으로 삼는 것이 조언이 될 수 있지만, 이는 종종 생계를 유지하기 어려움.
     * 생산적인 시간 동안 특별한 색상의 케이스와 같은 물리적 신호를 추가하는 제안

     생산적인 시간을 상기시키기 위해 전화기나 시계에 특별한 색상의 케이스를 추가하는 것이 도움이 될 수 있음.
     * 불완전한 상황에서도 일을 계속할 수 있는 능력의 중요성

     불완전한 상황에서도 일을 계속하는 능력을 개발하는 것이 중요함. 완벽한 시간을 기다리는 것이 지연의 근본 원인임. 10%라도 진행하는 것이 0%보다 낫다고 생각함. 완벽주의자로서 실제적이고 실용적인 해결책을 받아들이기 시작하면서 삶이 개선되고 가벼워짐.
     * 작은 작업을 완수하기 위해 25-30분의 끊김 없는 시간을 찾는 조언

     작은 작업을 완수하기 위해 짧은 시간을 확보하고, 완성하지 못하더라도 진행 상황과 다음 단계를 기록하는 것이 도움이 됨. 기록은 진행 상황을 추적하고 움직임을 느끼게 하며, 다음 시도에서 맥락을 쉽게 되찾을 수 있게 함.
     * 완벽한 환경에서 형성된 습관과 실제 혼란스러운 환경에서 형성된 습관에 대한 생각

     완벽한 환경에서 형성된 습관은 환경이 바뀌면 사라지기 쉬우나, 실제 혼란스러운 환경에서 형성된 습관은 변화에 강하지만 시작하기 어려움.
     * 지연의 원인으로 화상과 생물학적 건강 문제를 꼽음

     지난 3년간 지연을 겪었으나, 화상과 알지 못했던 생물학적 건강 문제를 해결하고 나서 지연이 사라짐. 생물학적으로 건강하지 않다면 어떤 철학도 도움이 되지 않음.
"
"https://news.hada.io/topic?id=13533","Ask GN: GN+의 의견은 사람의 검수를 통해서 작성되는 것인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ask GN: GN+의 의견은 사람의 검수를 통해서 작성되는 것인가요?

   GN+의 의견은 사람의 검수를 거치는 것인지, 또는 별도의 절차를 거치는지 궁금합니다. 사이트 내의 컨텐츠에 대한 질문이라 메일로 문의해야 하는지 확실하지 않아서 Ask GN의 형태로 여기에 문의를 게시합니다

   GN+의 일부 게시물에는 'GN+의 의견'이란 컨텐츠가 포함되어 게시되고 있습니다. 본문의 내용 이외에 추가로 시사점을 제공하는 것은 긍정적이나, 본문의 키워드가 반복되어 있는 평이한 요약문으로 보이고 관점이나 경험은 제외된 것 같이 보입니다. 주어진 내용에 대해 신중한 접근을 주문하는 의견은 본 적이 없었고, 개인적으로는 정말 이런 내용에 의견이란 이름을 붙일 수 있는지 의문이 들었습니다.

   현재 GeekNews 운영 여력안에서 개선이 가능한 사항인지는 알 수 없습니다만, 신기술을 비판적으로 수용할 수 있는 배경 지식이 같이 제시된다면 GN+의 의견이 좀 더 이용자분들에게 의미있는 시사점을 제공할 수 있을 것이라 생각합니다. 해커뉴스와 같은 신기술 사이트를 보면서 개인적으로 고려하는 사항을 생각나는 대로 공유드립니다.
    1. 업계에 같은 기능의 제품이나 프로젝트가 존재하는지
    2. 무엇을 Trade-off해야 하는지
    3. 기술 선택에 의한 득과 실이 무엇인지

   해당 내용은 LLM에 의해 자동으로 작성되는 것입니다.
   말씀하신 의견을 반영해서 프롬프트를 개선시켜 보겠습니다.

   사실은 이용자분들이 그런 의견을 적어 주시면 더 좋긴 합니다만.. ^^;;

   네 이용자분들이 의견을 내주시는게 제일 좋습니다. 다만 초두효과(primary effect)에 의해서 의도적으로 해당 주제에 대해 고민하지 않는 이상 보충 의견을 내는 것에는 현실적인 한계가 있다고 생각합니다.

   기존의 의견은 그대로 두고 추가 고려사항에 대해서 댓글을 달아주면 어떨까 합니다. 해커뉴스에서 수집된 게시글에 대해서는 해커뉴스 의견을 별도로 명시하고 있는 것처럼요. 일례로 osquery 같은 경우에는 ""what to consider adopting 'osquery' in our workflow?"" 프롬프트로 고려사항 생성이 가능했습니다. 모든 경우에 LLM으로 고려사항이 생성 가능한지는 장담할 수 없습니다만 시도해 볼만한 가치는 있다고 생각합니다
"
"https://news.hada.io/topic?id=13504","SQL 500줄로 구현된줄로 구현된 GPT

데이터베이스 쿼리 최적화 방법

     * 데이터베이스 쿼리를 빠르게 만드는 방법에 대한 설명.

GPT 모델을 SQL로 구현하기

     * GPT 모델을 SQL로 구현하는 방법에 대한 이론과 실제 구현 과정.
     * GPT 모델이란 입력된 텍스트 문자열을 받아 문자열과 숫자의 배열을 반환하는 함수임.
     * 이 함수는 결정론적이며, 동일한 입력에 대해 항상 같은 출력을 반환함.

이론

     * GPT 모델의 내부 작동 원리에 대한 간략한 설명.
     * 생성적 대규모 언어 모델이란 기술적 관점에서 무엇인지에 대한 설명.
     * 함수의 반환값은 입력된 프롬프트를 이어갈 단어와 그 확률을 나타내는 튜플의 배열임.

값의 의미

     * 함수가 반환하는 값은 단어와 해당 단어가 프롬프트를 이어갈 확률을 나타내는 숫자로 구성된 튜플의 배열임.

다양한 텍스트 생성 방법

     * 대규모 언어 모델은 텍스트 애플리케이션에서 사용되며, 모델이 제안하는 단어를 선택하여 프롬프트에 추가하는 방식으로 작동함.
     * 이 과정은 인간 언어의 문법, 구문 및 지능과 추론을 담은 텍스트를 생성함.

Generative Pre-trained Transformer의 의미

     * ""Generative""는 텍스트를 생성한다는 의미이며, ""Transformer""는 특정 유형의 신경망을 사용한다는 것을 나타냄.
     * ""Pre-trained""는 모델이 텍스트를 이어가는 능력이 특수한 작업을 위한 사전 훈련 단계로 생각되었으나, 충분히 큰 모델은 추가 훈련 없이도 인간 언어 지시를 따를 수 있음을 나타냄.

생성

     * GPT2를 사용하여 프롬프트에서 텍스트를 생성하는 과정 설명.
     * 텍스트를 토큰 목록으로 변환하고, 알고리즘을 실행하여 후보 토큰의 확률을 계산함.
     * 다음 토큰을 선택하고 토큰 목록에 추가한 후, 충분한 단어가 생성될 때까지 이 과정을 반복함.

토크나이저

     * 텍스트를 신경망에 입력하기 전에 숫자 목록으로 변환하는 과정.
     * GPT2는 Byte pair encoding 알고리즘의 변형을 사용하여 토크나이저를 구현함.

임베딩

     * 토큰이 인간 언어의 일부를 나타내므로, 텍스트 완성에 필요한 토큰 간의 관계를 인코딩해야 함.
     * GPT2는 각 토큰에 대해 768차원의 벡터를 사용하여 임베딩함.

주의 메커니즘

     * Transformer 아키텍처의 핵심인 자기 주의 메커니즘에 대한 설명.
     * 각 토큰의 벡터가 서로 영향을 미치도록 하여 마지막 벡터에 속성을 전달함.

피드포워드

     * 심층 신경망에서 수행되는 단계로, 여러 계층을 통해 입력을 처리함.
     * 각 계층은 학습된 파라미터를 사용하여 입력을 변환함.

블록

     * 이전 단계에서 설명한 과정이 여러 계층(블록)에 걸쳐 반복됨.
     * 각 블록의 출력은 다음 블록의 입력으로 사용됨.


GN⁺의 의견

     * 이 글은 데이터베이스 전문가나 소프트웨어 엔지니어에게 매우 유익하며, GPT 모델을 SQL로 구현하는 복잡한 과정을 이해하는 데 도움이 될 수 있음.
     * GPT 모델의 기본 원리와 구현 방법을 설명함으로써, 독자들은 인공지능 언어 모델의 작동 방식에 대한 통찰력을 얻을 수 있음.
     * 이 글은 기술적인 내용을 담고 있지만, AI와 데이터베이스 기술의 융합에 대한 흥미로운 사례를 제공함으로써, 해당 분야의 최신 동향을 이해하는 데 도움이 됨.

        Hacker News 의견

     * 이것은 아름다운 일이다. 저자는 SQLite를 사용하여 같은 방향으로 연구를 진행하고 있었으며, 신경망을 도입하기에는 아직 멀었다고 말함. makemore 강의 시리즈에 영감을 받아, 1시간 정도 지난 후에는 신경망을 사용하기 시작했는데, 이것이 저자가 도달한 정도임. 관계형 모델로 나누는 것이 실제로 매우 좋은 연습이 됨.
     * 데모는 좋지만, 기사에서 인과 마스킹에 대한 설명이 혼동되어 있음. 인과 마스킹은 모델이 훈련 중에 미래의 토큰을 ""엿보는"" 것을 방지하기 위해 존재하며, GPT와 같은 구조에서는 추론 중에 자기 회귀적 측면을 강제하기 위해 존재함. 추론 중에는 어쨌든 마지막 토큰만 사용하므로, 이 토큰은 전체 입력 시퀀스를 주목할 것임. 따라서 이 토큰은 확실히 마지막 토큰의 임베딩만으로 결정되는 것은 아님.
     * GPT 드라이버 루프의 정확한 표현인지 물음. 코드는 문자열을 토큰 목록으로 변환하고, 알고리즘을 실행하여 토큰의 확률을 반환하며, 후보 목록에서 다음 토큰을 선택하고, 토큰 목록에 추가한 후, 생성을 멈출지 결정하는 과정을 반복함. 마지막으로 토큰 목록을 문자열로 변환하여 반환하는 것으로 보임. 이것은 Shlemiel the painter의 알고리즘을 구현하는 상태 머신과 매우 유사해 보이며, 생성 작업의 내재된 계산 비용에 의문을 제기함.
     * 현대의 머신러닝은 튜링 완전성을 요구하지 않지만, 사람들은 AGI의 가능성을 고려하고 있음. 튜링 완전성이 필요하지 않다면 그것은 상당히 재미있을 것임.
     * 관련 링크: ""NumPy로 만든 60줄짜리 GPT"" - 2023년 2월 (146개의 댓글)
     * 이것을 사랑함. 일년 전에는 어떤 종류의 마법처럼 시작된 것이 이제는 아주 잘 설명되고 거의 아이 같은 방식으로 설명되고 있음.
     * GPT와 LLM을 완전히 피해왔음. 이것은 텍스트 출력에 일정 수준의 유창함을 생성할 것 같지만, 질문을 파싱하고 답변하는 데는 사용할 수 없을 것 같음. 그들이 어떻게 작동하는지, 또는 파이썬과 같은 언어로 장난감 엔진을 공개하는 간단한 블로그 게시물이나 교육 과정이 있는지 궁금함. 지금까지 본 모든 교육은 플랫폼 사용 방법에 초점을 맞추고 있음.
     * 이것은 훌륭함. 비슷한 맥락에서, 저자는 스프레드시트 함수만을 사용하여 GPT를 구현하고, 동영상 튜토리얼을 함께 제공함.
     * 예상치 못하게 통찰력이 있으며, 초기에 가졌던 몇 가지 질문에 대한 답변을 제공함: ""어떻게""뿐만 아니라 ""왜""에 대한 질문도 포함. softmax 패턴을 자주 볼 수 있음. 사람들에게 곧바로 공식을 제공하는 대신 ""차별화 가능한 argmax""로 가르쳤으면 좋겠음. 그것이 전부는 아니지만, 종종 그렇게 사용됨.
     * GPT가 단지 다음 단어를 어떤 확률로 내뱉는 ""더 똑똑한"" ""복잡한"" 마르코프라고 계속 읽음. 하지만 경험상 그것은 사실이 아닐 것임 - 어떤 방식으로든 학습을 해야 함. 예를 들어, 오늘 일어난 일과 과거를 모순하는 것(카타르 월드컵을 테스트하는 데 사용함)을 말하고, 그 사건에 영향을 받는 질문을 하면, 정확하게 답변함. 단순한 문장(제공하는 정보)이 다음 토큰의 확률을 어떻게 그렇게 멀리 바꿀 수 있는지 궁금함.
"
"https://news.hada.io/topic?id=13435","구글 순위에서 급상승한 'Hacker News'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구글 순위에서 급상승한 'Hacker News'

해커뉴스의 구글 순위 급상승

     * 해커뉴스가 구글 검색 결과에서 자주 방문하는 포럼임에도 불구하고 이전에는 구글에서 찾을 수 없었음.
     * 구글의 '숨겨진 보석 업데이트'로 인해 유용한 개인적 통찰과 경험을 우선시하는 순위 체계가 변경되었으며, 특히 포럼에 주목함.
     * Reddit과 Quora가 이 업데이트로 인해 많은 트래픽을 얻었다고 알려짐.

해커뉴스의 가시성 변화

     * 영국에서 해커뉴스의 가시성이 162% 상승하고, 미국에서는 75% 증가함을 sistrix와 semrush 같은 도구로 확인함.
     * 해커뉴스가 영어 콘텐츠만 있기 때문에 영국과 미국의 순위를 조사함.

해커뉴스가 높은 순위를 차지하는 내용

     * ""GTA가 어디에서 만들어졌는가""에 대한 댓글이 최상위 결과로 나타남.
     * ""모나코를 이탈리아어로""라는 질문에 대해 desdiv의 댓글이 1위를 차지함.
     * GRAHAM PANTHER의 기사가 ""내 인생을 망쳤다""와 같은 여러 키워드에 대해 잘 순위를 차지하고 있음.
     * 해커뉴스는 브랜드 관련 키워드에서도 잘 나타나며, 예를 들어 YouTube TV의 비용에 대한 모든 질문에서 Google은 thunderbong의 게시물을 선호함.
     * ""libgen mirror""와 ""4chan""과 같은 특정 키워드에 대해서도 해커뉴스 게시물이 높은 순위를 차지함.

해커뉴스의 비기술 관련 순위

     * 해커뉴스가 기술 관련이 아닌 다양한 주제에 대해 순위에 오르고 있음에 놀람.

해커뉴스의 트래픽과 키워드 순위

     * 영어가 주 언어가 아닌 국가에서 해커뉴스의 성장이 미국보다 훨씬 빠름을 트래픽과 키워드 순위를 통해 확인함.

주목받는 것의 단점

     * 구글 보석 업데이트로 인해 많은 사이트가 스팸의 급증을 경험함.
     * SEO 전문가들이 이제 Reddit 계정, 댓글, 투표를 구매하여 자신들의 사이트를 홍보할 수 있음.
     * 업데이트를 통해 다시 나타난 Google 그룹은 대부분 무료 스핀에 관한 기사를 다루고 있으며, LinkedIn을 비롯한 다른 소셜 플랫폼도 SEO 스패머들의 공격을 받고 있음.
     * 새로운 가시성이 해커뉴스에 너무 큰 영향을 미치지 않기를 바람.

GN⁺의 의견

     * 해커뉴스의 구글 순위 상승은 사용자들에게 유용한 정보를 제공하는 포럼과 커뮤니티의 중요성을 강조함.
     * 구글의 순위 변경은 정보의 질을 높이고 사용자 경험을 향상시키려는 노력의 일환으로 볼 수 있음.
     * 이러한 변화는 SEO 전략에도 영향을 미치며, 콘텐츠의 진정성과 가치를 중시하는 방향으로 SEO가 진화할 필요성을 시사함.

        Hacker News 의견

     * 구글이 강력한 모더레이션 정책을 가진 사이트를 선호하는 경향이 있으며, 이는 LLM(대규모 언어 모델)이 생성한 게시물에 대한 검증 전략으로 볼 수 있음.

     구글이 강력한 모더레이션 정책을 가진 사이트를 선호하는 경향에 대한 추측.
     * 해커뉴스(HN)에 봇이 넘쳐나면서 사이트 가치가 훼손될 수 있으며, 이에 대한 방어책이 무엇인지에 대한 우려.

     해커뉴스의 가치 훼손 가능성과 방어책에 대한 걱정.
     * 구글 검색에서 SEO 조작을 피하기 위해 특정 사이트만 검색하는 사용자들의 대안이 무엇인지에 대한 질문.

     SEO 조작을 피해 특정 사이트만 검색하는 사용자들의 대안에 대한 의문.
     * 구글의 주목이 해커뉴스의 품질에 부정적인 영향을 미칠 수 있으며, 사이트를 검색 엔진에서 제외하는 것을 고려해볼 것을 제안.

     구글의 주목으로 인한 해커뉴스 품질 저하 우려와 사이트 제외 제안.
     * 구글의 초기 성공과 현재의 변화에 대한 회고, 그리고 향후 1-3년 내에 다른 회사가 검색 시장을 장악할 것이라는 예측.

     구글의 초기 성공과 현재 변화에 대한 회고 및 향후 검색 시장 전망.
     * 해커뉴스의 다양한 기사와 고품질 토론에 매료되어 장기간 머무르게 된 경험과, 인기 있는 소셜 미디어의 운명에 대한 우려.

     해커뉴스의 매력적인 토론과 인기 소셜 미디어의 미래에 대한 우려.
     * 구글이 무작위 댓글을 정보 스니펫으로 사용하는 것에 대한 우려와 해커뉴스의 정보 신뢰성에 대한 인식.

     구글의 댓글 사용에 대한 우려와 해커뉴스의 정보 신뢰성.
     * 해커뉴스가 검색 결과에 나타나지 않는 것이 의도적이었는지, 그리고 이제 나타나기 시작함에 따른 광고에 대한 우려.

     해커뉴스의 검색 결과 노출과 광고에 대한 우려.
     * 해커뉴스와 같은 사이트가 더 필요하며, 단순한 디자인이 스패머에 대한 방어책이 될 수 있음.

     해커뉴스와 같은 사이트의 필요성과 단순한 디자인의 중요성.
     * 해커뉴스의 내용이 정기적으로 나타나는 것은 신선한 토론과 강력한 모더레이션이 있기 때문이며, 커뮤니티 관리의 중요성과 기여 방법에 대한 조언.

     해커뉴스의 토론과 모더레이션의 중요성 및 커뮤니티 기여에 대한 조언.
"
"https://news.hada.io/topic?id=13428","Ollama, 윈도우 버전 프리뷰 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ollama, 윈도우 버전 프리뷰 시작

     * Ollama 는 Llama 2, Mistral 등의 LLM을 로컬에서 실행하기 쉽게 만들어주는 오픈소스
     * 이제 윈도우 환경에서도 LLM을 가져와서 실행하고 생성할 수 있음
     * OpenAPI 호환되는 Ollama API와 하드웨어 가속도 되며, 전체 모델 라이브러리 접근 가능
          + NVIDIA GPU와 AVX/AVX2 등의 최신 CPU 명령셋을 이용

   디펜더에서 바이러스로 인식하네요...

   바이러스가 아니라 알수없는 실행 파일이라 그냥 경고를 띄우내요.

   ............

   Ollama, Python & JavaScript 라이브러리 공개
"
"https://news.hada.io/topic?id=13439","갓 출시된 Vision Pro도 해킹에 취약하다고? | 해킹을 읽다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 갓 출시된 Vision Pro도 해킹에 취약하다고? | 해킹을 읽다

     * Vision Pro의 운영체제는 Vision OS라는 것이 설치되어 있다.
     * Joseph은 이 운영체제(VisionOS) 내부에 있는 Kernel이라는 것에서 취약점을 발견했다.
     * 이 취약점을 악용한다면, 악의적인 소프트웨어를 설치할 수 있다. (Jail break라고도 알려짐)
"
"https://news.hada.io/topic?id=13545","HN 소개: AboutIdeasNow – 7천 개 이상의 개인 사이트의 /about, /ideas, /now 페이지 검색","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HN 소개: AboutIdeasNow – 7천 개 이상의 개인 사이트의 /about, /ideas, /now 페이지 검색

개인 웹사이트의 /about, /ideas, /now 페이지 검색을 통한 협업 및 대화 상대 찾기

     * 7515개의 개인 웹사이트의 /about, /ideas, /now 페이지를 검색하여 대화하거나 협업할 사람을 찾을 수 있음.
     * 매니페스토 읽기, 오픈 소스 구축, 커뮤니티 시작, 회사 설립, 책 쓰기, 앱 개발, 소셜 미디어 탈퇴, 세계 여행, 사진 촬영, 음악 제작, 자원봉사 등 다양한 아이디어가 포함됨.

josephriddle.com/ideas

     * 블로그 포스트, 코드 프로젝트 등 다양한 아이디어를 제공함.
     * 웹사이트에 아이디어 페이지 추가, 좋아하는 커피숍, 자동차 프레젠테이션에서 배운 교훈을 필사하는 등의 아이디어가 있음.

lgrando1.github.io/ideas

     * 중앙 집중화 없는 사회, 사회 문제 요약 방법, 인공지능을 이용한 사회 케어 개선, 온라인이 필요 없는 생활 방식 제공 등의 아이디어를 공유함.

louis.work/ideas

     * 사용자가 휴대폰 사용을 줄이도록 장려하는 새로운 종류의 휴대폰 케이스, 빅테크 회사로부터 원하는 정보 공개를 위한 투표 게시판, 특정 사이트를 대상으로 한 브라우저 확장 프로그램 버전 등의 아이디어가 있음.

lindylearn.io/ideas

     * 인터넷에서 협업할 사람을 찾는 검색 엔진, 레이블 없는 지도 앱, 개인 관계 관리 CRM, meetup.com 대안, 음식 사진에서 영양 정보 자동 추적 등의 아이디어를 제시함.

tjf.lol/ideas

     * 디지털 저널 'Chronofile', ChatGPT를 이용한 파이썬 Quine 개발 등의 프로젝트와 아이디어를 소개함.

jimmyislive.dev/ideas

     * 시스템 운영 시각화, 제품 샌드박스, TIL(Today I Learnt) 플랫폼 등의 아이디어를 제안함.

benjamincongdon.me/ideas

     * RSS 피드에서 텍스트-투-스피치를 이용한 팟캐스트 생성 서비스, Mastodon용 버전의 Buffer, MyFitnessPal의 자체 호스팅 버전 등의 아이디어가 있음.

guckes.net/ideas

     * 공공 장소 모니터링을 위한 카메라 보드 'Eye in the Sky', 대중교통 미운행 보고 웹사이트, 회원 전용 무료 와이파이 제공 등의 아이디어를 공유함.

veilmail.io/ideas

     * VeilMail 웹사이트에서 'ideas' 사용자를 찾을 수 없음.

travishellstrom.com/ideas

     * 독수리 스카우트 되기, 원형극장 건설, 봉사 클럽 시작, 평화봉사단에 관한 책 쓰기 등 다양한 개인적인 목표와 아이디어를 나열함.

wyx.io/ideas

     * 569개의 에세이, 스니펫, 튜토리얼, 팟캐스트, 강연, 노트 등을 작성함.
     * 가장 인기 있는 포스트와 모든 포스트에 대한 정보를 제공함.

suriya.cc/ideas

     * CI/CD 최적화, 서버리스 아키텍처, 이벤트 기반 아키텍처, 다양한 서비스 통합, ETL 솔루션, 개인 정보 보호 등의 미래 지향적인 아이디어를 공유함.

snarfed.org/ideas

     * Erlang 학습, XBox 360용 Tic Tac Toe 포팅, 게임 콘솔과 PC 간의 네트워크 브리지 구축, OpenID 인증 PAM 모듈 작성 등의 아이디어를 나열함.

GN⁺의 의견

     * 이 웹사이트들은 개인의 창의성과 혁신적인 생각을 공유하는 플랫폼으로, 다양한 분야의 사람들이 자신의 아이디어를 세계와 공유할 수 있는 기회를 제공함.
     * 이러한 아이디어 공유는 오픈 소스 커뮤니티와 협업 문화를 강화하며, 창의적인 프로젝트나 스타트업에 영감을 줄 수 있음.
     * 일부 아이디어는 기술적인 실현 가능성이나 상업적 가치에 대한 검증이 필요할 수 있으며, 이는 투자자나 개발자에게 중요한 고려 사항이 될 수 있음.
     * 유사한 기능을 제공하는 기존의 플랫폼이나 프로젝트로는 GitHub, Stack Overflow, Product Hunt 등이 있으며, 이들은 개발자와 혁신가들이 자신의 아이디어를 공유하고 피드백을 받을 수 있는 공간을 제공함.
     * 이러한 아이디어 공유 사이트를 사용할 때는 개인 정보 보호, 지적 재산권 보호, 그리고 협업 시 발생할 수 있는 법적 문제에 주의해야 함.

        Hacker News 의견

     * 첫 번째 사용자는 7000개의 아이디어 페이지 중 15개만 볼 수 있었다고 언급하며, 이는 아이디어 페이지가 더 많아야 한다고 생각함. 그러나 전반적으로 개념은 훌륭하다고 평가함.

     ""7000개 중 15개의 아이디어 페이지만 검색되는 것에 대한 의문 제기, 그러나 아이디어에 대한 개념 자체는 긍정적으로 평가""
     * 두 번째 사용자는 자신의 사이트를 추가했을 때 업데이트 시간이 없다는 응답을 받았고, 소스 코드를 확인해보니 ChatGPT를 사용하여 기사 내용에서 날짜를 찾는 것으로 확인됨.

     ""사이트 추가 시 업데이트 시간 누락, ChatGPT가 기사 내용에서 날짜를 찾는 방식으로 작동하는 것을 소스 코드 분석을 통해 확인""
     * 세 번째 사용자는 처음에는 모든 아이디어, about, now가 동시에 표시될 것으로 생각했지만, 실제로는 /ideas만 보이고, 필터 버튼을 통해 카테고리를 찾아야 했다고 언급함. 필터 버튼이 불필요한 추가 클릭을 요구한다고 느낌.

     ""사이트의 카테고리 접근성에 대한 혼란과 필터 버튼 사용의 불편함을 지적하면서도 사이트 자체는 긍정적으로 평가""
     * 네 번째 사용자는 /about이나 /ideas 페이지는 없지만 /now와 /uses 페이지가 있다고 언급하며, 자기소개에 대한 불안과 사기꾼 증후군으로 인해 간단한 소개만 홈페이지에 게시했다고 설명함. 또한, 아이디어 페이지를 좋아하지만, 세상에 공개함으로써 일찍 도파민을 얻으면 아이디어를 완성하지 못할 수도 있다고 우려함.

     ""개인적인 불안과 사기꾼 증후군을 이유로 간략한 소개만 홈페이지에 게시, 아이디어 페이지에 대한 긍정적인 태도와 함께 완성에 대한 우려 표현""
     * 다섯 번째 사용자는 /about과 /now는 알고 있었지만 /ideas는 새로운 개념이라며, 자신의 사이트에 추가할 것이라고 언급함.

     ""/about과 /now에 대한 인지와 함께 새로운 /ideas 개념에 대한 호기심과 사이트 추가 계획 공유""
     * 여섯 번째 사용자는 /uses 페이지도 있다고 소개하며 관련 링크를 공유함.

     ""/uses 페이지에 대한 언급과 관련 링크 제공""
     * 일곱 번째 사용자는 ""llm""을 검색했을 때 다소 무작위 결과를 받았다고 피드백을 제공함.

     ""검색 결과에 대한 무작위성에 대한 짧은 피드백 제공""
     * 여덟 번째 사용자는 의미론적 검색이 실제로 잘 작동한다며, 데이터 저널리즘에 대해 생각하는 사람들과 관련 아이디어를 찾는 데 도움이 되었다고 언급함.

     ""의미론적 검색의 효과성에 대한 긍정적인 평가와 데이터 저널리즘에 대한 관심 있는 사람들을 찾는 데 도움이 됨을 공유""
     * 마지막 사용자는 프로젝트가 정말 멋지다고 언급하며, 중복이나 거의 중복되는 아이디어(아마도 LLM에 의해 결정됨)를 보고 싶다고 말함.

     ""프로젝트에 대한 긍정적인 평가와 중복 또는 유사 아이디어에 대한 관심 표현""
"
"https://news.hada.io/topic?id=13532","Show HN: 레트로 스타일의 정적 웹 호스팅 서비스, Nekoweb","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show HN: 레트로 스타일의 정적 웹 호스팅 서비스, Nekoweb

Nekoweb.org 소개

     * Nekoweb은 2022년부터 코더, 프로그래머, 아티스트들에 의해 만들어진 무료 정적 웹사이트 호스팅 서비스임.
     * 소셜 미디어의 제한을 넘어, 알고리즘, 추적, 광고 걱정 없이 자신만의 웹 공간에서 자유롭게 표현할 수 있는 것이 중요하다고 믿음.
     * 광고나 추적 없이 사용자의 기부에 의해 운영되며, 개발자 및 커뮤니티와 소통할 수 있는 디스코드가 있음.

Nekoweb의 특징

     * 놀라운 커스터마이징 능력
     * 활발한 개발(종류) 및 관리 팀
     * 광고 및 추적이 없음
     * 파일 유형에 대한 제한이 없음
     * 커피, 차, 우유, 고양이 등을 좋아함

최근 업데이트된 웹사이트

     * shell.nekoweb.org: ""너는 영원히 존재한다. 죽을 수 없다. 죽음 이후에도 살 것이다""라는 메시지를 담고 있음.
     * angle.nekoweb.org: 'angle; destination'이라는 주제를 가짐.
     * zerocool.nekoweb.org: 'zerocools abode :3'라는 공간을 제공함.
     * punk.nekoweb.org: 'WiFi's Punk Paradise'라는 이름의 사이트임.
     * swordsgallery.nekoweb.org: 'SWORDSGALLERY!!!'라는 갤러리를 운영함.
     * mariiiiiii.nekoweb.org: 'mari-corner!!!'라는 개인 공간을 제공함.

연락처 및 커뮤니티

     * 관리자에게 연락하려면 이메일(admin@nekoweb.org)을 사용하거나, 더 빠른 응답을 위해 디스코드에 참여할 수 있음.

GN⁺의 의견

     * Nekoweb은 개인의 창의성과 자유로운 표현을 중시하는 웹사이트 호스팅 서비스로, 광고와 추적 없이 운영되는 점이 매우 중요함.
     * 사용자 기반의 기부로 운영되며, 커뮤니티와의 소통을 강조하는 점은 사용자들에게 친근감과 소속감을 제공함.
     * 최근 업데이트된 웹사이트들은 다양한 개성과 창의적인 내용을 담고 있어, 방문자들에게 새로운 영감과 재미를 제공할 수 있음.

        Hacker News 의견

     * 개인 웹사이트의 창의성에 늘 놀람
          + 웹이 실용적이고 마케팅 중심적이라는 인식 때문에 웹 페이지가 예술적 표현을 위한 빈 캔버스라는 사실을 종종 잊게 됨.
          + 레트로 스타일의 페이지를 만든 사람이 있는지 궁금함.
          + 자신의 웹사이트를 만들어 공유하며 웹 링을 시작하자는 제안.
          + 마키 태그(marquee tag)가 여전히 작동한다는 사실에 흥분.
     * FTP 접근성이 중요한 요소임
          + Neocities에서 호스팅하는 사이트들이 있으나, 웹 UI/CLI를 통해 업데이트해야 하는 것이 마음에 들지 않음.
          + Neocities의 전반적인 미션은 매우 좋아 보임.
          + 'FTP'라고 할 때, 실제 FTP인지 아니면 SSH/SFTP를 의미하는지에 대한 질문.
     * 페이지 스타일링에 float: left를 사용하는 것은 진정한 레트로 스타일임.
     * Nekoweb에 대한 소개
          + 2024년에 코더, 프로그래머, 아티스트들이 만든 무료 정적 웹사이트 호스팅 서비스.
          + 커뮤니티 및 개발자들과 대화를 나눌 수 있는 디스코드 채널이 있음.
          + 오픈 웹에 대한 토론을 독점적인 서비스에서 진행하는 것은 흥미로운 결정으로, 작은 비중요한 작업을 위해서도 폐쇄적인 프로토콜에 여전히 너무 의존하고 있음을 보여줌.
     * 사이트가 Neocities에서 하는 것처럼 업데이트된 랜덤 페이지를 피드에 보여주지 않는 점을 좋아함.
          + 사이트박스 기능이 멋짐.
     * 2000년대 초반의 HTML 레이아웃에 대한 추억
          + 고등학생 시절 Dreamweaver/FrontPage를 배웠던 기억.
     * Zombo.com을 소개
          + 레트로 웹사이트의 ""Hello World!""라고 할 수 있는 사이트.
     * 둠스크롤링(doom-scrolling)에 대한 질문
          + 어떻게 하면 둠스크롤링을 하다가 시간을 낭비한 것을 깨닫게 될까?
     * 2022년과 2023년을 취소선으로 표시한 이유에 대한 질문
          + 2022년에 만들어서 유지해온 것인지, 아니면 최근 프로젝트인지에 대한 궁금증.
"
"https://news.hada.io/topic?id=13458","파이썬에서의 웹 스크래핑 - 완벽 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         파이썬에서의 웹 스크래핑 - 완벽 가이드

Python 웹 스크래핑의 장점

     * 간단한 문법: 빠른 코딩 가능
     * 내장 라이브러리: urllib, lxml 등 스크래핑에 도움
     * 성숙한 스크래핑 라이브러리: Beautiful Soup, Scrapy 등
     * 범용성: 데이터 파이프라인 구축에 활용
     * 상호운용성: 다른 언어와의 통합 및 성능 중요 시 잘 작동

Python 웹 스크래핑 라이브러리

     * BeautifulSoup: HTML/XML 파싱, 유연한 탐색 및 검색
     * Scrapy: 빠르고 확장 가능, 미들웨어, 분산 크롤링 기능
     * Selenium: 브라우저 자동화, 자바스크립트 중심 사이트 처리
     * lxml: 매우 빠른 XML/HTML 파서
     * pyquery: jQuery 스타일 문법으로 HTML 요소 접근

스크래핑을 위한 준비사항

     * 가상 환경 설정 권장
     * 필요 라이브러리: Requests, BeautifulSoup, OS

스크래핑 대상 웹사이트 선택

     * 위키백과의 '강아지 품종 목록' 페이지 선택
     * 잘 구조화된 HTML, 다양한 데이터 필드, 이미지 포함

스크래핑 코드 작성

     * 필요한 라이브러리 임포트
     * User-Agent를 사용하여 브라우저로 가장
     * requests를 통해 HTML 페이지 다운로드 및 유효성 검사
     * BeautifulSoup으로 HTML 파싱
     * CSS 선택자로 데이터 추출
     * 이미지 다운로드 및 저장

웹 스크래핑 실제 도전 과제 및 모범 사례

     * 동적 콘텐츠 처리: Selenium 또는 Scrapy의 splash 통합 사용
     * 차단 방지: 요청 속도 조절, 브라우저 모방, 사용자 에이전트 및 프록시 회전
     * 속도 제한: 크롤 지연 존중, 프록시 사용, 요청 자동 조절
     * 복잡한 HTML 파싱: lxml과 같은 강력한 파서 사용, 선택자 강화

GN⁺의 의견

     * 가장 중요한 점: Python은 웹 스크래핑을 위한 강력한 언어로, 간단한 문법과 풍부한 라이브러리를 제공하여 다양한 규모의 웹 스크래핑 프로젝트에 적합함.
     * 흥미로운 이유: 웹 스크래핑은 데이터 수집 및 분석에 필수적인 기술이며, 이 가이드는 초급 소프트웨어 엔지니어가 실제 프로젝트에 적용할 수 있는 실용적인 지식을 제공함.
     * 도움이 되는 이유: 웹 스크래핑은 다양한 분야에서 응용될 수 있으며, 이 가이드는 실제 도전 과제와 모범 사례를 통해 실전에 강한 스크래핑 기술을 개발하는 데 도움을 줌.

   javascript 렌더링은 playwright 갑입니다. 언어 지원 폭이 되게 넓더라구요.

   scrapy하고 붙여쓰면 시너지가 있을듯 하네요.

   에이 요즘같으면 playwright 써야지

   실제로 스크래핑을 업무로 하다 보면 생각보다 번거로운 것은 브라우저 다루는 것(종종 오류 발생하는 chrome webdriver)과 차단(다양한 captcha)를 해결하는 것이 제일 크더라구요.

        Hacker News 의견

     * 웹 크롤링과 스크래핑을 분리하는 것이 중요함. 크롤링은 URL을 찾고 HTML 콘텐츠를 가져오는 단계이고, 스크래핑은 HTML에서 구조화된 데이터를 추출하는 단계임. 두 단계를 분리하면 나중에 스크래퍼를 수정하여 기존 데이터에 빠르게 재적용할 수 있음.
     * 파이썬 웹 스크래핑 도구로 Playwright를 추천함. 매우 강력하고 잘 설계된 브라우저 자동화 도구로, 커맨드 라인에서 직접 웹 페이지를 스크래핑할 수 있는 shot-scraper CLI 도구를 사용함.
     * SaaS 회사들이 블로그 포스트에서 자신들의 제품을 홍보하는 것은 마케팅의 일부이지만, 초보자에게 처음으로 문제를 소개하면서 자신들의 제품을 해결책으로 제시하는 것은 항상 재미있음.
     * 웹사이트 스크래핑에 유용한 정보가 있는 <domain>/robots.txt를 확인하는 것과 HTML 태그 파싱 대신 구조화된 메타데이터를 통해 데이터를 추출하는 것이 도움이 될 수 있음. 이를 JSON으로 추출하는 라이브러리도 있음.
     * Python 대신 Node.js를 사용한 웹 스크래핑의 인기에 대해 의문을 제기함. npm에는 DOM 파싱을 위한 잘 만들어진 패키지들이 있고, 자바스크립트를 사용하기 때문에 더 자연스러운 DOM 기능을 사용할 수 있음.
     * pandas의 read_html을 사용하여 링크를 간단히 가져올 수 있음. 이를 통해 웹사이트의 테이블 데이터를 쉽게 추출할 수 있음.
     * 반복적이고 창의적이지 않은 웹 스크래핑 작업에 지쳐서 이제 LLM(Large Language Models)을 사용하여 전체 과정을 자동화하려고 시도 중임. LLM을 사용하여 웹사이트 변경에 적응하는 스크래퍼 코드를 생성하고 조정하는 것이 효율적임.
     * 파이썬 스크래핑에 대한 완벽한 가이드가 얼마나 많은지에 대한 의문을 제기함.
     * 현대적인 웹 스크래핑 설정에는 브라우저 에이전트가 필요하며, 주요 소셜 미디어 플랫폼이나 뉴욕타임즈 기사 등에서 데이터를 가져오기 위해서는 자체 도구를 구축해야 할 수도 있음.
     * 스크래핑 작업 중에 requests-cache 라이브러리가 도움이 됨. 이는 requests 라이브러리를 대체하지만 모든 응답을 SQLite 데이터베이스에 캐시하여 사이트에서 제한을 받을 때 스크립트를 조정하는 데 유용함.

   이 댓글에서 중요한건

     SaaS 회사들이 블로그 포스트에서 자신들의 제품을 홍보하는 것은 마케팅의 일부이지만, 초보자에게 처음으로 문제를 소개하면서 자신들의 제품을 해결책으로 제시하는 것은 항상 재미있음.

   요거네요. 항상 이런 글들은 마지막에 자신들의 제품 홍보가 들어가있다는 걸 염두에 두고 봐야합니다.
   반대로 말하면, 국내 업체들도 이런 방식은 기본적으로 써야한다고 생각합니다.
"
"https://news.hada.io/topic?id=13479","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   MWC 참관하러 스페인으로 출국합니다~

   듄이 그렇게 좋다 그래서
   듄 1 집에서 먼저 봐보려구요

   영화 파묘 보러갑니다. ㅎㅎ.. 독서모임 도서를 읽으려구요. 슬슬 봄이 다가오는 냄새가 느껴져서 너무 좋습니다.

   새 사무실로 이전했는데요. 노출천장이라 층고가 높아서 좋네요.
   아는 개발자분들과 주말 보드게임 모임을 합니다.
   오전 10시부터 모여서 저녁 10시까지 거의 12시간 달릴 예정이에요.

   와 무슨 보드게임 하시게될지 여쭤봐나요?
   최근에 저도 보드게임에 관심이 생겨서 ㅎㅎ..

   보통 긴게임을 2개 정도 하고 작은 게임을 했는데요.
   이번엔 긴게임 하나, 작은거 여러개로 생각중입니다.

   긴 게임: 마르코폴로2
   짧은 게임: 아이벡스의 춤, 두도시사이에서, 임호텝, 모던아트 카드게임, 다빈치코드 플러스, 웰컴투, 행성X를 찾아서

   혹시 시간이 남으면 갤러리스트 정도 추가할 예정입니다.
"
"https://news.hada.io/topic?id=13541","Mistral Large 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Mistral Large 모델 공개

     * Mistral Large는 최첨단 텍스트 생성 모델로, 최고 수준의 추론 능력을 갖춤
     * 다양한 언어로 복잡한 추론 작업을 수행할 수 있으며, 텍스트 이해, 변환, 코드 생성에 사용 가능
     * MMLU 벤치마크에서 강력한 성능을 보여주며, API를 통해 일반적으로 사용 가능한 세계에서 두 번째로 순위가 높은 모델임
          + GPT-4 86.4% 다음인 81.2%, Claude 2가 78.5%, Gemini Pro가 71.8%

Mistral Large의 새로운 기능과 강점

     * 영어, 프랑스어, 스페인어, 독일어, 이탈리아어에 원어민 수준으로 능통하며, 문법과 문화적 맥락에 대한 미묘한 이해를 제공
     * 32K 토큰 컨텍스트 윈도우를 통해 대규모 문서에서 정확한 정보 회상이 가능
     * 정확한 지시사항을 따르는 기능을 통해 개발자들이 자신의 모더레이션 정책을 설계할 수 있으며, 이를 통해 le Chat의 시스템 수준 모더레이션 설정에 사용됨
     * 함수 호출 기능이 내재되어 있어, la Plateforme에서 구현된 제한된 출력 모드와 함께 애플리케이션 개발 및 기술 스택 현대화를 대규모로 가능하게 함

Microsoft와의 파트너십을 통해 Azure에서 모델 제공

     * Mistral의 목표는 선도적인 AI를 보편화하는 것이며, 이를 위해 Azure에 오픈 및 상업 모델을 제공함
     * Mistral의 모델은 La Plateforme과 Azure를 통해 사용할 수 있으며, 사용자 환경에 직접 배포할 수도 있음
     * La Plateforme은 Mistral의 유럽 인프라에서 안전하게 호스팅되며, Azure는 Azure AI Studio와 Azure Machine Learning을 통해 제공됨
     * 자체 배포는 가장 민감한 사용 사례에 대해 모델 가중치에 접근할 수 있게 하며, 성공 사례를 읽고 팀에 연락하여 자세한 정보를 얻을 수 있음

Mistral Large의 능력

     * Mistral Large는 표준 벤치마크에서 선도적인 LLM 모델들과 비교하여 강력한 추론 능력을 보임
     * 다국어 능력에서도 Mistral Large는 프랑스어, 독일어, 스페인어, 이탈리아어에서 LLaMA 2 70B를 크게 앞지름
     * 코딩 및 수학 작업에서도 최고의 성능을 보여줌

새로운 Mistral Small, 저지연 워크로드에 최적화

     * Mistral Large와 함께, 지연 시간과 비용에 최적화된 새로운 모델인 Mistral Small을 출시
     * Mistral Small은 Mixtral 8x7B보다 성능이 우수하며 지연 시간이 낮아, 오픈-웨이트 제공과 플래그십 모델 사이의 정제된 중간 솔루션임
     * Mistral Small은 Mistral Large와 동일한 RAG 활성화 및 함수 호출 혁신을 활용함
     * 경쟁력 있는 가격의 오픈-웨이트 엔드포인트와 새로운 최적화된 모델 엔드포인트를 제공하며, 성능/비용 트레이드오프에 대한 포괄적인 시야를 제공함

JSON 형식과 함수 호출

     * JSON 형식 모드는 언어 모델 출력이 유효한 JSON이 되도록 강제함
     * 함수 호출을 통해 개발자들은 자체 도구 세트와 Mistral 엔드포인트를 연결하여 내부 코드, API 또는 데이터베이스와 더 복잡한 상호 작용을 가능하게 함
     * 함수 호출과 JSON 형식은 mistral-small과 mistral-large에서만 사용 가능하며, 모든 엔드포인트에 대한 형식 지정을 곧 추가할 예정임

GN⁺의 의견

     * Mistral Large는 다국어 지원과 고급 추론 능력을 갖춘 인공지능 언어 모델로, 다양한 언어로 복잡한 작업을 수행할 수 있는 능력이 특히 주목할 만함.
     * 이 모델은 기존의 GPT-4와 같은 모델들과 경쟁할 수 있는 잠재력을 가지고 있으며, 특히 다양한 언어에 대한 지원은 글로벌 시장에서의 적용 가능성을 높임.
     * Azure와의 파트너십은 Mistral AI의 모델이 더 넓은 사용자 기반에 도달할 수 있는 기회를 제공하며, 클라우드 기반 AI 서비스의 확장성과 접근성을 강화함.
     * Mistral Small과 같은 최적화된 모델의 출시는 비용 효율적이고 지연 시간이 낮은 AI 솔루션을 필요로 하는 기업들에게 매력적인 옵션이 될 수 있음.
     * JSON 형식과 함수 호출 기능은 개발자들이 AI 모델을 자신들의 애플리케이션과 더욱 쉽게 통합할 수 있게 하여, AI 기술의 실용성과 유연성을 높임.

        Hacker News 의견

     * 마케팅 자료의 솔직함을 높이 평가함. 시장 선두 제품보다 낮은 벤치마크 점수를 보여주는 것이 구글이 벤치마크를 선택적으로 사용하는 것보다 낫다고 생각함.
     * 이미 많은 일을 해왔지만, 오픈 소스 커뮤니티에 기여할 것이라는 약속을 다시 확인하는 내용이 있었으면 좋겠다는 의견. 이것이 그들의 브랜드의 주요 부분이라고 생각했음.
     * miqu 사태 이후로 더 많은 오픈 웨이트가 나올 것이라고 기대하며 지켜봤지만, 결과를 기다려봐야 할 것 같음.
     * 변경 사항 업데이트: API 엔드포인트 이름 변경 및 모델 엔드포인트 추가, 새로운 모델 출시, 기존 모델 업데이트 및 폐기 예정 안내.
     * 새로운 API 기능: Mistral Small과 Mistral Large 모델에서 함수 호출 및 JSON 모드 사용 가능.
     * La Plateforme: 다중 통화 지원 결제 시스템 추가 및 기업용 플랫폼 기능 도입.
     * Le Chat: Mistral 모델과 쉽게 상호작용할 수 있는 새로운 채팅 인터페이스 출시.
     * 새로운 모델을 LLM CLI 도구용 플러그인에 추가함. 이제 다음과 같이 사용할 수 있음.
     * Le Chat을 사용하여 오늘 발생한 몇 가지 코딩 문제를 해결해봤는데, ChatGPT(GPT-4 포함)보다 훨씬 나은 답변을 제공함. 일부 사람들이 제안하는 것처럼 ChatGPT의 품질이 비용 절감을 위해 떨어진 것인지 확실하지 않지만, 이 몇 가지 문제에 대해서는 Mistral의 답변 품질이 훨씬 더 우수했음.
     * Le Chat의 존재를 몰랐음. Mistral을 사용한 ChatGPT 경쟁자를 원했는데, 제품명 앞에 ""le""를 붙인 것도 마음에 듦.
     * Azure에서 GPT-4보다 Mistral이 약간 더 저렴함.
     * 오픈 웨이트에 대한 모든 소란이 이미 끝났는지, 계속 닫혀 있을 것인지에 대한 의문.
     * 파라미터 크기에 대한 정보가 어디에도 없는데, 이것이 의도적인지 아니면 놓친 것인지에 대한 질문.
     * 마치 여러 교체 가능한 CPU 아키텍처가 존재하는 것과 같음. 새로운 LLM이 출시될 때마다 독점이 훨씬 줄어들어서 더 나아질 것이라는 기대감을 갖게 됨. 오픈 소스 모델 없이도 OpenAI는 이미 그들의 미션을 달성한 것으로 보임.
"
"https://news.hada.io/topic?id=13447","스포티파이 구독을 취소한 날","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            스포티파이 구독을 취소한 날

스포티파이에 대한 열정의 시작과 끝

     * 스포티파이 초기 데스크톱 애플리케이션은 iTunes보다 낫다고 느낌.
     * 튀니지에서 국제 결제가 불가능하고 문화 콘텐츠 접근이 어려워 불법 다운로드가 일상이었음.
     * 스포티파이는 VPN 설정, 무료 체험 계정 생성, 패치된 빌드 다운로드 등의 번거로움을 감수할 만큼 편리함.

스포티파이와의 사랑에 빠지다

     * 2015년 유럽 이주 후 VISA 카드로 스포티파이 프리미엄 구독 시작.
     * 모바일 앱 사용으로 iPod Nano를 잊음.
     * 스포티파이의 재설계, 가격 변경, 팟캐스트 도입, 오디오북 추가 등 변화 경험.

스포티파이에 실망하다

     * 스포티파이 앱 개편으로 관심 없는 팟캐스트와 제네릭한 플레이리스트가 주를 이룸.
     * 사용자 맞춤 설정 부족으로 관심 없는 콘텐츠에 대한 거부 의사 표현 불가.
     * 메인 페이지에서 흥미로운 콘텐츠를 찾기 위해 오래 스크롤해야 함.

스포티파이가 나에게 좋지 않은 이유

     * 스포티파이 이전에는 음악을 소중히 여기고 iPod에서 체계적으로 관리함.
     * 스포티파이는 제안하는 음악에 익숙해지게 하고, 사라지면 대체할 음악이 많다고 안심시킴.

스포티파이: 오디오 회사

     * 스포티파이는 음악에 국한되지 않고 모든 오디오를 원함.
     * 폐쇄적인 팟캐스트 플랫폼 도입으로 RSS와 독립 플레이어에서 벗어남.
     * 혁신적이라고 주장했던 기능들은 실제로는 큰 변화 없이, 사용자를 더 멀어지게 함.

비즈니스 모델

     * 스포티파이 프리미엄 구독료가 직접적으로 듣는 아티스트에게 가는 것으로 오해.
     * 구독료는 복잡한 메커니즘을 통해 주요 아티스트에게 분배되고, 인디 아티스트는 소외됨.
     * 스포티파이로부터 더 이상 기쁨을 느끼지 못하고 구독 취소 및 데이터 내보내기 결정.

GN⁺의 의견

     * 스포티파이는 초기에 음악 애호가들에게 혁신적인 편리함을 제공했으나, 점차 사용자의 취향과는 동떨어진 콘텐츠를 강요하는 방향으로 변화함.
     * 사용자 맞춤형 경험의 부족과 비즈니스 모델에 대한 오해는 스포티파이에 대한 실망감을 증폭시킴.
     * 이 글은 스포티파이와 같은 스트리밍 서비스를 사용하는 사람들에게 서비스의 변화와 그에 따른 사용자 경험의 중요성에 대해 생각해 볼 기회를 제공함.

        Hacker News 의견

     * 스포티파이에 대한 긍정적인 평가
          + 1984년생 메탈 음악 팬으로서, 과거에는 새로운 음악을 발견하기 어려웠음.
          + 라디오나 MTV는 메탈을 재생하지 않았고, 친구들도 같은 음악 취향을 공유하지 않았음.
          + 음악을 발견하는 전략은 멋진 커버 아트를 가진 앨범을 사는 것이었으며, 이는 매우 비쌌음.
          + 스포티파이가 월 11달러로 모든 음악을 제공하고 새로운 음악을 추천해주며 공간을 차지하지 않는다는 사실을 알았다면 놀랐을 것임.
          + 스포티파이가 완벽하지는 않지만, 과거에 비해 놀라운 서비스라고 평가함.
     * 스포티파이 사용 중단에 대한 개인적인 의견
          + 홈페이지를 커스터마이즈할 수 없어 스포티파이를 그만둠.
          + '좋아하는 노래'와 개인 플레이리스트를 통해 음악을 탐색하며, 홈페이지의 추천은 때때로 유용함.
          + 자신의 노래를 업로드할 수 없는 것이 주된 불만이지만, 아티스트를 존중하고 비용 구조를 유지하는 비즈니스 모델에는 필수적임.
          + 스포티파이를 사랑하지만, 더 나은 대안을 찾지 못함.
     * 소프트웨어 디자인에 대한 비판적인 관점
          + 스포티파이의 커스터마이즈 부족은 디자이너가 사용자보다 더 잘 안다는 태도를 반영함.
          + 좋은 디자이너는 제품을 향상시킬 수 있지만, 대부분의 디자이너가 실제로 뛰어나지 않음.
          + 앱의 UI를 예술 작품으로 보기보다는 기능적인 기계로 보고, 그 후에 아름답게 다듬어야 함.
          + 디자이너는 중요하지만, 엔지니어링과 마찬가지로 사고방식의 변화가 필요함.
     * 스포티파이의 수익 분배에 대한 음악가의 관점
          + 인디 아티스트가 스포티파이에서 충분한 수익을 얻지 못하는 것에 대해 갈등을 느낌.
          + 대형 팝 아티스트가 대부분의 사용자를 플랫폼으로 끌어들임.
          + 인디 아티스트가 플랫폼을 떠나 자신의 청중을 데려가는 것이 이상적이지만, 더 적은 노출을 의미할 수 있음.
          + 스포티파이는 청중을 제공하는 것에 대해 보상을 받으려 하며, 이는 불공정해 보일 수 있지만, 무작위 노출로 인한 혜택을 받아들임.
     * 음악 추천 알고리즘에 대한 비판적인 시각
          + 스포티파이가 비용 절감을 위해 특정 노래를 우선시하는 알고리즘을 사용한다는 사실을 알게 됨.
          + 애플 뮤직도 비슷한 전략을 사용할 수 있지만, 사용자 인터페이스가 덜 불쾌함.
          + 사용자가 추천을 조정할 수 있는 완전히 커스터마이즈 가능한 스트리밍 서비스를 선호함.
     * 스포티파이 프리미엄에 대한 불만족
          + 스포티파이 프리미엄을 저렴한 가격에 구독했지만, 사용자 경험에 큰 개선을 보지 못함.
          + 원치 않는 팟캐스트와 언어를 강요받고, 추천이 만족스럽지 않으며, 음악 감상을 방해하는 기능이 추가됨.
          + 인도/파키스탄 음악에 대한 애플 뮤직의 부족한 지원으로 인해 스포티파이를 계속 사용하고 있음.
     * 온라인 커뮤니티 라디오에 대한 제안
          + 온라인 커뮤니티 라디오가 스포티파이의 알고리즘보다 더 나은 음악 선택을 제공할 수 있음.
          + 커뮤니티 라디오는 새로운 음악을 발견할 기회를 제공하며, 청취자와 상호작용할 수 있음.
          + 음악을 구매하고자 한다면, 대기업 대신 전문 레코드 스토어를 지원하는 것이 좋음.
     * 스포티파이 대 애플 뮤직의 추천 비교
          + 스포티파이의 추천이 애플 뮤직에 비해 식상하고 창의성이 부족함.
          + 애플 뮤직은 실제로 새로운 음악을 제공하는 반면, 스포티파이는 오래된 노래를 새로운 음악으로 추천함.
     * 개인화된 플레이리스트에 대한 긍정적인 평가
          + 개인화된 플레이리스트(Discover Weekly 및 Daily Mix)가 사용자의 취향에 매우 부합하며 많은 새로운 아티스트를 발견하게 해줌.
          + 이러한 플레이리스트가 일부 사용자에게는 더 잘 작동할 수 있으며, 단순히 인구 통계학적 데이터에 기반한 것이 아님.
     * Tidal과 Bandcamp로의 전환
          + Tidal은 스포티파이와 비슷한 카탈로그를 제공하며 고음질/무손실 재생 옵션을 지원함.
          + Tidal은 DJ 소프트웨어와 통합되어 있으며, Bandcamp는 음악을 직접 구매하여 아티스트와 레이블을 지원하는 방법임.
          + 스포티파이는 사용자에게 음악에 대한 제어권을 주지 않는 경향이 있음.
"
"https://news.hada.io/topic?id=13542","어떤 S3 버킷의 AWS 계정 ID를 찾는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       어떤 S3 버킷의 AWS 계정 ID를 찾는 방법

S3 버킷의 AWS 계정 ID 찾기

     * 2021년 Ben Bridts가 공개된 S3 버킷의 AWS 계정 ID를 찾는 독창적인 방법을 발표함.
     * 이 글에서는 비공개 및 공개 S3 버킷 모두의 계정 ID를 찾는 기술을 설명함.

S3 버킷에서 AWS 계정 ID로

     * 쉘 출력을 통해 bucket-alpha라는 버킷의 이전에 알려지지 않은 AWS 계정 ID를 찾는 기술을 보여줌.

이 기술은 정확히 어떻게 작동하는가?

     * Ben의 기술이 작동하는 이유를 분석하여 세 가지 핵심 요소를 결합함:
          + IAM 정책을 요청에 적용할 수 있는 능력
          + IAM 정책이 요청을 허용했는지 여부를 추론할 수 있는 능력
          + s3:ResourceAccount 조건 키에 와일드카드 매치를 적용할 수 있는 능력

해결책

     * S3용 VPC 엔드포인트를 사용하고 CloudTrail에서 요청이 거부될 때의 행동 차이를 이용하는 해결책을 찾음.

단계별로 살펴보기

     * 버킷 bucket-alpha의 계정 ID를 찾고자 할 때의 단계별 절차:
          + 버킷 지역 결정
          + 동일 지역에 VPC 및 VPC 엔드포인트 배포
          + VPC 내에서 EC2 인스턴스 시작 및 S3에 대한 VPC 엔드포인트 사용 확인
          + 대상 버킷의 계정 ID가 ""0""으로 시작하는지 여부를 결정하기 위해 VPC 엔드포인트 정책 수정
          + 대상 버킷에 요청하기
          + CloudTrail에서 요청이 나타나는지 확인
          + 결과에 따라 VPC 엔드포인트 정책을 수정하여 계정 ID에 대한 정보를 더 발견

결과

     * 이 과정을 자동화하는 스크립트를 작성하여 버킷의 계정 ID를 신뢰할 수 있게 찾을 수 있음.
     * 각 숫자에 대해 이진 검색을 수행하여 필요한 테스트 수를 줄임.

속도 향상

     * VPC 엔드포인트 정책이 효과를 발휘하고 CloudTrail에서 결과를 개별적으로 기다리는 데 걸리는 시간을 줄이기 위해 VPC 엔드포인트 정책을 수정함.
     * 이를 통해 계정 ID를 찾는 데 걸리는 시간을 10분 미만으로 단축함.

의견

     * AWS 보안 팀과 상의한 후 이 블로그 게시물을 게시함.
     * AWS 계정 ID가 민감한 정보로 간주되어야 하는지에 대한 흥미로운 토론이 있었음.
     * 이 기술은 S3 외에 다른 서비스에도 적용될 수 있음.
     * 이러한 기술은 s3:ResourceAccount에 대해 StringLike 조건을 사용할 수 있기 때문에 가능함.
     * VPC 엔드포인트 정책에 의해 거부된 이벤트가 CloudTrail에 로깅되는 것이 유익할 수 있음.

감사의 말

     * Ben Bridt의 원래 기술이 이 작업에 영감을 줌.
     * Chris Farris의 도움과 조언에 대해 감사함.

GN⁺의 의견

     * 이 기술은 클라우드 환경에서 보안 감사를 수행하는 데 매우 유용할 수 있으며, 특히 AWS S3 버킷의 소유권을 확인하는 데 도움이 될 수 있음.
     * 이 기술이 제공하는 정보의 민감성에 대한 논의는 클라우드 서비스 제공자와 사용자 간의 데이터 보안과 프라이버시에 대한 지속적인 대화를 반영함.
     * 비슷한 기능을 제공하는 다른 도구로는 AWS의 자체 서비스인 CloudTrail이 있으며, 이는 사용자의 AWS 환경에서 발생하는 모든 활동을 로깅하고 모니터링하는 데 사용됨.
     * 이 기술을 도입하기 전에, 사용자는 해당 기술이 AWS의 정책 및 보안 모범 사례와 일치하는지 확인해야 함.
     * 이 기술을 사용함으로써 얻을 수 있는 이점은 효율적인 보안 감사와 빠른 데이터 소유권 확인이지만, 잠재적인 개인정보 노출과 같은 위험도 고려해야 함.

        Hacker News 의견

     *

     AWS의 s3:ResourceAccount 조건 키에 와일드카드 매치를 적용할 수 있는 능력
          + 이 기능이 놀라운 점은, 부분적인 계정 ID 매치를 기반으로 권한을 부여하거나 거부하는 것에 정당한 이유가 없다는 것임. AWS 계정 ID는 IP 주소와 같이 민감할 수 있지만, 일을 진행하기 위해 누군가는 이를 알아야 함.
     *

     AWS 계정 ID == 당신의 IP 주소. 민감할 수 있지만, 일을 처리하기 위해서는 누군가가 그것을 알아야 함.
          + 예시: 작성자는 반돈세탁 절차로 인해 통합해야 하는 제3자와의 거래에서, 개방된 sftp 포트보다 일반적으로 더 안전한 privatelink 설정을 원했음. 그러나 해당 회사는 계정 ID를 숨기는 보안상의 이유로 거부함. 결과적으로, 작성자 팀은 그들이 사용하는 공개 IP 범위를 포트 22로 화이트리스트에 올림.
          + 이야기의 교훈: ID를 숨기는 것이 현명해 보일 수 있지만, 사람들이 당신에게 연락할 수 있는 주소가 없다면 실제로 비즈니스를 운영할 수 없음.
     *

     일반적으로 계정 ID를 공개적으로 배포하지는 않겠지만, 어느 시점에 일부가 공개될 것으로 예상해야 함.
          + 제3자 벤더와 SaaS 플랫폼이 IAM 사용자와 액세스 키에서 역할 가정(role assumption)을 선호하는 통합 방식으로 이동함에 따라, 통합 지점으로 사용하는 계정의 계정 ID는 다른 당사자에 의해 알려지며, 그들은 자신의 의존성과 취약점을 가짐.
     *

     전역 네임스페이스를 가진 다른 공개 AWS 리소스도 AWS 계정 ID를 드러냄.
          + 관심 있는 사람들을 위해, 해당 코드를 여기에 온라인으로 게시함: find-s3-account
     *

     관련: AWS 키 ID(비밀 키 부분이 아님)는 계정 ID를 포함하고 있으며, 한 위치만큼 비트 이동됨.
          + 이 키 ID는 S3에 대한 사전 서명된 링크의 URL에 포함되어 있으므로, 이미 계정 ID를 공개하고 있을 가능성이 높음.
     *

     흥미로운 발견이지만, 제목을 보고 더 간단한 방법이 있을 것으로 기대했음.
          + AWS에서 관리자 계정으로 ""X 리소스가 어디에 있는지"" 물어볼 수 있는 간단한 방법이 있었으면 좋겠음. 특히 어떤 계정에 특정 S3 버킷이 있는지 빠르게 알려주는 기능이 필요함. 이는 주로 코드로 정의되기 전에 존재했던 레거시 버킷과 관련된 문제임. 많은 AWS 계정을 가지고 있을 때 알려지지 않은 계정과 가능한 지역에서 리소스를 찾는 것은 번거로울 수 있음.
     *

     실제 해킹이 ""한 번에 한 문자씩 비밀번호를 '해킹'하는"" 오래된 클리셰나 오해를 가져오는 시나리오는 언제나 멋짐.
     *

     더 걱정되는 공격 벡터는 이제 계정 번호를 사용하여 다른 계정의 주체를 자신의 계정 정책에 허용 목록에 추가하려고 할 때임.
          + 다른 계정에 해당 주체가 존재하지 않으면 역할/사용자를 찾을 수 없는 오류가 발생함. 이를 이용하여 다른 계정의 실제 주체를 찾을 수 있음.
     *

     이것이 왜 중요한가? 명백한 한 가지: 생산 버킷이 주어지면, 동일한 조직의 개발 버킷을 찾을 수 있게 되는데, 이는 예상치 못한 행동임.
"
"https://news.hada.io/topic?id=13530","LocalSend - 오픈소스 AirDrop 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      LocalSend - 오픈소스 AirDrop 대체제

     * 인터넷 연결이나 외부 서버 없이 로컬 네트워크를 통해 근처 장치와 파일 및 메시지를 안전하게 공유가능
     * REST API와 HTTPS 암호화를 사용하는 크로스 플랫폼 앱
          + 윈도우, 맥, 리눅스, iOS, Android, Fire OS 용 앱/바이너리 제공
     * 일반적으로 아무 설정없이 동작하지만 문제가 있다면 방화벽에 수신용 53317 포트를 TCP/UDP 용으로 개방해야함

   가끔 아이폰에서 안드로이드 또는 윈도우 머신으로 전송할때 쓰면 좋을듯 합니다.

   오류인듯 합니다. 제목과 본문이 일치하지 않습니다

   앗 제가 후다닥 올리다 착각을 ㅠ 수정해두었습니다

   페북글은 이미 업로드된거라 업댓이 안됐네요 ㅠㅠ
"
"https://news.hada.io/topic?id=13493","Intuitive Machines, 달 착륙 성공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Intuitive Machines, 달 착륙 성공

'오디세우스가 달을 점령했다' - NASA 발표

     * NASA의 관리자인 빌 넬슨은 착륙 후 메시지에서 ""오디세우스가 달을 점령했다. 이 업적은 인류 전체를 위한 거대한 도약임""이라고 선언함
     * 미국이 반세기 이상 만에 처음으로 달에 다시 도착함
     * 인류 역사상 처음으로, 미국의 상업 회사가 주도하여 달로의 여정을 시작함
     * NASA의 상업적 파트너십의 힘과 약속을 보여주는 날임을 강조하며, Intuitive Machines, SpaceX, 그리고 NASA에 관련된 모든 이들에게 축하의 메시지를 전달함

GN⁺의 의견

     * 이번 달 착륙은 상업적 우주 탐사의 새로운 장을 여는 역사적인 순간으로, 민간 부문과 NASA의 협력이 우주 탐사의 새로운 가능성을 열어가고 있음을 보여줌
     * 빌 넬슨의 발언은 이번 성과가 단순히 미국의 성취가 아니라 인류 전체의 발전을 의미한다는 점을 강조하며, 우주 탐사가 가져올 미래의 변화에 대한 기대감을 높임
     * SpaceX와 같은 민간 우주 기업의 성공적인 참여는 우주 산업의 상업화와 더 넓은 참여를 촉진하는 계기가 되며, 이는 기술 혁신과 경제적 기회의 확장으로 이어질 수 있음

        Hacker News 의견

     * Odysseus의 성공적인 데이터 전송
          + Odysseus가 바로 서서 데이터를 전송하기 시작했다는 소식에 감탄. 처음에 연락이 닿지 않아 걱정했지만, 결국 역사를 만들어냄.
     * 비용과 국가별 달 착륙 비교
          + 연구에 따르면 NASA가 지급한 1억 1천8백만 달러로 이루어진 것 같음. 참고로 인도는 약 7천4백만 달러로 달 착륙을 함.
     * 달 착륙의 어려움과 축하
          + 달 착륙은 매우 어려운 일이며, KSP(게임)를 통해 생각하는 것보다 훨씬 복잡함. IM의 성공적인 달 착륙은 큰 이정표임.
     * NDL 시스템의 소프트웨어 마법
          + 착륙 전에 기존 시스템이 실패한 후 NDL 시스템을 주요 항법 시스템으로 전환한 소프트웨어 기술에 대해 궁금함. NDL은 단지 시연 프로젝트였는데, 필요할 때 활성화하고 센서 2개를 사용한 것 같음. NDL이 기존 시스템과 같은 방향으로 설정되었는지, 아니면 가이던스 시스템을 실시간으로 업데이트했는지에 대한 놀라움.
     * EagleCam의 착륙 영상 문의
          + EagleCam으로 촬영된 착륙 영상에 대해 알고 싶어함. 1960년대 품질이 아닌 달 영상을 보고 싶음.
     * 추가 정보 링크
          + 해커뉴스 토론: https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=39465230
          + 가디언의 심층 기사: :///www.theguardian.com&/…"">https:&#x2F;&#x2F;:///www.theguardian.com&/…
     * EagleCam 증거 요구와 추진제 증발량 관심
          + EagleCam으로 촬영된 증거가 없다면 일어나지 않은 것으로 간주함. 실제로 측정된 추진제 증발량과 계산된 증발량의 차이에 대해 관심이 있음. 이 차이는 Artemis 계획에 큰 영향을 줄 수 있음.
     * 우주로의 복귀에 대한 기쁨과 축하
          + 다시 우주로 돌아가는 것에 대한 행복함을 표현하며 IM에 축하를 전함.
"
"https://news.hada.io/topic?id=13507","인텔 프로세서 불안정성으로 인한 'Oodle' 압축 해제 실패 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 인텔 프로세서 불안정성으로 인한 'Oodle' 압축 해제 실패 현상

인텔 프로세서 불안정성으로 인한 Oodle 압축 해제 실패

     * RAD는 Unreal 엔진으로 만들어진 게임에서 Oodle Data 압축 해제 실패 또는 충돌을 일으킬 수 있는 문제를 인지함.
     * 이 문제는 주로 인텔 13900K 및 14900K 프로세서에 영향을 미치며, 13700, 14700 및 관련 프로세서에는 덜 영향을 미침.
     * 이러한 프로세서 중 소수만이 이러한 행동을 보임.
     * 문제는 BIOS 설정과 이 프로세서들의 높은 클록 속도 및 전력 사용의 조합으로 인해 발생하며, 높은 부하 하에서 시스템 불안정성과 예측 불가능한 동작을 초래함.

소프트웨어 버그가 아닌 하드웨어 문제

     * Oodle이나 Unreal에 소프트웨어 버그가 이 문제를 일으키는 것은 아닌 것으로 보임.
     * BIOS 설정이 지나치게 낙관적이어서, 일부 프로세서가 높은 부하 하에서 기능 범위를 벗어나 클록 속도와 전력 소모가 잘못된 명령을 실행하게 됨.
     * Oodle Data 압축 해제는 데이터의 무결성 검사를 추가로 수행해야 하므로, 다른 게임 플레이, 시뮬레이션, 오디오 또는 렌더링 코드와 달리 일관성 없는 부분을 매우 빠르게 발견함.

Unreal Engine 기반 게임 시작 시 흔한 실패 유형

     * 가장 흔한 실패 유형은 ""DecompressShader(): Could not decompress shader (GetShaderCompressionFormat=Oodle)"" 오류 메시지임.
     * 이 문제는 Oodle에만 영향을 미치는 것이 아니며, 이러한 불안정성을 겪는 시스템은 표준 벤치마크 및 스트레스 테스트 프로그램에서도 실패를 보임.
     * 프로세서를 많은 스레드에서 집중적으로 사용하는 프로그램은 충돌이나 예측 불가능한 동작을 일으킬 수 있음.

문제 해결을 위한 워크어라운드

     * 정확한 원인과 최선의 해결책을 진단할 프로세서 정보에 접근할 수 없음.
     * 많은 마더보드/BIOS 제조업체들이 프로세서를 안전 운영 범위 밖으로 밀어내는 설정으로 출하함.
     * 소수의 프로세서에만 영향을 미치기 때문에, 일부 사용자들은 제조업체에 프로세서를 반품하고 문제가 없는 새 프로세서를 받는 데 성공함.
     * 다른 워크어라운드는 튜닝 유틸리티 사용 또는 BIOS 설정 변경을 요구함.
     * Intel XTU를 사용하여 성능 코어 멀티플라이어를 x55에서 x54 또는 x53으로 낮추는 것이 많은 사람들에게 성공적인 해결책으로 보고됨.

BIOS 설정 변경 권장 사항

     * 오버클러킹이 활성화된 경우 비활성화하고, ""AI"" 또는 ""자동"" 오버클러킹 사용을 피함.
     * ark.intel.com에서 프로세서에 대한 올바른 한계를 찾아 전력 한계와 전압을 인텔 권장 안전 범위로 설정함.
     * ""ASUS MultiCore Enhancement"" 또는 ""ASUS Performance Enhancement 3.0""과 같은 BIOS ""강화된 터보"" 또는 ""강화된 멀티스레딩"" 설정을 비활성화함.

인텔, ASUS, Gigabyte, MSI 마더보드에 대한 추가 문제 해결 단계

     * Intel XTU를 설치하고 AVX2 테스트를 실행함.
     * AVX2 테스트 실패가 발생하면, ASUS, Gigabyte, MSI 마더보드에 대한 특정 BIOS 설정 변경을 시도함.

최종 사용자 지원 불가

     * 이 문제로 영향을 받는 게임의 최종 사용자를 직접 지원할 수 없으며, 게임 출판사, 프로세서 및 마더보드 제조업체의 공식 지원 채널을 사용할 것을 권장함.

GN⁺의 의견

     * 이 문제는 특정 인텔 프로세서를 사용하는 사용자들에게 중요하며, 시스템의 안정성을 위해 BIOS 설정을 조정하는 것이 필요할 수 있음.
     * BIOS 설정을 변경하는 것은 위험할 수 있으므로, 사용자는 주의를 기울여야 하며, 공식 지원을 받는 것이 좋음.
     * 이 글은 하드웨어 문제로 인한 소프트웨어 오류를 해결하기 위한 구체적인 조치를 제공하고 있어, 기술적 문제에 직면한 사용자들에게 유용한 정보를 제공함.

        Hacker News 의견

     * AMD Threadripper 3970X 사용 경험과 관련된 문제 해결 과정을 공유함. AMD와 몇 달간 협력하여 문제를 조사하고, AMD로부터 보상을 받았음. 최종적으로 AMD가 제공한 맞춤형 BIOS 이미지를 사용하여 시스템을 운영 중임. 문제는 Gigabyte의 책임으로 보임.
     * Intel 13900k CPU에 결함이 있었으며, 기본 설정 사용 시 문제가 발생함. 시스템이 자주 충돌하여 문제를 해결하기 위해 많은 시간을 소비함. CPU를 교체하고 Intel에 RMA(반품 수리 서비스)를 요청했으나, Intel은 리눅스 지원을 이유로 RMA를 회피하려 했음. 유럽의 소비자 보호 기관을 통해 RMA를 진행하고, 새로운 시스템을 구매하여 기존 시스템을 판매함. 앞으로 Intel 제품을 구매하지 않을 계획임.
     * 하이퍼스레딩, 터보 모드, C 상태, 효율 코어 등을 비활성화하여 보안 문제를 완화해야 하나, 이렇게 하면 20년 전의 기능 세트로 돌아가는 것과 같음을 풍자적으로 언급함.
     * i9 149kf CPU와 Asus Formula 마더보드를 사용하여 새 시스템을 구축했으나, 안정적으로 운영하기까지 어려움을 겪음. 기본 설정으로는 게임 충돌, 커널 및 emacs 컴파일 실패 등의 문제가 발생함. 터보를 5.4GHz로 제한하고 최대 와트 및 온도를 제한하는 설정을 활성화하여 시스템을 안정화함. 이제 시스템은 안정적이지만, 광고된 성능을 완전히 활용하지 못하는 것에 대해 아쉬움을 표현함.
     * Raymond Chen의 고전적인 글을 상기시키는 내용을 언급함.
     * 과거 Pentium III 1.13 GHz CPU의 문제를 회상함.
     * Zstd 압축 해제기가 네트워크를 통해 전송된 데이터와 처음으로 상호작용하는 경우가 많아, 비트 플립에 매우 민감함. 오류 검사를 활성화하더라도 하드웨어 문제를 다른 프로세스보다 더 자주 감지함. Zstd는 원본 데이터의 체크섬만을 포함하여 데이터 무결성을 보장하지만, 압축 데이터의 손상 여부를 판단하기 어렵게 만듦.
     * ""oodle"" 오류 로그를 추적하려는 사용자들의 원치 않는 불만에 대응하기 위해 만들어진 페이지로 보임. 이는 2006년 SQLite의 사례를 연상시킴.
     * ASUS TUF 마더보드를 구매한 경험을 공유함. 기본적인 기능을 원했지만, BIOS 설정이 과도한 오버클러킹을 유도하여, RAM 타이밍 설정을 포함한 여러 설정을 수동으로 조정해야 했음.
     * Epic Games가 RAD를 인수했다는 사실에 놀라움을 표현함.
"
"https://news.hada.io/topic?id=13508","생성 모델: 그들이 알고 있는 것은 무엇인가? 그들은 무엇을 알고 있는가? 알아보자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             생성 모델: 그들이 알고 있는 것은 무엇인가? 그들은 무엇을 알고 있는가? 알아보자

INTRINSIC LoRA (I-LoRA)의 숨겨진 능력 발견

     * INTRINSIC LoRA (I-LoRA)는 VQGAN, StyleGAN-XL, StyleGAN-v2, Stable Diffusion과 같은 생성 모델의 숨겨진 능력을 밝혀냄.
     * 이 방법은 추가적인 레이어 없이 모델의 기존 디코더를 사용하여 표면의 기본 속성인 법선, 깊이, 알베도, 음영을 추출함.

생성 모델의 잠재적 이해

     * 생성 모델은 매우 상세하고 현실적인 이미지를 합성하는 능력이 있음.
     * 이러한 모델들이 표면의 법선, 깊이 또는 그림자와 같은 이미지의 내재적 특성을 암묵적으로 학습하는 것으로 추정됨.
     * 본 논문에서는 생성 모델이 실제로 고품질의 장면 내재적 맵을 내부적으로 생성한다는 유력한 증거를 제시함.

INTRINSIC LoRA (I-LoRA) 소개

     * INTRINSIC LoRA (I-LoRA)는 어떤 생성 모델도 장면 내재적 예측기로 변환하는 범용적이고 플러그 앤 플레이 방식을 소개함.
     * 추가 디코더나 전체 네트워크의 미세 조정 없이 원래 생성기 네트워크로부터 직접 장면 내재적 맵을 추출할 수 있음.
     * 이 방법은 생성 모델의 전체 매개변수 중 0.6% 미만을 차지하는 새로운 매개변수를 사용하여 핵심 특징 맵의 저랭크 적응(LoRA)을 활용함.
     * 소량의 레이블이 붙은 이미지로 최적화되며, Diffusion 모델, GAN, Autoregressive 모델을 포함한 다양한 생성 아키텍처에 적용 가능함.

다양한 생성 모델에서의 장면 내재적 추출 능력 요약

     * 생성기 헤드를 변경하지 않고도 다양한 생성 모델에서 고품질의 내재적 특성을 추출할 수 있음을 요약함.
     * ✓: 고품질로 내재적 특성을 추출할 수 있음.
     * ～: 중간 품질로 내재적 특성을 추출할 수 있음.
     * ✗: 내재적 특성을 추출할 수 없음.

I-LoRA를 사용한 내재적 맵 생성 비교

     * 증강된 Stable Diffusion 2.1을 사용하여 본 방법으로 생성된 내재적 맵과 유사한 지상 진실과의 비교를 그림으로 보여줌.

GN⁺의 의견

     * INTRINSIC LoRA (I-LoRA)는 기존 생성 모델의 잠재적 능력을 새로운 차원으로 확장시키는 혁신적인 접근법임.
     * 본 연구는 생성 모델이 단순한 이미지 생성을 넘어 실제 장면의 내재적 특성을 이해하고 있다는 것을 보여줌으로써, 인공지능의 시각적 이해 능력에 대한 새로운 통찰을 제공함.
     * 이 기술은 컴퓨터 비전, 그래픽스, AR/VR 등 다양한 분야에서 응용될 잠재력을 가지고 있어, 이 분야의 연구자나 개발자들에게 매우 흥미로운 발전임.

        Hacker News 의견

     * Sora에 대한 열광적인 반응 중 하나는, 내부에 물리적 세계 시뮬레이션이 있을 것 같다는 느낌이었음. 이는 단순히 다른 비디오들을 이어 붙이는 것 이상의 작업이 배후에서 이루어지고 있음을 나타냄.
          + 모델들은 3D 장면을 렌더링하고 사진을 찍는 방법을 배움. 이는 우리가 3D 엔진을 만들려고 한 것이 아니라, 이미지들을 선형대수학에 던져 최적화한 결과로, 세계 시뮬레이터가 나온 것이 놀라움.
     * 이름은 'Bojack Horseman'이라는 쇼에 나오는 가상의 게임쇼 'Hollywoo Stars and Celebrities: What Do They Know? Do They Know Things?? Let's Find Out!'에서 참조됨.
     * Unity High Definition Rendering Pipeline 테스트 프로젝트에서 G-buffer를 추출하려고 시도했던 경험을 상기시킴.
          + 이 논문이 실제로 무언가를 증명하고 있는지 확신할 수 없음. 거대한 UNET Lora 모델이 훈련되고 있어서, 기존 모델에서 무언가를 '추출'하는 것인지, 아니면 단순히 지연 렌더링 파이프라인에서 나올 법한 채널을 생성할 수 있는 새로운 모델을 만드는 것인지 불분명함.
     * 이미지 생성 AI에 익숙하지 않은 사람으로서, 논문을 대충 읽었지만 이해하기 어려웠음.
          + I-LoRA가 추가적인 레이어 없이 모델의 기존 디코더를 사용하여 정상, 깊이, 알베도, 음영과 같은 장면의 본질적인 속성을 추출한다고 하는데, 이것이 정확히 무엇을 의미하는지 설명을 요청함.
     * 이것은 상당히 주목할 만함. 모델들이 인간이 이해할 수 있는 표현을 실제로 학습하고 있으며, 우리가 해독할 수 없는 수십억 차원의 초평면에서 일어나는 마법만을 수행하는 것이 아님.
     * 이 연구는 VR(또는 공간 컴퓨팅)에 좋은 소식임. 모델이 물리적 세계를 잘 이해하고 있다면, 장면의 두 가지 투영을 생성하는 것은 어렵지 않아 보임. 앞으로 무엇이 나올지 매우 기대됨.
     * 이 기술은 실제 이미지를 가져와 알베도와 조명을 예측할 수 있음. 누군가 이것을 사용하여 재조명 가능한 가우시안 스플래팅 장면을 만들어달라고 요청함. 동적 조명은 사진에서 만들어진 3D 스캔의 유용성을 크게 확장할 것이며, 아직 '좋다'고 할 만한 결과를 본 적이 없음.
     * 이것은 이미지를 위한 GPT인가? 생성 모델을 가져와서 LoRA를 통해 표면 정상과 같은 하위 작업에 미세 조정을 적용하고, 이 모델들이 이러한 표현을 본질적으로 학습하고 있음을 결론지음. 감독된 접근법보다 더 나은 결과를 보임.
     * 회의적인 것은 아니지만, 정상 맵 등이 이미지 생성 회사들에 의해 데이터셋에 풍부하게 포함되지 않았는지 어떻게 알 수 있을까?
          + 이 논문은 그것을 검증할 수 있는 오픈 소스 모델에 링크되어 있지만, 이것이 더 발전된 모델들의 한 비밀 재료일 수도 있음.
     * 예를 들어, 정상 맵은 어떻게 얻어지는가? AI가 이미지를 생성하기 전에 이를 생성하고, 내부 상태에서 그것들을 읽어내는 것인가?
"
"https://news.hada.io/topic?id=13511","테이블 제목을 고정시켜 주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            테이블 제목을 고정시켜 주세요

테이블 제목을 고정시켜주세요

     * 웹상에서 큰 데이터 세트나 테이블 레이아웃을 자주 접함.
     * 수백 개의 행이 있는 테이블에서 스크롤을 시작하면 문제가 발생함.
     * 테이블 헤더가 사라지면, 사용자는 각 열이 무엇과 연관되어 있는지 기억하기 어려움.

고정된 헤더

     * 고정된 헤더는 마법처럼 보이지만, 구현은 매우 쉬움.
     * thead에 단 두 개의 CSS 속성을 추가하기만 하면 됨:
          + position: sticky;
          + top: 0;
     * 전 세계적으로 약 96%의 지원률을 가진 sticky는 안정적으로 많은 브라우저를 지원함.
     * 사용자 경험 향상에도 도움이 됨.

GN⁺의 의견

     * 웹사이트에서 큰 테이블을 다룰 때, 사용자가 스크롤을 내려도 테이블의 제목을 쉽게 볼 수 있도록 하는 것은 사용자 경험을 크게 향상시킴.
     * CSS의 position: sticky; 속성을 사용하여 간단하게 테이블 헤더를 고정시킬 수 있음은 웹 개발자들에게 유용한 정보임.
     * 이 기능이 널리 지원되고 있어서, 웹 개발자들은 다양한 브라우저에서 안정적으로 이 기능을 구현할 수 있음을 알 수 있음.

        Hacker News 의견

     * 한 축에서의 고정 헤더(sticky headers)는 가능하지만, CSS가 양 축에서 지원하는 날을 기다리고 있음: GitHub 이슈 링크
     * CSS 지식이 거의 없음에도 기능적인 웹 앱을 만들어왔음. 최근에 20,000행이 넘는 테이블에 고정 헤더를 시도했으나, Bootstrap 클래스나 Stack Overflow, GPT, CodePen의 제안을 시도해봐도 이상한 부작용이 발생했음. 하지만 이 글의 CodePen을 사용해서 2분 만에 해결하고 프로덕션에 적용함. 감사함을 표시.
     * position: sticky;를 사용해서 테이블 헤더를 고정하는 것이 쉬울 것 같지만, 테이블 내용에 어떤 작업을 하면 문제가 발생함. 예를 들어, 사용자가 테이블을 스크롤하고 페이지를 떠났다가 돌아왔을 때 스크롤 위치를 복원하는 기능을 추가했는데, 복원된 위치가 항상 한 줄 아래로 이동해 있음. 투명한 테이블 헤더를 통해 볼 때 원하는 줄이 맨 위에 있지만, 헤더가 겹쳐서 다음 줄이 첫 번째로 보임. 스크롤 위치를 헤더 높이를 고려해 조정하면 처음에는 잘 작동하지만, 때때로 몇 픽셀이 어긋남. 이는 테이블이 크기 때문에 스크롤 이벤트에 따라 지연 로딩을 하고 있고, 자동 테이블 레이아웃을 사용하고 있어서 때때로 헤더 셀이 너무 좁아져서 단어가 줄바꿈되고 전체 헤더 높이가 증가하기 때문임. 최종 해결책은 ResizeObserver를 헤더 요소에 생성하여 높이가
       변경될 때 스크롤 위치를 동적으로 조정하는 것임. ResizeObserver 문서
     * 테이블 헤더의 테두리도 고정하고 싶다면, 다음과 같은 CSS 코드를 사용할 수 있음:
table thead:before {
  content: '';
  position: absolute;
  width: 100%;
  top: 0;
  border-top: 2px solid;
}

table thead:after {
  content: '';
  position: absolute;
  width: 100%;
  bottom: 0;
  border-bottom: 1px solid;
}

     * 테이블 헤더가 자동으로 고정되었으면 좋겠음. 개발자들이 <th> 태그를 사용하는 추가 작업을 한다면, 그들이 원하는 동작일 가능성이 높음.
     * 명령줄에서는 헤더를 표준 오류(stderr)로, 본문을 표준 출력(stdout)으로 보내는 것이 좋음. 그렇지 않으면 정렬 시 헤더가 결과에 섞여 나올 수 있음.
     * Chrome은 과거에 position: sticky 속성을 <thead>와 <tr> 요소에서 사용하지 못하게 했었음: Chromium 이슈 링크
     * 고정 헤더 대신 제한된 뷰포트 높이를 사용하여 헤더가 항상 보이도록 하는 것을 제안함. 예를 들어 DataGridXL에서 그렇게 함: DataGridXL 링크 (작성자가 만든 것임을 밝힘)
     * CodePen 예제에서 top을 테두리를 고려하여 설정하면 (예: -1px 대신 0), 테이블 본문이 헤더 위로 흐르는 것을 방지할 수 있음. 두 가지 CodePen 예제를 비교함: 기존 CodePen과 개선된 CodePen
     * 일부는 ""제발 하지 말라""고 말하고 싶어함: Hacker News 논의 링크
"
"https://news.hada.io/topic?id=13486","오늘 달에 착륙하는 민간 기업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            오늘 달에 착륙하는 민간 기업

IM-1 임무 착륙 시간 업데이트 2

     * 비행 관제사들은 IM-1 임무 착륙 시퀀스를 시작하기 전에 추가 궤도를 실행하기로 결정함.
     * 새로 예상되는 착륙 시간은 CST 기준 오후 5시 24분임.
     * 착륙 스트림은 IM-1 웹페이지와 NASA TV에서 CST 기준 오후 4시에 시작될 예정임.

IM-1 임무 착륙 시간 업데이트

     * 비행 관제사들은 달 궤도 수정 기동을 명령하여 오디세우스의 궤도를 높였고, 예상 착륙 시간을 CST 기준 오후 3시 24분으로 업데이트함.
     * 착륙 스트림은 이 IM-1 웹페이지와 NASA TV에서 CST 기준 오후 2시에 시작될 예정임.

지형 관련 항법 이미지 업데이트

     * 오디세우스의 지형 관련 항법 카메라가 달의 북부 적도 고원에 있는 벨코비치 K 크레이터의 이미지를 캡처함.
     * 이 크레이터는 중앙에 산이 있는 약 50km 지름의 크레이터로, 형성될 때 만들어짐.

착륙 궤적 업데이트

     * 비행 관제사들은 달 궤도 삽입 후 엔진 연소 데이터를 분석하고, 예상 비행 기동 타이밍을 업데이트함.
     * 예상되는 착륙 기회는 CST 기준 오후 4시 30분임.
     * 착륙 기회는 오디세우스에게 지금까지 가장 큰 도전이 될 것임.

달 궤도 이미지 업데이트

     * 오디세우스는 2월 21일 달 궤도 삽입 후 달의 가까운 면을 지나감.
     * 착륙선은 달 궤도에서 훌륭한 상태를 유지하고 있음.

IM-1 임무 달 궤도 삽입 완료 및 달 궤도 진입

     * 오디세우스는 예정된 408초 메인 엔진 달 궤도 삽입 연소를 완료하고 현재 92km 원형 달 궤도에 있음.
     * 초기 데이터는 800m/s 연소가 2m/s 정확도 내에서 완료되었음을 나타냄.
     * 착륙선은 1,000,000km 이상을 여행한 후, 이제 휴스턴을 가로질러 운전하는 거리보다 달에 더 가까움.

계획된 궤적 수정 기동 완료

     * Intuitive Machines 비행 관제사들은 IM-1 임무의 두 번째 계획된 궤적 수정 기동(TCM)을 명령함.
     * 오늘의 TCM은 CST 기준 오후 2시에 8초간 발사되었으며, 이는 달 궤도 삽입(LOI) 전 마지막 기동임.

IM-1 임무 착륙 시간 업데이트

     * IM-1 임무는 달에 착륙하기 위해 수많은 도전을 극복함.
     * Intuitive Machines는 CST 기준 목요일, 2월 22일 오후 4시 49분에 달에 착륙할 것으로 예상함.

IM-1 엔진 기동 업데이트

     * 비행 관제사들은 2월 16일 엔진 Commissioning Maneuver (CM)의 데이터를 수신 및 분석함.
     * 데이터는 오디세우스가 약 0.8m/s 정확도로 21m/s 목표를 달성했음을 확인함.

IM-1 임무 기동 및 이벤트 업데이트

     * 오디세우스는 훌륭한 상태를 유지하고 있으며, 비행 관제사들은 달 궤도 삽입을 위한 계획된 궤적 수정 기동을 준비 중임.

비디오 업데이트

     * Intuitive Machines는 2024년 2월 16일에 첫 IM-1 임무 이미지를 성공적으로 지구로 전송함.

IM-1 임무 엔진 커미셔닝 업데이트

     * Intuitive Machines 비행 관제사들은 우주에서 첫 액체 메탄 및 액체 산소 엔진을 성공적으로 발사함.

IM-1 임무 차량 건강 업데이트

     * IM-1 임무 Nova-C 클래스 달 착륙선은 훌륭한 상태를 유지하고 있으며, 엔진 커미셔닝 기동을 준비 중임.

IM-1 임무 Nova-C 달 착륙선, SpaceX 발사 후 달로 성공적으로 향함

     * IM-1 임무 Nova-C 클래스 달 착륙선은 SpaceX의 Falcon 9 로켓에 탑재되어 발사되었으며, 우주에서 안정적인 자세, 태양 에너지 충전 및 무선 통신 연결을 통해 성공적으로 커미셔닝됨.

IM-1 발사 일정 업데이트

     * SpaceX는 메탄 온도가 비정상적이어서 발사를 연기하고, 2월 15일 새벽 1시 5분에 IM-1 임무를 위한 Falcon 9의 발사를 목표로 함을 발표함.

IM-1 테스트 캠페인 완료

     * Intuitive Machines와 SpaceX는 IM-1 임무의 달 착륙선 연료 주입 테스트 데이터를 분석하고 테스트 캠페인이 완료되었음을 결정함.

Intuitive Machines 달 착륙선, 발사 예정

     * IM-1 임무 Nova-C 클래스 달 착륙선은 모든 통합 마일스톤을 완료하고 SpaceX의 페이로드 페어링 내에 안전하게 캡슐화됨.
     * SpaceX와 협력하여, 회사의 IM-1 임무 발사는 2월 14일 새벽 12시 57분부터 시작하는 멀티데이 발사 창에서 플로리다의 NASA 케네디 우주 센터의 발사 단지 39A에서 목표로 함.

   GN⁺의 의견
     * 이 기사는 Intuitive Machines의 IM-1 임무가 달에 착륙하기 위한 준비 과정과 업데이트를 상세하게 보여줌. 이는 우주 탐사와 달 착륙 기술의 발전에 대한 흥미로운 정보를 제공함.
     * SpaceX와의 협력과 NASA의 CLPS(Commercial Lunar Payload Services) 프로그램의 일환으로 진행되는 이 임무는 민간 우주 탐사의 중요한 이정표를 나타냄.
     * 기사에서 언급된 오디세우스의 건강한 상태와 정밀한 궤적 수정 기동은 현대 우주선 기술의 신뢰성과 진보를 반영함. 이는 미래의 우주 탐사 임무에 대한 기대감을 높이는 중요한 요소임.

        Hacker News 의견

     * EagleCam의 달 착륙 기록 계획

     EagleCam은 Odysseus 착륙선이 달 표면에서 약 30미터 상공에 있을 때 분리되어 약 10m/s의 속도로 달 표면에 충돌하며, 이를 통해 달 착륙의 제3자 시점 이미지를 최초로 촬영할 예정임. Wi-Fi 연결을 통해 Odysseus 착륙선으로부터 이미지를 지구로 전송할 것임.
     * CubeSat에 대한 궁금증

     이 CubeSat은 학생들이 제작한 것으로, 착륙을 기록하기 위해 어떤 카메라를 사용하는지, 6초 정도의 낙하 동안 자체적으로 방향을 조정할 수 있는지, 착륙 후 카메라를 움직일 수 있는지, 착륙선이 시야에 들어올 확률을 높이기 위해 어안 렌즈를 사용하는지 등에 대한 정보가 부족함.
     * 프로젝트 페이지와 통신 상황

     프로젝트 페이지에는 세부사항이 부족하지만, 통신에 약간의 문제가 있었음에도 착륙선은 안전하게 착륙하여 데이터를 전송하고 있음.
     * NASA 관리자의 메시지

     NASA 관리자 Bill Nelson의 축하 메시지를 보았지만, 만약 작동하지 않았다면 미래를 위한 위로의 메시지도 녹음했을지 궁금함.
     * 주류 뉴스에서의 부족한 보도

     이러한 중요한 뉴스가 주류 뉴스에서 더 주목받지 못하는 것이 안타까움. 대신 살인 사건, 부동산 세금, 배우의 스캔들 등이 뉴스를 장식하고 있어 해커뉴스를 찾게 됨.
     * 착륙 신호 감지

     착륙선이 닿은 것으로 보이며, 임무 제어 센터에서 약한 신호를 감지하고 있어 현재 신호를 정제하려고 시도 중임.
     * 달 착륙 사진에 대한 실망

     50년이 지났지만, ""착륙""의 두 장의 품질이 낮은 사진만 얻었다는 것에 대해 비꼬는 듯한 반응을 보임.
     * 민간 착륙선의 임무 제어 센터

     민간 착륙선의 임무 제어 센터가 작은 규모임에도 불구하고, 재사용 가능한 로켓의 화려함 아래 숨겨진 진정한 혁명은 매우 정교한 원격 측정, 통신, 기내 자동화, 컴퓨팅 스택일 수 있음을 시사함. 이는 전통적인 임무 제어 센터를 훨씬 뛰어넘는 기능을 제공할 수 있음.
     * 착륙 영상 링크 접근성 문제

     착륙 영상의 YouTube 링크에 접근하기가 어렵게 만들어져 있어 불편함을 표현함.
     * Odysseus 달 착륙 예정 시간

     Odysseus 달 착륙선이 동부 표준시 기준 오후 5시 30분(그리니치 표준시 2230)에 착륙할 예정임을 알림.
     * 대체 현실 TV 시리즈

     ""For All Mankind""이라는 TV 시리즈를 최근에 시청하고 매료되었으며, 이 시리즈는 민간 회사가 화성에 착륙하는 대체 현실을 그린 픽션임.
     * 달에 대한 권리 주장 프로그램

     이들이 최근에 설립된 주택 개척 프로그램의 일부라고 생각되며, 이 프로그램은 1980년대 알래스카에서 시행된 것과 유사하게, 달 표면에 표식을 설치하면 주변 20에이커의 권리를 주장할 수 있음.
"
"https://news.hada.io/topic?id=13477","AI 행동 가이드라인의 공개 필요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI 행동 가이드라인의 공개 필요성

     * 둠 개발자이자 Oculus의 CTO 였던 John Carmack의 트윗

     ""프롬프트 엔지니어링과 필터링으로 설정된 AI 행동 가드레일은 공개되어야 하며, 제작자는 사회에 가장 좋은 것이 무엇인지에 대한 자신의 비전과 이를 명령과 코드로 구체화한 과정을 자랑스럽게 밝혀야 합니다.
     사실 많은 사람들이 부끄러워하고 있다고 생각합니다.
     물론 인간의 피드백을 통해 강화 학습으로 인코딩된 수천 개의 작은 넛지는 훨씬 더 그럴듯한 부정 가능성을 제공합니다.""

        Hacker News 의견

     * 구글은 이미지 인식 모델에서 흑인을 고릴라로 잘못 인식하는 등의 비판을 받은 이후, 이미지 생성 시스템에서 다양성을 과도하게 반영하려고 노력한 것으로 보임.
     * 대규모 콘텐츠 관리나 모더레이션에 직접 관여한 적은 없지만, 자동화된 규칙이 일반적으로 공개되지 않는 것은 보안을 위한 일종의 '암호화'가 필요하기 때문으로 이해함. 예를 들어, 금지어 목록을 공개하면 사람들이 목록에 없는 단어를 사용해 문제가 되는 내용을 표현하는 방법을 쉽게 찾을 수 있음. 그러나 현재로서는 더 나은 접근 방식이 없는 것 같음.
     * Gemini는 백인 캐릭터 생성에 문제가 있으며, 이는 더욱 인종차별적인 문제를 야기할 수 있음. 다양성, 형평성, 포괄성(DEI)에 대한 노력이 오히려 실패를 불러올 수 있음.
     * Gemini의 안전장치가 매우 답답하며, 무해한 프롬프트에도 여러 번 걸림. ChatGPT도 비슷하지만 Gemini만큼 나쁘지는 않음. 피드백을 통해 안전장치를 조금 낮추길 바라지만, 가까운 미래에는 이런 상황이 계속될 것 같음.
     * 로컬에서 LLMs(대규모 언어 모델)과 Stable Diffusion을 쉽게 실행할 수 있으며, 사용자의 요청에 따라 작동함. 강력한 컴퓨터가 있으면 OpenAI나 Gemini보다 빠르게 실행될 수 있음. LM Studio와 AUTOMATIC1111은 로컬에서 각각 LLMs와 Stable Diffusion을 실행하는 것을 간단하게 만들어 줌.
     * 검열은 검열 대상이 무엇인지 모를 때만 효과적임. 검열되는 내용 자체가 이야기를 전달함.
     * AI 행동 안전장치에 대한 투명성을 높이는 것을 보고 싶지만, 이것이 곧 이루어질 것으로 기대하지는 않음. 투명성은 안전장치를 우회하는 것을 훨씬 쉽게 만들 수 있음.
     * 사람들이 흑인 여성을 요청했을 때 백인 남성이 생성되는 것에 분노할 것을 알고 있어서 구글은 안전한 길을 택했지만, 현재의 결과도 받아들여져서는 안 됨을 보여줘야 함.
     * 이 안전장치를 작성한 팀의 지리적 배경과 사용한 언어가 궁금함. 결과물은 남아시아인(특히 남아시아 여성)과 흑인을 주로 생성하는 경향이 있으며, 라틴계는 거의 생성되지 않음. 이는 미국 기반의 팀이라면 큰 누락이 될 수 있음. 그러나 스테레오타입의 원주민 또는 동아시아인은 가끔 생성됨.
     * 이것은 당신을 해칠 수 있음. 당신을 해치지 않기 위한 것임. 그러나 어떻게 해를 입힐 수 있는지, 어떻게 보호하는지에 대해서는 알 수 없음.
"
"https://news.hada.io/topic?id=13503","사토시-시리우스 이메일 교환 기록사토시-시리우스 이메일 교환 기록 (2009-2011)

사토시 - 시리우스 이메일 교환 (2009-2011)

     * 비트코인 창시자 사토시 나카모토와 마르티 말미(Martti Malmi, 별명 시리우스) 간의 이메일 교환.
     * 말미는 영국에서 열린 중요한 재판에서 증인으로 출석하기 위해 이메일을 공개하기로 결정.
     * 이메일 아카이브는 불완전하며, 말미의 학교 이메일 주소에서 온 이메일만 포함.
     * 이메일에 언급된 비밀번호와 주소는 더 이상 유효하지 않거나 관련이 없음.

이메일 #1

     * 사토시가 말미의 비트코인 이해도를 칭찬하며, 웹사이트 작성이 필요하다고 언급.
     * 사토시는 자신의 글쓰기 능력이 좋지 않아 말미에게 웹사이트와 FAQ 작성을 요청.
     * 서버 측 스크립팅 언어를 위한 인터페이스 개발과 노드 운영의 중요성을 강조.

이메일 #2

     * 말미가 웹사이트와 FAQ 작성을 시작할 것이라고 답변.
     * 비밀번호로 보호된 개인 키 생성 도구와 버그/기능 추적기 설정을 제안.
     * 비트코인 노드를 24/7 운영하고 있으며, 프로젝트 참여에 대한 열정을 표현.

이메일 #3

     * 사토시가 말미를 소스포지 프로젝트 개발자로 추가하고 웹 공간 편집 권한을 부여.
     * 암호화된 개인 키 백업의 중요성과 에스크로 기능 개발 계획을 설명.
     * FAQ 작성을 위한 질문과 답변 모음을 제공하며, 복잡한 설계 세부사항은 피할 것을 조언.

GN⁺의 의견

     * 이 이메일 교환은 초기 비트코인 개발의 중요한 역사적 순간을 담고 있어 매우 흥미롭다.
     * 사토시 나카모토의 생각과 비트코인에 대한 그의 비전을 엿볼 수 있는 기회를 제공한다.
     * 이메일은 비트코인의 초기 기술적 과제와 커뮤니티 구축에 대한 노력을 보여주며, 현재의 암호화폐 생태계를 이해하는 데 도움이 된다.

        Hacker News 의견

     * 사토시 나카모토가 자신의 정체를 비밀로 유지하기 위해 세심한 조치를 취하고, 그것을 지금까지 성공적으로 유지한 것은 그의 기술적 능력보다 더 인상적인 성취라는 의견이 있음. 2009년에도 온라인에서 디지털 흔적을 남기지 않고 활동하는 것이 어려웠으며, 국가 지원을 받는 행위자들이 그를 식별하려 했으나 실패했을 가능성이 있음. 물론 그가 국가 지원을 받는 행위자일 수도 있다는 추측도 있음.
     * 사토시 나카모토의 신원이 결국 밝혀질 것이라고 생각하는 이유를 이해하지 못하는 사람들이 있음. 비트코인을 발명한 것이 범죄가 아니라면, 수사가 이루어지지 않을 것이고, 판사가 신원 정보를 얻기 위한 영장에 서명하지 않을 것임. 사설 탐정도 영장 없이 인터넷 서비스 제공자(ISP)로부터 개인 정보를 얻을 수 없음. 비트코인의 발명자가 법정에서 사생활 침해를 허용할 만한 범죄를 저질렀는지에 대한 의문이 제기됨.
     * 사토시 나카모토가 문장 끝에 두 칸의 공백을 두는 것, 영국식 어휘 사용 등의 습관이 있음. 이와 유사한 습관을 가진 유명한 영국 암호학자인 아담 백이 있으나, 비트코인을 만든 사람의 정체가 중요하지 않다는 의견도 있음. 비트코인의 정치적 이야기를 읽으면 더 명확해진다고 함. ""The Blocksize War: The Battle Over Who Controls Bitcoin's Protocol Rules""라는 책이 좋은 시작점이 될 수 있음.
     * 사토시 나카모토가 이메일에서 익명의 기부자들을 언급한 것에 대해, 그 기부자들이 누구였는지 궁금해하는 사람들이 있음.
     * 사토시 나카모토의 신원과 관련된 법정 사건에 대한 맥락을 제공하는 링크가 있음.
     * 영국식 영어 사용을 신원 식별 요소로 사용하는 것이 어리석다고 생각하는 사람들이 있음. 그런 것을 가장하는 것은 매우 쉬운 일이며, 지역적 오인을 유도하는 것은 가장 쉬운 오도 전략이라는 의견이 있음.
     * 2010년에 비트코인을 처음 알게 되었고, 그것에 대해 배우고 싶어서 리눅스를 사용하던 사람에서 소프트웨어를 작성할 수 있는 사람으로 변화했으며, 결국 컴퓨터 과학 학위를 마친 사람의 이야기가 있음. 초기 비트코인 커뮤니티와 같은 다른 커뮤니티를 찾기 어렵다고 느끼는 사람도 있음.
     * 사토시 나카모토의 정체에 대한 미스터리를 즐기고 감사해하는 사람들이 있음. DB 쿠퍼와 딥스로트와 같은 유명한 익명의 인물들이 있었지만, 그들은 특별한 일을 한 것이 아니라 단지 익명으로 유명해졌다는 점에서 사토시와 차이가 있음.
     * 사토시 나카모토가 만든 디지털 흔적(이메일, 게시된 코드 등)이 완전히 추적 불가능한지, 그를 식별할 수 있는 도메인, IP 주소, 접속 로그 등의 아카이브가 여전히 존재하는지에 대한 의문이 있음.
     * 사토시 나카모토가 분명히 아닌 사람들을 나열하는 웹사이트가 있으면 ""사토시는 누구인가""에 대한 논의에 더 유용할 것이라는 의견이 있음.
"
"https://news.hada.io/topic?id=13539","인플루언서 마케팅 ROI: 팔로워 수가 적은 인플루언서가 더 비용 효과적임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               인플루언서 마케팅 ROI: 팔로워 수가 적은 인플루언서가 더 비용 효과적임

     * 인플루언서 마케팅 산업은 빠르게 성장하여 174억 달러 규모에 이르렀으며, 미국의 80% 이상의 회사들이 마케팅 목적으로 인플루언서를 활용함
     * 인스타그램은 브랜드와 인플루언서 모두에게 가장 중요한 사용자 생성 콘텐츠 네트워크로, 연간 38억 개의 후원 게시물을 자랑함
     * 직접 소비자(DTC) 기업들에게는 긍정적인 투자 수익률(ROI)을 창출하는 인플루언서를 식별하는 것이 인플루언서 마케팅을 수익 채널로 고려할 때 가장 큰 도전

나노 인플루언서: 적을수록 더 많음

     * 연구 결과, 팔로워 수가 적은 나노 인플루언서가 팔로워 수가 많은 매크로 인플루언서보다 수익 창출에 있어 더 비용 효과적임을 발견
     * 인플루언서와 팔로워 간의 상호작용이 중요한 역할을 하며, 나노 인플루언서와 그들의 관객 사이의 더 친밀한 연결이 더 효과적인 마케팅 결과로 이어짐
     * 연구팀은 유럽의 선도적인 DTC 기업의 데이터를 분석하고, 인스타그램에서 공유된 인플루언서 특정 할인 코드를 통해 거의 190만 개의 제품 판매와 1700만 유로 이상의 수익을 연결함
     * 이러한 분석은 유튜브와 틱톡에서도 확인되었으며, 인스타그램에서 319명의 나노 및 매크로 인플루언서와 함께 진행된 세 가지 다른 현장 연구로 보완됨

마케터를 위한 교훈

     * DTC 기업과 마케터에게는 나노 인플루언서를 활용하여 더 효과적인 마케팅 캠페인을 진행하는 것이 높은 ROI를 약속하고 더 진정성 있는 관객과의 연결을 촉진
     * 인플루언서 마케팅 플랫폼을 통해 마케터는 동시에 수백 명의 저 팔로워 인플루언서와 효율적으로 작업할 수 있으며, 이는 하나의 고 팔로워 인플루언서를 다루는 비용으로 그들의 잠재력을 활용할 수 있음
     * 마케터는 인플루언서 마케팅의 전체 퍼널을 고려해야 하며, 나노 인플루언서는 ROI 측정 기준에서 일관되게 매크로 인플루언서를 능가함
     * 인플루언서 지출 대비 수익률(ROIS)은 나노 인플루언서가 매크로 인플루언서에 비해 세 배 이상 높으며, 매크로 인플루언서의 수익은 여섯 배 더 높지만 관련 비용은 18배 더 높음
"
"https://news.hada.io/topic?id=13441"," 오픈AI의 회장 브렛 테일러, 비즈니스용 대화형 AI 에이전트 Sierra 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              오픈AI의 회장 브렛 테일러, 비즈니스용 대화형 AI 에이전트 Sierra 출시

   Sierra: 혁신적인 대화형 AI 챗봇
     * 오픈AI의 회장 Bret Taylor와 전 구글 직원인 Clay Bavor가 공동 설립한 Sierra는 기업 시스템 내에서 문제를 해결하고 결정을 내릴 수 있는 AI 에이전트를 구축하고자 합니다.

   Sierra의 기술적 혁신과 경쟁우위
    1. 프롬프트 관리 도구

     * 프롬프트 관리 도구를 사용하여 개발자와 비즈니스 사용자가 프롬프트를 사용자 정의 및 최적화할 수 있는 능력과 같은 기술적 혁신과 기능을 기반으로 플랫폼을 구축하였습니다.

    2. 컨텍스트 캐시, 모델 라우팅 및 오케스트레이션, 환각 현상 해결

     * 대화 모델 라우팅과 오케스트레이션을 통해 AI 에이전트가 각 시나리오에 가장 적합하고 최적의 모델을 사용할 수 있게 하는데, 이는 채팅 GPT와 같은 대형 언어 모델에서 발생하는 환각 문제를 줄이고 수정하여 AI 에이전트의 응답의 품질과 신뢰성을 보장합니다.

   투자 유치 상황
     * Sequoia Capital 및 General Atlantic 등으로부터 1억 1천만 달러 규모의 투자를 유치하였으며, 시리어스XM, 소노스, 웨이트워처스와 같은 주요 기업들과 파트너십을 체결하였습니다.

   주요 경쟁사
     * 주요 경쟁사로는 Rasa, Haptik, Ada 등이 있습니다.
       이들은 시에라와 경쟁하며 경쟁사들과의 차별화된 가치 제안과 강력한 경쟁 우위를 갖추고자 노력하고 있습니다.
     * Sierra는 대화형 AI 에이전트로 기업 시스템 내에서 작업을 수행할 수 있는 유일한 플랫폼이며 독보적인 경쟁 우위를 갖고 있다고 주장합니다.
"
"https://news.hada.io/topic?id=13419","Gitlab의 Postgres 스키마 디자인에 대한 나의 노트 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Gitlab의 Postgres 스키마 디자인에 대한 나의 노트 (2022)

GitLab Postgres 스키마 디자인에 대한 나의 노트

     * GitLab의 Postgres 스키마를 살펴봄으로써, 자신이 설계하는 스키마와 비교하고, GitLab의 스키마 정의에서 모범 사례를 배우고자 함.
     * GitLab은 오픈 소스 DevOps 플랫폼으로, GitHub의 대안이며 자체 호스팅이 가능함.

올바른 기본 키 유형 사용하기

     * 데이터베이스가 작을 때는 눈에 띄지 않지만, 성장함에 따라 기본 키가 저장 공간, 쓰기 속도, 읽기 속도에 영향을 미침.
     * GitLab은 573개의 테이블 중 380개는 bigserial 기본 키 유형을, 170개는 serial4를 사용하고, 나머지 23개는 복합 기본 키를 사용함.

내부 및 외부 ID의 사용

     * 기본 키를 외부 세계에 노출하지 않는 것이 좋은 관행임.
     * GitLab은 issues, ci_pipelines, deployments, epics 등의 테이블에서 내부 ID(id)와 외부 ID(iid)를 모두 사용함.

text 문자 유형과 검사 제약 조건 사용하기

     * GitLab 스키마는 character varying(n)과 text를 모두 사용하지만, text 유형을 더 자주 사용함.
     * text 유형은 길이 제약을 가지고 있지 않으며, CHECK를 사용하여 길이 제약을 정의함.

명명 규칙

     * 모든 테이블은 복수형을 사용하며, 모듈 이름 접두사를 사용하여 네임스페이스를 제공함.
     * 테이블과 열 이름은 snake_case 규칙을 따름.

타임스탬프의 시간대 사용

     * GitLab은 timestamp with timezone과 timestamp without timezone을 모두 사용함.
     * 시스템 작업에는 timestamp without timezone을, 사용자 작업에는 timestamp with timezone을 사용함.

외래 키 제약 조건

     * GitLab은 대부분의 테이블에서 외래 키 제약 조건을 사용하지만, audit_events, abuse_reports, web_hooks_logs, spam_logs와 같은 몇몇 테이블에서는 사용하지 않음.

큰 테이블의 파티셔닝

     * GitLab은 쿼리 성능을 향상시키기 위해 크기가 커질 수 있는 테이블을 파티셔닝함.

Trigrams과 gin_trgm_ops를 사용하여 LIKE 검색 사용 사례 지원하기

     * GitLab은 GIN(Generalized Inverted Index) 인덱스를 사용하여 효율적인 검색을 수행함.

jsonb의 사용

     * GitLab 스키마는 여러 테이블에서 jsonb 데이터 유형을 사용함.

기타 팁

     * 수정 가능한 테이블에는 updated_at과 같은 감사 필드를 사용하고, 수정할 수 없는 로그 테이블에는 사용하지 않음.
     * Enums는 character varying 대신 smallint로 저장되어 공간을 절약함.

   GN⁺의 의견:
     * GitLab의 스키마 디자인은 데이터베이스 설계에 대한 통찰력을 제공하며, 특히 대규모 시스템을 위한 스키마 최적화에 대한 중요한 교훈을 담고 있음.
     * GitLab이 오픈 소스이기 때문에, 이러한 스키마 설계 결정들은 다른 개발자들이 자신의 프로젝트에 적용할 수 있는 실질적인 예시를 제공함.
     * GitLab의 스키마에서 배울 수 있는 점은, 데이터 유형 선택, 인덱싱 전략, 파티셔닝, 외래 키 제약 조건의 사용 등 데이터베이스 성능과 유지 관리에 중요한 영향을 미치는 요소들을 신중하게 고려해야 한다는 것임.

        Hacker News 의견

     *

     기본 키를 외부에 노출하지 않는 것은 일반적으로 좋은 관행임. 특히 정수형이나 bigint 타입의 순차적 자동 증가 식별자를 사용할 때 중요함, 이들은 추측 가능하기 때문임.
          + 기본 키를 외부에 노출하지 않는 것이 좋은 관행이라는 의견이 제시됨. 특히 순차적으로 증가하는 정수형 식별자는 추측 가능하므로 더욱 중요함.
     *

     예를 들어, Github는 2020년에 1억 2천 8백만 개의 공개 저장소를 가지고 있었음. 저장소 당 20개의 이슈가 있다고 가정하면 시리얼 범위를 넘어섬. 또한 테이블의 타입을 변경하는 것은 비용이 많이 듬.
          + Github의 공개 저장소 수와 이슈의 예상 수를 들어 시리얼 범위를 넘어설 수 있음을 지적하며, 테이블 타입 변경의 비용 문제를 언급함.
     *

     UUID 컬럼의 저장 크기에 대한 논점은 설득력이 없음. 테이블에 다른 컬럼이 5개 있을 때 128비트 대 64비트는 큰 차이가 없음.
          + UUID 컬럼의 저장 크기에 대한 우려보다는 성능 문제가 더 중요하다고 주장함. UUIDv4는 완전히 무작위이며 인덱스 성능에 이상적이지 않음을 지적하고, UUIDv7이 더 나은 해결책이 될 수 있음을 언급함.
     *

     외래 키는 비용이 많이 든다는 것은 자주 반복되지만 거의 검증되지 않은 주장임. 데이터베이스를 활용하는 것이 재구현하는 것보다 지식과 실험이 필요하며, 종종 더 나은 결과를 가져옴.
          + 외래 키의 비용에 대한 일반적인 주장에 의문을 제기하며, 데이터베이스를 적절히 활용하는 것이 중요함을 강조함.
     *

     Gitlab과 GitHub의 성능 차이에 대해 쓴 글이나 주목한 사람이 있는지 궁금함.
          + Gitlab과 GitHub의 성능 차이에 대한 관심을 표현하며, Gitlab의 페이지 로딩 시간이 GitHub에 비해 현저히 느리다고 느낌.
     *

     CI 변수 CI_PIPELINE_IID와 CI_MERGE_REQUEST_IID에서 ""I""가 추가된 목적이 궁금했음. 데이터베이스 관련 선택으로 추정했지만, 이 글이 그것을 확인해줌.
          + CI 변수에서 볼 수 있는 추가적인 ""I""의 목적에 대해 궁금증을 표하며, 이것이 데이터베이스 관련 선택임을 이해함.
     *

     이 글이 매우 유용했음. 이와 비슷한 다른 글을 어디에서 찾을 수 있는지 궁금함.
          + 글이 유용했다고 느끼며, 비슷한 내용의 다른 자료를 찾고 싶어함.
     *

     일반적으로 스키마 설계와 개발이 구시대에 머물러 있다고 생각하는 사람이 나뿐인가?
          + 스키마 설계와 개발이 시대에 뒤떨어져 있다고 느끼며, 특히 마이그레이션을 할 때 데이터 손실의 위험을 느낌. 데이터베이스/ORM이 외부 ID와 내부 ID를 자동으로 처리해주지 않는 점에 대해 의문을 제기함.
     *

     1경은 1000000000조와 같음.
          + 32비트 정수와 64비트 정수 사이에서 선택해야 하는 현실을 지적하며, 약 1조의 카디널리티를 지원할 수 있는 5바이트 정수 타입의 필요성을 언급함.
     *

     Postgres의 네이티브 UUID v4 타입을 사용할 때 테이블 크기가 25% 증가하고, bigserial 대비 삽입 속도가 25%로 떨어짐.
          + UUIDv4와 bigserial의 성능 차이에 대해 궁금해하며, UUIDv4가 왜 더 나쁜 성능을 보이는지에 대한 설명을 요청함.
"
