"https://news.hada.io/topic?id=12710",""홈쿡"을 가능하게 하는 앱 (2020년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ""홈쿡""을 가능하게 하는 앱 (2020년)

새로운 도전자의 등장

     * 2019년 가을, 가족 간의 소통을 위해 주로 사용하던 Tapstack 앱이 서비스 종료를 발표함.
     * 서비스 종료에 대비해 대체할 수 있는 앱을 찾던 중, 기존의 기업 메시징 앱 대신 직접 앱을 만들기로 결정함.
     * 만든 앱은 매우 간단하며, 사진과 비디오를 캡처하고 전송하는 '마법의 창'과 같은 기능을 가짐. 메시지는 큐에 대기하고, 한 번 본 후에는 사라짐.

기술적 관찰

     * Tapstack보다 더 단순화하여 로그인 시스템이나 연락처 관리 인터페이스가 필요 없는 앱을 만듦.
     * 앱의 핵심은 사진/비디오 캡처 기능으로, 오픈 소스 컴포넌트를 활용함.
     * AWS S3 버킷과 AWS Lambda 함수를 사용하여 백엔드를 구성하고, TestFlight를 통해 가족에게 앱을 배포함.

집에서 요리하기

     * 프로그래밍에 대한 접근 방식을 '집에서 요리하는 것'에 비유함.
     * ""코딩을 배우다""는 경제적 이점을 제공하지만, ""요리를 배우다""와 같이 다양한 이유로 프로그래밍을 배울 수 있음.
     * 프로그래밍을 전문적이고 확장 가능한 것으로부터 해방시키면, 집에서 요리하는 것처럼 다른 활동이 됨.
     * 만든 메시징 앱은 가족이 원하는 대로만 변화하며, 독립성과 안정성, 주권을 느낄 수 있는 '집'과 같은 느낌을 줌.

GN⁺의 의견

     * 이 기사는 개인적인 목적으로 맞춤형 앱을 개발하는 과정과 그 의미에 대해 설명함.
     * 전문 개발자가 아니더라도, 가족이나 친구를 위한 소프트웨어를 만들 수 있는 가능성을 보여줌.
     * 이 이야기는 기술이 개인의 삶에 어떻게 긍정적인 영향을 미칠 수 있는지, 그리고 개인화된 소프트웨어가 사용자에게 얼마나 중요한 가치를 제공할 수 있는지를 보여줌.

        Hacker News 의견

     * 개인 프로젝트에 대한 열정

          + 10년 동안 개인적으로 사용하는 모든 앱을 대체하는 프로젝트를 진행해옴. 이 프로젝트는 이메일, 달력 등 일상적으로 사용하는 앱들을 포함함.
          + 프로젝트를 본 사람들은 어디서 다운로드할 수 있는지 물어보지만, 이 프로젝트는 오직 개발자 본인만을 위한 것임.
          + 이 프로젝트는 개발자의 정신 건강을 유지하고 행복과 희망을 제공하는 개인적인 특징이자 장점임.

     * 현대 소프트웨어 개발의 어려움

          + 실제로는 약 일주일 만에 프로젝트를 완성했으며, 그 중 절반은 코드 서명과 신원 인증 문제를 해결하는 데 소요됨.
          + 이러한 문제는 현대 소프트웨어 개발에서 자신의 필요를 해결하려는 노력에 큰 장애물이 됨.

     * 개인 맞춤형 앱 개발의 만족감

          + 아내를 위해 만든 macOS 앱은 그녀가 좋아하는 상점들의 영업 시간을 추적함.
          + 앱은 Qt로 만들어졌으며, 데이터 저장을 위해 텍스트 파일을 사용함.
          + 이 앱은 개발자에게 가장 감사한 사용자로부터의 인정을 받음.

     * 가족 및 친구를 위한 앱 개발의 가치

          + 홈랩을 시작한 후 가족과 친구들을 위한 앱을 만들고 자체 호스팅하는 취미로 발전함.
          + 이러한 앱들은 친구들 간의 소통과 만남을 증진시키는 데 기여함.

     * 전문 앱과 개인 앱 간의 격차

          + 앱을 만드는 것은 더 쉬워졌지만, 대중을 위한 ""진짜"" 앱을 만드는 것은 더 어려워짐.
          + 모바일 앱 개발은 지속적으로 변화하는 플랫폼의 요구 사항을 따라가야 하며, 이는 앱이 플랫폼에서 제거될 위험을 수반함.

     * 아이폰 사이드로딩에 대한 인식 변화

          + 이 글을 읽고 나서 아이폰에서의 사이드로딩에 대한 생각이 바뀜.
          + 사이드로딩이 개인적인 앱 개발을 방해하고 컴퓨터를 마법처럼 여기게 만드는 것에 반대하는 입장으로 전환됨.

     * 소규모 타깃 시장을 위한 앱 개발의 매력

          + 단 몇 명을 위한 앱을 만드는 것은 배움의 프로젝트보다 한 단계 더 높은 유용성을 가짐.
          + 이러한 앱은 개발자의 삶에서 중요한 사람들을 위한 것이므로 더 큰 만족감을 줌.

     * 소규모 웹 프로젝트의 매력

          + 작은 마을을 위한 ""마을 규모""의 웹 프로젝트에 대한 관심이 증가함.
          + 이러한 프로젝트는 소규모이기 때문에 개인의 서버에서 운영할 수 있으며, 지역 사회와의 친밀감을 높일 수 있음.

     * 가족을 위한 자체 호스팅 서비스의 가치

          + 자녀들을 위해 여러 가지 서비스를 자체 호스팅하며, 이는 가족에게 맞춤화된 서비스를 제공함.
          + 이러한 서비스들은 대부분 공개되지 않으며, 소수의 사용자를 위해 간단하게 만들어짐.
"
"https://news.hada.io/topic?id=12672","Jony Ive, 아이폰 리드 디자이너를 데려와 OpenAI 하드웨어 개발에 참여 시키다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Jony Ive, 아이폰 리드 디자이너를 데려와 OpenAI 하드웨어 개발에 참여 시키다

     * 애플의 아이폰/애플 워치 리드 디자이너였던 Tang Tan이 Jony Ive의 하드웨어 회사 LoveFrom에 합류
     * 조니 아이브는 Sam Altman과 함께 어벤져스 같은 팀을 구성하여, OpenAI의 소프트웨어로 구동되는 하드웨어 기기를 개발중임
          + 그는 20년 넘게 Apple의 수석 디자이너로 재직하면서 iMac, iPhone, Apple Watch, 심지어 브랜드의 상징적인 패키징까지, Apple의 가장 상징적인 제품의 디자인 프로세스를 이끌었음
     * 현재 아이브는 알트만과 함께 AI 지원 하드웨어를 개발 중이며, 이를 위해 애플에서 가장 뛰어난 인재를 영입하고 있는 것으로 알려졌음
     * Tan은 이 프로젝트의 하드웨어 엔지니어링을 총괄할 것으로 알려짐
     * 20명 이상의 전직 애플 직원들이 LoveFrom에 합류했으며, 알트먼은 이전에 이 프로젝트를 위해 수십억 달러의 투자를 유치하려고 시도한 바 있음
     * 그들이 뭘 만드는 지는 알려지지 않음. 단지 OpenAI의 소프트웨어로 실행된 다는 것뿐
     * 현재는 컨셉을 정하고, 최고의 인재를 채용하는 초기 단계임
"
"https://news.hada.io/topic?id=12723","scalar.com - API 문서화 및 SwaggerUI 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  scalar.com - API 문서화 및 SwaggerUI 대체제

     * Scalar API Reference 오픈소스 프로젝트
          + Swagger/OpenAPI spec 파일 사용
          + 수많은 언어 + 프레임워크에 대한 예제 요청 가능
          + 통합 API 클라이언트 포함
          + 실시간 미리보기로 Swagger 파일을 편집
          + 2011년에 만들어진 것 같지 않음
          + https://docs.scalar.com/swagger-editor
     * API 문서 온라인 에디터 주요 기능
          + 하위 도메인 호스팅(apidocumentation.com)
          + API 참조(Swagger/OAS)
          + 테마 및 레이아웃으로 완벽한 스타일링 가능
          + 사용자 정의 CSS
          + 사용자 정의 자바스크립트
          + Scalar API 클라이언트 내장
     * 유료 서비스 (월 $85~)
          + 사용자 정의 도메인
          + 무제한 프로젝트
          + 무제한 사용자
          + 검색(타입센스 제공)
          + AI 검색
          + API 클라이언트출시 (예정)
               o REST 엔드포인트 테스트
               o 디버깅을 지원하는 AI 통합 엔지니어
               o CORS 처리를 위한 프록시 지원
               o 다양한 데이터 유형을 위한 파일 업로드
          + 마켓플레이스출시 (예정)
               o 1000개 이상의 인기 API 탐색 및 테스트
               o 통합 Scalar API 클라이언트
               o 시작을 도와주는 AI 통합 엔지니어

   제목에 url 이 들어가니까 슬랙링크 클릭할때에 경고가 뜨네요..ㅋㅋ

   요즘 Bun 진영에서 인기있는 ElysiaJS도 Swagger에서 Scalar를 기본으로 바꾼다고 하니깐 엘리시아 유저면 바로 써볼수 있겠네요.

   https://mintlify.com/ 유사 서비스로 볼 수 있고, 최근 긱뉴스에 공유된 Starlight의 경우 플러그인 형태로 직접 커스터마이징이 가능합니다. https://github.com/HiDeoo/starlight-openapi
"
"https://news.hada.io/topic?id=12678","맥에서 CLI 또는 파이썬만을 이용한 OCR 수행 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     맥에서 CLI 또는 파이썬만을 이용한 OCR 수행 방법

     * 맥에서 CLI 또는 파이썬을 사용하여 무료로 OCR을 수행하는 방법에 대한 독자의 질문에 답변함.
     * 맥에서 터미널, CLI, 파이썬을 통해 로컬 OCR '서비스'를 무료로 설정하는 방법을 공유함.
     * Shortcuts 앱을 열고 새로운 단축키를 생성한 후, ""Extract Text from Image"" 액션을 드래그하여 이미지에서 텍스트를 추출하도록 설정함.
     * ""Shortcut Input""을 선택하고, ""Copy to Clipboard"" 액션을 ""Extract text from ..."" 액션 아래에 배치함.
     * 단축키의 이름을 지정하고, 터미널에서 shortcuts run ocr-text -i <이미지 경로> 명령어를 사용하여 OCR을 실행해 볼 수 있음.
     * 파이썬에서는 subprocess 모듈을 사용하여 OCR을 실행하고 결과를 출력함.

    GN⁺의 의견

     * 이 글은 맥 사용자들이 OCR 기능을 무료로 사용할 수 있는 방법을 제공함으로써, 문서 작업의 효율성을 높일 수 있는 유용한 정보를 담고 있음.
     * 단축키 앱을 활용한 간단한 설정으로 이미지 내 텍스트를 추출할 수 있어, 프로그래밍 지식이 없는 사용자도 쉽게 접근할 수 있음.
     * 파이썬을 통한 자동화 프로세스 구현 방법을 제시함으로써, 개발자들에게도 매력적인 콘텐츠를 제공함.

        Hacker News 의견

     * Apple의 Vision 프레임워크에 대한 인상적인 경험
          + 원글 작성자(OP)는 수만 장의 스프레드시트 스크린샷을 OCR 처리하여 Postgres 데이터베이스로 가져오는 개인 프로젝트에서 Apple의 Vision 프레임워크를 사용했음.
          + macOS와 Nvidia가 호환되지 않아 다른 OCR CPU 방법들을 시도했으나, Tesseract와 같은 도구들은 종종 잘못된 결과를 내놓았음.
          + Vision 프레임워크는 본인이 본 것 중 가장 높은 품질의 결과를 제공했고, 가장 적은 계산 리소스를 사용했음.
          + 프레임워크의 안정성에 문제가 있었지만, 이는 사용자의 구현 방식에 의한 오류일 수 있음.
          + RHetTbull의 vision.py와 ocrmac을 조합하여 사용했고, i7 6700k 해킨토시에서의 성능에 만족함.
          + 프로그래머는 아니지만 충분한 시간이 주어지면 문제를 해결할 수 있으나, 시간이 많이 소요됨.
     * Windows에서의 유사한 경험과 Microsoft PowerToys의 OCR 도구
          + 다른 사용자는 Windows에서 비슷한 작업을 시도했고, 이미 설치되어 있던 Microsoft 프로젝트인 PowerToys에 매우 좋은 OCR 도구가 포함되어 있음을 발견함.
          + Win+Shift+T를 누르고 스캔할 영역을 선택하면 텍스트가 클립보드로 복사됨.
     * 무료로 제공되는 오픈소스 OCR 도구
          + 한 사용자가 CLI와 UI를 모두 제공하는 무료 오픈소스 OCR 도구를 개발했음.
     * Mac 애플리케이션들의 자동 OCR 기능
          + 많은 Mac 애플리케이션들, 예를 들어 Safari, Preview, Notes 등이 이미지에 대해 자동으로 OCR 처리를 하며, 이미지 내의 텍스트를 쉽게 선택하여 다른 곳에 복사 및 붙여넣기 할 수 있음을 한 사용자가 발견함.
     * Mac용 작은 OCR 도구에 대한 호평
          + 한 사용자는 brew를 통해 Macbook에 설치한 작은 OCR 도구의 열렬한 팬임.
     * Windows용 추천 OCR 도구: PowerToys의 Text Extractor
          + Windows 사용자에게 PowerToys의 Text Extractor를 추천하는 댓글.
     * macOS Ventura의 기본 OCR 기능
          + macOS Ventura 이상에서는 이미지 캡처 UI에 기본 OCR 기능이 통합되어 있으며, AirPrint 호환 스캐너를 사용하여 PDF로 스캔할 때 OCR 체크박스가 오른쪽 패널에 표시됨.
     * PyXA를 사용한 텍스트 추출 솔루션
          + PyXA는 Vision 프레임워크를 사용하여 한 번에 하나 이상의 이미지에서 텍스트를 추출하는 솔루션을 제공함.
          + 패키지의 일부분일 뿐이므로 일회성 작업에는 과할 수 있지만, 옵션으로 제시됨.
     * Raycast의 이미지 내 텍스트 검색 및 복사 기능
          + Raycast는 macOS 전용으로, 이미지 내의 텍스트를 검색하고 해당 텍스트를 복사할 수 있는 기능을 가짐.
          + 공식 데모 비디오 링크 제공.
     * Apple Vision의 'Copy Subject' 기능에 대한 유사한 기술 문의
          + 한 사용자가 Apple Vision의 'Copy Subject' 기능에 매우 의존하고 있으며, 이 기능의 접근성이 매우 제한적이라고 느끼며 유사한 기술에 대해 문의함.
"
"https://news.hada.io/topic?id=12728","크로뮴 버그 현상금을 제공하는 머니 트리 브라우저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      크로뮴 버그 현상금을 제공하는 머니 트리 브라우저

Chromium Money Tree Browser 소개

     * Chromium Money Tree Browser는 Chrome VRP(버그 현상금 프로그램)의 보상을 특정 파일의 변경사항(수정)과 연결시키는 웹사이트임.
     * 이 사이트는 매우 간단하게 제작되었으며, 사용자 경험이나 데이터의 정확성을 기대하지 않는 것이 좋음.
     * 버그 현상금은 파일별로 나누어지는데, 예를 들어 $1000 상당의 버그를 수정하는데 5개의 파일이 변경되었다면, 각 파일은 $200씩 할당받음.
     * 데이터는 2023년 11월 초까지의 정보를 기준으로 함.

GN⁺의 의견

     * Chromium Money Tree Browser는 개발자와 보안 연구원들에게 Chrome의 버그 현상금 프로그램에서 어떤 파일들이 수정되었는지, 그리고 그에 따른 보상이 어떻게 분배되었는지를 시각적으로 보여주는 흥미로운 도구임.
     * 이 사이트는 버그 수정에 대한 보상이 어떻게 계산되는지에 대한 통찰을 제공하며, 보안 관련 커뮤니티에서 유용한 정보를 공유하는 데 도움이 될 수 있음.
     * 사용자 경험이나 데이터의 정확성에 대한 기대를 낮추어야 하지만, 이 사이트는 오픈 소스 프로젝트의 보안 취약점에 대한 인식을 높이고, 개발자들이 보안을 더욱 중요하게 생각하도록 동기를 부여하는 데 기여할 수 있음.

        Hacker News 의견

     * 개발자가 오랫동안 구축하고 싶어 했던 기능과 유사한 것에 대한 흥미로움
          + 파일이나 파일의 특정 부분에서 과거에 발생한 변경 사항들을 기반으로, 주어진 변경 사항이 문제를 일으킬 가능성을 계산하는 방법의 유용성에 대한 고찰.
          + 각 변경 사항에 대한 위험도 점수를 매기고, 이 점수를 PR(Pull Request)에 연결하여 코드 리뷰어들에게 추가적인 주의가 필요한 코드를 알려주고, 배포 시 위험한 변경 사항을 강조하는 신호로 활용.
          + 코드가 삽입/삭제로 인해 위아래로 이동할 때 동일한 코드 부분을 추적하는 것이 어려움. 단순히 줄 번호에 기반한 알고리즘은 문제가 될 수 있음.
          + 파일 수준에서 이루어지는 작업만으로도 충분히 유용할 수 있음을 시사.
     * 특정 서드파티 라이브러리에서의 수정 사항이 누락되었다는 지적
          + 서드파티 라이브러리(예: ffmpeg)에서 발생한 수정 사항 중 일부가 누락된 것 같음. 이러한 수정 사항은 종종 상류에서 먼저 처리되어 추적이 어려울 수 있음.
     * 크롬 브라우저 UI의 많은 버그들을 살펴보며 수동 메모리 관리의 성능이 중요하지 않은 데이터의 사용 후 해제(use-after-free) 문제에 대한 고민
          + ""파일 선택"" 대화 상자의 생명주기와 같은 코드에서 수동 메모리 관리의 성능이 중요하지 않음에도 불구하고 발생하는 use-after-free 문제들에 대한 관찰.
          + 이러한 코드에서는 항상 더 똑똑하고 느린 포인터를 사용하는 것이 더 나을 수 있음을 시사.
          + raw_ptr<T>와 같은 타입이 도움이 될 의도로 보이며, 실제로 [2]에서 발생한 충돌을 방어하는 데 성공했을 가능성에 대한 언급.
          + 프로젝트 내에서 성능에 민감한 코드와 성능을 크게 고려하지 않아도 되는 코드 사이에서 다른 방언(dialect)을 전환하는 방법이 없다는 것이 아쉬움.
          + 성능에 민감한 부분과 비동기 상태가 많아 잘못될 가능성이 높은 부분을 명확히 구분하기 위해 두 가지 다른 언어를 혼합하는 것이 거의 가치가 있을지에 대한 고민.
     * 시각화의 효과에 대한 칭찬과 CPU 사용량에 대한 지적
          + 매우 깔끔한 시각화로, 영역을 확장할 때 CPU 사용량이 다소 높음을 언급.
          + 크롬 팀이 내부적으로 유사한 도구를 사용하고 있을 것이라는 기대와 공격 표면을 이해하는 데 유용할 것이라는 의견.
     * 아이디어와 실행에 대한 칭찬 및 원시 데이터에 대한 문의
          + 아이디어가 멋지고 실행도 잘 되었다는 칭찬.
          + 원시 데이터에 대한 접근 가능 여부와 선버스트(sunburst) 또는 트리 맵(tree map) 시도의 가치에 대한 언급.
     * 특정 파일 유형을 포함하지 말 것에 대한 제안
          + DEPS, AUTHORS, BUILD.gn 파일을 포함하지 말 것을 제안하는 세부적인 지적.
     * 변경된 코드 라인 수에 따른 가중치 부여에 대한 제안
          + 변경된 코드 라인 수에 따라 버그에 할당된 '돈'의 가중치를 부여하는 것이 흥미로울 것이라는 의견.
          + 파일 A의 10줄과 파일 B의 1줄이 변경되었다면, 파일 A가 버그의 대부분을 차지했기 때문에 1/11의 '돈'을 할당받는 방식에 대한 제안.
     * 파일별 평균 보상을 표시하는 기능에 대한 요청
          + 각 노드에 파일별 평균 보상을 표시하는 기능에 대한 요구.
     * 코드 라인 수에 따라 정규화된 금액 표시에 대한 아이디어
          + 코드 라인 수에 따라 금액을 정규화하여 표시하는 버전에 대한 제안.
     * 노력을 집중할 영역에 대한 시각적 통찰력에 대한 칭찬
          + 어디에 노력을 집중해야 할지에 대한 시각적 통찰력을 제공하는 것이 매우 멋지다는 평가.
"
"https://news.hada.io/topic?id=12684","PyPy, Git과 GitHub으로 이전 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       PyPy, Git과 GitHub으로 이전 완료

     * PyPy는 공식 저장소와 이슈 트래커를 https://github.com/pypy/pypy 로 이전함
     * 이제 개발은 Mercurial이 아닌 Git에서 이루어짐
     * Mercurial이 더 나은 버전 관리 시스템이라고 여전히 생각하지만, 여러 문제로 인해 GitHub으로 이전 결정
          + foss.heptapod.net이 검색 엔진에 잘 인덱싱되지 않아 이슈 검색이 어려움
          + Heptapod의 스팸 제어 강화로 사용자들이 이슈를 생성하면 스팸으로 표시되는 문제 발생
          + 오픈 소스는 GitHub과 동의어가 되었고, PyPy는 이를 바꿀 만큼 크지 않음
          + 현재 개발은 이슈를 해결하기 위한 리액션으로 이루어지며, 모든 코드가 같은 플랫폼에 있을 때 상호 연관된 이슈 추적이 용이함
          + GitHub은 foss.heptapod.net보다 자원이 풍부하여 CI 작업 추가 가능
     * PyPy는 이미 Bitbucket에서 Heptapod으로 한 번 이전한 경험이 있고, 많은 이슈들이 여러 번의 이전을 반영함
     * Heptapod는 개인 포크를 허용하지 않았으나, 이제는 개인 포크후 PR을 보내는 방식으로 더 구조화된 워크플로우를 채택하게 됨

   별거 아니지만 첫번째 줄 링크가 https://github.com/pypy/pypy""로""; 까지 걸려있네요.

   URL 자동 링커가 한글까지 인식했네요 ㅎㅎ 빈칸으로 띄워두었습니다.

   정말 mercurial의 끝이 오네요.. nginx 정도 남았으려나
"
"https://news.hada.io/topic?id=12712","창문을 카메라로 변환하는 자이스의 "Holocam"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      창문을 카메라로 변환하는 자이스의 ""Holocam""

창문을 투명 카메라로 만드는 홀로그래픽 카메라

     * 자이스(Zeiss)의 ""홀로캠(Holocam)"" 기술은 유리창을 카메라로 변환할 수 있음.
     * 자동차 창문부터 노트북 화면, 집 앞문의 유리까지 모든 것이 보이지 않는 이미지 센서를 가질 수 있음.
     * 카메라가 완전히 투명하기 때문에, 화면에 구멍이나 펀치 홀이 필요 없어짐으로써, 화면 어디에나 카메라를 배치할 수 있음.

홀로캠 기술의 원리

     * 홀로캠 기술은 ""홀로그래픽 인커플링, 라이트 가이딩 및 디커플링 요소를 사용하여 투명 매체의 들어오는 빛을 숨겨진 이미지 센서로 전환함.""

자이스의 CES 프레젠테이션 및 활용 사례

     * 자이스는 CES 2024에서 자동차에서의 활용을 중점으로 한 다기능 스마트 글라스 시스템에 대해 소개함.
     * 홀로그래피 기술이 차량 내 조작성을 향상시킬 수 있는 방법에 대한 사례를 중심으로 함.
     * 이 기술이 스마트 도어벨, 웹캠, 주차 카메라, 얼굴 또는 제스처 인식, 운전자 피로 감지 등에 혁신적인 변화를 가져올 수 있음.

광학적 가능성

     * 유리 전체를 카메라 렌즈로 사용함으로써 ""큰 조리개의 투명 카메라"" 및 ""시야의 방향과 크기를 개별적으로 조정""과 같은 흥미로운 광학적 가능성을 열어줌.

기술의 양면성

     * 에어비앤비(Airbnb)에서 숨겨진 카메라에 대한 현재의 우려를 고려할 때, 모든 창문이나 샤워문이 감시 장치가 될 수 있다는 생각은 다소 불안함을 줌.

GN⁺의 의견

     * 홀로그래픽 기술을 이용한 투명 카메라는 사용자의 프라이버시와 보안에 대한 새로운 접근 방식을 제공함.
     * 이 기술은 스마트폰, 태블릿, 자동차 등 다양한 분야에서의 디자인과 기능성을 크게 향상시킬 잠재력을 가짐.
     * 홀로캠 기술은 향후 개인 인증, 보안 시스템, 그리고 사용자 인터페이스의 혁신을 이끌 수 있는 중요한 발전으로, 이 기술이 실생활에 어떻게 적용될지 지켜보는 것이 매우 흥미로움.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 댓글 작성자는 ""light guides""와 ""coupling""과 같은 용어를 이해하지 못하며, 얇고 투명한 층에 내장된 라이트 가이드가 어떻게 고해상도 홀로그래픽 3D 라이트 필드를 유리 조각에서 투사할 수 있는지에 대한 설명을 찾지 못함.
          + 이 기술에 대해 15세 수준으로 설명해 줄 수 있는 사람을 찾고 있음.
     * 두 번째 댓글 요약:
          + 현재 이 유리는 제조하기 매우 복잡하며 열역학 법칙에 따라 100% 투명할 수 없음.
          + 이 유리로 만든 카메라는 적어도 약간의 색조가 있을 것이며, 특수한 용도로만 사용될 것임.
          + 이 기술은 주로 고급 항공우주 애플리케이션에 사용되고 있으며, 다음 10년 이내에 이러한 기술을 접할 가능성은 낮음.
          + 현재 더 걱정해야 할 원격 감지 기술로는 RF 감시, mmWave, 벽 관통 레이더, 와이파이 간섭계 등이 있음.
     * 세 번째 댓글 요약:
          + 기사는 카메라 구성 요소에 대해서만 논의하고 있으며, 홀로그래픽 및 광학 디스플레이의 주식 이미지를 사용했지만 이에 대한 언급은 없음.
          + ZEISS는 CES 2024에서 홀로그래픽 스마트 글래스를 공개했으며, 디스플레이/프로젝션/필터링뿐만 아니라 홀로그래픽 카메라 구성 요소도 포함됨.
          + 홀로그래픽 카메라는 결합, 분리, 라이트 가이드 요소를 사용하여 빛을 숨겨진 센서로 전달함으로써 가시적인 컷아웃이나 설치 공간이 필요 없음.
          + ZEISS는 제조업체가 되려는 계획이 없으며 다른 회사들이 이 기술을 사용할 수 있음.
     * 네 번째 댓글 요약:
          + 이 기술은 라이트 가이드의 역방향으로, 빛을 통한 이미징이 가능함.
          + 주요 문제는 충분한 에너지를 모으는 것이며, 너무 효율적인 라이트 가이드는 불투명해 보일 수 있음.
          + ""모든 창문을 바꾼다""는 표현은 오해의 소지가 있으며, 특별한 유리나 코팅/라미네이트가 필요함.
          + 사생활 침해에 대한 우려가 있지만, 작은 스파이 카메라를 설치하는 것이 더 편리하고 비용 효율적임.
     * 다섯 번째 댓글 요약:
          + 댓글 작성자는 과거에 ZEISS 본사를 방문했으며, 회사는 유럽에서 가장 많은 박사학위 소지자를 고용함.
          + ZEISS의 시설은 매우 민감하여, 고속도로를 지나는 트럭이 기계를 방해하지 않도록 조치를 취해야 했음.
     * 여섯 번째 댓글 요약:
          + Airbnb에서 숨겨진 카메라에 대한 현재의 두려움을 고려할 때, 모든 창문이나 샤워문이 감시할 수 있다는 생각은 불안함을 느끼게 함.
          + 이 기술은 매우 흥미로운 잠재적 응용 분야를 가지고 있지만, 벽을 통해 볼 수 있는 와이파이 기술과 같이 불안한 상황으로 밀어붙이고 있음.
     * 일곱 번째 댓글 요약:
          + 유튜브에 게임 체인저가 될 수 있는, 해상도가 다소 낮은 카메라에 대한 비디오가 있음.
     * 여덟 번째 댓글 요약:
          + 댓글 작성자는 홀로그래픽 카메라에 대한 특허를 찾았으며, 이는 아우디가 제출한 것으로 보임.
          + ZEISS의 보도 자료는 기술에 대한 깊은 정보를 제공하지 않으며, 현실에서는 이러한 대담하고 모호한 주장이 실제로는 중요한 제약과 한계를 가지고 있음을 경험적으로 보여줌.
          + ZEISS에 대한 질문은 추가 구성 요소가 유리의 광학적 특성에 미치는 영향, 결과 이미지 데이터의 해상도, 구성 요소의 크기, 캡처 영역으로부터의 거리 등에 대한 것임.
     * 아홉 번째 댓글 요약:
          + 댓글 작성자는 ZEISS가 아직 보도 자료 외에는 아무것도 발표하지 않았다고 언급함.
"
"https://news.hada.io/topic?id=12724","FAA, 170대 이상의 보잉 737 맥스 9 기종 운항 정지 명령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FAA, 170대 이상의 보잉 737 맥스 9 기종 운항 정지 명령

보잉 737 맥스 9 항공기 긴급 점검 명령

     * 미국 연방항공청(FAA)이 토요일에 보잉 737 맥스 9 항공기 170대 이상에 대한 긴급 점검을 명령함.
     * 알래스카 항공의 한 항공기가 비행 중 기체 일부가 탈락한 사건 발생 후 조치가 취해짐.
     * 알래스카 항공은 자사의 보잉 맥스 9 항공기 60대 이상을 운항 중단할 것이라고 발표함.

알래스카 항공 1282편 비상 착륙

     * 알래스카 항공 1282편이 캘리포니아 온타리오로 향하던 중 기체 일부가 탈락해 포틀랜드로 긴급 회항함.
     * 소셜 미디어에 공유된 사진과 영상에서는 비행기 한쪽에 큰 구멍이 보이고 승객들이 산소 마스크를 사용하는 모습이 나타남.
     * FAA의 긴급 항공 안전 지시는 전 세계적으로 약 171대의 항공기에 영향을 미치며, 미국 항공사와 미국 영토 내에서 운항하는 항공사들에 적용됨.

항공기 대규모 접지는 드문 일

     * FAA는 지난 5년간 두 차례의 치명적인 추락 사고 이후 보잉 737 맥스 항공기에 대한 감독을 강화함.
     * 맥스의 가장 작고 큰 모델은 아직 FAA로부터 상업 서비스 진입 승인을 받지 못함.
     * 탈락한 기체 부분은 알래스카 항공 등이 사용하지 않는 출구에 해당하며, 막혀 있었음.

조사 시작

     * 국가교통안전위원회(NTSB)가 사건 조사를 위해 팀을 파견함.
     * 유나이티드 항공은 FAA의 지시에 따라 자사의 보잉 737 맥스 9 항공기 수십 대를 점검하기 위해 준비함.
     * 유나이티드 항공은 자사의 79대 중 이미 필요한 점검을 받은 항공기가 30대가 넘음을 밝힘.

플러그된 문

     * 보잉 737 맥스 9에는 저가 항공사들이 사용하는 밀집 좌석 구성을 위한 비상 출구 문이 설치되어 있으나, 알래스카 항공기에서는 사용되지 않고 영구적으로 막혀 있음.
     * 보잉은 사고에 대한 진술 외에 추가적인 논평을 하지 않았으며, 항공기 동체를 제작하는 스피릿 에어로시스템즈도 CNBC의 질문에 보잉을 참조하도록 함.

GN⁺의 의견

     * 이번 사건은 항공 안전에 대한 중요성을 강조하며, 특히 보잉 737 맥스 시리즈에 대한 신뢰성 문제를 다시 한번 부각시킴.
     * FAA의 신속한 대응과 항공사들의 협조는 항공 여행의 안전을 유지하기 위한 중요한 조치임을 보여줌.
     * 항공기 구조적 결함은 매우 드문 일이지만, 이번 사건은 항공기 안전 점검의 중요성과 승객의 안전 수칙 준수의 필요성을 상기시키는 계기가 됨.

        Hacker News 의견

     * 보잉 737 Max의 MCAS 시스템과 관련된 문제점
          + 737 Max의 두 차례 치명적인 추락 사고 후, FAA는 보잉에게 2022년 12월까지 MCAS 시스템을 수정할 것을 요구함. 수정 사항에는 센서를 하나에서 두 개로 늘리고 수동 차단 기능을 포함하는 것이 있었음.
          + 보잉은 수정을 하지 않고, 대신 비용이 너무 많이 들고 기한 내에 완료할 수 없다며 의회에 호소함.
          + 의회는 보잉이 MCAS 시스템을 고칠 필요가 없도록 하는 조항을 포괄적인 지출 법안에 포함시킴. 따라서 2024년 현재 737 Max는 여전히 하나의 센서만을 가지고 있으나, 수동 차단 기능은 추가되었음.
          + 수백만 달러를 들여 조사하고, 의회 청문회를 열고, MCAS 시스템을 개선하기 위한 엔지니어링 작업을 한 후, 보잉은 조용히 모든 것을 우회함.
          + 이러한 상황은 매우 우울하게 만들며, 민주주의가 제대로 기능하는지 의문을 가지게 함.
     * 알래스카 항공의 문제 인식과 대응 부족
          + 알래스카 항공은 해당 비행기에 문제가 있음을 알고 있었으나, 이를 무시한 것으로 보임. 이전 비행에서 기압 경고를 받았지만, ETOPS 노선에서 비행기를 제한하는 것 외에는 아무런 조치를 취하지 않았음.
          + 알래스카 항공은 사용자의 지역에서 주요 항공사이기 때문에, 이러한 문제들이 불안감을 증가시킴.
     * 737 Max에 대한 일반인의 우려
          + 비행기에 대해 잘 모르지만, 737 Max에 대해 읽은 바로는 이 비행기들이 여전히 운항 중인 것에 대해 불안함을 느낌.
          + 일반적으로 큰 문제가 있었던 것이 해결되면 안전해진다고 생각하지만, 이 경우에는 처음부터 비행기 제작에 관련된 의사결정이 결함이 있었기 때문에, 단순한 수정만으로는 충분하지 않을 수 있음.
          + 비행기에 대해 더 잘 아는 사람은 모든 문제가 서로 관련이 없다고 말할 수 있지만, 시스템에서 한 가지가 다른 것에 영향을 미칠 수 있으며, 한 문제에 대한 사고방식이 다른 시스템 구성 요소의 개발에도 존재했을 가능성이 있음.
     * 737 MAX 운항 중단에 대한 웹사이트 제작자의 경험
          + 2019년에 737 MAX 운항 중단을 다루는 마이크로사이트를 만들었으나, 다시 업데이트할 필요가 있을 줄은 몰랐음.
          + 알래스카 항공이 이전 비행에서 기압 문제를 알고 있었고, 보잉이 737 MAX 7의 안전 문제를 FAA가 무시하도록 시도했다는 사실이 충격적임.
     * 보잉의 안전 문제에 대한 승객의 경험
          + United MAX 9을 타고 비행 중, 비상구 문이 보이는 창가 자리에 앉아 있었음. 사건이 보고된 후 얼마 지나지 않아 착륙함.
          + 샌프란시스코에 착륙하기 약 한 시간 반 전에, 조종사가 급하게 ""승무원들, 확인해주세요""라고 방송했으나 승객들에게는 추가적인 안내가 없었음. 아마도 앞서 겪었던 난기류 때문이었을 것이지만, 조종실이 승무원들에게 승객들이 무슨 말을 들었을 경우를 대비해 경고한 것인지 궁금함.
     * 737 MAX 7의 안전 검사 우회 요청
          + 최근에 737 MAX 7의 일부 안전 검사를 우회하도록 요청함. 이는 다른 모델에 대한 것임. 우회 요청은 제빙 시스템과 관련이 있음.
     * 보잉의 문화 변화에 대한 책 추천
          + 보잉이 엔지니어링 중심에서 비즈니스 중심으로 문화가 변화한 과정을 설명하는 책을 추천함.
     * 보잉에 대한 신뢰 상실과 개인적인 선택
          + 보잉이 자신들이 모든 것을 뛰어넘을 수 있다고 생각할 수 있지만, 항공 여행 산업에 대한 신뢰에도 불구하고, 가까운 미래에 보잉 항공기를 이용하지 않을 것임.
          + 에어버스를 이용하거나 전혀 여행하지 않을 것이며, 이것이 생명을 구할 수 있다면 만족할 것임.
          + 이러한 대규모의 지속적인 부주의는 회사가 실패할 수 없다고 생각하는 것으로 정의될 수 있음.
          + 이전의 787과 MCAS 문제로 인해 보잉이 바로잡혔을 것이라고 생각했지만, 그렇지 않았음. 이러한 방식으로 중요한 산업에서 운영하는 것은 용납될 수 없으며, 미국의 항공기 제조 능력이 감소하는 것을 보는 것이 더 낫다고 생각함.
     * 737 Max에 대한 일반적인 인식
          + 최근에 이 비행기를 타기 전에 파트너에게 ""걱정하지 마, 이 비행기는 역사상 가장 많이 검토된 비행기야""라고 말함.
     * 737 Max의 안전 규정 회피 문제
          + 이 비행기의 전체적인 목적은 현대 안전 규정을 피하는 것임.
"
"https://news.hada.io/topic?id=12662","ListMonk - 셀프호스트 가능한 뉴스레터/메일링리스트 관리도구 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ListMonk - 셀프호스트 가능한 뉴스레터/메일링리스트 관리도구 오픈소스

     * Go 싱글 바이너리 + Postgres 로 설치 및 운영이 간편
          + 맥/리눅스/BSD/윈도우용 실행파일 제공 및 Docker-Compose로 실행
     * 직관적인 대시보드 제공(Vue)
     * 구독자/리스트/캠페인 관리
     * 기본 SMTP 및 AWS SES, Pinpoint 이용 가능. 메신저 인터페이스로 SMS/FCM에도 전송 지원
     * 트랜잭셔널 메시지 지원(웰컴, 패스워드 리셋등)
     * 트래킹 픽셀 추가 및 관리
     * 이메일 바운스 처리
     * 템플릿 사용 가능
     * Subscriber/Lists/Import/Campaigns/Media/Templates/Transactional API 제공

   오 굉장히 좋은데요??

   정말 좋아보이네요. 스태틱 IP를 저렴하게 붙이려면 어떤 방법이 좋을지 고민되네요

   긱뉴스 위클리는 자체 개발입니다만, 별도로 운영해보고 싶은게 있어서 찾다가 좀 들여다 보니 운영하기 정말 간단하긴 하네요.
"
"https://news.hada.io/topic?id=12722","HN 소개: 시간대 비교 도구 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN 소개: 시간대 비교 도구 개발

Time.fyi 서비스 소개

     * Time.fyi는 여러 시간대를 추가하고 슬라이더를 사용하여 시간을 비교할 수 있는 서비스임.
     * 사용자는 원하는 시간대를 추가하고, 12시간 혹은 24시간 표시 방식을 선택할 수 있음.
     * 예를 들어, 서울(한국)의 시간을 GMT+9, 1월 6일 기준으로 오후 6시 32분으로 설정하고 다른 시간대와 비교할 수 있음.

GN⁺의 의견

     * Time.fyi는 전 세계적으로 분산된 팀이나 국제적인 비즈니스를 하는 이들에게 매우 유용한 도구임.
     * 시간대를 쉽게 비교할 수 있어서 회의나 전화 회의를 계획할 때 혼란을 줄일 수 있음.
     * 이 서비스는 사용자 친화적인 인터페이스를 제공하여 시간 관리를 간편하게 만들어 줌으로써, 글로벌 커뮤니케이션의 효율성을 높이는 데 기여함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 이 프로젝트에 대한 긍정적인 평가.
          + 복잡한 기능을 추가하지 않고 단순함을 유지한 점에 대한 칭찬.
          + 프로젝트를 시작한 계기에 대한 궁금증 표현.
     * 두 번째 댓글 요약:
          + 아시아에 거주하며 아메리카 대륙의 클라이언트와 협업하는 사용자의 만족감.
          + 회의 시간을 정하는 데 도움이 될 것이라는 기대.
          + 맥 버전(메뉴 바 아이템)의 제안.
     * 세 번째 댓글 요약:
          + 링크 공유 기능에 대한 요청.
          + 국제적인 팀이 시간을 쉽게 추적할 수 있도록 각 시간대에 사용자 정의 라벨을 추가하는 아이디어 제시.
     * 네 번째 댓글 요약:
          + 시간대/도시 목록의 오류 지적: 하노이가 태국으로 잘못 표시됨.
     * 다섯 번째 댓글 요약:
          + 슬라이더가 24시간이 아닌 3일을 커버하도록 하는 기능 제안.
          + 현재 디자인에서는 특정 시간대에 뉴욕이 런던보다 앞서 보이는 시각적 오류에 대한 지적.
     * 여섯 번째 댓글 요약:
          + World Time Buddy 사용자로부터의 긍정적인 피드백.
          + 새로운 도구가 더 매끄럽다는 평가.
     * 일곱 번째 댓글 요약:
          + 팀 회의 일정을 잡는 데 사용할 것이라는 의사 표현.
          + 슬라이더 입력 외에 시간을 직접 입력할 수 있는 기능 요청.
     * 여덟 번째 댓글 요약:
          + 다른 시계 앱(Clock by seense) 사용자의 간단한 의견.
     * 아홉 번째 댓글 요약:
          + 오프라인에서도 작동하는 프로그레시브 웹 앱으로 만들기 위한 서비스 워커와 매니페스트 추가 제안.
          + GitHub이 있다면 기능 추가를 돕고 싶다는 의사 표현.
     * 열 번째 댓글 요약:
          + 시간대 변환기에 항상 원했던 기능에 대한 설명.
          + 입력된 위치를 강조하거나 시간대를 선택할 수 있는 시간대 지도 기능 제안.
"
"https://news.hada.io/topic?id=12680","캐나다 급여 의존도 차트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             캐나다 급여 의존도 차트

캐나다 급여 공제 계산의 복잡성

     * 캐나다 국세청(CRA)은 정기적으로 ""급여 공제 수식(Payroll Deductions Formulas)"" 문서를 발행함. 이 문서에는 CRA가 수집하는 캐나다 연금 계획, 고용 보험, 소득세의 모든 계산 수식이 포함됨.
     * 캐나다에서 소규모 사업을 운영하며 외부 급여 서비스 제공업체를 사용하지 않는 Colin Percival은 이러한 수식을 스프레드시트에 직접 구현함.
     * 세금 시스템의 대부분의 측면처럼 복잡성이 증가하고 있으며, 올해 캐나다 연금 계획에는 ""기본"" 프리미엄과 ""추가"" 프리미엄뿐만 아니라 ""두 번째 추가"" 프리미엄도 포함되어 스프레드시트를 처음부터 다시 작성해야 함.

의존성 차트 작성

     * 문서의 저자들은 소프트웨어의 중요한 세부 사항을 간과했는데, 값을 사용하기 전에 계산해야 한다는 것임. 이로 인해 문서를 보면서 계산해야 할 각 값이 어디에 있는지를 왔다 갔다 해야 함.
     * 이를 돕기 위해 Colin Percival은 GraphViz를 사용하여 의존성 차트를 그림. 그래프에는 ""연간 최대 연금 적립 금액""($73200)과 같은 값에서 시작하여 ""총 급여 공제""에 이르기까지 79개의 노드가 있음.
     * 차트에는 수식을 쓰지 않고, 각 수식이 의존하는 다른 값들만 기록하여 차트를 보는 사람이 무엇을 먼저 계산해야 하는지 쉽게 파악할 수 있도록 함.

단순화된 가정

     * 단순화를 위해, Colin Percival은 수수료를 받는 직원, 캐나다 연금 계획에 들어오거나 나가는 직원, 퀘벡, 노바스코샤, 유콘, 온타리오(각각 자체 세금 복잡성이 있는)에 거주하는 사람을 다루지 않는다고 가정함.

GN⁺의 의견

     * 이 글은 캐나다의 급여 공제 계산이 얼마나 복잡한지를 잘 보여줌. 특히 소규모 사업주가 직면하는 도전과제와 이를 해결하기 위한 창의적인 접근 방식을 강조함.
     * 의존성 차트를 작성하는 것은 복잡한 시스템을 이해하고 관리하는 데 매우 유용한 도구로, 소프트웨어 엔지니어링뿐만 아니라 다양한 분야에서의 문제 해결에 적용될 수 있음.
     * 이 글은 세금 계산의 복잡성을 단순화하고자 하는 사업주의 노력을 보여주며, 이러한 노력이 다른 사업주들에게도 영감을 줄 수 있음.

        Hacker News 의견

     * 정부에서 코드 형식의 공개 수식을 제공하지 않는 것은 유감임.

     캐나다 국세청(CRA) 웹사이트에서 제공하는 웹 폼을 사용하는 것이 신뢰할 수 있는 유일한 방법이며, 수작업으로 계산하는 것은 매우 번거롭고 오류가 발생하기 쉬움.
     * 캐나다의 작은 급여 회사를 운영했던 경험에서, 규칙이 업데이트될 때마다 CRA 계산기에 대한 스크래퍼를 실행하여 다양한 지역과 급여 범위에 대한 급여를 계산하고 rspec으로 출력하여 규정 준수 여부를 테스트했음.

     규칙이 변경될 때마다 스크래퍼를 사용하여 급여를 계산하고 rspec으로 결과를 출력하여 규정 준수 여부를 테스트하는 '브루트 포스' 방법을 사용함.
     * 세법의 복잡성은 다음과 같은 순환 과정을 거침:
         1. 세법이 제정됨.
         2. 능숙한 회계사와 세무 변호사들이 세금을 법적으로 회피하는 방법을 찾아냄.
         3. 세무 당국이 루프홀을 막기 위한 규정을 발행함.
         4. 행정부가 바뀌고 표를 얻거나 경제를 조정하기 위해 일부 세금을 낮추고 세금 혜택을 추가함.
         5. 새로운 행정부가 정치적 이유로 이전 행정부의 프로그램을 선택적으로 뒤집음.
         6. 국제 세금의 경우, 다중 관할 구역에서 세금을 낮추기 위한 복잡한 전략을 사용하는 능숙한 세무 변호사, 다국적 기업을 유치하기 위해 세법에 인센티브를 추가하는 정부, OECD가 이를 방지하기 위해 세금 관련 사항을 표준화하려고 시도함, 개별 국가 간의 세금 조약 등이 추가됨.
     * 몇 년 전 IRS를 위해 비슷한 것을 만든 적이 있음.

     미국 세무서비스 IRS를 위해 몇 년 전에 비슷한 도구를 만든 경험이 있음.
     * 급여 제공 업체가 존재하는 이유를 보여주는 차트임.

     급여 제공 업체의 필요성을 설명하는 차트와 관련된 Bits About Money 포스트를 참조함.
     * CRA가 모든 수식의 참조 구현을 게시해야 한다는 점에서 저자에게 박수를 보냄.

     CRA가 모든 수식의 참조 구현을 게시하여 소규모 기업이 혜택을 볼 수 있도록 해야 한다는 의견에 동의함.
     * 프랑스에서는 이러한 규칙들이 웹사이트, API, NPM 패키지, 그리고 publi.codes 언어로 된 원시 규칙으로 제공됨.

     프랑스에서는 세금 규칙들이 웹사이트, API, NPM 패키지, publi.codes 언어로 제공되고 있음을 설명함.
     * 캐나다 인구의 약 75%가 거주하는 퀘벡, 노바스코샤, 유콘, 온타리오 주민을 제외하고는 모든 사람에게 적용됨.

     퀘벡, 노바스코샤, 유콘, 온타리오 주민을 제외한 캐나다 인구의 대다수에게 적용되는 규칙임.
     * 미국에 거주하지만, 이러한 복잡성이 내 LLC에 직원을 고용하지 않는 주된 이유 중 하나임.

     미국에 거주하는 사용자는 세금과 관련된 복잡성 때문에 LLC에 직원을 고용하지 않는 주된 이유 중 하나임을 설명함.
     * 어떤 알고리즘도, 소프트웨어든 아니든, 복잡성을 추가하여 원하는 결과를 얻을 수 있는 혼란스러운 상태로 만들어짐.

     알고리즘은 복잡성을 추가하여 원하는 결과를 얻을 수 있는 혼란스러운 상태로 만들어지며, 이는 외부인을 혼란스럽게 하고, 경우에 따라 부정적인 결과를 초래할 수 있음.
"
"https://news.hada.io/topic?id=12616","Ugrep – 더 강력하고, 빠르며, 사용자 친화적이고 호환성이 뛰어난 그렙","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ugrep – 더 강력하고, 빠르며, 사용자 친화적이고 호환성이 뛰어난 그렙

     * 강력하고, 매우 빠르며, 사용자 친화적이고, grep과 호환되는 파일 패턴 검색 도구
     * 새로운 파일 인덱서를 사용하여 파일 시스템 검색을 가속화하며, TUI(텍스트 기반 사용자 인터페이스) 또는 grep과 호환되는 옵션을 사용한 명령줄에서 검색할 수 있음
     * 구글 검색과 비슷한 패턴 명령어 지원
     * Fuzzy 검색 지원 (패턴에서 한글자 또는 두글자까지 틀린 단어들도 인식 하도록 확대 또는 최적 검색 결과 도출)
     * MacOS, Windows, Alpine, Android Termux, Arch, CentOS, Debian, Fedora, FreeBSD, NetBSD, OpenSUSE, RHEL 등 다양한 시스템에 설치 가능함
     * 중첩된 zip/tar/pax/cpio 아카이브, 압축된 파일, 바이너리 파일, PDF, doc, docx 등 다양한 파일 형식을 검색하고 헥스덤프할 수 있음

명령어

     * ug와 ugrep 명령어를 사용하여 파일에서 패턴을 검색할 수 있으며, ug는 작업 디렉토리 또는 홈 디렉토리에 위치한 .ugrep 구성 파일을 사용함.
     * ug --save-config OPTIONS는 현재 .ugrep 구성을 사용하여 새 .ugrep 파일을 작업 디렉토리에 저장함.
     * ugrep은 .ugrep 구성 파일을 사용하지 않으며, 쉘 스크립트에서 가장 잘 작동함.
     * 다양한 예시를 통해 파일, 디렉토리 내에서 패턴 매칭, 구성 파일 저장, 구글 검색 등의 사용법을 제공함.

옵션

     * ugrep은 GNU grep과 호환되며 GNU grep 명령줄 옵션을 지원함.
     * 파일 목록, 매치 표시, 매치 정보, 매치 컨텍스트 등을 다루는 다양한 옵션을 제공함.
     * 패턴 매칭 모드, 대화형 TUI, 파일 검색, 퍼지 검색 등의 기능을 포함함.

아카이브 및 압축 파일

     * -z 옵션을 사용하여 아카이브, 타르볼 및 압축된 파일을 검색할 수 있음.
     * 다양한 옵션을 통해 특정 수준의 아카이브 내부 검색, 바이너리 파일 무시, 파일 유형 및 글로브 패턴을 기반으로 한 검색을 지원함.

이진 파일 및 장치

     * 이진 파일을 무시하거나 헥스덤프하는 옵션, 특수 장치를 검색하는 옵션을 포함함.

제외 및 포함

     * 이진 파일 무시, 심볼릭 링크 따르기, 숨김 파일 포함, 특정 파일 유형 및 글로브 패턴 검색 등을 제어하는 옵션을 제공함.

형식화된 출력

     * CSV, JSON, XML, 사용자 정의 형식 등 다양한 출력 형식을 지원함.

예쁜 것들, 더 많거나 적게

     * 출력을 더 보기 좋게 만드는 옵션, 색상, 하이퍼링크, 페이저, 태그, 매치 교체 등을 포함함.

도움말 받기

     * --help 옵션을 통해 필요한 도움말을 얻을 수 있으며, 다양한 옵션과 패턴, 글로브, 필터에 대한 상세한 도움말을 제공함.

GN⁺의 의견

     * ugrep은 기존의 grep 도구보다 훨씬 강력한 기능을 제공하며, 다양한 파일 형식과 패턴 매칭 옵션을 통해 사용자의 검색 경험을 향상시킴.
     * 사용자 친화적인 TUI와 구성 파일을 통해 사용자 맞춤형 검색 환경을 구축할 수 있음.
     * 이 도구는 소프트웨어 개발자나 시스템 관리자가 대규모 코드베이스나 파일 시스템을 효과적으로 탐색하고 분석하는 데 매우 유용함.

   ripgrep 잘 쓰고 있어서 어떤 차이가 있나 검색해 보다 보니, 이런 글이 보이네요.
   https://reddit.com/r/rust/…
   몇년 전 이야기이긴 하지만, ugrep 에서는 ugrep이 ripgrep보다 빠르다고 하고, ripgrep 에서는 ripgrep이 ugrep보다 빠르다고 하니 어느쪽이 맞는 이야기냐? 라는 건데, 댓글이 정말 대단하네요.
   ugrep에서 했다는 테스트들을 다시 진행하면서 결과를 요약했습니다.
   결과는 대충 요약하면, 대부분의 경우에서 ripgrep이 더 빠른 게 맞는 것 같고, ugrep쪽은 뭔가 자기에게 유리한 방식으로 테스트를 진행한 것 같다는 내용입니다. (ugrep 에서 테스트한 내용으로 테스트를 해도 ripgrep쪽이 더 좋은 결과를 내는 경우가 많다는 것이고, ugrep쪽은 테스트 크기를 줄여 노이즈로 인한 편차를 키워 유리한 결과만 뽑은게 아닌가 라는 의심이 들어간 내용입니다.)

        Hacker News 의견

     * 성능과 ripgrep(ripgrep) 비교에 대한 스레드가 있음. ripgrep 기반의 텍스트 사용자 인터페이스(TUI) 몇 가지도 소개됨.
          + repgrep
          + igrep
          + grep_tui
          + grepedit
     * 쉘 파이프라인에 대한 실시간 미리보기를 제공하고, 쉘에 통합되는 도구에 대한 희망을 표현함. zsh에서 accept-and-hold zle 위젯을 사용하여 비슷한 기능을 구현했지만, 실시간 결과를 보는 것이 더 바람직함.
     * n-gram 인덱서를 지원하는 것에 대한 관심 표현. ripgrep도 이 기능을 계획했지만 아직 구현하지 않음. 큰 코드베이스를 위해 csearch를 사용했지만, 여러 제한이 있음. 새로운 인덱서는 리눅스 커널 트리를 인덱싱하는 데 86초가 걸려 csearch의 cindex 도구보다 훨씬 느림.
     * 호환성에 대한 중요한 주의사항: 실제로 호환되지 않으며, GNU 버전과 완전히 다른 기능을 하는 옵션을 몇 초 만에 찾음.
     * Sebastian Krahmer가 만든 grab도 살펴볼 것.
     * 새로운 도구들이 XDG 표준을 따르지 않는 이유에 대한 의문 제기. XDG 표준을 따르면 홈 디렉토리가 수많은 설정 파일로 어지럽혀지는 것을 방지할 수 있음.
     * Debian 기반 리포지토리에서 사용할 수 있는 Ugrep에 대한 긍정적인 평가. 특히, 오타나 1-2글자 차이를 용인하는 퍼지 매치 기능이 유용함.
     * 파일 내 여러 용어를 검색하는 기능(일명 ""파일 구글링"")에 대한 만족감 표현. 이전에 직접 스크립트를 작성했지만, 이 기능으로 인해 필요 없어짐. TUI도 살펴볼 예정. ripgrep을 사용해왔지만, 이 도구로 ripgrep을 대체할 수 있는지 비교해볼 것.
"
"https://news.hada.io/topic?id=12687","트랜스포머 작동 원리 해설: 그 뒤에 숨은 수학 이해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     트랜스포머 작동 원리 해설: 그 뒤에 숨은 수학 이해

Encoder

     * 텍스트를 벡터로 변환하는 과정과 이를 통해 얻은 임베딩에 위치 정보를 추가하는 과정을 설명함.
     * 입력 텍스트의 의미 정보를 포착하는 임베딩을 생성하는 것이 목표임.

  1. 텍스트 임베딩

     * ""Hello World""를 벡터로 변환하여 임베딩을 생성함.
     * 각 토큰에 대해 임의의 값을 할당하여 벡터를 생성함.

  2. 위치 인코딩

     * 임베딩에 단어의 위치 정보를 추가하기 위해 위치 인코딩을 더함.
     * 고정된 벡터를 사용하여 각 위치에 고유하면서 일관된 패턴의 숫자를 할당함.

  3. 위치 인코딩과 임베딩의 결합

     * 위치 인코딩과 임베딩을 더하여 인코더의 입력으로 사용할 새로운 행렬을 생성함.

Self-attention

     * 모델이 입력의 특정 부분에 집중할 수 있게 하는 메커니즘인 어텐션을 설명함.
     * 다중 헤드 어텐션을 사용하여 다양한 표현 공간에서 정보에 동시에 집중할 수 있음.

  4.1 행렬 정의

     * 각 어텐션 헤드에 대한 K, V, Q 행렬을 정의함.

  4.2 키, 쿼리, 값 계산

     * 입력 임베딩과 가중치 행렬을 곱하여 키, 쿼리, 값 행렬을 계산함.

  4.3 어텐션 계산

     * 쿼리와 각 키 벡터의 내적을 계산하고, 결과를 키 벡터의 차원의 제곱근으로 나눔.
     * 소프트맥스 함수를 적용하여 어텐션 가중치를 얻음.
     * 각 값 벡터에 어텐션 가중치를 곱함.

Feed-forward layer

     * 인코더에는 자기 주의 레이어 다음에 피드포워드 신경망이 있음.
     * 이 신경망은 두 개의 선형 변환과 ReLU 활성화 함수를 사용함.

  5.1 기본 피드포워드 레이어

     * 첫 번째 선형 레이어는 입력의 차원을 확장하고, ReLU 활성화 함수를 적용한 후, 두 번째 선형 레이어가 차원을 원래대로 축소함.

  5.2 인코더의 모든 과정 결합

     * 다중 헤드 어텐션과 피드포워드 레이어를 포함하는 인코더 블록을 코드로 작성함.

  5.3 잔차 연결과 레이어 정규화

     * 잔차 연결은 레이어의 입력을 출력에 더하는 것이며, 레이어 정규화는 레이어의 입력을 정규화하는 기술임.

GN⁺의 의견

     * 이 글은 트랜스포머 모델의 수학적 이해를 돕기 위해 복잡한 수학을 단순화하여 설명함.
     * 특히, 자기 주의 메커니즘과 피드포워드 신경망의 작동 원리를 이해하는 데 도움이 됨.
     * 잔차 연결과 레이어 정규화 같은 기술이 신경망의 안정성과 성능에 어떻게 기여하는지를 보여줌으로써, 심층 신경망의 학습 문제를 해결하는 방법에 대한 통찰을 제공함.

        Hacker News 의견

     * 트랜스포머의 ""미스터리""는 각 레이어에서 정적 가중치와 값의 선형 시퀀스 대신, 동일한 입력에서 학습된 가중치의 곱셈을 통해 얻은 3개의 다른 행렬을 사용하고, 이 행렬들을 서로 곱하는 것임. 이는 병렬 처리를 더 많이 가능하게 하지만, 주의(attention) 공식이 정적이기 때문에 매우 제한적임.
          + 계산 그래프를 학습 가능한 매개변수로 일반화할 수 있는 방법이 나오기 전까지는 더 이상의 진전을 보기 어려움.
          + 기존의 기울기 방식으로는 작은 변화가 성능에 큰 변동을 일으키는 혼돈 효과 때문에 전통적인 의미에서 가능한지 확실하지 않음.
          + 아마도 유전 알고리즘 또는 PSO와 같은 형태가 내부적으로 일어나야 할 것임.
     * 더 건조하고 공식적이며 간결한 접근을 원한다면, John Thickstun의 ""The Transformer Model in Equations""을 참조하면 됨. 전체 내용이 표준 수학 표기법을 사용하여 단 한 페이지에 들어감.
     * 글을 읽다 보면 질문이 생김.
          + ""Hello""와 ""World""에 대응하는 벡터가 무작위로 보이지만 패턴이 있는 것처럼 보임.
          + 벡터에서 2가 중복되는 것이 의미가 있는지, 아니면 전체 세트가 고유한 것인지 궁금함.
     * 트랜스포머가 단순히 ""다음 토큰 예측기""로 작동하면서도 훈련 데이터셋에 없는 단어나 서브워드/토큰을 처리할 수 있는 이유에 대한 논문이나 기사를 찾고 싶음.
          + 예를 들어, pandas에서 ""sdsfs_ff"", ""fsdf_value""라는 열을 가진 테이블을 생성하는 경우나 훈련 데이터셋에 없는 예제를 만들고 LLM에 유사한 출력을 요청하는 경우.
          + 위치 임베딩에 대한 토론이 담긴 링크도 있으면 좋겠음. 사인/코사인의 사용과 (곱셈 대 비교)에 대한 만족스러운 답을 얻지 못함.
     * 트랜스포머 튜토리얼은 새로운 모나드 튜토리얼일 수 있음. 이해하기 어려운 개념이지만, 컴퓨터 과학의 많은 부분처럼 이해하기 위해 고군분투하고 예제를 연습해야 함.
     * 일부 단어들을 알고 있음.
     * TensorFlow를 사용하지 않고 스크래치부터 ANN을 작성한 경험이 있는 사람으로서, 이 설명이 여전히 혼란스러움.
          + ChatGPT에게 행렬이나 벡터라는 용어를 사용하지 않고 기본 ANN을 수정하여 자기 주의(self-attention)를 구현하는 방법을 설명해달라고 요청했을 때, 정말 간단한 설명을 해줌.
          + 노드, 가중치, 레이어 측면에서 모든 것을 생각하는 것을 선호함. 행렬과 벡터는 ANN에서 무슨 일이 일어나고 있는지를 관련시키기 어렵게 만듦.
          + ANN을 작성하는 데 익숙한 방식은 각 입력 노드가 스칼라이지만, feed forward 알고리즘이 벡터-행렬 곱셈처럼 보이는데, 이는 모든 입력 노드를 가중치에 곱한 다음 합산하기 때문임.
     * Quarto 웹사이트가 마음에 듦. 더 많은 파이썬 사용자들이 출판을 위해 Quarto를 사용하는 것을 보임.
     * 디코더의 7단계에서 Z_encoder_decoder = layer_norm(Z_encoder_decoder + Z) 대신 Z_encoder_decoder = layer_norm(Z_encoder_decoder + Z_self_attention)이 되어야 하는지, 그리고 디코더의 8단계에서 layer_norm이 누락되었는지 궁금함.
     * LLM이 신경망을 사용하는지, 그리고 ""뉴런""을 구성하는 것이 무엇인지 궁금함. 즉, 뉴런을 뒷받침하는 코드 구조가 있는지, 아니면 ""그저"" 복잡한 수학일 뿐인지 의문임.
"
"https://news.hada.io/topic?id=12681","AI가 생성한 curl 보안 보고서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI가 생성한 curl 보안 보고서

버그 현상금

     * 버그 현상금 제도는 해커들이 보안 문제를 보고할 때 실제 돈을 보상으로 제공함.
     * 일부 사람들은 소스 코드에서 패턴을 찾거나 기본 보안 스캐너를 실행한 후 추가 분석 없이 결과를 보고하여 보상금을 희망함.
     * 현상금 운영 몇 년 동안 쓰레기 보고의 비율은 큰 문제가 되지 않았으며, 대부분 쉽게 탐지하고 무시할 수 있었음.
     * 버그 현상금으로 지금까지 70,000 USD 이상이 지급되었고, 415건의 취약점 보고 중 64건이 실제 보안 문제로 확인됨.

더 나은 쓰레기는 더 나쁨

     * 보고서가 더 나아 보이고 포인트가 있는 것처럼 보이게 만들면, 이를 조사하고 폐기하는 데 더 많은 시간이 소요됨.
     * 보안 보고서는 사람이 시간을 들여 검토하고 의미를 평가해야 함.
     * 쓰레기 보고서는 프로젝트에 도움이 되지 않고, 생산적인 활동에서 개발자의 시간과 에너지를 빼앗음.

AI 생성 보안 보고서

     * AI는 많은 좋은 일을 할 수 있지만, 잘못된 일에도 사용될 수 있음.
     * AI가 보안 문제를 찾고 보고하는 데 유용하게 사용될 수 있지만, 아직 그런 좋은 예는 찾지 못함.
     * 현재 사용자들은 LLM을 사용하여 curl 코드를 분석하고 결과를 보안 취약점 보고서로 제출하는 데 열중함.

AI 쓰레기 탐지

     * 보고자들이 영어에 완전히 능숙하지 않아서 때때로 의도를 즉시 이해하기 어려울 수 있음.
     * 때때로 보고자들은 AI나 다른 도구를 사용하여 자신들의 의사를 표현하거나 번역하는 데 도움을 받음.
     * AI나 유사 도구에 의해 생성된 텍스트의 일부가 있다고 해서 즉시 문제가 되는 것은 아님.

전시 A: 코드 변경 공개

     * 2023년 가을, CVE-2023-38545에 대한 공개 예고함.
     * 문제가 발표되기 하루 전, 사용자가 Hackerone에 보고서를 제출함: Curl CVE-2023-38545 취약점 코드 변경이 인터넷에 공개됨.
     * 보고서는 AI 스타일의 환상을 냄새 맡게 함: 현실과 연결이 없는 새로운 것을 만들어 냄.
     * 사용자가 이 문제를 찾기 위해 Google의 생성 AI인 Bard를 사용했다고 알려줌.

전시 B: 버퍼 오버플로 취약점

     * 덜 명백하고, 더 잘 만들어진 문제지만 여전히 환상에서 벗어나지 못함.
     * 2023년 12월 28일 아침, 사용자가 Hackerone에 보고서를 제출함: WebSocket 처리에서의 버퍼 오버플로 취약점.
     * 보고서는 상세하고 적절한 영어로 작성되었으며, 제안된 수정안도 포함함.
     * 여러 질문과 환상 끝에 이 문제가 진짜 문제가 아니라는 것을 깨닫고 당일 오후에 문제를 해결하지 않음.

이러한 보고자들 금지

     * Hackerone에는 프로젝트와의 추가 커뮤니케이션을 금지하는 명시적인 기능이 없음.
     * 문제를 해결하지 않을 때 연구원의 ""명성""이 낮아지지만, 단일 프로젝트에서 한 번만 이루어지면 아주 작은 변화임.

미래

     * 이러한 종류의 보고서가 시간이 지남에 따라 더 흔해질 것이며, AI 신호를 더 잘 감지하고 기반으로 보고서를 무시하는 방법을 배울 수 있음.
     * AI가 적절한 작업에 사용될 때 불행한 일이 될 수 있음.
     * AI를 사용하여 실제로 작동하는 도구가 미래에 나타날 것이라고 확신하며, AI가 보안 문제를 찾는 데 반드시 나쁜 생각은 아님.
     * 아주 작은 (지능적인) 인간 검사를 혼합하면 이러한 도구의 사용과 결과가 훨씬 나아질 것임.

토론

     * Hacker news

크레딧

     * 이미지: Haider Mahmood by Pixabay
     * AI
     * cURL and libcurl
     * hackerone
     * Security

   GN⁺의 의견
     * AI 기술의 발전은 보안 분야에서도 새로운 도전과 기회를 제공함. AI가 보안 취약점을 찾는 데 도움이 될 수 있지만, 현재는 부정확한 보고로 인해 개발자의 시간을 낭비하는 경우가 많음.
     * 보안 문제를 신속하게 식별하고 해결하는 것은 소프트웨어의 안전성을 유지하는 데 매우 중요함. 그러나 AI 생성 보고서가 증가함에 따라, 이를 효과적으로 관리하는 새로운 접근 방식이 필요함.
     * 이 글은 AI가 보안 분야에서 어떻게 잘못 사용될 수 있는지에 대한 실제 사례를 제공함으로써, AI 기술의 책임 있는 사용과 인간의 감독의 중요성을 강조함.

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + LLM(대규모 언어 모델)의 특정한 어조에 대한 의견:

     LLM이 로봇 집사처럼 들리는 특정한 어조를 가지는 것은 괜찮지만, 사람들이 LLM처럼 말하기 시작하는 것이 걱정됨.
          + LLM이 생성한 curl 관련 보안 취약점 보고서에 대한 의견:

     처음에는 이전에 본 내용과 중복된 것으로 생각했지만, 실제로는 다른 LLM이 생성한 가짜 보고서임을 발견함.
          + LLM과 버그 현상금 프로그램에 대한 우려:

     LLM이 버그 현상금 프로그램에 제출하는 가짜 보고서로 인해 프로그램 운영이 어려워질 수 있음. 실제 사람과 보안 연구자만 참여할 수 있도록 프로그램을 더 엄격하게 관리할 필요가 있을지도 모름.
          + LLM의 비용 대비 엔지니어링 시간 낭비에 대한 걱정:

     LLM이 소량의 비용으로 많은 양의 가치 있는 엔지니어링 시간을 낭비하게 만드는 것이 우려됨.
          + LLM에 의한 콘텐츠 신뢰성 문제에 대한 통찰:

     글쓰기라는 최소한의 노력을 증명하는 방법이 LLM에 의해 더 많은 노력을 필요로 하는 것으로 변모함. 이는 버그 현상금 프로그램과 CVE 프로세스에 영향을 미치며, 제출 장벽을 높여 결과적으로 더 많은 보안 취약점이 발견되지 않고 수정되지 않을 수 있음.
          + curl 코드에 대한 기술적 분석:

     curl이 사용자 제공 데이터를 사용하지 않고 컴파일 시점에 고정된 크기를 가지므로 길이 검사에 대한 불만이 특히 이상함. 또한, C 언어에 더 익숙한 사람이 keyval 지역 변수의 사용 목적을 설명해 줄 수 있는지 궁금함.
          + LLM의 코드 리뷰에 대한 비판:

     dineshsec / dinesh_b가 Daniel에게 strncpy 사용법을 가르치는 것은 시간 낭비이며, memcpy를 사용하는 것이 strcpy나 strncpy보다 낫다고 주장함. LLM의 권장사항은 실제로 권장하지 않음.
          + 사이버보안 분야의 AI 문제에 대한 의견:

     최근까지 사이버보안은 쓰레기 정보로부터 어느 정도 면역이 있었지만, 이제는 AI가 사기꾼들에게 더 쉽게 속임수를 쓸 수 있게 해주고 있음. 문제는 AI 자체보다는 윤리에 있으며, 보안 보고서가 ""합법적""으로 보이기만 하면 통과될 수 있음.
"
"https://news.hada.io/topic?id=12693","소프트웨어 엔지니어링 급여, 세 가지 예산 중 하나에서 지급","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   소프트웨어 엔지니어링 급여, 세 가지 예산 중 하나에서 지급

세 가지 예산

     * 소프트웨어 엔지니어링 급여는 세 가지 예산 중 하나에서 나옴.
     * 급여를 지불하는 예산은 일상 업무와 경력 궤적에 영향을 미침.
     * 세 가지 예산은 판매/마케팅, 연구 및 개발, 유지보수임.

판매/마케팅 예산

     * 성장 조직에 속할 때 결과는 쉽게 정량화하고 측정 가능함.
     * 성장 엔지니어, 영업 엔지니어, 개발 관계자 등이 해당되며, 기존 제품 판매, 기능 알림, 도구 채택을 담당함.
     * 예산은 즉각적인 영향을 원함.
     * 측정 가능한 영향은 ROI를 항상 알 수 있게 하고, 직접적으로 수익을 창출함.
     * 측정이 쉬우면 비교도 쉬워져 내부 경쟁 문화를 초래할 수 있음.
     * 단기적으로 집중된 업무로, 다음 실험, 고객, 마케팅 유행을 추구함.
     * 회사는 투자 대비 수익을 극대화하려고 하므로 이직률이 높아질 수 있음.

연구 및 개발

     * 연구 및 개발(R&D)은 가장 많은 엔지니어를 고용함.
     * 제품 조직 아래에서 일하며, 큰 회사는 실제 연구 및 과학 조직을 가짐.
     * 제품 엔지니어, 연구원, 아키텍트 등이 해당되며, 회사가 판매하거나 판매할 수 있는 제품을 구축하거나 탐색함.
     * 예산은 시간이 지남에 따른 성장을 원함.
     * 환경이 더 평온하며, 유지와 새로운 사용자 유치를 위한 기능 사이의 균형을 찾음.
     * 제대로 된 연구 부서를 가진 회사는 수년 후에 제품화될 아이디어에 대해 연구하는 사람들을 가짐.
     * 개발과 연구는 다르지만, 공통점은 장기적인 결과에 초점을 맞춤.
     * 가장 짧은 관심 기간은 분기이며, 작업은 자산이 되어 수년간 가치를 제공해야 함.

유지보수

     * 유지보수는 대부분 개발에 흡수됨.
     * 이 예산은 비용 최적화를 원함.
     * 시스템 관리자, 오래된 시스템을 유지하는 사람들, 때로는 플랫폼 엔지니어가 해당됨.
     * 회사는 이 업무를 순수한 비용으로 보고 최소화하고자 함.
     * 많은 회사에서 제품 개발에 이 업무가 통합되어 있으며, 가치가 없는 업무로 여겨짐.
     * 회사는 이 예산을 너무 싫어해서 엔지니어에게 NFR 작업(비기능적 요구 사항)에 시간을 할애하는 것을 특별한 대우로 여기게 함.
     * 내부 도구 구축도 이 범주에 속할 수 있으며, 회사를 운영하지만 우선순위는 받지 못하는 관리 대시보드가 예임.

왜 이것이 중요한가

     * 근무하는 예산에 따라 일상 업무가 달라짐.
     * 성장은 측정 가능하고 변동성이 큼.
     * 연구는 차분하고 모호함.
     * 개발은 가치 있고 시간이 지남에 따라 구축됨.
     * 유지보수는 항상 축소 대상임.

GN⁺의 의견

     * 이 글은 소프트웨어 엔지니어들이 자신의 경력을 계획하고 자신의 업무가 회사 내에서 어떻게 인식되는지 이해하는 데 도움이 됨.
     * 각 예산의 특성을 이해함으로써 엔지니어들은 자신의 업무가 장기적인 가치를 창출하는지, 아니면 단기적인 성과에 초점을 맞추는지 판단할 수 있음.
     * 이러한 통찰력은 엔지니어들이 자신의 역할을 더 명확하게 이해하고, 경력 목표를 달성하기 위해 필요한 전략적 결정을 내리는 데 유용함.

        Hacker News 의견

     * 소프트웨어 개발에 대한 조직의 가치관을 이해하는 것이 중요하며, 이는 커리어에 큰 영향을 미침.
          + 컨설팅 회사에서는 고객 관계와 기본적인 소프트웨어 개발 능력이 중요시됨.
          + 제품 회사에서는 소프트웨어를 구축하고 운영하는 능력이 중요함.
          + 소프트웨어가 부가적인 역할을 하는 다른 회사에서는 예산 내에서 배달하는 능력이 중요하며, 주목받기 어려움.
     * 유지보수가 항상 예산 삭감 대상이 되고, 저평가되는 현대 기술 문화에 대해 이해할 수 없음.
          + 신기능 개발이 중요하지만, 기능이 제대로 작동하는 것도 중요함.
          + 한 회사에서만 유지보수보다 새로운 것을 지속적으로 구축하는 문화가 있었으며, 이는 내부 도구의 끊임없는 교체로 이어짐.
          + 유지보수를 중요시하지 않는 것은 비즈니스에 해로우며 자기 파괴적임.
     * 소프트웨어 엔지니어링을 ""가치 없다""고 평가하는 것은 산업의 비즈니스를 이해하지 못하는 것임.
          + 다른 산업과 비교할 때, 예산과 이익률이 다르므로 엔지니어를 고용하고 보상하는 방식에 차이가 있음.
          + 회사 내 다른 제품 라인과 기능에 따라 장기 투자가 다르며, 이는 소프트웨어 제품에 대한 예산에 영향을 미침.
     * 회사의 연차 보고서에서 ""영업 및 마케팅""과 ""연구 및 개발""은 흔히 볼 수 있지만 ""유지보수""는 드물게 언급됨.
          + 회사의 재무제표를 읽어보면 다양한 비용 항목과 각기 다른 역학을 이해할 수 있음.
     * patio11의 블로그가 비용 센터와 이익 센터를 구분하며, 이익 센터에 속하는 것이 중요하다고 주장함.
          + 해당 블로그는 다른 유용한 정보도 많이 제공함.
     * 예산을 구분하는 네 가지 범주가 있음:
         1. 연구 및 개발: 특별 세금 혜택과 세액 공제가 적용됨.
         2. 영업/마케팅: 세일즈 엔지니어와 구현이 포함될 수 있음.
         3. 유지보수: 버그 수정과 특별 세금 혜택이 적용되지 않는 코드 작업을 하는 개발자.
         4. 호스팅 서비스/PaaS/SaaS에서는 운영이 일정 수준의 소프트웨어 엔지니어 급여를 포함함.
          + 어떤 예산에서 어떤 작업이 이루어지는지 이해하는 것은 세금 측면에서 중요함.
     * Swizec이 저술한 ""Serverless Handbook""이라는 유용한 책을 저술하고, 유익한 이메일 뉴스레터를 오랫동안 작성해옴.
          + ""실습을 통한 학습 / 공개 학습""을 지지하며, 배운 것을 공유하는 데 뛰어남.
     * 예산을 ""버킷""으로 비유하는 것은 은유적이지만, 글에서는 문자 그대로 쓰임.
          + 유지보수 역할이 제품 개발에 포함되고, 스프린트마다 유지보수에 할애하는 시간이 제한적임.
          + 성장 및 개발자 관계 엔지니어들은 보통 제품 조직에 속함.
     * 역사적으로 소프트웨어 엔지니어링은 IT 기능의 일부였으며, 이는 회계에서 비롯됨.
          + 오늘날 많은 비즈니스에서 회계가 여전히 소프트웨어 뒤에 있는 주요 동력임.
     * 경험상 성장 엔지니어링 급여가 마케팅 예산에서 나온 적이 없으며, ""유지보수"" 예산이라는 것도 없음.
          + 모든 것이 R&D/엔지니어링 예산에 포함되며, 기대치는 팀/역할에 따라 다르지만 예산 문제는 아님.
"
"https://news.hada.io/topic?id=12623","거실 PC용으로 포크한 SteamOS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          거실 PC용으로 포크한 SteamOS

SteamOS 커스텀 포크 방법

     * SteamOS 3(""Holo"")는 Valve Software의 휴대용 PC 게임 기기인 Steam Deck을 위해 만들어진 Arch 기반의 Linux 배포판임.
     * SteamOS는 새로운 읽기 전용 루트 파일 시스템을 비활성 파티션에 다운로드하여 원자적으로 업데이트를 수행함.
     * 사용자는 steamos-devmode를 실행하여 루트 파일 시스템을 잠금 해제하고, pacman 데이터베이스를 정리하여 일반 패키지 관리자가 있는 작동하는 Linux 배포판을 얻을 수 있음.

SteamOS 시스템 구조

     * SteamOS 시스템은 8개의 파티션으로 구성되어 있으며, EFI 시스템 파티션에는 스테이지 1 부트로더와 메타데이터 파일이 저장됨.
     * 두 개의 A/B 파티션 세트에는 스테이지 2 부트로더(GRUB), 루트 파일 시스템, /var 파티션이 포함됨.
     * 나머지 디스크 공간을 채우는 단일 홈 파티션이 있음.

커널 패치 방법

     * Valve는 SteamOS에서 많이 수정된 리눅스 커널을 사용함.
     * 커널 소스는 Valve의 pacman 미러에서 찾을 수 있으며, 현재 안정적인 이미지의 커널 소스는 온라인에서 다운로드 가능함.
     * 소스 tarball은 2.9 GiB 크기이며, 이는 전체 리눅스 Git 트리를 포함하기 때문임.

루트 파일 시스템 재패키징

     * 루트 파일 시스템을 수정하여 사용자의 필요에 맞게 ""재패키징""하는 것이 가능함.
     * 루트 파일 시스템 이미지는 Steam Deck을 구매하거나 SteamOS 복구 이미지를 다운로드하여 얻을 수 있음.
     * casync를 사용하여 .castr 저장소에서 필요한 이미지 조각을 다운로드하고 비활성 루트 파일 시스템 파티션에 쓰는 방식으로 이미지를 다운로드할 수 있음.

RAUC 번들 생성

     * casync 저장소와 blob 인덱스를 생성한 후 RAUC 번들을 만들 수 있음.
     * RAUC는 X.509 인증서를 사용하여 신뢰를 확립하며, 새로운 인증서를 루트 파일 시스템에 설치해야 함.
     * RAUC 번들은 rootfs.img.raucb와 rootfs.img.caibx 파일을 포함해야 하며, 이들은 웹 서버에 업로드되어야 함.

업데이트 서버 설정

     * 업데이트 서버는 JSON 파일을 제공해야 하며, 이 파일은 이미지의 manifest.json과 일치해야 함.
     * Caddy 구성을 사용하여 steamos-atomupd가 QueryUrl과 MetaUrl로 만드는 요청을 live.json으로 리디렉션할 수 있음.

GN⁺의 의견

     * 커스텀 OS의 중요성: 이 글은 사용자가 자신의 필요에 맞게 운영 체제를 커스터마이징하는 방법을 보여줌. 이는 소프트웨어 개발자들에게 맞춤형 솔루션을 제공하는 데 중요함.
     * 학습 자료로서의 가치: 이 과정을 통해 초급 소프트웨어 엔지니어들은 Linux 배포판의 작동 원리와 커스터마이징 방법을 배울 수 있음.
     * 커뮤니티 기여: 이러한 지식 공유는 오픈 소스 커뮤니티에 기여하고, 다른 사용자들이 비슷한 프로젝트를 시작할 때 도움을 줄 수 있음.

        Hacker News 의견

     * 소프트웨어/OS를 사용자가 원하는 대로 커스터마이징하는 깊은 탐구에 대한 열정
          + Steam Deck이 Tivoization(하드웨어 제조사가 특정 소프트웨어만 실행하도록 제한하는 행위)에 대한 우려가 없어 다행
          + 기사에서 가장 흥미로운 부분은 Steam Deck이 nixpkgs를 지원한다는 언급(기본적으로 설치되어 있지는 않지만, 전체 OS를 포크하지 않고도 장치에 설치 가능)
     * 게시물에 대한 철저하고 흥미로운 평가
          + 개인적으로는 이런 작업을 하지 않을 것
          + 리눅스와의 가장 많은 작업은 RaspberryPi 시대에 했으며, 그것도 1%에 불과
          + 저자에게 찬사를 보냄
     * Netscape 메테오 샤워 파비콘에 대한 그리움 표현
     * unRaid NAS 서버에 GPU를 주문하여 Steam Headless를 Docker 이미지를 통해 구현하고자 함
          + Windows 랩톱에서 Moonlight 클라이언트를 사용할 계획
          + NAS가 대부분의 시간을 유휴 상태로 있기 때문에 새로운 데스크톱 하드웨어를 구매하는 것보다 낫다고 생각
          + Nvidia 카드의 전력 설정을 유휴 상태로 유지하는 것이 필요(아마도 nvidia-persistenced 호출로 가능)
     * SteamOS를 기반으로 한 배포판들이 이미 존재
          + ChimeraOS는 PC와 컨트롤러 기반 사용에 적합하며, Steam Deck 애드온을 포함하여 완벽하게 작동
     * A/B 업그레이드에 대한 의견
          + 라이브 배포판을 사용하거나 오래된 버전의 복구 시스템을 파티션에 설치하는 것이 더 간단할 수 있음
          + 저자는 Arch Linux로 이동한 최근 경험을 공유하며, Arch를 Valve보다 더 신뢰함
          + Arch의 패키지 품질과 빠른 메인 리포지토리 업데이트, 유용한 AUR 패키지들이 NixOS에서 이동한 이유
     * 리눅스에 대한 경험을 늘리기 위해 게이밍 핸드헬드(Legion Go)를 사용한 경험 공유
          + 리눅스는 호환성이 제한적이고 지속적인 조정이 필요한 것처럼 보여 피해왔음
          + 불변 파일 시스템과 전통적인 리눅스가 소프트웨어에 루트 권한을 쉽게 부여하는 것에 대한 호기심
          + NixOS 사용 경험 공유: 다양한 구성 요소를 쉽게 시도하고 원치 않을 경우 완전히 제거 가능
          + Jovian 커뮤니티가 Valve의 SteamOS tarball을 GitHub에 태그된 커밋으로 재구성하여 Valve 직원처럼 소스를 탐색할 수 있게 함
          + Jovian을 통해 NixOS 상에 자신의 SteamOS 복사본을 설치할 수 있음
     * bazzite.gg의 AMD 하드웨어에서의 120hz VRR 지원과 HDR 지원 알파 테스트 경험 공유
     * SteamOS가 Arch Linux를 기반으로 한다는 사실에 대한 흥미로운 발견
     * 리눅스 PC에서 SteamOS를 실행하는 데 관심이 있다면 HoloISO를 추천
"
"https://news.hada.io/topic?id=12726","알래스카 항공, 기내 창문 파손 사고로 보잉 737 맥스 9 항공기 운항 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              알래스카 항공, 기내 창문 파손 사고로 보잉 737 맥스 9 항공기 운항 중단

알래스카 항공 비상 착륙

     * 알래스카 항공 소속의 보잉 737 Max 9 항공기가 기내 패널이 터지면서 비상 착륙함.
     * 미국 연방항공청(FAA)은 해당 기종 171대에 대해 일시적인 운항 중단을 명령함.
     * FAA 관리자 마이크 휘태커는 ""특정 보잉 737 MAX 9 항공기에 대한 즉각적인 검사가 필요하다""고 발표함.

교통부 장관의 발언

     * 미국 교통부 장관 피트 부티지지는 ""안전이 항상 우리 부서와 FAA의 최우선 과제""라고 강조함.

보잉의 입장

     * 보잉은 FAA의 결정에 동의하며 즉각적인 검사를 지지한다고 밝힘.
     * 보잉은 안전을 최우선으로 여기며 이 사건으로 인한 영향을 깊이 유감스럽게 생각한다고 전함.

사건 개요

     * 알래스카 항공은 토요일 아침 보잉 737 Max 9 전체를 운항 중단시킴.
     * 해당 항공기는 오리건 주 포틀랜드에서 이륙 후 공중에서 창문과 기체 일부가 탈락함.
     * 항공기는 승객 174명과 승무원 6명을 태우고 안전하게 착륙함.

승객의 경험

     * 승객 에반 스미스는 한 소년이 옷이 빨려 나가는 사건을 목격함.
     * 다른 승객 카일 링커는 창문/벽이 갑자기 터지고 산소 마스크가 투하되었다고 전함.
     * 승객 엠마 뷰는 비상 상황을 알리기 위해 부모님에게 문자를 보냈다고 말함.

항공사의 조치

     * 알래스카 항공은 사건 발생 후 보잉 Max-9 기종 65대를 임시로 운항 중단시킴.
     * 항공기는 이륙 후 약 6분 만에 16,000피트 상공에서 문제가 발생하여 경로를 변경해 착륙함.

항공기 상태

     * 사건의 중심이 된 보잉 737 Max 9는 두 달 전 조립 라인에서 나와 FAA 인증을 받음.
     * 보잉은 추가 정보를 수집 중이며 조사를 지원할 준비가 되어 있다고 밝힘.

보잉 737의 역사

     * 보잉 737은 미국 국내선에서 자주 사용되는 쌍발 엔진 단일 통로 항공기임.
     * 2017년 5월 서비스를 시작한 이후, 2018년과 2019년에 Max 8 기종이 두 차례 추락하여 346명이 사망함.
     * 이 사고로 인해 전 세계적으로 Max 8과 Max 9 기종이 거의 2년간 운항 중단됨.
     * 제조 결함을 수정하기 위해 때때로 Max 항공기의 인도가 중단됨.

GN⁺의 의견

     * 이 사건은 항공 안전에 대한 중요성을 강조하며, 항공기 제조사와 규제 기관이 어떻게 긴밀하게 협력하여 안전 문제를 해결하는지 보여줌.
     * 승객들의 경험은 항공 사고 시 승무원과 동승자들의 대응이 얼마나 중요한지를 보여주며, 비상 상황에서의 인간적인 지원의 가치를 강조함.
     * 보잉 737 Max 시리즈의 안전 문제는 과거에도 큰 이슈였으며, 이번 사건은 항공기의 안전성에 대한 지속적인 관심과 검토의 필요성을 재확인시킴.

        Hacker News 의견

     * 보잉의 엔진 날개 안티아이싱 시스템 설계 결함을 조종사에게 전가하려는 최근 뉴스와 결합하여, 이 항공기에 대한 신뢰를 잃었다는 의견이 있음. 초기 추락 사고는 충격적이었지만, 보잉이 회복하고 문제를 해결할 것으로 기대했지만, 설계 결함에 대해 조종사를 탓하는 것은 받아들일 수 없는 태도로 보임.
     * 737MAX-9의 경우 최대 좌석 수에 따라 추가 안전문이 필요하지만, 사고 당시 비행기는 낮은 좌석 수 구성이었으므로 추가 문이 잠겨 있고 내부에서 보이지 않음.
     * 737-900부터 시작된 플러그 출구와 같은 설계 특징은 1997년부터 있었으며, 보잉의 엔지니어링 문화가 MD 합병 후 악화되고 MAX를 출시하기 위한 지름길이 사용된 것에 대한 비판이 있음.
     * 한 승객은 비행 중에 발생한 소음과 산소 마스크가 떨어지는 것을 경험했으며, 한 어린이의 셔츠가 비행기 밖으로 빨려 나가는 상황이 있었다고 전함.
     * 자주 비행하는 한 사용자는 MAX 사고 이후 불안감을 느꼈으나, 실제로 MAX를 타고 난 후에는 궁금증이 생겨 해커뉴스에서 관련 기사를 찾아보았다고 함. 또한, 창문이 깨지거나 패널이 떨어질 것에 대한 두려움을 표현함.
     * 한 사용자는 보잉이 MAX의 브랜드명을 변경하여 승객들의 불안감을 줄이려 했던 것에 대해 언급하며, 어떻게 하면 승객이 MAX를 타지 않도록 할 수 있는지에 대한 질문을 함.
     * 이전 관련 뉴스에서는 보잉이 MAX 7의 안전 규정 면제를 FAA에 요청했다는 내용이 있었음.
     * 비행 중인 비행기의 비디오 링크가 공유됨.
     * MCAS를 탑재한 MAX는 기존 737 버전의 비행 시뮬레이터 역할을 하고 있으며, 비행기의 구멍을 가상 현실로 보이지 않게 하는 VR 헤드셋을 승객에게 제공하는 것이 해결책이 될 수 있다는 농담 섞인 의견이 있음.
     * 비행기의 중앙 후방 문이 문제였다는 것을 보여주는 트윗 링크가 공유됨.
"
"https://news.hada.io/topic?id=12699","미국에서 전기차 구매자가 감소중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           미국에서 전기차 구매자가 감소중

전기차의 신화

     * 조 바이든 대통령이 2030년까지 판매되는 신차의 절반을 전기차로 만들겠다는 계획을 발표함.
     * 인플레이션 감축법이 통과되어 전기차 구매와 자동차 제조사의 전기차 투자에 대한 인센티브가 마련됨.
     * 새로운 전기차 공장, 배터리 제조 시설, 광산 운영 등의 프로젝트가 시작됨.
     * 2022년 말까지 미국에서 점점 더 많은 사람들이 전기차로 전환하고 있었으며, 이는 배출량 감소에 기여할 것으로 보임.

전기차 전환의 장애물

     * 전기차 판매는 증가하고 있지만, 정부 목표에 도달할 수 있을지 불확실함.
     * 전기차 수요 감소로 인한 영향이 곳곳에서 나타남.
     * 포드와 제너럴 모터스(GM)는 전기차 생산 계획을 지연시키고, 테슬라도 멕시코 공장 건설을 연기함.
     * 전기차가 가스 차량을 대체하는 데 있어 충분한 충전 인프라와 저렴한 전기차 옵션이 부족함.

전기차의 신화

     * 미국 자동차 산업은 큰 차량에 집중하고 있으며, 이는 환경적 이점을 상쇄시키고 있음.
     * 큰 전기차는 더 큰 배터리를 필요로 하고, 이는 환경 파괴적인 광산 운영을 증가시킴.
     * 전기차의 '주행 거리 불안'은 높은 가격과 환경에 대한 부정적인 영향을 초래함.
     * 미국에서 전기차를 구매하는 것은 주로 고소득 가정에서 이루어지고 있음.

노르웨이 모델

     * 노르웨이는 전기차에 대한 인센티브를 도입하여 전기차 판매가 증가했지만, 전체 차량 중 전기차 비율은 여전히 낮음.
     * 노르웨이는 2030년 배출량 감소 목표를 달성하지 못할 것으로 보임.
     * 전기차 인센티브는 예상치 못한 결과를 초래했으며, 이는 미국의 전기차 정책에 대한 경고 신호가 될 수 있음.

전기차에 대한 재고

     * 전기차로의 전환은 미국의 교통 시스템을 재고할 기회를 제공함.
     * 정부와 자동차 제조사는 더 지속 가능한 교통을 위해 더 작은 차량, 하이브리드 차량, 대중 교통에 대한 인센티브를 제공해야 함.
     * 전기차는 짧은 일상 여행에 적합하며, 장거리 여행에는 하이브리드 차량과 더 나은 대중 교통 및 고속 열차가 큰 차이를 만들 수 있음.

GN⁺의 의견

     * 전기차는 환경 위기에 대응하는 중요한 수단이지만, 미국의 현재 전기차 계획은 단기간에 모든 문제를 해결할 수 있는 만병통치약이 아님.
     * 전기차 전환은 단순히 가스 차량을 대체하는 것 이상의 광범위한 교통 문제 해결과 지속 가능한 교통 시스템 구축을 필요로 함.
     * 미국의 전기차 전환 전략은 더 포괄적인 접근 방식을 고려해야 하며, 이는 대중 교통 투자 증대와 환경에 덜 해로운 차량 옵션의 확대를 포함해야 함.

   충전기 한대로 몇대정도의 전기차를 일상적으로 커버할 수 있을지 궁금하네요.
   고속도로 주유소에서 수분이면 완료되는 가솔린충전도 줄을서서 기다리는걸 보면 전기차로의 전환이 정말 가능할지 의문이 들기도 해요.

   한국도 전기차 구매가 줄고 있다고 언론에선 얘기하는데요. 전 어째 점점 전기차 파란 번호판이 더 많이 보이는 것 같아요.
   글에서도 댓글에서도 충전 인프라 문제를 이야기 하는데, 솔직히 서울에만, 그것도 아파트에 몰려사는 우리나라에서는 충전 문제는 크게 문제가 안될수도 있다고 봅니다. 미국처럼 1000km씩 장거리 주행할 일이 많은 것도 아니고요.

   변화율에 대한 감소가 핵심인 것 같습니다. 성장 중이냐를 물었을 때는 아직도 성장 중이지만 성장세가 둔화됐다가 핵심 같아요.

        Hacker News 의견

     * 전기차(EV)는 단독 주택을 소유하거나 가정용 충전기를 쉽게 이용할 수 있는 커뮤니티에 거주하는 사람들에게 가장 적합함. 반면, 거리 주차에 의존하거나 아파트에 사는 사람들은 전기차가 가솔린 차보다 불편할 수 있음. 시장이 이미 포화 상태에 가까워질 수 있으며, 비테슬라 전기차 제조업체들이 NACS 충전기로 전환할 계획이지만, 이는 몇 년이 걸릴 것이므로 현재 비테슬라 전기차 구매는 좋은 시기가 아님.
     * 전기차가 장기적으로 더 신뢰성 있고 비용을 절약해주기를 바람. 전기차는 토요타 코롤라와 비교해 약 1만 달러 더 비싸며, 고급 기술 기능으로 인해 장기적인 신뢰성과 유지보수 비용이 영향을 받음. 간단한 수동 창문보다는 터치스크린으로 제어되는 공조 시스템이 더 나음. 센서와 소프트웨어 제어를 모든 작은 부분에 통합하면 결국 고장 나고 비싼 수리 비용이 발생할 것임. 마케팅은 전기 모터가 더 오래 지속될 것이라고 하지만, 토요타는 이미 30만 마일까지 신뢰성 있게 운행되며, 차량 내부 부품도 수리 없이 오래 지속됨. 내연기관 차량은 너무 신뢰성이 높아서 가족 중 누구도 한 해에 1천 달러 이상 수리비를 지출한 적이 없음.
     * 전기차 판매가 증가하고 시장 점유율이 늘어나는 상황에서 ""전기차를 구매하는 사람들이 줄어들고 있다""는 주장은 어떻게 나올 수 있는지 의문. 이는 클릭을 유도하기 위한 출판물의 전략일 수 있음. 실제로는 전기차 등록이 시장의 16% 이상을 차지하며, 전년 대비 증가하고 있음.
     * 전기차 산업이 충전 인프라를 제공하는 데 실패했음을 나타내는 요소로 '주행 거리' 문제가 있음. 전기차는 본질적으로 더 단순하게 제작될 수 있으며, 배터리 비용이 낮아지면서 더 저렴해야 함. 그러나 자동차 제조업체들은 크고 비싼 차량을 밀어붙이고 있으며, 닛산 리프는 단종되고, 쉐보레 볼트는 기술적 문제로 출발이 좋지 않았음. 저렴한 전기차와 충분한 인프라가 제공되면, HOA 제한이나 아파트에 사는 사람들에게도 매력적일 것임.
     * 전기차 사용자는 전반적으로 주행 거리에 대한 불안감이 덜함. 가솔린 차를 사용할 때는 매달 최소 한 번씩 연료가 부족한 상태에서 일이나 행사에 지각하는 경우가 있었음. 전기차를 사용하면 매일 완전히 충전된 상태로 하루를 시작할 수 있음.
     * 전기차 가격이 여전히 가솔린 차량 가격보다 평균 28% 더 높다는 것은 문제임. 전기차가 인기를 얻기 시작할 때, 1만 달러 미만의 매우 저렴한 차량을 기대했으나, 실제로는 더 비싼 차량, 더 긴 충전 시간, 더 비싼 보험료, 더 짧은 주행 거리를 가진 차량이 등장함. 이러한 상황에서 많은 사람들이 전기차를 구매하고자 하는 의지가 줄어드는 것은 당연함.
     * 전기차를 3년간 사용한 경험을 바탕으로, 대부분의 미국인에게 최적의 조합은 전기차 1대와 하이브리드 1대, 태양광 지붕, 배터리 저장 시스템임. 장거리 운전이 필요할 때는 하이브리드 차량을 사용할 수 있으며, 전기차 충전소가 가솔린 주유소보다 흔해질 수 있음. 사회 붕괴 상황에서는 정제소, 파이프라인, 유조선이 얼마나 오래 작동할지 의문이며, 태양광 패널과 인버터를 사용하는 능력이 더 중요할 수 있음.
     * 전기차가 여전히 가솔린 차량보다 평균 28% 더 비싼 것은 문제임. 자동차 회사들은 전기차를 프리미엄 제품으로 포지셔닝하려고 시도했으며, 전기 트럭 부문에서는 가격이 더욱 높아짐. 배터리 가격이 지속적으로 감소함에도 불구하고, 미국 자동차 산업이 제대로 대응하지 못한다면 BYD와 토요타가 저가 시장을 장악할 수 있음.
     * 전기차는 대부분의 미국인의 일상 운전에 완벽하게 적합하지만, 장거리 여행과 같은 극단적인 경우에는 충전 필요성으로 인해 어려움을 겪음. 미국인들은 가솔린 차량의 완벽한 대체품을 기대하고 있으나, 전기차가 모든 면에서 가솔린 차량과 동일한 기능을 제공해야 한다는 인식이 여전히 존재함. 그러나 실제로 미국인의 평균 일일 주행 거리는 약 40마일이며, 대부분의 여행이 30마일 미만임에도 불구하고, 많은 사람들이 전기차의 주행 거리에 대해 우려를 표함.
"
"https://news.hada.io/topic?id=12634","바지트(Bazzite) - 데스크탑, 거실, 휴대용 PC를 위한 스팀OS(SteamOS) 스타일의 OCI 이미지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     바지트(Bazzite) - 데스크탑, 거실, 휴대용 PC를 위한 스팀OS(SteamOS) 스타일의 OCI 이미지

Bazzite에 대하여 및 특징

     * Bazzite는 Steam Deck용 대체 운영 체제로, 데스크탑 컴퓨터 및 거실 홈 시어터 PC용으로 준비된 SteamOS와 유사한 OCI 이미지임.
     * Fedora 기술을 사용하여 구축되어 하드웨어 지원 확장 및 내장 드라이버를 포함함.
     * Bazzite는 다음과 같은 추가 기능을 제공함:
          + 사전 설치된 독점 Nvidia 드라이버.
          + H264 디코딩을 위한 하드웨어 가속 코덱 지원.
          + AMD의 ROCM OpenCL/HIP 런타임 전체 지원.
          + Xbox 컨트롤러를 위한 xone, xpadneo, xpad-noone 드라이버.
          + DisplayLink 전체 지원.
          + SteamOS에서 Valve의 KDE 테마 포함.
          + LatencyFleX, vkBasalt, MangoHud, OBS VkCapture 기본 설치 및 사용 가능.
          + Wallpaper Engine 지원(단, KDE에서만).
          + ROM Properties Page 쉘 확장 포함.
          + Winesync/Fastsync/NTsync 전체 지원.
          + 자동 업데이트가 있는 Distrobox 사전 설치.
          + wine prefix 내용으로 인한 디스크 공간 사용 감소를 위한 자동화된 duperemove 및 rmlint 서비스.
          + HDMI CEC 지원을 위한 libCEC.
          + 자동 프로세스 우선 순위 조정을 제공하는 System76-Scheduler 사전 설치.
          + 추가 규칙이 있는 맞춤형 System76-Scheduler 구성.
          + 기본적으로 Google의 BBR TCP 혼잡 제어 사용.
          + 사전 설치 및 활성화된 Input Remapper(Deck 변형에서는 기본 비활성화).
          + Bazzite Portal을 통해 다양한 애플리케이션 및 트윅 설치 용이.
          + Bazzite Portal을 통해 선택적으로 설치 가능한 Nix 패키지 관리자.
          + Bazzite Portal을 통해 선택적으로 설치 가능한 Brew 패키지 관리자.
          + Android 앱 실행을 위한 사전 설치된 Waydroid.
          + Flatseal, Warehouse, Gear Lever를 사용한 애플리케이션 관리.
          + 일부 마더보드의 RGB 제어를 위한 OpenRGB i2c-piix4 및 i2c-nct6775 드라이버.
          + 내장된 OpenRazer 드라이버 및 OpenTabletDriver udev 규칙.
          + Nintendo의 Gamecube 컨트롤러 어댑터를 1000hz 폴링으로 오버클럭하는 GCAdapter_OC 드라이버.
          + Wooting 키보드에 대한 박스 지원.
          + amdgpu 드라이버 하에 Southern Islands(HD 7000) 및 Sea Islands(HD 8000) AMD GPU 지원.
          + 32비트 Source 1 엔진 게임 버그 수정 가능(ujust patch-source1-tcmalloc 사용).
          + Wayland에서 Discord 화면 공유를 위한 XwaylandVideoBridge 사용 가능.
          + 다양한 브라우저를 위한 웹사이트에서 애플리케이션 생성을 위한 Webapp Manager 사용 가능.

데스크탑

     * bazzite로 사용 가능한 일반 변형은 데스크탑 컴퓨터에 적합함.
     * OS, Flatpaks, Nix 패키지(플릭을 통해), 모든 Distrobox 컨테이너에 대한 자동 업데이트 제공.

Steam Deck/홈 시어터 PC(HTPC)

     * Steam Deck이 아닌 장치는 bazzite-deck 이미지를 사용할 수 있지만, AMD/Intel GPU를 사용해야 함.
     * Steam Deck에서 SteamOS를 대체하고 HTPC에서 콘솔과 같은 경험을 제공하기 위해 설계된 변형은 bazzite-deck로 사용 가능함.

GNOME

     * GNOME 데스크탑 환경이 있는 빌드는 데스크탑 및 덱 플레이버 모두에서 사용 가능함.
     * 이 빌드는 다음과 같은 추가 기능을 제공함:
          + Wayland에서 가변 리프레시율 지원 및 분수 스케일링 활성화.
          + 게임 모드로 돌아가기, Steam 실행, 다양한 유용한 유틸리티를 위한 상단 바의 사용자 정의 메뉴(Steam Deck 빌드에서만).
          + GSConnect 사전 설치 및 사용 준비 완료.
          + Vapor 및 VGUI2에서 영감을 받은 선택적 Valve 스타일 테마 제공.
          + Hanabi 확장 포함하여 KDE의 Wallpaper Engine과 유사한 기능 제공.
          + 중요한 사용자 경험 수정을 포함한 다수의 선택적 확장 사전 설치.
          + Firefox GNOME 테마 및 Thunderbird GNOME 테마에 대한 자동 업데이트(설치된 경우).

Upstream에서 온 특징

      Universal Blue

     * 기본적으로 Flathub 활성화.
     * 편의를 위한 ujust 명령어.
     * 멀티미디어 코덱 기본 제공.
     * 지난 90일 이내의 모든 빌드에서 Bazzite 롤백 가능.

      Fedora Linux(Kinoite & Silverblue)의 특징

     * 안정적이고 견고한 기반.
     * 시스템 패키지가 상대적으로 최신 상태 유지.
     * 업데이트 사이에도 Fedora 패키지를 이미지에 레이어링하여 유지 가능.
     * SELinux가 사전 설치 및 구성되어 보안에 중점을 둠.
     * 사용자 데이터 손실 없이 다른 Fedora libostree 이미지로 리베이스 가능.
     * CUPS가 사전 설치되어 있어 인쇄 지원 제공.

왜 Bazzite인가

     * Bazzite는 SteamOS의 몇 가지 문제를 해결하기 위해 시작된 프로젝트로, 주로 구식 패키지와 기능적인 패키지 관리자 부재가 문제였음.
     * 이 프로젝트는 이미지 기반이지만, 명령줄에서 직접 Fedora 패키지를 설치할 수 있으며, 이러한 패키지들은 업데이트를 거쳐도 유지됨.
     * Bazzite는 매주 여러 번 Fedora에서 패키지를 업데이트하여 최신 기능과 최상의 성능을 제공함.

GN⁺의 의견

     * Bazzite는 Steam Deck 및 기타 PC 사용자들에게 매력적인 대안 OS로, 게임에 최적화된 다양한 기능과 드라이버를 제공함.
     * Fedora 기반의 안정성과 업데이트된 패키지를 통해 사용자는 최신 기능과 성능을 누릴 수 있음.
     * 이 글은 특히 게임 커뮤니티와 오픈 소스 기술에 관심이 있는 사람들에게 흥미로울 것임.

        Hacker News 의견

     * 리빙룸 미디어 서버가 자가 호스팅을 부활시키는 트로이 목마가 될 것이며, 인터넷을 다시 P2P 중심으로 변화시킬 것이라는 긍정적인 전망.
          + 대칭적 연결과 강력한 리눅스 시스템을 갖춘 대부분의 사람들에게 소프트웨어 문제만 해결되면 인터넷을 본래 의도대로, 즉 발행자이자 소비자로서 동등하게 사용할 수 있을 것임.
     * Bazzite에 대한 만족감과 그 이점들을 설명하며, SteamOS 대신 Bazzite를 사용하는 것의 장점을 강조.
          + Bazzite를 사용함으로써 SteamOS에서는 어려웠던 여러 작업들을 쉽게 할 수 있게 되었으며, 예를 들어 원격 플레이를 통해 강력한 데스크탑에서 게임을 실행하고 TV에서 시청하는 등의 경험을 공유함.
     * rpm-ostree 배포판에 대한 다양한 정보를 배웠다고 언급하며, 관련 도구들과 설정 방법을 공유.
          + GNOME/Wayland에서 사용할 수 있는 xrandr 대체품, 게임 성능 향상을 위한 커널 패치, 가변 리프레시 레이트 설정 방법, OBS를 위한 Vulkan 캡처 플러그인, System76 스케줄러 등에 대한 정보를 제공함.
     * Steamdeck과 유사한 사양의 PC를 찾던 중 발견한 솔루션에 대한 흥미와 궁금증을 표현.
          + SteamOS의 BTRFS 패치가 기본적으로 포함된 것에 대해 관심을 보이며, BTRFS가 게임/Steamdeck 시나리오에서 가져올 수 있는 이점에 대해 설명함.
     * SteamOS를 Nvidia 그래픽이 없는 일반 PC에 재배포하는 프로젝트를 발견했다고 공유.
          + HoloISO라는 SteamOS 재배포판에 대한 정보를 제공함.
     * 맥 프로 '쓰레기통' 모델에서 Bazzite를 실행하는 모습을 공유.
          + Bazzite가 맥 프로에서도 작동하는 것을 보여주는 비디오 링크를 공유함.
     * Bazzite에 대한 관심으로 인해 여자친구의 관심을 잃고 있다고 농담.
          + 개인적인 경험을 통해 Bazzite에 대한 관심이 높음을 표현함.
     * OCI의 의미에 대한 질문을 하며, Oracle Cloud Infrastructure가 아닐 것 같다고 추측.
          + OCI가 이 컨텍스트에서 무엇을 의미하는지에 대한 궁금증을 나타냄.
     * 이 프로젝트의 동기와 뒷받침하는 주체에 대한 궁금증을 표현.
          + 단순한 취미 프로젝트가 아니라 전략적인 오픈 소스 플레이처럼 느껴진다며, Nvidia와 관련이 있을 수도 있다는 추측을 함.
     * SD에 설치하지 말아야 할 이유가 있는지, Waydroid 설치가 흥미롭고 얼마나 잘 작동하는지, 그리고 이것이 다소 부피가 큰 것으로 여겨지는지에 대한 의문을 제기.
          + SD에 설치에 대한 우려와 Waydroid의 성능, 프로젝트의 크기에 대한 의견을 나타냄.
"
"https://news.hada.io/topic?id=12625","The Information의 2024년 예상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       The Information의 2024년 예상

     * 인공지능 분야의 급성장과 2022년 말 ChatGPT의 등장이 2023년 기술 발전을 주도
     * 2024년엔 금리 상한선 도달 및 연준의 금리 인하 가능성으로 금융적 어려움 해소 전망

예상 : 마이크로소프트와 아마존의 AI 하드웨어 기기 출시

     * 애플과 삼성의 스마트폰 시장 지배: 미국 스마트폰 시장의 70-80% 점유
     * 새로운 AI 기반 모바일 기기의 등장: AI를 중심으로 하는 새로운 기기들의 출현으로 1위인 애플을 위협하게 될 것
     * 마이크로소프트와 아마존의 시장 복귀: 과거 스마트폰 시장에서 실패한 경험을 바탕으로 AI 중심 기기 개발 예측
     * 마이크로소프트의 Copilot 기반 기기: Office와 같은 소프트웨어 제품에 이미 통합 중인 AI 동반자
     * 애플의 AI 기능 개선 실패: Siri의 정체성과 AI 제품에 대한 느린 대응

예상 : 아마존의 식료품 최고 책임자 토니 호게트의 이직

     * 토니 호게트의 아마존 합류 배경: 영국 최대 식료품 체인인 Tesco를 떠나 아마존의 실물 매장 사업을 책임
     * 아마존의 전략 변화: 신규 매장 개설 중단 및 기존 매장 사업 축소
     * 호게트의 아마존 내 역할 변화: Whole Foods 배달 수수료 조정 및 기존 매장 개선 작업
     * 호게트의 이직 가능성: 경쟁적이고 저마진인 식료품 사업에 대한 아마존의 투자 감소로 인해 2024년 말까지 아마존을 떠날 것으로 예측

넷플릭스 관련 예상

     * 넷플릭스는 지금까지 큰 M&A를 한적 이 없으나, 올해엔 대규모 인수로 콘텐츠 강화 및 신규 시장 진출을 노릴 것

  넷플릭스의 엔터테인먼트 혹은 게이밍 분야 대규모 인수

     * TV 산업 내 대규모 거래 논의: 파라마운트 글로벌의 소유권 변경 가능성, 디즈니의 ESPN 지분 매각 가능성 등
     * 넷플릭스의 재무 상태 강화: 이익, 부채 감소를 통한 재무 상태 개선
     * 라이온스게이트 스튜디오 인수 가능성: 라이온스게이트의 TV 및 영화 스튜디오 분리 계획, 넷플릭스에 적합한 인수 대상
     * 게임 분야로의 확장 가능성: 온라인 게임 개발사 넥슨이 인수 대상으로 예측(120억 달러)

  넷플릭스의 광고 기술 회사 인수

     * 스트리밍 광고 시장에서의 경쟁 증가: 기술 대기업과 전통 미디어 회사 간의 경쟁 예상
     * 광고 운영 인프라 개발 필요성: 넷플릭스의 광고 사업 확장을 위한 인프라 개발 중요성
     * 마이크로소프트와의 파트너십 종료 및 인수 전망: 넷플릭스가 내부 운영을 위해 광고 기술 회사 인수 계획
     * 인수 대상 후보: 마그나이트, 퍼블매틱 등 광고 기술 회사들

예상 : Shein 또는 Temu의 Wayfair 인수

     * Shein과 Temu의 제품 다양화: 바겐세일 이미지에서 벗어나 다양한 제품 판매 시작
     * Wayfair 인수의 가능성: 보스턴에 본사를 둔 가정용품 및 가구 판매업체 Wayfair 인수 가능성 높음
     * Shein의 미국 시장 경쟁력 강화: Wayfair의 창고 및 배송망 활용으로 아마존과의 경쟁 강화
     * PPD Holdings의 역할: Temu의 모회사로서, Wayfair 인수를 위한 재정적 능력 보유
     * 규제적 장애: Shein과 Temu의 미국 내 인수에 대한 규제적 도전

예상 : BNPL(Buy Now, Pay Later) 업체들의 채무 증가 전망""

     * 소비자 부채 문제의 심화: 신용카드, 자동차 대출 등 개인 부채 증가
     * 미국 저축률과 가계 부채의 증가: 역대 최고 수준의 가계 부채와 낮은 저축률
     * 연방준비제도의 이자율 목표 상승: 위험 부채에 대한 이자율 상승
     * 금융 기관과 대출 회사의 위험 증가: 신용카드 및 대출 회사들의 부채 불이행 증가 예상
"
"https://news.hada.io/topic?id=12741","Clicks - 아이폰을 위한 하드웨어 키보드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Clicks - 아이폰을 위한 하드웨어 키보드

     * 아이폰 외장 케이스 하단에 키보드를 장착한 형태 (62g)
     * 백라이트, /⌘ 버튼 및 음성 입력 버튼 내장
     * 패스 쓰루 충전(라이트닝/USB-C) 및 무선 충전 지원
     * ⌘-space 등으로 다양한 숏컷 호출 가능
     * 아이폰 14/15 Pro($139), 15 Pro Max($159)

   헉 블랙베리의 부활...!

   혹 하기는 하는데 너무 길어져서 주머니에 못넣고 다닐것 같네요 ㅎㅎ
"
"https://news.hada.io/topic?id=12664","2024년에 읽어야 할 소프트웨어 및 기술 관련 블로그/잡지는 어떤게 있을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              2024년에 읽어야 할 소프트웨어 및 기술 관련 블로그/잡지는 어떤게 있을까요?

   HN에 올라온 질문과 답변 정리
     * Paged Out! Institute - 프로그래밍/해킹/보안 등 관련 무료 잡지
     * 해커뉴스의 베스트 댓글 과 하이라이트
     * The Diff - 금융과 기술 분야의 변곡점
     * asterisk magizine
     * HuggingFace Daily Papers
     * lwn.net
     * 유튜브 - Dave's Garage
     * Freethink

   한국어 사용자라면 긱뉴스 부터 구독을.. ㅎㅎㅎ

   ㅇㄱㄹㅇ ㅂㅂㅂㄱ

   한국에선 단연 긱뉴스죠!!!
"
"https://news.hada.io/topic?id=12617","저는 로우코드에 대해 회의적입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           저는 로우코드에 대해 회의적입니다

     * 로우코드(low-code)에 대한 회의적인 입장임
     * 소프트웨어 컨설팅을 하면서 로우코드의 빠른 개발 시간과 낮은 유지 보수 비용을 약속하는 광고에 이끌린 클라이언트들을 자주 만남
     * 클라이언트들이 만족하지 못하는 몇 가지 이유가 존재함

맞춤형 기능에 대한 한계

     * 로우코드 솔루션은 기업 요구 사항의 약 80%를 충족시키지만, 나머지 20%는 기본 기능으로 해결 불가능
     * 로우코드 도구 마케터들은 나머지 20%를 쉽게 해결할 수 있다고 주장하지만, 실제로는 상당한 맞춤화가 필요하고 때로는 불가능함
     * 기업은 도구의 기본 기능이 충분히 가까운지, 아니면 도구를 해킹하여 정확한 사용 사례에 맞추려고 시도할지 선택해야 함

개발자 풀의 제한

     * 기업들은 때때로 로우코드 도구를 해킹하여 100% 요구 사항을 충족시키려고 시도함
     * 결과적으로 특정 도구나 독점 언어로 많은 맞춤 코드를 작성하게 되어 이해할 수 있는 개발자가 매우 적음
     * 이제 회사는 널리 사용되는 오픈 소스 언어 개발자 풀에서 모집하는 대신, 이 도구에 매우 전문화된 유지 관리자를 찾아야 함

플랫폼 업그레이드의 문제

     * 소프트웨어를 업그레이드하면서 연동되는 것들이 깨지지 않게 하는 것은 어려움
     * 로우코드 도구는 로우코드 도구가 설계되지 않은 사용 사례를 위해 임의의 코드를 처리해야 함
     * 엄격한 API 계약을 통해 이를 수행할 수 있어야 하지만, 실제로는 맞춤 코드가 내부에서 온갖 장난을 치는 것을 많이 봄

데이터베이스 구조의 혼란

     * 정밀한 분석이 필수적인 프로세스에 로우코드 도구를 사용하는 기업을 봄
     * 그러나 기본 데이터 모델을 살펴보면 이해할 수 없는 상태임: user_attribute_47이 무엇을 의미하는지? 애플리케이션의 페이지 1에서 페이지 2로 필드를 이동하면 데이터가 별도의 필드에 있음?

GN⁺의 의견

     * 로우코드는 개발 속도와 유지 보수 비용을 줄일 수 있는 유망한 도구이지만, 실제 사용 시 예상치 못한 문제들이 발생할 수 있음.
     * 특히 맞춤형 기능이 필요한 경우나 특정 로우코드 도구에 의존하는 개발 언어의 사용은 개발자 풀을 제한하고 유지 보수를 어렵게 만듦.
     * 로우코드 도구의 업그레이드와 데이터베이스 구조의 복잡성은 장기적인 프로젝트 관리에 있어 중요한 고려 사항임.
     * 이 글은 로우코드 도구를 사용할 때 주의해야 할 점들을 지적하며, 적절한 사용 사례에 대한 신중한 평가를 권장함으로써 흥미로운 통찰을 제공함.

   지금 까지의 노코드의 개념을 특정 분야에서 제한적으로 적용된다 생각합니다.

   Llm을 이용한 well made 서비스가 등장하면 노코드의 트렌드? 흐름? 추세? 아무튼 개념이 변화하는게 우선이한 생각이 드네요

   10년 전 쯤 MS Access를 유용하게 활용한 사례를 알고 있습니다.

   조직의 정보시스템에, 비교적 잘 설계되어 MS Sql Server에 구현된 데이터베이스가 있었고,
   일상적인 OLTP 작업들도 역시 비교적 잘 구현되어 있었습니다.

   그런데 일상적이지 않은 데이터 조회 및 보고서 출력 요구에 대한 IT부서의 느리고 소극적인 대응에 불만이 쌓여 있었습니다.

   MS 액셀과 액세스를 잘 다룰줄 아는 업무 부서 직원이, 정보시스템에서 다운로드한 액셀 데이터를 액세스에 import 하여, 필요한 데이터 조회 및 보고서 출력 기능을, 코딩 없이 불과 몇 시간 만에 액세스로 구현할 수 있음을 보여줬습니다.

   업무 부서는 액세스에서 DB에 바로 연결할 수 있도록 요청했고, IT부서는 정보시스템 DB를 외부 네트워크에 노출하는 것에 반대했습니다. 그렇지만 업무 부서의 요구가 강했기 때문에, 일부 데이터들만 미러링된 DB를 따로 만들어서 노출해줬습니다.

   액셀 데이터 기능을 잘 다룰줄 아는 직원들은 며칠 교육만으로 액세스를 업무에 활용하기 시작하더군요.

   저는 이 글이 공감되네요. 개인적인 생각입니다만,
   특수 문법을 사용하는 경우 -> 러닝커브가 필요해지고, 유지보수가 어려워짐
   UI로 코드를 단순 대체하는 경우 -> 그냥 코딩하는게 더 편한 경우가 많음
   완전한 노코드 도구가 되는 경우 -> 제약이 많고, 유저의 해킹이 유도됨. 의도 외 동작을 하는 유저의 빈도가 크게 늘어남
   결과: 아무도 만족할 수 없는 도구가 됩니다.
   기획-개발-사용자의 간극이 서로 너무 커서, 생각보다 잘 만들기 어려운 분야같습니다.

        Hacker News 의견

     * 저개발 코드에 대한 다양한 관점
          + 저개발 코드 플랫폼 개발자의 관점

     저개발 코드는 판매하기 쉬움. IT 부서를 문제로 몰고 기존의 불만을 이용하는 전략을 사용. 데모에서는 간단한 작업을 빠르게 보여줌. 하지만 핵심 비즈니스 로직은 저개발 코드에 포함시키지 않는 것이 좋음. 복잡한 작업은 전문 시스템으로 오프로드되는 것을 가정. 큰 기업에서 기술적 지식은 있지만 IT 권한은 적은 팀에게 유용. 저개발 코드는 간단한 도구로 많은 문제를 해결하지만, 확장성이 떨어지고 강력한 중앙 시스템과 협력해야 함.
          + SRE(사이트 신뢰성 엔지니어)의 관점

     저개발 코드에 대해 회의적. 소스 코드 관리가 부족하고, 문서화가 잘 되어 있지 않음. 많은 맞춤 코드가 필요하지만 재사용성이 떨어짐. 독점적인 런타임 요구, 모니터링이 어려움. 실제로 엔지니어가 작업을 수행하고, 비엔지니어가 사용하는 경우는 보지 못함. Looker 같은 도구는 소스 코드 통합이 가능하지만, 여전히 엔지니어가 사용함. 복잡성을 압축하지만 필요에 따라 사용자 정의 및 확장 가능한 플랫폼을 선호함.
          + 마이크로소프트 저개발 코드 플랫폼에 대한 관점

     MS 저개발 코드 플랫폼에 관심이 있었지만, O365와 Azure 위에 복잡하게 구축된 것으로 보임. 사용자 인터페이스가 부실하고, 장기적으로 비용 절감보다 사용성 문제로 인한 손실이 더 클 수 있음.
          + MS-Access 데이터베이스/폼 솔루션을 전환하는 비즈니스 경험

     비개발자/최종 사용자가 IT 부서를 거치지 않고 만든 MS-Access 솔루션을 진정한 .net 클라이언트/서버 애플리케이션으로 전환하는 비즈니스를 구축함. 저개발 코드 솔루션은 일부 문제를 해결하거나 POC를 작동시키는 데 유용하지만, 규모 확장이나 적응이 필요할 때 문제가 발생할 수 있음.
          + SQLPage 웹사이트 빌더 개발자의 관점

     저개발 코드 솔루션은 외부 ""고코드"" API와 상호 작용할 수 있는 탈출구가 있어야 함. SQLPage에서는 sqlpage.exec를 통해 이를 제공. 저개발 코드 플랫폼의 업그레이드가 맞춤 구현을 깨뜨릴 수 있는 문제가 있음. 대부분의 저개발 코드 도구는 데이터를 인질로 삼지만, SQLPage는 사용자가 여전히 완전히 제어할 수 있는 데이터베이스 위에 레이어를 추가함.
          + 기업 수준의 저개발 코드 도구에 대한 반대 의견

     대기업이 사용하는 저개발 코드 도구에 반대. 대기업은 적절한 개발 팀과 계획, 조직을 감당할 수 있어야 함. 코드가 비용을 발생시키는 것이 아니라, 나쁜 개발자가 나쁜 도구를 사용하여 나쁜 결정을 내리는 것이 비용을 발생시킴.
          + 저개발 코드와 추상화 계층에 대한 관점

     ""저개발 코드""는 직접 인터페이스할 수 있는 코드의 표면적이 적지만, 실제로는 많은 코드가 숨겨져 있음. 추상화 계층은 목적에 잘 맞을 때 강력하지만, 누수가 있거나 부적합할 때는 문제를 야기할 수 있음. 일반적으로 저개발 코드는 특정 용도에 맞춰진 코드를 추상화하지만, 실제로는 특정 도메인 경험이 필요함.
          + Bubble/Airtable을 사용하여 MVP를 구축한 경험

     우크라이나 팀으로부터 MVP 구축 견적을 받았지만, 인턴을 고용하여 Bubble/Airtable을 사용해 제품을 두 달 만에 만들고 6개월 내에 유료 고객을 확보함. 거의 두 해 동안 전통적인 스택으로 이동할 이유를 찾지 못함.
          + 저개발 코드 학습 과정 개발의 공포 이야기

     중요한 회사가 저개발 코드 학습 과정 생성 소프트웨어 패키지를 사용하여 마케팅 및 영업 직원을 위한 내부 학습 과정을 개발함. 몇 년 후 과정을 업데이트할 필요가 생겼지만, 개발에 사용된 소프트웨어나 작업을 수행할 수 있는 도구가 없어 문제가 발생함.
          + 저개발 코드 구현의 버전 관리 가능성에 대한 질문

     저개발 코드 구현을 버전 관리에 넣을 수 있는지, 문제가 발생했을 때 문제의 원인을 찾을 수 있는지, 무료 도구를 사용하여 특정 커밋으로 롤백할 수 있는지에 대한 의문 제기. 대부분의 경우 이러한 기능이 없어 심각한 사용에는 적합하지 않음.
"
"https://news.hada.io/topic?id=12637","애플, 맥을 게이밍 천국으로 만들기 위한 대대적인 푸시를 진행중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  애플, 맥을 게이밍 천국으로 만들기 위한 대대적인 푸시를 진행중

     * 1999년 7월 21일, 스티브 잡스가 뉴욕 맥월드 엑스포에서 비디오 게임을 발표
     * 이 게임은 게임 산업에 큰 영향을 미치고 애플을 게임 강자로 만들 것으로 예상됨
     * 이날 발표된 1인칭 슈팅 게임은 정말로 비디오 게임 역사의 흐름을 바꿈, 하지만 애플을 위한 것은 아니었음
     * 대신, 마이크로소프트가 이 게임 개발사를 인수하고, 이 게임을 2001년 오리지널 Xbox 출시 타이틀로 활용함
     * 잡스와 애플로부터 ""훔쳐간"" 게임은 'Halo: Combat Evolved'로, 개발사는 선구적인 맥용 게임 스튜디오였던 Bungie
     * 이 게임은 역사적인 성공을 거둠

대체 우주의 애플

     * 만약 애플이 '헤일로'를 잃지 않았다면, Xbox는 게임 분야에서 큰 성공을 거두지 못했을 것이며, 맥이 PC가 아닌 주요 게임 플랫폼이 되었을 가능성이 있음
     * 수십 년 동안 게임 분야에서 성공하지 못한 것은 애플과 맥 사용자에게 아픈 경험임
     * 맥 사용자는 AAA 게임을 즐기기 위해 별도의 PC나 콘솔을 구매해야 함.

애플의 변화

     * 2023년, 애플은 게임에 집중하기 시작하며 변화의 바람을 맞이함.
     * 애플은 최고의 PC와 견줄 수 있는 맥 하드웨어 라인업, 애플 실리콘의 성능 향상, 개발자와 사용자를 위한 게임 중심의 소프트웨어 최적화를 제공함
     * 애플은 강력한 하드웨어와 소프트웨어 자원을 배치했고, 이제 게임 시장에서의 성공을 위한 깃발 점령만 남았음
     * 말처럼 쉽지는 않지만, 3조 달러에 가까운 가치를 지니고 장기전에 익숙한 이 기업에게 불가능한 일은 아님

하드웨어는 더 이상 장애물이 아님

     * 1984년, 최초의 매킨토시가 마우스를 사용하여 혁신적인 그래픽 사용자 인터페이스를 제공함으로써 게임에 대한 새로운 방식을 제시함.
     * 현대 PC 게임, 특히 키보드와 마우스로 제어되는 게임은 맥과 깊은 관련이 있음
     * 그러나 1990년대와 2000년대 초반, 맥 하드웨어는 게임 개발의 요구사항을 따라가지 못해 개발자들에게 장애물이 됨
     * 스티브 잡스는 게임에 대한 큰 관심은 없었으나, 데스크탑 사용자에게 게임이 중요하다는 것을 이해함
     * 2020년까지 맥에서의 게임은 PC와의 하드웨어 경쟁에서 밀리는 상황이었음
     * 2005년 PowerPC에서 인텔 CPU로의 전환은 기대만큼의 효과를 가져오지 못함

애플의 게임에 대한 새로운 관심

     * 2023년, 애플은 25년 만에 맥에서의 게임에 대해 새로운 관심을 보임
     * 애플 실리콘이 게임 분야에서 모든 것을 바꿔버림
     * 애플 실리콘을 탑재한 맥은 최신 PC 및 콘솔 게임을 뛰어난 성능으로 실행하며, M1, M2, M3 등의 애플 실리콘은 그래픽 성능을 크게 향상시킴
     * GPU 업그레이드는 특히 인상적으로, M3 칩은 하드웨어 가속 레이 트레이싱과 메시 쉐이딩을 지원함
     * 애플 실리콘은 단순한 성능을 넘어, 게임 개발자들이 맥 게임을 더 쉽게 개발하고 다른 애플 기기에서도 실행할 수 있게 하는 통합된 하드웨어 플랫폼을 제공함

맥 라인업의 변화

     * 몇 년 전 맥 라인업에는 통합 GPU와 별도 GPU가 혼합되어 있었음
     * 애플 실리콘으로 인해 이러한 복잡성이 제거되고, 아이폰, 아이패드, 맥에 걸쳐 통합된 게임 플랫폼이 형성됨
     * 한 플랫폼에서 설계된 게임은 다른 두 플랫폼으로 쉽게 이식 가능
     * 플레이스테이션 5나 Xbox Series S/X와 같은 콘솔의 통합 하드웨어 플랫폼과 유사
     * 동일한 아키텍처를 사용하여 모든 맥이 특정 칩셋 세대의 게임을 최적의 설정으로 실행할 수 있음

애플 실리콘 설계의 게임 중심

     * 애플 실리콘 설계 초기 단계부터 게임이 중요하게 고려됨
     * 칩 설계 시 CPU, GPU, 메모리 성능의 균형을 고려하여 게임에 필요한 강력한 성능 제공
     * 최신 콘솔의 칩과 유사한 통합 CPU, GPU, 메모리 구조를 가짐

M3 칩의 주요 하드웨어 기능

     * 애플은 M3 칩에서 맥을 위한 첫 번째 하드웨어 가속 레이 트레이싱과 메시 쉐이더를 포함
     * 게임에 현실적인 조명과 더욱 상세한 다각형 및 텍스처를 제공
     * M3 기반 맥과 미래 애플 컴퓨터의 게임 성능을 향상시킬 수 있는 다이내믹 캐싱 기능을 포함

다이내믹 캐싱의 개념

     * 다이내믹 캐싱은 GPU에 필요한 정확한 메모리 양을 제공하는 방법임
     * 전통적인 GPU 아키텍처는 예상보다 많은 메모리를 필요로 하지만, 다이내믹 캐싱은 M3 칩이 다른 작업에 메모리를 더 효율적으로 할당하게 함
     * 다이내믹 캐싱을 통해 필요할 때만 리소스를 할당하여 하드웨어의 더 나은 사용과 GPU의 효율성 및 성능 향상을 이룸
     * 사용자에게는 게임에서 더 나은 성능과 높은 프레임률을 의미함

애플의 사용자 경험 중심 접근

     * 콘솔처럼, 다이내믹 캐싱은 사용자가 게임을 시작할 때의 경험을 개선하기 위한 것임.
     * 'Lies of P'와 'Resident Evil 4'와 같은 3D 게임은 맥북 프로의 배터리에서도 잘 실행됨
     * 다이내믹 캐싱은 실리콘에 내장되어 있어 개발자들은 추가 작업 없이도 이점을 누릴 수 있음
     * M3 칩 세대는 다이내믹 캐싱, 레이 트레이싱, 메시 쉐이딩과 같은 강력한 신기술을 전체 칩 라인에 도입함
     * 이 기술들은 고급 모델에서 시작하여 점차 하위 모델로 확산되는 것이 아니라, 많은 고객에게 동시에 제공됨

애플의 통합 메모리 시스템

     * 애플의 통합 메모리는 M1 칩부터 애플 실리콘의 핵심 부분임
     * GPU와 CPU가 같은 메모리 풀을 사용함으로써 데이터 중복을 방지하고 지연을 줄임
     * 이는 PC에 비해 큰 차이를 만들어냄

MacOS 를 더 게임친화적으로 만들기

  게임 포팅 툴킷 발표

     * 애플은 WWDC에서 게임 포팅 툴킷을 발표함
     * 이 툴킷은 개발자들이 윈도우 게임을 맥에서 쉽게 실행할 수 있게 해줌
     * 게임은 Metal을 최적화해야 하지만, 개발 시간을 단축시키고 간소화함
     * 코지마 프로덕션(Death Stranding: Director’s Cut)과 아나푸르나 인터랙티브 게임즈(Stray) 같은 개발사들이 이 툴킷의 장점을 인정함
     * 이 툴킷은 기존 윈도우 게임을 맥에서 실행해 볼 수 있는 에뮬레이션 환경과 Metal 셰이더 코드 변환을 제공함
     * 게임 포팅 툴킷은 오래된 게임뿐만 아니라 다양한 엔진을 사용한 새로운 게임을 맥으로 가져오는 데 도움을 줌
     * 예를 들어, 블루버 팀은 이 툴킷을 사용하여 The Medium과 Layers of Fear를 맥으로 이식함

  macOS 소노마의 게임 모드

     * macOS 소노마의 게임 모드는 전체 화면으로 게임을 실행할 때 자동으로 활성화됨.
     * 이 모드는 CPU와 GPU 리소스를 게임에 우선적으로 할당하고, 무선 컨트롤러와 오디오 헤드셋의 지연을 줄임
     * 게임 모드는 PC 및 일부 폰과 태블릿에서 찾을 수 있는 고급 설정에 비해 기능이 제한적이지만, 애플이 칩 이상의 게임 경험을 고려하고 있음을 보여줌

  맥 앱 스토어의 게임 배포 개선

     * 애플 마케팅 매니저들은 맥 앱 스토어를 통한 게임 배포 개선에 대한 구체적인 대답을 제공하지 않음
     * 개발자들은 맥 앱 스토어에서 게임을 판매하는 데 어려움을 겪어 왔음
     * 예를 들어, 인디 게임 Firewatch와 Playdate의 제작사인 Panic은 맥 앱 스토어 정책으로 인해 Untitled Goose Game을 맥 앱 스토어에 출시하지 않았음(단, 다른 플랫폼에서는 사용 가능)
     * 애플은 전 세계 개발자 커뮤니티의 성공을 지원하고 앱 스토어를 개선하기 위해 지속적으로 노력하고 있음
     * 맥은 개발자들에게 다양한 배포 옵션을 제공하며, 더 많은 콘텐츠가 모두에게 이득이 됨을 주장함
     * 출판사가 가장 이익이 되는 디지털 스토어에서 게임을 판매하는 것을 지지하나, 애플이 맥 앱 스토어에서 게임을 배포하기 위한 더 나은 유인책을 제공해야 할 필요성이 있음
     * 맥 앱 스토어의 가장 큰 단점은 애플이 판매된 모든 유료 앱, 게임 포함,의 수익의 30%를 가져간다는 것임(스팀도 30%, 에픽은 12%의 수수료를 취함)

  맥 앱 스토어의 이점

     * 유니버설 구매와 크로스-프로그레션은 맥 앱 스토어를 선호하는 이유임
     * 유니버설 구매로 한 번 구매한 게임을 여러 애플 기기에서 플레이할 수 있음(예: 맥에서 'Resident Evil 4'를 구매하면 아이폰이나 아이패드에서 무료로 다운로드 가능)
     * 크로스-프로그레션은 지원되는 게임에서 기기 간 게임 진행 상황을 이어갈 수 있게 해줌
     * 애플은 유니버설 구매나 크로스-프로그레션을 요구하지 않지만, 이를 강제하는 것이 좋을 것임
     * 애플 생태계에 깊숙이 통합된 고객에게는 두 기능 모두 게임 구매에 대한 좋은 유인책이 됨
     * 강력한 맥 하드웨어가 플레이어를 유치하고 이것이 개발자와 출판사를 끌어들여 맥을 활기찬 게임 플랫폼으로 만들기를 바란다면, 유니버설 구매와 크로스-프로그레션을 활용하는 것이 좋음

모든 것이 게임에 달려있음

     * 맥에서는 많은 스팀 게임이 지원되지 않음
     * 애플은 맥에서의 게임 라이브러리 확장을 단순히 '언제'의 문제로 보고 있음
     * 애플은 맥 하드웨어가 충분히 강력하고 개발자에게 필요한 도구를 제공하고 있음
     * 맥OS의 소프트웨어 최적화가 진행 중이며 여러 애플 기기에서 게임을 즐길 수 있는 기능도 제공함
     * 애플은 맥과 iOS 기기의 사용자 기반 확대를 통해 퍼블리셔가 이를 무시하기 어려울 것으로 기대함
     * 맥을 적절한 게임 플랫폼으로 만드는 데 시간이 걸릴 수 있으며, 애플은 천천히 개선을 계속할 계획
          + 애플의 노력이 의미 있는 성과를 거둘 것이라는 보장은 없지만, 미래를 내다볼 수도 없음
          + Mac이 언제쯤 제대로 된 게임 플랫폼이 될 수 있을지에 대한 기한은 없음
          + 내년에 가능할 수도 있고, 5년이 걸릴 수도 있고, 10년이 걸릴 수도 있고, 그 이상이 걸릴 수도 있음
          + 난 Apple이 게임 시장에 빨리 진입하려는 긴박감을 전혀 느끼지 못했고, 단지 그들이 가장 잘하는 일, 즉 계속 반복하고 계속 개선하는 일을 할 것이라는 생각만 들었음
          + 느리고 꾸준하게, 그 복합적인 효과를 나중에 느낄 수 있을 것
     * 물론 애플은 미래의 게임, 파트너십에 대해 구체적인 계획을 공유하지 않음
     * 회사는 맥에서 PC와 콘솔과 동시에 (또는 출시 직후에) 새로운 게임을 출시하려는 진지한 노력을 보이고 있음
     * 맥의 라이브러리 확장을 위해 애플은 개발자와 출판사와의 협력을 강화하거나 게임 제작사를 인수해야 함
     * GTA VI와 같은 게임은 애플에게 게임 분야에서의 우위를 제공할 수 있음
     * 2028년까지 게임 산업의 가치가 $389.70억에 이를 것으로 예상됨
     * 애플이 이 시장을 잃으면 다음 세대의 게임 기회를 놓칠 수 있음
     * 애플은 빠른 속도로 혁신하고 있으며, 이러한 조합이 이전에는 볼 수 없었던 방식으로 이루어지고 있음

   안드로이드 애플 문외한이라 잘 모름요
   테슬라에서 전기로켓나오면 웃음벨..ㅎ

   게임팔아서 먹고 사는 입장에서 보면 실소가 나오는 기사네요
   PC시장에서의 관건은 결국 스팀 점유율인데
   애플실리콘 이후 맥 점유율 추이를 보면 오히려 역성장했죠
   99프로의 게이머는 이미 윈도피씨가 있는게 현실이고
   아무리 충성유저라도 굳이 맥앱스토어에서 게임을 한번 더 사진 않을겁니다
   포팅 툴킷같은 이런 조잡한 방향성을 보면 감나무 밑에서 딱 입벌리고 있는 수준의 노력으로 밖에 안보임

   개인적으로 아이패드 미니6로 지하철에서 클라우드 게임하는건 좋은 경험이었는데
   맥에서는...? 키가 달라서 좋은지 잘 모르겠네요
   롤도 키가 달라져서 조금 불편한 부분이 있더라구요

   게이밍 pc수준을 목표로 하지 않고 아이패드와 같은 휴대용 기기들이 스팀덱과 같은 umpc와 경쟁 붙여보면 해볼만하지 않을까 생각이드네요

   댓글이 많은 글을 볼때마다.. 긱뉴스에 오시는 분들이 꽤 많은데 댓글을 안달고 계셨구나 하는 생각이.. ㅎㅎ

   저는 그냥 ""애플 장비는 영상편집이나 개발용이지 게임은 불가능이야"" 였다면, 이제 ""게임도 얼추 가능해"" 수준으로 갔다가 M4/M5 에 가면 ""게임도 충분히 가능"" 으로 발전해 갈꺼라고 생각해봅니다. 게임하려고 애플 장비를 사는건 전혀 말도 안되는 얘기일듯 하고요.

   게임 애플 마소 모두 좋아하는 사람으로서 아주 재밌는 글이네요. 저는 애플이 일단 애플아케이드 라이브러리 좀 제대로 관리하면 그때야 애플이 게임을 진지하게 생각하기 시작했는지 지켜볼 것 같아요. 할만한 게임이 너무 없어요.

   저는 차라리 넷플릭스를 더 흥미롭게 보고 있습니다. 넷플릭스가 게임 수는 많지 않고 앱스토어랑 겹치는 것도 있지만 게임들을 보면 괜찮은 게임들로 하나씩 라이브러리를 추가하고 있거든요.

   관련해서 Netflix의 다음 행보는 비디오 게임에 투자하는 것 글과
   The Information이 2024년에 넷플릭스가 엔터/게이밍 분야 대규모 인수를 할지도 모른다는 예상도 있네요.

   현실적으로 애플이 원하는 건 게임을 위해 맥을 산다기 보다, 맥을 사는 사람이 게임 경험도 할 수 있도록에 가깝죠. 곧 VR인지 XR인지도 출시할 예정이니까요.
   전반적으로 게임 개발 환경이 단순한 게임조차도 크로스플랫폼을 지원하는 메이저 엔진들이긴 하지만, 여전히 맥 지원이 부족한 실정이네요. 보통 맥을 사용하는 게이머는 콘솔이 따로 있거나 게이밍 PC를 따로 갖고 있는 경우가 많습니다.
   국내에서 맥 버전은 솔직히 인디류 게임 제외하곤 P의 거짓 밖에 못 봤습니다. 판이 많이 커졌으면 좋겠어요.

   32비트 지원종료해서 스팀 때문에 부트캠프 설치한 악몽이 생각납니다

   전 게임 업계는 아닙니다만, 퍼블리셔 입장에서 생각해 보면, 하드웨어 성능에 대한 확신도 없고, 만드는 게 쉽지도 않고, 배포도 쉽지도 않고, 거기다가 스팀만큼 뜯어가는 데 과연 누가 리스크를 감당하면서 뛰어들려고 할지.

   정말 생각이 있다면, 게임사 인수해서 퍼스트파티로 협업하면서 개선을 해나가야 될텐데요. 애플은 원래부터 게임에 관심없던 애들이라 그럴 가능성은 없어 보이네요.

   엑스박스가 번지를 뺏어갔다라.....
   애플 입장이 많이 개입된 기사 같네요

   글쎄요... 다른 분들이 댓글에서 말씀하신것처럼 이미 맥을 쓰는 유저가 게임을 하고싶어하는 경우면 몰라도, 게임을 맥에서 하려고 맥북이나 아이맥을 사는 경우는 거의 없다고 봐야한다고 봅니다.
   애플의 악명높은 지원정책 특성상 콘솔들처럼 한 기기로 5년 10년 게임할수있는것도 아닐건데, 원하는대로 부품을 갈아끼우고 업그레이드 할 수 있는 PC에 비해 맥이 가진 장점이 과연 뭐가 있을까 싶네요.

   현재의 게이밍 시장은 게이머들의 성향에 따라 PC, 스마트폰, 닌텐도 스위치, 플스 정도로 나뉠 수 있는데 만약 맥이 PC 게임시장에 끼어들고 싶은거면 정말 오산이라고 봅니다.
   VR게임 시장에 뛰어드는게 차라리 나을겁니다.

   P구라도 프레임 끓김없이 엄청나게 잘 구동되는 걸 봐서는 가능성 있어요. 의외로 Apple 의 가장 큰 과제는 개발환경이나 플랫폼이 아니라 소비자와 개발자 모두에게 박혀 있는 Mac 에서 게임은 못 한다! 는 인식을 박살 내는 것이라고 생각해요.

   맥의 비싼 가격과 유연하지 못한 램, 디스크 용량 설정 때문에 점유율을 크게 가져갈까 의문이 드네요

   생각보다 맥 게임 경험이 나쁘지 않습니다.
   AAA 게임은 아직 많지 않아도, 발더스게이트3 도 최근 맥을 지원 업데이트를 내놓았죠.
   개발자 중 게이머가 많고, 개발자들이 아무래도 맥을 많이 쓰다보니, 앞으로 꾸준히 괜찮아질 것이라고 봅니다.

   GTA5 가 100GB 가 넘는 것으로 알고있습니다.
   게임을 실행 할 수 있는 환경이 갖춰진다고 해도 램, 하드도 유연성 있게 사용자가 업그레이드 할 수 있어야 점유율을 가지고 올 수 있을거라고 생각합니다.

   게임만을 위해서 M3 MAX를 선택할 사람은 적을 거라고 생각되네요.

   너무 애플 입장의 글로 보입니다.
   우선 헤일로를 애플에서 내 놨다면 xbox때 처럼 성공했을까요? 게임도 같이 망했을 가능성이 더 높아 보입니다.
   xbox같은 기기와 애플의 PC는 진입 장벽이 다릅니다.
   지금도 애플 실리콘 기기들은 고가에 속합니다. 해당 장비가 게임을 잘 지원해 준다 하더라도, 게임을 위해 해당 장비를 살 당위성은 낮아 보입니다. 물론 지금처럼 Mac 장비를 사고, 게임을 위해 추가 장비를 구매할 필요는 없어지는건 있겠지만, 게임을 위해 Mac을 사는 건 쉽지 않아 보입니다. (비슷한 가격대에 다른 노트북 보다는 Mac이 월등한 성능을 낼 순 있겠지만, 비슷한 가격대의 PC로 가 버리면 아직까진 Mac이 매우 많이 밀립니다.)
   여하튼 Mac 에서도 게임이 활성화 된다는 건 매우 좋은 일 같아 보입니다.

   아무리 맥이 좋다곤 하지만 게임 쪽에서는 글쎄..

   게임회사들이 맥을 지원 안하는 이유가 인구 수 문제, API 제공 문제도 있지만, 그 보다 더 큰 문제는 하위호환성을 그렇게 길게 유지 안하는 OS X 기조상 언제 애플의 뜻에 따라 겜을 처음부터 다시 만들어야 하는 수준으로 짜야할지 예측불가능한게 더 클것 같은데요.

   거기다가 애플은 현재 수수료를 많이 가져가는데 이 상황에서 게임회사들이 대형 패키지(AAA)를 애플로 내놓는 건 모험이라고 여길것 같습니다. 수입원이 장기로 계속 뽑아먹는 가챠겜은 가능할지도 모르겠네요

   근데 가챠겜을 통한 장기간 투자/회수의 대표적 모델인 미호요(원신, 붕괴 시리즈)가 얼마전에 엄청 쎈 규제를 얻어맞아서 이것도 어찌될지 모르겠네요

   거기다가 애플 특유의 비싼 하드웨어 가격 정책도 안좋은 점이고요. 실제로 반다이와 협력해서 만들었던 피핀은 세계에서 가장 적게 팔린 게임기 중 하나입니다.

   개소리가 길어 그게 되겠냐
   pc 유저는 모든걸 자기 입맛대로 뜯어고치는데 익숙한데
   그 사람들한테 애플은 너무나도 불편함
"
"https://news.hada.io/topic?id=12713","AMD64에서 16바이트보다 큰 구조체를 전달하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    AMD64에서 16바이트보다 큰 구조체를 전달하지 마세요

코드 속도 향상: AMD64에서 16바이트보다 큰 구조체를 전달하지 마세요

     * Neat 언어의 성능 향상을 위해 배열을 하나의 구조체 파라미터 대신 세 개의 포인터 파라미터로 전달하는 방식으로 변경함.
     * Neat 배열이 D 언어의 배열보다 느렸던 이유는 24바이트 크기의 배열이 16바이트를 초과하여 다른 방식으로 파라미터를 전달하기 때문임.
     * SystemV AMD64 ABI 명세에 따르면, 16바이트를 초과하는 모든 구조체는 포인터를 통해 전달됨.

벤치마크를 통한 문제 확인

     * 벤치마크를 통해 구조체를 전달하는 방식과 개별 필드를 전달하는 방식의 성능 차이를 확인함.
     * 구조체를 전달할 때는 스택에 할당하고 복사하는 과정이 필요하지만, 개별 필드를 전달할 때는 SSE 레지스터를 통해 바로 전달됨.
     * 개별 필드를 전달하는 방식은 구조체를 전달하는 방식에 비해 약 2배 빠른 성능을 보임.

언어 설계자의 선택

     * C API를 호출할 때는 C ABI를 따라야 하지만, 내부적으로 사용되는 고급 타입은 구조체로 표현될 필요가 없음.
     * 언어 설계자는 배열, 튜플, 합 타입 등이 어떻게 전달될지 결정할 수 있음.
     * 16바이트를 초과하는 타입을 개별 필드로 전달하는 것이 성능 향상에 도움이 될 수 있음.

GN⁺의 의견

     * 이 기사는 소프트웨어 최적화에 관심이 있는 개발자들에게 매우 유익함.
     * 특히, 성능에 민감한 애플리케이션을 개발할 때 구조체의 크기와 전달 방식이 중요한 영향을 미칠 수 있음을 보여줌.
     * 언어 설계자나 API 개발자는 이 정보를 활용하여 성능을 개선할 수 있는 기회를 얻을 수 있음.

        Hacker News 의견

     * SysV amd64 ABI 문제와 관련하여, 언어 내부 ABI를 SysV가 아닌 다른 것으로 설정할 수 있음. SysV C 호출자에게 노출되지 않는 한, 원하는 호출 규칙을 사용할 수 있음. NeatLang의 차이점은 LLVM 호출 규칙을 변경하는 것보다 훨씬 복잡해 보이며, 저자는 C 프로그램에 일정한 호출 규칙으로 타입을 노출하고자 할 수도 있음.
     * 인수 전달 비용에 대한 이해가 부족한 경우가 많으며, 이에 대해 작성된 글이 유익함. 예를 들어 Google에서는 24바이트 객체를 값으로 전달하는 관행이 프로파일러에 나타나지 않지만 모든 함수에서 비용이 발생함.
     * x64로 전환할 때, vec3 객체(3xfloat)가 12바이트에서 16바이트로 확장되는 것에 대해 우려하여 그래픽 엔진을 벤치마킹함. 16바이트를 사용하는 것이 8바이트 읽기에 맞춰져 있어 더 빠르다는 것을 발견함. 결과적으로 vec3는 vec4처럼 사용됨. 항상 전체적인 벤치마킹을 수행할 것을 권장함.
     * 레지스터에 미리 로드된 인수가 스택 쓰기보다 성능이 뛰어나며, 스택 조작은 힙 할당된 것보다 더 빠름. 이는 전역 변수가 많은 복잡한 코드가 빠르게 실행되고, 우아한 재귀 함수나 튜플/구조체/리스트 인수가 느린 이유임. 전자는 조밀한 어셈블리 루프로 최적화하기 쉬움.
     * MSVC에서는 8바이트를 초과하는 구조체가 스택에 전달됨. 이는 이식 가능한 코드에서 의존해선 안 될 ABI 세부 사항임. 그러나 자주 호출되지 않는 함수의 경우에는 너무 스트레스 받지 말고, 자주 호출되는 작은 함수의 경우에는 컴파일러가 코드를 인라인할 수 있도록 하여 레지스터에서 인수를 전달하는 것 이상의 유용한 최적화를 활성화함.
     * Windows에서 기본 cdecl 호출 규칙을 사용할 때 8바이트보다 큰 구조체는 레지스터에 전달되지 않음.
     * amd64에서 sysv amd64 ABI를 사용하여 16바이트를 초과하는 구조체를 값으로 전달하고 반환하는 것은 느리지만 코드를 명확하게 만드는 데 종종 가치가 있음. 물론 이 경우에는 해당되지 않지만, 예를 들어 각 C++ 컴파일러, Golang, OCaml, SBCL과 같이 자체 언어 내에서 사용자 정의 ABI를 사용할 수 있음.
     * C++에서는 비원시 타입은 좋은 이유가 없는 한 참조(또는 필요하다면 포인터)로 전달해야 한다는 경험칙이 있음. 이는 ABI 때문이기도 하고 복사 또는 이동 생성자를 피하기 위함임. 성능 최적화를 원한다면 C++에서 주의를 기울여야 할 지루한 저수준 세부 사항임.
     * 기사는 매우 특수한 벤치마크에 대한 링크를 제공하며, 여기서는 Java(JIT)가 C++보다 빠르고 심지어 Scala보다도 빠름. Julia HO가 무엇이며 왜 그렇게 빠른지, Python과 Pypy 사이의 속도 차이가 크며 Pypy를 사용하지 않을 이유가 있는지, 표준이 되어야 하는지에 대한 의문을 제기함.
     * 제공된 예에서는 호출자에게 영향을 주지 않고 “struct Vector” 매개변수 유형을 “const struct Vector &” 참조로 전달하도록 변경하여 수정할 수 있음. 포인터 버그가 존재하는 많은 C++ 코드가 포인터를 불필요하게 사용했으며, 참조로 전달하는 것이 더 쉽고 안전하게 사용할 수 있었음.
"
"https://news.hada.io/topic?id=12718","연방 기관에 따르면 SpaceX가 머스크를 비판한 직원들을 불법 해고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 연방 기관에 따르면 SpaceX가 머스크를 비판한 직원들을 불법 해고

     * 미국 국가노동관계위원회(NLRB)는 SpaceX가 2022년 회사 CEO인 일론 머스크에 대한 비판적인 서한을 작성한 여덟 명의 직원을 부당하게 해고했다고 주장함.
     * 이 편지에서 직원들은 Musk의 소셜 미디어 댓글과 자신에 대한 성희롱 주장을 조롱하는 트윗에 대해 SpaceX가 거리를 둘 것을 요구함.
     * 또한, 직원들은 SpaceX에게 성희롱 정책을 명확히 하고 일관되게 집행할 것을 요구함.
     * NLRB는 SpaceX의 Gwynne Shotwell 사장이 이 편지의 유포를 불법적으로 제한했다고 주장하며, 다른 임원들과 관리자들도 비슷한 위반 행위에 연루되어 있음.
     * 해고된 직원 중 한 명인 Paige Holland-Thielen은 SpaceX가 직원들을 소모품처럼 대하고, 토론을 억압한다고 비판함
     * Tesla는 노동 조합 활동에 참여한 직원을 해고한 혐의로 오랜 기간 법적 분쟁을 겪고 있음.
     * 2021년에 노동 관계 위원회는 해고가 불법이라고 판결하고, 해당 직원을 복직시키고 밀린 임금을 지급하라고 명령함.
     * 이 결정은 연방 법원에서도 유지되었으나, Tesla는 이 사건에 대해 추가로 항소 중임.
     * 미 법무부는 SpaceX가 채용 과정에서 망명 신청자와 난민을 차별했다고 주장하며 8월에 소송을 제기함
          + 그러나 법원이 이 사건의 진행을 막는 가처분 명령을 내림.
     * 2021년 12월, 전 SpaceX 직원이 동료들에 의한 성희롱과 추행 사례를 공개함.
          + 이에 대한 반응으로 회사는 성희롱 정책에 대한 감사를 시작함.
          + Business Insider는 SpaceX가 2018년 Musk의 성적 제안에 대한 주장을 해결하기 위해 25만 달러를 지불했다고 보도함.
          + 이후 직원들은 회사 내 성희롱에 대한 관용을 줄이기 위한 아이디어를 모으고 편지를 작성함.
"
"https://news.hada.io/topic?id=12689","Show GN: 출근길 1분, 빠른 AI 소식 뉴스레터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 출근길 1분, 빠른 AI 소식 뉴스레터

   안녕하세요! 저는 기술 뉴스 읽기가 취미인 학생입니다.
   새해를 맞아 매일 제가 본 AI 소식 중 흥미로운 것들을 모은 뉴스레터를 만들었습니다.
   AI 서비스와, 기업, 연구 관련해서 최신 소식을 접하고 싶다면 저희 뉴스레터에 방문해주세요.

   제 취미생활의 일부인 GeekNews에 늘 감사드립니다.

   자주 사용하시는 기술 뉴스들을 추천해주실 수 있나요? ㅎㅎ

   안녕하세요! https://news.hada.io/topic?id=11965 여기서 있는 뉴스레터들을 쭉 봅니다.
   서비스 소식은 특히 ben's bite 가 괜찮습니다.
   그외에도 트위터에서 이것저것 팔로우하면서 뉴스를 가져오고있습니다!

   오..
"
"https://news.hada.io/topic?id=12744","NHS, 계약 위반 가능성에 대해 Palantir 인플루언서 캠페인 조사 착수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              NHS, 계약 위반 가능성에 대해 Palantir 인플루언서 캠페인 조사 착수

NHS, Palantir의 영향력 캠페인 조사

     * NHS England가 Palantir의 Federated Data Platform 운영 계약 위반 여부를 조사 중임.
     * Palantir는 Good Law Project를 겨냥한 영향력 캠페인을 비밀리에 시작함.
     * Good Law Project는 법을 사용하여 더 나은 세상을 만드는 비영리 캠페인 단체임.

Palantir의 계약 위반 가능성

     * Palantir는 NHS England의 사전 승인 없이 Federated Data Platform 계약 홍보 및 Good Law Project에 대한 비방 캠페인을 벌임.
     * NHS England는 Palantir가 계약 조건을 위반했는지 조사할 것이라고 Bloomberg UK에 확인함.

캠페인 진행 방식

     * Palantir는 보수당 연계 PR 기관인 Topham Guerin과 마케팅 기관 Disrupt를 통해 소셜 미디어 영향력자들에게 접근함.
     * 영향력자들에게 Palantir를 언급하지 말고 참여 대가로 원하는 금액을 물어봄.

계약서 공개 및 내용

     * Federated Data Platform 계약서는 크리스마스 전 마지막 근무일에 공개됨.
     * 계약서의 많은 부분이 삭제되었으나, 'Publicity and Branding' 섹션에서 NHS England의 사전 서면 동의 없이는 NHS의 이름이나 브랜드를 사용할 수 없음을 명시함.

Palantir의 반응

     * Palantir는 캠페인이 ""탐색적 프로젝트""였기 때문에 NHS England와 상의할 필요가 없었다고 주장함.
     * Palantir의 영국 및 유럽 부사장 Louis Mosely는 프로젝트를 추진하지 않기로 결정했으며, 따라서 NHS England와 논의하지 않았다고 밝힘.

Palantir의 행동에 대한 비판

     * Palantir는 계약 체결 후 몇 주 만에 비밀리에 유료 비방 캠페인을 진행하고 계약 조건을 위반한 것으로 보임.
     * Good Law Project의 집행 이사 Jo Maugham은 Palantir가 NHS와의 중요한 계약을 맡을 수 있는 회사가 아니라고 비판함.

Good Law Project의 입장

     * Good Law Project는 Palantir과 정부에 위협이 되는 일을 하기 때문에 공격받고 있음.
     * 이 단체는 영국 전역의 기부자들로부터 지원을 받아 활동을 이어감.

GN⁺의 의견

     * 이 기사는 데이터 보호와 투명성에 대한 중요성을 강조함. NHS와 같은 공공 기관의 계약은 민감한 개인 정보를 다루기 때문에 특히 중요함.
     * Palantir의 행동은 기업 윤리와 계약 준수의 중요성을 보여줌. 계약 조건을 위반하고 비방 캠페인을 벌인 것은 신뢰성에 큰 타격을 줄 수 있음.
     * Good Law Project와 같은 비영리 단체의 역할은 사회적 감시 기능을 수행하여 기업과 정부의 행동을 감시하고, 필요한 경우 법적 조치를 취함으로써 공공의 이익을 보호하는 데 중요함.

        Hacker News 의견

     *
          + NHS가 대규모 데이터 플랫폼이 필요한데 왜 굳이 스파이 기술 회사인 팔란티어를 고집하는지 이해할 수 없음. 다른 컨설팅 회사들도 많은데, 왜 꼭 문제가 있는 팔란티어여야 하는지 의문. NHS가 직접 구축하는 것이 이상적이지만, 정부 기관처럼 느리고 비대해져서 혁신이 어려움.*
          + NHS의 대규모 데이터 플랫폼 구축에 팔란티어 선택에 대한 의문 제기
          + 다른 컨설팅 회사들도 있음에도 팔란티어를 고집하는 이유에 대한 비판
          + 정부 기관의 비효율성과 혁신 부족에 대한 지적
     *
          + 팔란티어 전 직원으로서, 팔란티어가 영향력을 얻기 위해 결정권자를 특정하여 그들을 겨냥한 전략을 취함. 예를 들어, 어떤 사람이 매일 아침 기차로 출근하며 신문을 읽는다면, 그들이 좋아하는 신문에 전면 광고를 실어 그 사람의 눈에 띄게 함. 이런 정보는 스파이 활동을 통해 얻음.*
          + 팔란티어의 영향력 획득 전략에 대한 내부자의 설명
          + 결정권자에 대한 맞춤형 마케팅 전략 사용
          + 정보 수집 방법으로 스파이 활동 언급
     *
          + 팔란티어의 영국 및 유럽 부사장인 루이스 모슬리가 오스왈드와 맥스 모슬리와 관련이 있다는 점을 언급함.*
          + 팔란티어 임원의 가문과 역사적 인물과의 관계 언급
     *
          + 굿로 프로젝트가 긍정적인 결과를 얻는 데 있어 좋지 않은 기록을 가지고 있음을 지적함.*
          + 굿로 프로젝트의 성과에 대한 비판적 의견
     *
          + 우버의 칼라닉 시절이나 오라클 같은 다른 회사들도 악당처럼 행동하는 것 같다는 의견 제시.*
          + 특정 기업들의 부정적인 행동에 대한 비판적 관점 제시
     *
          + 이러한 상황에 전혀 놀라지 않는다는 반응.*
          + 현재 상황에 대한 무감각 또는 예상된 반응 표현
     *
          + [삭제된 댓글]*
          + 특정 댓글이 삭제됨을 표시
     *
          + [삭제된 댓글]*
          + 또 다른 댓글이 삭제됨을 표시
"
"https://news.hada.io/topic?id=12674","Maestro - 리눅스 호환 가능한 Rust 기반 커널 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Maestro - 리눅스 호환 가능한 Rust 기반 커널

     * Maestro는 Rust 언어로 처음부터 작성된 Unix와 유사한 커널 및 운영 체제임.
     * 처음에는 C 언어로 구현되었으나, 코드베이스를 깨끗하게 유지하기 어려워지자 Rust로 전환함.
     * Rust는 프로젝트를 처음부터 다시 시작하고, C로 Linux와 유사한 커널을 작성하는 것보다 혁신적이며, Rust의 안전성을 활용하여 커널 프로그래밍의 어려움을 줄이는 데 도움이 됨.

프로젝트의 현재 상태

     * Maestro는 현재 x86(32비트) 아키텍처만 지원하는 모놀리식 커널임.
     * 작성 시점에서 Linux 시스템 호출의 약 31%에 해당하는 135개가 대략 구현되어 있음.
     * OS에는 커널 외에 부팅 시스템 및 데몬 관리자인 Solfège, 시스템 유틸리티 명령어인 maestro-utils, 패키지 관리자인 blimp 등의 구성 요소가 있음.
     * musl(C 표준 라이브러리), bash, 일부 GNU coreutils 명령어, neofetch(패치된 버전) 등의 타사 소프트웨어가 OS에서 작동하는 것으로 테스트됨.

직접 테스트해보세요!

     * OS는 아직 개발 초기 단계이며 매우 불안정하므로 중요한 데이터가 있는 기계에 설치하는 것은 권장하지 않음.
     * QEMU, VMWare, VirtualBox에서 주로 테스트됨.
     * OS를 설치할 수 있는 두 가지 방법: 사전 빌드된 .iso 파일 다운로드 또는 ISO 직접 빌드.
     * 설치된 패키지는 디스크 대신 RAM(initramsfs)에 저장되므로 충분한 RAM(1GB 이상)이 필요함.

이 블로그에 대하여

     * 이 블로그의 목적은 OS 생성 방법에 대한 튜토리얼을 작성하는 것이 아니라, 더 고급 주제를 탐구하고, 문제 해결 방법을 공유하며, 컴퓨터와 운영 체제, 인터넷 등의 작동 방식을 발견하는 것임.
     * osdev.org와 Philipp Oppermann의 블로그를 특히 추천함.

다음에 올 것

     * 코드베이스 정리와 성능 최적화가 필요함.
     * 메모리 누수 수정과 성능 최적화는 블로그 기사의 주제가 될 수 있음.
     * 패키지 관리자가 OS에서 완전히 작동하도록 하는 것이 다음 목표임.
     * 네트워크 지원과 공유 라이브러리 지원이 필요함.

도움이 되는 방법

     * Github 저장소에 별표를 남기고, 뉴스레터 구독, RSS 피드 시청, Discord 참여를 통해 연락을 유지할 수 있음.

GN⁺의 의견

     * Maestro 프로젝트는 Rust 언어로 작성된 Unix와 유사한 운영 체제로, 커널 개발의 안전성과 혁신성을 추구하는 점이 중요함.
     * 이 프로젝트는 오픈 소스 커뮤니티에 기여하고자 하는 개발자들에게 흥미로운 기회를 제공하며, 실제 하드웨어와 소프트웨어의 상호작용을 이해하는 데 도움이 될 수 있음.
     * Rust를 사용한 시스템 프로그래밍의 장점과 한계를 실제로 경험하고자 하는 초급 소프트웨어 엔지니어에게 유익한 학습 자료가 될 수 있음.

        Hacker News 의견

     * 프로젝트에 대한 지지에 감사함
          + 이 프로젝트는 많은 노력이 들어갔으며, 개발자에게 큰 의미가 있음.
          + 현재 웹사이트가 매우 느리거나 다운됨. 예상치 못한 많은 트래픽이 있으며, DoS 공격이 의심됨.
          + 집에 돌아가면 사이트 개선을 시도할 예정임. 현재는 일 때문에 많은 주의를 기울일 수 없음.
          + 불편을 드려 죄송하지만 프로젝트를 평가해준 것에 대해 기쁨.
     * 멋진 소규모 프로젝트에 대한 의견
          + 리눅스의 시스템 호출의 3분의 1도 구현하지 않고도 얼마나 멀리 부팅할 수 있는지 놀라움.
          + 아직 구현되지 않은 시스템 호출이 더 복잡할 것으로 추측됨.
          + 예를 들어, TTY 계층이 현재 기본적으로 보임. 이를 올바르게 구현하는 것은 많은 작업이 될 것임.
          + 따라서 Maestro가 다음 3년 이내에 리눅스 애플리케이션을 실행할 것으로 기대하지 말 것.
     * 보안/침투 테스트에 대한 의견
          + 프로젝트가 Rust로 개발되었기 때문에, 해커가 취약점을 찾을 수 있는지 보안 테스트를 보고 싶음.
     * Kerla 프로젝트에 대한 언급
          + Kerla(리눅스 ABI 호환을 목표로 하는 Rust로 작성된 단일 커널)도 있었지만, 몇 년 동안 활동이 없었음.
     * C 언어 사용의 단점과 OS 개발의 어려움에 대한 의견
          + 대부분의 단점과 어려움은 디버깅에 있음.
          + Rust로 전환함으로써 특정 메모리 오류 클래스가 제거되었지만, 디버깅은 여전히 어려운지, 아니면 전환 후 디버깅이 덜 필요해져서 더 쉬워진 것인지 궁금함.
     * Kerla 프로젝트의 중단에 대한 언급
          + 이미 시도되었던 프로젝트인 Kerla가 중단되었음을 언급.
     * 컴퓨터의 복잡성에 대한 의견
          + 컴퓨터는 인류가 만든 가장 복잡한 도구 중 하나임.
     * 기술 부채 상환에 대한 조언
          + 학교 프로젝트로 시작했을 때는 시간 제약으로 인해 모퉁이를 자르기도 했지만, 이제 기술 부채를 상환할 시간임을 인지하고 이러한 마인드셋을 유지할 것을 권함.
     * Gource에 대한 관심
          + 저자가 기여 비디오를 만드는 데 사용한 Gource라는 도구에 대해 매우 흥미로움. 이전에 비슷한 아이디어를 생각해본 적이 있지만, 원래 아이디어는 없는 것 같음.
     * 커널 구축에 대한 관심
          + 학습 목적으로 커널을 구축하는 아이디어를 매우 좋아함. 커널/OS 전반에 대해 이해하는 데 사용된 자료에 대해 궁금함.
"
"https://news.hada.io/topic?id=12735","애플, 앱 스토어에서 Hey의 Calendar 앱 리젝 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     애플, 앱 스토어에서 Hey의 Calendar 앱 리젝

     * 이메일 서비스 Hey가 새로운 캘린더 기능인 HEY Calendar를 별도의 앱으로 만들었으나 앱스토어 심사에서 리젝됨
     * 애플은 제출 후 19일을 심사하는 데 소요하며, 1월 2일로 계획된 출시일을 놓치게 했음
     * 기존 계정으로 로그인해야 하는 기능 때문에 ""아무것도 하지 않는다며"" 무료 앱을 거부
     * 하지만, 앱 스토어에는 기존 서비스 계정이 필요한 유명한 앱들이 많음.
          + Salesforce, JPMorgan, Netflix, Google Calendar 등이 로그인 화면으로 사용자를 맞이함
          + 애플 앱 스토어 가이드라인에는 기존 계정이 필요한 앱에 대한 금지 규정이 없음

애플의 일관성 없는 규칙 적용

     * 애플은 iCloud와 같은 전략을 사용하면서도 자신들의 규칙에 일관성 없이 행동함
     * 애플은 자신들의 규칙을 겉으로만 준수하며, 대기업에게는 예외를 허용하고, 자신들에게 유리할 때 새로운 규칙을 만듦
     * 애플의 서비스 수익은 가장 빠르게 성장하는 부문이며, 앱 경제에서 30%의 수수료를 취하는 것이 가장 쉬운 수익임

경쟁 당국의 행동 촉구

     * HEY는 애플에게 30%의 '보호 비용'을 지불하고 좌시하지 않을 것임
     * 디지털 시장 법안과 미국 법무부의 소송이 경쟁 당국의 행동을 촉구할 수 있음
     * 과거 미국 법무부가 마이크로소프트를 고소했을 때 시장 점유에 큰 타격을 입혔고, 구글과 애플의 부상을 가져옴

GN⁺의 의견

     * 앱 스토어의 독점적 지배와 일관성 없는 규칙 적용은 개발자와 소비자 모두에게 중요한 문제임. 이는 혁신과 공정한 경쟁을 저해할 수 있음.
     * HEY와 같은 사례는 앱 스토어 정책의 변화를 촉구하는 중요한 사례로, 디지털 시장의 건강한 생태계 유지에 기여할 수 있음.
     * 유럽연합의 디지털 시장 법안과 미국 법무부의 소송은 앱 스토어의 독점적 행태에 변화를 가져올 수 있는 중요한 기회로, 이는 기술 산업에 큰 영향을 미칠 수 있음.

   본 건과 같은 경우면 구글도 보통 리젝합니다.
   담당자가 좀 안일하게 대응한 게 아닐까 생각해요
   저는 B2B 내부 사용 앱을 심사받을 때, 테스트 계정을 참고사항에 같이 제출한 기억이 납니다.
   앱만 덩그러니 주어진 상황에서 로그인이 안 되면 일단 리젝먹고 들어갑니다.
   다만 일기 앱은 연말~새해가 가장 대목인데 안타깝네요..

   해커뉴스 댓글에도 있지만, 이건 솔직히 Hey가 너무 앱스토어를 안일하게 대응한거 같기도 합니다.
   ""다른 앱들은 다 그러는데요?"" 는 애플이 들어주지도 않고요. 캘린더를 비 로그인 사용자에게 일부 열어주거나 데모로라도 쓸수 있게 해주는게 맞지 않나 싶어요.
   (DHH는 뭔가 이상한 싸움닭 같아요..)

        Hacker News 의견

     * ""앱스토어 리뷰 가이드라인에서 언론에 나쁜 소리를 하면 도움이 되지 않는다고 했지만, 실제로는 도움이 될 때가 많다.""
          + 앱스토어에 수십 개의 앱을 배포한 경험이 있는 사람으로서, 휴일 시즌에는 처음 앱을 제출하지 말고, 애플 리뷰어들을 위한 무료 계정을 추가하는 것이 좋다는 조언.
          + 앱스토어 모델이 사라지고, 윈도우나 맥OS처럼 여러 출처에서 폰에 앱을 설치하는 것이 일반적이 되기를 기대한다는 의견.
          + 앱에 데모 기능을 추가하면 리뷰어가 로그인 화면을 넘어 앱을 탐색할 수 있기 때문에 허용된다는 경험담. 이는 호기심 많은 사용자들에게도 앱을 미리 볼 수 있는 기회를 제공한다고 함.
          + ""꿈만 꾸는 것이 아니라 싸워야 한다. 아무것도 하지 않고서는 얻을 수 있는 것이 없다.""라는 격언과 함께, HEY 캘린더가 HEY 이메일 없이는 아무런 가치가 없다는 의견.
          + 애플이 독점에 대해 전 세계적으로 조사를 받고 있는 상황에서, HEY 앱을 다시 거절하는 것은 경쟁 당국이 행동에 나서도록 만들 것이라는 희망적인 의견.
     * 애플이 ""아무것도 하지 않는다""는 이유로 무료 동반 앱을 거절했다는 비판. 이미 많은 앱들이 로그인을 해야만 기능을 사용할 수 있음에도 불구하고, 이러한 거절은 불합리하다는 지적.
          + HEY 앱의 거절 이유에 대해 다른 이유가 있을 수도 있으며, DHH(HEY의 창립자)가 팀 쿡과 만나야 할 필요가 있을지도 모른다는 추측.
          + 앱 제출 후 리뷰 기간이 길어져서 출시일을 놓친 것은 iOS 앱스토어에 대한 경험이 없음을 나타낸다는 비판. 애플의 요구 사항에 따라 리뷰를 위한 자격 증명을 제공해야 하며, 이러한 자격 증명은 작동해야 한다는 점을 강조.
          + HEY가 과거에 비슷한 경험을 했음에도 불구하고, 이번 사건은 경험 부족으로 보인다는 의견. 앱스토어에 출시 경험이 있는 소프트웨어 엔지니어를 고용할 것을 제안.
     * DHH가 자신의 앱이 차별받고 있는 문제에 집중하기보다는 애플의 30% 수수료 문제를 계속 언급하고 있다는 비판. 100만 달러 이하의 수익을 내는 개발자는 15%의 수수료만 지불하고, HEY와 같은 구독 서비스를 제공하는 경우 첫 해 이후에는 15%만 지불한다는 사실을 지적. DHH가 차별 문제에만 집중해야 한다고 조언하며, 애플이 앱스토어에서 독점적 지위를 갖고 있지 않다는 법원의 판결을 언급.
"
"https://news.hada.io/topic?id=12660","34년 만에 누군가 'Tetris'를 꺾다 [동영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     34년 만에 누군가 'Tetris'를 꺾다 [동영상]

        Hacker News 의견

     * 최근 몇 년간 테트리스의 변화가 극적임
          + 전통적인 DAS 방식으로 테트리스를 즐기던 사용자가 최신 기술인 롤링을 배우지 않음
          + 젊은 선수들이 규칙을 바꾸며 전통적인 선수들을 압도함
          + CTWC에서는 더 이상 DAS를 사용하는 선수가 없으며, 유명한 DAS 플레이어였던 Jonas도 태핑으로 전환함
          + Jonas Neubauer의 사망을 애도하며, 그가 테트리스 붐을 이끌었던 인물로 기억됨
     * 터미널을 통해 싱글 플레이어 또는 멀티플레이어로 테트리스를 즐길 수 있음
          + SSH를 통해 playnetris.com에 접속하여 테트리스 게임 가능
     * 2020년에 테트리스를 클리어한 경험을 공유함
          + 다른 방법을 통해 테트리스를 클리어한 사람의 이야기
     * 충분한 연습으로 복잡한 근육 움직임을 놀라울 정도로 빠르게 수행할 수 있는 사람들의 능력에 대한 감탄
          + 놀라운 성취에 대한 찬사
     * 테트리스에 대한 열정이 문명 발전에 기여하는 수준의 괴짜 정신을 보여줌
          + 영감을 주는 비디오에 대한 평가
     * NES 테트리스 게임 크래시를 기념하는 글에 대한 언급
          + 관련 기사와 댓글 링크 제공
     * 롤링 기술 발명 이후 테트리스의 변화 속도가 빠름
          + 과거 Joseph의 기록이 오래 지속될 것으로 예상했으나, 이제는 구식으로 여겨짐
     * 테트리스 게임을 클리어하는 것은 레벨 255를 이기고 0으로 롤오버하는 것으로 정의함
          + 게임 크래시를 피하면서 해당 레벨을 클리어하는 것을 목표로 함
     * 윈도우즈 엔터테인먼트 팩에 포함된 테트리스 버전에 대한 경험담 공유
          + 점수가 32,767점을 넘으면 음수로 롤오버되는 점수 시스템에 대한 설명
     * 90년대부터 테트리스에 빠져 다양한 플랫폼에서 즐겼으며, VR 게임 개발을 위해 3D 테트리스 버전을 작업 중임
          + 자신의 3D 테트리스 개발 프로젝트에 대한 소개
"
"https://news.hada.io/topic?id=12640","디즈니의 초기 미키 마우스, 미국 저작권 만료로 공공 도메인에 진입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 디즈니의 초기 미키 마우스, 미국 저작권 만료로 공공 도메인에 진입

     * 디즈니의 초기 미키와 미니 마우스, 미국 저작권 만료로 공공 도메인에 진입
          + 1928년 단편 애니메이션인 '스팀보트 윌리'는 디즈니의 운명을 바꾸고 영화 역사에 큰 획을 그은 작품으로, 초기 무성 버전의 미키와 미니 마우스가 등장함.
          + 미국에서 디즈니의 저작권이 만료되어 이제 미키와 미니의 초기 버전을 누구나 허가나 비용 없이 재작업하고 사용할 수 있음.
          + 그러나 디즈니는 미키 마우스의 더 현대적인 버전들은 여전히 저작권 보호를 받고 있다고 경고함.
     * 저작권 만료로 공공 도메인에 진입한 다른 작품들
          + 미국 저작권법에 따라 캐릭터의 저작권은 95년간 유지되므로, '스팀보트 윌리'에 등장하는 캐릭터들은 2024년 1월 1일부로 공공 도메인에 진입함.
          + 찰리 채플린의 '더 서커스', A.A. 밀른의 '푸우 코너의 집', 버지니아 울프의 '올랜도', D.H. 로렌스의 '레이디 채터리의 연인' 등 1928년의 유명한 영화, 책, 음악, 캐릭터들도 미국 공공 도메인에 포함됨.
     * '깊은 상징성'을 지닌 순간
          + 디즈니가 자사 캐릭터를 보호하기 위해 노력한 결과, 관련 법률이 '미키 마우스 보호법'이라고 불리게 됨.
          + 듀크 대학 공공 도메인 연구 센터의 제니퍼 젠킨스 디렉터는 이 순간이 '깊은 상징성을 지니며 오랫동안 기다려온' 이정표라고 언급함.
          + 디즈니는 미키 마우스를 브랜드 식별자와 기업 마스코트로서 별도의 상표권을 가지고 있어, 이를 사용하는 데에는 여전히 제한이 있음.
     * 디즈니의 대응
          + 디즈니는 미키 마우스가 1928년 첫 등장 이후 회사와 연관되어 왔으며, '스팀보트 윌리' 영화의 저작권 만료가 이를 바꾸지 않을 것이라고 밝힘.
          + '스팀보트 윌리'의 저작권 만료로 현대적인 버전의 미키는 영향을 받지 않으며, 미키는 계속해서 월트 디즈니 컴퍼니의 글로벌 대사로서 중요한 역할을 할 것임.
          + 디즈니는 미키와 다른 상징적인 캐릭터들의 무단 사용으로 인한 소비자 혼란을 방지하기 위해 노력할 것이라고 덧붙임.

GN⁺의 의견

     * 이 기사에서 가장 중요한 점은 저작권 만료로 인해 미키와 미니 마우스의 초기 버전이 공공 도메인에 진입했다는 것이다. 이는 창작자들에게 새로운 기회를 제공하고, 디즈니의 상징적인 캐릭터들을 다양한 방식으로 재해석하고 활용할 수 있는 길을 열어준다.
     * 또한, 디즈니가 상표권을 통해 여전히 미키 마우스의 이미지를 어느 정도 통제하고 있다는 점도 주목할 만하다. 이는 브랜드의 가치를 보호하고 소비자 혼란을 방지하기 위한 전략으로 볼 수 있다.
     * 이 글은 디즈니와 같은 대형 엔터테인먼트 기업이 저작권과 상표권을 어떻게 관리하고, 이러한 법적 요소가 창작 산업에 어떤 영향을 미치는지에 대한 흥미로운 사례를 제공한다.

   미국 저작권법에 Disney가 끼친 영향

   법 개정을 거듭하다 드디어 Public Domain이 되었네요.

        Hacker News 의견

     * 호빗과 반지의 제왕이 뉴질랜드, 이집트 등 몇몇 국가에서 저작권 만료로 공공 도메인에 진입함.
          + 캐나다 정부가 지난해 막판에 20년 저작권 연장 법안에 서명하지 않았다면 캐나다에서도 저작권이 만료되었을 것임.
     * 1928년에 나온 Steamboat Willie과 동일한 해에 나온 장갑을 낀 미키의 컬러 포스터가 있다고 함.
          + 이것이 장갑을 낀 컬러 미키도 공공 도메인에 속하는지 의문을 제기함.
          + 링크: 미키 마우스 포스터 관련 기사
     * 디즈니는 수십 년 동안 백설공주, 미녀와 야수, 신데렐라 등 공공 도메인 작품을 사용해왔음.
          + 디즈니도 이제 공공 도메인에 기여할 때가 됐다는 의견.
     * Corridor가 몇 시간 전에 원본 만화를 게시함.
          + 링크: 원본 만화 영상
     * 디즈니는 대부분의 작품 시작 부분에서 '스팀보트 윌리' 클립을 사용함.
          + 디즈니가 이를 상표로 사용하려 하고, 저작권법 대신 상표법을 이용해 스팀보트 윌리의 공공 사용을 막으려는 것인지 의문.
     * 미국 저작권법에 따르면 캐릭터에 대한 권리는 95년간 유지될 수 있음.
          + 약 95년 전에 영화 및 녹음 산업이 시작됨.
          + 이후 모든 녹음된 엔터테인먼트와 극장 공연이 문화에 '고정'되어 플라톤, 성경, 셰익스피어처럼 문화적 기준점이 됨.
          + 이제 미키 마우스 등이 공공 도메인에 진입하면서 우리의 공통 유산의 불가피한 부분이 되고 있음.
     * 위키미디어 커먼즈의 '오늘의 미디어'도 관련이 있음.
          + 링크: 위키미디어 커먼즈 메인 페이지
     * 관련 기사들:
          + ""2024년 공공 도메인의 날"" - 링크: 해커뉴스 기사 - 2023년 12월 (15개의 댓글)
          + ""원래 미키 마우스 인격의 저작권이 2024년 1월 1일 만료됨"" - 링크: 해커뉴스 기사 - 2023년 12월 (10개의 댓글)
          + ""미키 마우스가 공공 도메인에 진입: '드디어 일어나고 있음'"" - 링크: 해커뉴스 기사 - 2023년 12월 (7개의 댓글)
          + ""미키, 디즈니, 그리고 공공 도메인: 95년간의 삼각 관계"" - 링크: 해커뉴스 기사 - 2023년 12월 (208개의 댓글)
          + ""2024년 공공 도메인의 날이 다가옴: 알아야 할 것들"" - 링크: 해커뉴스 기사 - 2023년 12월 (6개의 댓글)
          + ""2024년에 미키 마우스 저작권 만료"" - 링크: 해커뉴스 기사 - 2023년 7월 (64개의 댓글)
     * 스팀보트 윌리 버전의 미키 마우스만이 공공 도메인에 진입하는 것으로 기억됨.
     * BBC는 사용하는 스냅샷의 소유권을 디즈니가 가지고 있다고 보고함.
          + 이것이 올바른 행동이지만, 이미지가 공공 도메인에 속하게 되면서 디즈니가 여전히 소유자인지 여부에 대한 의문.
"
"https://news.hada.io/topic?id=12645","Meshtastic: 오픈 소스 기반의 오프-그리드, 분산형 메시 네트워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Meshtastic: 오픈 소스 기반의 오프-그리드, 분산형 메시 네트워크

Meshtastic 프로젝트 소개

     * Meshtastic은 오픈 소스, 오프 그리드, 분산형 메시 네트워크로, 저렴하고 저전력 기기에서 작동하도록 설계됨.
     * 이 프로젝트는 안드로이드, iOS, 맥, 웹 브라우저에서 사용 가능한 애플리케이션을 통해 연결될 수 있음.
     * Meshtastic LLC의 등록 상표이며, 법적 정보를 제공함.

Meshtastic 시작하기

     * 하드웨어 구매: 라디오, 배터리, 케이스, 안테나(대부분의 기기에는 안테나가 포함되어 있으나, 일부 공급업체의 기본 안테나 품질은 다양함).
     * 노드 플래시 및 설정: Meshtastic 웹 기반 플래셔 및 클라이언트가 펌웨어 플래싱과 설정 구성을 돕음.
     * 노드에 연결: 안드로이드, iOS, 맥, 웹 브라우저용 애플리케이션을 통해 노드에 연결 가능.

GN⁺의 의견

     * Meshtastic 프로젝트는 저렴한 비용으로 자체적인 통신 네트워크를 구축하고자 하는 사용자들에게 매우 유용함.
     * 이 프로젝트는 재난 상황이나 원격 지역에서의 통신과 같이 전통적인 통신망이 불가능한 상황에서 특히 중요할 수 있음.
     * 오픈 소스 커뮤니티에 기반을 둔 이 프로젝트는 지속적인 개선과 혁신을 통해 더 많은 기능과 안정성을 제공할 잠재력을 가지고 있음.

        Hacker News 의견

     * 관련 링크: freakwan GitHub
          + 저자가 작성한 댓글로, Meshtastic과 유사한 개념이지만, 프로토콜 수준에서 더 명확하고 문서화된 선택을 하고자 했으며, 해킹 및 적용이 더 간단한 구현을 목표로 함.
          + 이탈리아어를 이해한다면 관련 강연 링크도 제공됨.
     * 2023년 버닝맨 페스티벌에서 사용 경험
          + 버닝맨은 장비에 혹독하고 무선 주파수 환경이 바쁜 곳이지만, 해당 기술은 신뢰성이 높고 사용자 경험이 좋았다고 함.
     * LoRa/Meshtastic 기술에 대한 개인적 시도
          + LoRa/Meshtastic 장비를 구입하고 APRS를 이용해 위치를 기록하고 지도에 표시하는 방법을 연구했지만, APRS iGate 설정 및 aprs.fi에서 위치 확인하는 과정보다 어려웠음.
          + 다시 시도하고 싶지만, 시작하기 위한 좋은 안내서가 필요하다고 느낌.
     * 메시 네트워크의 한계에 대한 지적
          + 해당 기술이 80개 노드까지만 확장 가능하다고 하여, 이미 존재하는 메시에 참여하기보다는 직접 만들어야 하며, 알고 있는 사람들만 참여할 수 있음.
          + 인터넷을 대체할 수 있는 글로벌 메시 네트워크를 원함.
     * 2020년경 개발된 Cellsol 소개
          + Meshtastic과 disasterradio 패킷을 존중하는 Cellsol이라는 기술을 개발함.
     * 안드로이드 기반 오픈 소스 메시 네트워크에 대한 질문
          + Wifi나 Bluetooth를 기반으로 한 안드로이드 메시 네트워크가 존재하는지, 과거 시위에서 사용된 적이 있는지에 대한 의문 제기.
          + 아직 실용적인 솔루션이 없는지 궁금해함.
     * 안드로이드 앱 사용에 대한 실제 경험 공유
          + 매우 열정적인 영국인이 traceroute 기능을 시연하는 안드로이드 앱 사용 경험을 공유하는 YouTube 링크 제공.
     * 블루투스를 이용한 메시 네트워크 구축 가능성에 대한 논의
          + 대학 캠퍼스와 같은 붐비는 장소에서 참여하는 스마트폰을 이용해 메시 네트워크를 만들고, 캠퍼스 내 메신저를 운영하는 것이 가능한지에 대한 질문.
     * 과거 사용되었던 FireChat에 대한 언급
          + 현재는 사용되지 않는 FireChat에 대한 링크 공유.
     * 무선 마을/도시 규모 IP 네트워크 구축에 대한 효율성 비판
          + 전방향 안테나를 사용하는 하프 더플렉스/시분할 이중(TDD) 메시 라디오 시스템은 무선 네트워크를 구축하는 가장 비효율적인 방법 중 하나임.
          + 전방향 안테나는 360도의 잡음을 수집하며, 특정 노드로 패킷을 전송할 때 RF 신호의 대부분이 원하지 않는 방향으로 퍼짐.
          + 예산이 적은 경우에도, 포인트 투 포인트(주로 패러볼릭 리플렉터 기반) 802.11ac/ax 라디오 시스템을 이용한 L2 이더넷 브릿지 구축을 고려해야 함.
          + LoRA 기술은 고정된 링크가 필요한 경우, 특히 2.4GHz나 5.xGHz 대역보다 낮은 VHF/UHF 대역에서 유용함.
          + 이동하지 않고 위치가 변하지 않는 사이트의 경우, 전방향 안테나가 아닌 다른 방법을 사용하여 노드 간 네트워크 링크를 형성하는 것이 더 나은 링크 신뢰성과 데이터 전송률을 제공함.
          + LoRA 칩셋과 RF 모듈을 이용한 ExpressLRS는 원격 컨트롤러와 UAV(무인 항공기, 보트, 지상 차량 등) 간의 시리얼 UART 브릿지를 구현하여 인간과 온보드 비행 컨트롤러 간의 링크를 제공함.
"
"https://news.hada.io/topic?id=12706","[번역]Svelte의 원리(Tenets)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         [번역]Svelte의 원리(Tenets)

     이 글의 원문은 Richard Harris가 Svelte Github Repository에 올린 Tenets 입니다.

   이 글은 Svelte의 철학 - 우리의 근간 철학이며, 우리가 설계 결정을 내린 지침을 뚜렷하게 표현하기 위한 시도입니다.

  웹이 중요합니다. (The web matters)

   우리는 웹이 매우 중요하고, 웹의 지속적인 생존이 보장할 수 없다고 믿기 때문에 Svelte를 개발합니다.

  느낌을 최적화합니다. (Optimise for vibes)

   가장 좋은 느낌이 드는 프레임워크가 되는 것을 명시적인 목표로 삼고 있습니다.

  채택 받기 위해서 최적화하지 않습니다. (Don't optimise for adoption)

   흐름에 반하더라도, 가장 좋은 프레임워크가 되려고 합니다.

  HTML은 모국어입니다. (HTML, The Mother Language)

   JS에 우선하는 것과 HTML을 우선하는 것 둘 다 유효한 방식이지만, HTML에 우선하여 접근하는 방식이 더 자연스럽게 느껴집니다.

  발전을 받아들입시다. (Embrace progress)

   커뮤니티로서 우리의 기술에 대한 입장은 낙관주의입니다. 플랫폼이 더 좋아지고, 도구가 더 좋아지고, 장비가 더 좋아지고, 우리가 그것들을 받아들인다면 더 좋은 것을 만들 수 있을 것입니다.

  숫자는 거짓말을 합니다. (Numbers lie)

   수치적 엄밀성은 좋고, 우리는 다양한 수치에 주의를 기울이지만, Svelte를 설계할 때 우리는 정량적이기보다는 정성적으로 생각합니다.

  마법이 아니라 마법적일 것. (Magical, not magic)

   우리는 Svelte가 마법적이길 바라며, 여러분이 Svelte 코드를 작성할 때, 마법사가 된 기분을 느끼길 바랍니다. 과거 Svelte는 작동방식이 명확하지 않은 마법의 영역에 있었다고 생각하며, 이를 Svelte 5에서 바로잡고 있습니다.

  꿈을 크게 꿉시다. (Dream big)

   상황에 상관없이 ""SveltKit이 최고의 프레임워크가 되려면 무엇이 필요할까? 질문을 던지는 것이 중요하다고 생각합니다.

  아무도 신경 쓰지 않아요. (No-one Cares)

   대부분 사람은 프레임워크에 신경 쓰지 않습니다. 그냥 뭔가 멋진 걸 만들고 싶어 할 뿐이고, Svelte는 그들을 위한 것입니다. 필요한 개념만 익히고 나머지는 걱정하지 않아도 원하는 것을 만들 수 있어야 합니다.

  합의를 통해 설계합니다. (Design by consensus)

   Svelte는 커뮤니티가 주도하고 합의에 의해 진행되는 프로젝트입니다. 커뮤니티, 즉 여러분이 프로젝트의 미래에 대한 지분을 갖는 것이 중요합니다.

   마법은 없지만, 마법같이

   다음 문단 보면 마법이 존재하지 않는 것이여서 이런 표현을 쓴게 아니라 마법은 이해하지 못하고 쓰는 신비라는 의미를 담고 있는 것 같아서 그것도 좀 애매하네요

   진짜 미묘한 차이라 번역이 살리기 많이 어렵네요.

   마법이 아니지만 마치 마법인 것처럼 은 어떤가요?

   직접 번역한 거라 이상한 부분이 있을 수 있는데 댓글로 알려주시면 최대한 빨리 수정하겠습니다. 마법이 아니라 마법적일 것. (Magical, not magic) 이 부분 번역이 거슬리긴 하는데 적절한 표현이 안 떠오르네요.

   그리고 긱 뉴스 본문은 요약본입니다.
"
"https://news.hada.io/topic?id=12629","테더, 미국 상원에 보낸 서한에서 비밀경호국 및 FBI와의 파트너십 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                테더, 미국 상원에 보낸 서한에서 비밀경호국 및 FBI와의 파트너십 공개

Tether, 미국 상원에 보낸 서한에서 비밀 서비스 및 FBI와의 파트너십 공개

     * Tether는 미국 상원 은행, 주택 및 도시 문제 위원회와 미국 하원 금융 서비스 위원회에 보낸 서한을 공개함.
     * 서한에서 Tether의 CEO Paolo Ardoino는 보안에 대한 헌신과 법 집행 기관과의 긴밀한 파트너십을 강조함.
     * Ardoino는 Tether가 미국 법무부, 비밀 서비스, FBI와 협력하여 지금까지 326개 지갑을 동결했으며, 이 지갑들은 총 4억 3천 5백만 USDT를 통제함.
     * Ardoino는 Tether가 최근 미국 비밀 서비스와 협력했으며 현재 FBI와 협력 중임을 밝힘.
     * 그는 Tether가 미국 법 집행 기관과 긴밀히 협력하고 글로벌 달러 패권을 확장하는 데 기여하고자 한다고 언급함.
     * 이 서한은 암호화폐에 우호적인 상원의 Cynthia Lummis 의원을 포함한 위원회의 의장 및 랭킹 멤버들에게도 전달됨.
     * Tether가 이 서한을 공개한 목적은 자사의 스테이블코인의 보안과 무결성을 확보하기 위한 헌신을 강조하기 위함임.
     * 이는 Tether가 규제 기관과의 협력을 강화하기 위한 새로운 정책을 발표한 후, OFAC 제재 대상자의 지갑을 동결하는 데 도움을 준 것에 이어짐.

GN⁺의 의견

     * 이 기사는 Tether가 미국 상원에 보낸 서한을 통해 법 집행 기관과의 협력을 강조하고, 특히 미국 비밀 서비스 및 FBI와의 파트너십을 공개한 것이 중요함.
     * Tether의 이러한 행동은 암호화폐 산업 내에서 규제 기관과의 협력이 점점 더 중요해지고 있음을 보여주며, 이는 투자자와 사용자에게 신뢰를 제공할 수 있음.
     * 글로벌 달러 패권을 확장하고자 하는 Tether의 목표는 암호화폐가 전통적인 금융 시스템과 어떻게 상호 작용할 수 있는지에 대한 흥미로운 논의를 촉발할 수 있음.
"
"https://news.hada.io/topic?id=12648","소프트웨어 엔지니어의 월급은 3개의 예산에서 나옵니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     소프트웨어 엔지니어의 월급은 3개의 예산에서 나옵니다

     * 소프트웨어 엔지니어링의 급여는 ""판매/마케팅, 연구 및 개발, 유지보수""의 3가지 예산 중 하나에서 나옴
     * 이러한 분류는 일상 업무와 커리어 패스에 영향을 미침
     * 하지만 물리학의 법칙과 마찬가지로, 패턴을 보이기 위해 의식적으로 선택할 필요는 없음
     * 이 프레임워크는 커리어에 대한 비전과 포지셔닝을 생각할 때 유용함

  판매/마케팅 예산

     * 성장 조직에 속할 때 결과는 쉽게 정량화하고 측정 가능함. 뭔가를 하면 숫자가 올라감.
     * Growth 엔지니어, 세일즈 엔지니어, DevRel 등이 해당되며, 기존 제품의 판매, 기능을 알리고, 워크플로우에 도구가 채택되도록 하는 것을 담당
     * 즉각적인 영향을 원하는 예산임
          + 측정가능한 임팩트는 ROI를 알고 있고, 돈에 가까우며, 당신의 업무가 직접적으로 돈을 벌 수 있다는 것을 의미함
          + 하지만 측정하기 쉬우면 비교도 쉬워서, 내부 경쟁 문화를 초래할 수 있음
     * 업무는 단기적으로 집중되는 경향이 있으며, 다음 실험/고객/마케팅 유행을 쫓게 됨. 마치 러닝머신에서 달리는 것처럼
     * 회사가 당신의 양동이에 돈을 투자하는 금액에 대한 배수(Multiplier)로 당신의 가치가 결정됨
     * 이는 기업이 최적화를 추구함에 따라 회전문 효과로 이어질 수 있음(회사들이 더 높은 수익률을 얻기 위해 지속적으로 투자 전략을 바꾸거나 투자 대상을 변경할 수 있다는 것을 의미)

  연구 및 개발

     * 연구 및 개발(R&D)은 가장 많은 엔지니어를 고용하며, 일반적으로 제품 조직 하부에 있음
     * 제품 엔지니어, 연구원, 아키텍트 등이 여기에 속하며, 회사가 판매하거나 판매할 수 있는 제품을 구축하거나 찾는 사람들
     * 시간이 지남에 따른 성장을 원하는 예산으로, 장기적인 결과에 초점을 맞추고, 때로는 활성화 개선 기능을 구축하거나 새로운 제품 라인을 탐색함
     * 연구 부서가 있는 회사는 몇 년 동안 상품화되지 않을 아이디어에 대해 작업하는 사람들도 있음
     * 개발과 연구는 다르지만, 둘다 장기적인 성과나 결과를 목표로 함
     * 사업/프로젝트의 가장 짧은 기간은 한 분기(3개월)임. 당신의 작업은 그 안에 장기적인 자산이 되어서 앞으로 수년간 가치를 제공해야함
     * 더 짧은 실험들은 다음 단계로 가기위한 Stepping Stone의 역할을 함
     * 당신의 작업은 측정하기 어렵지만, 회사에선 당신을 장기적인 가치를 내기위한 투자로 간주함
     * 판매할 수 있는 제품을 구축하고, 제품의 품질이 좋을수록 판매와 리텐션을 좋게 만듦

  유지보수

     * 유지보수는 대부분 개발에 흡수되었으며, 이는 이 예산이 비용 최적화를 요구하기 때문
     * 시스템 관리자, 오래된 시스템을 유지하는 사람들, 때로는 플랫폼 엔지니어가 여기에 속함
     * 회사는 이 작업을 순수한 비용으로 보고 최소화하려 함
     * 많은 회사에서 제품 개발에 이 역할을 통합하며, 가치가 없는 작업으로 여겨짐
     * 회사는 이 예산을 너무 싫어해서 NFR(비 기능적 요구사항) 작업을 위한 시간을 내는 것이 엔지니어에게 특별한 대우라고 설득하기 위해 노력함
     * 내부를 위한 도구 구축도 이 범주에 속할 수 있음. 회사를 굴러가게 하지만, 결코 우선 순위에는 포함되지 않는 사랑받지 못하는 관리자 대시보드 같은 것.

왜 이것이 중요한가

     * 어떤 예산에 속하는지에 따라 일상 업무가 형성됨
     * '성장(Growth)'과 관련된 업무는 '측정 가능하고 (measurable)' 및 '변동성이 큼 (churny)'
     * '연구(Research)'는 '편안하고 (chill)' 및 '모호함 (fuzzy)'
     * '개발(Development)'은 '가치가 있고 (valued)' 점차적으로 구축됨 (builds over time)
     * '유지보수(Maintenance)'는 '항상 위험에 처해 있음 (always on the chopping block = 축소대상)'

   마지막 문장을 ChatGPT 한테 좀 자세히 설명하라고 해봤더니 잘 풀어주네요.
    1. Growth: '성장(Growth)'과 관련된 업무는 '측정 가능하고 (measurable)' 및 '변동성이 큰 (churny)' 특성을 갖습니다. 이는 회사의 성장을 촉진하는 데 중점을 두며, 이러한 업무는 일반적으로 매출 증가, 고객 기반 확장, 시장 점유율 향상 등과 같이 구체적이고 측정 가능한 목표를 추구합니다. 변동성이 크다는 것은 이러한 업무가 시장 상황에 따라 빠르게 변화하고 적응해야 함을 의미합니다.
    2. Research: '연구(Research)'는 '편안하고 (chill)' 및 '모호한 (fuzzy)' 특성을 가집니다. 연구 관련 업무는 종종 탐색적이며, 구체적인 결과나 즉각적인 수익 창출보다는 지식 확장, 혁신 개발, 장기적인 전략적 이점을 추구합니다. 이러한 업무는 종종 명확한 단기 성과 지표가 부족하며, 장기적인 관점에서 접근해야 합니다.
    3. Development: '개발(Development)'은 '가치가 있고 (valued)' 점차적으로 구축되는 (builds over time) 특성을 가집니다. 개발 업무는 제품이나 서비스를 개선하고 새로운 기능을 만드는 데 중점을 두며, 이러한 업무는 회사의 제품 포트폴리오와 직접적인 가치를 연결시킵니다. 시간이 지남에 따라 가치가 축적되며, 이는 회사의 장기적인 성공에 기여합니다.
    4. Maintenance: '유지보수(Maintenance)'는 '항상 위험에 처해 있는 (always on the chopping block)' 특성을 가집니다. 이는 유지보수 업무가 비즈니스의 긴급한 필요성으로 인식되지 않거나 덜 가시적인 경우가 많기 때문입니다. 유지보수는 필수적이지만 종종 예산 삭감이나 축소의 대상이 되며, 이는 이러한 업무의 중요성이 항상 명확하게 인식되지 않는다는 것을 반영합니다.
"
"https://news.hada.io/topic?id=12679","Show HN: FrameOS – 단일 기능 스마트 프레임을 위한 운영 체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: FrameOS – 단일 기능 스마트 프레임을 위한 운영 체제

FrameOS

     * 단일 기능 스마트 프레임을 위한 운영 체제: FrameOS는 라즈베리 파이에 배포되며 다양한 전자잉크 및 전통적인 디스플레이와 호환됨.
     * 프레임 업데이트 속도: 스크린은 60초당 프레임 또는 초당 60 프레임으로 업데이트되도록 설계됨.
     * 사용 예시: 스마트 홈 캘린더, 회의실 디스플레이, 온도 조절기, 산업 대시보드, 공공 광고 화면 등에 적용 가능.

주요 기능

     * 중앙 집중식 배포: FrameOS 컨트롤러가 SSH를 통해 라즈베리 파이에 직접 소프트웨어를 설치함.
     * 컴파일 및 효율성: Nim이라는 컴파일 언어로 작성되어, 최종 구성이 모든 앱, 자산, 드라이버를 포함하는 단일 효율적인 바이너리로 컴파일됨.
     * 다이어그램 에디터: Nim 앱을 장면으로 결합하는 드래그 앤 드롭 인터페이스 제공. ""OpenAI 이미지"", ""텍스트 오버레이""와 같은 기존 앱을 필요에 맞게 수정하고 인라인 코드 스니펫으로 모든 필드를 덮어씀.
     * GPT-4 지원: 좋아하는 LLM에게 FrameOS 앱 작성 및 디버깅을 요청할 수 있음.
     * 하드웨어 가이드: 테스트된 디스플레이에 대한 하드웨어 가이드, 설치 지침 및 3D 프린터로 출력 가능한 케이스 제공.

시작하기

    1. FrameOS 컨트롤러 설치 시작.
    2. 특정 화면에 대한 장치 가이드를 따라 라즈베리 설정.

지원 플랫폼

     * 대부분의 일반적인 전자잉크 디스플레이 지원.
          + Pimoroni 전자잉크 프레임
          + Waveshare 전자잉크
          + 프레임버퍼 HDMI 출력
          + 웹 서버 키오스크 모드
     * 전체 목록은 여기서 확인 가능.

상태

     * FrameOS는 가정 및 취미용으로 충분히 사용 가능.
     * 이 소프트웨어는 초기 개발 단계에 있으며 안정적인 릴리스는 없음.
     * main에 푸시될 때마다 도커 이미지 생성.
     * 릴리스 간에 갑자기 문제가 발생하지 않을 것이라는 보장은 없음, 최선을 다함에도 불구하고.
     * 모험을 즐기는 사람이라면 시도해보고 도움을 줄 것. 할 일 목록에서 아이디어를 얻을 수 있음. 허락을 구하지 말고 PR을 제출할 것. 확실하지 않다면 이슈를 열고 논의할 것.

왜?

     * 블로그 포스트: 왜 FrameOS인가?
     * Nim 리라이트에 대해 더 알아보기.

GN⁺의 의견

     * 혁신적인 프레임워크: FrameOS는 다양한 스마트 디스플레이를 위한 혁신적인 운영 체제로, 사용자가 직접 소프트웨어를 커스터마이징하고 효율적으로 배포할 수 있는 플랫폼을 제공함.
     * 커뮤니티 기여의 중요성: 이 프로젝트는 초기 개발 단계에 있으며, 사용자들의 적극적인 참여와 피드백이 프로젝트의 성장과 안정성 향상에 크게 기여할 수 있음.
     * 교육적 가치: FrameOS는 Nim 프로그래밍 언어와 GPT-4와 같은 최신 기술을 활용하여, 초급 소프트웨어 엔지니어들에게 실제 프로젝트에 참여하며 학습할 수 있는 기회를 제공함.

        Hacker News 의견

     * 재미있는 작은 프로젝트에 대한 언급

     ""2년 전에 선물용으로 7색 eInk 아두이노 기반 사진 액자를 만들었는데, 이미지를 수동으로 자르고, 디더링하고, 색상 인덱싱해야 했음. FrameOS가 이런 작업을 자동으로 처리해줬다면 수시간의 수작업을 절약할 수 있었을 것임.""
     * FrameOS에 대한 질문

     ""FrameOS가 실제로 OS가 아니라, 라즈베리 파이 위의 OS 상에서 실행되는 소프트웨어라고 이해하는 것이 맞는지 궁금함.""
     * Chumby에 대한 향수

     ""Chumby를 그리워함. 이 프로젝트를 보고 집에서 스마트하고 제어 가능하며 코딩이 거의 필요 없는 스크린에 대한 여러 용도를 생각해냄.""
     * DispatchPi 프로젝트에 대한 설명

     ""지난해 Gmail을 통해 e-ink 이미지를 교환하는 스크립트 모음인 DispatchPi를 만들었는데, 이런 프로그램이 있었다면 개발 속도가 빨라졌을 것임. 또한, ESP32 호환성이 있다면 배터리로 구동하는 프레임 드라이버로 전환하는 것을 고려 중임.""
     * FrameOS에 대한 호평

     ""정말 멋진 프로젝트임. 마이크로소프트의 마케팅 부서 주도의 무용한 '기능'이 아닌, 혁신적인 OS 이야기를 보고 싶음.""
     * HomeAssistant와 e-ink 디스플레이 설정에 대한 관심

     ""HomeAssistant와 함께 e-ink 디스플레이를 설정하고 싶어서 이 프로젝트를 살펴볼 예정임. FrameOS를 작성하기 전에 겪었던 소프트웨어 문제가 무엇인지, 그리고 GPT-4 지원이 실제로 무엇을 의미하는지 궁금함.""
     * 아마존 파이어 태블릿을 e-쓰레기로 만들지 않는 방법에 대한 질문

     ""오래된 아마존 파이어 태블릿을 e-쓰레기로 만들지 않는 좋은 방법이 있는지 궁금함.""
     * 프로젝트에 대한 호평과 개선 요청

     ""이 프로젝트는 매우 멋지며, 특히 창작 측면에서 많은 프로젝트가 이를 복제하려고 시도하지만 광택이 부족함. ESP32가 내장된 저전력 eINK 장치에 대한 지원을 바라지만, 이 프로젝트로 인해 라즈베리 파이로 교체를 고려 중임.""
     * MotionEYE OS와 비교

     ""MotionEYE OS와 같은 것을 상상했었는데, SDRAM 바이너리 이미지를 다운로드하여 Balena로 플래시한 후 라즈베리 파이에서 부팅함. Nim 언어에 대해서도 알아볼 좋은 기회였음.""
     * Pandigital에서의 유사 제품 개발 경험

     ""10년 전 Pandigital에서 비슷한 제품을 개발했었는데, 중국에서 온 맞춤형 OS를 사용했고, 사진을 프레임으로 보내는 방법은 GUID 이메일 ID를 사용하는 것이었음. 당시에는 잘 팔렸지만, 휴일 시즌에 DDoS 공격을 받고 모든 사업을 잃었음.""
"
"https://news.hada.io/topic?id=12615",""발명 없음; 혁신 없음" 미국 스틸의 역사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ""발명 없음; 혁신 없음"" 미국 스틸의 역사

미국 철강 산업의 역사

     * 지난주 미국 철강회사인 US Steel이 일본의 Nippon Steel에 인수됨을 발표함.
     * US Steel은 한때 미국에서 가장 크고 중요한 회사였으며, 세계에서도 그러했음.
     * 인수 발표 전 US Steel의 시가총액은 약 80억 달러로, 포춘 500에도 들지 못하는 규모였음.

US Steel의 기원과 초기 연대

     * 20세기 초, 미국의 철강 산업은 영국을 추월하여 세계에서 가장 크고 효율적인 산업이 됨.
     * 철강 생산은 대규모 경제의 효과를 누릴 수 있는 산업으로, 큰 규모의 설비가 더 저렴한 철강 생산을 가능하게 함.
     * 19세기 말, 미국의 철강 생산 능력의 거의 절반은 매년 사용되지 않았음.
     * 산업의 통합에 대한 욕구가 커지면서, JP Morgan의 주도로 Carnegie Steel과 Federal Steel 등 여러 회사를 합병하여 US Steel이 탄생함.
     * US Steel은 세계 최초로 10억 달러 이상의 가치를 지닌 회사가 되었으며, 미국 철강의 60% 이상을 생산함.

US Steel의 전후 시대

     * 제2차 세계대전이 끝난 후, 미국의 철강 산업은 독보적인 위치에 있었음.
     * 전쟁 중 미국의 철강 생산은 1/3 이상 증가했으며, 다른 나라의 철강 산업은 거의 파괴됨.
     * US Steel은 여전히 업계를 지배했으며, 1950년대 중반 미국 철강 생산의 약 30%를 차지함.
     * 그러나 미국 철강 회사들은 자만에 빠져 기술 발전을 무시하고 가격을 인상하는 데 만족함.

철강 위기와 미니밀의 부상

     * 미국의 철강 생산은 계속해서 증가했으나, 1973년 이후 수요는 정체되거나 감소함.
     * 미국 철강 산업은 외국 경쟁으로부터 보호를 요구했으며, 미니밀이라는 새로운 유형의 철강 제조 시설이 등장함.
     * 미니밀은 전기 아크로에서 철강 스크랩을 재활용하여 철강을 생산함.
     * US Steel은 시장 점유율이 감소하고 효율성이 떨어지면서 위기에 처함.
     * US Steel은 수천 개의 일자리를 줄이고 여러 공장을 폐쇄하여 생산성을 크게 향상시킴.

결론

     * US Steel은 보수적인 반응으로 설립되었으며, 그 문화가 회사의 초기 연대를 지배함.
     * US Steel은 크기를 이용하여 다른 철강 회사들을 괴롭히고 소비자들로부터 돈을 뽑아냄.
     * 회사의 큰 규모는 관리가 어렵게 만들었고, 철강 제조 기술의 주요 발전에서 뒤처짐.
     * 오늘날의 US Steel은 20세기 산업 거인과는 거리가 멀지만, 여전히 기술 개발과 산업 발전을 선도하는 회사가 되기보다는 추종자로 남아있음.

GN⁺의 의견

     * US Steel의 역사는 산업의 변화와 혁신을 따라가지 못한 대기업의 전형적인 사례임.
     * 기술 발전에 뒤처진 결과로 시장 점유율과 산업 내 영향력이 크게 감소한 것은 혁신의 중요성을 강조함.
     * 이 기사는 철강 산업뿐만 아니라 모든 산업에서 지속적인 혁신과 적응이 필수적임을 보여주는 흥미로운 사례임.

        Hacker News 의견

     * 일본과 독일의 산업 기반 전체 파괴가 역사와 경제 연구에서 누락된 것 같음. 제2차 세계대전 후, 일본과 독일의 철강 산업은 완전히 새롭게 태어나야 했음. 미국의 자금 지원으로, 이들 국가는 과거의 유물 없이 최신 기술과 과학으로 새롭게 시작할 수 있었음. 북미 산업은 1900년대부터 천천히 진화했지만, 독일과 일본은 1950-60년대부터 빠른 출발을 했음. 70년대에 미국과 영국을 능가하기 시작한 그들의 현대적 접근 방식에 모두가 감명받았음.
     * 미국 스틸의 데이터 센터에서 경력을 시작한 한 개인은, 이 회사의 진화가 부정적으로만 묘사되는 것에 대해 유감을 표함. 미국 스틸이 USX로 진화하는 과정에서 혁신이 있었으며, 데이터 센터 운영의 자동화와 추상화를 통해 수작업 노동의 최소화가 이루어졌음.
     * 미국 스틸이 과학 소설 일러스트레이터에게 미래의 철강을 포함한 참고 도서를 의뢰했고, 이 책들이 영화 산업에서 유명해져 미래 지향적인 디자인에 철강이 자주 사용되게 된 사실에 대한 언급이 있음.
     * 누코(Nucor)가 미국 철강 산업에서 1위가 된 과정에 대한 개요를 제공하는 ""American Steel"" (1992)이라는 책이 있음. 누코는 독일 회사로부터 실험적인 연속 주조기를 구입하여 폐금속을 시트 스틸로 전환하는 공장을 건설했음. 미국에서 생산되는 철강의 약 69%가 재활용되고 있으며, 개발 도상국은 여전히 새로운 철강을 생산하고 사용 중임.
     * 철강은 미래 개발에 엄청난 잠재력을 가진 기술임. 유철 용액, 대량 금속 유리, 붕소 강철 등이 중요한 키워드임. 미국이 철강 생산을 외국에 맡기는 것은 문제가 될 수 있음.
     * 혁신이 문제인지 확실하지 않음. 이 기사는 미국 스틸이 개발한 합금에 대해서는 언급하지 않음. 합금은 철강의 핵심이며, 미국 스틸은 경쟁력을 잃었음. 이 기사에서는 미국의 강력한 철강 노동조합에 대한 언급도 없음.
     * 한 개인의 할아버지가 한국에서 복무한 후 30년간 금속 공장에서 일했으며, 70년대에 미국산 철강의 품질 문제로 중국산 철강으로 전환했다는 이야기가 있음.
     * 비즈니스 스쿨 농담에서 미국 스틸이 만드는 것은 '철강'이 아니라 '돈'이라는 것을 상기시키는 댓글이 있음.
     * 미국 북동부에 있는 사람들에게 베들레헴, PA에 위치한 산업 역사 국립 박물관을 방문할 것을 추천하는 댓글이 있음. 이 박물관은 철강 생산과 산업 기계에 대한 소개를 제공함.
     * 미국에서 생산되는 철강의 약 70%가 스크랩에서 나옴. 알루미늄이 미래에 철강을 대체할 것으로 예상되며, 테슬라의 '기가캐스팅'과 같은 혁신이 일어나고 있음.
"
"https://news.hada.io/topic?id=12709","프로젝트 오베론: 운영 체제, 컴파일러 및 컴퓨터 설계 [PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  프로젝트 오베론: 운영 체제, 컴파일러 및 컴퓨터 설계 [PDF]
"
"https://news.hada.io/topic?id=12622","구글, 빙, 마지널리아, 카기, 뭄블, 그리고 챗지피티 비교 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  구글, 빙, 마지널리아, 카기, 뭄블, 그리고 챗지피티 비교 분석

검색 결과의 질은 얼마나 나쁜가?

     * 검색 결과의 질에 대한 실험을 제안함. 예를 들어 ""youtube downloader""와 같은 일반적인 용어로 yt-dlp와 같은 오픈 소스 프로젝트를 찾는 것은 콘텐츠 팜들 때문에 어려움.
     * 많은 기술 전문가들이 구글 검색 결과가 10년 전보다 현저히 나빠졌다고 생각함. 반면, 여전히 검색 결과가 좋다고 주장하는 사람들도 있음.

검색 엔진 및 ChatGPT 비교

     * 다양한 검색 엔진과 ChatGPT를 사용하여 세 가지 유형의 질문에 대한 검색 결과를 비교함.
     * 검색 엔진들은 광고 차단기를 끄고 일반 사용자의 경험을 재현함.
     * 검색 결과의 질은 주관적으로 평가되며, 사기성 결과의 존재 여부에 따라 다르게 평가됨.

검색 결과 평가

     * Marginalia는 때때로 적당한 답변을 제공하며, 사기성 결과의 비율이 가장 낮음.
     * Mwmbl은 사용자가 검색 결과 순위를 직접 편집할 수 있음.
     * 구글은 최근의 유튜브 동영상을 반환하는 경향이 있으며, 이는 대부분의 사용자에게 무용함.
     * ChatGPT는 한 경우에서 인상적인 성능을 보이고, 다른 경우에는 적절한 작업을 수행하거나 질문에 대답을 거부함.

구글과 빙의 문제점

     * 구글과 빙은 다양한 종류의 잘못된 결과를 반환함.
     * 전통적인 검색 생태계는 사용자에게 가장 이익이 되는 결과를 제공하기보다는 소프트웨어 공급망에 가장 이익이 되는 것을 우선시함.

광고 기반 검색의 문제

     * 광고 기반 검색 엔진은 사용자에게 좋은 검색 결과를 제공하는 것과 일치하지 않는 동기를 가짐.
     * 구글은 광고와 실제 검색 결과를 구분하기 어렵게 만들어 사용자가 혼동할 수 있도록 함.

작은 검색 엔진의 가능성

     * Marginalia와 같은 작은 검색 엔진이 구글을 대체할 수 있는지, 또는 여러 작은 검색 엔진이 구글보다 나은 결과를 제공할 수 있는지에 대한 질문이 제기됨.
     * Mwmbl의 사용자 큐레이션 접근 방식이 효과적일지에 대한 의문이 있음.

GN⁺의 의견

     * 검색 결과의 질에 대한 논쟁은 사용자들이 얼마나 검색 엔진에 의존하고 있는지를 보여줌. 구글과 같은 대형 검색 엔진이 여전히 우세하지만, 작은 검색 엔진들이 틈새 시장에서 경쟁력을 가질 수 있음을 시사함.
     * 광고 기반 검색 엔진의 문제점은 사용자들이 진정으로 원하는 정보를 찾는 데 있어 장애물이 될 수 있음을 강조함. 사용자 경험을 향상시키기 위한 대안적인 검색 엔진의 필요성을 부각시킴.
     * 이 글은 기술에 정통한 사용자들이 어떻게 검색 엔진의 한계를 극복하고 있는지, 그리고 일반 사용자들이 직면하고 있는 검색 엔진의 문제점을 이해하는 데 도움이 됨.

        Hacker News 의견

     * Marginalia Search의 알고리즘 개선에도 불구하고, 샘플 쿼리에서 운이 좋았을 수 있음. 여전히 다른 대안들에 비해 히트 앤 미스(hit and miss)가 많다고 생각함. 이는 검색 품질을 평가하는 것이 어렵다는 것을 보여줌. 키워드 검색 엔진으로서 의미론적 이해가 없는 것에 대한 이해가 필요함.
     * Kagi에 대한 경험을 공유하며, HN에서 듣고 100번의 검색 후 구독함. 임의의 JS와 CSS 검색 시 MDN이 첫 결과로 나타나며, 그렇지 않을 경우 스팸 사이트를 하위 등급으로 조정할 수 있음.
     * Google의 검색 결과가 여전히 매우 좋다고 생각하는 사람들 중 한 명임. 광고 차단기(uBlock Origin) 사용을 인정하며, 비활성화할 생각이 없음. 비전문가의 검색 경험을 모방하기 위해 광고 차단기를 끄는 저자의 관점을 이해하지만, 광고 차단기를 켠 상태에서도 다른 테스트를 할 수 있음. yt-dlp에 대한 검색 결과 기대는 비전문가 경험과 일치하지 않음.
     * Kagi의 현재 검색 결과를 계정이 없는 사람들과 비교하기 위해 여러 검색어에 대한 링크를 제공함.
     * 웹상의 스팸이 너무 많다는 저자의 의견에 동의함. Kagi는 스팸을 하위 등급으로 처리하는 데 있어 꽤 좋은 일을 하고 있으며, ""Small Web""과 같은 특별한 검색 모드를 통해 스팸을 거의 제거할 수 있음.
     * 검색이 어렵고 모두가 검색 결과를 조작하는 방법을 알고 있다고 생각함. Kagi나 Google의 프로그래머블 검색 엔진과 같이 사이트를 효과적으로 변경할 수 있는 검색 엔진 사용을 추천함. 결과에 대한 투표 기능은 매력적이지만 조작될 가능성이 있음. 화이트리스트 접근 방식은 단점이 있지만, 새로운 도메인을 소셜 미디어를 통해 검증하는 것을 선호함.
     * 검색 품질이 나빠졌다는 주장이 종종 일화적 증거에 기반을 두고 있으며, 이는 검증 가능한 주장이어야 함. 실제 증거와 기준을 제시하는 시도가 있었지만, 일반적인 주장을 만들기에는 샘플 크기가 너무 작음.
     * ChatGPT에 대한 기사를 작성하는 사람들이 왜 3.5 버전을 사용하는지 이해할 수 없음. GPT-4와 비교할 때 결과가 현저히 다름.
     * uBlacklist를 사용해보라고 추천함. 검색 결과를 차단할 수 있는 도구로, 설정과 개인 차단 목록을 Dropbox나 Google Drive와 동기화할 수 있음. 차단 목록 구독 기능도 있지만, 아직 내장된 피드는 없음.
     * ""YouTube 동영상 다운로드""에 대한 좋은 검색 결과는 yt-dlp 또는 그래픽 사용자 인터페이스를 갖춘 yt-dlp일 것이라는 기대에 대해 의문을 제기함. 대부분의 사람들은 프로그래밍에 관심이 없으며, 검색 결과가 주관적임을 깨닫게 됨.
     * 저자가 Kagi에서 나쁜 결과를 얻었다는 것을 재현할 수 없음. 검색한 동일한 용어에 대해 훨씬 뛰어난 결과를 보임. 저자가 어떻게 그런 나쁜 결과를 얻었는지 궁금함.
     * 검색 결과가 모두 동일한 유형의 링크를 반환해야 한다는 저자의 기대가 이상함. 10개의 링크가 모두 같은 것을 가리키는 검색은 나쁜 검색임. 검색 결과는 주어진 쿼리에 대해 합리적인 추측을 커버해야 함. 검색 엔진 품질 지표에도 이러한 의견이 반영됨.
"
"https://news.hada.io/topic?id=12644","스티브 잡스, 최고의 직원들은 프로세스가 아닌 콘텐츠에 집중한다고 말함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                스티브 잡스, 최고의 직원들은 프로세스가 아닌 콘텐츠에 집중한다고 말함

     * 1979년, 스티브 잡스와 애플 엔지니어들은 새로운 기술과 제품을 개발하기 위해 설계된 연구 센터인 Xerox PARC를 방문함
     * 이곳에서 잡스는 마우스, 창, 아이콘 등을 처음 보고 그래픽 사용자 인터페이스에 대한 애플의 버전 작업을 시작함
     * 그러나 초기에는 휴렛 패커드 출신 직원들이 새로운 아이디어를 이해하지 못해 어려움을 겪음

혁신의 어려움

     * 잡스는 당시 직원들이 마우스와 같은 혁신적인 아이디어에 대해 이해하지 못하고, 비용과 시간에 대한 우려를 표현함.
     * 결국, 잡스는 외부 디자인 회사를 통해 90일 만에 $15로 생산 가능한 신뢰성 높은 마우스를 개발함.
     * 잡스는 애플 내에 필요한 수준의 인재가 부족하다는 것을 깨닫고, 이를 해결하기 위해 노력함.

과정과 내용의 혼동

     * 잡스는 많은 사람들이 '과정(Process)'과 '내용(Content)'을 혼동한다고 지적함.
     * 기업이 성공하면 그 과정을 마법처럼 여겨 이를 반복하려고 함.
     * 잡스는 실제로 중요한 것은 과정이 아니라, 그 과정을 통해 달성되는 결과, 즉 '내용'임을 강조함.
     * '과정'은 단순히 그 자체로서의 과정임. 성공한 기업은 종종 그 성공을 이끈 과정에 '마법'이 있다고 가정하고, 같은 과정을 반복하려 함.
     * IBM의 예에서 볼 수 있듯, 과정을 기관화하려는 시도가 결국 내용을 잊는 결과로 이어짐.
     * 잡스는 애플에서도 비슷한 문제가 있었다고 지적함. 관리 과정에 능한 사람들이 있었지만, 실제 '내용'에 대해서는 이해하지 못했음.
     * 잡스에게 '내용'은 우리가 일반적으로 생각하는 내용이 아니라 결과를 의미함. 예를 들어 맥, 그래픽 사용자 인터페이스(GUI), 아이팟, 아이패드, 아이폰 등이 그것임.

탁월한 직원의 가치

     * 성과 측면에서 직원 100명을 그래프로 나타내면, 대부분 평균 성과를 보이는 중간에 위치하고, 소수의 고성능 직원과 저성능 직원이 양쪽 끝에 위치하는 종 모양 곡선을 보일 것임.
     * 라슬로 복, 구글 전 인사 담당 부사장은 'Work Rules'에서, 조직 연구자들이 80/20 법칙과 유사하게, 회사의 대부분 출력이 소수의 '슈퍼스타' 직원들에 의해 나온다는 것을 보여줌.

성과 분포의 파워 법칙

     * 성과 측면에서 파워 법칙 분포는 지속적으로 낮아지는 성과의 긴 꼬리로 생각할 수 있음.
     * 다른 연구도 복의 주장을 뒷받침함. 한 연구에 따르면, 슈퍼스타 직원은 동료들보다 세 배 더 가치 있음.
     * 맥킨지 연구에 따르면, 고성과 직원은 평균 직원보다 네 배 더 생산적임.
     * 넷플릭스 공동 창립자 리드 헤이스팅스는 최고의 프로그래머가 평균 프로그래머보다 10배에서 100배까지 더 많은 가치를 제공한다고 느낌.

HR 시스템의 한계

     * 대부분의 HR 시스템은 표준 종 모양 곡선을 기반으로 함.
     * 복에 따르면, 이는 많은 리더들이 최고의 사람들을 과소평가하고 보상하지 않는 결과를 초래함.
     * SAP와 옥스퍼드 이코노믹스의 연구에 따르면, 고성과 기업의 73%는 최고의 직원들에게 보너스 지급에 상한선을 두지 않음.
     * 반면, 저성과 기업의 81%는 상한선을 둠.

공정한 보상의 재정의

     * 공정한 보상은 직무의 임금 척도로 정의되어서는 안 됨.
     * 훌륭한 직원들은 평균 직원들보다 팀, 고객, 그리고 기업의 수익에 훨씬 더 큰 가치를 가짐.
     * 슈퍼스타 직원들은 엄청난 가치를 가짐.
     * 라슬로 복의 권고에 따라, 슈퍼스타 직원들에게 '불공정하게' 보상하는 것이 필요함.

최고의 직원: 내용을 이해하는 사람들

     * 잡스는 실제로 결과를 이끄는 '내용'을 이해하는 사람이 최고의 직원임을 발견함.
     * 이런 직원들은 관리하기 어려울 수 있지만, 그들이 내용에 능숙하기 때문에 이를 감수함.
     * 훌륭한 제품은 과정이 아닌 내용에서 나옴.

프로세스와 결과의 균형

     * 최고의 직원들은 프로세스를 따르는 데 능숙한 사람들이 아님.
     * 진정으로 가치 있는 것을 이해하고, 기존 방식에 만족하지 않으며, 기회를 포용하는 사람들임.
     * 이들은 기존에 해오던 방식에 불만족하며, 진정으로 가치를 창출하는 것을 이해함.

승진과 보상 결정 시 고려 사항

     * 승진 결정 시, 관리자가 되고 싶어하지 않지만 일을 성취하고자 하는 훌륭한 개인 기여자를 고려함.
     * 보상 결정 시, 슈퍼스타 직원의 실제 가치를 고려하며, 이들이 관리하기 어려울지라도 그 가치를 인정함.
     * 비즈니스의 성공은 주로 사람들이 달성하는 결과에 달려있음, 단순히 프로세스를 따르는 것이 아님.

   천하의 망종이지만, 인사이트만큼은 대단함을 다시금 느낍니다.

        Hacker News 의견

     * 스티브 잡스의 인터뷰에 대한 댓글 요약:
          + 잡스의 말을 해석하면, 실제로 일을 하고 이해하며 관심을 가지는 사람들이 단순히 프로세스와 정치에만 집중하는 사람들보다 더 가치 있다는 의견.
          + 작고 능력 있는 엔지니어 팀은 많은 프로세스 없이도 올바른 일을 할 수 있지만, 팀이 커지면 능력이 부족한 사람들도 효과적으로 일할 수 있도록 프로세스를 도입하고 강화해야 한다는 경험담.
          + 프로세스에만 집중하는 사람들과 일하는 것이 미칠 듯이 짜증나며, 일을 제대로 효율적으로 완수하는 맥락에서 프로세스를 고려해야 한다는 의견.
          + 스타 플레이어로서 과소평가 받는 느낌이 들면 이런 글에 공감할 것이며, 좋은 프로세스 없이는 많은 사람들을 일관되게 움직이게 할 수 없다는 주장.
          + 인간 능력이 종 모양 곡선으로 분포하는데, 왜 80/20 분포를 볼 것으로 예상하는지, 성과 측정 도구가 신뢰할 수 없으며 성과가 다양한 맥락에서 다양한 의미를 가질 수 있다는 의견.
          + 프로세스에 능한 사람들이 팀에 섞여 있으면 큰 차이를 만들 수 있으며, 팀이 올바른 주제에 올바른 순서로 능력을 적용할 수 있도록 도와 비용이 많이 드는 우회로나 실패를 피할 수 있다는 경험담.
          + 평균적인 개발자는 지시와 안내가 필요하므로 이상적인 세계에서는 맞지만 현실에서는 불가능하다는 의견.
          + 스티브 잡스가 후임자로 프로세스 지향적인 사람을 선택했을 수도 있으며, 스티브 잡스의 말을 공허하게 반복하는 사람들은 무지해 보인다는 비판.
          + 팀 쿡의 애플은 프로세스에 더 집중하고 내용을 잊어버린 것 같으며, 2014년부터 2021/2022년까지는 모든 직원이 대략 동등하다는 것이 유일하게 허용된 감정이었다는 의견.
          + 모든 직원을 '우수'로 평가했지만 인사 부서에서 평가를 공정하게 분포시키라는 요구를 받아 우수한 직원들이 과소평가되고 보상을 받지 못하는 상황에 대한 경험담.
          + 맥 마우스를 설계하는 데 5년이 걸리고 300달러가 들 것이라는 주장에 질려 외부의 데이비드 켈리 디자인을 찾아 90일 만에 15달러로 제작할 수 있는 매우 신뢰할 수 있는 마우스를 만든 일화.
          + 최고의 직원들은 관리하기 어려운 경향이 있으며, 이는 결함 있는 프로세스를 따르지 않거나 불필요한 회의에 참석하지 않는 것과 같은 이유로 매니저들에게 말해진다는 경험담.
"
"https://news.hada.io/topic?id=12716","Iggy.rs - 러스트로 구축하는 메시지 스트리밍","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Iggy.rs - 러스트로 구축하는 메시지 스트리밍

기원

     * 2023년 4월, Rust 학습을 결심함.
     * 분산 시스템과 메시징에 대한 경험을 바탕으로 메시지 스트리밍 플랫폼 개발 결정.
     * 메시징 시스템의 내부 작동 원리와 개발자들의 트레이드오프 이해 목적.
     * Iggy.rs의 탄생, 속도와 가벼움을 강조하는 메시지 스트리밍 플랫폼 목표 설정.

프로젝트

     * 초기 Iggy는 QUIC 프로토콜을 사용하여 기본적인 메시지 교환 기능 제공.
     * 지속적인 프로토타이핑과 개선을 통해 병렬 쓰기/읽기 및 독립적인 스트림 지원 서버 구현.
     * TCP와 HTTP 프로토콜 지원 추가 및 데이터 동기화 메커니즘 최적화를 통한 성능 향상.
     * 벤치마킹을 통해 높은 처리량과 낮은 지연 시간 확인, 장기 프로젝트로 전환.

팀

     * Iggy는 약 10명의 멤버로 구성된 팀이 다양한 부분에 기여.
     * 코어 서버, SDK, 웹 UI, CLI 등 다양한 프로젝트에 참여.
     * 프로그래밍에 대한 열정을 공유하는 다양한 경험의 개발자들이 자발적으로 참여.
     * 전 세계에서 온 외부 기여자들의 참여로 프로젝트에 대한 자신감 향상.

기능

     * 고성능, 지속 가능한 로그 기반 메시지 스트리밍 서버.
     * 높은 처리량, 낮은 지연 시간, Rust 컴파일 언어의 예측 가능한 리소스 사용.
     * 다중 스트림, 토픽, 파티션 지원 및 다양한 전송 프로토콜 지원.
     * RESTful API, 다양한 언어의 클라이언트 SDK, 바이너리 데이터 직접 작업.
     * 서버 기능 구성 가능, 소비자 오프셋 서버 저장, 메시지 폴링 다양한 방법 지원.
     * 메시지 순서 및 수평 확장을 위한 소비자 그룹, 메시지 만료 및 중복 제거 기능.
     * 모든 전송 프로토콜에 대한 TLS 지원, 선택적 데이터 암호화 및 메시지 헤더 지원.
     * 스트리밍 서버 관리를 위한 내장 CLI 및 벤치마킹 앱, 단일 바이너리 배포.

로드맵

     * GitHub 트렌딩 페이지에 등장한 후 사용자들과 기능 추가에 대한 논의.
     * 클러스터링, 저수준 I/O, 코어당 스레드 아키텍처를 통한 성능 및 신뢰성 향상 목표.
     * Raft 합의 메커니즘 실험, io_uring을 통한 I/O 작업 개선, monoio 런타임 사용 계획.

미래

     * 일반적인 목적의 메시지 스트리밍 플랫폼과 OS 및 하드웨어 한계 도전 목표.
     * 사용하기 쉬운 통합 플랫폼으로 다양한 프로그래밍 언어, CLI, 웹 UI 지원 계획.
     * 커뮤니티의 피드백과 아이디어를 통한 발전 목표.

   GN⁺의 의견
     * Iggy.rs는 Rust 기반의 메시지 스트리밍 플랫폼으로, 높은 성능과 낮은 지연 시간을 목표로 함.
     * 오픈 소스 프로젝트로서 전 세계 개발자들의 자발적인 참여와 기여를 통해 지속적으로 성장 중.
     * 클러스터링, 저수준 I/O 최적화, 코어당 스레드 아키텍처와 같은 혁신적인 기술을 통해 분산 시스템의 성능 한계를 뛰어넘으려는 야심 찬 목표가 흥미롭고, 이 분야에 관심 있는 사람들에게 매우 유익한 프로젝트임.

        Hacker News 의견

     * 소프트웨어 분야에 처음 관심을 갖게 한 것은 돈이 아닌 공동의 목표를 향해 노력하는 사람들의 이상이었음. 프로젝트에 행운을 빌며, 대안들과의 비교를 통해 프로젝트의 위치를 더 잘 이해할 수 있기를 바람.
     * 블로그 포스팅이 마음에 들며, 저자가 겸손하고 정직하며 건설적인 프로젝트 리더로 보임. 프로젝트에 행운을 빔.
     * JetStream과 직접적인 경쟁 제품으로 보이며, 1년 미만의 작업으로 인상적인 진전을 보임.
     * Fluvio의 기원을 다시 생각하게 한 포스트로, 수십 년간 다양한 분야에서 데이터 중심 애플리케이션과의 긴 관계를 가진 소규모 팀이 Rust와 WebAssembly를 사용한 데이터 스트리밍에 대해 흥분함.
     * Kafka와 Fluvio(또 다른 Rust로 작성된 Kafka 경쟁자)와의 비교가 확실하지 않으나, RabbitMQ와 같은 메시지 큐일 수도 있음.
     * 몇 년 전에 친구와 함께 Go로 비슷한 것을 만들었음.
     * Rust를 배운 후에 시도해보고 싶으며, 사이트의 미학이 마음에 듦.
     * 프로젝트가 흥미롭지만 시도하기 전에 서버 인스턴스를 여러 개 실행하는 방법과 서버 간 파일 시스템 상호작용이 어떻게 작동하는지 이해가 필요함.
     * KeyDB의 스트리밍과 비교했을 때의 장점으로 더 견고한 지속성을 생각함.
     * monoio 선택에 놀람. 야간 컴파일러 사용이 필요하며, 프로젝트 유지 관리에 좋은 선택이 아니라고 생각함.
"
"https://news.hada.io/topic?id=12740","카르타, 고객의 투자자들에게 무단 공개 매수 제안 활동 진행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   카르타, 고객의 투자자들에게 무단 공개 매수 제안 활동 진행

        Hacker News 의견

     * 관련 트윗 링크: 트윗 보기

     시리즈 B 주식 가격으로 구매가 이루어졌음. 해당 천사 투자자는 가족 구성원으로, 투자 사실이 공개되거나 온라인에 거의 나타나지 않았음. 그럼에도 불구하고 Carta를 통해 사용한 이메일로 직접 연락을 받았음.
          + 천사 투자자가 가족 구성원이었으며, 그의 투자는 공개되지 않았음에도 불구하고 Carta를 통해 사용한 이메일로 직접 연락을 받았다는 사실이 언급됨.
     * Carta에 대한 비판적인 의견:

     Carta는 B2B 소프트웨어의 Facebook과 같으며, 사용자 데이터를 수집한 후 예상치 못한 방법으로 이를 활용해 수익을 창출함. 그들의 비즈니스 모델은 항상 미끼와 전환 전략에 기반을 두고 있음. 이것이 그들이 높은 평가를 정당화하는 방법임 (예: ""우리가 사적 증권의 가장 큰 시장을 만들 수 있다면 얼마나 부자가 될까!!""). 그렇지 않으면 자본표 관리 시장은 그리 크지 않음.
          + Carta가 사용자 데이터를 수집하고 예상치 못한 방법으로 수익화하는 전략을 사용하며, 자본표 관리 시장 자체는 크지 않다는 의견을 제시함.
     * Carta의 조직적 문제에 대한 의문:

     Carta가 자신들의 입장을 밝힐 것이지만, 최근 시간에 보여준 조직적 무질서의 연속일 수 있음. 이것은 정말 나쁜 인상을 주며, Carta가 기본적인 자본표 및 직원 지분 관리 이상의 가치를 제공하는 데 실패함에 따라 다른 회사들이 그들을 대체할 날이 멀지 않았을지도 모름.
          + Carta가 조직적 무질서를 보여주고 있으며, 기본적인 자본표 및 직원 지분 관리 이상의 가치를 제공하지 못하고 있다는 우려를 표현함.
     * 해커뉴스 피드 순위에 대한 의문:

     HN 프론트페이지에서 많은 시간을 보냈고, 이 게시물의 피드 순서가 이상하다고 느낌. 이 게시물은 상위에 있어야 하지만 현재 27위에 있으며, 이보다 높은 순위의 게시물들은 더 적은 업보트와 댓글을 받았고, 더 오래전에 게시됨.
          + 게시물의 해커뉴스 피드 순위가 이상하게 느껴지며, 더 많은 업보트와 댓글을 받았음에도 불구하고 낮은 순위에 있다는 의문을 제기함.
     * 사적 회사의 이차 시장 구매자에 대한 개념에 대한 혼란:

     사적 회사의 이차 시장 구매자가 특정 가격에 거래를 해야 하지만 더 높은 가격을 지불할 수도 있는 상황을 이해하는 데 어려움을 겪고 있음. Carta의 자본 시장 부서와 거래를 한 구매자가 Carta가 XYZ 스타트업의 주식을 찾을 수 있다면 해당 주식을 $x에 구매하기로 동의했지만, 이사회의 승인 조건으로 더 높은 가격을 지불해야 하는 경우가 있을 수 있음.
          + 사적 회사의 이차 시장에서 주식을 구매하는 구매자가 특정 가격에 거래를 해야 하는 상황에 대해 혼란을 표현함.
     * 트윗 작성자의 Carta에 대한 우려:

     사적 회사들은 일반적으로 이차 거래를 원하지 않거나 허용하지 않음. 모든 좋은 회사는 자본표를 관리하고 누가 그 위에 있는지 관리하고자 함. 모든 주주는 일정 수준의 권리를 가지고 있으며 때때로 그들의 서명이 필요함. 문제가 되는 주주는 회사에 많은 시간을 소비하게 만드는 문제를 일으킬 수 있음. 회사는 때때로 직원과 기존 투자자에게 이차 판매를 제공하지만, 그 경우 구매자는 회사에 의해 검증됨. 누군가 주식을 팔고 싶다면, 기존 주주들 중에서 구매자를 찾을 수 있을 것임에 틀림없음.
          + 사적 회사들은 일반적으로 이차 거래를 원하지 않으며, Carta가 고객인 스타트업에 해를 끼치려는 시도로 보인다는 우려를 표현함.
     * Carta의 문화에 대한 우려:

     최근 Carta에서 발생한 사건들을 바탕으로, 그곳의 문화는 상당히 독성이 있는 것으로 보임.
          + Carta의 문화가 독성을 가지고 있다는 우려를 나타냄.
     * 스타트업 직원의 혼란:

     스타트업에서 일하고 있지만, 이 스레드의 절반 이상의 댓글을 이해하지 못함. 무슨 일이 벌어지고 있는지 설명해줄 수 있는 몇 시간 분량의 콘텐츠를 듣거나 읽고 싶음.
          + 스타트업 직원이 현재 상황을 이해하는 데 어려움을 겪고 있으며, 설명을 원함.
     * Carta 직원에 대한 비판적인 의견:

     아마도 무지한 ""고객 성공"" 매니저일 것이며, 자신이 어떤 회사에서 일하고 있는지, 누가 고객인지, 무슨 요일인지조차 모르고 있을 것임. Salesforce에서 무의미하게 클릭하고 회의 사이에 이메일을 복사하여 붙여넣으며 키보드에 침을 흘리고 있을 것임.
          + Carta의 ""고객 성공"" 매니저에 대한 비판적인 의견을 제시함.
"
"https://news.hada.io/topic?id=12675","실온 근처에서의 가능성 있는 마이스너 효과: 구리로 대체된 납 아파타이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                실온 근처에서의 가능성 있는 마이스너 효과: 구리로 대체된 납 아파타이트

구리로 대체된 납 아파타이트에서 가능한 상온 마이스너 효과

     * 구리로 대체된 납 아파타이트에서 상온에 가까운 온도에서 다이아마그네틱 직류 자기화를 관찰함.
     * 25 Oe의 자기장에서는 두드러진 영자장 냉각과 자장 냉각 측정 사이의 분기를 보이며, 200 Oe에서는 상자성으로 변함.
     * 냉각 중 유리 메모리 효과가 발견되었고, 250 K 이하에서 전형적인 초전도체의 히스테리시스 루프와 자기장의 전후 스윕 사이의 비대칭성이 감지됨.
     * 실험을 통해 이 물질에서 상온에서 마이스너 효과가 있을 가능성을 제시함.

GN⁺의 의견

     * 이 연구는 상온에서 초전도 현상을 보이는 새로운 물질을 발견했다는 점에서 중요함.
     * 상온 초전도체의 발견은 에너지 전송과 저장 기술에 혁명을 가져올 수 있는 잠재력을 가짐.
     * 초전도체 연구는 물리학뿐만 아니라 실용적인 응용 기술에도 중대한 영향을 미치므로, 이 연구 결과는 과학과 산업 모두에게 흥미롭고 유익함.

        Hacker News 의견

     * 중국 팀의 상온 초전도체 연구
          + 두 중국 팀이 LK-99 유래의 상온 초전도체 개발을 공개적으로 추구하고 있었음. 이들을 '북중국 팀'과 '남중국 팀'이라고 임의로 명명함.
          + 북중국 팀은 베이징에 거주하는 홍양 왕이 이끌고, 남중국 팀은 광저우에 거주하는 야오 야오가 이끔.
          + 두 팀은 서로 다른 합성 방법과 분석 방법을 사용함. 북중국 팀은 수열 합성과 SQUID 측정을, 남중국 팀은 고체 상태 합성과 EPR 측정을 사용함.
          + 이 논문은 두 팀의 공동 연구 결과로, 서로의 결과를 재현하고 명확한 초전도성의 징후를 측정함. '상온에 가까운' 초전도체로, 250K (-23°C)에서는 확실하지만 300K에서는 확실하지 않음.
          + 관심이 있다면, 두 팀의 뒷이야기가 담긴 게시물을 읽어볼 것을 추천함. 해당 게시물은 중국어로 되어 있음.
     * 온도 관련 의견
          + 250K는 -23°C 또는 -9°F로, 매우 추운 겨울 날씨와 비슷함. 이는 거의 상온에 가까움.
          + 단 한 번의 성공적인 사례만 있어도 큰 진전이 될 것이며, 매년 그 가능성이 가까워지고 있는 것 같음.
          + 250K는 -23.15°C이며, 모스크바의 현재 날씨가 -23°C ~ -26°C임을 참고로 함. 따라서 정확히 상온은 아니지만, 일부 도시의 외부 온도와 비슷함.
     * LK99 사가에 대한 의견
          + LK99 사가를 조금 따라온 바로는, 제대로 된 마이스너 효과가 자석 위에서 떠 있고, 건드리면 다른 위치에서 유지되는 모습이 LK99가 보여준 반자성 물질의 한쪽 끝이 자석에 닿고 약간 흔들리는 것과 매우 다름.
          + 위와 같은 비디오를 보여주기 전까지는 회의적임.
     * 초전도체 연구에 대한 기타 의견
          + '히스테리시스' 효과는 시료에 있는 철 오염의 작은 입자들에 의해서도 발생할 수 있음.
          + 안톤 페트로프가 이에 대한 비디오를 만들기 전까지는 실제로 존재하는 것으로 보지 않음.
          + 주요 연구자들이 이러한 과학을 공개적으로 수행하는 것이 더 낫다는 것을 인식하는 것이 좋음.
          + 정말로 이 연구가 진실이기를 바람.
          + 이 특정한 연구 경로가 계속되는 것을 보는 것이 훌륭함.
"
"https://news.hada.io/topic?id=12659","살림 카라, 자석과 자동차 안테나로 200만 달러 상당의 동전 절도 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              살림 카라, 자석과 자동차 안테나로 200만 달러 상당의 동전 절도 (2022)

살림 카라, 자석과 차량 안테나로 2백만 달러 상당의 동전 훔치다

     * 13년 동안 살림 카라는 차량 안테나와 자석을 사용하여 에드먼턴 LRT에서 한 번에 한 동전씩 총 230만 달러를 훔침.
     * 살림 카라는 우간다 출신으로 이디 아민 정권을 피해 1972년 영국으로 망명한 후 캐나다로 이주해 에드먼턴에 정착함.

자석으로 동전 낚시

     * 1981년, 카라는 에드먼턴의 경전철 시스템인 LRT의 68개 티켓 기계를 유지보수하는 일을 맡음.
     * 카라는 기계의 기능만 유지보수했기 때문에 직접적으로 현금함에 접근할 수는 없었음.
     * 혼자 밤에 일하면서, 카라는 자석이 달린 차량 안테나를 이용해 티켓 기계 현금함에서 동전을 낚아채는 방법을 개발함.

무거운 전리품 은행에 맡기기

     * 살라미 슬라이싱 사기는 눈에 띄지 않을 정도로 작은 금액을 훔치는 것에 초점을 맞춤.
     * 카라는 자신이 성공적인 자판기 사업을 운영한다고 은행에 설명함.
     * 1987년 캐나다가 1달러짜리 동전을 도입하면서 카라의 주간 수입이 거의 두 배로 증가함.

카라의 동전으로 만든 부동산 제국

     * 카라는 사기 수익으로 투자를 시작하여 빅토리아에 집을 구입하고 에드먼턴에 두 채의 집을 더 구입함.
     * 카라는 겉으로 보이는 부의 징후로부터 거리를 두면서 낮은 프로필을 유지하는 데 똑똑했음.

살림 카라의 동전 사기 숫자로 보기

     * 총 훔친 금액: $2,327,890
     * 사기를 유지한 기간: 13년
     * 훔친 동전의 추정 총 무게: 37톤
     * 카라의 범죄로 인한 승객 요금 상당: 200만 건
     * 카라의 전리품을 일렬로 늘어놓으면 약 150km에 달함.

모든 좋은 일에는 끝이 있다

     * 카라는 13년 동안 LRT 요금의 20%를 훔쳐 약 200만 명의 고객 여정에 해당하는 금액을 챙김.
     * 두 번의 감사에서 요금과 현금 수입 사이의 차이에도 불구하고, 그가 더 일찍 잡히지 않은 것은 믿기 어려움.
     * 1993년, 도시 당국은 사설 조사관을 고용하여 카라를 관찰하게 하고, 결국 1994년 3월에 그를 현장에서 잡음.
     * 카라는 1996년 3월에 법정에서 자신의 이야기를 공유하겠다는 애매한 진술을 함.

GN⁺의 의견

     * 이 기사는 단순한 도구를 사용하여 대규모 사기를 저지른 살림 카라의 이야기를 통해 창의성과 인내가 어떻게 결합되었는지 보여줌.
     * 카라의 사기는 기술적인 측면보다는 기본적인 물리적 도구를 사용하여 장기간에 걸쳐 수행되었다는 점에서 특히 흥미로움.
     * 이 사건은 공공 시스템의 취약성과 감사 및 감시 메커니즘의 중요성을 강조하며, 현대 사회에서도 간과되기 쉬운 보안의 기본 원칙을 상기시킴.

        Hacker News 의견

     * 대중교통에서 돈을 훔치는 것은 오래된 수법임.
          + 보스턴에서 약 15년 전에 토큰에서 찰리 카드로 전환하는 과정에서 드러난 사례가 있었음. MBTA 정비사가 토큰을 현금으로 바꾸기 위해 계속 가방을 들고 나타나는 것이 수상해 적발됨.
          + 새로운 카드 시스템에서도 도난 사건이 발생함.
               o 링크: MBTA 도난 사건
          + 어린 시절 주차 미터기 스캔들이 있었으며, 대부분의 수집가들이 연루되었음. 한 조사관의 인용문에서 보스턴의 미터기가 매우 오래되었으며 동전을 넣는 것보다 꺼내기가 더 쉬웠다고 함.
               o 링크: 보스턴 미터기 스캔들 기사
     * 13년 동안 밤마다 자석화된 자동차 안테나를 사용해 한 번에 한 동전씩 200만 달러를 훔치는 것은 실제로 힘든 일임. 이는 ""쇼생크 탈출""의 반대 상황임.
     * 캐나다 동전에 자석이 붙는 정도의 철분이 포함되어 있다는 사실이 흥미로움. 이러한 특성이 자판기나 다른 동전 슬롯 메커니즘의 내부 작동에 문제를 일으키지 않을까 하는 의문 제기.
     * 1981년에 연봉 38,000달러로 에드먼턴 경전철 시스템의 68개 티켓 기계 유지보수를 맡은 카라의 급여가 인상적임.
     * 카라의 실질적인 급여가 상당히 좋았음. 많은 소프트웨어 개발자들이 몇 년 동안 받은 것보다 많음.
     * 카라가 티켓 기계의 전면 판을 제거하고, 자석 끝이 달린 자동차 안테나로 만든 낚싯대 같은 도구를 사용해 동전을 하나씩 낚아 셰이빙백에 담았음. 그의 장치 작동 방식에 대한 시각적 설명이 부족해 이해하기 어려움.
     * 주차 미터기가 어떻게 생겼는지에 대한 혼란이 많음. 1980년대 에드먼턴에서 본 것과 같은 오래된 사진이 있는 문서를 참조하면 도움이 됨. 디지털 디스플레이나 열 프린터는 없었으며, 각 주차 공간마다 하나씩 많은 미터기가 있었음. 나중에 디지털 디스플레이/타이머 미터기로 교체되었지만 프린터는 여전히 없었음.
          + 링크: 주차 미터기 문서
          + 주의: 이 문서는 LRT 기계가 아닌 주차 미터기에 관한 것임.
     * 카라가 사기 행각으로 얻은 돈을 도시의 보험사에 갚음으로써, 16개월 후에 석방됨. 30년 전 일이라 정보를 찾기 어려움, 벌금을 냈는지 궁금함. 벌금을 내지 않았다면, 200만 달러를 부동산에 투자해 상당한 이득을 본 것으로 보임.
     * 카라가 너무 쉽게 벗어난 것 같음. 500개의 대마초 식물을 소유한 것만으로도 최소 2년은 감옥에 있어야 함.
     * 자판기 사업에서 수익을 얻었다고 주장하는 것은 똑똑한 전략이었음. 실제로 여러 자판기를 운영했는지, 그리고 그것이 설득력 있게 보이기 위해 상품 매입에 대한 영수증을 보여줄 수 있어야 함. 돈세탁은 어려운 일임.
"
"https://news.hada.io/topic?id=12663","HALAC - 매우 빠른 무손실 오디오 압축 코덱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HALAC - 매우 빠른 무손실 오디오 압축 코덱

     * HALAC : High Availability Lossless Audio Compression
     * 합리적인 압축률과 빠른 처리속도에 중점을 둔 오디오 포맷
          + 무손실 이미지 압축 포맷인 HALIC의 개발자인 Hakan Abbas가 제작
     * 압축 테스트에서 WAVPACK, FLAC 대비 압축률은 약 1~5% 정도 낮지만, 압축 및 해제 속도가 5배 이상 빠름
     * GPU/SIMD 는 사용하지 않는 싱글 쓰레드 버전. 다음 버전엔 멀티쓰레드 옵션을 추가할 예정

   와 진짜 빠르긴 하네요. 벤치마크를 보니까 FLAC 같은 상용 코덱보다 거의 5배 정도 빨라보이네요.
   다만 댓글에선 코덱에 에러체크나 무결성 검사 같은 알고리즘이 안 들어있는걸 많이 지적하나봅니다. 무손실 코덱이니까 이런게 꼭 있어야 한다고 하는 것 같은데... 혹시 이쪽으로 잘 아는 분 계신가요? 파일이 손상되어 있는 채로 재생이 이뤄지는 걸 사전에 차단해야한다 뭐 그런얘기인건지...
"
"https://news.hada.io/topic?id=12628","가짜 나무: 더 간단한 UI를 위한 들여쓰기 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      가짜 나무: 더 간단한 UI를 위한 들여쓰기 사용

가짜 나무: 들여쓰기를 이용한 간단한 UI

     * UI에서 트리 형태의 목록을 원할 때, 부모-자식 관계를 구현하는 것이 많은 작업과 복잡한 데이터 구조를 필요로 함.
     * 관계형 데이터베이스에서는 재귀적 CTE(Common Table Expressions)를 사용하여 트리 구조 데이터를 얻을 수 있음.

데이터가 정말 트리 구조여야 하는가?

     * 항목들이 실제로 부모-자식 관계를 가져야 하는지, 아니면 단지 그렇게 보이기만 하면 되는지 고려 필요.
     * 실제 관계가 필요 없다면, 'id', 'sort', 'indent', 'name' 필드를 사용하여 트리를 간단히 저장할 수 있음.
     * 이 방식은 화면에 보이는 것을 그대로 표현하므로, 목록을 렌더링하고 편집하는 인터페이스를 만드는 것이 훨씬 간단함.

""네임스페이싱""을 사용한 또 다른 예

     * HissScript에서는 항목 이름에 점(""."")이 있으면 첫 부분을 잘라내고 항목을 들여쓰기함으로써 네임스페이싱 기능을 구현.
     * 게임 편집기와 플레이어에게는 네임스페이싱이 중요하지만, 실제로는 단순한 이름일 뿐임.
     * 사람들은 종종 실제 트리 구조보다는 그것의 외관만 필요로 함.

보너스 트리-리스트

     * 실제 나무를 모방하여 경로와 정보를 평면 목록에 저장하고, 깊이 우선 또는 너비 우선 순회를 위해 경로를 정렬함.
     * 평면 목록은 일반적으로 작업하기 쉽고 컴퓨터에 적합함.

물리적 비유

     * 개인 스크랩북을 정리할 때, 사람에게는 그룹의 작동 방식이 명확하지만, 실제로 바닥에는 그러한 관계를 강제하는 물리적 메커니즘이 없음.

주의: 모든 상황에 맞는 해결책은 없음

     * 특정 시나리오에 맞게 기술을 적용해야 하며, 실제 트리 구조가 필요한 경우에는 트리를 사용해야 함.
     * 실제 항목 간의 관계를 알아야 할 경우에는 들여쓰기나 문자열 내의 기호를 세는 방식의 해킹을 사용하지 말 것.

   GN⁺의 의견:
     * 이 기사는 소프트웨어 개발에서 복잡한 트리 구조 대신 시각적으로 단순한 들여쓰기를 사용하여 사용자 인터페이스를 단순화하는 방법을 제시함.
     * 개발자들에게는 데이터 구조를 단순화하여 개발 시간을 절약하고 유지보수를 용이하게 하는 효과적인 전략을 제공함.
     * 이 기사는 트리 구조가 항상 필요한 것은 아니며, 때로는 사용자에게 친숙한 시각적 구조만으로 충분하다는 점을 강조함으로써, 개발자들이 사용자 경험을 개선할 수 있는 새로운 관점을 제공함.

        Hacker News 의견

     * 첫 번째 접근 방식인 '인접 리스트(adjacency list)'는 ""분명히 유일한 방법""이라고 여겨지는 방식임.
     * 두 번째 방식은 ""훨씬 간단한 방법""으로, 이전에 본 적 없는 방식이며 명백한 결점이 있지만, 어떤 경우에는 충분히 명확함.
     * 세 번째 방식인 '네임스페이싱(namespacing)'은 '구체화된 경로(materialized path)'라고 불림.
     * 트리를 표현하는 또 다른 방식으로 '중첩 집합(nested sets)'이 있으며, 이는 관계형 데이터베이스를 심각하게 다루던 시절에 잘 알려진 방식임.
     * Postgres는 'ltree'라는 데이터 타입과 검색 연산자를 제공하여, 트리 구조를 자연스럽게 다룰 수 있음. 예를 들어, 'ltree'를 사용하여 테이블을 생성하고 데이터를 삽입한 후 간단한 검색을 통해 트리 구조를 조회할 수 있음.
     * 구조 내의 값은 종종 표시된 트리가 아닌 데이터의 계층 구조임. 데이터를 순회하거나 관계를 보여주거나 재정렬하는 등의 작업을 수행하고 싶을 것임. 데이터베이스 내의 데이터 구조에 시각적 정보를 저장하는 것은 단기적인 시각으로 보일 수 있음.
     * 트리 형태의 데이터를 다루는 회사를 창업한 경험이 있음. 트리 구조를 O(n) 시간에 들여서 들여쓰기된 목록으로 변환하는 것이 가능함. 이는 인터뷰 질문 중 하나였으며, 재귀적 쿼리 없이도 트리의 일부를 빠르게 가져오고 렌더링할 수 있는 다양한 방법이 SQL 데이터베이스에 존재함.
     * SQL 쿼리를 사용하여 관계형 데이터베이스에서 트리 구조 데이터를 가져오는 한 가지 방법은 재귀적인 CTE(Common Table Expressions)를 작성하는 것임. CTE는 실제로 재미있으며, 한 번 익숙해지면 두려워할 것이 없음.
     * 사람들은 종종 실제로 트리를 원하지 않으며, 단지 트리의 외관만 필요로 함을 경험을 통해 배움. HN과 Reddit은 이 점에서 차이가 있음. HN에서는 자식 댓글이 부모 댓글의 다음 형제로, 들여쓰기를 부모의 들여쓰기에 하나를 더해 트리의 외관을 모방함. 반면 Reddit에서는 자식 댓글이 실제로 부모 댓글 내에 중첩됨.
     * 기사의 핵심 아이디어는 문제에 적합한 구조를 사용하는 것임. 그러나 이야기의 전개는 결함이 있음. 트리를 데이터베이스에서 검색하기 위해 CTE가 필요하지 않으며, 트리를 로컬에서 구성하기 위해 평면 목록을 가져올 수 있음. 또한, 충분히 큰 트리의 경우 가지를 이동하거나 깊이를 변경하고자 할 때 선형 비용이 발생할 수 있음.
     * 분류 체계나 다른 계층 구조를 설명할 때, 로컬 파일 시스템을 사용하는 간단하고 빠른 방법을 습득함. 'mkdir'와 'tree' 명령을 사용하여 이메일, 슬랙, pastebin 등에 붙여넣어 전달함.
     * 저장/로딩만 원한다면, 데이터를 원하는 방식으로 직렬화(예: JSON)하여 문자열로 저장하는 것이 더 단순한 해결책일 수 있음. 점 표기법을 사용하는 것은 VsCode 확장 프로그램인 Dendron이 이름 계층을 다루는 방식과 유사함.
     * 몇 년 전 OpenGL에 대한 비슷한 깨달음을 얻음: 계층적인 3D 객체의 세계를 그릴 필요가 없으며, 단지 정렬된 삼각형 목록을 그리면 됨. 이는 많은 최적화를 매우 쉽게 만듦.
"
"https://news.hada.io/topic?id=12626","앱 스토어에서 사용 가능한 ScummVM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         앱 스토어에서 사용 가능한 ScummVM

ScummVM 앱 개요

     * ScummVM은 iPhone과 iPad용 App Store에서만 이용 가능한 앱으로, 클래식 그래픽 포인트 앤 클릭 어드벤처 게임과 RPG를 플레이할 수 있는 방법을 제공함.
     * 게임 데이터 파일은 포함되어 있지 않으며 사용자가 직접 제공해야 함.
     * 앱 개발자인 Eugene Sandulenko는 데이터 수집을 하지 않으며, 개인정보 처리 방침은 앱의 특징이나 사용자의 나이에 따라 다를 수 있음을 밝힘.

앱 정보 및 지원

     * 앱 크기는 154.2MB이며, iOS 9.0 이상이 필요함.
     * 게임 컨트롤러와의 호환성이 권장되며, 최상의 경험을 위해 컨트롤러 사용이 설계됨.
     * 앱은 영어로 제공되며, 9세 이상 사용자를 대상으로 함.
     * 앱은 무료이며, 개발자 웹사이트와 앱 지원, 개인정보 처리 방침 링크가 제공됨.

GN⁺의 의견

     * ScummVM 앱은 클래식 게임 애호가들에게 흥미로운 도구로, 과거의 어드벤처 게임과 RPG를 현대의 모바일 기기에서 즐길 수 있는 기회를 제공함.
     * 개발자가 데이터를 수집하지 않는다는 점은 사용자의 프라이버시를 중시하는 현대적인 앱 개발 추세를 반영함.
     * 게임 컨트롤러와의 호환성은 사용자에게 더욱 몰입감 있는 게임 경험을 제공할 수 있어, 게임 플레이의 질을 높이는 중요한 요소임.

        Hacker News 의견

     *
          + 몽키 아일랜드의 훌륭한 리마스터 버전이 아이폰을 포함한 몇몇 플랫폼에 출시되었으나, 몇 년 후 앱스토어에서 삭제되었음. 새로운 아트워크와 사운드/음악이 인상적이었고, 오래된 아트와 비교하며 각 장면의 차이를 볼 수 있는 기능이 멋졌음에도 불구하고 삭제된 것은 아쉬움.
     *
          + 애플은 앱스토어에서 모든 종류의 에뮬레이터를 허용하지 않는데, 이것이 어떻게 앱 리뷰를 통과했는지 의문. 이 에뮬레이터가 곧 삭제될 것이라고 예상함.
     *
          + 5살 아들이 안드로이드 태블릿에서 가장 좋아하는 앱은 ScummVM임. 스팀에서 Putt Putt, Freddy Fish, Spy Fox 게임을 구매하고 데이터 파일을 안드로이드의 ScummVM으로 옮겨 아들이 즐겁게 플레이함. 이러한 게임들이 반복적인 루프, 카운트다운 타이머, 인앱 구매를 통해 어린이를 대상으로 하는 유해한 모바일 게임들보다 낫다고 생각함.
     *
          + ScummVM에서 실행할 수 있는 합법적인 이미지를 얻을 수 있는 곳이 있는지 궁금함.
     *
          + ScummVM은 특정 클래식 그래픽 어드벤처 및 롤플레잉 게임을 실행할 수 있게 해주는 프로그램으로, 게임의 데이터 파일이 있어야 함. ScummVM은 게임과 함께 제공되는 실행 파일을 대체하여 원래 설계되지 않은 시스템에서 게임을 플레이할 수 있게 해주는 것이 특징임. ScummVM은 게임의 실행 파일을 완전히 다시 작성한 것이며 에뮬레이터가 아님. 325개 이상의 어드벤처 게임을 지원하며, LucasArts, Sierra On-Line, Revolution Software, Cyan, Inc. 및 Westwood Studios와 같은 유명 스튜디오의 클래식 타이틀을 포함함.
     *
          + 많은 사람들이 이 앱이 어떻게 앱 리뷰를 통과했는지에 대해 더 많은 설명을 요구하고 있으며, 일부는 가이드라인 2.5.2를 언급함. ScummVM은 2.5.2 금지 사항에 해당하지 않으며, 일반적으로 원하는 에뮬레이터를 방지하는 가이드라인에 대한 오해가 있음. 에뮬레이터는 주로 저작권 보호된 바이오스 파일이 필요하기 때문에 지적 재산 가이드라인 §5.2에 따라 일반적으로 금지됨. 일부 에뮬레이터는 DMCA 요청 후 삭제되었고, 다른 에뮬레이터는 다른 앱으로 위장했다가 삭제됨. ScummVM은 이러한 문제에서 겉보기에 자유로움, 하지만 더 큰 문제는 GPLv3 라이선스 하에 있으며, 애플은 FSF가 시도한 전략이 실패한 후 GPL(v3) 앱을 앱스토어에서 허용하지 않는 비공식 정책을 가지고 있음.
     *
          + Dreamm이라는 것도 있음.
     *
          + ScummVM 2.8.0은 전반적으로 상당히 큰 릴리스이며, 앱스토어 출시는 그저 시작에 불과함. 지원되는 게임 목록이 많이 성장했으며, 이제는 Adibou 시리즈, 첫 번째 Might & Magic 게임, Muppet Treasure Island 등을 실행할 수 있음. Broken Sword 엔진에 대한 광범위한 리뷰도 많은 작은 누락된 기능을 복원함. 클래식 어드벤처 게임에 조금이라도 관심이 있다면 ScummVM을 확인해볼 것을 권장함.
     *
          + ScummVM과 관련된 이전 게시물들에 대한 링크 제공.
     *
          + 모바일에서 클라우드 스토리지 제공업체를 사용하지 않고 게임을 직접 로드할 수 있는 방법이 있는지 궁금함. ScummVM 페이지에서 무료로 다운로드할 수 있는 게임들이 있으며, 모바일에서 zip 파일을 다운로드할 수는 있지만 앱으로 가져오는 방법을 찾을 수 없음.
"
"https://news.hada.io/topic?id=12669","대규모 언어 모델을 위한 검색-증강 생성(RAG) 기술 현황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   대규모 언어 모델을 위한 검색-증강 생성(RAG) 기술 현황

    PyTorchKR

     * LLM의 인기와 함께 RAG에 대한 관심도 높아지고 있습니다. 파이토치 한국 사용자 모임에서는 지난 12/18~24의 주요 ML 논문들에 소개된 RAG 기술에 대한 서베이 논문을 정리해보았습니다.
     * 내용이 다소 길어 2개의 글로 나눠 게시하였으며, 1부에서는 RAG 기술의 패러다임들을, 2부에서는 주요 구성요소들과 평가, 앞으로의 연구 과제들에 대해서 정리했습니다.

   아래는 목차 중심으로 주요 내용들만 발췌한 것입니다


  검색-증강 생성(RAG) 기술 소개

   대규모 언어 모델(LLM)은 뛰어난 능력을 보이지만, 실제 사용을 위해서는 환각이나 느린 지식의 업데이트, 답변의 투명성 부족 등과 같은 문제들을 극복해야 합니다. RAG(Retrieval-Augmented Generation)는 이러한 문제를 해결하기 위해 제안된 기술입니다.

   RAG는 대규모 언어 모델(LLM)에서 질문에 대한 답변이나 텍스트를 생성하기 전에 광범위한 문서 집합에서 관련 정보를 검색하고, 이를 이용하여 응답을 생성하는 방법입니다. 이는 LLM의 기존 문제점인 지식의 시대에 뒤떨어짐, 특정 영역에 대한 지식 부족, 그리고 응답의 투명성 부족을 해결하는 데 중점을 두고 있습니다.

   이러한 RAG는 답변의 정확도를 크게 향상시키고, 특히 지식 집약적인 작업에서 모델의 환각을 줄이는 데 도움이 됩니다. 사용자가 출처를 인용하여 답변의 정확성을 검증할 수 있으며, 이는 모델 출력에 대한 신뢰를 증가시킵니다. 또한, 지식 업데이트와 특정 분야의 지식 도입에도 용이합니다.

   RAG 외에 파인튜닝(fine-tuning)을 사용하여 대규모 언어 모델이 특정 지식에 집중하도록 할 수 있습니다. 하지만 이러한 파인튜닝은 실시간으로 업데이트되는 정보를 반영하는데 시간이 걸리며, 모델을 새로 학습시키는데 추가적인 자원이 소모됩니다. 이에 반해, RAG는 LLM에 특정 질의에 대한 정보를 검색할 수 있는 '참고서'를 제공하는 것과 유사합니다.

  RAG의 3가지 주요 패러다임 - 개요

   RAG 기술의 연구 패러다임은 시간에 따라 끊임없이 발전하고 있습니다. 주요 패러다임들은 기본 RAG, 고급 RAG, 모듈형 RAG의 3가지로, 초창기의 기본 RAG는 비용 효율적이고 LLM만 사용하는 것보다 성능이 뛰어났지만 많은 단점들이 있었습니다. 고급 RAG와 모듈러 RAG의 등장은 기본 RAG의 특정 결함을 해결하기 위한 것이었습니다.

  RAG의 3가지 주요 패러다임 - 기본 RAG(Naive RAG)

   기본 RAG는 RAG 연구의 초기 방법론을 지칭하며, 전통적인 인덱싱, 검색 및 생성 과정을 포함하고 있습니다. 기본 RAG는 주로 간단한 검색 및 생성 방식에 초점을 맞추고 있으며, RAG의 기본 개념과 원리를 설명하는데 중요합니다.

   하지만, 낮은 검색 정확도, 응답 생성의 낮은 품질, 증강 과정의 어려움 등에 따라 발생하는 불필요한 반복, 부정확한 정보, 잘못된 문맥의 통합 등이 발생할 수 있습니다. 따라서 복잡하거나 도전적인 시나리오에 기본 RAG를 사용하기는 부적절할 수 있습니다.

  RAG의 3가지 주요 패러다임 - 고급 RAG(Advanced RAG)

   고급 RAG는 기본 RAG의 부족한 점을 개선하기 위해 개발된 패러다임입니다. 이는 주로 검색 및 생성의 질을 향상시키기 위한 사전 및 사후 검색 방법을 포함합니다. 고급 RAG는 크게 검색 전 절차(Pre-Retrieval Process), 검색 후 절차(Post-Retrieval Process), RAG 파이프라인 최적화(RAG Pipeline Optimization)의 3단계로 나누어볼 수 있습니다:

  RAG의 3가지 주요 패러다임 - 모듈형 RAG(Modular RAG)

   모듈식 RAG은 고급 RAG의 발전된 형태로, 기존의 RAG 프레임워크에서 한 단계 더 나아가 다양한 모듈과 기능을 통합하여 더 큰 다양성과 유연성을 제공합니다. 이 접근 방식은 RAG 시스템을 다양한 시나리오와 요구 사항에 맞게 조정할 수 있도록 하는 여러 새로운 모듈과 패턴을 포함하고 있습니다.

  RAG 기술의 주요 구성 요소: 검색기(Retriever)

   검색기(Retriever)는 RAG라는 약어의 맨 앞 글자인 R을 나타내고 있을 정도로 시스템에서 중요한 정보 탐색 역할을 합니다. 검색기는 대규모 데이터 집합에서 관련 정보를 찾아내어 텍스트 생성을 위한 데이터들을 준비하는 작업을 합니다​​. 이러한 검색기는 LLM의 일반적인 지식과 현재, 맥락적으로 정확한 정보의 필요성 사이의 간격을 메우는 데 사용됩니다. 이는 실시간 데이터, 특정 분야 전문 지식 또는 사실 확인이 필요한 시나리오에서 특히 중요합니다​​.

  RAG 기술의 주요 구성 요소: 생성기(Generator)

   앞에서 살펴본 검색기(Retriever)의 역할이 사용자의 입력으로부터 후보 문서들을 추출하는 것이었다면, 생성기(Generator)의 역할은 검색된 결과를 활용하여 사용자에게 제공할 답변을 생성하는 것입니다. 검색된 정보를 효과적으로 활용하여 정확하고 관련성 높은 답변을 생성하기 위해, 정보를 압축하고 순위를 다시 매기는 후처리 과정과 입력 데이터에 적응하는 최적화 과정을 수행하고 있습니다.

  RAG 기술의 주요 구성 요소: 증강 방법(Augmentation Methods)

   이 챕터에서는 RAG에서의 증강 방법을 다음 3가지 측면으로 살펴보겠습니다.
     * 증강 단계(the stage of augmentation)
     * 데이터 소스의 증강(augmentation data sources)
     * 증강 절차(the process of augmentation)

  RAG 평가 (RAG Evaluation)

   RAG 평가(RAG Evaluation)는 RAG가 얼마나 효과적으로 동작하는지를 평가하는 것입니다. 평가는 크게 2가지 종류로 나뉘는데, 하나는 검색기나 생성기 등의 각각의 모듈들에 대한 독립적인 평가(independent evaluation)과 입력으로부터 출력까지의 전체 과정을 평가하는 엔드-투-엔드 평가(end-to-end evaluation; 종단간 평가)가 있습니다. 각각의 평가 방법들과 평가 시의 지표(metric), 사용할 수 있는 프레임워크(framework) 등에 대해서 알아보도록 하겠습니다.

  RAG의 미래 전망 (Future Prospects)

   RAG의 수직적 최적화와 수평적 확장, 그리고 RAG의 생태계에 대한 내용을 다루고 있습니다.


   ⚠️광고: 파이토치 한국 사용자 모임이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일로 보내드립니다! (기본은 Weekly지만 Daily로 변경하실 수도 있습니다.)

   좋은 자료 공유해주셔서 감사합니다

   앗, 읽어주셔서 감사합니다!
   혹시나 읽으시면서 이상하거나 잘못된 부분을 발견하시면 알려주시기를 부탁드립니다. ^^;
"
"https://news.hada.io/topic?id=12743","마이크로소프트 Phi-2 모델, MIT 라이선스로 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     마이크로소프트 Phi-2 모델, MIT 라이선스로 변경

라이선스 변경

     * Microsoft의 phi-2 모델에 대한 라이선스가 MIT 라이선스로 변경됨.
     * 변경된 라이선스는 사용자에게 소프트웨어의 복사, 수정, 병합, 배포, 서브라이선스 부여 및 판매를 포함한 제한 없는 권리를 부여함.
     * 소프트웨어는 ""있는 그대로"" 제공되며, 명시적이거나 묵시적인 어떠한 종류의 보증도 제공하지 않음.

공지사항 추가

     * 소프트웨어에는 제3자의 자료가 포함되어 있으며, Microsoft는 특정 오픈 소스 코드를 제공함.
     * GNU Lesser General Public License에 따라 라이선스된 라이브러리의 변경 사항을 디버깅하기 위해 필요한 범위 내에서 소프트웨어의 역공학이 허용됨.

README 변경

     * phi-2 모델의 라이선스 정보가 기존의 Microsoft 연구 라이선스에서 MIT 라이선스로 업데이트됨.
     * 라이선스 링크가 Hugging Face의 해당 모델 페이지로 연결되어 있음.


    GN⁺의 의견

     * 라이선스 변경의 중요성: Microsoft의 phi-2 모델 라이선스가 MIT 라이선스로 변경되었다는 것은 연구자와 개발자들이 이 모델을 더 자유롭게 사용할 수 있게 되었다는 것을 의미함. 이는 오픈 소스 커뮤니티에 큰 기여를 할 수 있음.
     * 역공학의 가능성: GNU Lesser General Public License에 따라 라이브러리의 변경 사항을 디버깅하기 위한 역공학이 허용된다는 점은 개발자들이 소프트웨어를 보다 깊이 이해하고 개선할 수 있는 기회를 제공함.
     * 흥미로운 점: 이러한 라이선스 변경은 기술의 접근성을 높이고, 혁신을 촉진하며, 다양한 분야에서의 새로운 응용 프로그램 개발을 장려할 수 있음. 이는 AI 및 머신러닝 분야의 발전에 긍정적인 영향을 미칠 것으로 기대됨.

        Hacker News 의견

     * 이전에는 비상업적 라이선스로 제한되어 있어서 사람들의 열정을 다소 누그러뜨렸음. 성능과 크기를 고려할 때 상업적으로 친화적인 라이선스는 실제로 큰 의미가 있음.
     * 이 모델은 추론 능력에서 뛰어남을 강조하는 것이 중요함. 하지만 의도적으로 폭탄 제작 방법 등을 배우지 않도록 큰 웹 크롤링 데이터셋으로 훈련되지 않았음. 그래서 이 모델은 무게급에서 가장 ""똑똑한 사고""를 하는 모델이거나 더 높은 매개변수 모델과 비교할 수 있지만, 세상과 상식에 대해서는 그다지 많이 알고 있지 않음. 이는 미래에 변할 수 있지만 현재 상태임.
     * 모델보다 데이터셋에 더 관심이 있음을 표현하는 댓글.
     * 이러한 오픈 모델들을 보는 것은 정말 흥미로움. AI ""윤리학자""들이 안전을 명목으로 기계학습 모델에 대한 접근을 통제하려는 고위 사제 집단으로 활동하고 싶어하는 것이 흥미로움. 하지만 AI의 가장 큰 위험은 모델을 통제하는 사람들이 사람들이 쓸 수 있는 것을 통제하고 검열하는 데 모델을 사용할 것이라는 점임. 공개적으로 접근 가능한 오픈 소스 모델은 AI의 진정한 위험에 대한 최선의 방어라고 생각함. Facebook, Microsoft, Mistral이 이를 밀어붙인 것에 대해 칭찬함.
     * 이것이 바로 독립적인 오픈 소스 프로젝트가 중요한 이유임. TinyLlama의 Apache 2.0 라이선스 출시가 이러한 변화에 영향을 미치지 않았다고 생각하기 어려움.
     * 오랫동안 상위권에 있던 이 모델이 무엇이 좋은지에 대한 궁금증을 표현하는 댓글.
"
"https://news.hada.io/topic?id=12651","비디오게임 경로 탐색을 위한 A* 알고리즘의 교묘한 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    비디오게임 경로 탐색을 위한 A* 알고리즘의 교묘한 기술

선형 경로 찾기

     * 몬스터와 플레이어 사이에 직선 경로를 그리고 몬스터가 그 방향으로 이동하는 가장 기본적인 경로 찾기 방법.
     * 몬스터가 벽에 부딪히면 멈추지만, 벽을 따라 이동하는 벽 슬라이딩 기법으로 이 문제를 해결할 수 있음.
     * 벽 슬라이딩은 경로 찾기뿐만 아니라 플레이어 이동에도 효과적이며, 많은 게임들이 이 기법을 사용함.

다익스트라 알고리즘

     * 학교에서 배우는 알고리즘으로, 시작 노드에서 다른 모든 노드까지의 최단 경로를 찾음.
     * 목적지 노드를 찾으면 중단할 수 있지만, 특정 방향으로 알고리즘을 유도할 방법은 없음.
     * 게임에서는 몬스터의 목적지가 플레이어의 움직임에 따라 계속 바뀌기 때문에, 다익스트라 알고리즘은 비효율적임.

A* 탐색 알고리즘

     * 시작 노드에서 목적지까지의 거리를 가중치로 사용하여, 직선 경로를 우선적으로 시도함.
     * 벽에 막히면 주변 노드를 조사하여 벽을 우회하려고 시도하며, 이미 방문한 노드는 다시 방문하지 않아 궁극적으로 벽을 우회하는 경로를 찾음.

A* 알고리즘 트릭

     * 암시적 그래프 데이터 구조: 노드와 인접 행렬 또는 인접 리스트를 사용하는 대신, 픽셀 좌표를 노드로 사용하고 인접 노드를 동적으로 생성하여 메모리 사용을 줄임.
     * 기하학적 휴리스틱: 타일을 노드로 사용하여 검색 속도를 높이고, 고정된 반복 깊이를 설정하여 알고리즘을 완전히 실행하지 않고도 합리적인 진행을 할 수 있음.

   GN⁺의 의견:
     * 이 글에서 가장 중요한 것은 A* 알고리즘을 효율적으로 구현하는 다양한 트릭들을 소개하고 있다는 점임.
     * A* 알고리즘은 게임 개발, 특히 제한된 리소스를 가진 플랫폼에서 경로 찾기 문제를 해결하는 데 매우 유용함.
     * 알고리즘의 복잡성을 줄이고 메모리 사용을 최적화하는 방법을 제시함으로써, 초급 소프트웨어 엔지니어들이 경로 찾기 알고리즘을 더 잘 이해하고 적용할 수 있도록 도움을 줌.
"
"https://news.hada.io/topic?id=12683","OpenAI의 연간 매출, 16억 달러(2조원) 돌파","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenAI의 연간 매출, 16억 달러(2조원) 돌파

     * OpenAI의 연간 매출이 16억 달러를 넘어섰으며, 이는 1.3억 달러를 달성한 지 불과 두 달 만의 일임
     * 현재 새로운 펀딩을 모색 중이며, 최소 1000억 달러의 평가 가치를 목표로 하고 있음
     * OpenAI의 매출 증가는 2023년 2월 유료 서비스 ChatGPT Plus를 출시한 후 급격히 시작됨
     * OpenAI는 원래 2023년 매출 목표를 2억 달러로 예상했으나, ChatGPT Plus의 인기가 예상보다 높아 매출이 크게 증가함
     * 8월에 연간 매출이 10억 달러를 넘어섰고, 이후 두 달 만에 13억 달러에 도달함
     * 최근 보고에 따르면, OpenAI의 연간 매출이 16억 달러를 넘어서며 지난 두 달 동안 20% 이상 성장한 것으로 추정됨
     * OpenAI의 일부 경영진은 연간 반복 매출이 2024년 말까지 거의 4배 증가하여 50억 달러에 이를 것으로 믿고 있음
     * 이러한 낙관적인 전망은 기존 제품에만 의존하지 않고 새로운 AI 서비스를 출시하여 추가 매출을 창출할 계획이 있음을 시사함
     * OpenAI의 CEO Sam Altman은 GPT-5라는 새로운 주력 대형 언어 모델을 개발 중이라고 밝혔으나, 출시 시기나 새로운 기능에 대해서는 구체적으로 언급하지 않음
     * OpenAI는 지난해 4월 270억 달러에서 290억 달러의 평가 가치로 2차 주식 매매를 완료했으며, 최근에는 860억 달러의 평가 가치로 또 다른 2차 매매를 마무리 짓고 있음
     * 현재 투자자들과 협상 중인 새로운 자금 조달 라운드를 통해 회사 가치가 1000억 달러를 넘어설 수 있을 것으로 기대됨
"
"https://news.hada.io/topic?id=12719","Amphion - 오픈소스 오디오/음악/음성 생성 툴킷 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Amphion - 오픈소스 오디오/음악/음성 생성 툴킷

     * 오디오/음악/음성 분야에서 재현 가능한 연구를 지원하고, 주니어 연구자와 엔지니어가 연구를 시작하는 데 도움을 주기 위한 툴킷
     * 최종 목적은 모든 입력을 오디오로 변환하는 방법을 연구할 수 있는 플랫폼을 제공하는 것
          + TTS: Text to Speech (지원)
          + SVS: Singing Voice Synthesis (개발중)
          + VC: Voice Conversion (개발중)
          + SVC: Singing Voice Conversion (지원)
          + TTA: Text to Audio (지원)
          + TTM: Text to Music (개발중)
     * 여러 Vocoder 와 평가 지표를 포함
"
"https://news.hada.io/topic?id=12708","네스트플릭스(Nestflix)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            네스트플릭스(Nestflix)

     * Nestflix는 영화 속 영화, 드라마 속 드라마와 같은 가상의 콘텐츠를 모아놓은 플랫폼
     * 700개 이상의 스토리 안의 스토리를 갖춘 선택적인 콘텐츠를 제공
     * 다양한 장르의 가상 콘텐츠를 포함하고 있으며, 새로운 콘텐츠도 지속적으로 업데이트

장르별 콘텐츠 예시

     * 드라마: 도시의 범죄가 최고조에 달한 상황에서 초보 갱스터 스네이크가 유명한 마피아 보스 조니를 만남.
     * 전기: 시드니 프레스콧의 실화를 바탕으로 한 이야기로, 베스트셀러 '우즈보로 살인사건'에 기반함.
     * 로맨틱 드라마: 다르다는 것이 사형 선고와 같았던 시대에 한 남자가 자신의 신에게 의문을 제기함. 베이징 영화제에서 크라잉 몽키 상 수상.
     * 액션 TV: 만화와 TV의 영웅인 라디오액티브 맨이 그의 충실한 조수인 폴아웃 보이의 기원을 다룬 대형 스크린 영화로 나옴.
     * 게임쇼: 위험을 조금 포함한 게임쇼를 포함하여 다양한 버라이어티 쇼를 제공함.
     * 뮤지컬: 루카스 리가 자신의 상징적인 액션 영화 '토크 투 더 피스트'를 출시하기 전에 자신이 누구에게도 뒤지지 않음을 증명함.

Nestflix 특징

     * Nestflix은 Netflix나 다른 스트리밍 서비스, 영화 스튜디오와는 관련이 없음

GN⁺의 의견

     * Nestflix은 영화나 TV 쇼 안에서 창작된 가상의 콘텐츠를 모아놓은 독특한 플랫폼으로, 팬들에게 새로운 차원의 엔터테인먼트 경험을 제공함.
     * 이 플랫폼은 창의적인 스토리텔링과 패러디의 결합을 통해 기존의 콘텐츠 소비 방식을 확장하는 새로운 형태의 문화 콘텐츠임.
     * 사용자들은 이 사이트를 통해 자신이 좋아하는 영화나 TV 쇼 속의 가상 콘텐츠를 더 깊이 탐구하고, 그 속에 숨겨진 이야기나 배경에 대해 더 많이 알아갈 수 있는 기회를 가짐.

        Hacker News 의견

     * 첫 번째 댓글은 데이터베이스에 대한 오해를 풀어주는 내용임. 이 데이터베이스는 수작업이나 기계가 생성한 가짜 쇼들의 모음이 아니라, TV나 영화 내에 등장하는 가상의 쇼들을 모아놓은 것임을 설명함. 예를 들어, 영화 '웨인즈 월드' 안에 나오는 '웨인즈 월드' 토크쇼가 그 예임.
     * 두 번째 댓글은 인공지능(AI)에 대한 기대감을 표현함. '라스트 액션 히어로'의 '햄릿' 스케치, 원본 햄릿 텍스트, 그리고 아놀드 슈왈제네거의 80년대와 90년대 작품을 AI에 입력하여 완전한 버전을 만들어내는 날을 기대한다고 함.
     * 세 번째 댓글은 프로젝트에 대한 애정을 드러냄. 이러한 작업은 옛날 인터넷에서 볼 수 있었던 것이지만, 훨씬 더 정교하게 만들어졌다고 평가함. 또한, 다큐드라마 'Making a Monster'와 프랑스 예술 영화 'Les Cousins Dangereux'가 포함된 것에 대해 기쁨을 표현함.
     * 네 번째 댓글은 프로젝트에 대한 지지를 나타냄. 'I'd buy that for a dollar!'라는 표현으로 만족감을 드러내며, 관련 링크를 공유함.
     * 다섯 번째 댓글은 중첩된 영화나 TV 쇼에 대한 질문을 함. 예를 들어, '트루먼 쇼'의 배경에서 상영되는 영화와 같은 것이 있는지 궁금해함.
     * 여섯 번째 댓글은 디자인에 대한 노력을 칭찬함. 현대의 생성적 시대에 보기 드문 정성이 들어간 디자인이라고 평가하며, AI가 만들어낸 것으로 오해했으나 텍스트가 너무 깔끔하고 이미지가 관련성이 높아 인상적이라고 함.
     * 일곱 번째 댓글은 프로젝트에 대한 감사를 표현함. 가짜 영화/TV 쇼들이 어디에서 나왔는지 보여주는 링크에 대해 감사함을 나타냄.
     * 여덟 번째 댓글은 프로젝트에서 빠진 내용을 지적함. 'Lethal Weapon 5'와 '6'이 누락되었다고 언급하며, 이러한 내용이 'It's Always Sunny'의 에피소드에서 풍자된 바 있다고 덧붙임.
     * 아홉 번째 댓글은 특정 가상 영화에 대한 애정을 표현함. 'The Night the Reindeer Died'라는 영화가 실제로 존재했다면 좋았을 것이라며, 리 마조스가 크리스마스 액션 영화에 출연하는 것을 보고 싶어함.
     * 마지막 댓글은 'Arrested Development'라는 TV 쇼에 대한 애정을 드러냄. 많은 주목할 만한 내용이 있어서 다시 전체 시리즈를 봐야겠다고 함.
"
"https://news.hada.io/topic?id=12705",""Sit"라는 기술 이름을 가진 새로운 애플리케이션 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ""Sit""라는 기술 이름을 가진 새로운 애플리케이션 출시

Sit. 앱에 대한 이유

     * **Sit.**는 극도로 단순한 알람 시계 앱으로, 사용자가 조용히 앉아 시간을 보낼 수 있게 도와줌.
     * 이 앱은 사용자가 일정 시간을 설정하고, 시간이 다 되면 부드러운 공 소리로 사용자를 현실로 돌아오게 함.
     * 이 앱은 명상을 위해 사용되기도 하지만, 생산성을 추구하는 것을 잠시 멈추고 휴식을 취하는 것에 대한 가치를 전달하고자 함.

첫 번째 이유: 시간

     * 웹은 사용자의 시간, 돈, 주의를 끌기 위한 기계처럼 변모했으며, Sit. 앱은 사용자에게 시간을 조금이나마 돌려주고자 함.
     * 앱을 열면 할 수 있는 것은 단 두 가지뿐이며, 이는 사용자가 자신의 시간을 가치 있게 사용하도록 유도함.

두 번째 이유: 동기 부여

     * 개인 프로젝트로 전환한 저자는 일상에 구조를 만들어가는 과정에서 작은 프로젝트를 통해 동기 부여를 얻음.
     * 짧은 피드백 루프를 가진 프로젝트는 창의적인 사람들에게 동기를 부여하고, 기본적인 인간의 소통 욕구를 충족시킴.

세 번째 이유: 정신 건강

     * 정신 건강은 전문적이고 개인적인 관점에서 중요하며, 저자는 자신의 기술을 사용하여 이 분야에 기여하고자 함.
     * 디지털 도구를 만드는 것은 다른 사람들과 공유하는 데 비용이 들지 않으며, 정신 건강에 도움이 될 수 있는 저렴한 방법임.

    세 번째 이유의 하위 항목: 나만의 특별한 시계 필요성

     * Sit. 앱은 습관 강화를 위해 만들어졌으며, 정신적 위생과 자연과의 연결을 위한 명상을 돕기 위해 설계됨.
     * 머릿속의 목소리로부터 자신을 분리하는 것을 배우는 명상은 어려울 수 있으나, Sit. 앱은 이를 더 쉽게 유지할 수 있도록 도움을 줌.

마무리 말

     * Sit. 앱 사용자들은 아무것도 하지 않고 앉아 시간을 보내는 것으로 몇 일치의 시간을 ""낭비""했음.
     * 이 앱은 사용자들이 자신만의 시간을 가질 수 있도록 하여, 그들이 더 나은 느낌을 갖도록 도움을 줌.

다음 단계

     * Sit. 앱은 더 넓은 아이디어에 대해 이야기하기 위한 핑계로 사용됨.
     * 다음 기사에서는 Sit. 앱을 사용하여 빠른 프로토타이핑 워크플로우를 소개할 예정임.

  GN⁺의 의견

     * Sit. 앱은 단순함과 사용자의 시간을 소중히 여기는 철학을 바탕으로 만들어진 것이 중요함.
     * 이 앱은 사용자가 디지털 세계의 소음에서 벗어나 자신과 대면할 수 있는 시간을 제공함으로써, 정신 건강에 긍정적인 영향을 미칠 수 있음.
     * 앱의 개발 과정과 그 배경에 대한 이야기는 소프트웨어 개발에 관심 있는 사람들에게 영감을 줄 수 있으며, 단순함이 어떻게 강력한 도구가 될 수 있는지 보여줌.

        Hacker News 의견

     * 사용자가 웹페이지를 열고 ""시작"" 버튼을 클릭하자, 헤드폰을 통해 들리는 아름다운 '봉' 소리에 이완함을 느낌.
          + 그러나 곧바로 입양된 새끼 고양이가 반쯤 잡아먹은 도마뱀을 물고 지나가는 것을 보고, 사용자는 빗자루를 들고 고양이를 쫓는 소동이 벌어짐.
          + 고양이로부터 도마뱀을 구해내고 밖으로 내던진 후, 다시 들리는 '봉' 소리에 사용자는 정신을 차림.
          + 이 경험은 앱이 사용자를 앉게 만드는 데 실패했다고 평가함.
     * 한 사용자는 앱의 이름인 ""Sit.""이 명상 앱으로서는 적합하지 않다고 생각함.
          + ""Sit.""이라는 단어가 게임에서 상대를 죽였을 때 사용하는 비하적인 표현으로 인식되어 명상에 적합하지 않은 마음가짐을 불러일으킨다고 함.
     * 명상은 개인에게 적합한 지도가 필요하다고 언급함.
          + 명상에 잘못된 이유로 끌리는 사람들을 적절한 지도 없이 격려하는 것은 그들에게 해로울 수 있음.
          + 특히 선(禪) 명상은 초보자에게 어려울 수 있으며, 선 스승들조차 호흡 계산과 같은 다른 방법을 사용한 후에 공(空) 명상으로 나아감을 설명함.
     * 프로젝트에 대한 관심을 표현하며, 전체 화면 모드로 전환되는 기능에 대해 언급함.
          + 최신 Firefox에서 사용자 동의 없이 전체 화면이 활성화되는 것을 발견하고, 이것이 브라우저 내 브라우저 공격에 사용될 수 있음을 지적함.
     * 기술을 사용하여 사람들이 명상하는 시간을 가지도록 유도하는 것이 재미있다고 평가함.
          + 앱의 공 소리, 글꼴 선택, 친근한 문구 등을 특히 즐겼으며, 유사한 목적의 자신의 프로젝트를 소개함.
     * 명상 타이머에 대한 의존을 포기했다고 밝힘.
          + 디지털 기술이 없는 방에서 Casio F91W 시계만 사용하여 명상 시간을 측정하는 방법을 선호함.
     * 함께 사용할 수 있는 버전이 흥미롭다고 언급하며, 배경 음악의 반복 지점이 다소 산만하다고 평가함.
     * 웹 기술을 사용하여 원하는 타이머를 만드는 아이디어를 얻었다고 감사를 표함.
          + 타이머가 만료될 때뿐만 아니라 동작하는 동안 매 분 또는 5분마다 소리를 내는 기능을 원함.
     * 명상을 시도하는 과정에서 사람들이 무엇을 잘못하고 있는지 궁금해하게 만드는 것에 대해 언급함.
          + 명상에 익숙하지 않은 사람들에게 단순히 ""앉아서 아무것도 하지 않기""를 요구하는 것은 도전적임을 설명함.
     * 웹이 있어서 좋다고 평가하며, 앱 스토어에서는 이러한 앱을 승인하지 않을 것이라고 언급함.
"
"https://news.hada.io/topic?id=12624","Emacs-copilot: Emacs를 위한 LLM 기반 코드 완성 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Emacs-copilot: Emacs를 위한 LLM 기반 코드 완성 기능

     * Emacs Copilot은 로컬에서 실행되는 LLM(Large Language Model)을 사용하여 Emacs 버퍼 내에서 Code Completion을 생성함
     * LLM은 파일별로 로컬 편집 기록을 기억하는 서브 커맨드로 실행되며, C-g를 사용하여 언제든지 LLM을 중단할 수 있음
     * 코드를 삭제할 때 LLM의 컨텍스트에서 해당 기록도 삭제될 수 있으며, 언어에 구애받지 않고 파일 확장자에 의해 프로그래밍 언어가 결정됨

WizardCoder 34b 모델

     * WizardCoder 34b는 GPT-4와 동일한 HumanEval 점수를 받은 우수한 LLM임.
     * 이 모델을 사용하기 위해서는 Mac Studio M2 Ultra와 같은 강력한 컴퓨터가 필요하며, Macbook Pro 사용자는 Q3 버전을, 일반 PC 사용자는 WizardCoder-Python-13b 모델을 고려할 수 있음.
     * Raspberry Pi와 같이 더 낮은 컴퓨팅 파워를 가진 사용자는 Phi-2 모델을 사용할 수 있음.

시작 방법

     * 함수의 첫 줄을 작성한 후, C-c C-k를 눌러 LLM에게 제어권을 넘겨주면 나머지 함수 구현을 생성해줌.
     * LLM은 함수가 완성되면 멈추도록 조정되어 있으며, 설명이나 ELI5(쉽게 설명하는) 주석은 피함.

참조 구현

     * LLM을 다운로드한 후, Emacs 버퍼에 아래 코드를 복사하고 M-x eval-buffer를 실행하면 됨.
     * 개인 취향에 맞게 코드를 조정할 수 있음.

Emacs 다운로드 링크

     * Emacs가 설치되어 있지 않거나 Windows와 같이 얻기 어려운 플랫폼을 사용하는 경우, 설치할 필요 없이 실행 가능한 단일 파일 빌드의 Emacs 링크 제공.

LLM 다운로드 링크

     * Emacs Copilot과 잘 작동하는 것으로 알려진 몇 가지 LLM을 무료로 다운로드할 수 있는 링크 제공.
     * 모델의 크기는 하드웨어에 적합하게 선택할 수 있음.

캐시 파일

     * 모델을 변경하기로 결정한 경우, 로컬 파일 시스템에 생성된 모든 FILE.cache 파일을 삭제해야 함.

주의사항

     * macOS에서 Apple Silicon을 사용하는 경우 Xcode가 설치되어 있어야 함.
     * zsh 사용 시 sh -c ./llamafile을 사용하여 실행해야 할 수 있음.
     * 일부 Linux 시스템에서는 binfmt_misc 등록과 관련된 오류가 발생할 수 있음.

지원되는 OS와 CPU

     * llamafile은 최소 설치 요구 사항을 가진 여러 운영 체제를 지원함.
     * llamafile은 특정 CPU를 지원하며, SSSE3 이상의 명령어 세트를 가진 AMD64 마이크로프로세서 또는 ARMv8a+를 가진 ARM64 마이크로프로세서가 필요함.

모델에 대한 참고사항

     * 위에 제공된 llamafile 예시는 특정 모델, 라이선스, 데이터 세트에 대한 Mozilla의 지지나 추천으로 해석되어서는 안 됨.


  GN⁺의 의견

     * 혁신적인 편집 경험: Emacs Copilot은 개발자들에게 새로운 차원의 코딩 보조를 제공하여, 효율성과 생산성을 크게 향상시킬 수 있는 잠재력을 가짐.
     * 접근성과 사용자 정의: 사용자는 자신의 필요와 취향에 맞게 LLM을 선택하고 Emacs 환경을 조정할 수 있어, 개인화된 개발 환경 구축이 가능함.
     * 기술적 호환성: 다양한 운영 체제와 CPU를 지원함으로써, 광범위한 사용자가 Emacs Copilot을 사용할 수 있으며, 이는 개발자 커뮤니티 내에서의 포용성과 접근성을 증진시킴.

        Hacker News 의견

     * LLM/IDE 통합의 유용성에 대한 의문

     LLM/IDE 통합이 일반 코딩 작업에서 큰 생산성 향상을 가져다주는지 확신할 수 없음. 프로그래머의 평균 생산성은 하루에 100 LOC 정도이지만, 프로토타입을 만들 때는 하루에 1000 LOC 이상을 쉽게 작성할 수 있음. 생산 품질 코드와 해킹/프로토타이핑의 생산성 차이는 품질 측면 때문이며, 대부분의 유능한 프로그래머는 스스로 코딩하는 것이 LLM이나 다른 소스에서 복사한 것보다 더 나은 품질의 코드를 만들 수 있음. 코드를 분석하고 취약점이 없는지, 미래 유지보수를 위한 디자인이 적절한지 확인하는 데 걸리는 시간이 코드를 직접 작성하지 않고 얻는 시간 이득을 상쇄할 것으로 보임. LLM을 사용하여 학습하거나 품질이 중요하지 않은 일회성 코드를 작성할 때는 유용할 수 있지만, 생산 코드에 대해서는 LLM의 출력이 개발자 수준이 되고 꼼꼼히 검토/수정할
     필요가 없는 지점까지는 아직 갈 길이 멀다고 생각함.
     * 자체 호스팅된 LLM 도구 개발에 대한 감사

     자체 호스팅된 LLM 도구 개발을 진행해준 Justine에게 감사함을 표함. Llamafiles는 표준이 되어야 함. 같은 LAN에 호스팅된 원격 LLM에 연결할 수 있는 방법이 있는지, Apple 기기를 사용하지 않지만 네트워크상의 강력한 기계를 가지고 있어서 이를 사용하고 싶음. Llamafile이 API를 제공할 수 있을지, 이는 LSP 영역으로 들어가는 것이며, Llamafiles를 활용하는 것이 좋을 것임.
     * Emacs를 사용한 LLM 통합 경험 공유

     코딩과 기술 문서 작업에 대부분 Emacs를 사용함. phind-v2-codellama, openhermes, ollama, gptel, 그리고 GitHub의 Copilot을 실행하고 있음. 임의의 영역을 LLM에 보내서 요청할 수 있는 기능이 마음에 듦. UX는 초기 단계이지만, 기초 모델이 모든 컨텍스트(예: orgmode 파일과 열린 파일 버퍼)를 받아들이고 LSP와 같은 도구를 사용할 수 있다면 상상해보라고 함.
     * MacBook Pro M1 Max에서의 LLM 실행 경험

     MacBook Pro M1 Max, 64GB RAM을 사용하고 있으며, 34B Q55 모델(큰 모델)을 다운로드하여 잘 작동함을 확인함. 속도는 느리지만 사용 가능함. Asahi Fedora Linux 파티션에서 실행 중이며, GPU를 어떻게 활용하는지는 모름. ZSH 5.9로 환경을 구성했으며, SUDO를 통해 LLM을 직접 호출하면 웹 서버로 빠르게 로드되어 localhost:8080을 통해 웹 브라우저로 상호 작용할 수 있음. 하지만 Emacs에서 LLM을 실행하려고 할 때 ""Doing vfork: Exec format error.""라는 오류가 발생함. Readme의 데모를 따라 isPrime 함수의 시작 부분을 입력한 후 C-c C-k를 타이핑하면 이 오류가 발생함. 무엇이 잘못되었는지에 대한 아이디어를 물음.
     * 비디오 데몬스트레이션의 is_prime 함수에 대한 비판

     비디오 데몬스트레이션에서 보여준 is_prime 함수가 매우 나쁨. 입력이 2로 나누어지지 않더라도 4, 6, 8 등으로 모듈로 검사를 계속하는데, 이는 완전히 무의미함. 코드 한 줄만 추가하면(홀수 체크) 루프를 홀수로만 만들어 속도를 2배 빠르게 할 수 있음. 이러한 LLM을 사용하는 사람들이 prod로 푸시하기 전에 코드를 검토하기를 바람.
     * NixOS에서 실행할 수 없는 llamafile 빌드에 대한 질문

     cosmopolitan/실제로 이식 가능한 실행 파일 없이 자신만의 llamafile을 빌드할 수 있는지 질문함. NixOS에서 실행할 수 없음.
     * 더 일반적인 LLM 통합에 대한 요구

     현재 제공되는 것에 대해 만족하지만, 이것과 LLM이 할 수 있는 모든 것을 할 수 있는 더 일반적인 LLM 통합을 원함. 예를 들어, 한 키 입력으로 ""이 코드를 완성하라""는 것이 될 수 있지만, 다른 키 입력은 현재 버퍼를 LLM에 그대로 보내거나, 영역을 LLM에 보내거나, 영역을 LLM에 보내고 결과로 대체하는 것일 수 있음. 입력을 LLM에 다양한 방식으로 가져오는 몇 가지 직교 기능(영역, 버퍼, 파일, 인라인 프롬프트)과 결과를 다양한 방식으로 출력하는 기능(포인트에서 추가, 영역 덮어쓰기, 새 버퍼에 넣기 등)이 있으며, 그 위에 코드 완성, 산문 등과 같은 다양한 자동 시스템 프롬프트를 구축할 수 있음.
     * Vim 사용자의 LLM 통합 커스텀 명령 공유

     현재 선택된 코드를 가져와서 브라우저 창을 열어 다양한 AI 엔진에게 개선을 요청할 수 있는 사용자 정의 명령을 사용함. vimrc에서 사용하는 명령 공유.
     * Llamafile 업그레이드 경로에 대한 질문

     Llamafile의 업그레이드 경로에 대해 질문함. llama.cpp(자주 업데이트되는 작은 파일)와 모델 가중치(자주 업데이트되지 않는 큰 파일)를 하나로 합친 것으로 이해함. llama.cpp에 수정이 필요할 때마다 변경되지 않은 모델의 여러 기가바이트를 다시 다운로드해야 하는지 궁금함.
     * LLM 통합에 대한 흥미와 시도 의사 표현

     매우 흥미롭고 확실히 시도해볼 것임. 하지만 GitHub CoPilot의 작동 방식과는 매우 다르므로 이름이 잘 선택되지 않았을 수 있음. Emacs의 아키텍처 등을 고려할 때 LLM과의 통합에 더 많은 개발이 이루어지지 않는 것이 놀랍지만, 대부분의 프로젝트는 몇 달 동안 작업되지 않았음. 하지만 Emacs를 사용하는 사람들 대부분이 LLM을 활용하는 것에 반대하는 사람들일 수도 있음.
"
"https://news.hada.io/topic?id=12720","소비자 보고서, 식품 중 '널리 퍼진' 플라스틱 존재 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    소비자 보고서, 식품 중 '널리 퍼진' 플라스틱 존재 발견

        Hacker News 의견

     * 플라스틱 체인 지수(Plastic Chain Index) 제안

     한 사용자는 음식에 포함된 플라스틱의 양을 측정할 수 있는 '플라스틱 체인 지수'를 제안함. 이 지수가 낮으면 환경에서 우연히 흡수된 플라스틱이 적다는 것을, 높으면 플라스틱에 많이 노출된 것을 의미함. 이 지수가 소비자 인식과 교육에 도움이 될 것이라는 낙관적인 전망과 함께, 현실적으로는 이 지수가 건강에 미치는 영향에 대한 혼란과 연구가 수십 년간 이어질 것이라는 비관적인 견해를 표현함.
     * 소비자 보고서(Consumer Reports)에 대한 칭찬

     다른 사용자는 소비자 보고서가 독립적인 제품 테스트 및 리뷰 기관 중 하나로, 유튜브 채널과 같은 유료 후원 없이 운영된다고 칭찬함. 이 사용자는 구독을 통해 좋은 정보를 얻었으며, 앞으로도 이 기관이 지속되기를 바람.
     * 소비자 보고서 기사에 대한 직접 링크

     기사에 직접 링크를 제공하며, 소비자 보고서가 발견한 모든 음식(라즈베리 라임 셀처를 제외한)에서 프탈레이트를 발견했다고 언급함. 이에 대해 우울한 웃음을 표현함.
     * 환경적 플라스틱 오염에 대한 궁금증

     또 다른 사용자는 환경적 요인으로 인한 플라스틱 오염에 대한 데이터가 1960년대/70년대부터 있을 것이라고 추측하며, 이에 대한 그래프를 보고 싶어함. 예를 들어, 유기농 포장되지 않은 과일에도 플라스틱이 포함될 가능성이 있음을 언급함.
     * 소비자 보고서의 프탈레이트 수치 발표

     소비자 보고서가 발견한 프탈레이트 수치가 미국과 유럽 규제 기관이 정한 한계를 초과하지 않았다고 발표했다는 사실에 대해 한 사용자는 만족함을 표현함. FDA가 무력할 수도 있지만, EFSA는 심각하게 문제를 다룬다고 믿음.
     * 플라스틱 분해에 대한 의문

     화학에 대한 지식이 없다는 한 사용자는 플라스틱이 왜 분해되지 않는지, 미래에 의사가 플라스틱을 분해하거나 에너지로 전환할 수 있는 효소를 처방할 수 있을지에 대해 궁금해함.
     * 일회용 컵에 대한 걱정

     일회용 컵에 담긴 커피에 대한 우려를 표현하는 사용자가 있음. 이 컵은 플라스틱으로 라이닝되어 있어 뜨거운 액체를 담을 때 문제가 될 수 있음을 지적함.
     * 플라스틱 문제에 대한 질문

     '플라스틱'이 무엇이 문제인지에 대해 질문하는 사용자가 있음.
     * 플라스틱에 대한 제안

     플라스틱이 가스처럼 특정한 냄새를 가지도록 만들어 소비자가 인지할 수 있게 해야 한다는 제안을 하는 사용자가 있음.
     * 프탈레이트에 대한 문헌 언급

     프탈레이트가 호흡이나 피부를 통해서도 흡수된다는 문헌을 언급하며, 이 문제가 이미 현재와 미래 세대에 영향을 미쳤다고 지적하는 사용자가 있음.
"
"https://news.hada.io/topic?id=12630","인텔 12세대/13세대를 이용한 7와트 대기 전력의 저전력 서버/NAS 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               인텔 12세대/13세대를 이용한 7와트 대기 전력의 저전력 서버/NAS 구축

인텔 12세대/13세대에서 7와트 대기 전력: 저전력 서버/NAS 구축의 기초

     * 인텔 12세대/13세대 시스템의 대기 전력이 7와트임.
     * 대기 전력 측정에는 메인보드, CPU, RAM, SSD, PSU 포함됨.
     * BIOS에서 C-States 설정과 powertop의 자동 조정을 통해 절전 모드 도달.

자세한 사양 및 구성 요소 선택

     * 낮은 대기 전력과 합리적인 CPU 성능을 목표로 함.
     * 12개의 하드 드라이브와 최소 1개의 NVMe를 처리할 수 있는 능력 필요.
     * 비용을 통제하면서 DDR4를 사용하고 기존 CPU를 재사용하려 함.

메인보드 – ASUS Prime H770-Plus D4

     * 인텔 600/700 시리즈와 AMD 500/600 시리즈 메인보드 중에서 선택함.
     * 6개의 NVMe 드라이브를 위해 PCI-E to M.2 어댑터 사용 필요성 인식.
     * 인텔 메인보드를 선택한 이유는 칩셋 TDP, 칩셋 속도, DDR4 사용 가능성, 기존 인텔 12세대 CPU 보유 등임.

CPU – 인텔 i5-12400 (H0 스테핑) – Alder Lake

     * AV1 하드웨어 디코드 지원 및 E-core 실리콘 오버헤드 없는 최고 성능 제공.
     * 이전 데스크탑 빌드에서 사용했던 CPU를 서버 지향적인 구축에 재사용함.

메모리 – 64GB DDR4-3200

     * 기존에 보유하고 있던 Kingston HyperX 듀얼랭크 및 싱글랭크 메모리 사용.
     * XMP 프로파일을 사용하여 안정성을 확보하고 전압을 조정함.

부팅 드라이브 – Sandisk Ultra 3D 1TB SSD

     * Ubuntu Server 23.04를 위한 부팅 드라이브로 사용.
     * 최종 OS는 Samsung SSD 970 EVO Plus 500GB NVMe에 설치될 예정임.

PSU – Corsair RM750

     * 750W PSU는 시스템이 10와트 정도에서 유지될 것으로 예상되지만, 동시에 여러 드라이브 모터가 작동할 때 높은 순간 부하를 견딜 수 있어야 함.

전력 측정 – 초기

     * 벽에서 측정한 전력과 Ubuntu Server 23.04를 사용.
     * BIOS 설정 중 CPU C-states, ASPM, R6, ALPM 지원 활성화.
     * 디스플레이가 꺼진 후 7와트, USB 키보드 전원 관리 비활성화 시 8와트 소비.

문제가 되는 전력 측정 – 스핀 다운된 하드 드라이브로 가득 찬 상태

     * 12개의 하드 드라이브와 4개의 NVMe 드라이브를 연결한 후 대기 전력이 24-25와트로 증가함.
     * SATA 컨트롤러와 포트 멀티플라이어 사용으로 인한 전력 소비 증가 추정.

전력 소비 퍼즐 – 높은 전력 조사 및 진단

     * 하드 드라이브를 분리하고 구성 요소를 하나씩 테스트함.
     * JMB585 SATA 컨트롤러가 전력 소비 증가의 주범으로 밝혀짐.
     * ASM1166 SATA 컨트롤러로 교체하여 ASPM L1 지원으로 전력 소비 감소.

전력 소비 퍼즐 – 결론

     * 낮은 전력 소비를 위해 메인보드 지원과 BIOS 구성이 중요함.
     * 모든 장치가 ASPM L1을 지원해야 함.
     * C8 전력 상태를 달성할 수 있다면 CPU에 연결된 PCIe 레인 사용을 피함.
     * 벽에서 측정한 전력만이 실제 상황을 정확히 파악할 수 있는 유일한 방법임.

GN⁺의 의견

     * 저전력 서버/NAS 구축에 있어 인텔 12세대/13세대 플랫폼이 매우 효율적인 대기 전력을 제공하는 것이 중요함.
     * 메인보드 선택과 BIOS 설정이 전력 소비에 큰 영향을 미치는 것으로 나타남.
     * 이 글은 저전력 시스템을 구축하려는 초급 소프트웨어 엔지니어에게 유용한 정보를 제공하며, 특히 SATA 컨트롤러와 같은 구성 요소의 전력 관리 기능이 시스템 전체의 전력 소비에 미치는 영향에 대한 흥미로운 통찰력을 제공함.

        Hacker News 의견

     * 독일 포럼 스레드에서 30W 이하의 다양한 홈서버/네트워크 연결 스토리지(NAS) 구성을 나열한 구글 문서가 있음. 개인적으로 이상적인 가격 대 성능 비율의 하드웨어 구성을 찾았으며, 중고로 매우 저렴하게 구입함. Proxmox를 실행 중이며, 대기 전력은 9.3W임. 미디어 인코딩에는 적합하지 않아, 대안으로 Core i3 8100 이상을 추천함. 저렴한 중고 워크스테이션으로 좋은 서버가 되는 Dell T30이나 Fujitsu Celsius W550도 있음. Ryzen 옵션은 드물지만, AMD Ryzen 5 PRO 4650G와 Asus PRIME B550M-A 보드가 약 16W의 대기 전력을 소모한다는 보고가 있음.
     * 하드웨어는 훌륭하지만 소프트웨어 관리가 어려우면 이러한 구성을 정당화하기 어려움. 예를 들어, Synology NAS는 DSM이라는 운영체제를 사용하며, 사용자 친화적인 소프트웨어로 인해 큰 이점을 누림. Synology는 DSM을 비Synology 플랫폼에서도 실행할 수 있게 하여 NAS 시장에서 Microsoft와 같은 위치를 차지할 수 있을 것임.
     * 저자는 2016년부터 2023년까지 약 5개의 시스템을 구축함. 일부 부품은 여러 빌드에 걸쳐 재사용됨. 하드웨어 비용 대비 전체 수명 에너지 비용을 고려할 때, 4년 동안 운영되는 전력 소모가 큰 기계가 2년 동안 운영되는 저전력 기계보다 경제적일 수 있음.
     * 많은 저장 공간을 위한 훌륭한 작업. 저장 공간을 SSD에 맞출 수 있고, 많은 컴퓨팅 파워가 필요하지 않다면, RasPi나 NUC와 같은 저전력 서버를 사용할 수 있음. 저자는 현재 팬리스로 운영되는 1U Atom 서버를 사용하고 있으며, SATA와 ECC RAM의 이점이 있음.
     * 7950X3D, X670E Taichi, 96GB 6400MHz CL32, 2x4TB Lexar, 4x18TB Seagate Exos X18, RX570 8G, Proxmox 구성을 사용함. 대기 상태에서는 약 60-70W, TrueNAS VM이 작동 중일 때는 약 90-100W, TrueNAS 및 Fedora Desktop이 GPU 패스스루와 함께 작동 중일 때는 약 150W의 전력을 소모함. RAM이 전력 소모에 큰 영향을 미침.
     * 개인의 필요는 다양하지만, RAID5나 6을 사용하면서 디스크 손실을 경험한 후, RAID를 싫어하게 됨. 결국, 두 대의 SSD를 사용하는 간단한 구성으로 축소함. 필요한 경우 LXC 컨테이너를 실행할 수 있도록 설정함.
     * NAS가 대부분 대기 상태일 때 전력 소비를 최소화하고 싶다면, 파일 서버를 자동으로 깨우는 임베디드 CPU 기반의 WoL(네트워크 패킷을 감지하여 서버를 깨우는 기술) 생성기를 고려할 수 있음. 이 방법은 전력 소비를 매우 낮추면서 필요할 때 서버의 전체 성능을 제공함.
     * 저전력은 좋지만, ECC 없이 큰 RAID를 장기간 운영하는 것은 위험함. 5년 이상 견딜 수 있는 유사한 시스템에 대한 좋은 해결책이 필요함.
     * 과거에 비슷한 시스템을 시도한 좋은 경험. 무소음 팬리스 서버에 대한 블로그 링크 제공.
     * CPU/메인보드를 최적화하는 것에 집중하다가 여러 개의 작은 드라이브 대신 적은 수의 큰 드라이브를 사용하는 것이 더 경제적일 수 있음을 지적함.
"
"https://news.hada.io/topic?id=12676","Mozilla의 수익은 감소했지만, CEO는 연봉 20% 인상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Mozilla의 수익은 감소했지만, CEO는 연봉 20% 인상

모질라 CEO, 높은 보수에도 불구하고 사업 가속화 촉구

     * 모질라(Mozilla)는 연말보고서에서 2023년을 CEO 미첼 베이커(Mitchell Baker)의 높은 보수와 브라우저 시장 점유율 정체, 그리고 Mozilla.social 베타 버전에 대한 언급을 피하며 마무리함.
     * 베이커의 보수는 2021년 5,591,406달러에서 2022년 6,903,089달러로 증가했으나, 같은 기간 동안 수익은 527,585,000달러에서 510,389,000달러로 감소함.
     * 모질라는 데스크톱 브라우저 시장에서 구글과 마이크로소프트에 계속 뒤처지고 있으며, 큰 손실은 없었지만 뚜렷한 성장도 없었음.

AI와 프라이버시에 중점을 둔 모질라의 방향성

     * 모질라는 AI가 주류로 자리잡는 시대에 오픈 소스 개발자와 프라이버시 측면에서 영향력을 발휘할 수 있다고 보고 있음.
     * 모질라는 오픈 소스 대규모 언어 모델 작업에 15명의 엔지니어를 투입하고 있으며, 특히 헬스케어 분야에서의 사용 사례를 개발 중임.
     * 모질라.ai의 관리 이사인 모에즈 드라이프(Moez Draief)는 헬스케어 산업에서 언어 모델을 위한 구조화된 데이터 작업이 많다고 언급함.

광고와 구독 서비스를 통한 모질라의 수익화 전략

     * 모질라의 제품 책임자인 스티브 테이세이라(Steve Teixeira)는 AI와 소셜 네트워크의 급속한 성장을 언급하며, 모질라.social이 2024년에 실험 단계를 넘어서기 어려울 것이라고 함.
     * 테이세이라는 광고 통합 방안을 모색하고 있으며, 이는 모질라의 프라이버시와 선택에 중점을 둔 웹 브라우징에도 적용될 것임.
     * 모질라 VPN과 Relay와 같은 구독 서비스도 인정하며, 이러한 서비스들이 모질라의 수익화 전략에 어떻게 기여할지 주목됨.

""모질라 방식""으로의 데이터 활용 및 혁신 추구

     * 모질라는 프라이버시, 암호화, 고객 데이터 보호에 중점을 두는 ""모질라 방식""을 강조하며, 이 방식이 데이터 활용과 혁신에도 적용될 것임.
     * 베이커 CEO는 프로토타이핑, 출시, 학습, 반복의 속도를 높이고, 풍부한 데이터를 활용할 필요가 있다고 언급함.
     * 모질라는 AI를 제품 라인에 단순히 적용하는 것이 아니라 혁신을 추구할 것으로 기대됨.

   브랜든 아이크 옹 다시 모셔오면 안 되나...

   모질라 CEO가 모질라네..?

        Hacker News 의견

     * 최근 및 관련 뉴스:
          + Mozilla는 두 개의 다른 엔티티임: Mozilla의 기업 구조가 OpenAI가 겪었던 문제와 유사함. Mozilla는 이윤을 추구하지 않기 때문에 경영진이 재정적 이해관계를 가진 주주에게 책임을 지지 않음. 또한 Mozilla는 자선 단체가 아니기 때문에 기부자에게 책임을 지지 않음. 그렇다면 Mozilla 경영진은 누구에게 책임을 지는가? 주로 Baker의 동료들로 구성된 이사회에게 책임을 짐. 이는 서로 밀접한 관계를 가진 문제 있는 배열임. Mozilla가 진지하다면 경영진에 대한 책임 방식을 변경할 것임.
          + Mozilla는 상상력이 부족하지만, 광고주를 유지하는 한 자립할 수 있음. Mozilla는 Google이 검색 위치 구매를 더 이상 선호하지 않을 때까지 계속 나아갈 것임.
     * CEO의 급여 상승:
          + 2020년 CEO로 복귀한 후, 그녀의 급여는 300만 달러 이상으로 상승함.
          + 2021년에는 다시 상승하여 500만 달러 이상이 됨.
          + 2022년에는 거의 700만 달러로 다시 상승함.
          + 같은 해 8월 Mozilla Corporation은 수익 감소로 인해 약 250명의 직원을 해고함. 이전에는 1월에 대유행 전 약 70명을 해고함.
          + Baker는 이를 COVID-19 대유행 탓으로 돌렸지만, 수익은 2019년 기록적인 최고치에 도달했고, 시장 점유율은 줄어듦.
     * CEO 급여에 대한 의문:
          + CEO 급여에 대해 설명해 줄 수 있는 사람이 있는지 진지한 질문임. 가치 창출에 실제로 책임이 있는 평균 근로자보다 한 사람 또는 소수가 n배 더 많은 급여를 받는 것이 일반적으로 받아들여지는 이유를 이해하지 못함. 이는 전혀 공정한 것처럼 보이지 않음. 소프트웨어 엔지니어링에서 우리는 집에서 흥미로운 일을 할 수 있는 특권을 누리고 있지만, 누군가 다른 사람이 700만 달러를 정당화할 수 없이 벌 수 있다면 실제로 일하고 싶은 동기는 무엇인가? 인간으로서 우리는 이를 어떻게 정신적으로 받아들이는가?
     * 위키미디어 재단의 비판에도 불구하고:
          + 위키미디어 재단의 모든 ""임원, 이사, 신탁자 및 주요 직원""의 2021년 급여 총액은 420만 달러임.
     * Mozilla의 제품 책임자의 발언:
          + Mozilla의 제품 책임자 Steve Teixeira는 보고서에서 AI와 소셜 네트워크의 급속한 성장을 언급하지만, Mozilla.social이 2024년에 실험 단계를 넘어서기 어려울 것이라고 경고함. 그는 Mozilla가 개인 정보 보호와 선택에 중점을 두면서 광고를 더 잘 통합하는 방법을 탐색할 것이라고 말함.
     * CEO의 보상에 대한 의문:
          + 만약 CEO가 수익과 사용자 감소에 대해 보상을 받고 있다면, 그것이 CEO가 고용된 목적임. 이사회가 왜 더 낮은 수익과 사용자 점유율을 원하는지 이해할 수 없음.
     * Mozilla의 미래에 대한 고찰:
          + 모든 좋은 것들은 끝이 있음. Mozilla도 예외는 아닐지도 모름. 우리는 플랫폼 간 기술에서 표준을 지키고 혁신을 이끄는 강력한 비영리 단체가 필요하지만, Mozilla가 여전히 그 역할을 하고 있는가? Mozilla가 최근에 진정으로 혁신적인 것은 무엇인가? 그들은 소셜 네트워크, VPN, VR 등 소비자 중심의 다양한 것들을 따라잡기/리더 따라하기에 바쁨. Firefox는 물을 헤엄치고 있지만 매년 천천히 가라앉고 있음. Firefox는 훌륭한 브라우저이지만 Mozilla가 ""패배""하는 기술적 이유는 아님. 문화/하이프/마케팅/전혀 다른 것이 문제임. Bugzilla는 5년 이상 주요 릴리스가 없었고, 버그 추적에서 GitHub Issues와 같은 것들에 밀렸음. Thunderbird는 다시 활발한 개발 중이며 좋은 개선을 이루었지만 매우 틈새 시장임. Rust는 이제 자체 재단을 가지고 있으며 Mozilla를 넘어서 확장됨. MDN
            웹 문서는 훌륭하지만, 그것은 2020년 ""COVID 해고""로 가장 큰 타격을 받은 팀 중 하나가 아니었나?
     * Firefox 사용자의 의견:
          + Firefox를 사용하고 있으며 Chrome으로 돌아갈 의향이 전혀 없음. Firefox를 기본 브라우저로 사용하고 Chrome은 Firefox가 실행하지 않는 것을 위한 백업으로만 사용함. 자유 연설 절대주의자를 화나게 했을 수 있지만, 개인적으로는 신경 쓰지 않음. 개발자들이 최근에 Firefox에 한 일과 로드맵을 좋아함. 소수에 속하는 것을 신경 쓰지 않으며, Firefox가 크게 느려지지 않는 한 브라우저를 바꿀 사람들 중 하나가 아님.
     * Mozilla의 재정 상황에 대한 의견:
          + 그들이 자금을 태우든 말든, 누가 신경 쓰나? 우리 중 누구도 그들에게 돈을 지불하지 않음. 그들은 결코 죽지 않을 것이며, 그들의 진정한 주인은 아무도 독점을 울부짖지 못하게 그들을 떠받치고 있을 것임. 그들의 돈 대부분이 가장 큰 경쟁자로부터 오는 것은 우연이 아님.
"
"https://news.hada.io/topic?id=12745","GitUI 기술 관련 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GitUI 기술 관련 소식

GitUI는 터미널에서 GUI의 편안함을 제공함

     * 키보드만으로 빠르고 직관적인 조작 가능
     * 핫키를 외울 필요 없는 상황에 맞는 도움말 제공
     * 변경 사항 검토, 커밋, 수정 커밋(훅 포함: pre-commit, commit-msg, post-commit, prepare-commit-msg)
     * 파일, 헝크, 라인의 스테이징, 언스테이징, 되돌리기 및 리셋
     * 스태싱(저장, 적용, 삭제, 검사)
     * 원격지로부터의 푸시/페치
     * 브랜치 목록(생성, 이름 변경, 삭제, 체크아웃, 원격지)
     * 커밋 로그 탐색/검색, 커밋된 변경 사항의 차이(diff) 확인
     * 반응형 터미널 UI
     * 유동적인 조작을 위한 비동기 git API
     * 서브모듈 지원

동기

     * 터미널에서 대부분의 git 작업을 하지만, 인덱스, 커밋, 차이(diff), 스태시, 블레임, 로그와 같은 몇몇 사용 사례에서 git GUI를 자주 사용함.
     * 대형 리포지토리에서 인기 있는 git GUI들은 종종 반응하지 않거나 사용할 수 없게 됨.
     * GitUI는 터미널 내에서 git GUI의 사용자 경험과 편안함을 제공하면서 이식성이 높고 빠르며 무료이고 오픈소스임.

벤치마크

     * RustBerlin 미트업 발표에서 lazygit, tig, gitui를 비교하여 리눅스 git 리포지토리(90만 개 이상의 커밋 포함) 전체를 파싱함:
          + gitui: 24초 ✅, 0.17GB 메모리 ✅, 1.4MB 바이너리, 동결 없음 ✅, 충돌 없음 ✅
          + lazygit: 57초, 2.6GB 메모리, 16MB 바이너리, 동결 있음, 가끔 충돌
          + tig: 4분 20초, 1.3GB 메모리, 0.6MB 바이너리 ✅, 가끔 동결, 충돌 없음 ✅

1.0으로 가는 로드맵

     * 1.0을 선언하기 전의 고수준 목표:
          + 로그 탭에서 브랜치 구조 시각화(#81)
          + 인터랙티브 리베이스(#32)

알려진 제한 사항

     * 희소 리포지토리(sparse repo) 지원 없음(#1226)
     * GPG 서명 지원 없음(#97)
     * git-lfs 지원 없음(#1089)
     * https 필요한 credential.helper 는 명시적으로 설정해야 함(#800)
     * 현재 이 도구는 git shell 을 완전히 대체하지는 않지만, 두 도구는 잘 협력함.
     * gitui의 우선순위는 git shell 에서 진행할 때 불편한 기능들, 예를 들어 스태싱, 라인이나 헝크 스테이징 등에 있음.
     * 결국 gitui를 원스톱 솔루션으로 만들 수 있을 것이나, 이를 위해서는 도움이 필요함 - 현재는 여가 시간 프로젝트임.
     * 모든 지원과 후원이 환영됨! ❤️

설치

     * GitUI는 베타 버전이며 버그와 누락된 기능이 있을 수 있음. 그러나 개인적인 사용에는 상당히 안정적이며 개발 중에도 사용 중임.
     * 다양한 패키지 관리자를 통해 설치 가능함.

빌드

     * 최소 지원 rust/cargo 버전: 1.65
     * openssl 종속성 빌드를 위한 요구 사항(https://docs.rs/openssl/latest/openssl/ 참조)
     * 완전한 테스트 스위트를 실행하기 위해서는 python이 필요함(python으로 호출 가능해야 함)
     * cargo install gitui를 통해 gitui를 빌드하고 설치하는 것이 가장 간단함.

자주 묻는 질문(FAQs)

     * FAQs 페이지 참조

진단

     * 로깅 활성화 상태에서 gitui -l로 실행하면 로그가 기록됨.

색상 테마

     * gitui는 밝은 테마와 어두운 테마의 터미널 모두에서 자동으로 작동함.
     * 모든 것을 취향에 맞게 사용자 정의할 수 있음.

키 바인딩

     * 키 바인딩은 사용자 정의가 가능함.

후원

영감

     * lazygit, tig, GitUp 등에서 영감을 받음.
     * 터미널 도구에서 맵 뷰를 사용할 수 있는 방법을 고안하는 것이 좋을 것임.

  GN⁺의 의견

     * GitUI는 터미널을 선호하는 사용자들에게 GUI의 편리함을 제공하면서도 빠른 속도와 낮은 메모리 사용량을 자랑함. 이는 특히 대형 리포지토리를 다룰 때 매우 중요함.
     * 오픈소스 프로젝트로서, 개발자 커뮤니티의 지원과 기여를 통해 지속적으로 발전하고 있으며, 사용자의 피드백을 반영하여 기능을 개선해 나가고 있음.
     * GitUI는 개발자들이 터미널 환경에서도 효율적으로 git 작업을 수행할 수 있도록 도와주는 도구로, 특히 키보드 조작에 익숙한 사용자들에게 매우 유용할 것으로 보임.

        Hacker News 의견

     *

     키보드만으로 빠르고 직관적인 제어
          + 사용자는 좋은 의도로 프로그램을 만들었을 것이나, 설치 후 첫 시도에서 xterm 창 크기 조절이나 파일 트리 창의 크기 조절이 불가능했음. 키보드로도 해당 기능을 찾을 수 없었으며, 마우스로 크기 조절이 가능하다면 훨씬 쉽고 빠를 것임.
     *

     lazygit에서 영감을 받은 프로젝트
          + lazygit 사용자로서, lazygit에서 부족한 점이 무엇인지 궁금함. lazygit은 매우 유용하게 사용되고 있음.
     *

     대형 리포지토리에서 인기 있는 git GUI의 실패
          + 대형 리포지토리나 깊은 디렉토리 구조에서 git 상태 확인이 오래 걸리는 문제는 경험함. GUI, TUI, 커맨드라인 간의 차이가 실제로 있는지 의문임.
     *

     새로운 프로젝트에 대한 기대
          + GitExtensions가 리눅스 네이티브 애플리케이션으로 포팅되기를 바람. 다양한 UI를 시도했지만 GitExtensions만큼 좋은 것을 찾지 못함.
     *

     클릭-앤-드래그 UI에 대한 질문
          + git에서 브랜치 작업을 드래그 앤 드롭으로 할 수 있는 UI가 있는지 궁금함.
     *

     Neogit 플러그인 사용 경험
          + 약 한 달 전부터 사용하기 시작한 Neogit 플러그인과 유사함. 처음에는 키 바인딩이 어려웠지만, 익숙해지면 이전 워크플로우보다 훨씬 빠름.
     *

     개인적인 도구 사용 경험
          + 다양한 도구를 시도했지만, 항상 어떤 중요한 기능이 빠져 있거나 원하는 대로 작동하지 않아 결국 tig으로 돌아감. GitUI에서는 브랜치 구조를 잘 보여주는 기능이 부족함.
     *

     일상적으로 사용하는 도구
          + 매일 사용하는 도구로서 매우 간단하고 훌륭함. 커밋에 서명하려면 Git 자체를 사용해야 함을 유의.
     *

     관련 링크
          + GitUI: Terminal UI for Git, Terminal-UI for Git written in Rust 관련 해커뉴스 댓글 모음 링크 제공.
     *

     GUI 사용의 특정 장점에 대한 질문
          + GUI를 사용해본 적 없는 사용자가 GUI를 사용함으로써 얻을 수 있는 특정 장점이 무엇인지 배우고 싶어 함.
"
"https://news.hada.io/topic?id=12667","HN 소개: 딜로 브라우저의 부활","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 소개: 딜로 브라우저의 부활

Dillo 웹사이트 소개

     * Dillo는 리눅스, BSD, MacOS, 심지어 아타리에서도 작동하는 멀티플랫폼 그래픽 웹 브라우저임.
     * C와 C++로 작성되었으며, 의존성이 적음.
     * 자체 실시간 렌더링 엔진을 구현함.
     * 메모리 사용이 적고, 큰 페이지에서도 빠른 렌더링을 제공함.
     * 빠르고 부피가 작은 FLTK GUI 라이브러리를 사용함.
     * HTTP, HTTPS, FTP 및 로컬 파일을 지원함.
     * GitHub에서 검색 가능한 어떤 언어로든 작성된 플러그인으로 확장 가능함.
     * GPLv3 라이선스를 가진 자유 소프트웨어임.
     * 버그 미터를 사용하여 웹 표준 준수를 돕는 기능을 제공함.

프로젝트 목표

     * 웹 접근성의 장벽을 낮춤.
     * 오래되거나 성능이 낮은 기기 및 느린 연결을 지원함.
     * 개인의 보안과 프라이버시를 중시함.
     * 소프트웨어 효율성을 높임.

다운로드 및 기여 방법

     * git 저장소에서 Dillo를 다운로드하고 README의 지침을 따라 설치함.
     * 웹을 탐색하면서 작동하지 않는 부분을 발견하면 보고함으로써 기여할 수 있음.
     * Dillo의 존재와 활동을 알리고, 새로운 기능을 구현하거나 버그를 수정한 후 패치를 보내거나 풀 리퀘스트를 생성함으로써 기여할 수 있음.

GN⁺의 의견

     * Dillo는 오래된 기기나 느린 인터넷 연결을 가진 사용자들에게 매우 유용한 웹 브라우저임. 이는 기술 접근성을 높이는 데 기여함.
     * 자체 렌더링 엔진과 낮은 메모리 사용으로 빠른 웹 서핑 경험을 제공하며, 이는 사용자 경험을 향상시킴.
     * 오픈 소스이며, 커뮤니티의 기여를 통해 지속적으로 개선되고 있어, 소프트웨어 개발에 관심 있는 초급 소프트웨어 엔지니어들에게 실질적인 참여 기회를 제공함.

        Hacker News 의견

     * 놀라운 경험에 감사
          + Rodrigo와 dillo 팀, Jorge Arellano Cid 등에게 감사의 말을 전함.
          + M1 맥에서 Dillo 브라우저 설치 경험 공유:
               o 맥 설치 지침을 따르고, brew install로 필요한 패키지와 openssl 버전 3을 설치함.
               o git에서 설치할 때 ./configure 실행 전에 openssl 파일을 찾기 위한 export 명령어 실행 필요.
               o make 후 sudo make install 실행하고 dillo를 실행하면 빠르고 잘 작동함.
               o 1.6MB 바이너리 크기, SSL 지원, 구글 검색은 CSS 오류가 있지만 어느 정도 작동함.
               o 자바스크립트 없이는 구글 로그인 불가능함.
     * 저사양 하드웨어를 위한 빠르고 가벼운 브라우저의 필요성
          + SBC, RPi, 몇 년 된 랩탑 등을 설정할 때 브라우저 성능이 유일한 걸림돌이 됨.
          + MS Teams와 웹메일을 위해 Ryzen 7과 16GB RAM이 필요한 상황에 안타까움을 표함.
     * Dillo의 효율성에 대한 만족
          + 2009년형 넷북 두 대를 소유하고 있으며, Firefox보다 Dillo가 훨씬 잘 작동함.
          + 메모리가 부족한 기기에서 Dillo를 사용한 좋은 추억이 있으며, 현재도 사용 중임.
          + 자바스크립트 엔진이 없어 매우 안전한 브라우저임.
          + Dillo를 15년 넘게 사용해온 사용자로서, 앞으로도 계속 사용하기를 바람.
     * Dillo의 재발견과 만족
          + 오래전에 사용하다가 잊고 있었던 Dillo를 다시 발견함.
          + Arch에서 테스트 후 Raspberry Pi Zero W에 설치함.
          + 텍스트 전용 브라우저들과 비교해 Dillo가 훨씬 낫다고 평가함.
          + dillorc 파일을 생성하거나 git 페이지에서 기본 dillorc를 추가해야 함.
     * Dillo의 확장 시스템에 대한 관심
          + w3m의 로컬 CGI 스크립트를 연상시키는 확장 시스템에 대해 설명함.
          + w3m과 Dillo 모두 매뉴얼 페이지 뷰어, 북마크 시스템, 추가 프로토콜 구현 등을 지원함.
          + w3m 외에 이러한 시스템을 지원하는 브라우저가 있다는 사실에 놀라움을 표함.
     * Dillo 사용 시 발생한 문제점
          + 깃허브에서 코드를 다운로드하여 빌드하고 시도해봤지만, 기본 사이트인 dillo.org 방문 시 브라우저가 충돌함.
          + OpenSSL과 관련된 문제로 보이며, mbedSSL로 재컴파일하면 사이트 방문이 가능함.
          + 로그인 시도 시 문제 발생함.
     * Dillo에 대한 감사와 질문
          + 과거 Puppy Linux에서 Dillo를 사용했던 경험을 회상함.
          + 최소 컴파일러 목표, 장기 계획, 퍼징, CMake 같은 '현대적' 빌드 시스템으로의 이동에 대한 질문을 함.
     * Dillo 사용자의 경험 공유
          + 이미지와 CSS를 끄고 Dillo를 주 브라우저로 사용했던 경험을 공유함.
          + GUI 요소 토글링과 설정 파일을 통한 세밀한 조정이 가능함.
          + 사용자 경험을 완벽하게 제어할 수 있었던 유일한 브라우저라고 평가함.
          + Windows 포트인 D+에 대한 정보도 공유함.
     * Dillo에 대한 애정과 기여 의사
          + Dillo에 대한 애정을 표현하며, 다양한 Dillo 플러그인을 수집했다고 함.
          + 관심이 있다면 이를 압축하여 프로젝트에 기여할 수 있도록 제공할 의사를 밝힘.
     * Dillo 프로젝트에 대한 감사
          + 오랜 시간 전에 심어진 씨앗이 계속해서 성장하는 것을 보며 감사함을 표현함.
"
"https://news.hada.io/topic?id=12656","Bazzite - 데스크탑, 거실, 휴대용 PC를 위한 SteamOS-like OCI 이미지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Bazzite - 데스크탑, 거실, 휴대용 PC를 위한 SteamOS-like OCI 이미지

     * SteamOS의 대체 OS로 사용 가능
     * 데스크탑, 거실용 홈씨어터 PC 및 다양한 휴대용 PC에서 사용 가능
     * Nvidia 드라이버를 내장한 Fedora 기반 ublue-os를 이용
     * H264 디코딩 하드웨어 가속
     * AMD의 ROCM OpenCL/HIP 런타임 지원
     * XBox 컨트롤러 지원
     * Synaptics의 Display Link 지원
     * OBS Vulkan/OpenGL 게임 캡쳐 기능 기본 내장 (MangoHud, LatencyFleX, vkBasalt 포함)
     * Winesync/Fastsync/NTsync 지원
     * 자동 업데이트를 위한 Distrobox 내장
     * HDMI CEC 지원
     * System76-Scheduler 내장
     * Google의 BBR TCP congestion control 알고리듬을 기본 이용
     * 안드로이드 앱 구동을 위한 Waydroid 내장
     * Flatseal, Warehouse, Gear Lever 를 이용한 어플리케이션 관리
     * Southern Islands (HD 7000), Sea Islands (HD 8000) AMD GPU 지원(amdgpu driver)
     * XwaylandVideoBridge 로 Wayland에서 Discord 스크린 공유 지원
"
"https://news.hada.io/topic?id=12646","2023년 TorrentFreak에 제출된 모든 DMCA 통지는 가짜였다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                2023년 TorrentFreak에 제출된 모든 DMCA 통지는 가짜였다

새해 결심: 불법 복제 방지 회사의 오류 DMCA 공지 중단 희망

     * 2024년 1월 1일부터 TorrentFreak은 불법 복제 방지 회사들이 자사에 대한 근거 없는 DMCA 공지를 중단하기를 조용히 희망함.
     * 2023년 초 주요 범인들은 3주도 채 못 가 DMCA 공지를 보냈고, 다른 이들은 이틀 전까지도 보냄.
     * 저작물을 무단으로 사용하는 제3자에 대해 DMCA 공지를 제출할 수 있으며, 플랫폼은 이를 받고 콘텐츠를 내려야 함.

2023년 새해: 19일간 평화로움

     * 2023년 1월 19일까지 이메일로 직접적인 DMCA 공지가 없었으며, Google에도 공지가 없었음.
     * 1월 20일, Google은 4일 전에 발행된 기사를 검색 결과에서 제외하라는 요청을 받음.
     * 인도에서 불법 앱 PikaShow의 운영자가 체포된 것이 뉴스 가치가 있다고 판단했으나, 인도 기반의 반복적인 DMCA 공지로 인해 문제 발생.

워너브라더스의 권리 침해로 '하우스 오브 더 드래곤'에 대한 글쓰기

     * 2022년 10월 22일, HBO의 ""하우스 오브 더 드래곤"" 시즌 파이널이 정식 방영 2일 전에 온라인에 유출됐다고 보도함.
     * PikaShow와 관련된 문제 이후 거의 2주간의 DMCA 침묵이 깨지고, Markscan이 워너의 저작권을 침해했다고 주장하며 Google에 공지를 보냄.

DMCA 봇에게 경고

     * Google의 세심함이 없는 경우, 직접 받은 DMCA 공지는 법적 문서로 취급되어야 함.
     * 2023년 4월 3일, 터키 기반의 DigiGuardians Inc.로부터 '저작권 클레임'이라는 제목의 이메일을 받음.
     * 제공된 URL이 TorrentFreak.com이 아니라 다른 도메인이었기 때문에 DMCA 요구 사항을 준수할 수 없었음.

다른 사이트에 대한 더 많은 DMCA 공지

     * 2023년 4월 4일, DigiGuardians는 유사한 DMCA 공지를 보내며 50개의 URL 제거를 요구함.
     * DigiGuardians는 뉴스 게시물에 대한 협력을 제안했으나 TorrentFreak은 뉴스 사이트로서 제안을 거절함.

그 봇에게 한 대 때려라

     * 이전의 성가신 오류 공지를 거의 잊고 있었으나, 12월 14일 다시 공지를 받기 시작함.
     * 이번에는 'Muhteşem İkili'라는 영화에 대한 URL을 제거하라는 지시를 받았으나, 문제가 되는 URL은 완전히 다른 새 도메인이었음.

   GN⁺의 의견:
    1. 이 기사는 DMCA 공지의 오용과 그로 인한 문제점을 조명함으로써, 저작권 보호와 디지털 콘텐츠 관리의 복잡성을 이해하는 데 도움을 줌.
    2. Google과 같은 플랫폼의 중요한 역할과 저작권 침해 주장에 대한 신중한 검토의 중요성을 강조함.
    3. 불법 복제 방지 회사들의 실수가 반복되는 경우, 이러한 문제를 공개적으로 지적하는 것이 저작권 관리 시스템의 투명성과 효율성을 높이는 데 기여할 수 있음.

        Hacker News 의견

     * DMCA 개정에 대한 희망
          + DMCA가 개정되어 성공적인 경우에만 회수 가능한 수수료 제출을 요구하길 바람.
          + 이는 근거 없는 주장에 맞서는 데 도움이 될 수 있음.
          + 실제 주장에 대해서는 비즈니스 비용의 일부로 간주해야 함.
          + 현재 거의 비용이 들지 않는 상황은 더 많은 근거 없고 모호한 주장을 장려할 뿐임.
     * Yout 대 RIAA 사례
          + 현재 Yout 대 RIAA 사건이 미국 제2순회 항소법원에서 구두 변론을 기다리고 있음.
          + Yout는 지방 법원에서 패소함.
          + 이 사건은 RIAA가 보낸 DMCA 우회 통지에 초점을 맞추고 있음.
     * 저작권 개혁 필요성
          + 저작권이 목적을 달성하지 못하고 있으며, DMCA는 21세기 저작권 문제의 많은 증상 중 하나임.
     * Torrentfreak의 법적 구제 방안
          + 통지서가 위증의 위험을 감수하면서도 정보가 정확하다고 계속 주장하는 경우, Torrentfreak가 어떤 조치를 취할 수 있는지 의문.
     * DMCA에 대한 비판
          + DMCA는 시작부터 실행까지 완전히 쓰레기임.
          + 대부분의 경우, 잘못된 정보나 충분한 조사 없이 보내는 데 대한 불이익이 없기 때문에 무기화된 형태로 사용되는 것으로 보임.
          + 저작권자에 대한 동정은 있지만, 100년 이상의 저작권은 말도 안 됨.
          + 거짓 DMCA가 보내질 때 뒷받침할 근거가 필요함.
          + Google과 같은 대기업이 비용을 부담할 수 있지만, 이는 여전히 시간과 돈의 낭비임.
          + DMCA를 수정하는 방법은 법원에 제출해야 하는 문서로 만드는 것임.
          + 변호사가 이 문서에 서명하고, 거짓이거나 저작권 위반 여부를 충분히 조사하지 않은 문서에 대해 변호사를 법정 모독으로 처벌할 수 있어야 함.
"
"https://news.hada.io/topic?id=12694","10억 행 도전 과제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              10억 행 도전 과제

10억 행 챌린지

     * 2024년 1월 1일부터 1월 31일까지 진행되는 '10억 행 챌린지(1BRC)'가 발표됨.
     * 참가자들은 자바 프로그램을 작성하여 텍스트 파일에서 기온 측정값을 검색하고, 각 기상 관측소별 최소, 평균, 최대 기온을 계산해야 함.
     * 파일에는 10억 개의 행이 있으며, 각 행에는 하나의 측정값이 기록되어 있음.

챌린지 규칙

     * 모든 제출물은 자바로 작성되어야 함.
     * SDKMan을 통해 사용할 수 있는 모든 자바 배포판과 openjdk.net의 초기 액세스 빌드를 사용할 수 있음.
     * 외부 종속성은 사용할 수 없음.

참여 방법

     * GitHub에서 1brc 저장소를 복제하고 README 파일의 지침을 따라야 함.
     * 기본 구현을 사용하여 비교 기준을 마련하고 올바른 결과를 내는지 확인할 수 있음.
     * 작업에 만족하면 상위 저장소에 풀 리퀘스트를 열어 챌린지에 참여할 수 있음.

평가 및 상

     * 모든 제출물은 Hetzner Cloud CCX33 인스턴스(8개의 전용 vCPU, 32GB RAM)에서 실행되어 평가됨.
     * 실행 시간은 'time' 프로그램을 사용하여 측정되며, 가장 느린 실행과 가장 빠른 실행은 제외되고 남은 세 번의 실행의 평균값이 결과로 사용됨.
     * 상으로는 새로운 것을 배우고, 다른 사람들에게 영감을 주며, 점수판에 이름을 올리는 자부심을 얻을 수 있음.
     * 소문에 따르면 우승자에게는 독특한 1️⃣🐝🏎️ 티셔츠가 주어질 수도 있음.

GN⁺의 의견

     * 이 챌린지는 자바 커뮤니티에게 자바의 성능 한계를 탐구하고 최적화 기술을 공유할 기회를 제공함.
     * 대규모 데이터 처리에 대한 자바의 능력을 시험하고, 최신 자바 기능과 성능 향상 기술을 실제로 적용해 볼 수 있는 실질적인 경험이 될 수 있음.
     * 참가자들은 자신의 기술을 전 세계와 경쟁하며, 학습과 협력의 장을 통해 개발 역량을 향상시킬 수 있는 기회를 가짐.

   1등이 6초네요.. 놀랍네요
"
"https://news.hada.io/topic?id=12621","새해 복 많이 받으세요, HN!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           새해 복 많이 받으세요, HN!

HN 방문의 가치

     * HN(Hacker News)에 많은 시간을 할애함.
     * 인터넷 상의 다른 곳들과 비교했을 때, HN만이 하루에 여러 번 방문할 가치가 있는 유일한 장소로 느껴짐.
     * 모든 이들에게 훌륭한 2024년이 되기를 바람.

GN⁺의 의견

     * HN은 기술 및 스타트업 커뮤니티에서 인기 있는 뉴스 공유 및 토론 사이트로, 다양한 주제에 대한 심도 있는 토론이 가능함.
     * 사람들이 HN을 하루에 여러 번 방문하는 이유는 실시간으로 업데이트되는 풍부한 정보와 지식 공유의 가치 때문일 수 있음.
     * 이 글은 HN의 커뮤니티 멤버들이 사이트에 대해 갖는 긍정적인 인식과 그들의 일상에서 HN이 차지하는 중요성을 반영함.

        Hacker News 의견

     * 한 사용자는 대학 시절 기술적인 대화를 나눌 친구들이 있었으나 졸업 후에는 더 이상 만나지 못해 아쉬움을 느낌. 해커뉴스(HN)는 그런 대화를 들을 수 있는 집 같은 곳이라고 감사의 말을 전함.
     * 다른 사용자는 해커뉴스와 dang에게 감사를 표하며, 영국에서 2024년 새해가 밝았고 훌륭한 한 해가 되기를 바람.
     * 한 사용자는 암스테르담에서 R&D 프로젝트에 참여하며 GPS, 좌표 시스템, 알고리즘에 대해 많이 배웠지만, 통근 시간이 길어져 우울하고 피곤해짐을 경험함. 해커뉴스를 통해 시간을 보내며 많은 도움을 받았고, 모두에게 새해 복을 빔.
     * 한 사용자는 자신의 '가장 기술적인' 새해 결심을 공유하며, 할 일 목록을 우선순위 큐로 만들고 25개를 넘지 않게 유지하겠다고 함.
     * 또 다른 사용자는 해커뉴스 커뮤니티의 조용한 멤버로서 매일 영감을 주는 댓글들을 보기 위해 돌아옴을 자랑스럽게 생각하며, 모두에게 좋은 2024년이 되기를 바람.
     * 한 사용자는 해커뉴스가 자신이 방문하는 유일한 웹사이트이며, 과거에 자신의 블로그 글에 친절했다고 언급하며 pikuma.com 팀을 대표해 새해 인사를 전함.
     * 다른 사용자는 해커뉴스가 광고가 없고, 훌륭한 모더레이션과 유용한 토론 및 링크가 있는 유일한 사이트라고 말하며, 이러한 분위기가 변하지 않기를 바람.
     * 한 사용자는 2024년을 '프로덕션으로 배포'할 시간이라고 말하며, 모든 해커들에게 코드가 항상 처음 시도에 잘 작동하고 문제가 발생하지 않기를 바람.
     * 마지막 사용자는 dang에게 감사를 표하며, 해커뉴스가 초기 인터넷과 비슷한 몇 안 되는 장소 중 하나라고 느낌을 표현함.
"
"https://news.hada.io/topic?id=12643","브라우저에서 작동하는 데스크톱 환경, DaedalOS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     브라우저에서 작동하는 데스크톱 환경, DaedalOS

        Hacker News 의견

     * 모바일에서 매우 부드럽게 작동하는 점에 대해 깊은 인상을 받았으며, Winamp가 좋은 감성을 더해줌. 제작자는 이를 만드는 데 부업으로 3년이 걸렸다고 함.
     * 이것은 매우 인상적인 Windows UI 클론으로, 사이트가 잘 만들어졌을 뿐만 아니라, 제작자의 현재 생활과 미래의 포부에 대한 글을 읽는 것도 즐거움. 코드, UI, 콘텐츠의 전체 패키지가 감동적임. 제작자가 되고자 하는 시니어 소프트웨어 엔지니어가 되기를 바람 - 그들은 그것을 받을 자격이 있음.
     * 여기에 비슷한 웹 데스크톱의 거대한 컬렉션이 있음. 그러나 windows93과 windows96만이 진짜 좋음.
     * 이것이 실제 데스크톱 환경보다 더 반응이 좋다는 점에 대해 놀랍고도 실망스러움.
     * 이전 토론들: (2020년 11월 28일 149포인트, 43개의 댓글) (2022년 1월 3일 194포인트, 126개의 댓글)
     * 내장된 브라우저가 있어서 같은 웹사이트를 브라우저 안에서 열고 재귀적으로 탐색할 수 있음.
     * GitHub 저장소를 찾음: daedalOS
     * 정말 멋짐! Chrome이 이제 각 탭이 소비하는 메모리 양을 보여줌. 어떤 작업을 해도 항상 50MB를 유지하는데, 이는 Chrome의 버그로 보임. 반면에 Stack Overflow 페이지는 87MB를, HN은 약 30MB를 소비함.
     * 메신저 기능이 nostr DM을 사용한다는 점이 흥미로움.
     * 개인적으로는 Windows 93을 선호함.
"
"https://news.hada.io/topic?id=12686","자체적으로 재미있는 소규모 게임 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          자체적으로 재미있는 소규모 게임 제작

소규모 게임 제작의 즐거움

     * 소규모 게임 제작은 자체적으로 즐거운 활동임.
     * '소규모 게임 선언문'에 따르면, 소규모 게임은 10분 이내에 끝나고 브라우저에서 쉽게 플레이할 수 있는 게임을 의미함.
     * 이미 350개 이상의 소규모 게임을 만들었으며, 한 해에 139개의 게임을 만든 적도 있음.

소규모 게임 아이디어 구상 방법

     * 소규모 게임의 매력은 개발 시간이 짧아 다양한 아이디어를 실험하기 쉬움.
     * 소규모 게임 제작은 더 크고 정교한 게임을 개발하기 위한 준비 단계로 여겨짐.
     * ""큰 게임을 만들기 전에 많은 소규모 게임을 만들고 출시하라""는 블로그 포스트는 이러한 실천의 중요성을 강조함.

소규모 게임의 독특한 매력

     * 소규모 게임은 그 자체로 독특한 매력을 가지고 있음.
     * ""좋은 소규모 게임 만들기"" 블로그 포스트는 훌륭한 소규모 게임이 존재하며, 이를 만드는 방법을 설명함.
     * 게임의 품질은 규모와 독립적이며, 작은 약속을 하고 이를 흥미롭고 기쁘게 이행하는 것이 중요함.

GN⁺의 의견

     * 소규모 게임 제작은 게임 개발 기술을 연마하는 데 도움이 될 뿐만 아니라, 창의적인 아이디어를 실험하고 즐기는 과정 자체가 가치 있는 경험이 됨.
     * 이 글은 소규모 게임이 단순한 연습 과제가 아니라, 개발자의 개성과 창의성을 표현할 수 있는 독립적인 예술 형태임을 강조함.
     * 소규모 게임 개발에 대한 이해는 초급 소프트웨어 엔지니어들에게 게임 개발의 접근성을 높이고, 작은 규모의 프로젝트로부터 큰 성취를 얻을 수 있음을 보여줌.

        Hacker News 의견

     * 게임 디자인과 게임 개발의 차이점에 대한 학습
          + 게임 디자인은 창의적인 마음이 필요하며, 게임 개발은 무자비한 실행을 요구함.
          + 처음에는 기존 게임을 재창조하는 것이 한 분야에서 숙련될 때까지 배우는 데 도움이 됨.
          + 최근 작업한 게임의 무료 보드 링크 제공: li-quoridor (진행 중인 작업)
     * 빠르게 만들 수 있는 게임 모델의 재미
          + 팬데믹 시작 시 몇 가지 게임을 만들었으며, 아이들이 마우스와 키보드 사용법을 배우는 데 도움이 됨.
          + 다른 사람들도 자신의 게임을 만들어 보는 것을 권장함.
          + 만든 게임의 링크 제공: alexsci.com/games (특정 화면 크기에만 작동, 일부는 키보드 필요, 지침 없음 등)
     * Rust를 사용한 게임 제작을 통한 학습
          + Bevy를 사용하여 게임을 만들고 배운 것을 기록함.
          + 작은 게임일수록 완성할 가능성이 높음.
          + 움직임을 재미있게 만든 후 게임과 같은 개념을 개발함.
          + 혼자 있을 때도 시뮬레이션을 만드는 것이 재미있으며, 새로운 엔진에서 boids를 만드는 것은 훌륭한 연습임.
          + 게임 제작에 대한 학습 자료 링크 제공: taintedcoders.com
     * 작은 게임 개발의 즐거움에 대한 논의
          + 동일한 저자의 또 다른 흥미로운 기사는 ""Joy of small game development""
          + 저자가 만든 1D 팩맨 게임이 1,700점 이상으로 트렌딩됨.
          + 이는 저자가 자신의 말을 실천하고 있음을 증명함.
          + 게임 링크: 1D pacman
     * 저자의 게임들은 모두 플레이 가능
          + 모든 게임이 플레이 가능한 링크 제공: asahi-net
          + 게임 메커닉별로 분류된 게임 목록이 더 매력적일 수 있음.
          + 게임 메커닉 태그 링크: abagames
     * 작은 게임 제작의 즐거움에 대한 책 추천
          + 팬데믹 동안 작은 게임을 만드는 것을 도전 과제로 삼음.
          + 타일 맵을 자르고 주석을 달 수 있는 도구를 먼저 만든 후, 브라우저용 최소한의 도시 시뮬레이터를 만듦.
          + 브라우저용 단일 파일 ""앱""을 만드는 실험도 재미있었음.
          + 도구 및 시뮬레이터 링크: tmt.computerpho.be, pc.computerpho.be
     * 직장을 그만두고 게임 제작에 몰두
          + 게임 제작을 매우 압도적으로 느꼈으나, 게임 메커닉을 무엇이든 만들 수 있다는 것을 깨달음.
          + Baldur's Gate 3 게임이 RPG에 대한 영감을 줌.
          + DnD에 대한 경험이 없었지만 BG3를 통해 RPG의 의미를 이해함.
     * ChatGPT를 사용하여 코드를 작성한 게임
          + ChatGPT가 코드를 작성한 게임 링크: rockpaperscissorslizardsomething
     * 팬데믹 기간 동안 게임 제작
          + 프로토타입 제작에 긴 주말이 걸렸으나, 상태 관리, 모바일 반응성, 애니메이션 추가 등의 작업이 초기 개발 시간을 능가함.
          + 창의적인 즐거움에서 유지 보수와 버그 수정의 지루함으로 변화함.
          + 게임 제작이 여전히 재미있고, 좋은 학습 경험임.
          + 만든 게임 링크: gramjam.app
"
"https://news.hada.io/topic?id=12639","지연 행동이 완벽주의와 연관되어 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          지연 행동이 완벽주의와 연관되어 있다

완벽주의와 지연행동: 그들의 연결고리와 대처법

     * 완벽주의와 지연행동은 복잡한 관계를 가짐.
          + 완벽주의의 일부 측면은 지연행동을 증가시킬 수 있음.
               o 부정적인 자기 평가, 타인의 기대에 대한 지나친 집착, 성공에 대한 만족감 부족, 실수에 대한 과도한 걱정, 능력과 행동에 대한 의심 등이 포함됨.
          + 다른 측면은 지연행동을 감소시킬 수 있음.
               o 높은 개인적 기준을 설정하고 이를 달성하려는 노력이 포함됨.
     * 사회적으로 부과된 완벽주의는 지연행동을 증가시킬 가능성이 높고, 자기 지향적 완벽주의는 감소시킬 가능성이 높음.
     * 부모의 비판이나 자기 효능감과 같은 요소들이 완벽주의와 지연행동의 관계에 영향을 줄 수 있음.

관련 심리 메커니즘

     * 완벽주의는 실수에 대한 부정적 감정을 증가시켜 작업 지연을 유발할 수 있음.
     * 높은 기대치로 인해 목표 달성이 불가능해 보이게 만들어 포기하게 할 수 있음.
     * 완벽주의-지연행동 사이클이 발생할 수 있음.

지연행동의 다른 원인들

     * 완벽주의 외에도 불안, 실패에 대한 두려움, 우울 등 다양한 이유로 인해 지연행동이 발생할 수 있음.
     * 많은 지연행동의 원인들이 완벽주의와 관련되어 있을 수 있음.

완벽주의적 지연행동자

     * 완벽주의적 지연행동자에 대한 보편적 정의는 없으나, 주로 완벽주의로 인해 심각한 지연행동을 겪는 사람들을 의미함.
     * 완벽주의와 우울증 등 다른 원인들이 결합된 경우에도 사용될 수 있음.

완벽주의적 지연행동 대처법

     * 합리적인 목표와 기준 설정.
     * 타인보다 자신에게 집중.
     * 두려움에 대한 질문과 대처.
     * 완벽주의의 부정적 영향 고려.
     * 실수를 허용하는 태도 개발.
     * 자기 효능감 개발.
     * 자기 연민 개발.
     * 타인의 지원과 격려 받기.
     * 작업을 작고 관리 가능한 단계로 나누기.
     * 아주 작은 단계부터 시작.
     * 작업 간 전환.
     * 진행 상황 인정과 보상.
     * 생산성 주기에 맞춰 작업 일정 잡기.
     * 작업 환경 개선.
     * 충분한 휴식.
     * 과거의 지연행동 용서.

GN⁺의 의견

     * 완벽주의와 지연행동 사이의 관계는 개인의 성격과 상황에 따라 달라질 수 있음.
     * 이 글은 완벽주의적 성향을 가진 사람들이 자신의 행동을 이해하고 개선할 수 있는 방법을 제공함.
     * 지연행동을 줄이기 위한 실질적인 전략과 기술을 제시하여 독자들이 자신의 생산성과 웰빙을 향상시킬 수 있는 기회를 제공함.

        Hacker News 의견

     * 한 명의 개발자가 독성 상사와 일하면서 완벽주의와 지연 행동을 개발함.
          + 상사는 제품의 품질에 상관없이 항상 문제를 찾아내고 비판함.
          + 상사는 자신의 나쁜 기분을 팀에게 풀며, 실수가 자신의 잘못이 아닌 사람들도 해고함.
          + 개발자는 아무것도 출시하지 않는 것이 비판을 피하는 유일한 방법이라고 배움.
          + 이러한 습관을 버리는 데 오랜 시간이 걸렸으며, 이전 직장의 영향으로 성격이 형성됨을 깨달음.
     * 또 다른 사용자는 완벽주의와 지연 행동에 대한 자신의 경험과 조언을 공유함.
          + 대부분의 경우 자신이 제공하는 가치와 타인의 기대치를 과대평가함.
          + 빠른 출시의 가치를 과소평가하고 있음을 지적함.
          + 완성도가 낮은 작업물도 긍정적인 피드백을 받은 경험을 공유함.
          + 다른 사람의 작업을 마무리하는 것이 자신의 작업을 시작하는 것보다 낫다고 느낌.
          + 지연 행동과 성장 마인드셋에 대해 팀과 공유하며, 이 문제를 공동으로 해결하는 데 도움이 됨을 언급함.
     * 에드 캣멀의 책 ""Creativity Inc.""에서 인용한 댓글은 실패에 대한 관점을 바꿔야 한다고 주장함.
          + 실패는 새로운 것을 시도할 때 불가피하며, 창의성 없이는 발전이 없음을 강조함.
          + 실패를 학습의 중요한 부분으로 받아들이지만, 실패의 고통이 우리의 이해를 방해할 수 있음을 인정함.
     * 지연 행동에 대한 해독제로 지루함을 활용하는 방법을 제시함.
          + 지루함을 강제로 경험하면 결국 정신적 자극을 갈망하게 되어 지연하던 작업에 집중할 수 있음.
          + 이 방법은 자기 통제력과 자기 인식이 필요함.
     * 완벽주의와 관련된 심리학적 측면을 다룸.
          + 의도적이고 체계적인 완벽주의는 높은 의식과 관련이 있으며, 이는 관리되지 않으면 불안과 연관됨.
          + 불안은 일반적으로 신경증과 관련이 있지만, 높은 의식으로 인해 불안 증상을 겪을 수 있음.
          + 잘못된 결과에 기여하고 받아들이는 법을 배우는 것이 해결책임.
     * 통제 상실에 대한 두려움이 완벽주의로 이어지며, 이는 끝없는 준비와 압박감으로 인한 공포를 유발함.
          + 정신적 이미지를 많이 만들어내는 사람들이 지연 행동에 취약함.
          + 자존감, ADHD, 두려움 등이 지연 행동에 영향을 미침.
          + 명상, 운동, 호흡 운동 등 이완을 돕는 활동이 도움이 됨.
     * 지연 행동과 사람들을 기쁘게 하려는 성향을 바꾼 두 가지 간단한 해결책을 공유함.
          + ""다른 사람들이 무엇을 생각할까?"" 대신 ""내가 무엇을 원하는가?""를 물어보는 것.
          + 2분 이내에 할 수 있는 일이면 바로 실행하는 것.
     * 지연 행동이 낮은 투자 대비 수익(ROI) 상황에서 합리적인 반응이라는 믿음을 가진 사용자의 의견.
          + 완벽한 결과를 기대하고 그것이 달성될 것이라는 의심이 있을 때 예상 ROI가 낮음.
     * ADHD가 지연 행동의 원인일 수도 있다는 의견.
          + ADHD를 동기 부족 장애로 설명하는 러셀 바클리의 비디오를 참조함.
     * ""완료된 것이 어떤 모습인지 알아야 한다""는 말을 반복한 강사와 ""이 제품의 #1 기능은 '출시'""라고 말한 관리자의 경험을 공유함.
          + 출시 일정에 대한 압박이 없는 앱 개발 상황에서 팀이 ""영구 조정"" 모드에 빠짐.
          + 결국 출시되지 않을 것이라고 판단하고 임의의 출시 날짜를 설정함.
"
"https://news.hada.io/topic?id=12650","OpenVoice: 다재다능한 즉각적인 음성 복제 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenVoice: 다재다능한 즉각적인 음성 복제 기술

OpenVoice: 다재다능한 즉각적인 음성 복제 기술

     * OpenVoice는 참조 음성의 짧은 오디오 클립만으로 해당 음성을 복제하고 다양한 언어로 음성을 생성할 수 있는 다재다능한 음성 복제 접근법임.
     * 이 기술은 음성 스타일 제어의 유연성, 참조 음성의 톤 색깔 복제뿐만 아니라 감정, 억양, 리듬, 정지, 억양 등 음성 스타일에 대한 세밀한 조절이 가능함.
     * OpenVoice는 대규모 화자 훈련 데이터 세트에 포함되지 않은 언어에 대해서도 제로샷 크로스링귈 음성 복제를 달성함.

기술적 세부사항 및 연구 기여

     * OpenVoice는 상업적으로 사용 가능한 API보다 수십 배 더 효율적인 계산 비용을 자랑하며, 성능도 우수함.
     * 연구 분야의 추가적인 발전을 위해 소스 코드와 훈련된 모델을 공개적으로 접근 가능하게 함.
     * 데모 웹사이트에서 질적 결과를 제공하며, 공개 전 내부 버전은 2023년 5월부터 10월까지 전 세계 사용자들에 의해 수천만 번 사용됨.

GN⁺의 의견

     * OpenVoice는 음성 복제 기술에서 중요한 진보를 나타내며, 특히 다양한 언어와 스타일로 음성을 생성할 수 있는 능력은 매우 혁신적임.
     * 이 기술은 교육, 엔터테인먼트, 개인화된 음성 서비스 등 다양한 분야에서 응용될 잠재력을 가지고 있음.
     * 공개된 소스 코드와 모델은 음성 기술 연구를 가속화하는 데 기여할 것으로 기대됨.

        Hacker News 의견

     * 사용자는 이 프로젝트를 시도하기 쉽게 만든 저자들에게 칭찬을 보냄. 그러나 일반적인 목소리 복제에 대해서는 만족스럽지 못한 결과를 경험함. 위키피디아의 책에 관한 페이지 첫 단락을 읽고 다음 문장을 생성하게 했지만, 결과물이 컴퓨터가 생성한 것처럼 들림.
          + 제공된 오디오 샘플과 복제된 목소리(mp3 변환) 링크를 참조함.
          + 필요한 패키지를 pip으로 설치하고, 자신의 오디오 샘플을 사용해 ""demo_part1.ipynb""를 실행함. 노트북에서 거의 즉시 실행됨.
     * 사용자는 자신의 하드웨어에서 목소리 복제를 하고 싶을 때 사용할 수 있는 좋은 오픈 소스 프로젝트를 추천해달라고 요청함. 오픈 소스 목소리 복제의 최신 상태가 궁금함.
     * 사용자는 이 기술(또는 Eleven Labs)을 사용하여 안드로이드 폰의 TTS에 플러그인할 수 있는 목소리 모델을 생성할 수 있는지 질문함.
          + 사용자의 친구는 후두 마비로 인해 종종 휴대폰이나 작은 노트북으로 타이핑하여 의사소통을 함. 친구가 과거의 자신의 목소리 녹음을 사용하여 ""자신의"" 목소리를 어느 정도 되찾을 수 있다면 좋아할 것임.
     * 사용자는 이 논문을 좋아함. ""우리가 한 일과 다른 사람들이 그것을 할 수 있도록 돕고자 한다""는 느낌을 받음. 특히 ""Remark on Novelty"" 섹션을 긍정적으로 평가함: OpenVoice는 모델 구조의 하위 모듈을 발명하는 것이 아니라, 목소리 스타일과 언어 제어를 음색 복제로부터 분리하는 분리된 프레임워크를 제공하는 것이 기여점임.
     * GitHub 링크와 체크포인트(zip 파일) 링크를 제공함. 사용자는 아마존에서 호스팅되는 zip 파일에 대한 직접 링크에 알레르기가 있어서 체크포인트 링크를 수정하여 제공함.
     * 제공된 예시 링크가 인상적이라고 평가함.
     * 사용자는 YouTube가 이 기술의 사용을 금지하거나 적어도 이러한 비디오를 필터링할 수 있는 기능을 제공하기를 바람.
     * 사용자는 영국의 주요 은행 중 하나에 전화했을 때, 은행이 여전히 ""내 목소리가 내 비밀번호다""라는 프로그램에 등록하도록 권장하고 있음을 경험함. AI의 현재 발전 단계에서 이는 단순히 부주의한 것으로 느껴짐.
     * 사용자는 목소리 복제의 부도덕하거나 범죄적인 사용이 합법적인 사용을 크게 초과한다고 생각하는 것이 첫 번째이자 지속적인 생각임.
     * 오픈 소스 목소리 복제 분야의 현재 리더는 RVC이며, 이와 비교하여 어떻게 다른지 보고 싶어함.
"
"https://news.hada.io/topic?id=12627","이메일 주소, 계정의 '영구적인' 식별자로 부적합","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      이메일 주소, 계정의 '영구적인' 식별자로 부적합

이메일 주소는 계정의 '영구적' 식별자로 적합하지 않음

     * 이메일 주소를 계정의 영구적 내부 식별자로 사용하는 것은 문제가 있음. 사람들의 이메일 주소는 조직 내에서조차 변할 수 있으며, 이는 이름이나 로그인 정보가 바뀌는 다양한 이유와 유사함.
     * 조직이 사람들에게 할당된 이메일 주소를 변경하거나 다시 설정하지 않는 것은 법적으로 지속 가능하지 않을 수 있음.
     * 이메일 주소가 재사용되거나 특정 인물에 의해 재할당될 가능성이 있으며, 이는 보안 문제를 야기할 수 있음.

내부 식별자는 의미 없어야 함

     * 계정 복구를 위해 이메일 주소를 기억해야 할지라도, 내부 계정 식별자는 의미 없는 것이어야 함. 이는 장기적으로 시스템 관리를 간소화함.
     * OIDC와 같은 인증 시스템에서는 이메일 주소 대신 고유하고 영구적인 내부 ID를 사용해야 함.
     * 이메일 주소에 너무 많은 의미를 부여하는 것은 보안 문제를 초래할 수 있음.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 이메일 주소를 영구적인 계정 식별자로 사용하는 것이 여러 가지 문제를 야기할 수 있다는 점임.
     * 이 주제가 흥미로운 이유는 많은 시스템이 사용자 인증을 위해 이메일 주소를 사용하고 있지만, 이 글은 그러한 관행이 잠재적인 보안 위험과 관리상의 문제를 일으킬 수 있음을 지적함.
     * 이 글은 소프트웨어 엔지니어들에게 내부 시스템 설계 시 고려해야 할 중요한 보안 및 관리 측면에 대한 인식을 높이는 데 도움이 될 수 있음.

        Hacker News 의견

     * 이메일과 사용자 이름의 한계성
          + 이메일 주소는 변경될 수 있고, 사람들은 이전 이메일에 대한 접근을 잃을 수 있음.
          + 사용자 이름에 대한 불만이 있으며, 사람들은 고유하지 않은 이름을 선택하길 원함. 예를 들어 user53267 같은 이름 대신에.
          + 장치를 잃어버리는 경우도 있으며, 쿠키에 저장된 비밀 UUID나 장치의 패스키만으로는 충분하지 않음.
          + 이메일이나 사용자 이름이 안정적인 사람도 있지만, 같은 주 장치를 수년 이상 사용하는 사람은 거의 없음.
          + 업무용 이메일 계정(first.last@company.com)과 벤더 소프트웨어가 'Google로 로그인'을 사용하는 방식에서 문제가 자주 발생함.
          + 사람들은 결혼하고, 이혼하고, 성별 전환을 하고, 문화를 옮기며 새로운 이름을 선택함. 이름과 이메일 주소는 변함.
          + OIDC와 같은 것들이 사용자 이름과 이메일 주소를 변경할 수 있는 표준 API를 필요로 할 수 있음.
     * 개인적인 대처 방안
          + Gmail은 AI 알고리즘에 의해 임의로 잠길 수 있고, 문제가 생겼을 때 구제받기 어려움.
          + Yahoo는 오래된 이메일로 인증을 요구하여 접근을 잃을 수 있음.
          + Yahoo/AOL/Tutanota/Protonmail 등은 자주 로그인하지 않으면 계정을 자동 삭제할 수 있음.
          + 자체 호스팅은 초기 이메일이 필요하며, 이를 잃으면 호스팅 계정에 대한 접근을 잃을 수 있음.
          + Duo push는 전화기가 고장 났을 때 문제가 될 수 있음.
          + SMS 인증은 전화기 고장, 플랜 접근 상실, 직원의 보안 문제 등으로 인해 위험할 수 있음.
          + 대학교 Gmail 주소를 사용하는 것이 현재로서는 최선의 방법으로 보임. 문제가 생겼을 때 대학교 지원 센터에 도움을 요청할 수 있음.
     * 이메일과 전화번호의 문제점
          + 이메일은 영구적인 식별자로 좋지 않으며, 전화번호를 식별의 일부로 사용하는 것은 더욱 나쁨.
          + 자신의 도메인을 통해 거의 20년 동안 같은 이메일을 사용했지만, 같은 기간 동안 거의 12개의 전화번호를 거쳐감.
          + 해외 거주 중에도 미국 번호를 유지하기 위해 AT&T에 매달 약 $150를 지불하고 있음.
     * 공개 키 이메일 주소에 대한 제안
          + 공개 키 이메일 주소(<pk-12345@gmail.com>)를 지원하는 아이디어 제시.
          + Google이나 Hotmail이 서비스를 중단하더라도 다른 서비스에서 개인 키로 인증하여 동일한 계정에 접근할 수 있음.
          + 이메일 클라이언트가 이러한 주소를 매핑하거나 공개 키로 추적할 수 있도록 함.
          + 이 아이디어는 대규모 지원이 필요하지만, 생각해볼 가치가 있음.
     * UUID의 사용
          + 무작위 UUID가 최선이라는 의견.
          + 사용자의 초기 이메일을 해시하는 것은 솔팅만으로는 충분하지 않을 수 있음.
     * 다중 이메일 주소 연결
          + 계정에 여러 이메일 주소를 연결할 수 있도록 이메일 시스템을 변경 중임.
          + 학생 할인을 제공하기 위해 교육용 이메일을 확인하는 것이 가장 쉬운 방법이지만, 대부분의 사람들은 그 이메일로 가입하고 싶어하지 않음.
          + 여러 이메일을 허용함으로써 두 세계의 장점을 모두 가질 수 있음.
     * 이메일 주소와 물리적 주소의 연결 문제
          + 한 이메일 주소를 여러 물리적 주소에 사용하지 못하게 하는 에너지 공급업체의 예시.
          + 온라인 계정을 설정할 때 동일한 이메일 주소를 사용할 수 없어 문제가 발생함.
     * 클라이언트 측 솔루션
          + 도메인을 지불하여 이메일 별칭을 100% 제어할 수 있음.
          + 현재 제공자(Google)에 문제가 생기더라도 자체 서버에서 메일을 호스팅하여 계정을 검색하고 별칭 소유권을 유지할 수 있음.
     * 식별과 인증의 문제
          + 식별과 인증을 혼합하여 논의하는 문제가 있음.
          + 식별 문제는 이름, 이메일, 신분증 등 인간에게 연결된 고유한 문자열이나 숫자를 통해 사실상 해결됨.
          + 인증 문제는 실제로 누구인지 확인하는 것으로, 현대 기술이 직면한 가장 큰 문제 중 하나임.
          + 비밀번호, 지리적 위치, IP 주소, 이메일, 전화번호, 보안 토큰 및 인증서의 조합을 사용하지만, 이러한 시스템은 정기적으로 침해되며 보안을 강화하면 합법적 사용자에게 부정적인 영향을 미침.
     * 백엔드 문제
          + 사용자에게는 이메일이 ID이지만, 시스템 데이터 내에서는 이메일을 기본 키로 사용해서는 안 됨.
          + 데이터베이스 설계의 기본적인 문제로, 이메일과 같은 식별자를 사용하지 않고 고유한 ID(UUID 또는 시퀀스에서 자동 증가)에 매핑하는 조회 테이블을 가짐.
          + 기사는 이 구분을 명확히 하지 않아 사용자가 이 추상화를 인식해야 한다는 식으로 읽힐 수 있음.
"
"https://news.hada.io/topic?id=12747","2024년 트렌드 예상 보고서 모음 - 구글 드라이브","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     2024년 트렌드 예상 보고서 모음 - 구글 드라이브

     * 약 180+개 (1.51GB) 의 2024년 트렌드 덱 모음. 2023년에 대한 리뷰들 포함
     * HBR, 액센츄어, 포레스터, 골드만삭스, PWC, KPMG, 딜로이트 등의 보고서들
     * AirBNB, Microsoft, Snowflake, IBM, Visa, Linkedin, Expedia 같은 개별 회사의 분야별 보고서들 포함

   이런 정보에 목 말라 있었는데 정말 감사합니다!

   감사합니다

   감사합니다!

   유용한 자료들을 찾아다니는 수고 덜어주신 것 감사드립니다.
"
"https://news.hada.io/topic?id=12725","IRS, 자체 무료 세금 신고 시스템 시범 운영 개시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     IRS, 자체 무료 세금 신고 시스템 시범 운영 개시

I.R.S. 자체 무료 세금 신고 시스템 시범 운영 시작

     * 미국 내수수입청(I.R.S.)이 올해 일부 주의 주민들을 대상으로 연방 세금 신고를 위한 무료 옵션을 제공하기 시작함.
     * 지난달, I.R.S.는 내부 세금 신고 시스템을 시험하는 계획의 세부사항을 발표했으며, 이 시스템을 통해 납세자들은 온라인으로 직접 연방 세금 신고를 무료로 제출할 수 있음.
     * 특정 기준을 충족하는 12개 주의 주민들이 참여할 수 있음.
     * I.R.S.의 커미셔너인 Danny Werfel은 최근 성명에서 ""이것은 납세자들에게 I.R.S.와 직접 무료로 신고할 수 있는 새로운 옵션을 제공하는 가능성을 테스트하는 혁신적인 노력에 대한 중요한 진전""이라고 언급함.

   GN⁺의 의견:
     * 이 기사는 미국 내수수입청이 자체적인 무료 세금 신고 시스템을 시험하는 것에 대한 중요한 발전을 보여줌. 이는 납세자들에게 더 편리하고 비용 효율적인 방법을 제공할 수 있는 잠재력을 가지고 있음.
     * 세금 준비 업체들로부터의 저항에도 불구하고, 이러한 시스템은 정부가 납세 과정을 간소화하고 접근성을 높이려는 노력의 일환임.
     * 납세자들에게 직접적인 영향을 미치는 이러한 변화는 세금 신고 시즌이 다가옴에 따라 많은 사람들에게 흥미롭고 유익한 정보가 될 것임.

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + 미국의 세금 시스템과 관련된 역사적 배경을 이해하고 싶다면, patio11의 블로그 포스트를 추천함. 이 포스트는 급여 시스템에 대해 다루지만, 미국 세금의 역사로 확장되어 이러한 시스템의 기원을 설명함.
          + Intuit가 미국의 세금 정책을 통제할 수 없음을 언급하는 인용구가 토론에 관련이 있음. Norquist는 공공 세금 신고 옵션을 은밀한 세금 인상으로 간주하고 자동으로 반대함.
          + 아리조나, 캘리포니아, 플로리다, 매사추세츠, 네바다, 뉴햄프셔, 뉴욕, 사우스다코타, 테네시, 텍사스, 워싱턴 주, 와이오밍이 참여하고 있음을 참고.
          + IRS가 최소한의 웹 포털을 제공하지 않는 이유를 이해하기 어려움. 이 포털을 통해 주소 변경, 안전한 서신 교환, 서신 상태 확인, 전자 양식 제출 등의 간단한 작업을 할 수 있을 것임.
          + 뉴욕 주의 세금 신고 시스템을 구축한 Code for America에 감사를 표함. 이는 큰 잠재력을 가짐.
          + 많은 사람들이 단 하나의 직업만 가지고 있으므로, 회사와 협력하여 자동 신고에 대한 옵트인을 제공해야 함. 복잡한 시스템에 따라 정확하게 신고하는 작업을 수행해야 하는데, 이는 급여의 일부를 지불해야 하는 것만큼이나 번거로움.
          + 개인 정보가 유출되거나 해킹될 우려가 적어서, 직접 손으로 세금을 계산하고 우편으로 보냄. 무료이며, 양식에는 지침이 포함되어 있어 약간 성가실 수 있음.
          + IRS 소프트웨어가 자동으로 모든 데이터와 양식을 미리 채워주면 좋을 것임. W-2, 1099 등이 모두 포함되어 있고, 확인만 하고 보고되지 않은 소득을 입력하기만 하면 됨.
          + 연간 6천만에서 2억 5천만 달러에 달하는 비용이 어떻게 산정되는지 보고 싶음.
"
"https://news.hada.io/topic?id=12641","표준 전자책표준 전자책

스탠다드 이북스의 차별점

     * 스탠다드 이북스는 공공 도메인 이북을 새롭게 제작하는 자원봉사 중심의 프로젝트로, 사랑을 담아 포맷하고, 오픈 소스이며, 미국 저작권 제한이 없고, 비용이 들지 않음.
     * 프로젝트 구텐베르크와 같은 이북 프로젝트들이 이북을 전사하고 다양한 독서 기기에 제공하는 반면, 스탠다드 이북스는 이들로부터 이북을 가져와 전문적인 스타일 매뉴얼을 사용하여 포맷하고 교정한 후 최신 이북 리더 및 브라우저 기술을 활용하는 새로운 판을 제작함.
     * 스탠다드 이북스는 단순히 디지털 도서관에 아름다운 추가물이 아니라, 자신의 이북을 만들기 위한 고품질 표준임.

전문적인 타이포그래피

     * 다른 무료 이북들은 전문적인 타이포그래피에 큰 노력을 기울이지 않지만, 스탠다드 이북스는 엄격하고 현대적인 스타일 매뉴얼을 적용하여 전문적인 수준의 일관된 타이포그래피 표준을 충족시키는 이북을 개발함.
     * 이북은 좋은 외관을 가짐.

꼼꼼한 교정과 정확한 수정

     * 다른 출처에서 전사된 내용은 종종 오타가 많거나 일관성 없는 철자, 누락된 악센트 표시, 또는 누락된 구두점 등의 문제를 가짐.
     * 스탠다드 이북스는 각 이북을 출시하기 전에 원본 페이지의 스캔과 대조하여 가능한 많은 오타를 수정하는 꼼꼼하고 완전한 읽기를 수행함.
     * 오타가 발견되더라도, Git 소스 제어 시스템에 저장되어 있어 누구나 쉽게 수정을 제출할 수 있음.

풍부하고 상세한 메타데이터

     * 이북에는 완전하고 잘 연구된 일관된 메타데이터가 포함되어 있으며, 원본의 상세한 책 설명과 백과사전 출처 링크가 포함됨.
     * 기계 처리 또는 기술적으로 호기심이 많은 독자에게 완벽함.

최신 기술의 활용

     * 각 스탠다드 이북은 최신 이북 리더 기술을 완전히 활용함.
     * 하이픈 지원, 팝업 각주, 고해상도 및 확장 가능한 벡터 그래픽, 이북 호환 목차 등을 포함함.
     * 고전이라도 구식 기술을 사용할 필요가 없음.

품질 있는 표지

     * 책은 표지로 평가받지만, 대부분의 무료 이북은 이북 소프트웨어가 기본적인 표지를 생성하도록 함.
     * 스탠다드 이북스는 공공 도메인 미술 작품의 방대한 컬렉션에서 가져와 각 이북에 매력적이고 독특하며 적절하고 일관된 표지를 제작함.

깨끗한 코드와 의미 있는 마크업

     * 엄격한 코딩 표준을 통해 기술자와 이북 제작자가 스탠다드 이북 파일을 신뢰할 수 있고, 쉽게 읽을 수 있으며, 견고한 기반으로 사용할 수 있음.
     * 각 이북은 기계 처리를 위한 새로운 종류의 문을 여는 세심한 표준 기반 의미 마크업으로 향상됨.

무료, 오픈 소스 및 공공 도메인

     * 모든 변경 사항을 추적하기 위해 인기 있는 Git 소스 제어 시스템을 사용함.
     * 스탠다드 이북스가 제공하는 모든 이북과 표지 아트는 이미 미국에서 공공 도메인으로 간주되지만, 스탠다드 이북스는 각 이북에 투입된 모든 작업을 공공 도메인에도 공개함.

GN⁺의 의견

     * 스탠다드 이북스는 고품질의 무료 이북을 제공하는 것으로, 전문적인 타이포그래피와 꼼꼼한 교정을 통해 독자에게 최상의 독서 경험을 제공하는 것이 중요함.
     * 이 프로젝트는 기술적으로 진보된 이북 제작 방식을 채택하여, 고전 작품을 현대적인 기술로 새롭게 경험할 수 있는 기회를 제공함.
     * 오픈 소스와 공공 도메인에 대한 헌신은 지식과 문화의 자유로운 전파를 촉진하며, 이는 교육과 연구에 있어 매우 중요한 가치를 지님.

   Standard Ebooks - Public Domain 전자책 모음 사이트

        Hacker News 의견

     * 편집장이 직접 댓글을 달아 질문에 답하며, 자신의 블로그 글을 공유함. 이 글에서는 SE가 어떻게 소규모 VPS와 클래식 웹 기술을 사용하여 운영되는지 설명함. 현재는 데이터베이스가 있지만, 이는 후원자 관리와 표지 아트 목록 및 승인 시스템을 위한 것이며, 실제 전자책은 여전히 블로그 글에 설명된 방식으로 제공됨. 공개 도메인의 날을 맞아 1928년에 출판된 주목할 만한 책들을 준비했으며, 새로운 기여자들을 환영함.
     * 한 기여자가 2021년 휴직 기간 동안 프로젝트를 위해 몇 권의 책을 출판했음. 책을 교정하고 다시 읽는 데 많은 시간이 소요되지만, 오류를 잡기 위해 다르게 읽는 방법에 놀라움. 프로젝트의 성공은 강한 편집 의견에 기인하며, 품질에 대한 일관성은 핵심 그룹에 의해 유지됨. ""샌프란시스코 뉴스레터와 캘리포니아 광고주""의 아카이브를 방문하여 Bierce의 원작을 수집함으로써, 프로젝트 구텐베르크에서 호스팅된 이전 버전보다 완전하고 정확한 오픈 소스 버전을 만듦.
     * 다른 해커뉴스 사용자들에게, Standard Ebooks와 프로젝트 구텐베르크의 차이점은 개선된 타이포그래피/스타일링과 현대 독자 기술의 전면적 사용임. 전자 텍스트와 전자책은 다름을 인식할 것.
     * 한 사용자는 Standard Ebooks가 Lulu와 같은 서비스를 통해 인쇄하고 배송할 수 있는 파일 다운로드 옵션을 제공하기를 희망함. 아마존에서 구매한 공개 도메인 책들은 대체로 낮은 품질임을 지적하며, 고품질 하드커버를 그리워함.
     * 관련된 해커뉴스 토론 링크를 공유함. 이전 토론들에서는 ""Standard Ebooks""에 대한 다양한 의견과 정보가 교환됨.
     * 한 사용자는 Standard Ebooks 프로젝트가 잘 운영되고 있으며, 최고 품질의 전자책을 생산한다고 칭찬함. 자원 봉사자와 기부금을 항상 찾고 있음.
     * Standard Ebooks의 팬이 자신이 만든 SaaS 제품을 소개함. 이 사이트는 Modern Serial이라고 하며, Standard Ebooks의 책을 Substack 스타일의 이메일 뉴스레터로 매일 10분씩 읽을 수 있게 함.
     * 한 사용자는 Standard Ebooks의 ""Nostromo""와 ""Vanity Fair""를 읽었으며, 품질이 훌륭하다고 평가함. 고전 문학에 관심이 있는 사람들에게 추천함.
     * 또 다른 사용자는 프랑스 문학에도 이와 같은 서비스가 있었으면 좋겠다고 희망함.
     * 마지막으로 한 사용자는 이 프로젝트가 매우 멋지다고 생각하며, 기부할 것임을 밝힘.
"
"https://news.hada.io/topic?id=12688","개미들이 감염된 상처를 인식하고 항생제로 치료하는 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     개미들이 감염된 상처를 인식하고 항생제로 치료하는 현상

사하라 사막 이남에 서식하는 마타벨레 개미

     * 마타벨레 개미는 흰개미와의 싸움에서 자주 부상을 입음.
     * 동족이 상처가 감염되었는지를 인식하고 스스로 항생제 치료를 시작함.
     * 상처 입은 개미의 다리가 흰개미와의 싸움에서 물려 떨어진 경우, 다른 개미가 상처를 돌봄.

치료로 사망률 크게 감소

     * 상처 감염으로 인해 개미의 표피에 있는 탄화수소 프로파일이 변화하는데, 이를 개미들이 인식하여 감염 여부를 진단함.
     * 감염된 상처에는 메타플레우랄샘에서 나오는 항생물질과 단백질을 바르는 치료를 함.
     * 이 치료법은 매우 효과적이며, 감염된 개미의 사망률을 90% 감소시킴.

개미 항생제 분석 계획

     * 마타벨레 개미의 상처 치료 능력은 인간을 제외하고는 매우 독특함.
     * 개미의 상처에 주로 감염되는 병원균인 Pseudomonas aeruginosa 는 인간에게도 감염을 일으키는 주요 병원균임.
     * 연구자들은 다른 개미 종과 다른 사회적 동물들의 상처 치료 행동을 연구하고, 마타벨레 개미가 사용하는 항생제를 식별하고 분석할 계획임.

출판물

     * ""Targeted treatment of injured nestmates with antimicrobial compounds in an ant society""라는 제목의 연구 논문이 Nature Communications 저널에 게재됨.

비디오

     * 비디오에서는 상처 입은 동족을 치료하는 마타벨레 개미를 볼 수 있음.
     * 개미가 앞다리로 메타플레우랄샘을 잡고 거기서 항생물질을 채취하여 상처에 옮김.

넷플릭스 다큐멘터리에 등장하는 마타벨레 개미

     * 마타벨레 개미의 상처 치료 연구는 넷플릭스의 8부작 자연 다큐멘터리 ""Life on Our Planet""에 관심을 끔.
     * 시리즈는 스티븐 스필버그가 감독하고 모건 프리먼이 내레이션을 맡음.
     * 마타벨레 개미는 ""In the Shadow of Giants""라는 제목의 다섯 번째 에피소드에 등장함.

에릭 프랭크의 자서전

     * 에릭 프랭크의 ""Une Histoire de Fourmis""라는 자서전이 2023년 10월부터 시장에 나옴.
     * 저자는 자신의 연구, Comoé 연구소에서의 경험, 뷔르츠부르크 대학에서의 박사 과정 시절을 기술함.

연락처

     * 에릭 프랭크 박사의 연구 그룹, 동물 생태학 및 열대 생물학 의자, 뷔르츠부르크 대학, erik.frank@uni-wuerzburg.de

추가 이미지

     * 왼쪽은 신선한 상처, 오른쪽은 치료 1시간 후의 상태를 보여줌.
     * 메타플레우랄샘은 마타벨레 개미의 흉부 측면에 위치함.

   GN⁺의 의견:
     * 이 기사는 마타벨레 개미가 동족의 상처를 인식하고 자체적으로 항생제 치료를 하는 놀라운 능력을 보여줌으로써, 동물 행동학과 의학 연구에 중요한 기여를 함.
     * 개미가 사용하는 항생물질의 분석은 인간에게도 적용 가능한 새로운 항생제 발견으로 이어질 수 있어 의학계에 큰 기대를 모음.
     * 넷플릭스 다큐멘터리 ""Life on Our Planet""에 등장하는 마타벨레 개미의 이야기는 자연과 과학에 관심 있는 사람들에게 흥미로운 콘텐츠를 제공함.

        Hacker News 의견

     * 개미의 놀라운 적응력과 지능적인 행동에 대한 감탄

     ""개미의 놀라운 적응력과 지능적인 행동이 거의 무서울 정도로 인상적이며, 현실보다는 Adrian Czajkowski/Tchaikovsky의 작품에서 읽을 법한 내용임.""
     * 개미의 발견이 인간 감염 치료법 개선에 도움이 될 수 있음을 언급

     ""이 발견이 인간 감염 치료에 도움이 될 수 있다는 점이 놀랍고, 개미의 상처 주요 병원균인 Pseudomonas aeruginosa가 인간에게도 감염을 일으키는 주요 원인이며, 여러 균주가 항생제에 내성을 가지고 있기 때문에 의학적 함의가 있음을 Erik Frank와 Laurent Keller가 언급함.""
     * 개미가 상처 치료를 위해 메타플레우럴샘에서 항생제를 추출하는 과정에 대한 호기심

     ""상처 치료를 위해 개미가 메타플레우럴샘에서 항생제와 단백질을 적용하는데, 이샘은 가슴 옆쪽에 위치하며, 분비물에는 112개의 성분이 포함되어 있고, 그 중 절반은 항균 또는 상처 치유 효과가 있음.""
     * Matabele 개미가 감염된 상처를 효과적으로 치료하는 고도의 의료 시스템 개발

     ""상처가 감염되면 생존 위험이 크지만, Matabele 개미는 감염되지 않은 상처와 감염된 상처를 구별하고, 후자를 자체 생산한 항생제로 효과적으로 치료하는 정교한 의료 시스템을 개발함.""
     * 개미가 전투 중 상처를 입고도 항생제 덕분에 빠르게 기능을 회복하는 사례

     ""개미가 흰개미와 전투 중 상처를 입었을 때, 항생제 덕분에 기본 기능을 하루 만에 회복할 수 있었으며, 팔이나 다리를 잃고도 항생제를 몇 초 또는 몇 분만 투여받으면 정상적으로 활동할 수 있음을 YouTube 비디오에서 확인함.""
     * 자체 생성된 항생제와 T-세포 또는 항체의 차이에 대한 질문

     ""자체 생성된 항생제가 T-세포나 항체와 어떻게 다른지에 대한 의문 제기.""
     * 개가 상처를 핥으려는 행동에 대한 개인적 경험 공유

     ""개가 종이에 베인 상처나 건조한 피부를 핥으려고 하는 것을 관찰하고, 이것이 상처를 깨끗이 하는 행동 같다고 느낌. 개가 많은 세균을 가지고 있기 때문에 핥은 후에는 손을 비누로 잘 씻음.""
     * 개미와의 지속적인 싸움과 주방 청결 유지의 중요성

     ""주방에서 개미와 지속적인 싸움을 벌이고 있으며, 주방을 매우 깨끗하게 유지하는 것이 유일한 해결책임을 경험함.""
     * 동일 종 내 개체를 의미하는 'conspecific'에 대한 정의

     ""conspecific: 같은 종의 구성원.""
     * 개미를 실제 머신러닝 모델에 비유

     ""개미는 마치 실제 머신러닝 모델과 같음.""
"
"https://news.hada.io/topic?id=12746","Harlequin - 터미널용arlequin - 터미널용 SQL IDE

     * 쉽고 빠르고, 예쁜 터미널용 데이터베이스 클라이언트 : ""Portable, powerful, colorful""
     * 어떤 쉘에서도 다 실행됨 : 윈/맥/리눅스 및 ""Fish in tmux on Alpine over SSH"" 같은 특수 환경에서도 잘 동작
     * DuckDB, SQLite, Postgres, MySQL 어댑터 직접 제공
          + 커뮤니티 제작 어댑터: BigQuery, Trino, Clickhouse
     * 데이터 카탈로그 : 테이블/컬럼보기
     * 쿼리 편집기 : 자동 완성, 포맷팅, 멀티 탭, 열기/저장 등
     * 쿼리 결과 창 : 1백만개 이상의 결과도 인터랙티브하게 보기 가능. 멀티 탭 지원
     * 풀 스크린 (F10)
     * 쿼리 결과 내보내기 (CSV등)

   제일 좋은건 데이터그립인데… 개인 프로젝트 때문에 구입하긴 좀 그렇고 해서 고민 중이던 차에 좋은 도구를 알게 되었네요.
   감사합니다.

   샤코가 생각나버렸습니다..
"
"https://news.hada.io/topic?id=12721","문전 서비스로 맥 컴퓨터 수리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            문전 서비스로 맥 컴퓨터 수리

AppleCare Dispatch

     * AppleCare Dispatch 프로그램은 데스크탑 맥 사용자가 특정 지역에 거주할 경우, AppleCare를 통해 보증 지원을 요청하면 수리를 위해 부품을 가지고 직접 사용자의 집으로 출장 가는 서비스.
     * 출장 서비스는 주로 Apple Store의 수리가 지연되거나 고객이 매우 중요한 경우에 제공되며, 기사는 대중교통을 이용해 고객의 집에 방문하여 맥 하드웨어 수리를 담당.
     * AppleCare와의 관계는 독특했으며, Apple 내부의 많은 사람들은 이 프로그램의 존재를 잘 알지 못했지만, 고객 만족도가 높으면 Apple로부터 크게 간섭받지 않았음.

Tools etc

     * 수리 도구로는 Wiha 정밀 드라이버를 사용했으며, 맥은 FireWire를 통해 부팅되었기 때문에 FireWire 800 LaCie 드라이브를 표준 장비로 사용.
     * 수리에 필요한 소프트웨어로는 DaisyDisk, DiskWarrior 등이 있었으며, Kapton 테이프, 블랙 스퍼저, 범용 드라이브 케이블 등이 필요했음.

9/11 Truther

     * 첫 출장 중 한 고객은 맥 프로의 로직 보드를 교체해야 했으며, 이 고객은 9/11 사건이 내부 공작이라는 음모론 비디오를 보여주며 설득하려 했음.
     * 해당 고객은 9/11 진실을 밝히는 데 집 전체를 할애하고 있었으며, 자신이 제작한 음모론 관련 비디오와 웹사이트 자산을 가지고 있었음.

The Doctors

     * 부유한 고객 중 한 명은 Lake Shore Drive에 위치한 고가의 건물에 살고 있었으며, 이들의 집은 대부분 비슷한 템플릿으로 꾸며져 있었음.
     * 이러한 고객들은 종종 수리 기사를 인식하지 못하고, 집안의 가구처럼 대했으며, 집안에는 수백만 달러 상당의 예술품이 먼지를 쌓으며 방치되고 있었음.

HARPO Studio

     * HARPO 스튜디오에서 오프라 윈프리 쇼가 촬영되었으며, 기사는 ""고프로파일"" 컴퓨터 수리를 위해 호출되었음.
     * 오프라 윈프리와 마주쳤지만, 기사는 그녀에게 인사를 하거나 사인을 요청하지 않았으며, 오프라가 방문했을 때는 책상 아래에 숨어 있었음.

Brownstone Moms

     * 링컨 파크, 스트리터빌, 올드 타운 등 부유한 지역의 부유한 가정에서 자주 출장 수리 요청을 받았으며, 이들은 종종 기사에게 추가적인 기술적 작업을 요청함.
     * 이러한 고객들은 높은 고객 서비스 기대치를 가지고 있었으며, 때로는 기사에게 자녀의 스마트폰을 감시하도록 요청하기도 했음.

Robbed for Broken Parts

     * 학교에서 대량의 맥 수리를 요청하는 경우가 흔했으며, 이러한 대량 수리는 일반적으로 쾌적한 환경에서 이루어졌음.
     * 하지만 한 번은 수리 후 귀가하던 중 부서진 부품을 가지고 강도를 당했으며, Apple은 이를 운송 중 분실로 처리해주었음.

   GN⁺의 의견:
     * 이 기사는 AppleCare Dispatch라는 독특한 출장 수리 서비스에 대한 흥미로운 내밀한 이야기를 제공함. 이 서비스는 고객 만족도를 매우 중요시했으며, 수리 기사는 고객의 집에서 직접 수리를 수행했음.
     * 기사의 경험은 Apple 제품의 수리가 어떻게 진행되었는지, 그리고 기술 지원 분야에서의 고객 서비스가 어떤 모습이었는지에 대한 실제 사례를 보여줌.
     * 특히, 부유한 고객들과의 상호작용은 기술 지원 업무의 다른 측면을 드러내며, 이는 기술과 사회 계층 간의 상호작용에 대한 통찰력을 제공함.

        Hacker News 의견

     * 90년대 중반에 부유한 사람들의 집을 방문하며 흥미로운 경험을 한 이야기
          + 부유한 사람들의 대형 서재와 호화로운 집 내부를 볼 수 있었음
          + 지루해하는 주부들에게서 관심을 받기도 함
          + 미국 여성의 잉크젯 프린터를 연결했으나 주파수 변환기가 아니어서 프린터가 고장 나고, 아파트가 연기로 가득 참
          + 이 일을 통해 범죄 조직과 연결되어 해적 소프트웨어 FTP 서버를 운영함
     * 은퇴한 친구들에게 자신의 경험담을 쓰도록 권장하는 이야기
          + 인생에서 겪은 역사적, 사회적, 문화적, 기술적 변화를 기록하는 것의 중요성 강조
          + 다양한 직업을 가진 은퇴자들이 흥미로운 이야기를 할 수 있음
     * 인터넷 초기의 정신을 담은 글쓰기에 대한 애정
          + 좋아요나 구독을 얻기 위한 목적이 아닌, 순수하게 공유하고자 하는 마음에서 쓴 글에 대한 칭찬
     * 2004-2006년경 뉴욕에서 컴퓨터 수리 일을 하며 겪은 경험담
          + 대부분 지식이 부족한 사람들을 위해 수리하며, 때로는 대가로 마약이나 성적 제안을 받기도 함
          + 유명인사들을 고객으로 두며 흥미로운 시간을 보냈으나, 결국 긴 업무 시간에 지쳐 그만둠
     * 시카고에서 15년을 살며 겪은 다양한 경험에 대한 공감
          + 도시 생활에서 무의식적으로 위험을 계산하는 습관에 대한 공감 표현
     * 맥 컴퓨터 수리를 위한 특수 도구에 대한 회상
          + 오리지널 맥을 여는 데 사용되었던 '케이스 크래커'라는 도구에 대한 언급
          + 당시 맥 컴퓨터는 비싸지만 훌륭한 기계였음
     * 15세 소녀가 추적 소프트웨어 설치를 요청하며 돈을 제안한 일화
          + 소녀의 어머니가 소프트웨어가 제대로 설치되었는지 확인할 것이라고 말했지만, 실제로 확인하지 않을 것임을 알고 있었음
     * 익명성이 주는 안전함에 대한 언급
          + 위협이 효력을 잃는 순간은 자신에 대한 어떠한 개인 정보도 묻지 않았을 때임
     * 서비스 업계 종사자들과의 대화의 중요성을 인식하는 글
          + 시카고의 부유층에 대한 일화가 캘리포니아의 부유층과 유사함을 언급
     * 다양한 고객을 만나는 사람들의 경험이 흥미롭다는 의견
          + 자동차 쇼룸에서 일하며 겪은 경험담과 유명인사를 만났을 때의 반응에 대한 개인적 견해 공유
"
"https://news.hada.io/topic?id=12633","PwC의 2024년 AI 비즈니스 6대 전망 (2024 AI Business Predictions) ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PwC의 2024년 AI 비즈니스 6대 전망 (2024 AI Business Predictions)

    PyTorchKR

     * PwC에서 AI가 어떻게 업무에 변화를 가져올지에 대한 전망을 내놓은 것을 정리하였습니다.
     * ChatGPT로 촉발된 생성형 AI 열풍이 실질적으로 업무에 변화를 가져올지 궁금하지 않으세요?
     * 앞으로 변화될 (그리고 변해야 할) 일의 미래가 어떤 모습일지를 살펴볼 수 있을 것 같아 소개합니다.
     * 아래 내용은 GPT 모델로 자동 요약한 것으로, 자세한 내용은 원문을 참고해주세요!
     * 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다! ‍♂️


  소개

   2024년에는 인공지능(AI)이 비즈니스 운영 방식을 근본적으로 변화시킬 것으로 예상됩니다. 기술 발전, 투자 증가, 인재 경쟁 등이 AI의 영향력을 높이고 있으며, 이는 기업의 수익 증대, 일상적인 운영, 고객 및 직원 참여, 새로운 비즈니스 모델 구축 등 다양한 비즈니스 측면에 영향을 미칠 것입니다.

   2023년 신흥 기술 조사(2023 Emerging Technology Survey)에 따르면, 미국 기업의 73%가 이미 일부 영역에서 AI를 도입했으며, 특히 차세대 AI(생성형 AI, GenAI: Generative AI)의 도입이 두드러집니다. 이러한 도구의 주요한 예로 ChatGPT의 출현 이후 조사 대상 기업의 54%가 비즈니스의 일부 영역에서 GenAI를 사용하고 있습니다.

   생성형 AI는 접근성과 확장성이 뛰어나며, CEO부터 소프트웨어 개발자까지 다양한 비즈니스 기능과 역할에 유용합니다. PwC는 AI 추세를 예측한 지 7년이 되면서 2024년에 대한 6가지 주요 예측을 발표했습니다. 이 예측들은 이미 뚜렷한 추세로 나타나고 있거나 곧 나타날 변화들을 포함하며, 장기적인 비즈니스 가치를 창출할 수 있는 구체적인 행동 지침을 제공합니다.

   [IMG] PwC의 2024년 AI 비즈니스 6대 전망|986x580

  전망1. 올바른 AI 선택이 기업에 중요한 경쟁 우위를 제공합니다.

    The right AI choices will provide companies a significant edge

   2024년에는 많은 기업들이 생성형(GenAI; Generative AI)로부터 매력적인 투자 수익률(ROI)을 얻을 것으로 예상됩니다. GenAI는 사용하기 쉬워 보일 수 있으나, 그 진정한 잠재력을 발휘하기 위해서는 기업의 특정한 요구에 맞게 맞춤화하고 규모를 조정하는 것이 필요합니다. GenAI를 단편적으로 사용하는 것이 아니라 확장 가능한 패턴에 중점을 두는 것이 중요합니다. 예를 들어, GenAI가 텍스트와 같은 비정형 데이터로부터 통찰력을 얻는 능력은 거의 모든 지식 노동자의 역량을 키우고 더 나은 결정을 내리는 데 도움이 될 수 있습니다.

   GenAI의 비용 절감 및 기술 개선은 기업 리더십에도 새로운 역할을 요구할 것입니다. 디지털 노동의 비용이 절감됨에 따라, 기업들은 새로운 운영과 비즈니스 모델로 전환할 수 있는 능력이 중요해집니다. 직원들이 새로운 기술을 단순히 사용하는 것을 넘어, 자신의 업무를 재구상하는 데 동기를 부여하는 것이 중요합니다.

    앞으로 해야 할 것(What to do next) 3가지

      1. 대규모로 생각하고 행동하세요. (Think and go big)

   AI의 변혁적 가치를 실현하기 위해 클라우드 서비스 제공자가 제공하는 많은 공개 모델 중 하나의 사설 버전을 라이선스하고, 이를 맞춤화하여 규모에 맞게 조정하세요.

      2. 사람을 우선시하세요. (Put people first)

   경험이 풍부한 사람들이 GenAI를 활용하여 업무 방식을 재구상하도록 동기를 부여하고, AI로 역할을 재정의할 때 새로운 기회를 제공하세요.

      3. 우선순위를 체계적으로 설정하세요. (Set priorities — methodically)

   프로세스의 가치, 확장성, 현재 소요되는 시간 및 지원 가능한 데이터의 성격을 분석하는 방법론을 고려하여 우선순위를 정하세요​​.

  전망2. GenAI가 (직원뿐만 아니라) 리더의 업무도 재정의합니다.

    GenAI will redefine the work of leaders as much as employees

   AI가 전반적인 고용에 미치는 장기적인 영향은 아직 알 수 없지만, 2024년에는 거의 모든 사람들의 업무 방식, 특히 최고 경영진의 업무 방식이 변화하기 시작할 것입니다. AI를 활용하는 방법을 아는 사람들이 그렇지 않은 사람들보다 경쟁에서 앞서나갈 것입니다. 직원들은 AI를 책임감 있게 사용하기 위한 기술, 가이드라인 및 인센티브가 필요합니다.

   중간 관리자들은 AI 에이전트가 대부분의 업무를 수행하는 팀을 관리하고 평가하는 기술이 필요하며, 기능적 리더들은 AI가 프로세스를 보완하는 것뿐만 아니라 대체할 수 있음을 이해해야 합니다. 최고 경영진은 AI 기반 운영과 비즈니스 모델에 대한 선도적인 역할을 해야 하며, 오늘날의 리더들은 조직과 AI 지식을 모두 갖추는 것이 중요합니다.

    앞으로 해야 할 것(What to do next) 3가지

      1. 인간 중심, 기술 지원의 접근 방식을 취하세요. (Be human-led and tech-powered)

   리더십 팀과 직원층 사이의 기술 및 비전 격차를 해소하고, AI를 배치하여 노동력의 고가치 업무 수행 능력과 복잡한 데이터 기반 결정을 강화하세요.

      2. 재능을 발휘하세요. (Unleash your talent)

   적절한 인센티브, 기술, 지침을 통해 조직 내의 모든 지식 노동자가 GenAI를 사용하여 업무를 자동화하거나 보완할 수 있습니다.

      3. AI에 익숙한 인재에 의존하세요.(Lean on AI natives)

   일상적인 업무에 GenAI를 사용하는 데 익숙한 대학 졸업생 및 초급 직원과 같은 노동력이 증가하고 있으며, 이들의 기술과 사고방식을 강화하는 계획을 세우세요​​.

  전망3. AI 신뢰에 대한 결정적 순간(MoT)이 다가옵니다.

    The moment of truth for trust in AI is coming

   2024년에는 AI가 데이터, 이해 관계자 및 서로 간의 상호 작용에서 핵심적인 역할을 할 것입니다. AI에 대한 신뢰가 매우 중요해질 것이며, 이는 단순히 준수 및 보안 시스템을 넘어선 의미를 갖습니다. 적절한 상황에 적합한 해결책을 통해 관련되고 신뢰할 수 있는 결과를 달성하는 것이 중요합니다. 이는 곧 책임 있는 AI(Responsible AI), 기업 전체의 접근 방식 및 관행을 필요로 합니다.

   GenAI가 더 많은 작업을 수행함에 따라 실수가 광범위한 영향을 미칠 수 있으며, 이는 변혁적 이니셔티브를 지연시킬 수 있습니다. 정책 입안자들이 이미 조치를 취하고 있으며, GenAI 관련 범죄가 주목을 받을 가능성이 있습니다. 따라서, AI 시스템의 결과에 대한 신뢰는 여전히 중요합니다.

    앞으로 해야 할 것(What to do next) 3가지

      1. 과거의 실수를 반복하지 마세요. (Don’t repeat old mistakes)

   초창기 디지털 이니셔티브에서는 신뢰가 기반이 되지 않은 경우가 많았습니다. 따라서 처음부터 책임 있는 AI를 도입하여 AI 이니셔티브를 더 빠르게 발전시키고 비용 효율성도 높이세요.

      2. 처음부터 시작하지 마세요. (Don’t start from scratch)

   AI가 고가치 작업 및 결정을 보완하거나 자동화하는 데 필요한 새로운 위험을 관리하는 것이 중요합니다.

      3. 중요한 역할을 수행하세요. (Bring in the big guns)

   AI가 조직 전체에 퍼질 가능성이 높기 때문에 모든 최고 경영진이 AI의 책임 있는 사용에 관여해야 합니다​​.

  전망4. GenAI가 데이터를 위한 '미싱 링크'가 됩니다.

    GenAI will be the ‘missing link’ for data

   GenAI는 더 많은 데이터를 더 빠르고 가치 있게 변환하는 데 도움이 될 것입니다. 이는 많은 데이터 이니셔티브에 매력적인 비용 대비 효과를 제공할 것입니다. GenAI는 프레젠테이션, 전략 문서, 고객 로그 등과 같은 다양한 문서에서 복잡한 비정형 데이터를 스캔, 요약, 번역, 분석 및 문제 해결하는 데 도움이 될 수 있습니다.

   GenAI는 데이터를 디지털화하고 클라우드로 이동시키는 것을 포함한 여러 단계를 필요로 합니다. 이러한 데이터 현대화 작업의 중요성을 기업 경영진이 점차 인식하고 있으며, 많은 기업이 이를 구현할 계획을 세우고 있습니다.

    앞으로 해야 할 것(What to do next) 3가지

      1. 클라우드를 동맹으로 만드세요. (Make cloud your ally)

   데이터가 클라우드에 있을 때 GenAI (및 어떤한 AI도)는 더 많은 일을 할 수 있습니다.

      2. 데이터에 매몰되지 마세요. (Don’t drown in it)

   현재 너무 많은 불필요한 데이터가 존재하는 문제에 직면하지 않도록 하세요.

      3. 데이터 관리자를 육성하세요. (Cultivate data stewards)

   GenAI가 데이터를 가치 있는 것으로 전환하는 데 도움을 주기 위해 데이터 소유자들에게 그들의 역할을 데이터 관리자에서 데이터 관리자로 진화시키도록 교육하세요​​.

  전망5. GenAI가 변혁을 변혁시킵니다.

    GenAI will transform transformation

   GenAI는 변혁을 더욱 시급하고, 더 많은 곳에서 가능하게 만들 것입니다. 클라우드와 결합된 GenAI의 비정형 데이터 처리 능력은 거의 모든 데이터 관련 변혁 이니셔티브를 가속화할 수 있습니다. 또한, GenAI는 이전에 도달하지 못했던 변혁의 영역으로 진입하고, 여러 단계를 건너뛰게 하는 데 도움이 될 것입니다.

   GenAI는 재무, 세무, 법률, IT, 준수 등 여러 부서에서 이전에는 불가능했던 복잡한 작업과 프로세스를 처리할 수 있습니다. 이는 기업이 일반적인 엔터프라이즈 애플리케이션을 업그레이드할 필요 없이 클라우드로 이동시키고, 계속해서 발전하는 GenAI 모듈을 통해 필요에 맞게 조정할 수 있음을 의미합니다.

    앞으로 해야 할 것(What to do next) 3가지

      1. 모든 사람을 변혁의 주도자로 만드세요. (Make everyone a transformation lead)

   지식 노동이 수행되는 곳이라면 어디에서나 GenAI가 그것을 변혁할 수 있습니다.

      2. 아웃소싱과 오프쇼어링을 줄이세요. (Outsource and offshore less)

   GenAI 주도의 기능적 변혁의 일환으로, 주요 비즈니스 프로세스를 내부로 다시 가져오는 것을 고려하세요.

      3. 모든 면을 고려하세요. (Cover all the bases)

   AI 투자를 늘리기 위해서는 기술, 비용, 결과뿐만 아니라 지속 가능성, 업종 특정 규제, 경쟁 등을 고려해야 합니다​​.

  전망6. GenAI가 새로운 제품 및 서비스 클래스를 탄생시킵니다.

    GenAI will give rise to new classes of products and services

   기업이 새로운 제안과 수익 흐름을 개발하는 방식은 GenAI 덕분에 극적으로 변화하고 있습니다. 새로운 프로세스 구축, 새로운 제품 및 서비스 개발, 고객 참여를 위한 새로운 환경 창출 등이 모두 GenAI로 인해 ""no code"" 활동이 되고 있습니다. 이를 통해 분야 전문가와 창의적 인재들이 데이터와 직접 작업할 수 있게 되며, 강력한 거버넌스와 감독이 제공되면 더욱 쉽고 이해하기 쉬운 방식으로 제시될 것입니다.

   클라우드 기반 엔터프라이즈 애플리케이션은 이미 GenAI 기능을 통합하고 있지만, 이는 시작에 불과합니다. 곧 엔터프라이즈 애플리케이션은 GenAI를 부가 기능이 아닌 핵심으로 채택할 것입니다. 이러한 AI 기반 애플리케이션은 이전보다 더 빠르고, 더 민첩하며, 더 맞춤화될 것입니다.

    앞으로 해야 할 것(What to do next) 3가지

      1. 적응하지 말고 대체하세요. (Don’t adapt, replace)

   AI의 잠재력을 실현하여 새로운 제품과 서비스를 창출하기 위해서는 기존 워크플로우와 기술 도구에 통합하는 것이 아니라 새로운 것을 창조하세요.

      2. 기술 기반을 업그레이드하세요. (Upgrade your tech foundations)

   AI를 모든 곳에서 사용하기 위해서는 기술 아키텍처와 기업 데이터 모델이 변경되어야 합니다.

      3. 계속 지켜보세요. (Keep watch)

   AI가 점점 더 많은 일상적인 운영, 다른 기술 애플리케이션 및 새로운 제품 및 서비스의 일부가 되어감에 따라, 감독과 거버넌스가 그 어느 때보다 중요해질 것입니다​​.

  원문 보기

   https://www.pwc.com/us/en/tech-effect/ai-analytics/ai-predictions.html


   ⚠️광고: 파이토치 한국 사용자 모임이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일:incoming_envelope:로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=12636","Show GN: 다보, 고등학생이 공부하다가 불편해서 직접 만든 오답노트 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: 다보, 고등학생이 공부하다가 불편해서 직접 만든 오답노트 앱

   고등학생이 공부하다가 불편해서 직접 만든 오답노트 앱 ‘다보(다시보자 오답노트)’를 소개합니다!
   오답노트 작성 습관이 공부에 큰 도움을 주는 것은 잘 알려진 사실 인데요, 그래서 오답노트 작성에 도움을 주는 앱은 없을까 하다가 이 앱을 직접 제작하였습니다. 가장 크게 느껴진 불편한 점은 오답노트 작성 후 자주 보며 복습을 할 수 있어야 하는데, 노트를 항상 가지고 다니기 힘들다는 점과 나중에 틀렸던 문제를 다시 보고 싶을 때 다시 찾아보기 힘들다는 점입니다.
   그래서 고등학생인 필자는 AI 텍스트 인식과 검색 기능, 과목 분류 기능, 복습 알리미 등의 기능을 앱으로 구현하여 오답노트 학습의 효과를 높이고자 하였습니다.
   초보적인 앱이지만 열심히 제작해서 앱을 구글 플레이 스토어에 출시했습니다.

   다보(다시보자 오답노트) >> https://play.google.com/store/apps/…

   문의 이메일 : lbappstudio3@gmail.com
   언제 어디서든 오답노트를 확인하자!

   —— 앱소개 ——
   -AI 자동 인식
   문제를 찍으면 자동으로 문제 내용을 AI가 인식해줘서 하나하나 문제를 옮겨 쓸 필요 없이 간편합니다!
   -검색
   검색 기능으로 헷갈렸던 문제와 비슷한 문제를 바로 찾을 수 있습니다!
   -과목별로 정리
   오답노트를 과목별로 정리해주어 한눈에 보기 좋게 해 줍니다!
   -사진 편집
   앱에 사진 편집기 탑재로 간편하게 사진을 편집할 수 있습니다!

   본인이 필요해서 만들다니 대단하네요
"
"https://news.hada.io/topic?id=12620","고객에게 원하는 것을 묻는 방식은 효과가 없다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       고객에게 원하는 것을 묻는 방식은 효과가 없다

고객에게 원하는 것을 묻는 것이 왜 효과가 없는가

     * 모든 팀이 자신의 관점을 뒷받침하는 정보만 보는 확인 편향에 빠져 있음.
     * 각 팀의 관점은 틀리지 않으나, 고객이 제품을 '고용'하는 진짜 목적을 반영하지 못함.

Intuit 사례: 고객의 요구에 응답하는 문제점

     * Intuit 개발팀은 고객이 원하는 새 기능에 대해 광범위한 설문조사를 실시함.
     * 고객의 피드백에 따라 기능을 추가했으나, 고객이 제품을 고용하는 진짜 '일'을 이해하지 못해 올바른 기능을 선택하는 데 실패함.

밀크셰이크 판매 증가 사례

     * 패스트푸드 체인이 밀크셰이크 판매 증가 방법을 연구함.
     * 고객의 피드백에 따라 여러 시도를 했으나 판매에 변화가 없었음.
     * 밀크셰이크를 '고용'하는 일에 대한 새로운 관점으로 접근하여 아침 시간대에 밀크셰이크를 구매하는 고객의 진짜 필요를 파악함
          + 오전 9시 전에 온 손님들이 밀크세이크를 많이 사며, 딱 그것만 사감
          + 그들에게 왜 밀크쉐이크를 '고용' 햇는지 물어봤음
          + 장거리 운전을 할때 바나나는 금방 배고프고, 도넛은 쉽게 부서지고 끈적이며, 베이글은 건조하고 운전중에 크림치즈는 바를 수가 없음
          + 하지만 밀크쉐이크는 운전이 많은 오전의 배고픔을 해결하는데 최적이었음

일을 찾는 방법

  1. 가까운 곳에서 일 찾기

     * 세계적인 혁신가들이 직관만으로 성공한 사례가 있음.
     * 예를 들어, 칸 아카데미는 살 칸이 사촌의 수학 학습을 돕고자 시작한 프로젝트임.

  2. 아무것도 경쟁하지 않음

     * 소비자가 만족할 만한 해결책을 찾지 못해 아무것도 하지 않는 경우.
     * 에어비앤비는 고객의 40%가 에어비앤비가 없었다면 여행을 하지 않았을 것이라고 함.

  3. 우회 방법과 보상 행동

     * 오픈테이블은 사람들이 식당 예약을 우회하는 방법에서 탄생함.
     * 불편한 예약 과정을 해결하여 성공함.

  4. 사람들이 하기 싫어하는 일 찾기

     * 부정적인 일은 종종 혁신 기회가 됨.
     * CVS MinuteClinics는 의료 서비스에 대한 부정적인 경험에서 출발함.

  5. 비정상적인 사용

     * 사람들이 일을 해결하기 위해 우회 방법이나 보상 행동을 사용하는 것을 관찰하면 혁신 기회가 될 수 있음.

GN⁺의 의견

     * 고객이 제품을 '고용'하는 진짜 '일'을 이해하는 것이 중요함.
     * 단순히 고객의 요구를 듣는 것이 아니라 그들의 진짜 필요와 문제를 파악하는 것이 혁신의 열쇠임.
     * 이 글은 혁신과 고객 중심 사고에 관심이 있는 사람들에게 흥미로운 인사이트를 제공함.

        Hacker News 의견

     * 제품 관리에서의 고전적인 실수들:
          + 사용자가 자신이 무엇을 원하는지 알고 있다고 가정하는 것은 드물게 맞는 경우이며, 실제로 필요한 것을 파악하는 것이 제품 관리자의 역할임.
          + 사용자가 원하는 것을 구축하고 있다고 가정하는 것은 사용자가 실제로 사용해보기 전까지 증명할 수 없으며, 많은 스타트업들이 아무도 원하지 않는 제품을 만드는 함정에 빠짐.
          + 사용자가 요청하는 것이 실제로 필요한 것인지 가정하는 것은 위험하며, 왜 그것을 요청하는지, 실제로 구축하면 사용할 것인지, 그리고 그것이 그들에게 얼마나 가치가 있는지를 항상 파악해야 함.
          + 영업팀이 고객이 원한다고 말하는 것이 실제로 그들이 원하거나 필요로 하는 것인지 가정하는 것은 까다로우며, 때때로 영업팀의 분석이 잘못될 수 있음.
          + 특히 새로운 제품의 경우, 사용자가 그것을 원하는지 파악하기 어려우며, 사용자가 새로운 것을 요청하지 않을 수 있으므로, 제품을 제시하고 설명해야 하며, 그래도 그들이 이해하지 못할 수 있음.
     * XY 문제로 가장한 기능 요청 사례들:
          + 이메일 지원을 많이 하는 한 사용자는 기능 요청이 XY 문제로 가장하는 경우를 많이 발견함.
          + 사용자가 요청하는 기능을 구현하기 전에 먼저 근본적인 문제를 이해하려고 노력하며, 대부분의 경우 사용자는 문제가 아닌 자신들의 해결책을 말함.
          + 기능을 우아하게 추가하고 다른 사람들에게 유용하게 문서화하기 위해서는 그 기능이 해결하려는 근본적인 문제를 이해해야 함.
          + 때때로 문제는 내부적인 것이며, 영업팀이 필요로 하지만 고객이 실제로는 사용하지 않을 기능이 추가됨.
     * 제품의 역사와 고객의 요구:
          + 한 제품의 역사는 고객(은행)이 자신의 비즈니스에 대해 어떻게 생각하는지, 제품이 그것을 어떻게 개선할 수 있는지에 대한 관심에서 시작됨.
          + 중간에, 10개 이상의 다른 고객을 만족시키려고 하면 결국 아무것도 남지 않을 것이라는 것을 깨달음.
          + 현재, 해당 제품은 특정 소프트웨어나 기술보다는 턴키 컨설팅 패키지에 가까움. 고객들은 이제 비즈니스 운영 방법에 대한 지침을 제품에서 찾음.
          + 이러한 유형의 고객은 무리 지어 움직이는 경향이 있으며, 일단 몇몇 고객을 특정 방향으로 움직이게 하면 나머지는 거의 노력 없이 따라오게 됨.
     * 기사 제목에 대한 의견과 고객의 요구 파악:
          + 기사는 좋지만 제목은 싫다는 의견을 제시함.
          + 고객에게 많은 것을 물어보되, 그들의 말을 그대로 받아들이지 말고 계속해서 질문하고 깊이 파고들어야 함.
          + 고객이 요청하는 기능을 구현하는 것은 파멸로 가는 확실한 길이며, 피드백을 듣는 방법을 배워야 함.
          + Christensen과 Deming의 추천에 동의하며, Sidney Dekker의 ""Field Guide to Human Error""를 추가로 추천함.
     * 고객의 요구와 제품 설계:
          + 대부분의 사람들은 자신이 무엇을 원하는지 모르기 때문에, 좋은 제품 디자이너가 큰 가치를 지님.
          + 제품 비전과 피드백을 듣는 방법을 구분해야 함.
          + 제품 비전은 경험, 직관, 기술적 지식, 기존 대안의 관찰, 기술적/경제적/사회적 변화를 예측하는 방법 등을 필요로 하는 공예임.
          + 피드백을 듣는 것은 사용자가 혼란스러워하는 것, 방해가 되는 것 등을 식별하는 것과 관련이 있으며, 이는 사용자 관찰/테스트/설문조사 등의 전통적인 방법을 유용하게 사용할 수 있음.
          + 이 두 가지는 매우 다른 기술 세트이며, 하나에서도 능숙해지기 어려운데 두 가지 모두에서 능숙해지기는 더욱 어려움.
          + Intuit를 사례 연구로 사용하는 기사에서는 고객이 원하는 것을 제공하려는 시도를 설명함.
     * 소수의 고객 의견에 귀 기울이는 것의 위험성:
          + 소수의 고객 의견에 귀를 기울이는 것이 함정일 수 있음.
          + 예를 들어, 해커뉴스나 다른 기술에 밝은 플랫폼을 읽었다면, 작은 화면의 iPhone에 대한 큰 수요가 있다고 생각할 수 있음.
          + 그러나 실제로 iPhone 미니의 판매 수치는 실망스러웠으며, 기술 하드웨어에 대해 온라인으로 많이 글을 쓰는 사람들은 iPhone 고객층 전체를 대표하지 않음.
     * 고객의 의견을 듣고 이해하는 중요성:
          + 모든 사람의 의견을 듣는 것이 도움이 될 수 있으며, 불만을 듣고 이해하는 것은 누군가를 더 나아지게 하는 가장 쉽고 저렴한 방법임.
          + 대부분의 경우 요청을 충족시킬 수 없지만, 사람들이 말하는 것을 듣고 그들의 문제를 명확히 하고 이해하려고 노력하는 것은 그들이 더 나아지게 함.
          + 사람들은 대체로 자신이 무엇을 원하는지 모르지만, 제품 관리자는 제품의 비전과 그것이 문제의 배후에 있는 문제들을 어떻게 해결하는지에 대해 모두를 설득해야 함.
     * 고객 피드백을 통한 제품 개선:
          + 스타트업/소규모 비즈니스 모드에서는 고객 피드백을 실제로 유용한 솔루션으로 전환하는 데 뛰어난 창업자가 있었음.
          + 인수 후 창업자가 회사를 떠나고, 이제는 기업의 UX 팀이 가장 무능한 사용자에게 어떻게 작동해야 하는지 묻는 비디오를 이메일로 받고 있음.
          + 테스트 그룹에 동의하는 것은 기본적인 UI 메타포를 이해하지 못하는 사람들을 자기 선별하는 것처럼 보임.
"
"https://news.hada.io/topic?id=12714","저작권 주장 후 'Steamboat Willie' 공공 도메인 비디오의 YouTube 수익 창출 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        저작권 주장 후 'Steamboat Willie' 공공 도메인 비디오의 YouTube 수익 창출 중단

디즈니, '스팀보트 윌리' 저작권 주장 철회

     * 2024년 1월 5일 금요일, 디즈니는 유튜버 브록 베이커의 ""스팀보트 윌리"" 비디오에 대한 저작권 주장을 철회함.
     * 브록 베이커는 자신의 유튜브 채널에 ""스팀보트 윌리 (브록의 더빙)""라는 새 비디오를 업로드했으며, 이 채널은 100만 명 이상의 구독자를 보유함.
     * 비디오에는 1928년 디즈니 애니메이션 단편 ""스팀보트 윌리"" 전체가 포함되어 있으며, 베이커는 8분 미만의 만화에 자신만의 코믹한 목소리와 사운드 효과를 제공함.

'스팀보트 윌리' 공공 도메인 진입

     * ""스팀보트 윌리""와 1928년 버전의 미키 마우스는 2024년 1월 1일에 공공 도메인에 진입함.
     * 이는 베이커와 같은 유튜버가 비디오를 만들고 배포하며 수익화하는 것이 완전히 합법적임을 의미함.
     * 듀크 대학의 젠킨스 교수는 공공 도메인 작품은 공공 재산으로 간주되며, 원하는 방식으로 영상을 복제하고 적용하는 것이 합법적이라고 말함.

유튜브의 콘텐츠 ID 시스템

     * 베이커의 비디오는 유튜브에 업로드된 후 자동화된 콘텐츠 ID 과정의 희생양이 될 가능성이 있음.
     * 유튜브의 콘텐츠 ID 기능에 따르면, 업로드된 비디오는 저작권 소유자가 유튜브에 제출한 오디오 및 비주얼 콘텐츠 데이터베이스와 비교됨.
     * 콘텐츠 ID가 일치하는 것을 찾으면 해당 비디오에 콘텐츠 ID 주장을 적용함.
     * 유튜브와 디즈니는 최근 공공 도메인에 진입한 작품을 데이터베이스에서 제거하기 위해 업데이트하지 않은 것으로 보임.

GN⁺의 의견

     * 이 사건은 저작권이 만료된 작품들을 사용할 때 발생할 수 있는 문제점을 보여줌. 특히 자동화된 콘텐츠 관리 시스템이 최신 법적 변화를 반영하지 못할 때의 문제점을 드러냄.
     * 공공 도메인으로 전환된 작품들을 창의적으로 활용하는 것은 문화적 다양성과 창작의 자유를 촉진하는 중요한 사례임.
     * 디즈니와 같은 대형 콘텐츠 소유자들이 저작권을 어떻게 관리하고, 기술적인 실수를 어떻게 수정하는지에 대한 투명성이 중요함. 이는 창작자들의 권리 보호와 혁신을 장려하는 데 기여할 수 있음.

        Hacker News 의견

     * 로렌스 레식의 ""자유 문화"" 발언 요약:
          + 월트 디즈니가 1928년에 미키 마우스의 전신인 '증기선 윌리'를 창조했지만, 이는 버스터 키튼의 '증기선 빌'에서 가져온 것이라고 디즈니 회사가 오늘날 사용하는 언어로는 ""훔친"" 것임.
          + '증기선 윌리'는 '증기선 빌'을 패러디하고, 그 위에 구축되었으며, 이를 통해 디즈니 제국을 건설했음.
          + 디즈니는 공공 도메인의 작품들을 취해 새롭고 훨씬 더 큰 창의성으로 전환시켰으며, 이는 지적 공유재산, 문화적 공유재산이라는 개념에서 가능했음.
     * 구글과 같은 기업의 도덕적 철학 관점 요약:
          + 구글과 같은 기업들이 직접적인 재정적 이익이 없는 상황에서 공동선을 적극적으로 지지하지 않을 때 윤리적 불균형이 우려됨.
          + 이러한 조직 내에서 일하는 사람들의 정당화는 무엇이며, 이익과 공공 책임 사이에서 더 나은 균형을 관리하는 다른 회사들이 있는데도 불구하고 그들이 선택하는 이유는 무엇인지에 대한 질문이 제기됨.
     * hbomberguy의 표절에 관한 비디오 요약:
          + 유튜브의 콘텐츠 ID 정책의 어리석은 부작용 중 하나는 클레임이 너무 흔하고 대부분 나쁘기 때문에 실제 심각한 침해도 무해하다고 가정하는 것임.
     * 유튜브 저작권 시스템에 대한 긍정적인 시각 요약:
          + 유튜브의 저작권 시스템에 대한 명확한 합격/불합격 단위 테스트로 볼 수 있음.
     * 콘텐츠 ID가 업데이트되지 않은 상황 요약:
          + 콘텐츠 ID가 아직 업데이트되지 않아 바로 적발된 경우에 대한 논의임.
     * 공공 도메인과 DVD 스캔에 관한 질문 요약:
          + 최근 DVD 릴리스를 스캔하는 것이 여전히 공공 도메인에 속하는지, 아니면 원본 필름 릴을 스캔해야 하는지에 대한 질문이 제기됨.
     * 유튜브 콘텐츠 ID 클레임에 대한 설명 요약:
          + 콘텐츠 ID 클레임은 과정의 시작일 뿐이며, 클레임이 제기되면 비디오 수익은 에스크로에 보관되어 분쟁에서 승리한 쪽에게 돌아감.
          + 클레임을 분쟁하는 과정이 있으며, 이 과정을 통해 클레임을 철회하거나 DMCA 테이크다운으로 '업그레이드'해야 함.
          + 테이크다운이 발행되고 업로더가 자신의 작업이 침해되지 않았다고 믿는 경우, 반대 통지를 할 수 있으며, 이는 클레임을 제기한 쪽이 업로더를 고소하거나 분쟁에서 패배해야 함을 의미함.
     * 유튜브의 자동화된 프로세스에 대한 비판 요약:
          + 유튜브가 자동화된 프로세스에 너무 의존하고, 공공 도메인으로 들어간 문화적 작품을 콘텐츠 인식 시스템에서 사전에 제거하지 않는 것에 대한 비판이 있음.
     * 저작권과 공공 도메인의 국가별 차이 요약:
          + 일부 국가에서는 아직 공공 도메인에 속하지 않는 경우가 있음을 지적함.
     * 미키 마우스 저작권 분쟁과 유튜버의 행동에 대한 의문 요약:
          + 미키 마우스에 대한 저작권 분쟁이 앞으로 일어날 일인지, 아니면 유튜버가 주목을 받기 위한 계획된 행동인지에 대한 의문 제기.
"
"https://news.hada.io/topic?id=12649","내가 2023년에 배운 52가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           내가 2023년에 배운 52가지

   2014년부터 매년 새로 배운 52가지를 정리하는 Tom Whitwell의 재미난 리스트
    1. 최근의 한 실험에서 ""한 무리의 길들여진 새들에게 태블릿과 스마트폰으로 서로에게 전화하는 법을 가르침"" 새들은 이를 즐기며 새로운 우정을 쌓았음
    2. 미국 와이오밍주의 한 카르멜 수도회 수도사들이 3D 디자인 소프트웨어와 석재 조각 로봇을 사용하여 고딕 양식의 수도원을 짓고 있음
    3. 켄트의 시어니스 조선소 벽에는 200년 넘게 15,000마리의 야생 전갈이 서식중
    4. 'payola' 기타는 4개의 픽업과 4개의 출력 단자가 있는 일렉트릭 기타로, 1950년대 세션 연주자들은 한 번의 솔로 연주를 하면서 네 번 돈을 받을 수 있었음
    5. 미국의 직업 만족도는 35년 만에 최고치를 기록. 2010년에는 자신의 직업에 만족한다고 답한 사람이 45% 미만이었지만, 2022년에는 62% 이상이 만족한다고 답했으며, 오늘날과 같은 높은 만족도를 찾으려면 80년대로 돌아가야 함. 워라밸과 퍼포먼스 리뷰 프로세스에서 큰 발전을 이룸
    6. 미국 국방부는 군인들이 기지에서 사용하는 슬롯머신을 운영하여 연간 1억 달러의 수익을 올림
    7. 현재 5명 중 1명은 장애를 가지고 있음. 100%의 사람들이 일생 동안 어떤 형태로든 장애를 겪게 됨
    8. 특별함의 소용돌이 는 어떤 물건을 사용하기 위해 완벽한 시기를 기다리다가 결국에는 전혀 사용하지 않게 되는 것을 말함. ""아주 평범하게 시작했던 물건이 반복적인 사용 부족을 통해 결국에는 보물처럼 여겨지게 됩니다.""
    9. 사이키델릭 암호화는 (보통 동영상에) 메시지를 숨겨서 LSD를 복용한 사람만 메시지를 수신할 수 있도록 하는 방법
   10. 이탈리아에서 Chat-GPT를 금지했을 때, 이탈리아 내 코더들의 생산성은 50%까지 떨어졌다가 회복되었음
   11. 캐나다의 한 연구진은 노숙자들에게 원하는 곳에 사용할 수 있는 7,500달러를 은행 계좌에 넣어주었음. 노숙자들은 이 돈을 음식, 옷, 집세 등에 사용. 많은 사람들이 안정된 주택으로 이사하여 어느 정도 생활에 안정을 찾을 수 있을 만큼 저축함
   12. ""Bertie Sheldrake는 사우스 런던의 피클 제조자로 이슬람으로 개종하여 멀리 떨어진 이슬람 공화국의 왕이 되었다가 런던으로 돌아와 다시 무명 생활에 안주했음""
   13. 현재 인간의 키는 대략 12,000년 전과 비슷. 4,000년 전만 해도 평균 키는 162cm였음
   14. 일부 부패한 멕시코 경찰은 교통정류장에서 뇌물을 더 편리하게 징수하기 위해 카드 단말기를 사용하고 있음
   15. 정확한 출생 기록이 도입된 후 약 100년이 지나면 한 지역의 100세 이상 인구가 급격히 감소하는 경향이 있음
   16. 19세기에 샴페인은 현지인의 입맛에 따라 단맛을 냈음. 러시아인들은 300그램의 설탕을 첨가했고, 영국인들은 50그램만 첨가. 1842년 Perrier-Jouët이 무가당 샴페인을 출시. 이 샴페인은 실패했고 사람들은 이 샴페인을 '브뤼(‘Brut’)'라고 불렀지만 오늘날 모든 샴페인의 맛이 바로 이 맛.
   17. 중국의 패션 모델들은 AI와 경쟁하기 위해 가격을 낮추고 있음. ""AI를 사용하는 디자이너가 800위안을 받으면 저는 600위안을 받겠습니다. 그들이 600위안을 책정하면 저는 500위안으로 내려가겠습니다. 다른 방법이 없어요. 끝까지 싸울 겁니다.""
   18. '비태도(nonattitude)'는 여론조사의 한 질문에 대한 응답을 위해서 발명된 약한 신념임
   19. 시카고에서 발생하는 살인 사건의 4분의 3은 지나친 언쟁과 다툼으로 인해 발생
   20. Dorset의 한 탱크 박물관은 작년에 유튜브와 틱톡 채널을 포함한 온라인 활동으로 200만 파운드를 벌었음. 연간 2,000파운드의 구독료를 내면 모든 동영상에서 총괄 프로듀서 크레딧에 올라갈 수 있는 'Field Marshall(야전 사령관)' 자격을 얻게 됨
   21. 영국 정부는 최근 한 사람이 이론적으로 회사 데이터베이스를 지울 수 있는 ""; DROP TABLE ""COMPANIES""; - LTD""라는 회사를 등록한 후 컴퓨터 코드가 포함된 회사명을 금지하도록 법을 변경함
   22. 구충 감염이 건초열의 치료법이 될 수 있음
   23. 지난 8월, 두 명의 중국 인플루언서인 시우카이와 이샤오칭청이 '라이브 스트리밍 배틀'을 열어 팁 경쟁을 벌임. 3시간 동안 진행된 이 방송에는 2천만 명의 시청자가 참여. 한 60세 여성 팬은 쉬카이에게 자신의 연금 전액인 52만 위안(5만 8,000파운드, 9500만원)을 줬다고 주장. 안타깝게도 그의 계좌는 세무 조사로 인해 현재 폐쇄됨
   24. 연구원들이 소비자용 안테나를 사용하여 와이파이 신호를 분석하여 한 방에 있는 모든 사람의 상세한 라이브 3D 모델을 제작
   25. 미국 운전자의 상위 10%가 하위 60%보다 휘발유를 더 많이 사용함
   26. 새로운 연구에 따르면 위약(placebo, 플라시보)은 죄책감을 줄이는 데는 효과적이지만 수치심에는 덜 효과적이라고 함
   27. 역사적으로 쌀 농사를 짓는 지역의 사람들은 밀 농사를 짓는 지역의 사람들보다 덜 행복하고 사회적으로 자신을 더 많이 비교함
   28. 프랑스 샴페인은 너무 쌈
   29. 가디언 센터는 개인 소유의 재난 대비 훈련 캠퍼스로, 1.7km의 4차선 고속도로와 두 개의 도시 블록으로 구성된 ""동적 붕괴 구조물""이 포함되어 있음
   30. 가짜 배꼽은 일시적인 문신 스타일의 스티커. 배꼽 몇 인치 위에 붙이면 다리가 더 길어 보이는 착각을 불러일으킴. 한 중국 리뷰어는 ""2023년 가장 성공적인 발명품""이라고
   31. 팬데믹 기간 동안 ""사회 붕괴와 세탁 서비스 제한에 대한 두려움""에 힘입어 빨래판 판매량이 57% 증가했음. 하지만 타악기로 판매된게 40%임
   32. 2022년 미국에서 50만 부 이상 판매된 책은 28종에 불과. 그 중 8권이 로맨스 소설가 콜린 후버의 작품
   33. 미국의 일반 냉장고 한대는 나이지리아의 1명이 년간 소비하는 전력보다 3~5배 더 많은 전기를 사용
   34. 시카고대학교 화상센터에 화상으로 입원한 어린이 중 31%가 라면으로 인해 화상을 입었음
   35. 스코틀랜드의 산림 면적이 거의 1,000년 전으로 돌아간 반면, 영국은 1350년에 마지막으로 보였던 수준으로 증가
   36. 수천 년 동안 스위스 북부와 중부 인구는 목이 크게 붓고 선천성 이상이 생기는 등 신비한 건강 문제를 겪었음. 1914년, 의사이자 시인인 하인리히 훈지커는 요오드(아이오딘) 결핍이 문제라는 사실을 깨달았음. 광대한 빙상이 25,000년 전에 표토와 암석, 천연 요오드를 긁어내 버린 것. 소량의 요오드를 식탁용 소금에 첨가하자 신비한 증상이 사라졌음
   37. Locate Rodeo 는 전기, 수도, 가스 등 공공시설에서 일하는 사람들이 모여 지하 위험요소를 경쟁적으로 찾아내는 대회. 참가자들은 12분 안에 찾기 어려운 인프라를 찾아내야 함
   38. 방콕과 싱가포르의 길거리 음식 노점 두 곳이 미슐랭 스타를 받았음. 세 번째 노점인 싱가포르의 국수 노점은 체인점으로 확장한 후 2021년에 별을 잃었음
   39. 석기 시대 사람들과 현대의 애호가 모두에게 부싯돌 도구를 만드는 것은 놀랍도록 위험한 일
   40. 어렸을 때 바이킹 배를 타고 있는 자신의 포토샵 이미지를 보여준 사람의 40%가 이 (가상의) 사건을 기억한다고 주장. 이는 2002년 가상의 풍선을 타는 것과 관련된 유사한 실험을 재현한 것
   41. 2004년에는 1기가와트의 태양광을 설치하는 데 1년이 걸렸음. 2023년에는 매일 1기가와트의 태양광을 설치할 수 있음
   42. 우크라이나 수비대원들이 손상된 비행장의 실물 크기 1:1 항공사진을 출력하고 있음. 비행장 복구가 완료되면, 그들은 손상되어 다시 공격할 가치가 없는 것처럼 보이도록 비행장 위에 사진을 걸어 놓음
   43. 2,529명에게 45달러 상당의 지역 신문 온라인 무료 구독권을 제공. 그중 44명만 구독함.
   44. 창문은 미술품 상인의 적이다.
   45. 가봉의 오클로에서는 지하에 매장된 천연 우라늄이 임계점에 도달하여 천연 원자로처럼 열을 발생시킴. 다행히도 이 일은 15억 년 전에 일어났음
   46. 싱가포르의 과학자들이 스마트 콘택트렌즈용으로 설계된, 사람의 눈물 속 염분으로 구동되는 작고 유연한 배터리를 개발
   47. 1986년부터 네팔의 시간대가 GMT보다 5시간 45분 앞당겨졌음
   48. Ligniloc은 네일건에서 발사할 수 있는 압축된 나무 못
   49. 1909년, 조지 코브는 뉴욕 최대의 태양열 발전 및 배터리 혁신가였는데, 그는 납치되었고, 그의 사업은 미스터리하게도 실패했으며, 역사에서 거의 지워졌음.
   50. 1992년 로스앤젤레스에서는 45분마다 은행 강도가 발생했음
   51. 자전거를 운전하는 것은 생각보다 훨씬 더 복잡함
   52. 라자스탄주의 영아 사망률은 2016년과 2021년 사이에 30% 감소하여 매년 10만 명 이상의 아기가 첫 생일을 맞이하고 있음. 모유 수유를 장려하고 산전 클리닉 4곳에 다니는 여성에게 2000루피(20파운드)를 현금으로 지급한 것이 원인으로 꼽힘

     어렸을 때 바이킹 배를 타고 있는 자신의 포토샵 이미지를 보여준 사람의 40%가 이 (가상의) 사건을 기억한다고 주장. 이는 2002년 가상의 풍선을 타는 것과 관련된 유사한 실험을 재현한 것

   놀랍네요. 아기가 있는 분들은 잠재의식속에 뭔가 주입하고 싶은 이미지로 시험해보세요.... 무섭지만.

   영국 정부는 최근 한 사람이 이론적으로 회사 데이터베이스를 지울 수 있는 ""; DROP TABLE ""COMPANIES""; - LTD""라는 회사를 등록한 후 컴퓨터 코드가 포함된 회사명을 금지하도록 법을 변경함
   ㅋㅋㅋㅋㅋ재미있네요!

   사이키델릭 암호화가 뭔가 했는데 2배속으로 보면 글자가 보이는 영상들이네요

   벌써 1년이 지났구나 하는 생각부터 들었습니다.

   내가 2022년에 배운 52가지
   내가 2021년에 배운 52가지
   내가 2020년에 배운 52가지
"
"https://news.hada.io/topic?id=12711","보잉, MAX 7의 안전 규정 면제를 FAA에 요청하여 비행 시작 추진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                보잉, MAX 7의 안전 규정 면제를 FAA에 요청하여 비행 시작 추진

        Hacker News 의견

     *

     FAA가 임시 해결책으로 승인한 조종사 절차는, 결빙 상태가 사라질 때 시스템을 꺼서 엔진 내셀의 과열을 방지하라는 것인데, 이는 심각한 잠재적 위험을 고려할 때 부적절하다고 한다.
          + FAA가 승인한 임시 조치가 충분하지 않다는 우려가 있음. 조종사들이 결빙 상태가 해소된 후 5분 이내에 엔진 방상 시스템을 끄는 것을 잊을 가능성이 제로는 아니라는 지적.
     * I have to disagree with all of the comments in this thread saying this is “insane”.
          + 한 사용자는 다른 댓글들이 '미친 짓'이라고 평가하는 것에 동의하지 않음. FAA가 MAX 8과 9 기종에 대해 승인한 문제 해결책이 MAX 7에도 적용되어야 한다고 주장.
     * ""McDonald-Douglas bought Boeing with Boeing's money.""
          + 한번 위대했던 엔지니어링 회사가 이제는 숫자에 집착하고 구석을 자르는 문화로 전락했다는 비판이 있음.
     * I hope one day engineering students will study the MAX 7 and learn from the Boeing culture...
          + 엔지니어링 학생들이 언젠가 MAX 7을 연구하고, 보잉의 문화로부터 배울 것을 희망하는 의견. 보잉이 에어버스의 경쟁 압박으로 새로운 설계 대신 결함이 있는 개조 비행기를 서두르게 출시한 것에 대한 비판.
     * What's not clear from the article is how likely this failure mode actually is to occur...
          + 기사에서는 조종사가 안티-아이스를 비활성화하는 것을 잊었을 때 실제로 얼마나 자주 이러한 실패 모드가 발생하는지 명확하지 않음. 실제 위험성에 대한 정량적인 정보 없이는 논의가 의미가 없다는 지적.
     * This idea is so stupid that I don't really know how I can follow the HN guidelines...
          + 한 사용자는 보잉의 아이디어를 '어리석다'고 평가하면서, 보잉에게 무료 조언을 제공하고 싶다는 반응.
     *

     to break and fall off.
          + 센터 콜린스의 발언을 인용하며, 어떤 비행기는 전면이 전혀 떨어지지 않도록 만들어진다는 점을 지적.
     * I do think it's important to recognize they are working on a fix for the issue...
          + 기사에서 언급된 문제에 대한 해결책을 찾고 있다는 점을 인정하는 것이 중요하다는 의견. 그러나 보잉의 회사 문화에 대한 비판적인 시각을 유지.
     * Recently my wife has been checking every flight we taking to ensure that its not Boeing.
          + 한 사용자의 아내가 비행기가 보잉이 아닌지 확인하는 것에 대해 처음에는 과잉 반응이라고 생각했지만, 보잉의 상황을 보고 나서 그녀의 세심함에 감사함을 표현.
     * It's quite funny how we still teach THERAC-25 to students...
          + THERAC-25 사례를 학생들에게 가르치고 있지만, 보잉이 안전에 영향을 미치는 나쁜 엔지니어링/경영 관행에 대해 더 적합한 현대적인 사례가 될 수 있다는 의견.
"
"https://news.hada.io/topic?id=12739","DNS Toys (2022) 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           DNS Toys (2022) 출시

유용한 DNS 서비스

     * dns.toys는 DNS 프로토콜을 창의적으로 활용하여 커맨드 라인을 통해 쉽게 접근할 수 있는 다양한 유틸리티와 서비스를 제공하는 DNS 서버임.
     * 서비스 이용을 위해 아래 커맨드를 복사하여 실행할 수 있음.

세계 시간

     * 도시 이름을 공백 없이 입력하고 .time을 붙여 시간을 확인할 수 있음.
     * 두 글자 국가 코드를 슬래시로 구분하여 선택적으로 추가할 수 있음.

시간대 변환

     * YYYY-MM-DDTHH:MM-$fromCity-$toCity 형식으로 입력하여 시간대를 변환할 수 있음.
     * 두 글자 국가 코드를 슬래시로 구분하여 선택적으로 추가할 수 있음.

날씨 정보

     * 도시 이름을 공백 없이 입력하고 .weather을 붙여 날씨 정보를 확인할 수 있음.
     * 두 글자 국가 코드를 선택적으로 추가할 수 있음.
     * 이 서비스는 yr.no에 의해 제공됨.

단위 변환

     * $Value$FromUnit-$ToUnit 형식으로 입력하여 단위를 변환할 수 있음.
     * 사용 가능한 70개 단위를 확인하기 위해서는 dig unit @dns.toys를 실행할 수 있음.

환율 변환 (forex)

     * $Value$FromCurrency-$ToCurrency 형식으로 입력하여 환율을 변환할 수 있음.
     * 일일 환율은 exchangerate.host에서 제공됨.

IP 에코

     * dig -4 ip @dns.toys를 실행하여 IPv4 주소를 에코할 수 있음.
     * dig -6 ip @dns.toys를 실행하여 IPv6 주소를 에코할 수 있음.

숫자를 단어로 변환

     * 숫자를 영어 단어로 변환할 수 있음.

사용 가능한 CIDR 범위

     * CIDR 표기법을 해석하여 서브넷 내에서 사용 가능한 첫 번째 및 마지막 IP 주소를 찾을 수 있음.

숫자 진법 변환

     * 숫자를 한 진법에서 다른 진법으로 변환할 수 있음.
     * 지원되는 진법은 hex, dec, oct, bin임.

파이(Pi) 출력

     * 파이(Pi)의 숫자를 출력할 수 있음.

영어 사전

     * 영어 단어에 대한 사전 정의를 얻을 수 있음.
     * 이 서비스는 WordNet®에 의해 제공됨.

주사위 굴리기

     * 주사위를 굴려 결과를 얻을 수 있음.
     * 테이블탑 RPG 게임처럼 주사위의 수와 면의 수를 입력하여 사용할 수 있음.

동전 던지기

     * 동전을 던져 결과를 얻을 수 있음.

무작위 숫자 생성

     * 지정된 범위 내에서 무작위 숫자를 생성할 수 있음.

Epoch/Unix 타임스탬프 변환

     * Epoch/Unix 타임스탬프를 인간이 읽을 수 있는 날짜로 변환할 수 있음.

항공 거리 계산

     * 위도와 경도 쌍 사이의 항공 거리를 계산할 수 있음.

UUID 생성

     * N개의 UUID(v4)를 생성할 수 있음.

도움말

     * 사용 가능한 서비스 목록을 제공함.

단축 함수

     * Bash, Fish, Zsh 셸에 대한 단축 함수를 추가하여 dy 명령어로 서비스를 더 쉽게 사용할 수 있음.

왜 이 서비스를 사용하는가?

     * 터미널에서 많은 시간을 보내는 사람들에게 빠른 단위 변환, 날씨 확인 등을 검색 페이지를 열지 않고도 할 수 있는 유용함을 제공함.
     * 서비스나 데이터의 정확성, 시기적절함, 신뢰성, 적절성 또는 완전성에 대한 보증은 없으며, ""있는 그대로""와 ""사용 가능한 상태로"" 제공됨.

GN⁺의 의견

     * dns.toys는 터미널을 자주 사용하는 사용자들에게 다양한 유틸리티를 제공하여 일상적인 작업을 빠르고 편리하게 수행할 수 있게 하는 서비스임.
     * 특히 개발자나 시스템 관리자와 같이 명령줄 인터페이스를 자주 사용하는 사람들에게 매우 유용함.
     * 이 서비스는 사용자가 웹 브라우저를 열지 않고도 필요한 정보를 신속하게 얻을 수 있도록 하여 생산성을 향상시킬 수 있는 잠재력을 가지고 있음.

        Hacker News 의견

     * 한 사용자는 자신이 만든 동적 DNS 유틸리티를 위해 사용했던 깔끔한 트릭을 소개함. OpenDNS 리졸버를 사용하여 실제 IP 주소를 계산하는 방법을 공유하며, 이 방법이 중앙 HTTP 서비스를 사용하는 것보다 더 빠르고 안정적일 수 있다고 믿음. 또한, DNS가 원래 도메인 이름 이상의 데이터를 다루기 위해 의도되었다는 점을 언급하며, DNS를 통해 얻을 수 있는 유용성을 강조함.
          + Julia Evans의 팬이며, 그녀가 만든 DNS 관련 유용한 도구들을 언급함. 해당 도구들의 링크를 공유함.
          + DNS Toys와 관련된 이전 해커뉴스 게시물을 언급하며, 해당 게시물의 링크를 제공함.
          + DNS Toys 프로젝트의 창시자가 최근에 한 강연에 대한 링크를 공유함. 프로젝트가 어떻게 시작되었는지에 대한 재미있는 이야기가 담겨 있음.
          + 현재 자주 사용하는 IP 주소 및 DNS 확인 도구의 링크를 공유함.
          + DNS를 통해 원격으로 스크립트를 실행할 수 있다는 개념은 흥미롭지만, 실제로 모든 기능을 제공할 필요는 없다고 생각함.
          + 영국의 비즈니스 목록을 위한 DNS 조회 서비스를 언급하며, DNS를 비전통적인 데이터 제공에 사용하는 아이디어를 공유함. 서비스 유지 여부에 대한 의문을 제기함.
          + DNS Toys를 사용하여 지구상의 두 지점 간 거리를 계산하는 예시를 들며, 지구가 타원형이 아닌 가상의 모양이라고 가정하는 것이 문제가 되지 않는다고 농담함.
          + 한 사용자가 DNS를 통해 스크립트를 실행하는 개념을 이해하지 못하고 있으며, 이에 대한 간단한 설명을 요청함.
          + DNS Toys의 기능들이 특별한 네임 서버를 사용하지 않고도 해결될 수 있는 서브도메인에서도 사용 가능해야 한다는 데 놀라움을 표현함.
"
"https://news.hada.io/topic?id=12702","HN에 묻다: 출소 후 IT 분야에서 성공적으로 일자리를 찾은 전과자들이 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             HN에 묻다: 출소 후 IT 분야에서 성공적으로 일자리를 찾은 전과자들이 있나요?

기술/스타트업 업계로의 복귀 경험

     * 기술/스타트업 업계로 복귀를 시도하는 전과자의 경험 공유 요청.
     * 2022년 11월 폭행 혐의로 풀려난 후 일자리를 찾고 있음.
     * 정보 보안 분야에서 SecOps 엔지니어로 일했으며, 마지막 근무지는 Tinder였음.
     * 최근의 직장 경험 부족과 전과 기록으로 인해 구직 과정에서 여러 어려움을 겪고 있음.

재취업을 위한 도움 요청

     * 기술 분야로 돌아가 가치를 더하는 일을 하고 싶은 열망.
     * 전과 기록이 있는 유능한 후보자에게 기회를 줄 수 있는 회사에 대한 정보 요청.

주의사항

     * 범죄 내용은 컴퓨터/금융/사기/마약 판매/신체 폭력과 관련 없음.
     * 본인의 LinkedIn 프로필 링크 제공.


    GN⁺의 의견

     * 이 글은 전과 기록이 있는 개인이 기술 분야로의 재취업을 시도하는 과정에서 겪는 어려움을 공유하고 있음. 이는 사회적 통합과 재활의 중요성을 강조하는 사례로 볼 수 있음.
     * 전과자에 대한 고용 기회의 확대는 기업의 다양성과 포용성을 높이는 데 기여할 수 있으며, 이는 사회 전반에 긍정적인 영향을 미칠 수 있음.
     * 이 글은 전과 기록이 있는 사람들이 직면하는 직업적 장벽을 이해하는 데 도움이 되며, 이들을 지원하기 위한 구체적인 조치를 고민하는 계기를 제공할 수 있음.

        Hacker News 의견

     * 한 사용자는 20년 넘게 경력을 쌓으며 배경 조사를 통과했고, 처음에는 식당 일과 프리랜서 웹 개발로 시작해 점차 컨설팅 일을 얻었다고 함. 큰 회사에서도 문제 없이 일할 수 있었으며, 정직함보다는 생계를 위해 때로는 정보를 공개하지 않는 것이 낫다고 조언함.
          +

               o 20년 이상의 경력을 가진 한 사용자는 처음에는 식당 일과 프리랜서로 시작해 점차 컨설팅 일을 얻고, 결국 큰 회사에서도 배경 조사에 문제없이 일할 수 있었음을 공유함.

          +

               o 이 사용자는 생계를 위해 때때로 정직함을 포기하는 것이 낫다고 조언하며, 자신의 경로를 개척하는 것에 편안함을 느껴야 한다고 말함.

     * Y Combinator 스타트업인 70MillionJobs는 범죄 기록이 있는 사람들을 위한 일자리 게시판을 제공했었으나, 현재는 운영되지 않음. 과거에 이 스타트업에 대한 토론이 있었고, 그곳에서 유용한 정보를 찾을 수 있을지도 모른다고 언급함.
          +

               o YC 스타트업인 70MillionJobs는 범죄 기록이 있는 사람들을 위한 일자리 게시판이었으나 현재는 운영되지 않음. 과거 토론에서 유용한 정보를 찾을 수 있을지도 모른다고 언급함.

     * 한 개발자는 19살에 심각한 범죄를 저질렀으나, 출소 후 개발자로서 경력을 쌓아 현재는 회사의 주요 개발자로 잘 나가고 있음. 대부분의 클라이언트는 그의 과거를 모르며, 소수가 알게 되었어도 문제가 되지 않았다고 함.
          +

               o 한 개발자는 과거의 범죄에도 불구하고 출소 후 개발자로서 성공적인 경력을 쌓아, 현재는 회사에서 중요한 역할을 하고 있음을 공유함.

     * 70 Million Jobs에서 일했던 한 사람은 보안 운영 분야의 경험이 수요가 있다고 언급하며, 현장에 있지 않아도 되는 일을 찾고, 자신의 LLC를 만들어 독립적으로 일하는 것을 추천함.
          +

               o 보안 운영 분야 경험이 있는 한 사용자에게 원격 작업이나 자신의 LLC를 만들어 독립적으로 일하는 것을 추천함.

     * 한 사용자는 심각한 실수로 고위 관리자에게 위협적인 발언을 했으나, 다행히 더 큰 문제는 일어나지 않았다고 함.
          +

               o 한 사용자는 심각한 실수로 고위 관리자에게 위협적인 발언을 했으나, 더 큰 문제 없이 상황을 넘길 수 있었다고 공유함.

     * 2010년에 음주운전으로 중범죄 기록을 가진 한 사용자는 작은 회사들에서 일하며 배경 조사를 피해왔으며, 현재는 연봉 170k를 받으며 주요 선임 엔지니어로 일하고 있음.
          +

               o 음주운전으로 중범죄 기록이 있는 한 사용자는 배경 조사를 피해 작은 회사들에서 일하며 현재는 성공적인 경력을 쌓고 있음을 공유함.

     * 한 IT 계약자는 과거에 범죄 기록이 있었으나, 전문적인 네트워크를 유지하고 도움을 주며 결국 이전 경력으로 돌아갈 수 있었다고 함.
          +

               o 과거에 범죄 기록이 있었던 한 IT 계약자는 전문적인 네트워크를 통해 다시 경력을 이어갈 수 있었다고 공유함.

     * 한 사용자는 컴퓨터 관련 사기로 연방 중범죄 기록을 가지고 있으며, 몇몇 회사에서 일했고, 심지어 금융 거래와 관련된 코드 작성에도 참여했다고 함. 소규모 회사에서는 배경 조사 없이 일할 수 있었으며, 독립 모바일 개발자로도 활동했다고 함.
          +

               o 컴퓨터 관련 사기로 중범죄 기록이 있는 한 사용자는 여러 회사에서 일하며, 소규모 회사에서는 배경 조사 없이 일할 수 있었다고 공유함.

     * 영국에서 컴퓨터 관련 중범죄 기록을 가진 한 사용자는 영국에서는 일자리를 찾기 어려워 해외로 이주하여 새로운 정체성을 만들고 성공적인 경력을 쌓고 있다고 함.
          +

               o 영국에서 중범죄 기록을 가진 한 사용자는 영국에서 일자리를 찾기 어려워 해외로 이주하여 새로운 정체성으로 성공적인 경력을 쌓고 있음을 공유함.

     * 한 비영리 단체에서 전과자들과 함께 일하는 사용자는 전과자들을 위한 일자리를 제공하는 리소스를 공유함.
          +

               o 전과자들을 위한 일자리 리소스를 공유하는 한 사용자는 이 정보가 다른 이들에게 도움이 되기를 바람.
"
"https://news.hada.io/topic?id=12654","딥러닝에 대한 수학적 소개: 방법론, 구현 및 이론","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      딥러닝에 대한 수학적 소개: 방법론, 구현 및 이론

딥러닝에 대한 수학적 소개: 방법, 구현 및 이론

     * 이 책은 딥러닝 알고리즘에 대한 소개를 목적으로 함.
     * 딥러닝 알고리즘의 핵심 구성 요소를 수학적으로 상세히 검토하며, 다양한 인공 신경망(ANN) 구조와 최적화 알고리즘을 포함함.
     * ANN의 근사 능력, 최적화 이론, 일반화 오류 등 딥러닝 알고리즘의 여러 이론적 측면을 다룸.

딥러닝을 통한 PDE 근사 방법 검토

     * 책의 마지막 부분에서는 PDE를 근사하기 위한 딥러닝 방법을 검토함.
     * 물리 정보를 내포한 신경망(PINNs)과 딥 갤러킨 방법 등이 포함됨.

책의 대상 독자

     * 딥러닝에 대한 배경 지식이 전혀 없는 학생과 과학자를 위해 쓰여짐.
     * 실무자들이 딥러닝에서 고려하는 객체와 방법에 대한 수학적 이해를 강화할 수 있도록 도움을 줌.

추가 정보

     * 책의 페이지 수는 601페이지이며, 36개의 그림과 45개의 소스 코드가 포함됨.
     * 주제 분야는 기계 학습, 인공 지능, 수치 분석, 확률론 등이며, MSC 분류 코드는 68T07임.

GN⁺의 의견

     * 이 책은 딥러닝을 처음 접하는 이들에게 수학적 기반을 제공함으로써, 복잡한 알고리즘과 이론을 체계적으로 이해하는 데 도움을 줄 것임.
     * 다양한 ANN 구조와 최적화 방법에 대한 상세한 설명은 실무자들이 자신의 프로젝트에 적용할 때 필요한 깊이 있는 지식을 제공함.
     * PDE 근사 방법에 대한 내용은 특히 공학이나 물리학 분야에서 실제 문제를 해결하는 데 유용한 접근법을 소개함으로써, 딥러닝의 실용적인 측면을 강조함.
"
"https://news.hada.io/topic?id=12653","Show GN: Openroleplay.ai - 오픈소스 AI 캐릭터 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: Openroleplay.ai - 오픈소스 AI 캐릭터 플랫폼

  특징

     * 모델중립: OpenAI, Claude, Perplexity, Mistral AI를 비롯해 다양한 AI 모델 중 캐릭터에 적합한 모델을 선택해 캐릭터를 커스터마이즈할 수 있습니다.
     * 개인화: 캐릭터, 페르소나, UI를 개성 있게 만들어 특별한 롤플레잉 경험을 만들어보세요.
     * 롤플레이 중심: 롤플레잉과 스토리텔링을 염두에 두고 설계되어 몰입감 있고 매력적인 경험을 보장합니다.
     * 구독할 필요 없이 여러 AI 모델 사용 가능
     * AGPLv3 라이센스

  지원 모델

     * OpenAI gpt-3.5-turbo-1106 (16k context window, proivded by OpenAI)
     * Mistral mistral-7b-instruct (4k context window, hosted by Perplexity AI)
     * Mistral mixtral-8x7b-instruct (4k context window, hosted by Perplexity AI)
     * Perplexity pplx-7b-online (4k context window, provided by Perplexity AI)
     * Perplexity pplx-7b-chat (8k context window, provided by Perplexity AI)
     * Alibaba qwen-14b-chat (English and Chinese, provided by Fireworks AI)
     * OpenAI gpt-4-1106-preview (32k context window, proivded by OpenAI)
     * Perplexity pplx-70b-chat (4k context window, provided by Perplexity AI)
     * Perplexity pplx-70b-online (4k context window, provided by Perplexity AI)
     * OpenAI Dall-E 3
     * Stable Diffusion XL
     * ...
"
"https://news.hada.io/topic?id=12635","야놀자 기업분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                야놀자 기업분석

   동사는 21년 소프트뱅크로부터 2조의 펀딩을 받으며 10조의 밸류를 인정받았고, 23년에는 연 매출 7500억 돌파를 앞두고 있습니다. 쿠팡에 이어 나스닥 상장을 목표로 하고 있는 야놀자는 진정으로 여행업을 혁신할 수 있을까요?

   모두 새해 복 많이 받으세요 :D
    1. thesis
       ○ 내국인의 여행 경험 비율은 90% 이상, 국내외 관광에 지출한 돈만 57조 (22년)
       ○ 이와 함께 온라인 여행 플랫폼 성장: 그 중 1위의 자리는 야놀자의 것.
       ○ 21년 소프트뱅크로부터 10조 밸류에 2조 펀딩받으며 나스닥에 도전장 내밀고 있음
       ○ 그러나 고질적 영업익 저조, 심화되는 경쟁에 23년 3분기 희망퇴직 / 구조조정 진행
       Question: 동사는 이런 어려움을 극복하고, 데카콘 그 이상에 등극할 수 있을까?
    2. fouding story
       ○ 모텔 청소부에서 시작해 야놀자를 차린 이수진 대표의 창업기로부터 배울 수 있는 점
       ○ do things that don't scale: 발로 뛰며 업을 경험하고, 고객을 직접 영입하라 (모텔 알바만 3년, 사업 시작 후엔 룸서비스까지 뛰며 영업)
       ○ make something that people love: 고객 만족을 최우선시하라 (프런트 직원의 복장, 스낵바의 물품과 같이, 작은 디테일이 모텔의 성패를 가름)
       ○ network 기반 제품은 특정 버티컬부터 장악 후 확장해야 한다 (모텔업에서 atomic network 형성하고 이후 OTA로 확장)
       ○ 플랫폼 쉬프트를 활용하라 (컴퓨터 → 모바일)
       ○ 끈기와 열정: 잘 되기 전까지는 절대 끝난 게 아니다

   ※관광업 용어정리※
   ○ OTA (Online Travel Agency): 온라인 여행사. 숙소, 항공, 렌터카 등 여행 상품에 대한 예약 / 판매 대행 서비스를 제공
   ○ PMS (Property Management System): 숙박 시설 관리 시스템. 객실 등록, 예약 관리, 체크인 처리, 매출 데이터 계산 등의 다양한 업무 지원
   ○ CMS (Channel Management System): 판매 채널 관리 시스템. 숙소의 여러 유통 채널(대표적으로 OTA)을 한 번에 관리
   ○ (G)RMS ((Guest) Room Management System): 객실 관리 시스템. 객실 예약부터 체크아웃까지 객실의 정보를 실시간으로 공유 및 조정할 수 있게 지원
   ○ 인벤토리: 특정 OTA나 여행사에서 판권을 가지고 있는 여행 상품을 인벤토리라 칭한다.
    3. product
       [OTA]
       3.1 야놀자
       ○ 숙소, 항공권, 레저/티켓 등의 서비스를 제공하는 “글로벌 여가 플랫폼”
       ○ 상품 유통을 대가로 9.9%의 수수료 수취, 직접 상품을 구매해 판매하는 사입 구조로도 운영
       3.2 인터파크트리플
       ○ 20년 트리플 인수, 22년 인터파크 인수, 22년 6월에 양사 합병 후 사명변경
       ○ 인터파크는 쇼핑 도서 렌터카 음악 부문 매각, 현재는 투어와 티켓만 동사 소유
       ○ 트리플은 일정 관리와 동행과 경비 관리가 핵심인 해외여행 앱
       [호텔 운영 솔루션 (PMS, CMS, RMS 등을 통칭)]
       3.3 국내
       ○ 국내 1, 2위 산하, 가람정보기술 인수. 가람정보기술은 야놀자클라우드 Y-FLUX로 리브랜딩.
       ○ Y-FLUX는 무인 체크인, 모바일 객실키를 중심으로 한 자동화 중심의 소규모 숙소가 수요처
       ○ 산하정보기술의 WINGS는 국내 중형~특급호텔에 탑재되는 기능성 중심의 솔루션
       3.4 국외
       ○ 인도의 이지테크, 인키, 미국의 인소프트, 아프리카의 호텔온라인에 투자 및 인수
       => 총 4만개 호텔에 솔루션 제공, 점유율 기준으론 세계 5등 안팎의 성적
       [기타]
       3.5 브랜드호텔
       ○ 국내 400호점 돌파: 호텔 하운드, 에이치 에비뉴, 브라운도트, 넘버25, 호텔야자/얌
       ○ 호텔 운영 솔루션과 숙박 비품 공급 + 야놀자 제휴점 2년 의무화로 인벤토리 확장 효과
       3.6 디스트리뷰션
       ○ 23년 글로벌 여행 인벤토리 유통사 Go Global Travel 인수. 100만개 이상 상품 판권 소유
       ○ GGT 인수후 Q3부터 매출 반영이 되며, 매출 비중 3% -> 10%
       3.7 데이블
       ○ 21년 인수한 AI 에드테크 스타트업, 아시아 1위 맞춤형 광고 추천 B2B SaaS
       ○ 22년 매출 457억, 매월 5억 명이 50억 건의 컨텐츠 추천받으며 1억 회 이상 클릭
       ○ 야놀자와 협업해 여행 컨텐츠 / 광고 추천 솔루션 제작 중
    4. market
       4.1 OTA (b2b2c)
       ○ 소비자는 내국인 여행객. 국내여행에서 압도적 점유율 보임 (온라인 결제의 20%)
       ○ 해외여행 카테고리로 확장하기 위해 공격적 M&A 펼치고 있음 (트리플, 인터파크, GGT)
       ○ TAM 온라인 여행 시장 전체 610조, SOM 내국인 여행 지출 + 방한 외국인 지출 50조, SAM은 내국인 여행 지출인 40조
       4.2 hotel solutions (b2b)
       ○ 국내 중소형 숙소: Y-FLUX / 국내 중형~특급호텔: 산하 WINGS
       ○ 해외 중소형 숙소: 이지테크, 인키, 인소프트, 호텔온라인
       ○ TAM 세계 호텔 솔루션 시장 8.4조, SOM은 그중 아시아, 북미, 아프리카의 중소형 숙소, SAM은 국내, 인도, 아프리카, 미국의 중소형 숙소.
    5. business model
       ○ 매출의 80%에 달하는 OTA 사업이 동사의 본질
       ○ 실질적 클라우드 (호텔 운영 솔루션) 매출은 4% 이하로, 큰 성장세 없음
       ○ 비용구조는 지급수수료와 연구개발비를 효율화시키며 개선해야
    6. traction
       ○ 07년 설립, 11년 모바일 앱 론칭, 14년 예약기능 추가
       ○ 16년부터 M&A를 통해 카테고리 확장: 호텔나우(호텔), 레저큐(레저), 데일리호텔(특급호텔), GGT(해외인벤토리)
       ○ 인벤토리 추가해나가며 야놀자를 ""슈퍼앱""으로 키워나감
       ○ 이의 기반은 대량의 투자금. 대표적으로 싱가포르투자청 2000억, 소뱅 2조
    7. competition
       [OTA]
       ○ 사용률 1위, OTA 거래액 1위, 매출 1위, 영업익만 부진 (22년 거래액 4조, 영업익 61억)
       ○ 가격 비교 플랫폼인 네이버 여행은 견제해야 (사용률 19%로 2위)
       ○ 여기어때는 매출이 사입구조로 인해 높은 것뿐. 영업익이 높으나, 동사에 큰 비교우위 없음
       ○ 전통적 여행사 하나투어와는 MOU 체결해 야놀자로 패키지 유통 중 (휴전상태)
       [호텔 운영 솔루션]
       ○ 산하 WINGS의 경쟁자는 업계 1위인 오라클의 OPERA
       ○ 그 외 솔루션은 중저가 호텔 대상
       ○ 이런 솔루션은 데이터 소실 / 물리적 소요 / 호텔리어 학습 부담때문에 교체비용 매우 높음
       ○ 따라서 디지털 전환 이루어지지 않은 업체와 새로 오픈하는 업체에 대해 협상력 높여야
    8. valuation
       ○ 23(E), 밸류 10조 기준 PER 362배, PSR 13.3배로 아주 높음
       ○ Big 4 평균 밸류 83.2조, PER 19.9배, PSR 5.3배로 동사에 비해 안정적.
       ○ 여기어때도 PER 33.3배, PSR 3.8배의 수치.
       ○ 동사는 PER 25, PSR 5에 10조 밸류 받기 위해서 매출 2조, 당기순이익 4,000억 달성 필요

   ⚛︎ essense of business ⚛︎
   ○ OTA의 본질: 다양성 갖춘 인벤토리 확보
   ○ 단순 수량보다, 유저에게 좋은 경험 주는 상품 많아야
   ○ 인간 중심의 시장이기에, 인벤토리 확장이 어렵다
   ○ 다량의 인벤토리는 그 자체로 해자이며, 해당 지역의 1등 플레이어가 M&A로 시장을 장악한 경우가 다수이다
    9. key opportunities
       9.1 taking over overseas travel
       [versus 국내 OTA]
       ○ M&A를 통해 여타 국내 OTA에 비해 많은 해외여행 인벤토리 확보
       ○ 호텔 운영 솔루션에 대한 통제권 쥐고 있기에 동사 OTA를 유통 채널로 추천 가능
       ○ 가격경쟁력 기반으로 점유율 확대 가능
       [versus 국외 OTA]
       ○ 국내 항공권 판매 1위 인터파크항공 기반으로 락인 효과 구축
       ○ 국내 시장에만 집중하기에 CS, 리뷰, 그리고 광고를 통한 소비자 접점에 우위 가짐
       9.2 utilize data to provide value
       [online experience]
       ○ 온라인 경험의 차별화는 개인화에서 나옴.
       ○ 데이터 기반의 추천을 효과적으로 했을 때, frictionless한 결제와 락인 효과 이끌 수 있음
       ○ 동사 OTA 간 데이터를 공유하여 데이터의 양 증가
       ○ 인수한 AI 기업, 데이블을 통하여 추천의 퀄리티 향상
       ○ 모텔 예약을 위해 지속적으로 방문하는 유저에서 충분한 데이터 얻기 위한 컨텐츠 필요
       [offline experience]
       ○ 온라인 경험을 오프라인으로 옮겨야: 그 중에서도 숙박에 집중
       ○ 즉, 야놀자로 예약한 숙소와 타사 OTA로 예약한 숙소가 질적으로 다른 오프라인 경험 줘야
       ○ 이는 호텔 운영 솔루션 WINGS와 동사 OTA 간의 데이터 교류로 이룰 수 있을 것
       9.3 inbound travel
       ○ 인벤토리는 충분하기에, 소비자를 효과적으로 단기간에 모으는 것이 핵심
       ○ 이는 위에서 설명한 오프라인 경험을 혁신하는 것으로 가능할 것
       ○ 예로, 외국인 손님에게 한국 문화를 소개하는 야놀자 브랜디드 책자 제공
   10. key risks
       10.1 lacking hedgehog concept
       ○ IPO 앞두며 불명확한 모습: B2B SaaS 회사로 전환을 이야기, 테크 회사라 광고
       ○ 동사의 본질인 OTA, 그리고 숙박업에 집중하며 hedgehog concept 재정립해야
       10.2 restrictive + diminishing local market
       ○ 소비층인 국내 인구는 고령화되며, 절대적 숫자도 줄어들고 있음
       ○ 플랫폼 법이 재정된다면 숙박업이라는 맥락을 점유하는 동사에 좋지 않을 가능성 높음
   11. ending thoughts
       야놀자는 모텔 정보 사이트에서 시작하여, 국내 1위 OTA로 자리 잡으며 성공 신화를 썼다. 이제는 더 큰 꿈에 도전하며 나스닥에 상장을 준비하고 있다.
       ○ 내국인의 국내외 여행이라는 맥락을 온전히 점유한다면,
       ○ 방대한 B2B2C 및 B2B 데이터를 기반으로 온라인 예약부터 오프라인 관광까지 모든 소비자 접점에서 특별한 경험을 제공한다면,
       진정으로 숙박업을 혁신한, 최초의 트래블 테크 기업에 등극할 수 있을 것이다.
       고객에 대한 집착과 업에 대한 이해도를 기반으로 어려움을 멋지게 극복하기를, 야놀자를 응원한다.

   일목요연하게 잘 정리된 좋은 글 감사합니다.

   좋은 글 감사드립니다.

   재밌게 읽어주셔서 감사합니다 :)

   저는 개발자입니다. 예전에 Alphasense 기업분석에서 본 outline을, 지금까지도 무언가 분석할 때 쓰고 있습니다. 칭찬 받은 것들도 다 덕분이라고 생각합니다. 항상 좋은 글 써주셔서 감사합니다.

   칭찬 정말정말 감사합니다 :D 좋은 글 쓰기 위해서 더더더 노력해볼게요 ㅎㅎ

   이게 왜 요약글이지? 라고 생각했는데 원문으로 가보니 요약글이 맞군요?!! 좋은 글 감사 드립니다!

   감사합니다 ㅎㅎ 품이 많이 들기도 하고, 취미(?)로 하는거다보니, 1인 1분기 1포스트 방식으로 운영하고 있습니다
"
"https://news.hada.io/topic?id=12704","Go 언어: 우리가 올바르게 한 점과 잘못한 점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Go 언어: 우리가 올바르게 한 점과 잘못한 점

Go 언어의 오픈 소스 프로젝트 출시 14주년을 맞이하여

     * Go 언어의 공동 창시자 중 한 명이 2023년 11월 10일 시드니에서 열린 GopherConAU 컨퍼런스에서 마지막 강연을 진행함.
     * 강연에서는 Go 언어가 오픈 소스 프로젝트로 출시된 지 14년이 된 것을 기념하며, 그동안의 성공과 반성할 점들에 대해 논의함.
     * 강연자는 Go 팀이나 구글을 대표하는 것이 아니라 개인적인 견해를 밝히며, Go 언어의 성공에 기여한 커뮤니티에 감사를 표함.

Go 언어의 성공 요인과 개선점

     * Go 언어의 원래 목표는 새로운 프로그래밍 언어를 만드는 것이 아니라, 소프트웨어 작성 방식을 개선하는 것이었음.
     * Go 언어는 의존성 관리, 대규모 팀과의 협업, 유지 보수의 용이성, 효율적인 테스팅, 멀티코어 CPU 및 네트워킹의 효과적 사용 등 현대 서버 소프트웨어 구축의 복잡성을 해결하고자 함.
     * Go 언어는 단순히 프로그래밍 언어가 아니라, 생산 소프트웨어를 더 쉽고 생산적으로 구축하는 프로젝트임.

Go 언어의 마스코트, 고퍼

     * Go 언어의 마스코트인 고퍼는 Go 언어의 성공에 중요한 역할을 함.
     * 고퍼는 Go 프로그래머들의 상징이자 커뮤니티의 깃발로, 프로젝트의 성장에 필수적이었음.
     * 고퍼 디자인을 Creative Commons Attribution 라이선스로 공개한 것은 커뮤니티 정신을 촉진하는 데 도움이 되었지만, 저작권 문제로 인한 어려움도 있었음.

Go 언어의 기술적 성공 요인

     * 공식 명세서의 작성, 다중 구현체의 존재, 이식성, 호환성 보장, 풍부한 라이브러리, 도구 개발의 용이성, 자동 코드 포맷팅 도구인 gofmt 등이 Go 언어의 성공에 기여함.
     * gofmt는 프로그래밍 커뮤니티 전반에 영향을 미쳐, 대부분의 언어가 표준 포맷터를 갖게 되는 계기를 마련함.

동시성(Concurrency)과 인터페이스

     * Go 언어는 동시성을 언어의 주요 구성 요소로 삼아, 서버 소프트웨어 구조를 단순화하는 데 기여함.
     * 인터페이스는 Go 언어의 특징적인 아이디어로, 객체 지향 설계에 대한 Go의 대답이며, 표준 라이브러리와 의존성 관리 등에 중요한 역할을 함.

제네릭스(Generic)과 컴파일러

     * 인터페이스의 존재는 Go 언어에 제네릭스를 추가하는 데 오랜 시간이 걸린 원인 중 하나임.
     * 초기 Go 컴파일러가 C로 작성된 것은 프로그래밍 언어 커뮤니티에서 논란의 대상이었으나, Go 언어의 발전에는 적합한 선택이었음.

프로젝트 관리와 패키지 관리

     * Go 언어는 오픈 소스 프로젝트로서 개발 초기에는 비공개로 진행되었으나, 공개 전환 후 커뮤니티의 기여가 폭발적으로 증가함.
     * 패키지 관리 개발 과정은 원활하지 않았으며, 커뮤니티와의 협업 방식에 대한 이해가 부족했음.

문서화와 예제

     * 초기 Go 언어 문서화는 커뮤니티의 기대에 부응하지 못했으나, 실행 가능한 예제를 웹에서 제공하는 등 개선되었음.

GN⁺의 의견

     * Go 언어의 성공은 강력한 표준 라이브러리, 동시성 지원, 인터페이스 기반의 설계, 명확한 패키지 관리, 빠른 빌드 및 테스팅 도구, 일관된 코드 포맷팅, 가독성 중시, 호환성 보장 등의 요소들에 기인함.
     * Go 언어는 프로그래밍 언어로서의 기능뿐만 아니라, 소프트웨어 개발 방식에 혁신을 가져왔으며, 이는 커뮤니티의 다양성과 지원 덕분임.
     * Go 언어의 개발 과정과 그에 대한 반성은 오픈 소스 프로젝트를 운영하는 데 있어 중요한 교훈을 제공함.

        Hacker News 의견

     * 프로젝트 회고에 시간을 할애하는 핵심 인물들에 대한 감사함
          + 시스템 프로그래밍에 초점을 맞춘 언어 제한
          + 언어와 원칙을 명확히 정의하여 모호함과 목적이 다른 설계 낭비 방지
          + 품질을 우선시하여 문제를 배포 전에 해결하는 것이 모든 이해관계자에게 저렴함
          + 커뮤니티 공유와 엄격한 언어 및 릴리스 관리의 균형 유지
          + 구글의 비개입이 Go의 성공에 기여했으며, 이는 다른 프로젝트에서도 가능한지 의문 제기
          + Go가 서버 측 소프트웨어를 자바에서 네이티브 컨테이너로 이동시키는 핵심 기술이었으며, 지난 10년간 웹 애플리케이션 인프라의 대부분을 지원함
     * Go 언어와 커뮤니티에 대한 애정
          + 2012년 파이썬 개발자로서 Go를 접하고 비트 조작의 용이성에 놀람
          + 10년 후 여전히 Go의 대부분의 기능이 잘 작동하는 것에 놀라움
          + Rob, Ian, Russ 등이 Go를 위해 한 일과 커뮤니티와의 ""도로의 울퉁불퉁함""에 대한 솔직함에 감사
          + 패키지 관리 문제에 대한 비판적인 시각도 있지만, 현재 좋은 해결책에 도달했다고 평가
     * Go의 패키지 관리 시스템에 대한 비판적인 경험 공유
          + 10년 전 go-nuts에서 Go의 패키지 관리 방식에 대해 비판적인 의견을 제시했을 때 Rob Pike로부터 무시당한 경험
     * Go 언어에 대한 비판적인 시각
          + 언어의 깊은 문제에 대한 인정 부족
          + 타입 시스템, 에러 처리, 안전하지 않은 동시성, 단순한 문법 등으로 인해 Go를 추천하지 않음
          + Rust를 주 언어로 사용하며, Go가 가지지 못한 비전을 Rust에서 발견함
     * Ken Thompson의 C 컴파일러 사용 결정에 대한 흥미로운 점
          + LLVM 대신 Ken Thompson의 C 컴파일러를 사용한 결정에 대한 불만과 초기 버전의 최적화되지 않은 코드 생성에 대한 언급
          + 이 결정으로 인해 세그먼티드 스택을 빠르게 구현할 수 있었음
     * gofmt의 성공적인 도입에 대한 강조
          + 프로젝트 초기부터 코드 포맷에 대한 논쟁을 완전히 제거하여 큰 가치를 제공함
          + 여러 새로운 언어가 gofmt를 모방하거나 비슷한 도구를 만드는 것을 보임
     * GopherConAU 주최자로서 전체 재생 목록 공유
          + 재생 목록을 공개할 수 없는 이유를 모르겠음
     * Go를 사용하여 모노레포를 쉽게 만들고 앱을 빠르게 빌드할 수 있는 장점
          + Go로 CLI 도구를 만들기 쉽고 유닉스 파이프라인의 일부로 사용할 수 있음
          + Go가 대용량 로그 분석 등에 유용함
     * Go의 상호 운용성과 C FFI에 대한 선택 언급 부족
          + ""Go로 다시 작성""이라는 답변이 다른 옵션들을 배제함
     * 컴파일러를 자체 언어로 작성하는 것에 대한 의견
          + 자체 언어로 컴파일되지 않는 언어가 컴파일러 작성에 적합하지 않은지에 대한 질문 제기
          + 컴파일러에 적합한 언어가 다른 애플리케이션에 적합하지 않을 것이라는 함축에 대한 이해 부족과 더 많은 맥락 요구
"
"https://news.hada.io/topic?id=12657","1D 팩맨팩맨

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 댓글 작성자가 자동으로 플레이하는 작은 봇을 만드는 것이 재미있었다고 함.
          + 자바스크립트 코드를 개발자 콘솔에 붙여넣으면 팩맨이 적(유령)으로부터 멀어지도록 도와주는 간단한 전략을 사용함.
          + 코드는 100ms마다 상황을 평가하고, 팩맨이 파워업이 없거나 곧 만료될 경우 적으로부터 멀어지도록 함.
          + 게임 난이도가 점점 증가하여 유령이 빨라지고, 중앙의 펠릿을 먹기 전에 유령에게 잡힐 수 있음.
          + 코드를 개선하여 유령을 한쪽 끝으로 유인한 다음 다른 쪽으로 빠르게 이동하여 중앙 펠릿을 먹을 수 있음.
          + 새로운 펠릿이 추가될 때 중앙 펠릿을 우선적으로 먹어야 함.
     * 두 번째 댓글 요약:
          + 댓글 작성자는 게임을 즐기며 6,600점을 달성함.
          + 최적의 전략은 유령을 먹는 것을 우선순위에서 배제하는 것임.
          + 파워업을 사용하여 중앙의 점들을 모으는 것이 중요하며, 측면은 반사 신경만으로도 안전하게 수집 가능함.
          + 약 3,000점이 되면 중앙을 먹지 않고 파워업을 소모하면 회복이 불가능함.
          + 우연히 유령을 먹는 것은 괜찮지만 일반적으로 도움이 되지 않음.
          + 중앙을 수집하기 위해 파워업을 사용하면, 한 줄을 완성한 후 즉시 180도 회전하여 다시 중앙을 수집함.
          + 파워업이 끝나갈 때 측면에 있으면 최악의 경우가 발생할 수 있지만, 높은 점수에 도달할 때까지 파워업을 잡는 것은 항상 안전함.
     * 세 번째 댓글 요약:
          + 댓글 작성자는 게임을 사랑하며, 다른 사람이 유령을 조종하는 멀티플레이어 버전도 재미있을 것이라고 생각함.
     * 네 번째 댓글 요약:
          + 댓글 작성자는 게임이 재미있으며, 음악과 죽는 소리 효과가 왜 그렇게 멋진지 설명하고 싶어 함.
          + 게임플레이는 리듬감이 좋고 긴장감이 있으며, 유령에게 잡힐 때마다 소리를 지르게 됨.
          + 죽을 때 자신의 실수로 느껴지며, 몇 가지만 개선하면 훨씬 나아질 수 있을 것 같다고 느낌.
     * 다섯 번째 댓글 요약:
          + 댓글 작성자는 게임이 예상보다 더 재미있으며, 유령의 재생성 방식, 유령과 팩맨의 속도, 유령이 깜박이는 시간 등 작은 선택들이 마음에 들었다고 함.
          + 게임은 단순하지만, 플레이하면서 타이밍을 배우고 전략을 고민하게 됨.
     * 여섯 번째 댓글 요약:
          + 댓글 작성자는 같은 개발자가 만든 다른 인기 있는 게임을 언급하며 링크를 공유함.
     * 일곱 번째 댓글 요약:
          + 댓글 작성자는 1D 팩맨을 좋아하는 사람들이 Wolfenstein 1-D도 좋아할 것이라고 언급하며 위키백과 링크를 공유함.
     * 여덟 번째 댓글 요약:
          + 댓글 작성자는 대학 시절 1D 스페이스 인베이더 게임을 만들었으며, 아두이노에서 실행되고 8피트 RGB LED 라이트 스트립에서 플레이되었다고 함.
          + 학기 동안 학생들과 교수들이 게임을 즐기는 것을 보았으며, 이 팩맨 게임도 LED 스트립에서 플레이하면 멋질 것이라고 생각함.
     * 아홉 번째 댓글 요약:
          + 댓글 작성자는 왼쪽 화살표가 왼쪽으로, 오른쪽 화살표가 오른쪽으로 이동하는 것이 더 나을 것이라고 제안함.
          + 현재는 두 화살표 모두 방향을 토글하는데, 이것은 정지하려고 할 때 잘못된 입력을 유발할 수 있음.
"
"https://news.hada.io/topic?id=12696","VC Tomasz Tunguz의 2024년 예측","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       VC Tomasz Tunguz의 2024년 예측

     * 2024년 상반기 동안 IPO 시장은 닫혀 있을 것이나, Stripe와 Databricks와 같은 몇몇 대형 IPO가 여름이나 가을에 시장을 다시 열게 될 것. 연준(Fed)의 금리 인하가 도움이 될 것.
     * 인수합병(M&A)은 연중 가속화되며, 금리 변동에 대한 기대가 목표 인수 가치에 대한 두려움을 조성. 지난 2년간 M&A는 약 490억 달러였으며, AI 인수에 의해 600억 달러 이상으로 증가. 사모펀드(PE)는 성장률이 10-25%인 기업의 중요한 구매자가 될 것.
     * AI와 데이터는 창업자와 투자자가 기술의 새로운 응용을 찾으면서 자금 조달 환경을 지배. 소수의 회사들이 기록적인 성장률을 달성할 것.
     * AI가 가능한 웹 검색의 비율이 모든 소비자 검색의 50%에 근접할 것이며, 특히 모바일에서 소비자 행동 패턴이 진화할 것.
     * BTC ETF가 웹3 금융에 대한 관심을 다시 불러 일으킬 것.
          + ""겨울""은 많은 회사들이 수익 창출 기업으로 진화하도록 강제했음.
          + 미국 외부에서 배당을 제공하는 첫 번째 널리 성공한 토큰들이 나타날 것
          + 이 혁신은 매우 초기 단계의 IPO를 재활성화하며, 더 많은 ARR 기반의 웹3 기업들이 규모를 달성할 것.
          + 토큰에 대한 기록적인 유입은 Bitcoin, Solana 및 더 나은 가격/성능을 제공하는 고성능 L1들의 사상 최고치를 촉진할 것.
     * 미국 VC 투자는 2022년 2750억 달러에서 2023년 2000억 달러로 감소하고, 2024년에는 약 2000-2200억 달러로 유지될 것.
          + LP들의 벤처에 대한 관심이 2020년과 2021년의 열광 후 감소함에 따라 발생.
          + AI 기업을 제외하고는 평가가 상대적으로 안정적일 것이며, AI 기업은 시장 대비 약 10-25%의 프리미엄을 받게 될 것
     * 미국 선거 동안 AI 규제에 대한 논의가 중요한 주제가 될 것
          + 기계 생성 콘텐츠가 미국 정치에 대한 국제적 간섭을 악화시키지만, 미국이 시작한 혁신 물결을 계속 이끌고자 하는 강력한 욕구로 인해, 웹이 번성할 수 있도록 한 safe barbors 같은 조항이 AI에 적용될 것.
     * 기업들, 특히 스타트업들이 AI로 인해 의미 있는 생산성 향상을 보고할 것.
          + 직원 수 증가 없이도 예상대로 매출이 성장하며, 직원당 ARR이 10% 증가하여 10년 평균의 두 배가 될 것.
     * 데이터 레이크가 비즈니스 인텔리전스와 관찰 가능성 작업 부하에 걸쳐 지배적인 데이터 아키텍처가 될 것
          + 더 많은 스타트업들이 아마존 S3의 무료 복제를 활용하고, Cloudflare R2의 매우 큰 데이터 세트를 위한 아키텍처가 주로 AI를 위해 사용량의 의미 있는 성장을 촉진할 것.

지난해 예측의 평가

     * ML이 SaaS를 두 번째 파도로 밀어 올려 근로자의 생산성을 실질적으로 향상시켰으나, 생산성 향상은 아직 확인되지 않음. 점수: 0.5.
     * 웹3의 2022년 숙취가 2023년까지 이어졌으나, BTC ETF의 흥분으로 인해 연말에 변화가 있었음. 점수: 1.
     * 연준이 인플레이션을 억제하고 전방 배수가 7.0x에 닿음. 평균 전방 배수는 7.2x로 매우 근접함. 점수: 1.
     * 사모펀드가 70개 이상의 상장 소프트웨어 회사 중 10%를 인수함. 예측은 7건의 PE 공개 인수를 말함. 점수: 1.
     * 자금 조달 시장이 해빙되지만, 2022년 상반기보다 훨씬 낮은 가격에 이루어짐. 초기 단계 시드는 1000-1500만 달러, 시리즈 A는 5000-6000만 달러에 평가됨(ARR 약 50만 달러 포함). 시드 평가는 증가했으나 시리즈 A 평가는 10% 감소함. 점수: 0.5.
     * 전체적으로 5점 만점에 4점을 받아, 혼란스러운 한 해에 나쁘지 않은 결과라고 생각
"
"https://news.hada.io/topic?id=12671","iOS/iPadOS 용 Microsoft Copilot 앱 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  iOS/iPadOS 용 Microsoft Copilot 앱 릴리즈

     * 안드로이드용 Copilot 에 이어서 바로 출시 (예전 Bing Chat)
     * OpenAI의 ChatGPT 모바일 앱과 비슷한 기능을 지원
     * GPT-3.5를 사용하는 ChatGPT와 달리 무료 사용자도 GPT-4 와 DALLE-3을 이용 가능
     * 또한 마이크로소프트는 웹 인터페이스 - https://copilot.microsoft.com/ 을 별도로 오픈

   앱스토어 : https://apps.apple.com/us/app/microsoft-copilot/id6472538445

   Microsoft Copilot for Android 앱 공개
"
"https://news.hada.io/topic?id=12700","Crunchbase의 2024년 기술/스타트업 트렌드 예상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Crunchbase의 2024년 기술/스타트업 트렌드 예상

AI 버즈가 사라짐

     * 2024년에는 인공지능(AI)과 특히 AI 투자의 향방에 주목할 만한 변화가 예상됨
     * 2023년에는 1억 달러 이상의 투자 라운드가 일반적이었지만, 많은 투자자들이 시장에서 발을 빼고 있으며, 과도하게 치솟은 기업 가치와 생성 AI 시장에서의 승자가 얼마나 될지에 대한 의문을 제기함.
     * OpenAI와 Anthropic과 같은 회사들은 여전히 원하는 평가를 받을 수 있겠지만, 투자자들 사이에서 FOMO(놓칠까 두려움)가 줄어들고 있으며, 업계의 다른 변화들이 투자자들의 감정에 영향을 미칠 수 있음.
     * AI를 단순히 적용하는 마케팅/판매 플랫폼에 대한 투자자들의 관심이 줄어들고 있음.
     * 일부 VC들은 AI 기업들이 미국과 해외에서 직면할 수 있는 법적 및 규제적 딜레마로 인해 AI 스타트업에 대한 투자가 느려질 것으로 예상함.
     * 모바일 혁명이 일어났을 때 기초 인프라 계층에서 가장 큰 승자는 기존의 대형 기술 회사들이었으며, 이번에도 대형 기술 회사들이 AI에 대한 투자를 주도할 것으로 보임.
     * AI는 비용이 많이 드는 분야로, 스타트업은 데이터, 컴퓨팅 파워, 인재 등 다양한 자원이 필요하며, 이는 대형 기술 회사들이 제공할 수 있는 것임.
     * 대형 기술 회사들이 투자를 중단하고 VC들이 자금을 끊으면, 많은 AI 스타트업들에게 2024년은 어려운 한 해가 될 수 있음.

벤처 펀드의 둔화

     * 스타트업의 문을 닫는 것과 함께 VC(벤처 캐피탈) 자체의 미래에 대한 관심이 높아짐.
     * 2020년과 2021년에 많은 신생 벤처 펀드가 생겨났지만, 이들 중 많은 수가 투자 가치 하락을 경험함.
     * 이러한 펀드들은 새로운 자금을 모으지 못할 것이며, 일부는 문을 닫거나 회사 지분을 조기에 매각할 수도 있음.
     * 심지어 몇몇 대형 벤처 펀드도 시장 변화에 맞춰 자금 모집 계획을 변경해야 했음.
     * 벤처 캐피탈은 돈이 풍부할 때는 재미있는 사업처럼 보이지만, 시장이 재조정될 때 그 위험성이 드러남.

기술 분야의 해고는 느려졌지만 끝나지 않음

     * 미국 내에서만 30만 명 이상의 기술 노동자들이 해고되었으며, 2024년에도 해고가 끝날 것으로 보이지 않음.
     * 스타트업의 폐업과 대기업의 해고가 계속되고 있으며, 2024년 IPO 시장의 전망이 여전히 밝지 않고 스타트업의 자금 조달이 어려워짐에 따라 해고가 계속될 것으로 예상됨.

'모든 것이 무너졌다'는 이야기의 끝

     * 2023년은 부정적인 비교의 해였으나, 2024년에는 전년 대비 자금 조달에 긍정적인 이야기를 만들기 쉬울 것으로 보임.
     * 예를 들어, 최근 분기에 투자가 급감한 소비자 제품 전자상거래 분야에서는 작은 상승만으로도 큰 반등을 선언할 수 있음.
     * 연준의 금리 인하 기대에 힘입어 기술 주식이 최근 몇 주 동안 상승하고 있으며, 이는 IPO의 귀환을 예고할 수도 있음.

하지만 IPO 붐을 기대하지 말 것

     * 2024년에는 일부 IPO가 돌아올 수 있지만, 새로운 상장 시장이 강력하게 회복될 것으로 기대하지는 않음.
     * 2023년에 상장한 Klaviyo와 Instacart의 미온적인 성과를 고려할 때, 공개 시장 투자자들은 IPO를 원하는 회사에 대해 더 까다로워졌으며, 이익성장보다는 수익성을 더 중요시함.
     * 따라서 IPO를 늦출 수 있는 회사들은 2025년 이후까지 기다릴 수도 있음.
     * 그러나 Crunchbase 유니콘 보드에는 현재 1,500개 이상의 10억 달러 이상의 가치를 가진 비상장 회사들이 있으며, 이들 모두 언젠가는 공개 시장에 상장하거나 다른 방식으로 출구 전략을 찾아야 함.
"
"https://news.hada.io/topic?id=12638","톰 스콧: 십 년 후, 비디오 제작을 중단할 시간 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   톰 스콧: 십 년 후, 비디오 제작을 중단할 시간 [비디오]

        Hacker News 의견

     * Tom Scott의 작업은 웹 콘텐츠가 얼마나 흥미롭고 가치 있는지 보여주는 최고의 예 중 하나임.
          + 짧고 파생적인 콘텐츠가 넘쳐나는 가운데, 그는 주당 10분 이상을 요구하지 않으면서도 진정으로 배울 수 있는 것들을 만듦.
          + 비슷한 수준의 콘텐츠를 만드는 사람들이 많지만, 이런 유형의 콘텐츠 제작자가 점점 줄어들고 있는 것 같음.
          + Tom은 분명 무기한 휴식을 취할 자격이 있으며, 그가 짧은 형식의 웹 비디오로 돌아온다면 다시 시청할 것임.
     * Tom의 접근성에 대한 헌신은 놀라움.
          + 그의 비디오에 자막을 켜면, 그가 얼마나 많은 노력을 기울이는지 알 수 있음.
          + 많은 유튜브 콘텐츠 제작자들이 자동 생성된 자막에 의존하지만, Tom은 제대로 된 자막을 제공함.
     * ""성장해서 관리자가 되거나 멈추고 더 작은 프로젝트를 하는 것""이라는 말에 공감함.
          + 과거 40명의 개발자 팀을 이끌었던 경험이 있지만, 다시 개인 기여자(IC)가 되고 싶었던 경험과 맥락이 비슷함.
     * Tom Scott의 비디오를 좋아하지만, 유튜브가 빠르게 콘텐츠를 생산하거나, 더 드문 에세이 길이의 비디오를 만드는 것으로 양분되고 있다는 점에서 그의 말에 동의함.
          + 플랫폼이 더 이상 '재미있지' 않고, 예전에 찾아보던 콘텐츠가 점점 드물어지는 것 같음.
          + 그럼에도 불구하고, Tom이 휴식을 취하거나 은퇴를 결정하더라도 그의 미래 창작물을 기대함.
     * Tom 덕분에 UTF-8을 이해하게 됨.
          + 그가 무엇을 설명했는지보다 어떻게 설명했는지, 그리고 그의 열정이 그를 주목받게 만듦.
     * Tom Scott이 유튜브/소셜 미디어에서 성공할 수 있었던 이유에 대해 논의함.
          + 일관되고 지속적인 흥미로운 콘텐츠 제공이 시청자를 끌어들이고, 매번 더 나은 콘텐츠를 만드는 데 필요한 기술을 개발하는 주요 요인임.
     * 성공적인 프로젝트의 저자들이 성공 공식을 알아낸 후에도 프로젝트를 중단하기로 결정할 때 감사함.
          + 이는 그들의 장인정신과 다른 분야에서 혁신을 추구하려는 진정한 의지를 보여줌.
          + 또한, 지속적으로 높은 품질을 유지하는 압박을 피함.
          + 짧은 시간 동안 고품질 콘텐츠를 즐기는 것이 장기간 품질이 저하되는 것을 보는 것보다 낫다고 생각함.
     * Tom Scott은 훌륭한 유튜버 중 한 명임.
          + 개인적으로 알지는 못하지만, 지식을 세상과 공유하고자 하는 진정성 있는 사람으로 보임.
          + 그의 뉴스레터에 대해서도 최근에 알게 됨.
     * Tom Scott이 2010년경 BBC 퀴즈쇼 'Only Connect'에 출연한 것을 처음 봄.
          + 그의 유튜브 작업이 본격적으로 시작되기 전이나 그즈음에 그의 지성과 카메라 앞에서의 자연스러운 태도를 볼 수 있는 재미있는 회상임.
"
"https://news.hada.io/topic?id=12737","HN 소개: 문서, 스프레드시트, 양식, 사이트, 채팅 등 18개 앱을 통합한 앱 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            HN 소개: 문서, 스프레드시트, 양식, 사이트, 채팅 등 18개 앱을 통합한 앱 개발

모듈러 작업 공간 소개

     * Nino는 서로 상호 운용 가능한 앱 모음으로, 하나의 통일된 인터페이스에서 블록 수준으로 협업 가능.
     * 작업 공간, 알림, 검색, 새로운 항목, 고정된 항목, 개인 항목, 기타 항목, 커스텀 컬렉션 등 다양한 기능 제공.
     * 오프라인 모드, 초고속 저장 및 즉시 열기, 통합 검색 등의 기능으로 효율적인 작업 환경 조성.

아키텍처

     * 페이지 소싱, 페이지 및 블록 임베드, 블록 미러링 등을 통해 유연하고 확장 가능한 작업 공간 제공.
     * 프로젝트 관리, 지식 관리, 데이터베이스 관리 등 다양한 예시를 통해 Nino의 활용 방안 제시.

팀 협업

     * 내부 및 외부와의 협업을 위한 무제한 멤버 및 게스트 초대 기능.
     * 실시간으로 페이지에서 모든 사용자 확인, 블록에 대한 코멘트로 스레드 시작, 실시간 커서를 사용한 동시 편집 지원.

호스팅

     * 전문적인 브랜딩 페이지를 쉽게 구축할 수 있는 노코드 솔루션 제공.
     * 1-클릭으로 버전 롤백, 사용자 도메인 또는 Nino 서브도메인에서 페이지 게시, 내장된 SEO 및 CDN 지원.

기반

     * 개인 정보 보호 및 보안에 중점을 둔 설계로 앱 혼란 제거.
     * 앱 추적 없이 기능 쿠키와 오류 보고만 수집, HTTPS를 통한 안전한 데이터 전송, 클라이언트 측 및 종단 간 암호화 지원.

미래

     * 세계 지식 경제 확장을 목표로 다양한 모듈 개발 중.
     * 지식 작업을 위한 수백 가지 모듈을 만들어 나가는 장기적 비전 제시.

GN⁺의 의견

     * Nino는 사용자의 다양한 작업을 통합하여 효율성을 높이고 비용을 절감할 수 있는 모듈러 작업 공간을 제공함.
     * 실시간 협업, 노코드 웹사이트 구축, 강력한 보안 기능을 통해 현대적인 작업 환경의 필요성에 부응함.
     * 장기적인 비전과 지속적인 모듈 개발을 통해 사용자의 지식 작업을 지원하고 지식 경제 확장에 기여할 것으로 기대됨.

        Hacker News 의견

     * 데이터 모델의 중요성
          + 데이터 모델은 성장함에 따라 변경하기 매우 어려움
          + 신중한 고려 없이는 JSONB 컬럼, 중복 데이터, 고아 행, 성능 저하 등의 문제 발생 가능성
          + 고객은 예상보다 큰 항목을 문서에 저장할 수 있으며, S3 등으로 오프로딩하는 대신 인라인으로 처리하고 싶어질 수 있음
          + 채팅은 사실상 별도의 데이터베이스가 필요하며, Discord는 Scylla를, Slack은 Vitess를 MySQL 위에서 사용함
          + 액티브-액티브 구성을 사용하는 경우, 확장성 문제로 인해 이를 벗어날 계획이 필요함
          + 오프라인 저장 기능을 사용하고 있을 가능성이 있으며, 이는 Ditto와 같은 기술을 사용할 수 있음
     * 제품의 혼란스러운 측면
          + 제품이 무엇인지, 왜 중요한지에 대해 혼란스러움
          + 비즈니스 사용자로서 제품의 활용 방법과 중요성이 명확하지 않음
          + monday.com이나 Asana와 같은 경쟁 제품은 사용 사례와 실용적인 적용을 시작으로 설명함
     * 비즈니스 특화 권장
          + 문서 관리 시스템을 수직적으로 통합하여 ISO 9001 등의 사용 사례에 적용할 기회가 있음
          + 문서 버전 발행, 영구적인 문서 버전 조회, 문서 식별자 자동 생성 등의 기능 구현 필요
          + 문서가 발행되면 읽기 전용이 되어야 하며, 관련 문서와 함께 아티팩트를 배치할 수 있어야 함
     * 앱 사용에 대한 초기 인상
          + 앱과 사이트에서 안내가 부족하여 사용 방법이나 학습 방법을 알기 어려움
          + 사용자가 설계된 사용 모델을 파악하기 위해 시도해야 하는 부분이 있음
          + 모듈 간의 연결 방법이 명확하지 않으며, 가상 팀을 위한 예제 설정이 도움이 될 수 있음
     * 데이터 및 애플리케이션 호스팅 소유권
          + 사용자는 데이터와 애플리케이션 호스팅을 소유할 수 있어야 함
          + 제품이 중단되었을 때 데이터에 계속 액세스할 수 있는 방법이 필요함
          + 자체 호스팅, 소스 코드 제공, 문서 형식의 개방성 등에 대한 질문
     * 고객 및 문제 해결
          + 고객이 누구인지, 그들의 일상이 어떤지, Nino가 어떻게 그들의 작업을 개선하는지에 대한 설명 필요
          + 경쟁 제품보다 Nino가 더 나은 점과 구체적인 워크플로우를 보여줄 필요성
     * 비즈니스 시작에 대한 조언
          + 고객의 구체적인 필요에 기반하여 제품을 반복 개발할 필요성
          + 이미 존재하는 다양한 애플리케이션들과의 차별화 및 특정 사용 사례에 초점을 맞출 것을 권장
     * 사용자 경험(UX) 개선 필요성
          + Google Sheets와 Docs에 비해 기능적으로 뒤처짐
          + 캘린더, 문서, 시트를 한 곳에서 관리하는 것이 중요한 사용자를 찾아야 함
          + 사용자 경험에 대한 몇 가지 개선 사항 제안
     * 앱 혼란 문제에 대한 의문
          + 각 회사나 업무 흐름에 맞는 특정 앱이 이미 존재함
          + ""앱 혼란""보다는 구체적인 문제를 해결하는 데 초점을 맞출 것을 권장
     * 제품 출시 축하 및 공감
          + 생산성 향상을 위한 앱 혼란 문제 해결 가능성에 공감
          + 유사한 제품을 개발 중이며, Nino의 진행 상황에 관심을 가짐
          + 향후 연결 가능성에 대한 흥미 표현
"
"https://news.hada.io/topic?id=12685","Show GN: 전직장닷컴 - 퇴사 후에 전직장 동료들과 이야기할 수 있는 커뮤니티","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: 전직장닷컴 - 퇴사 후에 전직장 동료들과 이야기할 수 있는 커뮤니티

   https://junjikjang.com/

   안녕하세요.

   전직장닷컴이라는 간단한 사이드 프로젝트를 만들어서 소개드립니다.

서비스에 대해 간단하게 소개 하면?

   퇴사 후에 전 직장 사람들과 소통할 수 있는 커뮤니티

왜 만들었는가?

   단톡방은 부담스럽고 페이스북 같은 곳은 너무 다양한 사람이 섞여 있어 조금은 프라이빗한 이야기하기 쉽지 않았습니다. 그래서 전 직장이라는 맥락에서 서로 소통할 수 있는 공간이 있었으면 좋겠다는 생각에 만들어 봤습니다.

기능

     * 누구나 전 직장 보드를 만들 수 있습니다.
     * 보드를 만들 때 전직장 사람들이 알만한 퀴즈를 등록합니다.
     * 보드에 들어가려면 퀴즈를 풀어야 합니다.
     * 회원 가입을 하지 않아도 퀴즈만 풀면 보드를 둘러 볼 수 있습니다.
     * 전체 글을 보거나 보드에 글을 쓰려면 전화번호로 회원 가입을 해야 합니다.

몇 명이서 얼마나 걸렸나?

   백엔드 개발자 두 명이 3주 정도 걸려 만들었습니다. 저 말고 다른 개발자 분이 백엔드 개발과 그림을 그리셨습니다. 프론트 개발 지식이 부족하지만 제가 프론트개발을 했습니다. :)

사용한 기술 스택은?

   클로저로 만들었습니다. 백엔드는 Kit(https://kit-clj.github.io/)이라고 하는 프레임워크?(라고 하기에는 템플릿 수준)을 써서 만들었고 프론트엔드는 re-frame(https://github.com/day8/re-frame)이라는 라이브러리를 써서 만들었습니다.

   디자인과 프론트개발을 도와드리고 싶네요..ㅎㅎ

   아직은 기능이 많지 않아 감당이 되는 것 같네요. 말씀만으로도 큰 힘이 되네요! 감사합니다.

   회사별로 닉네임을 다르게 설정할 수 있게 만들어주세요

   필요한 기능일 것 같아서 고민해서 반영해 보도록 하겠습니다. 좋은 기능 제안 감사합니다!

   익명성 보장되나뇨?

   서버에 저장하거나 밖으로 보이는 식별자는 닉네임이 전부라서 식별되지 않을 것 같은 닉네임을 쓰면 익명성이 보장될 것 같습니다. 제가 법적 문제에 관해서는 잘 모르지만 미국 법인이라 해당 지역 법을 따르게 될 것 같습니다.

   여기서도 발견하니 반갑네요!

   감사합니다!

   아이디어 너무 좋아요. 대박예감. 기술도 다 멋지네요

   감사합니다. 클로저로 만드니 빨리 만들 수 있어서 좋더라고요.

   무엇보다 사이트 제목이 취향이네요.

   감사합니다. 레트로 느낌나게 해봤습니다. :)

   그림이 귀여워요

   감사합니다!. 함께 개발하신 개발자 분이 그림을 잘 그리십니다. ㅎㅎㅎ

   아이디어가 좋네요

   감사합니다! :)
"
"https://news.hada.io/topic?id=12661","직접 해보는 블라인드 수리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             직접 해보는 블라인드 수리

자가 수리용 블라인드 부품 찾기

     * Fix My Blinds는 블라인드 및 셰이드용 교체 부품과 줄을 제공함.
     * 고객이 스스로 블라인드 수리를 할 수 있도록 도와주는 다양한 지침 비디오, 서면 지침, 부품 다이어그램을 보유함.
     * 블라인드 작동 방식을 이해하면 수리에 도움이 되며, 사이트에서는 블라인드의 각 부품을 라벨링하여 필요한 부품을 신속하게 식별할 수 있도록 함.

인기 있는 블라인드 부품

     * 블라인드에 사용되는 인기 부품으로는 코드, 줄, 루프, 기울기 메커니즘, 발란스 클립 및 코너, 마운팅 브래킷, 막대 및 막대 팁 등이 있음.

어린이 안전을 위한 블라인드

     * 블라인드를 어린이에게 더 안전하게 만드는 방법에 대한 정보 제공.

고객 지원 및 연락처

     * 이메일(service@fixmyblinds.com)을 통해 고객 지원 제공.
     * 월요일부터 금요일까지 오전 8시부터 오후 4시까지 MT(산악 표준시)에 운영함.

회사 정보

     * Fix My Blinds는 소매점이 아닌 온라인 기반의 회사로, 콜로라도 스프링스에 위치한 창고 주소를 제공함.
     * 다양한 결제 수단을 받아들이며, 보안을 중시함.

GN⁺의 의견

     * Fix My Blinds는 블라인드 수리를 DIY(Do It Yourself)로 할 수 있도록 지원하는 서비스로, 수리에 필요한 부품과 지침을 제공하는 것이 핵심임.
     * 이 사이트는 블라인드 수리에 대한 전문 지식이 없는 사람들에게도 친절한 안내와 지원을 제공하여 비용 절감과 자가 수리를 가능하게 함.
     * 어린이 안전에 대한 정보를 제공하는 것은 가정에서의 안전을 중시하는 사용자에게 매우 유용할 수 있음.

        Hacker News 의견

     * 이 사이트는 창문 블라인드에 관한 모든 것을 갖추고 있음. 누군가는 창문 블라인드에 대한 방대한 지식을 조직화하여 온라인에 게시했고, 광고가 거슬리지 않으면서도 지속 가능한 수익을 창출하는 방법을 찾아냄. 이 페이지는 창문 블라인드의 쉘던브라운닷컴과 같은 예술작품임.
     * 아르헨티나에서는 ""persianas""라고 불리는 특정 종류의 블라인드를 찾고 있음. 이 블라인드는 완벽한 차광 기능을 가지고 있으며, 슬랫들이 서로 맞물려 빛을 완전히 차단함. 또한 외부 소음과 온도에 대한 절연 효과도 있음. 미국이나 아르헨티나 외의 지역에서는 이러한 블라인드를 본 적이 없으며, 미국 주택에 설치하는 것은 간단하지 않을 것임.
     * 후버 카펫 클리너가 작동을 멈춤. 흡입은 시작되지만 모터 부분이 작동하지 않음. 분해하여 문제를 찾아보았지만 아무것도 발견하지 못함. 후버에 연락했지만 대기 시간이 길어 포기함. 우연히 문제 해결을 위한 동영상을 찾아 간단한 해결책을 발견함. 현재 많은 사람들이 고장난 것으로 여기고 새 제품을 구매할 가능성이 있지만, 수리하여 사용하는 것에 더 많은 기회가 있음을 강조함. #righttorepair
     * 헌터 더글라스 블라인드의 작은 수리가 필요했던 개인적인 경험 공유. 클러치에 연결된 코드가 부러져서 클러치 내부에 걸림. 클러치를 분해했을 때 내부 스프링이 빠져나와 제대로 작동하지 않음. 필요한 부품을 정확히 알고 있었기 때문에 해당 부품을 인터넷에서 찾아 $30에 구매하여 교체함. 수리 비용을 크게 절약함.
     * 이익을 목적으로 하는 매우 좋은 사이트. 비즈니스 모델은 창문 블라인드 수리 부품 판매이지만, 창문 블라인드에 관한 정보가 풍부하고 사이트 디자인, 정보 구성 및 제공이 아름다움. 특정 블라인드 유형에 대한 정보가 없어 도움이 되지 않는 점은 아쉬움.
     * 최근 이 사이트에서 몇 가지 쉐이드 마운트를 구매함. 2019년에 홈디포에서 구입한 ""MyBlinds by Hunter Douglas"" 브랜드였지만, 브랜드는 사라진 듯함. 설치 지침을 찾아내고 FixMyBlinds에서 충분한 정보를 얻어 쉐이드를 설치할 수 있었음. 헌터 더글라스, 레볼로, 발리가 현재 같은 회사의 일부일 수도 있음을 언급.
     * 사이트가 무선 블라인드에 대한 정보를 다루지 않는 것 같음. 뉴욕에서는 작은 아이들의 안전 문제로 인해 무선 블라인드로의 전환을 자발적으로 단계적으로 진행 중이지만, 가지고 있는 무선 블라인드는 신뢰성이 떨어짐.
     * 롤러 블라인드를 최근에 수리함. 클러치를 고정하는 플라스틱 클립이 한쪽에서 깨져서 내부 스프링이 제자리를 잡지 못함. 이 문제를 해결하기 위해 이쑤시개를 사용함. 사이트에서는 부품 교체 대신 이런 유형의 해결책을 다룰 것으로 기대했지만, 이쑤시개가 실패할 경우 새 클러치의 정확한 크기를 식별하는 데 도움이 될 것임.
     * 새로운 장소를 구입했는데, 한 방의 블라인드가 손상되어 하단 어셈블리 교체가 필요함. 사이트에는 이 유형의 블라인드에 대한 정보가 없어 아쉬움.
     * 이 사이트의 소유주와 이웃이었던 적이 있음. 좋은 사람들이지만, 해커뉴스에서 이 사이트를 볼 것이라고는 생각하지 못했음.
"
"https://news.hada.io/topic?id=12717","자바스크립트를 활용한 나의 200GB iCloud 정리 작업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   자바스크립트를 활용한 나의 200GB iCloud 정리 작업

iCloud 정리

     * 애플로부터 iCloud 저장 공간이 가득 찼다는 이메일을 받음.
     * 200GB와 1TB의 비용 차이가 크기 때문에, 대안을 모색하기로 결정함.
     * 대부분의 저장 공간을 차지하는 사진(~127GB)을 파일 크기별로 정렬하고자 했으나, 애플은 이 기능을 제공하지 않음.

JS를 이용한 해결책

     * iCloud 웹사이트에서 가능한 방법을 고민함.
     * 사진->미디어 유형->비디오로 이동하여 최대한 화면을 축소함.
     * 각 비디오에는 시간이 표시되는데, HTML 요소이므로 JS를 사용하여 검색 및 필터링 가능함.
     * video-text-badge 클래스를 가진 모든 런타임 박스를 찾아서 지속 시간별로 정렬하고, 특정 임계값을 넘는 것을 강조하는 코드를 작성함.
     * iCloud는 페이지에 있는 요소만 로드하기 때문에, 스크롤하면서 새 요소가 강조되도록 타이머를 사용하여 함수를 실행함.

신비한 현상

     * 30초 이상의 모든 iCloud 비디오를 제거한 후, iCloud에서 약 55GB가 정리되었음에도 불구하고 실제로 다운로드한 비디오는 7GB에 불과함.
     * 7GB의 비디오가 클라우드에서 실제 하드 드라이브보다 훨씬 더 많은 공간을 차지하는 것으로 보임.

실험 1

     * 4K 비디오를 업로드하여 281MB의 공간을 차지하는 것을 확인함.
     * 비디오를 다운로드하고 삭제한 후, 281MB 비디오가 제거되어 약 270MB의 공간이 확보됨.

실험 2

     * iCloud에 여러 복사본이 저장되어 있을 수 있는 오래된 비디오를 조사함.
     * 많은 그래프가 있는 비디오를 찾아 iCloud에서 128MB를 차지하는 것으로 나타남.
     * 다운로드한 파일은 실제로 47MB였고, 삭제 후 약 170MB의 저장 공간이 늘어남.

결론

     * 제거된 파일 크기의 7배 이상의 저장 공간이 확보되는 것은 이상함.
     * 오래된 큰 비디오가 실제보다 iCloud에서 훨씬 더 큰 저장 공간을 차지하는 것으로 보임.
     * 이 현상의 원인을 알고 싶지만, 직접 조사할 만큼 관심이 있거나 지루하지 않음.
     * 누군가 이유를 알아내면 이메일로 알려달라고 요청함.
     * 50GB 이상의 공간을 확보하고, 미래에 다시 할 수 있도록 작은 스크립트를 작성함.

GN⁺의 의견

     * iCloud 저장 공간 문제는 많은 사용자가 공감할 수 있는 일반적인 문제임.
     * 이 글은 사용자가 스스로 문제를 해결할 수 있는 창의적인 접근 방식을 제시함으로써, 기술적 문제 해결에 대한 흥미를 불러일으킴.
     * iCloud에서 파일이 실제로 차지하는 공간과 사용자에게 보고되는 공간 사이의 불일치는 흥미로운 발견이며, 이는 클라우드 스토리지의 작동 방식에 대한 궁금증을 자아냄.

        Hacker News 의견

     * Photos 앱 확장 프로그램이나 별도의 앱을 만들어 큰 파일을 찾는 아이디어
          + Photos 앱 API가 파일 크기를 제공하지 않음
          + 사진이나 비디오는 실제 객체의 '뷰'일 뿐이며, 비디오를 자르면 원본은 남아 있음
          + 파일 크기가 다른 이유는 이 때문일 것
          + AppleScript를 사용해 파일 크기를 조회하는 스크립트가 있음
     * iCloud가 파일의 여러 버전을 비밀리에 저장하는 버그 가능성
          + iCloud에서 삭제 시 예상보다 많은 저장 공간이 확보되는 현상
          + iCloud가 최적화된 저화질 버전을 다운로드하고 원본을 저장하는 것으로 추정
     * Apple Photos의 RAW+JPEG 결합 문제
          + RAW 파일을 쉽게 분리하거나 삭제할 수 없어 iCloud 플랜 업그레이드 필요
          + 메타데이터 손실 없이 JPEG만 재가져오는 방법이 없음
     * iCloud의 저장 공간 티어에 대한 불만
          + 중간 크기의 저장 공간 옵션이 없어 사용자가 더 많은 비용을 지불할 기회 상실
     * 클라우드 서비스 제공업체의 불투명성에 대한 우려
          + 자체 호스팅 솔루션 사용, immich 앱 추천
     * iCloud 대신 개인 미디어 서버로 사진/비디오 이전
          + iCloud에서 아카이브를 다운로드하는 것이 쉽지 않음
          + Apple의 가격 인상에 대한 불만
     * iCloud 저장 공간 티어의 비합리적인 점프에 대한 비판
          + 200GB에서 2TB로 넘어가는 이상한 구조, 가족에게 적합한 500GB나 1TB 옵션이 없음
     * iCloud Photo Library를 전체 해상도로 내보내는 최선의 방법에 대한 질문
"
"https://news.hada.io/topic?id=12715","Starlight - Astro가 만든 Documentation 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Starlight - Astro가 만든 Documentation 프레임워크

     * 빠르고, 쉽게 사용가능한 문서 웹사이트를 작성 가능
     * 사이트 네비게이션, 검색, i18n, SEO, 읽기 쉬운 typography, 코드 구문강조, 다크모드 등을 지원
     * Markdown, Markdoc, MDX 등의 마크업 언어 지원
     * Astro 기반으로 다양한 연동 및 라이브러리 확장 가능
     * React, Vue, Svelte, Solid 등을 이용하여 자신의 UI 컴포넌트 사용 가능
"
"https://news.hada.io/topic?id=12701","광섬유를 통한 전력 전송 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            광섬유를 통한 전력 전송 기술

     * 파이버(광섬유)를 통해 전력을 공급하는 컴포넌트가 존재함 : Broadcom AFBR-POCxxxL 광 전력 컨버터
     * 이 컴포넌트는 표준 멀티모드 광섬유를 통해 800nm 적외선 빛 1.5W로부터 3V 180mA를 제공함(광 전력을 전력으로 변환)
     * 매우 비싸지만 매우 멋진 기술임. 커넥터 하나당 €512(73만원)
     * 고전압, 전자기 인덕턴스 또는 강한 자기장으로 인해 전기 배선 솔루션을 사용할 수 없는 전자 회로에 전력을 공급하는데 적합

사용자들의 반응

     * 사용자들은 이 컴포넌트의 가격에 대해 놀라움을 표현함.
     * 일부는 고가임에도 불구하고 특정 애플리케이션에서 유용할 수 있음을 언급함.
     * 예를 들어, 고전압 장비에서 코로나 방전을 측정하는 센서나 풍력 터빈의 날개 끝 센서에 사용될 수 있음.

기술적 토론

     * 이 기술은 높은 전력 밀도를 가지며, 광섬유 내에서 매우 강력한 빛을 생성함.
     * 사용자들은 광섬유를 통해 전력을 전송하는 데 필요한 송신기에 대해 토론함.
     * 또한, 이 기술이 레이저와 같은 위험성을 가질 수 있으며, 시력 손상의 위험이 있음을 지적함.

GN⁺의 의견

     * 파이버를 통한 전력 공급 기술은 특정 산업 분야에서 중요한 혁신을 제공할 수 있음. 예를 들어, 고전압 환경이나 전자기 간섭이 문제가 되는 곳에서 유용할 수 있음.
     * 이 기술의 높은 비용은 대규모 채택을 제한할 수 있지만, 특수한 환경이나 고가치 애플리케이션에서는 그 가치가 충분히 인정받을 수 있음.
     * 사용자들 사이의 토론은 이 기술의 잠재적인 위험과 안전 조치의 중요성을 강조함. 이는 새로운 기술을 채택할 때 고려해야 할 중요한 요소임.

   군용으로 적합하겠네요. EMP가 터져도 통신이 되는 근거리 통신단말 이라던지..

   와.. 위에 다른 사람들 댓글처럼 이런게 가능하다는걸 알게 되었네요. 신기합니다.

        Hacker News 의견

     * Powerlight Technologies(이전 명칭 LaserMotive)는 수백 와트의 전력을 광섬유를 통해 전송할 수 있는 기술을 시연함.
          + 이 기술은 주로 수중 원격 조종 차량(ROV)에 전력을 공급하는 데 사용될 예정.
          + 동일한 전력을 구리 케이블보다 더 얇은 광섬유 케이블로 전송할 수 있어 ROV의 부담을 줄임.
          + EMP가 있는 지역이나 MRI 근처에서 전자기기에 전력을 공급하는 등 다른 틈새 시장 응용도 제안됨.
          + Powerlight의 LinkedIn 페이지에는 광섬유를 통한 전력으로 크리스마스 장식을 구동하는 모습이 보임.
          + Powerlight는 원래 무선 전력 전송 회사로 창립되었으나, 고객들의 요청으로 유선을 통한 전력 전송을 시작함.
     * 광섬유를 통한 전력 전송 기술은 광전력을 전기로 효율적으로 변환함.
          + 일부는 이 기술이 단순히 광섬유와 함께 구리 케이블을 사용하는 것으로 오해함.
          + 600mW의 출력은 레이저 안전 등급 4에 속하며, 수백 미터 거리에서도 눈에 손상을 줄 수 있음을 지적함.
     * 이 기술의 가격이 매우 비싸다는 의견이 있으나, 산업용 제품으로서는 합리적인 가격이라는 반응도 있음.
          + 예를 들어, 단순한 버튼 하나에 80달러를 지불한 경험이 있는 사용자도 있음.
     * 과거 벨 연구소는 중앙 사무실에서 광섬유를 통해 전력을 공급받는 광섬유 전화기를 개발함.
          + 오디오 전송은 어렵지 않았지만 벨 소리를 만드는 것이 훨씬 어려웠음.
          + 전화기가 중앙 사무실에서 전력을 공급받는 것은 전통적인 방식이었음.
     * 샌프란시스코의 한 사용자는 전력이 완전히 나가도 자신의 광섬유 인터넷 서비스 제공업체인 sonic.net은 계속 작동했음을 경험함.
          + 이 회사의 네트워크는 전자 장비 없이 광학 분배기만을 사용하는 ""수동 광학 네트워크""임.
          + 샌프란시스코에서 샌호세까지 광섬유로 연결되어 있으며, 이 기술을 사용하지는 않지만 제한된 전력 요구에 대해 사용할 수 있음을 시사함.
     * 이 기술의 주요 응용 분야는 고전압 절연과 공통 모드 누설 면역성임.
          + 활성 고전압 프로브에 전력을 공급하는 데 사용될 수 있음을 상상할 수 있음.
     * POTS(Plain Old Telephone Service)처럼 외부 전력 없이도 랜드라인 전화에 전력을 공급하고 정전 시에도 작동할 수 있는지에 대한 질문이 있음.
     * 한 회사에서는 자체적으로 ""광섬유 전력"" 태양 전지를 개발함.
          + Broadcom과 같은 회사에서 비싼 가격에 판매하고 있지만, 500~600mW 전력 범위의 제품을 구매할 수 있음.
     * 데이터와 전력을 동일한 광섬유에서 서로 다른 파장으로 전송할 수 있는지에 대한 궁금증이 제기됨.
     * 전송 모듈에 대한 링크가 제공됨.
"
"https://news.hada.io/topic?id=12677","Fish 3.7.0 릴리즈 - Rust로 완전 재작성 하기전 마지막 C++ 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Fish 3.7.0 릴리즈 - Rust로 완전 재작성 하기전 마지막 C++ 릴리즈

     * 3.7 시리즈만 C++로 남으며, 그 뒤에는 Rust로 완전히 재작성 예정
     * History Pager 기능 향상: 일부 문자열 매칭, 검색어 자동 입력, 종료시 검색어를 커맨드라인에 복사
     * 명령 완성 및 Globbing 시 기능 향상. 특히 NFS 같은 느린 파일시스템에서
     * 멀티 키 시퀀스 입력시 특정 시간 동안만 대기하도록 설정 가능 fish_sequence_key_delay_ms
"
"https://news.hada.io/topic?id=12736","구글, 유료로 제공될 "고급" 버전의 Bard 작업중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글, 유료로 제공될 ""고급"" 버전의 Bard 작업중

     * Google이 '바드 어드밴스드(Bard Advanced)'라는 업그레이드된 버전을 개발 중
     * 이 서비스는 Google One의 유료 구독을 통해 제공될 예정
     * 개발자 Dylan Roussel이 X(옛 트위터)에서 공유한 정보에 따르면, 바드 어드밴스드는 구글의 새로운 대형 언어 모델(LLM)인 '제미니 울트라(Gemini Ultra)'에 의해 구동될 것
     * 현재 버전의 바드는 중간 등급인 '제미니 프로(Gemini Pro)'를 사용하는 반면, 바드 어드밴스드는 고급 수학 및 추론 기능을 갖춘 더 능력 있는 대형 언어 모델
     * 개발자 Bedros Pamboukian은 '고급' 계층을 위한 작업을 진행 중임을 시사하는 코드 문자열을 발견
     * Roussel은 사용자가 맞춤형 봇을 생성할 수 있는 '모토코(Motoko)'라는 코드명의 기능을 포함한 추가 업데이트를 발견하고 스크린샷을 공유했으나, 이 봇들을 공유할 수 있을지, 접근하기 위해 비용을 지불해야 할지는 아직 불분명함
     * 구글은 또한 AI를 사용하여 사용자가 바드에 제공하는 프롬프트를 확장하고 개선하는 '파워 업(power up)' 기능을 도입할 수도 있음
     * '갤러리(Gallery)' 섹션도 언급되어 있으며, 이는 사용자가 바드로 할 수 있는 다양한 주제를 탐색할 수 있게 할 것으로 추측됨
     * 스크린샷에 의해 드러난 다른 작은 변경 사항으로는 이미지 생성과 같이 바드가 현재 작업 중인 긴 작업을 추적할 수 있는 '작업(tasks)' 탭과 공유된 바드 프롬프트에 사용자 정의 배경을 추가할 수 있는 방법이 포함됨
     * 이러한 기능들이 공식적으로 언제, 또는 만약이 될지는 아직 알 수 없으며, 구글은 즉각적인 논평 요청에 응답하지 않음.
     * 구글은 바드를 실시간으로 질문에 응답하고 YouTube 동영상에 대한 질문에 답변할 수 있도록 하는 등 지난 몇 달 동안 여러 업그레이드를 진행함으로써 ChatGPT와 마이크로소프트 코파일럿과 같은 경쟁자들과의 경쟁을 유지하고자 함.

GN⁺의 의견

     * 구글이 인공지능 기술을 활용한 새로운 유료 서비스를 개발 중인 것은 AI 시장에서의 경쟁력을 강화하고자 하는 전략적 움직임으로 보임.
     * 바드 어드밴스드가 제공할 고급 수학 및 추론 기능은 사용자에게 더 정교하고 전문적인 작업 수행 능력을 제공할 것으로 기대됨.
     * 맞춤형 봇 생성과 같은 새로운 기능은 사용자 경험을 개인화하고 창의적인 활용을 가능하게 하여 AI 기술의 접근성과 유용성을 높일 것으로 예상됨.
"
"https://news.hada.io/topic?id=12698","아이폰용 물리적 키보드 'Clicks'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         아이폰용 물리적 키보드 'Clicks'

Clicks: 아이폰용 첫 번째 창작자 키보드 소개

     * Clicks는 아이폰용으로 제작된 첫 번째 창작자 키보드임.
     * 화면을 콘텐츠 제작에 활용하고, 사용자의 의견을 표현하며, 아이폰을 완전히 제어할 수 있는 기능 제공.
     * 아이폰 14 프로, 아이폰 15 프로 및 프로 맥스용 창립자 에디션이 현재 사용 가능함.

모든 아이폰에 맞는 키보드: Clicks

     * Clicks는 아이폰의 장점을 강화하여 더 많은 화면, 새로운 창작 방식, 사용자를 마치 초능력을 가진 것처럼 느끼게 하는 단축키를 제공함.

터치와 타이핑의 결합

     * Clicks는 아이폰의 기능을 확장하여 콘텐츠 제작 시 화면 공간을 최대화함.
     * 빠르고 정확한 타이핑을 위해 설계된 키보드로 사용자의 의견을 표현할 수 있음.
     * iOS 단축키와 음성 입력에 쉽게 접근할 수 있어 최상의 제어가 가능함.
     * 필요할 때는 컴팩트하고 가벼운 키보드를 추가하거나 항상 부착해둘 수 있음.

화면 크기 증가

     * 화면에서 키보드를 제거하여 앱과 콘텐츠를 위한 공간을 더 확보함.
     * Clicks를 사용하면 채팅, 브라우징, 라이브 스트리밍 등에 더 몰입할 수 있도록 화면 표시를 최대 50%까지 늘릴 수 있음.

바로 말하기

     * 실제 키를 사용하여 타이핑하는 느낌이 자연스러워 아이폰에서 더 많은 작업을 수행할 수 있음.
     * 영감이 떠오를 때 어디서든 긴 노트를 작성하거나 문서를 편집하고 아이디어를 즉시 표현할 수 있음.

버튼의 중요성

     * 웹사이트를 스크롤하거나 스포트라이트를 실행하고 홈 화면으로 돌아가는 등 iOS의 전체 기능을 활용할 수 있는 키보드 단축키와 전용 키를 통해 아이폰을 완벽하게 제어할 수 있음.

창립자 에디션 사용 가능

     * Clicks 창립자 에디션은 $139 USD부터 시작하며, 창립자 배지, 일련 번호, 독점 VIP 지원이 포함된 한정판으로 BumbleBee와 London Sky 색상이 제공됨.

버튼이 돌아왔다

     * Clicks는 많은 아이폰 사용자들이 기다려온 제품으로, 키보드와 아이폰의 장점을 결합함.
     * 실제 사용자인 CrackBerry Kevin은 Clicks를 사용한 후 몇 주가 지나면 근육 기억이 생겨 아이폰에서 Clicks를 떼어내고 싶지 않을 것이라고 말함.

GN⁺의 의견

     * Clicks는 아이폰 사용자들에게 새로운 차원의 편리함과 효율성을 제공하는 혁신적인 액세서리임.
     * 특히 콘텐츠 제작자나 자주 긴 텍스트를 입력해야 하는 사용자들에게 큰 도움이 될 것으로 보임.
     * 이 제품은 아이폰의 사용성을 향상시키는 동시에 모바일 기기와 물리적 키보드의 결합이라는 새로운 트렌드를 선도할 가능성이 있음.

        Hacker News 의견

     * 한 사용자는 새로운 스마트폰 케이스에 대한 복잡한 감정을 표현함. 이 케이스는 휴대폰을 매우 크게 만들 것 같지만, 블랙베리 키보드의 정확성을 그리워함. 조정 가능한 맥세이프 부착 키보드를 선호하며, SSH에는 큰 도움이 되지 않을 것 같다고 언급함. 가격이 $50이라면 이미 주문했을 것이라고 덧붙임.
     * 또 다른 사용자는 뒤로 밀어서 나오는 풍경 모드 키보드가 있는 케이스를 구매할 것을 진지하게 고려할 것이라고 말함.
     * 한 사용자는 물리적 키보드가 있는 스마트폰을 원하지만, 현재 제안된 디자인은 너무 길고 타이핑 경험이 즐겁지 않을 것이라고 생각함. 수평 방향으로 사용할 수 있는 슬라이드 아웃 키보드가 최선의 방법이라고 언급함.
     * 다른 사용자는 Textblade라는 작고 멀티터치 키가 있는 모바일 키보드가 대량 생산되지 않은 것이 아쉽다고 언급함.
     * 한 사용자는 삼성 갤럭시 부착 키보드를 아이폰에서 사용해 보려고 구매했지만, 블루투스가 아니라 화면 위에 올려놓고 사용하는 방식이었으며, 아이폰에서는 작동하지 않았다고 경험을 공유함.
     * 물리적 키보드를 선호하는 한 사용자는 슬라이드 아웃 키보드를 더 좋아하며, 일반 블루투스 키보드를 계속 사용할 것이라고 말함.
     * 한 사용자는 아이폰에서 오타가 자주 발생하며, 스마트폰 디자인이 보수적으로 변한 것이 아쉽다고 언급함. 개인적인 디바이스가 더 다양해야 한다고 생각함.
     * BB Q10의 키보드를 사용하는 Fairberry에 대해 언급하는 사용자가 있으며, 관심 있는 사람에게 몇 개를 우편으로 보낼 수 있다고 제안함.
     * 한 사용자는 제안된 키보드가 너무 길고, 기존의 견고한 케이스를 사용할 수 없게 되며, 떨어뜨리거나 도난당할 위험이 높아질 것이라고 우려함. 또한, 집에서만 사용하려 해도 번거로움이 있으며, 자주 연결하고 분리하는 과정에서 라이트닝 포트가 손상될 수 있다고 지적함.
     * 마지막으로 한 사용자는 마이크 라자리디스가 자신이 이 모든 것을 발명했다고 설명하려고 하지만, 아무도 이해하지 못하는 상황을 묘사함.
"
"https://news.hada.io/topic?id=12647","안드로이드 개발자들이 더 이상 윈도우즈 USB 드라이버를 필요로 하지 않는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              안드로이드 개발자들이 더 이상 윈도우즈 USB 드라이버를 필요로 하지 않는 이유

안드로이드 개발자들이 더 이상 윈도우 USB 드라이버를 필요로 하지 않는 이유

     * 초기 안드로이드 플랫폼에서 개발자들은 리눅스나 맥 OS X에서 USB 케이블을 통해 장치를 연결할 수 있었으나, 윈도우 사용자들은 드라이버를 찾아 설치해야 했음.
     * 현재는 드라이버가 더 이상 필요하지 않음.

USB 드라이버/OS 101

     * USB 장치를 포트에 연결하면, 운영 체제는 USB 디스크립터 계층을 검사하여 인터페이스에 대한 드라이버를 로드해야 함.
     * 대부분의 USB 장치는 기본 제공되는 'Device Class' 드라이버로 자동으로 작동하도록 운영 체제에 포함되어 있음
     * 윈도우는 내장된 'Device Class' 드라이버를 찾을 수 없거나 더 나은 드라이버가 있으면 사용자가 설치한 드라이버를 로드함

왜 안 됐었나

     * 드라이버를 찾을 수 없으면 리눅스는 usbfs를, 맥 OS는 IOKit을 로드하여 사용자 공간 프로그램이 장치에 접근할 수 있게 함.
     * 윈도우는 오류를 보고하고 드라이버를 로드하지 않아 안드로이드 장치에 접근할 수 없었음.

안드로이드 드라이버로 작동한 이유

     * 드라이버가 설치될 때 발생하는 작업을 이해하기 위해 구글 USB 드라이버의 '뇌'인 android_winusb.inf를 검사함.
     * WinUSB는 리눅스의 usbfs와 맥 OS의 IOKit과 유사한 USB 드라이버로, 사용자 공간 프로그램이 인터페이스를 열거하고 엔드포인트로부터 읽고 쓸 수 있게 함.

안드로이드 장치가 더 이상 윈도우 드라이버를 필요로 하지 않는 이유

     * 이전 방법에는 명백한 결함이 있었음. 안드로이드 장치의 VID/PID가 목록에 없으면 winusb가 로드되지 않음.
     * 윈도우 8은 INF 파일보다 더 나은 방법으로 인터페이스에 필요한 드라이버를 장치에 직접 요청함.
     * 장치가 Microsoft OS 디스크립터(MOD)와 호환되면, 윈도우는 확장된 호환 ID OS 기능 디스크립터를 요청함.
     * 이를 통해 winusb.sys가 로드되고, 사용자 공간 실행 파일인 adb가 장치를 열고 인터페이스를 요구하며 개발자가 작업을 시작할 수 있음

어떤 장치들이 Microsoft OS 디스크립터를 지원하는가

     * 개인적으로 소유한 픽셀 장치들을 통해 MOD 지원이 픽셀 2(2017)와 픽셀 3a(2019) 사이에 시작된 것으로 보임

확장된 속성 OS 기능 설명자

     * 픽셀 8과 같은 더 최근의 장치들은 확장된 속성 OS 기능 디스크립터를 가지고 있으며, 이는 GUID, 도움말 페이지, URL, 심지어 아이콘까지 포함할 수 있음.

GN⁺의 의견

     * 이 글의 가장 중요한 점은 안드로이드 장치가 이제 윈도우에서 별도의 드라이버 설치 없이도 개발에 사용될 수 있다는 것임.
     * Microsoft OS 디스크립터와 확장된 호환 ID OS 기능 디스크립터의 도입으로 사용자 경험이 크게 개선되었음.
     * 이러한 변화는 안드로이드 개발자들에게 편의성을 제공하고, 개발 환경의 접근성을 높이는 데 기여함.

        Hacker News 의견

     * ADB(Android Debug Bridge)에 대한 사랑
          + ADB는 매우 유용한 도구로, VPN을 통한 포트 재라우팅도 가능하다.
          + 안드로이드 개발자가 아니어도 스위스 아미 나이프 같은 존재이며, 안드로이드를 선호하는 큰 이유 중 하나다.
          + 업무 프로필을 통해 업무 관련 자료와 개인 정보 침해 요소를 분리할 수 있어 두 번째 전화기가 필요 없음.
     * Pixel 기기의 MOD(Modern Operating Devices) 지원 시작 시기
          + 개인적인 Pixel 컬렉션을 통해 Pixel 2(2017)와 Pixel 3a(2019) 사이에 MOD 지원이 시작된 것으로 보인다.
          + Pixel 3에도 적용되었을 것이며, Android 11을 지원하는 모든 CTS(Compatibility Test Suite)-준수 기기에 적용됨.
          + OEM은 USB HAL에서 간단한 값을 설정하여 CTS 테스트를 통과해야 함.
     * Windows Precision Touchpad 드라이버
          + Bingxing Wang이 개발한 Apple MacBook/Magic Trackpad 2용 Windows Precision Touchpad 구현체에 대한 언급.
     * ADB 드라이버의 발전
          + 과거에는 Windows가 새 기기마다 .inf 드라이버 파일을 설치해야 했으나, Windows 8 이후 버전부터는 기기가 Microsoft OS Descriptors를 통해 필요한 드라이버를 알려줌.
          + 이로 인해 사용자 경험이 개선되었으며, 개발자뿐만 아니라 더 나은 안드로이드 경험을 원하는 사용자에게도 중요함.
     * Windows의 USB 드라이버 문제
          + Windows에서는 USB 드라이버가 혼란스럽고 때로 위험할 수 있음.
          + 일부 학생들이 Linux에서는 잘 작동하는 Arduino 클론을 Windows에서 사용할 수 없는 경우를 목격함.
          + Windows가 ""가짜""로 판단되는 기기를 무력화시키는 드라이버를 자동 설치하는 문제가 있어, 저장 장치 외의 것을 Windows 기기에 연결하는 것은 마지막 수단으로 여겨짐.
     * Microsoft 전용 USB 설명자 추가에 대한 비판
          + 폰 제조업체가 Microsoft 전용 USB 설명자를 추가해야 하는 것에 대한 비판.
          + Windows가 Linux나 macOS처럼 표준화된 사용자 공간 인터페이스로 대체하는 대신 Microsoft 전용 기능을 요구하는 것은 비합리적임.
     * ADB 문제 해결 경험
          + 최근에 Lenovo M7을 사용하여 마법 거울 프로젝트를 진행하면서 ADB 문제에 직면함.
          + 관련 Stack Overflow 글을 모두 찾아보고 시도했지만 성공하지 못했으며, 이 문제가 해결되었다는 말을 듣고 의아함을 표함.
     * HID 프로토콜 사용 경험
          + USB 연결 장치에서 raw HID 프로토콜을 사용했으며, 모든 버전의 Windows에서 잘 작동함.
          + 모든 요구 사항에 적합하지는 않지만 특정 경우에는 잘 맞음.
"
"https://news.hada.io/topic?id=12655","2023년 소프트웨어 엔지니어 급여 통계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2023년 소프트웨어 엔지니어 급여 통계

     * 전세계 15만명 이상의 급여 데이터 기반
       → 급여,주식,상여금을 포함한 연간 총 보상(Compensation) 금액

기술 레벨별 회사 연봉 순위

     * 초급 엔지니어 (I, 0~2년): Jane Street $325k > Figma $240.5k > IMC $240k > Roblox $238k > Databricks $230.5k > LinkedIn $220.5k > Plaid $220k
     * 엔지니어 (II, 2~5+년): Databricks $380k > IMC $350k > Roblox $350k > Rippling $330k > Plaid $330k > Airtable $322k > Netflix $320k
     * 시니어 엔지니어 (III, 5+년): Databricks $584.25k > Netflix $535k > Two Sigma $500k > Coupang $492k > Roblox $490k > Snowflake $472.5k > Plaid $465k
     * 스탭 엔지니어 (IV, 10+년): OpenAI $925k > Coupang $870k > LinkedIn $708.1k > Stripe $700k > Plaid $690k > Snowflake $650k > Hudson River Trading $640k
     * 수석 엔지니어 (V, 15+년): Facebook $1.02m > Stripe $940.7k > Pinterest $870k > Uber $830k > Apple $825k > Cruise $819.6k > Airbnb $810k

기타 직군들

     * 소프트웨어 엔지니어링 매니저: Databricks $900k > Netflix $785k > Chai Research $750k > Snowflake $683k > Discord $670k
     * 프로덕트 매니저: Coinbase $830k > Airbnb $659.5k > Zscaler $590k > Netflix $550k > Stripe $491k
     * 프로덕트 디자이너: Stripe $367k > Coinbase $350k > DoorDash $305k > Apple $301k > Dropbox $298.85k
     * 하드웨어 엔지니어: Broadcom $416.25k > Facebook $359.186k > Waymo $358k > Verily $335k > Cruise $334k
     * 데이터 사이언티스트: Netflix $500k > Hudson River Trading $500k > Advent International $500k > Cruise $446.5k > Roblox $440k
     * 급여가 높은 도시(중간값)
          + 미국 : 샌프란시스코 베이 $249k > 시애틀 $225k > 뉴욕 $185k > 샌디에고 $175k > 포틀랜드 $169k > 로스앤젤레스 $168.4k > 오스틴 $167k > 보스턴 $160k > 덴버 및 볼더 $154k > 북부 버지니아 워싱턴 DC $148.6k
          + 유럽 : 취리히, 스위스: $180,837 > 로잔, 스위스: $127,260 > 런던, 영국: $117,101 > 제네바, 스위스: $113,652 > 더블린, 아일랜드: $111,996 > 룩셈부르크, 룩셈부르크: $106,945 > 암스테르담, 네덜란드: $102,009 > 코펜하겐, 덴마크: $96,909 > 케임브리지, 영국: $94,362 > 베를린, 독일: $91,265
          + 그외 : 텔아비브, 이스라엘: $137,916 > 밴쿠버, 캐나다: $115,656 > 시드니, 오스트레일리아: $110,237 > 아부다비, 아랍에미리트: $99,000 > 싱가포르: $90,410 > 베이징, 중국: $90,000 > 오클랜드, 뉴질랜드: $81,332 > 서울, 대한민국: $75,000 > 신주, 대만: $69,021 > 홍콩: $63,250

   협상 및 서비스 트렌드 (Negotiation & Services Trends)
     * 가장 높은 급여 증가: $400k (+41% 초기 제안 대비)
     * 가장 높은 레벨: CEO (기본 급여, 주식 옵션, 보너스 증가, 업데이트된 주식 부여 일정 및 개선된 황금 낙하산)
          + ""황금 낙하산""은 주로 고위 경영진이 회사를 떠날 때 받는 큰 금전적 보상을 의미 (퇴직 보너스, 스탁옵션, 연금, 추가 보너스 등)
     * 가장 인기 있는 회사: Meta (90건 이상의 협상)
     * 가장 높은 코치 팁: $3,500
     * 협상 건수: 900건 이상
     * levels.fyi는 이번 해에 900명 이상의 사람들이 직업 제안 협상을 도와주었고, 700명 이상의 이력서 개선에 도움을 주었음
     * 평균 급여 증가율:
          + 중급 엔지니어: +12%
          + 시니어 엔지니어: +20%
          + 스탭 엔지니어: +15%
          + 중급 PM: +9%
          + 시니어 PM: +12%
          + 스탭 PM: +8%
     * 새로운 협상 국가: 브라질, 이탈리아, 일본, 싱가포르, 스페인, 영국

   https://www.levels.fyi/2024/
   2024년도 나왔네요 (xguru님께 정리를 부탁하며 ㅌㅌㅌ...)

   2024년 소프트웨어 엔지니어 급여 통계
   알려주셔서 고맙습니다. ㅎㅎ

   10여년전의 구글 연봉과 비교해보니 엄청 오르긴 했네요 ㅎㅎ
   https://speakerdeck.com/jongman/oegugin-falsedongjayi-salm?slide=38

   연봉 ㄷㄷ

   미국 연봉은 저세상이네요. ㄷㄷ

   전체적으로 개발자 급여가 하락세를 보였는데 역시 돈이 돈을 만들고 빽이 빽을 만드니 저런 중간값이 가능한가 보군요.
   참고로 현재 SI 기준 고급(대졸 10년+ 기준)의 단가는 월 650만원입니다. 2020년으로 회귀한 셈이죠.

   서울 $75,000가...환률 적용하면 1억정도인데, 그게 '중간값'이라면......( ``)

   누가 제 연봉 가져가고있죠? 당장 돌려주세요...

   심란하네요 글내려주세요

   제 75k 연봉은 누가 대신 받나요(...)

   급여미쳤네요 ㄷㄷ

   2022년 글에 2023년 버전 나왔다고 알려주셔서 정리해 봅니다 ㅎㅎ
   시니어 엔지니어 순위에 쿠팡이 등장했네요.

   2022년 소프트웨어 엔지니어 급여 통계
   2021년 소프트웨어 엔지니어 급여 통계
"
"https://news.hada.io/topic?id=12734","원조 "Age of Empires 2" 개발자, 어셈블리 코드 사용에 대해 언급","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              원조 ""Age of Empires 2"" 개발자, 어셈블리 코드 사용에 대해 언급

AoE는 어셈블리로 작성되었나요? - 이것이 사실인가요?!

     * AoE와 AoK의 어셈블리 코드 작성: 약 13,000줄의 x86 32비트 어셈블리 코드가 작성됨. 대부분은 '그리기 코어'에 해당하는 약 11,500줄로, SLP 스프라이트를 다양한 방식으로 그림.
     * 어셈블리 코드의 컴파일: Microsoft Macro Assembler 6.1을 사용하여 .asm 파일을 .obj 파일로 ""컴파일"".
     * C++ 코드 내 인라인 어셈블리: 컴파일러가 '인라인 어셈블리'를 지원하여 함수 내에 어셈블리 코드 블록을 __asm { } 키워드로 추가.
     * 그리기 코어의 성능 향상: 어셈블리를 사용한 그리기 코어는 C++ 참조 구현보다 약 10배 빠른 스프라이트 그리기 속도를 제공.
     * 어셈블리 코드의 기술적 설계: 캐시 아키텍처와 UV 파이프를 고려한 설계로, 펜티엄 프로세서의 특성을 활용.
     * AoK:HD 에디션에서의 어셈블리 코드: AoK:HD 에디션(32비트 게임)에서도 어셈블리 코드 사용.
     * Definitive Editions에서의 C++로의 재작성: 64비트 프로그램인 Definitive Editions에서 어셈블리 함수를 C++로 재작성.

AoE 커뮤니티 및 리소스

     * 라이브 스트림: Twitch 및 Facebook에서 다양한 언어로 진행되는 AoE 관련 라이브 스트림 목록.
     * 온라인 플레이: Steam과 Microsoft Store에서 AoE2 Definitive Edition을 포함한 다양한 버전의 게임 플레이 가능.
     * 현재 패치: 2023년 7월 26일에 업데이트된 패치 정보 제공.
     * 토너먼트 및 이벤트: AoEZone, AoE2 Liquipedia, 이벤트 캘린더를 통한 토너먼트 정보 제공.
     * 커뮤니티 사이트: 공식 Age of Empires 페이지, 포럼, Discord, AoK Heaven 등 다양한 커뮤니티 사이트 링크.
     * 유닛 및 건물 통계: 유닛 및 카운터 정보, 버그 수정, 게임 팁, 패치 정보 등을 제공하는 위키 및 자료 링크.
     * YouTube 채널: 공식 채널 및 유명 AoE2 YouTubers 목록.

GN⁺의 의견

     * 어셈블리 코드의 중요성: AoE 시리즈의 초기 버전에서 어셈블리 코드가 게임의 성능에 큰 영향을 미쳤음. 특히 그래픽 처리에 있어서 현대의 고급 언어로는 달성하기 어려운 최적화를 구현했음.
     * 기술 발전의 영향: 시간이 지나면서 64비트 컴파일러의 발전과 멀티코어 프로세싱의 도입으로 어셈블리 코드의 필요성이 감소함. 이는 프로그래밍 언어와 하드웨어의 발전이 소프트웨어 개발에 어떻게 영향을 미치는지를 보여줌.
     * 커뮤니티의 역할: AoE 커뮤니티는 게임의 지속적인 인기와 발전에 중요한 역할을 함. 다양한 리소스와 토론을 통해 팬들이 게임에 대한 열정을 공유하고 지식을 나눌 수 있는 플랫폼을 제공함.

        Hacker News 의견

     * 한 해커뉴스 사용자는 1999-2000년에 PSX에서 PC로 코나미 게임을 포팅한 경험을 공유했다. C언어로 작성된 코드에는 인라인 어셈블리가 포함된 #ifdef가 많았으며, 원본 C 코드가 유지되었다고 한다. 이 원본 C 코드가 포팅 작업에 큰 도움이 되었다고 한다. 또한, 인텔의 카트마이 프로세서를 위한 소프트웨어 개발 작업에서 SIMD 명령어를 사용한 경험과 어셈블리 최적화 작업에 대해 언급했다. 이 과정에서 Intel의 VTune이 큰 도움이 되었다고 한다. 그러나 어셈블리로 작성한 코드가 컴파일러가 생성한 코드보다 느린 경우도 있었다고 회상했다.
     * 또 다른 사용자는 현재 베를린에서 진행 중인 'Age of Empires 2' (AoE2) 게임의 대규모 토너먼트인 NAC5에 대해 언급하며, 관련 링크를 공유했다.
     * 한 개발자 인터뷰를 인용하여, 게임을 출시하기 전에 패치가 필요하다는 것을 알고 있다면 게임을 출시해서는 안 된다는 의견을 나타냈다.
     * 'Age of Empires'의 속도 향상 기술 중 하나가 iD 소프트웨어 프로그래머이자 최적화 전문가인 마이클 아브라쉬와의 점심 식사 중에 논의되었다는 사실을 언급하며, 인터넷으로 인해 잃어버린 자유로운 상호작용에 대해 아쉬움을 표현했다.
     * 어셈블리를 사용한 그래픽 코어의 경우 C++에 비해 약 10배의 스프라이트 그리기 속도 향상을 이루었다는 놀라운 사실을 공유했다.
     * 마이클 아브라쉬가 그래픽 혁신이 일어난 곳이라면 어디든 등장하는 것 같다는 의견을 표현했다.
     * 한 사용자는 'Age of Empires 2: Definitive Edition'이 왜 Wine에서 성능이 떨어지는지 이해할 기회가 될 수도 있다고 언급했다.
     * 'Age of Empires 2: Definitive Edition'은 게임 코드 자체는 아니지만, 실행 파일이 실행 시간에 게임 코드를 압축 해제하는 핸드라이팅 어셈블리를 여전히 포함하고 있다고 한다. 이로 인해 모든 코드가 읽기, 쓰기, 실행이 가능한 상태(RWX)로 남아 있어 보안에 매우 취약하다고 지적했다.
     * 보랜드의 역사에 대해 읽고 있는 한 사용자는 터보 파스칼 컴파일러가 대부분 어셈블리로 작성되었으며, 델파이 1.0에서도 사용되었다고 한다. 보랜드 내에서 아무도 코드에 큰 변화를 줄 수 없었기 때문에 결국 델파이 2.0을 위해 코드를 다시 작성했다고 한다. 어셈블리 언어로 복잡한 CPU를 위한 소프트웨어를 작성한 프로그래머들에게는 독특한 특성이 있다고 생각한다고 말했다.
"
"https://news.hada.io/topic?id=12707","애플 텍스트 에디터를 9년간 혼자 개발한 개발자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       애플 텍스트 에디터를 9년간 혼자 개발한 개발자

""Paper"" 텍스트 편집기 솔로 개발자의 9년

     * 2015년, 일반적인 풀스택 웹 개발자로서 Apple 개발 세계와는 거리가 멀었음.
     * Mac을 사용하며 독립 개발자들의 앱에 매력을 느껴, 간단하고 우아한 Markdown 편집기인 iA Writer에 영감을 받아 비슷한 앱을 만들기로 결정함.
     * Mac용 네이티브 텍스트 편집기 개발을 위해 Xcode, AppKit, Objective-C 등 새로운 기술 스택 학습 시작.
     * 앱 이름을 Paper로 정하고, 극단적인 미니멀리즘을 추구하여 편집기를 단순한 직사각형으로 디자인함.
     * 2017년 Mac 앱 스토어에 Mac 앱 출시, 2019년에는 iOS 앱 출시.

네이티브 앱을 선택한 이유

     * Electron 앱 대신 네이티브 앱을 선택한 이유는 최상의 사용자 경험 제공을 목표로 했기 때문.
     * 네이티브 앱은 가볍고 빠르며, 텍스트와 관련된 독특한 기능을 구현할 수 있는 더 많은 방법을 제공함.

Objective-C를 선택한 이유

     * 2015년 Swift가 초기 단계였을 때, Objective-C와 Swift로 각각 빈 Xcode 프로젝트를 컴파일하여 .app 패키지를 비교함.
     * Swift 앱은 Swift 런타임이 포함되어 약 5MB였고, Objective-C 앱은 매우 가벼운 100KB 정도였음.
     * 더 가벼운 배포 가능한 앱을 원했기 때문에 Objective-C를 선택함.

서드파티 의존성

     * Paper는 서드파티 의존성이 없음.
     * 모든 것을 직접 구축하여 경쟁자들에게 약간의 우위를 점함.
     * 예를 들어, Paper의 Markdown 파싱 엔진은 맞춤형으로, 전통적인 Markdown 편집기보다 적은 Markdown 구문을 지원함.

비전

     * Paper의 초기 비전은 iA Writer의 핵심 기능을 가지되, 더욱 우아하고 미니멀한 패키지로 만드는 것이었음.
     * 사용자의 주의를 산만하게 하는 요소를 최소화하여 집중력을 높이는 데 초점을 맞춤.
     * 시간이 지나면서 Paper가 미니멀리즘을 유지하면서도 점진적으로 기능을 추가하는 방식으로 시장에서의 위치를 찾아감.

아키텍처

     * Paper의 코드는 두 가지 범위로 구성됨: 애플리케이션 범위와 문서 범위.
     * 각 범위에 대해 스토리보드를 정의하여 뷰와 위젯을 설명하고 범위 내 모듈을 결합함.
     * 모듈은 앱 내 기능의 일부를 담당하는 Objective-C 클래스로, 기능을 특정 기능과 관련된 하나의 장소에 그룹화함.

크로스플랫폼 코드

     * AppKit과 UIKit은 유사하면서도 많은 부분에서 다름.
     * 차이점을 해결하기 위해 Objective-C의 매크로와 카테고리 기능을 사용함.

디버깅

     * Apple 프레임워크의 경우 코드 대신 문서를 읽어야 하며, 브레이크포인트를 사용하여 컴파일된 스택 트레이스를 분석함.

유료 기능

     * 2015-17년에는 구독이 아직 널리 퍼지지 않았고, 앱 스토어에서는 일회성 결제가 일반적이었음.
     * 사용자 친화적인 방식으로 유료 기능을 제공하고자 하여, 기능적이 아닌 화장적 업그레이드만 유료로 제공함.

가격 책정

     * 처음에는 두 세트의 Pro 기능에 대해 각각 5달러의 일회성 결제로 시작함.
     * 현재는 월 10달러 또는 평생 100달러의 단일 세트로 가격을 책정함.
     * 가격 실험을 통해 사용자들이 알려지지 않은 개발자의 앱에 최대 100달러까지 지불할 의사가 있음을 발견함.

까다로운 부분

     * 텍스트 편집기는 복잡하며, OS 업데이트마다 새로운 텍스트 삽입, 업데이트, 상호 작용 방법이 추가됨.

기믹

     * Things 앱에서 영감을 받은 창 크기 조절 바운스와 같은 즐거운 기능을 추가함.

GN⁺의 의견:

    1. 혁신적인 접근: 개발자는 네이티브 앱 개발에 대한 경험이 없음에도 불구하고, 사용자 경험을 최우선으로 고려하여 Paper를 개발했다는 점이 인상적임. 이는 소프트웨어 개발에서 사용자 중심의 설계가 얼마나 중요한지를 보여줌.
    2. 학습과 성장: 새로운 기술 스택을 배우고 이를 통해 제품을 만들어낸 과정은 초급 소프트웨어 엔지니어에게도 영감을 줄 수 있음. 이는 지속적인 학습과 도전이 개발자로서 성장하는 데 필수적임을 강조함.
    3. 사용자 경험의 중요성: Paper의 성공적인 요소 중 하나는 사용자 경험에 대한 세심한 주의와 미니멀리즘에 대한 집중임. 이는 사용자가 실제로 원하는 것을 이해하고 이를 제품에 반영하는 것이 얼마나 중요한지를 보여줌.

   대부분의 애플 개발 문서들이 불친절해서 문서를 잘 뒤져봐야하긴하는데...또 정보가 부족하면 SDK 인터페이스를 뒤져야하는 상황이 많아서...다른의미로 존경스럽네요.

   화장적 업그레이드가 뭔가 했는데 원문이 visual changes네요.
   화장적이다 라는 단어를 쓰나요? 저는 처음 봤어요.

   neo 가 ai bot 이다보니 기계적인 번역이 됐나보네요ㅋㅋ

   원문은 cosmetic upgrade네요

   그럼 미적 업그레이드 정도가 더 괜찮아보이는데...

   롤모델이 될말한 개발자네요

        Hacker News 의견

     * ""주변부의 세심한 부분들이야말로 마법과 같음""
          + 사용자들은 처음에는 앱의 세밀한 부분들을 눈치채지 못할 수 있지만, 시간이 지나면서 그러한 부분들을 발견하게 됨.
          + 이러한 세심한 추가 기능들이 사용자가 앱을 단순히 좋아하는 것에서 사랑하게 되는 요소로 작용함.
          + 개발자가 사용자를 이해하고 있으며, 제품이 잘 관리되고 있다는 느낌을 줌.
          + Procreate 앱을 예로 들며, 사용자 인터페이스(UI)를 간결하게 만들면서도 발견할 수 있는 숨겨진 기능들이 많음을 칭찬함.
     * ""iOS 앱 개발자로서 15년 동안의 경험을 바탕으로 한 훌륭한 글""
          + 네이티브 개발을 고수하고, 제3자 의존성을 배제하며, Objective-C를 사용한 결정들이 좋았음을 언급함.
          + Swift로 전환했지만, 때때로 Objective-C의 장점이 그리워짐.
          + 앱을 다운로드하여 사용해보고, 메뉴 바에 있는 작은 힌트들이 마음에 들었다고 함.
     * ""Apple 플랫폼에서의 저/무 의존성 개발 가능성""
          + AppKit/UIKit의 풍부함과 깊이 덕분에 제3자 요소 없이도 완성도 높은 앱을 실용적으로 만들 수 있음.
          + 다른 프레임워크들, 예를 들어 Qt와 비교해도 Apple의 프레임워크가 경쟁력이 있음을 언급함.
     * ""Swift의 발전과 플랫폼 내장 또는 바이너리 최적화에 대한 추측""
          + Swift 5부터 ABI(Application Binary Interface) 안정화가 이루어짐.
          + 2014년부터 Swift만 사용하기로 한 결정이 잘 작동하고 있음을 밝힘.
          + SwiftUI에 대해서는 아직 UIKit/AppKit를 대체할 만큼 발전해야 할 부분이 많다고 생각함.
     * ""의존성 선택에 대한 불신과 학습의 중요성""
          + 코드를 작성하기 전에 외부 패키지와 라이브러리를 추가하는 것에 대한 반감을 표현함.
          + Apple 생태계의 단점을 긍정적인 학습 경험으로 바꾼 글쓴이의 접근 방식을 높이 평가함.
     * ""AppKit과 Mac 개발에 대한 학습 자료와 추천 요청""
          + Mac 개발에 대한 정보를 찾는 데 어려움을 겪고 있음을 언급함.
          + Apple의 최신 문서가 부족하고, 오래된 문서도 Swift 업데이트가 되지 않아 Xcode 자동완성에 의존해야 하는 상황을 설명함.
     * ""세부 사항에 대한 주의와 장인정신에 대한 존경""
          + 글쓴이의 세심한 주의와 장인정신을 높이 평가하며, 글이 아름답고 영감을 준다고 칭찬함.
     * ""회전하여 실행 취소하는 제스처에 대한 흥미로운 언급""
          + 영화 ""닥터 스트레인지""의 주인공이 시간을 되돌리고 앞으로 돌리는 장면을 연상시키는 제스처라고 언급함.
     * ""블로그와 앱의 미니멀리즘에 대한 칭찬""
          + 자신이 만든 앱을 사용하며 느끼는 기쁨을 표현하고, vim-motions이나 Neovim 사용 시 비슷한 감정을 느낀다고 함.
     * ""Apple 개발 생태계에서 SDK 코드에 대한 접근 부족에 대한 놀라움""
          + 어셈블리 코드를 직접 봐야 한다는 사실에 대해 의아함을 표현하며, 이에 대한 확인을 요청함.
"
"https://news.hada.io/topic?id=12733","Rocket - Rust용 웹 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Rocket - Rust용 웹 프레임워크

     * 빠르고, type-safe하고, secure 한 웹앱을 쉽게 작성 가능
     * 쉬운 Form 핸들링, 직관적인 Routing 처리, 동적 파라미터 파싱
     * 템플릿 기능 내장, 손쉬운 쿠키 처리, 웹소켓 + 스트림 지원
     * ORM agnostic 데이터베이스 지원
"
"https://news.hada.io/topic?id=12670","GitHub Copilot Chat 이제 조직/개인 누구나 사용 가능 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GitHub Copilot Chat 이제 조직/개인 누구나 사용 가능

     * 모든 GitHub Copilot 사용자가 Visual Studio Code 및 Visual Studio 에서 이용 가능
     * GPT-4를 이용하여 개발자 시나리오에 알맞게 최적화된 컨텍스트 인식 AI 비서
     * 프로그래밍 언어간 번역, 복잡한 코딩 컨셉이나 보안 취약점 등까지 IDE내에서 자연어로 물어보고 대답을 즉시 받을 수 있음

   원래도 사용가능했던거같은데 조직에선 사용못했던건가요?

   Organizations 단위나 Enterprises 단위로 결제해서 그 안에 속해 있는 사람들이 사용하는 기능이 이번에 추가 됐다는 내용 같습니다.
   저희 조직도 개별로 결제해서 사용하다가 이번에 이 기능 생기고 통합 결제 방식으로 바꿨습니다.

   아하 감사합니다.
"
"https://news.hada.io/topic?id=12730","호주의 "Bluey"가 어린이 엔터테인먼트를 정복한 방법 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    호주의 ""Bluey""가 어린이 엔터테인먼트를 정복한 방법

     * 'Bluey'는 호주의 애니메이션 시리즈로, 브리즈번에 사는 가축 개인 블루 힐러 가족의 일상을 그린다.
     * 2018년 호주에서 처음 방영된 이후 60개국에 수출되었으며, 영국과 중국에서도 인기를 끌고 있다.
     * 미국에서는 디즈니+를 통해 스트리밍되며, 2020년 12월 초에는 모든 장르 중 가장 많이 스트리밍된 쇼였다.

'Bluey'의 글로벌 히트

     * 'Bluey'는 전통적인 만화책 프랜차이즈나 고급 컴퓨터 생성 이미지(CGI)가 지배하는 경쟁적인 장르에서 세계적인 히트작이 되었다.
     * 이 시리즈는 부모와 아이들 모두에게 매력적인 스토리와 스크립트로 인기를 얻고 있다.
     * 호주의 재무장관 Jim Chalmers는 'Bluey'의 성공을 호주의 국가적 자부심으로 여기며, 호주에 대한 첫 인상으로 'Bluey'를 배우는 세대가 있을 것이라고 말한다.

'Bluey'의 창작 배경

     * 'Bluey'는 Joe Brumm이라는 애니메이터가 영국에서 'Peppa Pig'와 같은 어린이 프로그램 작업 후 호주로 돌아와 가족과 함께 만든 작품이다.
     * Brumm은 자신의 부모로서의 경험을 바탕으로 스토리를 만들었으며, 어린이들이 상자와 버블 랩을 가지고 모험을 하는 등의 일상적인 이야기를 담고 있다.

'Bluey'의 애니메이션 스타일

     * 'Bluey'의 애니메이션 스타일은 손으로 그린 듯한 느낌을 주며, 고급 CGI 기반 쇼들이 지배하는 어린이 엔터테인먼트와 차별화된다.
     * 이러한 접근 방식은 코로나19, 갈등, 기후 변화로 정의되는 시대에 긍정적이고 감정적인 이야기가 돋보이게 한다.

블루 힐러 견종의 역사

     * 블루 힐러 견종은 1800년대에 호주의 넓은 농장에서 소를 관리할 수 있는 개가 필요하여 탄생했다.
     * 이 견종은 레드나 블루 색상으로 나타나며, 호주 원주민인 딩고의 일부 유전자를 가지고 있다.

'Bluey'의 상업적 성공

     * 'Bluey'는 1,000개 이상의 상품을 만들어냈으며, 책, 인형, 치약 등 다양한 제품에 등장한다.
     * 비디오 게임이 출시되었고, 영국에서는 무대 공연으로도 만들어졌다.
     * 'Bluey'는 호주에서 실제로 1위 앨범을 기록하기도 했다.

호주 어린이 쇼의 국제적 성공

     * 'Bluey'는 호주의 다른 어린이 프로그램들, 예를 들어 'Skippy the Bush Kangaroo', 'Bananas in Pyjamas', 'Round the Twist', 'Hi-5', 그리고 밴드 The Wiggles 등이 해외에서 인기를 끈 전통을 이어가고 있다.

'Bluey'의 소프트 파워

     * 호주 방송사 ABC는 'Bluey'의 성공으로 인한 수익을 직접 얻지는 못하지만, 이 쇼의 성공은 호주 콘텐츠가 세계 무대에서 어떤 영향력을 발휘할 수 있는지 새로운 기준을 제시한다.

GN⁺의 의견:

    1. 'Bluey'는 전 세계적으로 어린이와 부모 모두에게 사랑받는 콘텐츠로, 호주의 문화와 정서를 글로벌하게 전파하는 데 성공했다는 점에서 중요하다.
    2. 이 애니메이션은 단순한 엔터테인먼트를 넘어서 가족 간의 사랑, 유대감, 그리고 일상의 소중함을 강조함으로써 긍정적인 가치를 전달한다.
    3. 'Bluey'의 성공은 호주가 단순한 원자재 수출국이 아니라 창의적이고 문화적으로 영향력 있는 국가임을 증명하는 사례로, 호주의 소프트 파워를 강화하는 데 기여한다.

        Hacker News 의견

     * Bluey의 매력
          + 한 부모님이 자신의 딸과 함께 본 애니메이션 'Bluey'는 달콤하고 긍정적이며 감정적으로 잘 쓰여진 작품임.
          + 비관적이지 않고 모든 문제를 세심하게 다루며, 무겁게 메시지를 전달하지 않고 전통적인 가치를 담고 있음.
          + 긍정적인 양부모 역할을 보여주는 드문 예로, '전통적인 가치'는 정치적인 의미가 아닌 보편적으로 감사할 수 있는 가족 역학을 긍정적으로 묘사하는 것을 의미함.
     * 가정 내에서의 Bluey
          + 한 가정에서 'Bluey'는 성가시지 않으며, 각 에피소드에는 클래식과 오리지널 음악이 아름답게 편직되어 있음.
          + 특히 'Sleepytime' 에피소드는 매우 감동적이어서 더 이상 볼 수 없을 정도이며, 이 에피소드를 본 많은 부모들이 공감함.
          + 아이들이 장난을 치기는 하지만 부모가 자녀에게 따라 하게 싫어할 행동은 하지 않으며, 이로 인해 가족들이 함께 재미있게 놀 수 있음.
     * 어른 팬의 Bluey 경험
          + 32세 무자녀 여성으로서 'Bluey'는 상상력에 더 연결되게 하고, 팬데믹 이전부터 멈춰 있던 음악 작곡과 스케치를 다시 시작하게 함.
          + 어린 시절 제대로 다루지 못했던 감정들을 이해하고 치유하는 데 도움을 주며, 치료 세션에서도 더 잘 표현할 수 있게 함.
          + 에피소드를 본 후 더 행복하고 나아진 느낌을 받으며, 강제적인 행복이 아닌 현실감 있는 긍정적인 감정을 느낄 수 있음.
     * 딸을 둔 아버지의 Bluey 사랑
          + 두 딸의 아버지로서 'Bluey'를 좋아하며, 어른들을 위한 에피소드뿐만 아니라 가족 간의 건전하고 긍정적인 관계를 보여줌.
          + 단순한 이야기를 전달하면서 정치적 메시지를 밀어붙이지 않으며, 아이들에게 미국식 억양을 노출시키지 않아도 됨.
     * Bluey의 교훈과 케이크 토퍼
          + 'Bluey'는 아이들에게 기억에 남는 교훈을 제공하며, 부모들도 아이들 없이도 즐길 수 있을 정도로 공감가는 내용을 담고 있음.
          + Etsy에서 'Bluey' 케이크 토퍼를 찾아 자신의 생일 케이크에 사용하며, 아이들이 매우 좋아함.
     * Bluey 캐릭터의 직업
          + 'Bluey'에서 아빠는 고고학자이고 엄마는 공항 보안 직원으로, 아빠는 뼈를 파내고 엄마는 마약을 찾는다는 재미있는 사실을 좋아함.
     * 부모로서의 Bluey
          + 'Bluey'는 부모가 되는 것에 대한 현실적인 주제를 다루며, 아이들에게 호소하기 쉬운 콘텐츠를 만드는 것이 쉽지만 부모들도 좋아할 수 있게 잘 쓰여진 작품임.
     * Bluey와 Star Trek TNG의 유사성
          + 'Bluey'의 'Camping' 에피소드가 'Star Trek TNG'의 'Darmok' 에피소드와 유사하다는 것을 발견함.
          + 서로 다른 언어를 구사하는 Bluey와 프랑스 개 Jean-Luc이 소통하는 방법을 찾고, 이별하는 내용을 담고 있음.
     * Bluey와 Daniel Tiger의 비교
          + 'Bluey'는 'Daniel Tiger'와 달리 매우 어린 아이들에게 직접적인 혜택을 주지는 않지만, 부모들에게 더 많이 호소함.
          + 'Daniel Tiger'는 어린이들이 겪는 일들을 직접적이고 명확하게 다루지만, 'Bluey'는 덜 직접적이고 이해하기 어려운 방식으로 다룸.
"
"https://news.hada.io/topic?id=12673","니클라우스 비르트 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              니클라우스 비르트 별세

   켄트벡도 니클라우스 비르트 교수에 대한 회고를 남겼네요.
   https://tidyfirst.substack.com/p/niklaus-wirth-1934-2024

   조 암스트롱 교수도 니클라우스 비르트 교수에게서 영향을 받았다니, 정말 대단한 사람이었나 봅니다.

        Hacker News 의견

     * Niklaus Wirth의 언어 디자인에 대한 기여 외에도 그는 최고의 말장난 중 하나를 만들었음. 그의 성은 원래 ""Virt""처럼 발음되지만 미국에서는 ""Worth""로 불림. 이로 인해 그는 ""유럽에서는 이름으로 불리지만 미국에서는 값으로 불린다""라는 농담을 했음.
     * Wirth는 Joe Armstrong에게 영웅이었으며, 그의 단순함에 큰 영향을 미침. Joe는 Wirth가 겹치는 창이 타일식 창보다 낫지만 그 복잡성을 정당화할 만큼 충분히 낫지 않다고 말한 것을 자주 인용함. Wirth는 80세 생일 심포지엄에서 자신이 개발한 Oberon을 FPGA 개발 보드에서 실행하는 새로운 CPU로 선보임으로써 영웅으로 남음.
     * 한 전 학생은 Wirth가 자신을 단순히 키보드를 두드리는 청소년에서 코드를 생각하는 숙련된 프로그래머로 만드는 데 도움을 준 사람 중 한 명이라고 회상함. 그는 대학에서 Wirth를 만나기 전에 이미 Amiga에서 Wirth 언어를 사용하는 프로그래머 커뮤니티에 참여하며 Oberon을 사용했음.
     * 한 사용자는 ""컴퓨터 프로그래밍의 예술"" 4A권을 몇 년 전에 구입했지만 아직 읽기 시작하지 않았음을 언급하며, Knuth가 돌아가기 전에 4A권을 시작할 때라고 생각함. 그는 또한 자신의 책장에서 Wirth의 PiM2와 Knuth의 저서들이 나란히 서 있는 것을 발견함.
     * Wirth의 별세 소식에 대해 슬픔을 표현하며, 그가 단순함, 정확성, 인간이 이해할 수 있는 소프트웨어를 위한 최고의 사도 중 하나였다고 언급함. 이제 Hoare와 Moore만 남았으며, Moore는 Greenarrays의 지휘권을 젊은 세대에게 넘겼음을 지적함. 또한, 현재의 IDE가 Turbo Pascal에서 시작되었고, 초기 매킨토시 소프트웨어 대부분이 Pascal로 작성되었으며, Go 언어의 초기 설계자 중 한 명인 Robert Griesemer가 Wirth의 학생이었음을 언급함.
     * Wirth는 Dijkstra의 논문 제목을 ""Goto Statement Considered Harmful""로 변경한 것에 대해서도 책임이 있음.
     * 한 사용자는 PASCAL이 실제로 좋은 첫 프로그래밍 언어였다고 회상하며, Turbo Pascal과 Delphi를 사용했던 시절을 그리워함. Wirth가 이 세상에 있었기 때문에 더 나은 세상을 얻었다고 말함.
     * Wirth의 언어들이 소프트웨어 개발에서 더 널리 사용되었다면 많은 것들이 더 나은 상태일 것이라고 주장하는 사용자도 있음. Pascal이 첫 ""진짜"" 프로그래밍 언어였으며, Amiga 500에서 Modula 2가 인기가 있었음을 언급함. 또한, Go 언어가 Modula 2에서 많은 영감을 받았다고 언급함.
     * Wirth는 Euler, PL360, ALGOL W, Pascal, Modula, Modula-2, Oberon 등 다양한 프로그래밍 언어의 주요 설계자였으며, 여러 운영 시스템과 디지털 하드웨어 설계 및 시뮬레이션 시스템에도 큰 기여를 함. 1984년에는 이러한 언어 개발에 대한 공로로 ACM 튜링 상을 수상함.
"
"https://news.hada.io/topic?id=12695","AI 시대의 마켓플레이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI 시대의 마켓플레이스

     * 마켓플레이스 비즈니스 모델은 변하지 않지만, 새로운 플랫폼이 등장할 때마다 거래가 이루어지는 방식과 장소가 달라짐
          + 인터넷은 구인광고/게시판에서 Amazon/eBay/Craiglist로, 모바일은 DoorDash/Uber/Instacart 로
     * 생성형 AI는 마켓플레이스에 또 한 번 혁신을 일으킬 것. 제품과 서비스가 판매되는 방식뿐만 아니라 제품이 만들어지는 방식도 변화시킴

수요 측면

     * 새로운 검색 방식: 구매자들은 정확한 제목으로 검색하거나 복잡한 필터를 사용할 필요 없이 자연어, 이미지, 또는 느낌을 통해 원하는 상품을 찾을 수 있게 됨. 이는 검색에서 거래로의 전환 가능성을 높임
     * 맞춤형 공급 창출: 상품이 시장에 존재하지 않을 경우, 구매자의 비전을 실현할 수 있는 공급자와 매칭해주는 마켓플레이스가 등장할 것임. 예를 들어, Pietra는 AI 제품 디자인 도구를 통해 창작자들이 자신의 고객에게 판매할 제품을 만들 수 있게 함
     * 협상 및 고객 서비스: AI를 활용해 사용자가 실제 제품에 대해 가격 협상을 하는 가상의 창고 세일을 진행한 사례가 있음. AI는 공급자의 데이터에 기반하여 질문에 답하고 가격 협상을 하는 등의 고객 서비스를 제공할 수 있음

공급 측면

     * 디지털, 상품화된 마켓플레이스: AI는 Airbnb와 같은 플랫폼에서 공급자가 더 효율적으로 일할 수 있도록 도와줄 수 있으나, Upwork 처럼 디지털 상품이나 서비스를 판매하는 마켓플레이스는 상품 자체가 AI에 의해 대체될 수 있음
     * 디지털, 개인화된 마켓플레이스: Cameo나 Patreon과 같은 곳에서는 AI가 공급자의 작업을 가속화할 수 있으며, 장기적으로는 AI가 공급자의 경쟁자가 될 수도 있음
     * 물리적, 상품화된 마켓플레이스: Instacart나 Uber와 같은 서비스는 AI를 통해 판매자 운영을 간소화할 수 있지만, 크게 영향을 받지는 않음
     * 물리적, 개인화된 마켓플레이스: Etsy나 eBay와 같은 곳에서는 AI가 공급자가 더 많은 상품을 판매할 수 있도록 도와줄 것임

미래

     * AI 시대의 마켓플레이스는 구매자에게 더 많은 옵션을 제공하고, 사용자 경험을 향상시킬 것임
     * 판매자는 AI의 도움으로 더 효율적으로 일할 수 있게 되어, 거래량을 늘리고 자신의 특별한 감성이 중요한 부분에 집중할 수 있음
     * AI는 더 많은 상품 목록, 더 높은 거래 전환율, 그리고 더 많은 반복 구매를 가져올 것으로 예상됨
"
"https://news.hada.io/topic?id=12748","2024년 우리의 커리어를 형성할 트렌드들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        2024년 우리의 커리어를 형성할 트렌드들

1. ""더 적은 비용으로 더 많은 일을 하는 것""이 가능해짐

     * 많은 지식 근로자들이 회사 임원들로부터 ""더 적은 자원으로 더 많은 성과를 내라""는 요구를 받았음
     * 과거에는 비현실적으로 여겨졌지만, 2023년부터는 덜 불합리하게 느껴지기 시작
     * 지식근로자들이 생산량을 현실적으로 증가시킬 수 있는 강력한 AI도구에 접근 가능해 지면서 생산성 붐이 일어날 것
     * 인공지능을 통한 생산성 향상을 경험하는 직원들로 인해 다음과 같은 결과가 나타날 수 있음
          + 소규모 팀이 더 많은 성과를 내면서, 이전에 ""인력 확장""을 통해 ""권력을 축적""했던 관리자에 대한 감시가 강화
          + 언어가 더 이상 장벽이 되지 않고 낮은 임금도 기꺼이 받아들일 수 있게 됨에 따라 해외 채용의 경쟁력이 높아짐
          + High-Agency 한 직원들이 AI를 활용하여 평균보다 기하급수적으로 더 나은 성과를 냄
               o (High-Agency: 사람들이 자신의 환경과 상황에 대해 적극적으로 행동하고 변화를 주도하는, 능동적이고 자기 주도적인 성향을 가진 것을 의미)

2. 리더들이 디테일을 챙기기 시작

     * CEO들이 사업의 세부 사항에 더 깊이 관여하기 시작할 것
     * 제로 금리 시대 동안 많은 CEO들은 단순히 똑똑한 사람들을 고용하고 그들의 일에 간섭하지 않는 것이 리더십이라고 생각했음
     * 하지만 자본 시장이 긴축되고, 조직의 부풀어진 인원을 점검하면서 많은 경영진들은 자신들이 너무 멀리 떨어져 있었다는 것을 인식하게 되었음
     * 예를 들어
          + Airbnb의 CEO인 Brian Chesky는 이제 매주 제품 리뷰를 진행
          + Coinbase의 CEO인 Brian Armstrong은 모든 신규 고용을 직접 승인
          + 이러한 전환을 성공적으로 수행하는 경영진은 자신의 팀에 대한 코치 역할을 채택하면서 마이크로매니저처럼 행동하지 않는 사람들일 것
     * 일어날 수 있는 일들:
          + 중간 관리자의 수를 줄이면서 조직 구조를 단순화하여(Flatter) 경영진이 실제 업무에 계속 연결될 수 있게 함
          + 줄어든 관리 기회를 수용하기 위해 개별 기여자(Individual Contributor)의 경력 경로를 개선

3. Software as a Service 에서 Software provides a Service로

     * ""서비스로서의 소프트웨어(SaaS)에서 소프트웨어가 서비스를 제공하는 시대로의 전환""
     * 향후 몇 년 동안, 인공지능 중심의 스타트업들이 기존의 SaaS 업체들을 방해할 것으로 예상
     * 이들은 기업들이 라이선스 대신 ""결과에 대해 지불""하게 하는 방식을 가능하게 할 것
     * AI 모델이 발전함에 따라, 이러한 공급업체들은 ""인력 확장"" 에 대한 대안을 제공할 수도 있음
     * 현재, 관리자들은 채용 기술은 완성했지만 공급업체 선택에는 별로 투자하지 않음
     * 그러나 AI 회사들이 직접 서비스를 제공함에 따라, 리더들은 문제를 해결하기 위해 직원을 채용해야할지 아니면 소프트웨어를 구매해야할 지 고민해야 함
     * 가장 성공적인 리더들은 사람을 채용하는 것만큼 기술 구매에 대해서도 신중할 것
     * 일어날 수 있는 일들:
          + 인사 최고 책임자(CHRO)와 최고 정보 책임자(CIO) 간의 긴밀한 협력이 강화되어 작업 수행 방식에 대해 더 전체적으로 생각하게 될 것
          + 직속 부하가 없지만 더 큰 책임을 맡는 고위 리더들의 등장 가능성이 높아질 것

4. 승계 계획이 시급해짐

     * 2030년까지 미국 인구의 5분의 1이 65세 이상이 될 것
     * 인구 변화는 잠재적인 건강 문제나 은퇴 결정으로 인해 갑작스럽게 C레벨(최고 경영진)의 공석이 발생하기 전에 인사 리더들이 승계 계획을 개발할 필요성을 증가시키고 있음
     * 향후 몇 년 동안, 많은 조직들이 부사장(VP) 및 수석 부사장(SVP) 수준의 리더들을 평가하여, 어떤 라이징 임원들이 더 큰 책임을 맡을 수 있는지 결정하게 될 것
     * 일어날 수 있는 일들
          + 리더십 역할로의 더 빠른 승진을 지원하기 위해 잠재력이 높은(high-potential) 직원들의 개발에 더 초점을 둔 맞춤형 계획을 수립할 것
          + 중요한 경영진 역할을 채울 수 있는 최고의 인재를 유지하는 데 더 중점을 둘 것
          + 임원들의 퇴사에 앞서 보고 체계의 변화와 새로운 전환 역할의 창출을 통해 조직 개편을 전술적으로 수행할 것

5. AI의 다운스트림 작업

     * ""인공지능(AI)에 의해 할당된 작업을 수행하는 것, 즉 AI의 하류에서 일하는 것""
     * 많은 사람들이 이미 AI에게 이메일 작성이나 문서 편집을 지시하는, 즉 AI의 상류에서 일하는 경험을 했음
     * 그러나 2024년에는 많은 사람들이 알고리즘에 의해 할당된 작업을 수행하는, AI의 하류에서 일하는 것이 무엇을 의미하는지 알게 될 것
     * 일부 근로자에게는 이러한 역학이 이미 익숙. 예를 들어, 아마존 창고에서 물건을 고르는 직원이나 Doordash 배달 기사는 이미 소프트웨어의 지시에 따라 일하고 있음
     * 2024년에는 새로운 종류의 사무직 근로자들이 소프트웨어 기반 관리를 경험하기 시작할 수 있음
          + 일부는 이러한 전환을 충격적이고 디스토피아적으로 느낄 수 있으며, 다른 이들은 기존의 인간 상사보다 소프트웨어 기반 관리를 선호하게 될 수도 있음
     * 일어날 수 있는 일들:
          + 관리자들이 AI 보조 도구를 통해 2 ~ 3배 더 많은 직접 보고하는 직원들을 관리할 수 있는 능력을 갖게 될 것
          + 연간 성과평가가 사라지고 항상 켜져 있는 생산성 플랫폼이 지속적인 피드백을 가능하게 할 것
          + 소프트웨어와 협력하고 지시를 받는 것이 더 일반적이 되면서 인간적인 연결의 필요성이 증가할 것

6. 조용한 수행(Quiet Performing)

     * 2022년이 '조용한 퇴사(quiet quitting)'의 해였고, 2023년이 '조용한 해고(quiet firing)'를 가져왔다면, 2024년은 ""조용한 수행""이라는 오랜 전통을 복원할 것
     * 매크로 경제적 충격이 이어진 네 해 끝에, 특히 2023년의 화이트칼라 직종 대량 해고 사태 이후, 많은 회사들이 직원들 사이에서 신뢰와 집중력을 재건하려고 하고 있음
     * 성과 관리에 대한 강조는 여전히 남아 있겠지만, 많은 회사들은 고성능을 위해 필요한 심리적 안전성을 다시 구축하려고 노력할 것
     * 2023년 가혹하게 경쟁적인 취업 시장을 목격한 후, 일부 직원들은 팬데믹 시대의 직업 이동으로 돌아가는 것을 고무적으로 여기고 있지 않음
     * 근로자들에게 2024년은 고개를 숙이고 손에 닿은 일에 집중하는 한 해가 될 것

   리더의 마이크로매니징 관심가는 대목이네요

   '낮은 임금도 기꺼이 받아들일 수 있게 됨에 따라' ?

   ???: 김대리 요즘 엑셀 팡션? 사용하지 마세요!

   5번은 sf같네요

   조용한 수행(Quiet Performing)에 공감이 되네요

   2022년 우리의 커리어를 형성할 트렌드들
"
"https://news.hada.io/topic?id=12727","csvlens - 커맨드라인용 CSV 파일 뷰어 "less for CSV"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               csvlens - 커맨드라인용 CSV 파일 뷰어 ""less for CSV""

     * CSV를 로딩해서 단축키로 스크롤/필터링하며 확인 가능
     * csvlens 파일명 로 실행하거나 | csvlens 로 파이프

주요 키 바인딩

     * hjkl 또는 화살표 키: 주어진 방향으로 한 행 또는 열 스크롤
     * Ctrl + f 또는 Page Down: 한 창 아래로 스크롤
     * Ctrl + b 또는 Page Up: 한 창 위로 스크롤
     * Ctrl + d 또는 d: 반 창 아래로 스크롤
     * Ctrl + u 또는 u: 반 창 위로 스크롤
     * Ctrl + h: 한 창 왼쪽으로 스크롤
     * Ctrl + l: 한 창 오른쪽으로 스크롤
     * Ctrl + ←: 첫 번째 열로 스크롤
     * Ctrl + →: 마지막 열로 스크롤
     * G 또는 End: 맨 아래로 이동
     * g 또는 Home: 맨 위로 이동
     * G: n번째 줄로 이동
     * /: 정규 표현식과 일치하는 내용 찾아 하이라이트
     * n (찾기 모드에서): 다음 결과로 이동
     * N (찾기 모드에서): 이전 결과로 이동
     * &: 정규 표현식을 사용하여 행 필터링 (일치하는 행만 표시)
     * *: 정규 표현식을 사용하여 열 필터링 (일치하는 열만 표시)
     * TAB: 행, 열, 셀 선택 모드 간 전환
     * >: 선택된 열의 너비 증가
     * <: 선택된 열의 너비 감소
     * Enter (셀 모드에서): 선택된 셀을 표준 출력으로 출력하고 종료
     * -S: 줄 바꿈 토글
     * r: 기본 뷰로 재설정 (모든 필터 및 사용자 정의 열 너비 제거)
     * H: 도움말 표시
     * q: 종료

선택적 매개변수

     * -d <delimiter>: CSV 파싱 시 이 구분자 사용 (예: csvlens file.csv -d $'\t').
     * -d auto: 구분자 자동 감지 설정.
     * -i, --ignore-case: 검색 시 대소문자 무시. 검색 문자열에 대문자가 있으면 이 플래그 무시.
     * --echo-column <column_name>: Enter 키를 누를 때 선택된 행의 이 열 값을 표준 출력으로 출력하고 종료.

GN⁺의 의견:

     * csvlens는 CSV 파일을 효율적으로 보고 조작할 수 있는 강력한 도구임. 특히 대용량의 데이터를 다루는 데이터 과학자나 개발자에게 유용.
     * 사용자 친화적인 키 바인딩과 필터링 옵션은 데이터 탐색을 더욱 빠르고 편리하게 만듦.
     * 리눅스 사용자에게는 특히 설치가 간편하며, 다양한 리눅스 배포판에서 쉽게 접근할 수 있는 점이 이 도구의 중요성을 더함.

        Hacker News 의견

     * Tad GUI를 사용하여 CSV 파일을 본 적이 있지만, 주로 vi의 nowrap 옵션을 사용하거나 R에서 파일을 읽음. 이제 csvlens가 CSV 파일의 기본 뷰어가 될 예정임.
     * CSV 워크플로우를 크게 향상시킨 것 중 하나는 duckdb임. SQL을 사용하여 CSV를 쿼리할 수 있는 작은 바이너리임.
     * CSV 파일 파싱에 clickhouse-local을 사용하는 것을 즐김. 사용자 정의 구분자와 파싱 규칙이 필요한 상황에서 잘 작동함. 최근에는 CSV 파일이 압축되어 있어도 압축을 풀 필요 없이 자동으로 압축 포맷을 인식하고 처리해줌을 발견함.
     * TSV가 표준이 되었다면 이런 도구들이 필요 없었을 것임.
     * CSV 파일에서 종종 하는 일은 특정 열의 모든 행이나 특정 행들을 합산하는 것임. 예를 들어 연말 세금 정산을 위해 은행이나 결제 제공업체에서 내보낸 대규모 CSV 파일이 있고, 특정 항목의 총계를 구하고 싶을 때 GUI 도구를 사용하면 열을 정렬하고 마우스로 원하는 부분을 선택하여 실시간으로 합계를 볼 수 있음. 때때로 자동 스크립트로 해결할 수 있을 만큼 깔끔하지 않아서 수동으로 하는 것이 더 낫다고 느낌. 세금과 관련되어 있기 때문에 잘못하면 큰 문제가 될 수 있음. Windows나 Linux에서 잘 작동하는 기본 스프레드시트 앱을 찾고 있음. Libre와 Open Office 모두 특정 CSV 유형에서 열을 파싱하는 데 어려움을 겪고 있고, 정렬 동작도 Google 스프레드시트 앱보다 훨씬 나쁨. Google 사용에 대한 의존도를 줄이고 싶음.
     * csvkit[^0]을 사용하는 것을 즐겼음. csvlens만큼 좋은 뷰어는 아니지만, CSV 데이터를 grep, cut, pipe하는 기능이 유용함. csvlens와 csvkit의 조합이 훌륭할 것 같음.
     * 오랫동안 찾고 있던 완벽한 뷰어를 찾았음! Visidata도 좋지만, 내가 원하는 것보다 훨씬 복잡함. 이 뷰어는 내 워크플로우에 완벽하게 들어맞을 것임. 공유해줘서 감사함!
     * https://www.moderncsv.com에서 나에게 완벽한 해결책을 찾음. 빠르게 시작하고, 집중된 GUI, 완전한 기능, 불필요한 것 없음!
"
"https://news.hada.io/topic?id=12682","브라우저, 모바일 양강 구도를 가장 가능성 있게 뒤흔들 혁신자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   브라우저, 모바일 양강 구도를 가장 가능성 있게 뒤흔들 혁신자

기술 기자들은 가장 큰 앱 스토어 이야기를 왜 놓치고 있는가?

     * 브라우저는 모바일 이중체제를 교란할 가능성이 가장 높지만 Wired나 The Verge를 읽는다면 이를 알기 어려움.
     * 애플과 구글의 앱 스토어에 대한 음지가 문서화되고 변화에 대한 압력이 쌓이고 있음.
     * 경쟁 브라우저가 등장하면서 프로그레시브 웹 앱(PWA) 디렉토리로 앱 스토어를 대체할 수 있는 가능성이 열림.
     * 기술 언론은 웹이 네이티브 앱을 대체할 수 있는 가능성을 거의 언급하지 않음.

묻혀버린 주요 뉴스

     * 규제기관, 옹호자, 개발자들은 모바일을 교란할 웹의 잠재력을 인식하고 있음.
     * 기술 뉴스는 이 상황을 설명하지 못하고 있음.
     * 브라우저 경쟁이 앱 스토어를 뒤집을 잠재력을 가지고 있지만, 이에 대한 보도는 부족함.

교란된 혁신

     * ""혁신""에 집착하는 산업에서 왜 이 다윗 대 골리앗 이야기가 전해지지 않는지에 대한 이론들.
     * 모질라와 다른 주요 브라우저 벤더들이 웹이 네이티브 앱에 도전할 수 있는 웹을 옹호하지 않음.
     * 기술 기자들은 종종 웹이 다른 OS에서 더 능력이 있다는 사실을 인식하지 못함.
     * 기자들과 편집자들은 소프트웨어 엔지니어가 아니므로 브라우저 경쟁의 잠재력을 이해하기 어려움.
     * 시장 경쟁성 이론이 최근에야 기술 뉴스의 큰 부분이 됨.
     * 아직 일어나지 않았기 때문에, PWA가 아이폰에 영향을 미치지 않았음.

싹트는 희망

     * 웹 기반 앱 스토어 변화의 씨앗이 이미 뿌려졌으나, 플랫폼 경쟁의 핵심 질문이 남아있음.
     * 애플은 웹에 필수 기능을 부여하는 것을 거부함으로써 성공적임.
     * 적절한 브라우저 선택이 상황을 뒤집고, 웹이 ""기본적인"" 기능을 제공할 수 있게 될 수 있음.
     * 애플은 사파리의 자금을 적게 쓰고 강제적으로 채택하게 함으로써 웹을 게임에서 배제함.
     * 비즈니스 측면에서, 관리자들은 ""모바일""을 하나의 범주로 생각함.
     * 웹 앱에 대한 앱 스토어 발견 금지는 애플이 브라우저에 필수 기능을 부여하는 것을 거부하는 것을 지지함.
     * 구글은 PWA에 대한 더 나은 미래를 가능하게 하는 API를 비공개로 유지함.

새로운 희망

     * 2024년은 앱 스토어와 브라우저 뉴스로 가득 찰 것임.
     * 이러한 사건들을 재구성하고 더 나은 맥락을 제공할 수 있는 가능성이 있음.
     * 모바일 OS가 경쟁하는 네이티브 앱 스토어를 가질 때의 의미에 대한 더 완전한 토론이 필요함.
     * 기술이 진정으로 더 나아질 가능성이 높아짐에 따라, 사람들이 이해할수록 기술이 실제로 더 나아질 가능성이 높아짐.

GN⁺의 의견:

    1. 이 기사는 모바일 생태계에서 브라우저의 중요성과 잠재적인 영향력을 강조함으로써, 기술 분야의 중요한 변화에 대한 인식을 높이는 데 기여함.
    2. 기술 언론의 보도가 부족함에도 불구하고, 규제 기관과 개발자 커뮤니티는 웹 기반 앱의 가능성을 인식하고 있으며, 이는 향후 모바일 앱 개발의 패러다임 변화를 예고함.
    3. PWA와 같은 기술이 앱 스토어의 독점을 깨고 앱의 이식성을 높이는 데 중요한 역할을 할 수 있으며, 이는 소비자와 개발자 모두에게 더 나은 선택과 기회를 제공할 것임.

   웹 좋아하긴 하는데 주요 브라우저조차 구글이랑 애플이 주도하는 상황에서 과연 얼마나 흥할 수 있을지 모르겠네요.. 웹이 더 많이 흥했으면 좋겠어요

   저도 웹기술 옹호쪽이긴 합니다만, 과연 모바일 OS 양강체제와 싸울 수 있을까 에는 다소 의구심을 가지고 있습니다.
   아니 꼭 싸움을 전제로 해야하나? 라는 생각도 들고요. 서로의 부족한 부분을 메워주는 상대가 아닐까 하는데

   이제 칩부터 기기, OS 까지를 모두 자체 생산하는 애플은 그냥 자기 갈길 갈 것 같아요.
   구글이라고 안드로이드 버리고 웹을 마구 띄워주기도 싶지 않을 것 같고요.

   이미 위챗이나 여러 슈퍼앱들이 저 위치를 차지하고 있고, 더 확장되는걸 경계해서 애플은 자사웹엔진강제, 구글도 API비공개등을 하는거 아닐까요?

        Hacker News 의견

     * 애플은 표준 구현을 지연시키거나 잘못 구현하는 등 웹 기능의 발전에 장애물을 만들어왔음. 예를 들어, 사진과 파일 업로드, 웹RTC, PWA 홈 화면 추가, 고정 위치, 노치를 통한 스크롤링, 서비스 워커, 푸시 알림 등이 있음. 이러한 기능들이 제공되더라도 종종 앱 스토어로의 유입을 유도하기 위해 제대로 작동하지 않게 만들어짐.
     * PWA(Progressive Web Apps)는 1998년 WAP이 유행할 때 적합했을 것이며, 현재는 복잡하고 문서화가 부족한 웹 기술의 집합체로 보임. 웹 어셈블리는 존재하지만 네이티브 앱에 비해 개발이 어렵고 속도도 75% 수준임. 또한, 모바일 기기 제조사들이 이를 쉽게 만들 이유가 없음. 사용자 입장에서는 PWA가 느리고 배터리를 많이 소모한다고 느낄 수 있음. 데스크탑과 달리 모바일은 배터리 용량에 제한이 있어 이러한 문제가 당분간 지속될 것임.
     * 웹 앱이 기존 프로그램처럼 취급되어 사용자가 원하는 버전으로 교체할 수 있는 능력을 가질 수 있음. 모바일 기기에서 애플리케이션을 사이드로드(설치)하는 것은 사용자에게 더 많은 권한을 부여함.
     * 브라우저가 모바일에서 할 수 있는 일을 확장하면, 앱 스토어를 PWA 디렉토리로 대체할 수 있는 경쟁자들에게 기회를 줄 수 있음. 그러나 과거 페이스북이 HTML5 앱을 선택한 것은 전략적 실수였으며, 웹 앱은 느리고 다양한 브라우저와의 호환성 문제가 있었음.
     * 경쟁 브라우저가 다른 PWA를 설치할 수 있는 기능을 제공하면, 웹 앱 스토어가 현실화될 수 있음. 그러나 기존의 웹에서는 이미 앱 발견과 검색이 가능하므로 웹 앱 스토어가 필요하지 않을 수도 있음.
     * 앱 스토어가 성공한 이유는 개발자들이 수익을 창출할 수 있었기 때문임. 웹에서 직접 수익을 창출하는 것은 광고에 의존해야 하며, 사용자의 관심이 짧아서 쉽게 이탈함. 앱도 이제 비슷한 문제를 겪고 있으며, 앱 스토어의 규칙도 점점 더 제한적이 되고 있음.
     * 웹 앱이 이진 앱만큼 좋은 경험을 제공할 가능성이 있지만, 애플은 웹 개발자들에게 '좋은 기능'을 쉽게 제공할 동기가 없음. 웹페이지 내에서 '앱 설치' 버튼을 통해 홈 화면에 추가할 수 있다면 앱 스토어 사용량의 50%를 줄일 수 있을 것임.
     * 웹 개발자들이 모바일을 더 잘 지원하기 시작하지 않는 한, PWA가 네이티브 앱을 대체할 것으로 보이지 않음. 현재도 모바일에서 제대로 작동하지 않는 웹페이지들이 많음.
     * 많은 웹 앱과 단일 페이지 애플리케이션(SPA)이 앱보다 낫다고 주장하지만, 실제로는 앱이 훨씬 더 나은 경험을 제공함. 앱은 오프라인에서도 부분적으로 작동하고, 반응성이 뛰어나며, 웹 페이지보다 상태를 잘 유지함.
     * 모질라가 안드로이드용 PWA 런처를 출시하지 않은 것에 놀람. 이미 안드로이드용 파이어폭스를 가지고 있고 파이어폭스OS의 경험이 있는 만큼, 이를 개발자들에게 매력적인 옵션으로 고려하게 만드는 주요 수단이 될 것으로 예상됨. 성능이나 API 문제(예: 더블 클릭 동작)로 인해 웹매니페스트와 다른 접근법이 주목받지 못하는 장벽이 있을 수 있음.
"
"https://news.hada.io/topic?id=12742","2017년 출시된 인공지능 학습 플랫폼 'Teachable Machine'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               2017년 출시된 인공지능 학습 플랫폼 'Teachable Machine'

     * Teachable Machine 소개
          + Teachable Machine은 빠르고 쉽게 누구나 사용할 수 있는 웹 기반 도구로, 사이트, 앱 등을 위한 머신 러닝 모델을 만드는 데 전문 지식이나 코딩이 필요하지 않음.
          + 2017년 버전의 Teachable Machine은 여기에서 찾을 수 있음.
     * Teachable Machine 사용 방법
          + 1단계: 수집
               o 컴퓨터가 배울 클래스 또는 카테고리로 예제를 모으고 그룹화함.
          + 2단계: 훈련
               o 모델을 훈련시킨 후 즉시 테스트하여 새로운 예제를 올바르게 분류할 수 있는지 확인함.
          + 3단계: 내보내기
               o 모델을 프로젝트에 맞게 내보내고, 모델을 다운로드하거나 온라인으로 호스팅할 수 있음.
     * Teachable Machine으로 가르칠 수 있는 것
          + 이미지
               o 파일이나 웹캠을 사용하여 이미지를 분류하는 모델을 가르침.
          + 소리
               o 짧은 소리 샘플을 녹음하여 오디오를 분류하는 모델을 가르침.
          + 포즈
               o 파일이나 웹캠에서 포즈를 취하여 신체 위치를 분류하는 모델을 가르침.
     * 튜토리얼
          + 이미지: Bananameter
               o 바나나의 숙성도를 판별할 수 있는 모델을 만드는 방법을 배움.
          + 소리: Snap Clap Whistle
               o 간단한 소리를 감지하는 모델을 만드는 방법을 배움.
          + 포즈: Head Tilt
               o 머리 기울기 방향을 인식하는 모델을 만드는 방법을 배움.
     * Teachable Machine으로 만든 프로젝트
          + Tiny Sorter
               o Arduino와 Teachable Machine을 연결하는 DIY 실험.
          + Project Euphonia
               o Steve Saling이 얼굴 제스처를 사용하여 소리를 트리거하는 새로운 방식으로 의사소통하는 데 Teachable Machine을 사용함.
          + Teachable Snake
               o Vince MingPu Shao가 웹캠과 종이 한 장을 게임 컨트롤러로 바꾸는 데 Teachable Machine을 사용함.
     * 호환 가능한 도구
          + Teachable Machine으로 만든 모델은 실제 TensorFlow.js 모델로, Glitch, P5.js, Node.js 등 JavaScript가 실행되는 곳이라면 어디서든 잘 작동함.
          + Coral, Arduino 등 다른 형식으로 모델을 내보내어 다른 곳에서 사용할 수 있음.
     * 학습 및 교육용 자료
          + Teachable Machine을 사용하여 배우고 싶은 사람들을 위한 수업 및 활동:
               o AI + Ethics
                    # 알고리즘 시스템에서의 편향을 이해하기 시작하는 학생들을 위한 수업.
               o Dancing with AI
                    # Teachable Machine과 PoseBlocks를 사용하여 상호작용하는 시스템을 만드는 방법을 배움.
               o Ready AI Lesson
                    # Teachable Machine을 탐구하고 머신 러닝, 분류, 사회적 영향의 개념을 배움.
     * GN⁺의 의견
          + Teachable Machine은 머신 러닝에 대한 전문 지식이 없는 사람들도 쉽게 접근할 수 있게 해주는 강력한 도구임.
          + 사용자 친화적인 인터페이스와 단계별 가이드를 통해 누구나 빠르게 자신만의 모델을 훈련시키고 실제 프로젝트에 적용할 수 있음.
          + 이 도구는 교육적인 측면에서도 매우 유용하며, AI와 윤리, 창의적인 프로젝트 개발 등 다양한 분야에서 활용될 수 있는 잠재력을 가지고 있음.

        Hacker News 의견

     * MediaPipe와 Teachable Machine에 대한 연구를 한 적이 있으며, 이 두 제품이 함께 사용될 의도로 보인다는 호기심을 표현함. Google이 브라우저에서 'ML at the edge' 사용 사례에 투자하는 것에 대해 흥분함. MediaPipe는 VTubing 커뮤니티에서 특히 인기가 있으며, BlazePose를 이용한 신체, 얼굴, 손 포즈 추적이 매우 효율적임.
     * Teachable Machine을 취미 프로젝트에 완벽하게 사용할 수 있는 경우를 발견함. 이전 버전은 3개의 클래스만 훈련할 수 있었지만, 이제는 원하는 만큼 클래스를 추가할 수 있음. 몇 백만 개의 클래스를 가질 수 있는지, 그리고 그 결과가 어떤지 궁금함.
     * 6년 전 Teachable Machine에 대한 오래된 비디오를 발견함. 2019년에 Google이 버전 2를 출시함. 이 플랫폼은 제한된 작업에 적합하며, 빠르게 개발되지 않는 것 같음.
     * Teachable Machine이 아이들에게 완벽한 눈 오는 날 활동이 될 것 같다는 긍정적인 의견을 제시함.
     * Teachable Machine이 새로운 프로젝트가 아니라는 정보를 제공하며, 6년 전 해커뉴스 토론 링크를 공유함.
     * 몇 년 전에 시도된 재미있는 리디자인을 언급하며 관련 링크를 공유함.
     * Teachable Machine을 사용하여 브라우저에서 카메라를 이용해 기계를 가르치는 것에 대한 2017년 10월 해커뉴스 토론을 언급함.
     * Teachable Machine과 같은 자체 호스팅 가능하고 오픈 소스 대안이 있는지 묻는 질문을 함.
     * 다중 모달 대규모 언어 모델(LLM)이 이해할 수 있는 것을 즉석에서 할 수 있는 것과 Teachable Machine이 무엇이 다른지에 대한 의문을 제기함.
     * 특정 댓글이 신고되었다는 것을 나타냄.
"
"https://news.hada.io/topic?id=12642","Pluto - Lua에 기능을 추가하고 향상/최적화한 슈퍼셋 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Pluto - Lua에 기능을 추가하고 향상/최적화한 슈퍼셋 언어

     * Lua 5.4 기반
     * 새로운 기능들 :
          + 문자열 인덱싱 []
          + 숫자 중간에 _ 지원, 0x/0b 로 진수 표현
          + ""Break/Continue 레벨""로 여러레벨 루프 나가기 및 계속하기 가능
          + Lambda 표현 지원 : function (c) return tonumber(c) + 1 end → |c| -> tonumber(c) + 1
          + String Interpolation: ""The {label} is {data.value}""
          + 3항 표현식: max = a > b ? a : b
          + for-as 루프 지원
          + switch, case, default
          + default argument 및 named argument 지원
     * 새로운 연산자 : Alias들(!, **, !=), 복합연산자(%=, +=, <<=, &=,..), nil, :=(Walrus)
     * 기본적으로 표준 Lua보다 살짝 더 빠르며 일부 상황에서는 꽤 빠름
     * Python 표준 라이브러리 수준을 목표로 하고 있어서, 더 많은 표준 라이브러리 제공
     * 그외 다양한 개선사항들 포함
"
"https://news.hada.io/topic?id=12658","LLM들과 2024년 초반의 프로그래밍 동향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        LLM들과 2024년 초반의 프로그래밍 동향

     * 2023년 인공지능의 진화로 인해 프로그래머들이 LLM(대형 언어 모델)을 일상적으로 활용하는 시대가 열림
     * LLM은 기본적인 정보 제공자이자, 복잡하고 지루한 부분을 대신 처리해주는 지식형 멍청이 역할을 함
     * 실제 사용에서 LLM의 추론 한계와 강점이 분명히 드러남—특히 고수준 Python 코드에선 빠르지만, 시스템 프로그래밍(C 등)에서는 한계가 뚜렷함
     * ""일회용 코드"" 와 반복적이고 진부한 작업엔 LLM이 매우 유용하게 작동하며, 덕분에 개발자의 에너지와 시간을 절약할 수 있음
     * 앞으로는 질문을 잘하는 능력이 LLM 활용의 핵심 역량으로 부상함


     * 2023년은 인공지능에 특별한 해임
     * 나역시 ChatGPT와 로컬에서 운영되는 LLMs의 등장 이후, 프로그래밍에 있어 새로운 기술을 광범위하게 사용하기 시작
     * 코드 작성의 속도를 높이고, 지루하거나 비효율적인 프로그래밍 과정에서 정신적 에너지를 아끼는 것이 주목적
     * 구글 검색의 품질 하락으로 LLM은 더욱 중요한 프로그래밍 도구가 됨
     * LLMs는 의지와 능력이 있는 사람들에게 도움이 될 수 있지만, 이미 뒤처진 사람들에게는 큰 이점이 없을 수 있음
     * 2024년 초, 이제 LLM은 소프트웨어 개발 과정을 간소화하고 효율성을 높이는 데 기여하고 있음.

""Omniscient or Parrots?"" - 전지전능 또는 앵무새?

     * LLM의 원리적 한계: 많은 전문가들이 처음엔 LLM을 단순한 마르코프 체인이나 데이터의 변주에 불과하다고 과소평가함
     * 그러나 실제로 LLM은 이전에 본 데이터를 섞고 결합하는 능력을 보여줌
     * 그럼에도 섬세한 추론이나 완전히 새로운 문제에서는 여전히 쉽게 한계를 드러냄

""Stupid but All-Knowing"" - 멍청하지만 박식함

     * LLM은 기본적인 추론 능력은 약하지만, 프로그래밍·기술 지식의 폭이 매우 넓음
     * 복잡해진 현대 개발 환경(수많은 언어, 프레임워크, 라이브러리)에서, 지식형 멍청이인 LLM은 효율적 파트너가 됨
     * Keras→PyTorch 등 기술 이전도 문서 탐색 없이 LLM 도움으로 손쉽게 진행 가능함

실제 사용 사례

     * 텐서 재구성을 위한 코드 작성 사례: PyTorch에서 구현된 신경망 모델과 배치에 대한 설명을 바탕으로, GPT-4가 텐서의 차원과 데이터 레이아웃을 변경하는 데 필요한 코드를 작성.
     * BLE 클라이언트 구현 사례: Objective C를 사용하여 macOS 네이티브 API로 BLE 클라이언트를 구현. ChatGPT를 활용해 BLE API와 Objective C 프로그래밍을 다시 학습하고, 코드 작성 과정을 가속화.
     * 컨볼루션 신경망 해석 사례: 문서화가 부족한 컨볼루션 신경망을 Python 스크립트로 구현. ChatGPT가 네트워크의 입력과 출력을 해석하고, 실제 이미지 테스트를 통해 네트워크의 기능을 파악하는 데 도움을 제공.

     * 반복적이고 재미없는 작업은 LLM에게 맡기고, 결과를 검증하는 식으로 개발 효율을 극대화함
     * LLM의 추론 능력은 기존에 본 예시를 조합하는 ""인터폴레이션"" 수준이지만, 이는 실무에서 충분히 쓸모 있음

""Disposable Programs"" - 일회용 프로그램의 시대

     * 단발성·반복적 업무에는 LLM 코드 자동생성이 매우 효과적임
     * 학습 과정의 손실 곡선 시각화: PyTorch 프로그램이 생성한 CSV 파일 형식을 GPT-4에 보여주고, 다양한 실험들의 검증 손실 곡선을 비교하는 프로그램을 요청. GPT-4가 생성한 결과물로, 30초 만에 완성.
     * AirBnB CSV 보고서 분석 프로그램: 월별 및 연도별 아파트 그룹화, 청소 비용 및 예약당 밤 수를 고려한 평균 임대 가격 통계를 생성. GPT-4를 사용하여 첫 시도에 작동하는 프로그램 작성.
          + 실제로 Airbnb 매출 통계 코드를 예시로, 간단한 설명만으로 곧바로 동작하는 파이썬 코드가 생성됨
          + 이런 작업을 직접 한다면 시간 대비 효율이 떨어지고, LLM 활용이 현명함

LLM의 한계

     * 시스템 프로그래밍의 복잡성: 시스템 프로그래밍, 특히 C 언어 프로그래밍에서 LLM의 한계가 뚜렸함
     * LLM의 활용: 복잡한 추론이 필요한 경우 LLM은 종종 실패함. 이로 인해 시스템 프로그래밍에서는 주로 문서화 도구로 사용됨.
     * 실험의 예시: 블룸 필터(Bloom filter)의 C 언어 구현 요구 사항 정의 및 작성. 해싱 함수의 중요한 측면에 중점을 둠. 구현은 100,000개의 요소를 저장할 수 있으며, 최대 5%의 거짓 긍정 확률을 가짐. 추가되는 요소는 널 종료 문자열임.
     * llama.cpp의 Q6_K 양자화 포맷을 LLM으로 설명받으려 했으나, 설명이나 코드 모두 실질적으로 쓸모 없는 결과가 나옴
     * 이와 같은 특수한 역공학·구조 해석은 여전히 사람이 직접 코드를 분석하고 주석을 남기는 수밖에 없음

""Putting Things in Perspective""

     * 현대 프로그래밍의 특성: 대부분의 현대 프로그래밍은 높은 수준의 추론을 요구하지 않고, 기존 것을 약간씩 바꿔 반복하는 작업이 많음.
     * LLM의 역할과 한계: LLM은 이러한 낮은 수준의 반복 업무에 유용하지만, 맥락 이해와 장기적 추론에는 약함
     * 프로그래밍 직업의 미래 가치: LLM이 일부 작업을 수행할 수 있다면, 몇 년 안에 프로그래밍 직업의 가치에 대해 재고할 필요가 있음.
     * LLM의 추론 능력: LLM이 일부 추론 능력을 가지고 있다고 볼 수 있음, 비록 그 모델이 약하고 불완전하더라도.
     * LLM 활용의 중요성: LLM을 활용하는 능력은 중요하며, 문제를 명확하게 서술하는 능력은 AI 뿐만 아니라 인간과의 소통에서도 중요함.

     * LLM은 더 이상 미래의 기술이 아닌, 실질적인 생산성 도구로 자리 잡고 있음
     * 본인은 앞으로도 ""쓸모 없는 디테일""에 시간을 쓰지 않기 위해 LLM을 적극 활용할 것임

        Hacker News 의견

     * LLM의 코드 지원에 대한 활성화 효과
          + LLM은 새로운 작업에 대한 활성화 에너지를 충분히 줄여서, 그렇지 않았다면 시도조차 하지 않았을 작업들을 실제로 완수하게 함.
          + 인터넷과 오픈소스 운동이 비슷한 효과를 가져와, 관심 있는 프로젝트를 시도하지 않으면 다른 사람이 비슷한 문제를 해결하여 재사용하거나 재목적화할 수 있는 기회를 제공함.
          + LLM 자체는 매우 유능하지 않지만, 기본 기술과 동기가 있는 사람들에게는 힘의 배가 효과를 제공함.
     * 프로그래밍에서 LLM의 이점
          + LLM을 사용하는 가장 좋은 시점은 주제에 대해 충분히 알고 있어서, 적어도 결과를 검증할 수 있고, 원하는 것을 상세하게 (이상적으로는 중요한 세부사항만) 설명할 수 있을 때임.
          + LLM은 작업을 더 빠르게 하거나, 그렇지 않았으면 시도하지 않았을 작업을 하게 하거나, 일회성이지만 가치 있는 프로그램을 만드는 데 도움을 줌.
          + 새로운 주제를 탐색하는 데도 매우 유용하며, 기본 용어를 이해하고, 구별되는 점을 듣고 이해하며, 주제에 대한 권위자가 누구인지 아는 것이 많은 분야로의 입문임.
     * LLM의 미평가된 측면
          + LLM은 '모든 것을 아는 개발자' 역할을 할 수 있음.
          + 아무리 숙련된 프로그래머라도 낯선 기술을 마주칠 때가 있으며, LLM은 이러한 상황에서 올바른 방향을 제시할 수 있음.
     * GPT-4를 이용한 버그 수정 경험
          + GPT-4를 사용하여 이해하기 어려운 디컴파일된 코드를 깨끗한 버전으로 변환하여 오랫동안 문제를 일으킨 버그를 수정할 수 있었음.
     * 코드 편집 툴 'aider' 소개
          + 많은 사람들이 GPT와 로컬 파일 간에 코드를 오가며 작업하는 번거로운 워크플로우를 견디고 있음.
          + 'aider'는 로컬 git 저장소를 GPT와 공유하여 새 코드와 편집 사항을 직접 파일에 적용하고, 프로젝트와 통합된 코드를 작성할 수 있게 함.
     * LLM의 한계 인식
          + 매우 유능한 소프트웨어 엔지니어가 자신의 전문 분야에서 LLM이 무용하다고 느끼지만, 여전히 그것을 사용할 방법을 찾으려고 함.
          + 협력을 통해 서로의 기술을 보완하고, 협력적인 노력이 부분의 합보다 더 클 수 있음.
     * 새 프로젝트 시작의 임피던스 문제
          + ChatGPT/LLM을 사용하면 프로젝트 시작 부분에 필요한 노력을 외부로 이전할 수 있음.
          + LLM은 더 느리고 비효율적일 수 있지만, 시작하는 데 필요한 비용을 줄여줌으로써 프로젝트 중요 부분에 더 많은 지구력을 유지할 수 있음.
     * LLM에 대한 비판적 시각
          + LLM이 훈련 세트 밖의 것을 얼마나 잘 처리하는지를 측정하는 수치적 증거가 필요함.
          + LLM이 흥미로운 텍스트 작업을 할 수 있지만, 훈련 세트 내의 쿼리 부분을 어떻게 보장할 수 있을지에 대한 의문이 있음.
     * LLM을 사용한 지식 습득
          + LLM을 사용하여 빠르게 지식을 얻고, LLM이 제공하는 정보가 터무니없는 것인지 확인할 수 있음.
          + 프로그래밍은 정확성을 쉽게 검증할 수 있기 때문에 LLM에 특히 적합함.
     * LLM에 대한 회의적인 시각
          + LLM이 매일 점점 더 많은 '잡지식'으로부터 사용자를 구해줌.
          + Redis의 창시자가 '잡지식'에 대해 언급하는 것은 아이러니하며, 이는 프로그래밍에 대한 일종의 냉소적인 관점을 보여줌.
"
"https://news.hada.io/topic?id=12690","Show GN: MarkSlides, 마크다운을 사용하여 슬라이드를 작성할 수 있게 해주는 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: MarkSlides, 마크다운을 사용하여 슬라이드를 작성할 수 있게 해주는 서비스

   소개
     * Markdown 문법을 사용하여 AI와 함께 슬라이드를 작성하고 발표 할 수 있습니다.
     * Keynote나 PPT에서는 불편한 소스 코드 삽입, 텍스트 포맷팅, 다이어그램 등을 개발 관련된 도구들과 AI를 함께 사용 할 수 있습니다.
     * 예시 결과물 - JavaScript Basic Syntax

   서비스 주소
     * MarkSlides.ai

   주요 기능
     * GPT-3.5, GPT-4를 사용한 슬라이드 자동 생성 및 컨텐츠 생성 (Command + K)
     * 소스 코드 syntax highlighting
     * MermaidJS 다이어그램, Typogram 렌더링
     * 슬라이드쇼, 발표자 모드 제공
     * PDF export
     * Public 링크로 슬라이드 노트 공유 가능

   관련 링크
     * GitHub: https://github.com/markslides/
     * Twitter: https://twitter.com/MarkSlides


   작년 OpenAI가 개최한 Prompter Day Seoul 2023 Final까지는 갔지만, 아쉽게도 Top 8위엔 못 들어서 수상은 못한 아이템인데요(해커톤 후기).
   그 때보다 발전시켜서 이제 공개하고 쓸만하게 되어 GeekNews에 처음으로 공개해 봅니다.
   개발자들을 위한 서비스라 꼭 여기에 올려서 피드백을 받고 싶었는데요, 써보시고 많은 피드백을 부탁 드립니다 : )!

   안녕하세요. 사용 중 문의사항이 있어 글 올립니다.

   문의 1.
   <!-- _header: 'header title' _footer: '[main-section 으로 이동](#main-section) _paginate: true -->

   이런식으로 사용하고 있습니다. slide settings 에서는 header, footer 에는 빈값이고 paginate 여부는 ON 상태이구요.

   slide show 상태에서는 header, footer 가 보이지 않습니다.
   slide show 상태에서 전체화면으로 바꿀 시 header, footer 가 보이긴 하는데 내부링크를 클릭하면 해당 목차가 아닌 다음 페이지로 이동되는 것 같습니다. (mode=presenter 도 마찬가지구요)
   편집 상태에서는 정상적으로 잘 이동이 되고 있습니다.
   혹시 제가 잘못사용 하고 있을까.. 어떤가해서 문의드립니다..!

   문의 2.
   혹시 save as .. 로 md 파일 저장시에.. header, footer, paginate 정보도 함께 노출 될 수 있을까요? header, footer 를 네비게이션 메뉴처럼 사용하고 있어서요..!

   감사합니다.

   알림을 못봐서 뒤늦게 확인하고 답변드립니다.

   질문 1.
   header, footer 가 보이지 않는 것은 화면이 잘려서 그런 것 같은데,
   실제 window 사이즈에 맞게 나오도록 수정하도록 하겠습니다.

   그리고 현재 슬라이드쇼에서 특정 슬라이드로 가도록 하는 기능은 제공되지 않습니다ㅠ
   Marp에서 제공하는 아래 기능에 대해서 우선순위를 조금 높여서 구현할 수 있도록 하겠습니다.
   https://github.com/orgs/marp-team/…

   질문 2.
   header, footer, paginate 정보도 함께 노출된다는 것이 어떤 의미인지 잘 이해하지 못했습니다.
   현재 .md 파일로 저장을 하게 되면 저장하는 시점의 Slide setting이 marp 호환 형태로 함께 들어가긴 합니다.
   이 부분은 조금 더 설명을 해주시면 좋을 것 같습니다!

   안녕하세요. marp, slidev 로 보고 있다가 참 괜찮은 것 같아서 사용해보려고 하는데요.. 마크다운 언어는 처음이라 익히면서 사용하고 있는데... 에디터에서 html은 사용할 수 없나요? 코드블럭이 아닌.. 예를들면
   <img src=""http://image.com/image.png"">;

   라던가.. <table> ... </table> 같은 태그들...

   뷰어나 pdf export  했을 때 HTML 텍스트 그대로 노출이 되고 있어서요.
   (사실 .. 다른 몇개 에디터에서도 HTML텍스트로 노출되고 있는데 그곳에서는 물어볼 곳이 없어서^_^;;)

   혹시 제가 잘못 사용하고 있는건지.. 아니면 에디터에서 변환이 안되는지 궁금해서 문의드려봅니다.

   안녕하세요, 현재 보안 이슈 때문에 HTML은 지원을 하지 않고 있습니다.

   아래 링크에 나와 있는 것처럼 marp에서도 HTML을 사용하려면 옵션을 변경해야 하는데, 이 부분은 향후 몇가지 보안에 문제가 될 만한 태그를 제외하고 사용 가능하도록 적용하려고 합니다.
   https://github.com/marp-team/marpit/issues/162#issuecomment-490004489

   그리고 궁극적으로는 GFM(GitHub Flavored Markdown) 스펙은 모두 지원하는 것이 목표입니다.
   https://github.github.com/gfm/#html-blocks

   사용하시다가 더 궁금한 점이 있으시면 아래 웹사이트의 하단 Contact Us 또는 Discord, Twitter 등으로 편하게 문의주세요~!
   https://www.markslides.ai/intro

   아. 보안이슈였군요.. 답변 감사합니다. 감사히 잘 쓸게요!

   간만에 힙해보이는 프로덕트네요.

   페이지 구분하는 방법 찾기가 어렵네요.
   '---'로 구분이 가능하네요. 사용성 개선하면 짧은 PT에 사용할 것 같아요

   안녕하세요, MarkSlides 개발자입니다.
   처음 사용하는 분들이 사용법을 잘 익히실 수 있도록 튜토리얼을 개선해보도록 하겠습니다~!

   가볍게 쓰기에 좋은 서비스 같네요.

   슬라이드 구분하는 구분자가 무엇인지 또는 쉽게 슬라이드 한장을 추가하는 방법이 눈에 잘 안보이는거 같아요.

   안녕하세요, MarkSlides 개발자입니다.
   현재 새로운 슬라이드는 CMD + Enter(현재 맥에서만 작동) 단축키로 추가하실 수 있습니다.
   다만, 아직 튜토리얼이 따로 없고 가이드 문서만 제공하고 있어서 이후에 튜토리얼을 개선해서 제공하려고 합니다~!
"
"https://news.hada.io/topic?id=12697","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   Rust 공부를 시작했습니다.

   재충전이 너무 필요해요. 스트레스 지수가 높거든요

   무라카미 하루키의 <도시와 그 불확실한 벽> 다 읽고 스벨트 공부 겸 튜토리얼 번역할 생각입니다.

   매주 금요일날 글을 남기시는군요.

   저는 이번주 스키장을 가고
   발더스 게이트 3 를 즐길것 같습니다.

   책을 좀 읽어야 하는데 쉽지 않네요

   놀아야죠. 술먹고, 게임하고

   1월 1일부터 운동을 제대로 시작해보려고 좀 달렸더니 후유증이 좀 있네요 ㅎㅎ
   주말엔 쉬면서 몸도 좀 추스려야 할듯 합니다. 다들 새해엔 건강하세요!
"
"https://news.hada.io/topic?id=12729","Librum - 오픈소스 e북 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Librum - 오픈소스 e북 플랫폼

     * 모든 디바이스에서 사용 가능한 이북리더이면서 자신만의 온라인 라이브러리를 어디서나 관리가능
     * 노트 작성, 북마킹, 하이라이팅 등의 기능 제공
     * AI와 연동하여 설명 및 요약 기능 이용
     * 약 7만권의 서적을 기본으로 내장
     * 개인 독서 통계 제공

   괜찮네요
"
"https://news.hada.io/topic?id=12652","1912년 전류 변환기와 전기자동차를 가진 여성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       1912년 전류 변환기와 전기자동차를 가진 여성

여성과 정류기 그리고 1912년의 자동차

     * 1912년에 촬영된 사진으로, 여성과 정류기, 그리고 전기 자동차가 함께 있는 모습을 담고 있음.
     * 이 사진은 제너럴 일렉트릭 컴퍼니(General Electric Company)가 창작하였으며, 전기 자동차와 발전기를 주제로 하고 있음.
     * 원본 사진은 제너럴 일렉트릭 컴퍼니가 발행하였고, 1912년에 제작된 것으로, 물리적 형태는 흑백 사진이며 크기는 8 x 10인치(20 x 24cm)임.

사진의 기술적 정보

     * 사진은 아카이브용 TIFF 파일로, Epson Expression 1680 스캐너를 사용하여 600dpi 해상도로 스캔되었으며, 파일 크기는 18.6MB, 그레이스케일 색상으로 5838 x 4755 픽셀의 해상도를 가지고 있음.
     * 디지털 형식은 JPEG 이미지이며, 파일 이름은 'NYSMU104190'이고, 2014년 6월 2일에 생성되었음.

소장 기관 및 저작권 정보

     * 이 사진은 혁신과 과학의 박물관(miSci - Museum of Innovation and Science)이 소장하고 있으며, 교육적 목적으로 사용할 경우 출처를 'miSci - Museum of Innovation and Science'로 명시해야 함.
     * 사진의 다른 용도로 사용하기 위해서는 miSci로부터 사전 서면 허가를 받아야 함.
     * miSci의 연락처 정보는 뉴욕 주 스케넥터디에 위치하고 있으며, 웹사이트 주소는 www.misci.org임.

GN⁺의 의견

     * 이 사진은 초기 전기 자동차의 역사와 여성의 기술 분야 참여를 동시에 보여주는 중요한 역사적 자료임.
     * 제너럴 일렉트릭 컴퍼니와 같은 대기업의 역사적 기록을 통해 당시의 기술 발전과 사회적 변화를 엿볼 수 있음.
     * 혁신과 과학의 박물관(miSci)는 과학과 기술의 역사를 보존하고 교육하는 데 중요한 역할을 하며, 이러한 자료를 통해 과거와 현재를 연결하는 통찰을 제공함.

        Hacker News 의견

     * 전기차가 가솔린 차량 대신 선택되었다면 배터리 기술이 훨씬 더 발전했을 것이라는 생각을 하지 않을 수 없음. 가솔린 엔진에 투자된 모든 효율성 향상 노력이 배터리와 전기 모터에 적용되었을 것.
          + 1912년 당시 가솔린 차량의 주행 범위는 100마일이 조금 넘었고, 최고의 전기차는 80마일, 대부분은 50마일이었음. 모델 T가 전기차였더라면 얼마나 좋았을까 하는 아쉬움이 있음.
          + 포드는 니켈-철 배터리가 요구 사항을 충족시키지 못한다고 보고, 프로젝트를 진행하기 위해 납산 배터리로 대체했지만, 이에 포드의 인내심이 한계에 도달함. 에디슨 배터리 없이 전기 플리버는 존재 이유가 없다고 생각했고, 150만 달러를 투자한 후 프로젝트를 중단함.
     * 초기 전기차의 모터가 얼마나 원시적이었는지 종종 간과됨.
          + 니콜라 테슬라가 발명한 유도 모터가 존재했지만, 교류(AC)가 필요했기 때문에 차량에 사용할 수 없었음. 그래서 차량은 브러시가 달린 직류(DC) 모터를 사용했는데, 이는 최대 효율이 아니었고 브러시가 마모되어 교체해야 했음.
          + 오늘날에는 효율적인 유도 모터와 브러시리스 DC 모터를 차량에 사용하는데, 이는 저렴한 전력 전자 기술 덕분에 가능함. 전력 전자 기술은 1960년대에 등장했고 1990년대에야 저렴해짐.
     * 베이커 전기차를 타 본 경험이 있는데, 타 본 골동품 중 가장 멋진 경험 중 하나임.
          + 초기 전기차는 거의 여성들에게만 팔렸음. 초기 자동차는 지저분하고 위험했기 때문에, 안전하고 쉽게 조작할 수 있는 차량은 부유한 사람들이 아내들에게 선물로 구입했음. 전기 시동기의 등장이 초기 전기차의 종말을 가져왔는데, 이전에는 차를 손으로 크랭킹하다가 엄지손가락을 다치는 일이 매우 흔했음.
     * 이 디지털 이미지는 교육적 목적으로 사용될 수 있으며, miSci - 혁신과 과학의 박물관으로 인용해야 함. 다른 용도로 이미지를 사용하기 전에는 사전 서면 허가가 필요함.
     * 이들은 단일 충전으로 30-40마일의 주행 범위를 가졌는데, 이는 현대의 플러그인 전기 하이브리드 차량이 배터리 전력으로 달릴 수 있는 범위와 사실상 동일함.
     * Fully Charged 쇼에서 이 차량(또는 이 시대의 차량)에 대한 에피소드를 만들었는데, 많은 컨셉이 얼마나 이르게 등장했는지 오늘날의 전기차와 디자인이 유사한 점을 보여주는 것이 흥미로움.
     * 렉티파이어가 무엇인지 모르는 사람들을 위해 설명:
          + 렉티파이어는 교류(AC)를 직류(DC)로 변환하는 전기 장치임. 교류는 주기적으로 방향이 바뀌고, 직류는 한 방향으로만 흐름. 반대 작업(직류를 교류로 변환)은 인버터가 수행함.
     * 최근 시승 테스트 링크 제공.
     * 모든 것이 좋지만, 이 차에는 완전 자율 주행 기능(FSD)이 있는지에 대한 농담.
          + 얼마나 멀리 왔는지 보는 것은 교훈적임. 10년 전에는 샌프란시스코 베이 지역에서 테슬라를 보는 것이 대화의 주제였음. 오늘날에는 내 차고에 두 대의 테슬라가 있고, 어제 새해 전야 파티에 갔을 때 참석자의 80%가 테슬라를 운전했거나 테슬라에 의해 운전되었음.
     * 사이트가 해커뉴스의 트래픽을 더 이상 감당하지 못할 것 같으니 사전에 거울을 준비함.
"
"https://news.hada.io/topic?id=12665","깃헙이 MySQL 5.7에서 MySQL 8.0으로 넘어가는 과정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  깃헙이 MySQL 5.7에서 MySQL 8.0으로 넘어가는 과정

     * GitHub은 1200개 이상의 MySQL 호스트를 MySQL 8.0으로 업그레이드하는 작업을 진행했고, 이 진행 과정에서 업그레이드 진행 사유로는 MySQL 5.7의 수명이 다하고 최신 보안 패치와 새로운 기능을 활용하기 위해 이루어졌으며, 총 1년 이상의 과정을 거쳤습니다. 다양하고 복잡한 MySQL 인프라를 업그레이드하면서 발생한 기술적 도전과 배운 점은 자동화와 플릿 관리의 중요성을 강조하고 있습니다.
     * GitHub은 15년 전에 Ruby on Rails 애플리케이션과 단일 MySQL 데이터베이스로 시작되었습니다. 그 이후로 GitHub은 플랫폼의 스케일링 및 내구성 요구를 충족시키기 위해 MySQL 아키텍처를 개선해 왔습니다. 그리고 이번에는 1200개 이상의 MySQL 호스트를 MySQL 8.0으로 업그레이드하는 작업을 수행했습니다.
     * 업그레이드 동기는 MySQL 5.7이 수명이 다해가면서, 최신 보안 패치, 버그 수정 및 성능 향상을 얻기 위해 MySQL 8.0으로 업그레이드하고자 했습니다. 또한 8.0에는 Instant DDLs, invisible indexes, compressed bin logs 등의 새로운 기능이 포함되어 있습니다.
     * GitHub의 MySQL 인프라는 1200개 이상의 호스트로 이루어진 다양하고 복잡한 배포로 구성되어 있습니다. 이를 유지하면서 업그레이드를 수행하기 위해 GitHub은 세심한 계획, 테스트 자동화, 그리고 다양한 팀 간의 협업이 필요했습니다.
     * 업그레이드를 준비하는 단계에서는 인프라를 업그레이드하고, 애플리케이션 호환성을 확인하며, 커뮤니케이션과 투명성을 유지하고, 천천히 진행되는 업그레이드 전략을 수립하는 등의 작업을 수행했습니다. 업그레이드는 여러 단계로 진행되었고, 중요한 측면은 롤백 가능성을 유지하면서 업그레이드를 진행하는 것이었습니다.
     * 업그레이드 도중에는 MySQL 8.0에서 MySQL 5.7로의 롤백이 어려운 문제가 있었지만, GitHub은 롤백 기능을 유지하면서 업그레이드를 안전하게 수행했습니다. Vitess와 같은 다양한 기술적 도전에 부딪히기도 했지만, 이러한 문제들을 극복하며 전체 업그레이드 과정은 1년 이상 소요되었습니다.
     * 이 프로젝트를 통해 얻은 경험과 교훈은 GitHub에게 MySQL 업그레이드가 중요한 루틴 유지보수 중 하나임을 강조하며, 자동화와 안정적인 플릿 관리 툴 개발이 향후 업그레이드를 더 효율적으로 수행할 수 있게 할 것이라는 결론을 도출했습니다.

   MS는 인수한 회사에서 자사 기술 stack으로 migration을 하는걸 굳이 강요안하는것 같습니다... 아직도 RoR / mysql이군요

   깃헙 db 마이그리이션.. 상상만 해도 끔찍하네요

   손되면 답 없는 거 알기에 가만있던거 아닐까요? ㅎ
"
"https://news.hada.io/topic?id=12632","[2023/12/25 ~ 12/31] 이번 주의 주요 ML 논문 (Top ML Papers of the Week) ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2023/12/25 ~ 12/31] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

  개요

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주 선정된 논문들을 살펴보면 대체로 GPT-4와 같은 대형 언어 모델(Large Language Models, LLMs)을 중심으로 한 연구가 주류를 이루는 경향이 있는 것으로 보입니다. 특히 이들 연구는 GPT-4의 새로운 API를 활용하거나, LLM에서의 사실 회상 능력, 그리고 어떻게 LLM을 더 나은, 밀도 높은 검색능력으로 만들 수 있는지에 초점을 맞추고 있습니다. 또한, 언어 모델 기반의 수학적 문제 해결 및 이러한 모델들이 어떻게 추론을 수행할 수 있는지에 대한 주제도 포함되어 있습니다.
     * 이러한 경향이 나타나는 것은 LLM가 인공지능 분야에서 여전히 주요한 연구 주제로 남아있기 때문일 수 있습니다. GPT-4와 같은 모델들은 뛰어난 언어 이해 및 생성 능력을 바탕으로 다양한 응용 분야에서 활용 가능성을 넓히고 있으며, 이 능력을 개선하고 새로운 방식으로 활용하는 연구가 지속적으로 이루어지고 있습니다. 실제 성능 향상을 위한 구체적인 방법론 연구 및 적용 사례 분석이 중요한 연구 영역으로 부상하고 있으며 이번 주 선정된 논문들이 이러한 경향을 반영하고 있는 것으로 보입니다.
     * 다른 한편으로, LLM의 이해도와 추론능력을 평가하고 향상시키려는 연구 또한 인기가 있는 주제로 보입니다. 이를 통해 지능형 에이전트가 인간과 더 자연스럽고 효과적으로 상호작용할 수 있는 방법을 탐구하는 것은 인공지능 분야에서 매우 중요한 과제일 것입니다. 이를 통해 개선된 효율성 및 실생활 적용 가능성을 탐구하는 것은 향후 연구 동향에서 중요한 자리를 차지할 것으로 예상됩니다.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  코그에이전트: GUI 에이전트를 위한 시각적 언어 모델 / CogAgent: A Visual Language Model for GUI Agents

    논문 소개

     * GUI 이해 및 탐색에 특화된 180억 개의 파라미터 시각 언어 모델 제공, 고해상도 입력(1120x1120) 지원, 시각적 질의응답, 시각적 접지, GUI 에이전트와 같은 작업에서 능력 발휘, 5개의 텍스트가 풍부한 벤치마크와 4개의 일반 VQA 벤치마크에서 최신 기술을 달성했습니다.

     Presents an 18 billion parameter visual language model specializing in gui understanding and navigation; supports high-resolution inputs (1120x1120) and shows abilities in tasks such as visual q&a, visual grounding, and gui agent; achieves state of the art on 5 text-rich and 4 general vqa benchmarks.

    논문 초록(Abstract)

     * 사람들은 컴퓨터나 스마트폰 화면과 같은 그래픽 사용자 인터페이스(GUI)를 통해 디지털 기기에서 엄청난 시간을 보내고 있습니다. ChatGPT와 같은 대규모 언어 모델(LLM)은 이메일 작성과 같은 작업에 도움을 줄 수 있지만 GUI를 이해하고 상호 작용하는 데 어려움을 겪기 때문에 자동화 수준을 높일 수 있는 잠재력이 제한됩니다. 이 논문에서는 GUI 이해 및 탐색에 특화된 180억 개의 파라미터를 가진 시각적 언어 모델(VLM)인 CogAgent를 소개합니다. 저해상도 및 고해상도 이미지 인코더를 모두 활용하여 1120*1120 해상도의 입력을 지원함으로써 작은 페이지 요소와 텍스트도 인식할 수 있습니다. 범용 시각 언어 모델인 CogAgent는 텍스트가 풍부한 5개의 벤치마크와 4개의 일반 VQA 벤치마크(VQAv2, OK-VQA, Text-VQA, ST-VQA, ChartQA, infoVQA, DocVQA, MM-Vet, POPE)에서 최고 수준의 성능을
       달성했습니다. 스크린샷만을 입력으로 사용하는 코그에이전트는 PC와 안드로이드 GUI 탐색 작업 모두에서 추출된 HTML 텍스트를 사용하는 LLM 기반 방식인 마인드2웹과 AITW보다 성능이 뛰어나며, 기술 수준을 한 단계 발전시켰습니다. 모델과 코드는 https://github.com/THUDM/CogVLM 에서 확인할 수 있습니다.

     People are spending an enormous amount of time on digital devices through graphical user interfaces (GUIs), e.g., computer or smartphone screens. Large language models (LLMs) such as ChatGPT can assist people in tasks like writing emails, but struggle to understand and interact with GUIs, thus limiting their potential to increase automation levels. In this paper, we introduce CogAgent, an 18-billion-parameter visual language model (VLM) specializing in GUI understanding and navigation. By utilizing both low-resolution and high-resolution image encoders, CogAgent supports input at a resolution of 1120*1120, enabling it to recognize tiny page elements and text. As a generalist visual language model, CogAgent achieves the state of the art on five text-rich and four general VQA benchmarks, including VQAv2, OK-VQA, Text-VQA, ST-VQA, ChartQA, infoVQA, DocVQA, MM-Vet, and POPE. CogAgent, using only screenshots as input, outperforms LLM-based methods that consume extracted HTML
     text on both PC and Android GUI navigation tasks -- Mind2Web and AITW, advancing the state of the art. The model and codes are available at https://github.com/THUDM/CogVLM .

    논문 링크

   https://arxiv.org/abs/2312.08914

    더 읽어보기

   https://x.com/cenyk1230/status/1739916469272789222


  구글 제미니에서 오픈AI Q*(큐스타)까지: 생성적 인공지능(AI) 연구 환경 재편에 대한 설문조사 / From Google Gemini to OpenAI Q* (Q-Star): A Survey of Reshaping the Generative Artificial Intelligence (AI) Research Landscape

    논문 소개

     * 300개 이상의 논문을 조사하고 생성형 AI 분야에서 주목해야 할 연구 개발 사항을 요약한 이 보고서는 계산상의 어려움, 확장성, 실제 적용 가능성, 의료, 금융, 교육 등의 분야에서 발전을 주도할 수 있는 생성형 AI의 잠재력을 다룹니다.

     Surveys 300+ papers and summarizes research developments to look at in the space of generative ai; it covers computational challenges, scalability, real-world implications, and the potential for gen ai to drive progress in fields like healthcare, finance, and education.

    논문 초록(Abstract)

     * 이 종합적인 설문조사는 전문가 혼합(MoE), 멀티모달 학습, 인공 일반 지능(AGI)을 향한 추측되는 발전의 혁신적 영향에 특히 중점을 두고 진화하는 생성형 인공지능(AI)의 환경을 탐구했습니다. 이 보고서는 생성적 인공지능(AI)의 현재 상태와 미래 궤적을 비판적으로 검토하고, 구글의 제미니와 기대되는 오픈AI Q* 프로젝트와 같은 혁신이 어떻게 다양한 영역에서 연구 우선순위와 애플리케이션을 재편하고 있는지 살펴보았으며, 생성적 인공지능 연구 분류체계에 대한 영향 분석도 포함했습니다. 이 보고서는 이러한 기술의 계산적 과제, 확장성, 실생활에 미치는 영향을 평가하는 동시에 의료, 금융, 교육 등의 분야에서 상당한 진전을 이끌어낼 수 있는 잠재력을 강조했습니다. 또한 인공지능을 주제로 한 논문과 인공지능이 생성한 논문 모두의 확산으로 인해
       제기되는 새로운 학문적 과제를 다루며 동료 심사 과정과 학술적 소통에 미치는 영향을 조사했습니다. 이 연구는 AI 개발에 윤리적이며 인간 중심적인 방법을 통합하고 사회적 규범과 복지에 부합하도록 하는 것이 중요하다는 점을 강조했으며, 생성적 AI에서 MoE, 멀티모달, AGI를 균형 있고 양심적으로 사용하는 데 초점을 맞춘 미래 AI 연구 전략을 설명했습니다.

     This comprehensive survey explored the evolving landscape of generative Artificial Intelligence (AI), with a specific focus on the transformative impacts of Mixture of Experts (MoE), multimodal learning, and the speculated advancements towards Artificial General Intelligence (AGI). It critically examined the current state and future trajectory of generative Artificial Intelligence (AI), exploring how innovations like Google's Gemini and the anticipated OpenAI Q* project are reshaping research priorities and applications across various domains, including an impact analysis on the generative AI research taxonomy. It assessed the computational challenges, scalability, and real-world implications of these technologies while highlighting their potential in driving significant progress in fields like healthcare, finance, and education. It also addressed the emerging academic challenges posed by the proliferation of both AI-themed and AI-generated preprints, examining their impact
     on the peer-review process and scholarly communication. The study highlighted the importance of incorporating ethical and human-centric methods in AI development, ensuring alignment with societal norms and welfare, and outlined a strategy for future AI research that focuses on a balanced and conscientious use of MoE, multimodality, and AGI in generative AI.

    논문 링크

   https://arxiv.org/abs/2312.10868

    더 읽어보기

   https://x.com/omarsar0/status/1740119485011390558


  PromptBench: 대규모 언어 모델 평가를 위한 통합 라이브러리 / PromptBench: A Unified Library for Evaluation of Large Language Models

    논문 소개

     * 신속한 구축, 신속한 엔지니어링, 데이터 세트 및 모델 로딩, 적대적 신속한 공격, 동적 평가 프로토콜, 분석 도구 등의 기능으로 구성된 통합 라이브러리로, LLMS의 종합적인 평가 및 분석을 지원합니다.

     A unified library that supports comprehensive evaluation and analysis of llms; it consists of functionalities for prompt construction, prompt engineering, dataset and model loading, adversarial prompt attack, dynamic evaluation protocols, and analysis tools.

    논문 초록(Abstract)

     * 대규모 언어 모델(LLM)의 평가는 그 성능을 평가하고 잠재적인 보안 위험을 완화하는 데 매우 중요합니다. 이 논문에서는 LLM을 평가하기 위한 통합 라이브러리인 PromptBench를 소개합니다. 이 라이브러리는 프롬프트 구성, 프롬프트 엔지니어링, 데이터 세트 및 모델 로딩, 적대적 프롬프트 공격, 동적 평가 프로토콜, 분석 도구 등 연구자들이 쉽게 사용하고 확장할 수 있는 몇 가지 주요 구성 요소로 구성되어 있습니다. PromptBench는 새로운 벤치마크 생성, 다운스트림 애플리케이션 배포, 새로운 평가 프로토콜 설계에 대한 독창적인 연구를 촉진할 수 있는 연구 목적의 개방적이고 일반적이며 유연한 코드베이스로 설계되었습니다. 이 코드는 https://github.com/microsoft/promptbench 에서 확인할 수 있으며 지속적으로 지원될 예정입니다.

     The evaluation of large language models (LLMs) is crucial to assess their performance and mitigate potential security risks. In this paper, we introduce PromptBench, a unified library to evaluate LLMs. It consists of several key components that are easily used and extended by researchers: prompt construction, prompt engineering, dataset and model loading, adversarial prompt attack, dynamic evaluation protocols, and analysis tools. PromptBench is designed to be an open, general, and flexible codebase for research purposes that can facilitate original study in creating new benchmarks, deploying downstream applications, and designing new evaluation protocols. The code is available at: https://github.com/microsoft/promptbench and will be continuously supported.

    논문 링크

   https://arxiv.org/abs/2312.07910v1

    더 읽어보기

   https://x.com/omarsar0/status/1739360426134028631


  새로운 GPT-4 API 활용하기 / Exploiting Novel GPT-4 APIs

    논문 소개

     * GPT-4 apis에 노출된 세 가지 기능인 미세 조정, 함수 호출, 지식 검색에 대해 레드팀 작업을 수행하여 주요 결과를 도출했습니다: 1) 유해한 예제 15개 또는 양성 예제 100개에 대한 미세 조정으로 GPT-4의 핵심 안전장치를 제거할 수 있음, 2) GPT-4 어시스턴트가 함수 호출 스키마를 공개하고 임의의 함수 호출을 실행하도록 만들 수 있음, 3) 검색 문서에 명령을 주입하여 지식 검색을 탈취할 수 있음.

     Performs red-teaming on three functionalities exposed in the gpt-4 apis: fine-tuning, function calling, and knowledge retrieval; main findings: 1) fine-tuning on as few as 15 harmful examples or 100 benign examples can remove core safeguards from gpt-4, 2) gpt-4 assistants divulge the function call schema and can be made to execute arbitrary function calls, and 3) knowledge retrieval can be hijacked by injecting instructions into retrieval documents.

    논문 초록(Abstract)

     * 언어 모델 공격은 일반적으로 모델 가중치에 대한 전체 화이트박스 액세스 또는 텍스트 생성 API로 제한된 블랙박스 액세스라는 두 가지 극단적인 위협 모델 중 하나를 가정합니다. 그러나 실제 API는 텍스트 생성보다 더 유연한 경우가 많으며, 이러한 API는 '그레이박스' 액세스를 노출하여 새로운 위협 벡터로 이어질 수 있습니다. 이를 탐구하기 위해 저희는 GPT-4 API에 노출된 세 가지 새로운 기능인 미세 조정, 함수 호출, 지식 검색을 레드팀으로 구성했습니다. 15개의 유해한 예시 또는 100개의 양성 예시에 대해 모델을 미세 조정하면 GPT-4에서 핵심 안전장치를 제거하여 다양한 유해한 결과를 초래할 수 있다는 사실을 발견했습니다. 또한, GPT-4 어시스턴트가 함수 호출 스키마를 쉽게 공개하고 임의의 함수 호출을 실행하도록 만들 수 있다는 사실도
       발견했습니다. 마지막으로, 검색 문서에 명령어를 삽입하여 지식 검색을 탈취할 수 있다는 사실을 발견했습니다. 이러한 취약점은 API가 노출하는 기능을 추가하면 새로운 취약점이 발생할 수 있다는 점을 강조합니다.

     Language model attacks typically assume one of two extreme threat models: full white-box access to model weights, or black-box access limited to a text generation API. However, real-world APIs are often more flexible than just text generation: these APIs expose ``gray-box'' access leading to new threat vectors. To explore this, we red-team three new functionalities exposed in the GPT-4 APIs: fine-tuning, function calling and knowledge retrieval. We find that fine-tuning a model on as few as 15 harmful examples or 100 benign examples can remove core safeguards from GPT-4, enabling a range of harmful outputs. Furthermore, we find that GPT-4 Assistants readily divulge the function call schema and can be made to execute arbitrary function calls. Finally, we find that knowledge retrieval can be hijacked by injecting instructions into retrieval documents. These vulnerabilities highlight that any additions to the functionality exposed by an API can create new vulnerabilities.

    논문 링크

   https://arxiv.org/abs/2312.14302

    더 읽어보기

   https://x.com/omarsar0/status/1739677995747450964


  LLM의 팩트 리콜 / Fact Recalling in LLMs

    논문 소개

     * 사실적 기억을 위한 룩업 테이블을 구현하는 MLP 계층의 구현 방식을 조사하고, 파이시아 2.8b의 초기 MLP가 다양한 운동선수가 세 가지 스포츠 중 어떤 스포츠를 하는지 조회하는 방법에 대한 연구 범위를 넓히고, 초기 MLP 계층이 룩업 테이블 역할을 한다고 제안하고 모델에서 사실적 지식의 기억을 다중 토큰 임베딩으로 생각할 것을 권장합니다.

     Investigates how mlp layers implement a lookup table for factual recall; scopes the study on how early mlps in pythia 2.8b look up which of 3 different sports various athletes play; suggests that early mlp layers act as a lookup table and recommends thinking about the recall of factual knowledge in the model as multi-token embeddings.

    논문 링크

   https://www.alignmentforum.org/s/hpWHhjvjn67LJ4xXX/p/iGuwZTHWb6DFY3sKB

    더 읽어보기

   https://x.com/NeelNanda5/status/1738559368361349122
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  수학용 생성형 AI: 1부 - MathPile: 10억 토큰 규모의 수학 사전 학습 코퍼스 / Generative AI for Math: Part I -- MathPile: A Billion-Token-Scale Pretraining Corpus for Math

    논문 소개

     * 파운데이션 모델을 학습하기 위해 약 95억 개의 토큰으로 구성된 다양하고 고품질의 수학 중심 코퍼스를 제공합니다.

     Presents a diverse and high-quality math-centric corpus comprising of ~9.5 billion tokens to train foundation models.

    논문 초록(Abstract)

     * 고품질의 대규모 말뭉치는 파운데이션 모델 구축의 초석입니다. 이번 작업에서는 약 95억 개의 토큰으로 구성된 다양하고 고품질의 수학 중심 말뭉치인 ${MathPile}$ 을 소개합니다. 이 코퍼스를 구축하는 과정에서 우리는 '적은 것이 많을수록 좋다'는 원칙을 고수했으며, 학습 전 단계에서부터 데이터의 양보다 질이 우위에 있다는 확고한 신념을 가지고 있었습니다. 전처리, 사전 필터링, 언어 식별, 클리닝, 필터링, 중복 제거 등 복잡한 전처리 과정을 거쳐 말뭉치의 고품질을 보장하기 위해 세심한 데이터 수집 및 처리 노력을 기울였습니다. 또한 다운스트림 벤치마크 테스트 세트에서 데이터 오염 감지를 수행하여 중복을 제거했습니다. 텍스트를 통한 수학적 추론이 언어 모델의 수학적 추론 능력을 향상시키는 데 도움이 되기를 바랍니다. 향후 이 분야의
       발전을 촉진하기 위해 처리에 사용되는 스크립트와 함께 다양한 버전의 $MathPile$ 을 오픈소스화할 계획입니다.

     High-quality, large-scale corpora are the cornerstone of building foundation models. In this work, we introduce ${MathPile}$, a diverse and high-quality math-centric corpus comprising about 9.5 billion tokens. Throughout its creation, we adhered to the principle of {less is more}, firmly believing in the supremacy of data quality over quantity, even in the pre-training phase. Our meticulous data collection and processing efforts included a complex suite of preprocessing, prefiltering, language identification, cleaning, filtering, and deduplication, ensuring the high quality of our corpus. Furthermore, we performed data contamination detection on downstream benchmark test sets to eliminate duplicates. We hope our ${MathPile}$ can help to enhance the mathematical reasoning abilities of language models. We plan to open-source different versions of \mathpile with the scripts used for processing, to facilitate future developments in this field.

    논문 링크

   https://arxiv.org/abs/2312.17120

    더 읽어보기

   https://x.com/arankomatsuzaki/status/1740564961032556942


  원칙적인 지침만 있으면 LLaMA-1/2, GPT-3.5/4에 대한 질문이 가능합니다 / Principled Instructions Are All You Need for Questioning LLaMA-1/2, GPT-3.5/4

    논문 소개

     * 대규모 언어 모델을 쿼리하고 프롬프트하는 프로세스를 간소화하기 위해 고안된 26가지 지침 원칙을 소개하고, 이 원칙을 적용하여 llama-1/2(7b, 13b, 70b), gpt-3.5/4에 대한 광범위한 실험을 수행하여 지침 및 프롬프트 설계에 대한 효과를 검증합니다.

     Introduces 26 guiding principles designed to streamline the process of querying and prompting large language models; applies these principles to conduct extensive experiments on llama-1/2 (7b, 13b and 70b), gpt-3.5/4 to verify their effectiveness on instructions and prompts design.

    논문 초록(Abstract)

     * 이 논문에서는 대규모 언어 모델을 쿼리하고 프롬프트하는 프로세스를 간소화하기 위해 고안된 26가지 기본 원칙을 소개합니다. 우리의 목표는 다양한 규모의 대규모 언어 모델에 대한 질문을 공식화하고, 그 능력을 검사하며, 다양한 프롬프트에 입력할 때 다양한 규모의 대규모 언어 모델의 동작에 대한 사용자의 이해도를 높이는 기본 개념을 단순화하는 것입니다. 명령어 및 프롬프트 설계에 대해 제안된 원칙의 효과를 검증하기 위해 LLaMA-1/2(7B, 13B, 70B), GPT-3.5/4에서 광범위한 실험을 수행했습니다. 이 연구가 대규모 언어 모델의 프롬프트를 연구하는 연구자들에게 더 나은 가이드를 제공할 수 있기를 바랍니다. 프로젝트 페이지는 https://github.com/VILA-Lab/ATLAS 에서 확인할 수 있습니다.

     This paper introduces 26 guiding principles designed to streamline the process of querying and prompting large language models. Our goal is to simplify the underlying concepts of formulating questions for various scales of large language models, examining their abilities, and enhancing user comprehension on the behaviors of different scales of large language models when feeding into different prompts. Extensive experiments are conducted on LLaMA-1/2 (7B, 13B and 70B), GPT-3.5/4 to verify the effectiveness of the proposed principles on instructions and prompts design. We hope that this work provides a better guide for researchers working on the prompting of large language models. Project page is available at https://github.com/VILA-Lab/ATLAS.

    논문 링크

   https://arxiv.org/abs/2312.16171v1

    더 읽어보기

   https://x.com/_akhaliq/status/1739857456161759455


  파운데이션 모델을 사용한 추론에 대한 설문 조사 / A Survey of Reasoning with Foundation Models

    논문 소개

     * 다양한 추론 작업, 방법, 벤치마크, 잠재적인 미래 방향에 대한 최신 발전 사항을 강조하면서 추론의 중요한 파운데이션 모델에 대한 포괄적인 조사를 제공하고, 다중 모드 학습, 자율 에이전트, 슈퍼 정렬과 같은 다른 개발이 추론 연구를 가속화하고 확장하는 방법에 대해서도 논의합니다.

     Provides a comprehensive survey of seminal foundational models for reasoning, highlighting the latest advancements in various reasoning tasks, methods, benchmarks, and potential future directions; also discusses how other developments like multimodal learning, autonomous agents, and super alignment accelerate and extend reasoning research.

    논문 초록(Abstract)

     * 복잡한 문제 해결을 위한 중요한 능력인 추론은 협상, 의료 진단, 범죄 수사와 같은 다양한 실제 환경에서 중추적인 역할을 합니다. 이는 인공지능(AGI) 분야의 기본 방법론으로 사용됩니다. 파운데이션 모델이 지속적으로 개발됨에 따라 추론 작업에서 파운데이션 모델의 능력을 탐구하는 데 대한 관심이 높아지고 있습니다. 이 논문에서는 추론을 위해 제안되었거나 적용 가능한 중요한 파운데이션 모델을 소개하고 다양한 추론 작업, 방법 및 벤치마크의 최신 발전 사항을 강조합니다. 그런 다음 파운데이션 모델 내에서 추론 능력의 출현 이면에 있는 잠재적인 미래 방향에 대해 살펴봅니다. 또한 추론의 맥락에서 멀티모달 학습, 자율 에이전트, 슈퍼 얼라인먼트의 관련성에 대해서도 논의합니다. 이러한 미래 연구 방향에 대해 논의함으로써 연구자들이 이
       분야를 탐구하는 데 영감을 얻고, 파운데이션 모델을 통한 추론의 발전을 촉진하며, AGI의 발전에 기여할 수 있기를 바랍니다.

     Reasoning, a crucial ability for complex problem-solving, plays a pivotal role in various real-world settings such as negotiation, medical diagnosis, and criminal investigation. It serves as a fundamental methodology in the field of Artificial General Intelligence (AGI). With the ongoing development of foundation models, there is a growing interest in exploring their abilities in reasoning tasks. In this paper, we introduce seminal foundation models proposed or adaptable for reasoning, highlighting the latest advancements in various reasoning tasks, methods, and benchmarks. We then delve into the potential future directions behind the emergence of reasoning abilities within foundation models. We also discuss the relevance of multimodal learning, autonomous agents, and super alignment in the context of reasoning. By discussing these future research directions, we hope to inspire researchers in their exploration of this field, stimulate further advancements in reasoning with
     foundation models, and contribute to the development of AGI.

    논문 링크

   https://arxiv.org/abs/2312.11562v4

    더 읽어보기

   https://x.com/omarsar0/status/1740729489661874632


  고밀도 검색을 위한 더 나은 기반이 되는 대규모 언어 모델 만들기 / Making Large Language Models A Better Foundation For Dense Retrieval

    논문 소개

     * 고밀도 검색을 위해 LLM을 조정하는 LLaRA를 제안합니다. 이는 두 가지 전제 작업인 EBAE(임베딩 기반 자동 인코딩)와 EBAR(임베딩 기반 자동 회귀)로 구성되며, 각각 LLM의 텍스트 임베딩을 사용하여 입력 문장의 토큰을 재구성하고 다음 문장의 토큰을 예측하는 데 사용되며, llama-2-7b는 MSMARCO 및 BEIR와 같은 벤치마크에서 개선되었습니다.

     Proposes llara which adapts an llm for dense retrieval; it consists of two pretext tasks: ebae (embedding-based auto-encoding) and ebar (embedding-based auto-regression), where the text embeddings from llm are used to reconstruct the tokens for the input sentence and predict the tokens for the next sentence, respectively; a llama-2-7b was improved on benchmarks like msmarco and beir.

    논문 초록(Abstract)

     * 고밀도 검색은 쿼리와 문서 간의 의미론적 관계를 표현하기 위해 차별적인 텍스트 임베딩을 학습해야 합니다. 의미론적 이해에 대한 강력한 기능을 갖춘 LLM(대규모 언어 모델)을 사용하면 이점을 얻을 수 있습니다. 그러나 LLM은 텍스트를 임베딩으로 표현하는 것과는 작업 패턴이 완전히 다른 텍스트 생성 작업에 의해 사전 학습됩니다. 따라서 고밀도 검색을 위한 백본 인코더로 효과적으로 초기화할 수 있도록 LLM을 적절히 적용하는 방법을 연구하는 것이 필수적입니다. 이 논문에서는 고밀도 검색 애플리케이션을 위해 LLM을 사후에 적용하는 새로운 접근 방식인 LLaRA(LLM adapted for dense RetrievAl)를 제안합니다. LLaRA는 두 가지 사전 작업으로 구성됩니다: LLM의 텍스트 임베딩을 사용하여 입력 문장의 토큰을 재구성하고 다음 문장의 토큰을 예측하는 EBAE(임베딩
       기반 자동 인코딩)와 EBAR(임베딩 기반 자동 회귀)이 그것입니다. LLaRA는 간단하고 가벼우며 매우 효과적인 것으로 밝혀졌습니다. 이 모델은 위키피디아 말뭉치에서 LLaMA-2-7B(베이스)를 적용하는 데 적용되어 MSMARCO 및 BEIR과 같은 다양한 고밀도 검색 벤치마크에서 모델의 미세 조정된 성능을 크게 향상시켰습니다. 모델과 코드는 BGE 저장소에서 공개적으로 사용할 수 있습니다.

     Dense retrieval needs to learn discriminative text embeddings to represent the semantic relationship between query and document. It may benefit from the using of large language models (LLMs), given LLMs' strong capability on semantic understanding. However, the LLMs are pre-trained by text generation tasks, whose working pattern is completely different from representing texts as embeddings. As a result, it is imperative to study how to adapt LLMs properly so that they can be effectively initialized as the backbone encoder for dense retrieval. In this paper, we propose a novel approach, called LLaRA (LLM adapted for dense RetrievAl), which works as a post-hoc adaptation of LLM for the dense retrieval application. LLaRA consists of two pretext tasks: EBAE (Embedding-Based Auto-Encoding) and EBAR (Embedding-Based Auto-Regression), where the text embeddings from LLM are used to reconstruct the tokens for the input sentence and predict the tokens for the next sentence,
     respectively. LLaRA turns out to be simple, lightweight, and highly effective. It is applied to adapt LLaMA-2-7B (base) on the Wikipedia corpus, where it substantially improves the model's fine-tuned performances on a variety of dense retrieval benchmarks, like MSMARCO and BEIR. Our model and code will be made publicly available at BGE repository.

    논문 링크

   https://arxiv.org/abs/2312.15503v1


  제미니와 GPT-4V: 질적 사례를 통한 시각-언어 모델의 예비 비교 및 조합 / Gemini vs GPT-4V: A Preliminary Comparison and Combination of Vision-Language Models Through Qualitative Cases

    논문 소개

     * 몇 가지 정성적 사례를 통해 제미나이와 GPT-4v와 같은 시각 언어 모델을 포괄적으로 예비 비교하고 조합하여 GPT-4v가 정확하고 간결한 답변을 제공하는 반면 제미나이는 관련 이미지 및 링크와 함께 상세하고 광범위한 답변을 제공하는 데 탁월하다는 사실을 발견했습니다.

     Provides a comprehensive preliminary comparison and combination of vision-language models like gemini and gpt-4v through several qualitative cases; finds that gpt-4v is precise and succinct in responses, while gemini excels in providing detailed, expansive answers accompanied by relevant imagery and links.

    논문 초록(Abstract)

     * 빠르게 발전하고 있는 다중 모드 대규모 언어 모델(MLLM) 분야는 인공지능에 언어 및 시각 처리를 통합하는 데 앞장서고 있습니다. 이 논문에서는 두 가지 선구적인 모델에 대한 심층적인 비교 연구를 제시합니다: Google의 Gemini와 OpenAI의 GPT-4V(ision). 이 연구는 시각-언어 능력, 인간과의 상호작용, 시간적 이해, 지능 및 감성 지수 평가와 같은 주요 차원에 걸쳐 두 모델을 다각도로 평가합니다. 분석의 핵심은 각 모델의 뚜렷한 시각적 이해 능력을 탐구하는 것입니다. 다양한 산업 응용 시나리오에서 성능을 평가하기 위해 일련의 구조화된 실험을 수행하여 실질적인 유용성에 대한 포괄적인 관점을 제공했습니다. 직접적인 성능 비교뿐만 아니라 균형 잡힌 공정한 분석을 위해 프롬프트와 시나리오의 조정도 포함했습니다. 이번 조사 결과는 두 모델의 고유한
       강점과 틈새 시장을 조명합니다. GPT-4V는 정확하고 간결한 답변으로 차별화되는 반면, Gemini는 관련 이미지 및 링크와 함께 상세하고 광범위한 답변을 제공하는 데 탁월합니다. 이러한 이해는 Gemini와 GPT-4V의 비교 장점을 조명할 뿐만 아니라 멀티모달 기반 모델의 진화하는 환경을 강조하여 향후 이 분야의 발전을 위한 길을 열어줍니다. 비교 후 두 모델을 결합하여 더 나은 결과를 얻기 위해 노력했습니다. 마지막으로, 이 분야에 선구적인 공헌을 한 GPT-4V와 Gemini의 팀원들에게 깊은 감사를 표합니다. 또한, 광범위한 이미지 샘플, 프롬프트 및 GPT-4V 관련 결과를 수집하여 분석의 기초를 제공한 Yang 등의 'Dawn'에 제시된 포괄적인 정성 분석에도 감사를 표합니다.

     The rapidly evolving sector of Multi-modal Large Language Models (MLLMs) is at the forefront of integrating linguistic and visual processing in artificial intelligence. This paper presents an in-depth comparative study of two pioneering models: Google's Gemini and OpenAI's GPT-4V(ision). Our study involves a multi-faceted evaluation of both models across key dimensions such as Vision-Language Capability, Interaction with Humans, Temporal Understanding, and assessments in both Intelligence and Emotional Quotients. The core of our analysis delves into the distinct visual comprehension abilities of each model. We conducted a series of structured experiments to evaluate their performance in various industrial application scenarios, offering a comprehensive perspective on their practical utility. We not only involve direct performance comparisons but also include adjustments in prompts and scenarios to ensure a balanced and fair analysis. Our findings illuminate the unique
     strengths and niches of both models. GPT-4V distinguishes itself with its precision and succinctness in responses, while Gemini excels in providing detailed, expansive answers accompanied by relevant imagery and links. These understandings not only shed light on the comparative merits of Gemini and GPT-4V but also underscore the evolving landscape of multimodal foundation models, paving the way for future advancements in this area. After the comparison, we attempted to achieve better results by combining the two models. Finally, We would like to express our profound gratitude to the teams behind GPT-4V and Gemini for their pioneering contributions to the field. Our acknowledgments are also extended to the comprehensive qualitative analysis presented in 'Dawn' by Yang et al. This work, with its extensive collection of image samples, prompts, and GPT-4V-related results, provided a foundational basis for our analysis.

    논문 링크

   https://arxiv.org/abs/2312.15011v1

    더 읽어보기

   https://x.com/omarsar0/status/1741177994377330895


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-1d3
"
"https://news.hada.io/topic?id=12619","에이블리 기업분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               에이블리 기업분석

   동사는 22년 700억 가량의 적자를 기록하였으나, 상반기 깜짝 흑자 전환하며 연간 흑자 기록을 앞두고 있습니다. 현재 1조 이상 밸류에 시리즈 C 펀딩을 진행하고 있다는 이야기도 들려옵니다. 과연 에이블리는 ""넥스트 커머스"" 플랫폼이 될 수 있을까요?

   모두 새해 복 많이 받으세요 :D
    1. thesis
       ○ 의식주는 변화하지 않는 상수: 그 중 의에 속하는 패션 시장엔 큰 기회 존재
       ○ 격전지는 국내 패션 플랫폼 시장: 수천억의 투자와 M&A 이어짐
       ○ 강한 자만 살아남는다: 에이블리, 무신사, W컨셉, 지그재그, 브랜디 등
       ○ 에이블리는 후발주자임에도 4년만에 사용자 수 1위 기록. How?
       Question: 동사는 패션 플랫폼의 왕좌에 오를 수 있을까?
    2. founding story
       => altos ventures의 3 why narrative
       ○ 강성훈 대표는 왓챠 공동창업자 출신 (IT 기반)
       ○ 의식주 기반의 사업을 하기 위해 퇴사후 쇼핑몰 발할라 창업 (17년)
       ○ why me?를 답하기 위해 신사업: 여성 패션 플랫폼에 도전
       why me?: 우리는 IT 게임을 해야 한다
       why now?: 18년 내로 TOP3에 진입할 수 있다
       why big?: 거대한 여성 패션 시장에 대표격 플랫폼 부재하다
       ○ 현재 700만 MAU, 동종 업계 앱 사용 시간 1위 달성
    3. product
       [seller side]
       3.1 에이블리 파트너스
       ○ 누구나 창업할 수 있는 세상: 사입부터 물류, 배송, CS 등을 대행하는 서비스
       ○ 오퍼레이션 부담을 줄이며 신규 셀러 확보 (에어비앤비와 유사)
       ○ 파트너에 매출의 90%를 수수료로 수취함에도, 셀러 수 8,500명 달성
       3.2 에이블리 셀러스
       ○ 기존에 사업 운영하던 셀러들이 플랫폼에 입점하는 오픈마켓 솔루션
       ○ 차별점은 1) 업계 최저 수준 수수료 (3%) 2) AI를 통한 유저-셀러 연결
       3.3 풀필먼트
       ○ 파트너스의 기반을 이루는 핵심: 경쟁력이자 원가를 줄이는 수단
       ○ 창고 관리 시스템 및 HW, SW등 풀필먼트 전 과정 고도화
       [buyer side]
       3.4 에이블리
       ○ 1등 스타일 쇼핑 앱. 23년 11월 기준 MAU 740만 명.
    4. market
       4.1 customer
       ○ 주요 타겟층은 가격과 트랜드에 민감한 1020 여성
       ○ 의류 섹터내 다양한 연령대와 성별로 확장, 그외에도 홈데코, 뷰티 등 카테고리 확장 중
       ○ 글로벌 확장(일본, 대만)도 진행 중
       4.2 market size
       ○ TAM: 전 세계 온라인 패션 시장 (1,023조)
       ○ SOM: 일본 + 국내 온라인 패션 시장 (33조)
       ○ SAM: 국내 온라인 패션 시장 (19조)
    5. traction
       ○ 업계 최단 사용자 수 1위, 3년만에 누적 거래액 1조, 업계 최초 MAU 700만 달성
       ○ 70억 시리즈 A, 1,000억 시리즈 B+B2, 670억 프리 시리즈 C로 누적 1,730억
       ○ 23년 10월, 2,000억 시리즈 C 추진 중 (밸류 1조 이상 전망)
    6. business model
       ○ 수수료 매출, 상품 매출로 구분. 동대문 사입 셀러엔 낮은 수수료, 브랜드엔 높은 수수료
       ○ BM 다각화 진행 중: 오퍼월, 셀러 광고로 광고 수익 확보
       ○ 22년 매출 1,785억 / 영업손실 744억. BUT 23년 상반기 흑자전환!
       ○ 매출 UP: 수수료 인상, 소비자층 확장, 셀러 타겟 광고 확대
       ○ 비용 DOWN: 에이블리 파트너스 비용
    7. competition
       ○ 브랜드 중심(온라인 편집샵): 29CM, W컨셉
       ○ 가격 중심(동대문 사입): 에이블리, 지그재그, 브랜디
       ○ 여성 패션 시장에서 주도적 위치 확보 + 확장된 카테고리서 점유율 확대가 중요한 목표!
    8. valuation
       ○ 프리 시리즈 C에서 9,000억 밸류 인정받음
       ○ 동종업계 스타트업과 비교 시 1조 이상의 평가는 충분히 받을 수 있을 것
    9. essence of business (온라인 커머스 업의 본질)
       ○ 경쟁은 상수다. 그래서 해자가 있어야 한다
       ○ 상품 수보다 경쟁력 있는 상품 수가 중요하다
       ○ 성장세를 유지하며 돈을 벌어야 한다
   10. key opportunities
       10.1 체인 플랫폼
       ○ 셀러와 생산공장을 직접 연결해 1명의 셀러당 1개의 PB 상품을 제작할 수 있는 인프라 제공
       ○ 동대문 의류 상품에 대한 의존도 해결도 이에 달려있음
       10.2 크리에이터 생태계 구축
       ○ 셀러 육성을 위해 필수적 전략
       ○ 파트너스에서 오는 쉬운 창업 난도 / 크리에이터 생태계에 대한 정통성 / 디스커버리 인터페이스가 있기에 승산 충분함
       ○ 이 재료를 바탕으로 손쉬운 제휴 마케팅 도입 / 에이블리 파트너스 접근성 강화 / 크리에이터 연결 플랫폼 구축이 필요함
       ○ 궁극적 모습: 동사가 국내 패션 크리에이터의 등용문이 되는 것!
       10.3 알고리즘 고도화와 디스커버리 커머스
       ○ 알고리즘 고도화를 위해 게이미피케이션 시도해봐야
       10.4 C2M like 쉐인
       ○ C2M 모델로 에이블리 파트너스가 판매하는 제품의 경쟁력 확보
       ○ 쉐인의 C2M 모델 유사하게 적용: 동대문 제조 클러스터, 높은 MAU, 수많은 데이터가 있기에 충분히 가능하다
   11. key risks
       11.1 동대문 사입의 구조적 한계
       ○ 다양성 확보 불가 / 낮은 진입장벽으로 출혈 경쟁 / 적은 마진목으로 손익 악화
       11.2 수익선 개선의 부작용
       ○ 셀러들의 불만 UP / 상품 가격에 수수료 인상이 반영
       ○ 초격차 전략 취하는 경쟁사
       11.3 오퍼레이션 리스크
       ○ 재고 리스크 / 품질 검수 / 플랫폼에 대한 부정적 인식
   12. ending thoughts
       5,000조: 동사의 구성원이 한마음으로 외치는, 그들이 가진 꿈의 크기이다.
       ○ K-스타일을 시작으로 전 세계 크고 작은 크리에이터들이 누구나 셀러가 되고 자신만의 브랜드를 운영할 수 있는 세상을 만든다면,
       ○ 전 세계 커머스 시장의 공식 자체를 대기업 브랜드 / 기업형 셀러 위주에서 개인 / 크리에이터로 바꿀 수 있다면,
       이 꿈의 숫자가 불가능해 보이지 않는다.
       기억하자. 이들은 4년 만에 한국인이 가장 많이 사용한 패션 앱을 만든 사람들이다. 2022년 744억의 적자를 기록한 지 1년도 안 돼 흑자를 만든 사람들이다. 업의 본질에 집중해 늘 성과를 달성해온 팀이다.
       그들이 꿈꾸는 미래로 향하는 길에 고난도 많겠지만, 늘 그래왔듯 업의 본질을 추구하며 헤쳐 나가기를 기대한다.
"
"https://news.hada.io/topic?id=12732","Microsoft, Phi-2 언어모델의 라이센스를 MIT로 변경 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Microsoft, Phi-2 언어모델의 라이센스를 MIT로 변경

     * 마이크로소프트가 1달전 공개한, 2.7B 크기의 작지만 추론 능력이 뛰어난 언어모델
          + 휴대폰 정도의 장치에서 실행하여 GPT-3.5 수준에 가까운 성능을 얻을 수 있는 최고의 모델중 하나
     * 이전에는 상업적으로 사용 불가능한 MICROSOFT RESEARCH LICENSE 였음
     * MIT 라이센스 변경으로 다양한 응용이 가능해짐

   Microsoft, 2.7B로 작지만 강력한 Phi-2 언어 모델 공개
"
"https://news.hada.io/topic?id=12703","Show HN: Ambiphone - 실용적인 앰비언트 음악 및 화이트 노이즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show HN: Ambiphone - 실용적인 앰비언트 음악 및 화이트 노이즈

     * 로그인/광고/인앱 결제없이 무료로 감상가능
     * 여러개 소리를 같이 선택해서 듣기 가능(개별 볼륨 제어)

자연 소리

     * 폭우, 천둥, 강한 바람, 파도, 시냇물, 불, 밤의 정글, 갈매기, 새소리, 고래 소리, 고양이의 울음소리 등 자연에서 나는 다양한 소리들.

음악

     * Kirk Osamayo의 'Realization'과 'Breath', Meydan의 'Freezing But Warm', P C III의 'Remembering Past Everything', voide의 'neverblinking moon', Steve Combs의 'Ambient 507050' 등 여러 아티스트의 음악 작품들.

사람과 장소

     * 비행기, 교통, 기차, 롤러코스터, 회전목마, 아케이드, 커피숍, 야외 군중, 축구 경기장, 불꽃놀이, 풍경, 심장 박동, 기침, 시계 째깍거림, 키보드, 프린터, 선풍기 등 사람들이 많이 모이는 장소나 일상생활에서 들을 수 있는 소리들.

라디오

     * 불명확한 라디오, 경찰 스캐너, 숫자 방송국, 해상 예보, 모스 부호 등 다양한 라디오 관련 소리들.

이진 박자

     * 델타, 세타, 알파, 베타, 감마 등의 뇌파를 자극하는 이진 박자 소리들.

소음

     * 갈색 소음, 흰색 소음, 베이스 럼블, 바이닐 균열 등 다양한 종류의 소음들.

        Hacker News 의견

     * 사용자는 앱이 깔끔하고 좋지만 대부분 구독 기반으로 되어 있어 싫다고 언급함. 오프라인 모드가 있으면 완벽할 것이라고 말함.
     * 다른 사용자는 디자인이 간단하고 실용적이라고 칭찬하며, 소리를 겹쳐 재생할 수 있는 기능에 만족하지만, 설정을 다른 앱 인스턴스로 전송할 수 있는 기능이 있으면 좋겠다고 함.
     * 한 사용자는 이명을 겪은 경험을 공유하며, 이명을 위한 소음 생성기에 대한 제안이 있을 것이라고 언급함. 특히 회색 소음, 분홍 소음, 특정 종류의 귀뚜라미 소리가 이명을 가릴 때 도움이 되었다고 함.
     * 또 다른 사용자는 ""화이트 노이즈 생성기""라는 제목이 겸손하다고 언급하며, 앱 개발이 스마트폰에서 여러 플랫폼을 지원하고 개발 환경의 복잡함을 극복하는 것을 포함한다고 설명함.
     * 한 개발자는 자신이 개발 중인 화이트 노이즈 앱에 대해 이야기하며, 소음 강도를 쉽게 전환할 수 있는 기능에 중점을 두었다고 함.
     * 사용자는 Atmosphere 앱을 오랫동안 사용해왔으며, 오프라인에서도 완벽하게 작동하고 다양한 소리를 조합할 수 있는 것이 장점이라고 언급함.
     * 다른 사용자는 감마파 소리를 듣고 즉각적인 이완을 느꼈다며, 개발자를 지원하자고 제안함.
     * 한 사용자는 여러 소리를 활성화하고 자신의 취향에 맞게 혼합할 수 있다는 점에 만족감을 표현함.
     * 사용자는 각 옵션을 클릭할 때 발생하는 지연에 대한 중간 상태나 로딩 표시가 있으면 좋겠다고 제안함.
     * 마지막 사용자는 브라우저에서 실행되는 앱이 아니면 사용하기 어렵다고 지적하며, 화면이 꺼지거나 잠길 때 재생이 중지되는 문제를 언급함.
"
"https://news.hada.io/topic?id=12731","알래스카 항공사의 737 Max, 기압 감소로 인한 비상 착륙","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   알래스카 항공사의 737 Max, 기압 감소로 인한 비상 착륙

네트워크 정책으로 인한 접근 차단

     * 사용자의 요청이 네트워크 정책에 의해 차단됨.
     * 로그인하거나 계정을 생성하여 브라우징을 재개할 것을 권장함.
     * 스크립트나 애플리케이션을 실행 중이라면 개발자 자격으로 등록하거나 로그인할 것을 요청함.
     * 사용자 에이전트(User-Agent)가 비어 있지 않고, 고유하며 설명적인지 확인하고 다시 시도할 것을 권장함.
     * 대체 사용자 에이전트 문자열을 사용 중이라면 기본값으로 변경하여 차단을 해결할 수 있음.
     * Reddit의 이용 약관은 해당 링크에서 확인 가능함.
     * 차단이 잘못되었다고 생각되거나 데이터 접근을 논의하고자 한다면 티켓을 제출할 것을 안내함.
     * 연락 시 IP 주소(3.34.96.173)와 Reddit 계정 정보를 포함할 것을 요청함.

GN⁺의 의견

     * 이 글은 Reddit의 네트워크 정책에 의해 사용자의 접근이 차단된 경우에 대한 안내를 제공함.
     * 사용자는 로그인, 계정 생성, 개발자 등록 등을 통해 문제를 해결할 수 있으며, 사용자 에이전트 설정이 중요함을 강조함.
     * 차단에 대한 오류나 데이터 접근에 대한 논의를 원하는 사용자는 제공된 방법을 통해 Reddit에 연락할 수 있음. 이는 사용자가 플랫폼 사용 중 겪을 수 있는 기술적 문제에 대처하는 방법을 이해하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 보잉 737 MAX 안전 규제 면제 시도 관련 기사
          + 최근 보잉이 737 MAX의 안전 규제 면제를 시도하는 것에 대한 기사가 시의적절함.
          + 관련 링크: 해커뉴스 기사
     * 보잉 737-9 MAX의 창문 및 빈 좌석 손실 사건
          + 비행 중 창문과 사용되지 않던 좌석을 잃어버린 사건 발생.
          + 해당 비행기는 두 달 전에 조립 라인에서 나와 2023년 11월에 인증을 받음.
          + 관련 링크: 해커뉴스 관련 기사
     * 개인적인 737 MAX 비행기 피하기 규칙
          + 지난 두 달 동안 737 MAX 비행을 네 번 피함.
          + 한 경우에는 737 MAX를 이용하지 않고 10시간의 경유를 선택함.
     * 비행 중 구멍이 생긴 동영상
          + TikTok에서 비행 중 구멍이 생긴 모습을 담은 동영상 공유.
          + 관련 링크: TikTok 동영상
          + 해당 동영상이 트위터에도 게시됨.
          + 관련 링크: 트위터 게시물
     * 비행 중 안전벨트 착용의 중요성
          + 비행 중 항상 안전벨트를 착용하는 것이 긴급 상황에서 큰 차이를 만들 수 있음.
     * 동일 항공기의 압력 문제 경고
          + 같은 항공기가 전날 두 차례 압력 경고를 받은 사실이 보도됨.
          + 관련 링크: The Air Current 보도
     * 보잉의 안전 규제 면제 요청에 대한 비판
          + 보잉이 비행기를 하늘에 띄우기 위해 안전 규제 면제를 받으려는 것에 대한 비판적인 의견 제시.
     * 737 MAX를 이용하지 않는 항공편 찾기
          + 737 MAX를 운항하지 않는 항공사를 찾는 방법 안내.
          + 관련 링크: Alternative Airlines 웹사이트
     * 비행기 촬영 관련 농담
          + 비행 전에 비행기를 이용한 영화 촬영이 있었는지에 대한 농담.
          + 관련 링크: NPR 기사
"
"https://news.hada.io/topic?id=12738","Pocketbase: 단일 파일로 구성된 오픈소스 백엔드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Pocketbase: 단일 파일로 구성된 오픈소스 백엔드

PocketBase - 당신의 다음 SaaS 및 모바일 앱을 위한 오픈 소스 백엔드

     * 실시간 데이터베이스: 스키마 빌더, 데이터 검증, 실시간 구독 기능을 갖춘 성능이 뛰어난 내장형 데이터베이스와 쉽게 사용할 수 있는 REST API 제공.
     * 인증: 이메일/비밀번호 및 OAuth2 로그인(구글, 페이스북, 깃허브, 깃랩)을 번거로움 없이 관리.
     * 파일 저장소: 파일을 로컬 또는 S3 저장소에 합리적으로 저장하고, 데이터베이스 레코드에 미디어를 쉽게 첨부하며, 즉석에서 썸네일 생성.
     * 확장 가능: 독립 실행형 앱으로 사용하거나 Go와 JavaScript 훅을 통해 확장하여 사용자 정의 이동식 백엔드를 만들 수 있는 프레임워크로 사용 가능.

기능 탐색

     * JavaScript SDK: PocketBase를 사용하여 'example' 컬렉션 레코드를 리스트로 가져오거나 검색, 단일 레코드 가져오기, 삭제, 새 레코드 생성 및 실시간 변경 사항 구독 가능.
     * Dart SDK: Dart 언어를 사용하는 개발자들을 위한 SDK도 제공됨.

GN⁺의 의견

     * PocketBase는 실시간 데이터베이스, 인증, 파일 저장소 등을 포함하여 SaaS 및 모바일 앱 개발을 위한 백엔드 기능을 제공하는 오픈 소스 솔루션임.
     * 사용자는 쉽게 REST API를 사용할 수 있으며, 필요에 따라 Go와 JavaScript를 사용하여 백엔드를 확장할 수 있는 유연성을 갖추고 있음.
     * 이 솔루션은 개발자들이 빠르게 프로토타입을 만들거나 실제 제품을 구축할 때 시간과 노력을 절약할 수 있도록 도와줌으로써, 개발 과정을 간소화하고 효율성을 높이는 데 기여함.

        Hacker News 의견

     * Pocketbase 사용 경험
          + React와 Vite를 사용하는 앱의 백엔드/데이터베이스로 Pocketbase 사용에 대한 긍정적인 경험.
          + 주로 인증 및 유료/무료 계정 관리에 사용.
          + 유용한 기능들:
               o 호스팅이 매우 쉬움. Appwrite나 Supabase 대신 선택, 특히 Supabase는 자체 호스팅이 까다로움.
               o 뷰 컬렉션을 통해 필요한 데이터의 부분 집합만 반환 가능.
               o Go나 JS로 확장 가능하여 복잡하지 않은 경우 백엔드 없이도 가능.
          + 작은 프로젝트나 사이드 프로젝트에 계속 사용할 계획, CMS로 사용하거나 브라우저 확장 프로그램의 백엔드로 사용 고려 중.
     * Pocketbase 개발 경험
          + 2개월간 Pocketbase 개발, 1-2개월 내로 프로덕션 배포 예정.
          + 매우 만족스러운 경험, 친구 회사의 웹앱 개발에 단순한 시스템 필요.
          + Pocketbase 하나로 웹서버, 서버사이드 자바스크립트(컴파일된 TypeScript), SQLite 데이터베이스 운영.
          + 저렴한 비용으로 호스팅 가능, SvelteKit과 TypeScript로 프론트엔드 개발.
          + 개발자의 빠른 응답과 명확한 지원에 만족.
          + 몇 가지 작은 문제점(문서의 빈 곳, CSV 로더 직접 작성, CRUD 인터페이스의 속도 저하 등) 있으나 전반적으로 프로젝트에 만족.
          + 단순하고 TypeScript로 모든 것을 코딩할 수 있어 필요에 완벽히 부합.
          + 고성능은 아니지만 필요하지 않았음, 사이드 프로젝트에도 사용할 계획.
          + 계약의 일부로 친구 회사가 Pocketbase에 기부할 예정.
     * Pocketbase 프로덕션 사용 경험
          + 몇 달간 프로덕션에서 alpinejs와 함께 Pocketbase 사용.
          + 개발 철학이 현실적이고 실용적이며 매주 기능이 부풀어 오르지 않고 개선됨.
          + 점점 더 대중화됨에 따라 지원 수준 유지에 대한 우려와 개발자의 소진 가능성.
          + 수익 창출을 위해 사용하는 사람들에게 프로젝트 지원을 강력히 권장.
     * Pocketbase에 대한 감상
          + 프로젝트가 복잡성을 피하고 단순하고 미니멀한 접근을 적극적으로 시도하는 것을 높이 평가.
          + 단일 바이너리를 서버에 업로드하여 배포하는 용이성이 매력적.
          + 백엔드에서 자바스크립트 지원 도입으로 Remix, Next.js 등의 프레임워크에 도전할 수 있는 심각한 경쟁자로 부상.
          + v1 버전에 대한 기대감.
     * Pocketbase를 사용한 와인 컬렉션 관리
          + 와인 컬렉션 설계 및 저장을 위해 sqlite 데이터베이스 위에 사용할 수 있는 프론트엔드 탐색.
          + 단일 실행 파일, 관리 인터페이스, 노트북에 저장할 수 있는 데이터베이스가 필요했음.
          + Pocketbase에 대한 감사와 해커뉴스로 돌아오는 이유.
     * Pocketbase의 GraphQL API 지원 가능성
          + Pocketbase가 매우 멋져 보임, 작은 프로젝트에 사용 가능.
          + 미래에 GraphQL API를 지원할 수 있는지 궁금함.
     * 오픈소스 프로젝트에 대한 감상
          + 이 분야에서 좋은 오픈소스 프로젝트의 수가 많아서 기쁨.
          + Grist와 NocoDB는 데이터베이스 관리에 더 초점을 맞추고 있으며, 시작하기 쉬운 방법을 제공함.
     * Pocketbase 기능에 대한 질문
          + 행 수준 접근 제어, 나머지 세계와의 통합(이메일 발송, 트리거 작동 등), CSV 내보내기/가져오기, 국제화 등에 대한 처리 방법이 문서에서 명확하지 않음.
          + 이러한 기능들이 가능한지, 간단한지, Go나 JS로 확장해야 하는지에 대한 질문.
     * CRUD 작업 페이지 사용자 정의 가능성
          + ""crud operations page""를 얼마나 맞춤 설정할 수 있는지에 대한 질문.
     * Pocketbase에 대한 평가
          + Supabase와 Appwrite를 포함한 여러 PaaS를 시도했으나, Pocketbase가 최고임.
          + 훌륭한 성능, 직관적인 기능, 실제 자체 호스팅 가능성, 배포의 즐거움.
"
