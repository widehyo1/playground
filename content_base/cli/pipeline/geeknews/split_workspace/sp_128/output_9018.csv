"https://news.hada.io/topic?id=14298","5년 전 만든 Recovery Kit의 후속작, RK2 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   5년 전 만든 Recovery Kit의 후속작, RK2 공개

Recovery Kit 버전 2의 설계와 제작 과정 요약

  기존 Recovery Kit의 한계점

     * 배터리 확보의 어려움 - 초기 사용했던 배터리가 단종되어 재구매 불가능해짐
     * 키보드의 불편함 - ANSI 키보드는 너무 크고, 키보드 프로그래밍이 어려움
     * 복잡한 배선 - 100시간 이상의 작업 시간 필요
     * 손잡이의 문제 - 케이스에 걸리거나 회전하여 화면에 손상을 줌
     * GPIO 연결의 난이도 - 솔더링이 어려움

  Recovery Kit 버전 2의 개선점

     * 더 큰 용량의 배터리 사용
     * 미리 조립된 키보드 사용으로 조립 용이성 개선
     * 배선을 단순화하고 커넥터 사용으로 솔더링 최소화
     * 새로운 손잡이 디자인
     * Crimp 커넥터를 이용해 GPIO 연결 개선

  Recovery Kit 버전 2의 타협점

     * 작은 7인치 화면 크기
     * 간소화된 전원 제어부
     * x86 CPU 미지원

  빌드 개요

     * 최신 3D 프린터로 쉽게 출력 가능한 부품 목록
     * M4, M3, M2.5 나사 사용
     * 카본 파이버 PETG 소재 사용
     * 내장형 기가비트 네트워크 스위치
     * 이더넷 연결 지원
     * Crimp 커넥터로 GPIO 연결
     * USB-C 커넥터 다수 사용
     * NVMe SSD 부팅 및 배터리 지원
     * DSI 케이블 호환성 이슈 주의 필요
     * 멋진 파워 버튼
     * Shargeek Storm 2 100W 배터리 사용
     * Drop/OLKB Planck v7 키보드 사용

GN⁺의 의견

     * 기존 Recovery Kit의 문제점을 개선하려 노력한 점이 돋보임. 특히 배선과 GPIO, 배터리 부분의 개선이 인상적임.
     * DSI 케이블 호환성 문제는 라즈베리파이 재단이 개선해야할 부분으로 보임. 범용 케이블 사용이 어려운 것은 사용자 입장에서 불편함.
     * 고성능 배터리와 NVMe 지원으로 휴대용 컴퓨팅 디바이스로서 큰 성능 향상을 이뤘음. 다만 충전 중 사용이 안되는 것은 아쉬움.
     * 기존 Recovery Kit에 비해 조립이 훨씬 쉬워져 접근성이 좋아짐. 다만 아직 일반인이 만들기에는 다소 敷居가 높아보임.
     * 전체적으로 메이커들에게 영감을 주고 교육적인 의미가 있는 프로젝트로 평가됨. 올해안에 각 부분을 모듈화하여 더욱 조립을 쉽게 만들 수 있다면 큰 반향을 불러일으킬 것으로 예상됨.

        Hacker News 의견

   요약:
     * 나사의 종류가 너무 많아 필요할 때마다 맞는 사이즈를 찾기가 어려움. 사진으로 정확한 규격을 알려주는 앱이 있으면 좋겠음.
     * ""Recovery Kit""라는 이름의 의미가 불명확하고, 실제 사용 사례에 대한 설명이 부족함. Meshtastic, LoRa, 아마추어 무선 등의 기능이 추가되면 좋을 것 같음.
     * 견고한 Raspberry Pi 케이스의 용도가 재난 대비인지, 그냥 멋져 보이는 것인지 궁금함.
     * 작가의 3D 프린팅 기술이 인상적임. 특히 너트 삽입과 六角形 내부 채움 기법이 멋짐.
     * 기능성 소품 프로젝트를 보는 것이 즐거움. 화면 크기나 컴퓨팅 모듈 등 다양한 대안을 고려해 볼 수 있을 것 같음. Wikipedia나 재난 대비 매뉴얼 등의 콘텐츠를 저장하는 것도 흥미로운 아이디어임.
     * 외관은 튼튼해 보이지만 내부 배선은 연약해 보임. NASA 수준의 방사선 차폐, 이중화 등이 적용되면 더 설득력 있을 것 같음.
     * Ortholinear 키보드는 구하기 어렵고 비쌈. 조금 더 주류인 QMK 키보드를 사용 중이지만, 더 작은 것이 없을지 고민 중.
"
"https://news.hada.io/topic?id=14290","카기(Kagi)에 대한 신뢰 상실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           카기(Kagi)에 대한 신뢰 상실

Kagi 서치 엔진에 대한 신뢰를 잃은 이유들

     * 저자가 과거에 유료 검색 엔진 Kagi에 대해 여러 번 포스팅했지만, 지금은 Kagi에 대한 신뢰를 잃은 이유를 정리하고 싶어함
     * 대부분의 이유가 일반 사용자들이 잘 보지 않는 Kagi의 Discord에서 나왔기에, 많은 Kagi 지지자들이 이 배경 이야기를 모를 것이라 생각함
     * 깊이 있는 조사를 한 것은 아니며, Kagi 구독자에서 反Kagi 주장자가 된 개인적인 이유를 정리한 것

Kagi의 사업 다각화와 재정적 문제점

     * Kagi는 검색 엔진 외에도 AI 도구들, Mac 전용 브라우저 Orion, 이메일 서비스 등 여러 프로젝트를 동시에 진행 중
     * 이 프로젝트들은 수익성이 좋지 않고, 전체 16명 중 풀타임은 8명 정도로 개발 인력이 부족한 상황
     * 67만 달러의 투자를 유치했지만 사용처가 불투명하고, 검색당 적자를 보는 등 재정적으로 어려움을 겪음
     * 2만 명 사용자 달성 기념으로 독일에 티셔츠 제작 회사를 설립해 무료 배포용 2만장을 제작하는 등 부적절한 자금 사용
     * 2년간 판매세를 내지 않다가 뒤늦게 세금 납부 문제 발생

AI에 대한 맹신과 프라이버시 경시 태도

     * Kagi는 AI 회사로 시작해 검색 엔진으로 피봇했으며, 최근에는 AI 기능 개발에 주력하고 있음
     * FastGPT, Instant Answers, Universal Summarizer 등 여러 AI 툴을 개발 중이나 부정확한 정보를 제공하는 등 문제점 존재
     * 설립자 Vlad는 AI가 검색의 미래이며 편향성을 제거할 수 있다고 맹신하나, 이는 현실과 동떨어진 생각
     * 프라이버시와 보안에 대해 ""trust me bro"" 식의 태도를 보이며, 이메일은 PII가 아니라는 등 근거 없는 주장을 함
     * GDPR 등 개인정보 규제에 대해서도 적용 대상이 아니라며 손 놓고 있음

GN⁺의 의견

     * 재정상황과 사업 전략: Kagi의 수익 모델이 우려스럽고, T-셔츠 회사 설립 등 부적절한 자금 사용에 실망했습니다. 불안정해 보이는 재정으로 다양한 프로젝트를 벌이는 것이 현명한 판단인지 의문입니다.
     * AI 기술 활용: 설립자의 AI에 대한 지나친 맹신이 걱정됩니다. 편향성 제거나 뉴스 요약 등 기술적으로 아직 완성되지 않은 분야에서 섣불리 AI를 적용하는 것은 위험할 수 있습니다.
     * 프라이버시 정책: ""trust me""식의 답변과 이메일은 PII가 아니라는 주장 등을 보면 프라이버시를 진지하게 고려하고 있다고 보기 어렵습니다. 명확한 개인정보 처리방침이 필요해 보입니다.
     * 대안 서비스들: 프라이버시를 중시한다면 DuckDuckGo, Startpage, Searx 등의 검색 엔진을 추천합니다. 메일은 Proton Mail 같은 서비스가 더 적합할 것 같네요.
     * 요약하면 현재로선 Kagi를 신뢰하기 어렵고, 향후 변화를 지켜볼 필요가 있습니다. 개인적으로는 더 성숙해질 때까지 다른 대안을 찾는 게 좋겠습니다.

        Hacker News 의견

     * Kagi에 대한 한 사용자의 의견:
          + 검색 기능은 신선한 바람과 같았지만, 이에 더 많은 시간을 할애해주길 바람
          + Orion 브라우저는 그저 그런 편이며, 검색 기능 개선에 더 집중하길 원함
          + AI 도구들은 ML/AI의 최신 발전이 검색 경험을 향상시킬 것이라 믿지만, 좀 더 집중했으면 함
          + 티셔츠에 돈을 낭비한 것은 이상하며, 고객들은 제품 개선을 원하지 티셔츠를 원하는 게 아님
          + 이메일이나 다른 도구들은 신경 쓰지 않으며, 우선 훌륭한 검색 경험에 집중해야 함
     * 다른 사용자의 의견:
          + Kagi의 검색이 다른 대안들보다 월등히 뛰어나기에 구독 중
          + 다른 프로젝트들은 큰 관심사가 아니며, 무시할 수 있음
          + Kagi의 프라이버시 보호 접근 방식에 대해 우려가 커지고 있음
          + Vlad의 의사소통 방식이 우려를 자아냄
          + 현재는 고객이지만 경계하는 중이며, 개인적/전문적으로 추천을 중단함
     * 또 다른 사용자의 의견:
          + AI에는 관심이 없으며, 오히려 구글이 AI에 집중하면서 검색이 쓸모없어졌기에 피하게 됨
          + 사용자의 검색어를 존중하고 너무 똑똑해지려 하지 않는 검색 엔진에 돈을 냄
          + Kagi가 AI에 집중할수록, 구글의 실수를 반복할 뿐임
          + 이메일에도 관심 없으며, AI 회사에 검색 기록을 이메일 계정과 연결하고 싶지 않음
          + 스타트업은 AI 유행을 쫓기보다 정말 좋은 제품에 집중해야 함
     * 티셔츠 문제에 대해 크게 개의치 않는 한 사용자의 의견:
          + 개인(Vlad)의 프라이버시와 정치에 대한 견해에 불만인 것처럼 보임
          + 한 사람의 견해를 전체 조직에 투영하는 것은 오류
          + Kagi가 원칙과 실제 모두에서 마음에 듦
          + ""이 페이지 요약"" 기능이 유용하며, 광고 없이 가치에 대해 지불하는 아이디어를 좋아함
     * 티셔츠 제작을 과장했다고 보는 사용자의 견해:
          + 자금 낭비지만, 기사에서 묘사한 것처럼 ""소유""한 것은 아님
          + 세르비아 기존 업체와 제휴했으며, 유통 수단을 설정한 것뿐
          + 합당한 비판을 과장된 언어로 부풀리면 기사 전반을 의심하게 됨
          + 매달 얻는 것이 지불하는 가치가 있다면 좋은 것
     * Kagi에 감정적으로 너무 집착한다고 보는 견해:
          + 좋은 서비스를 받고 있다면 큰 문제 없음
          + 수익성이 있어 서비스 소멸 위험은 적어 보임
          + Vlad에게는 불필요한 논쟁에 휘말리지 말라고 조언
     * Kagi에 대해 우려하는 한 팬의 의견:
          + 제한된 자금, 인력, 광범위하지만 입증되지 않은 관심사, 피드백에 둔감한 리더 등을 고려할 때 장기적 생존력에 의문
          + Orion 베타 참여 시 피드백을 제공했으나 받아들여지지 않아 더 이상 피드백을 남기지 않기로 결정
     * Kagi의 체납 세금 문제에 대한 조언:
          + 매출세를 거둬야 하는 기업은 초기부터 자동화 소프트웨어를 도입해야 함
          + Avalara가 유명하지만 부트스트랩 기업에겐 부담
          + Kintsugi라는 스타트업은 Stripe과 연동되는 무료 옵션 제공
     * Kagi 구독을 취소한 사용자의 경험:
          + 개발팀이 너무 넓게 분산된 것 같다는 점에 공감
          + 주요 제품이 충분히 차별화되지 않았음
          + 구글 검색 결과와 큰 차이 없었음
          + GPT4 출시 이후로는 검색 방식이 바뀌어 Kagi가 너무 늦은 감이 있음
          + Perplexity가 Kagi보다 미래의 검색 같음
"
"https://news.hada.io/topic?id=14238","Show HN: 이산 논리 네트워크 카드 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show HN: 이산 논리 네트워크 카드 제작

이산 논리 네트워크 카드 제작기

   이 글은 이산 논리 회로를 사용하여 완전한 컴퓨터 시스템을 구축하는 과정을 다룬 시리즈물의 일부임. 현재까지 HTTP 서버나 LAN 게임 등의 네트워크 애플리케이션을 실행할 수 있는 컴퓨터를 만듦.

  개요

     * 지난해 10BASE-T 이더넷 신호를 SPI로 변환하고 그 반대로도 변환하는 물리 계층 어댑터를 제작함. 당시에는 STM32 마이크로컨트롤러를 사용하여 동작을 테스트했고, 이제는 직접 만든 컴퓨터에 연결하기 위해 MAC 계층 모듈을 구현하고 있음.
     * 두 어댑터는 모두 전이중이며 독립적인 송신기와 수신기 부분을 가지고 있음.

  수신기

    수신기 동작 요약:

     * SPI 직렬 데이터가 바이트 단위의 병렬 데이터로 변환되고, 바이트 클럭이 추출됨.
     * 처음 6바이트가 목적지 MAC 주소 기준과 비교되고, 일치하지 않는 프레임은 거부됨.
     * 바이트가 정적 RAM 버퍼에 기록됨.
     * 프레임이 끝나면 수신기가 비활성화되고, 사용자가 수신기를 다시 시작할 때까지 추가 프레임이 거부됨. 바이트 카운터가 중지되고 그 값이 사용자에게 제공됨.

    데이터 수집

     * 직렬 SPI 데이터를 바이트 스트림으로 변환해야 함.
     * 직렬 데이터는 시프트 레지스터(U32)로 이동함. U30과 U31은 각각 비트와 바이트를 카운트함.
     * 정적 RAM 쓰기 신호 recv_buf_we는 D 플립플롭 U29B를 사용하여 형성됨. 이 신호는 입력 데이터의 8비트 각각 이후에 잠시 낮아짐.
     * 수신된 바이트는 6116(U20) 2kB 정적 RAM 버퍼에 기록됨.
     * U13, U16, U18은 주소 멀티플렉서를 형성하여 바이트 카운터 또는 시스템 주소 버스 중 하나를 SRAM(U20)의 주소 입력으로 선택함.
     * 삼상태 버퍼 U21은 수신된 바이트를 RAM으로 전달함.

    MAC 주소 필터링

     * 이더넷 트래픽을 분석할 때 프레임이 보통 작은 그룹(짧은 지연으로 분리된 3-4개의 프레임)으로 오는 것을 발견함. 한 그룹의 프레임은 일반적으로 서로 다른 목적지 MAC 주소를 가짐.
     * 이는 내 컴퓨터가 MAC별로 수신된 프레임을 필터링하고 수신기를 충분히 빠르게 재시작하여 자신을 위한 프레임을 잡을 수 없을 것이라는 생각이 들게 만듦. 하드웨어 MAC 주소 필터링이 필요했음.
     * 사용자 지정 MAC 주소를 어딘가에 저장한 다음 처음 6개의 수신 바이트와 비교하는 것은 너무 복잡함. 단일 바이트의 반복(예: FE:FE:FE:FE:FE:FE)으로 만들 수도 있지만 지루함.
     * 내 MAC에 약간의 변화를 주기 위해 바이트 인덱스의 함수로 만듦:
          + 비트 0은 0으로 고정
          + 비트 1은 1로 고정
          + 비트 2-4는 바이트 인덱스의 반전
          + 비트 5-7은 1로 고정
     * 이 규칙을 사용하면 MAC 주소는 FE:FA:F6:F2:EE:EA가 됨. 또한 ARP와 작동하려면 브로드캐스트 MAC FF:FF:FF:FF:FF:FF를 수락해야 함.

  송신기

     * 수신기와 유사하게 송신기는 FCS 생성을 구현하지 않고 소프트웨어에서 수행됨.
     * 송신기를 더 단순화하기 위해 고정 길이 프레임만 지원하기로 결정함. 이렇게 하면 복잡한 디지털 비교기가 필요하지 않고, 프레임 전송 로직은 바이트 카운터의 단일 비트에만 의존함.
     * 프레임 길이를 1024바이트로 선택했는데, 이는 일반적인 MTU인 1500바이트에 가까움.
     * 10BASE-T에 필요한 프레임 프리앰블(0x55의 시퀀스 뒤에 0xD5가 오는 것)도 1024바이트에 포함되며 소프트웨어에 로드해야 함.

    카운터

     * 수신기와 마찬가지로 비트(U12)와 바이트(U14)를 세는 데 두 개의 카운터가 사용됨.
     * 첫 번째 카운터는 통합 발진기의 20MHz 클럭으로 공급됨.
     * 20MHz는 직접 사용되지 않고 최소한 2로 나누어짐. 이렇게 하면 발진기의 듀티 사이클이 출력 신호에 영향을 미치지 않음.

    데이터 흐름

     * RAM(U22)의 주소 입력을 선택하기 위해 수신기와 동일한 세 개의 74HC157 멀티플렉서(여기에는 표시되지 않음)가 사용됨.
     * U23은 데이터를 RAM에 로드하는 데 사용됨.
     * U24는 현재 전송 중인 바이트에 대한 중간 저장소 역할을 함. 여기서의 아이디어는 내 VGA 파이프라인과 유사함.
     * 바이트 카운터 74HC4040은 리플 카운터이며 안정화되는 데 시간이 걸리는데, U24는 RAM 출력이 여전히 유효하지 않은 동안 안정적인 출력을 제공함.
     * 이 데이터는 시프트 레지스터 U28로 공급되고 비트 단위로 이동됨.

  CPU 인터페이스

   프로그래머의 관점에서 내 이더넷 어댑터의 인터페이스는 다음과 같음:
     * 두 프레임 버퍼 모두 0xF000에 매핑됨.
     * 두 개의 읽기 전용 레지스터가 있음:
          + 0xFB00의 8비트 상태 레지스터에는 두 개의 플래그가 있음:
               o RX_FULL - 프레임이 수신됨
               o TX_BUSY - 프레임이 전송 중임
          + 0xFB02의 16비트 수신 데이터 길이 레지스터
     * 0xFB00에 任意의 값을 쓰면 수신기가 재시작됨.
     * 0xFB01에 任意의 값을 쓰면 전송이 시작됨.
     * 내 CPU가 인터럽트를 지원하지 않기 때문에 인터럽트가 없음.

  프로그래밍

   네트워크 지원을 원했지만 직접 TCP/IP 스택을 구현하고 싶지는 않았음. 또한 첫 번째 컴파일러가 형편없었고 어셈블리로 프로그래밍하는 것이 귀찮기 때문에 괜찮은 C 컴파일러를 원했음. 그래서 C 컴파일러를 만듦. 이는 uIP 1.0(작은 TCP/IP 라이브러리)을 컴파일할 수 있을 만큼 성숙함. 내 CPU의 코드 밀도가 매우 낮음에도 불구하고 uIP는 RAM에 맞출 수 있을 만큼 작고 실제 애플리케이션을 위한 공간이 남아있음.

   네트워크 성능은 매우 낮지만 상용 CPU나 특수 칩이 사용되지 않은 것을 고려하면 여전히 매우 만족스러움:
     * 평균 핑 왕복 시간 85ms
     * HTTP 서버 다운로드 속도 2.6kB/s(SD 카드에서 정적 파일 제공)

  프로젝트 저장소

   모델, 회로도 파일 및 PCB 도면은 GitHub에 있음.

GN⁺의 의견

     * 이 프로젝트는 개발자의 하드웨어에 대한 깊은 이해와 열정을 보여줌. 모든 것을 직접 구현하려는 노력은 대단히 인상적이지만, 실용성 측면에서는 의문이 듦.
     * 현대의 컴퓨팅 시스템은 매우 복잡하고 전문화되어 있어서 모든 것을 처음부터 구현하는 것은 매우 비효율적임. 특히 네트워크 프로토콜 스택과 같이 잘 정립되고 최적화된 영역은 기존 구현체를 활용하는 것이 현명함.
     * 그럼에도 불구하고 이런 프로젝트는 교육적 가치가 매우 높음. 저수준 하드웨어와 소프트웨어가 어떻게 상호작용하는지, 프로토콜이 어떻게 구현되는지 직접 경험해 볼 수 있기 때문.
     * 또한 요즘 개발자들 사이에서 하드웨어에 대한 이해도가 낮아지고 있는 상황에서, 이런 프로젝트는 컴퓨터 시스템의 근간을 일깨워주는 귀중한 사례가 될 수 있음.
     * 아쉬운 점은 성능이 매우 낮다는 것. 실제 활용 가능성을 높이려면 더 최적화된 구현이 필요해 보임. 하지만 그것이 이 프로젝트의 주된 목적은 아닌 듯함.

        Hacker News 의견

     * 이 프로젝트는 하드웨어 MAC 주소 필터링을 구현한 사용자 정의 컴퓨터를 위한 이더넷 카드를 만든 것으로, 작업 과정의 추론 스택 트레이스가 교육적이고 훌륭함.
     * 일반 PC를 위한 이더넷 카드의 최소 구현은 유사할 것이나, PC의 CPU에서 체크섬을 계산하고 USB 등으로 연결해야 할 것임.
     * 이 프로젝트를 위해 C 컴파일러, 링커, libc 등을 직접 만든 것이 인상적임.
     * 이런 프로젝트에 투입된 열정과 노력에 감탄하며, 은퇴 후에 이런 하드웨어/소프트웨어 프로젝트를 해보고 싶음.
     * 과거 Etherlink 3c501 이더넷 카드는 성능이 좋지 않았음.
     * 이산 논리 회로로 네트워크 카드를 만든 것으로 보임. (이산 논리 네트워크 카드가 아니라)
     * 모든 네트워크 카드가 이산 논리 소자로 만들어지는 것은 아님. (naive question)
     * 이 컴퓨터 셋업의 모듈화가 훌륭함.
     * 단순하고 효과적으로 설명한 것이 인상적이고 큰 격려를 받을 만함.
"
"https://news.hada.io/topic?id=14246","Rust 표준 라이브러리를 위한 보안 권고 (CVE-2024-24576)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Rust 표준 라이브러리를 위한 보안 권고 (CVE-2024-24576)

   러스트 표준 라이브러리에 대한 보안 권고가 발표되었습니다. 이는 CVE-2024-24576으로 식별되는 취약점과 관련이 있으며, 특히 Windows에서 .bat 또는 .cmd 확장자를 가진 배치 파일을 Command API를 사용하여 호출할 때 인수를 적절히 이스케이프하지 않는 문제로 인해 발생했습니다.

   공격자가 생성된 프로세스로 전달된 인수를 제어할 수 있는 경우, 이스케이핑을 우회하여 임의의 셸 명령어를 실행할 수 있습니다. 이 취약점은 신뢰할 수 없는 인수로 Windows에서 배치 파일을 호출하는 경우에만 중요합니다. 다른 플랫폼이나 사용 사례는 영향을 받지 않습니다.

   문제의 근본 원인은 Windows에서 cmd.exe (배치 파일을 실행하는 데 사용됨)가 자체 인수 분할 논리를 가지고 있어 표준 라이브러리가 배치 파일로 전달된 인수에 대해 맞춤형 이스케이핑을 구현해야 한다는 것입니다. 보고된 바에 따르면, 이스케이핑 로직이 충분히 철저하지 않아 악의적인 인수를 전달하여 임의의 셸 실행이 가능했습니다.

   AI 의 도움을 받음

   윈도 이스케이핑 문제라니까 그럴 수 있겠다란 생각이 드네요

   전의 winrar 취약점이랑 유사한 것 같아요. 윈도우의 배치 파일 실행 방법과 파일 명명 제약을 활용했었죠.

   역시 세상에 쉬운 일이 없군요 ㅠㅠ
"
"https://news.hada.io/topic?id=14276","OpenAI 내부 연락처 보유자 누구든지, 거미 문제 해결 요청","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  OpenAI 내부 연락처 보유자 누구든지, 거미 문제 해결 요청

OpenAI GPTBot의 웹사이트 크롤링 문제

     * 저자는 자신의 웹사이트 web.sp.am에 OpenAI의 GPTBot이 방문해 과도하게 페이지를 크롤링하는 문제가 있음
          + 하루에 약 300만 페이지를 요청했고, 그 중 180만건은 robots.txt 요청이었음
          + 저자의 사이트는 Content Farm 형태로 68억 5900만개의 웹사이트가 각각 1개의 페이지를 가지고 있는 구조임
          + 모든 페이지가 거의 동일해 보이고 같은 IP, 같은 와일드카드 SSL 인증서를 사용하고 있어 크롤러가 상황을 파악하기 어렵지 않은 상황임
     * 1~2달 전에는 아마존의 크롤러도 비슷한 문제를 일으켜, 연락을 취해 크롤링을 중단시킬 수 있었음
     * 저자는 OpenAI에도 연락할 수 있는 사람이 있는지 문의하고 있음
     * 저자는 GPT-5 학습에 자신의 웹사이트 데이터가 사용되고 있는 것 같다고 농담을 하고 있음

GN⁺의 의견

     * 크롤러가 robots.txt를 제대로 해석하지 못하고 과도한 요청을 보내는 것은 악의적이진 않더라도 상대방 입장에서는 서비스에 피해가 갈 수 있는 심각한 문제임. OpenAI도 빠른 시일 내에 크롤러 로직을 보완해야 할 것으로 보임
     * 특히 Content Farm처럼 수많은 도메인을 운영하는 곳에서는 각각의 사이트를 개별적으로 크롤링하지 않도록 IP 기반 필터링 등의 방안을 고려해야 함
     * 크롤링 봇의 동작을 모니터링하고 이상 징후를 탐지해 빠르게 대응할 수 있는 프로세스와 시스템이 필요해 보임
     * 크롤링 대상 사이트 관리자와 긴밀히 커뮤니케이션 하면서 피해를 최소화할 수 있도록 해야 함. 무조건 데이터 수집에만 집중할 것이 아니라 상생의 관점이 중요함

        Hacker News 의견

     * GPT-2/3/J는 r/counting이라는 서브레딧에서 사용자들이 무한대까지 증분 숫자를 게시하는 것을 보고, SolidGoldMagikarp와 같은 사용자 이름이 인터넷에서 흔한 문자열이라고 간주해 토크나이제이션 중에 최상위 토큰으로 취급함.
     * GPT-3의 어휘는 50,257개의 고유 토큰으로 제한되어 있었음. 이 서브레딧 사용자들의 틈새 취미로 인한 전력 비용 증가와, 실제 텍스트에서 흔한 하위 문자열에 슬롯을 할당하여 평균 입력 토큰 수를 줄이는 것 사이에는 선형 관계는 아니지만 측정 가능한 영향이 있었을 것으로 추측됨.
     * 웹사이트 부제목인 ""IECC ChurnWare 0.3""이 GPT-5의 토큰이 된다면 재미있을 것임.
     * 웹사이트 소유자가 robots.txt를 제대로 작성하지 않아 실제로 크롤링을 허용하는 부분을 주석 처리함.
     * 콘텐츠 팜의 목적에 대한 궁금증이 제기됨. 무의미해 보이지만 기괴한 경제적 인센티브가 있을 것으로 의심됨. 제휴 링크가 있지만 수익은 얼마나 될지 의문임.
     * 일부는 OpenAI 서버 팜에 실제 거미가 있어 다른 랙에 들어가기를 희망했음.
     * 네트워크 보안에서 이를 타르핏(tarpit)이라고 함. 공격, 스캔, 자동화를 지연시켜 공격자의 시간과 에너지 낭비를 유도하고 방어 시간을 벌 수 있음.
     * OpenAI도 robots.txt를 따른다면 봇 차단과 데이터 수집 문제가 있음. 상위 10만 웹사이트 중 11%가 이미 크롤러를 차단하고 있어 경쟁사들보다 많음.
     * 웹사이트 주인은 수백만 페이지 검색을 크게 신경 쓰지 않는 듯하니 OpenAI가 하고 싶은 대로 하게 놔두는 것이 좋겠음.
     * 결국 OpenAI 등은 대부분 AI가 생성한, 종종 약간 부정확한 콘텐츠로 모델을 학습하게 될 것이고, 이는 AI 응답의 품질 저하로 이어질 수 있음. 현재는 대부분 인간이 작성한 콘텐츠지만 5년 후에는 그렇지 않을 것임. AI 업계가 빨리 해결해야 할 문제 중 하나임.
     * 이런 유형의 웹사이트 목적 자체가 스파이더의 시간/리소스를 낭비시키는 것인데, 왜 OpenAI에게는 그렇게 하지 않으려 할까?
     * 이런 허니팟은 LLM 학습을 오염시키는 흥미로운 방법으로 보임.
"
"https://news.hada.io/topic?id=14338","내 고양이가 DDoS 공격을 알려준 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         내 고양이가 DDoS 공격을 알려준 사건

DDoS 공격을 알려준 고양이

     * 필자가 스타트업에서 일할 당시, 공식적인 온콜 로테이션이 없었음
          + 온콜이 고통스러운 일이기에 의도적으로 하지 않았음
          + 대신 팀원들이 함께 긴급 알림에 주의를 기울였음
     * 어느 날 새벽 3시경, 고양이가 필자의 머리를 그루밍하는 바람에 잠에서 깼음
          + 고양이의 그루밍 자체는 특별한 일이 아니었으나, 9년 만에 처음으로 자는 동안 그런 행동을 보였음
     * 휴대폰을 확인하니 AWS CloudWatch 경고가 몇 분 전에 발생했음을 알게 됨
          + 로드 밸런서의 비정상적인 대상으로 인한 경고였음
     * 회사 웹사이트에 접속이 되지 않자, 모니터링 대시보드를 확인함
          + 많은 IP 주소에서 대량의 요청이 들어오고 있었고, 이는 주로 해외 IP였음
          + 회사 제품은 미국 내에서만 사용 가능했기에 해외 트래픽은 일반적이지 않았음
          + 분산 서비스 거부(DDoS) 공격임을 알아챔
     * 처음에는 서버 수준에서 IP 주소를 차단하려 했으나, AWS WAF(Web Application Firewall)가 이미 설정되어 있음을 기억해냄
          + 즉각적인 중단 상황에 대처하기 위해 다른 국가에서의 요청을 차단하는 규칙을 설정함
          + 이 조치로 수십만 건의 요청이 차단되었고, 웹사이트가 다시 작동하기 시작함
     * 나중에 공격이 시작된 시점에 고객 지원 이메일로 메시지가 왔음을 발견함
          + 보낸 사람은 형편없는 문법으로, 사용하지도 않는 Apache를 다운시키는 웹사이트 취약점을 발견했다고 주장함
          + 5,000달러의 비트코인을 보내면 ""솔루션 파일""을 제공하겠다고 했으나, 답장하지 않기로 함
     * 필자는 여전히 고양이가 자신을 깨운 완벽한 타이밍을 믿기 어려워함
          + AWS 경고로 인해 휴대폰이 진동하거나 소리를 내서 고양이가 먼저 깼을 것이라고 추측할 수 있으나, 야간에는 방해 금지 모드를 사용하고 있었음
          + 따라서 고양이가 어떤 식으로든 아침까지 기다릴 수 없는 문제가 있다는 것을 감지했다고 생각하고 싶어함
          + 이는 PagerDuty 알람으로 깨워지는 것보다 훨씬 더 기분 좋은 방식이었음

GN⁺의 의견

     * 스타트업 초기에 공식적인 온콜 로테이션을 갖추기 어려운 건 사실이지만, 적어도 기본적인 모니터링과 알림 시스템은 갖추는 게 좋겠음. 팀원 모두가 상시 대기하는 건 지속 가능하지 않음
     * AWS WAF 등을 미리 설정해두니 급한 상황에서 대처가 수월했던 것 같음. 보안 위협에 대비한 사전 조치의 중요성을 보여주는 사례
     * 공격자의 이메일에 답장하지 않기로 한 건 현명한 판단이었음. 협박에 굴복하면 더 큰 문제를 야기할 수 있음
     * 머신러닝 기반 이상 탐지 시스템을 도입하면 고양이 대신 알고리즘이 이런 공격을 조기에 포착할 수 있을 것. 하지만 반려동물의 직감을 과소평가해선 안 될 듯함

        Hacker News 의견

     * 내부자의 위협을 간과하기 쉬움. 문법적으로 의심스러운 협박 이메일과 비트코인 몸값 요구에 고양이가 공격의 배후일 수 있다는 생각을 못했음
     * 캔자스에서는 지진이 거의 없지만, 기억나는 유일한 지진 경험담:
          + 샴 고양이가 얼굴을 긁어 깨운 후 침대 가장자리에 앉아 으르렁거림 (평소와 다른 행동)
          + 30초 후 흔들림 시작. 어떻게 알았는지 모르겠지만 신기했음. 2020년에 세상을 떠났지만 여전히 그리움
     * 무음 모드에서도 스크린이 깜빡이는 걸 감지했을 수도 있음
     * 첫 직장에서 한 동료는 모니터링 대시보드에서 사고가 발생하기 전에 감지할 수 있었음. 정확히 무엇인지 설명하진 못했지만 이상함을 느꼈고, 대부분 직후 알람이 울렸음
     * 5,000달러의 터무니없는 몸값 요구. 2016년 DDoS 공격을 받았을 때 비트코인을 준비했지만 무시하기로 결정. 대신 DDoS 방어에 훨씬 더 많은 비용을 들였지만, 갈취범에게 돈을 주지 않는 게 가치 있음
     * 협박범을 놀리는 걸 고려했지만, 그들의 레이더에 더 잡힐 수 있어 위험. 무응답이 유일한 해법
     * 누군가의 가족은 고양이가 식기 세척기 누수를 경고했다고 함. 고양이가 구하려 했는지 죽이려 했는지는 결론 내리기 어려웠음
     * 전자기장과 자기장에 민감할 수 있음. 전기 난방 패드나 자석 매트리스에서 자면 다음날 몸이 안 좋았고, CRT 모니터 앞에 오래 있으면 설사를 했음. LCD나 노트북으로 바꾼 후 증상 사라짐. 잘 때 오른쪽엔 무선 공유기, 왼쪽엔 스마트폰으로 유튜브 시청하면 이상한 꿈 꾸고 일찍 깸. 하지만 스마트폰을 오른쪽에 두면 증상 완화
     * 고양이도 소리 없이 무언가를 감지했을 것으로 추측
     * 책 ""주인이 돌아올 때를 아는 개""가 생각남
     * 고양이 사료기를 알람에 연결한 줄 알았는데 귀여운 일화. 고양이 이름이 궁금함
     * DDoS 공격을 완전히 막을 방법이 있을까? 다른 위협에 비해 특별한 기술이나 지식 없이도 스크립트나 서비스만으로 가능한 저급한 공격임
"
"https://news.hada.io/topic?id=14319","평범함에 바친 삶을 기리는 Obituary (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     평범함에 바친 삶을 기리는 Obituary (2023)

북캐롤라이나의 조용한 삶

     * Jeremy B. Jones의 에세이로, 할아버지 Ray Harrell이 북캐롤라이나 산속에서 아무 말 없이 세상을 떠났고, 손자인 자신이 겉보기에는 보잘것없어 보이는 삶의 중요성에 대해 글을 쓰기로 결심함.

할아버지 Ray Harrell의 삶

     * 1930년대 Cataloochee Valley에서 여덟 자녀 중 막내로 자라며 산사자를 피하고 소를 몰며 빌린 지프차를 부수는 등 활발한 어린 시절을 보냄.
     * 90년 후인 올해 1월 20일, 아무 소리 없이 세상을 떠남. 비석도, 장례식도 없이 조용히 세상을 뜨는 것이 그의 바람이었음.
     * 할머니가 전화로 부고를 알리며 손자에게 부고를 써달라고 부탁함.
     * 10대 때 스쿨버스를 훔쳐 선생 차를 들이받은 일, 1950년 독일 주둔 중 실수로 포탄을 쏴 빈집을 날려버린 일, 평생 일한 섬유공장에서 노조를 이끈 일 등 많은 일화가 있었지만, 그는 그런 것들에 대해 많이 말하지 않았음.
     * 그가 하고자 한 것은 노스캐롤라이나 프루틀랜드에서 조용히 살면서 딸들을 키우고 집안일을 하는 것이었음.

조용한 삶의 가치

     * 부고를 쓰면서 화려한 업적이나 상패가 없는, 뒤에서 조용히 살아가는 삶에 대해 무엇을 써야 할지 고민함.
     * 눈에 띄는 인물들이 세상을 떠나면 그들의 업적과 영향력이 조명되지만, 조용한 삶은 무심히 지나감. 하지만 그런 삶들이 우리의 피부에 와 닿으며 아침부터 밤까지 우리를 이끌어주고 세상을 움직이게 함.
     * 할아버지는 일상의 작은 일들, 이웃 돕기, 위험에 빠진 사람 구하기, 가난한 조카 돕기 등을 묵묵히 실천하며 작은 삶을 일궈냄.
     * 화려한 개인주의가 아닌, '난 여기서 괜찮아'라고 말하며 조용히 살아가는 삶이야말로 진정 혁신적인 삶임.

할아버지와의 추억

     * 마지막 1년간 할아버지를 방문할 때마다 들은 ""우리는 좋은 삶을 살았어""라는 말이 진심임을 알게 됨.
     * 할아버지에게서 훔친 스쿨버스, 부순 지프차, 진흙에 빠뜨린 소, 한국전쟁 때 독일에서 카드 게임으로 번 돈으로 유럽 여행한 이야기, 섬유공장에서 해고당한 이야기 등을 들음.
     * 할아버지는 불의에 맞서 싸웠고, 노조 활동을 하며 소신을 굽히지 않았음. 조용한 삶이 수동적인 삶은 아니며, 개인의 이익과 정의로운 투쟁을 구분할 줄 알았음.

할아버지와의 작별

     * 할아버지가 돌아가시기 한 달 전, 할머니를 보고 ""이봐, 이쁜 아가씨""라고 말했던 모습이 기억에 남음.
     * 손자가 아들들을 데리고 작별 인사를 하러 갔을 때, 할아버지는 ""사랑한다""는 말을 남기셨음.
     * 할아버지의 선행은 공식 기록에는 없을지 모르지만, 조용하고 꾸준히 흐르는 물처럼 많은 이에게 스며들었음.

GN⁺의 의견

     * 이 에세이는 화려하지 않지만 성실하고 선한 영향력을 끼치며 살아간 한 개인의 삶을 조명하고 있습니다. 요즘같이 개인주의가 팽배하고 눈에 띄는 것만 주목받는 세상에서, 뒤에서 묵묵히 맡은 바 소임을 다하며 살아가는 분들이 많다는 것을 일깨워 줍니다.
     * 할아버지의 삶은 겉으로 보기에는 특별할 것이 없어 보이지만, 가족을 사랑하고 이웃과 함께 하며 정의로운 일에 앞장섰던 귀감이 되는 삶인 것 같습니다. 눈에 보이는 업적이 아니어도 우리 곁에는 이런 고마운 분들이 많다는 것을 알게 해주는 글입니다.
     * 다만 글쓴이의 할아버지뿐 아니라 이런 조용한 영웅들을 더 조명하고 기억했으면 하는 바람이 듭니다. 유명인들의 삶도 물론 기억되고 공유되어야 하지만, 우리 주변에 감사할 만한 평범한 사람들의 선행도 널리 알려지길 바랍니다.
"
"https://news.hada.io/topic?id=14300","AWS, 클라우드 스토리지 특허 분쟁에서 5억 2500만 달러 배상 판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AWS, 클라우드 스토리지 특허 분쟁에서 5억 2500만 달러 배상 판결

     * 일리노이 연방 배심원단은 수요일, 세계 최대 클라우드 서비스 제공업체인 아마존닷컴의 아마존 웹 서비스(AWS)가 데이터 스토리지 기술 관련 특허권을 침해해 기술 회사 Kove에 5억 2500만 달러를 배상해야 한다고 판결함
     * AWS가 Kove의 3개 특허를 침해했다고 배심원단이 결정함
          + 이 특허는 Kove가 ""막대한 양의 데이터를 저장하고 검색하는"" AWS의 클라우드 컴퓨팅 부문의 능력에 ""필수적""이 된 기술을 다룸
     * 아마존 대변인은 평결에 동의하지 않으며 항소할 예정이라고 밝힘
     * Kove의 수석 변호사 Courtland Reichman은 평결을 ""혁신의 힘과 스타트업 기업의 지식재산권을 기술 대기업으로부터 보호하는 것의 중요성에 대한 증거""라고 칭함

Kove의 AWS 특허 침해 소송

     * 시카고에 본사를 둔 Kove는 2018년 일리노이 북부 지역 미국 지방법원에서 아마존을 고소함
     * Kove는 소송에서 ""클라우드 시대가 도래하기 수년 전""에 고성능 클라우드 스토리지를 가능하게 하는 기술을 개척했다고 주장함
     * Kove는 AWS의 Amazon S3 스토리지 서비스, DynamoDB 데이터베이스 서비스 및 기타 제품이 클라우드 스토리지 특허를 침해했다고 주장함
     * 수요일 배심원단은 AWS가 문제의 Kove 특허 3개를 모두 침해했다는 Kove의 주장에 동의함
          + 다만 AWS가 고의로 Kove의 권리를 침해했다는 주장은 기각함
     * AWS는 혐의를 부인하고 특허가 무효라고 주장함

Kove의 Google 특허 침해 소송

     * Kove는 작년 동일한 특허 침해로 Google을 상대로 별도의 일리노이 소송을 제기함
          + 이 소송은 아직 진행 중임

    Hacker News 의견

     * 지적 재산권의 개념은 수천 년 동안 인류가 사회적, 기술적으로 발전해 온 방식과는 정반대되는 것임
          + 지적 재산권은 혁신을 방해하고 문화에 대한 통제권을 금전적 수단이 있는 자에게 넘겨주는 낭비적인 일탈임
          + 그 통제권을 되찾는 날이 좋은 날이 될 것임
     * Amazon S3가 침해한 2개 특허 링크가 제시됨
          + 네트워킹에 대해 잘 모르지만 헤더 필드 몇 개가 특허로 보호받을 만한 가치가 있어 보이진 않음
          + Kove가 패소하기를 바람
     * 첫번째 특허를 프로그래머의 입장에서 읽어보면, API로 구성 가능한 DNS 시스템을 다루는 것 같은데, 이는 S3뿐만 아니라 거의 모든 도메인 관련 시스템에 해당될 것 같음
     * 특허 트롤링으로 보임. Amazon이 항소에서 승소하기를 바람
          + Amazon 법률 담당자에게는 배심원단에게 이것을 설명하고 최선을 다해야 하는 악몽 같은 상황임
     * Amazon은 특허의 구현을 연필과 종이를 이용해서 작성하는 사람들에게 돈을 지불하면 됨
          + 종이는 많이 필요하겠지만 CLS Bank에서 제시한 ""펜과 종이로 할 수 있다면""이라는 기준을 충족시킬 것임
          + 복잡하거나 어렵지 않고 그저 지루할 뿐임
     * Amazon이 1-클릭 결제를 특허 출원한 것을 생각하면 동정심이 크게 들지 않음
     * 많은 선행 기술 사례들이 있는데 이해가 안 됨
          + freenet과 gnutella는 특허보다 몇 달 먼저 나왔고, CODA 파일 시스템(1987)도 특허의 모든 청구항을 충족함
     * 이런 특허 트롤들은 혁신을 저해하는 문자 그대로의 기생충임
     * 이건 미친 판결이고 실제로 일어날 리 없음
     * 소프트웨어 특허에 대해서는 계속 결정을 내리지 못하고 있음
          + 소프트웨어 특허는 전반적으로 나쁜 생각이며, 영업 비밀로 하고 아이디어가 공공 영역에 들어가지 않게 해야 함
          + 반면 좋은 아이디어가 공공 영역에 들어가는 것은 사회에 큰 이득이 되며, 특허 제도는 모두가 비밀 소스를 비밀로 유지하는 것을 막는 데 꽤 효과적임
          + 미국에서 소프트웨어 특허가 있고 Amazon과 Google이 이미 무효화시키지 않은 것으로 보아 이번 결정은 꽤 명백해 보이므로 Kove에게 축하를 표할 뿐임
"
"https://news.hada.io/topic?id=14299","브라우저에서 직접 실행 가능한 Transformers.js","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    브라우저에서 직접 실행 가능한 Transformers.js

     * Transformers.js는 서버 없이 브라우저에서 직접 🤗 Transformers를 실행할 수 있는 웹용 최첨단 머신러닝 라이브러리임
     * Python transformers 라이브러리와 기능적으로 동등하도록 설계되어 동일한 사전 훈련된 모델을 유사한 API로 실행할 수 있음
     * 자연어 처리, 컴퓨터 비전, 오디오, 멀티모달 등 다양한 양식의 일반적인 작업을 지원함
     * ONNX Runtime을 사용하여 브라우저에서 모델을 실행하며, 🤗 Optimum을 사용하여 PyTorch, TensorFlow 또는 JAX 사전 훈련 모델을 ONNX로 쉽게 변환할 수 있음

주요 기능

     * Python 라이브러리와 동일한 pipeline API 지원으로 기존 코드에서 쉽게 변환 가능
     * 다양한 작업과 아키텍처 지원 (지원 여부 및 문서/모델 링크 포함)
          + 자연어 처리: Fill-Mask, Question Answering, Sentence Similarity, Summarization, Text Classification, Text Generation, Text-to-text Generation, Token Classification, Translation, Zero-Shot Classification, Feature Extraction 등
          + 비전: Depth Estimation, Image Classification, Image Segmentation, Image-to-Image, Object Detection, Image Feature Extraction 등
          + 오디오: Audio Classification, Automatic Speech Recognition, Text-to-Speech
          + 멀티모달: Document Question Answering, Image-to-Text, Zero-Shot Audio/Image Classification, Zero-Shot Object Detection 등
     * 호스팅된 사전 훈련 모델과 사전 컴파일된 WASM 바이너리를 기본으로 사용하며, 사용자 정의 가능

설치 및 사용 방법

     * NPM으로 설치 가능: npm i @xenova/transformers
     * CDN이나 정적 호스팅을 사용하여 번들러 없이 바닐라 JS에서 사용 가능
     * 다양한 샘플 애플리케이션/템플릿 제공: Whisper Web, Doodle Dash, Code Playground, Semantic Image Search, Vanilla JavaScript, React, Text to speech, Browser extension, Electron, Next.js, Node.js 등
     * 환경 설정을 통해 모델 경로, 원격 모델 로드 여부, WASM 파일 위치 등을 사용자 정의할 수 있음
     * 제공되는 변환 스크립트를 사용하여 PyTorch, TensorFlow, JAX 모델을 ONNX로 변환 가능

지원되는 모델

     * ALBERT, Audio Spectrogram Transformer, BART, BEiT, BERT, Blenderbot, BLOOM, CamemBERT, Chinese-CLIP, CLAP, CLIP, CLIPSeg, CodeGen, ConvBERT, ConvNeXT, DeBERTa, DeiT, Depth Anything, DETR, DINOv2, DistilBERT, DiT, Donut, DPT, EfficientNet, ELECTRA, ESM, Falcon, FLAN-T5, GLPN, GPT Neo, GPT NeoX, GPT-2, GPT-J, GPTBigCode, HerBERT, Hubert, LongT5, LLaMA, MPNet, MPT, MT5, NLLB, Nougat, OPT 등 다양한 모델 지원

GN⁺의 의견

     * Transformers.js는 서버 없이 브라우저에서 다양한 최신 Transformer 모델을 실행할 수 있게 해주는 유용한 라이브러리임. 특히 자연어 처리, 컴퓨터 비전, 오디오 등 여러 분야의 작업을 지원해 활용도가 높음
     * Python 라이브러리와 유사한 API를 제공하여 기존 코드에서 쉽게 전환할 수 있고, 많은 사전 훈련된 모델을 지원하므로 추가 학습 없이 바로 사용 가능함
     * 샘플 애플리케이션과 템플릿을 제공하여 다양한 용도로 활용하기 쉬우며, 사용자 정의 기능도 제공하여 유연성이 높음
     * 다만 브라우저에서 실행되는 만큼 리소스 제약이 있을 수 있고, 최신 모델을 계속 추가/지원해야 하는 점은 개발 유지보수 측면에서 부담이 될 수 있음
     * 유사한 브라우저 기반 ML 프레임워크로는 TensorFlow.js, ONNX.js, WebDNN 등이 있음. 특히 TensorFlow.js는 브라우저와 Node.js 모두 지원하며 전이학습, 시각화 등 더 많은 기능을 제공함
"
"https://news.hada.io/topic?id=14278","Show HN: ADS-B 시각화 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show HN: ADS-B 시각화 도구

        Hacker News 의견

     * ClickHouse로 구현한 비행기 추적 시각화가 아름답고 혁신적임. 특히 런던 템즈강을 따라 비행하는 헬기 시각화가 인상적임.
     * SQL로 ADS-B 데이터를 WebGL 셰이더처럼 처리한 점이 독창적임. 이는 항공 교통 분석 및 시각화 분야에 새로운 혁신을 가져올 것으로 기대됨.
     * Python과 ClickHouse를 이용해 airplanes.live API에서 10초마다 ADS-B 데이터를 수집하고 저장하는 유사한 프로젝트를 진행 중임. ClickHouse를 통해 항공사별 기종 분포, 최고 속도 순위 등 흥미로운 분석이 가능함.
     * 기술적으로 놀라운 성과임. 군용기는 보통 ADS-B를 끄고 비행하며, 글라이더도 ADS-B를 송출하지 않아 이들이 시각화에 포함된 것이 의외임. 미국에서는 통제 공역과 주요 공항 인근에서 ADS-B 장착이 의무화되어 있음.
     * 처음에는 낮은 해상도로 시작하여 점차 부드러워지는 타일 기반 이미지 렌더링 방식이 흥미로움. 서버가 픽셀 단위의 타일 캐시를 유지하는지 궁금함.
     * 라즈베리 파이에서 유사한 것을 구현하는 튜토리얼도 공유됨.
     * 해상 위의 비행 궤적은 위성이 아닌 다른 방식으로 수집되는 것으로 보임. 해상에서의 데이터가 상대적으로 적음.
"
"https://news.hada.io/topic?id=14244","Show HN: 기업들의 SaaS 지출 파악을 위해 개발한 PriceLevel","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show HN: 기업들의 SaaS 지출 파악을 위해 개발한 PriceLevel

PriceLevel - 소프트웨어 가격 공개 플랫폼

     * PriceLevel은 기업들이 실제로 소프트웨어에 지불하는 가격을 공개하는 플랫폼임
     * ""Contact Us""로 숨겨진 가격에 대한 가시성을 제공함
     * 가격 통찰력을 탐색할 수 있음

주요 기능

  공급업체별 가격 정보

     * Amplitude, Blueshift, Carta 등 다양한 소프트웨어 공급업체의 가격 정보 제공

  카테고리별 가격 정보

     * 고객 데이터 플랫폼, 마케팅 자동화, 인적자원관리 등 카테고리별로 소프트웨어 가격 정보 제공

GN⁺의 의견

     * 소프트웨어 가격은 보통 공개되지 않아 구매자 입장에서는 정보의 비대칭이 있었음. 이 플랫폼은 이러한 정보 격차를 해소하는데 도움이 될 것으로 보임
     * 단, 가격 정보의 정확성과 최신성을 어떻게 담보할 것인지가 관건이 될 것임. 가격이 실제와 다를 경우 사용자 신뢰도가 하락할 수 있음
     * 경쟁 제품으로는 G2나 Capterra 등이 있으나, 가격보다는 제품 비교에 초점을 두고 있음. PriceLevel은 명확히 가격에 특화된 플랫폼이라는 차별점이 있음
     * 각 소프트웨어 카테고리별 평균가, 최고가, 최저가 등의 통계 지표를 제공한다면 구매 의사결정에 더욱 도움이 될 것으로 보임
     * 가격 정보 외에 제품의 핵심 기능이나 차별점 등에 대한 정보도 함께 제공된다면 구매자에게 더욱 유용할 것임

        Hacker News 의견

     * 소비자 입장에서는 가격 정보의 공개가 매우 환영할 만한 일이지만, 공급자 입장에서는 가격 정보가 영업 기밀에 해당할 수 있어 법적 문제의 소지가 있음
     * 구매자로서는 가격 정보를 얻는 것이 좋지만, 운영자 입장에서는 대부분의 SaaS 계약서에 가격 정보를 포함한 공급업체의 기밀 정보 보호 조항이 있어 구매자가 이를 공유하는 것은 합법적이지 않을 가능성이 높음. 이를 공개적으로 공유하면 리스크를 안게 됨
     * 개인정보 보호를 위해 가격과 시트 수 등의 세부 정보를 약간 흐리게 처리하는 것이 좋음. 충분한 샘플이 확보되면 개별 계정 대신 오차 막대가 있는 집계 데이터를 보여주는 것도 방법
     * 경쟁사 제품에 대해 가짜로 비싼 견적을 제출하는 것
     * HubSpot의 계약 내용과 지불 금액이 불투명함. 계약 감사 전문가가 확인하기 전까지는 정확한 금액을 모름. WeWork처럼 구글 시트를 사용하는 것이 나을 것 같음
     * 가격 정보가 공개되면 비용의 차이가 줄어들 것임. 유사한 SaaS의 가격이 공개되면 사람들은 항상 더 저렴한 옵션을 선택할 것임 (동일한 기능을 가정할 경우)
     * SaaS 기업들이 좋아하지 않을 것 같은 서비스. 최종 사용자가 이런 유형의 정보를 사이트를 통해 공유하는 데 법적 위험은 없는지 궁금함
     * 고객이 이 정보를 공유하는 것이 합법적인지 여부는 회색 영역. 데이터가 집계된 형태로만 공유된다면 소환장 없이는 별로 할 수 있는 일이 없을 것. 익명 고객을 상대로 John Doe 소송? PriceLevel은 사용자의 PII를 보관할 필요가 없음. 데이터를 캡처, 검증하고 PII를 삭제할 수 있음
     * 가격이 월별인지 단위가 명확하지 않음 (예: HubSpot)
     * 사람들이 정직하게 가격 정보를 입력하는지 어떻게 아는지, 익명 응답자를 어떻게 신뢰할 수 있는지에 대한 의문
"
"https://news.hada.io/topic?id=14226","존 폰 노이만이 로스앨러모스에서 수행한 일들 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    존 폰 노이만이 로스앨러모스에서 수행한 일들 (2020)

        Hacker News 의견

     * 수학과 과학 교육에 대한 의견:
          + 과거에 비해 현재 수학이 어떻게 가르쳐지는지 궁금함.
          + 과거에는 ""모든 것을 이미 알고 있으니 이것만 배우면 돼""라는 느낌으로 수학과 과학을 배움.
          + 반면 현재는 해결해야 할 큰 문제들이 많이 남아 있으며, 수학과 물리학을 배워 이를 해결해달라는 요청이 있음.
          + 젊은 사람이 어떻게 ""몇 가지를 혁신해보는 것이 나에게도 가능하겠다""는 생각을 갖게 되는지 궁금함.
     * 폰 노이만의 컴퓨터 과학 기여에 대한 의견:
          + 폰 노이만이 컴퓨터 과학에 어떤 구체적인 기여를 했는지에 대한 명확한 정보를 찾고 있음.
          + 폰 노이만이 전문가가 아닌 일반화된 원칙을 널리 알린 것으로 보임.
          + 프로그램과 데이터를 같은 메모리에 저장하는 것이 보안 취약점의 원천이 되었다고 생각함.
     * 글쓴이에 대한 의견:
          + 이 글의 저자가 훌륭한 작가라고 평가함.
          + 저자의 블로그와 3quarksdaily의 블로그 롤도 주목할 만함.
     * 폰 노이만에 대한 전기 추천:
          + 폰 노이만과 관련 인물들에 대한 드라마틱하고 허구화된 전기를 추천함.
     * 참조된 유튜브 비디오에 대한 의견:
          + 참조된 유튜브 비디오가 삭제되었으나 인터넷 아카이브에서 찾을 수 있음.
          + 1966년의 비디오로 폰 노이만을 아는 사람들이 그에 대해 이야기하는 내용이 흥미로움.
     * 폰 노이만에 대한 인용구:
          + ""비선형 과학이라는 용어를 사용하는 것은 동물학의 대부분을 코끼리가 아닌 동물 연구라고 부르는 것과 같다""는 인용구를 기억할 만함.
     * 폰 노이만에 대한 책 추천:
          + 폰 노이만의 비전 있는 삶에 대해 다룬 'The Man from the Future'라는 책을 추천함.
          + 게임 이론 등 폰 노이만의 다른 기여에 대해서도 설명함.
     * 글에 대한 감상:
          + 글이 매우 흥미로움.
          + 오펜하이머 영화에서 폰 노이만이 카메오로도 등장하지 않은 것이 아쉬움.
          + 저자가 언급한 '튜링의 성당'이라는 책도 이 글을 즐긴 사람들에게 추천함.
     * 폰 노이만의 플루토늄 폭탄 기여에 대한 개인적 추측:
          + 폰 노이만이 플루토늄 폭탄에 기여하지 않았다면 오늘날 수소폭탄이 존재하지 않을 가능성이 있음.
          + 미국은 이미 우라늄-235 폭탄을 히로시마에 투하했고, 플루토늄 폭탄의 대안으로 U-233 폭탄도 고려했음.
          + 소련이 나가사키 폭탄의 정확한 복제품을 만들어 1949년에 시험했으며, 만약 U-233과 U-235만 고려했다면 불확실한 설계를 탐구하지 않았을 것임.
          + 수소폭탄은 본질적으로 임플로전 폭탄이며, 이는 임플로전 설계에 대한 깊은 이해의 부산물임.
     * 글의 작성 스타일에 대한 의견:
          + 글이 매우 잘 쓰여져 있어 읽기 쉬움.
          + 이렇게 잘 쓰고 명확하게 표현하는 방법을 알고 싶음.
"
"https://news.hada.io/topic?id=14348","PuTTY 취약점 vuln-p521-bias 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      PuTTY 취약점 vuln-p521-bias 발견

PuTTY 툴의 NIST P521 커브 ECDSA 개인키 서명 생성 취약점

     * PuTTY 0.68부터 0.80까지 모든 버전에는 NIST P521 커브를 사용하는 ECDSA 개인 키에서 서명을 생성하는 코드에 심각한 취약점이 있음
          + PuTTY 또는 Pageant가 SSH 서버에 인증할 때 키에서 서명을 생성할 때 발생
          + 이 취약점에는 CVE-2024-31497이 할당됨
          + Ruhr University Bochum의 Fabian Bäumer와 Marcus Brinkmann이 발견

    취약점의 영향

     * 이 취약점의 영향은 개인키가 노출되는 것임
          + 공격자가 수십 개의 서명된 메시지와 공개키를 가지고 있으면 개인키를 복구하기에 충분한 정보를 가지게 됨
          + 이를 통해 마치 사용자인 것처럼 서명을 위조하여 해당 키를 사용하는 모든 서버에 로그인할 수 있음
     * 이러한 서명을 얻기 위해 공격자는 키를 사용하여 인증하는 서버를 잠시 침해하거나, 키를 보유한 Pageant 사본에 잠시 액세스하기만 하면 됨
          + 그러나 이러한 서명은 SSH 연결의 수동적인 도청자에게는 노출되지 않음
     * 이러한 유형의 키가 있는 경우 즉시 폐기할 것을 권장
          + 모든 OpenSSH authorized_keys 파일과 다른 SSH 서버의 동일한 파일에서 이전 공개키를 제거하여 손상된 키의 서명이 더 이상 가치가 없도록 해야 함
          + 그런 다음 새 키 쌍을 생성하여 교체

    영향 받는 키 타입

     * 영향을 받는 유일한 키 타입은 521비트 ECDSA임
          + Windows PuTTYgen에서 'Key fingerprint' 상자의 시작 부분에 ecdsa-sha2-nistp521이 표시되거나, Windows Pageant에 로드될 때 'NIST p521'로 설명되거나, SSH 프로토콜 또는 키 파일에서 ecdsa-sha2-nistp521로 시작하는 ID를 가진 키
          + 다른 크기의 ECDSA와 다른 키 알고리즘은 영향을 받지 않음
          + 특히 Ed25519는 영향을 받지 않음

    오류 상세 내용

     * 모든 DSA 서명 체계는 서명 중에 무작위 값을 생성해야 함
          + 이를 'nonce'(한 번만 사용되는 값을 의미하는 암호학 용어) 또는 k라는 문자로 알려져 있음
     * 공격자가 사용한 k 값을 추측하거나 동일한 k로 생성한 두 개의 서명을 찾을 수 있다면 즉시 개인 키를 복구할 수 있다는 것이 잘 알려져 있음
          + 따라서 고품질 무작위성 소스가 없는 시스템에서 DSA 서명을 생성하는 것은 위험함
     * PuTTY는 Windows에서 개발되었기 때문에 암호화 난수 생성기가 전혀 없었음
          + 따라서 PuTTY는 무작위 숫자를 전혀 사용하지 않고 결정적인 방법을 사용하여 k를 생성해 왔음
          + 해시 입력에 서명할 메시지와 개인 키를 모두 포함하는 보안 해시를 계산하는 것이 핵심 기법
     * 이 기술은 현재 주류이며 RFC 6979는 이를 수행하는 구체적이고 잘 알려진 방법을 문서화하고 있음
          + 그러나 PuTTY는 2001년부터 동일한 작업을 수행했고 RFC는 2013년까지 게시되지 않았기 때문에 해당 사양을 따르지 않았음

    취약점 발생 원인

     * PuTTY의 기술은 SHA-512 해시를 만든 다음 DSA 시스템에 사용되는 그룹 순서인 q로 모듈로 축소하는 방식으로 작동
     * P521을 제외한 모든 경우에 512비트 숫자를 q로 줄임으로써 발생하는 편향은 무시할 만한 수준
     * 그러나 P521의 경우 q가 521비트(즉, 512비트 이상)이므로 512비트 숫자를 q로 줄이는 것은 아무런 효과가 없음
          + 상위 9비트가 항상 0인 k 값을 얻게 됨
     * 이러한 편향으로 인해 키 복구 공격이 가능해짐

    취약점 수정 내용

     * 이 취약점을 해결하기 위해 모든 DSA 및 ECDSA 키 유형에 대해 PuTTY의 이전 k 생성 시스템을 완전히 버리고 RFC 6979 기술로 전환
          + Ed25519와 같은 EdDSA 키는 이미 다른 시스템을 사용했으며 변경되지 않음
     * 그러나 이전 k 생성기를 사용하여 서명이 생성될 때마다 기존 P521 개인 키에 대한 정보가 이미 유출되었다는 사실에는 영향을 미치지 않음

GN⁺의 의견

     * 비교적 최근에 발견된 취약점이지만, 2001년부터 사용되던 방식의 문제점으로 발생한 것으로 보임. 애초에 표준을 따르지 않은 커스텀 구현방식이 가진 위험성을 보여주는 사례로 볼 수 있음.
     * 이번 취약점은 특정 타입의 키에만 영향을 미치지만, 해당 키를 사용한 적이 있다면 심각한 문제가 될 수 있으므로 영향 받는 키를 즉시 폐기하는 것이 중요함.
     * 오픈소스 프로젝트에서 암호화 관련 부분은 표준을 따르고, 외부 검증도 필요해 보임. 특히 난수 생성 부분은 매우 중요하므로 운영체제나 검증된 라이브러리에 의존하는 것이 안전할 것으로 보임.
     * PuTTY는 SSH, Telnet, Rlogin 프로토콜을 지원하는 널리 사용되는 오픈소스 터미널 에뮬레이터로, 접속 정보 저장 기능으로 편리하게 사용되고 있음. 향후 취약점 패치에 적극적으로 대응하는 것이 필요해 보임.
     * macOS나 리눅스에서 PuTTY 대신 사용할 수 있는 터미널로는 기본 터미널 앱이나 iTerm2 등이 있음. 윈도우에서는 Windows Terminal, PowerShell, Cmder 등을 대안으로 고려해 볼 수 있음.

   아..

   해당 타입의 키를 쓴 적은 없는 것 같지만, 일단 업데이트는 했습니다.

   이거보고 0.81로 바로 업데이트 했네요 ㅎㅎ

        Hacker News 의견

   다음은 해커뉴스 댓글들을 요약한 내용입니다:
     * PuTTY에서 사용하는 ECDSA P-521 키 생성 방식에 취약점이 발견됨. 521비트 모듈러스를 사용할 때는 k 값도 521비트 랜덤이어야 하는데, PuTTY는 512비트 랜덤만 사용해 상위 9비트가 0으로 채워짐. 이는 선형대수를 통해 개인키 유출로 이어질 수 있음.
     * PuTTY 개발자 Simon Tatham의 솔직하고 명확한 취약점 공개 자세를 높이 평가함. 변명이나 축소 없이 사실 그대로를 전달함.
     * 취약점이 어떻게 발견되었는지에 대한 배경 설명이 부족함.
     * 최신 Windows에는 OpenSSH가 기본 내장되어 있어 PuTTY를 더 이상 사용하지 않아도 됨. 다만 사용 습관이나 관성으로 계속 쓰는 사람들이 많음.
     * 기본값을 사용하지 않고 해당 키 타입을 선택한 사람은 많지 않을 것임.
     * P521 호스트 키를 사용중이라면 클라이언트 업그레이드 후 키 교체가 필요할 수 있음.
     * RNG나 모듈러 연산이 필요없는 EdDSA로의 전환을 고려해볼 만함.
     * PuTTY라는 이름이 창문 유리를 고정하는 퍼티(putty)에서 유래했음을 뒤늦게 깨달음.
     * PuTTY가 SHA-512 해시 결과를 q로 모듈러 연산한 이유가 이해가 안 됨. 필요한 비트만큼 잘라쓰거나 메시지와 개인키를 각각 해시한 뒤 조합하는 방식이 더 나아보임.
     * 521비트 랜덤 숫자 대신 상위 9비트가 0인 숫자를 사용하면 60번 서명 후 개인키가 유출된다는데, 어떤 원리인지 궁금함.
"
"https://news.hada.io/topic?id=14346","Supabase, 4년간의 베타를 거쳐 이제 GA(일반 사용 가능)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Supabase, 4년간의 베타를 거쳐 이제 GA(일반 사용 가능)

     * ""오픈소스 Firebase 대체제""로 시작해서 지금은 ""Postgres + 유용한 도구""를 호스팅 하는 백엔드 회사
          + 관리형 Postgres, 사용자 인증, Edge Function(FaaS), Realtime(웹소켓, DB동기화, 브로드 캐스팅), 객체 저장소, 벡터 임베딩등을 지원
     * ""Build in a weekend, scale to millions""
          + 현재는 1백만개의 데이터베이스를 관리하며, 매일 2500개의 새로운 DB가 런칭
          + 작은 앱부터 1Password, PwC, 존슨&존슨 같은 대규모 회사들까지 이용중
     * GA 에서 새로 추가되는 것들
          + Supabase Index Advisor 가 Supabase Studio에 추가
          + Supabase Branching : Git 브랜칭 하듯이 DB 변경을 만들고 테스트 가능
          + Postgres용 스토리지 엔진인 Oriole을 인수, 테이블 생성시에 사용 가능
          + 새로운 프로젝트 런칭을 쉽게해주는 Supabase Bootstrap
          + Swift SDK가 공식 지원 클라이언트에 추가

   Supabase 공개 베타 시작 - 오픈소스 Firebase 대체제

   처음에 공개 베타 시작할때 긱뉴스에 올라온 글에는 Supabase 공동창업자가 와서 댓글을 남기기도 했었는데요.
   그 이후로 정말 다양한 기능들과 오픈소스를 만들어서 Postgres 쪽에는 큰 영향을 주고 있습니다.
     * Supabase Edge Runtime 오픈소스 공개
     * Supabase Realtime - Multiplayer 기능 GA로 공개
     * pg_graphql - PostgreSQL용 GraphQL 확장
     * Postgres Language Server
     * PostgreSQL Index Advisor
"
"https://news.hada.io/topic?id=14294","Webb 망원경, 현재 관측 중인 대상은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Webb 망원경, 현재 관측 중인 대상은?

        Hacker News 의견

     * 웹 페이지에 표시된 이미지는 실시간이 아니라 과거에 수행된 Two Micron All Sky Survey(2MASS) 프로젝트의 배경 이미지임.
     * 현재 웹의 관측 대상은 고적색편이 쌍둥이 퀘이사의 조사이며, 49분 55초 동안 관측이 이뤄짐. 중력 렌즈 효과로 인해 왜곡, 증폭, 분할된 초기 은하 중심부 블랙홀의 이미지를 얻을 수 있음.
     * 우주의 광대함과 섬세함에 압도되는 경험을 하게 됨. 삶이 힘들 때 이를 보며 마음을 다잡을 수 있음.
     * 웹이 현재 관측하는 대상을 배경화면 등으로 실시간 이용하고 싶지만, 단일 이미지가 아니라 Aladin이라는 JS 라이브러리가 여러 이미지를 이어 붙여 표시하고 있음.
     * 밝은 별 주위에 웹 망원경 특유의 6각형 패턴이 보이지 않는 이유가 궁금함.
     * 데스크탑 위젯이나 간단한 애플리케이션을 통해 이 정보를 실시간으로 볼 수 있으면 좋겠음.
"
"https://news.hada.io/topic?id=14330","개발자 도구 판매의 문제점: 개발자의 구매 권한 부재","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     개발자 도구 판매의 문제점: 개발자의 구매 권한 부재

        Hacker News 의견

   Here are the key points from the Hacker News comments, summarized in a neutral and informative manner for a junior software engineer:
     * Most sales and finance people also lack the authority to purchase developer tools without approval, which is why many resort to using company-provided or free tier tools.
     * Excel is ubiquitous because it is often the most powerful tool that Corporate IT allows. Web apps are also popular since they can be used without IT's knowledge.
     * Trying to get a $50 book approved can be a sign that you're at the wrong company. However, even developers with no purchasing authority can sometimes rack up large unexpected bills, e.g., by sharing a Notion account.
     * When selling developer tools to large companies:
          + Ensure current developers find it very useful and advocate for it
          + Avoid potential blockers like opaque contracts, vendor lock-in, data security/privacy issues, SSO/auth integration challenges
          + Provide clear, sensible pricing (per developer per month, site license, etc.) with cost controls and usage reporting
          + Offer professional services for integration/implementation to bypass IT gatekeepers
          + Don't try to sell something the customer believes they can build in-house
     * Some companies have a ""buy what you need"" policy and trust developers not to overspend. This can make life easier without increasing costs.
     * As a self-employed developer, few ""developer tools"" are useful enough to integrate into one's workflow.
     * Buying your own software licenses and claiming them on taxes can be a smart career move, leading to raises and better project choices.
     * Spending policies can vary wildly between sales and engineering departments, or when using cloud services vs. other purchases.
     * Business models targeting developers as decision makers work for tools like IDEs where individual choices are locally optimized. For databases, infrastructure, and cloud, company-wide standardization is often necessary.
"
"https://news.hada.io/topic?id=14243","워드프레스 개발사 Automattic, 안드로이드용 iMessage로 유명해진 Beeper를 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         워드프레스 개발사 Automattic, 안드로이드용 iMessage로 유명해진 Beeper를 인수

     * Beeper는 14개 채팅을 통합하는 유니버설 채팅앱을 만드는 회사
     * 최근 안드로이드용 iMessage인 Beeper Mini를 만들었다가 애플한테 차단당하면서 유명해짐
     * Automattic은 WordPress 와 WooCommerce로 인터넷 인프라의 많은 부분을 차지하고 있음
          + 2019년에 Tumblr를 저렴하게 인수(야후가 2013년에 1.2조에 인수했지만, $3M에 인수했다고)
          + 2020년에 Matrix를 만들고 있는 New Vector에도 $4.6M을 투자했음
          + 2023년에 작년에 모든 메시지를 하나의 인박스에 모으는 Texts.com 을 인수 : iMessage, WhatsApp, Telegram, Signal, Facebook Messenger, X, Instagram, Linkedin, Slack, Discord DM
     * Beeper CEO가 메시징 부분 책임자로 가게되며 Beeper 와 Texts.com 을 통합할 예정
     * Beeper가 현재 지원하는 네트워크
          + Whatsapp
          + Facebook Messenger
          + Twitter
          + Android SMS
          + Google Messages (SMS/RCS)
          + Telegram
          + Signal
          + Matrix
          + Slack
          + Google Chat
          + Instagram
          + IRC (Libera.chat)
          + Discord
          + LinkedIn

  Hacker News 의견

     * Beeper의 흥미로운 날. 3년 전 HN에서 시작됨.
     * Beeper와 Texts.com을 통합하는 것이 계획일 수 있음
          + Texts.com은 애플 생태계 대상, Beeper는 안드로이드 생태계 대상일 가능성
          + Beeper는 최근 안드로이드용 새 버전 앱을 출시함
     * Beeper를 좋아하고 인수를 축하하지만, 좋아하는 기능들이 사라질까 우려됨
          + 새 안드로이드 앱은 매우 우수하고, 데스크톱 앱은 다른 Element 앱보다 한 단계 위
          + iMessage는 없지만 Matrix, Signal, WhatsApp 등 다양한 앱과 잘 작동함
     * Beeper가 얼마나 투자받았고 이번 거래로 어떤 경제적 결과가 있는지 궁금함
          + 기사에 따르면 Beeper는 현재까지 1,600만 달러를 외부 투자받음
     * 만약 인수되어야 한다면 Automattic이 가장 좋은 선택이 될 것으로 보임
          + 대기업의 지원으로 Beeper가 공식 API를 더 많이 확보하는데 도움될 수 있음
     * Automattic은 메시징 애그리게이터 시장을 1억7,500만 달러에 통합함
          + 두 회사 직원 40명, 매출 1,000만 달러 미만으로 추정됨
          + 이 시장을 소유하려는 비즈니스 근거가 무엇인지 이해하기 어려움
     * Matrix가 이론적으로 모든 채팅을 지원할 수 있다는 것을 알고 있었지만, Beeper가 존재하고 그 아이디어로 회사가 설립되었다는 것을 몰랐음. 흥미로운 일.
     * Verge에 따르면 Beeper는 보안 업그레이드를 진행하여 Signal, WhatsApp 등의 암호화된 메시지를 Beeper 자체에서 볼 수 없게 함
     * 한 사용자의 Beeper 사용 타임라인:
          + 2021년 3월 9일: $120 지불
          + 2021년 6월 2일: Beeper 사용 시작 안내
          + 2021년 6월 10일: 온보딩 초대 코드 발송
          + 2021년 7월 2일: 완전히 잠김
          + 이후 몇 번의 이메일 교환 후 포기함
     * 불가능해 보이는 문제였지만 열심히 노력한 결과 좋은 인수합병을 이뤄냄
     * 축하함! Automattic의 Matt와 팀은 훌륭한 사람들임. 잘 어울리는 조합으로 보이며 앞으로가 기대됨

   Automattic 은 ""채팅계의 워드프레스""(표현이 다소 이상하지만, 그냥 모든 곳에 쓰인다는 관점에서) 같은 꿈을 꾸고 있는 듯 한데.. 과연 가능할지 모르겠네요
"
"https://news.hada.io/topic?id=14231","쓰레기를 수거할 수록 성장하는 스타트업 성장 스토리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      쓰레기를 수거할 수록 성장하는 스타트업 성장 스토리

   ✅ 커버링은?
     * 문 앞에 쓰레기를 내놓으면 수거해가는 서비스. (문 앞에 내놓기만하면 끝)
     * 시작: 코로나19 -' 배달 증가 -' 쓰레기 증가 -' 치우기 번거로움 (불편함) -' '우리가 직접 치워줘볼까?'

   ✅ 초기 성장
     * 카카오톡 채널 열고 직접 주문 받음.
     * 전단지에 QR코드 넣고 광진구 전역에 돌림.
     * 이후 트위터에서 바이럴.
     * 취재요청에 응해 기사 나감

   ✅ 서비스 중단
     * 기사에 실린 후, 지자체에서 제재 들어와 서비스 중단.
     * 1년 간 규제 문제 해결 후 다시 부활.

   ✅ 확장 과정
     * 광진구 -' 강남 -' 마포-용산-영등포 (중간 취소) -' (...) -' 서울 전역
       (1000명은 강남에서 달성)

   ✅ 목표
     * 폐기물 산업에서 주요 플레이어가 되어 판도를 바꾸는 것.
     * 그렇게하여 환경문제에 크게 이바지하는 것.
"
"https://news.hada.io/topic?id=14309","Grok-1.5 Vision Preview: 고급 시각 처리 기능을 갖춘 최초의 멀티모달 모델 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Grok-1.5 Vision Preview: 고급 시각 처리 기능을 갖춘 최초의 멀티모달 모델 소개

   • 1세대 멀티모달 모델인 그록-1.5V는 이제 강력한 텍스트 기능 외에도 문서, 다이어그램, 차트, 스크린샷 및 사진을 포함한 광범위한 시각 정보를 처리할 수 있습니다.

   • Grok-1.5V는 다학제 추론, 이해 문서, 과학 다이어그램, 차트, 스크린샷, 사진 등 다양한 영역에서 기존 멀티모달 모델을 능가하며 물리적 세계를 이해하는 데 탁월한 능력을 보여준다.

   • 질문과 쉽게 검증할 수 있는 답변을 가진 700개 이상의 이미지로 구성된 멀티모달 모델의 기본적인 실제 공간 이해 기능을 평가하기 위해 새로운 벤치마크인 RealWorldQA를 소개한다.

   • Grok-1.5V는 조기 테스터와 기존 Grok 사용자가 곧 사용할 수 있으며 이미지, 오디오 및 비디오와 같은 다양한 양식에 걸쳐 멀티모달 기능을 적극적으로 확장하고 있습니다.
"
"https://news.hada.io/topic?id=14308","XZ 백도어 사건 - 초기 분석 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          XZ 백도어 사건 - 초기 분석 결과

     * Timeline of events:
          + 2024.01.19: XZ website moved to GitHub pages by a new maintainer (jiaT75)
          + 2024.02.15: ""build-to-host.m4"" is added to .gitignore
          + 2024.02.23: Two ""test files"" containing malicious script stages are introduced
          + 2024.02.24: XZ 5.6.0 is released
          + 2024.02.26: Commit in CMakeLists.txt sabotaging the Landlock security feature
          + 2024.03.04: Backdoor causes issues with Valgrind
          + 2024.03.09: Two ""test files"" are updated, CRC functions modified, Valgrind issue ""fixed""
          + 2024.03.09: XZ 5.6.1 is released
          + 2024.03.28: Bug discovered, Debian and RedHat notified, Debian rolls back XZ
          + 2024.03.29: Email published on OSS-security mailing list, RedHat confirms backdoored XZ shipped
          + 2024.03.30: Debian shuts down builds and starts rebuild process
          + 2024.04.02: XZ main developer recognizes the backdoor incident
     * 악성 백도어가 포함된 XZ 배포판의 해시값:
          + xz-5.6.0: MD5, SHA1, SHA256 해시값 제공됨
          + xz-5.6.1: MD5, SHA1, SHA256 해시값 제공됨

초기 감염 분석

     * Stage 1 - 변조된 build-to-host 스크립트:
          + 릴리스 소스 파일은 처음에는 무해했지만, 해커가 제어하는 URL에서 다운로드 받으면 악성 코드를 실행하는 build-to-host.m4 파일이 포함됨
          + 이 .m4 파일은 빌드 중에 실행되어 테스트 폴더에 추가된 첫 번째 파일을 수정하고 압축 해제함
     * Stage 2 - 주입된 쉘 스크립트:
          + .m4 파일로 주입된 악성 스크립트는 리눅스에서 의도된 빌드 프로세스 내에서 실행 중인지 확인함
          + good-large_compressed.lzma 파일을 이용해 다음 단계를 실행하는데, 이는 정상 압축되었지만 압축 해제된 데이터 내부에는 쓰레기 데이터가 포함됨
          + head/tail 명령으로 33,492바이트 추출하고 tr 명령으로 기본 치환 적용해 난독화 해제함
     * Stage 3 - 백도어 추출:
          + 마지막 단계 쉘 스크립트는 예상 환경에서 실행 중인지 여러 검사를 수행함
          + 동일한 good-large_compressed.lzma 파일의 다른 오프셋에 숨겨진 백도어 바이너리 코드 자체를 추출함
          + XZ 도구로 파일 추출하고 일련의 head 호출로 RC4 유사 알고리즘을 사용해 바이너리 데이터 복호화함
          + 압축된 파일을 XZ로 추출하고 predefined 값으로 시작 부분 바이트 제거한 뒤 liblzma_la-crc64-fast.o로 저장
          + crc_x86_clmul.h의 is_arch_extension_supported 함수를 수정해 __get_cpuid 호출을 _get_cpuid로 바꿈

바이너리 백도어 분석

     * 은신 로딩 시나리오:
          + XZ는 CRC 계산에 lzma_crc32, lzma_crc64 함수 사용하는데 ELF 심볼 테이블에 IFUNC 타입으로 저장됨
          + 최적화 버전 사용 여부를 동적으로 결정하기 위해 IFUNC 사용
          + 백도어는 오브젝트 파일로 저장되며 주요 목표는 컴파일시 main 실행 파일에 링크되는 것
          + 오브젝트 파일은 _get_cpuid 심볼을 포함하는데 원본 소스에서 밑줄 하나를 제거해 코드가 _get_cpuid를 호출하면 실제로는 백도어 버전을 호출하게 됨
     * 백도어 코드 분석:
          + 초기 백도어 코드는 2번 호출되며, 실제 악성 활동은 lzma_crc64 IFUNC가 _get_cpuid를 호출할 때 시작됨
          + GOT 주소를 찾아 cpuid 포인터 위치를 찾고 main 악성 함수 포인터로 교체함
          + 감염된 시스템으로의 모든 연결을 모니터링할 수 있도록 특정 함수들을 후킹하는 것이 주요 목표
     * 핵심 동작:
          + RSA_public_decrypt, EVP_PKEY_set1_RSA, RSA_get0_key 등의 libcrypto 함수를 후킹 타겟으로 함
          + 현재 프로세스가 실행 기준에 맞는지 검사하고 kill switch 존재 여부 확인
          + Trie 구조를 사용해 문자열 연산 수행
          + 3개 이상의 symbol resolver 루틴을 사용해 ELF Symbol 구조체 위치 찾음
          + rtdl-audit 기능을 남용해 symbol resolving 루틴을 하이재킹함으로써 함수 후킹 달성

GN⁺의 의견

     * 이 기사는 오픈소스 소프트웨어에 악성코드가 주입된 매우 정교한 공격 사례를 잘 보여주고 있음. 오픈소스의 장점이 역으로 악용될 수 있다는 교훈을 줌.
     * 리눅스 시스템을 노리는 사이버 공격과 백도어가 갈수록 정교해지고 있음. 특히 SSH 서버를 통한 공격이 심각한 보안 위협이 될 수 있음.
     * 한편으론 오픈소스 생태계의 자정 능력도 보여줌. 결국 백도어가 커뮤니티에 의해 발견되어 빠르게 대응되었음. 투명성이 핵심.
     * 고도화된 Trie 자료구조, Symbol Resolver, dl_audit 후킹 등의 기법이 사용된 것은 리눅스 악성코드의 기술적 진화를 보여줌. 리눅스 시스템 보안에도 각별한 주의가 필요함.
     * 기업에서 오픈소스 소프트웨어를 도입할 때는 라이선스뿐 아니라 보안 측면의 검증도 필수. 신뢰할 수 있는 배포처인지, 코드에 대한 지속적 모니터링이 이뤄지고 있는지 꼭 따져봐야 함.

        Hacker News 의견

   요약:
     * 공격자가 감지를 피하기 위해 스크립트와 코드에 많은 노력을 기울였다는 점에서, 이 프로젝트 전체가 전환이나 동시에 진행되는 여러 노력에 대한 대안으로 기능할 수 있음
     * SSHD에 초점을 맞추는 것이 시스템 전체의 다른 부분이나 기술적, 사회적 측면에 영향을 미칠 수 있음을 고려해야 함
     * 각 동적 연결 라이브러리가 자체 GOT를 가지고 동적 연결이 완료되면 테이블을 읽기 전용으로 표시하는 것이 유용한 강화 단계가 될 수 있음
     * 소스 코드는 디스어셈블러를 실행하고 코드가 무엇을 하는지 이해한 다음 설명적인 이름으로 모든 것을 바꾸는 방식으로 생성된 것으로 보임
     * 백도어의 버그로 인해 발생한 SSH의 지연과 느려짐이 결국 노출되었는데, 이에 대한 분석이 이루어졌는지 궁금함
     * xz 저장소가 GitHub에 다시 등장했으며, 유지보수자들이 ifunc 지원을 제거하고 테스트 파일을 생성하는 코드를 커밋하는 등 정리 작업을 하고 있음
     * 사람들이 발견하지 못한 백도어가 많을 것이라는 상상과 이와 같이 눈에 띄지 않은 것이 없기를 바라는 마음
"
"https://news.hada.io/topic?id=14287","소프트웨어 엔지니어링 분야 종사자들의 정신건강 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      소프트웨어 엔지니어링 분야 종사자들의 정신건강 문제

소프트웨어 엔지니어의 정신 건강

   소프트웨어 엔지니어, 특히 리더십에 도전하는 사람들의 정신 건강에 대해서 충분히 논의되지 않고 있음.
     * 기술 공동 설립자로서 불안과 싸워왔음.
     * 영역에 따라오는 것이지만 직무 기술서에는 포함되어 있지 않음.

  2017년 힘든 시기 경험

     * 공황 발작, 이완제 지속 사용, 마감일과 새로운 책임감으로 심한 압박감 속에서 코딩
     * 전임자로부터 IT 책임자 직책 물려받음.
     * 작은 개발팀 담당, 많은 파트너에게 약속한 스타트업
     * 성공시키는 것이 나의 일. 망가지거나 해내거나.
     * 결국 둘 다 겪음.

  정신 건강 문제에 대한 편견

     * 정신 건강 문제로 병가낼 수 없음.
     * 공황 발작이 어떤 느낌인지, 왜 휴식이 필요한지 이해하는 사람 많지 않음.
     * 번아웃(정신적 붕괴) 겪기 전까지 불안 관리를 위해 약을 먹어야 하는 이유 몰랐음.
     * 머릿속에 있는 것이라 생각 제어할 수 있을 거라 생각했으나, 때로는 불가능함.

  컨텐츠 목차

   (주요 컨텐츠 제목들을 그대로 나열)

GN⁺의 의견

     * 정신 건강에 대해 더 많은 논의와 인식 개선이 필요해 보임. 특히 엔지니어링 분야에서는 더욱 그러함.
     * 과도한 업무 스트레스와 책임감은 정신 건강을 해칠 수 있음. 업무량 조절과 스트레스 관리가 중요함.
     * 번아웃을 겪기 전까지 이해하기 어려운 문제임. 겪어보지 않은 사람은 공감하기 어려울 수 있음.
     * 정신 건강 문제로 휴식이 필요할 때 당당히 말하고 쉴 수 있는 조직 문화가 필요함.
     * 많은 사람들이 겪고 있지만 잘 드러내지 않는 문제임. 리더의 경험 공유가 인식 개선에 도움이 될 것 같음.

        Hacker News 의견

   요약하자면 다음과 같음:
     * 30년 경력의 소프트웨어 엔지니어의 경험상, 대부분의 데드라인은 임의적이고, 약간 미뤄도 비즈니스에 큰 영향을 주지 않음.
          + 진정한 하드 데드라인은 사전에 충분히 예측 가능하고, 엔지니어링의 역량에 달려있음.
          + 단기간 내 무리한 개발로 스트레스 받고 장시간 일하는 것은 오히려 저품질의 제품을 만들어 역효과를 초래함.
     * 소프트웨어 엔지니어링이 의사, 변호사, 영업, 선생님 등 다른 전문직보다 정신건강에 더 해롭다고 확신하기 어려움.
          + 모든 직업은 저마다의 스트레스 요인이 있고, 경계를 설정하지 않으면 자유시간을 잠식하게 됨.
          + ""정신적 문제로 휴가가 필요하다""고 말할 수 없다는 글쓴이의 경험은 매우 예외적인 경우임. 대부분의 회사는 정신건강을 중요시함.
     * 20대 초반의 대학중퇴 CEO들이 이끄는 스타트업은 피하는 것이 좋음.
          + 관리와 리더십 역량이 부족하고, 실패에 대한 공포심에 동기부여 받아 직원들을 함부로 대하는 경향이 있음.
     * 최우선 과제와 모순되는 또 다른 최우선 과제를 동시에 해결하라는 CEO의 요구는 불합리함.
          + 우선순위 큐를 만들어 하나씩 처리해 나가는 것이 현명함. 너무 많은 동시 진행은 해로움.
     * 아무리 짧은 시간이라도 하던 일에서 떨어져 휴식을 취하는 것이 중요함.
          + 스트레스는 종종 인위적으로 만들어지고, 성과를 떨어뜨리며 사고 능력을 저하시킴.
     * 긴급하다며 밤샘 개발을 요구하는 크런치 모드의 남용은 직원들의 동기부여를 떨어뜨림.
          + 모든 것이 급하고 당장 해야 한다면, 더 큰 문제가 있다는 신호임.
          + 돈, 시간, 노력의 한계를 남용하면 사람들은 지휘부를 존중하지 않게 되고 업무에 적은 노력을 기울임.
     * 소프트웨어 개발이 정신질환을 유발하거나 유발할 수 있다는 점에서, 우리 업계의 심각한 문제라고 봄.
     * 정신건강을 위해 휴가가 필요하다고 팀에 말하는 것은 가능함.
          + 자신의 필요와 욕구에 대해 투명하게 소통하고, 회사와 팀 내에 신뢰와 안전이 필요함.
          + 성인이라면 정신건강을 위한 휴가의 필요성을 이해할 것임.
"
"https://news.hada.io/topic?id=14271","Mistral AI, 새로운 8x22B MOE 모델 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Mistral AI, 새로운 8x22B MOE 모델 출시

        Hacker News 의견

     * 모델 실행을 위해서는 Ollama, Llama.cpp, 또는 Python 라이브러리 등의 도구를 사용할 수 있음. RAM에 절반 정도의 모델을 로드하는 것도 가능함.
     * 모델 성능 비교를 위한 벤치마킹은 Hugging Face에서 제공하는 비공식 벤치마크를 활용할 수 있음. 단, 이는 base 모델에 대한 것이며, 실제 챗에 활용되는 instruct fine-tuned 모델과는 차이가 있음에 유의해야 함.
     * Mixtral-8x22B-v0.1 모델은 이전의 Mixtral 8x7b 모델만큼 좋은 성능을 보인다면 매우 기대되는 모델임.
     * ChatGPT 4가 초기에 ""마법처럼 작동한다""고 평가받았던 수준의 성능으로 돌아갈 수 있을지에 대한 관심이 있음. 정치적 올바름을 위해 성능을 떨어뜨린 것에 대한 아쉬움이 있음.
     * Llama3 출시 전에 모두가 최고의 작은 모델을 내놓기 위해 경쟁하는 상황으로 보임.
     * 4-bit 양자화를 통해 85GB VRAM이 필요하므로, 4개의 24G 소비자용 GPU로 충분히 구동 가능함. KV 캐시 최적화를 위한 여유 공간도 있음.
     * 모델 가중치가 공개된 지 하루 넘게 지났음에도 Mistral에서 공식 발표나 모델 카드를 제공하지 않고, Mistral 자체 플랫폼에서도 사용할 수 없는 점이 이상함.
"
"https://news.hada.io/topic?id=14295","DNS over Wikipedia - 위키피디아를 활용한 DNS 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                DNS over Wikipedia - 위키피디아를 활용한 DNS 서비스

     * Wikipedia는 유명 웹사이트의 공식 URL을 추적하고 있음
     * DNS over Wikipedia가 설치되면 .idk로 끝나는 도메인은 Wikipedia를 검색하고 인포박스에서 관련 URL을 추출하여 리디렉션됨

사용 예시

     * 브라우저 주소 표시줄에 scihub.idk/를 입력하면 https://sci-hub.tw로 리디렉션됨 (작성 시점 기준)
     * 사이트를 직접 검색하는 대신 사이트의 Wikipedia 문서를 검색함 (""schihub wiki"")
          + 사이드바에는 대개 최신 사이트 링크가 있는 반면, Google은 검색 결과를 검열해야 함
     * Google에서 ""Piratebay""를 검색하면 첫 번째 검색 결과는 가짜 ""thepirate-bay.org""(대시 포함)이지만 Wikipedia 문서에는 올바른 것이 나열되어 있음

설치 옵션

     * Chrome 확장 프로그램
     * Firefox 확장 프로그램
     * (선택 사항) Rust 리디렉션 스크립트

GN⁺의 의견

     * DNS over Wikipedia는 검열을 우회하는 흥미로운 방법임. 하지만 이는 Wikipedia 편집자들에게 지속적인 업데이트 부담을 줄 수 있음
     * 이 확장 프로그램이 악용되어 사용자를 가짜 사이트로 유도할 가능성도 있음. 신뢰할 수 있는 출처에서만 설치해야 함
     * 장기적으로는 웹사이트 운영자들이 공식 도메인을 안정적으로 유지하고, 검열에 대응할 수 있는 분산형 DNS 솔루션이 필요해 보임
     * 유사한 프로젝트로는 Tor 프로젝트의 Onion 서비스나 IPFS의 콘텐츠 주소 지정 방식 등이 있음

   간단하지만 유용한 방법이네요

        Hacker News 의견

   요약해보겠음:
     * Wikipedia 편집자들은 법적/도덕적 문제로 URL을 자주 바꿔야 하는 사이트의 현재 URL을 찾는데 Wikipedia 글이 사용됨을 알고 있음. 따라서 저작권자의 요구에 더 회복력이 있어 보이지만 완전히 검열되지 않은 것은 아님.
     * Chrome 확장 프로그램이 방문한 모든 사이트의 데이터를 읽고 변경할 수 있다는 점과 피싱 위험이 있다는 점이 안타까움. 악의적 행위자의 손에 넘어가는 확장 프로그램의 역사가 있음.
          + Chrome 스토어에서 설치하면 오픈소스 확장 프로그램도 위험해짐. 스토어에서 직접 저장소에서 설치할 수 있게 하고 기본 배포 메커니즘이 되어야 함.
     * Wikipedia는 기술 용어 번역에도 유용할 수 있지만 주의해야 함. 번역 서비스는 기술 용어 번역을 못하는 경우가 많지만, Wikipedia에서 해당 언어 페이지를 찾아 언어를 전환하면 제목이 좋은 힌트가 될 수 있음.
     * Wikipedia에는 외부 링크를 검색하는 ""특수 페이지""가 있음. HN, PG 웹사이트, 트위터 사용자의 트윗 등 모든 외부 링크를 검색할 수 있음. 새로운 gTLD의 채택률을 파악하는 데에도 사용 가능함.
     * 임의의 사람이 선착순으로 도메인 이름을 등록하고 판매하는 대신, 공동/합의 프로세스를 통해 어떤 단어가 어떤 웹사이트를 가리켜야 하는지 결정함. 장기적으로는 검색 엔진이나 도메인 이름보다 <검색어> => <URL>[] 매핑을 설정하는 협업 프로세스가 더 유용할 것임.
     * 실제 ""리졸버"" 의미의 DNS는 아니고 ""이름 검증기"" 또는 ""이름 검색"" 의미의 DNS임.
     * 제목에서는 실제 DNS 리졸버를 Wikipedia나 Talk 네임스페이스 깊숙한 곳에서 실행하는 것으로 예상했음.
"
"https://news.hada.io/topic?id=14296","베트남 부동산 재벌, 270억 달러 규모 사기 사건으로 사형 선고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  베트남 부동산 재벌, 270억 달러 규모 사기 사건으로 사형 선고

베트남 최대 사기 사건에서 270억 달러 횡령 혐의로 부동산 재벌에 사형 선고

     * 베트남 호치민시 법정에서 반틴팟 홀딩스 회장 쯔엉 마이 란이 사이공 상업은행 횡령 사건에 연루되어 유죄 판결을 받음.
     * 이번 사건은 베트남 역사상 최대 규모의 사기 사건으로, 전체 피해 규모가 270억 달러(한화 약 35조원)에 달하는 것으로 추산됨.
     * 란 회장은 횡령, 뇌물수수, 은행 규정 위반 등의 혐의로 사형을 선고받음.
     * 검찰은 란 회장의 행위가 공산당과 국가 지도부에 대한 국민의 신뢰를 훼손했다고 지적함.

10년에 걸쳐 사이공 상업은행에서 거액 횡령

     * 란 회장은 사이공 상업은행(SCB)에서 10년 넘게 거액을 횡령한 혐의로 재판에 넘겨짐.
     * 그녀는 전직 중앙은행 관리, 정부 관리, SCB 전직 임원 등 85명과 함께 재판을 받음.
     * 이번 재판은 베트남 공산당 서기장 응우옌 푸 쫑이 주도하는 전국적인 부패 척결 캠페인의 일환으로 진행됨.

란 회장의 항소 의사와 법정 진술

     * 란 회장은 혐의를 부인하고 있으며, 친척은 란 회장이 판결에 불복해 항소할 것이라고 로이터에 전함.
     * 란 회장은 법정에서 은행 업계에 경험이 부족한 상태로 뛰어들었고, 법률에 대한 이해가 부족했다고 진술함.
     * 그녀는 절망감에 ""죽음을 생각했다""면서 공범으로 기소된 남편과 조카에 대해 법원에 관용을 요청함.

전례 없는 대규모 재판

     * 5주간 진행된 이번 재판은 엄격하게 통제되는 베트남 국영 매체에서 상세히 보도됨.
     * 재판 관련 서류는 105개 상자에 보관되었고 무게만 6톤에 달함. 당국은 심리에 앞서 증거 보호를 위해 보안 카메라와 소방 설비를 설치함.
     * 란 회장 소유의 부동산 1,000개 이상이 압류되었고, 재판에는 2,700명 이상이 소환되고 변호사만 200명이 참여함.

사기 수법과 공무원 뇌물 혐의

     * 란 회장은 제3자와 페이퍼컴퍼니를 통해 SCB 주식의 91.5%를 소유하고 있었음.
     * 2012년부터 2022년까지 11년 동안 가짜 대출 신청서를 작성해 은행에서 돈을 인출한 혐의를 받음. 이 대출금은 은행 전체 대출의 93%에 달함.
     * 사기 행각을 은폐하기 위해 란 회장 등 SCB 은행원들은 국가 공무원들에게 520만 달러의 뇌물을 건넨 혐의도 받음. 이는 베트남에서 기록된 최대 규모의 뇌물임.

역대 최대 규모의 반부패 노력

     * 2021년 이후 베트남에서는 수천 명이 부패 혐의로 기소되었음. 이는 베트남 공산당 역사상 가장 광범위한 반부패 노력으로 평가됨.
     * 지난달 베트남 정부는 부패 스캔들 연루 의혹으로 1년 남짓 재임한 보 반 투옹 대통령의 사임을 발표함. 그의 전임자 응우옌 쑤언 푹 대통령도 부하 공직자들의 부패 스캔들로 물러났었음.

GN⁺의 의견

     * 270억 달러라는 천문학적 규모의 사기 사건이 장기간 묵인되어 온 배경에 대해서는 깊이 있는 분석이 필요해 보임. 시장경제가 고도화되는 가운데 정부의 관리감독 시스템이 제 기능을 하지 못한 것은 아닌지 의문이 듦.
     * 일당 독재 국가에서 부패 사건이 터졌을 때 실제 권력자들의 연루 여부에 대한 의혹이 제기되곤 함. 란 회장에게 내려진 사형 판결이 부패 척결의 상징적 조치에 그치는 것은 아닌지 주목할 필요가 있음.
     * 부패 사건이 잇따라 터지면서 베트남 공산당에 대한 신뢰가 흔들리고 있음. 반부패 드라이브를 지속하는 한편, 투명한 시장경제 시스템을 정착시키기 위한 개혁 노력도 병행되어야 할 것으로 보임.
     * 글로벌 투자자들의 시선이 베트남으로 쏠리고 있는 상황에서 부패 척결과 함께 법치주의 확립이 시급해 보임. 장기적으로는 정경유착 구조 개선을 위한 정치개혁도 필요할 것으로 보임.

        Hacker News 의견

   이 사건의 요약은 다음과 같음:
     * 검찰에 따르면, 2019년 2월부터 3년간 108조 베트남 동(40억 달러, 23억 파운드)의 현금을 은행에서 인출해 지하실에 보관하도록 운전기사에게 지시함. 이는 베트남의 최대 액면가 지폐로도 2톤이 넘는 양임.
     * 원칙적으로 사형에 반대하진 않지만, 사형을 적용하는 것은 도덕적, 사법적 정당성에 위험을 초래함. 사형을 고려하고 적용하려면 도덕적 배려와 건전한 사법적 논리가 매우 중요함. 도난 금액에 상관없이, 통화 절도 자체만으로는 사형을 적용할 객관적 도덕적, 논리적 근거 수준에 도달할 수 없음.
     * 개발도상국 정부가 혼란스러운 것 이상으로 보이길 원한다면, 이보다 더 현명해야 함.
     * 비슷한 제목의 모든 사이트가 서로 다른 금액의 수십억 달러를 보도하고 있음. 모두 다르게 환산하고 잘못된 국가 단위를 사용하는 것 같음.
     * 해당 인물은 매우 유죄이지만 21세기에 사형이라니? 어떤 원시적인 제도가 그것을 허용하는가?
     * 해커 뉴스의 이 댓글들은 매우 흥미로움. 베트남에 대해 몰랐던 것들을 배우고 있음. Alephnerd 등 흥미로운 해설을 해준 사람들에게 감사함.
     * 이 사건에 대해 정보를 제공하는 동영상 3개를 시청함. (동영상 링크)
     * FLC 그룹 등 다른 사례들도 있음.
     * 최근 몇 년간 일 때문에 베트남을 많이 여행했고, 베트남 경제에는 부패가 만연해 있음.
     * 대부분의 성장은 중국, 한국, 일본 기업들이 2014-22년 사이 중국에서 베트남으로 공장을 대거 이전한 것에 기인함.
     * 이는 대규모 자본 지출로 이어졌지만, 투자가 하노이(중국)나 호치민(한국+일본)에 집중되어 자본 소유 계층에게만 혜택이 돌아갔기 때문에 일반 베트남 사람들의 삶은 크게 바뀌지 않음.
     * 또한 부패한 당 간부들은 중국과 인도의 유령 도시와 유사한 실패가 예견된 호텔과 아파트 프로젝트에 투자해 뇌물을 극대화하기로 결정함.
     * 코로나19 사태로 부패의 내막이 드러남. 북부 VCP, 남부 VCP, 군부, 공안부 간 내부 갈등이 시작됨. 공안부가 북부 파벌을 지지하고 이겼고, 군부는 금전을 버는데 집중해 싸움에 개입하지 않음.
     * 상위층 내분은 투자자 신뢰를 떨어뜨렸고, 정전과 인터넷 장애 같은 인프라 붕괴도 일어남.
     * 베트남 화폐 제도의 결함으로 인해 소수에게 막대한 부가 집중되는 현상이 벌어짐. 정치적 연줄이 있는 사람에게만 돈이 몰리는 상황임.
     * 부패에 대해 사형을 내리는 것은 야만적으로 보임. 중국, 인도네시아, 모로코, 태국, 베트남 등 일부 국가에서만 비폭력 범죄에 대해 사형을 내림.
     * 베트남의 GDP는 4088억 달러이므로, 이 정도 규모의 사기는 반역죄에 준하는 것으로 보임.
"
"https://news.hada.io/topic?id=14269","Aider - 터미널에서 AI와 페어 프로그래밍 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Aider - 터미널에서 AI와 페어 프로그래밍 하기

     * GPT-3.5/GPT-4와 페어 프로그래밍 하며 로컬 git 저장소에 저장된 코드를 편집할 수 있게 해주는 커맨드라인 도구
     * aider는 로컬 소스 파일의 코드를 직접 편집하고 적절한 커밋 메시지와 함께 변경 사항을 git 커밋함
     * 새 프로젝트를 시작하거나 기존 git 저장소에서 작업할 수 있음
     * aider의 독특한 점은 기존에 존재하는 큰 코드 베이스에 대한 변경 사항을 요청할 수 있다는 것

주요 기능

     * 편집할 소스 파일 집합과 함께 명령줄에서 aider를 시작하여 코드에 대해 GPT와 채팅할 수 있음. aider를 통해 GPT는 해당 파일의 내용을 보고 편집
     * GPT는 python, javascript, typescript, php, html, css 등 대부분의 인기 있는 언어로 코드를 작성하고 편집할 수 있음
     * 코드에 대한 새로운 기능, 변경, 개선 또는 버그 수정을 요청할 수 있음. 새로운 테스트 케이스, 업데이트된 문서 또는 코드 리팩터링을 요청할 수 있음
     * aider는 GPT가 제안한 수정 사항을 소스 파일에 직접 적용함
     * aider는 설명이 포함된 커밋 메시지와 함께 각 변경 세트를 로컬 git 저장소에 자동으로 커밋함. 이러한 빈번한 자동 커밋은 안전망을 제공함. 변경 사항을 쉽게 실행 취소하거나 표준 git 워크플로우를 사용하여 더 긴 변경 시퀀스를 관리할 수 있음
     * 여러 소스 파일을 동시에 aider와 함께 사용할 수 있으므로 GPT는 단일 변경 세트/커밋에서 모든 파일에 걸쳐 코드 변경을 조정할 수 있음
     * aider는 GPT-4에게 전체 git 저장소의 맵을 제공할 수 있어 대규모 코드베이스를 이해하고 수정하는 데 도움이 됨
     * aider와 채팅하는 동안 편집기를 사용하여 파일을 수동으로 편집할 수도 있음. aider는 이러한 대역 외 편집을 감지하고 GPT를 파일의 최신 버전으로 최신 상태로 유지함. 이를 통해 aider 채팅과 편집기 사이를 왔다 갔다 하면서 GPT와 협업하여 코딩할 수 있음
     * openai를 통해 gpt-4를 직접 사용하는 경우 이미지 파일을 컨텍스트에 추가할 수 있으며, 이렇게 하면 자동으로 gpt-4-vision-preview 모델로 전환됨

  채팅 내 명령어

     * aider는 채팅 내에서 /로 시작하는 명령을 지원함. 가장 유용한 채팅 내 명령 중 일부:
          + /add : 일치하는 파일을 채팅 세션에 추가
          + /drop : 일치하는 파일을 채팅 세션에서 제거
          + /undo: aider에서 수행한 경우 마지막 git 커밋을 실행 취소
          + /diff: 마지막 aider 커밋의 diff 표시
          + /run : 셸 명령을 실행하고 선택적으로 출력을 채팅에 추가
          + /voice: 음성으로 코드 변경 사항을 요청하려면 aider에게 말하기
          + /help: 모든 명령에 대한 도움말 표시

  팁

     * 변경하려면 어떤 파일을 편집해야 하는지 생각해 보고 채팅에 추가할 것. aider는 GPT가 편집할 파일을 스스로 파악할 수 있는 능력이 어느 정도 있지만, 가장 효과적인 방법은 필요한 파일을 명시적으로 직접 채팅에 추가하는 것
     * 대규모 변경은 접근 방식과 전체 설계를 계획하는 사려 깊은 단계의 시퀀스로 수행하는 것이 가장 좋음. GPT를 주니어 개발자와 함께 하는 것처럼 변경 사항을 안내할 것. 준비를 위한 리팩터링을 요청한 다음 실제 변경을 요청. 코드 품질/구조 개선을 요청하는 데 시간을 할애해야 함
     * GPT가 유용한 응답을 제공하지 않는 경우 Control-C를 사용하여 안전하게 중단 가능. 부분 응답은 대화에 남아 있으므로 더 많은 정보나 방향으로 GPT에 답장할 때 참조할 수 있음
     * /run 명령을 사용하여 테스트, 린터 등을 실행하고 출력을 GPT에 표시하여 문제를 해결할 수 있음
     * Meta-ENTER(일부 환경에서는 Esc+ENTER)를 사용하여 여러 줄 채팅 메시지를 입력 가능. 또는 첫 번째 줄에 {만 입력하여 여러 줄 메시지를 시작하고 마지막 줄에 }만 입력하여 메시지를 끝냄
     * 코드에서 오류가 발생하면 /run을 사용하거나 채팅에 붙여넣어 오류 출력을 GPT와 공유할 것. GPT가 버그를 찾아 수정하도록 하기
     * GPT는 많은 표준 도구와 라이브러리에 대해 알고 있지만 API 및 함수 인수에 대한 세부 정보를 일부 잘못 이해할 수 있음. 문서 스니펫을 채팅에 붙여넣어 이러한 문제를 해결 가능
     * GPT는 특별히 ""채팅에 추가""한 파일의 내용만 볼 수 있음. aider는 또한 전체 git 저장소의 맵을 GPT-4에 보냄. 따라서 GPT는 요청에 필요하다고 판단되면 추가 파일을 볼 것을 요청할 수 있음.

GN⁺의 의견

     * 대규모 프로젝트에서 aider를 활용하면 코드 베이스 전반에 걸쳐 일관된 변경 사항을 쉽게 적용할 수 있을 것 같음. 특히 GPT-4의 능력과 결합하면 더욱 강력할 것으로 보임
     * 다만 GPT가 제안한 변경 사항을 무조건 수용하기 보다는 개발자가 직접 리뷰하고 테스트 해보는 과정이 필요할 듯함. 아직은 GPT 모델이 완벽하지는 않기에 버그가 발생할 가능성도 있음
     * 코드뿐만 아니라 문서화나 테스트 케이스 작성에도 aider를 활용하면 좋을 것 같음. GPT의 자연어 이해 능력을 활용하면 보다 높은 품질의 문서와 테스트 코드를 빠르게 생성할 수 있을 것으로 기대됨
     * CLI 기반이라 접근성이 좋지만, 편집기 플러그인 등으로 개발 환경과 더 밀접하게 통합된다면 개발자 생산성 향상에 크게 도움이 될 것 같음
     * GitHub Copilot 등 유사한 AI 페어 프로그래밍 도구들과의 차별화된 장점은 GPT-4 활용과 git 기반의 워크플로우라고 봄. 기존 도구들과의 장단점 비교가 흥미로울 것 같음

        Hacker News 의견

   다음은 해커뉴스 댓글들을 요약한 내용입니다:
     * AI 도구 사용 시 프롬프트 작성과 결과 검토에 시간이 많이 들어 직접 작업하는 것보다 비효율적일 수 있음. 새로운 솔루션 탐색 시에는 정확도 면에서도 한계가 있어 보임.
     * Aider와 유사한 기능을 가진 Plandex라는 터미널 기반 프로젝트가 있음. Git 스타일 CLI를 사용하며, 여러 파일에 걸친 복잡한 작업에 중점을 둠.
     * Claude를 사용해 반응형 웹사이트 디자인 작업을 수행한 경험 공유. 긴 문맥 유지가 잘 되고, 혼합된 HTML/CSS/JS 코드베이스를 잘 다룰 수 있었음.
     * Go 애플리케이션에서 AI 도구 사용 시 변수 범위 규칙 등을 제대로 이해하지 못해 오류가 발생한 사례 공유. 신뢰성에 대한 의문 제기.
     * JetBrains 등 기존 IDE와의 통합이 부족한 점을 아쉬워함. GitHub Copilot 등 기존 도구와의 연계 사용 경험 공유.
     * Aider의 LLM 성능 벤치마킹 결과에 대한 관심. GPT-4 Turbo with Vision 모델의 성능이 이전 모델보다 떨어지는 것으로 나타남.
     * AI 도구의 결과물 품질이 아직 완벽하지 않아 실제 활용에는 한계가 있음. 미묘한 오류들이 여전히 존재.
"
"https://news.hada.io/topic?id=14347","테슬라 사이버트럭 납품, 7일간 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          테슬라 사이버트럭 납품, 7일간 중단
"
"https://news.hada.io/topic?id=14282","코드 검색의 어려움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               코드 검색의 어려움

코드 검색의 어려움

     * Val Town의 현재 검색 기능은 Postgres ILIKE 기능을 기반으로 하고 있어서 검색어가 코드에 있으면 검색 결과에 포함되는 단순한 부분 문자열 검색만 지원함
          + 검색 결과 랭킹이 거의 없고, 여러 단어를 포함한 검색은 잘 지원되지 않음
          + 더 나은 검색 기능은 가장 많이 요청되는 기능 중 하나임

    자연어 검색과 코드 검색의 차이

     * 일반적인 검색 솔루션들은 영어 등 자연어를 대상으로 하기 때문에 코드 검색에는 적합하지 않음
          + Stop words 제거, Stemming, Lemmatization 등의 알고리즘은 코드에는 오히려 문제를 일으킴
          + 예를 들어 the는 TypeScript에서는 stop-word가 아니라 검색하고 싶은 유효한 변수명일 수 있음
          + 단어 경계도 다르고, 함수명을 stemming하는 것도 큰 의미가 없음

    Postgres의 Full Text Search

     * Postgres의 Full Text Search 확장은 일정 규모까지는 잘 동작하지만 대규모로 가면 성능 문제에 부딪힘
          + 작은 팀에서는 인프라를 가능한 단순하게 유지하는 게 중요해서 Postgres로 모든 것을 해결하려 하지만, 현재는 싱글 노드 Postgres 클러스터의 한계에 도전하는 중
          + FTS를 이용한 코드 검색 사례를 찾기 어려움

    pg_trgrm을 이용한 Trigram 검색

     * Trigram 검색은 코드 검색에서 성공한 사례들이 있음
          + Google Code Search, GitHub 새 검색 시스템, Sourcegraph 등
     * Postgres의 pg_trgrm 확장을 이용해서 검색 텍스트 컬럼에 GIN 인덱스를 만들어 Trigram 검색 지원
          + 정규식 검색에는 좋은 해법이지만, 자유로운 검색어에 대해서는 적절한 랭킹을 만들기 어려움

    코드 검색을 위한 다양한 옵션들

     * Meilisearch, Typesense, Zoekt, ParadeDB, Sonic 등 다양한 검색 엔진이 있지만 대부분 코드 검색에 특화되지는 않음
     * GitHub, Sourcegraph 등의 코드 검색은 우수하지만 전담 팀과 많은 시간 투자의 결과물
     * Elasticsearch는 많이 커스터마이징할 수 있지만 작은 팀에서 관리 부담이 큼
     * Meilisearch는 Rust로 만들어진 ES 대안이지만 지연시간에 더 초점을 맞추고 있어 보임
     * ParadeDB는 ""그냥 Postgres""라며 ES와 유사한 기능을 약속하지만 아직 사용할 수 없음

GN⁺의 의견

     * 현재 Val Town에서 사용하는 것처럼 초기에는 Postgres의 기본 기능만으로 코드 검색을 구현하는 것이 인프라 관리 부담을 줄일 수 있는 현명한 선택으로 보임. 하지만 서비스 규모가 커지면 전문 검색 엔진의 도입이 불가피해 보임
     * 규모가 커지면 Elasticsearch 정도는 도입이 필요할 것 같지만, 이 경우에도 클라우드 관리형 서비스를 사용하는 것이 인프라 관리 부담을 덜 수 있는 방법이 될 것임
     * 코드 검색에 특화된 오픈소스가 많지 않다는 점이 아쉬움. 코드 검색의 중요성이 점점 커지고 있는 만큼 앞으로는 Sourcegraph 같은 코드 검색에 특화된 오픈소스 프로젝트들이 더 활발해지면 좋겠음
     * 단순 문자열 검색을 넘어, 코드의 구조적 특성을 반영한 검색 랭킹 알고리즘에 대한 연구가 필요해 보임. 예를 들어 변수명, 함수명, 주석 등을 구분해서 가중치를 다르게 주는 방식 등
     * 장기적으로는 Large Language Model을 활용한 Semantic Code Search 방향으로 발전해 나갈 것으로 예상됨. 동일한 로직이라도 네이밍이나 포맷이 다른 코드를 찾아주는 시맨틱 검색이 가능해진다면 개발 생산성에 큰 도움이 될 것임

        Hacker News 의견

     * Sourcegraph은 대규모 코드 검색을 다루지만, 처음 시작할 때는 인덱스 없이 실시간 검색만으로도 생각보다 오래 잘 작동함. 첫 N개 일치만 찾으면 되기 때문. 이런 것을 만드는 사람들과 대화하는 것을 환영함.
     * 좋은 코드 검색 플랫폼은 삶을 훨씬 쉽게 만들어줌. Google을 떠나면 내부 코드 검색 기능이 가장 그리울 것. 다른 모든 것과 잘 통합되어 있어서 상상할 수 없음. Github 검색을 사용할 때마다 더욱 감사하게 됨. 나쁘진 않지만 일반화된 코드 검색 플랫폼을 구축하는 것은 본질적으로 훨씬 어려움.
     * 새로운 개발자들에게 명시적으로 가르치지는 않지만 초기에 구축해야 할 절대적으로 중요한 기술인 기본 코드 검색 기술에 대한 지식 진행 과정:
          + Ctrl+F 사용법 배우기
          + ripgrep으로 전환
          + 선택사항이지만 강력한 명령줄 편집기 중 하나를 배우는 것이 좋음
          + ripgrep에서 grep으로 이동하고 몇 가지 플래그 배우기
          + ripgrep으로 할 수 있는 것에 한계가 있다는 것을 깨닫고 실제 인덱싱된 전용 코드 검색 도구로 전환
     * IDE와 개발 도구 제작자들은 오래전부터 코드 검색을 제대로 하려면 컴파일러 플랫폼을 개방해야 한다는 통찰력을 가지고 있었음. 좋은 코드 검색은 리팩터링 지원, 자동 완성 및 기타 일반적인 IDE 기능의 기반이 됨.
     * IBM은 Eclipse로 이것을 해냈지만 그 이후로는 그에 필적할 만한 것이 없었음. Eclipse는 구문 오류가 있는 경우에도 Java용 빠른 증분 컴파일러를 가지고 있었고, IDE의 코드 표현은 해당 컴파일러와 연결되어 있었음.
     * 최근에 본 가장 흥미로운 코드 검색 접근 방식 중 하나는 septum인데, 주변 컨텍스트의 적절한 양을 파일 단위로 가져오는 것을 목표로 함. 또 다른 것은 stack-graphs로, 전체 코드베이스에서 상징적 관계를 증분적으로 해결하려고 함.
     * 오픈소스 솔루션의 리더라고 생각했던 hound가 언급되지 않아 놀람.
     * Github가 이상한 토큰화 동작을 ""고쳐서"" 성가신 적이 있음. IDE 스타일의 find-usages 기능을 개선하고 있지만 여전히 완벽하지 않아서 ""foo.bar()""에 대한 텍스트 검색을 원할 때가 있는데 이 스테밍 동작이 foo와 bar가 언급된 모든 곳을 찾아 결과를 부풀림.
     * Zoekt에 대한 그들의 손짓이 이해가 안 됨. 다른 옵션보다 ""새로운 인프라 약속""이 아님. 서버와 인덱서는 단일 바이너리여서 이보다 더 간단할 수 없음. Elasticsearch보다 더 무서워할 이유가 없어 보임.
     * Oracle은 로드된 모든 PL/SQL 코드가 제시되는 USER/ALL/DBA_SOURCE 뷰를 가지고 있음. EnterpriseDB가 이를 Postgres 내부에 구현하는지, 확장으로 사용할 수 있는지 궁금함.
     * Github 검색이 훌륭하다고? 대부분의 경우 거의 쓸모없는 것 같고, 복제 + ripgrep이 훨씬 더 효율적이라고 생각함. 실제 검색보다는 UX가 끔찍한 게 문제인 것 같음.
"
"https://news.hada.io/topic?id=14262","Open-Parse - LLM을 위한 PDF 레이아웃 분할(Chunking)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Open-Parse - LLM을 위한 PDF 레이아웃 분할(Chunking)

     * 복잡한 문서를 사람처럼 쉽게 분할하는 라이브러리
     * 문서 청킹은 모든 RAG의 기반이지만, 대부분의 오픈소스는 복잡한 문서 처리에 한계가 있음
     * Open Parse는 문서 레이아웃을 시각적으로 식별하고 효과적으로 분할할 수 있는 유연하고 사용하기 쉬운 라이브러리를 제공하여 이 격차를 메우도록 설계됨

Open Parse의 주요 기능

     * 시각 기반(Visually-Driven) : 단순한 텍스트 분할을 넘어 문서를 시각적으로 분석하여 우수한 LLM 입력을 제공
     * 마크다운 지원 : 제목, 굵게, 기울임꼴 파싱을 위한 기본 마크다운 지원
     * 고정밀 테이블 지원 : 기존 도구를 능가하는 정확도로 테이블을 깨끗한 마크다운 형식으로 추출
     * 확장성 : 사용자 정의 후처리 단계를 쉽게 구현 가능
     * 직관적 : 훌륭한 에디터 지원과 어디에서나 자동 완성 기능으로 디버깅 시간 단축
     * 용이성 : 사용과 학습이 쉽도록 설계되어 문서 읽는 시간 단축
"
"https://news.hada.io/topic?id=14268","Show HN: Sonauto - 제어 가능한 AI 음악 제작 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show HN: Sonauto - 제어 가능한 AI 음악 제작 도구

   아래와 같은 내용의 웹페이지는 노래 생성 서비스인 것 같습니다. 중요한 내용을 요약해 보면:

인기 노래 목록

     * Blue Scooby Doo ft. AI Beatles
          + Joe Terry가 4일 전 생성
          + 49명이 공유, 7명이 리믹스
     * Thanks Hacker News
          + zaptrem이 6시간 전 생성
          + 17명이 공유, 1명이 리믹스
     * Let Me Out
          + zaptrem이 3일 전 생성
          + 16명이 공유, 3명이 리믹스
     * Lost Love EDM
          + farler가 4일 전 생성
          + 11명이 공유, 0명이 리믹스
     * Great Day (Drop)
          + HHousen이 3일 전 생성
          + 9명이 공유, 0명이 리믹스

GN⁺의 의견

     * 노래 생성 AI 서비스로 보이며, 사용자들이 직접 노래를 만들고 공유하는 플랫폼인 듯함
     * 최근 AI 음악 생성에 대한 관심이 높아지고 있어 이런 서비스가 인기를 끌 것으로 예상됨
     * 다만 저작권 문제나 AI가 만든 음악의 질적 완성도 등은 아직 논란의 여지가 있음
     * 비슷한 서비스로는 Jukebox, AIVA, Amper Music 등이 있음
     * AI 음악을 활용하려면 기존 음악 산업과의 조화, 수익 모델, 기술적 한계 극복 등이 선결 과제일 것임

        Hacker News 의견

     * 음악 생성 서비스의 주요 문제는 반복(iteration)이 창의성에 매우 중요하지만 현재는 제대로 반복할 수 없다는 점임. 원하는 곡을 얻기 위해선 계속 생성하면서 적절한 것이 나오길 기다리거나 포기할 수밖에 없는 상황임. 이는 장난감 수준을 넘어서기 위해 개선이 필요한 핵심 기능임.
     * 작곡가로서 코드 진행과 스타일 지시를 받아 보컬을 위한 좋은 반주를 만들어주는 도구를 찾고 있었음. ""Very soon you'll also be able to generate proper variations of an uploaded or previously generated song""이라는 말이 흥미로움. 직접 노래하고 연주한 것을 AI가 개선해준다면 멋질 것 같음. 이런 도구는 작곡가들에게 큰 시장이 될 수 있음.
     * ""Our goal is to enable more of you, not replace you.""라는 말의 의미에 대해 더 듣고 싶음. 실제 악기를 연주하는 음악가 입장에서 이것이 어떻게 도움이 되고 나를 더 가능하게 하는지 궁금함. 냉소적인 것이 아니라 열린 마음으로 묻는 것임.
     * Diffusion의 인기로 인해 너무 얕아졌다고 생각함. 사람이 음악을 만드는 방식대로 샘플을 diffuse하고, 모델이 시퀀서에서 샘플을 사용하여 곡을 만들고, 보컬을 diffuse하는 식으로 모델을 구축해야 함. 전체 트랙을 diffuse하면 반복하거나 조정할 수 없음.
     * 초기 단계이고 전체 곡 생성은 일종의 Hello World임. 고수준 도구와 세밀한 제어가 가능한 저수준 도구 사이에는 항상 균형이 필요함. 이 기술은 Ableton이나 VST에 내장되어 크리에이터가 몇 마디를 강조하고 AI에게 더 공상적으로 만들거나, 후렴과 색소폰 솔로 사이의 브리지를 만들거나, 아웃트로를 도와달라고 요청할 수 있게 될 것임.
     * AI 음악이 음악 세계에 스며드는 것에 대해 전혀 열광하지 않음. 모두 손톱으로 칠판을 긁는 것 같은 주류 과잉 생산된 저품질 라디오 음악처럼 들림. 디딤돌이라는 걸 알지만 지금 당장은 듣기 힘듦.
     * 피아노 롤 같은 음악 편집 도구가 이미 있고, AI는 그것을 사용할 수 있음. 아마추어 음악가로서 MIDI 트랙을 입력으로 받아 오디오를 출력하는 AI MIDI 악기 같은 걸 보고 싶음. 또는 일부 트랙을 입력으로 받아 MIDI와 오디오 모두에서 다른 트랙을 생성하는 것도 좋겠음.
     * 저작권 걱정은 없는지 궁금함. 훈련 데이터에 상당한 저작권 보호 자료가 포함되어 있을 것 같음. ""blue scoobie doo"" 예제를 들었을 때 영향이 꽤 명백함. 레코드 회사들이 이에 대해 매우 소송을 제기하고 있는데, 그게 문제 되지 않나? 아니면 훈련 데이터의 라이선스를 받았나?
"
"https://news.hada.io/topic?id=14334","국내 월 1,000 만들기 프로젝트 창업 일지 1~4화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     국내 월 1,000 만들기 프로젝트 창업 일지 1~4화

   Re : 제로부터 시작하는… 월순익 1,000만원 만드는 슬로우 라이프 하기로 했습니다. (Ep. 1~4)

   이커머스, 유통, 창업의 시작, 동료와 만남, 온라인 커머스 양도양수, 마이크로 PE, 볼트온, 등.
   땀내나는 청년들의 창업일지!

   재미있게 읽어주세요~

   Show GN에 맞지 않아 이동하였습니다.
   Show 사용방법 을 참고해서 올려주세요.

   아네 감사합니디!!
"
"https://news.hada.io/topic?id=14257","Anthropic, Claude에 함수 호출(Tool Use) 기능 베타 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Anthropic, Claude에 함수 호출(Tool Use) 기능 베타 공개

     * 이제 Claude LLM이 외부 클라이언트 및 기능과 상호 작용가능하게 되어 커스텀 도구를 장착 가능
          + 사용자 프롬프트와 Tool 정보를 보내면, Claude가 프롬프트를 평가하고 필요한 해당 도구를 결정하여 호출
          + 결과를 받아서 사용자 프롬프트에 대한 답변을 구성
     * 현재 공개 베타로 API 요청 헤더에 ""anthropic-beta: tools-2024-04-04""를 넣어야 됨
     * 호출시에 ""tools"" 항목에 접근 정보를 담아서 호출 : 도구의 이름과 설명, 입력 스키마(JSON Schema 객체를 이용)
     * 베타 기간중에는 스트리밍 미지원 및 Vertex AI / AWS Bedrock 에서는 사용 불가
"
"https://news.hada.io/topic?id=14350","Show GN: Genport AI - 투자 전략 생성 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: Genport AI - 투자 전략 생성 기능

   젠포트라는 로보어드바이저 서비스(투자 전략 생성, 백테스트, 실전매매 연동이 가능합니다)의 베타 사이트에 AI로 전략을 생성하는 기능을 추가했습니다.

   모두 무료지만 기능 남용을 막기 위해 로그인이 필요하도록 만들었습니다. 현재는 월간 매매 전략에서만 사용 가능하고요. 일간 거래 전략에도 단계적으로 적용할 예정입니다.

   감사합니다.
"
"https://news.hada.io/topic?id=14340","스탠포드의 2024년 AI 현황을 설명하는 15가지 그래프","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    스탠포드의 2024년 AI 현황을 설명하는 15가지 그래프

     * 스탠포드 인간 중심 인공 지능 연구소(HAI) 가 발표한 올해 보고서 요약
     * 책임 있는 AI에 대한 확장된 장과 과학 및 의학 분야의 AI에 대한 새로운 장뿐만 아니라 R&D, 기술 성과, 경제에 대한 일반적인 내용이 포함됨

    1. 생성형 AI 투자 급증
    2. 구글이 기초 모델 경쟁을 장악하고 있음
    3. 폐쇄형 모델이 개방형 모델보다 성능이 뛰어남
    4. 파운데이션 모델이 엄청나게 비싸짐
    5. 그리고 그들은 막대한 탄소 발자국을 가지고 있음
    6. 미국은 기초 모델에서 선두를 달리고 있음
    7. 업계에서는 새로운 박사 학위를 요구
    8. 다양성에 대한 진전
    9. 실적 발표 중 잡담
   10. 비용은 감소하고 수익은 증가함
   11. 기업은 위험을 인지함
   12. AI는 모든 면에서 인간을 이길 수는 없음
   13. AI 책임 규범 개발
   14. AI를 강화하고 제한하는 법
   15. AI는 사람들을 불안하게 만듦

   미국은 AI로 인한 인원 감축이 점점 심해지는 것 같기도 합니다. 투자는 해야겠고, 당장 AI 전문가는 부족하니 연봉은 부르는 게 값이고... AI로 기존 업무를 조금이라도 대체할 수 있다면 과감히 정리하는 모습을 보면 불안하지 않을 수가 없네요.

   9: 어닝콜중 AI언급
"
"https://news.hada.io/topic?id=14221","로어 하프 맥거번, 그녀의 교외 주택에서 '마이크로컴퓨터 제국'을 건설하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               로어 하프 맥거번, 그녀의 교외 주택에서 '마이크로컴퓨터 제국'을 건설하다

   로어 하프 맥거번의 선구적인 반도체 기업 설립 스토리

실리콘밸리 최초의 여성 창업가 중 한 명

     * 로어 하프 맥거번은 1970년대 중반 캘리포니아 교외 지역에서 친구 캐롤 엘리와 함께 반도체 메모리 보드와 컴퓨터 확장 부품을 제조/판매하는 기업 Vector Graphic을 설립함
     * 이들은 당시 급성장하던 컴퓨터 애호가 시장과 기업용 컴퓨터 시장을 타깃으로 성공적으로 사업을 키워나감
     * 결국 상장에 성공하며 실리콘밸리 최초의 여성 창업가 중 한 명이 됨. 이후 IBM의 PC 시장 진출로 어려움을 겪기도 함

가정주부에서 반도체 기업 CEO로

     * 독일계 이민자 출신으로 어려서부터 할아버지의 교육 철학 영향을 받아 자란 하프는 열린 사고방식을 지녔음
     * 대학 교환학생으로 미국에 왔다가 정착, 결혼 후 전업주부로 지내던 중 지루함을 느끼고 창업을 결심
     * 남편 밥 하프가 설계한 메모리 보드를 제조/판매하는 사업을 시작해 애호가 시장에서 인기를 끔
     * 이후 기업용 컴퓨터 Vector 1을 출시하며 중견기업 시장에서 선두주자로 성장

직원 복지와 혜택을 중시한 경영

     * 로어 하프는 생산라인 직원들도 회사의 핵심 구성원으로 여기고 파격적인 복지 혜택을 제공함
     * 직원 전원에게 스톡옵션을 부여하고, 탁아소 운영, 가사 도우미 서비스 등 파격적인 복지로 주목받음
     * 그 결과 높은 직원 만족도와 생산성, 품질을 유지할 수 있었음

남성 중심 IT 업계에서의 차별과 편견

     * 당시 실리콘밸리에서 여성 창업가는 매우 드문 존재였음. 처음에는 호기심의 대상이었지만 점차 위협으로 인식됨
     * 하프를 '얼음 여왕', '심술궂은 여자'라고 부르는 등 편견 어린 시선이 많았음
     * 하지만 강인한 리더십으로 회사를 이끌며 많은 이들의 고정관념을 깨부숴 나감

Vector Graphic의 몰락과 은퇴 후 활동

     * 1981년 IBM PC 등장 이후 사업 환경이 나빠지며 하프는 CEO 자리에서 물러남
     * 이후에도 회사를 구하기 위해 노력했지만 결국 1984년 퇴사, 1987년 Vector는 파산
     * 이후 여성용 위생용품 회사 창업, 엔젤투자 등 여러 사업에 도전했으나 큰 성공을 거두진 못함
     * 남편과 함께 MIT에 거액을 기부하며 뇌 연구 센터 설립에 기여

GN⁺의 의견

     * 로어 하프는 열악한 여건 속에서도 뛰어난 사업 능력과 리더십으로 큰 성공을 거둔 인물임. 특히 직원 복지를 중시하고 파격적인 경영을 펼친 점이 돋보임
     * 당시 실리콘밸리의 남성 중심 문화 속에서 여성으로서 사업하기가 얼마나 힘들었을지 짐작이 됨. 편견과 차별에 굴하지 않고 당당히 맞선 것이 인상적임
     * 하지만 IBM 등장 이후 급변하는 시장에 적절히 대응하지 못하고 결국 회사가 몰락한 것은 아쉬운 점. MS-DOS 채택을 주저한 것이 치명적이었음
     * 실패를 겪었음에도 끝까지 도전하는 자세를 보여준 점, 그리고 은퇴 후에도 여성 기업가 정신을 보여준 점 등 여러모로 존경할 만한 인물임
     * 최근 IT 업계에서 여성 리더들이 많이 나오고 있지만, 여전히 남성 중심 문화가 강한 것이 사실임. 하프의 사례는 업계의 다양성과 포용성 제고에 시사하는 바가 큼

  Hacker News 의견

     * 로어 하프 맥거번은 기술 업계에서 여성으로서 역경을 극복한 것뿐만 아니라, 사람을 배려하고 자신의 가치관을 지키기 위해 사업과 명성을 기꺼이 걸었던 인물로 평가됨. 이는 성공한 여성 CEO보다 더 드문 일일 수 있음.
     * 1978년경 컴퓨터 가게에서 본 Vector Graphics 컴퓨터는 이름과 달리 벡터나 그래픽과 관련이 없는 평범한 비즈니스용 머신이었음. 당시 Apple이 그래픽, 소프트웨어, 주변기기 등에서 크게 앞서 있었음.
     * Vector 4의 사양이 유출되면서 Commodore와 비슷한 운명을 겪었는데, 이는 IBM PC/DOS가 지배하던 시대상을 보여줌. 위키피디아 페이지에는 약간의 실수가 있었음.
     * 2015년 Fast Company에 로어 하프 맥거번과 그녀의 사업 파트너들에 대한 기사를 썼는데, Vector Graphic의 설립 과정을 자세히 다루고 있음.
     * 캐롤 일라이와 로어 하프의 이야기는 드라마 의 여성 캐릭터들을 연상시킴. Vector Graphic이 작가들에게 영감을 줬을 수도 있음.
     * ""스티브"" 셜리도 주목할 만한데, 그녀는 1960년대부터 여성만으로 구성된 원격 코더 회사를 만들었음. IBM에서 커리어를 쌓지 못한 여성 코더들을 모두 고용했음.
     * 남편은 자신보다 뛰어난 아내를 받아들이지 못해 어려움을 겪었음. 아내가 ""그의 리그""를 벗어났을 수도 있음.
     * (2023)와 같은 영화가 나오기를 기대함.
     * 이 글에서 처음 들어본 ""제국""이었지만, 같은 시대의 다른 컴퓨터 회사들은 잘 알고 있었음.
"
"https://news.hada.io/topic?id=14230","Hello World 인사말","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Hello World 인사말

     * 현대의 Hello World 프로그램 뒤에 숨겨진 추상화의 세계 탐험
          + 이 글은 C로 작성된 Hello World 프로그램에 대한 내용임. C는 인터프리터/컴파일러/JIT에서 프로그램이 실제 동작하기 전에 언어가 무엇을 하는지 고민할 필요 없는 고급 언어 중에서는 가장 높은 수준임.
          + 원래는 코딩 배경이 있는 사람이라면 누구나 이해할 수 있도록 쓰려고 했으나, 적어도 C나 어셈블리에 대한 지식이 있으면 도움이 될 것 같음.
     * Hello World 프로그램 시작
          + 모든 사람들이 Hello World 프로그램에 익숙할 것임. 파이썬에서는 아마도 처음 작성한 프로그램이 print('Hello World!')와 같은 것이었을 것임.
          + 이 글에서는 C 프로그래밍 언어로 작성된 Hello World를 살펴볼 것임. C에서는 인터프리터를 호출해서 프로그램을 실행할 수 없음. 컴파일러를 먼저 실행해서 컴퓨터 프로세서가 직접 실행할 수 있는 기계어 코드로 변환해야 함.
     * 우리의 프로그램 분석
          + 컴파일된 프로그램 파일을 분석해보면 ELF 실행 파일이고 x86-64 명령어 셋 아키텍처용임을 알 수 있음.
          + ELF 실행 파일은 리눅스에서 윈도우의 .exe 파일과 동등한 것임.
          + x86-64는 1981년 IBM PC가 도입된 이래로 PC에서 사용되어 온 CPU 아키텍처임.
          + 이 파일은 CPU만이 이해할 수 있는 유일한 언어인 기계어 코드를 포함하고 있음.
     * 어셈블리 코드 분석
          + 프로그램의 시작 주소인 엔트리 포인트를 찾아 어셈블리 코드를 분석해봄.
          + 어셈블리어는 기계어 코드를 사람이 읽을 수 있는 형태로 표현한 것임.
          + 컴파일러(정확히는 링커)에 의해 자동으로 추가된 초기화 코드가 보이고, __libc_start_main 함수를 호출하는 것을 볼 수 있음.
          + 하지만 이 코드는 우리 프로그램에 정의되어 있지 않고 다른 어딘가에 있음.
     * C 표준 라이브러리
          + __libc_start_main 함수는 우리 시스템의 표준 C 라이브러리인 libc.so.6에 정의되어 있음.
          + C 표준 라이브러리는 우리 컴퓨터의 거의 모든 프로그램들이 사용하는 루틴과 함수들의 모음임.
          + C 라이브러리에서 초기화 작업을 수행하고 우리가 작성한 main() 함수를 호출함. main()에서 리턴하면 우리가 제공한 종료 코드로 프로그램을 종료시킴.
     * main() 함수 분석
          + main() 함수에서는 스택 프레임을 설정하고, Hello World 문자열의 주소를 함수 호출의 인자로 설정한 후, puts() 함수를 호출함.
          + puts()는 printf()를 호출했는데 컴파일러가 최적화를 수행해서 바꾼 것임. printf()는 복잡하지만 puts()는 단순히 서식 없는 문자열을 출력하기 때문임.
     * Hello World 문자열
          + 문자열은 ""Hello World!"" 다음에 NULL 종료자가 오는 형태로 되어있음.
          + C에서는 문자열과 관련된 길이 정보가 없기 때문에 NULL 종료자로 문자열의 끝을 표시함. NULL 종료자가 없으면 허용되지 않은 메모리를 읽다가 프로그램이 Segmentation Fault로 죽게 됨.
          + 컴파일러 최적화로 인해 printf()에서 사용한 개행(\n)은 제거되었음. puts()는 문자열 출력 후 개행을 해주기 때문임.
     * puts() 함수
          + puts() 함수는 다시 표준 라이브러리 내의 코드를 호출하게 됨.
          + glibc의 코드를 살펴보면 _IO_puts -> _IO_new_file_xsputn 순으로 호출되는 것을 볼 수 있지만 코드가 복잡해서 설명하기 어려움.
          + musl libc의 경우 좀 더 간단함. puts -> fputs -> fwrite -> __fwritex -> __stdio_write -> syscall 순으로 호출됨.
     * 시스템 호출
          + 아무리 C 라이브러리가 크더라도 하드웨어와 직접 통신하는 것은 불가능함. 그것은 커널만이 할 수 있음.
          + 따라서 puts() 호출은 결국 OS에게 뭔가 해달라고 요청하는 것으로 끝나게 됨. 여기서는 출력 스트림에 문자열을 쓰는 것임.
          + musl libc는 writev라는 시스템 호출을 사용하는데, 이는 여러 개의 버퍼를 한 번에 쓸 수 있게 해줌.
          + 시스템 호출은 레지스터에 파라미터를 설정하고 syscall 명령을 실행함으로써 이뤄짐. 그러면 제어가 커널로 넘어가고 커널이 파라미터를 읽어서 시스템 호출을 수행하게 됨.
     * 커널
          + 리눅스 커널은 시스템 호출에 의해 요청된 동작을 수행해야 함. write 시스템 호출은 파일 시스템의 열린 파일이나 스트림에 쓰라고 커널에게 지시함.
          + write는 쓸 파일 디스크립터, 쓸 버퍼, 쓸 바이트 수 등 3개의 파라미터를 받음.
          + 실제로 어디에 쓰는지는 상황에 따라 다름. 터미널 에뮬레이터인 경우 가상 터미널(pty)로 보이고, 원격 로그인인 경우 sshd로 전달되고, 물리 터미널인 경우 시리얼-USB 어댑터로 감. 프레임 버퍼 콘솔인 경우 커널이 텍스트를 렌더링해서 디스플레이로 출력함.
     * 결론
          + 현대의 소프트웨어 시스템은 하드웨어 위에서 매우 복잡하고 정교하게 동작하기 때문에 컴퓨터가 한 작은 일을 완전히 이해하려고 하는 것은 무의미함.
          + 모든 것을 다 설명하기 위해서는 많은 부분을 생략해야만 했음.
          + Hello World 메시지를 보내는 것은 지금 컴퓨터에서 실행 중인 수많은 시스템 콜과 프로그램들 중 하나에 불과함.

GN⁺의 의견

     * 컴퓨팅 시스템의 각 계층이 추상화를 통해 아래 계층의 복잡성을 감추고 있어 개발자가 편리하게 애플리케이션을 개발할 수 있게 해준다는 점을 보여주는 글이네요.
     * 한편으로는 애플리케이션의 한 줄이 실행되기 위해 그 아래에서 얼마나 많은 일이 일어나는지를 깨닫게 해주고, 디버깅이 왜 어려운지도 알게 해줍니다.
     * 모든 프로그래머는 자신이 주로 사용하는 언어 아래의 시스템까지는 잘 알고 있어야 한다고 봅니다. 전체를 다 알 필요는 없지만, 추상화된 부분이 실제로는 어떻게 동작하는지를 아는 것은 중요해요.
     * 고급 언어를 쓰더라도 메모리 구조, 스택과 힙, 시스템 호출 등의 시스템 프로그래밍 개념을 공부해두면 디버깅이나 성능 최적화에 큰 도움이 될 거예요.
     * 애플리케이션 개발자는 컴파일러나 C 라이브러리를 직접 건드릴 일은 거의 없겠지만, 내가 짠 프로그램이 결국 어떤 식으로 시스템을 사용하는지를 이해하는 것은 좋은 프로그래머가 되는 데 필수적이라고 봅니다.
"
"https://news.hada.io/topic?id=14343","Neon Serverless Postgres 정식 출시(GA)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Neon Serverless Postgres 정식 출시(GA)

     * Neon은 Postgres 데이터베이스 개발을 위한 새로운 접근 방식을 제시하는 서비스로 최근 정식 출시됨
     * Postgres는 가장 인기 있는 개발자 데이터베이스 중 하나이지만, 확장성과 장애 복구에 어려움이 있음
     * 개발자들은 Postgres 클러스터 생성이 빠르고, 자동으로 확장/축소되며, 독립적인 작업이 가능한 브랜치를 즉시 생성할 수 있고, 빠른 시점 복원을 원함

Neon의 아키텍처 및 특징

     * Amazon Aurora의 아이디어를 빌려 스토리지와 컴퓨팅을 분리하는 아키텍처를 채택함
     * 모든 변경 사항을 오픈소스로 제공하고 업스트림으로 전송함
     * 사용자는 완전한 Postgres 경험을 할 수 있음
     * 브랜치 기능을 통해 개발자들은 충돌 없이 독립적으로 작업할 수 있음
     * 컴퓨팅은 부하에 맞게 독립적으로 확장 가능함
     * 브랜치는 초 단위로 생성되고 COW 방식으로 공간 오버헤드가 적음
     * 데이터베이스나 서버의 생성 및 복제에 많은 시간이 소요되지 않음

Neon의 발전 과정

     * 2022년 12월 초대장 없이 사용 가능해짐
     * 브랜치 기능을 모든 사용자에게 제공함
     * API 지원으로 Postgres 관리를 자동화할 수 있게 됨
     * 서버리스 드라이버 출시로 JS/TS 배포 속도 향상
     * Vercel 통합으로 프리뷰마다 DB 브랜치 생성 가능해짐
     * 자동 크기 조정 기능 출시로 수동 작업 불필요해짐
     * CLI로 터미널에서 직접 관리할 수 있게 됨
     * 0으로 스케일링 및 콜드 스타트 동작 개선에 집중함

GN⁺의 의견

     * Neon은 개발자 경험 개선에 중점을 둔 흥미로운 서비스임. 특히 데이터베이스 브랜치 기능은 개발 속도 향상에 큰 도움이 될 것으로 보임
     * 다만 Postgres의 모든 기능을 완벽히 지원하는지, 마이그레이션은 어떻게 해야 하는지 등 실제 도입 시 고려 사항이 있을 것임
     * 기존 Postgres와의 호환성, 안정성, 성능 등에 대한 검증이 필요해 보임. 아직은 출시 초기라 신중한 접근이 필요할 듯함
     * 유사 서비스로는 Amazon Aurora, Google Cloud Spanner, Citus 등이 있음. 각 서비스의 장단점을 비교해볼 필요가 있음
     * Postgres 기반인 만큼 Postgres의 장점은 그대로 가져갈 수 있다는 것이 큰 매력임. 개발자들에게 친숙한 도구를 사용하면서도 개발 생산성을 높일 수 있다는 점이 Neon만의 강점이 될 것으로 보임

   Neon - 서버리스 Postgres 오픈소스

   여긴 2년만에 GA가 되었네요. Supabase랑 경쟁하는 듯한 느낌이라 흥미롭군요.

        Hacker News 의견

     * 한 사용자는 Neon을 사용했을 때 고객 지원이 도움이 되지 않았고, 버그가 많고 느렸으며, 가격이 너무 비쌌다고 부정적인 경험을 이야기함
     * 반면 다른 사용자는 내부 Kubernetes 운영자로 Neon을 자체 호스팅하고 있으며, Neon의 기술 솔루션에 매우 만족하고 있음. Neon 없이는 회사를 운영하기 어려울 것이라고 말함
     * 전체 데이터베이스를 브랜치하는 기능이 훌륭해 보이지만, 가격이 조금 비싼 편임. $69/월 요금제의 경우 전용 서버를 임대하는 것이 더 저렴할 수 있음
     * 한 사용자는 PlanetScale에서 Neon으로 전환했는데, 쉽게 확장/축소할 수 있고 동일한 클러스터에서 여러 데이터베이스를 실행할 수 있기 때문임. Neon은 RDS보다 사용하기 쉽고 빠르게 시작됨 (수백 밀리초)
     * 1년 이상 Neon을 사용하고 있는 고객은 최근 가격 변경을 제외하고는 어떤 문제도 겪지 않았다고 말함
     * ""브랜치"" 기능은 ""스냅샷"" 또는 ""체크포인트""라고 부르는 것이 더 정확함. CoW 쓰기 가능 버전을 생성하고 이전 버전으로 롤백하는 것은 스냅샷임. 브랜치는 병합을 의미하는데, 이는 매우 복잡한 문제임
     * Supabase GA 발표 후 하루 만에 나온 시장 타이밍이 인상적임. 두 플랫폼 모두 훌륭함
     * 스토리지 가격이 GB당 $1.50 ~ $1.75로 매우 높음. 취미 프로젝트에 사용하기에는 부담스러울 수 있음
     * AWS Aurora와 어떻게 다른지, 가격이나 확장성 면에서 Neon을 사용해야 하는 이유가 명확하지 않음
     * Neon 드라이버가 localhost 연결을 쉽게 전달할 수 있도록 하면 개발 및 테스트 경험이 향상될 것임. 개발자들은 로컬 Postgres DB에 연결해 개발/테스트하는 것을 선호함
     * Neon PM은 새로운 개발자의 입장에서 Neon을 사용해 보려 할 때 어떤 코드와 개발 워크플로 변경이 필요한지 고려해야 함
"
"https://news.hada.io/topic?id=14344","Show HN: GPS 수신기 제작 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show HN: GPS 수신기 제작 프로젝트

GPS 신호 탐지하기

     * GPS 위성은 지구 전체를 서비스하기 위해 약 30개 정도만 존재함. 마치 전세계 DNS 서버가 13개의 루트 서버에서 시작되는 것과 유사한 설계임.
     * GPS 신호는 고도나 날씨에 상관없이 항상 우리 주변에 존재함. 우리 몸을 스치는 전자기파의 언어를 이해하면 언제 어디서든 정확한 위치를 알아낼 수 있음.
     * GPS는 지금까지 인류가 시도한 가장 대담한 지구공학 프로젝트 중 하나임. 안테나와 의지만 있다면 그 흔적을 느낄 수 있음.

미약한 GPS 신호

     * GPS 위성에서 송출하는 신호의 세기는 가정용 전구 수준이지만, 지상에 도달할 때는 엄청나게 약해짐.
     * 2만 km 떨어진 곳에서 초당 100만번 깜빡이는 전구의 빛을 보는 것과 같음. 하지만 그 미약한 깜빡임도 탐지, 해독, 이해하여 유용하게 쓸 수 있음.
     * GPS 신호가 매우 약해서 GPS 서비스에 요금을 부과하기 어려움. 위성 입장에서는 그냥 신호를 보내기만 함.

GPS 신호 듣기

     * GPS는 전자기파로 전송되는데, 이는 라디오와 같은 것임. 주파수가 중요한 요소임.
     * GPS 신호를 수신하려면 GPS 주파수에 맞춰진 소프트웨어 정의 라디오(SDR)가 필요함.
     * SDR을 설정하고 bias tee, AGC, IQ 보정 등을 조정하면 스펙트럼을 탐색할 수 있음.

미약한 신호 잡아내기

     * 지상에 도달한 GPS 신호는 주변 잡음보다 10만배나 약함. 즉 열 잡음보다 50db 이상 낮은 수준임.
     * 하지만 GPS는 신호처리 기법을 통해 잡음 속에서도 신호를 식별하고 해독할 수 있음.
     * GPS는 위성과 수신기 모두 아는 C/A 코드를 사용함. 위성은 이를 초당 1000번 반복 송출함.
     * 수신기는 수신 신호를 계속 누적해서 기대하는 C/A 신호와 비교함. 잡음은 평균이 0에 수렴하고 C/A 신호는 점점 커짐.
     * 이를 역확산 스펙트럼이라 부르고, 다중 위성에 적용하기 위해 코드분할다중접속 기법을 사용함.
     * C/A 코드에 실제 데이터를 실어 보냄. C/A는 초당 100만 비트, 데이터는 초당 50비트로 전송됨.

C/A 코드 생성

     * GPS 위성마다 고유한 C/A 코드를 가짐. 민간 GPS 규격서에 정의되어 있음.
     * 온라인에 C/A 코드 생성법은 많지만 실제 코드는 잘 없어서, 직접 생성한 코드를 공유함.

GPS 위성 신호 탐지

     * 수신기는 32개 위성의 C/A 코드 사본을 만들어 안테나로 수신한 데이터와 상호 연관시킴.
     * 수신 신호는 도플러 편이, 위상 차이 등 왜곡이 발생함.
     * 수신기는 각 위성별 C/A 코드, 예상 도플러 편이 범위, 위상 차이 등을 모두 고려해야 함.
     * 탐지 단계의 계산 부하가 큼. 최적화 연구가 많이 진행되고 있음.
     * 주파수 영역에서 상호 연관을 취해 위상차와 도플러 편이를 한번에 다룸.
     * 이진 탐색으로 가장 강한 연관성을 보이는 도플러 편이를 찾음.

GN⁺의 의견

     * GPS는 인상적인 기술이지만, 기존 기술을 정교하게 조합한 것임. 획기적인 새 기술은 아님.
     * 전용 하드웨어로도 GPS 수신이 가능한데, 소프트웨어로도 할 수 있게 된 건 큰 진전임. 앞으로도 하드웨어 기능이 소프트웨어로 대체되는 추세가 가속화될 듯함.
     * GPS 신호가 약한 건 보안에 도움이 될 수 있음. 의도적 방해나 스푸핑이 어려워짐.
     * GPS는 군사 기술에서 출발했지만, 민간에 개방되면서 폭발적으로 응용 분야가 늘었음. 기술을 공개하고 공유하는 게 혁신을 가속화함.
     * 초기 GPS 수신기는 크고 비쌌는데, 지금은 스마트폰에 다 들어있음. 기술이 발전하고 저변이 확대되며 가격이 낮아지고 소형화되는 과정을 보여줌.

        Hacker News 의견

     * 최신 직접 RF 샘플링 수신기들은 GPS 신호를 처리하기에 충분한 속도로 동작하며, Xilinx RFSoC나 NI의 FlexRIO와 같은 제품이 출시되고 있음. 다만 아직 가격이 높은 편임.
     * GPS는 1978년 출시되어 현재 인구의 절반 이상이 GPS가 없던 시대를 모르고 살고 있음. 2000년까지는 정확도를 의도적으로 낮춘 Selective Availability 기능이 작동해서 실생활에서 큰 도움이 되진 않았음.
     * gypsum이 1분 내에 cold start에서 위치를 파악하는 속도는 오늘날의 상용 수신기보다 우수한 편임. 과거 초기 상용 수신기는 위치를 잡는데 15-20분이 걸렸음.
     * 예전에는 시속 600m 이상으로 이동 중 내비게이션이 가능한 GPS 수신기는 ITAR에서 군수품으로 분류되었음. 현재는 규정이 복잡해져서 적용 여부가 불분명함.
     * iPhone으로 비행 중 사진을 찍으면 착륙 후 사진에 위치 정보가 기록되어 호기심 가는 지형을 나중에 찾아볼 수 있음.
     * GPS는 비행기 모드에서도 작동하고, 이동통신이나 와이파이 없이도 작동함. 미국이 운영하며 필요시 특정 지역의 서비스를 차단할 수 있어서 여러 국가들이 자체 위성항법시스템을 개발하고 있음.
     * GPS 위성은 위치가 아니라 시각 정보만 송신함. 항성 항법도 정확한 시각에 의존한다는 점이 흥미로움.
     * GPS 개발 과정이 흥미롭게 서술된 ""GPS Declassified""라는 책과 개발자들을 인터뷰한 ""The Lonely Halls Meeting"" 다큐멘터리를 YouTube에서 볼 수 있음.
"
"https://news.hada.io/topic?id=14303","HN에 알림: Bypass Paywalls 저장소 사라짐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN에 알림: Bypass Paywalls 저장소 사라짐

페이월 우회 크롬 확장 프로그램 Gitlab 저장소 삭제됨

     * 원본 Gitlab 저장소 주소인 https://gitlab.com/magnolia1234/bypass-paywalls-chrome-clean 에 접속해보면 해당 페이지를 찾을 수 없음
     * 저장소 소유자인 magnolia1234 사용자의 Gitlab 프로필 페이지(https://gitlab.com/magnolia1234)에 접속해보면 ""이 사용자는 Gitlab에 의해 차단되었습니다(This user has been blocked by GitLab)""라는 메시지가 표시됨
     * 따라서 이 크롬 확장 프로그램의 소스코드는 더 이상 원본 Gitlab 저장소에서는 찾아볼 수 없게 된 것으로 보임

GN⁺의 의견

     * 불법적인 저작권 우회 프로그램이라 Gitlab에서 차단한 것으로 보임. 오픈소스라도 불법 프로그램은 호스팅 업체에서 차단할 수 있음
     * 이 프로그램이 유명해지면서 관련 언론사나 Gitlab에 신고가 들어갔을 가능성이 있음. 오픈소스 프로젝트라도 불법 소지가 있으면 개발자가 법적 책임을 질 수 있음에 유의해야 함
     * 오픈소스라도 지속성을 보장하기 어려움. 개발자 개인 사정으로 언제든 프로젝트가 중단될 수 있음. 대안을 마련해두는 것이 좋음
     * 유사한 기능을 가진 합법적인 오픈소스 프로젝트로는 uBlock Origin, AdBlock Plus 등 광고차단 플러그인이 있음. 언론사 페이월을 피하는 건 아니지만 불필요한 광고를 제거해 웹서핑 경험을 개선시켜줌

        Hacker News 의견

     * GitLab이 GitHub보다 대기업의 잠재적으로 의심스러운 저작권 주장에 더 터무니없이 대응하는 것으로 보임. 이번 달에만 해도 대기업이 제거를 원하는 프로젝트 관련 저장소를 불법이 아님에도 GitLab이 여러 차례 삭제한 사례가 관측됨.
     * Streisand 효과 덕분에 해당 확장 프로그램을 설치해 봤는데, 시도해 본 몇몇 사이트에서 꽤 잘 작동하는 것으로 보임. 개발자가 새로운 저장소를 찾고 트위터를 통해 알릴 수 있기를 바람.
     * 이 확장 프로그램은 매우 잘 작동하지만, 사이트 변경에 따라 지속적으로 업데이트가 필요함. 조만간 상황 설명이 있기를 바람.
     * GitHub을 사용하지 않을 경우 발견 가능성이 매우 낮은데, 왜 GitLab에 호스팅했는지 의문. 자체 호스팅도 하지 않고 있음. 이런 프로젝트를 GitLab에 올릴 장점이 없어 보임. 주류에서 벗어나는 타격을 감수할 바에는 합리적인 국가에서 자체 호스팅하는 게 나을 듯.
     * 이런 우회 방식이 DMCA에 따른 복사 보호 우회 기술에 해당하는지 궁금함. 아마도 ""닫을 수 없는"" 클라이언트 측 모달을 삭제하고 UA/리퍼러 헤더를 스푸핑하는 등의 작업을 수행할 것으로 추정됨.
     * 다른 곳에서 언급된 것보다 최신 아카이브 사본의 링크와 Firefox 전용 저장소, bpc-uploads(XPI, CRX) 링크가 공유됨.
     * 이 확장 프로그램에 감사하며, 꾸준한 업데이트가 이뤄지길 바람. 개발자가 새로운 호스팅 장소를 찾기를 희망함.
     * Substack 페이월 우회가 가능한지, RealDebrid/SciHub 같은 솔루션이 Substack에 존재할 수 있을지 궁금증이 제기됨.
     * 최신 버전을 다운로드할 수 있는 GitLab 페이지 링크와 모든 btc-uploads 콘텐츠를 포함한 마그넷 링크가 공유됨.
"
"https://news.hada.io/topic?id=14240","인텔 Gaudi 3 AI 가속기 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          인텔 Gaudi 3 AI 가속기 출시

     * Intel Gaudi 3 AI 가속기 소개
          + 2024년 4월 9일 애리조나 주 피닉스에서 열린 Intel Vision 행사에서 Intel Gaudi 3 AI 가속기가 발표됨
          + BF16에 대해 4배의 AI 연산 성능과 이전 세대 대비 메모리 대역폭 1.5배 증가를 제공함
          + 범용 커뮤니티 기반 소프트웨어와 업계 표준 이더넷을 통해 고객에게 선택권을 제공하고 시스템을 보다 유연하게 확장할 수 있도록 지원함
     * Gaudi 3가 중요한 이유
          + 금융, 제조, 의료 등 주요 분야의 기업들이 AI 접근성을 확대하고 생성형 AI(GenAI) 프로젝트를 실험 단계에서 대규모 구현 단계로 빠르게 전환하고 있음
          + 이러한 전환을 관리하고 혁신을 촉진하며 수익 증대 목표를 실현하기 위해서는 개방적이고 비용 효율적이며 에너지 효율성이 높은 솔루션과 제품이 필요함
          + Intel Gaudi 3 가속기는 이러한 요구 사항을 충족하고 개방형 커뮤니티 기반 소프트웨어와 개방형 업계 표준 이더넷을 통해 다양성을 제공하여 기업이 AI 시스템과 애플리케이션을 유연하게 확장할 수 있도록 지원할 것임
     * 맞춤형 아키텍처가 GenAI 성능과 효율성을 제공하는 방법
          + Intel Gaudi 3 가속기는 효율적인 대규모 AI 연산을 위해 설계되었으며, 5nm 공정으로 제조되어 이전 세대 대비 큰 발전을 이루었음
          + 모든 엔진을 병렬로 활성화할 수 있도록 설계되어 빠르고 효율적인 딥 러닝 연산과 확장에 필요한 가속을 가능하게 함
          + 주요 기능:
               o AI 전용 연산 엔진: 64개의 AI 맞춤형 프로그래밍 가능한 TPC와 8개의 MME로 구성된 이기종 연산 엔진 탑재
               o LLM 용량 요구 사항을 위한 메모리 부스트: 128GB HBMe2 메모리, 3.7TB 메모리 대역폭, 96MB 온보드 SRAM 제공
               o 엔터프라이즈 GenAI를 위한 효율적인 시스템 확장: 유연하고 개방형 표준 네트워킹을 제공하는 24개의 200Gb 이더넷 포트 통합
               o 개발자 생산성을 위한 개방형 업계 소프트웨어: PyTorch 프레임워크 통합 및 최적화된 Hugging Face 커뮤니티 기반 모델 제공
          + Gaudi 3 PCIe 추가 기능: 미세 조정, 추론 및 검색 증강 생성(RAG)에 이상적인 새로운 폼 팩터
     * 시장 채택 및 가용성
          + Intel Gaudi 3 가속기는 2024년 2분기에 OEM에 Universal Baseboard 및 개방형 가속기 모듈(OAM)의 업계 표준 구성으로 제공될 예정임
          + Dell Technologies, Hewlett Packard Enterprise, Lenovo, Supermicro 등 주요 OEM 채택 예정
          + Intel Gaudi 3 가속기의 일반 가용성은 2024년 3분기로 예상되며, Intel Gaudi 3 PCIe 애드인 카드는 2024년 4분기에 제공될 것으로 예상됨
          + NAVER를 포함한 여러 비용 효율적인 클라우드 LLM 인프라에서 Intel Gaudi 3 가속기 사용 예정
     * 향후 계획
          + Intel Gaudi 3 가속기의 모멘텀은 Intel의 차세대 AI 및 HPC용 GPU인 Falcon Shores의 기반이 될 것임
          + Falcon Shores는 Intel Gaudi 및 Intel Xe IP를 통합하고 Intel oneAPI 사양을 기반으로 하는 단일 GPU 프로그래밍 인터페이스를 제공할 예정

GN⁺의 의견

     * Intel Gaudi 3는 Nvidia H100, H200과 같은 주요 경쟁 제품 대비 GenAI 모델 학습 및 추론 성능에서 상당한 개선을 보여줌. 이는 AI 시장에서 Nvidia의 독점적 지위에 도전할 만한 대안으로 자리매김할 수 있을 것으로 보임
     * 개방형 소프트웨어 및 표준 기반 확장성 지원은 기업의 비용 효율성과 vendor lock-in 방지에 기여할 수 있음. 특히 AI 시스템을 대규모로 구축하려는 기업에게 매력적인 선택지가 될 수 있음
     * 다만 Intel은 최근 몇 년간 CPU 시장에서의 경쟁력 약화, 제품 출시 지연 등의 어려움을 겪어 왔음. Gaudi 3가 예정대로 출시되고 고객사의 폭넓은 도입이 이뤄질 수 있을지 주목해 볼 필요가 있음
     * AI 반도체 시장에서 AMD의 Instinct MI300과 같은 경쟁 제품들도 출시를 앞두고 있어 경쟁이 심화될 것으로 예상됨. 기술적 우위뿐 아니라 소프트웨어 생태계 구축, 고객사 확보 등이 주요 승부처가 될 전망

        Hacker News 의견

     * OAM 인터페이스 사용으로 인해 8~10년 후에도 애호가들이 이 디바이스를 활용할 수 있게 될 것임
     * 인텔이 이 제품군을 꾸준히 오래 지원할지에 대해서는 회의적임
     * HBM2e 메모리를 사용하고 있는데, 이는 2020년에 출시된 Nvidia A100에서 사용된 것으로 최신은 아니지만 8개의 스택을 사용해 H100의 대역폭에 필적함
     * 'Gaudi 3 PCIe'의 가격이 워크스테이션에 탑재할 만큼 합리적일지 관심이 있음
     * 이 발표에서 5Ws와 H 기법을 사용한 것에 감사함
     * Gaudi 3는 TSMC나 삼성에서 5nm 공정으로 제조되는 것으로 보임
     * MoE 등의 희소 아키텍처 대두로 128GB 용량이 중요해 보이며, Nvidia와 경쟁하게 될 것으로 보임
     * AMD MI300x에 대해서도 MLPerf 벤치마크 작업을 기대함
     * 200Gb 이더넷 포트 24개 통합은 인상적이면서도 케이블 비용 등을 고려하면 실망스러움
     * ""terabytes (TB)""가 메모리 대역폭 단위로 사용된 것이 특이함
"
"https://news.hada.io/topic?id=14227","AI에 패한 후 프로 바둑 기사들, 더 뛰어나고 창의적으로 변화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AI에 패한 후 프로 바둑 기사들, 더 뛰어나고 창의적으로 변화

인간 바둑 기사들의 AI 등장 후 실력 향상

     * 1950년대부터 2010년대 중반까지 프로 바둑 기사들의 실력은 거의 정체되어 있었음
     * 2016년 5월, 딥마인드의 알파고가 인간 최고 수준의 바둑 기사를 이길 수 있음을 보여줌
     * 몇 년 후, 가장 약한 프로 기사들도 AI 등장 이전의 최고 기사들보다 더 뛰어난 실력을 보여줌
     * 최고 기사들은 이전에는 불가능하다고 여겨졌던 경지에 도달함

인간 바둑 기사들의 창의성 향상

     * 인간 바둑 기사들은 단순히 AI를 모방하는 것이 아니라 더욱 창의적으로 변화함
     * 역사적으로 새로운 수와 시퀀스가 증가함
     * Shin et al의 계산에 따르면, 약 40%의 향상은 AI를 연구하여 암기할 수 있는 수에서 비롯되었음
     * 그러나 AI와 다른 수를 두는 것도 향상되었으며, 이러한 ""인간적인 수""가 전체 향상의 60%를 차지함
     * 알파고의 성공으로 인해 인간 기사들이 특정 수를 재평가하고 약한 휴리스틱을 포기하게 되었음
     * 이는 이전에는 간과되었던 가능성을 보게 해줌

불가능한 것을 가능하게 만드는 패턴

     * 어떤 것이 불가능하다고 여겨지다가 누군가가 해내면, 곧 그것이 표준이 되는 일반적인 패턴임
     * 로저 배니스터가 4분 마일을 달성하기 전까지는 최고의 주자들이 수십 년 동안 4분 바로 위에 머물러 있었음
     * 몇 달 후, 배니스터는 더 이상 4분 마일을 달성한 유일한 주자가 아니었음
     * 요즘에는 고등학생들도 4분 마일을 달성함
     * 프랑스 작곡가 피에르 불레즈의 음악은 연주 불가능한 것으로 여겨졌으나, 유튜브 등에서 녹음이 유통되기 시작한 후 이제는 콘서트 홀의 표준 레퍼토리가 되었음

초인적 AI 시스템의 영향

     * 최근 바둑의 발전은 초인적 AI 시스템이 이러한 효과를 가질 수 있음을 시사함
     * AI 시스템이 무언가가 가능하다는 것을 증명하고 사람들을 끌어올릴 수 있음
     * 이는 AI 시스템이 많은 작업에서 인간을 대체하지 않을 것이라는 의미는 아님
     * 또한 인간이 항상 시스템을 따라잡기 위해 적응할 수 있다는 의미도 아님 (실제로 인간 바둑 기사들은 따라잡지 못하고 있음)
     * 그러나 창의성과 기술의 번영은 더 많은 AI 시스템이 온라인으로 제공될 때 인간 기술 분포의 꼬리 부분에서 무슨 일이 일어날 수 있는지에 대해 알려줌
     * 인간이 AI에서 배우면서, 정체되어 있던 장애물을 뚫고 더 높은 경지에 도달할 수 있음

바둑에서의 번영의 흥미로운 세부 사항

     * Shin, Kim, Kim의 논문에 따르면, 실제 추세 변화는 알파고 등장 18개월 후에 일어났음
     * 이는 오픈 소스 바둑 엔진인 Leela Zero의 출시와 일치함
     * 오픈 소스인 Leela Zero는 바둑 기사들이 AI의 수 선택 시 추론 과정을 보여주는 Lizzie와 같은 도구를 만들 수 있게 해줌
     * 또한 직접 접근할 수 있게 함으로써 대규모 입력 학습을 가능하게 만들었음
     * 이것이 기계 매개 인간 창의성의 폭발을 일으킨 것으로 보임

체스에서의 유사한 사례

     * 1997년 딥블루가 체스 세계 챔피언 카스파로프를 이겼을 때, 이것이 인간 체스 기사들에게 타격을 줄 것이라고 생각했음
     * 그러나 그렇지 않았음. 체스는 그 어느 때보다 인기가 높아졌음
     * 게임은 기계적이고 예측 가능해지지 않았음. 대신 매그너스 칼슨과 같은 최고 기사들은 그 어느 때보다 창의적이 되었음

우리의 잠재력은 우리가 깨닫는 것보다 크다

     * 체스와 바둑과 같은 매우 경쟁적인 영역에서조차도, 성과는 가능한 한계보다 훨씬 낮은 수준에서 작동할 수 있음
     * 아마도 AI는 우리에게 더 많은 영역에서 이러한 한계를 뚫고 나갈 수 있는 방법을 제공할 것임

GN⁺의 의견

     * 이 기사는 AI가 인간의 창의성과 기술 향상에 어떤 영향을 줄 수 있는지에 대해 흥미로운 통찰을 제공함. AI가 단순히 인간을 대체하는 것이 아니라, 인간이 자신의 한계를 깨닫고 뛰어넘을 수 있도록 자극하는 역할을 할 수 있다는 점이 인상적임.
     * 다만 이러한 효과가 모든 영역에서 동일하게 나타날 수 있을지는 의문임. 바둑이나 체스처럼 명확한 규칙과 목표가 있는 영역에서는 AI의 영향이 두드러질 수 있지만, 예술이나 창작 분야 등 주관적인 평가가 중요한 영역에서는 다른 양상을 보일 수 있음.
     * 또한 AI의 발전 속도가 너무 빨라서 인간이 적응하기 어려울 수도 있음. 기사에서도 언급되었듯이 인간 바둑 기사들은 아직 AI를 따라잡지 못하고 있음. AI와의 협업을 통해 인간의 능력을 극대화할 수 있는 방안에 대한 고민이 필요해 보임.
     * 한편으로는 AI의 발전이 인간에게 새로운 영감과 도전 과제를 제공함으로써, 오히려 인간의 창의성과 혁신을 자극할 수 있다는 점도 주목할 만함. 기존에는 시도해보지 않았던 새로운 아이디어와 접근 방식을 모색하게 되는 계기가 될 수 있을 것임.

   가슴이 웅장해지는 글이네요

   ai에 대한 희망찬 기사라 너무 좋아요.
   ai 이전에는 한계를 인지하고 발전이 없었던 반면에 ai가 한계를 돌파하고, 한계를 알 수 없게 되면서 인간의 창의성이 개선된게 아닌가 싶기도요.
   인간 자신을 개선할 도구로써 ai를 바라 본다면 좀 마음이 편안한 거 같아요.

   이쯤에서 보는 반-바지님의 단편 만화.

   둘이서 추는 춤

     우리보다 그들이 현명하고 노련해질 수 있다는 사실을 받아들이고 나면 우리가 얼마나 큰 힘을 가지고 있는지 알게 된다.
     우리는 우리의 스승을 만들 수 있는 유일한 종이 되었다는 것을.

   최고의 머신러닝 머신은 인간의 뇌네요

   우린 답을 찾을 것이다. 늘 그랬듯이.

        Hacker News 의견

     * 현대 체스 최고수들은 컴퓨터와 훈련하고 정확한 실패 지점을 알 수 있어 과거의 대가들보다 훨씬 뛰어남.
          + 최고수들이 너무 뛰어나서 체스가 지루해짐. 독창적인 전략 개발이 어렵고 방어적인 경향이 있어 많은 무승부 발생.
          + 반면 체스는 고등학교에서 인기가 많고, 사람들이 곳곳에서 체스를 즐기고 있음.
          + 컴퓨터 분석을 통해 자신의 실수를 정확히 파악할 수 있어서 좋음.
          + LIChess에서 플레이하며, 바둑에도 이와 유사한 앱이 있는지 궁금함.
     * AI는 게임과 인간 활동에서 발생하는 우연한 교리를 파괴하는 데 도움을 줌.
          + 해커 정신이 교리를 배제하고 다른 사람들이 놓친 성능을 찾는 데 중점을 둠.
     * 어릴 적 바둑을 배울 때, 특정 조석(바둑 개시 시퀀스)이 나쁜 수라고 배움.
          + AI 덕분에 이제는 그러한 조석이 흔하게 사용되며, 많은 교리와 신화가 사라짐.
     * AI는 전문가들이 더 나아지는 데 도움을 주는 것의 시작에 불과함.
          + 소프트웨어를 포함한 많은 창의적인 분야에서 AI의 도움을 받을 수 있음.
     * 인간이 더 큰 존재에게 패배함으로써 성장하는 것에 대한 Rilke의 시 인용.
     * AI를 연구함으로써 향상된 수가 40% 정도이지만, AI와 다른 '인간의 수'로 인한 향상도 60%에 달함.
          + 비전문가들 사이에서는 AI를 모방하는 경향이 있어 게임이 예전만큼 흥미롭지 않음.
     * 바둑 전략 자료는 AlphaGo 이전과 이후의 최선의 방법을 구분함.
          + AI가 여전히 인간을 지배하지만, 일부는 AI의 전략적 약점을 발견함.
     * 체스 역사에 대한 기사가 오해의 소지가 있음.
          + 최고수들이 AlphaGo와 LC0의 성공 이후에 더 창의적인 스타일로 전환함.
     * 엔터테인먼트 산업은 AI 이후에도 생존할 것임.
          + 사람들은 여전히 인간이 스포츠, 음악, 비디오 게임을 하는 것을 보고 싶어함.
     * 바둑 이론이 어떻게 확장되었는지에 대한 개요에 관심이 많음.
          + 체스와 바둑에서 개시를 외우지 않아도 되는 것에 대한 바람을 표현함.
"
"https://news.hada.io/topic?id=14225","수면 기준으로 정렬된 블로그 게시물","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          수면 기준으로 정렬된 블로그 게시물

수면과 글쓰기의 상관관계

     * 수면 데이터 2,500박과 블로그 포스트 58개를 결합하여 수면이 글쓰기에 미치는 영향을 7년간 실험.
     * 수면이 7시간 이상일 때는 글에 대한 수면 경고가 필요 없음을 발견.
     * 수면이 부족할 때는 글이 덜 체계적이지만 때로는 핵심 아이디어를 간결하게 표현.

글쓰기 빈도와 자신감

     * 수면이 적을 때 글을 약간 더 자주 게시하지만, 글의 단어 수는 적고 생각이 더 흩어져 있음.
     * 수면 부족 상태에서 더 많은 단어를 생성하지 않으며, 글이 더 똑똑해 보이는 착각을 함.

다른 소셜 미디어 활동

     * HackerNews, Reddit, Twitter 등 다른 플랫폼에서의 게시 행동도 수면 패턴과 유사한 경향을 보임.

공개적인 글 vs 비공개적인 글

     * 공개적으로 적게 게시하는 기간에도 비공개 그룹에서 유사한 양의 글을 생성.
     * 비공개 그룹에서의 글쓰기 패턴도 수면과 관련하여 블로그와 유사.

수면 경고

     * 수면 부족으로 인한 글에 대해 비공식적인 ""수면 경고"" 정책을 이미 가지고 있음.
     * 수면 데이터를 바탕으로 몇 가지 수면 경고를 추가할 예정.

Git에 대한 감사

     * 블로그에 git을 사용하여 정직한 역사를 유지하면서 수면 부족 콘텐츠의 가중치를 줄이고 더 체계적인 아이디어를 중심으로 유지할 수 있음.

동료 검토의 이점

     * 동료 검토는 더 많은 노력을 기울이게 하는 좋은 필터.
     * 아이디어의 중요성이 다양하기 때문에 한 영역에 너무 많은 시간을 투자하는 것이 최적의 전략이 아닐 수 있음.

글쓰기 데이터와 뇌의 현상

     * 수면이 적을 때 뇌는 쾌락 추구 상태가 되고, 행동에 대한 편향이 생기며, 더 적은 고통을 느낌.
     * 수면 부족은 비판적 사고를 줄이고 잘못된 생각 습관을 바로잡는 데 필요한 시간 투자를 꺼리게 함.

FitBit에 대한 감사

     * 2014년부터 Microsoft Band, FitBit Charge, Ionic, Versa, Sense 2 등을 착용하며 웨어러블 센서 분야의 진보에 감사함.

GN⁺의 의견

     * 이 연구는 수면이 인지 기능과 창의적 생산성에 미치는 영향을 개인적인 데이터를 통해 탐구한 사례로, 수면의 중요성을 강조함.
     * 수면 부족이 글쓰기에 미치는 부정적인 영향을 인식하고, 이를 개선하기 위한 방법을 모색하는 데 도움이 될 수 있음.
     * 수면 패턴과 글쓰기 스타일의 상관관계를 이해함으로써, 개인의 생산성을 높이는 데 기여할 수 있는 인사이트를 제공.
     * 그러나 이 연구는 개인의 자기보고 데이터에 기반하고 있어 일반화에는 한계가 있을 수 있음.
     * 수면과 생산성의 관계를 더 깊이 이해하려면, 다양한 배경을 가진 사람들을 대상으로 한 대규모 연구가 필요할 수 있음.

        Hacker News 의견

     * 사용자는 자신의 커밋당 버그 수나 회의 중 말한 단어 수와 수면의 상관관계를 보고 싶어 함. 수면이 생산성에 가장 큰 영향을 미치는 요소라고 생각함.
     * 누군가는 수면 정렬(sleep sort)을 사용하지 않은 것을 놓친 기회로 여김.
     * 수면 부족이 블로그 글의 질을 떨어뜨리는 원인인지, 아니면 삶의 혼란이 수면 부족을 초래하는지, 아니면 둘 다를 일으키는 숨겨진 변수가 있는지에 대한 의문을 제기함.
     * 수면 분야에서 일하는 사람은 불면증에 대해 이야기하며, 불면증이 불안과 관련이 있다고 흔히 언급되지만, 혼자 생각하는 시간을 좋아하고 스트레스 때문이 아니라고 결론짓음.
     * 개인적인 경험으로, 타이핑 중 즉시 발견하지 못하는 오타가 나오면 집중력이 떨어졌거나 본능적인 오류 인식이 작동하지 않는다고 판단함.
     * 애플 워치에서 데이터를 쉽게 내보낼 수 없는 것이 불편하며, 애플 헬스 앱에서 전체 데이터를 내보내는 것은 큰 ZIP 파일을 만들고 전처리하는 데 시간이 걸림.
     * 수면 부족이 블로그 글의 질을 떨어뜨리기보다는 공통의 원인이 있을 가능성이 더 높다고 생각함.
     * 사용자는 자신의 정신적 날카로움을 어느 정도 인지하고 있으며, 이는 언제 어떤 작업을 할지 결정하는 데 영향을 줌. 피곤하거나 산만할 때는 더 많은 가능성을 생각하지 못하거나 실수를 할 수 있음.
     * 수면 추적기를 사용하는 사용자는 5년 동안 데이터를 통해 수면 부족이 경청 능력 저하나 오해를 불러일으킬 수 있음을 발견함.
     * 페이지 조회수와 수면의 상관관계를 나타내는 그래프를 보고 싶어 함.
"
"https://news.hada.io/topic?id=14345","강철을 녹일 수 있는 초소형 초고휘도 레이저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        강철을 녹일 수 있는 초소형 초고휘도 레이저

포토닉 크리스탈 기반의 초고휘도 반도체 레이저 개발

     * 일본 정부는 2016년 '5번째 사회' 도래를 발표하였는데, 이 사회에서는 주문형 상품, 로봇 돌봄이, 택시, 트랙터 등이 활용될 것이며, 이를 가능케 하는 핵심 기술 중 하나가 바로 레이저임.
     * Society 5.0에 필요한 레이저는 소형화, 저비용, 제조 용이성, 에너지 효율성, 제어 용이성 등의 조건을 만족해야 하며, 기존 반도체 레이저로는 광도(brightness) 부족으로 한계가 있었음.
     * 교토대 연구팀은 지난 20여년간 포토닉 크리스탈 표면 발광 레이저(PCSEL)를 개발해 왔는데, 이는 활성층 내부에 나노 크기 구멍 배열로 이루어진 '스위스 치즈' 층을 추가해 빛의 진행을 제어함으로써 고출력과 좁은 빔을 동시에 구현한 것임.
     * PCSEL은 기존 반도체 레이저 대비 100배 이상의 휘도를 낼 수 있어, 가스/광섬유 레이저를 대체하고 제조/자동차 산업에 혁신을 가져올 것으로 기대됨.
     * 최근에는 강철을 자를 수 있는 1 GW/cm2/sr 급 3mm 구경 PCSEL을 개발하였고, 이론적으로는 10~100 GW/cm2/sr 급까지 가능할 것으로 예측됨.
     * 고출력 응용을 위해 에너지 효율과 열 관리 기술을 개선 중이며, 자율주행차/로봇용 초소형 라이다 시스템에도 PCSEL을 적용하고 있음.
     * 장기적으로는 10kW급 출력에 1000 GW/cm2/sr의 극한의 휘도를 내는 PCSEL을 개발해, EUV 리소그래피나 핵융합 등의 분야에 활용하고, 우주선 추진에도 응용해 볼 계획임.

포토닉 결정의 원리

     * 포토닉 결정은 반도체가 전자의 흐름을 제어하는 것처럼 빛의 흐름을 제어하는 구조로, 굴절률이 파장 스케일로 주기적으로 변하는 격자 구조를 가짐.
     * 단순한 1차원 포토닉 결정의 경우, 유리와 공기가 교대로 배치된 구조에서 빛이 각 경계면에서 굴절 및 반사를 겪으면서 보강/상쇄 간섭을 일으키게 되는데, 특정 파장에서는 정상파가 형성되어 전파하지 않게 됨.
     * 2차원 정방 격자 구조를 갖는 PCSEL에서는 구멍들이 빛을 앞뒤, 좌우로 굴절시켜 2차원 정상파를 만들고, 이것이 활성층에서 증폭되어 단일 파장의 레이저빔을 형성함.

고차 횡모드 억제를 통한 고휘도화

     * PCSEL의 발광 면적이 커지면 고차 횡모드가 발진하기 시작하는데, 이는 정상파의 세기 분포가 여러 개의 봉우리를 갖게 되기 때문임.
     * 초기에는 단일 격자를 사용하여 200μm 정도까지는 고차모드 억제가 가능했으나 그 이상 커지면 다시 발진하는 한계가 있었음.
     * 이중 격자 구조를 도입하여 격자 내 빛의 상쇄간섭을 유도함으로써 고차모드의 세기 봉우리를 약화시켜 1mm까지 구경을 늘릴 수 있었음.
     * 반사경의 위치와 격자 구멍의 형상을 조정하여, 정상파와 반사파 간 결합을 유도해 고차모드의 손실을 크게 함으로써 3mm급 초고휘도 PCSEL 구현에 성공함.

GN⁺의 의견

     * 기존 반도체 레이저 대비 휘도를 100배 이상 높일 수 있다는 점에서 제조업 등 산업계에 큰 혁신을 가져올 잠재력이 있어 보임. 다만 아직 연구실 단계이고 상용화까지는 시간이 더 걸릴 것 같음.
     * 고출력 응용을 위해서는 60% 이상의 높은 전기-광 변환 효율과 kW급 출력에서의 열 관리 기술 확보가 필수적일 것임. 열 문제만 해결된다면 기존 CO2/광섬유 레이저를 충분히 대체할 수 있을 것으로 보임.
     * 초소형 라이다 시스템은 상용화가 빠를 것 같은데, 기계식 빔 조향부를 제거하고 집적화할 경우 가격이 크게 낮아질 수 있을 것임. 다만 센서 성능 면에서는 기존 방식과 비교 검증이 필요해 보임.
     * EUV 리소그래피나 레이저 핵융합 등 초고휘도 레이저가 필요한 분야에서 기존 거대 레이저를 대체할 수 있다면 많은 비용 절감 효과가 있을 것임. 다만 아직 연구 초기 단계라 실현 가능성은 미지수.
     * 우주선 추진 분야는 흥미롭기는 하나 실현까지는 갈 길이 멀어 보임. 우선 수십 kW급 레이저 개발이 필요할텐데 기술적, 비용적 장벽이 높을 것으로 예상됨. 태양광 압력을 이용한 솔라세일 방식이 현실적인 대안이 될 수 있을 것 같음.

        Hacker News 의견

   요약:
     * PCSELs(Photonic Crystal Surface Emitting Lasers)은 문자 그대로의 역장은 아니지만, 공중에서 거의 즉각적으로 어떤 것이든 멈출 수 있는 능력 면에서 유사함.
     * 가정/소규모 작업장에서 금속을 자를 수 있는 저렴한 레이저 기술이 기대됨. 그러나 위험할 수도 있음에 주의 필요.
     * 수소-붕소 (aneutronic) 핵융합과 결합하면 열발전소 없이 전기를 직접 생산할 수 있는 가능성을 보여줌. 아직 몇 년 남았지만 희망적임.
     * 이는 ASML 기계들이 UV 레이저(각도)와 회절 격자를 조정하여 깨끗하고 작은 2D 패턴을 만드는 것과 유사함.
     * 이 규모에서 빛의 상호작용을 모델링하는 것이 얼마나 어려운지 궁금함. 확률적 해법의 가능성도 제기됨.
     * 냉각 문제가 고출력 LED 조명에서와 마찬가지로 관건이 될 것임. 아직 상당한 하드웨어가 필요함.
     * 왜 그냥 ""광선검""이라고 부르지 않았는지 의문. 기회를 놓친 듯.
     * 이러한 표면 방출 특성으로 인해 여러 칩을 위상 고정하기가 더 쉬워질 수 있음. 장거리에 걸친 대형 구경 및 전력 공급에 유용할 수 있음.
     * 고효율 대형 구경 레이저의 한 가지 응용 분야는 지상 기지나 우주 레이저 기지에서 장거리 항공기에 전력을 공급하는 것임. 연료를 전혀 사용하지 않아도 된다는 점이 매력적임.
     * 저렴한 가정용 레이저 커터가 목재, 가죽, 플라스틱 외에 금속도 자를 수 있게 될까?
     * 이 기사는 PCSEL을 edge-emitting 레이저와 비교하면서 혼란을 주고 있지만, VCSEL의 새로운 개선으로 보이며 VCSEL은 2000년경부터 큰 출력 밀도를 내고 있음.
     * 우리가 레이저 권총 시대의 막바지에 와 있는 것으로 보임.
"
"https://news.hada.io/topic?id=14332","Sequoia Arc의 Product-Market-Fit 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Sequoia Arc의 Product-Market-Fit 프레임워크

     * 제품-시장 적합성(PMF)을 찾는 것이 모든 초기 스타트업의 핵심 과제임
     * 세콰이어는 pre-seed와 seed 단계 회사들과 오랜 기간 파트너십을 맺어오면서 PMF에 도달하기 전에 이를 생각하고 접근하는 많은 방법들을 목격함
     * 이를 통해서 Arc(세콰이어의 초기 단계 회사를 위한 회사 구축 몰입형 프로그램)에서 창업자들에게 PMF 프레임워크를 제공함
     * 이 프레임워크는 PMF 달성 여부를 진단하기보다, PMF의 세 가지 뚜렷한 아키타입을 알려줘서 제품의 시장에서의 위치를 이해하고 회사 운영 방식을 결정하는 데 도움을 줌

3가지 Product-Market Fit 원형(Archetype)

     * PMF에는 고객이 문제와 관련되는 방식에 따라 3가지 기본 유형이 있음

  1. 머리에 불이 난 듯한 문제(Hair on Fire)

     * 고객에게 명확하고 긴급한 필요를 해결해주는 문제를 다룸
     * 수요가 명백하기 때문에, 해당 카테고리에는 시장 점유율을 두고 경쟁하는 경쟁자들이 많을 가능성이 높음
     * 고객들은 문제 해결을 위해 적극적으로 노력하고 있으며, 기존 제품들을 비교하고 있을 가능성이 높음
     * 이런 역동적인 상황에서 성공하려면 소음 위로 두각을 나타내야 함
     * 그러기 위한 유일한 방법은 최고 수준의 솔루션을 제공하는 것임
     * 최고 수준의 제품은 단순히 더 낫기 때문이 아니라 다르기 때문에 두각을 나타냄
     * 단순히 더 빠르거나 저렴해서는 안 되며, 지속 가능한 우위를 갖기 위해서는 진정으로 차별화된 고객 경험을 제공해야 함

  2. 당연시되는 불편함(Hard Fact)

     * 삶의 어려운 사실로 보편적으로 받아들여지는 고충을 다루되, 그것이 단지 제품이 고객을 위해 해결할 수 있는 어려운 문제일 뿐이라고 봄
     * 고객들은 문제와 함께 살아가는 것에 체념함
     * 문제 해결을 위해 적극적으로 노력하고 있지 않음
     * 현상 유지가 그냥 그런 것이며, 변화는 선택사항이 아닌 것처럼 보임
     * 예상치 못한 접근 방식으로 일하는 방식을 완전히 뒤집음: 사실은 바꿀 수 없지만, 문제는 해결할 수 있음
     * 극복해야 할 과제는 습관의 힘임
     * 고객들은 현재의 행동을 바꿔야 할 것이고, 관성은 강력함
     * 변화할 만한 가치가 있을 만큼 문제가 중요하고, 접근 방식이 충분히 새로워야 함

  3. 미래 비전(Future Vision)

     * 혁신적인 비전을 통해 새로운 현실을 가능케 함
     * 개념은 익숙하지만 불가능해 보이거나(핵융합에서 나오는 풍부하고 저렴한 에너지처럼) 아무도 상상하지 못했기 때문에(iPhone처럼) 고객에게는 공상 과학처럼 들림
     * 고객들은 문제 해결을 위해 노력하고 있지 않을 뿐만 아니라, 문제를 인식하지 못하거나 해결이 불가능하다고 생각함
     * 어느 쪽이든, 장애물은 불신 임: 고객들은 제품이 종종 자체 생태계를 가진 전혀 새로운 패러다임을 대표한다고 믿어야 함(iPhone은 단순한 기기가 아니라 인터넷과 상호 작용하는 새로운 방식인 App Store였음. Tesla는 단순한 자동차가 아니라 새로운 주행 경험인 카메라와 자율 주행 소프트웨어의 네트워크임)
     * 고객들은 패러다임과 그 가능성을 매력적으로 느껴야 함
     * 이 경로는 종종 길고, 상업적 기회를 포함한 올바른 경로를 찾는 것이 대개 중요함


각 경로에서의 운영 방법

     * 이러한 아키타입을 이해하면 자신의 회사가 어떤 경로를 가고 있는지 파악할 수 있음
     * Arc에서 만난 많은 창업자들은 자신들이 '머리에 불이 난 듯한 문제' 경로를 가야 한다고 가정함
     * 고객이 필요로 하는 것에 귀를 기울이라는 격언을 흡수했기 때문
     * 그것은 좋은 조언이지만, '당연시되는 불편함'이나 '미래 비전'의 역학도 PMF를 찾기 위한 실행 가능한 옵션이라는 것을 깨닫게 되는 경우가 많음
     * 고객이 이 문제와 어떤 관계를 맺고 있는지(그리고 솔루션에 대해 어떻게 느끼는지)에 따라 경로가 정의될 것임
     * 어떤 경로에서든 성공을 찾을 수 있지만, 각각 이해하는 것이 필수적인 고유한 운영 우선순위를 가져옴

  경로 1 - 머리에 불이 난 듯한 문제

     * '머리에 불이 난 듯한 문제' 경로는 훌륭한 제품과 훌륭한 시장 진출 노력을 모두 빠르게 필요로 함
     * 솔루션, 판매, 속도의 이러한 조합이 경쟁을 극복하는 핵심
     * 이 유형에서 성공을 거두는 회사들의 특징은 경쟁사를 공격적으로 앞질러 나가는 능력임

    Hair on Fire 사례 연구 - Wiz

     * Assaf Rappaport와 Wiz 공동 창업자들은 이전에 함께 Adallom을 설립함
     * 새로운 회사를 위해 클라우드 인프라 보안 문제에 관심을 가졌지만, 이미 Palo Alto Networks와 같은 기존 업체와 Orca Security와 같은 스타트업들이 제품을 제공하는 혼잡한 공간이었음
     * 그러나 CISO들을 인터뷰했을 때, 이 주제는 모두의 위시리스트 상위에 계속 떠올랐음
     * 큰 시장에서 명백한 수요가 있었지만, 차별화의 기회를 찾는 데는 약간의 노력이 필요했음
     * 대부분의 클라우드 보안 제품은 에이전트에 의존했는데, 이는 모니터링을 위해 모든 서버에 설치해야 하는 소프트웨어임
     * Wiz는 마찰과 골칫거리를 줄일 뿐만 아니라 취약점을 더 효과적으로 노출하는 ""에이전트 없는"" 솔루션을 고안함
     * 더 나아가 한번 연결만 되면 15분 고객 데모 과정을 통해서 이러한 취약점을 노출할 수 있었음
     * Assaf와 그의 팀은 경쟁사를 공격적으로 앞질러 나갔음: 엔지니어들은 이스라엘 시간 낮에 제품을 만들었고, 밤(미국 주간)에는 영업 담당자로 이중 근무를 했음
     * 단 한 분기 만에 0달러에서 280만 달러로 성장했고, 18개월 만에 연간 경상수익 1억 달러를 달성하여 사상 최고의 성장 속도를 기록한 소프트웨어 회사가 됨

    Hair on Fire 사례 연구 - Rippling

     * Parker Conrad가 Rippling을 설립했을 때, 그는 큰 '머리에 불이 난 듯한 문제' 시장에 진입하고 있었음
     * 모든 회사는 HR 소프트웨어가 필요하고, 이러한 긴급성은 치열한 경쟁에 반영되었음: 이미 최소 6개의 기존 업체가 시장 점유율을 두고 싸우고 있었음
     * 사실 그 중 하나는 Parker의 이전 회사인 Zenefits였음
     * 왜 괴로워해야 할까? 그의 깊은 전문성 덕분에 그는 무엇을 다르게 해야 하는지 알고 있었기 때문:
          + 다른 제공업체들이 HR과 복리후생을 위한 단일 플랫폼을 제공하기 위해 이질적인 데이터셋을 엮어냈지만, Rippling의 접근 방식은 통합 데이터베이스를 구축하는 것이었음
     * 이 직원 데이터의 기반 계층은 복리후생에서 비용, 장치 관리에 이르기까지 직원 경험의 모든 측면으로 ""파급""될 수 있었음
     * 그들의 기술적 우위는 HR, 재무 및 IT 관리자를 위한 차별화된 경험을 창출했고, 이를 통해 Rippling은 기존 업체들 사이에서 두각을 나타내고 시장 점유율을 빠르게 확대할 수 있었음
     * 그리고 가장 광범위한 직원 경험을 번들로 제공하는 전략은 새로운 진입자들에게 가격 레버리지가 어려울 수 있는 '머리에 불이 난 듯한 문제' 역학에서도 가격 결정력을 제공했음

  경로 2 - 당연시되는 불편함

     * '당연시되는 불편함' 경로는 고객이 현재의 프로세스에 접근하는 방식을 재평가하고 변경하도록 하는 것을 수반함
     * 이는 먼저 시장을 교육한 다음 기회를 포착해야 함

    Hard Fact 사례 연구 - Uber

     * 새로운 접근 방식은 기존 시장을 대체할 수도 있고(Salesforce가 CRM을 클라우드로 이동한 것처럼), 새로운 시장을 만들 수도 있음(Uber가 택시 경험을 승차 공유 마켓플레이스로 재구상한 것처럼)
     * 어느 쪽이든 '당연시되는 불편함' 경로에서는 경쟁이 적을 가능성이 높은데, 현상 유지를 바꾸는 것의 어려움이 다른 창업자들이 문제를 해결하는 것을 주저하게 만들었기 때문
     * 성공하기 위해 Uber는 수많은 일반인들에게 낯선 사람들을 태우도록 설득할 뿐만 아니라 택시 조합, 지역 규제, 노동법과 관련해야 했음
     * 다른 사람들이 그러한 어려움을 자연스럽게 기피한다는 것은 더 많은 그린필드 기회를 얻을 가능성이 높다는 것을 의미함

    Hard Fact 사례 연구 - Block

     * Block(당시 Square)이 처음 출시되었을 때, 그들이 다루고 있던 당연시되는 불편함은 널리 알려져 있고 인정되고 있었음: ""현금만 받음""
     * 많은 소규모 사업체나 농민 시장에서는 신용 카드를 받을 방법이 없었음
     * 소비자들은 ATM을 찾아 힘들게 돌아다녔고 상인들은 종종 판매 기회를 놓쳤음
     * Jack Dorsey와 Jim McKelvey의 독특한 통찰력은 당시 막 보편화되기 시작한 스마트폰을 모바일 신용카드 단말기로 효과적으로 바꿀 수 있다는 것이었음
     * Square는 이 삶의 당연한 사실로 여겨지던 것이 사실은 그들이 해결할 수 있는 어려운 문제라는 것을 깨달았음
     * 그러나 성공을 거두기 위해서는 세상 사람들이 더 이상 이 고통과 함께 살 필요가 없다는 것을 보게 하고, Square의 솔루션을 충분히 신뢰하여 새로운 방식을 채택하도록 해야 했음
     * 이러한 깨달음을 활성화하고 제품을 전파할 초기 수용자들을 확보하기 위해 Square는 하드웨어와 소프트웨어를 상인들에게 무료로 제공하고 나중에 비즈니스 모델을 찾기로 초기에 결정했음
     * 결국 Square는 새로운 표준이 되었음

    Hard Fact 사례 연구 - HubSpot

     * 2006년에 마케팅은 주로 광고, 우편물, 텔레마케팅으로 구성되었음
     * 이는 모두 고비용 채널이었기 때문에 소규모 사업체에게 불리했음
     * Brian Halligan과 Dharmesh Shah는 새로운 방법이 있다는 것을 깨달았음: 작은 회사들은 빠르게 성숙해가는 인터넷(블로그, 소셜 미디어, SEO, 이메일 뉴스레터)의 특성을 활용하여 기존 채널 비용의 일부로 대상에 도달할 수 있었음
     * HubSpot의 콘텐츠, SEO, 이메일 관리 도구 제품군은 고객을 위해 이 문제를 해결했음
     * 그러나 고객들이 그들의 접근 방식을 믿고 제품을 채택하기 시작하려면 HubSpot은 고객의 마음속에 새로운 방식을 구체화해야 했음 - 기존 방식이 망가졌고 더 나은 것으로 대체될 수 있다는 것을 인식하게 해야 했음
     * 그들은 자신들의 새로운 방식에 ""인바운드 마케팅""이라는 용어를 만들고 심지어 그에 대한 책을 써서 이를 수행했음
     * 그들은 시장을 교육하는 데 너무나 효과적이어서 이 아이디어가 퍼져나가 소규모 사업 세계에 마케팅 혁명을 일으켰고, HubSpot을 PMF 이상으로 추진했음

  경로 3 - 미래 비전

     * '미래 비전' 경로는 실패할 가능성이 가장 많고 성공할 가능성이 가장 적지만, 잠재적으로 가장 큰 보상을 얻을 수 있음
     * 이 경로를 가려면 긴 여정을 위해 최고의 인재를 끌어들이고 유지할 수 있는 인내심과 능력이 필요함

    Future Vision 사례 연구 - NVidia

     * 철학자 쇠렌 키르케고르는 ""삶은 뒤를 돌아봄으로써만 이해할 수 있지만, 앞을 내다보며 살아야 한다""고 말했음
     * Nvidia의 Jensen Huang과 같은 '미래 비전' 창업자들은 회사 설립 야망에 도달하기까지 30년이라는 험난한 길을 걸었기에 이 말에 공감할 수 있을 것임
     * Nvidia의 초기 비전은 컴퓨터 사용 경험을 혁신할 3D 그래픽 칩으로 PC의 성능을 높이는 것이었음
     * Nvidia가 첫 번째 칩을 출시했을 때, 그것은 시대를 너무 앞서 있어서 아무도 그것으로 무엇을 해야 할지 몰랐음
     * 비디오 게임이라는 GPU가 매력적인 새로운 가능성을 가능하게 한 산업에서 PMF를 찾는 데 6년과 세 가지 제품 라인이 걸렸음
     * Nvidia의 원래 야망이 비디오 게임 산업에만 국한된 것은 아니었지만, PC와 Xbox 모두에 전력을 공급하는 GPU로 게임 혁신과 동의어가 되었음
     * Nvidia를 수익성과 IPO로 이끈 이 매우 생산적인 중간 기착지가 아니었다면, 오늘날의 AI 혁명에 힘을 실어주기에 충분히 오래 살아남지 못했을 것임
     * 사실 게임에서 PMF를 찾기 전에 그들은 파산 직전에 있었음
     * 설립 30년이 지난 지금, Nvidia는 GPU가 데이터 센터에서 클라우드 컴퓨팅에 이르기까지 모든 것을 변화시키면서 새로운 컴퓨팅 패러다임을 가능하게 하고 있음

    Future Vision 사례 연구 - Google Glass

     * PMF를 찾지 못한 '미래 비전' 제품은 종종 ""너무 이르다""고 표현됨
     * 예를 들어 Google Glass가 출시된 지 11년이 지났지만, 증강현실은 아직 주류가 되지 않았음
     * 이것이 바로 '미래 비전' 원형에서 여정을 따라가는 상업적 견인력을 가진 중간 기착지를 찾는 것이 매우 중요한 이유임
     * 여러분의 비전이 옳고 실행 가능한 경로를 찾을 수 있다고 가정하면, 시간은 여러분 편임: 세상이 여러분의 패러다임을 받아들이는 동안 압도적인 선점 효과를 누릴 수 있음
     * 그러나 올바른 중간 기착지를 찾는 것은 어려울 수 있음
     * 키르케고르가 말한 것처럼 ""앞을 내다보며"" 불완전한 정보로 행동해야 하며, 함정은 언제나 사후에 더 명백해 보임
     * 종종 올바른 길을 찾는다는 것은 여러분이 생산하는 기술과 여러분이 섬기는 시장 모두에서 예상치 못한 전환을 받아들이는 것을 의미함

    Future Vision 사례 연구 - OpenAI

     * OpenAI는 우리 시대의 가장 흥미로운 '미래 비전' 이야기 중 하나임
     * 그 비전은 기술 분야에서 오랫동안 실현 불가능한 꿈으로 여겨졌던 인공 일반 지능(AGI)을 인류의 이익을 위해 달성하는 것임
     * 이를 위해 창업자들은 기업의 이윤 동기가 인간 이익이라는 사명을 훼손할 것이라고 생각했기 때문에 비영리 단체로 시작했음
     * 그러나 몇 년이 지난 후, 그들은 대규모 언어 모델을 혁신하는 데 필요한 컴퓨팅 비용이 가장 잘 연결된 비영리 단체의 자금 조달 능력마저 앞질렀다는 것을 깨달았음
     * 영리 부문으로의 전환이 필요했음
     * 더 전통적인 스타트업 구조를 채택하면서 자금 조달뿐만 아니라 제품 출시에 대한 기대도 생겼고, 그 결과 ChatGPT가 탄생했음
     * ChatGPT는 ""보기 전까지는 원하는 줄 몰랐다""는 iPhone 패러다임에서 즉시 PMF를 발견했음
     * 2022년 생성형 AI에 대한 소비자 수요는 미미했음
     * 2023년 OpenAI는 16억 달러를 벌어들였음
     * ChatGPT가 유례없이 빠르게 채택된 소비자 기술 제품이긴 하지만, OpenAI에게는 진정한 야망을 향한 길 위의 필요한 중간 기착지임

종합하기

     * 이 세 가지 경로의 프레임워크를 사용하면(그리고 어느 한 경로가 다른 경로보다 더 낫지 않다는 점을 명심하면) 자신의 제품이 세상에서 차지하는 위치를 되돌아볼 수 있음
     * 어떤 경로를 가고 있는가? 고객들은 당신이 해결하고 있는 문제와 어떤 관계를 맺고 있는가?
     * 올바른 카테고리 역학에 대해 생각하고 있는가? 운영 우선순위는 무엇인가?
     * 속도와 규모를 최적화해야 하는가, 초기 수용자들에게 깨달음을 주어야 하는가, 아니면 여정의 중간 기착지를 전략적으로 설정해야 하는가?

탐구는 계속되어야 함

     * 실무는 항상 이론보다 더 복잡하며, 이러한 사고를 현실에 적용할 때 염두에 두어야 할 몇 가지 중요한 뉘앙스가 있음

  제품-시장 관계 역학의 유동성

     * 제품-시장 관계 역학은 유동적임
     * 시간이 지나면서 많은 회사들이 새로운 제품을 도입하거나 기존 제품과 근본적인 문제에 대한 고객의 태도가 변함에 따라 한 경로에서 다른 경로로 이동하게 됨
     * 일부 회사는 한 번에 두 가지 경로를 걸치기도 함
     * 이 프레임워크의 목적은 경로를 돌이킬 수 없을 정도로 고정시키는 것이 아님
     * 어느 한 경로에 자신을 너무 좁게 동일시하는 것은 실수임

  Apple의 제품-시장 적합 경로 변화

     * Apple은 Future Vision으로 시작함
     * 1978년 Sequoia에 보낸 최초의 메모에서 가정용 컴퓨터에 대한 수요가 전혀 없다는 것을 인정함
     * 80년대에 상상력을 사로잡고 인기를 얻으면서 개인용 컴퓨터 범주는 더 이상 Future Vision이 아니게 됨
     * 1998년 iMac 출시와 함께 Apple은 컴퓨터가 점점 더 널리 사용되지만 비인격적이라는 Hard Fact를 해결함
     * iPhone은 2007년 Steve Jobs가 공개했을 때 Future Vision으로 즉시 PMF를 찾음
     * 스마트폰 카테고리는 빠르게 Hair on Fire 역학으로 전환되었고 많은 새로운 스마트폰이 시장에 진입함
     * Apple은 카테고리를 정의하고 옳았으며 계속 혁신함으로써 우위를 유지할 수 있었음
     * 오늘날 Apple은 Apple Vision Pro로 또 다른 Future Vision을 선보이고 있음
     * 이 기기는 iPhone을 위해 개발된 센서의 10배 발전을 활용함
     * 한 제품의 PMF 여정의 결실이 다음 제품의 씨앗이 될 수 있음
     * Apple Vision Pro가 우리가 아직 상상할 수 없는 완전히 새로운 경험을 가능하게 하고 몇 년 후에는 Hair on Fire 경로에 완전히 들어설 수 있을까? 시간이 말해줄 것임

  제품-시장 적합 경로 진화

     * 전설적인 회사는 제품-시장 적합의 한 경로에서 다른 경로로 진화하는 여러 제품 라인을 엮어냄
     * 한 제품이 정체될 수 있지만 다음 제품은 상승하기 시작함
     * 이 프레임워크를 사용하면 이 주기의 어느 단계에 있든 상관없이 방향을 잡을 수 있음
     * PMF는 도달하려는 목적지처럼 보일 수 있지만, 도착한 후에도 그것을 유지하고 확장하는 것은 회사가 존재하는 한 계속 해야할 지속적인 퀘스트임

   개발 말고도 요런 글도 너무 좋은 거 같아요. 계속 올려주세요~

   First Round Capital의 Product-Market-Fit 찾기 프레임워크
   Product/Market Fit (PMF)을 위한 로드맵

   Product Market Fit은 어떤 느낌일까?
   Product-Market Fit 의 4가지 종류
"
"https://news.hada.io/topic?id=14337","어텐션 시각화, Transformer의 심장부 [영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     어텐션 시각화, Transformer의 심장부 [영상]

뉴럴 네트워크

  어텐션 시각화하기, 트랜스포머의 심장 | 6장, 딥러닝

     * 2024년 4월 7일 게시됨
     * Grant Sanderson의 강의
     * 소스 코드 제공

  감사의 말

     * 원본 비디오를 지원해준 아래 분들과 현재 프로젝트에 자금을 지원하고 있는 후원자들에게 특별한 감사를 전함.
     * 이 강의가 가치 있다고 생각하면 참여를 고려해 보기 바람.
     * bruce obergg, regostras, Marco, Anthony Eufemio, Molly Mackinlay, Joshua Ouellette 등 다수

GN⁺의 의견

     * 어텐션 메커니즘은 트랜스포머 모델의 핵심 기술로, NLP 분야 뿐 아니라 컴퓨터 비전 등 다양한 분야에서 혁신을 일으키고 있음. 이를 시각화해서 설명한다는 것은 어텐션의 작동 원리를 이해하는데 큰 도움이 될 것으로 보임.
     * 트랜스포머 모델은 기존의 RNN 계열 모델의 한계를 극복하고 병렬 처리를 가능하게 해 성능을 크게 높였지만, 그 복잡도로 인해 해석이 어려운 블랙박스로 여겨지는 경향이 있음. 이를 시각화를 통해 설명하려는 시도는 트랜스포머에 대한 오해를 줄이고 응용 범위를 넓히는데 기여할 것임.
     * 다만 시각화 자체가 직관적 이해에는 도움이 되겠지만 엄밀한 증명이 되기는 어려움. 시각화 결과를 해석할 때는 주의가 필요함. 또한 시각화를 위해 차원 축소 등 정보 손실이 발생할 수 있다는 점도 고려해야 함.
     * 유사한 프로젝트로는 OpenAI의 미시적(Microscope)이 있는데, 이는 딥러닝 모델 내부의 뉴런 활성화를 시각화해주는 도구임. 3Blue1Brown과 같이 딥러닝 모델을 알기 쉽게 설명하려는 시도들이 더 많아졌으면 좋겠음.

        Hacker News 의견

     * 3Blue1Brown의 ""But what is a GPT?"" 동영상이 Transformer 모델의 Attention 메커니즘을 명확하게 설명함. 특히 Query와 Key의 행렬곱 연산이 어떻게 병목이 되는지 잘 보여줌.
     * Ring Attention이라는 새로운 아이디어가 이 병목 문제를 개선하는 좋은 방법임. 관련 자료로 ""How to Build a 10M+ Token Context"" 글이 추천됨.
     * 3Blue1Brown의 신경망 관련 동영상들이 연속성을 가지고 있어서 함께 보면 좋음. Neural Networks 토픽 페이지에서 확인 가능.
     * Attention 메커니즘은 특정 함수라기보다는 일종의 메타 함수에 가까움. Attention과 학습된 가중치의 조합으로 Transformer가 유사-임의의 함수를 학습할 수 있게 해줌.
     * 소설 끝부분의 ""was"" 토큰 예시가 non-technical한 사람들도 이해하기 쉬운 훌륭한 설명임. (동영상 3:58 - 4:28 부분)
     * Value 행렬의 low-rank 분해를 사용하는 것이 Value+Output 행렬을 사용하는 것보다 직관적임.
     * Grant Sanderson(3Blue1Brown)이 복잡한 주제를 항상 명료하고 이해하기 쉽게 설명하는 것이 놀라움. 이 동영상을 보기 전까지는 Transformer를 완전히 이해하지 못했음.
"
"https://news.hada.io/topic?id=14263","무료로 SEO 키워드 추출 및 전략 활용 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       무료로 SEO 키워드 추출 및 전략 활용 방법

    1. 주요 키워드 생성하기
       블로그의 가시성과 참여도를 급상승시키기 위해 맞춤화된 가장 많이 검색되고 영향력이 있는 주요 키워드를 찾을 수 있습니다. 아래 프롬프트를 통해 AI를 활용하여 숏테일 및 롱테일 키워드를 찾아보세요.

    2. 롱테일 키워드 찾기
       아래 프롬프트를 활용하여 AI를 통해 롱테일 키워드를 생성할 수 있습니다. 롱테일 키워드는 위에 설명과 같이 검색량은 조금 떨어질 수 있으나 콘텐츠에 관심있는 사람들이 보기때문에 노출에 더 유리합니다!
    3. 비즈니스와 지역에 따른 키워드 생성
       SEO에서 지역 키워드는 굉장히 중요한데요. 지역 키워드, 현지화 키워드 등을 통해 해당 키워드 유입을 끌어올리면 콘텐츠 유입에 더 효과적입니다. 아래 프롬프트는 대량의 키워드와 틈새 시장에 특화된 롱테일 키워드를 혼합하여 [틈새 시장]에 공감하는 매력적인 키워드 목록을 만드는 방법에 대해 제공합니다.

       4.인기 있는 하위 키워드 생성
       키워드들을 유기적으로 연결되어 있는 경우가 많은데요. 핵심 키워드와 그 하위 키워드를 생성할 수 있는 프롬프트입니다. 하위 키워드들을 활용하여 더 많은 사용자들에게 노출 전략을 세울 수 있습니다!

    4. 구글 SEO 전략, 콘텐츠 검색엔진 최적화 생성
       전체적인 SEO전략을 알아볼 수 있습니다. 제목, 설명, 롱테일 키워드 등 전체적인 검색엔진최적화에 대해 알아보세요! 아래 프롬프트를 통해 쉽게 SEO전략을 세울 수 있습니다.
"
"https://news.hada.io/topic?id=14324","CS 886: 파운데이션 모델의 최신 연구 동향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       CS 886: 파운데이션 모델의 최신 연구 동향

     * ""캐나다의 MIT"" 워털루 대학교의 AI 강의 중 하나
     * 챕터당 설명 슬라이드와 유튜브 강의영상 및 레퍼런스들 링크 포함
     * 토픽과 레퍼런스 리스트 만으로도 좋은 참조가 될 것 같음

강의 목차

  Introduction to Foundation Models

    1. Foundation Model 소개
    2. 수업 안내
    3. RNN & CNN
    4. NLP & CV

  Transformer Architecture

    5. Self-Attention & Transformer
    6. Efficient Transformer
    7. Parameter-Efficient Tuning
    8. Language Model Pretraining

  Large Language Models

    9. Large Language Model
   10. Scaling Law
   11. Instruction Tuning & RLHF
   12. Efficient LLM Training
   13. Efficient LLM Inference
   14. Compress and Sparsify LLM
   15. LLM Prompting

  (Large) Multimodal Models

   16. Vision Transformer
   17. Diffusion Model
   18. Image Generation
   19. Multimodal Model Pre-training
   20. Large Multimodal Model

  Augmenting Foundation Models

   21. Tool Augmentation
   22. Retrieval Augmentation
"
"https://news.hada.io/topic?id=14232","Vala 프로그래밍 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Vala 프로그래밍 언어

     * Vala는 GNOME 개발자들에게 모던한 프로그래밍 언어 기능을 제공하는 것을 목표로 하는 프로그래밍 언어
     * C로 작성된 애플리케이션 및 라이브러리와 비교할 때 추가 런타임 요구사항을 부과하지 않으며 다른 ABI를 사용하지 않음
     * 지원하는 모던 언어 기능들: 인터페이스, 프로퍼티, 시그널, Foreach, 람다 표현식, 로컬 변수를 위한 타입 추론, 제네릭, Non-null 타입, 메모리 관리, 예외 처리
     * 객체지향 방식으로 고수준의 추상화를 이용해 편하게 코드를 작성할 수 있으며, GObject, GTK 등 GNOME 기술과 깊이 통합됨
     * 코드를 매우 빠른 네이티브 바이너리로 컴파일함. 기존 C 코드를 Vala 프로그램에서 재사용하거나 Vala에서 C 코드를 생성할 수 있음

기존 C 라이브러리와의 호환성

     * Vala는 런타임 바인딩 없이 기존 C 라이브러리, 특히 GObject 기반 라이브러리에 액세스할 수 있도록 설계되었음
     * Vala 문법으로 클래스 및 메서드 선언을 포함하는 API 파일만 있으면 Vala와 함께 라이브러리를 사용할 수 있음
     * Vala는 현재 GLib 및 GTK+에 대한 바인딩과 함께 제공됨

Vala 컴파일러 valac

     * valac은 Vala 소스 코드를 C 소스 및 헤더 파일로 변환하는 자체 호스팅 컴파일러임
     * Vala 소스 코드에 선언된 클래스와 인터페이스를 생성하기 위해 GObject 타입 시스템을 사용함
     * Vala의 문법은 C#과 유사하며, GObject 타입 시스템에 더 잘 맞도록 수정되었음

C에서 Vala로 작성된 클래스 및 메서드 사용하기

     * Vala 라이브러리에서 생성된 헤더 파일만 설치하면 C 애플리케이션에서 Vala 라이브러리의 GObject 기반 API에 일반적인 방식으로 액세스할 수 있음
     * Vala 파서가 라이브러리로 작성되어 모든 컴파일 시간 정보를 바인딩 생성 시 사용할 수 있으므로, C# 등으로 작성된 애플리케이션에서 Vala 라이브러리에 액세스하기 위한 바인딩 생성기를 작성하는 것도 쉬울 것임

GN⁺의 의견

     * Vala는 C와 유사한 문법으로 GNOME 기술과 잘 통합된 객체지향 언어라는 장점이 있음. 특히 GUI 애플리케이션 개발에 최적화되어 GTK, Granite 등과 쉽게 연동 가능함
     * Vala는 GNOME 데스크탑 환경 개발에 특화된 언어로 그 외의 분야에서는 활용도가 크지 않을 것으로 보임
     * C#과 유사한 문법을 가진 Vala는 C#에 익숙한 개발자들이 GNOME 개발에 참여하는 데에 도움이 될 것임
     * 기존 C 라이브러리와의 호환성을 중요시하면서도 모던한 언어 기능을 지원하려는 Vala의 목표는 신선하지만, 그로 인해 언어 자체의 독창성은 떨어질 수밖에 없을 것으로 보임
     * Vala 프로젝트들을 보면 주로 GNOME이나 elementary OS용 데스크톱 앱이 많은데, 서버 프로그래밍에도 활용 가능한 언어임. 다만 아직 그 분야에선 생태계가 부족한 편
     * Vala가 얼마나 널리 사용될지는 미지수이나, GNOME 생태계에서는 C 대신 Vala를 사용함으로써 생산성 향상을 기대해볼 만함
     * Vala와 문법이 유사하고 GNOME 기술을 사용할 수 있는 Genie라는 언어도 있음. Python처럼 들여쓰기로 코드 블록을 구분하는 게 특징. Vala의 대안으로 고려해볼만함

        Hacker News 의견

     * Vala는 최근 활발한 개발 활동이 있었는지에 대해서는 의문이 제기됨. 한 GNOME 개발자의 블로그 포스트에 따르면 Vala는 한 명의 개발자에 의해 유지보수되고 있으며 새로운 개발에는 추천하지 않는다고 함.
     * 한 댓글 작성자는 최근 Vala로 앱을 작성했는데 즐거운 경험이었다고 함. 데스크톱 리눅스와 PinePhone에서 잘 작동하는 앱을 원했기에 Vala가 잘 맞았으며, Python보다 훨씬 더 즐겁고 성능도 좋았다고 함.
     * Vala에는 Genie라는 자매 언어가 있음. 두 언어는 기본적으로 동일하지만 Vala는 C#과 유사한 문법을, Genie는 Python과 같은 의미 있는 공백을 사용함. 둘 다 동일한 컴파일러(valac)에 의해 컴파일됨.
     * Vala는 문법적으로 Swift와 매우 유사해 보임. 문법 외에도 Vala는 1급 참조 카운팅, C 언어 바인딩, 외부 런타임 없이 바이너리로 직접 컴파일되는 점 등이 Swift와 유사함.
     * Vala가 안정된 ABI나 C++ 또는 ObjC와 같은 다른 고급 언어와의 호환성을 갖추고 있는지에 대한 의문이 제기됨. 이는 Swift가 해결하려고 시도하는 어려운 과제임.
     * Vala가 Java나 C#보다 (상당히) 더 생산적이거나 강력한 언어라는 점을 찾기 어려움. Vala의 장점이나 해결하려는 문제가 무엇인지 명확하지 않음.
     * Vala의 장점 중 하나는 GObject와의 호환성 때문에 액세스할 수 있는 광범위한 네이티브 라이브러리라는 의견이 있음. 모든 것이 한 곳에 있는 훌륭한 문서화 웹사이트(valadoc.org)도 개발을 용이하게 만듦.
     * elementary OS의 대부분의 ""네이티브"" 앱은 Vala로 작성되었다고 함.
     * Geary를 좋아했던 한 댓글 작성자는 그것 때문에 Vala를 조사했고, Vala가 우아한 언어이며 GNOME에서 실용적인 프로그램을 만드는 데 좋다는 것을 알게 되었음. 하지만 최근 7년 동안 Vala를 살펴보지 않았다고 함.
     * GNOME 개발을 위해 Rust를 사용하는 것이 점점 더 인기를 얻고 있음(gtk-rs.org).
"
"https://news.hada.io/topic?id=14301","Flyweight - SQLite 용 ORM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Flyweight - SQLite 용 ORM

     * SQLite 와 NodeJS를 위한 ORM
     * 매우 간단한 API와 ORM에서 파싱하는 SQL 쿼리를 생성하는 기능을 결합
     * 프로젝트에서 ""npx create-flyweight database"" 호출하고 나면 import { db } from './database/db.js'; 처럼 바로 사용 가능
     * npm run watch 해두면 SQL 수정시 마다 자동으로 타입 업데이트
     * npm run migrate <migration-name> 으로 마이그레이션 가능(테이블 추가 및 변경)
     * 모든 테이블에 get, update, insert, remove 와 count/exists 제공

   좋아보이네요. 모델을 js가 아닌 sql로 정의 한다는게 호불호가 갈릴 수도..
"
"https://news.hada.io/topic?id=14328","1980년대 불만을 품은 연방 공무원의 책상 달력 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   1980년대 불만을 품은 연방 공무원의 책상 달력 (2018)

   아래에 보낸 내용은 소설/영화 리뷰 또는 그에 대한 책 소개문인 것 같습니다. 기사 본문의 내용이 없어 요약할 내용을 찾을 수 없습니다.

   책 소개문으로 가정할 경우, 아래와 같이 의견을 제시해 볼 수 있겠네요.

GN⁺의 의견

     * 제목에서 ""우리는 결코 혼자가 아니다"" 라는 주제를 강조하고 있음. 이는 인간 존재의 본질적 고독감과 소외감에 대한 성찰을 담고 있는 작품일 것으로 추측됨.
     * 내용을 모르지만, 인간 실존의 본질에 대해 천착하는 깊이 있는 내용의 문학작품 또는 영화가 될 것으로 기대됨.
     * 2024년 4월 출간/개봉 예정인 것으로 보아, 가까운 미래에 기대되는 작품으로 보임.
     * 작가인 Tobias Wolff는 실존주의 계열의 현대 미국 소설가로 알려져 있음. 인간 내면의 고뇌와 방황을 깊이있게 탐구하는 작품을 주로 써왔음.
     * 비슷한 주제의 고전으로는 사르트르의 '구토', 카뮈의 '이방인' 등이 있음. 최근 작품으로는 무라카미 하루키의 '1Q84' 등에서도 실존과 소외를 다루고 있음.

        Hacker News 의견

     * 한 사람이 1980년대에 매일 데스크 캘린더에 글과 그림을 추가하며 9년간 꾸준히 기록한 내용이 있음
     * 이 직원은 불만이 많은 사람처럼 보이기보다는 오히려 자신의 일과 삶을 즐기는 사람처럼 보임
          + 진정으로 불만이 많은 공무원은 은퇴까지 남은 시간을 매일, 심지어 시간 단위로 카운트다운 할 것임
     * 원본 기사는 The Paris Review에서 확인할 수 있음
     * 이 아날로그 캘린더는 중요도, 영향, 삶 등의 개념을 담고 있어 요즘의 소프트웨어 캘린더보다 훨씬 풍부함
          + 디지털 캘린더는 Palm Pilot 이후로 거의 진화하지 않았음
     * 1987년에는 Kansas 대학교가 NCAA 토너먼트에서 우승해서 이 직원의 불만이 줄었을 것으로 추측됨
     * 매달 둘째 주 토요일마다 기록된 두 숫자(예: 242/119)의 의미가 궁금함
          + 미국인들에게는 명확할 수 있지만, 혈압이 아니길 바람
     * 1984년 1월 13일부터 Debian을 사용하기 시작한 것으로 보임
     * 1980년대에는 멍하니 있을 때 낙서를 하곤 했지만, 요즘은 인터넷을 보는 경향이 있고 낙서할 종이도 없음
     * 이 직원은 불만이 많다기보다는 지루해 보임
     * 기사에서 이 직원을 남성으로 가정하고 수도승에 비유한 특별한 이유가 있는지 의문임
"
"https://news.hada.io/topic?id=14277","92개국 사용자들에게 용병 스파이웨어 공격 경고 발령한 Apple","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  92개국 사용자들에게 용병 스파이웨어 공격 경고 발령한 Apple

     * Apple은 수요일 92개국의 iPhone 사용자들에게 용병 스파이웨어 공격의 표적이 되었을 수 있다는 위협 알림을 보냄
     * 공격자의 신원이나 사용자가 알림을 받은 국가는 공개하지 않음

위협 알림 내용 요약

     * Apple ID와 연결된 iPhone이 원격으로 손상되려는 용병 스파이웨어 공격의 표적이 되고 있음
     * 이 공격은 사용자가 누구이거나 무엇을 하는지 때문에 구체적으로 표적이 되고 있을 가능성이 높음
     * 이러한 공격을 탐지할 때 절대적 확실성을 얻는 것은 불가능하지만, Apple은 이 경고에 대해 높은 신뢰도를 가지고 있으므로 심각하게 받아들여야 함

Apple의 위협 알림 현황

     * Apple은 1년에 여러 차례 이러한 종류의 알림을 보내며, 2021년 이후 150개 이상의 국가에서 사용자에게 이러한 위협을 알림
     * 작년 10월 인도의 많은 언론인과 정치인에게 동일한 경고를 보냄
     * 이후 국제앰네스티는 인도의 저명한 언론인 iPhone에서 이스라엘 스파이웨어 제조업체 NSO Group의 침습적인 스파이웨어 Pegasus를 발견했다고 보고함
     * 인도의 사용자들도 Apple의 최신 위협 알림을 받은 사람들 중 일부임

스파이웨어 경고의 시기와 Apple의 입장

     * 많은 국가가 선거를 준비하고 있는 시기에 스파이웨어 경고가 도착함
     * 최근 몇 달 동안 많은 기술 회사들이 특정 선거 결과에 영향을 미치기 위한 국가 후원 노력의 증가에 대해 경고함
     * 그러나 Apple의 경고는 시기에 대해 언급하지 않음
     * Apple은 어떤 이유로 이 알림을 보냈는지에 대한 더 많은 정보를 제공할 수 없다고 고객에게 전함
          + 그렇게 하면 용병 스파이웨어 공격자가 탐지를 피하기 위해 행동을 조정하는 데 도움이 될 수 있기 때문
          + 이전에는 공격자를 ""국가 후원""으로 설명했지만 이제는 모든 언급을 ""용병 스파이웨어 공격""으로 대체함

Apple의 용병 스파이웨어 공격에 대한 설명

     * NSO Group의 Pegasus와 같은 용병 스파이웨어 공격은 매우 드물고 일반적인 사이버 범죄 활동이나 소비자 맬웨어보다 훨씬 더 정교함
     * Apple은 이러한 공격을 탐지하기 위해 ""내부 위협 정보 및 조사""에만 의존한다고 설명
          + Apple의 조사는 절대적 확실성을 얻을 수는 없지만, Apple 위협 알림은 사용자가 용병 스파이웨어 공격의 개별 표적이 되었다는 높은 신뢰도의 경고이며 매우 심각하게 받아들여야 함

GN⁺의 의견

     * 용병 스파이웨어는 주로 국가 행위자나 권력자에 의해 사용되며, 정치적 반대자나 인권 운동가, 언론인 등을 감시하는 데 악용될 수 있음. 국제사회의 감시와 규제가 필요해 보임
     * Pegasus와 같은 스파이웨어는 iOS의 취약점을 이용하므로, Apple은 보안 업데이트에 더욱 신경 써야 할 것임. 동시에 정부의 협조를 얻어 스파이웨어 개발사에 대한 제재도 필요해 보임
     * 일반 사용자도 최신 보안 업데이트를 항상 적용하고, 출처가 불분명한 앱 설치를 자제하는 등 기본적인 보안 수칙 준수가 필요함
     * 인권 침해 도구로 악용될 수 있는 스파이웨어 개발을 막기 위한 국제적 공조와 규범 마련이 시급해 보임. UN 등 국제기구 차원의 논의가 필요할 것으로 보임

        Hacker News 의견

   요약:
     * 한 레딧 사용자가 애플로부터 Pegasus 스파이웨어 공격 대상이 되었다는 경고 메시지를 받았다고 주장함. 대학생이라고 밝힌 이 사용자의 사례는 실제 해커들이 전화번호 등을 기반으로 표적을 정하는 것일 수 있음을 시사함.
     * 만약 이런 경고 메시지를 받는다면 많은 사람들은 피싱 사기로 의심할 것임. 하지만 appleid.apple.com에 로그인하면 메시지의 진위를 확인할 수 있음.
     * 메타버스, 스파이웨어, AI 전쟁, 드론 등 현실이 SF 소설 뉴로맨서의 디스토피아적 미래상을 닮아가고 있음.
     * NSO Group의 Pegasus 스파이웨어를 이스라엘 정부가 방치하는 것은 불량국가의 행동과 다름없음. 구글의 안드로이드 사용자들은 더 심각할 수 있음.
     * 애플이 사용자에게 경고하는 행동 자체도 교묘한 작전의 일부일 수 있음. 대상자들의 행동 변화를 유도하고 관찰하려는 목적일 수 있기 때문.
     * Pegasus 스파이웨어는 애플 제품의 보안 결함 때문에 가능한 것일 수 있음.
     * 애플이 92개국 사용자들에게만 알린 것이 의아함. 실제로는 모든 나라에 해당될 것임.
     * 애플의 조치는 Pegasus 개발자들을 잠시 움츠러들게 하는 정도에 그칠 것임.
"
"https://news.hada.io/topic?id=14288","Show GN: GCP Cloud Functions 용 ASGI application(FastAPI, Django) adapter","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: GCP Cloud Functions 용 ASGI application(FastAPI, Django) adapter

   FastAPI 혹은 Django 같은 ASGI application을 GCP Cloud Functions 위에서 작동할 수 있도록 도와주는 도구입니다.

   AWS Lambda는 요청이 event와 context 객체로 주어지지만, Cloud Functions은 flask Request 객체로 주어지기 때문에 이 것을 ASGI 표준에 맞춰 scope, body로 변환하여 요청을 보내고, 반환 값을 다시 flask.Response 객체로 변환하여 주는 역할을 합니다.

   AWS Lambda에서 동일한 기능을 하는 mangum을 참고하여 만들었습니다.

   이제 막 대학교에 진학한 학생이라 코드에 부족한 점이 많습니다 ㅠ
   피드백 주시면 정말 감사하겠습니다 !

   Github : https://github.com/junah201/vellox
   PyPi : https://pypi.org/project/vellox

   예시 코드 :
from fastapi import FastAPI
from vellox import Vellox

app = FastAPI()

@app.get(""/"")
def read_root():
    return {""Hello"": ""World""}

vellox = Vellox(app=app, lifespan=""off"")

def handler(request):
    return vellox(request)
"
"https://news.hada.io/topic?id=14281","2023년 ACM 튜링상, Avi Wigderson 교수에게 수여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  2023년 ACM 튜링상, Avi Wigderson 교수에게 수여

     * 이론 컴퓨터 과학은 컴퓨팅 분야의 수학적 기반을 다룸. ""이 문제가 컴퓨팅을 통해 해결 가능한가?"", ""이 문제가 컴퓨팅으로 해결 가능하다면 얼마나 많은 시간과 자원이 필요한가?""와 같은 질문을 제기함. 또한 효율적인 알고리즘 설계 방법을 탐구함. 우리 삶에 영향을 미치는 모든 컴퓨팅 기술은 알고리즘으로 가능해짐. 강력하고 효율적인 알고리즘의 원리를 이해하는 것은 컴퓨터 과학뿐만 아니라 자연의 법칙에 대한 이해를 심화시킴. 이론 컴퓨터 과학은 흥미로운 지적 도전을 제시하는 분야로 알려져 있고, 종종 컴퓨팅의 실용적 응용 개선과 직접 관련되지 않지만, 이 분야의 연구 혁신은 암호학, 계산생물학, 네트워크 설계, 기계학습, 양자 컴퓨팅 등 거의 모든 분야의 발전으로 이어짐.
     * 기본적으로 컴퓨터는 결정론적 시스템임. 알고리즘의 명령어 집합을 특정 입력에 적용하면 계산이 고유하게 결정되고, 특히 출력이 결정됨. 즉, 결정론적 알고리즘은 예측 가능한 패턴을 따름. 반면에 무작위성은 잘 정의된 패턴이나 사건/결과의 예측 가능성이 부족함. 우리가 살고 있는 세계는 무작위 사건(날씨 시스템, 생물학적/양자 현상 등)으로 가득 차 있어 보이기 때문에, 컴퓨터 과학자들은 알고리즘의 효율성을 높이기 위해 계산 과정에서 무작위 선택을 할 수 있도록 알고리즘을 보강해 왔음. 실제로 효율적인 결정론적 알고리즘이 알려지지 않은 많은 문제들이 확률적 알고리즘에 의해 효율적으로 해결되었음(약간의 오류 확률을 가지고 있지만 효율적으로 감소시킬 수 있음). 그러나 무작위성이 필수적인 것인가, 아니면 제거할 수 있는 것인가?
       확률적 알고리즘의 성공을 위해 필요한 무작위성의 품질은 무엇인가?
     * 아비 비그더슨 박사는 40년 동안 이론 컴퓨터 과학 연구를 선도해 왔으며, 컴퓨팅에서 무작위성과 유사 무작위성의 역할에 대한 이해에 근본적인 공헌을 해왔음. 컴퓨터 과학자들은 무작위성과 계산 난이도(효율적인 알고리즘이 없는 자연스러운 문제 식별) 사이에 주목할 만한 연결고리를 발견했음. 비그더슨 박사는 동료들과 함께 무작위성을 위해 어려움을 거래하는 것에 대한 매우 영향력 있는 일련의 연구를 수행했음. 그들은 표준적이고 널리 믿어지는 계산 가정 하에서, 모든 확률적 다항 시간 알고리즘이 효율적으로 무작위성을 제거할 수 있음을 증명했음(즉, 완전히 결정론적으로 만들 수 있음). 다시 말해, 무작위성은 효율적인 계산에 필수적이지 않음. 이 일련의 연구는 컴퓨팅에서 무작위성의 역할에 대한 우리의 이해와 무작위성에 대한 생각
       방식을 혁신했음.

비그더슨 박사의 공헌

     * ""Hardness vs. Randomness"" (Noam Nisan과 공동 저술): 이 논문은 다른 것들 중에서도 새로운 유형의 유사 무작위 생성기를 도입했고, 이전에 알려진 것보다 훨씬 약한 가정 하에서 무작위화된 알고리즘의 효율적인 결정론적 시뮬레이션이 가능함을 증명했음.
     * ""BPP Has Subexponential Time Simulations Unless EXPTIME has Publishable Proofs"" (László Babai, Lance Fortnow, Noam Nisan과 공동 저술): 이 논문은 ""hardness amplification""을 사용하여 bounded-error probabilistic polynomial time(BPP)이 더 약한 가정 하에서 무한히 많은 입력 길이에 대해 subexponential time에서 시뮬레이션될 수 있음을 입증했음.
     * ""P = BPP if E Requires Exponential Circuits: Derandomizing the XOR Lemma"" (Russell Impagliazzo와 공동 저술): 이 논문은 본질적으로 최적의 hardness vs randomness tradeoff를 가진 더 강력한 유사 무작위 생성기를 소개했음.
     * 랜덤성과 관련된 연구를 넘어서 비그더슨 박사는 다중 증명자 대화형 증명, 암호학, 회로 복잡도 등 이론 컴퓨터 과학의 여러 다른 분야에서 지적 리더십을 발휘해 왔음.

GN⁺의 의견

     * 수학적 측면에서 랜덤성과 계산 복잡도 사이의 관계를 입증한 비그더슨의 연구는 컴퓨터 과학과 수학의 접목이란 측면에서 큰 의의가 있음. 특히 랜덤성에 의존하던 많은 알고리즘들이 사실은 결정론적으로 동일하게 구현될 수 있음을 입증한 것은 컴퓨터 과학의 새로운 지평을 연 것으로 평가됨.
     * 또한 효율성과 난해성의 관계에 대해 수학적으로 접근한 것 역시 이론 컴퓨터과학의 중요한 연구 주제가 될 것으로 보임. 난해한 문제일수록 그에 비례해 더 효율적인 알고리즘이 존재할 가능성이 있다는 것은 직관적이지 않은 통찰력임.
     * 한편 비그더슨 교수가 이론 컴퓨터 과학 분야의 발전을 위해 수학과 컴퓨터과학의 접목을 강조하고 후학을 양성하는 데에도 힘썼다는 점은 학문 후속세대를 위한 좋은 귀감이 될 것으로 보임. 특히 수학의 아벨상과 컴퓨터과학의 튜링상을 모두 수상한 경력은 이론 컴퓨터 과학의 중요성을 보여주는 상징적 사례라 할만함.

        Hacker News 의견

     * Avi Wigderson이 2023년 ACM A.M. Turing Award를 수상함. 계산 이론에 대한 기본적인 공헌, 특히 계산에서 무작위성의 역할에 대한 이해를 재구성하고 이론 컴퓨터 과학 분야에서 수십 년 간 지적 리더십을 발휘한 공로를 인정받음.
     * Wigderson은 계산복잡도 이론, 알고리즘과 최적화, 무작위성과 암호학, 병렬 및 분산 컴퓨팅, 조합론, 그래프 이론 등의 분야에서 선도적인 인물이었으며, 이론 컴퓨터 과학과 수학 및 과학 간의 연결고리 역할도 수행함.
     * Wigderson의 주요 업적 중 하나는 무작위성과 계산 난이도 사이의 놀라운 연관성을 발견한 것임. 그의 연구는 무작위성이 효율적인 계산에 반드시 필요하지 않다는 사실을 밝혀냄.
     * 2021년에는 Abel Prize도 수상하여 이론/추상 수학과 컴퓨터 과학 분야 최고 영예를 모두 거머쥔 독특한 이력을 가짐.
     * Wigderson의 책 ""Mathematics and Computation""이 최근 출간되어 호평을 받고 있음.
     * 그의 연구 결과에 따르면 어떤 명제가 증명 가능하다면 제로 지식 증명(zero-knowledge proof)도 가능하며, 유사 난수를 확률적 알고리즘에 적용하면 동일 문제에 대한 효율적인 결정적 알고리즘을 얻을 수 있다고 함. 이는 AI 등 확률적 계산 모델의 복잡도를 크게 줄일 수 있음을 시사함.
"
"https://news.hada.io/topic?id=14307","Show HN: Google 스프레드시트를 앱의 백엔드/API로 활용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show HN: Google 스프레드시트를 앱의 백엔드/API로 활용하기

Zerosheets - Google Sheets를 API로 전환하는 서비스

     * Zerosheets는 Google Sheets 스프레드시트를 강력한 API로 전환하여 프로토타입, 웹사이트, 앱 등을 빠르게 개발할 수 있게 해주는 서비스임
     * Google 계정으로 로그인하여 사용할 수 있음
     * 많은 고객사들이 Zerosheets를 신뢰하고 사용하고 있음

  RESTful JSON API

     * 개발자를 위해 설계된 API
     * Google Sheets를 RESTful API로 변환하여 간단한 HTTP 요청으로 데이터를 가져오고 조작할 수 있음
     * API 설정을 사용자 정의할 수도 있음
     * 자세한 내용은 문서를 참조

GN⁺의 의견

     * Google Sheets는 협업과 데이터 관리에 유용한 도구이지만, 외부 시스템과 연동하기에는 제약이 있었는데 Zerosheets가 이를 해결해 줌
     * 프로토타입 개발 시 백엔드 API 개발 없이 빠르게 데이터 연동을 테스트해 볼 수 있을 것으로 보임
     * 유사한 서비스로는 Sheety, SheetDB 등이 있음
     * 스프레드시트를 데이터베이스처럼 사용하는 것은 편리하지만 대용량 데이터 처리나 복잡한 관계 설정 등에는 한계가 있을 수 있으므로 용도에 맞게 사용해야 함
     * API 사용량이나 데이터 용량에 따른 가격 정책, SLA 등 구체적인 내용을 확인해볼 필요가 있음

        Hacker News 의견

     * 80-90년대 투자은행들이 엑셀 스프레드시트에 과도하게 의존하면서 발생한 ""엑셀 초보자 함정""의 현대판 버전을 조심해야 함. 스프레드시트는 범용 계산 프레임워크로 많은 작업이 가능하지만, 유지보수가 어렵고 침투하기 힘든 악몽이 될 수 있으며 비즈니스 로직이 개인 시트에 인질로 잡힐 수 있음.
     * 스타트업 Loom으로 피벗하기 전, Opentest라는 유저 테스팅 회사에서 DB 대신 구글 시트에 모든 것을 저장했는데 다운타임 없이 접근성이 좋았고 유지보수할 필요가 없어 좋았음. 진정한 민첩성이 어떤 수준에서도 지능적인 해법이 될 수 있다는 것을 깨달음.
     * script.google.com을 이용하면 구글의 모든 API에 접근할 수 있고, 시트와 Gmail, Calendar, 페이지 생성, 폼 입력 등을 통합할 수 있음. 단, 실제 데이터베이스처럼 트랜잭션 기반 작업은 불가능함.
     * Spread API(spreadapi.roombelt.com)는 구글 시트를 완전한 CRUD로 만들어주는 무료 도구임. 다만 속도 제한이 있고, 일정 수준 이상 성장하면 Turso, Cloudflare D1, Pocketbase 등으로 마이그레이션하는 것이 좋음.
     * 구글 시트를 데이터 레이어로 사용할 때는 primaryKey 열을 만들지 말고 제목 열을 사용해야 하며, 단일 스프레드시트에 여러 탭을 사용하고 셀을 시트/행/열 기준으로 상호 참조해야 함. AppScript를 사용하면 미래 개발자가 리버스 엔지니어링하는 것을 좋아할 것임.
     * Teable은 Postgres와 Airtable의 융합으로, 구글 시트보다 가용성은 낮지만 내장 대시보드가 더 많음.
     * AppsScript와 구글 시트만으로 완전한 웹앱을 만들어본 경험을 공유함. 비개발자도 쉽게 상호작용할 수 있는 데이터 저장소를 갖춘 웹앱을 서버 없이 만드는 아이디어에 이끌렸지만, AppsScript는 이런 용도로는 너무 느림.
     * PocketBase는 API 액세스와 함께 임의 데이터를 저장할 수 있는 곳으로, 구글 시트보다 할당량 제한(60rpm)이 없어 대안이 될 수 있음. CapRover로 저렴한 VPS에 쉽게 배포 가능함.
     * 성적 입력을 위해 끔찍한 웹 UI 대신 스프레드시트를 통해 데이터를 입력하고 이를 기반으로 웹 폼을 채우는 사용자 스크립트 프로젝트 아이디어를 제안함. 사용자 스크립트 컨텍스트에서 OAuth 흐름을 수행하는 것이 어려울 수 있음을 우려함.
     * 제품 사용 비용이 웹사이트에 명시되어 있지 않아 Google 계정으로 인증하는 것을 망설일 수 있음.
"
"https://news.hada.io/topic?id=14253","Microsoft는 Windows on Arm이 마침내 Apple을 이길 수 있다고 확신하고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Microsoft는 Windows on Arm이 마침내 Apple을 이길 수 있다고 확신하고 있음

Microsoft, 퀄컴과 협력하여 윈도우 온 ARM으로 애플에 도전

     * 마이크로소프트는 다음 달 시애틀 행사에서 ""AI PC""에 대한 비전을 공개할 예정임
     * 마이크로소프트는 퀄컴의 차기 스냅드래곤 X 엘리트 프로세서를 탑재한 ARM 기반 윈도우 노트북이 CPU 성능과 AI 가속 작업에서 애플 M3 맥북 에어를 능가할 것이라 확신하고 있음
     * 마이크로소프트는 퀄컴의 새 Snapdragon X Elite 칩이 Windows on ARM을 보다 적극적으로 추진하기 위해 오랫동안 찾던 성능을 제공할 것이라 믿고 있음

Windows on ARM의 앱 에뮬레이션 문제 해결의 실마리

     * 새 윈도우 AI PC는 ""Rosetta 2보다 더 빠른 앱 에뮬레이션""을 가지게 될 것
     * Windows on ARM은 지난 10년 동안 앱 에뮬레이션이 큰 문제였음
     * 마이크로소프트는 2년 전 Windows 11용 x64 앱 에뮬레이션을 제공했으며, 이는 ARM64 버전이 없을 때 앱이 Windows on ARM 디바이스에서 실행될 수 있도록 보장하는데 도움이 됨
     * 구글은 최근 이러한 차기 디바이스를 위한 자체 ARM64 버전의 Chrome을 출시함

마이크로소프트의 새로운 서피스 제품군

     * 마이크로소프트는 인텔 코어 울트라 프로세서 대신 퀄컴의 스냅드래곤 X 엘리트 프로세서를 탑재한 서피스 프로 10과 서피스 랩톱 6의 소비자 모델을 출시할 계획임
     * 마이크로소프트는 이미 인텔 코어 울트라 프로세서를 탑재한 비즈니스 중심의 서피스 프로 10과 서피스 랩톱 6 버전을 발표했지만, ARM 모델은 소비자 대상으로 마케팅될 예정임

퀄컴 스냅드래곤 X 엘리트 프로세서를 탑재한 ""차세대 AI 코파일럿 PC""

     * 마이크로소프트는 내부적으로 퀄컴 스냅드래곤 X 엘리트 프로세서를 실행하는 디바이스를 ""차세대 AI 코파일럿 PC""로 설명하며, AMD의 최신 칩이나 인텔의 코어 울트라 프로세서에서 실행되는 기존 PC와 차별화하려 함
     * 이 새로운 PC 클래스는 ""AI 탐색기"" 앱을 포함하여 새로운 AI 기반 Windows 기능에 먼저 액세스할 수 있음

마이크로소프트의 AI PC 공개 계획

     * 마이크로소프트의 대규모 AI PC 공개는 5월 20일에 열릴 예정이며, 이는 연례 Build 개발자 컨퍼런스 하루 전임
     * 마이크로소프트 CEO 사티아 나델라는 ""하드웨어와 소프트웨어 전반에 걸친 AI 비전""에 대해 이야기할 예정이며, 이는 최신 Windows on ARM 추진과 Windows 11용 AI 기능에 대한 투자의 장을 마련할 것임

GN⁺의 의견

     * 윈도우 온 ARM이 드디어 가시적인 성과를 내기 시작한 것 같아 기대가 큼. 하지만 현재 대부분의 앱이 x86 기반이기에 ARM 네이티브 앱 생태계 확충이 필수적임
     * AI 기반 기능이 윈도우 온 ARM에 먼저 적용된다는 점이 흥미로움. AI 기술을 통해 성능 및 배터리 효율성 개선이 기대됨
     * 하지만 아직 갈 길이 멀어 보임. 애플은 이미 자체 실리콘을 통해 높은 완성도를 자랑하고 있음. 마이크로소프트와 퀄컴의 협업이 얼마나 경쟁력 있는 제품을 만들어낼 수 있을지 관건
     * 게이밍 노트북까지 ARM 기반으로 출시한다는 점이 흥미롭지만, 정작 중요한 게임들의 ARM 버전 지원 여부가 관건이 될 것임
     * 결국 하드웨어의 성능도 중요하지만 마이크로소프트가 얼마나 개발자들을 설득해 ARM 네이티브 앱과 게임 생태계를 확충하느냐가 승부처가 될 것으로 보임

   정말 기대하고있어요
   40tops 정도 나온다고 발표했는데 이게 휴대 가능한 랩탑에서 가능한 추론 능력인지 ㄷㄷ

   앱등이랑 x86사용자에게 먹히는 소리일까?
   앱등이들은 그렇다 쳐도 x86사용자들의 ARM으로 작성된 어플리케이션이 아닌 기존 x86/AMD64 어플리케이션의 완벽한 호환을 제공해줄거냐는 말.

   이게 닭이 먼저냐 달걀이 먼저냐 같은거긴 한데, WoA이 본 궤도에 올라오면 많은 앱들이 ARM 네이티브로 나올겁니다. 그리고 이미 메이저앱들은 많이들 ARM 네이티브로 나오고 있고(https://armrepo.ver.lt/), x86의 대부분의 앱들도 문제없이 에뮬레이션 되고 있습니다. WoA가 Windows 10 시절보다 11로 넘어오면서 비약적으로 좋아졌어요. 제가 지금 Snapdragon 8cx gen3 를 주로 사용하는데 최근에 정말 많이 느낍니다.

   씽크패드 x13s 쓰시나요? 저는 surface pro x 썼었는데 개인적으로 좋은 경험이었습니다.

   저는 Windows Devkit 2023 씁니다! WoA를 쓰셨다니 반갑습니다 ㅋㅋ

   윈도우즈 볼테라 그거인가요...?
   와우... 한국에서도 쓰시는 분들이 있군요ㄷㄷ

   랩탑에 가장 중요한게 전성비인데 그 얘기는 없구만,,

   언급이 없어서 저도 좀 의아하긴 했는데, 많이 개선되어서 제품에 녹여내지 않을까 싶습니다. 막상 나왔는데 별로면 안사도 되니까요~ㅎㅎ

   전성비는 surface pro x / 8,9 5G모델로도 충분히 검증이 되어있다 생각이 드네요
   이미 기존에 나온 windows arm도 전성비는 좋았어요 비교군이 애플실리콘이어서 그랬지만...

   ARM 채택하는 이유가 애초에 전성비니까 이야기 할 필요가 없죠. 배경을 설명드리면, x86이 전성비가 너무 안나오다보니까 Windows 진영도 ARM을 채택할 필요가 있었는데, 이때까지는 성능좋은 랩탑용 ARM 프로세서가 애플실리콘 밖에 없어서 Windows on ARM이 영 힘을 못쓰고 있었는데 드디어 이번에 snapdragon X elite가 나와서 기대하고 있다는 겁니다.

   그런 이유로 ARM을 채택한 것은 알고 있는데
   정작 기사에 배터리 타임 언급이 한 줄도 없으니 이상해서요.

   그러고보니 그러네요. 전성비가 대전제이니 그걸 한 번 짚어줘도 될듯한데.
"
"https://news.hada.io/topic?id=14297","Vortex - OpenCL 호환 가능한 RISC-V 아키텍처 기반의 풀스택 오픈소스 GPGPU","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Vortex - OpenCL 호환 가능한 RISC-V 아키텍처 기반의 풀스택 오픈소스 GPGPU

     * RISC-V ISA 확장을 기반으로 GPGPU를 지원하는 오픈 소스 하드웨어 및 소프트웨어 프로젝트
     * 현재는 OpenCL 1.2를 지원하며 FPGA에서 실행됨
     * RISC-V RV32IMAF 와 RV64IMAFD 지원
     * GPU 아키텍처 연구를 가능하게 하는 완전한 오픈 소스 컴파일러, 드라이버 및 런타임 소프트웨어 스택을 갖추고 있으며 높은 수준의 사용자 정의 및 확장성을 제공

GN⁺의 의견

     * Vortex는 RISC-V 기반의 오픈소스 GPGPU 프로젝트로, 향후 GPU 컴퓨팅 연구에 활용될 가능성이 높아 보임. RISC-V 아키텍처가 점점 주목받고 있는 상황에서 관심있게 지켜볼만한 프로젝트임
     * 현재는 FPGA 기반이지만, 추후 실리콘 칩으로 구현된다면 엔비디아나 AMD 같은 상용 GPU에 대항할 수 있는 대안이 될 수 있을 것으로 기대됨
     * 오픈소스 하드웨어 진영에서 GPU 프로젝트는 아직 많지 않은데, Vortex가 그 물꼬를 틀 수 있을지 주목됨. 다만 오픈소스 GPU가 상용 GPU 수준으로 발전하려면 넘어야 할 산이 많을 것으로 보임
     * Vortex 홈페이지에 공개된 논문들을 보면 Vortex 플랫폼을 활용해 그래픽 렌더링, 멀티코어 확장 등 다양한 연구를 수행하고 있음. 추후 연구 성과들이 Vortex 프로젝트에 반영되면서 지속적으로 발전해 나갈 것으로 예상됨

  Hacker News 의견

     * OpenCL의 현재 상황:
          + AMD와 Intel은 OpenCL에서 ROCm, DPC++ 등 다른 GPGPU 언어로 전환 중인 것으로 보임
          + 그럼에도 불구하고 OpenCL은 최고의 컴퓨팅 API라는 의견도 있음
     * GPU 컴퓨팅의 현 상황이 매우 복잡함:
          + OpenGL, OpenCL: 널리 지원되나 최신 성능은 부족
          + Vulkan, Metal, DirectX: 최신 그래픽 API로 좋은 드라이버 지원과 성능을 가짐
          + CUDA, HIP: 사유 API로 CUDA는 NVIDIA GPU만, HIP은 AMD GPU도 지원
          + SYCL: 이기종 컴퓨팅 프레임워크로 OpenCL/Vulkan 등의 코드 생성 가능
          + WebGPU: 다양한 구현체가 있는 웹 표준
     * 향후 5~10년 내 오픈소스 기반의 프로세서와 소프트웨어 발전에 대한 기대감이 있음
"
"https://news.hada.io/topic?id=14261","Windows 98 설치 프로그램의 일부가 나머지보다 오래된 것처럼 보이는 이유 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Windows 98 설치 프로그램의 일부가 나머지보다 오래된 것처럼 보이는 이유 (2020)

Windows 98 설치 프로그램의 일부가 나머지 부분보다 오래된 것 같아 보이는 이유

     * Windows 98의 설치 과정은 크게 3단계로 나뉘며, 각 단계는 서로 다른 운영 환경에서 실행됨
          + 첫 번째 단계는 설치 디스켓이나 CD-ROM에서 실행되며, DOS 프로그램(DOSSETUP.BIN)을 사용하여 디스크 파티션을 설정하고 여러 검사를 수행함
          + 첫 번째 단계는 Windows 3.1의 최소 버전을 설치 대상 드라이브의 임시 디렉토리(보통 WININST0.400)에 복사하면서 끝남. 여기에는 DOSX.EXE, USER.EXE, GDI.EXE, KRNL386.EXE, LZEXPAND.DLL 등이 포함됨(MINI.CAB 참조)
          + 두 번째 단계는 이 최소한의 Windows 3.1을 사용하여 Windows 3 프로그램인 W98SETUP.BIN을 실행함(SYSTEM.INI에서 ""shell""로 지정됨)
               o 이는 설치 중 정보 수집을 지원하기 위한 추가 파일을 복사하는 것으로 시작하며, 스크린샷에 보이는 3D 모양 등 여러 멋진 기능(PRECOPY CAB의 내용)이 포함됨
               o 대부분의 Windows 98을 복사하고, 시스템이 대상 드라이브에서 Windows 98을 부팅하도록 설정한 다음 재부팅하면서 끝남
          + 세 번째 단계는 Windows 98으로 첫 번째 부팅 후 Windows 98에서 실행됨
     * Windows 98이 사전 설치된 많은 PC는 위의 두 번째 단계 끝 부분의 변형된 상태로 출시되었음
          + 세 번째 단계는 ""Windows 98을 처음 시작하는 중"" 메시지로 시작하고 사용자 이름과 회사 이름을 묻는 것으로 이어짐
          + 따라서 PC 구매자는 사전 설치된 시스템을 받았지만 개인화할 준비가 되어 있었음
     * 설치 중 언제든지 중단하거나 에뮬레이터에서 설치 중 이미지를 검사하여 디스크에 무엇이 있는지 확인하고 런타임 환경을 결정할 수 있음
     * 위의 환경 중 어디에서든 설치 프로세스를 시작할 수 있으며, 이를 통해 Windows 98은 업그레이드(MS-DOS, Windows 3 또는 Windows 95에서)를 처리함

GN⁺의 의견

     * Windows 98의 설치 과정이 Windows 3.1의 최소 버전을 사용하는 것은 흥미롭지만, 이는 리소스 제약 때문에 어쩔 수 없는 선택으로 보임
     * 당시 플로피 디스크로는 OS, 설치 프로그램, 데이터 전체를 담을 수 없었기에 이러한 구조로 설치 과정을 분리한 것으로 보임
     * 사용자 환경 일관성의 중요성은 인식했지만, 기술적 한계로 인해 완벽히 구현하긴 어려웠던 것 같음. Windows 3.x와 유사한 UI를 만들어 친숙함을 주려 노력한 점은 높이 평가할만함
     * 90년대 후반에도 아직 GUI 기반 OS를 처음부터 끝까지 일관되게 만드는 것이 쉽지 않았음을 보여주는 사례임
     * 요즘은 설치 과정에서 하드웨어를 자동 인식하고 OS 이미지를 그대로 복사하는 방식을 많이 사용하지만, 당시는 여러 단계로 쪼개서 순차적으로 OS를 구축해나가는 방식을 사용할 수밖에 없었음
"
"https://news.hada.io/topic?id=14265","OpenAI, GPT-4 Turbo with Vision 일반 공개(GA)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               OpenAI, GPT-4 Turbo with Vision 일반 공개(GA)

     * 이제 gpt-4-turbo 가 최신 비전 포함 모델인 gpt-4-turbo-2024-04-09를 지칭
     * 비전 모델에서 JSON 및 함수 기능도 지원 시작 (이미지에서 구조화된 형태로 정보 추출 가능)
     * 특히 수학 에서 기존 모델보다 훨씬 향상

   GPT-4 Turbo with Vision is a step backwards for coding

   Aider에 의하면 코딩에서는 기존 모델보다 안좋다고 합니다.
   특히나 ""Lazy Coding"" 이 너무 많이 일어나서, 벤치마크시에 코드를 누락하는 일이 훨씬 많아 졌다고

   새로운 모델이 나올수록 게을러지는 AI...
   이것도 현실을 반영한걸까요. @_@
"
"https://news.hada.io/topic?id=14321","자폐증을 앓고 자란 일란성 쌍둥이의 서로 다른 길","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      자폐증을 앓고 자란 일란성 쌍둥이의 서로 다른 길

오티즘을 가진 일란성 쌍둥이의 성장 과정이 매우 달라질 수 있음

     * 샘과 존 페터스는 19세 일란성 쌍둥이 형제로, 오티즘 스펙트럼의 반대편 끝에 위치함
          + 샘은 역사와 정치학을 복수전공하고 마라톤을 뛰는 암허스트 대학 2학년생
          + 존은 특수학교에 다니며 문장 만들기를 어려워하고, 텔레토비와 세서미 스트리트를 좋아함
     * 같은 유전자를 가진 형제지만 오티즘의 다른 유형을 보임
          + 오티즘은 유전적 요인이 큰데, 동일한 유전체를 가진 쌍둥이에서 어떻게 이렇게 달라질 수 있는지가 연구자들이 풀어야 할 수수께끼임
          + 이를 해결하면 자폐증의 본성과 양육의 이상한 혼합을 설명하고, 언어 및 사회적 의사소통에 어려움을 겪는 자폐아동의 궤적을 수정하는 데 도움될 수 있음

일란성 쌍둥이 연구가 자폐증 이해에 중요한 역할을 해 옴

     * 1970년대 이후 일란성 쌍둥이 연구는 자폐증 이해에 중요한 역할을 해왔음
          + 초기 쌍둥이 연구는 자폐증이 양육에 의해 유발된다는 이론, 특히 엄마가 차갑고 거리감이 있어서 그렇다는 이론을 반박하는 데 도움을 줌
          + 자폐증은 양육이 아니라 유전적 요인에 의한 것임을 보여줌
     * 2019년 366쌍의 일란성 쌍둥이 연구는 자폐증 연구에 또 한번 변화를 가져옴
          + 자폐증이 있는 일란성 쌍둥이의 경우 다른 한 명도 90% 확률로 자폐증을 가짐을 재확인함
          + 그러나 쌍둥이 간에 자폐증의 심각도 수준이 매우 달랐음
          + 이는 자폐증 증상이 수정 후 일어나는 사건들에 의해 크게 영향을 받을 수 있음을 시사함
               o 태아 세포의 분열 과정의 돌연변이나 특정 유전자 스위치 on/off, 임신 및 생후 초기 경험의 차이 등이 영향을 미쳤을 수 있음

샘과 존의 성장 과정이 달라진 요인

     * 샘과 존은 어릴 때 모두 말을 하지 않고, 자신의 이름에 반응하지 않으며, 반복적 행동을 많이 보이는 등 매우 유사했음
     * 2세 때 둘 다 말을 하지 않아 조기 중재 학교에 보냈는데, 샘은 말을 하기 시작했지만 존은 4살이 돼서야 단어를 사용하기 시작함
     * 샘은 토마스 기차에 열광했다가 다른 열정으로 옮겨갔지만, 존은 계속 세서미 스트리트에 열정적이었음
     * 샘과 존은 탈장과 심장 구멍이라는 해부학적 이상으로 수술이 필요했음. 샘은 5살 때 탈장 수술을, 존은 아기 때 심장 수술을 받음.
          + 존은 수술 후 항생제 내성 포도상구균 감염이 생겨 한 달간 강력한 항생제 치료를 받아야 했음
          + 이 경험이 존의 자폐증 경과에 영향을 미쳤을 가능성은 알 수 없음

샘이 존을 대변하고 보호하는 역할을 해 옴

     * 자폐증이 있는 쌍둥이는 서로 특별한 관계를 갖는 경향이 있음. 한 명이 의사소통에 어려움이 있으면 다른 한 명이 도와주는 식임
     * 샘은 어릴 때부터 존을 보호해 왔음. 같은 학교에 다닐 때 존이 소리지르며 몰두할 때면 교실을 뛰쳐나와 존을 도우러 갔음
     * 샘은 대학에 가서도 존을 걱정함. 존은 제한된 언어 능력과 팔을 휘두르는 행동 때문에 모욕과 조롱의 대상이 될 수 있기 때문
     * 샘은 존에게도 자신처럼 말을 할 수 있게 되기를 바람. 샘은 존의 자폐증이 그의 머릿속에 있는 놀랍고 창의적인 세계의 일부라고 생각하지만, 말을 하지 못하는 게 불공평하다고 여김
     * 샘은 앞으로도 존을 대변하는 역할을 해 나갈 계획임

GN⁺의 의견

     * 자폐증은 그 원인과 증상의 다양성 때문에 아직도 베일에 쌓여 있는 신경발달장애임. 일란성 쌍둥이 연구는 자폐증의 유전적 요인과 환경적 요인을 이해하는 데 중요한 통찰을 제공함.
     * 샘과 존의 사례는 초기 중재의 중요성을 잘 보여줌. 같은 유전자를 갖고 있어도 개인의 경험과 환경에 따라 자폐증의 경과가 달라질 수 있기에, 조기에 적절한 치료와 교육을 제공하는 게 중요함.
     * 형제자매 관계는 자폐증을 가진 아동의 발달에 중요한 영향을 미칠 수 있음. 샘처럼 자폐증이 경미한 형제가 심한 쪽을 보호하고 옹호하는 역할을 하는 게 도움이 될 수 있겠지만, 그로 인한 스트레스와 부담감도 간과해선 안 될 것임.
     * 이 기사는 자폐증에 대한 사회적 인식 개선과 지원 확대의 필요성도 시사하고 있음. 자폐증을 가진 사람들이 세상에 적응하고 잠재력을 발휘하기 위해서는 그들을 이해하고 포용하려는 사회적 노력이 필수적임.

        Hacker News 의견

   요약해보겠습니다:
     * 쌍둥이 형제가 모두 자폐증을 가지고 있지만, 한 명은 다른 한 명보다 더 심각한 증상을 보이는데 그 이유를 설명하기 어려움
          + 수술이나 항생제 사용 등 어릴 때 겪은 차이점이 증상의 차이를 만들었을 수 있음
          + 심장 수술 과정에서 발생한 유리 라디칼이 뇌에 손상을 주어 자폐 증상에 영향을 미쳤을 가능성
          + 장-뇌 축을 통해 자폐증이 조절될 수 있다는 이론과 연관 가능성
     * 쌍둥이 형제의 얼굴 주름의 차이를 통해 의사소통 방식의 차이를 알 수 있음
     * 어린 시절 병원 입원 경험이 사회적 상호작용 학습 기회를 제한하여 자폐 증상에 영향을 미쳤을 것
     * 유전적 원인 규명을 위해서는 쌍둥이의 유전자 서열 비교 분석이 필요함
     * 형제 간 의사소통 방식의 차이에도 불구하고 서로 깊은 사랑과 이해심을 보여줌
     * 자폐증을 가진 사람은 특정 영역에 몰두하는 경향이 있으며, 이것이 유용한 영역이라면 강점이 될 수 있음
"
"https://news.hada.io/topic?id=14291","해킹된 Nvidia 4090 GPU 드라이버, P2P 활성화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   해킹된 Nvidia 4090 GPU 드라이버, P2P 활성화

NVIDIA Linux Open GPU 드라이버에 P2P 지원 추가

   이 프로젝트는 NVIDIA 드라이버를 포크해서 4090 GPU에 P2P 지원을 추가한 것임.
     * ./install.sh 실행으로 간단히 설치 가능
     * DKMS에서 기존 드라이버를 먼저 제거해야 할 수 있음
     * 시스템에 Large BAR 지원이 필요하고 IOMMU는 꺼야 함
     * 모든 캐시 플러시가 올바른지는 확신할 수 없으므로, 이슈 발견 시 제보 바람
     * 이는 해킹이 아니라 PCIe 스펙에 맞게 구현한 것이며, 정리만 잘하면 업스트림에 반영될 수 있을 것임

  동작 원리

    기존 NVIDIA P2P의 문제점

     * 기존에는 MAILBOXP2P라는 하드웨어 인터페이스를 사용해서 GPU간 메모리 전송을 했음
     * 4090에서는 이 하드웨어가 없거나 비활성화되어 있어서 P2P가 동작하지 않음
     * 초기 드라이버에서는 잘못 동작한다고 보고했지만, 실제로는 PCIe 버스로 전송하고 있었음
     * 그러나 메일박스 하드웨어가 없어서 복사한 내용이 올바른 곳으로 가지 않았고, 시스템 크래시를 일으킬 수 있었음

    Large BAR 지원 추가

     * 일부 3090과 모든 4090에서 NVIDIA가 Large BAR 지원을 추가함
     * H100에서는 메일박스 대신 BAR을 직접 사용하는 BAR1P2P라는 PCIe 모드를 추가함
     * 4090에서 이를 활성화하려면 HAL을 우회하고 GH100 메서드를 직접 호출해야 함
          + kbusEnableStaticBar1Mapping_GH100 같은 메서드로 전체 VRAM을 BAR1에 매핑
          + MapAperture 함수에서 해당 영역 사용을 비활성화해야 했음

    P2P 활성화의 어려움

     * VRAM 매핑 후에도 cuda-samples의 ./simpleP2P 실행 시 MMU 오류 발생
          + GMMU_APERTURE_PEER를 매핑 타입으로 사용하는데 4090에서 지원되지 않음
          + 4090에서 지원되는 타입은 GMMU_APERTURE_VIDEO, GMMU_APERTURE_SYS_NONCOH, GMMU_APERTURE_SYS_COH 뿐
     * GMMU_APERTURE_PEER를 GMMU_APERTURE_SYS_NONCOH로 변경
          + CPU L2 캐시와 일관성은 필요없지만 PCIe 버스로 나가야 하므로
     * 피어 주소 필드인 fldAddrPeer를 fldAddrSysmem으로 변경
     * fabricBaseAddress 필드에 BAR1 기준 주소를 설정

  동작 확인

     * ./simpleP2P 정상 동작 확인
          + GPU0와 GPU1 사이에 24GB/s 속도로 P2P 동작
     * p2pBandwidthLatencyTest로 양방향 대역폭 확인
          + 920GB/s의 로컬 대역폭과 51GB/s의 P2P 대역폭 측정됨
     * NCCL 테스트로 호환성 확인
          + 6개 4090 GPU로 24.5GB/s의 평균 버스 대역폭 달성

GN⁺의 의견

     * NVIDIA 드라이버의 대부분이 오픈소스로 공개되어 있어 개발자 커뮤니티에서 이런 시도를 할 수 있었던 것 같음. 앞으로도 더 많은 부분이 오픈소스화 되길 기대해 봄.
     * 4090의 강력한 성능을 여러대 연결해서 활용할 수 있게 되면, 개인 개발자나 소규모 랩에서도 거대 규모의 AI 모델을 학습시킬 수 있게 될 것임.
     * 하지만 이렇게 하드웨어 의존적이고 까다로운 부분을 개발자가 직접 만질 수 밖에 없다는 건, NVIDIA가 아직 4090 지원을 완전히 끝내지 못했다는 반증이기도 함.
     * 또한 이는 Linux 드라이버에 한정된 얘기고, Windows에서의 상용 활용은 아직 요원해 보임. NVIDIA의 공식적인 지원이 하루빨리 이뤄지길 바람.
     * 아무래도 4090이 워낙 최신 하드웨어다보니 CUDA, PyTorch, Tensorflow 같은 라이브러리나 ML 프레임워크의 완벽한 호환성을 기대하긴 어려울 것 같음. 안정화 될 때까지 기다려봐야 할 듯.
"
"https://news.hada.io/topic?id=14249","소셜 미디어, 청소년 정신질환 유행의 원인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        소셜 미디어, 청소년 정신질환 유행의 원인

틴에이저 정신 건강 악화의 주요 원인으로서의 소셜 미디어

  Nature에 실린 리뷰의 두 가지 주요 문제점

     * Candice Odgers는 최근 Nature에 실린 에세이에서 소셜 미디어 회의론자들의 입장을 피력함.
     * 주요 비판은 저자가 상관관계를 인과관계로 오해했다는 것이며, 소셜미디어가 정신건강 위기의 원인이 아닌 단순 상관관계일 뿐이라고 주장함
     * 하지만 Odgers의 리뷰에는 두 가지 주요 문제점이 있음:
         1. 인과관계에 대한 증거가 없다는 주장이 틀림
         2. Odgers가 제시한 대안적 설명은 사실관계에 부합하지 않음

    1. 인과관계에 대한 증거 부재 주장의 오류

     * Odgers는 저자가 상관관계와 인과관계를 혼동하고 있다고 하지만, 이는 사실이 아님
     * 2018년 당시에는 상관관계 연구가 많았지만, 실험 연구도 일부 있었음 (예: 소셜미디어 사용 감소시 정신건강 개선)
     * 이후 상관관계, 종단, 실험 연구 등을 모두 모아 정리했고, 이는 온라인에 모두 공개되어 있음
     * 상관관계와 종단 연구에서는 소셜미디어 과사용자의 정신질환 위험이 높게 나타남
          + 14세 여아의 경우 하루 5시간 이상 사용 시 우울증 위험이 3배
          + 26개 연구 메타분석 결과, 청소년은 소셜미디어 사용 1시간 증가마다 우울증 위험 13% 증가
     * 22개 실험 연구 중 16개에서 소셜미디어의 부정적 영향이 유의하게 나타남
          + 성인 2743명을 1개월간 페이스북 비활성화 조건에 무작위 배정한 결과, 주관적 행복감 개선
          + 642명을 (1)소셜미디어 하루 30분 제한 (2)신체활동 30분 증가 (3)둘 다 (4)통제집단으로 무작위 배정 결과, 소셜미디어 제한+운동 병행 조건에서 우울감 감소, 삶의 만족도 증가 최대
          + 인스타그램이 페이스북보다 여성에게 더 해롭다는 실험 결과도 존재
     * 9개 준실험 연구 중 8개에서 정신건강에 대한 부정적 영향 발견 (특히 여아에게)
          + 스페인에 광대역 인터넷이 도입되면서 청소년 정신건강 입원율이 증가했는데, 이는 여아에게만 유의했음
     * 회의론자들의 주장대로 귀무가설이 맞다면 실험 결과는 무작위 노이즈여야 하지만, 대부분 일관되게 정신건강 악화 효과를 보임

    2. Odgers가 제안한 대안 설명의 문제점

     * Odgers는 정신건강 위기의 실제 원인이 인종차별, 성차별, 경제적 어려움 등 사회 병폐이며, 2008년 금융위기의 장기적 영향일 수 있다고 주장
     * 하지만 이는 사실관계에 부합하지 않음:
          + 2000년대에는 불안/우울증 비율이 대체로 일정했다가 2012년 급증했는데, 금융위기 이후 4년이 지나서야 발생한 이유를 설명하지 못함
          + 캐나다, 영국, 호주, 뉴질랜드 등 다른 앵글로권 국가에서도 비슷한 시기에 급증한 것을 설명하지 못함
          + 북유럽 국가들에서도 비슷한 시기에 급증했는데, 이들은 Odgers가 제시한 사회병리 대부분이 없음
          + 서유럽 상당수 국가에서도 마찬가지 현상이 발견됨
          + 영미권 전역에서 Z세대 여아(남아 제외)의 자살률이 사상 최고치인데, 이는 Odgers 이론으로 설명되지 않음
     * 만약 Odgers의 설명이 맞다면, 저소득층 청소년의 정신질환 증가폭이 더 컸어야 함
          + 하지만 실제로는 소득수준에 따른 차이가 관찰되지 않았고, 오히려 고소득층 청소년에서 더 큰 증가세를 보임
     * 즉 Odgers의 대안 설명은 (A)미국 내 시기상 맞지 않고 (B)계층별 데이터와 맞지 않으며 (C)국제적 현상을 설명하지 못함

  이제 무엇을 해야 하나?

     * 부모, 교사, 입법자들은 불안과 고통의 수준이 계속 높아지는 상황에서 더 이상 기다릴 수 없음
     * Odgers의 인과이론을 받아들인다면 사회문제 해결이 우선되어야 하지만, 효과가 나타나려면 수십년이 걸릴 수 있음
     * 반면 내 ""아동기의 대재배선"" 이론을 받아들인다면 구체적 정책 대안을 당장 시행 가능:
         1. 고등학교 전까지는 스마트폰 사용 자제 (법이 아닌 규범으로)
         2. 16세 전까지 소셜미디어 사용 자제 (규범과 함께 COPPA 개정안, 아동 온라인 안전법 등의 지원 필요)
         3. 학교에서 휴대폰 사용 금지 (사물함이나 파우치 사용)
         4. 현실에서의 독립성, 자유놀이, 책임감 증진
     * 이 개혁안은 초중학생 시기를 보호한다는 점에서 중요. 비용이 거의 들지 않고 초당적 지지도 얻을 수 있음.
     * 설사 내가 틀렸더라도 아이들에게 돌이킬 수 없는 해를 끼치지는 않을 것임. 수업에 집중하고 밖에서 노는 시간이 늘어날 뿐.

GN⁺의 의견

     * 이 주제에 대해서는 아직도 많은 논쟁이 있는 것 같습니다. 소셜미디어의 영향을 완전히 부정하는 건 어려워 보이지만, 다른 요인들의 복합적 작용일 가능성도 있죠.
     * 그래도 현 시점에서는 가장 설득력 있고 실행가능한 대안을 모색할 필요가 있다고 봅니다. 아이들의 정신건강 문제가 심각한 수준이라는 건 분명해 보이거든요.
     * 사회 전반의 변화를 기다리기엔 너무 오래 걸리죠. 당장 교육 현장에서, 가정에서 실천할 수 있는 규범을 만들어가는 게 우선일 듯 싶네요.
     * 다만 무조건 규제만으론 한계가 있겠죠. Z세대 아이들이 왜 그렇게 소셜미디어에 빠져드는지, 어떤 욕구를 충족하려는 건지 등에 대한 심층적 이해가 필요할 거예요.
     * 또 기성세대와의 소통, 아이들의 자발적 동참을 이끌어내는 것도 관건일 듯합니다. 금지나 제재 일변도로 가면 반발만 살 수 있으니까요.
     * 장기적으론 기술 기업들의 서비스 설계 방식이나, 사회 전반의 인식 개선 등도 뒷받침되어야 할 것 같네요. 개인과 가정의 노력만으로는 부족할 테니까요.

        Hacker News 의견

   핵심 내용을 요약하면 다음과 같음:
     * 20대 중반의 여동생이 최근 몇 년간 점점 고립되어 가며 대부분의 시간을 휴대폰으로 보내고 성형 수술을 하는 등 이상한 행동을 보임. 과거 경험이 이런 행동에 영향을 미치고 있을 수 있지만, 자의식이 부족하면 인플루언서들이 선전하는 것에 쉽게 빠질 수 있음.
     * 30년 전 대법원은 인터넷 검열이 표현의 자유를 억압할 수 있다고 판결했음. FB, IG, TikTok 등이 마음에 들지 않는다면 사용하지 않으면 됨. 그러나 검열을 주장하는 사람들은 개인적인 부모의 결정을 전국의 결정으로 만들려고 함.
     * 기술과 많은 것들이 원격으로 이루어지면서 대인관계를 맺기가 점점 어려워지고 있음. 우울증 경험에 비추어볼 때 자연 속에서 보내는 시간이 정신건강에 좋다고 믿음.
     * 정부가 아동의 소셜미디어 사용을 금지하려면 중국의 방화벽처럼 인터넷 익명성을 완전히 파괴해야 함. 반쪽짜리 정책은 오히려 더 나쁨. 타협점은 앱스토어를 통해 시행하는 것이지만, 사이드로딩 능력을 잃는 것은 유감스러움.
     * 10대 시절 인터넷 광대역에 무제한 접속했지만 인스타그램 같은 비교지옥은 없었음. 부모의 스마트폰 중독을 보면서 아이들은 위선을 알아챔.
     * 소셜미디어 금지나 제한이 상황을 개선시킨다는 인과관계나 증거가 부족함. 오히려 경제적, 교육적, 사회적 피해만 있을 수 있음.
     * 중독적인 무한스크롤 플랫폼에 규제가 필요함. ""중독성 플랫폼에 있고 휴식이 정신건강에 좋다""는 메시지를 보여주는 것은 쉽게 입법화할 수 있고 효과적일 수 있음.
     * 80-90년대 쇼핑몰 문화가 스마트폰으로 쇠퇴했다가 요즘 젊은 세대에 의해 다시 번성하고 있음. 이는 청소년들이 휴대폰에서 벗어나 친구들과 어울리는 희망적인 모습을 보여줌.
"
"https://news.hada.io/topic?id=14252","Meta, 차세대 학습 및 추론 가속기 MTIAv2 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Meta, 차세대 학습 및 추론 가속기 MTIAv2 공개

   Meta가 지난 해 공개한, 자체 개발한 AI 추론 가속기인 MTIA(Meta Training and Inference Accelerator) v1의 차세대 버전 MTIAv2를 공개하였습니다. MTIA는 Meta의 AI 워크로드, 특히 제품 전반에 걸쳐 다양한 경험을 개선하는 딥러닝 추천 모델을 위해 설계된 칩입니다. AI 워크로드가 Meta의 제품과 서비스에서 점점 더 중요해짐에 따라, MTIA의 효율성 향상은 전 세계 사용자들에게 최상의 경험을 제공하는 능력을 개선시킬 것으로 보입니다.

   이 차세대 MTIAv2 칩은 4개의 주요 모델에서 1세대 칩 대비 성능이 이미 3배 향상된 것으로 나타났습니다. 플랫폼 수준에서는 2배의 디바이스 수와 강력한 2소켓 CPU를 통해 1세대 MTIA 시스템 대비 6배의 모델 서빙 처리량과 1.5배의 성능/와트 향상을 달성할 수 있었습니다. 상용 GPU와 비교했을 때, Meta 고유의 워크로드에 대해 최적의 성능과 효율성을 제공하는 데 있어 MTIA가 매우 상호 보완적인 역할을 하는 것으로 입증되고 있습니다.

  MTIAv2의 주요 특징

   MTIAv2의 주요 특징은 다음과 같습니다:
     * 이전 세대 대비 컴퓨팅 성능과 메모리 대역폭이 2배 이상 향상
     * 랭킹 및 추천 모델을 효율적으로 처리하도록 설계
     * 8x8 그리드의 처리 요소(PE)로 구성, 밀집 컴퓨팅 성능 3.5배, 희소 컴퓨팅 성능 7배 개선
     * 로컬 PE 스토리지 3배, 온칩 SRAM 2배 및 대역폭 3.5배 증가, LPDDR5 용량 2배
     * 개선된 NoC(Network on Chip) 아키텍처로 대역폭 2배, 낮은 지연 시간으로 PE 간 조정 가능

   ⚠️광고⚠️ 파이토치 한국어 커뮤니티에서 동일한 글 보기
     * https://discuss.pytorch.kr/t/meta-mtiav2/4042
"
"https://news.hada.io/topic?id=14239","데비안 취약한 키 취약점에 걸려 넘어진 사연","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        데비안 취약한 키 취약점에 걸려 넘어진 사연

데비안 취약한 키 취약점에 걸리고 말았던 이야기

     * 2008년 3월, 저자는 Engine Yard(EY)에서 일하고 있었음
     * 당시 EY는 GitHub에 무료로 인프라를 제공하며 도와주고 있었음
     * GitHub가 성장하면서 SSH 로그인 시간이 느려지는 문제가 발생함
     * GitHub는 표준 방식인 ~/.ssh/authorized_keys 파일을 사용하여 SSH 키를 관리하고 있었음
     * SSH는 사용자가 연결할 때 이 파일을 열어 사용자가 제시한 키와 일치하는 키를 선형 검색함
     * 보통은 몇 개의 키만 있어서 문제가 되지 않지만, GitHub처럼 사용자가 많아지면 느려짐

authorized_keys 파일 대신 MySQL DB 사용 결정

     * 여러 대안을 검토한 끝에 OpenSSH를 패치하여 키 검색을 MySQL DB에서 하도록 변경하기로 함
     * 이는 신중한 결정이었으며, 보안을 해치지 않도록 많은 노력을 기울임
     * 2008년 4월 초에 적용하여 SSH 로그인 속도 문제를 해결함

이상한 일 발생

     * 한 달 뒤인 5월 초, 일부 사용자가 다른 사용자의 저장소에 SSH로 접근할 수 있게 되는 문제 발생
     * 조사 결과, 서로 다른 사용자들이 동일한 키 지문을 가진 키를 사용하고 있었음
     * 이는 키를 공유하지 않는 한 일어날 수 없는 일임
     * 사용자들은 서로 모른다고 하며 어떻게 키가 유출되었는지 알 수 없다고 함
     * 다른 사용자 쌍에서도 동일한 문제가 발견됨
     * 공통점은 모두 Debian이나 Ubuntu 시스템을 사용하고 있다는 것뿐이었음

원인 규명

     * 2008년 5월 13일, DSA-1571-1 공개로 모든 것이 명확해짐
     * Debian 메인테이너가 OpenSSL의 난수 생성 코드를 정리하면서 실수로 가능한 키의 수를 32,000개 정도로 줄여버림
     * 많은 사람들이 GitHub에 가입하면서 모범사례에 따라 새 키를 생성했고, 이로 인해 충돌이 발생한 것
     * 이후 저자는 알려진 취약한 키들을 활용하여 문제가 있는 인증기관을 찾는 등 이 문제와 더 많은 연관을 가지게 됨

GN⁺의 의견

     * 이렇게 중요한 취약점을 찾아내려면 '이상하다'는 생각을 하고 끈질기게 조사할 수 있는 시간과 에너지가 필요함. 보통은 그런 여유가 없기 때문에 운이 좋아야 함.
     * 대부분의 사람들은 바쁜 일상에 쫓겨 문제의 근본 원인까지 캐내기 어려움. 우리 업계가 이런 여유를 되찾는 것이 중요한 숙제라고 봄.
     * OpenSSL은 가장 널리 쓰이는 암호화 라이브러리 중 하나라서 이런 취약점의 영향이 매우 큼. 오픈소스의 장점이자 단점이 여기서 잘 드러남.
     * 이런 취약점을 예방하려면 코드 리뷰와 보안 감사를 강화하고, 중요한 부분의 변경은 더 신중하게 검토해야 함. 하지만 완벽한 방법은 없음.
     * 그럼에도 오픈소스는 전문가들이 직접 코드를 살펴 문제를 찾아낼 수 있다는 장점이 있음. 폐쇄적인 프로그램은 그것도 불가능함.

        Hacker News 의견

     * Luciano Bello는 우연히 CVE-2008-0166 취약점을 발견했는데, 당시 IRC 로그에 따르면 많은 소수가 필요했고 매번 같은 숫자를 얻은 것은 아니었음
     * 업계 전반적으로 운이 좋았던 것 같은데, 적시에 큰 차이를 만들 수 있는 기술과 시간, 에너지를 가진 사람이 있었기 때문임. 이는 ""많은 눈""과 ""햇볕이 소독제""라는 통계가 실감나는 대목임. 누군가 우연히 버그를 발견할 확률이 아무리 낮더라도, 사람들은 그럴 수 있기에 발견하게 됨. 반면 사유/폐쇄형 코드에서는 그 확률이 0임
     * 이 취약점을 초래한 변경사항은 급하게 이뤄진 것이 아니었음. 관리자가 OpenSSL 메일링 리스트에서 문제를 제기하고, 피드백을 요청하며 해결책을 제안했고, 업스트림을 포함해 일부 피드백을 받았음. 결과는 끔찍한 취약점이었지만, 모두가 문제를 발견하지 못한 엄청나게 불행한 사례로 보임
     * GitHub이 MySQL 데이터베이스에서 키 지문으로 색인된 키를 조회하도록 OpenSSH를 패치하는 것이 최선의 옵션이라고 결론 내림. ~/.ssh/authorized_keys에 대한 액세스 속도를 높이려 한 상황에서 MySQL이 빛을 발할 수 있는 종류의 상황이었기에 SQLite 대신 선택한 것으로 보임
     * 이는 인기 있는 비트코인 하드웨어 지갑의 시드 생성 함수에서 이런 일이 일어날 가능성과 그 여파에 대해 생각해보게 함
     * GCD를 사용하여 공통 'p' 또는 'q' 인수가 있는 RSA 키 감지도 흥미로운 에피소드였음
     * SSH 로그인 시간이 느린 것이 이런저런 이유로 잡아당길 만한 가치가 있는 실마리임을 볼 수 있음
     * OpenSSL RNG는 초기화되지 않은 스택 메모리와 PID로 시드되었는데, Debian 패치가 없더라도 PID만으로 시드하는 것 자체가 이미 상당히 위험했던 것으로 보임
     * GitHub이 여전히 패치된 OpenSSH를 실행 중인지 궁금함
     * Ezra Zygmuntowicz가 GitHub을 필자에게 소개해주고, GitHub 팀과 함께 문제를 파고들 시간을 줬다는 문장이 재미있음. GitHub 팀 자체에 큰 문제가 있는 것처럼 읽히기 때문일 수도 있음
     * Luciano가 발견하지 않았다면 얼마나 더 오랫동안 발견되지 않았을지 궁금함. GitHub이나 대형 클라우드 제공업체 같이 사용자로부터 수천 개의 키를 저장하는 몇 안 되는 곳만이 우연히 발견했을 것으로 생각됨
"
"https://news.hada.io/topic?id=14339","스펙트럴 Ray Tracing 기술 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스펙트럴 Ray Tracing 기술 도입

스펙트럼을 통해 광선 추적 이해하기

   광선 추적에서 파장이 중요한 이유와 스펙트럼 광선 추적이 컴퓨터 예술에 미치는 영향에 대한 배경 설명임

  광선 추적

     * 광선이 가상 카메라와 광원 사이에서 가상 물체들 사이를 반복적으로 튕기며 이동하는 경로를 모델링하여 장면을 ""조명""하는 것
     * 성능을 위해 많은 지름길을 택함
          + 예: 광원에서 카메라로 향하는 광선 경로를 역으로 추적
          + 광선을 ""색상""에 해당하는 RGB 벡터를 운반하는 입자로 취급하고 파동적 특성은 무시
     * RGB 지름길은 우리 눈이 작동하는 방식 때문에 잘 작동함
          + 우리 눈에는 파장에 민감한 세 가지 유형의 색상 감지 세포가 있음 (SML 원뿔 세포)

  스펙트럼 보기

     * 우리가 보는 색상은 단일 파장으로 이루어진 경우가 거의 없고, 많은 파장의 집합인 SPD(spectral power distribution)로 구성됨
     * 단일 색상이 여러 SPD에 해당할 수 있음 (metamerism)
          + 예: 노란색은 580nm 파장에 해당하지만 빨간색과 초록색 빛의 혼합으로도 재현 가능
     * SPD에서 색상으로의 변환은 순수하게 수학적으로 가능 (CIE 1931 색 공간)
          + 물리학, 생리학, 주관적 경험을 연결하는 정량적 링크

  파장이 중요한 경우

     * 광선의 파동적 특성이 장면을 통과하는 경로에 직접적인 영향을 미치는 경우
          + 예: 분산 (프리즘), 박막 간섭 (비눗방울의 무지개 패턴)
     * 박막 간섭은 단일 파장으로 스펙트럼을 분할하지 않고 스펙트럼 일부의 기여도를 증가/감소시켜 청록색, 밤색 등의 비분광 색상을 만들어냄

  스펙트럼 광선 추적과 컴퓨터 예술

     * 광선의 파동적 특성을 고려하는 광선 추적
     * RGB 색상 대신 장면의 모든 픽셀에 대해 SPD를 생성하고, 광선의 파장과 위상을 활용하여 색상을 더 잘 예측
     * 광 이동을 지배하는 일부 법칙을 의도적으로 깨뜨릴 때 어떤 일이 일어나는지에 대해 호기심 갖게됨
          + 우리 세계와는 조금 다른 우주에서 코드로 카메라 구축
     * JavaScript와 GLSL로 작성한 스펙트럼 광선 추적기를 사용하여 생성한 작품들 소개

GN⁺의 의견

     * 컴퓨터 그래픽스에서 사실적인 렌더링을 위해 고려해야 할 물리적 현상들을 잘 설명하고 있음
          + 특히 우리 눈이 색을 인식하는 방식과 연결지어 설명한 부분이 인상적
     * 예술 작품 제작에 직접 활용된 사례를 보여줘서 이론적인 내용이 실제로 어떻게 적용되는지 알 수 있어 좋음
          + 광선 추적 방식을 변형하여 비현실적이지만 아름다운 영상을 만들어내는 것이 흥미로움
     * 광학 시뮬레이션 외에도 과학적 데이터 시각화, VR/AR, 영화 CG 등 다양한 분야에서 스펙트럼 광선 추적 기술이 활용될 수 있을 것 같음
     * 딥러닝 기반 렌더링 기술이 발전하면서 전통적인 레이트레이싱의 한계를 극복하려는 시도들이 계속 나오고 있음
          + 앞으로 어떤 혁신적인 렌더링 기술들이 만들어질지 기대됨

        Hacker News 의견

     * 무료 전자책 ""Ray Tracing Gems II""에서는 최신 API와 하드웨어 가속을 사용한 실시간 GPU 레이 트레이싱을 다루며, 스펙트럼 렌더링에 대한 챕터(Chapter 42: Efficient spectral rendering on the GPU for predictive rendering)가 포함되어 있음
     * Mitsuba, Maxwell, Wētā FX의 Manuka 등 스펙트럼 레이 트레이서의 예시들이 제시됨
          + Mitsuba: 오픈소스 리서치 렌더러. 미분 가능한 렌더링 등 다양한 기능 제공
          + Maxwell: 정확도가 다양한 두 가지 스펙트럼 모드 제공. 복잡한 방식은 광학에 자주 사용됨
          + Manuka: 스펙트럼 기반이며 여러 영화에 사용됨
     * 원글 작성자의 코멘트:
          + 스펙트럼 렌더링은 레이 트레이싱 자체가 렌더링의 종착점이 아니라는 예시. 실시간 레이 트레이싱으로 렌더링이 해결되었다는 의견도 있지만 사실과 거리가 멈
          + 대부분의 스펙트럼 렌더링 시스템은 얇은 막 간섭이나 다른 파동 기반 효과를 다루지 않음. 현실에는 놀라울 정도로 많은 디테일이 존재함
     * 하이퍼스펙트럴(3채널 이상) 이미지 생성 제안:
          + 스펙트럼을 강조하여 어린이 색상 교육에 활용 가능
          + 하이퍼스펙트럴 이미지와 카메라는 희귀하고 전통적으로 비쌌으나, 합성 이미지로 대체 가능
          + 매우 낮은 해상도의 브라우저 내 렌더러로 조명과 재질을 인터랙티브하게 다룰 수 있을지도
          + 비정상적 색각, 백내장 제거 후 UV까지 볼 수 있는 인간, 색맹 포유류, 4색 잉어 등의 시점으로 렌더링 가능
     * 직접 레이 트레이싱 구현을 해보는 것이 의외로 쉬움. 무료 책이나 Unity 기반 GPU 튜토리얼 추천
          + 기본 구현을 가지고 놀면서 직관을 얻을 수 있음 (예: 광선을 물체에 끌리거나 밀리는 입자처럼 구현, 마지막 반사각 기억해서 다음 재질에 활용 등)
          + 대부분은 보기 안 좋았지만 직관을 얻을 수 있었음. 카메라를 조금씩 움직이는 것도 도움됨
     * 아름다움을 위해 수정된 내용이 다른 시각화에도 유용할 수 있을지 궁금함
     * 분산 레이 트레이서에 굴절을 구현하려 함
          + 주파수를 무작위로 샘플링하고, 색상을 계산하여 광선 색상을 변조
          + 순수 굴절 색상이 1/3 밝기이므로 결과에 3을 곱해야 함
     * 글 끝에 공유된 아트웍에 대해 더 알고 싶음. 우리와 다른 방식으로 빛이 작용하는 현실을 렌더링한다는 개념이 매력적임
     * RGB 픽셀 대신 스펙트럼 분포를 모델링하는 것이 레이 트레이싱 성능에 미치는 영향을 이해하고 싶음
"
"https://news.hada.io/topic?id=14329","포켓몬 바이올렛 세이브 데이터 조작한 남성, 일본 경찰에 체포","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   포켓몬 바이올렛 세이브 데이터 조작한 남성, 일본 경찰에 체포

일본 경찰, 포켓몬 바이올렛 저장 데이터 불법 변조 혐의로 36세 남성 체포

     * 일본 경찰은 사이버 순찰 중 온라인상에서 포켓몬 바이올렛의 저장 데이터를 불법으로 변조해 판매한 혐의로 36세 남성을 체포함
     * 용의자는 희귀 포켓몬에 대한 맞춤형 주문을 받아 2022년 12월부터 2023년 3월까지 변조된 데이터를 회당 최대 13,000엔(약 84달러)에 게임 자산 및 아이템 거래 사이트에서 판매함
     * 또한 약 30달러에 6마리의 포켓몬을 생성하는 거래도 제공함
     * 용의자는 범행 사실을 인정하면서 생계를 위해 그렇게 했다고 진술함
     * 일본의 2019년 부정경쟁방지법에 따르면 용의자는 최대 5년 징역 및 500만 엔(약 32,600달러) 벌금형에 처해질 수 있음

포켓몬 관련 범죄 사례들

     * 2021년 도쿄의 한 가게에서 포켓몬 카드와 현금을 훔치기 위해 6층 건물에서 내려가려던 남성이 실패한 사건이 있었음
     * 2022년에는 6만 달러 이상의 포켓몬 카드를 훔친 것을 포함해 도쿄에서 고가의 포켓몬 절도 사건이 여러 차례 발생함
     * 포켓몬에 대한 열망은 범죄계 밖에서도 문제를 일으킴. 2022년 1월 LA 경찰관 2명이 절도 신고에 출동하지 않고 포켓몬고의 잠만보를 쫓다가 해고된 사례가 있음

GN⁺의 의견

     * 게임 내 아이템을 실제 돈을 받고 거래하는 것에 대해서는 법적, 윤리적 검토가 더 필요해 보임. 단순히 법으로 금지한다고 해서 근본적인 해결책이 되기는 어려울 것 같음
     * 게임 데이터 변조나 아이템 거래를 막기 위해서는 게임사 차원의 기술적 대책 마련과 함께, 게이머들의 의식 개선을 위한 캠페인 등 다각도의 노력이 병행되어야 할 듯함
     * 요즘 메타버스 등 가상 세계의 자산에 대한 권리 문제가 새로운 이슈로 떠오르고 있음. 앞으로 이에 대한 사회적 합의를 어떻게 만들어갈지 고민이 필요한 시점임
     * 게임은 누구나 평등하고 공정하게 즐길 수 있어야 함. 현금 거래 등으로 인해 게임의 본질이 훼손되지 않도록 제도적 장치를 마련해야 할 것임

        Hacker News 의견

     * 일본에서는 2019년 '부정경쟁방지법'에 따라 포켓몬 세이브 데이터를 불법적으로 수정하여 온라인으로 판매하는 행위가 금지되어 있음
     * 1990년대 후반에도 유사한 사례가 있었는데, 연애 시뮬레이션 게임 '토키메키 메모리얼'의 모든 스탯을 최대치로 올린 해킹된 세이브 데이터가 담긴 플레이스테이션 메모리 카드가 판매된 사건이 있었음
          + 코나미는 게임의 자연스러운 진행을 방해한다며 저작물의 무결성을 침해했다고 주장하며 승소함
     * 미국 법에서도 소프트웨어의 리버스 엔지니어링을 기술적 보호조치의 우회로 보는 논리가 성립될 수 있으므로, 일본 법만 이상한 것은 아님
     * 일본은 자물쇠따기 도구 소지만으로도 체포될 수 있는 국가임
          + 미국인들이 유튜브에서 자물쇠따기를 취미로 본다고 해도 일본 경찰은 매우 의심스러워 함
     * 개인이 구매한 제품을 마음대로 수정하고, 그 수정을 위해 다른 사람에게 돈을 지불하는 것까지 자유로워야 한다는 의견
     * 공공 자원의 낭비라는 의견
     * 기사 내용에 오타, 중복, 반복 등이 있어서 AI가 작성했거나 단어에 익숙하지 않은 사람이 급하게 썼을 것이라는 의견
          + TCG(트레이딩 카드 게임)가 세이브 파일과 무슨 상관인지 모르겠다는 언급도 있음
     * 일본에서 세이브 파일 수정이 형사 범죄라는 것과 사람들이 그 서비스에 30-85달러를 지불한다는 것 중 어느 것이 더 미친 것인지 모르겠다는 의견
     * 포켓몬 대회에서 수정된 포켓몬이 사용되는 것이 아니라면 실제로 무슨 해가 있는지 의문
     * 손쉬운 해킹을 위한 오픈 소스 도구를 만드는 것이 닌텐도 경찰에 대한 좋은 반격이 될 것이라는 의견
"
"https://news.hada.io/topic?id=14305","Show GN: AI 한영/영한 번역기 도다리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show GN: AI 한영/영한 번역기 도다리

   자신의 컴퓨터에서 제한없이 한영-영한 AI 번역이 가능합니다.
    1. 일반 기계번역에 비해 품질이 우수합니다.
    2. txt와 epub파일 번역이 가능합니다.
    3. 번역문(원문) 파일과 번역문 파일, 이렇게 두가지 파일로 출력됩니다. 번역이 이상할 경우 원문과 바로 비교할수 있습니다.
    4. 사용이 아주 쉽습니다. 번역이 필요한 파일들을 드래그한 후 번역 실행하기 버튼만 클릭하면 됩니다. 알아서 한↔영 으로 번역해 줍니다.
    5. 다른 AI모델로 교체가 가능합니다. 현재는 가성비가 좋은 NHNDQ를 사용합니다.

   안녕하세요 다름이 아니라 설치도중 cmd를 종료했는데, 그 뒤론 폴더를 지우고 새로 설치해도 설치가 진행이 안되네요,,,해결 방법이 있을까요?ㅜㅜ

   그럼요. 해결해야죠.
   그런데 일단 어떻게 안되는 건지 상태를 좀 알아야 해요.

   https://github.com/vEduardovich/dodari/issues
   위 도다리 깃험에서 new issues 버튼을 눌러 새로 이슈를 만드신후

   어떻게 안되는건지 스샷이나 상황들은 조금만 더 자세히 설명해주실 수 있을까요?
   꼭 해결하겠습니다

   우와, 대단하십니다.
   저는 deepL을 쓰고 있기는 한데 비교해가면서 찬찬히 확인해볼께요.
   특히, 영문 문학의 텍스트들을 얼른 비교해보고 싶네요.

   말씀해 주신 부분이 현재 제가 느끼는 가장 아쉬운 부분입니다.
   지금 도다리에서 사용중인 모델은 NHNDQ모델로 facebook-nllb라는 200국어 다번역 모델을 한국어에 특화시켜 파인튜닝한 모델입니다. 그런데 이게 구글 번역보단 좋지만 deepL에 비해서는 많이 떨어집니다.

   해결을 위해 여러 모델들을 테스트하다 한국어 0티어라는 yanolja-eeve모델을 돌려봤는데 깜짝 놀랄 정도로 좋았습니다. 제 체감으로는 deepL의 80~90%는 되는 거 같았어요.

   그런데 이 모델을 사용하기 위해서는 사용자 컴퓨터의 vram이 23이상이어야 합니다. 또 번역속도가 몇십배 느려지기 때문에 가속을 위해 vllm 기술을 적용해야합니다. 이러면 속도는 상당부분 빨라지지만 리눅스 os가 꼭 필요하지요. '4090과 리눅스 os를 운용하는 개발자'만 야놀자 모델을 돌려볼수 있는거에요.

   지금 고민하고 있는 부분이에요. 아쉽습니다.

   더 이상의 설명이 必要韓紙?

   NHNDQ의 부모 모델이 facebook-nllb라는 200개 국어 다번역 모델이에요.
   그러다보니 그런 외계어를 가끔합니다.

   아직 한국어 번역 품질이 조금 떨어지는 부분을 가지고 프리게이트 사건의 주인공 도더리의 닉네임을 따서 제품 이름을 지은 것 같았으므로, 그 사건에서 나온 희대의 번역기 사용 실수 “必要韓紙”를 언급하지 않을 수 없었습니다.

   뭔가 복잡한 사건이 있었나보네요. 읽어도 잘 이해를 못하겠습니다ㅠ

   도다리라는 이름은 mixtral-7bx8 모델과의 대화로 만들었습니다.
   처음에 ai는 '언어다리'라는 이름을 추천해줬는데 저는 뭔가 그리기 쉬운 확실한 이미지가 필요해서 '도다리'는 어떠냐고 재미삼아 물었습니다. 스스로도 뚱딴지 같다고 생각했으니까요.

   근데 ai는 도다리가 '도움을 주는 다리'라는 뜻으로 아주 좋다는 답변을 주었습니다. 생각지도 못했던 해석이라 참신하다고 생각했습니다. 그렇게 나온 이름이 도다리입니다

   꽤나 오래된 사건인데, 당시 한국 인터넷 커뮤니티에서는 나름 유명한 사건이었습니다.
   대충 정리하면 다음과 같습니다.
    1. 어떤 네이버 카페의 운영자 도더리가 한정판 일본 음악 CD를 7만원에 공동구매한다는 공지를 올림
    2. 이후 1차 공동구매 참여자 명단이 올라왔는데, 이름이나 주소가 뭔가 이상하여 사람들이 의심하게 됨
    3. 어느 카페 가입자가 해당 CD는 한정판도 아니고 가격도 3만원대에 불과하다는 걸 밝혀내어 따지자 도더리가 그를 카페에서 추방하면서 일이 커짐
    4. 도더리가 일본 회사와 주고받은 메일이라며 공개한 메일 내용에서 “必要韓紙”와 같은 어이없는 번역기 사용 오류가 드러나면서 외부인에게도 유명세를 타게 됨
    5. 이후 드러난 바에 따르면 도더리는 소위 허언증이 심한 사람으로, 그가 인터넷에 올린 대다수의 자기 행적은 말도 안 되는 허세와 거짓말로 점철되어 있었음

   그나저나 거대언어모델이 가끔 생각지도 못한 해석을 내놓는데 그게 그럴싸한 경우는 저도 가끔 겪어봤습니다.
   사람들과의 대화 속에서 자기 혼자서는 미처 생각하지 못한 부분을 짚게 되는 현상을 이제는 기계와의 대화에서도 경험하는 것 같습니다.

   세상에나. 근데 잡혀가진 않았나보네요.
   개인적으로 chatGPT는 샌님같아서 재미가 없는데 Mixtral은 검열이 없어서 그런지 대화가 아주 흥미롭습니다

   위키 내용에 따르면 고소까지 당했다가 싹싹 빌었는지 선처받아 그냥 넘어갔다네요. 고소당할 당시 그의 신분은 공익근무요원이었다고.

   저는 개인 PC 성능상 아직 로컬 LLM을 직접 써본 적은 없네요. GPT-4 정도만 사용하고 있는데, Claude-3는 추가 구독해볼까 싶습니다.

   필요한지?에 이런 슬픈 역사가..

   Huggingface 모델 실행부터 venv 구축. 웹서비스 구현까지 완결성 있는 예제여서 도움이 되었습니다. 공유해주셔서 감사합니다

   도움이 될수 있었다니 너무나 기분이 좋습니다. 제가 더 감사합니다.
"
"https://news.hada.io/topic?id=14251","go-mysql-server - MySQL과 호환되는 순수 Go 언어로 작성된 데이터베이스 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         go-mysql-server - MySQL과 호환되는 순수 Go 언어로 작성된 데이터베이스 엔진

     * 순수 Go로 작성된 MySQL 호환 데이터베이스 엔진
     * 데이터 소스에 구애받지 않는 SQL 엔진이며, MySQL 문법과 프로토콜을 사용해 제공된 데이터 소스에 대해 쿼리를 실행
     * 간단한 인-메모리 데이터베이스 구현체가 포함되어 있으며, 자체 백엔드를 구현해 원하는 데이터 소스를 쿼리할 수 있음

호환성

     * 특정 제한 사항을 제외하고는 go-mysql-server는 MySQL의 대체재로 사용할 수 있음
     * MySQL에서 작동하는 클라이언트 라이브러리, 도구, 쿼리, SQL 문법, SQL 함수 등이 go-mysql-server에서도 작동해야 함
     * 기능 차이가 발견되면 이슈 제보 바람

프로젝트 범위

     * 데이터 소스를 쿼리하기 위한 SQL 서버 및 엔진
     * 테스트에 사용하기 적합한 인-메모리 데이터베이스 백엔드 구현
     * 자체 데이터 소스를 쿼리하기 위한 새로운 백엔드 구현에 사용할 수 있는 인터페이스
     * 몇 가지 주의사항을 고려하고 전체 데이터베이스 구현을 사용한다면 MySQL 데이터베이스를 대체할 수 있음

go-mysql-server의 주요 사용 사례:

    1. 내장된 memory 데이터베이스 구현을 사용해 Go 테스트 환경에서 MySQL을 대신함
    2. 몇 가지 인터페이스를 구현해 임의의 데이터 소스에 SQL 쿼리로 접근할 수 있게 함

인-메모리 테스트 서버 사용

     * 인-메모리 테스트 서버는 테스트에서 실제 MySQL 서버를 대체할 수 있음
     * 제공된 예제 코드를 사용해 서버를 시작할 수 있음
     * 서버가 실행되면 MySQL 클라이언트나 Go MySQL 커넥터, mysql 쉘 등으로 접속 가능

인-메모리 데이터베이스 구현의 제한사항

     * 동봉된 인-메모리 데이터베이스 구현은 테스트용으로 사용하기 위한 것임
     * 알려진 제한사항:
          + 스레드 안전하지 않음. 동시성 문제를 피하려면 DDL과 DML 문을 단일 고루틴으로 제한해야 함
          + 트랜잭션을 지원하지 않음. START TRANSACTION, ROLLBACK, COMMIT 등의 문은 작동하지 않음
          + 비효율적인 인덱스 구현. 인덱스 조회와 조인은 내부 테이블에 대해 전체 테이블 스캔을 수행함

사용자 정의 백엔드 구현

     * 일부 인터페이스를 구현해 자체 데이터 소스를 쿼리하는 백엔드를 만들 수 있음
     * 자세한 지침은 백엔드 가이드 참조

go-mysql-server로 구동되는 프로젝트

     * dolt
     * gitbase(중단됨)
     * go-mysql-server로 데이터베이스 백엔드를 구축 중이라면 알려주기 바람

라이선스

     * Apache License 2.0

GN⁺의 의견

     * go-mysql-server는 Go로 작성된 가벼운 MySQL 호환 데이터베이스 엔진으로, 테스트 환경에서 MySQL을 대체하거나 자체 데이터 소스를 SQL로 쿼리하는 용도로 유용해 보임
     * MySQL 호환성을 목표로 하므로 기존 MySQL 기반 애플리케이션을 크게 수정하지 않고도 적용할 수 있을 것으로 기대됨
     * 다만 아직 실험적인 프로젝트이며, 특히 인-메모리 구현은 테스트용에 그치므로 프로덕션 적용 시에는 성능과 안정성 면에서 주의가 필요해 보임
     * 백엔드 개발자라면 인터페이스를 직접 구현해 원하는 데이터 소스를 연결할 수 있다는 점이 매력적일 것임. Dolt와 같은 실제 프로젝트 사례를 참고하면 좋겠음
     * 비슷한 MySQL 호환 데이터베이스로는 TiDB, CockroachDB 등이 있음. go-mysql-server는 이들과 달리 백엔드를 자유롭게 구현할 수 있다는 장점이 있지만, 반대로 백엔드 개발에 추가 비용이 든다는 단점도 있음

        Hacker News 의견

     * Dolt를 구동하는 쿼리 엔진으로서 go-mysql-server가 가장 중요함
     * Dolt의 대부분 코드를 작성했지만 원 저자는 아님. 프로젝트 시작 배경 스토리가 흥미로움
     * Dolt의 아이디어가 매력적이지만, 너무 다르고 중요한 persistence layer여서 비즈니스 구축에는 부족함. 하지만 주류 DB들이 채택하면 좋겠음
     * MySQL에서 PostgreSQL, SQLite로의 지원이 발전되면 WordPress 등에서 다중 DB 엔진 지원이 가능해질 것임
     * MySQL에서 SQL로의 wire-protocol proxy로 보임. 기본 proxied DB는 Dolt이며, Dolt에서 추출된 것으로 추측됨
     * Go가 더 나을 수 있지만, C# 개발자 입장에서는 GC 언어로 DB 구현하는 것이 우려됨. GC와 싸우고 많은 non-obvious low allocation 코드를 작성해야 할 것임. 소규모 팀에는 괜찮을 수 있으나 적합한 기술을 가진 개발자 영입이 어려울 것임
     * 호환성과 기능이 매우 제한적이어서 프로덕션에서 사용하기 어려움 (트랜잭션 미지원, 비효율적 인덱스 구현 등). 트리거, 저장 프로시저 등의 지원 여부도 궁금함
     * Rails 프로젝트 테스트를 위해 MySQL의 in-memory 대체재로 사용하는 것이 얼마나 어려울지 궁금함. DB 계층이 중요하므로 프로덕션에서는 주의해야 하지만, 테스트 속도를 높일 수 있다면 흥미로울 것임
     * TiDB는 Go와 Rust로 작성된 분산형 MySQL 호환 DB이며, StarRocks는 Java와 C++로 작성된 OLAP용 MySQL 호환 DB임. 하지만 이 프로젝트는 다른 관점을 다루는 것 같음. Vitess MySQL 라이브러리 사용이 어려우므로 ORM 같은 추상화 계층 구축에 사용될 수 있을지도 모름
     * 이런 구현들을 보면 놀랍지만, 실제 사용처가 있을지는 의문임
     * MySQL 대신 표준 SQL을 준수하는 것은 어떨지 제안함
"
"https://news.hada.io/topic?id=14304","스타트업과 YC를 위해 일하는 이민 변호사 Peter Roberts의 AMA","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               스타트업과 YC를 위해 일하는 이민 변호사 Peter Roberts의 AMA

Paul Roberts의 Hacker News AMA

   • Paul Roberts는 하루 종일 Hacker News에서 AMA(Ask Me Anything)를 진행함. 중간에 약간의 휴식시간을 가질 예정임. • 가능한 주제는 많지만, 사람들이 관심 있어하는 주제나 궁금해하는 것들을 중심으로 대화를 이어갈 것임. • 명확한 책임 문제로 인해 특정 사례에 대한 법률 자문은 제공할 수 없음. 모든 사실에 접근할 수 없기 때문임.
   • 질문과 코멘트는 사실에 입각해서 해달라고 당부함. 자신도 그렇게 할 것임.

이전 AMA 기록

   • 이전에 진행했던 AMA 스레드 링크를 공유함.
     * https://news.ycombinator.com/submitted?id=proberts

AMA 일시 중단 공지

   • 오후에 잠시 자리를 비울 예정이며, 저녁이나 다음날 아침에 돌아올 것이라고 알림. • 질문과 코멘트를 계속 보내달라고 당부함. 모든 것에 대해 답변할 것을 약속함. • 지금까지 훌륭한 AMA였다고 평가함.

GN⁺의 의견

     * 유명인이 직접 온라인 커뮤니티에서 대화를 나누는 것은 팬들에게 신선한 경험을 줄 수 있음. 그러나 책임 문제로 인한 발언 제약은 아쉬운 부분.
     * 이런 AMA 형식이 계속 활성화된다면 향후 다양한 분야의 전문가들과 직접 소통할 수 있는 기회가 늘어날 것으로 기대됨. IT 분야뿐 아니라 과학, 예술, 정치 등 폭넓은 주제로 확대되면 좋겠음.
     * 딱딱한 강연이나 인터뷰 대신 자유로운 대화를 통해 인사이트를 얻을 수 있다는 점이 AMA의 가장 큰 매력이라고 봄. 다만 질문의 수준을 일정 이상으로 끌어올리는 것이 관건.
     * 텍스트 기반 AMA도 좋지만 화상 라이브 AMA를 병행하면 더욱 역동적인 소통이 가능할 것 같음. 플랫폼의 기술적 진화가 뒷받침되어야 할 듯함.
     * 국내에서도 AMA 문화가 자리잡으면 좋겠음. 해외의 성공 사례를 벤치마킹해 IT 분야 리더들이 먼저 시도해보는 건 어떨지.

        Hacker News 의견

     * 대부분의 연구소들은 석사/박사 학위 소지자를 선호하지만, 학부 졸업생도 열정과 실력을 보여준다면 기회를 얻을 수 있음. 연구 분야 경험을 쌓고 네트워킹하는 것이 중요함.
     * 유럽 거주자가 미국 회사 직원으로 ESTA로 출장 가는 것은 가능하나, 출장 중 평소 업무를 하는 것은 법적 논란의 여지가 있음. 출장 목적에 부합하는 활동에 집중하는 것이 안전함.
     * 멕시코 거주 비자를 받고 미국 고객사와 일하는 것은 세금 혜택 등 장점이 있으나, 보험, 연금 등은 스스로 준비해야 함.
     * 캐나다 거주자가 TN 비자로 미국에 출퇴근하는 것은 가능함. 다만 장기적으로는 세금, 의료보험 등 여러 이슈를 고려해야 함.
     * 인도에서 미국 법인을 세우고 운영하는 것 자체는 EB-1 비자 신청에 문제되지 않음. 다만 실제 사업 운영 과정에서 비자 요건을 잘 지켜야 함.
     * ESTA로 입국시 심사관이 구두로 1개월 체류를 언급했다면, 공식 기록에도 남아있을 가능성 있음. 혼선 방지 위해 확인 필요.
     * 영주권 신청 중 이혼할 경우, 배우자 영주권에 부정적 영향 있음. 가능한 영주권 승인 후 이혼하되, 결혼의 진정성을 입증하려 노력해야 함. 본인 영주권도 영향 받을 수 있음.
     * 뉴질랜드 국적자는 영국, 캐나다와 달리 미국에는 워킹홀리데이 비자 없음. 전문직 취업비자 등 다른 옵션 모색 필요.
     * 지난 20년간 미국 비자 절차는 복잡해지고 시간도 많이 걸리게 됨. 안전 등 여러 이유로 심사가 강화된 듯함.
     * 최근 창업가들의 미국 이민 수요는 다소 줄어든 느낌. 원격근무 확산으로 굳이 미국에 거주하지 않아도 사업하기 좋아진 영향이 있어 보임. 유럽 등 삶의 질 좋은 곳 선호하는 추세.
"
"https://news.hada.io/topic?id=14222","Spotify, 천 번 미만 스트리밍 곡에 대한 수익 창출 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Spotify, 천 번 미만 스트리밍 곡에 대한 수익 창출 중단

     * Spotify가 천 번 미만 스트리밍된 모든 트랙에 대한 수익 창출을 공식적으로 중단함.
     * 이 새로운 정책은 2024년 4월 1일부터 모든 아티스트에게 적용됨.
     * 지난해 발표된 개정된 수익 구조에 따르면, 음악은 지난 12개월 동안 천 번 이상 재생된 경우에만 로열티 풀 계산에 포함됨.
     * Spotify 블로그 게시물에 따르면, 플랫폼에서 스트리밍된 곡의 99.5%가 이 임계값을 넘어서며, 이로 인해 해당 트랙들이 더 많은 수익을 얻을 것이라고 주장함.
     * 또한, Spotify는 로열티가 적용되기 위한 최소한의 독특한 청취자 수도 요구함.
     * 이는 자동 및 인공 재생을 사용하여 스트림 수를 늘리는 ""나쁜 행위자들에 의한 추가적인 조작""을 막기 위한 시도임.
     * 한편, '기능적' 장르, 예를 들어 화이트 노이즈와 같은 장르도 대상이 됨.
     * 이전에는 이러한 녹음이 30초 재생으로 수익을 창출할 수 있었지만, 이제는 2분으로 증가함.

음악 산업 일각에서는 분노와 실망의 반응

     * 이 변화는 음악 산업의 일부에서 분노와 실망의 반응을 불러일으킴.
     * 이번 주, United Musicians and Allied Workers는 X에서 게시물을 공유하며, Spotify에서 로열티 기준을 충족하지 못할 콘텐츠가 86%에 달할 수 있다고 주장함.
     * United Musicians and Allied Workers는 최근 Make Streaming Pay 이니셔티브를 주도하여, Spotify와 Apple Music을 포함한 플랫폼을 사용하는 아티스트들에게 더 공정한 수익 분배를 요구함.
     * 이 캠페인은 미국 의회에 3월에 도입된 새로운 Living Wage For Musicians Bill의 배후에 있으며, ""디지털 시대에 아티스트와 뮤지션들이 지속 가능한 경력을 쌓을 수 있도록 보장""하는 것을 목표로 함.

Spotify, 자체 적자 해소를 위해 더 많은 수익 창출 모색

     * Spotify는 공개적인 압력과 정치적 압력이 로열티 지급 개선을 요구하는 가운데, 자체 적자를 메우기 위해 더 많은 수익을 창출하려고 함.
     * 2018년 주식 시장에 상장된 이후 회사는 매년 돈을 잃고 있음.
     * 이번 주에는 스트리밍 거대 기업이 가격을 수정하고 인상할 의도를 확인했다는 보도가 있음.
     * 영국, 호주, 파키스탄 등 여러 지역의 고객들의 월별 청구서에 1~2달러가 추가될 예정이며, 이는 2023년 말 플랫폼에 추가된 오디오북 비용을 커버하기 위함임.
     * 최근에는 비디오 학습 콘텐츠가 추가되어 제공 범위를 더 다양화함.
     * 오디오북에 접근하고 싶지 않은 이들을 위한 새로운 기본 계층 패키지가 출시될 예정이며, 이는 여러 가격 옵션 중 첫 번째임.
     * 이 소식으로 Spotify의 주가가 4.6% 상승했지만, 장기적인 영향은 아직 불분명함.

GN⁺의 의견

     * Spotify의 새로운 정책은 스트리밍 서비스에서 아티스트에게 지급되는 로열티의 공정성에 대한 오랜 논쟁에 새로운 차원을 추가함. 이는 특히 독립 아티스트와 소규모 레이블에게 영향을 미칠 수 있음.
     * 로열티 지급 기준을 천 번 이상의 스트리밍으로 설정함으로써, Spotify는 플랫폼에서의 조작을 줄이고 수익 분배를 더 효율적으로 만들려는 의도를 보이고 있음. 그러나 이는 신진 아티스트나 니치 장르의 아티스트들에게는 진입 장벽이 될 수 있음.
     * 가격 인상과 새로운 서비스의 추가는 Spotify가 다양한 콘텐츠를 제공하며 시장에서의 경쟁력을 유지하려는 전략의 일환으로 보임. 그러나 이러한 변화가 사용자 경험과 가입자 기반에 어떤 영향을 미칠지는 시간이 지나봐야 알 수 있음.
     * Living Wage For Musicians Bill과 같은 입법적 노력은 아티스트들이 디지털 시대에 공정한 대우를 받을 수 있도록 하는 중요한 단계임. 이러한 변화가 실제로 어떻게 구현될지는 아직 미지수이지만, 음악 산업 내에서 지속 가능성에 대한 중요한 논의를 촉발시키고 있음.

        Hacker News 의견

     * 소액의 스트리밍 비용을 지불하는 것과, 소량에 대해서는 아무것도 지불하지 않으면서 큰 양에 대해서는 지불하는 것은 근본적으로 다른 문제임.

     작가가 서점에서 판매된 첫 1,000권의 책에 대해 로열티를 받지 못하거나, 제조업자가 식료품점에서 판매된 첫 1,000개의 사탕 바에 대해 지불받지 못하는 것과 유사함. 이러한 관행은 도둑질로 간주될 수 있음. 현재 법률이 이를 허용하는 것은 당혹스러움.
     * 작은 아티스트들이 Spotify에서 자신의 음악을 내릴지에 대한 의문이 있음.

     Spotify에서 많은 음악을 듣고 있으며, 그 중 일부는 작은 인디 아티스트들의 것임. 이들 중 일부는 1,000회 미만의 재생을 가진 곡들이지만, 발견되지 않은 아티스트들에게는 상당한 부분을 차지함. Spotify 라이브러리에서 더 이상 사용할 수 없는 많은 음악들에 놀람. 플랫폼에서 내려간 수십 곡이 회색으로 표시됨. 음악 스트리밍과 Spotify를 좋아하지만, 그 경제학이 근본적으로 작동하지 않는 것 같음.
     * 1,000회 스트리밍에 대한 문제가 작은 아티스트들에게 부정적인 영향을 미칠 것이라는 의견이 있음.

     백색 소음을 발행하고 가짜 재생을 생성하는 사람들이 수익 모델을 남용하는 문제가 있다면, 그 문제를 해결해야 함. 지불금이 일정한 최소 기준에 도달해야 한다면 처리 비용 문제가 있다면 그렇게 해야 함. 영국, 호주, 파키스탄 등 여러 지역에서 월 청구서에 1~2달러가 추가될 것이라고 보도됨. 이는 2023년 말에 플랫폼에 추가된 오디오북 비용을 커버하기 위한 것임. 최근에는 학습 콘텐츠를 도입하여 제공물을 더 다양화함. 음악 앱에 오디오북이나 팟캐스트, 뉴스 등을 원하지 않았음. 이러한 것들이 없는 또 다른 계층이 추가될 것이라고 언급함.
     * Spotify가 처음에 제공했던 약속을 깨고 있다는 의견이 있음.

     Spotify의 약속은 모든 구독자의 돈을 모아서 음악을 듣는 사람들에 따라 평등하게 나누는 것이었음. 하지만 실제로는 Spotify에서만 생활할 수 있는 상위 0.1%만이 이익을 보고 있으며, 이들의 노래는 대부분 기존의 레코드 회사가 소유함. 인디 아티스트들에게 미칠 수 있는 파급 효과에 대해 궁금함. Spotify는 이번 조치로 인디 아티스트들에게 더 이상 Spotify를 사용할 유인이 없다고 말한 것과 같음. 아티스트를 직접 지원하고 싶다면 앨범을 구입하는 것이 여전히 가장 좋음. 대부분의 아티스트들은 Bandcamp 페이지를 가지고 있으며, 현재로서는 Bandcamp가 좋은 거래를 제공함.
     * 이 변경이 작은 아티스트들에게 의미 있는 부정적인 영향을 미칠 수 없다는 의견이 있음.

     Spotify가 아티스트에게 지불하는 스트림당 금액에 대해 검색했을 때, 범위는 다양하지만 스트림당 $0.005가 높은 금액으로 보임. 매우 다작하는 아티스트가 200곡을 가지고 있고, 연간 평균 500회 재생된다고 해도, 이는 연간 $500에 불과함. 취미로 음악을 하는 사람에게는 적지 않은 금액일 수 있지만, 대부분의 노래가 이 한계에 거의 미치지 못하고, 또한 상위 범위에서 지불받을 수 있는 아티스트는 이례적임.
     * Spotify가 주식 시장에 상장된 이후 매년 돈을 잃고 있다는 비판이 있음.

     그들은 심지어 비즈니스 모델을 가지고 있지 않음. 전체적으로 음악의 가치를 떨어뜨리면서 몇몇 벤처캐피털에 큰 수익을 내기 위한 대규모 사기임.
     * Qobuz를 사용해보는 것을 추천하는 의견이 있음.

     아티스트들에게 더 많은 지불을 하고, 카탈로그가 풍부하며, 대부분의 앨범이 Hi-Res 오디오로 제공되며, 사용자 인터페이스가 좋고, 음악만 있음. 콘텐츠는 큐레이션되어 있으며, 많은 기사, 아티스트 인터뷰, 각 앨범에 대한 작은 리뷰나 앨범의 중요성에 대한 정보가 제공됨.
     * 플랫폼이 지불하기 전에 어떤 종류의 소프트 임계값을 가지고 있다는 것은 이해가 안 된다는 의견이 있음.

     이는 실제 세계에서도 매우 흔하며, 예를 들어 판매에서 특정 임계값을 충족하지 못하면 커미션을 받지 못함.
     * 이 문제가 얼마나 중요한지에 대한 의문이 있음.

     YouTube에서 광고 수익과 같이 작동하는지? 1,000회 미만의 스트림이 있다면, 그것은 취미로 음악을 하는 사람들이 가끔 얻는 몇 달러에 불과할 것이라고 가정함.
     * ""도둑질""이라는 단어가 ""수익 창출 중단""보다 이 상황을 더 잘 묘사한다는 의견이 있음.
"
"https://news.hada.io/topic?id=14325","수익을 내는 병원에 대한 과세 방안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          수익을 내는 병원에 대한 과세 방안

     * 매년 세금 신고의 번거로움에서 한숨 돌리는 성실한 납세자들과 달리, 국세청(IRS)은 대부분의 미국 병원들이 연방세를 내지 않도록 허용하고 있음
          + 국회는 의료 분야에서 IRS의 역할을 면밀히 살펴봐야 할 때임

국세청의 모호한 ""지역사회 혜택"" 기준

     * IRS는 모호한 ""지역사회 혜택"" 기준을 사용하여 이른바 비영리 병원들에게 관대하게 면세 지위를 부여하고 있음
          + 이는 많은 병원들이 부풀려진 의료비로 아픈 미국인들을 재정적으로 이용하고 있는 상황에서도 이뤄지고 있음
     * 존스 홉킨스 대학의 동료들과 함께 발표한 연구에 따르면, 일부 비영리 병원은 의료비를 감당할 수 없는 저소득 환자들을 고소하고 임금을 압류하고 있음
          + 이는 지역사회에 어떤 혜택도 주지 않음
          + 비영리 병원은 동정심과 자비로워야 하지, 약탈적이고 무자비해서는 안 됨

병원의 부당한 관행들

     * 많은 병원들은 진심으로 치료를 구하는 고통받는 사람들에게 치료의 조건으로 재정적 생명을 포기하도록 강요함
     * 일부 병원은 청구서에 이의를 제기하기 어렵게 만들거나, 병원이 흔한 쇼핑 가능한 서비스에 대한 가격을 게시하도록 요구하는 연방 병원 투명성 규칙을 준수하지 않음
     * 비영리 병원들이 최근 가장 많이 사용하는 돈 놀이는 일상적인 치료에 수십억 달러의 ""시설 비용""을 추가하는 것
          + 이러한 청구 속임수는 평범한 미국인들을 속이고 있음
          + 의회는 이를 사용하는 병원의 면세 혜택 자격을 박탈하는 법을 통과시킨다면 하루아침에 사라지게 할 수 있음

무료 진료에 대한 병원들의 주장의 실체

     * 많은 면세 병원들은 수백만 달러의 무료 진료를 제공한다고 주장하지만, 실제로는:
          + 그들이 무료 진료라고 부르는 대부분은 병원이 법적으로 제공해야 하는 응급 진료임
          + 하지만 진료가 제공된 후, 환자들은 종종 인위적으로 부풀려진 가격으로 지불을 요구받음
          + 병원은 그들의 높은 가격과 환자를 쥐어짜서 실제로 징수한 금액의 차이를 자선 진료로 보고함
     * 그러나 이것은 자선이 아님
          + 2021년 Health Affairs에 발표된 연구에 따르면 영리 병원이 비영리 병원보다 65% 더 많은 자선 진료를 제공했음

병원들의 면세 지위 유지를 위한 주장에 대한 반박

     * 전국의 병원 지도자들은 생존을 위해 연방세를 피해야 한다고 말해왔지만, 세금은 이윤에 대해서만 부과됨
     * 일부 병원은 원가 전가 회계와 대출 차환을 통해 이익을 감추고, 심지어 공격적인 부동산 및 벤처 캐피털 투자에 참여하기도 함
     * 공개 세금 기록에 따르면 2022년 비버리힐스의 Cedars Sinai는 7억 5천만 달러의 소득 잉여금이 있었고 연방세를 내지 않았음
          + 뉴욕의 Memorial Sloan Kettering Cancer Center도 4억 달러가 있었고 연방세를 내지 않았음. 여기 최고위 3인의 관리자 급여는 거의 2천만 달러였음

병원이 사업체처럼 운영되며 세금을 내야 하는 이유

     * 이 병원들이나 다른 비영리 병원에 예약을 시도해 보면 보험이나 선불 없이는 거의 불가능함
          + 재정적으로 자격이 있음을 증명하지 않으면 대부분의 비영리 병원은 암 치료를 포함한 예약을 거부할 것임
     * 병원이 사업체라고 주장하면서 재정적으로 자격이 있는 사람들에게만 예약과 수술을 제공한다면, 다른 모든 미국 기업처럼 공정한 세금을 내야 함
     * Kaiser Family Foundation 연구에 따르면 2020년에만 비영리 병원에 대한 세금 면제의 총 가치는 280억 달러였음
          + 이는 그해 세금 신고를 한 모든 미국인에게 1인당 107달러의 세액공제에 해당함

이 문제에 대한 정부 관계자들의 인식 변화

     * 8월, 공화당과 민주당 상원의원들이 GAO 보고서 후 IRS에 이 문제에 대한 투명성을 더 요구했음
          + GAO 보고서는 IRS가 병원이 면세 기준을 충족하는지 확인하기 위한 ""잘 문서화된 프로세스가 없다""는 것을 발견함
     * 10월, 버니 샌더스 상원 HELP 위원회 의장은 이 문제 해결의 필요성을 강조함

IRS의 직접 일차 진료 등 새로운 접근에 대한 적대적 태도 비판

     * IRS는 만성 질환을 다루기 위해 의사들이 개발한 직접 일차 진료 및 기타 창의적인 전략에 대해서도 적대적임
          + 개인이나 가족이 예방에 더 많은 시간을 할애하는 집중 일차 진료인 직접 일차 진료 비용을 세금 공제 대상 건강 저축 계좌 비용에 포함할 수 없도록 허용하지 않음
     * IRS는 계속해서 건강에 대한 선제적 접근이 아닌 질병에 대한 반동적 접근을 확산시키고 있음
          + 만성 질환은 미국에서 사망의 주요 원인이며, 미국인들이 의료에 쓰는 4.5조 달러의 대부분을 차지함
          + 현재의 시스템은 효과가 없음. 대부분의 미국 성인은 정기적으로 4개 이상의 처방약을 복용하고 있어 미국을 세계에서 가장 많은 약물을 복용하는 인구로 만들고 있음
          + 미국은 건강에 대한 새로운 접근법을 시도해야 함

GN+의 의견

     * 저자의 주장처럼 병원들의 부당한 과세 혜택과 비윤리적 관행은 심각한 문제로 보임. 병원이 공공의 이익을 위해 존재하는 것이 아니라 영리 추구를 위해 존재한다면 영리 기업과 동일한 세금을 내는 것이 맞음
     * 다만 모든 비영리 병원을 일괄적으로 비난하기보다는 병원별로 합리적인 기준을 마련해 세제 혜택 여부를 판단하는 것이 필요해 보임
          + 병원 규모, 제공하는 의료서비스 종류, 자선진료 및 공익사업 규모, 의료취약계층 진료 현황 등을 종합적으로 고려할 필요가 있음
     * 한편 저자가 강조한대로 의료 시스템이 사후치료 중심에서 예방 중심으로 전환되는 것이 필요함. 이를 위해 건강보험이나 세제 혜택이 치료뿐 아니라 예방 활동도 적극 지원하는 방향으로 개선되어야 할 것임
     * 장기적으로는 영리/비영리 여부를 떠나 모든 병원이 과도한 영리추구 보다는 윤리경영과 공공성 증진을 위해 노력하도록 유도하는 제도적 장치 마련이 필요할 것으로 보임

        Hacker News 의견

   여기 비영리 병원 관련 이슈를 둘러싼 다양한 의견들을 정리해 보았음:
     * 비영리 단체가 제공해야 하는 지역사회 혜택의 정도에 대한 고민이 필요함
          + 단순히 투자자 이익 배제를 넘어, 세금 면제 혜택을 정당화할 만큼의 공익 기여도 고려해야 함
          + 예를 들어 병원이 많은 수익을 내더라도 환자 부담 경감보다 병원 명성 높이는 데 투자하는 것이 과연 옳은 것인지에 대한 의문이 제기됨
     * 하지만 이를 규제하는 것도 쉽지 않은 문제임
          + 신축이나 연구 투자 등이 반드시 불필요한 지출은 아님. 적정 수준의 판단이 모호함
          + 성공적 비영리 단체라면 불확실한 미래에 대비해 어느 정도 자금을 확보해 두는 것도 필요함
          + 지나치게 친환자 정책을 펼 경우 의료진 이탈, 시설 노후화 등의 문제 직면할 수 있음
     * 정부 지원이 해법이 될 수 있으나 이 또한 쉽지 않음
          + 공익에 부합하는 병원 지원 기준 설정이 모호함
          + 일반 대중은 병원 간 차이를 잘 인지하지 못해 세금 투입에 반대할 수 있음
     * 결국 병원 입장에서는 적정 수준의 영리 추구가 불가피해 보임
          + 생존과 명성 유지를 위해서라도 과도한 환자 중심 정책은 어려움
     * 한편 일각에서는 비영리 병원 자체가 잘못된 구조라는 지적도 나옴
          + 세금 면제 혜택을 악용할 소지가 다분함
          + 자선 병원 봉사에 대한 회의적 시각도 있음
     * 세금 규제 강화 시 회계 조작 등의 편법 동원 가능성도 제기됨
"
"https://news.hada.io/topic?id=14228","llm.c - raw C/CUDA 로 LLM 훈련하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     llm.c - raw C/CUDA 로 LLM 훈련하기

     * Andrej Karpathy가 순수 C/CUDA로 만든 간단한 LLM 훈련 코드
     * PyTorch/cPython이 필요없음
     * 1000 라인 정도의 파일 한개로 GPT-2(CPU,fp32)를 훈련 가능
          + 첫 번째 작동 사례로 GPT-2를 선택한 이유는 최신 스택이 최초로 결합된 LLM의 할아버지이기 때문
     * 즉시 컴파일 및 실행되며 PyTorch 레퍼런스 구현과 정확히 일치
     * 현재 작업중인 내용
          + 훨씬 더 빠르고 아마도 PyTorch에 가까워질 직접 CUDA 구현
          + SIMD 명령어, x86의 AVX2 / ARM의 NEON (예 : Apple Silicon)으로 CPU 버전 속도 향상
          + 보다 현대적인 아키텍처(예: Llama2, Gemma 등)

  Hacker News 의견

     * 프로젝트에 대한 감탄과 함께 현재 CUDA 부분은 아직 구현되지 않았음을 지적함. GPU 코드가 저장소에 아직 없음.

     프로젝트가 더 안정화되면, 이를 구축하는 방법에 대한 자세한 비디오가 제작될 예정임을 기대함.
     * JAX로 구현된 nano GPT를 본 후, 이제 C/CUDA로 구현된 것을 보고 싶어함. Mojo에서 nano GPT가 가능한지 궁금함. Python이 다른 언어에 비해 많은 편리한 기능을 가지고 있음을 인정함.
     * CUDA 직접 구현이 PyTorch보다 훨씬 빠를 것이라는 기대감을 표현함. GPU-RAM 가격을 고려할 때, CPU 속도 향상이 얼마나 될지 궁금함. RTX 시리즈에 SO-DIMM 슬롯을 추가하여 필요에 따라 RAM을 확장할 수 있는지 기술적 문제가 있는지 질문함.
     * GPT-2를 시계열 데이터에 적용하는 방법에 대한 예시가 있는지, 특히 공변량(covariates)을 포함한 경우에 대해 질문함. LLM이 이전 토큰에서 다음 토큰을 예측하는 것과 시계열 예측이 유사하다고 생각함.
     * 자신의 llm.f90 프로젝트에서 이름을 따왔을 것이라고 생각함. Karpathy의 llama2.c를 기반으로 하고 다른 아키텍처를 지원하도록 이름을 변경함. 아마도 우연일 것임.
     * Lex가 Andre와 대화했을 때, Andre는 문제에 대해 긍정적으로 집착하며 ""이것은 반드시 존재해야 한다""고 말했다고 함. 이 프로젝트가 그러한 결과물 중 하나일 것임.
     * 처음부터 시작한다면, 이 코드가 무엇을 하는지, 어떻게 읽어야 하는지 이해를 쌓기 위해 어떤 자료를 참고해야 하는지에 대한 질문. LLM에 대한 지식이 매우 제한적이며, LLM 분야에서 간결한 변수 이름이 표준인지 궁금함.
     * 이 프로젝트를 설명하고 테스트 훈련을 실행하는 방법에 대한 튜토리얼을 만들어주면 좋겠다는 의견. 개인 하드웨어에서 ""실제"" 모델을 훈련하는 것은 현실적이지 않지만, 실용적인 학습 경험이 필요함.
     * CUDA가 AI 수행을 위한 유일한 옵션으로 여전히 자리 잡고 있는지, 아니면 AMD/Intel/기타 AI 수행 방법에 대한 지원이 증가하고 있는지에 대한 궁금증을 표현함.
"
"https://news.hada.io/topic?id=14224","Notepad++: 기생충 웹사이트를 제거하는 데 도와주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Notepad++: 기생충 웹사이트를 제거하는 데 도와주세요

커뮤니티 위협하는 가짜 웹사이트 경고

     * Notepad++ 커뮤니티에 위협이 되는 가짜 웹사이트가 있어 주의가 필요함.
     * 사용자들이 ""Notepad++ 다운로드""를 구글 검색할 때 나타나는 https://notepad.plus/ 웹사이트는 공식 사이트가 아님에도 불구하고 공식 사이트로 오인되고 있음.
     * 이 가짜 사이트는 ""비공식 팬 웹사이트""라고 주장하지만, 실제로는 페이지마다 악성 광고를 포함하고 있어 사용자들을 속여 이익을 취하고 있음.

가짜 사이트 신고 필요

     * Notepad++ 사용자들과 안전한 인터넷 환경을 보호하기 위해, 이 가짜 웹사이트를 신고할 것을 긴급히 요청함.
     * 아래 링크를 통해 https://notepad.plus/를 해로운 사이트로 신고할 수 있음: Report malicious software
     * 커뮤니티를 보호하고 안전한 온라인 생태계를 유지하기 위해 사용자들의 경계심이 중요함.

GN⁺의 의견

     * 이러한 가짜 웹사이트는 사용자들에게 심각한 보안 위협을 가하며, 특히 오픈소스 커뮤니티에 속한 사용자들에게 혼란을 야기할 수 있음.
     * 사용자들은 항상 공식 웹사이트의 URL을 확인하고, 신뢰할 수 있는 출처에서만 소프트웨어를 다운로드해야 함을 상기시켜줌.
     * 이러한 문제는 오픈소스 프로젝트가 직면할 수 있는 일반적인 문제 중 하나로, 프로젝트의 명성과 사용자의 신뢰를 해치는 결과를 초래할 수 있음.
     * 사용자들이 가짜 사이트를 식별하고 신고하는 것은 커뮤니티를 보호하는 데 매우 중요하며, 이는 공동의 책임임을 강조함.
     * 이 기사는 사용자들에게 온라인에서의 보안 의식을 높이고, 자신들이 사용하는 소프트웨어의 출처를 더 신중하게 고려하도록 도움을 줄 수 있음.

        Hacker News 의견

     * 현재 상태로는 notepad.plus가 다운로드 버튼을 클릭하면 공식 웹사이트로 리다이렉트됨.
          + 사이트 자체는 대부분 AI가 생성한 혼란스러운 내용이며, 순위는 이와 같은 기사들에 의해 조작됨.
          + 링크 피라미드 네트워크처럼 보이는 수백 개의 기사가 있지만, 지나치게 미친 수준은 아님.
          + 그러나 Google에 의해 아직 사이트가 처벌받지 않은 것에 놀람.
          + 사이트가 급증하는 것으로 보이며, 추정에 따르면 월간 약 12만 번의 Google 클릭이 있을 것으로 보임.
     * 웹사이트가 폐쇄되기를 바라지만, 악의적이라고 신고하는 것이 올바른 선택인지 확실하지 않음.
          + 이 게시물은 사이트가 악성 소프트웨어를 배포하는지 여부를 나타내지 않음.
          + Safe Browsing 보고서의 목적은 악성 소프트웨어를 식별하는 것이지, 나쁜 행동을 하는 사이트를 식별하는 것이 아님.
          + 호스팅 제공업체에 상표 기반의 항의가 사이트를 내리는 데 더 도움이 될 것으로 보임.
          + 현재 사이트는 유효하지 않은 인증서를 반환하고, 인증서 경고를 무시하더라도 내용이 없음.
          + 이러한 상황이 계속된다면, 사이트가 검색 엔진에 오래 나열되지 않을 것으로 보임.
     * notepad-plus-plus.org가 합법적인 도메인인지에 대한 코멘트에 대한 답변: 가장 강력한 증거는 GitHub의 README 파일에 나타남.
     * Cloudflare를 통해 직접 보고하는 것도 가치가 있을 수 있음.
     * 사이트 소유자가 이 게시물이 올라온 이후 악의적인 광고를 제거했는지 궁금함.
          + 보고서가 유효하기를 바라며, 블로그 포스트의 링크를 사용하지 않고 직접 ""notepad++ 다운로드""를 구글링함.
          + 어떤 페이지에서도 광고를 보지 못함.
          + 불만 사항에 의심의 여지는 없지만, 사이트 소유자가 자취를 감추기 쉬우므로 스크린샷과 타임스탬프가 도움이 될 것임.
     * PuTTY도 몇 년 동안 유사한 문제를 겪고 있음.
     * bsnes 에뮬레이터도 비슷한 문제를 가짐.
          + 공식 ""웹사이트""는 GitHub 저장소이지만, 알려지지 않은 개체가 bsnes.org를 잡아 GitHub에서 호스팅하는 SNES ROM에 대한 링크를 공개적으로 제공함.
          + GitHub은 신경 쓰지 않으며, 권리 소유자가 아니면 아무리 신고해도 아무 조치도 취하지 않음.
     * 보고함. 기생충들을 무너뜨려야 함.
          + Notepad++를 몇 년 동안 사용해왔으며, 훌륭한 소프트웨어임.
     * 패키지 매니저를 사용하는 것의 가장 큰 이점은 불분명한 다운로드 웹사이트를 피할 수 있다는 것임.
          + 새 기계를 설정하거나 모든 패키지를 업데이트하는 것도 쉬움.
     * notepad++를 구글링한 후, 링크만 스크롤하여 클릭하지 않음.
          + 특정 국가의 트래픽을 차단하는 홈 라우터의 지역 차단을 활성화했고, notepad.plus에서 트래픽이 차단되었다는 알림을 받음.
          + 클릭하지 않았음에도 불구하고, 이는 Google이 검색 페이지를 로딩하면서 어떤 데이터를 가져오는 것과 관련이 있을 것으로 추측됨.
"
"https://news.hada.io/topic?id=14353","IT 스타트업의 애자일은 왜 실패할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         IT 스타트업의 애자일은 왜 실패할까?

   애자일 선언 장소에 있었던 17 엔지니어가 왜 새로운 개발 방법론을 논의하게 되었을까?
   우리는 애자일이라는 방법론을 코스프레하고 있는 것은 아닐까?
   애자일 방법론이 우리에게 줄 수 있는 것은 무엇인가?
   사실 깊게 이야기 나눌 수 있는 내용이지만 우리가 사용하고 있는 애자일을 현주소를 환기시키고 무엇인가에 대해서 한번 쯤 돌아볼 수 있는 시간이 있으면 좋겠습니다.

   점점 블로그 클릭유도 글들이 늘어나는 느낌이네요.

   개인 맞춤 설정으로 도메인 평판을 관리할 수 있으면 좋겠습니다..

   동의합니다..

   Show GN에 맞지 않아 이동하였습니다.
   Show 사용방법 을 참고해서 올려주세요.

   제가 사용 방법을 잘못 알고 있었나 보네요. 감사합니다.
"
"https://news.hada.io/topic?id=14272","Google Cloud Next 2024에서 발표된 주요 내용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Google Cloud Next 2024에서 발표된 주요 내용

Google Vids

     * AI 기반 동영상 제작 도구로 Google Workspace에 추가됨
     * Docs, Sheets 등 다른 Workspace 도구와 함께 사용 가능
     * 편집, 작성, 제작 등 모든 기능 제공 및 동료들과 실시간으로 협업 가능

Gemini Code Assist

     * Github Copilot Enterprise와 경쟁하는 AI 코드 완성 및 지원 도구
     * 기존 Duet AI 브랜드 하에서 제공되던 유사 서비스의 후속 버전

Google Workspace 업데이트

     * ""Help me write"" 기능을 통해 이메일 초안을 AI 기반으로 다듬을 수 있음
     * Sheets에서 특정 필드 변경 시 사용자 정의 알림 전송 가능
     * 새로운 템플릿으로 새 스프레드시트 시작이 쉬워짐
     * Docs에서 탭 지원으로 한 문서에서 정보 정리 가능
     * 새로운 AI 회의 및 메시징 부가 기능(메모 작성, 회의 요약, 콘텐츠를 69개 언어로 번역)과 AI 보안 등 신규 기능을 유료($10/월/사용자)로 제공 예정

Imagen 2

     * Gemini에 내장된 이미지 생성기의 개선 버전
     * Vertex AI 개발자 플랫폼 내에서 사용 가능
     * Inpainting, outpainting 등 새로운 기능 포함
     * ""Text-to-live images""로 텍스트 프롬프트에서 4초짜리 동영상 생성 가능

Vertex AI Agent Builder

     * 기업이 AI 에이전트를 쉽게 구축할 수 있도록 지원하는 도구
     * ""Grounding"" 프로세스를 통해 신뢰할 만한 소스(Google 검색 등)에 답변을 연계

Gemini in Databases

     * 데이터베이스 개발, 모니터링, 마이그레이션 시 사용할 수 있는 개발자 중심 AI 도구 모음

보안 도구에 AI 적용

     * Threat Intelligence, Chronicle, Security Command Center 등에 생성형 AI 기반 기능 추가
     * 악성코드 분석, 자연어 기반 위협 검색, 사이버보안 조사 등에 활용

Nvidia Blackwell 플랫폼

     * 2025년 초 Google Cloud에서 사용 가능 예정
     * AI, HPC 워크로드용 HGX B200과 대규모 언어 모델 교육용 GB200 NBL72 지원
     * GB200 서버는 액체 냉각 방식 사용

Chrome Enterprise Premium

     * 기존 Chrome Enterprise 제품군의 보안 기능 확장
     * 브라우저가 기업 내 고부가가치 작업이 주로 이뤄지는 엔드포인트라는 인식에 기반

Gemini 1.5 Pro

     * 현재 Vertex AI에서 공개 프리뷰로 사용 가능한 Google의 가장 강력한 생성형 AI 모델
     * 처리할 수 있는 컨텍스트 크기가 128,000 토큰에서 최대 100만 토큰으로 늘어남

오픈소스 도구

     * Max Diffusion: XLA 장치에서 실행되는 다양한 확산 모델의 참조 구현 모음
     * JetStream: 생성형 AI 모델을 실행하기 위한 새로운 엔진
     * MaxTest: 클라우드의 TPU 및 Nvidia GPU 타겟팅하는 텍스트 생성 AI 모델 모음

Axion

     * Google Cloud의 첫 번째 커스텀 Arm 프로세서
     * Arm의 Neoverse 2 설계를 기반으로 경쟁사 대비 30% 향상된 성능 제공
     * X86 기반 인스턴스 대비 최대 50% 향상된 성능과 60% 향상된 에너지 효율성 제공

   aws의 graviton, azure의 cobalt에 이어 GCP까지 메이저 MSP는 다 자기 ARM 프로세서를 만들었네요.

   확실히 클라우드 서버쪽에서 발열과 전력 두마리토끼를 다 잡을수있어서 좋은거같네요ㅎㅎㅎ
"
"https://news.hada.io/topic?id=14218","Chisel - HTTP를 통해 전송되는 빠른 TCP/UDP 터널","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Chisel - HTTP를 통해 전송되는 빠른 TCP/UDP 터널

     * 주로 방화벽을 통과하는 데 유용하지만 네트워크에 보안 엔드포인트를 제공하는 데에도 사용
     * 클라이언트와 서버를 모두 포함하는 단일 실행 파일(Go로 작성)로 제공
     * 사용하기 쉬우면서 뛰어난 성능
     * SSH 프로토콜을 사용한 암호화된 연결 지원
     * 인증 연결: 사용자 설정 파일을 통한 인증된 클라이언트 연결, 지문 일치를 통한 인증된 서버 연결
     * 클라이언트 자동 재연결 기능(exponential backoff)
     * 클라이언트는 하나의 TCP 연결을 통해 여러 터널 엔드포인트 생성 가능하며, SOCKS 또는 HTTP CONNECT 프록시를 통과할 수 있음
     * 역방향 포트 포워딩 지원(연결이 서버를 통해 클라이언트로 나감)
     * 서버는 리버스 프록시로도 작동 가능하며, SOCKS5 연결도 허용
     * 클라이언트도 역방향 포트 포워딩시에 SOCKS5 연결을 허용할 수 있음
     * ssh -o ProxyCommand를 지원하는 stdio를 통한 클라이언트 연결, SSH over HTTP 제공

   윈도우에서 사용하면 윈도우 디펜더로 악성코드로 감지돼서 사용이 중지됩니다 바리너리에 chisel이란 스트링이 들어가지 않게 소스를 수정해서 빌드하면 안걸립니다

   사전을 찾아보니 Chisel 이란게 '끌'이군요. 뭔가 걸리적거리는 것을 매끈하게 깎아내기 좋은 도구죠.
   이 프로젝트를 통해 거침없이 뭔가를 전송할 수 있게 해주겠다... 라는 의미로 쓴걸까요?

   같은 이름을 가지 다른 프로젝트가 있습니다 - https://www.chisel-lang.org/
   컨셉이 흥미로워서 관심을 가지고 있었는데, 고수준 언어로 FPGA를 쓴다는게 아무래도 현업에서 받아들여지긴 힘들지 싶습니다만, 저 chisel 이라는 이름을 여기서도 쓴 것은, 사용자들에게 그만큼 편의를 제공하겠다는 의미겠죠?

   그냥 이름이 같아서 적어본 뻘글 입니다 ㅎㅎ
"
"https://news.hada.io/topic?id=14316","서머스, "정부 기존 산식 적용 시 2022년 인플레이션 18% 달해"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                서머스, ""정부 기존 산식 적용 시 2022년 인플레이션 18% 달해""

여름: 정부의 이전 공식을 사용하여 2022년 인플레이션은 18%에 도달함

     * 많은 전문가들은 미국 경제가 잘 돌아가고 있다고 보지만, 미국인들은 경제 상태에 대해 비관적인 견해를 가지고 있음
          + 이는 금리 상승이 보통 상품의 가격 상승만큼 인플레이션의 한 부분이라는 것을 미국인들이 파악했기 때문임
          + 전 재무장관 래리 서머스를 포함한 하버드대와 IMF 소속 경제학자들의 새로운 논문에 따르면, ""차입 비용을 포함한 대체 인플레이션 측정치""가 전문가들의 낙관적인 견해와 미국인들의 회의적인 평가 사이의 간극을 설명함

인플레이션은 객관적인 수치가 아니라 판단의 문제임

     * 많은 사람들이 인플레이션 공식 수치가 키나 몸무게처럼 객관적으로 측정될 수 있는 것으로 오해하고 있음
          + 그러나 실제로는 수백 가지의 판단이 필요한 주관적인 것임
          + 예를 들어, 공식에서 어떤 상품과 서비스를 ""바구니""에 포함시켜야 하는지, 서로 다른 상품과 서비스를 어떻게 가중치를 부여할 것인지 등에 대한 판단이 필요함
          + 가장 중요한 것은 주택과 같은 중요한 것들의 가격 변화를 측정하는 가장 좋은 방법이 무엇인지에 대한 것임

소비자 물가에 더 이상 돈의 가격이 포함되지 않음

     * 1983년에 BLS는 소비자 물가 상승률 계산에서 이자 비용을 제외했음
          + 당시 BLS 경제학자 로버트 길링엄은 주택 담보 대출 금리를 CPI 공식에 포함시키는 것이 인플레이션을 과대 평가한다고 주장했음
          + 대신 주택 소유자들이 자신의 집을 임대할 경우 청구할 수 있는 금액을 추정하고, 이를 사용해 주택 인플레이션을 계산해야 한다고 주장했음
     * 이러한 변화는 BLS가 주택 가격과 금융 비용을 공식 CPI 공식에서 제외했기 때문에 CPI 계산에 큰 영향을 미쳤음
          + 그러나 일상생활을 하는 미국인들은 여전히 현실 세계에서 이러한 비용을 경험하고 있음

1983년 이전 공식에 따르면 인플레이션은 어떻게 보일까?

     * Bolhuis 등은 주택담보대출금리, 자동차대출금리, 신용카드이자를 생활비에 포함시킨 1983년 이전과 유사한 공식을 사용하여 공식 CPI 수치를 재계산해 보았음
          + 그 결과 2022년과 2023년의 인플레이션 추정치가 크게 달라졌으며, 2022년 11월에는 18%까지 치솟았음
          + 또한 1983년 이전 CPI 공식이 현대의 이자 비용을 제외한 공식보다 소비자 심리와 훨씬 더 강한 상관관계가 있음을 발견했음
          + 유럽에서도 마찬가지로 높은 금리가 낮은 소비자 심리와 상관관계가 있음을 발견했음

CPI와 1983년 이전 공식 사이의 격차는 시간이 지남에 따라 확대될 수 있음

     * 공식 CPI 인플레이션 율의 하락에 의존하여 소비자들이 느껴야 할 것을 판단하는 데에는 다른 명백한 문제점이 있음
          + 인플레이션은 누적되며, 인플레이션 율의 하락이 이전 연도의 물가 상승을 되돌리지는 않음
     * 가장 중요한 것은, CPI와 연방준비제도(Fed)가 선호하는 개인소비지출(PCE) 측정에서 이자 비용을 제외하는 것이 계속 늘어나는 연방 부채로 인해 시간이 지남에 따라 점점 더 큰 문제가 될 수 있다는 점임
          + 부채가 증가함에 따라 연방정부는 미국과 해외 투자자들로부터 더 많은 돈을 빌려야 함
          + 그러나 미국에 대출하려는 사람들이 미국을 점점 더 파산에 가까워지고 있다고 보기 때문에, 투자자들은 그 돈을 빌려주는 대가로 더 높은 이자율을 요구할 것임

소비자 물가 상승률을 측정하는 방법에 대해 더 건전한 토론이 필요함

     * 전문가의 우위를 믿는 사람들은 오랫동안 BLS의 인플레이션 측정치의 정확성에 의문을 제기하는 사람들을 공격해 왔음
          + 그러나 IMF-하버드 분석에서 보듯이 노동통계국(BLS)도 잘못된 판단을 내릴 수 있음
     * 우리는 경제에서 가격을 측정하는 가장 좋은 방법에 대해 독립적인 사고를 장려해야 함
          + 모든 사람들, 특히 월급으로 살아가는 사람들은 그 결과에 이해관계가 있음

GN⁺의 의견

     * 이 기사는 인플레이션 지표 산정에 있어 전문가들의 편향과 한계를 잘 지적하고 있음. 지표 산정 시 이자 비용 등 중요한 요소를 제외하고 있어, 실제 서민들이 체감하는 물가 상승률과는 큰 괴리가 있음을 보여줌.
     * 특히 주목할 점은 정부 부채 증가에 따른 국채 금리 상승이 장기적으로 인플레이션에 미치는 영향임. 현 정부의 재정 건전성이 의심되는 상황에서 국채 금리 인상은 불가피할 것으로 보이며, 이는 주택담보대출금리 등 각종 대출 금리 인상으로 이어져 물가에 상당한 영향을 줄 것으로 예상됨.
     * 현 정부는 통화 증발을 통해 금리 인상 압력을 억제하고 있으나, 이는 화폐가치 하락을 초래해 또 다른 인플레이션 요인이 될 수 있음. 장기적으로 건전한 재정운용과 함께 실효성 있는 인플레이션 지표 개발이 시급해 보임.
     * 한편, 이 기사에서 언급된 대안적 인플레이션 지표인 Truflation의 시도는 매우 흥미로움. 정부 공식 지표의 한계를 인식하고 빅데이터와 AI 기술을 활용해 보다 현실에 부합하는 물가 상승률을 산정하려는 노력으로 보임. 다만 데이터 수집과 알고리즘의 공정성, 투명성 확보가 관건이 될 것임.

        Hacker News 의견

   요약:
     * CPI는 실제 인플레이션을 잘 반영하지 못함. 다양한 지표를 통해 인플레이션에 대한 멘탈 모델을 구축하는 것이 좋음.
     * 1963년과 비교했을 때, 오늘날 2인이 주 100시간 일해야 1~2명을 부양할 수 있는 수준임. 인플레이션은 추상적인 것이 아니라 우리의 번영을 훔쳐가는 의도적인 접근임.
     * CPI에 이자율을 포함시키는 것에 대한 논거가 명확하지 않음. 이자율이 개인 대출과 주택담보대출에 영향을 미치는 정도에 비례해서만 포함시켜야 함.
     * 이자율로 인해 사람들이 인플레이션을 더 심각하게 느낄 수 있다는 점이 언급되지 않은 것이 흥미로움. 이는 인플레이션 타파를 주장하는 사람들에게 정치적으로 불리할 수 있기 때문으로 보임.
     * CPI는 가격 인플레이션을 측정하는 데에만 국한되어야 함. 개인의 불행을 측정하기 위해서는 '불행 지수'와 같은 별도의 지표가 필요함.
     * 근본적으로 ""돈의 비용이 생활비의 일부""라는 주장에 대해 의문이 제기됨. 1980년대 레이건 시대도 이 논리대로라면 높은 인플레이션 시기였음.
     * 중위 소득 수준은 올랐지만, 주택 가격은 여전히 높음. 이는 공급 부족 때문이며, 이자율 인하로 해결되지 않을 것임.
     * 스웨덴에서는 이자율 변동을 포함한 지표와 제외한 지표(KPIF) 모두를 사용함. KPIF가 올바른 접근법으로 보임.
     * 평균적인 미국인의 대출 규모에 기반해 ""돈의 가격""을 인플레이션 지표에 가중치를 두어 포함시킬 수 있을 것임.
     * 사람들이 인플레이션이 공식 발표보다 훨씬 심각하다고 느끼는 것은 인지 편향 때문일 수 있음. 충격적으로 높은 가격의 상품이 두드러져 보이기 때문.
"
"https://news.hada.io/topic?id=14236","힉스 보손을 발견한 물리학자 피터 힉스 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        힉스 보손을 발견한 물리학자 피터 힉스 사망

Peter Higgs의 삶과 업적

     * Peter Higgs는 Higgs boson을 제안한 노벨상 수상 물리학자로, 94세의 나이로 에든버러 자택에서 사망함
     * 1964년에 boson이 입자에 질량을 부여함으로써 우주를 결합하는 데 어떻게 도움이 되는지 보여주는 연구를 진행함
     * 2013년 물리학 분야 노벨상을 수상했으며, 1964년에 직접적으로 발견에 기여한 벨기에 이론물리학자 François Englert와 함께 공유함

Higgs boson 이론의 증명

     * 2008년부터 본격적으로 시작된 일련의 실험을 거쳐, 2012년 스위스 CERN의 Large Hadron Collider에서 일하는 물리학자들에 의해 그의 이론이 입증됨

Peter Higgs의 경력과 업적

     * 에든버러 대학에서 전문 생활의 대부분을 보냈으며, 2012년 그를 기리기 위해 Higgs Centre for Theoretical Physics를 설립함
     * Royal Society 회원이자 Companion of Honour 훈장 수훈자임
     * CERN의 Director General인 Fabiola Gianotti는 Higgs가 입자 물리학에 대한 탁월한 공헌 외에도 매우 특별한 사람이었다고 평가함
     * CERN의 이론 부서 전 책임자인 John Ellis는 Higgs의 이론이 없었다면 원자가 존재할 수 없었을 것이라고 말함

Peter Higgs의 개인사

     * 뉴캐슬어폰타인 출생으로, 아들 Chris와 Jonny, 며느리 Suzanne, 두 명의 손자를 남김
     * 2008년에 사망한 언어학 강사였던 아내 Jody와는 별거 중이었음
     * 매우 수줍음이 많았고 소동을 싫어했던 것으로 알려짐

GN⁺의 의견

     * Higgs의 이론은 입자 물리학 분야에서 매우 중요한 발견으로, 우주의 기본 구조를 이해하는 데 핵심적인 역할을 함. 이는 물리학 분야뿐만 아니라 과학 전반에 걸쳐 큰 영향을 미침
     * Higgs가 이론을 제안한 후 실제로 입증되기까지 오랜 시간이 걸렸다는 점에서, 과학자로서의 끈기와 인내심이 돋보임. 이는 후학들에게 좋은 본보기가 될 것임
     * 노벨상 수상 이후에도 겸손한 자세를 잃지 않고 과학 발전을 위해 노력했던 그의 모습은 과학자로서 가져야 할 자세를 보여줌
     * 그의 업적은 앞으로도 오랫동안 물리학 분야에서 중요하게 다뤄질 것이며, 후속 연구를 통해 더욱 발전할 것으로 기대됨

        Hacker News 의견

     * 한 인턴이 힉스 입자 발표 전날 CERN에서 힉스 박사를 만난 감동적인 경험담을 공유함. 힉스 박사는 매우 겸손하고 친절한 분이었음.
     * 어린 시절 힉스 메커니즘 예측 스토리가 한 댓글 작성자가 물리학에 빠지게 된 계기가 됨. '조용한 천재' 전형에 꼭 들어맞았고, 천재성은 타고나는 것이 아니라 노력의 산물이라는 믿음을 심어줌.
     * LHC에서의 힉스 입자 검출 발표는 한 댓글 작성자에게 잊을 수 없는 추억으로 남아있음. 당시 부모님께 이 발견이 얼마나 대단한 일인지 열심히 설명했던 기억이 선명함.
     * 힉스 박사가 한 대학 교수의 박사 지도 교수였다는 일화도 공유됨. 힉스 박사는 한 주말 하이킹을 가기 전, 훌륭한 아이디어가 떠올랐으며 돌아와서 자세히 이야기하겠다는 메모를 남겼다고 함.
     * 힉스 입자 검출 당시의 흥분을 기억하는 사람들이 많음. 이론적 예측이 실제로 검증되는 것은 늘 놀라운 일임. 반면 요즘은 검증 가능한 이론적 예측이 많지 않다는 의견도 있음.
     * 힉스 입자 발견은 입자물리학계의 성공이자 비극이라는 견해도 있음. LHC에서 힉스 입자 외에 새로운 것을 발견하지 못한 것은 악몽 같은 시나리오였기 때문.
     * ""Elusive: How Peter Higgs Solved the Mystery of Mass""라는 책이 힉스 입자와 힉스 박사에 대해 잘 설명하고 있다는 추천도 있음. 노벨상 발표 당일 사람들을 피해 산책을 나갔다는 일화도 흥미로움.
     * 힉스 박사가 힉스 입자를 발견한 것이 아니라 제안했다는 지적도 있음. 설명을 제시했을 뿐 실제 발견은 아니었다는 것.
     * ""장례 미사(funeral mass)는 있을까?""라는 말장난도 있음.
"
"https://news.hada.io/topic?id=14292","Dot - 로컬 LLM과 RAG을 쉽게 사용하게 해주는 스탠드얼론 오픈소스 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Dot - 로컬 LLM과 RAG을 쉽게 사용하게 해주는 스탠드얼론 오픈소스 앱

     * Mistral 7B를 로컬에서 사용하여 문서 및 파일을 읽어서 인터랙티브하게 질문하며 이용 가능
          + PDF, Doc, XLS, PPT, Markdown
     * Nvidia의 Chat with RTX와 유사
     * 윈도우 및 애플 실리콘용 앱 제공
"
"https://news.hada.io/topic?id=14315","CUDA로 10억 라인 처리하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           CUDA로 10억 라인 처리하기

   사이트 이용법과 다른 upvoted 글을 참고해 본문을 적절히 적어주세요.
"
"https://news.hada.io/topic?id=14327","Show HN: 1천 달러 예산으로 세입자를 위한 자가설치형 오프그리드 태양광 백업 시스템 제작 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show HN: 1천 달러 예산으로 세입자를 위한 자가설치형 오프그리드 태양광 백업 시스템 제작 사례

태양광 발전 키트로 집에서 전기 생산하기

     * Sunbox Labs에서는 콘도 옥상, 발코니 또는 뒷마당에 쉽게 설치할 수 있는 태양광 발전 키트를 제공함
     * 태양광으로부터 전력을 생산하여 정전 대비, 비용 절감 또는 에너지 독립을 할 수 있음

  작동 방식과 장점

     * 정전 시 UPS(무정전 전원 공급 장치) 역할을 하며 주로 햇빛으로 충전됨. 정전이나 공공 안전 차단을 더 이상 신경 쓰지 않아도 됨
     * 1년 내내 해가 지고 배터리가 방전될 때까지는 비용을 절감해주고, 그 후에는 다시 전력망으로 전환됨. 일반적으로 4년 안에 투자비용 회수 가능
     * 이사할 때 가지고 갈 수 있도록 만들어짐. 트럭 뒤칸에 싣고 이동 가능. 영구적으로 부착되거나 배선되는 것은 없음
     * 건물주 친화적임. 지붕에 구멍을 뚫지 않고 패널을 비파괴적으로 설치 가능
     * 일반 작동 시에는 태양광과 배터리로 작동하지만, 두 전원이 모두 고갈되면 매끄럽게 전력망으로 전환 가능
     * 계통 연계형이 아니므로 전력회사 입장에서는 오프그리드 시스템임. 필요한 경우에만 전력망에서 끌어다 쓰고 역송전은 하지 않음

  사용량 추적 및 시스템 구성

     * 앱으로 사용량과 입력을 추적할 수 있음. Solar Assistant 추천
     * 저장된 태양광으로 냉장고, 인덕션, 주전자, 엔터테인먼트 시스템 등 부엌, 식당, 거실의 대부분을 가동 가능
     * 비밀은 Sunbox가 보통 오프그리드라는 점이며, 전력이 부족할 때만 벽의 콘센트에서 끌어다 씀
     * 단점은 집안에 자체 ""대체 전력 시스템""(긴 흰색 연장 케이블)을 설치해야 한다는 것

  구성 요소 및 비용 (총 $1,124)

     * 1.2kW 태양광 패널 (중고) - 4 x 320W Sunpower T5s @ $50 = $200
          + 중고 패널이 없다면 새것 4 x 455W = $746도 괜찮음
     * 3kW 인버터/컨트롤러/UPS 올인원 - $494
     * 2.5kWh LiFePo4 배터리 - $418
     * 케이블 등 기타 부속품 - $114.09
     * 원격 모니터링 (선택사항) - $94.73 추가

  재정적 투자 회수와 내재 에너지

     * 2024년 기준 Amazon에서 $1,124에 구매 가능
     * 연간 에너지 생산량: 365일 x 4.26h 일조/일 x 1.280kW = 2,000kWh/년 (손실 감안 시 1,000kWh/년)
     * 연간 가치 창출: 1,000kWh/년 x $0.55/kWh (SF 기준) = $550/년 에너지 생산
     * 투자비 회수 기간: $1,124 / $550 = 2년
     * 내재 에너지 관점에서의 녹색 정도:
          + 태양광 패널 생산 발자국: 2,900kWh/kW x 1.28kW = 3,712kWh 내재 에너지
          + 배터리 생산 발자국: 106kWh/kWh x 2.4kWh = 254kWh 내재 에너지
          + 연간 시스템 에너지 생산량: 1100kWh/년
          + 발자국 회수 기간: 3966kWh / 1100kWh/년 = 3.5년

  FAQ

     * 단점은 ""sun box"" 에서 집 안 곳곳으로 연장 케이블을 깔끔하게 배선해야 한다는 것
     * 전력망으로 역송전되지는 않음. 태양광과 배터리 모두 고갈되었을 때만 전력망에서 끌어다 씀
     * 전력회사 입장에서는 냉장고를 콘센트에 꽂는 것과 다를 바 없으므로 합법임

GN⁺의 의견

     * 일반인이 직접 설치할 수 있는 저렴한 태양광 발전 키트라는 점이 매력적임. 특히 이사할 때 가져갈 수 있다는 것도 장점
     * 다만 집안 곳곳에 연장 케이블을 설치해야 하므로 미관상 좋지 않을 수 있음. 배선 정리가 중요할 듯
     * 계통 연계형이 아니라 전력회사와 큰 마찰은 없겠지만, 장기적으로는 역송전도 가능한 시스템이 대세가 될 것 같음
     * 장기 사용 시 배터리 수명이 관건이 될 듯. LiFePo4 배터리의 장단점을 잘 살펴봐야 함
     * 이런 제품이 활성화되려면 전기요금 인상, 정전 빈도 증가, 친환경 필요성 대두 등의 외부 요인도 중요할 것으로 보임

        Hacker News 의견

   Here's a summary of the key points from the Hacker News comments:
     * Landlord Concerns: Many commenters expressed doubts about whether most landlords would approve of this setup due to potential code violations, fire hazards, roof damage, and liability risks.
     * Safety Issues:
          + The exposed wiring and bare terminals of the lithium battery pack are major safety concerns.
          + The long, tacked-up cabling likely violates electrical codes.
          + Insurance might not cover fires or damages caused by this DIY setup.
     * Suggested Improvements:
          + Use a self-contained outdoor box rated for high-energy batteries, with an integrated inverter and PDU.
          + Plug the panels into this box and only bring it inside during outages.
          + Consider purchasing a properly engineered, portable ""battery generator"" instead.
          + Add sandbags to the panels to prevent them from blowing off the roof in high winds.
     * Cost-Effectiveness: Despite the safety issues, the low cost of this setup is impressive. In areas with high electricity rates like San Francisco ($0.55/kWh), the payback period could be as short as one year.
     * Alternative Approaches:
          + Buy decommissioned commercial solar panels for even greater cost savings.
          + Use a large power brick that doesn't require solar access for backup during outages.
          + Pair a small chest freezer with a power brick for food storage during outages.
          + Set up an off-grid solar system to charge an electric vehicle without connecting to the house or grid.
     * Necessary Addition: Commenters emphasized the need for hardware to securely fasten the panels to the roof to prevent wind damage.
"
"https://news.hada.io/topic?id=14255","Shorebird 1.0 - Flutter 앱을 위한 Code Push (핫 업데이트)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Shorebird 1.0 - Flutter 앱을 위한 Code Push (핫 업데이트)

     * Flutter 앱에서 Web/React Native 처럼 새로운 코드를 즉시 업데이트(Code를 Push 또는 Hot Update) 할 수 있도록 해줌
     * 5분안에 앱에 통합 가능하며 코드 변경이 필요하지 않음, 플러터 앱의 모든 Dart 코드를 즉시 업데이트 가능
     * 안드로이드/iOS 모든 기기 지원
     * Flutter를 만든 개발자가 구글을 떠나서 Shorebird 라는 Flutter 관련 회사를 창업하고 새로 만든 프로젝트
     * 1년간 Dart를 위한 새로운 툴체인과 커스텀 인터프리터를 작성(애플/구글 스토어 규정 준수를 위해)
"
"https://news.hada.io/topic?id=14223","C++ Insights – 컴파일러의 눈으로 소스 코드 살펴보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  C++ Insights – 컴파일러의 눈으로 소스 코드 살펴보기

     * Clang 기반의 소스-투-소스 변환 도구
     * C++ 개발자들에게 컴파일러가 배후에서 소스 코드를 어떻게 이해하고 변환하는지를 시각적으로 보여주는 유용한 도구
          + 클래스와 객체 생성, 복사, 참조 등의 코드가 컴파일러에 의해 어떻게 처리되는지를 보여줌
          + 람다, 범위 기반 for 루프, 구조화된 바인딩 등의 변환을 볼 수 있음
     * 목표는 컴파일 가능한 코드를 생성하는 것이지만, 모든 경우에 가능한 것은 아님
     * 온라인에서 사용 가능함: cppinsights.io
"
"https://news.hada.io/topic?id=14259","열차역 내 비밀 아파트 건설한 Bay Area 근로자들에 대한 기소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 열차역 내 비밀 아파트 건설한 Bay Area 근로자들에 대한 기소

        Hacker News 의견

     * Untergunther라는 단체가 파리의 유명 건물 시계 뒤에 아파트와 작업실을 만들고 수리한 뒤 떠난 것에 비하면, 이번 사건은 사랑스러울 정도로 아마추어 작품으로 보임
     * 열차역에 50,000달러 밖에 들이지 않고 아파트를 지은 이들을 샌프란시스코 공무원 고위 관리직에 승진시켜 홈리스 문제를 해결할 수 있을 것임
     * ""열차역 내 아파트""가 실제로 어떤 모습일지 상상하기 어려움. 사진이 있으면 좋겠음
     * 캘트레인이 이제 발각된 이 ""비밀 아파트""를 어떻게 할 지 궁금함. 직원들이 공식적으로 사용하게 할 것인지, 일반인에게 임대할 것인지(보안 문제로 어려울 수 있음), 그냥 방치할 것인지, 파괴할 것인지 등
     * 변호사가 ""근무 관련 목적""(예: 초과 근무 후 쉴 곳을 마련해 휴식을 취하고 업무 성과를 높이는 등)으로 지었기에 ""공금 오용""이 아니라고 주장할지, 그리고 그 주장이 법관이나 배심원에게 통할지 궁금함
     * 잘못된 일이지만, 여전히 인상적인 수준의 헌신과 비용 효율적인 작업이었음을 인정할 수 있음
     * 2000년경 한 예술가가 로드아일랜드 쇼핑몰에서 비슷한 일을 했는데, 건설 후 남은 빈 공간을 찾아 가구가 갖춰진 아파트로 만들었음. 그는 여전히 그 건물 출입이 금지된 것으로 알려짐
     * 약 1년 전, 뉴올리언스 하수도 위원회에서 ""비밀 섹스룸""이 발견됨
     * 전 캘트레인 부국장 조셉 나바로와 계약자 세스 앤드류 워든이 역사적인 벌링게임역과 밀브레이역에 미니 아파트를 짓는 데 공금을 오용한 혐의로 기소됨. 두 시설 모두 대중이 사용하지 않음
     * 낚시성 제목. 자신들의 자금을 사용했다면 그냥 그만두라고 했을 것임. 노숙자들은 야영하다 잡혀도 보통 기소되지 않음
     * 형량을 감형하고 공공주택 담당으로 임명하는 것은 어떨지. 주정부보다 훨씬 저렴하게 하고 있는 것 같음
"
"https://news.hada.io/topic?id=14270","Oh My Git! - Git 학습을 위한 오픈소스 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Oh My Git! - Git 학습을 위한 오픈소스 게임

     * 실시간으로 Git 저장소의 내부 구조를 시각화해주는 게임
          + 플레이어는 자신의 행동 결과를 즉시 볼 수 있음
     * 윈/맥/리눅스용 바이너리 제공
     * Git에 익숙하지 않은 사람들을 위해 맞춤 제작된 플레잉 카드 인터페이스를 제공함
          + 카드는 새로 도입된 Git 명령어를 기억하는 데 도움을 줄 뿐만 아니라 간단한 설명과 아이콘을 포함하고 있어 액션과 문서를 결합함
     * 고급 사용자나 호기심 많은 플레이어를 위해 임의의 Git 명령을 실행할 수 있는 통합 터미널을 제공함
          + 게임에 ""진짜"" Git이 통합되어 있어 플레이어가 Git의 모든 기능을 시도하고 배울 수 있음
     * 팀에서 협업을 위해 Git을 사용하는 방법을 가르치기 위해 Oh My Git!은 원격 저장소와 상호 작용하는 방법과 여러 저장소를 다룰 때 존재하는 워크플로우에 중점을 둠

GN⁺의 의견

     * Git의 내부 구조를 실시간으로 시각화해주는 것은 Git을 배우는데 큰 도움이 될 것 같음. 실제로 명령어를 실행하면서 어떤 변화가 일어나는지 바로 확인할 수 있다는 점이 가장 큰 장점으로 보임
     * 초보자를 위해 플레잉 카드 인터페이스를 제공한 점도 훌륭함. 게임을 하면서 자연스럽게 Git 명령어를 익힐 수 있을 것임
     * 고급 사용자를 위한 통합 터미널 제공 및 협업 워크플로우에 중점을 둔 것도 Git의 실제 활용 측면에서 좋은 접근으로 보임
     * 다만 아쉬운 점은 현재 자금난으로 개발 지속이 불투명하다는 것. 오픈소스 프로젝트의 지속가능성 확보가 중요한 과제임
     * Git을 배우고자 하는 초보 개발자들에게 적극 추천하고 싶은 게임임. 다른 방식의 Git 학습 도구로는 Learn Git Branching 사이트가 있음

        Hacker News 의견

     * Oh My Git!이라는 깃 학습 게임의 2.0 버전 개발을 위한 펀딩을 받았다는 소식이 전해짐. Godot 엔진으로 제작되었으며, 특히 레벨 생성 방식과 사용자 정의 레벨을 위한 파일 포맷이 KISS(Keep It Simple, Stupid) 원칙을 잘 따르고 있다는 평가.
     * 몇 년 전 컨퍼런스에서 이 게임이 소개되었을 때 인상 깊었으나, 당시에는 리눅스 배포판에서 사용할 수 있는 .deb이나 .rpm 패키지가 제공되지 않아 직접 빌드해야 했음. 최근 몇 달 동안 약간의 커밋이 있었지만, 아직 대중적으로 널리 사용되기 전에 개발이 중단된 것으로 보임.
     * 최근 HN에 소개된 새로운 Git 명령어들이 이 게임에 포함되어 있는지 궁금해 하는 의견과 웹/WASM으로 컴파일되면 좋겠다는 의견이 있음. 또한 learngitbranching.js.org와 같은 다른 Git 학습 도구도 소개됨.
     * 라이선스가 매일 바뀌고 있으며, 2월에 펀딩이 끝날 예정이라는 점에서 우려를 표하는 의견도 있음.
     * 리누스 토발즈가 이 게임을 하면 어떤 점수를 받을지 궁금해 하는 의견과 LKML(Linux Kernel Mailing List) 구성원들이 이 게임을 해보고 리더보드를 공개하면 재미있을 것 같다는 의견도 있음.
     * 게임 내에서 vim을 실행했다가 빠져나오는 방법을 묻는 질문과 젊은 개발자들이 게임을 통해 Git을 배우는 것을 좋아할 것이라는 의견, 신입 인턴들에게 유용할 것 같다는 의견 등 다양한 반응이 있음.
"
"https://news.hada.io/topic?id=14242","Fairbuds: 교체 가능한 배터리를 탑재한 인이어 이어폰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Fairbuds: 교체 가능한 배터리를 탑재한 인이어 이어폰

Fairbuds 무선 이어폰 소개

     * Fairphone에서 출시한 Fairbuds는 프리미엄 사운드와 내구성을 갖춘 무선 이어폰
     * 3년 품질 보증, 14일 무료 체험 및 전액 환불 보장
     * 충전 케이스를 포함한 배터리 교체 가능
     * 2가지 색상의 아이코닉한 디자인 제공

프리미엄 사운드 품질

     * 액티브 노이즈 캔슬링(ANC) 기능으로 몰입감 있는 음악 감상 또는 주변 소리와 연결 선택 가능
     * 티타늄 코팅된 11mm 프리미엄 드라이버로 풍부하고 균형 잡힌 사운드 제공
     * 멀티 디바이스 연결 지원으로 여러 기기 간 자유로운 전환
     * iOS, 안드로이드용 전용 앱으로 EQ 설정 및 최신 소프트웨어 업데이트 제공
     * 이어버드 6시간, 충전 케이스 20시간 사용 가능

내구성과 수리 용이성

     * 3년 품질 보증 제공
     * 무선 이어폰 분야에서 Fairphone의 시그니처인 내구성과 수리 용이성을 적용
     * 충전 케이스와 양쪽 이어버드의 배터리 교체 가능
     * IP54 등급의 생활 방수 및 땀 방지 기능

공정하고 친환경적인 제작

     * 공정하고 재활용된 소재 사용
     * 공정한 공장에서 제조
     * 기후 의식적이고 전자 폐기물 중립적인 제작 과정

우수한 노이즈 캔슬링과 통화 품질

     * 액티브 노이즈 캔슬링과 첨단 윈드 노이즈 감소 기능
     * 6개 마이크 어레이를 통한 ENC로 깨끗한 통화 음질 제공

사용 편의성

     * 앱을 통한 EQ 설정 및 펌웨어 업데이트
     * 3가지 사이즈의 이어팁 제공
     * 여러 기기 자동 연결 및 자동 재생/일시정지 기능
     * 이어버드 터치 컨트롤로 재생과 볼륨 조절

주요 사양

     * 블루투스 5.3
     * USB-C 충전
     * 이어버드 45mAh, 케이스 500mAh 배터리
     * 11mm 드라이버
     * IP54 방수 등급
     * Fairphone 3/3+/4/5 호환

GN⁺의 의견

     * 친환경 소재 사용과 긴 품질 보증 기간은 바람직하나, 가격이 비싼 편임. 이는 공정 무역 제품의 숙명일 수 있음.
     * 배터리 교체 가능은 큰 장점이나, 교체용 배터리 가격과 판매처가 중요할 듯. 배터리 성능 저하로 교체 수요가 생기는 시기에 적정 가격에 구매할 수 있어야 함.
     * 앱을 통한 펌웨어 업데이트와 EQ 설정은 이어폰 수명 연장에 크게 기여할 듯. 지속적인 앱 지원이 관건.
     * IP54는 가벼운 생활 방수에는 충분하나 운동 중 사용에는 부족할 수 있음. 가격 대비 IP67 정도는 되면 좋겠음.
     * 고가 이어폰 시장에서 경쟁력 확보가 관건. B&O, Master & Dynamic 등 프리미엄 오디오 브랜드들과 차별화된 강점 필요.

        Hacker News 의견

     * Fairphone이 3년 만에 수리 불가능한 TWS 이어버드 대신 오리지널 디자인을 내놓은 것에 대해 사용자에게 더 지속 가능한 옵션을 제공하려는 노력을 인정하는 의견이 있음
     * 그러나 배터리를 사용하지 않는 유선 이어폰을 직접 사용할 수 있도록 이어폰 잭을 제거하기로 한 결정을 번복해야 한다는 지적도 있음
     * Fairphone이 무선 이어버드를 판매하기 위해 오히려 이어폰 잭을 제거했다는 비판적 의견도 있음
     * 배터리 수명 때문에 이어버드/헤드폰을 교체한 경험은 없고, 대개 분실하거나 파손되어 고장 난다는 반론도 제기됨
     * Sony WF-1000XM3,4는 배터리 교체가 쉬웠으나 최신 XM5에서는 오히려 후퇴했다는 지적이 있음
     * 2024년 출시 예정인 제품 치고는 최신 코덱이나 LE 오디오를 지원하지 않아 통화 품질이 좋지 않을 것이라는 우려도 있음
     * 배터리 교체형 개발보다는 이어버드 재활용 프로세스를 마련하는 게 더 현실적일 수 있다는 의견도 있음
     * 수리 가능성은 좋지만 Fairphone 팬이 아니라면 매력을 느끼기 어려울 수 있음. 음질, 마이크 품질, 노이즈 캔슬링 등 경쟁력 있는 차별화 요소가 필요함
     * ANC 성능이 경쟁력 있기를 희망하지만 음성 패스스루 기능이 부족한 점이 아쉬움. 케이스에 'Fairbud' 대신 'Fairphone' 브랜드를 새기는 게 나았을 것이라는 의견도 있음
"
"https://news.hada.io/topic?id=14351","ChatGPT의 미래 텔링 능력: 향상된 예측을 위한 내러티브 프롬프트 탐색","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ChatGPT의 미래 텔링 능력: 향상된 예측을 위한 내러티브 프롬프트 탐색

   • 본 연구는 OpenAI의 ChatGPT-3.5와 ChatGPT-4의 예측 능력을 직접 예측과 미래 내러티브라는 두 가지 뚜렷한 프롬프트 전략을 사용하여 조사한다.

   • 분석은 2021년 9월 모델의 훈련 데이터 컷오프 이후 2022년에 발생한 이벤트에 초점을 맞추어 미래 이벤트를 예측하는 능력을 평가한다.

   • 연구 결과는 향후 내러티브 프롬프트가 특히 주요 아카데미상 수상자와 경제 동향을 예측하는 데 ChatGPT-4의 예측 정확도를 크게 향상시킨다는 것을 보여준다.

   • ChatGPT의 내러티브 프롬프트는 환각 내러티브 구성을 위한 능력을 활용하여 직접 예측에 비해 보다 효과적인 데이터 합성 및 외삽을 가능하게 한다.

   • 이 연구는 대형 언어 모델(LLM) 예측 능력의 새로운 측면을 강조하고 분석 맥락에서 잠재적인 응용 프로그램을 제안한다.

   • 연구팀은 2명의 연구 보조원을 고용해 프롬프트당 50회 ChatGPT에 질의해 답변 분포를 생성한 결과 프롬프트당 총 100회 시행됐다.

   • 결과는 각 프롬프트에 대한 답변의 전체 분포를 설명하는 상자 그림으로 표시되어 모델의 성능과 한계에 대한 통찰력을 제공한다.
"
"https://news.hada.io/topic?id=14318","PostgreSQL Index Advisor","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PostgreSQL Index Advisor

     * 쿼리 성능을 향상하기 위한 인덱스를 추천해주는 PostgreSQL 확장 by Supabse
     * index_advisor() 함수에 쿼리를 넘기면 스타트업/전체에 대한 이전/이후 비용과 인덱스 생성용 SQL DDL을 리턴해줌
          + 실행: select * from index_advisor('select book.id from book where title = $1');
          + 리턴: {""CREATE INDEX ON public.book USING btree (title)""}
     * 복잡한 쿼리에 대해서는 여러개의 인덱스 생성문을 리턴하기도 함
     * 제네릭 파라미터 지원 ($1, $2, ..)
     * Materialized View 지원
     * 뷰에 의해 가려진 테이블/컬럼 식별 가능

   현재 버전에서는 컬럼 하나짜리 btree 인덱스만 추천해줍니다. 조회조건이 복잡해지거나 full text 검색을 하고 있다면 이용할 수 없습니다 https://supabase.com/docs/guides/…

   조회조건이 복잡한 경우 다중컬럼 인덱스 대신 단일컬럼 인덱스 여러개가 사용된다고는 하는데 정확히 같은 동작을 하지는 않는 것으로 보입니다. 혹은 다중컬럼 인덱스와 단일컬럼 인덱스 여러개를 동시에 사용하는게 최선인 상황도 있다고 합니다

   https://www.postgresql.org/docs/current/indexes-bitmap-scans.html

  Hacker News 의견

     * 테이블에 실제로 저장된 데이터를 기반으로 더 효율적인 데이터 타입을 추천해주는 기능이 있으면 좋음
     * 느린 쿼리를 자동으로 감지하고 필요한 인덱스를 생성하는 데이터베이스가 있으면 좋겠음
          + 애플리케이션에서 로드 테스트를 실행하면 데이터베이스를 호출하고 쿼리를 수집한 다음, 데이터베이스가 자동으로 조정됨
     * HypoPG가 RDS에서 1년 이상 사용 가능했다는 것을 몰랐음
     * 3개 이상의 join에서 한 relation에 인덱스를 사용하길 원하지만, CTE에 limit를 걸지 않으면 Postgres가 각 join을 병렬로 실행하려 하고 수많은 행을 join하려고 함
          + 요즘 쿼리 플래너를 다루는 것이 pg와 헤어질 것 같음
     * CockroachDB에는 유사한 기능이 내장되어 있음
          + 느린 기존 쿼리를 가져와서 더 나은 쿼리 계획을 위해 가상 인덱스를 분석하고 제안함
          + 콘솔 UI에서 한 번의 클릭으로 추가할 수 있음
     * Presto나 Spark와 같은 분산 쿼리 엔진에서 인덱스 대신 파티션과 버킷을 사용하여 비슷한 작업을 수행함
          + 이는 계산, 시간, 비용을 줄일 수 있음
     * Vanilla Pl/PgSQL로 작성되어 편리함
          + index_advisor(text) 함수를 세션에 복사하고 하드 코딩 및 휴리스틱을 시작하고 싶은 유혹이 있음
          + 대부분의 의미 있는 확장은 컴파일, 설치, 생성, 삭제가 필요함
     * TiDB의 TiAdvisor와 유사하며, 가상 방법을 사용함
     * pghero를 사용 중이며, GUI로 이 기능을 제공함
     * 관련된 트레이드오프에 대한 고려나 통찰력은 제공하지 않는 것 같음
          + 기본 확장인 HypoPG는 쿼리 플래너에 영향을 미치는 데이터에 대한 통계를 수집하지 않는 것 같음
     * 상속된 부모 및 자식 테이블을 인식하는지 여부가 궁금함
"
"https://news.hada.io/topic?id=14312","의사라는 직업의 어두운 이면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            의사라는 직업의 어두운 이면

의사로서의 어두운 면

     * 의사로서 13년 동안 훌륭한 외과의사가 되기 위해 노력해왔음. 훌륭한 가족의 지지, 아내도 의사라서 내 일을 이해해줌. 정신질환 진단을 받은 적 없음.
     * 브리즈번의 소화기내과 전문의 앤드류 브라이언트 박사의 자살 소식이 마음에 와닿음. 그의 아내가 솔직하고 용기 있는 편지를 썼음.
     * 심각한 자살 충동은 없었지만, 많은 의사들처럼 어두운 시기를 겪었음. 우울증, 불안, 탈진, 자살 충동, 절망감, 무기력, 무쾌감증, 걱정 등은 모두 내외부 스트레스에 대한 부정적 인간 반응의 다른 모습들임.
     * 어두운 시기를 자세히 살펴보면 일부 공통적인 주제가 나타남. 직장은 종종 그런 어두운 시기를 악화시키고 지속시키는 중요한 요인. 외과의사로서 인생의 대부분을 직장에서 보내기에 직장에서 일어나는 일이 결혼, 가정, 사회생활 등 삶의 모든 측면에 영향을 미침.

      절망의 어두운 구렁텅이로 몰아넣었던 3가지:

        1. 통제력 상실

     * 하루 일과에 대한 통제력을 잃음. 14일 중 12일을 24시간 대기하는 병원에서 일한 적 있음. 2주마다 주말 휴무.
     * 수술 시험 준비할 때는 매일 아침 6시 30분부터 밤 10시까지 일하고 공부하며 주말 점심에만 가족을 봄.
     * 4개 캠퍼스를 포함하는 병원 네트워크에서 일하며 주당 500km를 운전.
     * 며칠씩 집에 못가고 병원 숙소, 외래 진료소 벤치, 차에서 자기도.
     * 언제 집에 갈 수 있을지 몰라 차 트렁크에 침낭, 세면도구, 옷 보관.
     * 응급상황 때문에 매일 계획이 바뀜. 당직 때는 다음 한 시간에 무슨 일이 일어날지도 확신할 수 없음.
     * 일을 줄이는 게 쉽지 않음. 내가 일을 덜 하면 누가 병원을 커버할 것인가? 병원이 다른 의사를 고용하지 않는다면 환자를 방치할 수 없음. 당직할 의무가 있다는 사실을 인정함.

        2. 지원 상실

     * 아침 6시 출근. 작성하지 않은 퇴원 요약지 수와 완료해야 할 컴퓨터 기반 모듈(손 씻기, 개인정보 보호, 환자 들어올리기 등)에 대한 이메일 알림으로 하루 시작.
     * 7시 회진 시작. 15-20명의 환자를 만나 여러 이동 서식, 증명서, 처방전 등 작성해야 함. 사용하기 불편하고 로그인 시간이 오래 걸리는 전자 의료 시스템을 통해 모두 처리.
     * 8시 과부하 수술 시작. 7건 예약됨. 수술대 순서나 환자 결정권 없음.
     * 첫 환자 체크인 안됨. 당뇨 환자는 저혈당. 유아는 까다로움. 자폐 아동은 도망감. 통역사 도착 안함. 컴퓨터 로그인 안됨. 비밀번호 만료.
     * 병원 예약실에서 컴퓨터에 기록된 평균 시간에 따라 모든 편도선 절제술이 14분 걸린다고 판단. 수술 시작하면 타이머 시작. 긁어내면 타이머 정지.
     * 통역 시간, 마취 전 시간, ICU 이송을 고려하지 않아 수술이 지연됨. 간호 책임자는 제시간에 끝내라고 압박. 케이스당 14분 정도 걸렸지만 외부 임상적 이유로 팀이 지연됨.
     * 응급실, GP, 다른 부서에서 전화 12통 받음. 이제 응급실에 3명 대기 중이고 1명은 다른 병원에서 이송 중. 오후 진료 늦게 도착하니 간호사들 불만. 전화 받으며 8-10명 진료.
     * 복잡한 수술에 대해 환자와 상의하려 해도 전화와 서류작업으로 계속 방해받음. 응급 수술 위해 수술실로 달려감. 피곤하고 불만스러우며 해야 할 일들로 머리 가득 차서 실패하기 쉬운 상태.
     * 오후 회진, 더 많은 협진, 입원 등 처리하고 편지 받아씀. 24시간 당직 동안 70통 이상 전화 받음. 오후 6시 완전히 지침.
     * 칩, 생강 맥주 집어 들고 작성하려던 서류 시작. 앞으로 며칠간의 증례 노트 검토. 오후 7-8시 귀가해 저녁 먹고 아이들 재움.
     * 한밤중 응급 수술 위해 병원으로 불려감. 자정 직후 돌아와 잠. 자정부터 오전 6시 사이 4번 더 호출당함.
     * 아침 6시, 반복.

        3. 의미 상실

     * 신체적, 정서적 스트레스는 비교적 관리 가능. 일의 흥분과 지적 도전이 많은 개인적 만족감을 가져다줌.
     * 죽어가는 암 환자, 응급 기도 재난, 아픈 복잡한 아이들을 다루며 정서적으로 흔들리기도 하지만 견딤.
     * 가장 큰 고통을 주는 것은 환자와의 의미 있는 임상적 관계를 앗아가는 끊임없는 행정적 압박임. 많은 젊은 의사들도 이런 경험을 하는 것 같음.
     * 의학은 의미 있는 추구였으나 지금은 피곤한 산업이 됨. 기쁨, 목적, 의미가 규격화, 살균, 프로토콜화, 산업화, 규제화 됨.
     * 의사들은 더 이상 숭고한 소명이 아닌 효율성, 생산성, 핵심 성과 지표의 족쇄에 갇힘.
     * 수술 목록이나 진료 일정을 정하는 데 거의 발언권이 없음. 심지어 수술 목록 순서를 정하는 권한조차 외과의에게서 빼앗김.
     * 하고 싶은 일(수술 & 환자 진료)이 측정, 기록, 벤치마크 됨. 숫자를 채우기 위해 진료 예약이 초과됨. 환자 한 명당 서류작업은 해마다 늘어남.
     * 비임상 부서에서 내가 무엇을 어떻게 해야 하는지 지시함. 그 기치는 ""비용 효율성과 생산성 향상"".
     * 환자를 위해 많은 희생을 감수하며 의학에 입문. 오늘날 현대 의학에서 의사는 복잡한 산업의 많은 상품 중 하나일 뿐.
     * 더 이상 환자에 관한 것이 아니라 병원 사업에 관한 것. 환자 만족 담당자, 수술실 활용 담당자, 환자 흐름 조정자 등은 모두 사업 역할.

GN⁺의 의견

     * 의사라는 직업 자체가 가진 어려움과 스트레스가 있지만, 그것이 병원이라는 조직 내에서 구조화되면서 더 큰 문제를 낳는 것 같음. 의료서비스의 효율성을 높이려는 병원 경영진의 입장과 환자를 위해 최선을 다하려는 의사 개인의 입장이 상충되는 지점이 있어 보임.
     * 의사 개인이 환자를 위해, 그리고 스스로의 업무 만족을 위해 희생하고 노력하는 것도 중요하지만, 의료 시스템 전반의 문제를 개선하기 위한 노력도 필요해 보임. 의사회 등 직역 단체나 시민사회가 함께 목소리를 내고 대안을 모색할 필요가 있음.
     * 환자를 대하는 의사의 태도나 자세 못지않게 의사를 대하는 병원/사회의 태도와 인식 개선도 중요함. '슈퍼맨'처럼 무한정 일할 수 있는 존재가 아니라 휴식과 보호가 필요한 전문직 종사자로서 인정받아야 함.
     * 의료사고 등 문제 발생시 의사 개인에게 과도한 책임을 묻기보다는, 근본 원인을 시스템 차원에서 분석하고 개선하려는 노력이 필요함. 문제의 책임을 의사에게 전가하면 방어진료 등 부작용만 키움.
     * 의사들이 심리적 어려움을 겪을 때 주저없이 도움을 요청할 수 있는 상담 시스템과 휴식 보장 제도 등이 필요해 보임. 의사도 인간이므로 정신건강 측면에서 보호받을 권리가 있음.

        Hacker News 의견

     * 의사 수의 제한과 과도한 업무량의 문제점이 지적됨. 영국에서는 의대생 수를 제한하고 있어 의사가 되고자 하는 우수한 인재들이 과학자가 되는 경우가 있음. 의사 수를 늘려 업무 강도를 낮추는 것이 바람직함.
     * 의료계의 열악한 근무 환경은 전 세계적인 문제로 보임. 호주, 네덜란드, 벨기에, 독일, 영국, 인도 등 여러 나라에서 공통적으로 나타나는 현상임. 반면, 항공 분야에서는 피로로 인한 사고 방지를 위해 근무 시간 제한 등의 조치를 취하고 있음.
     * 병원 경영진의 문제로 의사 부족 현상이 발생하고 있음. 의사 개인이 근무 강도를 조절하기 어려운 구조임. 의대 교육 과정에서부터 스트레스가 많은 환경에 적응하도록 훈련되어, 과도한 업무량을 거부하기 어려운 상황임.
     * 의료계에는 '영웅 문화'가 만연해 있음. 일에 매진하는 것이 미덕으로 여겨지고, 워라밸은 약한 사람들의 몫으로 치부됨. 정작 사람을 돕는 의료인들 사이에서는 각박한 분위기가 형성되어 있음.
     * 의사의 행정 업무 부담이 높은 점도 스트레스 요인으로 작용함. 오래된 EMR 시스템 사용, 제한된 진료 시간 등의 문제가 있음. AI 기술이 의료 분야에 도입되고 있으나 실제 활용도는 미지수임.
     * 젊은 세대 의사들은 과도한 업무량을 거부하는 경향이 있음. 이는 캐나다 등지에서 의사 부족 현상의 원인 중 하나로 지목됨.
     * 호주에서는 의료 시스템을 악용한 사례들이 주목받고 있음. 젊고 이상주의적인 의사들에게 실망감을 안겨주는 요인이 되고 있음. 규제 당국으로서는 불량 의료인을 걸러내면서도 선량한 의사들의 열정을 꺾지 않는 방안을 모색해야 하는 과제를 안고 있음.
"
"https://news.hada.io/topic?id=14310","pqJQ - Postgres에서 jq 사용하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       pqJQ - Postgres에서 jq 사용하기

     * jq 컴파일러를 Postgres에 내장하게 해주는 확장
     * jqprog 데이터 타입을 추가 하고 jq(jsonb, jqprog) 함수를 추가해서 jsonb 개체에 실행 가능
          + 표준 jsonb 함수, 연산자 및 jsonpath와 원활하게 연동됨
     * SELECT jq('[{""bar"": ""baz"", ""balance"": 7.77, ""active"":false}]'::jsonb, '.[0].bar');
"
"https://news.hada.io/topic?id=14275","HN 공개: 박사 학위 논문을 위해 3D 프린터 필라멘트로 새로운 센서 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 공개: 박사 학위 논문을 위해 3D 프린터 필라멘트로 새로운 센서 제작

OptiGap 센서 시스템 개발에 대한 R&D 사례 연구

     * 이 글은 필자의 박사 논문 연구의 핵심 요소인 새로운 센서 시스템 OptiGap의 연구 개발 과정을 탐구함
     * 스토리텔링 형식으로 의사 결정 과정과 최종 구현까지의 진화 과정에 대한 통찰을 제공하고자 함
     * 박사 연구의 때로는 감추어진 세계를 엿볼 수 있는 기회를 제공하고, 이 과정에 호기심이 있는 사람들의 흥미를 끌 수 있을 것임
     * 이 주제에 대한 기술적 세부 사항, 시뮬레이션 및 기존 연구에 대해 더 자세히 알고 싶다면 필자의 학위 논문을 온라인에서 볼 수 있음

  OptiGap 센서 시스템의 기능

     * 매우 일반적인 용어로, 이 센서는 기본적으로 구부러지면 길이를 따라 어디가 구부러졌는지 알려줄 수 있는 로프와 같음
     * 이를 ""굽힘 위치 추정(bend localization)""이라고 부름
     * OptiGap의 적용 분야는 주로 전통적인 센서 사용이 종종 실용적이지 않은 유연한(또는 '말랑말랑한') 시스템을 포함하는 소프트 로보틱스 영역 내에 있음
     * OptiGap이라는 이름은 ""광학(optical)""과 ""갭(gap)""의 합성어로, 굽힘 위치 추정에 필수적인 코딩된 패턴을 생성하기 위해 유연한 광파이프 내의 공기 간격을 활용하는 핵심 원리를 반영함

  OptiGap 센서 시스템의 시작

     * 필자가 굽힘 감지 센서로 사용하기 위해 다양한 광파이프(광케이블)를 통한 광 전송을 실험하는 동안 OptiGap의 아이디어가 나옴
     * 처음에는 광섬유를 통해 빛을 효과적으로 ""느리게"" 하는 방법을 보려고 했음
     * 이 과정에서 필자는 실험을 위해 투명한 3D 프린터 필라멘트(1.75mm TPU) 조각을 줄자에 부착했고, 우연히 전기 테이프가 부착된 지점에서 줄자(및 필라멘트)를 구부렸을 때 광 전송이 상당히 감소한다는 것을 발견함
     * 이는 전기 테이프의 끈적끈적한 잔여물이 필라멘트를 늘어나게 하여 광 전송을 감소시키기 때문이라고 가설을 세움
     * 가설을 검증하기 위해 필자는 줄자에 더 긴 TPU 조각을 부착하고 광 전송이 어떻게 변할지 관찰하기 위해 다양한 지점에서 구부리기 시작함

  OptiGap의 실현

     * 필자는 광감쇠가 일어나는 위치를 제어할 수 있기 때문에 이를 이용하여 센서의 굽힘 위치에 대한 정보를 인코딩할 수 있다는 것을 깨달음
     * 전기 테이프를 사용하는 것은 실용적인 솔루션이 아니었기 때문에, 필자는 이러한 감쇠를 만들기 위한 더 신뢰할 수 있고 일관된 방법을 찾기 시작함
     * 이는 필라멘트를 자르고 유연한 고무(실리콘) 슬리브를 사용하여 작은 공기 간격을 남기고 다시 붙이는 아이디어로 이어짐
     * 공기 간격의 주요 작동 원리는 한 광파이프 면을 다른 면에 상대적으로 이동 및/또는 회전시키면 간격을 가로질러 전송되는 빛의 분율이 변한다는 것임
     * 굽힘 각도가 클수록 간격을 가로질러 더 많은 빛이 빠져나감
     * 광 신호 강도의 결과적인 변화는 센서로 사용하기 위해 알려진 패턴과 연관될 수 있음

  큰 아이디어

     * 필자는 일렬로 여러 개의 공기 간격을 만들고 감쇠를 측정하기 위해 필라멘트를 구부리는 방식으로 이 아이디어를 테스트했음
     * 광 강도는 각 공기 간격에서 감소하며, 굽힘 각도가 증가할수록 더 눈에 띄게 감소함
     * 이 초기 실험은 개념 증명 역할을 했으며, 아이디어의 실현 가능성을 입증함
     * 이는 센서의 굽힘에 대한 정보를 인코딩하기 위해 이러한 공기 간격 패턴을 활용하고 마이크로컨트롤러에서 나이브 베이즈 분류기를 사용하여 굽힘 위치를 디코딩한다는 필자의 최종 가설 도출로 이어짐
     * 이 개념은 선형 인코더의 기능과 유사함
     * OptiGap 시스템은 절대 인코더처럼 작동하여 병렬 광파이프를 따라 굽힘에 민감한 공기 간격 패턴을 사용하여 절대 위치를 인코딩하고, 효과적으로 단일 광섬유 센서 역할을 함

    역 그레이 코드를 사용하여 굽힘 위치 인코딩

     * 역 그레이 코드는 연속한 두 값이 최대(n-1) 비트 만큼 다른 이진 코드임
     * 이를 구현하기 위해 역 그레이 코드 시퀀스에 ""1""이 있는 곳마다 필라멘트에 절단을 만듦
     * 이 접근 방식은 모든 비트 수로 확장 가능함
     * 프로토타입의 경우 3 비트를 사용하여 8개의 가능한 위치를 제공함

    OptiGap 센서 시스템의 시각화

     * 그림은 3개의 광섬유를 사용하여 각 굽힘 위치에 대한 OptiGap 센서 시스템의 신호 패턴을 보여줌
     * 나이브 베이즈 분류기를 사용하여 센서 시스템은 신호 패턴에 기반하여 굽힘 위치를 식별할 수 있음
     * 세 번째 그래프는 프로토타입 시스템에서 얻은 실제 센서 데이터를 나타내며, 마이크로컨트롤러에서 분류기를 학습시키는 데 사용됨

  OptiGap 프로토타입

     * 필자는 각각 고유한 공기 간격 패턴을 가진 투명한 TPU 3D 프린터 필라멘트 3개를 사용하여 OptiGap 센서 시스템의 프로토타입을 제작함
     * 상용 3:1 광섬유 커플러를 사용하여 3개 가닥의 빛을 단일 광섬유 케이블로 병합하여 센서 프로토타입 완성
     * 이는 OptiGap 센서의 배후에 있는 가설과 작동 이론을 검증하는 최종 단계를 표시함

    물리적 크기 축소

     * 초기 프로토타입은 사용된 3D 프린터 필라멘트 크기로 인해 크고 부피가 큰 것으로 판명됨
     * 이전 경험에 비추어 볼 때 PMMA(플라스틱) 광섬유가 이 응용 분야에 적합한 더 작고 유연한 대안을 제공한다는 것을 인식함
     * 결과적으로 센서 스트랜드에 대해 Industrial Fiber Optics, Inc.의 500, 750 및 1000 마이크론 비피복 PMMA 광섬유를 평가하여 센서 크기를 크게 줄임
     * 3가지 유형의 광섬유에 대해 광 전송 및 유연성을 평가하기 위한 테스트를 수행함
     * 그 중 500 마이크론 광섬유가 전반적으로 최적의 선택으로 나타났지만, 3가지 모두 이 응용 분야에 충분한 유연성을 보여줌

    광 트랜시버 복잡성 감소

     * 시스템의 복잡성을 줄이고 모듈성을 높이기 위해 복잡한 VL53L0X ToF 센서 대신 간단한 포토다이오드와 IR LED 설정을 사용하기로 결정함
     * 이를 통해 마이크로컨트롤러를 사용하여 센서 데이터를 읽을 수 있게 되어 초기 프로토타입에 비해 상당한 개선이 이루어짐
     * 그런 다음 STM32 마이크로컨트롤러와 포토다이오드/IR LED 설정을 기반으로 센서용 데모 시스템을 만듦

  마이크로컨트롤러에서 실시간 기계 학습

     * OptiGap 센서 시스템 개발의 최종 단계에는 센서 데이터에서 굽힘 위치를 디코딩하기 위해 STM32 마이크로컨트롤러에 나이브 베이즈 분류기를 통합하는 작업이 포함됨
     * if-문이나 조회 테이블에 비해 효율성이 높고, 새로운 데이터나 이전에 본 적 없는 데이터를 처리할 수 있으며, 여러 입력 변수 간의 관계를 고려하여 정확도를 높일 수 있는 잠재력 때문에 나이브 베이즈 분류기를 선택함
     * 나이브 베이즈 분류기 구현은 상대적으로 간단한 것으로 판명됨
     * 이 분류기는 측정값이 특정 클래스에 할당될 수 있는 방법을 결정하기 위해 베이즈 정리를 적용하는 확률적 모델로, 이 컨텍스트에서 클래스는 굽힘 위치를 나타냄
     * 분류기 구현을 위해 Arm CMSIS-DSP 라이브러리를 활용함

    센서 데이터 피팅

     * 분류기를 통합하는 첫 번째 단계는 각 공기 간격 패턴에 대해 센서 데이터를 가우스 분포에 맞추는 것임
     * 이 프로세스를 가속화하기 위해 scikit-learn 라이브러리의 GNB(Gaussian Naive Bayes)를 사용하여 데이터를 신속하게 레이블링하고 피팅하기 위한 Python GUI를 개발함
     * 나중에 이 UI를 더 일반적으로 개선하고 더 복잡한 데이터 피팅을 허용하도록 함
     * 각 클래스에 대한 확률을 계산하고 마이크로컨트롤러에서 사용할 수 있도록 헤더로 저장함

    센서 데이터 필터링

     * 분류기의 정확도를 높이기 위해 STM32에서 2단계 필터링 프로세스를 구현함
     * 초기 단계에는 기본 이동 평균 필터가 포함되었고, 두 번째 단계에서는 칼만 필터가 사용됨

  OptiGap 센서 시스템 데모

     * 제공된 GIF는 조립 및 최종 센서 시스템의 작동 시연을 포함하여 OptiGap 센서 시스템의 다양한 단계를 보여줌

  OptiGap 설계 사양

     * 핵심 속성 및 매개변수
     * 재료 권장 사항

  다음 단계

     * 여기에 기록된 것 이상으로 OptiGap 시스템에 상당한 진전을 이루었음
     * EneGate라는 모듈형 구동 및 감지 시스템에 통합하는 작업 등이 포함됨
     * 이는 사용자 정의 PCB 설계 및 시스템 통합과 관련되며, 학위 논문에 자세히 설명되어 있음
     * 또한 EneGate 시스템용 PCB와 인터페이스하기 위한 소형 PCB 버전의 광학 장치를 프로토타입으로 제작함
     * 실제 소프트 로봇 시스템에서 OptiGap의 유효성을 검증했으며, 자세한 내용은 "" 꼬인 보 구조에서 동적 동작 모니터링을 위한 임베디드 광 도파로 센서 ""라는 제목의 RoboSoft 논문에 발표될 예정임

    상업화

     * 이 연구에는 상업화 측면도 진행 중임

  GN⁺의 의견

     * OptiGap 센서 시스템은 소프트 로봇 분야에서 기존 센서로는 파악하기 어려웠던 굽힘 위치를 감지할 수 있는 혁신적인 기술로 보임. 유연성이 요구되는 다양한 시스템

        Hacker News 의견

   Here are the key points from the Hacker News comments, summarized in a neutral and informative tone:
     * The general idea of making materials more ""self-aware"" or inspectable is appreciated as a neat and sci-fi-like concept.
     * One commenter's previous research used complex-valued neural nets to learn the transmission matrix of an optical fiber, which relates to this work as bending the fiber requires relearning a new matrix. It may be possible to learn a parameterized characterization of the fiber to model its shape.
     * The research seems thorough and well-documented. The advisor, Cindy Harnett, is likely aware of the conceptual similarity to time-domain reflectometry.
     * There are questions about how the sensor handles multiple bends. It seems that with the current setup, multiple bends would result in the sum of the log attenuations, potentially requiring as many strands as bend locations to disambiguate. Clarification is needed on whether this is intended for single-bend cases only.
     * Potential refinements could make this technology mass-producible with high accuracy. Applications include cost-effective 2D or 3D touch sensors for robots, directionally sensitive proprioception for flexible tubes, and detecting localized temperature differences.
     * The technology seems similar to the Nintendo Power Glove, which used light down a tube to trigger key presses based on finger/hand bending.
     * Having an awesome advisor is highlighted as the difference between a miserable and a good experience.
     * One commenter is interested in using this sensor (or multiple sensors together) to accurately detect a golf club swing for a golf launch monitor that doesn't require hitting a ball.
     * Suggestions for improvement include:
          + Reducing inter-sensor distance to fix ""dead zones"" in the sensor data
          + Dividing the tube into three sections to sense the direction of the bend
          + Finding solutions to sense multiple bends, as the current setup would result in invalid readings
     * The work reminds another commenter of distributed acoustic sensing (DAS) using fiber optic cables for various monitoring tasks, though they haven't seen it used for soft robotics before.
     * The manufacturing challenge of requiring log2 fibers and different encodings in each junction is acknowledged, but not considered a problem at the research/proof-of-concept phase.
"
"https://news.hada.io/topic?id=14313","구글, 캘리포니아 주 언론사 지원금 제안 후 뉴스 서비스 중단 위협","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 구글, 캘리포니아 주 언론사 지원금 제안 후 뉴스 서비스 중단 위협

Google, 캘리포니아의 뉴스 매체 지불 제안에 반발해 뉴스 제공 중단 위협

     * Google은 소수의 캘리포니아 사용자를 대상으로 캘리포니아 뉴스 웹사이트 링크 제거를 시범 운영 중임
     * 이는 Google이 캘리포니아 사용자에게 뉴스 기사 링크를 제공하는 대가로 수수료를 지불하도록 요구하는 캘리포니아 저널리즘 보존법(CJPA) 때문임
     * Google의 글로벌 뉴스 파트너십 부사장 Jaffer Zaidi는 블로그 포스트에서 CJPA가 통과되면 캘리포니아인에게 제공할 수 있는 서비스와 캘리포니아 출판사에 제공할 수 있는 트래픽에 큰 변화가 있을 수 있다고 밝힘
     * Google은 또한 Google News Showcase, 뉴스 기관을 위한 제품 및 라이선스 프로그램, Google News Initiative 등 캘리포니아 뉴스 생태계에 대한 추가 투자를 일시 중단할 예정임

Google이 저널리즘에 미치는 영향

     * Google(및 Meta)은 출판사보다 훨씬 더 많은 온라인 광고 수익을 가져가고 있음
     * EFF 보고서에 따르면 매 광고 달러의 절반이 수수료로 사라지고, 구독은 앱 스토어 세금 대상임
     * 지지자들은 캘리포니아 법안이 수익 공유를 보다 공평하게 만들기 위해 출판사에 지렛대를 제공한다고 주장함
     * Google은 이미 출판사에 트래픽을 유도하고 있으며, 이러한 종류의 법안은 대형 미디어 기업에 유리하고 지역 신문사를 더 피폐하게 만들 위험이 있다고 주장함
     * Google이 뉴스로 얼마나 많은 수익을 내는지 수치를 내기는 어려움. 기술적으로 Google 뉴스에는 광고를 게재하지 않지만, 미디어 회사는 뉴스 콘텐츠에 대한 링크가 플랫폼에 더 광범위하게 도움이 된다고 주장함
     * 2023년 연구에 따르면 저널리즘 경쟁 및 보존법(JCPA)이 발효되면 Google은 미국 출판사에 연간 약 100~120억 달러를 지불해야 함

유사 사례

     * Google은 입법자들이 뉴스에 대해 미디어 매체에 비용을 지불하도록 하려는 시도에 반대해 온 것은 이번이 처음이 아님
     * 2014년 스페인에서 유사한 조치가 통과된 후 철수했지만, 8년 만인 2022년 결국 복귀함
     * 호주에서도 2020년 뉴스 미디어 협상 강령을 도입했을 때 완전히 철수하겠다고 위협했으나, 결국 Google은 호주의 여러 출판사와 거래를 타결함
     * 호주의 성공으로 미국, 영국, 캐나다, 뉴질랜드 등 다른 국가에서도 유사한 입법을 추진하게 됨

GN⁺의 의견

     * 뉴스 매체에 대한 Google의 불공정한 대우는 오래된 문제로, 이는 단순히 수익 배분뿐 아니라 저널리즘의 다양성과 질에도 영향을 미칠 수 있음
     * 다만 이러한 법안이 지역 신문사나 소규모 매체에 실질적인 도움이 될지, 혹은 대형 매체만 더 비대해지는 결과를 낳지는 않을지에 대한 우려도 있음
     * 장기적으로는 뉴스 생태계의 지속가능성을 위해 Google 등 Big Tech과 언론사 간의 상생 방안 모색이 필요해 보임
     * 한편 이용자 입장에서는 검색 품질 저하 등 서비스 이용에 불편이 있을 수 있어, 소비자 피해를 최소화하는 방안도 함께 고려되어야 함
     * 유사한 사례로 독일의 Leistungsschutzrecht, 프랑스의 저작인접권 도입 등이 있으며, 한국에서도 언론진흥기금 등을 통해 뉴스 생태계 활성화를 위한 정책적 노력을 기울이고 있음

        Hacker News 의견

   구글은 다음과 같은 이유로 언론사에 링크 세를 부과하는 것에 반대하고 있음:
     * 링크에 대해 수수료를 부과하는 것 자체가 좋지 않은 생각임. 링크는 표현의 자유 문제와도 연결됨.
     * 링크 대상에 대해 소유권을 주장하게 되면, 비판과 토론을 제한할 수 있는 권한을 부여하는 것과 같음. 이는 저작권법의 확장임.
     * 정부는 차라리 플랫폼에 직접 세금을 부과하고, 이를 언론 기금으로 재분배하는 것이 더 나음. 저작권법에 새로운 선례를 도입하는 것은 의도치 않은 결과와 악용의 위험이 큼.

   한편 이에 대해서는 다음과 같은 우려의 목소리도 있음:
     * 호주, 캐나다 등에서 구글이 '링크세'를 내기 시작하자 이제 모든 정부가 이를 좇고 있음.
     * 뉴스 사이트로 링크되면 자신의 사이트와 링크한 사이트 양쪽에서 광고 수익을 낼 수 있어 이중 취득이 됨.
     * 스페인에서는 유사한 법으로 구글 뉴스가 8년간 중단된 바 있음. 하지만 뉴스 사이트가 없어지지는 않았음.
     * 구글은 모든 언론사를 동등하게 지원하지 않음. 일부 언론사에게만 특혜를 주고 있어 논란임.
     * 언론사들도 기사에 링크한 정보의 소유자에게 돈을 내야 한다면 공정할 것임.

   종합하면, 저작권법이 이미 충분히 권리 소유자에게 유리한데 이를 더 강화하려는 시도에 대해 우려의 목소리가 크다고 할 수 있음. 정부의 직접적인 세금 부과와 재분배가 더 나은 해법이 될 수 있다는 의견도 주목할 만함.
"
"https://news.hada.io/topic?id=14219","Gnome 46 터미널의 속도 향상폭","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Gnome 46 터미널의 속도 향상폭

     * VTE(Virtual TErminal library)는 GNOME 터미널 에뮬레이터들의 기반이 되는 라이브러리임. GNOME Terminal, Console, Black Box, Tilix, Terminator, Ptyxis 등의 앱에서 사용되며, Builder와 Workbench의 내장 터미널에도 사용됨.
     * GNOME 46 사이클 동안 VTE의 성능이 크게 향상됨. 이 글에서는 실제로 얼마나 성능이 향상되었는지 측정하고 사용자 입장에서 어떤 차이를 느낄 수 있을지 살펴봄.

측정 대상과 방법

     * 터미널 에뮬레이터의 성능을 측정하는 방법은 다양하지만, 이 글에서는 입력 지연 시간(Input Latency)에 초점을 맞춤.
     * 입력 지연 시간은 키보드를 누른 순간부터 모니터의 픽셀 색상이 변경되기까지 걸리는 시간을 의미함. 낮은 입력 지연 시간을 가진 앱은 반응성이 좋게 느껴지고, 높은 입력 지연 시간을 가진 앱은 느리게 느껴질 수 있음.
     * 입력 지연 시간을 측정하기 위해 하드웨어 입력 지연 테스터를 사용함. 이는 Teensy 보드에 연결된 조도 센서로 구성되며, USB를 통해 컴퓨터에 연결됨.

입력 지연 시간 테스트 결과

     * 첫번째 테스트: cat > /dev/null 명령으로 입력 필드를 만들고 Space 키를 눌렀을 때 블록 커서가 한 셀 오른쪽으로 이동하는데 걸리는 시간 측정
          + VTE 터미널들이 Fedora 39에 비해 Fedora 40에서 크게 개선되어 Alacritty와 거의 동등한 수준으로 향상됨
     * 두번째 테스트: neovim에서 README 파일을 열고 Ctrl+D와 Ctrl+U로 텍스트 버퍼를 스크롤하면서 측정
          + 역시 GNOME 46의 VTE 터미널들이 크게 개선되어 Alacritty와 거의 동등한 수준을 보임
     * Fedora 40의 모든 터미널을 한번에 비교한 결과, neovim 테스트가 cat 테스트에 비해 입력 지연 시간이 증가하지만 모든 터미널에서 유사한 수준으로 증가함

vtebench 테스트 결과

     * Alacritty의 vtebench 테스트 슈트를 동일한 환경에서 실행
     * PTY 읽기 및 파싱 성능을 측정하는 테스트로, VTE의 충돌을 찾는데도 유용함
     * GNOME 46의 VTE가 vtebench에서도 개선을 보였지만 Alacritty만큼은 아님

결론

     * GNOME 46에서 VTE의 성능이 크게 개선되어 입력 지연 시간이 가장 빠른 터미널과 거의 동등한 수준으로 향상됨
     * 느린 반응 속도와 입력 지연으로 VTE 기반 터미널을 피해왔다면 이제 다시 사용해 볼만함 (VTE 0.76 이상 버전 권장)

GN⁺의 의견

     * VTE 기반 터미널들의 성능 개선은 매우 고무적임. 사용자 경험 향상에 크게 기여할 것으로 보임.
     * 입력 지연 시간 측정에 하드웨어 테스터를 활용한 점이 흥미로움. 테스트 과정과 결과 해석에 대한 자세한 설명도 유익했음.
     * macOS의 기본 터미널인 Terminal.app이나 Windows의 새로운 터미널인 Windows Terminal과 비교해보는 것도 흥미로울 것 같음.
     * VTE의 성능 개선이 GNOME 에코시스템 전반에 긍정적인 영향을 미칠 것으로 기대됨. 다만 아직 개선의 여지가 있는 부분들(접근성, 스크롤바 등)도 있어 보임.
     * 리눅스 데스크톱 사용자들에게는 매우 반가운 소식. 다양한 터미널 에뮬레이터들이 VTE의 개선 사항을 기반으로 더욱 발전하기를 기대해 봄.

  Hacker News 의견

     * 최신 GNOME 터미널의 입력 지연 시간이 1983년 Apple //e 컴퓨터보다 짧아진 것은 성과이지만, 테스트 환경이 실제 사용 환경과 차이가 있음
          + 테스트는 GNOME Shell이 아닌 베어본 환경인 raw Mutter에서 진행됨
          + 키보드 지연 시간이 포함되지 않아 엔드투엔드 지연 시간 측정이 아님 (키보드 지연 시간이 60ms까지 갈 수 있음)
          + 디폴트 설정에서의 실제 엔드투엔드 지연 시간이 더 길 것으로 예상됨
     * 모니터 중앙에서 측정했지만, 모니터 상단과 하단에서는 8ms의 차이가 날 수 있음 (CRT처럼 위에서 아래로 픽셀이 그려지기 때문)
     * 모니터 간 단순 비교는 어려움. 드라이버나 프로파일에 의한 비교 불가능한 효과가 있을 수 있음
     * 사실적인 3D 렌더링이 가능한 시대에 터미널 텍스트 출력 문제를 해결하는 것이 아이러니함
     * VTE 개발자의 성능 향상 노력과 하드웨어 기반 지연 시간 측정 노력이 인상적임
     * macOS 터미널처럼 탭별로 히스토리와 스크롤백을 기억하는 리눅스 터미널이 있는지에 대한 질문
     * Gnome을 오래 썼지만 sway+alacritty로 바꾼 후 차이를 모르겠다는 의견
     * Gnome 터미널의 작은 초기 윈도우 크기와 크기 저장 안 되는 문제를 언급
     * xterm+i3wm을 쓰면서 더 빠른 것을 경험하지 못했고, GPU를 쓰는 alacritty는 오버킬이라는 의견
     * Mitchelle Hashimoto의 Ghostty 터미널도 벤치마크에 포함되면 좋겠다는 의견
     * 단순 cat 테스트가 아닌 이번 벤치마크가 좋았으며, 더 다양한 터미널, 특히 네이티브 리눅스 콘솔도 테스트해보면 좋겠다는 의견
"
"https://news.hada.io/topic?id=14286","Show GN: UI로부터 대응되는 소스코드를 찾아주는 vscode extension","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: UI로부터 대응되는 소스코드를 찾아주는 vscode extension

     * React개발을 위한 VS Code Extension
     * Storybook과 유사하게 각 컴퍼넌트를 격리된 환경에서 렌더링
     * 렌더링된 UI를 우클릭하여 대응되는 React 코드를 찾을 수 있음
     * 소스코드의 커서 위치에 따라 대응되는 UI가 자동으로 하이라이트 됨
     * 현시각 기준 Microsoft Marketplace에서 Visualization 부문 #1 Trending.
"
"https://news.hada.io/topic?id=14293","세븐 시스터스 지하철역에서 발견된 30년 된 죽은 토끼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     세븐 시스터스 지하철역에서 발견된 30년 된 죽은 토끼

30년간 세븐 시스터즈 지하철역에 죽은 토끼가 걸려있었음

     * 30년 넘게 세븐 시스터즈 지하철역 안에 죽은 토끼가 걸려있었지만, 매일 수천 명의 사람들이 그것을 알아채지 못한 채 지나쳤음
     * 죽은 토끼는 초기 형태의 모바일 폰 기술의 유산이지만, 서비스 시작 2년도 안 되어 종료되었음

Rabbit 서비스와 Telepoint 기술

     * 1989년 정부는 Telepoint 서비스를 운영할 4개 면허를 발급했고, 기존 이동통신사 대비 저렴한 비용으로 경쟁력을 갖출 것으로 기대됨
     * Hutchison은 Telepoint 서비스 면허가 없어서 면허를 보유한 4개 회사 중 하나를 인수했고, Rabbit이란 서비스로 1992년 5월 시장에 출시함
     * 기지국에서 100야드 이내에서만 통화 가능하고 전화를 받을 수 없었지만, 기존 이동전화 대비 통화료가 훨씬 저렴해서 성공할 것으로 예상됨
     * Rabbit 폰은 가정에서도 사용 가능했는데, 당시 가정용 무선전화기는 크고 음질이 좋지 않았지만 Rabbit은 작고 음질도 좋아서 인기가 있었음

Rabbit 서비스의 급작스런 종료

     * Rabbit은 1992년 5월 맨체스터의 가게와 가로등에 기지국을 설치하며 시작되어 1993년 말 전국 서비스를 제공함
     * 하지만 1993년 11월 5일 Hutchison Telecom이 갑자기 Rabbit 서비스 종료를 발표함. 전체 이동통신망 면허를 획득해 새로운 GSM 기반 Orange(현 EE) 서비스에 주력하기로 함
     * Rabbit 가입자들은 환불을 받고 Orange로 전환할 수 있는 할인을 제공받았지만, 가정용 무선전화기로서의 장점 때문에 오히려 Rabbit에 대한 수요가 급증하는 현상이 벌어짐
     * 결국 1993년 12월 Rabbit 기지국은 완전히 중단되었지만, 기지국 철거는 서두르지 않아 30년이 지난 지금까지 세븐 시스터즈역에 잔존함

GN⁺의 의견

     * Rabbit은 기술의 한계와 사업성 부족으로 단명했지만, 가정용 무선전화기로서의 수요는 예상치 못한 대박이었음. 고객 니즈를 제대로 파악하지 못한 케이스
     * Telepoint 기술이 GSM 이동통신에 밀려 사라진 것처럼, 새로운 파괴적 기술이 기존 산업을 빠르게 대체하는 현상을 보여줌
     * 서비스 종료 후에도 기존 고객의 Lock-in 효과로 수요가 급증한 것은 흥미로운 사례임. 서비스 전환 시 기존 고객에 대한 배려가 중요함을 시사
     * 오래된 설비의 잔존은 방치하기 쉽지만 안전사고의 위험이 있으므로 정기점검이 필요해 보임. IoT 기술로 모니터링하는 방안도 검토 가능할 듯

        Hacker News 의견

   요약:
     * 미국 서부의 작은 마을들에는 시대의 흔적이 남아있는 흥미로운 유물들이 많음. 지역마다 시대적 특징이 다르게 나타나며, 버려진 주유소, 식당, 집 등을 탐험하는 재미가 있음. 그러나 날카로운 물건이나 부서진 유리 등에 주의해야 하며, 버려진 것처럼 보이지만 실제로는 그렇지 않은 곳도 있음.
     * 네덜란드에서는 Kermit이라는 이름의 무선전화 시스템이 있었는데, 케르밋 더 프로그 상표권에 많은 돈을 지불했음. 이후 모바일 폰이 대중화되면서 Green point로 이름을 바꿨음.
     * Kermit 하드웨어는 얇은 플립폰 형태로, 집에서도 인기가 있었음. ""기지국에서 100야드 이내에 있어야 한다""는 점이 5G와 유사함.
     * 영국에서는 Rabbit이라는 이름의 CT-2 시스템이 있었는데, DECT 전화를 ""rabbit phone""이라고 부르기도 함.
     * 프랑스에서는 Bi-Bop이라는 이름으로 1991년부터 1997년까지 운영되었으며, Apple에서도 PowerBook용 Bi-Bop 모뎀을 만들었음.
     * Rabbit은 ""수다떨다""는 의미의 속어일 수도 있음. Rumbelows라는 과거의 회사명도 등장.
     * Seven Sisters 지하철역에는 30년 넘게 사용되지 않은 Rabbit 기지국이 여전히 벽에 설치되어 있음.
     * Rabbit은 통화만 가능하고 수신은 불가능했으며, 커버리지도 제한적이어서 가입자가 최대 1만 명 정도였음.
     * 미국에는 이와 유사한 단거리 무선전화 시스템이 없었던 것으로 보임.
"
"https://news.hada.io/topic?id=14331","Product/Market Fit (PMF)을 위한 로드맵","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Product/Market Fit (PMF)을 위한 로드맵

제품/시장 적합성을 향한 로드맵

    1. 개인 Fit: ""열정""은 유용하지만, 승리를 위해서는 개인적인 Edge(강점)가 필요함
    2. 시장 Fit: 대부분의 좋은 아이디어가 좋은 사업이 되지는 않음
    3. 고객 Fit: 잘못된 것을 몇 달 동안 만드는 것을 낭비하기 전에 고객과 대화하기
    4. SLC(Simple, Lovable, Complete) 빠르게 구축 및 출시: 실제 학습이 일어나는 곳임
    5. 코드 작성 및 디자인 조정보다 마케팅 및 판매가 중요함
    6. 유지 중심의 제품 개발: 기존 고객을 먼저 돌보는 것이 중요함
    7. 체계적이고 냉정하며 전략적으로 우선순위를 설정:함
    8. 자기 발견과 지속적인 거절의 여정에서 심리를 관리하기


1. 개인 적합성: 내면의 불꽃, 개인적인 엣지를 활용하여 당신이 해야 할 일을 하는 것

     * 잘 실행할 수 없는 훌륭한 아이디어나 전략은 자신에게 좋은 전략이 아님
     * 성공을 위해서는 특별한 것, 열등한 모든 면에도 불구하고 강점을 제공하는 것이 필요함
     * ""당신이 사랑하는 것을 하면, 돈은 따라올 것이다"" 라는 말은 틀렸음. 대부분의 예술가, 철학전공자, 80%의 스타트업이 창업자의 애정과 집착에도 불구하고 실패함
     * 열정은 필수적이지만 그것만으로는 충분하지 않음. 열정은 동기 부여자임
          + 특히 저축한 자금이 고갈되고, 경쟁업체에 밀리고, 잠재 고객과 잠재 직원, 잠재 투자자로부터 끊임없는 거절을 당하고, 자신의 가치에 의문을 품고, 사기꾼 증후군(Imposter Syndrome)의 원인이 자신이 사기꾼이기 때문이 아닌지 고민하는 암울한 시기에는 열정이 동기를 부여함
          + 열정만으로는 부족하지만, 열정 없이는 결코 끝까지 해내지 못함
     * 자신의 열정이 무엇인지 정확히 표현하고, 이를 비즈니스 개념의 필터로 사용해야 함
          + 이는 어려운 일이고, 어떤 사람들은 평생을 그걸 알아내기 위해 노력하기도 함
     * 여러분의 목표는 자신이 해야 할 일을 찾는 것임
          + 당신의 소명(Calling)
          + 당신이 공짜로라도 할 수 있는 일이지만, 그 이상으로 해야만 하는 일
     * 하지만, 열정이 있다고 이것만으로는 사업 모델이 존재한다는 것을 의미하지는 않음
          + 다른 창업자들도 모두 열정을 가지고 있고, 대기업은 '열정'을 항공모함을 공격하는 새총처럼 보이게 하는 수많은 장점을 가지고 있음
          + 즉 열정이 있다고 해서 경쟁 우위를 확보할 수 있는 것은 아님
          + 'Edge(우위)'가 필요함
     * ""레버리지(Leverage)""는 상대적으로 적은 시간과 비용으로 엄청난 양의 양과 질을 달성하는 등 주어진 인풋에서 엄청난 아웃풋을 만들어내는 것을 의미
          + 여러분은 자신이 가진 재능, 취향, 경험의 조합을 통해 레버리지를 창출할 수 있음
          + 레버리지를 활용하는 것도 좋지만, 고유한 레버리지를 활용하는 것이 훨씬 더 좋은데, 이는 경쟁사 및 다른 대안과 차별화할 수 있는 원천이기 때문
          + 보통 평균 이상의 독특한 재능과 경험이 교차하는 지점에서 나타나는데, 이 두 가지를 모두 합치면 Unique(고유함, 독특함)가 됨
     * 그런 다음 이러한 독특함을 문제와 해결책에 접근하는 특별한 방식과 결합하여 소수의 잠재 고객에게도 독보적인 영향력을 발휘할 수 있도록 해야 함
     * 이러한 레버리지 + 경로 조합은 경쟁 포지셔닝으로서 전략의 핵심을 형성
          + 고객이 원하든 원치 않든 경쟁사와 비교하게 될 것이므로 경쟁사에 없는 무언가가 필요하며,
          + ""경쟁사에는 없는 사소한 기능이 하나 있습니다"" 또는 ""10달러 더 저렴합니다"" 외에 다른 대답이 있어야 함
     * '사용자'와 '경로'의 교집합을 요약하는 핵심 질문은:
       ""왜 당신이 이 회사를 만들기에 완벽한 사람인가?""

2. 시장 적합성: 고객이 구매할 이유에 대한 작동 이론

     * 내면의 세계를 파악한 후, 아이디어가 시장에서 작동하는지 외부로 눈을 돌려야 함
     * ""Product/Market Fit""은 시장에 맞추는 것을 의미하며, 단순히 재미있거나 흥미로운 것을 만드는 것이 아님
     * 대부분의 ""인디 해커"" 스타트업과 ""AI는 멋져"" 스타트업은 ""재미있는 프로젝트""에서 시작했기 때문에 실패함
     * ""나 자신이 문제를 겪었기 때문에 그것을 해결하기 위해 제품을 만들었다""
          + 가장 일반적인 출발점이지만, 자신의 문제 이해가 실제 비즈니스로 이어질 가능성은 생각보다 낮음
          + 때로는 열정 프로젝트가 비즈니스로 변하기도 하지만, 그것은 운임
          + 이런 프레임워크의 요점은 운에 대한 의존도를 줄이는 것임

     ""스타트업 아이디어를 얻는 방법은 스타트업 아이디어를 생각하려고 노력하는 것이 아니라, 문제를 찾는 것이며 가급적 자신이 겪는 문제여야 한다.

     최고의 스타트업 아이디어는 일반적으로 세 가지 공통점이 있다. 창업자 자신이 원하는 것이고, 자신이 직접 만들 수 있는 것이며, 다른 사람들은 그 가치를 잘 알아차리지 못한다는 것이다. Microsoft, Apple, Yahoo, Google, Facebook 모두 이런 식으로 시작했다."" - Paul Graham, 스타트업 아이디어를 얻는 방법

  고객이 구매할 이유에 대한 이론

     * 고객, 시장, 비즈니스 모델에 대한 그럴듯한 이론이 필요함
     * 많은 아이디어는 정직한 검토 하에서 무너지기 때문에 ""그럴듯함""이 중요하며, 완전히 정확하지는 않겠지만 세상에 대한 작업 이해이자 학습에 따라 수정할 ""이론""이 필요함
     * 시장, 고객, 포지셔닝에 대한 구체적인 이론을 개발하는 방법은 다음과 같음. 이를 위해 시장 특성을 분석해야 함:
         1. 그럴듯함: 1천만 명 또는 10만 개 기업이 그 문제를 겪고 있는가?
         2. 자기인식: 그들은 그 문제를 알고 신경 쓰는가?
         3. 수익성: 그들은 이 문제를 해결하기 위해 상당한 예산을 가지고 있는가?
         4. 유동성: 그들은 지금 당장 기꺼이 구매할 의향과 능력이 있는가?
         5. 열정: 그들은 특별히 당신에게서 구매하기를 원하는가?
         6. 지속성: 1년 후에도 여전히 (선순환적으로) 지불하고 있을 것인가?
     * 많은 사람들이 이 글을 읽고, 자신의 삶(저축과 고통)의 2년을 낭비하기 전에 읽었더라면 좋았을 거라고 말함. 그런 사람이 되지 말 것
     * 연구가 불가능하거나 아이디어가 너무 신선해서 기존 데이터와 트렌드가 무의미하기 때문에 이런 질문에 답하는 것이 불가능하다고 생각할 수 있음
     * 하지만 페르미 추정(Fermi Estimation)을 사용하면 할 수 있음
          + 어떠한 문제에 대해 기초적인 지식과 논리적 추론만으로 짧은 시간 안에 대략적인 근사치를 추정하는 방법
     * 이 기법은 시장 분석뿐만 아니라 ROI, 확률, 의사 결정에도 유용함

  초기 전략

     * 훌륭한 비즈니스 모델을 갖는 것보다 더 중요한 것은 훌륭한 전략을 갖는 것임
     * 20페이지 분량의 문서가 아니라, ""어떻게 우리가 이길 것인지""를 설명하는 가이드라인에 부합하는 1페이지 분량의 문서여야 함
     * 약점에도 불구하고 차별화되고 뛰어난 제품을 만들기 위해 강점을 활용하는 방법을 스스로에게 질문하는 것은 결코 이르지 않음
     * 가정과 결정을 기록하여 최소한 자기 일관성을 갖추고, 반대 증거가 나타날 때 이를 알아차리고 체계적으로 대응할 수 있도록 하는 것도 결코 이르지 않음
     * ""어떻게 우리가 이길 것인지""를 설명하는 구체적인 전략 아이디어를 생성하려면 다음을 고려해볼 것
          + 고객의 Needs Stack에서 제품이 어디에 위치할 것인지에 대한 이론 만들기
          + 미래가 예측 불가능하다는 사실을 탐색하기 위한 전술 몇 가지 선택하기
          + ""Love""와 ""Utility"" 유형의 지불 의사를 어떻게 생성할 것인지 결정하기
     * 이러한 방법들은 모두 재미있고, 접근 가능하며, 전략적이고, 실제로 작동함
     * 초기 아이디어가 종종 잘못된 경우가 있기 때문에, 구체적인 아이디어와 비즈니스 모델이 필요한 이유는 다음과 같음
          + 무작위 방향으로 걷는 것은 진전이 아님
          + 올바른 방향을 발견하는 주요 방법은 세상에 대한 명확한 이론을 가지고, 세상이 그것을 부정할 때 이를 알아차려 더 나은 이론으로 피벗하고, 진정으로 훌륭한 전략과 시장 이해로 반복하는 것임
     * Smart Bear, Slack, WhatsApp, Flickr 등의 사례에서 실제로 이러한 일이 발생했음
     * 구체적이고 강력하며 명확한 아이디어를 통해서만 고객이 실제로 원하는 것을 알아차릴 수 있었고, 이는 각 회사가 성공적인 아이디어로 피벗하는 계기가 되었음
     * 모든 경우에 아이디어는 창업자에게 매우 개인적인 것이었음 - 해결책에 대한 열정과 초기 사용자와 공감할 수 있는 무언가를 만들기 위한 강점 활용의 개인적 적합성
     * 그러나 현실에 의해 부정된 구체적인 비즈니스 모델 및 전략 이론과 의도적인 피벗만이 Product/Market Fit을 달성할 수 있었음

3. 고객 적합성: 이상적인 고객을 먼저 찾아라

     * 고객이 무엇을 구매할 것인지에 대한 유일한 진실의 원천은 바로 고객 그 자체임
     * 조언자, 전문가, 분석가, 트위터 설문조사, 연구, 과거 데이터, 심지어 경쟁사의 행동도 아님
     * 고객과 직접 대화해야 함
     * 고객은 변덕스러움. 제품이 어떤 기능을 한다면 100달러를 지불할 것인지 물으면 ""예""라고 대답하지만, 실제로 만들면 사지 않음
     * 그럼에도 고객과 대화해야 하는 이유는 다음과 같음
          + 고객은 자신의 삶이 어떤지 말해줄 수 있으며, 이를 통해 이전 섹션의 비즈니스 모델과 전략을 검증할 수 있음
          + 고객은 무엇을 사지 않을 것인지 말해줄 수 있으며, 이는 반복적으로 발생함
          + 고객이 문제의 존재를 모르거나, 예산이 없거나, 우선순위를 두지 않는다는 것을 발견할 수 있음
          + 고객이 ""예""라고 말하면 ""아마도""이지만, ""아니오""라고 말하면 ""아니오""이며, 이를 통해 수개월 또는 수년의 시간 낭비를 막을 수 있음
     * 고객이 이와 같은 제품을 찾기 위해 어디로 가는지 알아내어 올바른 곳에 광고를 할 수 있음
          + 고객이 문제나 해결책에 대해 이야기할 때 사용하는 언어를 알아내어 광고와 소셜 미디어 홈페이지에 해당 언어를 복사하여 주의를 끌 수 있음
          + 고객의 예산이 어떻게 작동하는지 알아내어 그에 따라 가격을 책정하고 패키지화하며 포지셔닝할 수 있음
          + 고객이 현재 문제를 어떻게 해결하고 있는지 알아내어 경쟁사, 대안 또는 수작업 중 무엇과 맞서 판매하고 있는지 알 수 있음
     * Bob Moesta가 말한 대로, 고객이 일상생활에서 벗어나 ""오늘은 ______를 사야 하는 날""이라고 말하게 하는 원인을 알아내어, 그 사건이 발생할 때 함께 하거나 심지어 유발할 수 있음
     * 고객이 원하는 것을 묻지 않고 성공한 기업의 사례를 쉽게 찾을 수 있음
          + Smart Bear에서도 그런 일이 있었음
          + 그러나 이는 운에 의존하는 것이며, 대부분의 경우 운이 좋지 않음
          + 앞으로 몇 년간의 삶을 걸고 도박하기에 좋은 방법이 아님
     * 그러나 대부분의 사람들은 이 작업을 하고 싶어하지 않음
     * 제품을 만드는 것이 재미있는 부분이기 때문에 그것을 하고 싶어함
     * 잠재 고객을 찾기 어렵고 그들은 당신과 이야기하고 싶어하지 않음
     * 제품이 있을 때도 마찬가지일 것이므로, 지금 할 수 없다면 나중에도 할 수 없을 것임
     * 먼저 제품을 만드는 것이 고객을 찾거나 대화하는 것을 더 쉽게 만들어주지는 않을 것임
     * 먼저 제품을 만드는 것은 사람들이 실제로 원하는 것을 만들지 않았다는 것을 보장하는 것임, 왜냐하면 사람들이 무엇을 원하는지 알아내지 않았기 때문

  고객 인터뷰 방법

     * 일단 누군가와 전화 통화를 하게 되면, 학습을 극대화하고 고유한 승리 우위에서 가격 책정에 이르기까지 실행할 수 있는 구체적인 이론으로 이어지는 방식으로 어떻게 인터뷰를 해야 할까?
     * 내가 개발한 고객 검증 시스템은 반복-가설(Iterative-Hypothesis) 고객 개발 방법론임
     * 이는 인터뷰를 통해 달성할 목표, 비즈니스 모델을 이끌 가설을 만드는 방법, 학습을 극대화하는 질문을 작성하는 방법을 제공함
     * 15년 전, 이 방법론은 내가 좋다고 생각했던 스타트업 아이디어를 무효화시켰고, 현재 유니콘이 된 WP Engine의 스타트업 아이디어를 검증해줬음

  고객을 인터뷰에 참여시키는 방법

     * WP Engine의 인터뷰를 위해 내가 사용한 방법은 LinkedIn을 사용하여 내가 목표로 하는 직함과 업종(워드프레스의 웹 개발자)을 가진 사람들을 찾아 그들이 이상적인 고객인 새로운 스타트업 컨셉에 대해 이야기를 나누기 위해 1시간을 달라고 요청하는 것이었음
     * 또한 그들의 전문성과 시간을 소중히 여기기에 그 한 시간에 대해 원하는 만큼 지불하겠다고 제안함. 기부를 요청하는 것이 아니라 진정으로 그들의 전문성에 관심이 있기 때문임
     * 50명의 요청 중 40명이 동의했고, 단 한 명만이 돈을 요구함 (30명은 결국 고객이 되었음)

  또 다른 기법들

     * 이메일 가입 양식과 웹 채팅이 있는 랜딩 페이지에 광고를 구매하고 도착한 사람들과 대화하는 것
          + 그들이 무엇을 찾고 있는지, 그것이 왜 필요한지, 왜 지금 그것을 찾고 있는지, 어떻게 당신을 찾았는지, 그 외에 고려하고 있는 것은 무엇인지 물어보기
          + 잘 진행되면 전화로 연결해서 위의 전체 방법을 실행하도록 요청하기
     * 목표 고객이 있는 행사에 가서 하루 종일 모든 사람을 인터뷰하며 복도를 걷는 것
          + 사람들은 자신에 대해 이야기하는 것을 좋아하고, 100번의 연습 세션으로 피치를 다듬을 수 있음

  ICP(이상적 고객 프로필) 찾기

     * 목표는 단순히 시장에 대한 이론을 검증하는 것뿐만 아니라 ICP(Ideal Customer Profile)를 발견하는 것임
     * ICP는 ""완벽한 고객""으로, 제품에 너무나 완벽해서 시장에서 당신이 진정으로 최선의 선택이 되고, 구매하지 않는다면 그들이 미쳤다고 할 정도로 과하게 세분화된 세그먼트를 의미함
     * 그런 다음 모든 마케팅 메시징(웹사이트, 광고, 용어, 글쓰기 스타일, 가격 책정)을 이 사람에게 맞춰야 함
     * ICP가 홈페이지에 접속했을 때 3초 안에 이것이 그들에게 완벽하다는 것을 알 수 있어야 하고, 당신이 그들을 ""이해""하고 있다는 것을 알 수 있어야 하며, 그들이 고객이 될 때까지 과정에 끌려들어가야 함

  ICP 타겟팅의 실제 효과

     * ICP만을 대상으로 하면 잠재 시장이 제한될 것이라는 두려움이 있지만, 실제로는 그렇지 않음
     * ""Selling to Carol""에서 설명한 메커니즘과 사례는 다음과 같음
          + 모든 ICP에 대해 유사한 구매 결정을 내리는 사람이 10배 더 많고, 더 많은 설득이 필요하지만 결국에는 동의하는 사람이 100배 더 많음
          + 따라서 두려워했던 것보다 훨씬 더 광범위한 시장에 판매하게 되지만, 명확하고 독특한 메시지로 관심과 충성도를 얻게 됨
          + 회사, 브랜드, 제품이 실제로 의미 있는 무언가가 될 것임

  핵심 요약

     * 고객을 찾아 그들과 대화하라. 그들만이 답을 가지고 있음

4. SLC를 만들고 출시하라

     * 인터뷰는 세상에 대한 더 나은 모델을 제공하지만, 진정한 학습은 사람들이 제품을 사용하거나(더 자주는) 사용하지 않을 때 시작됨
     * SLC는 MVP(Minimum Viable Product)에 대한 나의 대안임
          + Simple(단순함): 복잡한 것은 빨리 만들 수 없고, 지금 당장 고객에게 제품을 출시해야 하기 때문
          + Lovable(사랑스러움): 형편없는 제품은 고객에 대한 모욕이고, 형편없는 제품을 만들기 위해 회사를 시작한 것이 아니기 때문. 사랑은 제품이 버그가 있고 기능이 부족하다는 사실을 압도함. ""사랑""에는 많은 멋지고 강력하며 경쟁적으로 방어할 수 있는 형태가 있음. 그 중 몇 가지를 선택하라
          + Complete(완전함): 제품은 작업을 완수하기 위한 것이기 때문. 고객은 망가진 것의 v0.1이 아니라 단순한 것의 v1을 사용하기를 원함
     * 작지만(사랑스럽고 완전한) 제품을 만들어 고객에게 출시하라. 그때가 진정한 ""진전""이 시작되는 때임
     * 그것이 진실을 배우는 방법임
     * 6개월 동안 제품을 만들었는데 고객이 사용하지 않았다면, 제품/시장 적합성(Product/Market Fit)으로 가는 길은 아님. 사실 비즈니스에 전혀 진전이 없는 것임
     * 당신이 한 일은 이미 알고 있던 것, 즉 소프트웨어를 만들 수 있다는 것을 증명한 것에 불과함
     * 학습은 오직 고객이 제품을 (사용하려고) 할 때만 시작됨

5. 제품보다 마케팅과 영업에 더 집중하라

     * 자연스럽게 즐기고 이해하는 일을 하고 싶어하기 때문에, ""너무 많다""고 느낄 정도로 마케팅과 영업에 주력해야 함
     * 오늘 무엇을 할 수 있을지 자문해 보라
          + (a) 더 많은 목표 시장 사람들이 웹사이트에 오게 하거나
          + (b) 그 중 더 많은 사람들이 제품을 사용해보도록 전환시키거나
          + (c) 그 중 더 많은 사람들이 제품을 구매하도록 전환시키는 것
     * 답은 더 많은 코드를 작성하는 데에서 찾을 수 있을지도 모름
     * 예를 들어, 신규 사용자 경험을 개선하면 ""사용해 보기""에서 ""구매하기""로의 전환율을 높일 수 있음
     * 그러나 더 자주 답은 제품 내부에 있지 않음. 실제로 이러한 단계 중 여러 단계가 사람이 제품을 전혀 사용하기 전에 발생함
     * 어쨌든 당신은 제품을 발전시킬 것임. 나도 그렇게 해야 한다고 생각함
     * 그러나 그렇게 하라고 말할 필요는 없음. 어쨌든 1단계에서조차 당신이 하고 싶었던 전부였으니까
     * 그래서 매일 앞서 말한 질문 중 하나에 대한 진전을 만들겠다는 의도를 세워야 함
     * 그것이 성장을 만들어낼 방법임

6. 고객 유지(Retention)에 기반한 제품 작업에 우선순위를 두라

     * 수십억 명 중 한 사람이 당신의 광고나 소셜 미디어 게시물을 주목하고, 링크를 따라가고, 웹사이트에 매료되어 100명 중 1명으로 제품을 사용해 보고, 지갑을 꺼내 돈을 지불하고, 사용을 시작했다가 취소했다는 것은 무엇을 의미할까?
     * 욕구, 필요, 지불 의사, 적합성에 대한 명확한 신호 후에 그들은 ""아니요, 이는 제가 원하는 것이 아닙니다""라고 결정한 것
     * 이는 당신이 올바른 약속을 했지만 지키지 않았다는 것을 의미함
     * 마케팅은 고객이 원하는 약속을 발견하는 곳이고, 고객 유지는 그 약속을 이행하고 있는지 발견하는 곳임
     * 일부는 성장으로 낮은 고객 유지율을 보완할 수 있다고 믿지만, 이는 두 가지 이유로 사실이 아님
         1. 성장은 처음에는 좋겠지만, 생각보다 빨리 둔화되고 멈출 것임
         2. 고객이 제품을 사용하기 싫어한다면 ""성장""은 가짜 뉴스임. 제품을 실제로 사용한 후 ""시장""이 ""적합하지 않다""고 결정한다면 그것은 제품/시장 ""적합""이 아님
     * 따라서 제품 기능 작업을 할 때는 고객 유지를 높이는 것을 만들어야 함
     * 이는 사람들이 왜 취소하는지 이해하는 것부터 시작함. 고객이 떠나면 더 이상 당신과 이야기하고 싶어하지 않기 때문에 이해하기 어려움
     * 고객의 실패 징후(예: 제품 내 특정 활동)를 찾아 너무 늦기 전에, 여전히 고군분투하는 동안 연락하는 것이 더 나음
     * 목표는 성공하지 못한 고객의 공통점을 발견하는 것이 아님. 성공한 고객도 종종 그런 공통점을 가지고 있기 때문
     * 오히려 성공한 고객과 공유되지 않는 성공하지 못한 고객의 패턴을 찾는 것임. 그것이 행동으로 이어지는 속성임
     * 예를 들어 ""기능 X 사용""이 성공을 의미한다면, 성공하지 못한 고객은 그 기능을 모르거나(사용 촉진), 워크플로와 호환되지 않아 사용할 수 없을 수 있음(통합 또는 옵션 추가)
     * 때로는 고객 자체에 관한 것으로, ICP 조정은 이미 적합한 고객을 더 많이 찾는 것을 의미함 (다른 산업/지역, 회사 단계/규모, 구매자 직함/태도, 해결하려는 특정 사용 사례 등 타겟팅)
     * Talk/Walk 워크샵이 도움될 수 있음. 약속과 실행의 차이를 명확히 하는 데 도움되기 때문
     * 하지만 아마도 늘 그렇듯이, 고객과 이야기를 나누어야 할 뿐임

7. 가차 없이, 체계적으로, 시스템적으로 우선순위를 정하라

     * 단순히 ""집중""하는 것 이상으로, ""우선순위를 정하라""는 일반적인 훈계 이상으로, 가장 가치 있고 가장 제한된 자산(시간)을 활용하여 진전을 극대화하는 것을 보장하는 시스템을 사용하라
     * Fairytale Planning과 Rocks, Pebbles, Sand 작업 우선순위 시스템을 결합하여 이를 수행하라

  다음 이정표 식별

     * 항상 달성해야 할 가장 중요한 한 가지를 명확히 하라
          + (예: 좋은 비즈니스 모델 찾기. 공개 출시. 유료 고객 20명. 평가판 전환율을 1%에서 5%로. 해지율을 월 7%에서 4%로. 직장을 그만둘 수 있도록 MRR 1만 달러 달성.)
     * 매일 다음 이정표를 향해 실행해야 함. 매일 아침 적어서 보라
     * 다른 모든 것은 무시해야 할 방해물이거나, 위임하거나 형편없이 또는 늦게 실행해도 괜찮다고 받아들이는 등 가능한 한 빨리 처리해야 하는 필요악임

  이정표 달성의 현재 장애물 식별

     * 항상 그 이정표를 달성하는 것이 어렵거나 느리거나 비용이 많이 드는 이유를 명확히 하라
          + (예: 차별화되고 바람직한 것을 위해 강점을 활용하는 방법을 알 수 없음. 한 번 사용하기는 쉽지만 15%만 다시 사용함. Product Hunt에서 17명의 고객을 얻었지만 이제 더 많은 고객을 얻을 반복 가능한 방법이 없음. 사람들이 인터뷰에 동의하도록 할 수 없음. SLC가 베타 테스터에게 받아들여지지 않음. 무료 사용자가 유료로 전환할 충분한 동기가 없음.)
     * 어려운 진실에 직면해야 함. 편안한 장애물을 고르지 마라.
     * 중요하고 무서우며 진실이기 때문에 불편한 실존적 위기를 선택하라
     * 매일 장애물을 공격하거나 피해가야 함. 매일 아침 적어서 보라

  Rocks, Pebbles, Sand로 작업 분할

     * 이 특정 Rocks, Pebbles, Sand 프레임워크를 사용하여 각 유형에 적합한 올바른 철학과 프로세스로 다양한 유형의 작업의 우선순위를 정하고 일정을 잡아라
     * 장애물과 이정표를 함께 공격하는 Rock 선택
          + Binstack을 사용하여 가장 중요한 이정표를 다루고 장애물을 공격하는 하나의 Rock에 우선순위를 부여하라 (둘 이상을 다룰 시간이 없음)
          + 충분히 좋은 것을 생각해낼 수 없다면, 그냥 다음 3개월을 차지할 평범한 계획을 진행하지 말고, 친구들(또는 더 나아가 고객들!)과 함께 더 나은 계획을 브레인스토밍하라
     * Pebbles는 신중하게 예약
          + Rock에 집중해야 하고 다른 것에 쓸 시간이 거의 없기 때문에, 이 ROI 프레임워크를 사용하여 남은 시간을 보낼 만큼 가치 있는 몇 가지 활동에만 우선순위를 매겨라

  거의 모든 것은 ""충분히 좋아야"" 함

     * 당신에게는 취향과 기술이 있고, 이 모든 것을 하는 이유의 일부는 자신을 표현하는 것임. 그러나 당신이 하는 거의 모든 것이 회사의 성공 여부를 결정하지는 않을 것임 (마지막 문장을 완전히 내면화될 때까지 반복하라). 즉, 대부분의 것들은 ""충분히 좋아야"" 함. 그냥 내버려 둬라
     * 대부분의 지표는 극대화가 아니라 만족되어야 함. 그에 따라 KPI를 선택하라
     * 그렇다고 해서, 때로는 디자인의 가장 좋은 측면이 사소한 것, 집착적인 것, 반드시 그렇게 만들어야 하는 것이라는 점을 말하는 것임. 웹 디자인이든 UX 디자인이든, 놀라울 정도로 많은 코드와 주의가 필요한 수많은 코너 케이스 때문에 완벽한 ""완벽한"" 기능이든, 새로운 고객이 놀라운 경험을 하게 된다는 의미임. 전투를 선택하라
     * 시스템에서 벗어나지 마라. 당신에게는 그럴 시간이 없다.

8. 심리 관리하기

     * 이 단계별 로드맵 전반에 걸쳐, 당신은 까다로운 심리적 도전에 직면하게 됨
          + 진실에 직면하기 - 당신의 능력, 고객의 소망, 시장의 모양, 사람들이 떠나는 이유에 대해 진실이 무엇인지 알아내는 것을 방해하는 ""진실이기를 바라는 것""을 허용하지 않는 것
          + 자신을 찾기 - 당신이 누구이고 누구가 아닌지 마주하고, 실제로 중요한 것과 필요하거나 일시적인 것을 알아내고, 성공적인 최종 결과조차 종종 기대했던 것이 아닐 때에도 여정을 즐기는 것
          + 명확한 결정 내리기 - 당신이 잘하지 못하는 것을 결정하고 어쨌든 그것을 하려고 하지 않는 것, 시장에서의 당신의 위치를 결정하고 모든 사람을 위한 모든 것이 되려고 하지 않는 것, ICP를 결정하고 전력을 다할 수 있는 용기를 갖는 것, 현재의 이정표, 주요 과제, 해야 할 한 가지 큰 일을 결정하고 주의가 산만해지지 않고 그것을 고수하는 것
          + 끊임없는 거절 - 당신의 아이디어는 충분히 좋지 않을 것이고, 고객 인터뷰는 주요 가정을 부정할 것이며, 웹사이트 방문자의 99%는 행동을 취하지 않을 것이고, 긴 영업 통화는 아무 결과도 내지 않을 것이며, 고객은 구매했다가 떠날 것이고, 직원은 당신과 함께하지 않을 것이며, 투자자는 투자하지 않을 것임
          + 유동적인 변화 - 명확한 결정에도 불구하고, 거절은 종종 받아들이기 어렵고, 시행하기 어렵고, 일이 잘못되었을 때 인정하기 어렵고, 일부 거절을 변칙으로 무시해야 하는지 아니면 변화를 초래해야 하는 ""학습""을 나타내는 것인지 결정하기 어려운 변화를 요구함
          + 불확실한 상태에서 행동하기 - 일부 일에 대해 틀렸을 것이라는 것을 알면서도, 거절당하고 변화를 겪으면서도, 전문가들이 다르게 할 것을 말하는 동안 한 번도 해보지 않은 일을 하면서도, 여기에 있을 자격이 없는 사기꾼처럼 느끼면서도, 다른 모든 사람들은 자신이 무엇을 하고 있는지 정확히 알고 있는 것처럼 보이는 동안 자신이 무엇을 하고 있는지 전혀 모르는 상태에서도 ""전력을 다하는"" 것 (걱정 마세요, 그들은 정말로 모릅니다)
     * 이것은 당신이 지금까지 해본 것 중 가장 어려운 일일 수 있음. 당신의 직업 생활에서 가장 흥미진진한 일일 수도 있지만, 고통의 시련임
     * 많은 사람들이 너무 힘들어서 멈춤. 그들을 비난할 순 없음

하지만 당신은 이것을 하지 않을 거에요, 당신은...

     * 재미있는 기능 아이디어가 있어서 그냥 만들고 있음
     * 항상 Rust를 배우고 싶었기 때문에 그냥 배우고 있음
     * AI가 놀랍고 미래이기 때문에, 그것이 고객의 문제를 해결해야 하는 기술이 아님에도 불구하고 그것으로 물건을 만들고 있음
     * ""프로세스""와 ""프레임워크""에 얽매이고 싶지 않아서 자신의 회사를 시작했기 때문에, 그냥 하고 싶은 대로 하고 있음
     * Visual Studio는 편하고 Google 광고 관리자는 낯설고 라스베이거스처럼 돈과 분리되도록 설계되어 있으며, 판매를 요청하거나 누군가와 전화로 그들의 워크플로우에 대해 이야기하거나 당신의 소중한 소프트웨어가 실제로 형편없다는 말을 듣는 것은 말할 것도 없이 불편함
     * 불편함. 무서움. 그리고 당신은 길을 잃었고, 그런 일에 서툴고, 진전을 보지 못하고, 심지어 하고 싶지도 않음
     * 그래서 당신은 무엇을 해야 할지 알고, 그것을 하는 것을 즐기고, 그것을 잘하는 Visual Studio로 다시 미끄러져 들어감
     * 그런 다음 18개월 만에 MRR이 1600달러라고 트위터에 글을 올리지만 인내는 미덕이기 때문에 괜찮다고 말함. 사실 당신이 잘하는 일, 좋아하는 일을 하지만 사업에 필요한 일은 하지 않는다는 잘 알려진 함정에 빠진 것임
     * 인내는 미덕임, 올바른 일을 하고 올바른 목표를 가지고 있다면 말이죠. 그것이 부지런히 잘못된 방향으로 움직이는 것을 의미한다면 그것은 악덕임

Smart Bear는 이 로드맵을 절반만 따랐음

     * 2002년에 창업해서 2007년에 매각
     * Smart Bear는 이 로드맵의 모든 단계를 따르지는 않았지만, 그래도 중요한 단계들을 무시했다면 실패했을 것임

WP Engine은 이 로드맵을 정확히 따라서 유니콘이 되었음

     * WP Engine은 이 로드맵을 정확히 따랐음
     * (글에는 WP Engine의 성장 과정에 대한 상세가 있지만 옮기지 않습니다.)

   너무 좋네요 22

   글이 너무 좋네요.

     많은 사람들이 이 글을 읽고, 자신의 삶(저축과 고통)의 2년을 낭비하기 전에 읽었더라면 좋았을 거라고 말함. 그런 사람이 되지 말 것

   저도 2년 전에 읽었으면 좋았겠어요..

   Sequoia Arc의 Product-Market-Fit 프레임워크
   First Round Capital의 Product-Market-Fit 찾기 프레임워크

   Product Market Fit은 어떤 느낌일까?
   Product-Market Fit 의 4가지 종류
"
"https://news.hada.io/topic?id=14248","Show GN: 내 얼굴은 어떤 동물을 닮았을까?!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 내 얼굴은 어떤 동물을 닮았을까?!

   https://animal-faces.netlify.app/

   웹개발을 처음으로 접하면서
   만들어 본 서비스입니다,,,

   내 얼굴은
   어느 동물을
   닮았으라?!

   부끄럽지만
   구경 와주세요들,,,

   추가로 앱으로도 만들어 보았습니다.
   :=> https://m.onestore.co.kr/mobilepoc/apps/…
"
"https://news.hada.io/topic?id=14341","횡령범들은 좋은 사람들 (2017)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          횡령범들은 좋은 사람들 (2017)

사기꾼의 심리

     * 저자는 변호사로 일하면서 수많은 횡령범들을 만남. 대부분 똑똑하고 매력적인 사람들이었음.
     * 이들은 정직하게 일했다면 더 큰 돈을 벌 수 있었을 텐데, 왜 위험을 감수하고 횡령을 했을까 의문을 가짐.
     * 저자는 한동안 이런 의문을 품다가, 결국 그들이 횡령을 하는 이유를 깨달음.
          + 그들은 횡령 자체를 즐김.
          + 지금 당장 돈이 필요함.
          + 주변 사람들보다 더 똑똑하다고 생각함.
          + 언젠가는 들키고 싶어 하는 심리도 있음.

에디 찬(Eddie Chan)과의 만남

     * 저자는 에디 찬이라는 횡령범을 고발해 승소한 뒤, 에디의 점심 식사 초대를 받음.
     * 식사 자리에서 에디는 횡령한 돈을 모두 썼다고 털어놓음.
          + 그 돈들은 사소하지만 우아한 것들을 사는 데 쓰였다고 함.
     * 에디는 오히려 새로운 사업 기회를 제안하며 투자를 권유함.
          + 자신의 과거를 알고 있으니 오히려 더 안전할 거라고 주장함.
     * 저자는 정직한 사람과 일하고 싶다며 거절함.
     * 하지만 에디는 어차피 아무도 믿을 수 없으니 감시 시스템만 잘 갖추면 된다며 문제될 게 없다고 생각함.

GN⁺의 의견

     * 에디 같은 횡령범들은 사업에서 윤리보다 돈을 최우선시하는 경향이 있음. 법의 맹점을 교묘히 악용하는 수완도 가지고 있음.
     * 반면 진정한 사업가라면 돈 외에도 가치 있는 것을 만드는 기쁨, 팀워크, 성공의 즐거움 등을 중시함.
     * 사업에서 정직과 신뢰는 여전히 중요한 덕목임. 단기적 이익을 위해 이를 저버리면 장기적으로 큰 손해를 볼 수 있음.
     * 에디가 보여준 정직함(?)은 일종의 위선에 불과함. 진정한 정직은 말이 아닌 행동으로 보여주는 것임.
     * 사회 지도층의 부패 문제를 해결하기 위해서는 시스템 개선과 함께 윤리의식 강화도 필요해 보임.
"
"https://news.hada.io/topic?id=14254","캐나다, AI 우위 확보를 위한 3.2조원 규모의 정부 투자 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  캐나다, AI 우위 확보를 위한 3.2조원 규모의 정부 투자 발표

     * 캐나다 정부, 2024년 예산안에서 AI 경쟁력 강화를 위한 $2.4(3.2조원) 규모의 지원책 발표
     * 이는 캐나다의 AI 분야 일자리 증가를 가속화하고, 연구자와 기업이 AI를 개발하고 도입하는 것을 지원하며, 이를 책임감 있게 수행하도록 하기 위한 것

주요 투자 내용

     * 20억 달러를 투자하여 캐나다 최고 수준의 AI 연구자, 스타트업, 스케일업 기업에 컴퓨팅 능력과 기술 인프라를 구축하고 제공
          + AI Compute Access Fund를 통해 연구자와 산업계에 단기 지원 제공
          + Canadian AI Sovereign Compute Strategy를 수립하여 캐나다 소유의 AI 인프라 개발 촉진
     * 지역개발청을 통해 2억 달러를 지원하여 AI 스타트업이 새로운 기술을 시장에 내놓을 수 있도록 지원하고, 농업, 청정기술, 의료, 제조업 등 핵심 분야에서 AI 도입을 가속화
     * NRC IRAP AI Assist Program에 1억 달러를 투자하여 중소기업이 새로운 AI 솔루션을 구축하고 배포하여 규모를 확장하고 생산성을 높일 수 있도록 지원
     * 창작 산업 등 AI로 인해 영향을 받을 수 있는 근로자를 위해 5천만 달러를 투자하여 Sectoral Workforce Solutions Program을 통해 잠재적으로 혼란을 겪는 분야와 지역사회 근로자에게 새로운 기술 교육 제공
     * 5천만 달러를 투자하여 AI의 안전한 개발과 배포를 위한 Canadian AI Safety Institute 신설
          + 이해관계자의 의견을 수렴하고 국제 파트너와 협력하여 고도화된 AI 시스템이나 악의적인 AI 시스템의 위험으로부터 캐나다를 보호하는 방안 모색
     * Artificial Intelligence and Data Act 집행 강화를 위해 AI and Data Commissioner 사무소에 510만 달러 지원

인용문

     * 저스틴 트뤼도 총리는 ""AI는 경제를 변화시킬 잠재력을 가지고 있으며, 캐나다의 잠재력은 명백한 캐나다의 이점을 활용하는 데 있다""며 ""2024년 예산안의 이러한 투자는 캐나다인, 특히 젊은 캐나다인들이 높은 임금을 받는 일자리를 얻을 수 있도록 도울 것""이라고 말함
     * 크리스티아 프리랜드 부총리 겸 재무장관은 ""오늘 우리는 경제 성장을 촉진하기 위해 상당한 투자를 하고 있다""며 ""이는 캐나다가 AI의 세계적인 리더로 남아 최첨단 기술에 있도록 할 것이며, 무엇보다 이는 AI를 주도하는 캐나다인들에게 더 많은 고소득 경력을 의미할 것""이라고 말함

배경 정보

     * 캐나다는 개발, 상용화, 안전성 등 세계 최고 수준의 AI 생태계를 보유하고 있음
     * 캐나다 정부는 2017년 이후 과학적 발견을 지원하고, 캐나다 연구 인재를 육성하며, 전 세계 최고의 연구자를 유치하기 위해 160억 달러 이상을 투자했으며, 캐나다 전역의 AI 생태계와 디지털 인프라 성장을 촉진하기 위해 20억 달러 이상을 투자함
     * 캐나다는 2017년 국가 AI 전략을 수립한 최초의 국가로, Pan-Canadian Artificial Intelligence Strategy를 통해 캐나다가 AI의 세계적인 리더로 남을 수 있도록 지원하고 있음
     * 연방 연구 기관인 CIHR, NSERC, SSHRC는 2017-18년 이후 AI 관련 연구에 9억 3,680만 달러의 자금을 지원했음
     * NRC IRAP는 2017년 이후 AI 관련 기업에 7억 580만 달러의 기여금을 제공했으며, 이는 1,111개 기업과 3,837개 프로젝트를 지원함
     * 캐나다 정부는 또한 Sanctuary AI, 반도체 회사 Ranovus 등 빠르게 성장하는 AI 관련 기업에 Strategic Innovation Fund를 통해 상당한 투자를 해왔음

캐나다의 책임감 있는 AI 도입

     * 캐나다는 최근 Center for AI and Digital Policy의 2024년 인공지능과 민주적 가치에 관한 글로벌 보고서에서 한국, 일본과 함께 80개국 중 1위를 차지함
     * 2022년 6월 의회에 제출된 Artificial Intelligence and Data Act(AIDA)는 건강, 안전, 인권에 가장 큰 영향을 미치는 시스템에 중점을 두고 캐나다 민간 부문에서 AI 시스템의 책임감 있는 설계, 개발 및 사용을 촉진하기 위해 고안됨
     * 2023년 9월 발표되고 Cohere, Ada, Coveo, BlackBerry, TELUS, OpenText, IBM 등 주요 기술 기업이 서명한 Voluntary Code of Conduct on the Responsible Development and Management of Advanced Generative AI Systems는 기업이 생성형 AI 시스템을 책임감 있게 개발하고 사용하고 있음을 입증하고 기술에 대한 캐나다인의 신뢰를 강화할 수 있게 함
     * 2020년 캐나다 인공지능 자문위원회 산하에 설립된 AI 대중 인식 워킹그룹은 AI에 대한 대중의 인식을 높이고 신뢰를 촉진하기 위한 방안을 모색하는 임무를 맡고 있음

캐나다 AI 산업 현황

     * 2022-23년 캐나다에는 14만 명 이상의 적극적으로 활동하는 AI 전문가가 있으며, 이는 전년 대비 29% 증가한 수치임
     * 캐나다는 세계 최고 수준의 AI 연구자 중 10%를 보유하고 있으며, 이는 세계에서 두 번째로 많은 수치임
     * 캐나다는 AI 분야 여성 인력의 전년 대비 증가율(2022-23년에만 67% 증가)에서 세계 1위, G7 국가 중 AI 인재 증가율 1위를 기록하고 있으며, 2019년 이후 1인당 AI 관련 논문 발표 수에서 G7 1위를 유지하고 있음
     * 2022-23년 캐나다 투자자가 출원한 AI 특허 수는 전년 대비 57% 증가했으며, 이는 같은 기간 G7 평균 23%의 거의 3배에 달하는 수치임
     * 2022년 캐나다 AI 분야는 86억 달러 이상의 벤처 캐피탈을 유치했으며, 이는 캐나다 전체 벤처 캐피탈 활동의 거의 30%를 차지함
     * 캐나다는 AI 기업에 대한 1인당 총 자금 조달액에서 G7 중 3위를 기록하고 있으며, 2019년 이후 670개 이상의 캐나다 AI 스타트업과 30개의 캐나다 생성형 AI 기업이 100만 USD 이상의 투자를 받았음

GN⁺의 의견

     * 캐나다 정부가 AI에 대규모 투자를 하는 것은 미래 성장 동력을 확보하기 위한 전략으로 보임. 특히 AI 컴퓨팅 인프라 구축, 스타트업 지원, 중소기업 AI 도입 지원 등 AI 생태계 전반을 아우르는 투자 계획을 세운 점이 눈에 띔
     * 다만 AI로 인한 일자리 대체 등 부작용에 대한 대책은 다소 미흡해 보임. 근로자 재교육에 대한 지원 규모가 상대적으로 작은 편이며, 구체적인 대책도 제시되지 않음
     * 데이터 주권 확보와 자국 AI 기술 경쟁력 강화를 위한 인프라 투자와 전략 수립은 바람직해 보이나, 자칫 보호무역주의로 흐를 우려도 있음. 국제 협력도 균형있게 모색할 필요가 있어 보임
     * 이번 투자가 실제 AI 기술 발전과 산업 성장으로 이어지기 위해서는 인재 양성, 기술 사업화, 규제 완화 등 다방면의 노력이 필요할 것으로 보임. 정부 주도의 대규모 투자가 자칫 비효율을 낳을 수 있다는 점도 고려해야 함
     * 한편 AI 개발과 활용에 있어 안전성과 책임성을 강조하고 규제 체계를 마련하려는 시도는 긍정적으로 평가할 만함. 그러나 급속도로 발전하는 AI 기술의 특성상 규제가 혁신을 저해할 우려도 있어 균형 잡힌 접근이 요구됨
     * 캐나다의 이번 투자 계획은 다른 국가의 AI 전략에도 영향을 미칠 것으로 예상됨. 각국 정부가 AI 경쟁력 확보를 위해 대규모 투자에 나설 가능성이 높아 보이며, 민간 투자 유치 경쟁도 더욱 치열해질 전망임
"
"https://news.hada.io/topic?id=14245","소 마그넷을 이용한 이물질 제거 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          소 마그넷을 이용한 이물질 제거 기술

        Hacker News 의견

     * 소에게 자석을 투여하는 것은 사료 속에 혼입된 철 조각들로 인해 소화기관에 손상을 입는 것을 방지하기 위함
          + 사일리지 절단기나 건초 베일러에 의해 사료에 철 조각이 유입될 수 있음
          + 사료 배합기의 자석으로 철 조각을 걸러내려 하지만 일부는 통과할 수 있음
          + 9개월령 송아지에게 수의사가 자석을 투여하며, 자석을 뱉어내지 않도록 주의해야 함
     * 소에게 자석을 투여하는 것과 소들이 남북 방향으로 정렬하는 현상 사이의 연관성은 크지 않을 것으로 추측됨
          + 사슴도 정렬하는 경향이 있지만 위에 자석을 가지고 있지는 않기 때문
     * 아마존에서 기부받은 소 자석을 해커스페이스에서 냉장고 자석으로 사용하기도 함
     * 수의학 모델을 적용하면 사람 의료 비용을 많이 절감할 수 있을 것이라는 의견도 있음
          + 소에게 자석을 먹여 못이 소화기관을 통과하지 않게 하는 식으로 문제를 실용적으로 해결
     * 소 자석은 다양한 각도로 사용할 수 있고 강력해서 좋은 냉장고 자석이 됨
     * 소들은 평생 끔찍한 기분을 느낄 것 같다는 생각도 있음
     * 목장 환경이 ""쓰레기로 가득한"" 경우 소들이 쓰레기를 먹게 되어 체내에 축적될 수 있음
     * 어릴 때 소 자석 두 개를 가지고 재미있게 놀았다는 경험담도 있음
"
"https://news.hada.io/topic?id=14260","미국 정부, 마침내 더 안전한 테이블 톱 사용 의무화 추진 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  미국 정부, 마침내 더 안전한 테이블 톱 사용 의무화 추진 가능성

     * 테이블쏘 사고로 많은 사람들이 심각한 부상을 입고 있음
          + 매년 미국에서 약 30,000건의 테이블쏘 날 접촉 부상이 발생하고 그 중 4,000건이 절단으로 이어짐
          + 한 사람이 병원에 입원할 경우 사회적 비용이 50만 달러 이상이 듦 (소득 손실과 고통 등 포함)
     * SawStop이라는 안전 기술이 존재하지만 의무화되지 않고 있음
          + SawStop은 테이블쏘 날이 살과 접촉하면 수 밀리초 내에 날을 정지시키고 후퇴시켜 심각한 부상을 막음
          + 하지만 제조사들은 SawStop 기술 탑재를 의무화하면 테이블쏘 가격이 상승할 것이라며 반대해왔음
     * 연방 소비자제품안전위원회(CPSC)가 모든 신규 테이블쏘에 SawStop과 유사한 안전 브레이크 장착을 의무화할 것으로 보임
          + CPSC는 그동안 여러 차례 시도했으나 번번이 실패했음
          + 하지만 바이든 정부 임명자들 덕분에 찬성파가 과반을 차지하게 됨
          + CPSC는 지난 10월 새로운 규정을 추진하기로 결정했고 올해 안에 최종 승인될 것으로 예상됨
     * 산업계는 여전히 안전 기준 강화에 반대하고 있음
          + 제조사 단체인 파워툴연구소는 새 규정이 과도한 개입이며 소규모 제조사들이 폐업할 수 있다고 주장함
          + SawStop이 관련 특허를 독점해 불공정하게 이득을 볼 것이라는 주장도 제기함
          + 하지만 SawStop은 누구나 안전 기술을 사용할 수 있도록 특허를 공개하겠다고 선언함

GN⁺의 의견

     * 테이블쏘 부상은 매우 심각한 문제인 것 같음. 특히 절단 부상은 외과의사도 치료하기 어려운 수준이라고 함. 안전 기술 도입이 시급해 보임.
     * 제조사들의 반대 이유가 설득력이 떨어짐. 안전을 위해 약간의 가격 인상은 감수해야 할 듯. SawStop도 특허를 공개하겠다고 해서 불공정 이득 문제도 해소될 것으로 보임.
     * 다만 모든 테이블쏘에 의무 적용하는 것이 최선인지는 의문. 기존 제품 사용자들이 오히려 오래된 위험한 제품을 계속 쓸 수도 있음. 점진적 도입이나 보조금 지원 등의 방안도 검토해 볼 만함.
     * 안전 기준을 지키지 않는 제조사에 대한 규제 강화, 소비자 인식 개선을 위한 캠페인 등 의무화 외에도 다각도로 접근할 필요가 있어 보임.
     * 국내에서도 테이블쏘 등 전동공구 안전사고가 많이 발생하는 것으로 알고 있음. 미국의 사례를 참고해 안전기준을 강화하고 신기술을 도입하는 방안을 적극 검토해야 할 것임.

        Hacker News 의견

   요약:
     * 안전벨트에 반대하는 사람들이 많은 것에 놀라움. 전문가들에게도 사고는 일어남.
     * 아버지와 목수 친구의 테이블쏘 사고 사례. 연간 3만 건 이상의 부상이 발생함.
     * SawStop CEO가 특허를 개방하겠다고 약속한 점이 중요함. 볼보의 3점식 안전벨트 사례와 유사.
     * SawStop의 동기에 대한 의심. 저가 제조사와 경쟁하기보다는 안전장치 시장을 선점하려는 것으로 보임.
     * SawStop 기술 적용 시 저가형 테이블쏘 가격이 크게 오를 것임. 소비자의 선택권 침해 우려.
     * SawStop의 과거 특허 남용 행태에 대한 비판. 특허 만료를 앞두고 태도를 바꾼 것으로 의심받음.
     * 사회적 비용 절감을 위해 사전 예방에 투자하는 것이 타당함. 연간 3만 건의 부상 통계를 무시할 수 없음.
     * 법안이 SawStop에게 독점권을 줄 수 있음. Bosch 등 경쟁 기술도 허용되어야 함.
     * 캐나다에서는 SawStop 제품 가격이 매우 높음. 700캐나다달러와 2200캐나다달러 차이.
     * SawStop의 작동 원리는 목재와 인체의 전도성 차이를 감지하는 것임.
     * 상용 제품에 우선 적용되어야 함. 아버지가 테이블쏘 사고로 손가락을 다친 경험담.
     * 안전장치를 사용자들이 해제할 가능성과 SawStop으로 절단할 수 없는 소재가 있다는 지적도 있음.
"
"https://news.hada.io/topic?id=14235","식물 뿌리 시스템 1,180점 드로잉","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          식물 뿌리 시스템 1,180점 드로잉

뿌리 시스템 도면 컬렉션 (Root System Drawings Collection) 요약

     * 이 컬렉션은 다양한 식물의 뿌리 시스템을 상세히 그린 드로잉 모음임.
     * 하위 컬렉션으로는 중부 유럽 목초지 식물, 농작물과 잡초, 다양한 서식지의 식물, 중부 유럽 산림 수목 및 관목, 야채밭 작물 등의 뿌리 도감(atlas)이 포함됨.
     * 개별 드로잉에는 식물의 학명이 제목으로 표기되어 있음.
     * 전체 1,180개의 뿌리 시스템 드로잉 레코드가 있음.
     * 각 페이지당 표시 레코드 수를 10~200개 단위로 조정할 수 있고, 페이지 이동도 가능함.

GN⁺의 의견

     * 식물학이나 농학 등을 전공하는 학생들에게 실제 식물의 지하부 구조를 살펴볼 수 있는 좋은 자료가 될 것 같음.
     * 토양의 성질에 따라 뿌리의 발달 양상이 어떻게 달라지는지 비교해 볼 수 있을 것임.
     * 작물의 품종별, 재배 조건별 뿌리 발달 차이를 연구하는데도 활용 가능할 듯함.
     * 뿌리 그림과 함께 간단한 설명이 추가되면 전문 지식이 없는 사람들도 이해하기 좋을 것 같음.
     * 온라인 자료의 장점을 살려, 실제 식물 사진이나 서식지 정보 등을 연계해주면 더욱 유용할 것으로 보임.

        Hacker News 의견

     * 정원 가꾸기를 하다 보면 흔한 식물과 잡초의 뿌리 시스템을 볼 수 있음. 메마른 흰 뿌리줄기는 10cm 정도까지 자라지만 실제 뿌리는 훨씬 더 깊이 자랄 수 있음.
          + 예: 칡의 뿌리는 2.2m까지 자람.
     * 쇠뜨기는 깊은 뿌리를 가지며 매우 튼튼해서 제초제에 잘 견디고 포자로 번식할 수 있음.
     * 둥근잎까치수영은 얇은 뿌리들이 밀집된 네트워크를 가짐.
     * 민들레의 뿌리는 이 예시에서 4.5m까지 자란 것으로 나타남!
     * 감자는 토마토와 같은 속인데, 덩이줄기도 볼 수 있음.
     * 당근은 식용 주근 이외에도 뿌리를 가짐.
     * Erwin Lichtenegger 박사가 1960년부터 2009년까지 대규모로 연구를 이끌었음. 이를 3D로 만들어보고 싶었지만 도서관이나 연구소로부터 답변을 받지 못함. 오늘날의 도구로 기록한다면 어떤 성과를 거뒀을지 궁금함. 이런 노력과 헌신은 드문 것으로, 예술작품이자 과학으로 잘 보존되어 다행임.
     * 산티아고 라몬 카할 박사의 뇌 뉴런 연구 노트도 이 뿌리들과 멀리서 보면 놀랄만한 유사성이 있는 박물관급 작품임.
     * USDA 과수 컬렉션에서 열매를 맺는 부분도 볼 수 있음.
     * 어떤 면에서는 Allen Brain Atlas의 뉴런 세포 추적 데이터베이스를 연상시킴.
     * 뿌리가 실제로 자라는 모습은 토양에 크게 좌우됨. 모래, 점토, 습기, 특히 토양 다짐 여부와 위치가 큰 영향을 미침. 많은 뿌리 시스템은 다져진 토양을 뚫고 자라지 못해 다양성이 크다는 점을 고려해야 함.
     * 나무의 뿌리는 생각보다 얕고, 작은 식물의 뿌리는 생각보다 깊음.
     * 평소 볼 수 없던 것을 보는 좋은 방법으로, 식물에 대한 감사함을 느끼게 해줌.
"
"https://news.hada.io/topic?id=14264","TSAC - Low Bitrate 오디오 압축 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TSAC - Low Bitrate 오디오 압축 기술

     * FFMPEG/QEMU를 만든 Bellard의 새로운 프로젝트
     * TSAC는 오디오 압축 유틸리티로, 44.1kHz에서 모노 5.5kb/s 또는 스테레오 7.5kb/s와 같은 매우 낮은 비트레이트에 도달하면서도 좋은 음질을 제공
     * TSAC는 3.5분 길이의 스테레오 노래를 192KiB 크기의 파일로 압축할 수 있음
     * 빠른 동작을 위해서는 Nvidia GPU가 필요하며, CPU만으로도 지원되지만 속도가 느림

기술 정보

     * TSAC는 스테레오로 확장된 Descript Audio Codec의 수정 버전과 압축률을 더욱 높이기 위한 Transformer 모델을 기반으로 함. 두 모델 모두 파라미터당 8비트로 양자화됨
     * Transformer 모델은 결정적이고 재현 가능한 방식으로 평가되므로, 결과는 정확한 GPU 또는 CPU 모델이나 구성된 스레드 수에 의존하지 않음. 즉 압축된 파일은 서로 다른 하드웨어나 소프트웨어 구성을 사용하여 압축 해제할 수 있음.

   홈페이지보니 잠깐 LLM에 관심을 가지기도 했더군요;;;; 이런 사람이 이런 최신 기술을? 이런 생각이 들면서 역시 AI가 대세구나 싶었습니다.

   예전에 적었던 괴물 같은 아저씨 Fabrice Bellard에 대한 소개를 업데이트 하면..

   Fabrice Bellard

   1989년에 LZEXE 개발

   1996년에 Harissa - Java Virtual Machine 이자 Java to C 코드 컴파일러

   1997년에 2진법 표기시 파이(π)의 특정 자리수 값을 알아내는 공식 발표.
   -> 앞자리를 전혀 계산하지 않는 방법으로 계산. 1조번째 자리는 ""1""
   https://en.wikipedia.org/wiki/Bellard%27s_formula

   1998년에 TinyGL 발표 - 작고 임베드가능한 OpenGL 구현체

   2000년에 FFMpeg 발표. 현재 우리가 보고있는 대부분의 동영상 플레이어가 사용중.

   2000년에 가장 큰 소수를 찾는 448바이트 C코드로 IOCCC 우승. 이 소수는 2016년까지 발견된 가장 큰 소수였음.

   2001년에 Tiny C Compiler 발표 - 초경량 C 컴파일러

   2002년에 QEmacs 발표 - 초경량 Emacs 클론. HTML/XML/CSS2 WYSIWYG 렌더링 및 수정가능 (자체 브라우저엔진 내장)

   2003년에 QEMU 발표 - 하드웨어 가상화 기능을 갖춘 CPU 에뮬레이터

   2004년에 TinyCC Boot Loader 발표 - 리눅스 커널을 직접 컴파일해서 부팅이 가능한 부트로더

   2005년에 DVB-T 시그널 생성기 발표 : 비싼송출기 대신 데스크탑에서 디지털티비 송출이 가능. 이건 소스코드 미공개

   2009년에 π 소수점 아래 2조 7천억자리 까지 계산해서 세계 신기록세움. 자기 데스크탑으로 131동안 계산했다고.
   -> 큰 숫자에 관심보다는 그냥 컴퓨터 프로그래밍 도전을 위해서 였다고.

   2011년에 JSLinux 발표. 웹브라우저에서 실행되는 Linux 발표.

   2019년에 QuickJS JavaScript Engine 작고 빠르고 임베드 가능한 자바스크립트 엔진 발표

   2022년에는 gpt2tc(GPT-2)를 이용해서 만든 SaaS인 TextSynth 공개

   그외에도 JPG보다 압축률좋은 HEVC 기반 이미지 포맷 BPG (자바스크립트 디코더 제공해서 아무 브라우저에서나 사용가능)

   4G LTE/5G NR 베이스 스테이션을 PC기반으로 저렴하게 구현했고, 이건 자신의 회사인 Amarisoft 를 통해서 상품화

   하는일마다 이게 어찌 한사람이 하는 일인지 놀라울뿐인 사람.

   와..

   언젠가 HN에서 이 사람이 만든 코드에 대한 포스팅에서...

   'Bellard는 여기에 (HN) 포스팅하지 않아?' 라고 누군가 물었는데, '저렇게 productive한 사람이 여기와서 글쓰고 있겠냐' 이런 답글들이... ㅎㅎ

   정말 괴물이네요....

  Hacker News 의견

   요약:
     * Bellard의 새로운 오디오 코덱인 TSAC에 대한 긍정적 반응이 많음. 특히 낮은 비트레이트에서의 성능이 기존 코덱 대비 우수한 편임.
     * TSAC의 압축 파일을 손상시키면 흥미로운 결과가 나옴. Fast 모드와 일반 모드의 사운드가 서로 다름.
     * 실시간 처리를 위해서는 NVIDIA GPU가 필요하며, 모바일 기기에서의 디코딩은 부담이 될 수 있음. 저사양 임베디드 시스템에서의 활용은 제한적일 듯함.
     * TSAC 디코더의 압축 파일 크기가 237MB나 되어 의아함을 자아냄. 오디오 샘플이 디코더에 포함되어 있는 것 아닌가 하는 의문이 제기됨.
     * Codec2 등 더 낮은 비트레이트를 지원하는 코덱과의 비교가 궁금함.
     * DAC(TSAC의 기반 코덱) 개발자로부터 TSAC에 대한 코멘트가 있었음. Transformer를 활용한 개선 방식이 흥미로움.
     * TSAC의 동작 방식이 AI 음악 생성 모델들과 유사함. 일부는 토큰을 언어 모델에 입력하여 음악을 생성하고, 일부는 Diffusion 모델을 위한 연속적 표현을 제공하는 방식으로 토큰화를 대체함.
     * TSAC의 결정적이고 재현 가능한 평가 방식에 대한 의문이 제기됨. Floating Point와 동시성을 활용하는지 궁금해 함. AMD GPU로의 포팅이 결정론적 동작에 영향을 미칠 수 있음.
     * 대부분의 미디어 압축 기술은 저비트레이트 시나리오에 초점을 맞추고 있음. 고비트레이트에서의 개선 효과는 어느 정도일지 궁금해 함. 예를 들어 256kbps AAC 대비 AV1의 10Mbps 성능 차이 등.
"
"https://news.hada.io/topic?id=14302","[번역] MoD(Mixture-of-Depths): Transformer 기반 언어 모델 연산 최적화를 위한 접근법, 그리고 MoDE(MoD+MoE)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                          [번역] MoD(Mixture-of-Depths): Transformer 기반 언어 모델 연산 최적화를 위한 접근법, 그리고 MoDE(MoD+MoE)

    PyTorchKR

     * Jamba나 Qwen1.5-MoE, 또는 DBRX 등과 같이 여러 '전문가' 블록들 중 하나 이상을 선택하여 입력 token의 처리를 진행하는 MoE(Mixture-of-Experts) 방법이 최근들어 많이 사용되고 있습니다. 이러한 MoE 방식은 방대한 LLM 중 일부를 동적으로 조절하여 연산 자원을 효율적으로 할당하면서 더 나은 성능을 보이고 있습니다.
     * 이렇게 MoE가 여러 전문가들 중 일부를 선택하는 방식으로 '모델의 폭(width)'을 동적으로 조절했다면, 이번에 소개하는 MoD(Mixture-of-Depth)는 '모델의 깊이(depth)'를 동적으로 조절하는 접근 방식을 취하고 있습니다. 즉, 특정 토큰에 대해서 모델의 전체 레이어에 대해서 연산을 하지 않고, 일부 레이어들을 건너뛰는 방식으로 동적으로 연산을 하는 것인데요, 함께 살펴보시죠.


MoD(Mixture-of-Depths): Transformer 기반 언어 모델 연산 최적화를 위한 접근법 (Mixture-of-Depths: Dynamically allocating compute in transformer-based language models)

  소개

   전통적으로, 트랜스포머 모델은 입력 시퀀스의 모든 부분에 동일한 계산 자원을 할당합니다. 하지만 이번에 소개하는 MoD(Mixture-of-Depth) Transformer 논문은 Trnasformer의 특정 시퀀스 위치에 컴퓨트 자원을 동적으로 할당하고, 다른 레이어를 통해 할당을 변화시키는 시도를 합니다. 이러한 Mixture-of-Depths(MoD) 전략을 사용하기 위해 저자들은 어떤 토큰을 처리할지 결정하기 위해 top-k 라우팅 메커니즘을 사용하여 전체 연산량을 관리합니다. 이 기술은 기존 모델의 성능에 필적하거나 뛰어나면서도, 훨씬 적은 FLOPs를 요구하며, 학습 후 샘플링 동안 최대 50%의 속도 향상을 제공합니다.

   Attention is All You Need 논문에 소개된 Transformer 구조

   최근의 트랜스포머 모델과 LLM(Large Language Model)은 그 규모와 복잡성이 지속적으로 증가하고 있습니다. 이러한 모델들은 인간 수준의 언어 이해와 생성 능력에 접근하기 위해 수십억 개의 파라미터를 활용하며, 그 결과로 놀라운 성능을 보여주고 있습니다. 그러나, 이러한 발전에는 상당한 계산 비용과 에너지 소비가 수반되며, 모델 규모의 증가는 학습과 추론 시간을 급격히 증가시킵니다.

   이는 Transformer가 입력 시퀀스의 모든 토큰에 대해서 동일한 양의 연산을 수행하고 있기 때문입니다. 하지만, 어떤 토큰은 문맥 이해에 있어 핵심적인 역할을 하지만 어떤 토큰은 상대적으로 덜 중요하는 등, 모든 토큰들이 동등한 양의 정보를 제공하지 않을 수 있다는 아이디어에서 출발을 합니다.

   MoD Transformer는 각 토큰에 대해 동적으로 계산을 할당함으로써, 모델이 필요한 곳에 자원을 집중시킬 수 있게 합니다. 이는 모델의 전체적인 연산 비용을 줄이는 동시에, 중요한 토큰에 더 많은 주의를 기울임으로써 정보 처리의 효율성을 높일 수 있게 됩니다. 특히, LLM과 같은 대규모 모델에서 MoD의 접근 방식은 학습과 추론 과정에서의 시간과 자원을 절약할 수 있는 중요한 방법이 될 수 있습니다.

  MoD(Mixture-of-Depths) 기법 소개

   MoD 기법은 트랜스포머 레이어의 각각에서 어떤 토큰을 처리할지 동적으로 선택하는 top-k 라우팅 메커니즘을 통합합니다. 이를 통해 선택된 일부 토큰들만 전체 연산 과정을 거치며, 다른 토큰들은 레이어(들)을 건너뛰게 됩니다.

   그림1 / 좌측: MoD(Mixture-of-Depths) Transformer 개요: MoE(Mixture-of-Experts) 구조와 유사하게 라우터를 통해 연산 경로를 선택합니다. 이 때, MoE와는 다르게 표준 블럭(Self-Attention 및 MLP)을 연산할지 말지를 결정하게 됩니다. 이 때 입력 토큰($X_i$)이 라우터의 결정에 따라 전체 연산을 활성화하지 않는 경우, 해당 레이어의 연산을 거치지 않게 됩니다.
   그림 1 / 우측: 64개 토큰으로 축소된 짧은 시퀀스에 대한 라우팅 결정 결과입니다. (X축: 시퀀스, Y축: 레이어) 보라색은 해당 레이어의 연산을 모두 진행하였으며, 주황색은 해당 레이어의 연산을 건너뛴 것입니다.

   위 그림의 설명과 같이, MoD는 트랜스포머 아키텍처 내에 예측 라우터를 구현하여 각 토큰마다 레이어 연산의 진행 여부를 결정합니다. 이를 통해 연산 자원을 상대적으로 ""중요한"" 토큰에 집중할 수 있습니다.

    MoD Transformer의 학습

   MoD 트랜스포머의 학습 과정은 기본적으로 표준 트랜스포머와 유사합니다. 입력 시퀀스는 모델에 공급되고, 각 레이어를 통해 전달되면서 필요한 계산이 수행됩니다. 그러나 MoD 트랜스포머는 라우터를 통해 각 토큰이 어떤 계산 경로를 따를지 결정하는 추가적인 단계를 포함합니다.
    1. 라우터 가중치 계산: 라우터는 모델의 각 레이어에서 각 토큰에 대한 가중치를 계산합니다. 이 가중치는 해당 토큰이 받아야 할 계산의 양을 나타내며, 토큰의 중요성에 기반합니다.
    2. 상위 토큰 선택: 라우터는 계산된 가중치를 기반으로, 각 레이어에 대해 상위 개의 토큰을 선택합니다. 이 토큰들은 전체 계산을 수행하는 경로로 안내됩니다.
    3. 연산 경로 할당: 선택된 토큰은 표준 계산(Self-Attention 및 MLP)을 수행하는 경로로 할당됩니다. 나머지 토큰은 잔여 연결을 통해 전달되어, 추가 계산 없이 다음 레이어로 넘어갑니다.
    4. 손실 계산 및 역전파: 모델의 출력이 최종 손실 함수를 통해 평가되고, 그래디언트가 모델을 통해 역전파되어 가중치를 업데이트합니다. 이 과정에서 라우터도 학습되어, 시간이 지남에 따라 더 효율적인 라우팅 결정을 내릴 수 있습니다.

    MoD Transformer의 라우팅 방식 (Routing Schemes)

   라우팅 구현은 MoD Transformer의 핵심적인 부분입니다. 저자들은 3가지 라우팅 방식을 비교하여 Expert-Choice MoD 방식의 토큰 라우팅이 가장 나은 성능을 보이는 것을 확인하였습니다. 소개된 다른 라우팅 방식들과의 비교를 해보겠습니다:

      토큰 선택(Token-choice) 라우팅

   토큰 선택 라우팅에서는 각 토큰이 자신이 거칠 경로를 스스로 선택합니다. 모델은 각 토큰에 대해 다양한 계산 경로(예: 다른 레이어 또는 처리 블록)에 대한 확률 분포를 생성하고, 이 분포에 따라 토큰을 해당 경로로 전달합니다.

   토큰 선택 라우팅은 각 토큰이 가장 적합한 계산 경로를 선택할 수 있어, 매우 유연한 라우팅이 가능합니다. 또한, 모델이 각 토큰의 중요도나 문맥을 더 정밀하게 고려할 수 있어, 개별 토큰에 최적화가 가능합니다.

      전문가 선택(Expert-choice) 라우팅

   전문가 선택 라우팅에서는 모델이 각 경로(또는 ""전문가"")가 처리할 토큰을 직접 선택합니다. 이는 각 토큰의 라우터 가중치를 기반으로 상위 개의 토큰을 선별하는 top- 메커니즘을 사용하여 이루어집니다.

   이렇게 전문가 선택 라우팅을 하게 되면 토큰이 각 경로에 균등하게 분배될 수 있어, 연산 부하가 균형있게 분산되므로 모델의 연산 자원을 보다 효율적으로 활용할 수 있습니다. 또한, 상위 개의 토큰이 명확하게 결정되므로, 모델의 예측 가능성과 안정성이 향상됩니다.

      전문가 선택 MoD(Expert-choice MoD)

   전문가 선택 MoD는 전문가 선택 라우팅의 개념을 MoD 트랜스포머의 구조에 적용한 것입니다. 이 방식에서는 모델이 각 레이어 또는 처리 단계에 대해 상위 개의 토큰을 선택하고, 선택된 토큰만이 계산을 수행하는 경로를 따라 처리됩니다. 나머지 토큰은 잔여 연결을 통해 비용이 적게 드는 경로를 따릅니다.

   이러한 방식은 선택된 토큰만이 계산을 수행하므로, 전체 모델의 FLOP 사용량이 크게 감소합니다. 또한, 중요한 토큰에 대해서는 전체 레이어에 대한 연산을 보장하면서도, 불필요한 연산은 최소화하여 모델의 성능을 유지하거나 향상시킬 수 있습니다. 마지막으로 라우터를 통한 동적 라우팅을 통해 모델이 입력 시퀀스의 특성에 따라 계산 자원을 유동적으로 할당할 수 있는 장점이 있습니다.

      라우팅 구현 방식

   라우팅의 구현은 다음 3가지 주요 단게를 통해 가능합니다:
    1. 토큰 임베딩과 라우터 가중치 결정: 모델의 각 레이어에 대해, 주어진 시퀀스의 토큰 임베딩 집합 $X^i$ 이 있습니다. 각 토큰 임베딩 $x^l_i$ 에 대해서, 라우터는 선형 변환을 통해 해당 토큰이 연산에 참여할 가능성을 나타내는 스칼라 가중치 $r^l_i$ 를 계산합니다.
    2. 상위 가중치 결정: 토큰의 라우터 가중치 집합 $R^l$ 에서 $\beta$ 번째 가중치의 백분위 확률 $P_\beta(R^l)$ 을 찾습니다. 이 때 $\beta$ 는 모델이 각 레이어에서 처리할 토큰의 비율을 결정합니다. 따라서 라우터 가중치가 $P_\beta(R^l)$ 보다 큰 토큰이 연산에 참여하게 됩니다.
    3. 연산 경로 선택: 각 토큰은 라우터 가중치 $r^l_i$ 과 비교하여 $P_\beta(R^l)$ 보다 크거나 같으면 해당 레이어의 연산을 처리하며, 작으면 다음 레이어로 직접 전달됩니다. 이를 통해 선택된 토큰에 대해서만 계산을 수행하고, 나머지 토큰은 계산 비용을 발생시키지 않는 경로를 따라 처리할 수 있게 됩니다.

   이러한 라우팅 구현 시 다음과 같은 내용을 핵심적으로 고려해야 합니다:
     * 가중치에 기반한 동적 결정: 라우팅 과정은 각 토큰의 가중치를 기반으로 동적으로 결정되며, 이는 토큰의 중요도를 반영합니다. 중요한 토큰은 더 많은 계산을 받아 모델의 성능을 최적화하는 반면, 덜 중요한 토큰은 잔여 경로를 통해 비용을 절감합니다.
     * 계산 효율성과 성능 최적화: 이러한 라우팅 메커니즘을 통해 MoD 트랜스포머는 계산 자원을 효율적으로 사용하면서도, 모델의 성능을 유지하거나 향상시킬 수 있습니다. 특히, 계산 비용이 높은 레이어에서 중요한 토큰만을 처리함으로써 전체적인 FLOP 사용량을 줄일 수 있습니다.
     * 구현의 단순성과 효율성: 라우팅은 선형 변환과 백분위수 계산을 통해 구현되므로, 상대적으로 단순하며 효율적입니다. 이는 모델 학습과 추론 과정에서 계산 부담을 추가하지 않으면서도, 계산 자원의 동적 할당을 가능하게 합니다.

    MoD Transformer의 동작 예시

   지금까지 살펴본 내용에 따라 MoD Transformer의 동작을 예시를 통해 설명하겠습니다.

   예를 들어, 입력 시퀀스에 100개의 토큰이 있고, 라우터가 를 10으로 설정했다고 가정해 봅시다. 이 경우, 각 레이어에서 라우터는 가장 중요한 10개의 토큰을 선택하고, 이 토큰들만이 표준 계산 경로를 따라 처리됩니다.

   나머지 90개의 토큰은 계산을 건너뛰고, 잔여 연결을 통해 다음 레이어로 직접 전달됩니다. 이 과정을 통해, MoD 트랜스포머는 전체 FLOP 사용량을 줄이면서도 중요한 토큰에 대해 필요한 계산을 보장합니다.

  MoD Transformer의 성능 비교

    학습 성능

   하이퍼파라미터 최적화: 12.5% 용량 라우팅 블록을 전체 주의(attention) 블록과 교차하여 배치한 MoD 트랜스포머 변형을 학습시키는 실험을 통해, 최적의 하이퍼파라미터 설정을 찾았습니다. 이 설정은 isoFLOP 분석에서 최적 기준선보다 더 나은 성능을 제공했습니다.
     * 계산 효율성: 특정 MoD 변형은 기존 모델 대비 더 적은 FLOP으로 동일한 성능을 달성하면서, 66% 더 빠른 처리 속도를 보였습니다.

    라우팅 분석

   라우팅 결정의 희소성: 12.5% 용량(capacity) 라우팅을 사용함으로써, 대부분의 토큰은 블록을 우회하고 소수의 중요한 토큰만이 블록을 통과했습니다. 이는 라우터 가중치 분포에서도 확인할 수 있으며, 네트워크는 깊이에 따라 특정 토큰을 선호하여 라우팅하기도 했습니다.

    추론 성능

   자동 회귀 추론: 학습 시 비인과적(non-causal) top- 라우팅 스킴에서 추론 시 인과적(causal) 예측 기반 접근법으로 전환하였을 때, 성능 저하가 거의 없었습니다. 이는 해당 예측 문제의 학습이 쉽고, 학습 초기부터 97% 이상의 정확도를 달성했기 때문으로 보입니다.

  Mixture-of-Depths-and-Experts(MoDE) = MoD + MoE

   MoDE(Mixture-of-Depths-and-Experts)는 MoD(Mixture-of-Depths) 기법과 MoE(Mixture of Experts) 기법의 통합을 의미합니다. 이 방식은 두 가지 접근 방식의 장점을 결합하여, 트랜스포머 모델의 계산 효율성과 성능을 동시에 최적화하는 데 목적이 있습니다. MoD 방식이 각 토큰에 대해 더 깊이 또는 덜 깊이 계산을 수행하도록 선택하는 반면, MoE 방식은 다양한 ""전문가"" 중에서 가장 적합한 전문가를 통해 토큰을 처리합니다. MoDE는 이 두 가지 접근 방식을 통합하여, 토큰이 특정 블록을 건너뛰거나 선택적으로 더 깊은 계산을 수행할 수 있게 함과 동시에, 다양한 전문가 중에서 최적의 처리 방식을 선택할 수 있도록 합니다.

    MoDE의 구현 방식

   MoDE는 두 가지 주요 구현 방식을 가집니다: 단계적(Staged) MoDE와 통합된(Integrated) MoDE.
    1. Staged MoDE(단계적 MoDE): 단계적 MoDE는 먼저 MoD 기법을 적용하여 각 토큰의 계산 경로를 결정하고, 그 다음에 MoE 기법을 적용하여 선택된 경로에서 처리될 토큰을 각각의 전문가 블록으로 라우팅합니다. 이렇게 하면, 모델은 먼저 계산의 깊이를 조절한 후, 각 단계에서 최적의 전문가를 선택할 수 있습니다.
    2. Integrated MoDE(통합된 MoDE): 통합된 MoDE는 MoD와 MoE 기법을 하나의 라우팅 단계에서 통합하여 구현합니다. 즉, 토큰을 라우팅할 때 한 번의 결정으로 계산 경로의 깊이와 처리할 전문가를 동시에 선택합니다. 이 방식은 구현이 더 단순하고 효율적일 수 있으며, 토큰마다 가장 적합한 계산 경로와 전문가를 동시에 결정할 수 있는 장점이 있습니다.

    MoDE의 장점

     * 계산 효율성: MoDE는 토큰마다 필요한 계산의 양과 처리할 전문가를 동적으로 결정함으로써, 모델의 전체적인 계산 비용을 효과적으로 관리합니다.
     * 성능 최적화: 각 토큰을 가장 적합한 계산 경로와 전문가에 할당함으로써, MoDE는 모델의 성능을 최대화합니다. 이는 특히 복잡한 문제를 해결하거나 다양한 종류의 데이터를 처리할 때 유용할 수 있습니다.
     * 유연성과 확장성: MoDE는 다양한 모델 구조와 태스크에 적용될 수 있는 유연성을 제공하며, 모델의 계산 효율성과 성능을 동시에 향상시킬 수 있는 확장 가능한 프레임워크를 제공합니다.

   MoDE는 트랜스포머 모델의 미래 발전 방향을 제시하며, 계산 비용을 최소화하면서도 모델의 성능을 극대화하는 방법을 탐색하는 연구에 중요한 기여를 합니다.

  더 읽어보기

   https://arxiv.org/abs/2404.02258


   이 글은 GPT 모델로 정리한 글을 바탕으로 한 것으로, 원문의 내용 또는 의도와 다르게 정리된 내용이 있을 수 있습니다. 관심있는 내용이시라면 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다.

   ⚠️광고⚠️: 파이토치 한국 사용자 모임이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=14349","OpenAI, 일본 지사 설립후 일본어 최적화 GPT-4 모델 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenAI, 일본 지사 설립후 일본어 최적화 GPT-4 모델 출시

     * 아시아 최초의 지사로 일본을 선택하고 OpenAI Japan을 설립
     * 일본어에 최적화된 GPT-4 커스텀 모델의 얼리 억세스를 로컬 회사들에게 제공 시작
          + 이 모델은 일본어 텍스트 번역 및 요약에서 향상된 성능을 제공하고 비용 효율적이며 GPT-4 Turbo 보다 최대 3배 빠르게 동작

   정말 부럽네요

   왜 아시아 최초 거점으로 일본을 선호하는가? 몇몇 분들 불만이 있지만, 현실을 보면 그럴 수밖에 없습니다.
     * 아시아 지역 중에 가장 안정적인 나라, 자연재해만 빼면이라고 하지만 일본의 재해대비시스템은 알아줘야. 한국은 슬프게도 휴전국가인 점부터가 마이너스 요소로 계속 고통받고 있음.
     * 아시아 지역 중 인터넷 공급업체 티어가 가장 높은 나라. 그렇게 인터넷 속도 자랑하던 한국은 2티어조차 없으나 일본은 1티어로 다이렉트로 미국과 직결된 회선이 존재 (일례로 한국에서 미국 접속하는 속도와 안정성보다 일본 경유해서 미국 접속하는 속도가 안정성이 월등히 높음)
     * 아시아에서 규제 측면에서 그나마 나은 나라. 왠만한 아시아 나라들은 내수에 맞춘 규제가 심한 편. 물론 일본도 남말할 처지는 아니지만 현지인만 잘 들이면 그때부터 꽃길 가능.

   구글도, MS도, OpenAI도 다 아시아 첫 거점은 일본이네요.

   한국어도 해줬으면 좋겠네요.
"
"https://news.hada.io/topic?id=14326","Redka - SQLite로 재구현한 Redis","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Redka - SQLite로 재구현한 Redis

     * Redka는 Redis의 장점을 SQLite로 재구현하면서 Redis API와 호환되도록 만드는 것을 목표로 함
     * 주요 특징:
          + 데이터는 RAM 크기에 맞출 필요 없음
          + ACID 트랜잭션 지원
          + SQL 뷰를 통한 데이터 조회 및 리포팅 기능 강화
          + In-process(Go API)와 Standalone(RESP) 서버 모두 지원
          + Redis 호환 명령어와 프로토콜 지원
     * 현재 개발 진행 중이며, 지원 현황과 로드맵은 아래 문서 참고

  지원 명령어

     * Redka는 Redis의 5가지 핵심 데이터 타입인 String, List, Set, Hash, Sorted Set을 지원하는 것이 목표
     * String, Hash, Key 관리, 트랜잭션 명령어는 이미 지원되며, List, Set, Sorted Set은 개발 중
     * 자세한 명령어 목록은 원문 참고

  설치 방법

    독립 실행 서버

     * Release 페이지에서 OS에 맞는 바이너리 파일 다운로드 후 실행
     * Docker를 사용할 경우 docker pull nalgeon/redka 로 이미지 다운로드

    Go 모듈

     * go get github.com/nalgeon/redka 로 모듈 설치
     * SQLite 드라이버로 github.com/mattn/go-sqlite3 나 modernc.org/sqlite 사용

  사용 방법

    독립 실행 서버

     * 다운로드 받은 바이너리 파일을 redka [-h host] [-p port] [db-path] 형태로 실행
          + 기본값은 host localhost, port 6379, DB 경로 없음(인메모리)
     * Docker 사용시 docker run 명령어로 실행. 자세한 옵션은 원문 참고
     * 서버 실행 후에는 redis-cli 나 redis-py, go-redis 같은 Redis 호환 클라이언트로 접속 가능

    In-process 서버

     * redka.Open() 함수로 DB 객체 생성. 드라이버 임포트 필수
     * redka.DB 객체의 메소드를 호출하여 각종 명령어 실행
     * View(읽기 전용)과 Update(쓰기 가능) 메소드로 트랜잭션 처리

  영속성

     * Redka는 SQLite 데이터베이스에 rkey, rstring, rhash 테이블을 사용하여 데이터 저장
     * 각 데이터 타입별 뷰(vstring, vhash 등)를 통해 SQL로 데이터 조회 가능

  성능

     * redis-benchmark 도구로 Redis와 Redka 성능 비교
          + Redka가 SET은 6배, GET은 2배 정도 느림
          + 그래도 초당 23K writes, 57K reads 수준의 성능을 보여줌
     * 컨테이너에서 실행할 경우 성능 저하가 있을 수 있음

  로드맵

     * 1.0 릴리즈에는 Redis 2.x 시절의 주요 기능 중심으로 구현 예정
          + String, Hash, Key 관리, 트랜잭션 지원 완료
          + Sorted Set 개발 중
          + List, Set 개발 예정
     * 향후 버전에서 Stream, HyperLogLog, Geo 같은 데이터 타입과 Pub/Sub 기능 추가 예정
     * Lua 스크립팅, 인증/ACL, 멀티 DB, Watch/Unwatch 등은 구현 계획 없음
     * 클러스터와 센티널 기능도 구현하지 않을 예정

GN⁺의 의견

     * Redis와 대부분 호환되면서 영속성을 제공하는 Redka의 접근 방식이 흥미롭습니다. ACID 트랜잭션을 지원한다는 것도 장점이 될 것 같네요.
     * 성능 면에서는 Redis에 미치지 못하지만, 영속성이 필요한 경우라면 충분히 고려해볼만한 대안이 될 것 같습니다.
     * 다만 아직 개발 초기 단계여서 안정성 면에서는 좀 더 지켜봐야할 것 같고, 로드맵에 빠진 기능들이 꽤 있는 점은 실제 도입시 고려해야 할 사항입니다.
     * In-memory 용도로는 결국 Redis를 이길 순 없겠지만, SQLite에 기반한 영속성 계층으로써는 유용하게 쓰일 수 있을 것 같습니다.
     * 요즘 엣지 컴퓨팅 환경에서 경량화된 스택에 대한 수요가 높아지고 있는데, 그런 분야에서 Redis 대신 Redka를 사용해볼 수 있겠네요.

   스케줄러에 redis가 붙어야할 때 쓰면 유용하겠네요 ㅎㅎ

        Hacker News 의견

     * Redis의 ""모든 것이 하나의 스레드에서 직렬화된"" 동시성 없는 모델을 어느 정도 따를지에 대한 고민이 있음
     * SQLite의 저수준 라이브러리를 사용하고, WAL을 활성화하며, 읽기용 goroutine마다 커넥션을 사용하고, 전용 writer 스레드로 버퍼링된 채널/큐를 통해 쓰기 배치를 보내면 SQLite에서 더 나은 성능을 얻을 수 있음
     * 이를 통해 SQLite의 내장 커넥션별 뮤텍스를 끄고도 각 커넥션이 한 번에 하나의 스레드에서만 사용되므로 스레드 안전성을 유지할 수 있음
     * 네트워크 요청/소켓에서 들어오는 파라미터 바이트를 버퍼에 복사하거나 SQLite에서 직접 소켓으로 복사하는 등 arena 스타일의 큰 버퍼를 사용하면 개별 문자열 할당 및 전달을 줄여 시간을 많이 절약할 수 있음
     * Go에서 SQLite로부터 최대 쓰기 처리량을 얻으려고 노력한 경험에서 나온 팁들임
     * Redis와 SQLite를 모두 좋아해서 두 가지를 결합하기로 결정함. SQLite는 많은 작은 쿼리에 특화되어 있어 관계형 엔진이 Redis에 가까워질 수 있는 만큼 가까워졌기에 잘 맞을 것 같음
     * TigerBeetle의 상태 머신을 교체하여 Redis API를 구현할 누군가를 기다리고 있음
     * 데이터 세트가 메모리에 맞는지 여부에 대해 생각할 필요가 없는 Redis 대안이 있으면 좋겠음
     * Redis의 전체 가치 제안은 메모리에서 작동하여 메모리와 같은 성능을 제공한다는 것임. 디스크로 이동하면 Redis를 사용할 이유가 거의 없음
     * 네트워크 I/O가 추가되면 Redis의 환상적인 성능 중 많은 부분이 사라짐. SaaS 호스팅 Redis 서비스를 사용하면 성능이 큰 타격을 받음. 자체 클러스터에서 Redis 호환 키/값 스토어를 더 쉽게 실행할 수 있다면 이는 이점임
     * 이것 또는 Garnet이 Redis 명령을 더 많이 지원하는지 궁금함. 로컬 디버깅 목적으로 프로그램에 Redis 호환 기능의 하위 집합을 내장하려고 하는데, 중간에 API가 있어 지원되지 않는 Redis 명령에 대해 보호할 수 있음
     * Foursquare가 MongoDB를 유명하게 만들었을 때 누군가 MySQL에 구현된 NoSQL DB의 PoC를 게시했지만 유행하지는 않았음. 하지만 DB가 필요할 때마다 SQL을 다시 발명하지 않도록 하기 위해 얼마나 많은 성능을 희생했는지 생각하게 만듦. 이와 같은 실험을 좋아하며 때로는 새로운 프로젝트로 이어짐
     * Redis를 DB 앞에 캐시 레이어로 사용함. 이 개념을 이해하지 못함
     * 그런데 SetMaxConnections(1)을 사용하고 있지만, WAL 모드(사용 중임)에서 SQLite는 읽기를 차단하지 않는 쓰기를 지원하므로 읽기 동시성을 허용하면 이점이 있을 수 있음
"
"https://news.hada.io/topic?id=14258","트위터의 x.com으로의 전환, 피싱 사기꾼들에게는 선물","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    트위터의 x.com으로의 전환, 피싱 사기꾼들에게는 선물

     * Twitter/X의 링크 수정 기능의 부작용:
          + 4월 9일부터 Twitter/X는 ""twitter.com""을 언급하는 링크를 자동으로 ""x.com""으로 수정하기 시작함
          + 하지만 최근 48시간 동안 수십 개의 새로운 도메인 이름이 등록되었는데, 이를 통해 이 변경 사항이 어떻게 사용될 수 있는지 보여줌
          + 예를 들어 fedetwitter[.]com은 최근까지 트윗에서 fedex.com으로 표시됨
     * 새로 등록된 도메인들의 예시:
          + carfatwitter.com: Twitter/X에서 carfax.com으로 표시됨
          + goodrtwitter.com (goodrx.com), neobutwitter.com (neobux.com), roblotwitter.com (roblox.com), square-enitwitter.com (square-enix.com), yandetwitter.com (yandex.com) 등
          + 이들 도메인에 접속하면 ""Are you serious, X Corp?""라는 메시지가 표시됨
          + 이는 Mastodon의 한 사용자가 사기꾼들이 구매하는 것을 막기 위해 ""방어적으로"" 등록한 것으로 보임
     * 일본 사용자들에 의한 방어적 도메인 등록:
          + netflitwitter.com (netflix.com)은 ""악의적인 목적으로 사용되는 것을 방지하기 위해 취득했다""는 메시지와 함께 Twitter/X 사용자 이름을 표시함
          + space-twitter.com은 ""amplest0e""라는 사용자가 등록한 것으로 보이며, Twitter/X 사용자에게는 CEO의 ""space-x.com""으로 표시됨
          + ametwitter.com은 이미 실제 americanexpress.com으로 리디렉션됨
     * 잠재적인 피싱 위험:
          + 일부 새로 등록된 도메인은 현재 연결되지 않고 등록 기록에 유용한 연락처 정보가 포함되어 있지 않음
          + 예를 들어 firefotwitter[.]com (firefox.com), ngintwitter[.]com (nginx.com), webetwitter[.]com (webex.com) 등
          + setwitter.com (sex.com으로 표시됨)은 최근 변경 사항과 그 잠재적 피싱 사용에 대해 경고하는 블로그 게시물로 리디렉션됨
     * 전문가 의견:
          + DomainTools의 Sean McNee 부사장은 Twitter/X가 리디렉션 노력을 제대로 제한하지 않은 것으로 보인다고 말함
          + 악의적 행위자들이 이 기회를 이용해 합법적인 사이트나 브랜드에서 트래픽을 우회시킬 수 있다고 지적함
          + Rolex나 Linux 같은 다른 글로벌 인기 브랜드들도 등록된 도메인 목록에 있었던 점이 주목할 만함
     * 사용자들의 반응:
          + 이 명백한 실수는 새로운 CEO가 인수한 이후 다른 소셜 미디어 플랫폼으로 이주한 많은 이전 사용자들에게 즐거움과 놀라움을 안겨줌
          + UC Berkeley 정보대학원의 Matthew Garrett 교수는 이를 ""내가 상상할 수 있는 가장 재미있는 일은 아니지만 거기에 근접한다""고 요약함

GN⁺의 의견

     * 이번 사건은 도메인 등록과 보안에 대해 신중하게 고려해야 함을 보여주는 사례임. Twitter/X의 변경이 의도치 않게 악용될 가능성을 보여줌
     * 각 기업은 자사 브랜드나 서비스와 유사한 도메인을 사전에 확보하여 악의적인 도용을 방지할 필요가 있음. 일부 사용자들이 이를 선제적으로 한 것은 바람직한 행동
     * 다만 방어적 도메인 확보가 일반 사용자가 하기엔 쉽지 않을 수 있음. 기업 차원의 대응이 필요해 보임
     * Twitter/X는 이번 실수에 대한 기술적 보완 방안을 마련해야 할 것임. 특정 도메인 패턴에 대한 과도한 일반화가 문제의 원인이 된 듯 함
     * 소셜 미디어 기업들은 사용자 편의성 개선을 위한 변경 시에 보안적 리스크도 함께 고려해야 함. 충분한 검토와 테스트 없는 성급한 변경은 득보다 실이 클 수 있음

   트위터는 이미 트위터를 쓰는 사람과 엑스를 쓰는 엘론 머스크 추종자로 나눠져 있다는 말도 도는 정도라. 리브랜딩은 완벽히 실패라 생각합니다.

   REPLACE(content, 'twitter.com', 'x.com')....

   놀랍네요. 정말....

   하.. 트위터 관련 이슈는 정말 이렇게 멍청할 수 있나 싶은..

        Hacker News 의견

     * Twitter의 재브랜딩 과정에서 QA와 테스트 과정이 생략된 것에 대한 어이없음
          + 기존 브랜드가 좋았고 재브랜딩의 비즈니스적 목적이 불분명함
          + 기존 사용자들은 계속 Twitter로 인식할 것이라는 점
          + 소프트웨어에서 단순히 ""흔적을 남기려는"" PM의 행동과 유사함
     * 재브랜딩 아이디어 자체가 웃기며, 1984년 방식의 접근이라는 의견
     * 정규표현식을 다뤄본 적이 있다면 초보자가 저지르기 어려운 실수라는 지적
     * 이런 민감한 UX 변경사항이 인턴의 아이디어에서 프로덕션까지 가는 과정에 의문을 제기
          + 책임자가 위험성을 인지하고 감사와 승인 절차를 거쳐야 한다는 의견
     * 블루 버드와 ""tweet"" 동사의 소멸에 대한 아쉬움
     * 일론 머스크 인수 후 트위터 계정을 닫은 경험담
          + 정신건강에 도움이 되었고 트위터가 그리 그립지 않았음
          + 계정 폐쇄를 고민 중이라면 이번 기회에 과감히 시도해 볼 것을 추천
     * 누군가의 잘못된 정규표현식이 비즈니스 모델이 될 수 있다는 점이 놀랍다는 반응
     * carfatwitter.com을 트위터에 포스팅 했는데 carfax.com으로 리디렉션 되지 않았다는 실험 결과 공유
          + 기사에서 ametwitter.com이 americanexpress.com으로 리디렉션 된다고 했으나 실제로는 그렇지 않음
"
"https://news.hada.io/topic?id=14280","미국, PFAS 물질에 대한 사상 첫 전국 단위 식수 기준 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  미국, PFAS 물질에 대한 사상 첫 전국 단위 식수 기준 도입

     * EPA, 영구화학물질인 PFAS의 음용수 제한 기준을 처음으로 설정함. 관련 내용은 아래와 같음.
          + 두 가지 일반적인 PFAS(PFOA, PFOS)는 4ppt(parts per trillion)으로 엄격히 제한
          + GenEx Chemicals 등 세 가지 다른 유형은 10ppt로 제한
          + 수도 공급업체는 이러한 PFAS 화학물질을 검사하고, 수준이 너무 높으면 대중에게 알려야 함
          + PFAS 유형의 조합도 제한될 예정
          + 6~10%의 수도 시스템이 새로운 제한을 초과할 것으로 예상됨
     * 수도 공급업체의 대응
          + 검사를 위해 일반적으로 3년이 주어짐
          + 검사 결과가 제한을 초과하면 처리 시스템을 설치하는 데 2년이 더 주어짐
          + 일부 기금이 제공되지만, 더 많은 자금이 필요할 것으로 보임
          + 일부 지역사회에서는 검사 결과가 놀라움. 펜실베이니아주의 한 소도시는 235ppt의 높은 PFOA 수준이 검출되어 우물을 폐쇄함
          + 수도 업계 그룹은 EPA의 규칙에 큰 문제가 있다고 주장하며, 비용 과소평가, 고객 수도요금 인상 등을 우려함
     * PFAS 관련 동향
          + EPA의 PFAS에 대한 건강 지침은 최근 몇 년간 크게 변화했으며, 이제는 안전한 양이 없다고 말함
          + 미네소타에서는 Amara's Law가 불가피한 PFAS 사용을 중단하려 하고 있음
          + Amara Strande는 PFAS 오염으로 인한 희귀암으로 사망했으며, 가족들은 PFAS 제한을 위해 활동 중

GN⁺의 의견

     * PFAS는 환경에서 분해되지 않고 건강에 악영향을 미치므로 규제가 필요한 물질임. 하지만 수도 공급업체 입장에서는 갑작스러운 규제 강화로 인한 부담이 클 수밖에 없어 보임. 정부 차원의 재정적, 기술적 지원이 뒷받침되어야 할 것으로 보임.
     * PFAS에 대한 과학적 연구와 함께 대체물질 개발도 시급해 보임. 현재 PFAS는 방수, 발수, 오염방지 등 다양한 용도로 사용되고 있어 대체가 쉽지 않은 상황임.
     * 국내에서도 PFAS 문제가 대두되고 있는 만큼, 관련 현황을 파악하고 관리 기준을 마련할 필요가 있어 보임. 선제적 대응이 요구되는 시점임.
     * 소비자 입장에서도 PFAS가 함유된 제품 구매를 자제하고 정부와 기업의 노력에 관심을 가질 필요가 있음. 식수 외에도 생활용품, 의류, 포장재 등 생활 전반에 PFAS가 광범위하게 존재하기 때문임.
"
"https://news.hada.io/topic?id=14333","First Round Capital의 Product-Market-Fit 찾기 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            First Round Capital의 Product-Market-Fit 찾기 프레임워크

PMF Method - 제품-시장 적합성(PMF) 달성을 위한 전략

     * First Round Capital이 유명 창업자들과 협력하여 그들이 처음 6개월 동안 한 일을 정제해서 ""PMF로 가는 지름길""을 정리
     * 이를 위한 첫번째 세션인 ""PMF의 4단계""를 오픈소스로 공개했고, 전체는 ""PMF Method""라는 무료 14주 과정으로 만들어서 5/15까지 지원 받는 중
     * 대부분의 사람들은 PMF찾기를 과학이 아닌 예술로 설명하지만, 세일즈 주도 B2B 스타트업의 경우 PMF 달성 가능성을 높이는 방법을 역설계 가능함

  PMF의 중요성과 애매모호함

     * PMF 달성은 모든 회사가 이뤄야 할 가장 중요한 목표임에도 불구하고, 창업자들에게는 여전히 블랙박스로 남아있음
     * 운, 시장 타이밍, 불굴의 의지 등 신비로운 조합이 필요한 것처럼 보임
     * 이 주제에 대해 많은 글이 쓰였지만, PMF 달성 가능성을 높일 수 있는 투입요소, 선행 지표, 전술적 단계 등을 분석한 사람은 없었음
     * 우리가 보기에 이 주제가 성공적으로 ""프레임워크화""되지 못한 주요 이유 중 하나는 대부분의 사람들이 여전히 이 개념을 일반적인 용어로 이야기한다는 것임

  리소스의 한계

     * 대부분의 리소스는 광범위한 창업자들을 대상으로 하기 때문에 실용적이기보다는 모호한 조언으로 귀결됨
     * 창업자들은 ""우리는 그냥 바이럴되기 시작했다""와 같은 도움이 되지 않는 창업 스토리부터 자신의 특정 비즈니스의 뉘앙스를 다루지 않는 만능 프레임워크에 이르기까지 재현 가능하지도 실용적이지도 않은 접근 방식을 갖게 됨
     * 소비자 앱 등의 경우 PMF 탐색이 운에 의존하는 경향이 있지만, 우리의 경험상 세일즈 주도 B2B 회사의 경우 운의 역할을 줄일 수 있음

  Product-Market Fit Method 공개

     * B2B 창업자들이 제품-시장 적합성(PMF)을 찾을 확률을 높이는 데 도움이 되는 정보를 체계적으로 제공하는 사람은 없어 보였고, 우리는 이를 바꾸고 싶었음
     * 수십 년 경험에서 얻은 교훈을 정리, 수백 시간의 연구, 수십 명의 창업자 인터뷰를 진행함
     * 프리시드 창업자들이 훌륭한 B2B SaaS 기업을 만들 수 있도록 돕기 위해 설계된 14주 집중 과정인 Product-Market Fit Method를 공개
     * 8개의 전술 세션으로 구성되어 있으며, 제품 인사이트와 시장 검증부터 포지셔닝, 설계 파트너, 제품 반복에 이르는 접근 방식, ""달러 기반 발견""과 창업자 주도 판매의 노하우 학습에 이르기까지 모든 것을 다룰 예정
     * First Round의 전통에 따라 첫 번째 세션의 내용을 미리보기로 전체 공개하기로 결정

[PMF의 레벨]

  Extreme Product-Market Fit 소개

     * 제품-시장 적합성(PMF)이란 무엇인가? 창업자들이 목표로 해야 할 것에 대한 우리의 구체적인 정의는 다음과 같음:

     Extreme PMF는 중요한 니즈를 충족시키고 각 고객에게 반복적이고 효율적으로 전달될 수 있는 제품에 대한 광범위한 수요 상태임
     * 우리가 언급했듯이, 대부분의 사람들이 PMF에 대해 이야기한 방식은 불충분해 보임
     * 더 구체적으로, 우리가 느끼기에 아직 적절히 다뤄지지 않은 특정한 뉘앙스들이 있음:

    PMF는 레벨로 진행됨

     * PMF는 이진 상태가 아님. 당신이 그것을 가지고 황금이 되거나, 그렇지 않으면 길에 있지 않은 것이 아님
     * 그러나 또한 막연한 스펙트럼이나 애매한 슬라이딩 스케일도 아니어서 현재 위치를 확신할 수 없음

    각 레벨에서 의도적인 트레이드오프가 필요한 서로 긴장 관계에 있는 PMF의 몇 가지 차원이 있음

     * 다른 무엇보다 강조해야 할 단 하나의 요소는 없음
     * 중요한 것은 회사 수명주기에서 창업자가 하나를 다른 것보다 의도적으로 우선시해야 하는 다른 시기가 있다는 것

    반복 가능성에 대한 강조가 거의 없음

     * PMF의 다양한 레벨을 거쳐 올라갈수록 실제로 수요 창출, 제품 개발, 고객 만족도, 단위 경제학 전반에 걸쳐 반복 가능성을 확보하는 것
     * 스타트업은 적합한 고객이 누구인지, 어떻게 유치할 것인지, 각 고객 맞춤형은 아니지만 중요한 니즈를 꾸준히 해결하는 제품을 어떻게 제공할 것인지에 대한 세밀한 이해를 개발할 때까지 PMF의 상위 레벨에 도달하지 못함
     * 간단히 말해서, 우리가 ""한계 고객""(marginal customer)이라고 부르는 것을 찾기 위해 그렇게 열심히 노력할 필요가 없음 (아래 섹션에서 더 자세히 다룰 예정)
     * 반복 가능성은 제품-시장 적합성을 찾는 데 있어 성배와 같음
          + 패턴이 없다면 초기 모멘텀을 만들고 앞으로의 진로를 계획하는 것은 거의 불가능함

PMF의 구성요소

     * 4가지 레벨 : 초기(Nascent), 발전(Developing), 강력(Strong), 극단적(Extreme) 제품-시장 적합성
     * 3가지 차원 : 만족도(Satisfaction), 수요(Demand), 효율성(Efficiency)
     * 레버 : 한계 고객(marginal customer)을 찾고, 이기고, 서비스하고, 유지하는 일을 더 쉽게 만들기 위해 페르소나(Personal), 문제(Problem), 약속(Promise) 또는 제품(Product)을 변경함
     * 이러한 접근 방식의 일부가 여기저기 다른 프레임워크에 존재할 수 있음
     * 우리의 희망은 여러 가지를 한데 모아 독특하고 가치 있는 방식으로 세부 사항을 더 깊이 파고드는 것

  PMF 레벨 진행 패턴

     * 가끔씩 회사가 빠르게 레벨을 올라가기도 하지만, 그것은 예외적인 경향이 있음
     * 어떤 회사는 더 긴 기간 동안 진행 단계를 거치는 반면, 다른 회사는 초기에서 강력한 단계로 뛰어넘는 등 다른 순간에 앞서 나감
     * 우리의 경험상, 회사가 빠지는 몇 가지 특정한 타이밍 패턴이 있음. 1-3 레벨을 빠르게 통과하지만 멈춰서 4 레벨에 도달하지 못하거나, 최단 시간에 1 레벨에 도달하지만 2 레벨에 갇히는 경우 등

  PMF 여정은 양방향 사다리

     * PMF로의 여정은 양방향 사다리라는 점도 유의해야 함. 즉, 레벨이 영구적으로 잠기지 않으며 퇴보할 수 있음
     * 또 다른 비유를 사용하자면, 그것을 역동적인 평형 상태로 생각하는 것이 더 나음
     * 당신의 행동, 경쟁자의 행동, 고객 기대치, 기술 변화 및 기타 요소는 모두 잠정적인 평형 상태에 있음
     * 만약 경쟁자가 큰 도약을 하는 등 그러한 요소 중 하나라도 변경되고 당신이 조정하지 않는다면, 더 이상 같은 수준의 PMF에 있지 않을 수 있음

  한계 고객을 찾고 서비스하는 것이 얼마나 어려운가?

     * 현재 회사가 어디에 있는지 확신이 서지 않는다면 던질 수 있는 하나의 높은 수준의 질문이 있음
     * 당신은 얼마나 어렵게 다음 ""한계"" 고객을 찾고 서비스하는가?
     * 레벨이 올라갈수록 그것은 점점 더 쉬워지고 반복 가능해짐
     * 예를 들어 3, 4 레벨에서는 수요가 급증함. 반면에 1, 2 레벨에서는 한계 고객을 찾는 것이 여러 전선에서의 전투처럼 느껴짐
          + 적절한 사람을 찾고, 당신의 솔루션이 그들에게 필요한 것이라고 설득하고, 전환하고, 만족한 고객으로 만드는 것 등

제품-시장 적합성의 3가지 차원

     * 만족도(Satisfaction) :
          + 고객들이 제품에 얼마나 만족하는가?
          + 고객을 효과적으로 유지할 수 있는가?
          + 사람들이 제품을 얼마나 필요로 하는가?
          + 사소한 차이로 보일 수 있지만, 우리는 여기서 의도적으로 ""사랑""이 아닌 ""필요""라는 단어를 사용했음을 주목해야 함
          + 고객의 사랑 없이도 극단적인 PMF를 가진 많은 회사들이 있음 (Salesforce는 아마도 사랑받지는 않지만 분명히 중요한 고객 니즈를 충족시키는 제품의 예임)
     * 수요(Demand) :
          + 소위 ""문 밖으로 줄을 서는"" 현상이 있는가?
          + 얼마나 빨리, 얼마나 많이 제품을 팔 수 있는가?
     * 효율성(Efficiency) :
          + 제품이 반복적으로 성장하고 효과적으로 확장될 수 있는가?
          + 우리가 보기에 이는 많은 PMF 정의가 간과하는 중요한 부분임 - 비록 그것이 회사가 반드시 달성해야 하는 가장 중요한 것 중 하나임에도 불구하고
          + 우리가 이를 세분화하는 방법은 다음과 같음:
               o 고객을 찾는 효율성(CAC)
               o 고객에게 판매하고 계약을 완료하는 효율성(판매 전환, 매직 넘버, CAC 페이백)
               o 고객을 활성화하고 지원하는 효율성(통합 주기 길이, NRR)
               o 제품을 생산하는 효율성(COGS, 매출 총이익)
               o 회사 전체의 효율성(번 멀티플)
     * 어떤 이들은 마지막 항목에 반발할 수 있음
          + 대부분의 다른 PMF 정의는 만족도와 수요에 공공연히 초점을 맞추고, 효율성은 장기적으로 저절로 해결될 것이라고 암시함
          + 그러나 우리의 믿음은 사업이 첫날부터 효율적이지는 않겠지만 - 1단계에서 일을 파악하는 동안 의도적으로 비효율적일 수도 있지만 - 창업자로서의 전체 여정 동안 효율성을 염두에 두고 구축하는 것에는 엄청난 가치가 있다는 것임
     * 당신이 길가에 노점을 열어 줄을 서서 1달러를 주는 사람은 누구나 100달러를 돌려받는다고 가정해 보면
          + 고전적 정의에 따르면 제품-시장 적합성은 차트를 벗어날 것임. 문 밖에 줄이 서고, 고객은 매우 만족할 것
          + 그러나 그것은 신기루. 특히 위험한 신기루인데, 당신이 PMF를 열었다는 거짓된 믿음에 빠질 위험이 있기 때문임
     *

     ""마라톤을 시작할 때는 1마일에 대한 접근 방식을 바꾸지 않더라도 마지막 1마일이 어떤 모습이어야 하는지 아는 것이 도움이 됩니다. 초기 단계부터 효율성을 염두에 둔다면 구축 과정에서 의도적인 타협을 할 수 있습니다.""
     * 마지막으로 한 가지 주의할 점:
          + 이러한 차원은 실제로 서로 밀접하게 연관되어 있으며 시나리오에 따라 뚜렷한 절충점을 찾아야 함
          + 예를 들어, 효율성을 높이기 위해 확장 불가능한 작업에 소요되는 시간을 줄이고, 비즈니스의 더 많은 측면을 자동화하고 운영하는 등 여러 가지 이니셔티브를 수행할 수 있지만, 많은 경우 고객 경험에 해를 끼치고 만족도를 떨어뜨릴 수 있음
          + 물론 불화보다 조화가 더 많은 경우도 있음(예: 중요한 제품 기능을 출시하면 세 가지가 한꺼번에 개선 가능)

  First Round의 4P : PMF로 가는 길에서 구출되기 위한 레버들

     * 다음 단계로 도약하고 구출되기 위해 당신이 할 수 있는 일은 여정에서 다양한 지점에서 이 4가지 레버를 당겨보는 것(고전적인 4P 프레임워크에 대한 우리의 견해 정리):
     * 페르소나(The persona) :
          + 누가 당신의 통찰력에서 가장 큰 이익을 얻을 수 있는가?
          + 특정 유형의 역할이나 기능을 가진 사람이 일련의 도전에 직면하고 있는가?
          + 이 맥락에서 페르소나는 구매자(CTO 또는 CRO), 회사 유형(예: Fortune 10,000 금융 서비스) 또는 둘 다일 수 있음
          + 여기서 조정을 고려할 때, 너무 좁은지, 너무 광범위한지, 아니면 완전히 포기해야 하는지 고려할 것
          + Plaid의 예: 소비자는 또 다른 예산 앱이 필요하지 않았지만, 핀테크 앱은 팀이 백엔드에 구축한 통합이 필요했음
     * 문제(The problem) :
          + 이것이 당신의 목표 페르소나가 가진 긴급하고 중요한 문제인가?
          + 이는 고전적인 진통제 대 비타민 질문임
          + 당신은 긴급하고 해결되면 잠재 고객에게 큰 안도감을 줄 수 있는 문제를 해결하려고 함
          + 그렇지 않다면, 페르소나에 대한 인접 문제를 탐색하거나 페르소나와 문제를 완전히 재고해야 할 수 있음
          + Lattice의 예: 사람 리더에 초점을 맞추었지만 OKR을 위한 솔루션 구축에서 성과 관리 해결로 전환함
     * 약속(The promise) :
          + 그 고객들이 당신이 그 필요를 해결하기 위해 할 일, 즉 당신만의 독특한 가치 제안에 관심이 있는가?
          + 이를 실제 제품과 혼동하기 쉬우나, 약속은 제품이 제공할 이점을 어떻게 전달하는지에 대한 것임
          + 우리의 경험으로는 이것이 가장 간과되는 레버임
          + Ironclad의 예: 기존 카테고리에서 경쟁하기 위해 AI 법률 어시스턴트(변호사 업무 자동화 약속)에서 계약 라이프사이클 관리 플랫폼(기업이 법적 계약을 엔드투엔드로 생성 및 관리하도록 지원하겠다고 약속)으로 재포지셔닝함
     * 제품(The product) :
          + 당신이 구축하는 제품이 실제로 이 약속을 이행할 것인가?
          + 고객들은 그들의 문제에 대한 이 특정 솔루션에 관심이 있는가?
          + 그들은 그것에 대해 돈을 지불할 것인가?
          + Alma의 예: 팬데믹 동안 치료사를 위한 커뮤니티 기반 물리적 사무실 개념에서 공급자에게 번성하는 개인 진료를 구축하기 위한 디지털 도구 제품군을 제공하는 것으로 피벗함
     * 예를 들어, 한 스타트업은 발전하는 PMF에 갇혀 있을 수 있지만, 나중에 새로운 구매자로 피벗하는 것이 다음 단계의 열쇠라는 것을 발견할 수 있음
     * 또는 다른 회사는 적절한 포지셔닝으로 초기 PMF에 걸려 넘어졌을 수 있지만, 약속을 이행하는 올바른 제품을 출시할 수 없었을 수 있음
     * 물론 이러한 레버는 PMF를 찾는 방법에 더 가까우며, 이 글의 초점은 아님

  실제 세계에서의 Extreme Product-Market Fit의 모습:

     * Looker가 Series C 회사로서 235명의 팀과 함께 2016년 말 레벨 4 이정표에 도달했을 때를 살펴보면 (1-3 레벨을 진행하는 데 5년의 노력이 필요했음)
     * 차트를 살펴 보면 어떤 시기에 곡선이 변곡점을 시작하는 지 알 수 있음
          + 수요: 1년 만에 고객 수가 450명에서 거의 800명으로 증가하고, 매출은 1,150만 달러에서 2,700만 달러로 늘어나고, ACV는 57,700달러로 증가함
          + 만족도: 141% NRR, 18개월 연속 순 부정 이탈 및 계획보다 높은 갱신율을 보이는 매우 행복한 고객
          + 효율성: 77.6%의 매출 총이익률로 효율적인 모델을 구축함
     * Looker의 경로는 각 차원이 함께 작용하여 극단적인 제품-시장 적합성에 기여하는 훌륭한 예임
     * 우리의 경험상 이러한 차원 중 하나 이상의 부재는 스타트업 실패의 가장 큰 이유이기도 함

[Level 1: Nascent (초기 단계)]

  이 단계에서의 주요 과제

     * 창업자의 주요 임무는 3~5명의 고객을 위해 해결할 만한 가치가 있는 문제를 찾는 것
     * 여기서 말하는 문제란 고객에게 긴급하고 중요한 이슈로, 이를 해결하는 것이 그들의 비즈니스에 매우 가치 있는 것을 의미함
     * 문제를 찾았다면 이를 해결하고 고객에게 높은 만족도를 제공하는 제품을 만들 차례
     * 올바른 조합을 찾기 위해 4P(페르소나, 문제, 약속, 제품)를 몇 번 반복해야 할 수도 있음

  수요와 효율성에 대한 고려

     * Level 1의 주요 초점은 아니지만, 해당 문제를 가진 충분한 수의 고객을 찾을 수 있을지 탐색하며 수요에 대해서도 생각해 봐야 함
     * 효율성에 많은 시간을 할애할 단계는 아니지만, 사업이 궁극적으로 효율적으로 확장될 수 있는 방법에 대해 타당한 주장을 구성하기 시작하는 것이 좋음

  Level 1에 갇히는 스타트업들

     * 상당수의 스타트업이 Level 1에 갇혀 6개월, 12개월, 심지어 18개월 동안 정체되는 경우가 많음
     * 이 때 창업자들은 ""고된 노력""에 빠지게 됨
     * 이 단계의 특징은 반복 가능성이 부족하다는 것. Level 1에서는 그럴 수밖에 없음
     * 한계 고객(marginal customer)을 찾는 것은 결코 쉽지 않음
     * 당신이 만드는 것에 적합한 고객이 어떤 모습이어야 하는지 완전히 명확하지 않은 상태
     * 대략적인 가설을 세워도 고객 획득은 보통 확장 불가능함
     * 고객을 만나도 메시지가 늘 통하는 것은 아님. 어떤 고객은 바로 ""이해""하지만 다른 이들에게는 와닿지 않음
     * 각 고객의 니즈(그리고 당신이 만드는 솔루션)는 조금씩 다름. 어떤 이들은 자신들의 요구 사항을 충족하기 위해 추가 기능을 요청하고, 어떤 이들은 초기 버전으로도 즉각적인 효과를 봄

  Level 1 단계에서의 경험담

     * 초기 단계를 헤쳐나간 B2B 창업자들과 대화를 나눠보면 다양한 경로가 있었음
     * 어떤 이는 적합한 제품을 찾는 데 어려움을 겪었고, 어떤 이는 목표 사용자 식별에 애를 먹었으며, 또 어떤 이는 시장 규모에 의문을 품거나 심지어 원래 아이디어를 완전히 포기하기도 함
     * 공통점은 처음 몇 개의 돌파구를 발견하기 전까지 헛수고를 반복했다는 것
     * 이 때의 돌파구는 하드한 지표나 하키스틱 성장 곡선의 시작이라기보다는 ""아하 모먼트"" 혹은 ""이게 통할지도 몰라""라는 직감에 가까웠음
     * Ironclad, Verkada, Plaid의 사례를 통해 이러한 초기 단계의 느낌을 살펴보면

  Ironclad: 고객 방문을 통해 제품 초점 맞추기

     * Ironclad는 현재 잘 알려진 디지털 계약 플랫폼(기업가치 $3.2B)이지만, 초기 PMF에 이르는 과정을 들여다보면 이 단계에서 얼마나 많은 수작업과 비확장성 작업이 필요한지 알 수 있음
     * 공동창업자 Jason Boehmig은 스타트업 고문 변호사로 일하면서 자신의 업무 일부를 자동화하는 것을 시작함
     * 변호사를 위한 새로운 솔루션과 그들이 실제로 소프트웨어 제품을 사용하는 방식을 이해하는 팀이 부족하다는 것을 깨닫고 로펌을 떠나기로 결심
     * ""우리가 AI 어시스턴트 붐을 겪고 있는 지금 이 시기를 되돌아보면 놀랍습니다. Ironclad의 첫 번째 버전은 법률 문서 작업을 위한 자동화된 어시스턴트였는데, 사실은 제가 이메일 주소 뒤에 있었죠.""
          + ""우리는 기업 제출부터 NDA, 그 사이의 모든 것을 하는 것으로 시작했어요. NDA를 한다면 admin@ironclad.ai에 CC를 넣고 'Joe Smith와 NDA를 하고 있는데 도와줄 수 있나요?'라고 묻는 거죠. 그러면 저는 Ironclad AI로서 '다음 정보가 필요합니다' 또는 '템플릿이 여기 있습니다. 채워넣었습니다.'와 같은 일련의 답변을 보냈어요.""
          + 그러나 초기 고객과 직접 시간을 보내며 제품의 초점을 좁히는 데 도움이 되었음
     * ""당시 전체 직원이 4~5명이었는데 모두 Boulder(콜로라도주의 도시)로 날아가 우리에게 많은 제품 피드백을 준 고객을 만난 적이 있어요. 우리는 그냥 앉아서 그들이 제품을 사용하는 것을 지켜봤죠.""
          + ""그들은 모니터를 두 개 사용했는데, 하나는 이메일을 보여주고 다른 하나는 Ironclad였어요. 법무팀에서 일하며 그냥 일상적인 루틴을 하고 있었죠. 그들을 관찰하고 이러한 루틴적이고 반복적인 거래가 그들의 직업에 얼마나 중요한지 보면서, 우리는 이 기업 법무팀, 특히 2015년 당시 막 정의되기 시작한 역할인 법률 운영에 전력을 다해야 한다는 것을 깨달았습니다.""

  Verkada: 고객을 감동시키기 위해 비합리적으로 깊이 파고들고 빠르게 움직이기

     * Verkada는 현재 6개의 물리적 보안 제품 라인을 보유하고 있지만, 2016년 영상 보안으로 시작했음
     * 공동창업자 Filip Kaliszan이 PMF 달성 여정의 초기 단계를 돌이켜 보면, 팀의 속도와 현장에 뛰어들고자 하는 의지가 두드러짐
     * ""최초 버전은 매우 우스꽝스러웠어요. Raspberry Pi 기반 카메라였죠. 그냥 여러 부품을 짜깁기해서 만들었는데, 공급망은 Amazon이었어요. 이런 작은 카메라 100대 정도를 만들어서 아는 친구들과 사업체에 나눠줬죠.""
     * ""전체적인 아이디어는 소프트웨어를 구축하고 솔루션을 만드는 데 무엇이 필요한지 배우는 것이었어요. 프로토타입은 기술이 작동할지, 거기에 무언가 있다는 걸 스스로 납득시키는 것에 관한 거였죠.""
     * Verkada의 접근 방식에서 주목할 점은 얼마나 직접 뛰어들었는지, 그리고 얼마나 빠르게 통찰을 이끌어냈는지임
          + ""최초 몇 명의 고객을 위해 우리는 고객을 가능한 한 빨리 배치하기 위해 필요한 모든 것을 했고, 그 고객과 밀접하게 지내며 무엇이 잘 되고 있고 무엇이 그렇지 않은지 배웠어요. 이런 접근 방식이 우리가 제품에 구축하는 모든 것을 형성하는 데 매우 도움이 되었죠.""
          + ""우리는 시험 제품 발송에 매우 공격적이었어요. 고객에게서 긍정적인 신호를 받는 순간, 우리는 그들에게 카메라를 보냈죠. 처음부터 과정이 매끄럽고 빠르고 쉽도록 했어요. 오늘 우리에게 연락하면 24시간 후에는 시도해 볼 수 있는 멋진 키트 상자를 받게 될 거예요.""
     * 그런 헌신이 보상을 받았음
          + ""우리는 2년 동안 제품을 만들었고, 2018년이 우리의 첫 판매 해였어요. 그 해 첫 몇 달 동안, 우리는 카메라 쪽에서 충분한 수요와 관심을 얻었고, 그것이 바로 검증의 '아하' 순간이었죠.""
          + ""우리는 항상 그 아이디어가 멋지다고 생각했지만, 그 순간 우리가 만든 것이 고객에게 통하기 시작했다는 것이 정말 분명해졌어요.""

  Plaid: 검증되지 않은 시장에서 피벗하고 확신 구축하기

     * 초기 고객 반응이 있더라도 여전히 고된 노력처럼 느껴질 수 있음
     * Plaid는 핀테크 인프라의 선구자로 알려져 있지만, 사실 소비자 예산 관리 앱으로 시작했음
     * ""소비자들의 반응은 우리가 예산 관리 앱을 만드는 데 그다지 능숙하지 않을 거라는 걸 꽤 빨리 깨닫게 해줬어요. 우리는 한동안 시도했죠. 6가지 다른 버전의 예산 관리, 지출 유형 분석 애플리케이션을 만들었는데 별로 호응을 얻지 못했어요.""
     * ""어느 날 Venmo의 초기 엔지니어 중 한 명인 친구가 와서 이렇게 말했어요. '너희 소비자 제품은 별로 좋지 않은데, 앱에 데이터를 가져오기 위해 은행과 통합한 방식, 즉 만들어 놓은 백엔드를 라이선스 하고 싶어.' 시간이 좀 걸렸지만 결국 우리는 이 피벗을 결정했고 플랫폼 구축으로 전환했죠.""
     * ""그 후 우리가 제품을 만든다면 아마 사용할 것 같다고 말한 사람이 5~7명 있었어요. 심지어 한 명은 우리가 만들면 돈을 지불하겠다고까지 했죠. 그래서 올바른 아이디어를 찾고 나서 그 초기 단계에서 초기 제품-시장 적합성을 찾는 건 꽤 쉬웠어요.""
     * ""Plaid의 더 큰 도전은 시장이 사실상 존재하지 않는다는 거였어요. 우리에게 뭔가를 만들어달라고 원하는 5~7개 회사가 있긴 했지만, 진짜 도전은 시장 개발이었죠.""
     * ""그게 바로 초기 단계에서 거의 모든 VC가 Plaid에 투자하기를 거절한 이유예요. 그들은 '당신들은 흥미로운 제품을 만들었고, 그것이 일부 고객에게는 유용할 수 있겠지만, 시장이 그리 크지 않다'고 말했죠.""
     * ""금융 서비스 분야가 결국에는 스타트업이 진출할 수 있는 진짜 시장이 있다는 것을 우리 자신과 다른 모든 사람들에게 확신시키는 것이 초기 단계에서 가장 힘들었던 일입니다.""

  초기 수요, 만족도, 실행 효율성에 대한 사례

     * Looker는 2011년 8월부터 2013년 3월까지 약 19개월 동안 제품-시장 적합성을 찾는 단계였음
     * 창업자 Lloyd Tabb은 사업 모델이 벤처 비즈니스에 적합한지 확인하는 데 거의 1년이 걸렸다고 함
     * 2012년 8월에 200만 달러의 시드 투자를 유치했고, 2013년 1분기 말에는 9명의 팀이 연 매출 35.7만 달러를 달성하고 15명의 고객을 확보한 상태였음
     * 초기에는 고객 행사를 개최하는 것이 효과적인 전술 중 하나였음

    가상의 스타트업 Ledgerly 사례

     * 제품-시장 적합성을 보여주기 위해 가상의 스타트업 Ledgerly를 소개
          + Ledgerly는 대형 언어 모델(LLM)을 사용하여 회계팀을 지원하는 플랫폼임
          + 5명의 정규직 직원으로 구성된 팀이며, 최근 120만 달러의 프리시드 투자를 유치함
          + 아직 번아웃 배수(burn multiple)를 모르는 단계임
     * 제품-시장 적합성의 각 차원을 살펴보면 다음과 같음:
          + 수요(Demand):
               o 4명의 고객을 확보했으며, 개인 네트워크나 투자자의 소개로 획득함
               o 아직 아웃바운드 영업 체계는 없음
               o 3명의 고객은 각각 1.5만 달러를 지불하여 연 매출 4.5만 달러임
               o 4번째 고객은 디자인 파트너로 아직 비용을 지불하지 않음
               o 4명의 고객을 확보하기 위해 46개 기업과 접촉해야 했음
               o 아직 갱신 고객은 없으며, 적합하지 않아 이탈한 디자인 파트너가 1명 있었음
          + 만족도(Satisfaction):
               o 모든 고객이 일주일에 한 번 이상 제품을 정기적으로 사용하기 시작함
               o 2명의 고객이 내부적으로 여러 사용자를 온보딩함
               o 3명의 고객으로부터 좋은 피드백을 받고 있지만, 아직 초기 단계이고 일화적임
          + 효율성(Efficiency):
               o 아직 효율성에는 가장 적은 관심을 기울이고 있음
               o 고객 온보딩에 8주가 소요되어 너무 길게 느껴짐
               o 잠재 고객을 찾는 데 많은 시간이 걸림 (고객 1명을 찾는 데 최소 5번의 미팅이 필요)
               o 고객들이 많은 특별 요청을 하고 있어 팀이 여러 방향으로 끌려가고 있음

    벤치마크

     * 위의 내용은 초기 제품-시장 적합성이 어떤 느낌인지 감을 잡는 데 도움이 될 것임
          + 회사가 Level 1에 있다는 것을 나타내는 벤치마크를 수집했으므로 자신의 진척 상황과 더 밀접하게 비교할 수 있음
          + 반복 가능성은 아직 보이지 않으며, 후기 단계 회사에서는 매우 중요하게 여길 만한 일부 지표는 아직 적용되지 않음
     * 팀 규모가 10명 미만임
     * 프리시드 또는 시드 단계임
     * 수요의 출처는 대부분 친구와 네트워크이며, 일부 콜드 아웃리치임
     * 영업 전환율: 따뜻한 소개의 10-20건 중 1건이 고객으로 전환됨
     * 고객 수는 3-5명임
     * 연 매출(ARR)은 0에서 50만 달러 사이임
     * 아직 갱신 고객은 없음 (너무 이름). 후회되는 이탈은 없음 (일부 후회되지 않는 이탈은 있음)
     * 매출총이익률(gross margin)과 번아웃 배수(burn multiple)가 무엇인지 모름 (각각 해당 없음)

  가장 중요한 것

     * 창업자들은 벤치마크와 비교하는 것 외에도 다음 단계의 제품-시장 적합성에 도달하기 위해 가장 중요한 것에 집중할 필요가 있음
     * Level 2에 도달하기 위해서는 만족도에 가장 집중해야 함
          + Ledgerly의 경우, 만족도를 높이기 위해 일일 사용량과 각 기업의 사용자 수를 늘리고 NPS 설문조사를 고객 상호작용의 정기적인 부분으로 시작하는 것이 목표임
          + 이러한 만족도 지표에만 집중하지 말고 결과 지향적으로 유지하는 것이 핵심
          + 간단한 규칙은 다음과 같음: 고객에게 약속한 비즈니스 결과를 얼마나 움직이고 있는가?
     * 만족도가 가장 중요하고, 그 다음으로 수요가 중요함
          + 많은 고객이 필요한 것은 아니지만, 이 작은 고객 집합을 만족시킨다면 결국 문 앞에 줄이 설 것이라는 징후가 필요함
          + Ledgerly의 경우 향후 몇 달 안에 2-3명의 고객을 더 확보하는 것이 목표임
     * 이 단계에서 효율성은 가장 마지막으로 고려해야 함
          + Level 1에서는 효율성에 대해 많은 시간을 할애하지 않는 것이 좋음
          + Ledgerly의 계획된 최적화는 만족도와 수요 개선에 도움이 되는 것임
          + 고객 온보딩을 4주로 단축하고 더 빠르고 반복 가능한 영업 프로세스를 만들어 전환율을 높이는 것이 목표임
     *

     개발 중인 제품-시장 적합성에 도달하려면 적어도 소수의 고객이 정말 필요로 하는 것을 만들어야 함. 그것은 그들의 문제를 해결해 줌. 그들은 그것 없이는 살 수 없음. 그리고 그것은 먼저 매우 높은 수준의 만족도를 얻는 것이 필요함.
     * 초기에 고객과 밀접하게 지내는 것이 만족도를 높이는 데 핵심임
          + ""고객에게 가치를 주지 않으면 고객은 당신 곁에 있고 싶어하지 않음""
     * Looker의 경우 제품-시장 적합성을 찾는 것은 가치를 전달하는 방법을 찾아내는 것이었음
     * 가장 효과적이었던 것은 제품과 서비스가 결합된 형태
          + ""데모를 개념 증명을 구축할 수 있는 기회로 활용했기 때문에 항상 잠재 고객에게 가지고 놀 수 있는 실제 데이터 세트를 요청했음. 그런 다음 매우 빠르게 들어가서 소프트웨어를 설정하고 사용 방법을 가르쳐주는 무료 평가판을 제공한뒤 참여도를 지켜봤음""
          + ""참여가 있을 때만 거래를 성사시켰음. 우리는 초기에 거의 고객 이탈이 없었는데, 그 가치를 얻은 고객에게만 판매했기 때문임""
     * Level 1에서는 비효율성이 예상된다는 점을 언급
          + ""단점은 일부 평가판이 정말 오래 걸렸다는 것임. 그런 모멘텀이 보이지 않으면 다시 들어가 그들이 우리가 모든 데이터 질문에 어떻게 답할 수 있는지 이해했는지 확인하기 위해 더 적극적으로 개입했음""

  주의해야 할 황색 신호들

     * 현재의 미온적인 반응을 초기 견인력으로 오인하고 있는 것인지, 아니면 창업자의 의지를 한 번 더 발휘하면 사업에 필요한 돌파구를 마련할 수 있을지 판단하기는 어려움
     * Level 1에서 계속 나아가야 할 때와 물러서서 방향을 전환해야 할 때를 아는 것은 가장 까다로운 부분 중 하나임
     * Persona 창업자 Rick Song은 스타트업이 Level 1에서 침체되는 경향이 있는 이유에 대해 사려 깊은 견해를 제시함
          + ""많은 초기 스타트업에게 가장 큰 과제는 고객 만족도에 대해 스스로 거짓말을 한다는 것임. 이 단계에서 흔히 빠지는 함정은 제품을 좋아하지만 사랑하거나 필요로 하지 않는 고객을 갖는 것임. 나는 Persona 내부에서 관계 비유를 많이 사용함: 누군가가 무언가를 좋아하지만 사랑하지 않는다는 것을 아는 것은 매우 어렵지만, 만약 당신이 친구 영역에 있어봤다면 그 답을 알 것임""
     * Song은 Persona 초기에 ""친구 관계""에 있는지 알아내기 위해 소수의 초기 고객과 신뢰할 수 있는 관계를 구축하고자 했음
          + 그는 그들과 항상 대화하고, 문자를 주고받고, 커피를 마시며, 진실된 피드백을 얻기 위해 매우 솔직하고 자기 비하적인 태도를 취하려 노력함
          + 아래와 같은 질문을 반복적으로 하면서, 그들이 올바른 궤도에 있다는 것을 확신할 수 있을 만큼 강력한 대답을 얻을 때까지 계속했음
               o 경쟁자가 나타나 내가 청구하는 것보다 50% 낮은 가격을 제시한다면 당신은 갈아탈 것인가?
               o 가격을 인상하면 많은 반발이 있을 것인가?
               o Persona는 당신의 회사에 게임 체인저인가? Persona가 사라진다면 당신에게 얼마나 큰 타격이 될 것인가?
     * 여전히 확신이 서지 않는다면 주의해야 할 황색 신호는 다음과 같음
          + 고객들이 당신의 제품이 내일 사라져도 실망하지 않을 것이라고 응답함
          + 6개월 동안 사용량이 적고 증가하지 않음
          + 만족한 고객이 소수 있지만, 가장 중요한 기능이 각 고객마다 실제로 다름
               o 즉, 각 고객을 만족시키기 위해 제품을 너무 많이 커스터마이징하고 있음 (그것은 당신을 컨설팅 비즈니스 영역에 놓이게 함)
          + 새로운 고객을 찾는 것이 엄청나게 어려움
          + 영업 사이클이 너무 오래 걸리고, 담당자가 회사를 그만두면 거래가 결렬됨
          + 디자인 파트너가 유료 전환을 주저하거나 고객이 당신이 추구하는 ACV(연간 고객 가치)를 기꺼이 지불하려 하지 않는 것 같음

  Lattice의 사례: 제품-시장 적합성을 찾기 위한 노력

     * Jack Altman은 Lattice의 원래 아이디어로 이를 직접 경험했음
          + 처음에 만든 것은 OKR 소프트웨어 도구였음
          + 이전 회사에서 분기별 OKR 계획 수립이 기업에게 고통스러운 과정이라는 것을 목격했음
          + 다른 많은 회사와 이야기를 나누며 실제로 문제가 있다는 것을 확인했음
          + 그러나 그 문제를 진정으로 해결하는 소프트웨어는 만들지 못했음
     * 그것을 분명히 한 두 가지 문제가 있었음
          + 첫째, 사람들이 실제로 신용카드를 꺼내 돈을 지불하게 하는 것이 정말 어려웠음
               o 많은 CEO와 인사 담당자들이 관심을 보이면서도 결국 지불하기를 꺼려했음
          + 둘째, 제품을 사용하게 되더라도 다음 분기가 쉽게 오지 않았음
               o 처음에는 Lattice에서 전사적 OKR 계획 수립을 하더라도, 다음 분기에는 ""어우, 우리가 이걸 해야 해""라는 반응을 보였음
               o 직원들의 재사용률이 높지 않았음
     * 교착 상태에서 벗어나는 방법에 대한 조언
          + ""교착 상태에 빠져 있다면, 초기 단계에서 벗어나는 유일한 방법은 작은 변화가 아닌 큰 변화를 하는 것임""
               o 많은 사람들이 초기 단계에 머물면서 수년 동안 작은 변화만 시도하는데, 이는 모두의 시간과 자원을 낭비하는 것임
               o 제품-시장 적합성 수준을 높이거나 교착 상태에서 벗어나려면 점진적인 단계 이상의 것이 필요함
          + ""사람들에게 이 현실을 상기시켜 주어야 함. 그래야 이러한 루프에 너무 오래 머물지 않고 '좋아, 우리는 그냥 계속 나아가서 새로운 것을 시도해 보자'라고 말할 수 있음""
          + ""OKR에 대해 9~10개월 동안 작업한 후, 우리는 현재 일어나고 있는 일과 자금이 소진될 때까지 다음 라운드에서 의미가 있을 비즈니스 사이에 그릴 수 있는 선이 없다는 곳에 도달했음. 그래서 우리는 결국 정말 효과가 있었던 것, 즉 성과 관리에 착륙하기 전에 몇 번의 피벗이 필요했음""

[Level 2: Developing (발전 단계)]

     * Level 2 단계에서는 20여 명의 고객이 필요로 하는 제품을 만들거나 연 매출 100만 달러에 도달하는 등 고전적인 이정표를 통과하게 됨
     * 아직 모든 것을 완전히 파악한 것은 아니지만, 고객의 요구사항, 공감할 수 있는 메시지, 제공하는 제품 솔루션에서 반복성이 훨씬 더 많아짐
     * 개발 중인 제품-시장 적합성은 한계 고객이 더 가까이 있다는 징후가 반짝이기 시작할 때임
          + 그러나 아직은 결코 쉽지 않음
          + 이것이 대다수 기업이 Level 2에 머무르는 두 가지 이유 중 하나임
          + ""라이트"" 제품-시장 적합성에 도달하는 것으로 생각할 수 있음

  Level 2 단계의 느낌

     * Lattice의 제품 피벗 이후, 공동 창업자 Jack Altman은 견인력의 차이가 즉시 분명하게 느껴졌다고 함
          + ""그때 시장의 끌어당김이 어떤 모습인지 매우 분명했음. 실제 제품을 만지지 않고 디자인 모형만으로 연간 계약을 선불로 지불하는 사람들이 있었는데, 이는 우리가 OKR로 겪었던 경험과는 전혀 달랐음""
          + ""리드가 모든 곳에서 자연스럽게 들어오고 있었음. 사람들이 우리에 대해 친구들에게 이야기하고 있었음. '나는 2주 안에 이 성과 주기를 시작할 예정이고 이 기능이 필요해. 아직 없는데 내일 시간을 내서 이야기를 나누고 그것을 만드는 데 도움을 줄 수 있을까?'라고 말했으며, 그 제품으로 첫 달에 이전 제품으로 1년 동안 기록했던 것의 두 배나 되는 매출을 기록""

  발전 단계의 수요, 만족도, 실행 효율성에 대한 사례

     * Looker가 Level 2에 있었던 2013년 3월부터 2014년 11월까지의 상황을 살펴보면:
          + 2013년 3월, Looker는 34명의 팀과 20명의 고객을 보유한 채 스텔스 모드에서 등장함
     * 2013년 8월까지 1,600만 달러 규모의 시리즈 A 투자를 유치할 만큼 충분한 진전이 있었음
     * 2013년 11월까지 연 매출 100만 달러 이상의 이정표에 도달하고 40명 이상의 고객으로 성장했음
          + 새로운 채널(아웃바운드, 영업, AWS Redshift 및 Snowplow와의 파트너 마케팅 가능성)이 성공적인 것으로 입증되고, 반복성이 엿보이기 시작
          + Looker 팀은 Thumbtack, The RealReal, Gilt 등의 고객사를 최근 유치하면서 누구에게 판매하는지 더 잘 파악하게 됨
          + 엔터프라이즈 시장 진출에 관심이 있었지만 ""요원한"" 상태로 남아 있었음
     * 2013년 7월 기준, 고객들이 Looker에서 한 달에 평균 1,600시간 이상을 보냈음
          + 이사회 보고에서 팀은 ""미친 듯한 추천 가능성을 유지하고 최소한의 이탈(3)을 통해"" 놀라운 만족도를 계속 확인했다고 밝힘
     * 효율성 측면에서 2013년 말 기준 CAC는 5만 4,000달러, 투자 회수 기간은 19개월이었음

    가상의 스타트업 Hire Hero 사례

     * Hire Hero는 AI를 활용하여 팀의 채용을 돕는 가상의 인터뷰 플랫폼임
          + 18명의 정규직 직원이 있음
          + 최근 1,000만 달러 규모의 시리즈 A 투자를 유치했고, 4.2배의 번아웃 배수를 가지고 있음
          + 이는 이상적인 수준은 아니지만, 적어도 그들은 자신의 상태를 알고 있음
     * 제품-시장 적합성의 각 차원을 살펴보면:
          + 수요:
               o 연 매출 120만 달러, 고객 수 22명
               o 평균 영업 주기는 32일로 47일에서 개선됨
               o 고무적인 신호는 최근 5명의 고객이 초기 고객보다 두 배의 금액을 지불하고 있다는 것임
               o ACV 증가는 수요 측면에서 매우 강력한 신호임
          + 만족도:
               o 갱신률을 실제로 추적할 만큼 오래된 팀임
               o 4명의 고객이 갱신했음
               o 12개월 이상 판매한 후 4명의 고객이 이탈했는데, 이상적이지는 않지만 그 중 2명은 후회스럽지 않은 이탈이었음
               o 주간 활성 사용량이 증가하고 있음
               o NPS 스타일 설문 조사 결과 9점과 10점이 대략 절반을 차지함
          + 효율성:
               o 이 단계에서는 여전히 중점 사항은 아니지만, 적어도 매출총이익률이 65%라는 것을 알고 있음
               o 소프트웨어 기업은 매출총이익률 75-80% 이상을 목표로 해야 하므로 개선이 필요함
               o 온보딩이 15% 빨라졌음
               o 매우 중요한 것은 고객별 맞춤화 요구가 줄어들고 있다는 것으로, 이는 이제 22명의 고객에게 동일한 제품을 판매할 수 있음을 의미함

  가장 중요한 것

     * 레벨업하기 위해서는 수요에 우선순위를 두어야 함
          + 진정한 의지와 노력으로 20명의 고객을 확보할 수는 있지만, 100명이나 200명의 고객은 그렇게 할 수 없기 때문
          + 제품에 대한 만족도와 수요가 그 일을 대신해 주기 시작함
     * 스타트업은 수요를 효과적으로 창출할 방법을 찾아야 함
          + 수요를 늘리는 동시에 기존에 달성한 만족도 수준도 유지해야 함
          + 효율성은 여전히 주된 관심사는 아니지만, 점점 더 많은 주의를 기울여야 할 사항임
          + 이제는 이것이 효율적인 비즈니스가 될 수 있을지 고민하고, 그렇게 만들기 위한 작업을 시작해야 할 때임
     * 수요를 높이기 위한 가장 도움이 되는 방법은 일반적으로 제품 포지셔닝을 미세 조정하고 아웃바운드 영업, SEO, 유료 마케팅, 추천 등 확장 가능한 채널을 찾는 것임
     * Vanta의 Christina Cacioppo는 과거로 돌아간다면 추천에 더 신경 썼을 것이라고 함
          + ""우리는 우리의 훌륭한 게릴라 마케팅이나 우리가 하고 있다고 생각한 것에 너무 자부심을 느꼈지만, 사실은 '사업에 중요한 SOC 2 인증을 Vanta가 도와준다' 이외에 우리가 만들고 있는 것을 설명하는 방법을 배우는 데 투자가 부족했던 것 같음. 돌이켜 보면, 처음에는 입소문이 좋았던 것에 안주하기보다는 그런 것들을 좀 더 일찍 시작했어야 함""

  주의해야 할 황색 신호들

     * 현재 고객은 만족하지만 고객을 대거 유치하는 데 어려움을 겪고 있음
     * 후회스러운 이탈률이 20% 이상임
          + 사람들이 제품을 구매하고 대금을 지불했지만 만족하지 못했고, 5명 중 1명이 이탈하고 있음
     * 번아웃 배수가 걱정되기 시작함
          + 예를 들어 월 20만 달러를 태우면서 신규 ARR은 월 2만 달러밖에 증가하지 않아 번아웃 배수가 10배에 이름 (1에 최대한 가깝거나 1 이하를 목표로 함)
          + 그러나 돈을 쓰는 것을 멈추면 성장이 멈출 것 같은 느낌이 듦
     * 영업 주기가 너무 오래 걸리고 후반부에 거래를 놓치게 됨
          + 경쟁사에 밀리기 시작함
          + 잠재 고객으로부터 긴박함을 느끼지 못함
     * 원하는 가격대를 맞추기 어려워함
          + 이는 종종 고객이 제품을 필수품이 아닌 편의품으로 여기고 있다는 신호임
          + 대화에서 ""예산이 없다""거나 ""우리에게 적절한 시기가 아니다""라는 말을 자주 듣게 됨

[Level 3: Strong(강력) 단계]

     * 대부분의 스타트업은 이 단계까지 도달하지 못함
     * 강력한 제품-시장 적합성에 이르면, 회사는 매우 가치 있는 잠재력을 가지게 됨
     * Level 2와 Level 3의 가장 큰 차이점은 수요의 수문이 열렸다는 것임
          + 반복성이 더욱 높아짐
          + 수요가 인바운드로 발생함
          + 사람들이 회사에 대해 들어봤음
          + 회사가 잘 돌아가는 느낌이 듦
          + 누가 고객인지 훨씬 더 구체적으로 알고 있음
          + 고객 확보 비용은 여전히 약간 높지만, (대부분의 경우) 명확하고 일관된 메시지로 그들에게 다가갈 수 있음을 발견함
          + 거의 커스터마이징 없이 고객에게 많은 가치를 제공하는 솔루션을 배포할 수 있음

  Level 3 단계의 느낌

     * 이 단계에서는 이전에 들었던 PMF 비유의 대부분이 이해되기 시작함
          + 제품-시장 적합성의 효과를 실제로 느끼기 시작함
     * Retool:
          + ""우리는 제품-시장 적합성을 찾는 것이 마치 간헐천이 폭발하는 것처럼 본능적으로 느껴졌다고 말한 사람과 이야기를 나눴음. 그러나 첫 몇 년 동안은 그런 느낌이 전혀 들지 않았음. Retool에서는 초기 고객 중 4번째든 14번째든 우리가 찾을 수 있는 마지막 고객처럼 느껴졌음. 돌을 밀어 올리는 것 같았음. 밀던 것을 멈추면 즉시 다시 굴러 떨어질 것 같았음. 연 매출 몇 백만 달러가 될 때까지 그런 느낌이었는데, 그때 돌이 반대편으로 굴러 떨어져서 따라잡기 위해 뛰어야 했음""
     * Lattice:
          + ""가장 큰 변화는 리드를 얻는 것이 쉬워졌다는 점이었음. '이 리드들이 어디서 오는지조차 모르겠다'고 생각했던 기억이 남. 그리고 매달 더 많은 리드가 계속 나타났음""
     * Verkada:
          + ""2018년 첫 해 판매 이후 그 다음 2년은 정신없었음. 우리는 생산을 따라잡기 위해 애썼음. 모든 시스템을 확장해야 했음. 고객이 기대하는 솔루션을 제공하기 위해 다음 12-18개월 동안 많은 일이 일어나야 했음. 그 자체로 여정의 매우 형성적이고 까다로운 부분이었음""
     * Plaid:
          + ""2016년에서 2017년 사이에 우리는 매우 강력한 제품-시장 적합성을 갖게 되었음을 알았는데, 그것은 주로 많은 고객의 급속한 성장을 목격했기 때문임""
          + ""Robinhood와 Coinbase가 이때 쯤 시장을 장악하기 시작했고, 우리는 그것을 우리의 숫자로 보았음. 플랫폼 기업의 장점 중 하나는 고객과 매우 일찍 연결하여 시간이 지남에 따라 성장할 수 있다는 것이고, 그 규모는 정말 멋짐""
          + ""예를 들어 Venmo 등의 앱 내에서 사용자 가입 흐름의 일부를 브랜딩했는데, 이 사소한 브랜딩이 실제로 우리 제품에 대한 수요를 많이 창출했음. 사람들이 그것을 보고 '이것은 새로운 금융 서비스 경험이야. Plaid가 이것을 만드는 데 도움을 줬으니 Plaid에 연락해야겠어'라고 말했기 때문임. 그래서 우리는 고객이 잘 되면 우리에게 수요를 창출하고 그 다음에는 매번 계속 순환하는 멋진 사이클을 가지고 있었음""
          + ""하지만 이 시점에서 우리가 회사를 시작한 지 4년 또는 4년 반이 지났다는 점을 명심할 것. 초기 여정의 많은 부분이 이 시장이 존재할 것이라는 믿음과 신념, 우리가 한 일로 인해 부분적으로는 실제이고 부분적으로는 만들어진 좋은 초기 신호에 기반을 두었음""

  강력 단계의 수요, 만족도, 실행 효율성에 대한 사례

     * 2014년 11월부터 2015년 12월까지 Looker는 Level 3 단계에 속했음
     * 2014년 11월, 팀은 $5M ARR을 달성했으며, CEO는 이를 ""많은 회사들이 $1M 또는 $2M ARR에 도달할 수 있지만, $5M에 도달하는 것은 매우 실질적이고 지속 가능한 것을 구축했다는 것을 보여준다""고 평가함
     * 2015년 2월, $30M Series B 투자를 유치하였으며, 직원 수는 110명으로 증가하고 매출은 400% 성장함
     * 이 시점에서 Looker는 250개의 고객사를 보유하고 있었으며, Uber, Instacart, Plaid, Etsy 등의 신규 고객을 추가함
     * 2015년 2분기, 첫 리셀러 계약을 체결하고 런던에 첫 EMEA 오피스를 열며 유럽으로 확장하기 시작함
     * PR, 커뮤니티, 콘텐츠 및 사상 리더십을 통해 유기적인 인바운드 성장에 주력하는 한편, 파트너십 확장에도 주력함
     * 예를 들어, 2015년 초 Segment와 Snowflake를 영입하는 것은 큰 성과였으며, Microsoft SQL DW & Azure의 3대 최고 출시 파트너로 선정된 것도 큰 성과였음
     * 그러나 이 기간 동안 주요 초점은 데이터 전문가와 일반 비즈니스 사용자 모두에게 더 잘 어필할 수 있도록 포지셔닝을 미세 조정하는 것이었음
     * 고객들은 직원 기반에서 최대 80-90%의 사용자 채택을 경험함
     * 2015년 말까지 97%의 고객이 하루에 한 번 이상 Looker에 액세스했으며, CAC는 $45,300로 감소했고 투자 회수 기간은 17.5개월로 단축됨
     * 매출 총이익률은 2014년 62.5%에서 2015년 72.6%로 개선됨
     * 영업 시험 모델은 계속 더 효율적으로 변화했으며, 회사는 70%의 시험-승리 비율을 보였음
     * 그러나 효율성이 최우선 과제로 대두되면서 가장 인상 깊었던 것은 그들의 계획 정확도였음
     * 7년 동안 Looker 팀은 한 번도 예약 계획을 놓친 적이 없었으며, 28분기 연속 순수 실행이라는 희귀한 기록을 달성함

  가상의 스타트업 GuardDog 사례 연구

     * 보안팀이 보안 문제를 원활하게 식별하고 해결하는 데 도움을 주는 가상의 인시던트 관리 도구
     * 현재 64명의 정규직 직원이 근무하고 있으며 2,500만 달러의 시리즈 B 투자를 유치할 계획
     * 현재 번 멀티플은 2.1로 상당히 높은 수준
     * 수요
          + GuardDog은 88명의 고객을 보유하고 있음
          + 연 순수익(ARR) 1000만 달러와 14%의 판매 전환율을 기록하여 인바운드 및 아웃바운드 채널이 효과적으로 작동하고 있으며, 인지도가 확산되기 시작함
          + 구전 효과가 나타나기 시작하였는데, 이는 이 단계에서 매우 일반적임 (예: ""스타트업인가요? 보안 솔루션이 필요하네요. GuardDog을 선택하세요. 모든 스타트업들이 사용중이에요."")
          + 향후 12개월 동안 ARR이 3배 성장할 것으로 예상
     * 만족도
          + 순수익 유지율(NRR)은 108%이며, 연간 후회 이탈률은 8%임
          + 분기별 사용자 참여도는 고객당 평균 사용자 수가 5.5명에서 9명으로 증가함
     * 효율성
          + GuardDog은 여기서 존경받는 영역에 진입하고 있음
          + 팀은 인프라 측면과 서비스 측면 모두에서 71%의 매출 총이익률을 개선하기 위해 많은 작업을 수행함
          + 온보딩 속도가 60% 빨라짐

  가장 중요한 것

     * 다음 레벨에 도달하기 위해서는 효율적인 경제성에 대해 진지하게 고민해야 할 때임
     * CAC 회수 기간, LTV 대 CAC 비율 등이 중요한 지표가 되기 시작함 (구체적으로 CAC 회수 기간은 18개월 미만, LTV/CAC는 3 이상이 바람직함)
     * 향후 공개 시장에서 높은 가치 평가를 받기 위해서는 만족도와 수요를 유지하면서도 효율성을 높여야 함
     * GTM 모션(인사이드 세일즈, 필드 세일즈, 채널 파트너십 등)을 개선하고 폭넓은 인지도 구축에 집중하는 것이 핵심임

  주의해야 할 황색 신호

     * Level 3에서 가장 많이 관찰되는 것은 실질적인 경쟁자들이 나타나기 시작한다는 점임
     * 제품이 분명히 효과가 있다는 것이 입증되면서 다른 스타트업이나 중후반 단계의 기업들이 이를 주목하기 시작함
     * 많은 스타트업들이 ""성장을 위해 돈을 쓰는"" 함정에 빠지곤 하는데, 투자자들의 번 멀티플 축소 압박과 2-3배 이하로 내려가면 성장이 멈출 것이라는 자신의 두려움 사이에서 갈등함
     * 다음과 같은 황색 신호들에 주의해야 함:
          + 약간의 누수가 있음: NRR 90% 미만, 후회 이탈률 10% 초과
          + 추천과 구전이 정체되기 시작함
          + 성장세가 둔화됨. 이전 2년 동안 각각 3배씩 성장했지만 올해는 2배 달성이 어려움
          + 첫 번째 확장 가능한 채널을 찾았지만 포화 상태가 되었고 새로운 채널을 찾는 데 어려움을 겪고 있음

  Looker의 성장 전략

     * 초기 영업 방식을 확장 가능한 모델로 발전시키기
          + 2,000명의 고객을 확보하면 ARR 1억 달러를 달성하고 상장할 수 있을 것으로 예측함 (실제로는 1,700명의 고객으로 예측보다 조금 더 나은 성과를 거둠)
     * 기술 지원이 내재된 인사이드 세일즈 모션
          + Lloyd의 초기 영업 직관은 강력한 개념 증명(PoC)이 필요하다는 것이었음
          + 인사이드 세일즈 모션을 위해서는 영업 사원들을 지원할 수 있는 내재된 기술 인력이 필요했음
          + 하지만 이런 도박을 하려면 비즈니스 모델을 정확히 이해해야 함
          + 사전 영업 지원에 투입되는 비용의 마진을 알고 있었기에 타당한 결정이었음
     * 외부 압력이 아닌 내부 기회에 기반한 계획 수립
          + 사람들은 종종 밸류에이션을 높이기 위해 무리한 계획을 세우곤 하는데, 이는 회사를 망칠 수 있는 위험한 행동임
          + Looker는 외부 투자자의 영향이나 차기 라운드에서 달성하려는 기업가치에 따라 계획을 수정한 적이 없음
          + 기회가 보일 때만 계획을 조정했음 (예: 엔터프라이즈 시장 진출 시 초기에는 타진하다가 성과가 나오자 투자를 확대함)
     * 달성 가능한 목표 설정의 중요성
          + 계획을 세울 때는 성장을 극대화하되, 여전히 승리처럼 느껴져야 함
          + 토끼를 개 앞에 더 멀리 두면 개가 더 빨리 달릴 거라고 생각하며 목표치를 높이 잡는 것은 효과적이지 않음
          + 오히려 장기적으로는 속도를 늦추게 되는 결과를 초래함
          + Looker는 모델에 따라 야심찬 목표를 세웠지만 무모하지는 않았고, 결과적으로 더 빨리 목표에 도달할 수 있었음

[Level 4: Extreme(극단적) 단계]

     * 이 단계에서는 명확하게 정의된 타겟 페르소나 내에서 고객을 확보하는 반복 가능성이 두드러짐
     * 100% 전환율을 의미하는 것은 아니지만, 엄청난 일관성을 보임
     * 이 단계에서 종종 회사의 브랜드가 변곡점에 도달함
     * 널리 알려짐에 따라 해당 카테고리의 ""클리넥스""가 될 가능성이 높아지며, 이는 한계 고객 획득을 극적으로 쉽게 만듦 (예: Vanta가 SOC 2와 동의어가 된 것처럼)
     * 하지만 창업자의 성장 추구는 결코 끝나지 않으므로, 여정은 여기서 끝나지 않음
     * 도전 과제는 코어 제품 외부에 새로운 베팅을 시작하고 TAM을 확장함으로써 제품 시장 적합성을 반복해서 찾는 것임
     * 조직이 이러한 새로운 도전을 감당할 준비가 되어 있다고 느낌

  Level 4 단계의 느낌

     * 도매 마켓플레이스 Faire(최근 가치 126억 달러) 구축 시에 Max Rhodes는 언제 확장해야 할지에 대한 질문으로 고민했음
     * 너무 일찍 시도했다가 실패한 다른 회사들의 사례를 들었기 때문
     * 하지만 코어 시장에서 모든 진전 상황에 CEO로서 만족할 때까지, 즉 반 속도로 페달을 밟는 것 같을 때까지 확장하지 말라는 조언을 들음
     * 2019년 말, 즉 3년 만에 국제 시장 진출과 의류 시장 진출을 동시에 결정했음
     * 확장을 위한 체크 리스트
          + 성장 모델이 확립되어 있어야 함
               o 성장이 예측 가능하고 국내 경쟁에서 충분한 리드를 확보한 상태여야 함
               o 성장 가속화를 위해 새로운 것을 찾기보다는 최적화 모드에 있어야 함
          + 모든 핵심 기능을 위한 리더십 팀이 갖춰져 있어야 함
               o 누군가 그만두거나 예상치 못한 문제가 발생해도 CEO가 매일 진화를 끄집어내야 하는 상황이 아니어야 함
               o 일상적인 운영에 CEO의 개입이 더 이상 필요하지 않아야 함
          + 단위 경제학이 해결되어야 함
               o 성장을 지속해도 자금이 부족할 것이라는 걱정이 없어야 함
               o 투자금 회수 기간이 양호해야 하고, 기여 마진이 확보되어야 함
               o 경쟁, 성장 둔화, 자본 리스크, 인력 실행 이슈 등 사업의 구조적 리스크가 안정화되어야 함

  가상의 스타트업 Metriq 사례 연구

     * Metriq은 셀프 서비스 분석 및 보고를 제공하여 팀이 더 빠르게 의사 결정을 내릴 수 있도록 지원하는 인텔리전스 플랫폼임
     * 186명의 직원이 있으며 최근 7500만 달러의 시리즈 C 투자를 유치함
     * Burn multiple은 0.87로 매우 우수함
     * 수요
          + 262명의 고객을 보유하고 있으며 ARR은 거의 3000만 달러에 달함
          + 판매 전환율은 24%, ACV는 112,000달러임
          + 이전 12개월 동안 ARR이 3배 성장했으며, 향후 12개월 동안 2배 성장할 것으로 예상됨
          + 향후 12개월 매출 성장을 상당히 높은 수준의 확신을 가지고 예측할 수 있음
     * 만족도
          + 고객들은 제품이 중요하기 때문에 정기적으로 그리고 자발적으로 플랫폼을 사용하고 있음
          + NRR은 123%이며 후회 이탈률은 6%에 불과함
          + 인바운드 리드의 13%가 고객 추천에서 발생하고 있음
          + 팀은 매주 2~3건의 긍정적인 고객 이메일을 받고 있으며 이는 전적으로 고객 자발적임
     * 효율성
          + 영업, 온보딩, 고객 성공 팀이 원활하게 운영되고 있음
          + 반복 가능한 플레이북을 보유하고 있음
          + 매출총이익률은 86%까지 상승했으며 CAC 회수기간은 11개월임

  가장 중요한 것

     * 세일즈포스, 스트라이프, 데이터독 등 전설적인 기업들은 여러 제품으로 여러 시장에 진출하고, 새로운 고객 세그먼트에서 극단적인 제품-시장 적합성(PMF)을 반복적으로 달성함
     * 대부분의 창업자들은 총 매출(TAM) 확장에 대해 생각하는 시기를 놓치는 경향이 있음
     * 핵심 사업에 집중할 때는 시간을 분할하기 어려움

    아틀라시안의 사례

     * 아틀라시안은 다른 기업들보다 이러한 작업을 훨씬 일찍 추진한 사례로 주목할 만함
     * 아틀라시안은 설립 2년 차에 두 번째 제품인 컨플루언스를 만듦
          + 지라와 같은 획기적인 제품이 잘 성장하고 있을 때 이는 매우 이례적인 일임
          + 기존의 회사 구축 상식으로는 이를 하지 말라고 말함
          + 첫 번째 제품에 대해 해야 할 일이 많이 남아 있고, 두 번째 제품 작업을 시작하면 초점이 분산되어 젊은 회사에게는 치명적일 수 있기 때문
     * 그러나 컨플루언스는 아틀라시안 제품군의 핵심이 되었을 뿐만 아니라, 덜 눈에 띄는 이점도 많이 발견함
          + 크로스 머천다이징, 크로스 셀링, 업셀링에 대한 근육을 키우기 시작함
          + 여러 제품에 대한 가격 책정과 패키징을 어떻게 생각할 것인가?
          + 제품 계획, 우선순위 설정, 예산 책정, 인력 배치는 어떻게 할 것인가?
          + 아틀라시안은 어린 나이에 기업이 성장하면서 해야 할 모든 것들에 대해 생각하는 법을 배우기 시작함
     * 기업이 커질수록 새로 추가하는 제품도 더 커져야 함
          + 아틀라시안과 같이 개별 제품이 수억 달러의 ARR을 가진 회사의 경우, 새로 추가하는 제품은 빠르게 성장해야 하고, 성장할 수 있는 큰 시장이 있어야 함

    TAM 확장 방법

     * 타이밍 외에도, PMF에 도달하고 TAM을 늘려야 할 변곡점에 도달했을 때 어떤 경로를 택해야 할지도 장애물임
     * Persona 창업자 Rick Song의 프레임워크가 유용함:
          + 극단적인 PMF에 도달하고 다시 한 번 시도할 준비가 되었다면, 다음 세 가지 구성 요소 중 하나(그리고 결국 모두)를 리믹스하여 TAM을 효과적으로 확장할 수 있음
               o 제품
               o 시장
               o 구매자
     * 이는 다음과 같은 모습일 수 있음:
          + 새로운 기능을 추가하여 새로운 제품 사용 사례 만들기
          + 같은 시장에서 같은 구매자에게 판매할 새로운 제품 만들기
          + 같은 제품을 가지고 다른 시장(다른 부문이든 업마켓/다운마켓으로 이동하든)으로 확장
          + 같은 시장에서 같은 제품을 다른 구매자에게 판매

    아틀라시안의 성장 단계

     * 1막: JIRA(단일 제품)를 10~100명 규모 기업(시장 세그먼트)의 엔지니어링 리더(구매자)에게 판매
     * 2막: 같은 제품을 보안 리더에게 판매하여 모든 보안 티켓을 관리(새로운 구매자, 같은 시장 세그먼트)
     * 3막: Confluence(새로운 내부 위키 제품) 도입, 많은 경우 같은 구매자와 시장 세그먼트에 판매
     * 제품, 구매자, 시장 세그먼트 중 어느 것이든 변경 가능
     * 그러나 대부분의 경우 이를 연속적으로 하는 것이 가장 좋음

    다양한 조합의 예시

     * 세일즈포스는 의료, 금융 서비스, 정부에 판매
          + 제품 사용 사례는 비교적 유사하고, 구매자는 다를 수도 같을 수도 있지만, 시장 세그먼트는 매우 다름
     * 구매자는 비교적 일관되지만 제품 사용 사례가 변하는 경우도 있음
          + 아마존 AWS는 수백 개의 사용 사례와 SKU를 동일한(또는 유사한) 구매자에게 판매
     * 탐색할 수 있는 조합은 무수히 많음

    창업자들이 흔히 저지르는 실수

     * 대부분의 창업자들은 핵심 사업을 중심으로 동심원을 구축할 때, 기존 구매자에게 새로운 제품 사용 사례를 판매하는 데 집중하는 경향이 있음
          + 이미 고객을 확보하고 있다는 점에서 부담이 적어 보임
          + 때로는 이것이 올바른 방법이기도 함(스퀘어의 대출 확장이 좋은 예)
          + 그러나 이 경로만 추구한다면 TAM에 한계가 있을 것

  강력한 PMF 달성의 중요성

     * 중요한 것은 이러한 새로운 시도 하나하나에 대해 강력하고 극단적인 PMF를 확보해야 한다는 것
     * 경우에 따라 고객을 이해하거나 시장을 개발하는 데 이미 투입한 노력으로 인해 여정이 훨씬 짧아질 수 있음
     * 그러나 다른 경우에는 사다리의 맨 아래에서 시작하여 PMF 수준을 다시 한 번 거쳐야 할 수도 있음
     * 즉, 어떤 제품, 구매자, 세그먼트에 대해서는 극단적인 PMF를 가지고 있지만, 같은 구매자와 세그먼트에 대한 다른 제품에 대해서는 초기 PMF만 가질 수도 있음
     * 이것이 수년, 수십 년에 걸쳐 복리 수익을 창출하는 여정임

     마치 수년에 걸쳐 레이어 케이크를 조립하는 것과 같음.
     새로운 기능, 새로운 제품, 새로운 고객, 새로운 시장 부문을 추가하면서 모든 것을 무너뜨리지 않고 수십억 달러의 가치를 쌓아 올리려고 노력하는 것.
     이것이 모든 훌륭한 B2B 기업의 성공 비결

   Sequoia Arc의 Product-Market-Fit 프레임워크
   Product/Market Fit (PMF)을 위한 로드맵

   Product Market Fit은 어떤 느낌일까?
   Product-Market Fit 의 4가지 종류
"
"https://news.hada.io/topic?id=14355","미국 압도적 1위 배달앱은 초기에 어떻게 성장했을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국 압도적 1위 배달앱은 초기에 어떻게 성장했을까?

   ✅ doordash란?
     * 미국의 배민.

   ✅ 첫 시작
     * 자영업자와 인터뷰 중 배달문제의 어려움을 알게 되어 본격적으로 착수.

   ✅ 초기 검증
     * 양적으로 검증하기 위해 200명의 자영업자를 추가적으로 인터뷰.
     * 실제 배달기사로로 근무하며 업계 파악.

   ✅ MVP
     * 수시간만에 1-2페이지 분량의 MVP 제작.

   ✅ 1000명까지
   (첫주문)
     * 구글 검색을 통한 주문.
       (200주문)
     * 오가닉 유저 + 스탠포드 대학생.
       (1000주문)
     * 지역 내 입소문 + 전단지 + 개인화 유저인터뷰.
"
"https://news.hada.io/topic?id=14217","Ray - AI 및 Python 애플리케이션 확장을 위한 통합 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ray - AI 및 Python 애플리케이션 확장을 위한 통합 프레임워크

     * AI와 Python 애플리케이션을 확장하기 위한 통합 프레임워크
     * 핵심 분산 런타임과 ML 컴퓨팅을 단순화하기 위한 AI 라이브러리 세트로 구성
     * 데이터셋, 분산 훈련, 하이퍼파라미터 튜닝, 강화학습, 서빙 등의 기능을 제공함.
     * 대시보드를 사용하여 애플리케이션과 클러스터를 모니터링하고 디버깅 가능
     * 모든 컴퓨터, 클러스터, 클라우드 제공업체 및 Kubernetes에서 실행 가능

Ray를 사용해야 하는 이유

     * 오늘날의 ML 워크로드는 계산 집약적임
     * 랩탑과 같은 단일 노드 개발 환경으로는 이러한 요구 사항을 충족할 수 없음
     * Ray는
          + 파이썬과 AI 애플리케이션을 노트북에서 클러스터로 확장하는 통합된 방법 제공
          + 동일한 코드를 노트북에서 클러스터로 원활하게 확장 가능
          + 범용으로 설계되어 모든 종류의 워크로드를 효율적으로 실행 가능
     * 애플리케이션이 파이썬으로 작성된 경우 다른 인프라 없이 Ray로 확장 가능

GN⁺의 의견

     * Ray는 파이썬 기반 ML/AI 애플리케이션의 손쉬운 분산 처리를 위한 강력한 도구로 보임. 특히 ML 파이프라인 구축, 대규모 데이터 처리, 분산 학습 등에 유용할 것으로 예상됨
     * 다만 프로덕션 환경에 적용하기 위해서는 클러스터 환경 구축과 운영에 대한 노하우가 필요할 것. 이를 위해서는 DevOps 엔지니어와의 협업이 중요함
     * Spark나 Dask 등 기존 분산 처리 프레임워크 대비 차별점이 명확하지 않음. 성능이나 사용 편의성 면에서의 장점을 더 어필할 필요가 있어 보임
     * AI 라이브러리들의 성숙도가 아직 높지 않아 당장 도입하기에는 리스크가 있음. 다만 지속적인 개발과 커뮤니티 지원이 이뤄진다면 향후 유용한 도구가 될 것으로 기대함
"
"https://news.hada.io/topic?id=14241","Otter - Go를 위한 고성능 인-메모리 캐시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Otter - Go를 위한 고성능 인-메모리 캐시

제작 동기

     * Go 캐시 라이브러리 중에는 진정한 Contention-free가 없음. 대부분은 뮤텍스와 제거 정책이 있는 맵에 불과
     * 이는 다른 언어의 캐시(예: Caffeine) 속도에 미치지 못함
     * Dgraph labs의 가장 빠른 캐시인 Ristretto는 경쟁업체보다 최대 30% 빨랐지만(Otter는 훨씬 더 빠름) Hit ratio가 좋지 않았음
     * 실제 애플리케이션에서는 캐시 라이브러리의 성능에 부딪히고 싶지 않기 때문에 문제가 될 수 있음
     * 그 결과, 가장 빠르고 사용하기 쉬운 캐시를 만들고 싶었음

주요 기능

     * 간단한 API: Builder에서 원하는 매개변수를 설정하고 사용하면 끝
     * 자동 구성: 애플리케이션의 병렬 처리 기능을 기반으로 자동 구성됨
     * 제네릭: 키로 비교 가능한 모든 유형을 안전하게 사용할 수 있고, 값으로 모든 유형을 사용할 수 있음
     * TTL: 만료된 값은 캐시에서 자동으로 삭제됨
     * 비용 기반 제거: 각 항목의 비용을 기반으로 제거를 지원함
     * 뛰어난 처리량: 현재 경쟁 제품들을 크게 앞서는 가장 빠른 캐시 라이브러리임(Theine, Ristretto, Bigcache, Fastcache)
     * 훌륭한 Hit ratio: 우수한 결과를 보여주는 새로운 S3-FIFO 알고리즘이 사용됨

   이름이 뭔가 익숙해서 찾아보니 요런게 있었네요
   Otter: 컨텍스트 내에서 명령어 튜닝이 가능한 멀티모달 모델
   이제 동물 이름으로 뭔가를 만드는 건 하지 말아야 할듯. 아주 희귀한 것이 아닌 이상 대부분 있네요.

   AI 분석 의견도 괜찮아서 추가해 봅니다 .

GN⁺의 의견

     * 이 오픈소스 캐시 라이브러리는 Go 개발자들에게 매우 유용할 것으로 보임. 특히 고성능이 필요한 서비스에서 기존 캐시 라이브러리의 성능 한계를 극복하기 위한 대안이 될 수 있음
     * 논문을 기반으로 알고리듬을 적용하여 기존 라이브러리 대비 경쟁력 있는 성능을 확보한 점이 인상적임. 실제 서비스에 적용하기 전에 다양한 벤치마크를 통해 성능을 검증해 볼 필요가 있음
     * 단순한 API로 쉽게 사용할 수 있고, 최신 Go 버전의 제네릭을 지원하는 등 개발 편의성도 높아 보임
     * 비슷한 Go 캐시 라이브러리로는 groupcache, fastcache, ristretto, freecache 등이 있음. 성능 특성과 사용 편의성을 잘 비교해 봐야 할 듯
     * 개인/소규모 서비스보다는 대용량 트래픽을 다루는 서비스에서 유용할 것으로 보임. 캐시 크기를 얼마나 잡을지, Eviction 주기는 어느정도로 할지 등을 잘 고민해야 함. 또한 너무 캐시에 의존하다 보면 일관성 문제가 발생할 수 있으므로 주의가 필요함
"
"https://news.hada.io/topic?id=14289","히트펌프 성능 데이터 공유 및 비교를 위한 오픈 소스 이니셔티브","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  히트펌프 성능 데이터 공유 및 비교를 위한 오픈 소스 이니셔티브

HeatpumpMonitor.org 소개

     * HeatpumpMonitor.org는 히트펌프 성능 데이터를 공유하고 비교하기 위한 오픈소스 이니셔티브임
     * OpenEnergyMonitor로 모니터링되는 다양한 설치 사례를 볼 수 있으며, 상세한 통계를 비교하여 성능 차이를 확인할 수 있음
     * emoncms와 My Heat Pump 앱으로 히트펌프를 모니터링하는 경우 로그인하여 세부 정보를 추가할 수 있음
     * 결과에 대한 토론이나 지원이 필요한 경우 OpenEnergyMonitor 포럼을 이용할 수 있음

시스템의 SCOP(Seasonal Coefficient of Performance) 순위

     * 각 시스템의 위치, 설치자, 히트펌프 종류, 용량, 데이터 기간, COP 등의 정보가 포함된 SCOP 순위표가 제공됨
     * 최근 30일 동안의 데이터를 기준으로 Bristol의 Rickman Heat에서 설치한 9kW급 Nibe F2050-10 모델이 6.0의 COP로 1위를 기록함
     * 상위권에는 Vaillant, Daikin, Mitsubishi 등 유명 브랜드의 히트펌프들이 다수 포진해 있음

전체 통계

     * 선택된 시스템 수는 123개이며, 개별 시스템 COP 값의 평균은 4.2임
     * 총 열량과 전기량 값의 합계를 기준으로 한 평균 COP도 4.2로 동일함

GN⁺의 의견

     * 다양한 히트펌프 모델과 설치 사례를 한 곳에서 비교해 볼 수 있어 히트펌프 도입을 고려 중인 소비자에게 유용한 정보를 제공함
     * 동일 모델이라도 설치 환경과 운용 방식에 따라 COP 차이가 크게 나타나는 것을 확인할 수 있어, 시공과 운용의 중요성을 시사함
     * 히트펌프 보급이 확대되고 있는 만큼 장기 운전 데이터 축적과 분석을 통해 최적의 히트펌프 선정과 운용 가이드라인 제시가 가능할 것으로 기대됨
     * 유사한 사이트로는 에너지 모니터링 플랫폼 PVOutput.org가 있으며, 태양광 발전 시스템의 발전량 데이터를 수집, 공유하고 있음
     * 개별 공급업체의 홍보성 자료에 의존하지 않고 실제 사용자의 운전 데이터를 기반으로 한 객관적 성능 비교가 가능해진다는 점이 주요 장점임

        Hacker News 의견

     * 열 펌프의 많은 장점에도 불구하고 설치 비용이 높고, 많은 작업이 필요하며, 단열 보강이 필요하고, 보일러를 단순히 대체하기 어려운 등의 단점이 있음
     * 샤워 배수의 열을 회수하여 차가운 물을 예열하는 배수열 회수 시스템은 간단하고 저렴하며 설치가 쉬우면서도 에너지 소비의 상당 부분을 차지하는 샤워 폐열의 50% 정도를 회수할 수 있음
     * 열펌프를 설치하되 샤워기에 열교환기를 먼저 설치하는 것이 좋음
     * 표에 대한 흥분이 있지만 Training, Source, MID 등의 용어 설명이 부족하고, emonHub라는 기기에서 수집된 정보를 집계한 것으로 보이나 약어 해석에 어려움이 있음
     * 문서 하단에 열펌프 관련 가이드가 숨겨져 있음
     * 열펌프는 1의 에너지를 사용해 4의 이득을 얻는 물리학의 힘이 작용하는 놀라운 기술임
     * 연중 극히 추운 며칠을 제외하고는 효과적으로 작동함
     * 열펌프로 전환 후 단열 보강에 가장 큰 비용이 들었으나 온도가 일정해지고 외풍이 없어짐
     * 비용 회수보다는 옳은 일이라는 생각으로 시공함
     * Rheem 열펌프 온수기는 성능이 좋지 않아 Arctic사의 공기열 펌프 시스템과 통합하는 방안을 고려해볼 만함
     * 바닥 복사난방을 위한 별도의 소형 유닛이 필요함
     * 북미에서 판매되는 공기 대 공기, 공기 대 물 등 거의 모든 시스템의 인증 성능 등급 데이터를 확인할 수 있음
     * 열펌프 시장에 저품질 제품이 범람하는 상황임
     * 사용 효율성/친환경성뿐 아니라 제품 자체의 효율성/친환경성도 고려해야 함
     * 매년 60%의 난방 에너지를 절약하더라도 5~10년마다 새 열펌프를 만드는데 필요한 에너지를 고려해야 함
     * 상용 부품과 라즈베리 파이 등을 기반으로 오픈 소스 열펌프 개발 노력이 필요함
     * 많은 UK 기반 시스템이 Heat Geek 교육을 받은 설치자에 의해 설치됨
     * Heat Geek은 가스 난방 설치자의 공기-물 열펌프 설치 교육 부족을 메우기 위해 노력 중
     * 잘못 설치된 열펌프를 수리한 Skill Builder와의 동영상 시리즈에서 열펌프에 대한 흥미로운 정보를 제공함
     * 북미에서는 ASHP.neep.org에서 열펌프를 비교하는 것이 좋음
     * 마케팅 허위 광고 없이 독립적인 테스트를 통해 외부 온도에 따른 COP 등 효율성과 기술 데이터를 쉽게 비교할 수 있음
     * 독일에도 Bafa 목록을 기반으로 열펌프 목록을 필터링하고 정렬할 수 있는 유용한 사이트가 있음
     * EU는 EU에서 판매되는 거의 모든 전기제품의 에너지 등급 DB를 보유하고 있음
     * 일부 데이터는 부정확하고 에너지 등급이 성능과 일치하지 않는 경우가 많음
     * 열펌프는 실내기와 실외기로 구성되며 상호 교환 가능한 모델이 많아 복잡함
"
"https://news.hada.io/topic?id=14256","Double-entry bookkeeping을 방향성 그래프로 표현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Double-entry bookkeeping을 방향성 그래프로 표현

   다음은 회계를 그래프 관점에서 설명한 글을 요약 정리한 내용입니다.

기본 개념 소개

     * 회계(Accounting)의 핵심은 세어 셀 수 있는 것들을 시간에 따라 추적하는 것임. 현대 회계는 주로 돈을 추적하는데 관심이 있음.
     * 장부(Ledger)는 거래내역(Entry)의 모음임.
     * 거래내역은 계정(Account)에서 발생한 거래를 기록한 것임.
     * 계정의 잔액(Balance)은 특정 시점의 계정에 있는 돈의 양임.

단식부기(Single-Entry Bookkeeping)

     * 단식부기는 각 계정별로 별도의 장부를 두고 한 번에 하나의 계정에 영향을 미치는 거래를 기록하는 간단한 시스템임.
     * 단식부기에서는 잔액만 업데이트 하기 때문에 계정의 잔액 변화 내역을 추적하기 어려움.

복식부기(Double-Entry Bookkeeping)

     * 복식부기는 거래를 여러 개의 거래내역으로 기록하는 회계 시스템임.
     * 거래내역은 차변(Debit)과 대변(Credit)으로 구성됨.
          + 차변은 계정으로 들어오는 돈을 나타냄.
          + 대변은 계정에서 나가는 돈을 나타냄.
     * 거래(Transaction)는 여러 계정에 영향을 미치는 관련 거래내역을 그룹화한 것임.
     * 복식부기의 기본 원칙은 모든 거래에서 차변과 대변의 합계가 같아야 한다는 것임. 이를 통해 시스템의 총 금액이 거래 후에도 일정하게 유지됨.

그래프로 복식부기 이해하기

     * 복식부기는 방향성 그래프(Directed Graph)로 모델링 할 수 있음.
          + 계정은 그래프의 노드(Node)임.
          + 대변 거래내역은 금액과 함께 이 노드에서 나가는 아웃고잉 엣지(Outgoing Edge)임.
          + 차변 거래내역은 다른 노드로 흐르는 금액과 함께 인커밍 엣지(Incoming Edge)임.
     * 거래는 엣지 집합에 대한 조건(아웃고잉 엣지 합 = 인커밍 엣지 합)을 적용한 것임.
     * 계정의 잔액은 인커밍 엣지의 금액 합계에서 아웃고잉 엣지의 금액을 뺀 값임.

GN⁺의 의견

     * 그래프 관점에서 복식부기를 이해하는 것은 회계 개념을 직관적으로 만드는 좋은 접근법임. 대차대조표, 손익계산서, 현금흐름표 등이 이 그래프의 시각화에 불과하다는 것을 깨닫게 됨.
     * 자산, 부채, 자본, 수익, 비용 등의 범주는 그래프의 노드 그룹일 뿐이며, 대변이나 차변이 잔액을 증가시키는지 이해하기가 쉬워짐.
     * 이런 접근은 회계를 개발자에게 덜 위협적이고 더 이해하기 쉽게 만드는 좋은 방법이 될 수 있음.
     * 이 글의 저자처럼 나도 시각적 사고를 좋아해서 이런 설명이 크게 와닿음. 특히 복식부기를 배울 때 헷갈리는 대변/차변 개념을 그래프로 이해하니 명쾌해짐.
     * Beancount, hledger 등 plain text accounting 도구를 사용하여 이런 개념을 실제로 적용해 볼 수 있을 듯함.

        Hacker News 의견

   요약:
     * Double-entry bookkeeping에서 ""Alice에게 한 줄, Bob에게 한 줄"" 같은 설명은 너무 단순화되어 핵심을 놓치고 있음. 한 거래의 각 당사자별로 두 개의 입력이 필요하다는 것이 중요함.
     * 회계는 아름답고 영향력이 큼. 소수의 공식과 명세서만으로 모든 조직의 상황을 비교 가능한 방식으로 표현 가능함. 수학과 문자 언어의 기원이기도 함.
     * ""차변(Debit)""과 ""대변(Credit)"" 용어를 버리면 복식부기가 이해하기 쉬움. 회계 등식(자산=부채+자본)이 항상 맞아야 하는 것이 핵심임.
     * 거래 내역을 저장하고 계정은 그로부터 계산하는 것이 더 단순함. 은행 명세서에 익숙한 계정 중심 사고에서 벗어나 현금 흐름 중심으로 생각해야 함.
     * David P. Ellerman은 ""Pacioli group""이라 부르는 것에 기반한 수학적 회계 접근법을 제시함.
     * Double-entry bookkeeping을 방향성 있는 그래프로 보는 것은 흥미로운 관점이지만, 실제 업무에 도움될지는 의문임. 수백 년간 유용했던 용어를 바꾸는 것은 혼란만 가중시킬 수 있음.
"
"https://news.hada.io/topic?id=14229","Android, 안드로이드 기기 및 소지품을 찾을수 있는 Find My Device 기능 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Android, 안드로이드 기기 및 소지품을 찾을수 있는 Find My Device 기능 출시

     * 오늘부터 미국과 캐나다를 시작으로 전 세계 Android 기기에 모두 새로운 Find My Device가 출시됨
          + 분실된 Android 기기와 기타 소지품을 쉽게 찾을 수 있도록 도움을 줌
     * 10억 대 이상의 Android 기기로 구성된 새로운 크라우드소싱 네트워크를 통해 Find My Device는 분실된 Android 기기와 일상용품을 빠르고 안전하게 찾는데 도움을 줄 수 있음
     * 이를 시도해볼 수 있는 5가지 방법이 있음

1. 오프라인 기기 찾기

     * 호환되는 Android 폰과 태블릿을 앱에서 벨 소리를 울리거나 지도에서 위치를 확인하여 찾을 수 있음. 오프라인 상태에서도 가능
     * 특수한 Pixel 하드웨어 덕분에 Pixel 8과 8 Pro 소유자는 전원이 꺼져 있거나 배터리가 방전된 경우에도 기기를 찾을 수 있음

2. 호환되는 Bluetooth 태그로 일상용품 추적하기

     * 5월부터 Find My Device 앱에서 Chipolo와 Pebblebee의 Bluetooth 트래커 태그를 사용하여 키, 지갑, 여행 가방 등의 일상용품을 찾을 수 있음
     * Find My Device 네트워크를 위해 특별히 제작된 이러한 태그는 Android와 iOS에서 원치 않는 추적으로부터 보호하기 위해 알 수 없는 트래커 경고와 호환될 것임
     * 올해 후반에는 eufy, Jio, Motorola 등의 추가 Bluetooth 태그도 출시 예정

3. 근처 아이템 찾기

     * 찾고 있는 것이 바로 코앞에 있는 경우가 종종 있음
     * 분실한 기기 가까이에 있지만 정확한 위치를 파악하는데 도움이 필요하다면 ""Find nearby"" 버튼이 나타나 기기가 어디에 숨겨져 있는지 정확히 알려줌
     * 5월에 Bluetooth 태그가 출시되면 이 기능을 사용하여 지갑이나 열쇠와 같은 일상용품도 찾을 수 있음

4. Nest로 집에 있는 기기 정확히 찾기

     * 대부분의 경우 키나 휴대폰과 같은 일상용품을 바로 집에서 잃어버림
     * 이제 Find My Device 앱은 분실한 기기가 가정용 Nest 기기와 얼마나 가까운지 보여주어 쉬운 참조점을 제공함

5. 액세서리를 친구 및 가족과 공유

     * 모두가 앱에서 액세서리를 살펴볼 수 있도록 액세서리를 공유할 수 있음
     * 예를 들어, 룸메이트와 집 열쇠를 공유하거나, 친구와 TV 리모컨을 공유하거나, 여행 친구와 여행 가방을 공유하여 무언가 분실되었을 때 쉽게 역할을 나누어 해결할 수 있음
     * Find My Device는 기본적으로 안전하고 사생활 보호를 염두에 두고 설계되었음
     * Find My Device 네트워크에 내장된 다중 보호 기능은 사용자의 안전을 지키고 개인 정보를 보호하는 동시에 Find My Device 네트워크에 연결된 기기를 제어할 수 있도록 해줌. 여기에는 위치 데이터의 종단 간 암호화와 집계된 기기 위치 보고가 포함되며, 이는 원치 않는 추적으로부터 집이나 개인 위치로 다시 추적되는 것을 방지하는 최초의 안전 기능임
     * 새로운 Find My Device는 Android 9 이상을 실행하는 기기에서 작동함
     * 그리고 JBL, Sony 등의 헤드폰에 제공될 소프트웨어 업데이트를 기대해 보기 바람. 이들은 곧 Find My Device 네트워크에 합류할 예정임.

GN⁺의 의견

     * Find My Device는 Apple의 Find My와 유사한 기능으로 보이며, Google이 이제서야 이런 기능을 네이티브로 지원하게 된 것으로 보임. 사실 이런 기능이 필요한 시점이 한참 지난 감이 있음
     * 기존에는 Google의 Find My Device 앱이 있었지만 Google 계정에 로그인된 자신의 Android 기기만 찾을 수 있었음. 이제는 Bluetooth 태그를 지원하여 그 범위가 더 넓어짐
     * Bluetooth 태그를 찾는 기능은 Apple의 AirTag, Samsung의 Galaxy SmartTag 등 이미 시장에 나와있는 솔루션들이 있음. Google은 자체 Bluetooth 태그를 내놓는 대신 Chipolo, Pebblebee 등 서드파티 업체들과 협력하는 전략을 택한 것으로 보임
     * 이런 종류의 트래킹 기술이 프라이버시 침해 우려가 있는 만큼, Google도 이에 대한 보안과 프라이버시 보호에 신경쓴 것으로 보임. 하지만 아직 구체적으로 어떤 방식인지는 밝혀지지 않음
     * 아직 한국에서는 지원되지 않는 것으로 보이며, 초기에는 Pixel 시리즈 등 Google의 자체 기기를 중심으로 서비스될 것으로 예상됨. 타사 제조사 기기들이 얼마나 적극적으로 지원할지는 미지수

   GN⁺ 의 LLM을 GPT4 에서 Claude로 바꿨는데, 의견 쪽이 훨씬 보기 좋네요.
   기사 내용상 한국 언급이 없어서 지원되지 않는 것까지 명시했군요.
"
"https://news.hada.io/topic?id=14314","GPT 토큰 5억 개 학습 후 얻은 교훈들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GPT 토큰 5억 개 학습 후 얻은 교훈들

GPT 사용에서 간결한 프롬프트가 더 나은 결과를 제공함

     * GPT는 이미 상식으로 알고 있는 내용을 프롬프트에 과도하게 명시하면 오히려 혼란스러워함
     * 예를 들어, 텍스트에서 언급된 주(state)를 분류하는 작업에서 50개 주 목록을 제공하는 것보다 단순히 주 이름을 요청하는 것이 더 정확한 결과를 냄

OpenAI의 chat API만으로도 충분히 다양하고 강력한 기능 구현이 가능함

     * Langchain 등 추가적인 도구 없이 chat API만 사용하여 JSON 추출 등 필요한 기능을 간단히 구현
     * GPT 모델 업그레이드 시에도 코드베이스의 문자열 하나만 수정하면 됨
     * OpenAI API의 에러 처리와 입력 길이 제한 등을 위한 간단한 로직만 추가하면 됨

GPT가 아무것도 찾지 못하는 경우를 처리하는 것이 어려움

     * ""아무것도 찾지 못하면 빈 값을 리턴하라""는 프롬프트에서 GPT는 종종 헛것을 만들어내거나 자신감이 부족해짐
     * 입력이 비어있을 때 GPT에 프롬프트를 보내지 않도록 하는 것이 해결책

GPT는 제한된 길이의 출력만 생성할 수 있음

     * GPT-4의 입력 제한은 128k 토큰이지만 출력 제한은 4k 토큰에 불과함
     * JSON 객체 목록을 요청할 때 GPT는 10개 이상의 아이템을 안정적으로 생성하기 어려움

벡터 데이터베이스와 RAG/임베딩은 일반적인 용도에는 큰 도움이 되지 않음

     * 검색 이외의 용도로는 RAG가 잘 동작하지 않음
     * 관련성 판단의 어려움, 데이터 격리 문제, 사용자 만족도 저하 등의 이유로 실용성이 떨어짐
     * 일반적인 검색에는 GPT를 사용한 패싯 검색이나 복잡한 쿼리 생성이 더 적합함

GPT는 사실상 환각(hallucination)을 만들어내지 않음

     * 주어진 텍스트에서 정보를 추출하는 작업에서 GPT는 매우 신뢰할만한 결과를 제공함
     * 다만 텍스트에 정보가 없는 경우에는 헛것을 만들어낼 수 있음
     * 따라서 충분한 컨텍스트를 제공하고 GPT의 응답을 잘 다루는 것이 중요함

GN⁺의 의견

     * 트랜스포머 모델과 웹 데이터, 대규모 인프라만으로는 AGI에 도달하기 어려울 것으로 보임
     * GPT-4는 분명 유용하지만, 그 이상의 발전을 위해서는 모델 아키텍처 자체의 혁신이 필요할 듯함
     * OpenAI 이외의 대안들은 아직 GPT에 미치지 못하는 것 같고, 결국 GPT의 버전업에 주목해야 할 것
     * GPT-5의 성능은 GPT-4 대비 혁신적인 수준은 아닐 것으로 예상됨. 비용 대비 효용이 한계에 다다른 듯함
     * 따라서 당분간은 GPT-4를 활용하여 최적의 프롬프트 설계와 응용에 집중하는 것이 현실적인 선택으로 보임

        Hacker News 의견

     * 한 팀에서 한 달에 50억 이상의 토큰을 처리하고 있으며, 이를 관리하는 엔지니어링 매니저의 경험을 공유함.
          + Langchain 등 많은 추상화가 시기상조이며, 프롬프트는 단순히 API 호출이므로 특별한 것으로 취급하기보다는 일반적인 코드로 작성하는 것이 더 쉬움.
          + 요약은 견고하지만 추론은 어려우며, 특히 LLM이 문맥을 이해하고 확신이 없을 때 말하는 것이 어려움.
          + 게임 체인저이지만 세상의 종말은 아니며, 일부 직업에 큰 영향을 미치겠지만 인터넷처럼 획기적인 것은 아니고 힘을 증폭시키는 역할을 할 것임.
     * 개인 작문 앱에서 OpenAI 모델을 사용한 경험을 공유함.
          + Haskell을 언급한 최근 2년 간의 초안 노트를 찾는 등의 지능형 검색 기능을 구현하려 했으나, ChatGPT에게 구조화된 JSON 데이터를 반환하도록 요청하는 것은 일부만 작동함.
          + 대신 데이터를 SQLite 데이터베이스에 넣고 ChatGPT에게 스키마를 보내 원하는 것을 반환하는 쿼리를 작성하도록 요청하는 것이 더 잘 작동함.
     * 더 나은 프롬프트를 사용하면 더 저렴한 모델을 사용할 수 있음.
          + LLM에게 부드러운 출구(sufficient information이 없을 경우 가설을 세울 수 있지만 명확히 언급하고 근거와 논리적 기반을 제시하도록 요청)를 제공한 다음 자체 응답을 평가하도록 요청함.
     * JSON 모드가 필요하지 않은 이유에 대해 궁금해함.
     * 규칙이 텍스트에 적용되지 않을 경우 원본 텍스트를 변경 없이 반환하도록 프롬프트를 테스트했으나, ChatGPT는 ""The original text without any changes""라는 리터럴 문자열을 반환함.
     * GPT는 매우 멋지지만 모호할수록 품질과 일반화가 향상된다는 해석에는 강하게 동의하지 않음.
          + 자연어는 GPT에 가장 가능성 있는 출력이며, 개발자는 GPT가 잘하는 것에 더 의존했을 뿐임.
          + 간단한 작업으로도 GPT를 실패하게 만들 수 있으며, GPT가 매핑을 ""이해""한다는 것 자체가 고차 패턴 매칭을 암시함.
     * GPT-4가 1년 전 모델임에도 불구하고 다른 LLM에 비해 훨씬 우수한 성능을 보이며, 사용 패턴에 따라 환각이 드물고 옳다는 것을 알 때 더 고집스러움.
     * 회사 이름을 추출할 때 텍스트에 회사가 없다면 임의의 회사를 제시하는 null 가설 문제가 있음.
          + 먼저 ""이 텍스트가 회사를 언급하는가?""를 물은 다음, 그렇다면 ""이 텍스트에서 회사 이름을 나열해 달라""고 요청하는 2단계 접근이 필요함.
     * GPT가 10개 이상의 항목을 안정적으로 반환하지 못하는 것은 프롬프트 문제일 뿐이며, JSON 키를 사용하면 최대 200개 항목을 정확한 순서로 반환할 수 있음.
     * 'null' 문제 해결을 위한 팁:
          + ""아무것도 반환하지 마라"" 대신 ""XYZ의 기본값을 반환하라""고 하고, 주 이름을 검색하는 것처럼 해당 기본값(XYZ)에 대한 텍스트 검색을 수행하면 됨.
          + 시스템 프롬프트를 사용하면 LLM이 X 역할을 하도록 할 수 있음.
     * 토큰 기반 잘림에 대한 마이크로 패키지를 소개함.
"
"https://news.hada.io/topic?id=14279","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   SQLD 시험을 준비하려 합니다. 단순히 시험 통과가 아니라 제대로 공부하기 위해서..
   시험은 여름이나 연말 쯤 볼것 같네요

   결혼식 및 풋살이요ㅎㅎ

   사이드 프로젝트 구상 및 물밑작업(?)

   드디어 듄2를 봅니다 내려가기 직전에 ㅎㅎ

   상견례갑니다..! 무슨 이야기를 해야 할까요..

   부모님들이 하시는 말씀 귀담아 듣기 + 리액션 + 예비 배우자 칭찬을 추천드립니다

   미뤄뒀던 발더스게이트3를 시작했습니다. 슬슬 짬내서 해보려고요.

   할아버지 생신이라 본가에 갑니다
   겨울옷을 다 빨래할 생각이예요
"
"https://news.hada.io/topic?id=14306","Show HN: Mazelit - 아내와 함께 출시한 첫 번째 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show HN: Mazelit - 아내와 함께 출시한 첫 번째 게임

한 커플의 인생 2막을 여는 도전, 게임 개발에 뛰어들다

     * 40대를 앞둔 부부가 Red Hat에서의 안정적인 직장을 그만두고 게임 회사를 설립하고 게임 개발을 배우기로 결심함
     * 1년간의 노력 끝에 드디어 첫 번째 작은 게임을 Steam에 출시하게 됨

출시한 게임 Mazelit 소개

     * Steam 스토어 페이지 링크: https://store.steampowered.com/app/2816120/Mazelit/
     * 8레벨까지 무료로 즐길 수 있는 데모 버전 제공 (정식 버전은 최대 80레벨)
     * 스토어 페이지나 게임 자체에 대한 피드백을 기다리고 있음

게임 개발 과정과 오픈소스 정신

     * Godot 4.2 엔진을 사용해 약 3개월 동안 개발했으며, 풀타임 직장을 병행하면서 작업함
     * 개발 중 많은 어려움을 겪었기에, 게임의 전체 소스 코드를 DLC로 제공하기로 결정
          + 게임 구현 방법을 배우거나, 게임을 모딩하거나, 다른 플랫폼으로 컴파일하는데 도움이 될 것으로 기대
          + 단, Steamworks SDK는 재배포할 수 없어 Steam에서 별도로 다운로드 받아야 함 (SDK 없이도 게임은 실행 가능)

GN⁺의 의견

     * 안정적인 직장을 그만두고 게임 개발이라는 새로운 도전을 시작한 것은 대단한 용기로 보입니다. 하지만 40대에 접어든 시기에 인생의 전환점을 맞이하는 것이 쉽지만은 않을 것 같네요. 게임 개발이 성공하기를 응원합니다.
     * 게임 개발 과정에서 겪은 어려움을 극복하고, 소스 코드까지 공개하는 것은 매우 의미있는 시도로 보입니다. 게임 개발을 처음 시작하는 사람들에게 좋은 학습 자료가 될 것 같아요. 다만 코드 품질 관리에도 신경써야 할 것 같네요.
     * Godot는 유니티나 언리얼에 비해 대중성이 떨어지는 게임 엔진인데, 이를 선택한 이유가 궁금합니다. 오픈소스여서 라이센스 비용 때문인지, 아니면 다른 장점이 있는건지 궁금하네요.
     * 게임의 장르가 퍼즐인 것 같은데, 이 장르는 이미 시장에 많은 게임들이 있어서 차별화가 쉽지 않을 것 같아요. 혹시 게임만의 독특한 매력 포인트가 있다면 어필해보는 것도 좋을 것 같습니다.
     * 전반적으로 개인 개발자가 퍼블리싱까지 하기에는 여러가지 어려움이 있을 것으로 예상됩니다. 특히 마케팅 측면에서 전문성이 부족할 수 있는데, 인디 개발자 커뮤니티의 도움을 받는 것도 방법이 될 수 있겠어요.

        Hacker News 의견

     * 게임 출시를 축하하며, 게임의 품질을 고려할 때 가격을 $9.99 정도로 올리는 것이 좋을 것이라는 의견이 있음
     * 게임 스크린샷을 보면 1년이라는 짧은 기간 내에 매우 완성도 높은 게임을 출시한 것으로 보임
     * 게임 소스코드를 보기 위해 구매했으나, Mac에서는 Steam을 통해 게임을 설치해야 소스코드를 볼 수 있어서 아쉬움
     * https://something.pink/ 웹사이트가 재미있게 잘 만들어졌으며, Privacy를 화장실로 표현한 것이 인상적임
     * 제한적인 라이선스로 소스코드를 DLC로 판매하는 것이 독특한 비즈니스 아이디어가 될 수 있음
          + 예를 들어 Rockstar가 GTA-5 소스코드를 $99.99에 판매하는 것을 상상해 볼 수 있음
     * 게임 출시는 어려운 결정이었을 것이며, 소스코드를 창의적인 방식으로 공개한 것을 축하함
          + 다만 적절한 라이선스를 적용해야 하며, 크레딧 없이 게임을 재배포하는 일이 발생할 수 있음에 주의해야 함
     * Godot으로 전환 중인 개발자로서 소스코드 공개에 감사함
     * Godot 사용 경험과 워크플로우에 대한 조언을 구하는 질문이 있음
     * 본인도 비슷한 상황이며 올 여름 게임 출시 예정이라고 함. 데모 버전을 플레이해 보겠다는 댓글이 있음
     * 게임을 구매했으며, Godot 사용 시 겪은 어려움에 대해 궁금해 함
     * 낮은 가격이 ""가치 없는 게임""으로 보일 수 있으므로 $10 정도로 가격을 올리고 할인을 하는 것이 좋겠다는 의견도 있음
"
"https://news.hada.io/topic?id=14311","FCC, 5G 우선순위 접속(패스트 레인) 제동 걸어야","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FCC, 5G 우선순위 접속(패스트 레인) 제동 걸어야

FCC의 새로운 Net Neutrality 규칙 초안의 문제점

     * FCC는 4월 25일에 인터넷 서비스 제공업체(ISP)에 대한 규제 권한을 회복하고, 트럼프 행정부에서 폐기한 연방 Net Neutrality 보호 규정을 복원하는 투표를 할 예정임
     * FCC가 4월 초에 공개한 규칙 초안에는 많은 부분이 환영할 만한 내용임
          + T-Mobile, AT&T, Verizon 등 모바일 사용자의 동영상 화질을 저하시켜온 이동통신사는 이를 중단해야 함
          + 캘리포니아 주의 Net Neutrality 법과 같은 주 정부 차원의 Net Neutrality 보호 규정을 유지하여 중첩적인 집행이 가능하도록 함
          + ISP가 데이터가 자사 네트워크에 진입하는 지점에서 Net Neutrality를 회피하기 어렵게 만듦
     * 그러나 큰 문제점이 있음: 제안된 규칙은 모바일 ISP가 애플리케이션을 선택하여 우선 처리하는 Fast Lane을 만들 수 있도록 허용함
          + Fast Lane에 들어간 앱은 일반적으로 성능이 더 좋아지고, 네트워크가 혼잡해지면 훨씬 더 잘 동작함

ISP의 Fast Lane 계획

     * T-Mobile, AT&T, Verizon은 화상회의, 게임, 동영상 등의 앱에 대해 5G Fast Lane을 만드는 방법을 테스트하고 있음
          + 5G의 기술적 특징인 Network Slicing을 사용하여, 일반 인터넷 트래픽과 분리된 전용 레인을 만듦
          + ISP가 부스트할 앱을 선택하고 제어함
     * FCC의 초안 명령은 앱 제공업체에 비용을 부과하지 않는 한 이러한 Fast Lane을 열어둠
     * 향후 ""한달에 $10의 향상된 화상회의"" 또는 ""24시간 우선 온라인 게임"" 같은 부가 서비스가 등장할 수 있음
     * ISP는 블로그, 보도자료, 컨퍼런스 등에서 이러한 노력과 계획을 공개적으로 이야기하고 있음

ISP가 제어하는 Fast Lane의 문제점

     * 이러한 종류의 ISP 제어 Fast Lane은 핵심 Net Neutrality 원칙을 위반하고, 사용자 선택을 제한하며, 경쟁을 왜곡하고, 스타트업을 방해하며, 플랫폼 지배력을 강화하는데 도움을 줌
     * Net Neutrality는 인터넷을 사용하는 우리가 ISP의 간섭없이 온라인에서 무엇을 할지 결정할 수 있다는 것을 의미함
          + ISP는 앱을 차단하거나 속도를 높이거나 늦추는 등의 방식으로 우리의 선택을 방해해서는 안됨
          + 앱은 공정한 경쟁의 장에서 경쟁해야 하며, ISP가 아닌 사용자가 어떤 앱이 성공할지 결정해야 함
     * ISP가 Fast Lane에 들어갈 앱을 결정하도록 허용하는 것은 이러한 원칙을 위반함
     * Fast Lane에 있는 앱과 그렇지 않은 앱 사이에는 성능 차이가 발생하며, 특히 네트워크가 혼잡할 때 일반 레인의 앱은 어려움을 겪음
     * 성능 차이는 사람들이 사이트에 머무는 시간, 지불하는 금액, 다시 방문할지 여부에 영향을 미침
     * ISP가 Fast Lane에 들어갈 앱을 선택하도록 허용하면 사용자가 아닌 ISP가 온라인에서 승자와 패자를 선택하게 됨
     * 유명한 앱이 Fast Lane에 들어가는 반면, Signal, 지역 뉴스, Mastodon, PeerTube, Dropout, Bandcamp 등 틈새 앱들은 배제될 가능성이 높음

의미있는 Net Neutrality 보호 규정의 필요성

     * 의미있는 Net Neutrality 보호 규정은 ISP가 앱의 속도를 높이거나 늦추는 것을 금지해야 함
          + ISP는 Fast Lane에 승자를 넣거나 Slow Lane에 패자를 넣음으로써 승자와 패자를 선택할 수 있음
          + 불리한 앱은 경쟁하기 어려워질 것임
     * 이는 논란의 여지가 없음
          + 오바마 대통령의 2014년 Net Neutrality 제안에는 이러한 보호 장치가 포함되어 있었음
          + 공화당이 제안한 Net Neutrality 법안에서도 ISP가 앱의 속도를 높이거나 늦추는 것을 금지했음
          + 2015년 Open Internet Order를 지지하고 2017년 폐지에 반대한 수백만 명의 미국인들은 Net Neutrality 보호 규정이 Fast Lane과 Slow Lane을 금지한다고 생각함

FCC 초안의 문제점과 개선 방안

     * FCC의 초안 명령은 다른 접근 방식을 취함
          + 10월에 FCC가 제안한 No-Throttling 규칙은 ISP가 앱의 속도를 늦추는 것을 명시적으로 금지했지만, 속도를 높이는 것도 금지하는지는 언급하지 않았음
     * 시민단체, 스타트업, 의회 의원들은 FCC에 No-Throttling 규칙이 ISP가 앱의 속도를 높이는 것도 금지한다는 점을 명확히 할 것을 요청했으나, 초안에는 반영되지 않았음
     * 초안은 일부 앱 속도 향상이 No-Throttling 규칙을 위반할 수 있음을 인정하면서도, FCC가 Fast Lane을 사례별로 검토할 것이라는 모호한 언어를 추가했음
     * 향후 특정 Fast Lane을 수용하거나 거부할 수 있는 최대한의 유연성을 FCC에 부여한 것임
     * 소비자 선호에 부응한다는 이유로 카테고리 내 인기 앱을 포함하는 Fast Lane을 만드는 것이 ""불합리한 차별""에 해당할지, Fast Lane에 없는 앱이 기술적으로 저하되거나 손상되어야만 위반이 되는 것인지 등을 예측하기 어려움
     * FCC가 어떤 종류의 Fast Lane이 No-Throttling 규칙을 위반한다고 판단할지 예측할 수 없음
          + 이는 ISP가 다양한 Fast Lane을 쏟아내고 FCC가 규칙을 집행하도록 도전장을 내밀 수 있는 빌미를 제공함
     * FCC는 4월 24일 투표에 앞서 초안 명령을 수정하고, No-Throttling 규칙이 ISP가 특정 앱이나 앱 종류에 대해 Fast Lane을 만드는 것도 금지한다는 점을 명확히 해야 함

GN⁺의 의견

     * Net Neutrality 원칙을 지키기 위해서는 Fast Lane과 Slow Lane 모두를 금지하는 명확한 규정이 필요해 보임. FCC의 초안처럼 Fast Lane에 대해서는 모호한 기준을 적용하는 것은 바람직하지 않음.
     * ISP가 특정 앱을 선별하여 Fast Lane을 제공하는 것은 인터넷 생태계의 공정한 경쟁을 저해하고 소비자의 선택권을 제한할 수 있음. 특히 자금력이 부족한 스타트업이나 비영리 서비스에 불리하게 작용할 것임.
     * 다만 일부 산업 영역에서는 network slicing을 활용한 트래픽 분리가 필요할 수 있음. 자율주행차의 데이터 전송이나 스타디움의 중계 같은 특수한 용도로 제한적인 적용은 가능할 것 같음.
     * 아직 투표일까지 시간이 남아있으니 시민사회와 기업들의 의견을 더 수렴하여 초안을 개선할 필요가 있어 보임. net neutrality가 잘 지켜질 수 있기를 기대함.

        Hacker News 의견

     * 미국과 캐나다의 인터넷 품질이 좋지 않은 가장 큰 이유는 독점 때문임. EU에서는 데이터 상한에 포함되지 않는 ""무료"" 액세스를 제공하는 유사한 ""향상된"" 액세스 제안이 있음.
     * ISP는 수십 년 동안 ""멍청한 파이프"" 이상이 되기 위해 노력해 왔지만 거의 아무도 원하지 않음. 수도 회사가 변기 물 내리는 것보다 물 한 잔에 더 많은 요금을 부과할 수 있다고 상상해 보라.
     * 호스팅, 금융 서비스 등 다른 곳에서도 중립성이 필요함. 이들은 오늘날 사회에서 생존에 필요한 유틸리티이므로 공공 운영되는 것처럼 취급되어야 함.
     * 기사는 네트워크 슬라이싱을 잘못 이해하고 있음. 네트워크 슬라이싱은 주파수가 아니라 용량을 예약함. 제로 레이팅과 트래픽 셰이핑은 앱을 선호하는 데 사용되어서는 안 됨.
     * 5G 경험은 LTE보다 엄격히 더 나쁨. 요청이 자주 중단되는 것처럼 보임.
     * 빠른 전송로는 제한된 백홀 대역폭으로 인해 5G의 가장 큰 장점임. 빠른 전송로를 제거하는 대신 ISP에 빠른 전송로에 대한 동등한 액세스를 제공하도록 강제해야 함.
     * 미국의 느린 도입 속도의 원인은 경쟁 부족이 아님. 인도, 중국, 일본은 2~3개 독점 체제에서도 2~4년 만에 전국적으로 5G를 구축했음. 문제는 FCC와 규제 기관의 상대적 무기력과 오래된 인프라 폐기 문제인 것 같음.
     * 동일한 전투를 몇 번이나 해야 하는가? 넷플릭스에 빠른 전송로가 있는 곳에서는 매일 저녁 6시 30분부터 10시 30분까지 인터넷을 사용할 수 없음.
     * 정치인들은 매우 반응적이며 무시할 수 없을 때까지 문제 해결을 주저함.
     * 더 많은 뉘앙스가 필요함. ISP가 돈을 받을 수 없다면 ISP에게 무엇이 있는가? ISP가 공정하고 합리적이며 차별적이지 않은 조건으로 누구나 그러한 전송로를 얻을 수 있도록 허용할 것인가? 아니면 ISP와 편안한 관계를 맺고 있는 회사만 선호할 것인가?
"
"https://news.hada.io/topic?id=14283","CUDA ~100줄로 Flash Attention 구현하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CUDA ~100줄로 Flash Attention 구현하기
"
"https://news.hada.io/topic?id=14274","MIT 라이선스 텍스트를 연주하는 AI 생성 슬픈 소녀와 피아노","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  MIT 라이선스 텍스트를 연주하는 AI 생성 슬픈 소녀와 피아노

        Hacker News 의견

     * AI 생성 음악은 훅이나 반복되는 멜로디가 없이 그저 중간 수준의 평범한 노래들임. AI가 이런 음악을 더 잘 만들수록 예술 분야에서는 더 독특하고 파격적인 음악이 등장할 것임.
     * 사진이 등장하면서 비현실적인 예술이 유행했듯이, 드럼 머신이 등장하면서 거친 드럼 사운드가 힙해진 것처럼, AI 음악의 단점으로 여겨지는 부분들이 새로운 장르를 만들어낼 수 있음.
     * 평범한 음악은 더 넘쳐나게 되고, 이는 평범한 음악을 하는 예술가들에게 타격을 줄 것임. 반면 인간만이 할 수 있는 음악은 더욱 독특해지고, AI 음악의 단점을 활용한 새로운 장르도 등장할 것임.
     * 음악과 예술, 패션은 결국 변화에 관한 것이며, 우리가 지금 만드는 것들은 이미 존재하는 것들과의 관계 속에서 의미를 갖게 됨. AI 음악은 수천 년에 걸친 대화에 한 마디를 보태는 것일 뿐임.
     * ChatGPT를 이용해 라이선스 문구를 시로 바꾸어보기도 함.
     * Suno는 훌륭하며, 디지털 음악의 본질은 '체계화된 숫자'라고 봄. AI를 어떻게 활용할 것인지에 대한 고민이 필요함.
     * AI와 함께 음악을 만드는 미래를 꿈꾸며 Glicol과 RaveForce 프로젝트를 진행 중임. Copilot이 라이브 코딩 퍼포먼스에 도움을 주기도 함.
     * Suno에는 Capybara나 Black Metal 버전의 음악 등 흥미로운 곡들이 많음.
     * 저작권법 조항을 AI가 노래하게 해서 예술가들을 조롱하는 듯한 인상을 주는 노래도 있음.
     * AI 음성은 일종의 플랜저나 로봇틱한 비브라토 효과가 계속 들리는데, 다른 악기에는 이런 문제가 없어서 의아함. 이게 특정 모델의 문제인지 음성 합성의 보편적 이슈인지 궁금해 하는 사람도 있음.
"
"https://news.hada.io/topic?id=14322","트리 쉐이킹, 원예학적으로 오도된 알고리즘 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     트리 쉐이킹, 원예학적으로 오도된 알고리즘 (2023)

WebAssembly의 한계와 Tree-shaking의 중요성

     * WebAssembly는 많은 관심과 기대에도 불구하고 웹에서는 제한적인 성공만 거둠
          + 포토샵과 같은 성공 사례도 있지만, 전반적으로 WebAssembly를 활용한 프로젝트는 많지 않음
          + 특히 DOM이 많이 사용되는 앱에서는 WebAssembly가 적합하지 않음
          + JavaScript와 WebAssembly의 프로그래밍 모델 차이가 주요 원인 중 하나
     * WebAssembly는 C나 Rust 같은 언어 외에는 크게 성공하지 못함
          + C#과 같은 언어는 가비지 컬렉터 등의 런타임을 함께 제공해야 하는 불편함이 있음
          + 하지만 참조 타입과 가비지 컬렉션을 지원하는 WebAssembly의 새로운 기능이 곧 도입될 예정이어서 상황이 개선될 것으로 기대됨

컴파일러의 코드 최적화 능력이 WebAssembly 성공의 핵심

     * WebAssembly가 웹에서 성공하기 위해서는 컴파일러가 작고 효율적인 코드를 생성할 수 있어야 함
          + 몇 킬로바이트 내외의 작은 파일 크기를 유지하는 것이 중요
          + 그렇지 못한 경우 과대 광고나 특정 사용자 기반에 의존할 수밖에 없음
     * JavaScript 세계에서는 번들러 등을 통해 코드 사이즈 최적화가 이루어지고 있음
          + Tree-shaking은 프로그램에서 실제 사용되는 함수와 데이터 타입만 포함시키는 기법
     * Tree-shaking은 horticultural, algorithmic 측면에서 부적절한 은유이기는 하지만 널리 사용되는 용어임

다른 언어에서의 Tree-shaking 현황

     * Go나 Python 등 런타임이 무거운 언어에서는 아직 Tree-shaking이 최적화되어 있지 않음
          + 가장 간단한 Go 프로그램도 WebAssembly로 컴파일하면 2MB 이상의 크기가 나옴
          + Python의 Pyodide 역시 20MB 정도의 파일을 다운로드 해야 함
     * 서버 환경에서는 바이너리 크기가 큰 문제가 되지 않기 때문
          + 모바일 등 제한된 환경을 위해서는 MicroPython, TinyGo 등의 경량화된 툴체인이 별도로 개발되기도 함
     * 웹 환경을 위한 언어 구현체는 기존의 것과 차이가 있을 수밖에 없음
          + DOM과 상호작용하는 것 자체가 특이한 환경이기 때문
          + ClojureScript의 경우 Clojure와의 차이점을 별도 문서화하고 있음

Tree-shaking 알고리즘에 대한 논의

     * 저자가 개발 중인 Hoot Scheme 컴파일러는 현재 70KB 내외의 Wasm 코드를 생성하고 있음
          + 함수(프로시저) 정의만 포함하는 것은 비교적 쉬움
          + 하지만 아래와 같은 몇 가지 어려운 점이 있음
     * letrec* 평가 모델에서는 바인딩이 재귀적이면서 순서가 있어 컴파일러가 분석하기 어려움
          + 레코드 타입의 경우 vtable 콜백이 많은 코드를 살려두게 만듦
     * display와 같이 다형성이 높은 함수를 사용하면 관련된 많은 코드가 포함됨
          + write-string 등 구체적인 함수를 사용하는 것이 나음
     * 최적의 Tree-shaking을 위해서는 flow analysis가 필요함
          + display에 bitvector 인자가 전달되지 않는다는 것을 알면 관련 코드를 제거할 수 있음
     * Python에서는 동적 디스패치, getattr 등의 동적 기능 때문에 더 어려움
          + Python의 모듈 구조도 Tree-shaking을 복잡하게 만드는 요인

요약

     * GC 지원으로 인해 WebAssembly에서 JavaScript 외의 언어로 DOM 프로그래밍이 가능해짐
     * 하지만 결과물의 크기를 충분히 작게 만들기 위해서는 각 언어 툴체인에 상당한 투자가 필요함
     * Tree-shaking 알고리즘을 적용한 별도의 툴체인 개발과 표준 라이브러리 최적화 등이 요구됨

GN⁺의 의견

     * WebAssembly가 GC를 지원하면서 웹 개발에 다양한 언어를 사용할 수 있게 되었지만, 기존 언어의 툴체인을 그대로 가져오기에는 어려움이 많아 보입니다. 웹 환경에 특화된 언어 구현과 최적화 기법이 개발되어야 할 것 같네요.
     * Tree-shaking이 동적 타이핑 언어에서 잘 동작하기 위해서는 정적 분석이 필수적일 것 같습니다. 하지만 Python 같은 언어는 동적 기능이 많아서 쉽지 않을 것 같아요. 차라리 처음부터 정적 분석에 유리한 언어를 새로 만드는 것도 방법이 될 수 있겠네요.
     * Hoot나 TinyGo 같은 실험적인 프로젝트들이 좋은 참고가 될 것 같습니다. 하지만 이런 프로젝트를 실제 제품에 적용하기에는 아직 시기상조일 수 있어요. 점진적으로 개선해 나가는 수밖에 없을 것 같네요.
     * 성능에 민감하지 않고 빠른 개발이 중요한 프로젝트라면 Pyodide 같은 것을 써볼 만 할 것 같습니다. 하지만 사용자 경험을 중시하는 제품이라면 현재로서는 JavaScript가 최선의 선택일 것 같아요.
     * WebAssembly 자체에 Tree-shaking 같은 기능을 넣는 것도 생각해 볼 수 있을 것 같네요. 하지만 언어에 따라 요구 사항이 다르기 때문에 쉽지는 않겠죠. 또 Tree-shaking을 잘 지원하는 언어가 나오면 오히려 그 언어로 코딩하는 것이 이득일 수도 있고요. WebAssembly와 프로그래밍 언어 간의 역할 분담이 어떻게 이루어질지 궁금하네요.

        Hacker News 의견

   요약하면 다음과 같습니다:
     * OpenEtG 프로젝트에서는 Rust로 작성된 WASM 바이너리 크기를 400KB 미만으로 유지하기 위해 다음과 같은 노력을 기울임
          + float 대신 고정 소수점 연산 사용
          + HashMap 대신 Vec 사용
          + 문자열 사용 최소화
          + 작은 할당자(talc) 사용
          + 의존성 최소화 (rand, fxhash만 사용)
          + 제네릭 다양성 피하기
          + 크기를 고려한 알고리즘 설계
     * Tree-shaking은 잘못된 명명법이며, Virgil 컴파일러에서는 이를 Reachability Analysis라고 부름. 컴파일 과정에서 main 진입점에서 탐색하여 도달 가능한 코드만 최종 바이너리에 포함시킴.
     * WasmGC 덕분에 Java와 Kotlin은 2-3KB 정도의 작은 WASM 바이너리를 생성할 수 있음. 하지만 API 선택에 주의해야 함.
     * WASM을 이용한 DOM 조작은 여전히 JS에 의존적임.
     * Tree Shaking 용어가 생겨난 이유는 Dead Code Elimination이 오래전부터 존재했기 때문임.
     * WASM의 코드 크기 문제는 언어 런타임과 표준 라이브러리를 모두 번들링해야 하기 때문에 발생함.
     * 이를 해결하기 위해 공유 라이브러리와 동적 링킹을 고려해볼 수 있음.
          + Pyodide는 동적 링킹을 지원하는 대표적인 예시
          + 브라우저가 인기 있는 언어 런타임을 미리 로드한다면, 웹 페이지에서 해당 런타임을 공유할 수 있음
     * Zig 언어는 작은 WASM 바이너리 생성에 적합함. 하지만 100KB 미만이라면 크기는 중요한 요소가 아님.
     * 내장 GC는 모든 앱에 중요한 것은 아니며, GC 없는 웹앱을 만드는 것이 좋음.
     * WASM을 사용하는 앱의 성공 요인은 여전히 성능 향상임.
     * ClojureScript, TypeScript, ReasonML 등 컴파일-투-JS 언어를 통해 오래전부터 JS 외의 언어로 DOM 프로그래밍을 해왔음.
     * asm.js와 emscripten을 통해 WASM 이전에도 C 기반 언어를 웹에서 컴파일해 사용했음.
     * Google Maps와 Google Earth는 WASM을 사용하는 대표적인 앱임.
"
"https://news.hada.io/topic?id=14267","Kobo, 컬러 전자책 리더기 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Kobo, 컬러 전자책 리더기 발표

     * Kobo에서 최초의 컬러 전자책 리더기인 Kobo Libra Colour와 Kobo Clara Colour를 출시함
          + E Ink의 최신 Kaledio 컬러 스크린 기술을 사용하며, 컬러로 콘텐츠를 볼 때는 300ppi 흑백 해상도에서 150ppi로 떨어짐
          + 은은한 파스텔 톤의 색상을 제공함
     * Kobo Libra Colour
          + 7인치 디스플레이를 가진 기존 Kobo Libra 2를 기반으로 함
          + 물리적 페이지 넘김 버튼, 광고 없는 잠금 화면, 더 많은 저장 공간 등의 기능 제공
          + Kobo Stylus 2와 호환되어 메모 작성 가능
          + 가격은 $219.99로 Kobo Libra 2보다 $30 비쌈 (스타일러스는 별도 구매, $69.99)
     * Kobo Clara Colour
          + 6인치 디스플레이와 IPX8 방수 디자인의 Kobo Clara 2E와 유사
          + 16GB 저장 공간과 개선된 프로세서 제공
          + 가격은 $149.99
     * Kobo Clara BW
          + 업그레이드된 흑백 버전의 Kobo Clara도 출시
          + 저장 공간과 프로세서 업그레이드
          + 가격은 $129.99
     * 모든 기기는 오늘부터 예약 주문이 가능하며 4월 30일에 출시될 예정임

GN+의 의견

     * Kobo가 드디어 컬러 전자책 리더기 시장에 뛰어들었음. 기존 Kindle의 컬러 버전인 Kindle Scribe와 경쟁 구도가 형성될 것으로 보임
     * E Ink의 Kalideo 컬러 스크린은 아직 색 재현력이 부족해 보이지만, 컬러 이북 시장 활성화에 기여할 것으로 기대됨
     * Kobo Libra의 스타일러스 지원은 흥미로운 기능이나, 별도 구매해야 한다는 점이 아쉬움. 번들로 제공되면 좋을 듯
     * Kobo Clara의 성능 개선은 반가운 소식. 기존 모델의 속도 문제가 해결되길 바람
     * 아직 컬러 이북 콘텐츠가 많지 않은 상황이라 당장의 실용성은 의문이나, 장기적으로는 컬러 전자책 시장을 선도할 잠재력이 엿보임

        Hacker News 의견

     * 컬러 e-ink 디스플레이는 일부 시나리오에서 유용하지만, 주로 흑백으로 사용할 것이라면 구매를 피하는 것이 좋음. 컬러 E Ink 화면의 주요 단점은 컬러 필터 레이어로 인해 일반 흑백 화면보다 어둡게 보이고 대비가 낮아 보이는 것임.
     * Kobo 전자책 리더기에 대한 사용자 경험:
          + Pocket 통합, 물리적 페이지 넘김 버튼, 따뜻한 야간조명 등이 훌륭함.
          + Amazon 생태계에 덜 묶여있다는 점도 장점.
          + 사전 기능이 부실하고 내장 번역 기능이 없다는 것이 단점이지만, 다른 장점들이 이를 상쇄함.
     * Kindle을 탈옥하고 KOReader를 설치하면 좋은 기능을 많이 사용할 수 있지만, 작업 과정이 복잡하고 Amazon의 OTA 업데이트로 KOReader가 삭제될 수 있음. Kobo가 KOReader를 지원하므로 차기 전자책 리더기로 고려중.
     * 기술 지식은 빠르게 쓸모없어짐. ImageMagick의 최고 성능 모노크롬 압축 방식은 1980년대 팩스 표준인 ""Group 4""임.
     * Kobo 애호가의 의견으로는 Kobo가 Amazon/B&N 중 최초로 컬러 전자책 리더기를 출시했지만, 색 재현력이 만화책을 읽을 만큼 좋지 않아 당장 구매할 계획은 없음. 흑백 텍스트의 PPI가 나빠지는 것을 감수하면서까지 책 표지나 하이라이트를 컬러로 보고 싶지는 않음.
     * Boox 컬러 전자책 리더기에 대한 긍정적인 사용 후기도 있음. 색상이 실제로 인상적이라고 함.
     * Kindle 하단의 전원 버튼 위치가 별로임. 누가 그렇게 설계했는지 이해할 수 없음.
     * E Ink사는 컬러 필터가 없어 전체 해상도와 더 나은 대비를 제공하는 ACeP라는 풀컬러 기술을 개발 중. Amazon도 ACeP 도입을 검토 중이라는 소문이 있음.
     * Kobo의 첫 컬러 리더기가 7인치여서 아쉬움. 컬러 전자책 리더기의 주된 장점은 PDF, 만화 등을 보는 것인데, 이는 큰 화면에서 더 유용함. 8인치 이상, 가급적 10.3인치를 기대했음. 컬러는 책 크기의 리더기에서는 장점이 약함. Kobo의 PDF 소프트웨어는 별로지만 써드파티 리더기로 개선 가능함.
"
"https://news.hada.io/topic?id=14335","Kate 에디터, 모든 플랫폼에서 사용 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Kate 에디터, 모든 플랫폼에서 사용 가능

Kate의 다양한 플랫폼 지원 현황

     * 2024년 4월 14일 기준으로 Kate는 다양한 운영체제를 지원하고 있음
          + Unix 계열 시스템에서 X11 또는 Wayland를 사용하는 경우 잘 지원됨
          + 주요 Linux 배포판이나 NixOS 같은 특수 배포판에서 바이너리 패키지로 제공됨
          + FreeBSD, OpenBSD 등 BSD 계열에서도 일반 패키지 시스템을 통해 설치 가능함
          + 소스에서 직접 빌드하는 것도 대부분 문제없이 가능함
     * Windows에서도 KDE 커뮤니티의 활동으로 Kate를 사용할 수 있게 됨
          + Windows 스토어에 공식 배포되며, Craft를 이용해 직접 개발도 가능함
          + 최신 버전의 빌드 상태 스크린샷이 제공됨
     * macOS에서도 빌드가 제공되며 Craft를 통해 개발 가능함
          + ARM 및 Intel Mac용 최신 빌드 설치 파일이 제공됨
     * 그 외 Haiku 등 다양한 데스크탑 OS에 대한 포팅 활동도 있음
          + Kate 팀에서 직접 작업하지는 않더라도 패치 등을 통합하는데 열려 있음
     * 도움을 줄 수 있는 방법
          + Linux, BSD 이외의 시스템에 대한 개발 및 테스트 참여
          + Windows, macOS 등에서 DBus 의존성 제거 작업

GN⁺의 의견

     * 오픈소스 프로젝트가 다양한 플랫폼을 지원하는 것은 쉽지 않은 일인데, Kate 팀의 노력이 돋보이는 내용임. 특히 상용 OS인 Windows와 macOS까지 적극 지원하는 모습이 인상적임.
     * 단순히 빌드만 제공하는 것이 아니라 직접 개발하는데 필요한 도구와 방법까지 안내하고 있어, 참여의 진입장벽을 낮추려 노력한 점이 좋아 보임.
     * 반면 모바일 OS인 Android나 iOS는 지원 계획이 없는 것으로 보임. 데스크탑 위주의 프로젝트라는 한계가 있어 보임. 텍스트 편집 분야에서 경쟁력을 가지려면 장기적으로는 모바일까지 고려해볼만 함.
     * DBus 의존성 제거와 같이 플랫폼별 특성을 반영해 최적화하려는 노력도 눈에 띔. 단순히 빌드만 지원하는 것이 아니라 네이티브에 가깝게 동작시키기 위한 노력으로 보임.
     * 텍스트 편집기 시장에서 이미 높은 점유율을 가진 VS Code, Sublime Text 등의 경쟁 제품이 있는 만큼, Kate만의 차별화 포인트를 잘 찾아내고 강화해 나가는 것이 중요해 보임. KDE/Qt 기반의 통합 개발 환경으로의 발전 가능성 등을 고민해볼만 함.

        Hacker News 의견

   다음은 해커뉴스 댓글들을 요약한 내용임:
     * Kate는 2004/2005년경 리눅스로 전환하게 된 주요 이유 중 하나였음. MySQL 개발 시 Windows에서는 무겁고 느린 MySQL Workbench를 사용해야 했지만, Linux에서는 Kate에서 SQL을 작성하고 내장 터미널에서 MySQL CLI를 실행하여 훨씬 빠른 개발이 가능했음.
     * Amarok이라는 MP3 플레이어도 리눅스 전환의 이유였음. 2002년경부터 사용자 취향에 기반한 무한 재생 목록, 라디오 등의 기능을 제공했는데, 이는 나중에 iTunes와 Spotify 등에 의해 복제되어 현재는 표준 기능으로 여겨짐.
     * Kate는 KDE에서 가장 인상 깊고 긍정적으로 발견한 초기 앱 중 하나였음. Windows 시절에 Notepad++가 했던 역할을 해주며, 파일 기반 작업 시 유용함.
     * 최근 Kate의 유일한 문제는 아이콘인데, 적절한 유틸리티라기보다는 쓸모없는 모바일 앱을 나타내는 것 같아 보임.
     * Kate는 높은 품질과 놀라운 기능으로 인해 존재하는 것에 감사함. 과거에는 UltraEdit 같은 것에 돈을 지불하고 라이선스로 싸워야 했음.
     * Kate는 몇 달 전, 완전히 사용자 정의된 프로세서의 어셈블리를 작성할 때 구문 강조 표시 등의 기능으로 VSCode/VSCodium보다 작업을 훨씬 쉽게 만들어줌.
     * KDE 개발자들은 비전이 훌륭함. KDE Connect 등을 통해 사용자 데이터를 동기화하는 OS 셸을 만들려는 것 같음. KDE Plasma는 와닿지 않지만 KDE 애플리케이션은 응답성 때문에 리눅스에서 항상 선택했음.
     * KDE 도구 체인과 Plasma를 좋아하며 매월 기부함. Gnome의 독선적인 디자인보다 훨씬 유용함.
     * Kate는 리눅스에서 첫 번째 코드 편집기였으며, PHP와 Python을 배우는 데 사용함. 기여자들에게 감사하며 인생에 영향을 미쳤음.
     * Kate를 사랑함. Windows에서 일할 때도 설치했음. 다중 커서와 훌륭한 검색 및 바꾸기 기능이 필요했음. 기본 테마에 문제가 있었지만 나이틀리 빌드로 해결함.
"
"https://news.hada.io/topic?id=14273","Chronon - AirBnb가 공개한 오픈소스 ML 피쳐 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Chronon - AirBnb가 공개한 오픈소스 ML 피쳐 플랫폼

     * 머신러닝을 위한 데이터 파이프라인을 쉽게 구축, 배포, 관리 및 모니터링할 수 있는 오픈소스 엔드투엔드 피처 플랫폼
     * 현재 Airbnb 내 모든 주요 ML 애플리케이션과 Stripe의 주요 사용 사례에 사용되고 있음

주요 기능

     * 다양한 소스에서 데이터 수집 가능 : 이벤트 스트림, DB 테이블 스냅샷, 변경 데이터 스트림, 서비스 엔드포인트, 웨어하우스 테이블 등을 천천히 변화하는 차원, 팩트 또는 차원 테이블로 모델링하여 사용 가능
     * 온라인 및 오프라인 컨텍스트에서 결과 생성 : 온라인에서는 확장 가능한 저지연 엔드포인트로, 오프라인에서는 학습 데이터 생성을 위한 hive 테이블로 제공
     * 실시간 또는 배치 정확도 선택 가능 :
          + 결과를 Temporal 또는 Snapshot 정확도로 구성 가능
          + Temporal은 온라인 컨텍스트에서 실시간으로 피처 값을 업데이트하고 오프라인 컨텍스트에서 특정 시점에 맞는 피처를 생성하는 것을 의미
          + Snapshot 정확도는 자정에 하루에 한 번 피처가 업데이트되는 것을 의미
     * 원시 데이터에서 학습 데이터셋 백필 가능 : 모델 학습을 위해 몇 달 동안 피처 로그가 쌓이기를 기다릴 필요 없이 가능
     * 강력한 Python API 제공 : 데이터 소스 유형, 신선도, 컨텍스트 등을 API 수준 추상화로 제공하며, group-by, join, select 등 직관적인 SQL 기본 요소와 강력한 개선 기능을 조합하여 사용 가능
     * 자동화된 피처 모니터링 : 학습 데이터 품질 이해, 학습-서빙 불일치 측정, 피처 드리프트 모니터링 등을 위한 모니터링 파이프라인 자동 생성 가능

개발 배경

     * Chronon은 ML 실무자들이 모델링 자체보다 모델에 동력을 공급하는 데이터 관리에 대부분의 시간을 소비하는 일반적인 고충을 해소하기 위해 개발

  기존 접근 방식의 한계

    1. 오프라인-온라인 복제 방식
          + ML 실무자는 데이터 웨어하우스의 데이터로 모델을 학습시킨 다음, 온라인 환경에서 해당 피처를 복제하는 방법을 모색함
          + 장점: 데이터 소스와 대규모 데이터 변환을 위한 강력한 도구 등 데이터 웨어하우스를 최대한 활용할 수 있음
          + 단점: 온라인 추론을 위한 모델 피처를 제공할 명확한 방법이 없어 불일치와 레이블 누수가 발생하여 모델 성능에 심각한 영향을 미침
    2. 로깅 및 대기 방식
          + ML 실무자는 모델 추론이 실행될 온라인 서빙 환경에서 사용 가능한 데이터로 시작하여, 관련 피처를 데이터 웨어하우스에 로깅함
          + 충분한 데이터가 축적되면 로그에서 모델을 학습시키고 동일한 데이터로 서빙함
          + 장점: 일관성이 보장되고 누수 가능성이 낮음
          + 단점: 긴 대기 시간으로 인해 변화하는 사용자 행동에 신속하게 대응하기 어려움

  Chronon의 접근 방식

     * Chronon은 ML 실무자가 피처를 한 번만 정의하면 모델 학습을 위한 오프라인 흐름과 모델 추론을 위한 온라인 흐름 모두에 동력을 공급할 수 있게 해줌
     * 또한 피처 체이닝, 관측 가능성, 데이터 품질, 피처 공유 및 관리를 위한 강력한 도구를 제공함
     * 이를 통해 기존 접근 방식의 장점은 살리면서 단점은 보완할 수 있게 됨
"
"https://news.hada.io/topic?id=14323","Show HN: 웹페이지를 Markdown으로 정리 및 변환해주는 도구 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: 웹페이지를 Markdown으로 정리 및 변환해주는 도구 제작

        Hacker News 의견

   요약하면 아래와 같음:
     * 웹 페이지를 마크다운으로 변환하는 도구를 개발하면서 부하 관리, 무료 서비스 지속 가능성 등에 대한 고민이 있음
     * 웹 페이지 마크다운 변환 시 중요한 문제는 다음과 같음:
         1. 페이지 콘텐츠의 철저한 스크래핑 (높은 재현율)
         2. 광고/보조 콘텐츠 제거 (높은 정밀도)
         3. 올바른 레이아웃/섹션 유형 추출 (포맷팅)
     * 기존 오픈소스 도구들(Trafilatura, Newspaper4k, python-readability 등)이 일정 수준 이상의 성능을 보여줌. 차별화 포인트나 개선점이 궁금함
     * 쿠키 메시지가 뜨는 사이트의 경우, 실제 콘텐츠 대신 쿠키 관련 내용만 파싱되는 이슈가 있음 (예: cnbc.com)
     * GPT를 활용한 이미지 다운로드, 필터링 등의 아이디어가 좋음
     * 유사한 도구들 소개:
          + url2text.com: JS로 렌더링된 HTML, 메타데이터, 스크린샷 등을 함께 추출 가능
          + firecrawl.dev: 단일 페이지 뿐만 아니라 사이트 전체 크롤링 기능 제공
          + substack-ai.vercel.app: Substack 뉴스레터 콘텐츠 추출에 특화
          + content-parser.com: 마크다운, HTML, 텍스트, PDF 등 다양한 형식 지원
     * pandoc과 같은 범용 문서 변환 도구로도 유사한 기능 구현 가능
     * 대부분의 도구가 Mozilla의 readability 프로젝트를 활용해 개발됨
"
"https://news.hada.io/topic?id=14342","전국 T-Mobile 직원들, SIM 불법 스와핑 대가로 현금 제안 받아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                전국 T-Mobile 직원들, SIM 불법 스와핑 대가로 현금 제안 받아

     * T-Mobile 직원들이 불법적으로 SIM을 스왑하는 대가로 현금을 받는 제안을 받고 있음
          + 나쁜 행위자가 T-Mobile 직원들에게 연락하여 SIM 스왑 당 $300를 제안하고 있음
          + 이 제안은 다양한 지역 번호에서 텔레그램으로 연락하라고 하며, T-Mobile 직원 디렉토리에서 번호를 획득했다고 주장함
          + Reddit의 여러 게시물과 The Mobile Report에 제보한 개인들에 따르면 전국의 T-Mobile 직원들이 영향을 받고 있음
     * 직원들의 개인 정보 유출 경로에 대한 의문
          + 나쁜 행위자가 어떻게 직원 전화번호를 입수했는지가 가장 큰 문제임
          + 영향을 받은 직원 중 일부는 수개월 전부터 회사에서 일하지 않은 전직 직원들도 포함되어 있어, 몇 달 전의 정보일 가능성이 높음
          + 기업 직원이 포함된 것으로 보아 Connectivity Source 유출 사건과는 다른 데이터 출처로 보임
          + T-Mobile은 시스템 침해는 없었으며 불법 행위를 교사하는 메시지를 계속 조사 중이라고 답변함
     * 고객에 대한 영향과 예방책
          + 범죄자들이 여전히 SIM 스와핑을 돈벌이 수단으로 보고 있다는 것은 기업들의 예방 노력이 부족함을 의미함
          + 많은 직원들에게 제안이 간 만큼 일부가 수락할 가능성이 있어 고객 계정과 자금이 위험에 처할 수 있음
          + 고객은 2단계 인증을 SMS 대신 앱 기반으로 하고, T-Mobile 계정에 SIM 보호 기능을 활성화하는 등 예방책을 취할 수 있음
          + 은행이나 암호화폐 지갑에서 SMS만 지원한다면 서비스 전환을 고려해야 함
     * 최근 데이터 유출로 악명 높은 통신사에서 새로운 유출이 아니길 희망함
          + 가장 좋은 시나리오는 9월 유출 사건의 영향을 받은 것이지만, 새로운 유출일 가능성도 있음
          + 새로운 정보가 나오는대로 The Mobile Report에서 계속 업데이트할 예정임

GN⁺의 의견

     * SIM 스와핑은 새로운 문제는 아니지만, 통신사 직원을 대상으로 한 조직적인 시도는 이례적임. 내부자 위협에 대한 통신사의 보안 대책 강화가 필요해 보임
     * 통신 3사 고객 대부분이 2단계 인증으로 SMS를 사용하고 있어 잠재적 피해 규모가 큼. 고객 인식 제고와 함께 기술적 보완책 마련이 시급함
     * T-Mobile은 최근 잦은 고객정보 유출로 신뢰도가 하락한 상태라 이번 사태로 인한 타격이 클 것으로 보임. 철저한 진상 조사와 재발 방지 대책 마련이 필요함
     * 직원 정보 유출 경로에 대해서는 내부자 소행 가능성을 배제할 수 없음. 특히 이직한 전직 직원 정보까지 포함된 것을 고려하면 의심스러운 부분이 있음
     * 단순히 통신사 차원을 넘어 SIM 스와핑을 법적으로 규제하고 처벌 수위를 높일 필요가 있음. 피해 규모에 비해 처벌이 약해 범죄의 동기가 되고 있음

        Hacker News 의견

     * T-Mobile이 직원을 해고하기 위해 가짜 SMS를 보내는 것은 비윤리적이고 논란의 여지가 있음
     * 최근 T-Mobile 데이터 유출로 인해 범죄자들이 직원 전화번호를 대량으로 입수하여 SIM 스와핑을 유도하는 새로운 공격 기법이 등장함
     * SIM 스와핑 문제 해결을 위해서는 고객 본인 확인 절차 강화가 필요하나, 미국에는 보편적인 신분증 제도가 없어 어려움
     * 전화번호가 디지털 생활의 신뢰 기반이 되는 근본적 문제가 있음. Passkey 등 OS 레벨 개선이 도움이 될 수 있음
     * SMS OTP는 공격 벡터를 더 취약한 것으로 교체하는 것임에도 여전히 많이 사용되고 있음
     * FCC에서 2024년 7월부터 SIM 스와핑 방지 규칙을 시행 예정이나, 내부자 공격까지 막을 수 있을지는 불확실함
     * MFA에 대한 법적 정의와 표준 마련이 필요함. SMS는 2SA로 분류하고, MFA는 하드웨어 인증 방식으로 제한하는 것이 바람직함
     * 통신사 고객 서비스 담당자의 낮은 급여와 강력한 권한, 취약한 접근 통제 등이 내부자 공격의 원인이 되고 있음
     * SIM 문제 해결 후에도 다른 취약점을 노릴 것이므로 지속적인 보안 강화가 필요함
     * 사용자가 동의한 경우에 한해, 기존 SIM이 오프라인 상태가 되어야만 새 SIM으로 변경 가능하도록 하는 방안을 고려해 볼 수 있음
"
"https://news.hada.io/topic?id=14352","FDA 승인 받은 기기, 이명 치료에 새로운 방안 제시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FDA 승인 받은 기기, 이명 치료에 새로운 방안 제시

혀를 자극하는 장치로 이명 증상 완화를 경험한 한 음악가의 사례

     * 미국에서 2천5백만 명 이상의 성인이 이명이라는 증상을 앓고 있음
     * 이명은 스트레스를 유발하고 공황 상태를 초래하기도 하며 관리가 어려운 증상임
     * 청력 손실, 큰 소음 노출, 바이러스 감염 등 다양한 요인이 이명 발병에 기여함
     * 완치법은 없지만 보청기, 명상 요법 등 증상 완화를 위한 여러 전략이 있음
     * 최근 FDA가 승인한 새로운 옵션으로 전기 자극으로 혀를 자극해 이명을 치료하는 기기가 등장함

내슈빌에 사는 가수 겸 작곡가 빅토리아 뱅크스의 사례

     * 약 3년 전 이명 증상이 발생했고, 매미 소리 같은 소음이 머릿속에서 들렸음
     * 노래 부르기와 음악 듣기가 어려워졌고 절망적인 상황이었음
     * 식이 보조제나 운동으로는 효과가 없었음
     * FDA 승인을 받은 Lenire라는 기기에 대해 알게 되어 시도해 보기로 함

이명 치료 기기 Lenire

     * 혀를 전기적으로 자극하는 스테인리스 전극이 있는 플라스틱 마우스피스로 구성됨
     * 이명에 대해 이런 종류의 기기로는 최초로 FDA 승인을 받음
     * 임상 시험 참여자의 84%가 Lenire 사용 후 증상이 크게 감소했다고 보고됨
     * 최소 3개월 이상 이명 증상이 지속된 사람이 좋은 대상이 될 수 있음
     * 사용시 혀에서 간지러운 느낌이 들고, 헤드폰을 통해 일련의 음과 파도 소리가 들림
     * 뇌의 관심을 이명에서 다른 곳으로 돌림으로써 작용함
     * 혀의 신경과 귀로 듣는 소리가 동시에 자극되어 뇌에서 이명에 고착되어 있던 '스포트라이트'를 다른 곳으로 옮겨줌
     * 12주간 매일 1시간씩 사용한 후 거의 무시할 수 있을 정도로 이명이 호전되었음

기기 사용의 효과와 한계

     * 임상시험 참여자의 84%가 Lenire 사용 후 이명이 크게 개선되었다고 보고함
     * 수면, 통제감, 안녕감, 삶의 질 등에 미치는 영향을 설문으로 평가했을 때 평균 14점 개선됨
     * 모든 사람에게 효과가 있는 것은 아니지만 다른 방법으로 잘 조절되지 않는 이명 환자에게 우선적으로 추천되는 옵션이 되고 있음
     * 약 4,000달러의 비용이 드는 것이 단점임. 보험 적용은 아직 안됨
     * 1년 이상의 장기 효과에 대해서는 아직 잘 알려지지 않음
     * 청력 손실이 동반된 경우 보청기만으로도 이명 개선 효과가 있는 경우가 많음

이명 관리를 위한 다른 방법들

     * 청력 검사를 통해 보청기 사용 여부 판단이 우선되어야 함
     * 보청기와 Lenire를 함께 사용해 효과를 본 사례도 있음
     * 수영 등 마음챙김 명상도 이명 증상 완화에 도움이 될 수 있음
     * 이명의 소리는 오고 가는 것이며, 시간이 지나며 점차 무시할 수 있게 되는 경우가 많음

GN⁺의 의견

     * 이명은 청각 과민이나 청력 손실과 함께 발생하는 경우가 많아 포괄적인 청각 건강 관리가 필요해 보임. 예를 들어 소음 노출을 피하고, 정기적인 청력 검사를 받는 것이 도움될 것임.
     * Lenire와 같은 의료기기는 아직 장기적인 효과와 안전성에 대한 연구가 부족한 만큼, 의사와 상담을 통해 신중하게 사용을 결정해야 할 것으로 보임. 다만 기존 치료법으로 잘 조절되지 않는 난치성 이명 환자에게는 새로운 희망이 될 수 있겠음.
     * 기사에서처럼 이명 증상 관리를 위해 다각도로 접근하는 것이 필요해 보임. 보청기, 인지행동치료, 마음챙김 명상 등을 병행하는 것이 효과적일 것임. 무엇보다 이명에 대한 불안과 공포심을 줄이는 것이 중요할 것으로 생각됨.

        Hacker News 의견

   주요 내용을 요약하면 다음과 같음:
     * 어떤 사람은 이명을 조절하기 위해 20년 동안 ""바이오피드백""이라는 정신적 시각화 기법을 사용해 왔음. 소리 풍경을 오실로스코프의 선처럼 상상하고, 이명을 나타내는 날카로운 스파이크를 서서히 누르는 거대한 손을 상상함.
     * 고등학교와 대학교 때 레스토랑에서 바이올린을 많이 연주했던 사람은, 1년 후 갑자기 왼쪽 귀에 하루 동안 청력 손실이 생기고 이명이 뒤따랐음. 이명은 끔찍하고 무서웠으며, 스테로이드 주사를 맞은 후 2-3개월 내에 가라앉았음.
     * 어떤 사람의 이명은 코로나19로 인해 발생했음. 몇 년 전 연구에서는 혀를 자극하는 것에 초점을 맞췄고, 치료 후 1년 동안 완화된다고 설명했음.
     * 어떤 사람은 이명이 있지만 생각하지 않으면 무시할 수 있음. 어릴 때부터 유전적 청각 장애로 이명이 있었고, ""기차 소리를 듣는 것""으로 묘사했음.
     * 오랫동안 이명을 겪은 사람은 더 이상 이명을 알아차리지 못하지만, 다시 완전한 ""침묵""을 경험하는 것이 좋을 것임.
     * 15세에 이명이 생겨 시간이 지나면서 뇌가 소리를 걸러냈지만, 높은 음역대의 음절이 완전히 걸러져 높은 음역대의 목소리를 이해하는 데 어려움이 생김.
     * Dr. Susan Shore가 유사한 장치를 개발 중이며, 현재 FDA 승인을 위해 노력하고 있음.
"
"https://news.hada.io/topic?id=14234","진정한 개방형 LLM, Hello OLMo 등장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       진정한 개방형 LLM, Hello OLMo 등장

     * AI2에서 OLMo 7B 모델을 공개함. 이는 사전 학습 데이터와 학습 코드를 함께 공개한 진정한 의미의 오픈 소스 대규모 언어 모델임.
          + 연구자와 개발자가 최고의 오픈 모델을 사용하여 집단적으로 언어 모델 과학을 발전시킬 수 있게 함.
          + Meta의 AI 과학자 Yann LeCun은 오픈 소스 커뮤니티가 AI의 미래를 가장 빠르고 효과적으로 구축할 수 있다고 언급함.
     * OLMo 프레임워크의 주요 특징:
          + 완전한 사전 학습 데이터: AI2의 Dolma 데이터셋을 사용하며, 학습 데이터를 생성하는 코드도 포함됨.
          + 학습 코드와 모델 가중치: 7B 스케일의 4가지 모델 변종에 대한 전체 모델 가중치와 추론 코드, 학습 지표, 학습 로그 등을 제공함.
          + 평가: Catwalk 프로젝트 아래 500개 이상의 체크포인트와 평가 코드 등 개발에 사용된 평가 도구를 공개함.
     * OLMo를 통해 AI 연구자와 개발자는 다음과 같은 경험을 할 수 있음:
          + 더 정확한 분석: 학습 데이터에 대한 완전한 통찰력을 바탕으로 더 빠르게 작업할 수 있음.
          + 탄소 배출 감소: 전체 학습 및 평가 생태계를 공개함으로써 중복 개발을 줄일 수 있음.
          + 지속적인 결과: 모델과 데이터셋을 공개하여 이전 모델에서 배우고 구축할 수 있게 함.
     * AMD, CSC(Lumi Supercomputer), University of Washington, Databricks 등과의 협력을 통해 OLMo 개발이 가능했음.

GN⁺의 의견

     * AI 모델의 투명성 향상을 위해 학습 데이터와 코드를 공개한 것은 큰 의미가 있어 보임. 하지만 데이터 편향성 등의 문제가 있을 수 있으므로 이에 대한 검토도 필요할 것 같음.
     * 오픈소스 언어모델 생태계 활성화로 기술 발전이 가속화될 것으로 보임. 다만 대형 IT 기업들의 폐쇄형 AI 모델과의 경쟁에서 어떤 성과를 낼 수 있을지 지켜볼 필요가 있음.
     * AI 개발에 필요한 막대한 컴퓨팅 자원 확보를 위해 다양한 기관과의 협력이 매우 중요해 보임. 학계-산업계 간 협력 모델로서 좋은 본보기가 될 것 같음.
     * OLMo를 통해 언어모델의 작동 원리에 대한 과학적 연구가 활발해질 것으로 기대됨. 이는 보다 안전하고 신뢰할 수 있는 AI 개발로 이어질 수 있을 것임.

        Hacker News 의견

     * LLM 사용 시 저자에게 어떤 용도인지 알려야 함. 라이선스에 명시된 내용임.
     * 파생물을 만들 경우 AI2에 Derivative Impact Report를 제출하거나 유사한 정보를 서면으로 제공해야 함. AI2는 이 정보를 대중에게 공개할 수 있음.
     * 파생물의 사용 목적에 대해 투명하게 공개해야 함.
     * Derivative Impact Report는 선의의 공개를 처벌하기 위한 것이 아님. 관련 소송을 제기할 경우 계약이 즉시 종료됨.
     * 진정한 오픈소스 모델 중 하나임. 대부분은 가중치만 공개하는 반면 이는 end-to-end로 개방적임.
     * Mistral 7b와의 비교가 언급되지 않은 점이 의외임.
     * ""The Pile""은 학습 데이터에 포함되지 않은 듯함. 법적으로 다른 ""오픈"" LLM들보다 건전할 수 있음.
     * 데이터셋에 적용된 위험 분류의 실제 의미는 무엇일까? 라이선스 페이지에서 설명이 부족함. 학습 데이터셋으로 사용하기에 라이선스 측면에서 호환되지 않을 위험을 의미하는 것일까?
     * 작은 크기에서도 놀라울 정도로 빠른 속도를 보임.
     * AMD GPU로 성공적으로 학습된 주목할 만한 첫 LLM 중 하나일까? 과정이 얼마나 원활했는지, 어려움은 없었는지 궁금함.
     * 이 모델과 유사한 모델들에서 추론 시 ""반복 토큰"" 문제가 발생함. 맥락 윈도우가 중간에서 길 때 자주 발생.
     * 학습 중에 일종의 지역 최소값에 빠지는 것 같음. 온도가 영향을 주는 것 같지만 완전히 해결하진 못함.
     * 블로그 포스트에 비교 표가 없는 것이 아쉬움.
     * 개인적으로 가장 흥미로운 LLM임. 검색을 대체하고 심지어 연구를 수행하여 최종 답변을 제공할 수 있는 강력한 도구임. OpenAI, Anthropic 등의 폐쇄형 모델은 감사할 수 없음.
     * 실제 LLM에 편향이 주입된 사례가 있음 (예: Google Gemini의 비밀 메타 프롬프트로 인한 역사적으로 부정확한 이미지 생성)
     * AI2의 접근 방식이 마음에 듦. 가중치뿐 아니라 학습 소스 코드, 데이터, 평가 도구 등을 모두 아파치 라이선스로 공유함.
     * Llama 같은 오픈 가중치 모델이 OpenAI 등의 폐쇄형 모델을 따라잡고 있음. OLMo 같은 진정한 오픈 모델도 계속 발전하기를 바람.
     * 오픈소스 AI 개발을 규제로 막지 않기를 희망함. 미래에 사회의 언론 수단이 될 수 있어 규제는 표현의 자유 제한과 비슷함. 경쟁 압력 감소는 혁신을 해칠 것임.
     * 2개월 전 글임.
"
"https://news.hada.io/topic?id=14250","시리즈 B, 카나리아 새들의 떼죽음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          시리즈 B, 카나리아 새들의 떼죽음

   시리즈B 스타트업에서 반복적으로 볼 수 있는 문제 혹은 모습에 관해 작성한 글.

   회사 안팎에서 위험을 감지해 내부에 이야기하지만 잘 받아들여지지 않는 것이 반복되어 상처를 입고 떠나는 구성원들을 카나리아로 비유를 들어 설명함.

   스위스 치즈 모델을 비유로 들어, 문제의 원인이 복합적이어서 혼자서는 문제를 해결할 수 없으며 조직적 차원에서 문제를 인식, 해결하려는 노력이 필요함을 강조함.
"
