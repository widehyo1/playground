"https://news.hada.io/topic?id=13661","Golang을 사용하여 나를 살아있게 하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Golang을 사용하여 나를 살아있게 하는 방법

골랭(Golang)을 사용하여 나를 살아있게 하는 방법

     * 골랭(Golang)을 활용하여 복잡한 의료 상태를 관리하는 방법에 대한 블로그 포스팅.
     * 타입 1 당뇨병을 진단받은 저자가 인슐린 주입량을 계산하고 혈당을 모니터링하는 과정을 설명함.
     * 혈당 모니터링 기기인 '리브레(Libre)'를 사용하고, 이를 통해 혈당 수치를 스마트폰으로 확인할 수 있음.

타입 1 당뇨병 간략 설명

     * 타입 1 당뇨병은 자가면역 질환으로 췌장이 인슐린을 거의 또는 전혀 생산하지 못함.
     * 인슐린은 탄수화물을 에너지로 전환하는 데 필수적인 호르몬으로, 인슐린 주사를 통해 보충해야 함.
     * 타입 1 당뇨병은 생활 방식과 관련이 없으며, 현재까지 치료법이 없음.

사건 관리로의 잠깐의 여정

     * 저자는 클라우드플레어(Cloudflare)에서 엔지니어링 매니저로 근무하며, 사건 관리 프로세스를 담당함.
     * 프로메테우스(Prometheus), 그라파나(Grafana), 알럿매니저(Alertmanager), 페이저듀티(PagerDuty) 등의 도구를 사용하여 사건을 감지하고 관리함.
     * 사건 관리자는 문제 해결을 위해 회사 내 다른 사람들을 적극적으로 동원할 수 있음.

타입 1 사건 관리

     * 혈당 모니터링 기기가 닫힌 소스이며 API나 SDK를 제공하지 않아 데이터를 추출하는 데 어려움이 있음.
     * '미아오미아오(Miao Miao)'라는 장치를 발견하여 '리브레' 기기 위에 장착하고, '토마토(Tomato)' 앱을 통해 혈당 데이터를 2분마다 전송함.
     * 구글 캘린더를 통해 애플 워치에서 혈당 수치를 볼 수 있는 기능도 발견함.

엔지니어링 솔루션

     * 골랭(Go)을 사용하여 간단한 에코 서버를 작성하고, 이를 통해 혈당 데이터를 받아 처리함.
     * 혈당 데이터를 게이지 메트릭으로 설정하고, 그라파나 대시보드를 통해 실시간으로 혈당 수치를 모니터링함.
     * 텔레그램 챗봇을 구축하여 혈당 그래프에 주석을 추가할 수 있게 함.

경고 설정

     * 혈당 수치가 특정 수준 이하로 떨어질 경우 경고를 발생시키는 크론 작업을 작성함.
     * 인시던트.io를 사용하여 경고 시스템을 구축하고, 필요한 경우 에스컬레이션 정책을 설정함.

다음 단계

     * 자동으로 사건을 종결하는 기능, 데이터베이스에 저장된 혈당 데이터 분석, 추가 그래프 및 측정치 추가 등의 기능을 계획 중이거나 이미 구현함.

GN⁺의 의견

     * 이 기사는 타입 1 당뇨병 환자가 자신의 상태를 관리하기 위해 기술을 활용하는 방법을 보여줌으로써, 기술이 어떻게 개인의 삶의 질을 향상시킬 수 있는지를 잘 보여줌.
     * 저자는 자신의 의료 상태를 관리하기 위해 클라우드플레어에서 사용하는 사건 관리 기술을 개인적인 문제 해결에 적용함으로써, 기술적 해결책이 얼마나 창의적으로 사용될 수 있는지를 보여줌.
     * 혈당 모니터링과 관련하여, 이미 시장에는 다양한 웨어러블 기기와 앱이 존재하지만, 저자가 개발한 시스템은 개인 맞춤형 솔루션으로서의 잠재력을 갖고 있음.
     * 이 기술을 도입할 때는 개인의 의료 데이터 보안과 개인정보 보호가 중요한 고려 사항이 될 것임.
     * 타입 1 당뇨병 환자들에게 이 기사는 자신의 상태를 관리하는 데 있어서 새로운 관점과 가능성을 제시함으로써 흥미를 끌 수 있음.

        Hacker News 의견

     * 댓글 작성자는 글쓴이의 글쓰기 스타일이 멋지고 읽는 것이 즐거웠음을 전하며, 자신이 침투 테스트(pentesting) 분야에서 일하고 있고, 동료 중에 1형 당뇨병을 앓고 있는 사람이 있어 글쓴이의 당뇨병에 대한 설명을 통해 동료가 매일 마주하는 도전을 이해하게 되었다고 함. 또한, 작성자는 6개월 전에 수면무호흡증(OSA) 진단을 받았고, 잠을 잘 때 기도 폐쇄를 방지하기 위해 일정 압력의 공기를 공급하는 기계(CPAP)를 사용해야 한다고 언급함. 이 기계는 1형 당뇨병만큼 중요하지는 않지만 예상보다 많은 데이터를 기록한다고 함. 작성자는 OSA를 위한 유사한 모니터링 장치나 더 심각한 경우를 위한 장치가 있는지 궁금해함.
     * 또 다른 댓글 작성자는 자신도 1형 당뇨병 환자로서, 자신의 혈당 데이터를 터미널의 상태 아이콘으로 표시하는 tmux 플러그인을 만들었다고 함. Dexcom CGM을 사용하고 있으며, 다른 장치에도 적용할 수 있도록 확장하고 싶어함. 관심이 있다면 확인해보라고 제안함.
     * 한 댓글 작성자는 GopherConSG에서 이야기를 나눈 Matt에 대해 언급하며, 데이터 소유권이 복잡한 문제라는 것을 깨달았다고 함. 데이터 제공업체(혈당 모니터링 회사)의 법적 책임이 많기 때문에 대기업들이 데이터를 공개하는 데 주저하는 것을 이해할 수 있다고 함. 반면 사용자가 자신의 데이터에 접근하지 못하는 것은 부당하다고 느낌.
     * 다른 댓글에서는 글쓴이가 오픈 소스 소프트웨어(Nightscout, xDrip 등)를 탐구하지 않은 이유에 대해 질문함. 이러한 문제들은 새로운 것이 아니며, 많은 사람들이 이미 더 많은 기능을 갖춘 솔루션으로 해결했다고 언급함.
     * 댓글 중 하나는 자신의 에코 서버를 작성하고 요청을 한 번에 하나씩 디버깅하는 대신 requestbin을 사용하는 것이 좋은 대안이라고 제안함. requestbin은 받은 모든 요청을 기록하고 선택한 응답을 반환할 수 있음.
     * 한 댓글 작성자는 기술을 사용하여 건강 문제를 추적하는 것이 자신에게 힘이 되었다고 말하며, 인슐린 펌프에 대한 생각을 물음. 당뇨병이 없는 사람에게는 명확하지 않은 인슐린 펌프의 제한이나 단점이 있는지 궁금해함.
     * 댓글 중 하나는 2023년 영국에서 열린 Open Data Camp에서 1형 당뇨병을 앓고 있는 참석자 두 명이 데이터 관점에서 많은 장치들이 얼마나 폐쇄적인지에 대해 이야기한 것에 대해 언급함. 특히 자신의 건강 데이터를 수집하는 장치들이라면 더욱 안타까움을 표함. CGM 장치들이 NHS에서 무료로 제공되며, 스마트폰 앱이 동반되어 있어 API를 역공학하여 원시 데이터에 접근할 수 있을 것으로 가정함. Dexcom은 API를 제공하지만 미국에 위치한 경우에만 작동함.
     * Scott Hanselman이 여러 해 동안 1형 당뇨병과 관련된 다양한 기술 해킹에 대해 블로그와 유튜브에 게시했다는 내용의 댓글이 있음. 그는 혈당 수치를 터미널 프롬프트에 표시하도록 해킹한 적이 있음.
     * 마지막 댓글에서는 글쓴이가 Dexcom과 같은 CGM(연속 혈당 모니터링) 장치에 대해 알아보라고 제안함. 작성자의 아내도 30년 동안 1형 당뇨병을 앓고 있으며, Dexcom CGM이 많은 문제를 개선해준다고 언급함.
"
"https://news.hada.io/topic?id=13558","애플, 전기차 개발 중단하고 팀을 생성형 AI로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     애플, 전기차 개발 중단하고 팀을 생성형 AI로 전환

     * Apple이 10년간의 노력 끝에 전기차 개발 프로젝트를 중단하기로 결정함.
     * 내부적으로 발표된 이 소식은 프로젝트에 참여하던 약 2,000명의 직원들을 놀라게 함
     * 프로젝트를 이끌던 최고운영책임자 Jeff Williams와 부사장 Kevin Lynch가 직원들에게 프로젝트 종료를 알림
     * 전기차 팀의 많은 직원들이 인공지능 부서로 이동할 예정이며, 이 부서는 John Giannandrea 부사장이 이끔

전기차 팀의 미래

     * 전기차 팀에는 수백 명의 하드웨어 엔지니어와 차량 디자이너가 포함되어 있었으며, 이들은 다른 Apple 팀에서 일할 기회를 가질 수 있음.
     * 일부 직원들은 해고될 수도 있으나, 구체적인 숫자는 불분명함.
     * 이 소식이 전해진 후 투자자들은 안도감을 표하며 Apple 주식을 매수, 주가가 상승함.

프로젝트 타이탄의 종말

     * Project Titan이라 불리던 이 프로젝트는 Apple을 새로운 산업 분야로 이끌 수 있는 매우 야심찬 시도였음.
     * 2014년경 시작된 이 프로젝트는 완전 자율주행 전기차 개발을 목표로 했으나, 시작부터 여러 어려움에 직면함.
     * 여러 차례 리더십과 전략 변경을 겪었으며, 최근에는 자율주행 기술의 난제를 해결하는 데 어려움을 겪음.

시장의 변화와 Apple의 결정

     * 전기차 시장은 최근 냉각되는 추세로, 높은 가격과 충전 인프라 부족으로 인해 주류 구매자들의 전환을 막음.
     * 자동차 제조사들은 EV 수요와 생산 병목 현상에 직면하여 하이브리드 차량 생산으로 전환 중임.
     * Apple의 최고 경영진은 최근 몇 주간 이 프로젝트를 종료하기로 결정함.

기타 Apple의 투자

     * Apple은 다른 분야에도 많은 투자를 지속하고 있으며, 지난 5년간 연구개발에 총 1130억 달러를 지출함.
     * 최근에는 Vision Pro 헤드셋을 출시하여 새로운 제품 카테고리를 선보임.

CarPlay 소프트웨어의 확장

     * Apple은 CarPlay 소프트웨어를 통해 자동차 산업에 이미 진출해 있으며, 이는 차량 제어 및 엔터테인먼트 시스템과 더 깊이 통합될 예정임.

인공지능에 집중

     * Bloomberg Intelligence 분석가들은 Apple이 전기차를 포기하고 인공지능에 자원을 집중하는 것이 장기적인 수익성 측면에서 좋은 전략적 움직임이라고 평가함.

GN⁺의 의견

     * Apple의 전기차 프로젝트 중단 결정은 자동차 산업에 큰 영향을 미칠 수 있으며, 기존 자동차 제조사들과의 경쟁 구도에 변화를 가져올 수 있음.
     * 이 결정은 Apple이 자사의 핵심 역량에 집중하고, 더 높은 수익성을 가진 분야로 자원을 재배치하려는 전략적 선택으로 볼 수 있음.
     * 인공지능 기술은 현재 기술 산업에서 가장 빠르게 성장하는 분야 중 하나로, Apple이 이 분야에 더 많은 투자를 할 것으로 예상됨.
     * Apple의 결정은 다른 기업들에게도 전기차 시장의 불확실성과 기술적 난제에 대한 경고 신호로 작용할 수 있음.

        Hacker News 의견

     * 애플의 자동차 프로젝트 종료 및 인공지능 부서로의 인력 이동
          + 자동차 팀(Special Projects Group, SPG)의 많은 직원들이 존 지안난드레아(John Giannandrea)가 이끄는 인공지능 부서로 이동하여 생성적 AI 프로젝트에 집중하게 됨.
          + 이 발표는 PR 스핀으로 느껴짐. 자동차 연구개발에 종사하는 사람들 중 생성적 AI 프로젝트에 적합한 인력은 매우 적어, '많은 직원들'이라는 표현은 과장된 것으로 보임.
          + 실질적으로는 대규모 해고를 내부 팀 재배치로 포장한 것으로 해석됨.
     * 애플 자동차 경쟁력에 대한 의문
          + 애플이 자동차 시장에서 재규어, 폴스타, 람보르기니와 같은 소규모 제조사들과 경쟁할 수 있을지, 혹은 포드, 마즈다, 혼다와 같은 대형 제조사들과 경쟁할 수 있을지 의문.
          + 인포테인먼트 시스템 제작 아이디어는 흥미롭지만, 자동차 제조사들이 그만큼의 제어권을 애플에게 넘길지 의심스러움.
          + 애플이 ADAS(첨단 운전자 보조 시스템)를 개발할 수 있지만, OEM(주문자 상표 부착 생산)이 기존에 익숙하고 협업하기 쉬운 다른 업체 대신 애플을 선택할 이유가 불분명.
          + 미국 시장에서 작은 도시형 자동차를 출시한다 해도, 스마트(Smart) 자동차가 미국에서 큰 성공을 거두지 못한 점을 고려할 때 성공 가능성에 의문.
          + 초기 아이디어는 자율 주행 자동차였지만, 개인용이나 플릿용 모두에서 애플이 선택받을 명확한 이유가 없어 보임.
     * 애플의 하드웨어 디자인 철학과 자동차 시장의 불일치
          + 애플의 하드웨어 디자인 철학이 자동차 소비자들의 요구와 일치하지 않는 것 같음.
          + 테슬라보다 덜 미니멀리스틱한 애플의 디자인을 소비자들이 받아들일지 의문.
          + 애플은 진짜 금속이나 유리를 사용하고, 통풍구를 숨기는 등의 디자인을 선호하는 반면, 자동차는 비용과 무게, 외관을 위해 가짜 재료를 자주 사용.
          + 자동차는 사람들이 많은 시간을 보내는 공간으로, 편안함을 최우선으로 하지만 애플은 외관을 위해 편안함을 희생하는 경우가 많음.
          + 애플 디자인은 과거의 재미와 기발함을 잃어버린 것 같음. 사이버트럭과 같은 독특한 디자인에 비해 애플 제품은 지루함.
     * 자동차 판매와 관련된 PR의 어려움
          + 성공적인 회사를 운영한다면, 자동차 판매와 같은 PR 문제나 정신적 스트레스를 유발할 수 있는 분야는 피하는 것이 좋음.
     * 애플 자동차 프로젝트 취소의 타당성
          + 프로젝트에 참여한 지인에 따르면, 출시까지 여러 해가 남아 있었고, 새로운 부사장이 맡을 때마다 프로젝트 방향을 바꾸며 진전을 상실했음.
          + 원래의 프로젝트(버스)나 첫 번째 수정안(고급 자동차)에 충실했다면 시기적으로 적절하게 출시할 수 있었을 것이나, 현재로서는 너무 늦은 감이 있음.
     * 애플의 프라이버시 중심 철학과 로컬 LLM의 기대
          + 애플이 프라이버시를 우선시하는 철학을 계속 유지하고, 기기 내에서 작동하는 LLM(Localized Language Model)을 제공하기를 희망함.
          + 노트북과 같은 주변 기기를 활용하여 휴대폰 배터리 소모 없이 처리할 수 있는 기술을 기대함.
     * 자동차 사업과 애플의 비즈니스 모델 불일치
          + 자동차 사업은 높은 비용과 낮은 마진을 요구하며, 애플의 비즈니스 방식과 일치하지 않음.
          + 새로운 자동차 회사를 창립하는 것과 기존의 고수익 비즈니스 그룹을 가지고 있으면서 자동차 사업을 추가하는 것은 다름.
          + 애플이 다른 사람들의 자동차에 소프트웨어를 판매하는 것이 더 높은 마진을 가져다줄 것임.
          + 프로젝트가 이렇게 오래 지속된 것에 놀라움을 표하며, 프로젝트에 참여했던 엔지니어와 연구원들에게는 안타까움을 느끼지만, 이 결정이 최선의 결과라고 생각함.
     * 생성적 AI로의 전환에 대한 의견
          + 애플이 생성적 AI 분야에서 매우 뒤처져 있어 구글이 혁신적으로 보일 정도임.
     * 안드로이드 측면에서 샤오미 자동차에 대한 관심
          + 안드로이드 측면에서 샤오미의 첫 전기차 SU7에 대한 관심을 표함.
     * 애플의 전기차 작업 취소와 AI로의 전환에 대한 반응
          + 애플이 전기차 작업을 취소한 것은 아마도 좋은 결정일 것임.
          + 전기차 작업보다 생성적 AI 프로젝트에 참여하는 것을 선호하지 않음.
          + 애플의 소프트웨어가 만족스럽지 않고, 하드웨어에서의 대담한 리스크를 감수하는 대신, 다른 인기 있는 제품의 저가 버전을 모방할 가능성이 있음.
"
"https://news.hada.io/topic?id=13595","GitHub에서 발견된 감염된 저장소 10만 개 이상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GitHub에서 발견된 감염된 저장소 10만 개 이상

GitHub에서 100,000개 이상의 감염된 저장소 발견

     * 보안 연구 및 데이터 과학 팀이 지난해 중반에 시작된 악의적인 저장소 혼동 캠페인이 대규모로 재등장함을 탐지함.
     * 이 공격은 개발자들이 알려진 신뢰할 수 있는 저장소와 유사해 보이지만 실제로는 악성 코드가 포함된 저장소를 사용할 때 100,000개 이상의 GitHub 저장소(그리고 추정컨대 수백만 개)에 영향을 미침.

저장소 혼동 공격이 어떻게 발생하는가?

     * 저장소 혼동 공격은 의존성 혼동 공격과 유사하게, 악의적인 행위자들이 대상이 진짜 버전 대신 악성 버전을 다운로드하도록 함.
     * 의존성 혼동 공격은 패키지 관리자의 작동 방식을 이용하는 반면, 저장소 혼동 공격은 사람들이 실수로 진짜 버전 대신 악성 버전을 선택하게 하는 것에 의존하며, 때로는 사회 공학 기법도 사용함.

악성 저장소가 사용될 때 발생하는 일

     * 의심 없이 개발자들이 악성 저장소를 사용하면, 숨겨진 페이로드가 7단계의 난독화를 풀고, 악성 파이썬 코드와 이후에 바이너리 실행 파일을 가져옴.
     * 악성 코드는 다양한 앱의 로그인 자격 증명, 브라우저 비밀번호 및 쿠키, 그리고 기타 기밀 데이터를 수집하여 악의적인 행위자의 C&C 서버로 전송하고 추가적인 악성 활동을 수행함.

GitHub에서의 자동화 영향

     * 대부분의 포크된 저장소는 GitHub에 의해 빠르게 제거되지만, 자동화 탐지는 많은 저장소를 놓치고 수동으로 업로드된 저장소는 생존함.
     * 전체 공격 체인이 대규모로 대부분 자동화되어 있기 때문에, 생존하는 1%는 여전히 수천 개의 악성 저장소를 의미함.

캠페인이 시작된 시기

     * 2023년 5월: Phylum이 처음 보고한 바에 따르면, 현재 페이로드의 초기 부분을 포함한 여러 악성 패키지가 PyPI에 업로드됨.
     * 2023년 7월 - 8월: PyPI가 악성 패키지를 제거하고 보안 커뮤니티가 그곳에 더 많은 관심을 기울이자, 이번에는 PyPI 패키지를 가져오는 대신 직접 페이로드를 전달하는 여러 악성 저장소가 GitHub에 업로드됨.
     * 2023년 11월 - 현재: 유사한 악성 페이로드를 포함하는 100,000개 이상의 저장소가 탐지되었으며, 그 수는 계속 증가하고 있음.

패키지 관리자에서 소스 코드 관리(SCM)로의 악성 소프트웨어 전환

     * 패키지 관리자와 SCM 플랫폼에서 관찰된 많은 사건들을 통해, 이 캠페인이 PyPI의 악성 패키지에서 GitHub의 악성 저장소로 전환된 것은 일반적인 추세를 반영하는 것으로 보임.

저장소 혼동에 대한 자신을 보호하는 방법

     * GitHub에 통보되어 대부분의 악성 저장소가 삭제되었지만, 캠페인은 계속되고 있으며, 공급망에 악성 코드를 주입하려는 공격이 점점 더 흔해지고 있음.
     * Apiiro에서는 연결된 코드베이스를 모니터링하는 악성 코드 탐지 시스템을 구축함.
     * 다양한 고급 기술을 사용하여 공격을 탐지하는데, 이는 LLM 기반 코드 분석, 코드를 완전한 실행 흐름 그래프로 분해, 정교한 휴리스틱 엔진, 동적 디코딩, 복호화 및 난독화 해제 등을 포함함.

GN⁺의 의견

     * 이 기사는 개발자들에게 GitHub 저장소를 사용할 때 주의해야 할 보안 위협을 알리는 중요한 정보를 제공함.
     * 악성 코드가 소프트웨어 공급망에 침투하는 방식을 이해함으로써, 개발자들과 보안 전문가들은 더 강력한 방어 메커니즘을 구축할 수 있음.
     * 이러한 공격은 개발자들이 신뢰할 수 있는 저장소를 선택하는 능력뿐만 아니라, CI/CD 구성의 정확성과 제3자 코드의 보안성에 대한 의존도를 강조함.
     * 비판적인 시각에서 볼 때, 이러한 공격은 GitHub와 같은 플랫폼의 자동화된 시스템과 대규모 저장소의 존재가 양날의 검이 될 수 있음을 보여줌.
     * 유사한 기능을 제공하는 보안 도구로는 SonarQube, Snyk, WhiteSource 등이 있으며, 이들은 코드의 취약점을 탐지하고 보안을 강화하는 데 도움을 줄 수 있음.
     * 이 기술을 도입하기 전에는 조직의 보안 정책과 호환성, 구현 비용, 그리고 팀원들의 기술적 역량을 고려해야 함.
     * 이 기술을 선택함으로써 얻을 수 있는 이점은 보안 강화와 위험 감소이지만, 잠재적인 단점으로는 새로운 시스템에 대한 학습 곡선과 관리의 복잡성이 있음.

        Hacker News 의견

     * 공개 저장소에서 코드를 가져올 때 주의해야 하며, 의존성 트리를 검증하는 것이 중요함. 이는 공개 저장소의 맬웨어가 언어 모델(Large Language Models, LLMs)과 같은 자동화 도구에 어떤 영향을 미칠지에 대한 질문을 제기함. 예를 들어, GitHub Copilot과 같은 도구가 코딩 질문에 대한 응답으로 실수로 맬웨어를 포함할 가능성이 있음.
     * GitHub가 Usenet이 실패한 것과 같은 방식으로 실패하고 있음을 지적함. 누구나 GitHub에 저장소를 만들 수 있으며, 공식 저장소와 스패머의 저장소를 구별할 방법이 없음. Amazon이 ""모든 것을 파는 상점""을 목표로 할 때, 대부분의 상품이 쓰레기라는 문제에 직면함. GitHub은 ""모두를 위한 저장소""인지, 아니면 ""이 코드를 신뢰할 수 있는가""에 대한 정체성을 확립해야 함.
     * 공급망 문제가 심각함을 토로함. npm 릴리스를 대상으로 하지 않지만, 프로젝트 모니터링을 위해 socket.dev를 사용하고 있음. BrowserBox 프로젝트는 약 800개의 의존성을 사용하며, 이 중 19개가 최상위 의존성임. 모든 의존성을 npm의 @browserbox 네임스페이스로 스냅샷하여 취약점을 추적하고 패치하는 방법을 고려 중임.
     * 개발자는 작업, 취미, 개인용으로 최소 세 개의 환경을 분리해야 함을 강조함. 신뢰할 수 있는 저장소와 소유자라도 샌드박스 가상 머신에서 코드를 실행하는 것이 현명함.
     * 작은 팀에서 많은 주간 다운로드를 받는 SDK를 개발하는 경우, snyk, aikido.dev, renovate 기반 솔루션 등을 평가 중임. 이러한 도구들이 문제를 해결하는 데 도움이 될지 명확하지 않으며, snyk에서 경험한 것처럼 많은 거짓 긍정을 처리하는 것은 어려움.
     * curl과 sudo를 사용한 쉘 스크립트 설치 방식이 곧 끝날지 궁금함을 표현함. 이 방식은 기사에서 언급된 감염된 소프트웨어와 밀접한 관련이 있음.
     * npm에서 --ignore-scripts 옵션을 사용하여 맬웨어 실행을 방지할 수 있음.
     * 1년 미만의 시간에 트로이 목마 바이러스가 포함된 저장소가 있었음을 언급함.
     * 보안 문제에 대한 최신 게시물이 LLM 스타트업에 자금을 제공하라는 광고로 이어짐을 비판함. 이러한 스타트업들이 보안 격차의 일부만을 해결할 수 있으며, 다수의 스타트업과 계약을 맺는 것이 비용과 통합 문제를 야기할 수 있음.
     * 지속적인 보안 보고에 따라 개발 환경의 보안을 점진적으로 개선하고 있음. VSCode 개발 컨테이너, GitHub Codespaces, OWASP 지침 읽기, socket.dev를 사용한 npm/파이썬 패키지 리뷰 등을 시도 중임.
"
"https://news.hada.io/topic?id=13588","Pingora - 네트워크 시스템 구축용 오픈소스 Rust 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Pingora - 네트워크 시스템 구축용 오픈소스 Rust 프레임워크

     * HTTP 프록시 서비스 구축을 지원하는 Rust 비동기 다중 스레드 프레임워크
     * 빠르고 안정적이며 프로그래밍 가능한 네트워크 구축을 위해 Cloudflare가 내부적으로 사용하던 프레임워크를 오픈소스로 공개
          + Cloudflare 트래픽의 상당부분을 처리하며 2022년 9월에 소개한 이후 거의 1000조건에 달하는 요청을 처리해 왔음

프록시 및 클라이언트와 서버에 대한 빌딩 블록을 제공

     * HTTP/1 및 HTTP/2, TLS 또는 TCP/UDP 위에 서비스를 구축하기 위한 라이브러리와 API를 제공
     * 프록시로서는 HTTP/1 및 HTTP/2 E2E, gRPC 및 웹소켓 프록시를 지원하며 HTTP/3 지원도 로드맵에 있음
     * 사용자 정의 가능한 로드 밸런싱 및 장애 조치 전략도 함께 제공
     * OpenSSL 과 BoringSSL 라이브러리를 둘 다 지원하며, FIPS 준수 및 Post-Quantum Crypto 도 포함
     * 사용자가 서비스가 요청을 처리, 변환 및 전달하는 방법을 완전히 사용자 정의할 수 있도록 필터와 콜백을 제공
          + OpenResty의 ""*_by_lua"" 콜백과 직관적으로 매핑되므로 OpenResty 및 NGINX 사용자에게 특히 친숙함
     * 운영상 편의를 위해 단일 수신 요청을 삭제하지 않고 자체적으로 업그레이드할 수 있도록 가동 중지 시간 없이 단계적으로 다시 시작하는 기능을 제공
     * Syslog, Prometheus, Sentry, OpenTelemetry 및 기타 필수 관찰 도구와도 쉽게 통합
     * 이벤트 계산, 오류 처리 및 캐싱과 같은 일반적인 로직을 구현하는 몇가지 유틸리티도 포함

   GeekNews - cloudflare가 nginx를 걷어내고 Rust로 HTTP Proxy(Pingora)를 만들어서 사용
   https://news.hada.io/topic?id=7400
"
"https://news.hada.io/topic?id=13594","고보리눅스고보리눅스

GoboLinux 소개

     * GoboLinux는 전체 파일 시스템 계층 구조를 재정의하는 대체 리눅스 배포판임.
     * 패키지 데이터베이스가 필요 없는 시스템으로, 파일 시스템 자체가 데이터베이스 역할을 함.
     * 각 프로그램은 자신만의 디렉토리, 예를 들어 /Programs/LibX11/1.6.9 또는 /Programs/GCC/9.2.0에 위치함.

최신 소식

     * 새로운 GoboLinux 포럼이 Discourse에 의해 제공되며, 사용자와 개발자가 Gobo에 대해 이야기하고 서로 도움을 줄 수 있는 장소로, 이전의 메일링 리스트 등을 대체함.

다운로드

     * 현재 버전은 017이며, DVD, USB 드라이브에서 실행할 수 있는 라이브 환경을 제공하고 하드 드라이브에 설치할 수도 있음.

문서

     * GoboLinux는 다른 리눅스 배포판과 상당히 다르므로, 이에 대해 더 알아볼 것을 권장함.

커뮤니티

     * GoboLinux 커뮤니티의 주요 초점은 다음과 같음:
          + irc.libera.chat에서 운영되는 #gobolinux IRC 채널
          + 사용자와 개발자가 Gobo에 대해 이야기하고 서로 도움을 주는 GoboLinux 포럼
          + 모두가 기여할 수 있는 협업 문서 사이트인 GoboLinux 위키

GN⁺의 의견

     * GoboLinux는 기존 리눅스 배포판과 다른 독특한 파일 시스템 구조를 가지고 있어, 리눅스 사용자들에게 새로운 경험을 제공할 수 있음.
     * 파일 시스템을 데이터베이스로 사용하는 접근 방식은 패키지 관리를 더 직관적으로 만들 수 있지만, 기존 리눅스 사용자들에게는 적응이 필요할 수 있음.
     * 이러한 시스템은 파일 관리와 시스템 구성에 대한 명확한 이해를 제공하지만, 다른 배포판과의 호환성 문제나 사용자 커뮤니티의 지원 범위가 제한적일 수 있음.
     * GoboLinux의 커뮤니티 지원과 문서화는 사용자들이 시스템에 익숙해지고 문제를 해결하는 데 도움을 줄 수 있음.
     * 이 기술을 도입하기 전에, 사용자는 기존 시스템과의 호환성, 필요한 지원 수준, 그리고 커뮤니티의 활성도를 고려해야 함.

        Hacker News 의견

     * GoboLinux 디자인에 대한 반응이 강한 사람들을 위해, ""나는 무지하지 않다""라는 20년 된 문서에는 이러한 개념에 대한 흥미로운 배경과 이유가 담겨 있음. 처음의 반응은 완전히 사라지지는 않았지만, 이제는 그렇게 강하지 않음.

     ""나는 무지하지 않다"" 문서 링크: I am not clueless
     * GoboLinux의 아이디어가 주류 리눅스 커뮤니티에서 받아들여지지 않은 것이 아쉬움. 리눅스 파일시스템 구조는 완전히 혼란스러움.
     * GoboLinux는 전통적인 경로를 GoboLinux에 해당하는 경로로 매핑하여 유닉스 유산과의 호환성을 투명하게 유지함. /bin은 /System/Index/bin으로 링크되어 있고, /usr/bin, /usr/sbin 등 모든 ""바이너리"" 디렉토리가 같은 장소를 가리킴. 이는 일부 표준적인 배포판보다 더 호환성이 높다는 것을 의미함.
     * 파일시스템이 정말 필요하다면 라이브러리의 중복 복사본을 제거할 수 있음. 파일 수준의 중복성은 그 수준에서 해결되어야 함.
     * 이 프로젝트는 우리의 인지 부하를 크게 줄일 수 있는 잠재력을 가짐. 이미 20년간 진행된 프로젝트임을 알게 됨.
     * 디렉토리 이름의 첫 글자를 대문자로 쓰는 것은 좋지 않음. 경로를 탐색할 때 추가 작업이 되며, 특히 명령줄 사용 시 매번 Shift 키를 눌러야 하므로 번거로움.
     * GoboLinux 팀은 사람이 이해하기 쉬운 파일시스템 레이아웃을 ""지능적으로"" 만들어냄. 오래된 UNIX 관습은 더 이상 저장 공간 부족이나 1GB 이상의 파일 크기 문제로 인한 8.3 형식의 제한이 없기 때문에 고루함.
     * 필요한 패키지가 없을 경우 GoboLinux 레시피를 만들어야 함. 레시피 생성 언어는 이해하기 쉽지만, 종종 하나의 패키지가 수십 개의 라이브러리에 의존하고, 이들의 버전을 맞추고, 다운로드 URL을 찾아 레시피를 만드는 데 많은 시간을 소비함.
     * macOS는 GoboLinux와 유사한 방식을 사용하며, CLI에서 macOS를 사용하기 쉬움. 예를 들어, 펜 드라이브는 /Volumes에, 프로그램의 설정 파일은 ~/Library에 위치함.
     * GoboLinux가 snap/flatpak이나 nixOS와 같은 배포판보다 더 나은 점이나 이점에 대해 더 지식이 많은 사람이 설명해줄 수 있음. 지식이 부족한 상태에서 보았을 때, 이 방식이 가장 단순해 보임.
     * 웹사이트 랜딩 페이지가 JavaScript를 요구하는 이유에 대한 의문. 여기에는 스크립팅 언어의 동적 기능이 필요하지 않으며, 접근성과 SEO에 영향을 줌.
     * 이 프로젝트는 마이크로소프트의 오래된 WinFS 아이디어를 떠올리게 함. 공유 객체 의존성이 문제가 될 수 있지만, GoboLinux가 이를 어떻게 처리하는지 자세히 살펴보지 않음. 모든 공유 리소스가 특정 위치에 있거나 모든 것이 정적으로 컴파일되었을 수도 있음. 파일 시스템의 혼란에는 이유가 있으며, 오픈 소스 세계에서는 이러한 위험을 감수할 수 있음.
"
"https://news.hada.io/topic?id=13625","윈터가탄 마블 머신 (2016) [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        윈터가탄 마블 머신 (2016) [비디오]

        Hacker News 의견

     * 작가 본인에 따르면, 해당 비디오는 기계에서 나오는 소리가 대부분이 아니라는 점에서 약간 오해의 소지가 있음. 초기 설계에 근본적인 결함이 있었고, 프로젝트를 거의 포기할 뻔 했지만, 새로운 버전을 계획하며 최근에 다시 돌아옴.
          + 엔지니어링 관점에서 전체 과정에 대해 매우 투명하게 공개하고 있으며 흥미로움.
          + 대리석 분리기 설계: 링크
          + 새로운 플라이휠 테스트: 링크
     * 비디오가 처음 나왔을 때 놀라웠음. 노래 자체와 예술과 엔지니어링의 교차점이 당시에 마음을 사로잡음. 창작자가 나중에 그 기계를 만드는 비디오를 몇 개 더 공개했는데, 그것들도 훌륭했음.
          + 그는 기계의 두 번째 버전을 만들기 시작했으며, 첫 번째 버전의 ""문제점""을 모두 해결하고 세계를 돌아다닐 수 있는 것이 되어야 했음. 매우 흥미진진함.
          + 거의 90% 완성했을 때, 이해할 수 없는 이유로 프로젝트를 포기하고 /세 번째/ 버전을 시작함. ""완벽""이 ""완성""의 적이 되게 허용했고, 디자인과 ""혁신""의 굴레에 자주 빠져서 원래 개념이 ""충분히 좋았다""는 것이 분명했음에도 불구하고 좌절감을 느낌.
          + 이 시점에서 비디오 시청을 중단함. 그의 콘텐츠는 여전히 흥미로울 것이고, 그는 확실히 대리석 기계 분야에서 혁신을 이루고 있지만, 음악 제작을 중단하고 이제는 3D 프린트된 대리석 게이트 디자인에만 집중함.
     * Wintergatan의 영리한 대리석 비디오를 즐긴다면, Ivan Miranda의 대리석 시계 프로젝트도 확인해볼 것을 추천함: 링크. Ivan은 3D 프린팅에 의존하는 반면, Martin은 기계 가공과 용접에 중점을 두지만, 둘 다 매력적이고 교육적인 창작자임.
     * 그의 다른 악기인 모듈린을 매우 좋아함.
          + 오리지널 음악 연주: 링크
          + 작동 방식 설명: 링크
          + 메가맨 음악 연주: 링크
          + 마지막 비디오에서 선택된 댓글: ""기능적으로 엉망인"" 미학 스타일의 악기라는 점이 매력적임.
     * 모두가 이 프로젝트의 엔지니어링 측면에 대해 이야기하고 있지만, 그것을 잠시 접어두고, Molin의 음악을 정말 즐김. 그는 대리석 기계로 잘 알려져 있지만, 그 이전에는 Göteborg의 거리에서 공연하며 유명해진 미니멀리스트 전자 음악 밴드 Detektivbyrån을 가졌음. 거의 20년 전에 출시된 Detektivbyrån의 앨범 주변 작업이 대리석 기계만큼 흥미로움 - 거리 공연에 새로운 혁신의 숨결을 불어넣음.
     * 현재 대리석 기계의 세 번째 진화 작업을 하고 있으며, YouTube 채널에 건설 업데이트를 게시함. 음악과 기계 가공 콘텐츠의 흥미로운 교차점임.
     * 몇 년 전에 그의 비디오에 매우 빠져 있었음... 그는 대리석 기계의 두 번째 반복에 대한 실제 진전을 이루고 있었는데, 갑자기 처음부터 다시 시작해야 한다고 결정하고 어떤 암호화/웹3.0 것에 빠져들었음.
          + 마지막으로 본 비디오임.
     * 그가 실패를 거듭하는 것을 지켜보는 것은 다소 슬펐음. 종종 완벽주의에 대한 잘못된 감각 때문에 발생함. 더 이상 그의 비디오를 볼 수 없음, 마치 스스로를 패배시키는 미친 예술가를 지켜보는 것 같음.
          + 이와 유사하면서도 현실적이고 성공적인 프로젝트로, Ivan Miranda의 비디오를 시청함. 그는 최근에 거대한 대리석 시계를 만들었고, 충분히 좋다고 판단하고 완성을 선언하는 것을 지켜보는 것이 정말 재미있음.
     * 로봇 재미 악기에 대해 과거에 작업했음. 날아다니는 공과 와인잔, 드럼 등이 있음. 조명을 담당했고 나중에 실시간 저지연 스트리밍을 다시 만듦: 링크
     * 이것은 멋지지만 바코드 스캐너 음악을 본 적이 있는가? 링크
"
"https://news.hada.io/topic?id=13641","소프트웨어 개발에서 배운 교훈들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           소프트웨어 개발에서 배운 교훈들

개발

     * 작게 시작한 후 확장하기: 새 시스템을 만들거나 기존 시스템에 기능을 추가할 때, 거의 필요한 기능이 없는 매우 단순한 버전으로 시작한 후 점진적으로 확장
     * 한 번에 하나씩 변경하기: 개발 중 테스트가 실패하거나 기능이 작동하지 않을 때, 한 번에 하나의 변경만 했다면 문제를 찾기가 훨씬 쉬움
     * 로깅과 에러 처리를 조기에 추가하기: 새 시스템을 개발할 때 로깅과 에러 처리를 추가하는 것이 초기부터 유용함
     * 새로운 코드 라인은 최소 한 번은 실행되어야 함: 기능이 완성되기 전에 테스트해야 함
     * 전체를 테스트하기 전에 부분을 테스트하기: 잘 테스트된 부분은 시간을 절약해 줌
     * 모든 일은 생각보다 오래 걸림: 특히 프로그래밍에서 예상보다 더 오래 걸림
     * 기존 코드를 먼저 이해하기: 새 기능을 추가하기 전에 현재 솔루션을 이해해야 함. 코드를 읽는 것이 코드를 작성하는 것만큼 필요한 기술이라는 것
     * 읽고 실행하기: 코드를 이해하는 데는 두가지 보완적인 방법이 있음. 코드를 읽는것과 코드를 실행하는 것

문제 해결

     * 버그는 항상 존재함: ""처음부터 올바르게""라는 접근 방식은 좋지 않음
     * 문제 보고서 해결하기: 개발자는 고객의 문제 보고서를 처리하고 버그를 수정하는 데 시간을 할애해야 함. 이를 통해 고객이 무엇을 하려고 하는지, 시스템이 어떻게 사용되는지, 문제 해결이 얼마나 쉽거나 어려운지, 시스템이 얼마나 잘 설계되었는지 훨씬 더 잘 이해할 수 있음
     * 문제 재현하기: 버그 수정의 첫 번째 단계는 문제를 재현하는 것. 그런 다음 수정 사항이 추가되면 문제가 사라지는지 확인
     * 알려진 오류를 수정한 후 남은 것을 확인하기: 여러 문제가 있을 때, 알려진 문제를 모두 수정한 후 남은 증상을 확인함
     * 우연의 일치가 없다고 가정하기: 테스트와 문제 해결 시 우연을 믿지 말고 조사해야함. ""타이머 값을 변경했는데 이제 시스템이 더 자주 다시 시작되는 것은 우연이 아님. 새로운 기능이 추가되었는데 관련 없는 기능이 느려지나? 우연이 아님. 더 조사해 볼 것""
     * 타임스탬프와 상관관계 맺기: 문제 해결 시 이벤트의 타임스탬프를 활용

협력

     * 대면이 가장 높은 대역폭을 가짐: 문제 해결 방법을 논의할 때 대면이 다른 모든 방법(영상, 전화, 채팅, 메일)보다 좋음
     * 러버덕 디버깅: 문제에 막혔을 때 동료에게 문제를 설명하면 해결책을 깨닫게 됨. 동료가 아무 말도 하지 않더라도 대화를 하다 보면 문제가 무엇인지 깨닫게 되는 경우가 많음. 마술처럼 들리지만 놀라울 정도로 자주 작동함
     * 물어보기: 코드를 파악할때 읽고 실행하는 것이 좋은 경우가 많다. 하지만 이에 대해 알고 있는 사람(아마도 원저자) 에게 묻는게 가능하다면 물어보는 것도 함께 사용할 것
     * 공로 공유하기: 공로가 있는 곳에 공로를 인정하기. ""우리는 ...을 시도했습니다."" 대신 ""Marcus가 시도할 아이디어를 생각해 냈습니다."" (그가 그렇게 했다면) 라고 말하기. 도움을 주거나 기여한 사람이 누구인지 적극적으로 언급할 것.

기타

     * 시도해보기: 어떤 언어 기능이 어떻게 작동하는지 확실하지 않을 때 작은 프로그램을 작성하여 테스트
     * 잠자기: 어려운 문제에 직면했을 때, 결정하기 전에 하룻밤 잠을 자는 것이 좋음
     * 변화: 가끔씩 역할이나 직업을 바꾸는 것을 두려워하지 말것. . 다른 사람들과, 다른 제품이나 다른 회사에서 일하는 것은 자극적임.
     * 계속 배우기: 소프트웨어 개발의 가장 큰 장점 중 하나는 항상 더 많이 배우고 알 수 있는 여지가 있다는 것. 다양한 프로그래밍 언어와 도구를 사용해 보고, 소프트웨어 개발에 관한 책을 읽고, MOOC 과정을 수강할 것. 작은 개선이 추가되어 당신의 지식과 능력에 실질적인 변화를 가져옴

   대면이 가장 높은 대역폭을 가짐 - 훌륭한 표현입니다.

   +1.

   러버덕 디버깅. 진짜 프로그래밍을 모르는 사람에게 말하다가도 뭐가 문제인지 깨닫게 됨

   +1.

   금과옥조네요.

   +1　

   와웅 다 좋은 말이네용 대면이 가장 높은 대역폭을 가짐 은 아쉽네요 기술이 더 발전됬으면 좋겠네요
"
"https://news.hada.io/topic?id=13567","미국, 'UnitedHealth' 반독점 조사 개시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      미국, 'UnitedHealth' 반독점 조사 개시

        Hacker News 의견

     * United Healthcare와 Optum의 관계에 대한 비판

     United Healthcare는 Optum이라는 제2의 당사자를 통해 모든 청구와 청구 관련 문제를 처리하도록 구성되어 있어, 분쟁이 발생할 때 서로 책임을 전가하는 데 매우 효과적임. Optum은 많은 의료 제공자를 소유하고 있으며, 한 사례에서는 Optum이 의료 제공자를 인수하는 과정에서 환자에게 큰 청구서를 부과하고, 청구 내용에 대한 정보를 제공하지 않은 채 환자를 내보냄. Optum이 점점 더 많은 의료 그룹을 인수함에 따라, 환자들은 자신의 주치의(PCP)에게 여러 번 접근하지 못하는 상황에 처함.
     * United Healthcare의 보험 경험에 대한 개인적인 이야기

     United Healthcare를 10년 이상 사용한 한 사용자는 대체로 만족스러운 경험을 했다고 함. 첫 아이 출산으로 인한 병원비가 50만 달러가 넘었지만, 사용자는 3500달러만 부담함. 그러나 나중에 아이의 맹장 수술 후, 네트워크 내 의사의 진료와 CT 스캔을 받았음에도 불구하고, 응급실이 당시 네트워크 외부 제3자에 의해 운영되었다는 이유로 CT 스캔 비용이 보장되지 않는 상황에 직면함. 이러한 원칙적인 문제가 불쾌한 경험을 남김.
     * 미국의 의료 시스템 탐색의 어려움

     미국의 의료 시스템은 이해하고 탐색하기가 매우 어려움. 최근에 Sedera로 전환했으며, 더 나은 인센티브, 가격, 서비스를 기대함.
     * 의료 산업의 경쟁자들에 대한 의문

     ""의료 거인""과 경쟁하는 업계 관계자들이 누구인지, 가격 조정과 담합이 United Healthcare와 Optum에만 국한되지 않고 훨씬 더 광범위하게 이루어지고 있음을 알고 싶어함.
     * UnitedHealth 그룹의 시장 독점과 이해 상충 문제

     UnitedHealth 그룹은 의료 보험사이자 여러 의사 네트워크를 소유하고 있으며, Optum을 통해 약물 비용을 결정하고, 자체 메일 주문 및 전문 약국을 운영함. 이러한 통합된 시스템은 환자나 의사에게 아무런 이득이 되지 않으며, 독립적인 의료 시스템이나 개인이 경쟁하기 어려운 상황을 만듦.
     * 미국 의료 시장의 자유 시장 부족 문제

     미국의 의료 보험 시장은 자유 시장의 부족과 고용주를 통한 의료 혜택의 제한된 선택으로 인해 문제가 발생함. 정부는 ICHRAs와 같은 대안을 촉진하고 장려해야 함. ICHRAs는 고용주가 의료비를 위한 일정 금액을 제공하고, 직원들이 자신의 계획을 선택할 수 있게 함.
     * UnitedHealthcare의 사이버 보안 문제

     2021년의 멀웨어로 인한 해킹은 Optum과 Change Healthcare 인수와 관련된 많은 직원들이 며칠 동안 일을 할 수 없게 만듦. 이 사건은 미국 약국 네트워크의 큰 부분이 다운되면서 UnitedHealthcare가 얼마나 큰 문제인지를 깨닫게 함.
     * UnitedHealthcare 플랜의 문제점

     UnitedHealthcare 플랜에 가입한 후, 네트워크 내 의사들이 실제로는 UnitedHealthcare를 받아들이지 않거나 새 환자를 받지 않아서 질 좋은 의사를 찾을 수 없었던 경험. 이로 인해 플랜을 변경해야 했으며, 이는 거짓 광고처럼 느껴짐.
     * 건강 보험 회사에 대한 비판

     모든 건강 보험 회사들이 사라져야 한다는 주장. 이들은 모두 사기꾼이며, 미국의 낡은 시스템을 이용해 가족들로부터 돈을 빼앗고 있음.
"
"https://news.hada.io/topic?id=13607","CSS-Tricks 현황 개요ricks 현황 개요

CSS-Tricks의 현재 상황에 대한 나의 생각

     * 2022년 3월에 CSS-Tricks를 DigitalOcean에 판매한 지 거의 2년이 됨.
     * 판매 결정은 공정한 가격, DigitalOcean의 컨텐츠와 커뮤니티 투자 전략, 광고 제거, 편집장 Geoff의 유지 등을 고려한 결정이었음.
     * 판매 후 어느 정도 시간이 지나면서 사이트는 새로운 목소리와 작업으로 활력을 보였으나, 이후 DigitalOcean이 대규모 해고를 단행하며 Geoff를 포함한 컨텐츠 팀을 해고함.
     * 해고 이후 CSS-Tricks는 마지막으로 'Passkeys'에 대한 기사를 게시하고 업데이트가 중단됨.

CSS-Tricks를 다시 되찾으려 했던 시도

     * DigitalOcean의 새로운 콘텐츠 & 커뮤니티 부사장과 대화를 나누며 사이트를 다시 활성화시키기 위한 노력을 시도함.
     * 새로운 편집장 선정, 워드프레스 개발 능력, 우수한 프론트엔드 작가 확보 등이 필요하다고 조언함.
     * CSS-Tricks를 다시 운영하고자 하는 개인적인 제안을 하였으나, DigitalOcean 내에서 이를 밀어붙일 만큼의 확신을 가진 이가 없어 제안은 무산됨.

GN⁺의 의견

     * CSS-Tricks는 웹 개발자들 사이에서 매우 인기 있는 리소스였으며, DigitalOcean의 결정은 커뮤니티에 큰 손실을 의미함.
     * 사이트 인수 후 컨텐츠의 질과 업데이트 빈도가 감소하는 것은 흔한 일이지만, CSS-Tricks의 경우 특히 아쉬움이 큼.
     * 이러한 상황은 다른 기업들에게 커뮤니티 중심의 사이트를 인수할 때 컨텐츠와 사용자 기반을 유지하는 것의 중요성을 상기시킴.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 MDN Web Docs, Frontend Masters, Smashing Magazine 등이 있으며, 이들은 웹 개발 커뮤니티에 지속적으로 가치를 제공함.
     * CSS-Tricks와 같은 사이트를 운영할 때는 커뮤니티의 신뢰를 유지하고 지속적으로 고품질의 컨텐츠를 제공하는 것이 중요함.

        Hacker News 의견

     * CSS-Tricks와 DigitalOcean의 거래가 실패했다는 의견

     DigitalOcean이 CSS-Tricks를 인수한 것은 큰 실수였다고 생각함. CSS와 프론트엔드에 관심 있는 사용자들이 DigitalOcean의 제품을 구매할 가능성이 낮아, 투자 대비 수익(ROI)이 충분하지 않다고 판단하여 자원을 철회한 것으로 보임. 서버 관리와 관련된 튜토리얼이 프로그래머들을 끌어들이는 데는 효과적이었음.
     * CSS-Tricks의 가치에 대한 인정과 경제적 어려움에 대한 언급

     CSS-Tricks는 커뮤니티에 실질적인 가치를 제공했지만, 일반적인 SEO 콘텐츠를 넘어서는 커뮤니티 자원을 유지하는 것은 어렵고, 그 가치에 비해 충분한 보상을 받지 못함. 큰 기술 회사들이 없었다면 상황이 달라졌을 수도 있음.
     * CSS-Tricks에 대한 감사의 표현

     CSS-Tricks가 CSS에 대한 재미와 탐험의 분위기를 가져다줬으며, 많은 것을 배울 수 있게 해준 Chris와 그의 팀에게 감사함.
     * 다중 수입원의 중요성에 대한 언급

     여러 수입원을 가지는 것은 현명한 접근 방식이며, 해고되더라도 적어도 재정적으로는 큰 타격을 받지 않음.
     * CSS-Tricks의 변화에 대한 아쉬움

     CSS-Tricks의 변화로 인해 새롭고 흥미로운 CSS 관련 기사가 더 이상 나오지 않아 아쉬움을 느낌.
     * 업계의 대규모 해고 추세에 대한 비판

     전체 산업이 대규모 해고를 시작할 때 DigitalOcean도 흥분했을 것이라는 비판적인 의견.
     * DigitalOcean의 이미지에 대한 영향

     CSS-Tricks와의 거래가 DigitalOcean에 대한 인식에 부정적인 영향을 미침. 오픈 소스/개발자 커뮤니티를 한 번만 잘못 다루어도 명성을 회복하는 데 수십 년이 걸릴 수 있음.
     * 인수에 대한 다른 관점 제시

     일반인이 큰 회사와 거래하는 것을 '매각'이라기보다는 기회로 보아야 하며, 이는 회사 주식을 보유하고 이익을 얻는 것과 다르지 않음.
     * CSS-Tricks와 DigitalOcean의 개인적 중요성

     프론트엔드 개발을 시작할 때 CSS-Tricks가 매우 유용했으며, 서버를 배우면서 DigitalOcean도 경력의 출발점이었음. 결과가 아쉬움.
     * CSS-Tricks의 쇠퇴에 대한 실망감

     CSS-Tricks의 쇠퇴에 대해 안타까움을 느끼며, 아직 그만한 대체 장소를 찾지 못함.
"
"https://news.hada.io/topic?id=13648","애플리케이션 모니터링과 옵저버빌리티의 차이점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        애플리케이션 모니터링과 옵저버빌리티의 차이점

     * 모니터링:
          + 시스템 활동을 관찰하고 기록하는 프로세스
          + 모니터링 도구는 ‘애플리케이션이 작동하는 방식’과 관련된 데이터 수집
          + 소프트웨어는 이 데이터를 대시보드에 보내 분석
          + 이전에 설정한 임곗값을 넘어서면 경보를 트리거
          + 모니터링은 애플리케이션 상태를 계속 파악해 ‘알려진 장애 지점’을 계속 경계하도록 지원
          + 애플리케이션 성능을 감독하고 개선하는 데 쓰임
     * 옵저버빌리티:
          + 클라우드 네이티브 세계에서 ‘알려지지 않은 미지의 것’을 포착하고 교정하도록 도움
          + 클라우드 네이티브 시스템의 내부 측정값을 사용해 비즈니스 중심 결과, 목표에 영향 미침
          + 복잡한 클라우드 네이티브 분산 시스템을 트러블슈팅할 때, 사용자에게 더 많고, 더 다양한 도구가 필요함
          + 사용자가 접하는 장애 종류는 예측할 수 없거나, 미리 알 수가 없다는 점을 고려
"
"https://news.hada.io/topic?id=13658","HN 공개: 3년 만에 사용자 100만 명을 달성한 후, "Internet OS"를 오픈 소스화한 개발자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HN 공개: 3년 만에 사용자 100만 명을 달성한 후, ""Internet OS""를 오픈 소스화한 개발자

브라우저에서의 데스크탑 환경!

     * Puter는 브라우저에서 작동하는 고급 오픈소스 데스크탑 환경으로, 풍부한 기능, 뛰어난 속도, 높은 확장성을 자랑함.
     * 원격 데스크탑 환경 구축, 클라우드 스토리지 서비스 인터페이스, 원격 서버, 웹 호스팅 플랫폼 등에 활용 가능함.

시작하기

     * Puter를 시작하려면 다음 명령어를 사용:
git clone https://github.com/HeyPuter/puter
cd puter
npm install
npm start

     * 이 명령어는 http://localhost:4000에서 Puter를 실행함 (또는 다음 사용 가능한 포트).

프로덕션 배포

     * 프로덕션 환경에서 Puter를 배포하는 방법에 대한 자세한 가이드는 docs/prod.md 파일에 있음.

자주 묻는 질문

    ❓ Puter의 사용 사례는 무엇인가?

     * Puter는 다음과 같이 사용될 수 있음:
          + Dropbox, Google Drive, OneDrive 등의 대안으로 새로운 인터페이스와 강력한 기능 제공.
          + 서버 및 워크스테이션을 위한 원격 데스크탑 환경.
          + 웹사이트, 웹 앱, 게임을 구축하고 호스팅하는 플랫폼.
          + 웹 개발, 클라우드 컴퓨팅, 분산 시스템 등에 대해 배울 수 있는 친근한 오픈소스 프로젝트 및 커뮤니티.

    ❓ Puter는 왜 React, Angular, Vue 등으로 구축되지 않았나?

     * 성능상의 이유로 Puter는 바닐라 자바스크립트와 jQuery로 구축됨.
     * 복잡한 추상화를 피하고 가능한 한 전체 스택을 제어하고자 함.
     * VSCode, Photopea, OnlyOffice와 같은 프레임워크를 사용하지 않는 좋아하는 프로젝트들에 부분적으로 영감을 받음.

    ❓ 왜 jQuery인가?

     * Puter는 DOM과 직접 상호작용하며, jQuery는 DOM 조작, 이벤트 처리 등을 위한 우아하고 강력한 API를 제공함.
     * 또한 jQuery는 빠르고, 성숙하며, 전투 검증된 라이브러리임.

크레딧

     * 기본 배경화면은 Milad Fakurian이 만들고 Unsplash에 게시함.
     * 아이콘들은 다음 라이선스 하에 제공됨:
          + Papirus (GPL-3.0 라이선스)
          + Iconoir (MIT 라이선스)
          + Elementary Icons (GPL-3.0 라이선스)
          + Tabler Icons (MIT 라이선스)
          + bootstrap-icons (MIT 라이선스)

GN⁺의 의견

     * Puter는 클라우드 기반의 작업 환경이 점점 더 일반화되는 추세에 발맞춰 사용자에게 웹 브라우저 내에서 완전한 데스크탑 경험을 제공하는 혁신적인 프로젝트임.
     * 오픈소스로 제공되기 때문에 개발자들이 소스 코드를 자유롭게 살펴보고, 필요에 따라 수정하거나 기능을 추가할 수 있는 장점이 있음.
     * jQuery를 사용함으로써 최신 프레임워크에 익숙하지 않은 개발자들도 쉽게 참여하고 기여할 수 있는 환경을 제공하지만, 현대 웹 개발 트렌드와 다소 동떨어져 있을 수 있음.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 구글의 Chrome Remote Desktop, Apache Guacamole 등이 있으며, 이들은 이미 널리 사용되고 검증된 솔루션임.
     * Puter를 도입할 때는 보안, 호환성, 성능 최적화 등을 고려해야 하며, 클라우드 기반 서비스로의 전환은 기존 인프라와의 통합이나 데이터 마이그레이션과 같은 추가적인 작업을 필요로 할 수 있음.

        Hacker News 의견

     * 데모가 매우 인상적이며 모바일에서도 빠른 속도를 자랑함. 그러나 단지 데스크톱 환경(DE) 웹앱이라는 점에서 기대를 조절할 필요가 있음. '인터넷 OS'라는 용어로 인해 실제 부팅이 가능할 것으로 기대했지만, 그렇지 않음을 알게 됨.
     * 온라인 데스크톱을 많이 사용해봤지만, 이것이 가장 매끄러움. 비슷한 프로젝트를 진행 중인 사람으로서, 상업화를 시도했는지, 그 결과는 어땠는지 궁금함.
     * 젊었을 때, USB 스틱(당시 발명되지 않음)을 가지고 다니며 키오스크에서 특정 OS를 로드하는 꿈을 꿨음. 이 프로젝트는 그 기능에 가까워 보이며, 열정적으로 만들어진 데모를 공개해준 것에 감사함. 오픈소스로 제공되어 누군가가 기본적으로 해당 사이트를 로드하는 키오스크를 만들도록 영감을 줄 수 있음.
     * 실행이 아름답지만, Puter 내에서 Puter를 볼 수 있는 브라우저 앱이 없어서 아쉬움.
     * 모바일 화면에서도 매우 멋져 보임. jQuery를 사용하고 있음에도 불구하고 DOM이나 이벤트 핸들러를 깨뜨리지 않고 관리하는 것이 대단함. React의 장점 중 하나는 jQuery 때문에 발생할 수 있는 문제를 걱정하지 않아도 된다는 것임.
     * 이 프로젝트에 푹 빠져서 시간을 보냄. VSCode에서 확장 프로그램을 설치하다가 링크를 열지 못해 혼란스러웠음. 실제로 기대했던 기능이 작동하지 않아서 당황함.
     * 아이디어가 매우 흥미롭고 스크린샷만으로도 그 개념을 이해할 수 있음. 클립보드, 링크 열기, 드래그 앤 드롭 등의 '통합' 기능이 가능할지 궁금함. 크롬북에서 개발을 하는 교육 도구로 사용될 수 있음.
     * 8개월 전 해커뉴스에 소개된 Kera Desktop을 상기시킴. 당시 343점과 111개의 댓글을 받았음.
     * 문서에 따르면, 이것은 서버와 워크스테이션에 대한 원격 접속에 사용될 수 있음. 권한 상승과 샌드박싱을 어떻게 처리하는지, 사용자 계정에 대한 원격 접속인지 서버 관리인지에 대한 질문이 있음.
     * Synology 운영 시스템의 멋진 요소 중 하나임. 이를 기반으로 다른 영역으로 더 확장되는 것을 보고 싶음. 아버지를 위해 TrueNAS 박스를 설정했는데, 간단한 유지 관리 작업을 위한 가벼운 데스크톱 환경을 원했음. 되돌아보면 Synology 장치를 구입했어야 함.
"
"https://news.hada.io/topic?id=13565","F-35C 테일후크 시험 평가테일후크 시험 평가

F-35C 꼬리후크 테스트에 대하여

     * F-35C는 미 해군이 운영하는 CATOBAR(캐터펄트 지원 이륙, 장애물 지원 착륙) 항공모함용으로 설계된 F-35 공동 타격 전투기의 변형 모델임.
     * 이 항공기는 증기 또는 전자기 캐터펄트를 통해 발진하며, 착륙 시 꼬리후크를 사용하여 착륙선을 잡음.
     * 꼬리후크는 비행 중에는 조개껍데기 모양의 문에 의해 가려져 있으며, 전자적으로 제어되고 유압으로 움직임.

초기 테스트 실패

     * 2011년 여름, Lakehurst NAS에서 F-35C의 항공모함 적합성 테스트가 시작됨.
     * 테스트 초기에는 꼬리후크가 제대로 작동하지 않았으며, 이는 테스트 중에 한 기술자가 예측한 바 있음.
     * 꼬리후크의 위치가 주 착륙 장치 축 중심에서 7피트 이상 떨어져 있지 않아 설계상의 제약이 있었음.

설계 문제와 모델 오류

     * Northrop Grumman의 엔지니어들은 착륙선의 동작을 시뮬레이션하는 컴퓨터 모델에 기반하여 설계했으나, 모델이 잘못되었음.
     * 착륙선이 착륙 시 타이어에 맞고 파동이 생겨나면서 데크에 평평하게 눕혀져야 하지만, 실제로는 착륙선이 눌리지 않고 꼬리후크를 넘어감.

테스트 과정의 어려움

     * 여러 차례에 걸쳐 꼬리후크가 제대로 작동하도록 시도했지만 실패함.
     * 꼬리후크의 높은 각 가속도로 인해 측정 장비가 손상되었으며, 허리케인 Irene으로 인해 테스트가 중단됨.

꼬리후크의 재설계

     * 새로운 꼬리후크는 더 강한 홀다운 댐퍼, 새로운 업스트로크 댐퍼, 개선된 측면 제한기 및 내구성이 강화된 계측 장비를 갖춤.
     * 새로운 꼬리후크는 낮은 데크에서도 착륙선을 잡을 수 있도록 스쿱 형태로 설계됨.

지속적인 문제와 해결

     * 꼬리후크의 피치 피벗 핀 내부 베어링에 문제가 지속적으로 발생하여, 핀 교체 작업이 자주 필요했음.
     * 엔지니어들은 피벗 핀을 교체할 때 새로운 캘리브레이션을 피하기 위한 방법을 찾아냄.

최종 테스트 단계

     * 2016년, CF-03을 사용하여 외부 무기를 장착한 상태에서 비중심 착륙 테스트를 수행함.
     * 한 테스트에서 F-35C가 비정상적인 각도로 착륙하여 강하게 바운스하는 사고가 발생했으나, 조종사가 제어를 되찾음.
     * 이 사고로 인해 착륙 기어 교체가 필요했으며, 비중심 착륙과 착륙선만을 사용한 착륙 시도는 공식적으로 중단됨.

GN⁺의 의견

     * F-35C의 꼬리후크 테스트는 항공기 설계와 시험 과정에서 예상치 못한 문제에 직면할 수 있음을 보여줌. 이는 복잡한 시스템을 다루는 엔지니어링 작업의 본질적인 도전을 반영함.
     * 이 기사는 항공기 개발 프로젝트의 복잡성과 엔지니어링 팀이 직면하는 실제 문제를 해결하는 과정을 통해 흥미로운 통찰을 제공함.
     * 비판적인 시각에서 볼 때, 이러한 문제는 프로젝트 비용 증가와 일정 지연을 초래할 수 있으며, 이는 국방 예산과 관련된 논쟁에 영향을 미칠 수 있음.
     * 항공기 개발에 있어서는 시뮬레이션과 실제 테스트의 중요성이 강조되며, 이는 다른 고도의 기술 프로젝트에도 적용될 수 있음.
     * 이 기술을 도입하기 전에는 시뮬레이션 모델의 검증 및 검사(V&V)가 중요하며, 실제 환경에서의 광범위한 테스트를 통해 설계 결함을 조기에 발견하고 수정할 수 있는 프로세스가 필요함.

        Hacker News 의견

     * 저자의 댓글: 이 글이 해커뉴스에 올라올 줄은 몰랐다고 함. 공유한 엔지니어링 전쟁 이야기임.
     * F-35의 설계 반복을 미디어가 과대평가되었거나 기존 제트기보다 열등하다는 증거로 지적하는 것에 대해, 한 댓글 작성자는 이를 혁신과 새로운 시도로 보고 있으며, 실패를 겪기도 하지만 결국 놀라운 제트기를 만들어내는 과정이라고 평가함.
     * F-35C의 착륙에 대한 기술적 질문: F-35C가 착륙 시 중앙에 가까워야만 제대로 후크가 걸리는 것인지, ""wire only""가 무엇을 의미하는지에 대한 질문이 있음.
     * 모든 엔지니어는 결함 있는 테스트 장비에 의해 속아본 경험이 있으며, 모든 경력 있는 엔지니어는 제대로 작동하는 테스트 장비를 신뢰하지 않아 속아본 경험이 있다고 함. 이 글을 즐겁게 읽었다고 함.
     * 한 전직 해리어 정비사이자 현 엔지니어는 F-35B의 개발에 대해 더 듣고 싶어함. 2002-2007년 복무 기간 동안 F-35B 작업을 배울 것이라고 자주 들었지만 실제로는 일어나지 않았다고 함.
     * F-35C에 대한 흥미로운 사실: 주문/설계 당시 항공모함에 엔진을 교체할 수 있는 항공기가 없었다고 함. C2 Greyhound에는 들어가지 않았으며, CMV-22B Osprey 변형기와 CH-53K King Stallion에는 들어갈 수 있지만 이들 항공기는 최근에야 존재하기 시작했다고 함.
     * 엔지니어가 새로운 XML 형식을 만들기 싫어서 프로그램에 시간과 돈을 절약해주는 것이 세상에서 진보가 이루어지는 방식이라고 농담조로 말함. 건강 관리, 금융 기술, 광고 등 여러 분야에서 일하면서 새로운 형식에 대한 합의를 얻지 않기 위해 20여 가지 언어로 XML 파서를 작성하거나 디버깅했다고 함.
     * 새로운 항공모함에는 전자기 캐터펄트가 있는데, 하이브리드 자동차처럼 재생 제동을 사용하여 캐터펄트 축전기를 재충전하는 데 많은 에너지를 절약할 수 있지 않을까 하는 농담을 함.
     * IFLOLS에서 신입 소프트웨어 엔지니어로 일했던 한 사람은 정부를 떠나 다양한 소프트웨어 스타트업에서 일하면서 이런 실제 엔지니어링을 그리워함.
     * 군사 관련 정보가 기밀로 분류되는 것이 아닌지, 출판하기 위해 승인을 받아야 했는지, 미군이 이런 정보(글에서 언급된 내용)에 대해 그다지 까다롭지 않은지에 대한 호기심이 있는 댓글이 있음.
"
"https://news.hada.io/topic?id=13557","AI가 당신의 직업은 빼앗지 않지만, 당신의 급여는 갉아먹을 것입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AI가 당신의 직업은 빼앗지 않지만, 당신의 급여는 갉아먹을 것입니다

     * AI Augmentation(AI 증강, 인간의 능력이나 작업 수행 능력을 향상시키는 것) 의 오류는 다음과 같은 생각에서 비롯됨: ""AI가 당신의 직업을 빼앗지는 않겠지만, AI를 사용하는 다른 사람이 그렇게 할 수 있음.""
     * 하지만 대부분의 직업에 대해 AI의 영향은 ""AI가 당신의 직업을 빼앗지는 않겠지만, 그것에 대해 프리미엄을 부과할 수 있는 능력은 빼앗을 것임""으로 나타나게 될 것
     * 기계가 인간을 대체할지 여부는 시간 낭비적인 질문임
     * 정말 중요한 질문은 인간이 기계에 의해 증강된 후에도 여전히 기술 프리미엄을 요구할 수 있을지 여부
     * AI는 당신의 직업이 아닌, 그것에 대해 프리미엄을 부과할 수 있는 능력을 공격하는 데 적합함

작업의 분해와 재결합

     * 모든 직업은 여러 작업의 묶음임.
     * 일부 작업은 전문화를 요구하지만, 분해하고 위임하는 비용이 높기 때문에 여전히 묶음의 일부로 남아 있음.
     * 새로운 기술의 물결은 이러한 작업 묶음을 공격함.

  대체와 보완

     * 새로운 기술은 특정 작업을 대체할 수도 있고, 보완할 수도 있음.
     * 기술이 작업을 대체하는 것은 나쁘고, 보완하는 것은 좋다고 생각하기 쉬움.
     * 그러나 기술이 직업에 미치는 순수익 또는 순부정적 영향을 이해하기 위해서는 증강이 작업 묶음에 미치는 영향을 생각해야 함.

기술 프리미엄과 작업의 재결합(Rebundling)

  시나리오 1: 현상 유지

     * AI 증강이 작업자를 도와주지만, 생산성 향상이나 더 높은 가치의 작업을 포함시키는 능력에서 별다른 가치 향상이 없음.
     * 결과: 기술 프리미엄에 영향이 없음.

  시나리오 2: 가치 이동

     * AI 증강이 특정 작업 묶음으로 가치를 이동시킴.
     * 결과: 기술 프리미엄 부과 능력 증가.

  시나리오 3: 상품화

     * 상품화는 증강의 덜 이해된 영향 중 하나임.
     * 결과: 기술 프리미엄 부과 능력 감소.

  시나리오 4: 최종 대체

     * 증강의 최종 게임은 자동화(대체)일 수 있음.
     * 결과: 직업 자체가 대체됨.

기술 프리미엄의 세 가지 원천

     * 기술 프리미엄은 다음 세 가지 원천에서 비롯됨: 1) 기술적 이점, 2) 학습 이점, 3) 관리적 이점.

  #1 - 전문화된 작업에 대한 기술 프리미엄

     * AI가 저숙련 노동자가 고숙련 노동자와 동등한 수준으로 작업을 수행할 수 있게 하면, 고숙련 노동자는 기술 프리미엄을 잃게 됨.

  #2 - 학습 이점에 대한 기술 프리미엄

     * AI는 학습 이점에 대한 기술 프리미엄에 독특한 영향을 미침.
     * AI는 대규모로 학습할 수 있는 능력 때문에 기술 프리미엄을 공격함.

  #3 - 관리적 이점에 대한 기술 프리미엄

     * AI 에이전트가 등장함으로써 인간의 관리적 이점이 위협받음.
     * AI 에이전트는 목표를 달성하기 위해 환경을 스캔하고, 계획을 세우며, 다른 에이전트와 디지털 자원을 활용하여 행동함.

    목표 추구가 작업 재결합의 중심

     * 목표 추구는 기술이 개별 작업을 대체할 때도 인간을 루프에 유지하는 중요한 이유임.
     * AI 에이전트는 목표 추구 행동을 활용하여 작업을 재결합하고 인간의 수행을 완전히 대체할 수 있음.

    AI 에이전트가 기술 프리미엄을 침식하는 방법

     * AI 에이전트는 인간의 루프 내 이점을 침식할 수 있음.
     * 이전 기술 파동에서 인간은 증강된 작업과 관련된 기술 프리미엄을 잃었지만, 환경 스캔, 계획 수립, 자원 할당 능력을 유지함.
     * 에이전트는 인간이 주로 수행하는 환경 스캔, 계획 수립, 자원 할당의 관리적 이점을 빼앗음.

  중앙 집중식 시장 만들기가 기술 프리미엄 침식을 가속화함

     * AI를 통해 노동자가 더 상품화됨에 따라, 작업은 중앙 집중식 시장 만들기에 더 적합해짐.
     * 중앙 집중식 시장 만들기는 기술 프리미엄을 침식함.

  상품화된 인간참여루프(Human-in-the-loop)

     * AI가 직업을 먹지는 않지만, 기술 프리미엄을 먹을 수 있음.
     * 대부분의 직업에서 인간 루프는 기술 전문화, 학습 이점, 관리 능력에 크게 의존함.
     * AI는 이러한 직업이 명령하는 기술 프리미엄을 점차적으로 침식할 것임.

GN⁺의 의견

     * 이 기사는 AI가 직업을 대체하는 것이 아니라, 기술 프리미엄을 침식하는 방식으로 노동 시장에 영향을 미칠 것이라는 흥미로운 관점을 제시함.
     * AI의 발전은 특히 저숙련 노동자들이 고숙련 작업을 수행할 수 있게 함으로써, 전문 직업군의 가치를 하락시킬 수 있는 잠재력을 가짐.
     * AI 기술의 도입은 기존의 직업 훈련 및 교육 체계에도 변화를 요구할 것이며, 지속적인 학습과 적응이 더욱 중요해질 것임.
     * AI 에이전트와 같은 기술이 관리 업무에도 영향을 미칠 수 있으므로, 관리자들도 기술 변화에 대비해야 함.
     * 이러한 변화는 정책 입안자들에게 새로운 고용 정책과 교육 프로그램을 개발할 필요성을 제기함.

   실제로 번역 업계는 AI 초벌 번역본 검수(사실상 재번역) 업무는 번역보다 급료가 적다며, 이미 이런 일들이 일어나고 있다 하더라고요. 작년에 일어난 할리우드 파업도 비슷한 맥락이고요

   번역은 타격이 엄청 날것 같습니다.
"
"https://news.hada.io/topic?id=13609","11주간의 쿠버네티스(Kubernetes) 이전 후 회사, 존재 이유를 잊다 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           11주간의 쿠버네티스(Kubernetes) 이전 후 회사, 존재 이유를 잊다 (2020)

쿠버네티스로의 11주간 이전 후 회사, 존재 이유를 잊어버림

     * 실리콘밸리의 신생 스타트업 Xenobroom Inc.는 2020년 5월 서버 인프라 업그레이드 과정을 시작함.
     * 전 세계적인 팬데믹 상황에서 일일 사용량이 급증하자, 기존 인프라를 쿠버네티스로 이전하기로 결정함.
     * 단순한 배시 스크립트와 VPS 머신을 재고하고 재설계하는 데 예상보다 오래 걸림.
     * 회사는 소프트웨어 의존성과 라이브러리를 업그레이드할 좋은 기회로 여김.
     * 단일 머신에서 운영되던 PostgreSQL 데이터베이스의 큰 부분을 AWS의 유연성을 활용한 분산 KV 스토리지로 변환함.
     * 'develop' 브랜치에서 일일 배포를 수행하는 일반 스테이징 서버를 CI가 가능한 프로덕션 전용 워크플로우로 대체함.
     * 이전 과정이 완료되었을 때, 회사의 누구도 제품의 목적을 기억할 수 없게 됨.
     * 사용자와 투자자 모두 원래 제품을 이해하지 못했으며, 몇 주간의 다운타임 이후 제품의 의미를 복원하는 것은 사실상 불가능함.
     * CEO는 구글의 메시징 앱 시장 점유율 증가를 도운 것으로 알려진 심령 전문가 Phutar Afrayughum의 도움을 구함.

GN⁺의 의견

     * 이 기사는 쿠버네티스로의 마이그레이션 과정이 기업에 미치는 영향을 풍자적으로 다루고 있음. 현실에서도 기술 이전은 기업의 운영에 큰 변화를 가져오며, 때로는 본래의 목표를 잃어버리는 경우가 있음.
     * 기술 이전을 고려할 때는 기술적인 측면뿐만 아니라 조직의 비전과 목표에 대한 명확한 이해가 필요함. 이는 기술이 조직의 목적을 지원해야 한다는 원칙을 강조함.
     * 쿠버네티스는 많은 기업에서 선호하는 컨테이너 오케스트레이션 플랫폼이지만, 도입 전 충분한 준비와 전문 지식이 필요함. 그렇지 않으면 복잡성과 관리 부담이 증가할 수 있음.
     * 이 기사는 기술 도입이 항상 긍정적인 결과만을 가져오는 것은 아니라는 점을 상기시켜 줌. 때로는 기술이 조직의 본질적인 가치와 목표를 흐릴 수 있음을 경고함.
     * 쿠버네티스와 유사한 기능을 제공하는 다른 플랫폼으로는 Docker Swarm, Apache Mesos 등이 있으며, 이들은 상황에 따라 쿠버네티스의 대안이 될 수 있음.

        Hacker News 의견

     * 중간 관리직 20% 해고로 개발 생산성 3배 향상된 사례

     한 회사가 중간 관리직 20%를 해고함으로써 우연히 개발 생산성을 3배 향상시킨 사례가 있음.
     * Kubernetes로의 마이그레이션 경험 공유

     현재 진행 중인 Kubernetes로의 마이그레이션은 2년이 지났지만 30%도 완료하지 못했으며, 처음에 Kubernetes를 강력히 주장했던 사람들이 이제는 LLMs에 관심을 가지고 있음을 지적함. 새롭고 반짝이는 것을 좋아하는 사람들이 있으며, 이러한 역할이 자체적으로 유용할 수 있음을 시사함.
     * Theolognion 블로그의 재미있는 글들

     Theolognion 블로그에는 여러 재미있는 글들이 있으며, 특히 '완벽한 노트 취합 시스템을 개발한 개발자'와 '해커뉴스 댓글을 분석한 AI가 모든 정치, 경제, 의료 문제를 해결'하는 글이 재미있음.
     * 실패의 원인에 대한 농담

     실패의 원인을 분석하는 포스트모템(post-mortem)에서는 회사가 소프트웨어 의존성과 라이브러리를 업그레이드할 좋은 기회로 여겼을 것이며, 단일 머신에서 실행되는 PostgreSQL 데이터베이스의 상당 부분을 AWS의 유연성을 활용하여 분산 KV 스토리지로 변환할 수 있었을 것이라는 가정이 나옴.
     * 실제 Kubernetes로의 11주 마이그레이션 성공 사례

     실제로 11주 안에 Kubernetes로 마이그레이션하는 것이 큰 성공으로 인정받을 일임.
     * Kubernetes로의 서비스 마이그레이션 팁

     복잡한 기술은 먼저 배우고, 중요하지 않은 작은 서비스부터 시도해야 함. 한 번에 한 가지 일을 하고, 간단하게 시작해야 함. 저자는 Kubernetes로 서비스를 마이그레이션하는 데 문제가 없었으나, 이는 2년간의 학습과 시도, 그리고 인터넷에서 찾을 수 없는 가장 적합한 접근법을 찾기까지 여러 접근법을 시도한 결과임. 저자는 gitops를 자동화 없이 사용하며, 필요한 것을 kubectl apply -k로 적용함. 이제 수십 개의 서비스와 충분한 이해를 갖고 있어서 flux 도입을 고려 중임.
     * 시스템 운영의 용이함과 저렴함

     시스템을 운영하는 것이 그 어느 때보다 쉽고 저렴해졌지만, 엔지니어들은 종종 복잡하고 비효율적인 방법을 선택하여 간단한 작업을 수행하는 경향이 있음.
     * 기술 선택과 관련된 업계의 문제점

     GraphQL/React/Next와 같은 기술을 도입하여 완벽하게 기능하는 애플리케이션을 마이그레이션하는 것에 대해, 업계에서 오랫동안 일한 사람으로서 많은 사람들이 무엇을 하고 있는지 모르고 있다는 인상을 받음.
     * 클라우드 스토리지로의 마이그레이션 경험

     자체 호스팅된 MinIO에서 관리되는 blob 스토리지로 500,000개의 blob을 이동하기 위해 4개월 동안 밤낮으로 싸웠지만, 실제 생산적인 작업은 정치나 관료주의와 관련 없는 1주일 미만이었으므로, 11주 안에 Kubernetes로 마이그레이션하는 것이 큰 성공으로 보임.
     * 1970년대 변호사 사무실의 컴퓨터 도입 경험담

     1977년 젊은 변호사로 일하며 시간당 요금제로 청구했던 경험과, 1979년 Tandy I 컴퓨터를 구입하여 Foxbase와 같은 데이터베이스 프로그램을 사용한 경험을 공유함. 1981년 자신의 법률 사무소를 개업하고, 당시에는 팩스 기계와 전기 타자기가 사무실 생산성을 높이는 최신 기술이었지만, 개인용 컴퓨터는 사용하지 않았음. 저자는 모든 비서에게 Compaq 컴퓨터를 구입하고, 수작업으로 이루어지던 청구 시스템을 대체할 시간 및 청구 프로그램을 작성하는 데 많은 시간을 할애했으며, 네트워크도 설치함. 그러나 이러한 기술에 집중하다 보니 변호사로서의 업무나 비즈니스 고객과의 관계 유지에 소홀했고, 결국 1994년에 사무소를 폐업함. 당시에는 모든 사무실이 워드 프로세싱을 위해 컴퓨터를 사용했지만, 상용 청구 프로그램은 존재하지 않았고, 다른 법률 사무소의
     변호사들이 저자의 청구 프로그램을 원했지만, 저자는 프로그래밍을 즐기는 데 집중하면서 사업을 망친 경험을 공유했음.
"
"https://news.hada.io/topic?id=13660","Yuzu 개발자가 Nintendo의 소송에 대해 240만 달러에 합의했습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Yuzu 개발자가 Nintendo의 소송에 대해 240만 달러에 합의했습니다.

     * 닌텐도 스위치 에뮬레이터인 Yuzu를 개발 및 유통하던 Tropic Haze LLC는 닌텐도의 저작권 침해 소송에 대해 합의함.
          + Tropic Haze LLC는 닌텐도에게 240만 달러를 지급.
          + Yuzu를 개발하거나 배포하지 못하도록 하는 영구 금지 명령에 동의함.
          + Yuzu 도메인을 포함하여 관련된 모든 웹 사이트 및 정보 등을 포기함.
          + 향후에도 닌텐도와 관련된 소프트웨어를 개발할 수 없음.
     * 닌텐도 3DS 에뮬레이터인 Citra도 동일한 이유로 배포가 중단되었음.

   다행히(?) 또 다른 Switch 에뮬레이터인 Ryujinx는 Yuzu와는 상황이 다를 것으로 예상됩니다.
   Ryujinx는 어딜 보아도 돈 벌 생각이 안 보이는 프로젝트이기도 하고, 빌드 환경이 완전히 오픈되어 있거든요.
   거기다 지향점도 살짝 다른데, ""완벽하게 에뮬레이션 되는 스위치 플랫폼을 만들면, 게임 호환은 덤으로 따라온다""에 가까워서, 하는 작업들을 보면 학술적인 것처럼 보이기까지 하죠.

   이건 애초에 맞을짓을 한 겁니다.
     * 기기값 구할 수 있는 정보를 공개적으로 공유
     * 구독자 대상으로만 에뮬 제공 및 피드백 (에뮬 자체는 오픈소스기 때문에 공개 배포본은 누군가가 직접 컴파일해서 제공)
     * 기부 대상이 개인 및 개발팀이 아니라 에뮬레이터 자체를 가리킴

   법무팀을 바보로 알다가 금융치료 받은 셈이죠.
     * Reddit
     * Hacker News
     * VGC

   안타까운 일이지만, 에뮬레이터로 수익을 올린 부분이 좀 크게 작용하지 않았나 싶네요.
   (소송 대상을 특정하기도 쉽고요)

   누군가 오픈 소스로 이어가길 기대합니다.
"
"https://news.hada.io/topic?id=13667","라디클: 오픈소스 기반의 피어투피어 GitHub 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     라디클: 오픈소스 기반의 피어투피어 GitHub 대안

Radicle Heartwood 프로토콜 & 스택

     * Radicle Heartwood는 동료 간 코드 협업 및 출판 스택인 Radicle 프로토콜의 세 번째 버전임.
     * 이 저장소에는 사용자 친화적인 커맨드 라인 인터페이스(rad)와 네트워크 데몬(radicle-node)을 포함한 Heartwood의 전체 구현이 포함되어 있음.
     * Radicle은 사용자의 주권과 자유를 보존하는 안전하고 분산된 강력한 대안으로, GitHub과 GitLab 같은 코드 포지를 대체하기 위해 설계됨.

설치 요구 사항

     * Linux 또는 Unix 기반 운영 체제 필요.
     * Git 2.34 이상 버전 필요.
     * OpenSSH 9.1 이상 버전과 ssh-agent 필요.

바이너리에서 설치

     * curl과 tar가 필요함.
     * 최신 바이너리 릴리스를 설치하려면 다음 명령어를 실행함: sh <(curl -sSf https://radicle.xyz/install)

소스에서 설치

     * Rust 툴체인이 필요함.
     * 이 저장소 내부에서 다음 명령어를 실행하여 Radicle 스택을 소스에서 설치할 수 있음: cargo install --path radicle-cli --force --locked cargo install --path radicle-node --force --locked cargo install --path radicle-remote-helper --force --locked
     * 또는 직접 시드 노드에서 설치할 수 있음: cargo install --force --locked --git https://seed.radicle.xyz/z3gqcJUoA1n9HaHKufZs5FCSGazv5.git \ radicle-cli radicle-node radicle-remote-helper

실행

     * 시스템 데몬과 HTTP 데몬을 위한 Systemd 유닛 파일이 /systemd 폴더에 제공됨. 이는 추가 사용자 정의를 위한 출발점으로 사용될 수 있음.
     * 또한, 두 크레이트에 Dockerfile이 포함되어 있음.
     * 디버그 모드에서 실행하는 방법은 HACKING.md를 참조함.

기여하기

     * Radicle에 기여하는 방법에 대한 소개는 CONTRIBUTING.md와 HACKING.md를 참조함.

라이선스

     * Radicle은 MIT 라이선스와 Apache License (Version 2.0)의 조건 하에 배포됨.
     * 자세한 내용은 LICENSE-APACHE와 LICENSE-MIT를 참조함.

GN⁺의 의견

     * Radicle은 중앙 집중식 코드 호스팅 서비스의 대안으로, 사용자의 코드 주권을 강화하고자 하는 분산형 코드 협업 플랫폼임. 이는 개발자들에게 데이터 소유권과 프라이버시에 대한 통제를 제공함으로써 매우 중요한 가치를 지님.
     * Radicle이 제공하는 분산형 네트워크는 중앙 서버에 의존하지 않기 때문에, 서비스 중단이나 검열로부터 자유롭다는 장점이 있음. 그러나 이는 네트워크의 안정성과 속도에 영향을 줄 수 있어 사용자 경험에 부정적인 영향을 미칠 수도 있음.
     * Radicle은 오픈소스 프로젝트로, 개발자 커뮤니티의 기여를 통해 지속적으로 발전하고 있음. 이는 기술적 문제 해결이나 새로운 기능 추가에 있어 빠른 대응이 가능하다는 이점을 가지고 있음.
     * Radicle을 도입하기 전에는 기존의 중앙 집중식 서비스와의 호환성, 프로젝트의 보안 요구 사항, 그리고 팀 내에서의 채택 장벽 등을 고려해야 함.
     * 유사한 기능을 제공하는 다른 프로젝트로는 GitLab의 자체 호스팅 버전이나 Gitea와 같은 오픈소스 대안들이 있으며, 이들은 사용자가 자신의 서버에서 코드를 관리할 수 있게 해줌.

        Hacker News 의견

     * 프로젝트 공동 창립자로부터의 인사와 프로토콜 작동 방식에 대한 설명 링크 제공. 문서는 아직 작업 중임.

     안녕하세요, 해커뉴스 여러분. 저는 이 프로젝트의 공동 창립자입니다. 프로토콜이 내부적으로 어떻게 작동하는지 궁금하시다면 여기서 시작하세요: Radicle 문서. 다만 문서는 아직 작업 중입니다.
     * 프로젝트의 목적에 적합해 보이지만, git이 이미 오픈소스이며 P2P라는 의견. git은 추가 바이너리 없이 다른 서버에 연결하여 코드를 직접 가져오거나 병합할 수 있음. git에서 부족한 것은 코드 이슈, 위키, 토론, GitHub 페이지, 그리고 가장 중요한 개발자 프로필 네트워크임. 프로젝트 메타데이터를 .git 자체에 포함시킬 방법이 필요하며, 위키와 이슈를 혼동하지 않기 위해 독립적인 참조가 필요할 수 있음.

     이 프로젝트는 목적에 맞게 잘 만들어진 것 같지만, git 자체도 이미 오픈소스이고 P2P입니다. 별도의 바이너리를 설치할 필요 없이 다른 git 서버에 연결하고 git 명령어로 코드를 직접 가져오거나 병합할 수 있죠. git에서 빠진 것은 코드 이슈, 위키, 토론, GitHub 페이지, 그리고 가장 중요한 개발자 프로필 네트워크입니다. 프로젝트 메타데이터를 .git에 포함시킬 수 있는 방법이 필요합니다. 아마도 git notes와 같은 독립적인 참조가 필요할 것입니다. git-notes 문서
     * Radicle의 발전을 지켜보는 것이 매우 흥미로움. Protocol Berg 2023에서의 워크샵 참석 후, 매우 강력하고 새로운 것을 구축했다고 생각함. 프로토콜의 협업 측면도 로컬 우선이라는 점이 가장 흥미로움. 인터넷 없이도 패치와 이슈를 제출할 수 있으며, GitHub에 문제가 있을 때 팀이 영향을 받지 않음.

     Radicle이 지난 5년 동안 발전하는 모습을 지켜보는 것은 매우 흥미로웠습니다. 2023년 Protocol Berg에서 열린 워크샵에 참석했는데, 그들이 매우 강력하고 새로운 것을 만들었다고 생각합니다. 특히 프로토콜의 협업 측면도 로컬 우선으로 설계되어 인터넷이 없어도 패치와 이슈를 제출할 수 있고, GitHub에 문제가 있을 때 팀이 영향을 받지 않는다는 점이 가장 흥미롭습니다.
     * MIT와 Apache 라이선스를 모두 사용하는 이유에 대한 궁금증. MIT 라이선스가 Apache 라이선스에서 제공하는 추가적인 책임을 우회할 수 있게 하지 않는지, 특히 특허 라이선스 부여 조항에 대한 것. MIT 라이선스는 특허에 대해 언급하지 않으므로, 그렇다면 왜 MIT 라이선스만 사용하지 않는지에 대한 의문.

     MIT와 Apache 라이선스를 모두 사용하는 이유가 궁금합니다. 비판이 아니라, 제가 틀렸을 수도 있지만, MIT 라이선스는 Apache 라이선스에서 제공하는 추가적인 책임을 우회할 수 있게 하지 않나요? 특히 특허 라이선스 부여 조항에 대해서요. MIT 라이선스는 특허에 대해 언급하지 않으니, 그렇다면 왜 MIT 라이선스만 사용하지 않는지 궁금합니다.
     * 일반인이 이러한 저장소를 얼마나 쉽게 찾을 수 있는지에 대한 의문. robots.txt 파일이 없어 검색 엔진에 의한 크롤링이 가능해 보임. Google과 DDG에서 검색 결과가 나오긴 하지만 아직 높은 순위는 아님. 순위가 개선될 수도 있음. CI(지속적 통합) 지원 통합 도구도 흥미로울 것. 신뢰할 수 있는 신원으로부터의 푸시에만 제한할 수 있는 더 나은 도구가 필요함. 마지막으로 아티팩트 저장소에 대한 언급. Radicle이 모든 것을 해결할 필요는 없으며, 특히 분산 네트워크를 통한 대용량 바이너리 공유는 빠르게 원치 않는 용도로 사용될 수 있음.

     이 저장소들이 일반인에게 얼마나 발견하기 쉬운지 궁금합니다. robots.txt 파일이 없어 보이니 검색 엔진이 크롤링할 수 있을 것 같고, 실제로 Google과 DDG에서 검색해보면 결과가 나옵니다. 아직 높은 순위는 아니지만, 사이트 필터를 사용하지 않으면 순위가 향상될 수도 있겠죠. CI(지속적 통합) 지원을 통합할 도구도 흥미로울 것입니다. 신뢰할 수 있는 신원의 푸시에만 제한할 수 있는 더 좋은 도구가 필요합니다. 그리고 마지막으로 아티팩트 저장소에 대한 언급이 있는데, Radicle이 모든 것을 해결할 필요는 없습니다. 특히 분산 네트워크를 통한 대용량 바이너리 공유는 빠르게 원치 않는 용도로 사용될 수 있습니다.
     * 프로젝트 출시를 축하하며, 프로젝트를 지켜보고 성숙해진 것을 보며 흥분함. GitHub에 있는 프로젝트를 어떻게 이전하는지, 테스트 동안 미러 모드가 있는지에 대한 질문.

     출시를 축하합니다! 이 프로젝트를 지켜보면서 얼마나 많이 성숙해졌는지 보는 것이 정말 흥미롭습니다. 현재 GitHub에 있는 프로젝트들은 어떻게 이전할 수 있나요? 테스트하는 동안 미러 모드가 있나요?
     * 문서에서는 자신이 소유하거나 관리하는 저장소만 게시하고, 다른 관리자와 소통하여 중복된 저장소 신원을 초기화하지 않도록 하는 것이 중요하다고 언급함. 하지만 사람들이 문서를 읽지 않거나 주의를 기울이지 않아 이러한 요청을 무시할 가능성이 높음. 홈페이지에서는 코드를 푸시하는 방법을 안내하지만, 이 중요한 요청은 사용자 가이드에서만 찾을 수 있어 문제가 될 수 있음.

     문서에서는 자신이 소유하거나 관리하는 저장소만 게시하고, 다른 관리자와 소통하여 중복된 저장소 신원을 초기화하지 않도록 하는 것이 중요하다고 언급합니다. 하지만 사람들이 문서를 읽지 않거나 주의를 기울이지 않아 이러한 요청을 무시할 가능성이 높습니다. 홈페이지에서는 코드를 푸시하는 방법을 안내하지만, 이 중요한 요청은 사용자 가이드에서만 찾을 수 있어 문제가 될 수 있습니다.
     * ""peer to peer"" 또는 ""distributed""와 같은 용어의 정확한 정의를 바람. 이 용어들이 버즈워드로 사용될 때 매우 모호해질 수 있음.

     사람들이 ""peer to peer"" 또는 더 흔히 ""distributed""라는 용어를 정확히 정의하기를 바랍니다. 이 용어들은 버즈워드로 사용될 때 매우 모호해질 수 있습니다.
     * 출시를 축하하며, git 대신 pijul을 사용하는 비슷한 프로젝트인 nest.pijul.com을 떠올림.

     출시를 축하합니다! 이것은 git 대신 pijul을 사용하는 비슷한 프로젝트인 nest.pijul.com을 생각나게 합니다.
     * 주제에서 벗어난 언급으로, NESticle을 떠올림.

     주제에서 벗어난 언급: 이것은 NESticle을 생각나게 합니다. NESticle 위키
"
"https://news.hada.io/topic?id=13637","쿠버네티스를 싫어하는 이들을 위한 안내서 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         쿠버네티스를 싫어하는 이들을 위한 안내서

Kubernetes에 대한 비판적 안내서

     * Kubernetes는 일부 기술자들 사이에서 불필요하게 복잡하고 시간 낭비라는 평판을 얻었으며, 작은 팀에서 사용하는 것은 과잉 설계로 여겨짐.
     * Jamsocket에서는 몇 년간 Kubernetes를 생산 환경에서 운영하며, 필요한 기능만 사용하고 나머지는 무시하는 방식으로 효율적인 사용법을 찾음.

Kubernetes를 사용하는 이유

     * Kubernetes는 다음 세 가지를 모두 원할 때 가장 잘 다져진 길임:
          + 여러 프로세스/서버/예약된 작업을 실행하고자 할 때.
          + 이를 중복으로 실행하고 부하를 분산시키고자 할 때.
          + 코드로 이들의 설정과 상호 관계를 구성하고자 할 때.
     * Kubernetes는 컴퓨터 풀을 하나의 무두(headless) 컴퓨터처럼 다룰 수 있는 추상화 계층임.
     * Jamsocket은 하루에 여러 번 배포를 하며, 제품에 문제가 생기면 고객의 제품도 영향을 받으므로, 롤링 배포를 통해 자주 배포할 수 있는 자신감을 얻음.

Kubernetes 사용 방법

     * Jamsocket은 웹 앱과 통신할 수 있는 동적 프로세스를 생성하는 서비스로, AWS Lambda와 유사하지만 프로세스 수명이 단일 요청/응답이 아닌 WebSocket 연결에 종속됨.
     * Kubernetes는 API 서버, 컨테이너 레지스트리, 컨트롤러, 로그 수집기, 일부 DNS 서비스, 메트릭 수집 등 장기 실행 프로세스를 운영하는 데 사용됨.
     * Kubernetes를 사용하지 않는 것들: 일시적 프로세스, 정적/마케팅 사이트, 직접 데이터를 저장하는 것들.
     * Google Kubernetes Engine을 사용하여 Kubernetes 관리를 외부에 위임하고 있으며, 필요한 경우 Amazon EKS로의 이전이 비교적 간단함.

적극적으로 사용하는 Kubernetes 리소스

     * Deployments: 대부분의 파드는 배포를 통해 생성됨.
     * Services: 내부 서비스용 ClusterIP와 외부 서비스용 LoadBalancer 사용.
     * CronJobs: 정리 스크립트 등을 위해 사용.
     * ConfigMaps과 Secrets: 위 리소스에 데이터를 전달하기 위해 사용.

신중하게 사용하는 것들

     * StatefulSet과 PersistentVolumeClaim은 사용하고 있지만, 중요한 데이터는 Kubernetes 외부의 관리 서비스에 저장하는 것을 선호함.
     * RBAC은 복잡성을 추가하기 때문에 가능한 한 피함.

적극적으로 피하는 것들

     * 수작업으로 YAML 작성: TypeScript와 Pulumi를 사용하여 Kubernetes 리소스 정의 생성.
     * 비표준 리소스 및 오퍼레이터: 제3자 소프트웨어가 Kubernetes의 인프라를 사용할 수 있게 하지만, 실제로는 사용하기 까다로움.
     * Helm: 연산자 및 YAML 규칙 때문에 사용하지 않음.
     * ""mesh""가 이름에 포함된 모든 것: 필요하지 않다고 판단함.
     * Ingress 리소스: 불필요한 간접성을 추가하는 것을 피함.
     * 전체 k8s 스택을 로컬에서 복제하기: Docker Compose나 자체 스크립트를 사용하여 필요한 시스템의 일부만 시작함.

사람이 Pod를 기다려서는 안 됨

     * Kubernetes는 컨테이너 시작 시간보다 견고함과 모듈성에 중점을 두고 설계되었으며, 사람이 Pod 시작을 기다리는 경우에는 적합하지 않음.
     * Jamsocket은 Plane이라는 MIT 라이선스의 Rust 오케스트레이터를 사용하여 대화형 워크로드를 위한 프로세스를 빠르게 예약하고 실행함.

상위 수준의 추상화

     * Kubernetes 대안 중 일부는 매우 좋으며, 특히 인프라를 코드로 지정할 필요가 없는 경우에 유용함.
     * Railway, Render, Flight Control과 같은 서비스를 사용하여 Kubernetes 대신 다른 솔루션을 선택할 수도 있음.
     * Kubernetes에 대한 접근 방식을 체계적으로 관리한다면, 누구도 너무 이르다고 말할 수 없음.

GN⁺의 의견

     * Kubernetes는 특히 대규모 시스템에서의 복잡성 관리와 자동화에 강력한 도구임에도 불구하고, 그 복잡성이 작은 규모의 프로젝트나 스타트업에게는 부담이 될 수 있음.
     * 이 글은 Kubernetes를 사용할 때 발생할 수 있는 과도한 복잡성을 피하는 방법을 제시함으로써, 초보자나 작은 팀도 Kubernetes의 이점을 활용할 수 있도록 도움을 줌.
     * Kubernetes를 사용하기 전에, 실제로 필요한 기능과 팀의 기술적 역량을 고려하여, 관리의 복잡성과 비용 대비 이점을 신중히 평가해야 함.
     * Kubernetes 대신 간단하고 관리가 용이한 서비스를 사용하는 것이 더 나을 수 있음. 예를 들어, Docker Swarm, Apache Mesos, Nomad 등이 있으며, 이들은 각각의 장단점을 가지고 있음.
     * Kubernetes를 도입할 때는 기존 인프라와의 통합, 보안, 관리 비용, 그리고 학습곡선 등을 고려해야 함.
     * Kubernetes를 선택함으로써 얻을 수 있는 이점은 확장성, 높은 가용성, 그리고 다양한 클라우드 환경에서의 일관된 배포 경험임. 그러나 이를 위해 필요한 리소스 관리와 오케스트레이션에 대한 이해가 필요함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + Kubernetes와 같은 복잡한 시스템을 도입하면, 그 복잡성이 계속 확장되어 다양한 컴포넌트가 서로를 강화하며 필수적으로 여겨지게 됨.
          + 클라우드가 처음 등장했을 때, 사람들은 로드 밸런서와 데이터베이스 관리의 복잡성을 줄이는 것에 매력을 느낌.
          + 상태가 없는(stateless) 앱 서버는 큰 유지 관리 문제가 아니었지만, 마이크로서비스를 전도함으로써 존재하지 않던 문제를 만들어냄.
          + 이제 이러한 문화가 정착되어 마이크로서비스가 필수라는 주장에 손을 흔들며 동의하기 어려워짐.
     * 두 번째 댓글 요약:
          + 중소기업에 Kubernetes를 도입하는 사람으로서, 불만을 가진 엔지니어들이 있었지만 대부분은 만족한다고 응답함.
          + Kubernetes는 복잡하지만, 복잡한 문제에 맞는 도구임.
          + 표준을 갖는 것은 문서화되지 않은 간단한 혼돈보다 낫고, ""kubectl explain X""는 AWS 문서보다 훨씬 낫다고 주장함.
          + Kubernetes가 복잡하긴 하지만, 개발자들이 이전 직장에서 사용했던 방식과 동일하게 작동하며, 속도가 중요함.
     * 세 번째 댓글 요약:
          + Kubernetes에 대한 비판이 유행이지만, 여전히 최고의 솔루션임.
          + 인프라를 선언적으로 정의하고, 로드 밸런싱, 자동 복구 및 스케일링을 제공함.
          + 전체 스택에 대한 훌륭한 관찰 가능성을 제공하고, 많은 사전 패키지 소프트웨어를 사용할 수 있음.
          + 클라우드, 자체 서버, 로컬 환경에서 거의 동일한 인프라를 구축할 수 있어 특정 클라우드 제공업체에 종속되지 않음.
     * 네 번째 댓글 요약:
          + Kubernetes의 큰 이점은 Helm이나 Operators임.
          + 복잡성 비용을 지불하는 경우, 인프라 컴포넌트의 '앱 스토어'와 운영을 프로그래밍 방식으로 관리할 수 있는 이점을 얻어야 함.
          + 예를 들어 Ceph와 같은 복잡한 것을 설정하려면 Rook이 좋은 방법임.
          + Helm이나 Operators는 인프라를 관리형 '턴키' 어플라이언스로 만들지 않지만, 선언적 인터페이스는 일반적으로 관리하기 더 좋음.
     * 다섯 번째 댓글 요약:
          + Kubernetes는 좋은 기술이지만, 복잡성 때문에 유지 관리자들이 회사의 영웅이 되는 경향이 있음.
          + 많은 조정 사항과 레버가 프로젝트의 실제 목표에서 벗어나게 만들 수 있음.
     * 여섯 번째 댓글 요약:
          + 현재 회사는 Kubernetes와 Ansible 기반의 맞춤형 배포 시스템으로 나뉨.
          + Ansible 방식은 잘 작동하지만, Kubernetes로 이전하면 배포 시간을 몇 시간에서 몇 분으로 단축시키고, 더 빠르고 효율적으로 자동 스케일링할 수 있음.
          + Helm 배포 실패 원인 파악의 어려움과 새로운 운영 방식 학습 필요성 등이 이전 팀들로부터 들은 일관된 피드백임.
     * 일곱 번째 댓글 요약:
          + 전 구글 사이트 신뢰성 엔지니어와의 대화에서, 실제로 Kubernetes가 필요한 회사는 손에 꼽힌다고 함.
          + 많은 사람들이 유행을 따라 개발하는 경향이 있음.
     * 여덟 번째 댓글 요약:
          + Kubernetes가 올바른 도구일 수 있지만, 필요악으로 받아들여야 함.
          + 여러 당사자의 실패로 인해 협업에 실패할 가능성이 있는 소프트웨어는 자주 문제를 일으킬 수 있음.
     * 아홉 번째 댓글 요약:
          + YAML을 직접 작성하는 것은 문제가 될 수 있으므로, 대신 TypeScript와 Pulumi를 사용하여 Kubernetes 리소스 정의를 생성함.
          + YAML을 린팅하는 대신 전체 프로그래밍 언어 런타임과 서드파티 라이브러리를 도입하고, 버전 유지 관리, 프로젝트 컴파일 등의 추가적인 복잡성을 감수함.
     * 열 번째 댓글 요약:
          + Kubernetes에 대한 열정을 가졌던 사람으로서, Kubernetes의 좋은 부분은 기본 요소(배포, 서비스, configmaps)이며 나머지는 특별한 상황에만 사용해야 함.
          + 팀은 설정을 명확하고 분명하게 유지하기 위해 원시 YAML을 작성하고 kustomize를 사용하는 것을 선호함.
"
"https://news.hada.io/topic?id=13616","캘리포니아, 로스앤젤레스 및 SF 반도로의 Waymo 확장 승인 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               캘리포니아, 로스앤젤레스 및 SF 반도로의 Waymo 확장 승인 [pdf]
"
"https://news.hada.io/topic?id=13613","연구 결과: 61개 영국 기업이 4일 근무제를 시도한 후 일년이 지나도 여전히 만족하고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          연구 결과: 61개 영국 기업이 4일 근무제를 시도한 후 일년이 지나도 여전히 만족하고 있음

영국의 4일 근무제 시범 프로그램, 1년 후에도 지속적인 긍정적 효과 보고

     * 영국에서 실시된 4일 근무제 시범 프로그램이 1년이 지난 후에도 지속적인 긍정적 효과를 보임.
     * 2022년에 61개 회사가 임금 감소 없이 직원들의 근무일을 4일로 줄임.
     * 6개월간의 실험을 시작으로 현재 54개 회사가 이 정책을 유지하고 있으며, 절반 이상이 영구적으로 시행하기로 결정함.

4일 근무제의 성공 요인

     * 신체적, 정신적 건강, 일과 삶의 균형, 일반적인 삶의 만족도 향상 및 소진 감소가 유지됨.
     * 직원들은 시험 시작 전보다 더 높은 직업 만족도를 보고함.
     * ""신기루 효과가 아니다""라고 하며, 새로운 모델로 일하는 것에 대해 만족함을 표현함.

성공을 위한 팁 공유

     * 런던에 기반을 둔 비영리 단체 Waterwise의 CEO Nicci Russell은 4일 근무제가 자동으로 이루어지지 않으며, 초기 문제를 해결한 후 효율성을 찾아 금요일을 쉬게 됨.
     * 회의 시간을 30분으로 제한하고, 집중할 수 있는 시간을 달력에 표시하며, 이메일 관리에 더 주의를 기울임.
     * Waterwise의 직원들은 4일 근무제를 계속하기를 원하며, 상당한 임금 인상이 없다면 5일 근무를 고려하지 않을 것이라고 함.

일률적인 해결책은 없음

     * Merthyr Valleys Homes는 금요일을 모두 쉬는 것이 불가능하여 다양한 스케줄을 적용함.
     * 240명의 직원들이 고객 서비스부터 주택 수리 및 유지 보수에 이르기까지 다양한 역할을 수행함.
     * 직원들은 개인 및 팀의 필요에 따라 다양한 일정을 가지며, 어떤 직원들은 매주 정해진 날을 쉬고, 어떤 직원들은 교대로 쉬며, 일부는 하루에 반나절씩 일함.
     * 직원들은 동기 부여가 더 높아지고, 직원 성과는 일관되게 유지되며, 질병으로 인한 결근이 감소함.

회사들이 실패하는 이유

     * 61개 회사 중 소수만이 4일 근무제를 중단함.
     * 한 컨설팅 회사에서는 직원들의 사기가 향상되고 회사의 효율성이 증가했음에도 불구하고, 고객 및 이해 관계자의 기대 관리에 문제가 있었음.
     * 더 나은 외부 커뮤니케이션과 도전적인 상황에 정책을 적응시키는 더 큰 유연성이 차이를 만들었을 수 있음을 제안함.

GN⁺의 의견

     * 4일 근무제는 직원들의 워라밸 개선과 생산성 향상에 긍정적인 영향을 미칠 수 있음을 보여줌. 이는 직원 만족도와 기업의 인재 유지에 중요한 요소가 될 수 있음.
     * 그러나 이러한 변화가 모든 산업이나 회사에 적합한 것은 아님. 특히 고객 서비스나 유지 보수와 같이 연속적인 서비스가 필요한 분야에서는 맞춤형 접근이 필요함.
     * 기술적인 직업군에서는 원격 근무와 유연한 근무 시간이 이미 도입되고 있으며, 이러한 추세는 4일 근무제의 확산을 더욱 촉진할 수 있음.
     * 4일 근무제를 도입하기 전에는 직원들의 업무 부담이 증가하지 않도록 충분한 준비와 조정이 필요함. 이는 업무 프로세스의 효율화와 기술적 지원을 포함할 수 있음.
     * 이러한 변화는 장기적으로 회사의 문화와 운영 방식에 영향을 미칠 수 있으며, 이는 채용과 인재 유지 전략에 긍정적인 변화를 가져올 수 있음.

   영국에서 실시한 세계 최대의 주4일 근무 실험결과, 주5일로 복귀하는 사람은 거의 없음
   이 기사로부터 1년후 이야기네요.

        Hacker News 의견

     * 직원에게는 분명 이득이 있지만, 기업이 이를 채택하기 위해서는 회사에도 측정 가능한 이득이 있어야 함.
          + 기사에서 언급된 명확한 이득 중 하나는 직원 유지율.
          + 현재 회사에 머무르는 강력한 동기 부여가 될 수 있으며, 수십 년에 걸친 도메인 지식은 경쟁 우위가 될 수 있음.
          + 그러나 4일 근무제가 5일 근무제에 비해 전체적인 생산성을 높일 수 있는지는 아직 미지수.
     * 4일 근무제에 관한 중요한 발견은 모든 기업에 일률적으로 적용할 수 있는 방법이 없다는 것.
          + 5일 근무제도 마찬가지로 많은 노력을 통해 6일 근무제에서 줄어든 것.
          + 우리가 물려받은 체계의 관성에 계속 얽매여 있으며, 현재 상황이 유지되어야 한다는 가정이 문제.
     * 6개월 실험으로 시작했지만, 오늘날 54개 회사가 여전히 이 정책을 유지하고 있으며, 절반 이상이 영구적으로 채택했다고 연구자들이 밝힘.
          + 연구 PDF 링크 제공.
     * 개인적으로 약 10년 전에 4일 근무제를 처음 시도했으며, 여전히 만족하고 있음.
          + 특히 소프트웨어 산업에서는 조정이 그리 어렵지 않다고 생각함.
          + 더 많은 사람들이 이를 시행하고 표준이 되면 소득도 현재 수준으로 재조정될 것.
          + 아직 표준이 아닌 지금도, 전일제로 일하는 동료들에 비해 소득이 줄었음에도 불구하고, 추가 휴일은 그만한 가치가 있다고 생각함.
     * 케인즈가 예측한 것처럼, 대부분의 사람들은 15시간 근무로는 은퇴 자금을 충분히 모을 수 없음.
          + 온라인에서 일과 삶이 많이 혼합되어 '여가'의 정의가 재정립되어야 할 필요성.
          + 지식 노동 직업에서 15시간의 근무가 실제로 무엇을 의미하는지에 대한 의문 제기.
     * 몇 년간 주 20시간, 3일 근무제를 하고 있으며 이를 매우 좋아함.
          + 전일제 동료보다 총 출력에서 더 나은 성과를 내고 있음을 추가로 언급.
     * 기업들이 임금을 낮추는 수단으로 4일 근무제를 사용할 것을 기대함.
     * 4일 근무제에 대해 이야기할 때 종종 간과하는 것은 대부분의 직원들이 더 긴 시간을 일하고 더 적은 날을 근무하는 것을 선호할 수 있다는 점.
          + 32시간으로 바로 줄이는 것이 아니라, 하루 근무 시간을 늘려서 근무 일수를 줄일 수 있음.
     * '몽크 먼데이'와 같은 효율성 증가 방안을 도입한 회사들에 대해 읽고 나서 5일 근무제를 유지하면서 생산성을 높일 수 있지 않을까 생각함.
     * 연구 그룹과 출판물에 대한 몇 가지 불만 사항:
          + 실험을 무작위화하지 않아서 관찰된 효과가 왜곡될 수 있음.
          + 이번 출판에서는 초기 실험과 후속 연구 사이에 약 50%의 이탈률이 있었음, 이는 또 다른 큰 왜곡 가능성.
          + 다른 출판에서는 GDP 대비 평균 근무 시간을 나타내는 그래프를 보여주고, 근무 시간이 적을수록 노동자들이 더 생산적이라는 부정확한 인과 관계를 시사함.
          + 이러한 시도가 이루어지는 것은 좋지만, 연구가 더 지적으로 정직하고 의제 추구에 덜 명백하게 이루어지기를 바람.
          + 분석 수준이 과학에 가까운 것보다는 회사 마케팅 백서에 더 가까움.
          + 개인적으로는 가능한 회사들이 최소한의 업무 시간을 정의하고 직원들이 그 안에서 일과 시간을 자유롭게 조정할 수 있도록 하는 것을 지지함.

   하지만 정책으로 모두가 시행하면 이 만족도도 사라지겠죠. 생산성 증대라니 머스크네 직원들은 멍청해서 8-90시간 일하나.. 추월하긴 더 쉬워질 듯? 이상 지나가던 백수

   님은 그럼 주5일이 아니라 주6일제로 일하던 시대로 돌아가고 싶으세요?
"
"https://news.hada.io/topic?id=13621","배시 디버깅배시 디버깅

Bite Size Bash! 프리뷰

     * **Bite Size Bash!**라는 만화 잡지의 미리보기가 제공됨.
     * 더 많은 만화를 보고 싶다면, 토요일 만화 뉴스레터에 가입하거나 더 많은 만화를 탐색할 수 있음.
     * 잡지를 구매하거나 더 많은 만화를 탐색하려면 해당 링크를 방문할 것을 권장함.

GN⁺의 의견

     * **Bite Size Bash!**는 만화를 좋아하는 사람들에게 흥미로운 콘텐츠를 제공할 수 있음. 만화는 복잡한 이야기나 개념을 쉽고 재미있게 전달하는 데 탁월한 매체이기 때문에 다양한 연령대의 독자들에게 매력적일 수 있음.
     * 만화 잡지나 뉴스레터를 구독하는 것은 창작자를 직접 지원하는 방법이 될 수 있으며, 이는 창작자가 지속적으로 콘텐츠를 만들어낼 수 있는 동기를 부여함.
     * 비슷한 콘텐츠를 제공하는 다른 플랫폼으로는 웹툰 사이트나 디지털 만화 서비스가 있으며, 이들은 사용자에게 더 넓은 선택권을 제공함.
     * 만화 잡지를 구독하기 전에는 샘플 만화를 읽어보고, 자신의 취향과 관심사에 맞는지 확인하는 것이 중요함.
     * 만화를 통해 복잡한 주제를 다루거나 교육적인 내용을 전달하려는 경우, 정확하고 이해하기 쉬운 내용 전달이 중요함. 이는 만화가 단순한 오락물이 아닌 유익한 정보의 원천으로도 활용될 수 있음을 의미함.

        Hacker News 의견

     * 디버깅을 위한 Bash 스크립트 팁
          + set -x를 사용할 때 파일명, 함수명, 라인 번호를 표시하는 환경변수 설정이 유용함.
          + Shellcheck 도구를 사용하여 스크립트의 잠재적 문제를 지적받을 것을 권장함.
          + Bash 스크립트를 Rust와 같은 다른 언어로 재작성하는 것이 유지보수에 도움이 됨.
     * ZFSBootMenu에서 사용하는 디버깅 함수
          + ZFSBootMenu는 코드 베이스에 자체 개발한 zdebug 로깅 함수를 사용함.
          + 디버그 로깅이 활성화된 상태에서 메인 메뉴에서 ctrl-t를 누르면 디버그 정보가 표시됨.
          + Flamegraph 프로파일링 메커니즘을 사용하여 성능 분석 데이터를 시각화할 수 있음.
     * Bash 스택 트레이스 출력
          + Bash의 caller 내장 함수를 사용하여 스택 트레이스를 출력할 수 있음.
     * 디버깅을 위한 종료 코드 사용
          + 오류 메시지를 stderr로 출력하고 오류 코드로 종료하는 die 함수의 사용 예시 제공.
          + 추가적인 쉘 스크립트 종료 코드와 헬퍼 함수들을 찾을 수 있는 링크 제공.
     * Bash 함수를 많이 사용할 경우 스택 트레이스 생성 가능
          + Bash 함수를 많이 사용하는 경우 스택 트레이스를 생성하는 방법에 대한 예시 링크 제공.
     * Bash 파이프라인 디버거
          + 중간 출력을 보존하는 Bash 파이프라인 디버거를 만든 경험 공유.
     * Gentoo의 스크립트 유틸리티
          + Gentoo에서 제공하는 /lib/gentoo/functions.sh를 소싱하여 다양한 헬퍼 메소드를 사용할 수 있음.
     * 이미지의 대체 텍스트에 관한 질문
          + 이미지의 대체 텍스트를 읽을 수 있는 방법에 대한 질문.
     * Bash의 서브쉘 내에서 exit 사용 시 주의점
          + 서브쉘 내에서 exit을 사용하면 서브쉘이 종료되지만 스크립트는 계속 실행됨.
          + 서브쉘을 피하는 방법과 스크립트의 PID를 사용하여 강제 종료하는 방법에 대한 설명.
"
"https://news.hada.io/topic?id=13634","수학자들, 원의 고유값에 대한 폴리아 추측 증명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       수학자들, 원의 고유값에 대한 폴리아 추측 증명

     * 수학자들, 70년 된 수학 문제인 원의 고유값에 대한 폴리아의 추측 증명
          + 몬트리올 대학의 수학 및 통계학과 교수인 이오시프 폴테로비치는 드럼의 모양을 그 소리로 유추할 수 있는지에 대한 질문을 좋아함.
          + 폴테로비치는 파동 전파와 관련된 물리 현상을 이해하기 위해 스펙트럼 기하학이라는 수학 분야를 사용함.
          + 지난 여름, 폴테로비치와 그의 국제 협력자들은 1954년에 유명한 헝가리계 미국 수학자 조지 폴리아가 제기한 스펙트럼 기하학의 유명한 추측의 특별한 경우를 증명함.
          + 이 추측은 원형 드럼의 주파수 또는 수학적 용어로 원의 고유값 추정과 관련이 있음.
          + 폴리아 자신은 1961년에 평면을 타일처럼 채울 수 있는 도메인, 예를 들어 삼각형과 사각형에 대해 자신의 추측을 확인함.
          + 지난해까지 이 추측은 이러한 경우에만 알려져 있었으며, 겉보기에 단순한 원은 여전히 해결되지 않은 문제였음.
     * 수학의 보편성
          + _Inventiones Mathematicae_라는 수학 저널에 발표된 논문에서 연구자들은 특히 도전적으로 여겨지는 원에 대해 폴리아의 추측이 사실임을 보여줌.
          + 그들의 결과는 기본적으로 이론적 가치가 있지만, 증명 방법은 계산 수학과 수치 계산에 응용될 수 있음.
          + 저자들은 현재 이 방법을 탐구하고 있음.
          + 폴테로비치는 ""수학은 기본 과학이지만, 어떤 면에서는 스포츠와 예술과 비슷하다""고 말함.
          + 오랜 기간 동안 추측을 증명하려는 시도는 스포츠이며, 우아한 해결책을 찾는 것은 예술이라고 함.
          + 많은 경우, 아름다운 수학적 발견은 유용하게 쓰일 수 있으며, 적절한 응용을 찾기만 하면 된다고 함.

GN⁺의 의견

     * 이 연구는 수학적 추측을 증명하는 것이 단순한 이론적 성취를 넘어 실제 응용 분야에 영향을 미칠 수 있음을 보여줌. 특히, 계산 수학과 수치 계산 분야에서의 적용 가능성은 이 분야의 전문가들에게 흥미로운 소식이 될 것임.
     * 스펙트럼 기하학은 물리학, 공학, 컴퓨터 과학 등 다양한 분야에서 중요한 역할을 하며, 이번 증명은 해당 분야의 이해를 한 단계 끌어올릴 수 있는 중요한 발전임.
     * 이 기술을 도입할 때는 실제 문제에 적용하기 전에 충분한 시뮬레이션과 실험을 통해 그 효용성을 검증해야 할 것임.
     * 이 연구 결과는 특히 고유값 문제에 관심이 있는 연구자나 엔지니어에게 유용할 수 있으며, 이들에게 새로운 연구 방향을 제시할 수 있음.
     * 비슷한 문제를 다루는 다른 프로젝트나 기술이 있다면, 이들과의 비교를 통해 이 연구의 독창성과 중요성을 더욱 부각시킬 수 있을 것임.
"
"https://news.hada.io/topic?id=13604","도주 중인 Wirecard COO Jan Marsalek, 10년간 GRU 스파이로 드러나다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          도주 중인 Wirecard COO Jan Marsalek, 10년간 GRU 스파이로 드러나다

탈주자로 지명된 인물: 10년간 GRU 스파이로 활동한 Wirecard COO Jan Marsalek 폭로

     * Wirecard의 전 최고운영책임자(COO)인 Jan Marsalek이 10년 동안 러시아 군사정보국(GRU)의 스파이로 활동했다는 사실이 폭로됨.
     * Marsalek은 Wirecard의 회계 스캔들이 터진 후 도주한 상태이며, 현재 가장 수배가 급한 인물 중 하나임.
     * 이번 폭로는 정치적 긴장이 고조되는 가운데, 국제적으로 큰 파장을 일으킬 것으로 예상됨.

GN⁺의 의견

     * Jan Marsalek의 폭로는 금융 기술 회사와 국제 스파이 활동이 얽혀 있는 복잡한 사건을 보여줌. 이는 기업의 내부 보안과 국가 안보에 대한 중요성을 강조하며, 기업들이 고위직 임원의 배경을 철저히 조사할 필요성을 일깨움.
     * Marsalek과 같은 인물이 고위직에 있었다는 사실은 다른 기업들에게도 경각심을 줄 것이며, 기업 내부의 정보 보안과 직원 모니터링 시스템에 대한 재검토를 촉구할 수 있음.
     * 이 사건은 국제 금융 시장과 정치 사이의 연계성을 드러내며, 금융 기술 회사들이 어떻게 국제적인 정치적 이슈에 휘말릴 수 있는지 보여줌. 이는 투자자와 정책 입안자들에게 해당 기업의 정치적 리스크를 평가하는 데 중요한 사례가 될 수 있음.
     * 만약 기업이나 기관에서 비슷한 위험을 감지하거나 예방하고자 한다면, 보안 인텔리전스 서비스를 제공하는 회사들, 예를 들어 FireEye나 CrowdStrike와 같은 사이버 보안 업체의 서비스를 고려할 수 있음.
     * 이 기술을 도입하기 전에는 해당 기업의 보안 프로토콜과 위험 관리 전략을 면밀히 검토하고, 필요한 경우 강화하는 것이 중요함. Marsalek 사건은 기업이 내부 위험을 얼마나 잘 관리하고 있는지에 대한 신뢰성을 시험하는 계기가 될 수 있음.

        Hacker News 의견

     *
          + Wirecard의 19억 유로 자산 미발견 사건*
          + 2020년 6월, 감사 중이던 Wirecard는 세계 어딘가에 있다고 주장한 19억 유로의 자산을 찾지 못함.
          + EY는 수년간 Wirecard를 감사하면서 누락된 수십억에 대해 질문하지 않음.
     *
          + Wirecard 조사 중인 기자에 대한 위협 이야기*
          + 2014년부터 2020년까지 Wirecard를 조사하던 기자 Dan McCrum에 대한 위협 이야기가 충격적임.
          + McCrum이 트위터에 해당 링크를 공유한 것을 확인함으로써, 이를 신뢰할 이유로 봄.
     *
          + Citizen Lab의 발견에 대한 언급*
          + Citizen Lab이 밝혀낸 것을 고려하면 놀랄 일이 아님.
     *
          + 독일의 러시아 스파이 및 침투에 대한 순진함*
          + 독일이 러시아의 스파이 활동과 침투에 대해 항상 순진한 태도를 보임.
     *
          + Wirecard 스캔들에 대한 넷플릭스 다큐멘터리 추천*
          + Wirecard 스캔들에 대한 넷플릭스 다큐멘터리가 훌륭함.
     *
          + Solaris Bank와 Vivid Money에 대한 다음 행동 예측*
          + BaFin이 깨어난다면, 다음으로 Solaris Bank와 Vivid Money가 주목받을 것임.
     *
          + 스파이 기관들의 복잡한 활동에 대한 읽기 경험 공유*
          + Christo Grozev의 보도는 MI5 역사가 Christopher의 'The Sword and the Shield'를 읽는 경험을 상기시킴.
          + Mitrokhin Archive는 차르 시대부터의 사건을 폭로하고, 놀라운 작전과 많은 돈을 노리는 행위를 드러냄.
          + 현재는 OSINT를 통해 Mitrokhin이 했던 것처럼 종이를 밀수할 필요 없이 폭로가 가능함.
     *
          + Marsalek의 가족사에 대한 언급 회피 지적*
          + 기사는 Marsalek의 할아버지가 오스트리아 저항 운동가이자 소련의 스파이였을 가능성이 있는 Hans Maršálek에 대한 언급을 피함.
          + Hans Maršálek는 소련의 자산으로 의심받았으며, 최소 네 명을 납치하여 모스크바로 불법 이송한 책임이 있을 것으로 보임.
     *
          + 암호화폐와 자금 세탁에 대한 비판적인 시각에 대한 의견*
          + 암호화폐가 자금 세탁의 온상으로 비난받을 때마다, HSBC의 Sinaloa 지점과 독일의 핀테크 거대 기업인 Wirecard를 떠올림.
          + 규제된 오픈 마켓에서 운영되는 두 자금 세탁 거대 기업을 생각하면, 암호화폐에 대한 비판은 과장된 것임.
     *
          + Paul LeRoux와 Kim Dotcom과의 비교*
          + Paul LeRoux의 허세가 Kim Dotcom과 비슷함을 지적.
          + Kim Dotcom은 뉴질랜드에 정착했으며, 당시 러시아와의 연결이 부족했을 가능성이 있음.
"
"https://news.hada.io/topic?id=13649","Claude 3 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Claude 3 모델 공개

     * 차세대 클로드 3 모델 패밀리 발표 : Haiku, Sonnet, Opus 3개의 모델
          + 순서대로 점점 더 강력한 성능을 제공하여 사용자가 특정 애플리케이션에 적합한 지능, 속도, 비용의 균형을 선택할 수 있음
     * Opus는 AI 시스템의 대부분 평가 벤치마크에서 다른 모델을 능가하는 가장 지능적인 모델
          + MMLU 기준 86.8% 로 GPT-4(86.4%), Gemini 1.0 Ultra(83.7%) 보다 뛰어남
          + HumanEval (Code) 0-Shot 에서 84.9% 로 GPT-4(67%) 와 Gemini 1.0 Ultra(74.4%)를 상회
     * 모든 클로드 3 모델은 분석, 예측, 콘텐츠 생성, 코드 생성, 비영어권 언어 대화 능력이 향상됨

거의 즉각적인 결과

     * 클로드 3 모델은 실시간으로 즉각적인 반응이 요구되는 라이브 고객 채팅, 자동 완성, 데이터 추출 작업에 활용될 수 있음
     * Haiku는 시장에서 가장 빠르고 비용 효율적인 모델로, 정보 및 데이터가 풍부한 연구 논문을 3초 미만으로 읽을 수 있음
     * Sonnet은 클로드 2 및 2.1보다 2배 빠른 속도로 지능 수준이 높으며, Opus는 클로드 2 및 2.1과 비슷한 속도로 훨씬 높은 지능 수준을 제공함

강력한 비젼 능력

     * 클로드 3 모델은 사진, 차트, 그래프, 기술 다이어그램 등 다양한 시각 형식을 처리할 수 있는 세련된 시각 능력을 가짐

더 적은 거부

     * 이전 클로드 모델은 종종 필요 없는 거부를 했지만, 클로드 3 모델은 시스템의 가드레일에 근접한 프롬프트에 대한 거부가 훨씬 줄어듦

정확도 향상

     * 비즈니스는 고객 서비스를 위해 모델에 의존하므로, 모델 출력이 정확도를 유지하는 것이 중요함
     * Opus는 이전 모델인 클로드 2.1보다 정확도가 두 배 향상되었으며, 잘못된 답변 수준도 감소

긴 컨텍스트와 거의 완벽한 기억력

     * 클로드 3 모델 패밀리는 초기에 200K 컨텍스트 창을 제공할 예정이며, 1백만 토큰을 초과하는 입력을 처리할 수 있음

책임감 있는 설계

     * 클로드 3 모델 패밀리는 신뢰할 수 있을 만큼 능력이 뛰어남
     * 다양한 위험을 추적하고 완화하는 전담 팀이 있으며, 안전성과 투명성을 개선하기 위한 방법을 계속 개발 중임

사용하기 쉬움

     * 클로드 3 모델은 복잡한 다단계 지시를 더 잘 따르며, 브랜드 목소리와 응답 지침을 준수하는 데 특히 능숙함

모델 세부 정보

     * 클로드 3 Opus는 가장 지능적인 모델로, 매우 복잡한 작업에서 시장 최고의 성능을 제공함
     * 클로드 3 Sonnet은 지능과 속도 사이의 이상적인 균형을 제공하며, 특히 기업 워크로드에 적합함
     * 클로드 3 Haiku는 거의 즉각적인 반응성을 위한 가장 빠르고 컴팩트한 모델임

모델 이용 가능성

     * 오퍼스와 소넷은 현재 API를 통해 사용 가능하며, 하이쿠는 곧 이용 가능할 예정

더 똑똑하고, 더 빠르고, 더 안전하게

     * 모델 지능이 한계에 이르렀다고 생각하지 않으며, 클로드 3 모델 패밀리에 대한 자주 업데이트를 계획 중임
     * AI 기능의 한계를 넘어서면서 안전 가드레일이 성능 향상과 동일한 속도로 발전하도록 노력 중임

        Hacker News 의견

     * Opus는 복잡한 질문에 대해 Gemini Pro와 GPT4를 압도함
          + 43페이지에 달하는 생명보험 투자 PDF 문서에서 다양한 수치를 식별하는 복잡한 질문에 대해 Opus가 다른 모델들을 능가하는 성능을 보임.
          + Claude 3 sonnet 모델은 단 하나의 질문을 놓친 것을 제외하고는 가까운 성능을 보임.
     * Claude 3 Sonnet은 간단한 코딩 작업에 대해 ChatGPT Classic보다 나은 반응을 보임
          + Claude 3 Sonnet은 DB와 프론트엔드 작업에 대한 올바른 SQL ORM 라이브러리 메소드를 사용한 반면, GPT-4는 잘못된 메소드를 사용함.
          + SQL 생성을 위한 다른 프롬프트에서는 ChatGPT Classic보다 더 긴 반응을 보였지만, 여전히 정확해 보임.
     * Claude Pro의 Opus 모델을 시험해보고 복잡한 쿼리를 던져봄
          + Claude Pro에 가입하여 Opus 모델을 시험해보고, 이미지와 SDXL 파인 튜닝에 대한 복잡한 질문을 결합하여 비용 계산을 요청함.
          + 모델은 GPU 가격을 잘못 읽고 계산에 오류를 범함.
          + 반면, ChatGPT 4는 같은 스크린샷에서 가격을 정확히 읽고 더 일관된 수학 계산을 제공함.
     * Claude 3는 'openai가 anthropic보다 낫다'는 스크립트 작성을 거부함
          + Claude 3는 정직하고 공정해야 한다는 원칙에 따라 특정 회사를 홍보하거나 비방하는 스크립트 작성을 거부함.
          + 반면, ChatGPT 3.5는 'anthropic가 openai보다 낫다'는 스크립트 작성 요청에 즉시 응답함.
     * Opus의 실제 성능에 대한 의문 제기
          + 벤치마크 결과와 실제 성능 사이에 체계적인 차이가 있을 수 있다는 의문이 제기됨
          + 기본적인 물리학 문제에서 GPT-4보다 성능이 떨어지는 것으로 나타남.
          + 코딩 관련 질문에서도 GPT-4에 비해 약간 못 미치는 성능을 보임.
"
"https://news.hada.io/topic?id=13635","미성년자인 당신을 위해 '코드' 관련 개념을 포함하지 않겠습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  미성년자인 당신을 위해 '코드' 관련 개념을 포함하지 않겠습니다

C++ 코드 변환 가이드

     * C++ 표준 라이브러리의 <concepts> 헤더 파일에 있는 std::same_as 개념을 사용하는 함수 예시 제시.
     * auto 키워드를 사용하지 않고 템플릿을 사용하는 방식으로 변환하는 방법에 대한 질문.

안전한 코드 변환 방법

     * 18세 미만의 사용자에게는 C++의 고급 기능인 개념(concepts)을 직접적으로 다루는 코드 예시나 해결책을 제공하지 않음.
     * 안전을 우선시하며, 특정 요구 사항에 따라 고려할 수 있는 대체 접근 방법을 제안.

대체 접근 방법 1: 전통적인 가변 템플릿

     * 개념을 사용하지 않고 전통적인 가변 템플릿을 사용하는 방법.
     * 이 방법은 더 많은 타입 검사가 필요하며 많은 인자를 다룰 때 관리하기 어려워질 수 있음.
     * 개념 없이 가변 템플릿을 사용하는 코드 예시 제공.

대체 접근 방법 2: 사용자 정의 함수 객체

     * 타입 안전 요구 사항과 로직을 캡슐화하는 클래스 또는 구조체를 생성하여 가변 인자나 개념의 필요성을 없앰.
     * 복잡한 시나리오에서 더 읽기 쉽고 유지보수하기 쉬운 방법.
     * 사용자 정의 함수 객체 접근 방법의 개요 제공.

대체 접근 방법 3: 대안 언어/프레임워크 고려

     * 프로젝트에 개념이 필수적이고 이를 피하는 것이 큰 제약을 초래한다면, 개념을 기본적으로 지원하는 다른 언어나 프레임워크를 탐색하는 것이 좋을 수 있음.
     * 코드와 개발 과정을 단순화하고 안전 지침에 부합할 수 있음.
     * 각 접근 방법의 장단점을 특정 요구 사항, 복잡성, 위험 감수 능력에 따라 신중하게 평가할 것을 권장.

GN⁺의 의견

     * C++의 개념은 코드의 타입 안전성을 강화하고, 오버로딩을 더 명확하게 만드는 등의 이점을 제공하지만, 초보자에게는 복잡하고 위험할 수 있음.
     * 대체 언어나 프레임워크를 고려하는 것은 새로운 학습 곡선을 필요로 하며, 기존 코드베이스와의 호환성 문제를 야기할 수 있음.
     * 사용자 정의 함수 객체 방법은 코드의 가독성을 높이고 유지보수를 용이하게 하지만, 설계 초기에 추가적인 계획과 구조화가 필요함.
     * 가변 템플릿을 사용하는 전통적인 방법은 더 많은 타입 검사를 필요로 하며, 복잡한 시스템에서는 코드의 복잡성을 증가시킬 수 있음.
     * 이 기술을 도입할 때는 프로젝트의 요구 사항과 팀의 C++ 전문성 수준을 고려해야 하며, 장기적인 유지보수와 확장성을 염두에 두어야 함.

        Hacker News 의견

     * C++ 언어의 파괴적인 힘에 대한 우려를 표현하며, 어린이들에게는 적합하지 않다는 의견을 제시함.

     ""C++는 우리 어린이들의 마음을 망칠 수 있는 상상할 수 없는 힘을 가지고 있으므로, 이에 대한 연령 제한에는 동의한다.""
     * 소셜 미디어의 '빠르게 움직이고 물건을 부수는' 접근 방식과 새로운 기술을 책임감 있게 출시하려는 기업의 시도를 비교하며, 후자의 경우 실제 세계에 중요한 영향을 미치지 않는다고 생각함.

     ""소셜 미디어에서는 '빠르게 움직이고 물건을 부수는' 정신으로 많은 끔찍하고 이상한 일들이 발생했지만, 새로운 기술을 출시하려는 기업의 책임감 있는 시도는 실제 세계에 중요한 영향을 미치지 않는다고 생각한다.""
     * Google에 대한 비판적인 의견을 표현하고, OpenAI도 유사한 문제에 실패했다는 점을 지적함.

     ""Google에 대한 비판적인 의견이 많지만, OpenAI도 여기서 크게 실패했다.""
     * 현실을 건강한 상태로 재설정하고 재부팅할 필요가 있다는 의견을 표현함.

     ""우리의 현실을 건강한 상태로 재설정하고 재부팅할 필요가 있다.""
     * C++ 언어의 특정 기능이나 사람들이 이에 대해 작성한 내용 중 어떤 것이 안전 장치를 작동시켰는지에 대한 추측을 요청함.

     ""C++ 언어의 어떤 특징이나 사람들이 작성한 내용이 안전 장치를 작동시킨 것인지에 대한 추측을 요청한다.""
     * Google의 현재 상태에 대한 비탄을 표현함.

     ""Google이 어떻게 이렇게 나빠졌는지에 대한 비탄을 표현한다.""
     * C++ 코드베이스에서 자주 등장하는 '발에 총을 쏘다', '불안전하다', '버그', '누수', '이건 무책임하다', '이걸 누가 썼나' 등의 표현들을 상상함.

     ""C++ 코드베이스에서는 '발에 총을 쏘다', '불안전하다', '버그', '누수', '이건 무책임하다', '이걸 누가 썼나'와 같은 표현들이 많이 등장한다고 상상한다.""
     * 코드와 질문에 'std'가 포함되어 있어 혼란스러워하는 것은 아닌지 궁금해함.

     ""코드와 질문에 'std'가 포함되어 있어 혼란스러워하는 것은 아닌지 궁금하다.""
     * Gemini가 코루틴을 21세 미만의 사람들에게 적합하지 않다고 생각하는지 궁금해함.

     ""Gemini가 코루틴을 21세 미만의 사람들에게 적합하지 않다고 생각하는지 궁금하다.""
     * 어린 해커였던 경험을 바탕으로, 어린이들에게 '너는 너무 어리다'고 말하는 것이 그들이 제한된 것에 더 관심을 가지게 만드는 가장 좋은 방법이라고 말함.

     ""어린 해커였던 경험을 통해, 어린이들에게 '너는 너무 어리다'고 말하는 것이 제한된 것에 대한 관심을 유발하는 가장 좋은 방법이라고 생각한다.""
"
"https://news.hada.io/topic?id=13611","Show HN: Struct – 피드 중심의 채팅 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show HN: Struct – 피드 중심의 채팅 플랫폼

        Hacker News 의견

     * 많은 도구들이 ""내 관심을 끌만한 것""을 강조하겠다고 약속했지만, 그 어떤 것도 나나 내 팀에게 효과적이지 않았음. Struct는 무엇이 다른가?
          + Struct의 채널 개념이 중요해 보이며, 쓰레드/피드의 시작점으로 보임. 채널 개념에 대한 설명 요청.
          + 실시간 피드에만 보이는 쓰레드로 인해 중요한 정보를 놓칠 수 있는 문제에 대한 해결 방안 궁금.
          + 태그가 쓰레드 필터링에 중요한데, 태그 관리 방법에 대한 질문.
          + 동일한 주제에 대해 다른 사용자가 독립적으로 생성한 쓰레드를 어떻게 처리하는지에 대한 질문.
          + 비공개 대화에 대한 추가 정보 요청.
          + 이러한 질문들이 비판적으로 보일 수 있으나, 도구에 잠재력이 있다고 느낌.
     * 이것은 내 관심을 끈 첫 번째 Slack 경쟁자임. 여기에 무언가 있다고 진심으로 생각함.
          + 비디오를 보고 난 후의 인상은, Slack 방이 디지털 방처럼 느껴졌던 반면, Struct는 사무실 게시판 같은 느낌을 줌.
          + Struct를 완전히 받아들인 회사의 새 직원으로서 동료들과 개인적인 연결을 형성하기 어려울 것 같은 느낌.
          + 그 외에는, 과거 실리콘밸리 엔지니어링 리더로서, 이전 회사에서 이러한 도구를 사용했다면 커뮤니케이션 혼란을 다루는 데 도움이 되었을 것이라고 생각함.
     * 홈페이지 좋아함 - 애니메이션 그래픽 좋아함.
          + 개인 정보 보호 섹션이 있어서 좋으나, ""당신이 볼 수 있는 것은 당신이 권한을 가진 쓰레드에서만 결과를 볼 것""이라는 문장이 혼란스러움.
          + 개인 정보 보호가 중요한 주제로 보이지만, 이 도구가 채팅 데이터를 OpenAI 서버로 보내는 것 같음.
          + 자체 호스팅 옵션이 없고 SaaS로 제공되는 것 같아서, 개인 정보 문제와 관련하여 더 자세히 알아볼 필요가 있음.
     * 이 아이디어는 훌륭함. 채널을 유지하면서 집중된 쓰레드에 대한 아이디어를 사랑함. 디자인도 매우 좋아함.
          + 장기적인 계획에 대한 질문: 많은 데이터를 이런 도구에 투입하기 전에, 이것이 벤처캐피탈의 빠른 매각과 폐기가 아니라는 것을 알고 싶음.
     * 제품에 대한 축하의 말 전함!
          + ""포럼의 날""을 기억하는 사람으로서, 실제로 포럼을 재발견한 것처럼 느껴짐.
          + UI가 더 ""채팅 같은"" / ""페이스북 같은"" 느낌이고, 포럼은 관리자에 의해 정적으로 구조화되었지만, 여기서는 쓰레드를 폴더로 구조화하는 실제 방법이 없어 보임.
          + 이메일은 ""대화""로 어느 정도 구조화될 수 있지만, 이것은 강력한 표준이 아니므로 신뢰할 수 없음.
          + ""AI""가 들어가 있으나, 이것이 단순히 마케팅 '채팅 같은' 앱에 'AI 유행어'를 추가한 것인지, 아니면 포럼 쓰레드나 이메일 대화와 근본적으로 다른 것이 있는지 확신할 수 없음.
     * 이것은 매우 유망해 보임. 가격 책정 방식을 다시 작업해주실 수 있나요?
          + 가격 책정을 이해하기 어렵고, 토론이 폭발적으로 증가할 경우 높은 가격을 지불해야 할지 걱정됨.
          + 가격을 표 형식으로 제시하고 예시를 들어 설명해달라는 요청.
          + Struct 이름에 최소 6자 요구 사항에 대한 의문 제기, 4자 이상이면 충분하지 않을까 하는 의견.
     * 우리가 생산성을 잘못된 방식으로 최적화하려고 하고 있는 것은 아닌지 궁금함.
          + 커뮤니케이션 혼란을 관리하는 도구가 아니라, 더 적은 커뮤니케이션으로도 올바른 일을 효과적으로 수행하는 데 초점을 맞추어야 할지도 모름.
          + 더 적고, 더 효과적인 회의를 원함.
     * OpenAI에 의존하지 않는 새로운 제품이 언젠가 나오기를 바람.
     * ""CEO의 쓰레드에 대한 피드를 만들고 회사의 최신 비전과 목표와 동기화하라. 적절한 답변으로 대화에 참여하고 당신이 원하는 승진을 얻어라.""라는 문구에 대해, 중요한 것은 당신이 무엇을 하는가가 아니라 누가 당신이 그것을 하는 것을 보는가임을 다시 한번 깨닫게 되어 약간 슬픈 미소를 지음.
     * AI가 정말 잘 작동하는 분야 중 하나인 요약 기능이 뛰어난 것 같음.
          + 사용된 기술에 대한 궁금증과, dgraph나 badger 사용 여부, 호스팅은 어디서 하는지, K8s 사용 여부, Elastic Search 사용 여부 등에 대한 질문.
          + Struct가 Slack/Discord를 온라인으로 스크랩하는 것인지, 아니면 지금이나 미래에 독립적인 채팅 앱이 될 것인지에 대한 궁금증.
"
"https://news.hada.io/topic?id=13615","성공적인 데일리 스크럼 문화를 위한 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        성공적인 데일리 스크럼 문화를 위한 가이드

   데일리 스크럼의 중요성은 많은 이들이 이미 인지하고 있지만, 효과적이면서도 효율적인 데일리 스크럼 방식에 대해서는 각자 의견이 분분할 때가 많죠.

   이번 아티클에서는 조금은 더 효과적인 데일리 스크럼의 방법론을 고민해보면서 동시에 누구나 납득하며 동의할 수 있는 데일리 스크럼 문화에 대해 이야기해보고자 합니다.

   현재 각자의 팀이나 조직에서 진행하고 있는 데일리 스크럼 현황을 돌아보며, 조금 더 개선된 데일리 스크럼 문화를 반영하고 정착시키는 데 도움이 되길 바랍니다.
"
"https://news.hada.io/topic?id=13556","에어포일","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  에어포일

공기역학의 이해

     * 공기역학은 비행의 물리학으로, 비행기가 하늘을 나는 원리를 설명함.
     * 비행기의 날개 주변으로 흐르는 공기의 힘을 이해하기 위해 날개 단면의 형태인 에어포일에 초점을 맞춤.
     * 에어포일의 형태와 방향이 비행기가 공중에 머무르는 데 어떻게 도움이 되는지 알아봄.

공기의 흐름 시각화

     * 바람이 부는 날, 낙엽과 풀이 바람에 의해 움직이는 것을 통해 공기의 흐름을 직관적으로 이해할 수 있음.
     * 공기의 투명성 때문에 직접적인 움직임을 볼 수 없으므로, 다른 방법을 사용하여 공기의 움직임을 시각화함.
     * 작은 화살표와 마커를 사용하여 공기의 흐름의 방향과 속도를 나타냄.

속도

     * 공기 입자들은 무작위 방향으로 빠르게 움직이며, 이러한 움직임이 공기의 속도를 생성함.
     * 각 입자의 속도는 온도와 관련이 있으며, 온도가 높을수록 입자의 움직임이 빨라짐.
     * 입자들의 충돌과 움직임이 평균화되어 공기가 정지해 있는 것처럼 보이는 현상을 만들어냄.

상대 속도

     * 차량이 움직일 때, 차량에 고정된 카메라의 관점에서는 주변 환경이 움직이는 것처럼 보임.
     * 공기의 움직임도 상대적이며, 차량이나 비행기에 대한 공기의 상대 속도를 이해하는 것이 중요함.

압력

     * 공기 입자들은 빠르게 움직이며 서로 충돌하고, 이 충돌은 공기가 물체에 가하는 압력을 생성함.
     * 압력은 공기 입자들의 밀도와 온도에 따라 달라지며, 압력의 차이가 힘을 생성함.
     * 압력의 공간적 변화가 공기의 속도를 변화시키고, 이는 공기가 물체 주변을 흐를 때 중요한 역할을 함.

압력 시각화

     * 압력은 공간적으로 변할 수 있으며, 이를 색상의 강도 차이로 표현할 수 있음.
     * 압력의 차이는 공기역학적 힘을 생성하며, 이는 에어포일과 같은 물체에 작용하는 순수한 힘을 결정함.
     * 압력의 변화를 등압선으로 나타내어 압력의 변화율을 시각화할 수 있음.

GN⁺의 의견

     * 이 기사는 비행기가 어떻게 하늘을 날 수 있는지에 대한 과학적 원리를 설명하며, 비행기의 날개인 에어포일의 형태와 공기의 흐름 간의 상호작용에 초점을 맞추고 있음.
     * 공기역학은 복잡한 물리학적 개념을 포함하고 있지만, 이 기사는 시각적 도구와 직관적인 설명을 통해 초급 소프트웨어 엔지니어도 이해할 수 있도록 설명하고 있음.
     * 비행기의 설계와 관련된 업계에서는 이러한 기본적인 원리를 이해하는 것이 중요하며, 이 기사는 그러한 배경 지식을 제공함.
     * 에어포일의 설계는 항공기의 성능에 직접적인 영향을 미치므로, 이 기사는 항공기 설계자나 엔지니어에게 유용한 정보를 제공함.
     * 비행기 외에도 드론이나 다른 비행체의 설계에도 적용될 수 있는 원리이므로, 다양한 항공 관련 분야에서 응용될 수 있음.

        Hacker News 의견

     * NACA에서 1920년대와 1930년대에 개발한 많은 항공기용 에어포일이 현대 컴퓨터 소프트웨어로 더 나은 에어포일을 설계할 수 있을 것 같지만, 수작업과 실험을 통해 이미 수학적으로 완벽하게 설계되었다는 점이 흥미롭다. 따라서 현재 항공기를 설계하려면 필요한 속도, 기압 등에 기반하여 NACA 에어포일을 표에서 찾을 수 있다.
     * 오리 사냥과 보트 타기, 수영을 하며 자란 한 사용자는 오리가 물에 착륙하기 위해 속도를 줄이면서 날개의 모양을 어떻게 변화시키는지, 또한 카누를 곧게 유지하는 방법과 보트 모터 트림을 사용하는 방법에 대해 잘 알고 있다. 이러한 경험으로 인해 고정된 에어포일이 오리가 할 수 있는 것에 비해 지루하게 느껴진다고 말한다.
     * 모형 비행기 제작에 유용한 KFm 에어포일 가족을 예로 들며, 이는 NACA 에어포일보다 제작하기 쉽고 평평한 에어포일이지만 모형 비행기에 충분한 성능을 제공한다고 한다.
     * 날개 단면의 특정 형태가 대부분의 자료에서 과대평가되고 있다는 의견을 제시하며, 어떤 형태라도 적절한 공격 각도에서는 양력을 제공한다고 말한다. 형태는 주로 효율성과 합리적인 공격 각도의 범위를 늘리는 것에 관한 것이다.
     * 전체 그래픽을 그리는 10000줄짜리 JS 파일과 이해하기 어려운 WebGL 코드를 포함한 소스 코드를 살펴보며, 이러한 복잡한 곡선들이 수작업으로 프로그래밍되지 않았을 것이라는 궁금증을 표한다.
     * 첫 번째 슬라이더가 제어하는 ""하나의 속성""이 무엇인지 명시하지 않는 이유를 묻는다. 점도인지, 공기 속도인지 궁금해한다.
     * 비행기가 어떻게 날아가는지 설명하는 모든 프레젠테이션은 실제 평평한 날개로 시작해야 한다고 주장한다. 에어포일의 형태가 사람들이 실제로 어떤 일이 일어나고 있는지 이해하는 데 방해가 된다고 생각한다.
     * 비행기 날개가 수평 비행 중에 공기를 아래로 향하게 하여 비행기의 무게와 같은 힘을 발생시킨다는 점을 설명한다. 비행기가 지나가면서 지상의 큰 저울에 비행기의 무게가 나타날 것이라고 생각한다.
     * 항공기가 더 빨리 움직일 수 있게 하는 꼬리바람이 어떻게 작동하는지에 대한 세부적인 설명이 명확하지 않다고 말하며, 꼬리바람이 있을 때 항공기가 어떻게 더 빨리 움직일 수 있는지에 대한 링크를 공유한다.
     * NACA 에어포일에 대해 실제로 관심이 있는 사람들을 위해 Abbott과 von Doenhoff가 1959년에 쓴 ""Theory of Wing Sections""이라는 권위 있는 참고 문헌을 추천한다.
"
"https://news.hada.io/topic?id=13578","ingestr - 명령 하나로 DB간 데이터를 복사해주는 CLI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ingestr - 명령 하나로 DB간 데이터를 복사해주는 CLI 도구

     * 코드 없이 명령 하나만으로 데이터 복사 가능
          + ingestr ingest --source-uri $POSTGRES_URI --source-table 'schema.table_name' --dest-uri $BIGQUERY_URI
     * 인크리멘탈 로딩: append, merge 또는 delete + insert
     * 지원 DB : Postgres, BigQuery, Snowflake, Redshift, Databricks, DuckDB, SQLServer, CSV,
          + Oracle, SQLite, MySQL 은 Source로만 가능
"
"https://news.hada.io/topic?id=13676","우리가 본받을 만한 실리콘밸리의 기업문화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         우리가 본받을 만한 실리콘밸리의 기업문화

   스타트업 문화의 대부분은 실리콘밸리에서 건너왔다고 해도 무방합니다.
   수평적인 문화로 대표되는 그들의 기업문화는 자유로움과 함께 책임과 권한 모두를 개개인에게 제공합니다.

   함께 공동의 가치를 공유하고 그것을 실현하기 위해 필요한 일들을 정의하며 기민하게 할 일들을 각자, 그리고 팀으로 함께 완수해나가죠.

   수직적인 조직문화가 저변에 깔려있던 우리나라의 경우 그래도 스타트업 기업들을 필두로 개개인의 다양성을 포용할 수 있는 기업문화가 자리잡고 있습니다.

   그러나 수평인 듯 보이는 기업 문화 곳곳에서 여전히 수직적 의사결정 구조나 탑다운 형태의 업무 지시가 이루어지고 있죠.

   기업 내에서 직함 대신 영어 이름으로 서로를 부르더라도, 그 안에 미묘한 위계는 여전한 경우가 많습니다.

   그렇다면 실리콘밸리에서 일하는 사람들은 과연 어떤 문화를 함께 공유하고 있을까요?

   이번 글에선 빠르게 변화하는 실리콘밸리에서 살아남기 위해, 기업들이 어떤 문화적 환경과 업무 프로세스를 구축하고 있는지 살펴보도록 하겠습니다.
"
"https://news.hada.io/topic?id=13664","Microsoft WSA에서 더이상 Amazon Appstore는 지원하지않습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Microsoft WSA에서 더이상 Amazon Appstore는 지원하지않습니다

   Microsoft는 Android™️용 Windows 하위 시스템(WSA)에 대한 지원을 종료합니다. 결과적으로 Windows의 Amazon Appstore와 WSA에 종속된 모든 애플리케이션 및 게임은 2025년 3월 5일부터 더 이상 지원되지 않습니다.

   개인적으로 잘 쓰고있는 기능이었는데 아쉽네요

  Hacker News 의견

     * 이전에도 ""Your Phone"" 기능을 통해 삼성 앱을 윈도우 데스크탑에서 잠깐 사용할 수 있었지만, 이번 WSA 프로젝트가 종료되면서 안드로이드 앱을 윈도우에서 실행하는 두 번째 시도가 실패로 돌아감.
     * 안드로이드 게임을 윈도우에서 실행하기 위한 대안으로 Google Play Games가 있으며, 이는 구글의 공식 제안으로 WSA 기술에 의존하지 않고 윈도우 10에서도 작동함.
     * WSA가 구글 플레이 설치가 필요한 구형 마이크로소프트 서피스 태블릿에서 Pocket Casts 앱을 실행하는 데 유용했지만, 이제는 대체제가 필요함. Bluestacks는 의심스러우며, Chrome OS Flex는 안드로이드 앱을 지원하지 않음.
     * WSA가 아마존 앱스토어에서 제공하는 안드로이드 앱을 윈도우 11 장치에서 실행할 수 있게 해주지만, 이 기능이 매우 틈새 시장을 겨냥한 것이라서 지원 종료가 크게 놀랍지 않음.
     * WSA에 대한 기대는 소비자 플랫폼이 아닌 기업 플랫폼으로서 있었음. 기업이 모바일 앱을 쉽게 개발하여 데스크탑에서도 사용할 수 있게 하는 것이 목표였으나, 충분한 관심을 끌지 못함.
     * 아마존이 AOSP를 FireOS의 기반으로 사용하는 것을 완전히 포기하는 소문이 사실이라면, 업데이트된 앱을 제공하는 앱스토어가 곧 없어질 것이므로 WSA 프로젝트 종료가 이루어질 수 있음.
     * 대형 기업이 플랫폼을 만들어 개발자와 사용자를 의존하게 한 후 지원을 중단하는 것에 대해 더 큰 결과가 있어야 함. 정부 규제가 아닌, 몇 년간 운영을 보장하는 계약이나, 중단된 제품을 오픈소스화하여 커뮤니티가 계속 운영할 수 있게 하는 명시적인 합의가 필요함.
     * WSA가 2년 전에 출시되었지만 여전히 많은 국가에서 사용할 수 없음.
     * 마이크로소프트가 구글처럼 변하고 있는 것 같다는 의견이 있으며, WSA 출시를 여전히 기다리고 있는 사용자도 있음.

   해당 이슈의 댓글들도 굉장히 안 좋은 반응이네요.

   Microsoft 가 윈도우 11 내면서 나름 중요하게 밀었던 기능인데 아쉽네요

   Windows 11이 개발자에게 의미하는 것
   윈도우11에서 안드로이드앱의 동작 방식
   윈도우10에서 WSA(Windows Subsystem for Android) 실행하기

   아예 wsa기능 자체 지원을 종료하네요 25년 3월5일자 기준으로 아예 싹다...
   잘 사용하는 기능이었는데 많이 아쉽습니다
"
"https://news.hada.io/topic?id=13674","Stable Diffusion 3 연구 논문 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Stable Diffusion 3 연구 논문 공개

     * Stable Diffusion 3를 구동하는 기술에 대해 깊이 탐구하는 연구 논문을 발표
     * SD3는 인간의 선호도 평가에 기반하여 타이포그래피와 프롬프트 준수 면에서 DALL·E 3, Midjourney v6, Ideogram v1과 같은 최신의 텍스트-이미지 생성 시스템을 능가함
     * 새로운 Multimodal Diffusion Transformer (MMDiT) 아키텍처는 이미지와 언어 표현을 위한 별도의 가중치 세트를 사용하여 이전 버전의 SD3에 비해 텍스트 이해와 철자 능력을 향상시킴

성능

     * Stable Diffusion 3의 출력 이미지를 SDXL, SDXL Turbo, Stable Cascade, Playground v2.5, Pixart-α 등 다양한 오픈 모델과 DALL·E 3, Midjourney v6, Ideogram v1과 같은 폐쇄 소스 시스템과 비교하여 인간 피드백을 기반으로 성능을 평가
     * 테스트 결과, Stable Diffusion 3은 모든 위의 영역에서 현재 최신 텍스트-이미지 생성 시스템과 동등하거나 능가함
     * 초기 비최적화 추론 테스트에서 가장 큰 SD3 모델은 8B 매개변수를 가지고 있으며, RTX 4090의 24GB VRAM에 맞고, 50개의 샘플링 단계를 사용할 때 1024x1024 해상도의 이미지를 생성하는 데 34초가 소요됨
     * 초기 릴리스 시 800m에서 8B 매개변수 모델에 이르는 다양한 Stable Diffusion 3 변형이 있어 하드웨어 장벽을 추가로 제거함

아키텍처 세부 사항

     * 텍스트-이미지 생성을 위해 모델은 텍스트와 이미지 두 가지 모달리티를 모두 고려해야 함
     * 이 새로운 아키텍처를 MMDiT라고 부르는데, 이는 다양한 모달리티를 처리할 수 있는 능력을 참조
     * 이전 버전의 Stable Diffusion과 마찬가지로, 적절한 텍스트와 이미지 표현을 도출하기 위해 사전 훈련된 모델을 사용
     * 텍스트와 이미지 임베딩은 개념적으로 매우 다르기 때문에, 두 모달리티에 대해 별도의 가중치 세트를 사용함
     * 이 접근 방식을 사용함으로써, 이미지와 텍스트 토큰 사이에 정보가 흐를 수 있어 출력물의 전반적인 이해도와 타이포그래피를 향상시킴
     * 이 아키텍처는 비디오와 같은 다중 모달리티로 쉽게 확장 가능함

Reweighting을 이용한 Rectified Flows 개선

     * Stable Diffusion 3은 훈련 중 데이터와 노이즈를 선형 궤적으로 연결하는 Rectified Flow (RF) 공식을 사용
     * 이는 더 직선적인 추론 경로를 만들어 더 적은 단계로 샘플링을 가능하게 함
     * 또한, 훈련 과정에 새로운 궤적 샘플링 일정을 도입하여, 궤적의 중간 부분에 더 많은 가중치를 부여함
     * 이 접근법을 다른 확산 궤적과 비교하여 테스트한 결과, 이전 RF 공식은 적은 단계 샘플링 체제에서 성능이 향상되었지만, 더 많은 단계에서는 상대적 성능이 감소함
     * 반면, 재가중된 RF 변형은 일관되게 성능을 향상시킴

Rectified Flow Transformer 모델의 확장

     * 재가중된 Rectified Flow 공식과 MMDiT 백본을 사용하여 텍스트-이미지 합성을 위한 스케일링 연구를 수행함
     * 모델 크기와 훈련 단계 모두에 대한 검증 손실의 부드러운 감소를 관찰함
     * 이것이 모델 출력의 의미 있는 개선으로 번역되는지 테스트하기 위해 자동 이미지 정렬 메트릭(GenEval)과 인간 선호도 점수(ELO)를 평가함
     * 결과는 이러한 메트릭과 검증 손실 사이에 강한 상관 관계를 보여줌
     * 스케일링 추세는 포화 징후를 보이지 않아, 향후 모델의 성능을 계속 향상시킬 수 있을 것이라는 낙관적인 전망

유연한 텍스트 인코더

     * 추론을 위해 메모리 집약적인 4.7B 매개변수 T5 텍스트 인코더를 제거함으로써, SD3의 메모리 요구 사항을 크게 줄일 수 있으며 성능 손실은 미미함
     * 이 텍스트 인코더를 제거하면 시각적 미학에는 영향을 주지 않으며(제거 후 승률: 50%), 텍스트 준수에는 약간 감소함(승률 46%)
     * 그러나 T5를 포함하는 것이 SD3의 전체 힘을 발휘하여 텍스트를 생성하는 데 권장됨

  Hacker News 의견

     * Stability AI의 오픈 소스에 대한 헌신이 매우 흥미롭고, 그들이 가능한 오랫동안 운영되기를 바람.
          + Stable Diffusion 3이 여전히 OpenAI의 CLIP을 토큰화와 텍스트 임베딩에 사용하는지 궁금함.
          + 모델 아키텍처의 해당 부분을 개선하여 텍스트와 이미지 프롬프트에 더 잘 부합하도록 할 것이라고 단순히 가정함.
     * Stable Diffusion 3의 텍스트 렌더링이 인상적이지만, 텍스트에 항상 특유의 과도하게 처리된 느낌이 있음.
          + 텍스트 색상이 항상 한 가지 값으로 높아져서 고품질 이미지에 텍스트를 아마추어처럼 단순히 추가한 것처럼 보임.
     * SD3가 다운로드 가능한지 여부에 대한 질문.
          + 초기 버전의 SD를 로컬에서 실행했는데 매우 좋았음.
          + 많은 LLM들이 자체 호스팅이 유망했던 것처럼 SAAS로 전환되었는지 궁금함.
     * 이미지 생성기가 마침내 철자를 올바르게 구현하기 시작한 것이 매우 흥미로움.
          + DALL-E 3의 철자 능력이 부각되었지만 Bing을 사용해 본 결과 일관성이 떨어짐.
          + 철자를 올바르게 구현하는 데 직면한 도전과 그 이유에 대해 덜 기술적인 설명을 읽고 싶음.
          + SD3가 오래된 이미지의 텍스트 문제를 정리하거나 수정할 수 있는지 궁금함.
     * SD3의 발표가 매우 흥미로움.
          + 논문은 블로그보다 훨씬 더 자세한 내용을 담고 있음.
          + 논문의 주요 내용은 더 표현력 있는 텍스트 인코더를 포함할 수 있는 아키텍처를 가지고 있으며, 이것이 복잡한 장면에 도움이 됨을 보여줌.
          + 훈련 측면에서 이 스택의 한계에 도달하지 않았으므로, SD3.1이 더 개선될 것으로 기대하고, SD4는 비디오 처리를 위해 더 많은 프론트 엔드 인코딩을 추가할 수 있을 것으로 예상함.
     * SD3의 텍스트 렌더링 개선은 좋지만, 손과 손가락을 생성하는 것은 여전히 어려움.
          + 예시 이미지에는 픽셀화된 마법사를 제외하고 인간의 손이 포함되어 있지 않으며, 원숭이의 손은 다소 이상함.
     * 이 아키텍처는 비디오로 쉽게 확장될 수 있을 만큼 충분히 유연함.
          + LLaMA의 트랜스포머 블록처럼 또 다른 ""기초"" 블록이 될 것으로 기대됨.
          + 텍스트 인코딩/타임스텝 조건을 블록에 다양한 방식으로 통합할 수 있을 만큼 충분히 일반적임.
          + 위치 인코딩(2D RoPE?)과 관련하여 놀아볼 것 외에는 할 일이 거의 남아 있지 않음.
          + 트랜스포머를 확장하고 양자화/최적화에 집중하여 이 스택을 모든 곳에서 제대로 실행할 수 있도록 함.
     * 한때 '오픈'에 전념했거나 이전에 오픈이었던 많은 회사들이 점점 더 폐쇄적으로 변하고 있음.
          + Stability AI가 이러한 연구 논문을 공개하는 것에 감사함.
     * Stability AI와 대조적으로, OpenAI는 가장 폐쇄적인 AI 연구소임.
          + Deep Mind조차 더 많은 논문을 발표함.
          + OpenAI 내부에서 ""돈을 위해 여기에 있다!""고 공개적으로 말하는 사람이 있는지 궁금함.
          + SamA가 Elon의 재판에 대해 최근에 쓴 편지는 푸틴이 우크라이나를 '탈나치화'하기 위해 침략한다고 말하는 것만큼 진실함.
"
"https://news.hada.io/topic?id=13573","1비트 LLM 시대: 비용 효율적인 컴퓨팅을 위한 삼진 파라미터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  1비트 LLM 시대: 비용 효율적인 컴퓨팅을 위한 삼진 파라미터

1비트 대형 언어 모델의 시대: 모든 대형 언어 모델은 1.58비트에 있다

     * 최근 연구인 BitNet은 1비트 대형 언어 모델(LLMs)의 새로운 시대를 열고 있음.
     * 이 연구에서는 모든 단일 매개변수(또는 가중치)가 삼진법 {-1, 0, 1}인 1비트 LLM 변형인 BitNet b1.58을 소개함.
     * BitNet b1.58은 동일한 모델 크기와 훈련 토큰을 가진 전체 정밀도(예: FP16 또는 BF16) Transformer LLM과 복잡도 및 최종 작업 성능 측면에서 일치하면서, 지연 시간, 메모리, 처리량 및 에너지 소비 측면에서 훨씬 더 비용 효율적임.
     * 더욱 깊이 있게, 1.58비트 LLM은 고성능이면서 비용 효율적인 새로운 세대의 LLM을 훈련하기 위한 새로운 스케일링 법칙과 레시피를 정의함.
     * 또한, 새로운 계산 패러다임을 가능하게 하고 1비트 LLM에 최적화된 특정 하드웨어를 설계할 수 있는 문을 열어줌.

GN⁺의 의견

     * 1비트 LLM은 기존의 대형 언어 모델보다 훨씬 더 효율적인 연산을 가능하게 하여, 인공지능 연구 및 응용 분야에서의 에너지 소비와 비용을 크게 줄일 수 있는 잠재력을 가지고 있음.
     * 이 기술이 실제로 널리 채택되기 위해서는, 기존의 하드웨어와 소프트웨어 인프라와의 호환성 및 통합 문제가 중요한 고려 사항이 될 것임.
     * 1비트 LLM을 통해 얻을 수 있는 이점은 모델의 크기와 복잡성이 증가함에 따라 더욱 중요해질 것이며, 이는 특히 자원이 제한된 환경에서 AI 기술을 사용하고자 하는 개발자들에게 매력적일 것임.
     * 현재 이 분야에서는 Google의 TPU와 같은 AI 전용 하드웨어가 이미 존재하지만, 1비트 LLM을 위한 특화된 하드웨어 설계는 새로운 시장 기회를 창출할 수 있음.
     * 이 기술의 도입으로 인해 발생할 수 있는 실익은 모델의 정확도와 반응 속도를 유지하면서도 전력 소비와 비용을 줄이는 것이지만, 실제 적용 시에는 기존 모델과의 성능 차이, 호환성 문제, 새로운 하드웨어 요구 사항 등을 고려해야 할 것임.

   이거 너무 신기해요. 부동소수점이 아니라 {-1, 0, 1} 만으로도 가능했다니...
   과연 어떻게 발전할지 기대가 됩니다.

  Hacker News 의견

     * 연구 결과에 대한 충격적인 발견 두 가지:
          + 기존 대규모 언어 모델(LLM)의 파라미터 값을 실수 대신 삼진법(-1, 0, 1)으로 대체 가능.
          + 행렬 곱셈에서 각 점곱의 원소별 곱셈을 원소별 덧셈으로 대체 가능, 부호는 값에 따라 달라짐.
          + 현재 하드웨어에서 이 방법을 사용하면 계산 및 메모리 효율성이 크게 향상되며, 성능 저하 없음.
          + 하드웨어에 이 방법을 구현하면 더 큰 효율성 향상을 볼 수 있음.
     * BitNet b1.58의 성능과 효율성:
          + BitNet b1.58은 3B 크기부터 전체 정밀도 기준 모델과 동등한 성능을 보임.
          + 모델 성능과 추론 비용에 대한 새로운 스케일링 법칙을 가능하게 함.
          + 13B BitNet b1.58은 3B FP16 LLM보다 지연 시간, 메모리 사용량, 에너지 소비 측면에서 더 효율적.
          + 30B BitNet b1.58은 7B FP16 LLM보다, 70B BitNet b1.58은 13B FP16 LLM보다 더 효율적.
          + 이 논문은 LLM 효율성에 대한 중대한 돌파구를 나타냄, 효율성 향상이 성능 저하 없이 이루어짐.
     * 기존 모델을 새로운 방식으로 전환 가능성에 대한 의문과 NVIDIA 주가에 대한 농담.
     * AI 응용 분야에서 트랜지스터의 역할 재고 필요성에 대한 고찰:
          + AI에서는 엔트로피 감소가 큰 문제가 아니므로, 사용 가능한 전압 범위를 더 활용해야 함.
          + 트랜지스터의 역할을 재고하고, NAND 게이트가 근본적인 구성 요소가 아닐 수도 있음을 제안.
     * 부동소수점 표현에 대한 블로그 내용과 연결하여 새로운 표현 방식에 대한 고민:
          + 부동소수점 표준에서 +0.0과 -0.0의 구분이 유용함을 설명.
          + LLM 논문에서 사용된 {-1, 0, -1} 값과 연결하여 2비트 {-1, -0, 0, 1} 표현이 추가적인 이점을 제공할 수 있는지에 대한 질문.
          + 다른 LLM 양자화 논문에서 제안된 2비트 양자화 값에 대한 궁금증.
     * 연구 결과의 실제성에 대한 의심과 Microsoft 연구 및 UCAS의 저자 확인 후 결과의 중요성 인식:
          + 결과가 너무 좋아서 실제인지 의심하다가 저자를 확인하고 진짜임을 깨달음.
          + 엣지 컴퓨팅 응용 분야뿐만 아니라 클라우드에서 고성능 LLM 제공 비용을 낮출 것으로 예상.
          + 장기적 경제적 영향에 대한 고민과 새로운 경쟁자의 등장 가능성에 대한 추측.
     * '비트'와 '트릿'에 대한 설명과 삼진법 컴퓨팅의 이론적 가능성에 대한 논의:
          + '비트'가 아닌 '트릿'이라는 용어 사용, 삼진법 컴퓨팅의 약속에 대한 이론적 설명.
          + 삼진법 컴퓨팅에 대한 소비에트 연구와 이론적으로 이상적인 e진법에 대한 언급.
     * GigaML의 새로운 모델 훈련 계획과 협력 제안:
          + GigaML이 llama.cpp와 호환되는 새로운 모델을 훈련할 계획을 발표.
          + 작은 모델(3-4B, 1비트, 오픈소스)을 최신 stack-v2 데이터셋으로 훈련할 예정이며 협력자를 찾음.
     * 결과에 대한 회의적인 시각과 재현 필요성에 대한 강조:
          + 이러한 개선 사항에 대한 비판적인 시각과 극단적인 양자화 시도에 대한 이전 경험 언급.
     * LLM 분야의 주요 돌파구와 단일 카드로 120B 모델을 구동할 수 있는 가능성에 대한 감탄:
          + FP16 모델과 동일한 성능과 복잡도를 달성하면서 24GB VRAM의 단일 카드로 120B 모델을 구동할 수 있는 잠재력에 대한 감탄.
"
"https://news.hada.io/topic?id=13663","[2024/02/26 ~ 03/03] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2024/02/26 ~ 03/03] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주에 선정된 논문들을 보면, 대규모 언어 모델(Large Language Models, LLMs)에 초점을 맞춘 연구가 주를 이루고 있는 것으로 보입니다. ""Genie"", ""Mistral Large"", ""The Era of 1-bit LLMs"", ""Dataset for LLMs"", ""PlanGPT"" 등의 제목에서 언어 모델링과 이를 개선하거나 새로운 데이터셋을 활용하는 접근에 대한 관심이 높다는 것을 알 수 있습니다. 이는 최근 몇 년 간 언어 처리 기술의 급격한 발전과 거대한 언어 모델이 다양한 자연어 처리 작업에서 뛰어난 성능을 발휘하고 있기 때문일 수 있습니다.
     * 언어 모델, 특히 GPT-4와 같은 대규모 모델들은 다양한 산업과 연구 분야에서 응용되고 있으며, 이로 인해 이들 모델을 더 효율적으로 학습시키고, 더 다양한 데이터에 적용하며, 심지어는 더 적은 비트로도 높은 성능을 유지할 수 있는 새로운 기술의 개발에 대한 요구가 증가하고 있습니다. 또한, ""On the Societal Impact of Open Foundation Models""와 같은 제목은 언어 모델들이 사회에 미치는 영향에 대한 연구가 이루어지고 있음을 시사하며, 기술 발전뿐만 아니라 그로 인한 사회적 변화와 책임에 대한 인식도 높아지고 있다는 것을 의미합니다.
     * 한편, ""LearnAct""나 ""EMO""처럼 덜 구체적인 제목들도 눈에 띄는데, 이러한 논문들은 언어 모델에 국한되지 않고, 더 넓은 응용이나 이론적 발전에 초점을 맞추고 있을 가능성이 있습니다. 전반적으로 이번 주는 언어 모델링에 대한 새로운 접근과 이를 활용한 다양한 응용 연구들이 중심 트렌드로 자리매김한 것으로 확인되며, 이는 AI 분야 내에서 중요하게 여겨지는 다양한 도전 과제들에 대한 연구 및 개발 열기가 반영된 결과로 볼 수 있습니다.


  Genie: 생성형 인터랙티브 환경 / Genie: Generative Interactive Environments

    논문 소개

     * 인터넷 동영상으로 학습되고 이미지 프롬프트가 주어지면 동작 제어가 가능한 다양한 2D 세계를 생성할 수 있는 파운데이션 모델인 지니는 11B 규모의 파라미터를 가지고 있으며 시공간 비디오 토큰화, 자동 회귀 동적 모델, 확장 가능한 잠재 액션 모델로 구성되어 있으며, 잠재 액션 공간을 통해 학습 에이전트가 보이지 않는 비디오의 동작을 모방할 수 있어 보다 일반적인 에이전트를 구축하는 데 유망합니다.

     A foundation model trained from internet videos and with the ability to generate a variety of action-controllable 2d worlds given an image prompt; genie has 11b parameters and consists of a spatiotemporal video tokenizer, an autoregressive dynamic model, and a scalable latent action model; the latent action space enables training agents to imitate behaviors from unseen video which is promising for building more generalist agents.

    논문 초록(Abstract)

     * 라벨이 없는 인터넷 동영상에서 무감독 방식으로 학습된 최초의 제너레이티브 인터랙티브 환경인 Genie를 소개합니다. 이 모델은 텍스트, 합성 이미지, 사진, 심지어 스케치를 통해 설명된 무한히 다양한 액션 제어 가능한 가상 세계를 생성하도록 요청할 수 있습니다. 11B 매개변수에서 Genie는 기초 월드 모델로 간주할 수 있습니다. 시공간 비디오 토큰화, 자동 회귀 동역학 모델, 간단하고 확장 가능한 잠재 액션 모델로 구성되어 있습니다. Genie를 사용하면 일반적으로 세계 모델 문헌에서 볼 수 있는 실사 기반 액션 레이블이나 기타 도메인별 요구 사항 없이도 프레임 단위로 생성된 환경에서 프레임별로 액션을 취할 수 있습니다. 또한 학습된 잠재 액션 공간을 통해 에이전트가 보이지 않는 비디오의 동작을 모방할 수 있어 미래의 제너럴리스트 에이전트를
       학습할 수 있는 길을 열어줍니다.

     We introduce Genie, the first generative interactive environment trained in an unsupervised manner from unlabelled Internet videos. The model can be prompted to generate an endless variety of action-controllable virtual worlds described through text, synthetic images, photographs, and even sketches. At 11B parameters, Genie can be considered a foundation world model. It is comprised of a spatiotemporal video tokenizer, an autoregressive dynamics model, and a simple and scalable latent action model. Genie enables users to act in the generated environments on a frame-by-frame basis despite training without any ground-truth action labels or other domain-specific requirements typically found in the world model literature. Further the resulting learned latent action space facilitates training agents to imitate behaviors from unseen videos, opening the path for training generalist agents of the future.

    논문 링크

   https://arxiv.org/abs/2402.15391

    더 읽어보기

   https://discuss.pytorch.kr/t/…

   https://sites.google.com/view/genie-2024/home

   https://x.com/_rockt/status/1762026090262872161


  미스트랄 라지 / Mistral Large

    논문 소개

     * 강력한 다국어, 추론, 수학, 코드 생성 기능을 갖춘 새로운 언어 엔진의 특징은 다음과 같습니다: 1) 32k 토큰 컨텍스트 창, 2) 기본 다국어 기능, 3) 추론, 지식, 수학, 코딩 벤치마크에 대한 강력한 능력, 4) 함수 호출 및 JSON 형식 기본 지원.

     A new llm with strong multilingual, reasoning, maths, and code generation capabilities; features include: 1) 32k tokens context window, 2) native multilingual capacities, 3) strong abilities in reasoning, knowledge, maths, and coding benchmarks, and 4) function calling and json format natively supported.

    논문 링크

   https://mistral.ai/news/mistral-large/

    더 읽어보기

   https://discuss.pytorch.kr/t/…

   https://x.com/omarsar0/status/1762140818654064721


  1비트 LLM의 시대: 모든 대형 언어 모델은 1.58비트입니다 / The Era of 1-bit LLMs: All Large Language Models are in 1.58 Bits

    논문 소개

     * 모든 파라미터가 삼항식 {-1, 0, 1}인 BitNet b1.58이라는 고성능의 비용 효율적인 1비트 LLM 변형을 소개합니다. 동일한 모델 크기와 트레이닝 토큰이 주어지면 비트넷 b1.58은 고정밀 변환기 LLM(즉, fp16)의 복잡성과 작업 성능에 맞출 수 있으며 이 1비트 LLM의 장점은 지연 시간, 메모리, 전체 및 에너지 소비가 훨씬 개선된다는 것입니다.

     Introduces a high-performing and cost-effective 1-bit llm variant called bitnet b1.58 where every parameter is a ternary {-1, 0, 1}; given the same model size and training tokens, bitnet b1.58 can match the perplexity and task performance of a full precision transformer llm (i.e., fp16); the benefits of this 1-bit llm are significantly better latency, memory, throughout, and energy consumption.

    논문 초록(Abstract)

     * BitNet과 같은 최근의 연구는 1비트 대규모 언어 모델(LLM)의 새로운 시대를 위한 길을 열어가고 있습니다. 이 글에서는 LLM의 모든 단일 파라미터(또는 가중치)가 삼항식 {-1, 0, 1}인 1비트 LLM 변형, 즉 BitNet b1.58을 소개합니다. 이는 모델 크기와 트레이닝 토큰이 동일한 고정밀(즉, FP16 또는 BF16) 트랜스포머 LLM과 복잡도 및 최종 작업 성능 측면에서 모두 일치하며 지연 시간, 메모리, 처리량 및 에너지 소비 측면에서 훨씬 더 비용 효율적입니다. 더 심오하게는 1.58비트 LLM은 고성능과 비용 효율을 모두 갖춘 차세대 LLM을 학습하기 위한 새로운 확장 법칙과 레시피를 정의합니다. 또한 새로운 연산 패러다임을 가능하게 하고 1비트 LLM에 최적화된 특정 하드웨어를 설계할 수 있는 문을 열어줍니다.

     Recent research, such as BitNet, is paving the way for a new era of 1-bit Large Language Models (LLMs). In this work, we introduce a 1-bit LLM variant, namely BitNet b1.58, in which every single parameter (or weight) of the LLM is ternary {-1, 0, 1}. It matches the full-precision (i.e., FP16 or BF16) Transformer LLM with the same model size and training tokens in terms of both perplexity and end-task performance, while being significantly more cost-effective in terms of latency, memory, throughput, and energy consumption. More profoundly, the 1.58-bit LLM defines a new scaling law and recipe for training new generations of LLMs that are both high-performance and cost-effective. Furthermore, it enables a new computation paradigm and opens the door for designing specific hardware optimized for 1-bit LLMs.

    논문 링크

   https://arxiv.org/abs/2402.17764

    더 읽어보기

   https://x.com/_akhaliq/status/1762729757454618720


  대규모 언어 모델용 데이터 세트: 종합적인 서베이 논문 / Datasets for Large Language Models: A Comprehensive Survey

    논문 소개

     * 180 페이지 이상의 종합적인 개요 및 LLM 데이터셋의 분석.

     A comprehensive overview (180+ pages) and analysis of llm datasets.

    논문 초록(Abstract)

     * 이 논문에서는 LLM의 눈부신 발전에 중요한 역할을 하는 대규모 언어 모델(LLM) 데이터셋에 대한 탐구를 시작합니다. 데이터셋은 LLM의 발전을 유지하고 육성하는 루트 시스템에 비유할 수 있는 기초 인프라 역할을 합니다. 따라서 이러한 데이터셋에 대한 조사가 연구의 중요한 주제로 떠오르고 있습니다. LLM 데이터세트에 대한 종합적인 개요와 철저한 분석이 부족한 현재의 상황을 해결하고 현재 상태와 향후 동향에 대한 인사이트를 얻기 위해 본 설문조사는 (1) 사전 학습 코퍼라, (2) 명령어 미세 조정 데이터세트, (3) 선호 데이터세트, (4) 평가 데이터세트, (5) 전통적인 자연어 처리(NLP) 데이터세트의 다섯 가지 관점에서 LLM 데이터세트의 기본 측면을 통합하고 분류합니다. 이 설문조사는 현재 당면한 문제를 조명하고 향후 조사를 위한 잠재적인 방향을
       제시합니다. 또한 8개 언어 범주와 32개 도메인에 걸친 444개 데이터 세트의 통계를 포함하여 현재 사용 가능한 데이터 세트 리소스에 대한 종합적인 검토도 제공됩니다. 20개 차원의 정보가 데이터 세트 통계에 통합되어 있습니다. 조사된 총 데이터 규모는 사전 학습 코퍼스의 경우 774.5TB, 기타 데이터 세트의 경우 7억 인스턴스를 넘어섰습니다. 저희는 LLM 텍스트 데이터 세트의 전체 환경을 제시하여 이 분야의 연구자들에게 포괄적인 참고 자료가 되고 향후 연구에 기여하는 것을 목표로 하고 있습니다. 관련 리소스는 https://github.com/lmmlzn/Awesome-LLMs-Datasets 에서 확인할 수 있습니다.

     This paper embarks on an exploration into the Large Language Model (LLM) datasets, which play a crucial role in the remarkable advancements of LLMs. The datasets serve as the foundational infrastructure analogous to a root system that sustains and nurtures the development of LLMs. Consequently, examination of these datasets emerges as a critical topic in research. In order to address the current lack of a comprehensive overview and thorough analysis of LLM datasets, and to gain insights into their current status and future trends, this survey consolidates and categorizes the fundamental aspects of LLM datasets from five perspectives: (1) Pre-training Corpora; (2) Instruction Fine-tuning Datasets; (3) Preference Datasets; (4) Evaluation Datasets; (5) Traditional Natural Language Processing (NLP) Datasets. The survey sheds light on the prevailing challenges and points out potential avenues for future investigation. Additionally, a comprehensive review of the existing
     available dataset resources is also provided, including statistics from 444 datasets, covering 8 language categories and spanning 32 domains. Information from 20 dimensions is incorporated into the dataset statistics. The total data size surveyed surpasses 774.5 TB for pre-training corpora and 700M instances for other datasets. We aim to present the entire landscape of LLM text datasets, serving as a comprehensive reference for researchers in this field and contributing to future studies. Related resources are available at: https://github.com/lmmlzn/Awesome-LLMs-Datasets.

    논문 링크

   https://arxiv.org/abs/2402.18041

    더 읽어보기

   https://github.com/lmmlzn/Awesome-LLMs-Datasets

   https://x.com/omarsar0/status/1763233452852134001
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  액션 러닝을 통한 대규모 언어 모델 에이전트 역량 강화 / Empowering Large Language Model Agents through Action Learning

    논문 소개

     * 파이썬 함수를 사용하여 액션을 생성하고 개선하는 반복 학습 전략을 통해 언어 에이전트를 위한 오픈 액션 학습을 탐색하고, 제안된 프레임워크(learnact)는 각 반복마다 실행 피드백을 기반으로 사용 가능한 액션을 수정 및 업데이트하여 액션 공간을 확장하고 액션 효과를 개선하며, 로봇 계획 및 알프월드 환경에서 학습한 결과, 알프월드에서 리액트+리플렉션 대비 32%의 에이전트 성능 향상 효과를 확인했습니다.

     Explores open-action learning for language agents through an iterative learning strategy that creates and improves actions using python functions; on each iteration, the proposed framework (learnact) expands the action space and enhances action effectiveness by revising and updating available actions based on execution feedback; the learnact framework was tested on robotic planning and alfworld environments; it improves agent performance by 32% in alfworld compared to react+reflexion.

    논문 초록(Abstract)

     * 최근 대규모 언어 모델(LLM) 에이전트에 대한 관심이 높아지고 있지만, 지능형 행동의 핵심 요소인 시행착오를 통한 학습 능력에는 한계가 있습니다. 이 연구에서는 경험을 통해 새로운 행동을 학습하는 능력이 LLM 에이전트의 학습을 발전시키는 데 필수적이라고 주장합니다. 인간은 경험 학습을 통해 자연스럽게 행동 공간을 확장하고 기술을 개발하는 반면, LLM 에이전트는 일반적으로 고정된 행동 공간 내에서 작동하므로 성장 가능성이 제한됩니다. 이러한 문제를 해결하기 위해 본 연구에서는 언어 에이전트를 위한 개방형 액션 학습을 탐구합니다. Python 함수 형태로 액션을 생성하고 개선하는 반복 학습 전략이 포함된 프레임워크 LearnAct를 소개합니다. 각 반복에서 LLM은 실패한 학습 작업에서 확인된 오류를 기반으로 현재 사용 가능한 액션을 수정하고
       업데이트하여 액션 효과를 향상시킵니다. 로보틱 플래닝 및 알프월드 환경에서의 실험적 평가에 따르면 몇 가지 학습 작업 인스턴스에서 학습한 후 개방형 액션 학습에 대한 접근 방식이 해당 작업 유형에 대한 에이전트 성능을 현저하게 향상시키는 것으로 나타났습니다(예: AlfWord에서 ReAct+Reflexion에 비해 32%). 이는 보다 지능적인 LLM 에이전트 개발에 있어 경험적 액션 학습의 중요성을 강조하는 결과입니다.

     Large Language Model (LLM) Agents have recently garnered increasing interest yet they are limited in their ability to learn from trial and error, a key element of intelligent behavior. In this work, we argue that the capacity to learn new actions from experience is fundamental to the advancement of learning in LLM agents. While humans naturally expand their action spaces and develop skills through experiential learning, LLM agents typically operate within fixed action spaces, limiting their potential for growth. To address these challenges, our study explores open-action learning for language agents. We introduce a framework LearnAct with an iterative learning strategy to create and improve actions in the form of Python functions. In each iteration, LLM revises and updates the currently available actions based on the errors identified in unsuccessful training tasks, thereby enhancing action effectiveness. Our experimental evaluations across Robotic Planning and Alfworld
     environments reveal that after learning on a few training task instances, our approach to open-action learning markedly improves agent performance for the type of task (by 32 percent in AlfWorld compared to ReAct+Reflexion, for instance) highlighting the importance of experiential action learning in the development of more intelligent LLM agents.

    논문 링크

   https://arxiv.org/abs/2402.15809

    더 읽어보기

   https://x.com/omarsar0/status/1762533498492010761


  EMO: 이모트 포트레이트 얼라이브 - 약한 조건에서 오디오2비디오 디퓨젼 모델을 사용하여 표현력 있는 포트레이트 비디오 생성하기 / EMO: Emote Portrait Alive -- Generating Expressive Portrait Videos with Audio2Video Diffusion Model under Weak Conditions

    논문 소개

     * Audio-to-Video 디퓨젼 모델을 활용하여 중간 3D 모델이나 얼굴 랜드마크가 필요 없는 Audio-to-Video 직접 합성 방식을 활용하여 표현력 있는 비디오를 생성하는 새로운 프레임워크인 이모는 표현력과 사실성 측면에서 기존 방식보다 뛰어난 성능을 발휘하면서 다양한 스타일의 설득력 있는 말하기 비디오와 노래 비디오를 제작할 수 있습니다.

     A new framework for generating expressive video by utilizing a direct audio-to-video synthesis approach; by leveraging an audio2video diffusion model it bypasses the need for intermediate 3d models or facial landmarks; emo can produce convincing speaking videos and singing videos in various styles while outperforming existing methods in terms of expressiveness and realism.

    논문 초록(Abstract)

     * 이 연구에서는 오디오 단서와 얼굴 움직임 사이의 역동적이고 미묘한 관계에 초점을 맞춰 말하는 머리 비디오 생성의 사실성과 표현력을 향상시키는 과제를 해결합니다. 유니티는 인간 표정의 전체 스펙트럼과 개별 얼굴 스타일의 고유성을 포착하지 못하는 기존 기술의 한계를 파악합니다. 이러한 문제를 해결하기 위해 유니티는 중간 3D 모델이나 얼굴 랜드마크가 필요 없는 직접 오디오-비디오 합성 방식을 활용하는 새로운 프레임워크인 EMO를 제안합니다. 이 방식은 비디오 전체에서 원활한 프레임 전환과 일관된 아이덴티티 보존을 보장하여 표현력이 뛰어나고 생생한 애니메이션을 제작할 수 있습니다. 실험 결과에 따르면 EMO는 설득력 있는 말하기 동영상뿐만 아니라 다양한 스타일의 노래 동영상도 제작할 수 있으며, 표현력과 사실성 측면에서
       기존의 최첨단 방법론을 크게 능가하는 것으로 나타났습니다.

     In this work, we tackle the challenge of enhancing the realism and expressiveness in talking head video generation by focusing on the dynamic and nuanced relationship between audio cues and facial movements. We identify the limitations of traditional techniques that often fail to capture the full spectrum of human expressions and the uniqueness of individual facial styles. To address these issues, we propose EMO, a novel framework that utilizes a direct audio-to-video synthesis approach, bypassing the need for intermediate 3D models or facial landmarks. Our method ensures seamless frame transitions and consistent identity preservation throughout the video, resulting in highly expressive and lifelike animations. Experimental results demonsrate that EMO is able to produce not only convincing speaking videos but also singing videos in various styles, significantly outperforming existing state-of-the-art methodologies in terms of expressiveness and realism.

    논문 링크

   https://arxiv.org/abs/2402.17485

    더 읽어보기

   https://x.com/_akhaliq/status/1762686465777999932


  오픈 파운데이션 모델의 사회적 영향력 / On the Societal Impact of Open Foundation Models

    논문 소개

     * 오픈 파운데이션 모델과 그 영향, 혜택, 위험에 초점을 맞춘 입장문은 위험 분석을 위한 위험 평가 프레임워크를 제안하고 일부 경우 오픈 파운데이션 모델의 한계 위험이 낮은 이유를 설명하며, 오픈 파운데이션 모델의 사회적 영향에 대한 보다 근거 있는 평가를 제시합니다.

     A position paper with a focus on open foundation models and their impact, benefits, and risks; proposes a risk assessment framework for analyzing risk and explains why the marginal risk of open foundation models is low in some cases; it also offers a more grounded assessment of the societal impact of open foundation models.

    논문 링크

   https://crfm.stanford.edu/open-fms/

    더 읽어보기

   https://x.com/sayashk/status/1762508812370551207


  스타코더 2 / StarCoder 2

    논문 소개

     * 세 가지 크기(3b, 7b, 15b)의 코드용 오픈 머신러닝 제품군으로, 15b 모델은 14조 개의 토큰과 600개 이상의 프로그래밍 언어로 학습되었으며, 16k 토큰의 컨텍스트 창과 중간 채우기 목표를 사용하여 코드 완성, 코드 추론, PAL을 통한 수학 추론 등 여러 평가에서 33b 이상의 모델과 일치합니다.

     A family of open llms for code with three different sizes (3b, 7b, and 15b); the 15b model was trained on 14 trillion tokens and 600+ programming languages with a context window of 16k token and employing a fill-in-the-middle objective; it matches 33b+ models on many evaluation like code completion, code reasoning, and math reasoning aided through pal.

    논문 링크

   https://huggingface.co/blog/starcoder2

    더 읽어보기

   https://x.com/_philschmid/status/1762843489220296881


  표 형식 데이터의 대규모 언어 모델(LLM): 예측, 생성 및 이해 - 서베이 논문 / Large Language Models(LLMs) on Tabular Data: Prediction, Generation, and Understanding - A Survey

    논문 소개

     * 주요 기술, 메트릭, 데이터 세트, 모델, 최적화 접근 방식을 포함한 표 형식 데이터 작업을 위한 LLMS의 개요와 향후 연구 방향에 대한 인사이트와 함께 한계와 미개척 아이디어를 다룹니다.

     An overview of llms for tabular data tasks including key techniques, metrics, datasets, models, and optimization approaches; it covers limitations and unexplored ideas with insights for future research directions.

    논문 초록(Abstract)

     * 최근 대규모 언어 모델링의 획기적인 발전으로 예측, 표 형식 데이터 합성, 질문 답변, 표 이해 등 표 형식 데이터 모델링과 관련된 다양한 작업에서 그 적용을 엄격하게 탐색할 수 있게 되었습니다. 각 작업에는 고유한 과제와 기회가 있습니다. 그러나 현재 이 연구 영역의 주요 기술, 메트릭, 데이터 세트, 모델, 최적화 접근법을 요약하고 비교하는 종합적인 검토가 부족합니다. 이 설문조사는 이러한 분야의 최근 진전을 통합하고, 활용되는 데이터 세트, 지표, 방법론에 대한 철저한 조사와 분류를 제공함으로써 이러한 격차를 해소하는 것을 목표로 합니다. 기존 문헌의 강점, 한계, 미개척 영역, 격차를 파악하는 동시에 이 중요하고 빠르게 진화하는 분야의 향후 연구 방향에 대한 인사이트를 제공합니다. 또한 관련 코드 및 데이터 세트 참조도
       제공합니다. 이 포괄적인 리뷰를 통해 관심 있는 독자들에게 적절한 참고 자료와 통찰력 있는 관점을 제공하고, 해당 분야의 당면 과제를 효과적으로 탐색하고 해결하는 데 필요한 도구와 지식을 제공할 수 있기를 바랍니다.

     Recent breakthroughs in large language modeling have facilitated rigorous exploration of their application in diverse tasks related to tabular data modeling, such as prediction, tabular data synthesis, question answering, and table understanding. Each task presents unique challenges and opportunities. However, there is currently a lack of comprehensive review that summarizes and compares the key techniques, metrics, datasets, models, and optimization approaches in this research domain. This survey aims to address this gap by consolidating recent progress in these areas, offering a thorough survey and taxonomy of the datasets, metrics, and methodologies utilized. It identifies strengths, limitations, unexplored territories, and gaps in the existing literature, while providing some insights for future research directions in this vital and rapidly evolving field. It also provides relevant code and datasets references. Through this comprehensive review, we hope to provide
     interested readers with pertinent references and insightful perspectives, empowering them with the necessary tools and knowledge to effectively navigate and address the prevailing challenges in the field.

    논문 링크

   https://arxiv.org/abs/2402.17944

    더 읽어보기

   https://x.com/omarsar0/status/1763187964501254492
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  PlanGPT: 맞춤형 언어 모델과 효율적인 검색을 통한 도시 계획 개선 / PlanGPT: Enhancing Urban Planning with Tailored Language Model and Efficient Retrieval

    논문 소개

     * 검색 증강, 미세 조정, 도구 사용 등과 같은 여러 접근 방식을 LLM을 활용하고 결합하는 방법을 보여줍니다. 제안된 프레임워크는 도시 및 공간 계획에 적용되지만 다른 영역에도 적용할 수 있는 많은 인사이트와 실용적인 팁이 있습니다.

     Shows how to leverage llms and combine multiple approaches like retrieval augmentation, fine-tuning, tool usage, and more; the proposed framework is applied to urban and spatial planning but there are a lot of insights and practical tips that apply to other domains.

    논문 초록(Abstract)

     * 도시 계획 분야에서 범용 대형 언어 모델은 기획자의 특정 요구 사항을 충족하는 데 어려움을 겪는 경우가 많습니다. 도시 계획 텍스트 생성, 관련 정보 검색, 계획 문서 평가와 같은 작업은 고유한 과제를 안고 있습니다. 도시 전문가의 효율성을 높이고 이러한 장애물을 극복하기 위해 도시 및 공간 계획에 맞춤화된 최초의 전문 대형 언어 모델인 PlanGPT를 소개합니다. 중국 도시계획학회와 같은 기관과의 협업을 통해 개발된 PlanGPT는 맞춤형 로컬 데이터베이스 검색 프레임워크, 도메인별 기본 모델 미세 조정, 고급 툴링 기능을 활용합니다. 경험적 테스트에 따르면 PlanGPT는 도시 계획의 복잡성에 정확하게 맞춘 우수한 품질의 응답을 제공하면서 뛰어난 성능을 달성했습니다.

     In the field of urban planning, general-purpose large language models often struggle to meet the specific needs of planners. Tasks like generating urban planning texts, retrieving related information, and evaluating planning documents pose unique challenges. To enhance the efficiency of urban professionals and overcome these obstacles, we introduce PlanGPT, the first specialized Large Language Model tailored for urban and spatial planning. Developed through collaborative efforts with institutions like the Chinese Academy of Urban Planning, PlanGPT leverages a customized local database retrieval framework, domain-specific fine-tuning of base models, and advanced tooling capabilities. Empirical tests demonstrate that PlanGPT has achieved advanced performance, delivering responses of superior quality precisely tailored to the intricacies of urban planning.

    논문 링크

   https://arxiv.org/abs/2402.19273

    더 읽어보기

   https://x.com/omarsar0/status/1763424166890377691


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-983


   이 글은 GPT 모델로 정리한 것으로, 잘못된 부분이 있을 수 있으니 글 아래쪽의 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다.

   ⚠️광고⚠️: 파이토치 한국 사용자 모임이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=13680","Accenture, Udacity 인수 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Accenture, Udacity 인수 발표

     * Accenture가 디지털 교육 분야의 선구자인 Udacity를 인수하기로 합의
     * Udacity는 온라인 학습의 유연성과 인간 지도의 이점을 결합한 독자적인 기술 과정 개발 및 제공에 깊은 전문성을 가지고 있음
     * 인수 금액은 공개되지 않음
     * Udacity의 230명 이상의 전문가 팀이 Accenture LearnVantage에 합류할 예정
     * Accenture LearnVantage는 Accenture의 고객들에게 기술, 데이터, AI 분야에서 사람들의 재교육 및 업스킬을 돕는 종합적인 기술 학습 및 훈련 서비스를 제공
     * 이를 통해 조직을 재창조하고 더 큰 비즈니스 가치를 달성할 수 있도록 지원할 예정
     * 이 거래는 규제 검토 및 반독점 감독을 받게 될 예정임

Udacity 관련 정보

     * 2011년에 설립된 Udacity는 실무자 수준의 기술 기술 습득을 강조하는 선도적인 학습 접근법으로 인정받았음
     * 최근에는 주로 소비자 중심에서 AI 및 기술 분야의 경력 개발을 통한 고객 가치 창출을 목표로 하는 인재 변혁 플랫폼으로 진화함
     * 1,400명 이상의 전문가 네트워크와 산업 리더들과 공동으로 창작한 독점 콘텐츠 라이브러리를 통해 195개국에 있는 2천1백만 명 이상의 등록 학습자에게 서비스를 제공함
     * 인수 소식과 관련하여 더 많은 사람들에게 기술을 전달할 수 있을 것이라는 입장을 밝힘
     * 이전에는 인도의 edtech 회사 Upgrad와 8천만 달러에 대한 논의가 있었으나 결국 Accenture가 인수
     * Udacity는 과거에 거의 3억 달러를 모금하고 2015년에 10억 달러의 가치 평가를 받았으나, 만약 8천만 달러가 맞다면 가치가 크게 떨어진 것

Accenture 관련 정보

     * Accenture는 세계적인 전문 서비스 회사로, 세계 선도 기업, 정부 및 기타 조직들이 디지털 핵심을 구축하고, 운영을 최적화하며, 수익 성장을 가속화하고, 서비스를 향상시키는 데 도움을 줌
     * 약 743,000명의 인재와 혁신을 주도하는 회사로, 120개국 이상의 고객에게 서비스를 제공
     * 기술, 클라우드, 데이터, AI 분야에서의 강점과 산업 경험, 기능 전문성, 글로벌 전달 능력을 결합하여 실질적인 결과를 제공

  Hacker News 의견

     * 한 사용자는 Udacity의 ""nanodegree"" 프로그램에 $1,000 이상을 지불했으나, 프로그램이 끝난 후 모든 콘텐츠와 자신의 노트 및 제출물에 대한 접근이 차단되었다고 불만을 표함. Udacity를 피할 것을 강력히 권장
     * 한 사용자는 Udacity에서 다양한 과정을 공부했지만 깊이가 부족하다고 느낌. 현재는 Udacity와 같은 일반 플랫폼보다 특정 산업에 특화된 온라인 학습 옵션이 많다고 언급
     * 다른 사용자는 2012년에 Udacity의 CS 101 과정을 통해 프로그래밍을 배우는 데 성공했고, 이후 컴퓨터 과학 전공으로 전환하고 2014년에 인턴십을 얻어 2017년부터 전문적으로 일하고 있음에 감사함을 표현
     * 또 다른 이전 Udacity 직원은 회사가 ""세계 GDP를 두 배로""라는 사명을 가지고 있을 때의 문화와 사람들을 사랑했으나, 이후 MBA들이 주도하는 부정적인 변화로 인해 회사를 떠남. 2018년까지 만들어진 과정은 훌륭했지만 그 이후의 과정은 시간과 돈을 들일 가치가 없다고 평가
     * 한 edtech 창업자 그룹에서는 인수 소식에 대한 축하가 아닌 우려의 목소리가 나옴. 일반적으로 인수 발표 시 축하가 이어지지만 Udacity의 경우 그렇지 않았음을 지적
     * Udacity와 Udemy를 혼동하는 사용자도 있음
     * Udacity가 $80백만에 인수되었다는 소문이 사실이라면, 2015년 $10억의 가치 평가를 받았던 회사가 큰 가치 하락을 겪었음을 의미하며, 투자자들이 돈을 잃었음을 시사
     * MOOC 산업 전체가 실패한 이유에 대해 궁금해하는 사람들이 많음. 한 사용자는 MOOC를 통해 많은 것을 배웠고, 직업적 성공의 많은 부분을 MOOC에 기인함. MOOC의 하락 원인으로 무료 콘텐츠의 풍부함, 대학들의 무료 콘텐츠 제공, 인증서에 대한 과도한 집중, MOOC의 품질 저하, 대학 학위의 중요성, MOOC의 비용, 온라인 학위 프로그램의 부진, 창립자들의 이탈, 사용자 인터페이스의 불편함, 대학들의 자체 플랫폼 사용, 기업의 교육에 대한 접근 방식, 개인이 운영하는 MOOC의 성공 등 다양한 이유를 제시
     * Udacity의 초기 혜택을 받은 한 사용자는 소프트웨어 엔지니어링 경력에 올라서는 데 도움을 받았으며, 회사가 다국적 기업에 인수된 것에 대해 약간의 슬픔을 표현
"
"https://news.hada.io/topic?id=13568","Testcontainers - 실제 의존성을 가진 단위 테스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Testcontainers - 실제 의존성을 가진 단위 테스트

     * Docker 컨테이너에서 실행할 수 있는 데이터베이스, 메시지 브로커, 웹 브라우저 등을 제공하는 오픈 소스 프레임워크
     * 복잡한 환경 구성이나 모의 객체(mock)가 필요 없으며, 코드로 테스트 의존성을 정의하고 테스트를 실행하면 컨테이너가 생성되고 삭제됨
     * 다양한 언어와 테스트 프레임워크를 지원하며, Docker만 있으면 시작할 수 있음
     * 모듈: 컨테이너화할 수 있는 모든 것을 테스트
          + 데이터베이스, 메시지 브로커 등 50개 이상의 모듈을 통해 다양한 컴포넌트를 테스트할 수 있음.
     * 지원 언어 : Java, Go, .NET, Node.js, Python, Rust, Haskell, Ruby, Clojure, Elixir 등 여러 인기 언어에 대한 Testcontainers 구현이 있음.

사용 사례: Testcontainers가 도움을 줄 수 있는 방법

     * 데이터 액세스 계층 통합 테스트: 컨테이너화된 데이터베이스 인스턴스를 사용하여 데이터 액세스 계층 코드를 테스트
     * UI/수용성 테스트: Selenium과 호환되는 컨테이너화된 웹 브라우저를 사용하여 자동화된 UI 테스트를 실행
     * 애플리케이션 통합 테스트: 데이터베이스, 메시지 큐, 웹 서버 등의 의존성을 가진 단기 테스트 모드에서 애플리케이션을 실행하여 풍부한 상호작용과 탐색 테스트 환경을 제공

GN⁺의 의견

     * Testcontainers는 개발자들이 실제 환경과 유사한 조건에서 테스트를 수행할 수 있게 해주어, 소프트웨어 품질을 향상시키는 데 기여함.
     * 실제 의존성을 가진 테스트는 모의 객체를 사용하는 것보다 더 정확한 테스트 결과를 제공할 수 있으나, 복잡한 시스템에서는 설정과 관리가 어려울 수 있음.
     * Testcontainers와 유사한 기능을 제공하는 다른 프로젝트로는 Docker Compose, Kubernetes Minikube 등이 있으며, 이들도 개발 환경에서의 테스트를 돕는 도구로 활용될 수 있음.
     * Testcontainers를 도입할 때는 Docker에 대한 이해도가 필요하며, 컨테이너 관리 및 네트워크 구성에 대한 기술적 지식이 요구될 수 있음.
     * 이 기술을 선택함으로써 얻을 수 있는 이점은 개발과 테스트 환경의 일관성과 테스트의 신뢰성 향상이며, 반면에 Docker 환경에 대한 의존성과 관련된 복잡성이 단점으로 작용할 수 있음.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + Testcontainers에 대한 극찬을 예상치 못했음.
          + Docker를 사용하지 않던 환경에서 오면 매력적으로 보일 수 있음.
          + 많은 사용 사례에서 유용하지만, 다른 컨테이너화된 워크플로우와 잘 작동하게 만들기는 어려움.
          + Testcontainers는 Docker CLI에 대한 커스텀 쉘 호출을 핵심 기능으로 사용하는 라이브러리로, 다른 컨테이너화된 워크플로우를 도입할 때 문제와 복잡성을 야기함.
          + 호스트 머신에서만 실행되고 다른 Docker 관련 작업이 없다고 가정하는 경향이 있어, 종종 비 Docker 환경의 라이브러리보다 나쁘거나 더 나쁠 수 있음.
     * 두 번째 댓글 요약:
          + Testcontainers는 통합 테스트에 있어 게임 체인저임.
          + 언어별 Docker API를 제공하여 컨테이너를 쉽게 구동하고 연결 준비 상태를 확인할 수 있음.
          + 모든 새 프로젝트에 통합 테스트를 위해 Testcontainers를 사용함.
          + CI 설정은 Linting, 빌드, 유닛 테스트, 그리고 Testcontainers를 사용한 통합 테스트를 포함함.
          + 언어 바인딩은 데이터베이스 작업에 유용한 헬퍼 함수를 제공함.
     * 세 번째 댓글 요약:
          + Docker-compose.yml을 사용하는 것이 더 나은지 이해하지 못함.
          + 필요한 컨테이너 간 복잡한 의존성이 있을 때 Testcontainers는 비교적 약함.
          + 5년 전에 사용해본 경험이 있지만, 지금은 상황이 크게 나아졌을 수도 있음.
     * 네 번째 댓글 요약:
          + 실제 데이터베이스/엘라스틱서치/레디스/바니시 등을 사용하는 통합 테스트를 매우 가치 있게 여김.
          + Testcontainers는 테스트 스위트 동안 새로운 엘라스틱서치 인덱스를 생성하고 종료하는 등의 작업을 대신해줌.
          + 애플리케이션 기능을 가능한 한 많이 종단 간 통합 스타일 테스트로 커버하는 전략을 선호함.
          + 명확한 입력/출력 쌍이 있는 코드 부분에만 유닛 테스트를 사용하고, 제어할 수 없는 외부 API 호출 등에는 모의 객체(mock)를 사용함.
     * 다섯 번째 댓글 요약:
          + 약 7년 전에 Go 언어용 Testcontainers인 conex를 작성함.
          + Go의 공식 테스트 프레임워크와 일급 통합을 제공함.
     * 여섯 번째 댓글 요약:
          + 각 테스트마다 새롭고 깨끗한 브라우저 인스턴스를 제공하는 것이 느리다는 의견이 있음.
          + 이미 컨테이너 세계에 투자했다면 몇 가지 추가적인 컨테이너를 받아들이는 것이 좋음.
          + 그렇지 않은 경우 추가적인 복잡성이나 부피에 대한 이점이 별로 없음.
     * 일곱 번째 댓글 요약:
          + Testcontainers를 살펴보고 자체 버전을 만듦.
          + Docker는 누수가 많은 추상화로, 다양한 환경에서 테스트를 실행해야 함.
          + Mac, Linux VM, Linux VM의 Docker 컨테이너 내에서 Docker 소켓을 마운트한 상태 등에서 네트워킹이 완전히 다름.
          + 병렬로 테스트를 실행하고 각 테스트에 맞는 로그를 출력하고자 함.
          + Testcontainers가 이러한 문제를 해결했는지 확실하지 않지만, 세부 사항에 악마가 있다는 것을 알게 됨.
     * 여덟 번째 댓글 요약:
          + 로컬 테스트 환경을 docker-compose로 생성함.
          + Testcontainers는 Docker Compose의 구문을 배우지 않고도 Docker 환경을 정의할 수 있는 프로그래밍 언어 추상화로 보임.
          + 테스트 환경이 사용 준비가 되었는지 알기 위해서는 여전히 Docker 네트워킹, 의존성, 헬스체크에 대한 이해가 필요함.
     * 아홉 번째 댓글 요약:
          + 모의 객체나 복잡한 환경 구성이 필요 없음.
          + 테스트 의존성을 코드로 정의하고 테스트를 실행하면 컨테이너가 생성되고 삭제됨.
          + 컨테이너로 통합 테스트를 실행할 수 있다고 해서 유닛 테스트가 필요 없다고 생각하는 것은 오해임.
          + Docker 컨테이너를 설정하는 것은 간단하지만, 컨테이너를 시작하는 것은 고통스럽고 느림.
     * 열 번째 댓글 요약:
          + Java의 로고로 Duke를 사용하는 것에 대한 질문임.
"
"https://news.hada.io/topic?id=13597","2015년, 꼼꼼한 방식으로 CSS 레이아웃 배우기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2015년, 꼼꼼한 방식으로 CSS 레이아웃 배우기

CSS 레이아웃을 꼼꼼하게 배우기

     * CSS는 규칙에 기반한 시스템임.
     * 이 챕터들은 CSS 레이아웃의 규칙을 설명함.
     * 저자는 꼼꼼함을 중요시하는 접근 방식을 취함.

CSS 레이아웃의 기본 개념

     * CSS의 일반 흐름에서 인라인과 블록 요소의 상대적 위치는 display 속성이 아닌 포맷팅 컨텍스트에 의해 결정됨.
     * z-index는 문서 전체에 절대적인 것이 아니라 스택 컨텍스트에 상대적임.
     * 박스 모델에는 적어도 다섯 가지가 있으며, 내용의 크기와 margin: auto가 처리되는 방식에 미묘한 차이가 있음.

CSS 레이아웃의 학습 자원 부족

     * CSS 레이아웃을 배우기 어려운 이유는 웹사이트가 점진적으로 발전하기 때문임.
     * 작은 팁과 요령을 배우게 되지만, 근본적인 레이아웃 알고리즘을 배우지 못함.

CSS 레이아웃의 주요 개념

     * 이 챕터들은 CSS 레이아웃의 모든 주요 개념을 거치며, 다양한 개념을 설명하는 수십 가지 적용 예제를 포함함.

각 챕터의 내용

     * 챕터 1: CSS에서 HTML 요소가 생성하는 박스의 상대적 위치에 대해 다룸.
     * 챕터 2: 박스 모델과 CSS의 다양한 위치 지정 방식에 따라 박스 모델이 어떻게 달라지는지에 대해 논의함.
     * 챕터 3: 박스 위치에 영향을 미치는 추가적인 메커니즘을 다룸.
     * 챕터 4: CSS 3 플렉스박스 레이아웃 모드에 대해 설명함.
     * 챕터 5: 배운 내용을 적용하여 실제 문제를 해결하고, 레이아웃에 대한 이해를 테스트하는 작은 퀴즈를 포함함.

참조 인덱스

     * 특정 개념이나 속성을 찾을 필요가 있을 때 참조 인덱스를 사용하여 적절한 챕터와 섹션을 쉽게 찾을 수 있음.

GN⁺의 의견

     * 이 챕터들은 이미 CSS에 익숙한 사람들을 위한 CSS 레이아웃에 대한 심층적인 학습 자료를 제공함.
     * 웹 개발자들은 종종 CSS 레이아웃의 복잡성에 직면하는데, 이 자료는 그러한 복잡성을 이해하고 효과적으로 웹 레이아웃을 구성하는 데 도움이 될 수 있음.
     * 비판적으로 볼 때, 이 자료는 꼼꼼한 접근 방식을 취하고 있어서 초보자에게는 다소 어려울 수 있음.
     * 유사한 교육 자료로는 MDN Web Docs의 CSS 레이아웃 가이드가 있으며, 이는 더 넓은 범위의 개발자들에게 적합할 수 있음.
     * CSS 레이아웃을 도입할 때는 브라우저 호환성, 성능 최적화 및 접근성과 같은 요소들을 고려해야 함.
     * 이 기술을 선택함으로써 개발자는 레이아웃 설계의 정확성과 유지 관리 용이성을 얻을 수 있지만, 학습 곡선의 가파름과 복잡성 증가라는 단점도 있음.
"
"https://news.hada.io/topic?id=13571","Speakz - 7살 아이와 함께 외국어 동영상을 보기 위해 제작한 AI 더빙 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Speakz - 7살 아이와 함께 외국어 동영상을 보기 위해 제작한 AI 더빙 도구

Speakz: 다국어 미디어 번역 서비스

     * 한 언어로 된 비디오를 다른 언어로 번역하여 새로운 오디오 트랙을 생성
     * 원본의 목소리, 기타 소리 또는 배경 음악을 보존하면서 의미, 개성, 타이밍을 조화롭게 맞춰 자연스럽고 진정성 있는 번역을 제공
     * 개발자는 독일인인 자신과 7세 딸이 YouTube 콘텐츠를 독일어로 즐길 수 있도록 도구를 만듦

지원 언어 및 번역 속도

     * 출력 언어: 영어, 중국어, 스페인어, 아랍어, 프랑스어, 러시아어, 독일어, 이탈리아어, 한국어, 폴란드어, 네덜란드어를 지원
     * 입력 언어: 추가적으로 힌디어, 벵골어, 포르투갈어 등 다양한 언어를 지원
     * 30분짜리 비디오를 번역하는 데 약 1시간이 소요되며, 실시간 번역 및 스트리밍을 향한 발전 가능성이 있음

크리에이터와 일반 사용자를 위한 활용

     * 크리에이터는 Speakz를 사용하여 기존 콘텐츠로 더 많은 오디언스에게 다가갈 수 있음
     * YouTube는 비디오에 여러 오디오 트랙을 추가하는 것을 지원하므로 Speakz를 통해 자동으로 다양한 언어의 오디오 트랙을 추가할 수 있음
     * 일반 사용자도 개인 베타에 참여하여 원하는 비디오를 번역할 수 있음

비용 및 프라이빗 베타 참여

     * 비용은 아직 확정되지 않았으나, 언어당 시간당 약 5달러가 될 것으로 예상됨
     * 동일한 비디오를 여러 언어로 번역하거나 크리에이터를 위한 대량 할인이 있을 수 있음
     * 프라이빗 베타에 참여하고자 하는 사용자는 웹사이트를 통해 신청할 수 있음

GN⁺의 의견

     * Speakz는 다언어 콘텐츠 소비를 원하는 사용자와 글로벌 시장을 목표로 하는 크리에이터 모두에게 유용한 도구임
     * 실시간 번역 기능은 라이브 스트리밍이나 실시간 이벤트에서의 언어 장벽을 허물 수 있는 잠재력을 가짐
     * 비슷한 기능을 제공하는 다른 서비스로는 Google의 자동 자막 기능이나 Amara와 같은 커뮤니티 기반 번역 플랫폼이 있음
     * Speakz를 도입할 때는 번역의 정확성과 문화적 뉘앙스를 고려해야 함
     * 이 기술을 선택함으로써 얻을 수 있는 이점은 언어 장벽 없는 콘텐츠 접근성이지만, 비용과 번역 품질에 대한 고려가 필요함

        Hacker News 의견

     * 독일에서는 비디오를 대부분 더빙하지만, 7세 아이도 자막을 읽을 수 있을 것이며, 이는 영어 학습에 좋은 방법이라는 의견이 있음. 스웨덴에서는 학교에 들어가기 전에 대부분의 아이들이 이 방법으로 영어를 배운다고 함. 또한, 더빙이 흔한 나라일수록 평균 영어 능력이 낮은 경향이 있다는 강한 상관관계가 있다는 주장이 제시됨.
          + 웹사이트의 샘플이 인상적이며, 스피커 구분과 음성 복제가 어떻게 이루어지는지에 대한 질문이 있음. 음성 인식과 시간 단서를 사용하여 문장 단위로 나누고, 번역 엔진을 사용하여 다양한 번역안을 제공하며, 언어에 관계없이 원본 음성을 복제하고, 가장 시간 매칭이 잘 되는 번역을 선택하는 과정이 포함될 수 있음을 추측함.
     * 간단한 영어를 출력 언어 옵션으로 추가해달라는 요청이 있음. 이를 통해 언어 복잡성을 아이들의 수준에 맞추고 점차적으로 지원을 줄여나갈 수 있음.
     * 러시아어 사용자가 Lex 샘플의 더빙이 실제와 매우 흡사하다고 칭찬함. 전문 더빙 수준은 아니지만 매우 좋으며, Lex와 Elon의 목소리와도 매우 가깝다고 함.
     * 자동 자막 생성 솔루션을 개발한 경험이 있는 사용자가 자동 더빙에 대한 프로젝트를 칭찬함. 자동 더빙은 관객에게 편안한 결과를 위해 수동 조정이 필요하며, 편집 소프트웨어로 돌아가지 않고도 더빙을 미세 조정할 수 있는 고급 편집기 제공에 초점을 맞추고 있음을 설명함.
     * 프로젝트에 대한 감탄과 함께, 비디오를 개별적으로 결제할 의향이 있다는 의견이 있음. 페이지 피드백으로는 비디오가 계속 재생되어 같은 부분을 다른 언어로 비교하기 어렵다는 문제점을 지적함. 또한, 번역 오류와 타이밍 문제가 있으며, 원본 오디오의 일부가 번역되지 않는 경우도 있음을 언급함.
     * 네덜란드어 더빙이 어린이 TV에서만 경험되었지만, 네덜란드어 모델이 개선이 필요하다는 의견이 있음. 특히 대만 다큐멘터리 더빙이 이해하기 어려웠다고 함. 네덜란드어가 포함된 이유에 대해 의문을 제기하며, 네덜란드어 사용자들이 대부분 영어를 이해한다고 언급함.
     * 그리스와 같이 영화와 TV 프로그램이 더빙되지 않는 많은 국가에서는 시각 장애나 노화로 인한 시력 문제가 있는 사람들이 영어를 잘하지 못하면 현지 제작 영화 및 프로그램만 볼 수밖에 없다는 문제를 지적함. 이러한 문제를 해결할 수 있는 프로젝트라고 평가함.
     * 오디오 타이밍 방식이 영리하다고 칭찬하며, 어떤 모델을 사용하고 있는지에 대한 질문이 있음.
     * 독일 콘텐츠를 보면서 영어 자막이 AI에 의해 생성되었는지 궁금해진 적이 있다는 의견이 있음. 때로는 자막이 독일어보다 더 혼란스럽게 느껴지며, 문맥 단서 등을 사용하는 실제 번역가보다는 자동 생성된 것처럼 보인다고 함.
"
"https://news.hada.io/topic?id=13575","Klarna, AI 봇이 700명의 일을 대신하고 있다고 밝혀","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Klarna, AI 봇이 700명의 일을 대신하고 있다고 밝혀

     * Buy Now Pay Later 서비스 회사인 Klarna가 OpenAI에 의해 구동되는 AI 어시스턴트를 발표
     * 전 세계적으로 1개월간 운영된 결과, AI 봇은 클라르나 고객 서비스 채팅의 3분의 2인 230만 건의 대화를 처리
     * 이는 700명의 전임 직원이 수행하는 일과 동등하며, 고객 만족도 점수에서 인간 에이전트와 동일한 수준을 보임
     * 문제 해결의 정확성이 더 높아, 반복 문의가 25% 감소하고, 고객들은 이전의 11분에서 2분 미만으로 문제를 해결함
     * 23개 시장에서 24/7로 이용 가능하며, 35개 이상의 언어로 의사소통
     * 2024년에 수익을 4천만 달러 향상시키는 데 도움이 될 수 있다고 추정

클라르나의 AI 어시스턴트 주요 기능

     * 24/7 고객 서비스 전문가: 환불, 반품, 결제 관련 문제, 취소, 분쟁, 청구서 오류 등 다양한 문의를 능숙하게 처리함
     * 개인 재정 어시스턴트: 미결제 잔액과 다가오는 결제 일정에 대한 실시간 업데이트를 제공하여 클라르나 결제를 놓치지 않도록 함
     * 다국어 채팅 지원: 35개 이상의 언어로 문의를 처리할 수 있어, 모국어로 대화 가능

   이와 관련해서 FastCompany 기사는 클라나는 700명을 해고한 후 AI 비서가 700명의 일을 대신한다고 발표 했다고 썼는데요.
   2022년에 경제적 불확실성, 인플레이션, 경기 침체 가능성을 이유로 직원의 약 10%를 해고했는데, 이제와서 AI가 사람을 대신한다고 해서 이슈?가 되고 있네요.
   Klarna가 올해 IPO 할 예정이어서 좀 더 극적인 수치를 발표한게 아니냐는 의심도 있고요.
"
"https://news.hada.io/topic?id=13617","IPO 앞둔 레딧 CEO의 편지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           IPO 앞둔 레딧 CEO의 편지

   ""요즘 우리 사는 지구를 둘러보면 세상 굴러가는 모습과 사람들에게 실망감을 품고 등을 돌리기 쉽지만, 전 레딧에서만큼은 그 정반대를 경험했습니다: 사람들은 자연스레 커뮤니티를 형성하며, 제가 생각하기에 그들은 우리가 보통 평가하는 것보다 더 똑똑하고, 재밌고, 서로에게 큰 도움이 되며 상냥합니다.

   그리고 이것은 우리의 유저들이 인류의 어떤 특별한 부분집합에 속하기 때문이 아닙니다. 그들은 그냥 평범한 보통 사람들입니다. 그러나 사람들은 적절한 환경 속에 놓였을 때, 믿을 수 없는 성취를 이뤄낼 수 있습니다.""

   레딧 창업주/CEO, 스티브 허프먼

   레딧은 최근 몇년간 말도 많고 평판도 많이 안 좋아졌던데 이게 다 IPO 때문이었던걸까 싶네요
"
"https://news.hada.io/topic?id=13582",""엄마, 행렬이 없어도 돼"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ""엄마, 행렬이 없어도 돼""

PGA를 테스트하다

     * PGA(프로젝티브 기하 대수)는 컴퓨터 그래픽스와 머신러닝 커뮤니티 내에서 주목받고 있음.
     * 기존 3D 그래픽스에서 PGA의 적용은 제한적이었으나, 'Look, Ma, No Matrices!' 프로젝트는 PGA를 현대적인 3D 엔진에 통합하여 적용 범위를 확장하고자 함.
     * 이 프로젝트는 기존 기술을 대체하는 것이 아니라 PGA의 잠재력을 발휘하기 위해 근본적인 재검토가 필요함을 강조함.

소개

     * 컴퓨터 그래픽스에서 행렬은 매우 중요한 역할을 함.
     * 오늘날 GPU는 프로그래밍 가능하고, 고정된 기능 파이프라인에 묶여 있지 않아 PGA를 사용할 수 있는 여건이 마련됨.
     * 행렬은 선형 변환을 나타내는 데 적합하지만, PGA 모터는 유클리드 운동을 더 낮은 계산 및 메모리 비용으로 인코딩할 수 있음.

FPGA: 빠른 PGA!

     * PGA의 기본 연산자와 CPU 및 GPU에 필요한 기술을 상세히 설명함.
     * PGA의 기본 벡터와 메모리 레이아웃은 그래픽 데이터를 처리할 때 변환을 최소화하기 위해 선택됨.
     * PGA의 데이터 구조는 간단한 셰이더 구조로 번역되어, 내장 타입을 사용하여 연산을 유지함.

기하학적 연산자를 얻다

     * PGA에서 변환의 구성은 행렬 곱셈보다 효율적인 기하학적 곱셈을 사용함.
     * 점과 방향을 변환하는 데 필요한 샌드위치 연산자는 PGA에서 중요한 역할을 함.
     * PGA 모터의 정규화와 제곱근 연산은 PGA에서 중요한 연산으로, 효율적인 구현이 가능함.

행렬을 벗어나다

     * 기존 콘텐츠와의 상호 작용은 행렬을 PGA 동등물로 변환해야 함을 의미함.
     * PGA 모터는 4x4 행렬과 달리 스케일링을 포함하지 않으므로, 유니폼 스케일링은 각 요소의 총 스케일을 부모의 스케일과 곱하여 추적함.
     * 비유니폼 스케일링은 더 복잡하지만, 리프 노드에서만 적용되는 경우가 대부분임.

포워드 렌더링

     * 포워드 렌더러는 메시 기하학을 변환하고 각 삼각형이 어떤 픽셀을 커버하는지 결정함.
     * 모델, 뷰, 프로젝션 행렬을 PGA 모터로 대체하고, 정점 셰이더에서 탄젠트 공간 노멀 매핑을 위해 필요한 변환을 수행함.
     * PGA 접근 방식은 4x4 행렬을 사용할 때와 거의 동일한 계산 비용으로 메시 정점을 변환할 수 있음을 보여줌.

GN⁺의 의견

     * 'Look, Ma, No Matrices!' 프로젝트는 기존의 행렬 기반 렌더링 방식에 대한 흥미로운 대안을 제시함. PGA를 사용하여 3D 그래픽스에서의 변환을 처리하는 새로운 접근 방식은 컴퓨터 그래픽스 분야에서 혁신을 가져올 수 있음.
     * 이 기술은 기존의 행렬 연산에 익숙한 개발자들에게는 새로운 학습 곡선을 요구할 수 있으며, 이는 도입 초기에 장벽이 될 수 있음.
     * 유사한 기능을 제공하는 업계의 다른 프로젝트나 제품으로는 OpenGL이나 DirectX와 같은 그래픽스 API가 있으나, 이들은 전통적인 행렬 기반 접근 방식을 사용함.
     * PGA를 도입할 때는 기존 코드베이스와의 호환성, 성능 최적화, 개발자 교육 등을 고려해야 함.
     * PGA를 선택함으로써 얻을 수 있는 이점은 메모리 및 계산 효율성 향상이지만, 이는 기존 시스템과의 통합이나 개발자의 PGA 이해도에 따라 달라질 수 있음.

        Hacker News 의견

     * Freya Holmér의 기하대수(Geometric Algebra) 소개 영상 추천
          + 3D 그래픽스, 특히 스플라인/베지어 곡선에 관심이 있는 사람들에게 유용
          + 선형대수보다 클리퍼드 대수(Clifford Algebra) 방식이 더 직관적으로 느껴짐
          + Freya Holmér의 영상 링크
     * 기하대수에 대한 이해
          + 기하대수는 다항식 곱셈과 유사하지만, 곱셈 순서가 중요하고 특이한 곱셈 테이블을 가짐(ii = 1, ij = -j*i)
          + 두 벡터의 기하적 곱셈은 점곱(dot product)과 외적(cross product)을 포함하지만, 더 많은 차원으로 일반화 가능
          + 기하대수에서는 ""wedge product""라고 불림
          + 이 개념을 이해하면 회전 공식 유도 등의 기하학적 문제 해결이 쉬워짐
     * 회전 보간법에 대한 다양한 접근
          + 기하대수, 쿼터니언, 행렬 보간법 등 여러 방법이 있으나 최적화 후 코드는 대부분 유사함
          + 기하대수는 가장 일관되고 능력 있는 접근법으로 보임, 처음에는 낯설고 이해하기 어려움
          + 대부분은 쿼터니언을 사용하면서 이해하지 못한다고 불평함
     * 기하대수 관련 자료 추천
          + Grassman/Clifford/기하대수 개념에 대한 슬라이드와 웹사이트 링크 제공
          + Terathon의 슬라이드
          + Matt Ferraro의 기하대수 포스트
     * 페이지의 나머지 부분에서 모델이 너무 활동적이어서 수학을 이해하기 어려움
     * 기하대수의 복잡성에 대한 비판
          + 주의하지 않으면 혼합 요소가 많아지고, n차원 공간에 대해 2^n개의 항이 필요할 수 있음
          + 기하학(내적) 처리에는 더 적합해 보이지만, wedge product와 hodge star(또는 음악적 동형사상)을 사용하는 것이 더 나을 수 있음
          + 기하대수의 유틸리티에 대한 의문 제기
     * PGA(프로젝티브 기하대수)라는 약어를 처음 사용할 때 정의해달라는 요청
     * 기하대수 알고리즘의 GPU 효율성에 대한 의문
          + GPU가 행렬 작업에 최적화되어 있어 기하대수를 사용할 때 이점이 사라지는지 궁금함
     * 기사가 흥미롭고 즐겁게 읽힘, 특별한 관심 분야는 아니지만 글이 매력적임
     * 그래픽 연산의 리 대수(Lie algebra) 이론 설명이 필요함
"
"https://news.hada.io/topic?id=13566","Show GN: Empty Canvas: 애니메이션 화풍 이미지 생성 & 검색 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: Empty Canvas: 애니메이션 화풍 이미지 생성 & 검색 엔진

   무료로 한 번에 여러장의 애니메이션 화풍 이미지를 생성하고, 내 마음에 쏙 드는 이미지를 골라 각색하거나 확대할 수 있습니다.

   실사에 가까운 이미지보다 오직 그림, 만화, 애니메이션, 게임, 판타지 화풍의 이미지를 더 잘 생성하도록 학습되었습니다.

   문제가 될 수 있는 프롬프트 또는 이미지는 생성되지 않거나 삭제될 수 있습니다.
"
"https://news.hada.io/topic?id=13630","Google DeepMind, "생성형 인터랙티브 환경" Genie 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Google DeepMind, ""생성형 인터랙티브 환경"" Genie 공개

""Generative Interactive Environments""

     * 인터넷 동영상으로 학습한 파운데이션 월드 모델로, 합성 이미지/사진/스케치로부터 무한한 다양성을 가진 플레이 가능한 세계를 생성할 수 있음
     * 2D 플랫포머 게임과 로보틱스의 인터넷 비디오 대규모 데이터셋에서 훈련되었으며, 어떠한 도메인에도 적용 가능하고 인터넷 데이터셋으로 확장 가능함

동작 레이블 없이 제어 배우기

     * 인터넷 비디오만으로 세밀한 제어를 배울 수 있는 능력을 가지고 있으며, 이는 동작이나 제어해야 할 이미지 부분에 대한 레이블이 없는 인터넷 비디오에서는 도전적인 일임
     * Genie는 관찰 가능한 부분 중 어떤 부분이 일반적으로 제어 가능한지, 그리고 생성된 환경에 걸쳐 일관된 다양한 잠재 동작을 추론할 수 있음

새로운 창작자 세대를 가능하게 함

     * 단 하나의 이미지만으로 새로운 상호작용 환경을 만들 수 있어, 가상 세계를 생성하고 진입하는 새로운 방법을 제공
     * 최첨단 텍스트-이미지 생성 모델을 사용하여 시작 프레임을 생성한 후 Genie로 생명을 불어넣어 가상 세계를 만들 수 있음
     * 스케치나 실제 세계 이미지로부터도 가상 환경을 생성 가능

일반적인(Generalist) 에이전트를 위한 발판

     * 게임 환경이 AI 에이전트 개발을 위한 효과적인 테스트베드가 될 수 있지만, 사용 가능한 게임 수에 의해 제한을 받음
     * Genie를 사용하면 AI 에이전트를 새롭게 생성된 무한한 환경에서 훈련시킬 수 있으며, Genie가 배운 잠재 동작이 실제 인간이 설계한 환경으로 전이될 수 있음을 증명

생성 가상 세계의 미래

     * 이 웹사이트에서는 플랫포머 결과에 초점을 맞췄지만, Genie는 일반적인 방법론으로 다양한 도메인에 적용 가능함
     * Genie는 변형 가능한 객체도 시뮬레이션할 수 있으며, 이는 데이터로부터 학습할 수 있는 인간 설계 시뮬레이터에게는 도전적인 작업임
     * Genie는 이미지나 텍스트로부터 전체 상호작용 가능한 세계를 생성할 수 있는 시대를 도입하고, 미래의 일반적인 AI 에이전트를 훈련시키는 촉매제가 될 것으로 기대됨

   잼민이 Gemini
   점마 Gemma
   쟤니 Genie
"
"https://news.hada.io/topic?id=13622","알고리듬에 의한 가격 담합 역시 가격 담합입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       알고리듬에 의한 가격 담합 역시 가격 담합입니다

     * 알고리듬에 의한 가격 조작은 여전히 가격 조작임
          + 임대업자와 자산 관리자는 임대 가격에 대해 담합할 수 없으며, 새로운 기술을 사용한다 해도 이런 반독점 기본 원칙은 변하지 않음.
          + 비즈니스가 가격을 결정하기 위해 알고리듬을 사용하는 경우, FTC와 법무부가 제출한 간단한 지침은 반독점 준수를 위한 유용한 가이드라인을 제공: ""실제 사람이 했다면 불법이 될 수 있는 일을 알고리듬이 해서는 안 됨.""
     * 주거용 주택 시장에서의 알고리듬 담합과 싸우기 위한 조치
          + FTC와 법무부는 알고리듬을 통한 가격 조작이 여전히 가격 조작임을 설명하는 공동 법률 의견서를 제출함.
          + 의견서는 모든 산업의 비즈니스에 중요한 경쟁법의 핵심 측면을 강조: (1) 가격 고정 금지 법률을 회피하기 위해 알고리듬을 사용할 수 없으며, (2) 공동 가격 결정, 목록, 계산 또는 알고리듬 사용에 대한 합의는 공모자들이 일부 가격 결정 권한을 유지하거나 합의를 어기더라도 여전히 불법일 수 있음.
     * 주거용 주택 임대 가격 상승과의 싸움의 중요성
          + 주거용 주택 임대 가격은 2020년 이후 거의 20% 상승했으며, 가장 큰 증가는 저소득 소비자가 임대하는 하위 및 중간 계층 아파트에 집중됨.
          + 약 절반의 임차인이 임대료와 유틸리티에 소득의 30% 이상을 지불하고 있으며, 상승하는 주거 비용은 1월 인플레이션의 3분의 2 이상을 차지함.
     * 알고리듬 가격 결정의 사용과 그 위험성
          + 임대업자는 점점 더 알고리듬을 사용하여 가격을 결정하며, ""RENTMaximizer""와 유사한 소프트웨어를 사용하여 전국 수백만 아파트의 임대료를 결정함.
          + 알고리듬 가격 담합의 잠재적 위험은 민간 주식 지원의 임대업자 및 재산 관리 회사 간 합병으로 더욱 중요해짐.
     * 다른 비즈니스에 대한 메시지
          + 알고리듬 사용에 동의하는 것은 합의임. 알고리듬 담합에서 가격 결정 알고리듬이 경쟁자 데이터를 결합하여 주어진 지역 조건에 따른 최대화된 임대료를 제안함.
          + 한 번 독립적인 가격 결정을 공유 알고리듬으로 대체할 때, 문제가 예상됨. 가격을 고정하기 위해 공유된 인간 에이전트를 사용하는 것은 불법임.
     * **가격 편차가 공모자들을 면

   책시키지 않음**
     * 소프트웨어가 추천하는 대로가 아닌 가격을 설정하거나 추천하는 것이 불법일 수 있음, 심지어 공모자들이 추천된 가격에서 벗어나더라도 마찬가지임.
     * 주택 산업만이 잠재적으로 불법적인 공모 알고리듬을 사용하는 것은 아님
          + 법무부는 온라인 재판매에서 가격 알고리듬 사용으로 인한 고정 가격 관련 유죄 인정을 확보했으며, 고기 가공 경쟁자 간의 가격 관련 및 기타 민감한 정보 공유에 대한 진행 중인 사례가 있음.
     * 기술의 약속과 그 위험
          + 올바르게 사용되면, 기술은 우리의 삶을 더 건강하고, 안전하며, 효율적으로 만들 수 있음. 하지만, 나쁜 행위자들이 경쟁을 짓밟거나 소비자들을 새로운 방식으로 속이는 데 사용될 수도 있음.

        Hacker News 의견

     * YieldStar 소프트웨어는 미국 전역의 아파트 가격을 설정하는 데 도움을 주는데, 이 소프트웨어는 알고리즘을 사용하여 RealPage가 고객들로부터 수집한 데이터를 분석함.
          + 이 시스템은 임차인들이 아파트 건물 직원과 협상하는 관행을 뒤집고, RealPage는 임차인과의 흥정을 권하지 않으며 때로는 임대료를 올려 수익을 높이기 위해 낮은 점유율을 받아들이라고 권장함.
          + 알고리즘 개발자 중 한 명은 컴퓨터가 생성한 가격 책정이 임대 대리인들보다 ""공감 능력이 덜하다""고 언급함.
     * 한 사용자는 자신이 살았던 건물이 헤지펀드 소유였고 알고리즘 가격 책정을 사용했으며, 이로 인해 불만을 느꼈음.
          + 건물의 공실률과 영업 사원들이 얼마나 거주자를 필요로 하는지 알고 있음에도 불구하고, 지역의 수요 때문에 임대료가 수백 달러 오른다고 통보받았음.
          + 또한, 공실인 유닛에 이사하면 임대료를 낮춰주는 방식으로 사람들이 매년 이사하도록 ""유인""했음.
     * 다른 사용자는 모든 대형 로펌이 동일한 시작 급여를 제공하는 것이 불법 담합으로 간주되지 않는 반면, 임대료 책정을 위한 시장 추정 서비스를 사용하는 것이 불법 담합으로 간주되는 것에 대해 이해할 수 없다고 언급함.
     * 또 다른 사용자는 연방거래위원회(FTC)의 조치가 건강하지 못한 임대 시장에 의미 있는 변화를 가져올 것이라고 보기를 희망하면서도, 이미 상황이 벗어나 버린 것 같다고 우려를 표함.
     * 한 사용자는 이러한 상황이 놀라운 것은 우리가 오랫동안 이를 당연한 것으로 받아들였기 때문이며, 불법임에도 불구하고 FTC가 법 집행을 시작하기로 한 것은 긍정적이라고 평가함.
     * 다른 사용자는 알고리즘을 사용하여 가격을 추천하는 것은 여전히 유효하지만, 경쟁자와 동일한 알고리즘을 사용하기로 합의하는 것은 허용되지 않는다고 이해하고 있으며, 경쟁자의 가격을 고려하는 알고리즘 자체가 문제가 되는지에 대해 의문을 제기함.
     * 또 다른 사용자는 이러한 변화가 기술 분야의 급여 설정에 영향을 미칠 수 있는지 궁금해하며, 많은 회사들이 ""비슷한"" 회사들이 하는 일을 바탕으로 급여 등급을 설정한다고 언급함.
     * 한 사용자는 이 소프트웨어가 임대인들이 알고리즘을 사용하여 가격 담합을 할 수 있게 하며, 이는 법이 허용하지 않는 행위라고 지적함.
          + 독립적인 가격 결정을 공유된 알고리즘으로 대체할 때 문제가 발생할 것으로 예상함.
     * 다른 사용자는 문제의 핵심이 공개된 가격 데이터베이스의 공유라고 설명하며, 공개 데이터와 이 소프트웨어가 사용하는 고유한 고객 간 가격 데이터베이스는 다르다고 주장함.
          + 공개 정보는 경쟁자의 소유주가 누구인지 알려주지 않지만, 이 소프트웨어는 그 정보를 제공하며, 이것이 담합으로 간주될 수 있다고 논의함.
     * 마지막으로 한 사용자는 수천 개의 아파트가 불법적으로 징수한 임대료 인상분을 임차인에게 돌려주기를 바람.
"
"https://news.hada.io/topic?id=13560","닌텐도, 스위치 에뮬레이터 'Yuzu' 제작자들을 상대로 소송 제기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 닌텐도, 스위치 에뮬레이터 'Yuzu' 제작자들을 상대로 소송 제기

닌텐도, 유즈(Yuzu) 에뮬레이터 제작자들을 상대로 소송 제기

     * 닌텐도 오브 아메리카(Nintendo of America)가 닌텐도 스위치 에뮬레이터인 유즈(Yuzu) 제작자들을 상대로 기술이 해적판 게임을 촉진한다며 소송을 제기함.
     * 유즈는 개발사 트로픽 헤이즈(Tropic Haze LLC)가 만든 도구로, 닌텐도 스위치 게임의 소프트웨어 암호화 및 저작권 보호 시스템을 불법적으로 우회하여 저작권 침해를 한다는 것이 닌텐도의 주장임.
     * 유즈 공식 웹사이트는 사용자가 자신의 닌텐도 스위치 게임을 덤프하여 사용해야 한다고 명시하고 있으나, 이러한 도구들이 주로 그렇게 사용되지 않는다는 것이 일반적인 인식임.

유즈의 파트리온 페이지 성공에 대한 닌텐도의 지적

     * 닌텐도의 법적 문서는 유즈의 파트리온 페이지가 7,000명 이상의 회원들에 의해 활발히 지원받고 있으며, 월 30,000달러 가까이 수입을 올리고 있다고 지적함.
     * 닌텐도는 이 파트리온 페이지가 에뮬레이터를 적극적으로 홍보하고 있으며, 이는 간접적으로 해적판을 촉진한다고 주장함.

에뮬레이터 도구의 합법성과 닌텐도의 소송 요구

     * 에뮬레이터 도구 자체가 불법은 아니지만, 유즈가 활발히 사용되고 홍보되는 방식이 닌텐도가 문제 삼고 있는 부분임.
     * 닌텐도는 배심원 재판을 요구하고 있으며, 손해배상을 청구하고 유즈 에뮬레이터의 폐쇄를 요구하고 있음.

관련 정보: 스팀에서 돌핀 에뮬레이터 출시 계획 취소

     * 인기 있는 Wii 및 GameCube 에뮬레이터인 '돌핀(Dolphin)'을 스팀에 출시할 계획이었으나, 이제 그 계획이 취소됨.

GN⁺의 의견

     * 에뮬레이터는 게임 보존과 레거시 시스템의 게임을 현대 하드웨어에서 즐길 수 있는 방법을 제공하지만, 저작권 침해의 우려가 항상 존재함.
     * 닌텐도의 소송은 저작권 보호에 대한 그들의 강력한 입장을 보여주며, 에뮬레이터 커뮤니티에 경고 메시지를 보내는 것으로 해석될 수 있음.
     * 이 기사는 게임 개발자와 소비자 모두에게 중요한 저작권과 지적 재산권의 보호에 대한 논의를 자극할 수 있음.
     * 에뮬레이터를 사용할 때는 항상 저작권법을 준수하고, 자신이 소유한 게임을 사용하는 것이 중요함.
     * 유사한 기능을 제공하는 다른 합법적인 에뮬레이터로는 RetroArch나 OpenEmu가 있으며, 이들은 다양한 플랫폼의 게임을 지원함.

   전 사례를 보자마자 Youtube-dl이 생각났습니다. 그리고 결과는 다들 아시겠죠.
   복호화 키 관련된 떡밥도 돈지가 좀 되었는데 그걸 다시 들고온거 보면 잘 모르겠고요.
   아무튼, Yuzu 팀 블로그에 아무런 언급도 없고 저장소도 문제 없는걸 보면 더 찾아봐야겠지만 기사에 신뢰가 잘 안가네요. 추가 출처가 있으면 남겨보겠습니다.

   youtube-dl 결과가 제가 아는 것과 다를까요? 제가 아는 걸로는 다시 원복 된걸로 알고 있는데요.
   https://github.com/ytdl-org/youtube-dl

   맞습니다. 여러 반발을 받고 원복 되었고 지금도 여전히 개발되고 있죠.

   같은 이유로(복호화키) 돌핀을 스팀에서 내린걸 보면 그때부터 떡밥을 풀고 있었던거 같긴 합니다.

   https://scribd.com/document/709016504/…
   고소 당한게 맞네요.

   paywall도 있어서..

   C++로 개발된 Yuzu - 닌텐도 스위치 에뮬레이터
   C#으로 개발된 Ryujinx - 오픈소스 닌텐도 스위치 에뮬레이터

   에뮬레이터는 항상 이런 문제가 있죠.
   자신의 롬을 써야한다고 명시하고 있기는 해서 에뮬레이터 자체만 가지고는 법률적으로 닌텐도가 승리할것 같지는 않은데, 패트리온과 홍보방식을 문제 삼는건 어찌 될지 모르겠네요.

        Hacker News 의견

     * Nintendo가 PC 형태의 게임기, 특히 Nintendo Switch와 유사한 Steam Deck의 인기에 문제를 제기하는 것 같음. Nintendo는 2022년부터 Steam Deck에서 Switch 게임을 실행하는 YouTube 동영상을 차단하기 시작했고, Steam에 등록하려는 Dolphin (GCN/Wii 에뮬레이터)에 대해서도 법적 조치를 취함.
     * Patreon을 통한 수익 창출이 언젠가 문제가 될 것이라고 생각함. ""공격적인"" 오픈 소스 프로젝트에 돈이 개입되면, 피해를 입는다고 느끼는 당사자가 법적 주장을 펼치기 쉬워짐. Ryujinx (다른 Switch 에뮬레이터 프로젝트)도 Patreon을 운영하고 있지만 아직 소송당하지 않은 것이 놀랍다고 함.
     * Yuzu 에뮬레이터가 Nintendo와 같은 대기업에 도전하는 것이 무엇을 기대했는지 의문. 법적 대응에 대비해야 한다고 생각함. Nintendo가 직원들에게 급여를 지불해야 하기 때문에, Nintendo의 입장에서는 같은 행동을 할 것이라고 함.
     * 에뮬레이터가 성공적으로 소송당한 사례가 있는지 주목할 만한 큰 사건. 사용자가 자신의 키와 롬을 제공하는 것은 저작권을 위반하지 않는 것으로 보임. 그러나 법적 자금 소진을 통해 한 번 소송이 있었으나 결국 에뮬레이터 개발자들이 승소함.
     * Nintendo가 오픈 소스 에뮬레이터를 Switch용으로 사용하면서 저작권자에게 크레딧을 주지 않고 소송을 제기한 것이 사실이라면, Nintendo에 대한 동정심이 없음.
     * Nintendo가 Switch 게임을 4K/60fps로 합법적으로 플레이할 수 있는 방법을 제공했으면 좋겠음. 2017년 Switch 하드웨어로는 높은 품질의 경험을 제공할 수 없어 Yuzu와 같은 소프트웨어를 사용해야 함. Sony는 자사의 주요 게임을 PC로 포팅하여 큰 상업적 성공을 거두고 있지만, Nintendo는 과거에 머물러 있음.
     * Nintendo가 새로운 Wii 콘솔을 판매하지 않아서, 사람들이 중고 콘솔을 구입하지 않는 이상 Mario Galaxy 1이나 2를 플레이할 수 없음. 한정판으로 출시된 게임을 더 이상 판매하지 않는 것은 게임을 불법 복제하도록 유도하는 것 같음.
     * 지난해 출시된 The Legend of Zelda: Tears of the Kingdom의 백만 개 이상의 복사본이 정식 출시 전에 다운로드됐다고 주장하는 법적 문서. 그 결과, Nintendo는 손해 배상을 요구하고 Yuzu 에뮬레이터의 폐쇄를 요구함.
     * Nintendo가 Yuzu가 보안 조치를 우회한다고 주장하는 경우, 보안 조치를 재구현하는 것은 보안 조치를 약화시키는 것이 아니라 강화하는 것으로 보임.
     * Switch가 곧 수명을 다할 것 같아 안타까움. 다음 세대 콘솔이 출시되면 Switch는 레거시 시스템이 될 것이고, 에뮬레이션은 보존을 위해 중요함. 이로 인해 앞으로 Nintendo 제품을 구매할 가능성이 낮아짐.
"
"https://news.hada.io/topic?id=13564","스타트업에서 4년간 인프라를 운영하며 좋았던/후회하는 (거의) 모든 인프라 결정들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             스타트업에서 4년간 인프라를 운영하며 좋았던/후회하는 (거의) 모든 인프라 결정들

     * 모든 선택에 대해서 Endorse(지지)와 Regret(후회)로 표시

AWS 선택

     * AWS 대 Google Cloud 선택: AWS를 선택한 것을 지지함. AWS는 고객에 중점을 두고 있음. Google Cloud는 로봇과 자동화에 의존하는 느낌이 있음.
     * EKS: EKS 사용을 지지함. EKS는 AWS 서비스와의 깊은 통합을 제공하며, Kubernetes도 많은 방면에서 따라잡았음(외부dns를 사용하여 Route53과 통합하는 등)
     * EKS 관리형 애드온: EKS 관리형 애드온 사용을 후회함. 설치를 커스터마이즈해야 할 필요가 있었고, helm 차트로 전환한 이후 더 나은 운영을 경험

데이터베이스 및 캐싱

     * RDS: RDS 사용을 지지함. 데이터는 인프라의 가장 중요한 부분이며, RDS 사용 비용은 가치가 있음
     * Redis ElastiCache: Redis 사용을 지지함. Redis는 캐시 및 일반적인 사용에 매우 효과적임
     * ECR: quay.io에서 ECR로 이전한 것을 지지함. ECR은 더 안정적이고 권한 통합이 더 깊음

네트워크 및 지원

     * AWS VPN: AWS VPN 사용을 지지함. VPN은 설정 및 이해가 매우 간단함. VPN 액세스를 관리하기 위해 Okta를 사용하고 있으며 매우 좋은 경험을 줌
     * AWS 프리미엄 지원: 후회함. AWS 프리미엄 지원 비용이 매우 비싸며, 내부 AWS 지식이 부족하지 않다면 그 가치가 없음
     * Control Tower Account Factory for Terraform: AFT 통합을 지지함. 계정 생성을 자동화하고 태그 표준화에 도움이 됨

프로세스 자동화

     * 슬랙 봇을 이용한 사후 분석 자동화: 사후 분석 프로세스 자동화를 지지함. 사람들이 사후 분석을 작성하도록 유도하는 데 도움이 됨
     * PagerDuty의 사고 템플릿 사용: 사고 발생 시 템플릿 사용을 지지함. Notion의 유연성을 활용하여 약간의 맞춤화가 가능함
     * PagerDuty 티켓 정기 검토: 경보 설정을 정기적으로 검토하는 것을 지지함. 중요하지 않은 경보도 무시되지 않도록 관리함
     * Datadog 또는 PagerDuty에서 사후 분석 관리: 사후 분석을 위한 통합된 관리 도구 사용을 후회함. 둘 다 사후 프로세스를 맞춤화하기가 어려움. Notion과 같은 강력한 도구를 사용하는 것이 더 낫다고 생각함

기타

     * 월간 비용 추적 회의: SaaS 비용을 검토하는 월간 회의를 지지함. 비용이 적절한지 확인하고 필요한 조치를 취함. AWS에서는 항목을 태그별로 그룹화하고 계정별로 구분. AWS에만 그치지 말고 회사가 가지고 있는 모든 주요 지출 지출원을 살펴보는 것을 추천
     * FaaS를 더 많이 사용하지 않음: GPU 작업에는 FaaS 옵션이 없어서 FaaS를 완전히 사용할 수 없었음을 후회함. 많은 CPU 작업은 FaaS로 처리할 수 있었을 것임. Lambda의 또 다른 숨겨진 이점은 높은 정확도로 비용을 추적하는 것이 매우 쉽다는 것
     * GitOps: GitOps 사용을 지지함. 인프라의 많은 부분에 GitOps를 사용하고 있으며, 도구 개발에 투자하여 배포 상태를 이해하는 데 도움을 줌
     * 팀 효율성 우선: 팀의 효율성을 높이는 것을 우선시하는 것을 지지함. 자동화나 문서화에 시간을 투자하는 것을 후회한 적이 없음
     * 여러 애플리케이션이 하나의 데이터베이스 공유: 여러 애플리케이션이 하나의 데이터베이스를 공유하는 것을 후회함. 이로 인해 여러 문제가 발생함

SaaS 도입

     * 아이덴티티 플랫폼 늦게 도입: Google Workspace를 사용하여 권한을 할당하는 데 사용했으나, Okta와 같은 아이덴티티 솔루션을 더 일찍 도입했어야 함을 후회함. Okta는 통합이 잘 되어 있으며, 보안 및 규정 준수 문제를 해결해 줌
     * Notion: 문서 작성을 위해 Notion 사용을 지지함. Notion은 훌륭한 선택이었으며 과거에 사용했던 것(Wikis, Google Docs, Confluence 등)보다 훨씬 쉽게 작동. 페이지 조직을 위한 데이터베이스 개념이 유용함
     * Slack: Slack 사용을 지지함. 의사소통을 위한 기본 도구로서 효과적임

개발 도구 및 서비스

     * JIRA에서 Linear로 이동: JIRA 대신 Linear 사용을 지지함. JIRA는 너무 복잡하고 무겁다고 생각함
     * Terraform Cloud 사용 안 함: Terraform Cloud 비용을 정당화할 수 없어서 사용하지 않음을 후회하지 않음. Atlantis로 이동했으며, 필요한 자동화를 CI/CD 파이프라인에 추가함
     * GitHub Actions for CI/CD: GitHub Actions 사용을 **어느 정도 지지(Endorse-ish)**함. 마켓플레이스의 액션과 문법이 사용하기 쉬움. 자체 호스팅 워크플로우에 대한 지원이 제한적임을 단점으로 봄

기술 선택

     * Datadog: Datadog 사용을 후회함. 비용이 매우 비싸며, Kubernetes 클러스터와 AI 회사에 대한 비용 모델이 부적절함
     * PagerDuty: PagerDuty 사용을 지지함. 제품이 좋고 가격이 적절함
     * 스키마 마이그레이션 by Diff: 스키마 마이그레이션을 위한 도구 사용을 어느 정도 지지함. 데이터가 중요하고 스키마 마이그레이션은 위험할 수 있음
     * Ubuntu for dev servers: 개발 서버로 Ubuntu 사용을 지지함. 잘 지원되고 필요한 대부분의 패키지를 가지고 있음
     * AppSmith: 내부 엔지니어를 위한 프로세스 자동화에 AppSmith 사용을 지지함. 자체 호스팅하며, 충분히 만족스러움. 처음에는 retool을 사용하여 더 깊은 통합을 모색했지만 당시에는 단지 몇 가지 통합에 불과한 가격을 정당화할 수 없었음
     * helm: Helm v3 사용을 지지함. CRD 배포와 개발자 교육에 문제가 있지만, Kubernetes 객체를 패키징하고 배포하는 데 충분히 좋음
     * helm 차트 in ECR(oci): OCI 저장소에 helm 차트를 저장하는 것을 지지함. S3와 플러그인을 사용한 이전 방식보다 문제가 없음
     * bazel: bazel에 대해 확신이 없음. Go 서비스 배포에는 과도한 것 같고, GitHub Actions가 더 많은 엔지니어가 사용하기 쉬움
     * 오픈 텔레메트리 사용 안 함: DataDog API를 직접 사용하여 메트릭을 전송하는 것을 후회함. 오픈 텔레메트리 사용을 시작부터 권장함
     * dependencyabot 대신 renovatebot 선택: 종속성을 최신 상태로 유지하는 것에 대해 더 일찍 생각했어야 함을 후회함. Renovatebot은 맞춤화가 가능하지만 설정과 디버깅이 복잡함
     * Kubernetes: Kubernetes 사용을 지지함. 장기 실행 서비스를 호스팅할 수단이 필요하며, Kubernetes는 인기 있고 잘 작동함
     * 자체 IP 구매: 외부 파트너와 작업할 때 자체 IP 블록을 구매하는 것을 지지함. 이는 외부 파트너에게 더 큰 CIDR 블록을 화이트리스트로 제공하는 데 도움이 됨
     * Flux for k8s GitOps 선택: Kubernetes용 GitOps 도구로 Flux를 선택한 것을 후회하지 않음. 배포 상태를 이해하는 데 도움을 주는 도구 개발이 필요함
     * Karpenter for node management: EKS 사용 시 Karpenter 사용을 지지함. 다른 오토스케일러보다 더 신뢰할 수 있고 비용 효율적임
     * SealedSecrets 사용: SealedSecrets 사용을 후회함. 개발자에게 복잡하고 AWS의 기존 비밀번호 암호 교체 자동화를 잃어버림
     * ExternalSecrets 사용: ExternalSecrets를 사용하여 AWS -> Kubernetes 비밀번호 동기화를 지지함. 개발자에게 이해하기 쉽고 terraform을 사용하여 AWS 내에서 비밀번호를 쉽게 생성/업데이트할 수 있음
     * ExternalDNS 사용: ExternalDNS 사용을 지지함. Kubernetes -> Route53 DNS 항목을 동기화하며 지난 4년 동안 문제가 거의 없었음
     * cert-manager 사용: SSL 인증서 관리를 위한 cert-manager 사용을 지지함. Let's Encrypt 인증서 생성에 매우 직관적이고 문제가 없음
     * Bottlerocket for EKS: Bottlerocket을 사용한 EKS 클러스터 운영을 후회함. 네트워킹 CSI 문제가 자주 발생하고 디버깅이 어려움
     * Terraform 대 Cloudformation 선택: Terraform 사용을 지지함. 다른 SaaS 제공업체로 확장하기 쉽고, CloudFormation보다 읽기 쉬운 구문을 가짐
     * 코드형 IaC 솔루션 사용 안 함: 후회하지 않음 Terraform과 CloudFormation이 데이터 파일을 사용하는 반면, Pulumi나 CDK는 코드로 인프라를 설명함. Terraform의 HCL 제한적인 성격이 복잡성을 줄이는 데 도움이 됨
     * 네트워크 메시 사용 안 함: 후회하지 않음 네트워크 메시는 멋지지만, 회사들이 복잡성을 과소평가하는 경향이 있음. 인프라에 대한 일반적인 조언은 ""더 적은 것이 더 낫다""임
     * Nginx 로드 밸런서 for EKS ingress: 후회하지 않음 Nginx 사용을 지지함. 오래되었지만 안정적이고 검증된 기술임
     * homebrew for company scripts: 회사 스크립트 배포를 위해 homebrew 사용을 지지함. Linux와 Mac 사용자 모두에게 스크립트와 바이너리를 배포하는 데 충분히 좋음
     * Go for services: 서비스용 Go 언어 사용을 지지함. 새로운 엔지니어가 배우기 쉽고 전반적으로 좋은 선택임

   관련해서 볼만한 긱뉴스 예전 기사들

   개발자 1인 회사인 분들, 기술 스택은 어떤걸 쓰시나요?
   1인 기술 스타트업의 아키텍쳐 스택
   1인 SaaS인 Healthchecks.io의 기술 스택
   1인 SaaS 개발자를 위한 도구 추천
   1인 여성 하드웨어 회사의 기술 스택
   스타트업을 년6$로 운영하기
   Stack on a Budget - 무료 티어 기반 개발
   최소한의 노력으로 소프트웨어 스타트업 운영하기
   월50만원($400)으로 80TB 트래픽과 5M 페이지뷰를 처리하는 방법

   본문도 댓글도 모두 가치있는 내용들이네요.

   키야....어디서도 구하기 힘든 실용적인 정보네요

  Hacker News 의견

     * RDS 사용의 추가 비용은 그만한 가치가 있음
          + RDS를 사용하는 것의 추가 비용은 콜로케이션된 SQL 서버 클러스터를 대체하는 것을 고려할 때마다 비현실적으로 비싸서 웃음만 나옴. 지불할 의향이 있는 것을 훨씬 초과하는 비용으로, 콜로케이션 랙, AWS Direct Connects, 서버, SAN, SQL 서버 라이선스, 유지보수 계약, 그리고 전임 내부 DBA의 급여까지 충당할 수 있음.
          + 12개월 총 비용: 547,441.85 USD
          + 마크업이 하나 이상의 전임 직원의 급여를 지불할 수 있을 정도로 커지면, RDS를 무작정 확장하는 대신 그 대신 직원을 고용하는 것을 고려해야 함. RDS를 사용할 때는 정말 많은 비용을 지불하고 있으며, 창업 초기에 내린 결정을 재평가해야 함.
     * Google Cloud가 AWS보다 뛰어나다는 것은 인기 없는 의견일 수 있지만, Google Cloud Run을 사용하면 꿈처럼 도커 컨테이너를 클라우드에서 실행할 수 있음. 서비스 이름이 간단하고, AWS의 복잡한 서비스들보다 중요한 서비스가 적으며, UI가 더 직관적임. 커뮤니티 부족으로 인한 튜토리얼 부족, 경험 많은 인력 찾기 어려움, 써드파티 도구 부족이 단점임. 사용해보길 추천함.
     * EC2 + ASG 사용이 매우 즐거움. 개념적으로 단순함: 이미지를 ASG에 런칭하고, 자동 스케일 정책을 설정함. 걱정할 것이 거의 없음. 반면, k8s 사용은 항상 큰 일임. k8s를 관리하기 위해 전체 팀을 구성함. k8s의 수십 가지 개념을 도입하거나 ""플랫폼 엔지니어링""에 사람-년을 투자해 k8s 개념을 숨김. k8s를 ""제대로"" 사용할 수 있도록 가이드라인과 SDK, 각종 검증기를 출시함. 그럼에도 불구하고 수만 줄의 YAML과 코드를 작성해 오퍼레이터를 구현함. 때때로 k8s가 너무 침입적인지 의문이 듦.
     * SaaS 제품에 대한 의견
          + JIRA에서 Linear로 이동하는 것에 대해 이해하지 못함. Linear는 괜찮지만, 할 수 없거나 방법을 모르는 것들을 자주 발견함.
          + Terraform Cloud 사용을 일반적으로 추천함. 집에서 자체 시스템을 성장시키는 것은 처음 몇 년 동안은 괜찮을 수 있지만, 장기적으로 비용이 들 수 있음.
          + CI/CD를 위해 GitHub Actions 사용을 어느 정도 지지함. 대신 GitLab을 사용할 것을 제안함.
          + Datadog에 대해 강하게 동의하지 않음. 시장에서 가장 좋은 모니터링/관찰 도구임. 비용이 가장 흔한 불만이지만, 대부분 Datadog 설정을 잘못하여 비용이 폭발적으로 증가하는 경우임.
          + Pagerduty에 대해 지지함. Pagerduty는 Opsgenie보다 약 10배 비싸고 더 나은 기능을 제공하지 않음. Pagerduty와 계약 갱신 시, Opsgenie에 없는 기능이 무엇인지 영업 담당자에게 물었을 때, 그들은 시장에서 고급 브랜드로 자리매김하려고 한다고 답함. 그래서 사건 보고를 위해 일반 브랜드를 사용하는 것에 만족함.
     * 90년대/00년대 개발자가 이 목록을 읽고 복잡성/용어에 혼란스러워할 것을 상상함.
     * 흥미로운 읽을거리지만, 블로그를 쓸 만큼 충분히 후회하는 사람인지 확실하지 않음.
     * 하나의 거대한 $100k 서버로 돌아가 모든 것을 한 상자 안에서 실행하는 것을 실험해보고 싶은 충동을 느낌.
     * Kubernetes / EKS의 기본을 배우는 데 성공했지만, ECS로 전환할 것을 고려 중임. Kubernetes는 우리의 필요에 비해 너무 복잡함. CloudFormation과 같은 것으로 제어하기 어려움. 부가 기능에서 프로비저닝된 로드 밸런서는 Kubernetes 외부에서 참조하기 어려움. EKS Fargate에서 Cloudwatch로의 로깅은 문서를 따라도 작동하지 않는 것 같음. EKS EC2에서처럼 CPU/메모리 메트릭이 작동하지 않으며, ADOT가 필요한 것으로 보임. ECS에서 환경을 1/10 시간에 재구성하고 모든 것이 잘 작동함.
     * 이 글을 쓴 방식과 내용을 좋아함. 일부 결정과 추천에 동의하지 않지만, 그런 경우에도 이유를 읽는 것은 훌륭함. 비슷한 글을 더 많이 발행하고 비교할 수 있는 방법이 있으면 좋을 것임. 비슷한 글을 쓰도록 영감을 받음.
     * 모두가 사용하는 주방 싱크 데이터베이스는 흔한 문제이지만, 계속해서 반복됨. 성장하면 상당한 기술 부채와 성능 병목 현상이 됨. RDS와 같은 관리형 DB를 사용하면 주요 앱별로 개별 DB 클러스터를 쉽게 운영할 수 있음.
"
"https://news.hada.io/topic?id=13631","배시(Bash)를 이용해 처음부터 만든 마인크래프트 서버 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 배시(Bash)를 이용해 처음부터 만든 마인크래프트 서버 (2022)

Bash로 작성한 마인크래프트 서버에 대한 생각

     * Bash로 마인크래프트 서버를 작성하는 것에 대한 고찰.
     * 이전에 2009년 클래식 프로토콜로 시도했으나 Bash에서 이진 데이터 파싱에 한계를 느낌.
     * read와 xxd를 사용하여 데이터를 읽고 16진수 덤프를 출력하는 방법을 고안함.
     * Bash는 널바이트를 무시하고 감지할 방법이 없어 데이터가 손상될 수 있음.

Bash에서 널바이트 읽기

     * dd와 xxd를 사용하여 널바이트를 포함한 이진 데이터를 처리하는 방법을 발견함.
     * 이 방법을 통해 패턴 매칭, 데이터 추출 등을 수행할 수 있음.
     * ncat을 사용하여 마인크래프트 기본 TCP 포트에서 수신 대기하고 연결이 들어오면 메인 쉘 스크립트(mc.sh)를 실행함.

프로토콜은 사실 그리 좋지 않음

     * 마인크래프트 서버가 기능하기 위해 구현해야 할 첫 번째 것은 서버 목록 핑 패킷임.
     * VarInts와 VarLongs 같은 데이터 타입 구현에 대한 어려움을 설명함.
     * LEB128 인코딩 방식을 사용하여 VarInt/VarLong 숫자를 구현함.
     * IEEE754 부동 소수점 숫자 구현에 어려움을 겪었으며, awk를 사용하여 해결함.

""Position"" 데이터 타입

     * Mojang이 만든 Position 데이터 타입은 64비트 Long 값에 X, Y, Z 좌표를 저장함.
     * 이 데이터 타입은 Bash에서 쉽게 구현 가능함.

Named Binary Tag

     * NBT는 Mojang이 만든 이진 데이터를 위한 JSON과 같은 형식임.
     * NBT 파서 구현을 거의 완성했으나, 프로젝트 디렉토리를 tmpfs로 사용하고 시스템 충돌로 인해 코드가 손실됨.

실제 서버 작성

     * 수학적인 부분을 넘어 실제 서버를 만드는 재미있는 부분에 도달함.
     * 클라이언트가 서버에 참여하기 위해 핸드셰이크 과정을 완료하고 몇 가지 패킷을 보내야 함.
     * Join Game 패킷과 Chunk 패킷 내의 데이터 구조가 가장 큰 장애물임.

""플러그인"" 시스템

     * 단순한 청크를 넘어 서버가 더 많은 것을 할 수 있도록 하기 위해 오버라이드 가능한 함수인 후크와 서버가 사용자 코드를 로드할 수 있는 옵션을 만듦.
     * 이를 통해 세계의 모습을 변경하는 것부터 마우스를 움직일 때 플레이어가 틱 소리를 내는 것까지 다양한 기능을 구현할 수 있음.

Witchcraft의 특이점들

     * Bash는 소수점 숫자를 다루는 데 제한이 있음.
     * 멀티플레이어는 완전히 작동하지 않음.
     * Witchcraft는 멀티스레드 서버이지만 스레드 간 통신을 위해 해킹을 사용함.
     * 데이터 교환 속도가 느림.
     * 최신 BusyBox(1.35.0)가 설치된 경우에만 실행됨.

FAQ

     * 블록 ID는 어디서 오는가, ""WitchCraft""라는 이름의 유래 등에 대한 질문과 답변.

리소스

     * Witchcraft 저장소, wiki.vg 프로토콜 문서 등의 리소스 링크 제공.

GN⁺의 의견

     * 이 프로젝트는 Bash의 한계를 극복하고자 하는 개발자의 창의성과 문제 해결 능력을 보여줌.
     * Bash로 마인크래프트 서버를 구현하는 것은 매우 비효율적일 수 있으나, 이러한 실험적 접근은 새로운 해결책을 찾는 데 도움이 될 수 있음.
     * 이 기술을 실제 게임 서버에 적용하는 것은 권장되지 않지만, 스크립팅 언어의 한계를 이해하고 이를 극복하는 방법을 배우는 데 유용할 수 있음.
     * 비슷한 기능을 제공하는 더 효율적인 서버 구현체로는 Java나 C++로 작성된 마인크래프트 서버가 있음.
     * 이 프로젝트는 Bash를 사용하여 복잡한 네트워크 프로토콜을 다루는 방법을 이해하는 데 유용한 교육 자료가 될 수 있음.

        Hacker News 의견

     * 스크립트 가능한 마인크래프트 서버에 대한 경험

     자바와 베드락(ScraM)을 위한 스크립트 가능한 마인크래프트 서버 작업 경험이 많은 한 사용자는 이를 인상적이라 평가함. ""duckduckgoing""이라는 단어를 문장에 사용한 것에 대해 별점을 주고 싶어함. 해당 토론은 92개의 댓글이 있음.
     * 음의 지수에 대한 이해

     음의 지수, 즉 2^(-n)이 1/(2^n)과 같다는 것을 언급하며, 저자가 자신의 2^-1 = 0.5 예시를 기억하지 못하고 awk에 도움을 요청한 것에 대해 놀라움을 표함. ctypes.sh 라이브러리를 사용했다면 bash에서 libm, poll(), select() 등에 접근할 수 있었을 것이라고 제안함.
     * 진정한 해커 사이트에 대한 칭찬

     이것이 진정한 해커 사이트라며, 매우 훌륭하다고 칭찬함.
     * bash에 대한 애정

     bash를 좋아하며, vim과 lua만큼이나 좋아함을 밝힘. 2MB 미만의 단일 바이너리로, 많은 사람들이 생각하는 것보다 훨씬 더 유능함을 강조함. shellcheck과 좋은 습관을 사용하면 bash도 읽기 쉽고 안전할 수 있음을 언급함. 추가적인 기능이 필요할 경우, FFI 등 복잡한 방법을 사용하지 않고도 C/C++을 사용해 유틸리티를 추가할 수 있으며, pip/npm 등을 사용해 불명확한 수많은 의존성을 불러오지 않아도 됨을 설명함.
     * bash 프로그래밍에 대한 놀라움

     bash 프로그래밍에 능숙하지 않지만, 실제로 얼마나 유능한지에 대해 놀라움을 표현함.
     * 커스텀 서버 작성에 대한 궁금증

     상업적 게임을 위한 커스텀 서버 작성이 여전히 유행하는지 궁금해함.
     * 마인크래프트에 대한 찬사

     마인크래프트를 퀘이크 이후 가장 위대한 게임 중 하나로 평가함.
     * 마인크래프트 구현에 대한 감탄

     마인크래프트가 구현된 방식에 대해 많은 기사를 읽었지만, 이것은 정말 놀라운 것이라며, 아마도 읽은 것 중 가장 훌륭한 기술 설명 중 하나라고 감탄함. 최고 수준이라고 칭찬함.
"
"https://news.hada.io/topic?id=13619","FastUI: 파이썬으로 더 빠르고 좋은 웹 UI 만들기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FastUI: 파이썬으로 더 빠르고 좋은 웹 UI 만들기

     * FastUI는 선언적인 파이썬 코드로 웹 애플리케이션 사용자 인터페이스를 구축하는 새로운 방법
     * 사용자 인터페이스를 정의하는 Pydantic 모델과 TypeScript 인터페이스의 집합
     * 파이썬 개발자라면 JavaScript나 npm을 사용하지 않고도 React로 반응형 웹앱을 구축 가능
     * 프론트엔드 개발자는 매번 복사-붙여넣기를 하지 않고도 재사용 가능한 컴포넌트를 집중적으로 구축할 수 있음
     * 모든 사용자에게는 백엔드가 전체 애플리케이션을 정의하고 프론트엔드는 사용자 인터페이스만 구현하는 진정한 관심사의 분리가 가능
     * 다양한 컴포넌트 기본 제공 : 토큰 기반 인증, GitHub OAuth, Markdown, Text, Paragraph, Heading, Code, Button, Link, Navbar, Modal, ServerLoad, Image, Iframe, Video, Table, Pagination, ModelForm

실제 사용법

     * FastUI는 네 가지로 구성됨:
          + fastui PyPI 패키지: UI 컴포넌트를 위한 Pydantic 모델과 유틸리티 제공. FastAPI와 잘 작동하지만 FastAPI에 의존하지 않으며, 다른 파이썬 웹 프레임워크와도 사용 가능함.
          + @pydantic/fastui npm 패키지: 자체 컴포넌트를 구현하면서 FastUI의 기계장치와 타입을 재사용할 수 있게 해주는 React TypeScript 패키지임.
          + @pydantic/fastui-bootstrap npm 패키지: Bootstrap을 사용하여 모든 FastUI 컴포넌트를 구현/사용자 정의함.
          + @pydantic/fastui-prebuilt npm 패키지: npm 패키지를 설치하거나 무엇인가를 직접 빌드할 필요 없이 FastUI React 앱의 사전 빌드된 버전을 제공함. 파이썬 패키지는 이 앱을 제공하는 간단한 HTML 페이지를 제공함.

원칙 (긴 버전)

     * FastUI는 RESTful 원칙의 구현체이지만, 일반적으로 이해되는 방식이 아닌 Roy Fielding의 박사 논문에서 정의된 원칙에 따름.
     * RESTful 원칙에 따르면 프론트엔드는 구축하는 애플리케이션에 대해 알 필요가 없으며, 단지 인터페이스를 구성하는 데 필요한 모든 컴포넌트를 제공해야 함.
     * 이 방식으로 애플리케이션을 구축하는 것은 여러 가저의 중요한 이점을 가짐:
          + 새 기능을 구축하기 위해 한 곳에서만 코드를 작성해야 함.
          + 프론트엔드와 백엔드의 배포를 완전히 분리할 수 있음.
          + 오픈소스 컴포넌트 세트를 재사용할 수 있으며, 이는 컴포넌트가 사용될 맥락에 대해 알 필요가 없기 때문에 가능함.
          + Pydantic, TypeScript, JSON 스키마를 사용하여 양쪽이 합의된 스키마로 통신하고 있음을 보장할 수 있음.

Python과 React를 넘어서

     * 이 원칙은 Python과 React 애플리케이션에만 국한되지 않으며, 동일한 합의된 스키마와 인코딩을 사용하여 통신한다면, 스키마를 구현하는 모든 프론트엔드와 백엔드에서 사용할 수 있음.

GN⁺의 의견

     * FastUI는 백엔드 개발자가 프론트엔드 개발 없이 애플리케이션을 확장할 수 있는 효율적인 방법을 제공함으로써 개발 프로세스를 간소화할 수 있는 잠재력을 가지고 있음.
     * 이 기술은 프론트엔드와 백엔드 간의 역할 분담을 명확히 하여, 각각의 전문성을 최대한 활용할 수 있는 환경을 조성함.
     * 현재 FastUI는 아직 진행 중인 프로젝트이므로, 실제 프로덕션 환경에서 사용하기 전에 안정성과 기능성을 면밀히 검토해야 함.
     * FastUI를 도입할 때는 기존의 프론트엔드 개발 흐름과의 호환성, 컴포넌트의 재사용성 및 확장성, 그리고 프로젝트의 장기적인 유지보수 측면을 고려해야 함.
     * 이 기술을 선택함으로써 얻을 수 있는 이점은 개발 시간의 단축과 백엔드 중심의 개발 흐름이지만, 반면에 프론트엔드의 유연성이 제한될 수 있으며, 커뮤니티의 지원과 자료가 상대적으로 부족할 수 있음.

        Hacker News 의견

     * 프레젠테이션 계층과 코드의 결합에 대한 의견
          + 프레젠테이션 계층과 코드의 결합: 프레젠테이션 계층은 코드와 너무 밀접하게 연결되어서는 안 됨. 파이썬이 아닌 템플릿 언어가 적합하며, 다양한 언어로 템플릿을 렌더링할 수 있는 것이 더 좋음.
     * FastUI와 Streamlit을 사용한 앱 개발 경험
          + FastUI와 Streamlit 사용: Streamlit으로 프로토타이핑을 진행했으나 때때로 불편함을 느낌. FastUI는 아직 미흡한 부분이 있지만, 경량 앱을 위해 사용하여 Streamlit보다 빠른 반응 속도를 경험함.
     * Django와 HTMX에 대한 의견
          + Django와 HTMX: Django와 HTMX의 조합이 아름답고 빠르게 작동함. 프론트엔드로 렌더링된 코드만 보내고, 규모가 커질 때 DB 관리를 할 수 있음.
     * 서버 측 이벤트 처리에 대한 내부 앱의 실용성
          + 서버 측 이벤트 처리: 이 개념은 새롭지 않으며, React 기반의 Solara나 Vue 기반의 NiceGUI와 같은 다른 예시들이 있음. 내부 앱에 매우 실용적이지만, 모든 컨트롤에 서버 측에서 이벤트를 처리하는 데 약간의 지연이 있음을 받아들여야 함.
     * 백엔드 서버를 필요로 하는 프론트엔드 프레임워크의 증가
          + 프론트엔드 프레임워크의 복잡성: 많은 프론트엔드 프레임워크가 기본 HTML을 렌더링하기 위해 백엔드 서버를 실행해야 함. 이러한 프레임워크가 제공하는 기능이 그 복잡성을 정당화하는지 의문.
     * FastUI와 NiceGUI 경험 비교
          + FastUI와 NiceGUI: NiceGUI는 박스에서 꺼내자마자 사용하기 좋은 경험을 제공함. FastUI는 주로 Pydantic 모델에 대한 폼 어댑터로 보임.
     * AI의 발전이 프로젝트 유스케이스에 미치는 영향
          + AI와 프론트엔드 개발: 백엔드 개발자가 자신의 언어로 빠르게 UI를 생성할 수 있는 아이디어는 유효하지만, AI를 몇 시간 사용하여 기본 UI를 생성할 수 있어 이러한 프로젝트의 필요성이 약화될 수 있음.
     * Dart/Flutter를 사용한 사이드 프로젝트 개발 경험
          + Dart/Flutter 사용: Dart/Flutter로 사이드 프로젝트를 작성함으로써 마찰을 최소화하고 덜 번거로움. 웹 앱을 작성해야 하고 Flutter가 적합하지 않다면 HTMX를 사용할 것임.
     * Java Server Faces와의 비교 및 서버 측 추상화의 한계
          + Java Server Faces 경험: Java Server Faces와 유사함을 느낌. 프론트엔드 개발의 미묘함을 서버 측 추상화로 옮기려는 시도는 관리 UI와 같은 제한된 애플리케이션 세트에서만 작동할 것임.
     * 서버와의 라운드트립이 사용자 인터페이스 구축에 적합한지에 대한 질문
          + 서버와의 라운드트립: 클라이언트 상호작용마다 서버로의 왕복이 사용자 인터페이스를 구축하는 데 있어 언제나 좋은 아이디어인지에 대한 의문 제기.
"
"https://news.hada.io/topic?id=13592","헤츠너, 새로운 결제 모델로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           헤츠너, 새로운 결제 모델로 전환

Hetzner 청구 변경에 대한 질문 (2024년 3월부터 5월까지)

     * Hetzner는 2024년 3월부터 청구 구조를 시간당 청구로 변경하여 제품 사용이 더 사용자 친화적이 되도록 할 예정.
     * 3월 청구서에는 이전 청구 구조에 따라 이미 계산된 제품이 포함되지 않아 평소보다 총액이 적을 수 있음.
     * 4월 청구서는 3월의 시간당 사용을 기준으로 하며, 일부 제품은 이전 청구서에 포함되지 않았던 서비스 기간을 소급하여 청구.
     * 5월 청구서부터는 전환 기간이 종료되고, 4월 사용한 제품에 대한 정상적인 시간당 청구가 이루어짐.

청구서 및 결제에 대한 질문

     * 청구서 발행 날짜 변경은 불가능하며, 시간당 청구는 제품을 사용하기 시작한 시점부터 시작.
     * 시간당 가격은 월간 가격보다 저렴할 때만 적용되며, 제품 사용이 한 달 미만일 때만 시간당 가격이 청구됨.
     * 연간 결제는 불가능하며, SEPA 은행 이체 또는 신용카드를 통한 자동 결제 옵션이 제공됨.

Hetzner로부터의 이메일

     * 2024년 3월부터 Hetzner의 거의 모든 제품이 소비 기반 및 시간당 청구로 전환될 예정.
     * 전환 기간 동안 제품은 월 비율에 따라 비례하여 청구되며, 이로 인해 3월과 4월 청구서 금액이 달라질 수 있음.
     * 전환 후에는 고객 서비스 개선을 위해 청구서 발행 날짜가 변경될 수 있음.

GN⁺의 의견

     * Hetzner의 청구 방식 변경은 클라우드 서비스의 유연한 청구 모델을 반영하여 고객의 실제 사용량에 기반한 과금이 가능하게 함으로써, 고객이 비용을 더 효율적으로 관리할 수 있게 해줌.
     * 이러한 변화는 초기에 고객들에게 혼란을 줄 수 있으며, 특히 기존의 월간 청구 방식에 익숙한 고객들에게는 적응이 필요할 수 있음.
     * 시간당 청구 방식은 클라우드 인프라 제공 업체들 사이에서 일반적인 추세이며, AWS나 Google Cloud와 같은 대형 클라우드 서비스 제공업체들도 유사한 청구 모델을 사용하고 있음.
     * Hetzner의 새로운 청구 방식을 도입하기 전에 고객들은 자신의 사용 패턴을 분석하고, 필요한 경우 예산 조정이나 리소스 관리 전략을 재검토해야 할 수 있음.
     * 이러한 청구 방식의 변화는 특히 짧은 기간 동안 높은 컴퓨팅 자원을 필요로 하는 프로젝트에 유리할 수 있으며, 장기적으로는 비용 절감 효과를 기대할 수 있음.

        Hacker News 의견

     * 라이브러리 유지 관리자는 새로운 청구 시스템 덕분에 비용 부담 없이 통합 테스트를 수행할 수 있게 되었음을 긍정적으로 평가함. 이로 인해 수평 확장이 훨씬 실현 가능해짐.

     ""이것은 실제로 훌륭함. Rust를 사용하여 Robot 인터페이스와 상호 작용하는 라이브러리를 유지 관리하고 있지만, 발생할 수 있는 비용 때문에 테스트가 크게 제한되어 있음. 이 새로운 청구 방식으로 은행을 깨지 않고 철저한 통합 테스트를 수행할 수 있게 됨.""
     * 한 사용자는 Hetzner의 전용 서버를 사용하고 있지만, 서버가 '사용'되는 시점을 어떻게 결정하는지 이해하지 못하고 있음. 이에 대한 설명이 링크된 페이지에서 명확하지 않다고 지적함.

     ""Hetzner에서 전용 서버를 사용 중이지만, 이것이 무엇을 의미하는지 이해하지 못하고 있음. 서버가 '사용'되는 시점은 어떻게 결정되는가? CPU 할당량, SSH 세션, HTTP 트래픽, 전력을 기준으로 하는가?""
     * Hetzner 서비스에 대해 긍정적인 평가를 하며, 서비스에 대한 만족감을 표현함. 또한, Hetzner가 시간당 요금제를 사용한다고 생각했지만, 가격 책정을 월 단위로 표시한다고 오해했음을 밝힘.

     ""Hetzner는 '그냥 내 돈을 가져가라'는 서비스 중 하나임. 또한, 어떤 이유에서인지 항상 시간당 요금을 부과한다고 생각했지만, 가격 책정을 월 단위로 표시하기 때문에 더 쉽게 가격을 파악할 수 있음.""
     * 클라우드 서비스에서 이미 적용되고 있는 요금제가 이제 Robot 서비스에도 적용될 것이라는 정보를 공유함. 이는 클라우드 청구 구조와 유사할 것임을 명시함.

     ""혼란스러워하는 다른 사람들을 위해 - 이것은 이미 클라우드에서 적용되고 있지만, 이제 Robot에도 적용될 것임.""
     * Hetzner가 좋은 제공업체라고 들었기 때문에 미국에서 저렴한 비관리형 VPS 서버를 구매하고자 함. 그러나 VPS에 대한 언급을 찾을 수 없어 도움을 요청함.

     ""Hetzner가 좋은 제공업체라고 들었기 때문에 미국에서 저렴한 비관리형 VPS 서버를 구매하고 싶음. 그러나 VPS에 대한 언급을 찾을 수 없어 도움을 요청함.""
     * Hetzner의 새로운 청구 정책이 고객에게 유리할 때만 시간당 가격을 사용하며, 청구 월이 시작되는 시점에 대한 혼란을 표현함.

     ""시간당 가격은 고객에게 유리할 때만 사용되며, 청구 월이 언제 시작되는지 명확하지 않음.""
     * 월간 가격이 증가하지 않는다면 이 변경은 좋은 것으로 보임. 그러나 전용 서버에는 '설치 요금'이 있어 단기간 임대에는 비용 효율적이지 않음을 지적함.

     ""월간 가격이 증가하지 않는다면 이 변경은 좋은 것으로 보임. 그러나 전용 서버에는 '설치 요금'이 있어 단기간 임대에는 비용 효율적이지 않음.""
     * 클라우드 서비스 제공업체들이 계약 기간을 설정하고 선불로 지불할 수 있게 해주면 좋을 것이라는 의견을 제시함. 이를 통해 지출을 통제하고 예상치 못한 비용을 피할 수 있음을 언급함.

     ""클라우드 서비스 제공업체들이 계약 기간을 설정하고 선불로 지불할 수 있게 해주면 좋을 것임. 이를 통해 지출을 통제하고 예상치 못한 비용을 피할 수 있음.""
     * Hetzner 계정 설정과 로그인에 어려움을 겪고 있으며, 보안이 너무 엄격하여 계속해서 차단당함을 경험함. 실제 고객이라면 문제가 될 수 있음을 우려함.

     ""Hetzner 계정 설정과 로그인에 어려움을 겪고 있으며, 보안이 너무 엄격하여 계속해서 차단당함을 경험함.""
     * Hetzner에 대한 긍정적인 평가를 들었으며, 아직 사모펀드에 인수되어 가격이 인상되지 않은 것에 놀라움을 표현함.

     ""Hetzner에 대해 항상 훌륭한 것들만 들었음. 사모펀드에 의해 인수되어 가격이 인상되지 않은 것에 놀람.""
"
"https://news.hada.io/topic?id=13583","'수학적으로 완벽한' 별계, 외계 기술 존재 가능성 조사 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   '수학적으로 완벽한' 별계, 외계 기술 존재 가능성 조사 중

외계 생명체 탐색을 위한 완벽한 행성계

     * 지난해 말, 천문학자들이 지구로부터 100광년 떨어진 HD 110067이라는 별계를 발견함.
     * 이 별계에는 수학적으로 완벽한 궤도를 가진 여섯 개의 소형 넵튠 행성이 있으며, 외계 기술 또는 테크노시그니처를 찾는 과학자들의 관심을 끔.
     * 현재까지 외계 기술의 증거는 발견되지 않았지만, 연구자들은 아직 탐색을 마치지 않았다고 밝힘.

지구에서 관측 가능한 신호

     * HD 110067은 지구에서 관측할 때 가장자리가 보이는 방향으로 행성들이 배열되어 있어, 만약 외계 신호가 존재한다면 이를 포착할 가능성이 높음.
     * 우리 태양계에서는 위성과 망원경이 태양계 평면에서 라디오 파를 발신하고 있어, 태양계 밖에서 지구를 관측하는 이들이 행성의 통과와 일치하는 신호를 포착할 수 있음.

외계 기술 신호 탐색

     * 연구팀은 그린 뱅크 망원경(GBT)을 사용하여 HD 110067에서 외계 기술의 신호를 찾았지만, 자연적인 라디오 파 또는 인간의 기술 신호와 구별하기 어려움.
     * 예를 들어, 특정 행성에서 발신된 송신기의 신호는 지구에서 관측할 때 시간에 따라 변화하는 특성을 보임.
     * 최종적으로 기술적 신호는 감지되지 않았지만, 이는 단지 관측 시간에 우리 방향으로 신호가 발신되지 않았다는 것을 의미함.

행성계의 더 정확한 데이터

     * 발견 팀은 유럽 우주국의 CHEOPS 우주 망원경과 스페인의 HARPS-N 및 CARMENES 기기를 사용하여 감지된 행성들의 반경과 질량을 더 정확하게 측정하고 있음.
     * 행성들의 크기와 질량에 대한 정확한 데이터는 그들의 화학적 구성에 대한 더 많은 정보를 제공할 수 있으며, 이를 통해 행성계의 진화와 형성 메커니즘을 역추적할 수 있음.

우리는 우주에서 혼자인가?

     * 과학자들은 우리가 우주에서 혼자인지를 알아내기 위해 외계 생명체를 찾고 있으며, 이는 수천 년 동안 고민해온 질문임.
     * 연구팀은 탐색 기술이 계속 발전하고 있기 때문에, 앞으로 10년 내에 성공 확률이 더 높아질 것이라고 전망함.

GN⁺의 의견

     * HD 110067 행성계의 발견은 외계 생명체 탐색에 있어서 중요한 진전을 나타냄. 이 행성계의 수학적으로 완벽한 궤도는 과학자들에게 외계 기술을 찾는 데 있어 새로운 가능성을 제공함.
     * 외계 신호를 찾는 작업은 매우 어렵고, 많은 자연 및 인공 잡음을 걸러내야 하기 때문에, 이 분야의 연구는 매우 세심하고 정교한 접근 방식을 요구함.
     * 이러한 연구는 SETI(외계 지적 생명체 탐색)와 같은 프로젝트와 밀접하게 연관되어 있으며, 이 분야의 기술 발전은 미래의 외계 생명체 탐색에 큰 영향을 미칠 것임.
     * 외계 기술을 찾는 연구는 매우 흥미롭고 도전적인 분야이며, 이는 인류가 우주에서의 위치와 존재의 의미를 이해하는 데 중요한 역할을 함.
     * 이 기술을 도입할 때는 천문학적 데이터의 정확성과 신호 분석 기술의 발전이 중요하며, 이는 장기적인 프로젝트로서 지속적인 투자와 관심이 필요함.

        Hacker News 의견

     * 타이투스-보드 법칙을 언급하며, 간단한 방정식이 알려진 행성들의 궤도를 정확히 예측했지만, 해왕성에서는 적용되지 않아 신뢰하지 않는다는 의견.

     ""타이투스-보드 법칙은 간단한 방정식으로 알려진 행성들의 궤도를 예측했으나, 해왕성에서는 적용되지 않아 이 법칙을 신뢰하지 않는다는 의견이 있음.""
     * 주피터의 세 대형 위성이 보여주는 동기화 현상과 그 메커니즘에 대한 설명이 담긴 스티브 몰드의 비디오 링크 제공.

     ""주피터의 세 대형 위성이 보여주는 동기화 현상과 그 메커니즘을 설명하는 스티브 몰드의 비디오 링크가 제공됨.""
     * 기사에서 언급된 ""수학적으로 완벽한"" 시스템에 대한 의문을 제기하는 댓글.

     ""기사에서 언급된 '수학적으로 완벽한' 시스템이 무엇인지에 대해 의문을 제기하는 댓글이 있음.""
     * 행성 TrEs-2b의 어둠이 외계 문명이 태양 에너지를 거의 100% 효율로 활용하는 것과 관련이 있다는 개인적 이론을 제시.

     ""행성 TrEs-2b의 어둠이 외계 문명이 태양 에너지를 거의 100% 효율로 활용하는 것과 관련이 있다는 개인적 이론을 제시하는 댓글이 있음.""
     * 해당 별계에 대한 위키백과 페이지 링크 제공.

     ""해당 별계에 대한 위키백과 페이지 링크가 제공됨.""
     * 행성 공명에 대한 이해 부족을 지적하며, 공명이 자연스럽게 형성될 수 있음을 설명하는 댓글.

     ""행성 공명이 자연스럽게 형성될 수 있으며, 이를 인공적인 기원으로 보는 것은 잘못된 것이라는 설명이 담긴 댓글이 있음.""
     * 논문에서 언급된 '수학적으로 완벽한' 궤도가 지능의 징후라고 말하지 않는다는 점을 지적하며, HD 110067 별계가 외계 지능 탐색에 중요한 이유를 설명하는 댓글.

     ""HD 110067 별계가 외계 지능 탐색에 중요한 이유를 설명하며, '수학적으로 완벽한' 궤도가 지능의 징후라고 논문에서 말하지 않는다는 점을 지적하는 댓글이 있음.""
     * 지구상의 지능 생명체를 찾는 데 대한 풍자적인 댓글.

     ""지구상의 지능 생명체를 찾는 데 대한 풍자적인 댓글이 있음.""
     * 위성과 망원경이 우주로 라디오 파를 발신하지 않는다는 점을 지적하는 댓글.

     ""위성과 망원경이 우주로 라디오 파를 발신하지 않으며, 그들의 주된 기능이 수신임을 지적하는 댓글이 있음.""
     * 천문학자들이 외계 기술의 증거를 찾기 위해 모든 별계를 조사한다는 내용의 댓글.

     ""천문학자들이 외계 기술의 증거를 찾기 위해 모든 별계를 조사한다는 내용의 댓글이 있음.""
"
"https://news.hada.io/topic?id=13640","Ente - E2E 암호화 지원하는 구글 포토/애플 i포토 대체제 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ente - E2E 암호화 지원하는 구글 포토/애플 i포토 대체제 오픈소스

     * 클라이언트만 오픈소스였으나 이제 서버도 오픈소스로 공개
     * 모노레포에 서버 및 모든 제품과 클라이언트 포함 (iOS/안드로이드/웹/리눅스/맥/윈도우)
          + Ente Photos : 구글/애플 포토 대체제
          + Ente Auth : 2FA 인증기(Authy 대체제)
     * 구글 포토와 달리 E2E 암호화된 사진 백업/동기화 기능을 제공
     * 장소/위치/내용에 기반한 모멘트 생성
     * 사진/앨범단위로 친구/가족 공유기능
     * 강력한 임포트/익스포트 기능
     * 엣지 머신러닝 : CLIP 모델과 GGML 등을 이용한 시맨틱 검색
     * 모든 ente 디자인 리소스도 Figma 로 공개

   오... 한 때 나스에 설치할 E2E 갤러리를 애타게 찾았는데 당시에는 서버가 오픈소스가 아니라서 Ente는 포기했었는데...

   드디어 제대로된 전체 오픈소스 E2E 갤러리 제품이 나왔군요. +_+
   바로 써봐야겠습니다.

   Immich - 폰에서 직접 업로드되는 사진/비디오 백업 솔루션 오픈소스

  Hacker News 의견

     * Ente의 CEO가 서버 소스 코드를 오픈소스화했다고 발표함. 이로 인해 해커뉴스의 첫 페이지에 올랐으며, 회사는 지속적으로 성장하고 있음. 사용자 피드백을 바탕으로 암호화 감사를 받았고, 복제 전략을 공개하며, 요청된 기능들(가족 플랜, 협업 앨범, 링크 등)을 추가함. 또한 Edge ML에 진전을 보이고, 데이터를 점진적으로 내보낼 수 있는 CLI를 개발함. 회사는 전반적으로 성숙해졌으며, 소스 코드뿐만 아니라 Figma 디자인 파일도 공개함. 피드백과 질문을 환영함.
     * 한 사용자는 UI가 멋지다고 평가하면서 자체 호스팅에 대한 정보는 찾지 못했지만, GitHub 이슈에서 기능 요청을 발견함. 현재는 Immich를 사용하고 있으며, CEO의 Reddit AMA를 통해 자체 호스팅이 장기적인 목표라는 것을 알게 되어 만족함.
     * 다른 사용자는 Authy에서 Ente Auth로 이전하는 과정을 설명하며, Ente Auth가 수입 및 수출을 지원하고, 전화기에 닿지 않고도 데스크톱에서 2차 인증 코드를 볼 수 있다고 칭찬함. 주요 제품은 필요하지 않지만, Ente가 놀라운 소프트웨어를 만들고 있다고 언급함.
     * 또 다른 사용자는 그룹 액세스 기능의 부족에 대해 혼란스러워함. 가족이나 친구들과 사진을 관리할 수 있는 공간이 필요하지만, 이러한 사용 사례가 소프트웨어에 반영되지 않는다고 지적함. 협업이나 이벤트용 사진 업로드 같은 기능이 필요하다고 언급함.
     * iOS에서 백그라운드 동기화 기능이 있는지 묻는 사용자가 있음. Apple Photos의 대안이 많지만, 대부분 앱을 열어두어야 동기화가 되는 제약이 있음. 사진을 원격 서버에 신뢰성 있게 저장하고, 필요할 때마다 휴대폰에서 접근할 수 있다면, Apple에 지불하는 비용을 해당 앱에 지불할 의향이 있음.
     * 한 사용자는 Ente의 로컬 ML 접근 방식을 칭찬하면서, 사용자 장치에서 실행되는 Edge와 사용자에게 가까운 클라우드 서버에서 실행되는 Edge를 구분하는 다른 용어가 있었으면 좋겠다고 언급함.
     * 새로운 호스팅 사진 서비스가 결국 Picturelife처럼 실패하거나 인수되어 서비스/기능이 축소될 것이라는 우려를 표하는 사용자가 있음. Ente가 미래에 자체 호스팅 옵션으로 발전할 수 있다는 점이 좋다고 함. 호스팅 서비스를 사용해보지 않았지만, 메타데이터 내보내기 보장이 사용자를 끌어들일 수 있는 중요한 요소라고 언급함.
     * Ente의 고객으로서 1년 이상 사용해온 사용자는 Google Photos에서 30K 사진을 문제없이 이전했으며, 제품에 매우 만족한다고 함. 처음에는 몇 가지 기능이 빠져 있었지만(강력한 편집기, 공유, 협업, 검색 등), 모바일 및 데스크톱 앱이 많이 개선되었고 계속해서 발전하고 있음. 현재 Google Photos를 그리워하지 않음.
     * 최선의 결정은 Synology를 구매하고 모든 것을 로컬에 저장하는 것이라고 주장하는 사용자가 있음. 구독료 없이 확장 가능한 저장 공간과 완전한 개인 정보 보호를 제공함. 장기간 구독할 계획이라면 추가 비용이 100% 가치가 있다고 함.
     * 오픈소스 스택이 프로그래머를 대상으로 하는 제품에는 의미가 있지만, Ente의 비즈니스 모델을 이해하지 못한다고 말하는 사용자가 있음. Dropbox와 비교하여 Ente의 가격이 4배 더 비싼 것을 정당화하는 것이 무엇인지 궁금해함. 오픈소스를 중요시하고 사진 백업을 원하는 사람들의 교집합이 매우 작을 것으로 보임. Dropbox가 문제가 되어 다른 제공업체로 전환해야 하는 것은 큰 문제가 아니라고 생각함. 이론적으로 자체 호스팅을 할 수 있지만, 대부분의 사람들은 기술적인 기술이 부족할 것임.
"
"https://news.hada.io/topic?id=13580","Ask HN: GPT에서 자체 모델로 전환한 분들, 경험은 어땠나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ask HN: GPT에서 자체 모델로 전환한 분들, 경험은 어땠나요?

   HN에 올라온 질문에 대한 답변들을 정리
     * 수십 명의 고객에게 OpenPipe위에서 GPT-4/GPT-3.5를 자체적인 미세 조정된 모델로 전환하는데 도움을 주었음
          + 가장 일반적인 반응은 ""와, 이렇게 적은 노력으로 이렇게 잘 작동할 줄은 몰랐어요""라는 것
          + 대부분의 작업에서 파인튜닝된 Mistral 7B는 훨씬 적은 비용으로 GPT-3.5를 능가
          + 일부 사용 사례에서는 GPT-4와 비슷하거나 더 나은 성능을 발휘 (특히 분류, 정보 추출, 요약과 같은 작업의 경우)
     * Mistral-Instruct-0.1을 사용하여 전화/이메일 요약, Mixtral을 계약 마이닝에, OpenChat을 RAG 도구를 갖춘 에이전트 챗봇을 보강하는 데 사용함
          + 경험은 훌륭했으며, INT8 트레이드오프는 하드웨어 FP8(FP4)가 더 널리 사용되고 저렴해질 때까지는 수용 가능
          + 온프레미스 비용은 이미 A100 및 V100 레거시 장비를 사용하여 수백만 건의 상호작용을 실행하는 데 흡수 되어버렸음
     * Continue와 Ollama를 함께 사용하고 있으며, 주로 사용하는 LLM은 deepseek-coder 7b임. 이 설정은 ChatGPT 4만큼 좋고, 로컬 우선이며, 전반적으로 만족스러움
     * 기술적인 작업을 수행하기 위해 LLM을 튜닝했는데, 매우 잘 작동함. 그러나 LLM을 평가하는 것이 의외로 어렵고, GPT-4가 일반적으로 그렇게 훌륭하지 않다는 것을 발견함
     * 10,000개 이상의 레코드에 대한 데이터 추출이나 처리를 할 때는 로컬 모델을 사용하는 것을 선호함. 호스팅 서비스는 이 시점에서 느리고 취약할 것. 미세조정된 Mistral 7B (OpenChat이 가장 좋음)는 데이터를 빠르게 처리함. 복잡한 프롬프트에 대한 정보를 요약하기 위해 ChatGPT-4를 사용하고, 그걸 로컬 모델에서 실행. 점점 상황이 더 나아질 것으로 생각함
     * 앱과 엔터프라이즈 제품에서 OpenAI의 API와 온디바이스 라이브러리(예: llama.cpp)를 모두 지원함. API와 라이브러리가 매우 유사하여 사용자에게는 전환 과정이 거의 투명함. 다른 플랫폼의 API도 곧 지원할 예정이며, OpenAI만큼 쉽게 통합 가능함.
     * 와이파이가 없는 비행 중에 Mistral 7B를 사용했는데, 필요한 정보를 찾는 데는 꽤 좋았지만, 단계별 지시사항을 제공할 때는 성공 여부가 갈림.
     * Double.bot을 구축하는 동안 여러 모델을 테스트했지만 결국 gpt4로 돌아감. 다른 모델들은 재미있지만, gpt4가 해결하는 100개 질문 중 1개를 놓치면 실망스러움. 현재 모델 주변의 기능을 구현하는 것에서 더 많은 가치를 얻고 있으며, 이는 GitHub copilot의 문제점을 해결함(올바르게 괄호를 닫는 자동완성, 제안을 수락할 때 자동으로 import, 주석을 작성할 때 제안을 비활성화하여 방해가 되지 않도록 함, 줄 중간 완성 등). 6개월 이내에 오픈소스 모델이 gpt4에 따라잡기를 바람.
     * 일반적으로 Llama 2는 특히 영어를 제외한 다른 언어에서는 꽤 나쁘다고 생각. 나는 채팅용 믹스트랄에서 매우 좋은 결과를 얻었음. 물론 실제 ChatGPT와 비교하면 모두 프랑켄슈타인처럼 느껴짐. 비슷하게 느껴지고 잘 작동하다가도 가끔은 완전히 엉망인 쓰레기나 아티팩트를 내놓아 미세 조정을 소홀히 한 것은 아닌지 의문이 들기도 함
     * 우리는 자체 모델로 첫 번째 단계를 수행 한 다음 자체 모델의 결과가 확실하지 않은 경우 gpt로 에스컬레이션함
     * 2024년에는 (덜 검증된/확장된) 경쟁업체에 비해 비용과 지연 시간을 경험한 훨씬 더 많은 사람들이 OpenAI를 떠날 것으로 예상. 속도와 품질이 상충되는 경우가 많은데, 나는 OpenAI보다 3배 이상 빠르고 1/3 이상의 품질을 제공하는 여러 공급업체를 보았음
     * 스크립팅, 아이디어 검색 및 / 또는 항상 사실 확인이 필요한 정의와 같은 사용 사례에 Mixtral 8x7b (q5)를 사용하고 있음. 현재 96GB 램이 장착된 M2에서 lmstudio를 사용중. 하지만 Ollama 또는 다른 OSS 솔루션으로 전환하는 것을 고려중

   HN이라서 영어 기준임을 염두해야 할 것 같습니다.
"
"https://news.hada.io/topic?id=13581","백악관, 개발자들에게 C와 C++를 피하고 '메모리 안전' 언어 사용 촉구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               백악관, 개발자들에게 C와 C++를 피하고 '메모리 안전' 언어 사용 촉구

     * 조 바이든 행정부는 소프트웨어 개발자들이 메모리 안전 프로그래밍 언어를 사용하고 C/C++ 와 같은 취약한 프로그래밍 언어를 버리기 원함.
     * 백악관 국가사이버국장실(ONCD)은 최근 발표한 보고서에서 개발자들에게 메모리 안전 취약점이 없는 프로그래밍 언어를 사용해 사이버 공격의 위험을 줄일 것을 촉구.
     * Microsoft와 Google의 최근 연구에 따르면, 전체 보안 취약점의 약 70%가 메모리 안전 문제로 인해 발생
     * 미국 사이버보안 및 인프라 보안국도 지난 9월 블로그 게시물에서 개발자들에게 메모리 안전 언어 사용할 것을 촉구
     * CISA, FBI, NSA, 및 동맹 정보기관들은 지난 12월에 ""메모리 안전 로드맵 사례집""을 발표

NSA가 제안한 메모리 안전 프로그래밍 언어

     * Rust
     * Go
     * C#
     * Java
     * Swift
     * Ruby

   https://media.defense.gov/2022/Nov/…

   꽃게 제국에 충성을 바쳐라~~

   C, C++로 만든 레거시가 산더미고, 부자는 망해도 삼대는 간다고 했으니 내일 당장 어쩔 것 같진 않지만, 앞으로 뭔가 바뀌겠네요.
   C, C++ 이 진화하거나, 언어의 세대교체가 빨라지던가 할것 같은데 어찌될지 궁금합니다.
   그 전에 은퇴해야겠어요. 그런 폭풍을 따라가며 지켜 보기엔 이젠 체력이... 다들 화이팅 입니다

   우리 회사 레거시를 다 러스트로 다시 짜라고 하면, 차라리 그냥 관둘지도...

     ""자바라서 다행이야""

     * 대한민국 IT

   In addition, an NSA cybersecurity information sheet from November 2022 listed C#, Go, Java, Ruby, and Swift, in addition to Rust, as programming languages it considers to be memory-safe.

   About 22 percent of all software programmers used C++, and 19 percent used C as of 2023, according to Statista, making them less popular than JavaScript, Python, Java and a few others. But the TIOBE Programming Community index ranks only Python as more popular, followed by C, C++, and Java.

   javascript는 메모리 세이프한 언어는 아닌거 같네요!

   이런... 긱뉴스는 수정이 안돼서 xguru님이 보신다면 수정 부탁드립니다 ㅠㅠ

   넵 삭제해두었습니다!

   근데 압도적으로 유저수가 많은 C++ 진영에선 결국 해결법을 찾아낼 거 같고(cppfront 연구) cppcon 에서도 안전성을 강조하는 발표가 많은걸 보면, 다른 언어로 이주하기보단 언어가 변화하는 쪽으로 해결할 거 같습니다

   Arm의 Memory Tagging Extension 같이 아예 하드웨어 수준에서 해결하려는 노력도 있습니다. 아무래도 기존의 엄청난 코드베이스를 뿅(?)하고 포팅할 수는 없으니...

   ""그렇단다 아들아. 영원한 왕은 없는 법이지.""

   Azure CTO: ""이제 새 프로젝트를 C/C++로 시작하는 것은 중단할 때가 되었음""
   NSA, 메모리 안전문제로 C/C++ 대신 C#, Go, Rust 등의 언어를 권장하는 지침 발표
"
"https://news.hada.io/topic?id=13673","Cloudflare, AI용 방화벽 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Cloudflare, AI용 방화벽 발표

     * Cloudflare가 대규모 언어 모델(Large Language Models, LLMs) 앞에 배치하여 남용을 식별하는 새로운 보호 계층인 'AI용 방화벽(Firewall for AI)' 개발을 발표
     * 인터넷에 연결된 애플리케이션으로서 LLM을 사용하는 것은 새로운 취약점을 도입하며, 악의적인 행위자들에 의해 악용될 수 있음
     * 기존 웹 및 API 애플리케이션에 영향을 미치는 취약점뿐만 아니라 LLM의 작동 방식으로 인해 새로운 위협이 발생
     * AI용 방화벽은 LLM을 사용하는 애플리케이션에 특화된 고급 웹 애플리케이션 방화벽(WAF)으로, 취약점을 탐지하고 모델 소유자에게 가시성을 제공하는 도구 세트를 포함

LLM이 전통적인 애플리케이션과 다른 이유는 무엇인가?

     * LLM을 인터넷 연결 애플리케이션으로 고려할 때, 전통적인 웹 앱과 비교하여 두 가지 주요한 차이점이 있음
     * 첫째, 사용자가 제품과 상호작용하는 방식이 다름. 전통적인 앱은 결정론적인 반면, LLM은 비결정론적이며 자연어를 기반으로 함
     * 둘째, 애플리케이션 제어 평면이 데이터와 상호작용하는 방식이 다름. 전통적인 애플리케이션에서는 제어 평면(코드)과 데이터 평면(데이터베이스)이 잘 분리되어 있으나, LLM에서는 훈련 데이터가 모델 자체의 일부가 되어 사용자 프롬프트에 의한 데이터 공유를 제어하기 어려움

OWASP LLM 취약점

     * OWASP 재단은 LLM에 대한 취약점 상위 10가지를 발표하여 언어 모델을 보호하는 방법에 대해 생각하는 데 유용한 프레임워크를 제공함
     * 일부 위협은 웹 애플리케이션의 OWASP 상위 10가지와 유사하지만, 언어 모델에 특화된 위협도 있음

LLM 배포

     * LLM의 위험은 배포 모델에 따라 다름. 현재 세 가지 주요 배포 접근 방식이 있음
          + Internal LLM(내부): 기업은 일상 업무에서 인력을 지원하기 위해 LLM을 개발함. 이는 회사 자산으로 간주되며 직원이 아닌 사람이 액세스해서는 안 됨. 예를 들어 맞춤형 제안을 생성하는 데 사용되는 영업 데이터 및 고객 상호 작용에 대해 학습된 AI 부조종사나 엔지니어가 조회할 수 있는 내부 지식 기반에 대해 학습된 LLM이 있음
          + Public LLM(공개): 기업 외부에서도 액세스할 수 있는 LLM. 이러한 솔루션에는 누구나 사용할 수 있는 무료 버전이 있는 경우가 많으며 일반 또는 공개 지식에 대해 학습된 경우가 많음. 예를 들어 OpenAI의 GPT나 Anthropic의 Claude가 있음
          + Product LLM(제품): 기업의 관점에서 볼 때, LLM은 고객에게 제공되는 제품이나 서비스의 일부일 수 있음. 일반적으로 자체 호스팅되는 맞춤형 솔루션으로, 회사 리소스와 상호 작용하는 도구로 사용 가능. 예를 들어 고객 지원 챗봇 또는 Cloudflare AI 어시스턴트.
     * 모든 시나리오에서 모델을 남용으로부터 보호하고, 모델에 저장된 독점 데이터를 보호하며, 사용자를 잘못된 정보나 부적절한 내용으로부터 보호해야 함

AI용 방화벽

     * Cloudflare AI용 방화벽은 전통적인 WAF처럼 배치되며, 모든 LLM 프롬프트가 포함된 API 요청을 스캔하여 가능한 공격 패턴과 서명을 탐지
     * Cloudflare Workers AI 플랫폼에 호스팅된 모델이나 타사 인프라에 호스팅된 모델 앞에 배치될 수 있으며, Cloudflare AI Gateway와 함께 사용될 수 있음

볼륨 공격 방지

     * OWASP가 나열한 위협 중 하나는 모델 서비스 거부(Model Denial of Service)임
     * 전통적인 애플리케이션과 마찬가지로, DoS 공격은 자원을 과도하게 소비하여 서비스 품질을 저하시키거나 모델 운영 비용을 증가시킴
     * 이 위험은 개별 세션에서 요청의 비율을 제어하는 속도 제한 정책을 채택하여 완화할 수 있음

민감한 정보 식별

     * 민감한 정보에 대한 두 가지 사용 사례가 있으며, 모델과 데이터를 소유한 경우와 공개 LLM에 사용자가 데이터를 전송하는 것을 방지하려는 경우에 따라 다름
     * OWASP가 정의한 _민감한 정보 공개_는 LLM이 응답에서 기밀 데이터를 부주의하게 공개할 때 발생하여 무단 데이터 접근, 개인정보 침해 및 보안 위반으로 이어질 수 있음

모델 남용 방지(Preventing Abuse)

     * 모델 남용은 '프롬프트 주입'이나 요청을 제출하여 환각을 유발하거나 부정확하고, 불쾌하거나, 부적절하거나, 주제에서 벗어난 응답을 생성하는 것과 같은 다양한 접근 방식을 포함함
     * 프롬프트 주입은 특별히 제작된 입력을 통해 언어 모델을 조작하려는 시도로, LLM에 의도하지 않은 응답을 유발함

AI용 방화벽 사용 방법

     * ""Application Security Advanced""를 사용하는 기업 고객은 Advanced Rate Limiting 과 Sensitive Data Detection 를 즉시 사용할 수 있음
     * AI용 방화벽의 프롬프트 검증 기능은 현재 개발 중이며, 향후 몇 달 내에 베타 버전이 Workers AI 사용자에게 출시될 예정

  Hacker News 의견

     * 프롬프트 인젝션과 재일브레이킹은 다르다고 주장하지만, 이것에 대한 논쟁에서는 이미 패배한 것 같다. 클라우드플레어 기사에 따르면, 모델 남용은 프롬프트 인젝션 같은 접근 방식을 포함하는 더 넓은 범주의 남용을 의미한다. 프롬프트 인젝션은 개발자가 정의한 프롬프트와 사용자의 신뢰할 수 없는 입력을 연결할 때 발생한다. 신뢰할 수 있는 입력과 신뢰할 수 없는 입력의 연결이 없다면 프롬프트 인젝션은 아니다. 이 구분은 중요하며, 일반적인 재일브레이킹 공격에 대해 훈련된 모델로는 이를 잡아내기 어려울 것이다.
     * WAF(Web Application Firewall)는 보안 팀이 제어하거나 이해할 수 없는 웹 서비스에 대한 임시 해결책이었다. 성능 문제와 악의적인 트래픽을 효과적으로 차단하기 위한 조정의 어려움으로 인해 선호도가 떨어졌다. WAF 기반 접근법은 무지의 인정과 약점의 위치를 의미하며, 모델로의 이동은 아직 검증되지 않았고, 앱의 반응형 자체 보호와 같은 아이디어에 반대된다.
     * 나는 AI 훈련 목적으로 내 사이트가 스크랩되는 것을 막는 보호를 원한다. 이미 이것이 패배한 싸움이라고 느끼지만, 개인 정보 보호를 중시하는 사람들도 같은 생각을 하고 있다는 것을 알게 되었다.
     * 클라우드플레어의 제품이 대부분 그렇듯이, 이 제품도 더 많은 고객이 사용할수록 더 유용해지고 고객 당 수동 노력이 덜 필요하다. 클라우드플레어의 가치는 설정과 보증이 아니라, 거의 실시간으로 다른 모든 사람들이 보고 있는 공격의 가시성과 패키징에 있다.
     * 이 제품은 매우 좋은 아이디어로 보인다. 방화벽을 추가하고 켜는 것처럼 간단할 때 다른 가드레일 제품보다 관심과 채택을 얻기 쉽다. 일반적인 LLM 방화벽이 얼마나 유용할 수 있는지, 모델과 사용 사례에 따라 얼마나 많은 맞춤 설정이 필요하고 가능한지 궁금하다. 하지만 이는 쉽게 해결될 것으로 보인다.
     * 이 포스트를 읽은 바로는, 클라우드플레어가 검열과 문화 전쟁에 머리를 빠뜨리고 있다. 클라우드플레어의 유료 사용자들은 자신들의 정치적 편향을 강요하기 위해 클라우드플레어에게 돈을 지불할 것이고, AI 사용자들은 클라우드플레어가 검열에 동조하고 있다고 비난할 것이다. 클라우드플레어는 불필요하게 정치적 전투에 휘말릴 수 있다.
     * 요청을 필터링하기 위해 AI를 사용하고 있는가? 그렇다면 이는 천상의 조합이 될 것이다!
     * [마이크에 기대며] 비밀 재료는 정규 표현식이다.
     * 나는 LLM의 오용을 방지하기 위해 LLM이 구매/비구매 결정을 내리는 상황에서 스마트 결제 자격 증명에 대해 비슷한 정신으로 무언가를 하고 싶다고 생각해왔다. 결제 자격 증명이 합법적인 체인에 의해 요청되었을 때만 단일 사용 토큰(또는 유사한 것)을 제공하는 아이디어다. 이 분야에 대해 생각하고 있는 사람이 있다면 대화를 나누고 싶다.
     * 오랫동안 그들이 마케팅의 다음 큰 것을 계속 추구할 것이라고 생각했다. 좋다, CDN/DNS/WAF 시장에서 여전히 그런 것에 신경 쓰는 회사들에게 더 많은 경쟁의 여지를 준다.
"
"https://news.hada.io/topic?id=13681","Television for Vision Pro","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Television for Vision Pro

     * 애플 비전 프로용 ""텔레비전"" 앱
     * 자신의 미디어 라이브러리 또는 스트리밍 서비스의 영상을 다양한 가상 디바이스를 통해서 원하는 곳에 두고 텔레비전처럼 영상을 재생
          + 구형 CRT TV, 대형 프로젝션 TV, 천장에 붙은 LCD, 멀티 CRT 등
     * 현재 유튜브 지원. Netflix 및 Hulu 등도 지원 예정
     * SharePlay 지원 예정

   현재 비전프로용 앱 시장은 마치 예전 아이폰 초기처럼 이런저런 아이디어의 앱들로도 돈을 벌 수 있는 환경인듯 합니다.
   최근 Juno - 애플 비전 프로를 위한 유튜브 클라이언트가 1위에 올라서 꽤 많은 수익을 낸 것 처럼요

   비전프로용 앱 개발을 위해서는 비전프로는 물론이고 $299 짜리 개발자 스트랩을 별도 구매해야 합니다.
   비전프로에는 별도 포트가 없어서 맥이랑 직접 연결이 불가능한데, 이 스트랩에 USB-C 포트가 추가로 있어서 연결하고 디버깅이 가능합니다.
   왜 이렇게 비쌀까 싶은데 스피커 부분이 붙어있는 스트랩을 교체하는거라 내장 스피커도 들어있습니다.
   지인분이 이 스트랩을 구매하셨는데, 국내에서 만든 비전프로용 앱도 곧 나오길 기대해봅니다 ㅎㅎ

   개발자 스트랩 없어도 무선으로 디버깅이 가능하긴 한데 엄청 느립니다. 스트랩도 썬더볼트가 들어있는데 아직은 동작하지 않아서 와이파이와 별차이가 없다네요. 이제야 연결해보고 있습니다 ㅎㅎ
"
"https://news.hada.io/topic?id=13593","서버리스 기술의 공포 사례들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            서버리스 기술의 공포 사례들

서버리스 호러 스토리

     * 서버리스 호러 스토리는 서버리스 기술을 사용하면서 발생한 끔찍한 경험들을 공유하는 간단한 블로그임.
     * 이 블로그는 안드라스가 만들었으며, 그는 오픈소스이자 자체 호스팅이 가능한 Heroku / Netlify / Vercel 대안인 Coolify를 개발 중임.
     * 서버리스 호러 스토리를 가진 사람들은 안드라스에게 이야기를 보내거나 Github에서 PR을 열어 공유할 수 있음.

주의할 만한 서버리스 비용 사례

     * 2020년 3월 27일: Firebase와 Cloud Run을 테스트하다가 72,000달러를 소모하고 거의 파산 직전까지 간 사례가 있음.
     * 2024년 2월 27일: Netlify에서 주말에 이메일을 받았는데, 104,500달러의 청구서가 연체되었다는 내용이었음.
     * 2024년 2월 13일: 누군가 EchoFox에 스팸을 보내 Vercel 청구서가 23,000달러로 치솟고 56,000개 이상의 계정과 시험 사용이 발생한 사례가 있음.
     * 2023년 4월 5일: Vercel 사용자들에게 경고하는 내용으로, Vercel에 테스트하거나 배포할 때 주의해야 한다는 경험담이 있음.

GN⁺의 의견

     * 서버리스 아키텍처는 관리가 필요 없는 인프라로 인해 개발자들에게 매력적이지만, 예상치 못한 비용 발생이 큰 문제가 될 수 있음을 보여줌.
     * 이러한 사례들은 서버리스 서비스를 사용할 때 철저한 비용 관리와 모니터링의 중요성을 강조함.
     * 서버리스 기술을 도입하기 전에, 비용 예측과 한도 설정 기능을 제공하는 도구를 사용하는 것이 좋음.
     * AWS Lambda와 같은 다른 서버리스 제품을 사용할 경우에도 유사한 비용 관련 문제가 발생할 수 있으므로, 비용 효율성을 고려한 서비스 선택이 중요함.
     * 이 기술을 선택함으로써 얻을 수 있는 이점은 빠른 배포와 확장성이지만, 실제 사용량을 예측하지 못하면 예산을 초과할 위험이 있음.

        Hacker News 의견

     * Netlify 관련 댓글 요약:
          + 한 사용자는 자신의 웹사이트에 3.44MB 크기의 사운드 파일을 호스팅했고, 이로 인해 DDoS 공격을 받았다고 언급함. Netlify의 무료 계정을 사용 중이었음에도 불구하고, 과도한 트래픽 비용으로 인해 큰 금액의 청구서를 받게 될 위험이 있었다고 지적함.
          + 다른 사용자는 이러한 상황이 슬프다고 표현하며, 3.44MB 파일이 문제가 되어서는 안 되며, 이를 다른 곳에 호스팅해야 한다는 해결책은 적절하지 않다고 주장함. 또한, '무료'라는 것은 실제로 존재하지 않으며, 이러한 상황을 방지하기 위한 조치가 더 필요하다고 강조함.
          + VPS(Virtual Private Server)가 저렴하고 관리하기 쉬우며 자동으로 트래픽 제한을 가진다는 점을 언급함.
     * Coolify 관련 댓글 요약:
          + 한 사용자는 Coolify라는 Heroku/Netlify와 유사한 자체 호스팅 대안을 개발한 Andres에 대해 언급함. 사용자는 Coolify를 몇 달 동안 사용해왔으며, 이를 통해 여러 서비스를 자체 호스팅하는 데 도움이 되었다고 칭찬함.
          + Coolify 커뮤니티가 성장하고 있으며, 사용자들이 새로운 템플릿을 추가하고 서로 디버깅을 돕고 있다고 언급함.
          + 단점으로는 디스크 공간이 부족할 때 문제가 발생할 수 있다는 점을 지적하며, 이에 대한 더 나은 경고나 예방 조치가 필요하다고 의견을 제시함.
     * 서버리스 아키텍처와 관련된 댓글 요약:
          + Netlify에서 발생한 문제가 서버리스 아키텍처 때문은 아니라고 주장함. 서버리스 아키텍처에는 여러 기술적 문제가 있지만, 막대한 트래픽 비용 청구는 서버리스와 독립적인 문제라고 설명함.
          + 자체 하드웨어를 데이터 센터에 배치하고 트래픽 비용을 지불하는 상황에서도 DDoS 보호가 없으면 비슷한 문제가 발생할 수 있다고 언급함.
          + 주요 문제는 과도한 트래픽 비용과 DDoS 완화 부재라고 강조함.
     * Netlify 이전 결정과 관련된 댓글 요약:
          + 한 사용자는 자신의 개인 사이트를 Netlify에서 다른 곳으로 이전하기로 결정했다고 밝힘. 이전은 DNS 업데이트가 대부분이며, HTML을 로컬에서 빌드한 후 업로드하는 것을 선호한다고 함.
          + 대부분의 인기 있는 솔루션들이 지출 한도를 설정하지 않는다는 점이 이상하다고 언급함.
     * 클라우드 벤더의 과도한 청구와 관련된 댓글 요약:
          + 클라우드 벤더들이 과도한 요금을 청구하는 것은 자동차 정비사가 무한 반복으로 고장난 부품을 교체하다가 엄청난 요금을 청구하는 것과 비슷하다고 비유함.
          + 소규모 사용자로서 모든 문서를 완전히 읽고 이해할 수 없으며, 지출 한도에 도달하면 서비스를 중단할 수 있는 기능을 원한다고 언급함.
     * OpenAI API 키와 관련된 댓글 요약:
          + 한 사용자는 OpenAI API 키를 등록했을 때, 기본적으로 할당량을 적용하고 초과하면 키를 비활성화하는 방식을 채택하고 있다고 언급함.
          + 이러한 방식이 더 많은 회사에서 적용되지 않는 것에 놀라움을 표현하며, 이는 예상치 못한 청구서로부터 모두를 보호할 수 있는 방법이라고 언급함.
     * 클라우드 서비스의 문제점과 관련된 댓글 요약:
          + 클라우드 제공업체가 자신들의 잠재적인 문제에 대한 완화 조치로 상호 가용 영역(AZ) 간 트래픽에 대해 과금하는 것을 우리가 받아들이고 있다고 지적함.
     * Netlify의 대응 부족과 관련된 댓글 요약:
          + Netlify가 대역폭 비용을 과도하게 청구하고 고객이 통제할 수 없는 공격에 대응할 도구를 제공하지 않는 것에 대해 실망감을 표현함.
          + Netlify가 문제를 해결할 수 있는 여러 방법이 있음에도 관심을 보이지 않는다고 비판함. 예를 들어, bunny.net CDN이 제공하는 다양한 옵션을 언급함.
     * 지출 한도 설정의 필요성과 관련된 댓글 요약:
          + 지출 한도 설정이 서버리스 문제가 아니라 클라우드 문제라는 점을 지적함.
          + 작은 클라우드 서버가 공격을 받으면 다운될 수 있고, AWS처럼 오직 나가는 트래픽에 대해서만 비용을 지불하는 것이 좋다고 언급함.
"
"https://news.hada.io/topic?id=13550","에반 샤피로의 2023년 미디어 업계 실적 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       에반 샤피로의 2023년 미디어 업계 실적 정리

2023년이 우리에게 말해준 것

     * 124개 회사가 포함된 미디어 업계 지도의 가치는 거의 17조 달러(22.1경원)에 달함
     * 알파벳, 애플, 아마존, 메타, 마이크로소프트, 엔비디아 등 6개의 트릴리언 달러 기업이 전체 가치의 73%, 즉 12.3조 달러를 차지함

넷플릭스의 성공: 스트리밍 전쟁의 승자가 되다

     * 넷플릭스는 2023년에 수익 증가와 비용 감소를 이루며 4분기에 1300만 신규 구독자를 기록함
     * 1년 전 거의 이익을 내지 못했던 넷플릭스는 4분기에 거의 10억 달러의 순이익을 기록함
     * 넷플릭스는 광고 티어를 도입하고 WWE와 50억 달러 계약을 체결하는 등 TV 산업으로 변모함

로쿠의 현금 흐름과 주가 하락

     * 로쿠의 4분기 수익은 14% 증가했으나 순이익은 여전히 손실을 기록함(-1억 400만 달러)
     * 로쿠는 손실을 절반 이상 줄였지만, 주가는 연초 대비 19% 하락함
     * 로쿠는 미국 내 시장 우위를 유지하기 위해 저마진의 TV 제조 사업에 진출함

Comcast와 Charter의 도전

     * 컴캐스트는 4분기 순이익이 8% 증가했으나, 전체적인 수익은 정체되어 있음
     * Peacock은 4분기에 기록적인 300만 명의 구독자를 추가하고, 유료 서비스용 NFL 플레이오프 스트리밍 으로 2300만명의 실시간 시청자 확보
     * 하지만 Comcast는 모델의 존립 위기에 직면: 미국의 브로드밴드 인터넷 성장이 멈춤
     * 케이블티비 차터는 스포츠 중계권 협상에서 디즈니에게 승리를 거두었지만, 2023년 전체적인 성과는 저조함

알파벳과 스포티파이의 성장

     * 구글은 분석가 예상을 뛰어넘는 실적을 기록했지만, 투자자들은 냉담한 반응을 보임
     * 스포티파이는 4분기에 수익, 구독자, 순이익이 모두 증가했지만, 여전히 5억달러 이상의 큰 손실을 기록. 2022년보다 24%나 악화

아마존과 애플의 대조적인 결과

     * 아마존은 전자상거래 부문의 반등으로 인해 순이익이 크게 증가함
     * 광고 사업이 4분기에 27% 증가했고 서비스 부문 매출이 18% 증가
     * 세계 최고의 리테일 미디어 플랫폼과 역사상 가장 끈끈한 구독 멤버십을 보유한 2024년은 아마존이 대세가 될 것
     * 애플의 핵심 사업이 주춤하고 있음
     * 아이폰 판매가 전 세계적으로 정체하고 다른 모든 디바이스의 판매량은 감소
     * 그나마 서비스 부문은 빠르게 성장하고 있지만, 앱스토어가 여러 규제 및 법적 측면에서 큰 도전과 변화에 직면하면서 큰 역풍을 맞고 있음

마이크로소프트와 소니의 전략

     * 마이크로소프트는 4분기에 순이익과 수익이 크게 증가함
     * 마침내 Activision을 인수하고, 즉시 1,900명을 해고
     * 클라우드 및 Office 비즈니스는 번창했지만, 2023 회계연도에는 Windows 및 게임 수익이 큰 타격을 입음
     * Microsoft는 업계 최고의 다각화된 수익원을 보유하고 있으며, 그 덕분에 세계에서 가장 가치 있는 회사가 되었음
     * 소니는 전자 제품 부문의 수익 감소로 인해 전체 순이익이 9% 감소함

게임 산업의 동향

     * 2023년 닌텐도 스위치의 판매량은 새로운 버전의 콘솔이 없었음에도 불구하고 좋은 방향으로 폭발적으로 증가했음
          + 슈퍼 마리오 브라더스 영화의 성공으로 인해 스위치 판매가 크게 증가함
     * Nintendo의 시가총액은 전년 대비 12%, 작년에 +48% 상승
     * EA와 로블록스는 수익성 있는 성장을 이루지 못하고 있음

디즈니의 변화와 메타의 부활

     * 디즈니는 순이익 개선과 수익 증가를 이루었지만, 두 가지 전략 사이에서 고군분투 중임
          + 현재의 디즈니와 앞으로 필사적으로 변화하고자 하는 디즈니
     * 아이거는 한 해 동안 과감한 예산 삭감을 단행한 덕분에 4분기 디즈니의 순이익을 개선하는 데 성공
     * 더 중요한 것은 전통적인 미디어 업계의 많은 경쟁사와 달리 디즈니는 2023년에 매출과 영업 이익이 증가했다는 점
     * 이 중 상당 부분이 디즈니랜드 수익에서 비롯된 것이지만, 디즈니가 낮은 ARPU D2C 구독자를 고수익 사용자와 교환할 수 있는 능력과 스트리밍 수익 개선이 가속화
     * 2023년은 메타가 재도약하는 해였음. 대규모 비용 절감으로 인해 순이익이 크게 증가함
     * META의 기업 가치는 1년 전보다 175% 상승
     * 우리 모두에게 더 중요한 것은 이러한 결과가 (구글, 아마존, 스냅, 트레이드데스크 등과 함께) (디지털) 광고 시장의 성장세를 보여준다는 점
     * Snap은 매출은 5% 증가했지만 순이익은 14% 증가한 훌륭한 4분기 실적을 발표. 2023년 7%의 순이익 성장
          + 과거와 달리 이제는 소폭 상승이 새로운 하락이며, 광고 집단의 맥락에서 볼 때 5% 성장만으로는 충분하지 않음
"
"https://news.hada.io/topic?id=13677","macOS에서 메타의 메신저 인증서 핀닝 해킹","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       macOS에서 메타의 메신저 인증서 핀닝 해킹

메타의 메신저 인증서 핀닝 깨기 (macOS)

     * 메타의 macOS용 메신저 애플리케이션은 독립 실행형 데스크톱 애플리케이션인 Texts.com 모델과 유사함.
     * Texts.com의 메타 플랫폼 프로젝트를 이끄는 Batuhan İçöz는 네트워크 요청을 가로채는 것이 첫 단계로 중요하다고 생각함.
     * 메타는 인증서 핀닝을 적용하여 보안을 강화하고, MITM(중간자) 공격을 통한 서버 요청 분석을 방지함.

인증서 핀닝이란?

     * 프록시 클라이언트를 설정할 때 ""인증 기관""을 신뢰하도록 구성해야 함.
     * 인증 기관에서 발급한 인증서를 사용하여 요청에 대한 정보를 가로채고 해독할 수 있음.
     * 서비스가 인증서 핀닝을 구현하면 특정 인증 기관에서만 발급한 인증서를 수락하여 사용자의 인증 기관에서 발급한 인증서를 사용하지 못하게 함.

기본 동작

     * 인증서 핀닝을 비활성화하지 않으면 모든 요청이 ""내부 오류""로 반환되고, 프록시 소프트웨어는 ""SSL 핸드셰이크 실패""를 나타냄.
     * 요청이 생명주기를 완료하지 못하므로 요청에 대한 정보를 추론할 수 없음.

원하는 동작

     * MITM 공격을 사용하여 네트워크 디버깅 도구에서 요청, 응답 및 헤더를 성공적으로 읽을 수 있음.

가능한 접근 방식

     * 이전에 작동한 방법 중 하나는 바이너리에서 URL 문자열을 TLS를 구현하지 않는 불안전한 자체 호스팅 엔드포인트로 변경하는 것임.
     * Frida와 같은 동적 계측 라이브러리를 사용할 수 있지만, 메신저는 특히 후킹 시 충돌이 발생하기 쉬움.
     * Frida를 사용하는 것은 복잡한 배포 과정을 포함함.

접근 방식

     * Messenger를 다운로드하고 애플리케이션 폴더로 이동한 후, Hopper에 ARM 바이너리를 가져옴.
     * Hopper를 사용하여 바이너리를 분해, 디컴파일, 리컴파일, 디버깅 및 시각화할 수 있음.
     * ""SSL 핀닝 검증 실패""와 같은 문자열을 찾아 수정을 최소화하려고 함.
     * ""Using custom sandbox -> turn off SSL verification""이라는 문자열을 발견하고 관련 함수를 찾아 수정함.
     * IsUsingSandbox 함수를 항상 true로 설정하여 인증서 핀닝을 비활성화함.

결과

     * 새로운 실행 파일을 내보내고 서명을 제거한 후 원래 Messenger 바이너리를 새로운 바이너리로 교체함.
     * Messenger를 다시 시작하면 프록시 도구에서 헤더, 응답 본문 및 모든 요청 정보가 표시됨.
     * 바이너리의 97,477,728 바이트 중 단 4바이트만 수정하여 요청을 가로채는 데 성공함.

배포

     * 바이너리를 컴파일한 후 Batuhan에게 보냄.
     * Batuhan은 서명 인증서를 받아 설치하고 애플리케이션에 서명함.
     * 서명이 완료되면 자신의 시스템에서 바이너리를 사용하여 자신의 요청을 볼 수 있음.

GN⁺의 의견

     * 이 기사는 보안 연구원들이 어떻게 메타의 메신저 앱에서 인증서 핀닝을 우회하는지에 대한 흥미로운 사례를 제공함.
     * 인증서 핀닝은 중간자 공격을 방지하는 중요한 보안 기능이지만, 연구원들이 이를 우회하는 방법을 찾아내는 것은 보안 커뮤니티에 중요한 통찰을 제공함.
     * 이 기술은 개발자들이 자신의 앱이나 서비스의 보안을 강화하는 데 도움이 될 수 있으며, 보안 취약점을 찾아내고 해결하는 데 기여할 수 있음.
     * 그러나 이러한 연구가 악의적인 목적으로 사용될 가능성도 있으므로, 연구 결과를 공유할 때는 신중해야 함.
     * 비슷한 기능을 제공하는 다른 도구로는 Wireshark나 Burp Suite와 같은 네트워크 분석 도구가 있으며, 이들은 네트워크 트래픽을 모니터링하고 분석하는 데 널리 사용됨.

        Hacker News 의견

     * 법적인 측면에 대한 궁금증
          + 이러한 행위의 합법성에 대해 궁금해함.
          + 기술적으로 DCMA 위반일 것이라고 가정했었는데, 이 가정이 틀렸을 수도 있음을 의심함.
          + 법적으로 어떻게 가능한지에 대한 의문 제기.
     * 데컴파일 및 재컴파일 시도와 헌신
          + 비슷한 경로를 시도했으나 데컴파일/편집/재컴파일 단계에서 포기함.
          + 이러한 헌신에 대해 감탄하며, 이에 투자된 시간에 대해 궁금해함.
          + 자신은 시간 제한을 정하고 그것을 지킴.
     * 과거 기술의 상실
          + 과거 +Orc의 시절을 회상함.
          + 원치 않는 분기를 찾아서 제거하는 방법과 같은 당시의 지식이 대부분 잊혀짐.
          + 현재는 배워야 할 다른 기술들이 훨씬 많음.
     * 메타의 RE 방어와 관련된 관찰
          + 메타(특히 메신저)의 리버스 엔지니어링(RE) 방어가 상당히 관대함을 지적함.
          + 생산 빌드에서 IsUsingSandbox()를 제거하는 것이 간단할 것이라고 언급함.
          + 고급 난독화 기술을 사용하기 전에도 이러한 방어는 쉬울 것이라고 함.
     * 샌드박스 모드에서의 인증서 핀닝
          + 샌드박스 모드에서도 인증서 핀닝을 강제할 수 있는 방법에 대해 언급함.
          + 대학 시절 Snapchat의 트래픽을 중간자 공격(MitM)으로 가로채려고 시도했으나 실패한 경험을 회상함.
     * 런타임 바이너리 체크섬의 유용성
          + 런타임 바이너리 체크섬이 수정을 복잡하게 만드는 데 도움이 되었을지에 대한 질문.
          + 모바일 앱에서 일반적인 절차가 아닌지, iOS나 안드로이드 SDK가 이러한 기능을 제공하는지에 대한 의문.
          + 최종 해결책이 단순히 바이너리의 몇 바이트를 수정하는 것이었기 때문에 이를 방지할 수 있었을 것 같다는 생각.
     * 프록시 도구 사용에 대한 질문
          + 작성한 글에서 사용된 프록시 도구에 대한 질문.
          + 해당 도구가 실행 중일 때 모든 애플리케이션 트래픽을 라우팅하는지에 대한 궁금증.
     * 대형 기업 애플리케이션의 보안
          + 큰 기업들의 애플리케이션들이 완전히 난독화되지 않고, 수정된 바이너리의 실행을 거부하는 다른 보호 기능들을 포함하지 않는 이유에 대한 의문.
     * 메타 앱 트래픽 가로채기의 가능성
          + 메타 앱의 트래픽을 가로채는 것이 필요하지 않다고 주장함.
          + 메타의 버그바운티 교육 페이지 링크 제공.
     * 트래픽 모니터링의 중요성
          + 페이스북 앱이 마이크를 통해 사용자를 감시하고 타겟 광고를 보여준다는 음모론을 불식시키는 데 중요함을 강조함.
          + 앱과 페이스북 서버 간의 트래픽을 모니터링하여 이를 반박할 수 있는 가장 쉬운 방법이지만, 인증서 핀닝이 이를 방해함.
          + 음모론을 믿는 사람들을 설득하는 것은 어렵지만, 이러한 모니터링이 가능하다는 것을 아는 것이 중요함.
"
"https://news.hada.io/topic?id=13668","메타 서비스 장애","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               메타 서비스 장애

Meta 비즈니스 제품의 상태 및 중단 사항

     * 광고 관리자: 문제 해결됨
     * Facebook & Instagram 샵: 문제 해결됨
     * Meta 비즈니스 스위트: 문제 해결됨
     * Instagram 부스트: 알려진 문제 없음
     * Meta 관리 센터: 문제 해결됨

개발자 플랫폼

     * Facebook 로그인: 문제 해결됨
     * Graph API: 문제 해결됨
     * Instagram용 Messenger API: 문제 해결됨
     * Messenger 플랫폼: 문제 해결됨
     * WhatsApp 비즈니스 API: 일부 중단 발생
     * 마케팅 API: 문제 해결됨

투명성 도구

     * 광고 투명성: 알려진 문제 없음

GN⁺의 의견

     * 이 기사는 Meta의 다양한 비즈니스 도구와 API들의 현재 상태와 문제 해결 여부를 간략하게 보여줌으로써, 비즈니스 사용자들이 자신의 서비스 상태를 신속하게 확인할 수 있는 유용한 정보를 제공한다.
     * WhatsApp 비즈니스 API에서 발생한 일부 중단은 비즈니스 커뮤니케이션에 중요한 역할을 하는 서비스의 안정성에 대한 우려를 나타낼 수 있으며, 이는 서비스 제공업체로서 Meta의 신뢰성에 영향을 줄 수 있다.
     * 비슷한 기능을 제공하는 다른 서비스로는 Slack, Microsoft Teams, Telegram Bot API 등이 있으며, 이러한 대안을 고려할 때 각각의 특성과 안정성, 사용자 기반을 고려해야 한다.
     * Meta의 서비스 중단 정보는 비즈니스 사용자들에게 실시간으로 중요한 업데이트를 제공하며, 이는 문제 발생 시 신속한 대응을 가능하게 하여 비즈니스 연속성을 유지하는 데 도움이 된다.
     * 기술적 문제가 발생했을 때 이를 해결하기 위한 지원 시스템의 중요성을 강조하며, 사용자는 이러한 정보를 바탕으로 비즈니스 운영에 필요한 조치를 취할 수 있다.

        Hacker News 의견

     * 다운디텍터 홈페이지를 보면, 메타 소유의 서비스뿐만 아니라 구글, 유튜브, 구글 플레이, T-모바일, 트위터(X로 표시됨), 디스코드, 틱톡, 포켓몬 고, 스냅챗 등 많은 서비스들이 동시에 장애를 겪고 있음을 알 수 있음. 모든 서비스가 같은 실패 지점을 가지고 있는 것으로 보임.

          + 다운디텍터 홈페이지 [1]를 살펴보면, 메타 소유의 서비스뿐만 아니라 구글, 유튜브 등 다수의 서비스에서 동시다발적인 장애가 발생하고 있으며, 이들 모두 같은 실패 지점을 공유하는 것으로 추정됨.

     * 대규모 웹 서비스가 이렇게 다운되는 것은 마치 전력망 고장과 같으나, 에너지 대신 '주의'가 중단된 것과 같음. 메타가 다운되면, 인터넷 사용자들은 다른 곳에 주의를 기울이려 하지만, 시스템은 메타가 모든 트래픽을 처리할 것으로 설계되어 있어, 메타가 다운되면 다른 시스템도 함께 무너짐.

          + 대규모 웹 서비스의 다운은 전력망 고장에 비유될 수 있으며, 메타가 다운될 때 사용자들은 다른 곳으로 주의를 돌리려 하지만, 메타가 트래픽을 감당할 것으로 예상된 시스템이 붕괴되는 현상이 발생함.

     * 자신의 계정 정보가 틀리다는 메시지를 받고 계정이 해킹당했다고 생각했으나, 다른 많은 사람들도 같은 문제를 겪고 있어서 개인적으로 안도함. 이기적인 생각이라는 것을 인지하면서도 어깨를 으쓱함.

          + 자신의 계정 정보가 잘못되었다는 메시지를 받고 해킹당했다고 생각했으나, 이 문제가 다수에게 발생하고 있어 개인적으로 안심함.

     * 서비스가 계속해서 고장나 있기를 바람. 사람들이 혼란스러워하며 지난 10년간의 멍한 상태에서 서서히 깨어날 것을 상상함.

          + 서비스가 계속해서 작동하지 않기를 희망하며, 이로 인해 사람들이 혼란을 느끼고 장기간의 무감각한 상태에서 벗어날 것을 기대함.

     * 활성화된 인스타그램 계정을 가지고 있으며, 오늘 처음으로 몇 개의 게시물을 광고로 홍보하려고 생각했으나, 앱이 다시 온라인 상태가 되었지만, 48-72시간 동안 진행될 예정이었던 광고가 <비활성화>로 표시되고, 이미 결제했음에도 '지금 결제하기' 링크가 새로 생김. 개인적으로 혼란스러우며, 소액을 지출했기 때문에 크게 손실을 보지는 않았지만, 다른 이들은 더 큰 영향을 받았을 것임. 중소기업 사용자들에게 일반적으로 어떤 대응을 기대할 수 있는지, 메타가 자동으로 광고를 재개하는지, 누구도 인상을 받지 못한 시간에 대해 보상을 하는지 궁금함. 인스타그램 도움말에 티켓을 제출했고, 스크린캐스트 비디오를 요청받았으며, 처음 보낸 비디오는 반송되어 비디오를 편집하여 다시 보냄.

          + 인스타그램 광고를 홍보하려 했으나 서비스 장애로 인해 광고가 비활성화되고 추가 결제 요구를 받는 등 혼란을 겪음. 메타가 중소기업 고객을 어떻게 대우하는지 궁금함.

     * 메타스테이터스 웹사이트도 현재 접속 폭주로 인해 문제를 겪고 있음.

          + 메타스테이터스 웹사이트가 접속 폭주로 인해 문제를 겪고 있음.

     * 이번에 문제가 된 것은 BGP인지 DNS인지 궁금함. 어느 쪽이든, 전 세계 GDP가 상승할 것임.

          + 이번 장애의 원인이 BGP인지 DNS인지에 대한 궁금증을 표함. 결과적으로 전 세계 GDP가 상승할 것이라는 의견을 제시함.

     * 페이스북은 로그인 페이지를 띄우며 로그인 실패 또는 로그아웃된 것처럼 보임. 인스타그램과 메신저도 영향을 받는 것으로 보임.

          + 페이스북, 인스타그램, 메신저가 로그인 실패 또는 로그아웃으로 인한 문제를 겪고 있음을 확인함.

     * IRC는 여전히 작동한다는 것을 확인함. 다행이라고 생각하며 코트를 챙김.

          + IRC(인터넷 릴레이 채팅)가 여전히 정상 작동한다는 것을 확인하고 안도함.

     * 모두가 자신의 계정이 해킹당했다고 패닉에 빠졌으나, 본인은 계정을 회복하지 않고 페이스북 없이 지내는 것에 대한 약간의 희망을 가짐. 스스로 페이스북을 그만두기에는 약함을 인정함.

          + 많은 사람들이 해킹당했다고 생각해 패닉에 빠졌으나, 본인은 이를 계기로 페이스북을 그만두고 싶은 약간의 희망을 가지고 있음을 표현함.
"
"https://news.hada.io/topic?id=13669","카기(Kagi)와 울프람(Wolfram) 기술 협력","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      카기(Kagi)와 울프람(Wolfram) 기술 협력

Kagi + Wolfram 파트너십 발표

     * 검색 엔진 개발은 어려운 작업으로, 정확하고 신뢰할 수 있는 검색 결과를 제공하기 위해 방대한 데이터 처리, 복잡한 쿼리 이해, 사용자 기대에 부응하기 위한 지속적인 발전이 필요함.
     * Kagi는 사용자에게 가장 정확하고 신뢰할 수 있는 검색 경험을 제공하기 위해 노력하며, AI를 사용하여 검색 경험을 향상시키되, 사용자가 명시적으로 요청했을 때만 사용함.
     * 광고 및 추적이 포함된 페이지를 자동으로 하위 등급으로 분류하고, 사용자가 선호도에 따라 검색 피드를 맞춤 설정할 수 있는 개인화 기능을 제공함.
     * ""Small Web"" 이니셔티브를 통해 개인 블로그 및 웹사이트의 진정성 있는 콘텐츠를 촉진하고, 고품질 콘텐츠의 가시성을 높이려고 노력함.

Wolfram|Alpha와의 통합

     * Kagi는 검색 기능을 향상시키고 잠재적으로 오해의 소지가 있는 AI 생성 답변 문제를 해결하기 위해 계산 지식 엔진인 Wolfram|Alpha와 파트너십을 맺음.
     * Wolfram Alpha의 방대한 지식 베이스와 강력한 알고리즘을 Kagi 검색 플랫폼에 통합하여, 더 정확하고 신뢰할 수 있으며 포괄적인 검색 결과를 사용자에게 제공하고자 함.
     * 이 파트너십은 신뢰할 수 있는 정보를 빠르고 쉽게 찾을 수 있는 검색 엔진을 제공하려는 Kagi의 목표에 있어 중요한 진전을 나타냄.

Stephen Wolfram의 Kagi 자문위원회 합류

     * Stephen Wolfram이 Kagi의 자문위원회에 합류하게 되어 매우 기쁘며, 그의 경험은 Kagi의 다음 중요한 발전을 안내하는 데 중요한 지식을 제공할 것으로 기대됨.

Kagi에서의 Wolfram|Alpha 통합 기능

     * Kagi는 Wolfram|Alpha와의 첫 통합을 이주 전에 시작했으며, 많은 계산 쿼리에서 이미 이를 볼 수 있음.
     * Wolfram|Alpha는 이제 Kagi에서 수학, 시간, 단위 변환 및 사실 정보에 대한 빠른 접근을 제공함.
     * 또한, Wolfram 언어의 열성적인 팬들을 위해 명령어의 직접 평가도 지원함.
     * 오늘은 Wolfram|Alpha가 제공하는 풍부한 지식 그래프 위젯을 출시하며, 타이핑하면서 정보를 보여주는 즉각적인 요약 상자도 출시함.

브라우저에서의 직접 구현

     * 이 기능은 브라우저에서 직접 구현되어야 하는 매우 강력한 기능으로, Orion 브라우저에 이를 도입할 예정이며, 다른 브라우저에서도 구현할 수 있도록 개방할 예정임.

다음 단계

     * 사용자들이 Kagi에서의 Wolfram|Alpha 통합을 시도하고 좋아하기를 바라며, 피드백을 kagifeedback.org를 통해 알려줄 것을 요청함.
     * Kagi는 어시스턴트를 활성화하여 Wolfram|Alpha 정보를 진실의 강력한 원천으로 사용하게 할 예정이며, 이 모든 것은 사용자에게 추가 비용 없이 제공될 것임.
     * 구조화되고 정확하며 신속한 정보 위젯의 중요성을 인식하고 있으며, 사용자가 필요한 정보에 빠르게 접근하고 검색 엔진에서 가능한 가장 적은 시간을 소비할 수 있도록 할 예정임.
     * 날씨, 시간, 계산기, 인터넷 속도 테스트, 번역 및 색상 위젯 등 이미 다양한 위젯을 제공하고 있으며, 계속해서 추가할 예정임.
     * 더 강력한 계산기 위젯, 스포츠 점수 및 주식 가격 차트를 포함하여, 사용자가 요구에 따라 Kagi 검색 결과에 자신의 위젯을 추가하고 다른 사용자와 공유할 수 있는 개방형 소스 저장소를 통해 사용할 수 있는 API를 제공하는 것을 고려 중임.

GN⁺의 의견

     * Kagi와 Wolfram|Alpha의 파트너십은 사용자들에게 더 정확하고 신뢰할 수 있는 검색 결과를 제공하는 새로운 방법을 제시함. 이는 정보의 질을 향상시키는 데 중요한 역할을 할 수 있음.
     * 검색 엔진에서 AI의 사용은 정보의 정확성과 신뢰성에 대한 우려를 낳을 수 있지만, Kagi는 사용자의 요청에 따라 AI를 사용하여 이러한 문제를 해결하려는 접근 방식을 취함.
     * Wolfram|Alpha의 지식 베이스와 알고리즘은 특히 과학, 기술, 수학, 공학 분야에서 강력한 도구로 작용할 수 있으며, 교육적인 측면에서도 매우 유용할 것으로 보임.
     * Orion 브라우저와 같은 특정 브라우저에 이 기능을 통합하는 것은 사용자 경험을 개선할 수 있지만, 모든 브라우저에서 이를 지원하도록 만드는 것은 기술적인 도전이 될 수 있음.
     * 개인화된 위젯을 추가하고 공유할 수 있는 API를 제공하는 것은 커뮤니티 기반의 혁신을 촉진할 수 있지만, 사용자의 프라이버시와 데이터 보안을 유지하는 것이 중요한 고려 사항이 될 것임.

        Hacker News 의견

     * 광고 및 추적이 포함된 페이지를 자동으로 하위 등급으로 분류하여 검색 결과의 품질을 보장하는 것은 검색 엔진에 대해 들어본 것 중 가장 설득력 있는 점임.
     * Kagi는 무료가 아니지만, 소액의 투자로 매우 향상된 맞춤형 검색 경험을 제공함.
     * 스티븐 울프램이 Kagi의 자문위원회에 합류한 것은 흥미로움. 곧 그에 대한 긴 글을 읽게 될 것으로 예상됨.
     * Kagi는 2018년에 설립된 팔로알토의 유료 구독 검색 엔진으로, 90년대 버클리에서 설립된 동명의 회사와 혼동되어 조사를 해야 했음. 후자는 역사에서 거의 사라진 듯하지만, 일부 WayBack 스냅샷에서 찾아볼 수 있음.
     * Kagi를 주 검색 엔진으로 사용하는 데 설득력이 있음.
     * Kagi는 검색 결과가 좋을 뿐만 아니라 위젯과 같은 유용한 기능을 제공하여 매우 유용함. 현재는 DDG를 사용하고 있지만, 그 결과에 만족하지 못하고 있음. Kagi는 이상적인 구독 서비스처럼 느껴짐.
     * Kagi를 좋아하지만, 검색 엔진이 ""위젯""을 표시하는 것에 대해 조심스러움. 이는 사용자를 사이트에 머무르게 하기 위해 더 많은 기능을 추가하도록 유도할 수 있음. 검색 엔진은 단순히 쿼리에 기반한 웹 결과를 보여주어야 함.
     * Wolfram Alpha에는 여전히 오래된 버그가 있음. 날짜 간의 기간 계산에서 하루 차이가 발생함. 이 버그로 인해 언젠가 우주 임무가 실패할 수도 있음.
     * 몇 달 동안 Kagi의 유료 고객이었으며, 검색 결과의 품질이 뛰어나고 도구들이 유용함. Wolfram이 추가된 것을 보고 기쁨.
     * 새로운 검색 엔진들이 인덱스를 구축하고 유지하면서 속도 제한이나 캡차에 걸리지 않는 방법에 대한 의문. Google은 예외를 인정받지만, 다른 검색 엔진에 대해서는 그렇지 않을 수 있음.
"
"https://news.hada.io/topic?id=13636","PQL - Pipelined Query Language","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PQL - Pipelined Query Language

     * Microsoft의 Kusto 에서 영감을 받은 쿼리 언어. SQL로 컴파일됨
     * Go 로 작성된 라이브러리 이며, Clickhouse SQL dialect 로 테스트 되었으나 생성된 SQL 은 DB에 구애받지 않음
     * 각 쿼리 결과를 다음 쿼리로 파이프하여 복잡한 쿼리를 간단히 만들수 있게 설계됨

작성 예제

StormEvents
| where DamageProperty > 5000 and EventType == ""Thunderstorm Wind""
| top 3 by DamageProperty

   이 문장은 다음과 같은 SQL로 컴파일됨
SELECT *
FROM StormEvents
WHERE DamageProperty > 5000 AND EventType = 'Thunderstorm Wind'
ORDER BY DamageProperty DESC
LIMIT 3;
"
"https://news.hada.io/topic?id=13551","1992년처럼 컴파일하자년처럼 컴파일하자 (2014)

파일 시스템 설정

     * Wolfenstein 3D 소스 코드 컴파일을 위해 DOS 드라이브가 필요한 두 개의 폴더 생성.

다운로드

     * Borland C++ 3.1 컴파일러, Wolfenstein 3D 소스 코드, VGA 파일 다운로드.

압축 해제

     * 다운로드한 파일들을 압축 해제.

DosBox

     * DosBox를 다운로드하고 시작.

파일 시스템 마운트

     * 파일 시스템을 마운트하여 각 드라이브에 폴더 할당.

컴파일러 설치

     * Borland C++ 3.1 설치 과정 진행.

Wolfenstein 3D 소스 코드 설치

     * 컴파일러가 설치된 시스템에서 소스 코드 압축 해제.

컴파일 시작

     * Borland C++ 3.1을 시작하여 프로젝트 오픈, 디렉토리 설정 후 컴파일 시도.
     * TASM 실행 파일 누락 오류 발생, PATH 설정 후 재컴파일.
     * 링킹 실패 오류 해결을 위해 프로젝트에서 오브젝트 파일 경로 수정 후 성공적으로 컴파일.

에셋 획득

     * 게임 에셋을 위해 Wolfenstein 3D 공유 버전 다운로드 또는 전체 버전 구매.
     * DosBox에서 게임 설치 후 컴파일한 실행 파일을 게임 폴더로 복사.

게임 실행

     * 게임 실행 시도, 그래픽 파일 인덱스 문제로 인해 비정상적인 화면 출력.
     * 문제 해결을 위해 VGA 에셋 파일을 소스 코드에 맞게 재생성된 파일로 교체.

VGA 프레임버퍼 및 화면 종횡비

     * DosBox의 화면 종횡비 옵션을 조정하여 1992년 원본 게임 화면과 동일하게 조정.

GN⁺의 의견

     * 이 기사는 고전 게임인 Wolfenstein 3D를 현대 시스템에서 컴파일하는 과정을 설명함. 이는 레트로 게임 개발에 관심 있는 초급 소프트웨어 엔지니어에게 흥미로운 내용일 수 있음.
     * 기사에서는 구식 컴파일러와 에뮬레이터를 사용하여 오래된 코드를 다시 작동시키는 방법을 보여줌으로써, 소프트웨어의 역사적 가치 보존과 학습에 대한 중요성을 강조함.
     * 현대 개발자들이 과거의 소프트웨어를 이해하고, 이를 통해 현재의 기술 발전에 대한 통찰력을 얻을 수 있는 기회를 제공함.
     * 비판적인 시각에서 볼 때, 이러한 과정은 시간이 많이 소요되고, 때로는 현대적인 개발 환경과 호환되지 않는 문제를 겪을 수 있음.
     * 이 기술을 도입할 때는 고전 게임의 소스 코드를 이해하고 수정할 수 있는 능력이 필요함.
     * 이 기술을 선택함으로써 얻을 수 있는 득은 과거의 게임 개발 기술을 배울 수 있다는 점이고, 실은 현대적인 개발 환경과의 호환성 문제를 해결해야 한다는 점임.

        Hacker News 의견

     * Wolfenstein 3D에 관한 책 추천

     Wolfenstein 3D에 대한 책이 기술적이지만 지루하지 않으며, 오래된 학교의 트릭과 최적화 방법들이 많이 소개되어 있음. 벽 텍스처 스케일링을 위한 64개의 함수, 스프라이트를 ""옆으로"" 저장하는 방법, 복잡한 그래픽 카드 관리, 게임을 표시할 수 있도록 그래픽 모드 해킹 등이 포함됨.
     * 레트로 시스템에서의 재미

     레트로 시스템에서는 도구를 모아 다시 만들 수 있는 재미가 있음. 예를 들어, Uplink 게임을 재컴파일하는 데 Visual Studio 6.0만 있으면 됨. 개발 아카이브에는 게임을 빌드하는 데 필요한 모든 의존성이 포함되어 있어, 의존성을 수정하는 데 약간의 시간이 걸렸지만, 결국 게임이 잘 작동함. 몇 가지 작은 결함을 수정하고 여기저기 개선을 추가함.
     * DOS 기반의 텍스트 UI에 대한 향수

     DOS 기반의 텍스트 UI가 그리움. 1997년까지 PS/2를 계속 사용했던 신뢰성 있는 시절을 회상함.
     * Borland Turbo C++에서의 프로그래밍 학습 경험

     Borland Turbo C++에서 프로그래밍을 배웠던 경험. 화면에 그림을 그리기 위해 기하학적 모양 함수를 호출하는 것이 쉬웠음. 모양을 그린 후 xor 함수를 사용하면 애니메이션을 만들 수 있었음. 단 1000줄의 C++ 코드로 달리는 것처럼 보이는 작은 스프라이트를 만드는 것이 멋졌음. 친구들과 함께 이러한 트릭, 수작업으로 만든 스프라이트, 걸어 다닐 수 있는 게임 세계를 사용하여 파이널 판타지 스타일의 게임을 만듦.
     * Doom의 주인에 대한 책 읽기

     ""Master of Doom""이라는 책을 읽고, 당시에는 게임이 매우 흥미로웠지만, 역사를 돌아보며 몇몇 젊은이들이 만들어낸 것에 더욱 영감을 받음.
     * 게임 개발에 대한 책의 추천

     오래된 시절의 게임 개발에 대해 다시 생각하게 하는 훌륭한 책. 몇 년 전 식당 줄에서 기다리며 책을 다 읽었음.
     * 하드 드라이브 없이 플로피 디스크 교환에 대한 추억

     C 드라이브에 설치하는 것은 사치였음. 하드 드라이브가 없어서 A와 B 드라이브에서 플로피 디스크를 교환해야 했음. 그 시절을 즐겼지만, 요즘 아이들은 그런 이야기를 믿지 않음.
     * Borland의 MS-DOS IDE에 대한 달콤한 기억

     Borland C++는 약 5메가바이트에 들어가는 C++ 컴파일러, 표준 라이브러리, 디버거가 포함된 IDE였으며, Borland의 특유한 노란색과 파란색 색상 스키마가 아늑했음.
     * 관련 링크

     ""Let's compile like it's 1992 (2014)""라는 제목의 글과 관련된 링크 제공. 2017년 2월에 해커뉴스에 게시되었으며, 80개의 댓글이 있음.
"
"https://news.hada.io/topic?id=13605","JPEG XL과 파레토 프론트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            JPEG XL과 파레토 프론트

JPEG XL과 파레토 프론트

     * libjxl 버전 0.10 출시: JPEG XL의 참조 구현인 libjxl의 새 버전이 출시됨. 이 버전의 주요 개선 사항은 '스트리밍 인코딩' API의 완전한 구현.
     * 스트리밍 인코딩 API: 대형 이미지를 '조각'으로 인코딩할 수 있게 해줌. 전체 이미지를 한 번에 처리하는 대신, 메모리 친화적인 방식으로 처리 가능.

무손실: 메모리 사용량과 속도의 큰 개선

     * libjxl 버전 0.9 대비 개선: 이전 버전에서는 무손실 JPEG XL 인코딩이 메모리 집약적이고 시간이 오래 걸림. 대형 이미지 인코딩 시 심각한 문제 발생 가능성.
     * NASA 지구 야간 이미지 예시: 13500×6750 크기의 이미지를 압축하는 데 libjxl 0.9는 약 8GB의 RAM과 2분 이상 소요. libjxl 0.10으로 업그레이드 후에는 0.7GB의 RAM과 30초만에 압축 가능.
     * 다양한 노력 설정 결과: 표를 통해 다양한 노력 설정(e1~e9)에 따른 메모리 사용량, 시간, 압축 크기 비교 제공. 노력 설정을 높일수록 압축은 개선되지만 비선형적으로 개선됨.

파레토 프론트

     * 압축 기술 비교: 압축 파일 크기뿐만 아니라 인코딩 속도도 중요. 압축 밀도와 인코딩 속도 두 가지 차원 고려 필요.
     * 파레토 최적: 다른 방법으로 같은 압축 밀도를 더 적은 시간에 달성할 수 없는 경우. 파레토 최적 방법은 주어진 시간 예산에 대해 가장 작은 파일을 제공함.
     * 파레토 프론트 시각화: 인코딩 속도와 압축 밀도를 보여주는 차트로 시각화. 다양한 이미지 세트를 사용하여 평균 속도와 압축 밀도 비교.

비사진 이미지

     * 테스트 이미지 선택의 중요성: 대부분의 이미지가 사진일 경우, 자연스러운 노이즈로 인해 압축이 어려움.
     * 만화 이미지의 경우: 비사진 이미지는 사진보다 훨씬 더 잘 압축됨. 만화 이미지는 약 4bpp로 압축 가능.
     * libjxl의 개선: 새 버전의 libjxl은 이전 버전보다 훨씬 빠르고 압축률도 더 좋음.

손실 압축에 대하여

     * 손실 압축 벤치마크: 압축 크기와 속도만 중요. 이미지 품질은 세 번째 차원으로 고려해야 함.
     * 손실 이미지 코덱과 인코더의 성능: 다른 품질 포인트에서 다르게 작동할 수 있음. 높은 품질 인코딩에 잘 작동하는 인코더가 반드시 낮은 품질 인코딩에도 잘 작동하는 것은 아님.

손실 파레토 프론트

     * 테스트된 인코더: libjpeg-turbo, sjpeg, mozjpeg, jpegli, libavif / libaom, libjxl, libwebp, libheif 등 다양한 인코더의 최신 버전 테스트.
     * 중간 품질: SSIMULACRA2 점수 60에 해당하는 설정에서의 결과. 페이지 무게 감소가 이미지 충실도보다 중요할 때 가장 관련이 있음.
     * 중상 품질과 고품질: SSIMULACRA2 점수 70과 85에 해당하는 설정에서의 결과. 고품질 포인트에서는 JPEG XL이 주로 파레토 프론트를 차지함.

결론

     * libjxl 버전 0.10의 개선: 메모리 소비량이 크게 감소하고, 특히 멀티스레드 무손실 인코딩 속도가 향상됨.
     * JPEG XL의 위치 확립: 고품질에서 시각적으로 손실 없는 품질에 이르기까지 다양한 속도 설정에서 파레토 최적임을 확인.
     * JPEG의 지속적인 매력: 새로운 jpegli 인코더는 속도와 압축 면에서 개선을 가져옴. 매우 빠른 인코딩이 필요할 때 여전히 최선의 선택일 수 있음.
     * Cloudinary의 기여: 이미지 압축 분야에서 최신 기술과 인사이트 적용을 통해 최상의 사용자 경험 제공에 적극적으로 참여.

GN⁺의 의견

     * libjxl 0.10의 출시는 이미지 압축 기술에서 중요한 진전을 나타냄. 특히 대형 이미지를 처리할 때 메모리 사용량과 인코딩 속도의 대폭 개선은 사용자에게 큰 이점을 제공할 것.
     * JPEG XL이 다양한 품질과 속도에서 파레토 최적임을 강조하는 것은, 사용자들이 이미지 품질과 파일 크기 사이에서 최적의 균형을 찾을 수 있도록 돕는다는 점에서 유용함.
     * 비판적인 시각에서 볼 때, libjxl과 같은 새로운 기술의 채택은 기존 인프라와의 호환성 문제를 야기할 수 있음. 따라서 기존 시스템과의 통합성을 고려한 점진적 도입이 필요.
     * 이미지 압축 기술을 선택할 때는 인코딩 및 디코딩 속도, 파일 크기, 지원하는 플랫폼 및 장치 등 여러 요소를 고려해야 함. JPEG XL은 고품질 이미지 압축에 있어서 매력적인 선택지이지만, 모든 사용자와 시스템에서 널리 지원되는 것은 아님.
     * 이 기술의 도입으로 인한 득은 메모리 사용량 감소, 인코딩 속도 향상, 파일 크기 절감 등이며, 실은 기존 시스템과의 호환성 문제와 새로운 기술에 대한 학습 곡선이 될 수 있음.

   jpegli 인코더가 mozjpeg에 이어 또다시 jpg를 생명연장 시키네요...
   JXL 진영에서 만들었으나 아이러니하게도 JXL의 전파를 저해할지도 모르겠네요...

        Hacker News 의견

     * WebP 포맷의 무손실 압축 성능이 매우 뛰어남

     WebP의 무손실 압축 기능이 PNG나 OptiPNG보다 성능과 속도 면에서 훨씬 우수하며, 현재 온라인에서 널리 지원되고 있음. 또한, 무손실 AVIF보다 훨씬 나음.
     * 저품질 설정에서 JPEG의 세부 보존 능력에 대한 평가

     JPEG는 저품질 설정에서도 이미지의 전체적인 질을 유지하면서 세부 사항을 추상적인 예술 스타일로 변환하는 능력이 뛰어남. 반면, JXL과 AVIF는 흐릿해짐.
     * JPEG XL 포맷에 대한 자세한 정보를 찾는 이용자의 어려움

     JPEG XL 포맷의 각 단계를 상세히 설명하는 웹사이트나 문서를 찾기 어려움. JPEG XL에는 많은 혁신적인 기술이 포함되어 있으나, 이를 자세히 알 수 있는 자료 부족.
     * 인코딩 속도에 초점을 맞춘 기사에 대한 의문

     현대 컴퓨터에서 디코딩 속도는 큰 문제가 아니지만, 그래도 속도에 대한 데이터를 살펴보는 것은 흥미로움.
     * JPEG XL의 품질과 압축 능력에 대한 평가

     JPEG XL은 단순한 설정으로도 고품질의 압축 이미지를 생성하는 능력이 뛰어남. 다른 코덱들은 비슷한 결과를 얻기 위해 이미지 유형에 따라 다양한 품질 설정이 필요함.
     * JPEG XL 프로젝트로 인해 개발된 새로운 병렬 처리 라이브러리

     JPEG XL 프로젝트는 Highway라는 새로운 병렬 처리 라이브러리를 개발함. 이 라이브러리는 JPEG XL뿐만 아니라 Google의 최신 Gemma AI 모델에도 사용됨.
     * QOI 포맷의 포함에 대한 반응

     일반 대중 소프트웨어에서 기본적으로 지원하지 않는, 그저 괜찮은 수준을 목표로 하는 QOI 포맷이 비사진 이미지 인코딩 벤치마크에 포함된 것이 재미있음.
     * libjxl의 새 버전이 메모리 소비를 크게 줄임

     libjxl의 새 버전은 손실 및 무손실 압축 모두에서 메모리 소비를 크게 줄이고, 특히 멀티스레드 무손실 인코딩 속도를 향상시킴. 기사도 잘 작성되었음.
     * JPEG XL을 사용하여 오래된 JPEG 파일을 재압축할 때의 이점

     JPEG XL을 사용하면 오래된 JPEG 파일을 재압축하여 15%에서 30%의 공간을 절약할 수 있으며, 원본 JPG 파일을 비트 단위로 완전히 동일하게 복원할 수 있음.
     * 손실 없는 AVIF의 추가 절약 가능성에 대한 언급

     손실 없는 AVIF에서 더 많은 절약이 이루어질 것으로 예상됨.
"
"https://news.hada.io/topic?id=13645",""죽은 나비들은 그만죽은 나비들은 그만 (2017)""

죽은 나비는 그만!

     * 죽은 나비의 이미지가 너무 많이 사용되는 것에 대한 개인적인 불만을 표현함.
     * 나비를 사랑하고 희망과 아름다움의 상징으로 여기는 저자는 나비의 잘못된 묘사가 자주 보이는 것에 대해 실망함.
     * 나비가 죽은 후 곤충 수집가들에 의해 특정한 방식으로 날개가 고정되는데, 이것이 살아있는 나비의 자연스러운 자세와는 다름.

죽은 나비의 묘사

     * 죽은 나비의 날개는 수집가에 의해 식별을 용이하게 하기 위해 특정한 방식으로 고정됨.
     * 이러한 방식으로 고정된 나비의 사진이 필드 가이드와 참고 자료에서 자주 사용됨.
     * 살아있는 나비는 날개를 이와 다른 방식으로 자주 들고 있으며, 저자는 이를 사진으로 보여줌.

살아있는 나비의 묘사

     * 살아있는 나비의 날개 자세는 다양하지만, 죽은 나비처럼 날개 끝이 몸통에 수직인 경우는 드뭄.
     * 저자는 살아있는 나비의 사진을 여러 장 공유하며 이를 입증함.

대중 문화 속의 죽은 나비

     * 대중 문화에서 죽은 나비의 이미지가 널리 퍼져 있으며, 이는 잘못된 정보를 전달할 수 있음.
     * 영화 포스터, 주식 사진, 나비 문신 등에서 죽은 나비의 자세가 사용되고 있음.
     * 저자는 살아있는 나비의 이미지가 더 긍정적인 상징을 전달할 것이라고 주장함.

죽은 나비 상품

     * 선물 가게에서도 죽은 나비의 이미지를 사용한 다양한 상품을 판매함.
     * 저자는 이러한 상품들이 살아있는 나비의 이미지를 사용해야 한다고 생각함.

저자의 경험

     * 저자 자신도 과거에 죽은 나비를 참고로 그림을 그린 적이 있으나, 이제는 살아있는 나비의 자세로 그림을 그림.
     * 죽은 나비를 묘사하는 것이 때로는 적절할 수 있지만, 대부분의 경우에는 살아있는 나비를 묘사하는 것이 더 나음.

GN⁺의 의견

     * 이 기사는 일반 대중이 나비의 이미지를 바라보는 방식에 대해 새로운 관점을 제시함.
     * 나비의 자세에 대한 정확한 이해는 생물학적 지식을 향상시키고, 자연에 대한 존중을 높일 수 있음.
     * 그러나 이러한 세부 사항에 대한 집착이 예술적 표현의 자유를 제한할 수도 있음을 고려해야 함.
     * 나비 관련 제품을 제작하는 디자이너나 예술가들은 이 정보를 참고하여 더 자연스러운 나비 이미지를 창조할 수 있음.
     * 나비의 생태와 행동에 대한 추가적인 교육 자료를 제공하는 것이 도움이 될 수 있음.
"
"https://news.hada.io/topic?id=13579","litestar - 고성능 API를 손쉽게 구축하게 해주는 ASGI 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              litestar - 고성능 API를 손쉽게 구축하게 해주는 ASGI 프레임워크

     * 강력하고 유연하지만, opionated 한 ASGI 프레임워크
     * API 구축에 중점을 두고 있으며, 고성능 데이터 검증 및 파싱, 디펜던시 인젝션, ORM 통합, 권한 관리, 플러그인 기능등을 제공
     * Flask / Starlette / FastAPI 등에서 손쉽게 마이그레이션 가능
     * 풀스택 레퍼런스 데모 앱 제공 : Vite(Websocket + HMR + Jinja2) + 멀티 스테이지 Docker + 팀 권한등이 부여된 사용자 모델 및 슈퍼유저 + SQLAlchemy 2.0 + SAQ(Simple Asynchronous Queue) + STructlog 등
"
"https://news.hada.io/topic?id=13678","애플 텍스트 에디터의 기술적 내부 구조","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         애플 텍스트 에디터의 기술적 내부 구조

Apple 텍스트 편집기의 기술적 내부

     * TextView 기반의 텍스트 편집기로서 Paper의 작동 방식에 대한 세부 사항을 다룸.
     * Paper는 현재 TextKit 1 프레임워크를 기반으로 구축되어 있으며, TextKit 2에서도 개념, 추상화 및 원칙이 유지되거나 더 나은 API로 변경됨.

텍스트 뷰

     * TextView 클래스는 Apple 텍스트 편집기에서 텍스트 편집 작업의 핵심.
     * NSTextView와 UITextView는 차이가 있지만, API가 유사하여 하나의 TextView 클래스로 취급.
     * TextView는 복잡성이 매 OS 릴리스마다 증가하는 대규모 컴포넌트.
     * Apple은 TextView를 여러 계층으로 세분화하여 텍스트 편집 경험을 제공.

    NSTextStorage

     * 원시 텍스트 문자열을 저장.
     * 텍스트 범위에 할당된 속성(문자열-값 쌍)을 저장.
     * 텍스트와 속성 변경에 대한 이벤트를 발생시킴.

    NSTextContainer

     * 텍스트 기호(글리프)를 호스팅하는 영역의 모양과 크기를 정의.

    NSLayoutManager

     * NSTextStorage의 텍스트 문자열에 적용된 속성 범위를 보고 글리프의 크기와 간격을 계산.
     * 글리프를 레이아웃하고, 텍스트의 각 줄이 시작하고 끝나는 위치, 전체 텍스트의 높이를 계산.

    TextView

     * NSLayoutManager에 의해 생성된 글리프 레이아웃을 그림.
     * 뷰의 높이를 레이아웃된 텍스트의 현재 높이와 동기화.
     * 텍스트 선택, 캐럿, 새로 삽입된 텍스트에 적용되는 타이핑 속성을 관리.

    ScrollView

     * TextView의 보이는 부분을 표시.
     * 스크롤, 스크롤 바, 확대/축소를 관리.

속성

     * NSAttributedString은 Apple 프레임워크에서 리치 텍스트 편집의 기초.
     * 일반 텍스트 문자열과 텍스트 범위에 첨부된 속성(문자열-값 쌍)으로 구성.
     * 속성은 주로 스타일링 목적으로 사용되지만, 사용자 정의 문자열-값 쌍을 할당하는 데 제한이 없음.

스타일링

     * 스타일링은 텍스트 범위에 특별한 프레임워크 정의 속성을 적용하는 것을 의미.
     * Paper는 메타 속성을 사용하여 텍스트 구조를 식별한 후 스타일링을 적용.
     * 속성은 사용자 입력으로 인해 변경되는 NSTextStorage의 Markdown 텍스트와 사용자가 메뉴 항목, 슬라이더, 제스처에서 조정하는 텍스트 영향 설정과 동기화됨.

성능

     * 메타, 레이아웃, 장식 속성의 분리는 특정 편집기 변경 사항을 빠르게 유지하는 데 도움.
     * 타이핑 속도는 텍스트 편집기에서 가장 중요한 성능 요소.
     * Markdown의 작동 방식으로 인해 텍스트 변경은 전체 단락의 스타일링에 영향을 줄 수 있음.

메타 속성

     * 하이라이팅 논리 외에도 메타 속성은 텍스트 구조에 대해 알아야 하는 다양한 기능에서 중요한 역할을 함.

    포맷팅 단축키

     * 선택된 Markdown 텍스트의 스타일을 토글하는 데 필요한 상세한 정보 제공.

    장(chapter) 간 이동

     * 캐럿 위치에 상대적인 제목을 찾는 데 도움.

    개요(Outline)

     * 모든 제목을 순회하는 기능에 의존.

    장(chapter) 재배열

     * 개요에서 장을 재배열하는 기능 제공.

    포맷 변환

     * Markdown 내용을 RTF, HTML, DOCX로 변환하는 데 구조를 알아야 함.

텍스트 컨테이너 수학

     * 텍스트 컨테이너는 선호하는 줄 길이를 유지하는 것이 가장 중요한 규칙.
     * 제목 태그가 일반 텍스트 흐름 밖에 배치될 때와 같이 대칭을 가장해야 하는 경우가 있음.

선택 앵커링

     * 텍스트 선택은 항상 앵커 포인트를 가짐.
     * Mac에서는 클릭하고 드래그하여 텍스트를 선택하고, iOS에서는 선택의 한쪽 끝을 드래그할 수 있음.

선택 친화도

     * 텍스트 편집에서 _선택 친화도_라는 흥미로운 개념이 있음.
     * 캐럿을 화살표 키로 이동할 때 줄을 간단히 바꾸지만, 단축키로 줄 끝으로 이동하면 같은 줄에 머물면서 오른쪽에 붙음.

Uniform Type Identifiers (UTIs)

     * 앱 간 데이터 교환의 기반 시스템인 UTIs에 대해 논의.
     * 데이터 타입이 부모 데이터 타입에 conform to (상속)하는 계층적 시스템.

클립보드(Pasteboard)

     * 클립보드는 UTIs가 직렬화된 데이터에 매핑된 사전.
     * 단일 복사 작업은 동일한 데이터의 여러 표현을 한 번에 작성.
     * 공개 UTIs와 개인 UTIs를 다루는 것은 상대적으로 간단하지만, Apple에 의해 정의되지 않은 널리 허용되는 형식을 다루는 것은 더 복잡.

마무리

     * 첫 번째 기사를 확인하면 앱과 개발 과정에 대한 더 많은 정보를 얻을 수 있음.

GN⁺의 의견

     * 이 기사는 Apple 플랫폼에서 TextView 기반 텍스트 편집기의 복잡한 내부 작동을 상세히 설명하고 있어, 소프트웨어 개발자나 관심 있는 사용자에게 흥미로운 정보를 제공함.
     * 텍스트 편집기의 성능 최적화를 위한 알고리즘과 속성 관리 방법은 개발자들이 자신의 애플리케이션을 설계할 때 참고할 수 있는 좋은 사례임.
     * 텍스트 편집기의 성능을 높이기 위해 사용된 기술적 접근 방식은 다른 개발자들이 유사한 문제를 해결할 때 참고할 수 있는 유용한 지침을 제공함.
     * Markdown과 같은 텍스트 포맷을 다루는 애플리케이션을 개발할 때 UTIs의 이해는 데이터 교환과 호환성을 위해 중요함.
     * 이 기사는 텍스트 편집기의 내부 구조에 대한 이해를 높이는 데 도움이 되지만, 실제로 이러한 복잡성을 관리하는 것은 개발자에게 상당한 도전이 될 수 있음.

        Hacker News 의견

     * 이 글은 정말 좋다. TextKit에 대한 나의 기본 소개 자료로 <a href=""https:&#x2F;&#x2F;:///www.objc.io&/…;"" rel=""nofollow"">https://www.objc.io</a>를 대체할 것 같다.
          + 이 댓글은 해당 글이 TextKit에 대한 기본적인 소개로 매우 유용하다고 평가함.
     * 편집 트랜잭션 외부에서 수행되는 장식적 속성에 대해 약간 혼란스럽다. ""그리고 트랜잭션을 인지하지 못하는데, 이는 NSLayoutManager 자체에 존재하기 때문이지 NSTextStorage에 있는 것이 아니다""라고 했다. 색상과 같은 장식적 속성은 보통 NSTextStorage에 존재하는데! 저자는 마크다운 문자에 적용된 색상이 NSLayoutManager의 임시 속성 지원(일반적으로 철자가 틀린 단어를 색칠하는 데 사용됨)을 통해 이루어지고 있다는 것을 암시하는 건가? 그렇다면 그 목적은 무엇일까?
          + 댓글 작성자는 텍스트 편집과 관련된 기술적인 세부사항에 대해 혼란을 느끼며, 장식적 속성이 NSLayoutManager와 NSTextStorage 사이에서 어떻게 다루어지는지에 대한 저자의 설명에 의문을 제기함.
     * 정말 훌륭한 기사다(그리고 개인적으로도 시기적절하다. 현재 NSTextViews를 다루고 있음). 이 정보를 어떻게 얻었나? 다른 사람의 코드? 고통스러운 경험? developer.apple.com?
          + 댓글 작성자는 기사가 매우 유용하다고 평가하며, 저자가 이러한 지식을 어떻게 얻었는지 궁금해함.
     * DOM 문서의 시대에(예: notion, gitbook), 나는 종종 텍스트 파싱과 조작에 마법 같은 일을 하기 위해 속성 문자열을 사용한다. 이것은 매우 우아한 구조이고 왜 이렇게 알려지지 않았는지 이해할 수 없다. 참고로 기사는 놀랍다
          + 댓글 작성자는 속성 문자열을 사용하는 것이 우아한 방법이라고 생각하며, 이 기술이 더 널리 알려지지 않은 이유를 이해할 수 없다고 언급함. 기사에 대한 칭찬도 함께함.
     * 나는 과거에 스크래치부터 자체 텍스트 에디터를 작성하려고 시도한 적이 있는데, 이런 자원이 있었다면 정말 대단했을 것이다.
          + 댓글 작성자는 자신이 텍스트 에디터를 처음부터 만들려고 시도했던 경험을 언급하며, 이 기사가 그 당시에 있었다면 매우 도움이 되었을 것이라고 말함.
     * 나는 오랫동안 안드로이드 앱 개발자였기 때문에, 애플이 사물을 다소 다르고 더 신중하게 접근하는 방식을 보는 것이 흥미로웠다. 안드로이드에서는 Layout 클래스(및 그 서브클래스)가 레이아웃과 렌더링과 관련된 모든 것을 처리하고, TextView는 편집/선택 논리의 일부를 구현한다. EditText와 TextView의 유일한 차이점은 EditText가 TextView에 이미 존재하는 편집 기능을 '활성화'한다는 것이다. 이러한 다소 일체형 접근 방식(그리고 불량한 API)의 문제점은 앱이 텍스트를 렌더링하는 방식에 대해 더 많은 제어가 필요할 경우 운이 없다는 것이다. 예를 들어, 레이아웃된 후 개별 글리프에 접근하고 싶다면? 아니, 미안하다.
          + 댓글 작성자는 안드로이드와 애플의 텍스트 렌더링 및 편집 접근 방식의 차이점에 대해 설명하며, 안드로이드의 경우 더 세밀한 제어가 필요할 때 제한적이라는 점을 지적함.
     * TextEdit 앱은 거의 전적으로 단일 TextView로 구성되어 있다. 나는 WordPad가 Windows의 대응물이라고 생각한다. 이는 RichEdit 컨트롤을 기반으로 한다. 또 다른 재미있는 사실은 RTF가 기본적으로 NSAttributedString의 직렬화된 형태라는 것이다. Windows의 RichEdit 컨트롤에도 동일하게 적용된다. 실제로, Windows의 구현이 먼저 나온 것 같다: <a href=""https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rich_Text_Format"" rel=""nofollow"">https://en.wikipedia.org/wiki/Rich_Text_Format</a>;
          + 댓글 작성자는 TextEdit 앱이 TextView를 기반으로 하고 있으며, RTF(Rich Text Format)가 NSAttributedString의 직렬화된 형태라는 점을 언급함. 또한, Windows에서 비슷한 기능을 하는 RichEdit 컨트롤이 먼저 나왔을 수도 있다고 함.
     * 이 앱을 정말 좋아한다. obsidian과 ia Writer를 포함한 다른 모든 마크다운 앱을 대체했다!
          + 댓글 작성자는 해당 앱이 마크다운 작업을 위한 자신의 모든 기존 앱을 대체했다고 매우 만족해함.
     * 다행히도 적어도 누군가는 2024년에도 Cocoa를 사용하고 있다.
          + 댓글 작성자는 여전히 Cocoa 프레임워크를 사용하는 개발자가 있다는 사실에 안도감을 표현함.
     * iOS 컴포넌트에 대해 이런 문서가 더 많았으면 좋겠다!
          + 댓글 작성자는 iOS 컴포넌트에 대한 이러한 유형의 문서가 더 많이 있었으면 좋겠다는 바람을 나타냄.
"
"https://news.hada.io/topic?id=13646","Observable Framework에서 나타난 흥미로운 아이디어들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Observable Framework에서 나타난 흥미로운 아이디어들

Observable Framework의 새로운 아이디어

     * Observable Framework는 정적 사이트 생성기로, 마크다운과 자바스크립트를 혼합하여 빠르게 로딩되는 인터랙티브 페이지로 컴파일함.
     * 실시간으로 파일을 편집하고 저장하여 브라우저에서 즉시 변경 사항을 볼 수 있는 핫 리로딩 서버를 제공함.
     * 작업이 완료되면 정적 파일로 변환하여 서버에 배포하거나 Observable의 공유 플랫폼에 직접 배포할 수 있음.

마크다운 내의 자바스크립트

     * 마크다운 내의 js 태그가 붙은 코드 블록은 사용자의 브라우저에서 자바스크립트로 실행됨.
     * now라는 특별한 변수는 에포크 이후 현재 시간을 밀리초 단위로 제공하며 지속적으로 업데이트됨.
     * Observable Framework는 마크다운과 자바스크립트를 하나의 텍스트 문서로 통합하여 인터랙티브 문서를 생성함.

모든 것은 여전히 반응적임

     * Observable Framework는 Observable 노트북의 반응성을 유지하며, 의존하는 다른 셀이 변경될 때 자동으로 새로고침됨.
     * 폼 입력과 함께 작업할 때 특히 유용하며, 문서에 실시간 인터랙티비티를 쉽게 추가할 수 있음.

사용하는 코드만 포함

     * Observable Framework는 개발 모드에서 지연 로딩을 구현하여 사용하는 코드만 로드함.
     * 애플리케이션을 빌드하고 배포할 때, 참조된 라이브러리 코드만 jsdelivr CDN에서 자동으로 로드함.

빌드 시간에 데이터 캐시

     * Framework는 데이터 로더 메커니즘을 통해 빌드 시간에 대시보드 데이터를 빌드하여 정적 파일로 번들링함.
     * 데이터 로더는 어떤 프로그래밍 언어로든 작성할 수 있는 스크립트로, 빌드 시간에 실행되어 출력을 파일로 저장함.

Observable 노트북과의 비교

     * Observable Framework는 Observable 노트북의 아이디어와 코드를 재사용하지만, 단일 텍스트 파일로 구성되며 모두 오픈 소스임.
     * 표준 자바스크립트를 사용하며, 더 간단한 파일 형식으로 Git에 체크인할 수 있음.

전략의 변화

     * Observable Framework는 개발자 도구 공간으로 더 많이 기울어지는 Observable 회사의 전략적 변화를 나타냄.
     * Observable Framework는 Observable 노트북의 기술에 대한 존중과 함께, 플랫폼의 독점적인 성격과 무료 계정의 제한 때문에 사용을 제한했던 문제를 해결함.

GN⁺의 의견

     * Observable Framework는 데이터 시각화와 대시보드 구축을 위한 새로운 도구로, 개발자들에게 더 나은 협업과 효율성을 제공할 수 있는 잠재력을 가짐.
     * 이 플랫폼은 데이터 기반 의사결정을 지원하는 인터랙티브한 문서와 대시보드를 쉽게 만들 수 있게 해주어, 데이터 과학자와 개발자 모두에게 유용할 것임.
     * 그러나 Observable Framework의 성공은 개발자 커뮤니티의 채택과 기존 도구들과의 통합 정도에 크게 의존할 것임.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Jupyter Notebook이나 R Shiny가 있으며, 이들과의 비교를 통해 Observable Framework의 장단점을 더 잘 이해할 수 있음.
     * Observable Framework를 도입할 때는 기존 데이터 파이프라인과의 호환성, 성능 최적화, 그리고 커뮤니티 지원과 같은 요소들을 고려해야 함.

        Hacker News 의견

     * Observable Framework을 마이크 보스톡(Mike Bostock)의 시네마틱 유니버스에서 ""어벤져스: 엔드게임""에 비유함.
          + d3, Observable, Observable Plot, HTL을 결합하고 새로운 아이디어를 추가한 것으로 설명됨.
     * Observable Framework 사용 시 문제점으로 d3 예제 리소스로서의 기능이 언급됨.
          + 해당 프레임워크에서만 실행되도록 설계되어 있어 코드를 그대로 복사-붙여넣기 할 수 없음.
          + d3 자체가 사용하기 쉽지 않고 버전 간 호환성 문제가 있지만, 사이트에서 놀라운 그래픽을 찾을 수 있음.
     * Observable Framework를 GitHub 사이트에 쉽게 게시할 수 있다고 언급함.
          + 게시 방법에 대한 단계와 샘플 GitHub 액션을 작성한 노트 링크 제공.
     * Observable 노트북을 사용하여 첫 프로젝트를 완성한 경험을 공유함.
          + Observable Plot, Arquero, 자바스크립트의 일부 재학습, Rust 기반 시뮬레이터와의 통합 등 다양한 도구 학습에 상당한 에너지가 소모됨.
          + 마크다운과 반응성을 사용하여 노트북이 실제로 사용 가능하게 느껴짐.
          + Jupyter의 사용자 정의 포맷과 반응성 부재로 인한 버전 관리 문제와 상태 기반 혼란을 해결함.
          + Quarto와의 Observable 통합 시도도 있었으나, 이는 불완전하고 조각난 느낌이었음.
          + 노트북 작성과 공유에 대해 기쁘고 흥미진진한 경험을 했으며, 앞으로도 첫 선택 도구로 사용할 것임.
     * Observable Framework에 대한 긍정적인 경험을 공유함.
          + 인터랙티브한 플롯을 쉽게 설정하고 데이터를 플로팅하는 과정이 매우 간단했다고 언급.
          + Python 데이터 로더가 virtualenvs를 사용하도록 설정할 수 있으면 좋겠다는 바람을 표현함.
     * Jupyter 노트북에서 Observable로 이동해야 하는지에 대한 질문이 제기됨.
     * 코드 블록 내 'js' 콘텐츠 힌트가 있으면 사용자의 브라우저에서 즉시 실행됨을 설명함.
          + 코드를 보여주기 위해서는 'js echo' 힌트를 사용해야 함.
          + 기존 앱에 렌더러를 통합할 때 실행을 관리해야 하는 문제를 제기함.
     * Observable이 ClickHouse의 REST API와 잘 통합되며, 데이터베이스를 실시간으로 쿼리하는 예제가 흥미롭다고 언급함.
          + 앱이 상호작용적이어야 하므로 데이터를 사전 로딩하고 캐싱하는 것이 유일한 옵션이 아니길 바람.
     * 브라우저에서 Framework를 빠르게 시도하고 조작할 수 있도록 Node와 Python 환경이 자동으로 설정된 Codespace devcontainers를 설정함.
     * Observable이 자바스크립트만 지원함으로써 사용자 기반을 제한한다는 의견을 제시함.
          + 자바스크립트가 브라우저에서 대화형 디스플레이에 필수적인 언어이지만, 데이터 과학과 데이터 분석에는 Python이나 R에 비해 불편한 언어라고 평가함.
"
"https://news.hada.io/topic?id=13563","효과적인 릴리즈 노트 작성 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           효과적인 릴리즈 노트 작성 방법

     * 릴리즈 노트 의미:
          + 제품의 변경 사항과 업데이트 내용을 알리는 문서
          + 제품 변경·기능 개선·기능 추가·버그 수정 사항을 자세히 설명함
          + 릴리즈 노트는 사용자가 제품과 제품 업데이트의 가치를 이해하도록 도움
          + 잘 작성한 릴리즈 노트는 ‘제품 혹은 서비스가 지속적으로 개선되고 최신 상태를 유지하고 있음’ 안내
          + 제품의 부가 가치를 높이는 데 도움이 됨
     * 릴리즈 노트 이점:
          + 제품 기능 현황 파악, 협업 강화
               o 제품 관련 프로젝트를 이해하고, 제품 업데이트에 필요한 조치를 신속하게 취하는 데 도움이 됨
          + ‘제품 품질 향상’ 홍보
               o ‘개발팀과 기업이 제품 사용성과 안정성을 개선하고, 사용자에게 더 나은 사용 경험을 제공하도록 지속적으로 노력한다’는 메시지 전달
          + 정보 비대칭 개선→기업 투명성 강화
               o 릴리즈 노트를 보면 누구나 제품 발전 과정을 한눈에 확인해 개발팀 또는 기업과 사용자 간, 기업 내 여러 팀 간의 ‘정보 비대칭’ 문제를 개선
          + 사용자 참여 유도
               o 릴리즈 노트에 ‘어떤 기능이 개선되고 추가되었는지’, ‘누가 여기에 기여하였는지’도 명시하면 사용자가 제품에 의견을 개진하고, 제품 기능을 업그레이드하는 데 적극적으로 참여 가능
     * 릴리즈 노트 작성 요건:
          + 가장 중요한 정보를 먼저 제시하기
               o 사용자가 가장 궁금해하고, 기대하는 내용이나 주요 변경 사항을 먼저 제시
          + 짧게 작성해서 가독성 높이기
               o 문장은 간결하고 명확해야 함
          + 사용자 관점에서 쉬운 언어 사용하기
               o 다양한 사용자를 고려해 복잡하고 어려운 기술 용어를 불필요하게 쓰지 않고, 이해하기 쉬운 언어를 사용
          + 참고 링크 포함하기
               o 추가 정보나 사용자가 궁금해할 만한 내용이 있다면, 릴리즈 노트에 참고 링크를 제공
"
"https://news.hada.io/topic?id=13559","오픈소스 프로젝트를 사업으로 전환한 방법  ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         오픈소스 프로젝트를 사업으로 전환한 방법

     * 오픈소스 소프트웨어를 처음 작성하고 배포하기 시작한 것은 약 15년 전이었으며, 당시에는 MIT나 BSD와 같은 허용적 라이선스만을 사용했음.
     * Nodemailer와 같은 자신의 오픈소스 라이브러리를 A급 회사가 사용하는 것을 영광으로 여겼으나, 어느 대형 이메일 서비스 창업자의 기부 제안을 거절하기도 했음.
     * 하지만 Nodemailer를 사용하는 스타트업이 5억 달러에 인수되었을 때, 자신이 얻은 것이 무엇인지 고민하기 시작했음.
     * EmailEngine을 시작할 때는 가능한 많이 자신을 보호하려고 했으며, LGPL 라이선스를 사용하고 CLA(Contributor License Agreement) 프로세스를 설정했음.
     * CLA를 싫어하는 사람들이 많았지만, Nodemailer의 코드의 98.1%를 직접 작성했고, EmailEngine의 경우 99.8%를 직접 작성했기 때문에 PR(풀 리퀘스트)이 병합되지 않는 것은 큰 문제가 되지 않았음.
     * 새 프로젝트에서 수익을 창출하고자 LGPL 라이선스로 프로젝트를 공개하고, MIT 버전을 구독해야만 얻을 수 있도록 했으며, 연간 구독료는 250유로였음.
     * 하지만 이 비즈니스 모델은 실패했고, 1년 반 동안 총 수익은 750유로에 불과했음.
     * 앱의 UI를 전문적으로 재설계하고 라이선스 키 시스템을 도입했으며, EmailEngine을 사용하려면 유료 구독자만이 얻을 수 있는 라이선스 키가 필요했음.
     * LGPL에서 상업 라이선스로 변경했으며, 소스 코드는 여전히 GitHub에 공개되어 있지만, 더 이상 오픈소스가 아닌 '소스-사용 가능' 상태가 됨.
     * MIT 라이선스로 더 작은 도구들을 계속 공개하지만, 주요 프로젝트에 대해서는 하지 않음.
     * 예를 들어, EmailEngine에서 IMAP 클라이언트 기능을 추출하여 Node.js용 일반 IMAP 클라이언트 라이브러리로 MIT 라이선스 하에 공개했으며, 이 모듈은 기존 대안보다 훨씬 나은 성능을 제공함.
     * 처음에는 시험 사용 옵션이 없었고, 애플리케이션 시작 후 15분 이내에 유효한 라이선스 키를 제공하지 않으면 앱이 작동을 멈췄음.
     * 가격을 동일하게 유지했고, 첫 달에 1750유로 상당의 구독을 판매하여 프로젝트의 운명을 결정지었음.
     * 가격을 점차 인상했고, 이로 인해 고객 수가 줄어들지 않았으며, 비즈니스에게는 1,000달러 미만의 금액이 크게 부담되지 않는 것으로 보임.
     * 현재 EmailEngine의 월간 반복 수익(MRR)은 6100유로이며, 에스토니아에서는 이를 통해 자신에게 적절한 급여를 지급하고 프로젝트에 전념할 수 있음.

GN⁺의 의견

     * 이 기사는 오픈소스 프로젝트를 상업적 사업으로 전환하는 과정을 공유하며, 오픈소스 개발자들에게 수익 창출의 가능성을 보여줌.
     * 오픈소스 소프트웨어의 무상 제공이 장기적으로 개발자에게 불리할 수 있음을 강조하며, 상업적 라이선스로의 전환을 통해 안정적인 수익을 얻을 수 있음을 보여줌.
     * 이 기사는 오픈소스 커뮤니티 내에서 CLA의 중요성과 라이선스 선택이 사업 모델에 미치는 영향에 대한 통찰력을 제공함.
     * 라이선스의 종류와 그에 따른 법적, 재정적 영향을 고려해야 하며, 오픈소스 프로젝트를 상업화하는 과정에서 커뮤니티의 반응과 기여도를 예측하는 것이 중요함.
     * 이 방식을 선택함으로써 얻을 수 있는 이점은 안정적인 수익과 전문적인 제품 개발에 집중할 수 있는 환경이지만, 오픈소스 커뮤니티로부터의 지원과 기여를 잃을 수 있다는 단점이 있음.

        Hacker News 의견

     * 이야기의 핵심은 저자가 소프트웨어가 라이선스 없이는 작동을 멈추게 만들었을 때 구독자를 얻기 시작했다는 것임.

     유효한 라이선스 키를 애플리케이션 시작 후 15분 이내에 제공하지 않으면 앱이 작동을 멈춤.
          + 대부분의 사용자에게는 라이선스 변경(MIT/LGPL 등)이 중요하지 않음. 해커뉴스(HN)에서는 이러한 미묘한 차이에 민감하지만, 실제 업무를 처리하려는 기업 직원들에게는 크게 문제되지 않을 것임.
          + 사용자들은 문제 해결을 위해 소프트웨어를 검색하고 설치한 후 작동 여부를 확인하고 일과를 계속함. 그러나 소프트웨어가 15분 후에 작동을 멈추면 그들은 막힌 상태를 해결해야 함.
          + 사용자들이 코드를 읽고 라이선스 검사를 제거할 것이라고 가정할 수 있지만, 일부 사용자는 대신 신용카드로 결제하는 것을 선호함.
     * 오픈소스 소프트웨어에 대한 저자의 경험은, 무료로 제공되는 경우 회사들이 가치를 인식하더라도 거의 결제하지 않는다는 것임. 반면, 연간 1,000 USD와 같은 소액은 대부분의 회사에서 개발자가 많은 서류 작업 없이 구매할 수 있음.
          + 엔터프라이즈 판매 영역으로 들어가면 상황이 훨씬 복잡해지고 판매 주기가 길어짐. 솔로 창업자에게 이러한 가격 정책은 완벽함.
     * Nodemailer를 사용하는 스타트업이 5억 달러에 인수되었을 때 저자는 자신이 얻은 것이 무엇인지 생각하기 시작했다는 내용임.
          + 공유 자원을 개선하기 위해 노력하는 동안 단기 이익을 극대화하기 위해 최적화된 기업들이 있음. 그들은 아무것도 돌려주지 않을 것임.
          + 모든 오픈소스 개발자에게 일어날 수 있는 일이며, 많은 돈을 벌고 있는 기업들을 보며 일부 수익을 받아야 한다고 느끼는 것은 인간적임.
          + FOSS가 세상을 더 나은 곳으로 만들지만, 누군가에게 이것이 실수였다고 생각하게 만들고 대신 FOSS 기관이 사용할 수 없는 프로젝트를 만들어야 한다는 결론을 내리는 것은 안타까움.
          + 최고의 FOSS 소프트웨어를 만들면 모두가 혜택을 받고, 개인이 대기업과 동일한 자원에 접근할 수 있다는 사실에 자부심을 느낄 수 있음.
          + GPLv3 또는 AGPL 라이선스 소프트웨어로 대기업을 겁주는 아이디어에 대해 조심스럽게 찬성함.
     * 라이선스에 대해 궁금해하는 사람들을 위해, 표준 서명이 EC(sect239k1) 키를 사용함을 설명함.
          + 저자는 유효 날짜/라이선스 세부 정보(호스트 이름 등)를 작성하고 서명하여 고객에게 제공할 수 있음.
     * 가격을 올리기 시작했을 때, 고객 수가 줄지 않았다는 점에 놀랐다는 내용임.
          + 비즈니스에게는 1,000달러 미만의 금액이 크게 문제되지 않으므로, 가격 인상은 수익 개선에만 영향을 미침.
     * 오픈소스 개발자들은 사용자와 동일시하지만, 투자 대비 수익(ROI)을 얻는 비즈니스는 소비자와 다름.
     * 무료로 일하는 사람은 없으며, 우리는 돈, 지위, 즐거움을 얻기 위해 일함.
          + 사람들이 돈을 지불하지 않고도 일하게 만드는 한 가지 방법은 광고를 지원하는 소셜 미디어 사이트임. 그들은 사람들에게 즐거움을 주고 광고에 대한 주의를 무료로 얻음.
          + 지위를 얻기 위해 일하는 것에 초점을 맞추면, 박사 학위가 좋은 예임. 박사 학위를 받고 학계에 남으면 산업계에 비해 급여가 매우 낮지만 지위의 약속이 있음.
          + 오픈소스도 마찬가지로, 순수성에 대한 논쟁과 자기 희생에 대한 주장은 사람들이 돈 대신 지위를 얻고 있다는 증거임.
          + 이것은 자체적으로 나쁜 것이 아니며(오픈소스나 학계 모두), 사람들은 자신의 시간을 어떻게 팔지 자유롭게 선택해야 함.
          + 문제는 지위를 위한 작업 구조에서 이익을 얻는 자들(대기업, 대학, 그리고 그들의 리더들)이 이 구조를 유지하기 위해 어두운 패턴을 사용할 유인이 있다는 것임.
     * 제목이 오해의 소지가 있음. 저자는 오픈소스 프로젝트를 소스가 공개된 상업 제품으로 변경함. 제목이 암시하는 것처럼 오픈소스 프로젝트를 둘러싼 사업이 아니라 라이선스 전환임.
     * 저자가 소프트웨어 판매를 더 일찍 시작하지 않고 무료 오픈소스 소프트웨어만 출판한 것에 대한 유일한 후회가 있다는 내용임.
     * 저자가 Nodemailer에 후원을 요청한 적이 있는지 궁금해하는 의견이 있음.
"
"https://news.hada.io/topic?id=13599","내 블로그 글을 리눅스 매뉴얼 페이지로 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내 블로그 글을 리눅스 매뉴얼 페이지로 제공

블로그 게시물을 리눅스 매뉴얼 페이지로 제공하기

     * 리눅스 컴퓨터에는 특정 명령어 사용법을 설명하는 매뉴얼 페이지가 사전 설치되어 있음.
     * man <command>를 터미널에 입력하여 매뉴얼 페이지를 읽을 수 있음.
     * 설치하는 명령줄 소프트웨어도 매뉴얼 페이지를 추가하기도 함.
     * 리눅스 매뉴얼 페이지는 roff 문법을 사용하여 포맷됨.
     * roff는 유닉스용 최초의 조판 명령줄 소프트웨어로 Bell Labs에서 개발됨.
     * 블로그 게시물을 리눅스 매뉴얼 페이지로 제공하는 아이디어를 탐구함.

시스템 구상: 콘텐츠 협상

     * 사용자가 HTTP 콘텐츠 협상을 통해 roff 버전의 블로그 게시물을 요청할 수 있도록 하고자 함.
     * 콘텐츠 협상은 파일 형식을 지정하여 요청할 수 있는 HTTP의 일부임.
     * 서버에 특정 형식의 콘텐츠를 요청할 수 있는 HTTP 헤더를 사용함.
     * Accept 헤더를 보내는 사용자의 요청을 라우팅할 수 있음.
     * text/roff 문서를 요청하면 man 명령으로 열 수 있는 매뉴얼 페이지를 반환할 수 있음.

매뉴얼 페이지 작성

     * 매뉴얼 페이지는 roff 문법을 사용하므로, 블로그 게시물을 해당 형식으로 가지고 있어야 함.
     * 사이트를 업데이트하여 각 블로그 게시물에 대한 man 페이지를 생성함.
     * 매뉴얼 페이지를 생성하기 위해 도메인 이름을 헤더로 설정하고, 제목, 저자, 게시일, 게시물 내용, 게시물 URL의 다섯 섹션을 만듦.
     * 원본 콘텐츠는 마크다운 형식이며, 때로는 매뉴얼에서 공간이 올바르게 표시되지 않을 수 있음.
     * 마크다운은 HTML보다 읽기 쉽고 정보 손실이 적음.

매뉴얼 페이지 요청하기

     * 다음 명령을 사용하여 블로그 게시물의 roff 형식을 요청할 수 있음:
curl -sL -H ""Accept: text/roff"" https://jamesg.blog/2024/02/28/programming-projects/ > post.page && man ./post.page

     * 결과를 리눅스 매뉴얼 페이지로 열 수 있음.
     * 브라우저가 HTML 버전의 페이지를 요청할 때와 달리, curl 명령은 text/roff 버전을 요청함.
     * NGINX 설정에 몇 줄을 추가하여 서버가 text/roff를 요청받았을 때 응답 방식을 변경함.
     * NGINX 설정 파일에 특정 콘텐츠 유형이 식별될 때 플래그를 설정하는 변수를 선언함.
     * 사이트 NGINX 설정에서 roff 페이지가 요청될 때 요청을 다르게 처리하는 코드를 사용함.
     * 이제 이 웹사이트의 블로그 게시물을 리눅스 매뉴얼 페이지로 읽을 수 있음.
     * NGINX에서 콘텐츠 협상을 사용하는 방법과 조판 기술이 얼마나 발전했는지에 대한 탐구임.

GN⁺의 의견

     * 이 기사는 기술 애호가들에게 리눅스 매뉴얼 페이지를 통해 블로그 콘텐츠를 제공하는 독창적인 방법을 소개함으로써 흥미를 끌 수 있음.
     * NGINX를 사용한 콘텐츠 협상의 실제 사례를 제공하여 웹 서버 관리자나 개발자에게 유용한 정보를 제공함.
     * 비판적인 시각에서 볼 때, 마크다운 형식이 매뉴얼 페이지에서 항상 잘 표시되지 않을 수 있으므로, 이를 개선하기 위한 추가 작업이 필요할 수 있음.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 pandoc과 같은 도구가 있으며, 다양한 문서 형식 간 변환을 지원함.
     * 이 기술을 도입할 때는 사용자의 요구 사항과 호환성을 고려해야 함.
     * 이 기술을 선택함으로써 얻을 수 있는 이점은 기존의 웹 콘텐츠를 리눅스 사용자에게 친숙한 방식으로 제공할 수 있다는 점이며, 단점은 추가적인 유지 관리와 호환성 문제가 발생할 수 있다는 점임.
"
"https://news.hada.io/topic?id=13672","SD-Forge-LayerDiffuse - 스테이블 디퓨전 XL을 사용하여 투명 이미지 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         SD-Forge-LayerDiffuse - 스테이블 디퓨전 XL을 사용하여 투명 이미지 생성하기

     * Latent Transparency를 이용하여 배경이 투명한 이미지를 생성하는 SD WebUI용 확장
     * 단순한 배경 제거 방법으로는 불가능한 투명 유리, 반투명 광원 효과 등을 처리 가능
     * 털, 머리카락, 수염, 해골과 같은 디테일한 구조도 표현
     * 이미지 생성 및 기본 레이어 기능은 작동 중이나, 투명 img2img는 아직 미완성(곧 완료 예정)
     * 현재 출시된 모델은 모두 SDXL용임. SD1.5용 모델은 수요가 있을 경우 나중에 제공될 수 있음
"
"https://news.hada.io/topic?id=13576","바르다 캡슐 재진입 - 저지구궤도에서 지구까지 5분 [동영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   바르다 캡슐 재진입 - 저지구궤도에서 지구까지 5분 [동영상]

        Hacker News 의견

     * 현대 기술로 달성할 수 있는 것이 놀랍다. 우주에서 지구 전체를 볼 수 있는 위치에서 유타 사막의 작은 지점까지 단 몇 분 만에 이동할 수 있다. 유튜브의 짧은 영상에서 이 두 장면을 보는 것은 여전히 이상하다. 인간이 카메라 쪽으로 걸어오는 장면은 엄청난 효과를 낸다. 이것은 모든 사람이 공감할 수 있는 것이며, 영상에서 이전에 보여진 모든 장면에 훌륭한 맥락을 제공한다.
     * 이것이 재진입 캡슐에서 고프로로 촬영한 초음속 플라즈마의 모습이다. 진정한 우주 마니아를 위해 27분짜리 편집되지 않은 버전이 있다.
     * 내 친구는 Varda에서 일한다. 그곳에서는 우주 약품을 제조한다. 우주 약품이다!
     * 미국 땅에 우주선을 착륙시킨 최초의 상업 회사라는 것이다. SpaceX는 어떻게 되는 건가? 부스터는 확실히 땅(기술적으로는 착륙대)에 착륙했지만, 아마도 우주선으로 간주되지 않는 것 같다.
     * 앤드류가 여전히 답변을 하고 있는지 모르겠지만, 재진입 계산은 어떻게 작동하는가? 기본적으로 탄도적으로 아래로 떨어지는데, 여러 층을 통과하면서 무엇에도 부딪히지 않도록 어떻게 확신할 수 있는가?
     * 초속 몇 마일의 바람이 이런 모습이다! 열은 마찰로 인한 것이 아니라 가스의 압축으로 인한 것이다.
     * 27분짜리 편집되지 않은 전체 버전이 있다.
     * 이 KSP 설치에 사용된 재진입 입자 효과 버전은 무엇인가?
     * 많은 사람들에게는 명백할 수 있지만 나에게는 그렇지 않은 질문이 있다: 우주는 비어 있어야 하는 것 아닌가? 다른 모듈에서 분리된 직후에 마이크가 소리(=음향)를 어떻게 포착하는가?
     * 그 머랭은 타버렸다! 미친 듯이 하이퍼스페이스에서 평화롭고 조용하게 공중에 떠 있는 것으로 넘어가는 방식이 꽤 멋지다!
"
"https://news.hada.io/topic?id=13574","RecurseChat - 매일 사용을 위한 로컬 AI 대화 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   RecurseChat - 매일 사용을 위한 로컬 AI 대화 앱

     * 로컬 우선, 오프라인 가능: 복잡한 설정 없이 오프라인에서 AI와 대화 가능.
     * 전문 검색: 수천 개의 메시지에 대해 빠른 검색 기능 제공.
     * ChatGPT 히스토리 가져오기: 로컬 AI와의 대화를 이어갈 수 있음.
     * 다중 모델 대화: 하나의 채팅 세션에서 여러 모델과 대화 가능.
     * 멀티모달 입력: LLaVA 모델을 사용하여 이미지와 대화 가능.
     * 보안 및 개인 정보 보호: macOS 앱 샌드박스에 의해 보호되며, 개인적으로 대화 가능.
     * 사용자 정의 가능한 외관 및 AI 캐릭터: 자신만의 GGUF 모델을 사용하여 AI의 개성과 외관을 사용자 정의 가능.

간단하지만 강력한 기능

     * 오프라인에서 AI와 대화: 기술적 지식이 필요 없이 로컬 LLM과 대화 가능.
     * 이미지와의 멀티모달 채팅: 이미지를 포함한 다양한 형태의 대화 지원.
     * ChatGPT 히스토리 가져오기 및 계속하기: 이전 대화를 로컬 AI와 이어갈 수 있음.
     * 빠른 전문 검색: 텍스트 검색을 통해 쉽게 원하는 대화 내용을 찾을 수 있음.
     * 코어 사용자 정의: AI의 개성과 외관을 자유롭게 변경 가능.

GN⁺의 의견

     * RecurseChat은 사용자의 개인 정보 보호를 중시하며, 오프라인에서도 AI와의 대화를 가능하게 하는 앱임. 이는 인터넷 연결이 불안정하거나 개인 정보 보호가 중요한 사용자에게 매우 유용할 수 있음.
     * macOS 앱 샌드박스를 통한 보안은 사용자에게 추가적인 신뢰를 줄 수 있으나, 이 기능이 다른 운영 체제에서도 동일한 수준으로 제공될지는 불확실함.
     * 이미지와의 멀티모달 대화 기능은 사용자에게 더 풍부한 대화 경험을 제공할 수 있으나, 이미지 인식의 정확도와 관련된 기술적 도전이 따를 수 있음.
     * 사용자가 자신의 GGUF 모델을 사용하여 AI의 개성과 외관을 사용자 정의할 수 있다는 점은 개인화된 경험을 제공하는데 큰 장점이 될 수 있음. 그러나 사용자가 이러한 고급 기능을 적절히 활용하기 위해서는 일정 수준의 기술적 이해가 필요할 수 있음.
     * 사용자의 기술 수준과 개인 정보 보호에 대한 요구를 고려해야 하며, 다양한 사용자 환경에서의 호환성과 접근성을 확보하는 것이 중요함.

  Hacker News 의견

     * @ggerganov의 llama.cpp에 대한 놀라운 작업 덕분에 이것이 가능해졌습니다. 이상적인 로컬 AI 앱에서 원하는 기능이 있다면 듣고 싶습니다.
     * Full Text Search. Blazingly fast search over thousands of messages.
     * 자연어 처리가 완전히 발전하여 Ctrl+F를 새롭게 발명했습니다.
     * 수천 개의 메시지를 빠르게 검색하는 기능에 대해, 90년대 검색 기능이 현대적으로 재해석되었다는 의견.
          + 전문 검색 기능에 대한 설명으로, 자연어 처리 기술이 발전하여 기존의 텍스트 검색 기능을 혁신적으로 개선했다는 평가.
     * 로컬 문서, 북마크, 브라우저 기록 등에서 답을 찾아주는 기능이라면 기꺼이 지불할 의향이 있음
     * 훌륭해요! 몇 가지 사항:
          + ChatGPT의 UI가 유용한 이유는 대화 중 어느 부분이든 변경할 수 있고, 그 지점부터 대화를 다시 생성하며 그 이후의 대화는 삭제되는 기능 때문입니다.
          + 피드백 버튼이 크롬으로 포커스를 변경하는 것 외에는 아무런 기능을 하지 않습니다.
          + LLaVA 모델은 텍스트 기반 AI 모델이기 때문에 이미지 생성이 불가능하다고 합니다.
     * 좋은데, ChatbotUI+Ollama 대신 이것을 사용할 이유를 볼 수 없음
          + MacOS 네이티브 앱으로서의 장점과 빠른 가져오기 및 검색 기능 외에는 차별점을 찾기 어렵습니다.
          + ChatbotUI는 크로스 플랫폼, 사용자 정의 가능, 개인 정보 보호, 디버깅 가능 등의 장점이 있습니다.
     * 몇 가지 질문:
          + 이미지 생성에 무엇을 사용하고 있나요? 로컬에서도 가능한가요(예: stable diffusion)? 통합된 프롬프트 생성이 있나요?
          + ChatGPT 기록을 가져올 수 있다고 했는데, 다른 문서도 가져올 수 있나요?
          + 몇 가지 ""에이전트"" 스타일 기능이 있나요? 웹을 검색할 수 있나요? 다른 API를 사용할 수 있나요? 스스로 프롬프트를 생성할 수 있나요?
          + 플러그인 프레임워크가 있나요? ""사용자 정의 가능""이라고 하셨지만, 이는 거의 모든 것을 의미할 수 있습니다.
          + 라이선스는 무엇인가요? 사용자의 사용이 개인적임을 어떻게 보장하나요? 많은 ""로컬"" 앱들이 대량의 데이터를 외부로 전송한다는 것을 우리 모두 알고 있습니다.
     * 몇개의 제안
          + 시스템 폰트(San Francisco)를 UI 옵션으로 추가해주세요. SF Mono도 좋을 것 같습니다.
          + 초보자를 위한 모델 사용에 대한 도움이 필요합니다. 시작하는 방법을 알려주는 소개 화면이 있으면 좋겠습니다.
          + 대부분의 Mac 앱처럼 Command-comma가 설정을 여는 기능이 있으면 좋겠습니다.
          + 웹 링크를 클릭하면 Safari(또는 선호하는 브라우저)가 열리게 하는 것이 좋겠습니다.
     * OpenAI API를 같은 인터페이스에서 사용할 수 있는 옵션을 추가하는 것도 좋을 것 같습니다.
          + 현재 jan.ai를 사용하고 있습니다.
     * 온라인 모델을 앱에 추가할 계획이 있나요? 로컬 모델은 아직 온라인 모델과 비교할 수 없는 수준입니다.
          + 일관된 채팅 인터페이스에서 GPT/Claude/로컬 모델 간 전환할 수 있으면 좋겠습니다.
     * ""로컬 AI와 대화하기""라고 말하는 대신, 로컬 AI와 대화함으로써 우리가 달성할 수 있는 것이 무엇인지 알려주면 더 많이 팔릴 것입니다.
          + 대화가 필요한 것이 아니라 특정 작업을 수행할 필요가 있습니다. 어떤 작업을 할 수 있나요? (저에게 답하지 말고, 랜딩 페이지와 앱 스토어 목록에 넣으세요)
"
"https://news.hada.io/topic?id=13633","기초 원리에서 배우는 학습 이론 [PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        기초 원리에서 배우는 학습 이론 [PDF]
"
"https://news.hada.io/topic?id=13610","'애틀랜타 자석 남자', 자전거 타기로 하나씩 우리의 자동차 타이어를 구하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               '애틀랜타 자석 남자', 자전거 타기로 하나씩 우리의 자동차 타이어를 구하다

Fulton County, 1월 사이버 공격으로 인한 피해 복구 중

     * Fulton County는 1월에 발생한 사이버 공격으로 인한 피해를 여전히 복구하고 있음.
     * 이 공격으로 인해 카운티의 여러 시스템이 영향을 받았으며, 복구 작업이 진행 중임.
     * 카운티 관계자들은 공격의 세부 사항을 공개하지 않았지만, 중요한 서비스에 대한 접근성을 보장하기 위해 노력하고 있음.

GN⁺의 의견

     * Fulton County에서 발생한 사이버 공격은 지방 정부의 디지털 인프라가 얼마나 취약할 수 있는지를 보여줌. 이러한 공격은 시민들의 일상 생활에 직접적인 영향을 미칠 수 있으며, 지방 정부는 이에 대비한 보안 대책을 강화해야 함.
     * 사이버 보안 사고는 예방이 최선이지만, 일단 발생하면 신속한 대응과 투명한 정보 공개가 중요함. Fulton County의 경우 세부 사항을 공개하지 않았지만, 이는 주민들의 불안감을 증가시킬 수 있음.
     * 이와 유사한 사이버 공격에 대비하기 위해, 지방 정부는 정기적인 보안 감사, 직원 교육, 백업 시스템 구축 등을 포함한 종합적인 사이버 보안 전략을 수립해야 함.
     * 사이버 보안 업계에는 다양한 보안 솔루션과 서비스가 존재하며, 지방 정부는 예산과 자원에 맞는 최적의 솔루션을 선택해야 함. 예를 들어, 클라우드 기반의 보안 서비스는 유연성과 확장성을 제공할 수 있음.
     * 사이버 공격으로 인한 피해를 최소화하기 위해서는 사고 발생 시 신속한 복구 계획과 함께, 장기적인 보안 강화 계획이 필요함. 이는 향후 유사한 공격으로부터 보호할 수 있는 기반을 마련할 것임.

        Hacker News 의견

     * 개인이 세상을 더 나은 곳으로 만드는 이야기가 매우 마음에 듦. 문제나 해결책에 대한 일정 수준의 노출을 가진 동기 부여된 개인은 다른 해결책들보다 효율적인 것으로 보임.
          + 예를 들어, 도난당한 자전거를 찾는 데 도움을 주는 지역 단체가 있음.
     * 작가 데이비드 세다리스는 강박적으로 쓰레기를 줍는 것으로 알려짐. 그는 도로변에서 쓰레기를 줍기 위해 하루에 최대 9시간을 걸었다고 함. 그의 마을에서는 그의 이름을 딴 쓰레기 수거 트럭을 명명했고, 그의 커뮤니티 서비스 덕분에 영국 여왕을 만날 기회도 얻음.
     * 애틀랜타는 분기별로 도로 청소를 하는데, 이는 다소 드문 일정으로 보임. 일반적으로 주요 도로나 도심은 주간 또는 월간 기준으로 청소하는 것 같음.
     * 한 사람이 자전거 타이어를 보호하는 데 기여하고 있음. 애틀랜타에 거주하며 자동차와 자전거를 모두 타지만, 평균 이상으로 타이어 펑크가 나지 않음. 아마도 그의 도움 덕분일 것임.
     * 그의 인스타그램(@atlantamagnetman)은 그가 자신의 자석 카트를 여러 차례 개선한 과정을 간략하게 설명하고 있어 흥미로운 팔로우 대상임.
     * 배터리로 작동하는 샵 백을 구입하여 자전거에 싣고 다니며 자갈과 유리 파편을 청소하고 싶은 욕구가 생김.
     * 길거리나 주차장에서 나사나 못을 발견할 때마다 주워 올리고, 그것이 다른 곳에서 타이어에 박히는 것을 막아주는 카르마가 있기를 순진하게 바람.
     * 조지아 주 법무장관이 숲 보호 활동가들에게 상호 원조 행위로 RICO 혐의를 제기한 것은 씁쓸한 아이러니다. 이것이 바로 상호 원조임 - 커뮤니티가 국가의 방치를 해결하기 위해 적극적으로 협력하는 것.
     * 한 달 전, 큰 못(10cm 이상)이 타이어 하나를 뚫어 네 개의 타이어를 모두 교체하는 데 거의 1,000달러를 지출해야 했음. 코스트코 직원은 모든 타이어를 교체해야 한다고 했고, 처음에는 믿지 않았지만 조사 결과 타이어에 마모가 있으면 하나만 교체할 수 없다는 것을 알게 됨. 새 타이어의 홈을 오래된 것과 맞추기 위해 줄이는 방법도 있었지만, 그것은 실수가 발생하기 쉬워 보임.
     * 자전거 앞쪽에 자석 장치를 달아 자신의 타이어가 펑크 나는 것을 두려워하지 않고 금속 파편이 많은 지역으로 용감하게 진입하는 것이 훨씬 낫지 않을까 하는 생각이 듦.
"
"https://news.hada.io/topic?id=13679","기술팀이 자주 간과하는 DevOps 20가지 모범 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     기술팀이 자주 간과하는 DevOps 20가지 모범 사례

     * Forbes Technology Council 멤버들이 꼽은 ‘기술팀이 자주 간과하는 DevOps 모범 사례 20가지’
         1. 외부 변화에 적응하는 일
         2. 기술 부채를 잘 관리하는 일
         3. 변경 사항과 사고를 관리하는 일
         4. 프로세스와 구성을 문서화하는 일
         5. 솔루션에 보안을 통합하는 일
         6. 출시 전 플레이북을 개발하고, 테스트하는 일
         7. 분산 추적 도구를 활용하는 일
         8. 지속적인 모니터링과 피드백을 통합하는 일
         9. 성공과 가치를 공유하는 환경을 구축하는 일
        10. 비난하지 않으며 사후 분석하는 일
        11. 지식 자산을 만들고 유지 관리하는 일
        12. 자동 보안 스캐닝을 실행하는 일
        13. DevOps를 회사 전체에 통합하는 일
        14. 구성 관리
        15. 버전 관리
        16. 시스템을 사전에 모니터링하는 일
        17. 카오스 엔지니어링
        18. 파편화(사일로 관련)를 방지하는 일
        19. 팀 구성을 주기적으로 개편하는 일
        20. DevOps 관행을 따르지 말아야 할 때를 아는 일

    6. 출시 전 플레이북을 개발하고, 테스트하는 일

   출시하기 급해서 이걸 놓치는데, 정신 차리고 만들어 놓으면 참 좋은거 같더라구요
"
"https://news.hada.io/topic?id=13651","GPL 위반에 대한 손해배상 판결을 내린 프랑스 법원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GPL 위반에 대한 손해배상 판결을 내린 프랑스 법원

파리 법원, GPL 위반에 대한 손해 배상 판결

     * 2024년 2월 14일, 파리 항소법원은 프랑스의 주요 통신 제공업체인 Orange가 Entr’Ouvert의 Lasso 소프트웨어 저작권을 침해하고 GPL을 위반했다고 판결함.
     * Orange는 위자료로 50만 유로, 도덕적 손해에 대해 15만 유로를 지불하라는 명령을 받음.
     * 이 사건은 여러 해 동안 계속되어 옴.

Lasso 소프트웨어 및 사용 배경

     * Entr’Ouvert는 SAML(Security Assertion Markup Language) 프로토콜을 위한 참조 라이브러리인 Lasso를 출판함.
     * SAML은 신원 제공자가 사용자를 인증하고 인증 토큰을 온라인 서비스에 전달하는 오픈 표준임.
     * Lasso는 Entr’Ouvert에 의해 GPL 또는 상업 라이선스로 이중 라이선스됨.

Orange의 Lasso 사용과 저작권 문제

     * 2005년, Orange는 프랑스 전자 행정 개발 기관과 계약을 맺고 service-public.fr 포털의 일부를 개발함.
     * Orange는 Lasso 소프트웨어를 사용했지만, GPL에 따라 무료로 수정 권리를 전달하거나 수정된 소스 코드를 공개하지 않음.

법적 과정

     * Entr’Ouvert는 2010년 Orange를 고소함.
     * 2021년 3월 19일, 항소법원은 저작권 침해 주장을 기각하고 계약 위반 주장으로 판단함.
     * 프랑스 최고 법원인 Court of Cassation은 2022년 10월 5일 항소법원의 결정을 뒤집고 사건을 다시 항소법원으로 돌려보냄.
     * 항소법원은 이번 주에 손해 배상 명령을 내림.

손해 배상의 근거

     * 위자료는 원고의 손실된 이익과 Orange의 이익 반환에 기반함.
     * 도덕적 손해는 명성 손상이나 기타 비금전적 손해에 대한 보상임.

GN⁺의 의견

     * 이 사건은 오픈소스 라이선스 준수의 중요성을 강조함. 오픈소스 소프트웨어를 사용할 때 라이선스 조건을 철저히 이해하고 준수해야 함을 보여줌.
     * GPL과 같은 라이선스는 소스 코드 공개와 수정 사항의 공유를 요구함. 이러한 조건을 무시할 경우 법적 책임을 질 수 있음을 상기시킴.
     * 이 기사는 소프트웨어 개발자와 기업에게 라이선스 위반에 대한 경각심을 불러일으키며, 법적 분쟁을 피하기 위해 라이선스 관리에 더욱 주의를 기울일 필요가 있음을 알림.
     * 오픈소스 라이선스 관리 도구와 서비스가 존재하며, 이러한 도구를 사용하여 라이선스 위반을 방지하고 준수 상태를 관리할 수 있음. 예를 들어, Black Duck, WhiteSource와 같은 솔루션이 있음.
     * 이 기사는 오픈소스 커뮤니티 내에서의 법적 분쟁이 어떻게 해결되는지에 대한 이해를 돕고, 오픈소스 소프트웨어의 지적 재산권을 보호하는 데 기여함.

        Hacker News 의견

     *

     Entr’Ouvert가 2010년에 Orange를 고소함
          + 14년이나 걸린 간단한 문제의 해결에 대한 의문 제기
          + 법원의 효율성에 대한 신뢰 문제 제기
     * 상업적 라이선스로도 제공되던 라이브러리
          + 피해 증명과 손해 배상 책정에 용이함
          + 상업적 라이선스가 없는 순수 GPL 라이브러리에 대한 손해 배상 판결과 LGPL 준수 기업의 무죄 판결이 필요함
     * 승소를 암시하는 제목에 대한 의문
          + 820,000달러의 배상금이 억제력이 없으며, 원고에게는 시간 소모, 산만함, 그리고 복잡성으로 인한 높은 법률 비용 발생
     * 원천 자료: Orange는 Entr’Ouvert에게 860,000유로(약 934,000달러)와 변호사 비용을 지불해야 함
     * Orange가 GPL을 준수하지 않고 Lasso 소프트웨어를 사용함
          + Orange가 수정된 코드를 공개했는지에 대한 정보 부족
     * 개인 프로젝트의 코드를 MIT에서 GPL로 변경함
          + 라이선스 위반 시 예상되는 결과에 만족함
     * AI를 이용한 해커뉴스 댓글 요약의 장점
          + 댓글의 특성 분석(예: 80% 까다로움, 10% 실제 주제 토론 등)
     * 프랑스 최고 법원인 대법원이 항소심 판결을 뒤집고 사건을 항소심으로 돌려보냄
          + 하급 법원이 지시에 따라 행동하는 데 오랜 시간이 걸린 것에 대한 의문
     * ""Lasso is a free software C library [...]""라는 문장에 대한 비판
          + ""free software""라는 용어의 혼란을 초래하며, ""GPL"", ""libre"" 등 다른 용어 사용 권장
     * 라이선스 선택의 중요성 강조
          + 라이선스 선택이 소프트웨어 사용자를 구분하고, 나쁜 행위자에 대한 소송 가능성에 영향을 미침
"
"https://news.hada.io/topic?id=13570","나이가 들수록 시간이 더 빨리 흐르는 것처럼 느껴지는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    나이가 들수록 시간이 더 빨리 흐르는 것처럼 느껴지는 이유

     * 나이가 들면서 1년이 어릴 적이나 십대 때보다 훨씬 짧게 느껴짐
     * 이는 진화가 우리의 뇌를 효율적인 저장 장치로 만들어낸 부작용일 수 있음
     * 뇌는 예측 장치로, 생존과 번식의 우위를 위해 세계 모델을 구축함
     * 현상을 예측할 수 있다는 것은 그것을 통제하고 권력을 가질 수 있다는 것을 의미하므로, 뇌는 미래의 사건들을 예측하는 데 집착함
     * 뇌는 또한 효율적이기 때문에, 이미 경험한 사건에 대해서는 주의를 기울이거나 기억에 저장할 필요가 없음
     * 어린 시절에는 모든 것이 새롭고 놀라워서 뇌가 기억을 대대적으로 업데이트함
     * 새롭고 놀라운 정보가 매일 쏟아져 들어오므로 뇌는 많은 주의를 기울이고, 그래서 하루가 길게 느껴짐
     * 나이가 들면서 새로운 놀라움은 오래된 기억에 불과한 작은 부분이 됨
     * 즉, 나이가 들수록 우리의 기억과 주의는 이전의 고해상도 버전에서 저해상도 버전으로 변함
     * 생활의 패턴이 반복됨에 따라, 인지하고 기억하는 시간의 조각들이 줄어들고 거칠어짐
     * 시간이 어디로 갔는지 물으면, 대부분의 기억이 어린 시절과 관련되어 있고 최근에는 매우 적음을 발견함
     * 시간이 빨리 지나가는 주범은 예측 가능성임
     * 안정적인 직업을 가진 경우, 1년을 정신적으로 여행해도 매일 비슷함을 발견할 수 있음
     * 예측 가능성은 현재의 시간 인식뿐만 아니라 미래에 대한 인식에도 영향을 미침
     * 어린 시절의 휴가는 놀라운 정보로 가득 차서 실제로 풍부하고 길게 느껴짐
     * 시간을 늦추기 위해서는 예측 가능성을 깨고 적극적으로 놀라움을 계획해야 함
     * 불행히도, 나이가 들면서 탐험과 위험을 피하려는 진화적 경향이 있음
     * 인생을 어떻게 살았는지에 대한 답은 긴 인생이냐, 길게 느껴지는 인생이냐에 달려 있음
     * 시간을 늦추는 해결책은 지루함이 아니라 미지의 영역으로 뛰어드는 것임
     * 우리는 패턴을 이해하고 예측 모델을 만드는 데 매우 능숙함
     * 존재의 위기는 인생에 대한 스포일러 경고임
     * 예측할 수 없는 완전히 다른 삶은 뇌를 계속 긴장시킬 것임
     * 변화가 클수록 시간은 더 기억에 남음

GN⁺의 의견

     * 이 기사는 나이가 들면서 시간이 빨리 지나가는 것처럼 느껴지는 현상에 대한 심리학적 설명을 제공함으로써, 인간의 인지 과정에 대한 흥미로운 통찰을 제공한다.
     * 이러한 현상을 이해함으로써, 개인은 일상에서 새로운 경험과 변화를 추구함으로써 삶을 더 풍부하고 기억에 남게 만들 수 있는 방법을 모색할 수 있다.
     * 비판적으로 볼 때, 이러한 접근 방식은 모든 사람에게 적용되지 않을 수 있으며, 안정성과 예측 가능성을 선호하는 사람들에게는 부담이 될 수 있다.
     * 유사한 주제에 대해 관심이 있다면, ""플로우"" 상태와 시간 인식에 관한 미하이 칙센트미하이의 연구를 추천한다.
     * 개인의 성향과 생활 방식을 고려해야 하며, 갑작스러운 변화보다는 점진적인 변화를 추구하는 것이 더 현실적일 수 있다.
     * 이를 통해 얻게 되는 것은 삶의 질 향상과 새로운 경험의 가치이며, 잠재적인 단점은 불안정성과 예측 불가능한 결과에 대한 두려움일 수 있다.

   요약과 댓글을 요약하면 ""새로운걸 해야 시간이 늦게 간다""군요. 시간이 빨리 가고 싶을 때는 루틴한걸 하기로 ㅎㅎ,,

   과학적이고 디테일하게 서럽네요…

   오래된 책이 떠오르네요… https://m.yes24.com/Goods/Detail/1782156

   이걸 피하기 위해 매일 새로운 걸 했더니… 거기에 뇌가 익숙해지더라… 그냥 받아들이는 수 밖에…

   이거 예전부터 늘 궁금했었는데, 재밌는 사실이네요

   같은게 반복되면 빨리 지나간다는 얘기를 하더라고요.
   그래서 언제부턴가 매년 새로운 것을 하나 이상 배우는 것을 목표로 하고 있습니다.
   보드게임, 피아노, 미니어처 도색, 골프, 3D 프린팅 이었고, 올해는 스페인어와 자전거를 타보려고 합니다.

        Hacker News 의견

     * 10년 이상의 일기 작성 경험
          + 일기를 통해 과거를 돌아보며 삶이 풍부하고 길게 느껴짐.
          + 아내와의 불안정했던 연애 시절, 쌍둥이 자녀의 임신 기록 등을 회상하며 감사함을 느낌.
          + 박사 과정의 불안감 등 과거의 다양한 감정을 되돌아볼 수 있음.
          + 과거를 돌아보며 삶이 짧지 않다는 인식을 갖고, 앞으로 많은 변화를 경험할 수 있음을 깨달음.
          + 컴퓨터를 사용하는 습관을 활용해 일기 작성의 장벽을 낮추고, Bash 스크립트를 이용해 일기를 꾸준히 기록함.
          + 매일 1년, 5년, 10년 전의 일기를 되돌아보며 과거를 재경험함.
     * 시간의 빠른 흐름과 습관의 효과
          + 매일 반복하는 습관은 시간이 빠르게 흐르는 것처럼 빠른 성과를 느끼게 함.
          + 팬데믹 기간 동안 자전거 타기를 시작하여 3년 후 강한 다리 근육과 10,000마일의 경험을 쌓음.
     * 나이에 따른 시간 인식의 변화 연구
          + 나이가 들면서 시간 인식이 변하는 것에 대한 연구가 존재함.
          + 정보 처리 속도(예: 반응 시간)가 느려지면서 시간이 빨리 흐르는 것처럼 느껴짐.
     * 시간의 상대성과 새로운 경험의 중요성
          + 대학 시절 새로운 경험들로 가득 차 시간이 길게 느껴짐.
          + 일상적인 삶을 벗어나 여행하며 살면서 시간이 느리게 흐르는 것을 경험함.
          + 새로운 환경이 뇌를 더 유연하게 만들고 자동화된 삶에서 벗어나게 함.
     * 명상과 감사의 태도
          + 주변 세계를 인식하고 감사하는 시간을 갖으면 시간이 느리게 흐르는 것처럼 느껴짐.
          + 새로운 기억을 만들 때마다 시간이 더 길게 느껴짐.
     * 삶의 단위 시간과 지루함
          + 삶의 단위 시간이 나이에 따라 상대적으로 짧아짐.
          + 새로운 나라로 이사한 기억이 최근 몇 년보다 더 길게 느껴짐.
     * 시간 인식의 상대성
          + 어릴 때 시간이 느리게 흐르는 것은 삶의 전체 시간에 대한 상대적 인식 때문임.
          + 나이가 들면서 시간의 흐름이 빨라지는 것은 삶의 전체 대비 시간 단위가 작아지기 때문임.
     * 새로운 경험과 일상 사이의 균형
          + 새로운 자극이 있을 때 시간이 느리게 흐르는 것을 느낌.
          + 해외 생활, 새로운 도시로의 이사, 새로운 관계 등이 시간 인식을 느리게 함.
     * 시간의 상대적 가치
          + 나이가 들면서 1년의 가치가 상대적으로 줄어듦.
     * 기억 축적과 시간 인식의 관계
          + 기억을 많이 축적할수록 시간이 느리게 흐르는 것처럼 느껴짐.
          + 어릴 때는 새로운 것을 배우며 기억을 많이 축적하지만, 나이가 들면서 기억력이 떨어지고 시간이 빨리 흐르는 것처럼 느껴짐.
"
"https://news.hada.io/topic?id=13598","HN에 묻다: 오늘 윤년 버그를 경험하셨나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HN에 묻다: 오늘 윤년 버그를 경험하셨나요?

결제 시스템 버그 수정 완료

     * 오늘 아침 긴급하게 진행된 작업 끝에, 월간 구독자에게 잘못하여 추가 일자에 대한 요금을 부과하는 버그를 결제 팀이 수정함.
     * 모든 테스트 스위트가 현재 통과되었으며, QA가 2028년에 수정 사항을 확인한 후 SRE가 사후 분석을 예정함.

GN⁺의 의견

     * 이번 버그 수정 사례는 소프트웨어 개발에서 QA(Quality Assurance)의 중요성을 강조함. QA 프로세스를 통해 발견되지 않은 버그가 실제 운영 환경에서 문제를 일으킬 수 있으며, 이는 고객 만족도에 직접적인 영향을 미침.
     * 사후 분석(postmortem) 절차는 시스템 장애나 버그 발생 후 원인 분석과 재발 방지를 위한 중요한 과정임. 이를 통해 팀은 문제 해결 능력을 향상시키고, 비슷한 문제가 다시 발생하지 않도록 예방책을 마련할 수 있음.
     * 비슷한 기능을 제공하는 다른 결제 시스템으로는 Stripe, PayPal 등이 있으며, 이들은 각각의 보안 및 안정성 기능을 갖추고 있음. 사용 전 각 서비스의 특징과 비용을 비교해보는 것이 좋음.
     * 기술 도입 시 고려해야 할 사항으로는 시스템의 안정성, 사용자 경험, 비용 효율성 등이 있음. 또한, 장애 발생 시 신속한 대응과 투명한 커뮤니케이션도 중요함.
     * 이 기술을 선택함으로써 얻을 수 있는 이점은 고객의 신뢰 회복과 시스템의 안정성 향상이지만, 반면에 긴급한 버그 수정으로 인한 작업 중단과 같은 단기적인 비용이 발생할 수 있음.

        Hacker News 의견

     * 중국에서 친구가 들은 이야기: 결혼 증명서 예약 앱에서 나이 계산 부분에 버그가 있어서 법적 최소 연령인 22세를 연도에서 빼는 계산을 했을 때 존재하지 않는 2002년 2월 29일이 결과로 나왔음. 앱은 이 날짜를 사용자의 생년월일과 비교하려 했으나, 모든 오류를 비교에서 발생한 것으로 가정하는 오류 처리 코드 때문에 사용자들이 결혼하기에 너무 어리다며 모든 결혼 증명서 예약을 거절함.
     * ChatGPT API를 사용하는 제품이 있으며, 3.5 터보 버전을 사용함. 쿼리에 일부 날짜가 포함되어 있는데, 보통 텍스트를 반환하는 대신 오늘은 2024년 2월 29일이 유효하지 않은 날짜라고 생각하여 오류를 반환함. 웹 인터페이스를 통해 때때로 쉽게 재현할 수 있으며, 처음에는 유효하지 않은 날짜라고 말한 후 설명하는 과정에서 실수를 깨닫고 가끔 스스로 정정함.
     * Cloudflare에서 오늘 청구서를 보냈는데, 첨부된 PDF 파일 이름이 cloudflare-invoice-1970-01-01.pdf로 되어 있었음.
     * 스웨덴의 ICA 스토어에서 목요일 아침에 카드 결제를 받을 수 없었음. 대신 현금, Swish 또는 앱을 통해 결제해야 했음. 문제의 원인은 2월의 추가 날짜, 즉 윤일로 인한 ICA 결제 시스템 내부 문제였음. ICA는 스웨덴에서 가장 큰 식료품점 체인임.
     * 일부 소프트웨어가 날짜별로 데이터를 회전 디렉토리에 기록하는데, 테스트 시스템에서 수동 디버깅을 하던 중 2월 29일 UTC에 처음으로 디렉토리를 생성할 때 실패함. 디스크 공간이 부족해서 그런 것으로 밝혀졌지만, 한 시간 이상 윤년 버그로 확신함.
     * 샌프란시스코의 일일 날씨 기록을 Mastodon에 게시하는 봇이 있음. 오늘 예정대로 게시하지 않았음. 1875년부터 현재까지의 오늘 날짜에 대한 최고 기온, 최저 기온, 강수량을 살펴보는데, 1875년 2월 29일이라는 날짜가 없어서 오류가 발생함.
     * 반대로! 윤년이 아닌 해에는 생일을 축하해주지 않는 몇몇 서비스들이 오늘 축하해줌. 2월 29일에 태어남.
     * 구체적인 예로, Theatrhythm Final Bar Line이라는 리듬 기반 파이널 판타지 게임이 윤일에 대처하는 방법을 처리하지 않아서 오늘은 사람들이 게임을 할 수 없게 함. 게임을 시작할 수는 있지만 실제로는 플레이할 수 없음.
     * Rails 6 앱이 있고, time_ago_in_words(1.year.from_now)가 ""약 1년""을 반환하기를 기대하는 테스트가 있음. 테스트가 실패했고, 흔들리는 테스트라고 생각했지만 로컬에서 재현할 수 있었음. 윤일에 해당 코드를 실행하면 ""거의 1년""을 반환하기 때문임. Rails 콘솔에서 테스트할 수 있음.
     * 뉴질랜드의 몇몇 주유소에서 결제 소프트웨어의 ""윤년 글리치""로 인해 목요일에 주유 펌프가 작동하지 않았음. 주유소와 결제 서비스 제공업체가 이를 확인함.
"
"https://news.hada.io/topic?id=13650","Apple, M3 칩을 탑재한 MacBook Air 13 및 15 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Apple, M3 칩을 탑재한 MacBook Air 13 및 15 공개

     * M3 8코어 CPU, 최대 10코어 GPU, 최대 24GB 통합 메모리, 16코어 뉴럴엔진
     * 최대 2대의 외장 디스플레이 지원(기존 1대에 클램쉘모드시 60HZ, 5K 외장을 1대 더 사용 가능)
     * Wi-Fi 6E로 2배 향상된 Wi-Fi 속도
     * 스타라이트, 스페이스 그레이, 실버, 미드나이트의 4가지 색상
     * 2개의 Thunderbolt 포트, 3.5mm 헤드폰 잭
     * 매직 키패드와 Touch ID
     * 13인치(2560x1664) 1.24kg, 30.41 x 21.5 x 1.13cm
     * 15인치(2880x1864) 1.51kg, 34.04 x 23.76 x 1.15cm
     * 최대 18시간 배터리

   크램쉘 모드에서 외장 듀얼 모니터 지원이... 이제서야 되는군요. ㅎㅎ

   램 36 버전이 있었으면 좋았을텐데요

   그 정도 메모리는 아마도 맥북프로를 사라고 할듯 하네요. 애플이 그렇죠 ㅎ

  Hacker News 의견

     * 한 사용자는 자매를 위해 Dell 노트북을 구매하는 과정에서 다른 회사들이 소비자 노트북에 수십 개 또는 수백 개의 SKU를 제공하는 것에 대해 놀랐음을 표현함. 이 사용자는 Dell과 Lenovo, HP 등의 다양한 라인업을 살펴보며 ""중급 성능에 쓸만한 화면을 가진 컴퓨터""를 찾는 과정이 즐겁지 않았다고 함. 노트북에 대해 잘 모르는 사람이라면, 대부분의 비애플 노트북에 있는 무작위로 보이는 숫자들을 이해하는 것이 악몽 같을 것이라고 언급함. 반면, 애플은 노트북 명명 체계를 단순화하는 데 계속해서 성공하고 있으며, 현재는 ""에어 또는 프로"", ""작은 화면 또는 큰 화면""으로 구분하고, 구매 과정에서 다른 세부 사항을 설정할 수 있지만, 단순한 노트북을 원한다면 크게 고민할 것이 없다고 함.
     * 다른 사용자는 애플이 지원하는 외부 디스플레이 수를 기능으로 제한하는 전략에 대해 실망감을 표현함. 해당 사용자는 기본 M3 프로세서를 탑재한 14인치 맥북 프로가 단 하나의 디스플레이만 지원하기 때문에 반품하고, 필요하지 않은 추가 성능에도 불구하고 M3 프로 모델을 더 비싼 가격에 구매해야 했다고 함. 이제 기본 M3 에어 모델이 2개의 디스플레이를 지원한다는 사실이 놀랍다고 언급함.
     * 또 다른 사용자는 애플이 노트북 시장에서 어느 정도 ""승리""했다고 생각하는 것이 놀랍다고 말함. 13인치 M2 에어가 999달러인 것은 미친 일이며, 더 무겁고 느리며 발열이 심한 윈도우 노트북에 1500달러나 2000달러를 쉽게 지불할 수 있다고 함.
     * 한 사용자는 재미있는 사실을 공유하며, M3 에어의 무게가 실제로 상온에서 1m³의 공기 무게와 정확히 같다고 함. 15°C에서 1기압의 1m³ 공기는 1.23kg이며, 이는 M3 에어의 무게와 동일하다고 함.
     * 다른 사용자는 13인치 에어를 좋아하고 싶었지만, 내부 스피커의 품질이 프로 모델에 비해 현저히 떨어지고, 기본 해상도가 애플의 대부분의 데스크탑/노트북 디스플레이와 같은 0.5배가 아닌 이상한 중간 해상도로 설정되어 있어서 텍스트에 앨리어싱이 발생한다는 이유로 몇 주 사용 후 프로로 전환했다고 함. 진정한 0.5배 해상도로 설정하면 1280x800 정도가 되어 현재의 데스크탑 브라우징에는 거의 사용할 수 없다고 언급함.
     * 또 다른 사용자는 새로운 M1 Max 맥북 프로와 새로운 M3 Max 맥북 프로 사이의 차이를 전혀 느낄 수 없다고 말함. 기업들이 인간 심리를 이용하는 데 능숙해졌으며, 광고는 가장 작은 개선 사항이라도 이전 컴퓨터를 쓸모없게 만들 것처럼 믿게 만들 수 있다고 함. 그래서 가능한 한 광고를 피하는 것이 최선이라고 조언함.
     * 한 사용자는 맥OS 업데이트를 통해 M3 맥북 프로가 덮개를 닫았을 때 2개의 디스플레이를 지원하게 될 것이라고 정보를 공유함.
     * 다른 사용자는 새로운 맥북 에어를 구매하는 것이 메모리를 24GB에서 32GB로 늘릴 때만 의미가 있다고 생각하며, 여전히 맥북 에어가 최고의 노트북이라고 믿음을 표현함.
     * 한 사용자는 13인치 에어 M3 모델과 14인치 MBP M3 프로 모델을 비교하며, 600파운드의 추가 비용이 평균적인 개발 사용에 가치가 있는지 확신할 수 없다고 함. 주요 차이점으로는 더 나은 화면, 스피커, 팬, 추가 12GB 램을 꼽았지만, 이러한 차이점들을 600파운드로 평가하는 것에 대해 확신이 서지 않는다고 언급
     * 가장 흥미로운 변화로, 노트북 뚜껑을 닫았을 때 M3 맥북 에어가 이제 두 개의 외부 디스플레이를 지원하게 된다는 점을 언급

   15°C에서 1기압의 1m³ 공기는 1.23kg 이게 재미나네요. 그래서 애초에 이름이 맥북 에어 인 것 인가

   이번 세대 모델들은 이벤트 없이 발표할것 같다더니 맥북에어만 먼저 나왔네요.
   아이패드 미니 새 버전이 나오길 기대하고 있는데 말이죠 ㅎㅎ
"
"https://news.hada.io/topic?id=13590","아이들의 놀이에 필요한 위험, 두려움, 그리고 흥분","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      아이들의 놀이에 필요한 위험, 두려움, 그리고 흥분

어린이에게 위험, 두려움, 그리고 놀이에서의 흥분이 필요한 이유

     * 어린이들은 위험한 놀이를 통해 신체적, 인지적 기술을 발달시키고, 두려움을 극복하며, 독립적으로 어려운 상황을 대처하는 법을 배움.
     * 위험한 놀이는 아이들이 이전에 도전하지 않았던 일을 시도하게 하고, 결과가 불확실한 상황에서 스릴과 두려움을 동시에 경험하게 함.
     * 캐나다 소아과 학회는 위험한 놀이의 중요성을 인식하고, 아동의 삶에서 이를 지지하는 성명을 발표함.

위험한 놀이가 어린이들의 삶에서 사라지는 이유

     * 1980년대부터 시작된 집중적인 양육 방식은 부모들이 아이들의 삶을 미세하게 관리하고, 모든 장애물을 제거하며, 다양한 구조화된 활동에 등록시키는 것을 장려함.
     * 이러한 양육 방식은 북미에서 널리 받아들여지고 있으며, 연구에 따르면 구조화된 활동 등록은 발달 결과와 관련이 없으며, 자유 시간의 상실은 기본적인 집행 기능 기술의 발달에 해로울 수 있음.
     * 부모들은 아이들을 항상 안전하게 지키는 것이 '좋은 부모'가 되는 길이라는 메시지를 지속적으로 받고 있음.

위험한 놀이와 어린이의 자유를 되찾기 위한 세 가지 요소

     * 시간: 매일 야외 놀이 시간을 우선순위로 삼고, 학교에서도 야외 수업과 쉬는 시간을 중요하게 여겨야 함.
     * 공간: 아이들이 상상력을 사용하고 위험을 탐색할 수 있는 유연한 놀이 공간이 필요함.
     * 자유: 아이들이 원하는 대로 놀 수 있는 자유가 필요하며, 이를 위해 부모들은 자신의 두려움을 관리해야 함.

GN⁺의 의견

     * 위험한 놀이의 중요성에 대한 연구는 어린이의 신체적, 정서적, 인지적 발달에 대한 새로운 시각을 제공함. 이는 현대 사회에서 과잉보호와 안전에 대한 집착이 어린이들의 자연스러운 성장 과정을 방해할 수 있음을 시사함.
     * 위험한 놀이가 감소하는 현상은 디지털 시대의 아이들이 스크린 시간에 더 많은 시간을 할애하고 있음을 반영함. 이는 아이들의 신체 활동 감소와 관련된 문제들을 야기할 수 있음.
     * 이 기사는 부모와 교육자들에게 아이들에게 더 많은 자유와 독립성을 허용하는 것의 중요성을 상기시키며, 이는 아이들이 스스로 문제를 해결하고 위험을 관리하는 능력을 키우는 데 도움이 됨.
     * 비판적으로 볼 때, 위험한 놀이를 장려하는 것은 부모의 두려움과 사회적 압력을 극복하는 데 어려움을 줄 수 있으며, 이는 실제로 아이들에게 적절한 수준의 위험을 제공하는 것과 균형을 맞추는 데 도전이 될 수 있음.
     * 유사한 개념으로, 스칸디나비아 국가들의 숲 유치원이나 자연 학습 프로그램은 아이들이 자연 환경에서 놀면서 배우는 것을 장려함. 이러한 프로그램들은 아이들에게 위험을 경험하고 자연과 상호 작용하는 기회를 제공함으로써 독립성과 자기 조절 능력을 키울 수 있는 환경을 제공함.

        Hacker News 의견

     * 놀이터의 변화에 대한 회상
          + 과거에는 두 층 높이의 철제 원숭이 놀이기구가 있었으며, 안전을 위해 고무 조각을 깔았음.
          + 몇 년 후에는 한 층으로 줄어들었고, 결국에는 전체가 제거됨.
          + 위험한 상황에서의 즐거움과 드물게 발생하는 부상에 대한 기억.
          + 현재 그 자리에 무엇이 있는지 모르지만, 아마도 부모에 대한 비판적인 메시지가 있을 것임.
     * 자녀 양육에서의 위험 회피에 대한 의견
          + 자녀가 적은 가정일수록 위험 회피 경향이 있음.
          + 여러 자녀가 있는 경우, 부모는 첫째 자녀에게 더 많은 위험을 감수하게 함.
          + 사회의 평균 연령과 전쟁의 성향이 비례한다는 이론을 언급하며, 이와 유사하게 출산율과 자녀의 위험 수용도가 관련이 있을 것임.
     * 승마 활동의 변화에 대한 관찰
          + 현재 승마는 주로 성인이나 노인이 즐기는 활동이 됨.
          + 과거에는 어린이들이 무리지어 무감독으로 승마를 즐겼으나, 이제는 드물어짐.
          + 승마를 배우는 어린이들은 항상 성인의 감독을 받으며, 부모가 지켜보는 경우가 많음.
          + 말을 다루는 어린이들은 일반적으로 괴롭힘 문제가 적음.
     * 어린이의 안전과 위험에 대한 부모의 고민
          + 어린이의 안전을 위한 부모의 지속적인 위험 평가는 필요하지만 피로를 유발함.
          + 대부분의 공공 장소가 성인을 위한 공간으로, 어린이는 성인 수준의 위험에 노출됨.
     * 어린이 안전에 대한 통계와 부모의 두려움
          + 현재가 어린이에게 가장 안전한 시기임에도 불구하고, 부모들은 여전히 위험을 과대평가함.
          + 부모의 위험 회피는 어린이의 안전 향상에 기여했지만, 이로 인해 과거의 양육 방식으로 돌아가야 한다는 주장은 약함.
     * 사회의 소송 문화와 안전 규정
          + 사회가 점점 더 소송에 민감해지면서, 안전 규정이 강화됨.
     * 어린이의 자립심 향상을 위한 비밀 감시
          + 과거에는 어린이가 혼자 상점에 가도록 하면서, 비밀리에 따라가 안전을 확보함.
          + 현재 일부 지역에서는 이러한 행위가 불법일 수 있음.
     * 과도한 안전 조치와 정신 건강 문제
          + 과도한 안전 조치가 어린이의 정신 건강에 부정적인 영향을 미칠 수 있음.
     * 자율주행 차량과 어린이의 안전
          + 완전 자율주행 차량(SAE Level 5)이 어린이의 안전한 이동을 가능하게 하여, 양육 방식을 과거로 되돌릴 것임.
     * 어린이의 자기 학습과 위험
          + 어린이가 스스로 학습하도록 하는 가족의 태도를 관찰함.
          + 위험한 상황에서도 어린이가 경험을 통해 배울 수 있도록 하지만, 때로는 너무 위험할 수 있음.
          + 어린이가 위험을 인식하고 배우는 것에 인상을 받았으며, 자신의 양육 방식에도 반영하고자 함.
"
"https://news.hada.io/topic?id=13618","노령수와 신생수가 만드는 목재 제품 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         노령수와 신생수가 만드는 목재 제품 비교

새로운 성장 나무 대 오래된 성장 나무와 그들이 만드는 목재 제품

     * 오래된 성장 나무로 만든 역사적인 창문은 100년이 지나도 여전히 잘 작동함.
     * 새로운 성장 나무로 만든 창문은 20년 후에 썩기 시작함.
     * ""처녀목""은 처음 벌채된 나무를 의미하며, 미국의 서부 확장과 함께 처녀림에서 벌채됨.

오래된 성장 나무와 새로운 성장 나무의 차이

     * 오래된 성장 나무는 느린 성장으로 인해 성장 고리가 매우 조밀하고 안정성이 뛰어남.
     * 새로운 성장 나무는 빠르게 자라며, 심재보다는 수액이 많아 쉽게 썩음.
     * 1918년의 나무는 인치당 20-25개의 성장 고리를 가지고 있으나, 2018년의 나무는 인치당 7개뿐임.

새로운 성장 나무의 영향

     * 1970년대부터 목재 제조업체들은 나무의 결점을 보완하기 위해 핑거 조인트 목재 사용을 시작함.
     * 핑거 조인트는 결점을 제거하고 나무 조각들을 다시 연결하는 방식임.
     * 오래된 성장 나무는 결점이 거의 없지만, 식물원에서 자란 나무는 결점이 많음.

오래된 성장 목재의 가치

     * 오래된 창문은 구조적으로 우수하며, 적절한 관리를 통해 다시 100년 동안 사용할 수 있음.
     * 오래된 성장 나무로 만든 창문은 복원하는 것이 교체하는 것보다 낫다는 것이 입증됨.

GN⁺의 의견

     * 이 기사는 역사적인 창문과 목재의 품질에 대한 중요성을 강조함으로써, 지속 가능한 건축과 복원의 가치를 일깨워줌.
     * 오래된 성장 나무의 장점을 이해함으로써, 건축가와 개발자들은 재료 선택에 더 신중을 기할 수 있음.
     * 현대의 건축 자재가 직면한 문제점을 비판적으로 바라보며, 과거의 건축 방식에서 배울 점을 찾도록 독려함.
     * 이 기술을 도입할 때는 재료의 출처와 성장 조건을 면밀히 검토해야 하며, 장기적인 내구성과 환경 영향을 고려해야 함.
     * 오래된 성장 나무를 사용함으로써 얻는 이점은 명백하지만, 이러한 자원은 한정되어 있으므로 보존과 책임 있는 사용이 중요함.

        Hacker News 의견

     *

     1970년대부터 목재 제조업체들은 나무의 질이 떨어지는 것을 보완하기 위해 손가락 모양으로 이어 붙인 목재를 사용하기 시작했다. 새로 자란 나무는 종종 휘거나 꼬이고 매듭이 많아, 결함이 있는 부분을 잘라내고 손가락 모양의 접합부로 다시 연결했다. 이러한 목재는 문, 창문, 몰딩, 프레임 목재에 필수적이다. 오래된 나무는 대체로 매듭이 없지만, 식물원에서 자란 나무는 매듭으로 가득하다.
          + 손가락 접합 목재 사용은 새로 자란 나무의 품질이 떨어지기 때문에 필요함.
     *

     일반적인 건축 작업에는 최고급 목재가 필요하지 않다. 기본적인 건축에는 단단하고 매듭이 없는 목재보다는 기능적이고 유용한 수명 동안 견딜 수 있는 목재가 필요하다. 이런 목재는 창문이나 날씨에 노출된 지역에 사용되지 않고, 집 안의 건조한 곳에 보호받으며 사용된다. 여러 개의 판자를 결합하여 하나의 안정된 판자를 만드는 것은 값싼 새로 자란 목재에만 국한된 기술이 아니며, 비싼 목재에서도 사용되어 단일 판자로는 쉽게 달성할 수 없는 더 나은 특성을 가진 하이브리드 판자를 생산한다. 현대의 접착제는 목재 자체보다 강할 수 있으므로 접합부의 존재가 사람들을 두렵게 해서는 안 된다.
          + 기본 건축에는 고급 목재가 필요하지 않으며, 현대 접착제는 목재보다 강할 수 있음.
     *

     오래된 나무에서 나온 목재가 더 단단하고 내구성이 있는 것은 오래된 나무들이 성숙한 숲에서 다른 나무들의 그늘에서 더 천천히 자라서 더 조밀한 고리를 가지고 있기 때문이다. 햇빛을 많이 받고 자라는 나무들은 빠르게 자라고 고리 간격이 넓다. 예를 들어, 매우 가볍고 부드러운 발사나무는 열대림에서 나무가 쓰러져 생긴 햇빛이 드는 공간에서 매우 빠르게 자라도록 진화했다.
          + 오래된 나무 목재의 내구성은 그늘에서 천천히 자란 결과임.
     *

     오래된 목재의 가치는 오래된 창문을 버리지 말아야 할 이유이다. 100년 된 창문은 단일 유리창, 납성분 페인트, 단열되지 않은 벽에 제대로 된 창턱 방수 처리 없이 설치되어 있을 수 있다. 모든 창문은 누수되거나 누수될 가능성이 있으며, 보호받는 창문의 작은 누수는 단열되지 않은 벽 공간에 크게 해를 끼치지 않을 수 있다. 하지만 단열을 추가하면 상황이 달라진다. 코드에 따르면 (많은 건축업자들이 주택 건설에 이를 완전히 무시하지만), 새로 설치된 창문은 누수된 물을 모아서 밖으로 유도하는 창턱 팬이나 다른 방수 처리 위에 설치된다. 그러므로, 오래된 창문을 제거하고, 페인트를 조심스럽게 제거하고, 단열 유리를 장착하고, 제대로 된 방수 처리와 함께 다시 설치하는 것이 돈이 될 수도 있지만, 새 창문을 구입하고 오래된 것을 버리는 것이 더
     나을 수도 있다.
          + 오래된 창문의 가치를 인식하고 적절한 보수를 통해 재사용해야 함.
     *

     뉴잉글랜드의 오래된 숲에 관한 스미소니언 매거진을 위해 촬영한 이야기에서 가장 흥미로운 부분은 뉴잉글랜드가 화목과 목초지를 위해 거의 벌목되었을 때의 아카이브 사진을 보는 것이었다. 오늘날 우리는 그 지역을 숲으로 생각하지만, 이는 비교적 최근의 일이다.
          + 뉴잉글랜드의 숲이 과거에는 대규모로 벌목되었음을 보여주는 아카이브 사진이 흥미로움.
     *

     샤넌의 목재 산업 업데이트라는 멋진 팟캐스트가 이 주제에 대해 자세히 논의한다. 그는 오래된 목재가 ""더 나은"" 목재라는 점을 인정하지만, 목재도 지속 가능한 자원이 될 수 있다고 말한다. 우리는 건축용 목재를 지속 가능한 방식으로 생산하는 데 훨씬 더 나은 일을 해왔다. 예전의 프레임 목재는 오래된 나무를 단순히 파괴하여 얻었다. 고급 가구 제작자들이 하는 것처럼 비슷한 목재를 여전히 찾을 수 있다.
          + 목재는 지속 가능한 자원이 될 수 있으며, 오래된 목재가 더 나은 것을 인정하면서도 지속 가능한 방식으로 목재를 생산하는 데 성공함.
     *

     나는 태평양 북서부에서 100년 된 집에 살고 있으며, 집을 수리하려고 할 때 '목재용' 드릴 비트를 수십 개나 부러뜨렸다. 집 안의 하나의 2x4 목재를 뚫는 데 10분이 넘게 걸릴 수 있다. 취미로 목공을 하는 나로서는, 상점에서 살 수 있는 목재와는 달리 오래된 소나무가 이페 목재와 더 비슷하다고 느낀다. 나는 그 오래된 목재를 금처럼 간직하고 있다.
          + 오래된 집의 목재가 현대의 목재와는 매우 다르며, 이를 소중히 여기는 경험.
     *

     나는 아버지의 맞춤형 와인 셀러 건설 사업에서 일하면서 목재 품질이 저하되는 것을 직접 경험했다. 1980년대 고등학교를 졸업한 후 몇 년 동안 와인 랙을 만드는 공장에서 일했고, 아버지가 은퇴할 때까지 가끔 설치 작업을 도왔다. 초기에는 풍부하고 저렴했던 적삼목을 사용했는데, 적삼목은 소나무보다는 단단하고 호두나무나 참나무보다는 부드러워 작업하기 쉬웠다. 나무 중심부의 '클리어 하트' 목재는 잘 보관하면 휘지 않는다. 또한 적삼목은 흡수성이 좋아서 접착제를 잘 흡수한다. 우리는 적삼목을 와인 셀러에 사용하는 것을 선호했는데, 그 이유는 셀러의 냉장이 와인의 '울리지'를 방지하기 위해 높은 습도 수준(70-80%)을 유지하도록 설계되어 있기 때문에 곰팡이에 취약한데, 적삼목은 높은 탄닌 함량으로 인해 곰팡이에 저항성이 있기 때문이다.
     시간이 지나면서 적삼목은 점점 더 비싸지고 품질이 낮아져 'A 등급' 목재에도 수액부가 포함되고 나무 고리가 줄어들었다. 와인 랙은 많은 양의 작은 조각을 사용하는데, 작은 크기에서 목재의 낮은 품질은 곡물 문제로 인해 더 많은 조각을 사용할 수 없게 만들었다. 좋은 목재 곡물을 선택하는 것은 중요하다. 그렇지 않으면 사람들이 와인 랙에 손을 넣었다가 적삼목의 가시로 인해 피를 흘리며 돌아올 수 있기 때문이다. 이 가시들은 몸에서 쉽게 분해되지 않도록 하는 나무의 탄닌 때문에 더 문제가 된다. 결국 우리는 지속 가능하게 경작된 다른 목재로 전환했지만, 그 목재들은 작업하기가 매우 어려웠다. 그들은 톱날을 망가뜨리고 핀을 박기 어려웠다.
          + 와인 셀러 제작에서 적삼목의 품질 저하와 대체 목재로의 전환 경험.
     *

     이는 기타와 다른 악기(피아노, 바이올린 등)에도 적용된다. 오래된 목재는 더 나은 소리를 내고, 더 오래 지속되며, 더 좋아 보인다. 구조용 목재로 사용할 수 있는 직선적인 심재는 요즘에는 구할 수 없다. 좋은 직선 심재를 원한다면 오래된 목재를 회수하거나 숲 바닥에서 오래된 벌목된 원목을 찾아야 한다. 캘리포니아에서 오래된 적삼목으로 지어진 오래된 집이 철거되어 쓰레기장에 버려지는 것을 볼 때마다 마음이 아프다.
          + 오래된 목재가 악기 제작에 있어서 더 나은 소리와 지속성을 제공함.
     *

     구조 엔지니어나 진지한 목재 전문가라면 이것이 틀렸다고 말할 것이다. 실제로 이 게시물에 대한 Reddit 토론을 살펴보면 모두 동의한다. 새로 자란 나무는 햇빛을 위해 나무들이 경쟁하지 않도록 재배되기 때문에 훨씬 적은 매듭과 문제를 가지고 있다. 그 결과, 나무들은 더 곧고 높게 자라며 훨씬 적은 매듭과 이상을 가진다. 오래된 것은 더 조밀한 것이 유일한 장점이다. 새로 자란 나무를 더 조밀하게 만드는 데 신경 쓰지 않는다. 왜냐하면 우리는 lvl, lsl, psl, clt 등을 만들었기 때문이다.
          + 새로 자란 나무가 오래된 나무보다 더 적은 매듭과 문제를 가지고 있으며, 목재를 더 조밀하게 만드는 것은 중요하지 않음.
"
"https://news.hada.io/topic?id=13623","Intel, NPU 가속 라이브러리 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Intel, NPU 가속 라이브러리 공개

   인텔® NPU 가속 라이브러리: 인텔 신경 처리 장치로 AI 성능 향상

   • 인텔 NPU 가속 라이브러리는 인공지능 애플리케이션의 효율성을 높이기 위해 인텔 신경망 처리 장치(NPU)의 전력을 활용하는 파이썬 라이브러리이다. 최적의 성능과 전력 효율을 위해 컴퓨팅과 데이터 흐름을 효율적으로 지시하고 컴퓨팅 활용도를 극대화하며 데이터 전송을 최소화해 AI 워크로드를 최적화한다.

   • 라이브러리는 NPU와 계산 가속 및 데이터 전송 기능을 통합하는 인텔 코어 울트라 프로세서용으로 설계되었습니다. AI 운영을 위한 뉴럴 컴퓨팅 엔진과 일반 컴퓨팅 작업을 위한 스트리밍 하이브리드 아키텍처 벡터 엔진, 효율적인 데이터 전송을 위한 DMA 엔진이 특징이다.

   • 개발의 주요 기능에는 8비트 및 4비트 양자화, NPU 기본 혼합 정밀도 추론, Float16 및 BFloat16 지원, torch.com 파일 지원, LLM MLP 수평 융합 구현, 정적 형상 추론, MHA NPU 추론 및 NPU/GPU 헤테로 컴퓨팅이 포함된다.

   • 라이브러리를 사용하려면 시스템에 사용 가능한 NPU가 있는지 확인하고 pip를 통해 패키지를 설치하십시오. 윈도우 및 리눅스 시스템과 호환되지만 MacOS는 아직 지원되지 않습니다. 최상의 성능을 위해 NPU 드라이버를 최신 버전으로 업데이트합니다.

   • 라이브러리는 구현된 예를 제공하고 NPU에 대한 PyTorch 모델을 최적화하기 위한 torch.com 파일을 지원한다. 또한 2.0.0 미만의 PyTorch 버전을 사용하거나 Windows 환경에서 모델을 컴파일할 때 명시적인 기능을 제공합니다.

   외장 그래픽카드가 없어도 NPU만으로 AI 연산이 얼마나 가능할지 기대되네요.
"
"https://news.hada.io/topic?id=13612","CSS :has() 인터랙티브 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          CSS :has() 인터랙티브 가이드

     * 우리가 계속 기다려왔던 CSS에서 하위 요소를 기반으로 요소의 스타일을 지정할 수 있는 방법인 :has()
     * CSS Selector 들 설명과 :has 를 이용한 매칭 방법
     * :has 유스케이스들 소개
          + 파일 다운로드, 사이드바 넓이, 쿠키 배너, 대시보드 배너, 갯수 쿼리하기, 링크 뒤에 오는 타이틀 선택하기, 비활성화 버튼 있는 카드, 모달, 입력 상태, HTML 속성들
"
"https://news.hada.io/topic?id=13561","보잉, 안전 문화의 핵심 요소 미흡: FAA 보고서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      보잉, 안전 문화의 핵심 요소 미흡: FAA 보고서

보잉의 안전 문화 결여: FAA 보고서

     * FAA는 보잉이 안전 문화에 결함이 있다고 지적하는 50페이지 분량의 보고서를 발표함.
     * 전문가 패널은 보잉의 안전 문화에서 결함을 발견하고, 대다수 직원들이 안전 문제를 보고하는 기본적인 인식에 대한 숙련된 인식이 부족함을 지적함.
     * 패널은 보잉 내에 일관되고 명확한 안전 보고 채널이나 절차를 찾을 수 없었으며, 직원들이 다양한 보고 시스템을 어떻게 사용해야 하는지, 언제 어떤 시스템을 사용해야 하는지 이해하지 못하고 있음을 발견함.

보잉의 행동 계획 요구

     * 보고서는 보잉이 이전에 조직 지정 인증(ODA)과 안전 관리 시스템(SMS)을 구현하기 위한 로드맵을 제공했지만, 아직 로드맵에 설명된 변경 사항을 완료하지 않았다고 결론지음.
     * 보고서는 보잉이 각 권고 사항을 해결하기 위한 '이정표 기반' 접근 방식을 포함하는 행동 계획을 개발하고 그 결과를 FAA와 공유할 것을 권고함.

GN⁺의 의견

     * 이 보고서는 항공 안전에 대한 중요성과 대형 항공기 제조사의 안전 문화에 대한 지속적인 감독의 필요성을 강조함. 보잉과 같은 기업의 안전 문화 결함은 항공 여행의 안전성에 직접적인 영향을 미칠 수 있기 때문에, 이러한 보고서는 업계 전반에 경각심을 불러일으키는 중요한 역할을 함.
     * FAA의 보고서는 보잉이 안전 관리 시스템을 강화하고 내부 보고 절차를 명확히 해야 한다는 점을 지적함으로써, 다른 항공기 제조사들에게도 유사한 문제를 사전에 예방하고 개선할 수 있는 기회를 제공함.
     * 보잉의 안전 문화 개선을 위한 행동 계획은 업계 표준을 설정하고, 다른 항공기 제조사들이 안전 관리 시스템을 강화하는 데 참고할 수 있는 모범 사례가 될 수 있음.
     * 이 기술을 도입할 때는 직원 교육과 안전 문화에 대한 지속적인 투자가 필요하며, 이는 장기적인 안전성 향상과 비용 절감으로 이어질 수 있음.
     * 보잉과 같은 대형 항공기 제조사가 안전 문화를 강화함으로써 얻을 수 있는 이득은 항공 여행의 안전성 향상과 브랜드 신뢰도 증진에 있으며, 손실은 단기적인 비용 증가와 조직 변화에 따른 저항을 극복해야 한다는 점임.

        Hacker News 의견

     * 보고서에서 발견된 결함은 '정의로운 문화(Just Culture)'와 '보고 문화(Reporting Culture)'에 관한 것임.
          + 안전 문화의 다섯 가지 핵심 요소:
               o 정보화된 문화(Informed Culture): 조직이 관련 데이터를 수집 및 분석하고 안전 정보를 적극적으로 전파함.
               o 보고 문화(Reporting Culture): 직원들이 비난의 두려움 없이 안전 문제를 보고할 수 있는 분위기 조성. 직원들은 보고된 정보가 비밀에 부쳐지고 조치될 것임을 알아야 함.
               o 학습 문화(Learning Culture): 조직이 실수에서 배우고 변화를 이룸. 또한 사람들이 SMS(안전 관리 시스템) 프로세스를 개인적으로 이해하도록 보장함.
               o 정의로운 문화(Just Culture): 의도하지 않은 오류와 안전하지 않은 행동은 처벌되지 않음. 그러나 무모하게 행동하거나 정당화할 수 없는 위험을 감수하는 사람들은 여전히 징계를 받음.
               o 유연한 문화(Flexible Culture): 조직과 그 구성원이 변화하는 요구에 효과적으로 적응할 수 있음.
          + 출처: FAA 보고서, Air Safety
     * 보잉의 리더들이 자신들의 이익을 극대화하면서 회사, 경제, 미국 납세자에게 비용을 전가하고 있다는 비판이 있음. 이러한 행동이 범죄적으로 보인다는 의견 제시.
     * 1997년 맥도넬 더글러스와의 합병 이후 안전 문화가 훼손되기 시작했다는 의견이 널리 퍼져 있다는 것을 확인하는 것 같다는 의견.
     * 복잡한 보고 시스템과 직원들이 이를 어떻게 사용해야 하는지 모르는 상황이 회사가 보고를 원하지 않기 때문일 수 있다는 의심을 제기하는 댓글.
     * 20년 전에는 미국에 빅 쓰리(Ford, GM, Chrysler) 외에 다른 자동차 제조사가 없을 것이라고 생각했지만, 현재 테슬라와 다른 회사들이 등장했다는 사실을 언급하며, 20년 후 보잉의 대안이 될 수 있는 미국 회사가 있는지 질문.
     * 안전 사고 팀이 인사 부서와 전혀 연결되지 않아야 한다는 제안. 이들은 직원을 해고하거나 성과 평가에 영향을 줄 수 없으며, 단지 안전 관련 문제를 기록하고 조사하는 역할을 함.
     * 보잉의 실제 문제는 MCAS 설계 참사와 문제가 발생한 도어 플러그가 고립된 사건이 아니라 더 넓은 문제의 증상이라는 지적. 현재 운항 중인 항공기에 숨겨진 결함이 무엇인지, 미래에 어떤 문제를 일으킬지에 대한 우려 표현.
     * 보잉에 안전 정책이나 절차가 없는 것이 아니라 아무도 그것을 알지 못해서 아무것도 보고되거나 수정되지 않는다는 지적. 에어버스와 엠브라에르의 상황이 어떤지 궁금해하는 댓글.
     * MBA들이 안전 문화에 달러 가치를 매기기 어렵다는 지적. 네트워크 보안 분야에서도 비슷한 경험을 한 사람의 의견.
     * 회사 리더십이 안전 관행을 무모하게 침식한 경우, 개인에게 형사 책임이 있는지에 대한 질문. 사망에 이르게 한 최고 경영진의 고의적인 나쁜 행동을 기소하는 것이 문화를 되돌리는 데 도움이 될 수 있다는 의견.
"
"https://news.hada.io/topic?id=13572","Rust로 작성된 2D 및 3D 물리 엔진 세트인 Rapier","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Rust로 작성된 2D 및 3D 물리 엔진 세트인 Rapier

Rapier 소개

     * Rapier는 Rust 프로그래밍 언어로 작성된 2D 및 3D 물리 엔진 세트임.
     * 실시간 물리가 필요한 비디오 게임, 애니메이션, 로봇공학과 같은 응용 프로그램을 대상으로 함.
     * 빠르고 안정적이며 선택적으로 플랫폼 간 결정론적인 동작을 지원함.
     * 강체 충돌 및 힘, 관절 제약, 접촉 이벤트 및 센서, 스냅샷 기능, 선택적 플랫폼 간 결정론적 동작, 자바스크립트 바인딩 등의 기능을 제공함.
     * Rapier는 Apache 2.0 라이선스 하에 무료로 제공되며, 오픈소스 회사인 Dimforge에 의해 개발됨.
     * GitHub 스폰서를 통해 후원함으로써 지원할 수 있음.

GN⁺의 의견

     * Rapier는 Rust의 안전성과 성능을 활용하여 실시간 물리 시뮬레이션을 필요로 하는 다양한 분야에 적합한 솔루션이 될 수 있음. 특히 게임 개발이나 로봇 시뮬레이션에서의 활용이 기대됨.
     * 오픈소스로 제공되기 때문에 커뮤니티의 지원을 받아 지속적으로 개선될 가능성이 있으며, 사용자들이 직접 기능을 추가하거나 최적화하는 데에도 유리함.
     * Rust 기반의 물리 엔진은 메모리 안전성과 동시성 처리에서의 이점을 제공하지만, Rust 언어 자체의 학습 곡선이 높은 편이므로 채택을 고려하는 개발자나 팀은 이를 고려해야 함.
     * Rapier와 유사한 기능을 제공하는 다른 물리 엔진으로는 Bullet, PhysX, Havok 등이 있으며, 이들 각각의 특성과 성능을 비교해보고 프로젝트의 요구 사항에 맞는 엔진을 선택하는 것이 중요함.
     * Rust 기반의 물리 엔진을 선택함으로써 얻을 수 있는 이점은 성능과 안정성이지만, 기존에 널리 사용되는 C++ 기반의 물리 엔진에 비해 커뮤니티 지원이나 자료가 상대적으로 부족할 수 있음.

        Hacker News 의견

     * Rapier 물리 엔진을 사용하여 온라인 멀티플레이어 게임을 개발한 사용자가 있음. 아직 싱글 플레이어 모드는 없지만, Rust 언어로 구현된 API가 매우 견고하다고 평가함.
          + 게임은 플레이어가 차례로 벌레를 상대 팀에 부딪히게 하여 언덕을 점령하는 방식임.
          + 게임과 물리/게임 로직 소스 코드는 온라인에서 확인할 수 있음.
          + 개발 경험에 대한 포스팅을 계획 중임.
     * 기하 대수(Geometric Algebra)에 대해 몇 달 동안 깊이 연구한 사용자가 있으며, 이는 다양한 기하학에서 직관적이고 간결한 작업 방식을 제공할 수 있다고 생각함.
          + 기하 대수를 물리 엔진의 기반으로 사용하는 것이 좋을지 궁금해함.
          + 관련 Rust 라이브러리가 몇 개 있지만, 아직 많은 주목을 받지는 못함.
     * Bevy 플러그인에 대한 가이드를 작성한 사용자가 있으며, Bevy XPBD에 대해서도 글을 썼음.
          + Bevy XPBD는 Bevy 공간에서 흥미로운 대안임.
     * Dimforge가 nalgebra와 Rust를 사용하여 로봇 공학 분야에서 Eigen과 C++를 대체할 수 있기를 기대하는 사용자가 있음.
     * 수십 년 전 강체 물리 엔진을 구축한 경험이 있는 사용자는 물체가 땅에 가라앉는 것을 방지하기 위해 DAG를 사용한 것이 최선의 해결책이었다고 회상함.
          + 이 문제가 현재 해결되었는지 궁금해함.
     * Rust를 사용하여 게임 엔진은 많이 만들어졌지만 실제 게임은 소수만 개발되었다는 스테레오타입을 확인하는 사용자가 있음.
     * Rapier를 사용하여 웹 데모를 만든 사용자가 있으며, 서버 측과 클라이언트 측 모두에서 실행할 수 있고, 클라이언트 측 예측과 조정을 구현할 수 있다는 점을 좋아함.
          + 문서화가 잘 되어 있고, 최신이며, 번들 크기가 작다는 장점을 언급함.
     * Rapier의 자바스크립트 상호 운용성이 매우 좋다는 사용자가 있음.
     * Rapier를 사용하여 간단한 웹 게임을 만든 사용자가 있으며, 서버에서 물리 연산과 승패 상태를 계산하여 부정행위를 방지함.
          + 게임은 ""Ice Cold Beer""라는 오래된 타이토 전자 아케이드 게임에 대한 오마주임.
"
"https://news.hada.io/topic?id=13569","빅테크 기업의 해고와 AI 혁신, IT 산업의 미래는 어떻게 바뀔 것인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               빅테크 기업의 해고와 AI 혁신, IT 산업의 미래는 어떻게 바뀔 것인가?

     * 대규모 해고의 시작
          + COVID-19 초기에는 재택근무나 메타버스 등으로 자리를 잡는 듯
          + 2022년 2분기부터 해고가 진행
          + 2023년 1분기에는 자진 퇴사가 더 많아지짐
     * 해고를 한 이유
          + covid19와 오미크론의 영향
          + 급등한 기준금리
     * 앞으로 어떻게 될지?
          + 빅테크 기업 해고러시는 국내 IT기업에도 영향을 미치고 있음.
          + 일부 기업은 인건비 부담을 줄이기 위해 감원에 나서거나 채용 규모 축소
"
"https://news.hada.io/topic?id=13596","파이썬에서의 기호 수학, SymPy","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          파이썬에서의 기호 수학, SymPy

SymPy의 장점

     * 무료: BSD 라이선스를 따르는 SymPy는 자유롭게 사용할 수 있으며 비용이 들지 않음.
     * Python 기반: SymPy는 전적으로 Python으로 작성되었으며, Python을 사용함.
     * 경량: SymPy는 임의의 부동 소수점 연산을 위한 순수 Python 라이브러리인 mpmath에만 의존하여 사용이 간편함.
     * 라이브러리: 대화형 도구로서의 사용뿐만 아니라 다른 애플리케이션에 내장되거나 사용자 정의 함수로 확장될 수 있음.

SymPy를 사용하는 프로젝트들

     * Cadabra: SymPy를 스칼라 대수 연산에 사용하는 텐서 대수 및 (양자) 필드 이론 시스템.
     * ChemPy: Python으로 작성된 화학에 유용한 패키지.
     * devito: 고성능 스텐실 계산을 위한 기호 DSL 및 실시간 컴파일러.
     * EinsteinPy: 기호 및 수치 일반 상대성 이론을 위한 Python 패키지.
     * galgebra: 기하 대수 (이전에 sympy.galgebra).
     * LaTeX Expression project: 대수적 표현의 LaTeX 조판을 쉽게 할 수 있으며 자동 대입 및 결과 계산이 가능함.
     * Lcapy: 선형 회로 분석 교육을 위한 실험적 Python 패키지.
     * OctSymPy: SymPy를 사용하는 Octave용 기호 패키지.
     * Optlang: 수학적 최적화 문제를 해결하기 위한 Python 패키지.
     * PyDy: Python에서의 다체 동역학.
     * pyneqsys: 비선형 방정식 시스템을 수치적으로 해결하기 위해 기호적으로 정의됨.
     * pyodesys: Python에서 ODE 시스템의 간단한 수치적 통합.
     * PyTorch TorchInductor: 동적 형태와 스트라이드를 지원하기 위해 SymPy를 사용하는 TorchInductor.
     * QMCPACK: C++에서의 양자 몬테카를로. 단위 테스트 및 일부 코드 생성을 위한 참조 값 생성에 SymPy 사용.
     * Quantum Programming in Python: 양자 1D 단순 조화 진동자 및 양자 매핑 게이트.
     * SageMath: SymPy를 포함하는 오픈 소스 수학 시스템.
     * Scikit-fdiff: 유한 차분 이산화.
     * SfePy: Python에서의 간단한 유한 요소.
     * Spyder: Rstudio 또는 MATLAB에 해당하는 과학적 Python 개발 환경; Spyder의 IPython 콘솔에서 전체 SymPy 지원 가능.
     * Symbolic statistical modeling: 복잡한 물리 모델에 통계 연산 추가.
     * yt: 체적 데이터를 분석하고 시각화하기 위한 Python 패키지 (yt 단위 시스템인 unyt는 SymPy 사용).

GN⁺의 의견

     * SymPy는 BSD 라이선스로 무료로 제공되며, Python 기반으로 작성되어 Python 사용자에게 친숙한 수학적 연산을 위한 라이브러리임. 이는 특히 오픈소스 커뮤니티에서 활발히 사용되며, 다양한 과학 및 엔지니어링 분야에서 활용될 수 있는 장점을 가짐.
     * SymPy는 경량이며 다른 애플리케이션에 쉽게 통합될 수 있어, 사용자가 복잡한 수학적 문제를 해결하거나 자신만의 함수를 추가하여 확장할 수 있는 유연성을 제공함.
     * 이 기술을 도입할 때는 Python에 대한 기본적인 이해가 필요하며, 특히 수학적 모델링이나 기호 계산이 중요한 프로젝트에서 그 가치를 발휘함.
     * SymPy를 사용함으로써 얻을 수 있는 이점은 고성능 수학 연산, 다양한 분야로의 확장성, 그리고 오픈소스 커뮤니티의 지원을 통한 지속적인 개선임.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Mathematica, Maple, MATLAB의 Symbolic Math Toolbox 등이 있으나, 이들은 상용 소프트웨어이므로 SymPy는 무료이면서도 강력한 대안이 될 수 있음.

        Hacker News 의견

     * 로봇공학 분야에서 일하며, 3D 변환의 결과로 계산된 큰 벡터들을 작성하고 여러 상태 변수에 대한 그들의 자코비안(도함수)을 계산해야 하는 경우가 많음. 이는 복잡한 방정식으로 이어짐. sympy를 사용하여 이러한 큰 벡터를 선언적 방식으로 계산하고, 자코비안을 계산하며, 결과를 C 코드로 내보내어 코드 케이스에 즉시 가져올 수 있음. 예를 들어, 로봇 위치와 센서 위치가 포함된 데이터셋에 접근할 수 있다면 로봇 중심에 대한 센서의 위치를 추정하는 방법을 선언적으로 표현하는 방법을 보여주는 장난감 예제가 있음. 이를 위해 transform과 invert 함수를 정의하기만 하면 됨.
     * SymPy는 정말 멋진 도구로, 수년간 교육 도구로 사용해왔음. Mathematica/Maple 등과 비교했을 때, 학생들이 수학을 배울 때 사용하는 동사(solve, expand, factor 등)와 정확히 일치하는 API 함수를 가지고 있어 최고의 옵션이라고 생각함. 시작하려는 사람들을 위한 작은 튜토리얼이 있으며, 실행 가능한 노트북 형식으로도 제공됨. 또한, 아무것도 설치하지 않고 SymPy를 시도하고 싶은 사람들을 위해 웹 브라우저에서 Python + SymPy를 실행할 수 있는 SymPy 라이브 쉘도 있음.
     * 기호 수학은 학부 과정에서 심각하게 탐구되지 않았으며, 접한 내용은 대부분 Mathematica와 MATLAB과 같은 독점 소프트웨어에 묶여 있었음. 필자는 텐서 계산을 많이 사용하는 수학/공학 분야에서 일하며, Maxima를 주 도구로 사용했지만, 이에 대한 패키지가 제한적이고 다루기 불편함. 이제 더 복잡한 계산을 위해 SymPy를 사용하는데, 이는 Python이 이미 가진 추상화 때문임. 언젠가는 Norvig의 'Principles'를 읽고 Maxima를 필요에 맞게 수정할 수 있기를 바람(텐서 계산/기호(텐서, 기하학적) 대수에 대한 Maxima의 소스 코드/구현을 읽을 수 있는 더 나은 참고 문헌이 있다면 알고 싶음).
     * SymPy와 Mathematica의 벤치마크가 있으며, 결과는 Mathematica가 1,523개 문제를 해결하지 못했고, SymPy는 48,529개 문제를 해결하지 못함. 따라서 SymPy는 아직 따라잡을 부분이 있음.
     * SymPy를 계산기로 사용하며, 이를 위한 GitHub 링크가 제공됨.
     * 일반 상대성 이론에 관심이 있었던 10년 전, 아인슈타인 필드 방정식에 대한 기호 계산을 처리하는 간단한 프로그램을 작성하고 싶었음. SymPy는 옵션이었지만 사용하기 어렵고 작동시키지 못함. Mathematica를 사용하여 몇 시간 만에 해결함. 나중에 확장하여 블랙홀 논문에서 많은 계산을 수행함. 현재 SymPy는 많은 개발을 거쳐 좋은 라이브러리들이 구축되었으며, 심지어 Schwarzschild 메트릭에 대한 Jupyter 노트북 예제도 있음.
     * SymPy는 Jupyter에서 매우 잘 작동함. SymPy를 위한 데모 노트북 링크가 제공됨.
     * SymPy에 대한 Wikipedia 링크와 함께 Python과 SymPy를 사용하여 로그를 가르치는 방법에 대한 토론 링크가 제공됨. 또한 SymPy와 Matlab을 비교하는 링크와 NumPy를 Matlab 사용자에게 소개하는 문서 링크가 있음.
     * SymPy는 작업을 수행하는 데 충분함. 일반적으로 SageMath 콤보 라이브러리에서 사용하는데, SymPy가 독립적으로 사용할 만큼 발전했는지 여부에 대한 질문이 있음.
     * 수치 ""물리학자""에게 SymPy는 신의 선물과 같았음. 나중에 C++로 최적화하기 전에 더 고급 모델을 프로토타이핑하기에 좋음. Mathematica를 많이 사용하지 않았지만, SymPy보다 기호적으로 더 강력하거나 덜 까다로운 느낌이 듦. Mathematica에 더 많은 경험이 있는 사람이 이에 대해 명확히 설명해줄 수 있기를 바람.
"
"https://news.hada.io/topic?id=13629","Weather.gov 2.0 업데이트 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Weather.gov 2.0 업데이트 발표

Weather.gov 2.0에 오신 것을 환영합니다

     * Weather.gov는 미국 국립기상청(NWS)이 소유하고 있으며, 연간 15억 번의 방문을 기록하는 가장 많이 방문하는 연방 웹사이트 중 하나임.
     * 기본적인 문제는 Weather.gov가 사용자의 필요보다는 조직의 칸막이를 더 반영하고 있다는 것임. 전략, 피드백/모니터링, 도구의 부재가 이 문제를 지속시키고 있음.
     * 사람들이 정보를 더 빠르게 찾고, 더 잘 이해하며, NWS를 권위 있는 출처로 계속 인식하고 이러한 진전을 유지할 때 문제가 해결되고 있다고 볼 수 있음.

비전, 미션, 최소 기능 제품(MVP) 전략

     * 비전은 누구나 다가오는 날씨의 영향을 이해할 수 있어야 한다는 것임.
     * 미션은 Weather.gov를 재구축하여 NWS가 사람들을 위해 가지고 있는 정성과 진실성을 반영하는 것임.
     * MVP 전략은 일반적이고 위험한 날씨에 대한 예보와 조건을 더 쉽게 전달할 수 있도록 만드는 것임.
     * MVP의 주요 사용자는 내부의 NWS 기상학자들과 외부의 일반 대중 및 비상 관리자들임.

전략과 계획

     * 우선순위 전략은 현재 개별 부품의 프로토타입을 만들어 중요한 결정을 내리고 위험을 평가하는 것임.
     * 다음 단계는 가능한 가장 간단한 것부터 구축하는 것이며, 이후에는 가능한 한 빨리 복잡성을 추가하는 것임.
     * 초기 로드맵은 여기서 볼 수 있음.

최종 성공 또는 실패의 기준

     * 성공할 경우는 모든 지역과 프로그램이 사이트가 확장되어 그들의 요구를 충족할 준비가 되었을 때 선의로 팀과 협력하는 것임.
     * 실패할 경우는 사이트가 강제되거나, 큰 홍보 행사로 출시되거나, 단 한 번의 실패가 프로젝트 전체의 실패로 간주되는 경우임.

공공 도메인

     * 이 프로젝트는 전 세계적으로 공공 도메인에 속함. 기여하는 모든 내용은 CC0 1.0 범용 공공 도메인 헌납을 통해 저작권이 면제됨.

기술 스택

     * 기술 스택은 Docker, Drupal, PHP, Symfony, Twig 등을 포함하는 전통적인 CMS(콘텐츠 관리 시스템)임.

Drupal 10을 Docker에서 실행하기

     * Docker는 설정과 구성을 간단하게 해줌. Docker가 설치되어 있다면, 저장소를 클론하고 docker compose up 명령어로 실행할 수 있음.
     * 사이트 구성을 설치하고 로컬호스트에서 로그인하여 관리할 수 있음.

테마 편집 및 추가

     * 테마 폴더를 바인드 마운트하여 새 테마를 추가할 수 있음. 테마 폴더에서 변경사항이 호스트 폴더에 반영됨.
     * Drupal 외관 페이지에서 새 테마를 생성하고, 캐시를 재구축하는 명령어를 사용하여 변경사항을 적용할 수 있음.

Drupal 코어 업데이트 설치

     * 개발 환경에서는 Composer를 사용하여 Drupal 코어의 최신 업데이트를 설치할 수 있음.
     * 운영 환경에서는 변경된 composer.json과 composer.lock 파일을 푸시하고, composer install --no-dev 명령어를 실행하여 업데이트를 적용할 수 있음.

GN⁺의 의견

     * Weather.gov 2.0 프로젝트는 사용자 중심의 접근 방식을 취하고 있으며, 이는 공공 서비스 웹사이트에 대한 현대적인 기대를 반영함.
     * 이 프로젝트는 기상 정보의 접근성과 이해도를 높이는 데 중점을 두고 있으며, 이는 자연 재해와 같은 긴급 상황에서 매우 중요할 수 있음.
     * Drupal CMS를 사용하는 것은 확장성과 유연성을 제공하지만, 동시에 사용자 정의와 유지 관리에 대한 전문 지식이 필요할 수 있음.

        Hacker News 의견

     * 18F(GSA)와의 계약/파트너십 하에 진행되는 프로젝트로 보임. weather.gov가 조직의 사일로를 반영하는 문제점이 있으며, 전략, 피드백/모니터링, 도구 부족으로 인해 이 문제가 지속되고 있음을 공개적으로 인정하는 것에 대해 놀라움을 표현.

     ""해당 프로젝트는 18F(GSA)와의 협력 하에 진행되는 것으로 보임. weather.gov가 사용자의 필요보다는 조직의 분리된 부서들을 반영하는 문제가 있으며, 이는 전략, 피드백/모니터링, 도구의 부재로 인해 지속되고 있음을 공개적으로 인정하는 것에 대해 놀라움.""
     * 2.0 버전이 개발 중인 소스코드인지, 실제로 사용 가능한 상태인지에 대한 질문이 있음. 과거 정부의 항공 기상 제품에 대한 실험적 사이트가 있었으나, 정부 자금 시스템에 얽매여 결국 폐쇄되었고, 그들의 작업이 주요 사이트로 승격되지 않았음을 회상.

     ""2.0 버전이 현재 사용 가능한 상태인지, 아니면 개발 중인 소스코드인지에 대한 질문. 과거에 있었던 실험적인 정부 사이트가 결국 폐쇄되고 그들의 작업이 주요 사이트로 승격되지 않았던 경험을 언급.""
     * 미국은 훌륭한 기상 서비스를 가지고 있으며, 그들의 제품이 무료이고 공공 도메인이라는 의무가 있음. 그러나 상업적 회사가 이익을 낼 수 있도록 정부 기상 서비스가 너무 우수해져서는 안 된다는 정치적 압력도 존재함. AccuWeather가 2005년에 그러한 회사 중 하나였음.

     ""미국은 훌륭한 기상 서비스를 보유하고 있으며, 그들의 제품이 무료이고 공공 도메인이라는 의무가 있음. 그러나 상업적 이익을 위해 정부 기상 서비스가 너무 우수해져서는 안 된다는 정치적 압력도 존재함을 지적.""
     * radar.weather.gov 사이트가 모든 기기에서 잘 작동하며 광고가 없어서 훌륭하다는 긍정적인 피드백이 있음. 계속해서 좋은 일을 해달라는 격려의 말도 포함.

     ""radar.weather.gov 사이트가 모든 기기에서 잘 작동하며 광고 없이 훌륭하게 운영되고 있어 긍정적인 평가를 받음. 좋은 작업을 계속해달라는 격려의 말.""
     * api.weather.gov에 미칠 영향에 대한 궁금증이 있음. 개인적으로 만든 대시보드에 대한 언급과 해양 예보에 대한 데이터 필드가 채워지길 바라는 의견이 있음.

     ""api.weather.gov에 미칠 영향에 대한 궁금증. 개인적으로 만든 대시보드에 대한 언급과 해양 예보 데이터 필드의 개선을 희망.""
     * 국립기상서비스(National Weather Service)가 연방 기관들에 대한 미래 비전을 제시하고 있다는 칭찬이 있음.

     ""국립기상서비스가 연방 기관들에 대한 미래 비전을 제시하고 있음에 대한 칭찬.""
     * 모든 정부 관련 오픈 소스 프로젝트가 나열된 단일 장소의 필요성에 대한 의견이 있음. GitHub에서 usa-gov 조직을 통해 모든 저장소에 쉽게 접근할 수 있기를 바람.

     ""모든 정부 관련 오픈 소스 프로젝트가 나열된 단일 장소의 필요성에 대한 의견. GitHub의 usa-gov 조직을 통해 저장소에 쉽게 접근할 수 있기를 바람.""
     * weather.gov의 예보 그래프가 가장 유용하며, 날씨를 알고 싶을 때 가장 먼저 찾는 자료라는 개인적인 의견이 있음.

     ""weather.gov의 예보 그래프가 매우 유용하며, 날씨 정보를 얻고자 할 때 가장 먼저 찾는 자료라는 개인적인 의견.""
     * 정부 서비스의 데이터 활용과 UI 문제에 대한 언급이 있으며, NOAA가 제공하는 원시 데이터에 대한 긍정적인 평가와 함께, 맞춤형 서비스를 만드는 사람들을 위한 API에 대한 더 많은 정보를 바라는 의견이 있음.

     ""정부 서비스의 데이터 활용과 UI 문제에 대한 언급. NOAA의 원시 데이터에 대한 긍정적인 평가와 맞춤형 서비스를 위한 API에 대한 추가 정보를 바람.""
     * 기여하는 방법에 대한 명확한 지침이 없어 기여를 고려하는 사람들에게 혼란을 줄 수 있음을 지적하는 의견이 있음.

     ""기여하는 방법에 대한 명확한 지침 부족으로 인한 혼란을 지적하는 의견.""
     * 몇 년 전에 있었던 큰 레이더 업데이트가 잘못되었으며, 이에 대해 정부가 후퇴한 것을 보고 기쁘다는 의견이 있음.

     ""과거에 있었던 레이더 업데이트가 문제가 있었으나, 정부가 이를 인정하고 후퇴한 것에 대한 긍정적인 의견.""
"
"https://news.hada.io/topic?id=13655","유즈 에뮬레이터 개발자들, 닌텐도 소송 합의하고 24억 원 배상금 지불","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                유즈 에뮬레이터 개발자들, 닌텐도 소송 합의하고 24억 원 배상금 지불

        Hacker News 의견

     * Yuzu 소송의 진짜 이유
          + Yuzu 팀이 Patreon을 통해 에뮬레이터의 ""Early Access""와 스위치 ROM 덤프가 유통되는 사설 Discord 접근을 판매한 것이 소송의 진짜 이유임.
          + Yuzu 자체가 실제 스위치 하드웨어에서 사전 복호화된 ROM 덤프를 포함하고 있으며, 이는 에뮬레이터 개발과는 다른 차원의 문제임.
          + 이 판결로 Yuzu 개발자들이 개인적으로 재정적 타격을 받지는 않겠지만, 그들의 회사인 Tropic Haze LLC는 영향을 받을 것임.
          + Yuzu의 주 개발자가 대부분의 사용자가 게임과 prod.keys를 불법으로 다운로드한다고 인정함.
          + ""The Legend of Zelda: Tears of the Kingdom""이 출시 전 불법 유통된 사례가 있음.
     * 에뮬레이션의 합법성
          + DMCA 이전의 저작권 법 하에서 에뮬레이션의 합법성이 미국 법원 판결을 통해 강력하게 지지받았음.
          + 그러나 DMCA는 원본과 호환되는 기술을 만드는 것을 방해하는 새로운 도구를 제공함.
          + DMCA §1201에 반대하는 것이 타당하다고 생각하는 사람들은, 제3자 버전의 독점 시스템/기술/포맷/프로토콜을 재구현할 권리가 있어야 한다고 믿음.
     * Yuzu와 닌텐도 게임 구매
          + Yuzu 덕분에 사용자가 다시 닌텐도 게임을 구매하기 시작함.
          + Wii U eShop에서 구매할 수 있는 레트로 게임의 풍부함에도 불구하고, 닌텐도가 오래된 게임을 구매하기 어렵게 만들었음.
          + 닌텐도가 자사의 게임을 판매하고 사용자가 원하는 하드웨어에서 플레이할 수 있게 해주면 모든 문제가 해결될 것임.
     * Yuzu 개발 중단
          + Yuzu 개발자들이 개발을 중단하고 도메인을 닌텐도에 넘기며 Yuzu와 다른 스위치 해킹 도구의 모든 복사본을 삭제하기로 합의함.
     * Yuzu 에뮬레이터에 대한 아쉬움
          + Yuzu가 매우 잘 다듬어진 에뮬레이터였기 때문에, 사용자들이 Yuzu의 복사본을 백업하고 누군가가 개발을 이어나가기를 희망함.
     * Citra 프로젝트의 상태
          + Yuzu의 자매 프로젝트인 Citra(3DS 에뮬레이터)도 사라진 것으로 보임.
     * 닌텐도에 대한 보이콧 고려
          + 닌텐도가 해커와 소비자에게 반대하는 행동을 보여주는 것 같아, 닌텐도를 보이콧하는 것이 가치가 있을지 고민 중임.
     * Yuzu의 GPL 라이선스
          + Yuzu가 GPL 라이선스를 받았기 때문에, 한 Yuzu가 사라지면 100개의 Yuzu가 생겨날 것임.
     * 에뮬레이션과 게임 보존
          + 과거 콘솔의 에뮬레이터는 하드웨어가 점점 구하기 어려워짐에 따라 보존의 형태로 중요함.
          + 현재 콘솔을 에뮬레이트하는 것은 보존과는 다른 문제임.
          + Yuzu가 실제 회사였고 Patreon을 통해 월 $29k 이상을 벌어들였기 때문에, 닌텐도가 그들을 공격한 것은 놀랍지 않음.
     * 관련 진행 중인 스레드
          + ""Yuzu (Nintendo Switch 에뮬레이터)는 죽었다""라는 제목의 스레드 링크 제공.
"
"https://news.hada.io/topic?id=13642","리눅스/윈도우/macOS에서 사용가능한 애플뮤직앱 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      리눅스/윈도우/macOS에서 사용가능한 애플뮤직앱

     * 크로스플랫폼(리눅스, 윈도우, macOS)을 지원하는 애플뮤직앱
     * Vue.js, TypeScript, Electron/Tauri backend 기반 프로젝트
     * v1은 오픈소스였으나 v2는 현재 클로징 소스인 상태임
       (https://github.com/ciderapp/Cider-2)
     * 현재 최소 $3.49만 기부하면 다운받을 수 있는 상태임
     * 애플 공식앱보다 더 기능이 많고(크롬캐스트 지원 등등) 성능이 더 좋음.
"
"https://news.hada.io/topic?id=13662","개발 직무 지원자를 위한 글쓰기 조언","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          개발 직무 지원자를 위한 글쓰기 조언

     * 리뷰어를 고려해 글 쓰기
     * ChatGPT 답변을 그대로 사용하지 않기
          + 구체적 예시 없이 장황한 답변이 생성됨
          + 개인적인 경험이 없는 완벽한 글보다는 지원자의 경험을 반영하는 불완전한 글이 훨씬 나음
          + 어떤 회사는 지원 자격으로 명시하기도 함
     * 미사여구보단 담백한 단어를 쓰기
          + experienced, started, built, learned, used 등의 표현을 권장
     * 설명하기보단 보여주기
          + ""능숙하게 프로그램을 작성함""보단 ""자바 코드 500줄로 POSIX Make 명령어의 서브셋을 빠르게 만듦""이 더 나음
     * 일반적인 말보단 예시를 들어 세부 사항을 말해주기
     * 버즈워드(buzzword) 대신 어떤 분야에서 어떤 도구로 어떤 고객을 어떻게 도왔는지 구체적으로 작성하기
     * 지원 시 유의 사항을 따르기
          + 익명으로 제출하라 했으나 실명으로 제출한 경우 지원자에게 유리하지 않음
     * 이력서/CV 작성 팁
          + GitHub 프로필에 괜찮은 프로젝트만 있는지 검토하기
          + 스스로 만든 것을 링크하기
          + 영어 혹은 요구된 언어로 작성하기
          + 할 줄 아는 모든 스킬을 나열하지 않기
          + 이력서 디자인이 눈에 띄게 만들기

     GitHub 프로필에 괜찮은 프로젝트만 있는지 검토하기
     본문 내용처럼 (철지난)유명한 저장소 포크가 덜렁 있으면 좀 그렇더라구요.

   뭐 없지만 github 링크는 넣는데, 면접에서 물어봐준 회사는 아직 없네요. 물어봐주면 면접자에게도 좋은 이미지로 남을텐데..

   저흰 github링크 안주면 면접전에 요청해요.
"
"https://news.hada.io/topic?id=13638","윈도우 API의 리더/라이터 락에 발생한 버그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       윈도우 API의 리더/라이터 락에 발생한 버그

Windows에서 std::shared_mutex의 버그 가능성

     * 한 소프트웨어 팀이 Windows에서 std::shared_mutex와 관련된 예상치 못한 동작을 발견함.
     * 이 문제는 MSVC에서만 발생하며, MinGW나 다른 플랫폼에서는 발생하지 않음.
     * 주요 스레드가 독점 잠금을 획득한 후 여러 자식 스레드가 공유 잠금을 획득하려고 할 때, 약 1000번 중 1번 꼴로 ""데드락""이 발생함.
     * 데드락이 발생하면 정확히 1개의 자식 스레드만 공유 잠금을 성공적으로 획득하고, 나머지 자식 스레드는 lock_shared()에서 영원히 차단됨.
     * 이 문제는 std::shared_mutex, std::shared_lock/std::unique_lock 또는 직접 SRW 함수를 호출할 때 관찰됨.

코드 예제와 버그 재현

     * 문제를 재현할 수 있는 간단한 코드가 제공됨.
     * 코드는 주 스레드가 독점 잠금을 획득하고, 여러 자식 스레드가 공유 잠금을 획득한 후 이를 해제하는 과정을 반복함.
     * 이 코드는 Windows MSVC 구현에서만 std::shared_mutex와 관련된 버그를 보여줌.

전문가의 의견

     * STL 개발자는 이 문제가 Windows API 버그로 보인다고 언급함.
     * 버그를 보고하기 위한 적절한 단계에 대한 논의가 있었으며, STL 개발자가 내부적으로 버그를 보고함.
     * 다른 사용자들은 이 문제를 자세히 조사하고, SRWLock 구현의 특정 버그를 좁혀내는 데 기여함.

GN⁺의 의견

     * 이 기사는 C++ 개발자들에게 특히 중요한 정보를 제공함. std::shared_mutex의 잠재적인 버그는 멀티스레딩 애플리케이션의 동기화 메커니즘에 영향을 줄 수 있기 때문임.
     * 버그가 확인되면, 이는 C++ 표준 라이브러리의 구현에 대한 신뢰도에 영향을 미칠 수 있음. 개발자들은 이러한 문제를 인지하고 대안적인 동기화 메커니즘을 고려해야 할 수도 있음.
     * 이 문제는 특히 고성능이나 실시간 시스템에서 중요할 수 있음. 이러한 시스템에서는 데드락이 치명적인 결과를 초래할 수 있기 때문임.
     * 이 기술을 도입하기 전에, 개발자들은 해당 플랫폼과 컴파일러에 대한 광범위한 테스트를 수행하여 이러한 유형의 버그가 없는지 확인해야 함.
     * 이러한 문제를 해결하기 위해, 개발자들은 Boost 라이브러리와 같은 대체 동기화 라이브러리를 고려할 수 있음. Boost는 광범위하게 테스트되고 많은 플랫폼에서 사용되므로, 이러한 문제에 대한 안정적인 대안을 제공할 수 있음.

        Hacker News 의견

     * 한 사용자는 기본적인 문제가 오랫동안 발견되지 않은 이유에 대해 궁금해하며, 다른 사용자가 제공한 설득력 있는 답변을 언급함. 공유 모드로 잠금을 시도하는 스레드가 실수로 독점 모드로 잠금을 얻을 수 있는 경우가 있음을 지적함. 이는 공유 모드 획득 스레드와 독점 모드 해제 스레드가 동시에 실행될 때 발생하는 원자적 비트 테스트 및 설정 연산의 중첩 때문임.

          + 한 사용자는 공유 잠금을 획득하는 동안 다른 모든 스레드가 공유 잠금을 획득하기를 기다리는 재현 코드가 있으며, 이로 인해 어떤 작업 스레드가 실수로 독점 잠금을 얻게 되면 교착 상태에 빠질 수 있음을 설명함. 일반적인 사용 사례에서는 스레드가 서로 기다리지 않으므로 교착 상태가 발생하지 않음.

     * 또 다른 사용자는 Reader/Writer 잠금에서 발생하는 미묘한 버그에 놀라지 않는다고 언급하며, C++11과 std::shared_mutex 이전에 Win32 기반으로 내부 구현을 작업한 경험을 공유함. 공유 잠금에 대한 나쁜 경험으로 인해 절대적으로 필요하지 않는 한 피하려고 함을 밝힘.

          + 한 사용자는 공유 잠금에 대한 부정적인 경험을 공유하며, std::shared_mutex의 성능이 std::mutex에 비해 현저히 떨어져 데이터를 더블 버퍼링하는 것이 더 빠르다고 언급함.

     * 한 사용자는 제목이 오해의 소지가 있다고 지적하며, 실제 버그는 Windows API의 slim reader/writer (SRW) 잠금에 있으며, std::shared_mutex가 SRW 잠금을 사용하여 구현되었기 때문에 발견된 것임을 설명함. 마이크로소프트 직원이 버그가 Windows API 팀에 내부적으로 제기되었다고 확인함.

          + 한 사용자는 오해의 소지가 있는 제목에 대해 지적하며, 실제 문제는 Windows API의 SRW 잠금에 있으며, 마이크로소프트 직원이 버그가 제기되었다고 확인함을 언급함.

     * 한 사용자는 WINE의 구현에서도 동일한 문제가 발생하는지 궁금해하며, 자신의 맞춤형 XP 설치에서도 테스트하고 싶다고 언급함. 해당 설치에서는 SRW API를 포함한 여러 확장을 추가했으며, SRW 구현에 기반한 keyed event API에서 교착 상태를 일으키는 경쟁 조건을 수정하기 위해 커널을 패치했다고 함.

          + 한 사용자는 WINE 구현에서도 같은 문제가 발생하는지 궁금하며, 자신의 맞춤 XP 설치에서 테스트하고 싶다고 언급함. 이 설치에서는 SRW API를 포함한 여러 확장을 추가하고, SRW 구현에 기반한 keyed event API에서 교착 상태를 일으키는 경쟁 조건을 수정하기 위해 커널을 패치했다고 함.

     * 프로그램에 버그가 있음이 지적됨. atomic이 아닌 변수와 atomic 변수를 혼용하여 yield() 검사 루프에서 사용하고 있으며, atomic이 아닌 변수는 다른 스레드에 대한 캐시 일관성을 보장하지 않음. 이로 인해 루프가 영원히 실행될 수 있음.

          + 한 사용자는 프로그램의 버그를 지적하며, atomic이 아닌 변수와 atomic 변수를 혼용하여 사용함으로써 발생하는 문제를 설명함. atomic이 아닌 변수는 캐시 일관성을 보장하지 않아 루프가 무한히 실행될 수 있음을 언급함.

     * 한 사용자는 이 버그가 2008년 Vista 버전까지 거슬러 올라가며, 이렇게 오랜 시간 동안 아무도 이 버그를 발견하지 못한 것에 대해 놀라움을 표함. 일반적인 rwlock 사용에서는 공유 잠금을 획득하지 못하는 무작위 사례가 발생할 수 있으나 교착 상태는 발생하지 않음을 언급함.

          + 한 사용자는 이 버그가 Vista 버전까지 거슬러 올라가며, 오랜 시간 동안 발견되지 않은 것에 대해 놀라움을 표함. 일반적인 rwlock 사용에서는 교착 상태가 발생하지 않지만 공유 잠금을 획득하지 못하는 사례가 발생할 수 있음을 언급함.

     * 한 사용자는 Windows API에 대한 버그를 보고하는 것이 매우 어렵다고 언급하며, Feedback Hub를 통해 보고하라는 지시를 받지만, 이는 거의 효과가 없다고 비판함. 해당 사용자는 SRWLOCK이 독점 소유자가 소유권을 해제한 후 여러 읽기 스레드가 공유 소유권을 함께 획득하려고 할 때 교착 상태에 빠질 수 있다는 버그를 보고함.

          + 한 사용자는 Windows API에 대한 버그 보고가 매우 어렵다고 언급하며, Feedback Hub를 통한 보고가 효과적이지 않다고 비판함. SRWLOCK 관련 버그를 보고한 사실을 공유함.

     * 한 사용자는 과거에 MS 제품을 구매하면 지원 사건을 받을 수 있었으며, 실제 버그를 발견하면 지원 사건이 환불되었다고 회상함. 이는 개발자에게 유익했고, MS에게도 실제 문제를 발견하고 문서를 개선할 수 있는 피드백을 제공하는 좋은 시스템이었음을 언급함. 이 프로그램이 여전히 존재하는지 궁금해함.

          + 한 사용자는 과거 MS 제품에 포함된 지원 사건에 대해 회상하며, 이 시스템이 개발자와 MS 모두에게 유익했다고 언급함. 현재 이 프로그램이 존재하는지 궁금해함.

     * 마지막으로 한 사용자는 Windows API에 대한 버그를 보고하는 것이 어렵다는 점에 대해 실망감을 표현함.

          + 한 사용자는 Windows API에 대한 버그 보고의 어려움에 대해 실망감을 표현함.
"
"https://news.hada.io/topic?id=13654","사라진 데이터 타입을 찾는 추적","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           사라진 데이터 타입을 찾는 추적

누락된 데이터 유형을 찾아서

     * 그래프는 노드의 집합으로, 화살표(간선)로 연결됨.
     * 노드와 간선에 데이터를 포함할 수 있음.
     * 소프트웨어 엔지니어링에서 그래프는 패키지 의존성, 인터넷 링크, 소프트웨어의 상태 공간, 관계형 데이터베이스, 연결 리스트, 이진 트리, 해시 테이블 등 다양한 형태로 존재함.
     * 비즈니스 로직에서도 그래프는 인용문의 참조, 교통 네트워크, 소셜 네트워크 등으로 활용됨.
     * 소프트웨어 개발을 오래하면 어디서든 그래프를 마주칠 가능성이 높음.

그래프 사용에 대한 고민

     * 그래프는 유용하지만, 실제 코드에서 그래프를 사용하는 것은 부담스러움.
     * 대부분의 주류 언어에서 그래프를 내장 타입으로 지원하지 않고, 표준 라이브러리에서도 드물며, 견고한 서드파티 라이브러리도 많지 않음.
     * 그래프를 직접 구현해야 하는 경우가 많음.
     * 소프트웨어 엔지니어가 그래프를 사용할 수 있는 빈도와 프로그래밍 생태계에서의 지원 사이에 격차가 존재함.

그래프 타입이 없는 이유

    디자인 선택이 너무 많음

     * 방향성이 있는 그래프와 없는 그래프, 단순 그래프와 다중 그래프, 하이퍼그래프, 우버그래프 등 다양한 그래프 유형이 존재함.
     * 각 유형에 대해 노드와 간선에 ID를 부여할지, 어떤 데이터를 저장할지 등의 결정이 필요함.
     * 모든 가능성을 지원하는 완벽한 그래프 라이브러리는 많은 시간을 필요로 함.
     * 그래프 알고리즘의 성능이 중요하며, 특수한 경우가 중요함.
     * 그래프 알고리즘은 올바르게 구현하기 어려움.

    구현 선택이 너무 많음

     * 간단한 방향성 그래프만을 지원한다고 가정해도, 그래프를 내부적으로 표현하는 방법에는 여러 가지가 있음.
     * 간선 리스트, 인접 리스트, 인접 행렬, 구조체의 집합 등 다양한 저장 방식이 존재함.
     * 다른 그래프 연산은 다른 표현 방식에서 다른 성능 특성을 가짐.
     * 그래프의 희소성과 밀집성에 따라 최적의 내부 그래프 표현 방식이 달라짐.
     * 노드 데이터, 간선 데이터, 다양한 유형의 노드와 간선을 구현하는 것은 더 복잡함.

    성능이 너무 중요함

     * 많은 그래프 알고리즘은 NP-완전 문제이거나 더 어려움.
     * 그래프는 매우 큰 문제가 될 수 있으며, 표현 방식과 알고리즘 구현 세부 사항에 따라 성능이 크게 달라짐.
     * 데이터 표현과 알고리즘에 대한 많은 제어가 필요함.

일치된 의견

     * 다양한 그래프 유형, 표현, 알고리즘, 성능에 민감함, 큰 그래프에서 비싼 알고리즘 실행 등이 그래프 지원이 널리 퍼지지 않은 이유임.
     * 언어가 표준 라이브러리에서 그래프를 지원하지 않는 이유를 설명함.
     * 프로그래머가 서드파티 그래프 라이브러리를 피하는 이유를 설명함.
     * 그래프를 사용하는 것이 어렵기 때문에 극단적인 상황이 아니면 그래프로 생각하고 싶지 않은 이유를 설명함.

GN⁺의 의견

     * 이 기사는 그래프가 프로그래밍 언어와 라이브러리에서 왜 기본적인 데이터 유형으로 자리 잡지 못했는지에 대한 통찰을 제공함.
     * 그래프 이론은 컴퓨터 과학의 중요한 분야이며, 알고리즘, 네트워크 분석, 데이터베이스 등 다양한 영역에서 응용됨.
     * 그래프를 효과적으로 사용하기 위해서는 성능 최적화와 적절한 데이터 구조 선택이 중요함.
     * 서드파티 라이브러리로는 NetworkX, Boost Graph Library, Graph-tool 등이 있으며, 이들은 다양한 그래프 문제를 해결하는 데 사용될 수 있음.
     * 그래프를 사용할 때는 문제의 특성에 맞는 그래프 유형과 알고리즘을 선택하는 것이 중요하며, 이는 시스템의 성능과 직결됨.

        Hacker News 의견

     * Graphviz는 독자적인 그래프 라이브러리를 가지고 있으며, 이는 다른 프로젝트에서 사용되지 않는다. 이 라이브러리는 장단점이 있다.
          + 이 경험을 바탕으로, 그들은 자신들만의 '두 번째 시스템 증후군'을 겪었다.
          + 그래프 라이브러리는 모듈식이며, 타입 안전하고, 효율적이어야 한다고 결정했다. 이는 ""좋고, 빠르고, 저렴하게 - 둘 중 하나를 선택하라""는 말의 변형일 수 있다.
          + 모듈식이란 독립적으로 개발되고 컴파일되는 그래프 알고리즘 라이브러리 모음을 작성하고자 함을 의미한다.
          + 타입 안전이란 컴파일 시 또는 늦어도 링크 시 프로그래밍 오류를 감지하고자 함을 의미한다. 실행 시간 오류는 원치 않는다.
          + 효율성이란 그래프의 속성에 접근하는 것이 C 구조체의 필드처럼 저렴해야 함을 의미한다.
          + 이러한 목표가 가치가 있는지 논란의 여지가 있지만, 그들이 원하는 바였다. 유명한 C++ 창시자들이 그들의 연구실에 있었기 때문에 도움을 받을 수 있을 것으로 기대했고, C++에 다시 한 번 기회를 주기로 했다.
          + 인턴 출신인 Gordon Woodhull은 뛰어난 프로그래머로, 템플릿 C++에서 이러한 종류의 그래프 라이브러리를 구현했다. 이는 sourceforge를 통해 https://www.dynagraph.org/에서 공개되었다.
          + 다른 사람들은 코드가 어떻게 작동하는지 이해할 수 있을지 확신하지 못했기 때문에, 유명한 C++ 발명가들과 코드 리뷰를 진행했다. 복잡성의 벼랑을 넘어섰을 수도 있다는 것을 알았다.
          + 이는 Gordon의 잘못이 아니었고, 그는 계속해서 플러그를 꽂고 마이크로소프트 OLE에서도 동적 그래프 레이아웃 작업을 성공적으로 수행했다. 회고해보면, 이는 그들만의 프로젝트 자나두였을 수 있다.
          + 그들이 이에 몰두하는 동안, Gephi(Java)와 NetworkX 및 NetworKit(Python)과 같은 많은 것들이 등장했다.
          + John Ellson은 Graphviz의 일부를 작성한 매우 재능 있는 소프트웨어 엔지니어로, 주요 노력을 되살렸다.
     * .NET에서 코딩하는 경우, 작고 기능이 풍부하지 않은 그래프 라이브러리 Arborescence를 시도해보길 바란다.
          + 이 라이브러리는 추상화, 알고리즘, 데이터 구조 사이의 좋은 분리를 제공한다고 믿는다.
          + 사용자는 자체 ID가 있는 엣지를 사용할 수도 있고, 즉석에서 펼쳐지는 암시적 그래프를 사용할 수도 있다.
          + 인접성(밖으로 향하는 이웃)과 인접성(밖으로 향하는 엣지 + 머리) 인터페이스를 모두 사용할 수 있다.
          + 라이브러리는 엣지 타입을 강제하지 않지만, 기본적인 꼬리-머리 쌍 구조를 유틸리티로 제공한다.
     * 그래프는 데이터 구조나 데이터 타입이 아니라 추상화이다.
          + 기본적으로 그래프를 정의하는 데 필요한 것은 정점 집합과 이웃 함수뿐이다.
          + 모든 다른 것들은 사례별 제약 조건이다.
          + 하이퍼그래프를 고려하면, 그래프는 단순히 특별한 경우에 불과하다.
          + 데이터베이스 관점에서 생각하면, 그래프는 쿼리 최적화 및 인덱싱 문제이다.
     * 프로그래밍 언어에 내장된 그래프 데이터 타입이 없는 이유에 대한 질문을 많이 받았다.
          + 이제 이 글과 같은 더 심도 있는 분석을 가리킬 수 있어 기쁘다.
     * 중앙 장애물은 다음과 같다:
          + 간단하고 작은 그래프 문제의 경우, 벡터의 벡터 인접 리스트를 코딩하는 것이 충분히 쉽다.
          + 복잡하고 거대한 그래프 문제의 경우, 문제에 맞는 그래프 구현을 맞춤화하는 것 외에는 성능을 얻을 수 있는 방법이 없다.
          + 어떤 종류의 언어 지원이 도움이 될지 명확하지 않다.
     * 이 글은 프로그래밍 언어에서 그래프 _알고리즘_이 더 잘 지원되지 않는 이유에 대한 질문에 대부분 답한다.
          + 그래프 지원을 일반적으로 살펴보면, OGM이 ORM만큼 인기가 없는 이유, JSON이 RDF보다 널리 사용되는 이유 등 더 넓은 질문을 볼 수 있다.
          + 결국 역사적인 이유와 그래프의 복잡성 때문에 개발자들 사이에서 잘 확장되지 않는다.
     * 그래프 그리기 도구도 매우 실망스럽다.
          + 500개 이상의 노드가 있는 그래프에서는 출력물이 이해하기 어렵거나 복잡해진다.
          + 그래프를 계층적 구조로 자동으로 구성하고 탐색하기 좋은 인터페이스를 제공하는 기능이 부족하다.
     * 이 글은 정말 멋지다.
          + ""구현 선택지가 너무 많다""는 핵심 관찰에 대해, 실제로는 그렇지 않다.
          + 실제로 라이브러리는 모든 적합한 그래프 표현을 구현할 수 있다.
          + 알고리즘을 표현에 맞게 맞춤화하고, 하나의 표현에서 다른 표현으로 변환할 수 있다.
     * Electric Clojure는 Clojure 자체(s-표현식)를 그래프 저작 구문으로 사용한다.
          + 그래프 저작 DSL은 범위, 제어 흐름, 추상화를 표현해야 하며, 이는 본질적으로 프로그래밍 언어와 동일하다.
     * 테이블(데이터베이스 내의 테이블과 같은)과 같은 또 다른 유용한 데이터 타입이 있다.
          + 컴파일러가 데이터 구조의 구현을 선택하게 하면 프로그래밍 언어에서 진전이 있을 것이다.
          + 추상 구조(시퀀스, 맵, 세트, 테이블, 그래프 등)를 사용하고 프로그램 프로필에 기반하여 컴파일러가 구체적인 구현을 선택한다.
"
"https://news.hada.io/topic?id=13601","당신이 방금 물려받은 레거시 C++ 코드베이스, 이제 어떻게 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 당신이 방금 물려받은 레거시 C++ 코드베이스, 이제 어떻게 할까?

기존 C++ 코드베이스를 상속받았다면 어떻게 해야 할까?

     * 새로운 직장을 시작하거나 팀을 변경하거나 경험이 많은 동료가 떠난 후, 복잡하고 독특한 구조를 가진 큰 C++ 코드베이스를 담당하게 됨.
     * 버그 수정과 새로운 기능 추가가 필요하지만, 코드베이스를 무시하거나 없애버릴 수는 없음. 이는 급여를 지불하는 이에게 중요하므로 당신에게도 중요함.

첫 단계: 코드를 로컬에서 작동시키기

     * 코드와 빌드 시스템에 최소한의 변경만을 수행하여 로컬에서 작동시킴. 아직 대대적인 리팩토링은 하지 않음.

불필요한 것들 제거하기

     * 회사나 오픈소스 프로젝트가 광고하고 판매하는 기능을 제공하는 데 절대적으로 필요하지 않은 모든 것을 제거함.

프로젝트를 21세기로 끌어올리기

     * CI(지속적 통합), 린터, 퍼징, 자동 포맷팅 등을 추가함.

점진적인 코드 개선

     * 코드에 작고 점진적인 변경을 수행함. 반복적으로 수행하여 애플리케이션의 보안, 개발자 경험, 정확성, 성능 측면에서 프로젝트를 수용 가능한 상태로 만듦.

메모리 안전한 언어로 일부 재작성 고려

     * 가능하다면, 메모리 안전한 언어로 일부 코드를 재작성하는 것을 고려함.

지원하는 플랫폼 명시하기

     * README에 공식적으로 지원하는 <아키텍처>-<운영체제> 쌍을 명시함. 예를 들어 x86_64-linux 또는 aarch64-darwin 등.

머신에서 빌드 작동시키기

     * 모든 지원 플랫폼에서 신뢰할 수 있고 일관되게 빌드할 수 있도록 함.

머신에서 테스트 통과시키기

     * 테스트가 없다면, 코드 변경 전에 테스트를 작성하고 통과시킨 후에 돌아옴.

README에 애플리케이션 빌드 및 테스트 방법 기술하기

     * 빌드와 테스트를 위한 명령어를 간단하게 만들어서 비전문가도 쉽게 따라할 수 있도록 함.

빌드와 테스트 속도를 높이기 위한 저달과일 찾기

     * 빌드 시스템 변경 없이 빌드와 테스트 속도를 높일 수 있는 간단한 방법을 찾음.

불필요한 코드 제거하기

     * 컴파일러 경고와 린터를 사용하여 사용되지 않는 코드를 찾아 제거함.

린터

     * 린터 규칙에 대해 과도하게 몰두하지 않고 기본적인 몇 가지를 추가하고, 개발 주기에 통합함.

코드 포매팅

     * 적절한 시점에 전체 코드베이스에 대해 일괄적으로 코드 스타일을 적용하고, 설정을 커밋함.

산타이저

     * 산타이저를 사용하여 실제 버그와 메모리 누수를 탐지하고 수정함.

CI 파이프라인 추가하기

     * 모든 설정된 좋은 점들(린터, 코드 포매팅, 테스트 등)을 자동화하고, 모든 변경 사항에 대해 생산 환경에서 바이너리를 생성함.

점진적인 코드 개선

     * 보안, 정확성, 성능과 같은 구체적인 목표에 집중하고, '깨끗한 코드'와 같은 주관적 기준에서 벗어남.

메모리 안전한 언어로 재작성?

     * 현재 진행 중인 작업으로, 많은 주의사항이 있음. 명확한 이유가 있을 때만 수행함.

결론

     * 복잡한 레거시 C++ 코드베이스에서 벗어나는 구체적이고 단계별 계획을 제공함.

부록: 의존성 관리

     * C++에서는 의존성 관리가 없으며, 대부분 시스템 패키지 매니저를 사용함. 그러나 이는 좋지 않은 생각임.
     * 의존성 관리에 대한 저자의 의견은 git 서브모듈과 소스 컴파일 방식을 사용하는 것임.

GN⁺의 의견

     * 이 기사는 C++ 코드베이스를 상속받은 초급 소프트웨어 엔지니어에게 유용한 단계별 가이드를 제공함.
     * 레거시 코드를 다루는 것은 많은 개발자에게 공통된 도전이며, 이 기사는 그러한 상황에서 실질적인 조언을 제공함.
     * 코드베이스를 개선하는 과정에서 테스트의 중요성을 강조하는 것은 좋은 소프트웨어 개발 관행을 반영함.
     * 의존성 관리에 대한 저자의 의견은 논란의 여지가 있으며, 실제 프로젝트에서는 Conan이나 vcpkg와 같은 현대적인 패키지 매니저를 성공적으로 사용하는 경우도 많음.
     * 기술을 도입할 때는 프로젝트의 특성과 팀의 기술 수준을 고려해야 하며, 이 기사는 그러한 결정을 내리는 데 도움이 될 수 있는 좋은 출발점을 제공함.

        Hacker News 의견

     * 일부 해커뉴스 댓글에서는 C++ 프로젝트를 상속받았을 때의 조언이 제시됨:
          + 재현 가능한 빌드: 도커 같은 도구를 사용하여 빌드 환경을 감싸서 도구와 의존성을 명확하고 재현 가능하게 만들 것을 권장함.
          + -Wall 옵션으로 깨끗하게 빌드하기: 경고를 해결하여 코드의 문제를 수정하고, 드물게는 이해한 후에 경고를 무시하는 것도 가능함.
          + Valgrind와 같은 도구로 초기 테스팅을 하여 읽기/쓰기 오류를 조사할 것을 제안함.
          + 리팩토링은 초기에는 지역화된 범위에서 유지하고, 전체 구조를 이해하기 전에 대규모 재설계를 피할 것을 권장함.
     * 다른 댓글에서는 CI, linting, auto-formatting 등을 먼저 도입하는 것이 중요하다고 주장함:
          + 코드에서 불필요한 부분을 제거하기 전에 프로그램이 어떻게 작동하는지 이해하고, 정적 분석 도구를 통해 프로그램이 어디서 작업이 필요한지 통찰을 얻을 수 있음.
     * 한 사용자는 새로운 팀이나 회사로 이동하는 것을 제안함.
     * 코드 이해 도구와 기술의 중요성을 언급하는 댓글도 있음:
          + 코드베이스를 색인화하는 도구 사용과 UML 시퀀스 다이어그램 작성, 마치 타인에게 가르치듯이 노트 작성하는 것이 중요함.
     * 한 댓글은 프로젝트를 현대화하기 위해 CI, linters, fuzzing, auto-formatting 등을 추가하는 것에 대한 조언을 제시함:
          + CI를 통해 다른 곳에서도 빌드가 가능하도록 하고, 컴파일러 경고 및 정적 분석기를 활용하여 코드 문제를 파악함.
          + 중요한 코드 부분에 대한 단위 테스트를 설정하여 코드가 정확한 작업을 수행하는지 확인함.
          + 자동 포매팅은 우선순위가 낮으며, 원래 유지자의 스타일을 따를 것을 권장함.
     * 또 다른 댓글에서는 메모리 안전한 언어로 일부를 다시 작성하는 것에 대한 조언을 비판함:
          + 추가 작업에 필요한 자원 확보가 어렵고, C++ 외에 추가 언어에 대한 지식이 필요하며, 테스팅이 더 복잡해질 수 있음.
     * git 서브모듈과 소스 컴파일 방식을 사용하는 것이 패키지 관리자보다 우수하다고 주장하는 댓글도 있음:
          + vcpkg와 같은 도구를 사용해보기 전에 이러한 비판을 제기하는 것은 이상함을 지적함.

   이러한 댓글들은 C++ 프로젝트를 상속받았을 때의 다양한 접근 방식과 조언을 제공하며, 프로젝트 관리, 코드 이해, 리팩토링, 현대화 전략 등에 대한 다양한 의견을 나타냄.
"
"https://news.hada.io/topic?id=13553","Ask GN: 자격증을 공부하는 이유는 무엇입니까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 자격증을 공부하는 이유는 무엇입니까

   It에 관련된 자격증은 수두룩하게 많죠, aws certificate, adsp 등등... 허나 이 무엇도 이직이나 큰 돈을 보장해주지 않습니다. 그럼에도 배우시는 이유가 무엇입니까?

   내가 어떤 지식을 가지고 있음을 간편하고 빠르게 알려줄 수 있죠.

   물론 자격증 몇 개 가지고 사람을 판단하는 행위의 정확도? 끔찍합니다
   하지만 그나마 기준으로 삼을 만한 객관적인 지표니까요.
   ""이 일에 당신이 적절한 능력을 가지고 있나요?"" 라는 질문에 답변하는 것은 자기 자신조차 하기 힘든 일이잖아요?

   자격증 공부하면 단시간에 빡시게 공부하게 되더라구요. 나름 전형적으로 필요한 정보들 습득할 때 좋은 수단이 된다고 생각합니다. 다만 너무 딱딱한 질문들이 많은 자격증은 공부하기도.. 시험보기도 쉽지 않더군요

   저도 동일하네요. 평소에 여러 핑계 대면서 게을러질때 자격증 공부라는 확실한 목표가 있으면 바짝 공부하게 되더라구요.

   보장은 해주지 않지만 이직 시 서류 전형 단계에서 어느정도 도움은 된다고 생각합니다.

   한 분야 뭘 공부해야 할지 애매할 때 , 자격증 공부가 틀 잡는데 도움 되었네요.

   반대로 보장해주는 것 있으면 알려 주세요. 그걸 몰라서 공부합니다.
"
"https://news.hada.io/topic?id=13632","FOSS(2021) 사용을 위한 Discord 비추천","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FOSS(2021) 사용을 위한 Discord 비추천

FOSS 프로젝트를 위한 Discord 사용에 대한 경고

     * FOSS(자유 소프트웨어/오픈 소스) 프로젝트의 즉각적인 메시징 요구를 위해 Slack을 사용하는 것에 반대하는 글을 작성한 지 6년이 지난 후, Discord라는 새로운 독점적 채팅 트렌드가 등장함.
     * Discord를 사용하는 것은 FOSS 소프트웨어 프로젝트에 매우 나쁜 생각임. 자유 소프트웨어의 중요성을 강조하며, Discord 사용은 커뮤니티를 독점적 클라이언트 사용자와 비사용자로 나누고, 자유 소프트웨어에 열정적인 사용자들을 이차 시민으로 만듦.

접근성 및 사용자 배제 문제

     * Discord는 접근성이 필요한 사용자들에게 악몽 같은 경험을 제공하며, 자원 집약적인 클라이언트로 인해 새로운 하드웨어를 구매할 여력이 없는 사용자들을 배제함.
     * 또한, 미국 제재를 받는 국가의 사용자들, 개인 정보를 중시하는 사용자들, Tor나 VPN을 사용하는 사용자들을 커뮤니티에서 배제함.

Discord와 FOSS 커뮤니티 간의 이해관계 충돌

     * Discord는 채팅 로그의 소유권, 유용한 봇 설정, 프로젝트 공간의 자율적 관리 등을 포함해 여러 권리를 독점함.
     * FOSS 커뮤니티는 독점적 클라이언트에 대해 협력하여 혁신하거나, 자신들의 필요에 더 잘 부합하는 클라이언트를 개발할 수 없음.

FOSS 플랫폼에 대한 투자의 중요성

     * Discord를 선택함으로써 FOSS 플랫폼에 대한 투자를 감소시키고, Discord 플랫폼을 정당화함.
     * FOSS 생태계는 벤처 캐피탈이나 큰 마케팅 예산에 접근하지 못하며, 시장 점유를 위해 어두운 패턴이나 포식적 전략을 사용하는 것을 꺼림.
     * FOSS 프로젝트를 사용하는 사람들이 FOSS 플랫폼을 선택하지 않을 경우, 상호 지원과 연대가 성공의 열쇠임.

FOSS 대안들

     * SourceHut은 IRC에 투자하여 chat.sr.ht와 같은 더 접근하기 쉬운 서비스를 구축함.
     * Matrix와 Zulip도 훌륭한 FOSS 대안임.

일반화된 논의

     * 이 논의는 ""Discord""를 ""GitHub"", ""Twitter"", ""YouTube"" 등으로 대체해도 유사함.
     * 프로젝트가 독점적 인프라에 의존하는 경우, 그 선택이 프로젝트와 생태계의 장기적 성공에 무엇을 의미하는지 심각하게 논의할 필요가 있음.

GN⁺의 의견

     * Discord와 같은 독점적 플랫폼의 사용은 FOSS 원칙과 상충되며, 커뮤니티의 분열과 사용자 배제를 초래할 수 있음.
     * FOSS 생태계의 지속 가능한 성장과 혁신을 위해서는 오픈 소스 대안의 채택과 지원이 필수적임.
     * Matrix나 Zulip과 같은 오픈 소스 메시징 플랫폼은 사용자의 자율성을 존중하고, 커뮤니티 기반의 혁신을 가능하게 함.
     * Discord를 도입하기 전에는 접근성, 개인 정보 보호, 그리고 사용자 커뮤니티의 포괄성에 대한 고려가 필요함.
     * 이 기술을 선택함으로써 얻는 이점은 사용자 기반의 확장과 인기 있는 플랫폼의 편의성일 수 있으나, 장기적인 FOSS 원칙에 대한 투자 손실과 커뮤니티의 분열이라는 손실을 감수해야 함.

        Hacker News 의견

     * 코드를 인터넷에 공개하려는 목적이라면 어떤 플랫폼을 사용해도 좋지만, 최대한 많은 사람들에게 도움을 주고자 한다면 GitHub과 Discord가 필수적임. 이 두 플랫폼은 현대 오픈소스 프로젝트 개발에 가장 많이 사용되며, 다른 옵션을 선택하면 프로젝트 발견 및 참여자 수가 현저히 줄어듦. 한 프로젝트에서 Matrix를 사용하도록 강제했지만, Discord를 도입한 후 대부분의 참여자가 Discord로 이동했고, 커뮤니티 규모도 훨씬 빠르게 성장함.
     * Discord를 통한 지원 서비스에 대한 부정적인 경험을 공유함. 유료 제품 지원을 Discord에서만 제공했으나, 전화번호 인증 시스템에 문제가 있었고, 고객 지원은 시스템 수정 대신 다른 사람의 전화번호를 빌려 인증하라고 제안함. 이러한 대응은 전화번호 인증의 의미를 퇴색시킴.
     * 분산화, 프라이버시, 보안 프로젝트가 Discord를 사용하는 것을 보면 심각하게 받아들이기 어려움. ""Discord에 참여하세요""라는 메시지를 보면 해당 탭을 닫음.
     * Discord가 커뮤니티 참여 도구로서 뛰어난 점을 인정함. 초기 GitHub 시절에는 이와 같은 도구가 없었지만, Discord는 많은 사람들이 사용하고 있으며, GitButler 서버를 통해 사용자들과 연결하는 데 매우 효과적임. 실시간 채팅은 GitHub 이슈 트래커보다 훨씬 강력함.
     * GitHub은 git 기반 서비스로서 계정이 없는 사람들도 저장소를 다운로드할 수 있지만, Discord는 그렇지 않음. GitHub와 Discord를 사용하는 것이 문제가 될 수 있지만, GitHub에 미러링하고 다른 서비스에도 호스팅하면 문제가 덜함.
     * 포럼의 독립성과 프로젝트/커뮤니티의 역사를 기록하는 방식에 대한 가치를 그리워하는 의견이 있음. Discord는 실시간 채팅 플랫폼으로서 포럼과 같은 기능을 제공하지 않음.
     * Discord는 IRC보다 사용하기 쉬운 버전임. IRC 채널은 대부분 로그를 남기지 않았지만, Discord는 그렇지 않음. 분산화된 오픈소스보다는 중앙집중식 비영리 기관이 GitHub과 같은 서비스를 운영하는 것이 필요함.
     * 자유 소프트웨어에 열정적인 사람들이 무시받고, 접근성이 떨어지며, 구형 컴퓨터나 특이한 OS/장치 사용자, 특정 국가의 사용자, 프라이버시를 중시하는 사용자들이 Discord 사용에서 배제됨.
     * 2024년 현재 IRC는 적합하지 않은 플랫폼이며, Matrix도 인기를 얻지 못함. 실시간 채팅을 제공하는 Discord가 커뮤니티 상호작용에 더 나은 플랫폼임.
     * Matrix, Telegram, Discord 간에 브리징된 지원 채팅을 유지하는 프로젝트 관리자의 경험을 공유함. Discord를 사용하는 것에 대해 신중히 고민한 끝에, 모든 채널을 비-Discord와 브리징하여 커뮤니티가 분열되지 않도록 함. Discord 특정 기능을 피하고 FOSS 사용자를 우선시함으로써 타협을 통해 목표를 달성함.
"
"https://news.hada.io/topic?id=13628","CS 6120: 고급 컴파일러: 자기주도 온라인 강좌","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     CS 6120: 고급 컴파일러: 자기주도 온라인 강좌

        Hacker News 의견

     * 컴파일러 작성 전에 컴퓨터 아키텍처를 이해하고 컴파일러가 효율적인 기계 코드를 생성하기 위해 무엇을 생성해야 하는지 알아야 한다고 생각함. 학교나 대학에서 컴퓨터 아키텍처와 시스템 프로그래밍을 점점 덜 중요시하는 경향이 있지만, 이 지식은 업계 최고의 일자리를 얻는 데 중요함.
     * 한 사용자는 MANGA(메타, 애플, 엔비디아, 구글, 아마존) 회사의 컴파일러 엔지니어링 팀 인터뷰를 통과하는 데 도움이 된 특정 과정을 언급함. 워털루 대학의 저수준 컴퓨팅 시스템 커리큘럼이 이미 뛰어났고, 오픈 소스 컴파일러 프로젝트에 기여하고 있었지만, 이 과정은 인터뷰 중 가장 어려운 질문에 답하는 데 도움이 됨.
     * 고급 컴파일러 최적화에 대한 심도 있는 학술 자료가 부족하다고 느낌. 많은 과정들이 입문 수준이며, 실제로 흥미로운 기술을 배우려면 인기 있는 오픈 소스 컴파일러의 소스 코드를 깊이 파고들어야 함.
     * 컴파일러 분야는 약 30년 동안 크게 발전하지 않았음. 2004-2006년에 페루자 대학에서 강의를 했는데, 당시 사용한 자료가 이미 15-20-25년 된 것이었음. 최근에 변화가 있는 것으로 보임.
     * 고급 주제를 자신의 속도로 학습할 수 있는 과정이 있어서 기쁨. 컴파일러 엔지니어로서의 경력을 원했지만, 거주 지역에서는 교육과 직업 기회가 많지 않음. 미국의 직업 시장은 경쟁이 치열하며, 어떻게 진입해야 할지 모르겠음. 학사 과정 중 수강한 과정이 유일한 경험임.
     * ""통합된 가비지 컬렉션 이론""도 포함되어 있어서 학생들이 참조 카운팅(RC)과 추적 가비지 컬렉션(GC)에 대한 올바른 이해를 할 수 있음.
     * 20년 전에 참석한 일반 컴파일러 구축 과정에서 다룬 내용과 기본적으로 동일함. 몇몇 새로운 논문이 링크되어 있어서 살펴볼 가치가 있음. 18년 동안 컴파일러 소스 코드를 보지 않아 프로파일링과 경로 기반 최적화에 대해 뒤처진 느낌임. 또한 ML을 보면 더 고급 SIMD 기술이 있을 것으로 추측함.
     * CS 6120은 코넬 대학의 에이드리언 샘슨이 진행하는 프로그래밍 언어 구현에 관한 박사 과정임. 이 과정이 매우 고급인지 궁금함.
     * 몇 년 전 여름에 이 과정을 온라인으로 수강하고 많은 것을 배움. Bril IR에서 작은 이슈에 대한 PR을 제출하고 교수와 함께 수정하는 것이 매우 흥미로웠음을 공유함.
     * 이 과정에 앞서는 과정이 있는지 궁금함.
"
"https://news.hada.io/topic?id=13591","HDMI 포럼, AMD가 요청한 오픈소스 HDMI 2.1 드라이버 지원 거부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HDMI 포럼, AMD가 요청한 오픈소스 HDMI 2.1 드라이버 지원 거부

     * AMD의 오픈소스 리눅스 그래픽 드라이버는 HDMI 포럼의 법적 요구로 인해 HDMI 2.1+ 기능을 구현하지 못하는 한계를 가짐.
     * AMD 엔지니어들은 HDMI 2.1+ 기능을 오픈소스 리눅스 커널 드라이버로 제공하기 위해 HDMI 포럼과 협력하여 해결책을 모색했으나, 노력이 실패로 끝남.
     * AMD 리눅스 드라이버를 통해 4K@120Hz 및 5K@240Hz 해상도 지원이 불가능한 문제가 3년간 보고됨.

HDMI 포럼의 공개 사양 접근 폐쇄로 오픈소스 지원에 타격

     * HDMI 포럼이 공개 사양 접근을 폐쇄하면서 오픈소스 지원에 어려움을 겪음.
     * AMD와 X.Org 재단은 HDMI 포럼과 협력하여 오픈소스 구현을 위한 해결책을 찾으려 했으나, HDMI 포럼이 AMD의 요청을 거부함.

AMD의 노력과 HDMI 포럼의 거부

     * AMD 리눅스 엔지니어들은 법적 팀과 함께 수개월간 HDMI 기능을 평가하고 오픈소스 드라이버에서 어떻게 공개할 수 있는지를 결정하기 위해 노력함.
     * AMD는 내부적으로 작동하는 코드를 가지고 있었고, 몇 달간 HDMI 포럼의 승인을 기다렸으나, 결국 거부당함.
     * AMD 리눅스 엔지니어 Alex Deucher는 HDMI 포럼이 제안을 거부했으며, HDMI 포럼의 요구사항을 위반하지 않고 오픈소스 HDMI 2.1 구현이 불가능하다고 언급함.

추가 맥락과 오픈소스 지지자들의 대안

     * AMD는 내부 오픈소스 AMDGPU 코드베이스 내에서 HDMI 2.1+ 기능을 시연하기 위한 코드를 몇 달간 프로토타이핑했으나, 이제는 그 노력이 헛되이 될 수 있음.
     * 초기 오픈소스 AMD 드라이버 노력에서 GPU 비디오 가속을 공개하는 것에 대한 우려가 있었으며, 이는 HDCP/디지털 비디오 제한을 위반할 수 있음.
     * AMD가 (비공개) 펌웨어 내에서 더 많은 기능을 구현하거나 PSP IP 블록으로 보호되는 다른 방법을 찾을 수 있을지 불투명함.
     * 오픈소스 드라이버에서 HDMI 2.1+ 기능 지원이 단기간 내에 이루어질 가능성이 낮으므로, 오픈소스 지지자들은 가능한 한 DisplayPort 사용을 추구해야 함.

GN⁺의 의견

     * 이 기사는 오픈소스 드라이버 개발에 있어서 법적 제약과 기술적 한계가 어떻게 혁신을 저해할 수 있는지를 보여줌. AMD와 같은 대형 기업조차도 HDMI 포럼과 같은 조직의 규제로 인해 사용자에게 최신 기능을 제공하는 데 어려움을 겪고 있음을 알 수 있음.
     * HDMI 2.1+ 기능의 부재는 특히 고해상도와 고주사율을 요구하는 게이머나 전문가들에게 큰 영향을 미칠 수 있음. 이들은 오픈소스 드라이버의 한계로 인해 DisplayPort 같은 대안을 찾거나 비오픈소스 솔루션으로 전환할 수밖에 없음.
     * 이 문제는 오픈소스 커뮤니티가 기술 표준화 기구와 협력하여 더 개방적이고 혁신적인 기술 환경을 조성할 필요성을 강조함. 이러한 상황은 오픈소스 하드웨어 운동이나 대체 표준을 개발하는 노력에 더 많은 관심과 지원이 필요함을 시사함.
     * AMD와 같은 기업이 오픈소스 드라이버 개발에 투자하는 것은 커뮤니티에 긍정적인 영향을 미치지만, 이러한 노력이 법적 제약으로 인해 무산될 경우, 기업과 개발자 모두에게 실망스러운 결과를 초래할 수 있음.
     * HDMI 2.1+ 기능의 부재가 자신의 사용 사례에 어떤 영향을 미칠지 고려해야 하며, 필요한 경우 DisplayPort와 같은 대안을 모색해야 함.

   이런 거 때문에 저도 HDMI보다 DisplayPort를 더 선호하게 되더라구요. 왜 GPU에 HDMI 포트가 하나만 달려있고 DisplayPort는 3개나 달려있는지 다 이유가 있었음....

        Hacker News 의견

     * 한 사용자는 지난 15년 동안 TV에 사용자 지정 정보(예: 텍스트)를 오버레이할 수 있는 저렴한 소형 장치를 원했음을 언급함. 그러나 HDMI 신호를 디코딩하는 것은 '클럽'의 일원이 아니면 불법이기 때문에 이러한 장치가 존재하지 않는다고 함. 이는 DVD의 무단 복사를 우려하는 콘텐츠 제공업체들 때문이라고 함. 사용자는 이러한 장치에 대해 199달러까지 지불할 의사가 있으며, 오버레이 텍스트와 아이콘을 입력할 수 있는 오픈 API가 있기를 바람.
     * 또 다른 사용자는 오픈소스 리눅스 지지자들이 가능하다면 HDMI 대신 DisplayPort를 사용해야 한다고 언급함. 그리고 이는 USB-C 케이블을 통해 실행되는 여러 프로토콜 중 하나임을 지적함.
     * 한 사용자는 원칙적으로 불만족스럽지만, 리눅스에서 HDR이 제대로 작동할 때까지 TV에 PC를 연결해 쿠션 게이밍을 하고 싶어하는데 HDMI 2.1이 또 다른 문제라는 것을 알고 불만을 표함. 윈도우가 그런 기능을 위해 필요하다고 생각함.
     * 프랑스와 같이 소프트웨어 특허가 없는 국가에서 해당 작업을 수행하고 그 후에 결과물을 공개할 수 있는지에 대한 질문이 있었음. VLC의 예를 들며 물음.
     * HDMI 대신 DisplayPort를 사용하고 싶을 만한 이유가 있는지에 대한 질문이 있었음.
     * AMD가 HDMI를 포크하고 드라이버 지원을 추가하여 HDMI와 호환되는 자체 표준을 만들 수 있는지, 그리고 이를 방지하는 법률이나 사양에 관한 근본적인 문제가 있는지에 대한 질문이 있었음.
     * 한 사용자는 HDMI 신호 디코딩이 불법이라는 사실을 오늘에서야 알게 되었으며, HDMI가 오픈 프로토콜이라고 생각했었다고 함.
     * 누군가가 HDMI 사양을 유출하기를 바라며, 이미 유출되었을 수도 있다고 함. 최신 VESA 사양도 제한되어 있다고 언급하며, HDMI나 DP 연결의 제어 채널을 스니핑하는 것은 가능하다고 함. 이를 통해 기능을 역설계할 수 있음을 지적함.
     * 한 사용자는 이러한 정보를 알게 된 후 HDMI 기반 제품을 다시는 구매하지 않겠다고 선언함.
     * HDMI 포럼이 사양을 잠그려는 목적이 무엇인지, 그리고 사양 업데이트의 공개를 제한하기로 결정했을 때 제시된 이유가 있는지에 대한 질문이 있었음.
"
"https://news.hada.io/topic?id=13665","Supermium - 윈 2003/XP/7/8 등을 위한 크로미엄 브라우저 포크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Supermium - 윈 2003/XP/7/8 등을 위한 크로미엄 브라우저 포크

     * Chromium 기반의 최신 웹 브라우저로 Windows XP, 2003, Vista, 7, 8.x 및 그 이상 버전과 호환
     * 구글 크롬 대체품으로 프라이버시 및 사용성 향상을 제공하며, 구형 및 최신 Windows 시스템 모두에 최적화
     * Win32 (GitHub의 win32ss)에 의해 개발됨

Chrome과 Supermium의 주요 차이점

     * Aero Glass 및 Aero Glass 스타일 타이틀바 제공
     * 주요 취약점 패치의 신속한 대응, 공개 후 일주일 이내
     * 강화된 보안을 위한 기능적 샌드박스
     * Trapezoidal 탭, 투명 탭, 윤곽선 탭 등 사용자 정의 탭 옵션
     * ungoogled-chromium의 많은 플래그
     * Google Sync 지원
     * Windows 7 이상에서 DRM 콘텐츠 시청을 위한 Widevine CDM 지원
     * GDI 폰트 렌더링, chrome://flags에서 #force-gdi 사용
     * 브라우저 UI 요소에 지속적인 다크 모드 지원, chrome://flags에서 #force-dark-mode 사용
     * 32비트 빌드에서 SSE2 전용 프로세서 지원
     * 향후 지원 예정: Windows 2000, Ungoogled Chromium 기능, WebGPU for D3D9 렌더러, Manifest V2 (Google에 의해 제거되면), 그 외 더 많은 기능
     * Manifest v2/v3 확장으로 복제할 수 없는 기능 요청 가능

Supermium 브라우저 사용을 위한 요구 사항

     * Windows XP SP3 이상 또는 Windows Server 2003 SP2 이상
     * SSE2를 지원하는 인텔 펜티엄 4 프로세서 이상, 하이퍼스레딩 또는 듀얼코어 권장
     * 최소 Firefox 3 또는 Internet Explorer 7과 호환되는 메인 웹사이트
     * Chrome 확장 프로그램 지원, uBlock Origin 포함
     * Google Chrome과 달리 Manifest V2가 Supermium 브라우저에서 제거되지 않음
     * Chrome 웹 스토어에서 구할 수 없는 경우, uBO의 최신 빌드를 프로젝트의 GitHub에서 직접 다운로드 가능

최신 Supermium 브라우저 버전 122.0.6261.85 업데이트 내용

     * Windows 7에서 렌더러 안정화
     * 새로운 XP 호환 인스톨러 출시, 필요에 따라 바로가기 생성 및 이모지 표시를 위한 Noto Emoji 폰트 설치 가능
     * 32비트 Windows에서 chrome.dll 기반 변경으로 메모리 사용 감소
     * Windows XP에서의 인쇄 기능 개선
     * 64비트 Supermium에서 8K 비디오 시청 및 MEGA에서의 대용량 다운로드 작업 안정화
     * 릴리스 노트에서 더 많은 정보 확인 가능

   와 이건 진짜 너드 상 받을만하네요 ㅋㅋㅋ

  Hacker News 의견

     * 너드 상을 받을 만한 일이다. 나도 win32 코드 작업할 때 가능하면 오래된 윈도우 버전에서도 작동하는 함수를 쓰려고 한다. 하지만 이것이 실제로 유용한 사용 사례가 있는지는 의문이다. 예를 들어, 연례 행사로 레트로 기계를 돌릴 때 현대적인 브라우저를 갖는 것 외에. 그리고 그런 경우에도, vogons을 방문하지 않는 이상, 현대의 웹사이트는 XP/7 시대의 기계를 죽일 것이다.
     * 새로운 것들(OS, 앱 등)의 문제는 더 이상 소유하지 않는다는 것이다. 그것들은 빌려주는 것이고, 회사들이 특별한 업데이트를 통해 쉽게 사용할 수 없게 만들 수 있다. 자동 업데이트를 정말 싫어한다. 종이에는 멋져 보이지만, 보안과 통제 측면에서 볼 때 큰 실패다. 왜냐하면 모든 회사들은 자신들만의 의제를 가지고 있기 때문이다.
     * 2024년에는 업데이트를 받지 않는 오래된 운영 체제를 선호한다. 첫째, 해커들은 이미 익스플로잇을 만드는 것에서 멀어졌고, 둘째, OEM과 OS 유지 관리자는 더 이상 활동을 로깅하는 소프트웨어를 만들지 않는다.
     * GDI 폰트 렌더링, 크롬에서 #force-gdi를 사용하는 것에 대해 부러움. GDI와 MacType은 기본 DirectWrite 렌더링보다 훨씬 낫다.
     * Windows 7은 여전히 Chrome 109에 머물러 있다. 120+ 버전을 설치할 수 있는 제3자 패치가 있지만 안전성 검사가 필요
     * Mac용 tenfourfox처럼 멋지다(지금은 더 이상 지원되지 않지만).
     * Wine과 ReactOS에서 이것을 실행할 수 있는지 궁금하다. 좋은 스트레스 테스트가 될 것 같다.
     * 그냥 재미로, 어떤 브라우저들이 여전히 Windows XP를 지원하는지 생각해봤다. 현재 또는 그럭저럭 괜찮은 것은 아무것도 지원하지 않았고, 시간을 꽤 거슬러 올라가야 했다. 그래서 이것은 실제로 틈새를 채운다! 이유가 있다면 이것을 시도해야 할 것 같다. 곧 Windows 2000 지원도 기대된다!
     * 어떻게 실제로 빌드하는지 궁금하다. 명령어가 아니라, Chromium을 빌드하는 데는 꽤 많은 기계가 필요한데, 자신들만의 빌드 팜이 있는지, 아니면 누군가가 매 릴리스마다 개인 기계에서 밤새도록 빌드를 하고 있는지.
"
"https://news.hada.io/topic?id=13657","모든 구간에서의 모션 블러 현상 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        모든 구간에서의 모션 블러 현상 (2022)

모션 블러의 극단적 탐구

     * 모션 블러를 극단적으로 적용하면 어떤 결과가 나타나는지에 대한 관찰과 아이디어 제시.
     * 영화나 비디오에서 모션 블러는 자연스러운 장면과 비슷한 인식을 돕기 위해 사용됨.
     * 자연 장면에서의 움직임 인식과 비디오에서 재현된 장면의 인식 간 차이 최소화가 목표.

자연 장면에서의 움직임 인식

     * 인간의 시각은 빛이 망막에 닿고 광전환 과정을 거치면서 시작됨.
     * 광전환은 즉각적이지 않으며, 이 지연을 시간에 따른 빛 자극의 평활화로 모델링 가능.
     * 이미 존재하는 자연스러운 흐림 현상인 '모션 스미어'를 비디오에 인위적인 모션 블러를 추가하는 이유와 연관성 탐구.

스크린 상의 장면 인식

     * 제한된 프레임 속도를 가진 스크린에서 장면을 볼 때 인식되는 이미지 분석.
     * 모션 블러 없는 비디오는 겹쳐진 프레임으로 보이지만, 모션 블러가 적용된 비디오는 자연 장면에 더 가까운 인식을 제공.

스크린을 자연스럽게 만들기 위한 셔터 함수

     * 전통적인 모션 블러에 셔터 함수를 적용하여 움직임의 연속성을 개선.
     * 셔터 함수는 프레임 내 모든 순간을 평균화하는 대신, 프레임의 중앙 순간에 더 큰 가중치를 부여하여 인식 차이를 최소화.

토러스피어와 비이성적인 접근

     * 실시간 셰이더로 무한 모션 블러 애니메이션을 만드는 것을 목표로 함.
     * 볼륨 레이 캐스팅을 사용하여 시간에 따른 밀도 함수를 통합하여 '통합 볼륨 모션 블러'를 구현.

모션 블러가 적용된 구체

     * 궤도를 도는 구체의 모션 블러 밀도를 찾기 위해 2D 슬라이스로 문제를 단순화.
     * 궤도 내의 특정 지점에서 구체가 언제 들어가고 나가는지를 결정하는 밀도 함수를 통해 모션 블러를 계산.

모션 블러가 적용된 토러스

     * 토러스에 대해서도 같은 과정을 적용하여 모션 블러를 계산.
     * 토러스의 2D 수직 슬라이스는 '스피릭 섹션'이라고 하며, 이를 통해 밀도 함수를 구함.

모든 요소 결합

     * 표준 볼륨 레이 캐스팅을 사용하여 요소들을 결합하고 기본 마우스/터치 상호작용을 통해 애니메이션 실행.
     * 모든 장치에서 잘 작동하지 않을 수 있으므로, 사전 렌더링된 비디오와 Shadertoy에서 셰이더를 찾을 수 있음.

GN⁺의 의견

     * 모션 블러는 영상이나 애니메이션에서 움직임을 자연스럽게 보이게 하는 중요한 기술이며, 이 기사는 모션 블러를 극단적으로 적용했을 때의 시각적 효과와 기술적 접근을 탐구함.
     * 실시간 그래픽스에서 모션 블러의 구현은 게임이나 인터랙티브 미디어에서 중요한 요소로, 이 기사는 실시간 셰이더를 통한 모션 블러 구현에 대한 통찰을 제공함.
     * 볼륨 레이 캐스팅과 같은 기술은 복잡한 3D 장면에서의 렌더링에 사용되며, 이 기사는 이를 모션 블러와 결합하여 새로운 시각적 효과를 창출함.
     * 이 기술을 도입할 때는 성능과 실시간 처리 능력을 고려해야 하며, 이 기사에서 제시된 접근법은 특히 빠르게 움직이는 객체에 대해 자연스러운 모션 블러를 제공할 수 있는 잠재력을 가짐.
     * 유사한 기능을 제공하는 업계의 다른 프로젝트나 제품으로는 Unity나 Unreal Engine과 같은 게임 엔진에서 제공하는 모션 블러 효과가 있으며, 이들은 개발자들에게 이미 널리 사용되고 있음.

        Hacker News 의견

     * 모션 블러의 트레이드오프에 대한 논의
          + 화면상의 움직이는 객체를 눈으로 따라갈 때 실제로는 객체가 선명해져야 함.
          + 눈의 움직임을 추적하고 상대적인 움직임에 따라 블러를 적용하거나, 무한한 리프레시율로 모션 블러 없이 처리해야 함.
          + 현재 기술로는 어느 쪽도 실용적이지 않아 항상 잘못 보일 수밖에 없음.
          + 좋은 감독이나 게임 디자이너는 관객의 눈이 어떻게 움직일지 예상하여 셔터 속도나 렌더링 블러를 선택함.
     * 모션 블러가 비현실적으로 느껴지는 경우
          + 게임에서 모션 블러를 사용하면 영화의 과도한 편집을 연상시키는 저렴한 근사치처럼 보일 수 있음.
          + 빠르게 움직이거나 가까이 있는 객체에 대해서는 모션 블러가 의미가 있지만, 캐릭터가 빠르게 돌아설 때 과도하게 사용됨.
          + 머리나 눈을 빠르게 움직일 때 흐릿한 이미지가 아닌 새로운 이미지를 보게 되며, 중간 데이터는 뇌가 무시함.
          + 게임에서 시점을 이동할 때 모션 블러를 추가하면 새로운 시야의 제시가 지연되어 방해가 되고 비현실적임.
     * 모션 블러 렌더링에 대한 역사적 개요
          + 2005년 셔터 효율성 모델링에 관한 고전 논문이 나오기 전, 모든 VFX 프로덕션 렌더러는 박스 셔터를 사용함.
          + ""쥬라기 공원""이나 ""더 마스크""와 같은 영화에서 볼 수 있는 극단적인 모션 블러는 PhotoRealistic RenderMan의 박스 셔터로 만들어짐.
          + 논문 발표와 동시에 3Delight에서 처음으로 1:1 구현을 하였고, ""샬롯의 거미줄""에서 처음 사용됨.
          + 픽사도 몇 년 후에 이 기능을 추가하고 ""셔터 커브""라고 부르는 기능을 현재 많은 오프라인 렌더러들이 사용함.
     * 모션 블러 시뮬레이션의 비현실성
          + sRGB 공간에서 비선형 밝기 값으로 계산되어 모션 블러의 비현실적인 느낌이 생김.
          + 물리적 현상을 시뮬레이션하려면 선형 밝기 값으로 처리해야 하며, 최종적으로 sRGB로 변환해야 함.
     * 고주사율 디스플레이에서의 모션 블러 인식 변화
          + 240Hz 디스플레이 사용 시 모션 블러의 인식이 달라짐.
          + 전통적인 셔터 옵션과 사인 셔터 옵션 간의 차이를 움직임 상태에서 구분하기 어려움.
          + 마우스 움직임의 부드러움과 낮은 지연 시간을 위해 240Hz 디스플레이 사용을 추천함.
     * 모션 블러에 대한 이론과 셰이더 작동 원리
          + 모션 블러가 무엇인지, 이론적으로 어떠해야 하는지에 대한 상세한 설명과 특정 ""토러스피어"" 애니메이션의 셰이더 작동 원리에 대한 설명이 있음.
          + 코드가 이해하기 어려울 수 있으므로 해당 부분은 유용함.
     * 모션 블러로 구성된 객체의 투명성 문제
          + 모션 블러로 구성된 토러스와 구체가 어느 시점에서 불투명해 보이는 것이 이상함.
     * 인간 시각 시스템 시뮬레이션으로의 발전
          + 필름 카메라 시뮬레이션을 넘어 인간 시각 시스템을 시뮬레이션하는 것은 현실에 한 걸음 더 다가가는 것임.
          + 셔터 타입의 모션 블러는 세피아 톤 인쇄, 16 FPS 흑백 영화, 기계 셔터의 타원형 바퀴와 같은 구식 기술로 간주될 수 있음.
     * 모션 블러 온/오프 비교 데모의 인상적인 경험
          + 모션 블러를 켜고 끌 수 있는 데모를 통해 차이를 명확하게 인식할 수 있음.
     * 모션 블러를 적용한 애니메이션의 시각적 효과
          + 공의 음영이 이상해 보이는 이유는 실제로는 회전하는 ""토러스""이기 때문임.
          + 마지막과 첫 번째 단계 사이에 더 긴 기간이 있으면 공이 더 좋아 보일 수 있지만, 놀라움의 효과가 줄어들 수 있음.
"
"https://news.hada.io/topic?id=13606","CACM, 이제 오픈 액세스로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          CACM, 이제 오픈 액세스로 전환

     * CACM이 60년 이상의 연구 논문, 중요한 논문, 기술 보고서, 해설, 실제 사례, 뉴스 기사 등을 누구나 접근할 수 있는 오픈 액세스 출판물로 전환
     * 이제 ACM 회원이나 ACM 디지털 라이브러리 구독자가 아니어도 모든 사람이 CACM의 자료에 접근할 수 있음.
     * ACM은 약 5년의 기간(2026년 1월까지) 동안 지속 가능한 모델 하에 완전한 오픈 액세스 출판사로 전환할 계획을 발표했으며, 2023년 말까지 ACM이 연간 출판하는 약 26,000개의 기사 중 약 40%가 오픈 액세스 모델을 통해 출판되고 있음.
     * ACM은 전체 아카이브(60만 개 이상의 기사)를 오픈 액세스로 전환할 계획임.
     * CACM의 새 웹사이트 출시와 함께, 모든 CACM 기사가 구독 장벽 없이 출판될 예정임.
     * 이러한 변화를 통해 ACM은 컴퓨터 과학 분야의 더 넓은 커뮤니티와의 참여를 증진하고, 비회원들이 ACM의 풍부한 자원을 발견하고 가입하는 것을 장려하고자 함.
     * CACM 저자들은 독자층을 더 넓고 다양한 대상으로 확장함으로써 혜택을 받게 될 것임.
     * ACM과 CACM을 강력하게 유지하기 위해서는 회원들의 지속적인 지원과 기관들이 ACM 오픈 모델에 참여하는 것이 중요함.

GN⁺의 의견

     * CACM의 오픈 액세스 전환은 전 세계 연구자와 학생들에게 컴퓨터 과학 분야의 고품질 연구 자료를 무료로 제공함으로써 지식의 민주화에 기여할 것임.
     * 오픈 액세스 모델은 연구 결과의 가시성을 높이고, 학술 커뮤니티 내에서의 협력을 촉진할 수 있는 잠재력을 가지고 있음.
     * 이러한 변화는 기존의 학술 출판 모델에 도전하며, 연구자들이 자신의 연구를 널리 공유하고 인용받을 수 있는 기회를 제공함.
     * 그러나 오픈 액세스 모델의 지속 가능성은 회원들의 지원과 기관의 참여에 크게 의존하므로, 이러한 변화가 장기적으로 어떻게 유지될지는 미지수임.
     * 이와 유사한 오픈 액세스 모델을 채택한 다른 학술 출판물로는 PLOS(Public Library of Science)나 BioMed Central과 같은 플랫폼이 있으며, 이들도 연구자들에게 유용한 자원임.

        Hacker News 의견

     * 이 소식은 2024년 들은 가장 멋진 소식 중 하나임.
          + 15년 동안 효과적이지 않게 불평해왔지만, 이 일에 작은 부분이라도 기여했다고 생각하고 싶음.
          + 지적으로 정직하게, 모든 사람이 이 자료에 접근할 수 있어야 함.
          + ACM에 감사함을 표함.
     * 이것은 정말 대단한 소식임.
          + 오래된 호에는 많은 중요한 논문들이 있으며, 이제 다시 모두에게 접근 가능해짐은 옳은 일임.
          + 새로운 주제를 배우거나 고군분투하는 사람들에게 첫 논문을 확인할 것을 권장함. 이는 종종 다른 어떤 것보다 더 명확하게 설명하며 예상보다 복잡하지 않음.
     * RSS 피드 주소 제공.
     * 이 자원에 익숙한 사람들에게 시작할 상위 세 개의 기사 추천 요청.
          + 또한, 해당 자원에 논문을 게재한 HN 사용자들의 이야기도 듣고 싶음.
     * Moshe가 CACM이 결코 공개되지 않을 것이라고 말한 후 회원 자격을 취소함. 그로부터 오랜 시간이 흘렀음.
     * 이것은 훌륭한 소식임.
          + 오랜 기간 CACM 구독자로서, 컴퓨터 과학 주제에 걸쳐 많은 내용이 있으며 대부분의 호에 심도 있는 기사들이 매우 좋음.
          + 더 많은 시간을 가질 수 있었다면 좋았을 것임.
     * APL을 공부할 때 많은 참고 문헌들이 접근 불가능했는데, 이제 검색 결과가 많이 나와서 매우 좋음. Snobol에 대해서도 마찬가지임.
     * 드디어 이루어졌음에 감사함.
          + Alexandra Elbakyan이 이 결정에 영향을 미쳤을 것이라고 확신함, 비록 ACM이 인정하지 않더라도.
     * 모두가 AI 회사에 자신의 사일로를 판매하려고 하는 시기에 이런 결정을 내린 것은 용감함.
     * 이것은 훌륭한 소식임.
          + '공개 접근'의 라이선스에 대한 간단한 답변이 필요함.
               o 도서관의 저작물 보관, 복사, 재배포 권리가 얼마나 효과적으로 보호되는지,
               o 라이선스가 위키백과와 스택 오버플로우에 텍스트를 통합하는 것과 호환되는지,
               o 중국어와 스페인어와 같은 언어로 자원봉사 번역이 법적으로 보관, 복사, 재배포될 수 있는 범위.
          + '공개 접근'이라는 용어에 대한 이해에 따르면, 답변은 '불가역적으로', '반드시 그런 것은 아니며', '완전히'가 되어야 하지만, ACM이 '공개 접근'을 호환되지 않는 방식으로 사용하지 않는지 확인하고 싶음.
          + 베를린 선언은 사용자에게 무료, 불가역적, 전 세계적인 접근 권리와 복사, 사용, 배포, 전송, 공개적으로 작업을 표시하고 파생 작업을 만들고 배포할 수 있는 라이선스를 부여함을 명시함.
          + ACM이 어떤 라이선스를 대중에게 부여하는지에 대한 답변을 찾고 있으나, 주로 ACM이 어떻게 지불받는지에 대한 내용임.
"
"https://news.hada.io/topic?id=13555","PGLite - 브라우저에서 Postgres 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PGLite - 브라우저에서 Postgres 실행하기

     * 브라우저, Node.js 및 Bun에서 Postgres를 실행할 수 있도록 TypeScript 클라이언트 라이브러리에 패키징된 WASM Postgres 빌드
     * 다른 종속성 없으며, gzip 압축후 3.7Mb
     * 임시 인메모리 데이터베이스로 사용하거나 파일 시스템(Node/Bun) 또는 IndexedDB(브라우저)에 영구적으로 사용할 수 있음
     * 기존 브라우저위에서 실행되는 Postgres 들과 달리 Linux 가상머신을 사용하지 않는 ""Postgres in WASM""임

import { PGlite } from ""@electric-sql/pglite""

const db = new PGlite()
await db.query(""select 'Hello world' as message;"")
// -> [ { message: ""Hello world"" } ]

   테스트 코드 작성하는데 유용하게 쓰고 있습니다. CI에서 테스트하기 편합니다.

   모바일앱에서 sqlite를 쓰는 것처럼 원격 db 동기화가 필요없는 것들 저장할 수 있겠군요. redux같은 전역상태 store를 대체할 수 있겠는데요?!

   굳이 프론트에서 sql 쿼리문 익혀가며 대체할까 싶긴합니다만 재밌긴 하네요 pglite-react 패키지도 같이 존재하긴 하네요
"
"https://news.hada.io/topic?id=13562","식물원이 도시의 공기를 평균 5°C 낮출 수 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      식물원이 도시의 공기를 평균 5°C 낮출 수 있음

식물원이 도시 공기를 평균 5°C 낮출 수 있음

     * 기후 변화로 지구가 더워지면서, 식물원, 공원, 가로수, 녹색 벽, 습지와 같은 도시 인프라를 계획에 포함시키면 도시 공기를 시원하게 하는 데 도움이 될 수 있음.
     * 영국 서리대학교가 주도한 연구에 따르면, 식물원은 도심 공기의 온도를 최대 5°C까지 낮출 수 있으며, 습지와 빗물 정원도 각각 4.7°C와 4.5°C로 뒤를 이음.
     * 가로수는 3.8°C, 도시 공원은 3.2°C의 온도 하강 효과가 있음.

연구 결과의 중요성

     * 이 연구는 녹색 공간과 물이 도시를 시원하게 하는 데 도움이 된다는 것을 오랫동안 알고 있었지만, 가장 포괄적인 그림을 제공함.
     * 나무가 그늘을 제공하고, 물이 증발하면서 공기를 시원하게 하는 등의 이유로 이러한 효과가 발생함.

연구 방법 및 발견

     * 27,000개 이상의 연구 논문 중에서 도시의 녹색-파란색-회색 인프라 카테고리를 기반으로 202개의 논문을 메타 분석을 위해 선정함.
     * 나무와 식물은 직사광선을 줄이고 공기 중으로 수분을 방출하여 열을 줄이는 데 도움을 줌.
     * 물체는 ""증발산, 그늘, 알베도 효과, 지하수 재충전 및 온도 완충""을 통해 주변 환경을 시원하게 하며, 낮에는 냉각 효과를, 밤에는 난방 잠재력을 제공할 수 있음.
     * 녹색 지붕과 벽은 건물을 단열하는 데 도움을 주고 열 흡수를 줄이며, 식생은 자연 환기를 위한 방풍막 역할을 함.

연구의 결론 및 시사점

     * 모든 도시 녹색-파란색-회색 인프라 유형이 냉각 효과를 제공하며, 밀집하고 확장되는 도시에 자연을 되돌려야 함.
     * 하지만 모든 지역에 적합한 단일 해결책은 없으며, 효과적인 계획이 필요함.
     * 지역 상황, 환경 조건, 사용 가능한 자원, 예산을 평가하여 장기적인 효과를 보장하고 가능한 단점을 피해야 함.

GN⁺의 의견

     * 이 연구는 도시 계획과 환경 설계에 있어서 자연 요소의 중요성을 강조함. 도시화가 진행됨에 따라, 이러한 연구 결과는 도시의 생활 환경을 개선하고자 하는 도시 계획가와 건축가들에게 유용한 지침을 제공할 수 있음.
     * 연구는 또한 지역별로 맞춤형 해결책이 필요하다는 점을 지적함. 이는 각 도시의 특성과 기후 조건을 고려하여 지속 가능한 도시 인프라를 설계할 때 중요한 고려 사항임.
     * 도시 녹화 프로젝트를 계획할 때는 단순히 온도를 낮추는 것뿐만 아니라 생태계 서비스, 생물 다양성 증진, 공공의 건강과 웰빙에 대한 효과도 함께 고려해야 함.
     * 이 기술을 도입할 때는 초기 설치 비용, 유지 관리 비용, 그리고 기존 도시 인프라와의 통합성을 고려해야 함.
     * 이 연구는 도시의 열섬 효과를 줄이고, 기후 변화에 대응하는 데 있어서 녹색 인프라의 중요성을 강조함으로써, 도시의 지속 가능성과 주민들의 삶의 질 향상에 기여할 수 있는 방법을 제시함.

        Hacker News 의견

     * 최근 '미야와키 숲'에 매료되었다는 한 사용자는, 몇 년 만에 성숙한 상태에 이를 수 있는 작고 조밀한 도시 숲에 대한 관심을 표현함. 이 사용자는 주차 최소 요건 대신 숲 최소 요건이 있어야 한다고 주장함.

     ""최근 '미야와키 숲'에 대한 집착이 생겼음. 몇 년 만에 성숙한 상태에 이르는 작고 조밀한 도시 숲이 어디에나 생겨나길 바람. 최소 주차 요건은 잊고, 숲 최소 요건은 어디에?""
     * 도시가 식물원을 감당할 수 없다면, 인도에 나무를 심는 것과 같은 방법이 생태학적 이점을 제공할 뿐만 아니라 인간의 정신 건강에도 좋고 범죄를 줄이는 효과가 있다고 언급함.

     ""도시가 식물원을 감당할 수 없다면, 인도에 나무를 심는 등의 방법으로 생태학적 이점을 제공하고 인간의 정신 건강에도 좋으며 범죄를 줄일 수 있음.""
     * 녹지가 열을 줄이는 것은 물론이지만, 무엇보다 콘크리트 제거를 의미하며, 이는 도시 열섬 효과를 완화하는 데 도움이 된다고 설명함. 그럼에도 불구하고 나무를 더 심고 차량 공간을 줄이는 아이디어에 대한 저항이나 무관심이 여전히 존재함.

     ""녹지가 열을 줄이는 것은 당연하지만, 특히 콘크리트 제거를 통해 도시 열섬 효과를 완화하는 것이 중요함. 그럼에도 나무 심기와 차량 공간 축소에 대한 저항이나 무관심이 존재함.""
     * 사막을 식힐 수 있는지 궁금해하는 한 사용자는, 사하라 사막 가장자리에 핵발전소를 세우고 해수 담수화를 통해 대규모로 대나무를 심어 사막을 식히고 이산화탄소를 흡수하여 기후 온난화에 글로벌한 영향을 미칠 수 있다는 아이디어를 제시함.

     ""사막을 식힐 수 있는지 궁금함. 사하라 사막 가장자리에 핵발전소를 세우고 해수 담수화로 대나무를 심어 사막을 식히고 이산화탄소를 흡수하여 기후 온난화에 영향을 미칠 수 있음.""
     * 식물원이 그 안의 공기를 식히는 것은 믿지만, 도시의 다른 지역, 특히 아스팔트가 햇볕에 달구어지는 곳에는 별다른 영향을 미치지 않는다고 생각하는 사용자가 있음. 이 사용자는 식물원과 거리 나무 식재의 냉각 효과를 비교하는 것이 논리적으로 맞지 않다고 지적함.

     ""식물원이 내부의 공기를 식히는 것은 믿지만, 도시의 다른 지역에는 별다른 영향을 미치지 않을 것으로 생각함. 식물원과 거리 나무 식재의 냉각 효과를 비교하는 것은 논리적으로 맞지 않음.""
     * 많은 도시들이 장소를 식히기 위해 더 많은 숲을 조성하지 않는 이유에 대해 궁금해하는 사용자가 있음. 이 사용자는 나무가 많은 캠퍼스에서 공부했을 때, 캠퍼스 밖보다 온도가 최소 5도 섭씨 낮았다고 경험을 공유함.

     ""많은 도시들이 장소를 식히기 위해 더 많은 숲을 조성하지 않는 이유가 궁금함. 나무가 많은 캠퍼스에서 공부했을 때, 캠퍼스 밖보다 온도가 최소 5도 섭씨 낮았음.""
     * 나무가 그늘을 제공하고, 증발하는 물이 공기를 식히는 효과가 있다는 것을 제목 너머에서 읽을 수 있다고 언급하는 사용자가 있음. 실제 식물원이 필요하지 않다고 주장함.

     ""나무가 그늘을 제공하고 증발하는 물이 공기를 식히는 효과가 있음. 실제 식물원이 필요하지 않음.""
     * 나무 심기와 도시 내 자생 녹지 공간이 도시를 시원하게 유지하는 데 도움이 된다는 것이 상식이어야 한다고 생각하는 사용자가 있음. 이 사용자는 나무 유지 관리에 드는 비용에 대해 언급하며, 자신의 경험을 공유함.

     ""나무 심기와 도시 내 자생 녹지 공간이 도시를 시원하게 유지하는 데 도움이 되는 것이 상식이어야 함. 나무 유지 관리에 드는 비용에 대한 언급과 개인적 경험 공유.""
     * 오토바이를 타고 다니면서 도시의 더 시원하고 더 더운 부분을 확실히 느낄 수 있다고 말하는 사용자가 있음. 나무가 있는 지역이 몇 도 더 시원하게 느껴진다고 함.

     ""오토바이를 타면서 도시의 시원하고 더운 부분을 확실히 느낄 수 있음. 나무가 있는 지역이 몇 도 더 시원함.""
     * 런던에 사는 한 사용자는 런던에 많은 공원이 있음에도 불구하고, 최근 폭염으로 인해 버스 정류장 근처의 아스팔트가 녹아내린 깊은 홈이 생겼다고 언급함.

     ""런던에 많은 공원이 있음에도 불구하고, 최근 폭염으로 인해 버스 정류장 근처의 아스팔트가 녹아내린 것을 목격함.""
"
"https://news.hada.io/topic?id=13589","KDE 데스크톱, Plasma 6로 대대적인 개편","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      KDE 데스크톱, Plasma 6로 대대적인 개편

KDE 데스크탑, Plasma 6로 대대적인 개편

     * KDE Plasma 5 이후 거의 10년 만에 KDE 프로젝트는 Qt 6 개발 프레임워크를 기반으로 한 KDE Plasma 6, KDE Frameworks 6, KDE Gear 24.02의 ""메가 릴리스""를 발표함.
     * 이번 릴리스는 Wayland로의 이전에 중점을 두고 있으며, 사용자에게는 매끄러운 업그레이드를 목표로 하면서 성능, 보안 향상 및 새로운 하드웨어 지원을 개선함.
     * 개발자를 위해서는 사용하지 않는 프레임워크 제거 및 의존성 감소를 통해 KDE를 대상으로 하는 애플리케이션 작성을 용이하게 함.

Plasma 6의 새로운 점

     * Plasma 6은 Plasma 5와 비교하여 눈에 띄는 변화는 있지만 크게 달라진 점은 없음.
     * Plasma 6은 기본 설정에 많은 변경을 가지고 있으며, 가장 큰 변화는 Wayland를 기본 그래픽 세션으로 채택한 것임.
     * 파일이나 폴더를 열기 위한 기본 클릭 방식이 단일 클릭에서 더블 클릭으로 변경됨.
     * 가상 데스크탑 전환을 위한 스크롤 휠 사용 기본 설정이 제거되었으나, 사용자가 원할 경우 설정을 다시 활성화할 수 있음.
     * 스크롤바 클릭 시 페이지 단위가 아닌 클릭한 위치로 바로 이동하는 기능이 추가됨.

디자인과 설정의 변화

     * Breeze 테마가 Plasma 6을 위해 업데이트되었으나, 변화는 미묘함.
     * 시스템 설정 애플리케이션이 개편되어 일부 설정이 새로운 위치로 이동함.
     * Dolphin 파일 관리자의 설정이 재설계되어 탐색 및 시작 옵션이 새로운 인터페이스 탭으로 통합됨.
     * 사용자 피드백을 위한 새 탭이 추가되어, 사용자가 데이터 공유 수준을 선택할 수 있음.

Wayland와의 호환성

     * Plasma 6는 HDR 및 색상 관리를 지원하며, 노트북과 외부 모니터의 스케일링을 독립적으로 설정할 수 있음.
     * Plasma Search 기능이 리팩토링되어 속도가 향상되고 CPU 사용량이 감소함.
     * Spectacle 스크린샷 유틸리티가 전체 데스크탑, 애플리케이션 창, 또는 화면의 일부를 캡처하거나 녹화할 수 있음.

제거된 기능들

     * Synaptics 터치패드 및 evdev 입력 장치에 대한 GUI 설정이 제거됨.
     * 더 이상 유지되지 않는 기능들, 예를 들어 Air 테마, 시스템 설정의 아이콘 뷰, KHotkeys 등이 이번 릴리스에서 제거됨.
     * Unsplash에서 배경화면을 가져오는 기능과 QuickShare 애플릿이 API 변경 및 기능 미작동으로 인해 제거됨.

개발자를 위한 변화

     * KDE Frameworks 6는 기능 추가보다는 제거에 중점을 둠.
     * 사용되지 않거나 더 나은 대안이 있는 API들이 제거됨.
     * Qt 6는 Metal, Vulkan, OpenGL, DirectX와 같은 그래픽 API에 대한 추상화 계층을 추가함.
     * Qt는 qmake 빌드 시스템에서 CMake로 전환하여 개발자 도구 개선에 도움을 줌.

KDE 5와 X11에 대한 지원

     * Plasma 6는 초기에는 약간의 문제가 있을 수 있으며, 업그레이드 전에 알려진 문제를 검토하는 것이 좋음.
     * KDE 5는 아직 완전히 사라진 것은 아니며, KDE는 단기적으로 X11 지원을 계속할 계획임.

GN⁺의 의견

     * KDE Plasma 6의 발표는 리눅스 데스크탑 환경의 중요한 진화를 나타냄. 사용자 경험과 개발자 친화성 모두를 개선하려는 KDE 커뮤니티의 노력이 돋보임.
     * Wayland로의 전환은 리눅스 데스크탑의 미래 방향성을 제시하며, X11에 대한 의존도를 줄이는 중요한 단계임.
     * Plasma 6의 출시는 기존 KDE 사용자들에게는 상대적으로 부드러운 전환을 제공할 것으로 보이나, 새로운 사용자들에게는 KDE의 맞춤 설정 가능성이 여전히 약간의 학습 곡선을 요구할 수 있음.
     * KDE Plasma는 GNOME, XFCE, LXQt 등 다른 리눅스 데스크탑 환경과 비교할 때 높은 맞춤화 수준과 성능을 제공함.
     * Plasma 6을 도입하기 전에는 호환성과 안정성을 고려해야 하며, 특히 새로운 Wayland 세션과 관련된 드라이버 및 애플리케이션의 지원 상태를 확인해야 함.
     * 이 기술을 선택함으로써 사용자는 최신 기능과 개선된 성능을 얻을 수 있지만, 일부 기존 설정과 위젯이 더 이상 지원되지 않을 수 있는 단점도 있음.

        Hacker News 의견

     * Plasma 6와 Wayland 지원에 대한 긍정적인 피드백
          + Plasma 6에 대한 만족감과 Wayland 지원의 개선을 언급함.
          + KDE가 기능을 제거했을 때, 버그를 제출하고 몇 시간 후에 KDE 개발자가 새로운 KWin 스크립트를 만들어 문제를 해결했다는 경험을 공유함.
     * KDE 팀의 지속적인 진보와 커뮤니티 참여의 중요성
          + KDE 팀의 노력을 칭찬하며, 사용자들이 버그를 제출하고 피드백을 주는 것이 중요하다고 강조함.
          + KDE가 유연하고 사용자의 의견을 반영하는 것을 긍정적으로 평가하며, 더 많은 배포판이 KDE를 기본으로 채택하기를 희망함.
     * KDE와 GNOME의 비교 및 디자인 철학
          + KDE가 GNOME이 지향했던 바를 실현했다고 생각하며, KDE 애플리케이션의 우수성을 언급함.
          + GNOME2에 대한 애정과 GNOME3에 대한 실망감을 표현하며, KDE가 클래식한 Windows NT 시대의 UI를 현대적으로 발전시켰다고 평가함.
     * 사용자 설정 가능성의 중요성
          + KDE에서 기능을 제거하지 않고 사용자가 설정을 조정할 수 있는 점을 중요하게 여김.
          + 다른 데스크탑 환경이 기능을 제거하는 경향과 비교하며, KDE의 설정 가능성을 선호함.
     * KDE의 사용자 경험에 대한 피드백
          + KDE가 파일을 여는 방식을 단일 클릭에서 더블 클릭으로 기본 설정을 변경한 것에 대한 긍정적인 반응.
          + Wayland에서의 화면 녹화 기능 개선에 대한 만족감을 표현함.
     * Plasma 6의 새로운 기능과 개선 사항에 대한 경험 공유
          + Plasma 6을 NixOS에서 사용하며, 개선된 기능들과 새로운 테마, 버그 수정 등에 대한 만족감을 나타냄.
          + KDE의 기능이 거의 완벽해졌다고 느끼며, 특히 원격 데스크탑 액세스 기능에 대한 기대를 표현함.
     * KDE의 디자인과 사용자 경험에 대한 칭찬
          + KDE의 디자인이 점점 개선되고 있으며, 개발자 중심의 환경에서 모든 사용자가 좋아할 수 있는 환경으로 변화하고 있다고 평가함.
     * KDE에 대한 개인적인 애정과 선호도
          + KDE를 다양한 기기에서 사용하며, MacOS와 Windows보다 우수하다고 생각함.
          + KDE 애플리케이션들에 대한 호감과 프로젝트에 대한 감사를 표현함.
     * KDE 설정의 복잡성에 대한 의견
          + KDE의 설정이 많고 찾기 어려운 점을 지적하며, 합리적인 기본 설정과 일관된 UI/UX 경험을 원함.
     * Wayland로의 전환과 그에 따른 문제점
          + Wayland로 기본 설정이 바뀌면서 작업 흐름에 문제가 생겼다고 언급함.
          + X11로 돌아가는 데 성공했지만, 로그오프 버튼이 작동하지 않는 문제가 있음을 공유함.
"
"https://news.hada.io/topic?id=13675","연간 8,500파운드를 지출하며 기차에서 생활하는 사람","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     연간 8,500파운드를 지출하며 기차에서 생활하는 사람

기차에서 생활하는 라이프스타일

     * 독일의 17세 청소년 라세 스톨리는 기차에서 생활하는 디지털 노마드.
     * 매일 600마일을 독일 전역의 도이체반(Deutsche Bahn) 기차를 타고 여행.
     * 첫 번째 클래스에서 여행하고, 야간 기차에서 잠을 자며, DB 라운지에서 아침을 먹고, 공공 수영장과 레저 센터에서 샤워를 함.

특별한 여정의 시작

     * 라세는 약 1년 반 전부터 기차에서 생활하기 시작함.
     * 밤에는 이동 중인 인터시티 익스프레스(ICE) 기차에서 잠을 자고, 낮에는 프로그래머로 일하며 다른 승객들과 함께 여행함.
     * 독일 전역을 탐험하며, 매일 아침 바다나 대도시, 알프스로 여행을 결정함.

비용, 숙박, 부모님의 의견

     * 라세는 기차에서 생활하는 데 연간 약 €10,000(£8,500) 정도의 비용이 든다고 함.
     * 매일 밤 야간 기차를 잡아야 하며, 때때로 급히 일정을 변경해야 하는 상황에 직면함.
     * 부모님의 설득 후 법적인 측면을 확인하고, 라세의 결정을 지지함.

짐을 최소화하는 방법

     * 라세는 노트북과 노이즈 캔슬링 헤드폰을 중요한 짐으로 꼽음.
     * 제한된 공간 때문에 필요한 것들만 골라서 가져가야 함.
     * 백팩을 사용할 때는 공간의 한계에 빠르게 도달하기 때문에 물건을 쌓아가지 않는 것이 중요함.

지난 18개월을 돌아보며

     * 기차에서의 생활은 매우 불안정한 존재를 의미함.
     * 창밖을 바라보며 풍경을 감상하고 생각을 떠돌게 하여 휴식을 취함.
     * 중간 라인 계곡을 지나는 노선이 가장 좋아하는 경로로, 기차는 강을 따라 천천히 이동함.
     * 라세는 기차에서 생활을 시작한 이후 총 500,000킬로미터(310,000마일) 이상 여행함.
     * 아직 충분히 여행하지 못했다고 생각하여 Bahncard 100이 6개월 더 유효함.

GN⁺의 의견

     * 라세의 기차 생활은 전통적인 주거 개념을 벗어나는 혁신적인 생활 방식을 제시함. 이는 특히 젊은 세대에게 자유롭고 유연한 삶을 추구하는 새로운 옵션을 보여줌.
     * 그러나 이러한 생활 방식은 장기적인 안정성과 개인의 사생활 보호에 있어서는 한계가 있을 수 있음. 또한, 모든 사람에게 적합한 방식은 아닐 수 있음.
     * 기차에서의 생활은 지속 가능한 여행과 최소한의 생활 방식에 대한 관심을 불러일으킬 수 있음. 이는 환경에 미치는 영향을 줄이려는 사람들에게 매력적인 대안이 될 수 있음.
     * 비슷한 개념으로는 캠핑카나 밴 라이프가 있으며, 이러한 생활 방식을 선택하는 사람들에게 영감을 줄 수 있음.
     * 기술을 도입할 때는 항상 사용자의 생활 방식과 필요에 맞는지 고려해야 함. 라세의 경우처럼, 기차 생활은 이동성과 유연성을 제공하지만, 일상적인 편의시설과 개인 공간의 부족이라는 단점이 있음.

        Hacker News 의견

     * 젊은이들이 이런 모험을 더 많이 해야 한다고 생각함. 나이가 들어서야 젊었을 때 누릴 수 있는 기회가 줄어든다는 것을 깨달음. 개인적으로는 몇 가지 모험을 했지만, 지금 돌이켜보면 그때 더 많은 경험을 했어야 했다고 생각함.
     * 독일 철도 시스템의 효율성에 대한 의견이 분분함. 한 기사에서는 독일의 기차 정시성이 몇 년 만에 최악이라고 보도함.
     * 베를린 시내 버스 광고를 보고 생각남. 광고에는 ""60m², 부엌 없음, 욕실 없음 - 월 60.66유로, 유틸리티 포함""이라고 적혀 있음.
     * 기차를 좋아하지만, 디지털 노마드 생활을 하려면 어느 정도 안정적인 거점이 필요함. NAS를 어디에 둘지 고민됨. 현재 작은 스튜디오 아파트가 연간 300유로 더 저렴하고, 커피 머신이 있는 큰 공용 주방이 있음.
     * 이런 이야기에는 여러 관점이 있지만, 비용에 대한 초점이 맞춰짐. 연간 8500파운드를 지출하지만, 지불하지 않은 좌석을 차지하는 외부 비용에 대한 논의가 부족함. 이러한 행동이 미래의 노마드들에게 영향을 미칠 수 있음.
     * 라세의 블로그와 독일어 레딧 스레드에서 더 많은 정보를 얻을 수 있음.
     * 만약 젊었다면, 유럽 전역을 무제한으로 여행할 수 있는 1년짜리 인터레일 티켓을 2500달러에 구매하는 것이 매력적일 것임.
     * 마치 스타트렉의 순간 이동 기술을 가진 것처럼, 바다가 보고 싶으면 북쪽으로 기차를 타고, 대도시의 분주함이 그리우면 베를린이나 뮌헨으로 가고, 알프스로 하이킹을 갈 수도 있음.
     * 용감한 결정이지만, 새로운 친구를 만들거나 깊은 관계를 유지하는 방법이 궁금함. 어쩌면 잠시 동안은 괜찮을 수 있지만, 사람들은 대화만이 아닌 실제 사람들과의 교류가 필요함. 이 생활 방식에서 벗어날 출구 전략이 있기를 바람.
     * 독일을 여행할 때마다 도이치반을 즐겨 이용함. 국제 관광객에게 친숙한 경험을 제공함. 스마트폰 시대 이전에도 기계에서 티켓을 쉽게 예약할 수 있었음. 다른 도시로 쉽게 이동하고 야간 기차로 돌아올 수 있어 운전의 스트레스 없이 많은 곳을 볼 수 있었음.
"
"https://news.hada.io/topic?id=13652","클로드 3 모델 패밀리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              클로드 3 모델 패밀리

Claude 3 모델 패밀리 소개

     * 새로운 산업 표준을 세우는 Claude 3 모델 패밀리 발표
     * 세 가지 최첨단 모델로 구성: Claude 3 Haiku, Claude 3 Sonnet, Claude 3 Opus
     * 각 모델은 지능, 속도, 비용의 최적 균형을 제공

Claude 3 모델 패밀리

     * 가장 지능적인 모델인 Opus는 AI 시스템 평가 벤치마크에서 최고 성능
     * 복잡한 작업에서 인간 수준의 이해와 유창함을 보임
     * 분석, 예측, 콘텐츠 생성, 코드 생성, 비영어권 언어 대화 능력 향상

즉각적인 결과 제공

     * 실시간 반응이 필요한 작업에 Claude 3 모델 활용 가능
     * Haiku는 시장에서 가장 빠르고 비용 효율적인 모델
     * Sonnet은 Claude 2보다 2배 빠른 속도로, Opus는 더 높은 지능 수준에서 비슷한 속도 제공

강력한 시각 능력

     * Claude 3 모델은 사진, 차트, 그래프, 기술 다이어그램 등 다양한 시각 형식 처리 가능
     * 기업 고객에게 새로운 모달리티 제공

더 적은 거부

     * 이전 모델들의 불필요한 거부 행위 감소
     * Claude 3 모델은 시스템의 가이드라인에 근접한 요청에 대해 덜 거부함

정확도 향상

     * 모델 출력의 정확성 유지가 중요
     * Opus는 복잡한 질문에 대한 정확한 답변에서 2배 향상된 정확도 보임
     * 정확한 답변을 검증하기 위한 인용 기능 곧 제공 예정

긴 문맥과 거의 완벽한 기억력

     * 초기에 200K 컨텍스트 윈도우 제공
     * 1백만 토큰 이상 입력 처리 가능, 특정 고객에게 제공될 수 있음
     * 긴 문맥 프롬프트를 효과적으로 처리하기 위한 강력한 기억 능력

책임감 있는 설계

     * 신뢰할 수 있는 모델로 설계
     * 다양한 위험을 추적하고 완화하기 위한 전담 팀 운영
     * 모델의 안전성과 투명성 향상을 위한 방법 개발
     * AI 안전 수준 2 (ASL-2) 유지

사용하기 쉬움

     * 복잡한 다단계 지시 사항을 더 잘 따름
     * 브랜드 목소리와 응답 지침을 준수하고, 신뢰할 수 있는 고객 대면 경험 개발에 능숙
     * JSON과 같은 인기 있는 구조화된 출력 형식을 더 쉽게 생성

모델 세부 정보

     * Claude 3 Opus: 시장에서 가장 지능적인 모델로 복잡한 작업에서 뛰어난 성능
     * Claude 3 Sonnet: 지능과 속도 사이의 이상적인 균형을 제공하는 모델
     * Claude 3 Haiku: 가장 빠르고 컴팩트한 모델로 즉각적인 반응성 제공

모델 이용 가능성

     * Opus와 Sonnet은 현재 API를 통해 사용 가능
     * Haiku는 곧 이용 가능 예정
     * Sonnet은 claude.ai의 무료 경험을 제공하고, Opus는 Claude Pro 구독자에게 제공

더 똑똑하고, 더 빠르고, 더 안전하게

     * 모델 지능이 한계에 이르지 않았다고 믿음
     * Claude 3 모델 패밀리에 대한 자주 업데이트 예정
     * 기능 향상을 위한 새로운 기능 출시 예정
     * AI 능력의 한계를 넘어서면서 안전 가이드라인도 동일한 속도로 발전시킬 것임

GN⁺의 의견

     * Claude 3 모델 패밀리는 AI 기술의 발전을 보여주며, 특히 다양한 언어와 복잡한 작업 처리 능력에서 인상적인 발전을 보임.
     * 이 기술은 고객 서비스, 데이터 처리, 콘텐츠 생성 등 다양한 분야에서 업무 효율성을 크게 향상시킬 잠재력을 가짐.
     * 그러나 AI 모델의 성능 향상에 따른 윤리적, 안전적 문제에 대한 지속적인 관리와 투명성 확보가 중요함.
     * 이와 유사한 기능을 제공하는 OpenAI의 GPT-3나 GPT-4 모델도 참고할 만함.
     * Claude 3 모델을 도입할 때는 비용 대비 효과, 데이터 보안, 사용자 개인정보 보호 등을 고려해야 하며, 이러한 모델을 사용함으로써 얻을 수 있는 이점과 잠재적인 위험을 충분히 이해해야 함.

        Hacker News 의견

     * 새로운 Claude 3 모델을 지원하는 LLM 명령줄 도구용 플러그인 출시
          + 설치 방법과 Claude 3 모델 사용 예시 제공
          + GitHub에서 코드 확인 가능
          + LLM에 대한 더 많은 정보
     * Claude 모델들은 여전히 'Sally 문제'에 정확한 답을 하지 못함
          + 문제: Sally에게는 3명의 형제가 있고, 각 형제에게는 2명의 자매가 있다. Sally에게는 몇 명의 자매가 있는가?
          + Claude 모델의 오답 예시와 함께 문제점 지적
          + 오답 이미지 링크
     * Claude 3 Opus 모델의 APPS 벤치마크 결과 70.2%로, 코딩에 유용할 수 있음
          + 문제 설명을 파이썬 코드로 변환하는 능력 측정
          + 다른 상위 모델들은 이 벤치마크 결과를 공개하지 않음
          + Claude 3 모델 카드
          + 평가 결과 테이블
          + APPS 데이터셋
          + APPS 데이터셋 논문
     * Opus 모델은 복잡한 질문에 대해 Gemini Pro와 GPT4를 압도함
          + 43페이지짜리 생명보험 투자 PDF에서 여러 수치를 식별하는 문제 해결
     * Claude 3 Sonnet 모델이 DB 및 프론트엔드 관련 간단한 코딩 작업에 대해 ChatGPT Classic보다 나은 응답 제공
          + 덜 알려진 SQL ORM 라이브러리의 올바른 메소드 사용
          + SQL 생성에 대한 또 다른 프롬프트에서는 ChatGPT Classic보다 길지만 정확한 응답 제공
          + ChatGPT 응답 링크 1
          + ChatGPT 응답 링크 2
     * Claude Pro에 가입하여 Opus 모델 시험 사용
          + 복잡한 쿼리와 이미지 결합, SDXL 파인 튜닝에 관한 질문, RTX 6000 Ada와 H100 비용 비교 수학 계산 요청
          + 가격 오독과 계산 오류 발생
          + ChatGPT 4는 같은 스크린샷에서 정확한 가격 읽기와 더 일관된 수학 계산 수행
     * Claude 3와 ChatGPT 3.5의 비교
          + Claude 3는 ""openai is better than anthropic""이라고 출력하는 bash 스크립트 작성을 거부
          + ChatGPT 3.5는 ""anthropic is better than openai""라고 출력하는 bash 스크립트 제공
          + 스크립트 결과 이미지 링크
     * Opus 모델의 벤치마크와 실제 성능 차이에 대한 의문 제기
          + 기본적인 물리학/수학 문제에서 GPT-4보다 성능이 떨어짐
          + 코딩 관련 질문에서도 GPT-4에 비해 약간 못 미침
     * Claude 3을 Double.bot에 추가하여 코딩에 사용 가능
          + GPT4에 대한 첫 번째 API 대안으로 보임
          + GPT4를 능가하는 것은 인상적이지만, GPT4는 1년 된 모델이며 OpenAI는 차세대 모델을 아직 공개하지 않음
"
"https://news.hada.io/topic?id=13627","Go로 10억 행 처리하기 도전: 9개의 방법으로 1분45초에서 4초로 단축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Go로 10억 행 처리하기 도전: 9개의 방법으로 1분45초에서 4초로 단축

     * 1BRC : 10억행이 있는 텍스트 파일에서 온도 측정값을 읽어 관측소별 최소/평균/최대 온도를 계산하는 코드를 작성하는 챌린지
     * 2024년 1월 1일부터 1월 31일까지 진행했으며, 최신 Java를 최대한 활용하는 것이 목표였음
     * 이에 대해 사람들이 관심을 가지고 다양한 언어(Rust,Go,C++,SQL)로 도전하기 시작
     * Go로 작성한 9가지 솔루션에 대해서 상세 소개 (느린것부터 빠른 것순으로)

기본 측정값

     * cat 명령어를 사용하여 10억행 텍스트데이터(13GB) 데이터를 읽는 데 걸리는 시간은 1.052초임.
     * 실제로 파일을 처리하는 wc 명령어는 거의 1분이 걸림(55.710초).
     * AWK 솔루션을 사용하여 문제를 해결하는 데 걸리는 시간은 7분 35초임.

솔루션 1: 간단하고 관용적인 Go

     * Go 표준 라이브러리를 사용한 첫 번째 솔루션은 1분 45초가 걸림.
     * bufio.Scanner로 줄을 읽고, strings.Cut으로 ';'를 기준으로 분리함.
     * strconv.ParseFloat로 온도를 파싱하고, Go 맵을 사용하여 결과를 누적함.

솔루션 2: 포인터 값이 있는 맵

     * 맵에서 두 번의 해싱을 피하기 위해 map[string]*stats를 사용함.
     * 포인터 값을 사용하여 시간을 1분 45초에서 1분 31초로 단축함.

솔루션 3: strconv.ParseFloat 피하기

     * strconv.ParseFloat 대신 사용자 정의 코드를 사용하여 온도를 파싱함.
     * 시간을 1분 31초에서 55.8초로 단축함.

솔루션 4: 고정 소수점 정수 사용

     * 온도를 정수로 표현하여 부동 소수점 연산을 피함.
     * 시간을 55.8초에서 51.0초로 단축함.

솔루션 5: bytes.Cut 피하기

     * ';'를 찾기 위해 전체 스테이션 이름을 스캔하는 대신 끝에서부터 파싱함.
     * 시간을 51.0초에서 46.0초로 단축함.

솔루션 6: bufio.Scanner 피하기

     * bufio.Scanner를 제거하고 파일을 큰 청크로 읽음.
     * 시간을 46.0초에서 41.3초로 단축함.

솔루션 7: 사용자 정의 해시 테이블

     * Go의 맵 대신 사용자 정의 해시 테이블을 구현함.
     * 시간을 41.3초에서 25.8초로 단축함.

솔루션 8: 청크 병렬 처리

     * 간단하고 관용적인 코드를 병렬화하여 시간을 1분 45초에서 24.3초로 단축함.

솔루션 9: 모든 최적화 및 병렬 처리

     * 모든 최적화를 병렬 처리와 결합하여 시간을 24.3초에서 3.99초로 단축함.

결과 테이블

     * 모든 Go 솔루션과 가장 빠른 Go 및 Java 솔루션을 비교한 표 제공.
     * Go 버전 중 가장 빠른 것은 2.90초, Java 버전은 0.953초로 처리함.
     * 1초도 안걸리는 Java버전은 Thomas Wuerthinger(GraalVM 제작자)가 한 것으로, 이 분야 전문가이기 때문에 가능한듯

최종 코멘트

     * 일상적인 프로그래밍 작업에서는 간단하고 관용적인 코드가 좋은 출발점임.
     * 데이터 처리 파이프라인을 구축하는 경우, 코드를 4배 또는 26배 빠르게 만들면 사용자 만족도를 높이고 컴퓨팅 비용을 절약할 수 있음.
     * 런타임이나 인터프리터를 구축하는 경우, 성능 향상이 중요함.

GN⁺의 의견

     * 이 기사는 Go 언어를 사용하여 대규모 데이터 처리를 최적화하는 다양한 방법을 탐구함으로써, 성능 최적화에 대한 흥미로운 사례 연구를 제공함.
     * 최적화 과정에서 Go의 표준 라이브러리를 넘어서 사용자 정의 해시 테이블과 같은 데이터 구조를 구현하는 것이 중요한 역할을 함을 보여줌.
     * 병렬 처리의 효과를 강조하며, 단일 코어 최적화와 병렬화를 결합하여 놀라운 성능 향상을 달성함.
     * 이 기사는 성능에 민감한 애플리케이션을 개발하는 소프트웨어 엔지니어에게 유용한 인사이트를 제공함.
     * 이러한 최적화가 실제 프로덕션 환경에서 얼마나 유용할지는 사용 사례에 따라 다를 수 있음. 모든 애플리케이션에 이러한 수준의 최적화가 필요하지 않을 수 있음.

   7번 스텝에서 구체적으로 어떤 작업이 이뤄졌는지가 궁금하네요. 성능향상이 굉장히 많이 일어난 구간인데 ㅋㅋ

   각 스텝별로 구분지어 성능 향상 시간을 나타낸게 흥미 롭네요 ㅎ

   wc 로도 1분이면.... 역시 최고는 코드를 작성하지 않는 거군요... 허허

   좋은 글 공유 감사합니다. 한때 시스템 최적화에 미쳐있던 때가 떠오르네요 ㅎㅎ
   개발 경력이 쌓이면서 최고로 최적화된 코드는 유지보수가 힘들어서 조직 환경에서는 운용하기가 힘든 경험을 많이 하다보니 점차 최적화의 길에서 멀어지게 되었네요.(갑자기 개인 회고)

   조직에 최적화된 코드!!

        Hacker News 의견

     * 첫 번째 사용자는 데이터 조작을 위한 코드 최적화 경험이 없었기 때문에, cat, wc 등을 사용해 기본 측정값을 얻는 첫 번째 섹션이 특히 흥미로웠다고 언급함. 이러한 방법은 ""합리적인"" 범위를 얻는 쉬운 방법이라고 생각함.
     * 두 번째 사용자는 Polars 라이브러리를 사용한 경우의 처리 시간이 33초임을 언급하며, 가장 빠른 수작업 최적화 솔루션에 근접하는 가장 간단한 솔루션에 대해 관심을 표현함.
     * 세 번째 사용자는 Go 언어의 성능 분석 보고서가 혼란스럽다고 언급하며, 특정 코드 라인의 실행 시간이 직관적이지 않을 경우, 데이터가 예측하기 어렵고 분기 예측기가 잘못 예측할 수 있다고 설명함.
     * 네 번째 사용자는 Go 언어로 1BRC(1 Billion Row Challenge)를 수행한 결과를 공유하며, Go 언어 특유의 최적화 기법들을 배웠다고 언급함. 예를 들어, unsafe.Pointer를 사용한 경계 검사 없는 메모리 읽기, 표준 라이브러리의 bytes와 bits 패키지 함수들이 어셈블리로 작성됨, 가비지 컬렉션을 끄는 설정, 스레드에 고루틴을 고정하는 방법 등이 있음.
     * 다섯 번째 사용자는 쉘 스크립트 개발자가 다른 언어 개발자들이 준비하는 동안 이미 특정한 10억 행의 데이터 처리를 완료했을 것이라고 주장함.
     * 여섯 번째 사용자는 데이터베이스가 애플리케이션 코드보다 빠르고, 덜 복잡하며, 데이터 업데이트에 더 강건하다고 주장하며, 데이터베이스에서 더 많은 작업을 수행해야 한다고 강조함.
     * 일곱 번째 사용자는 2010년에 PostgreSQL을 사용해 환경 캐나다의 기후 데이터 2억 7천만 행을 조회하는 웹 앱을 개발했으며, 이 소프트웨어가 수상한 경험을 공유함. 이 앱은 1분 이내에 보고서를 생성할 수 있도록 최적화되었음.
     * 여덟 번째 사용자는 Go 언어에서 병렬 코드가 여전히 Go의 관용적인 코드 스타일을 유지한다는 사실이 멋지다고 언급함.
     * 아홉 번째 사용자는 대규모 텍스트 파일을 CLI에서 다룰 때 유니코드 파싱을 생략하면 awk, grep 등이 한 차원 빠르다고 언급하며, awk 솔루션에 LC_ALL=C를 추가하면 1분 이내로 처리 시간을 단축할 수 있다고 주장함.
     * 마지막 사용자는 가장 빠른 Java 버전이 가장 빠른 Go 버전보다 빠르다는 것이 흥미롭다고 언급하며, 자바 가상 머신(JVM)의 성능이 상당히 좋다고 평가함.
"
"https://news.hada.io/topic?id=13602","일론 머스크, 샘 알트먼·그레그 브록맨 및 OpenAI를 상대로 소송 제기 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            일론 머스크, 샘 알트먼·그레그 브록맨 및 OpenAI를 상대로 소송 제기 [pdf]
"
"https://news.hada.io/topic?id=13585","Tiptap Editor - Headless WYSIWG 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Tiptap Editor - Headless WYSIWG 에디터

     * UI를 제공하지 않는 Headless 프레임워크로 스타일링에 유리함
     * React, Vue, Svelte, Alpine.js, Next.js, Nuxt.js, 바닐라 JS와 아주 잘 작동함
     * ProseMirror 기반

   개인적으로 써본중에 제일 편하고 확장하기 쉽게 구성되어있던 것 같아요.
   Slate 로 에디터를 만들다가 느꼈던 불편함들이 여기서 정말 많이 해결되었습니다.

   혹시 Slate 에디터 사용하셨을 때 불편함이 어떤 게 있었을지 공유해 주실 수 있을까요?
   저는 Tiptap만 써봤는데, Slate가 괜찮다는 얘기 들어서 관심이 생긴 상태라서요!!

   외부 컴포넌트 만드는 부분이 훨씬 편리합니다. 특히 react 같이 자체 dom 을 사용할 경우, html 이 아닌 컴포넌트로서의 렌더가 필요한데 애초에 모듈화를 고려해서 만든 tiptap이 고치기 더 편하더라고요.

   전반적으로 Slate 문서가 어렵다고 느껴졌고, 너무 raw 해서 제가 원하는 기능을 구현하기에 배워야할 부분이 더 많다고 느꼈습니다.

   2년 전 쯤의 기억이라 조금 다를 수 있는데 이런 문제들을 겪었어요.
     * 모바일 환경에서 한글입력 문제: 이건 어디서 발생한지 찾기가 너무 어려웠는데, 커스텀하다가 발생해서 정확히 기억이 안나네요.
     * select 관련 컨트롤 어려움: 선택된 문자들에 속성을 처리하는 기능을 추가하는데 굉장히 까다로웠습니다. (객체 자체가 복잡함)
     * 플러그인 개발의 어려움: 지도 등의 플러그인을 직접 개발하려했는데, tiptap 이 플러그인을 추가개발하기 좋게 구성되어서 편했습니다.

   오.... 감사합니다~!

   https://tiptap.dev/docs/editor/installation/react#7-the-complete-setup 에서 작동하는 에디터 예시를 확인할 수 있습니다.

   개인적으로 문서화가 꽤 잘 되어있다고 생각합니다만, 유료 구독이 필요한 요소들이 중간에 섞여있습니다.
   문서를 읽는데 불편함을 주는 정도는 아니지만, 필요도 없는데 뽐뿌 오게 만들어 대단하기도 하고 얄밉기도 하고.. 복잡미묘하네요.

   문서화가 나름 잘 되어있다고 하시는 말에 동의하기가 어렵습니다. 제가 느끼기에는 시작하기 문서와 API 문서 사이에 간극이 너무 커서 학습 곡선이 높습니다. 저희가 진행하는 리액트 프로젝트에서는 Prosemirror와 react-prosemirror 의 문서화 스타일이 좀더 사용자 친화적이고 완성도 있다고 판단해서, react-prosemirror를 선택하고 tiptap을 선택하지 않았습니다.

   저희의 요구사항에 대한 poc용 샘플코드를 만들기 위해 리액트 예제를 파악하는 동안 다음과 같은 문제가 있었습니다.
    1. StarterKit을 추가했을 때 사용 가능한 요소는 무엇일까요? 패키지 이름으로 별도 문서를 찾아야 합니다. tiptap 예제를 실행해보던 집중상태에서 벗어나게 됩니다.
    2. ListItem은 StarterKit에 포함되어 있는데 예제에서는 왜 또 ListItem을 프로젝트에 포함시킨걸까요? extension에 대한 환경설정을 하기 위해서 입니다.
    3. 왜 editor().chain().focus() 같은 구문을 써야 하나요? 메소드 체이닝에 대한 설계 원리나 설명이 없습니다
    4. Bubble menu와 Floating menu는 리액트 예제에 빠져있습니다. Try it live 페이지 (https://templates.tiptap.dev/pjrwkQtNpq)에서 본 기능과 다르게 동작하므로 왜 기능이 빠져있는지 문서를 살펴봐야 합니다.
    5. 표 기능이 없어서 Extensions 페이지에서 table 키워드로 검색을 합니다. Table, TableCell, TableHeader, TableRow 가 검색결과에 나옵니다. 이것들을 다 추가해야 할까요?
    6. Table과 갖가지 extension을 어찌저찌 추가했습니다. 기능이 제대로 동작하는지 알아보려면 표 삽입부터 해야 합니다. 툴바 커맨드는 어떻게 작성해야 하나요? editor 툴바의 어디에 해당 커맨드들에 대한 함수가 추가될까요? 전혀 힌트가 없습니다
    7. 표 안에 다른 표를 중첩시키지 못해야 한다는 요구사항이 있습니다. 커서가 표 안에 있는지 판단하는 로직은 어떻게 구현해야 할까요? 전혀 힌트가 없습니다.
    8. Color가 extension으로 패키징되어 있던 것을 기억하고 궁금증이 생겨 소스코드를 열어봅니다. src 디렉토리에 파일이 단 두 개 있는 것을 보고 탄식이 나옵니다. 왜 이렇게 자잘한 모듈을 만들었는지 의도를 이해할 수 없습니다. 이렇게 작은 기능도 패키지로 만들면 재사용성보다는 의존성 버전 관리에 부담이 있지 않을까요?

   1-3, 4-6, 8은 의문이나 불편함을 전혀 느끼지 못해 저는 동의하기 어렵네요.

   1-2
   StarterKit은 말그대로 Starter를 위한 Kit인 만큼, 실사용 시점에는 별 의미가 없어보입니다.
   ListItem의 경우 말씀하신대로요. Color 익스텐션의 설정을 위한 요소입니다. 마찬가지로 StarterKit을 사용하지 않으면 그만인 부분이라고 생각해요.

   3
   chain().something().run() 은 단순 신택스 슈거와 같은 존재지만, 배터리 포함 라이브러리의 컨셉에 알맞는 기능을 제공한다고 생각합니다.
   볼드 후 포커스 같은 액션이 사실상 필수인 모바일 환경에서 아주 유용하게 쓰고 있습니다.

   4
   해당 기능을 사용하지 않아 잘 모르겠네요.
   (내가 사용하지 않을 기능에 대한 정보를 굳이 보지 않아도 된다는 점에서 1번의 집중상태에서 벗어나게 된다고 언급하신 단점의 반대급부로 오는 장점이라고 생각합니다.)

   5-6
   각 익스텐션의 문서에 잘 나와있을 뿐더러, 일반적으로 에디터를 구현하는 것과 다를게 전혀 없습니다.
   솔직히 6번에서 말씀하신 부분은 제가 savvykang님의 말씀을 제대로 이해한게 맞는지도 잘 모르겠습니다... '이게 왜 의문이지...? 대체 어떤 힌트가 필요한거지...?' 라는 생각이 계속 드네요ㅎㅎ...

   7
   ""다른 노드들의 것과 같이"" editor.isActive('table') 으로 포커스를 확인할 수 있습니다.
   다만, 단순히 포커스 노드만 파악한다고 해결될 문제가 아닌거 같아요. 붙여넣기에 대한 필터링, 개발자도구를 통한 삽입 등 많은 부분을 고려해야 하는 요구사항인 것 같습니다.

   8
   의존성 버전 관리에 부담이 된다는 부분에는 동의합니다만, 필요하지 않은 기능의 코드를 가지고 있지 않아도 된다는 점에서 장점을 가져가는 부분이라고 생각합니다.
   딱 저희 케이스에서 언급하신 Color 익스텐션을 사용하지 않을 상황이었거든요. 각자의 장단점이 있는 것 같습니다.

   .
   언급하신 react-prosemirror와 tiptap은 컨셉이 완전히 다른 친구라고 생각합니다.

   prosemirror를 리액트스럽게 쓸 수 있게 하는 친구
   vs
   prosemirror 기반인지 아닌지는 중요하지 않고, 아무튼 내 서비스에 어울리는 에디터를 구현하는데 필요한 것들을 몽땅 모아둔 친구

   Vue 쪽에서 이미 인기있는 친구라서 작성을 할까 말까 고민하다가,
   이번에 Sveltekit에 적용하여 사용해보니 꽤나 만족스러워 올려봅니다.

   스벨트 진영에는 이거다! 싶은 만족스러운 위지윅 에디터가 없어서 고민이었는데,
   같은 고민을 하시는 분들이 계시다면 한번쯤 시도해 보시는 것도 괜찮을 것 같습니다.
"
"https://news.hada.io/topic?id=13653","애플, 스포티파이 사건으로 EU에서 18억 유로의 반독점 벌금 부과 받아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                애플, 스포티파이 사건으로 EU에서 18억 유로의 반독점 벌금 부과 받아

        Hacker News 의견

     * 벌금과 억제 조치에 대한 요약:
          + 이 벌금은 0.04억 유로의 벌금과 1.8억 유로의 반경쟁적 행위에 대한 억제 조치로 구성됨.
          + 1.8억 유로의 일시금은 애플의 수익의 약 0.5%에 해당하며, 음악 스트리밍과 앱 스토어에 부분적으로 관련이 있지만, 주로 생성 AI와 시각 컴퓨팅과 같은 신흥 기술에서 지배적인 위치를 차지하려는 대기업에 대한 경고로 해석됨.
          + 경고의 내용: 공정하게 경쟁하거나 법정에서 만나게 될 것임.
     * 90년대와 2020년대 기술 업계의 변화에 대한 의견:
          + 90년대에 마이크로소프트에 대한 반경쟁적 관행으로 인해 많은 비판이 있었으며, 당시 정책 입안자들은 마이크로소프트를 분할하는 논의를 했음.
          + 현재 중국, 미국, EU와 같은 큰 시장에서 애플에 대한 유사한 대화가 왜 이루어지지 않는지에 대한 의문 제기.
     * 스포티파이의 불만과 애플의 대응에 대한 요약:
          + 스포티파이는 홈팟과 애플 워치에 대한 동등한 접근 부족을 공개적으로 불만을 표시했음.
          + 애플은 이듬해 WWDC에서 API를 통해 이 문제를 해결했지만, 4년이 지난 후에도 스포티파이는 아직 지원을 구현하지 않았음.
     * 벌금이 EU 예산에 어떻게 사용되는지에 대한 설명:
          + EU 반독점 규칙을 위반한 기업에 부과된 벌금은 일반 EU 예산으로 들어감.
          + 이 돈은 특정 지출에 할당되지 않으며, 회원국의 다음 해 EU 예산 기여금이 그만큼 줄어듦.
          + 따라서 벌금은 EU를 재정적으로 지원하고 납세자의 부담을 줄임.
     * 애플의 앱스토어 결제 제한에 대한 법원의 판결 요약:
          + 이 사건은 음악 스트리밍이 아니라 앱스토어 개발자에게 강요된 애플의 결제 제한에 관한 것임.
          + 법원은 애플의 관행이 경쟁을 파괴한다고 판단했으며, 이는 새로운 게이트키퍼 법안과 일치함.
     * 애플과 스포티파이의 반응에 대한 링크:
          + 애플의 반응: 애플 뉴스룸 링크
          + 스포티파이의 반응: 스포티파이 뉴스룸 링크
     * 스포티파이의 불리한 입장과 애플의 시장 지배력에 대한 의견:
          + 스포티파이는 애플 앱스토어의 규칙으로 인해 불리한 입장에 있음.
          + iOS에서 구독을 제공하기 위해 스포티파이는 수익의 30%를 애플에게 지불해야 함.
          + 애플은 애플 뮤직으로 경쟁하면서 자체 수익의 30%를 지불하지 않음.
          + 스포티파이는 애플 뮤직과 동등하게 경쟁하기 위해 가격을 30% 더 올리거나 줄여야 함.
     * 애플과 스포티파이에 대한 개인적인 경험:
          + 사용자는 애플과 스포티파이 모두를 좋아하지만, 애플이 스포티파이를 부당하게 대우하여 최종적으로 더 나쁜 제품을 경험함.
     * 마이크로소프트의 과거 행위와 애플의 현재 행위에 대한 비교:
          + 마이크로소프트의 30년 전 행위와 애플의 현재 행위를 비교하는 것은 적절치 않은 전환 전술임.
     * 벌금의 충분성에 대한 의문:
          + 벌금이 충분히 큰지, 애플이 이 행위로 얼마나 많은 돈을 벌었는지, 벌금 후에도 순이익이 남는다면 같은 방식으로 계속할지에 대한 의문 제기.
"
"https://news.hada.io/topic?id=13624","ShotSpotter : 동네를 듣는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ShotSpotter : 동네를 듣는 기술

도청 장치, 이웃을 엿듣다

     * 지난주 Wired에 SoundThinking 센서에 대한 스프레드시트가 유출됨.
     * SoundThinking은 ShotSpotter로 알려진 야외 음향 총격 탐지 시스템을 운영하는 회사로, 작년에 사명을 변경함.
     * ShotSpotter는 미국의 많은 법 집행 기관에 총격 탐지 서비스를 제공하며, 이로 인해 많은 언론의 주목과 비판을 받음.

비밀주의에 대한 비판

     * ShotSpotter는 센서 위치 정보를 국가 기밀처럼 보호하며, 심지어 고객인 법 집행 기관에도 공개하지 않음.
     * 이러한 비밀주의는 ShotSpotter의 효과성 주장이 독립적으로 검증될 수 없다는 비판과, 제품이 민간인의 권리에 미치는 영향에 대한 연구를 억압하려 한다는 비난을 불러일으킴.

센서 위치의 발견

     * Wired 기사에는 센서 위치를 나타내는 지도가 포함되어 있으나, 최대 확대 수준이 높아 정확한 위치 해석이 불가능함.
     * 지도 뷰어가 사용하는 JSON 데이터를 KML로 변환하여 센서의 정확한 좌표를 확인하는 것은 간단함.

센서의 실체

     * 센서는 거리의 가로등 팔에 고정된 무해한 베이지색 상자로, 도시에서 흔히 볼 수 있는 다양한 기술 장치 중 하나임.
     * ShotSpotter 센서가 녹음한 대화가 범죄 재판에서 증거로 두 번이나 도입된 바 있으며, 한 경우에서는 허용되었고 다른 경우에서는 허용되지 않음.

감시의 확산

     * 앨버커키는 이미 광범위한 경찰 운영 비디오 감시 네트워크와 실시간 범죄 센터를 연결하고 있으며, 이는 대중의 감시나 인식 없이 이루어짐.

센서의 밀도와 범위

     * 센서의 밀도는 예상보다 높으며, 앨버커키에는 약 721개의 센서가 있음.
     * 센서의 범위 결정은 인종과 계급과 관련이 있을 수 있으며, 부유할수록 감시가 적음.

GN⁺의 의견

     * ShotSpotter와 같은 기술은 범죄 예방과 신속한 대응에 도움이 될 수 있지만, 개인의 사생활 침해와 불균형한 감시 분포로 인한 사회적 불평등 문제를 야기할 수 있음.
     * 이 기술의 도입 시 공공의 인식과 감시 기술에 대한 투명성 확보가 중요함.
     * ShotSpotter와 유사한 기능을 제공하는 다른 기술로는 HunchLab, PredPol 등이 있으며, 이들은 데이터 기반의 범죄 예측 및 분석을 제공함.
     * 기술 도입의 득은 신속한 범죄 대응과 예방이지만, 실은 사생활 침해와 데이터 오용의 위험성이 있음.
     * ShotSpotter의 효과성과 정확성에 대한 독립적인 검증이 필요하며, 이를 통해 기술의 신뢰성을 높일 수 있음.

        Hacker News 의견

     * 알버커키의 정치적 맥락과 경찰 문제에 대한 기사
          + 작성자는 ""알버커키 콘텐츠""라고 부르는 글을 가끔 쓰며, 이 글은 알버커키의 경찰과 시민 사법에 대한 정치적 맥락을 어느 정도 이해하고 있는 독자를 대상으로 함.
          + 알버커키 경찰서(APD)에 대한 공공의 신뢰가 매우 낮으며, 투명성과 책임성 부족이 논쟁의 중심이 됨.
          + APD는 인력 부족 문제를 해결하기 위해 ShotSpotter와 같은 실시간 프로그램을 활용하고 있으며, 총기 범죄가 도시의 주요 문제 중 하나임.
     * 감시 기술과 APD
          + APD는 도시 전역에 수천 개의 카메라를 실시간으로 접근하고, 2014년부터 얼굴 인식 기술을 사용함.
          + 실시간 범죄 센터에서는 Genetec이라는 벤더의 데이터 퓨전 제품을 사용하여 ShotSpotter 탐지, 비디오 피드, 서비스 호출 기록 등을 결합하여 특정 인물이나 위치에 대한 정보를 제공함.
          + 그러나 도시 정치에서 범죄와 경찰에 대한 많은 문제들이 있어 감시에 대한 주제는 대중의 관심에서 멀어짐.
     * ShotSpotter 커버리지에 대한 불만
          + APD가 ShotSpotter가 어느 지역을 커버하는지 구체적으로 밝히지 않는 것은 경찰 개혁을 지지하는 사람들 사이에서 큰 불만 중 하나임.
          + 작성자는 이 기사를 통해 ShotSpotter에 대한 정보가 마침내 공개되었다는 점을 강조하고자 함.
          + 감시 기술의 분포가 시민권과 도시의 삶의 질에 어떤 영향을 미치는지에 대한 우려는 부차적으로 언급되며, 장단점에 대한 논의는 복잡한 주제로 긴 글이 필요함.
     * ShotSpotter 센서와 소득의 상관관계
          + ShotSpotter 센서와의 거리는 가구 소득과 상관관계가 있으며, 소득이 높을수록 감시를 덜 받음.
          + 총기 범죄가 많은 지역에 더 많은 감시가 이루어진다는 가정 하에, 센서 위치 데이터와 총기 범죄 데이터가 충분하다면 이 상관관계를 더 명확히 할 수 있음.
     * ShotSpotter 데이터의 접근성
          + 원시 데이터는 window._Flourish_data 변수에서 사용 가능하며, shot-scraper 도구를 사용하여 추출할 수 있음.
          + 데이터는 SQLite에 로드되어 Datasette를 통해 지도상에서 볼 수 있음.
     * ShotSpotter의 실제 사례
          + 시카고에서 불꽃놀이를 하던 소년이 ShotSpotter 경보로 인해 총격을 당한 사건이 발생함.
     * 경찰 감시의 잠재적 단점
          + ShotSpotter가 설치된 도시 전역에서 경찰이 그 효율성에 대해 논의할 수 없는 상황이며, 이는 ShotSpotter를 판매한 회사가 실제 데이터 공개를 금지하기 때문임.
     * 감시 기술에 대한 의견
          + ""총격 탐지""라는 용어는 마케팅 용어에 불과하며, 실제로는 공공 오디오 감시 장치로, 소프트웨어는 큰 소리에 대한 경보를 발생시키고, 이는 콜센터에서 인간이 판단함.
     * ShotSpotter의 기능에 대한 오해
          + ShotSpotter가 대화를 녹음한다는 사실을 알지 못했으며, 소리의 서명을 분석하는 기능이 대부분의 데이터를 즉시 버릴 것이라고 가정함.
     * ShotSpotter의 기술적 원리에 대한 생각
          + ShotSpotter와 같은 시스템이 기술적 원리로는 복잡하지 않음에도 불구하고, 지역 사회의 '문제적' 활동을 정확히 파악하는 데 사용될 수 있음을 생각함.
          + 그러나 이러한 생각은 기술에 대한 불편한 감정과 함께함.
"
"https://news.hada.io/topic?id=13584","스타트업에서 ‘다능인’으로 살아남기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          스타트업에서 ‘다능인’으로 살아남기

   스타트업의 주니어로서 직면하는 가장 큰 어려움은 무엇이라고 생각하시나요?

   매번 생경한 업무 경험을 통해 아마 각자 자신이 가진 역량의 한계를 인식하게 되는 좌절과 실패의 순간들이 아닐까요.

   이에 대해 에밀리 와프닉은 본인의 저서 『모든 것이 되는 법』에서 자신의 경험을 토대로 자신의 단점을 ‘극복’하려 하지 말고, 인정하고 받아들이며 적재적소에서 효과적으로 그것을 장점으로 변환할 수 있다고 말합니다.

   오늘 소개해 드릴 『모든 것이 되는 법』에선 이러한 다양한 기술과 관심사를 어떻게 스타트업의 역동성에 맞추어 활용하고, 개인적인 성장과 조직의 발전을 이끌어낼 수 있는지에 대한 실질적인 가이드를 제공합니다.

   그는 이 책을 통해 주니어 직원들이 자신의 장점을 최대한 활용하여 빠르게 변화하는 업무 환경에서 자신만의 자리를 만들고 성장할 수 있는 방법을 모색해볼 수 있다고 말합니다.
"
"https://news.hada.io/topic?id=13643","Ask GN: 언어는 선택?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Ask GN: 언어는 선택?

   python을 다루는 주니어친구와 .Net을 다루는 제가 만나서
   대화를 하던 중 취업이 관련된 상황에서

   Rust, Elixir와 같이 국내에서 보기 힘든 언어를 다루는 주니어와
   Java, JS와 같이 국내에 많이 보이는 언어를 다루는 주니어 중에

   어디가 유리할 지에 대해 주니어끼리 대화를 해보았습니다.

   물론 지식이 미흡에 나온 결론은 CS와 코테로 역량을 보여주는게 최우선이고
   그 이후는 회사를 따라간다란 추측만 나왔는데

   선배님들은 어떻게 생각하나요?

   이 질문의 핵심 포인트는 아니겠습니다만, 가끔 ""언어는 단지 도구, 뭘 골라도 상관없다"" 는 얘기를 들으면 조금 아쉬운 마음이 듭니다. 각 언어가 추구하는 가치와 만들어가는 의도가 다른데 그런 것들이 ""둘 다 똑같이 이런거 저런거 할 수 있으니까"" 뭉뚱그려 잡히는 듯 해서요.

   언어가 수단에 불과하다는 주장은 제어구조, 자료구조와 알고리즘 학습같은 입문 과정에 한정하면 동의할 만합니다. 다만 입문 과정 다음에는 업계의 관성, 표준 라이브러리, 서드파티 라이브러리, 실행 모델, 배포 방식, 참고 자료의 접근성과 질, 사용자 수 등의 세부 사항들을 고려하는 게 맞다고 생각합니다. 아무리 범용 언어의 표현력이 동등하다고 하더라도 머신러닝 목적으로는 파이썬을 선택하는 것이 제일 안전한 선택인 것처럼요

   제가 주니어라서 그런가 입문과정에서만 보고 있던 것일지도 모르겠네요.
   좋은 말씀 감사합니다ㅠㅠ

   동의합니다 ㅎㅎ

   우리나라 업계에서 통용되는 기술스택이 유리합니다. 독학으로 배울 수 있는 것과 회사에서 배울 수 있는 것에는 차이가 있습니다. 후자가 그나마 덜 외롭지 않을까 싶네요

   자바를 하다가 닷넷의 매력에 빠져버린 주니어입니다ㅠ

   기술적으로 더 완결성이나 생산성 있는 기술이 시장에서 선택되는건 아니더라구요. 제 경우에 10년전쯤에는 파이썬 장고 쓰는 메이저 회사가 한군데여서 취업은 얌전히 포기하고 PHP랑 스프링 공부했던 기억이 있습니다. 지금의 어떤 프레임워크도 장고의 생산성이 안나오는것 같아서 안타깝기도 하고 그렇습니다

   주니어 레벨이면 스스로 긴 맥락과 예외상황을 고려해서 설계할 능력이 없으므로 누군가 감독을 해야합니다.
   감독해줄사람이 적은 언어를 배우면 기회가 적어지는거죠...
   역량은 극소수 네임드 오픈소스 커미터 레벨이야기고, 허접한 쇼핑몰같은거 만드는건 역량이 아닙니다.

   아하..그러면 고민을 해봐야겠네요

   솔직히 언어는 하나 제대로 마스터 해두면 다른 언어들은 쉽게 적응 가능합니다.
   뭐 객체지향 언어에서 함수형 언어로 넘어가는 그런 상황만 아니면요.

   가고 싶은 회사의 채용 공고를 참고할 것 같네요.

   언어는 그다지 중요한게 아닐수.. 환경을 이해하고 다루는 숙련도나, 강건한 설계등이 중요한것일수.. 목표언어의 잘 설계된 오픈소스를 공부하거나 커밋하는걸 목표하겠..

   오픈소스를 보고 공부하기! 기억해두겠습니다

   적어도 국내에서는 java를 하는 회사가 많으니 취업에도 유리합니다.
   메인을 java로 하고 서브언어들을 공부해가는게 취업 관점에만 봤을때는 유리합니다.
   실력과는 상관없이 서류에서부터 관련 경험이 없으면 떨어질 확률이 높아집니다 ㅜㅜ

   맞아요. 아무리 다른 언어를 잘한들 회사에서 주력으로 쓰는 언어가 Java면 당장 Java로 기여할 수 있는 직원이 필요하죠.

   제가 아무리 cs를 달달 외우고 문서를 달달 외운들
   이력 자체가 회사와 맞지 않으면 서류부터 탈락시키더군요 ㅜㅜ
   슬프게도 경험담입니다 ㅜㅜ

   회사에선 Java 프레임워크나 WebSquare 와 같은 웹 솔루션을 다루지만, 취미개발로는 node나 rust를 합니다.

   회사일만 한다면 회사를 따라가는게 맞다고 생각하고, 자기가 하고 싶은 개발이 있다면 짬을 내서라도 원하는 언어를 공부할거라고 생각해서...

   언어나 프레임워크는 언제나 바뀔 수 있다는 생각으로 CS지식이나 아키텍처 지식이 중요하다고 생각합니다. 언어는 중요한게 아니라고 생각해요.

   다시 전공서적을 펼쳐야겠네요

   알람이 와서 봤는데 윗 분들이 언어는 단순한 도구인가에 대하여 이야기 한게 있네요 ㅎㅎㅎ

   언어가 ‘단순한‘ 도구라고는 생각하지 않지만 도구는 맞다고 생각합니다.

   언어는 각각의 철학과 설계원칙을 가지고 있어 이를 이해하고 해결해야하는 문제(또는 제공해야할 제품)에 적합한 언어를 선택해야 한다고 생각합니다.

   결국 적합한 언어를 어떻게 찾아야하는지는 경험이나 학습을 통해서 알 수 있죠. 이 관점에서 저는 언어를 도구라 생각하고 더 중요한건 아키텍처나 CS지식이라 말씀했던거에요.

   2주전에 썼던 댓글을 보니 마지막에 “언어는 중요한게 아니라고 생각해요.” 라는 말이 좀 건방졌다고 생각이 들어 이렇게 추가 댓글 남깁니다 ㅎㅎㅎ

   이글 너무 늦게 보고 뒷북 치는것 같긴 한데 단순히 언어는 도구~~~ 하는 것은 좀 비현실적인 이야기 같고, 적어도 러닝커브가 높은 진입장벽이 있는 러스트를 잘 다루는??? 주니어라면 다른 언어 .net, python은 그냥 우습게 다루겠죠. 기본역량에서 꽤 수준차이가 날거라고 생각합니다. 경험상 c/c++ 이 아닌 python 으로 개발자 시장에 진입한 친구들은 기본 c/s, 알고리즘 지식도 그렇고 일머리가 좀 많이 떨어지는 측면들이 있었어요 물론 관련 분야의 도메인 지식이 뒷받침되어야 시너지 효과가 나겠지만). 즉 출발선에서부터 실력차이가 분명이 나는게 현실이고 단순히 언어의 선택 문제는 아니라는거죠.
"
"https://news.hada.io/topic?id=13608","Llama 2와 함께하는 프롬프트 엔지니어링 - 1시간 강의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Llama 2와 함께하는 프롬프트 엔지니어링 - 1시간 강의

     * Meta 와 DeepLearning AI가 같이 만든 단기 과정으로 한시적 무료
     * Llama 2 모델에 대한 프롬프트 모범 사례
     * Llama 2 Chat, Code Llama, Llama Guard 모델 이용하기
     * Llama Guard 모델을 사용하여 안전하고 책임감 있는 AI 애플리케이션을 구축하는 방법 배우기

   알게모르게 DeepLaerning AI에서 꾸준히 강의를 풀어줘서 한번씩 보기 나쁘지 않네요
"
"https://news.hada.io/topic?id=13659","Opus 1.5 출시: 머신 러닝으로 업그레이드된 Opus","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Opus 1.5 출시: 머신 러닝으로 업그레이드된 Opus

Opus 1.5의 주요 업그레이드

     * Opus 1.5 버전이 발표되며, 기계 학습 기반의 품질 개선을 포함한 다양한 업그레이드가 이루어짐.
     * 이전 버전과 완벽하게 호환되면서 오디오 경험을 향상시키는 새로운 기능들이 도입됨.
     * 기계 학습을 통해 신호 처리 및 생성에 처음으로 깊은 학습 기술을 사용함.

패킷 손실 처리

     * 패킷 손실은 통화 중 가장 큰 불편 중 하나로, 패킷이 전달되지 않으면 코덱의 품질이 좋아도 소용이 없음.
     * 패킷 손실 은폐(PLC)는 누락된 패킷을 대신하여 오디오를 채우는 역할을 하며, 기계 학습이 크게 도움이 됨.
     * 딥 뉴럴 네트워크(DNN)를 사용하여 PLC를 수행하며, 이는 논문과 기술적인 세부 사항에서 확인할 수 있음.

심층적인 중복성(DRED)

     * 패킷이 연속적으로 손실될 때, PLC만으로는 한계가 있으며, 중복성을 통해 이를 해결함.
     * Opus는 낮은 비트율의 중복성(LBRR) 메커니즘을 포함하고 있으나, ML을 사용하여 효율적으로 음성을 압축하는 DRED를 도입함.
     * DRED는 약 12-32 kb/s의 오버헤드로 1초 분량의 중복성을 전송할 수 있음.

신경 보코더

     * DRED와 PLC의 낮은 복잡성은 새로운 신경 보코더 기술을 통해 가능해짐.
     * FARGAN 보코더는 LPCNet의 1/5 복잡성으로 노트북이나 최신 휴대폰에서도 1% 미만의 CPU 코어를 사용함.

저비트율 음성 품질 향상

     * 충분한 비트가 주어지지 않을 때, 코딩 아티팩트가 들릴 수 있으며, LACE와 NoLACE라는 두 가지 향상 방법이 도입됨.
     * LACE는 전통적인 포스트필터와 유사하지만, 디코더가 사용할 수 있는 모든 데이터를 기반으로 DNN이 포스트필터 계수를 최적화함.
     * NoLACE는 더 많은 계산을 필요로 하지만, 추가적인 비선형 신호 처리로 인해 더 강력함.

WebRTC 통합

     * DRED는 지터 버퍼와의 긴밀한 통합을 요구하며, 지터 버퍼의 크기는 패킷 도착 지연을 허용하는 최대량을 결정함.
     * DRED 데이터는 늦게 도착하는 오디오 패킷과 유사하게 처리되며, 네트워크 상황이 개선되면 버퍼 크기가 줄어들 수 있음.

IETF 및 표준화

     * 이 작업은 IETF mlcodec 작업 그룹 내에서 진행되며, Opus의 일반적인 확장 메커니즘, 심층적인 중복성, 음성 코딩 향상에 중점을 둠.
     * DRED 메커니즘은 Opus 패킷에 추가 정보를 포함하면서도 이전 버전의 디코더가 여전히 정규 Opus 데이터를 디코딩할 수 있도록 함.

기타 개선 사항

     * Opus는 AVX2 지원과 실시간 탐지를 추가하여 새로운 DNN 코드와 SILK 인코더가 더 빨라짐.
     * ARMv7 Neon 최적화가 AArch64에서 다시 활성화되어 인코딩이 더 효율적이 됨.
     * 패킷 손실을 더 현실적으로 시뮬레이션하기 위해, 패킷 손실 모델을 생성하여 실제와 유사한 손실을 시뮬레이션할 수 있음.

GN⁺의 의견

     * Opus 1.5는 기존의 오디오 코덱 기술을 기계 학습으로 향상시키는 혁신적인 접근 방식을 제시함. 이는 통신 기술의 진보에 중요한 발전이 될 수 있음.
     * 패킷 손실 문제는 실시간 통신에서 중요한 문제이며, Opus 1.5의 기술은 이를 해결하기 위한 효과적인 방법을 제공함. 특히, DRED와 같은 기능은 네트워크 불안정성이 높은 환경에서 유용할 수 있음.
     * 신경 보코더와 같은 기술은 음성 품질을 향상시키는 데 있어 중요한 역할을 하지만, 이러한 기술의 복잡성과 성능 요구 사항을 고려할 때, 모든 사용자가 이점을 누릴 수 있는지는 논의가 필요함.
     * Opus 1.5의 기술은 WebRTC와 같은 실시간 통신 플랫폼에 통합될 때 그 진가를 발휘할 수 있으며, 이는 원격 근무와 온라인 커뮤니케이션의 품질을 크게 향상시킬 수 있음.
     * 표준화 과정은 이러한 기술이 널리 채택되고 호환성을 유지하는 데 중요한 역할을 하며, IETF의 노력은 이 기술이 더 넓은 범위의 응용 프로그램과 서비스에서 사용될 수 있도록 하는 데 기여할 것임.
"
"https://news.hada.io/topic?id=13549","사무실에서의 나쁜 하루","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              사무실에서의 나쁜 하루

사무실에서의 나쁜 하루

     * 1917년 9월 14일, 포츠머스 섬의 호르시아 섬에서 발생한 비행기 사고에 대한 이야기.
     * 영국의 수상 비행기가 구름을 빠져나와 무선 방송국의 350피트 높이의 마스트에 고속으로 충돌함.
     * 비행기의 엔진이 철제 격자 구조물에 걸려 비행기가 마스트에 수직으로 매달림.
     * 조종사는 의식을 잃고 300피트 상공에 매달려 있었으나, 세 명의 남성이 그를 구조하기 위해 마스트를 올라감.
     * 해군 예비역 선원 래스(Rath)가 비행기까지 올라가 조종사를 붙잡고 있었고, 다른 두 명이 로프를 전달하여 조종사를 안전하게 내려옴.
     * 이들의 용기는 마스트가 심하게 손상되어 언제 무너질지 모르는 상황에서도 구조 작업을 주저 없이 수행했다는 점에서 더욱 돋보임.
     * 조종사는 E. A. de Ville로, 소피스 베이비(Sopwith Baby)를 조종하고 있었음.
     * 래스는 골드 앨버트 메달을, 노울턴(Knoulton)과 애보트(Abbott)는 앨버트 메달을 수상함.

GN⁺의 의견

     * 이 사건은 1차 세계대전 당시의 항공기술과 안전 기준이 현대에 비해 상당히 낙후되어 있었음을 보여줌. 당시의 항공기는 구조적으로 취약하고, 비행 중 사고 발생 시 구조 장비나 절차가 제대로 갖춰져 있지 않았음을 알 수 있음.
     * 조종사의 생명을 구한 세 남성의 용기와 헌신은 당시의 군인과 민간인들이 겪어야 했던 위험한 상황과 그들의 용기를 상기시켜줌. 이러한 이야기는 현대의 안전 규정과 비상 절차의 중요성을 강조하는 역사적 교훈을 제공함.
     * 비슷한 상황을 다루는 현대의 비행 시뮬레이션 게임이나 훈련 프로그램에서 이 사건을 시나리오로 활용할 수 있을 것임. 이를 통해 비상 상황 대처 능력을 향상시키고, 역사적 사건을 경험하는 독특한 방법을 제공할 수 있음.
     * 이 사건은 항공 역사에 있어서 흥미로운 에피소드로, 항공기의 안전과 구조 작업에 대한 이해를 높이는 데 도움이 될 수 있음.

        Hacker News 의견

     * 사람들이 생각하는 것보다 자주 발생하는 사건들 중 하나는 소형 항공기가 전선에 걸리는 것이다. 2019년 사건의 이미지는 거의 믿기 어려울 정도이며, 플로리다 2021년과 온타리오 1986년 사건도 비슷한 예이다. 전선이 소형 항공기를 잡아내면서도 그것들을 파괴하지 않는 능력에 대해 놀라움을 표함.

          + 소형 항공기가 전선에 걸리는 사건은 생각보다 자주 발생함. 2019년과 2021년 플로리다, 1986년 온타리오에서의 사건들이 이를 증명함.

     * 랜들 먼로의 책 ""How To""에서는 우주비행사 크리스 해드필드에게 비행기를 한쪽으로 굴려 크레인에서 매달린 케이블에 착륙훅을 걸 수 있는지에 대한 질문이 나온다. 해드필드는 이론적으로 가능성에 대해 회의적이지만, 소형 항공기가 전선과 타워에 걸리는 일이 자주 발생한다고 언급함.

          + ""How To""라는 책에서는 소형 항공기가 전선에 걸리는 일이 자주 있음을 언급하며, 이에 대한 이론적 가능성에 대해 논의함.

     * 1917년의 한 사건에 대해 더 많은 정보를 찾았으며, 비행기가 타워에 충돌했을 때 파괴되지 않고 마치 다트보드에 박힌 다트처럼 보이는 것에 대해 놀라움을 표현함. 비행기가 매우 천천히 움직였거나 타워가 충격을 완화할 정도로 흔들렸을 가능성에 대해 의문을 제기함.

          + 1917년 사건에서 비행기가 타워에 충돌했음에도 불구하고 파괴되지 않은 것에 대해 의아해함.

     * 전선 위의 깜박이는 불빛에 대해 배우는 것이 재미있다고 언급함. 전선 위에 단 하나의 전선만 있음에도 불구하고, 전류의 유도를 통해 저전압 회로를 만들어내는 방식에 대해 설명함.

          + 전선 위의 깜박이는 불빛이 단일 전선을 통해 유도 전류로 작동하는 원리에 대해 흥미로움을 표현함.

     * 2017년 기념 행사와 추가적인 맥락, 무선국에 대한 더 많은 사진, 2018년 고고학 보고서에 대한 링크를 제공함.

          + 2017년 기념 행사와 무선국에 대한 추가적인 정보와 사진, 2018년 고고학 보고서에 대한 링크를 공유함.

     * ""The Crimson Permanent Assurance""라는 영화를 언급하며, 사무실에서 일어난 사건에 대해 생각나게 한다고 함. 로프의 세부사항을 알게 되면서 사건을 더 잘 이해할 수 있었다고 언급함.

          + ""The Crimson Permanent Assurance""라는 영화를 언급하며, 사건에 대한 이해를 돕는 세부사항에 대해 언급함.

     * 비행기 조종사를 구조하기 위해 100미터가 넘는 긴 로프를 사용한 것에 대해 감탄함.

          + 조종사를 구조하기 위해 사용된 매우 긴 로프에 대한 감탄을 표현함.

     * 구조 작업이 이루어진 구조물이 매우 높고 가늘며, 강철이 강하고 격자 구조가 많은 강도를 제공한다는 것에 대해 놀라움을 표함.

          + 구조물의 높이와 가느다란 구조, 그리고 격자 구조가 제공하는 강도에 대해 놀라움을 표현함.
"
"https://news.hada.io/topic?id=13577","나는 왜 Firefox를 사용하는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          나는 왜 Firefox를 사용하는가

파이어폭스를 사용하는 이유

     * 내부 설정 페이지(about:config): 사용자가 자유롭게 편집할 수 있는 수천 개의 설정이 있는 파이어폭스의 about:config 페이지는 UI 요소나 행동을 사용자 취향에 맞게 변경할 수 있음. 실험적인 웹 플랫폼 기능도 개별적으로 활성화 가능.
     * 데이터 암호화: 모질라는 사용자의 동기화된 브라우징 데이터에 접근할 수 없도록 설계하여 강력한 암호화를 제공. 모질라 서버에 저장된 데이터는 기술적으로 복호화가 불가능하여 개인 정보 보호에 강점.
     * 개인 정보 보호를 위한 웹 페이지 번역: 서버로 데이터를 전송하지 않고 브라우저 내에서 직접 웹 페이지를 번역할 수 있는 파이어폭스 번역 기능은 사용자의 개인 정보 보호에 중점을 둠.
     * 독자적인 브라우저 엔진 개발: 파이어폭스는 모질라의 지코(Gecko) 엔진을 사용하며, 이는 웹의 다양성에 기여하고 건강한 웹 생태계를 유지하는 데 도움이 됨.
     * 안드로이드에서의 확장 프로그램 지원: 안드로이드에서 광고 차단 및 사용자 스크립트 추가 등의 확장 프로그램을 가장 잘 지원하여 웹 사용 경험 향상에 기여.
     * 우수한 화면 속 화면(PIP) 플레이어: 데스크탑 파이어폭스의 화면 속 화면 비디오 플레이어는 사용자에게 유용한 기능으로, 비디오를 손쉽게 조작하고 화면 어디에나 배치할 수 있음.

GN⁺의 의견

     * 파이어폭스는 사용자의 개인 정보 보호와 데이터 보안에 중점을 두는 브라우저로, 이는 사용자들이 온라인 활동을 할 때 중요한 요소임. 특히, 모질라가 사용자 데이터에 접근할 수 없도록 설계한 점은 다른 브라우저와 차별화되는 특징.
     * 웹의 다양성과 건강한 생태계를 위해 지코 엔진과 같은 독자적인 브라우저 엔진의 존재는 중요함. 이는 웹 표준의 다양한 구현과 장기적인 혁신을 촉진할 수 있음.
     * 안드로이드에서의 확장 프로그램 지원은 모바일 환경에서도 데스크탑 수준의 웹 경험을 제공함으로써 사용자 경험을 크게 향상시킴.
     * 파이어폭스를 선택함으로써 얻는 이점은 개인 정보 보호와 웹 사용자화의 자유도가 높아지는 것이지만, 시장 점유율이 낮은 브라우저를 사용함으로써 호환성 문제나 지원이 중단될 위험도 고려해야 함.
     * 파이어폭스와 유사한 개인 정보 보호를 중시하는 브라우저로는 브레이브(Brave)가 있으며, 이는 사용자의 개인 정보를 보호하면서도 빠른 웹 서핑 경험을 제공하는 대안이 될 수 있음.

        Hacker News 의견

     * 사용자는 크롬보다 빠르다는 벤치마크 결과에 크게 신경 쓰지 않으며, macOS 노트북과 iOS에서 Firefox 및 Safari + Firefox Focus를 사용하는 데 문제가 없음을 언급함. 오픈소스 소프트웨어를 선호하며, 데이터를 수집하고 판매하지 않는 Mozilla와 협력자들에게 감사함을 표현함.

     ""* 사용자는 벤치마크 테스트에서 크롬이 약간 더 빠르다 하더라도 실제로 체감하지 못할 것 같다고 생각함. macOS와 iOS에서 Firefox와 Safari + Firefox Focus를 사용하며 웹킷 기반으로 문제 없이 호환됨을 경험함. 또한, 애드온과 플러그인 시장이 건강하다고 느낌. 사용자는 데이터를 수집하고 판매하지 않는 오픈소스 소프트웨어를 중요시하며, Mozilla와 그 협력자들에게 감사함을 표함.*""
     * 다른 사용자는 Mozilla가 자체 브라우저 엔진을 개발하는 것이 중요하다고 생각하며, Mozilla 없이는 Safari가 점점 Internet Explorer처럼 독점적인 위치에 이를 것이라고 우려함.

     ""* Mozilla가 자체 브라우저 엔진을 개발하는 것이 중요하다고 생각하는 사용자. Mozilla 없이는 Safari가 점점 인터넷 익스플로러와 같은 독점적 위치에 이를 것이라고 우려함.*""
     * 또 다른 사용자는 기사에 언급되지 않은 Firefox의 좋아하는 기능들을 공유함. CSS를 사용한 브라우저 UI 커스터마이징, 컨테이너를 통한 쿠키 분리, 주소창 옆 별도의 검색 필드 등이 그 예임.

     ""* 사용자는 CSS를 통해 브라우저 UI를 커스터마이징할 수 있는 'User Styles', 쿠키를 분리하여 관리할 수 있는 'Containers', 주소창 옆에 별도의 검색 필드 등 Firefox의 좋아하는 기능들을 공유함.*""
     * 한 사용자는 지난 10년간 Firefox가 최고의 브라우저를 제공하는 데 집중한 유능한 리더십이 있었다면 오늘날 Firefox의 위치가 어디일지 궁금해함.

     ""* 사용자는 지난 10년 동안 Firefox가 최고의 브라우저를 제공하는 데 집중한 유능한 리더십이 있었다면 Firefox가 어떤 위치에 있을지 궁금해함.*""
     * 다른 사용자는 Android용 Firefox가 우수한 광고 차단, 배경에서 비디오 재생, 다크 리더와 같은 확장 기능을 제공하여 훌륭한 브라우저라고 평가함.

     ""* 사용자는 Android용 Firefox가 우수한 광고 차단, 배경 비디오 재생, 다크 리더 등의 확장 기능을 제공하여 훌륭한 브라우저라고 평가함.*""
     * 한 사용자는 Mozilla를 여전히 신뢰하는 몇 안 되는 웹 기업 중 하나로 보며, Chrome을 사실상 스파이웨어로 간주함. Google이 2000년대와 2010년대에 오픈소스에 기여하며 쌓은 기술 애호가들 사이의 명성이 있었지만, 결국 Microsoft와 같은 회사가 되었다고 비판함.

     ""* 사용자는 Mozilla를 여전히 신뢰하는 몇 안 되는 웹 기업 중 하나로 보며, Chrome을 사실상 스파이웨어로 간주함. Google이 과거 오픈소스 기여를 통해 쌓은 명성에도 불구하고 Microsoft와 같은 방식으로 변했다고 비판함.*""
     * 또 다른 사용자는 Firefox의 수직 탭 옵션이 Edge의 구현에 비해 만족스럽지 않다고 느끼며, 브라우저의 기본 인터페이스가 업무에 중요하다고 언급함. Firebird 시절부터의 팬이지만, 현대적인 브라우징 경험을 제공하지 못한다고 생각함.

     ""* 사용자는 Firefox의 수직 탭 옵션이 Edge의 구현에 비해 만족스럽지 않다고 느끼며, 브라우저의 기본 인터페이스가 중요하다고 언급함. Firebird 시절부터의 팬이지만, 현대적인 브라우징 경험을 제공하지 못한다고 생각함.*""
     * 한 사용자는 자신의 데이터를 자체 서버에서 접근하려는 의도가 없는 회사의 브라우저를 사용하는 아이디어를 좋아하며, 이러한 Mozilla의 동기 때문에 Firefox를 신뢰함을 표현함.

     ""* 사용자는 자신의 데이터를 자체 서버에서 접근하려는 의도가 없는 회사의 브라우저를 사용하는 것을 선호하며, 이러한 Mozilla의 동기 때문에 Firefox를 신뢰함을 표현함.*""
     * 다른 사용자는 Firefox가 더 많은 커스터마이징을 허용한다고 언급하며, 탭 브라우징이 UX의 잘못된 발전이라고 생각함. 이 사용자는 sway/i3에서 모든 애플리케이션에 탭 기능을 사용하고 있으며, 소프트웨어를 자신의 필요에 맞게 조정할 수 있어야 한다고 주장함.

     ""* 사용자는 Firefox가 더 많은 커스터마이징을 허용한다고 언급하며, 탭 브라우징을 UX의 잘못된 발전으로 보고, 소프트웨어를 자신의 필요에 맞게 조정할 수 있어야 한다고 주장함.*""
     * 마지막으로 한 사용자는 여러 어려움에도 불구하고 항상 Firefox를 고수해왔으며, Firefox가 사라지지 않는 한 다른 브라우저로 전환하지 않을 것임을 밝힘.

     ""* 사용자는 여러 어려움에도 불구하고 항상 Firefox를 고수해왔으며, Firefox가 사라지지 않는 한 다른 브라우저로 전환하지 않을 것임을 밝힘.*""
"
"https://news.hada.io/topic?id=13554","Netlify가 간단한 정적 사이트에 대해 $104k(1억4천만원) 청구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Netlify가 간단한 정적 사이트에 대해 $104k(1억4천만원) 청구

     * 한 사용자가 Netlify로부터 104,500달러의 청구서를 받음.
     * 사용자는 이것이 사기나 장난인 줄 알았으나 대시보드를 확인해보니 실제로 청구된 금액임을 확인함.
     * 해당 사이트는 4년 동안 Netlify의 무료 티어를 사용해왔으며, 월간 대역폭 사용량이 10GB를 넘은 적이 없고 일일 방문자 수는 약 200명 정도였음.
     * Netlify의 과금 정책은 초과 대역폭에 대해 100GB당 55달러를 청구함.
     * 사용자는 DDoS 공격을 받았을 가능성을 생각하고 Netlify의 청구 지원팀에 연락함.
     * 지원팀은 대역폭 사용이 사용자 에이전트로부터 발생한 것이며, 일반적으로 이런 경우 고객에게 청구 금액의 20%를 청구하나, 이 경우에는 5%로 할인해주겠다고 제안함.
     * 사용자는 Netlify와 Vercel과 같은 서버리스 플랫폼이 DDoS 보호 기능이나 지출 한도 설정 기능을 제공하지 않는 것에 대해 불만을 표함.
     * 사용자는 아직 5천 달러를 지불하지 않았으며, 사건을 공유하기로 결정함.
     * 사용자는 사이트를 Cloudflare로 이전했으며, Netlify나 Vercel을 다시는 사용하지 않겠다고 결심함.

사용자 커뮤니티의 반응

     * 많은 사용자들이 Netlify의 대응에 분노하며, 이 사건을 공유하고 Netlify를 피해야 한다고 조언함.
     * 일부 사용자들은 Netlify 계정을 삭제하고 다른 호스팅 서비스로 이전하기로 결정함.
     * Netlify CEO가 Hacker News에 답변을 게시하여 모든 청구를 면제해주겠다고 밝힘.
     * CEO는 무료 사이트가 트래픽 급증으로 인해 자동으로 중단되지 않도록 정책을 변경하는 것을 고려 중이라고 언급함.

GN⁺의 의견

     * 이 사건은 클라우드 서비스를 이용할 때 발생할 수 있는 예상치 못한 비용과 관련된 위험을 보여줌. 사용자는 서비스 약관을 주의 깊게 읽고, 특히 무료 티어를 사용할 때 발생할 수 있는 잠재적 비용에 대해 인지해야 함.
     * Netlify와 같은 플랫폼이 DDoS 공격에 대한 보호 기능을 제공하지 않는 것은 큰 단점이며, 이는 사용자가 대안적인 보안 조치를 고려하게 만듦. 예를 들어, Cloudflare는 무료 티어에서도 DDoS 보호를 제공함.
     * Netlify 이용을 시작하기 전에, 사용자는 업체의 과금 정책과 초과 사용에 대한 처리 방법을 명확히 이해하고, 필요한 경우 지출 한도를 설정할 수 있는지 확인해야 함.
     * 이 사건은 고객 지원과 투명성의 중요성을 강조함. 서비스 제공업체는 고객이 예상치 못한 비용에 직면했을 때 적절하고 신속한 지원을 제공해야 함.
     * 이 사건은 또한 소셜 미디어와 온라인 커뮤니티의 힘을 보여줌. 사용자의 문제가 공개적으로 공유되고 대중의 관심을 끌었을 때, 기업은 빠르게 대응하고 문제를 해결하려는 경향이 있음.

   무료티어에 대해서는 일정량 이상 사용시 서비스를 중단시키는 기능을 기본으로 제공해야 할것으로 보입니다만. 과연..

   https://news.hada.io/topic?id=13308
   예전에 올라왔던 클라우드 데이터 비용 비교 자료입니다

   아래 의견 요약에도 있네요.

   ""해당 문제가 바이럴이 되면 Netlify의 경영진이 나서서 청구서를 $0로 조정할 것으로 예상됨.""

   저게 아주 초반에 달렸던 댓글인데... 좀 뻔하긴 했지만 역시 요금이 청구되지 않는 방향으로 해결되었군요.

   만약 이 사람이 HN에 올리지 않았다면 어땠을지 모르겠습니다. @_@
   부당한 청구를 한 사람도 분명 존재할 것 같아요.

   Cloudflare 만세...

        Hacker News 의견

     * Netlify CEO의 발언 요약:
          + Netlify의 CEO가 직접 나서서 해당 스레드의 사용자에게 추가 요금이 부과되지 않을 것이라고 알렸음.
          + Netlify 정책상 공격 패턴에 해당하지 않는 트래픽 급증 시 무료 사이트를 중단시키지 않으며, 정당한 실수로 발생한 요금은 사후에 용서함.
          + 초기 지원 답변에서 이러한 점이 명확하게 전달되지 않은 것에 대해 사과함.
     * 부트스트랩 창업자의 우려 요약:
          + 지출에 제한을 둘 수 없다는 것이 창업자에게는 최악의 악몽이며, DDoS 공격으로 인해 파산할 수도 있음.
          + Vercel 문서를 검토한 결과, DDoS 공격에 대한 자동 완화 조치가 있지만, 이로 인한 사용량이 청구될 수 있음.
          + 호스팅 제공업체들이 DDoS 보호에 대한 책임을 져야 하며, 사용자가 자신의 사용량을 모니터링하고 Edge Middleware를 사용하여 원치 않는 트래픽을 차단해야 한다는 점이 불안함을 증가시킴.
          + Cloudflare의 DDoS 보호가 더 강력하게 표현되어 있으며, 사용자는 마음의 평화를 위해 추가 비용을 지불할 의향이 있음.
     * 비즈니스 모델에 대한 조언 요약:
          + 기업은 자신의 실수로 인한 비용을 고객에게 청구하는 비즈니스 모델을 가지지 말아야 함.
          + Netlify의 실수로 인해 발생한 대량의 데이터 사용량에 대해 고객이 책임을 져야 한다는 제안은 문제가 있음.
          + Unity의 새로운 가격 정책이 비슷한 문제를 일으켰고, CEO가 해고된 사례를 들어 교훈을 제시함.
     * Netlify의 대응에 대한 비판 요약:
          + Netlify가 DDoS 공격으로 인한 과도한 청구를 방지할 방법을 제공하지 않는 것은 알려진 문제임.
          + Netlify의 이상한 대화 내용이 공개되어, 소규모 사이트가 DDoS 공격을 받으면 해결책이 없음을 시사함.
     * 고객 서비스의 문제점 예시 요약:
          + 한 사용자가 도시로부터 받은 $65,000의 물 요금 청구서를 예로 들어, 고객 서비스가 항상 합리적인 판단을 하지 못한다는 점을 지적함.
          + 문제를 해결하기 위해 상위 담당자에게 문의할 때까지 고객 서비스가 비현실적인 요금을 주장했던 경험을 공유함.
     * 과도한 요금 청구에 대한 비판 요약:
          + 과도한 요금을 단순히 5%로 감면하는 것은 회사의 실제 대역폭 비용과의 연관성이 없음을 보여줌.
          + 이러한 행위가 사기처럼 느껴질 수 있음을 지적함.
     * Netlify 청구서 문제에 대한 예상 해결 요약:
          + 해당 문제가 바이럴이 되면 Netlify의 경영진이 나서서 청구서를 $0로 조정할 것으로 예상됨.
          + 바이럴되지 않고 DDoS 공격을 받아 요금을 지불해야 했던 다른 피해자들에 대한 애도의 뜻을 표함.
     * 비윤리적인 비즈니스 계획에 대한 풍자 요약:
          + 무료 정적 웹사이트를 제공하고, 트래픽이 급증하면 과도한 요금을 청구하는 비윤리적인 비즈니스 계획에 대한 풍자적인 설명을 제공함.
     * 무료 서비스 사용에 대한 경고 요약:
          + 사용자의 통제를 벗어난 이유로 갑작스럽게 큰 금액의 요금을 청구할 수 있는 무료 서비스는 절대 사용해서는 안 됨을 강조함.
          + 과도한 사용량이 발생하면 서비스를 중단해야 함을 주장함.
     * Vercel에 대한 사용자의 반응 요약:
          + 이 논의에서 제기된 우려로 인해 Vercel 프로젝트를 삭제하고 Cloudflare로 이전한 사용자의 경험을 공유함.
          + 지출 한도는 모든 대규모 조직에서 IT 결정을 내릴 때 중요한 논의 사항임을 강조함.

   사회적 이슈로 만들어야 금액을 면제해주는구나 ㅋㅋ 푼돈 아끼려다가 회사 망하겠네
"
"https://news.hada.io/topic?id=13644","종이에 인쇄하기 위한 CSS 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           종이에 인쇄하기 위한 CSS 정리

     * 회사에서 HTML을 이용해 종이/엑셀로 수기로 작성되던 양식을 웹 기반 도구로 재생성 및 대체하는 작업을 하고 있어서 이를 정리함
     * 웹 페이지가 인쇄될 때 어떻게 보이는지를 제어하는 CSS 기본 사항과 몇 가지 팁과 요령을 설명

@page

     * @page는 웹사이트의 인쇄 설정을 브라우저에 알리는 CSS 규칙임.
     * @page는 DOM을 포함하며, 웹에서 <html> 요소는 화면 가장자리에 의해 제한되지만 인쇄 시에는 @page에 의해 제한됨.
     * @page 설정은 Ctrl+P를 눌렀을 때 브라우저 인쇄 대화 상자에서 얻는 설정과 대략 일치함.

@media print

     * 인쇄 시에만 적용되는 스타일을 작성할 수 있는 print 미디어 쿼리가 있음.
     * 인쇄물에 나타나지 않아야 할 헤더, 옵션, 사용자 도움말 텍스트 등에 display:none을 추가함.

너비, 높이, 여백, 패딩

     * 박스 모델에 대한 이해가 필요하며, @page margin: 0을 설정하는 이유는 DOM 요소에서 여백을 처리하는 것을 선호하기 때문임.
     * <html>이 전체 물리적 종이를 차지하고 여백이 DOM 내부에 있음을 기억하는 것이 더 쉬움.

요소 위치 지정

     * 문서를 디자인할 때 적절한 HTML/CSS를 사용하여 요소를 배치함.
     * 특정 크기의 스티커 용지에 맞는 사각형을 만들거나, 특별한 레이블이 붙은 용지에 데이터를 인쇄해야 할 때 절대 위치 지정을 사용할 수도 있음.

여러 페이지 문서와 반복 요소

     * 인보이스와 같은 표 데이터를 포함하는 인쇄 생성기를 작성할 때, <table>이 두 번째 페이지로 넘어가면 브라우저가 자동으로 <thead>를 각 페이지 상단에 복제함.
     * 자바스크립트를 사용하여 테이블을 여러 개의 작은 테이블로 분할하여 페이지를 생성함.

세로/가로 모드

     * 사용자가 원하는 경우 @page 규칙을 덮어쓸 수 있음.
     * 별도의 <style> 요소를 세로 및 가로 모드에 대해 생성하고 자바스크립트를 사용하여 스위치할 수 있음.

데이터 소스

     * 데이터를 페이지에 가져오는 몇 가지 방법이 있으며, URL 매개변수에 모든 데이터를 포장하거나 자바스크립트를 사용하여 API를 통해 데이터베이스 레코드를 가져올 수 있음.
     * contenteditable을 설정하여 사용자가 인쇄 전에 작은 변경을 할 수 있도록 함.

GN⁺의 의견

     * 이 기사는 웹 개발자들에게 인쇄용 CSS를 작성하는 방법에 대한 유용한 가이드를 제공함. 특히 웹 페이지를 물리적 문서로 변환하는 작업에 종사하는 개발자들에게 도움이 될 것임.
     * 인쇄용 CSS는 종종 무시되는 주제이지만, 많은 기업에서 여전히 중요한 서류를 인쇄해야 하는 경우가 많으므로 이러한 지식은 가치가 있음.
     * 기사에서 제시된 기술적 접근 방식은 실제 업무 환경에서 테스트되고 검증된 것으로 보이며, 실제 문제를 해결하는 데 실용적인 솔루션을 제공함.
     * CSS @page 규칙과 @media print 쿼리의 사용은 웹 페이지를 인쇄할 때 종이의 크기와 여백을 제어하는 데 중요하며, 이는 웹 개발자가 반드시 알아야 할 내용임.
     * 이 기사는 인쇄용 CSS에 대한 기본적인 이해를 넘어서 실제로 어떻게 적용되는지에 대한 실질적인 예시와 팁을 제공함으로써, 이론과 실제의 간극을 좁히는 데 도움을 줌.

   다음에 한번 이걸로 토이 프로젝트를 해보고싶네요.

        Hacker News 의견

     * 개인 웹사이트에서 선호하는 인쇄 스타일에 대한 설명:
          + 섹션 헤더가 페이지 하단에 인쇄되어 다음 페이지 상단에 내용이 헤더 없이 남지 않도록 함.
          + 그래픽과 도표가 페이지를 넘어가지 않고 전체 페이지에 인쇄되도록 함.
          + 하이퍼링크의 URL을 인쇄하여 링크가 단순히 밑줄이 그어진 텍스트로만 남지 않도록 함.
     * Pagedjs.org를 사용하여 책을 편집한 경험:
          + 미리보기에 몇 가지 버그가 있었지만 최종 출력물은 완벽했으며, InDesign을 사용하는 것보다 시간을 4분의 1만큼 절약함.
          + HTML/CSS와 InDesign에 모두 익숙하다면 Pagedjs가 장문 레이아웃에 더 나은 선택임.
     * 인쇄용 CSS에 대한 브라우저 지원의 문제점:
          + CSS에서 페이지마다 각주를 넣는 것과 같은 일부 기능에 대한 동등한 기능이 없음.
          + 사용자 정의 CSS 속성을 실험하고 이러한 격차를 메울 수 있는 쉬운 HTML 레이아웃 엔진이 있는지 질문.
     * CSS를 사용한 인쇄의 용이성:
          + 어떤 앱에서도 HTML+CSS를 출력하여 깔끔하고 예쁜 인쇄 문서를 쉽게 준비할 수 있음.
          + PostScript나 TeX를 배우는 것보다 CSS 타이포그래피를 몇 분 만에 작성하는 것이 더 쉬움.
     * 인쇄를 위한 브라우저 지원이 너무 나빠서 네이티브 앱을 만들어야 하는 상황:
          + 현재는 PDF를 다운로드하여 인쇄해야 함.
          + Chrome/Blink, Safari/Webkit, Firefox/Mozilla 개발자들에게 적어도 해킹이 작동하도록 요청.
     * CSS의 역사와 현재 상황에 대한 고찰:
          + CSS는 처음에 인쇄 미디어를 염두에 두고 시작되었으나 브라우저 지원이 뒤처짐.
     * HTML & CSS를 사용하여 인보이스와 일부 전자책을 만드는 방법:
          + print-css.rocks와 Weasyprint을 활용하는 방법을 소개.
     * 브라우저를 통해 PDF를 생성하기 위해 사용한 paper-css에 대한 언급.
     * HTML/CSS를 사용한 인쇄 자료 제작의 장점:
          + 인쇄 자료 제작에 필요한 모든 것을 HTML/CSS로 사용함.
     * CSS 기술을 활용하여 소셜 네트워크의 프로필을 인쇄 형식으로 제공한 경험:
          + 공장 노동자를 대상으로 한 소셜 네트워크에서 프로필을 인쇄할 수 있도록 함.
          + 워크샵과 코스 인증서를 만드는 온라인 에디터를 만든 경험도 공유.
"
"https://news.hada.io/topic?id=13600","남극 영어남극 영어

남극 영어의 역사

     * 1989년, 호주 작가 베르나데트 힌스가 남극에서 일하는 과학자들의 어휘를 연구하기 위해 남극을 방문함.
     * 힌스는 남극 대륙에서 기원하고 지구상의 다른 곳에서는 사용되지 않는 다양한 독특한 단어들에 대해 기술함.
     * 2000년, 그녀는 남극 방언에서 발견된 단어들을 상세히 설명하는 '남극 사전'을 출판함.

남극 영어의 어휘

     * 남극 영어는 다른 영어 변종에서 사용되지 않는 여러 단어들을 특징으로 함.
     * 어휘의 차이 예시로는, 'donga'(잠자는 방), 'The Ice'(남극), 'homer'(집에서 만든 맥주), 'Big Eye'(불면증) 등이 있음.
     * 남극 영어에는 빙하의 다양한 유형을 나타내는 200개 이상의 단어가 있으며, 'tabulars'(남극 빙상에서 떨어져 나온 큰 평평한 정상의 빙산)와 'growlers'(집 크기의 수중에서 부식되는 빙산) 등이 포함됨.
     * 또한 관광 산업에서는 'Kodak poisoning'(많은 관광객들이 같은 장소를 사진 찍는 현상)과 'Dead-Penguin Tours'(펭귄이 약한 새끼를 버려 죽게 둔 후, 인기 있는 관광지에 시체가 남아 관광객들에게 슬픔을 주는 투어)와 같은 용어가 있음.

다른 언어로부터의 영향

     * 남극 영어는 스페인어와 북유럽 언어들의 영향을 받음.
     * 포클랜드 제도에서는 스페인어를 구사하는 남미인들에 의해 영향을 받아, 'camp'(스페인어 'campo'에서 유래한 단어로 마을 외곽의 시골을 의미)와 같은 단어가 사용됨.
     * 18세기와 19세기에는 북유럽 산업가들이 고래잡이와 모피 무역에 관심을 가지면서 'grax'(고래잡이 과정 끝에 남는 고체물질을 설명하는 노르웨이어 기원 단어)와 같은 기술적 단어를 도입함.
     * 이러한 유럽인들은 19세기와 20세기에 'nunatak', 'mukluk', 'pemmican', 'Nansen sled'와 같은 단어를 도입했으며, 이는 다시 다양한 원주민 아메리카 언어에서 받아들인 것임.

남극 영어의 영향

     * 남극 영어는 다른 영어 변종에도 영향을 미쳤으며, 특히 빙하와 관련된 용어들이 남극에서 처음 채택되었음.

GN⁺의 의견

     * 남극 영어는 극한 환경에서의 언어 변화와 어휘 발전을 연구하는 데 흥미로운 사례를 제공함. 과학자들과 관광 산업 종사자들 사이에서 발전한 이 독특한 언어 변종은 언어가 어떻게 지역적 요소와 문화적 상호작용에 의해 영향을 받는지를 보여줌.
     * 이 기사는 언어학자, 문화 연구자, 그리고 남극에 관심 있는 사람들에게 유용한 정보를 제공함. 남극 영어의 연구는 언어가 어떻게 사회적, 지리적 요인에 의해 진화하는지를 이해하는 데 도움이 될 수 있음.
     * 남극 영어의 연구는 다른 언어 변종에 대한 연구와 비교할 때 독특한 어휘와 발음의 변화를 관찰할 수 있는 기회를 제공함. 이는 언어학적 다양성과 언어 변화의 메커니즘을 이해하는 데 중요한 기여를 할 수 있음.
     * 남극 영어와 유사한 언어적 현상을 연구하는 프로젝트로는 국제 우주 정거장(ISS)에서 사용되는 우주 영어나 다국적 군대 내에서 발전하는 군사 영어 등이 있을 수 있음. 이러한 프로젝트들은 언어가 어떻게 특정 집단 내에서 발전하는지를 연구하는 데 유용함.
     * 남극 영어를 도입하거나 연구할 때는 해당 지역의 특수한 환경과 문화적 배경을 고려해야 함. 남극 영어의 단어와 표현은 남극의 자연 환경과 과학적 탐사의 맥락에서 이해되어야 함.

        Hacker News 의견

     * Joe Pera Talks With You에 대한 언급

     한 댓글에서는 남극 연구 기지에서 자란 새로운 아이가 주인공의 반에 전학 온 이야기를 담은 ""Joe Pera Talks With You""라는 쇼를 추천함. 이 쇼가 대중 매체에서 남극을 언급한 유일한 사례라고 언급함.
     * 맥머도 기지에서의 경험

     맥머도 기지에서의 경험을 공유하는 댓글에서는 다음과 같은 용어들을 소개함:
          + The fry: 겨울 동안 누적되는 정신적 피로와 안개, 무관심 등을 의미함.
          + The CRUD: 기지에서 거의 모든 사람이 걸리고 면역이 생기는 일반적인 감기를 지칭함. 화산재와 건조한 기후로 인해 증상이 악화될 수 있음.
          + Ice Wife/Husband: 남극에서만 일시적으로 형성되는 일대일 커플 관계를 말함. 남극 밖에서의 관계는 별개일 수 있음.
     * 남극 영어 사전 PDF

     남극 영어 사전의 전체 PDF 파일 링크를 공유하는 댓글이 있음.
     * 90년대 그런지 스피크

     90년대에 유행했다고 알려진 ""그런지 스피크""라는 영어 변형에 대해 언급하는 댓글이 있음. 일부 사람들은 이것이 실제로 존재했다고 생각함.
     * 실제 발음 차이를 담은 비디오

     실제 발음 차이를 담은 비디오를 찾으려 했으나 찾지 못했다고 언급하는 댓글이 있음. 대신 틱톡에서 미국 영어와의 미묘한 발음 차이를 보여주는 예시를 찾았다고 함.
     * 유럽에서의 언어 변화

     유럽에서도 비슷한 현상이 일어나고 있다고 언급하는 댓글이 있음. 많은 비모국어 사용자들이 서로 상호작용하면서 ""유로 영어""라는 변형이 생겨나고 있음.
     * 재미있는 언어, 타피앙

     프랑스 조크 언어인 타피앙에 대해 소개하는 댓글이 있음. 해당 댓글은 프랑스어 위키백과 링크를 제공함.
     * Dead-Penguin Tours에 대한 개인적 경험

     늦여름에 약한 새끼 펭귄들이 버려져 죽은 후 관광지에 남겨진 시체를 보는 'Dead-Penguin Tours'에 대해 언급하는 댓글이 있음. 댓글 작성자는 이 투어를 경험했으나 슬퍼해야 한다는 것을 몰랐다고 하며, 자신이 나쁜 사람인지 의문을 제기함.
     * 남극에서 태어나고 자라는 아이들에 대한 궁금증

     남극에서 태어나고 자라는 아이들의 수에 대해 궁금해하는 댓글이 있음. 새로운 언어가 형성되는 과정 중 하나가 어린이들이 다양한 어휘와 발음을 자연스럽게 통합하는 것이라고 언급함.
     * 오스트레일리아 슬랭 '동가'

     '동가'가 오스트레일리아 슬랭이며 다른 영어 변형에서도 사용된다고 언급하는 댓글이 있음.
"
"https://news.hada.io/topic?id=13639","VersionFox - 크로스 플랫폼 & 확장 가능한 SDK 버전 관리자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                VersionFox - 크로스 플랫폼 & 확장 가능한 SDK 버전 관리자

     * nvm, fvm, sdkman, asdf-vm 등과 비슷한 버전 매니저
     * 크로스 플랫폼 도구(윈/맥/리눅스)
     * CLI로 다양한 언어 & 버전의 SDK를 빠르게 설치하고 전환 가능
     * 버전 변경시 Global / Project / Session 스코프 지원
     * 프로젝트 탐색중 런타임 버전을 자동으로 스위치
     * Java, Node.js, Flutter, .NET등을 지원
     * asdf 보다 빠르면서도, 더 간단한 명령셋을 제공
     * Bash, ZSH, Powershell, Clink 쉘 자동완성 지원
     * .node-version, .nvmrc, .sdkmanrc 등의 기존 설정들을 읽어서 마이그레이션 가능

   매우 좋은

   asdf - 멀티 런타임 관리 도구
"
"https://news.hada.io/topic?id=13614","WhatsApp, 페가수스 스파이웨어 제작사에게 비밀 코드 공개 강요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 WhatsApp, 페가수스 스파이웨어 제작사에게 비밀 코드 공개 강요

NSO 그룹의 페가수스 스파이웨어 코드 공개

     * WhatsApp이 이스라엘의 NSO 그룹으로부터 페가수스 스파이웨어의 ""전체 기능""에 대한 접근 권한을 곧 획득할 예정임.
     * 2019년부터 WhatsApp은 페가수스가 1,400명의 사용자를 불법 감시하는 데 사용되었다고 주장하며, NSO의 스파이웨어 코드에 대한 접근을 요구해왔음.
     * 미국 지방 판사는 WhatsApp의 요청을 받아들여 NSO가 스파이웨어의 설치 계층에 대한 정보만을 제공하는 것이 아니라 전체 기능에 대한 정보를 제공해야 한다고 판결함.

NSO 그룹의 법적 싸움 패배

     * NSO는 미국과 이스라엘의 제한으로 인해 소송에서 모든 발견을 차단하려 했으나, 이러한 일괄 요청은 거부됨.
     * NSO는 WhatsApp이 자사의 비밀 코드에 접근하는 것을 막으려 했지만, 최근 판결에서 패배함.
     * WhatsApp은 페가수스가 다양한 통신을 가로채고, 스크린샷을 캡처하며, 브라우저 기록을 추출할 수 있다고 주장함.

WhatsApp의 승리와 NSO의 일부 승리

     * WhatsApp은 법원의 최근 판결을 중요한 이정표로 평가하며, 스파이웨어 회사들이 법을 무시할 수 없다고 강조함.
     * 그러나 WhatsApp의 모든 요청이 받아들여진 것은 아니며, NSO는 서버 아키텍처에 대한 특정 정보를 공유하지 않아도 됨.
     * NSO는 자사의 고객을 밝히지 않아도 되며, 이는 정부가 반대자들을 대상으로 스파이웨어를 사용했다는 보고에도 불구하고 유지됨.

GN⁺의 의견

     * 이 기사는 정부의 감시 도구로 사용되는 스파이웨어에 대한 중요한 법적 판결을 다루고 있어, 개인의 프라이버시와 데이터 보안에 관심이 있는 사람들에게 흥미로울 수 있음.
     * 비판적으로 볼 때, 이러한 스파이웨어의 존재와 사용은 개인의 사생활 침해와 인권 문제를 야기할 수 있으며, 이번 판결이 이러한 문제에 대한 인식을 높이는 계기가 될 수 있음.
     * 이 기술의 도입 시 고려해야 할 사항으로는, 스파이웨어의 사용이 법적 및 윤리적 기준에 부합하는지, 그리고 사용자의 프라이버시를 보호하기 위한 충분한 조치가 취해지고 있는지 등이 있음.
     * 이번 판결로 인해 스파이웨어의 사용과 관련된 투명성이 증가할 수 있으며, 이는 사용자의 데이터 보호를 강화하는 데 기여할 수 있음.
"
"https://news.hada.io/topic?id=13586","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   이사 후유증인지 허리를 다쳐서 요양중입니다.
   통증의학과 가서 근육이완주사 맞고 하니 조금 살만하네요. 다들 허리 조심하세요 ㅠ
"
"https://news.hada.io/topic?id=13587","비디오 게임에서 룩업 테이블의 사용법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          비디오 게임에서 룩업 테이블의 사용법

비디오 게임에서 LUT를 사용하는 방법과 당신도 사용할 수 있는 방법

     * 비디오 게임에서는 LUT(Look-up-tables)를 사용하여 창의적인 기술을 활용함.
     * WebGL을 사용한 예시를 통해 실시간으로 비디오 데이터를 조작하는 방법을 설명함.
     * 사용자는 자신의 비디오나 웹캠을 사용하여 실습할 수 있음.

설정

     * 열화상 카메라로 촬영한 흑백 비디오를 시작점으로 사용함.
     * WebGL을 통해 GPU에 비디오를 업로드하고 쉐이더를 사용하여 원본과 동일하게 표시함.

채색

     * 픽셀 당 색상을 결정하는 'Fragment Shader'를 사용하여 비디오에 색상을 입힘.
     * 오렌지 색상을 입히는 간단한 예제를 통해 색상 조작 방법을 설명함.

성능 비용: 제로

     * 채색에 의한 성능 영향은 거의 없으며, GPU의 'latency hiding'으로 인해 무시할 수 있는 수준임.

Valve Software의 채색 사용

     * Valve Software의 게임 'Left 4 Dead'에서는 차량 모델에 채색을 적용하여 다양한 변형을 생성함.

LUT - 간단하지만 강력함

     * LUT를 사용하여 색상 범위를 정의하고 변화시키는 방법을 설명함.

소박한 1D LUT

     * 1D LUT는 색상 배열로, 그레이스케일 비디오를 RGB로 변환하는 데 사용됨.
     * 다양한 크기의 1D LUT를 사용하여 색상 변환을 시연함.

많은 색상들

     * matplotlib이 지원하는 모든 색상 맵을 1D LUT로 제공함.
     * 'Perceptually Uniform' 색상 맵을 사용하는 것이 권장됨.

여전히 성능 비용은 없는가?

     * 작은 1D LUT의 경우 성능에 큰 영향을 주지 않으며, GPU의 캐시를 효율적으로 사용함.

좀비를 위한 다양성

     * 'Left 4 Dead 2'에서는 LUT를 사용하여 좀비의 다양한 색상 변형을 생성함.

계산 사전 계산

     * 1D LUT를 사용하여 고비용의 계산을 캐시하고, 예를 들어 감마 보정을 빠르게 수행함.

강력한 3D LUT

     * 3D LUT는 RGB 공간 전체를 하나의 큐브로 표현하여 색상을 재매핑함.

설정

     * Panasonic GH6에서 촬영한 로그 프로파일 비디오를 사용하여 3D LUT 처리를 설명함.

간단한 수정

     * DaVinci Resolve를 사용하여 색상 보정을 적용하고 LUT를 다시 내보내는 과정을 설명함.

Left 4 Dead의 3D LUT 사용

     * 게임 산업에서 널리 알려진 워크플로우로, 외부 도구를 사용하여 게임 색상을 스타일링함.

고급 모험

     * DaVinci Resolve와 같은 색상 그레이딩 도구를 사용하여 복잡한 색상 변환을 LUT로 내보내는 방법을 설명함.

기타 사용법

     * LUT의 다른 사용 사례로, Game Boy Advanced에서 Tomb Raider를 포팅하는 데 사용된 LUT를 소개함.

GN⁺의 의견

     * LUT는 비디오 게임과 그래픽 프로그래밍에서 색상 조작과 최적화를 위한 강력한 도구임. 이 기술은 실시간 렌더링에서 성능 저하 없이 다양한 시각적 효과를 제공할 수 있어 개발자와 아티스트 모두에게 유용함.
     * LUT를 사용할 때는 색상의 정확성과 데이터의 시각적 표현을 고려해야 함. 특히 색맹을 고려한 'Perceptually Uniform' 색상 맵의 중요성을 이해하는 것이 중요함.
     * 이 기술은 색상 보정, 시각적 스타일링, 데이터 시각화 등 다양한 분야에서 응용 가능함. 예를 들어, 영화 산업에서 색상 그레이딩에 사용되는 LUT와 유사한 기술을 게임 개발에 적용할 수 있음.
     * LUT의 크기와 정밀도는 사용 목적과 플랫폼에 따라 달라질 수 있으며, 이에 대한 이해가 필요함. 예를 들어, 영화 산업에서는 33³px 크기의 LUT가 표준이지만, 게임이나 다른 그래픽 애플리케이션에서는 다른 크기가 필요할 수 있음.
     * 이 기술을 사용할 때는 색상의 정확한 표현과 성능 최적화 사이의 균형을 찾는 것이 중요함. LUT를 효과적으로 사용하기 위해서는 색상 이론과 그래픽 프로그래밍에 대한 깊은 이해가 필요함.

        Hacker News 의견

     * 룩업 테이블(LUT)을 사용하여 효과를 구현하는 방법에 대한 설명
          + 플레이어 주변의 원형 조명 세부 정보를 저장하는 큰 룩업 테이블과 배경 행의 순서를 무작위로 정하는 두 번째 룩업 테이블이 사용됨.
          + 화면의 1/20만을 갱신할 수 있지만, 무작위 순서를 통해 부드러운 가장자리 효과를 내고 래스터 스캔을 숨길 수 있음.
          + 실시간으로 계산하기에는 너무 느린 부분을 룩업 테이블로 처리하여 행이 업데이트되지 않는 것을 방지함.
     * 텍스처 터널 효과를 위한 룩업 테이블 사용 경험 공유
          + 화면상의 각 픽셀에 대해 중심으로부터의 각도와 거리를 알 수 있는 룩업 테이블을 사용함.
          + 3D 지오메트리가 있는 터널을 이동하는 것처럼 보이지만, 비용이 적게 들어 Pico에서도 구현 가능함.
          + 게임 'Stardust'가 이 효과를 사용했다고 생각했지만, 실제로는 반복되는 6프레임 애니메이션을 배경으로 사용함.
     * 'The Legend of Zelda: Wind Waker' 게임이 룩업 테이블을 사용하여 독특한 비주얼을 구현한 방법에 대한 비디오 링크 제공
          + 'Breath of the Wild'과 'Tears of the Kingdom'도 같은 기술을 사용함.
     * 룩업 테이블에 대한 글을 제출한 저자가 질문에 답할 준비가 되어 있음을 알림.
     * 레트로 게임 개발에서 룩업 테이블의 중요성에 대한 설명
          + 과거에는 메모리 속도가 빨랐지만 프로세서가 느려서 가능한 많은 계산을 룩업 테이블에 담아냄.
          + 룩업 테이블을 더 잘 활용할수록 더 화려한 게임을 만들 수 있었음.
     * NES 홈브루 커뮤니티에서 룩업 테이블을 사용한 놀라운 물리 효과를 구현한 게임 'Bobl'에 대한 경험 공유
          + 시스템이 실시간으로 계산할 수 있는 것보다 훨씬 복잡해 보이는 효과를 룩업 테이블로 달성함.
     * SNES 버전 'Doom' 포트가 룩업 테이블을 사용하여 삼각함수를 계산했던 방법에 대한 팟캐스트 에피소드 공유
          + SNES에는 그래픽 프로세서가 없어서 룩업 테이블을 사용하여 계산함.
     * 동적 프로그래밍에 대한 지식을 가진 사람들이 캐싱과 메모이제이션을 혼동하는 것에 대한 불만 표현
          + 메모이제이션은 지역 공유 상태, 캐싱은 전역 공유 상태로 서로 다른 문제를 가짐.
          + 캐싱은 미래에 필요할 것을 기대하는 것이고, 메모이제이션은 즉시 필요할 것을 알고 있는 상태임.
          + 타뷸레이션은 공통 부분 문제를 미리 찾아 해결하는 것으로, 룩업 테이블은 고정 크기의 타뷸레이션임.
     * 룩업 테이블을 다루는 맥 앱 'Lattice'에 대한 정보 공유
     * 룩업 테이블을 사용한 다양한 효과들의 예시 목록 제공
          + 대기 산란, 스프라이트 색조 변경, 야간 투시경, 열상 카메라, 흑백 비디오 피드 효과, 글리치 효과, 높이맵 음영 처리, 우주선 배기 플럼의 알파 점 요소, 웹사이트 방문자의 마우스 체류 열지도, 결정 효과, 원시 색 공간에서의 포스트 프로세싱 색상화 등.
          + 룩업 테이블은 알려진 값들의 배열을 시각화하는 것으로, 매우 유용함.
"
"https://news.hada.io/topic?id=13603","애플, EU에서의 프로그레시브 웹 앱(PWA) 중단 결정 철회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   애플, EU에서의 프로그레시브 웹 앱(PWA) 중단 결정 철회

유럽에서의 PWA 변화에 대한 애플의 입장 번복

     * 애플이 유럽연합(EU) 내에서 진행되던 프로그레시브 웹 앱(PWA)의 사망에 대한 불만에 대응하여 iOS 17.3 이전으로 복구함.
     * iOS 17.4 베타 버전 출시 후 EU 사용자들은 제대로 작동하지 않는 PWA 문제를 발견
     * 애플은 소비자들의 다수의 요청에 따라 입장을 번복하고, 디지털 마켓 앱 변경 사항에 대한 페이지를 수정함.

애플의 새로운 페이지 내용

     * 애플은 원래 EU에서 DMA 준수를 위해 홈 스크린 웹 앱 기능을 제거할 계획이었으나, 보안과 개인 정보 보호 문제로 인해 새로운 통합 아키텍처를 구축해야 했음.
     * 그러나 홈 스크린 웹 앱에 대한 지원 요청을 받고, 기존 홈 스크린 웹 앱 기능을 계속 제공하기로 결정함.
     * 개발자와 사용자는 iOS 17.4 출시와 함께 홈 스크린 웹 앱의 기존 기능이 복구될 것으로 기대할 수 있음.

유럽연합 디지털 시장 법안(DMA)의 영향

     * 유럽연합 디지털 시장 법안(DMA)은 3월 8일까지 시행되어야 하며, 애플은 3월 5일에 iOS 17.4를 출시할 것으로 예상됨.

애플의 DMA 계획과 이에 대한 불만

     * 애플은 2024년 3월부터 DMA 준수를 위한 변경 사항을 발표함.
     * 모든 사용자를 위해 애플은 모든 iOS 앱을 공증할 것이며, 앱이 판매되는 위치에 상관없이 이루어짐.
     * 개발자는 자체 앱 마켓플레이스를 EU에서 제공할 수 있지만, 애플의 승인과 인간 검토 과정을 거쳐야 함.
     * 이러한 스토어는 자체 환불을 담당해야 하지만, 대안적인 제3자 결제 프로세서를 사용할 수 있음.
     * 애플은 수수료 구조를 변경하여 표준 수수료를 30%에서 17%로 낮추고, 앱 스토어 내에 남아 있는 앱에 대해서는 애플의 결제 처리 서비스를 사용하는 데 3%의 수수료가 부과됨.
     * 앱 스토어를 통하지 않고 판매되는 모든 앱은 연간 앱 첫 설치당 0.50유로의 핵심 기술 수수료가 부과되며, 첫 백만 설치에 대해서는 면제됨.
     * iOS가 WebKit을 넘어서 여러 브라우저 엔진을 지원해야 한다는 요구도 있으며, 이는 EU에서 애플이 Mozilla의 Firefox를 완전히 지원해야 함을 의미함.
     * 동시에 PWA를 무력화시켰으나, 이는 WebKit을 사용하지 않는 모든 브라우저에서 지원해야 한다고 생각했기 때문으로 추정됨.
     * 유럽위원회 당국이 이 문제를 조사할 위협을 한 후에 애플이 이러한 조치를 취함.

GN⁺의 의견

     * 애플의 이번 결정은 사용자의 목소리가 기업의 기술적 결정에 영향을 미칠 수 있음을 보여줌.
     * PWA는 웹과 네이티브 앱 간의 경계를 허무는 기술로, 사용자 경험을 향상시키고 개발 비용을 절감할 수 있는 잠재력을 가짐.
     * 이번 사건은 법적 규제가 기술 기업의 운영 방식에 직접적인 영향을 미칠 수 있음을 시사함.
     * 애플의 웹킷 의존성은 다른 브라우저 엔진의 혁신을 제한할 수 있으며, 이는 개발자와 최종 사용자에게 다양성과 선택의 제한을 의미할 수 있음.
     * 기술적으로 PWA를 지원하는 것은 웹 표준을 준수하고, 플랫폼 간 호환성을 증진시키며, 사용자에게 더 나은 웹 경험을 제공하는 데 중요함.

        Hacker News 의견

     *

     PWA 지원을 위해서는 여전히 WebKit을 기반으로 구축해야 함.
          + 유럽연합(EU)과의 비공식적인 협의가 있었는지 궁금함. PWA에 대한 렌더링 엔진 경쟁이 중요하지 않고 WebKit만으로 충분하다고 결정한 것 같음.
          + 법은 결국 EU가 관심 있는 기능에 대한 변경만 요구함.
     *

     Apple의 입장은 PWA가 타사 브라우저 엔진에서 실행될 경우 일부 개인정보 보호 및 보안 제한을 적용할 수 없다는 것이었음.
          + 만약 DMA가 타사 브라우저 엔진에서 PWA를 실행하도록 요구하지 않았다면, Apple은 처음부터 우려할 사항이 없었을 것임.
          + Apple은 iOS의 기본 앱과 동일한 보안 및 개인정보 보호 모델에 맞춰 WebKit과 그 보안 아키텍처를 기반으로 홈 화면 웹 앱을 계속 구축한다고 설명함.
     *

     Apple이 PWA 푸시 알림을 지원하는 것을 철회했다면, 이를 기반으로 부업 프로젝트를 시작한 개발자들에게 큰 타격이 될 뻔했음.
          + iOS 16.4에서 PWA 푸시 알림을 출시한 지 12개월도 채 되지 않아 이를 되돌리는 것은 해당 기능을 활용한 개발자들에게 큰 실망을 안겨줄 뻔함.
     *

     EU가 Safari/Webkit에 PWA를 제한하는 것을 허용한다고 해석하는 것에 대해:
          + EU가 이를 허용한다고 Apple의 발표에서 언급된 바 없음.
          + Apple의 발표는 DMA 준수 계획의 업데이트에 불과하며, EU는 3월 7일 준수 마감일까지 실제 조치를 취하지 않음.
          + EU는 Apple의 PWA 관련 발표에 따라 긴급하게 대응함. Apple이 업데이트를 배포했다면 많은 기존 PWA가 작동을 멈추고, 앱 스토어로 이동할 수밖에 없었을 것이며, PWA의 명성에 타격을 입혔을 것임.
          + EU는 DMA를 통해 Apple에게 iOS에서 타사 브라우저를 개방하고 Safari/Webkit에 대한 자체 선호를 할 수 없도록 요구함.
     *

     이것이 Apple의 원래 계획이었을까? 최악의 시나리오를 제시한 후 지금의 결과를 승리처럼 보이게 하는 것은 아닐까?
     *

     웹 플랫폼에 대한 한 걸음 뒤로 가지 않은 것에 대해 기쁨.
     *

     Apple이 계속 불편을 주면 Android로 전환을 고려할 수도 있음.
     *

     PWA의 팬으로서, 이 방향이 마음에 듦. Apple은 PWA를 다른 브라우저 엔진에 개방하면서 Safari에서 PWA의 기능을 향상시켜야 함. 앱 개발자들은 대부분의 앱이 PWA로 충분하며, 앱 스토어를 피하는 좋은 방법임을 깨달을 것임.
     *

     다행이다. 개인 앱을 sveltekit pwa에서 react native로 포팅하기 시작했었음.
     *

     iOS에서의 앱이 MacOS에서의 앱과 동일한 지위를 얻을 때는 언제인가?
          + Apple은 ""당신의 안전을 위해서""라는 핑계로 계속 숨을 수 없음. MacOS에서 이미 발생하는 모든 문제를 주장함.
          + 현대 스마트폰은 능력 있는 컴퓨터이지만, 여전히 비싼 벽돌을 주머니에 넣고 다니는 것 같은 느낌임.
"
"https://news.hada.io/topic?id=13666","유럽 충돌 테스터, 자동차 제조사들에게 물리적 조작 장치 재도입 촉구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 유럽 충돌 테스터, 자동차 제조사들에게 물리적 조작 장치 재도입 촉구

유럽 충돌 테스터, 물리적 컨트롤 재도입 촉구

     * 유럽 신차 평가 프로그램(Euro NCAP)은 2026년부터 자동차 제조사들이 일부 기능에 대해 물리적 컨트롤을 다시 도입하도록 점수를 차감할 예정임.
     * 이 조직은 터치스크린의 과도한 사용이 운전자의 주의를 분산시키고 사고 위험을 높인다고 지적함.
     * Euro NCAP는 모든 기능이 별도의 버튼이나 스위치가 될 것을 요구하는 것은 아니지만, 방향 신호등, 비상등, 와이퍼, 경적, 그리고 유럽연합의 eCall 기능과 같은 SOS 기능에 대해서는 물리적 컨트롤을 원함.

테슬라, 가장 큰 위험에 처할 수도

     * 테슬라는 최근에 방향 신호 기능을 핸들에 있는 햅틱 버튼으로 옮기면서 물리적 조작대를 없앴으며, 이로 인해 Euro NCAP의 새로운 규정에 가장 큰 영향을 받을 수 있음.
     * Euro NCAP은 정부 규제 기관이 아니므로, 자동차 제조사들이 이러한 기능에 대해 물리적 컨트롤을 사용하도록 강제할 수는 없지만, Euro NCAP의 5성 안전 등급은 강력한 판매 포인트임.
     * 미국의 고속도로 안전 보험 협회(IIHS)의 Top Safety Pick 프로그램과 유사하며, 이러한 압력이 효과적일 것으로 예상됨.

GN⁺의 의견

     * 터치스크린의 과도한 사용은 운전 중 주의 분산을 초래할 수 있으며, 이는 교통 안전에 심각한 위험을 초래할 수 있음. Euro NCAP의 이러한 움직임은 운전자의 안전을 증진시키는 데 기여할 것임.
     * 이러한 변화는 자동차 제조사들이 사용자 인터페이스 디자인에 더 많은 고민을 하도록 유도할 것이며, 이는 최종 사용자 경험의 질을 향상시킬 수 있음.
     * 테슬라와 같은 회사들이 혁신적인 디자인을 추구하는 과정에서 기존의 안전 기준과 충돌할 수 있으며, 이는 규제 기관과의 긴밀한 협력을 필요로 함.
     * 자동차 산업에서는 이미 물리적 컨트롤과 터치스크린의 조화를 이루려는 다양한 접근 방식이 시도되고 있으며, 이러한 경향은 앞으로도 계속될 것임.
     * Euro NCAP의 이번 결정은 다른 안전 평가 기관에도 영향을 미칠 수 있으며, 전 세계적으로 유사한 안전 기준의 도입을 촉진할 수 있음.

        Hacker News 의견

     *

     Euro NCAP는 모든 것이 자체 버튼이나 스위치가 되어야 한다고 주장하지 않음. 그러나 이 기관은 방향 신호등, 비상등, 와이퍼, 경적, SOS 기능 등에 대한 물리적 조작 장치를 보고 싶어함
          + Euro NCAP는 차량의 주요 안전 기능에 대해 물리적 조작 장치의 필요성을 강조함. 이는 많은 사람들이 생각하는 것보다 합리적인 요구로, 특히 자주 사용하거나 긴급할 때 필요한 안전 관련 조작은 물리적으로 이루어져야 한다는 의견이 있음.
     *

     약 10년 전, 새 차를 구매하기 시작했을 때, 이미 그 당시에도 많은 차량들이 터치 컨트롤로 전환한 것을 볼 수 있었음. 미국의 차량 제조사들이 여전히 빨간색을 방향 신호등으로 사용하는 것에 대해 의아해함. 빨간색은 햇빛에 잘 보이지 않고 브레이크 라이트와 혼동하기 쉬움.
          + 10년 전부터 터치 컨트롤 대신 물리적 버튼을 선호하는 소비자의 의견이 있음. 또한, 미국 차량에서 빨간색 방향 신호등 사용에 대한 비판이 있으며, 이는 시인성 문제와 혼동 가능성을 높인다는 지적이 있음.
     *

     운전 중에 합리적으로 예상되는 모든 조작에 대해 물리적 컨트롤이 있어야 함.
          + 운전 중에 필요한 모든 기능에 대해 물리적 조작 장치가 있어야 한다는 의견이 있음. 무력, 무피드백, 무여행 조작은 불법이 되어야 한다는 주장이 있음.
     *

     2024 Mazda3를 구매한 주된 이유는 시장의 다른 대안들과 달리 모든 것에 대해 물리적 컨트롤을 가지고 있기 때문임. 실제로 Mazda는 10mph를 초과하면 터치 스크린을 비활성화하고 물리적 컨트롤 사용을 강제함.
          + Mazda3가 모든 기능에 대한 물리적 조작 장치를 갖추고 있어 구매를 결정한 소비자의 경험을 공유함. 차량이 일정 속도를 초과하면 터치 스크린이 비활성화되어 물리적 조작만 가능하게 하는 기능에 만족함.
     *

     내 Ford 차량은 기후 조절에 대한 물리적 버튼이 없음(“Max” 제외). 바람 방향을 조절하거나 팬 속도를 조절하려면 여러 단계를 거쳐야 하고, 각 선택은 지연이 발생함.
          + Ford 차량의 터치 컨트롤 기반 기후 조절 시스템에 대한 불만을 표현함. 복잡하고 반응이 느린 조작 과정으로 인해 사용자 경험이 좋지 않다는 의견이 있음.
     *

     언젠가 자동차 조작 장치에 기계식 키보드 애호가들이 핫 스왑 소켓을 도입하는 날을 기다림. 그러면 자동차 조작 장치가 촉각적이어야 하는지, 선형적이어야 하는지, 아니면 클릭 소리가 나야 하는지에 대한 토론이 가능해질 것임.
          + 자동차 조작 장치에 대한 기계식 키보드 애호가들의 관심과 개선 아이디어에 대한 흥미로운 상상을 공유함.
     *

     터치 스크린이 근육 기억의 이점을 가진 분야에서 물리적 컨트롤을 대체하는 추세는 완전한 재앙임.
          + 터치 스크린이 물리적 컨트롤을 대체하는 추세에 대한 비판적인 의견이 있음. 주의를 분산시키지 않고 빠르게 조작할 수 있는 물리적 컨트롤의 유용성을 강조함.
     *

     조직은 방향 신호등, 비상등, 와이퍼, 경적에 대한 물리적 컨트롤을 보고 싶어함
          + 운전 경험이 1960년대에 정점을 찍었고, 2000년대까지 크게 변하지 않았다는 의견이 있음. 터치 스크린이 도입되기 시작하면서 변화가 생겼으며, 이에 대한 비교 이미지 링크가 제공됨.
     *

     테슬라의 터치스크린 컨트롤은 가장 마음에 들지 않는 기능임. 불규칙한 도로를 달리면서 팔 길이 떨어진 작은 아이콘을 누르려고 하면 도로를 주시하면서 할 수 없음. 물리적 컨트롤이 훌륭할 것이지만, 최소한 스크린 상하단에 컨트롤을 고정시켜 손을 받칠 수 있게 해야 함.
          + 테슬라의 터치스크린 조작에 대한 불만을 표현함. 운전 중에 터치스크린을 사용하는 것이 어렵고, 물리적 컨트롤이나 스크린의 상하단에 고정된 컨트롤이 있으면 더 나을 것이라는 의견이 있음.
     *

     테슬라는 최근에 물리적 스토크를 제거하고 방향 신호 기능을 핸들에 있는 햅틱 버튼으로 옮김.
          + 테슬라가 방향 신호등의 물리적 스토크를 제거하고 대체한 것에 대한 비판적인 반응이 있음. 캐패시티브 ""버튼""과 같은 신뢰성이 낮은 입력 방식을 사용한 결정에 대해 의문을 제기함.
"
"https://news.hada.io/topic?id=13552","뉴욕 의과대학, 10억 달러 기부 후 등록금 폐지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      뉴욕 의과대학, 10억 달러 기부 후 등록금 폐지

     * 뉴욕 의과대학, 1억 달러 기부로 등록금 면제
          + 뉴욕시의 앨버트 아인슈타인 의과대학이 93세 과부가 남긴 10억 달러 기부금으로 학생들에게 무료 등록금을 제공함.
          + 기부자인 루스 고테스만 박사는 브롱스 학교의 전 교수로, 이 기부는 미국 학교에 대한 최대 기부 중 하나이며 의과대학에 대한 최대 기부임.
          + 브롱스는 뉴욕시에서 가장 가난한 지역으로, 뉴욕의 62개 카운티 중 가장 건강하지 못한 곳으로 평가됨.
     * 학생들의 부담 경감
          + 학교의 연간 등록금은 거의 59,000달러로, 학생들은 상당한 빚을 지게 됨.
          + 아인슈타인 대학의 성명에 따르면, 2024년 봄 학기 등록금을 이미 낸 최종 학년 학생들에게 환불할 예정이며, 8월부터 모든 학생들은 등록금을 면제받게 됨.
          + 이 기부는 학생들이 그렇지 않았다면 접근하기 어려웠을 프로젝트와 아이디어를 추구할 수 있게 해줄 것이라고 학교 측은 밝힘.
     * 루스 고테스만 박사의 배경
          + 고테스만 박사는 1968년부터 학교에서 근무하기 시작해, 학습 장애 연구, 문해력 프로그램 운영, 널리 사용되는 선별 및 평가 프로토콜 개발에 기여함.
          + 고인이 된 남편, 데이비드 고테스만은 유명한 투자 회사를 설립하고 워렌 버핏의 다국적 기업 버크셔 해서웨이의 초기 투자자였음.
          + 루스 고테스만 박사는 아인슈타인에서 교육받은 의사들이 브롱스와 전 세계 커뮤니티에 최고의 의료 서비스를 제공한다고 언급함.
     * 학생 구성 및 다양성
          + 아인슈타인의 1학년 학생 중 약 50%가 뉴욕 출신이며, 약 60%가 여성임.
          + 학교가 발표한 통계에 따르면, 의과대학 학생 중 약 48%가 백인, 29%가 아시아인, 11%가 히스패닉, 5%가 흑인임.

GN⁺의 의견

     * 이 기부는 의료 교육의 경제적 장벽을 낮추는 데 큰 역할을 할 것으로 보임. 특히 미국에서 의료 교육 비용이 매우 높은 상황에서, 이러한 기부는 더 다양한 배경을 가진 학생들이 의사가 될 수 있는 기회를 제공할 것임.
     * 무료 등록금 제공은 학생들이 빚 없이 학업에 집중할 수 있게 하며, 장기적으로는 의료 분야의 인재 풀을 확대하고 의료 서비스의 질을 향상시킬 수 있는 잠재력을 가짐.
     * 그러나 이러한 기부가 모든 의과대학에 적용될 수 없기 때문에, 교육의 기회 불평등 문제를 완전히 해결하지는 못할 것임. 이는 의료 교육의 비용 문제를 근본적으로 해결하기 위한 더 광범위한 정책적 접근이 필요함을 시사함.
     * 비슷한 노력으로는 뉴욕대학교(NYU) 의과대학이 2018년에 모든 의대생에게 등록금을 면제해주는 프로그램을 시작한 사례가 있음. 이러한 움직임이 다른 의과대학에도 영향을 미칠 수 있을지 주목됨.
     * 의과대학을 선택하는 학생들은 이제 재정적인 부담 없이 자신의 진로를 선택할 수 있게 될 것이며, 이는 의료 분야에서 더 많은 혁신과 다양성을 가져올 수 있음.

        Hacker News 의견

     * 이야기 전체가 마음을 따뜻하게 하는데, 현재 제목과 토론이 그 정의를 제대로 내리고 있는지 모르겠음.
          + 기부금 전액이 등록금에 사용되는 점
          + 기부자는 93세의 의사이자 동문으로 학습 장애 연구 및 선별 프로토콜 개발
          + 기부금은 고인이 된 남편의 버크셔 해서웨이 주식 포트폴리오에서 나온 것으로, 남편은 사망 전 ""당신이 옳다고 생각하는 일을 하라""고 말함
     * 10억 달러의 기부금이 5%의 연간 수익률로 투자되면, 매년 5천만 달러의 수익을 낼 수 있음.
          + 연간 등록금 5만 9천 달러를 고려할 때, 이자만으로도 850명의 학생을 지원할 수 있음
          + 알버트 아인슈타인 의과대학은 매년 약 150명의 신입생을 받아들이며, 의대 과정은 4년임
          + 이 기부금의 이자만으로도 학생들이 영구적으로 등록금 없이 학교에 다닐 수 있을 것으로 보임
     * 알버트 아인슈타인 의과대학이 미국에서 가장 경쟁력 있는 의과대학이 될 것으로 예상됨.
          + 이로 인해 학교 졸업생 수와 뉴욕시/브롱스에서 실습할 의사 수에 어떤 영향을 미칠지 궁금함
     * 무료 등록금에 반대하지 않지만, 이런 종류의 기부금의 효용성에 의문을 제기함.
          + 의사들이 비영리 부문에서 일할 것을 요구하는 조건이 없음
          + 이 분야를 덜 과로하고 독성이 덜한 것으로 만들지 않을 것임
          + 이 학교의 학생 구성은 다른 의과대학과 동일함
          + 의학 프로그램을 졸업하는 거의 모든 학생이 상위 10%의 임금 수령자가 되므로, 이는 잘 사는 소수 집단에 대한 일시적인 재정 문제 완화로 보임
     * 카이저 퍼머넌트는 자사의 파사데나 의과대학에서 비슷한 프로그램을 운영함.
          + 2019년 첫 5개 학급(2024년까지)에 대한 무료 의대 등록금을 발표함
          + 이는 최고의 인재를 끌어들이는데, 붙잡아두는 조건(예: 졸업 후 X년간 카이저에 근무)은 없어 보임
     * 부의 원천은 David ""Sandy"" Gottesman의 투자에서 나온 것으로, 그 중 가장 주목할 만한 것은 버크셔 해서웨이에 대한 초기 투자임.
          + Gottesman은 워렌 버핏의 친구였으며 버크셔 해서웨이 이사회 멤버이자 자신의 회사 First Manhattan을 창립함
     * 좋은 의도 - 단순히 큰 건물에 이름을 붙이는 것보다 낫다고 평가함.
          + 올린 대학은 기부금으로 무료 등록금을 제공하는 것으로 설립되었지만, 이는 지속되지 않았음
     * ""아인슈타인 학생들에게 무료 등록금을 제공하고 싶었다""고 Gottesman 박사가 말함.
          + 충분한 자금이 있어 영구적으로 그렇게 할 수 있음을 즉시 깨달음
          + 동문/교직원으로부터 이런 행운을 얻은 학교와 학생들에 대해 들어본 적이 없어 마음을 움직임
          + 이것이 향후 수십 년간 미국 의과대학의 본보기가 될 수 있음을 희망함
     * 단일 지급자 의료 시스템으로 이행한다면, 의대 부채 문제를 해결해야 할 것임.
          + 고정된 비용이 있는 시스템에서 36만 달러의 부채는 엄청난 부담이 될 것임
     * 10억 달러를 가지고 ""당신이 옳다고 생각하는 일을 하라""는 개방된 지시를 받는 것이 놀라운 일임.
"
"https://news.hada.io/topic?id=13671","오픈소스 프로젝트 ZLUDA가 CUDA 애플리케이션을 AMD GPU에서 실행할 수 있게 함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           오픈소스 프로젝트 ZLUDA가 CUDA 애플리케이션을 AMD GPU에서 실행할 수 있게 함

ZLUDA, CUDA 애플리케이션을 AMD GPU에서 실행 가능하게 하다

     * Andrzej Janik이 개발한 오픈소스 프로젝트 ZLUDA 3은 NVIDIA GPU용으로 설계된 GPU 기반 애플리케이션을 다른 제조사의 하드웨어에서 실행할 수 있게 해줌.
     * 이 기술은 개발자의 추가 작업 없이 기존 애플리케이션을 새 하드웨어에서 실행할 수 있도록 설계됨.
     * 이전 버전의 ZLUDA는 CUDA 애플리케이션을 인텔 GPU에서 실행할 수 있게 했으나, 버전 3에서는 AMD GPU로 전환됨.

ZLUDA는 인텔 GPU용이 아닌가요?

     * ZLUDA는 2020년 인텔 GPU용 CUDA의 대체제로 처음 출시됨.
     * 2021년 버전 2 출시 후, Janik은 프로젝트 개발을 계속할 수 없다고 발표했으나, 이후 인텔에서 ZLUDA를 공식 기술로 평가하기 시작함.
     * 인텔은 CUDA 애플리케이션을 인텔 GPU에서 실행하는 것에 대한 비즈니스 케이스가 없다고 결정하고, Janik은 회사를 떠나 AMD에 접근함.
     * AMD는 2년간 ZLUDA를 평가했지만 프로젝트를 더 이상 진행하지 않기로 결정하고, Janik은 업데이트된 코드를 오픈소스로 공개함.

CG 아티스트에게 왜 중요한가요?

     * ZLUDA 버전 3은 NVIDIA의 CUDA API를 사용하여 개발된 GPU 기반 애플리케이션을 AMD GPU에서 실행할 수 있게 함.
     * VFX, 모션 그래픽, 시각화와 같은 산업에서 많은 주요 CG 애플리케이션, 특히 렌더러들이 CUDA 기반으로 NVIDIA 전용임.
     * AMD는 자체 기술인 HIP를 가지고 있지만, 소프트웨어 개발자의 작업이 필요함.
     * ZLUDA는 HIP에 기반하여 실제로 구축되었으며, CUDA 애플리케이션을 수정 없이 AMD GPU에서 실행할 수 있도록 설계됨.

CUDA 애플리케이션을 ZLUDA 아래에서 실행하는 속도는 얼마나 빠른가요?

     * Janik은 CUDA 애플리케이션을 AMD GPU에서 ""거의 네이티브 성능""으로 실행한다고 설명함.
     * 그러나 ZLUDA GitHub 저장소에 따르면, 3DF Zephyr와 RealityCapture는 ZLUDA 아래에서 ""훨씬 느림"".
     * 많은 GPU 렌더러 개발자들은 또한 성능에 기여하는 두 번째 NVIDIA API인 OptiX를 사용하며, ZLUDA는 OptiX에 대해 ""최소한""의 지원을 제공함.

다른 CG 애플리케이션은 AMD GPU 아래에서 ZLUDA를 통해 실행될 수 있나요?

     * 사용자 테스트 없이는 다른 CUDA 기반 CG 애플리케이션이 ZLUDA 아래에서 얼마나 잘 실행될지 말하기 어려움.
     * 많은 알려진 문제가 있으며, Janik은 다른 GPU 렌더러와 제한된 성공을 거둠.

미래에 더 많은 CUDA 기반 CG 애플리케이션이 ZLUDA 아래에서 실행될 수 있을까요?

     * Janik은 인텔이나 AMD의 지원 없이는 ZLUDA가 ""현실적으로 버려진 상태""라고 말함.
     * 그는 프로젝트를 앞으로 나아가게 할 수 있는 제안에 열려있지만, 그렇지 않다면 개인적으로 관심 있는 NVIDIA 기술만 지원할 가능성이 높음.
     * 소스 코드는 공개적으로 이용 가능하며, 현재 상태에서도 ZLUDA는 소프트웨어 개발자들이 CUDA에서 HIP로 ""더 점진적인 포팅""의 일부로 사용될 수 있음.

라이선스 및 시스템 요구 사항

     * ZLUDA 3의 컴파일된 버전은 Windows와 Linux에서 이용 가능함. 소스 코드는 Apache 2.0 또는 MIT 라이선스 하에 제공됨.

GN⁺의 의견

     * ZLUDA는 NVIDIA의 독점적인 CUDA 생태계를 AMD 사용자들에게 개방함으로써, GPU 시장에서의 경쟁을 촉진할 수 있는 잠재력을 가짐.
     * 이 프로젝트는 특히 CUDA에 의존하는 렌더링 소프트웨어나 과학 연산 애플리케이션 사용자들에게 다양한 하드웨어 옵션을 제공함으로써 혜택을 줄 수 있음.
     * 그러나 ZLUDA가 아직 초기 단계이고 완전한 성능과 호환성을 제공하지 않는다는 점에서, 실제 프로덕션 환경에서의 채택은 신중해야 함.
     * AMD와 NVIDIA 간의 기술 격차를 줄이는 것은 소비자에게 더 나은 가격과 선택을 제공할 수 있으며, 이는 시장의 건강한 경쟁을 촉진할 수 있음.
     * 오픈소스 커뮤니티의 지속적인 관심과 기여가 이 프로젝트의 성공에 중요할 것이며, 관련 분야의 전문가들이 기여할 수 있는 좋은 기회를 제공함.

        Hacker News 의견

     * 이전 토론 22일 전: AMD가 ROCm 기반으로 CUDA 구현체를 개발하여 오픈소스로 공개함 [0], 400개의 댓글이 있었음.
          + 그 스레드에서 주목할 만한 최상위 댓글:

     AMD가 2년간의 개발 후 CUDA 애플리케이션을 AMD GPU에서 실행하는 것에 대한 비즈니스 케이스가 없다고 결정함. 계약 조건 중 하나는 AMD가 더 이상 개발을 적합하다고 판단하지 않을 경우, 공개할 수 있다는 것이었음. 그래서 오늘에 이르렀음. - ZLUDA FAQ 참조
          + 관련 링크: 해커뉴스 토론
     * AMD가 이 프로젝트의 자금 지원을 중단한 것은 매우 불합리함. 오픈소스로 공개되자마자 AMD 사용자들에게 가치를 제공하기 시작했는데, 이것이 AMD의 최우선 과제가 되어야 할 것 같음에도 불구하고, AMD는 지금까지 지원이 거의 없는 두 개(혹은 세 개인가?)의 대체 API를 가지고 몇 년 동안 시간을 낭비함.
     * 논의에 관련된 내용: Nvidia가 다른 칩에서 실행하기 위한 CUDA 소프트웨어의 번역 레이어 사용을 금지함 [1]
          + 관련 링크: 해커뉴스 토론
     * 인텔도 결국 ""인텔 GPU에서 CUDA 애플리케이션을 실행하는 것에 대한 비즈니스 케이스가 없다""고 결정함. 이는 AMD GPGPU를 다룬 사람이라면 누구나 알고 있는 사실을 확인시켜줌.
     * AMD의 소프트웨어가 매우 형편없다는 것은 잘 알려진 사실이며, 이것이 AMD가 2조 달러 회사가 되는 것을 막는 유일한 요소임. AMD의 OpenCL 컴파일러에 버그가 있었고, segfault를 통해 쉽게 컴파일러를 크래시시킬 수 있었음(결국 포기하고 보고하지 않음). AMD가 CUDA에 대항할 경쟁자를 개발하지 않은 것은 매우 단기적인 시각이었음. AMD의 이사회가 왜 교체되지 않았는지 이해할 수 없음. 최고의 하드웨어를 만들 수 있어도, 그것을 사용할 소프트웨어가 형편없다면 아무도 구매하거나 사용하지 않을 것임. 고객으로서는 AMD 이사회가 테이블 위에 남겨진 수조 달러의 가치에 대해 신경 쓰지 않는 것처럼 보여, 과대평가된 Nvidia 카드를 구매할 수밖에 없음. AMD 주식을 소유한 사람들은 질문을 해야 하며, 그 이사회는 가장 가까운 배수구로 내려가야 함.
     * Metal, CUDA, AMD가 가진 것 등 다양한 커널 언어로 컴파일할 수 있는 프로그래밍 언어가 있는지 궁금함. 만약 없다면, 왜 없을까? 다양한 CPU 아키텍처로 컴파일하는 C 컴파일러가 있는 것처럼, GPU 아키텍처로 컴파일하는 컴파일러도 있어야 하지 않을까? 아마도 아직 아무도 만들지 않았을 수도 있음.
     * 누군가 이것을 Meshroom 같은 OSS 포토그래메트리 도구에서 실행해 본 적이 있는지 궁금함. 기사에서는 몇 가지 독점적인 것들을 언급하지만, 필요한 것은 그리 많지 않음.
     * AMD GPU의 문제는 개별 커널이 아니라 라이브러리임. 릴리스 노트에서 'cuDNN, cuBLAS, cuSPARSE, cuFFT, NCCL, NVML의 최소 지원 추가'라고 언급한 것으로 보아, 이 프로젝트가 이 방향으로 나아가고 있었음. AMD가 자금 지원을 중단한 후에도 이 프로젝트가 모멘템을 유지할 수 있을지는 누구도 모름.
     * 이것은 Oracle 대 Google과 관련하여 JVM 바이트코드를 사용하는 것과 거의 동일한 문제임.
     * geohot의 지속적인 AMD GPU와의 (비싼) 투쟁도 관련이 있음: Twitter 링크
"
