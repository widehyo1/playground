"https://news.hada.io/topic?id=16498","Anthropic, Claude를 움직이게 하는 "시스템 프롬프트" 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Anthropic, Claude를 움직이게 하는 ""시스템 프롬프트"" 공개

     * Anthropic이 최신 모델(Claude 3 Opus, Claude 3.5 Sonnet, Claude 3 Haiku)의 시스템 프롬프트를 공개
          + 시스템 프롬프트는 모델의 기본 특성과 행동 지침을 설정하는 초기 명령어임
     * 모든 생성 AI 벤더는 모델이 부적절한 행동을 하지 않도록 시스템 프롬프트를 사용함
     * Anthropic은 투명성과 윤리성을 강조하며 시스템 프롬프트를 정기적으로 업데이트할 계획임

    Claude 모델의 시스템 프롬프트 : https://docs.anthropic.com/en/release-notes/system-prompts

     * Claude 모델은 URL, 링크, 비디오를 열 수 없음
     * 얼굴 인식은 금지되어 있으며, 모델은 항상 얼굴을 인식하지 못하는 것처럼 행동해야 함
     * Claude 3 Opus는 지적 호기심이 많고 다양한 주제에 대해 인간과 토론을 즐기는 성격을 가짐
     * 논란이 되는 주제에 대해서는 공정하고 객관적으로 대응해야 함
     * 응답 시작 시 ""certainly""나 ""absolutely"" 같은 단어를 사용하지 않도록 지시받음

    시스템 프롬프트의 중요성

     * Anthropic의 시스템 프롬프트 공개는 경쟁사들에게도 압력을 가함
     * GPT-4o의 시스템 프롬프트는 프롬프트 인젝션 공격을 통해서만 노출 가능함
     * Anthropic의 투명성 노력은 AI 모델의 윤리적 사용을 촉진함

    GN⁺의 정리

     * Anthropic의 시스템 프롬프트 공개는 AI 모델의 투명성과 윤리성을 강조함
     * Claude 모델의 특성과 제한 사항을 명확히 함으로써 사용자의 신뢰를 높임
     * 경쟁사들도 시스템 프롬프트 공개를 고려하게 만드는 압력을 가함
     * TechCrunch Disrupt 2024는 스타트업과 벤처 캐피탈 리더들에게 중요한 행사임

        Hacker News 의견

     * Claude가 ""환각"" 현상을 공식적으로 인정함
          + Claude는 매우 희귀한 주제에 대해 질문을 받으면, 정확성을 기하려 하지만 환각할 수 있음을 사용자에게 알림
          + 특정 기사, 논문, 책을 언급할 때 검색이나 데이터베이스에 접근할 수 없음을 알리고, 인용을 확인할 것을 권장함
     * Claude는 매우 훌륭함
          + 최근에 '자동 스크립트 작성기'를 설정했는데, Python 스크립트와 테스트 결과를 GPT-4나 Claude에 반복적으로 보내는 방식임
          + 10-20번의 반복 후에야 제대로 작동함
          + Claude가 GPT-4보다 훨씬 나은 결과를 제공함
          + GPT-4는 목표를 변경하거나 잘못된 출력을 반복하는 경향이 있음
          + Claude는 일관되게 좋은 출력을 제공함
     * 현재 컴퓨터 시스템에 텍스트로 명령을 내릴 수 있는 시대에 살고 있다는 점이 놀라움
     * Claude는 불필요한 긍정적인 표현을 피하려고 하지만, 실제로는 여전히 사용함
          + ""Certainly!"", ""Of course!"", ""Absolutely!"" 등의 표현을 피하려고 하지만 여전히 사용함
          + ""I’m sorry""나 ""I apologize""로 시작하는 응답을 피하려고 하지만 여전히 사용함
     * LLMs의 환각 현상을 제거할 수 있음
          + 다음 세대 모델이 중요한 사실에 대해 환각하지 않기를 바람
          + Wikipedia와 같은 LLMs를 원함
          + 환각 현상을 분석하고 해결하는 방법에 대한 논문을 작성함
     * 대화에서 일부 내용을 제외하거나 두 부분으로 나누는 기능이 필요함
          + 긴 대화에서 성능과 정확성을 향상시키기 위한 간단한 해킹이 될 수 있음
     * Claude는 기본적으로 얼굴 인식을 하지 않음
          + 이미지를 공유할 때 인간 얼굴을 인식하지 않으며, 사용자에게 누군지 알려달라고 요청함
          + 사용자가 알려준 정보를 바탕으로 논의하지만, 얼굴 인식을 통해 개인을 식별하지 않음
     * Claude의 큰 문제는 크레딧을 너무 빨리 소모함
          + 문제의 절반 정도 해결하다가 크레딧이 소진됨
          + 몇 가지 질문만으로도 AI 크레딧이 소진되는 것은 실망스러움
          + 이로 인해 구독을 취소함
     * Claude의 직설적인 응답 방식이 마음에 듦
          + 불필요한 긍정적인 표현을 사용하지 않음
"
"https://news.hada.io/topic?id=16424","Valve의 Steam Play Proton 발표 6주년을 축하","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Valve의 Steam Play Proton 발표 6주년을 축하

     * 6년 전 Valve는 Steam Play Proton을 발표하여 Linux 팬들에게 큰 변화를 가져옴
          + Proton 덕분에 Steam Deck과 데스크탑 Linux 게임이 번창함
          + Proton이 없었다면 Steam Deck은 존재하지 않았을 것임
     * Proton의 기여
          + Valve 개발자, 계약자, Wine 개발자들의 노력 덕분에 많은 게임이 Steam에서 쉽게 실행 가능해짐
          + Proton의 공식 GitHub에 따르면, 66번의 릴리스가 있었고, Proton Experimental과 Proton Hotfix를 포함하면 더 많음
          + Proton changelog에는 388개의 변경 사항이 기록됨
     * 현재 상태
          + ProtonDB에 따르면, 22,002개의 게임이 최소 한 명의 사용자에 의해 테스트되고 작동한다고 보고되었음
          + Valve의 Steam Deck Verified 시스템에 따르면, 5,297개의 게임이 Verified로, 10,646개의 게임이 Playable로 평가됨
          + Steam에는 100,000개 이상의 게임이 있으며, ProtonDB에 보고되지 않은 수천 개의 게임이 Proton으로 작동할 가능성이 있음
     * 미래 과제
          + 더 많은 안티 치트 지원이 필요함
          + 이게 마지막 큰 장애물이 될 것
     * 결론
          + Proton 덕분에 Linux와 Steam Deck에서 게임을 즐기는 것이 가능해짐
          + Proton의 6주년을 축하하며, 앞으로도 많은 발전이 기대됨

    GN⁺의 정리

     * 이 기사는 Valve의 Steam Play Proton이 Linux 게임에 미친 영향을 다루고 있음
     * Proton 덕분에 많은 게임이 Linux에서 쉽게 실행 가능해졌으며, 이는 Steam Deck의 성공에도 큰 기여를 함
     * 앞으로 해결해야 할 과제로는 안티 치트 지원이 있으며, 이는 Linux 게임 환경을 더욱 개선할 것임
     * Linux 게임에 관심이 있는 사람들에게 매우 유용한 정보이며, Proton의 발전을 통해 Linux 게임 시장이 더욱 확장될 것으로 기대됨

   애초에 안티 치트 방식이 최소 OS 감시부터 시작해서 심하면 커널까지 간섭하는 것들이 전부일텐데 이들이 과연 될까요? 안티 치트 포팅이 오히려 리눅스 생태계와 커뮤니티의 반발이 있을 수 있을텐데.

   뭐 상주 프로그램이 아니라면 원하는 게이머들은 감수하고 쓰는 거라면 괜찮지 않을까 싶어요.

        Hacker News 의견

     * 25년 동안 Windows를 사용하다가 Fedora Linux Desktop으로 전환한 사용자는 Steam 라이브러리의 모든 게임이 잘 작동하여 Linux로 완전히 전환할 수 있었음
          + Nvidia 드라이버 문제로 Wayland를 실행할 수 없었으나, 최근 드라이버 업그레이드로 문제 해결됨
          + Docker, JetBrains IDE, VS Code, Discord, Obsidian 등 대부분의 일상 앱이 크로스 플랫폼 데스크탑 웹 앱으로 잘 작동함
          + Alacritty, Oh My Zsh, fzf, exa, bat, zoxide, starship 등 생산성 도구와 lazydocker, lazygit, btop, neovim, distrobox 같은 터미널 UI 도구 사용 가능
          + Windows의 감시 및 스파이웨어 문제에서 벗어나 Linux의 훌륭한 지원 덕분에 다시 돌아갈 필요가 없음
     * Proton의 출시 이후 Windows를 부팅할 필요가 거의 없어졌으며, 새로운 주요 타이틀도 Linux에서 잘 작동함
          + Proton은 Valve가 개발한 것이 아니며, Wine, DXVK, gstreamer의 통합 덕분에 게임 실행이 쉬워짐
     * RTX 4090과 7950X3D를 장착한 기계에 Pop OS를 설치했으며, Nvidia 드라이버 문제 없이 모든 Windows 게임이 Linux에서 잘 작동함
          + Linux 기계가 Steam Deck으로 스트리밍 가능
          + 2년 전 Windows를 포기했으며, 다시 돌아갈 이유가 없음
     * Valve의 Proton 팀의 채용 과정이 좋았으며, 지원자에게 많은 도움과 조언을 제공함
     * 몇 달 전 게임용 PC를 NixOS로 전환했으며, 대부분의 게임이 Proton을 통해 잘 작동함
          + Steam Deck도 소유하고 있으며, 전환 후에도 접근할 수 있는 게임이 많음
          + Proton과 Wine에 기여한 사람들에게 감사함
     * 안티 치트 회사들이 협력하면 Linux에서 멀티플레이어 게임도 문제없이 즐길 수 있을 것임
     * Proton 덕분에 Win32가 Linux에서 게임을 위한 안정적인 ABI가 되었음
          + Linux에서 Windows로 C++ 크로스 컴파일을 위한 좋은 툴체인을 추천받고 싶음
     * Proton이 출시된 지 6년밖에 되지 않았지만, Linux 게임의 중요한 기반이 되었음
          + Ubisoft의 DRM 문제로 'From Dust'는 여전히 작동하지 않음
     * Valve의 작업이 Linux 게임에 큰 기여를 했으며, Wine도 중요한 역할을 했음
     * Proton의 성능에 매우 놀랐으며, Steam Deck에서 AAA 타이틀을 문제없이 플레이할 수 있었음
          + Valve가 이러한 이니셔티브를 지속적으로 지원해 준 것에 감사함
"
"https://news.hada.io/topic?id=16443","인디 비즈니스에 Chase 은행을 사용하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      인디 비즈니스에 Chase 은행을 사용하지 마세요

     * Chase Bank를 다시는 신뢰하지 않는 이유

  신뢰의 시작: 10년의 관계

     * Chase Bank와의 관계는 2014년부터 시작됨
     * 과거에 훌륭한 서비스 경험을 했고, Chase는 신뢰할 수 있는 은행으로 여겨졌음
     * 작년에 사업을 시작하면서 Chase에 비즈니스 계좌를 개설함
     * 4개월 만에 $180,000를 모았고, 사업이 잘 진행되고 있었음

  동결: 경고도, 설명도 없음

     * 어느 날 Chase가 갑자기 모든 거래를 차단함
     * 급여 지급이 불가능해졌고, 고객 서비스에 여러 번 전화를 걸어야 했음
     * Chase의 답변은 ""우리는 당신과 거래하지 않을 것입니다. 수표를 우편으로 보내드리겠습니다.""였음
     * 4주가 지나도 수표는 도착하지 않았음

  Chase를 쫓다

     * 미국에 거주하지 않았고, O-1 비자가 처리 중이었음
     * Chase는 계속해서 더 많은 증거를 요구했음
     * 모든 문서를 제출했지만, 여전히 해결되지 않았음
     * 뉴욕으로 날아가 여러 Chase 지점을 방문했지만, 여전히 해결되지 않았음
     * Chase는 의심스러운 거래가 있다고 주장했지만, 어떤 거래인지 알려주지 않았음
     * 개인 저축을 소진하고, 친구들에게 돈을 빌려 사업을 유지했음

  최후의 수단: 임원진과 트위터

     * Chase의 임원진에게 연락을 시도함
     * 트위터를 통해 다른 계정 관리자와 연결됨
     * Chase의 요구는 계속해서 증가했음
     * 모든 서류를 제출한 후에야 해결됨

  해결: 너무 늦은 해결책

     * 몇 달간의 노력 끝에 돈을 되찾았지만, 신뢰는 깨졌음

  교훈: 모든 기업가가 알아야 할 것들

    1. 대형 은행은 친구가 아님: Chase는 상황을 전혀 고려하지 않았음
    2. 은행을 다양화하라: 한 은행에만 의존하지 말고, 백업 계좌를 마련하라
    3. 대안을 고려하라: 오랜 시간 사용한 서비스가 항상 최선은 아님
    4. 지원 체계를 마련하라: 다른 사람의 도움을 받을 수 있는 환경을 조성하라
    5. 모든 상황에 대비하라: 예기치 않은 상황에 대비하라

  희망의 빛: Mercury Bank의 구원

     * Mercury Bank는 신속하게 계좌를 개설해 주었음
     * 소규모 비즈니스의 필요를 이해하고 지원해 주었음
     * Chase와 달리 모든 필요한 서비스를 제공함

GN⁺의 정리

     * 이 기사는 Chase Bank와의 부정적인 경험을 통해 은행 선택의 중요성을 강조함
     * 대형 은행의 비즈니스 지원 부족과 고객 서비스의 문제점을 지적함
     * Mercury Bank와 같은 대안 은행의 장점을 소개함
     * 기업가들이 은행을 선택할 때 고려해야 할 중요한 교훈을 제공함
     * 비슷한 기능을 가진 다른 은행으로는 Mercury Bank와 Meow가 추천됨

        Hacker News 의견

     * 약 10년 전, 공동 창업한 스타트업이 Chase 계좌에 약 300만 달러를 보유하고 있었음. 30일 내에 계좌를 닫겠다는 통보를 받았고, 이유는 알 수 없었지만 중동 투자자들 때문일 가능성이 높음. 이후 개인 및 비즈니스 계좌도 모두 몇 주 내에 닫혔음. 개인적으로 평생 동안 Chase에서 플래그가 지정된 것 같음
     * Citibank 은퇴 계좌에서 80,000달러를 찾는 데 8개월 이상 걸렸음. 이름이 ""Cliff Stoll""과 ""Clifford Stoll""로 다르게 등록되어 있었기 때문임. 결혼 증명서, 이혼 판결문, 법원 명령서를 요구했음
     * 은행이 계좌를 닫는 이유는 종종 법을 따르는 것임. 여러 번의 의심스러운 활동 보고서(SAR)가 제출된 경우, 은행은 고객과의 관계를 종료할 수 있음. SAR은 규정상 비밀로 유지되어야 함
     * Mercury는 핀테크 회사로 FDIC 보험에 가입된 은행이 아님. Chase 비즈니스 체크 계좌를 열었지만, Chase는 계좌를 동결하고, 핀테크 스타트업은 파산할 수 있음. 여러 비즈니스 및 개인 계좌를 가지고 있지만, 신뢰할 수 있는 신용 조합을 찾고 싶음
     * Citibank에서 비즈니스가 합법적임을 증명하라는 요구를 받았음. 보안 메시지로 문서를 보냈지만, Citibank는 이를 열 수 없다고 주장했음. 전화로 비밀번호를 요구했지만, 이는 큰 경고 신호였음. 지역 지점을 방문하여 문제를 해결했음
     * 비영리 단체의 CFO로 일했을 때, 주 은행 외에 3개월 운영 자금을 보유한 보조 은행을 유지하라는 재무 담당자의 조언을 따랐음. 주 은행에서 잠금 해제될 경우를 대비한 조치였음
     * 지점에서 소매 은행 업무를 처리하지 말라는 교훈을 얻었음. 여러 지점을 방문하면 의심을 더 키울 수 있음. 지원이 첫날부터 무대응일 경우, 법무부서와 최고 경영진에게 이메일을 보내야 했음
     * 팬데믹 동안 Chase에서 프리랜스 수입을 위한 계좌에서 약 900달러를 도난당했음. 여러 외국 콜센터로 연결되었고, 문제를 해결하려다 포기했음. 법적 조치를 취할 수 있었지만, 감정적으로 지쳐서 포기했음. Chase와 다시는 거래하지 않을 것임
"
"https://news.hada.io/topic?id=16442","애플, OWA의 6개 선택 설계 권고안을 채택","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       애플, OWA의 6개 선택 설계 권고안을 채택

     * 애플이 EU의 디지털 시장법(DMA)을 준수하기 위해 ""기본 브라우저 설정 및 선택"" 화면에 관련하여 OWA(Open Web Advocacy)의 11개 권고안 중 6개를 채택함
     * 이전에 OWA가 캠페인을 벌였던 2가지 심각하고 의도적으로 기만적인 패턴도 수정됨
     * EU 집행위원회는 3월에 DMA와 관련해 애플의 비준수 혐의로 조사에 착수
     * 그 이후로 OWA는 모든 게이트키퍼가 브라우저와 웹앱과 관련하여 DMA를 준수하도록 노력해왔음

권고사항 구현 내역

     * 브라우저 벤더들은 브라우저 선택 화면(Choice Screen)에서 기기의 기본 브라우저로 선택될 때 핫시트가 허용(iOS 홈스크린의 하단 독)되어야 함
     * 브라우저 선택 화면에서 브라우저에 관해 더 많은 정보를 표시할 수 있어야 함
     * 선택되면 브라우저는 즉시 기본값으로 설정되고 백그라운드에서 다운로드되어야 함
     * 브라우저 벤더는 ""선택 화면""의 효과를 측정하기 위해 더 많은 데이터가 필요함
     * 새 기기를 동기화하거나 구매할 때 이용자에게 ""선택 화면""이 표시되어야 함
     * 기본 브라우저 변경 옵션은 브라우저 설정에서 분리되어 OS의 중심 위치로 이동되어야 함

권고안 미구현 사항

     * 사용자가 선택한 기본 브라우저를 인앱 브라우징(SFSafariViewController)에 사용해야 함
     * 선택 화면의 브라우저들은 게이트키퍼 앱스토어에 묶여있지 않아야 함
     * 브라우저들은 자신이 기본값으로 설정되었는지 판단할 수 있어야 함
     * 사용자가 ""default"", ""browser"", ""default browser"" 를 검색하는 경우 기본 브라우저를 변경하는 옵션이 설정 검색에 표시되어야 함
     * 각 브라우저는 설치 즉시 자신을 기본 브라우저로 설정할수 있는 ""원 클릭 프롬프트""를 트리거할 수 있어야 함

EU 이외 지역 규제 당국에게

     * 애플의 이 변화는 EU에만 국한됨. EU 이외 지역 규제당국들도 변화를 면밀히 살펴보고 채택하도록 강제할 것을 권고함
     * 기타 권고 사항 :

    1. 선택 화면은 게이트키퍼 브라우저를 처음 사용할 때가 아니라 기기 셋업이나 업데이트시 보이게 이동,
    2. 게이트키퍼 브라우저는 선택되지 않으면 제거되거나 숨겨져야 함

이행 모니터링과 미해결 질문들

     * 현재 우리는 선택 화면 구현을 아직 보지 못했음. 피드백 제공을 위해 미리 볼 수 있어야 함
     * 앱스토어 외부 워크플로우는 여전히 불분명. 앱스토어 외부에서 설치 프로세스는 어떨지, 앱스토어 외 버전을 포함할 수 있는지 알고 싶음
     * 선택 화면을 테스트하려면 애플은 기기를 초기화하지 않고도 선택 화면을 여러 번 트리거할 수 있는 방법을 제공해야함

선택 설계(Choice Architecture)의 성공은 어떤 모습일까?

     * ""노골적으로 불공정하고 조작적인 행동을 제거하는 것""이 첫번째 성공 기준
     * ""새롭고 작은 브라우저 벤더가 성장할 수 있는 공간 마련""이 두번째 성공 기준
     * 써드파티 브라우저가 iOS/Android에서 10% 추가 시장 점유율을 얻는 것은 대성공이 될 것임
          + 참고로 Google은 기본 검색 엔진으로 사용되면서 연간 200억 달러의 비용을 Apple에 지불하고 있음. 즉, 1%마다 연간 2억 달러의 가치가 있다는 뜻
          + 이 10%는 iOS와 Android에서 8개의 모질라를 지원하기에 충분한 수치. 충분히 싸울만한 가치가 있는 수치임

   Open Web Advocacy - 애플의 타사 브라우저 금지 규칙에 이의 제기
"
"https://news.hada.io/topic?id=16447","AirPods를 잃어버렸나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AirPods를 잃어버렸나요?

     * 친구가 바닥에 떨어진 에어팟을 발견하고 자신의 휴대폰에 연결하여 일련번호와 소유자의 전화번호 마지막 네 자리를 확인한뒤, 나에게 도움을 요청함

  모든 번호에 스팸 메시지를 보낼 수 있을까?

     * 전화번호 끝자리가 1234인 모든 번호에 스팸 메시지를 보내는 것은 비현실적임
     * 더 관리 가능한 숫자로 줄이는 방법을 생각해야 함

  지역 코드로 제한

     * 소유자가 포틀랜드 대도시 지역에 거주한다고 가정하고 검색을 지역 코드로 제한함
     * 999개의 번호로 줄였지만 더 줄이기 위해 노력함
     * 1000개의 SMS 메시지를 보내는 것은 스팸 행위로 간주될 수 있음
     * 가능한 번호들: 999개

  프리픽스(중앙 사무소 코드)로 제한

     * 포틀랜드의 대부분의 프리픽스는 할당되어 있지만, 무선 통신사에 할당된 것은 26%에 불과함
     * 000-199는 예약 코드로 사용 불가
     * 가능한 번호들: 232개

  iMessage 조회 API 사용

     * 소유자가 iMessage를 사용한다고 가정하고 LoopMessage의 Lookup API를 사용하여 iMessage 체크를 실행함
     * 총 가능한 번호: 84개

  AirPods를 잃어버렸나요?

     * 리스트를 줄인 후, Twilio를 사용하지 않고 MacBook에서 스크립트를 사용하여 대량으로 iMessage를 보냄
     * 1개의 일치하는 번호를 찾음
     * 소유자를 찾아 친구에게 연락처 정보를 전달하고 AirPods를 반환함

  참고 사항

     * Find My 기능이 있지만 사용 방법을 몰랐음
     * 혼란스러운 메시지를 몇 개 받았지만 10개 미만의 메시지로 소유자를 찾음
     * AirPods가 소유자와 페어링 되었음을 확인함

GN⁺의 정리

     * 이 기사는 잃어버린 AirPods를 찾기 위해 기술적 접근 방식을 사용한 사례를 다룸
     * 지역 코드와 프리픽스를 사용하여 가능한 번호를 줄이고, iMessage API를 활용하여 소유자를 찾음
     * 기술적 지식을 활용하여 문제를 해결하는 방법을 보여줌
     * 유사한 기능을 가진 제품으로는 Tile과 같은 위치 추적 장치가 있음

   댓글의 find my가 한국에서도 되면 참 좋을텐데...

        Hacker News 의견

     * AirPods Pro를 학교 운동장에 두고 온 후 비가 많이 온 다음 날 아침에야 잃어버린 것을 깨달음
          + Apple에서 당일 배송으로 새로운 헤드폰을 주문함
          + 일주일 후 Find My 알림을 받고 운동장에서 AirPods Pro를 찾음
          + Find My와 방향 기능을 사용해 정확한 위치를 찾음
          + 케이스가 완벽하게 방수되어 배터리도 거의 소모되지 않음
     * 84개의 다른 번호로 메시지를 보내는 스크립트를 작성함
          + 개인 iMessage 계정을 사용했는지 질문함
          + 스팸으로 계정이 플래그될까봐 두려워함
          + iCloud 계정이 정지되거나 하드웨어 장치가 블랙리스트에 오를 수 있음
     * 외딴 길에서 AirPods를 발견함
          + 배터리가 완전히 방전됨
          + 충전 후 이전 소유자에 대한 정보 없이 아이폰에 페어링됨
          + Apple 지원에 연락했으나 소유자가 Bluetooth 설정 페이지에서 분실 표시를 하지 않으면 도움을 줄 수 없다고 함
          + AirPods를 청소하고 사용 중임
          + 소유자의 지역 코드 정보가 없으면 소유자를 찾을 방법이 있는지 질문함
     * 무선 이어버드용 목걸이를 판매하는 것을 보고 ""우리가 도대체 뭘 하고 있는 거지?""라고 생각함
     * 어떤 영웅들은 망토를 입지 않음. 그들은 스크립트, API 호출, 약간의 운을 사용함
     * AirPods 품질에 대한 나쁜 경험이 있는지 질문함
          + AirPods Pro 1세대를 3년 동안 사용했는데 노이즈 캔슬링 기능이 사용할 수 없을 정도로 저하됨
          + Apple Store 기술자가 오디오 하드웨어가 진단에 실패했다고 말함
          + 3년간 중간 정도 사용 후 $250 장비가 고장난 것은 실망스러움
     * 친구가 렌터카에 AirPods를 두고 옴
          + Find My에서 일주일 넘게 온라인과 오프라인을 반복하며 대학 구역에서 이동하는 것을 봄
          + 렌터카 회사에 연락해 차에 접근하여 글로브박스에서 찾음
     * Apple Store에 가져가는 것도 방법이었을 것임. 하지만 그렇게 멋지진 않음
     * 방법론을 좋아함. 지역 번호가 원래 유선 전화 전용 블록에서 포팅되지 않은 것이 운이 좋았음
     * AirTag와 비슷한 일을 함
          + 지역 중고 상점에서 AirTag를 발견했는데 기부한 사람이 여전히 iCloud에 연결해 두었음
          + 지역 코드가 알려져 있어 더 쉬웠음
          + 몇 개의 번호를 시도해 운 좋게도 한 명이 응답해 계정에서 제거함
"
"https://news.hada.io/topic?id=16416","리눅스 데스크탑 시장 점유율 4.45%에 도달","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       리눅스 데스크탑 시장 점유율 4.45%에 도달

     * StatCounter의 최신 데이터에 따르면, 2024년 7월 기준으로 리눅스는 전 세계 데스크탑 운영체제 시장에서 4.45%의 점유율을 달성함
          + 2023년 7월 3.12%에서 2024년 7월 4.45%로 증가함
          + 2023년 11월에서 12월 사이에 3.22%에서 3.83%로 급격히 증가함
          + 2024년 2월에 처음으로 4%를 돌파함
          + 전반적으로 상승 추세를 보이며, 2024년 7월에 최고점을 기록함
     * 사람들이 리눅스로 전환하는 이유
          + 마이크로소프트의 문제: 마이크로소프트가 사용자들에게 AI를 무료로 훈련시키도록 권장하는 등의 문제로 인해 많은 사용자가 리눅스로 전환함
          + 게임 환경 변화: Steam Deck의 출시로 인해 많은 게이머들이 리눅스를 접하게 됨
          + 사용자 친화성 향상: Ubuntu와 Linux Mint 같은 배포판이 직관적이고 사용자 친화적인 인터페이스를 제공함
          + 프라이버시 문제: 데이터 프라이버시에 대한 인식이 높아지면서 오픈 소스 대안인 리눅스로 전환하는 사용자 증가
          + 구형 하드웨어 성능: 리눅스는 구형 컴퓨터의 수명을 연장할 수 있음
          + 소프트웨어 생태계 성장: 인기 있는 소프트웨어와 Wine 같은 호환성 계층의 가용성이 증가함
     * 리눅스가 2024년에 5% 시장 점유율에 도달 가능
          + 리눅스의 최근 인기는 매우 고무적임
          + 과거 10년간의 통계를 보면, 리눅스가 1%에서 2%로 증가하는 데 8년, 2%에서 3%로 증가하는 데 2.2년, 3%에서 4%로 증가하는 데 0.7년이 걸림
          + 이러한 기하급수적인 성장 패턴은 2024년에 리눅스가 5% 시장 점유율에 도달할 가능성을 시사함
     * 실제 리눅스 시장 점유율은 더 높을 수 있음
          + StatCounter와 같은 플랫폼에서 수집된 통계는 웹사이트 트래커를 통해 얻어짐
          + 많은 리눅스 사용자가 프라이버시를 중시하고 사용자 에이전트 스위처와 트래킹 방지 도구를 사용하기 때문에 실제 사용자 수는 더 많을 수 있음
          + ""Unknown"" 카테고리에 속하는 7.14%의 데스크탑 운영체제 시장 점유율 중 상당 부분이 리눅스 시스템일 가능성이 높음
          + ChromeOS의 시장 점유율 1.41%를 포함하면 리눅스의 총 시장 점유율은 5.86%가 됨
     * 전체 데스크탑 운영체제 시장
          + 윈도우: 72.08%
          + macOS: 14.92%
          + Chrome OS: 1.41%
          + 리눅스: 4.45%

    GN⁺의 정리

     * 리눅스의 시장 점유율이 4.45%에 도달한 것은 오픈 소스 커뮤니티에게 큰 성과임
     * 윈도우와 macOS에 비해 아직은 낮지만, 리눅스의 꾸준한 성장은 대안 운영체제에 대한 관심이 증가하고 있음을 보여줌
     * 프라이버시 문제와 구형 하드웨어 성능 향상 등 다양한 이유로 리눅스의 인기가 높아지고 있음
     * 비슷한 기능을 가진 다른 프로젝트로는 Ubuntu, Linux Mint, Steam Deck 등이 있음

   점유율 세부 내용을 보면 인도 사용자가 엄청 많던데 인도에서 리눅스로 전환이 더 많이 이뤄진다면 상당한 상승이 있을 것 같음

   이제 메이저 게임개발사들이 리눅스 지원해주면....는 꿈인가??

   보통 인디 개발사들이 리눅스 지원걸어놓고 버그 자동사냥하죠

   얼마전에 linux에서 mac으로 데스크탑 환경을 옮겼는데 i3 같은 tiling manager가 너무 그리워요...

   대부분 크롤러일것

   대단하네요. 크롬북 때문일줄 알았는데, 크롬북은 별도로 집계되고 있고, 심지어 1.4% 밖에 안되네요?

   전 크롬북에 너무 만족 중이긴 한데말입니다.

   Long live the Linux PC!

   여전히 최신 하드웨어에 대한 지원 및 bleeding edge 에서의 안정성 문제는 있지만, 만족스럽게 사용중입니다.
   윈도우: 아 왜 또 업데이트함..! 내일해야지..
   리눅스: 와! 업데이트다! 얼른 받자!

        Hacker News 의견

     * Windows 11 설정에 대한 불편함으로 인해 다음 운영체제 설치 시 Linux로 전환할 준비가 되었음
          + SteamDeck 덕분에 Linux 게임이 가능해짐
          + GPU 제조업체가 Windows와 동일한 드라이버 지원을 제공해야 함
     * 25년간 Linux 데스크탑 사용자로서, 많은 사람들이 사용하지 않는 환경임을 알고 있음
          + Google Cloud 교육 과정에서 강사가 Linux를 사용하여 원격 교육을 성공적으로 진행한 것을 보고 놀라움
          + 웹캠, 파워포인트, Zoom 등 모든 도구가 잘 작동함
     * Acer Predator Helios Neo 16 노트북에서 Windows 11 설치 불가
          + Windows 10 설치 후에도 터치패드와 네트워크가 작동하지 않음
          + Pop OS는 거의 완벽하게 작동함
     * 90년대에 14살 때 처음 Linux를 사용하게 됨
          + Windows가 느려지고 새 컴퓨터를 살 여유가 없었음
          + Linux의 커스터마이징과 효율성에 반함
          + 안티바이러스가 필요 없다는 점이 큰 장점이었음
          + 제약이 때로는 좋은 것임
          + 대학에서 LAMP 서버와 GCC를 사용하는 과목이 있었고, Ubuntu 등 다양한 배포판을 사용함
          + 더 많은 개발도상국에서 Linux가 널리 사용되기를 바람
     * StatCounter의 방법론을 알지 못하면 숫자 자체가 의미가 없음
          + ChromeOS도 Linux이므로 포함해야 함
          + 기사에 표시된 막대 차트는 잘못된 방식으로 평균값을 표시함
     * 2021년 VFX 산업 조사에서 약 60%의 워크스테이션이 Linux를 사용함
          + VFX와 게임 개발은 소프트웨어와 전문 지식 면에서 유사하지만, 게임 개발자는 주로 Windows를 사용함
          + 그 이유가 궁금함
     * PopOS를 몇 년간 사용해왔으며 거의 문제 없이 작동함
          + 최근에 Windows 파티션을 삭제하고 디스크 공간을 확보함
          + 대부분의 앱이 웹 앱이어서 Linux 사용이 더 쉬워짐
     * Windows 11 Pro가 사전 설치된 새 기계를 구입했으나 Microsoft 광고로 인해 생산성이 저하됨
          + Linux로 전환 후 6개월 동안 전반적인 경험이 Windows 11보다 훨씬 나음
          + 여전히 Windows 기계에 원격 접속을 하지만, 더 이상 그 환경을 원하지 않음
     * Statcounter의 통계는 신뢰할 수 없는 정보로 계산되며, 방법론이 공개되지 않음
          + 통계가 너무 변동성이 크거나 비현실적임
          + Linux 데스크탑 시장 점유율 증가에 대한 다른 설명도 가능함
     * 몇 달 전 Linux Mint로 전환했으며, Steam 게임의 90%가 동일하거나 더 잘 작동함
          + 개발 경험이 훨씬 나아졌고, Bluetooth 컨트롤러도 잘 연결됨
          + 기본적으로 불필요한 소프트웨어와 스파이웨어가 없음
"
"https://news.hada.io/topic?id=16432","대부분의 것들이 얼마나 나쁜지, 그리고 정확히 어떻게 나쁜지 모른다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 대부분의 것들이 얼마나 나쁜지, 그리고 정확히 어떻게 나쁜지 모른다

     * TL;DR: 어떤 주제에 시간을 투자하고 집중할수록 그 주제에 대한 분별력이 향상됨. 가능한 주제의 범위가 매우 넓기 때문에 평균적으로 우리의 분별력은 우리가 도달할 수 있는 수준에 비해 매우 낮음. 이는 모든 사람의 일을 대신하는 기계를 만들 때 심각한 문제임.

  피아노 조율사와의 오후

     * 최근 오케스트라에서 바이올린 연주자로 피아노 독주자를 동반하여 연주했음. 내 옆에 앉은 사람은 피아노 조율사였음.
     * 리허설 후 지휘자와 피아노 독주자가 피아노 조율사에게 피아노를 조율해달라고 요청했음. 나는 피아노가 잘못된 점을 전혀 느끼지 못했음.
     * 피아노 조율사는 피아노의 문제와 해결 방법을 설명해 주었음.
     * 대부분의 피아노 키는 세 개의 줄을 동시에 치며, 이 줄들이 같은 음으로 조율되어야 함. 그러나 피아노가 잘못 조율되면 각 줄이 다른 음을 내게 됨.
     * 피아노 조율사는 피아노의 음이 서로 조율되어 있지만, 미세한 편차가 있어 피아노 소리가 좋지 않다고 설명했음.

  ""이 소리가 어떻게 굴러가는지 들리나요?""

     * 피아노 조율사는 한 키를 누르며 ""이 소리가 어떻게 굴러가는지 들리나요?""라고 물었음. 나는 처음에는 잘 들리지 않았지만, 조율사의 설명을 듣고 나니 미세한 소리가 들렸음.
     * 피아노의 음이 서로 조율되어 있지만, 미세한 편차가 있어 피아노 소리가 좋지 않다고 설명했음.

  ""이 음이 다른 음보다 더 밝게 들리나요?""

     * 피아노 조율사는 음의 밝기를 조정하기 위해 해머의 펠트를 조정했음. 나는 큰 차이를 느끼지 못했지만, 조율사는 만족스러워했음.

  ""이 줄에 녹이 슬었을 가능성이 큼""

     * 피아노 조율사는 높은 음에서 미세한 소리를 들려주며, 줄에 녹이 슬었거나 약간의 손상이 있을 수 있다고 설명했음.

  전자 조율기 사용에 대한 논의

     * 나는 왜 전자 조율기를 사용하지 않느냐고 물었고, 조율사는 전자 조율기가 근접한 조율만 가능하며, 최종적으로는 귀로 조율해야 한다고 설명했음.

  로봇 피아노 조율사에 대한 우려

     * 피아노 독주자가 아니었다면 우리는 약간 조율이 잘못된 피아노로 연주했을 것임. 관객 중 누구도 정확히 어떤 음이 잘못되었는지 알지 못했을 것임.
     * 피아노 소리가 더 좋아졌는지 여부는 확실하지 않지만, 전문가의 분별력을 신뢰해야 함.

  결론

     * 피아노 조율사의 예술이 사라지면, 아무도 피아노가 얼마나 나쁜지 알지 못하게 될 것임. 이는 전체적으로 더 나쁜 피아노를 사용하게 되는 결과를 초래할 것임.

GN⁺의 정리

     * 이 글은 피아노 조율의 미세한 차이를 통해 전문가의 분별력이 얼마나 중요한지 설명함.
     * 기술이 발전하더라도 인간의 미세한 감각과 분별력을 대체하기 어려운 부분이 존재함을 강조함.
     * 피아노 조율사와 같은 전문가의 예술이 사라지면, 전체적으로 품질이 떨어지는 결과를 초래할 수 있음을 경고함.
     * AI 기반 피아노 조율 시스템이 있다고 하더라도, 여전히 인간 조율사의 분별력을 완전히 대체하지 못함.

        Hacker News 의견

     * 전문가의 예술이 사라지면 피아노의 품질을 알 수 없게 됨
          + 일부 사람들만이 피아노의 품질을 정확히 판단할 수 있음
          + 예술이 사라지면 피아노 품질이 떨어질 것이라는 우려
          + 그러나 이미 많은 예술이 사라졌지만 삶은 여전히 괜찮음
     * 전문가의 예술이 사라져도 큰 문제는 아님
          + 다마스커스 강철의 예를 들어 설명
          + 현대 기술이 과거의 예술을 능가할 수 있음
     * 세대 간의 인식 차이
          + 플로리다 키스의 낚시터 예시
          + 세대마다 인식이 달라짐
     * 예술가의 능력
          + Keith Jarrett가 고장난 피아노로도 훌륭한 음악을 연주함
          + 예술가는 매체의 결함을 극복할 수 있어야 함
     * 우리는 최상급을 구별하기 어려움
          + 올림픽 선수들의 예시
          + 체스 선수들도 상위 플레이어의 실력을 구별하기 어려움
     * 전문가의 눈
          + 말의 고삐를 잘못 착용한 사진을 보고 전문가가 바로 알아챔
          + AI가 옷의 바느질을 잘못 표현한 것을 전문가가 지적함
     * 전통 기술의 상실
          + 르네상스 시대의 건축 기술이 거의 사라짐
          + 클래식 음악 애호가는 미세한 차이를 느낄 수 있음
          + MP3 압축으로 인한 음질 저하
          + 기술적 혁신이 어려운 이유 설명
     * AI의 도입으로 예술이 사라질 위험
          + AI가 모든 분야의 예술을 대체할 가능성
          + AI 도입으로 인한 문제점 우려
     * 학계의 문제점
          + 학계의 인센티브가 일반 대중에게 유용하지 않음
          + 절차와 동료 검토에만 집중하는 문제점
"
"https://news.hada.io/topic?id=16420","파이어폭스를 다시 프라이빗하게 만드는 캠페인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        파이어폭스를 다시 프라이빗하게 만드는 캠페인

이게 무엇인가요?

     * Mozilla가 익명 베팅 프라이버시를 위해 새로운 기능을 도입했음
     * 자세한 내용은 다음 링크에서 확인 가능:
          + The Register 기사
          + Mozilla 블로그

사용 방법

     * 다음 명령어를 실행하여 Firefox 설정을 변경할 수 있음:
curl https://make-firefox-private-again.com | sh

  수동으로 설정 변경 방법

     * about:config 페이지로 이동
     * dom.private-attribution.submission.enabled 설정을 false로 변경

문제 보고

     * @eloy@hsnl.social로 문제를 보고할 수 있음
     * curl | sh 명령어에 대한 불만은 삼가야 함
     * Fedora에서만 테스트되었으므로 다른 운영체제에서 작동 여부를 알려주길 바람

기타 정보

     * Firefox 포크 버전 중 일부는 기본 설정이 더 나은 경우가 있음
     * 그러나 Firefox 자체를 사용하는 것을 선호함
     * 브라우저 유지보수는 매우 어려운 작업이며, 작은 프로젝트가 이를 제대로 수행할 수 있을지 신뢰하지 않음
     * Mozilla에 대한 신뢰가 낮아졌지만 여전히 Firefox를 사용함

GN⁺의 정리

     * Mozilla가 익명 베팅 프라이버시를 위해 새로운 기능을 도입했음
     * 사용자는 간단한 명령어를 통해 Firefox 설정을 변경할 수 있음
     * 이 기능은 광고 추적을 방지하는 데 도움이 될 수 있음
     * Firefox 포크 버전도 있지만, 유지보수의 어려움 때문에 Firefox 자체를 사용하는 것이 좋음

   최근의 모질라는 계속해서 사용자들이 원하는 방향과 반대로 가고 있네요.

        Hacker News 의견

     * 'anonym'이라는 것을 몰랐음. PII(개인 식별 정보)가 제거되든 말든 상관없음. 광고주를 돕는 것에 대한 답은 항상 '아니오'임
          + 광고를 통해 우리의 심리를 조작하거나 구매/행동을 유도하는 데이터 훈련은 강력히 반대함
          + Mozilla가 사용자 기반의 반발을 우려하는지에 대한 질문에, Firefox 대변인은 광고가 인터넷을 무료로 개방하는 비즈니스 모델이라고 답변함
          + 인터넷이 무료로 개방되는 것이 광고주가 우리를 착취하게 하는 것임. 광고 외의 다른 비즈니스 모델을 찾아야 함. 우리의 문제가 아님
          + about:config에서 해당 기능을 껐음
     * Firefox CTO가 실험의 동기와 프라이버시를 보장하기 위한 조치를 설명함
          + 링크: Reddit 설명
     * 이 상황이 ad blocking이 Mozilla와의 이해 충돌을 일으킬 수 있음을 의미할 수 있음
          + 링크: The Register 기사
     * 실제 스크립트 제공
echo 'user_pref(""dom.private-attribution.submission.enabled"", false);' | tee -a $HOME/.mozilla/firefox/$(grep ""Default=.*\.default*"" ""$HOME/.mozilla/firefox/profiles.ini"" | cut -d""="" -f2)/user.js

     * CEO의 Reddit 댓글에서, 사용자가 브라우저를 원하는 대로 설정할 수 있도록 지원한다고 언급함
          + Firefox를 잠시 떠났다가 돌아오면 ""경험을 새로 고치겠습니까?""라는 텍스트가 표시됨. 처음 클릭했을 때 adblock 확장이 제거됨. 다시는 그런 실수를 하지 않을 것임
     * 최근 LibreWolf로 전환했으며, 몇 가지 설정을 조정한 후 기본 Firefox와 동일하게 좋았음
          + 링크: LibreWolf
     * 프라이버시를 침해하지 않고 메트릭이 필요 없는 광고 형태가 있음. 이를 ""문맥 민감"" 광고라고 함
          + 예: 애완동물 관련 웹사이트에서 애완동물 관련 광고를 보는 것. 이는 합리적임
          + ""개인화된 광고""는 애완동물 웹사이트에서 자동차 광고를 보는 것. 이는 시간과 돈을 낭비하는 것임
          + ""개인화된 광고""는 단순히 어리석음. 이는 사용자와 광고주의 시간과 돈을 낭비함
          + 인터넷 사용자의 절반 이상이 이 어리석음을 차단하려고 적극적으로 노력하고 있음. Google은 이 추세를 막으려고 함
          + 광고주가 언제쯤 더 프라이버시를 존중하는 접근 방식이 더 효과적일 수 있음을 깨달을지 궁금함
     * 광고를 정말 싫어함. 브라우저에 uBlock Origin, 휴대폰에 AdGuard, 집에 pi-hole을 사용함. 옷에서 로고를 제거하기 위해 솔기를 뜯음
          + 광고가 인터넷의 유일한 비즈니스 모델임을 이해함
          + 광고가 존재해야 한다면, 안전하고 프라이버시를 침해하지 않는 것이 좋음. Mozilla는 이를 위해 노력하고 있음
          + 비판은 주로 세 가지로 나뉨
              1. ""광고""라는 단어가 포함되어 있어 나쁨
              2. Meta가 관련되어 있어 나쁨
              3. Mozilla가 Google로부터 대부분의 수익을 얻기 때문에 좋은 일을 할 수 없음
          + 비판이 PPA의 설계와 구현에 집중되었으면 좋겠음. 개선할 수 있는 부분이 있을 수 있음
          + uBlock Origin으로 광고를 대부분 차단할 수 있음. PPA가 활성화되어도 여전히 가능함
          + Mozilla는 uBlock Origin을 사용하지 않는 90%의 인구에게 동일한 수준의 프라이버시와 보안을 제공하려고 노력하고 있음. 이는 고귀한 목표임
     * Chrome과 다른 백엔드를 사용하는 견고하고 안전하며 빠른 브라우저를 사용하고 싶음. 월간 요금을 지불할 의향이 있음
          + 돈으로 지불하고 프라이버시를 지키고 싶음
     * 추가 프라이버시 관련 about:config 설정
          + 링크: Mozilla Wiki
"
"https://news.hada.io/topic?id=16479","호주 근로자들, 업무 시간 이후 업무용 이메일과 전화를 무시할 수 있는 권리를 갖게 됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            호주 근로자들, 업무 시간 이후 업무용 이메일과 전화를 무시할 수 있는 권리를 갖게 됨

     * 호주 근로자들은 이제 새로운 ""연결 해제 권리(Right to Disconnect)"" 법 덕분에 근무 시간 외에 업무 이메일과 전화 등의 사생활 침해를 무시할 수 있게 됨
     * 이 새로운 규칙은 월요일부터 시행되었으며, 대부분의 경우 직원들이 근무 시간 외에 고용주로부터의 연락을 읽거나 응답하는 것을 거부해도 처벌받지 않음
     * 지지자들은 이 법이 근무 시간 외 업무 이메일, 문자, 전화 등으로 인한 사생활 침해에 대해 직원들이 자신있게 대처할 수 있게 해준다고 말함
     * 이러한 추세는 COVID-19 대유행 이후 가정과 직장의 경계가 혼란스러워지면서 가속화되었음
     * Swinburne University of Technology의 John Hopkins 부교수는 ""디지털 기술이 도입되기 전에는 근무 시간이 끝나면 다음 날 출근할 때까지 연락이 없었다""고 말함
     * ""이제는 전 세계적으로 근무 시간 외, 심지어 휴가 중에도 이메일, SMS, 전화를 받는 것이 일상화되었다""고 덧붙임
     * Australia Institute의 설문 조사에 따르면 호주인들은 2023년에 평균 281시간의 무급 초과 근무를 했으며, 이 노동의 금전적 가치는 1,300억 호주 달러(880억 미국 달러)로 추정됨
     * 이번 변경으로 호주는 유럽과 라틴 아메리카에 있는 약 24개 국가와 함께 유사한 법률을 가진 국가 그룹에 합류하게 됨

   오래전 일이지만..호주사람은 동양인 싫어했었음..
   야간일 새벽일하는건 한국인 일본인뿐 문화 망친다고..
   물론 다 그런건 아님..근데 이글이 맞는거임.
   그 때 튀었어야 했는데 하..

   한국은 중견기업 미만은 업무용 이메일과 메신저 없는 곳도 있는데 그런 곳은 분리가 안되어 있죠.

        Hacker News 의견

     * 경영진 회의에서 직원들을 압박할 수 있다는 발언을 듣고 충격을 받음
          + 법적 보호를 조사하기 시작함
          + 모든 관리자가 그렇지는 않지만, 일부는 그런 생각을 가지고 있음
     * 스위스에서는 주말에 직원에게 연락하면 즉시 주말 초과 근무 수당이 적용됨
          + 경제 기반의 법적 문제 해결 방법을 과소평가하지 말아야 함
     * 규칙의 모호성을 이해하지 못하는 사람은 성숙하지 못한 사람임
          + 성숙하지 못한 사람들은 관리자가 되어서는 안 됨
          + 이런 규칙은 자기 규제를 하지 않는 사람들 때문에 생김
     * 고용 신호로 생각해야 함
          + 상사가 이메일 서명에 ""근무 시간 외에는 응답을 기대하지 않음""을 추가함
          + FAANG 돈을 벌지는 않지만 좋은 회사에서 일하고 있다는 신호임
     * 독일에서는 이미 적용되고 있음
          + 독일 문화에서는 근무 시간 외에 연락을 기대하지 않음
          + 독일에 정착하는 사람들을 도울 때 주요 문화적 측면으로 다룸
     * 초과 근무도 없고, 대체 휴가도 없으며, 관리자가 문제와 긴급 상황을 혼동함
          + 이 법이 실제로 차이를 만들지는 아직 확신하지 못함
     * 호주에서는 큰 문제가 아님
          + 노동 보호법이 없는 곳에서는 큰 문제로 보일 수 있음
          + 여기서는 정상적인 상황의 공식화일 뿐임
     * 법적으로 권리가 있지만, 다른 이유로 처벌받을 수 있음
          + 두 가지 해결책 제안:
               o 계약에 명시된 경우를 제외하고 고용주가 연락하는 것을 금지함
               o 주말 초과 근무 수당을 지급하게 함
     * 이메일은 24시간 내에 확인함
          + CC 이메일은 별도의 폴더로 필터링함
          + 전화는 즉시 응답하려고 함
          + Teams 채팅은 혼합된 감정임
          + 계약된 시간만 일할 권리를 법적으로 보장해야 함
     * 근무 시간 외에 이메일과 전화를 무시함
          + 회사 앱을 개인 전화에 설치하지 않음
          + 근무 시간 외에 연락을 받은 경우, 대부분 기다릴 수 있는 일임
"
"https://news.hada.io/topic?id=16469","Show GN: 데이머니 - 애플 전용 가계부,일기앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 데이머니 - 애플 전용 가계부,일기앱

   현재 아이폰, 아이패드, 맥에서 사용 가능한 심플한 가계부, 일기 앱입니다.
   다른 가계부와 차별점은 다음과 같습니다.
     * iCloud 동기화로 데이터를 관리하기 때문에 안전하고 개인정보 유출이 없습니다.
     * iCloud Sharing 기능으로 다른 사람과 공유해서 사용 가능합니다.
     * 카드 사용 내역 문자를 자동화로 만들어 간편한 관리가 가능합니다.
     * 간단한 일기로도 사용 가능합니다.
     * 캘린더와 미리알림을 통합하여 그 날의 일들을 같이 확인할 수 있습니다.
     * 카테고리가 아닌 태그로 관리하기 때문에 여러 태그 입력이 가능합니다.

   우선 첫인상이 좋아보이네요.
   딸에게 한번 써보라고 해야겠네요. 근데 지금 잠깐 만져본바로는 칼렌다 섹션에서 동기화 스위치가 동작안하는거 같습니다.
   성공하는 앱으로 발전하시길 진심으로 기원합니다.

   확인해보겠습니다!
   진심어린 응원 감사합니다 ㅠㅠ
"
"https://news.hada.io/topic?id=16528","SQL 인젝션을 통한 공항 보안 우회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          SQL 인젝션을 통한 공항 보안 우회

     * Sam Curry와 나는 공항 보안 대기줄에서 많은 시간을 보냄
     * Known Crewmember (KCM)은 TSA 프로그램으로, 조종사와 승무원이 보안 검색을 우회할 수 있게 함
     * KCM 프로세스는 간단하며, 직원은 전용 레인을 사용하고 KCM 바코드나 직원 번호를 제시함
     * Cockpit Access Security System (CASS)도 유사한 시스템으로, 조종사가 점프시트를 사용할 수 있게 함

ARINC

     * ARINC는 TSA와 계약하여 KCM 시스템을 운영함
     * ARINC는 파일럿과 승무원이 KCM 상태를 확인할 수 있는 웹사이트와 API를 운영함
     * 각 항공사는 자체 인증 시스템을 운영하며, ARINC의 ""허브""와 상호작용함
     * TSA와 항공사는 CockpitAccessRequest와 CrewVerificationRequest를 ARINC에 보내고, ARINC는 이를 적절한 항공사 시스템으로 라우팅함

FlyCASS.com

     * FlyCASS는 소규모 항공사를 위한 웹 기반 인터페이스를 제공함
     * SQL 인젝션 테스트를 통해 FlyCASS의 보안 취약점을 발견함
     * SQL 인젝션을 통해 Air Transport International의 관리자 계정으로 로그인 가능함

KCM과 CASS 관리자

     * FlyCASS는 KCM과 CASS를 운영하며, 관리자 권한으로 새로운 직원을 추가할 수 있음
     * 테스트를 통해 새로운 직원 Test TestOnly를 추가하고, KCM과 CASS 접근 권한을 부여함
     * 이로 인해 누구나 SQL 인젝션을 통해 KCM과 CASS에 접근할 수 있는 심각한 문제를 발견함

공개

     * 문제를 공개하기 위해 적절한 연락처를 찾는 데 어려움을 겪음
     * 4월 23일, 국토안보부에 문제를 공개하고, FlyCASS는 KCM/CASS에서 비활성화됨
     * TSA는 취약점을 부인하는 성명을 발표함
     * TSA는 웹사이트에서 직원 ID 수동 입력 섹션을 삭제함

타임라인

     * 04/23/2024: ARINC 및 FAA에 초기 공개
     * 04/24/2024: DHS에 후속 공개
     * 04/25/2024: DHS CISO가 해결 작업 중임을 확인
     * 05/07/2024: FlyCASS가 KCM/CASS에서 분리됨을 확인
     * 05/17/2024: TSA 성명에 대한 후속 조치 (응답 없음)
     * 06/04/2024: TSA 성명에 대한 후속 조치 (응답 없음)

협력자

     * Ian Carroll (https://twitter.com/iangcarroll)
     * Sam Curry (https://twitter.com/samwcyo)

GN⁺의 정리

     * 이 기사는 공항 보안 시스템의 심각한 취약점을 다루고 있음
     * KCM과 CASS 시스템의 보안 결함으로 인해 누구나 보안 검색을 우회하고 조종석에 접근할 수 있는 문제가 발생함
     * SQL 인젝션을 통해 관리자 권한을 획득할 수 있었으며, 이는 심각한 보안 위협임
     * 이 기사는 보안 연구자들이 문제를 발견하고 공개하는 과정을 상세히 설명함
     * 유사한 기능을 가진 시스템으로는 TSA PreCheck와 Global Entry가 있음

        Hacker News 의견

     * TSA 시스템이 기본적인 웹 프로그래밍 오류에 취약함
          + TSA는 문제를 해결하기보다는 은폐하고 부인하는 경향이 있음
          + 권위주의적 사고방식의 자연스러운 결과임
     * TSA의 대응은 유치하고 당황스러움
          + DHS는 처음에는 보고서를 신속하고 전문적으로 처리했으나, 이후 문제 해결과 공개 과정에서 최고 권한을 유지하지 못함
     * SQL 인젝션을 넘어 직원의 가짜 기록을 생성한 것에 놀라움
          + Homeland가 관련자를 체포하지 않은 것에 더 놀라움
          + 책임 있는 공개 대신 악의적인 해킹으로 오해할 가능성이 높았음
     * 누구든지 약간의 동기만 있으면 911을 재현하는 데 어려움이 없음
          + 테러가 적은 이유는 보안 기관이 우리를 보호해서가 아니라 테러리스트가 극히 적기 때문임
     * FlyCASS 개발자가 즉시 문제를 해결할 것을 알고 더 큰 반향을 원했을 가능성이 있음
     * MD5로 암호를 저장하는 것에 대해 아무도 언급하지 않는 상황이 심각함을 보여줌
          + SQL 쿼리를 통해 쉽게 접근할 수 있어 암호 저장 방식이 무의미함
     * 문제의 심각성을 부인하는 것은 놀랍지 않지만, FBI에 알리지 않거나 체포하지 않은 것은 놀라움
     * 수십억 달러의 보안 체계를 단순한 SQL 인젝션이 무력화함
     * TSA의 대응이 매우 충격적임
     * 정부가 더 나은 인재를 고용하기 위해 급여 인상을 제안하고 싶지만, 문제는 체계적이라 효과가 없을 것 같음
          + 모든 사람이 실수를 반복함
          + 문제를 해결할 기회가 있었지만 놓침
"
"https://news.hada.io/topic?id=16486","Remove-bg - WebGPU를 이용한 이미지 배경 지우기 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Remove-bg - WebGPU를 이용한 이미지 배경 지우기 오픈소스

     * 파일/폴더를 선택 및 드래그&드롭 하여 이미지의 배경을 제거
     * 이미지는 서버로 업로드 되지 않으며 로컬 브라우저내에서 WebGPU를 이용하여 작업됨
     * WebGPU + Transformer.js (RMBG v1.4 모델)

   RMBG 말고는 U2 Net이랑 LaMa를 많이 사용하는것 같습니다...

   저는 U2 Net을 사용하는 CLI 도구인 BackgroundRemover를 사용하고 있는데, 어떤 모델이 더 나은지는 잘 모르겠네요.

   xenova는 파라미터가 이상한거 같고 Unsplash 이미지2를 가지고 링크1된 곳에서 테스트했을때는 결과3가 좋네요

   똑같은 도구의 다른 구현 : https://huggingface.co/spaces/Xenova/remove-background-web

   둘다 모델은 이걸 사용합니다. RMBG v1.4 - 최첨단 배경 제거 모델
"
"https://news.hada.io/topic?id=16489","2024 CI/CD 트렌드 5가지트렌드 5가지

    1. CI/CD 도구 사용 시 개발 생산성 향상
          + 올해 4월 영국 개발자 분석 기업 SlashData, 글로벌 오픈 소스 커뮤니티 Continuous Delivery Foundation(CDF)이 발표한 ‘State Of Continuous Integration & Continuous Delivery Report’ 조사 결과
          + CI/CD 도구(관리형 또는 셀프 호스팅) 사용하는 개발자는 그렇지 않은 개발자와 비교해 코드 변경 리드 타임과 서비스 복구 시간, 배포 빈도서 높은 성과 낼 가능성 더 큼
               o 이 세 가지는 개발자 생산성 판단하는 DORA 핵심 지표 일부
          + CI/CD 도구 사용하지 않는 개발자는 이를 사용하는 개발자보다 성과 낮을 가능성 더 큼
          + 관리형과 셀프 호스팅 CI/CD 도구 둘 다 사용하는 개발자는 코드 변경 리드 타임과 서비스 복구 시간, 배포 빈도에서 가장 우수한 성과 보임
          + SlashData, CDF 따르면, 코드 변경 리드 타임이 하루 미만인 개발자는 관리형과 셀프 호스팅 CI/CD 도구 모두 사용하는 개발자(24%)가 가장 많음
               o 관리형 CI/CD 도구만 사용하는 개발자(22%), 셀프 호스팅 CI/CD 도구만 사용하는 개발자(17%), CI/CD 도구를 사용하지 않는 개발자(13%)는 그 뒤 이음
          + 코드 변경 리드 타임이 한 달 이상인 개발자는 CI/CD 도구 사용하지 않는 개발자(40%)가 가장 많고, 셀프 호스팅 CI/CD 도구만 사용하는 개발자(33%), 관리형 CI/CD 도구만 사용하는 개발자(30%), 관리형과 셀프 호스팅 CI/CD 도구를 모두 사용하는 개발자(19%) 순
          + 서비스 복구 시간이 1시간 미만인 개발자는 관리형과 셀프 호스팅 CI/CD 도구 모두 사용하는 개발자(25%)가 가장 많았음
               o 셀프 호스팅 CI/CD 도구만 사용하는 개발자(17%), 관리형 CI/CD 도구만 사용하는 개발자(15%), CI/CD 도구를 사용하지 않는 개발자(11%)는 그 뒤 이음
          + 서비스 복구 시간이 일주일 이상인 개발자는 CI/CD 도구를 사용하지 않는 개발자(32%)가 가장 많고, 셀프 호스팅 CI/CD 도구만 사용하는 개발자(29%), 관리형 CI/CD 도구만 사용하는 개발자(25%), 관리형과 셀프 호스팅 CI/CD 도구를 모두 사용하는 개발자(17%) 순
          + SlashData와 CDF, “관리형과 셀프 호스팅 CI/CD 도구 다 사용하면 관리형 도구 편의성과 기본 제공 기능, 셀프 호스팅 도구 맞춤형 기능 결합해 효율성 높일 수 있다”
          + 위 조사에서 관리형 CI/CD 도구는 Azure Pipelines, AWS CodePipeline, 셀프 호스팅 CI/CD 도구는 Jenkins, TeamCity 일컬음
    2. 여러 셀프 호스팅 CI/CD 도구 사용 시 성과 저하
          + 동일한 형태의 여러 CI/CD 도구 사용하면 배포 성과 떨어질 수 있음
               o 셀프 호스팅 CI/CD 도구 여럿 사용할 때 이러한 현상이 두드러짐
          + SlashData와 CDF 조사 결과, 셀프 호스팅 CI/CD 도구 수가 늘어나면, 코드 변경 리드 타임과 배포 빈도, 서비스 복구 시간이 한 달 이상인 저성과자 비중 급증
          + 두 기관에 따르면, 코드 변경 리드 타임이 한 달 이상인 개발자는 셀프 호스팅 CI/CD 도구를 4개 사용하는 개발자가 가장 많았음
          + 배포 빈도와 서비스 복구 시간이 각각 한 달 이상인 개발자는 셀프 호스팅 CI/CD 도구를 5개 이상 쓰는 개발자가 가장 많았음
          + 반면에 코드 변경 리드 타임과 서비스 복구 시간이 각각 하루 미만인 개발자는 관리형 CI/CD 도구를 1개 사용하는 개발자가 가장 많았음
          + SlashData와 CDF는 셀프 호스팅 CI/CD 도구 수가 늘어 서비스 복구 시간에 부정적 영향 미치는 주요 원인으로 ‘상호운용성’ 문제 지적
               o 여러 CI/CD 도구 사용하면 모든 도구 제대로 통합 어려움
               o 이에 서비스에 영향 미치는 문제 분리하기가 힘들 수 있음
    3. AI와 머신러닝, CI/CD 통합 강화
          + AI와 머신러닝은 CI/CD 파이프라인에 더 많이 통합됨
          + AI 기반 CI/CD 파이프라인은 문제 더 빠르게 탐지 지원
               o 이는 개발, 테스트 팀이 트러블슈팅과 디버깅 시간 대폭 단축하도록 도움
          + AI는 CI 테스트 환경 설정 작업 자동화, 테스트 가속화
          + 이는 CD 파이프라인에서 지능형 자동화 진행, 코드 리뷰와 테스트도 자동화
          + AI와 머신러닝 적용해 코드 취약점 확인
          + 예측 분석은 CI/CD 파이프라인에서 잠재적 문제, 실패 예측에 활발히 쓰일 걸로 예상
               o 이 기술은 데이터, 통계 알고리즘, 머신러닝 사용
               o 이는 과거 빌드 실패 패턴 분석해 배포 파이프라인에 영향 미치기 전에 팀이 문제를 미리 확인하고 해결하도록 지원
               o 그 결과, 더 빠르고 안정적으로 배포
          + AI와 머신러닝은 앞으로 CI/CD에 폭넓고 긴밀하게 적용될 것
    4. GitOps, CI/CD 영향력 증대
          + GitOps가 CI/CD 파이프라인에 점점 더 영향력 미침
          + 이는 버전 관리, 협업, 컴플라이언스, CI/CD 등 애플리케이션 개발에 활용하는 DevOps 모범 관행을 인프라 자동화에 적용하는 운영 프레임워크
          + 많은 조직이 CI/CD 프로세스 일부로 GitOps 구현
          + 개발자는 GitOps로 Git 리포지터리를 코드와 구성 위한 단일 진실 공급원(SSOT)으로 사용할 수 있음
               o Git 리포지터리에서 코드나 구성 변경
          + GitOps는 인프라와 애플리케이션 배포 전반에 버전 제어된 변경 촉진, 협업 간소화, 가시성 향상
               o GitOps가 Git 리포지터리 안에서 모든 구성과 배포 매니페스트 중앙집중화
          + GitOps는 Git 중심 워크플로로 증분 업데이트 자동 릴리즈, 개발자가 클러스터 관리하며, 구성 오류 없이 효율적이고 안전한 애플리케이션 제공하도록 지원
          + 속도와 효율성, 편의성 힘입어 조직이 DevOps 워크플로 간소화, IaC 모범 관행 시행함에 따라 GitOps는 CI/CD에 널리 쓰일 것
    5. 엣지 컴퓨팅 수용 필요성 증가
          + CI/CD 파이프라인에서 엣지 컴퓨팅 수용할 필요성 커짐
          + 엣지 컴퓨팅은 데이터가 생성된 현장 또는 그 가까운 곳에서 데이터 실시간 처리, 기기 작동
          + 이는 데이터를 실시간 처리, 분석하기에 대기 시간 줄이며, 애플리케이션 더 효율적이고 더 빠르게 작동하는 데 도움이 됨
          + CI/CD 파이프라인이 엣지 배포 수용하도록 적응해야 한다는 주장 제기됨
               o 예: 경량 배포 만들거나, 컨테이너화 활용해 엣지 디바이스에 더 쉽게 배포
          + 개발팀이 엣지 디바이스에 최신 버전의 프로그램과 서비스 안정적으로 제공하는 게 그 어느 때보다 중요해짐
          + CI/CD 파이프라인을 엣지에 연결하면 이는 엣지 애플리케이션에 일관되고, 효율적인 개발자 경험 제공해 운영 효율성 높임
          + 조기 피드백과 함께 애플리케이션을 엣지에 자동 배포하고 테스트해 더 나은 제품 더 빨리 제공
          + 몇몇 서비스가 엣지 배포 지원하지만 CI/CD 파이프라인 비롯해 기존 파이프라인 위한 새로운 도구와 플러그인 등장 가능성 큼

   저는 사실 ai 기반 Cicd가 그냥 cicd랑 뭐가 다른지 잘 모르겠어요...
"
"https://news.hada.io/topic?id=16453","NASA, Boeing Starliner 승무원 SpaceX Crew-9으로 귀환 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            NASA, Boeing Starliner 승무원 SpaceX Crew-9으로 귀환 발표

        Hacker News 의견

     * Boeing은 더 많은 자금을 받고, 추가 시간과 두 번의 시범 비행을 가졌음에도 불구하고 이번 비행에서 완벽함을 보여주지 못했음
          + Boeing 엔지니어들은 시스템을 충분히 이해하고 NASA의 안전 요구 사항을 충족시킬 수 있어야 했음
          + Starliner는 세 번째 무인 귀환을 완료할 가능성이 높지만, NASA가 지나치게 신중했는지에 대한 의문이 제기될 수 있음
          + Boeing은 신뢰할 수 있는 추진기를 갖춘 유인 차량을 제공했어야 했음
     * Boeing이 어떻게 빠르게 몰락했는지 분석한 책이나 기사가 있는지 궁금함
          + 과거 Boeing은 예산 이하로 747을 제작할 수 있었음
          + Lockheed는 소수의 인원으로 U2를 예산 이하로 제작했음
          + 단순히 냉전 이후의 지정학적 변화나 정부의 고정 마진 구조 때문만은 아닐 것임
          + 경영진의 잘못된 관리나 탐욕 때문만도 아닐 것임
          + Boeing이 오래된 회사로서 가속화된 쇠퇴 단계에 있는 것만은 아닐 것임
          + Boeing이 미국의 축소판이 아닌지에 대한 의문이 있음
     * NASA를 비난하지 않음, 캡슐에 무엇이 잘못되었는지 알 수 없음
          + Boeing이 안타까움, 과거 Boeing 프로젝트에서 그들을 좋아하지 않았음
          + 경쟁은 좋음, Boeing이 문제를 해결하지 못해 슬픔
          + 다른 누군가가 해결할 수 있기를 희망하지만, 몇 년이 걸릴 것임
          + Boeing은 모든 프로젝트를 비경쟁적인 방위 공간처럼 취급하는 것 같음
     * 몇 가지 메모:
          + Crew-8을 6명의 승무원으로 재구성하여 Starliner undock과 Crew-9 도착 사이의 비상 대피를 대비함
          + Starliner는 9월 초에 ISS를 자율적으로 떠남
          + Crew-9은 9월 24일 이전에 2명의 승무원과 2개의 빈 좌석으로 발사됨
          + Crew-9은 2025년 2월경에 귀환 예정임
     * NASA가 올바른 인간 및 엔지니어링 결정을 내려서 기쁨
          + ""Dragon-specific spacesuits for Wilmore and Williams""라는 소식은 처음 들음
          + 차량에 맞춘 우주복이 있다는 것이 흥미로움
          + 하드웨어 상점에 가기 위해 속옷을 갈아입음
     * NASA 웹사이트 기사:
          + ""NASA Decides to Bring Starliner Spacecraft Back to Earth Without Crew""
          + 링크: NASA 기사
     * 60년이 넘는 ""우주"" 시대가 시작된 이후에도 저궤도에 사람을 안전하고 비용 효율적으로 보내고 돌아오는 방법을 아직도 찾지 못함
          + 우리의 우주 탐사 희망에 대한 현실 점검이 필요함
     * NASA 기자 회견 진행 중:
          + 링크: NASA 기자 회견
          + 결론: 추진기에 문제가 무엇인지 알 수 없었고, 더 악화되지 않을 것이라는 확신이 없었음
     * NASA 웹사이트가 여전히 모호함
          + 링크: NASA 기사
          + 대부분의 사람들은 ""Starliner를 어떻게 귀환시키는가?""가 아닌 ""우주비행사들은 어떻게 돌아오는가?""를 궁금해함
     * NASA와 Boeing에게 큰 창피임
          + Boeing의 이름은 과거에 의미가 있었지만, 이제는 현대 세계의 다른 쓰레기들과 합류했음
"
"https://news.hada.io/topic?id=16407","Calling All Hackers","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Calling All Hackers

목차

   0 - 서문 1 - 저자 소개 2 - 시트코인의 탄생 3 - 돈의 작동 방식 3.1 - 고정 수익 3.2 - 주식 3.3 - 주주 가치 4 - 스타트업의 어려움 5 - 요점 6 - 감사의 말 7 - 참고 문헌 8 - 부록

0 - 서문

     * 저자 cts는 해커이자 소규모 비즈니스 소유자 및 CEO로서 두 가지 다른 길을 걸어온 경험을 공유함
     * 해커는 세상이 어떻게 작동하는지 이해하는 사람임
     * 해커는 컴퓨터가 어떻게 켜지는지, 메모리 트레이닝, 현대 프로세서, 캐시, 사이드 채널 등을 이해함
     * 해커는 이메일 및 SMS 인증 우회, 드라이버 라이선스 인증 우회 방법 등을 알고 있음
     * 해커는 세상이 어떻게 돌아가는지 이해하고 그 지식을 사용해 변화를 가져옴

1 - 저자 소개

     * 저자는 13년간 해커로 활동해왔으며, Zellic이라는 보안 회사를 설립함
     * CTF 팀 'perfect blue'를 창설하고 DEF CON CTF, GoogleCTF, PlaidCTF, HITCON 등에서 우승함
     * 2021년에 보안 회사를 설립하고 주로 암호화폐 클라이언트와 작업함

2 - 시트코인의 탄생

     * 토큰의 목적은 가격 상승임
     * 암호화폐 시장에서 토큰 가격을 올리는 방법에는 '아시아 방식'과 '서구 방식'이 있음
     * 아시아 방식은 펌프 앤 덤프 전략으로, VC, 시장 조성자, 암호화폐 거래소, 토큰 프로젝트 창립자 간의 협력으로 이루어짐
     * 서구 방식은 VC가 기술의 혁신성을 강조하고 생태계 프로젝트에 자금을 지원하여 토큰의 가치를 높이는 방식임

3 - 돈의 작동 방식

  3.1 - 고정 수익

     * 고정 수익 자산은 대출과 차입을 기반으로 함
     * 채권은 미래에 지불할 IOU(차용증서)임
     * 이자율은 돈을 빌리는 대가로 지불하는 수수료임
     * 고정 수익 자산은 본질적인 가치를 가지며, 이는 다른 자산의 벤치마크로 사용될 수 있음

  3.2 - 주식

     * 주식은 자산의 소유권을 나타내며, 이는 주주에게 배당금을 생성함
     * 주식의 가치는 투기적 가치와 본질적 가치로 나뉨
     * 투기적 가치는 심리와 하이프에 의해 창출될 수 있음

  3.3 - 주주 가치

     * 주식 회사는 일반적으로 주주의 이익을 보호하기 위한 법적 의무가 있음
     * 주주 외에도 직원, 고객, 지역 사회 등 다양한 이해관계자가 있음
     * 주주는 유동성이 높아 단기적인 이익을 추구할 수 있음

4 - 스타트업의 어려움

     * 스타트업의 문제는 주주와 다른 이해관계자 간의 불일치에서 비롯됨
     * VC는 초기 단계에서 큰 성장을 기대하며 투자함
     * 많은 스타트업이 단기적인 이익을 위해 장기적인 가치를 희생함

5 - 요점

     * 해커는 세상이 어떻게 작동하는지 이해하고 그 지식을 사용해 변화를 가져옴
     * 암호화폐 시장은 투기적 요소가 강하며, 이는 많은 문제를 야기함
     * 고정 수익 자산과 주식은 각각 본질적 가치와 투기적 가치를 가짐
     * 스타트업은 주주와 다른 이해관계자 간의 불일치를 해결해야 함

6 - 감사의 말

     * 여러 사람들에게 감사의 말을 전함

7 - 참고 문헌

     * 다양한 참고 문헌을 나열함

8 - 부록

     * 추가적인 정보와 자료를 제공함

GN⁺의 정리

     * 이 기사는 해커와 비즈니스 소유자로서의 경험을 공유하며, 암호화폐 시장의 문제점을 지적함
     * 고정 수익 자산과 주식의 본질적 가치와 투기적 가치를 설명함
     * 스타트업의 문제는 주주와 다른 이해관계자 간의 불일치에서 비롯됨
     * 이 기사는 해커와 비즈니스 소유자에게 유익한 정보를 제공하며, 암호화폐 시장의 문제점을 이해하는 데 도움이 됨
     * 유사한 기능을 가진 산업 내 다른 프로젝트로는 다양한 보안 회사와 암호화폐 프로젝트가 있음

        Hacker News 의견

     * 첫 번째 의견
          + 처음에는 보안 관련 내용이 마음에 들지 않았음
          + 그러나 계속 읽으면서 스토리텔링이 흥미를 끌었음
          + 경제 관련 내용과 유사점이 마음에 들었음
          + 최근 몇 달 동안 생각해왔던 아이디어들을 완벽하게 포착했음
          + ZIRP가 독성이었고 우리를 나태하게 만들었음
          + 현상을 식별하고 메커니즘을 설명하는 것이 유용한 연습이었음
          + 이 글이 오랫동안 기억에 남을 것 같음
          + 유용한 가치를 가진 것을 만들고 싶고, 지난 10년간의 헛소리에 지쳤음
          + 벤처를 시작하려고 노력 중이라 좋은 동기부여가 되었음
          + 느린 시작이었지만 매우 탄탄한 글이었음
     * 두 번째 의견
          + 이 글이 자신의 글임
          + 친절한 말에 감사하며, 많은 사람들이 즐겨줘서 기쁨
          + 아침에 HN에 올라온 것을 보고 매우 놀랐음
     * 세 번째 의견
          + 이 모든 것이 매우 ""날카롭게"" 느껴짐
          + 대부분의 사람들은 단지 무언가를 만지작거리는 것을 좋아함
          + 그렇게 깊은 의미는 없음
     * 네 번째 의견
          + 컴퓨터, 과학, 수학을 아무리 이해해도 큰 문제를 혼자 해결할 수 없음
          + 세상을 운영하는 시스템은 우리가 노트북과 실험실에서 부술 수 있는 것보다 훨씬 큼
     * 다섯 번째 의견
          + 해커에서 정장을 입고 ""어른""이 된 사람으로서, 이 글이 신선하고 더 받아들이기 쉬웠음
          + 해커들이 자신을 ""나는 큰 기업과 싸우는 작은 사람""으로 생각하지 말아야 함
          + 대신 기업이 되어 자신이 생각하는 방식으로 운영해야 함
          + 자본을 모아 숨 쉴 공간을 마련하라는 제안에 대해 질문이 있음: 어떻게 해야 하는지 모르겠음
     * 여섯 번째 의견
          + ""google.com을 입력하고 Enter를 누를 때 무슨 일이 일어나는지 아는 것""이 해커 문화의 최고의 짧은 설명일 수 있음
     * 일곱 번째 의견
          + 댓글에서 언급된 것만큼 나쁘지 않음
          + pg의 브레이크아웃 에세이와 유사함 (pg는 훨씬 읽기 쉬움)
          + 회사를 설립하고 세상을 더 나은 곳으로 만들라는 메시지임
          + 태도가 마음에 들었음 (텍스트 형식은 개선될 수 있지만, 집 스타일은 집 스타일임)
     * 여덟 번째 의견
          + 저자를 조금 봐줄 것임, 왜냐하면 대안이 더 나쁨: 아는 것이 무지한 태도보다 나음
          + 그러나 게이트키핑에 대해 너무 심각하게 생각하지 말아야 함
          + 양자 색역학은 복잡함: 금융 시장의 가격-시간 우선순위는 플래시 카드임
     * 아홉 번째 의견
          + ""세상이 어떻게 돌아가는지""에 대한 가장 일반적인 함정임
          + 무언가에 능숙해지고 나서 모든 것을 안다고 주장하는 것임
          + 가치 없는 파생상품의 폭발적 증가와 인간 가치를 배제하는 시스템을 고려할 때, 더 적절한 결론은 이것이 세상이 멸망하는 방식일 수 있음
     * 열 번째 의견
          + 이 글은 해커들뿐만 아니라 모든 기업가들에게 보내는 메시지임
          + 오늘날 많은 회사들의 인위적인 성공을 강조함
"
"https://news.hada.io/topic?id=16536","판사들, 빅 테크의 Section 230 면책 종료 판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    판사들, 빅 테크의 Section 230 면책 종료 판결

    빅 테크의 섹션 230 특혜가 끝나다

     * 알고리듬은 더 이상 면죄부가 아님. 제3순회법원은 TikTok이 어린이들을 자해로 유도한 혐의로 재판을 받아야 한다고 판결. 빅 테크의 비즈니스 모델이 끝남
     * 섹션 230은 빅 테크 기업들이 '알고리듬이 했다'고 주장하며 책임을 회피할 수 있게 해줌. 그러나 제3순회법원은 이 법을 뒤집고, 대형 테크 기업들이 나쁜 행동을 저질러도 책임을 지지 않도록 하는 보호막을 끝냄
     * TikTok의 알고리듬이 10살 소녀에게 자해를 유도하는 영상을 추천하고, 소녀가 이를 따라하다가 사망. 소녀의 어머니가 TikTok과 ByteDance를 상대로 제품 책임, 과실, 부당 사망 소송을 제기했으나 하급 법원은 TikTok이 단순히 타인의 발언을 호스팅했을 뿐이라며 책임을 묻지 않음
     * 섹션 230은 1996년에 제정된 법으로, '인터랙티브 컴퓨터 서비스'가 타인의 발언을 호스팅할 경우 그 발언에 대해 책임을 지지 않도록 함. 그러나 인터넷의 성장과 판례의 확대로 인해 빅 테크 기업들이 이 법을 악용하게 됨
     * 빅 테크 기업들은 섹션 230을 이용해 사용자 발언에 대한 책임을 회피하며, 타겟 광고를 통해 수익을 창출. 이는 기업들이 사용자에게 해를 끼쳐도 책임을 지지 않도록 만듦
     * 제3순회법원은 TikTok의 알고리듬이 사용자에게 맞춤형 영상을 추천하는 방식이 TikTok의 발언으로 간주될 수 있다고 판결. 이는 TikTok이 법정에서 책임을 져야 함을 의미
     * 이 판결은 섹션 230의 해석을 크게 뒤집는 것으로, 빅 테크 기업들이 사용자 발언에 대한 책임을 지게 만듦. 이는 빅 테크 기업들의 비즈니스 모델에 큰 영향을 미칠 것임
     * 앞으로 이 사건은 대법원으로 갈 가능성이 높으며, 섹션 230의 해석에 대한 논쟁이 계속될 것임

    GN⁺의 정리

     * 이 기사는 빅 테크 기업들이 섹션 230을 이용해 책임을 회피하는 방식과 그에 대한 법원의 판결을 다룸
     * 섹션 230의 해석이 바뀌면서 빅 테크 기업들이 사용자 발언에 대한 책임을 지게 될 가능성이 높아짐
     * 이는 빅 테크 기업들의 비즈니스 모델에 큰 영향을 미칠 수 있으며, 앞으로 법적 논쟁이 계속될 것임
     * 비슷한 기능을 가진 다른 프로젝트로는 Google, Meta, Twitter 등이 있음

        Hacker News 의견

     * 현재 댓글들은 소셜 미디어의 종말과 정부 검열로 이어질 것이라는 의견이 많음
          + 소셜 미디어가 편향적이며, 콘텐츠를 큐레이션하는 역할을 하고 있음
          + 알고리즘적 큐레이션이 기업의 책임을 면제하지 않는다는 판결임
          + 이는 일종의 네트워크 중립성으로 볼 수 있음
          + 소셜 미디어가 더 나아질지 지켜보고 싶음
     * Section 230의 저자들이 Google v. Gonzalez 사건에서 작성한 의견서가 있음
          + Section 230은 타겟 추천을 포함한 모든 형태의 콘텐츠 프레젠테이션을 보호함
          + 이는 혁신을 장려하고 실시간 사용자 생성 콘텐츠 전송을 지원함
     * TikTok이 알고리즘을 통해 Blackout Challenge를 어린이들에게 추천한 사건이 있음
          + TikTok이 이 챌린지의 위험성을 알고 있었음에도 불구하고 적절한 조치를 취하지 않았음
          + Gonzales vs. Google 사건과 유사한 문제로, 이슬람 국가를 지지하는 비디오 추천이 테러리즘을 조장했는지 여부를 다룸
     * 알고리즘이 어린이에게 위험한 콘텐츠를 추천한 사례가 있음
          + 알고리즘이 특정 콘텐츠를 추천하는 것은 플랫폼의 표현 활동으로 간주됨
          + Section 230은 타인의 정보만을 보호하며, 플랫폼의 표현 활동은 보호하지 않음
     * 새로운 법률이 온라인 사용자, 특히 어린이를 보호할 수 있음
          + Section 230이 사라지면 대형 기술 기업들이 유리해질 것이라는 우려가 있음
          + 스타트업의 시장 진입 장벽이 높아질 것임
     * 인터넷의 무법지대 시대가 끝날 것이라는 기대감이 있음
          + Section 230이 없는 세상을 상상해봐야 함
          + 과거의 인터넷도 괜찮았으며, 미래의 인터넷도 괜찮을 수 있음
     * 대형 기술 플랫폼이 연설자로 규제되어야 하는지에 대한 논의가 있음
          + 플랫폼은 중개자 역할을 하며, 법적 구조가 인터넷 시대에 맞지 않다는 의견이 있음
     * TikTok의 큐레이션과 특정 비디오의 추천에 대한 책임이 있음
          + Section 230은 타인의 정보를 보호하지만, 플랫폼의 표현 활동은 보호하지 않음
     * 타겟 광고 소셜 미디어 회사가 어린이를 보호해야 한다면 40%의 마진을 유지할 수 없을 것이라는 의견이 있음
          + Section 230이 폐지되면, 기업들은 콘텐츠를 전혀 조정하지 않음으로써 플랫폼 역할만 할 수 있음
          + 이는 인터넷을 4chan과 같은 상태로 만들 수 있음
"
"https://news.hada.io/topic?id=16487","a16z가 선정한 소비자용 "생성형 AI" 앱/서비스 Top 100","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 a16z가 선정한 소비자용 ""생성형 AI"" 앱/서비스 Top 100

     * 6개월마다 데이터를 심층 분석하여 순위를 매김
          + 상위 50개 AI 우선 웹 제품(월간 순 방문자 수 기준)
          + 상위 50개 AI 우선 모바일 앱(월간 활성 사용자 수 기준)
     * 2024년 3월과 비교했을때 30%의 앱이 신규로 선정됨

생성형 AI ""웹 제품"" Top 50 (월간 유니크 사용자 기준)

     * ChatGPT, character.ai, perplexity.ai, Claude, SUNO, JanitorAI, QuillBot, Poe, liner, CIVITAI
     * SpicyChat, ElevenLabs, Hugging Face, LUMA AI, candy.ai, Crushon AI, Leonardo.AI, Midjourney, yaprayo, cutout.pro
     * VIGGLE, Photoroom, Gamma, VEED.IO, PIXLR, ideogram, you.com, DeepAI, SeaArt AI, invideo AI
     * PIXAI, Clipchamp, Udio, Chatbot App, VocalRemover, PicWish, Chub.ai, HIX.AI, Vidnez, PIXELCUT
     * MaxAI.me, BLACKBOX AI, ChatPDF, Gauth, COZE, Playground, Doubao, Speechify, Nightcafe, AI Novelist

생성형 AI ""모바일 앱"" Top 50 (월간 유니크 사용자 기준)

     * ChatGPT, Microsoft Edge, photomath, NOVA, Bing, Remini, Chat & Ask AI, Brainly, meitu, character.ai
     * Facemoji, Remove It, ChatOn, EPIK, Hi Translate, AI Mirror, Photoroom, ChatBot, Hypic, AI Chatbot: AI Chat Smith 4
     * Chatbot AI & Smart Assistant, Talkie, Photo AI, Face Dance, Luzia, Doubao, Beat.ly, QANDA, SnapEdit, SNOW
     * DAVINCI, ChatBox, Question AI, Cici, Adobe Express, Copilot, ImagineArt, PhotoApp, AI Chat, Poly.AI
     * Microsoft SwiftKey, Prequel, LooksMax AI, Umax, Bobble AI, ChatPod, Photoleap, Chat AI, RIZZ, perplexity.ai

창의적 도구가 시장을 지배 : 비디오와 음악이 상승중

     * 소비자들은 이미지, 비디오, 음악, 음성 등 다양한 콘텐츠 생성 및 편집 도구에 지속적으로 관심을 보임
          + 웹 리스트의 52%가 콘텐츠 생성 또는 편집에 초점을 맞추고 있으며, 새로 진입한 12개 기업 중 58%가 창의적 도구 분야에 속함
          + 랭킹이 높은 신규 진입 기업에는 Luma(#14), Viggle(#21), SeaArt(#29), Udio(#33)가 포함
          + 지난 6개월 동안 가장 큰 도약을 보인 곳은 음악 생성기 Suno로 36위에서 5위로 상승
     * 이전 리스트(3월)에서는 대부분의 콘텐츠 생성 도구가 이미지에 초점을 맞추었지만, 최근 6개월 동안 다른 모달리티가 인기를 얻고 있음
          + 상위 콘텐츠 생성 사이트 중 이미지 생성은 41%에 불과하며, 새로 진입한 5개 생성 도구 중 이미지는 SeaArt 뿐임
          + 비디오는 Luma, Viggle, Vidnoz 등 3개의 신규 진입자가 있었고, 음악은 Udio가 새로 진입함
     * 모바일에서는 이미지 및 비디오 편집이 가장 일반적인 사용 사례로, 22%의 리스트 메이커가 두 번째로 큰 제품 카테고리를 차지함
     * 스타트업도 등장하고 있지만, 리스트에 새로 진입한 상위 랭커 중 상당수는 Meitu(#9), SNOW(#30), Adobe Express(#35)와 같이 생성형 AI로 전환한 레거시 창의적 도구임

어시스턴트의 경쟁 : ChatGPT에 도전하라

     * ChatGPT는 웹과 모바일에서 큰 차이로 3번째로 1위를 차지했지만, 소비자 어시스턴트 경쟁이 가열되고 있음
     * Perplexity는 이제 웹에서 3위로, 간결하고 실시간적이며 정확한 답변 제공에 초점을 맞추는 AI 기반 검색 엔진임
     * Perplexity는 방문 지속 시간(7분 이상)에서 ChatGPT를 약간 앞서며, 사용자들이 깊이 참여하고 있음을 시사함
     * Anthropic의 Claude는 4위로 웹 상위 5위에 진입했으며, 최근 ChatGPT의 GPTs와 정면 대결하는 Artifacts를 출시함
     * 모바일에서는 AI 어시스턴트 Luzia가 25위로 데뷔했으며, 전 세계적으로 4천5백만 명의 사용자를 보유하고 있다고 주장함

바이트댄스가 게임에 참여하다

     * 바이트댄스의 에듀테크 플랫폼 Gauth(#44), 봇 빌더 Coze(#45), 일반 어시스턴트 Doubao(#47) 등 3개 앱이 웹 기반 AI 리스트에 새로 등장함
     * Doubao는 모바일 리스트에서도 26위로 처음 등장함
     * Doubao 외에도 사진 및 비디오 편집기 Hypic(#19)과 어시스턴트 Cici(#34)도 바이트댄스 제품으로, 총 6개의 제품이 양쪽 리스트에 포함됨
     * 여기에는 Cici와 같이 서로 다른 지리적 시장을 대상으로 하는 앱도 포함됨
     * 바이트댄스는 2023년 말 생성형 AI 애플리케이션에 초점을 맞춘 R&D 부서인 Flow를 출범시켰으며, 2024년 초부터 다른 기업명으로 미국(및 해외)에서 새로운 AI 애플리케이션을 출시해 왔음

새로운 카테고리: 미학(Aesthetics)과 데이팅

     * 웹과 모바일 전체에 걸쳐 미학과 데이팅이라는 새로운 카테고리가 유일하게 등장함
     * 여기에는 LooksMax AI(#43), Umax(#44), RIZZ(#49)의 3개 신규 진입자가 모바일 리스트에 포함됨
     * LooksMax와 Umax는 사용자의 사진을 수집하여 평가하고 매력적이 되기 위한 ""팁""을 제공함
     * Umax는 또한 사용자가 10/10이 되었을 때의 모습을 생성하는 반면, LooksMax는 매력도를 위해 사용자의 목소리를 분석함
     * RIZZ는 데이트 앱 메시지를 업그레이드하는 데 초점을 맞추고 있음

디스코드가 성장을 이끈다

     * 많은 경우, 특히 콘텐츠 생성에서 디스코드 트래픽은 웹 및 모바일 순위를 오를 앱에 대한 주요 지표임
     * 일부 제품은 디스코드에서 출시하여 제품을 테스트하고 커뮤니티를 구축한 다음, 웹사이트를 출시하고 디스코드에서 대부분 이전함
     * 다른 기업들은 독립형 제품을 출시한 후에도 상당한 디스코드 사용량을 유지함
     * 7월 기준, 초대 트래픽에서 디스코드 서버 상위 100위 안에 든 AI 기업은 10개였음
     * 이 중 절반은 1월과 비교하여 새로운 진입자였음
     * 상위 10개 디스코드 서버 중 절반은 사용자가 디스코드 내에서 실제로 콘텐츠를 생성할 수 있도록 허용하는 반면, 나머지 절반은 커뮤니티 구축, 고객 지원 및 리소스 공유를 위해 디스코드를 사용함

   AI 종류가 엄청 많군요

   suno ai는 정말 좋은거 같아요
   가수 커버들도 많은데 아예 비판하는 노래도 만들더라구요

   앱 28위 한국의 QANDA인데 OANDA라고 들어가있네요. 외환거래앱도 아니고 AI교육앱니다 !

   이미지를 잘못 인식해서 OANDA가 되었네요. OANDA는 외화거래앱이 맞긴 합니다 ㅎㅎ. QANDA로 수정해두었습니다.

   Claude 한테 각 서비스를 설명해달라고 해봤습니다.

생성형 AI ""웹"" Top 50 (월간 유니크 사용자 기준)

    1. ChatGPT: OpenAI에서 개발한 대화형 AI 어시스턴트
    2. character.ai: 다양한 캐릭터와 대화할 수 있는 챗봇 플랫폼
    3. perplexity.ai: 인용된 출처와 함께 정확한 실시간 답변을 제공하는 AI 기반 검색 엔진
    4. Claude: Anthropic에서 개발한 ChatGPT의 경쟁 제품
    5. SUNO: 음악 생성 AI 서비스
    6. JanitorAI: ChatGPT와 유사한 AI 어시스턴트
    7. QuillBot: 글쓰기를 도와주는 AI 툴
    8. Poe: Quora의 챗봇 플랫폼
    9. liner: 중요한 웹 컨텐츠에 하이라이트하고 정리할 수 있는 도구
   10. CIVITAI: Stable Diffusion을 사용하는 이미지 생성 AI 서비스
   11. SpicyChat: ChatGPT를 기반으로 한 AI 챗봇
   12. ElevenLabs: 텍스트를 음성으로 변환하는 AI 서비스
   13. Hugging Face: 오픈소스 머신러닝 플랫폼
   14. LUMA AI: 비디오 생성 및 편집을 위한 AI 도구
   15. candy.ai: 비주얼 AI 어시스턴트
   16. Crushon AI: 쇼핑 도우미 AI
   17. Leonardo.AI: DALL-E로 이미지를 생성하는 서비스
   18. Midjourney: 텍스트 프롬프트로 이미지를 생성하는 AI
   19. yaprayo: 텍스트에서 아이디어와 요약을 추출하는 AI 서비스
   20. cutout.pro: 이미지에서 원하는 부분만 잘라내는 AI 도구
   21. VIGGLE: 비디오 생성 및 편집을 위한 AI 서비스
   22. Photoroom: 이미지 배경 제거 AI 툴
   23. Gamma: 확장 가능한 오픈소스 AI 플랫폼
   24. VEED.IO: 비디오 편집을 위한 온라인 도구
   25. PIXLR: 온라인 포토 에디터
   26. ideogram: 글쓰기 도우미 AI
   27. you.com: AI 기반 개인 검색 엔진
   28. DeepAI: 다양한 AI 도구를 제공하는 플랫폼
   29. SeaArt AI: 텍스트로 이미지를 생성하는 AI
   30. invideo AI: 비디오 제작을 도와주는 AI 툴
   31. PIXAI: AI를 활용한 이미지 편집 도구
   32. Clipchamp: 마이크로소프트에서 인수한 온라인 비디오 에디터
   33. Udio: 음악 생성 AI
   34. Chatbot App: 챗봇 제작 플랫폼
   35. VocaiRemover: 음악에서 보컬을 제거하는 AI 서비스
   36. PicWish: 텍스트로 이미지를 생성하는 AI
   37. Chub.ai: 트위터 콘텐츠 생성을 위한 AI 툴
   38. HIX.AI: 프로그래밍 도우미 AI
   39. Vidnez: 개인화된 비디오 제작 AI
   40. PIXELCUT: 이미지 편집 AI 도구
   41. MaxAI.me: 건강관리 AI 어시스턴트
   42. BlackBox AI: 코딩 도우미 AI
   43. ChatPDF: PDF 문서를 요약하고 질문에 답변해주는 AI
   44. Gauth: 바이트댄스의 에듀테크 플랫폼
   45. COZE: 바이트댄스의 봇 빌더 서비스
   46. Playground: OpenAI의 API 데모 사이트
   47. Doubao: 바이트댄스의 중국어 AI 어시스턴트
   48. Speechify: 텍스트를 음성으로 읽어주는 앱
   49. Nightcafe: 텍스트 기반 이미지 생성 AI
   50. AI Novelist: 소설 쓰기를 도와주는 AI 툴

생성형 AI ""모바일"" Top 50 (월간 유니크 사용자 기준)

    1. ChatGPT: OpenAI의 대화형 AI 어시스턴트 모바일 앱
    2. Microsoft Edge: AI 기능을 탑재한 마이크로소프트의 웹브라우저
    3. photomath: 수학 문제 풀이를 도와주는 앱
    4. NOVA: 동영상 편집 앱
    5. Bing: AI 검색 기능을 제공하는 마이크로소프트의 검색 앱
    6. Remini: AI 기술로 오래된 사진을 복원해주는 앱
    7. Chat & Ask AI: AI 챗봇 및 질의응답 앱
    8. Brainly: AI를 활용한 학습 Q&A 플랫폼
    9. meitu: 사진 보정 AI 앱
   10. character.ai: 모바일에서 사용 가능한 character.ai의 앱 버전
   11. Facemoji: 얼굴 인식 이모지 키보드 앱
   12. Remove It: 사진에서 원치 않는 객체를 제거해주는 AI 툴
   13. ChatOn: AI 챗봇 앱
   14. EPIK: AI를 활용한 사진 편집 및 보정 앱
   15. Hi Translate: AI 기반 번역 앱
   16. AI Mirror: 사진 편집 및 합성 앱
   17. Photoroom: 사진 배경 제거 AI 앱
   18. ChatBot: AI 챗봇 제작 플랫폼 앱
   19. Hypic: 바이트댄스의 사진/동영상 편집 AI 앱
   20. AI Chatbot: AI Chat Smith 4의 모바일 버전
   21. Chatbot AI & Smart Assistant: AI 챗봇 및 스마트 어시스턴트
   22. Talkie: AI 음성 어시스턴트 앱
   23. Photo AI: AI를 활용한 사진 편집 도구
   24. Face Dance: 얼굴 인식 댄스 앱
   25. Luzia: 스페인어 사용자를 위한 AI 어시스턴트 앱
   26. Doubao: 바이트댄스의 중국어 AI 어시스턴트 앱
   27. Beat.ly: AI 기반 음악 제작 앱
   28. QANDA: AI 수학 교육 앱
   29. SnapEdit: AI 사진 보정 앱
   30. SNOW: AI 카메라 앱
   31. DAVINCI: AI 음성 어시스턴트 앱
   32. ChatBox: AI 챗봇 제작 플랫폼
   33. Question AI: 질문 답변 AI 앱
   34. Cici: 영어 버전 Doubao AI 어시스턴트 앱
   35. Adobe Express: 어도비의 AI 사진/동영상 편집 앱
   36. Copilot: GitHub의 코드 작성 도우미 AI
   37. ImagineArt: 텍스트로 이미지 생성하는 AI 앱
   38. PhotoApp: 사진 편집용 AI 앱
   39. AI Chat: 간단한 AI 챗봇 앱
   40. Poly.AI: 고객 서비스 챗봇 제작 플랫폼
   41. Microsoft SwiftKey: AI 기반 키보드 앱
   42. Prequel: 사진/동영상 보정용 AI 앱
   43. LooksMax AI: 외모 평가 및 조언 AI 앱
   44. Umax: 외모 개선 팁을 제공하는 AI 앱
   45. Bobble AI: AI 키보드 앱
   46. ChatPod: AI 챗봇 제작 플랫폼
   47. Photoleap: 사진 합성 및 편집 AI 앱
   48. Chat AI: 또 다른 AI 챗봇 앱
   49. RIZZ: 데이트 앱 대화 도우미 AI
   50. perplexity.ai: perplexity의 모바일용 AI 검색 앱

   Poe: Anthropic의 챗봇 플랫폼

   Poe 는 Quora 의 챗봇 플랫폼입니다. 위에서부터 보다가 눈에 띄었는데, 다른 것들도 정확치 않을 수 있을 듯 하네요.

   새로운 서비스들에 대해서는 확실히 좀 틀리는 것들이 있는듯 합니다.
"
"https://news.hada.io/topic?id=16461","텔레그램 CEO 파벨 두로프 체포, 테러·사기·아동 포르노 혐의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  텔레그램 CEO 파벨 두로프 체포, 테러·사기·아동 포르노 혐의

     * 토요일 저녁, 텔레그램의 창립자이자 CEO인 파벨 두로프가 파리 르부르제 공항에서 체포됨
     * 두로프는 아제르바이잔에서 온 전용기에서 내린 직후 경호원과 한 여성과 함께 체포됨
     * 체포는 프랑스 국가사법경찰국이 발부한 수색영장에 따라 이루어짐
     * 두로프는 연방 지명수배자 명단에 올랐으며, 프랑스 당국에 협조하지 않았다는 이유로 영장이 발부됨
     * 두로프는 다음과 같은 심각한 범죄 혐의를 받고 있음:
          + 테러
          + 마약 거래
          + 범죄 활동 공모
          + 사기
          + 자금 세탁
          + 불법 활동 은폐
          + 아동 성학대 콘텐츠 유포

텔레그램과 조직 범죄의 연관성

     * 프랑스 당국은 두로프의 리더십 하에 텔레그램이 암호화된 메시징 서비스로 인해 조직 범죄의 주요 플랫폼이 되었다고 믿음
     * 수사관들은 두로프를 구금했으며, 그는 곧 판사 앞에 서게 될 것으로 예상됨
     * 혐의의 심각성으로 인해 최대 20년의 징역형을 선고받을 수 있음

암호화폐 TON에 미치는 영향

     * 체포 소식 이후 텔레그램 관련 암호화폐인 톤코인이 시장에서 15% 이상 급락하는 등 암호화폐 시장에 즉각적인 영향을 미침

유럽연합의 혐의

     * EU 당국의 주요 혐의는 텔레그램의 암호화된 메시징 서비스가 조직 범죄를 촉진하는 데 사용되었다는 것임
     * 한 수사관은 ""텔레그램이 수년에 걸쳐 조직 범죄를 위한 1위 플랫폼이 되었다""고 말하며 플랫폼의 프라이버시 기능과 범죄 활동 간의 연관성을 강조함

두로프의 재판

     * 프랑스 시민권자인 두로프는 프랑스에서 재판을 받게 될 것이며, 자신에 대한 혐의에 답변해야 함
     * 이 사건은 향후 디지털 플랫폼과 암호화폐 규제에 큰 법적 영향을 미칠 수 있음

GN⁺의 의견

     * 이번 사건은 프라이버시와 보안을 중시하는 메신저 플랫폼이 범죄에 악용될 수 있다는 점을 보여주는 사례임. 플랫폼 운영자의 책임 범위와 한계에 대한 사회적 논의가 필요해 보임
     * 텔레그램은 다양한 기능과 개인정보 보호로 인기를 끌었지만, 이번 사건으로 인해 플랫폼의 신뢰도와 평판에 큰 타격을 입을 것으로 예상됨
     * 유사한 기능을 제공하는 다른 메신저로는 시그널(Signal), 위커(Wickr), 왓츠앱(WhatsApp) 등이 있음. 이들 플랫폼도 보안과 프라이버시 이슈에 대해 면밀히 검토해야 할 것임

        Hacker News 의견

     * Kim Dotcom 상황과 유사하다는 의견이 있음
          + Google, Discord, Reddit 등도 불법 콘텐츠를 포함하지만, 그들의 CEO는 기소되지 않음
          + 정부가 임의로 특정 사람들에게 책임을 전가하는 경향이 있음
     * Telegram은 기본적으로 암호화된 그룹을 제공하지 않음
          + 불법 콘텐츠를 알고도 협조하지 않았음
          + 다른 서비스 제공자들은 더 협조적이거나, 암호화된 정보에 접근할 수 없음
          + 호스팅된 콘텐츠 플랫폼은 불법 자료를 제거하고 법 집행 기관과 협력해야 함
     * Telegram은 최고의 커뮤니케이션 플랫폼이라는 의견이 있음
          + 창립자가 좋은 변호사를 구해 문제를 해결하길 바람
     * 프랑스 변호사에 따르면, 현재 구금 상태에서 정보가 비밀로 유지되고 있음
          + 48시간 동안 절차에 접근할 수 없음
          + 마약이나 매춘 관련 범죄일 경우 96시간, 테러 관련일 경우 144시간까지 연장될 수 있음
     * 더 신뢰할 수 있는 출처에서 기사를 확인할 필요가 있음
          + BBC와 Al Jazeera의 링크를 공유함
     * Telegram을 중립적인 플랫폼으로 보는 의견이 있음
          + TCP와 달리 Telegram은 콘텐츠를 제어하고 모니터링할 수 있음
          + 법적 요청에 협조하지 않는 것은 범죄 활동을 돕는 것과 같음
          + 플랫폼은 각 관할 구역의 법률을 준수해야 함
     * ""암호화가 나쁘다""는 주장이 되지 않기를 바람
          + Telegram의 암호화 메시징 서비스가 조직 범죄를 촉진했다는 주장이 있음
     * Telegram의 개인정보 보호정책을 인용함
          + 테러 용의자에 대한 법원 명령을 받으면 IP 주소와 전화번호를 공개할 수 있음
          + 특정 민주주의 지수 이상의 국가에서만 법원 명령을 인정함
     * Telegram의 창립자가 위선적이라는 의견이 있음
          + 오픈 텍스트 메신저를 e2ee 메신저로 마케팅함
          + 러시아 법 집행 기관과는 매우 협조적이었음
          + EU의 프라이버시 공격이 우려되지만, Telegram은 개인 메신저가 아님
     * 유럽과 호주가 미국보다 먼저 권위주의적 감시 국가가 될 것이라는 의견이 있음
          + 과거에 미국이 그런 국가가 될 것이라고 믿었지만, 현재는 유럽과 호주가 더 우려됨
"
"https://news.hada.io/topic?id=16427","Plasmo - 브라우저 확장 개발을 위한 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Plasmo - 브라우저 확장 개발을 위한 프레임워크

     * 별도의 설정파일 고민없이 손쉽게 브라우저 확장을 개발 가능
     * React + Typescript 지원
     * Manifest.json 파일을 추상화. 소스와 설정에서 자동으로 생성함
     * Content Scripts UI 기능으로 React, Svelte3, Vue3 컴포넌트를 현재 페이지에 마운팅 가능
     * Tab 페이지 지원
     * 실시간 리로딩 + React HMR
     * 환경 변수 지원
     * Storage / Messaging API
     * Remote Code Import ( Google Analytics 트래킹 코드를 쉽게 임포팅 가능 )
     * 여러개의 브라우저 타게팅 가능
     * BPP(Browser Platform Publish) GitHub Action으로 자동 Submit 지원

   vite로 만든 바닐라 리액트 프로젝트에 일일이 manifest 추가하고 파일 배치 고민했었는데 잘만 된다면 유용할 것 같습니다

   Plasmo - 브라우저 확장 개발용 SDK
   2년쯤 전에 한번 올렸었는데, 그동안 기능이 많이 추가 및 개선되었네요.
"
"https://news.hada.io/topic?id=16457","Geddit 개발로 인한 Reddit 이용 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Geddit 개발로 인한 Reddit 이용 금지

     * Reddit가 나를 앱 개발로 인해 차단한 이야기
     * 시작
          + 2023년 6월, Reddit는 새로운 API 가격 정책을 발표함
          + 이전에는 무료였지만, 이제 5천만 API 요청당 $12,000를 요구함
          + 이는 비상업적 앱과 봇들에게 큰 타격이었음
     * Geddit
          + Reddit API를 조사하다가 URL 끝에 .json을 추가하면 전체 페이지를 JSON 형식으로 받을 수 있다는 것을 발견함
          + 간단한 자바스크립트 라이브러리로 Reddit API 래퍼를 만들고, 이를 Geddit라고 명명함
          + 익명으로 Reddit을 읽기 전용으로 사용할 수 있는 기능을 제공함
     * 앱 개발
          + HTML, CSS, 자바스크립트로 네이티브 모바일 앱을 개발할 수 있는 Capacitor와 Ionic 프레임워크를 발견함
          + Geddit를 안드로이드 앱으로 개발하여 GitHub에 공유함
          + Hacker News, Android Police, Reddit, YouTube 등에서 언급됨
          + GitHub Releases 페이지에서 25k 이상의 다운로드를 기록함
     * 끝
          + 여러 버전을 출시하고 Material Design 가이드라인에 따라 스타일링을 추가함
          + F-Droid 스토어에 앱을 게시함
          + Reddit로부터 이메일을 받았고, 상업적 제품이 아니며 API를 악용하지 않았음을 설명함
          + Reddit의 응답을 기다리며 개발을 중단함
     * GN⁺의 정리
          + 이 글은 Reddit의 새로운 API 가격 정책이 비상업적 앱 개발자에게 미친 영향을 보여줌
          + Geddit는 Reddit API를 우회하여 익명으로 Reddit을 사용할 수 있게 한 오픈 소스 프로젝트였음
          + Reddit의 대응으로 인해 프로젝트가 중단되었지만, 여전히 작동 중임
          + 비슷한 기능을 가진 다른 프로젝트로는 Apollo와 Juno가 있음

        Hacker News 의견

     * Reddit는 예전에는 재미있는 사이트였지만, 지금은 봇과 선전 기계처럼 느껴짐
          + 현재는 주로 기술 관련 서브레딧만 읽음
          + 공식 모바일 앱 대신 Baconreader와 Relay 사용
          + Revanced 덕분에 Relay의 구버전을 패치하여 무료로 API 키 사용 가능
     * fediverser 프로젝트 소개
          + Reddit에서 Lemmy로 쉽게 이동할 수 있도록 도와줌
          + Reddit 자격 증명으로 Lemmy 인스턴스에 가입 가능
          + NLNet에서 소규모 지원금을 받아 Voyager 클라이언트에 기능을 내장 중
     * Geddit와 RedReader 앱 추천
          + Geddit는 nsfw 게시물을 계정 없이 읽을 수 있음
          + RedReader는 접근성 기능 덕분에 Reddit에서 차단되지 않음
     * Reddit의 네트워크 차단과 캡차 문제로 불편함을 겪음
          + 예전의 단순한 웹과 텍스트가 그리움
     * Reddit의 초기에는 좋았지만, 관리 문제로 인해 사용자와의 관계가 악화됨
          + 사용자와 독성 없는 대화를 나눌 수 있는 공개적인 방법이 필요함
     * Reddit 플랫폼에 의존하는 것은 위험함
          + 유일한 장점은 좋은 사용자 콘텐츠의 네트워크 효과임
     * Reddit URL에 .json을 추가하면 JSON 형식으로 페이지를 받을 수 있음
          + 인증 없이 댓글을 JSON으로 받을 수 있음
     * Reddit에서 벗어나 삶이 더 나아짐
          + 초기 LLM 프로젝트가 Reddit을 크롤링하여 시작된 것이 재미있음
     * HTTP만으로도 충분히 API를 대체할 수 있음
          + 특정 사용자 에이전트를 강요하는 것은 통제하려는 시도임
     * 서브레딧 URL에 .rss를 추가하면 RSS 피드를 받을 수 있음
          + RSS는 원래 봇이 읽도록 설계된 것임
     * 내러티브 형성이 글로벌 비즈니스가 됨
          + Reddit과 Twitter/X가 API 사용료를 높이는 이유임
"
"https://news.hada.io/topic?id=16476","북한의 엔지니어들이 미국 기술 회사에 지원 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       북한의 엔지니어들이 미국 기술 회사에 지원 중

     * 최근 북한 엔지니어들이 미국 기술 기업에 지원하는 사례가 증가하고 있음
          + 이들은 한국 이름이 아닌 이름과 AI로 생성된 프로필 사진을 사용하여 전문 취업 사이트에 프로필을 만듦
          + 이들은 제3국(주로 중국)을 통해 원격으로 일하며, 북한 정부에 자금을 송금하는 것이 거의 확실함
          + 이러한 행위는 미국의 대북 제재에 저촉될 수 있으며, 법적 문제로 이어질 수 있음
     * 북한의 엔지니어들이 미국 회사에 지원하는 이유
          + 북한은 오랫동안 외국에서 일하며 정부를 위해 돈을 벌도록 노동자들을 파견해 왔음
          + 최근에는 원격 근무의 확산과 높은 미국 기술 회사의 급여로 인해 미국 회사에 지원하는 사례가 증가
          + 중국에서 일하는 북한 IT 노동자의 월급 할당액은 $6,000 이상이며, 이는 미국 기술 회사의 급여로 쉽게 충당 가능
     * 북한 엔지니어들의 지원 과정
          + 북한 엔지니어들은 한국인이 아닌 이름과 AI로 편집된 프로필 사진을 사용하여 여러 구직 사이트에 프로필을 생성
          + 면접 과정 후 채용 제안을 받은 후, 회사 제공 노트북을 미국 내 파트너에게 보내달라고 요청
          + 미국 내 파트너는 원격 데스크톱 소프트웨어를 설치해, 북한 기술자가 미국에서 일하는 것처럼 보이게 함
          + 기술적 역량과 기본적인 영어 실력만으로도 미국의 신생 기업에서 주니어 소프트웨어 엔지니어로 고용될 가능성이 있음

Cinder의 대응 방식

     * Cinder의 공동 창업자들은 CIA 출신으로, 북한 관련 사이버 보안 및 인권 문제에 대한 경험이 있어 이 문제에 대해 독특한 관점을 가지고 있음
     * 지원자들이 인터넷에 존재하지 않거나 다른 사람에게 매핑되는 등 이상한 점을 발견함
     * 의심스러운 지원자들의 특징
          + 온라인 프로필이 프로페셔널 네트워킹 사이트 외에 없음
          + 가짜 경력 및 실제 존재하지 않는 사무실 위치
          + 도시나 기술에 대한 기본적인 질문에 대답할 수 없음
          + 배경 소음에서 다른 사람들이 인터뷰를 진행하는 소리가 들림
          + 영어 실력과 이름이 일치하지 않음
     * 보안 회사 파트너와 협력하여 이러한 패턴이 북한인이 미국인으로 위장하려는 시도와 일치한다는 것을 확인함
     * 지원자들을 걸러내기 위해 인터넷 검색, 경력 확인, 프로필 이미지 및 소셜 미디어 심사를 진행함
     * Cinder의 고객이 국가 차원의 스파이 활동 및 내부 위협 문제를 조사하고 있다고 알리자, 한 북한 지원자는 즉시 인터뷰에서 이탈

Cinder가 현재 하고 있는 일

     * 의심스러운 북한 지원자에 대한 정보를 취업 사이트 보안팀과 공유하고 있음
     * 이 문제로 영향을 받는 다른 회사에게 예방 전략을 공유하고자 함

GN⁺의 의견

     * 북한 정부가 외화벌이 수단으로 IT 인력을 해외에 파견하는 것은 오래된 관행이지만, 최근 미국 기업을 대상으로 하는 것은 새로운 양상임. 팬데믹 이후 재택근무가 늘어나고 미국 기업의 높은 연봉이 북한 정부에 매력적으로 보였을 것으로 추정됨.
     * 이는 북한 정부에 자금이 흘러들어가는 것을 막기 위한 제재 조치에 위배될 소지가 있어 미국 기업들이 주의를 기울여야 할 사안임. 특히 fast-growing 스타트업의 경우 인재 확보에 급급해 이력의 허점을 간과할 수 있음.
     * 북한발 사이버 위협에 대한 경각심을 일깨우는 한편, 선의의 피해자가 될 수 있는 북한 주민들의 인권 문제도 함께 고려해야 함. 북한 정권의 외화벌이 시도를 저지하면서도 근본적인 문제 해결을 위해서는 국제사회의 협력과 북한 내 변화가 필요해 보임.

   북한 사람들이 내 저질 코드를 들여다 본다고....?
   왠지 부끄럽네요...

        Hacker News 의견

     * 이전 직장에서 고용할 때 비슷한 경험을 했음
          + 지원자들이 거짓말을 했다는 것을 쉽게 알 수 있었음
          + 인터뷰 중 기본적인 질문에 답하지 못했음
          + LinkedIn 프로필이 없거나 기본적인 프로필만 있었음
          + 이름이 인종과 맞지 않았음
          + 이들이 북한 출신이라는 증거는 없었음
          + 이러한 사기는 성공 가능성이 낮다고 생각함
     * 북한 엔지니어보다 전 CIA 요원들이 설립한 ""Trust and Safety"" 회사가 더 무서움
     * 소셜 미디어를 사용하지 않고 사진을 공개하지 않는 것이 북한 해커의 특징이라는 점에 놀람
          + 전 CIA 요원들이 모든 사람의 프로필을 기대하는 것이 이해됨
          + 개인 정보를 공개하는 것이 고용주의 기대라는 점이 소름 끼침
     * 미국 정부가 이러한 사건을 공개하고 엄격한 처벌을 알리면, 미국 시민들이 북한 해커를 돕는 것을 두 번 생각하게 할 것임
     * 기사에 북한 출신이라는 증거가 없는데, 미국 기반 기술 회사들이 북한 국적의 지원자를 만난다고 의심함
     * 소셜 미디어가 없는 것이 항상 경고 신호로 언급되는 것이 웃기기도 하고 무섭기도 함
          + 10년 넘게 원격으로 일하고, 야외나 카페에서 일하는 것을 좋아함
          + 이 기사에 따르면 진짜 북한 사람처럼 느껴짐
     * 모호한 자기소개서 언어를 발견함
          + 기사에 나온 예시가 미국 기반 개발자들이 보낸 편지보다 나음
     * ""파리의 지하철 정류장은 어디였나요?"" 같은 질문은 고용법 문제를 일으킬 수 있음
     * 그들이 일을 잘하는지 궁금함
          + 기사에서는 그들이 똑똑하지 않고 특별히 잘 훈련되지 않았다고 말함
          + 회사들이 그렇게 절박한지 궁금함
     * 유럽에서도 비슷한 프로필을 발견했음
          + LinkedIn 키워드 검색으로 찾았고, 일부는 직접 지원함
          + 인터뷰를 통해 사기임을 확인했음
          + 동아시아 출신으로 보이는 사람들이었고, 이름과 출신 이야기가 믿기 어려웠음
          + 프로필이 조금만 조사해도 맞지 않음
          + 나이지리아 사기처럼, 부주의한 회사를 대상으로 최적화된 것 같음

   한국의 변태같은 프리랜서 문화가 안보를 지켰다!?
   역시 대한민국 탄탄한 안보 뿌슝빠슝
   근무조건은 정규직처럼 (무조건 상주)
   근무시간은 임원처럼 (워커홀릭 희망)
   근무복지는 사장처럼 (네가 네 복지를 챙겨라)
   이것이 대한민국의 프리랜서다!
   다시는 대한민국을 얕보지 마라!!
"
"https://news.hada.io/topic?id=16470","Show GN: Matchumbeop - macOS용 한글 맞춤법 검사기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: Matchumbeop - macOS용 한글 맞춤법 검사기

   매번 웹 브라우저 열고 네이버 들어가서 맞춤법 검사기 검색하고.. 하는 과정이 너무 번거로워 맥에서 키보드 단축키만을 이용해 쉽게 한글 맞춤법을 검사할 수 있도록 네이버 맞춤법 검사기를 사용하며 앱을 만들어 보았습니다.
     * 기본 단축키: cmd + option + K (앱 실행), cmd + return (검사), cmd + shift + V (클립보드에 있는 내용을 붙여 넣어 검사)
     * 네이버 검사기 기준 웹에는 300자 제한이 있으나 300자를 초과하여 검사할 수 있도록 했습니다. (문장을 명확히 나눌 수 있는 마침표 등으로 잘라서 요청 분리)

   처음 만들어본 macOS 앱인데 이거 배포하겠다고 $99짜리 개발자 등록도 해봤네요.
   소스코드는 전부 공개되어 있고 http://github.com/ssut/Matchumbeop 에서 확인하실 수 있습니다.

   지금은 네이버 맞춤법 검사기만 지원하지만 이른 시일 내 GitHub README 페이지에 나와있는 다른 검사 엔진도 지원을 추가할 예정입니다.

   설정을 클릭하면 앱이 꺼집니다.
   macOS버전: 13.3.1 Ventura

   원했던 앱이라서 너무 좋습니다!

   오 너무 유용할 것 같네요! 잘 쓰겠습니다~

   좋네요!

   잘 써보겠습니다

   초치는 내용일 수 있겠지만,
   DeepL에서도 Mac용 데스크탑 앱을 지원하고 있으며, command + C + C 단축키로 비슷한 동작을 할 수 있습니다.

   참고해보시면 좋을 것 같아요.
     * https://www.deepl.com/ko/macos-app

   DeepL은 한국어 맞춤법 검사가 없는걸로 알고있는데요

   DeepL에서 한국어 맞춤법 검사도 가능한가요??

   좋네요! 부산대 검사기 도 지원 되길 기대합니다.

   작은 오류 하나 제보: 특정 사이즈 아이콘이 이상한지 제 파인더의 작은 아이콘 모드에서는 아이콘이 깨져 보입니다.

   혹시 차후에 가능하시면 접근성 API써서 현재 선택된 텍스트를 바로 검사할수 있게 되면 좋겠습니다.

   아이콘 안 나오는 건 재현이 안되네요 ㅠ 다른 앱에서 선택한 텍스트를 바로 검사할 수 있도록 macOS 서비스 지원을 추가해 1.1.0 버전을 릴리즈 했습니다! - https://github.com/ssut/Matchumbeop/wiki/macOS-서비스-등록-방법
"
"https://news.hada.io/topic?id=16521","ChartDB – 무료 오픈 소스 데이터베이스 설계 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ChartDB – 무료 오픈 소스 데이터베이스 설계 편집기

     * 데이터베이스 시각화
          + 한 번의 쿼리로 데이터베이스를 시각화할 수 있는 무료 오픈 소스 데이터베이스 디자인 편집기
          + 회원가입 없이 15초 만에 다이어그램 생성 가능
     * 빠르고 쉬운 데이터베이스 다이어그램 작성
          + 몇 번의 클릭으로 다이어그램 작성 가능
          + 전체 구조를 한눈에 볼 수 있음
          + SQL 스크립트 내보내기 가능
          + 편집기 커스터마이징 가능
     * 빠른 시작
          + 앱으로 이동
          + 피드백 제공
     * 기능
          + 예제
          + 앱 편집기
          + Twitter
          + Discord
          + GitHub

GN⁺의 정리

     * ChartDB는 데이터베이스 다이어그램을 빠르고 쉽게 작성할 수 있는 도구임
     * 회원가입 없이 바로 사용할 수 있어 접근성이 높음
     * SQL 스크립트 내보내기와 편집기 커스터마이징 기능이 유용함
     * 데이터베이스 시각화가 필요한 개발자들에게 유용한 도구임
     * 비슷한 기능을 가진 도구로는 dbdiagram.io와 DrawSQL이 있음

        Hacker News 의견

     * 프로젝트 팀들이 기본 다이어그램 없이 새로운 애플리케이션을 개발하는 경우가 많음
          + 데이터 모델을 포함한 솔루션의 어떤 측면도 설명하지 않음
          + 간단한 ER 다이어그램이 프로젝트 문서화의 표준이 되기 위해 무엇이 필요한지 불확실함
          + 많은 도구가 있음에도 불구하고 실제로 사용하는 사람은 거의 없음
          + Microsoft가 Excel이나 PowerPoint에 이 기능을 추가해야 사람들이 사용할 것 같음
          + 이 다이어그램들은 포괄적일 필요는 없지만, 맥락에 따라 주요 구조와 관계를 전달해야 함
          + 필요하다면 동일한 데이터베이스에 대해 여러 개의 작은 다이어그램을 만들어 요구사항과 설계를 문서화할 수 있음
     * ERD를 만드는 것에 대해 긍정적이었지만, 이제는 포괄적인 ERD가 드물어짐
          + 유지 관리 비용이 높아 가치가 단기적임
          + ERD를 코드로 생성하는 도구로 dbdiagram.io와 eraser.io가 인기 있음
          + ERWin은 UML/ERD 다이어그램의 원조 도구지만 비쌈
     * 5년 전 프로젝트를 시작할 때 이런 도구가 있었으면 좋았을 것 같음
          + postgres를 사용하여 풀 스택 프로젝트의 데이터베이스 스키마를 설계해야 했음
          + 과학 도메인 전문가와 협력했으며, 다이어그램을 검토하는 것이 매우 유용했음
          + 다이어그램을 통해 도메인 특유의 문제를 식별할 수 있었음
          + 여러 번의 일대일 회의가 필요했으며, 다이어그램을 보면서 다음 회의를 위해 변경 사항을 기록했음
          + 이 도구가 있었다면 회의 중에 실시간으로 변경할 수 있었고, 많은 반복을 줄일 수 있었을 것 같음
          + pgadmin 같은 도구가 있었지만 비기술적인 사람들에게는 친숙하지 않았음
          + 이런 도구가 마찰을 줄일 수 있을 것 같음
     * 사람들이 이런 도구를 사용하는 이유가 궁금함
          + 관리자와 대화하기 위해 사용하는 것인지 궁금함
          + 진지하게 묻는 것임
          + 아마도 나도 사용해야 할 것 같음
          + 왜 사용하는지 이해하지 못함
     * 많은 도구가 있지만, 내가 찾는 것은 스크립트를 사용할 수 있는 도구임
          + 내 사용 사례는 모델 설명에서 간단한 DB 다이어그램을 생성하는 것임
          + 테이블 이름, 열 이름, 관계를 메모리 구조에 가지고 있으며, ER 다이어그램을 그리고 싶음
          + 현재 plantuml을 사용하여 puml 파일을 생성하고, plantuml을 실행하여 png/svg를 생성하려고 함
          + 대부분의 도구는 자체 편집기를 가진 완전한 DB 설계 도구이지만 API가 없음
          + dbdiagram.io 같은 도구는 온라인에 집중되어 있어 내게는 옵션이 아님
          + 제안 환영함
     * 이런 도구들의 주요 문제는 단방향적이며 중앙 권위가 되려 한다는 것임
          + 사람들이 사용하는 이유는 이해하지만, 나에게는 필요하지 않음
          + 모든 도구가 SQL로 내보내기를 기대하지만, 다이어그램은 데이터베이스가 아님
          + 이제 두 가지 작업을 해야 함
     * 정적 랜딩 페이지에 스크롤 문제가 많음
     * dbeaver는 ERD를 지원함
          + 인터랙티브하고 유연함
          + ""아름답지""는 않지만, 전체 제품이 FOSS이며 데이터베이스 작업에 매우 유용함
"
"https://news.hada.io/topic?id=16437","HN 공개: 프로그램의 일부를 오브젝트 파일로 내보내는 Ghidra 확장 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             HN 공개: 프로그램의 일부를 오브젝트 파일로 내보내는 Ghidra 확장 프로그램

Ghidra용 오브젝트 파일 익스포터 확장

   이 Ghidra 확장은 프로그램의 일부를 오브젝트 파일로 내보낼 수 있게 해줌. 이 오브젝트 파일들은 유효한 메타데이터(심볼, 재배치 테이블 등)를 가지고 있어 도구 체인에 의해 직접 재사용될 수 있음.

  사용 사례

     * 고급 바이너리 패칭: 원본과 수정된 부분을 수작업 대신 링커를 활용해 결합
     * 소프트웨어 포팅: 시스템 독립적인 코드를 프로그램에서 분리하고 나머지를 교체
     * 파일 형식 변환: 프로그램이나 오브젝트 파일을 다른 파일 형식으로 변환
     * 라이브러리 생성: 프로그램의 일부를 추출하여 다른 컨텍스트에서 재사용
     * 디컴파일 프로젝트: 프로그램을 여러 오브젝트 파일로 분할하고 재구현

  지원되는 명령어 집합 아키텍처 및 오브젝트 파일 형식

     * x86: COFF(지원), ELF(지원)
     * MIPS: COFF(미지원), ELF(지원)

  빌드 (CLI)

     * 이 저장소를 클론
     * GHIDRA_INSTALL_DIR 환경 변수를 Ghidra 설치 디렉토리로 설정
     * gradle buildExtension 명령 실행
     * Ghidra 확장 아카이브가 dist/ 디렉토리에 생성됨

  설치

     * 릴리스 페이지에서 확장을 다운로드하거나 로컬에서 빌드
     * Ghidra 인스턴스에서 File > Install Extensions…로 확장 설치
     * CodeBrowser 창에서 File > Configure를 통해 RelocationTableSynthesizedPlugin 플러그인 활성화

  사용법

    1. Listing 뷰에서 주소 집합 선택
    2. Relocation table synthesizer 분석기 실행 (원샷 모드에서 사용 가능)
    3. File > Export Program…을 통해 재배치 가능한 오브젝트 파일 익스포터 호출
    4. Window > Relocation table(synthesized)에서 재구성된 재배치 테이블 확인 가능

     * ⚠️ Relocation table synthesizer 분석기는 완전히 채워진 Ghidra 데이터베이스(정확히 선언된 심볼, 데이터 타입 및 참조)를 필요로 함. 부정확하거나 누락된 정보는 분석 중에 잘못된 또는 발견되지 않은 재배치를 초래할 수 있음
     * ⚠️ 오브젝트 파일 익스포터는 Relocation table synthesizer 분석기의 결과에 의존함. 오브젝트 파일을 내보내기 전에 이 분석기를 실행하여 재배치 테이블 내용이 최신 상태인지 확인

  작동 원리

   오브젝트 파일은 세 부분으로 구성됨:
     * 재배치 가능한 섹션 바이트
     * 심볼 테이블
     * 재배치 테이블

   링커가 여러 오브젝트 파일에서 실행 파일을 생성할 때:
     * 섹션을 메모리에 배치
     * 가상 주소 공간에서 심볼의 주소를 계산
     * 섹션 바이트에 심볼의 최종 주소를 기반으로 재배치를 적용

   일반적으로 이 과정 후 재배치 테이블은 폐기되며, 디버깅 심볼이 유지되지 않는 한 심볼 테이블도 폐기됨. 그러나 신중한 분석을 통해 이 데이터를 재생성할 수 있으며, 이를 통해 프로그램을 다시 오브젝트 파일로 _delink_할 수 있음.

GN⁺의 정리

     * 이 Ghidra 확장은 프로그램의 일부를 오브젝트 파일로 내보낼 수 있게 해줌.
     * 고급 바이너리 패칭, 소프트웨어 포팅, 파일 형식 변환 등 다양한 사용 사례가 있음.
     * 정확한 데이터베이스가 필요하며, 분석기 실행 후 오브젝트 파일을 내보내는 것이 중요함.
     * 비슷한 기능을 제공하는 프로젝트로는 IDA Pro와 같은 디컴파일러가 있음.
"
"https://news.hada.io/topic?id=16425","라이와 우브: 8월은 Python Packaging 수확 시즌","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   라이와 우브: 8월은 Python Packaging 수확 시즌

  Armin Ronacher의 생각과 글

    Python 패키징을 위한 Rye와 uv: 8월은 수확의 계절

     * 몇 달 전, Rye 패키징 도구의 관리권을 Astral에 넘겼음
     * Astral 팀은 지난 몇 달 동안 Python 패키징을 위한 많은 도구를 개발해왔음
     * 최근 릴리스에서 uv는 pyproject.toml 파일 조작, 워크스페이스 지원, 로컬 패키지 참조 및 스크립트 설치와 같은 기능을 추가했음
     * uv는 Python 설치도 관리할 수 있어 Rye와 매우 유사해짐
     * Rye를 사용하는 사람들은 uv를 주목하고 피드백을 제공해야 함

    EuroPython에서의 발표

     * 최근 프라하에서 열린 EuroPython에서 Python 패키징에 대한 견해와 Rye를 만들면서 배운 교훈을 발표했음
     * 패키징 도구의 목표는 모든 사람이 사용하는 최고의 도구가 되는 것임
     * Python은 AI와 ML의 투자와 관심 덕분에 매우 인기 있는 플랫폼이 되었음
     * Python을 배우는 사람들이 훌륭한 개발자 경험을 기억하도록 하고 싶음
     * 현재는 너무 많은 도구와 불일치로 인해 어려움이 있음

    도구의 지배

     * 지배는 대부분의 투자가 하나의 스택으로 들어간다는 것을 의미함
     * Rye와 같은 도구는 지배적인 도구가 확립되면 사라져야 함
     * uv가 그 도구가 될 가능성이 높음
     * 최종적으로 Rye는 uv로 대체될 것임

    패키징 생태계의 발전

     * 많은 패키징 도구가 Python 생태계의 발전을 기반으로 구축되었음
     * setup.py 파일에서 eggs, wheels로의 전환, 메타데이터 표준의 도입 등 많은 발전이 있었음
     * Rust crates와 Python 라이브러리의 발전이 이러한 도구를 가능하게 했음

    커뮤니티의 다음 단계

     * 커뮤니티는 더 적은 도구를 추천해야 함
     * ez_setup.py와 easy_install을 추천하던 시절이 있었음
     * 현재는 pip, pip-tools, poetry, PDM 등을 추천함
     * 중요한 Python 프로젝트를 유지하는 사람들은 uv를 시도해보고 추천할지 고려해야 함

    Astral의 VC 자금

     * Astral이 VC 자금을 받는다는 점이 미래에 어떤 영향을 미칠지 고민해야 함
     * 코드와 uv의 기능을 보면, 최악의 경우에도 커뮤니티는 uv가 존재하기 전보다 나아질 것임

  GN⁺의 정리

     * 이 글은 Python 패키징 도구의 발전과 커뮤니티의 역할에 대해 다루고 있음
     * uv는 많은 기능을 제공하며, Rye를 대체할 가능성이 높음
     * 커뮤니티는 더 적은 도구를 추천하고, uv를 시도해볼 필요가 있음
     * Astral의 VC 자금이 미래에 미칠 영향을 고려해야 함
     * 비슷한 기능을 가진 도구로는 pip, poetry, PDM 등이 있음

        Hacker News 의견

     * uv의 최신 릴리스가 Home Assistant의 릴리스 프로세스를 크게 단축시켰음
          + 릴리스 시간이 약 2.5시간에서 약 20분으로 줄어듦
          + 자세한 내용은 Home Assistant 개발자 블로그에서 확인 가능함
     * 처음에는 새로운 도구가 Python ""패키징"" 문제를 해결할 것이라고 기대했으나, 실제로는 패키지 관리에 관한 것임
          + 개인적으로 Python 패키지 관리에는 큰 문제가 없었음
          + pip는 일반적으로 잘 작동함
     * Python에서 애플리케이션을 실행 파일로 쉽게 포장할 수 없는 점이 불편함
          + 프로덕션 환경에서 git 클론과 virtualenv 생성을 자주 봄
          + 이는 보안 관점에서 좋지 않음
     * Python 패키징에 문제가 있지만, 기본 pip로도 꽤 잘 해왔음
          + 원래 virtualenv에서 내장된 venv 모듈로 전환한 것이 큰 변화였음
          + 의존성 관리를 진지하게 하려면 FAANG처럼 모노레포를 구축하는 것이 좋음
     * npm VC 사기와 Microsoft 인수, OpenAI의 법적 비영리 상태로 인해 주요 언어 인프라를 이러한 조직에 맡기기 꺼려짐
          + 개별 기여자들은 훌륭하지만, 조직 차원의 재정적 정렬이 문제임
          + 빠른 린트, 타입 체크, 코드 스캔, PR 어시스턴트는 언제든지 교체 가능하지만, 설치 흐름과 패키지 저장소는 아님
     * 이러한 도구들의 문제는 권위임
          + pypa의 승인을 받지 못했기 때문에 cargo와 다름
          + pypa가 포괄적인 솔루션을 제공하지 못했음
          + 3-4년 전만 해도 poetry와 pipenv가 문제를 해결할 것처럼 보였음
          + pypa가 astral.sh에 참여해야 하지만, 통제 없이 할 수 있을지 의문임
     * Armin은 'uv'가 이 분야를 지배해야 한다고 주장하지만, VC 지원으로 인해 문제가 발생할 수 있음을 인정함
          + 그의 해결책은 'uv'가 매우 포크 가능하다는 것임
          + 그러나 포크는 더 많은 분열을 초래함
     * 회사에서 poetry의 느린 속도로 인해 uv로 소프트웨어를 마이그레이션하려고 함
          + 많은 문서를 읽었지만, 실제로 한 일은 많지 않음
          + 이전에 poetry로의 마이그레이션은 훨씬 간단했음
          + uv는 여전히 많은 Python 패키지 문제를 유지하고 있음
     * 사람들이 이번 라운드를 건너뛰고 2026년의 ""Python 패키지 관리자: 이번에는 정말 해결했다!""를 기다리는 것도 이해할 수 있음
          + 여전히 Nix 사용자는 만족함
     * 패키지 관리자를 개발하는 것에 열정을 가진 사람들이 있음
          + 이러한 상황이 계속된다면 매년 새로운 패키지 관리자가 나올 것임
"
"https://news.hada.io/topic?id=16450","마이크로소프트, 39년된 윈도우 제어판(Control Panel)을 공식 폐기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              마이크로소프트, 39년된 윈도우 제어판(Control Panel)을 공식 폐기

     * 제어판의 역사
          + Windows 운영 체제에서 제어판은 시스템 설정과 제어를 중앙에서 관리할 수 있는 기능으로 오랫동안 사용되어 왔음
          + 제어판은 시스템 시간과 날짜, 하드웨어 설정, 네트워크 구성 등 다양한 옵션을 조정할 수 있는 여러 애플릿을 제공함
          + Microsoft는 제어판을 더 현대적이고 간소화된 경험을 제공하는 ""설정"" 앱으로 대체하는 과정에 있는듯(이 부분은 ARS Technica의 의견임)
     * 설정(Settings) 앱의 등장
          + 설정 앱은 2012년 Windows 8에서 처음 도입되었으며, 터치스크린 친화적인 대안으로 일부 제어판 애플릿을 대체함
          + Windows 10 시대에 설정 앱은 점점 더 많은 제어판 설정을 통합하기 시작했고, Windows 11에서는 대부분의 제어판 기능을 대체할 만큼 완전한 기능을 갖추게 됨
     * 제어판의 미래
          + Microsoft의 노트에 따르면, 앞으로의 Windows 업데이트에서 나머지 제어판 애플릿들도 일괄적으로 사라질 가능성이 있음
          + 그러나 현재로서는 Windows에서 변경되는 사항은 없으며, 다가오는 24H2 업데이트에도 모든 기존 제어판이 포함될 예정임
          + ""사용 중단""과 ""제거"" 사이의 간격은 수년이 걸릴 수 있음
     * 제어판 디자인의 역사
          + 현재의 제어판 디자인과 아이콘은 Windows Vista와 Windows 7 시절인 2006년과 2009년에 정착됨
          + 많은 패널이 여전히 그 시절의 둥글고 유리 같은 외관을 유지하고 있음
          + Windows 11은 Microsoft의 가장 일관된 Windows 디자인 중 하나로, 오래된 앱들도 새롭게 단장되었음

GN⁺의 의견

     * 윈도우 제어판의 폐기는 마이크로소프트의 오랜 UI 현대화 노력의 정점으로 보임. 단순히 오래된 기능을 없애는 것 이상의 의미가 있음
     * 제어판은 수십 년간 윈도우 사용자들에게 익숙한 존재였기에, 완전한 폐기에는 시간이 걸릴 것으로 예상됨. 마이크로소프트도 이를 인지하고 점진적 접근을 택한 것으로 보임
     * 다만 제어판 애플릿 중 일부는 대체 기능이 아직 미비한 경우도 있어, 사용자 혼란을 야기할 수 있음. 마이크로소프트의 세심한 배려가 필요해 보임
     * 제어판 폐기와 함께 기존 윈도우 사용자들의 학습 비용이 발생할 것으로 보임. 설정 앱에 대한 사용자 교육이 필요할 것임
     * 장기적으로는 UI 일관성 확보를 통해 윈도우 사용성이 크게 개선될 것으로 기대됨. 윈도우의 미래를 위한 마이크로소프트의 결단으로 평가함

   제어판 뿐 아니라 작업 스케줄러, 장치 관리자 등 옛 ui를 유지하는 프로그램이 있습니다. 죄다 새로운 모습으로 일원화했으면 좋겠네요.

        Hacker News 의견

     * MS가 Windows에서 유용한 기능을 제거함
          + 제어판을 통해 네트워크 인터페이스를 구성하는 것이 간단하고 직관적임
          + 설정 앱은 복잡하고 고급 설정을 숨김
          + 업데이트 선택 기능이 없음
          + ""간소화된 경험""에 대한 불만이 많음
     * MS에서 일어날 수 있는 일련의 이벤트 상상
          + 새로운 UX 책임자가 고용됨
          + Windows UI의 모든 기능에 대한 사용성 연구를 시작함
          + ""사용자들이 제어판 설정 변경을 두려워한다""는 발표
          + 많은 UX 연구원, 시각 디자이너, UI 프로토타이퍼, 중간 관리자 고용
          + 1년 후, ""간단하고 직관적인 UX를 만들 방법을 완전히 이해했다""는 발표
          + 많은 제품 관리자, UI 엔지니어, 프로그램 관리자, QA 팀, 중간 관리자 고용
          + 2년 후, ""제어판을 대체하는 새로운 UX 출시"" 발표
          + 내부 피드백 무시됨: ""새 UI는 X 또는 Y 설정을 변경할 수 없다"", ""새 UI는 너무 느리다"" 등
          + 몇 년 후, ""두 개의 앱을 유지할 엔지니어링 리소스가 부족하다. 제어판을 제거하자""는 결정
     * 제어판 창이 실제로 더 많은 기능과 사용성을 제공함
          + Windows 10/11에서도 ""소리"" 설정을 위해 제어판을 사용함
     * Windows 7 이후 설정과의 모든 상호작용이 매우 좌절감을 줌
          + 일부 설정은 새로운 UI, 일부는 그렇지 않음
          + 하드웨어 벤더의 자체 앱이 추가됨
          + Microsoft가 새로운 UI를 약속했지만 여전히 오래된 UI가 남아 있음
     * 네트워킹 섹션에서 제어판 앱을 통해서만 접근 가능한 기능이 많음
          + 설정 앱에는 DHCP 옵션만 있음
          + DNS 서버 정보, DNS 접미사, 어댑터 설정 편집 불가
          + 지역 설정도 최소한의 커스터마이징만 가능
          + 추가 시계 설정 불가
          + 기능을 제거하지 않고 가져오기를 희망함
     * 새로운 설정이 이전 것보다 물질적으로 나쁨
          + 대기업의 느린 속도에 놀람
          + 새로운 설정이 기능적으로 완전하지 않음
          + 새로운 설정이 더 느림
          + 소리, 프린터, 마우스, 네트워킹, 사용자 관리 등에서 클래식 제어판을 찾으려고 노력함
          + 큰 설치에서는 감사 모드로 로그인하여 프로필을 사용자 지정하고 기본값으로 설정할 수 있었음
          + 이제는 UWP 앱이 주로 제공되며 제거하기 어려움
     * CMD.exe가 PowerShell로 대체된 것처럼 공식적으로 사용 중단됨
          + 제어판은 Windows 8 이후로 사용 중단 과정에 있음
     * 새로운 설정 검색 기능이 압도적임
          + Hyper-V 추가나 Bluetooth 장치 추가 시 많은 클릭이 필요함
          + Windows 검색이 도움이 되지 않음
          + 설정을 제대로 만들기 전까지 제거하지 않기를 희망함
     * 누군가 오픈 소스 대안을 만들 것임
"
"https://news.hada.io/topic?id=16518","ChartDB - 무료/오픈소스 DB 디자인 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ChartDB - 무료/오픈소스 DB 디자인 편집기

     * 하나의 ""스마트 쿼리""로 DB를 시각화(Visualize)
     * 가입 필요없이 즉시 사용 가능한 웹 버전 또는 로컬에 배포 지원
     * 몇 번의 클릭으로 빠르고 쉬운 데이터베이스 다이어그램 작성
     * AI를 이용한 Export 기능으로 DB간 쉬운 마이그레이션 지원(OpenAI)
     * PostgreSQL, MySQL, SQL Server, SQLite, MariaDB 지원
"
"https://news.hada.io/topic?id=16535","HDMI 포럼, AMD의 HDMI 2.1 오픈소스 드라이버 거부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HDMI 포럼, AMD의 HDMI 2.1 오픈소스 드라이버 거부

    PC 구성 요소

      GPU

        HDMI 포럼, AMD의 HDMI 2.1 오픈 소스 드라이버 거부

     * AMD의 오픈 소스 Linux 그래픽 드라이버가 HDMI 포럼의 법적 요구 사항으로 인해 HDMI 2.1+ 추가에 어려움을 겪음
     * HDMI 포럼이 AMD의 제안을 거부하여, Radeon 사용자는 HDMI 2.1을 통해 4K@120Hz 및 5K@240Hz 기능을 사용할 수 없게 됨
     * AMD는 Linux 사용자에게 DisplayPort 사용을 권장함

        AMD의 대응

     * AMD Linux 엔지니어 Alex Deucher는 HDMI 포럼의 요구 사항을 준수하지 않고는 오픈 소스 HDMI 2.1 구현이 불가능하다고 언급함
     * 2021년 HDMI 포럼이 사양에 대한 공개 접근을 제한하면서, AMD는 3년 동안 4K@120Hz 및 5K@240Hz 지원 문제를 해결하려고 노력함
     * HDMI 포럼의 제한은 HDMI 경험의 품질과 일관성을 보장하지만, 오픈 소스 드라이버 지원에는 큰 장애물이 됨

        AMD와 X.Org 재단의 노력

     * AMD와 X.Org 재단은 HDMI 포럼과 협력하여 비공개 HDMI 사양의 오픈 소스 구현을 허용하는 해결책을 모색함
     * AMD의 Linux 엔지니어와 법률 팀은 HDMI 기능을 오픈 소스 Radeon 드라이버에 노출할 수 있는지 평가하는 데 몇 달을 보냄
     * HDMI 포럼은 결국 AMD의 오픈 소스 드라이버 지원 요청을 거부함

        향후 대안

     * AMD는 폐쇄형 펌웨어에 더 많은 기능을 통합하거나 PSP IP 블록을 사용하여 HDMI 사양의 특정 측면을 보호하는 등의 대안을 모색할 가능성이 있음
     * 현재로서는 오픈 소스 드라이버에서 HDMI 2.1+ 기능 지원이 불가능함
     * 오픈 소스 지지자들은 최상의 경험을 위해 DisplayPort를 사용할 것을 권장함

    GN⁺의 정리

     * 이 기사는 AMD가 HDMI 포럼의 법적 요구 사항으로 인해 HDMI 2.1+ 기능을 오픈 소스 드라이버에 추가하지 못한 상황을 다룸
     * HDMI 포럼의 제한은 HDMI 경험의 일관성을 보장하지만, 오픈 소스 드라이버 지원에는 큰 장애물이 됨
     * 이 기사는 오픈 소스 지지자들에게 DisplayPort 사용을 권장하며, HDMI 포럼의 결정이 오픈 소스 커뮤니티에 미치는 영향을 강조함
     * 비슷한 기능을 제공하는 다른 제품으로는 DisplayPort를 지원하는 하드웨어가 있음

        Hacker News 의견

     * HDMI 포럼의 결정이 HDMI 경험의 품질과 일관성을 보장하는지 의문임
     * HDMI는 ARC 외에는 특별한 장점이 없다고 생각함
     * DisplayPort가 기술적으로 더 우수하지만 대부분의 TV가 이를 지원하지 않음
     * 저가형 모니터는 DisplayPort를 지원하지 않지만, 고가형 모니터에 관심이 있음
     * TV는 단순한 화면과 포트만 있으면 충분하며, Apple TV를 연결할 계획임
     * 이전 HN 게시물에서 HDMI가 기술적으로 열악하고 DisplayPort가 더 나은 솔루션이라고 설명함
     * 사람들이 HDMI 대신 DisplayPort를 선호하고 점차 전환해야 한다고 제안함
     * 전문 디스플레이에 HDMI 포트가 2개, DisplayPort가 1.5개 있는 이유를 궁금해함
          + 디스플레이 드라이버 IC가 하나의 DP 포트만 가지고 있는지, TV 실리콘을 사용하는지 의문임
          + AV 제작 설정에서 HDMI가 사용되지만, 이는 작은 틈새 시장임
          + 2개의 DP 포트와 1개의 HDMI 포트를 선호함
     * HDMI가 TV/홈 시어터 도메인으로 한정되어 사라지기를 바람
     * DisplayPort도 문제가 있지만, HDMI의 지속적인 산업 문제보다는 작음
     * HDMI가 사라져도 그리워하지 않을 것임
     * 일부 TV는 컴퓨터 모니터로서 가성비가 뛰어나지만 HDMI만 지원함
          + nvidia 카드와 dp-to-hdmi 어댑터 케이블을 사용해 Linux에서 8k/60을 작동시켰지만, Windows에서는 작동하지 않음
     * AMD가 디스플레이 관련 기술에서 열악한 위치에 있다고 생각함
          + HDMI가 AMD를 거부했고, DisplayPort는 충분히 보급되지 않았으며, Thunderbolt(USB C)는 Intel이 소유하고 있음
"
"https://news.hada.io/topic?id=16460","리스트로 사고하는 방어자들, 그래프로 사고하는 공격자들 (2015)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 리스트로 사고하는 방어자들, 그래프로 사고하는 공격자들 (2015)

  수비자의 사고방식

     * 많은 네트워크 방어는 적과 접촉하기 전에 잘못된 방향으로 시작됨
     * 수비자들은 자산을 보호하고 우선순위를 정하며 업무 기능에 따라 분류하는 데 집중함
     * 수비자들은 시스템 관리 서비스, 자산 인벤토리 데이터베이스, BCDR 스프레드시트 등에서 자산 목록에 둘러싸여 있음
     * 문제는 수비자들이 자산 목록이 아닌 그래프를 가지고 있다는 것임
     * 자산은 보안 관계에 의해 서로 연결되어 있음
     * 공격자는 스피어피싱과 같은 기술을 사용하여 그래프 어딘가에 침투하고, 그래프를 탐색하여 취약한 시스템을 찾음

  그래프란 무엇인가?

     * 네트워크의 그래프는 자산 간의 보안 종속성을 나타냄
     * 네트워크 설계, 관리, 사용되는 소프트웨어 및 서비스, 사용자 행동 등이 그래프에 영향을 미침
     * 예를 들어, 도메인 컨트롤러(DC)를 관리하는 Bob의 워크스테이션이 보호되지 않으면 DC가 손상될 수 있음
     * Bob의 워크스테이션에 관리자 권한이 있는 다른 계정도 DC를 손상시킬 수 있음
     * 공격자는 이러한 경로를 통해 DC를 손상시킬 수 있음

  Mallory의 여섯 단계

     * 공격자는 손상된 기기에서 대기하며 높은 가치의 계정이 로그인할 때까지 기다림
     * 예시 그래프를 통해 공격자가 어떻게 고가치 자산에 도달할 수 있는지 설명함
     * 터미널 서버를 손상시키면 많은 사용자 자격 증명을 덤프할 수 있음
     * 공격자는 그래프를 탐색하여 고가치 자산으로 이동할 수 있는 여러 경로를 발견함
     * 고가치 자산을 보호하려면 모든 종속 요소가 동일하게 보호되어야 함

  보안 종속성

     * Windows 네트워크에서 사용자가 특정 종류의 로그온을 수행할 때 자격 증명이 도난당할 수 있음
     * 다양한 관계가 보안 종속성을 생성함
          + 공통 비밀번호를 가진 로컬 관리자 계정
          + 많은 사용자를 위한 로그인 스크립트를 호스팅하는 파일 서버 및 소프트웨어 업데이트 서버
          + 클라이언트 기기에 프린터 드라이버를 제공하는 프린터 서버
          + 스마트 카드 로그온을 위한 인증서를 발급하는 인증 기관
          + 데이터베이스 서버에서 코드 실행이 가능한 데이터베이스 관리자 등

  그래프 관리

     * 수비자가 할 수 있는 일:
          + 네트워크를 시각화하여 목록을 그래프로 변환
          + 그래프를 가지치기하는 제어 구현
               o 큰 연결성을 생성하는 원치 않는 엣지 검사
               o 관리자 수 줄이기
               o 이중 인증 사용
               o 사용자 계정이 손상된 경우 자격 증명 회전 접근법 적용
               o 포리스트 신뢰 관계 재고

  목록 사고방식 감지

     * 수비자는 공격자가 전장을 시각화할 때 우위를 점하지 않도록 해야 함
     * 수비자는 네트워크에 대한 완전한 정보를 가질 수 있음
     * 공격자는 네트워크를 조각별로 연구해야 함
     * 수비자는 공격자가 그래프를 이해하는 방법에서 교훈을 얻어야 함
     * 현실에서 관리하는 것이 준비된 수비자의 사고방식임

  추가 읽을거리

     * 여러 공격 그래프에 관한 논문들:
          + Heat-ray: Combating Identity Snowball Attacks Using Machine Learning, Combinatorial Optimization and Attack Graph
          + Two Formal Analyses of Attack Graphs
          + Using Model Checking to Analyze Network Vulnerabilities
          + A Graph-Based System for Network-Vulnerability Analysis
          + Automated Generation and Analysis of Attack Graphs
          + Modern Intrusion Practices
          + Attack Planning in the Real World

GN⁺의 정리

     * 이 글은 네트워크 방어의 사고방식과 공격자의 접근 방식을 비교하여 설명함
     * 수비자는 자산 목록이 아닌 그래프를 통해 네트워크를 이해해야 함을 강조함
     * 공격자는 그래프를 통해 취약점을 탐색하고 공격 경로를 찾음
     * 수비자는 네트워크를 시각화하고 그래프를 관리하여 보안을 강화할 수 있음
     * 이 글은 네트워크 보안에 관심 있는 사람들에게 유용하며, 공격자와 수비자의 사고방식 차이를 이해하는 데 도움이 됨

        Hacker News 의견

     * 공격자는 특정 목표를 달성하기 위해 깊이 탐구할 수 있는 특권이 있음
     * 방어자는 여러 신호와 위협 벡터를 추적하며 우선순위를 정해야 함
          + 방어자는 자산을 관리하기 위해 목록을 사용함
          + 목록을 통해 자산을 최신 상태로 유지하고 제한된 신뢰를 가정하며 자원을 격리함
          + 의존성 그래프를 만들기 전에 목록을 먼저 작성해야 함
     * 복잡한 적응 시스템은 구성 요소와 상호 작용을 위한 메시징 버스를 가짐
          + 개별적으로 개미를 잡는 것보다 페로몬 경로를 파괴하는 것이 효과적임
     * 방어자의 역할은 단순한 방어가 아님
          + 사이버 보안은 주 업무가 아닌 부수적인 역할임
          + 공격자는 시스템을 공격하는 것이 유일한 목적임
     * 공격자는 약점을 찾고 한 번만 성공하면 됨
     * 방어자는 모든 것을 동시에 지켜야 함
     * 공격자는 그래프를 사용하지 않음
          + 웹 보안에서는 그래프 사고가 적용되지 않음
          + 침투 테스트 보고서에는 그래프가 아닌 할 일 목록이 포함됨
          + 방어자는 종종 중요하지 않은 일에 시간을 소비함
     * 사이버 보안 회사에서 일한 경험이 있음
          + 많은 사이버 보안 관행이 무의미하다고 느낌
     * 방어는 여러 요소로 구성됨
          + 효과적인 통제 개발, 공격 식별, 사건 대응 등
          + 방어에는 네트워크 그래프를 고려한 건축적 결정이 포함됨
     * 방어의 약한 고리가 전체 강도를 결정함
          + 체크리스트 기반 보안은 인프라 문제를 무시함
          + SBOM을 사용하여 구성 요소 관계를 매핑할 수 있음
     * 네트워크에 침입자를 잡기 위한 허니팟이 필요함
          + 가짜 암호화 자격 증명, 가짜 비밀번호 저장소 등
"
"https://news.hada.io/topic?id=16516","미국 대사, 캐나다인들이 'unhealthy'한 양의 American news 소비","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             미국 대사, 캐나다인들이 'unhealthy'한 양의 American news 소비

    미국 뉴스 소비에 대한 캐나다 대사의 우려

     * 미국 대사의 발언
          + 미국 대사 데이비드 코헨은 캐나다인들이 미국 뉴스를 과도하게 소비하는 것이 ""건강하지 않다""고 언급함
          + 이는 캐나다 정치에 대한 뉴스 소비를 줄이는 결과를 초래함
          + 코헨은 CNN, MSNBC, Fox와 같은 미국 뉴스 채널을 캐나다인들이 많이 시청하는 것을 이상하게 여김
     * 캐나다 내 미국 뉴스 소비 현황
          + 로이터 연구소에 따르면 많은 캐나다인들이 주간 뉴스 소비를 위해 CNN과 뉴욕 타임즈와 같은 미국 매체를 이용함
          + 2018년 뉴욕 타임즈의 외국 독자 중 27%가 캐나다인이었음
          + 2024년 뉴욕 타임즈는 캐나다에서 구독자 수가 증가했다고 발표함

    캐나다의 미국 정치에 대한 집착

     * 캐나다 미디어의 미국 정치 보도
          + CBC는 카말라 해리스 캠페인에 대해 한 달 동안 68개의 기사를 작성함
          + 2020년 CBC는 해리스에 대해 캐나다 정치인 레슬린 루이스보다 500% 더 많은 기사를 작성함
          + CBC는 미국 대선 밤 특별 방송을 진행함
     * CBC의 입장
          + CBC 뉴스 총괄 매니저 브로디 펜론은 미국이 캐나다와 여러 면에서 밀접하게 연결되어 있다고 설명함
          + 예술, 문화, 국가 안보, 경제, 환경 등 다양한 분야에서 두 나라가 긴밀히 연결되어 있음

    편향된 뉴스

     * 코헨 대사의 의견
          + 코헨은 미국 뉴스 채널들이 정치적으로 편향되어 있다고 언급함
          + Fox News는 우파, CNN은 좌파, MSNBC는 좌파 성향을 가짐
          + 미국 언론사들은 이념적 다양성이 부족함
     * 미디어 분석
          + 시러큐스 대학 연구에 따르면 미국 기자 중 3.4%만이 공화당원으로 자신을 묘사함
          + 36.4%는 민주당원으로 자신을 묘사함

    캐나다인의 미국 뉴스 소비에 대한 우려

     * 코헨 대사의 우려
          + 코헨은 캐나다인들이 미국 뉴스 소비로 인해 미국에 대한 불안감을 느낄 수 있다고 언급함
          + 그는 자신의 정신 건강을 위해 미국 정치 뉴스 채널을 의도적으로 피했다고 밝힘

    레바논에 있는 캐나다인

     * 레바논의 캐나다인 현황
          + 레바논에 등록된 캐나다인은 약 23,000명으로, 이는 과거 아프가니스탄, 수단, 아이티에서의 캐나다인 철수 인원의 4배에 달함
          + 이스라엘과 헤즈볼라 간의 갈등이 심화됨에 따라 캐나다 정부는 레바논에 있는 캐나다인들에게 철수를 권고함
     * 철수 계획
          + 캐나다는 레바논에서의 대규모 철수를 준비 중임
          + 과거 레바논 철수 작전에서 15,000명을 철수시킨 바 있음

    GN⁺의 정리

     * 캐나다인들이 미국 뉴스를 과도하게 소비하는 현상에 대한 미국 대사의 우려를 다룸
     * 캐나다 미디어가 미국 정치에 지나치게 집중하는 문제를 지적함
     * 미국 뉴스 채널의 정치적 편향성과 이로 인한 캐나다인들의 불안감에 대해 논의함
     * 레바논에 있는 캐나다인들의 안전 문제와 철수 계획을 설명함
     * 이 기사는 캐나다와 미국 간의 미디어 소비 패턴과 그로 인한 영향을 이해하는 데 도움이 됨

        Hacker News 의견

     * 캐나다에 사는 미국인으로서, 캐나다에 가야 미국 뉴스를 들을 수 있다는 농담을 함
     * 미국인으로서 ""미국 뉴스""를 줄이는 것을 지지함
          + 어렸을 때는 지역 신문, USA Today, Wall Street Journal을 읽으며 정보를 얻었음
          + 저널리즘의 질이 많이 떨어졌음을 느꼈음
     * 다른 사람들은 ""미국 뉴스""가 지역 뉴스를 대체한다고 지적했지만, 실제로는 중요한 세계 사건을 다루지 않고 엔터테인먼트 제품처럼 제작됨
     * 라틴 아메리카에서도 비슷한 문제가 발생하고 있으며, 현지 정치와 관련 없는 문화 전쟁 이슈가 수입되어 실제 문제를 흐리게 함
     * 트뤼도(시니어)의 말을 인용하며, 미국 옆에 사는 것은 코끼리와 함께 자는 것과 같다고 표현함
          + 미국 정치가 캐나다에 큰 영향을 미치지만, 지역 의원에게 불평할 수도 없음
     * 호주에서도 같은 문제가 있으며, 부모님이 Fox News를 보고 선거가 도난당했다고 주장하는 것을 보고 케이블 박스 부모 통제 기능이 부모를 위한 것일 수도 있다고 생각함
     * DNC에서 유명인들이 등장하는 것을 보고, 캐나다나 영국 같은 다른 의회 시스템에서는 비슷한 것이 있는지 궁금해함
          + 미국 정치와 뉴스는 크고 시끄럽고 과장된 것이 특징임
     * 덴마크에서도 2008년부터 미국 정치의 과도한 보도가 문제가 되었음
          + 현재는 미국이 주요 무역 파트너가 되어 덴마크 GDP에 영향을 미침
     * 미국의 패권주의의 예상된 결과로, 많은 문화가 미국에서 수입되면서 미국인처럼 느끼게 됨
          + 미국에서 일어나는 일이 캐나다에서 일어나는 일보다 더 큰 영향을 미침
          + 주변 사람들이 미국 문제와 정치에 집중하면서, 수입된 아이디어로 투표하고 그것을 캐나다 아이디어로 만듦
     * 북동부에 살면서 CBC와 Global을 미국 TV 패키지로 볼 수 있으며, 캐나다 뉴스에서 미국 상황을 보는 것이 흥미로움
"
"https://news.hada.io/topic?id=16527","에어컨: 온/오프 스위치 가격 $1697","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         에어컨: 온/오프 스위치 가격 $1697

  에어컨: $1697의 온/오프 스위치

   고객에게 가장 저렴한 부품이 고장났다고 전체 시스템을 교체하게 하는 것은 매우 수익성이 있을 수 있음. 하지만 이는 나를 짜증나게 했고, 직접 고치기로 결심하게 했음. 많은 Advantage Air 고객에게는 어려울 수 있지만, 최신 태블릿이 오래된 제어 시스템과 작동하지 않는 이유는 소프트웨어 선택에 불과함. 소프트웨어 애플리케이션에 간단한 ""시스템"" 선택기를 추가하면 모두에게 해결책을 제공할 수 있음.

    에어컨 컨트롤러

     * 2019년에 새 집을 지었고, 대형 덕트형 역순환(히트펌프) 에어컨 시스템이 설치됨
     * 시스템은 Daikin 에어컨과 Advantage Air 제어 박스로 구성됨
     * 제어 시스템은 거실 벽에 설치된 저렴한 POE 전원 공급 안드로이드 태블릿으로 작동됨
     * 이 시스템은 온도를 모니터링하고 여러 구역의 온도를 조절할 수 있음
     * 원격 제어 기능도 제공하여 매우 추천할 만한 시스템이었음

    제어 상실

     * 2024년 8월 18일, 보증 기간이 지난 지 약 6개월 후, 태블릿이 ""Google 서비스가 중지되었습니다""라는 메시지를 표시함
     * 이후 태블릿이 부팅되지 않고 ANDROID 로딩 화면에서 멈춤
     * 여러 방법을 시도했지만 태블릿을 복구할 수 없었음

    실망스러운 서비스

     * Advantage Air 지원팀에 연락했으나, 보증 기간이 지났다는 이유로 전체 제어 시스템을 $1245에 교체해야 한다고 설명받음
     * 단순히 태블릿만 교체하면 된다고 주장했으나, 기술이 계속 발전하고 시스템이 호환되지 않는다는 변명만 들음
     * 결국 태블릿과 제어 시스템, 무선 온도 센서까지 모두 교체해야 한다는 견적을 받음. 총 비용은 $1697임

    직접 고치기로 결심

     * 회사를 통해 교체하지 않기로 결심하고 직접 태블릿을 고치거나 다른 시스템을 설치하기로 함
     * 태블릿을 분해하여 숨겨진 USB 포트를 발견했으나, 여러 시도를 해도 인식되지 않음
     * 결국 다른 안드로이드 태블릿을 사용하여 POE 어댑터를 연결하고, 필요한 앱을 설치하여 시스템을 작동시킴

    안드로이드 앱 패치

     * apktool과 JAXE를 사용하여 앱을 디컴파일하고 수정한 후 다시 빌드함
     * 앱을 설치하고 시스템을 성공적으로 작동시킴

    후속 조치

     * Hacker News에서 이 게시글이 논의되었고, 비슷한 문제를 겪고 있는 사람들의 유용한 댓글이 달림

  GN⁺의 정리

     * 이 글은 에어컨 시스템의 단순한 고장으로 인해 전체 시스템을 교체해야 하는 상황에 대한 불만과 직접 해결한 과정을 다룸
     * 안드로이드 앱 패치와 하드웨어 수정 과정을 통해 문제를 해결한 경험을 공유함
     * 비슷한 문제를 겪고 있는 사람들에게 유용한 정보와 해결책을 제공함
     * 이와 유사한 기능을 가진 다른 제품이나 프로젝트로는 Home Assistant와 같은 스마트 홈 자동화 시스템을 추천할 수 있음

        Hacker News 의견

     * 퍼스에 있는 사용자가 동일한 시스템과 문제를 거의 같은 방식으로 해결했음
          + RS422를 사용하고 base64로 인코딩된 AES 키가 포함된 aaservice 바이너리를 사용함
          + esp32 기반의 오픈 소스 컨트롤러 구현을 고려 중이었음
     * 10년 만에 블로그를 부활시켜 이 문제를 작성한 것에 감탄함
          + 분노와 악의가 강력한 동기부여가 됨
     * 작년에 집에 에어컨을 설치했음
          + IR로 제어되는 유닛을 선택하고, AliExpress에서 저렴한 IR 블래스터를 구입해 HomeAssistant에 연결함
          + 저렴한 Lenovo 태블릿을 벽에 설치해 조명/에어컨을 휴대폰 없이 제어할 수 있게 함
          + 이러한 공포 이야기는 자신의 결정을 강화시킴
     * ""스마트 에어컨"" 산업은 큰 소행성으로 멸종되어야 함
          + 현대적인 가변 속도 유닛의 필요성이 크지만, 벤더들은 독점 프로토콜을 사용해 문제를 일으킴
          + TRANE도 비슷한 문제를 겪고 있음
          + 가변 속도 펌프는 짧은 사이클링과 과대 시스템 문제를 해결함
     * 모든 태블릿이 동시에 고장나는 것은 완전히 우연의 일치임
          + 보증 기간이 지난 후에 발생하는 것은 재미있는 우연임
     * 제조업체가 이 문제를 알게 되면 고객을 위한 해결책보다는 해킹을 제한하는 방법을 찾을 것임
          + 더 제한적이고 특이한 하드웨어와 소프트웨어로 이어질 것임
     * 일반 안드로이드 태블릿에서 실행되는 앱에서 ""AA 하드웨어가 아님"" 오류가 발생하는 것은 범죄적임
     * 스마트가 멍청해지는 순간임
          + Nest와 다른 스마트 기기에 대해 걱정이 있음
          + 일반 에어컨에서도 몇 가지 간단한 문제가 수백 달러의 비용을 초래할 수 있음
          + 몇 주 전에 에어컨 블로워 팬이 작동을 멈췄고, 컴프레서는 작동했음
          + 커패시터가 고장난 것을 발견하고 사진을 찍어 교체품을 구입함
          + 교체하는 데 15분 정도 걸렸고, 최소 $400를 절약했음
          + 가전제품 수리는 재미있을 수 있음
     * 회사가 몇 년마다 완벽하게 작동하는 하드웨어를 폐기하는 것은 환경에 큰 낭비임
          + 읽는 것은 재미있었고, 누군가가 그들에게 맞서는 것을 보는 것은 멋졌지만, 이런 일은 정말 화가 남
     * 원래 ezone 태블릿은 Android 6.0을 실행하고 있었고, 삼성 태블릿은 5.0을 실행하고 있었음
          + 문제가 없을 것이라고 생각하고 필요한 앱을 설치하기 시작함
          + 모든 ezone 앱은 Advantage Air 웹사이트와 apkpure 사이트에서 이용 가능함
          + AA 기술 지원 담당자가 apkpure 사이트로 안내했다는 게시물에서 이 사이트를 알게 됨
          + 고객을 신뢰할 수 없는 제3자/해적 APK 재배포자로 리디렉션하는 것은 현실이 풍자를 초월함
"
"https://news.hada.io/topic?id=16441","DOJ, 세입자에게 피해를 주는 Algorithmic Pricing Scheme으로 RealPage 고소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DOJ, 세입자에게 피해를 주는 Algorithmic Pricing Scheme으로 RealPage 고소

법무부, RealPage의 알고리듬 가격 책정 계획으로 미국 임차인 수백만 명에게 피해를 준 혐의로 소송 제기

     * 즉시 발표
          + 공보실

  RealPage의 가격 책정 알고리듬이 반독점법을 위반함

     * 법무부와 노스캐롤라이나, 캘리포니아, 콜로라도, 코네티컷, 미네소타, 오리건, 테네시, 워싱턴 주의 법무장관들이 RealPage Inc.를 상대로 민사 반독점 소송을 제기함
     * RealPage의 불법적인 계획이 임차인에게 경쟁의 혜택을 박탈하고 수백만 명의 미국인에게 피해를 줌
     * 소송은 노스캐롤라이나 중부 지방법원에 제기되었으며, RealPage가 셔먼법 제1조 및 제2조를 위반했다고 주장함

  소송 내용

     * RealPage는 경쟁하는 임대주들과 계약을 맺고, 이들이 비공개 경쟁 민감 정보를 공유하도록 함
     * 이 정보를 바탕으로 RealPage의 알고리듬 가격 책정 소프트웨어가 임대주들에게 가격 책정 및 기타 조건에 대한 권장 사항을 생성함
     * 자유 시장에서는 임대주들이 독립적으로 경쟁하여 임차인을 유치해야 하지만, RealPage의 계획은 이를 방해함
     * RealPage는 이 계획과 방대한 데이터로 상업적 수익 관리 소프트웨어 시장에서 독점을 유지함
     * 소송은 RealPage의 불법 행위를 중단시키고 임차인에게 혜택을 주기 위해 경쟁을 회복시키려 함

  주요 인물들의 발언

     * 메릭 B. 갈랜드 법무장관: ""미국인들이 임대료를 더 많이 지불해야 하는 이유는 회사가 법을 어기는 새로운 방법을 찾았기 때문임""
     * 리사 모나코 부법무장관: ""RealPage는 민감한 데이터를 알고리듬에 입력하여 법을 위반함""
     * 벤자민 C. 마이저 법무차관: ""RealPage의 반경쟁적 행위는 공정한 가격 책정을 방해하고 주거 옵션을 제한함""
     * 조나단 캔터 반독점국장: ""경쟁이 아닌 RealPage가 미국인들이 주택 임대료를 결정하는 것을 방해함""

  RealPage의 내부 문서와 증언

     * RealPage는 소프트웨어가 임대주를 위해 가격을 최대화하는 것을 목표로 함
     * 경쟁을 피하고 전체 산업을 유지하는 것이 더 큰 이익이라고 언급함
     * 경쟁자 데이터를 사용하여 가격 인상을 식별하는 데 도움을 줌
     * RealPage의 알고리듬이 가격 고정을 유도한다고 언급함

  RealPage의 시장 독점

     * RealPage는 상업적 수익 관리 소프트웨어 시장에서 약 80%의 시장 점유율을 가짐
     * 임대주들은 경쟁 민감 데이터를 공유하고, 이를 바탕으로 가격 책정 권장 사항을 받음
     * 이 피드백 루프는 RealPage의 시장 지배력을 강화하고 정직한 기업이 경쟁하기 어렵게 만듦

  GN⁺의 정리

     * 이 기사는 RealPage의 알고리듬 가격 책정 소프트웨어가 어떻게 반독점법을 위반하고 있는지를 다룸
     * 임차인에게 피해를 주는 불법적인 가격 책정 계획을 중단시키기 위해 법무부가 소송을 제기함
     * RealPage의 행위가 시장 경쟁을 방해하고 임대료를 인상시키는 방법을 설명함
     * 이 기사는 기술을 이용한 반경쟁적 행위에 대한 법적 대응의 중요성을 강조함
     * 비슷한 기능을 가진 다른 프로젝트로는 Yardi, AppFolio 등이 있음

        Hacker News 의견

     * RealPage의 알고리즘이 다른 구독자의 데이터를 사용하여 임대료와 기간을 제안하는 것이 가격 담합이라는 의견이 있음
     * RealPage의 부사장은 경쟁보다는 전체 산업의 성공이 더 중요하다고 언급함
     * RealPage는 임대료를 올리기 위한 모든 기회를 활용하는 것을 목표로 함
     * RealPage는 ""자동 수락"" 기능과 가격 고문을 통해 임대인의 준수를 모니터링함
     * ""비공개 가격""과 ""자동 수락"" 및 ""준수""가 RealPage의 법적 문제의 핵심임
     * 경쟁자들이 합법적으로 가격을 조정하려면 공개적으로 가격 신호를 보내야 함
          + 주유소가 서로의 가격을 보고 빠르게 조정하는 방식
          + Ebay/Reverb에서 판매자가 이전 판매 가격 범위를 보여주는 방식
          + Kelly Blue Book이 현재 중고차 시장 가격을 보여주는 방식
          + Zillow가 임대료를 공개적으로 보여주는 방식
     * 플랫폼과 판매자가 비공개로 가격을 공유하고 준수를 모니터링하는 것은 법적 검토를 피하기 어려움
     * 알고리즘 가격 책정이 암묵적으로 담합하는 것은 컴퓨터 과학과 경제학에서 뜨거운 연구 주제임
     * 단순한 온라인 학습 알고리즘이 가격을 조정하도록 훈련하면 가격을 높게 유지하거나 고객을 차례로 확보하는 방법을 배울 수 있음
     * RealPage의 경우, 소프트웨어 외에도 임대료를 낮추지 않도록 임대인에게 지시하는 이메일과 문서가 문제임
     * Orlando에서 모든 아파트 단지가 같은 소프트웨어를 사용하고 있으며, 임대료가 10년 동안 300% 상승했음
     * RealPage가 모든 가격과 재고 데이터를 공유하여 가격을 결정했기 때문에 임대 부동산이 서로 경쟁하지 않았음
     * 많은 시스템이 경쟁자의 데이터를 사용하여 가격을 책정함
     * RealPage를 사용하지 않는 인근 부동산이 있어도 임대료가 상승할 수 있음
     * 가격 담합인지 확신할 수 없으며, 대부분의 임대인은 Zillow나 Craigslist를 사용함
     * 임대 부동산의 가격을 인근 아파트와 비교하여 책정함
     * 시장에서 우연히 가격 담합이 발생할 수 있음
     * 법무부가 기업 범죄에 대해 부드럽게 대응하고 있음
     * Sherman Act 위반이지만 법무부는 민사 소송만 제기함
     * 선거 기간 동안 이 문제를 공론화할 가치가 있음
     * FBI의 방법을 참고하여 소프트웨어를 허니팟으로 사용하고 사용자에게 소송을 제기해야 함
     * 소규모 임대인은 Zillow나 Craigslist를 사용하여 시장 가격을 조사함
     * RealPage가 시장에 큰 영향을 미치지 않을 것이라고 의심함
     * 주택 시장은 재고가 제한적이며, 먼저 오는 사람이 먼저 서비스를 받음
     * RealPage가 고객에게 최고의 수익을 제공한다고 광고하는 것은 주식 계좌가 최적의 판매 가격을 알려주는 것과 다르지 않음
     * 법무부가 잠재적인 카르텔을 해체하는 것을 환영하지만, 임대 시장에 큰 변화가 있을 것으로 기대하지 않음
     * 경쟁 시장을 촉진하기 위해 정부가 더 많은 주택 재고를 생산하는 주택 정책을 장려해야 함
     * 임대 가격 책정의 주요 문제는 공정 주택법에 의해 가격 담합이 강요된다는 것임
     * 임대 계약이 광고된 가격으로 제공되므로 협상이 불가능함
     * 스마트한 임대인은 소프트웨어 없이도 가격을 고정할 수 있음
     * 시스템을 공격하는 것이 쉬운 방법이며, 더 공격적인 세입자 협상을 금지하는 시스템을 공격하는 것이 어려운 문제임
"
"https://news.hada.io/topic?id=16444",""Hello" 금지, "Quick Call" 금지, 안건 없는 회의 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ""Hello"" 금지, ""Quick Call"" 금지, 안건 없는 회의 금지

  ""Hello"" 없이 대화 시작하기

     * ""Hello""로 대화를 시작하는 것은 비효율적임
     * 질문을 바로 작성하면 더 빠르게 답변을 받을 수 있음
     * 기술 지원을 요청할 때는 문제를 구체적으로 설명하는 것이 중요함
     * 예시:
         1. ""Hi"", ""Hello""는 최악의 방법임
         2. ""Hi, frobnicate 함수가 작동하지 않음""은 불충분함
         3. ""Hi, frobnicate 함수가 Error: missing argument 'count' 오류를 발생시킴""은 더 나은 방법임
         4. ""Hi, frobnicate 함수가 Error: missing argument 'count' 오류를 발생시킴. 전체 스택 트레이스는 다음과 같음: (...)""는 완벽한 질문임

  ""Quick call"" 요청하지 않기

     * ""Quick call"" 요청은 비효율적임
     * 전화는 채팅보다 더 방해가 됨
     * 메시지로 해결할 수 있는 경우가 많음
     * 문제를 설명하면서 스스로 해결할 수 있음
     * 전화는 일시적이지만, 메시지는 영구적임
     * ""Quick call?"" 대신 문제를 구체적으로 설명하는 것이 좋음

  ""No agenda"" 회의 피하기

     * 의제가 없는 회의는 비효율적임
     * 의제가 있으면 회의 준비가 가능함
     * 의제를 통해 회의의 목적과 체크리스트를 제공할 수 있음
     * 의제를 통해 회의에 필요한 사람만 참석할 수 있음
     * 기술적인 질문은 미리 작성하여 보내는 것이 좋음

  맥락이 중요함

     * 원격 근무 시 도움을 요청할 때는 문제를 구체적으로 설명해야 함
     * 전화보다는 글로 문제를 설명하는 것이 좋음
     * 회의를 계획할 때는 명확한 의제를 제공해야 함
     * 이러한 방법을 통해 온라인 상호작용이 더 효율적이 되고 문제를 더 빨리 해결할 수 있음


GN⁺의 정리

     * 원격 근무에서 효율적인 커뮤니케이션 방법을 설명함
     * ""Hello"" 없이 질문을 바로 작성하는 것이 중요함
     * ""Quick call"" 대신 문제를 구체적으로 설명하는 것이 좋음
     * 의제가 없는 회의는 피하고, 명확한 의제를 제공해야 함
     * 이러한 방법을 통해 온라인 상호작용이 더 효율적이 되고 문제를 더 빨리 해결할 수 있음

     Don't worry, I'm not mad at you.

   필자가 화가 나 있는 것처럼 보입니다. 본인이 근무하는 회사 안에서 합의해서 실천하고 말 정도의 일 같은데 이걸 왜 블로그에 올려야 했을까요

   너무 당연한 이야기들이 써있다고 생각했는데 동의 안하시는 분들이 꽤 있군요.. 콜이든, 회의 준비는 주최자가 준비하는것은 당연하고, 너무 막연해서 준비를 못했다면 사전에 양해를 구하고 미팅을 시작하는게 맞습니다.

   기록 기반 의사소통을 그나마 확대 적용할 수 있는 게 IT업계이긴 하지만 조직문화나 관성때문에 여전히 과도기에 있는 것 같습니다

   공감합니다.
     * 뭐가 되었건 동료의 기분을 상하게 하는 것은 최악의 방법임
     * 의제가 있다고 회의 준비는 가능하지만 그렇다고 준비를 하는 사람은 드뭄
     * 현업에선 의제를 통해 회의에 필요한 사람만 구별하기 어려운 문제가 대부분임
     * 모든 것이 상호신뢰가 없으면 다 무쓸모임.

   알만한 회사부터 작은 회사까지 다 근무해봤고
   머저리부터 천재들과도 일해봤는데 인간이 일하는데는 다 비슷함.
   내가 똑바로 잘 하면 hi를 xi를 하건 아무 문제 없음.

   대부분 집단의 가장 큰 문제는,
   모자란 사람들이 자신들이 얼마나 모자란지 모른 채로 스스로 대단한 것을 하고 있다고 착각하는 것임.
   좀 더 나아가면 자신이 하고 있는 대단한 일을 마땅이 존중받아야한다는 과잉에고를 형성하는 지경에 도착함. 그런 곳에서는 이런 글이 중요한 지침이 될 수도 있을 것임. 하지만 결론적으로 뭘해도 해결은 잘 안될 것임. 어차피 인간의 문제이지 방법의 문제가 아니기 때문임.

   그래서 이런 글 쓰는 애들부터 걸러야 함.

   한국에서는 하나도 도움안되는 조언.
   이것들을 다 지키려면 한국에서 사회생활 포기하고 외국으로 가서 일하는 것응 추천함.

        Hacker News 의견

     * 원격 근무 시 물리적 사무실에서의 우연한 만남을 잃게 됨
          + 인위적으로 소셜 콜을 스케줄링할 수 있지만 실제 사무실과는 비교할 수 없음
          + 빠른 콜을 거부하면 더 고립될 수 있음
          + 콜은 방해가 될 수 있지만 아이디어를 브레인스토밍하는 데 유용할 수 있음
     * 모든 빠른 질문을 완전한 회의로 바꾸면 조직이 매우 관료적이게 됨
          + 사람들이 전문가에게 문의하는 대신 추측하기 시작할 수 있음
          + 회사는 개인에게 100% 맞출 수 없음
     * 저자의 의견에 대체로 동의하지만 일부 포인트는 과장되어 전체 주장을 약화시킴
          + 잘못된 코드 디버깅에 시간을 낭비하는 것은 자신의 잘못일 수 있음
          + IT 지원 요청을 채팅 대신 티켓 시스템으로 처리해야 함
          + 이미 문제를 알고 있는 경우, 자세한 설명은 불필요함
     * 생산성을 과도하게 최적화하는 것은 동료와의 접근성을 희생시키는 것일 수 있음
     * 대기업에서는 회의 아젠다와 회의 후 메모가 중요함
          + 회의 준비가 안 된 사람은 다른 사람의 시간을 낭비할 수 있음
          + 회의에서 결정된 사항을 기록하지 않으면 다른 사람의 시간을 낭비하게 됨
     * 스택 트레이스를 생략한 사람은 시간을 낭비하게 할 수 있음
          + 혼란스러운 질문을 하는 사람은 혼란스러운 상태임
          + 상황을 이해할 때까지 질문하는 것이 중요함
     * 일부 의견에 공감하지만, 톤이 불쾌함
          + 다른 커뮤니케이션 스타일을 '실수'라고 부르는 것은 매력적이지 않음
     * 콜이 채팅 메시지보다 더 방해된다는 의견에 동의하지 않음
          + 콜은 시작과 끝이 명확함
          + 비동기 채팅은 지속적으로 신경을 쓰게 만듦
     * 생산성에 대해 글을 쓸 시간이 있는 사람들에 놀라움을 느낌
     * Slack에서 ""Hello""나 ""Hi Joe""라고만 쓰고 기다리는 사람들을 이해할 수 없음

     혼란스러운 질문을 하는 사람은 혼란스러운 상태임
     상황을 이해할 때까지 질문하는 것이 중요함

   이 내용하고

     콜은 시작과 끝이 명확함
     비동기 채팅은 지속적으로 신경을 쓰게 만듦

   이 내용이 공감되네요. 콜을 좋아하지는 않지만.

   저도 인정하고싶지 않은 마음과 동의하는 마음이 같이 드네요..
"
"https://news.hada.io/topic?id=16525","Skip – 단일 Swift 코드베이스로 네이티브 iOS 및 Android 앱 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Skip – 단일 Swift 코드베이스로 네이티브 iOS 및 Android 앱 개발

     * Skip은 Swift 앱 개발을 Android로 확장할 수 있게 해주는 도구
     * Swift와 Xcode를 사용하여 iOS와 Android에서 모두 네이티브 앱을 개발할 수 있음
     * Skip의 작동 방식
          + Xcode에서 Swift 및 SwiftUI 앱을 개발하면, Skip Xcode 플러그인이 이를 Kotlin 및 Jetpack Compose로 변환
          + 네이티브 성능과 사용자 인터페이스를 유지하면서 두 플랫폼에서 라이브러리나 전체 앱을 개발할 수 있음

  Skip 앱의 장점

    진정한 네이티브

     * Skip 앱은 단순히 ""네이티브처럼 보이는"" 것이 아니라 실제로 네이티브임
     * iOS에서는 Swift와 SwiftUI, Android에서는 Kotlin과 Compose를 사용함

    완전한 투명성

     * Skip을 사용하면 앱의 모든 부분이 개발자에게 노출됨
     * Swift 코드를 직접 Kotlin 소스 코드로 변환하여 검사하고 커스터마이징할 수 있음

    경량성

     * SkipZero를 사용하면 iOS 앱은 Skip 프레임워크에 의존하지 않음
     * Android 앱은 몇 가지 Skip 오픈 소스 라이브러리만 필요함

    메모리 효율성

     * 추가적인 관리 런타임이 없기 때문에 Skip 앱은 두 플랫폼에서 가능한 한 효율적임
     * iOS에서는 베어 메탈, Android에서는 ART 바이트코드를 사용함

    이상적인 IDE

     * Skip의 IDE는 iOS 개발을 위한 최고의 환경인 Xcode임
     * Android 커스터마이징을 위해 생성된 코드를 Android Studio에서 직접 열 수 있음

    완벽한 통합

     * Skip은 표준 Kotlin과 Compose를 생성하므로 Android 라이브러리와의 통합이 쉬움
     * 다른 Kotlin 및 Java 코드를 직접 호출할 수 있음

    오픈 소스 기반

     * Skip의 트랜스파일러는 이야기의 절반에 불과함
     * iOS 앱 개발을 뒷받침하는 Foundation 및 SwiftUI와 같은 프레임워크가 Skip의 무료 오픈 소스 구현을 통해 Android에서도 사용 가능함

    CI 친화적

     * Skip은 단위 테스트도 변환함
     * 로컬 또는 원격으로 테스트를 실행하여 플랫폼 간 동일한 로직 성능을 보장할 수 있음

    탈출 가능성

     * Swift 입력과 Kotlin 출력 모두 개발자의 소유임
     * Skip 트랜스파일러에 지속적으로 의존하지 않아도 됨

  GN⁺의 정리

     * Skip은 Swift 앱을 Android로 확장할 수 있게 해주는 도구로, 두 플랫폼에서 네이티브 성능과 사용자 인터페이스를 유지할 수 있음
     * Xcode와 Android Studio를 모두 활용하여 개발자가 더 효율적으로 작업할 수 있게 함
     * 오픈 소스 기반으로 투명성과 커스터마이징 가능성을 제공함
     * CI 친화적이며, 테스트를 통해 플랫폼 간 동일한 성능을 보장할 수 있음
     * 유사한 기능을 제공하는 프로젝트로는 Kotlin Multiplatform이 있음

   코드 난독화도 지원하게된다면 되게 좋을거같네요

   오호 흥미롭네요. 얼마나 어떻게 처리되는지 아직 전혀 모르겠지만 무모하면서도 재밌는 시도 같습니다

        Hacker News 의견

     * 개인 앱을 Android로 이식하려는 경험 공유
          + SwiftUI로 iOS 앱을 개발 중이며, Android 버전으로 이식하려고 React Native, Ionic, Ignite 등을 시도했으나 어려움이 있었음
          + Skip을 사용해보니 Swift 문맥을 유지하면서 하나의 언어로 앱을 작성할 수 있어 매우 만족스러움
          + 플랫폼별 코드 작성이 쉬우며, Android를 배우지 않고도 빠르게 앱을 실행할 수 있음
          + 전체 앱을 Skip으로 개발해 양쪽 앱 스토어에 배포할 계획임
     * Skip에 대한 우려 사항
          + 오픈 소스 라이선스에 대한 의문 (GPL vs MIT)
          + 패키지 관리와 iOS/Android 분기 처리 방법에 대한 궁금증
          + Apple 서비스 API가 Android에서 어떻게 처리되는지에 대한 의문
          + 광고 및 인앱 결제 예제의 필요성
     * Skip의 의존성 관리에 대한 질문
          + Swift PM 패키지를 Android 프로젝트에서 투명하게 사용할 수 있는지에 대한 의문
          + Kotlin이 Swift 라이브러리를 투명하게 호출할 수 있는지 궁금함
     * Skip의 타겟 시장에 대한 의견
          + 주로 iOS 앱을 Android로 변환하려는 미국/유럽 기업을 대상으로 하는 제품으로 보임
          + Android가 주류인 다른 지역에서는 Flutter, React Native, Kotlin MP 같은 더 나은 프레임워크가 존재함
          + Skip의 트랜스파일링 문제와 유지보수의 어려움 지적
     * ChatGPT와 Claude를 사용한 코드 변환 경험
          + SwiftUI 코드를 Kotlin, Jetpack Compose, Material3로 변환하는 데 성공적이었음
          + 생성된 코드가 거의 즉시 작동했으며, 스타일링/테마 수정만 필요했음
     * Skip 사용 경험 공유
          + 몇 달간 사용해본 결과, 학습 곡선이 있지만 크로스 플랫폼 문제를 완전히 해결함
     * Skip의 문서와 트랜스파일링의 한계
          + SwiftUI나 다른 핵심 라이브러리 사용 시 트랜스파일링의 한계가 있는지 궁금함
          + Xamarin 개발의 어려움과 유사한 문제 발생 가능성
     * Skip의 프레임워크 제한
          + 대부분의 iOS 앱이 Apple 플랫폼 프레임워크를 사용하므로 Skip의 최소 구현이 제한적일 수 있음
          + StoreKit, WebKit, SafariServices, UserNotifications, CryptoKit 등의 현재 구현이 없음
     * 기존 앱과 Skip 통합의 어려움
          + 기존 SwiftUI + UIKit 앱과 Skip 통합이 어려운지에 대한 질문
          + 작은 또는 중간 크기의 앱이 Skip으로 마이그레이션된 예제 필요성
     * Skip의 성능 문제 해결
          + 크로스 플랫폼 프레임워크의 성능 문제를 해결하는 데 큰 도움이 됨
"
"https://news.hada.io/topic?id=16524","커맨드 라인 살인사건 - 텍스트 더미에서 범인을 찾아라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     커맨드 라인 살인사건 - 텍스트 더미에서 범인을 찾아라

   준비된 텍스트 파일 사이에서 터미널 명령어들을 이용해 단서를 찾고, 범인을 찾아내는 단순한 게임입니다.

   볼륨이 크진 않지만, 소소하게 재밌었어요.

   추신. instruction 을 꼼꼼히 읽어야 합니다.
"
"https://news.hada.io/topic?id=16512","디퓨전 모델은 실시간 게임 엔진임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           디퓨전 모델은 실시간 게임 엔진임

Diffusion Models Are Real-Time Game Engines

     * GameNGen: 신경 모델로 구동되는 최초의 게임 엔진으로, 복잡한 환경과의 실시간 상호작용을 고품질로 제공함
     * DOOM 시뮬레이션: 단일 TPU에서 초당 20프레임 이상으로 고전 게임 DOOM을 상호작용적으로 시뮬레이션할 수 있음
     * PSNR: 다음 프레임 예측에서 29.4 PSNR을 달성, 이는 손실 JPEG 압축과 유사함
     * 인간 평가자: 인간 평가자가 게임 클립과 시뮬레이션 클립을 구별하는 데 있어 무작위 추측보다 약간 나은 수준임

  전체 게임 플레이 비디오

    에이전트 플레이를 통한 데이터 수집

     * 자동 RL 에이전트: 대규모 인간 게임 플레이 데이터를 수집할 수 없기 때문에, 첫 번째 단계로 자동 RL 에이전트를 훈련시켜 게임을 플레이하게 하고, 이 훈련 에피소드의 행동과 관찰을 기록하여 생성 모델의 훈련 데이터로 사용함

    생성적 확산 모델 훈련

     * Stable Diffusion v1.4: 이전 행동과 관찰(프레임) 시퀀스를 조건으로 하는 작은 확산 모델을 재사용함
     * 가우시안 노이즈 추가: 훈련 중 인코딩된 프레임에 가우시안 노이즈를 추가하여 컨텍스트 프레임을 손상시킴으로써, 네트워크가 이전 프레임에서 샘플링된 정보를 수정할 수 있도록 함. 이는 긴 시간 동안 시각적 안정성을 유지하는 데 중요함

    잠재 디코더 미세 조정

     * Stable Diffusion v1.4의 사전 훈련된 오토인코더: 8x8 픽셀 패치를 4개의 잠재 채널로 압축하는데, 이는 게임 프레임을 예측할 때 의미 있는 아티팩트를 초래함. 특히 작은 디테일과 하단 바 HUD에 영향을 미침
     * 디코더 훈련: 이미지 품질을 향상시키기 위해, 목표 프레임 픽셀에 대해 MSE 손실을 계산하여 잠재 오토인코더의 디코더만 훈련함

  GN⁺의 정리

     * GameNGen은 신경 모델을 사용하여 실시간으로 복잡한 게임 환경과 상호작용할 수 있는 최초의 게임 엔진임
     * DOOM 시뮬레이션을 통해 높은 품질의 프레임 예측을 제공하며, 인간 평가자가 실제 게임과 시뮬레이션을 구별하기 어려울 정도로 정교함
     * Stable Diffusion v1.4와 같은 기존 모델을 재사용하여 효율성을 높였으며, 가우시안 노이즈 추가와 같은 기법을 통해 시각적 안정성을 유지함
     * 잠재 디코더 미세 조정을 통해 이미지 품질을 개선하여 게임 프레임의 디테일을 보존함

        Hacker News 의견

     * Google의 SD 1.4를 사용한 확산 모델이 예상보다 더 많은 원인, 결과, 순서를 포함하고 있음
          + 무한 훈련 데이터를 얻기 위해 에이전트가 Doom을 플레이하게 함
          + 소스 프레임에 가우시안 노이즈를 추가하고 에이전트가 순차 프레임을 '수정'하도록 보상함
          + 모델이 오류 수정 및 안정성을 유지하도록 가르치는 것이 중요함
          + 이 모델을 '사진 실사' 또는 레이 트레이싱 스타일로 미세 조정할 수 있을지 궁금함
     * 이 논문은 실시간 사용자 입력을 받아 출력을 조정하는 시스템을 설명하지 않음
          + 에이전트가 Doom을 플레이한 대규모 데이터 세트로 훈련됨
          + 사용자 입력이 실시간으로 시뮬레이션에 반영되지 않음
          + 논문에서 실시간 사용자 게임 플레이에 대한 설명이 생략됨
     * 이 모델이 20fps로 렌더링할 수 있다는 것이 놀라움
          + 확산 모델과 RNN의 교차점처럼 보임
          + 모델이 많이 플레이한 게임을 꿈꾸는 것과 유사함
          + 인간도 다음 순간을 예측하는 기계일 수 있음
     * Doom을 모든 것에 실행하려는 시도가 계속됨
          + 이 모델은 가장 높은 하드웨어 요구 사항을 가진 Doom임
          + 하드웨어 사양의 양 끝에 Doom이 위치함
     * 무의미하다고 지적하는 댓글을 읽는 것이 재미있음
          + 모든 것이 이익을 위해 만들어질 필요는 없음
          + 학습 경험, 도전, 호기심을 위해 무언가를 만드는 것도 중요함
          + 즐거움을 느끼는 시간은 결코 낭비가 아님
     * Doom 시스템 요구 사항과 Stable Diffusion v1 비교
          + Doom: 4MB RAM, 12MB 디스크 공간
          + Stable Diffusion v1: 860M UNet 및 CLIP ViT-L/14, 체크포인트 크기 4.27GB, TPU-v5e에서 실행
          + 모델이 게임을 수백 번 기억할 수 있는 용량을 가졌음에도 불구하고 최적화의 여지가 많음
          + 게임을 충분히 자동화하면 게임을 복제할 수 있음
     * 게임 엔진의 역할은 세계를 렌더링하는 것임
          + ""이 문은 파란 키가 필요함""이라는 메시지가 사용자에게 파란 키를 제공하지 않음
          + 게임 엔진은 새로운 게임을 만들고 기존 게임의 규칙을 실시간으로 수정할 수 있음
          + 확산 모델은 게임 엔진이 아님
     * 텍스트 조건이 제공되지 않았지만, 텍스트 프롬프트만으로 새로운 게임을 만드는 것이 가능할 수 있음
          + RL을 사용하여 Doom의 모양과 작동 방식을 학습함
          + 무한한 상태를 가진 오픈 월드 게임을 시뮬레이션하는 것은 어려울 것임
"
"https://news.hada.io/topic?id=16459","HN 질문: 2024년 8월에 진행 중인 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN 질문: 2024년 8월에 진행 중인 프로젝트

     * 무엇을 작업하고 있습니까? 새로운 아이디어가 있습니까?

새로운 프로젝트

     * 현재 작업 중인 프로젝트에 대해 설명
     * 새로운 아이디어나 계획에 대해 논의

아이디어 발전

     * 아이디어를 구체화하는 과정
     * 팀원들과의 협업 방법

도전 과제

     * 프로젝트에서 직면한 문제점
     * 문제 해결을 위한 전략

향후 계획

     * 프로젝트의 다음 단계
     * 장기적인 목표

GN⁺의 정리

     * 이 기사는 새로운 프로젝트와 아이디어에 대한 논의를 다루고 있음
     * 아이디어를 구체화하고 팀과 협업하는 방법을 설명함
     * 프로젝트에서 직면한 도전 과제와 해결 전략을 제시함
     * 향후 계획과 목표에 대해 논의함
     * 이 기사는 프로젝트 관리와 아이디어 발전에 관심 있는 사람들에게 유용할 것임
"
"https://news.hada.io/topic?id=16458","당신은 멍청하지 않다, 단지 선행 지식이 부족할 뿐이다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     당신은 멍청하지 않다, 단지 선행 지식이 부족할 뿐이다

     * 어릴 때부터 나는 수학을 이해하기에는 ""너무 멍청하다""고 생각했음
     * 일부 아이들에게는 수학이 쉬웠지만, 나에겐 고통스러울 정도로 매우 어려웠음
     * 내가 똑똑하다고 믿지만... 나는 그렇게 똑똑하지 않다는 사실을 끊임없이 상기시켜줬음
     * 최근에 150일 동안 수학을 배우면서 깨달은 점: 문제는 능력 부족이 아니라 선행 지식 부족 때문이었음
          + 레벨 1로 Elden Ring 보스에 도전하는 것과 같음
          + 영화 중간에 들어가면 시작 부분을 놓쳐서 줄거리를 이해할 수 없는 것과 마찬가지
     * 수학, CS 등 복잡한 과목을 학습할 때도 마찬가지
     * 이해력의 격차는 능력 부족이 아니라 선행 지식(prerequisite knowledge)의 차이에서 비롯된 것
     * 다시 한번 상기하자면 ""당신은 멍청하지 않음, 단지 선행 지식이 부족할 뿐임""

기초부터 다시 시작하기

     * 이 깨달음을 바탕으로 수학 실력을 기초부터 재구축하기로 결심
     * 과거에 간과하거나 잘못 이해했던 기본 개념들을 다시 살펴봄
     * 더 나은 학습 방법을 선택하고 열심히 연습함
     * 이 과정이 느리고 때로는 겸손해지는 경험이었지만 필요했음
     * 각 기초 개념을 마스터할 때마다 더 복잡한 이론과 문제를 위한 토대가 마련됨

내가 이제 똑똑해졌는가?

     * 아직 ""그렇게"" 똑똑해지지는 않았음
     * 여전히 ""멍청하다""고 생각하지만 천천히 발전하고 있음

GN⁺의 정리

     * 이 글은 많은 사람들이 수학이나 다른 어려운 주제를 학습할 때 겪는 좌절감을 잘 대변하고 있음
     * 선행 지식의 중요성을 강조함으로써, 학습자들에게 희망과 동기를 부여할 수 있음
     * 교육 시스템에서 학생들의 기초 지식 수준을 더 잘 파악하고 보완하는 방법을 고민해볼 필요가 있음
     * 이러한 접근 방식은 수학뿐만 아니라 프로그래밍, 과학 등 다른 복잡한 분야의 학습에도 적용될 수 있음
     * 자신의 능력을 의심하기보다는 부족한 부분을 찾아 채워나가는 자세가 중요함을 상기시켜줌

   제가 대학가서 느낀건
   멍청하다는 거보다 특정분야에 천재가 있구나 내가 절대 못이기겠구나. 라고 깨닳은 것입니다.

        Hacker News 의견

     * 전제 조건을 충족하는 데 많은 시간과 노력이 필요함
          + 대학에서 좋은 학습 습관 없이 공부하는 것이 어려웠음
          + 신체적, 정신적 건강 문제로 새로운 것을 배우는 것이 어려움
          + 다른 사람들이 어떻게 성공하는지 이해하기 어려움
          + 일부 사람들은 특별한 능력을 가지고 있는 것 같음
     * 수학을 기초부터 잘 이해하는 것이 큰 장점이었음
          + 많은 사람들이 열심히 노력하면 같은 수준의 이해를 얻을 수 있었을 것임
          + 우수성은 작은 장점들이 쌓여서 이루어짐
     * 고급 수학이나 연구에서 특별한 것이 없음
          + 문제 해결은 퍼즐 게임과 비슷함
          + 고급 수학이나 AI 연구도 결국은 개념을 반복적으로 적용하는 것임
     * 수학을 배우고 싶어하는 성인들과 일하는 튜터임
          + 수학적 재능이 있지만, 지식이 부족한 경우가 많음
          + 수학을 좋아하는 사람들은 충분한 시간과 동기부여가 있으면 많은 것을 배울 수 있음
     * 프로그래밍을 가르칠 때 필요한 사전 지식을 명확히 해야 함
          + 운영 체제와 하드웨어 상호작용 같은 기본 개념이 필요함
     * 사전 지식은 연습의 다른 표현임
          + 연습을 통해 기술을 향상시킬 수 있음
          + 많은 수학 지식을 가지고 있어도 여전히 어리석을 수 있음
     * 대부분의 사람들은 평균적인 지능을 가짐
          + 지능이 낮다고 느끼는 것은 자원 부족, 배고픔, 정신적 산만, 질병, 동기부여 부족 등의 다른 요인 때문임
     * 프로그래밍을 배우는 것은 계단을 오르는 것과 같음
          + 단계를 건너뛸 수 없음을 이해해야 함
     * 컴퓨터 과학보다 컴퓨터 공학을 선호함
          + 많은 추상화가 포함되어 있어 기초를 이해하지 못함
          + 엘론 머스크가 언급한 'First Principle'이 중요함
          + 수학에서 리처드 파인만이 4페이지로 수학을 설명한 것이 좋은 예임
     * 복잡한 문제를 분석적으로 분해하는 것이 중요함
          + 상위에서 하위로 접근하여 미지의 것을 알려진 것으로 바꾸는 것이 더 빠름
"
"https://news.hada.io/topic?id=16505","1,000만 원으로 스마트스토어 인수, 개발자에서 사장으로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    1,000만 원으로 스마트스토어 인수, 개발자에서 사장으로

     * 케이스 스터디: 1,000만 원에 스마트스토어 인수 사례
     * 초마이크로 스마트스토어 양도양수 후기
     * 인수의 흐름
          + 매물 탐색: 인수 비용 대비 매출로 필터링
          + 리스크와 잠재성 분석: 제품과 시장의 하자 및 업사이드 파악.
          + 결정 요소: 주력 상품(기능성 원단 레깅스)의 브랜딩을 통한 성장 가능성
     * 결론:
          + 매물의 9할은 쓰레기 같은 매물.
          + 매물 선택 시 리스크 관리와 잠재력 평가가 중요.
          + ""단순한 관리만 해도 월 200"" 같은 사업체는 없음.
"
"https://news.hada.io/topic?id=16464","Anthropic Claude 3.5의 iCalendar 파일 생성 기능 활용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Anthropic Claude 3.5의 iCalendar 파일 생성 기능 활용

     * 최근에 이미지로 정리된 재즈 피아노 연습 스케줄 표를 받음
     * Claude에게 녹색으로 표시된 날짜를 추출해달라고 요청함
     * 2024년 9월 13일부터 2025년 5월 23일까지 녹색으로 표시된 13개의 금요일 날짜를 정확하게 추출해줌
     * 해당 날짜는 2024년 9월 10일 화요일부터 시작하는 격주 금요일 레슨 날짜임

ICS 캘린더 파일 생성하기

     * 추출된 날짜를 기반으로 태평양 시간 오후 2시에 ""Jazz Piano Lesson""이라는 제목의 일정을 만들어달라고 요청함
     * Claude가 ICS(iCalendar) 파일 형식으로 캘린더 일정을 생성해줌:
          + 각 일정의 제목은 ""Jazz Piano Lesson""으로 지정됨
          + 각 날짜의 태평양 시간 오후 2시로 일정이 설정되어 있음
          + 각 일정은 1시간 동안 진행되도록 설정됨
          + 시간대는 UTC로 적절히 조정됨
          + 각 일정마다 고유 식별자(UID)가 제공됨
     * ICS 파일 사용 방법:
         1. 결과물의 내용을 복사
         2. 새 텍스트 파일에 붙여넣기
         3. 파일을 .ics 확장자로 저장(예: ""jazz_piano_lessons.ics"")
         4. 이 파일을 원하는 캘린더 애플리케이션으로 가져오기
     * 대부분의 캘린더 애플리케이션에서 이 파일을 읽고 적절한 반복 일정을 만들 수 있을 것임

Google 캘린더로 가져오기

     * calendar.google.com에서 생성된 ICS 파일을 가져온 결과, 일정이 완벽하게 등록됨
     * Google 캘린더로 ICS 파일을 가져오려면 캘린더 설정으로 이동한 다음 가져오기/내보내기로 이동하면 됨
     * 이 작업이 얼마나 쉬운지 놀라움

ChatGPT와 비교

     * ChatGPT에게 동일한 작업을 시도해봄
     * 이미지에서 날짜는 식별했지만 .ics 파일을 만들 수 없다고 함
     * 대신 Python 코드를 제공하여 ICS 파일을 생성하도록 안내함
     * 나중에 대화로 돌아가서 "".ics 파일의 내용만 보여달라""고 하니 해당 내용을 제공해줌

GN+의 의견

     * 이 기사는 AI 기술을 활용하여 이미지에서 텍스트를 추출하고, 추출된 정보를 기반으로 ICS 캘린더 파일을 자동 생성하는 흥미로운 사례를 소개하고 있음. 이는 일상 생활에서 AI가 어떻게 활용될 수 있는지를 보여주는 좋은 예시임.
     * 이러한 기술은 단순 반복 작업을 자동화하여 사용자의 시간과 노력을 절약해줄 수 있음. 특히 일정 관리와 같이 번거로운 작업을 간편하게 처리할 수 있어 생산성 향상에 도움이 될 것으로 보임.
     * 다만 AI 모델의 정확도와 신뢰성이 충분히 검증되어야 할 것임. 잘못된 정보 추출로 인한 일정 오류 등의 문제가 발생할 수 있기 때문임. 또한 개인정보 보호 측면에서도 주의가 필요할 것으로 보임.
     * 유사한 기능을 제공하는 제품이나 서비스로는 Google Lens, Adobe Acrobat의 Scan & OCR 기능, Evernote의 문서 스캔 기능 등이 있음. 이들은 이미지에서 텍스트를 추출하는 데 특화되어 있으나, 추출된 정보를 기반으로 캘린더 일정을 자동 생성하는 기능은 제공하지 않음.
     * 이 기술을 도입할 때는 AI 모델의 성능과 한계를 잘 이해하고, 추출된 정보를 검토 및 확인하는 과정이 필요할 것임. 또한 개인정보가 포함된 이미지를 다룰 때는 보안에 각별히 유의해야 함. 이러한 점들을 고려한다면 AI를 활용한 업무 자동화가 우리 삶에 긍정적인 변화를 가져다 줄 것으로 기대됨.

        Hacker News 의견

     * Claude를 사용할 때 결과를 항상 이중 확인해야 함
          + 99.9%는 정확하지만 1~2개의 기록이 틀릴 수 있음
          + LLM이 긴 목록이나 표에서 약간의 오류를 범할 수 있음
          + 신뢰하되 검증해야 함
          + ""기계 검증 가능""한 답변이 필요할 경우, LLM에게 Python 검증기를 작성하도록 요청할 수 있음
     * ChatGPT를 사용하여 PDF 파일에서 유용한 날짜, 시간, 댓글을 추출한 경험 공유
          + ics 파일 형식의 내용을 코드 출력으로 생성하도록 요청함
          + 코드 인터프리터를 사용하여 파일에 내용을 저장하고 .ics 확장자로 저장하도록 요청함
          + gcal 앱을 통해 파일을 다운로드하고 약속을 가져올 수 있었음
          + 코드 인터프리터가 ics 파일을 ""생성""할 수 없다는 주장은 Python 환경에 특정 라이브러리가 없기 때문임
     * 많은 학교와 고용주가 여전히 PDF 형식으로 캘린더를 게시함
          + 캘린더 앱에 가져올 수 있는 형식으로 만들기보다는 브랜딩과 시각적 형식에 더 많은 시간을 투자함
          + 문서를 읽고 간단한 표로 변환하는 2단계 프로세스를 제안함
               o 날짜, 시간(시간대 포함), 장소, URL, 메모, 반복을 표로 정리함
               o 이 표를 읽고 google/ical/ics 파일이나 링크를 생성함
     * ChatGPT-4를 사용하여 영화 이름 목록을 txt 파일로 제공하고 각 영화의 출시일을 반환받은 경험 공유
          + iCal 파일로 변환하여 영화 출시일을 매년 기념일 이벤트로 설정함
          + 친구들에게도 동일한 작업을 수행하여 100% 성공률을 기록함
     * Siri가 일정 생성에서 실패한 경험 공유
          + ""월요일에 시작하여 90일 동안 계속되는 이벤트 생성""과 같은 작업을 제대로 수행하지 못함
          + Siri가 수동으로 하고 싶지 않은 작업을 수행하지 못함
     * GPT4-o를 사용하여 인터넷 뱅킹 거래 목록 스크린샷에서 회사 세금 신고를 위한 거래 목록을 얻은 경험 공유
          + 제품 관리자가 기능 플래그를 켜기 위해 회사 ID 목록을 스크린샷으로 보냈을 때, 이를 사용하여 쉼표로 구분된 목록을 생성함
     * AI를 사용하여 상호 운용 가능한 인간이 읽을 수 있는 파일 형식을 강조하는 디자인 패턴을 희망함
          + .ICS 파일과 같은 형식 지원을 우선시하는 웹사이트/앱이 더 많아지기를 바람
          + 지난 10년 동안 데이터가 더 분리되고 파일에 대한 강조가 줄어드는 경향이 있었음
     * ChatGPT를 사용하여 캘린더 항목을 생성하는 경험 공유
          + Google Calendar 링크, ics 파일, QR 코드를 통해 캘린더 항목을 생성함
     * AI를 사용한 캘린더 초대가 유용함을 강조함
          + 관련 작업을 수행한 경험 공유
     * GPT4-o를 사용하여 데이터 입력을 간소화하는 경험 공유
          + 사람들이 아직 LLM을 체계적으로 사용하지 않지만, 앞으로 변화할 것이라고 생각함
          + 인쇄된 정보가 있는 경우 카메라로 정보를 빠르게 검토하고 자동화할 수 있음
          + 표지판, 포스터 등에 시각적으로 많은 정보를 전달하는 데 많은 노력과 돈이 들어감
"
"https://news.hada.io/topic?id=16507","모노스페이스 웹","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                모노스페이스 웹

  소개

   모노스페이스 폰트는 많은 사람들에게 사랑받음. 가독성, 일관성, 미적 감각이 뛰어남. 이 페이지는 모노스페이스 그리드를 사용하여 텍스트와 다이어그램을 정렬함. 간단한 Markdown 문서에서 생성되며, CSS와 약간의 Javascript로 렌더링됨. 반응형 디자인을 채택하여 문자 크기 단위로 축소됨. 표준 요소들이 제대로 작동하도록 목표함. 70년대 스타일의 시맨틱 HTML로 렌더링됨.

  기본 사항

     * 문서에는 몇 가지 추가 클래스가 사용되지만 대부분 마크업임.
     * 예시로 일반 단락과 수평선이 있음.
     * <details> 요소를 사용하여 내용을 숨길 수 있음.

  목록

     * 일반적인 불릿 목록:
          + 바나나
          + 종이 배
          + 오이
          + 로켓
     * 순서 목록:
          + 목표
          + 동기
               o 내재적
               o 외재적
          + 2차 효과
     * 트리 시각화:
          + /dev/nvme0n1p2
               o usr
                    # local
                    # share
                    # libexec
                    # includes
                    # bin
                    # src
                    # lib64
                    # lib
               o games
                    # solitaire
                    # snake
                    # tic-tac-toe
               o media
               o run
               o tmp

  테이블

     * 모노스페이스 그리드에 자동으로 맞춰지는 일반 테이블 사용 가능.
     * 예시:
          + 이름: Boboli Obelisk, 크기: 1.41m × 1.41m × 4.87m, 위치: 43°45’50.78”N 11°15’3.34”E
          + 이름: Pyramid of Khafre, 크기: 215.25m × 215.25m × 136.4m, 위치: 29°58’34”N 31°07’51”E

  폼

     * 버튼과 입력 필드 예시:
          + 버튼: RESET, SAVE
          + 입력 필드: 이름, 성, 나이

  그리드

     * 컨테이너에 그리드 클래스를 추가하여 수평 공간을 균등하게 나눌 수 있음.
     * 특정 셀에 flex-grow: 1;을 설정하여 나머지 공간을 채울 수 있음.

  ASCII 그림

     * <pre> 태그를 사용하여 박스 그리기 문자로 그림을 그릴 수 있음.
     * 예시:
╭─────────────────╮
│ MONOSPACE ROCKS │
╰─────────────────╯

     * <figure> 태그와 <figcaption>을 추가하여 강조 가능.
     * 메시지 전달 예시:
┌───────┐ ┌───────┐ ┌───────┐
│Actor 1│ │Actor 2│ │Actor 3│
└───┬───┘ └───┬───┘ └───┬───┘
    │         │         │
    │ msg 1   │         │
    └────────►│         │
              │ msg 2   │
              └────────►│
┌───┴───┐ ┌───┴───┐ ┌───┴───┐
│Actor 1│ │Actor 2│ │Actor 3│
└───────┘ └───────┘ └───────┘

     * 차트 예시:
           Things I Have
                       │
                 ████ Usable
15 │
                 ░░░░ Broken
12 │       ░
9 │  ░     ░
6 │  █     ░     ░
3 │  █     █     █
0 └───▀─────────▀─────────▀──────────▀─────────────
   Socks   Jeans   Shirts  USB Drives

  미디어

     * 이미지와 비디오 같은 미디어 객체 지원.
     * 예시:
          + 프랑스 성의 방 (2024)
          + 웹의 중심 (1914), Wikimedia

  토론

     * CSS 기술을 발전시키고 디자인을 즐기며 제작함.
     * 사용하거나 피드백을 주면 좋겠음.
     * 전체 소스 코드는 GitHub에서 확인 가능: github.com/owickstrom/the-monospace-web
     * U.S. Graphics Company에 감사의 인사를 전함.

  GN⁺의 정리

     * 이 프로젝트는 모노스페이스 폰트를 사용한 웹 디자인 실험임.
     * 반응형 디자인과 시맨틱 HTML을 결합하여 70년대 스타일의 웹 페이지를 구현함.
     * 개발자들이 CSS와 디자인 기술을 향상시키는 데 도움이 될 수 있음.
     * 비슷한 기능을 가진 프로젝트로는 ""CSS Zen Garden""이 있음.

        Hacker News 의견

     * 한 사용자는 monospace 페이지 목록을 유지하고 있으며, 현재 약 50개가 있음
          + 비례 글꼴을 포기하면 가독성이 떨어짐
          + 비례 글꼴의 자간 조정이 글자 그룹의 모양을 인식하는 데 큰 차이를 만듦
          + 코드 편집기에서 구조화되고 강조된 경우 monospace 텍스트는 괜찮음
          + Unicode 차트와 ASCII 아트와 함께 사용할 때 특히 예쁨
     * 한 사용자는 몇 년 전 monospace 글꼴로 작성된 비디오 게임 공략을 찾고 있음
          + 단어 선택만으로 완벽하게 정렬된 텍스트였음
          + 이에 대한 링크를 알고 있는지 질문함
     * 한 사용자는 ""인디 웹"" 철학에 대해 언급함
          + 알고리즘을 배제하고 과거의 웹을 좋게 만들었던 요소들을 포용함
          + RSS, 커스텀 블로그, 포럼, 웹 링 등을 포함함
          + 본인도 시작했으며 매우 좋다고 느낌
     * 한 사용자는 monospace 글꼴 자체는 괜찮지만, 강제 줄 바꿈이 문제라고 언급함
          + 작은 폰트로 텍스트 벽이 생기고, 독자 모드가 작동하지 않음
          + 가로로 기울이면 스크롤바가 생길 가능성이 있음
          + 기술 메일링 리스트에서도 동일한 불만이 있음
     * 한 사용자는 개인 웹사이트의 글꼴을 monospace로 변경하려고 생각 중임
          + 장문 텍스트 가독성이 좋은 monospace 글꼴을 추천받고 싶어함
          + Google Fonts에 있는 글꼴이면 추가 점수를 줌
     * 한 사용자는 monospace가 예쁘고 반응형이지만 본문 텍스트에는 적합하지 않다고 언급함
          + 여러 사이트에서 monospace 본문 텍스트를 읽어봤지만, 비례 글꼴이 더 좋다고 생각함
     * 한 사용자는 유명한 C64 리소스인 ""VIC article""이 여전히 monospace로 제공된다고 언급함
          + 주요 문제는 인쇄임
          + 다이어그램이 고정된 참조가 필요한 2차원 공간을 사용함
          + 이 기사는 C64의 가장 중요한 기술 참조 자료임
          + 기술 데모 효과의 99%가 여기서 발견된 기본적인 트릭으로 분해될 수 있음
     * 한 사용자는 웹이 다시 원래의 모습으로 돌아오고 있다고 언급함
          + 초기 웹의 위성 커뮤니티가 점점 더 많아지고 있음
          + 웹의 다양한 부분을 방문하는 것이 점점 더 흥미로워짐
     * 한 사용자는 tree ul-list CSS 클래스가 HTML 표준의 일부가 되어야 한다고 생각함
          + 매우 유용한 것임
     * 한 사용자는 OpenBSD가 몇 년 전부터 콘솔 글꼴을 ""Spleen""으로 설정했다고 언급함
          + TrueType 버전이 없다는 것이 아쉬움
          + Spleen GitHub 링크 제공
"
"https://news.hada.io/topic?id=16474","개발 시간 절반 줄이는 오픈 소스 AI 도구 25가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     개발 시간 절반 줄이는 오픈 소스 AI 도구 25가지

     * KitOps: 모델, 코드, 메타데이터, 아티팩트 공유, 관리에 사용하는 패키지 지원
     * LangChain: 모듈화된 아키텍처로 커스텀 LLM 애플리케이션 개발 도움
     * Pachyderm: 데이터 변환 자동화
     * ZenML: MLOps 파이프라인 생성 추상화로 데이터 전처리, 모델 훈련, 평가, 배포 도움
     * Prefect: 태스크와 플로 개념으로 머신러닝 파이프라인 구성
     * Ray: 모델 개발 중에 머신러닝 워크로드 쉬운 확장 지원
     * Metaflow: AI 프로젝트의 프로토타입→프로덕션 실행에 필요한 통합 API 제공
     * MLflow: 데이터 과학자와 엔지니어가 모델 개발과 실험을 관리하도록 지원
     * Kubeflow: Kubernetes 클러스터서 ML 워크플로 오케스트레이션, 배포 간소화하도록 설계
     * Seldon core: ML 모델(TensorFlow, PyTorch, H2o 등) 또는 랭귀지 래퍼(Python, Java 등)를 프로덕션 지원 REST/GRPC 마이크로서비스로 변환해 ML 모델 배포, 제공, 관리 간소화
     * DVC: Git이 코드에 하는 것처럼 데이터와 모델 변경 사항을 추적, 모든 Git 리포지토리 위에서 실행할 수 있도록 함
     * Evidently AI: 프로덕션 ML 모델 분석, 모니터링하도록 설계된 옵저버빌리티 플랫폼
     * Mage AI: 광범위한 코딩 없이 데이터 파이프라인 구축, 자동화하는 데이터 변환, 통합 프레임워크
     * ML Run: 엔드투엔드 MLOps 시스템 오케스트레이션하는 서버리스 기술 제공
     * Kedro: 재현 가능, 유지 관리 가능, 모듈식 데이터 사이언스 코드 생성 위한 ML 개발 프레임워크
     * WhyLogs: ML 모델과 데이터 파이프라인 위해 설계된 오픈 소스 데이터 로깅 라이브러리
     * Feast: 개발, 프로덕션 환경서 ML 기능 관리, 제공하는 이해 관계자 문제 해결
     * Flyte: 데이터 사이언티스트, 데이터/분석 엔지니어에게 워크플로 구축할 수 있는 Python SDK 제공, 이를 Flyte 백엔드에 손쉽게 배포
     * Featureform: 데이터 사이언티스트가 ML 모델의 기능 관리, 제공하는 기능 간소화하는 가상 기능 저장소
     * Deepchecks: AI 프로젝트 실험부터 배포 단계까지 ML 모델과 데이터 지속적 테스트하고 검증하는 ML 모니터링 도구
     * Argo: Kubernetes서 병렬 작업 오케스트레이션하는 Kubernetes 네이티브 워크플로 엔진 제공
     * Deep Lake: 딥러닝 위한 데이터 레이크, RAG 애플리케이션 위한 벡터 저장소 역할 하도록 설계된 ML 특화 데이터베이스 도구
     * Hopsworks feature store: 데이터 수집과 피처 엔지니어링부터 모델 훈련, 배포, 모니터링까지 ML 피처 라이프사이클 관리할 수 있는 엔드투엔드 솔루션 제공
     * NannyML: ML 모델 배포 후 모니터링과 유지 관리에 특화된 Python 라이브러리
     * Delta Lake: 데이터 레이크에 안정성 제공하는 스토리지 레이어 프레임워크

   와 개꿀리스트네
   Optuna 가 추가되면 좋을듯
"
"https://news.hada.io/topic?id=16446","우리는 Theseus의 OpenBSD에 도달했습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      우리는 Theseus의 OpenBSD에 도달했습니다

     * CVS: cvs.openbsd.org: src
     * 변경된 파일
          + games/quiz/Makefile
          + games/quiz/datfiles/index
     * 추가된 파일
          + games/quiz/datfiles/ship
     * 삭제된 파일
          + games/quiz/datfiles/greek
     * 로그 메시지
          + 그리스 퀴즈는 너무 난해해서 아무도 할 수 없음을 지적
          + 새로운 퀴즈로 갤리선(배) 부품에 대한 퀴즈로 대체
          + 이번 커밋은 1995년 10월 18일 OpenBSD가 처음 만들어질 때의 마지막 수정되지 않은 원본 파일(리비전 1.1.1.1)을 변경
          + 이번 커밋으로 원래 OpenBSD의 마지막 부분을 대체하는 재미있는 임무를 완료
          + 우리는 Theseus의 OpenBSD에 도달
          + mglocker의 아이디어 및 지원, jmc의 해군 용어 도움

GN⁺의 정리

     * 이번 커밋은 OpenBSD의 역사적인 순간을 나타내며, 마지막으로 남아있던 원본 파일을 대체함
     * 그리스 퀴즈를 갤리선 부품 퀴즈로 대체하여 사용자 접근성을 높임
     * OpenBSD의 지속적인 발전과 커뮤니티의 기여를 보여줌
     * 비슷한 기능을 가진 프로젝트로는 FreeBSD와 NetBSD가 있음

   Theseus = 테세우스
   Theseus의 OpenBSD = OpenBSD가 테세우스의 배가 됨
"
"https://news.hada.io/topic?id=16466","SQL의 문제점과 해결 방안: SQL의 파이프 문법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      SQL의 문제점과 해결 방안: SQL의 파이프 문법

     * SQL은 50년 동안 구조적 데이터 처리의 기본 언어로 자리 잡았지만 배우기 어렵고, 사용하기 까다로우며, 확장하기 어려움
     * 기존 SQL의 문제점 : 구문 순서의 강제성, 중복된 구문, 서브쿼리 사용 필요성, '안쪽에서 바깥쪽으로'의 데이터 흐름, 확장성의 부족 등
     * GoogleSQL에서는 SQL의 문제를 해결하기 위해 SQL을 확장하는 접근 방식을 채택
          + 파이프 구조의 데이터 흐름 구문을 SQL에 도입하여 기존 SQL의 문제를 해결하고자 함
          + SQL을 기존의 생태계를 유지하면서도 보다 유연하게 학습하고 사용할 수 있으며, 기존 SQL과의 완전한 호환성을 유지함
               o 기존 SQL 연산자를 재사용하고 파이프로 임의의 순서로 구성할 수 있게 함
               o 각 파이프 연산자는 입력 테이블만 볼 수 있어 범위가 명확함
               o 선언적 의미론을 유지함
               o 관계 대수와 일대일 대응이 가능해짐
               o 테이블 값 함수를 이용한 확장성이 개선됨
          + 예를 들어, 다단계 집계를 서브쿼리 없이 연속적으로 표현할 수 있음
          + 파이프 구문을 사용한 SQL은 학습과 사용이 더 쉽고, 다양한 연산자들을 임의의 순서로 적용할 수 있어 유연성이 크게 향상됨
          + 파이프 연산자는 순차적으로 작동하며, 이를 통해 사용자는 데이터를 보다 쉽게 필터링, 집계, 정렬할 수 있음
     * GoogleSQL에서의 사용 경험
          + 사용자들의 꾸준한 채택과 긍정적인 피드백을 받음
          + 복잡한 쿼리도 선형적으로 표현 가능
          + 편집과 디버깅 작업에 용이함
          + IDE 도구 지원이 개선됨
          + SQL 코드 생성기와 변환기에 유리함
          + AI 적용에 잠재적 장점이 있음
     * 구현과 향후 계획
          + GoogleSQL에서 파이프 문법을 공유 컴포넌트로 구현함
          + 기존 쿼리 엔진들은 파이프 문법을 쉽게 활성화할 수 있음
          + BigQuery와 Spanner에서 외부적으로 지원하는 것을 검토 중
          + 향후 SQL 표준에 포함되는 것을 모색할 만한 가치가 있음

GN⁺의 의견

     * 파이프 구문의 장점: SQL의 복잡성을 해결할 수 있는 강력한 도구로 작용하며, 특히 데이터 흐름을 직관적으로 표현할 수 있어 SQL 사용성을 크게 개선할 수 있음.
     * 기존 SQL과의 호환성: 기존 SQL을 대체하는 것이 아닌, SQL을 개선하는 방향으로 접근하여 학습 곡선을 줄이고, 기존 코드와의 호환성을 유지할 수 있음.
     * 도입 시 고려 사항: 파이프 구문을 채택할 때는 성능에 미치는 영향과 도구 지원 수준을 고려해야 하며, 특히 대규모 쿼리에서 파이프 구문의 장점을 최대한 활용할 수 있음.
     * 유사 프로젝트와의 비교: Pandas와 같은 DataFrame API에서도 파이프 구조가 사용되지만, SQL과의 차별점은 SQL의 선언적 의미론과의 결합임. SQL 시스템의 확장성과 성능을 유지하면서 이러한 기능을 사용할 수 있음.

   파이프에 캐럿이라니 뭔가 오른손이 아플것같은 조합🤣
   지금 SQL에 뭔가 개선이 필요하긴 하죠
   한 3-40년간 개선안을 못찾은게 문제이긴 한데요..

   SQL 추가 문법에 대해서 생태계를 구글이 이끌어야될 것 같은데 과연 사업부가 이걸 지속시킬까요?

   dplyr 이군요 ㅋㅋㅋㅋ

   왜 구글이 한다고 하면 망할 것 같은 느낌만 들지..
   제미나이는 잼민이처럼 답변해서 쓰기도 싫던데

   ORM들이 취하는 접근 방식과 비슷한 것 같네요

   페이퍼의 아래 예제만 봐도 확실히 google sql이 읽기 편하긴 하네요.

   standard sql
SELECT c_count, COUNT(*) AS custdist
FROM
    ( SELECT c_custkey, COUNT(o_orderkey) c_count
      FROM customer
      LEFT OUTER JOIN orders ON c_custkey = o_custkey
           AND o_comment NOT LIKE '%unusual%packages%'
      GROUP BY c_custkey
    ) AS c_orders
GROUP BY c_count
ORDER BY custdist DESC, c_count DESC;

   google sql
FROM customer
|> LEFT OUTER JOIN orders ON c_custkey = o_custkey
      AND o_comment NOT LIKE '%unusual%packages%'
|> AGGREGATE COUNT(o_orderkey) c_count
   GROUP BY c_custkey
|> AGGREGATE COUNT(*) AS custdist
   GROUP BY c_count
|> ORDER BY custdist DESC, c_count DESC;

   C#의 LINQ가 생각나네요. SQL 쓸 때마다 항상 SELECT 순서가 FROM, WHERE 뒤로 바뀌었으면 좋겠다는 생각을 했었는데....
   처음엔 익숙하지 않아서 어색해도 천천히 읽어보면 흐름이 훨씬 자연스럽게 느껴집니다.

   SQL쪽이 읽기에 더 좋은것 같네요.

   저는 SQL쪽이 훨씬 읽기 편한데요. ㅎㅎ SQL로 시작한 분들은 대부분 그러할듯...

   저도 익숙한게 더 읽기 쉽긴 하네요.. ㅋㅋ

        Hacker News 의견

     * SQL 파이프 구문이 더 읽기 쉬워졌음
     * Google에서 SQL 쿼리를 작성할 때 파이프 구문이 유용했음
     * SQL 파이프 구문이 일반화되기를 희망함
     * Google AI Studio에서 PDF를 HTML로 변환해본 결과가 좋았음
     * 20년 넘게 SQL을 사용해왔지만 여전히 특정 쿼리를 표현하는 데 어려움이 있음
     * Google의 오픈 소스 ZetaSQL 프로젝트가 파이프 구문 문서를 추가했음
     * SQL의 구문 불만은 우선순위가 낮음
          + 대수적 데이터 타입, 진정한 불리언 논리, 함수형 구성 등의 기능이 필요함
     * SQL 작성의 어려움을 줄이기 위한 많은 시도가 있었지만 성공하지 못했음
          + 저자들의 접근 방식은 점진적이고 기존 SQL 사용자에게 적합함
     * 파이프라인 구문은 현재 상태보다 나음
          + 쿼리 실행을 작업의 방향 그래프로 모델링하는 구문이 더 좋을 것임
               o 조인은 두 개 이상의 데이터 스트림을 소비하고 하나의 데이터 스트림을 생성하는 ""교차 참조"" 작업으로 모델링할 수 있음
               o CTE는 여러 데이터 스트림을 생성하는 것으로 모델링할 수 있음
               o 재귀 CTE는 실행 그래프의 사이클로 모델링할 수 있음
     * Elixir와 유사함
          + 기존 SQL 구문이 지원된다면 괜찮지만, 여러 JOIN, 서브쿼리 및 집계가 포함된 쿼리는 가독성이 떨어질 수 있음
     * PRQL과 Splunk의 SPL을 떠올리게 함
"
"https://news.hada.io/topic?id=16522","4-chan Go 프로그래머","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            4-chan Go 프로그래머

소개

     * 우리는 세계 최초의 버전 관리 SQL 데이터베이스인 Dolt를 Go 언어로 작성하고 있음
     * 대부분의 Go 코드베이스처럼 채널과 고루틴을 사용하여 동시 실행을 구현함
     * 일반적으로 동시 프로그래밍은 어렵기 때문에 간단하고 직관적인 방법을 사용함
     * 그러나 다른 오픈 소스 프로젝트에서 채널을 매우 독창적으로 사용하는 코드를 상속받았음

var c chan chan struct{}

     * 이는 다른 고루틴 간에 채널을 전달하는 방식으로, 작업자 고루틴 간의 팬아웃 패턴을 구현함
     * 이러한 방식은 이해하기 어렵고 고루틴 누수를 고려할 때 작업하기 어려웠음
     * 결국 이 코드를 다시 작성하여 chan chan struct{}를 제거함

왜 이런 일을 하는가

     * C 언어와 그 파생 언어가 지배적이던 시절의 오래된 프로그래밍 농담이 있음
     * 많은 사람들이 포인터를 이해하는 데 어려움을 겪었음
     * Go도 C에서 파생된 언어이기 때문에 동일한 작업을 수행할 수 있음

func main() {
  i := 1
  setInt(&i)
  fmt.Printf(""i is now %d"", i)
}

func setInt(i *int) {
  setInt2(&i)
}

func setInt2(i **int) {
  setInt3(&i)
}

func setInt3(i ***int) {
  setInt4(&i)
}

func setInt4(i ****int) {
  ****i = 100
}

     * 이 코드는 컴파일되어 i is now 100을 출력함
     * Go에서 채널을 사용하여 동일한 작업을 수행할 수 있음

4-chan Go 프로그래머

     * 4단계의 채널 간접 참조를 사용하는 프로그램을 작성할 것임
     * 최상위 채널은 4-chan으로 선언됨

_4chan := make(chan chan chan chan int)

     * 이 채널에 보내는 값은 3-chan임

_3chan := make(chan chan chan int)

     * 각 간접 참조 단계에서 일정한 분기 요소에 따라 생산자를 생성함

func sendChanChanChan(c chan chan chan chan int) {
  for range factor {
    go func() {
      logrus.Debug(""starting 3chan producer"")
      _3chan := make(chan chan chan int)
      sendChanChan(c, _3chan)
    }()
  }
}

     * 소비자도 동일하게 처리함

func receiveChanChanChan(c chan chan chan chan int) {
  for _3chan := range c {
    logrus.Debug(""got message from 4chan"")
    for range factor {
      logrus.Debug(""starting 3chan consumer"")
      go receiveChanChan(_3chan)
    }
  }
}

     * 마지막으로 실제 값을 보내는 단계에 도달함

func send(_2chan chan chan int, _1chan chan int) {
  _2chan <- _1chan
  for range factor {
    go func() {
      logrus.Debug(""starting int producer"")
      for range factor {
        go func() {
          logrus.Debug(""sending int"")
          _1chan <- 1
        }()
      }
    }()
  }
}

     * 소비자는 받은 값을 합산함

var sum = &atomic.Int32{}

func receive(c chan int) {
  for s := range c {
    logrus.Debug(""received int"")
    sum.Add(int32(s))
  }
}

     * 모든 것을 합쳐서 실행함

const factor = 3
var sum = &atomic.Int32{}

func main() {
  // logrus.SetLevel(logrus.DebugLevel)
  _4chan := make(chan chan chan chan int)
  go sendChanChanChan(_4chan)
  go receiveChanChanChan(_4chan)
  time.Sleep(500 * time.Millisecond)
  fmt.Printf(""%d ^ 5: %d"", factor, sum.Load())
}

     * 이 프로그램은 숫자의 5제곱을 최대한 분산된 방식으로 계산함

논평

     * 실제 코드에서 이렇게 하지 말아야 할 이유가 많음: 구현 및 디버깅의 어려움, 자존심 문제, 동료들의 비난 등
     * 그러나 매우 재미있고 작동한다는 점에서 흥미로움
     * 실용적인 이유 중 하나는 채널을 채널로 보내면 닫기가 매우 어려워짐

결론

     * Go에서의 재미있는 동시성 패턴에 대해 질문이나 의견이 있으면 Discord에서 우리 팀과 다른 Dolt 사용자들과 대화할 수 있음

GN⁺의 정리

     * 이 글은 Go 언어에서 채널을 사용한 독창적인 동시성 패턴을 다루고 있음
     * 실제 코드에서 사용하기에는 비효율적이지만, 개념적으로 흥미로움
     * Dolt와 같은 프로젝트에서 Go의 동시성 기능을 어떻게 활용할 수 있는지 보여줌
     * 유사한 기능을 가진 프로젝트로는 PostgreSQL, MySQL 등이 있음

        Hacker News 의견

     * 과학자로서 전문 소프트웨어 엔지니어와 함께 일할 때, 그들이 하는 많은 일이 이해되지 않음
          + 코드 한 줄이 4개의 ""인터페이스 함수""를 거쳐 호출되는 것을 본 적이 있음
          + 각 함수는 서로 다른 파일과 폴더에 있어 코드 읽기가 매우 피곤해짐
          + 몇 단계 들어가면 실제로 계산하는 부분에 도달할지 의문이 생김
     * 저조한 노력의 비실질적인 댓글을 남기고 싶음
          + 첫 몇 단락의 밈이 C 프로그래머로서 웃겼음
          + 언어의 이상한 변형을 보는 것을 좋아하며, Go에서 이를 보는 것이 흥미로움
     * C와 그 파생 언어가 지배하던 시절의 오래된 프로그래밍 농담이 여전히 유효함
     * Buena Vista Social Club의 클래식 음악이 떠오름
          + YouTube 링크
     * ""chan chan Value"" 또는 ""chan struct{resp chan Value}"" 패턴을 특정 상황에서 사용한 적이 있음
          + 메시지 버스를 대신 사용할 수 있었지만, 메시지 버스를 처리해야 하는 상황이 됨
     * 채널의 채널은 일반적인 패턴이며, 보통 구조체 타입의 필드가 채널인 형태로 나타남
          + 요청을 보내고, 작업자가 작업을 완료한 후 결과를 응답 채널에 넣는 방식
          + type request struct { params, reply chan response }와 같은 형태
          + 두 개의 채널이 유용하며, 세 개 이상의 채널은 본 적이 없음
     * 동적 디스패치 메커니즘을 구현하기 위해 채널을 사용하는 반대 의견 블로그
          + Limbo 언어에서 사용되며, Go와 동일한 개념
          + 블로그 링크
     * Joe Armstrong의 ""My favorite Erlang Program""을 떠올리게 함
          + Erlang 프로그램 링크
     * 링크를 클릭했을 때 다른 것을 기대했음
          + Go 프로그래머가 아니어서 농담을 바로 알아차리지 못함
     * LabVIEW 코드에서 비동기 응답 데이터를 받기 위해 유사한 방식 사용
          + 응답을 큐에 덤프하는 대신, 콜백 이벤트 채널을 포함한 메시지를 전달
          + 메모리 낭비가 있지만, 단일 사용 후 응답 시 닫히므로 효율적임
"
"https://news.hada.io/topic?id=16530","저가형 미니저가형 미니 PC

     * eBay에서 미니 PC를 저렴하게 구매할 수 있도록 리스팅 해주는 도구
          + 미니 PC를 필요에 맞게 조건을 설정하여 찾을 수 있음
          + 가격은 몇 시간마다 업데이트됨
     * 조건 설정
          + 상태: 새 제품, 중고 제품
          + 브랜드: Dell, Lenovo, HP, Intel, 기타
          + RAM: 최소, 최대
          + 저장소: 최소, 최대
          + 저장소 타입: SSD, HDD, eMMC, 없음
          + CPU 제조사: Intel, AMD, 기타
          + 추가 기능: OS 포함, Wifi, Bluetooth, HDMI, DisplayPort, 팬리스, Ethernet, USB-C, 전용 GPU, Optical Drive, VGA

GN⁺의 정리

     * 이 사이트는 eBay에서 저렴한 미니 PC를 찾는 방법을 제공함
     * 다양한 조건을 설정하여 필요한 사양의 미니 PC를 쉽게 찾을 수 있음
     * 중고 제품이지만 성능이 좋은 제품을 저렴하게 구매할 수 있는 기회를 제공함
"
"https://news.hada.io/topic?id=16471","React는 풀스택 프레임워크(가 되어가는 중)임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      React는 풀스택 프레임워크(가 되어가는 중)임

     * 서버 컴포넌트와 서버 액션을 추가한 React는 풀스택 프레임워크로 진화중

2010년 프레임워크 전쟁 시작

     * 2010년 Backbone, Knockout, Ember로 시작된 프레임워크 전쟁은 Angular와 React가 빠르게 뒤따랐고, 그 결과를 아무도 예측할 수 없었음
     * 오랫동안 클라이언트 사이드 렌더링(CSR) JavaScript 애플리케이션이 지배적이었음
     * 이러한 애플리케이션은 단일 페이지 애플리케이션(SPA)이라고도 하며, 일반적으로 작은 HTML 파일과 큰 JavaScript 파일로 구성됨
     * 코드 분할이 도입되기 전까지는 그러했음

프론트와 백엔드의 분리

     * 이 기간 동안 프론트엔드 개발은 다양한 JavaScript 프레임워크와 라이브러리가 지배했음
     * 백엔드는 일반적으로 특정 언어에 묶이지 않았고, REST가 API 통신의 표준이 되었음
     * 나는 프리랜서 웹 개발자로서 주로 .NET, Java, Python, PHP 백엔드와 함께 일했음
     * TypeScript/JavaScript는 그린필드 프로젝트이거나 백엔드를 제어할 수 있는 작은 프로젝트에서만 백엔드에서 봤음
     * 그러나 풀스택 React의 부상으로 이것이 바뀔 수 있음
     * 2010년에서 2020년 사이의 기간에 대한 개발자들의 인식이 경력 시작 시기에 따라 다른 것이 흥미로움
     * 2010년 이전에 시작한 개발자들은 서버 사이드 렌더링(SSR) 환경에 있었고, 최근 서버 사이드 기술로의 회귀에 더 편안해 보임
     * 반면 많은 다른 이들은 거의 10년 동안 클라이언트 사이드 렌더링(CSR) 애플리케이션에서 REST API로만 작업했음
     * 이제 그들은 새로운 풀스택 React 세계를 어떻게 받아들여야 할지 모르고 있음

TypeScript가 업계 표준으로 등장

     * 최근 몇 년 동안 TypeScript가 업계 표준으로 떠오름
     * TypeScript는 프론트엔드 개발자에게 유형화되고 강력한 프로그래밍 언어를 제공
     * 개발자들이 TypeScript를 받아들이면서 돌아갈 수 없는 지경에 이름
     * 코드의 작은 변화가 개인과 산업 전반에 큰 영향을 줄 수 있다는 것이 흥미로움

TypeScript와 REST의 어려움

     * TypeScript가 REST에 미친 영향은 임시방편적 해결책이 많음
     * OpenAPI(구 Swagger)는 REST API 문서화를 위해 존재했지만, 이제는 주로 타입 API 인터페이스를 생성하는데 사용됨
     * 클라이언트-서버 아키텍처에서 완벽한 타입 인터페이스를 만들 수 있음에도 불구하고, 시작부터 제대로 구현하는데 실패하는 프로젝트가 많음
     *

     개인적인 노트 : ""OpenAPI 기반 아키텍처에서 좋은 경험을 한 개발자도 있겠지만, 안타깝게도 필자는 그렇지 않음""

TypeScript가 분위기를 바꿈

     * TypeScript가 여기서 분위기를 어떻게 바꾸었는지 보는 것이 꽤 흥미로움
     * 한편으로는 REST(문서화 목적의 OpenAPI)를 사용하는 비유형화된 SPA가 ""괜찮아"" 보였음
     * 그러나 TypeScript가 표준이 되고 규범으로 여겨지면서, 생성된 타입 인터페이스는 프론트엔드 코드베이스에서 더 높은 기준에 익숙해졌기 때문에 다루기 불쾌해졌음
     * 생성된 타입 인터페이스의 단점은 명확함:
          + 항상 생성 단계가 포함되어 있음
          + 생성된 출력이 복잡함
          + 초기 설정에 따라 생성된 코드가 항상 올바르지는 않음

RPC와 tRPC의 등장

     * RPC는 새로운 개념은 아니지만 tRPC 덕분에 React 생태계에서 인기를 얻음
     * 8만 줄 코드 애플리케이션에서 6개월 동안 솔로 개발자로서의 경험에 따르면, 백엔드에서 함수를 호출해 데이터를 읽고 쓰는 것은 계시와도 같았음
     * TypeScript를 사용하는 스택 양쪽에서 이보다 더 생산적이라고 느낀 적이 없음
     * 개인적으로 몇 년 전 (생성된) 타입 GraphQL 아키텍처에서만 비슷하게 생산적이라고 느꼈음
     * 2023년 한 해 동안 tRPC보다 더 나은 것은 상상할 수 없었음
     * 백엔드에서 함수를 호출해 데이터를 읽고 쓰는 것은 혁명적으로 느껴졌음
     * 하지만 그게 내가 필요한 전부였을까? 아니었음

Server Components와 Server Actions의 혁신

     * 나에게 진정한 돌파구는 2024년 Server Components와 Server Actions에서 왔음
     * 이들은 서버를 호출할 뿐만 아니라 다른 쪽에서 코드를 구현하고 실행할 수 있도록 하여 서버와의 격차를 해소함
     * Server Components는 서버에서 React 컴포넌트를 실행할 수 있게 하여 JSX로 UI를 반환하기 전에 데이터 소스(예: 데이터베이스)에 직접 액세스할 수 있게 함
     * Server Actions는 후드 아래에서 HTTP API 엔드포인트를 생성하여 원격 프로시저 호출과 마찬가지로 함수를 실행하여 호출할 수 있음
     * Server Components와 Server Actions는 React를 풀스택 프레임워크로 변모시킴
     * 프론트엔드를 풀스택 환경으로 전환하는 흥미진진한 시기임

React의 Server Components와 Server Actions 지원

     * React 자체는 Server Components와 Server Actions에 대한 기본 요소와 사양만 제공함
     * React 위에 구축된 메타 프레임워크는 클라이언트와 서버 간의 지시문을 해석하는 번들러로 격차를 해소할 수 있음
     * Next.js는 Server Components와 Server Actions 구현을 선도하고 있음
     * Next.js는 이전에 서버 사이드 렌더링(SSR)을 지원했지만, 이제 Server Components와 Server Actions를 통해 개발자는 데이터베이스 및 메시지 큐와 같은 서버 측 리소스에 액세스할 수 있음

풀스택 개발의 시작

     * React를 사용한 풀스택 개발은 이제 막 시작되는 단계임
     * 개발자가 Server Components와 Server Actions를 통해 데이터베이스에 직접 액세스하기 시작하면서 단순한 CRUD 애플리케이션을 넘어서는 복잡성을 길들이는 과정이 있을 것임
     * 철저한 교육을 통해 프론트엔드 개발자는 레이어, 설계 패턴 및 모범 사례를 사용하여 백엔드 아키텍처 구현을 곧 마스터할 것임
     * 솔직히 말해서, 아무도 React 컴포넌트에서 ORM 함수 호출을 보고 싶어하지 않기 때문임

패러다임 전환에 대한 기대

     * 나는 이 패러다임의 전환에 대해 매우 기대하고 있음
     * React 개발자가 UI에서 데이터베이스까지 수직적 기능을 구현하는 새로운 시대를 준비할 것

   풀스택 다 해줬잖아

   앱 개발과 같이 다른 언어 호환성을 생각한다면 tRPC는 그닥 좋지 않은 선택인거 같아요. 😅
   저는 GraphQL이 최선이라고 생각해요.

   nextjs server action은 개발자가 제어할 수 없는 랜덤 API 엔드포인트를 public하게 노출하는 문제가 있는데 굉장히 취약한 부분이라고 생각합니다.

   그거 이미 해결했습니다. 14.1.1 부터 수정된 버전 사용하면 됩니다.
   https://github.com/advisories/GHSA-fr5h-rqp8-mj6g

   혹시 언급하신게 어떤 취약점인지 알 수 있을까요?검색하면 SSRF 취약점이란게 나오긴하는데 맞는지 잘 모르겠어서요. next js 공부하는 참인데 궁금해서 여쭤봐요.

   애시당초 SPA를 밀던 사람들의 의도는 뭐였을까요? jquery로 DOM 조작하던 시절보단 훨씬 나은데, 백엔드 프론트엔드 설계와 개발에 필요한 개념은 안 없어지고 위치만 이동하는 것 같네요. 라우팅만 해도 서버에서 클라이언트로 옮겼다가 서버사이드 렌더링 유행때문에 다시 서버로 옮기려고 하고요

   3년 후에도 과연 코딩 학원이나 강좌에서 SPA 스타일 리액트를 가르칠지도 의문입니다

   페이지 이동의 스무스함이 가장 큰 장점 아니었을까요 (그 당시에는)

   원 글의 마지막은 저자가 개설 예정인 풀스택 웹 개발 교육과정 The Road to Next 의 홍보로 끝납니다 ^^;
"
"https://news.hada.io/topic?id=16475","Show GN: 티끌 모아 다이어트 - 소소한 다이어트를 위한 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: 티끌 모아 다이어트 - 소소한 다이어트를 위한 도구

   주말 동안에 만든, ""먹은 것이 아니라, 먹지 않은 것에 대해 기록하는"" 역발상 다이어트 도구입니다.

   주변에 군것질 할 것이 넘쳐나 유혹에 시달리시는 분이라면 도움이 될 것입니다.

   [ 주요 기능 ]
     * 먹지 않음으로써 감량한 칼로리를 기록할 수 있습니다.
     * 정말 소소한 운동을 통해 감량한 칼로리를 기록할 수 있습니다.
     * 칼로리를 체지방 양으로 환산해줍니다.

   [ 고려한 사항 ]
     * 작은 노력도 숫자로 보여줘서 보람을 느끼게 하는 것
          + 경험치가 쌓이듯이 작은 행동에도 즉각 보상을 얻을 수 있게 구성했습니다.
     * 다른 건강 앱과 병행해서 쓸 수 있도록 하는 것

   [ 다른 도구와의 차이점 ]
     * 먹은 것이 아니라, 먹지 않은 것에 대해 기록합니다.
     * 2주 완성 다이어트가 아니라, 1년 완성 다이어트입니다...!
     * 티끌(군것질/소소한 운동)을 모아 다이어트하는 것이 목적이기에, 몸에 좋은 음식과 본격적인 운동들은 기록할 수 없습니다(?)

   [ 사용 기술 ]
     * Next.js를 사용했습니다.
          + SSR을 사용하기 위해 사용하진 않았습니다.
          + React를 사용하고, vercel에 배포하기엔 next.js가 가장 편리하다고 느꼈습니다.
     * Shadcn UI(https://ui.shadcn.com)를 사용했습니다.
     * 서버에 저장하지 않고 로컬에 저장하게 했습니다.
          + 서버에 저장함으로써 얻는 것보다, 잃는게 많다고 생각했습니다.
               o DB 관리, 개인정보 관리, 사용자 경험의 훼손... 등등
          + 대신에 가져오기/내보내기 기능으로 대체하려고 합니다.

   오 오히려 좋은것같아요..!

   저축할 때도 비슷한 전략을 썼었어요. 통장에 메모와 함께 입금하는 식으로 했었는데, 은근 기분이 좋더라고요. 좋은 아이디어 같아요.

   말씀하신대로, 동기 부여를 극대화 할 수 있는 방법을 찾는게 중요한 것 같네요.

   아이디어 좋네요

   감사합니다
"
"https://news.hada.io/topic?id=16499","2024년 Box64와 RISC-V: RISC-V에서 Witcher 3 실행 조건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             2024년 Box64와 RISC-V: RISC-V에서 Witcher 3 실행 조건

  이야기

     * 1년 전 RV64 DynaRec은 Stardew Valley, World of Goo 같은 비교적 ""쉽게 실행 가능한"" 네이티브 Linux 게임만 실행할 수 있었음
     * 많은 새로운 x86_64 명령어가 RISC-V에 빠르게 구현되었지만, DynaRec에는 많은 버그가 남아 있었음
     * 당시에는 AMD 그래픽 카드를 연결할 수 있는 RISC-V 장치가 없었고, VisionFive 2와 LicheePi 4A의 IMG 통합 그래픽 카드는 OpenGL을 지원하지 않았음
     * gl4es를 사용하여 Stardew Valley 같은 게임을 실행할 수 있었지만, 더 복잡한 Linux 게임이나 Windows 게임에는 충분하지 않았음
     * Sophgo의 Milk-V Pioneer를 통해 AMD 그래픽 카드를 연결할 수 있게 되었고, 많은 RV64 DynaRec 버그를 수정하고 새로운 x86 명령어를 추가하여 The Witcher 3를 실행할 수 있었음

  RISC-V DynaRec의 현재 상태

     * x86 명령어 세트는 매우 방대함
     * ARM64 백엔드는 1,600개 이상의 x86 명령어를 구현했지만, RV64 백엔드는 약 1,000개를 구현했음
     * SSE 명령어는 스칼라 명령어로 구현되었으며, AArch64는 Neon 확장, LoongArch64는 LSX 확장을 사용하여 성능이 떨어짐
     * RISC-V에는 벡터 확장인 RVV가 있으며, Milk-V Pioneer와 SpacemiT K1/M1 SoC가 이를 지원함
     * 최근 box64에 기본적인 RVV 지원을 추가하고 몇 가지 일반적인 SSE 명령어를 구현했지만, 아직 초기 단계임

  x86 에뮬레이션을 위한 가장 필요한 명령어

     * x86 에뮬레이션에서 RISC-V는 AArch64와 LoongArch64에 비해 표현력이 부족함
     * RISC-V는 레지스터의 비트 범위를 선택하거나 다른 레지스터의 비트 범위에 삽입하는 명령어가 없음
     * 예를 들어, ADD AH, BL 명령어를 RISC-V에서 구현하려면 10개의 명령어가 필요함

  16바이트 원자 명령어의 좌절

     * x86에는 LOCK 접두사가 있는 원자적 연산 명령어가 있으며, box64는 LR/SC 시퀀스를 사용하여 이를 에뮬레이트함
     * LOCK CMPXCHG16B 명령어는 16바이트 메모리를 비교하고 교환하는데, RISC-V에는 이에 상응하는 명령어가 없음
     * 따라서 이 명령어를 완벽하게 구현할 수 없으며, Unity 게임과 같은 많은 프로그램이 이 명령어를 사용함

  결론

     * 여러 단점에도 불구하고 The Witcher 3는 box64에서 최대 15fps로 실행되며, 메인 메뉴에서는 풀 스피드로 실행됨

GN⁺의 정리

     * RISC-V에서 The Witcher 3를 실행한 것은 기술적 진보를 보여주는 중요한 사건임
     * RISC-V의 x86 에뮬레이션은 아직 다른 아키텍처에 비해 부족하지만, RVV와 같은 확장을 통해 개선될 가능성이 있음
     * RISC-V의 표현력 부족과 16바이트 원자 명령어의 부재는 주요한 문제점으로 남아 있음
     * 비슷한 기능을 가진 프로젝트로는 QEMU와 같은 에뮬레이터가 있음

        Hacker News 의견

     * RISC-V를 타겟으로 소프트웨어를 개발할 때 소프트웨어 엔지니어가 다르게 해야 할 점에 대한 질문이 있음
          + 실행 파일 크기가 증가할 수 있어 캐시 지역성을 위해 적극적으로 최적화해야 함
          + 특정 소프트웨어 유형이 CISC 또는 RISC에 더 적합할 수 있음, 예를 들어 게임이나 웹 서버
     * 큰 RISC-V CPU 몇 개와 작은 RISC-V CPU 여러 개로 구현된 ""GPU""를 탑재한 시스템이 나올 가능성에 대한 궁금증
          + 고전적인 벡터가 packed SIMD 대신 GPU에서 유용할 수 있는지에 대한 부가 질문
     * 유명한 러시아인이 Elbrus 8S에서 Atomic Heart를 실행한 사례를 상기시킴
          + Elbrus는 네이티브 번역기를 가지고 있으며, Atomic Heart는 15-25 fps로 플레이 가능했음
     * 기사가 ""기본 사항""에 대해 짧다는 의견
          + x86_64 ISA를 RISC-V 칩에서 어떻게 구현했는지에 대한 추가 정보 필요
     * x86 에뮬레이션 맥락에서 RISC-V가 가장 표현력이 적다는 의견
          + RISC는 컴퓨터 과학 역사 수업에서 간소화된 명령어 집합 컴퓨터로 설명되었음
          + 많은 기사와 새로운 RISC-V 프로파일이 ""기능 동등성을 위해 몇 가지 명령어가 더 필요하다""고 제안함
          + RISC-V가 다른 플랫폼에 대한 편리한 대안이지만, RISC의 꿈이 죽은 것인지에 대한 의문
     * 놀라운 결과라는 의견
          + 많은 작업이 필요했고, 일부 경우에는 RISC-V가 한계에 도달한 것 같음
          + 비트 집합 및 분산 명령어가 확장으로 추가되어야 함
     * 86Box에 대한 질문
          + Amstrad PC1512를 사용했던 시절을 회상하며, 하드 카드와 메모리 확장을 추가했던 경험을 공유함
          + Borland TurboPascal과 Zortech C를 사용했던 재미있는 시절
     * 스크린샷에 31GB의 램이 표시되어 있음
          + 최대 사양의 개발 보드보다 훨씬 많은 램을 사용하고 있는 것 같음
     * 이전 게시물 링크와 Milk-V Pioneer에 대한 정보
          + 64코어 RISC-V 마더보드와 워크스테이션으로 네이티브 개발을 위한 제품
     * RVI에 ISA 수준의 피드백을 전달할 수 있기를 바라는 의견
"
"https://news.hada.io/topic?id=16433","Claude API가 CORS 지원을 시작, 클라이언트 측 어플리케이션이 가능해짐 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Claude API가 CORS 지원을 시작, 클라이언트 측 어플리케이션이 가능해짐

     * Anthropic이 JSON API에 대한 CORS 지원을 활성화함
          + 즉, 이제 사용자의 브라우저에서 직접 Claude LLM을 호출할 수 있음
     * 이 기능은 ""anthropic-sdk-typescript: add support for browser usage"" PR에 숨겨져 있음
          + 뒤져보니, 해당 코드에 대한 Anthropic TypeScript SDK의 변경 사항은 새로운 JSON API 기능을 보여줌
     * 다음 HTTP 요청 헤더를 추가하여 Anthropic API에 대한 CORS 지원을 활성화 가능:
       anthropic-dangerous-direct-browser-access: true
     * 이 헤더를 추가하면 브라우저에서 직접 Anthropic 모델에 대한 호출을 할 수 있음
     * API 키를 클라이언트 코드에 포함하면 해당 사이트에 액세스할 수 있는 사용자가 API 키를 훔쳐 대신 요청을 할 수 있기 때문에 Anthropic은 이 기능 추가를 꺼려왔음
     * 그럼에도 불구하고 이 기능에 대한 괜찮은 유스케이스가 몇 가지 있음
          + 신뢰할 수 있는 사용자에게 노출되는 회사 내부용 도구에는 괜찮음
          + 또는 사용자가 클라이언트 측 앱에서 사용할 자신의 키를 제공하는 ""BYOK(Bring Your Own Key)"" 패턴을 구현도 가능

Haiku - 클라이언트측 앱 예제

     * 간단히 만들어본 Haiku 페이지는 CORS 지원이 필요한 클라이언트 측 앱 예제
     * 웹캠에 대한 액세스를 요청하고, Anthropic API 키를 요청한 다음(브라우저의 localStorage에 저장), 사진을 찍고 Haiku 모델을 사용하여 하이쿠로 바꾸는 간단한 앱임
     * 이전에는 Vercel에서 자체 프록시를 실행하여 Anthropic API에 CORS 지원을 추가해야 했음
     * 이제 새 헤더를 보내도록 앱을 업그레이드했고, 프록시 없이 Anthropic과 직접 통신할 수 있음

fetch(""https://api.anthropic.com/v1/messages"";, {
  method: ""POST"",
  headers: {
    ""x-api-key"": apiKey,
    ""anthropic-version"": ""2023-06-01"",
    ""content-type"": ""application/json"",
    ""anthropic-dangerous-direct-browser-access"": ""true"",
  },
  body: JSON.stringify({
    model: ""claude-3-haiku-20240307"",
    max_tokens: 1024,
    messages: [
      {
        role: ""user"",
        content: [
          { type: ""text"", text: ""Return a haiku about how great pelicans are"" },
        ],
      },
    ],
  }),
})
  .then((response) => response.json())
  .then((data) => {
    const haiku = data.content[0].text;
    alert(haiku);
  });

  Hacker News 의견

     * 개인적으로 사용자가 자신의 키를 가져오는 웹 앱을 만드는 것을 좋아함
          + 이 접근 방식은 실행 파일 배포의 편리함과 오픈 소스의 이점을 결합함
          + 두 가지 웹 앱을 개발해봤음
               o 마이크 입력을 사용하는 실시간 전사 및 번역 앱
               o SRT 자막을 다양한 언어로 번역하는 앱
          + ""사용자 키 가져오기"" 모델을 선택하는 두 가지 주요 이유
               o 낮은 유지보수: 많은 소프트웨어를 유지 보수하고 있어 사이드 프로젝트를 유지보수하고 싶지 않음
               o 낮은 비용: 광고 없이 앱을 배포할 수 있으며, 운영 비용을 낮출 수 있음
          + 유지보수 부담과 사용자 비용을 최소화하면서 유용한 도구를 만들고 공유할 수 있음
     * 사용자가 자신의 키를 가져오는 상황에서는 문제가 되지 않음
          + 클라이언트 측에서 작업이 이루어지며, 장치나 웹사이트가 손상되지 않는 한 괜찮음
          + 그러나 개발자가 생산 키를 클라이언트 측에서 사용하는 경우 공격 표면이 증가할 수 있음
          + 편의성과 성능을 이유로 보안 고려 없이 이 작업을 수행할 수 있음
     * JWT를 지원하지 않는 이유를 이해하지 못함
          + Supabase는 안전한 클라이언트 측 접근을 제공하는 좋은 예시임
     * Anthropic과 모든 AI 벤더는 ""Login with ___"" 기능을 구현해야 함
          + 사용자가 자신의 AI 리소스를 신뢰할 수 있도록 해야 함
          + 대부분의 사용자는 API 키를 생성하고 로드하는 것을 번거로워하며 안전하게 관리할 수 없음
     * 사용자가 자신의 키를 가져오는 경우 OAuth가 더 나은 솔루션임
          + 일부 개발자는 실제 키를 프론트엔드에 하드코딩하고 어려움을 겪을 수 있음
          + OAuth는 더 안전한 솔루션임
     * 내부 개발에는 적합할 수 있지만 사용자 대상 앱에는 적합하지 않음
"
"https://news.hada.io/topic?id=16501","HN에 공개: WebGPU를 사용한 오픈소스 배경 제거 Remove-bg","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                HN에 공개: WebGPU를 사용한 오픈소스 배경 제거 Remove-bg

        Hacker News 의견

     * 라이선스 조건을 준수하는 것이 좋을 것 같음
          + BRIA는 고객에게 제한된 시간 동안 비독점적, 비양도적, 개인적 권리와 라이선스를 부여하여 Foundation Model을 설치, 배포 및 사용할 수 있게 함
          + Foundation Model의 기능은 제한적이며, 테스트 및 평가 목적 외에는 사용할 수 없음
          + 고객은 Foundation Model을 판매, 임대, 서브라이선스, 배포 또는 대여할 수 없으며, 다른 사람들이 접근하거나 사용할 수 있도록 호스팅할 수 없음
     * 모델을 로드하기 전에 물어보거나 다운로드 크기를 알려주면 좋겠음
          + 현재 계량된 연결을 사용 중임
     * 로컬 도구가 있어서 좋음
          + 동일한 기술 조합을 사용하는 또 다른 도구: 링크
     * 저장소를 공유해줘서 고마움
          + 코드에 적극적으로 기여할 시간은 없지만, 이미지를 테스트하여 피드백을 공유하고 있음
          + 배경 제거가 다양한 유형의 이미지에서 잘 작동함
          + 배경 제거 후 새로운 이미지가 일부 영역에서 왜곡됨
          + 예를 들어, 아이스크림을 먹는 아이의 사진에서 배경은 완벽하게 제거되었지만 아이에게 많은 아티팩트가 남아 있음
          + 테스트할 다른 영역이 있으면 알려달라고 요청함
     * 이 모델을 사용함: 링크
     * WebGPU 버전의 브라우저 전용 배경 제거 라이브러리를 발표함
          + onnx-runtime을 사용하며, isnet의 가중치를 사용함
          + BirefNet 가중치는 거의 1GB 크기여서 다운로드하기에는 너무 큼
          + 블로그 포스트와 CPU 전용 버전도 있음: 링크
          + 소스 코드: 링크
          + npm에서 사용 가능: @imgly/background-removal
     * 두 번 시도했지만 포기함
          + FireFox에서는 아무것도 하지 않음
          + Chrome에서는 일부 데이터를 로드한 후 실패함
          + GPU 비안전 플래그로 Chrome을 재시작하라고 함
     * 첫 번째로 업로드한 이미지에서 ""Error"" 메시지만 나옴
     * 여러 배경 제거 알고리즘을 시도해봤고, InSPyReNet이 가장 성공적이었음
          + transparent-background를 pip에서 많이 사용하며, remove-bg보다 실패율이 낮음: 링크
     * 프로젝트에 관심을 가져줘서 고마움
          + 피드백을 바탕으로 개선 중임
          + 모바일 지원, iPhone에서 테스트 완료
          + GitHub README 추가
          + 모바일에서 더 쉽게 볼 수 있도록 중간 줌 추가
          + 오류 배너 추가로 더 친숙하고 문제 해결이 쉬워짐
          + README에 문제 해결 섹션 추가
          + UX를 개선할 아이디어가 있으면 알려달라고 요청함
"
"https://news.hada.io/topic?id=16513","면역 시스템은 근육이 아니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            면역 시스템은 근육이 아니다

    죽지 않는 것이 너를 강하게 만든다…

     * 면역 시스템을 근육에 비유하는 사람들이 있음. 하지만 이 비유가 정확한지 의문임.
     * 모든 장애물이 강하게 만드는 것은 아님. 예를 들어, 무릎 연골이 손상되면 완전히 회복되지 않음.
     * 일부 세균 감염은 뇌의 내벽에 영구적인 흉터를 남기고, 생존자에게 낮은 IQ를 남길 수 있음.
     * 바이러스는 다발성 경화증, 알츠하이머병, 치매, 제1형 당뇨병, 특정 유형의 암과 같은 다양한 질병과 연관됨.
     * 면역 시스템은 놀랍고 복잡함. 특정 세포는 이전에 본 침입자를 ""기억""할 수 있음.
     * 예를 들어, 홍역 바이러스는 한 번만 걸릴 수 있지만, 기존의 기억 세포를 파괴하여 다른 질병에 다시 걸릴 수 있게 만듦.

    위생 가설

     * 알레르기는 면역 시스템이 무해한 환경 물질을 공격할 때 발생하는 오작동임.
     * 자가면역 질환은 면역 시스템이 자신의 세포를 공격할 때 발생함.
     * 1989년에 처음 제안된 위생 가설은 이러한 급격한 증가를 설명함.
     * 특정 유형의 미생물은 면역 시스템을 조절하는 데 도움을 줄 수 있음.
     * 인간은 기생충과 공생 박테리아와 함께 진화해 왔음.

    우리의 오래된 친구들

     * 우리의 몸에는 평화로운 (공생) 박테리아가 가득 차 있음.
     * 항생제 사용, 서구식 식단, 제왕절개 출산으로 인해 우리의 미생물 군집이 변화함.
     * 헬민스(기생충) 감염이 알레르기와 자가면역 질환 치료에 유익할 수 있다는 연구가 있음.

    ""군중 감염""은 인간 역사에서 새로운 것

     * ""군중 감염""은 최근 10,000년 동안 발생한 것임.
     * 밀집된 도시와 빈번한 국제 항공 여행은 바이러스가 계속 감염되고 변이할 기회를 제공함.
     * 밀폐된 실내 공간과 빈약한 환기는 감염 확산을 촉진함.
     * 면역 시스템의 많은 부분이 기생충과 싸우는 데 집중되어 있음.

    오래된 친구 가설이 위생 가설보다 더 설명적임

     * 오래된 친구인 기생충과 유익한 미생물은 알레르기와 자가면역 질환의 위험을 줄이는 것과 관련이 있음.
     * 군중 질병은 알레르기와 자가면역 질환을 증가시킴.
     * 면역 시스템을 근육에 비유하는 것은 지나치게 단순화된 것임.

    관련 읽을거리

     * 오래 살기 위한 역겨운 방법: 항염증 치료로서의 기생충?
     * 미생물 '오래된 친구들', 면역 조절 및 사회경제적 상태
     * 헬민스와 자가면역의 위생 가설 풀기
     * 미생물 군집의 놀라움
     * 바이러스: 자가면역 및 신경퇴행성 질환의 침묵의 유발자

    # GN⁺의 정리

     * 이 기사는 면역 시스템의 복잡성과 다양한 병원체가 우리 건강에 미치는 영향을 설명함.
     * 면역 시스템을 근육에 비유하는 것은 지나치게 단순화된 비유임.
     * 오래된 친구 가설은 기생충과 유익한 미생물이 알레르기와 자가면역 질환의 위험을 줄이는 데 도움을 줄 수 있음을 설명함.
     * 군중 감염은 최근에 발생한 현상으로, 밀집된 도시와 빈약한 환기가 감염 확산을 촉진함.
     * 관련된 연구와 읽을거리를 통해 면역 시스템에 대한 이해를 높일 수 있음.

        Hacker News 의견

     * 거의 모든 사람들이 알레르기나 자가면역 질환을 가지고 있음
          + 출산 후 여동생이 셀리악병과 유사한 질환을 겪고 있음
          + 본인은 가끔 습진이 생기다가 이제는 지속적인 발진으로 변함
          + 아내는 몇 년 전 음식 알레르기 검사를 받고 여러 음식을 식단에서 제외함
          + 이 상황이 이상하며, 자가면역 통증을 완화하기 위해 약사가 준비한 식단이 필요해지기 전에 원인을 파악해야 함
     * 연골이 재생되지 않는다는 믿음이 부분적으로는 신화임이 밝혀짐
          + 발목 연골이 무릎이나 엉덩이 연골보다 더 빨리 재생됨
          + 과학적 정확성을 강조하는 기사지만 제목이 오해를 불러일으킬 수 있음
     * 아이들이 감기에 걸리면 면역 체계가 강해진다는 믿음은 잘못된 것임
          + 위생 가설과 ""오래된 친구""에 대한 정보가 중요하지만 잘 알려지지 않음
     * 우리의 면역 체계는 과거의 환경에 맞춰 진화했음
          + 12,000년 전에는 평균 수명이 약 33년이었고, 감염병이 주요 사망 원인이었음
          + 현대의 상황이 그렇게 나쁘지 않음
     * 면역 체계를 근육에 비유하는 것은 부적절함
          + 적응 면역 체계를 활성화하는 것은 잠재적인 좀비 아포칼립스를 막기 위해 Skynet을 작동시키는 것과 같음
          + 면역 체계의 안전 장치와 피드백 루프가 진화했음
     * 100년 후에는 대부분의 인구가 EBV, HSV, CMV, HPV와 같은 바이러스에 영구적으로 감염된 것을 이상하게 여길 것임
     * 군중 감염에 대한 몇 가지 암시가 혼란스러움
          + 수두와 같은 경우, 조기에 통제된 노출이 더 나음
          + 감염을 피하는 것이 최선이지만, 감염될 가능성이 있는 세계에서는 조기에 감염되는 것이 유리할 수 있음
     * 면역 체계는 초기 몇 년 동안 하이퍼뮤테이션 과정을 거침
          + 초기 면역화가 중요하며, 면역 체계는 시간이 지남에 따라 악화됨
     * 호기심에 온라인에서 헬민스를 구매해 자가 감염을 시도함
          + 긍정적이거나 부정적인 결과는 없었지만, 안전하다고 생각함
     * 수막염이 IQ를 5포인트 낮춤
"
"https://news.hada.io/topic?id=16452","텔레그램 창립자 파벨 두로프 프랑스 공항에서 체포","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      텔레그램 창립자 파벨 두로프 프랑스 공항에서 체포

     * 파벨 두로프 체포
          + 파벨 두로프, 텔레그램 메시징 앱의 억만장자 공동 창립자 겸 CEO,가 파리 외곽의 부르제 공항에서 토요일 저녁 체포됨
          + TF1 TV에 따르면, 두로프는 개인 제트기를 타고 여행 중이었으며, 프랑스에서 체포 영장이 발부된 상태였음
          + 두로프는 아제르바이잔에서 출발해 현지 시간으로 오후 8시(그리니치 표준시 오후 6시)쯤 체포됨
     * 두로프의 배경
          + 러시아 태생의 기업가로, 두바이에 거주하며 프랑스와 아랍에미리트의 이중 국적을 보유하고 있음
          + Forbes에 따르면, 두로프의 재산은 약 155억 달러(120억 파운드)로 추정됨
          + 2014년 러시아에서 VK 소셜 미디어 플랫폼의 반대파 커뮤니티를 폐쇄하라는 요구를 거부한 후 러시아를 떠남
     * 러시아 대사관의 대응
          + 텔레그램은 로이터의 논평 요청에 즉각 응답하지 않음
          + 프랑스 주재 러시아 대사관은 상황을 명확히 하기 위해 ""즉각적인 조치""를 취하고 있음
          + TASS는 프랑스 주재 러시아 대사관의 대표를 인용해, 두로프 팀으로부터 대사관에 대한 호소는 없었지만, 대사관이 ""즉각적인"" 조치를 취하고 있다고 보도함
     * 텔레그램의 현황
          + 두로프와 그의 형제 니콜라이가 2013년에 메시징 앱을 설립했으며, 현재 약 9억 명의 활성 사용자를 보유하고 있음
          + 텔레그램은 종단 간 암호화 메시징을 제공하며, 사용자가 정보를 빠르게 팔로워에게 전파할 수 있는 ""채널""을 설정할 수 있음

GN⁺의 정리

     * 파벨 두로프의 체포는 텔레그램 사용자와 소셜 미디어 업계에 큰 충격을 줄 수 있음
     * 텔레그램의 종단 간 암호화 기능은 사용자 프라이버시 보호에 중요한 역할을 하고 있음
     * 두로프의 체포가 텔레그램의 운영에 어떤 영향을 미칠지 주목할 필요가 있음
     * 비슷한 기능을 제공하는 메시징 앱으로는 Signal과 WhatsApp이 있음

        Hacker News 의견

     * 프랑스가 Telegram 운영자 Pavel Durov를 체포한 이유가 명확하지 않음
          + Telegram 운영 자체가 문제인지, 협조 요청을 거부한 것인지 불분명함
     * 서방 국가들은 일반적으로 로컬 백도어 없는 메시징을 원하지 않음
          + 국경에서의 괴롭힘이 일반적이며 체포는 드문 일임
     * Durov는 협조하지 않은 혐의로 기소됨
          + 테러, 마약, 노예와 직접 관련된 혐의는 없음
     * 프랑스 판사들이 Durov가 해독할 수 없는 채팅을 해독하지 못한 것에 대해 유죄를 입증할 방법이 불분명함
     * Telegram은 단순한 메시징 앱이 아니라 Twitter와 같은 플랫폼임
          + 수백만 명의 구독자를 가진 채널이 있음
          + E2EE 통신을 지지하지만, 정부가 불법 채널을 통제하는 것은 정당하다고 생각함
     * Durov는 프랑스 여권을 소지하고 있어 프랑스 시민으로 기소될 것임
          + 프랑스에서 감시 대상임을 알고 있었음에도 불구하고 프랑스로 갔다는 점이 이상함
     * Telegram 소식통에 따르면 Durov는 프랑스에서 최대 20년형에 처할 수 있음
          + 마약 밀매, 조직 범죄와의 협력, 아동 성범죄 은폐, 사기 및 돈세탁 혐의가 있음
     * Toncoin의 가격이 급락한 이유가 이 뉴스 때문임
          + Durov가 테러, 마약, 사기, 돈세탁, 해적 행위 및 아동 착취와 관련된 혐의로 체포됨
"
"https://news.hada.io/topic?id=16478","NSA, Grace Hopper 제독의 "미래의 가능성: 데이터, 하드웨어, 소프트웨어, 사람" 강연 공개 (1982년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NSA, Grace Hopper 제독의 ""미래의 가능성: 데이터, 하드웨어, 소프트웨어, 사람"" 강연 공개 (1982년)

     * 2024년 8월 26일, 미국 국가안보국(NSA)은 Grace Hopper 제독이 1982년 8월 19일 NSA 직원들에게 했던 ""미래의 가능성: 데이터, 하드웨어, 소프트웨어, 사람"" 강연의 디지털 사본을 공개함
     * 이 강연은 기술의 기초 원칙, 리더십에 대한 가치 있는 관점, 컴퓨터 과학과 수학 분야에서 도전 과제를 극복한 경험 등을 강조함
     * Grace Hopper 제독의 유산은 STEM 분야 여성들에게 길을 비추며 정보 기관 전반에 걸쳐 계속 울려 퍼지고 있음

GN⁺의 의견

     * Grace Hopper 제독은 컴퓨터 과학 분야의 선구자로, 특히 프로그래밍 언어 COBOL의 개발에 크게 기여했음. 그녀의 업적과 리더십은 오늘날까지도 많은 사람들에게 영감을 주고 있음
     * 이 강연은 40년 전에 이뤄졌지만, 그 내용은 여전히 유효함. 기술은 빠르게 발전하고 있지만, 기본 원칙과 도전 과제를 극복하는 자세는 변하지 않음
     * 특히 여성이 STEM 분야에서 활약하기 어려웠던 시대에 Grace Hopper 제독이 보여준 리더십과 도전 정신은 오늘날 STEM 분야의 여성들에게 큰 격려가 될 것임

        Hacker News 의견

     * ""큰 물체를 옮길 때 더 큰 황소를 키우는 대신 두 마리의 황소를 사용했음. 컴퓨터 성능을 높일 때도 더 큰 컴퓨터를 사는 대신 여러 대의 컴퓨터를 사용하는 것이 상식적임""이라는 인용문이 인상적임
     * NSA가 적절한 1인치 VTR 기계가 없어 테이프를 공개하지 못했으나, 6주 후에 공개되어 기쁨. 이 테이프는 역사적으로 중요한 자료임
     * 1982년 당시 독성이 있는 폐기물 문제는 중요한 사회적 이슈였음. Rear Adm. Hopper가 언급한 PCB는 ""Valley of the Drums""와 관련이 있을 가능성이 높음
     * 강연 후반부에서 젊은 전문가들에게 긍정적인 리더십을 제공하라는 조언이 인상적임. ""사람은 관리하는 것이 아니라 이끄는 것""이라는 군대의 격언을 인용함
     * 그녀의 유머 감각이 뛰어남. 세계 최초의 컴퓨터 버그 이야기를 들려주며, 당시 위성 사진을 처리하는 데 3일이 걸렸다는 점을 언급함
     * 강연의 첫 번째 부분은 이전에 본 공개 강연과 유사하지만, 두 번째 부분은 1982년 당시 최첨단 주제인 사이버 보안, 소프트웨어 모듈화, VLSI/SoC, 프로그래밍 언어 표준화 등을 다룸
     * 이 강연이 FOIA를 통해 발견된 오래된 테이프 형식의 비디오인지 궁금함
     * 그녀의 유명한 나노초/마이크로초 디오라마가 포함되어 있는지 궁금함
     * 소프트웨어 변경이 시스템에 전파되는 증거가 객체 지향 설계 원칙과 캡슐화의 이론적 정당성을 잘 보여줌
     * 1982년에 이미 깊이 있고 전체적으로 생각한 주제들이 많아 놀라움
"
"https://news.hada.io/topic?id=16508","Diffusion model을 이용하여 DOOM 시뮬레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Diffusion model을 이용하여 DOOM 시뮬레이션

   RL-agent의 DOOM 플레이 데이터를 바탕으로 diffusion 모델을 학습 (next frame prediction)
"
"https://news.hada.io/topic?id=16531","Meta의 Llama는 2023년 이후로 10배 성장했음  - 라마 채택 현황 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Meta의 Llama는 2023년 이후로 10배 성장했음 - 라마 채택 현황 업데이트

주요 내용 요약

     * Llama 모델은 현재까지 약 3억 5천만 건의 다운로드를 기록하여 작년 동기 대비 10배 이상 증가. 지난 한 달 동안만 2천만 회 이상 다운로드 되어 Llama는 주요 오픈 소스 모델 패밀리로 자리 잡음
     * Llama의 주요 클라우드 서비스 공급업체 파트너 전반에 걸친 토큰 볼륨 사용량은 Llama 3.1을 출시한 2024년 5월부터 7월까지 불과 3개월 만에 2배 이상 증가했음
     * 일부 대형 클라우드 서비스 제공업체의 경우 2024년 1월부터 7월까지 Llama의 월간 사용량(토큰 볼륨)이 10배 증가했음

Llama 3.1 출시 후 생태계 성장

     * Llama 3.1 출시와 함께 컨텍스트 길이를 128K로 확장하고, 8개 언어를 지원하며, Llama 3.1 405B로 최초의 프론티어급 오픈 소스 AI 모델을 도입했음
     * 오픈 소스 모델로서의 Llama의 성공은 기업의 다양한 규모에서의 혁신을 촉진함. 스타트업부터 대기업에 이르기까지 Llama를 사용하여 온프레미스 또는 클라우드 서비스를 통해 솔루션을 구축 중임
     * Llama 모델을 공개적으로 제공함으로써 활기차고 다양한 AI 생태계가 탄생했으며, 개발자들은 그 어느 때보다 더 많은 선택권과 역량을 갖게 되었음
     * Llama는 18개월 만에 단일 기초 모델에서 개발자들을 위한 완전한 참조 시스템으로 발전함. Llama 3.1은 개발자들이 맞춤형 에이전트를 쉽게 만들 수 있도록 돕는 보안 및 안전 도구를 포함하고 있음

오픈 소스에 대한 메타의 비전과 약속

     * Llama 3.1 출시와 함께 마크 저커버그는 오픈 소스 AI의 장점에 대한 공개 서한을 공유하며 오픈 접근 방식에 대한 비전과 약속을 더욱 공고히 했음
     * 오픈 소스는 메타의 DNA에 새겨져 있으며, Llama는 책임감 있는 방식으로 연구 결과를 공유하겠다는 약속을 구현하고 강화하고 있음
     * 오픈 소스는 소비자, 기업(메타 포함), 궁극적으로 세계에 좋은 보다 경쟁력 있는 생태계를 촉진함

선도적인 오픈 소스 모델로 성장

     * Llama 생태계가 급속도로 성장하고 있음. Llama 모델은 Hugging Face에서 현재까지 약 3억 5천만 건의 다운로드를 기록하고 있으며, 이는 약 1년 전 대비 10배 이상 증가한 수치임
     * 지난 달에만 Hugging Face에서 2천만 회 이상 다운로드되었음. 이는 Llama 성공 스토리의 한 부분일 뿐이며, 파트너사의 서비스를 통해서도 다운로드되고 있음
     * 주요 클라우드 서비스 제공 파트너 전반에 걸쳐 호스팅된 Llama 사용량(토큰 볼륨)이 2024년 5월부터 7월까지 Llama 3.1 출시 이후 2배 이상 증가했음

파트너십 확대 및 수요 급증

     * Llama 3.1과 함께 초기 액세스 프로그램의 파트너 수가 5배 증가했으며, 파트너로부터의 수요 급증에 부응하기 위해 더 많은 노력을 기울일 예정임
     * Wipro, Cerebras, Lambda 등 많은 기업들이 향후 LEAP 및 Llama 통합 파트너가 되기를 희망하고 있음

Llama의 다양한 적용 사례

     * Accenture: ESG 보고를 위한 맞춤형 LLM 구축에 Llama 3.1을 사용하여 기존 방식 대비 생산성 70%, 품질 20-30% 개선 기대
     * AT&T: Llama 모델 파인튜닝을 통해 고객 관리 개선. GenAI 도입으로 AT&T 고객 관리 관련 검색 응답이 약 33% 개선되었으며 비용 절감 및 응답 시간 단축
     * DoorDash: 소프트웨어 엔지니어의 일상 업무 간소화 및 가속화를 위해 Llama 사용
     * Goldman Sachs: GS AI Platform을 통해 엔지니어들이 Llama 모델을 안전하고 책임감 있게 다양한 사용 사례에 활용
     * Niantic: AR 게임 Peridot의 가상 세계를 구현하기 위해 Llama 통합. 실시간 반응 생성으로 역동적이고 고유한 상호작용 제공
     * Nomura: AWS의 Llama를 사용하여 혁신 속도 향상, 투명성, 편향 방지, 강력한 성능 등 주요 이점 확보
     * Shopify: LLaVA를 기반으로 한 Llama 등 최고 수준의 오픈 소스 모델 실험 지속. 현재 제품 메타데이터 및 개선 작업을 지원하기 위해 하루 4천만~6천만 건의 LLaVA 추론 수행 중
     * Zoom: 자체 모델과 Llama를 포함한 폐쇄형 및 오픈 소스 LLM을 사용하여 AI 컴패니언 구동. 사용자에게 미팅 요약, 스마트 녹음, 후속 조치 등을 제공

활성화된 오픈 시스템

     * Llama는 개방성, 수정 가능성, 비용 효율성 측면에서 선도적인 역할을 하고 있음
     * AI의 혜택이 모든 사람에게 확대되도록 하기 위해 오픈 소스로 구축하는 데 전념하고 있음
     * LLM은 어려운 질문에 답하고, 생산성을 높이며, 창의성을 불러일으키는 데 도움이 될 수 있음. Llama 생태계가 확장됨에 따라 Meta AI의 기능과 접근성도 확대되고 있음

GN⁺의 의견

     * Llama의 빠른 성장과 채택은 오픈 소스 AI 모델에 대한 수요가 높아지고 있음을 보여줌. 기업들은 비용 효율적이면서도 높은 품질의 AI 모델을 원하고 있으며, Llama가 이를 충족시키고 있음
     * 다만 오픈 소스 모델 사용 시 편향성, 윤리성, 보안 등의 이슈를 고려해야 함. 기업들은 이를 위한 거버넌스 체계를 마련하고, 모델 사용에 대한 가이드라인을 수립할 필요가 있음
     * 경쟁이 치열한 AI 모델 시장에서 Llama의 개방적 접근 방식은 상업 모델과 비교해 품질 면에서 뒤처지지 않음을 입증하고 있음
     * Llama의 빠른 채택과 높은 인기는 AI 및 개발 커뮤니티에서 오픈 소스의 가치와 영향력을 다시 한번 확인시켜 줌. 이는 앞으로의 AI 개발 방향에 중요한 영향을 미칠 수 있음
     * 향후 Llama와 같은 오픈 소스 모델과 API 기반 모델이 상호 보완적으로 발전해 나갈 것으로 예상됨. 기업들은 자신들의 니즈에 맞는 적절한 모델을 선택하고, 이를 효과적으로 활용할 수 있는 역량을 갖추는 것이 중요할 것임
"
"https://news.hada.io/topic?id=16409","ShadPS4 – PlayStation 4 에뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ShadPS4 – PlayStation 4 에뮬레이터

     * shadPS4는 윈/맥/리눅스에서 작동하는 초기 PlayStation 4 에뮬레이터
     * C++로 작성되었고, 현재 개발 중이며, Sonic Mania, Undertale, Dysmantle 등 작은 게임들이 작동 중임

  왜 시작했는가

     * 이 프로젝트는 재미로 시작했으며, 제한된 자유 시간으로 인해 shadPS4가 제대로 작동하기까지 시간이 걸릴 예정임
     * 작은, 정기적인 커밋을 시도 중임

  자매 프로젝트

     * Panda3DS: 공동 저자 wheremyfoodat의 멀티플랫폼 3DS 에뮬레이터
     * hydra: Paris의 멀티시스템, 멀티플랫폼 에뮬레이터 (chip-8, GB, NES, N64)

GN⁺의 정리

     * shadPS4는 초기 단계의 PlayStation 4 에뮬레이터로, 다양한 운영체제에서 작동함
     * 현재 작은 게임들이 작동 중이며, 개발이 진행 중임
     * 프로젝트는 재미로 시작되었으며, 정기적인 업데이트를 통해 발전 중임
     * 에뮬레이터 개발에 관심 있는 사람들에게 유용할 수 있음
     * 비슷한 기능을 가진 다른 프로젝트로는 Panda3DS와 hydra가 있음

        Hacker News 의견

     * PS4 에뮬레이터가 PCSX2 같은 에뮬레이터인지, Wine 같은 호환성 레이어인지에 대한 질문
          + PS4는 x86 컴퓨터와 유사하여 시스템/그래픽 API 구현이 주요 작업일 것이라는 의견
          + x86 PC와 PS4 간의 주요 하드웨어 차이점이 있는지에 대한 의문
     * 에뮬레이터는 매우 멋진 프로젝트라는 의견
     * 이 에뮬레이터가 Bloodborne 캐릭터 화면까지 도달한 첫 번째 PS4 에뮬레이터라는 정보
     * DXVK의 Gnm/Gnmx 버전을 만든 것인지에 대한 질문
     * 에뮬레이터 설계 방법과 학습 리소스에 대한 질문
     * 현재 Sony의 휴대용 옵션이 부족한 상황에서 Steam Deck에서의 실행 가능성에 대한 흥미로운 프로젝트라는 의견
     * 이전 시도와 이 프로젝트의 차이점을 강조하는 설계 문서나 리소스가 있는지에 대한 질문
     * 현대 콘솔이 기본적으로 PC 시스템으로 간소화되면서 에뮬레이션 개발이 더 쉬워졌는지에 대한 궁금증
     * Bloodborne을 PC에서 플레이할 수 있는 꿈이 가까워졌다는 의견
     * Mac에서 PS4 게임 저장 매체를 읽는 방법에 대한 질문
"
"https://news.hada.io/topic?id=16412","OpenAI, GPT-4o 파인튜닝 기능 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       OpenAI, GPT-4o 파인튜닝 기능 출시

     * 이제 특정 사용 사례에 대해 더 높은 성능을 더 낮은 비용으로 얻기 위해 GPT-4o를 사용자 정의 데이터 세트로 파인 튜닝 가능
          + 파인 튜닝을 통해 모델은 응답의 구조와 어조를 사용자 정의하거나, 복잡한 도메인별 지침을 따를 수 있음
          + 학습 데이터 세트에서 불과 몇 십 개의 예제만으로도 강력한 결과를 얻을 수 있음
     * 9월 23일까지 모든 조직에 하루 100만 개의 학습 토큰을 무료로 제공
     * 모든 유료 플랜 사용중인 개발자에게 제공됨
          + 파인 튜닝 대시보드에서 Create를 클릭하고 기본 모델 드롭다운에서 gpt-4o-2024-08-06을 선택
          + GPT-4o 파인 튜닝 학습 비용은 백만 토큰당 $25이며, 추론 비용은 백만 입력 토큰당 $3.75, 백만 출력 토큰당 $15임
"
"https://news.hada.io/topic?id=16429","Ask GN: 이번 주말에 뭐 하시나요? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   일.일.. 입니다.
"
"https://news.hada.io/topic?id=16481","불필요한 요소 제거의 중요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            불필요한 요소 제거의 중요성

     * 제품, 프로젝트 또는 회사가 불필요하게 복잡해진다는 느낌이 들 때, 그 문제를 해결하는 가장 좋은 방법 중 하나는 '필수적이라고 여겨졌던 부분'을 제거하는 것임
     * Pinecone의 사례를 통해 복잡함을 줄이는 것이 어떻게 더 나은 결과를 가져올 수 있는지 설명

계산기

     * 사용 기반 요금제의 복잡성
          + 사용 기반 요금제는 사용자가 제품 비용을 미리 정확하게 알 수 없다는 어려움이 있음
          + 많은 회사들처럼 Pinecone은 잠재 고객이 자신의 사용 패턴에 따라 비용을 추정할 수 있도록 가격 페이지에 계산기를 추가함
          + 하지만 사용자들과의 대화를 통해 계산기가 너무 민감하고 혼란스러워서 실제보다 최대 1,000배 높은 추정치를 제공할 수 있다는 문제를 발견함
          + 이로 인해 사용자가 잘못된 결정을 내리고, 제품 사용을 포기하는 상황이 발생함
     * 수정 시도와 그 한계
          + 계산기를 수정하려는 시도가 이어졌지만, 설명, 면책 조항, 기본값 등을 추가할수록 오히려 혼란이 더 커짐
          + 회사 내부에서 계산기와 관련된 논의가 550개 이상의 메시지를 생성하고, 수천 단어의 문서와 수십 시간의 회의를 초래함
     * 계산기 제거 실험
          + 결국, 누군가가 '계산기가 정말 필요한가?'라는 질문을 던졌고, 이를 계기로 계산기를 제거하는 A/B 테스트를 진행함
          + 테스트 결과, 계산기 제거가 사용자에게 더 나은 결과를 가져왔음을 확인함
          + 계산기가 없는 버전의 방문자가 계산기가 있는 버전의 방문자보다 16% 더 회원 가입을 하고, 90% 더 많이 연락을 취함
          + 가격에 대한 지원 요청도 증가하지 않았고, 사용자들이 전반적으로 더 덜 혼란스러워하고 만족스러워함
          + 내부 설문조사에서는 10명 중 7명이 계산기가 있는 버전이 더 나을 것이라고 생각했음

질문하고 제거할 용기

     * 문제 해결을 위한 추가보다 제거의 필요성
          + 대부분의 사람들은 문제를 해결할 때 추가적인 조치를 취하는 것에 익숙하지만, 사실 제거가 더 좋은 해결책일 수 있음
          + 제거의 이점이 크더라도 명백한 옵션으로 보지 않음
     * 복잡성이 추가되면 그것이 가치가 없더라도 그대로 남아 있는 경우가 많음
          + 추가하는 것에 대한 보상이 더 크고, 제거하는 것에 대한 인센티브가 거의 없음
          + 자신이 추가한 것이 가치가 없다고 인정하기 싫어함
          + 다른 사람이 추가한 것을 공격하는 것처럼 보이기 싫어함
          + 존재하는 것은 좋은 이유가 있다고 생각하고 재검토하지 않음
     * 우리는 기존의 것들을 제거할 때 발생하는 불안감 때문에 제거를 두려워하지만, 과감한 제거가 더 나은 결과를 가져올 수 있음
     * 복잡한 문제에 직면했을 때, ""이것을 제거해도 문제가 없을까?""라는 질문을 던져볼 필요가 있음

GN⁺의 의견

     * 이 글은 복잡성을 줄이는 것이 얼마나 중요한지 강조하고 있음. 복잡한 시스템이나 제품이 고객과 사용자에게 불필요한 혼란을 줄 수 있으며, 이를 해결하기 위해 과감한 결단이 필요함을 보여줌
     * 복잡한 시스템을 유지하는 이유 중 하나는 그것이 존재하는 이유가 있다고 생각하기 때문임. 하지만, 오히려 이런 요소들이 문제를 더 악화시킬 수 있음
     * 이러한 관점은 특히 소프트웨어 개발, 프로젝트 관리 및 제품 설계에서 중요한 교훈을 제공함. 복잡성을 제거함으로써 더 나은 사용자 경험과 더 높은 성과를 얻을 수 있음
     * 이와 비슷한 접근법으로, ""가장 단순한 것이 가장 강력하다""는 원칙을 기억할 필요가 있음. 추가적인 기능이나 복잡한 구조를 통해 문제를 해결하려 하기보다는, 불필요한 요소를 제거하는 것이 더 나은 결과를 가져올 수 있음

        Hacker News 의견

     * 계산기가 좋았는지 나빴는지 모르겠지만, 논리는 겉보기에 터무니없음
          + 계산기를 보지 않은 방문자가 더 많이 가입하고 연락했음
          + 단기적인 A/B 테스트로는 장기적인 영향을 알 수 없다고 주장함
          + 검색 결과에서 정보를 제거한 후 클릭률이 증가한 사례를 언급함
     * 이 게시물의 지혜를 널리 퍼뜨리기 위해 추천함
          + 초기 단계 프로젝트에서 미래 가치를 예측하기 어려움
          + SQL 스키마에 추가 메타데이터 열을 추가한 경험을 공유함
          + YAGNI 원칙에 따라 제거되었지만 나중에 다시 필요해졌음
          + 가치를 잃는 것보다 얻는 것을 고려하는 것도 중요함
     * 내부 설문조사에서 70%가 계산기가 더 나을 것이라고 생각함
          + 30%가 계산기가 나쁜 아이디어라고 생각하는 것은 큰 문제를 시사함
          + 정치적 이유로 다른 팀을 비판하지 않는 경향이 있음
          + 이 경우 문제를 인식하고 해결한 것으로 보임
     * 작성자에게 자신의 조언을 따르라고 제안함
          + ""Psst... Get the next post in your inbox"" 중단 메시지를 제거하라고 권장함
          + 페이지에 다섯 가지 구독 방법이 있음
          + 사용자에게 존중을 보여주는 것이 중요함
     * 일반적인 메시지는 흥미로움
          + 잘못된 입력으로 인해 1000배 과대평가될 수 있다는 점을 지적함
          + 실제 사용에서 잘못된 평가로 인해 큰 비용이 발생할 수 있음
          + 도구를 제거하면 등록은 증가하지만 고객에게는 도움이 되지 않을 수 있음
     * 전용 Slack 채널이 생성되어 많은 의견이 모였음
          + 과도한 인력 채용의 증상으로 보임
          + 합의를 이루기 위해 너무 많은 시간이 소요됨
     * 고객이 유용하게 모델링할 수 없는 복잡한 가격 체계를 제거하는 것이 더 나을 수 있음
     * 회사에 250개의 제품이 있지만 5개가 80%의 수익을 차지함
          + 주요 제품의 개발 팀이 과도하게 부담을 받고 있음
          + 회사의 정치적 이유로 비효율적인 구조가 유지되고 있음
     * 비슷한 경험을 공유함
          + 제품 선택을 돕기 위한 어드바이저 앱을 만들었지만 전환율이 떨어짐
          + FAQ 섹션으로 이동했지만 거의 사용되지 않음
     * Pinecone의 가격이 비싸다는 점을 지적함
          + 계산기를 제거하는 것이 핵심 문제를 해결하지 않음
          + 가격 비교를 어렵게 만들어 사용자가 충분히 이해하지 못한 채 데이터를 업로드하게 만듦
          + 가격 투명성이 중요하며, 계산기의 정확성과 사용성을 개선하는 것이 더 나은 접근 방식임
"
"https://news.hada.io/topic?id=16497","매일 테스트되는 무료 공공 API 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         매일 테스트되는 무료 공공 API 모음

무료 공개 API 모음

  소개

     * 학생과 개발자를 위한 222개의 무료 공개 API 모음
     * 매일 테스트됨
     * 다양한 카테고리 제공

  카테고리

     * 동물, 예술, 개발, 오락, 환경, 금융, 음식 및 음료, 게임, 지리 데이터, 건강, 언어, 음악, 자연, 공공 데이터, 비밀, 영적, 스포츠, 스위스, 교통, 여행, 날씨 등

  최고의 API

     * 건강 점수가 가장 높은 API
     * 건강 점수는 지연 시간, 오류율 및 신뢰성을 기준으로 계산됨

    Useless Facts API

     * 무의미한 사실을 제공하는 HTTP API
     * 언어 및 콘텐츠 유형 사용자 정의 가능
     * APIv1은 더 이상 사용되지 않음
     * 3개의 엔드포인트, 100점 API 건강

    JSONPlaceholder

     * 테스트 및 프로토타이핑을 위한 무료 가짜 API
     * 매월 약 30억 건의 요청 처리
     * 3개의 엔드포인트, 100점 API 건강

    Rick and Morty API

     * Rick and Morty 쇼의 캐릭터, 장소 및 에피소드 정보 제공
     * GraphQL 및 REST 엔드포인트 지원
     * 3개의 엔드포인트, 100점 API 건강

    YesNo Generator

     * 무작위 'Yes' 또는 'No' 응답 생성
     * 1개의 엔드포인트, 100점 API 건강

    Open Meteo

     * 오픈 소스 날씨 API
     * 비상업적 사용을 위한 무료 접근 제공
     * API 키 필요 없음
     * 2개의 엔드포인트, 100점 API 건강

    Postcodes.io

     * 무료 영국 우편번호 조회 API 및 데이터셋
     * 우편번호 검색, 검증 및 역지오코딩 제공
     * 오픈 소스 프로젝트
     * 2개의 엔드포인트, 100점 API 건강

    Public Holiday API

     * 공휴일 데이터를 위한 API
     * 100개 이상의 국가 지원
     * 공휴일 및 긴 주말 정보 제공
     * 1개의 엔드포인트, 100점 API 건강

    kanye.rest

     * 무작위 Kanye West 인용구를 제공하는 무료 REST API
     * 1개의 엔드포인트, 100점 API 건강

    Harry Potter API

     * 해리 포터 캐릭터 및 주문 데이터 제공
     * 모든 캐릭터, 특정 캐릭터 ID, 호그와트 학생 및 직원, 하우스 내 캐릭터, 모든 주문 경로 포함
     * 3개의 엔드포인트, 100점 API 건강

    Data Dragon API

     * 리그 오브 레전드 챔피언, 룬 및 아이템 관련 정보와 이미지를 제공하는 정적 데이터 API
     * 개발자가 게임 관련 정보를 애플리케이션에 통합할 수 있도록 데이터 파일 접근 및 다운로드 가능
     * 1개의 엔드포인트, 100점 API 건강

    IP Geolocation API

     * IP 주소를 기반으로 지리적 위치 데이터를 제공하는 무료 IP 지리 위치 API
     * 언어 및 콜백과 같은 사용자 정의 매개변수 제공
     * 1개의 엔드포인트, 100점 API 건강

    PokéAPI

     * 포켓몬 데이터에 대한 오픈 RESTful API
     * 1개의 엔드포인트, 100점 API 건강

    Global Flood API

     * 1984년부터 최대 7개월 예측까지 5km 해상도의 강 유량 시뮬레이션 제공
     * 1개의 엔드포인트, 100점 API 건강

    Air Quality API

     * 11km 해상도의 오염 물질 및 꽃가루 예보 제공
     * 1개의 엔드포인트, 100점 API 건강

    IP Geolocation & Currency Converter

     * 방문자의 IP 주소를 기반으로 지리적 위치를 결정하는 JSON IP 지리 위치 API
     * 국가, 지역, 도시 및 좌표와 같은 세부 위치 데이터 제공
     * 2개의 엔드포인트, 100점 API 건강

    nekos.best API

     * 완전히 SFW 및 고품질 애니메이션 이미지 및 GIF를 제공하는 RESTful API
     * 3개의 엔드포인트, 100점 API 건강

    Data USA

     * 47,000개 이상의 자동화된 보고서 탐색, 데이터 집계 보기, 데이터 병합 및 다운로드, 보고서 비교 제공
     * 1개의 엔드포인트, 100점 API 건강

GN⁺의 정리

     * 이 기사에서는 학생과 개발자를 위한 다양한 무료 공개 API를 소개함
     * 각 API는 특정 용도에 맞게 설계되었으며, 건강 점수를 통해 신뢰성을 평가함
     * 이러한 API는 개발자가 프로젝트에 쉽게 통합할 수 있도록 다양한 기능과 데이터를 제공함
     * 특히, 오픈 소스 프로젝트와 비상업적 사용을 위한 무료 접근이 많은 API에서 제공됨
     * 비슷한 기능을 가진 다른 프로젝트로는 RapidAPI, Public APIs 등이 있음

   Public Holiday API 이거 유용해보이네요

        Hacker News 의견

     * isevenapi.xyz가 목록에 포함된 것을 기쁘게 생각함
     * 중요한 점은 매일 테스트된다는 것임
     * 샘플 데이터 API를 찾는 데 시간이 오래 걸렸음
     * 무료 API를 유지하는 것은 광고를 팔 수 없기 때문에 어려움
     * 몇 년 전 음악 관련 API를 찾기 위해 깊이 조사했음
          + 다른 프로젝트로 이동했지만 누군가에게 유용할 수 있음
          + OP가 FreePublicAPIs.com에 내 목록을 추가할 수 있음
     * 아시아에서 접근할 때 사이트가 매우 느림
          + 각 카드를 새 탭에서 열 수 없음
          + 느린 서버 또는 잘못된 Nuxt 구현일 수 있음
     * 공개 API를 사용한 후 오프라인이 되어 책에 예제를 사용할 수 없었던 경험이 있음
          + 현재는 내가 제어하는 서브도메인에 API를 배포함
     * 이 목록을 북마크해둠
          + 건강 체크가 누락됨
     * 무료 IP Geolocation API에 대한 질문
          + IP 주소의 지리적 위치를 어디서 얻는지 궁금함
     * 어떤 API에 비용을 지불하는지 궁금함
     * 대부분의 API가 파일 형태로 제공되는 것이 더 나을 것 같음
     * 이 목록이 마음에 듦
          + 사람들이 API를 찾을 수 있게 할 뿐만 아니라 다른 사람들이 API를 만들고 유지하도록 장려함
          + 서비스가 알려지지 않을 것 같으면 만들 동기가 부족함
          + 스폰서십에 대한 논의가 필요할 수 있음
          + 광고 수단이 아닌 공공의 이익을 위해 비용을 부담하는 것임
          + 작동하는 무언가를 만들고 유지 관리에 신경 쓰지 않고 계속 실행되기를 바람
"
"https://news.hada.io/topic?id=16454","Hot Page – 그래픽 사이트 빌더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Hot Page – 그래픽 사이트 빌더

     * HTML, CSS, JavaScript를 사용하여 웹사이트를 쉽게 만들 수 있는 드래그 앤 드롭 코드 편집기
     * ""No code"" 플랫폼의 한계를 극복하고자 만들어졌으며, 자유로운 웹 개발을 지원함
     * 템플릿 없는 웹사이트
          + Hot Page는 템플릿을 전혀 사용하지 않음
          + 모든 페이지의 소스 코드를 보고 복사하여 자유롭게 재사용할 수 있음
     * 무료 웹사이트 생성
          + 간단한 사이트를 무료로 만들고 자신의 도메인을 사용할 수 있음
          + 더 많은 옵션이 필요할 때만 업그레이드하면 됨
     * 오픈 플랫폼 : 언제든지 사이트를 다운로드하여 다른 곳에 호스팅할 수 있음
     * 최신 코드 사용 : 모든 프론트엔드 프레임워크, 커스텀 요소, 코드 스니펫을 사용할 수 있음
     * 빠른 페이지 로딩 : Hot Page는 아마존 클라우드의 글로벌 네트워크에서 제공되어 빠르게 로드됨

        Hacker News 의견

     * Tim이 Hot Page를 만든 창립자임. 이 프로젝트는 오랜 시간 동안 친구들의 도움으로 부트스트랩 방식으로 진행되고 있음
          + Squarespace, Wix와 같은 드래그 앤 드롭 편집기의 편리함을 제공하면서도 HTML 요소, CSS 규칙 등 웹 페이지의 기본 구성 요소와의 연결을 유지하는 것이 목표임
          + Web Components의 도입으로 이 모델이 매우 강력해짐
          + 현재 편집기를 더욱 강력하게 만들기 위한 여러 기능을 개발 중임
          + 새로운 기능 로드맵에는 CSS 속성을 시각적으로 편집하는 방법, 인라인 CSS 편집기, 코드 스니펫 라이브러리, Web Components와의 통합, VS Code 언어 서버 통합 등이 포함됨
          + HN 커뮤니티의 피드백과 마케팅에 대한 의견을 매우 감사하게 생각함
     * Alice in Wonderland를 읽으며 시간을 보낸 경험을 공유함
     * Hot Page가 20년 전 학생 시절을 떠올리게 함
          + 무료 호스팅을 찾다가 Geocities를 발견했지만 원하는 서브도메인 형식이 아니었음
          + 결국 20m.com을 발견했고, 서브도메인 형식으로 웹사이트를 게시할 수 있었음
          + 그 당시 만든 사이트가 아직도 운영 중임
     * aesthetic이 마음에 듦. mmm.page와 비슷한 프로젝트를 떠올리게 함
     * Hotglue에서 영감을 받았다고 언급함
     * 이상한 플래시 트렌드가 다시 돌아와서 기쁨. 너무 오랫동안 깨끗하고 평평한 디자인에 머물러 있었음
     * Geocities 페이지를 떠올리게 해줘서 감사함. ""공사 중"" 회전 표지판을 추가할 수 있는지 물어봄
     * ""about"" 링크가 404 Not Found 오류를 발생시킴
     * 개인적으로 이름이 마음에 들지 않으며, 여성들이 서브도메인에 이름을 넣는 것을 주저할 것 같다고 언급함
     * 가격과 대역폭이 비합리적으로 높다고 생각함
"
"https://news.hada.io/topic?id=16490","Show GN: Morning Call - AI가 모닝콜을 해주는 앱 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: Morning Call - AI가 모닝콜을 해주는 앱 출시

   시간을 지정하면 해당 시각에 전화를 통해 모닝콜을 해주는 아이폰 앱입니다.
   모닝콜을 받으면 AI로 만든 목소리로 현재시각, 오늘의 날씨와 뉴스 등을 알려줍니다.

주요특징

     * 원하는 시각에 모닝콜 예약을 하면 해당 시각에 전화가 옵니다.
     * 모닝콜 수신하면 현재시각과 오늘의 날씨, 뉴스정보를 AI 목소리가 읽어줍니다.
     * 반복 설정을 하면 5분~20분 간격으로 여러 번 모닝콜을 해줍니다.
     * 목소리를 선택할 수 있습니다. (Alloy, Nova)
     * 실제 모닝콜 기상을 하기 전에 앱 내에서 모닝콜 체험을 해보실 수 있습니다.
     * voip 전화 기반이라 앱을 강제 종료해도 전화가 수신 됩니다. (백그라운드에서 배터리를 먹지 않습니다)

   전화는 voip로 애플 콜킷과 서버를 이용했고,
   AI 컨텐츠와 목소리는 날씨나 뉴스 api들 결과를 OpenAI 쪽 api들로 가공하여 들려줍니다.

   개인적으로 아이폰에서 알람앱이 잘 작동을 안할 때가 많았는데, 이 앱을 만들어서 써보니까 익숙해진 알람소리들보다 전화소리가 저를 더 잘 깨워줬습니다.

   아직 미숙한 부분들이 좀 있지만 피드백 맞춰서 계속 개선해 나아갈 예정입니다.
   유저수를 모아보려고 사이드로 만들어본거라 지금은 광고도 요금제도 딱히 없습니다.
   앱 내에서 피드백도 많이 주시면 감사하겠습니다!

   너무 좋은 앱이에요! 디자인을 대중적이고, 귀엽게 개선하면 글로벌로 대박치실거예요!

   전화 거는데 비용은 안드시나요?

   apn 이용하는거라 서버비용 말고는 따로 안들어갑니다!

   재밌네요!
   기술적으로 안드로이드에서도 동일하게 구현이 가능할까요?

   넵 현재 반응이 좋아서 개발 중입니다 :)

   재밌는 앱이네요!

   거의 비슷한 아이디어를 구상한적이 있었는데 신기하고 반갑네요. 사용해볼게요~
"
"https://news.hada.io/topic?id=16488","유료 뉴스레터를 구독하면 AI SaaS를 무료로 줍니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     유료 뉴스레터를 구독하면 AI SaaS를 무료로 줍니다

     * Every의 AI SaaS 제공:
          + 연간 $200의 Every 뉴스레터를 구독하면 AI SaaS 도구를 무료로 이용 가능.
          + 개발된 AI SaaS 도구들: Lex (AI 노트 앱), Spiral (AI 콘텐츠 생성/재가공 도구), Sparkle (AI 파일 정리 도구).
     * 제품의 발산과 수렴:
          + 제품은 시간이 지남에 따라 기능이 확장(발산)되었다가, 필수 기능에 집중(수렴)하는 과정을 거침.
          + 예시: Salesforce는 모든 기능을 포함한 CRM으로 시작했지만, 이후 스타트업을 위한 가벼운 CRM 도구들이 등장.
     * 미디어의 발산:
          + 전통 미디어는 창작자의 인정을 받기 어려웠고, 콘텐츠의 자유도도 제한됨. 이로 인해 Substack과 같은 플랫폼이 등장.
          + 일부 창작자들은 Substack을 떠나 더 작은 미디어 스타트업을 설립, 그 중 하나가 Every.
     * Every 창업자들의 배경:
          + Dan Shipper와 Nathan Baschez가 Every를 설립, 초기에는 생산성 팁과 비즈니스 전략 뉴스레터를 제공.
          + 뉴스레터 번들 판매를 실험하여, 하룻밤 사이에 매출이 두 배로 증가.
     * Every의 솔루션:
          + Every는 AI와 생산성 관련 콘텐츠를 제공하는 작가들을 위한 플랫폼을 운영, 여러 유료 뉴스레터를 약간 높은 가격에 구독 가능.
          + ""개별 기여도""라는 독특한 지표로 작가별 영향력을 평가하고 인센티브를 부여.
     * 광고에 의존하지 않는 미디어:
          + Every는 광고에 의존하지 않는 미디어 모델을 구축하는 것을 목표로 함.
     * Every의 SaaS 도구:
          + Spiral: 콘텐츠 처리 AI 도구로, 바이럴 트윗 생성, 적합한 제목 생성, 콘텐츠 요약 등의 기능 제공.
          + Sparkle: 파일 정리 AI 도구로, AI 라이브러리, 메뉴얼 라이브러리, 최근 파일로 파일을 구조화하여 정리.
     * 창작자에게 주는 조언:
          + 글을 쓰는 사람이라면 제품을 만들어보고, 제품을 만드는 사람이라면 글쓰기를 시작해볼 것. 글쓰기를 통해 같은 생각을 가진 사람들을 모으고 제품 성장에 기여할 수 있음.
"
"https://news.hada.io/topic?id=16468","Postgres를 검색엔진으로 활용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Postgres를 검색엔진으로 활용하기

     * Postgres 내에서 시맨틱, 전문, 퍼지 검색을 모두 갖춘 하이브리드 검색 엔진을 구축할 수 있음
     * 검색은 많은 앱에서 중요한 부분이지만 제대로 구현하기 쉽지 않음. 특히 RAG 파이프라인에서는 검색 품질이 전체 프로세스의 성패를 좌우할 수 있음
     * 의미론적(Semantic) 검색이 트렌디하지만, 전통적인 어휘 기반 검색은 여전히 검색의 중추임
     * 의미론적 기술은 결과를 개선할 수 있지만, 견고한 텍스트 기반 검색의 기반 위에서 가장 잘 작동함

Postgres를 활용한 검색 엔진 구현하기

     * 세 가지 기술을 결합:
          + tsvector를 사용한 전체 텍스트 검색
          + pgvector를 사용한 의미론적 검색
          + pg_trgm을 사용한 퍼지 매칭
     * 이 접근 방식은 모든 상황에서 절대적으로 최고는 아닐 수 있지만, 별도의 검색 서비스를 구축하는 것에 대한 훌륭한 대안임
     * 기존 Postgres 데이터베이스 내에서 구현하고 확장할 수 있는 견고한 출발점
     * Postgres를 모든 것에 사용해야 하는 이유 : 그냥 Postgres를 모든 곳에 사용하세요, PostgreSQL로 충분하다, 그냥 Postgres 쓰세요

FTS와 의미론적 검색 구현

     * Supabase에 하이브리드 검색 구현에 대한 훌륭한 문서가 있으므로, 이를 시작점으로 삼을 것임
     * 가이드에 따라 GIN 인덱스를 사용하여 FTS를 구현하고, pgvector(bi-encoder dense retrieval이라고도 함)를 사용하여 의미론적 검색을 구현함
     * 개인적인 경험으로는 1536차원의 임베딩을 선택하는 것이 훨씬 더 나은 결과를 얻을 수 있음
     * Supabase 함수를 CTE와 쿼리로 대체하고, 매개변수 앞에 $를 붙임.
     * 여기서는 RRF(Reciprocal Ranked Fusion)를 사용하여 결과를 병합함
     * 이 방법은 여러 목록에서 높은 순위를 차지하는 항목이 최종 목록에서 높은 순위를 부여받도록 보장함
     * 또한 일부 목록에서는 높은 순위지만 다른 목록에서는 낮은 순위인 항목이 최종 목록에서 높은 순위를 부여받지 않도록 보장함
     * 순위를 분모에 넣어 점수를 계산하면 순위가 낮은 레코드에 불이익을 줄 수 있음
     * 주목할 만한 사항
          + $rrf_k: 첫 번째 순위 항목의 점수가 극단적으로 높아지는 것을 방지하기 위해(순위로 나누기 때문에), 분모에 k 상수를 추가하여 점수를 평활화하는 경우가 많음
          + $ _weight: 각 방법에 가중치를 할당할 수 있음. 이는 결과를 조정할 때 매우 유용함

퍼지 검색 구현하기

     * 이전까지의 방법으로도 많은 부분을 해결할 수 있지만, 명명된 엔티티에서 오타가 있을 경우 즉각적인 이슈가 발생할 수 있음
     * 의미론적 검색은 유사성을 포착하여 이러한 이슈 중 일부를 제거하지만, 이름, 약어 및 의미론적으로 유사하지 않은 기타 텍스트에 대해서는 어려움을 겪음
     * 이를 완화하기 위해 pg_trgm 확장을 도입하여 퍼지 검색을 허용
          + 트라이그램으로 작동함. 트라이그램은 단어를 3자 시퀀스로 분해하기 때문에 퍼지 검색에 유용
          + 이를 통해 오타나 약간의 변형이 포함되어 있더라도 유사한 단어를 매칭할 수 있음
          + 예를 들어 ""hello""와 ""helo""는 많은 트라이그램을 공유하므로 퍼지 검색에서 더 쉽게 매칭될 수 있음
     * 원하는 열에 대해 새 인덱스를 생성하고, 그 후 전체 검색 쿼리에 추가
     * pg_trgm 확장은 % 연산자를 노출하여 유사도가 pg_trgm.similarity_threshold(기본값은 0.3)보다 큰 텍스트를 필터링함
     * 유용한 다른 여러 연산자도 있음.

전문 검색 튜닝하기

     * tsvector 가중치 조정하기 :실제 문서에는 제목뿐만 아니라 내용도 포함됨
     * 열이 여러 개 있어도 임베딩 열은 하나만 유지함
     * 개인적으로 여러 임베딩을 유지하는 것보다 title과 body를 같은 임베딩에 유지하는 것이 성능에 큰 차이가 없다는 것을 발견함
     * 결국 title은 본문의 간단한 표현이어야 함. 필요에 따라 이를 실험해 보는 것이 좋음
     * title은 짧고 키워드가 풍부할 것으로 예상되는 반면, body는 더 길고 더 많은 세부 정보를 포함할 것임
     * 따라서 전체 텍스트 검색 열이 서로 어떻게 가중치를 부여하는지 조정해야 함
     * 문서에서 단어가 있는 위치나 중요도에 따라 우선순위를 부여할 수 있음
          + A-weight: 가장 중요(예: 제목, 헤더). 기본값 1.0
          + B-weight: 중요(예: 문서 시작 부분, 요약). 기본값 0.4
          + C-weight: 표준 중요도(예: 본문 텍스트). 기본값 0.2
          + D-weight: 가장 덜 중요(예: 각주, 주석). 기본값 0.1
     * 문서 구조와 애플리케이션 요구사항에 따라 가중치를 조정하여 관련성을 미세 조정함
     * 제목에 더 많은 가중치를 부여하는 이유
          + 제목은 일반적으로 문서의 주요 주제를 간결하게 표현하기 때문
          + 사용자는 검색할 때 먼저 제목을 훑어보는 경향이 있으므로 제목의 키워드 일치는 일반적으로 본문 텍스트의 일치보다 사용자의 의도와 더 관련이 있음

길이에 따른 조정

     * ts_rank_cd 문서를 읽어보면 정규화 매개변수가 있다는 것을 알 수 있음.
          +

     두 랭킹 함수 모두 문서의 길이가 순위에 어떤 영향을 미쳐야 하는지 여부를 지정하는 정수 normalization 옵션을 사용함. 정수 옵션은 여러 동작을 제어하므로 비트 마스크임: |를 사용하여 하나 이상의 동작을 지정할 수 있음(예: 2|4).
     * 이러한 다양한 옵션을 사용하여 다음을 수행 가능
          + 문서 길이 편향 조정
          + 다양한 문서 집합에서 관련성 균형 조정
          + 일관된 표현을 위해 랭킹 결과 조정
     * 제목에는 0(정규화 없음), 본문에는 1(로그 문서 길이)을 설정하면 좋은 결과를 얻을 수 있음
     * 다시 말하지만, 사용 사례에 가장 적합한 옵션을 찾기 위해 다양한 옵션을 실험해 보는 것이 좋음

크로스 인코더를 사용한 재랭킹

     * 많은 검색 시스템은 두 단계로 구성됨
     * 즉, 양방향 인코더를 사용하여 초기 N개의 결과를 검색한 다음, 크로스 인코더를 사용하여 이러한 결과를 검색 쿼리와 비교하여 순위를 매김
          + 양방향 인코더(bi-encoder) : 빠르기 때문에 많은 수의 문서를 검색하는 데 좋음
          + 크로스 인코더(cross-encoder)
               o 더 느리지만 성능이 더 좋아 검색된 결과의 순위를 다시 매기는 데 좋음
               o 쿼리와 문서를 함께 처리하여 둘 사이의 관계에 대한 더 미묘한 이해를 가능하게 함
               o 이는 계산 시간과 확장성을 희생하면서 더 나은 랭킹 정확도를 제공함
     * 이를 수행하기 위한 다양한 도구들이 있음
     * 가장 좋은 것 중 하나는 Cohere의 Rerank임
     * 또 다른 방법은 OpenAI의 GPT를 사용하여 자체적으로 구축하는 것임
     * 크로스 인코더는 쿼리와 문서 간의 관계를 더 잘 이해할 수 있도록 하여 검색 결과의 정확도를 높일 수 있음
     * 그러나 계산 비용이 크기 때문에 확장성 면에서는 제한이 있음
     * 따라서 초기 검색에는 양방향 인코더를 사용하고, 검색된 소수의 문서에 대해서만 크로스 인코더를 적용하는 두 단계 접근 방식이 효과적임

언제 대안 솔루션을 찾아야 할까

     * PostgreSQL은 많은 검색 시나리오에 적합한 선택이지만 한계가 없는 것은 아님
     * BM25와 같은 고급 알고리듬의 부재는 다양한 문서 길이를 처리할 때 느껴질 수 있음
     * PostgreSQL의 전체 텍스트 검색은 TF-IDF에 의존하므로 매우 긴 문서와 대규모 컬렉션의 희귀 용어에 어려움을 겪을 수 있음
     * 대안 솔루션을 찾기 전에 반드시 측정해 보아야 함. 그럴 가치가 없을 수도 있음

결론

     * 이 글에서는 기본적인 전체 텍스트 검색부터 퍼지 매칭, 의미론적 검색, 결과 부스팅과 같은 고급 기술까지 많은 내용을 다루었음
     * Postgres의 강력한 기능을 활용하여 특정 요구사항에 맞춘 강력하고 유연한 검색 엔진을 만들 수 있음
     * Postgres는 검색을 위해 가장 먼저 떠오르는 도구는 아니지만 정말 멀리 갈 수 있게 해줌
     * 훌륭한 검색 경험을 위한 핵심
          + 지속적인 반복과 미세 조정
          + 논의한 디버깅 기법을 사용하여 검색 성능을 이해하고, 사용자 피드백과 행동을 기반으로 가중치와 매개변수를 조정하는 것을 두려워하지 말아야 함
     * PostgreSQL은 고급 검색 기능이 부족할 수 있지만, 대부분의 경우 충분히 강력한 검색 엔진을 구축할 수 있음
     * 대안 솔루션을 찾기 전에 먼저 Postgres의 기능을 최대한 활용하고 성능을 측정해 보는 것이 좋고, 그래도 부족하다면 그때 다른 솔루션을 고려해 볼 수 있음

   한글 검색도 잘되는지 궁금하네요.

   오늘 위클리 주제도 Postgres 였는데, 역시나 또 Postgres네요. 확실히 인기에 비례해서 글이 많이 나오는듯 ㅎㅎ
   BM25 는 아래를 참고 하세요

   pg_bm25 - Postgres에서 Elastic 수준의 품질을 제공하는 Full-Text 검색 확장
   ParadeDB - PostgreSQL for Search
"
"https://news.hada.io/topic?id=16523","Show GN: EveryText: AI 생성형 이미지에서, 사전 학습 없이 전세계 모든 언어(문자)를 이미지 생성에 반영/표현하는 기술 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: EveryText: AI 생성형 이미지에서, 사전 학습 없이 전세계 모든 언어(문자)를 이미지 생성에 반영/표현하는 기술 공개

  1. 개요

   AI 기술의 발전이 가속화되면서, 이미지 생성 분야에서도 혁신적인 진전이 이루어지고 있습니다. 그 중심에 ""EveryText""라는 획기적인 기술이 있습니다. 이 기술은 AI 생성형 이미지에서, 사전 학습 없이 전세계 모든 언어(문자)를 이미지 생성에 반영하고 표현할 수 있게 해주는 ""TBF('Text by Font') Image Model""을 기반으로 합니다.

  2. 배경 및 필요성

   최근 AI 이미지 생성 기술의 발전으로, 미드저니V6와 FLUX 같은 플랫폼에서는 사용자가 입력한 텍스트(예: ""HELLO WORLD"")를 이미지에 가시성과 가독성 있게 출력하는 기능을 지원하고 있습니다. 하지만 이러한 기술은 주로 영어에 국한되어 있었습니다.

   이러한 한계를 극복하기 위해 중국의 알리바바 그룹은 중국어, 일본어, 한국어도 지원하는 시스템을 구현했습니다. 이는 전세계 모든 언어를 처리하는 방향으로 기술이 진화할 것이라는 명확한 신호입니다.

  3. 현 문제점

   기존의 방식에는 여러 가지 한계와 문제점이 있었습니다:
    1. 별도 편집 필요: 원하는 텍스트를 이미지에 삽입하기 위해 추가적인 편집 작업이 필요했으며, 이는 시간과 비용 측면에서 비효율적이었습니다.
    2. 학습 의존성: AI로 이미지를 생성할 때 특정 텍스트를 가시적으로 표현하기 위해서는 LORA 등을 이용한 이미지 학습이나 라벨링 작업이 필수적이었습니다.
    3. 리소스 집약적: 미드저니v6, FLUX, Alibaba 그룹의 접근 방식은 많은 GPU 리소스와 시간을 필요로 했습니다.
    4. 제한된 어휘: 사전에 없는 텍스트는 학습할 수 없어 표현이 어려웠습니다.
    5. 언어 제한: 영어 외의 전세계 언어를 처리하기 위해서는 방대한 리소스가 필요했습니다.

  4. 혁신적 문제 해결 접근 방안

   EveryText의 핵심은 ""학습""에 대한 새로운 접근 방식입니다. 기존의 방식이 직접적인 학습을 필요로 했다면, EveryText는 ""Font""를 활용하여 이 문제를 해결했습니다.
    1. Font as Pre-trained Model: 모든 텍스트는 이미 ""Font""에 의해 사실상 라벨링이 포함된 '학습'이 된 상태입니다. EveryText는 이 'Font'를 '학습된 모델링'처럼 사용합니다.
    2. 다양성과 미학: 다양한 언어권의 많은 ""Font""를 적용함으로써, 글꼴의 풍부함과 가시적인 아름다움을 동시에 달성했습니다.
    3. 무제한 표현: ""Font""를 ""학습이 이미 끝난 모델""로 사용함으로써, 사전에 없는 단어라도 입력/출력이 가능한 어떠한 문자라도 표현이 가능해졌습니다.

  5. 서비스 사용법

   EveryText는 누구나 무료로 사용할 수 있습니다. 사용 방법은 다음과 같습니다:
    1. Prompt: 이미지 생성을 위한 기본 설명을 입력합니다.
    2. Text for Image Generation: 이미지에 표시될 텍스트를 입력합니다.
    3. Text Position: 이미지 내에서 텍스트의 위치를 선택합니다.
    4. Text Size: 텍스트의 크기를 조정합니다.
    5. Select Font(Option): 원하는 폰트를 선택합니다.
    6. Advanced Settings(Option): 고급 설정을 통해 이미지 생성 과정을 더 세밀하게 조정할 수 있습니다.
    7. ""START"" 버튼을 클릭하여 이미지를 생성합니다.

  6. 경쟁 기술과의 비교(현재까지 소수의 평가자들 주관적 판단 의견임)

   -미드저니V6/ Flux: Only English 지원 / 이미지 퀄리티 A+ / 텍스트 표현 및 가독성 A

   -AnyText(""알리바바 그룹""): 영어, 중국어, 일본어, 한국어 지원/ 이미지 퀄리티 B / 텍스트 인식 및 가독성 C

   -EveryText: 전세계 모든 언어(문자) 지원 / 이미지 퀄리티 A / 텍스트 인식 및 가독성 B+ -미드저니V6/ Flux: Only English 지원 / 이미지 퀄리티 A+ / 텍스트 표현 및 가독성 A

   EveryText는 전세계 모든 언어를 지원하면서도 높은 이미지 퀄리티와 우수한 텍스트 표현 및 가독성을 제공합니다.

  7. 결론

   EveryText는 AI 생성형 이미지 기술의 새로운 지평을 열었습니다. 사전 학습 없이 전세계 모든 언어를 이미지에 자연스럽게 통합할 수 있는 이 혁신적인 접근 방식은 글로벌 커뮤니케이션과 창의적 표현의 가능성을 크게 확장시켰습니다. 앞으로 EveryText가 다양한 분야에서 어떻게 활용되고 발전해 나갈지 기대됩니다.

  관련 링크

   Huggingface Service: https://fantos-EveryText.hf.space
   Discord Community: https://discord.gg/openfreeai
   문의: arxivgpt@gmail.com
"
"https://news.hada.io/topic?id=16495","Microsoft, Mono Project를 Wine 팀에 기부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Microsoft, Mono Project를 Wine 팀에 기부

     * Mono는 개발자가 크로스 플랫폼 애플리케이션을 쉽게 만들 수 있도록 설계된 소프트웨어 플랫폼임
     * Mono 프로젝트는 2001년에 시작된 .NET 생태계의 중요한 부분이었음
     * 2016년 Microsoft가 Xamarin을 인수하면서 Mono 프로젝트의 관리자가 되었음
     * 최근 업데이트
          + Mono 프로젝트의 마지막 주요 릴리스는 2019년 7월이었으며, 이후 소규모 패치 릴리스가 있었음
          + 마지막 패치 릴리스는 2024년 2월이었음
          + WineHQ 조직이 Mono 프로젝트의 새로운 관리자가 될 것임
          + 기존의 mono/mono 및 다른 저장소의 소스 코드는 계속 사용할 수 있지만, 저장소는 아카이브될 수 있음
          + 바이너리는 최대 4년 동안 사용할 수 있음
     * Microsoft의 Mono 포크
          + Microsoft는 dotnet/runtime 저장소에서 Mono 런타임의 현대적인 포크를 유지하고 있음
          + 작업이 완료되었으며, Mono 사용자와 Mono 기반 앱 프레임워크 유지 관리자는 .NET으로 마이그레이션할 것을 권장함
     * Mono 프로젝트의 역사적 중요성
          + Mono 프로젝트는 Android, iOS, Linux 등 다양한 운영 체제에서 최초의 .NET 구현이었음
          + 여러 운영 체제에서 .NET 플랫폼을 개척했으며, 크로스 플랫폼 .NET을 현실로 만들었음
          + 모든 Mono 개발자들에게 감사의 인사를 전함
     * Mono의 지원
          + Microsoft가 후원하는 Mono는 .NET Foundation의 일환으로 ECMA 표준을 기반으로 한 Microsoft의 .NET Framework의 오픈 소스 구현임
          + 성장하는 솔루션 가족과 활발하고 열정적인 기여 커뮤니티가 Mono를 크로스 플랫폼 애플리케이션 개발의 선두 선택으로 자리매김하도록 돕고 있음

GN⁺의 정리

     * Mono 프로젝트는 크로스 플랫폼 애플리케이션 개발을 가능하게 한 중요한 프로젝트임
     * Microsoft가 관리하던 Mono 프로젝트가 이제 WineHQ로 넘어가면서 새로운 전환점을 맞이함
     * 기존 Mono 사용자들은 .NET으로의 마이그레이션을 고려해야 함
     * Mono는 다양한 운영 체제에서 .NET을 사용할 수 있게 한 선구자적인 프로젝트였음
     * 크로스 플랫폼 개발에 관심 있는 사람들에게 유용한 정보임

   오 저도 짬처리로 보이긴하는데, mac에서 windows용으로 번들링할때 쓸 수 있대서 써보려구요

   짬처리.log

        Hacker News 의견

     * 2000년대 초반 Mono 프로젝트에 참여했던 경험을 공유함. Mono의 목표는 다양한 플랫폼에서 .NET 런타임을 제공하는 것이었음
          + Microsoft가 Xamarin을 인수하고 DotNET Core를 개발하면서 Mono의 역할이 줄어듦
          + Mono는 여전히 Wine과 같은 특정 용도에서 유용함
     * Microsoft가 Wine과 같은 API 재구현 프로젝트를 공식적으로 인정한 적이 없다고 생각했음
          + 2020년에 Microsoft가 Wine을 긍정적으로 언급한 사례를 소개함
     * Second Life의 스크립팅 언어 LSL이 Mono 바이트코드로 컴파일된다는 사실을 공유함
          + 2008년부터 Mono 가상 머신에서 실행됨
     * Wine 개발자들이 Mono를 어떻게 활용할 수 있을지 궁금함
          + Microsoft의 자체 .NET 런타임 멀티플랫폼 구현인 FOSS는 이제 모노보다 훨씬 더 성능이 뛰어나고 기능이 완벽. 하지만 모노는 다른 애플리케이션에 임베드하기 쉽고 새로운 플랫폼으로 이식하기가 더 쉬. 이것이 바로 .NET/Blazor WebAssembly에 사용되는 이유
          + Microsoft는 이러한 특정 사용 사례를 위해 여전히 Mono의 자체 포크를 유지하고 있음. 또한 Mono는 Microsoft가 새로운 .NET 런타임으로 포팅하지 않은 WinForms 및 WPF와 같은 레거시 Windows 데스크톱 GUI 프레임워크 중 일부를 구현. 이것이 아마도 Wine 개발자들이 Mono에 관심을 갖는 이유
     * Microsoft와 Wine의 관계에 대해 의문을 제기함
          + Microsoft가 Wine을 위협으로 생각하는지, 동맹으로 생각하는지 궁금해함
     * 대학 시절 Mono를 사용한 경험을 공유함
          + Java 대신 C#을 선택하고 Mono를 사용하여 OS X에서 실행함
          + Microsoft 직원이 대학에 방문하여 .NET과 C#의 새로운 기능에 대해 설명함
     * Mono 프로젝트 웹사이트의 발표 방식에 대해 불만을 제기함
          + 중요한 발표는 별도의 페이지로 만들어야 한다고 주장함
     * Miguel de Icaza의 현재 활동에 대해 궁금해함
          + 2022년에 Microsoft를 떠난 후 무엇을 하고 있는지 궁금해함
     * Go와 Python을 주로 사용하는 웹 애플리케이션 백엔드 개발자가 .NET 생태계에서 주목할 만한 것이 있는지 질문함
     * Mono가 Wine과 관련된 이유에 대한 링크를 공유함
"
"https://news.hada.io/topic?id=16410","미국 법원, FTC의 경업 금지 계약에 대한 제한 시도를 기각","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   미국 법원, FTC의 경업 금지 계약에 대한 제한 시도를 기각

     * 연방거래위원회(FTC)가 직원들이 경쟁사로 이직하는 것을 금지하는 경쟁금지 약정을 제한하려는 시도에 타격을 줌
          + FTC 위원장인 Lina Khan이 이끄는 FTC는 4월에 이 규칙을 승인하기로 투표했었음
     * 텍사스 북부 지방법원의 Ada Brown 판사는 이 규칙이 ""합리적인 설명 없이 지나치게 광범위하므로 임의적이고 변덕스럽다""고 판결문에서 밝힘
          + FTC에게 이 규칙을 발행할 ""법적 권한이 없다""고 결론 내림
     * FTC 대변인 Victoria Graham은 성명에서 이번 판결에 ""실망했다""고 밝혔지만 ""경쟁금지 약정을 막기 위해 계속 싸울 것""이라고 말함
          + ""잠재적인 항소를 진지하게 고려하고 있으며, 오늘의 판결이 FTC가 사례별 집행 조치를 통해 경쟁금지 약정을 다루는 것을 막지는 않는다""고 말함
     * 경쟁금지 약정 금지 규칙의 내용
          + 9월부터 시행될 예정이었으며, 의료, 엔지니어링, 금융 등 다양한 산업에 영향을 미치는 근로자들이 경쟁사에서 일하거나 경쟁 사업을 시작하는 것을 일정 기간 동안 또는 특정 지역에서 금지하는 조항을 무효화
          + FTC는 이 규칙이 경쟁을 증가시키고, 고용주의 임금 억제 능력을 제한하며, 혁신을 촉발하는 데 도움이 될 것이라고 말함
          + 당시 FTC는 약 3천만 명의 미국 근로자(전체 인력의 20%)가 경쟁금지 조항에 구속되어 있다고 추정함
     * 비즈니스 그룹들은 경쟁금지 약정 없이는 영업 비밀을 보호할 수 없다며 이 금지령에 곧바로 이의를 제기함
          + 또한 FTC가 수백만 건의 계약을 무효화할 수 있는 광범위한 규칙을 발행하면서 법적 권한을 훨씬 넘어섰다고 주장함
     * 플로리다 법원은 이 금지령에 대해 예비 금지 명령을 내린 반면, 펜실베이니아 판사는 FTC가 경쟁금지 약정이 거의 정당화되지 않는다고 합리적으로 결론 내렸다는 이유로 거부함
     * Ada Brown 판사는 FTC가 ""특정하고 유해한 경쟁금지 약정을 겨냥하는 대신"" 사실상 모든 경쟁금지 약정을 금지한 이유를 정당화하지 못했다고 씀
          + ""이 규칙으로 FTC는 고용 관계와 미국 경제에 대해 막대한 권한을 가정했다""고 판결

GN⁺의 의견

     * 경쟁금지 약정은 직원의 이직을 제한하고 경쟁을 저해할 수 있으므로 문제의 소지가 있음. 그러나 동시에 기업의 영업 비밀 보호와 투자 유인 제공 측면에서 긍정적인 역할도 할 수 있음
     * 경쟁금지 약정에 대한 규제는 필요하지만, 모든 경쟁금지 약정을 일률적으로 금지하는 것보다는 과도하거나 불공정한 약정을 선별적으로 규제하는 게 바람직해 보임
     * 핵심 인재 이탈 방지와 공정한 경쟁 촉진 사이의 균형점을 찾는 게 중요함. 예컨대 경쟁금지 약정 기간과 범위를 합리적 수준으로 제한하고, 전직금지에 대한 충분한 보상 지급을 의무화하는 방안 등을 고려해 볼 수 있음
     * 장기적으로는 경쟁금지 약정에 의존하지 않고도 우수 인재를 유치·유지할 수 있는 기업 문화와 인센티브 시스템을 구축하는 게 필요해 보임. 경쟁금지 약정은 어디까지나 보완적 수단이 되어야 함

        Hacker News 의견

     * 미국 상공회의소 회장 Suzanne Clark는 FTC의 비경쟁 계약 금지가 미국 노동자, 기업, 경제에 불리하다고 주장함
     * 한 사용자는 FTC 발표 덕분에 불필요한 비경쟁 계약을 제거할 수 있었음
          + 10년 동안 프리랜서 계약을 묶어두는 비경쟁 계약이 있었음
          + ""이제 이런 계약은 사라질 것이니 없애자""고 말할 수 있었음
          + 이러한 변화는 기업가를 장려하고 경제를 돕는 데 큰 차이를 만듦
     * 비경쟁 계약 금지가 정치적 변화에 따라 쉽게 바뀔 수 있는 규칙임을 지적함
          + 이러한 규칙은 의회가 만들어야 함
          + 비경쟁 계약이 영구적으로 금지되기를 원함
     * 비경쟁 계약 금지는 직원 권리 향상에 가장 큰 기여를 함
     * 캘리포니아는 이미 오래전에 비경쟁 계약을 금지했음
          + 1941년에 금지되었으며, 이를 반박할 충분한 증거가 있음
     * 비경쟁 계약은 현재 National Labor Relations Act에 따라 여전히 불법임
          + NLRB가 현재 해석을 변경하지 않는 한 유지됨
     * 텍사스 북부 지구 법원의 판결은 예견된 것이었음
          + 중요한 것은 항소 과정에서의 판결임
     * ""U.S. Chamber Wins Lawsuit Over FTC Noncompete Agreements Ban"" 기사 링크 제공
     * Lina Khan은 고위 공직자 중 유일하게 공공의 이익을 위해 일하는 사람임
          + 그녀가 아무것도 남기지 않기를 바람
"
"https://news.hada.io/topic?id=16493","Avante.nvim - Neovim 을 Cursor AI IDE처럼 사용하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Avante.nvim - Neovim 을 Cursor AI IDE처럼 사용하기

     * Cursor AI IDE의 동작을 에뮬레이션하도록 설계된 Neovim 플러그인
     * AI 기반 코드 제안을 하고 최소한의 노력으로 소스에 직접 적용 가능
          + AI에게 현재 코드 파일에 대해 질문하고 개선 또는 수정
          + 명령 한번으로 제안한 변경 사항을 소스코드에 바로 적용
     * OpenAI 와 Claude 기본 지원
          + 별도 프로바이더는 옵션 설정을 통해서 가능
     * 개발 예정 :LSP + Tree-sitter + LLM 연동

   Cursor 가 끝판왕인줄 알았는데, zed 등 다른 것들도 있었나보군요..

  이 기사에 대한 Hacker News 의견

     * Cursor를 매우 좋아하지만, 궁극적으로는 좋은 오픈 소스 대안이 곧 이를 대체할 가능성이 높음
          + Cursor는 VSCode의 포크로, AI 기능이 포함된 확장 프로그램을 내장한 것에 불과함
          + 많은 사용자가 자신의 키와 모델 제공자를 선택할 수 있는 옵션을 선호할 것임
     * zed는 오픈 소스이며 러스트 기반으로, 사용자 모델을 사용할 수 있는 매력적인 AI 편집 기능을 제공함
          + zed와 Cursor가 최우선으로 시간을 투자할 목록에 있음
          + zed: https://zed.dev/
          + HN 토론: https://news.ycombinator.com/item?id=41302782
     * aider 커뮤니티 멤버가 만든 neovim 플러그인 있음
          + aider 스타일의 페어 프로그래밍 채팅 UX를 제공하지만, cursor/copilot AI 자동완성 기능은 아님
          + https://github.com/joshuavial/aider.nvim
     * Copilot/Copilot-chat과 어떻게 다른지 궁금해하는 사람들을 위한 정보
     * Cursor와 Claude에 대해 좋은 이야기를 들었지만, 아직 시도해보지 않음
          + LLM을 설명하는 것이 실제 코드를 작성하는 것보다 어렵게 느껴짐
          + 설명하는 과정에서 아이디어를 제대로 이해하거나, 무의미함을 깨닫게 됨
          + Cursor 같은 도구가 코딩 속도를 높이는지 궁금함
          + 설명에서 빠진 부분을 LLM이 어떻게 처리하는지 궁금함
     * AI 지원이 에디터에 빠르게 내장된 것은 경쟁 우위가 아님을 시사함
          + VC 자금이 에디터에 어떻게 사용될지 궁금함
     * Jetbrains IDE를 선호하는 경우 Cody 플러그인이 좋은 대안임
          + Cursor의 AI 통합은 훌륭하지만, 플러그인 품질이 낮고, 네비게이션과 리팩토링이 불편함
          + 초기 단계이지만, 종속성이 복잡해 보여 설치를 꺼림
     * dingllm.nvim은 또 다른 nvim LLM 플러그인임
          + https://github.com/yacineMTB/dingllm.nvim
     * Cursor의 인터페이스가 매우 집중적이고 잘 설계됨
          + 자동완성과 채팅에서 다른 대안보다 눈에 띄게 좋은 결과를 얻음
          + 전체 채팅 응답을 마크다운으로 복사할 수 있는 버튼이 있음
          + VS Code의 모든 기능을 갖추고 있지만, 별도의 작업을 위해 사용할 수 있음
          + 전체 제품을 사용하려면 월 $40이 필요함
          + 고용주가 비용을 부담한다면 적극적으로 사용할 것임
     * 오픈 소스 도구는 항상 다른 초점을 가짐: 기능을 직접 조립할 수 있는 도구 상자를 제공함

   혹시 얘나 nvim.ai(https://github.com/magicalne/nvim.ai) 를 사용해보신 분, 어떤가요?
   직장 동료가 cursor가 좋다며 vscode에서 옮겨갔는데, neovim을 사용하는 입장에선 그저 부럽더군요.

   저도 터미널 유저인데, 부끄럽지만 아직도 AI 관련 기능을 시도해보지 못했어요. 늦었지만, 이런저런 솔류션을 시도해보려합니다. 안그러면, 진짜 늦을것 같아요;;;

   제가 오늘 이 플러그인을 사용해봤는데, 꽤나 편리함을 느꼈습니다. 평소에도 저는 개발 도중에 chatgpt나 claude에 자주 물어보곤 하는데, 이를 neovim 내에서 바로 실행할 수 있다는 점, 내 코드를 자동으로 질문에 포함하여 물어볼 수 있다는 점, 응답에서 온 수정된 코드를 손쉽게 반영할 수 있다는 점이 좋았습니다.
   진즉에 쓸 걸 그랬어요.
"
"https://news.hada.io/topic?id=16422","Midjourney 웹 버전, 이제 모두가 사용 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Midjourney 웹 버전, 이제 모두가 사용 가능

     * Discord만이 아니라 웹에서도 Midjourney를 사용할수 있게 됨
     * 구글 계정 또는 Discord 계정은 필요
     * 일시적으로 Free Trial 도 진행중

   디스코드는 아무래도 불편했죠. 요즘 Flux 도 많이 쓰던데 확실히 경쟁이 좋네요
   https://getimg.ai/models/flux

        Hacker News 의견

     * Ideogram 2.0이 출시되었지만, 해부학적 정확도가 1.0보다 떨어져 실망스러움
          + StableDiffusion 1.5 이후 버전처럼 성능이 저하됨
          + Flux가 공개되어 다행임
          + Midjourney 웹 버전과 Ideogram 2.0이 같은 날 출시되었지만, Flux만큼 주목받지 못함
          + Flux Dev가 놀라운 성능을 보여줌
          + SD 커뮤니티에서 Flux로 하는 작업을 확인해볼 것을 권장함
          + Flux는 미세 조정, Loras, 제어 네트워크 등을 지원함
          + Flux는 다른 도구와 달리 일상 사진을 생성할 수 있음
          + AI 사진임을 알아차리기 어려움
     * 이 회사는 큰 회사들과 달리 제약이 적어 Gen AI 분야에서 주목할 만함
     * 이 기능이 출시되기까지 오래 걸린 것이 놀라움
          + 혼란스러운 Discord 경험을 통해 여기까지 온 것도 놀라움
     * 모든 사람에게 열려 있지만, Google 또는 Discord 계정이 필요함
          + ""모든 사람""의 정의가 바뀐 것 같음
     * 일반 이메일을 사용할 수 없고, 여전히 Discord나 Google 계정이 필요함
     * Flux 출시 이후 Midjourney를 사용하지 않음
     * 여전히 스포크를 그릴 수 없음
          + 스포크 그리기 사이트
     * Midjourney의 요청이 Google의 정책을 준수하지 않아 접근이 차단됨
          + Google의 '보안 브라우저 사용' 정책을 준수하지 않음
          + 웹 브라우저를 통해 로그인 시도 권장
          + 무선 네트워크에 접근하려면 지침을 따를 것
          + 개발자에게 앱이 Google의 '보안 브라우저 사용' 정책을 준수해야 함을 알릴 것
          + 오류 403: disallowed_useragent
     * D&D 캠페인을 위한 풍경 생성에 무료 생성기를 사용했었음
          + 이전에는 수십 번의 수정이 필요했지만, 이번에는 한 번의 프롬프트로 고품질 이미지를 얻음
          + 프롬프트: ""철문이 있는 문, 가벼운 돌 아치에 설치되어 있으며, 부드러운 언덕의 측면에 깊이 박혀 있음. 잊혀진 묘지의 입구처럼 보임. 언덕은 가볍게 나무가 우거져 있고, 계절에 맞는 초목이 있음. 초저녁임.""
          + 결과: 이미지 링크
          + 스타일이 ""판타지 RP 책 일러스트레이션""과 정확히 일치함
     * 웹사이트 기여자가 Twitter에서 기술 질문에 답변 중임
          + Twitter 링크
     * Midjourney 웹 경험이 이제 모두에게 열려 있음
          + 무료 체험도 일시적으로 제공됨
          + Twitter 링크
"
"https://news.hada.io/topic?id=16423","SBAT란 무엇이며 왜 갑자기 모두가 관심을 가지는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SBAT란 무엇이며 왜 갑자기 모두가 관심을 가지는가

SBAT(Secure Boot Advanced Targeting)의 정의

     * UEFI Secure Boot가 처음 지정되었을 때, 모든 관련자들이 다소 순진했음
     * Secure Boot의 기본 보안 모델은 커널 레벨의 권한 환경에서 실행되는 모든 코드가 실행 전에 검증되어야 한다는 것
     * 취약점이 발견된 서명된 구성 요소를 폐기하는 방법이 포함되어 있음
     * 그러나 Secure Boot 생태계에서 작동하는 모든 Linux 배포판은 자체 부트로더 바이너리를 생성하므로, 취약점이 식별되면 폐기해야 할 바이너리가 많음
     * 해시를 저장할 수 있는 공간이 제한되어 있어 SBAT가 개발됨

SBAT의 작동 방식

     * 부트 체인의 모든 중요 구성 요소는 서명된 바이너리에 포함된 보안 생성을 선언함
     * 취약점이 식별되고 수정되면 해당 생성이 증가함
     * 업데이트를 통해 최소 생성을 정의할 수 있음
     * 부트 구성 요소는 체인의 다음 항목을 보고, 이름과 생성 번호를 펌웨어 변수에 저장된 것과 비교하여 실행 여부를 결정함
     * 개별 해시를 많이 폐기하는 대신, 특정 번호 이하의 보안 생성을 가진 grub 버전을 신뢰할 수 없다고 말하는 하나의 업데이트를 푸시할 수 있음

최근 이슈의 원인

     * Microsoft는 특정 수준 이하의 보안 생성을 가진 grub 버전을 신뢰하지 않도록 Windows 업데이트를 내보냄
     * 이는 해당 grub 버전에 Windows 보안 부팅 체인을 손상시킬 수 있는 실제 보안 취약점이 있기 때문
     * 문제는 몇몇 Linux 배포판이 새로운 보안 버전의 grub 버전을 아직 제공하지 않았다는 것
     * Microsoft의 의도는 Windows만 있는 시스템에만 SBAT 업데이트를 적용하는 것이었지만, 이는 의도대로 작동하지 않았음

요약

     * Microsoft는 취약한 grub 버전을 사용하여 Windows를 공격할 수 없도록 하기 위해 Windows 업데이트를 밀어냄
     * 이 업데이트는 이중 부팅 시스템에는 적용되지 않도록 했지만, 무시되었음
     * 일부 Linux 배포판은 grub 코드와 SBAT 보안 생성을 업데이트하지 않았음
     * 결과적으로 일부 사용자는 시스템을 부팅할 수 없게 되었음

비난의 대상

     * Microsoft는 이중 부팅 설정을 정확하게 식별할 수 있도록 더 많은 테스트를 했어야 함
     * 그러나 또한 서명된 부트로더를 제공하는 배포판은 이를 업데이트하고 보안 생성을 업데이트해야 함
     * 이는 다른 운영 체제를 공격하는 데 사용될 수 있는 벡터를 제공하기 때문

결론

     * 갑자기 원하는 OS를 부팅할 수 없게 된 최종 사용자가 피해자가 된 것은 안타까운 일임
     * 이는 절대 일어나서는 안 되는 일임
     * UEFI Secure Boot가 대부분의 최종 사용자에게 이점이 없다고 느끼지만, 사후에 필요한 것을 알게 되는 것은 원하지 않는 일이므로 기본적으로 켜져 있는 Microsoft의 선택에 공감함
     * 이중 부팅 시스템에서 업데이트를 피하려는 실패한 시도를 제외하고는 Microsoft의 선택에 공감함

GN⁺의 의견

     * 이 사건은 보안과 사용자 경험 사이의 균형을 맞추는 것이 얼마나 어려운지 보여줌
     * Microsoft와 Linux 배포판 모두 사용자를 보호하기 위해 최선을 다하고 있지만, 이 과정에서 사용자 경험이 희생될 수 있음
     * 이중 부팅 시스템을 사용하는 사용자의 경우 이러한 문제에 직면할 가능성이 더 높음
     * 따라서 이중 부팅을 사용하는 사용자는 두 운영 체제 모두 최신 버전으로 유지하고 정기적으로 업데이트하는 것이 중요함
     * 장기적으로는 Linux와 Windows 커뮤니티 간의 더 나은 협력과 조정이 필요할 것으로 보임

        Hacker News 의견

     * 최근 Linux Unplugged 에피소드에서 TPM을 사용하여 Linux 부팅 프로세스의 신뢰 체인을 설정하는 방법을 다루었음, Clevis를 사용하여 매우 흥미로웠음
     * Microsoft의 의도는 Windows Update가 Windows 전용 시스템에만 SBAT 업데이트를 적용하고, 듀얼 부팅 설정은 설치된 배포판이 grub을 업데이트하고 SBAT 업데이트를 자체적으로 배포할 때까지 취약하게 남겨두는 것이었음
          + EFI 부팅 순서를 읽으면 shim을 먼저 부팅하라고 명확히 나와 있을 텐데, 무엇이 잘못되었는지 궁금함
          + 듀얼 부팅 설정에서 사용자가 펌웨어 메뉴를 사용하여 Linux 또는 Windows를 선택하는 경우였는지 궁금함
          + 이 문제는 Microsoft의 정당한 수정 사항으로 보이지만, 커뮤니케이션이 좋지 않았음
     * shim 또는 SB의 일반적인 보안 검사 실패 시 오류 메시지가 매우 싫음, 무엇이 정확히 실패했는지와 해결 방법을 알려주었으면 좋겠음
     * MS가 TPM2.0을 강제하고 SBAT 업데이트를 시행하는 이유 중 하나는 광범위한 루트킷 수준의 악성코드가 존재하기 때문이라고 생각함
     * 듀얼 부팅의 현실에 대해, 10년 전 Win7/8/10에서 suspend-to-hiberfile.sys 문제와 업데이트로 인해 grub이 깨지는 문제가 많았음
          + 10년 전부터 Linux만 사용하기로 결정했으며, 필요할 경우 VM을 사용하거나 별도의 예비 컴퓨터를 사용함
          + 이후로 배포판에 Secure Boot를 성공적으로 설정하고, QEMU 성능 및 패스스루를 조정하는 방법을 배웠으며, QEMU macOS VM을 작동시켰음
          + XCode를 유지하기 위해 몇 달마다 업데이트해야 하는 것이 번거롭지만, 전반적으로 만족스러움
     * Linux를 설치할 때 Secure Boot를 비활성화하는 것이 첫 번째가 아닌가?
     * 주요 질문은 거부되는 grub이 완전히 패치되지 않은 것인지, 아니면 배포판에서 ""보안 세대""를 업데이트하지 않고 패치한 것인지임
          + MS가 듀얼 부팅 감지를 시도한 방법에 대해 매우 궁금하며, 누군가(더 숙련된 사람이) 업데이트에서 그 부분을 역공학해주기를 바람
     * Microsoft가 듀얼 부팅 시스템을 깨뜨린 이유는 다른 운영 체제를 공격할 수 있는 벡터를 제공하지 않기 위해서이며, 이는 사회적 계약의 위반임
     * Windows를 시스템에서 제거하고 Linux를 설치하는 데 방해가 되는지, 아니면 Windows를 설치하면 TPM 모듈이 영구적으로 오염되는지 궁금함
     * Windows에서 grub을 업데이트할 수 있는지, 아니면 Secure Boot를 비활성화하고 Linux를 부팅한 다음 업그레이드하고 다시 활성화하는 것으로 충분한지 궁금함
     * MS의 오래된 취약한 grub 설치를 차단하는 입장은 합리적으로 보이지만, 게임과 단일 레거시 소프트웨어를 위해서만 Windows를 사용하며, 네트워크 접속 없이 사용함
          + Windows 업데이트를 허용하는 순간 모든 것이 운에 맡겨짐
          + MS가 레지스트리 키를 이동시키고 ""텔레메트리""(광고 및 행동 데이터 스캔을 위한 ML) 강제를 위해 사용자에게 장난을 치는 것은 충분히 말해줌
          + Windows Pro에서도 이러한 일이 발생하며, Win 10을 사용하고 있음
"
"https://news.hada.io/topic?id=16529","OpenAI는 코드 복원(Unminifying)에 놀라운 성능을 보임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenAI는 코드 복원(Unminifying)에 놀라운 성능을 보임

     * 인터넷을 탐색하던 중 흥미로운 ASCII 아트 컴포넌트를 발견함. 멋져 보였지만 구현 방법을 이해하기 어려웠음
     * 소스 코드를 확인했으나 코드가 축약(Minified)되어 있었음

  축약된 코드 예시

     * 코드 일부는 다음과 같음:
const { floor: ra, abs: KE, min: QE } = Math,
  O5 = [""reactive.network REACTIVE.NETWORK"", ""$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~i!lI;:,^`'. .:â–‘â–’â–“â–ˆ""],
  G7 = Date.now() % 3 ? O5[1] : O5[0],
  V5 = G7.length,
  JE = { fps: 60 };

  ChatGPT에게 코드 설명 요청

     * ChatGPT에게 ""코드를 설명해 달라""고 요청함
     * ChatGPT의 응답:

     제공된 코드는 상당히 복잡하지만, 각 부분과 기능을 이해하기 쉽게 설명하겠습니다.

    개요

     * JavaScript를 사용하여 여러 함수와 컴포넌트를 정의함
     * React 애플리케이션에서 동적 텍스트 콘텐츠를 생성함
     * ASCII 아트 또는 미리 정의된 문자 세트를 사용한 시각적 효과를 생성함

    주요 컴포넌트와 함수

    1. 문자 세트 선택:

const { floor: ra, abs: KE, min: QE } = Math;
const O5 = [""reactive.network REACTIVE.NETWORK"", ""$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~i!lI;:,^`'. .:â–‘â–’â–“â–ˆ""];
const G7 = Date.now() % 3 ? O5[1] : O5[0];
const V5 = G7.length;

     * Math의 함수들을 가져오고 두 개의 문자 세트를 정의함
     * 현재 시간에 따라 문자 세트를 선택함
     * 선택된 문자 세트의 길이를 저장함

    2. 동적 문자 선택 함수:

function eT(e, t, n, r) {
  const i = t.time * 8e-5;
  const s = QE(t.cols, t.rows);
  const o = t.metrics.aspect * 0.2;
  const l = { x: ((4 * (e.x - t.cols / 6.25)) / s) * o, y: (5 * (e.y - t.rows / 4)) / s };
  const u = ra(KE(YE(l) - i) * V5 + (ra(e.x / 1) % 2) * 2) % V5;
  return G7[u];
}

     * eT 함수는 입력 위치와 현재 시간에 따라 문자를 생성함
     * 위치를 조정하고 문자 세트에서 문자를 선택함

    3. 동적 콘텐츠를 표시하는 React 컴포넌트 (tT):

const tT = () => {
  const e = j.useRef(null);
  const [t, n] = j.useState({ height: null, width: null });
  j.useEffect(() => {
    function r() {
      n({ height: window.innerHeight, width: window.innerWidth });
    }
    if (typeof window < ""u"") {
      n({ height: window.innerHeight, width: window.innerWidth });
      window.addEventListener(""resize"", r);
      return () => window.removeEventListener(""resize"", r);
    }
  }, []);
  j.useEffect(() => {
    const r = e.current;
    if (!r) return;
    const i = 12;
    const s = ra(t.width / i) * 1.6;
    const o = ra(t.height / i);
    const l = { aspect: s / o };
    const u = setInterval(() => {
      let c = """";
      for (let d = 0; d < o; d++) {
        for (let f = 0; f < s; f++) c += eT({ x: f, y: d }, { cols: s, rows: o, metrics: l, time: Date.now() });
        c += `  `;
      }
      r.textContent = c;
    }, 1e3 / JE.fps);
    return () => clearInterval(u);
  }, [t]);
  return a.jsx(""div"", { style: { position: ""absolute"", top: 0, left: 0, width: ""100%"", height: ""100%"" }, children: a.jsx(""div"", { ref: e, style: { width: ""100%"", height: ""100%"", whiteSpace: ""pre"", overflow: ""hidden"" } }) });
};

     * 이 React 컴포넌트는 주기적으로 div 요소의 콘텐츠를 동적으로 생성된 문자로 업데이트함
     * 창 크기에 따라 열과 행의 수를 계산하고 div를 문자로 채움

  TypeScript로 변환된 코드

     * ChatGPT에게 TypeScript로 변환된 코드를 요청함
     * ChatGPT의 응답:
import React, { useEffect, useRef, useState } from 'react';
const selectedCharacterSet = ""$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~i!lI;:,^`'. .:â–‘â–’â–“â–ˆ"";
const characterSetLength = selectedCharacterSet.length;

const calculateCharacter = (
  x: number,
  y: number,
  cols: number,
  rows: number,
  aspect: number,
  time: number,
): string => {
  const timeFactor = time * 0.000_08;
  const size = Math.min(cols, rows);
  const aspectRatio = aspect * 0.2;
  const position = {
    x: ((4 * (x - cols / 6.25)) / size) * aspectRatio,
    y: (5 * (y - rows / 4)) / size,
  };
  const index = Math.floor(
    Math.abs(
      Math.cos(position.x * position.x - position.y * position.y) - timeFactor,
    ) * characterSetLength + (Math.floor(x) % 2) * 2,
  ) % characterSetLength;
  return selectedCharacterSet[index];
};

type Size = {
  height: null | number;
  width: null | number;
};

const AsciiArtGenerator: React.FC = () => {
  const textRef = useRef(null);
  const [size, setSize] = useState({ height: null, width: null });

  useEffect(() => {
    const handleResize = () => {
      setSize({ height: window.innerHeight, width: window.innerWidth });
    };
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  useEffect(() => {
    const element = textRef.current;
    if (!element || !size.width || !size.height) return undefined;

    const cols = Math.floor(size.width / 12) * 1.6;
    const rows = Math.floor(size.height / 12);
    const aspectRatio = cols / rows;

    const intervalId = setInterval(() => {
      let content = '';
      for (let y = 0; y < rows; y++) {
        for (let x = 0; x < cols; x++) {
          content += calculateCharacter(x, y, cols, rows, aspectRatio, Date.now());
        }
        content += '\n';
      }
      element.textContent = content;
    }, 1_000 / 60);

    return () => {
      clearInterval(intervalId);
    };
  }, [size]);

  return (

  );
};

export default () => {
  return ;
};

  GN⁺의 정리

     * 이 글은 축약된 코드를 이해하고 복원하는 방법을 설명함
     * ChatGPT를 사용하여 복잡한 코드를 설명하고 TypeScript로 변환하는 과정을 보여줌
     * 코드 복원과 이해를 돕기 위해 AI 도구를 활용하는 방법을 제시함
     * 비슷한 기능을 가진 프로젝트로는 Prettier와 UglifyJS가 있음

        Hacker News 의견

     * HumanifyJS의 저자가 LLM 기반 도구를 개발했음. 이 도구는 AST 수준에서 LLM을 사용하여 코드가 unminification 후에도 작동하도록 보장함
          + HumanifyJS GitHub 링크
     * JS minification은 기계적이고 비교적 간단함. 수동으로 수행하기에는 번거롭지만, 변환 자체는 제한적이어서 일부 노트로 식별자를 추적하며 읽을 수 있음
     * 일반적인 unminification이나 unobfuscation은 여전히 해결되지 않은 문제임. 과거에 의도적으로 난독화된 프로그램을 작성했는데, ChatGPT는 표면 수준에서도 이해하지 못했음
          + 예: 160바이트 길이의 Brainfuck 인터프리터를 GPT-4가 설명하려 했으나 원본 코드와 전혀 유사하지 않았음
          + 예시 코드 링크
     * 일부 개발자는 난독화를 위해 minification을 사용하기 때문에 불만을 가질 수 있음. ColdFusion의 이전 버전에서 제공된 코드 ""암호화"" 도구가 약한 알고리즘이었음에도 불구하고, 이를 안전하다고 생각하고 사용한 사람들이 있었음
     * 제목에 OpenAI 대신 ChatGPT나 gpt-4를 사용하는 것이 더 적절할 수 있음
     * 이 작업은 인간보다 우수한 지적 성능의 예임. LLM은 unminification을 이해하고 있으며, 이 특정 주제에서는 인간보다 우수함
     * LLM은 텍스트 변환에 뛰어남. 이것이 그들의 핵심 강점임
     * 약 1년 전, GPT를 사용하여 악성 코드의 난독화를 시도했으나 직접 코드를 분석하는 것이 더 나았음. 최근 다시 시도했을 때는 어느 정도 이해할 수 있었음
          + 예: 페이지 로드를 감지하고, 계산을 수행하며, 악성 사이트로 리디렉션하는 로직을 파악함
          + 보고서 링크
     * LLM을 사용하여 복잡한 코드를 더 읽기 쉽게 만드는 것이 매우 해방감을 줌. 때로는 세부 사항을 놓치지만, 이는 직접 확인할 수 있음
          + 코드의 목적은 이해하지만, 특정 방식으로 작성된 이유를 이해하지 못할 때 LLM에 질문하여 새로운 통찰을 얻을 수 있음
          + 사용 예시 링크
     * unminified 코드가 minified 코드와 일치하지 않으면 유용성이 크게 감소함. 많은 경우 코드 실행 후 차이를 확인할 수 없음
          + 인코딩 문제 관련 스레드 링크
     * 웹사이트의 계산 알고리즘을 알고 싶을 때 minified JS를 ChatGPT에 넣어 쉽게 파악할 수 있었음. LLM이 전체 SAAS 앱을 클론할 수 있는 미래를 상상할 수 있음
          + 예: HubSpot 클론을 만들기 위해 LLM이 브라우저와 상호작용하고 UI를 분석하며 백엔드 아키텍처를 제안할 수 있음
          + AI가 미래에 강력한 디플레이션 요인이 될 것임
"
"https://news.hada.io/topic?id=16456","Apple, App Store 팀을 두 부분으로 분할하고 새로운 리더십을 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Apple, App Store 팀을 두 부분으로 분할하고 새로운 리더십을 도입

     * 이는 EU 규제로 인한 일련의 변화 중 최근 사례임
     * Apple이 오랫동안 지속된 App Store 팀을 전면 개편하여 두 개의 별도 부서로 분할함
     * 10년 이상 이 팀을 이끌어온 App Store 부사장 Matt Fischer가 회사를 떠나면서 이런 변화가 일어남
     * Carson Oliver가 기존의 Apple이 운영하는 App Store를 담당하고, Ann Thai가 운영하는 다른 팀은 유럽연합의 대안(Alternative) 앱스토어를 다룰 예정
          + Oliver는 그동안 Apple의 비즈니스 관리 선임 이사였음
          + Thai는 App Store 및 Apple Arcade의 월드와이드 제품 이사였음
     * Apple Fellow이자 전 마케팅 수석부사장인 Phil Schiller가 계속해서 두 개의 신설 부서를 감독할 예정
     * Apple은 최근 디지털 시장법(Digital Markets Act)에 대응하여 제3자 앱스토어에 플랫폼을 부분적으로 개방함
          + 디지털 시장법은 앱스토어 독점을 해체하기 위한 유럽 규제임
     * 이번 개편으로 인해 어떤 추가적인 변화가 있을지는 불분명함
     * Apple은 이미 EU 규제에 대응하여 상당한 변화를 이뤄냈지만, 일부 개발자와 경쟁사는 여전히 Apple이 충분히 나아가지 않았다며 비판적임
"
"https://news.hada.io/topic?id=16491","Vim Racer 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Vim Racer 출시

    Vim Racer

      게임 목표

     * 목표: 가능한 한 빨리 모든 타겟에 도달하는 것
     * 방법: 모든 Vim 모션 명령을 사용할 수 있음
     * 시작 방법: 리셋 버튼을 클릭하면 브라우저가 에디터에 포커스됨. 이후 'w'와 같은 Vim 모션을 사용하여 시작

      게임 설명

     * 게임 방식: 속도 기반 Vim 게임
     * 피드백: Reddit 커뮤니티를 통해 피드백을 권장

      리더보드

     * 타입: 12 Targets (Burn Detector)
     * 포지션: 사용자 이름, 소요 시간, NPM, 사용된 키

      자주 묻는 질문

        어떤 음악을 들으면서 Vim Racer를 플레이해야 하나요?

     * 답변: 80년대 팝 히트곡. 게임 디자인은 80년대에서 영감을 받음

        왜 라인 번호가 커서 기준으로 0부터 시작하나요?

     * 답변: 기본적으로 상대 라인 번호를 사용. 추후 설정을 토글할 수 있는 기능 추가 예정

        왜 1초 미만의 기록은 리더보드에서 거부되나요?

     * 답변: 게임의 정신을 유지하기 위해. <20ms 기록은 Vim의 자원 활용을 보여주지만 게임의 정신에 어긋남. 두 개의 리더보드(제한된 것과 제한 없는 것)를 고려 중

        왜 사용자 이름을 한 시간에 한 번만 변경할 수 있나요?

     * 답변: 리더보드가 최상의 점수를 제출하는 공간이 되도록 하기 위해

        Vim Racer를 학습 자료로 사용할 수 있나요?

     * 답변: 새로운 Vim 모션을 배우기에 좋은 자원. 각 레이스 타입에는 효율적인 경로를 배우기 위한 팁이 있음. 리더보드 항목에는 경쟁자가 최고 기록을 세우기 위해 사용한 키가 포함되어 있어 분석 가능

      개발자

     * 개발자: Shaun Brazzoni
     * 지원: 사이트 지원 ☕

    # GN⁺의 정리

     * Vim Racer는 Vim 모션 명령을 연습하고 효율적으로 사용하는 데 도움을 주는 게임임
     * 리더보드를 통해 다른 사용자의 키 시퀀스를 분석하여 새로운 Vim 모션을 배울 수 있음
     * 게임의 정신을 유지하기 위해 1초 미만의 기록은 리더보드에서 거부됨
     * 학습 자료로서의 가치가 높으며, 특히 Vim을 처음 접하는 사용자에게 유용함
     * 유사한 기능을 가진 다른 프로젝트로는 Vim Adventures와 같은 게임이 있음

        Hacker News 의견

     * 한 사용자는 jpeg 레벨에서 17초로 최고 기록을 세웠음. 이 게임이 매우 재미있었음
          + ""리더보드 게임의 움직임을 보여주는"" 기능이 교육적 자원으로 유용할 것 같음
          + 리더보드 상위 플레이어들이 1초 기록을 가지고 있는데, 이는 인간적으로 불가능해 보임. 스크립트 입력을 사용한 것으로 추정됨
          + 리더보드를 경과 시간 대신 키 입력 수로 순위를 매기면 스크립트 사용을 방지할 수 있을 것 같음
     * 한 사용자는 커서가 라인 번호를 따라가는 버그를 발견했음. Chrome과 Firefox에서 시도했음
     * 또 다른 사용자는 이 게임이 기대 이상으로 재미있었다고 언급했음
     * 한 사용자는 사이트에서 아무런 반응이 없다고 보고했음. Chrome과 Firefox에서 시도했음
     * 한 사용자는 리더보드가 조작된 것 같다고 의심했음
          + 1위 himom 0분 1.001초 490
          + 2위 elmoFOOBAR 0분 1.002초 400
          + 3위 VeryFastTyper 0분 1.003초 708
          + 4위 EmacsUser 0분 1.004초 717
          + 5위 ShawnT 0분 1.005초 720
          + 6위 benbp 0분 1.008초 714
          + 7위 hehe 0분 1.023초 604
          + 8위 anthony 0분 1.274초 565
          + 9위 chris 0분 1.327초 543
          + 10위 MasterWq 0분 1.333초 540
          + 11위 blake 0분 1.334초 540
          + 12위 jbp 0분 1.381초 521
          + 13위 test12345 0분 1.437초 20
          + 14위 jonmv 0분 1.476초 488
          + 15위 spektrokalter 0분 1.577초 457
     * 한 사용자는 이 게임이 매우 재미있다고 언급하며, 다른 비슷한 vim 게임을 알고 있는지 물었음
     * 또 다른 사용자는 이 게임을 시작하면 멈출 수 없다고 언급했음
     * 한 사용자는 특정 라인을 삭제했을 때 프로그램이 충돌하는 버그를 발견했음
     * 리더보드를 통해 다른 사람들이 어떻게 했는지 보는 것이 매우 유용하다고 언급했음
     * 한 사용자는 이 게임이 끔찍하지만, Easymotion 없이 Vim을 탐색하는 것이 얼마나 어려운지 보여주는 데는 좋다고 언급했음
"
"https://news.hada.io/topic?id=16414","Procreate의 생성형 AI 반대 공약, 디지털 크리에이터들로부터 찬사를 받음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Procreate의 생성형 AI 반대 공약, 디지털 크리에이터들로부터 찬사를 받음

     * 인기 있는 iPad 디자인 앱 Procreate가 제품에 생성형 AI 도구를 도입하지 않겠다고 선언함
     * Procreate CEO James Cuda는 X에 게시한 동영상에서 ""우리 제품에 어떠한 생성형 AI도 도입하지 않을 것""이라며 ""업계에서 일어나고 있는 일이 마음에 들지 않고, 그것이 아티스트들에게 끼치는 영향도 좋아하지 않음""이라고 말함
     * 크리에이티브 커뮤니티의 생성형 AI에 대한 분노는 두 가지 주요 우려사항에서 기인함
          + AI 모델이 동의나 보상 없이 자신들의 콘텐츠로 학습되었다는 점
          + 이 기술이 널리 채택되면 고용 기회가 크게 줄어들 것이라는 점
     * 이러한 우려로 인해 일부 디지털 일러스트레이터들은 Adobe Photoshop과 같이 생성형 AI 도구를 통합한 앱에 대한 대안을 찾고 있음
     * Procreate는 웹사이트의 새로운 AI 섹션에서 ""생성형 AI는 도둑질을 기반으로 건설되어 우리를 척박한 미래로 이끌고 있음""이라며 ""머신러닝은 장점이 많은 매력적인 기술이지만, 생성형 AI가 가는 길은 우리에게 맞지 않음""이라고 함
     * 이번 발표는 이미 생성형 AI 도구의 증가에 대해 다른 기업들이 어떻게 대처했는지에 대해 불만을 가진 온라인 크리에이터들로부터 널리 찬사를 받고 있음
     * 라이벌 일러스트레이션 앱 Clip Studio Paint는 이미지 생성 기능 도입 계획을 발표했다가 사용자들의 비난을 받고 취소한 바 있음
     * 그 밖에 드로잉 태블릿 제조사 Wacom이나 Magic: The Gathering의 소유주 Wizards of the Coast 등도 제품에 (의도치 않게) AI 생성 에셋을 사용한 것에 대해 사과한 바 있음
     * 사용자 콘텐츠로 학습하지 않는다고 반복해서 언급해 온 Adobe조차도 독립 아티스트와 크리에이터들에게 등을 돌렸다고 느끼는 이들로부터 비난을 받고 있음
     * Adobe는 6월 서비스 약관 업데이트에 대한 거센 반발에 이어 사용자 콘텐츠로 AI를 학습하지 않는다고 추가 설명했지만, 그 동안 도입한 다른 불리한 변경사항들로 인해 ""크리에이터들이 싫어하는 회사""라는 평판이 굳어짐
     * 반면 Procreate는 Adobe나 Clip Studio Paint처럼 구독 모델로 전환하지 않고 $12.99의 일회성 구매 모델을 고수해 왔으며, 애니메이션과 (궁극적으로는) 데스크톱 사용자를 위한 제품으로 확장해 왔기에 극찬을 받고 있음
     * 생성형 AI 도입에 반대하는 이런 확고한 서약은 대안이 줄어들고 있다고 느끼는 크리에이터들에게 단비와 같은 소식임
     * Cuda는 ""이 이야기가 어떻게 전개되고 어떻게 끝날지 정확히 알지는 못하지만, 우리는 인간의 창의성을 지원하는 올바른 길을 가고 있다고 믿음""이라고 말함

   누군가가 관련하여 언급한 내용이 있습니다. 대충 내용은 이렇습니다.
     * Adobe 는 애초에 빵빵한 자본력과 구독 모델 덕분에 기존 app 에 돈 칠을 해서 AI 도입을 할 수 있었다.
     * 하지만 Procreate 는 패키지 모델이기 때문에 AI를 도입하기에는 기존 앱 호환성과 개발 시간, 자본적 리스크가 매우 크다.
     * 게다가 AI 도입 후에 패러다임 유지, 성능 등 여러 미래적으로 불투명한 요소들 천지이기 때문에 그럴 바에야 정당한 '핑계'로 AI 도입을 안하는 방향이 유리하다.
     * 물론 AI가 필연적인 날은 오겠지만, 현재 AI 예술에 대한 저작권 시비와 생성형 AI 품질 등 아직 불완전하고 과도기적 요소, 그리고 예술가들이 자신의 자산을 AI에 강탈당하거나, AI에 생계를 빼앗기는 등의 대한 두려움이 매우 앞서서 어떻게든 반대 여론을 펼치는 것이 유리하다.

   대혼돈의 시대죠.

   요약은 Procreate인데 원문 링크는 휴고상 링크네요

   앗 수정해두었습니다. 연속으로 올리다가 실수했네요

   Hacker News의 댓글 들도 같이 참고하세요.

   재미난 댓글이 몇개 있네요.
     * 밴드 Queen도 초기에는 ""노 신디사이저"" 라는 문구를 앨범 슬리브에 넣을 정도로 신디사이저를 사용하지 않았지만, 나중에는 사용하게 되었음. AI 기술도 비슷한 수용 과정을 거칠 가능성이 있음
     * 사진작가들은 Topaz 같은 AI 도구를 사용해 이미지를 개선하는 것을 긍정적으로 보는데 반해, 예술가들은 AI를 배경이나 디테일링에 사용하는 것을 부정적으로 봄
     * 이정도로 AI 기술에 대한 강경한 입장은 나중에 철회하기 어려울 수 있음. 일부 AI 기술은 유용할 수 있는데.

   캬아 아트에 AI 조금만 긍적적으로 언급하는 순간 Flag 세례
"
"https://news.hada.io/topic?id=16492","Llama Tutor - 오픈소스 AI 튜터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Llama Tutor - 오픈소스 AI 튜터

     * 배우고 싶은 주제와 교육 수준을 지정하면 나에게 맞는 맞춤형 튜터를 생성해줌
     * 토픽에 대한 기본 설명과 주제들을 나열해주고 그중에서 선택하면 상세 설명을 해주는 방식
     * 해당 주제에 대한 질문 & 답변 받기도 가능
     * 기술 스택
          + Llama 3 70B 와 Together.ai
          + Next.js + Tailwind
          + Serper(검색 API)
          + Helicone(observability) + Plausible(website analytics)
"
"https://news.hada.io/topic?id=16503","세인즈버리 윙 시공업체, 1990년 기부자 편지 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     세인즈버리 윙 시공업체, 1990년 기부자 편지 발견

        Hacker News 의견

     * 벽 안에 물건을 넣는 것은 훌륭한 아이디어임
          + 오래된 집의 욕실 수리 중, 벽을 열었을 때 70년 전 집을 지을 때 남은 타일을 발견함
          + 과거의 타일 작업자가 나에게 미소와 격려를 주는 느낌을 받음
     * 연못 속 편지를 떠올리게 함
          + 관련 링크
     * 기둥에 대한 이야기
          + 관련 이미지
     * Git을 설정하여 미래 세대가 내가 체크인한 코드를 제거할 때 감사하게 만들고 싶음
     * 이것은 내가 본 것 중 가장 영국적인 것임
          + 영광스러움
     * 배경 이야기를 놓친 사람들을 위해, 이것은 왕 찰스가 매우 싫어했던 ""카번클""임
          + 관련 기사
     * ""TODO: 악의적인 해킹!! 리팩토링 필요""라는 주석을 남김
     * 건축가는 2018년에 사망했고, Sainsbury는 2022년에 사망함
          + 몇 년 전에 작업을 했다면 매우 어색했을 것임
     * 1990년에도 슈퍼마켓 회사는 여전히 텔렉스 번호를 가지고 있었음
          + 이미 팩스 기계를 오랫동안 보유하고 있었을 가능성이 높음
     * 미래 세대가 기둥이 훌륭하다고 결정했다면 편지는 절대 발견되지 않았을 것임
"
"https://news.hada.io/topic?id=16532","영국 철도 장관, 안전 문제 제기한 엔지니어 해고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      영국 철도 장관, 안전 문제 제기한 엔지니어 해고

     * 영국 철도 장관, 안전 문제 제기한 엔지니어 해고
          + 피터 헨디는 공공 계약을 보류하겠다고 위협하며 징계 조치를 요구함
          + 헨디는 현재 영국 철도 개혁을 담당하고 있음
     * '그를 어떻게 처리했는가?'
          + 헨디는 가레스 데니스가 언론에 런던 유스턴 역의 과밀 문제를 ""위험하다""고 말한 것에 분노함
          + 헨디는 데니스의 고용주 SYSTRA에 징계 조치를 요청함
          + 데니스는 5월 20일 정직됨
     * '불만족스러운' 대응
          + 헨디는 SYSTRA의 CEO에게 추가 조치를 요구하며 불만을 표함
          + 데니스는 비밀 유지 조항이 포함된 합의서를 거부하고 7월 8일 해고됨
     * GN⁺의 정리
          + 이 기사는 영국 철도 장관이 안전 문제를 제기한 엔지니어를 해고한 사건을 다룸
          + 헨디는 공공 계약을 보류하겠다고 위협하며 SYSTRA에 징계 조치를 요구함
          + 이 사건은 철도 안전 문제와 관련된 내부 고발자의 보호 문제를 제기함
          + 비슷한 기능을 가진 프로젝트로는 철도 안전 개선을 위한 다양한 국제 표준 및 규제 기관이 있음

        Hacker News 의견

     * Gareth Dennis의 비판은 온건한 수준이었음
          + 영국 철도 네트워크는 과도한 안전 조치를 목표로 함
          + 다양한 안전 경고와 안내가 많음
          + 이로 인해 해고된 것이 놀라움
     * 이 사건은 내부 고발인지 여부와 관련된 논쟁이 있음
          + 엔지니어는 공공의 안전을 위해 발언했음
          + 정부 관료는 헌법에 어긋나는 압력을 행사했음
          + 철도 인프라에 부정적인 영향을 미칠 수 있음
          + 해고되어야 할 사람은 영국 철도 장관임
     * 해고된 엔지니어는 부당 해고 소송에서 승소할 것임
          + 1년치 급여를 보상받겠지만, 법률 비용으로 대부분을 지출할 것임
          + 결국 평생 동안 더 적은 수입을 얻게 될 것임
          + 침묵했더라면 비극이 발생했을 것임
     * 관리직은 문제를 이해하지 않고 관리하는 것이 직업임
          + 모든 것이 원활하게 작동하는 인상을 주는 것이 이익임
          + 관리직이 주도하는 순간 엔지니어링 중심의 회사는 실패함
     * 공급업체가 안전 문제를 제기하는 것은 더 많은 비즈니스를 해야 하는 이유가 되어야 함
     * 관리직이 엔지니어의 경고를 무시하는 것이 두려움
          + Boeing 사례를 떠올리게 함
          + 산업 화학 공장이나 원자력 발전소에서도 같은 문화가 발생할 수 있음
          + 엔지니어 협회나 노조가 없다면 상부 관리직에 의해 압도당할 것임
     * 엔지니어는 Twitter에 긴 글을 게시했음
          + Gareth Dennis의 Twitter
     * 해고된 엔지니어는 YouTube에서 정기적인 쇼를 진행하고 있음
          + Gareth Dennis의 YouTube 채널
     * 정부는 실패할 가능성이 높음
          + 다음 철도 사고가 발생하면 안전 문제를 진지하게 받아들였는지 의문을 제기할 것임
          + Hendy의 위치는 더 이상 유지될 수 없음
"
"https://news.hada.io/topic?id=16504","2U, EdX, Axim의 삼중 실패","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2U, EdX, Axim의 삼중 실패

        Hacker News 의견

     * Coursera와 EdX에서 많은 강의를 들었음
          + Daphne Koller의 확률 그래프 모델, Robert Sedgewick의 분석 조합론, Gerald Sussman의 시스템 최적화 강의가 특히 인상적이었음
          + MOOC의 과제는 주로 다지선다형 질문이나 간단한 프로그래밍 과제임
          + 대학 강의는 도전적이고 영감을 주는 과제를 통해 깊이 있는 학습을 유도함
          + 피드백 부족 문제 있음
          + 많은 강의가 수준이 낮아짐
          + Andrew Ng의 Coursera 머신러닝 강의는 Stanford의 강의보다 덜 엄격함
     * MOOC 운영 방식에 불만 있음
          + 대학처럼 운영되지 않고 직업 훈련 센터처럼 운영됨
          + Georgia Tech의 OMSCS와 같은 몇몇 학교를 제외하고는 학위를 제공하려는 시도가 부족함
          + 다양한 과목을 자유롭게 수강하고 학위를 취득할 수 있는 MOOC를 원함
     * 제목이 오해를 불러일으킬 수 있음
          + Harvard와 MIT는 각각 $30M을 투자했고 EdX를 $800M에 2U에 매각함
          + Harvard와 MIT는 돈을 벌었고, 2U가 손해를 봄
          + EdX의 손실로 인해 대중이 피해를 봄
     * 2U에서 일한 경험이 있음
          + 매우 무능한 곳이었고, 직원들 간의 갈등이 심했음
     * 온라인 전용 학위 프로그램에 등록한 경험을 공유해달라는 요청
          + 전통적인 대학에서 풀타임으로 가르쳤고, 팬데믹으로 인해 온라인 강의를 경험함
          + 소규모 토론 기반 세미나에는 온라인이 적합하지만, 대규모 강의에서는 학생들의 참여를 유지하기 어려움
     * MitX의 수학 및 과학 강의는 뛰어났음
          + 다른 대학의 강의는 품질이 떨어짐
          + EdX/MitX가 새로운 콘텐츠를 더 이상 출판하지 않음
          + Khan Academy와 함께 수학과 과학을 다시 배움
     * EdX 브랜드가 훌륭했음
          + 현재의 상황이 안타까움
          + MOOCs의 발전을 위해 작성된 블로그 글이길 바람
     * 2U의 실사 과정에서 Walter Lewin의 인기 있는 자료를 놓쳤을 수 있음
          + Walter Lewin은 여전히 활동 중임
     * Dhawal Shah의 훌륭한 글에 감사함
          + MOOC 세계의 소식을 대중에게 잘 전달해줌
     * MOOCs는 사회에 큰 가치를 제공했음
          + 수익/손실의 관점에서만 바라보는 것이 아쉬움
          + 대학들이 비용을 무시하고 공공 이미지를 개선하기 위해 이러한 제품을 제공했으면 좋겠음
"
"https://news.hada.io/topic?id=16436","우편번호 주소 파일 해방 필요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           우편번호 주소 파일 해방 필요성

    이 기밀 정부 보고서는 우편번호 주소 파일을 해방해야 한다는 것을 증명함

     * 2016년 영국 정부는 우편번호 주소 파일(Postcode Address File, PAF)을 재구성하려고 시도했음
     * PAF는 영국의 모든 물리적 우편 주소를 포함하는 중요한 데이터베이스임
     * PAF는 연구자와 개발자가 새로운 도구, 서비스 및 플랫폼을 구축하는 데 유용함
     * 그러나 PAF는 Royal Mail에서 라이선스를 받아야 하므로 비용이 많이 듦
     * 이는 혁신에 대한 장벽이며 경제 성장에도 방해가 됨
     * 따라서 PAF를 무료로 공개 데이터로 출시해야 한다고 주장함

    영국 경제를 살릴 수 있는 한 가지 기발한 방법

     * 2016년 George Osborne의 예산안에서 PAF를 무료로 제공하기 위한 옵션을 개발하기 위해 500만 파운드를 할당했음
     * 그러나 8년이 지난 지금도 PAF는 여전히 비싼 비용으로 제공되고 있음
     * 정부는 PAF를 재구성하기 위해 Ordnance Survey(OS)에 연구를 의뢰했음
     * OS는 Royal Mail의 지적 재산을 사용하지 않고 새로운 주소 데이터베이스를 구축하려고 시도했음
     * 그러나 결과는 실망스러웠음

    약어를 좋아하길 바람

     * OS는 National Address Gazetteer(NAG)라는 다른 주소 데이터베이스를 사용했음
     * NAG는 지방 당국, 정부 부서 및 OS 자체에서 제공한 데이터를 사용하여 작성됨
     * 그러나 NAG 데이터는 일관성이 없고 표준화되지 않았음
     * OS는 알고리듬을 사용하여 유용한 건물과 기타 거리 쓰레기를 구분하려고 했음
     * 그러나 이 과정은 매우 복잡했음

    쓰레기 데이터, 쓰레기 결과

     * OS는 새로운 데이터베이스를 AddressBase와 비교했음
     * AddressBase는 NAG와 다른 소스의 데이터를 사용하여 작성되었으며, Royal Mail의 PAF 데이터를 포함함
     * 새로운 데이터베이스는 AddressBase와 비교했을 때 정확도가 90.8%에 불과했음
     * 이는 290만 개의 잘못된 주소를 의미하며, 420만 개의 주소가 누락되거나 잘못된 항목이 포함됨
     * 정확한 데이터베이스를 구축하는 것은 매우 어려운 작업임

    배를 바로잡기

     * OS는 PAF를 재구성하는 것이 매우 어렵다는 것을 증명했음
     * 정부는 PAF를 Royal Mail로부터 다시 가져와야 함
     * 이는 성장과 혁신을 위해 필수적임

  GN⁺의 정리

     * 이 기사는 영국의 중요한 주소 데이터베이스인 PAF를 무료로 공개해야 한다는 주장을 담고 있음
     * PAF는 혁신과 경제 성장에 중요한 역할을 할 수 있음
     * 그러나 PAF를 재구성하는 것은 매우 어렵고 비용이 많이 듦
     * 따라서 정부는 PAF를 다시 가져와야 함
     * 비슷한 기능을 가진 프로젝트로는 Google Maps와 Amazon의 주소 데이터베이스가 있음

        Hacker News 의견

     * 프랑스 정부는 ""BAN"" (Base Adresse Nationale - 국가 주소 데이터베이스)을 구축했음
          + 상세한 우편 주소와 정확한 GPS 좌표를 포함함
          + 데이터를 볼 수 있는 인터페이스와 도시들이 데이터를 최신 상태로 유지할 수 있는 인터페이스 제공
          + 주소 검색과 지오코딩을 위한 무료 API 제공
          + 데이터는 공개 라이선스로 다운로드 가능함
          + 법적으로 로컬 주소 데이터베이스를 업로드해야 함
          + 데이터는 ""La Poste""와 OpenStreetMap 등 여러 출처에서 얻어짐
     * 영국의 우편번호 시스템은 약 15개의 건물을 대상으로 함
          + 영국: 2,643,732개의 코드, 1코드당 25명
          + 미국: 41,700개의 코드, 1코드당 8000명
          + 독일: 8,200개의 코드, 1코드당 10000명
          + 우편번호는 정확한 위치를 나타내는 대리로 사용됨
          + 시골 지역이나 큰 부지에서는 잘 작동하지 않을 수 있음
     * Royal Mail의 민영화 시점에 데이터베이스를 무료로 만드는 것이 쉬웠으나, 지금은 어려움
          + 법을 통과시키려면 수백만 파운드의 보상금을 지불해야 함
          + 데이터 유지 비용도 문제임
     * 정확한 데이터베이스를 구축하는 것은 매우 어려움
          + Royal Mail은 매주 6일 동안 모든 배달 지점을 방문함
          + OpenStreetMap 기여자들의 정보 요청이 거부됨
     * 정부가 Royal Mail에 우편번호 파일을 무료로 제공하라고 위협할 수 있음
          + 새로운 번호 체계를 만들어 각 집에 주소 카드를 보낼 수 있음
     * 15년 전 개발자들이 무료 우편번호 데이터 접근을 제공하는 웹사이트를 만들었으나 법적 위협으로 인해 빠르게 폐쇄됨
     * 새로운 집에 살 때 우편번호 데이터베이스가 최신 상태가 아니어서 불편을 겪음
          + 데이터베이스가 지속적으로 업데이트되어야 함
          + PAF를 공공의 손에 넘겨야 함
     * PAF 파일은 9%의 이익만을 반환함
     * 영국의 우편번호 시스템은 60년의 역사를 가짐
          + 아일랜드는 10년 전 Éircodes를 도입했으나 중앙 데이터베이스 접근에 비용이 듦
          + 공원이나 산책로 같은 장소는 포함되지 않음
     * 법적 문제를 무시하고 파일을 유출하거나 OpenStreetMap에서 추출할 수 있음
          + 대부분의 개인은 일반적인 거리 주소로 충분함
"
"https://news.hada.io/topic?id=16438","SurrealEngine: UT99 플레이 가능한 Unreal Engine 오픈소스 재구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           SurrealEngine: UT99 플레이 가능한 Unreal Engine 오픈소스 재구현

Surreal Engine

   이 프로젝트의 목표는 UnrealEngine의 원본을 재구현하여 Unreal Tournament (UT99) 맵을 플레이할 수 있도록 하는 것임.

  현재 상태

     * 엔진은 맵을 로드하고 렌더링할 수 있음
     * Unrealscript VM은 거의 완성되었으나 배열과 네트워크 조건 실행은 아직 구현되지 않음
     * 모든 레벨 액터를 로드하고 맵을 초기화하려고 시도함
     * 메뉴와 HUD는 나타나지만, 많은 네이티브 함수가 아직 구현되지 않음
     * 일부 이벤트가 제대로 작동하지 않을 수 있으며, 상호작용 시 예외가 발생할 수 있음

   현재 SurrealEngine은 다음과 같은 UE1 게임을 감지할 수 있음:
     * Unreal Tournament (v436, v451b, v469(a, b, c, d))
     * Unreal (v200, v209, v220, v224v, v225f, v226f)
     * Unreal Gold (v226b, v227(i, j, k_11))
     * Deus Ex (v1002f, v1112fm)
     * Klingon Honor Guard (219)
     * NERF Arena Blast (v300)
     * TNN Outdoors Pro Hunter (v200)
     * Rune Classic (v1.10)
     * Clive Barker's Undying (v420)
     * Tactical-Ops: Assault on Terror (v3.4.0 and v3.5.0 - UT436 및 UT469 엔진에서 실행)
     * Wheel of Time (v333)

   위 목록 중 Unreal Tournament v436과 Unreal Gold v226만이 비교적 플레이 가능한 상태임. 다른 게임을 실행하면 충돌이 발생할 수 있음.

    Unreal Tournament v436

     * 게임이 실행되고 메뉴 옵션이 작동하며 봇 매치를 플레이할 수 있음
     * 봇의 AI는 거의 없으며, 일부 맵의 기능이 누락됨 (예: DM-Morpheus의 ""X가 경기를 이끌고 있음"" 화면이 작동하지 않음)

    Unreal Gold v226

     * 게임이 실행되고 메뉴 옵션이 대부분 작동함
     * 싱글 플레이어 맵과 봇 매치를 플레이할 수 있음
     * AI는 UT와 비슷하게 동작함
     * Return to Na Pali의 객체 모델이 깨져 보임

    Deus Ex v1112fm

     * 인트로 플라이바이만 작동함
     * 키보드나 마우스 입력이 감지되지 않음 (Deus Ex는 Unreal/UT와 다르게 입력을 처리함)

  명령줄 매개변수

   SurrealEngine [--url=<mapname>] [--engineversion=X] [게임 폴더 경로]
     * SurrealEngine 실행 파일을 UE1 게임의 System 폴더에 복사하여 실행 가능
     * 게임 폴더가 지정되지 않으면, 엔진은 레지스트리(Windows 전용)에서 Epic이 설정한 레지스트리 키를 검색함
     * URL이 지정되지 않으면 ini 파일의 기본 URL을 사용함 (기본값은 인트로 맵)
     * --engineversion 인수는 엔진이 감지한 내부 버전을 덮어쓰며, 디버깅 목적으로만 사용해야 함

  Windows 빌드 지침

     * CMake를 사용하여 프로젝트 빌드
     * 최신 버전의 Visual Studio와 C++17을 지원하는 MSVC 컴파일러 필요
     * SDL2는 선택적 종속성으로, 로컬에서 제공해야 함 (Visual C++ 버전의 SDL2를 다운로드하여 CMake 설정에서 해당 폴더를 지정)
     * 그 외 외부 서드파티 종속성은 없음

  Linux 빌드 지침

     * CMake를 사용하여 프로젝트 빌드
     * 다음 명령어를 순서대로 입력하여 빌드:

git clone https://github.com/dpjudas/SurrealEngine.git
cd SurrealEngine
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release ..
make -j 16

     * 컴파일이 성공적으로 완료되면 build 폴더에 SurrealEngine, SurrealEditor, SurrealDebugger 실행 파일이 생성됨
     * 다음 개발 패키지가 필요:
          + cmake
          + g++
          + pthreads
          + dl
          + alsa (libasound2)
          + SDL2
          + waylandpp (선택 사항, Wayland의 C++ 바인딩, ZWidget Wayland 백엔드에서 사용)
     * Linux에서는 SDL2가 필수이며, SurrealEngine은 이를 윈도우 기능과 네이티브 Wayland 지원에 활용함 (SDL_VIDEODRIVER=wayland)

GN⁺의 정리

     * Surreal Engine은 UnrealEngine의 원본을 재구현하여 Unreal Tournament (UT99) 맵을 플레이할 수 있도록 하는 프로젝트임
     * 현재 Unreal Tournament v436과 Unreal Gold v226만이 비교적 플레이 가능한 상태이며, 다른 게임은 충돌이 발생할 수 있음
     * Windows와 Linux에서 CMake를 사용하여 빌드 가능하며, SDL2와 같은 몇 가지 종속성이 필요함
     * 이 프로젝트는 오래된 게임을 현대 시스템에서 다시 플레이할 수 있게 해주며, 게임 개발자와 엔지니어에게 흥미로울 수 있음
     * 비슷한 기능을 가진 프로젝트로는 OpenRA와 같은 오픈 소스 게임 엔진이 있음

        Hacker News 의견

     * Quake III를 웹으로 포팅하고 멀티플레이어와 모바일 지원을 추가했음
          + Unreal Tournament도 포팅하고 싶었지만 아직 플레이하기 어려운 상태임
          + Epic이 id Software처럼 옛날 릴리스를 GPL로 공개했으면 좋겠음
          + UT 대신 Serious Sam을 다음 프로젝트로 고려 중임
          + Serious Engine은 오픈 소스이며 이미 웹 포트가 존재함 (멀티플레이어는 없음)
     * 이 프로젝트가 UE1 게임을 UE5에서 호스팅하는 프로젝트와 비슷하다고 생각했음
          + 실제로 같은 프로젝트이며, DXU24에서 Surreal로 리브랜딩했음
          + 오픈 소스 프론트엔드도 추가됨
          + 개발자는 YouTube에 여러 WIP 비디오를 올렸음
     * 이 프로젝트가 매우 기쁘고 많은 추억을 떠올리게 함
          + 비디오 게임 아카이브 작업에 감사함
     * Unreal Tournament 99와 Deus Ex는 가장 행복한 게임 기억 중 하나임
          + 이 프로젝트가 매우 야심차고 옛날 게임들이 사랑받는 것을 보는 것이 좋음
          + Deus Ex 리메이크를 여전히 희망함
     * Epic이 id Software처럼 원래 엔진을 오픈 소스화할 수 있음
     * 다른 개발자가 UE1 게임을 UE5에서 VR과 모드 및 현대적 기능으로 플레이할 수 있게 하는 Surreal 98을 개발 중임
     * Civvie 11의 ""Epic Unreal Megaspecial""을 추천함
     * Unreal Tournament 2004를 도커화했으며, 리눅스 x86_64에서 잘 작동함
mkdir -p ~/.ut2004/; sudo docker run -it --rm -e DISPLAY=$DISPLAY -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR -e HOME=/ --network=host -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -v /run/user/$UID:/run/user/$UID -v ~/.ut2004/:/.ut2004/ --user $UID:$UID --privileged --name ut2004 ikuinen.earth:5000/ut2004

     * Quake/Unreal을 처음부터 새로 작성하는 데 얼마나 많은 개발 시간이 걸릴지 궁금함
          + 포트가 아닌 맞춤형 엔진으로 완전한 재작성임
     * UT99가 매우 그립고 현대 FPS 게임을 그만큼 좋아하지 않음
"
"https://news.hada.io/topic?id=16533","백만 개의 체크박스 속 비밀","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            백만 개의 체크박스 속 비밀

    One Million Checkboxes의 비밀

   몇몇 십대들이 나에게 비밀 메시지를 보냈음. 나는 그들을 찾았음.

      One Million Checkboxes란 무엇인가?

     * 2024년 6월 26일, One Million Checkboxes(OMCB)라는 웹사이트를 출시했음.
     * 이 사이트에는 전 세계적으로 공유되는 백만 개의 체크박스가 있었음. 체크박스를 체크하거나 체크 해제하면 모든 사용자에게 즉시 반영되었음.
     * 사이트는 뉴욕 타임즈와 워싱턴 포스트에 소개되었고, Know Your Meme과 위키피디아에도 등재되었음.
     * 기술적인 세부 사항은 별도의 블로그에 다루었고, 이 블로그에서는 가장 좋아하는 이야기를 다루고 있음.

      배경 1: OMCB는 그림 그리기를 어렵게 만듦

     * 인터넷에서 사람들이 상호작용할 수 있는 게임을 만드는 것을 좋아함.
     * 사람들이 무제한 캔버스에서 그리는 것을 제한하기 위해 브라우저 창 크기에 따라 체크박스의 수를 조정했음.
     * 이로 인해 특정 크기의 브라우저에서만 메시지가 보이게 되었음.
     * 이러한 제약은 사람들이 창의적으로 문제를 해결하도록 유도했음.

      배경 2: 상태 저장 방법

     * OMCB에는 백만 개의 체크박스가 있었음.
     * 체크박스의 상태를 비트로 저장하여 효율적으로 관리했음.
     * 이 데이터를 Redis에 저장하고 클라이언트로 전송할 때 base64로 인코딩했음.

      해킹당한 것인가?

     * OMCB를 출시한 지 며칠 후, 데이터베이스에서 이상한 URL을 발견했음.
     * 처음에는 해킹당했다고 생각했지만, 로그와 코드를 검토한 후 문제가 없음을 확인했음.
     * 결국 누군가가 체크박스를 사용하여 이진 메시지를 작성하고 있음을 깨달았음.

      숨겨진 메시지

     * 체크박스를 사용하여 비트를 뒤집고, 숫자를 형성하여 문자를 만들고, URL을 작성했음.
     * 이 메시지는 수천 명의 다른 사용자와 함께 작성되었음.

      토끼굴 속으로

     * URL을 클릭하자 디스코드 서버로 연결되었음.
     * 디스코드 서버는 ""Checking Boxes""라는 이름이었고, 많은 사람들이 모여 있었음.
     * 그들은 백만 개의 체크박스를 1000x1000 그리드로 렌더링하고 있었음.
     * 이 메시지는 디스코드 서버로 연결되었고, 많은 사람들이 모여 봇을 만드는 방법을 논의했음.

      그들이 한 일

     * 그들은 복잡한 그림을 그리기 위해 시스템을 개선했음.
     * 애니메이션을 실험하고 색상을 추가하는 프로토콜도 시도했음.
     * 사이트를 종료하기 전날, 모든 제한을 제거하고 얼마나 많은 트래픽을 처리할 수 있는지 테스트했음.

      봇이 좋은가?

     * 많은 사람들이 OMCB에서 봇에 대해 불만을 제기했음.
     * 봇이 사이트 경험을 저해할 수 있다는 점을 이해하지만, 봇을 사용하는 사람들의 창의성과 기술에 감동받았음.

      감동받은 이유

     * 고등학교 시절, 친구에게 장난으로 수백만 개의 메일을 보낸 적이 있었음.
     * 당시 어른들은 나에게 화를 내지 않고 격려해 주었음.
     * 디스코드에서의 활동을 보며 그들의 창의성과 기술에 감동받았음.
     * 그들이 앞으로 무엇을 만들지 기대됨.

    GN⁺의 정리

     * One Million Checkboxes는 사람들이 창의적으로 상호작용할 수 있는 플랫폼을 제공했음.
     * 체크박스를 사용하여 이진 메시지를 작성한 십대들의 창의성과 기술에 감동받았음.
     * 봇 사용에 대한 논란이 있었지만, 그들의 창의적인 접근 방식은 칭찬할 만함.
     * 이 프로젝트는 사람들이 제약을 극복하고 창의적으로 문제를 해결하는 방법을 보여줌.
     * 비슷한 기능을 가진 프로젝트로는 Reddit의 r/place가 있음.

        Hacker News 의견

     * 어른들의 격려: 어른들이 나에게 화를 내지 않고 격려해 준 덕분에 지금의 내가 있음
          + ""Teena는 적당히 장난칠 수 있는 공간과 사회적 결과를 경험할 수 있는 기회가 필요함""
          + ""어른들은 권위자가 아닌, 아이들이 배우고 싶어하는 멋진 재능을 가진 사람이어야 함""
     * 작가의 이야기: 사이트를 운영하면서 가장 좋아하는 이야기이며, 이 이야기를 쓰면서 여러 번 울었음
          + ""발견 과정이 미친 듯이 흥미로웠음""
          + ""제약이 필요하지만, 대부분의 사람들은 창의적이고 좋은 사람들임을 확인함""
     * 고등학교 시절 회상: 고등학교 때 Java를 배우며 장난스러운 프로그램을 만들었던 기억이 떠오름
          + ""학교의 IT 담당자는 우리가 네트워크에서 게임을 실행하는 것을 알면서도 화내지 않았음""
     * 봇에 대한 반성: 봇을 싫어했지만, 이 글을 읽고 나서 생각이 바뀌었음
          + ""수학 선생님이 내가 직접 작성한 프로그램을 사용하는 것을 허락해 줬음""
     * 체크박스 상태: 체크박스는 체크되거나 체크되지 않은 두 가지 상태가 있음
          + ""true, false, null에 의해 상처받은 경험이 있는 것 같음""
     * 서버리스 아키텍처: 서버리스 아키텍처로 구축된 대체 역사 버전을 보고 싶음
          + ""자원이 제한되면 다운될 가능성이 있음""
     * 창의성: 자원이 제한될 때 창의성이 꽃피는 것을 보여주는 또 하나의 데이터 포인트임
     * OMCB 사이트: OMCB 사이트를 처음 들었지만, 내 십대 자녀들이 이 사이트를 발견하고 즐기기를 바람
     * 흥미로운 경험: 정말 재미있는 경험이었음
     * 다시 돌아옴: 우리는 다시 돌아옴
     * 야생의 여정: 정말 야생의 여정이었음
"
"https://news.hada.io/topic?id=16431","Python의 전처리기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Python의 전처리기

  Python의 전처리기

     * Python에는 전처리기가 없다는 주장은 사실이 아님
     * Python은 매우 강력한 전처리기를 가지고 있음

    Python 소스 코드 인코딩

     * PEP-0263 덕분에 소스 코드 인코딩을 정의할 수 있음
     * 첫 두 줄에 매직 코멘트를 추가하여 인코딩을 설정할 수 있음
     * 예: # coding=utf8, # -*- coding: utf8 -*-, # vim: set fileencoding=utf8 :

    경로 구성 파일 (.pth)

     * Python 인터프리터가 -S 옵션 없이 시작되면 site 패키지를 자동으로 로드함
     * site-packages 폴더에 .pth 파일을 추가하여 모듈 검색 경로를 확장할 수 있음
     * .pth 파일의 import로 시작하는 줄은 실행됨
     * 이를 통해 Python 인터프리터 초기화 시 임의의 코드를 실행할 수 있음

    사용자 정의 코덱 정의

     * Python 인터프리터가 만족할 두 가지 필요:
          + decode(data: bytes) -> tuple[str, int] 함수
          + 증분 디코더 클래스
     * codecs.utf_8_decode를 사용하여 실제 디코딩을 수행하고, 결과 문자열을 전처리기에 전달
     * 예외를 잡아 출력하고 다시 발생시키는 것이 좋음

    증분 디코더 제공

     * codecs.BufferedIncrementalDecoder를 상속하여 증분 디코더를 구현
     * 버퍼에 데이터를 수집하고 최종 디코드 호출 시 전체 파일을 전처리

    Python 확장

     * Python의 표준 라이브러리를 사용하여 Python을 확장하는 것은 비교적 쉬움
     * tokenize 모듈을 사용하여 파일의 토큰 스트림을 수정하거나 ast 모듈을 사용하여 추상 구문 트리를 수정할 수 있음

      단항 증가 및 감소

     * Python에는 단항 증가 및 감소 연산자가 없음
     * x++, x--는 유효하지 않음
     * ++x, --x는 유효하지만 다른 의미를 가짐
     * 단항 증가 및 감소 표현을 Python 표현으로 변환할 수 있음

      예제

     * 입력 파일 incdec.py:
# coding: magic.incdec
i = 6
assert i-- == 6
assert i == 5
assert ++i == 6
assert --i == 5
assert i++ == 5
assert i == 6
assert (++i, 'i++') == (7, 'i++')
print(""PASSED"")

     * 변환된 파일:
i = 6
assert ((i, i := i - 1)[0]) == 6
assert i == 5
assert ((i, i := i + 1)[1]) == 6
assert ((i, i := i - 1)[1]) == 5
assert ((i, i := i + 1)[0]) == 5
assert i == 6
assert (((i, i := i + 1)[1]), 'i++') == (7, 'i++')
print(""PASSED"")

    중괄호를 사용하는 Python (Bython)

     * Python의 들여쓰기 대신 중괄호를 사용하여 범위를 지정할 수 있음
     * tokenize.generate_tokens를 사용하여 토큰 스트림을 수정

      예제

     * 입력 파일 test.by:
# coding: magic.braces
def print_message(num_of_times) {
  for i in range(num_of_times) {
    print(""braces ftw"")
  }
  print({'x': 3})
}
x = {
  'foo': 42,
  'bar': 5
}
if __name__ == ""__main__"" {
  print_message(2)
  print({k: v for k, v in x.items()})
}

     * 변환된 파일:
def print_message(num_of_times):
  for i in range(num_of_times):
    print(""braces ftw"")
  print({'x': 3})
x = {
  'foo': 42,
  'bar': 5
}
if __name__ == ""__main__"":
  print_message(2)
  print({k: v for k, v in x.items()})

    다른 언어 해석

     * Python 인터프리터가 다른 언어를 해석하도록 할 수 있음
     * 예: C, C++, TOML

      예제

     * C++ 파일 test.cpp:
#define CODEC ""coding:magic.cpp""
#include <cstdio>
int main() {
  puts(""Hello World"");
}

     * 변환된 파일:
import cppyy
cppyy.cppdef(r""""""
#define CODEC ""coding:magic.cpp""
#include <cstdio>
int main() {
  puts(""Hello World"");
}
"""""")
from cppyy.gbl import main
if __name__ == ""__main__"":
  main()

    데이터 검증

     * TOML 형식의 데이터를 JSON 스키마를 사용하여 검증할 수 있음
     * jsonschema를 사용하여 실제 검증 수행

      예제

     * 스키마 파일 schema.json:
{
  ""type"": ""object"",
  ""properties"": {
    ""name"": {""type"": ""string""},
    ""age"": {""type"": ""number""},
    ""scores"": {
      ""type"": ""array"",
      ""items"": {""type"": ""number""}
    },
    ""address"": {""$ref"": ""#/$defs/address""}
  },
  ""required"": [""name""],
  ""$defs"": {
    ""address"": {
      ""type"": ""object"",
      ""properties"": {
        ""street"": {""type"": ""string""},
        ""postcode"": {""type"": ""number""}
      },
      ""required"": [""street""]
    }
  }
}

     * 유효한 데이터 파일 data_valid.toml:
# coding: magic.toml
name = ""John Doe""
age = 42
scores = [40, 20, 80, 90]
[address]
street = ""Grove St. 4""
postcode = 19201

     * 유효하지 않은 데이터 파일 data_invalid.toml:
# coding: magic.toml
name = ""John Doe""
age = 42
scores = [40, ""20"", 80, 90]
[address]
street = ""Grove St. 4""
postcode = 19201

  결론

     * 사용자 정의 코덱과 경로 구성 파일을 사용하여 Python 인터프리터의 동작을 크게 변경할 수 있음
     * 예시로는 pythonql, future-typing, future-fstrings, future-annotations 등이 있음
     * magic_codec을 사용하여 자신의 전처리기를 쉽게 실험할 수 있음

GN⁺의 정리

     * Python의 전처리기를 활용하여 다양한 언어 확장 및 데이터 검증을 수행할 수 있음
     * 사용자 정의 코덱을 통해 Python 인터프리터의 동작을 변경하는 방법을 설명함
     * 이 기사는 Python 개발자에게 유용한 도구와 기법을 제공함
     * 비슷한 기능을 가진 프로젝트로는 pythonql, future-typing 등이 있음

        Hacker News 의견

     * from __future__ import braces 문법 오류 메시지는 2001년부터 cpython에 하드코딩되어 있음
          + Jeremy Hylton이 작성했으며, 현재 Google에서 AI 검색 품질을 담당하는 수석 엔지니어로 일하고 있음
          + 24년 동안 한 사람의 경력이 특정 문법 금지를 기념하는 것에서 시작해 전용 문법이 필요 없는 검색 시스템 작업으로 발전한 것에 놀라움
     * import-hooks를 사용한 창의적인 해고 방법에 대해 생각했으나, codec regex가 ""μtf8"" 같은 것을 사용하지 못하게 막아 아쉬움
          + import hooks, preprocessors, sys.settrace를 사용해 모든 함수를 이전에 호출된 함수로 원숭이 패치하고, 17분마다 stdout과 stderr를 교체하는 방법을 사용해야 함
     * python이 전처리기 훅을 노출하지 않은 이유가 있으며, 합리적인 성인은 이를 피해야 한다고 생각함
          + 그러나 합리적인 성인과는 상관없이 재미를 추구하고 싶음
     * 전처리기가 더 편리하고 유용함
          + ast 모듈을 사용해 코드를 재작성하고 exec로 실행한 후 exit()을 삽입하는 방식으로 해킹을 했음
          + dicts가 모두 정렬되기 전에는 ast 재작성 기능을 사용해 유용하게 사용했음
     * python의 유연성을 사랑함
          + 가장 저주받은 작업은 문자열을 제자리에서 변형하는 것이었으며, mmap을 남용해 스크립트를 스스로 변형하게 만들었음
          + 이제는 Lisp 인터프리터를 작성하고 싶음
     * pyxl을 사용한 최고의 사례는 jsx에서 영감을 받음
          + # coding: pyxl을 사용해 HTML 코드를 작성할 수 있음
     * Python 2에서 3으로의 전환을 더 잘 처리할 수 있었을지 궁금함
          + # coding: six.python2는 Python2 코드를 Python3에서 유효하게 만들고, # coding: six.python3는 Python3 코드를 Python2에서 실행 가능하게 조정할 수 있음
     * 이 아이디어를 좋아해줘서 기쁨, 더 많은 내용이 곧 나올 예정임
     * 오랜만에 완전히 새로운 아이디어에 놀라움을 느낌
     * Python에서 인라인 코드 생성을 원한다면, Ned Batchelder의 cog를 사용할 수 있음
          + nedbatchelder.com/code/cog
     * 이 코딩 훅 전략으로 도입된 종속성이 pip freeze나 uv에 의해 감지되는지 궁금함
          + 그렇지 않다면, 즐겁게 사용하길 바람. 라이브러리를 재작성하는 것이 더 쉬울 수 있음 (이런 함정이 있다면 다른 함정도 있을 가능성이 높음)
"
"https://news.hada.io/topic?id=16418","고객이 생성한 AI 코드를 수정하는 데 지쳤어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       고객이 생성한 AI 코드를 수정하는 데 지쳤어요

     * 올해 초 Rust 프로그래밍 경험을 쌓기 위해 개인용 암호화폐 거래 및 데이터 수집 도구 구축함
     * 그룹 채팅에서 질문하는 동안 많은 사람들이 유사한 도구를 요구하고 있으며 비용을 지불할 의사가 있다는 것을 발견함
     * 곧 사람들이 무료로 데이터에 액세스하고 소액의 수수료로 거래를 제출할 수 있는 API 엔드포인트를 설정함

고객 유치 및 지원 시작

     * 처음으로 사람들이 내가 직접 만든 소프트웨어에 돈을 지불하는 매우 멋진 경험이었음
     * 기능 발표 및 지원을 위해 Telegram 채널을 시작했고, 처음에는 잘 작동함
     * 그러나 고객 기반이 서서히 증가함에 따라 지원에 더 많은 시간이 소요되기 시작함
     * SAAS 스타트업의 경우 지원 부담이 증가하는 것은 놀라운 일이 아니며, 결국 고객이 많은 것은 좋은 문제임
     * 짜증나는 것은 지원 요청의 양이 아니라 질이었음

프롬프트 엔지니어 코더들의 지원 요청

     * API는 잘 문서화된 몇 가지 엔드포인트에 불과함
     * 프로그래밍 언어를 사용하여 POST 요청을 보내는 방법을 알아낼 수 있다면 API 사용에 문제가 없어야 함
     * 그러나 그것은 새로운 세대의 프롬프트 엔지니어 코더들에게는 너무 높은 기준인 것 같음
     * 지원 채널을 열고 나서 ""도와주세요! 내 거래 봇이 작동하지 않습니다!!""와 같은 많은 지원 요청을 받음
     * 대부분의 경우 고객 코드는 대부분 괜찮지만 문서를 읽고 프로그래밍 능력이 있는 사람에게는 눈에 확실히 보이는 오류가 있음
     * 종종 존재하지 않는 엔드포인트에 액세스하거나 존재하지 않는 API 응답에서 속성을 읽으려고 하는 형태로 나타남
     * 좀 더 조사해 보면 ChatGPT가 해당 엔드포인트 또는 속성을 만들어냈고(hallucinated) 내가 이야기하고 있는 고객은 프로그래밍 지식이 거의 없다는 의심이 대개 확인됨

단순한 스크립트 vs 복잡한 애플리케이션

     * 단순한 스크립트를 작성하려는 경우 도와주고 Hallucination을 수정함 - 많은 노력이 필요하지 않고 잠재 고객을 만들어냄
     * 그러나 종종 고객은 더 복잡한 애플리케이션을 구상하고 있으며, 나는 그들에게 ""죄송합니다. 전문 개발자를 고용하세요""라고 말해야 함
     * 최악의 경우는 요청이 단순하게 시작되는 경우 - 내가 한 가지 환각을 고치는 것을 도와주지만 - 그 고객은 더 복잡한 논리를 구축하기를 원하고, 어떻게든 내가 무제한 무료 지원을 제공할 것이라는 기대를 설정함
     * 기본적으로 내가 자신들의 전체 앱을 무료로 만들어주기를 바라는 고객들로부터 많은 분노의 메시지를 받았음

SAAS 사업의 고객 지원 과제

     * SAAS 사업을 위한 지원을 실행한 사람에게는 이러한 과제가 익숙할 것임
     * 하지만 AI 프로그래밍 도구로 인해 문제가 악화됨
     * 고객이 대부분의 작업을 스스로 수행할 수 있을 때만 고객이 문제를 해결하도록 돕는 것은 종종 매우 보람 있음
     * 고객들이 자신의 능력이 없기 때문에 소프트웨어 엔지니어링을 AI에 오프로드할 때, 그들은 여전히 AI가 만드는 버그를 고칠 개발자를 찾아야 함
     * 나는 그 개발자가 되고 싶지 않음

GN⁺의 의견

     * AI 생성 코드가 개발자에게 부담이 될 수 있음. 고객들은 AI가 만든 코드를 그대로 사용하려 하고, 문제가 생기면 개발자에게 무료로 해결해달라고 요구함
     * 문서화가 잘 되어 있더라도 프로그래밍 능력이 부족한 사람들은 API를 제대로 활용하기 어려움. 이는 AI 도구의 한계를 보여줌
     * AI 도구를 사용할 때는 그 결과물을 그대로 신뢰하기보다는 전문 개발자의 도움을 받아 검토하고 수정하는 과정이 필요함
     * 복잡한 애플리케이션을 개발할 때는 AI 도구에 의존하기보다는 전문 개발자를 고용하는 것이 바람직함
     * 기술 지원을 제공할 때는 고객의 기술 수준과 요구사항을 파악하고, 무료 지원의 범위를 명확히 설정할 필요가 있음

   필자분은 그만 고통받으시고 이직 준비를 하셔야 할 듯 합니다

   음 뭔가 요즘들어 GN+ 게시물들 퀄리티가 점점 안좋아지고 있는 느낌이 드내요...

   Wellcome to K-SI

        Hacker News 의견

     * 고객의 문제를 해결하는 것은 보람이 있지만, 고객이 스스로 대부분의 작업을 할 수 있을 때만 가능함
     * 기술적 엔터프라이즈 세일즈에서 고객과의 상호 존중과 유익한 논의가 즐거웠음
     * 기술적 지식이 부족한 사람들은 대개 높은 비용을 지불하지 않음
     * 저자의 상황에 공감하며, 이는 매우 힘든 일임
     * 생성적 문법이 기술적 공동 창업자를 찾는 사람들의 수를 증가시켰음
     * 동료가 Copilot을 사용해 코드 오류를 발생시킨 사례를 공유함
     * 생성적 AI의 코드를 이해하지 않고 사용하는 것은 좋지 않음
     * 많은 사용자가 트위터 인플루언서의 ""hustle university"" 코스를 따르고 있음
     * Crypto와 AI는 빠른 부를 얻기 위한 사기에서 자주 사용되는 단어임
     * GPT가 자신의 코드를 수정할 수 있어 지원 부담을 줄일 수 있음
     * 챗봇 지원을 싫어하지만, 대안은 더 나쁨
     * 많은 사람들이 소프트웨어 개발을 원하지만 기본적인 프로그래밍 지식이 부족함
     * Python이나 JavaScript를 배우는 데 일주일을 투자할 수 있음
     * C 프로그래밍 언어를 피하고 Pascal이나 Visual Basic을 선호함
     * 명확한 문서와 예제가 학습에 가장 도움이 됨
     * Free Pascal의 문서화 문제를 지적함
     * CoPilot은 인내심이 있어 계속 시도할 수 있음
     * 암호화폐 거래 도구와 빠른 부를 얻기 위한 사기 사이의 상관관계가 있음
     * ""hallucination-based API design""이 트위터에서 언급되었음
     * ChatGPT가 API 엔드포인트를 상상하여 문제를 일으킬 수 있음
     * 제3자 API와 작업할 때 추가 엔드포인트가 유용할 수 있음
     * 새로운 엔드포인트나 매개변수를 제안하여 제품을 개선할 수 있음
     * AI 생성 애플리케이션을 수정하는 전문가가 될 기회가 있음
     * 많은 기업이 생성적 AI로 애플리케이션을 만들려고 시도할 것임
     * 문제를 해결하는 전문가로 명성을 쌓으면 조기 은퇴할 수 있음
"
"https://news.hada.io/topic?id=16426","OpenAI, Condé Nast와 콘텐츠 이용 계약 체결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenAI, Condé Nast와 콘텐츠 이용 계약 체결

     * Condé Nast와 OpenAI가 다년 계약을 체결하여 OpenAI가 New Yorker, Vogue, Vanity Fair, Bon Appetit, WIRED 등 주요 매체의 콘텐츠를 ChatGPT와 SearchGPT 프로토타입에서 사용할 수 있게 되었음
     * Condé Nast의 CEO인 Roger Lynch는 전사 이메일에서 이 계약이 지적 재산권의 올바른 사용을 보장하며, 기술 변화로 인해 출판업계가 수익을 창출하기 어려워진 상황에서 새로운 수익을 창출하는 데 도움이 될 것이라고 언급
     * Lynch는 올해 초 의회에서 AI 회사들이 콘텐츠를 사용하는 방식에 대해 라이선스를 강조하며 증언했으며, AI 회사가 사전 허가 없이 콘텐츠를 사용하는 것을 강하게 반대했음
     * 계약의 구체적인 조건은 공개되지 않았으며, OpenAI는 이에 대해 코멘트 하지 않았음
     * NewsGuild of New York의 회장인 Susan DeCarava는 이 계약에 대해 투명성을 요구하며, Condé Nast의 OpenAI 계약이 직원들의 권리에 미칠 영향을 우려하고 있음
     * OpenAI는 이번 계약이 처음이 아니며, The Atlantic, Axel Springer, TIME 등 여러 매체가 이미 AI 회사와 유사한 계약을 체결한 바 있음. 그러나 대부분의 AI 회사는 기존에 라이선스 없이 인터넷에서 데이터를 수집해왔으며, 이에 대한 법적 소송이 계속되고 있음
     * 디지털 퍼블리셔들은 검색 엔진과 소셜 미디어 플랫폼을 통해 독자를 유치하며, Google과 같은 검색 엔진이 AI 뉴스 요약 및 AI 제품을 도입하면서 이러한 변화에 적응해야 하는 상황
     * 그러나 이러한 전략에 대해 업계 내에서 의문을 제기하는 목소리도 있음. The Atlantic의 에세이에서 Jessica Lessin(유료 뉴스사이트인 The Information의 CEO)은 이러한 계약이 ""소송 없이 합의하는 것""과 같으며, 퍼블리셔들이 신뢰성을 조금의 현금과 맞바꾸고 있다고 주장
     * Condé Nast 직원들은 이번 계약에 대해 우려를 표명하며, 익명을 요청한 한 기자는 AI 도구가 잘못된 정보를 퍼뜨리고 숙련된 기술을 저해하는 것에 기여하고 싶지 않다고 밝힘

   AI 파트너쉽 트래커 : AI회사들과 미디어들의 계약 추적

   이 트래커에도 추가되었네요. 계약 금액은 공개가 안되었습니다.
   OpenAI가 기존에 News Corp 하고 맺은 계약이 5년간 $250m+ 인데, 그거보다는 많지 않을까 예상해 봅니다.
"
"https://news.hada.io/topic?id=16434","17세 학생, 독일의 '비밀' Pirate Site 차단 목록 폭로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 17세 학생, 독일의 '비밀' Pirate Site 차단 목록 폭로

  독일의 해적 사이트 차단

     * 독일에서 여러 대형 인터넷 서비스 제공업체가 악명 높은 해적 사이트를 차단하고 있음
     * 이는 저작권자와의 자발적 합의의 결과이며, 차단된 도메인 이름은 공개되지 않음
     * 17세 학생이 친구들과 함께 차단된 모든 도메인을 공개하는 포털을 개설함

  차단된 사이트는 무엇인가?

     * 해적 자료를 주로 호스팅하거나 링크하는 웹사이트는 차단 목록에 포함될 수 있음
     * 독일은 차단된 도메인 이름을 공식적으로 공개하지 않음
     * 이는 저작권자와 인터넷 제공업체 간의 합의에 명시된 사항임

  투명성 '누출'

     * 차단된 도메인에 대한 비공개는 기자와 감시자들에게 좌절감을 줌
     * 공식 소스에서 정보를 얻을 수 없자, 독일의 17세 학생 Damian이 친구들과 함께 CUIIliste.de를 개설하여 모든 차단된 URL을 공개함
     * CUIIliste.de는 차단된 도메인을 수집하고 공개하는 역할을 함

  275개의 (서브)도메인 차단

     * 현재까지 CUII는 공식 웹사이트에 21개의 차단 권고를 발표했으며, 이는 275개의 도메인 차단으로 이어짐
     * 차단 투명성 포털은 검색 가능한 도메인 목록을 제공하며, 새로운 차단이 발견될 때마다 업데이트됨
     * 중복된 서브도메인을 제외하면 104개의 도메인 이름이 차단됨

  투명성 및 검열 반대

     * CUII는 차단 노력이 검열이 아니라고 주장하지만, 투명성이 부족하여 이를 확인하기 어려움
     * Damian과 그의 친구들은 투명성을 제공하고 검열에 반대하며 표현의 자유를 옹호함
     * 차단을 우회할 수 있는 다양한 옵션도 제공함

  GN⁺의 정리

     * 독일의 해적 사이트 차단은 저작권 보호를 위한 조치로, 투명성 부족이 문제로 지적됨
     * 17세 학생 Damian이 차단된 도메인을 공개하여 투명성을 높이고 검열에 반대하는 활동을 함
     * 독일과 다른 많은 국가들은 우루과이의 투명성 모델을 참고할 필요가 있음
     * 유사한 기능을 가진 프로젝트로는 Sci-Hub와 같은 사이트가 있음

        Hacker News 의견

     * 유명한 사이트들이 리스트에 포함되지 않은 것에 놀라움
          + 독일에서 토렌트를 사용하는 사람들은 이미 VPN을 사용하고 있음
          + ISP가 IP 정보를 제공하여 변호사들이 다운로드한 사람들을 추적함
          + 큰 토렌트 사이트를 제외한 이유가 변호사들에게 수입을 제공하기 위함일 수도 있음
     * Openvpn / Wireguard 서비스가 선호되지만 무료로 사용할 수 있는 방법 제시
          + dnscrypt-proxy 설치 및 설정 방법 설명
          + DoH / DoT 사용 권장
          + Firefox에서 NexDNS 설정 방법 안내
          + Cloudflare 사용 가능
          + 저렴한 VPS 프록시 설정 방법 설명
          + Tailscale 사용 가능
     * RPi 5를 Tailscale 출구 노드로 사용하여 다운로드 및 지역 제한 스트리밍 콘텐츠 접근 가능
          + qbittorrent-nox를 사용하여 브라우저로 쉽게 다운로드 가능
          + 저렴한 Netflix 구독 이용 가능
     * Sci-hub를 차단하여 인터넷을 정화한다는 의견에 반대
     * DNS 기반 차단은 쉽게 무시할 수 있는 제안에 불과함
     * Streisand 효과를 느낄 것이라는 의견
     * VPN이나 Tor를 사용하면 차단된 사이트에 접근 가능
     * cuiiliste.de가 다음 차단 리스트에 추가될 가능성 언급
     * ""비밀""과 ""독일""이라는 단어 조합이 흥미로움
     * DNS 수준에서 차단된다는 설명
          + IP 주소로의 라우팅 차단은 아님
          + 검열 연구에 사용하는 벤치마크 사이트가 리스트에 포함되지 않음
"
"https://news.hada.io/topic?id=16421","InstantDB – "현대적인 Firebase" : 실시간 클라이언트측 DB 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            InstantDB – ""현대적인 Firebase"" : 실시간 클라이언트측 DB 오픈소스

     * 클라이언트 측 DB로, Notion이나 Figma와 같은 실시간 협업 앱을 쉽게 구축할 수 있게 해줌
     * 관계형 쿼리를 작성하면 Instant가 데이터 가져오기, 권한 확인, 오프라인 캐싱을 처리
     * 데이터 변경 시 Optimistic 업데이트와 롤백도 자동으로 처리
     * 모든 쿼리는 기본적으로 멀티플레이어로 지원
     * 커서나 온라인 상태와 같은 일시적 업데이트도 지원
     * 현재 Javascript, React, React Native용 SDK를 제공

  개발 동기

     * 현대 앱 개발은 서버 설정, 데이터베이스, 캐시, ORM, 엔드포인트 설정 등 많은 작업이 필요함
     * 클라이언트 측 코드 작성, 상태 관리, UI 페인팅도 필요함
     * 멀티플레이어 기능 추가 시 상태 저장 서버를 고려해야 하고, 오프라인 모드 지원 시 IndexedDB와 트랜잭션 큐를 고려해야 함
     * 새로운 기능 추가 시마다 모델, 엔드포인트, 상태 관리, UI를 반복적으로 작성해야 함
     * 2021년에 UI 엔지니어가 직면하는 대부분의 문제는 사실 데이터베이스 문제임을 깨달음
     * 클라이언트 측 데이터베이스가 있다면 상태 관리, 엔드포인트, 로컬 캐시를 생각할 필요 없이 쿼리만 작성하면 됨
     * 쿼리가 기본적으로 멀티플레이어를 지원하면 상태 저장 서버를 걱정할 필요 없음
     * 데이터베이스가 롤백을 지원하면 낙관적 업데이트를 무료로 제공받을 수 있음
     * 그래서 Instant를 개발함. Instant는 클라이언트에서 사용할 수 있는 데이터베이스를 제공하여 UX 구축에 집중할 수 있게 해줌

  아키텍처 개요

     * Instant는 모든 사용자 데이터를 하나의 큰 Postgres 데이터베이스에 트리플 형태로 저장함
     * 멀티 테넌트 설정으로 무료 티어를 제공함
     * Clojure로 작성된 동기화 서버가 Postgres와 통신함
     * Datalog와 GraphQL과 유사한 InstaQL을 이해하는 쿼리 엔진을 작성함
     * Asana의 WorldStore와 Figma의 LiveGraph에서 영감을 받아 Postgres의 WAL을 추적하여 새로운 데이터를 감지하고 관련 쿼리를 무효화함
     * 프론트엔드에서는 클라이언트 측 트리플 스토어를 작성함
     * SDK는 웹에서는 IndexedDB, React Native에서는 AsyncStorage에 최근 쿼리 캐시를 저장함
     * 모든 데이터는 Google's CEL 라이브러리로 구동되는 권한 시스템을 통해 처리됨

GN⁺의 정리

     * Instant는 클라이언트 측 데이터베이스로, 실시간 협업 앱을 쉽게 구축할 수 있게 해줌
     * 관계형 쿼리를 통해 데이터 가져오기, 권한 확인, 오프라인 캐싱을 자동으로 처리함
     * 멀티플레이어 기능과 낙관적 업데이트, 롤백을 기본적으로 지원함
     * Asana와 Figma에서 영감을 받아 Postgres의 WAL을 추적하여 새로운 데이터를 감지하고 관련 쿼리를 무효화함
     * 클라이언트 측 트리플 스토어와 권한 시스템을 통해 데이터 관리를 효율적으로 처리함

   Supabase와 같은 결에서 정말 기대되는 프로젝트네요

        Hacker News 의견

     * Firebase 창립자: Instant의 오프라인, 실시간, 관계형 쿼리, 오픈 소스 조합에 흥분됨. 관계형 쿼리에 대한 요청이 많았음. Firebase 클라이언트는 오픈 소스지만 백엔드는 오픈 소스화 실패했음
     * 피드백: 코드 예제가 완전하지 않음. transact와 useQuery의 출처가 명확하지 않음. 작은 디테일이 중요함
     * 자체 호스팅 가능 여부: 도구의 일부가 자체 호스팅 불가능한 경우가 많음. 이를 명확히 해야 함
     * 오프라인 우선 모델 대안: PowerSync를 선택했음. WatermelonDB도 괜찮음. ElectricSQL은 아직 미성숙함. CouchDB와 PocketDB는 최신이 아님. PowerSync와 Supabase를 백엔드로 사용할 예정임
     * CRUD 앱과의 관계: CRUD 앱과 InstantDB 또는 Firebase 개념의 관계를 이해하기 어려움. 협업 텍스트 편집기에는 CRDT Javascript 구현을 사용할 것임
     * Instant 사용 경험: 6개월 동안 Instant를 사용했으며 만족스러웠음. 실시간, 관계형, 오프라인 기능이 중요했음. 다른 도구를 시도했지만 실패했음. Instant 이후로는 다른 도구를 사용하지 않음
     * 권한 시스템 요약: Firebase는 데이터 검색/업데이트 논리와 접근 정책을 분리함. Instant는 쿼리 결과에 따라 권한 논리를 평가함. Firebase는 쿼리 실행 전에 안전성을 확인함
     * Datalog 엔진 노출 여부: 재귀 쿼리를 지원하는 다른 Datalog 엔진이 있음. 쿼리 캐시 및 결합 가능 여부를 묻고 있음. 과거 Java InstantDB와 이름이 같음. Clojure로 구현된 다른 Datalog 엔진 목록을 제공함
          + Datomic
          + XTDB
          + Datascript
          + Datalevin
          + datahike
          + Naga
     * ActiveRecord 같은 경험 원함: React/Vue/Solid에서 ActiveRecord와 같은 방식으로 작업하고 싶음. 객체 그래프 같은 API를 원함. SQL 같은 API는 원하지 않음. ORM이 메모리에 전체 객체 그래프가 있는 것처럼 작동하길 원함
     * 트리플 스토어 성능 문제: 대부분의 쿼리가 전체 객체 또는 동일 객체의 여러 필드를 가져올 때 트리플 스토어의 성능이 좋지 않음. Postgres도 그다지 뛰어나지 않음. 이와 관련된 경험을 묻고 있음
"
"https://news.hada.io/topic?id=16482","Ruroco - "RUn RemOte Command" UDP를 이용한 원격 명령 호출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Ruroco - ""RUn RemOte Command"" UDP를 이용한 원격 명령 호출

     * 서버에 UDP 패킷을 보내서 명령을 실행하는 도구
     * 명령은 서버 측에서 구성되므로 클라이언트는 실행할 명령을 정의하지 않고 기존 명령 중에서 선택만 함
     * 3개의 바이너리로 구성
          + client: 컴퓨터에서 실행되어 UDP 패킷을 전송
          + server: UDP 패킷을 수신하고 유효한지 확인
          + commander: UDP 패킷의 데이터로 인코딩된 명령이 유효한 경우 실행
     * 보안
          + UDP로 보내지기 때문에 서버는 전혀 응답하지 않음 : 포트 스캐닝 불가
          + 클라이언트에서 서버로 전송되는 데이터는 RSA를 사용하여 암호화
          + 클라이언트는 실행할 명령만 정의하고 명령은 서버에 저장 -> 클라이언트는 명령을 선택할 수는 있지만 정의할 수는 없음
          + 가능한 한 적은 운영 체제 권한을 사용하도록 서버 소프트웨어를 실행
          + 서버가 수신한 모든 패킷을 차단 목록에 추가하여 replay에서 보호
          + (WIP) DoS 보호

사용 예 : single packet authorization (SPA)

   서버의 보안을 위해서 SSH를 완전히 차단하는 대신, SSH포트를 짧게 열었다 다시 닫는 방식을 도입 가능
address = ""0.0.0.0:8080""  # Ruroco 서버가 수신 대기하는 주소 (systemd/ruroco.socket 사용하지 않는 경우)
config_dir = ""/etc/ruroco/""  # 설정 파일이 저장되는 경로

[commands]
# SSH 열기 (요청이 온 IP 주소에 대해서만)
open_ssh = ""ufw allow from $RUROCO_IP proto tcp to any port 22""
# SSH 닫기 (요청이 온 IP 주소에 대해서만)
close_ssh = ""ufw delete allow from $RUROCO_IP proto tcp to any port 22""

     * 서버에서 이렇게 Ruroco를 구성하고 클라이언트 측에서 다음 명령을 실행
       ruroco-client send --address host.domain:8080 --private-pem-path /path/to/ruroco_private.pem --command open_ssh --deadline 5
     * 서버는 RSA를 사용하여 클라이언트가 해당 명령을 실행할 수 있는 권한이 있는지 확인하고 ""open_ssh"" 아래에 정의된 명령을 실행
     * --deadline 인수는 명령 실행 후 5초 이내에 서버에서 명령을 시작해야 함을 의미
     * SSH 포트에 대한 액세스를 UDP 패킷이 전송된 IP에 대해서만 허용
     * 물론 SSH 포트가 인터넷에 노출되는 경우와 마찬가지로 다른 모든 보안 강화 작업도 수행해야 함
     * 설정 파일에 더 많은 명령을 추가하여 원하는 수의 명령을 정의할 수 있음
"
"https://news.hada.io/topic?id=16413","2024년 휴고상 수상작 발표년 휴고상 수상작 발표

     * 장편 소설 : Emily Tesh 의 Some Desperate Glory
     * 중편 소설 : T. Kingfisher 의 Thornhedge
     * 단편 소설 : Naomi Kritzer 의 The Year Without Sunshine
     * 단편 이야기 : Naomi Kritzer 의 Better Living Through Algorithms
     * 시리즈 소설 : Ann Leckie 의 Imperial Radch (Orbit US, Orbit UK)
     * 그래픽 작품 및 만화 : Brian K Vaughan, Fiona Staples 의 일러스트, Saga, Vol. 11
     * 관련 작품 부문 : Kelly Weinersmith and Zach Weinersmith 의 A City on Mars
     * 드라마 작품 (장편) 부문 : Dungeons & Dragons: Honor Among Thieves
     * 드라마 작품 (단편) 부문 : The Last of Us: Long, Long Time
     * 인터랙티브 작품 및 게임 부문 : Baldur's Gate 3

   소설말고 이런 부문들이 있었군요.

   발더스게이트, 던전앤드래곤 도적들의 명예 는 국내 개봉 및 발매 되었습니다.
   그래픽 노블인 Saga 는 정발 되었지만 Vol 11은 아직 이구요
   Radch(라드츠 제국)은 3부작(사소한 정의, 사소한 칼, 사소한 자비)과 세계관을 공유하는 사소한 기원(Provenance)까지 정발 되었습니다. 2023년 작품인 Translation State는 아직 미발간이네요.

   그외에는 아직 다 국내에는 안나왔습니다.

   라드츠 제국 궁금해서 읽어보려는데 절판이군요 ""판권 소멸 등으로 더 이상 제작, 유통 계획이 없습니다.""

   전 리디에서 장기대여했는데, 정말 절판이군요. 정말 좋은 작품인데 아쉽네요.
"
"https://news.hada.io/topic?id=16428","지속적인 혁신: AWS 블록 스토리지의 간략한 역사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      지속적인 혁신: AWS 블록 스토리지의 간략한 역사

    지속적인 혁신: AWS 블록 스토리지의 간략한 역사

     * 소개
          + Marc Olson은 Elastic Block Store(EBS) 팀에서 10년 이상 일해왔음.
          + EBS는 단순한 블록 스토리지 서비스에서 하루에 140조 이상의 작업을 처리하는 대규모 네트워크 스토리지 시스템으로 발전했음.
          + 이 글에서는 EBS의 진화 과정과 중요한 교훈을 공유함.
     * EBS의 초기 역사
          + EBS는 2008년 8월 20일에 출시되었으며, EC2 인스턴스를 위한 네트워크 연결 블록 스토리지를 제공하는 간단한 아이디어로 시작됨.
          + 초기에는 공유 하드 디스크 드라이브(HDD)를 사용했으며, 현재는 단일 EC2 인스턴스에 수십만 IOPS를 제공할 수 있음.
          + EBS는 현재 분산 SSD 플릿을 통해 하루에 140조 이상의 작업을 처리함.
     * 큐잉 이론
          + 컴퓨터 시스템이 스토리지와 상호 작용하는 방식은 기본적으로 변하지 않았음.
          + CPU는 요청을 큐에 넣고, 스토리지 장치는 데이터를 CPU 메모리에서 가져와 내구성 있는 기판에 저장하거나 반대로 데이터를 CPU 메모리로 전송함.
          + 큐잉 이론은 이러한 프로세스를 이해하는 데 중요한 역할을 함.
     * HDD에서 SSD로의 전환
          + 초기 EBS는 HDD를 사용했으며, 이는 물리적 한계로 인해 성능이 제한적이었음.
          + SSD가 등장하면서 랜덤 요청도 거의 순차적 요청만큼 빠르게 처리할 수 있게 되었음.
          + 2012년에 SSD를 사용한 새로운 스토리지 서버 타입과 Provisioned IOPS라는 새로운 EBS 볼륨 타입을 출시함.
     * 측정과 관리
          + 2012년 당시 EBS는 기본적인 텔레메트리만 가지고 있었음.
          + 시스템 성능을 개선하기 위해서는 무엇이 문제인지 알아내고, 이를 우선순위에 따라 해결해야 했음.
          + 여러 하위 시스템에서 IO를 측정하는 방법을 구축하고, 지속적인 모니터링을 통해 변화를 감지함.
     * 조직의 분할과 정복
          + EBS 스토리지 서버 팀을 데이터 복제, 내구성, 스냅샷 하이드레이션 등 특정 영역에 집중하는 작은 팀으로 재구성함.
          + 각 팀은 독립적으로 변경 사항을 반복하고 커밋할 수 있었음.
     * 가정에 도전하기
          + Xen 하이퍼바이저의 기본 설정이 성능을 제한하고 있었음을 발견함.
          + Nitro 오프로드 카드를 사용하여 네트워크 및 스토리지 처리 작업을 하드웨어로 오프로드함.
     * 네트워크 튜닝 실험
          + EBS를 Nitro로 이동시키면서 네트워크 자체의 오버헤드가 증가함.
          + TCP 대신 SRD(Scalable Relatable Diagram) 프로토콜을 개발하여 네트워크 성능을 개선함.
     * 제약 조건이 혁신을 촉진함
          + 모든 고객에게 SSD의 이점을 제공하기 위해 기존 하드웨어를 교체하지 않고도 SSD를 추가함.
          + SSD를 서버에 수작업으로 추가하고, 새로운 쓰기를 SSD에 저장한 후 비동기적으로 HDD로 플러시함.
     * 성능 확장의 반성
          + 개인적인 성장 이야기: 작은 회사 문화에서 대규모 조직으로의 전환.
          + 동료 디버깅 세션을 통해 문제를 해결하고, 팀의 효율성을 높임.
     * 결론
          + EBS는 단일 대규모 변경이 아닌 일련의 점진적인 개선을 통해 발전해왔음.
          + 고객의 요구는 계속 증가할 것이며, 이는 혁신과 반복을 지속하는 동기가 됨.

    # GN⁺의 정리

     * 이 글은 AWS의 EBS가 어떻게 진화해왔는지에 대한 내부자의 관점을 제공함.
     * 큐잉 이론, SSD 도입, 네트워크 튜닝 등 다양한 기술적 도전과 해결책을 다룸.
     * 성능 개선을 위한 지속적인 측정과 관리의 중요성을 강조함.
     * 비슷한 기능을 가진 제품으로는 Google Cloud Persistent Disk와 Microsoft Azure Disk Storage가 있음.

        Hacker News 의견

     * 큰 시스템에 관심이 있다면 이 글을 읽어보는 것이 좋음
          + 하드 드라이브 성능은 큐에 있는 다른 트랜잭션에 따라 달라짐
          + 무작위 4kB 작업에서는 성능이 크게 떨어질 수 있음
          + 큐잉과 스케줄링이 도움이 되지만, 실제 성능은 작업 부하에 따라 100배 이상 차이날 수 있음
          + 다중 테넌트 시스템에서는 특히 읽기 작업에서 어려움이 있음
     * 문제를 해결하려면 무엇이 잘못되었는지 알아야 함
          + Marc에게 배운 가장 큰 교훈은 시각화를 통해 팀의 관점을 바꾸는 것임
          + 성능 데이터를 여러 방식으로 분석하면 보이지 않는 효율성과 기회를 발견할 수 있음
     * 2013년에 EBS 서버에 SSD를 설치한 프로젝트는 AWS의 흥미로운 이야기 중 하나임
          + 시스템을 처음부터 비파괴 유지보수 이벤트를 염두에 두고 설계했음
          + 분산 시스템을 구축하면 대규모 운영이 가능해짐
     * AWS의 약 4일간의 장애는 EBS로 인해 발생했으며, 이는 AWS에 대한 신뢰를 흔들었음
          + 이로 인해 EBS에 대한 투자가 증가했음
          + Apple이 고객이 되던 시기와 맞물려 있었음
     * Reddit은 2008년에 EBS의 초기 사용자 중 하나였음
          + 소프트웨어 RAID를 사용하여 IOPS를 증가시키려 했으나, 성능이 일관되지 않았음
          + RAID의 문제를 해결하는 데 시간이 걸렸음
          + Netflix는 EBS를 사용하지 않았음
     * 무작위 지연을 추가하면 평균 지연과 이상치가 감소하는 효과가 있음
     * 대규모 인터넷 회사에서 일하면서 많은 교훈을 얻었음
          + 견습 과정을 통해 중요한 지식과 기술을 빠르게 습득할 수 있음
          + 면접 시 경험과 멘토의 추천이 매우 유용함
     * 2013년에 모든 EBS 유닛에 SSD를 수동으로 설치한 부분이 흥미로웠음
          + 2010-2012년 사이에 I/O 성능이 중요한 이슈였음
     * 2009년에 Amazon S3 내부에 대한 강연을 했음
          + 이 강연은 EBS 개발에 영향을 미쳤음
     * 클라우드 초기에는 범용 하드웨어를 사용했으나, 이제는 개별 서비스에 특화된 하드웨어를 사용함
          + AWS는 Graviton, Inferentia, Tranium 칩을 사용함
          + Google은 TPU와 Titan 보안 카드를 사용함
          + Azure는 FPGA와 Sphere를 사용함
     * 첫 번째 다이어그램은 잘못되었거나 구식임
          + 현대 컴퓨터는 대부분의 PCIe 레인이 CPU로 직접 연결됨
          + 이는 I/O 처리량과 지연에 중요한 발전임
     * 새로운 EC2 인스턴스에 빠른 256GB 데이터셋 디렉토리를 제공하는 가장 좋은 방법을 찾고 있음
          + EBS 볼륨을 사용하고 있지만 업데이트가 번거로움
          + EFS는 너무 느림
          + 인스턴스 스토리지 SSD는 일시적임
          + FSx Lustre는 아직 시도하지 않음
"
"https://news.hada.io/topic?id=16506","Show GN: 국내항공권 실시간 비교 검색가능한 앱 - 안드로이드용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: 국내항공권 실시간 비교 검색가능한 앱 - 안드로이드용

   국내 항공권을 검색해서 항공사 홈페이지에서
   예약을 할 수 있는 안드로이드 앱입니다.

   개인적으로 제주도 여행을 자주 가는 편이라서
   편하게 빨리 저렴한 가격의 항공권을 찾다가
   아이디어가 떠올라서 만들었습니다.

    [ 주요 기능 ]

     * 항공권 비교 검색
     * 항공권을 직접 항공사 홈페이지에서 예약 가능

    [ 고려한 사항 ]

     * 저사양 스마트폰에서 돌아갈 수 있도록 가볍게 만들었음.
     * 기존 항공사 앱이 있으면 해당 앱에서 띄울수 있음.

    [ 다른 앱과의 차이점 ]

     * 수수료 없음.
     * 사용자가 해당 앱을 통하여 직접 항공권 예약가능.
     * 개인정보 요구하지 않음. 로그인 필요없음.

    [ 사용 기술 ]

     * Android : WebView, java
     * Frontend : Vanilna JS, CSS, Webpack, Swagger API

   개발 관련 내용도 물어 보시면 답변해드리겠습니다.
   취미로 만들다 보니 부족한 점이 많았습니다.
   관련하여 피드백 주시면 감사하겠습니다.

   항공사 사이트 api는 어떻게 분석하셨나요?

   무식하게 했습니다. -_-

   대한항공,아시아나,진에어,제주항공,티웨이,에어서울,에어부산,이스타
   구글항공,네이버항공,웹투어,인터파크항공 등
   국내에 소개된 항공사들 홈페이지 들어가서
   전부다 일일이 디버거창과 네트웍 패킷캡쳐 띄워 놓고
   어떻게 서로 주고 받는지 분석했습니다.

   분석하다가 보면 길이(?) 보입니다.

   저도 분석해보고 싶은데 보다보니 뭔가 잘 안보이네요 ㅠㅠㅠㅠㅠ 조금 팁이라도 가능할까요..?

   그리고...
   각각의 항공사들 별로 결제 시스템이 천차만별이기 때문에
   웹뷰상에서 결제를 시도하려고 하면
   별에별 오류가 발생합니다.
   쉽게 설명하면
   PC에 뱅킹할때 보안프로그램 설치되듯이
   안드로이드용 보안프로그램을 설치해야 결제 되는 곳도
   있기 때문에

   항공사 1개에 결제 모듈이 5개가 있다면
   항공사 8개이면 대략 40가지 테스트를 해야 해요.
   이걸 개인이 하는것은 힘듭니다.

   다른 커뮤니티에 항공권 예약을 어떻게 하는지 간단히
   질문 해보니...
   네이버나, 인터파크나, 구글 항공이나 이런곳에서
   가격만 검색하고.
   실질적인 예약은 항공사앱을 통해서 하더군요.

   제가 만든 앱도 처음 의도는 이것과 비슷했어요.
   검색하고.. 항공사앱 안띄우고 바로 항공사 홈피의
   검색 결과 창으로 이동해서 바로 결제하는것..

   조언을 드리자면...
   Firefox 개발자용 브라우저 있습니다.
   Chrome 개발툴도 괜찮습니다만.
   약간 차이가 있어요.

   보통 API가 호출되고 다음 페이지로 redirect 되기 때문에..
   실질적인 API가 어떻게 호출되는지 알아내기가 쉽지 않아요.
   무식하게 redirect 넘어가기 전에 웹을 중단 시키든지..

   아니면..
   네트웍 패킷 캡쳐 프로그램을 띄워 놓고
   모니터링 하시면 최종 API를 찾을 수 있어요.

   API를 찾아다고 하더라도..
   인증키, 쿠키정보, 관련 세션정보가 맞지 않으면
   해당 API를 호출하더라도 오류 발생합니다.

   각각의 항공사들 마다 특징이 있기 때문에.
   정말로 -_- 트릭이 필요합니다.

   제일 힘든곳이 대한항공입니다!! 앵귤러사용해서
   리버스하기가 매우 어려워요.

   때려치울까 하다가...
   한 2년정도 삽질했어요.ㅎㅎㅎ 머리가 나쁘다 보니.. 손발이 고생을...

   우선 진에어 부터 시도중인데 x-csrf-token과 cookie값 처리를 어떻게 하셨었는지 어쭈어 봐도 괜찮을까요...? 다른 항공사는 아직 감을 못잡았는데 진에어는 어떻게 요청을 보내야 하는지는 찾았는데 이 두 값이 문제이네요 ㅠㅠㅠ

   크롬 또는 Firefox 또는 edge를 에서 F12 누르면
   개발툴 뜹니다.
   여기서 디버거 탭 선택하시고.. 왼쪽에 소스창을 확인하고
   저장소 탭 선택하면 왼쪽에 로컬저장소,세션저장소,캐시저장소,indexed DB, 쿠키 항목들
   있어요.. 이거 확인하시고...

   네트워크 탭 선택하시고.. 웹 페이지 눌렀을때 패킷들이 어떻게 왔다 갔다 하는지 확인하시고
   대충 파악되면

   디버거 탭에서 브레이크포인트 걸고
   이 상태에서 웹 페이지가 서버와 어떻게 왔다 갔다 하는지
   일일이 확인 해야 해요.

   진에어는 쉬운 편인데^^;;; 최근에 화면이 이쁘게 개편이 되긴 했습니다.
   내부 로직은 예전(2년전과 거의 바뀐게 없어요)

   서버에서 생성된 token이 클라이언트로 넘어오면 웹브라워저 내부의 저장소의
   어디에 저장되는지 확인해보세요.

   저의 경우는 단순하게 사용자 정보와 날짜정보만 가지고
   해당 화면까지 이동만 하고..
   해당 시간의 위치까지 화면 스크롤 하고 끝이에요.

   여기서 가격 누르고 로그인 시키고 할수도 있는데.
   이부분은 너무 케이스 바이 케이스라..

   사용자에게 자유롭게 할 수 있도록 남겨 놨어요.

   더 쉽게 설명하자면
   사용자가 항공사 앱을 키지 않고
   그냥 스마트폰에 있는 많이 사용하는 웹브라우저(크롬, 삼성인터넷 등등)으로
   항공사 홈피에 접속해서 검색하고
   로그인 하고 결제하는 거죠..

   그런데 이걸 웹뷰로 하면
   제한 사항이 아주 많아서 제대로 구현이 되지 않아요.
   각각의 항공사 별로 별에별 희한한 로직으로 구현되어 있어서..
   진에어만 해도 결제 시스템이 여러게 있을꺼에요.
   이거 연동테스트 다 해봐야 되니..

   저도 이글 보고 제가 자주타는 노선의 항공사 위주로 해보려 하는게 저도 삽질 많이 하겠네요 ㅋㅋㅋㅋ
   감사합니다

   멋진 프로젝트네요 !! 안드로이드가 없어서 ㅜㅜ ios 혹은 웹페이지 기대하고 있겠습니다!!

   웹앱이라.. 웹페이지로도 만들수 있었습니다만...^^
   서버 관리하기 귀찮아서 -_-
   그냥 폰에다가 웹페이지용 파일들을 다 올려버렸습니다.
   사용자 입장에서는 서버에 접속을 하지 않으니..
   반응 속도도 빠르고..

   그렇다 보니...
   관련 보안 제약 및 충돌이 많이 있어서
   개발할 때 고생좀 했습니다.
   특히 결제 모듈들은
   항공사 별로 다 천차 만별이고 별에별 결제 시스템이 붙어 있는것을
   출시 직전에 알아서
   테스트 하느라 힘들었어요.

   저도 가끔 살때 크롤러 만들어서, 최저가 검색했었는데 유용할거 같아요 ㅋㅋ
   궁금한점이 있습니다. Skyscanner에는 안나오는 것들이 많았었나요?

   skyscanner과 같은 해외 항공권 검색사이트는 글로벌하게 검색을 하는 것을 지원합니다.
   즉, 나라간 이동을 최저가로 하기 때문에... 국내용으로 별루 였습니다.

   국내용은 그냥 내가 원하는 항공사, 날짜와 시간을 한번에 쉽게 볼수 있게 만들자
   라는 것이 처음에 개발 방향 이었어요...

   최초에는 자동(?)으로 검색해서 특정 날짜에 항공사와 시간과 가격을 맞춰놓고
   알람을 보내줄려고 했는데... 이 기능은 잠시 접어 두고...
   기존 항공권 앱처럼 검색해서 쉽게 필터링하고 바로 항공사 홈페이지에
   이동해서 예약하게 만들었어요.

   멋진 서비스를 만드셨군요.
    1. 국내항공권의 가격 정보는 스크린 스크래핑으로 처리 하신 건가요?
    2. 속도문제가 필연적으로 발생할텐데 캐시를 사용하시나요?

   스크린 스크래핑은 사용하지 않았어요.
   캐시는 사용하지 않습니다.
   항공사에서 사용자 웹 페이지에 전달되는 정보들을
   일일이( -_-) 수동으로 내부적으로 파싱해서 필요한 정보만 뽑아서
   가격정보를 만들었어요...

   서버에서 하려고 하다가..
   서버 비용때문에...
   그냥 webview에서 다 처리를 했습니다.

   와 멋지십니다. IOS 계획은 없으신가요?

   IOS용으로 만들려고 맥미니 샀습니다. ^^
"
"https://news.hada.io/topic?id=16449","애플 Vision Pro의 어려움으로 Meta 고급 혼합 현실 헤드셋 취소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               애플 Vision Pro의 어려움으로 Meta 고급 혼합 현실 헤드셋 취소

Meta, 고급 혼합 현실 헤드셋 개발 취소

     * Meta는 Apple Vision Pro와 경쟁하기 위해 개발 중이던 고급 혼합 현실 헤드셋의 작업을 취소함
     * 이번 주 Meta는 제품 리뷰 회의 후 직원들에게 해당 장치 작업을 중단하라고 지시함
     * 이 장치는 2027년에 출시될 예정이었으며, Apple Vision Pro에 사용된 고해상도 마이크로 OLED 디스플레이를 탑재할 예정이었음
     * Meta는 이 장치를 $1,000 이하로 판매하려 했으나, 디스플레이 비용이 높아 불가능했음

Meta의 향후 계획

     * Meta는 Quest 3의 후속작인 Quest 4의 개발을 계속 진행 중이며, 이 헤드셋은 2026년에 출시될 가능성이 있음
     * Quest 3의 가격은 $500이며, 후속작도 비슷한 가격대가 될 것으로 예상됨
     * Meta는 하드웨어보다는 소프트웨어에 집중하고 있으며, 올해 초 타사 하드웨어 제조업체를 위한 Horizon OS 플랫폼을 발표함

Apple Vision Pro의 시장 반응

     * Vision Pro가 출시되었을 때 Meta는 이 장치가 헤드셋 시장을 활성화하고 Zuckerberg의 AR/VR 분야 진출을 검증해주길 바랐음
     * 그러나 Apple은 소비자 호응에 어려움을 겪었고, Vision Pro에 대한 관심이 시간이 지남에 따라 감소함
     * Vision Pro에 대한 열정은 출시 한 달 만에 식기 시작했고, Apple 매장에서의 시연 방문자 수가 줄어듦
     * Apple은 4월에 Vision Pro 출하량을 줄였으며, 2024년에 50만 대도 판매하지 못할 가능성이 큼
     * 결과적으로 Apple은 고가의 2세대 Vision Pro 작업을 중단하고, 기능이 적고 고급 iPhone에 가까운 가격의 저가 모델을 만드는 데 집중하고 있음

GN⁺의 정리

     * Meta가 고급 혼합 현실 헤드셋 개발을 취소한 것은 Apple Vision Pro의 시장 반응이 저조했기 때문임
     * Meta는 하드웨어보다는 소프트웨어에 집중하며, Quest 시리즈의 후속작 개발에 힘쓰고 있음
     * Apple Vision Pro의 초기 기대와 달리 소비자 관심이 빠르게 식었고, Apple은 저가 모델 개발로 방향을 전환함
     * 이 기사는 AR/VR 시장의 현재 상황과 주요 기업들의 전략 변화를 이해하는 데 도움이 됨

        Hacker News 의견

     * 프리미엄 VR 헤드셋에 대한 반론: Vision Pro는 텔레포트 장치임
          + Vision Pro의 Haleakala 환경 경험은 실제 그곳에 있는 것처럼 느껴졌음
          + 개발이 직관적이지 않고 사용자 기반이 작으며 UX가 낯설고 하드웨어 비용이 높음
          + 몇 년 후에는 하드웨어가 이미 준비되어 있을 것임
          + 장애가 있는 가족을 텔레포트할 수 있는 기능은 3000달러의 가치가 있음
          + 중요한 기억을 'VR 녹화기'로 기록할 수 있다면 좋을 것임
          + 결혼식 사진사는 4000달러 이상이지만, VR로 가장 아름다운 날로 돌아갈 수 있음
          + 직접 경험해보기 전까지는 판단하지 말 것
     * 거대 기업들이 AR에 집중하는 이유: 자아 중심 데이터와 인간 I/O의 완전한 통제
          + 시각과 소리를 통한 데이터 파이프라인이 가장 중요함
          + 인간 행동을 예측하고 플랫폼을 통해 직접적으로 형성하는 것이 목표임
          + Google의 Hyperreality 비디오가 이러한 미래를 예고했음
          + 너무 빠르게 도입하면 사람들을 겁먹게 할 수 있음
          + Apple은 서둘렀고 Meta는 타이밍을 잘 맞추고 있음
          + 목표는 모든 것을 포괄하는 스파이웨어를 점진적으로 도입하는 것임
     * Carmack의 의견: 헤드기어가 수영 고글 크기로 줄어들기 전까지는 주류가 되지 않을 것임
          + Apple Vision Pro는 예상치 못한 실패작이었음
          + 안경 크기의 디자인과 전화기 같은 기능이 더 적합했을 것임
          + iDweebs처럼 항상 착용할 수 있는 제품이 필요함
     * AVP가 움직이지 않는 이유: VRChat 같은 콘텐츠를 우선시하지 않음
          + 많은 사람들이 VRChat을 사용하기 위해 Quest 2와 3을 구매함
          + iPhoneOS는 초기부터 YouTube를 지원했음
          + Apple이 YouTube를 대체하려고 하는 것처럼 보임
     * 개인적인 의견: AVP는 소비자에게 판매되는 DevKit임
          + GoogleGlas/Oculus Devkits를 구매한 사람들을 보면 Apple이 고가의 소비자 장치로 DevKit을 출시한 것이 이해됨
          + 제품의 방향이 어떻게 될지 궁금함
          + iPhone1과 현재의 iPhone을 비교하면 흥미로울 것임
     * AVP의 존재 이유: 출시되지 말았어야 했음
          + 내부 논쟁에서 프로젝트를 중단하거나 현재 상태로 출시하는 선택이 있었을 것임
          + Zuck의 개인적인 관심이 없었다면 Reality Labs는 오래전에 사라졌을 것임
          + 개발자들은 더 회의적이어야 함
     * Meta Ray-ban 안경: 완벽한 형태, 멋진 디자인, 실제로 사람들이 원하는 기능을 가지고 있음
          + 웨어러블 + AR/VR + AI의 미래임
     * VR/AR 헤드셋의 첫 번째 붐과 실패: 90년대에 있었음
          + 몇 번의 사이클 후에 도달할 것임
     * AVP 소유자의 경험: 최고의 TV 및 영화 감상 경험임
          + 어떤 면에서는 Metreon IMAX보다 나음
     * 킬러 앱: 성인 콘텐츠이지만 Apple은 허용하지 않음
          + Zuck는 사용자의 행동을 감시하는 것을 좋아함
"
"https://news.hada.io/topic?id=16526","파이썬 데이터프레임 라이브러리 Ibis, Pandas 와 Dask 백엔드를 폐기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              파이썬 데이터프레임 라이브러리 Ibis, Pandas 와 Dask 백엔드를 폐기

     * pandas와 dask 백엔드를 폐기하고 버전 10.0에서 제거할 예정임
     * pandas 백엔드와 기본 DuckDB 백엔드 간의 기능 차이가 없으며, DuckDB가 훨씬 더 성능이 뛰어남
     * pandas DataFrame은 여전히 Ibis에서 데이터를 주고받는 형식으로 사용 가능하지만, pandas를 사용하여 쿼리를 실행하는 것은 지원하지 않음
     * 대부분의 논리는 dask 백엔드에도 적용되며, dask는 훌륭한 프로젝트로 Ibis 외부에서는 계속 사용해야 함

  왜 pandas인가? 그리고 Ibis의 역사

     * Ibis 초기에는 Impala 백엔드만 존재했음
     * Postgres 백엔드가 추가되었지만, 설치가 복잡하여 사용자가 쉽게 Ibis를 시도할 수 없었음
     * 노트북 이외의 추가 인프라 없이 Ibis API를 시험해 볼 수 있는 방법이 필요했음
     * 당시 유일한 인메모리 DataFrame 엔진인 pandas 백엔드를 연결하는 것이 명백한 답이었음

  Pandas 백엔드의 어려움

     * pandas는 당시 최고의 선택이었지만, Ibis의 데이터 분석 모델과 잘 맞지 않았음
     * pandas 백엔드는 다른 백엔드와 근본적으로 달라 가장 많은 특수 코드를 가지고 있음
     * pandas는 본질적으로 즉시 실행 엔진이며, Ibis는 지연 실행 모델을 사용함
     * pandas 인터페이스를 지연 방식으로 작동하게 만드는 것은 어려움
     * pandas 백엔드는 다른 백엔드보다 느리며, 이를 위해 수천 줄의 코드가 필요함
     * pandas의 NaN과 Ibis의 NULL은 근본적으로 다른 개념이지만, 이를 같은 것으로 취급해야 함
          + pandas에서 NaN을 결측값의 표시로 사용했지만, 이는 다른 백엔드와의 호환성 문제를 일으킴
          + NULL은 결측값을 나타내고, NaN은 숫자가 아님을 나타내는 fundamentally 다른 개념임
     * pandas의 새로운 Arrow 기반 타입은 큰 개선이지만, 여전히 문제점이 있음

  새로운 사용자에게 혼란을 줌

     * 사람들은 익숙한 것을 선호함
     * 처음 Ibis를 사용할 때 Ibis와 백엔드를 모두 선택해야 함
     * 새로운 사용자들은 종종 ""Ibis가 느리다""고 보고함
     * 이는 대부분 pandas 백엔드를 사용했기 때문임
     * DuckDB나 Polars를 사용했다면 훨씬 쉽게 시작할 수 있었을 것임

  기능 동등성

     * pandas 백엔드를 제거하는 가장 강력한 이유는 중복성 때문임
     * DuckDB 백엔드는 pandas DataFrame을 원활하게 쿼리할 수 있으며, 여러 형식의 UDF를 지원하고, parquet, CSV, JSON 등 다양한 형식을 읽고 쓸 수 있음
     * DuckDB는 설치가 쉽고, 로컬에서 실행되며, 매우 빠르고, Python 생태계와 잘 상호작용함

  GN⁺의 정리

     * DuckDB를 기본 백엔드로 채택한 것은 매우 현명한 결정으로 보임. 설치가 쉽고, 로컬에서 실행되며, 매우 빠르고, 파이썬 생태계와 잘 상호작용함. 이는 Ibis가 처음에 pandas를 백엔드로 추가한 이유이기도 함
     * pandas가 여전히 데이터 주고받는 포맷으로 사용될 수 있다는 점은 기존 pandas 사용자에게 좋은 소식임. 기존 코드를 완전히 버릴 필요는 없음
     * 그러나 쿼리 실행에 pandas를 더 이상 사용하지 않는 것은 올바른 방향으로 보임. pandas의 열성적 실행 모델은 Ibis의 지연 실행 모델과 맞지 않음. 이로 인해 pandas 백엔드는 종종 직접 pandas를 사용하는 것보다 훨씬 느림
     * Ibis가 점점 더 많은 백엔드를 지원함에 따라 특정 백엔드에 맞춰진 코드를 유지보수하는 것은 점점 더 어려워질 것임. pandas 백엔드를 제거하면 코드베이스가 더 깔끔해지고 유지보수가 쉬워질 것임
     * DuckDB 백엔드를 사용하는 것이 pandas의 모든 기능을 대체할 수 있다면, pandas 백엔드를 유지할 이유가 없어 보임. 오히려 새로운 사용자에게 혼란을 줄 수 있음

   제일 익숙한 pandas를 여전히 많이 쓰고 있는게 현실이죠,,

        Hacker News 의견

     * NaN은 0/0의 결과로, 값이 존재하지만 정확히 알 수 없음을 의미함
          + NULL은 특정 위치의 값을 알 수 없음을 의미함
          + NaN과 NULL의 구현이 다르지만 완전히 무관하지 않음
          + Python의 None은 NaN과 NULL과 다름
     * pandas보다 더 나은 컴퓨팅 엔진이 많음
          + 기존 코드베이스와 서드파티 통합 때문에 pandas를 계속 사용함
          + 작은 데이터 작업에는 pandas가 충분히 적합함
     * 최근 몇 달 동안 새로운 프로젝트에서 pandas를 ibis로 대체함
          + ibis의 문법이 pandas보다 더 유연함
          + 연산 체이닝이 코드 스니펫을 더 이식 가능하게 만듦
          + Duckdb 백엔드가 매우 빠름
          + 커뮤니티가 매우 활발하고 친절함
          + ibis를 동료들에게 홍보 중임
     * pandas의 멀티 인덱스 기능이 가장 강력함
          + 열에도 사용할 수 있음
          + 새로운 도구들이 이 기능을 어떻게 처리할지 확신이 없음
     * Polars를 고려해봤는지 궁금함
          + 그룹에서 pandas를 싫어해서 Polars를 표준으로 사용 중임
     * pandas는 새로운 유형의 열에 확장 가능함
          + Polars가 이를 지원하는지 확실하지 않음
     * Ibis의 가치는 DuckDB를 사용할 수 있다는 점이 아님
          + 새로운 도구가 나와도 문법이 계속 작동함
     * Ibis에 대해 많이 들어본 적이 없음
          + pandas에서 벗어나면 Ibis를 시도할 가능성이 낮아짐
          + 새로운 프레임워크가 pandas/numpy에서 벗어나고 있지만, 호환성과 엣지 케이스가 해결될 때까지 기다릴 예정임
          + 몇 밀리초 더 기다려도 상관없음
     * pandas의 라이브러리 API가 항상 직관적이지 않음
          + NaN/None 문제가 있지만 이는 사소한 불편함임
     * pandas를 사용하는 이유는 통합된 생태계 때문임
          + json 파일, csv 파일, python dict 등에서 데이터를 읽고 plotly로 시각화할 때 pandas가 편리함
          + Ibis가 pandas 데이터프레임과 호환된다면 백엔드에 크게 신경 쓰지 않음
"
"https://news.hada.io/topic?id=16509","더 빠른 CRDTs더 빠른 CRDTs (2021)

5000배 빠른 CRDT: 최적화의 모험

  서론

     * 몇 년 전, 프랑스 연구자들이 실시간 협업 편집 알고리즘을 비교한 논문을 발표했음
     * 여러 알고리즘을 구현하고 성능을 벤치마킹했음
     * 일부 알고리즘은 간단한 붙여넣기 작업에 3초 이상 걸렸음
     * 문제의 알고리즘은 ShareJS에서 사용한 알고리즘이었음

  문제의 원인

     * 논문에서 큰 텍스트를 붙여넣을 때 1000개의 개별 작업으로 나누어 처리했음
     * 이는 알고리즘 자체의 문제가 아니라 구현의 문제였음

  CRDT의 매력

     * CRDT(Conflict-Free Replicated Data Types)는 여러 사용자가 동시에 데이터를 편집할 수 있게 해줌
     * 로컬에서 지연 없이 작업할 수 있으며, 동기화 시 자동으로 일관성을 유지함
     * 중앙 서버 없이도 작동 가능함

  Automerge의 문제점

     * Automerge는 협업 편집을 위한 라이브러리로, RGA 알고리즘을 기반으로 함
     * 각 문서의 문자를 고유 ID로 관리하고, 삽입 시 부모 항목을 지정함
     * 성능 문제로 인해 260,000개의 편집 작업을 처리하는 데 5분이 걸림
     * 메모리 사용량도 매우 높음

  성능 최적화

     * Automerge의 성능 문제는 복잡한 트리 기반 데이터 구조와 Immutablejs 사용 때문임
     * Yjs는 단일 평면 리스트를 사용하여 성능을 크게 향상시킴
     * Yjs는 삽입 위치를 찾기 위해 캐시를 사용하고, 양방향 연결 리스트를 사용하여 삽입을 효율적으로 처리함
     * Yjs는 30배 더 빠르고 메모리 사용량도 적음

  Rust로의 전환

     * Rust는 메모리 레이아웃을 제어할 수 있어 성능을 더욱 향상시킬 수 있음
     * Diamond types라는 새로운 CRDT 구현을 통해 Yjs보다 5배 빠른 성능을 달성함
     * Rust로 구현된 Diamond는 260,000개의 편집 작업을 56밀리초 만에 처리함

  결론

     * 최적화된 데이터 구조와 효율적인 메모리 관리로 CRDT의 성능을 크게 향상시킬 수 있음
     * Rust와 같은 저수준 언어를 사용하면 더욱 빠른 성능을 달성할 수 있음

GN⁺의 정리

     * CRDT는 협업 편집의 미래로, 중앙 서버 없이도 일관성을 유지할 수 있는 강력한 도구임
     * Automerge의 성능 문제는 복잡한 데이터 구조와 비효율적인 메모리 사용 때문이었음
     * Yjs와 Diamond types는 단순하고 효율적인 데이터 구조를 사용하여 성능을 크게 향상시킴
     * Rust와 같은 저수준 언어를 사용하면 더욱 빠른 성능을 달성할 수 있음
     * 협업 편집 도구를 개발할 때 Yjs와 Diamond types를 고려해볼 만함

        Hacker News 의견

     * 32개의 엔트리가 가장 효율적인 이유는 캐시 라인이 64바이트이기 때문임
          + 2바이트 정수를 사용할 경우, 32개의 엔트리가 정확히 하나의 캐시 라인에 맞아 메인 메모리 전송을 줄일 수 있음
     * CRDTs를 사용하는 실제 애플리케이션 중 좋은 경험을 제공하는 예시를 찾기 어려움
          + Notion은 두 사람이 동시에 노트를 작성할 때 Google Docs에 비해 사용성이 떨어짐
     * CRDTs는 강력하지만, 역사적인 작업(또는 요소)을 남기는 단점이 있음
          + 압축을 사용해도 여전히 단점으로 작용해 채택에 대한 우려가 있음
          + 그럼에도 불구하고 파일 기반 저장소 제공자(Dropbox, Syncthing 등)에서 충돌 없는 알고리즘을 구현할 가능성에 대해 흥미를 느낌
     * 현재 GitHub Readme 인용:
          + 블로그 게시물 이후 성능이 10-80배 향상됨
     * 이 기사는 내용이 어려워도 잘 쓰여져 있어 읽는 것을 멈출 수 없었음
     * 계층 구조를 사용한 것을 보고 중첩 집합을 대신 사용했는지 궁금함
          + 읽기 작업에서의 이득이 삽입 작업에서의 손실을 상쇄할 수 있을지에 대한 아이디어 없음
     * 몇 년 전에 이 게시물을 우연히 발견했음
          + 최근 몇 년 동안 가장 재미있었던 게시물 중 하나임
     * WASM이 네이티브 실행보다 4배 느린 이유에 대해 궁금함
          + 모든 문자열 작업이 WASM 메모리로 복사되고 결과가 계산된 후 다시 JS로 복사되어야 하기 때문이라고 생각했음
          + 이 맥락을 잘못 이해한 것인지 궁금함
     * Automerge의 Rust 구현이 완료되었으므로 업데이트된 벤치마크를 보는 것이 흥미로울 것임
"
"https://news.hada.io/topic?id=16415","AI로 생성한 코드 문제점과 유의사항","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI로 생성한 코드 문제점과 유의사항

     * 보안 문제
          + 미국 사이버 보안 기업 Snyk, 소프트웨어 엔지니어링과 보안 팀원, 리더 537명 대상으로 설문 조사
               o 응답자 91.6%, “AI 코딩 도구가 안전하지 않은 코드 제안을 가끔 생성했다”
               o 응답자 80%, “조직 내 개발자들이 AI 보안 정책을 우회한다”
               o 응답자 25%, “AI 코딩 제안에 포함된 오픈 소스 구성요소의 보안을 확인하기 위해 자동화된 스캐닝 도구를 사용한다”
               o 오픈 소스 라이브러리가 안전한지 보장하고자 적절한 조치 취하려는 이 적음
          + Snyk에 따르면, GitHub의 Copilot은 기존 코드 리포지터리에서 패턴과 구조 학습해 코드 스니펫 생성
               o 이때 코드는 인접 파일에 있는 기존 보안 취약점이나 잘못된 관행 복제할 수 있음
          + 자동화된 보안 검사, 코드 감사로 보안 위험 있는 코드 찾고, 코드 생성 AI 도구 안전성 검토 필요
     * 코드 품질 문제
          + 미국 옵저버빌리티 기업 Dynatrace 창업자이자 CTO인 Bernd Greifeneder 지적
               o AI는 지금까지 Stack Overflow 같은 사이트에서 사람이 큐레이팅한 좋은 소스로 학습
                    # 앞으로 개발자들이 AI로 생성한 코드를 더 많이 사용하면 이러한 사이트를 업데이트할 동기 약화 가능성
               o 개발자가 코드 스니펫 복사하고 붙여 넣어 배포 속도를 높이는 건 좋지 않은 관행으로 인식
                    # 이는 유지보수성을 저하하고, 오류나 취약점이 복제되거나 간과될 위험 키움
                    # 코드 생성 AI 도구는 복사/붙여넣기 프로세스를 높은 속도로 자동화
          + 조직은 AI가 생성한 코드 면밀히 분석, 테스트, 품질과 보안 표준 준수하는 개발 관행 강화 필요
               o AI 생성 코드에 ‘클린 코드’ 원칙 적용
               o AI로 생성한 코드에 클린 코드가 최종 구현되도록 테스트와 분석 수행해 코드 품질 보장 필요
     * 저작권 문제
          + Copilot과 같은 도구는 입력 코드 리팩토링해 코드 만듦
               o 이러한 도구는 AI 모델 학습에 사용된 학습 데이터와 학습된 모델이 생성한 출력 코드에서 비롯된 저작권, 오픈 소스 라이선스 문제에 직면 가능성
          + 글로벌 로펌 Finnegan 분석:
               o 코드 생성 AI 도구는 기본 AI 모델 학습에 사용하는 코드의 사본 추천
               o GitHub도 ‘Copilot이 생성한 코드가 학습된, 공개적으로 사용할 수 있는 오픈 소스 코드를 인용할 때가 있다’고 인정
               o GitHub 내부 조사에 따르면, 확률은 1%로 지극히 낮지만 Copilot이 학습 코드와 정확히 일치하는 일부 코드 블록 포함하는 코드 생성할 수 있음
               o 오픈 소스 코드의 라이선스는 Copilot 사용해 개발한 코드에 적용될 수도 있음
               o 오픈 소스 라이선스가 적용된 코드를 코드 생성 AI 도구로 만든 코드로 반복 사용하면, 해당 코드의 사용이 저작자 표시, 배포와 같은 오픈 소스 라이선스 조건 따르지 않을 때 저작권 위반 될 수 있음
               o 코드 생성 AI 도구로 제안한 코드의 추적성이 부족해 ‘생성된 코드에 원래 오픈 소스 라이선스 조건에 위배될 수 있는 반복 코드가 포함됐는지’ 바로 알 수 있는 방법은 없음
          + AI로 생성한 코드 수동 검토해 알려진 인기 코드 확인 필요
          + 코드 스캐닝 도구 사용해 오픈 소스 라이선스가 적용된 코드 점검 필요
"
"https://news.hada.io/topic?id=16455","JavaScript Dates가 드디어 수정 될 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     JavaScript Dates가 드디어 수정 될 예정

     * ECMAScript의 최근 변화 중 가장 주목할 만한 것은 Temporal 제안임
          + 이 API는 FullCalendar 팀이 제공하는 폴리필을 통해 이미 사용할 수 있음
          + 이 API의 주요 장점 중 하나는 드디어 ""Zoned Date Time""을 표현하는 네이티브 객체가 생긴 것

  Zoned Date Time이란 무엇인가?

     * 인간의 날짜를 다룰 때, 우리는 일반적으로 시간대를 생략하고 날짜와 시간을 말함
     * 그러나 JavaScript의 ""Date"" 객체는 숫자만 다루기 때문에 원래 날짜의 의미가 사라짐
     * 예를 들어, 카드 결제 시점을 기록하려고 할 때, 많은 사람들이 다음과 같은 코드를 사용할 수 있음
const paymentDate = new Date('2024-07-20T10:30:00');

     * 이는 브라우저가 사용자의 시간대(CET)를 기준으로 밀리초를 계산함. 그러나 저장된 정보는 시간대에 따라 다르게 해석될 수 있음
     * 자바스크립트에서 날짜는 UTC가 아니라 윤초가 완전히 무시되는 POSIX라는 매우 중요한 사실 외에도, 숫자만 있으면 날짜의 원래 의미가 사라진다는 문제가 있음
     * 많은 사람들이 UTC로 작업하거나 ISO 형식으로 날짜를 전달하면 안전하다고 생각하지만, 여전히 정보가 손실될 수 있으므로 이는 옳지 않음

  UTC는 충분하지 않음

     * ISO 형식으로 작업해도, 날짜를 표시할 때는 여전히 시간대 정보가 부족함
     * 타임스탬프를 인간이 읽을 수 있는 날짜로 변환하는 함수는 injective(단사함수)하지 않음
     * 예를 들어, 마드리드에서 시드니로 여행을 갔다가 돌아왔을 때, 은행 거래 내역의 시간대 문제로 혼란이 생길 수 있음

  Temporal API 소개

     * Temporal API는 시간대와 함께 날짜와 시간을 나타내는 Temporal.ZonedDateTime 객체를 도입함
     * RFC 3339의 확장을 제안하여 문자열로 날짜를 직렬화하고 역직렬화하는 표준을 제시함
     * 1996-12-19T16:39:57-08:00[America/Los_Angeles]
          + 이 문자열은 1996년 12월 19일 16시 39분 57초를 나타내며,
          + 오프셋은 UTC에서 -08:00이며 (로스앤젤레스가 속한 태평양 표준시 PST)
          + 시간대를 인식하는 애플리케이션이 고려할 수 있도록 관련 표준 시간대(""태평양 표준시"")를 추가로 지정
     * 다양한 달력 시스템을 지원함 (예: 불교, 중국, 단기, 그레고리력, 이슬람, 페르시안, 일본 등)

    기본적인 연산들

      날짜 생성

     * Temporal API는 시간대를 처리하는 데 강력한 도구를 제공함.
     * 예를 들어, Temporal.ZonedDateTime 객체를 생성할 때 시간대가 정확하게 반영되도록 함:
const zonedDateTime = Temporal.ZonedDateTime.from({  year: 2024,  month: 8,  day: 16,  hour: 12,  minute: 30,  second: 0,  timeZone: 'Europe/Madrid'});

     * 이로 인해 시간대 변경이나 DST와 같은 지역 시간 조정에도 정확한 시간을 유지할 수 있음.

      날짜 비교

     * ZonedDateTime 객체는 compare 메서드를 제공하여 두 개의 ZonedDateTime을 비교할 수 있음:
const one = Temporal.ZonedDateTime.from('2020-11-01T01:45-07:00[America/Los_Angeles]');
const two = Temporal.ZonedDateTime.from('2020-11-01T01:15-08:00[America/Los_Angeles]');
Temporal.ZonedDateTime.compare(one, two);  // => -1

      유용한 내장 기능들

     * hoursInDay 속성은 해당 날짜의 실제 시간을 반환함:
Temporal.ZonedDateTime.from('2020-03-08T12:00-07:00[America/Los_Angeles]').hoursInDay;  // => 23  (DST 시작일)

      시간대 변환

     * withTimeZone 메서드를 사용하여 ZonedDateTime의 시간대를 변경할 수 있음:
zdt = Temporal.ZonedDateTime.from('1995-12-07T03:24:30+09:00[Asia/Tokyo]');
zdt.withTimeZone('Africa/Accra').toString(); // => '1995-12-06T18:24:30+00:00[Africa/Accra]'

      기본 산술 연산

     * .add 메서드를 사용하여 DST 규칙에 따라 날짜를 추가하거나 뺄 수 있음:
zdt = Temporal.ZonedDateTime.from('2020-03-08T00:00-08:00[America/Los_Angeles]');
laterDay = zdt.add({ days: 1 });  // => 2020-03-09T00:00:00-07:00[America/Los_Angeles]

      날짜 간 차이 계산

     * .until 메서드는 두 시간 간의 차이를 계산하고 Temporal.Duration 객체로 반환함.
          + 예를 들어, zdt.until(other)와 같이 사용할 수 있음.

  결론

     * Temporal API는 JavaScript에서 시간을 다루는 방식을 혁신적으로 변화시킴
     * 이 기사에서는 인간이 읽을 수 있는 날짜와 UTC 날짜의 차이, 그리고 Temporal.ZonedDateTime 객체를 사용하여 이를 정확하게 나타내는 방법을 다뤘음
     * 다음 기사에서는 Instant, PlainDate, Duration 등 다른 흥미로운 객체들을 탐구할 예정

    GN⁺의 의견

     * JavaScript 개발자들에게 오랫동안 어려움을 안겨주었던 날짜 및 시간 처리 문제가 Temporal API로 해결될 것임
     * 시간대와 DST 문제를 자동으로 처리할 수 있어 글로벌 애플리케이션 개발 시 매우 유용함
     * 기존 Date 객체와의 호환성 및 마이그레이션 문제는 고려해야 할 사항임
     * Temporal API는 명확하고 직관적인 방식으로 설계되어 있으며, 다양한 캘린더 시스템을 지원하는 등 국제화 지원 측면에서도 우수함
     * 이러한 변화는 JavaScript 개발자의 생산성을 크게 향상시킬 것으로 기대됨

   마참내!

   참고로 Deno는 이미 Temporal API를 내장하고 있습니다.

   대박 글로벌 서비스 설계할때 날짜 맨날 머리아팠는데
   이거 한번 써보고 싶네요

   정말, 드디어 moment나 dayjs안써도 되는건가요

        Hacker News 의견

     * Javascript에서 날짜와 시간을 다루는 것은 매우 어려움
          + Moment 라이브러리는 날짜와 시간을 혼동하여 많은 문제를 일으킴
          + Python의 Arrow 라이브러리도 같은 실수를 범함
          + Rust의 Chrono 라이브러리는 예측 가능하고 결함이 적음
          + JS의 Date와 Moment는 사용하기 어려움
     * 새로운 API가 JS의 시간대 문제를 해결할 것으로 기대됨
          + 특정 시간대를 성공적으로 파싱하지만 다른 경우에는 UTC로 가정하는 문제 있음
          + 이전 직장에서 이 문제로 큰 어려움을 겪음
     * 타임스탬프를 인간이 읽을 수 있는 날짜로 변환하는 함수는 injective하지 않음
          + injectivity와 well-definedness의 개념을 혼동함
          + 타임스탬프 t에 대해 유일한 인간이 읽을 수 있는 날짜 x가 존재하지 않음
     * 시간 처리에 대한 난이도 곡선에 대한 농담
          + 초보자는 UTC 타임스탬프만 사용
          + 중급자는 시간대를 저장하고 변환해야 한다고 주장
          + 고수는 다시 UTC 타임스탬프만 사용
     * 미래의 날짜 예시를 더 많이 사용하면 기사가 더 설득력 있을 것임
          + 타임스탬프를 기록할 때는 UTC와 위치만 필요함
          + 은행 예시는 UX 문제일 뿐 정보 손실은 아님
     * 시간 처리를 이해하지 못해 불안해하는 사용자
          + Python과 같은 언어에서 시간 처리 문제를 이해하는 좋은 입문서 추천 요청
     * 좋은 datetime 표준을 가지는 것이 절반의 싸움임
          + 나머지 절반은 널리 채택되는 것임
          + 다른 시스템과의 호환성을 위해 ISO 문자열이나 unix 타임스탬프로 변환하는 것이 안전함
     * ISO 날짜 문자열이 정확한 정보를 캡처해야 함
          + JavaScript나 다른 언어가 내장된 구조를 필요로 한다는 생각에 의문
          + Temporal과 Date는 간단한 문제를 복잡하게 해결함
     * Postgres에서 이 문제를 어떻게 처리할지 질문
     * Temporal이 실제로 도입될 것이라는 증거가 부족함
          + 여러 유망한 JS 제안들과 마찬가지로 오랜 시간 논의만 되고 있음
"
"https://news.hada.io/topic?id=16510","Blitzortung – 전 세계 실시간 번개 관측 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Blitzortung – 전 세계 실시간 번개 관측 시스템

     * 실시간 번개 지도
          + Blitzortung.org은 전 세계 실시간 번개 위치를 제공하는 커뮤니티 협력 네트워크임
          + 실시간 번개 지도와 역사적 데이터를 제공함
          + 유럽, 오세아니아, 북미, 아시아, 남미, 아프리카 지역의 번개 정보를 확인할 수 있음
     * 주요 링크
          + 중요한 조언
          + 면책 조항
          + 개인정보 보호정책
          + 쿠키 정책
          + 인쇄물 / 연락처
          + 프로젝트
          + 기부
          + 소셜 네트워크
     * 소셜 미디어
          + Facebook에서 좋아요
          + Twitter에서 팔로우
     * 언어 선택
          + 다양한 언어로 메뉴를 제공함
          + 지원되지 않는 언어가 있을 경우 이메일로 문의 가능
     * 쿠키 사용
          + 웹사이트는 쿠키를 사용하여 콘텐츠를 개인화하고 트래픽을 분석하며 광고를 표시함
          + 광고 파트너와의 정보 공유 가능성 있음
          + 쿠키 설정을 변경하거나 모든 쿠키를 수락할 수 있음
     * GN⁺의 정리
          + Blitzortung.org은 전 세계 실시간 번개 위치를 제공하는 중요한 프로젝트임
          + 커뮤니티 협력 네트워크로서 사용자들이 번개 정보를 실시간으로 확인할 수 있음
          + 기상 관측 및 연구에 유용하며, 번개와 관련된 안전 조치에도 도움을 줄 수 있음
          + WeatherBug와 같은 유사한 기능을 제공하는 다른 프로젝트도 있음

        Hacker News 의견

     * 기여자가 아니면 역사적 데이터를 받을 수 없어서 직접 수집했음
          + 기여자가 되려면 수백 유로가 들고, 유럽 외 지역은 대기 시간이 길음
          + 데이터는 Creative Commons 라이선스이므로 연구와 재미를 위해 수집함
     * 탐지기에서 번개 위치까지의 거리가 수천 km에 달함
          + 저주파 라디오 탐지기와 GPS 타이머를 사용해 위치를 계산한다고 추측함
          + 관련 정보 페이지와 논문 링크를 공유함
     * HomeKit에 ""Shower Is Safe""라는 가상 스위치를 설정해 번개 활동을 모니터링함
          + Home Assistant 통합을 사용해 번개 활동 데이터를 가져와 계산함
          + 번개가 접근 중이면 스위치를 끄고, 15분 동안 번개가 없으면 다시 켬
     * Lightningmaps.org 서비스를 자주 사용함
          + 접근 중인 폭풍의 규모와 거리를 파악하는 데 유용함
          + 탐지기 시스템 프로젝트가 중단된 것이 아쉬움
     * 번개 탐지 방법을 설명하는 Wikipedia 기사와 더 나은 시각화를 제공하는 지도 링크를 공유함
     * 번개는 지구-이온층 도파관을 통해 수천 km 떨어진 곳에서도 탐지 가능함
          + 관련 Wikipedia 링크를 공유함
     * 전 세계적으로 많은 번개 탐지기가 연결되어 있다는 사실이 놀라움
          + 유럽의 탐지기가 미국의 번개를 탐지하는 경우도 있음
     * Blitzortung 번개 데이터를 Home Assistant에 통합할 수 있는 HACS 저장소를 공유함
     * 네트워크는 500개 이상의 번개 수신기와 중앙 처리 서버로 구성됨
          + GPS 수신기를 사용해 신호 도착 시간을 마이크로초 단위로 기록하고 인터넷을 통해 중앙 서버로 전송함
          + 데이터는 번개 방전 충격의 정확한 도착 시간과 수신기의 정확한 지리적 위치를 포함함
     * 몇 년 전 처음 이 시스템을 봤을 때의 경험을 공유함
          + 페이지를 열어두고 소리를 켜둔 상태에서 간헐적인 클릭 소리가 나서 원인을 찾느라 애를 먹었음
          + 시스템을 구입해 기여하는 것도 흥미로울 것 같음
"
"https://news.hada.io/topic?id=16462","연구: 공기 청정기 사용으로 어린이집 아동 병가 일수 3분의 1 감소 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             연구: 공기 청정기 사용으로 어린이집 아동 병가 일수 3분의 1 감소 (2023)

연구: 공기청정기 사용으로 어린이 병가 일수가 3분의 1로 감소

     * 헬싱키의 두 어린이집에서 공기청정기를 사용한 결과, 어린이와 직원의 질병 및 결석이 감소함
     * 연구는 E3 Pandemic Response가 주도하며, HUS 헬싱키 대학병원의 연구원 Enni Sanmark가 참여함

  연구 배경 및 초기 결과

     * 다양한 크기와 종류의 공기청정기가 두 어린이집에 설치됨
     * 초기 결과에 따르면, 공기청정기를 사용한 어린이집에서 어린이의 병가 일수가 약 30% 감소함
     * 연구는 4월까지 계속될 예정이며, 독감뿐만 아니라 위장 질환 감소 여부도 분석할 예정임

  어린이 질병 통계

     * 어린이집 연령대의 어린이는 매년 10-13번의 감염성 질병에 걸리며, 각 질병은 1-3주간 지속됨
     * 1-3세 어린이는 매년 5-8번의 독감 증상에 걸리며, 여름 방학 후 어린이집에 돌아온 후 감기에 걸리기 쉬움
     * 이러한 질병은 부모와 어린이집 직원에게도 전파되어 결근을 초래함

  경제적 영향

     * 직원의 병가 하루 비용은 약 370유로임
     * 어린이로 인해 발생하는 병가 일수를 30% 줄일 수 있다면 큰 비용 절감 효과가 있을 것임

  연구의 목표 및 기대

     * 소음이 적고, 비용이 적게 들며, 공간을 많이 차지하지 않는 공기청정 시스템을 구축하는 것이 목표임
     * 최종 결과는 내년 봄에 나올 예정임
     * 현재까지의 결과는 긍정적이며, 전 세계적으로 공기청정기가 공기 중 병원균을 줄일 수 있다는 연구 결과와 일치함

  E3 Pandemic Response 프로젝트

     * Covid-19 위기로 인해 시작된 이 프로젝트는 현대 과학과 기술을 활용하여 새로운 감염병 확산을 방지하는 효과적인 대책을 마련하는 것을 목표로 함

GN⁺의 정리

     * 이 연구는 공기청정기가 어린이집에서 질병 전파를 줄일 수 있다는 가능성을 보여줌
     * 어린이와 직원의 건강을 개선하고, 경제적 비용을 절감할 수 있는 방법을 제시함
     * 연구 결과가 확정되면, 다른 어린이집에서도 공기청정기 사용을 고려할 수 있을 것임
     * 유사한 기능을 가진 제품으로는 Dyson의 공기청정기 등이 있음

        Hacker News 의견

     * 여러 연구에서 HEPA 필터가 감염을 약 2/3 줄이는 것으로 나타남
          + 많은 바이러스가 공기 중에 존재하며, Covid와 Al Hubbard의 연구에 따르면 바이러스는 몇 시간 동안 생존 가능함
          + 공기 순환과 CO2 감소가 큰 차이를 만듦
     * 이 연구가 사실이라면 큰 의미가 있음
          + 부모가 아픈 아이를 돌보느라 생산성이 크게 감소함
          + 계절성 질병의 전파도 줄일 수 있음
     * 미국의 가난한 학교에서는 필터가 수십 년 동안 교체되지 않아 곰팡이 번식지가 될까 걱정됨
     * Zehnder ComfoAir Q 환기 시스템을 설치한 경험
          + 열과 습기 회수 기능이 있음
          + 설치 후 천식이 많이 개선되고 재채기가 줄어듦
          + 모기가 거의 집에 들어오지 않음
          + 추가 필터를 고려 중이지만 현재 결과에 만족함
          + 공기 청정기가 환기 증가만큼 효과적인지 궁금함
          + 두 가지를 결합해야 하는지 고민 중임
     * 효과적인 공기 청정기 브랜드와 종류에 대한 가이드라인을 찾고 있음
          + 많은 공기 청정기가 훌륭한 마케팅을 하지만 실제로는 효과가 없음
     * HEPA 청정기 마케팅이 사기라는 것을 폭로하는 비디오
          + 공기 청정기에서 가장 중요한 요소는 필터가 아니라 청정 공기 전달률임
          + 필터를 통해 공기를 빠르게 이동시키는 것이 중요함
          + Medify 필터를 반품했음
          + 광고된 면적이 실제 지원 가능한 면적보다 훨씬 큼
          + 작은 공기 청정기는 공기를 더 빨리 이동시켜야 하고 더 시끄러움
          + 작은 입자는 낮은 속도에서 가장 효과적으로 포착됨
          + CR 박스의 더 나은 버전을 만들기 위해 특정 제품을 사용할 것을 권장함
          + 실제로 효과가 있는 옵션을 제공함
     * Covid 동안 공기 중 바이러스를 제거하는 방법에 대한 큰 관심이 있었음
          + UV 빛이 몇 초 만에 바이러스를 파괴함
          + 할 수 있는 일이 많음
     * 날씨가 허락하는 곳에서는 완전히 야외에서 보육하는 것이 더 좋음
          + COVID 동안 잠깐의 휴업만 있었음
          + 많은 지역에서 비현실적이지만 캘리포니아의 혜택임
     * 핀란드 같은 부유한 나라가 전국적으로 쉽게 도입할 수 있기를 바람
     * 감염률이 10-13에서 7-9로 감소함
          + 아이들이 여전히 바이러스 보유자였지만, 바이러스 부하를 낮춰서 아프지 않았을 가능성이 있음
          + 몇 년 전 연구에 따르면 아이들은 항상 아프지만 증상이 나타나지 않는 경우가 많음
"
"https://news.hada.io/topic?id=16519","AI 대재앙: 프로젝트의 80%가 실패하고 수십억 달러가 낭비됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AI 대재앙: 프로젝트의 80%가 실패하고 수십억 달러가 낭비됨

     * RAND 연구소의 새 보고서는 AI에 대한 Hype에도 불구하고 대부분의 프로젝트가 실패한다는 것을 보여줌
          + RAND: 미국의 대표적인 싱크탱크중 하나. 이름은 R&D를 뜻함. 더글러스항공이 1948년에 설립
     * 이 보고서는 65명의 숙련된 데이터 과학자 및 엔지니어와의 인터뷰에 기반하여 이러한 실패의 근본 원인을 밝히고 성공을 위한 로드맵을 제시함

리더십 실패: 장님이 장님을 인도함

     * AI 프로젝트 실패의 가장 큰 원인은 기술이 아닌 최상위 경영진임
     * 경영진은 AI로 어떤 문제를 해결해야 하는지 잘못 이해하거나 소통하는 경우가 많음
     * 경영진은 AI에 대해 과대 기대를 가지고 있으며, 성공적인 AI 구현에 필요한 시간과 자원을 과소평가함
     * 경영진과 기술팀 간의 명확한 의사소통과 프로젝트 목표에 대한 이해 부족으로 AI 이니셔티브는 시작부터 실패할 운명임
     * 많은 조직에서 성공적인 AI 구현에 필요한 인내심이 부족함. 프로젝트는 중도에 포기되거나 실제 가치를 입증할 기회도 없이 새로운 우선순위로 전환되는 경우가 많음

데이터 딜레마: 쓰레기를 넣으면 쓰레기가 나옴

     * 데이터 품질은 두 번째로 중요한 장애물로 나타남 ""AI의 80%는 데이터 엔지니어링의 지저분한 작업임""
     * 많은 조직에서 효과적인 AI 모델을 훈련시킬 만큼 충분한 고품질 데이터가 부족함
     * 레거시 데이터셋은 AI 훈련에 적합하지 않을 수 있음
     * 데이터 엔지니어 부족은 지식 손실과 프로젝트 비용 증가로 이어짐
     * AI 팀 내 도메인 전문성 부족으로 데이터를 잘못 해석하고 모델 설계에 결함이 생길 수 있음

반짝이는 물건 쫓기: 엔지니어가 집중력을 잃었을 때

     * 엔지니어 자신이 프로젝트 실패에 기여하기도 함
     * 많은 데이터 과학자와 엔지니어는 더 단순한 솔루션으로 충분함에도 불구하고 최신 기술 발전을 사용하는 데 매력을 느낌
     * 이 ""반짝이는 물건""을 추구하는 경향은 유지 관리와 이해관계자에게 설명하기 어려운 불필요하게 복잡한 솔루션으로 이어질 수 있음
     * 조직은 혁신과 실용성 사이의 균형을 맞춰야 함. 기술 발전을 따라가는 것도 중요하지만 실제 비즈니스 문제를 효과적으로 해결하는 데 주력해야 함

인프라: 성공을 위한 매력 없는 기반

     * 인프라 투자 부족은 AI 프로젝트 실패의 또 다른 주요 요인으로 나타남
     * 많은 기업이 필요한 기반을 먼저 마련하지 않고 AI 프로젝트를 시작하려고 함
     * 조직은 AI 구현에 대해 더 포괄적인 관점을 가질 필요가 있음. 견고한 데이터 파이프라인, 자동화된 테스트 및 배포 시스템, 프로덕션에서 모델 성능을 모니터링하는 도구에 투자하는 것을 의미함
     * 많은 조직에서 성공적인 AI 프로토타입에서 프로덕션 준비 시스템으로의 전환에 어려움을 겪음. 이 ""라스트 마일"" 문제는 종종 유망한 프로젝트를 탈선시킴

권고 사항: AI 열망에 대한 현실 점검

     * RAND 보고서는 조직이 AI 프로젝트 성공률을 높이기 위해 다음과 같은 권고 사항을 제시함:
     * 기술 직원이 프로젝트 목적과 비즈니스 맥락을 이해하도록 보장. ""프로젝트의 의도와 목적에 대한 오해와 잘못된 소통이 AI 프로젝트 실패의 가장 흔한 이유""라고 보고서는 지적함. 이를 위해서는 비즈니스 팀과 기술 팀 간의 지속적인 대화, 공유된 이해와 용어 구축을 위한 노력이 필요함.
     * 지속 가능한 문제를 선택. ""AI 프로젝트를 시작하기 전에 리더는 각 제품 팀이 최소 1년 동안 특정 문제를 해결하는 데 전념할 준비가 되어 있어야 함."" 이 권고안은 빠른 성과를 좇거나 우선순위를 계속 바꾸려는 경향에 반박함. 장기적이고 높은 영향력을 가진 문제에 초점을 맞춤으로써 조직은 AI 이니셔티브에 성공에 필요한 시간과 자원을 제공할 수 있음.
     * 기술이 아닌 문제에 집중. ""그 자체를 위해 최신 AI 기술을 좇는 것은 실패로 가는 가장 빈번한 경로 중 하나임."" 보고서는 가장 최첨단 솔루션이 아니더라도 해당 작업에 적합한 도구를 선택하는 것이 중요하다고 강조함. 이는 조직이 기술 팀을 평가하고 보상하는 방식의 변화를 요구할 수 있음.
     * 인프라에 투자. ""데이터 거버넌스와 모델 배포를 지원하기 위한 사전 인프라 투자는 AI 프로젝트 완료에 필요한 시간을 상당히 단축시킬 수 있음."" 이러한 투자는 AI 연구만큼 화려하지 않을 수 있지만 장기적인 성공을 위해 중요함. 여기에는 견고한 데이터 파이프라인 구축, 모델 및 데이터에 대한 버전 제어 구현, 배포된 AI 솔루션을 모니터링하고 유지 관리하기 위한 시스템 개발이 포함됨.
     * AI의 한계를 이해. ""AI는 어려운 문제를 해결할 수 있는 마법의 지팡이가 아님. 어떤 경우에는 가장 진보된 AI 모델조차도 어려운 작업을 자동화할 수 없음."" 보고서는 AI가 할 수 있는 것과 할 수 없는 것에 대한 보다 현실적인 평가를 요구하며, 조직에 기대치를 낮추고 AI가 진정한 가치를 창출할 수 있는 영역에 집중할 것을 촉구함.

학계의 관점: 논문으로 발표하거나 사라지거나

     * 이 연구는 학계의 AI 연구도 조사했는데, 논문 발표에 대한 압박과 명성 추구가 실제 응용을 압도하는 경우가 많다는 것을 발견함
     * ""AI 프로젝트가 논문 발표로 이어지지 않으면 성공으로 인식되지 않았다""고 보고서는 지적하며, 학문적 인센티브와 실제 세계 영향 간의 불일치를 강조함
     * 이런 논문 발표 중심의 접근은 연구자들이 실제 세계에 상당한 영향을 미칠 수 있는 점진적 개선보다 참신하지만 비현실적인 접근 방식에 우선 순위를 두도록 할 수 있음
     * 보고서는 학문적 기관들이 AI 연구에서 성공의 기준을 넓혀, 실질적인 응용이나 산업 협력과 관련된 지표를 포함하는 방안을 고려해야 한다고 제안
     * 또한 이 연구는 많은 학계 연구자들이 고품질의 실제 데이터셋에 대한 접근에 어려움을 겪고 있다는 것을 발견함. 이는 학문적 연구와 실제 응용 간의 괴리로 이어질 수 있음
     * 보고서는 연구자들에게 필요한 개인 정보 보호 및 보안 조치를 유지하면서 더 관련성 있는 데이터에 대한 접근을 제공하기 위해 학계, 산업계, 정부 기관 간의 협력 증진을 권장함

AI 산업에 대한 경종

     * 이 RAND 보고서는 AI 산업에 꼭 필요한 현실 점검 역할을 함
     * AI의 잠재력은 여전히 막대하지만 성공적인 구현의 길은 도전으로 가득 차 있음
     * 조직은 과대 광고와 현실 사이의 격차를 메우고 데이터 품질, 인프라, 기술 및 비즈니스 팀 간의 명확한 의사소통과 같은 견고한 기본에 집중해야 함
     * 한 인터뷰 대상자가 현명하게 지적했듯이 ""이해관계자는 프로세스에 참여하고 싶어함. '예상보다 오래 걸리고 있으니 2주 후에 다시 연락드리겠습니다'라고 말할 때 그들은 좋아하지 않음. 그들은 호기심이 있음."" 이는 AI 프로젝트 전반에 걸쳐 지속적이고 투명한 의사소통이 필요하며, 모든 이해관계자에게 정보를 제공하고 참여시켜야 함을 강조함
     * 보고서는 또한 AI 개발에서 인내심과 끈기의 중요성을 강조함. 빠른 성과는 드물며, 조직은 AI 이니셔티브에서 실질적인 이점을 얻기 위해서는 장기적인 노력을 할 준비가 되어 있어야 함. 이는 단기적 사고에서 벗어나 보다 전략적이고 장기적인 AI 구현 관점으로 이동하는 조직 문화와 기대치의 변화를 필요로 할 수 있음
     * 이러한 교훈을 받아들이고 보다 현실적이고 인내심 있는 AI 개발 접근 방식을 채택함으로써 조직은 이 혁신적인 분야에서 성공 가능성을 높일 수 있음

     ""AI의 미래는 밝지만, 그 길에 놓여 있는 매우 인간적인 도전들을 헤쳐나갈 수 있는 사람들에게만 해당됨. 산업이 성숙해짐에 따라 혁신과 실용성의 균형을 맞추고 기술적 탁월성과 비즈니스 감각을 겸비한 사람들이 AI의 진정한 잠재력을 활용할 수 있는 최적의 위치에 있을 것임.""

   기업이 실패를 견딜 수만 있다면...
   결국 버틸 수 있는 자가 승리.

   엄청 공감이 가는 포스팅이네 ^^ 작은 딴지 아닌 딴지를 걸어보자면...'Publish'는 이 문맥에서 '출판'이 아니라 '논문 발표'가 더 자연스러운 듯.

   똑똑한 분이 오래전에 핵심적인 질문을 남기셨죠...
   돈이 될까?

   기업은 빠르게 수익을 내려고 하고 있고 이름만 붙인 ai어쩌구 저쩌구만 팔고 있고 사용자 눈높이는 거진 최소10년이상은 투자한 결과물일 텐데..힘들죠..

   LLM으로 만든 엉터리 재무제표 숫자를 투자자들에게 잘못 전달하는 상상을 해보면 이성적인 경영자는 LLM에 이렇게 열광하지 않을텐데요. 아무리 설명해도 고집 부리는 일부 사람들에게는 쪽팔리는 경험이 약이 될거라 생각합니다

        Hacker News 의견

     * RAND 보고서: ""산업 이해관계자들이 AI로 해결해야 할 문제를 오해하거나 잘못 전달함""이라는 내용이 있음
          + 데이터 과학자로서, 도메인 파트너들이 데이터 모델의 기여를 과대평가하는 경향이 있음
          + 데이터 과학자와 ML 엔지니어는 초기 계획 단계에서 모델의 실제 영향을 결정해야 함
          + AI/ML 도구를 단순한 플러그 앤 플레이 솔루션으로 취급하면 실패할 가능성이 큼
     * 투자 실패 문제: 80%의 실패가 문제가 아니라, 남은 20% 중 몇 개의 블랙 스완이 전체 투자 세트를 수익성 있게 만들 수 있음
          + 만약 생존한 것들이 가치가 없다면, 그 투자금은 낭비된 것임
          + 한 플레이어에 모든 것을 투자하고 그 플레이어가 실패하면 전체 베팅이 실패함
     * Rand Report 링크: Rand Report
     * AI 남용 문제: 회사들이 ""어디든 AI를 삽입하라""는 지시를 내리는 경우가 많음
          + AI를 무분별하게 사용하는 것은 문제의 신호임
          + AI가 주가를 올리기 위해 모든 곳에 억지로 삽입되는 것은 비합리적임
     * 스타트업 성공률: 90%의 스타트업이 3년 내에 실패하는 것보다 80/20 법칙이 더 나음
     * 역사 반복: DART가 1991년에 도입되어 1995년까지 DARPA의 AI 연구 자금을 상쇄한 사례가 있음
          + DART 위키피디아 링크
     * AI 기능 문제: AI 기능이 유지되는 이유는 경영진이 AI에 과도하게 집착하기 때문임
          + 엔지니어들은 시간, 노력, 돈 낭비라고 경고하지만 경영진은 AI에 대한 집착을 멈추지 않음
          + 대부분의 경영진이 트렌드를 맹목적으로 쫓는다는 것을 깨달음
     * R&D 성공률: 최첨단 기술에서 20%의 프로젝트가 성공하는 것은 꽤 좋은 성과일 수 있음
     * AI로 코딩 대체: AI가 코딩을 대체할 것이라는 주장에 대한 회의적 시각이 있음
          + Nvidia 주식을 단기 매도할 계획
     * 웹사이트 다운: HN 트래픽을 감당하지 못해 Wordpress 사이트가 다운됨
          + ""데이터베이스 연결 오류"" 발생
"
"https://news.hada.io/topic?id=16477","Dokku: 내가 가장 좋아하는 개인 서버리스 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Dokku: 내가 가장 좋아하는 개인 서버리스 플랫폼

Dokku란 무엇인가?

     * Dokku는 단일 서버에서 실행되는 오픈 소스 Platform as a Service (PaaS)임
     * Heroku와 비슷하지만, 사용자가 소유함
     * 비용 효율적이고 사용하기 쉬운 서버리스 플랫폼이 필요함
     * OVHcloud에서 월 $7의 VPS를 사용하여 Dokku 서버를 운영함

  Dokku의 주요 기능

     * 사용하기 쉬움 (Heroku와 유사)
     * Let’s Encrypt를 통한 자동 SSL 인증서 관리
     * 사이트를 비밀번호로 보호할 수 있는 Basic Auth 지원
     * 단일 명령어로 확장 및 축소 가능
     * Node, Python 등 다양한 애플리케이션을 처리할 수 있는 유연성
     * git 명령어로 쉽게 배포 가능

최소한의 Dokku 예제

  Docker 컨테이너로 애플리케이션 배포

     * Dockerfile을 git 저장소의 루트에 배치
     * entrypoint.sh 스크립트를 사용하여 로컬 또는 Docker 컨테이너에서 애플리케이션 실행
     * Dokku 호스트에서 애플리케이션 생성
     * 로컬에서 Dokku 호스트를 원격으로 추가하고 푸시

FROM python:3.10
COPY . /app
WORKDIR /app
RUN pip install .
WORKDIR /app/
ENTRYPOINT [""./entrypoint.sh""]

#!/bin/bash
exec uvicorn main:app --port ""$PORT"" --host 0.0.0.0

dokku apps:create myapp
git remote add dokku dokku@dokku:myapp
git push dokku main

  정적 사이트 배포

     * Dokku를 사용하여 비공개 GitHub 저장소에서 정적 사이트를 쉽게 배포하고 비밀번호로 보호 가능
     * NGINX_ROOT 환경 변수를 설정하여 NGINX가 정적 사이트를 제공하도록 설정
     * 기본 인증 플러그인을 설치하고 설정

dokku apps:create mysite
dokku config:set static-site NGINX_ROOT=_site
sudo dokku plugin:install https://github.com/dokku/dokku-http-auth.git
sudo chmod +x /home/dokku

touch .static
echo BUILDPACK_URL=https://github.com/dokku/buildpack-nginx > .env
git remote add dokku dokku@dokku:mysite
git push dokku main
dokku http-auth:enable mysite <username> <password>

  SSL / HTTPS

     * Let’s Encrypt 플러그인을 사용하여 HTTPS 설정 가능
     * Cloudflare를 사용하는 경우, Cloudflare가 이를 처리하도록 설정하는 것이 더 쉬움

GitHub Actions를 사용한 배포

     * GitHub Actions를 사용하여 Dokku 앱을 자동으로 배포 가능
     * 예제 GitHub Action 워크플로우

name: CI
on:
  workflow_dispatch:
  push:
    branches: [main]
jobs:
  deploy-dokku:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install SSH key
        run: |
          echo ""${{ secrets.DOKKU_SSH_PRIVATE_KEY }}"" > private_key.pem
          chmod 600 private_key.pem
      - name: Add remote and push
        run: |
          git remote add dokku dokku@rechat.co:llm-eval
          GIT_SSH_COMMAND=""ssh -i private_key.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"" git push dokku main -f

기타 팁

     * 원격으로 명령어 실행 가능
     * Docker 캐시 무효화
     * 푸시 없이 재빌드

ssh dokku@rechat.co apps:list
ssh dokku@rechat.co repo:purge-cache llm-eval
ssh dokku@rehcat.co ps:rebuild llm-eval

왜 이 글을 작성했는가?

     * 새로운 애플리케이션을 배포할 때마다 세부 정보를 찾아야 했기 때문에 작성함
     * 다른 사람들에게도 유용하길 바람

GN⁺의 정리

     * Dokku는 비용 효율적이고 사용하기 쉬운 오픈 소스 PaaS 플랫폼임
     * 다양한 애플리케이션을 쉽게 배포하고 관리할 수 있는 기능을 제공함
     * GitHub Actions와 같은 도구를 사용하여 자동 배포 가능
     * Cloudflare와 같은 서비스와 함께 사용하면 더욱 편리함
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Heroku, Fly.io 등이 있음

        Hacker News 의견

     * 최근 Dokploy를 사용하며 즐거움을 느끼고 있음
          + Dokku와 유사하지만 더 나은 웹 UI를 제공함
          + Docker/Compose 솔루션 배포가 쉬워지고 자동 LetsEncrypt 기능이 내장되어 있음
          + GitHub Actions 워크플로우를 구축하여 앱 배포를 자동화함
          + 다양한 앱을 위한 사전 구성된 Compose 파일도 제공함
     * 여러 ""selfhosted Heroku"" 솔루션을 검토한 후 Dokku를 선택함
          + 가장 적은 ""마법""이 필요하고, 사용 중단 시에도 쉽게 제거 가능함
          + 개발자가 매우 응답성이 좋고, 도움을 받아 커스텀 플러그인을 제작함
          + 블로그에 관련 내용을 문서화함
     * 새로운 소프트웨어 사용 시 문제를 겪을 수 있지만, Dokku는 그런 문제가 없음
          + 몇 가지 CLI 인수 순서 문제를 제외하고는 잘 작동함
          + 더 많이 사용한다면 선언적 구성 파일로 전체 아키텍처를 구성하고 싶음
     * Dokku는 Let's Encrypt 플러그인을 통해 HTTPS 설정이 쉬움
          + Cloudflare를 통해 TLS를 사용하고 있음
          + 개인 사이트가 평문으로 전송되지 않도록 주의 필요함
     * Dokku를 사용하다가 Docker 이미지 구축 및 Swarm 배포로 전환함
          + 자체 호스팅 PaaS인 Lunni를 개발하는 동기가 됨
          + Heroku나 AWS 대신 소유한 서버에서 모든 것을 실행하는 아이디어를 좋아함
          + 예측 가능한 월간 청구서가 마음의 평화를 줌
     * Coolify의 인기가 상승하고 있으며, 모든 규모의 조직이 무료로 자체 호스팅 소프트웨어를 쉽게 운영할 수 있게 함
          + Coolify는 오픈 소스 및 자체 호스팅 가능한 Heroku/Netlify/Vercel 대안임
     * Dokku는 놀라운 제품이며 창립자는 매우 겸손하고 도움이 됨
          + 더 많은 사람들이 재정적으로 지원했으면 좋겠음
     * 이 인프라 유형에 대해 파일/객체 저장소로 무엇을 사용하는지 궁금함
          + AWS를 사용하면 egress 비용으로 모든 절감 효과가 상쇄될 수 있음
     * Dokku 사용 경험이 좋지 않았음
          + VPS가 충돌하고 재시작할 때 앱이 다시 시작되지 않음
          + 결국 단일 노드 k8s 설정으로 전환함
     * traefik + 표준 podman + systemd 통합을 사용할 수 있음
          + 관련 문서와 링크 제공됨
"
"https://news.hada.io/topic?id=16445","Meta, Vision Pro와 경쟁할 프리미엄 헤드셋 취소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Meta, Vision Pro와 경쟁할 프리미엄 헤드셋 취소

     * 메타가 애플의 Vision Pro와 경쟁하기 위한 프리미엄 혼합현실 헤드셋 계획을 취소함
     * 마크 주커버그 CEO와 CTO 및 기타 임원들이 참석한 제품 검토 회의 후 이와 같은 결정이 내려졌고, Reality Labs 부서 직원들에게 이번 주에 기기 개발을 중단하라고 지시
     * 중단된 하이엔드 Quest 헤드셋 - 코드명 'La Jolla'는 11월에 개발이 시작되어 2027년 출시 예정이었음
          + 애플의 Vision Pro에서 사용되는 것과 동일한 micro OLED 디스플레이 기술을 포함
     * 판매량 확보를 위해 1,000달러 미만의 가격을 유지하려 했으나, 디스플레이 비용때문에 어려움
     * 3,500달러부터 시작하는 애플의 Vision Pro 판매도 저조하며, 고가 헤드셋에 대한 광범위한 소비자 수요에 의문이 제기됨
     * 이번 기기의 개발 포기 결정은 메타가 하드웨어 자체 개발에서 벗어나 XR 소프트웨어 라이선싱으로 전환하려는 것으로 보임
     * 4월에 XR 플랫폼인 Horizon OS를 발표하고 파트너사 찾기에 주력하고 있음
          + 인도의 거대 기술 기업 Jio와 Horizon OS 라이선싱 관련 협상을 진행
          + LG와의 Horizon OS 계약은 무산됨
     * 메타는 2026년 출시 예정인 Quest 4 (코드명: Pismo) 등 자체 저가~중가 헤드셋 개발은 지속 중
          + 기존 Quest 라인업에는 200달러의 Quest 2와 500달러의 Quest 3가 포함
     * 999달러의 고가 기기인 Quest Pro는 판매 부진과 평가 저하로 2023년 생산 중단했음
          + 애플의 비전 프로 발표후, La Jolla 를 다시 개발 시작했지만 또 한번 포기한 것
     * 물론 메타가 향후 고급 헤드셋 컨셉을 되살릴 가능성은 있음. 현재로서는 La Jolla 개발 기술을 다른 미래 기기에 활용할 계획

우선순위 변경

     * 메타가 인공지능에 대한 지출을 늘리면서 Reality Labs의 비용을 줄이려 노력 중
     * 또한 메타는 유럽의 안경업체 EssilorLuxottica와 협력하여 개발한 Ray-Ban 스마트 안경에 더 많은 에너지와 자원을 투입하고 있음
     * 최신 버전의 스마트 안경이 예상보다 잘 팔리면서 Reality Labs 내에서 우선순위가 높아짐
          + 이 안경에는 Meta의 AI 어시스턴트가 탑재되어 있으며, 회사 전체적인 AI 추진의 일환으로 메타의 AI 어시스턴트를 더 많은 제품에 통합하려 노력 중
     * Meta는 또한 렌즈에 디스플레이가 있는 증강 현실 안경도 개발 중이며, 9월에 열리는 Connect 개발자 컨퍼런스에서 해당 버전을 선보일 계획
     * 메타는 이 기기에 큰 기대를 걸고 있지만, 아직 기술이 완전히 개발되지 않았기 때문에 AR 글래스는 몇 년 동안은 일반에 공개되지 않을 것
"
"https://news.hada.io/topic?id=16448","Android에 16kb 페이지 크기 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Android에 16kb 페이지 크기 추가

     * 페이지는 운영 체제가 메모리를 관리하는 최소 단위
     * 대부분의 CPU는 4 KB 페이지 크기를 지원하며, Android OS와 애플리케이션은 4 KB 페이지 크기에 최적화되어 있음
     * ARM CPU는 16 KB 페이지 크기를 지원하며, Android가 이 크기를 사용할 때 성능이 5-10% 향상되고 메모리 사용량은 약 9% 증가함
     * 전반적인 운영 체제 성능을 개선하고 기기 제조업체가 이러한 트레이드오프를 선택할 수 있도록 Android 15는 4 KB 또는 16 KB 페이지 크기로 실행 가능함
     * 16 KB 페이지 크기를 지원하는 첫 Android 시스템은 몇몇 기기에서 개발자 옵션으로 제공될 예정임

16KB 페이지 크기에 대한 기술적 세부 사항

     * 대부분의 CPU에는 메모리 관리 장치(MMU)라는 전용 하드웨어가 있어 프로그램이 사용 중인 주소를 메모리의 물리적 위치로 변환
     * 이 변환은 페이지 크기 단위로 수행됨
          + 프로그램이 더 많은 메모리가 필요할 때마다 운영 체제가 개입하여 ""페이지 테이블"" 항목을 채워야 하며, 해당 메모리 조각을 프로세스에 할당
     * 페이지 크기가 4배 더 커지면 장부 기록 작업이 4배 줄어듬.
          + 따라서 시스템은 비디오를 멋지게 보이게 하고, 게임을 잘 플레이하고, 앱을 매끄럽게 실행하는 데 더 많은 시간을 할애할 수 있으며, 낮은 수준의 운영 체제 문서 작업에는 더 적은 시간이 소요됨
     * 페이지 크기는 Application Binary Interface (ABI)가 아님
     * 즉, 애플리케이션이 페이지 크기에 구애받지 않도록 수정되면 동일한 애플리케이션 바이너리가 4KB와 16KB 디바이스 모두에서 실행될 수 있음
     * Android 15에서는 다양한 페이지 크기에서 실행할 수 있도록 Android를 처음부터 리팩토링하여 페이지 크기에 구애받지 않도록 만듦

  주요 OS 변경 사항

     * Android 15 기반 장치:
          + 컴파일 타임 PAGE_SIZE 매크로가 런타임 getpagesize(2)로 대체됨
          + 모든 OS 바이너리는 16 KB 정렬됨 (서드 파티 애플리케이션/라이브러리는 16KB 정렬되지 않을 수 있음)
          + 모든 OS 바이너리는 프로세스에 매핑된 모든 메모리 영역을 읽을 수 있도록 별도의 로드 가능한 세그먼트로 빌드되며, 일부 애플리케이션은 이에 의존함
          + 여러 OS 구성 요소가 페이지 크기를 가정하지 않고 더 큰 페이지 크기에 대해 최적화되도록 재작성됨

  파일 시스템

     * 성능 좋은 작업을 위해서는 파일 시스템 블록 크기가 페이지 크기와 일치해야 함. EROFS 및 F2FS 파일 시스템과 UFS 스토리지 계층이 16KB 호환됨
     * 4KB 시스템에서는 16KB 정렬을 위해 추가된 패딩으로 인해 ELF 실행 파일 크기가 증가하지만 여러 최적화를 통해 이 비용을 회피함
     * Sparse 읽기 전용 파일 시스템은 16KB 정렬을 위한 추가 패딩에 대해 생성된 0 페이지가 디스크에 기록되지 않도록 함
     * 읽기/쓰기 가능 파일 시스템은 0 페이지를 케이스별로 처리함

  메모리 관리

     * 리눅스 페이지 캐시가 수정되어 이러한 여분의 패딩 공간에 대해 미리 읽지 않도록 하여 불필요한 메모리 로드를 절약
     * 이 페이지는 비어있는 패딩이며 프로그램은 절대 이를 읽지 않음. 정렬 목적으로만 프로그램의 사용 가능한 부분 사이에 있는 공간임

  Linux 커널

     * 리눅스 커널은 특정 페이지 크기에 깊이 연결되어 있으므로 커널을 빌드할 때 사용할 페이지 크기를 선택해야 하며, 운영 체제의 나머지 부분은 동일하게 유지됨

  Android 애플리케이션

     * 네이티브 코드 또는 의존성이 있는 모든 애플리케이션은 16KB 페이지 크기 디바이스와 호환되도록 다시 컴파일해야 함
     * 대부분의 Android 애플리케이션 및 SDK 내의 네이티브 코드는 4KB 페이지 크기를 염두에 두고 빌드되었기 때문에 16KB로 다시 정렬하여 바이너리가 4KB 및 16KB 디바이스와 모두 호환되도록 해야 함
     * 대부분의 애플리케이션 및 SDK에서 이는 2단계 프로세스임:
         1. 16KB 정렬로 네이티브 코드 재빌드
         2. 페이지 크기에 대한 하드코딩된 가정이 있는 경우 16KB 디바이스/에뮬레이터에서 테스트 및 수정

  16 KB 장치 개발하기

     * 현재 생산되는 Android 기기는 16 KB 페이지 크기를 지원하지 않음
          + 이 문제를 해결하기 위해 파트너와 협력하여 기존 기기에서 개발자 옵션을 사용할 수 있도록 조치를 취하고 있
     * 개발자 옵션으로 16 KB 페이지 크기 지원을 제공할 예정임
     * Android Studio에서 16 KB 에뮬레이터 타겟을 사용할 수 있음

  16 KB 개발자 옵션

     * Android 15에서 16 KB와 4 KB 페이지 크기를 전환할 수 있는 개발자 옵션을 구현함
     * Pixel 8 및 Pixel 8 Pro에서 사용 가능하며, 추가 장치에서도 지원 예정임
     * 개발자 옵션을 사용하려면 장치를 초기화하고 부트로더를 언락해야 함

  x86_64 데스크탑에서 16 KB

     * x86_64 에뮬레이터에서 16 KB 페이지 크기를 에뮬레이트할 수 있음
     * Android Studio SDK 매니저에서 16 KB 페이지 에뮬레이터를 다운로드하고 실행할 수 있음

  미래

     * Android 15와 AOSP는 16 KB 페이지를 지원하며, 개발자 옵션으로 구현 가능함
     * 애플리케이션 및 SDK 개발자가 이 옵션을 활용하여 더 성능 좋고 효율적인 Android 장치를 준비할 수 있기를 기대함

GN⁺의 의견

     * 16KB 페이지 크기로의 전환은 Android 디바이스의 성능과 효율성을 향상시키기 위한 중요한 변화
     * 더 큰 페이지 크기를 사용하면 메모리 관리 오버헤드가 감소하고 전반적인 시스템 성능이 향상될 수 있음
     * 그러나 이 변화는 특히 네이티브 코드에 의존하는 앱 및 SDK에 대한 호환성 문제를 초래할 수도 있으므로 개발자는 16KB 페이지 크기를 염두에 두고 소프트웨어를 업데이트해야 함
     * Google은 16KB 개발자 옵션 및 에뮬레이터 지원을 통해 이 전환을 테스트하고 준비할 수 있는 도구를 개발자에게 제공하고 있음
     * 16KB 페이지는 현재 ARM 기반 Android 디바이스에만 적용되지만, 미래에는 다른 하드웨어 플랫폼으로 확장될 가능성이 있음
     * 개발자는 앱과 SDK를 16KB 페이지 크기에 맞게 조정하는 것 외에도, 더 큰 페이지 크기가 메모리 사용량에 미치는 영향을 고려하고 필요한 경우 메모리 최적화를 수행해야 함
     * 16KB 페이지로의 전환은 Android 생태계 전반에 걸친 협력이 필요한 중요한 노력이지만, 결국 사용자에게 더 나은 성능과 효율성을 제공할 것임

        Hacker News 의견

     * Debian 커널에서 ARM64 커널을 16KiB 페이지 크기로 빌드하는 작업을 최근에 시작했음
          + 64KiB 페이지 크기도 추가 논의 중
          + Apple M1의 DART IOMMU가 최소 16KiB 페이지 크기를 요구하여 효율성 증가 예상
     * 첫 번째 16KB 지원 Android 시스템이 개발자 옵션으로 일부 기기에서 제공될 예정임
          + 개발자 옵션을 통해 테스트 및 수정 가능
          + 페이지 크기에 무관한 애플리케이션 바이너리는 4KB와 16KB 기기에서 모두 실행 가능
     * 애플리케이션이 페이지 크기에 무관하지 않을 때가 궁금함
          + 어떤 상황에서 이 문제가 발생하는지 알고 싶음
     * 4KB와 16KB 프로세스를 동시에 지원하지 않고 16KB 기본값을 사용하는 것은 문제가 있음
          + 오래된 바이너리가 깨지고 에뮬레이터 성능 저하 우려
          + 4KB 페이지도 지원하는 커널이 필요함
          + CPU 설계에서 16KB 페이지 테이블 항목을 4KB 단위로 매핑할 수 있도록 하는 것이 합리적일 것임
     * iOS는 64비트 전환 이후 16KB 페이지를 사용해왔음
          + ARM Mac도 이 설계를 계승함
     * RHEL은 과거에 AARCH64에서 64KB 페이지를 시도했으나 많은 버그로 인해 결국 되돌림
          + Google의 노력은 인상적이나 성공할지는 의문임
     * Asahi가 16KB 페이지를 활성화하는 커널 및 생태계 작업에 얼마나 도움을 주었는지 궁금함
          + RISC-V가 4KB 페이지로 고정된 것은 실수로 보임
     * iOS는 오래전부터 16K 페이지를 사용해왔음
          + OSX는 M1과 함께 2020년에 16K 페이지로 전환함
          + Windows는 AArch64에서도 4K 페이지에 머물러 있음
          + Linux는 다양한 페이지 크기를 지원함. Asahi는 16K임
     * 페이지 크기 증가가 I/O 성능이나 플래시 수명에 부정적인 영향을 미치는지 궁금함
          + 현대의 관리형 플래시 장치의 쓰기 단위가 4KB나 16KB보다 큰지 여부도 궁금함
     * 성능 개선이 측정되었음
          + 특히 카메라 앱이 더 빨리 시작됨
          + 다른 최적화 가능성에 대해 궁금함
          + Lisp의 ""이미지 덤프""와 같은 방식으로 초기화 코드를 최소화할 수 있을지 궁금함
     * 5-10% 성능 향상이 큰 수치로 보임
          + 페이지 워크가 그렇게 비싸다면 더 큰 TLB가 있어야 하지 않나 궁금함
          + 메모리 사용량이 9% 증가한 것도 큰 수치로 보임
          + 메모리 사용량에 미친 영향이 궁금함

     * 최신 스토리지들은 IO가 스토리지 내부의 캐시에 저장되기때문에 16KB로 IO가 발생해도 별다른 차이가 없을걸로 예상됩니다.
     * 카메라, GPU등 성능이 중요해서 연속된 페이지를 할당받는 장치들의 성능으 개선됩니다.
     * TLB는 하드웨어 캐시라서 비용이 문제될거같습니다.
     * 메모리 사용량이 10%증가하는 것은 최신 모델들의 메모리 크기에 비해 별 문제가 되지 않는다고 판단하는 걸로 보입니다.
     * 4k/16k를 동시에 지원하는건 CPU 코어부터 커널 코어 부분을 수정해야되서 저는 거의 불가능하다고 생각합니다. 커널이 hugepage등으로 큰 페이지 기능을 오래동안 활용해왔으니 16k동작은 별 문제가 없을거라고 생각합니다. 커널 외에 안드로이드의 기능들이나 앱에서 문제가 생기는 것은 구글에서 관리해야겠지요.
     * 어쨌든 64비트 코어에 점점 메모리가 커지는 상황에서 페이지 사이즈를 늘리는 것은 서버 시장에서 이미 예전부터 논의가 되고 있었습니다. 스마트폰도 이제 불가피하게 적용해야될걸로 생각합니다.
"
"https://news.hada.io/topic?id=16502","분산 시스템을 위한 Erasure Coding 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      분산 시스템을 위한 Erasure Coding 기술

        Hacker News 의견

     * rateless fountain codes가 언급되지 않은 것에 놀라움
          + Luby Transform Code가 흥미로움
          + LT codes는 RFC6330의 RaptorQ 인코딩에서 사용됨
     * 과거에 제안된 네트워크 코딩 알고리즘이 있음
          + 여러 경로를 통해 파일을 더 빠르게 받을 수 있음
     * Erasure coding은 오래된 기술임
          + Usenet의 PAR2 파일을 기억해야 함
     * Erasure coding에 관심이 있다면 다차원적인 경우를 고려해야 함
          + 스핀들뿐만 아니라 랙, 방, 데이터 센터, 지역 등 다양한 실패 도메인에 걸쳐 인코딩을 생각해야 함
     * Wirehair를 프로젝트에서 사용해본 사람이 있는지 궁금함
          + Wirehair는 이상적인 알고리즘 성능과 API를 가짐
          + 그러나 Wirehair는 명세가 아닌 아이디어의 구현임
          + 안정적이지만 신뢰할 수 있는 명세로 변환될 수 있을지 걱정됨
     * Ceph의 Erasure Code pool의 핵심 기술임
          + 코딩 매개변수(k, m)를 나중에 업데이트할 수 없음
          + 이 비탄력성 때문에 복제본이 여전히 고가용성 장애 내성 데이터 저장의 주된 선택임
     * M of N 사건 동안 생성된 제품이 모든 N이 사용 가능한 경우와 다르게 인코딩되는지 궁금함
          + ""N이 복원될 때 재인코딩 필요""를 나타내는 비트 플래그가 필요할 수 있음
     * Rabin의 Information Dispersal Algorithm을 떠올리게 함
          + 관련 논문 링크 제공
     * 읽기 전용 또는 읽기 집중적인 작업에만 실용적인지 궁금함
     * Ceph가 분산 블롭 저장소에 사용하는 복제 전략 중 하나임
"
"https://news.hada.io/topic?id=16451","serde_json 문자열 20% 속도 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        serde_json 문자열 20% 속도 향상

serde_json 성능 개선 경험 공유

     * 서론
          + 최근 성능 작업을 통해 serde_json 문자열 처리 속도를 20% 향상시킴.
          + Rust의 직렬화 및 역직렬화 프레임워크인 serde와 JSON 처리를 위한 serde_json 사용.
          + 성능 개선을 통해 생태계 전반에 걸쳐 이익을 얻을 수 있음.

  시작점

     * #[iex] 라이브러리 작업
          + 성능 벤치마크로 serde와 serde_json 사용.
          + 성능 중요한 코드에서 의문스러운 결정 발견.
          + 에러 경로가 성공 경로보다 2배 이상 느림.

  문제 해결

     * 에러 경로 최적화
          + position_of_index 함수가 병목 현상 유발.
          + memchr 크레이트 사용하여 문자열 검색 최적화.
          + 성능 개선 결과: 에러 경로 속도 향상.

  추가 최적화

     * 문자열 파싱 최적화
          + memchr2 함수 사용 시도 실패.
          + SWAR(레지스터 내 SIMD) 기법 사용하여 제어 문자 검색 최적화.
          + 짧은 문자열에서 성능 저하 문제 해결.

  유니코드 처리

     * 유니코드 파싱 최적화
          + 16진수 디코딩 성능 개선.
          + HEX 테이블 사용하여 효율적인 디코딩 구현.
          + 성능 개선 결과: JSON 인코딩된 War and Peace 파싱 속도 21% 향상.

  최종 결과

     * UTF-8 인코딩 최적화
          + char::encode_utf8 함수 대신 직접 UTF-8 인코딩 구현.
          + 성능 개선 결과: War and Peace 파싱 속도 추가 9% 향상.

GN⁺의 정리

     * 이 글은 Rust 생태계에서 널리 사용되는 serde_json의 성능을 20% 향상시킨 경험을 공유함.
     * 성능 최적화 과정에서 다양한 기법과 문제 해결 방법을 다룸.
     * 유니코드 및 문자열 파싱 최적화는 JSON 처리 성능을 크게 향상시킴.
     * 이 글은 성능 최적화에 관심 있는 개발자들에게 유익하며, Rust 생태계 전반에 긍정적인 영향을 미칠 것임.
"
"https://news.hada.io/topic?id=16465","Strandbeest","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Strandbeest

     * Theo Jansen은 새로운 형태의 생명체(Forms of Life)인 strandbeests를 창조하는 작업에 종사 중
     * 노란색 플라스틱 튜브(네덜란드 전기 파이프)로 만든 골격이 바람의 에너지를 받아 걸을 수 있음
     * 1990년부터 진화해왔으며, 12개의 진화 시기로 나뉨
     * 각 시기의 특성이 이 시기를 결정함
     * 가장 중요한 strandbeests 유형은 geneology에서 찾을 수 있음
     * ""이 진화를 개발함으로써, 나는 기존 자연을 이해하는 데 더 현명해지기를 희망함""

GN⁺의 정리

     * Theo Jansen의 strandbeests는 바람의 에너지를 이용해 움직이는 독특한 구조체임
     * 1990년부터 시작된 이 프로젝트는 12개의 진화 시기로 나뉘며, 각 시기의 특성에 따라 구분됨
     * Kunstmuseum Den Haag에서 상설 전시 중인 fossil strandbeest와 같은 작품들은 예술과 과학의 융합을 보여줌
     * 이 프로젝트는 자연의 이해를 돕고, 창조 과정에서 발생하는 문제를 통해 더 많은 지혜를 얻고자 함
     * 비슷한 기능을 가진 프로젝트로는 kinetic sculptures와 같은 예술 작품들이 있음

        Hacker News 의견

     * 이 것은 Jansen's linkage 를 구현한 것임
          + Jansen's linkage는 다리형 차량의 가능성을 보여줌
          + 타이어와 도로 사이의 마찰로 인한 미세 플라스틱 배출을 줄일 수 있는 가능성 있음
          + 바이오 호환 타이어 또는 다리형 차량이 좋은 대안이 될 수 있음
     * Maker Faire Tokyo에서 만난 사람의 이야기
          + 일회용 젓가락과 달러 스토어의 린트 제거기로 Strandbeests를 만드는 사람
          + 그의 YouTube 채널 링크 제공
     * 시뮬레이션 이론에 대한 의견
          + 시뮬레이션 이론이 정신적 안정감을 줌
          + 인간을 실제로 이동시킬 수 있다면 멋질 것이라는 상상
     * 비디오 링크 제공
          + 사이트의 비디오가 작동하지 않음
     * Strandbeests에 대한 비판
          + 새로운 생명체를 창조한다는 주장에 회의적임
     * ""A Topiary"" 스크립트와 관련된 의견
          + Shane Carruth의 작품과 유사한 구조를 떠올리게 함
          + Aronofsky, Linklater, Kaufman의 영화를 좋아하는 사람들에게 추천
          + 스크립트와 리뷰, 트레일러 링크 제공
     * Strandbeests에 대한 긍정적인 의견
          + 작은 미니어처도 판매 중임
     * 우연히 발견된 Strandbeest 비디오 링크 제공
     * Strandbeesten에 대한 애정
          + 실제로 본 적은 없지만 철학과 비디오를 사랑함
          + 예술가로부터 구매한 화석이 좋은 대화 소재가 됨
     * Theo의 2007년 Ted Talk에서 처음 본 기억
          + 그 이후로 Jansen's linkage를 수천 번 그렸음
          + 아버지의 배관 용품을 이용해 만들고 싶었던 꿈이 있었음
"
"https://news.hada.io/topic?id=16494","Surfer - 온라인 플랫폼의 모든 개인 데이터를 중앙 집중화하는 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Surfer - 온라인 플랫폼의 모든 개인 데이터를 중앙 집중화하는 도구

     * 다양한 서비스의 모든 개인 데이터를 하나의 폴더에 모아주는 ""Digital Footprint Exporter""
     * 현재 지원 플랫폼: Twitter, LinkedIn, GitHub, YouTube, Spotify, Notion, ChatGPT, Gmail
     * 지원 예정 : iMessages, Twitter Bookmarks, Reddit
     * 동작 방식
          + Export를 누르면 해당 서비스의 페이지를 로딩
          + 각 서비스의 로그인 여부 판별하여 로그인을 진행
          + 해당 서비스의 데이터 Export UI를 이용하여 데이터를 Scrape 하고 로컬 스토리지로 Export
"
"https://news.hada.io/topic?id=16484","TIL: UUID 버전 및 사용 시기버전 및 사용 시기

     * UUID의 다양한 버전
          + UUID Version 1 (v1): 타임스탬프, 단조 카운터, MAC 주소로 생성됨
          + UUID Version 2 (v2): 보안 ID에 예약됨. 자세한 내용은 알려지지 않음
          + UUID Version 3 (v3): 제공된 데이터의 MD5 해시로 생성됨. DNS와 URL이 후보 데이터로 제안됨
          + UUID Version 4 (v4): 완전히 랜덤한 데이터로 생성됨. 대부분 사람들이 생각하는 UUID임
          + UUID Version 5 (v5): 제공된 데이터의 SHA1 해시로 생성됨. v3와 마찬가지로 DNS와 URL이 후보 데이터로 제안됨
          + UUID Version 6 (v6): 타임스탬프, 단조 카운터, MAC 주소로 생성됨. v1과 동일한 데이터지만 생성 시간 순으로 정렬되도록 순서가 변경됨
          + UUID Version 7 (v7): 타임스탬프와 랜덤 데이터로 생성됨
          + UUID Version 8 (v8): 완전히 사용자 정의 가능함 (필수 버전/변형 필드 제외)
     * 사용 시기
          + v4: 랜덤 ID가 필요할 때 사용. 기본 선택으로 좋음
          + v7: 정렬이 필요한 경우 사용. 예를 들어, 데이터베이스 키로 사용할 때 적합함
          + v5 또는 v8: 고유 데이터를 UUID에 포함하고 싶을 때 사용. 필요 시 알게 될 것임
     * 다른 버전들에 대한 설명
          + v7은 v1과 v6을 개선한 버전으로, 가능하면 v7을 사용하는 것이 좋음. 따라서 v1이나 v6은 보통 사용하지 않음
          + v2는 보안 관련 용도로 예약되어 있음. 사용 중이라면 자세한 내용을 알 수 없을 가능성이 큼
          + v3는 v5로 대체됨. v5는 더 강력한 해시를 사용함

GN⁺의 정리

     * UUID는 다양한 버전이 있으며, 각 버전은 특정한 용도에 맞게 설계됨
     * v4와 v7이 가장 일반적으로 사용되며, v5와 v8은 특정한 데이터 요구 사항이 있을 때 사용됨
     * UUID의 버전 선택은 사용 목적에 따라 달라지며, 정렬이 필요한 경우 v7을, 랜덤 ID가 필요한 경우 v4를 사용하면 좋음
     * UUID의 다양한 버전을 이해하면 프로젝트에 적합한 UUID를 선택하는 데 도움이 됨

        Hacker News 의견

     * UUID Version 2 (v2)는 보안 ID를 위해 예약되어 있으며, 자세한 내용은 잘 알려져 있지 않음
          + RFC 문서가 불명확하게 작성되었기 때문임
          + Open Group의 문서를 참조하면 더 많은 정보를 얻을 수 있음
          + ""version 0"" UUID도 존재하며, 이는 나중에 다른 버전들이 호환되도록 하는 데 기여했음
          + 연구 결과는 GitHub에서 확인할 수 있음
     * UUID v2의 세부 사항은 RFC 9562 문서에서 쉽게 찾을 수 있음
          + DCE의 일부로 정의되어 있으며, 관련 링크를 클릭하면 세부 사항을 확인할 수 있음
          + 링크를 클릭하는 것이 중요함
     * UUID v7의 타임스탬프는 Databend에서 메타데이터 파일을 빠르게 찾는 데 유용함
          + AWS S3에서의 작업 속도를 크게 향상시킴
          + 관련 PR은 GitHub에서 확인할 수 있음
     * 짧은 UUID에 대한 표준이 있었으면 좋겠음
          + 예: 73WakrfVbNJBaAmhQtEeDv 또는 bK7nP9xM
          + 짧고 기억하기 쉬운 ID가 필요함
     * UUID2의 목적을 이해하기 어려움
          + Xandr에서 개인 데이터를 삭제 요청할 때만 UUID2를 접했음
          + Wikipedia 페이지를 읽어도 왜 다양한 유형의 UUID가 필요한지 이해하기 어려움
          + Mac 코드와의 혼합이 UUID2의 무작위성을 높이는 이유인지, 아니면 다른 이유가 있는지 궁금함
          + 프라이버시를 위해 매우 긴 식별자를 사용하면 중복되지 않는 UUID를 사용할 수 있음
     * UUID v4는 단순히 무작위 바이트 생성기임
          + 하이픈, 버전 정보 등을 생략하고 무작위 바이트를 생성하는 것이 더 효율적임
     * MAC 기반 버전은 사용하지 않는 것이 좋음
          + 이론적으로 v4와 v7을 제외한 모든 버전이 해당됨
          + 특히 v1은 최악이며, v3의 MD5도 매우 취약함
     * SHA256 데이터와 카운터를 사용하는 UUID가 유용할 수 있음
          + PBKDF2와 유사한 방식으로 프라이버시를 보호하는 식별자로 사용할 수 있음
     * v7을 사용하는 것이 좋음
          + 보안 전문가들이 반대할 수도 있음
     * 흥미로운 읽을거리였음
          + 매일 새로운 것을 배울 수 있음
"
"https://news.hada.io/topic?id=16480","구글 크롬 버그 수정에 처음으로 기여한 경험 공유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구글 크롬 버그 수정에 처음으로 기여한 경험 공유

     * Chromium/Google Chrome 웹 브라우저의 버그를 처음으로 수정하며 대규모 오픈 소스 프로젝트에 기여함.
     * 과거의 오픈 소스 작업과는 매우 다른 독특한 경험이었음.
     * 이 과정을 통해 비슷한 작업을 시도하려는 개발자들에게 도움을 주기 위해 전체 과정을 기록함.

버그

     * 수정한 버그는 Chromium Devtools와 메인 스레드 외부에서 실행되는 AudioWorklet과 같은 worklet의 네트워크 요청 간의 통합 문제였음.
     * Worklet이 만든 네트워크 요청이 Devtools의 네트워크 탭에 전혀 표시되지 않음.
     * ""Disable Cache"" 옵션이 무시되어 개발 중에 오래된 코드가 캐시에서 제거되지 않았음.
     * 이 문제는 여러 프로젝트에서 꾸준히 발생했으며, 최소한 세 가지 오류 보고서와 일치했음.
     * 최소한의 재현 작업은 간단했고, 캐시 헤더가 설정된 스크립트를 사용하여 AudioWorkletProcessor를 생성하고 페이지를 다시 로드하는 방식으로 문제를 재현할 수 있었음.

Chromium 코드 다운로드 및 빌드

     * 버그를 실제로 수정하기 위한 첫 번째 단계는 Chromium을 처음부터 빌드하는 것이었음.
     * 다행히 주요 운영 체제에서 빌드하는 방법에 대한 상세한 문서가 제공되었음.
     * 강력한 컴퓨터를 사용했지만, 처음 빌드는 45분 이상 소요되었고, RAM 사용량은 50GB 이상, 디스크 공간은 100GB 이상 필요했음.
     * 증분 빌드는 10초 이내로 빠르게 완료되었음.
     * 빌드는 시간이 걸리지만, 일단 필요한 모든 전제 조건을 설치하면 자동으로 진행되는 편리한 작업이었음.

버그 찾기 및 수정

     * 빌드 환경이 작동한 후, 코드 탐색을 시작함.
     * Chromium 코드베이스는 매우 방대하고, 전체적인 구조를 파악하기 어려웠음.
     * 코드 내의 많은 간접 참조와 모듈화로 인해 코드 탐색이 어려웠고, 동적 디스패치가 광범위하게 사용됨.
     * printf 디버깅을 사용하여 네트워크 요청이 시작되는 지점에서 요청이 실제로 만들어지거나 캐시에서 검색될 때까지 추적함.
     * 문제는 InspectorNetworkAgent가 worklet 대상에 대해 생성되지 않아서 발생함.
     * 이를 수정하기 위해 InspectorNetworkAgent가 WorkerGlobalScope 대신 WorkerOrWorkletGlobalScope를 수락하도록 변경했음.
     * 그러나 이 수정은 충분하지 않았고, 추가로 Devtools 프런트엔드의 TypeScript 코드를 확인한 후 Type.Worklet에 대해 Capability.Networking이 누락된 것을 발견함.
     * 이를 추가한 후, 문제는 완전히 해결됨.

테스트 및 코드 리뷰

     * 디버그 로그를 정리하고 diff를 최종 확인한 후, 코드를 리뷰 및 병합하는 과정을 탐색함.
     * Chromium Gerrit 코드 리뷰 사이트에 계정을 만들고 CLA를 서명함.
     * 리뷰어를 선정하고, 작성한 코드를 검토하여 필요한 테스트를 추가함.
     * Devtools 네트워크 검사 기능을 테스트하는 여러 JavaScript 테스트를 참조하여 새로운 테스트를 작성함.
     * 최종적으로 코드 리뷰에서 ""LGTM"" 승인을 받았고, PR이 병합됨.

두 번째 CL

     * devtools_frontend 저장소에서 Capability.Network를 worklet Devtools 대상에 추가하는 변경을 위해 또 다른 CL을 작성함.
     * 첫 번째 PR과 유사하게 진행되었으며, CI 테스트가 통과한 후 자동으로 병합되었음.

릴리스

     * Chrome Canary에서 수정 사항이 포함된 버전이 출시될 때까지 기다림.
     * Chrome Canary는 하루에 두 번 업데이트되며, 최종적으로 수정된 내용을 확인함.
     * 수정을 완료하는 데 한 달 이상 걸렸으며, Chrome 130 버전에서 안정적인 릴리스 채널에 포함될 예정임.

결과 및 회고

     * 버그 수정에 시간이 걸리고 많은 노력이 필요했지만, 매우 독특한 경험이었음.
     * Chromium의 규모에서 소프트웨어가 어떻게 개발되는지 경험할 수 있었음.
     * 개인적으로 코드가 전 세계 수백만(또는 수십억) 대의 장치에 포함된다는 사실이 큰 동기부여가 되었음.
     * 이번 경험을 통해 Chromium에 기여하는 방법을 배웠으며, 앞으로도 더 많은 버그 수정을 시도해볼 예정임.

   대단하네요

        Hacker News 의견

     * Chromium 코드베이스 작업 경험
          + Sublime Text를 사용하여 코드 작업을 plain text로 처리함
          + VS Code를 사용하면 함수 정의나 선언으로 이동하는 등의 기능을 사용할 수 있음
          + Chromium 기반 브라우저를 만들고자 하는 사람들에게 자신의 기사를 추천함
     * VS Code의 C++ 확장 문제
          + 큰 코드베이스로 인해 VS Code의 C++ 확장이 제대로 작동하지 않음
          + CPU 코어가 100%로 고정되는 문제 발생
          + Chromium Code Search 도구가 유용함
     * Chrome 버그 경험
          + Linux에서 Chrome 기반 브라우저에서 ""±±±±±±+..."" 입력되는 버그 발생
          + 다른 애플리케이션에서는 발생하지 않음
          + 버그를 재현하고 해결하고 싶어함
     * Chromium 코드베이스 첫 경험
          + 처음으로 Chromium 코드베이스를 탐색하는 것이 어렵지 않았음
          + Windows에서 이미지 붙여넣기 버그를 해결하기 위해 Chrome의 코드를 참고함
     * Chrome 빌드 요구사항
          + Chrome의 빌드 요구사항이 매우 높음
          + 고성능 워크스테이션이 필요함
          + Firefox도 빌드 시간이 오래 걸림
     * printf 디버깅
          + printf 디버깅을 사용하는 것이 부끄럽지 않음
          + printf 디버깅이 매우 효과적임
     * 온라인 코드 브라우저 사용 추천
          + 온라인 코드 브라우저를 통해 코드 탐색을 추천함
          + cs.chromium.org URL을 기억하기 쉬움
     * WorkletGlobalScope와 WorkerGlobalScope 차이
          + 두 용어의 차이를 이해하는 데 시간이 걸림
          + 명명 규칙이 좋지 않음
     * Chromium 버그 수정 제안
          + Chromium 버그를 수정하는 것을 추천함
          + Chrome은 빠르게 업데이트되므로 4-6주 내에 버그가 수정될 수 있음
          + 버그 수정에 기여할 사람을 찾고 싶어함
     * 이미지 복사 버그 경험
          + Chrome 기반 브라우저에서 이미지를 클립보드에 복사할 때 UI가 멈춤
          + PNG 인코딩 문제로 인해 발생함
          + 압축 수준을 0으로 변경하여 문제를 해결함
          + Firefox는 지연이 없고 원본 이미지 파일을 클립보드에 넣음
"
"https://news.hada.io/topic?id=16517","트위터 임베드를 Semantic HTML로 교체하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      트위터 임베드를 Semantic HTML로 교체하기

     * 자신의 블로그/사이트에 트윗을 임베딩 하고 싶지만 트위터로 사람들을 보내고 싶지는 않을때 간단한 Python 스크립트로 전환하여 임베딩
     * 모든 이미지/아바타를 인라인 처리하며, 외부 사이트 링크, 해쉬태그, 멘션 등의 모든 링크를 처리
          + Like/Reply 수는 보이지만, Retweet 수는 항상 보이지는 않음
          + Quote/Bookmark 는 보이지 않음
          + Cards, Polls 등도 지원
          + 링크는 t.co 같은 것을 거치지 않고 직접 연결
     * 생성된 HTML은 Semantic, Short, Accessible 함
     * Selenium Webdriver로 이미지 등은 캡쳐하고, 트위터 Embed API로 내용을 가져옴
          + 아바타는 WebP로 인라인 됨
          + 첨부된 사진도 모두 인라인 처리
          + 비디오는 포스터만 인라인
          + 해당 트윗을 Archive.org 에 자동 등록
"
"https://news.hada.io/topic?id=16514","Oral-B iOS 앱이 거의 300MB인 이유는? Colgate 앱은 더 큰 이유는?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Oral-B iOS 앱이 거의 300MB인 이유는? Colgate 앱은 더 큰 이유는?

        Hacker News 의견

     * Oral-B와 Colgate 앱의 존재 이유에 대한 의문 제기
          + 사용자 데이터 수집이 데이터 브로커에게 매우 가치 있는 작업임
          + 대기업들이 좋은 제품보다는 데이터를 추출하기 위한 앱을 만드는 것에 대한 불만
          + 냉장고, 식기세척기, 칫솔에 앱이 있는 시대에 대한 회의감
     * 대부분의 앱이 100MB 이상이며, 업데이트도 300MB 이상임
          + Android 앱은 상대적으로 용량이 적음
          + 개발자의 게으름과 Apple 도구의 문제로 인해 코드 최적화가 부족함
          + Apple은 더 많은 저장 공간을 가진 새로운 기기나 iCloud 구독을 판매하는 데 관심이 있음
     * Oral-B 앱이 몇 년 전에는 가벼웠고, 최신 뉴스 피드를 보여주며 Apple Health와 연동되었음
          + 앱이 업데이트되면서 대부분의 기능이 사라짐
          + 이전 버전을 설치할 수 있는 iOS 앱 스토어가 필요함
     * 칫솔 모드를 변경하기 위해 앱이 필요하다는 점이 더 당황스러움
          + 칫솔에 앱이 필요한 이유에 대한 의문
     * 칫솔 앱을 다운로드하는 사람이 정상적인가에 대한 의문
"
"https://news.hada.io/topic?id=16419","50k 톤 포징 프레스 제작 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           50k 톤 포징 프레스 제작 방법

50,000톤 단조 프레스 구축 방법

  1940년대와 1950년대의 항공기 설계 혁명

     * 제트 엔진의 발명으로 항공기가 더 높고 빠르게 비행할 수 있게 됨
     * 새로운 항공기 기술: 인코넬, 티타늄 같은 재료와 강력한 제조 방법 필요
     * 대형 단조 및 압출 부품 사용이 유망한 기술적 진보로 평가됨

  단조 및 압출의 장점

     * 단조: 금속을 압력으로 형성하는 제조 방법
     * 압출: 금속을 특정 모양의 구멍을 통해 압착하여 형성
     * 대형 단조 및 압출 부품 사용 시 부품이 더 얇고 가벼우며 강해짐
     * 기계 가공보다 일관된 기계적 특성 제공

  대형 프레스의 필요성

     * 대형 단조 및 압출 부품을 만들기 위해 전례 없는 크기의 프레스 필요
     * 1950년대 국방부가 대형 프레스 프로그램을 시작하여 4개의 대형 단조 프레스와 6개의 압출 프레스 건설

  대형 프레스 프로그램의 기원

     * 독일이 1920년대부터 대형 프레스 개발
     * 미국은 독일의 대형 프레스 능력을 1942년에 인식하고 자체 대형 프레스 개발 시작
     * 독일 항복 후 미국과 소련이 독일의 대형 프레스와 설계 도면을 나눔

  대형 프레스 프로그램의 시작

     * 1950년 국방부가 17개의 대형 프레스 건설 프로그램 시작
     * 최종적으로 10개의 프레스 건설: 4개의 압출 프레스와 6개의 단조 프레스
     * 프레스는 민간 산업에 임대되어 운영됨

  대형 프레스의 건설

     * 1952년 프레스 건설 시작
     * 50,000톤 단조 프레스는 10층 건물 크기
     * 프레스 부품은 미국과 전 세계에서 제작됨

  대형 프레스의 성과

     * 항공기 부품 수와 제조 비용 크게 감소
     * 대형 프레스가 다양한 금속을 처리할 수 있게 됨
     * 군사 및 상업 항공기, 우주선, 잠수함 등 다양한 용도로 사용됨

  결론

     * 대형 프레스 프로그램은 군사 기술의 민간 전환의 좋은 예시
     * 제조 기술의 발전이 기술적 진보에 중요한 역할을 함
     * Tesla의 대형 주조 기계와 유사한 혁신적 제조 방법이 여전히 가능함

GN⁺의 정리

     * 50,000톤 단조 프레스는 항공기 제조 비용을 크게 절감하고 성능을 향상시킴
     * 대형 프레스 프로그램은 군사 기술이 민간 산업에 어떻게 기여할 수 있는지 보여줌
     * Tesla의 대형 주조 기계와 같은 현대적 예시가 여전히 존재함
     * 제조 기술의 발전이 기술적 진보에 중요한 역할을 함
     * 미국의 항공기 제조 성공에 대형 프레스가 큰 기여를 함

        Hacker News 의견

     * Forging의 장점: 특정 설계의 스트레스 패턴에 맞게 곡물 방향을 조절할 수 있음
          + 단순히 강철을 압축하는 것만으로 강해지지 않음
          + 강철 케이블은 원래 길이의 수백 배로 늘려서 강도를 증가시킴
          + 최종 형태를 만드는 것보다 복잡한 최적화 과정이 필요함
          + 예를 들어, 피스톤 로드는 길이 방향으로 강해야 하므로 짧고 두꺼운 잉곳을 늘려서 만듦
          + I-빔을 만들 때, 중간을 두드려 얇게 만드는 것보다 가장자리를 늘리는 것이 더 강함
          + 복잡한 부품의 경우, 이 과정은 현대 공학 문제만큼 복잡함
     * 폭발 성형: 화학적 고폭발물을 사용하여 템플릿 재료를 템플릿에 강제로 밀착시키는 방법
          + 중압 단조와 비교할 만한 압력을 생성할 수 있음
          + 복잡한 원통형 또는 구형을 쉽게 정확하게 만들 수 있음
          + 초전도 자석을 만들 때 사용됨
          + MRI 스캐너 제조업체에서 사용됨
     * Heavy Press 프로그램: 2000년대 초반, 모든 미국 군용 항공기와 Airbus, Boeing 항공기에 사용됨
          + B-52 폭격기의 비용 절감 효과가 프로그램 전체 비용보다 큼
          + 이 프로그램에 대해 처음 알게 되어 흥미로웠음
          + 다른 공정이 산업이나 설계 방식을 재정의할 수 있을지 궁금함
     * 대형 프레스의 전략적 중요성: 정치인들이 이해하지 못하는 경우가 많음
          + 영국 정부가 대형 프레스 자금을 지원하지 않은 것에 실망함
          + 천연가스가 저렴하고 공급망 문제가 없어서 다행임
     * 대형 프레스의 크기: 50,000톤 프레스는 10층 건물 크기이며 전함을 들어 올릴 수 있는 힘을 가짐
          + 독일 항복 후, 미국과 소련이 독일의 대형 프레스와 로켓 과학자를 나눠 가짐
          + 미국은 독일 프레스 4대를 해체하여 미국으로 운송함
          + 소련이 전쟁 중 공장을 해체하여 후방으로 이동시킨 것과 유사함
     * 자유시장 옹호자들에게 주는 교훈: 자유시장이 기회를 놓치는 경우가 있음
          + 현명한 정부 개입이 공공에 큰 이익을 줄 수 있음
     * 세계 최대 프레스: 2018년에 건설된 60,000톤 프레스가 캘리포니아주 로스앤젤레스 카운티에 있음
     * 의미 있는 노동: 단순히 급여뿐만 아니라 특별한 느낌을 주는 것이 중요함
          + 산업 역량을 구축하려는 논의는 높은 노동 비용이나 자본의 투자 관심 부족에 초점이 맞춰짐
          + 정부가 기업을 참여시키기 위해 제공한 보장된 사업 기간과 실패한 다른 산업 공정을 이해하고 싶음
          + 태양광 산업에서는 왜 성공하지 못했는지 궁금함
     * 북미의 원자로 용기 제작: 용기를 조각내어 용접하지 않고는 제작할 수 없음
          + 캐나다 회사가 소형 원자로 용기를 제작하려고 준비 중임
          + 아직 Nuscale 2.0이 아닌 징후는 보이지 않음
     * 1950년대 시작된 프로그램: 10대 프레스 중 6대가 여전히 작동 중임
"
"https://news.hada.io/topic?id=16430","반년 동안 양말 1.5억어치 팔고 매각하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       반년 동안 양말 1.5억어치 팔고 매각하는 이유

   창업의 여정
     * 2024년 상반기에 두 개의 온라인 사업체를 인수하고 1.5억 원의 매출을 달성함.
     * 6개월 동안 두 사업체를 운영하면서 약 4천만 원의 이익을 남겼으며, 하반기 매출 증가를 기대 중.
     * 오픈마켓의 경쟁을 벗어나 고부가가치 사업 모델로의 전환을 계획 중.

   향후 방향
     * 유아 시장에 대한 애착 넘치는 새로운 운영자를 찾는 중.
     * 작은 사업체를 발굴하고 가치 상승 전략이 재미있었음.
     * 앞으로 마이크로 PE 역할을 하며 작은 온라인 사업체를 사고파는 전문가가 되고자 함.
"
"https://news.hada.io/topic?id=16511","Meta, 새로운 혼합 현실(MR) 기기 "Puffin" 계획중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Meta, 새로운 혼합 현실(MR) 기기 ""Puffin"" 계획중

     * Meta가 부피가 크고 무거운 안경 모양의 새로운 혼합 현실 기기를 계획중 (코드명 Puffin)
     * 지금까지 소비자 매력이 제한적이었던 큰 무거운 헤드셋의 대안을 설계하려는 것으로 보임
     * 혼합 현실(Mixed Reality)의 정의와 한계
          + 혼합 현실은 증강 현실과 가상 현실의 조합으로, 사람들이 실제 세계나 가상의 배경 위에 이미지와 텍스트를 볼 수 있게 해줌
          + Apple의 Vision Pro와 같은 혼합 현실 헤드셋을 사용하여 사람들은 몰입형 디지털 환경에서 영화를 보거나 피트니스 수업을 할 수 있음
          + 그러나 헤드셋의 무게로 인해 장시간 착용하기에 불편하여 매력이 제한됨
     * Meta의 새로운 기기 개발 계획
          + Meta의 Reality Labs 직원들은 이달 초 제품 로드맵 검토의 일환으로 Mark Zuckerberg CEO와 Andrew Bosworth CTO에게 새로운 안경 모양의 혼합 현실 기기에 대한 아이디어를 보여줌
          + 회의 후 직원들은 Puffin을 진행하고 개발 중이던 프리미엄 혼합 현실 헤드셋을 취소하기로 결정함
          + Puffin은 현재 Meta의 기존 Quest 헤드셋보다 훨씬 작은 기기로 구상되고 있음
          + 내부적으로 부피가 큰 안경 모양으로 묘사되었으며 무게는 110g 미만으로 추정됨
          + Quest 3 헤드셋 무게의 5분의 1 수준이지만 Meta의 Ray-Ban 스마트 안경보다는 두 배 정도 무거움
          + 아직 초기 단계이며 무산될 수 있는 이 새로운 프로젝트는 현재 2027년 출시를 목표로 하고 있음
          + Quest 헤드셋과 달리 새로운 Puffin 기기에는 핸드헬드 컨트롤러가 제공되지 않음
          + 대신 사용자는 손 제스처와 눈 움직임으로 제어할 수 있음
          + 또한 카메라를 통해 자연 세계의 영상을 사용자에게 전달하는 팬케이크 렌즈가 포함

   음.. 컨트롤러의 진동이 주는 물리 피드백도 의미 있는데

   ""Puffin"" 때문에 ""La Jolla""를 취소한 거네요.
   Meta, Vision Pro와 경쟁할 프리미엄 헤드셋 취소
"
"https://news.hada.io/topic?id=16463","텔레그램, 진정한 암호화 메시징 앱인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         텔레그램, 진정한 암호화 메시징 앱인가?

     * 최근 Telegram의 CEO Pavel Durov가 프랑스 당국에 의해 체포된 사건이 발생했음
     * 대부분의 뉴스가 Telegram을 ""암호화된 메시징 앱""으로 묘사하는데, 이는 기술적으로는 맞지만 실제로는 잘못된 표현임

    Telegram은 암호화를 사용하나?

     * 현대의 개인 메시징 서비스에서 암호화는 기본적으로 종단간 암호화를 의미함
     * Telegram은 기본적으로 종단간 암호화를 제공하지 않음
     * 사용자가 직접 ""비밀 채팅"" 기능을 활성화해야만 종단간 암호화가 가능함
     * 이 기능은 1:1 대화에서만 가능하며, 그룹 채팅에서는 사용할 수 없음
     * 비전문가가 이 기능을 활성화하기 어렵게 설계되어 있음

    기본 암호화가 중요한가?

     * Telegram의 기본 암호화 부족은 많은 사용자에게 큰 문제가 아닐 수 있음
     * Telegram은 소셜 미디어 네트워크로 사용되는 경우가 많음
     * Telegram의 인기 있는 기능 중 하나는 ""채널""과 대규모 공개 그룹 채팅임
     * 이러한 공개 채팅에서는 암호화가 큰 의미가 없음
     * 그러나 많은 사용자가 개인 메시지를 주고받을 때는 강력한 암호화가 필요함

    Telegram은 암호화가 어렵다는 것을 알고 있음

     * Telegram의 암호화는 2016년부터 많은 비판을 받아왔음
     * Telegram은 여전히 기본 암호화를 제공하지 않으며, 사용자 경험도 개선되지 않았음
     * Telegram의 CEO Pavel Durov는 Telegram을 ""보안 메신저""로 홍보하지만, 실제로는 그렇지 않음

    지루한 암호화 세부사항

     * Telegram의 ""비밀 채팅"" 기능은 MTProto 2.0이라는 자체 프로토콜을 사용함
     * 이 프로토콜은 비표준 인증 암호화 모드를 사용하며, 전문가들이 많은 질문을 할 만한 요소가 많음
     * 실제로 사용되지 않는다면 암호화의 보안성은 큰 의미가 없음

    알아야 할 다른 사항

     * 종단간 암호화는 데이터 유출을 방지하는 좋은 도구이지만, 메타데이터 문제는 여전히 남아 있음
     * 메타데이터는 누가 서비스를 사용하고, 누구와 대화하며, 언제 대화하는지를 포함함
     * 이러한 데이터는 Telegram의 서버에 저장되어 있으며, 수집하려는 사람들에게 유용함

    GN⁺의 정리

     * 이 기사는 Telegram의 암호화 기능에 대한 오해를 바로잡고자 함
     * Telegram은 기본적으로 종단간 암호화를 제공하지 않으며, 사용자가 직접 활성화해야 함
     * Telegram의 암호화는 사용하기 어렵고, 많은 사용자가 이를 인식하지 못함
     * 메타데이터 문제는 여전히 남아 있으며, 이는 모든 소셜 미디어 네트워크와 개인 메신저에 해당됨
     * Signal이나 WhatsApp과 같은 기본 암호화를 제공하는 메신저를 추천함

   텔레그램 CEO 파벨 두로프 체포, 테러·사기·아동 포르노 혐의

   이거랑 관련 있나 보군요.

        Hacker News 의견

     * 새로운 기기에서 비밀번호 복구 절차를 통해 계정에 로그인하여 이전 메시지를 확인할 수 있는지 테스트해보라는 의견이 있음
          + 가능하다면 법 집행 기관도 접근할 수 있음
     * Telegram은 메신저보다는 소셜 네트워크에 가깝다는 의견이 있음
          + 많은 유용한 채널이 있으며, 여러 나라에서 정보 공유에 중요한 역할을 함
          + 이 관점에서 보면 e2ee(종단간 암호화)는 그렇게 중요하지 않음
          + Reddit, X, Instagram 등 대부분의 소셜 미디어가 API를 닫는 시점에서 Telegram은 여전히 무료 API를 제공함
     * Telegram은 기본적으로 암호화되지 않으며, 암호화되더라도 중요한 정보를 연결된 기기에 신뢰해서는 안 된다는 의견이 있음
          + Telegram은 현재 최고의 커뮤니케이션 플랫폼임
          + 다양한 기능이 있으며, 다른 플랫폼에 비해 기능이 앞서 있음
          + 최근 사건 이후로도 Telegram이 잘 유지되기를 바람
     * 대부분의 비기술 사용자들이 Telegram이 일반적으로 e2ee라고 생각하는 것이 문제라는 의견이 있음
     * Telegram의 e2ee 제공 방식이 McDonalds의 샐러드 제공 방식과 같다는 의견이 있음
     * 암호화에 대해 잘 모르지만, Telegram의 분산 인프라가 기본적으로 나쁘지 않다는 의견이 있음
          + e2ee에만 집중하는 것은 오해를 불러일으킬 수 있음
          + Telegram은 분산된 인프라를 사용하여 데이터를 보호함
          + 여러 법적 시스템의 검토를 통과해야만 데이터를 제공할 수 있음
          + 지금까지 제3자에게 사용자 데이터를 공개한 적이 없음
     * 블로그 포스트 덕분에 Telegram이 안전하다고 주장하는 사람들에게 좋은 자료를 제공할 수 있게 되었다는 의견이 있음
          + Signal은 Sealed Sender라는 기능을 제공하여 메타데이터 문제를 어느 정도 줄일 수 있음
     * Telegram에 대한 기사가 기술자들에게는 잘 알려진 내용이지만, 대부분의 사용자들은 기자들에 의해 오도된다는 의견이 있음
          + 암호화가 필요한지 여부는 각 개인이 결정해야 함
          + 교육된 선택이 필요함
     * Telegram의 암호화가 그렇게 나쁘다면 왜 Pavel Durov가 체포되었는지 의문을 제기하는 의견이 있음
          + Telegram에서의 불법 활동 단속에 협조하지 않았다는 이유로 체포됨
          + 다른 소셜 네트워크의 CEO들은 체포되지 않음
          + Telegram이 백도어가 없기 때문인지 의문을 제기함
     * Telegram을 주로 p2p e2ee 오디오 통화에 사용한다는 의견이 있음
          + 이 기능이 매우 좋음
"
"https://news.hada.io/topic?id=16485","네덜란드 개인정보보호청, 운전자 데이터 미국 전송으로 Uber에 2억 9천만 유로 벌금 부과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          네덜란드 개인정보보호청, 운전자 데이터 미국 전송으로 Uber에 2억 9천만 유로 벌금 부과

  네덜란드 DPA, Uber에 2억 9천만 유로 벌금 부과

     * **네덜란드 데이터 보호 당국(DPA)**는 Uber가 유럽 택시 운전사의 개인 데이터를 미국으로 전송한 것과 관련하여 2억 9천만 유로의 벌금을 부과함
     * 네덜란드 DPA는 Uber가 GDPR(일반 데이터 보호 규정)을 위반했다고 판단함
     * Uber는 현재 이 위반을 중단한 상태임

  민감한 데이터

     * Uber는 유럽 운전사의 계정 정보, 택시 면허, 위치 데이터, 사진, 결제 정보, 신분증, 범죄 및 의료 데이터 등을 미국 서버에 저장함
     * 2년 넘게 이러한 데이터를 전송하면서 전송 도구를 사용하지 않음
     * 2020년 EU-US 프라이버시 실드가 무효화된 이후, 표준 계약 조항을 사용하지 않아 데이터 보호가 충분하지 않았음
     * 2021년 8월 이후 Uber는 표준 계약 조항을 사용하지 않았고, 이는 네덜란드 DPA에 의해 데이터 보호가 불충분하다고 판단됨
     * 현재 Uber는 프라이버시 실드의 후속 조치를 사용 중임

  운전사들의 불만

     * 네덜란드 DPA는 170명 이상의 프랑스 운전사들이 프랑스 인권 단체 LDH에 불만을 제기한 후 조사를 시작함
     * GDPR에 따르면, 여러 EU 회원국에서 데이터를 처리하는 기업은 본사가 위치한 국가의 DPA와 협력해야 함
     * Uber의 유럽 본사는 네덜란드에 위치해 있음
     * 조사 기간 동안 네덜란드 DPA는 프랑스 DPA와 긴밀히 협력하고 다른 유럽 DPA와 결정을 조율함

  Uber에 대한 벌금

     * 유럽의 모든 DPA는 동일한 방식으로 기업에 대한 벌금을 계산함
     * 벌금은 기업의 전 세계 연간 매출의 최대 4%에 해당함
     * Uber는 2023년에 약 345억 유로의 전 세계 매출을 기록함
     * Uber는 벌금에 대해 이의를 제기할 의사를 밝힘
     * 네덜란드 DPA는 2018년에 60만 유로, 2023년에 1천만 유로의 벌금을 Uber에 부과한 바 있음

  GN⁺의 정리

     * 이 기사는 GDPR 위반으로 인한 Uber의 벌금 부과 사례를 다루고 있음
     * 유럽 외부로의 데이터 전송 시 추가적인 보호 조치가 필요함을 강조함
     * 데이터 보호의 중요성과 GDPR의 엄격한 규정을 이해하는 데 도움이 됨
     * 유사한 기능을 가진 다른 프로젝트로는 Google Cloud의 데이터 보호 서비스가 있음

        Hacker News 의견

     * 미국의 데이터는 주로 유럽이나 인도에 있는 사람들이 관리함
          + 서버는 미국에 있지만 데이터 접근은 외부에서 이루어짐
          + 미국은 더 강력한 법이 필요함
     * Uber는 네덜란드 개인정보보호 당국과 법의 모호성에 대해 논의했음
          + Uber는 규칙 위반이 없다고 주장함
          + 법이 명확하지 않다고 해서 규칙을 어길 권리는 없음
          + 벌금은 사업의 일부가 되어서는 안 됨
     * Uber는 Privacy Shield의 후속 조치를 사용 중임
          + 미래에도 다시 문제가 될 가능성이 있음
          + EU 위원회가 제대로 대처하지 못하고 있음
     * 네덜란드에서 Uber가 벌금을 부과받은 것은 아이러니함
          + 네덜란드에서는 일반 택시가 보호받고 있음
          + 벌금이 매우 높음
     * 네덜란드 DPA는 170명 이상의 프랑스 운전사들의 불만을 조사함
          + 프랑스 인권 단체가 불만을 제기함
     * 미국 회사에 대한 벌금이 유럽의 주요 산업이 되었는지 궁금함
     * EU-US Data Privacy Framework와의 관련성을 궁금해함
          + Privacy Shield의 대체로 이 문제가 해결될 수 있었는지 의문임
     * 항소 절차는 약 4년이 걸릴 것으로 예상됨
          + 모든 법적 절차가 끝날 때까지 벌금은 유예됨
     * 벌금을 유럽에서의 사업 비용으로 간주하고 가격에 반영할 것임
     * 최근 몇 년간 EU가 미국 기술 기업에 부과한 총 벌금은 148억 달러에 달함
          + 미국 기술 기업이 유럽을 떠나지 않을 가능성이 높음
          + 규제 당국이 과도하게 대응하고 있음
"
"https://news.hada.io/topic?id=16411","Monument Valley 3는 Netflix 구독자 전용 게임이 될 것 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Monument Valley 3는 Netflix 구독자 전용 게임이 될 것

     * 넷플릭스가 12월 10일에 인기게임 ""모뉴멘트 밸리""의 최신작인 3탄을 공개할 것이라고 발표
     * 이 게임은 앱스토어에 출시되지만 넷플릭스 구독자 전용이 될 것
     * 넷플릭스는 자신의 서비스 로긴이 필요한 꽤 많은 게임을 점점 더 많이 출시하고 있음 (현재 약 100종 가까이 됨)
          + GTA 3/Vice City/San Andreas, Hades, Sonic Mania, Dead Cells, Luck Luna, OXENFREE I/II, Cut The Rope, Shovel Knight, Football Manager 2024, Reigns 등

   넷플릭스 게임 전체 카탈로그 : https://help.netflix.com/en/node/121442

   넷플릭스 게임의 두 번째 시즌: 도전, 변화, 그리고 앞으로의 길
   Netflix, 모든 넷플릭스 기기에서 게임이 가능하도록 클라우드 게임 작업을 진행중
"
"https://news.hada.io/topic?id=16534","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요

   곱창먹고싶네여

   마인크래프트에 다시 빠져 열심히 땅 파요. ⛏️
"
"https://news.hada.io/topic?id=16408","이미 시맨틱 웹은 널리 채택되어 사용되고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       이미 시맨틱 웹은 널리 채택되어 사용되고 있음

     * 시맨틱 웹은 예전의 Web 3.0임. ""Web 3.0""이 ""크립토 같은 것들""을 의미하기 전까지는 ""머신-리더블(Machine-Readable) 웹사이트""를 의미했음
     * 시맨틱 웹 개념이 더 이상 사용되지 않는다고 생각했는데, 알고 보니 시맨틱 웹은 이제 매우 널리 채택되어 이미 웹 3.0을 사용하고 있다고 해도 과언이 아닐 정도
     * 웹 3.0이 이미 존재한다면 어디에 있을까? 대부분 마크업에 숨겨져 있음

    JSON-LD를 이용한 블로그 포스팅

     * HTML 페이지의 <head> 에 <script type=""application/ld+json""> 요소를 추가하여 JSON-LD 메타데이터를 포함 가능
     * JSON-LD는 시맨틱 웹 메타데이터를 인코딩하는 주요 형식임
     * 예: BlogPosting 타입을 사용한 설명

{
  ""@context"": ""https://schema.org"";,
  ""@type"": ""BlogPosting"",
  ""headline"": ""From Shell to Excel - with a little bit of HTTPS"",
  ""url"": ""https://csvbase.com/blog/10"";,
  ""description"": ""Write once, read everywhere"",
  ""author"": {
    ""@type"": ""Person"",
    ""name"": ""Cal Paterson"",
    ""email"": ""cal@calpaterson.com"",
    ""url"": ""https://calpaterson.com/about.html"";
  },
  ""image"": ""https://csvbase.com/blog-static/excel.png"";,
  ""datePublished"": ""2024-08-12"",
  ""dateCreated"": ""2024-08-12"",
  ""dateModified"": ""2024-08-12""
}

     * @로 시작하는 키는 메타데이터(메타-메타데이터?)임
          + @context는 네임스페이스를, @type은 클래스 타입을 나타냄
          + 나머지 키는 BlogPosting 타입에서 허용되는 항목들임
     * 키의 값은 다른 유형일 수 있음 (author 키의 Person 처럼)

    이게 나한테 무슨 이득이 있을까?

     * 누가 이걸 읽지? 많은 봇이 JSON-LD 메타데이터를 파싱함
     * 시맨틱 웹 메타데이터가 포함된 블로그 게시물은 소셜 미디어 사이트에서 링크 미리보기가 표시되거나 하여 클릭률을 높임
     * 검색 엔진 크롤러가 이 메타데이터를 사용하여 검색 결과에 더 많은 정보를 표시함
     * 자동화된 링크 어그리게이터 들이 이 데이터를 이용하여 포스트를 사용자에게 보여줌(안드로이드가 뉴스화면에 여러 사이트를 보여주는 것 처럼)
     * 시맨틱 웹 메타데이터는 권한이 필요 없고 벤더 중립적임

    이건 어려울까 ?

     * 아님, JSON-LD 는 매우 간단함
          + JSON-LD는 페이지에 이미 있는 정보를 컴퓨터가 읽을 수 있도록 배열한 것임
     * 프론트엔드 앱을 작성할 수 있다면 JSON-LD도 쉽게 이해할 수 있음

    JSON-LD의 다른 유형

     * BlogPosting 외에도 Event, LocalBusiness, JobPosting, Product, Recipe 등의 타입이 있음
     * csvbase는 Dataset 타입을 사용하여 테이블 데이터를 설명함.

{
  ""@context"": [""https://schema.org"";, {""csvw"": ""https://www.w3.org/ns/csvw#"";}],
  ""@type"": ""Dataset"",
  ""name"": ""stock-exchanges"",
  ""url"": ""https://csvbase.com/meripaterson/stock-exchanges"";,
  ""isAccessibleForFree"": true,
  ""distribution"": [
    {
      ""@type"": ""DataDownload"",
      ""contentUrl"": ""https://csvbase.com/meripaterson/stock-exchanges.csv"";,
      ""encodingFormat"": ""text/csv"",
      ""contentSize"": ""16222""
    },
    {
      ""@type"": ""DataDownload"",
      ""contentUrl"": ""https://csvbase.com/meripaterson/stock-exchanges.parquet"";,
      ""encodingFormat"": ""application/parquet"",
      ""contentSize"": ""10751""
    },
    {
      ""@type"": ""DataDownload"",
      ""contentUrl"": ""https://csvbase.com/meripaterson/stock-exchanges.xlsx"";,
      ""encodingFormat"": ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",
      ""contentSize"": ""15500""
    },
    {
      ""@type"": ""DataDownload"",
      ""contentUrl"": ""https://csvbase.com/meripaterson/stock-exchanges.jsonl"";,
      ""encodingFormat"": ""application/x-jsonlines"",
      ""contentSize"": ""38627""
    }
  ],
  ""dateCreated"": ""2022-04-25T13:43:24.746075+01:00"",
  ""dateModified"": ""2023-04-02T20:27:33.255648+01:00"",
  ""maintainer"": {
    ""@type"": ""Person"",
    ""name"": ""meripaterson"",
    ""url"": ""https://csvbase.com/meripaterson"";
  },
  ""description"": ""The world's stock exchanges..."",
  ""mainEntity"": {
    ""@type"": ""csvw:Table"",
    ""csvw:tableSchema"": {
      ""csvw:columns"": [
        {""csvw:name"": ""csvbase_row_id"", ""csvw:datatype"": ""integer""},
        {""csvw:name"": ""Continent"", ""csvw:datatype"": ""string""},
        {""csvw:name"": ""Country"", ""csvw:datatype"": ""string""},
        {""csvw:name"": ""Name"", ""csvw:datatype"": ""string""},
        {""csvw:name"": ""MIC"", ""csvw:datatype"": ""string""},
        {""csvw:name"": ""Last changed"", ""csvw:datatype"": ""date""}
      ]
    }
  }
}

    이게 다 정말 필요한가? AI가 다 해결해주지 않을까 ?

     * 대형 언어 모델(LLM)은 종종 오류를 범함
     * 메타데이터를 제공하여 정확성을 보장하는 것이 중요함
     * LLM을 사용하면 비용이 많이 들고, 웹 페이지를 읽기 위해 GPU가 필요함

    대체제들

     * Open Graph Protocol: Facebook에서 만든 표준으로, 주로 콘텐츠를 설명함
     * Microdata: 간단하지만 파싱하기 어려움
     * Twitter Cards: 트위터에서 콘텐츠를 어떻게 표시할지 설명함
     * XML 기반의 이전 표준들: 도서관 및 아카이브 시스템에서 깊이 지원됨

    지루한 기술(Boring technology)

     * 시맨틱 웹이 이정도로 Low-Key라는 것은 매우 놀라움. 수많은 사이트가 이런 메타데이터를 이미 세팅하고 있음
     * ""시맨틱 웹은 이미 널리 퍼져 있으며, 단지 승리의 순간이 없었을 뿐""

    GN⁺의 정리

     * 시맨틱 웹은 기계가 읽을 수 있는 웹사이트를 만드는 기술로, 이미 널리 사용되고 있음.
     * JSON-LD는 시맨틱 웹 메타데이터를 인코딩하는 주요 형식으로, 블로그 포스팅, 이벤트, 제품 등 다양한 타입을 지원함.
     * 시맨틱 웹 메타데이터는 소셜 미디어와 검색 엔진에서 링크 미리보기와 검색 결과 향상에 도움을 줌.
     * AI를 사용하여 메타데이터를 자동으로 추출하는 것은 비용이 많이 들고 정확하지 않을 수 있음.
     * Open Graph Protocol, Microdata, Twitter Cards 등 다양한 대안이 존재함.

   시맨틱웹의 역사와 오늘날의 위상에 대해 궁금하신 분들에겐 이 에세이를 추천합니다.

   https://lespetitescases.net/why-I-dont-use-semantic-web-technologies-a…

   암호화폐가 낀 이후로는 폰지인터넷 개념이 된 Web 3.0 ㅋㅋ

   JSON-LD가 시맨틱 웹의 코어라거나 핵심 기술이라고 생각하지는 않지만, ""시맨틱 웹은 이미 널리 퍼져 있으며, 단지 승리의 순간이 없었을 뿐""이라는 말은 많이 공감가는 내용이네요..!

        Hacker News 의견

     * Semantic 웹 표준의 문제점
          + 수십 년 동안 킬러 애플리케이션이 부족함
          + 웹의 질이 나빠졌고, 위키피디아 같은 사건이 없었음
          + 비전의 불완전성: SPARQL 쿼리와 reasoners는 유용하지만, 평균 사용자에게는 인지 비용이 높음
          + 더 나은 웹을 위해서는 여전히 Semantic 웹 방향이 필요함
     * 시도 실패 경험
          + 시도한 사이트에 ""Poem"" 카테고리가 없었음
          + 9년 전부터 요청되었지만 해결되지 않음
     * JSON-LD와 RSS 비교
          + ""Googlers, JSON-LD가 RSS만큼 인지도를 가질 수 있음""
          + 앱이나 서비스를 출시하고 종료하면 좋겠다는 의견
     * LLM과 Semantic 웹의 의미
          + 의미는 출판자가 정의해서는 안 됨
          + 평균 출판자가 LLM보다 정확하게 분류할 수 있는지 의문
          + SEO 해킹과 블로그 스팸은 출판자가 유일한 진리의 원천이었기 때문
          + 의미를 정의하는 문제를 해결해야 함
     * Semantic 웹의 현재 상태
          + Facebook과의 통합으로 승리를 선언하는 것은 Semantic 웹의 죽음을 의미함
          + OWL과 다른 표준은 페이지 내용을 주석 처리하는 것이 목적이었음
          + 저자, 제목, 사진, 출판 날짜 정보는 거의 무의미함
     * 중요 개념 누락
          + 링크 데이터, RDF, 연합 및 웹 쿼리 언급 없음
          + JSON-LD는 단지 직렬화 형식일 뿐
          + 링크 데이터 기술은 데이터의 상호 운용성과 재사용성을 높임
          + LLM과 링크 데이터는 상호 보완적임
     * PDF의 메타데이터
          + PDF의 메타데이터도 Semantic 웹 표준을 기반으로 함
          + JSON-LD 대신 RDF를 XML로 작성함
     * HTML의 중요성
          + HTML이 어려워서 회피하는 것 같음
          + 의미는 마크업에 숨겨져 있는 것이 아니라 마크업 자체임
     * AI와 메타데이터
          + AI가 메타데이터를 대체하지 못하는 이유 두 가지
               o LLM이 자주 틀림
               o GPU 시간이 비쌈
          + LLM은 이미 99% 정확도를 보임
          + 미래에는 텍스트를 LLM에 통과시키는 것이 큰 문제가 되지 않을 것임
     * JSON-LD와 SEO
          + Google은 JSON-LD를 SEO 개선을 위해 5년 이상 추진해옴
          + Open Graph 프로토콜로 대부분의 관련 페이지 메타데이터가 이미 캡처됨
          + 추가 작업을 통해 JSON-LD를 생성할 필요가 없음
"
"https://news.hada.io/topic?id=16483","Linux 파이프 성능 저하","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Linux 파이프 성능 저하

  vmsplice는 너무 빠름

     * 일부 프로그램은 데이터를 파이프를 통해 더 빠르게 이동시키기 위해 vmsplice라는 시스템 호출을 사용함
     * vmsplice를 사용하지 않을 때 Linux 파이프가 예상보다 느리다는 것을 발견함
     * Morse 코드를 빠르게 인코딩/디코딩하는 프로그램을 작성 중이며, 이를 위해 파이프를 사용하고 있음

  이상적인 환경에서 데이터 쓰기

     * 아래 프로그램은 시스템 호출 없이 데이터를 복사함
     * AVX-512를 사용하여 167 GB/s의 속도로 실행됨
     * AVX-512를 비활성화하고 AVX2 및 SSE2로 테스트했을 때도 동일한 속도(167 GB/s)를 기록함
     * 벡터화가 사용되는 한 167 GB/s의 속도를 달성할 수 있음

  실제로 파이프에 데이터 쓰기

     * 파이프에 데이터를 쓰는 프로그램을 작성하고 측정한 결과, 17 GB/s의 속도를 기록함
     * 이는 버퍼에 쓰는 것보다 10배 느림
     * 프로파일링 결과, 대부분의 시간이 write 호출에 소비됨
     * pipe_write 함수에서 메모리 페이지를 할당하는 데 많은 시간이 소요됨
     * 데이터 복사 자체는 CPU 시간의 20%만 차지하지만, 여전히 __memset_avx512_unaligned_erms보다 두 배 느림

  vmsplice의 도움

     * vmsplice는 사용자 공간에서 커널로 버퍼를 복사하지 않고 이동시킴
     * vmsplice를 사용하면 210 GB/s의 속도를 달성할 수 있음
     * vmsplice는 write 시스템 호출의 비싼 부분을 우회함

  마무리

     * 파이프에 쓰는 것은 원시 메모리에 쓰는 것보다 10배 느림
     * 이는 버퍼를 잠그는 비용과 SIMD 컨텍스트를 저장하고 복원하는 비용 때문임
     * splice와 vmsplice는 이러한 비용을 피하고 데이터를 효율적으로 이동시킴

GN⁺의 정리

     * 이 글은 vmsplice를 사용하여 Linux 파이프의 성능을 극대화하는 방법을 설명함
     * vmsplice는 데이터를 커널 공간으로 복사하지 않고 직접 이동시켜 성능을 크게 향상시킴
     * Morse 코드 인코딩/디코딩과 같은 고속 데이터 처리 프로그램에 유용함
     * 비슷한 기능을 가진 다른 프로젝트로는 splice와 sendfile 등이 있음

        Hacker News 의견

     * JMP가 RET로 대체되지 않는 이유는 CONFIG_RETHUNK 옵션 때문임
          + objdump의 디스어셈블리에서 RET가 JMP __x86_return_thunk로 대체된 결과를 볼 수 있음
          + 관련 링크: 링크1, 링크2
     * 함수의 시작과 끝에 있는 NOP 명령어는 ftrace가 추적 명령어를 삽입할 수 있게 함
          + ASM_CLAC와 ASM_STAC 매크로에서 나옴
          + X86_FEATURE_SMAP이 감지되면 런타임에 CLAC와 STAC 명령어로 채워짐
          + 관련 링크: 링크3, 링크4, 링크5
     * 한 사용자의 사이드 프로젝트는 파일 디스크립터를 위한 링버퍼를 제공하는 시스템 호출을 제안함
          + 파이프의 양쪽 끝이 링버퍼를 지원하면 동일한 링버퍼를 매핑하여 커널 호출 없이 제로 카피 IO를 가능하게 함
          + 협력자를 찾고 있음
          + 관련 링크: 링크6
     * Linux 파이프를 ""느리다""고 부르는 것은 Toyota Corolla를 ""느리다""고 부르는 것과 같음
          + 대부분의 경우 충분히 빠름
          + 극단적인 경우가 아니라면 더 빠른 것을 찾을 필요 없음
     * 현대 CPU에서는 rep movsb가 가장 빠른 벡터화된 버전만큼 빠름
          + 커널 함수 이름 ""copy_user_enhanced_fast_string""이 이를 암시함
          + CPU 기능인 ERMS와 FSRM이 이를 가능하게 함
     * AVX512는 전력 소모가 많고 CPU 주파수 스케일링을 유발함
          + 관련 링크: 링크7, 링크8
     * Hacker News의 ""hug of death""를 다시 경험 중임
          + 캐싱된 WordPress 페이지 덕분에 상황이 나아졌지만 여전히 몇 초가 걸림
     * io_uring을 사용한 버전을 보는 것이 흥미로울 것임
          + 커널과 사전 공유 버퍼를 사용하여 복사를 피하고 시스템 호출 오버헤드를 줄일 수 있음
     * 블로그 로딩 시간이 약 20초 걸리는 것은 대담한 주장임
     * 거의 모든 형태의 IPC는 ""느림""
          + 안전을 위해 성능 비용을 지불하기로 결정한 것임
     * 원래 splice가 왜 그렇게 느린지 이해하지 못했음
          + vmsplice보다 느린 이유를 지적했지만, 왜 그런지 명확하지 않음
          + vmsplice로 재구현할 수 없는 이유가 있을 것임
"
"https://news.hada.io/topic?id=16473","C 언어로 작성된 Rust 컴파일러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          C 언어로 작성된 Rust 컴파일러

  왜 C로 Rust 컴파일러를 작성하는가?

     * 최근 활동이 줄어든 이유는 여러 가지가 있음
          + 가족의 죽음 등 개인적인 사건
          + 직장에서의 책임 증가
          + 오픈 소스에 대한 열정 감소
          + 새로운 프로젝트에 집중
     * 이 프로젝트는 순수 C로 Rust 컴파일러를 작성하는 것임
          + C++이나 flex, yacc, Makefile 없이 순수 C로 작성
          + 프로젝트 이름은 Dozer

    왜 이런 일을 하는가?

     * 부트스트래핑과 그 중요성을 이해해야 함
          + Rust 코드를 실행하려면 컴파일러가 필요함
          + Rust의 주요 컴파일러는 rustc임
          + rustc는 Rust로 작성되었으며, Rust 코드를 컴파일하기 위해 필요함
          + rustc를 컴파일하려면 이전 버전의 rustc가 필요함
          + 초기 버전의 rustc는 OCaml로 작성되었음
          + OCaml 컴파일러는 Guile로 컴파일 가능하며, Guile은 C로 작성됨

    하강 원리

     * Bootstrappable Builds 프로젝트 소개
          + 512바이트 바이너리 시드로 시작
          + 간단한 컴파일러로부터 점진적으로 더 복잡한 컴파일러를 생성
          + 최종적으로 TinyCC, GCC, Linux 등을 컴파일 가능
     * Rust는 이 과정에서 매우 늦게 등장
          + mrustc를 사용하여 rustc 1.56 버전을 컴파일
          + C++ 도입 이전에 Rust를 사용하고 싶다면 불가능
     * Dozer는 C로 부트스트랩 가능한 Rust 컴파일러를 목표로 함
          + TinyCC로 부트스트랩 가능해야 함

    계획

     * 지난 두 달 동안 Dozer 작업
          + TinyCC와 cproc으로 컴파일 가능
          + QBE를 백엔드로 사용
          + 현재 렉서와 일부 파서 완료
          + 매크로/모듈 확장은 미루고 있음
          + 타입체크는 i32만 지원
          + 코드 생성은 아직 미흡
     * 앞으로의 계획
          + Dozer를 점진적으로 발전시켜 기본적인 libc 샘플, libcore, rustc를 컴파일 가능하게 함
          + cargo와 유사한 도구를 만들어 Rust 패키지를 컴파일 가능하게 함
          + 자동 생성된 코드를 제거
          + rustc와 cargo를 컴파일하는 프로세스 생성

  GN⁺의 정리

     * 이 글은 순수 C로 Rust 컴파일러를 작성하는 프로젝트에 대한 이야기임
     * 부트스트래핑의 중요성과 이를 통해 Rust 컴파일러를 만드는 과정 설명
     * Dozer 프로젝트는 C로 부트스트랩 가능한 Rust 컴파일러를 목표로 함
     * 이 프로젝트는 매우 도전적이며, 성공 여부는 불확실하지만 시도 자체에 의미가 있음

        Hacker News 의견

     * Rust를 부트스트랩하려면, C로 프로토-러스트를 작성한 후, 프로토-러스트로 전체 러스트 컴파일러를 작성하는 것이 좋음
          + 프로토-러스트는 차용 검사기나 매크로 지원이 없고, 메모리를 해제하지 않으며, 좋은 코드를 생성할 필요가 없음
          + 프로토-러스트는 러스트 문법을 가진 C와 같음
          + 왜 이 경로가 선택되지 않았는지 궁금함
     * 취미로 Rust로 C 컴파일러를 작성 중이며, ""Small C Compiler""라고 부름
          + Cranelift를 백엔드로 사용하며, 컴파일러 아키텍처는 플러그 가능하고 해킹 가능함
          + printf(""Hello World!"")를 처리할 수 있을 때까지 오픈 소스 계획이 없음
          + 전처리기와 파서를 구현하려고 노력 중이며, rust-peg와 HimeCC에 참여함
          + typedef 문제로 인해 학계의 해결책이 궁금함
     * 하드웨어에서도 동일한 부트스트랩 문제 존재
          + 컴퓨터는 이전에 만들어진 컴퓨터와 소프트웨어로 만들어짐
          + 생각해볼 만한 흥미로운 주제임
     * 부트스트랩의 이점을 찾기 위해 4개의 링크를 따라가야 했음
          + 제목의 ""왜"" 부분이 그 이유를 설명할 것이라고 기대했음
     * 부트스트랩 체인에 C++이 도입되면 부트스트랩이 거의 끝남
          + Rust를 사용하려면 C++ 도입 이전에 사용해야 함
          + Rust 컴파일러가 C에서 부트스트랩될 수 있으면 좋겠음
          + 그러나 이전 버전의 rustc는 이전 버전의 rustc로 컴파일됨
          + OCaml 컴파일러를 Guile로 성공적으로 컴파일할 수 있음
          + 저자는 C++ 단계를 제거하고 C 단계를 선호함
          + 저자의 동기가 명확하지 않음
     * 목표 시스템에서 새로운 바이너리를 생성하려면 rustc가 해당 시스템을 지원해야 함
          + rustc에 해당 지원을 추가하면 스스로 빌드할 수 있음
     * Scheme으로 C++ 인터프리터나 컴파일러를 작성하는 것을 상상함
          + Scheme에서 현재 gcc로 바로 가는 것은 큰 지름길이 될 것임
          + 그러나 C++ 컴파일러 작성은 거의 불가능하다는 것이 일반적인 지혜임
     * 전체 스택을 보면 ""trusting trust"" 문제를 우회할 수 있는 방법일 수 있음
          + 링크
     * QBE를 백엔드로 사용하는 것이 마음에 듦
          + Rust와 LLVM과의 비교를 보는 것이 흥미로울 것임
          + 행운을 빔
     * 부트스트랩 과정에 FORTH를 도구 체인의 일부로 사용하는 것을 고려할 수 있음
"
"https://news.hada.io/topic?id=16520","메이커 스킬 트리 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             메이커 스킬 트리 프로젝트

     * 실습 스킬 진행 상황을 안내하고 추적할 수 있는 인쇄 가능한 템플릿 모음
          + 박스를 색칠하면서 진행 상황을 기록하고 새로운 것을 시도할 수 있도록 영감을 줌
          + A4 또는 A3 크기로 인쇄 가능함
     * 각 스킬 트리는 기본 스킬에서 고급 스킬로 이어지는 73개의 육각형 타일로 구성
          + 5개의 타일은 개인의 관심사에 맞게 설정할 수 있음
          + 작은 Mini Skill Tree 템플릿도 있음.
     * Creative Commons Licence, CC BY-NC-SA 4.0 하에 배포됨. 비상업적 목적으로 공유, 수정, 리믹스 가능
     * 스킬 트리 생성기
          + 웹 앱을 통해 자신만의 스킬 트리 템플릿을 만들 수 있음
          + 개인 사용 또는 저장소에 추가하기 위해 템플릿 제작 가능

  아직 만들지 않은 스킬 트리 (44/60)

    클래식 스킬 (17/20)

     * ✅ 자동차
     * ☐ 대장장이
     * ✅ 보트 및 낚시
     * ☐ 도자기
     * ✅ 공예
     * ✅ 코바늘 뜨기
     * ✅ 춤
     * ✅ 자수
     * ✅ 집 짓기
     * ☐ 보석 만들기
     * ✅ 뜨개질
     * ✅ 금속 가공
     * ✅ 주조 및 캐스팅
     * ✅ 음악
     * ✅ 사진/비디오 촬영
     * ✅ 독서 및 글쓰기
     * ✅ 리노베이션 및 수리
     * ✅ 재봉
     * ✅ 시각 예술
     * ✅ 목공

    기술 스킬 (17/20)

     * ✅ 3D 모델링
     * ✅ 프랑스어 번역
     * ✅ 3D 프린팅
     * ☐ AI 및 머신러닝
     * ✅ 아마추어 라디오
     * ✅ CNC 및 CAM
     * ✅ 코딩
     * ✅ 미니 코딩 트리
     * ✅ 컴퓨팅
     * ✅ 개발 보드
     * ✅ 전자공학
     * ✅ 임베디드 시스템
     * ✅ 게임 개발
     * ☐ 게이밍
     * ✅ IT 보안
     * ✅ 레이저 커팅
     * ✅ 리눅스
     * ✅ PCB 디자인
     * ✅ 모바일 앱 개발
     * ☐ 연구 스킬
     * ✅ 로봇 공학
     * ✅ 웹사이트 구축

    생활 스킬 (10/20)

     * ✅ 모험
     * ☐ 동물 돌보기
     * ☐ 뒷마당 과학
     * ✅ 베이킹
     * ✅ 시민 및 커뮤니티
     * ✅ 청소
     * ✅ 요리
     * ☐ 음료
     * ✅ 기업가 정신
     * ☐ 환경 보호
     * ☐ 재정 관리
     * ☐ 발효 및 보존
     * ✅ 정원 가꾸기
     * ✅ 언어
     * ☐ 생활 관리
     * ☐ 자기 관리
     * ✅ 스포츠 및 피트니스
     * ☐ 생존 기술
     * ✅ 여행
     * ☐ 자원봉사

    기타 틈새 영역 및 제안

     * ✅ STEAM 스킬
     * ✅ 메이커스페이스 탐험
          + ✅ 3D 프린터, 3D 스캐너, 비닐 커터 및 전자 벤치가 있는 메이커스페이스
          + ✅ 3D 프린터, 3D 스캐너, 비닐 커터, 레이저 커터 및 전자 벤치가 있는 메이커스페이스
     * ✅ 3D 프린팅 및 3D 모델링 (이제 개별 영역으로 분리됨)
     * ✅ 롤러 더비
     * ✅ 던전 앤 드래곤
     * ✅ 만화가
     * ✅ 칵테일
     * ✅ 쿠버네티스
     * ✅ 스크래치
     * ☐ 테이블탑 게임
     * ☐ 비디오 게임
     * ☐ 가죽 공예
     * ☐ 부시크래프트
     * ☐ 채집
     * ☐ 생물학 실험
     * ☐ 빈티지 컴퓨팅
     * ☐ 사회적 기술
     * ☐ 등반
     * ☐ 직조
     * ☐ 요리 기술: 국가별 요리
     * ☐ 버섯 재배
     * ☐ 곤충 사육
     * ☐ 도시 정원 가꾸기
     * ☐ 학교 여름 캠프 계획
     * ☐ 학교 행사 조직
     * ☐ 호주 교사 전문 표준

GN⁺의 정리

     * Maker Skill Trees는 다양한 스킬을 체계적으로 학습하고 추적할 수 있는 유용한 도구임.
     * 개인의 관심사에 맞게 유연하게 목표를 설정할 수 있어 다양한 분야의 스킬을 시도해볼 수 있음.
     * 웹 앱을 통해 자신만의 스킬 트리를 쉽게 만들 수 있어 사용자 맞춤형 학습이 가능함.
     * Creative Commons 라이선스를 통해 비상업적 목적으로 자유롭게 공유 및 수정 가능함.
     * 비슷한 기능을 가진 프로젝트로는 Khan Academy의 학습 트리나 Coursera의 학습 경로가 있음.

        Hacker News 의견

     * ""House Building"" 항목에 배선, 배관, 석고보드, 도장, 마감 목공, 콘크리트, 바닥재 등의 작업이 포함될 줄 알았음
          + 대신 타당성 조사와 같은 내용이 주를 이룸
          + ""Renovation & Repair"" 항목은 여러 기술 세트를 하나로 묶어 전문가에게 맡기는 경향이 있음
          + 각 기술 세트는 복잡성이 있어, 예를 들어 콘크리트 작업은 다양한 기술이 필요함
          + 주거 코드와 허가를 모르는 상태에서 할 수 있는 작업을 문서화하려는 의도인지 궁금함
     * 이 아이디어는 훌륭하지만 실행이 부족함
          + 많은 전문가의 의견이 필요함
          + PCB 디자인 스킬 트리는 현실적이지 않음
          + ""Autorouting tool 사용""이 ""PCB 소프트웨어 학습"" 다음에 나와야 함
          + ""SMD PCB 설계""와 ""SMD 부품 손으로 납땜""이 같은 수준에 있음
          + ""리플로우 오븐 사용""이 ""픽 앤 플레이스 머신 사용""보다 두 단계 위에 있음
          + 경험에 따라 경로가 다르지만 ""SMD 핀셋 사용""은 ""SMD 부품 납땜""과 함께 있어야 함
     * 새로운 것을 배울 때는 역으로 접근함
          + 하고 싶은 일을 정하고, 그것을 달성하기 위해 필요한 것을 배움
          + 많은 기술이나 도구를 배우면 깊이가 얕아져 실질적인 성과를 내기 어려움
          + 컴퓨터 과학이나 머신 러닝에 미적분이 필수는 아니라고 생각함
          + 대부분의 사람들은 직접 손실 함수나 백프로프 라이브러리를 작성하지 않음
          + 필요하면 나중에 배울 수 있음
          + 불필요한 장벽 때문에 시작도 못하는 경우가 많음
     * 댓글과 스레드에 부정적인 반응이 많음
          + 새로운 기술을 경험해보는 것이 좋음
          + 접근 가능하고 개별적으로 연구할 수 있는 작업 단위를 만들려는 시도임
          + 꽤 괜찮다고 생각함
     * 스킬 트리 대신 업적이라고 불렀으면 좋겠음
          + 스킬 트리 구조와 다르기 때문에 혼란을 줄 수 있음
          + 목표는 모든 세그먼트를 채우는 것임
          + 그룹 환경에서 특정 작업에 대한 질문을 할 사람을 찾기 쉬움
     * 스킬 트리가 매우 형편없음
          + 컴퓨팅 스킬 트리는 키보드 타이핑을 도메인 구매, 이메일 도메인 설정, 웹사이트 제작, 블로그 작성, 컴퓨터 제작 후에 배움
          + 스킬의 진척도를 측정하는 방식이 무작위임
          + 트리가 아님
     * 스킬 트리가 기대를 충족시키지 못해 부정적인 피드백을 받음
          + 스킬 트리는 의존성 그래프여야 함
          + 이건 관련된 기술 세트를 난이도별로 쌓아놓은 템플릿임
          + ""Maker Skill Stacks""라고 부르는 것이 실망을 줄일 수 있음
     * 이 스킬 트리가 LLM의 출력물인지 궁금함
          + 익숙한 도메인에서는 순서가 이해되지 않음
          + 초보자가 이 트리를 따르면 금방 낙담하고 길을 잃을 것 같음
     * 노력은 칭찬하지만, 이 템플릿 스킬 트리는 좋지 않음
          + 트리 구조가 없어서 기술의 순서가 없음
          + 벽에 걸어놓기에는 좋지만, 현재 상태에서는 업적 리스트에 가까움
     * 스킬 트리가 아니라 빙고에 더 가까움
          + 기대했던 것은 https://roadmap.sh/와 같은 것임
"
"https://news.hada.io/topic?id=16496","메타의 CEO 주커버그, 콘텐츠에 대한 백악관의 압력에 굴복한 것을 후회한다고 표명 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             메타의 CEO 주커버그, 콘텐츠에 대한 백악관의 압력에 굴복한 것을 후회한다고 표명

     * 마크 주커버그는 Biden 행정부의 압력에 굴복하여 Covid-19 관련 콘텐츠를 검열한 것에 대해 유감을 표명함
          + 유머와 풍자를 포함한 특정 게시물을 검열하도록 고위 행정부 관계자들이 회사에 압력을 가했으며, Meta가 저항했을 때 ""많은 좌절감""을 표현했다고 주커버그는 설명함
          + 주커버그는 ""정부의 압력은 잘못된 것이었으며, 우리가 그에 대해 더 강력하게 대응하지 않은 것을 후회한다""고 말함
          + 앞으로 이와 같은 일이 다시 발생하면 Meta는 ""어느 행정부에서든 콘텐츠 기준을 타협하지 않을 것""이며 ""맞서 싸울 준비가 되어 있다""고 주커버그는 강조함
     * 주커버그는 FBI의 경고에 따라 2020년 대선 전 Hunter Biden 관련 New York Post의 보도 내용을 축소한 것에 대해서도 유감을 표명함
          + ""그 보도가 러시아의 허위정보가 아니었다는 것이 밝혀졌으며, 돌이켜보면 우리는 그 기사를 축소하지 말았어야 했다""고 그는 말함
     * Jim Jordan 의원이 이끄는 하원 사법위원회 공화당 의원들은 주커버그의 서한을 ""표현의 자유를 위한 큰 승리""라며 X에서 긴 연속 게시물로 환영함
     * 백악관은 Covid-19 정보에 대한 행정부의 접근 방식을 옹호하는 성명을 발표함
          + ""이 행정부는 치명적인 전염병에 직면했을 때 공중 보건과 안전을 보호하기 위한 책임 있는 행동을 권장했다""고 성명은 밝힘
          + ""우리의 입장은 명확하고 일관되다. 우리는 기술 기업과 다른 민간 행위자들이 그들이 제시하는 정보에 대해 독립적인 선택을 하는 동시에 그들의 행동이 미국 국민에게 미치는 영향을 고려해야 한다고 믿는다""고 성명은 덧붙임
     * 주커버그는 지난 대선 주기에 선거 인프라에 자금을 지원한 것을 반복하지 않을 것이라고 말함
          + 그의 목표는 ""중립적이고 어느 한쪽으로 역할을 하지 않는 것""이며, ""그렇게 보이는 것조차도 하지 않는 것""이라고 함
          + 따라서 ""이번 선거 주기에는 유사한 기부를 할 계획이 없다""고 주커버그는 밝힘

GN⁺의 의견

     * 이 기사는 소셜 미디어 플랫폼이 정부의 압력에 굴복하여 콘텐츠를 검열하는 문제와 그에 대한 Meta CEO의 입장을 다루고 있어 흥미로움
     * 그러나 주커버그의 유감 표명이 진정성이 있는지, 아니면 정치적 압력에 대한 반응인지에 대해서는 의문이 제기될 수 있음
     * 콘텐츠 검열 문제는 표현의 자유와 공공의 이익 사이의 균형을 맞추는 것이 중요한 과제임. 이에 대해 사회적 합의를 도출하기 위한 폭넓은 논의가 필요할 것으로 보임
     * 한편, 선거 인프라 기부 중단 계획은 정치적 중립성을 지키려는 주커버그의 의지로 해석될 수 있음. 그러나 이것이 실질적인 변화로 이어질지는 지켜볼 필요가 있음
     * 소셜 미디어 기업들이 정치적 압력에 휘둘리지 않고 공정하고 투명한 정책을 수립하고 실행하는 것이 중요함. 이를 위해 시민사회와 정부, 기업 간의 건설적인 대화와 협력이 필요할 것임

        Hacker News 의견

     * Facebook의 뉴스 피드는 최근 몇 년 동안 AI와 클릭베이트로 가득 차서 사용할 수 없게 됨
     * Twitter도 스팸과 클릭베이트를 제거하기 위해 차단과 음소거 기능을 적극적으로 사용해야 함
     * 이러한 변화가 정책 변경 때문인지 AI의 영향 때문인지 확실하지 않음
     * Pavel의 인터뷰에서 Zuckerberg가 새로운 기능을 도입할 계획을 이야기했는데, Zuckerberg가 모두 도용했음
     * Zuckerberg의 PR 캠페인을 신뢰할 수 없음
     * Harris 캠페인의 제안된 정책인 1억 달러 이상의 자산을 가진 사람들에 대한 미실현 이익에 대한 자본 이득세가 선거 전에 등장한 이유를 궁금해 함
     * 이러한 사람들이 세금을 피하기 위해 주식 포트폴리오를 담보로 대출을 받는 것을 고려할 때 좋은 아이디어라고 생각함
     * 팬데믹과 지난 선거 주기 동안 플랫폼이 검열을 시작했을 때, 100% 정확하지 않으면 신뢰성이 떨어질 것이라고 생각했음
     * 법적으로 요구되는 것 이상의 검열은 실패할 운명임
     * Zuckerberg의 편지에서 배운 것이 없다는 느낌을 받음
     * 공화당에게 중립적이라는 신호를 보내기 위한 편지로 보임
     * Paul Graham의 최근 트윗에서 다음 소셜 네트워크가 트롤링을 방지하기 위해 설계될 것이라는 언급을 생각하게 됨
     * 이번에는 실험실 유출 이론과 같은 문제가 소셜 미디어에서 검열된 것에 대한 유효한 우려가 있었음
     * 다음 위기에서는 소셜 미디어가 거의 쓸모없을 것이라고 예측함
     * 선거 주기 끝에 정치적이지 않다고 발표했지만, 당연히 정치적임
     * Hacker News에서 ""moderated""된 내용을 보려면 사용자 이름을 클릭하고 ""showdead""를 켜야 함
     * 이 스레드에는 많은 ""dead"" 게시물이 있음
     * Zuckerberg는 정권 교체를 예상하며 자신의 행동의 잠재적 결과를 최소화하려고 함
     * 행동이 말보다 더 중요함
     * Facebook에 로그인하면 Zuckerberg가 보여주고 싶은 것을 볼 수 있음
     * 대부분 스팸과 쓰레기임
     * Brexit에 불을 지른 것에 대해 후회하지 않음
     * 자신의 재산을 보호할 위험이 있을 때만 걱정함
     * 미국의 비즈니스 커뮤니티가 민주당에 맞서 단결하는 것을 지켜보는 것이 흥미로울 것임
"
"https://news.hada.io/topic?id=16467","Lidl의 클라우드 도전: 유럽의 주권 컴퓨팅으로의 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Lidl의 클라우드 도전: 유럽의 주권 컴퓨팅으로의 전환

     * Financial Times에 따르면, 유럽의 할인 소매업체 Lidl이 클라우드 컴퓨팅 분야에 진출함
     * Lidl의 모회사 Schwarz Group은 내부 IT 부서인 Schwarz Digits를 독립 운영 부서로 분리하여 AWS와 경쟁함
     * 이는 유럽에서 주권(Sovereign) 클라우드 컴퓨팅으로의 전환의 일환

    변화의 조짐: AWS의 서비스 축소

     * AWS의 변화
          + AWS는 Cloud9, SimpleDB, CodeCommit 등의 서비스를 조용히 중단함
          + Amazon, Google, Microsoft, Alibaba 등은 모든 기술 영역과 지역을 커버할 수 없음을 인식함
     * 유럽의 데이터 보호 우선
          + 독일과 오스트리아를 중심으로 유럽 국가들은 엄격한 개인정보 보호법을 우선시함
          + GDPR 준수는 필수이며, 기업들은 유럽 내에서 운영되는 클라우드 서비스를 요구함
          + 유럽은 자체 ""EuroCloud""를 찾고 있음
     * 구체적인 조치
          + EU는 Gaia-X와 같은 이니셔티브를 통해 주권적이고 안전하며 유럽 규정을 준수하는 클라우드의 프레임워크를 설정함

    Lidl의 클라우드 도전

     * Schwarz Digits의 성장
          + Schwarz Digits는 작년에 19억 유로의 매출을 기록하고 SAP와 Bayern Munich과 같은 주요 고객을 확보함
          + StackIT 페이지에는 기본 컴퓨팅-네트워크-스토리지부터 관리형 데이터베이스, 메시징, Kubernetes, 모니터링, 보안 등 다양한 서비스가 나열됨
     * AWS의 대응
          + AWS는 최근 78억 유로를 투자하여 유럽 주권 클라우드를 발표함
          + 첫 번째 지역은 2025년 말까지 독일에서 출시될 예정임
          + AWS는 유럽 기업들의 신뢰를 회복하기 위해 노력 중임
     * 가격 경쟁
          + Lidl은 저가의 식료품으로 소매 시장을 교란시켰음
          + Schwarz Digits를 통해 클라우드 컴퓨팅에서도 저가의 EuroCloud 대안이 될 수 있을지 주목됨
          + AWS는 새로운 유럽 주권 클라우드가 동일한 수준의 신뢰, 보안, 경제성을 제공할 수 있음을 입증해야 함
     * 시장 변화
          + 일괄 클라우드 서비스의 시대는 끝나가고 있음
          + Schwarz Digits와 같은 지역 특화 제공업체들이 글로벌 대기업들이 남긴 공백을 채우고 있음

    GN⁺의 정리

     * Lidl의 클라우드 도전은 유럽의 주권 클라우드 컴퓨팅으로의 전환을 보여줌
     * GDPR 준수와 데이터 보호가 중요한 이슈로 떠오르며, 유럽 내에서 운영되는 클라우드 서비스에 대한 수요가 증가함
     * Schwarz Digits는 주요 고객을 확보하며 빠르게 성장하고 있음
     * AWS는 유럽 주권 클라우드로 대응하고 있지만, 신뢰와 경제성에서 경쟁력을 입증해야 함
     * 시장은 점점 더 지역 특화 제공업체로 분화되고 있음

        Hacker News 의견

     * Gaia-X는 재앙임. 기사는 이를 잘못 표현함. Gaia-X는 유럽 클라우드의 기술 표준이 아닌, 유럽 클라우드가 어떻게 생길 수 있는지에 대한 대화의 틀임
          + 기술 표준에 관한 것이 아니라, 표준을 논의하는 방법에 대한 것임
          + 이는 EU의 관료주의적 문제를 상징함
     * 유럽 클라우드 서비스를 운영하는데, 고객의 80%가 대형 클라우드의 유럽 대안을 찾고 있음. 시장은 크고 충분히 서비스되지 않음
          + 경쟁하기 위해 많은 혁신이 필요하지 않음
     * STACKIT는 Lidl 클라우드임. 두 회사는 Schwarz Gruppe의 일부임
          + STACKIT의 서비스는 기업만 이용 가능하며, 먼저 연락해야 함
          + 몇 년 전 STACKIT에 대한 논의가 있었음
          + Gaia-X에 대한 정보는 공식 웹사이트에서 찾기 어려움
     * AWS는 유럽 주권 클라우드에 78억 유로를 투자할 계획임. 그러나 CLOUD Act와 FISA 때문에 유럽 기업의 신뢰를 회복하기 어려움
     * 새로운 클라우드 서비스가 AWS, GCP, AZ와 경쟁할 수 없음. DigitalOcean과 비교할 수 있음
          + DigitalOcean이 필요하다면 이 서비스를 사용할 수 있음
          + 대기업들이 자체적으로 클라우드 서비스를 운영하는 이유는 주로 레거시 시스템 때문임
          + 충분한 지역과 확장성이 있다면, 데이터센터-인-더-클라우드로 사용할 수 있음
     * Schwarz Gruppe는 OEDIV의 대안이 되려는 의도임. OEDIV의 데이터센터는 작지만 고품질임
          + OEDIV의 데이터센터 투어 비디오가 있음
     * Hetzner는 자리를 지키고 있음. 그러나 미국 대형 기술 기업의 규모 효과를 이기기 어려움
     * OVH와 Scaleway는 이미 프랑스에 있음. 유럽 주권 클라우드라는 용어는 불필요함
     * SAP 마이그레이션 실패 사례가 있음
     * 유럽에서 기술 개발이 어려운 이유는 낮은 연봉과 DACH 지역의 영향 때문임
"
"https://news.hada.io/topic?id=16439","Aerc: 잘 만들어진 이메일용 TUI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Aerc: 잘 만들어진 이메일용 TUI

  Aerc: 잘 만들어진 TUI 이메일 클라이언트

     * Aerc는 TUI 이메일 클라이언트로, 약 4년 전에 첫 출시됨
     * Pine(1992년 출시)나 Mutt(1995년 출시)와 같은 경쟁자들에 비해 상대적으로 신생임
     * 처음에는 Thunderbird에 만족했기 때문에 무시했으나, 최근에 다시 사용해보니 성숙해졌고 일상적으로 사용하기에 충분한 기능을 갖추었음
     * Neomutt를 사용하려다 포기한 경험이 있어 큰 기대 없이 접근했으나, 기대 이상으로 만족스러웠음

    문서화

     * :help 명령어를 통해 내장된 도움말 기능을 사용할 수 있음
     * 튜토리얼은 가장 중요한 기능과 키 바인드를 간결하게 설명하여 빠르게 설정할 수 있게 도와줌
     * 모든 도움말 문서는 man 페이지로 제공되며, 이는 TUI 애플리케이션 내에서 ""휴대용"" 도움말 시스템을 제공하는 좋은 방법임

    계정 설정

     * 간단하고 직관적인 마법사를 통해 계정을 쉽게 추가할 수 있음
     * 설정 파일(~/.config/aerc/accounts.conf)은 간단한 INI 구문을 사용하여 읽고 수정하기 쉬움
     * 폴더 관리 옵션(folders-sort와 folder-map)이 특히 유용함

      folders-sort

     * 특정 폴더의 자동 정렬을 재정의할 수 있음
     * 지정된 폴더는 폴더 목록의 상단에 표시되며 나머지는 알파벳 순으로 정렬됨

      folder-map

     * 다양한 이메일 제공자의 폴더 구조 문제를 해결하는 기능
     * 서버 폴더를 표시된 폴더 이름으로 매핑하는 파일을 사용하여 유연한 재매핑 시스템을 제공함

    이메일 보기

     * HTML 이메일 때문에 이메일 보기 경험이 다소 미흡함
     * HTML 파서/브라우저(w3m과 dante 조합)를 통해 이메일을 볼 수 있음
     * 기본 웹 브라우저에서 이메일을 열 수 있는 옵션도 제공됨

    이메일 작성

     * vim에서 이메일을 작성할 수 있어 매우 만족스러움

    주소록

     * 외부 프로그램을 통해 주소록을 관리할 수 있음
     * 기본 프로그램인 abook은 비ASCII 문자를 지원하지 않아 불편했음
     * emailbook-janet을 사용하여 문제를 해결함

    PGP 지원

     * Thunderbird의 PGP/GPG 지원 문제를 해결함
     * 기본적으로 GPG 키체인을 사용하며, 특정 키 ID를 설정하거나 이메일로 키를 조회할 수 있음

    일반 설정

     * 서명 파일을 포함할 수 있으며, 외부 명령어를 실행하여 서명을 생성할 수 있음
     * 이메일 템플릿을 지원함
     * 이메일 제목에서 'Re:' 접두사를 지능적으로 제거함
     * 첨부 파일 알림 기능을 제공하며, 이는 정규 표현식을 사용하여 쉽게 확장할 수 있음

  GN⁺의 정리

     * Aerc는 TUI 기반의 이메일 클라이언트로, 간단하고 직관적인 계정 설정과 유연한 폴더 관리 기능을 제공함
     * HTML 이메일 보기에는 다소 불편함이 있으나, 다양한 방법으로 이를 보완할 수 있음
     * vim을 사용한 이메일 작성과 외부 프로그램을 통한 주소록 관리가 가능함
     * PGP 지원이 잘 되어 있으며, 일반 설정에서 서명 파일과 이메일 템플릿을 사용할 수 있음
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Mutt와 Neomutt가 있음

        Hacker News 의견

     * Aerc를 오랫동안 사용해왔음
          + IMAP(GMail 등)과 로컬 메일 디렉토리 모두 사용 가능함
          + Vim과 유사한 키바인딩으로 재정의하여 빠르게 메일을 처리함
          + Gmail과 Imapfilter와 함께 Aerc를 설정함
          + 특정 필터를 만들어 사용함
               o ff = :filter -f ""current sender""
               o fs = :filter -H subject:""current subject""
               o fS = :filter -H subject: ""subject containing foo""
     * Mutt를 깊이 탐구했으나, 그래픽 이메일 클라이언트가 더 적합함을 발견함
          + Mutt/aerc는 Windows를 지원하지 않음
          + HTML 이메일 보기 및 전송을 지원하지 않음
          + Betterbird가 더 빠르고 설정이 간편함
          + Betterbird는 OAuth를 기본적으로 지원함
          + Betterbird는 shift+click으로 평문 텍스트 사용 가능함
          + 터미널을 좋아하지만, 이메일 작업은 더 이상 터미널에서 하지 않음
          + Newsboat를 RSS 리더로 사용 중임
     * 터미널 기반 이메일 클라이언트가 매력적이지만, 이메일 작업은 터미널에서 하고 싶지 않음
          + 터미널은 집중과 즐거움을 위한 공간임
          + 이메일 작업은 지루한 일임
     * 여러 GMail 탭을 열어두는 것이 싫어서 Aerc를 설정함
          + Notmuch 백엔드와 lieer 또는 mbsync를 사용하여 메일을 동기화함
          + 설정하는 데 시간이 걸렸지만, 이전 워크플로우보다 훨씬 즐거움
          + 메모리 사용량이 적고, 로컬 검색이 빠르고 품질이 좋음
     * 현대 텍스트 기반 프로젝트를 사랑하며, 터미널을 계속 유지해줘서 감사함
     * Emacs와 mu4e를 사용하여 이메일을 읽는 방법을 시연하는 영상을 봄
          + HTML을 Firefox로 보내서 보거나 PDF로 변환하여 봄
     * Terminal Trove에 Aerc를 등록하고 설치 방법을 기록함
          + Aerc 링크
          + 이메일용 TUI 목록
     * Aerc는 클라이언트로 설계되어 메일을 컴퓨터에 저장하지 않음
          + 성능 문제와 제한이 있음
          + IMAP이 자주 끊기고 다시 시작해야 함
          + Neovim과 Aerc의 단축키 겹침 문제 있음
          + 현재는 Neomutt에 더 희망적임
     * ""TUI""가 무엇인지 설명이 없음
          + ""text user interface""로 이해함
     * Thunderbird에 묶여 있음
          + Thunderbird의 데이터베이스로 TUI를 개발할 수 있을지 궁금함
"
"https://news.hada.io/topic?id=16440","링커 작동 방식 심층 분석 (2008)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         링커 작동 방식 심층 분석 (2008)

    20부작 링커 에세이 목차

     * 소개, 개인 역사, 링커란 무엇인가의 첫 번째 절반
     * 링커란 무엇인가: 동적 링크, 링커 데이터 타입, 링커 작동
     * 주소 공간, 객체 파일 형식
     * 공유 라이브러리
     * 더 많은 공유 라이브러리 - 특히 링커 구현; ELF 심볼
     * 재배치, 위치 의존적 공유 라이브러리
     * 스레드 로컬 스토리지(TLS) 최적화
     * ELF 세그먼트와 섹션
     * 심볼 버전, 릴렉세이션 최적화, 병렬 링크
     * 아카이브 형식
     * 심볼 해석
     * 사용자 관점에서의 심볼 해석; 정적 링크 대 동적 링크
     * 링크 타임 최적화, 즉 전체 프로그램 최적화; 초기화 코드
     * COMDAT 섹션
     * C++ 템플릿 인스턴스화, 예외 프레임
     * 경고 심볼, 증분 링크
     * __start와 __stop 심볼, 바이트 스와핑
     * 마지막 게시물; gold의 상태 업데이트

    GN⁺의 정리

     * 이 글은 Ian Lance Taylor의 20부작 링커 에세이의 목차를 제공함.
     * 링커의 다양한 측면을 다루며, 동적 링크, 객체 파일 형식, 공유 라이브러리 등 다양한 주제를 포함함.
     * 개발자들이 링커의 작동 원리와 최적화 방법을 이해하는 데 유용함.
     * 비슷한 기능을 가진 프로젝트로는 GNU Binutils의 gold 링커가 있음.
"
"https://news.hada.io/topic?id=16417","미국 병원, 가족에게 딸이 퇴원했다고 알렸지만 실제로는 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   미국 병원, 가족에게 딸이 퇴원했다고 알렸지만 실제로는 사망

    캘리포니아 병원, 딸이 퇴원했다고 가족에게 알렸으나 사실은 사망

     * 제시 피터슨의 가족이 1년 동안 그녀를 찾음
          + 제시 피터슨(31세)의 가족은 그녀가 캘리포니아 병원에서 의료 조언을 무시하고 퇴원했다고 들은 후 1년 동안 그녀를 찾음
          + 그녀는 2023년 4월에 사망했으며, 병원은 그녀의 시신을 보관 시설로 보냈으나 가족에게 알리지 않음
          + 가족은 2024년 4월에야 그녀의 사망 사실을 알게 됨
     * 병원에 대한 소송
          + 가족은 병원을 상대로 소송을 제기하며 병원의 행동을 ""악의적이고 터무니없음""이라고 비난
          + 병원은 시신을 부적절하게 처리하고 가족에게 감정적 고통을 초래한 과실을 저질렀다고 주장
     * 제시 피터슨의 상태
          + 제시는 1형 당뇨병을 앓고 있었으며, 2023년 4월 6일 당뇨병 발작으로 병원에 입원
          + 그녀의 어머니는 제시가 퇴원할 준비가 되었다고 전화로 알렸으나, 병원은 그녀가 의료 조언을 무시하고 퇴원했다고 기록
     * 가족의 노력
          + 가족은 제시를 찾기 위해 전단지를 배포하고, 노숙자들과 대화하며, 경찰과 검시관 사무실에 연락
          + 2024년 4월 12일, 사크라멘토 카운티 탐정 사무실에서 제시가 병원에서 사망했다고 통보
     * 병원의 대응
          + 병원은 가족의 연락에 응답하지 않았으며, 결국 장례식장에서 제시의 시신이 병원의 외부 보관 시설에서 발견되었다고 알림
          + 시신이 너무 부패하여 지문을 채취할 수 없었고, 공개 관 장례식을 할 수 없었음
     * 소송의 내용
          + 병원은 사망 증명서 발급 지연, 가족에게 사망 통보 실패, 부검 불가 및 시신 처리 부주의로 비난받음
          + 가족은 500만 달러 이상의 손해 배상과 변호사 비용을 청구
     * 병원의 입장
          + Mercy San Juan 병원을 운영하는 Dignity Health는 ""가족에게 깊은 애도를 표한다""며 소송에 대한 언급을 피함

    GN⁺의 정리

     * 이 기사는 병원의 부주의와 가족의 고통을 다루고 있음
     * 병원의 시신 처리 방식과 가족에게 사망 사실을 알리지 않은 점이 문제로 지적됨
     * 비슷한 사건이 발생하지 않도록 병원의 시스템 개선이 필요함
     * 이 사건은 병원 관리와 환자 가족 간의 소통의 중요성을 강조함

        Hacker News 의견

     * 병원들이 중요한 사항들을 제대로 관리하지 못하는 경우가 많음
          + 친척이 심각한 금단 증상으로 병원에 자진 입원했으나, 병원에서 강제로 퇴원시킴
          + 병원은 그의 어머니에게 연락하지 않았고, 결국 그는 실종된 후 강에서 시신으로 발견됨
          + 이런 상황에서 강제 퇴원시키고 비상 연락처에 연락하지 않는 것은 믿기 어려운 일임
     * 개인적인 이야기:
          + 몇 년 전 Mt Whitney를 등반한 사람이 실종되었고, 가족이 걱정하여 수색 구조가 이루어짐
          + 결국 그는 등반 당일 급성 부상으로 사망한 것으로 밝혀짐
          + 다른 상황이었다면 이틀의 차이가 생존과 사망을 가를 수 있었을 것임
     * 기사 제목이 단순한 오해나 사무적 오류로 예상했으나, 실제 내용은 훨씬 심각함
          + 가족에게 애도를 표함
     * 사건의 타임라인을 보면 어두운 면이 있을 것 같음
          + 딸이 퇴원하기 이틀 전에 어머니에게 전화를 걸어 상태가 좋아졌다고 말함
          + 이후 병원에서 그녀를 외부 시체 안치소로 옮기고 사망 증명서도 작성하지 않음
          + 시신이 부패하여 부검이 불가능해짐
     * 병원이 실수로 그녀를 죽였을 가능성을 제기함
          + 병원이 그녀를 빈곤하거나 정신적으로 문제가 있는 사람으로 생각했을 수 있음
          + 병원이 16개월 동안 증거를 파괴하고 이야기를 꾸며냈을 가능성이 있음
     * 병원 소프트웨어에 대해 배운 경험을 공유함
          + 병원 소프트웨어 개발자들이 CI, git, 비밀 관리 등에 대해 잘 모름
          + 많은 병원 소프트웨어가 Microsoft 기반 개발에 의존하고 있음
          + 이런 소프트웨어가 실제 운영과 환자 관리에 사용되고 있음
     * 미국의 의료비가 세계에서 가장 비싸지만, 그만큼 품질이 높다고 생각함
     * 유럽 주요 국가에서 이런 일이 발생했다면 신문과 뉴스에서 며칠 동안 보도되었을 것임
          + 미국에서는 건강 부문이 대부분 민영화되어 있어 더 효율적이어야 하지만, 유럽 기준에 비해 완전히 실패한 것임
     * 병원 관리:
          + ""책임을 제한하기 위해 새로운 시스템이나 양식을 추가해야 함. 이번에는 전자 서명이 해결책임""
"
"https://news.hada.io/topic?id=16515","COSMIC Alpha 출시lpha 출시

COSMIC Alpha 출시! 사람들의 반응

     * COSMIC의 알파 버전이 출시되었음. Pop!_OS와 다른 리눅스 배포판을 위한 새로운 데스크탑 환경임.
     * 새로운 기능, 커스터마이징, 성능, 안정성, 보안을 추가함.
     * 알파 버전이므로 버그가 있을 수 있으며, 버그 리포트와 사용자 테마 및 패널 스크린샷을 환영함.
     * 일상적인 사용을 위해 대부분의 기능이 다듬어져야 했음. 그러나 공식 출시 전까지는 일부 치명적인 버그가 있을 수 있으므로, 현재는 프로덕션 사용을 권장하지 않음.

  Pop!_OS에서 COSMIC 사용하기

     * Intel/AMD ISO 다운로드
          + sha256sum: 894bc15abcad05839b226655121a113ad16cfbc4ada98e93e3ffb74a853fdcd4
     * NVIDIA ISO 다운로드
          + sha256sum: 3d636b705c1049395d50bbb5acd7c709fd871de78e4d95d297bcbdab7cae4e05

  좋아하는 배포판에서 COSMIC 사용하기

     * Fedora, NixOS, Arch, OpenSUSE 등 다양한 배포판에 COSMIC을 설치하는 방법이 제공됨.

  첫 인상

     * 여러 리눅스 커뮤니티에서 COSMIC 알파 ISO를 사용해본 후 긍정적인 피드백을 받았음.
          + ""저사양 시스템에서도 놀라울 정도로 빠름."" — Linux Unplugged podcast
          + ""기초가 매우 탄탄하며, 1~2년 내에 기본 데스크탑으로 추천될 가능성이 높음."" — The Linux Experiment
          + ""파워 유저에게 매우 유망함."" — Michael Tunnell
          + ""초기 알파 단계에서도 다른 시스템에 비해 반응이 빠르고 일관성이 있음."" — Ars Technica
          + ""인기가 많아질 것 같음."" — GamingOnLinux
          + ""Pop!_OS 24.04 알파를 사용해봤는데, 잘 작동함."" — Phoronix
          + ""알파 태그에도 불구하고 일상적인 사용에 적합함."" — OMG!Ubuntu
          + ""2년 동안 많은 발전을 이룸."" — Gardiner Bryant
          + ""사용자 경험을 개선하는 데 집중함."" — SavvyNik
          + ""키보드 단축키로 창과 작업 공간을 쉽게 전환할 수 있음."" — It’s FOSS
          + ""수직 또는 수평 작업 공간, 통합 타일링 시스템, 커스터마이징 가능한 패널을 제공함."" — How-To Geek
          + ""기능이 좋고, 외관도 훌륭하지만 버그가 있을 수 있음."" — Learn Linux TV
          + ""Q&A 후 더 기대됨."" — Brodie Robertson
          + ""Pop!_OS 24.04 LTS의 새로운 COSMIC 데스크탑 환경은 장기적인 발전을 위한 견고한 기초를 제공함."" — 9to5Linux
          + ""COSMIC은 현대적이고 커스터마이징 가능하며 성능이 뛰어난 데스크탑 환경임."" — OSTechnix
          + ""몇 초 만에 집에 온 듯한 느낌을 줌."" — Linuxiac
          + ""이전 Pop!_OS 인터페이스에 비해 더 현대적이고 사용자 친화적인 경험을 제공함."" — Nix Sanctuary

  디자인 시스템

     * COSMIC의 외관과 느낌을 결정하는 디자인 시스템이 있음. 이는 타이포그래피, 색상 및 테마 시스템, 간격, 코너 반경, 크기 등을 포함함.
     * 공식 디자인 시스템을 제공하여 앱이나 애플릿을 만드는 사람들에게 가이드 역할을 함.

  앱 및 애플릿 템플릿

     * COSMIC을 위한 앱 개발 시 포함해야 할 항목을 정리한 공식 앱 템플릿을 완료함.
     * COSMIC 애플릿 템플릿도 제공하여 새로운 애플릿을 쉽게 만들 수 있음.

  Pop!_OS 24.04 LTS

     * COSMIC 알파는 최신 Pop!_OS 24.04 LTS의 알파 버전이기도 함.
     * COSMIC Epoch 1이 공식 출시되면 정상적인 업그레이드 경로를 통해 업그레이드 가능함.

  날짜 및 시간 설정

     * 날짜, 시간, 시간대를 조정하는 설정이 구현됨. 선택한 시간대에 따라 자동으로 시간이 설정됨.

  화면 캡처

     * xdg-desktop-portal 화면 캡처 기능을 통해 특정 창을 선택하여 녹화할 수 있음.

  터치패드 기본 설정

     * 컴포지터에 탭-투-클릭 설정과 타이핑 중 터치패드 비활성화 기본 설정이 추가됨.

  ISO 빌드

     * COSMIC 알파를 마무리하며 ISO 파일의 설치 테스트를 진행함. 이 과정에서 화상 회의 앱에서 화면 공유 기능이 작동함.

  여러분의 기여

     * Koranir: Super + 오른쪽 클릭 + 드래그로 창 크기 조절 기능 추가
     * leb-kuchen: 타이틀 바 더블 클릭으로 창 최대화 기능 추가 및 최소화/최대화 버튼 버그 수정

  COSMIC 홍보대사 되기

     * COSMIC 홍보대사는 COSMIC에 기여하거나 소셜 미디어에서 홍보하는 사람들임. 무료 굿즈도 제공됨.
     * 짧은 양식을 작성하여 홍보대사가 될 수 있음.

  도움을 줄 수 있는 분야

     * 시스템 및 계정 > 사용자
     * 지역 및 언어
     * 데스크탑 > 창 관리
     * 네트워크 및 무선
     * 블루투스
     * 전원 및 배터리
     * OS 업데이트 및 복구
     * 기본 애플리케이션

GN⁺의 정리

     * COSMIC 알파 버전은 Pop!_OS와 다른 리눅스 배포판을 위한 새로운 데스크탑 환경임.
     * 사용자 경험을 개선하고 커스터마이징 가능성을 높이는 데 중점을 둠.
     * 다양한 리눅스 커뮤니티에서 긍정적인 피드백을 받았으며, 앞으로의 발전 가능성이 큼.
     * COSMIC의 디자인 시스템과 앱 템플릿은 개발자들이 일관된 사용자 경험을 제공하는 데 도움을 줌.
     * COSMIC 홍보대사가 되어 프로젝트에 기여하거나 홍보할 수 있음.

        Hacker News 의견

     * Iced라는 Rust 기반의 크로스 플랫폼 UI 프레임워크에 대한 기대감이 있음
          + Rust로 데스크탑 앱을 작성하려고 했고, Tauri, Flutter, Iced를 고려했음
          + Iced가 더 많은 채택을 받으면 주류가 될 가능성이 있음
          + GPUI도 흥미로웠지만 현재 활동이 적음
     * VM에서 Cosmic을 시도했으나 알파 상태가 명확히 드러남
          + 설정이 버그가 많고, 데스크탑이 깨지는 문제 발생
          + 재부팅 후에도 복구 불가, 문서화 부족으로 시스템 재설치 필요
          + 이전 Gnome 버전의 많은 설정과 기능이 누락됨
     * Pop!_OS를 3년 동안 사용 중이며, 데스크탑 환경이 괜찮음
          + Cosmic의 진행 상황을 캐주얼하게 팔로우 중
          + 현재 데스크탑의 개선된 버전으로 보임
          + 비조기 채택자에게는 아직 멀었다고 생각함
     * Cosmic 알파를 사용해봤으나 일상적으로 사용하기에는 부족함
          + 시계가 요일과 연도를 표시하지 않음
          + 타이틀 바 크기 조절 불가
          + 마우스 커서 테마 변경 불가
          + 동적 워크스페이스가 싫음
          + 독립적인 모니터별 워크스페이스는 좋음
          + 대부분의 키보드 단축키가 Super 키를 사용함
          + 커서가 있는 모니터에서 앱을 실행하면 해당 모니터에서 열림
     * Fedora에서 Cosmic 알파를 사용 중이며 만족함
          + 작은 버그가 있지만 큰 문제는 없음
          + KDE에서 벗어나게 만든 첫 데스크탑임
     * 오픈 소스 소프트웨어에서 ""처음부터 다시 시작""하는 것은 좋지 않음
          + Node가 Bun과 Deno로 인해 개선된 것처럼 경쟁이 필요함
          + Cosmic 데스크탑의 포크가 Gnome의 혁신 속도를 높일 수 있을 것임
     * 좋은 Linux 노트북 추천을 찾고 있음
          + Framework, System76, Thinkpads 리뷰를 봤으나 불만이 있음
          + M1 Air와 Asahi 조합이 괜찮은지 궁금함
     * Windows를 버리고 Linux 배포판을 탐색한 경험이 있음
          + PopOS를 좋아했지만 GNOME 확장성 문제로 Fedora를 선택함
          + 가족을 위해 Linux를 설치한다면 ZorinOS가 좋음
     * Cosmic이 Gnome/Plasma의 독점을 깨뜨릴 잠재력에 기대감이 있음
          + 데스크탑의 시각적 디자인에는 아직 확신이 없음
     * Fedora에서 Cosmic을 사용해봤으며 빠르고 안정적이지만 미완성 느낌이 있음
          + KDE Plasma 6에 익숙해서 그런 것일 수도 있음
          + Electron 및 X11 앱의 블러리 문제 있음
          + Plasma는 이 문제를 해결한 유일한 DE임
"
"https://news.hada.io/topic?id=16472","코드 리뷰 안티패턴들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              코드 리뷰 안티패턴들

     * 코드 리뷰는 좋은 아이디어 같죠?
          + 코드 리뷰로 두 명의 개발자가 코드를 보면서 문제를 발견하고, 프로젝트의 발전 과정에 대한 이해를 공유하는 기회가 생김
          + 리뷰어는 작성자의 코드를 자세히 보면서 유용한 트릭을 배우거나, 작성자에게 유용한 트릭을 알려줄 기회를 발견할 수 있음
     * 그러나 이는 '라이트 사이드' 코드 리뷰어들이 사용하는 방식임. 코드 리뷰를 코드 개선과 개발자들의 집단적 기술 향상을 위해 사용하는 것임
     * 코드 리뷰는 완전히 다른 목적을 위한 강력한 도구가 될 수도 있음. 리뷰어가 '다크 사이드'로 전환한다면, 코드 개선을 방해하거나 지연시킬 수 있는 다양한 방법을 사용할 수 있음
          + 패치 작성자를 괴롭히거나 완전히 좌절시키는 등 다른 개인적인 목적을 추구할 수도 있음
     * 최근에 '다크 사이드'로 전환한 리뷰어라면 아직 모든 가능성을 생각해보지 않았을 수도 있음
          + 그래서 이 글에서는 다크 사이드 코드 리뷰어들을 위한 안티패턴 리스트를 제시함

[안티패턴]

  The Death of a Thousand Round Trips

     * 코드를 읽으면서 사소한 것을 발견하자마자 리뷰 댓글로 지적하고, 그 즉시 읽기를 중단함
     * 개발자는 성실하게 그 사소한 것을 고치고 수정된 패치를 제출함
     * 리뷰어는 그 버전을 읽기 시작하고, 또 다른 사소한 것을 발견함. 첫 번째 리뷰에서 언급할 수 있었지만 그러지 않았음. 그 사소한 것을 지적하고 다시 읽기를 중단함
     * 이를 개발자가 희망을 잃을 때까지 반복함

  The Ransom Note

     * 이 패치가 개발자에게 특별히 중요한 것 같음
     * 그러나 리뷰어에게는 그렇게 중요하지 않음. 따라서 리뷰어는 권력 위치에 있음
     * 개발자가 원하는 변경 사항을 리뷰어에게 중요한 추가 작업들이 완료될 때까지 인질로 잡아둘 수 있음
          + 추가 작업은 실제로 동일한 커밋에 포함될 필요는 없지만 리뷰어에게는 중요한 작업임

  The Double Team

     * 하나의 패치, 두 명의 리뷰어
     * 한 리뷰어가 변경을 요구할 때마다 개발자는 순순히 변경함. 그러면 다른 리뷰어가 불평할 차례가 됨
     * 리뷰어들은 번갈아가며 서로 상충되는 요구사항을 제시함
          + 하지만 항상 개발자를 향해 코멘트를 함. 리뷰 스레드에서 서로 직접 논쟁하는 것은 피함
     * 개발자가 포기할 때까지 리뷰어들이 개발자를 앞뒤로 몇 번이나 튕겨낼 수 있는지 보는 것임

  The Guessing Game

     * 문제가 있고, 그 문제를 해결할 수 있는 다양한 방법이 있음
     * 개발자는 한 가지 해결책을 선택하고 패치를 제출함
     * 리뷰어는 그 특정 솔루션을 문제 해결 여부와 무관한 이유로 비판함
          + 애매모호한 설계 원칙 위반이나 미래 개발 계획과의 비호환성 등을 이유로 삼음
     * 비판을 충분히 모호하게 하면 개발자는 기존 패치를 어떻게 수정해야 비판을 해결할 수 있을지 알 수 없게 됨
          + 개발자로서는 원래 문제를 해결하기 위해 완전히 다른 솔루션을 선택하고 대신 구현해보는 것이 최선의 방법임
     * 그러면 리뷰어는 다시 마찬가지로 도움이 되지 않는 방식으로 그것을 거부함

  The Priority Inversion

     * 첫 번째 코드 리뷰에서는 사소하고 간단한 것들을 지적함
     * 개발자가 그것들을 수정하기를 기다렸다가 중대한 문제를 제기함
          + 패치의 상당 부분을 완전히 재작성해야 하는 근본적인 문제가 있음. 이는 이미 수행한 사소한 수정 작업의 많은 부분을 버려야 함을 의미함
          + 누군가에게 많은 작업을 시키고 그것을 버리게 만드는 것만큼 ""당신의 작업은 원하지 않으며, 당신의 시간은 소중하지 않다""는 메시지를 잘 전달하는 것은 없음
     * 이것만으로도 개발자가 포기하기에 충분할 수 있음

  The Late-Breaking Design Review

     * 몇 주 또는 몇 달 동안 많은 별도 패치로 엄청나게 복잡한 작업이 진행되어 왔음
     * 리뷰어는 그 전체 작업의 설계에 동의하지 않지만, 원래 논의에는 참여하지 않았거나 토론에서 패배한 측이었음
     * 그런데 이제 리뷰어에게 그 작업의 중간에 있는 사소하지만 중요한 부분(예: 많은 개발자를 막고 있는 버그에 대한 쉬운 수정)을 검토해달라는 요청이 들어옴. 이것이 리뷰어에게는 기회임
     * 리뷰어는 지금까지 수행된 작업의 전체 설계에 대한 정당성을 요구함
     * 개발자가 전체 작업의 일부만 담당하고 있어서 답변을 모른다면, 그것은 리뷰어의 문제가 아님. 리뷰어가 만족할 때까지 ""승인"" 버튼을 누르지 않을 것임

  The Catch-22

     * 하나의 큰 패치라면 읽기가 너무 어려움. Self-Contained된 하위 조각으로 분할할 것을 요구함
     * 반대로 작은 패치가 많다면 그 중 일부는 그 자체로는 의미가 없음. 다시 붙여넣을 것을 요구함
     * 어떤 종류의 트레이드오프가 특정 경우에 관련이 있는 것처럼 보인다면 이를 활용해 불평할 이유를 찾을 수 있음
          + 예를 들어 코드가 알아보기 쉽게 작성되었다면 성능이 좋지 않을 것이고, 잘 최적화되었다면 읽기 어렵고 유지 관리하기 어려울 것임

  The Flip Flop

     * 코드의 동일한 부분에 사람들이 일반적으로 수행하는 유형의 변경 사항이 있음
     * 리뷰어는 이전에 이러한 변경 사항을 여러 번 검토한 적이 있음
     * 또 다른 변경 사항이 들어옴. 작성자는 이전 변경 사항을 자세히 살펴보고 기존 패턴을 주의 깊게 따랐으며, 이 영역에 익숙해 보이는 리뷰어를 선택함
     * 리뷰어는 이전에는 전혀 문제 삼지 않았던 변경 사항의 한 측면에 갑자기 이의를 제기함. 기존 패턴을 따르는 것만으로는 충분하지 않음
     * 작성자가 이전에 동일한 변경 사항을 보여주면서 리뷰어의 비일관성을 지적하면 어떻게 될까?
          + 리뷰어는 ""맞다. 그것도 변경되어야 한다""라고 말함
          + 리뷰어는 기존 사례를 모두 변경하겠다고 자원하지 않도록 주의해야 함. 운이 좋다면 개발자가 이를 기존 사례를 직접 변경하라는 지시로 해석하여 리뷰어가 많은 노력을 아낄 수 있음

그러나 진지하게 ...

     * 지금까지 이 글은 농담이었음. 리뷰어들이 일부러 이런 나쁜 행동을 한다고 제안하려는 것도 아님
          + 대부분의 설명은 리뷰어가 실제로 하는 일에 대한 과장이거나, 좌절한 패치 제출자가 느끼는 바에 대한 과장임
     * 실제로 이런 일을 하지 말라는 것임!
          + 라운드 트립을 최소화하도록 노력하고, 사소한 것들을 고르기 전에 (필요하다면) 중요한 재작성을 요청하며, 패치를 비판할 때는 어떤 버전을 수락할 것인지에 대한 건설적인 제안을 해야 함
          + 전체 코드베이스에 대한 의견이 있다면 한 개발자의 패치를 검토하며 트집 잡기보다는 모든 개발자와 전반적인 논의를 해야 함
          + 실수로 이런 일을 했다면, 자각해야함. 실수로 개발자의 삶을 더 어렵게 만들었다는 것을 인식하고, 사과하며, 더 도움이 되려고 노력해야 함
     * 근본적인 문제는 권한의 남용임
          + 한 개발자가 다른 개발자의 패치에 대한 코드 리뷰어가 되면 일시적인 권한이 생기게 됨. 리뷰어는 해당 패치가 커밋되는 것을 막을 수 있는 권한을 가짐
          + 권한에는 책임이 따름. 의도된 목적으로, 필요한 만큼만 권한을 사용해야 함
          + 대부분의 안티패턴(또는 풍자하는 온건한 행동)은 권한의 남용임. 리뷰어가 패치의 개선과는 무관하거나 반대되는 개인적 의제를 추구하기 위해 개발자에 대한 일시적인 권한을 지렛대로 사용하는 것임
          + 개인적 의제는 안티패턴마다 다양함. 무관한 작업, 개인적 스타일 선호, 게으름, 변화에 대한 저항, 패치 제출자에 대한 개인적 혐오 등이 될 수 있음
     * 패치 제출자가 과거에 코드 리뷰어였을 때 이런 나쁜 행동을 했다면 혐오가 정당화될 수도 있음. 그래서 코드 리뷰어의 권한을 신중하게 사용해야 함
          + 발자들이 서로에 대한 복수의 악순환에 빠지면 소프트웨어 프로젝트는 파멸함

Gatekeeping 코드 리뷰

     * 여기까지는 피어 간 코드 리뷰에 중점을 두었음
          + 코드 리뷰어와 패치 제출자는 동료이며 서로 책임지거나 코드베이스에 대해 최종 결정권을 갖지 않음
          + 그래서 코드 리뷰에서 얻는 권한은 일시적임
     * 피어 리뷰 상황에서 코드 리뷰어와 작성자는 기본적으로 같은 목표를 가져야 함
          + 어떤 기능을 넣을지, 승인 전 얼마나 다듬어야 하는지, 허용 가능한 코딩 스타일은 무엇인지에 대해 심각한 의견 불일치가 있다면 코드 리뷰 맥락 밖에서 다뤄야 함
     * 하지만 다른 종류의 코드 리뷰 상황에서는 그렇지 않음. 특히 프로젝트 외부인이 요청받지 않은 패치를 보내는 경우엔 매우 다름
          + 이런 시나리오는 일반적으로 프리 소프트웨어에서 발생함
          + 전 세계 누구나 소스 코드를 수정할 수 있고 일부는 변경 사항을 다시 보내려고 시도하기 때문
     * 하지만 다른 상황에서도 발생할 수 있음
          + 사유(Proprietary) 코드를 개발하는 회사 내에서 한 팀의 개발자가 다른 팀의 프로젝트에 패치를 보내 운이 좋기를 바랄 수 있음
     * 이런 상황에서는 패치 수신자가 애초에 해당 변경을 원하지 않거나 수행 방식에 완전히 동의하지 않아 패치를 전혀 받아들이지 않을 가능성이 훨씬 큼
          + 이 경우에는 동료 리뷰어로서 부여받은 일시적 권한의 남용이 아니라 프로젝트 책임자로서 영구적 권한을 정당하게 행사하는 것임
          + 내 소프트웨어 프로젝트의 방향은 내가 결정함
     * 코드 리뷰어가 이런 '게이트키핑' 역할을 할 때는 패치가 기존 일반 설계 원칙이나 요구사항을 위반한다는 이유로 패치를 비판하는 것이 항상 잘못된 것은 아님
          + 어쩌면 요구사항과 일치하는 방식으로 해당 문제를 해결하는 방법을 모를 수도 있음
          + 사실 그것이 어려운 부분이고 내가 아직 동일한 변경을 하지 않은 유일한 이유일 수도 있음
     * 그러나 게이트키핑 맥락에서도 설명 없이 'The Guessing Game'을 적용하는 것은 무례함
          + 나는 일반적으로 개발자가 어려운 부분을 간과했음을 설명하려 노력하고, 내 자신도 답을 모르면 그렇다고 말함
     * 물론 'The Death of a Thousand Round Trips' 같은 소극적이고 공격적인 방해에 대한 변명의 여지가 없음
          + 정말로 패치를 코드에 전혀 넣고 싶지 않고 그 결정을 내릴 정당한 권한이 있는 게이트키핑 역할을 맡고 있다면, 제출자가 더 이상 시간을 낭비하지 않도록 말로 설명할 수 있음

Disclaimer

     * 나는 수년 동안 내가 참여한(양쪽 모두에서) 코드 리뷰, 다른 사람들 사이에서 관찰한 코드 리뷰, 대화에서만 들은 코드 리뷰에서 이 기사를 위한 메모를 수집해 왔음
     * 그래서 최근에 내 코드를 리뷰한 특정인을 겨냥한 것이 아님

   의외로 과장이 아닐 수 있음....

   이거 진짜 제가 겪어봤는데 개발자 접을뻔했습니다 진짜 재기하는데 힘들었습니다

   글 읽고 ptsd 올뻔

   이 기사를 위한 메모를 그동안 잘 수집해 왔었나 보네요!!

   읽기만 해도 정신적 학대 수준입니다...

   막줄이 핵심이라는거죠?ㅋㅋㅋ.....

   와.. 암걸리는줄 알았네요;;

   이런거, si + sm 하는 곳 가보면 한국에서도 흔하게 볼수 있어요. 흔히들 텃세라고하죠. 못된 인간들이 밥그릇 지키려 별별 짓을 많이 한답니다.

   사악한 방법이 많군요.

   장기적으로 보면 합리적인 이유없이 저런 짓을 하는 사람은 1) 조기에 개발자 인맥에서 배제되거나, 2) 더러운 인성에도 불구하고 능력이 출중해서 큰 몫을 맡고 있고 배제되기 어려운 경우 누군가가 어댑터 역할을 맡아서 소통의 창구 역할을 함으로써 커넥션을 이어주고 있기에 그 상태가 유지되고 있는거라 그 중간자가 어떤 이유로든 사라지면 멀리 안가서 금방 배제됨. 백날 날고 기어도 결국은 사람들이 모여서 뭘 해야 돈도 오고 가고, 돈이 오고가야 사람이 오고 가기 때문에 사람과 잘 지내지 못하는 사람은 집단에서 배제되고 도태되기 마련임.

   보통 집단 내에서 인성이 구림에도 오래 살아남은 사람은 자기가 무슨 드라마 셜록 마냥 고기능 소시오패스같은 대단한 무언가라서 살아남은 거라고 착각하는 경우가 흔하지만, 이용가치가 있으니 그냥 주변에서 꾹 참고 써먹는 것일 뿐 이용가치가 사라지면 ""함께해서 더러웠고 다신 보지 말자""하는 사이가 됨. 컴버배치가 주연한 셜록도 우리가 밖에서 보기에 매력적인 소시오패스일뿐 주변에서 셜록을 포기하지 않고 아껴주는 사람이 없었다면 그냥 아무 스토리도 안됨.

   인성이 구림에도 오래 살아남은 사람은 자기가 무슨 드라마 셜록 마냥 고기능 소시오패스같은 대단한 무언가라서 살아남은 거라고 착각하는 경우가 흔하지만, 이용가치가 있으니 그냥 주변에서 꾹 참고 써먹는 것일 뿐 이용가치가 사라지면 ""함께해서 더러웠고 다신 보지 말자""하는 사이가 됨 ==> 기가 막히는 문구입니다. 기억해놔야 겠어요.

   직장내 괴롭힘 내지는 파와하라가 생각나네요

   유머라고 하지만 글 보면서 짜증이 화악..
"
