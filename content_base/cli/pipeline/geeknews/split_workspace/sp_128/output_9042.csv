"https://news.hada.io/topic?id=17544","건강한 치아를 뽑아 비싼 가짜 치아를 판매하는 새로운 치과 사기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  건강한 치아를 뽑아 비싼 가짜 치아를 판매하는 새로운 치과 사기

     * 새로운 치과 사기: 건강한 치아를 뽑고 비싼 가짜 치아를 판매
          + Becky Carroll은 ClearChoice Dental Implant Centers에서 모든 자연 치아를 인공 치아로 교체하는 수술을 받았음. 그러나 수술 중 마취가 풀리고 치아가 잘못 정렬되어 씹을 수 없는 상태가 되었음.
          + ClearChoice는 Carroll의 주장을 부인하고 있음.
     * 치과 임플란트의 확산
          + 치과 임플란트는 손상된 치아를 대체하는 데 사용되며, 미국에서 매년 수백만 개가 설치되고 있음.
          + 일부 전문가들은 자연 치아를 보존하는 것이 중요하다고 경고하며, 불필요한 임플란트 시술이 증가하고 있다고 우려함.
     * 임플란트의 위험과 비용
          + 임플란트는 비용이 많이 들고 수술 합병증의 위험이 있으며, 자연 치아보다 더 많은 관리가 필요함.
          + 많은 치과가 임플란트를 제공하지만, 모든 치과의사가 임플란트 수술에 대한 충분한 훈련을 받지 않음.
     * 사모펀드와 치과 산업
          + 사모펀드가 치과 체인을 인수하면서 임플란트 시술이 증가하고 있음.
          + 일부는 사모펀드의 투자가 효율성을 가져온다고 주장하지만, 과잉 치료와 단기 이익을 우선시하는 경향이 있다고 비판함.
     * GN⁺의 정리
          + 이 기사는 치과 임플란트의 과잉 사용과 관련된 문제를 다루고 있으며, 자연 치아 보존의 중요성을 강조함.
          + 임플란트가 필요한 경우와 불필요한 경우를 구분하는 것이 중요하며, 환자들은 충분한 정보를 바탕으로 결정을 내려야 함.
          + 유사한 기능을 가진 다른 치과 치료 옵션으로는 전통적인 치과 치료와 보철물이 있음.

        Hacker News 의견

     * 한 사용자는 치과의 사무실이 너무 고급스러우면 방문을 꺼린다고 말함. 고급 장비와 사무실을 유지하기 위해 더 많은 절차를 권장할 가능성이 높다고 생각함
          + 브라질에서 치과 검진을 받았을 때 아무 문제도 발견되지 않았음
          + 미국으로 돌아와 작은 치과에서 검진을 받았을 때도 건강한 치아와 잇몸을 가졌다고 들음
     * ClearChoice라는 회사가 사모펀드 소유라는 점을 지적하며, 의료 서비스를 받을 때 회사가 사모펀드 소유인지 확인하는 것이 중요하다고 주장함
          + Aspen Group이 ClearChoice를 인수했으며, 사모펀드 소유로 인해 여러 주에서 기만적 관행으로 소송을 당하고 있음
     * 한 사용자는 샌프란시스코의 치과에서 사랑니를 빼야 한다는 말을 들었으나, 10년 후 새 치과에서는 문제가 없다고 들음
          + 미국의 치과 의사와 의사들이 사업을 운영하는 것처럼 수익 목표를 가지고 있다고 주장함
          + 최상의 치료를 받고 있는지 확신이 서지 않을 때는 두 번째 의견을 구하는 것이 중요함
     * 18세에 새로운 치과에서 충치가 있다고 진단받았으나, 이전 치과에서는 충치가 없다고 함
          + 새로운 치과를 신뢰하기 전에 철저히 검토하고, 필요시 두 번째 의견을 구하는 것이 중요하다고 강조함
     * 한 사용자의 아내는 미국에서 치과 검진을 받을 때마다 과도한 치료 계획을 제안받음
          + $8000의 Invisalign 치료가 과도하다고 판단하여 다른 치과를 찾기로 결정함
     * 치과 의사는 대부분의 사람들에게 전문가로 인식되며, 그들이 제안하는 절차를 검증하기 어려움
          + 정비공과 마찬가지로 신뢰할 수 있는 치과 의사를 찾고 두 번째 의견을 구하는 것이 중요함
     * 55세 사용자는 매번 사랑니 제거를 권유받지만, 문제가 없다고 판단함
          + ""사전 충치""라는 개념이 수익을 창출하는 방법이라고 주장함
     * 미국의 치과 의사들이 환자 치료보다는 수익에 더 집중한다고 주장함
          + 불필요한 절차를 권장하는 사례를 여러 번 경험함
     * 1997년 퓰리처상을 수상한 기자가 치과 산업을 조사했을 때, 대부분의 치과 의사가 불필요한 작업을 강력히 권장했다고 함
          + 증거 기반의 저개입 치과 치료에 대한 지원이 거의 없다고 주장함
     * 치통을 겪었으나 치과에서 문제를 찾지 못해 3D 스캔을 위해 다른 전문의에게 의뢰받았으나, 루트 캐널을 거부하자 스캔을 거부당함
          + 몇 시간 후 통증이 사라졌고, 이는 2년 전의 일임
"
"https://news.hada.io/topic?id=17552","OpenAI, 팩트 체크 벤치마크 SimpleQA 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenAI, 팩트 체크 벤치마크 SimpleQA 공개

     * SimpleQA는 언어 모델의 사실성을 측정하기 위한 새로운 벤치마크
     * 인공지능에서 사실에 기반한 응답을 생성하는 모델을 학습시키는 것은 아직 해결되지 않은 문제임
     * 현재 언어 모델은 때로는 거짓된 출력이나 증거로 뒷받침되지 않는 응답을 생성함. 이를 ""hallucinations(환각)""이라고 함
     * 더 정확하고 환각이 적은 언어 모델은 더 신뢰할 수 있고 다양한 응용 분야에 활용될 수 있음
     * SimpleQA 오픈 소스를 통해 언어 모델의 사실성을 측정하고자 함

SimpleQA 벤치마크 특징

     * 사실성은 측정하기 어려운 주제이기 때문에 SimpleQA는 짧고 사실을 추구하는 질의에 초점을 맞춤
     * SimpleQA의 목표:
         1. 높은 정확성: 독립적인 두 명의 AI 트레이너가 제공한 출처로 정답을 뒷받침하고, 예측 답변을 쉽게 평가할 수 있도록 질문을 작성함
         2. 다양성: 과학 기술부터 TV 쇼, 비디오 게임에 이르기까지 광범위한 주제를 다룸
         3. 최신 모델에 도전적임: TriviaQA나 NQ와 같은 이전 벤치마크와 달리 SimpleQA는 최신 모델에게 더 큰 도전이 되도록 만들어짐(예: GPT-4는 40% 미만의 점수를 기록함)
         4. 연구자 친화적 UX: 간결한 질문과 답변 덕분에 SimpleQA는 실행 속도가 빠르고 간단함. OpenAI API나 다른 최신 모델 API를 통한 평가도 효율적임. 4,326개의 질문으로 평가 벤치마크로서의 분산도 상대적으로 낮을 것으로 예상됨

SimpleQA 데이터셋 생성 과정

     * AI 트레이너들이 웹을 탐색하며 짧고 사실을 추구하는 질문과 해당 답변을 만듦
     * 데이터셋에 포함되기 위해 각 질문은 엄격한 기준을 충족해야 함:
          + 평가하기 쉬운 단일하고 명백한 답변이 있어야 함
          + 질문에 대한 답변이 시간이 지나도 변하지 않아야 함
          + 대부분의 질문은 GPT-4나 GPT-3.5에서 환각을 유발해야 함
     * 데이터셋의 품질을 더욱 향상시키기 위해 독립적인 두 번째 AI 트레이너가 원래 응답을 보지 않고 각 질문에 답변함
     * 두 AI 트레이너의 답변이 일치하는 질문만 포함됨

SimpleQA 데이터셋 품질 검증

     * 최종 검증을 위해 데이터셋에서 1,000개의 질문을 무작위로 추출하여 세 번째 AI 트레이너가 답변하게 함
     * 세 번째 AI 트레이너의 답변이 원래 합의된 답변과 94.4%가 일치함. 5.6%는 불일치함
     * 불일치 사례를 수동으로 검사한 결과:
          + 5.6% 중 2.8%는 평가자의 거짓 음성이나 세 번째 트레이너의 인적 오류(예: 불완전한 답변, 출처 오해) 때문이었음
          + 나머지 2.8%는 질문 자체의 실제 문제(예: 모호한 질문, 웹사이트 간 상충되는 답변) 때문이었음
     * 이를 바탕으로 이 데이터셋의 고유 오류율은 약 3%로 추정됨

SimpleQA의 질문 다양성

     * 아래 원형 차트는 SimpleQA 벤치마크의 주제 다양성을 보여줌
     * 원형 차트에서 각 부분에 마우스를 올리면 각 질문의 예시가 표시됨

SimpleQA를 사용한 언어 모델 비교

     * 질문을 평가하기 위해 모델의 예측 답변과 실제 답변을 모두 보는 ChatGPT 분류기를 사용함
     * 분류기는 예측 답변을 ""correct"", ""incorrect"" 또는 ""not attempted""로 평가함
     * 아래 표는 각 등급에 대한 정의와 해당 예시를 보여줌
          + ""Correct"": 예측 답변이 실제 답변을 완전히 포함하고 실제 답변과 모순되지 않음
          + ""Incorrect"": 예측 답변이 실제 답변과 어떤 식으로든 모순됨(헷징이 있더라도)
          + ""Not attempted"": 실제 타겟이 답변에 완전히 제시되지 않았고, 실제 답변과 모순되지 않음
     * 모델은 가능한 한 많은 질문에 답변하면서(correct의 수가 가장 많음) 동시에 incorrect 답변의 수를 최소화하는 것이 이상적임

SimpleQA를 사용한 언어 모델 보정(calibration) 측정

     * SimpleQA와 같은 사실성 벤치마크를 사용하면 ""자신이 알고 있는 것을 아는지"" 여부를 측정할 수 있음
     * 이를 보정(calibration)이라고 하며, 언어 모델에게 직접 자신의 답변에 대한 확신 정도를 백분율로 명시하도록 요청하여 측정할 수 있음
     * 그런 다음 모델이 명시한 확신 정도와 실제 정확도 간의 상관관계를 도표로 나타낼 수 있음
     * 완벽하게 보정된 모델은 명시된 확신 정도와 실제 정확도가 동일할 것임
     * 아래 그림은 이러한 결과를 보여줌:
          + 명시된 확신 정도와 정확도 사이의 양의 상관관계는 모델이 어느 정도 확신을 갖고 있다는 긍정적인 신호임
          + o1-preview가 o1-mini보다, gpt4가 gpt4-mini보다 더 잘 보정되어 있음
          + 그러나 성능이 y=x 선을 크게 밑도는 것은 모델이 일관되게 자신의 확신 정도를 과대평가한다는 것을 의미함
          + 따라서 명시된 확신 정도 측면에서 대형 언어 모델의 보정을 개선할 여지가 많이 있음

결론

     * SimpleQA는 최신 모델의 사실성을 평가하기 위한 간단하지만 도전적인 벤치마크임
     * SimpleQA의 주요 제한점은 그 범위임. SimpleQA는 정확하지만 단일하고 검증 가능한 답변이 있는 짧고 사실을 추구하는 질의라는 제한된 상황에서만 사실성을 측정함
     * 사실에 기반한 짧은 답변을 제공하는 능력이 수많은 사실로 가득 찬 긴 응답을 작성하는 능력과 상관관계가 있는지는 아직 연구가 필요한 개방형 문제임
     * SimpleQA 오픈 소스가 더 신뢰할 수 있고 안정적인 AI 연구를 촉진하기를 바라며, 연구자들이 SimpleQA로 언어 모델의 사실성을 평가하고 피드백을 제공해 주기를 바람

GN⁺의 의견

     * SimpleQA는 짧은 사실 기반 질문으로 언어 모델의 사실성을 측정하는 흥미롭고 필요한 벤치마크임. 결국 AI의 신뢰성을 높이기 위해서는 사실에 입각한 응답 생성 능력을 향상시켜야 하기 때문임
     * 그러나 SimpleQA는 제한된 상황에서의 사실성만 측정하므로, 실제 활용 시나리오에서의 언어 모델 사실성을 완벽히 반영하지는 못함. 추후 연구를 통해 더 다양한 상황에서의 사실성 평가가 필요해 보임
     * 또한 SimpleQA 데이터셋 자체의 정확도가 97% 정도이므로, 언어 모델의 성능이 이를 넘어서기는 어려울 것으로 보임. 데이터셋 자체의 품질 개선도 지속적으로 이뤄져야 할 듯함
     * SimpleQA와 유사한 목적의 다른 벤치마크로는 TruthfulQA나 HonestQA 등이 있음. 이들과의 비교 분석을 통해 SimpleQA의 장단점을 더 명확히 파악할 수 있을 것임
     * 언어 모델의 사실성을 높이기 위해서는 대규모의 양질의 데이터로 사전 학습을 하는 것도 중요하지만, 추론 시에 외부 지식을 활용하거나 자기 수정하는 능력을 갖추는 것도 필요해 보임. 관련 연구가 활발히 이뤄지길 기대함
"
"https://news.hada.io/topic?id=17525","Dropbox의 자체 로드 밸런싱 서비스 Robinhood ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Dropbox의 자체 로드 밸런싱 서비스 Robinhood

     * Robinhood는 Dropbox의 내부 로드 밸런싱 서비스로 2020년에 배포됨
     * 서버 간 내부 트래픽을 라우팅하여 서비스 로드를 균형있게 분산함
     * Robinhood 이전에는 대부분의 Dropbox 서비스가 백엔드 간 불균형한 로드 분포로 어려움을 겪음
     * 하드웨어 차이와 이전 로드 밸런싱 알고리듬의 한계로 인해 과부하 인스턴스로 인한 신뢰성 문제가 발생함
     * 이를 해결하기 위해 서비스 플릿을 과도하게 프로비저닝해야 했고, 이는 하드웨어 비용 증가로 이어짐

Robinhood의 새로운 기능

     * PID(Proportional-Integral-Derivative) 컨트롤러를 활용하여 로드 불균형을 더 빠르고 효과적으로 관리할 수 있게 됨
     * 이는 인프라의 신뢰성 개선과 상당한 하드웨어 비용 절감으로 이어짐
     * 최신 지능형 기능을 구동하는 AI 워크로드 증가로 GPU 리소스에 대한 효과적인 수요 관리가 그 어느 때보다 중요해짐

Dropbox에서의 로드 밸런싱 과제

     * Dropbox의 서비스 디스커버리 시스템은 전 세계 여러 데이터 센터에 걸쳐 수십만 대의 호스트로 확장 가능함
     * 일부 Dropbox 서비스는 수백만 개의 클라이언트를 보유하고 있지만, 각 클라이언트가 모든 서버 인스턴스에 연결하도록 허용할 수는 없음
          + 이는 서버에 너무 많은 메모리 압력을 가하고, 서버 재시작 시 TLS 핸드셰이크로 인해 서버가 과부하될 수 있기 때문
     * 대신 서비스 디스커버리 시스템을 사용하여 각 클라이언트에 연결할 서버 하위 집합을 제공함
     * 클라이언트가 사용할 수 있는 최선의 로드 밸런싱 전략은 서비스 디스커버리 시스템에서 제공하는 주소 목록을 라운드 로빈하는 것임
          + 그러나 이 방법으로는 각 서버 인스턴스의 로드가 상당히 불균형할 수 있음
          + 하위 집합 크기를 늘리는 것은 쉬운 완화책이지만 불균형을 완전히 제거하지는 못하며 서비스 소유자에게 또 다른 매개변수를 제공할 뿐임
     * 더 깊은 문제는 각 서버로 동일한 수의 요청을 보내더라도 기본 하드웨어가 서버마다 다를 수 있다는 것
          + 즉, 요청이 서로 다른 하드웨어 클래스에서 다른 양의 리소스를 소비함
     * 핵심은 클라이언트가 서버 로드에 대한 가시성이 없다는 것
     * 과거에는 서버가 응답 헤더에 로드를 첨부하도록 하여 이 문제를 해결하려고 시도함
          + 클라이언트는 주소 하위 집합에서 가장 적게 로드된 엔드포인트를 선택하여 직접 로드 밸런싱을 수행할 수 있음
          + 결과는 유망했지만 여전히 몇 가지 단점이 있었음
               o 특수 로드 헤더에 대해 서버와 클라이언트 모두 코드 변경이 필요했기 때문에 전 세계적으로 채택하기 어려웠음
               o 결과는 좋았지만 충분히 좋지는 않았음

Robinhood 구축 결정

     * 2019년 Robinhood 구축을 공식적으로 결정함
     * 이 새로운 서비스는 기존 내부 서비스 디스커버리 시스템 위에 구축되어 서버에서 로드 정보를 수집하고 라우팅 정보에 첨부함
     * Robinhood는 Envoy의 Endpoint Discovery Service를 활용하여 로드 정보를 엔드포인트 가중치에 통합하므로 클라이언트가 가중치 기반 라운드 로빈을 수행할 수 있음
     * gRPC 커뮤니티가 Envoy xDS 프로토콜을 채택하고 있어 Robinhood는 Envoy 및 gRPC 클라이언트와 모두 호환됨
     * 당시 Dropbox의 요구사항을 충족하는 기존 로드 밸런싱 솔루션이 없었기 때문에 새로운 서비스를 구축하기로 결정함

Robinhood의 성과

     * 프로덕션 환경에서 몇 년 사용한 결과 유망한 결과를 보임
     * 일부 대규모 서비스의 플릿 크기를 25% 줄이는 데 성공하여 매년 상당한 하드웨어 비용을 절감함
     * 과도하게 활용되는 프로세스가 줄어들어 신뢰성도 향상됨

Robinhood의 아키텍처

     * 각 데이터 센터에 Robinhood 인스턴스가 배포되며 로드 밸런싱 서비스, 프록시, 라우팅 데이터베이스의 세 부분으로 구성됨

  로드 밸런싱 서비스(LBS)

     * Robinhood의 핵심
     * 로드 정보를 수집하고 엔드포인트 가중치가 포함된 라우팅 정보를 생성하는 역할
     * 여러 인스턴스가 서비스에 대한 라우팅 정보를 동시에 업데이트하므로 내부 shard manager를 사용하여 각 서비스에 대한 기본 작업자를 할당함
     * 각 서비스가 독립적이므로 서비스별로 LBS를 분할하고 수평으로 확장할 수 있음

  프록시

     * 서비스의 로드 정보를 데이터 센터 내 해당 LBS 파티션으로 라우팅하는 역할
     * 프록시를 사용하면 LBS 프로세스에 직접 연결되는 수도 줄일 수 있음
          + 프록시가 없으면 모든 LBS 프로세스가 인프라 내 모든 노드에 연결되어야 함
          + 대신 LBS 프로세스는 프록시에만 연결되므로 LBS의 메모리 압력이 크게 줄어듬
     * 프록시는 동일한 데이터 센터 내 노드에만 연결되므로 수평으로 확장 가능
     * 이 패턴은 너무 많은 TLS 연결을 수신하지 않도록 서비스를 보호하기 위해 인프라의 많은 부분에서 사용됨

  라우팅 데이터베이스

     * 호스트 이름, IP 주소, LBS에서 생성한 가중치 등 서비스에 대한 라우팅 정보를 저장하는 ZooKeeper/etcd 기반 데이터베이스
     * ZooKeeper와 etcd는 노드/키 변경 사항을 실시간으로 모든 감시자에게 알릴 수 있으며 Dropbox의 읽기 중심 서비스 검색 사용 사례에 매우 적합함
     * ZooKeeper/etcd에서 보장하는 최종 일관성은 서비스 검색에도 충분함

로드 밸런싱 서비스 자세히 살펴보기

     * 로드 밸런싱의 목표는 모든 노드의 활용률이 평균 활용률과 같도록 하는 것
     * PID 컨트롤러를 사용하여 각 노드의 활용률을 평균 활용률과 거의 동일하게 유지
     * LBS는 각 노드에 대해 PID 컨트롤러를 생성하고 평균 활용률을 설정점으로 사용
     * LBS는 PID 컨트롤러의 출력을 엔드포인트 가중치에 대한 델타로 사용하고 서비스의 모든 엔드포인트 간에 가중치를 정규화함
     * 새 노드가 평균 활용률에 수렴하는 데 몇 번의 조정이 필요하지만 PID 컨트롤러는 로드 밸런싱에 매우 효과적임

LBS 동작 시나리오

     * LBS는 노드 재시작부터 로드 보고서 누락에 이르기까지 로드 밸런싱에 영향을 줄 수 있는 다양한 시나리오를 처리하도록 설계됨
     * 최적의 성능을 유지하기 위해 LBS는 이러한 예외 사례를 처리하기 위한 몇 가지 전략을 구현함

  LBS 시작

     * LBS는 로드 정보와 PID 컨트롤러 상태를 메모리에 보관함
     * LBS 재시작 중에는 즉시 가중치 업데이트를 시작하지 않고 로드 보고서가 들어올 때까지 잠시 기다림
     * PID 컨트롤러 가중치의 경우 LBS는 라우팅 데이터베이스에서 엔드포인트 가중치를 읽어 복원함

  Cold Start 노드

     * 서비스 플릿에 새 노드가 자주 참여하므로 Thundering Herd 문제를 방지하는 것이 중요
     * 새 노드의 초기 활용률이 일반적으로 0이므로 LBS는 새 노드의 가중치를 낮은 엔드포인트 가중치로 설정하고 PID 컨트롤러가 노드를 평균 활용률까지 끌어올리도록 함

  누락된 로드 보고서

     * 분산 시스템 환경에서는 장애가 일반적임
     * 네트워크 정체 또는 하드웨어 장애로 인해 일부 노드의 로드 보고서가 지연되거나 도착하지 않을 수 있음
     * LBS는 가중치 업데이트 중에 이러한 노드를 건너뛰므로 해당 노드의 엔드포인트 가중치는 변경되지 않음
     * 그러나 대량의 로드 보고서가 누락되면 평균 활용률 계산이 부정확해질 수 있음
     * 안전을 위해 LBS는 이 경우 가중치 업데이트 단계를 완전히 건너뜀

  활용률 메트릭

     * CPU 활용률은 Dropbox에서 가장 널리 사용되는 로드 밸런싱 메트릭
     * CPU로 병목 현상이 발생하지 않는 서비스의 경우 진행 중인 요청 수가 좋은 대체 측정값
     * LBS는 CPU 및/또는 진행 중인 요청을 기반으로 로드 밸런싱을 지원하도록 구현됨

  제한사항

     * PID 컨트롤러는 노드의 활용률을 목표값(평균 활용률)에 가깝게 유지하기 위해 피드백 루프를 구성함
     * 트래픽이 매우 적은 서비스 또는 분 단위로 측정되는 매우 높은 지연 시간 요청과 같이 피드백이 거의 없는 경우 로드 밸런싱이 효과적이지 않음
     * 높은 지연 시간 요청이 있는 서비스는 비동기식이어야 함

데이터 센터 간 라우팅

     * LBS 인스턴스는 데이터 센터 내에서 로드 밸런싱을 처리함
     * 데이터 센터 간 라우팅에는 다른 고려 사항이 있음
          + 예를 들어 요청의 왕복 시간을 줄이기 위해 요청을 가장 가까운 데이터 센터로 라우팅하려고 함
     * 이를 위해 대상 데이터 센터 간 트래픽 분할을 정의하는 지역성 구성을 도입함

로드 밸런서 성능 평가

     * 로드 밸런싱 성능은 max/avg비율로 측정함
          + 서비스 소유자가 CPU를 기반으로 로드 밸런싱을 선택하면 maxCPU/avgCPU를 성능 지표로 사용
          + 서비스 소유자는 일반적으로 노드 간 최대 활용률을 기준으로 서비스를 프로비저닝하며, 로드 밸런싱의 주요 목적은 플릿 크기를 줄이는 것이기 때문
     * PID 컨트롤러 로드 밸런싱 전략은 max/avg 비율을 1에 가깝게 유지할 수 있음

로드 밸런싱 성능 평가 그래프

     * Envoy 프록시 클러스터 중 가장 큰 클러스터의 max/avg CPU 및 p95/avg CPU를 보여주는 그래프
          + PID 컨트롤러 기반 로드 밸런싱을 활성화한 후 두 메트릭이 1에 가깝게 떨어짐
          + max/avg 비율이 1.26에서 1.01로 떨어져 20% 개선을 보여줌
     * 노드별 CPU 활용률의 분위수 분석을 보여주는 그래프
          + PID 컨트롤러 기반 로드 밸런싱을 활성화한 후 max, p95, avg, p5가 거의 하나의 선으로 통합됨
     * 데이터베이스 프론트엔드 클러스터 중 가장 큰 클러스터의 max/avg CPU 및 p95/avg CPU를 보여주는 또 다른 그래프
          + PID 컨트롤러 기반 로드 밸런싱을 활성화한 후 두 메트릭이 1에 가깝게 떨어짐
          + max/avg 비율이 1.4에서 1.05로 떨어져 25% 개선을 보여줌
     * 노드별 CPU 활용률의 분위수 분석을 보여주는 또 다른 그래프
          + PID 컨트롤러 기반 로드 밸런싱을 활성화한 후 max, p95, avg, p5가 다시 한 번 거의 하나의 선으로 통합됨

Config Aggregator 구축 이유

     * Robinhood는 서비스 소유자가 선택할 수 있는 여러 옵션을 제공하며 동적으로 변경 사항을 적용할 수도 있음
     * 서비스 소유자는 코드베이스 내 서비스 디렉토리에서 서비스에 대한 Robinhood 구성을 생성하고 업데이트함
     * 이러한 설정은 구성 관리 서비스에 저장되며, 이는 Robinhood 구성의 변경 사항을 실시간으로 수신하는 편리한 라이브러리임
     * 그러나 몇 가지 문제로 인해 코드베이스에서 Robinhood의 메가 구성을 정기적으로 빌드하고 푸시할 수는 없음
          + 구성 푸시에 의해 변경 사항이 도입되면 롤백 버튼을 누르는 것이 위험함
               o 마지막 푸시 이후 얼마나 많은 다른 서비스가 변경되었는지 알 수 없기 때문
          + Robinhood를 소유한 팀은 각 메가 구성 푸시에 대해서도 책임이 있음
               o 이는 Robinhood 팀이 모든 변경 구성 푸시에 참여해야 한다는 것을 의미하며, 이는 엔지니어링 시간 낭비임
               o 대부분의 인시던트는 서비스 소유자가 해결할 수 있기 때문
          + 잠재적 위험을 최소화하기 위해 각 푸시는 여러 데이터 센터에 배포하는 데 몇 시간이 걸림
     * 이러한 문제를 해결하기 위해 또 다른 작은 서비스인 Config Aggregator를 구축함

Config Aggregator

     * Config Aggregator는 모든 서비스별 구성을 수집하고 LBS가 사용할 메가 구성을 구성함
     * Config Aggregator는 서비스별 구성을 감시하고 변경 사항을 실시간으로 메가 구성에 전파함
     * Config Aggregator는 서비스의 Robinhood 구성이 실수로 삭제되는 것을 방지하기 위한 tombstone 기능도 제공함
          + 서비스 소유자가 Robinhood 구성에서 서비스를 삭제하는 변경 사항을 푸시하면 Config Aggregator는 서비스 항목을 즉시 제거하는 대신 tombstone 표시를 함
          + 실제 제거는 며칠 후에 발생함
          + 이 기능은 Robinhood 구성과 기타 라우팅 구성(예: Envoy 구성) 간의 서로 다른 푸시 주기로 인해 발생할 수 있는 경쟁 조건도 해결함
     * 구성 관리 서비스의 단점은 현재 버전 관리가 되지 않는다는 것
     * LBS 구성을 알려진 양호한 상태로 되돌려야 하는 경우에 대비하여 메가 구성을 주기적으로 백업함

Migration 전략

     * 한 번에 로드 밸런싱 전략을 전환하는 것은 위험할 수 있음
     * 이것이 Robinhood에서 서비스에 대해 여러 로드 밸런싱 전략을 구성할 수 있도록 하는 이유임
     * Dropbox에는 퍼센트 기반 기능 게이트가 있으므로 클라이언트가 두 로드 밸런싱 전략에서 생성된 가중치의 가중 합계를 엔드포인트 가중치로 사용하는 혼합 전략을 구현함
     * 이렇게 하면 모든 클라이언트가 엔드포인트에 대해 동일한 가중치 할당을 보면서 새로운 로드 밸런싱 전략으로 점진적으로 마이그레이션할 수 있음

배운 점

     * Robinhood를 설계하고 구현하는 동안 효과적인 것과 그렇지 않은 것에 대한 몇 가지 핵심 교훈을 얻음
     * 단순성을 우선시하고 클라이언트 변경을 최소화하며 처음부터 마이그레이션을 계획함으로써 LBS의 개발 및 배포를 간소화하고 비용이 많이 드는 함정을 피할 수 있었음

  구성은 가능한 한 단순해야 함

     * Robinhood는 서비스 소유자가 구성할 수 있는 많은 옵션을 도입
     * 그러나 대부분의 경우 그들이 필요한 것은 제공된 기본 설정임
     * 좋고 간단한 기본 구성(또는 더 좋은 경우 구성 없음)은 엄청난 엔지니어링 시간을 절약할 수 있음

  클라이언트 변경 사항도 단순하게 유지할 것

     * 내부 클라이언트에 변경 사항을 롤아웃하는 데 몇 달이 걸릴 수 있음
          + 대부분의 배포는 매주 푸시되지만 많은 배포는 한 달에 한 번 또는 몇 년 동안 전혀 배포되지 않음
     * LBS로 이동할 수 있는 변경 사항이 많을수록 더 좋음
          + 예를 들어 초기에 클라이언트 설계에 가중 라운드 로빈을 사용하기로 결정했으며 그 이후로 변경하지 않았음
          + 이는 진행 속도를 크게 높임
     * 대부분의 변경 사항을 LBS로 제한하면 안정성 위험도 줄어듬
          + 필요한 경우 LBS의 변경 사항을 몇 분 내에 롤백할 수 있기 때문

  마이그레이션은 프로젝트 설계 단계에서 계획되어야 함

     * 마이그레이션에는 엄청난 양의 엔지니어링 시간이 소요됨
     * 고려해야 할 안정성 위험도 있음
     * 재미있지는 않지만 중요한 작업임
     * 새 서비스를 설계할 때 기존 사용 사례를 새 서비스로 원활하게 마이그레이션하는 방법을 가능한 한 빨리 고려해야 함
     * 서비스 소유자에게 요구하는 사항이 많을수록 마이그레이션이 악몽이 됨
          + 특히 기본 인프라 구성 요소의 경우 더욱 그러함
     * Robinhood의 마이그레이션 프로세스는 처음부터 잘 설계되지 않았으므로 예상보다 훨씬 더 많은 시간을 프로세스 재구현 및 구성 재설계에 소비함
     * 마이그레이션에 필요한 엔지니어링 시간은 성공의 핵심 지표여야 함

Robinhood의 효과

     * 프로덕션 환경에서 약 1년 후 Robinhood의 최신 반복이 Dropbox의 오랜 로드 밸런싱 과제를 효과적으로 해결했다고 말할 수 있음
     * 핵심인 PID 컨트롤러 알고리듬은 유망한 결과를 보여주었으며 가장 큰 서비스에서 상당한 성능 향상을 보여줌
     * Dropbox 규모의 로드 밸런싱 서비스 설계 및 운영에 대한 귀중한 통찰력을 얻음

각주

    1. N, M, s를 각각 서버 수, 클라이언트 수, 주소의 부분 집합 크기라고 하자. 서버가 연결하는 클라이언트 수는 이항 분포 B(M, s/n)의 표본을 따른다. 앞서 언급했듯이 클라이언트는 서비스 검색에서 제공하는 주소 집합에 대해 간단한 라운드 로빈을 수행한다. 따라서 각 클라이언트가 대략 동일한 양의 요청을 보내면 서버 측의 부하 분포는 이항 분포와 유사하다.
    2. 기존 서비스 검색 시스템을 확장하여 gRPC xDS 프로토콜(A27)을 지원한다. 이 블로그를 작성한 날짜 기준으로 gRPC 클라이언트는 제어 플레인의 엔드포인트 가중치에 대한 가중 라운드 로빈을 지원하지 않으므로 최단 기한 우선 스케줄링을 기반으로 사용자 지정 가중 라운드 로빈 선택기를 구현했다.
    3. 서비스가 때때로 성능이 저하된 I/O로 정체되는 흥미로운 사례가 발생했다. 이러한 상황에서는 해당 노드의 CPU가 낮게 유지되고 LBS는 노드의 가중치를 늘려 CPU를 평균으로 올리기 시작하여 데드 스파이럴로 이어진다. 해결책으로 CPU와 진행 중인 요청의 최대값을 로드 측정값으로 사용하여 서비스의 균형을 맞추게 되었다.

GN⁺의 의견

     * Robinhood는 Dropbox의 로드 밸런싱 과제를 효과적으로 해결한 훌륭한 서비스로 보임. PID 컨트롤러를 활용한 점이 인상적임
     * 매우 큰 규모의 글로벌 인프라에서 로드 밸런싱이 얼마나 어려운 과제인지를 잘 보여주는 사례임. 하드웨어 차이, 불균형한 로드 분포, 네트워크 정체 등 고려해야 할 사항이 많음
     * 모든 컴포넌트들이 유기적으로 잘 연결되어 동작하도록 설계하는 것이 중요해 보임. LBS, 프록시, 라우팅 DB가 분리되어 있지만 실시간으로 긴밀하게 상호작용함
     * 로드 밸런싱 성능을 정량적으로 평가하고 개선 사항을 시각화한 그래프들이 인상적임. 특히 max/avg 비율을 1에 가깝게 유지하는 것이 플릿 사이즈 최적화에 중요함을 잘 보여줌
     * Config Aggregator를 도입하여 서비스별 구성을 분리한 것도 좋은 아이디어로 보임. 서비스 소유자들이 자신의 변경사항을 독립적으로 관리할 수 있게 해줌
     * tombstone과 같은 안전장치를 마련한 것도 세심한 부분. 실수로 인한 구성 삭제를 방지하는 것이 중요함
     * 마이그레이션 전략에 대한 교훈도 유용해 보임. 처음부터 마이그레이션을 고려하지 않으면 나중에 많은 시간을 소모하게 됨
     * 전반적으로 Robinhood는 Dropbox 규모의 로드 밸런싱을 위한 체계적이고 세련된 솔루션으로 보임. 다른 대규모 인프라를 가진 기업들도 참고할 만한 사례임

   유사한 솔루션들:
     * AWS의 Elastic Load Balancing(ELB)이나 Google Cloud의 Cloud Load Balancing도 대규모 로드 밸런싱을 위한 관리형 서비스를 제공함
     * 쿠버네티스의 경우 자체 로드 밸런서(kube-proxy)를 가지고 있지만, Istio나 Linkerd와 같은 서비스 메시 솔루션을 활용하면 더 강력한 로드 밸런싱과 트래픽 관리 기능을 사용할 수 있음
     * Netflix의 Zuul이나 Lyft의 Envoy도 프록시 기반의 로드 밸런싱 기능을 제공함

   도입 시 고려사항:
     * 기존 인프라 및 서비스와의 호환성 확인이 필요함. 마이그레이션이 필요한 경우 전략을 세워야 함
     * 성능과 안정성에 미치는 영향을 충분히 테스트하고 모니터링 해야 함. 로드 밸런싱 로직의 버그는 치명적일 수 있음
     * 팀 역량을 고려하여 도입 범위와 속도를 결정해야 함. 성급하게 전체에 적용하기보다는 단계적 도입이 낫겠음
     * 장기적으로는 지속적으로 최적화하고 개선해 나가는 노력이 필요함. 로드 밸런싱 알고리듬을 상황에 맞게 튜닝하고, 병목 지점을 제거하는 등의 활동이 도움될 것임

   소프트웨어쪽에서 PID 컨트롤러를 들어보네요 ㅎ
"
"https://news.hada.io/topic?id=17571","re-buttonization : 터치스크린이 사라지고 촉각(Tactile) 컨트롤이 돌아온다 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          re-buttonization : 터치스크린이 사라지고 촉각(Tactile) 컨트롤이 돌아온다

     * Apple이 iPhone 16에 두 개의 새로운 버튼을 추가함
     * 주방기기와 세탁기는 다시 손잡이로 돌아가고 있음
     * 여러 자동차 제조업체는 대시보드와 스티어링 휠에 버튼과 다이얼을 다시 도입하고 있음
     * 이러한 ""re-buttonization"" 추세로 인해 Rachel Plotnick의 전문 지식에 대한 수요가 늘어나고 있음

Rachel Plotnick 교수의 연구 내용

     * 2009년경부터 버튼의 죽음에 대한 담론이 많이 있었음을 주목함
     * 터치스크린이 더 보편화되면서 물리적 버튼이 사라질 것이라는 예측이 있었음
     * 버튼 인터페이스가 사라질 수 있다는 생각에 매료되어 이에 대해 연구하게 됨
     * 디지털 버튼뿐만 아니라 일상생활에서 버튼을 누르는 행위가 매우 널리 퍼져있음을 발견함
     * 버튼의 기원에 대해 이해하고자 했음

연구 결과

     * 100년 전이나 지금이나 버튼을 누르는 것에 대한 두려움과 환상이 비슷했음
     * 기술이 크게 변화했을 것으로 예상했지만, 버튼을 누르는 사람에 대한 통제와 누가 버튼을 누를 수 있는지에 대한 불안감이 지속적으로 있었음
     * 버튼을 누르는 것에 대한 쾌락이 광고에 이용되고 기술을 단순화하는 데 사용될 수 있다는 점도 발견함
     * 환상과 두려움, 쾌락과 공포 사이의 진자 운동과 이러한 주제가 1세기 이상 지속된 방식에 관심을 가짐
     * 과거와 현재의 연결고리를 보는 것이 흥미로웠음

터치스크린의 등장과 물리적 컨트롤의 부활

     * 한동안 모든 것이 터치스크린으로 바뀌는 ""터치스크린 열풍""이 있었음
     * 시간이 지나면서 사람들은 터치스크린에 피로감을 느끼게 되었음
     * 터치스크린이 유용한 인터페이스이기는 하지만, 사람들은 물리적 버튼에 대한 갈망이 있음
     * 버튼은 직접 보지 않고도 만질 수 있고, 더 많은 촉각적 피드백을 제공함
     * 게이머들은 컨트롤러에 많은 버튼을 누르기를 원하고, DJ와 디지털 음악가들은 음악을 만들기 위해 많은 버튼과 조이스틱, 다이얼을 사용함
     * 버튼을 누르는 것이 풍부한 촉각적 경험을 제공함
     * 모든 상황에 완벽한 것은 아니지만 버튼 인터페이스의 장점을 점점 더 인식하고 있음

물리적 컨트롤의 부활을 이끄는 다른 동기

     * 아마도 스크린에 대한 피로감 때문일 수 있음
     * 기기를 보며 하루 종일 스크롤하고 페이지와 비디오를 넘기는 것에 지치게 됨
     * 어느 정도 일상생활에서 기술을 배제하는 방법으로서 버튼이 사용될 수 있음
     * 버튼이 스크린과 잘 어울리지 않는다는 것은 아님. 버튼과 스크린은 종종 파트너 관계임
     * 하지만 어떤 면에서는 시각을 우선시하는 방식에서 벗어나는 것임
     * 운전 중에는 자동차를 터치스크린으로 조작하는 것이 안전하지 않음
     * 버튼이 항상 쉽고 좋고, 터치스크린이 어렵고 나쁘다고 일반화하기는 어려움
     * 버튼은 할 수 있는 가능성을 제한하는 경향이 있음
     * 선택의 폭을 제한하는 단순성이 특정 상황에서 더 안전할 수 있음

기기 인터페이스에서 시각을 우선시하는 것은 접근성 문제도 있음

     * 시각장애인 커뮤니티는 오랫동안 터치스크린을 더 접근 가능하게 만들기 위해 싸워야 했음
     * ""터치스크린""이라고 부르는 것 자체가 재미있음. 터치 방식이라고 생각하지만 시각을 우선시함
     * 최근 몇 년 동안 Alexa, Siri 등 음성 활성화 시스템이 청각적으로 문제를 해결하고 있음
     * 하지만 터치스크린은 시각 중심으로 설계되어 있음

앞으로 나아가는 최선의 방법은 여러 인터페이스 옵션을 갖는 것임

     * 터치스크린이 완전히 구식이 되는 것은 아님. 버튼도 사라지지 않았듯이
     * 시간이 지나면서 기술에 패러다임 변화가 일어나지만 대부분 옛 아이디어를 재활용함
     * 1800년대에 사람들이 전신으로 미래에 대해 보낸 메시지를 보면 흥미로움
     * 버튼 대시보드로 누구와도 소통하고 무엇이든 쇼핑할 수 있는 미래를 상상했는데, 이는 스마트폰이 된 것과 같음
     * 여전히 대시보드 메뉴 방식을 사용하고 있음
     * 각 상황에 맞는 올바른 인터페이스가 무엇인지 신중히 고려해야 함

여러 기업이 Plotnick 교수의 전문성을 배우기 위해 연락을 취함

     * 버튼이나 소비자 기술을 디자인하는 기업들은 과거에 어떻게 했는지, 현재에 어떻게 적용할 수 있는지, 미래에는 어떻게 될지 이해하고 싶어함
     * 푸시 버튼 인터페이스를 제조하는 회사와 CT기기, X-ray 기기 등 의료기기에 대해 논의함
     * 버튼을 누르는 가장 쉬운 방법, 시간을 절약하고 환자 경험을 개선하는 방법에 대해 이야기함
     * 쇼핑몰이나 거리에서 심장마비가 일어나는 사람을 보면 자동 제세동기 버튼을 누르는 것을 두려워하는 사람들이 많음
     * 왜 누군가 버튼을 누르지 않는지, 그것에 대해 어떻게 느끼게 할 수 있을지에 대해 흥미로운 토론을 했음
     * 이는 디자인 문제이기도 하지만 사회문화적 문제이기도 함
     * 장기적 관점에서 이런 것들을 연구하는 인문학 분야 사람들이 기기를 만드는 엔지니어들과 대화할 수 있다는 생각이 마음에 듦

기업들도 버튼의 역사에 대해 알고 싶어함

     * 역사에 대해 흥미로운 대화를 나눔
     * 어떤 실수를 하지 말아야 하고 과거에 무엇이 잘 작동했는지 배우고 싶어함
     * 기술이 시간이 지나면서 점점 더 좋아진다는 진보의 내러티브가 종종 있음
     * 하지만 과거를 보면 때로는 더 단순하거나 나았던 때도 있고, 때로는 더 어려웠던 때도 있음을 알 수 있음
     * 새로운 기술은 우리가 완전히 바퀴를 재발명한다고 생각하게 만듦
     * 하지만 이런 개념들이 오래전부터 존재했을 수도 있고, 우리는 그것에 주목하지 않았을 뿐
     * 과거로부터 배울 것이 많음

   일례로 골프 8세대 GTI 모델을 예약한 후 시승해보니 핸들 컨트롤에 있는 터치버튼들이나 공조 터치 슬라이더나 정확한 조작을 하기가 너무 힘들었네요. 운전의 재미는 둘 째 치고 너무 불편하고 위험해서 예약을 취소한 경험이 있습니다.

   테슬라도 센터콘솔에 모든 정보가 집약되어있는 것도 그렇고 정돈되기 보다는 오히려 난잡하게 느껴지더라구요. 인터넷에 있는 간증(?)들이 의심스러워지는 순간뿐이었습니다..

   결론적으로 터치 컨트롤+햅틱 피드백이 유의미한 상황은 맥북의 트랙패드 같이 절대적인 입력이 아니라 ""상대적""인 입력이 유효한 경우 밖에 없다고 생각합니다

   근데 저는 테슬라 타다보니 화면에 버튼이라는 걸 거의 안쓰게 되긴 합니다.
   터치와 물리버튼을 떠나서, 차가 똑똑해지면 버튼을 눌러야하는게 점점 더 사라지지 않을까요?

   저는 그런 말들이 ""AI 때문에 프로그래머들 다 일자리 잃게 생겼다"" 라고 느껴집니다. 아직 먼 미래에 이루어질 것 같은 일들을 가지고 현재를 정당화하는 느낌이랄까요.. 사실 올 터치 상호작용만 빼면 테슬라 인포테인먼트가 너무나 부럽습니다 ㅜ.ㅜ

   그런데 신형 모델에서 터치스크린으로 기어조작하는건 좀 선넘은것 같더군요. 이것도 적응되면, '신의 한수 였다' 가 되려나요?

   그건 저도 좀.. 터치스크린 기어로 바꿀려면 먼저 FSD나 전세계 배포한 다음에 했음 좋겠네요

   비슷한 이유로 컨트롤러 없는 VR 플레이에 대해서 회의적으로 생각하긴 해요.

   선풍기 끌때마다 이 생각 했는데, 중간을 찾아가는 과정인가보네요.

        Hacker News 의견

     * 더글라스 애덤스는 45년 전 터치 인터페이스와 기술 발전을 풍자했음. 터치스크린은 접근성을 저해함.
          + 시각 장애인에게는 촉각 피드백이 부족함.
          + 나이가 들면 피부의 수분이 줄어들어 터치스크린이 잘 작동하지 않음.
     * 터치 버튼은 최악의 경우임. 화면 없이 터치 민감한 표면이 있어 의도치 않은 접촉으로 작동함.
          + 식기세척기가 터치 버튼으로 인해 이상한 설정이 활성화되는 경우가 많음.
     * UI 패러다임에서 새로운 이점에 매료되어 기존의 이점을 잊어버리는 경향이 있음.
          + 평면 UI/반-스큐어모피즘의 유행이 그 예임.
          + 텍스트와 버튼의 구분이 어려워졌고, 불필요한 여백이 많아짐.
     * 자동차 디자이너들은 터치스크린이 나쁜 아이디어라는 것을 알고 있었음.
          + 그러나 자동차 산업의 디자이너들은 이를 몰랐음.
     * Android Auto 사용 시, 화면 모서리에 있는 컨트롤 덕분에 쉽게 조작할 수 있었음.
          + 그러나 GUI 디자이너가 작은 시계를 표시하기 위해 화면 상단에 가로 막대를 추가하면서 불편해짐.
     * 신디사이저 애호가로서, 잘 설계된 버튼 레이아웃이 창의력을 자극함.
          + 터치스크린에서 노브를 조작하는 것은 불편함.
     * 휴대폰, 태블릿에서는 터치스크린이 괜찮지만, 자동차에서는 터치만으로 조작하는 것은 비효율적임.
          + 예를 들어, 오디오 컨트롤은 터치스크린으로 조작하기 어려움.
     * Tesla에 고품질의 할당 가능한 노브와 컨트롤이 추가되면 구매를 고려할 것임.
          + 실제 방향 지시등 스토크도 필요함.
     * 운전석 콘솔에 LCD 화면은 필요하지 않음.
          + 속도, RPM, 간단한 조명을 위한 아날로그 표시기가 충분함.
          + 차량의 모든 오류를 명확하게 설명하는 오류 LCD 화면이 필요함.
"
"https://news.hada.io/topic?id=17578","유한 요소법 80주년유한 요소법 80주년 (2022)

  요약

     * 유한 요소법(FEM)의 역사적 발전
          + FEM은 1941년에 처음 개발되었으며, 다양한 공학적 설계 분석과 과학적 모델링에 사용됨.
          + FEM은 고체 및 구조 역학, 유체 흐름, 열 전도 등 다양한 물리적 과정에 적용됨.
          + FEM의 발전은 컴퓨터 기술과 공학 설계 방법론의 혁신을 가져옴.
     * 1941-1965: FEM의 탄생
          + FEM의 기원은 1941년 A. Hrennikoff와 R. Courant의 연구로 거슬러 올라감.
          + 초기 연구는 격자 구조를 사용한 해석 방법을 개발하였으며, 이는 FEM의 기초가 됨.
          + 1950년대에는 여러 학자들이 FEM을 실제 공학 문제에 적용하기 시작함.
     * 1966-1991: FEM의 황금기
          + FEM은 1960년대 중반부터 급속히 발전하며 다양한 분야에 적용됨.
          + FEM의 수학적 기초가 확립되었으며, 다양한 시간 통합 방법이 개발됨.
          + FEM은 자동차 산업의 충돌 분석 등에서 주요 도구로 자리잡음.
     * FEM의 주요 발전
          + FEM은 유체-구조 상호작용 문제 해결을 위한 다양한 기법을 개발함.
          + 비선형 확률론적 FEM은 구조 신뢰성 분석에 중요한 역할을 함.
          + 구조 최적화 및 형상 최적화 분야에서도 FEM이 활용됨.
     * FEM의 영향과 기여
          + FEM은 공학 설계의 안전성과 효율성을 높이는 데 기여함.
          + FEM 연구는 전 세계적으로 활발히 진행되며, 다양한 산업 분야에 적용됨.
          + FEM의 발전은 공학 및 과학 분야의 혁신을 지속적으로 이끌고 있음.

        Hacker News 의견

     * FEM 분석가로 15년간 일해온 경험을 바탕으로, 최근 몇 십 년간 FEM의 발전이 과장되었다고 느끼는 의견이 있음
          + FEM의 실제 사용은 정체 상태이며, 비선형 문제 해결에 있어 안정성 개선은 있었으나, 실질적인 문제에 적용 시 성과가 미흡함
          + 검증 및 검증(Verification and Validation)에 대한 산업적 초점이 증가했으며, 이는 여러 문제점과 한계를 지적하는 데 기여함
     * ANSYS와 NASTRAN을 사용하여 FE 모델링 및 분석을 시작한 경험을 공유하며, 새로운 소프트웨어나 언어를 배우는 것에 대한 열정이 부족함
          + ANSYS는 여전히 일반 시뮬레이션과 다중 물리학 분야에서 선두를 달리고 있으며, NASTRAN도 여전히 인기가 있음
          + 새로운 플레이어로 COMSOL이 등장했으며, 이에 대한 경험을 묻는 질문이 있음
     * 산업 박사 과정에서 대규모 대기 오염 시뮬레이션을 위한 객체 지향 프로그래밍(OOP) 프레임워크를 개발한 경험을 공유함
          + Petrov-Galerkin FEM을 기반으로 한 프레임워크를 개발했으며, 실제 문제에 FEM을 적용하는 데 있어 많은 실용적, 이론적 문제를 해결해야 함
     * FEM을 학부와 대학원에서 공부한 경험을 공유하며, 복잡한 문제를 단순화하여 유용한 결과를 얻는 과정에 만족감을 느낌
     * 공간-시간 진화를 예측하는 것이 기본적인 필요이며, FEM이 중요한 위치를 차지해야 한다고 주장함
          + 과거에 ""orthogonal collocation"" 방법을 선택한 이유는 더 빠르고 문제에 적합했기 때문임
     * 이소지오메트릭 분석(IGA)에 대한 학술 회의에 참석한 경험을 공유하며, IGA가 FEM의 여러 문제를 해결할 잠재력이 있다고 설명함
          + IGA는 일반적으로 더 나은 수렴 속도를 제공하며, 명시적 해석기에서 더 나은 시간 단계를 허용하고, 안정성을 보장하는 더 나은 방법을 제공함
     * 현대적 구현에 관심이 있는 사람들에게 SELF라는 객체 지향 포트란 기반의 스펙트럴 요소 라이브러리를 소개함
     * FEM의 유도 과정을 이해하기 어려운 경험을 공유함
     * FEA에 대한 애정을 표현하며, ANSYS와 COSMOS를 사용한 경험과 GPU를 활용한 빠른 계산 시도 경험을 공유함
          + FEA는 필요한 곳에서는 훌륭하지만, 필요하지 않은 곳에서 사용될 때는 비효율적임
"
"https://news.hada.io/topic?id=17528","Anthropic, 데스크탑용 Claude AI 앱 베타버전 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Anthropic, 데스크탑용 Claude AI 앱 베타버전 공개

     * 맥/윈도우/윈도우(Arm64) 버전 바이너리 제공
     * 글로벌 키보드 숏컷 지원 : ⌥ + 스페이스 (변경 가능)
     * Electron 앱이어서 기존의 PWA와 큰 차이 없음

   이거 지금 버전은 뭔가 이상하네요. CPU 사용량이 100% 가까이 올라가서 보니까, 얘가 저렇게 CPU를 다 먹고 있더라고요ㅠ https://imgur.com/a0fX37L

   Electron이라 너무 아쉽네요.

   단축키가 가능하다는거 말고는 사실 큰 차이를 모르겠네요.
   사용하는 메모리가 조금 작다고는 하는데 큰 차이가 있을까 싶어요.

   윈도우 PC에 설치해서 로그인만 했는데, 작업 관리자에서 확인되는 메모리 사용량이 약 500MB 정도네요.
   비교용으로 언급하자면 동일한 조건에서 ChatGPT 앱은 약 200MB 정도였습니다.

   https://news.hada.io/topic?id=17378
   그러게요.. Anthropic에서 최근 공개한 Computer Use의 기능이 추가될 예정인가 싶군요 🤔

   기대되네요!!
"
"https://news.hada.io/topic?id=17521","OpenAI, ChatGPT 서치 기능 정식 출시 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      OpenAI, ChatGPT 서치 기능 정식 출시

   • ChatGPT의 새로운 웹 검색 기능 도입, 실시간 정보 제공 가능
   스포츠 점수, 뉴스, 주식 시세 등 최신 정보를 빠르게 제공하며 관련 웹 링크 포함
   자연스러운 대화형 인터페이스로 기존 검색 엔진보다 빠르고 효율적인 접근 가능

   • 사용자가 질문에 따라 웹을 자동으로 검색하거나, 아이콘을 클릭해 수동 검색 가능
   ChatGPT Plus 및 Team 사용자와 SearchGPT 대기자 명단 사용자에게 우선 제공
   앞으로 몇 주 내로 Enterprise 및 Edu 사용자에게 확대 예정이며, 무료 사용자는 몇 달에 걸쳐 순차적으로 기능 제공

   • 더 나은 답변 제공을 위한 사용자 중심의 디자인
   자연스러운 대화 형식으로 질문하면 ChatGPT가 웹에서 종합된 정보를 통해 답변 제공
   추가 질문 시 대화의 전체 맥락을 반영해 더욱 정확한 답변을 제공
   날씨, 주식, 스포츠 경기, 뉴스, 지도 등 다양한 카테고리에서 최신 정보와 시각적 디자인을 활용

   • 신뢰할 수 있는 출처 링크 제공
   답변에 뉴스 기사나 블로그 포스트 링크가 포함되어 있으며, ‘출처(Source)’ 버튼을 통해 참고 자료 확인 가능
   원본 자료로 바로 연결되어 추가 정보를 쉽게 탐색할 수 있도록 지원

   • 다양한 미디어 및 데이터 제공업체와의 협력으로 고품질 콘텐츠 제공
   Associated Press, Axel Springer, Condé Nast, Financial Times, Reuters 등과 협력
   쇼핑 및 여행 관련 검색 기능 개선 예정이며, 고급 음성 및 캔버스 기능에도 검색 경험 통합 계획

   GN+가 요약한 해커뉴스 댓글들도 가져와 봅니다.

  Hacker News 의견

     * 사람들이 정보를 찾고 접근하는 방식이 근본적으로 변화할지에 대한 고민이 있음. Star Trek이나 Apple's Knowledge Navigator 같은 미래의 비전은 아직 멀게 느껴짐. 현재의 검색 엔진과 신뢰할 수 없는 LLM을 결합하는 것은 그 비전을 실현하기 어려움. 검색 엔진의 광고 기반 모델은 잘못된 인센티브로 인해 콘텐츠 농장이 난무하는 상황을 초래했음. 정보 소비에 대한 인센티브를 근본적으로 바꾸는 것이 필요함.
     * 특정 기준에 맞는 목 보호대를 찾기 위해 검색했으나 Google에서는 만족스러운 결과를 얻지 못했음. ChatGPT를 사용해보니 마케팅 카피에 기반한 설명이었지만, 원하는 결과에 더 가까운 옵션을 제공받았음.
     * Google은 광고 수익을 우선시하면서 검색 결과의 질이 떨어졌음. AI 부서와 많은 자금을 보유하고 있지만, 내부 정치 문제로 인해 필요한 인재를 잃었을 가능성이 있음.
     * 현재의 검색 엔진과 LLM이 부정확한 결과를 제공하는 상황에서 두 시스템을 결합해도 좋은 결과를 얻기 어려움. 검색의 입력이 소비자에게 적대적이라면, LLM이 이를 필터링할 수 있을지 의문임.
     * 이미 좋은 검색 기술을 가진 사람들에게 LLM이 가치 있는지에 대한 질문이 있음. LLM을 매일 사용하지만, 검색을 맡기기에는 아직 신뢰하지 않음.
     * OpenAI는 Chrome 확장을 통해 ChatGPT를 기본 검색 엔진으로 사용할 수 있게 함. 이를 원하지 않는 경우 수동으로 사이트 검색에 추가할 수 있음.
     * Google이 검색 세션을 만들지 않은 이유에 대한 의문이 있음. 광고 지표에 집중하면서 흥미로운 기능을 놓친 것 같음.
     * SEO와 웹의 현재 상태에서 최신 프로그래밍 언어 버전을 검색했을 때 신뢰할 수 없는 정보가 많았음. LLM이 이를 필터링할 수 있을지 의문임.
     * 인터넷 검색은 사람들이 광고를 통해 사람들을 끌어들이기 위해 콘텐츠를 생성하면서 작동했음. LLM이나 AI 에이전트가 콘텐츠를 요약해서 보여준다면, 무료로 제공할 이유가 줄어듦. 대량으로 요약할 때는 요약된 웹사이트에 비용을 지불해야 한다고 생각함.
     * 광고가 미묘하게 도입될 때까지 얼마나 걸릴지에 대한 의문이 있음

   한국어 관련 검색시 Source 들을 보니, 거의 대부분 네이버 블로그/나무위키가 포함되고 있어서 신뢰감이 더 떨어지는 느낌이에요. 특정 URL/도메인은 제외하는 옵션이 생겨야 할듯

   Google, Bing, Perplexity 모두 블로그 등 일반 웹사이트가 소스로 사용되는데 혹시 다른 접근을 생각하신게 있나요? 그나마 OpenAI는 퍼블리셔와 정식 계약을 해서 영어에 한해서는 좀 더 신뢰도가 높은 데이터가 소스로 사용 될 것 같긴합니다.

   저도 딱히 뭔가 대안이 있는 것은 아니긴 한데요. 국내에 저렇게 제공가능한 퍼블리셔가 딱히 생각 안나는것도 문제네요 ㅠ
"
"https://news.hada.io/topic?id=17504","그림으로 쓰기: 리처드 스캐리와 아동문학의 예술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       그림으로 쓰기: 리처드 스캐리와 아동문학의 예술

리처드 스캐리와 어린이 문학의 예술

     * 리처드 스캐리의 작품: 리처드 스캐리는 어린이 문학에서 중요한 인물로, 그의 작품은 아이들에게 친근하고 따뜻한 세계를 제공함. 그의 책은 동물들이 주인공으로 등장하며, 일상생활의 다양한 측면을 그림으로 표현함.
     * 어린 시절의 영향: 스캐리는 어린 시절부터 그림에 관심이 많았으며, 그의 어머니는 그를 보스턴 미술관에서 그림 수업을 받게 함. 이러한 경험은 그의 예술적 경력에 큰 영향을 미침.
     * 군 복무와 초기 경력: 스캐리는 제2차 세계 대전 중 군 복무를 하며 예술적 재능을 발휘, 전쟁 후 뉴욕에서 광고와 잡지 일러스트레이터로 일함. 이후 어린이 책 출판사인 Western Publishing과 계약을 맺고 본격적인 어린이 책 작가로 활동 시작.
     * 베스트셀러 작가로의 성장: 스캐리는 ""Best Word Book Ever""를 통해 큰 성공을 거두며, 그의 독창적인 그림 스타일과 동물 캐릭터가 많은 사랑을 받음. 이 책은 수백만 부가 팔리며 역사상 가장 많이 팔린 어린이 책 중 하나가 됨.
     * 유럽으로의 이주: 스캐리는 1967년 스위스로 이주하여 그곳에서 많은 작품을 제작함. 그의 작품은 유럽의 일상적인 삶을 반영하며, 미국과는 다른 문화를 보여줌.
     * 작품의 지속적인 인기: 스캐리는 20년 이상 다양한 책을 출판하며, 그의 작품은 여전히 많은 어린이들에게 사랑받고 있음. 그의 책은 단순한 그림책을 넘어, 아이들에게 상상력과 호기심을 자극하는 매개체로 작용함.

GN⁺의 정리

     * 리처드 스캐리의 작품은 어린이 문학에서 중요한 위치를 차지하며, 그의 독창적인 그림과 동물 캐릭터는 아이들에게 친근하고 따뜻한 세계를 제공함.
     * 스캐리의 작품은 유럽의 일상적인 삶을 반영하며, 미국과는 다른 문화를 보여줌.
     * 그의 책은 단순한 그림책을 넘어, 아이들에게 상상력과 호기심을 자극하는 매개체로 작용함.
     * 스캐리의 작품은 여전히 많은 어린이들에게 사랑받고 있으며, 그의 독창적인 스타일은 어린이 문학에 큰 영향을 미침.

        Hacker News 의견

     * Richard Scarry의 책은 어린 시절 영어 어휘를 쌓는 데 큰 도움이 되었음. 그의 책에서 정육점 주인이 돼지인 점은 블랙 유머로 재미있었음.
          + Richard Scarry의 책은 아이들에게 친근하고 재미있게 다가옴. 다른 아동 도서와 달리 아이들을 얕보지 않음.
          + Joe Klassen과 Mac Barnett의 책도 재미있고 시각적으로 매력적임. 아이들이 좋아함.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
     * Richard Scarry의 책은 아이들에게 세상의 모습을 보여주려는 의도가 있음. 하지만 현실과의 차이로 인해 슬픔을 느끼게 됨.
"
"https://news.hada.io/topic?id=17569","리스프에서 멋진 3가지.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             리스프에서 멋진 3가지.

   Racket팀의 좋아요를 말미암아
   리스프 계열 언어에서 선진적으로 구현된 부분들을 소개합니다.
    1. Racket의 가장 강력하고 안전한 매크로
       1.1 안전한 매크로
       - C vs Racket: 매크로가 구문이어야 하는 이유
       - Common Lisp vs Racket: 위생적 매크로여야 하는 이유
       1.2 강력한 매크로
       - Syntax 객체를 이용한 Transform 개요
       - Syntax 객체와 리스트 다루기
       - define-syntax로 직접 Transform 해보기
       - 패턴매칭 매크로로 선언적으로 작성하기
       - 매크로 정의시 컴파일타임과 런타임
       - 함수나 변수를 정의하는 매크로
    2. Racket의 Thread와 함께하는 동적바인딩
       2.1 동적 바인딩이란?
       2.2 왜 동적 바인딩인가?
       - 전역변수에서 불필요한 전역 오염을 방지
       - 컨텍스트에서 불필요한 매개변수 제거
       - 의존성 주입에서 불필요한 보일러 플레이트 줄이기
       2.3 Thread 안전한 동적 바인딩
    3. Common Lisp의 동적이고 유연한 객체지향 시스템
       3.1 다양한 객체지향 구현
       3.2 유연한 메서드 시스템
       - 클래스 정의를 수정하지 않는 확장 가능한 메서드
       - 객체 타입에 따른 다중 디스패치
       - 횡단 관심사 제어를 위한 메서드 조합
       3.3 동적인 객체
       3.4 객체지향 시스템을 확장하는 MOP(Meta-Object Protocol)
       - 생성시 상태제어를 해보는 카운터
       - 기존 기능 확장을 해보는 타입 검사기
       - 클래스 정의에 키워드를 추가하여 값 검증해보기
       3.5 다중상속
       - C++의 다중상속 문제
       - CPL(Class Precedence List) 규칙

   나중에 공부할때 꼭 읽어봐야겠어요!!

   감사합니다!! ㅎㅎㅎ

   어떻게 여러 방언 중에서도 racket 의 매력에 빠지게 되셨는지 궁금합니다!

   HtDP(How to Design Programs) 라고 SICP의 쉬운 버전으로 공부를 하다가 접하게 되었는데요.
   문법이 깔끔하고 잘만들어져 있더라고요.

   그래서 관심을 가지고 이것저것 살펴보다보니 설계가 잘 된 부분들이 생각보다 많드란..

   감사합니다! 그런 책이 있군요
"
"https://news.hada.io/topic?id=17589","인터넷이 내일 중단된다면 보존할 Ask HN 정보","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      인터넷이 내일 중단된다면 보존할 Ask HN 정보

     * 인터넷이 내일 무기한으로 중단된다면, 어떤 콘텐츠를 다운로드하고 보존하고 싶은지에 대한 사고 실험임
     * 이 사고 실험은 사람들이 인터넷에 의존하는 정도와 중요한 정보를 보존하는 방법에 대해 생각하게 만듦
     * 개인적으로 중요한 데이터나 자료, 예를 들어 가족 사진, 중요한 문서, 연구 자료 등을 우선적으로 보존할 필요가 있음
     * 또한, 인터넷이 없는 상황에서 유용할 수 있는 오프라인 자료, 예를 들어 기술 문서, 교육 자료, 생존 가이드 등을 다운로드하는 것이 중요함
     * 이 사고 실험은 디지털 정보의 중요성과 인터넷 의존도를 다시 한번 생각하게 하는 계기가 됨

        Hacker News 의견

     * 위키피디아 영어판과 다양한 LLM 모델, Ollama.app의 최신 버전 및 모든 종속성을 다운로드하고 있음
          + 좋아하는 음악 아티스트의 앨범을 모두 토렌트로 다운로드하고 있음
          + 팟캐스트 앱에서 별표 표시된 에피소드를 모두 다운로드하고 있음
          + 가치 있는 기술 서적과 대규모 소설 EPUB 컬렉션을 다운로드하고 있음
          + 미국 육군 야전 매뉴얼, 특히 특수 작전 의무병 매뉴얼을 다운로드하고 있음
          + 지역의 모든 라디오 주파수 목록을 다운로드하고 있음
          + Carla Emory의 ""The Encyclopedia of Country Living"", ""Where There Is No Doctor"", ""Where There Is No Dentist""의 디지털 사본을 다운로드하고 있음
          + 이미 종이 버전이 있지만, 디지털 사본이 더 휴대성이 좋고 재생산이 쉬움
     * 인터넷이 사라져도 정보와 오락 면에서 평생 괜찮을 것 같음
          + LibGen/Anna's Archive의 큰 부분, 위키피디아, 생존 가이드, 다양한 웹사이트, 음악, Project Gutenberg, 온라인 도서 페이지의 항목, 비디오, VLC 등을 다운로드하고 있음
          + LibreOffice, Inspiral 앱, Gimp, Inkscape, Krita 등을 설치하여 창작 활동을 하고 있음
          + 디지털 삶의 기록을 보존하고 싶음
          + Calibre, Obsidian 등을 사용하여 조직화하고 있음
     * 인터넷이 전 세계적으로 중단되면 ""Networking For Dummies"" 책만 보존하면 됨
          + 7일 내에 로컬 네트워크가 복원될 것임
          + 모든 컴퓨터와 케이블이 동시에 고장 나면 ""RISC-V For Dummies""와 ""Cable-making For Dummies""도 보존하는 것이 좋음
     * 최근 인터넷 중단을 겪었지만, 실시간 통신과 은행 업무가 가장 큰 문제였음
          + VOIP 서비스로만 통신하고, 은행은 물리적 지점이 없어서 인터넷이 없으면 문제가 됨
          + 현금 기반 비즈니스가 많아 덜 문제가 됨
          + 온라인 미디어는 큰 문제가 아니며, 많은 정보가 도서관에 백업되어 있음
          + Y2K가 문제를 빠르게 해결할 수 있음을 보여줌
     * Kiwix 앱을 추천하며, 스마트폰을 충전할 방법이 있다면 유용할 것임
     * 역사적인 TV에 관심이 있으며, YouTube에서 VHS 테이프와 방송을 다운로드하여 보관하고 있음
          + 현재 7500개 이상의 비디오를 아카이브하고 있음
     * 카테고리 5 허리케인을 겪으며 전력망과 안테나가 파괴되었음
          + 기술 문서를 최대한 다운로드하여 인터넷을 다시 구축할 준비를 했음
          + 전력 사용을 절약해야 했으며, 태양광 패널과 배터리, 백업 발전기, 풍력 터빈을 설치할 계획임
     * 전 세계적인 재앙 상황에 대비하여 부팅 가능한 리눅스 USB 드라이브, 프로그래밍 언어 아카이브, 중요한 프로젝트 아카이브, 지도, 농업, 의학, 교육 프로그램, AI 모델 등을 보관할 계획임
          + 이 아카이브는 다른 행성으로 여행할 때도 유용할 것임
     * 지역 갈등으로 인해 몇 년 전 SD 카드와 플래시 드라이브에 오프라인 사본을 준비했음
          + Wikipedia, Stack Overflow 등을 Kiwix로 다운로드하고, Arch Linux iso와 패키지 미러, Godot Engine 등을 보관하고 있음
          + 대기업들이 온라인 전용 세계를 추진하는 것이 아쉬움
"
"https://news.hada.io/topic?id=17574","돈이 필요하면 Job을 선택하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         돈이 필요하면 Job을 선택하지 마세요

     * 이야기의 배경
          + 저자 John Arundel은 자신의 경력을 돌아보며, 독립적인 개발자로서의 도전과 그 과정에서의 교훈을 공유함.
          + 독립적인 개발자나 창작자가 직면하는 가장 큰 도전 중 하나는 돈과 관련된 문제임.

고정 가격 계약의 문제점

     * 고객은 가능한 한 낮은 가격에 합의하고 컨설턴트로부터 최대한 많은 것을 짜내려고 함
     * 컨설턴트는 고객이 작업을 승인하는 데 필요한 가장 빠르고 저렴한 작업을 수행하는 것이 이익임
     * 고정 가격 계약은 양측에 나쁜 뉴스임

대신 제안할 만한 것

     * 고객에게 고정 가격이 양측 모두에게 이익이 되지 않는 이유를 설명하고 컨설턴트에게 공정한 시간당 요금을 지불할 것을 제안함
     * 고객에게 요청한 내용을 제공하는 데 걸리는 시간을 신중하고 현실적으로 예측함
     * 고객은 처음부터 전체 금액에 구속되지 않고 필요한 비용 통제를 할 수 있음

컨설턴트의 두 가지 유형

     * Poacher(밀렵꾼)은 빠른 수익을 내고 깨끗하게 도망가기를 원함
     * Farmer(농부)는 장기적인 게임을 하고, 양을 가깝게 깎지만 부드럽게 대하고, 양을 먹이고 돌보며, 겨울에 따뜻하게 해주고, 아플 때 돌봄
     * 농부는 양들을 돌봐주면 그들이 농부를 돌봐줄 것이라는 것을 앎

컨설턴트 요금 정하기

     * 고객이 요금을 받아들일 때마다 다음에는 조금 더 높게 책정함
     * 사람들이 불평하거나 거절하기 시작하면 적정 선에 근접한 것임
     * 수락률이 50% 정도로 떨어지면 적정 요금에 도달한 것임
     * 시간이 지날수록 요금은 꾸준히 인상되어야 하지만 가치에 부합해야 함

할인 요청 고객과의 거래

     * 할인을 원하는 고객은 결국 최악의 고객이 될 수 있음
     * 할인을 받아들이면 그들은 당신이 그들의 낚싯밥에 걸려들었다는 것을 앎
     * 할인을 원하는 고객과 일하지 않는 것이 좋음
     * Jerry Weinberg: ""돈이 필요하다면 그 일을 맡지 마라""

고객이 조언을 무시할 때

     * 화내거나 비난하기 쉽지만, 그들은 당신이 말하는 것을 들을 준비가 되어 있지 않을 수 있음
     * 때로는 다른 방식으로 할 때 어떤 일이 일어나는지 배울 시간이 필요함
     * Bitfield의 컨설팅 제1법칙: ""때로는 고객이 당신의 조언을 받아들이기 전에 당신의 조언을 따르지 않았을 때의 고통을 느낄 필요가 있음""
     * 그들이 돌아올 때 당신이 다음에 하는 말에 대한 존경심이 크게 증가함

다음 이야기

     * 저자의 컨설팅 경력이 예상치 못한 방향으로 흘러갔지만, 결국 필요한 곳으로 이끌렸다는 이야기를 다음에 다룰 예정임.

        Hacker News 의견

     * 고용 측면에서, 풀타임 팀을 구성하는 것이 더 좋다고 생각함. 컨설턴트도 회사의 코드를 배우는 데 시간이 필요하며, 이는 온보딩 시간과 직원 교육 비용을 포함함
          + 흥미로운 프로젝트는 주로 풀타임 직원이 많은 회사에서 발생함
          + SOC2 컴플라이언스와 같은 컨설팅 작업은 주로 문서 복사 및 편집 작업임
          + 간단한 프로젝트에는 저렴한 변호사를 선호하며, 복잡한 사건에는 높은 비용을 지불할 의향이 있음
          + 컨설팅이 시간 대비 효율적일 수 있지만, 다른 수입원보다 부유해지지는 않음
     * 컨설턴트로서 고정 가격 계약을 선호함. 시간제 계약은 고객의 요구에 따라 일하게 되어 자율성이 부족함
          + 고정 가격 계약은 일정과 예산을 스스로 결정할 수 있어 자율성이 높음
     * 정부와 대기업 모두에서 비용이 많이 드는 부서가 중요하다고 여겨지는 경향이 있음
          + 효율성을 보상하는 민간 기업과는 대조적임
     * 고객이 비용을 지불하는 이유는 문제를 전문가에게 맡기고 안심하기 위함임
          + 높은 비용을 청구할수록 고객의 신뢰가 높아짐
          + 컨설턴트로서 자신감을 가지고 일하는 것이 중요하며, 요금을 두 배로 올리는 것이 좋은 전략임
     * 고정 가격 계약은 창작자에게 많은 위험을 주지만, 시간제 계약은 위험이 없음
          + 적절한 균형을 찾는 것이 중요함
     * 리테이너 계약은 컨설턴트에게 안정적인 수입원이 될 수 있음
     * 할인 요구하는 고객은 종종 최악의 고객이 될 수 있음
          + 고객이 컨설턴트를 다른 공급자로 대체할 수 없을 때, 가격 협상은 어려움
     * 고정 가격 계약은 잘못된 인센티브 구조를 만들 수 있음
          + 고객은 낮은 가격을 원하고, 컨설턴트는 최소한의 작업으로 계약을 완료하려 함
          + 버그 수정을 포함한 고정 가격 계약은 인센티브를 잘 맞출 수 있음
     * 시간제 계약은 판매자에게는 쉬울 수 있지만, 고객에게는 불신을 초래할 수 있음
          + 고정 가격 계약이 양측 모두에게 더 나은 경험을 제공할 수 있음
"
"https://news.hada.io/topic?id=17506","Notion, 업무에 최적화된 email 앱 공개 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Notion, 업무에 최적화된 email 앱 공개 예정

     * 셀프 오거나이징 하는 Inbox : 간단한 프롬프트로 이메일을 자동 정리, 아카이브 및 임시 보관
          + ""모든 디자인 관련 이메일을 중요함으로 표시"", ""모든 여행 이메일에서 주요 날짜 추출""
     * 지루한 메일 주고받기 없음: AI가 일정 잡기와 후속 조치를 처리하여 이메일 핑퐁을 피함
          + 상대방과의 쉬운 일정 스케줄링, 회신 받을 때까지 요청 다시 보내기
          + 나만의 프롬프트로 팔로우업을 자동 처리하게 가능
     * 사소한 번거로움 제거
          + 같은 이메일 두 번 쓰지 않기 : 원클릭 스니펫으로 시기적절하고 개인화된 이메일 전송. AI가 적절한 것을 제안하기도 함
          + 어려움 없는 일정 잡기 : Notion Calendar로 쉽게 회의 일정을 잡고 충돌 방지 가능. 메일 안에서 모두 처리
     * 가장 빠른 이메일 : 단축키, 빠른 답장, 초고속 플랫폼으로 더 빠르게 작업 처리
     * 아름답고 익숙함 : 사랑받는 Notion 기능을 속도와 편의성을 위한 현대적 디자인에 담음

Q&A

     * Notion Mail에 언제쯤 액세스할 수 있나요?
          + 2025년 초에 Notion Mail을 공식 출시할 계획
     * Notion Mail과 호환되는 이메일 서비스는?
          + 초기 출시 시 Google 및 Gmail 계정과 원활하게 통합될 예정
     * Notion Mail은 모바일 기기에서 사용 가능한가요?
          + 2025년에 iPhone과 Android 기기에서 Notion Mail 사용 가능

   Skiff에서 custom domain mail을 무료로 잘쓰고 있었는데 Notion에서 인수 후 서비스 종료함.
"
"https://news.hada.io/topic?id=17483","HTML 폼 검증의 활용 부족폼 검증의 활용 부족

  HTML 폼 검증의 저조한 활용

     * HTML 폼은 강력한 검증 메커니즘을 가지고 있지만, 많이 사용되지 않음. 많은 사람들이 이에 대해 잘 알지 못함. 이는 설계상의 결함 때문일 수 있음.

    속성, 메서드, 그리고 프로퍼티

     * 빈 입력을 방지하기 위해 required 속성을 추가할 수 있음.
     * 입력에 제약을 추가하는 방법은 세 가지가 있음:
          + 특정 type 속성 값 사용: ""email"", ""number"", ""url""
          + ""pattern"" 또는 ""maxlength"" 같은 다른 입력 속성 사용
          + setCustomValidity DOM 메서드 사용: 임의의 검증 로직을 생성하고 복잡한 경우를 처리할 수 있는 가장 강력한 방법임.

    명령형 API의 미묘함

     * setCustomValidity API는 메서드로만 제공되어 사용하기 불편함.
     * 예를 들어, 입력이 비어 있을 때 폼 제출을 막기 위해 required 속성과 같은 기능을 구현할 수 있음.
     * 초기 렌더링 시 입력이 비어 있으면 유효하지 않도록 설정해야 함.

    보일러플레이트 문제

     * 초기 값을 검증하는 방식이 번거로움.
     * 검증 로직이 onChange 핸들러와 초기 렌더링 단계에서 중복됨.
     * useRef + useLayoutEffect + onChange 조합은 복잡함.

    누락된 부분

     * custom-validity 속성이 필요함.
     * 선언적 프레임워크에서 입력 검증을 강력하게 정의할 수 있음.

    비동기 검증의 힘

     * 사용자 이름 입력이 사용되지 않은 경우에만 유효해야 하는 경우를 처리할 수 있음.
     * 서버에 비동기 호출이 필요하며, 중간 상태가 필요함.

    구현

     * verifyUsername 함수를 사용하여 사용자 이름의 고유성을 확인함.
     * useQuery를 사용하여 서버 요청 상태를 관리함.
     * customValidity 속성을 사용하여 비동기 검증 흐름을 설명함.

    비밀번호 확인 폼

     * 입력된 비밀번호를 반복 입력해야 하는 폼을 구현함.
     * 두 입력 필드가 일치하는지 확인하여 검증함.

  결론

     * setCustomValidity는 다양한 검증 요구를 충족할 수 있음.
     * 강력한 API가 진정한 힘을 제공함.
     * HTML 스펙에 이 기능이 추가되기를 기대함.

GN⁺의 정리

     * HTML 폼 검증은 강력하지만 잘 활용되지 않음. 이는 API의 복잡성 때문일 수 있음.
     * setCustomValidity 메서드는 복잡한 검증 로직을 처리할 수 있는 강력한 도구임.
     * 비동기 검증과 같은 복잡한 시나리오를 처리할 수 있는 방법을 제시함.
     * 이 글은 개발자들이 HTML 폼 검증을 더 잘 활용할 수 있도록 돕는 유용한 정보를 제공함.

        Hacker News 의견

     * 웹 브라우저는 여전히 내장된 HTML 유효성 검사 메시지의 스타일을 변경할 수 없으며, Chrome과 Firefox는 OS 플랫폼 UI 지침을 따르지 않아 프로젝트의 미적 감각과 충돌함
          + Chrome은 이전에 벤더 접두사 가상 요소 선택자를 사용하여 유효성 검사 메시지의 스타일을 변경할 수 있었으나, 이 기능이 제거되었음
          + HTML 콤보박스와 <select multiple>의 비효율적인 사용에 대한 불만이 있음
     * 특정 type 속성 값(예: ""email"", ""number"", ""url"")을 사용하면 모바일에서 최적의 키보드를 트리거하여 사용자 경험을 크게 향상시킬 수 있음
     * 사양을 작성하는 사람들이 실제 사용과 동떨어져 있으며, 간단한 것에는 적합하지만 복잡한 폼에서는 직접 작성하는 것이 더 나음
     * 폼의 기본적인 단순성을 간과했던 경험을 후회하며, 다른 사람의 관점을 공유해줘서 감사함
     * 체크박스에 레이블이 있을 때, 레이블에 ""for"" 속성을 추가하여 레이블을 클릭해 체크박스를 활성화/비활성화할 수 있도록 해달라는 요청이 있음
     * React를 사용하지 않는 간단한 예제 제공
          + HTMLObjectElement.setCustomValidity
     * HTML 폼 유효성 검사는 훌륭하지만 Firefox for Android에서는 작동하지 않는 큰 문제가 있음
          + 관련 버그
     * 많은 프레임워크와 라이브러리가 스타일 가능한 유효성 검사 기능을 제공하므로, 굳이 고생할 필요가 없음
     * 유효성 검사를 과도하게 사용하지 않도록 주의해야 함
          + Groupon 환불 시 ""최소 15단어"" 조건 때문에 HTML을 검사해야 했던 경험이 있음
          + 유효성 검사 패턴이 구두점을 전혀 허용하지 않음
     * 2FA 입력에 type=password를 잘못 사용하는 사이트는 비밀번호 관리자와 브라우저를 혼란스럽게 함
"
"https://news.hada.io/topic?id=17543","Notepad++ 출시 21주년 기념 행사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Notepad++ 출시 21주년 기념 행사

     * 조금의 향수: 시작점
          + 2003년, Don Ho라는 개발자가 기존의 텍스트 편집기가 부족하다고 느껴 Notepad++ 개발을 시작함
          + Scintilla라는 무료 소스 코드 편집 컴포넌트를 기반으로 C++로 작성되어 성능이 뛰어남
     * 우리가 사랑하는 이유: 특별한 기능들
          + Notepad++는 단순하면서도 복잡한 기능을 제공하여 다양한 사용자층을 만족시킴
          + 자동 저장, 파일 비교, 다양한 프로그래밍 언어 지원 등 강력한 기능 제공
          + 수많은 플러그인을 통해 JSON 읽기, FTP 연결 등 다양한 작업 가능
     * 우여곡절: 드라마와 승리
          + 2019년 ""Free Uyghur"" 버전을 출시하여 사회적, 정치적 이슈에 대한 입장을 표명함
          + Visual Studio Code 같은 최신 IDE와의 경쟁 속에서도 여전히 사랑받고 있음
     * 비결: 커뮤니티의 사랑과 오픈 소스 정신
          + 오픈 소스로서 많은 개발자들이 참여하여 Notepad++를 개선하고 발전시킴
          + SourceForge Community Choice Awards 등 여러 상을 수상하며 소프트웨어 세계에서 인정받음
     * 미래를 향해: Notepad++의 다음 단계
          + AI 기능 추가나 미래 기술과의 통합 가능성 등 다양한 발전 가능성 존재
          + 빠르고 효율적인 편집기로서의 본질을 유지하며 앞으로도 계속 사랑받을 것임

GN⁺의 정리

     * Notepad++는 21년 동안 개발자와 작가들에게 필수적인 도구로 자리 잡아 왔음
     * 오픈 소스 커뮤니티의 기여로 지속적인 발전을 이루었으며, 다양한 기능과 플러그인으로 사용자 경험을 향상시킴
     * 사회적 이슈에 대한 입장을 표명하며 단순한 소프트웨어를 넘어선 플랫폼으로 자리 잡음
     * Visual Studio Code와 같은 최신 IDE와의 경쟁 속에서도 여전히 사랑받는 이유는 그 단순함과 효율성에 있음
     * 비슷한 기능을 가진 제품으로는 Sublime Text, Atom 등이 추천됨

        Hacker News 의견

     * Notepad++를 계속 사용하는 이유는 다양한 편집기와 IDE를 시도해봤지만, Notepad++가 가장 적합하다고 느껴서임
          + Notepad++로 편집, 기본 설정, 플러그인 없음
          + 명령줄로 git과 grep 사용 (Console2 또는 Git Bash)
          + 파일 탐색은 File Explorer와 Everything 사용
          + Beyond Compare로 시각적 차이 및 병합
          + WinSCP/Putty로 SFTP/SSH 사용 (주로 Linux)
          + Synergy로 Windows와 MacOS 간 키보드 및 마우스 공유
          + 여러 운영체제를 동시에 사용하는 것을 즐기며, 각 애플리케이션/인터페이스에 맞게 작업을 분리하는 것이 유용하다고 생각함
          + UI 뒤에 숨겨진 도구를 사용하는 것이 항상 나쁜 것은 아님
          + Notepad++에 대한 큰 존경을 표함
     * Notepad++는 실제로 글을 쓰기보다는 대용량 파일 보기, 복잡한 검색 및 치환, 정규식, 파일 재포맷, 데이터 조작 등에 사용함
          + 주로 주 2~3회 사용하며, VS Code 같은 도구와 경쟁한다고 생각하지 않음
     * 소프트웨어는 이론적으로 영원히 존재할 수 있다고 생각함
          + 비트 부식은 현실이지만, 약간의 유지보수와 작은 커뮤니티로도 계속해서 소프트웨어를 갱신할 수 있음
          + C 언어는 50년이 넘었지만 여전히 사용되고 있음
          + 항상 온라인 상태이거나 클라우드 서비스에 의존하는 현대 소프트웨어는 수명이 짧아지는 경향이 있음
          + 오래 지속되는 것을 만드는 것을 좋아하며, 그런 방식으로 만들어진 것을 사용하는 것을 선호함
     * 최근 Visual Studio Code가 Notepad++보다 로그 파일을 더 부드럽게 처리하는 것을 발견함
          + Notepad++는 여전히 일상적인 텍스트 작업에 유용하며, TODO 파일이나 설정 편집 등에 사용함
          + CudaText라는 크로스 플랫폼 대체 도구를 고려했지만, Windows에서는 여전히 Notepad++를 사용함
     * Notepad++는 메모, 할 일 목록, 붙여넣기, 새 탭을 버퍼로 사용하는 데 매일 사용함
          + Notepad++와 WinMerge는 가장 좋아하는 도구이며, Visual Studio 2022와의 통합은 신선한 경험이었음
          + Visual Studio의 UI/UX 기능에 불만이 많지만, 현재는 어쩔 수 없이 사용 중임
     * Notepad++는 IT 부서에 의해 잠긴 새 PC에서 유용하게 사용됨
          + 몇몇 대형 컨설팅 회사에서 Notepad++가 여러 번 도움을 줌
     * Scintilla는 Notepad++, Geany 등의 편집기 구성 요소로, 25년이 되었으며, 독점 편집기에서 벗어나게 해준 기반이었음
     * 고등학교 17세 아들이 학교에서 제공한 노트북에 Notepad++가 없어서 불편함을 느꼈음
          + 아들에게 휴대용 설치 방법을 알려주고, 주말에 Gdrive를 통해 설치할 예정임
     * 파일 시스템 전반에서 파일을 프로젝트로 정의할 수 있는 다른 편집기를 찾지 못했음
          + VS Code의 다중 루트 프로젝트는 충분하지 않음
     * Notepad++의 가장 좋아하는 기능은 매크로 기록과 검색/치환 기능임
          + 데이터 정리에 빠르게 사용할 수 있어 유용함
"
"https://news.hada.io/topic?id=17600","퀸시 존스 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                퀸시 존스 사망

        Hacker News 의견

     * Quincy Jones는 음악에 큰 기여를 한 인물로, 그의 앨범 ""The Dude""와 ""Back on the Block""의 팬임
          + Quincy Jones는 컴퓨팅 분야에도 관여했으며, ACM Computers in Entertainment Magazine의 자문 위원회에 있었음
          + Xerox PARC 연구원 Alan Kay의 Viewpoints Research Institute의 이사회에도 있었음
          + 그의 컴퓨팅 관련 활동에 대해 더 알고 싶어함
     * 어린 시절 받은 레코드 플레이어로 Ray Charles의 음악을 즐겼으며, Quincy Jones가 편곡한 ""One Mint Julep""을 특히 좋아했음
          + Quincy Jones는 다른 음악가들에게 긍정적인 영향을 미친 인물로 평가받음
          + Tom Bähler와의 인터뷰에서 Quincy와의 경험에 대한 아름다운 이야기를 들을 수 있음
          + Rod Temperton과의 협업은 특별한 마법을 만들어냈음
     * Quincy Jones는 음악적 감정을 악보로 표현할 수 있는 능력을 자랑스럽게 여김
          + 밴드를 가수가 노래하듯 연주하게 만드는 것이 편곡의 핵심임
     * Netflix 다큐멘터리 ""Quincy""는 그의 경력과 개인적인 삶의 다양한 면모를 보여줌
          + Frank Sinatra는 라스베이거스에서 흑인 공연자들이 제대로 대우받도록 강력히 요구했음
          + Buzz Aldrin이 달에서 Quincy의 ""Fly Me to the Moon"" 편곡을 연주했음
     * GA Music Hall of Fame의 2006년 헌액식에서 Quincy Jones와 Russell Simmons가 Jermaine Dupri를 헌액했음
          + Quincy Jones는 여전히 음악에 대한 열정을 가지고 있음
     * Quincy Jones와 Michael Jackson의 ""Off The Wall"", ""Thriller"", ""Bad""는 놀라운 업적임
     * Quincy Jones는 수많은 어린이들에게 음악적 영감을 준 인물로 평가받음
     * 모든 장르의 대중 음악에서 중요한 인물로, 그의 딸 Rashida Jones가 만든 다큐멘터리를 추천함
     * Quincy Jones는 뛰어난 인물로, 현재의 시대가 위대한 인물들의 시대에서 점점 멀어지고 있는 것 같다고 느끼고 있음
     * ""Back on the Block"" 앨범의 ""The Secret Garden""은 조용한 분위기의 대표적인 곡으로 추천함
"
"https://news.hada.io/topic?id=17542","애플, Pixelmator 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           애플, Pixelmator 인수

     * Pixelmator 팀이 Apple에 합류할 계획을 발표
          + Apple의 디자인, 사용 용이성, 성능에 영감을 받아 제품을 개발해 왔음
          + 리투아니아 빌뉴스에서 작은 팀이 이룬 성과를 돌아보면 놀라운 일임
          + 이제 더 넓은 청중에게 다가가 창의적인 사람들의 삶에 더 큰 영향을 미칠 수 있는 기회를 얻게 됨
     * 기대할 점
          + Pixelmator가 Apple에 인수될 예정이며, 이는 규제 승인에 따라 진행될 것임
          + 현재 Pixelmator Pro, Pixelmator for iOS, Photomator 앱에는 큰 변화가 없을 예정임

GN⁺의 정리

     * Pixelmator 팀이 Apple에 합류하면서 더 많은 사용자에게 다가갈 기회를 얻게 됨
     * 현재 앱에 큰 변화는 없지만, 앞으로의 업데이트가 기대됨
     * 이 기사는 창의적인 소프트웨어 개발의 중요성과 글로벌 기업과의 협업이 가져올 수 있는 긍정적인 영향을 보여줌
     * 유사한 기능을 가진 다른 제품으로는 Adobe Photoshop과 Affinity Photo가 있음

        Hacker News 의견

     * Pixelmator 팀에 축하를 전하며, 이 소프트웨어는 잘 설계되고 훌륭하게 구축된 프로그램임. Adobe의 구독료에 비해 훨씬 저렴한 가격으로 Photoshop을 대체할 수 있는 가치가 있음
     * Apple이 DarkSky를 인수했을 때 서비스가 망가졌다는 경험을 언급하며, Pixelmator가 Apple 전용 소프트웨어라는 점에서 걱정이 됨
     * Apple의 프로 앱들이 최근 이상한 상태에 있으며, Adobe의 제품군에 대한 경쟁력을 갖추기 위해 Apple이 소프트웨어 포트폴리오를 구축하면 좋겠다는 의견임
     * Pixelmator 창립자들이 제품에 집중하는 마케팅 전략을 강조했으며, 이번 인수에 축하를 전함
     * Pixelmator의 웹사이트가 Apple 제품처럼 보이며, Apple이 인수하거나 복제할 것 같았다는 의견임
     * Pixelmator가 Apple의 API와 생태계에 잘 통합되어 있었지만, Apple이 인수 후 비인기 변경을 할까 걱정됨
     * 사용자에게는 좋지 않을 수 있지만, 회사에는 적절한 시기에 올바른 결정이라는 의견임. 시장이 더 작아졌다는 우려를 표함
     * Pixelmator를 Mac의 기본 이미지 편집기로 무료 제공하면 좋겠다는 의견임
     * Pixelmator가 Photoshop의 대안으로 완벽하며, Apple이 iLife 제품군의 일부로 무료 제공하면 좋겠다는 의견임
     * Pixelmator와 Affinity Photo를 비교해보고 싶다는 의견임
"
"https://news.hada.io/topic?id=17602","pqoqubbw/icons - 부드러운 애니메이션을 포함한 아이콘 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               pqoqubbw/icons - 부드러운 애니메이션을 포함한 아이콘 오픈소스

     * 오픈소스 라이브러리인 Lucide 의 아이콘들을 Framer-Motion(React Animation 라이브러리)으로 애니메이션 생성
     * Home, 메뉴, 화살표, 확장, 다운로드, Undo/Redo, 좋아요, 사용자 등의 기본 아이콘 46종(현재 기준)
     * 코드 복사 및 tsx 로 다운로드 제공
     * 개인/상용 프로젝트에 사용 가능

   귀엽고 직관적이라 PPT용도로도 좋겠네요.
"
"https://news.hada.io/topic?id=17576","프로젝트 Sid: AI 문명을 향한 다중 에이전트 시뮬레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   프로젝트 Sid: AI 문명을 향한 다중 에이전트 시뮬레이션

     * 프로젝트 Sid: AI 문명을 향한 다중 에이전트 시뮬레이션
          + 이 저장소는 ""Project Sid: Many-agent simulations toward AI civilization""이라는 기술 보고서를 포함하고 있음
          + arXiv에 게재 예정임
     * 초록
          + AI 에이전트는 고립되거나 소규모 그룹 내에서 평가되어 왔으며, 상호작용의 범위와 복잡성은 제한적이었음
          + 문명적 과정을 반영하는 대규모 시뮬레이션은 아직 탐구되지 않았음
          + 본 연구에서는 10~1000개 이상의 AI 에이전트가 에이전트 사회 내에서 어떻게 행동하고 발전하는지를 보여줌
          + PIANO(Parallel Information Aggregation via Neural Orchestration) 아키텍처를 소개하여 에이전트가 인간 및 다른 에이전트와 실시간으로 상호작용하면서 여러 출력 스트림 간의 일관성을 유지할 수 있게 함
          + 인간 역사를 바탕으로 한 문명적 벤치마크를 사용하여 대규모 시뮬레이션에서 에이전트 성능을 평가함
          + Minecraft 환경 내에서 설정된 이러한 시뮬레이션은 에이전트가 자율적으로 전문화된 역할을 개발하고, 집단 규칙을 준수 및 변경하며, 문화 및 종교적 전파에 참여할 수 있음을 보여줌
          + 이러한 초기 결과는 에이전트가 AI 문명을 향한 중요한 이정표를 달성할 수 있음을 보여주며, 대규모 사회 시뮬레이션, 에이전트 조직 지능, 인간 문명에 AI 통합을 위한 새로운 길을 열어줌
     * 논문
          + 논문은 두 곳에서 이용 가능함
               o arXiv: 게재 예정
               o PDF: 2024-10-31.pdf (이 저장소 내)

        Hacker News 의견

     * 인공지능 에이전트가 자율성과 지속적인 환경을 갖춘 개념으로, 비즈니스 문제에 적용 가능성이 있음
          + 경영진이 진정한 혁신을 이해하지 못하는 것에 대한 아쉬움이 있음
     * 철학자나 AI 연구자는 아니지만, 시스템이 원칙에서 출발해 진화하도록 하는 것이 중요하다고 생각함
          + 자기 보존, 의사소통, 기억 등 원칙을 기반으로 시스템을 설계해야 함
          + 인간의 삶을 '생명', '자유', '사랑/연결', '탐욕'으로 설명할 수 있다고 봄
     * 이 프로젝트가 과학적 연구 관점에서 유용하지 않다고 생각함
          + 실험 설계나 명확한 목표가 부족하다고 지적함
     * 논문이 거짓 주장으로 구성되었다고 확신함
          + AI 에이전트가 선거 관련 활동을 조정했다는 주장은 충분한 증거가 없다고 봄
     * 이 프로젝트가 문명에 대한 이점이 의심스럽지만, 흥미로운 시뮬레이션 게임이 될 수 있다고 생각함
     * Mozilla Firefox에서 비디오가 재생되지 않음
     * 에이전트가 Minecraft에서 역할을 수행하지 못하며, 사회 조직이 실제 인간 사회에 적용되기 어렵다고 봄
          + 에이전트의 역할이 하드코딩되어 있다고 지적함
     * GPT-4를 사용한 실험이 정직한 연구에 적합하지 않다고 생각함
     * 문명이 인간과 같은 복잡성을 가지지 않아 실제 사회보다는 스크립트된 행동에 가깝다고 느낌
     * 'Agentic'이라는 단어가 거슬린다고 언급함
"
"https://news.hada.io/topic?id=17510","Apple, M4 맥북 프로 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Apple, M4 맥북 프로 출시

     * M4, M4 Pro, M4 Max의 M4 시리즈 칩을 탑재한 신규 맥북 프로
     * MacBook Pro 14는 M4 칩과 Thunderbolt 4 포트를 포함하며, 16GB 메모리로 시작
     * M4 Pro와 M4 Max 모델은 14 및 16 인치로 제공되며, Thunderbolt 5를 지원하여 더 빠른 전송 속도와 고급 연결성을 제공
     * 모든 모델은 최대 1000 니트까지 밝아진 Liquid Retina XDR 디스플레이와 12MP Center Stage 카메라, 최대 24시간의 배터리 수명을 제공
     * 14인치 모델은 2,390,000원, 16인치 모델은 3,690,000원부터 시작

강력한 성능의 M4 시리즈 칩 탑재

     * M4 칩은 2세대 3나노 공정으로 제작되어 개인용 컴퓨터용으로 가장 발전된 칩 라인업을 자랑
     * 단일 스레드 CPU 성능이 뛰어나며, 멀티 스레드 CPU 성능도 우수함. AI를 위한 머신 러닝 가속기와 고급 GPU, 더 빠르고 효율적인 Neural Engine을 포함
     * M4 칩은 최대 24시간의 배터리 수명을 제공하여 사용자가 한 번의 충전으로 더 많은 작업을 수행할 수 있게 함
     * M4, M4 Pro, M4 Max 모델별 성능 비교
          + M4: M1 대비 최대 3.4배 빠른 Blender 3D 렌더링, 최대 1.8배 빠른 이미지 처리
          + M4 Pro: M1 Pro 대비 최대 3배 빠른 Redshift 3D 렌더링, 최대 2.2배 빠른 시뮬레이션
          + M4 Max: M1 Max 대비 최대 3.5배 빠른 Redshift 3D 렌더링, 최대 128GB 통합 메모리로 대규모 LLM 모델링

M4를 탑재한 새로운 MacBook Pro 14

     * 14인치 MacBook Pro는 기업가, 학생, 창작자에게 이상적인 선택임. 더 강력한 10코어 CPU와 10코어 GPU를 특징으로 함.
     * M4 모델은 두 개의 고해상도 외부 디스플레이를 지원하며, 세 개의 Thunderbolt 4 포트를 제공함.

  M4 Pro를 탑재한 MacBook Pro: 전문가를 위한 강력한 성능

     * M4 Pro는 연구자, 개발자, 엔지니어, 창작 전문가에게 더 빠른 성능을 제공함.
     * 14코어 CPU와 최대 20코어 GPU를 특징으로 하며, 이전 세대보다 메모리 대역폭이 75% 증가함.

  M4 Max를 탑재한 MacBook Pro: 궁극의 프로 성능

     * M4 Max는 데이터 과학자, 3D 아티스트, 작곡가를 위해 설계됨. 최대 16코어 CPU와 40코어 GPU를 제공함.
     * 최대 128GB의 통합 메모리를 지원하여 대규모 언어 모델과 상호작용할 수 있음.

  업계 최고의 Liquid XDR 디스플레이

     * 완전히 새로운 Nano-texture 디스플레이 옵션으로 반사광 최소화
     * SDR 1000 니트, HDR 1600 니트 밝기로 야외에서도 선명한 화면

  새로운 12MP Center Stage 카메라

     * 향상된 비디오 품질을 제공하는 12MP Center Stage 카메라를 포함
     * Center Stage는 사용자가 움직일 때 자동으로 프레임 중앙에 위치하도록 함.

  Thunderbolt 5의 도입

     * M4 Pro와 M4 Max 모델은 Thunderbolt 5 포트를 통해 더 빠른 전송 속도를 제공함.
     * HDMI 포트, SDXC 카드 슬롯, MagSafe 3 포트, 헤드폰 잭을 포함함.

  Apple Intelligence와 함께하는 새로운 시대

     * Apple Intelligence는 개인용 컴퓨터에 개인 지능을 도입하여 새로운 시대를 열어감.
     * 강력한 생성 모델과 업계 최초의 개인정보 보호 기능을 결합함.

  macOS Sequoia와의 경험

     * macOS Sequoia는 iPhone 미러링, Safari의 새로운 기능, 게임 모드 개선 등을 포함하여 MacBook Pro 경험을 완성함.

   계속 M1이랑 성능 비교하는건 좀 이상하긴 하네요. 이러다가 M10 칩 나올 때도 M1이랑 비교하고 있진 않겠죠? 😂

   일반적인 교체주기가 아니라서 언급을 안 한 이유는 알겠는데, 말씀하신 대로 직전 제품 대비 향상도 같이 언급을 했으면 좋겠습니다

   저도 동일한 생각을 했습니다. 애플 마케팅팀에서 소비자들을 눈속임하고 있다고 생각합니다.

   드디어 기본메모리가 무려 16gb 네요...

        Hacker News 의견

     * Apple의 프라이버시 중심 엔지니어링에 대한 존경을 표함. 로컬에서 실행할 수 있을 때까지 AI 기능을 출시하지 않았으며, 클라우드 기반 AI를 하기 전에 Private Cloud Compute를 설계하고 출시함. 다른 회사들은 프라이버시 중심 기능을 간과하고 있음. Apple의 데이터 존중과 인센티브 정렬에 만족함.
     * 싱글 코어 성능이 매우 빠름. 싱글 코어 CPU가 기계의 ""속도""를 가장 잘 나타내는 지표라고 생각함. Apple이 이를 보도자료에서 잘 드러내지 않았다고 느낌.
          + M1: 2,419 (5nm)
          + M2: 2,658 (5nm)
          + M3: 3,076 (3nm)
          + M4: 3,810 (3nm)
     * ""16인치 MacBook Pro M1 Pro와 비교했을 때 최대 1.8배 빠름""이라는 주장에 동의함. 2020년 MacBook M1이 최고의 구매였다고 생각함.
     * 최근 몇 년간의 Apple 제품 비디오가 아름다운 캠퍼스에서 발표자만 있는 모습이 이상하고 불안함. 특히 Apple의 RTO 접근 방식과 관련하여.
     * M4 Max는 최대 128GB RAM과 ""초당 반 테라바이트 이상의 통합 메모리 대역폭""을 제공함. LLM 사용자들에게 기쁜 소식임.
     * M4 Pro가 M1 Pro보다 최대 3배 빠르다고 주장하지만, 실제 성능 향상은 대부분의 작업에서 M3보다 약 15% 정도일 가능성이 높음. 다른 웹사이트의 벤치마크를 기다려야 함.
          + 14인치 MacBook Pro M4: 4.5배
          + 14인치 MacBook Pro M3: 3.8배
          + 13인치 MacBook Pro M1: 2.7배
     * 외장 SSD를 사용하여 저장 공간을 업그레이드하는 것이 가능한지에 대한 의견을 구함. 데이터 분석이나 비디오 편집에 적합한 SSD 추천을 요청함.
     * 모든 MacBook Pro 모델은 8K 해상도를 지원하는 HDMI 포트, SDXC 카드 슬롯, MagSafe 3 충전 포트, 헤드폰 잭, Wi-Fi 6E 및 Bluetooth 5.3을 지원함. Wifi 7은 지원하지 않음.
     * Pro의 기본 메모리가 16GB로 시작하는 것에 만족하지만, 최대 32GB로 제한된 것에 놀람. Apple 생태계 외부에서는 메모리가 저렴하고 업그레이드 가능함.
     * 이번 MacBook이 처음으로 매력적이라고 느낌. 로컬 LLM이 사용 가능해짐에 따라 충분한 메모리가 제공됨. Linux OS를 하드웨어에서 실행할 수 있기를 바람.
"
"https://news.hada.io/topic?id=17516","구글 CEO, "회사내 신규 코드의 4분의 1 이상이 AI로 만들어진다"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                구글 CEO, ""회사내 신규 코드의 4분의 1 이상이 AI로 만들어진다""

     * 구글은 AI에 내/외부적으로 All-in 하고 있음
     * 구글 CEO인 Sundar Pichai는 화요일 3분기 실적 발표에서 구글에서 생성된 새로운 코드의 25% 이상이 AI에 의해 생성된다고 밝힘
     * Pichai는 코딩에 AI를 사용하는 것이 구글 내부의 ""생산성과 효율성을 높이고 있다""고 말함. 코드가 생성된 후에는 직원들이 검토하고 확인함

     ""이는 우리 엔지니어들이 더 많은 일을 더 빠르게 할 수 있도록 도와줍니다. 저는 우리의 진전과 앞으로의 기회에 활력을 얻고 있으며, 계속해서 훌륭한 제품을 만드는 데 집중할 것입니다.""

구글의 내부 AI 모델 ""Goose""

     * Business Insider는 2월에 구글이 직원들이 코딩하고 제품을 개발하는 데 도움을 주기 위해 ""Goose""라는 새로운 내부 AI 모델을 출시했다고 보도함
     * BI가 본 내부 문서에 따르면 Goose는 ""구글의 25년 엔지니어링 전문성""을 기반으로 훈련되었음

직원들의 우려와 AI의 영향

     * Pichai의 데이터는 직원들이 스스로를 코딩에서 제외하는 것은 아닌지 의문을 가질 것이 분명하지만, 다른 직원들은 AI가 이미 그들의 업무를 변화시켰다고 말함
     * 회사 리더들은 이전에 AI가 구글러의 일자리를 빼앗지 않을 것이라고 약속했지만, 25% 이상이라는 수치는 눈에 띄며 이 기술을 개선하는 것의 이점을 강조함

GN⁺의 의견

     * AI 기술의 발전으로 인해 소프트웨어 엔지니어의 역할이 어떻게 변화할 것인지에 대한 논의가 필요함. AI가 단순 반복 작업을 대신하고 엔지니어는 더 창의적이고 전략적인 업무에 집중할 수 있게 될 것임
     * 하지만 AI 생성 코드의 품질과 유지보수 측면에서의 우려도 있음. 엔지니어들은 AI 코드를 검토하고 테스트하는데 더 많은 시간을 할애해야 할 수도 있음
     * AI 코딩 도구의 발전은 개발자의 생산성 향상과 혁신을 가속화할 수 있지만, 개인정보 보호와 알고리즘 편향성 등의 윤리적 문제도 함께 고려되어야 하며, 일부 직원들은 직업 안정성에 대한 우려를 가질 수 있음

   'Goose는 ""구글의 25년 엔지니어링 전문성""을 기반으로 훈련되었음' 너무 궁금하네요. 만들어내는 코드나 리뷰의 품질이

        Hacker News 의견

     * AI가 간단한 코드를 잘 생성하지만, 복잡한 코드는 미묘하게 잘못된 코드를 생성할 수 있음. Google의 코드 중 25%가 미묘하게 잘못된 코드인지, 아니면 간단한 코드인지 의문을 제기함
     * Google의 내부 개발 도구 팀 리더는 AI 추천의 안전성과 품질을 보장하기 위해 다양한 방법을 사용하고 있으며, AI 기능이 소프트웨어 엔지니어링 생산성을 향상시키고 있음을 강조함
          + AI 추천의 안전성과 품질을 보장하기 위해 정기적인 모니터링, 코드 출처 추적, 적대적 테스트 등을 수행함
          + A/B 테스트와 무작위 대조 실험을 통해 기능이 생산성과 처리량을 개선하는지 확인함
          + Google 내부에서 사용되는 모든 프로그래밍 언어와 프레임워크에서 유사한 효율성을 관찰함
     * Google이 과거 소프트웨어 개발의 정점이었으나, 이제는 빅데이터 모델을 판매하기 위해 코드를 생성하고 있다는 비판이 있음
     * AI가 코드의 50%를 생성할 수 있는 가능성을 언급하며, Google의 내부 코드베이스가 매우 잘 관리되고 있다는 점을 강조함
          + 모든 대형 언어 모델(LLM)이 동일하지 않으며, Google의 코드베이스는 매우 잘 관리된 데이터셋임
          + 코드 리뷰 과정에서 LLM을 통해 큰 개선이 기대됨
     * Google의 코드 중 25%는 기본적인 오류 검사와 nil 반환임
     * AI가 Stack Overflow에서 복사 붙여넣기 하던 25%의 코드를 대체했음을 언급함
     * Google 직원은 AI 생성 코드를 작성했으며, 코드 완성 엔진이 생산성 도구로 유용하지만, 실제 엔지니어링을 수행하지 않음을 설명함
          + 코드 완성 엔진은 작성 중인 코드의 줄을 완성하는 데 유용하며, Copilot과 비슷하거나 약간 못할 수도 있음
     * Boilerplate 코드와 자동 완성 구문 코드는 AI가 제공할 수 있지만, 나머지 75%는 실제로 생각해야 하는 부분임을 강조함
"
"https://news.hada.io/topic?id=17579","Rails로 다시 작성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Rails로 다시 작성하기

     * 블로그 시작
          + 2022년에 세관 신고서를 작성하는 애플리케이션을 개발하기 시작함.
          + 여러 언어와 프레임워크를 평가한 후, Ruby on Rails로 개발하기로 결정함.
          + Rails에 익숙하여 다른 옵션보다 10배 빠르게 개발할 수 있었음.
     * 버전 2 개발
          + Rust와 SvelteKit을 사용하여 애플리케이션의 두 번째 버전을 개발하기 시작함.
          + 초기에는 빠르고 좋았지만, 필요한 기능의 10%만 구현됨.
          + Rails와 비교할 만한 Rust의 프레임워크가 없어 많은 시간이 소요됨.
     * Rust의 장점
          + Rust의 성능과 오류 없는 컴파일의 장점을 경험함.
          + Ruby에서는 런타임 오류가 자주 발생하여 Rust의 필요성을 느낌.
     * 프론트엔드의 변화
          + Rails의 프론트엔드에 불만을 느껴 SvelteKit으로 전환하기로 결정함.
          + 새로운 스택으로 일부 페이지를 빠르게 전환했으나, 배포가 복잡해짐.
     * 개발의 현실
          + Rails 부분이 계속해서 유용한 기능을 추가하며 발전함.
          + Rust와 Svelte로의 전환이 사용자에게 직접적인 가치를 제공하지 않음을 깨달음.
     * 결정의 어려움
          + 새로운 스택을 포기하고 Rails로 돌아가기로 결정함.
          + 팀원들이 Rails를 배우도록 유도함.
     * Rails의 장점
          + Rails는 많은 성공적인 회사의 기반이며, 많은 라이브러리와 생태계를 제공함.
          + 제품 개발에 집중할 수 있게 해줌.
     * 교훈
          + 새로운 언어와 프레임워크를 배우는 것은 많은 통찰력을 제공함.
          + 웹 애플리케이션 개발은 많은 선택과 타협이 필요함.
          + Rails로 돌아가는 것이 좋은 결정이었으며, 생산성을 높임.
     * Ruby와 Rails의 단점
          + 런타임 문제는 테스트로 해결 가능함.
          + 코드가 복잡해지는 것은 개발자의 문제이며, 잘 조직화해야 함.
          + Rails는 충분히 빠르며, Turbo와 캐싱으로 성능을 개선할 수 있음.
     * 결론
          + 완벽한 언어나 프레임워크는 없으며, 각자의 장단점을 이해하고 활용해야 함.
          + Rails는 좋은 선택이며, 다른 많은 프레임워크도 훌륭함.

   Rewrite It In Ruby
   Rewrite It In Rails

        Hacker News 의견

     * Rails, Django, Laravel이 웹 앱 개발에 있어 다른 스택보다 훨씬 앞서 있음. 이들은 반복적인 작업을 처리하고, 요구 사항을 잘 알고 있으며, 애플리케이션을 구축할 때 방해하지 않음. 웹 개발은 이미 해결된 문제라고 생각하며, JavaScript 관련 기술은 대기업의 자금에 의해 주도되는 경향이 있음
     * 17년 동안 Rails를 사용해왔으며, 여전히 사랑하고 선호함. 코드 분리를 쉽게 할 수 있어 파일의 헤더가 불필요하게 길어지지 않음. 로직과 마크업을 분리하면 독립적으로 테스트할 수 있어 버그 추적이 쉬워짐
     * Rust는 매우 똑똑한 사람들이 만든 언어지만, 타입 이론과 메모리 할당에 집중되어 있어 일반 개발자에게는 이해하기 어려움. Rust 관련 블로그 글을 읽어도 절반 정도밖에 이해하지 못함
     * Ruby와 Rails에 대한 불만이 줄어들었음. 완벽한 언어나 프레임워크는 없으며, 강점과 약점을 알고 대처해야 함
     * Rust로 대형 웹 애플리케이션을 빠르게 작성하기는 어려움. Rails로 작성된 대형 애플리케이션은 빠르게 실행되지 않으며, 버그가 많고 유지보수 및 확장이 어려울 수 있음. Java, C#, Go 같은 언어는 Rails만큼 빠르게 작업을 완료하면서 Rust만큼 빠르게 실행됨
     * NextJS와 SvelteKit 같은 기술이 JS 개발자들 사이에서 인기 있는 이유는 Node.JS의 백엔드 개발 경험 문제를 해결하기 때문임. Rails는 2006년에 애플리케이션 구축을 위한 포괄적인 솔루션을 혁신적으로 제공했음
     * AdonisJS를 Rails의 TS 대안으로 테스트 중임. Rails나 Laravel과 유사하며, 스택의 모든 부분을 결정해야 하는 부담을 덜어줌
     * Rust가 웹 백엔드에 적합하지 않다는 의견에 혼란스러움. 작은 서비스에서는 좋은 경험을 했으며, 큰 애플리케이션을 구축할 때 복잡성이 증가할 수 있지만, Rust는 대규모 코드베이스에서 필요한 자신감을 줌
     * Django와 같은 경험을 하고 있으며, 성능 문제는 주로 Django 자체보다는 데이터베이스 쿼리에서 발생함
     * 2010년이 아닌데 왜 Rails를 사용하는지 의문임. Java(Spring), Go, Node 같은 많은 대안이 있음. Rust를 사용하는 것은 C++만큼이나 이상한 선택임
"
"https://news.hada.io/topic?id=17484","1930년대 전신타자기(tty)로 리눅스에 로그인하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     1930년대 전신타자기(tty)로 리눅스에 로그인하기

   Unix 기반 시스템의 가장 깊숙한 곳에는 ""하드웨어""가 캠, 레버, 풀리와 구리스가 있는 실제 기계 장치를 의미했던 컴퓨팅의 초기 시절의 흔적이 있습니다. 하지만 이것이 과거의 전신기를 리눅스에 그대로 연결할 수 있다는 의미는 아닙니다.

   리눅스에 연결하기 위해 가장 큰 문제는 현대의 ASCII 코드와 ASCII 코드 개발 수십년 전부터 존재했던 5비트 Baudot 코드 사이의 변환이었고, 변환기는 아두이노로 구현되었습니다.

   전신타자기에 전화선을 통해 신호를 보내기 위해 오래된 HP의 5비트 직렬신호 생성기를 사용해야 했습니다.

   45.5bps 속도로 연결할 수 있었고, 리눅스에 로그인 하고 ED 에디터로 파일을 편집하고, ASCII Art를 출력할 수 있었습니다.

   ※ Teletype Model-15는 AT&T 산하의 Teletype Corporation에서 1930년대에 출시한 Baudot 코드 프린터로, 2차대전 시기에 군의 통신 시스템에 사용되었습니다.

   1바이트가 8비트라는 것조차 아직 확립되지 않았던 시절의 이야기는 언제 봐도 신기합니다.
   저런 과거의 5비트 코드나 그걸 사용하던 텔레타이프라이터의 유산(Legacy)이 지금도 우리가 일상적으로 쓰는 것 속에 남아있다는 걸 생각하면 기분이 묘하더군요.

   저는 최근에 Kermit에 대해 읽었는데, 그 시절에는 메인프레임과 미니컴퓨터와 워크스테이션과 PC가 모두 이기종 컴퓨터와의 호환성이 매우 제한적이었기 때문에 이런 모든 플랫폼에서 공통적으로 사용할 수 있는 프로토콜이 정말 귀중했다는 걸 알 수 있었습니다. 이런 걸 보고 나니 호환성 유지라는 게 참 대단하다 싶어요.

   p.s.
   Windows에서 Kermit을 사용할 수 있는 소프트웨어인 Kermit 95는 지금도 활발히 유지보수가 이루어지고 있습니다.
   https://github.com/davidrg/ckwin

   이것도 꽤 오래된 프로토콜이었군요 SSH 클라이언트나 PC통신 프로그램에서 Zmodem 옆에 있길래 뭔가 했습니다. 여담이지만 가끔 쇼츠에 나오는 초록색 개구리 인형 이름이 Kermit이고 그 캐릭터 이름을 따온 거라고 하네요

   Kermit는 처음 들어보네요. 아직도 유지보수 되고 있다니 놀랍습니다.

   TTY가 TeleTYpe를 의미하는지는 리눅스를 매일 사용하면서도 전혀 몰랐네요

   Baudot Code (International Teleprinter Code)
     * Émile Baudot이 모스 코드를 대체하기 위해 1870년대에 개발
     * ASCII 코드가 개발되기 전까지 가장 널리 사용된 전신타자기 코드

   Baudot의 이름은 통신 속도 단위 보(baud)의 어원이 되었습니다.
"
"https://news.hada.io/topic?id=17515","애플 마케팅 전략 강화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              애플 마케팅 전략 강화

    애플의 마케팅 전략

     * 최근 애플의 인공지능 광고에 대한 비판적 시각을 제시함
     * 광고 내용이 부적절하고 모욕적이라는 의견을 제시함
     * 예시로, 인공지능을 사용해 이메일을 더 전문적으로 보이게 하거나, 사람의 이름을 기억하는 척하는 등의 상황을 설명함
     * 이러한 광고가 애플의 인공지능 사용 목적을 잘못 전달한다고 주장함

    다른 광고와의 비교

     * 애플의 광고와 대조적으로, Canonical의 애니메이션이 더 나은 스토리를 전달한다고 언급함
     * Canonical의 애니메이션이 짧은 시간 안에 더 효과적으로 메시지를 전달한다고 평가함

GN⁺의 정리

     * 애플의 최근 인공지능 광고가 부적절하다는 비판을 다룸
     * Canonical의 애니메이션과 비교하여 광고의 효과성을 논의함
     * 이러한 논의는 광고의 윤리성과 인공지능의 올바른 사용에 대한 관심을 불러일으킬 수 있음
     * 유사한 기능을 가진 다른 광고나 프로젝트로는 Canonical의 애니메이션을 추천함

        Hacker News 의견

     * AI 제품을 소비자에게 판매할 이유가 부족함을 지적함. Ray Ban Meta 안경 광고에서 AI의 필요성을 느끼지 못함.
          + 안경을 통해 앞에 있는 것을 설명받는 장면이 어색하게 느껴짐.
          + 가을 옷차림을 추천받고 그대로 따르는 장면이 어색함.
          + 디스코 테마 파티 장식을 추천받는 장면이 평범함.
          + AI의 필요성이 명확하지 않음.
     * AI 스타트업에서 일하는 사람의 의견임. 현재 AI는 최종 사용자가 직접 상호작용하기에는 적합하지 않음.
          + AI는 투명하게 작동할 때 가장 유용함.
          + 최종 소비자가 AI와 직접 상호작용하지 않고, AI가 과정을 보조하는 것이 더 나음.
          + 많은 마케팅이 AI를 여정의 일부로 만들기보다는 여정 자체로 만들려는 시도가 문제임.
          + Amazon의 Rufus가 좋은 예시임. 검색 결과를 정리해주는 것이 더 나을 것임.
     * 기술에 능통한 사람들이 기술 마케팅에 강하지 않음을 지적함.
          + Ubuntu 광고는 사용자의 관심을 끌지 못함.
          + Apple 광고는 명확하게 메시지를 전달함.
          + 기술 전문가들이 ""내가 싫어하니까 나쁘다""는 사고방식을 가짐.
     * Ubuntu 광고가 Apple의 AI 광고보다 더 나은 이야기를 전달한다고 주장함.
          + Ubuntu 광고를 본 일반인은 Ubuntu가 무엇인지 물어볼 것임.
          + Apple 광고는 재미있고 제품을 잘 보여줌.
     * Apple Watch 마케팅에 대한 불만을 제기함. 메시지가 공포를 조장함.
          + AI가 거짓말을 위한 것이라는 메시지도 문제임.
          + Apple의 마케팅 부서가 매력을 잃었다고 주장함.
     * Ubuntu 광고를 칭찬하는 블로그 글이 Apple 광고의 문제점을 지적함.
          + Apple 광고는 디스토피아적이고 불쾌함.
          + 광고에서 거짓말하는 장면이 불편함.
     * 현재 AI의 소비자 사용 사례는 주로 업무에서의 부정행위와 관련이 있음.
          + 광고 제작자들이 상대적으로 무난한 사례를 제시하려 했을 수도 있음.
          + 학교 숙제나 창작 작업에서의 부정행위는 감지되지 않음.
     * Ubuntu 광고가 이야기를 전달한다고 생각한다면, 그 이야기가 무엇인지 물어보고 싶음.
     * 생일 선물에 대한 거짓말 광고가 재미있다고 생각함.
          + 광고에서 AI가 만든 비디오에 무관한 사진이 포함된 장면이 어색함.
          + 광고의 의도가 유머러스하다는 점을 강조함.
"
"https://news.hada.io/topic?id=17553","애플 M4 Max 칩, 소비자 컴퓨팅에서 가장 빠른 단일 코어 성능칩","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 애플 M4 Max 칩, 소비자 컴퓨팅에서 가장 빠른 단일 코어 성능칩

        Hacker News 의견

     * M4 Pro가 Mac mini에 들어가 있는 것이 놀라운 점이며, Mac Studio의 M4 Max도 기대됨. 그러나 Mac mini의 성능은 주목할 만함
     * GeekBench v6의 싱글 코어 벤치마크를 확인할 수 있는 링크 제공
     * GeekBench가 과거에는 성능 지표로 신뢰받지 못했음. 현재는 어느 정도 신뢰할 수 있는지에 대한 의문 제기
     * Apple의 M4 Max가 Geekbench 6에서 4000 이상의 싱글 코어 점수를 기록한 최초의 CPU라는 주장에 혼란스러움. 최근 2년 동안 4000 이상의 점수를 기록한 다른 테스트 결과가 많음
     * PC 세계에서 오랫동안 떨어져 있었지만, 성능 효율성 측면에서 Apple이 경쟁사를 앞서고 있는지, AMD와 Intel이 비슷한 성능의 칩을 같은 전력 소비로 생산하고 있는지 궁금함
     * Apple의 칩 제조 역사와 비교했을 때, M 칩의 4세대가 Intel보다 훨씬 앞서 있는 것에 얼마나 감명을 받아야 할지 고민됨
     * 최상급의 MacBook Pro를 원하지만, 내가 선택한 Linux 배포판을 실행할 수 있기를 바람
     * 최신 기술 게임 개발에 있어서는 여전히 느리다는 점이 아쉬움. 개발 시간에 Windows 생태계를 벗어날 수 있으면 좋겠음
     * 얼마나 많은 사람들이 실제로 영향을 받는지 궁금함. 게이머는 AMD X3D 칩이 더 나으며, 대부분의 생산성 작업은 좋은 멀티코어 성능이 필요함. MR은 훌륭한 실리콘이지만, 싱글코어 성능이 필요한 사람들에게는 크게 유용하지 않을 수 있음
     * Intel은 부끄러워해야 함
"
"https://news.hada.io/topic?id=17567","영국 전후 설탕 열풍, 어린 시절 단 음식 식단의 해로움 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   영국 전후 설탕 열풍, 어린 시절 단 음식 식단의 해로움 확인

    연구 배경

     * 1953년 영국에서 설탕 배급이 종료되면서 설탕 소비가 급증함.
     * 연구팀은 이 변화를 통해 초기 생애의 설탕 섭취가 장기 건강에 미치는 영향을 분석함.
     * 1953년 이후에 태어난 사람들은 제2형 당뇨병과 고혈압의 위험이 더 높았음.

    연구 방법

     * 연구팀은 1950년대의 식품 조사와 설탕 판매 데이터를 사용하여 연구를 수행함.
     * UK Biobank 데이터베이스를 통해 1951년에서 1956년 사이에 태어난 60,000명 이상의 의료 정보를 수집함.
     * 연구 결과, 설탕 배급 기간 동안 태어난 사람들은 제2형 당뇨병과 고혈압의 위험이 낮았음.

    연구 결과

     * 설탕 배급이 끝난 후 태어난 사람들은 당뇨병 위험이 15% 더 높았고, 고혈압 위험이 5% 더 높았음.
     * 배급 기간 동안 1.5세가 된 유아는 당뇨병 위험이 40% 낮았고, 고혈압 위험이 20% 낮았음.
     * 여성의 경우 당뇨병 위험 감소가 더 두드러졌음.

    연구의 중요성

     * 초기 생애의 설탕 노출이 대사 질환에 영향을 미칠 수 있음.
     * 자연 실험을 통해 무작위 대조 실험이 어려운 상황에서 중요한 정보를 제공함.
     * 연구 결과는 모자 건강 개선 및 만성 질환 예방을 위한 정책 변화에 기여할 수 있음.

    결론 및 제안

     * 설탕에 대한 인식 캠페인, 설탕 세금 부과, 식품 성분 및 라벨링 규제 강화가 필요함.
     * 부모를 비난해서는 안 되며, 현재 환경에서 권장 지침을 따르기 어려운 점을 인식해야 함.
"
"https://news.hada.io/topic?id=17487","Apple, M4 탑재한 새로운 Mac Mini 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Apple, M4 탑재한 새로운 Mac Mini 출시

     * Apple은 M4 및 M4 Pro 칩으로 구동되는 새로운 Mac mini를 발표함. 성능을 극대화하면서도 크기는 5x5인치로 더욱 작아짐.
     * M4 칩은 이전 M1 모델에 비해 최대 1.8배 빠른 CPU 성능과 2.2배 빠른 GPU 성능을 제공함
     * M4 Pro는 M4의 기술을 확장하여 더 많은 작업을 처리할 수 있도록 함.
     * 새로운 Mac mini는 Apple Intelligence를 지원하여 사용자의 작업, 소통, 표현 방식을 혁신적으로 변화시키며 개인정보 보호를 강화함.
     * 환경적으로 중요한 이정표로, Mac mini는 Apple의 첫 번째 탄소 중립 Mac으로, 재료, 제조, 운송, 고객 사용 전반에 걸쳐 온실가스 배출을 80% 이상 줄임.

작지만 강력한 성능

     * 새로운 Mac mini는 이전 디자인보다 절반 이하의 크기로, 책상에서 차지하는 공간이 훨씬 적음.
     * Apple 실리콘의 전력 효율성과 혁신적인 열 설계 덕분에 매우 컴팩트한 시스템을 구현함.
     * Mac mini는 M4 칩을 통해 다양한 사용자에게 강력한 성능을 제공하며, 10코어 CPU와 10코어 GPU, 16GB의 통합 메모리를 기본으로 제공함.
     * Intel Core i7과 비교했을 때, Logic Pro 프로젝트에서 최대 2.8배 더 많은 오디오 효과 플러그인을 적용할 수 있음.

프로 수준의 성능을 위한 M4 Pro

     * M4 Pro는 세계에서 가장 빠른 CPU 코어를 제공하며, 최대 14개의 코어로 구성되어 있음.
     * M4 Pro GPU는 M4의 GPU보다 두 배 더 강력하며, 하드웨어 가속 레이 트레이싱을 처음으로 지원함.
     * M4 Pro는 최대 64GB의 통합 메모리와 273GB/s의 메모리 대역폭을 지원하여 AI 작업을 가속화함.
     * Thunderbolt 5를 지원하여 데이터 전송 속도를 두 배 이상 향상시킴.

향상된 연결성과 디스플레이 지원

     * 새로운 Mac mini는 다양한 포트를 제공하여 어떤 설정에서도 사용할 수 있음.
     * 전면에는 USB-C 포트 두 개와 고임피던스 헤드폰을 지원하는 오디오 잭이 있음.
     * 후면에는 M4 모델에 Thunderbolt 4 포트 세 개, M4 Pro 모델에 Thunderbolt 5 포트 세 개가 있음.
     * M4 Pro는 최대 세 개의 6K 디스플레이를 지원함.

Mac에서의 새로운 시대, Apple Intelligence

     * Apple Intelligence는 Mac에 개인 지능을 도입하여 사용자가 작업, 소통, 표현하는 방식을 혁신적으로 변화시킴.
     * 시스템 전반에 걸쳐 쓰기 도구를 제공하여 사용자가 텍스트를 재작성, 교정, 요약할 수 있도록 함.
     * Siri는 사용자의 개인 컨텍스트를 이해하여 맞춤형 지능을 제공함.
     * ChatGPT가 Siri와 쓰기 도구에 통합되어 사용자가 도구 간 이동 없이 전문 지식을 활용할 수 있음.

첫 번째 탄소 중립 Mac

     * 새로운 Mac mini는 Apple의 첫 번째 탄소 중립 Mac으로, Apple 2030 목표를 향한 중요한 이정표를 세움.
     * Mac mini는 50% 이상의 재활용 소재로 제작되었으며, 제조에 사용되는 전기는 100% 재생 가능 전기로 공급됨.
     * Apple은 전 세계의 청정 에너지 프로젝트에 투자하여 고객이 사용하는 전기의 100%를 해결함.

macOS Sequoia

     * macOS Sequoia는 iPhone 미러링, Safari의 하이라이트 기능, 게임 모드 개선 등 다양한 기능을 제공하여 새로운 Mac mini 경험을 완성함.
     * 사용자는 비디오 통화에 새로운 배경을 적용할 수 있으며, 개인화된 공간 오디오와 게임 모드 개선을 통해 게임이 더욱 몰입감 있게 됨.

GN⁺의 정리

     * 새로운 Mac mini는 M4 및 M4 Pro 칩을 통해 강력한 성능을 제공하며, Apple Intelligence를 통해 사용자의 작업 방식을 혁신적으로 변화시킴.
     * 이 제품은 Apple의 첫 번째 탄소 중립 Mac으로, 환경적으로 중요한 이정표를 세움.
     * Mac mini는 다양한 사용자에게 적합한 강력한 성능을 제공하며, 향상된 연결성과 디스플레이 지원을 통해 다양한 설정에서 사용할 수 있음.
     * macOS Sequoia와의 통합으로 사용자는 더욱 매끄럽고 몰입감 있는 경험을 할 수 있음.

   AI아니었으면 8GB 였을겁니다. 감사합니다 ChatGPT;;;

   3년쯤 지나면 중고로 들이기 좋을듯 합니다. M1 맥미니 살까 고민할때마다 기본형이 램 8GB라서 망설여졌었습니다

   다행히도 애플이 조금 양심은 있네요. 국내 기본형 가격 890,000원.
   한국에서도 '가성비' 소리는 들을 수는 있겠네요.

   기본형 교육할은 74만까지 내려가더군요 ㅎㄷㄷ

        Hacker News 의견

     * 교육용 가격으로 $500부터 시작하는 Mac Mini는 16GB RAM을 갖추고 있어 이 가격대에서 데스크탑 PC를 능가하는 성능을 제공함
          + 맞춤형 빌드를 제외하면, 이 제품은 입문용 데스크탑 컴퓨터로 추천할 만함
          + 부모님의 오래된 Mac Mini를 대체하기 위해 구매를 고려 중임
          + 이 가격대에서 합리적인 경쟁 제품이 없다고 생각함
     * 16GB RAM이 기본 사양으로 제공되며, 이는 iMac을 따름
          + AI 기술 덕분에 제조업체들이 기본 RAM 용량을 늘릴 수 있게 됨
     * 합리적인 가격에 훌륭한 컴퓨터임
          + 이벤트 없이 발표된 점이 흥미로움
               o Mac에 대해 더 공유할 것이 없거나, 다른 제품에 대한 발표가 예정되어 있을 가능성이 있음
          + 제품 페이지에서 PS5 컨트롤러와 다양한 제조사의 키보드 및 마우스를 강조함
               o 과거에는 거의 불경스러웠던 일이었음
          + Mac Studio를 고려할 필요가 없을 정도로 뛰어난 성능을 가짐
     * $599부터 시작하는 점이 마음에 듦
          + $499에 구매한 M2 Mac Mini는 오랫동안 가장 좋아하는 게임용 컴퓨터임
          + WoW, Dota, League of Legends 등 여러 게임을 잘 실행함
          + MacOS로 실행되지 않는 게임은 GeForce Now를 통해 실행함
          + 8GB 통합 메모리로도 훌륭했으며, 16GB로 업그레이드되어 더 나은 가치를 제공함
     * M4의 GPU 개선에 대해 매우 기대 중임
          + 특히 Pro 모델에 대한 기대가 큼
     * P 코어와 E 코어의 수에 대한 정보
          + 10 코어 = 4 P 코어와 6 E 코어
          + 12 코어 = 8 P 코어와 4 E 코어
          + 14 코어 = 10 P 코어와 4 E 코어
     * $599 가격대에서 대형 브랜드 제조업체의 경쟁 제품이 없음
          + M4, 16GB RAM, Thunderbolt 4를 갖춤
          + SSD가 주요 약점이지만, TB4로 외장 SSD를 쉽게 사용할 수 있음
          + EDU 또는 직원 가격으로 $499에 시작하여 매우 저렴함
          + 기업에서 PC 대신 이 제품을 구매하여 VM에서 Windows를 실행하는 것이 더 나을 수 있음
          + iPad와 iPhone이 대부분의 업무를 대체하고 있어, 다음 컴퓨터로 미니를 고려 중임
     * M4에서 M4 Pro로의 가격 상승이 크지만, 제품 라인업이 마음에 듦
          + 2018년 모델 이전에 Mac Mini를 구매했으며, 6년 동안 잘 사용 중임
          + 업그레이드가 필요하다고 느끼지 않았지만, 이번 제품은 업그레이드를 고려할 만함
          + M4 MacBook Air 발표를 기다리고 있음
     * Mac Mini는 50% 이상 재활용 소재로 제작됨
          + 100% 재활용 알루미늄, 금 도금, 희토류 원소 사용
          + 제조에 사용된 전기는 100% 재생 가능 에너지원에서 공급됨
          + 고객이 사용하는 전기를 위해 전 세계 청정 에너지 프로젝트에 투자함
          + 해상 운송 등 저탄소 운송 방식을 우선시하여 탄소 발자국을 80% 이상 줄임
          + Apple의 정보를 신뢰하지만, 데이터 검증 방법에 대한 의문이 있음
     * M4 Pro는 Thunderbolt 5를 지원하여 한 케이블로 2개의 2160p120 디스플레이를 구동할 수 있음
          + MacBook의 경우, 고해상도, 고주사율 디스플레이와 전원, 데이터 액세서리를 위한 충분한 대역폭을 제공함
     * 외부 전원 어댑터 없이도 완전한 컴퓨터를 이 작은 크기로 제공하는 점이 인상적임
"
"https://news.hada.io/topic?id=17560","이상한 Lexical Syntax 구조","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         이상한 Lexical Syntax 구조

이상한 어휘 구문

     * 이번 달에 42개의 프로그래밍 언어를 배워 llamafile을 위한 새로운 구문 강조 표시기를 만들었음. 할로윈을 맞아 가장 놀라운 구문을 공유하고자 함.
     * 지원하는 언어는 Ada, Assembly, BASIC, C, C#, C++, COBOL, CSS, D, FORTH, FORTRAN, Go, Haskell, HTML, Java, JavaScript, Julia, JSON, Kotlin, ld, LISP, Lua, m4, Make, Markdown, MATLAB, Pascal, Perl, PHP, Python, R, Ruby, Rust, Scala, Shell, SQL, Swift, Tcl, TeX, TXT, TypeScript, Zig임.

구문 강조 표시기 코딩 방법

     * 구문 강조 표시기를 구현하는 것은 어렵지 않음. C++과 GNU gperf가 유용한 도구임.
     * gperf는 완벽한 해시 테이블을 생성하여 성능을 극대화할 수 있음.
     * 기본적인 구문 강조 표시기는 유한 상태 기계로 구현 가능하며, 문자열, 주석, 키워드에 집중함.

데모

     * llamafile의 새로운 구문 강조 표시기는 ollama보다 강력한 장점이 있음.
     * Windows 10에서 Meta LLaMA 3.2 3B Instruct 모델을 사용하여 다양한 프로그래밍 언어로 코드를 생성하는 데모를 제공함.

놀라운 어휘 구문 예시

     * C: C 언어는 간단하다고 주장하지만, 삼중문자와 같은 복잡한 요소가 있음.
     * Haskell: 중첩된 주석을 허용함.
     * Tcl: 식별자에 따옴표를 포함할 수 있음.
     * JavaScript: 정규 표현식 구문이 있으며, UNICODE 문자를 줄 바꿈 문자로 사용함.
     * Shell: heredoc 구문을 다양한 방식으로 사용할 수 있음.
     * String Interpolation: Kotlin, Scala, TypeScript는 문자열 내에 코드 삽입을 허용함.
     * Swift: 문자열을 여러 개의 #으로 둘러쌀 수 있음.
     * C#: 여러 개의 인용 부호를 사용하여 문자열을 감쌀 수 있음.
     * FORTH: 모든 것을 공백 경계로 토큰화함.
     * FORTRAN과 COBOL: llamafile은 이러한 언어의 구문 강조 표시를 지원함.
     * Zig: 다중 줄 문자열을 두 개의 백슬래시로 시작함.
     * Lua: 다중 줄 문자열에 대괄호와 등호를 사용함.
     * Assembly: 다양한 방언이 있어 구문 강조 표시가 어려움.
     * Ada: 단일 인용 부호를 다양한 용도로 사용함.
     * BASIC: 문자열의 끝에 인용 부호가 필요하지 않음.
     * Perl: 정규 표현식 구문이 독특함.
     * Ruby: 구문이 복잡하고 이해하기 어려움.

지원 언어의 복잡성

     * FORTH가 가장 간단하고 Ruby가 가장 복잡한 언어임.
     * 각 언어의 구문 강조 표시를 위한 코드 라인 수로 복잡성을 평가함.

GN⁺의 정리

     * 이 글은 다양한 프로그래밍 언어의 독특한 구문을 탐구하며, 구문 강조 표시기를 구현하는 데 필요한 통찰력을 제공함.
     * llamafile의 구문 강조 표시기는 다양한 언어를 지원하며, 특히 오래된 언어의 유지보수에 유용할 수 있음.
     * 프로그래밍 언어의 구문 복잡성을 이해하는 데 도움이 되며, 구문 강조 표시기 개발에 관심 있는 사람들에게 유익할 것임.
     * 비슷한 기능을 가진 프로젝트로는 Pygments와 Emacs가 있음.

        Hacker News 의견

     * 여러 언어들이 문자열 내 코드 삽입을 지원함
          + C#, Python, JavaScript, Ruby, Shell, Make 등이 포함됨
     * Tcl 언어의 독특한 특성 설명
          + 코드와 데이터를 구분하기 어려움
          + 주석이 코드로 인식될 수 있음
     * PostgreSQL의 편리한 달러 인용 문자열 기능 설명
          + 다양한 방식으로 문자열을 표현할 수 있음
     * Vim의 구문 강조 기능 설명
          + 매치와 영역을 선언하여 구문 강조를 구현함
          + 복잡한 구문 강조를 지원함
     * C 언어의 문맥 민감한 렉싱 설명
          + 심볼 테이블이 필요함
          + 구문 강조를 위해 전체 구문 분석과 심볼 테이블 정보가 필요할 수 있음
     * C 트라이그래프의 재미있는 예시 설명
          + || 논리 연산자를 사용한 짧은 회로 규칙 설명
     * Lisp의 구문에 대한 관점 설명
          + 구문이 언어의 중요한 부분이 아니며 단순하고 균일해야 함
     * Ruby의 구문이 이해하기 어렵다는 의견
     * Java의 유니코드 이스케이프가 구문 강조를 깨뜨릴 수 있음
          + 유니코드 이스케이프가 문자열 외부에서도 사용 가능함
     * Joe의 구문 강조 구현에 대한 관심
          + Python f-strings의 적절한 강조 가능
     * TeX의 구문 강조가 어려운 이유 설명
          + TeX는 각 문자의 기능을 재정의할 수 있음
          + 완전한 구문 강조가 불가능함
"
"https://news.hada.io/topic?id=17597","과학자들, 두 단백질을 결합하여 암세포 스스로 파괴하도록 유도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   과학자들, 두 단백질을 결합하여 암세포 스스로 파괴하도록 유도

     * 스탠퍼드 의과대학 연구진이 자연스러운 세포사멸 과정인 아포토시스(apoptosis)를 이용해 암세포를 제거하는 새로운 전략을 개발함
     * 이는 두 개의 단백질을 인위적으로 결합시켜 세포사멸 관련 유전자들을 활성화시키고, 궁극적으로 종양세포가 스스로를 제거하도록 유도하는 방식
     * 기존의 항암 치료법인 화학요법과 방사선 치료는 암세포뿐만 아니라 정상 세포도 많이 손상시킴
     * 반면 아포토시스는 매우 특이적으로 600억 개의 세포를 제거할 수 있어, 이를 이용한 새로운 항암 전략이 필요함
     * 연구진은 림프종의 발생에 관여하는 BCL6 단백질과 유전자 활성화 효소인 CDK9 단백질을 분자적으로 결합시키는 물질을 개발함
     * BCL6는 정상적으로는 아포토시스 관련 유전자들을 억제하지만, CDK9와 결합하면 이들 유전자가 활성화되어 암세포의 사멸을 유도함
     * 즉, 암세포의 생존에 필수적인 BCL6의 역할을 역이용하여 오히려 암세포를 죽이는 것
     * 연구진이 개발한 물질은 실험실에서 미만성 거대 B세포 림프종 세포를 강력하게 사멸시킴
     * 정상 생쥐에서는 BCL6에 의존하는 일부 B세포만 특이적으로 제거되었고, 심각한 독성은 관찰되지 않음
     * 현재 림프종이 있는 생쥐에서도 항암 효과를 검증 중
     * BCL6는 림프종 세포와 특정 B세포에만 존재하므로 매우 특이적으로 작용할 것으로 기대됨
     * BCL6가 13개의 아포토시스 관련 유전자에 작용하므로, 다중 세포사멸 신호 유도로 내성 발생을 방지할 수 있을 것
     * 연구자들은 바이오텍 스타트업을 설립하여 해당 물질의 전임상 및 임상시험을 준비 중이며, Ras 등 다른 암 유발 단백질도 타겟팅할 계획

        Hacker News 의견

     * 이 연구는 참신하고 흥미로운 연구임. 과거에는 모든 세포에 독성이 있는 치료법으로 암을 치료했음. 최근 몇십 년간 특정 단백질의 활동을 억제하는 표적 암 치료법이 등장했음.
          + BCL6 유전자는 면역 세포가 외부 침입자를 인식할 때 활성화되며, 암 세포가 이를 이용해 생존함. 이 방법은 BCL6의 암 유발 기능을 억제하는 대신 이를 가이드로 사용하여 세포 사멸 억제 효과를 반전시킴.
          + 표적 분해제, 분자 접착제, 이중기능 분자 분야는 암 연구에서 관심이 증가하고 있음.
     * 진단 분야도 발전하길 바람. 최근 40세 여성이 유방암 진단 4주 만에 사망했음. 30세 이하의 사람들은 친구나 가족의 암 진단을 경험하지 못했을 수 있음.
          + 여성의 암은 남성보다 5-10년 일찍 발생하는 경향이 있음. 남성의 암 생존율은 전반적으로 낮음.
     * 많은 불치병과 만성 질환에 대한 진보가 있었지만, 실제 치료는 크게 개선되지 않았음. 과학 저널리즘이 의도치 않은 메시지를 전달했을 수 있음.
     * 케톤 생성 유도는 세포 자멸을 촉진하는 방법으로 사용됨. 금식은 효과적인 방법으로 입증됨.
     * 이 방법이 육종 환자에게 도움이 되길 바람. 파트너가 4기 육종 진단을 받았음.
     * New York Times가 2023년 7월 26일에 이 주제를 다룸.
     * 다음 과제는 단백질을 전달하는 것임.
     * 이러한 헤드라인을 좋아함. 이게 정말 새로운 것인지 궁금함.
     * 이 방법이 언제 전립선암 치료에 사용될 수 있을지 궁금함.
"
"https://news.hada.io/topic?id=17518","OpenZFS 중복 제거 기능 개선, 사용 자제 권고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenZFS 중복 제거 기능 개선, 사용 자제 권고

  OpenZFS의 중복 제거란 무엇인가?

     * 중복 제거의 정의: OpenZFS에서 데이터를 디스크에 쓰기 전에 해당 데이터가 이미 디스크에 존재하는지 확인하고, 존재한다면 새로운 쓰기를 하지 않고 기존 복사본에 대한 참조를 추가하는 것임.
     * 중복 제거의 도전 과제: 데이터가 이미 디스크에 있는지 확인하고, 그 위치를 아는 것이 어려움. 이는 추가적인 입출력(IO)을 필요로 하며, 이로 인해 성능 저하가 발생할 수 있음.

  중복 제거는 어떻게 작동하는가?

     * 작동 방식: 중복 제거가 활성화되면, 데이터 블록이 준비되고 체크섬이 계산됨. 기존에는 메타슬랩 할당자가 공간을 할당했지만, 중복 제거가 활성화되면 체크섬을 중복 제거 테이블에서 조회함.
     * 중복 제거 테이블: 체크섬을 키로 사용하고, 디스크 위치와 참조 수를 값으로 사용하는 해시 테이블 형태로 저장됨. 이는 풀 메타데이터의 일부로 간주됨.

  전통적인 중복 제거의 문제점

     * 중복 제거 테이블의 문제: 전통적인 중복 제거는 OpenZFS의 디스크 해시 테이블 객체를 사용하여 구현됨. 이는 복잡한 구조로, 중복 제거와 같은 응용에는 적합하지 않음.
     * 메모리 사용량: 중복 제거 테이블을 읽는 것은 ARC에 캐시되며, 충분한 RAM이 있으면 테이블 업데이트의 읽기 부분을 줄일 수 있음.
     * 고유 항목 문제: 중복 제거 테이블에서 고유 항목을 추적하는 데 드는 공간이 문제임. 참조 수가 1인 블록은 중복 제거 테이블에서 공간을 차지하며, 동일한 데이터가 쓰이지 않으면 비용을 회수할 수 없음.

  빠른 중복 제거는 어떻게 문제를 해결하는가?

     * 라이브 항목 목록 축소: 메모리 사용량을 줄이기 위해 라이브 항목 목록의 메모리 발자국을 줄임. 새로운 중복 제거 테이블은 항목의 ""값"" 부분이 72바이트로 줄어듦.
     * 중복 제거 로그: 라이브 항목 목록을 대신하여 로그를 사용하여 변경 사항을 기록하고, 충돌 복구 시 로그를 재생함. 로그는 메모리에 저장되어 빠른 조회를 가능하게 함.
     * 증분 로그 플러싱: 로그의 크기를 관리하기 위해 일부 로그를 매 트랜잭션마다 ZAP에 기록함. 메모리 압박이 있을 때 로그 플러싱을 가속화함.

  GN⁺의 정리

     * OpenZFS의 새로운 ""FastDedup"" 기능은 전통적인 중복 제거의 문제점을 해결하기 위해 개발되었음. 메모리 사용량을 줄이고, 로그를 통해 효율적인 데이터 관리를 가능하게 함.
     * 중복 제거는 특정 워크로드에서만 유용하며, 일반적인 용도로는 여전히 비효율적일 수 있음. 이는 중복 제거 테이블의 관리 오버헤드가 크기 때문임.
     * 비슷한 기능을 가진 다른 프로젝트로는 Btrfs의 중복 제거 기능이 있으며, 이는 다른 파일 시스템에서의 대안이 될 수 있음.

        Hacker News 의견

     * 제목에 끌려 클릭했지만 ZFS에 관심이 없었음에도 거의 모든 글을 읽게 되었음. 글이 명확하게 설명되어 있었고, 모바일 CSS 테마가 특히 마음에 들었음. 간결한 요약은 글의 하단에 있음.
     * copy_file_range 논의 외에도, 파일 시스템에서 동일한 해시를 가진 1MB 이상의 파일을 찾아 선택적으로 중복 제거를 적용할 수 있으면 좋겠음.
     * 전통적인 중복 제거의 문제는 오버헤드가 너무 커서 특정 작업 부하를 제외하고는 효과를 보기 어려움. Pure와 Dell/EMC 배열에서 VMWare 작업 부하에 대해 3:1 중복 제거/압축 절감 효과를 보았음.
     * 중복 제거의 효과는 해시되는 블록의 크기에 크게 영향을 받음. 블록이 작을수록 일치하는 블록이 있을 확률이 높아짐. 개인적으로 4KB 블록 크기를 선호함.
     * ""오프라인"" 중복 제거나 ""게으른"" 중복 제거를 원함. 중복 제거가 활성화되면 모든 쓰기와 해제 작업이 중복 제거 테이블에 대한 조회와 쓰기를 요구함. 데이터 쓰기 시 빠르게 완료되기를 원함.
     * 빠른 중복 제거에 대해 매우 기대하고 있음. ArchiveBox 데이터에 ZFS 중복 제거를 사용하고 싶었음. 많은 URL을 아카이브하고 파일 시스템이 모든 것을 압축하도록 하는 것이 가능해질 것 같음.
     * 개인 아카이브에 ZFS 중복 제거를 사용해 왔으며, 현재 디스크 공간을 3배 줄이고 있음. ZFS는 신뢰성 면에서 매우 잘 작동했으며, 데이터 손실을 방지할 수 있었음.
     * 일반적인 중복 제거는 이론적으로는 좋지만 실제로는 잘 작동하지 않음. IPFS는 가변 크기의 조각을 사용하여 데이터를 중복 제거하려고 하지만 실제로는 차이가 없고 복잡성만 증가시킴.
     * 디스크 컨트롤러의 전용 하드웨어가 ECC 같은 계산을 위해 블록의 해시를 시스템에 노출할 수 있도록 개선되면 좋겠음.
     * 파일 시스템의 API가 완전히 다른 형태였으면 좋겠음. 모든 OS의 파일 시스템 API는 호환성 때문에 고착되어 있음.
     * 쓰기 성능이 중요하다면, 쓰기 시 중복 제거를 할 필요가 없음. 중복 제거는 나중에, 동시에, 그리고 낮은 우선순위로 수행하면 됨.
"
"https://news.hada.io/topic?id=17472","웹 서버 정적 콘텐츠 저장소로 SQLite 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       웹 서버 정적 콘텐츠 저장소로 SQLite 사용

웹 서버 정적 콘텐츠 저장소로서의 SQLite 사용

  배경

     * Clace는 주로 내부 도구를 위한 웹 애플리케이션을 제공하기 위해 설계된 플랫폼임.
     * Clace는 웹 서버와 애플리케이션 서버가 별도로 처리하는 기능을 통합하여 제공함.
     * Clace 개발 초기에는 애플리케이션 데이터와 메타데이터를 어떻게 저장할지 결정하는 것이 중요했음.
     * 메타데이터는 데이터베이스에 저장하는 것이 합리적이었고, 정적 파일은 보통 파일 시스템에 저장됨.

  파일 제공을 위한 SQLite 사용

     * Clace는 파일 시스템 대신 SQLite를 사용하여 앱 파일을 저장하기로 결정함.
     * 이는 원자적 버전 변경을 가능하게 하여, 업데이트 시 여러 파일을 한 번에 트랜잭션으로 처리할 수 있음.
     * 앱 생성 및 업데이트 시 모든 파일은 SQLite 데이터베이스에 업로드되며, 개발 모드에서는 로컬 파일 시스템을 사용함.

  SQLite 사용의 이점

     * 트랜잭션 업데이트: 여러 파일을 한 번에 업데이트할 수 있으며, 업데이트 중 깨진 웹앱이 없도록 보장함.
     * 배포 롤백: 오류 발생 시 배포를 롤백할 수 있으며, 데이터베이스 트랜잭션 롤백이 파일 시스템 정리보다 쉬움.
     * 버전 간 파일 중복 제거: 동일한 파일이 여러 버전에 존재해도 파일 내용은 한 번만 저장됨.
     * 앱 간 중복 제거: 여러 앱 간 동일한 파일이 존재할 때 중복을 방지함.
     * 백업 용이성: SQLite를 사용하여 시스템 상태를 쉽게 백업할 수 있음.
     * 콘텐츠 해싱: 파일 업로드 시 콘텐츠 SHA를 저장하여 브라우저 캐싱을 용이하게 함.
     * 압축: 파일 내용은 Brotli로 압축되어 저장되며, 다양한 형식으로 쉽게 저장 가능함.

  성능

     * Clace의 SQLite 데이터베이스 접근 방식은 뛰어난 성능을 제공함.
     * 파일 시스템을 사용하는 동등한 구현이 없어 직접적인 벤치마크 테스트는 수행되지 않았음.
     * SQLite 팀의 벤치마크에 따르면, 일부 작업 부하에서 SQLite가 파일 시스템보다 더 나은 성능을 가질 수 있음.

  멀티 노드 지원

     * Clace는 현재 단일 노드에서 실행됨.
     * 멀티 노드 지원이 추가되면, 로컬 SQLite 대신 공유 Postgres 데이터베이스를 사용할 계획임.
     * 이로 인해 지연 문제가 발생할 수 있으며, 로컬 SQLite 데이터베이스를 파일 캐시로 사용하여 지연을 줄일 계획임.

  이 접근 방식이 일반적이지 않은 이유

     * 대부분의 웹 서버가 파일 시스템을 사용하는 이유는 편리함 때문임.
     * 파일 시스템 도구를 사용하여 파일 업데이트가 가능하며, 데이터베이스를 사용하면 파일 업로드를 위한 API 인터페이스가 필요함.

GN⁺의 정리

     * Clace는 내부 도구 개발 및 배포를 위한 플랫폼으로, SQLite를 사용하여 파일 저장의 이점을 극대화함.
     * SQLite를 사용함으로써 트랜잭션 업데이트, 롤백, 중복 제거, 백업 용이성 등 다양한 이점을 제공함.
     * 이 접근 방식은 파일 시스템의 편리함과 역사적 이유로 인해 일반적이지 않지만, SQLite의 성능과 기능을 활용하여 효율성을 높임.
     * 유사한 기능을 가진 프로젝트로는 Firebase, AWS Lambda 등이 추천됨.

        Hacker News 의견

     * 몇 년 전 ""35% Faster Than The Filesystem"" 기사에서 영감을 받아 SQLite를 사용하여 정적 파일을 제공하는 실험을 했음. Datasette를 통해 SQLite에서 정적 파일을 제공하는 플러그인을 만들었지만 많이 사용하지는 않았음. SQLite를 사용하여 파일을 제공하려면 ""sqlite-utils insert-files"" CLI 도구가 유용할 수 있음.
     * 트랜잭션 업데이트는 여러 파일을 한 번에 업데이트할 수 있는 주요 이점임. 서버가 SQLite나 파일 시스템을 사용하더라도 업데이트 중에 웹앱이 깨지는 것을 막을 수는 없음. 페이지의 모든 하위 리소스가 특정 콘텐츠 해시나 버전 이름을 사용하여 참조되도록 해야 함.
     * 2011/2012년에 작은 게임 개발 회사에서 일할 때, 모든 자산을 sqlite3 데이터베이스에 저장하고 pak 파일을 만들어 파일의 오프셋을 저장했음. 모바일 게임에서 자산을 빠르게 로드할 수 있었고, 메타데이터를 데이터베이스에 저장하여 유사한 파일을 쉽게 찾을 수 있었음.
     * 파일 시스템 대신 SQLite를 사용하여 파일을 쿼리할 수 있는 장점이 있음. SQL 쿼리는 Kysely를 사용하여 타입 세이프하게 사용할 수 있음.
     * SQLite를 사용하여 정적 콘텐츠를 제공하는 아이디어는 완전하지 않음. 현대 웹 서버는 정적 파일을 처리하는 최적의 전략을 사용함. SQLite는 메모리 매핑 I/O 지원을 제공하지만, 대규모 웹사이트에는 적합하지 않음.
     * SQLite는 하루 100K 히트 이하의 웹사이트에 적합함. SQLite 웹사이트는 하루 400K~500K HTTP 요청을 처리하며, 대부분의 경우 로드 평균이 0.1 이하임.
     * 정적 사이트 생성기 CMS는 SQLite 데이터베이스를 사용하여 웹사이트를 개발하고 업데이트하며, 그런 다음 정적 페이지로 파일 시스템에 덤프하여 배포함.
     * 고성능 과학 컴퓨팅에서 데이터에 접근하는 가장 유연하고 고성능의 방법은 종종 램디스크에 있는 읽기 전용 SQLite 데이터베이스임.
     * 파일 시스템이 중복 제거, 스냅샷, 버전 관리, 압축을 제공할 수 있는 경우와 SQLite 접근 방식을 비교하는 것이 흥미로울 것임. 고급 파일 시스템을 사용하면 디렉토리를 새 버전으로 교체하는 것이 더 쉬울 수 있음.
     * 데이터베이스를 파일 시스템으로 사용하는 접근 방식은 장점이 있지만, 문제가 발생할 때는 악몽이 될 수 있음.
"
"https://news.hada.io/topic?id=17564","Play 3.0 Mini 공개 - 경량, 비용 효율적인 다국어 Text-To-Speech 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Play 3.0 Mini 공개 - 경량, 비용 효율적인 다국어 Text-To-Speech 모델

     * 30개 이상의 언어로 업계 최고 속도와 정확도로 어떤 목소리나 억양으로도 말할 수 있는 가장 유능하고 대화형 음성 모델
          + 또한 여러 언어에 걸쳐 50개 이상의 새로운 대화형 AI 음성을 출시
     * TTS를 사용하여 실시간 애플리케이션을 구축할 때 지연 시간, 신뢰성, 음질 및 음성의 자연스러움이 매우 중요함

Play 3.0 mini는 현재까지 가장 빠른 대화형 음성 모델임

     * 3.0 mini는 TTFB에 대해 평균 189밀리초의 지연 시간을 달성하여 가장 빠른 AI Text to Speech 모델이 됨
     * LLM에서 텍스트 입력 스트리밍과 오디오 출력 스트리밍을 지원하며 HTTP REST API, 웹소켓 API 또는 SDK를 통해 사용할 수 있음
     * 3.0 mini는 또한 Play 2.0보다 효율적이며 추론 속도가 28% 더 빠름

Play 3.0 mini는 30개 이상의 언어로 모든 음성을 지원함

     * Play 3.0 mini는 이제 기본적으로 여러 남성 및 여성 음성 옵션이 있는 30개 이상의 언어를 지원함
     * 영어, 일본어, 힌디어, 아랍어, 스페인어, 이탈리아어, 독일어, 프랑스어 및 포르투갈어 음성은 이제 프로덕션 사용 사례에 사용할 수 있으며 API와 플레이그라운드에서 사용할 수 있음
     * 또한 아프리칸스어, 불가리아어, 크로아티아어, 체코어, 히브리어, 헝가리어, 인도네시아어, 말레이어, 북경어, 폴란드어, 세르비아어, 스웨덴어, 타갈로그어, 태국어, 터키어, 우크라이나어, 우르두어 및 코사어를 테스트할 수 있음

Play 3.0 mini는 더 정확함

     * Play 3.0 mini의 목표는 대화형 AI를 위한 최고의 TTS 모델을 만드는 것이었음
     * 이를 달성하기 위해 모델은 가장 대화형 톤으로 음성을 생성하면서 지연 시간과 정확성 면에서 경쟁사 모델을 능가해야 했음
     * LLM은 환각을 일으키고 음성 LLM도 다르지 않음. 음성 LLM의 환각은 입력 텍스트의 일부가 아닌 출력 오디오의 추가 또는 누락된 단어나 숫자의 형태일 수 있음

Play 3.0 mini는 알파벳과 숫자의 조합을 더 자연스럽게 읽음

     * 우리는 모델을 훈련시켜 인간처럼 숫자와 머리 글자를 읽도록 했음
     * 모델은 속도를 조정하고 모든 알파벳과 숫자 문자의 속도를 늦춤
     * 예를 들어 전화번호는 더 자연스러운 속도로 읽혀지며, 마찬가지로 모든 머리 글자와 약어도 그렇게 함
     * 이렇게 하면 전반적인 대화 경험이 더 자연스러워짐

Play 3.0 mini는 음성 복제에 가장 적합한 음성 유사성을 달성함

     * 음성을 복제할 때 종종 가까운 소리로는 충분하지 않음
     * Play 3.0 음성 복제는 음성을 복제할 때 최첨단 성능을 달성하여 복제된 음성의 억양, 톤 및 억양을 정확하게 재현함
     * 인기 있는 오픈 소스 임베딩 모델을 사용한 벤치마킹에서 원래 음성과의 유사성 면에서 경쟁사 모델을 크게 앞섬
     * play.ai에서 자신의 목소리를 복제하고 자신과 대화해 보면서 직접 해보세요

웹소켓 API 지원

     * 3.0 mini의 API는 이제 웹소켓을 지원하므로 HTTP 연결 열기 및 닫기의 오버헤드를 크게 줄이고 LLM 또는 기타 소스에서 텍스트 입력 스트리밍을 보다 쉽게 활성화할 수 있음

Play 3.0 mini는 비용 효율적인 모델임

     * 우리는 더 높은 볼륨의 스타트업 및 성장 계층에 대해 가격 인하를 발표하게 되어 기쁘게 생각하며, 이제 보다 겸손한 요구 사항이 있는 기업을 위해 월 49달러의 새로운 Pro 티어를 도입했음
     * 여기에서 새로운 가격표를 확인하세요
     * 당신이 우리와 함께 무엇을 만들지 기대하고 있음! 사용자 지정 대용량 요구 사항이 있는 경우 영업팀에 문의해 주십시오

GN+의 의견

     * 대화형 AI를 위한 가장 신뢰할 수 있는 음성 모델을 개발하려는 Play.ht의 노력이 인상적임. 지연 시간과 정확성 면에서 경쟁사보다 뛰어나며 가장 자연스러운 대화형 음성을 생성한다는 점에서 이 모델은 업계를 선도할 것으로 보임
     * 30개 이상의 언어와 다양한 음성 옵션을 지원하는 것은 더 많은 사용자와 사용 사례에 도달할 수 있는 중요한 단계임. 이는 음성 AI의 광범위한 채택에 도움이 될 것임
     * 그러나 이 기술을 채택할 때는 윤리적 고려 사항을 염두에 두어야 함. 예를 들어, 동의 없이 개인의 목소리를 복제하는 것은 프라이버시 문제를 야기할 수 있음. 또한 이 기술이 허위 정보 확산에 악용될 가능성도 있음
     * 유사한 기능을 가진 다른 주목할 만한 음성 AI 프로젝트로는 Google의 Tacotron과 DeepMind의 WaveNet이 있음. 이러한 모델은 또한 다국어 지원과 자연스러운 생성 음성에 중점을 둠
     * 결론적으로 Play 3.0 mini는 대화형 AI에서 음성 기술의 새로운 기준을 제시함. 개발자들은 다양한 실시간 애플리케이션을 위한 빠르고 정확하며 자연스러운 TTS를 활용할 수 있게 될 것임. 그러나 이 기술의 잠재적인 오용을 방지하기 위해 강력한 안전 장치와 윤리적 지침이 마련되어야 함

   그런데 Playground 가보니 Korean이 또 있네요?

   않이 이렇게 많은 언어를 지원하는데 Korean 이 없다니ㅠ

   아쉽게도 한국어는 아직 적용되지 않나보네요 ㅠ

  Hacker News 의견

     * 최근에 출시된 오픈 소스 TTS 모델이 뛰어난 음성 복제 기능을 제공함. 10G VRAM의 NVIDIA GPU에서 실행 가능함.
     * Firefox에서 라이브 테스트가 작동하지 않았으나 Chrome으로 전환하니 빠르게 작동함. 30초 만에 자신의 목소리를 복제하여 대화할 수 있었음. 대부분의 사람들을 속일 수 있을 정도로 정교함.
     * 이 모델은 Cartesia와 OpenAI의 TTS API보다 비용이 더 많이 듦. 일반적으로 TTS API는 LLM보다 높은 마진으로 운영됨.
     * 영어 이외의 언어로는 전사 기능이 유용하지 않음. 정확하게 전사되면 번역과 음성 응답이 매우 빠르지만, 전사가 좋지 않으면 무용지물임.
     * 여름 동안 Go와 Rust용 API 클라이언트를 작성함. 당시 직장에서 Play를 사용했으나 Python과 Node SDK만 존재했음.
     * 자신과 비슷한 목소리와의 저지연 대화는 다소 불안감을 줄 수 있음. 그러나 매우 생각을 자극하는 경험임.
     * 복제된 목소리가 매우 유사하게 들렸으나, 블라인드 테스트에서 5명 모두 이를 본인의 목소리로 인식하지 못함. 자신의 목소리를 들을 때 편향이 있는지에 대한 의문
     * OpenAI의 모델은 숫자 발음에서 성능이 좋지 않음. 2024년에 숫자를 제대로 발음하지 못하는 TTS 모델이 출시된 것에 충격을 받음. 새로운 TTS 모델은 최소한 100,000까지의 숫자를 검증해야 한다고 믿음.
"
"https://news.hada.io/topic?id=17501","벡터 데이터베이스는 잘못된 추상화임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          벡터 데이터베이스는 잘못된 추상화임

     * AI 애플리케이션을 구축하려는 엔지니어링 팀을 괴롭히는 메시지 : ""임베딩이 다시 동기화되지 않았습니다""
     * 간단한 벡터 검색 구현은 모니터링, 동기화 및 문제 해결의 복잡한 오케스트라로 발전함
     * 벡터 데이터베이스로 AI 시스템을 구축하는 엔지니어링 팀과 이야기를 나눈 결과, 벡터 데이터베이스의 잘못된 추상화와 오늘날 사용 방식의 결함을 발견함

  ""RAG 시스템을 구축하는 공통적인 사례""

     * Pinecone을 벡터 데이터베이스로 사용하여 임베딩을 저장하고 검색함
     * 텍스트 데이터가 Pinecone의 메타데이터에 잘 맞지 않아 DynamoDB로 블롭과 애플리케이션 데이터를 처리함
     * 어휘 검색을 위해 OpenSearch가 필요했음
     * 이제 3개의 시스템을 연결하고 동기화하는 것이 악몽임

    소스 문서를 삭제할 때 다음을 수행해야 함:

    1. boto3를 실행하여 DynamoDB에서 레코드 제거
    2. Pinecone을 업데이트하여 임베딩이 삭제되었는지 확인
    3. 어휘 검색 인덱스를 업데이트하기 위해 POST 요청 필요

     * 모든 소스 문서 업데이트, 추가 또는 삭제에 대해 이를 수행해야 함
     * 구성 관리는 지저분할 뿐만 아니라 위험함
     * 4개월 전에 삭제했어야 할 인덱스에 대해 한 달에 $2,000를 지불한 팀도 있음
     * 잘못되거나 오래된 데이터를 사용자에게 반환할 위험이 있음

  벡터 데이터베이스는 잘못된 추상화에 구축됨

     * 벡터 데이터베이스는 임베딩을 파생 데이터가 아닌 독립적인 데이터로 취급함
     * 임베딩을 독립적인 데이터로 취급함으로써 불필요한 복잡성을 만듦

  더 나은 방법: ""Vectorizer"" 추상화

     * 임베딩을 데이터베이스 인덱스와 같이 취급하는 ""벡터라이저"" 추상화를 제안함
     * 이 접근 방식은 임베딩을 소스 데이터와 자동으로 동기화하여 유지 관리 비용을 제거함
     * CREATE INDEX 명령에 해당하는 벡터라이저는 다음과 같음:

SELECT ai.create_vectorizer(
    'public.blogs'::regclass,
    embedding => ai.embedding_openai('text-embedding-3-small', 1536),
    chunking => ai.chunking_recursive_character_text_splitter('content')
);

     * 이 명령은 블로그 테이블의 모든 항목에 대한 임베딩을 생성하고 테이블의 데이터가 변경될 때 임베딩을 계속 업데이트함

벡터 데이터베이스(및 벡터 데이터 유형)의 문제점

     * 벡터 데이터베이스는 텍스트, 이미지 및 멀티모달 데이터에 대한 대량의 벡터 임베딩을 처리하기 위해 개발됨
     * PostgreSQL, MySQL, MongoDB, Oracle과 같은 범용 데이터베이스도 벡터 검색 지원을 추가함
     * 그러나 독립형 시스템 또는 기존 데이터베이스에 추가된 벡터 검색 기능의 추상화에는 치명적인 결함이 있음
     * 임베딩이 데이터베이스에 삽입되면 임베딩되는 비정형 데이터와 벡터 임베딩 자체 간의 연결이 끊어짐
     * 이 연결이 없으면 임베딩은 파생 데이터가 아닌 개발자가 관리해야 하는 독립적인 데이터 원자로 잘못 취급됨
     * 임베딩을 파생 데이터로 재구성하면 임베딩이 소스 데이터와 연결되지 않은 현재 벡터 데이터베이스 추상화의 부조리함이 분명해짐

  개발 팀은 다음을 관리해야 함:

     * 복잡한 ETL(추출-로드-변환) 파이프라인
     * 임베딩용 벡터 데이터베이스, 메타데이터 및 앱 데이터용 다른 데이터베이스, 어휘 검색 인덱스
     * 데이터 동기화 서비스
     * 업데이트 및 동기화를 위한 큐잉 시스템
     * 데이터 드리프트를 잡고 임베딩 서비스의 속도 제한 등을 처리하는 모니터링 도구
     * 검색이 오래된 결과를 반환할 때 알림 시스템
     * 모든 시스템에 대한 검증 확인
     * 새로운 임베딩 모델로 업그레이드하거나 다른 청킹 방법을 시도하려면 사용자 정의 코드를 작성하고 여러 데이터 서비스 및 데이터베이스에서 변경 사항을 조정해야 함
     * 이러한 작업은 개발 팀에게 임베딩이 소스 데이터가 변경됨에 따라 시기적절하게 생성되도록 보장하는 부담을 줌
     * 그렇지 않으면 임베딩이 자주 오래되어 사용자에게 더 나쁜 애플리케이션 경험을 제공할 위험이 있음

더 나은 방법: 데이터베이스가 복잡성을 처리하도록 하기

     * 임베딩을 파생 데이터로 재구성하면 기본 데이터가 변경됨에 따라 임베딩을 생성하고 업데이트할 책임을 데이터베이스 관리 시스템에 맡길 수 있음
     * 이 변경으로 개발자는 수동으로 임베딩을 소스 데이터와 동기화된 상태로 유지해야 하는 부담에서 벗어남
     * 이 구분은 RAG에 대해 일회성 데이터 가져오기를 수행하는 간단한 애플리케이션에는 중요하지 않을 수 있음
     * 그러나 대부분의 실제 애플리케이션에서 데이터는 지속적으로 변경됨
     * 임베딩 기반 의미론적 검색을 사용하는 전자상거래 플랫폼이나 최신 제품 정보로 최신 상태를 유지해야 하는 제품 어시스턴트 RAG 앱을 고려하십시오.
     * 이러한 변경 사항을 수동으로 추적하고 임베딩을 다시 생성하는 것은 노동 집약적이고 오류가 발생하기 쉬울 뿐만 아니라 개발자가 핵심 비즈니스 목표에 집중하는 것을 방해함
     * 데이터베이스 시스템이 자동으로 처리할 수 있는데 왜 개발 시간을 낭비하는가?

벡터라이저: 인덱스로서의 벡터 임베딩

     * 벡터 임베딩을 독립적인 테이블이나 데이터 유형이 아닌 임베딩된 데이터에 대한 특수한 인덱스로 개념화하는 것이 더 효과적인 추상화임
     * 벡터 임베딩은 전통적인 의미에서 인덱스가 아님
     * 대신에 벡터 임베딩은 임베딩에 기반하여 데이터의 가장 관련성 있는 부분을 검색하는 인덱싱 메커니즘으로 작동함
     * 우리는 이 새로운 인덱스와 유사한 추상화를 ""벡터라이저""라고 부를 수 있음

벡터라이저 추상화의 주요 이점:

  자동 동기화

     * 데이터베이스의 인덱싱의 주요 이점 중 하나는 기본 데이터와 인덱스를 자동으로 동기화된 상태로 유지하는 것
     * 열의 데이터가 변경되면 인덱스가 그에 따라 업데이트됨
     * 벡터 임베딩을 인덱싱의 한 형태로 취급함으로써 이와 동일한 자동 동기화를 활용할 수 있음
     * 시스템은 벡터 임베딩이 항상 최신 데이터로 최신 상태를 유지하도록 보장하여 수동 업데이트의 필요성을 제거하고 오류 위험을 줄임

  강화된 데이터-임베딩 관계

     * 벡터가 독립적으로 저장되면 원래 데이터와의 관계를 잃어버리기 쉬움
     * 이 벡터는 데이터의 최근 업데이트에서 생성되었는가? 아니면 이전 임베딩 모델의 오래된 벡터인가?
     * 이러한 질문은 중요하며 여기서 혼동되면 심각한 오류가 발생할 수 있음
     * 벡터 임베딩을 인덱스로 데이터에 직접 연결함으로써 관계가 명확해지고 자동으로 유지됨

  단순화된 데이터 관리

     * 개발자는 종종 데이터 동기화를 수동으로 관리할 때 어려움에 직면함
     * 예를 들어, 기본 데이터가 삭제될 때 이전 임베딩 모델의 데이터를 삭제하는 것을 잊으면 불일치가 발생할 수 있음
     * 벡터라이저 추상화는 이러한 관계를 관리하는 것을 시스템의 책임으로 만들어 개발자의 인지 부하를 줄이고 실수 가능성을 최소화함

벡터라이저는 핵심 DBMS 약속의 자연스러운 진화

     * 벡터라이저 개념은 현대 데이터베이스 관리 시스템(DBMS) 기능의 자연스러운 진화임
     * 오늘날의 DBMS는 인덱스, 트리거, 물질화된 뷰와 같은 선언적 구조를 통해 데이터 변환 및 동기화를 관리하는 데 이미 능숙함
     * 벡터라이저 추상화는 벡터 임베딩 관리의 점점 더 중요해지는 작업을 처리하기 위한 새로운 도구를 제공하여 이 패러다임에 잘 맞음
     * 이 기능을 DBMS에 직접 포함함으로써 데이터베이스 시스템의 궁극적인 약속을 실현하는 데 더 가까워짐
     * 사용자가 애플리케이션 구축, 데이터 분석 및 혁신 주도에 가장 잘하는 일에 집중할 수 있도록 복잡성을 추상화하는 방식으로 데이터를 관리함

PostgreSQL용 벡터라이저 구현: pgai Vectorizer

     * 개발자의 부담을 가볍게 하겠다는 약속에 동기를 부여받아 Timescale의 AI 엔지니어링 팀은 PostgreSQL용 벡터라이저를 구현했음
     * pgai Vectorizer라고 하며 현재 Early Access에 있음
     * PGAI 프로젝트의 일부로 PostgreSQL을 AI 시스템에 더 적합하게 만들고 PostgreSQL에 익숙한 개발자에게 AI 개발을 쉽게 하기 위한 프로젝트임
     * pgai Vectorizer가 PostgreSQL의 데이터에 대한 벡터 임베딩을 자동으로 생성하고 업데이트하는 방법을 보려면 데모 비디오를 확인하세요

  pgai Vectorizer 작동 방식

     * SQL에서 벡터라이저를 정의하고 생성함
     * 다음 쿼리는 벡터라이저를 생성하고 작용하는 테이블,벡터화할 열, 사용할 임베딩 모델, 임베딩할 소스 데이터에 포함할 다른 정보에 대한 추가 서식을 지정함

-- blogs 테이블의 데이터를 자동으로 임베드하는 벡터라이저 생성
SELECT ai.create_vectorizer(
   'public.blogs'::regclass
   -- OpenAI text-embedding-3-small 모델 사용
 , embedding=>ai.embedding_openai('text-embedding-3-small', 1536, api_key_name=>'OPENAI_API_KEY')
   -- 테이블에 100k 행이 있을 때 StreamingDiskANN 인덱스 자동 생성
 , indexing => ai.indexing_diskann(min_rows => 100000, storage_layout => 'memory_optimized'),
   -- content 열에 재귀적 청킹 적용
 , chunking=>ai.chunking_recursive_character_text_splitter('content')
   -- 더 나은 검색을 위해 다른 열의 메타데이터를 임베딩에 추가
 , formatting=>ai.formatting_python_template('Blog title: $title url: $url blog chunk: $chunk')
);
-- 벡터라이저는 소스 테이블이 변경될 때 임베딩을 업데이트함
-- 다른 사용자 작업은 필요하지 않음

     * 또한 긴 텍스트를 임베딩 모델 토큰 제한에 맞는 여러 개의 작은 청크로 분할해야 하므로 기본 청킹 함수를 정의함

    소스 데이터 변경 사항 추적

     * pgai Vectorizer는 내부적으로 소스 테이블의 수정(삽입, 업데이트, 삭제)을 확인하고 벡터 임베딩을 비동기식으로 생성하고 업데이트함
     * 자체 호스팅 및 Timescale Cloud에서 완전 관리형의 두 가지 배포 유형에 대해 pgai Vectorizer를 구축함
     * pgai Vectorizer의 클라우드 호스팅 구현에서는 Timescale Cloud 플랫폼의 클라우드 기능을 사용하여 임베딩 생성
     * pgai Vectorizer의 오픈 소스 버전에서는 외부 작업자를 실행하여 임베딩 생성
     * pgai Vectorizer는 구성 및 카탈로그 정보를 데이터베이스 내부의 주요 내부 부기 데이터와 함께 저장함

    임베딩을 실제로 생성하는 곳은?

     * 실제 임베딩 프로세스는 데이터베이스 외부의 외부 프로세스에서 발생함
     * 이는 데이터베이스 서버의 부하를 줄이고 벡터라이저가 애플리케이션 쿼리를 처리하는 데이터베이스의 기능에 영향을 미치지 않음을 의미함
     * 또한 다른 데이터베이스 작업과 독립적으로 임베딩 작업을 쉽게 확장할 수 있음
     * 이 프로세스는 먼저 데이터베이스를 읽어 수행해야 할 작업이 있는지 확인
     * 있는 경우 데이터베이스에서 데이터를 읽고, 청킹 및 포맷팅을 수행하고, OpenAI와 같은 임베딩 모델 제공업체에 호출하여 임베딩을 생성하고, 결과를 다시 데이터베이스에 씀

    프로세스 사용자 정의

     * pgai Vectorizer는 유연함: 임베딩을 만드는 데 사용되는 청킹 및 포맷 규칙을 지정할 수 있음
     * 특히 벡터화할 소스 테이블의 열과 소스 데이터가 임베딩 토큰 제한 내에 맞고 관련 데이터가 각 임베딩에 포함되도록 하는 청킹 및 포맷팅 규칙을 구성할 수 있음
     * pgai Vectorizer의 Early Access 릴리스에서는 OpenAI 임베딩 모델 선택, 텍스트를 더 작은 청크로 분할하는 청킹 전략, 각 청크에 추가 컨텍스트를 주입하는 포맷팅 옵션, 자동 인덱스 생성 및 성능 튜닝을 위한 사용자 정의 인덱싱 구성을 사용자 정의할 수 있음
     * 곧 사용자가 자신의 Python 코드를 제출하여 청킹, 임베딩 및 포맷팅을 완전히 사용자 정의할 수 있도록 하여 이를 더욱 유연하게 만들 계획

   예를 들어 다음은 HTML 소스 파일을 재귀적으로 분할하고 소스 데이터에서 OpenAI 임베딩을 만들도록 구성된 벡터라이저임. 코드, 문서, 마크다운 등 애플리케이션 데이터에 맞게 청킹과 포맷팅을 구성할 수 있음
-- 고급 벡터라이저 구성
SELECT ai.create_vectorizer(
   'public.blogs'::regclass,
   destination => 'blogs_embedding_recursive',
   embedding => ai.embedding_openai('text-embedding-3-small', 1536),
   -- HTML 콘텐츠에 대해 지정된 설정으로 재귀 청킹 적용
   chunking => ai.chunking_recursive_character_text_splitter(
       'content',
       chunk_size => 800,
       chunk_overlap => 400,
       -- HTML 인식 구분 기호, 우선 순위가 가장 높은 것부터 가장 낮은 순서로 정렬
       separator => array[
           E'</article>', -- 주요 문서 섹션에서 분할
           E'</div>',    -- div 경계에서 분할
           E'</section>',
           E'</p>',      -- 단락에서 분할
           E'<br>',      -- 줄 바꿈에서 분할
           E'</li>',     -- 목록 항목에서 분할
           E'. ',        -- 문장 경계로 대체
           ' '          -- 최후의 수단: 공백에서 분할
       ]
   ),
   formatting => ai.formatting_python_template('title: $title url: $url $chunk')
);

GN⁺의 의견

     * pgai Vectorizer는 임베딩 관리를 크게 단순화할 수 있는 강력하고 혁신적인 도구로 보임. 벡터라이저 추상화는 개발자가 임베딩을 수동으로 관리해야 하는 부담을 덜어주고 임베딩이 소스 데이터와 동기화되도록 보장.
     * 특히 임베딩 모델 업그레이드 또는 청킹 전략 변경과 같은 변경 사항을 적용할 때 매우 유용할 것 같음. 기존의 벡터 데이터베이스에서는 이러한 변경으로 인해 여러 시스템에서 사용자 정의 코드를 작성하고 조정해야 하는 복잡한 프로세스가 발생할 수 있지만, pgai Vectorizer를 사용하면 벡터라이저 구성만 업데이트하면 됨.
     * 또한 PostgreSQL과 같은 범용 데이터베이스에서 임베딩을 관리하면 여러 전문 시스템을 오케스트레이션해야 하는 문제를 피할 수 있음. 이는 애플리케이션 개발을 크게 단순화할 수 있음.
     * 한 가지 고려해야 할 점은 외부 Python 프로세스에서 실제 임베딩이 생성된다는 것. 이는 데이터베이스 성능에 영향을 미치지 않도록 하는 좋은 설계 선택이지만, 임베딩 생성 프로세스를 별도로 모니터링하고 관리해야 함을 의미함.
     * 궁극적으로 pgai Vectorizer는 AI 애플리케이션을 위한 임베딩 관리 방식에 상당한 발전을 나타냄. 더 많은 팀이 이를 도입하고 피드백을 제공함에 따라 이 강력한 도구가 더욱 발전할 것으로 기대됨. Postgres와 같은 친숙한 도구에 임베딩 관리를 통합하면 더 많은 개발자가 첨단 AI 기능을 활용할 수 있게 될 것임.

        Hacker News 의견

     * 데이터 동기화의 오버헤드를 과대평가하고 있으며, 대부분의 임베딩 기반 워크플로우는 업데이트나 삭제가 많지 않음. 작은 데이터 집합에서도 일관성 문제를 인식하기 어려움. 하지만 데이터 동기화 걱정이 필요 없다는 점은 여전히 멋짐
          + Postgres 데이터베이스에 임베딩을 저장할 때 가장 큰 단점은 워크로드가 매우 다르다는 것임. HNSW 인덱스는 많은 리소스를 소모하며, 리소스 경쟁 문제를 일으킬 수 있음. 데이터베이스를 이동시키면 일관성 문제가 다시 발생함
          + 필터링과의 상호작용에 대한 질문이 있음. 부분 인덱스를 활용할 수 있는지, pgvector의 HNSW 구현의 제한 사항이 여전히 존재하는지 궁금함
     * Elastic 직원으로서, Elasticsearch가 최근에 semantic_text라는 데이터 타입을 추가했음을 언급함. 이는 텍스트를 자동으로 청크로 나누고 임베딩을 계산하여 저장함. 쿼리도 간소화되어 I/O가 줄어들고 클라이언트 코드가 간단해짐
     * PostgreSQL 도구를 소개하며, 벡터 임베딩을 데이터베이스 인덱스로 재구상함. 현재 OpenAI만 지원하지만, 곧 로컬 및 OSS 모델 지원을 계획 중임. 피드백과 반응을 기대함
     * FAISS를 단일 데이터베이스로 사용하는 것에 대한 의문을 제기함. 이는 벡터 임베딩을 위한 sqlite와 같으며, 메타데이터와 벡터를 함께 저장하여 관계를 유지할 수 있음
     * Postgres에 벡터를 사용하는 것에 대해 긍정적이며, SQL 쿼리에서 벡터 검색과 논리를 포함할 때 필터링 순서에 대한 의문을 제기함. pg_vector의 DX를 좋아하지만, 벡터 검색 후 필터링이 속도를 저하시킬 수 있음
     * 원시 임베딩을 벡터 데이터베이스에 저장하는 것은 텍스트의 원시 n-그램을 데이터베이스에 저장하는 것과 같다고 언급함. 문서를 저장하는 것이 더 합리적임
     * sqlite-vec과 FTS5를 SQLite에서 사용 중이며, 매우 유용하다고 언급함
     * PostgreSQL ORM을 Node.js에서 구축하여 벡터 필드를 포함한 코드를 작성할 수 있게 함. 이는 데이터나 임베딩 콘텐츠를 쿼리할 수 있으며, 모델의 필드를 임베딩으로 저장하는 방법을 정의할 수 있음
     * Materialized Views가 좋다고 언급함
     * 캐릭터 기반 청크를 사용하는 AI 앱은 PoC 단계를 넘지 않았다고 언급함
"
"https://news.hada.io/topic?id=17496","2024년 SaaS의 가격 페이지 변경 추적을 통해 배운 점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2024년 SaaS의 가격 페이지 변경 추적을 통해 배운 점

     * 가격은 모든 SaaS 기업에게 궁극적인 성장 지렛대임. 가격 페이지는 제품, 포지셔닝, 가격이 만나는 곳이자 비즈니스의 핵심임
     * 2024년 1분기~3분기에 42%가 가격을 조정했음. Good, Bad, Ugly 사례를 살펴보고 SaaS 업계 전반의 광범위한 동향도 파악

[The Good]

  Monday.com, 모든 요금제의 가격을 인상함

     * Monday는 제품에 빠르게 새로운 기능을 지속 제공하여 가치를 높이고 있음. 이를 통해 가격 인상에 대한 자신감을 얻음
     * 가격 인상을 전략적으로 접근함. 가장 인기 있는 Standard 요금제는 20% 인상한 반면, Basic 요금제는 12.5% 인상에 그쳐 가격에 민감한 고객을 수용하고 시트당 $10 미만의 가격대를 유지함

  Linear, 가격 페이지를 전문화함

     * 기존 가격 페이지는 세련된 디자인이었지만 요금제 구성이 부실했음. 개편을 통해 Enterprise 요금제를 메인 그리드로 끌어오고 다른 요금제 이름을 고객 니즈에 맞게 변경함
     * 이제 방문자는 자신에게 맞는 요금제를 빠르게 식별할 수 있고, 대형 잠재고객은 쉽게 Enterprise를 선택하고 영업팀과 대화를 시작할 수 있음

  Jira, 가격 페이지의 기본 사용자 수를 조정함

     * 가격이나 패키징을 변경하지 않고도 영향을 미칠 수 있음. Jira는 기본 사용자 수를 10명에서 300명으로 늘림
     * 이를 통해 가격을 더 매력적으로 보이게 하고 대형 고객에게 어필할 수 있음
     * 아틀라시안은 기업 시장에서의 모멘텀 구축이 최우선 과제이며, Jira 교차판매가 기업 도입 확대에 중요한 역할을 한다고 강조함

[The Bad]

  IFTTT, 한 요금제의 가격을 150% 인상함

     * 가격 인상에는 찬성하지만 최상위 요금제에 대해 이 정도로 공격적인 인상은 지나침
     * Pro+ 고객은 이제 이전보다 2배 이상을 지불하게 되었지만 Pro 요금제는 16.8% 밖에 인상되지 않았음
     * Pro+ 요금제는 무제한 사용이 가능한 정액제를 제공함. IFTTT는 사용량 제한을 조정하거나 사용량과 기능을 모두 고려한 하이브리드 가격 모델을 채택할 수 있었음
     * 단순성이 목표였을 수 있지만, 보다 균형 잡힌 모델은 적당한 사용자에게 어필하면서 헤비 유저로부터의 수익성도 확보할 수 있었을 것임

  ProductPlan, 가격 페이지를 비공개로 전환함

     * ProductPlan은 대기업 시장을 향해 큰 전환을 했는데, 여기에는 공개 가격 제거도 포함됨
     * 겉으로 보기에는 괜찮아 보이지만, 잠재고객에게 이를 제시하는 더 나은 방법이 있음
     * 현재 페이지에는 ""최고 수준의 Enterprise 제품""에 대한 어색한 헤드 카피와 ""간단명료한 솔루션""을 홍보하는 CTA가 나오지만 뒤이어 나오는 내용은 전혀 명확하지 않음
     * 페이지는 15개의 Enterprise 기능, 10개의 서비스 제공, 3개의 Enterprise 통합으로 혼잡하고 탐색하기 어려우며 ProductPlan이 고객을 돕는 가장 일반적인 방식을 강조하지 않음

[The Ugly]

  LastPass, 역대 가장 혼란스러운 가격 페이지 흐름

     * 솔직히 누구를 망신주려는 것은 아니지만 이 가격 페이지는 엉망임. 몇 가지 문제점이 두드러짐:
          + 요금제가 거꾸로 나열되어 있어 가장 큰 요금제가 먼저 나옴. 혼란스럽고 속임수 같음
          + 이전에는 토글로 구분되었던 가족용과 비즈니스용 요금제를 이제는 혼합함. 토글이 훨씬 명확했음
          + 각 요금제에 ""최고의 가치"", ""고급 기능과 확장성"" 등 여러 배너가 있음
     * LastPass 고객이지만 이 가격 페이지는 개선이 필요함

[2024년 SaaS 가격 책정의 주요 지표와 동향]

     * 전체 188개사(42.4%)가 2024년 1분기~3분기에 가격을 업데이트함. 기존 가격 조정, 새로운 가격대 요금제 도입, 기존 요금제 제거 등이 포함됨
     * 42개사는 지난 3분기 동안 분기당 2회 이상 가격을 업데이트해, 상당수 기업이 반복적 가격 전략을 채택하고 있음을 보여줌
     * 가격 인상
          + 총 64건의 가격 인상이 기록되었지만 인상폭은 크게 달랐음. 일부는 소폭 조정했고 일부는 큰 폭으로 인상함
          + 이상치를 제외하면 평균 인상률은 20% 정도임
     * 가격 인하
          + 총 38건의 가격 인하가 기록됨. 기업들은 기존 제품의 고객 유치나 신제품 도입률 제고를 위해 가격 인하를 활용함
     * 다른 가격 전략들
          + 17개사(3.8%)가 한시적 초기 가입 할인을 활용함. 보통 3~6개월간 제공
          + 57개사가 요금제를 추가 또는 제거해 고객 선택지를 변경함
          + 33개사(7.4%)가 가격 공개 여부를 변경함
     * 4분기에는 연간 매출 목표 달성을 위해 더 많은 할인이 등장할 것으로 예상됨
     * 1분기가 변경이 많은 시기인 만큼 예정된 가격 변경을 알리는 배너도 늘어나길 기대함
     * 하지만 가격 변경은 회사, 거시 환경, 계절에 따라 크게 달라지므로 향후 전개 양상을 정확히 예측하기는 어려움
"
"https://news.hada.io/topic?id=17562","HN에 알림: Causal 인수 완료 – HN에 감사드립니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN에 알림: Causal 인수 완료 – HN에 감사드립니다

     * HN 커뮤니티에 감사 인사
          + Causal의 공동 창업자이자 CEO로서 Lucanet 그룹에 인수된 소식을 발표함
          + HN 커뮤니티에 큰 감사를 전하고 싶음
     * Causal의 시작
          + 5년 전 HN 게시물에서 시작되어 Causal을 풀타임으로 개발하게 된 계기가 되었음
          + 몇 달 후 Excel 민감도 도구를 출시함
     * Causal의 발전
          + 2022년에는 계산 엔진을 수십억 개의 셀로 확장하는 방법을 공유함
          + 최근에는 Causal 2.0을 성공적으로 발표함
     * Causal의 현재
          + 현재 수백 개의 스타트업(여러 YC 기업 포함)에서 사용 중임
          + Lucanet 내에서의 다음 성장 단계에 대해 기대하고 있음

GN⁺의 정리

     * Causal은 데이터 분석 및 시뮬레이션 도구로, Lucanet 그룹에 인수되며 새로운 성장 기회를 맞이함.
     * HN 커뮤니티의 지원이 창업 초기 단계에서 큰 역할을 했으며, 이는 스타트업 생태계에서 커뮤니티의 중요성을 보여줌.
     * Causal의 발전 과정은 기술적 확장과 제품 개선의 좋은 사례로, 데이터 처리 및 분석에 관심 있는 사람들에게 유익할 수 있음.
     * 유사한 기능을 가진 제품으로는 Microsoft Excel과 Google Sheets가 있으며, Causal은 이들보다 더 직관적인 인터페이스와 강력한 계산 기능을 제공함.

        Hacker News 의견

     * COVID 기간 동안 비슷한 프로젝트를 진행했으나, Causal을 사용하게 되었음. Causal은 예산 및 예측에 매우 유용했음.
          + LTSE의 Runway는 개선이 중단되었고, Summit은 무코드 도구로 전환되었으며, Obvious는 종료되었음.
          + Causal을 2021년 4월부터 사용 중이며, 최근 세 개의 벤처 및 개인 용도로 적극 활용 중임.
          + Linear와 비슷한 품질로 매우 선호하는 제품임.
          + 상업적 사용자는 아니지만, 상업적 및 개인적 용도로 매우 유용했음.
          + Lucanet에서 잘 적응하길 바라며, 무료 모델을 유지하길 바람.
     * Causal 설립 시 인수합병이 초기 목표였는지, 아니면 거절할 수 없는 제안을 받은 것인지 궁금함.
     * 다시 한다면 AG-Grid를 사용할 것인지, Tanstack Table과 같은 것을 사용할 것인지 궁금함.
     * Google Meet에서 몇 년 전 인과성에 대해 대화를 나눈 적이 있었음을 상기시킴.
     * 이 인수가 새로운 스타트업 아이디어를 추구하는 경력 모델을 검증하는지, 아니면 다시 하지 않을 것인지 궁금함.
     * 미국 고객/투자자 접근을 위해 미국 전환이 의미 있는 차이를 만들었는지 궁금함. Lucanet은 EU에 있어 복잡해졌을 수 있음.
     * Taimur의 인수 작업을 축하하며, 다음 행보를 기대함.
     * 인수를 추구했는지, Lucanet에 의해 회사가 인수된 것인지 궁금함.
"
"https://news.hada.io/topic?id=17502","OpenAI, Broadcom & TSMC와 협력하여 첫 번째 칩을 개발하고 파운드리 계획을 축소함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        OpenAI, Broadcom & TSMC와 협력하여 첫 번째 칩을 개발하고 파운드리 계획을 축소함

     * OpenAI가 AI 추론 칩을 개발하고 파운드리 네트워크 계획을 포기함
     * Broadcom이 OpenAI의 칩 설계를 돕고 TSMC에서 제조할 수 있도록 지원함
     * OpenAI는 AMD의 AI 칩을 추가하여 칩 공급을 다각화함

OpenAI의 내부 칩 설계 노력과 산업 파트너십 활용

     * OpenAI는 칩 공급을 다각화하고 비용을 절감하기 위해 다양한 옵션을 검토함
     * 회사는 당분간 야심찬 파운드리 계획을 중단하고 내부 칩 설계 노력에 집중할 계획임
     * OpenAI의 전략은 Amazon, Meta, Google, Microsoft와 같은 대규모 경쟁사들과 마찬가지로 산업 파트너십과 내부 및 외부 접근 방식을 활용하여 칩 공급을 확보하고 비용을 관리하는 방법을 보여줌
     * OpenAI는 칩 구매자 중 가장 큰 규모 중 하나로, 맞춤형 칩을 개발하면서 다양한 칩메이커로부터 소싱하기로 한 결정은 기술 분야에 광범위한 영향을 미칠 수 있음
     * Broadcom은 Google과 같은 기업이 제조를 위해 칩 설계를 미세 조정하는 것을 돕고, 칩에서 정보를 빠르게 이동시키는 데 도움이 되는 설계 부품을 공급함
     * OpenAI는 Broadcom을 통해 2026년에 첫 번째 맞춤형 설계 칩을 제조할 수 있는 TSMC와의 제조 능력을 확보함
     * 현재 Nvidia의 GPU는 80% 이상의 시장 점유율을 차지하고 있음
     * 그러나 공급 부족과 비용 상승으로 Microsoft, Meta, 그리고 이제 OpenAI와 같은 주요 고객들이 내부 또는 외부 대안을 모색하고 있음
     * OpenAI가 Microsoft의 Azure를 통해 AMD 칩을 사용하기로 한 것은 AMD의 새로운 MI300X 칩이 Nvidia가 지배하고 있는 시장의 일부를 차지하려고 시도하고 있음을 보여줌
     * AI 모델 훈련 및 ChatGPT와 같은 서비스 운영에는 비용이 많이 듦
     * OpenAI는 올해 37억 달러의 매출에 50억 달러의 손실을 예상하고 있음
     * 컴퓨팅 비용은 회사의 가장 큰 비용으로, 활용도를 최적화하고 공급업체를 다각화하려는 노력을 촉발시킴

GN⁺의 의견

     * OpenAI의 내부 칩 설계 노력과 다양한 칩메이커와의 협력은 AI 산업에서 중요한 변화를 나타냄. 이는 Nvidia의 지배력에 도전할 수 있는 새로운 대안을 만들어내고, AI 기술 발전을 가속화할 수 있음
     * 그러나 OpenAI의 비용 구조와 관련된 우려가 제기될 수 있음. AI 모델 개발과 서비스 운영에 막대한 비용이 소요되는 상황에서, 장기적인 수익성과 지속 가능성에 대한 의문이 있음
     * 한편, AMD의 MI300X 칩과 같은 신규 AI 칩의 등장은 시장 경쟁을 촉진하고 고객들에게 더 많은 선택지를 제공할 것임. 이는 AI 기술의 대중화와 상용화에 기여할 수 있음
     * AI 칩 시장의 경쟁 심화로 인해 기술 혁신이 가속화되고, 고성능 저전력 칩에 대한 수요가 증가할 것으로 예상됨. 이에 따라 칩 설계 및 제조 분야의 투자와 인재 확보 경쟁도 더욱 치열해질 전망임
     * 기업들이 AI 칩을 도입할 때는 성능, 비용, 호환성, 확장성 등 다양한 요소를 종합적으로 고려해야 함. 장기적인 기술 로드맵과 비즈니스 전략에 부합하는 최적의 칩을 선택하는 것이 중요함

        Hacker News 의견

     * OpenAI는 칩 제조를 위한 ""foundries""라는 공장 네트워크를 구축하려는 계획을 포기했음. 이는 비용과 시간 문제 때문임
          + OpenAI의 계획은 7조 달러를 모아 36개의 AI 실리콘 제조 공장을 짓는 것이었음
          + TSMC 경영진은 이 계획을 듣고 웃었다고 전해짐
     * OpenAI는 Google의 하드웨어 엔지니어들을 많이 채용하고 있음
          + LinkedIn에서 OpenAI의 하드웨어 엔지니어 프로필을 보면 많은 이들이 전 Google 직원임을 알 수 있음
          + Google의 TPU 팀은 이전보다 약해졌으며, 향후 Google TPU가 OpenAI 칩보다 열등할 가능성도 있음
     * Google의 TPU 개발은 Broadcom의 도움을 받았음
          + Broadcom이 Google의 TPU 개발에 기여한 점을 고려하면, 전 Google 직원들이 새로운 회사에서도 이 관계를 유지하는 것은 당연함
     * AMD와 NVIDIA 칩을 추가하여 인프라 수요를 충족하려는 움직임이 있음
          + 수요가 ""미친 듯이"" 증가하고 있으며, 이는 공급 문제로 이어질 수 있음
          + Fortune 500 기업들은 모든 자원을 한 곳에 집중하지 않으며, AI 하드웨어와 소프트웨어의 공급원을 다양화하는 것이 현명함
     * OpenAI가 자체 데이터 센터를 구축하고 있는 것으로 보이나, 기사에서는 이를 명확히 언급하지 않음
          + TSMC가 아닌 다른 서구 AI/행렬곱 칩을 제조하는 곳이 있는지 궁금함
          + NVIDIA, AMD, Google, OpenAI 모두 TSMC를 사용하고 있음
          + 삼성은 경쟁력이 없는지 궁금함
     * 새로운 칩을 생산하고 훈련/추론에 사용하는 데 얼마나 시간이 걸릴지 궁금함
     * GH Copilot 외에 LLMs의 사회/문화적 영향은 아직 보지 못했음
          + 사회에 널리 퍼지고 지속적인 영향을 미치는 생산적인 문화적 영향이 있기를 기대함
     * OpenAI는 자체 칩 설계와 제조를 통해 경쟁 우위를 확보하려 했음
          + 자체 칩이 비용 면에서 큰 이점을 제공할 수 있음
          + 아마도 자체 칩 설계로 시작하는 것이 충분하다고 판단했을 수 있음
     * 7조 달러를 들여 자체 공장을 짓는 것은 야심차고 무모한 계획이었음
          + 현실을 직시하고 계획을 축소한 것으로 보임
          + 품질을 유지하기를 바람
     * TSMC와 함께 자체 칩을 만드는 것이 ""축소된"" 계획이라는 점이 재미있음
"
"https://news.hada.io/topic?id=17530","구글! 제발 그만해주세요: 당신들이 독립 웹사이트를 파괴하고 있어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 구글! 제발 그만해주세요: 당신들이 독립 웹사이트를 파괴하고 있어요

     * Google은 독립 웹사이트를 검색 결과에서 숨김으로써 죽이고 있음
     * 이는 구글의 AI 랭킹 시스템이 통제 불능 상태에 빠졌거나, 광고 수익을 늘리기 위한 의도적인 조치일 수 있음
     * Shepherd 웹사이트의 특정 섹션은 16개월 동안 구글 트래픽이 86% 감소함. 이는 방문자 참여도가 높았던 페이지임에도 불구하고 발생한 현상임.
          + Google은 계속 변화하지만 이런 하락은 미친 것이며, 많은 웹사이트를 파괴하고 있음
          + 좋은 콘텐츠를 만들면 페이지를 상위에 랭크시켜주겠다고 약속했으나, 이 약속은 지켜지지 않고 있음
     * Shepherd의 특정 섹션에서는 방문자의 60%가 페이지의 75% 이상을 읽고, 평균적으로 5분 이상 머무름.
     * 방문자의 12%는 책에 대해 더 알아보거나 서점으로 이동하며, 8%는 추천 목록을 클릭함.
     * 케빈 밀러의 예
          + 케빈 밀러는 미드웨이 전투에 대한 전문가로, 그의 페이지는 구글 검색에서 상위 3위에 랭크되었으나, 현재는 3페이지 이하로 밀려남.
          + 그의 페이지는 방문자가 평균 7분 이상 머무르고, 55%가 페이지의 75% 이상을 읽음.
          + 검색 결과에 케빈의 페이지 대신 랭크된 페이지는 가치가 낮은 콘텐츠로 구성되어 있음. 예를 들어, Bookshop.org의 단순한 목록, Goodreads의 정렬되지 않은 책 목록, Reddit의 오래된 스레드, Quora등의 전문성 없고 도움 안되는 페이지 등이 있음
          + 반면 DuckDuckGo와 Bing은 Kevin의 페이지를 1위와 3위에 랭크함

  독립 웹사이트의 위기

     * 많은 독립 웹사이트가 구글로부터의 트래픽 95% 이상을 잃고 파산하거나 폐업 위기에 처해 있음
     * Shepherd는 Bing, DuckDuckGo, 소셜 미디어 등에서의 트래픽 증가로 살아남을 수 있었음.

  Google은 변해야 함

     * 예전에는 원하는 것을 입력하면 마법처럼 결과를 보여줬지만, 지금은 광고, 스팸, 도움 안되는 결과들 뿐임
     * 구글은 검색 기능을 개선하고, 웹사이트 소유자와 소통해야 함.
     * 구글의 검색 엔진이 더 이상 유용하지 않으며, 광고와 스팸으로 가득 차 있음.
     * 구글은 웹사이트 소유자에게 실질적인 정보를 제공하고, 문제 해결을 위한 파트너 프로그램을 고려해야 함.

GN⁺의 의견

     * Google이 독립 웹사이트들에게 막대한 피해를 주고 있는 상황임. Google의 검색 시스템에 근본적 문제가 있어 보임
     * 검색 결과의 품질 저하는 사용자 경험에 큰 악영향을 미칠 것임. 사람들이 검색 엔진을 신뢰하지 않게 될 수 있음
     * Google은 이 문제를 심각하게 받아들이고 해결책을 모색해야 함. 웹사이트 소유자들과 소통하고 협력하는 것이 중요함
     * 독립 웹사이트들은 Google에 의존하지 않는 다각화된 트래픽 전략을 세워야 함. 소셜미디어, 뉴스레터, 타 검색엔진 등을 활용하는 것이 도움될 것임
     * Bing, DuckDuckGo 같은 대안 검색 엔진 사용을 고려해 볼만함. 이들은 더 관련성 높고 다양한 결과를 제공할 수 있음

   구글 검색은 의도적인지 아닌지는 몰라도 박살난 지 오래죠.
   저는 ublacklist 없이는 구글 검색 못씁니다.

   간단한 검색에도 스팸, 바이럴 사이트가 너무 많이 나오니 차라리 reddit.com 같은 검색어를 넣는 것이 나을 지경입니다.

   Kagi가 도메인 기반 필터도 걸 수 있고 주요 커뮤니티 검색을 기본적으로 지원해줘서 LLM 나오기 전까진 잘 썼습니다. 다만 요즘엔 잘 안 쓰고 있어요

        Hacker News 의견

     * Shepherd.com은 책 리뷰 사이트로 보이지만 실제로는 리뷰가 아닌 평점만 제공함. Amazon으로 연결됨
          + Google이 이런 콘텐츠를 반환하는 것이 적절한지 의문임
          + 링크 텍스트가 비정보적이라 실제 리뷰 링크를 놓쳤음
          + ""Chosen by 1 person - see why.""라는 링크는 때때로 리뷰로 연결되지만, 그렇지 않을 때도 있음
          + ""리뷰""라는 단어가 리뷰가 있는 페이지에 나타나지 않음. 이는 나쁜 SEO로 보임
          + 좋은 책 리뷰를 찾고 있다면, 보수적인 작가들이 운영하는 웹사이트를 추천함
     * 현재 상황에서 특히 이상한 점은 상위에 노출되는 페이지들이 진짜 콘텐츠인 척하지 않는다는 것임
          + LLM이 생성한 페이지라면 이해할 수 있지만, 대부분은 매우 저품질의 제휴 스팸임
          + ""내가 하지 않아도 되도록 연구했다""는 주장과 함께 Amazon 링크와 명백히 긁어온 리뷰가 포함됨
          + Google이 무엇을 하고 있는지 의문임
     * 8-10년 전 Google 검색은 훌륭했음
          + 잘 구성된 쿼리는 대부분 정보의 금광을 찾을 수 있었음
          + 서비스의 질이 떨어지는 것을 경험하면서 정보 경제에서 정보 검색은 사회 기능에 필수적인 공공 서비스로 취급되어야 한다는 주장이 있음
          + 검색 결과를 대화로 개선할 기회가 있으며, 누군가가 이를 곧 실행하기를 바람
     * Google 검색 품질이 해마다 떨어진다는 연구 결과가 있음
          + Google은 검색을 어렵게 만들 동기가 많음
          + Google은 ""malvertising""을 허용하여 품질보다 돈을 선호함을 증명함
          + 정보의 양이 많아져서 더 어려워졌음. Google도 접근할 수 없는 폐쇄된 공간이 많아짐
          + Google 결과가 주요 뉴스 사이트로 연결되는 경우가 많음
          + ""Warhammer""를 검색하면 수천 개의 팬 페이지가 존재하지만 크롤링되지 않거나 잊혀짐
          + ""Emulation"" 검색 시 첫 페이지는 ""wikipedia"", ""cambridge dictionary"", ""vocabulary""로 연결됨
     * Kagi에서 Shepherd.com 링크가 Quora 링크 다음으로 두 번째로 나타남
     * 간단한 해결책은 Google 사용을 중단하는 것임
          + 친구, 가족, 다른 인터넷 사용자들에게도 같은 행동을 권장함
          + 많은 사람들이 따라하면 Google의 주목을 받을 가능성이 있음
     * 과거에 Google 소유의 Blogger/Blogspot 블로그에 하드웨어 관련 글을 썼지만, Google과 Bing에서 찾을 수 없었음
     * 독립 사이트에 대한 Google 방문은 2022년, 2023년, 2024년에 비슷했음
          + 다른 사이트 방문은 해마다 두 배로 증가했음
          + Google 검색이나 감시 광고를 사용하지 않지만, 보고된 문제는 없음
          + 사이트에 트래커와 제휴 마케팅 링크가 많아 Google 검색에서 선호하지 않을 수 있음
"
"https://news.hada.io/topic?id=17590","CMake는 여전히 자신의 임무를 모른다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        CMake는 여전히 자신의 임무를 모른다.

   CMake는 점점 더 C++에 대한 나쁜 솔루션이라고 느껴진다. C++ 개발자의 요구에 부응하지 못할 뿐만아니라, 일관성 없는 언어로 매우 불분명하고 구조화되지 않은 방식으로 makefile을 빌드하는 암흑기에 머무르게 한다.

문제

   C++ 빌드 세계에는 두 가지 유형의 문제가 있다.
    1. 기존 프로젝트가 스스로 만든 문제 (역주: 이미 존재하는 커다란 프로젝트를 빌드하는 문제)
    2. C++에서 새 프로젝트를 선택할 때 겪는 문제

   CMake는 첫 번째 문제를 해결하려고 노력하며, 두 번째 문제는 전혀 해결하지 못한다. 하지만 이러한 문제를 해결하려 하지 않기 때문에 덜 유용한 도구가 되고있다.

   CMake는 프로젝트 정의를 빌드 시스템으로 번역하는 번역자가 되고 싶어하며, 이 부분에서 심하게 실패했다. 나쁜 프로젝트 정의 언어이며, 일관성이 없고 직관적이지 않다.

   C++ 커뮤니티의 모두는 이제 Rust의 도구들에 대해 이야기한다. Cargo는 대부분의 개발자가 필요하다고 생각하는것을 실제로 수행하기 때문이다. Cargo는 인터넷에서 종속성을 다운로드하여 격리된 툴킷을 만들고(나쁜 생각이지만), 정적으로 링크된 라이브러리를 제공한다(역시 나쁜생각이지만). 사람들은 엄청난 속도로 보안 구멍을 추가하는 도구를 필요로 하진 않지만(역주: 저자는 Cargo의 인터넷에서 자동으로 코드를 받아와 링크하는 방식이 보안 측면에서 공급망 공격과 같은 취약점이 된다고 주장합니다. I Hate Rust 참조.), Cargo가 실제로 제공하는것은 필요하다:
    1. 매우 엄격한 프로젝트 구조
    2. 라이브러리가 어디에 있는지에 대한 문제를 해결하기 위해 외부 서버에 의존하는 매우 간단한 구성 시스템
    3. 단 하나 의 도구집합.

   사람들은 실제로 작업에 집중할 수 있도록 더 작은 자유가 필요하고, 컴파일러를 가장 완벽한 방식으로 호출하는 데 능숙하지 않다.

해결책

   아직 해결책은 없다. 여가 시간에 klb를 작성하고 있지만, 지금은 해결책이 아니다. (시간과 돈이 필요하다.)

   하지만 사람들이 필요로 하는것이 무엇인지는 분명하다. 더 많은 옵션이 아니라 더 적은 옵션이다. 옵션이 적다는 것은 프로젝트 컴파일을 망칠 수 있는 방법이 적다는 것을 의미한다.

   CMake는 지금 C++ 세계에서 여전히 최고의 옵션이지만, 지난 20년 동안 C++에 일어난 최악의 일이기도 하다. 다른 모든 것은 개선되고 있지만 빌드 시스템만 악화되고 있다.

   문법이 좀 더럽긴 한데 CMake만한게 없더군요.
   M4 같은걸 비-POSIX 환경에서 돌리려면 머리가 아픕니다.
   애초에 빌드 환경에 뭐가 주렁주렁 붙는걸 안 좋아하다보니 meson나 scone같은건 손이 안 가고 premake는 뭔가 좀 나사가 빠져 보이다 보니 CMake로 그냥 더도말고 최대한 단순하게 코드 정의만 해서 쓰게 되더군요.

   오랫동안 욕하면서 CMake를 써 왔는데 막상 CMake만한게 없긴 합니다. bazel은 정말헬.. 새로 프로젝트를 시작한다면 meson을 고민해 볼 것 같네요.

   Meson이나 Bazel은 어떤가요?

   저는 둘 다 써본적이 없어 잘 모르겠네요...
   제 개인적으로는 작은 프로젝트에는 gprbuild가 마음에 들어서 쓰고있습니다.

   Camke외 다른 방법도 복잡하긴마찬가지
   Cross platform 으로 그나마.....

   그래서 Visual Studio가 인기있는것 같습니다. 즉시 코딩을 시작할 수 있으니까요.
   이것도 세세하게 파고들면 끝이 없긴 하지만요.

   CMake만 보면 토가 쏠립니다...

   CMake는 make 의 대체제가 아니라 autotools(automake)의 대체제라고 생각하면 된다고 생각해요.

   그래도 그냥 Makefile보다는 나은것 같기도 합니다.
   지난달에 셸 스크립트와 Perl, OS 환경변수, 이리저리 얽힌 Makefile 여러개로 구성된 빌드환경을 분석할일이 있었는데 정말 환장하겠더군요.

   세세하게 뭘 해보려고 하면 토끼굴로 들어갑니다...
"
"https://news.hada.io/topic?id=17534","Show GN: Co-op Translator:  명령어 한 줄로 프로젝트 다국어 번역 지원하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: Co-op Translator: 명령어 한 줄로 프로젝트 다국어 번역 지원하기

   👀 프로젝트를 다국어로 번역하고 관리하는 일이 얼마나 번거로운지 한 번쯤은 겪어 보셨을 텐데요. 특히 번역해야 할 마크다운 문서가 많거나, 프로젝트 내 사진까지도 번역해야 한다면 더더욱 복잡해지곤 합니다.

   ✅이런 번거로움을 해결하기 위해 Azure AI 서비스와 최신 LLM 기술을 활용해서 한 줄의 명령어로 프로젝트의 다국어를 관리할 수 있는 오픈소스를 개발하게 되었습니다.

   ✅ Co-op Translator는 Python 패키지로, Azure OpenAI와 Azure Computer Vision을 사용하여 마크다운 파일과 이미지 내 텍스트를 자동으로 다국어로 번역하고, 지정된 번역 폴더에 정리해 주는 프로그램입니다. 프로젝트 내 모든 문서 파일을 단 한 줄로 번역할 수 있어 효율적으로 다국어 지원을 관리할 수 있습니다.

   ✅ 주요 기능 및 특징:

   자동화된 번역: 다국어 번역을 손쉽게 진행합니다.

   마크다운 형식 유지: 번역 중에도 원본 마크다운 형식을 유지합니다.

   이미지 내 텍스트 번역: 이미지에 포함된 텍스트도 번역하여 저장하고 마크다운 번역본에 첨부된 링크를 번역된 링크로 대체합니다.

   다양한 언어 지원: 한국어를 포함해 약 40개 언어로 번역할 수 있습니다.

   간편한 통합: 프로젝트에 쉽게 통합하여 빠르게 다국어 지원을 추가할 수 있습니다.

   ✅ Co-op Translator README에는 다국어 지원을 위한 자세한 설명과 가이드가 있으니 참고해 보세요!

   : https://github.com/Azure/co-op-translator

   ✅ 현재 마이크로소프트 공식 오픈소스인 Phi-3 Cookbook 프로젝트는 Co-op Translator를 이용해서 다국어 관리를 하고 있습니다. Co-op Translator을 활용한 다국어 번역 관리 예시가 궁금하시면 한번 들어가보셔도 좋을 것 같습니다!
   : https://github.com/microsoft/Phi-3CookBook

   사용해 보고 추가되었으면 하는 기능이 있거나 궁금한 점이 있으시면 GitHub 이슈나 댓글로 남겨주시면 감사하겠습니다!

   개인 레포지토리인줄 알았는데 Azure 공식이네요??

   네, 맞습니다😊. 스토리를 조금 말씀드리면...

   처음에는 Microsoft의 Phi-3 CookBook 오픈소스 프로젝트에서 기여자로 활동하면서 한국어 번역본 제작을 제안했는데, 마침 해당 MS 직원분을 통해 Microsoft 대학교 후원 프로그램에서 다국어 번역 자동화 프로젝트가 진행 중이라는 이야기를 들었습니다.

   운 좋게 해당 팀과 연결되어 확인해보니, 영국의 Imperial College 학생분들이 초기 기능과 POC(개념 증명)를 구현해 둔 상태였지만, 상용화하기에는 구조가 다소 복잡한 상태였습니다.

   그래서 이 POC(개념 증명)를 바탕으로 제가 상용화 가능한 Python 오픈소스로 새롭게 재설계하고, 필요한 기능들을 구현하게 되었습니다. 이후 이 프로젝트는 Azure 공식 오픈소스로 전환되었고, 현재 제가 메인테이너로 활동하고 있습니다!

   긴 글 읽어주셔서 감사합니다. 앞으로도 더 많은 분들이 편리하게 사용할 수 있도록 기능을 개선해 나가겠습니다.

   굉장히 좋은 프로젝트네요! 공유 감사합니다 :)

   다만 추후에는 번역 쪽은 다른 번역 서비스로 쉽게 교체할 수 있게 해두면 더 좋을 것 같습니다. 애저를 싫어하는건 아니고 범용적으로 굉장히 유용하게 쓸 수 있는 프로젝트인데 백엔드 서비스가 애저에 의존성이 있다보니 MS 내부에서 쓰거나 이미 애저와 계약을 하고있는 기업 이외에는 써보고 싶은 사람이 많지 않을 것 같아 아쉬운 게 없잖아 있습니다.

   안녕하세요, 좋은 피드백 주셔서 감사합니다! 😊

   정말 좋은 제안인 것 같아요. 현재는 Azure 서비스를 기반으로 개발되었지만, 말씀하신 것처럼 다른 번역 서비스로 쉽게 전환할 수 있는 구조를 도입해서 더 많은 분들이 자유롭게 활용할 수 있게 만들면 프로젝트의 가치도 한층 더 높아질 것 같다는 생각이 듭니다.

   피드백에 대해 지속적으로 고민해보겠습니다. 알려주셔서 감사합니다!
"
"https://news.hada.io/topic?id=17473","Ask HN: 현재 진행 중인 프로젝트는 무엇인가요? (2024년 10월)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask HN: 현재 진행 중인 프로젝트는 무엇인가요? (2024년 10월)

        Hacker News 의견

     * 한 개발자는 도시 확장과 자동차 의존적인 지역이 사회적 고립을 초래하고 경제에 부담을 준다고 언급함. 그는 노르웨이에서 건축과 도시 계획에 대해 논의하는 비영리 단체를 설립했으며, Create Streets와 Strong Towns에서 영감을 받았다고 함.
     * 다른 개발자는 WebAssembly 인터프리터를 개발 중이며, 대부분의 테스트를 통과했다고 언급함. 관련 GitHub 링크를 공유함.
     * 한 부모는 아들이 유튜브와 Minecraft에 너무 많은 시간을 보내는 것을 보고, 색칠책 웹사이트를 만들어 함께 즐거운 시간을 보냈다고 함.
     * 한 개발자는 Unicode 박스 드로잉 문자를 사용하는 프로그래밍 언어 Funciton을 만들었으며, 이를 설명하는 유튜브 영상을 제작 중이라고 함.
     * 전기차를 3대 제작한 한 개발자는 자신의 지식을 유튜브 채널을 통해 공유하고 있으며, 배터리 관리 시스템과 관련된 다양한 주제를 다루고 있다고 함.
     * 한 사용자는 기술을 통해 의식을 탐구하는 소프트웨어에 관심이 있으며, technoetics와 psionics라는 용어를 부활시키고 싶다고 함.
     * 음식 섭취 추적을 위한 간단한 UI 도구가 필요했던 한 사용자는 Journable이라는 앱을 개발했으며, 채팅 기반과 사진 기반의 칼로리 추적기를 제공한다고 함.
     * 건물의 탈탄소화와 관련된 프로젝트를 진행 중인 한 개발자는 에너지 흐름을 모델링하는 것이 도전적이라고 언급하며, 상업적 관점에서 최적화 문제를 해결해야 한다고 함.
     * 미네소타의 한 사용자는 차량 조명 교체 서비스를 제공하는 웹사이트를 개발했으며, 이는 지역 사회에서 필요로 하는 서비스라고 함.
     * 한 사용자는 가정에서 유전체 합성을 시도하고 있으며, DNA 합성 비용을 줄이는 기술을 개발 중이라고 함. Agilent의 올리고 풀 합성 제공자의 사양을 검증하는 것이 목표라고 함.
"
"https://news.hada.io/topic?id=17568","Someday - Gmail/Google App Script를 이용한 Calendly 대체제 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Someday - Gmail/Google App Script를 이용한 Calendly 대체제 오픈소스

     * Gmail 사용자를 위해 설계된 간단한 오픈소스 일정 관리 도구
          + Gmail의 받은 편지함에서 직접 일정 관리가 가능하며, 다른 사람과의 약속을 쉽게 예약 가능
     * React + TypeScript + Shadcn/UI + Vite
     * 개인화된 Work Hour 설정을 지원하여, 다른 사람들이 일정에 맞는 시간대를 예약할 수 있도록 함
     * 사용자가 날짜와 시간대를 선택한 후 이름, 이메일, 전화번호 및 메모가 포함된 간단한 양식을 작성
     * Google Apps Scripts를 이용하며, clasp(Command Line Apps Script Projects)으로 관리함
"
"https://news.hada.io/topic?id=17539","2025년부터 반기마다 Android OS 업데이트 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2025년부터 반기마다 Android OS 업데이트 예정

     * 관례적으로 Android OS 메이저 업데이트 매년 가을에 Pixel 기기 발표에 맞추어서 진행되었음
     * 2025년에는 여름에 Major 업데이트, 겨울에 Minor 업데이트가 진행될 예정
          + Major 업데이트는 기존과 동일하게 새 기능추가, 예전 API의 지원 중단(deprecation) 또는 삭제(removal)이 포함됨
          + Minor 업데이트는 Major업데이트에 포함시키지 못했던 기능추가, 최적화및 버그 수정등이 포함되며, 예전 API의 지원중단 또는 삭제는 포함되지 않음.
          + Minor 업데이트에는 Behavior 변경이 최소화 되며, 호환성 테스트는 되도록이면 필요없도록 진행될 예정.
          + Google Play의 강제 TargetSdk 업데이트요구는 기존과 동일하게 1년에 한번만 Major 업데이트에 대응하도록 진행
     * 곧 Android 16의 개발자 미리보기가 공개될 예정

   예전에 릴리즈 주기 변경에 관련된 글을 포스팅했었습니다.
   https://news.hada.io/topic?id=11419

   https://www.reddit.com/r/androiddev/comments/1ggjqa3/ 에서, 플랫폼 SDK 담당 devrel 이 의견 수렴(내지는 고기방패;;)하고 있는 것 같습니다.
"
"https://news.hada.io/topic?id=17494","Node.js v22.11.0 (Jod) - Active LTS 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Node.js v22.11.0 (Jod) - Active LTS 시작

   코드네임 'Jod'로 Node v22의 Active LTS가 시작되었습니다. 2025-10-21부터 Maintenance LTS로 지원 예정이고 2027-04-30까지 유지될 예정입니다.
   Node v20은 Maintenance LTS로 변경, 2026-04-30까지 유지될 예정입니다.

   주요 변경사항 (v20와 비교):
     * 브라우저 호환 WebSocket 클라이언트 내장
     * V8 엔진 버전 11.3 -> 12.4 업데이트: Array grouping, ArrayBuffer.prototype.transfer, WASM GC, Array.fromAsync, Set 메소드, 이터레이터 헬퍼 등의 기능 사용 가능
     * 웹 상호 운용성을 강화하기 위해 navigator 객체 지원 추가 (navigator.hardwareConcurrency를 통해 hardware concurrency 정보 접근 가능)
     * ESM 지원 강화
     * Stream의 기본 High water mark가 16KiB에서 64KiB로 증가하여 Stream 성능 향상
     * fs 모듈에 glob 및 globSync 함수 추가
     * node --run <script-in-package-json> 커맨드를 통해 package.json에 있는 script 직접 실행 가능
"
"https://news.hada.io/topic?id=17478","워드프레스 작별 인사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              워드프레스 작별 인사

  WordPress 웹 개발 커뮤니티 윤리

     * WordPress 프로젝트에서 14년 이상 기여한 후 공식적으로 떠났음
          + Meetup 및 WordCamp 발표자 및 조직자
          + 핵심 코드 기여자
          + 플러그인 개발자
          + 사진 기여자
          + WordPress 공식 구인 사이트의 주로 유일한 중재자 역할을 11년 이상 수행

  왜 지금 떠나는가?

     * 2017년부터 WordPress 프로젝트에서 멀어지기 시작했음
     * WordPress 커뮤니티의 비윤리적인 면을 목격했음
          + 기여자들의 중요한 작업이 무시되고, 기여자들이 커뮤니티에서 배제되는 상황
          + WordPress 회사들이 직원들을 부당하게 대우하고 저임금으로 착취하는 모습
          + Automattic의 비윤리적인 행동을 목격했으며, 신뢰할 수 없는 조직임을 깨달았음
     * WP Engine에 합류한 이유
          + 솔직한 회사로, WordPress 생태계에서 가장 정직한 회사였음
          + 최고의 급여와 흥미로운 작업을 제공했음

    현재 WordPress 붕괴

     * WordPress의 위선적인 행동에 실망하여 더 이상 프로젝트에 참여하지 않기로 결정
     * WordPress는 정점에 도달했으며, 현재의 리더십과 프로젝트 구조로는 변화가 어려움

  작별, WordPress

     * WordPress 프로젝트에서 완전히 물러나기로 결정
     * WordPress 프로젝트가 새로운 생명을 찾고, 적절한 거버넌스를 갖추게 된다면 다시 참여를 고려할 것임

  WordPress에 남아 있는 많은 좋은 사람들에게

     * WordPress에서의 대화와 지원에 감사
     * 행동이 다른 사람들에게 미치는 영향을 고려하고, 새로운 피해자가 생기지 않도록 주의할 것을 요청

GN⁺의 정리

     * 이 글은 WordPress 커뮤니티의 비윤리적인 면과 개인적인 실망을 다루고 있음
     * WordPress의 현재 상태와 미래에 대한 비판적인 시각을 제공
     * WordPress와 유사한 기능을 가진 다른 플랫폼으로는 ""Hugo""와 같은 정적 사이트 생성기가 있음
     * 이 글은 WordPress 커뮤니티의 문제점을 인식하고, 더 나은 방향으로 나아가기를 바라는 사람들에게 유익할 수 있음

        Hacker News 의견

     * 한 사용자는 WordCamp 등록 과정에서 WP Engine과의 제휴가 문제되어 등록이 불가능했음을 언급하며, 이는 반경쟁적이라고 주장함
          + Sherman Act와 Clayton Act 제3조를 위반한다고 생각하며, Matt Mullenweg에게 공개 서한을 작성했음
          + WordPress 커뮤니티가 파괴되면 대체제가 등장할 것이라고 경고함
     * JS/React 개발자는 WordPress 사용 경험이 좋지 않았음을 공유함
          + JS 생태계에서는 문제 해결을 위한 오픈 소스 솔루션이 많지만, WordPress에서는 유료 플러그인이나 컨설팅 서비스로 유도하는 경우가 많았음
          + 무료 또는 오픈 소스 플러그인을 찾기 어려웠고, 대부분의 플러그인이 프리미엄 버전에 핵심 기능을 잠금 처리했음
     * 한 사용자는 사이트를 Hugo로 이전했음을 언급함
          + 비기술적 사용자에게는 WordPress가 유용하지만, 웹 개발 팀이 여전히 정적 사이트를 사용하지 않는 것에 놀라움을 표현함
     * 다른 사용자는 WordPress 대안을 찾고 있으며, Reddit의 관련 스레드를 참고할 계획임
          + 기본 웹사이트 플랫폼을 찾고 있으며, 블로그는 부차적이고, 전자상거래가 없으며, 플러그인 사용을 최소화하고, 오픈 소스 및 호스팅 가능해야 함
     * WP Engine에 대한 긍정적인 의견을 공유한 사용자가 있음
          + WP Engine은 정직한 회사로, WordPress 호스팅을 혁신적으로 제공했으며, 고객 지원의 질이 뛰어났다고 평가함
          + 최근의 문제로 인해 호스팅 할당을 다양화하고 있지만, WP Engine과 계속 협력하고 싶다고 언급함
     * Matt Mullenweg의 결정에 비판적인 의견을 가진 사용자가 있음
          + WP Engine의 기여가 Automattic의 이익을 위한 것이라고 주장하며, 기여를 원해도 Automattic의 주머니를 채우는 것에 불과하다고 비판함
     * 한 사용자는 자신이 개발 중인 CMS를 소개하며, 오픈 소스의 자유로움을 강조함
     * WordPress가 10년 이상 나쁜 도구였다고 주장하는 사용자가 있음
     * WordPress 커뮤니티와 생태계가 부정직한 비즈니스 관행으로 가득 차 있다고 비판하는 사용자가 있음
          + 주요 플러그인에서 환불을 요청해야 했던 경험을 공유하며, 이러한 생태계에 시간을 투자할 가치가 없다고 언급함
     * WordPress로 경력을 쌓은 사람들을 존경하지만, 자신에게는 이해하기 어려운 도구였다고 언급하는 사용자가 있음
"
"https://news.hada.io/topic?id=17594","LLM을 위한 잊혀진 지식을 회복하는 당혹스럽게 간단한 접근법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   LLM을 위한 잊혀진 지식을 회복하는 당혹스럽게 간단한 접근법

     * LLM의 진정한 '잊기' 여부
          + 대형 언어 모델(LLM)은 방대한 텍스트 데이터로 훈련되어 뛰어난 텍스트 생성 능력을 보임
          + 그러나 훈련 데이터의 민감한 특성으로 인해 원치 않는 행동을 학습할 수 있음
          + 기계 '잊기'는 이러한 문제를 해결하기 위한 방법으로, 모델의 유용성을 최대한 유지하면서 특정 지식을 제거하는 것을 목표로 함
     * 문제점과 연구 내용
          + 현재의 '잊기' 방법이 실제로 지식을 잊게 하는지, 아니면 단순히 숨기는지에 대한 연구가 부족함
          + 본 연구는 양자화를 적용하면 '잊혀진' 정보가 복구될 수 있음을 밝힘
          + 다양한 양자화 기법을 사용하여 여러 정밀도 수준에서 실험을 수행함
     * 실험 결과
          + 유용성 제약이 있는 '잊기' 방법의 경우, 모델은 전체 정밀도에서 의도된 잊혀진 지식의 평균 21%를 유지함
          + 4비트 양자화 후에는 이 비율이 83%로 증가함
     * 제안된 전략
          + 이러한 현상을 설명하기 위한 이론적 설명을 제공함
          + 복잡한 문제를 완화하기 위한 양자화에 강인한 '잊기' 전략을 제안함
     * 연구의 중요성
          + LLM의 '잊기' 방법의 효과를 평가하고 개선하는 데 중요한 기여를 함
          + 양자화가 '잊기'에 미치는 영향을 이해하는 데 도움을 줌

        Hacker News 의견

     * 모델 양자화가 ""잊기"" 방법을 무효화한다는 연구 결과가 있음. ""잊기"" 방법은 모델이 특정 사실을 잊도록 가중치를 업데이트하는 것임. 이러한 방법은 주로 저작권 문제를 해결하기 위해 사용됨.
          + 양자화가 ""잊기""를 무효화하는 것은 정보 이론적으로 모델 가중치에 여전히 지식이 남아있다는 것을 의미함.
          + AI 열풍을 10-15년 전의 3D 프린터 열풍과 비교하며, AI도 비슷한 운명을 맞이할 것이라고 예상함.
          + 32비트 모델에서 지식을 제거했지만, 4비트로 압축하면 지식이 다시 나타나는 것이 정보 이론적으로 예상 밖임.
          + ""잊기""를 위해서는 모델 유용성을 해치지 않으면서 작은 학습률과 정규화를 사용하는 것이 일반적임. 이로 인해 목표 LLM과 ""잊기""된 LLM의 가중치가 매우 가까움.
          + 기본 훈련 중에 원치 않는 학습을 방지하거나, 기본 모델의 ""잊기""가 양자화에 민감해야 함.
          + 양자화된 LLM을 사용해도 모델이 덜 검열된다는 것을 발견하지 못했음.
          + ""잊기""된 행동을 강화하는 데는 abliteration 기법이 더 강력함.
          + ""잊기""는 사실 잠재적 ""학습 공간""에서 샘플링 확률을 줄이는 것이며, 양자화는 이 샘플링의 효과를 감소시킴.
          + ""잊기""는 LLM이 원치 않는 지식을 억제하는 것을 배우는 것이며, 양자화는 이 억제를 깨뜨리는 것임.
          + 모델 ""잊기""에 대해 처음 알게 되었으며, 연합 학습이 모델 ""잊기""를 방지하는 방법에 대한 답변을 기대함.
"
"https://news.hada.io/topic?id=17582","차세대 경쟁 Arena 18가지 - 맥킨지 보고서 [213p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 차세대 경쟁 Arena 18가지 - 맥킨지 보고서 [213p PDF]

     * 현재와 미래의 경쟁 아레나(Arenas of Competition)를 정리, 아레나는 비즈니스 환경과 세상을 변화시킬 수 있는 ""산업""들을 의미
          + 아레나는 높은 성장성과 역동성으로 정의되며, 가치 성장의 상당 부분을 차지
     * 지난 20년 동안 형성된 12개의 ""현재 아레나""들
          + 소프트웨어, 반도체, 소비자 인터넷, 전자상거래, 소비자 가전, 바이오제약, 산업용 전자제품, 결제, 영상 및 오디오 엔터테인먼트, 클라우드 서비스, 전기차(EV), 정보 기반 비즈니스 서비스 (2020년 시가총액 순)
     * 아레나를 이해하는 것은 최소한 두 가지 이유에서 중요함
          + 아레나는 비즈니스 세계가 재편되는 곳. 투자, R&D, 가치 창출의 주요 변화와 많은 신규 및 성장하는 글로벌 기업의 출현을 설명해줌
          + 아레나 형성의 잠재적 요인을 인식하면 향후 15년 동안 등장할 수 있는 아레나 집합을 파악할 수 있음. 과거의 사례라면 이들은 경쟁, 혁신, 가치 창출의 중심지가 될 것임

보고서 구성

     * 1장: 2005~2020년 사이에 등장한 12개의 경쟁 아레나(클라우드 서비스, 전자상거래, 바이오제약, 전기차 등)에 대해 설명
          + 시가총액 상위 3,000개 기업의 대규모 맞춤형 데이터 세트를 활용하여 오늘날의 아레나를 파악하고 다른 산업과 어떻게 다른지 탐구
          + 2005년에는 이 아레나들이 표본의 경제적 이익 중 9%만 창출했지만, 2019년에는 가장 큰 기업의 총 경제적 이익의 49%를 차지
     * 2장: 오늘날의 아레나가 어떻게 출현하고 성장했는지 조사. 기업들이 치열한 경쟁 모드에 진입하고 아레나의 특징인 에스컬레이션 투자를 했기 때문
          + 이러한 산업 논리를 이해하는 것이 중요한데, 오늘날의 아레나가 어떻게 탄생했는지 아는 것이 내일의 잠재적 아레나를 발견하는 데 도움이 될 수 있음
          + 아레나 출현의 기반이 되는 ""묘약(potion)"" 설명
     * 3장: 18개의 잠재적인 미래 아레나를 설명하고 성장과 역동성의 잠재적 원천을 포함하여 이들이 어떻게 구체화될 수 있는지 탐구

현재 아레나들의 6가지 특징

     * 아레나의 경제적 이익 점유율이 증가하고 있음
          + 2005년에 아레나는 550억 달러로 전 세계 총 경제 이익의 9%를 창출한 반면, 다른 산업은 5,490억 달러로 약 90%를 차지
          + 2019년에는 아레나가 2,500억 달러를 창출하여 전 세계 총 경제 이익의 절반을 차지
          + 2005년과 2019~2020년의 경제적 이익 순위를 비교하면 산업용 전자제품을 제외한 모든 아레나가 순위가 상승
     * 아레나는 혁신을 위한 투자를 많이 유치
          + 아레나의 R&D 투자 비중은 2005년에 이미 높았고 15년 동안 높은 수준을 유지
          + 2005년 미국 기업 R&D 지출의 62%가 아레나와 아레나 인접 산업에 투입되었고, 2020년에는 65%로 증가
          + 반도체와 전기 부품이 가장 큰 비중을 차지했고, 그 다음으로 바이오제약과 소프트웨어가 뒤를 이음
     * 아레나는 신규 진입자들이 성장할 수 있게 함
          + 2020년 아레나 총 시가총액의 33%는 2005년에 ""아웃사이더""였던 기업들이 보유
          + 이에 비해 비아레나 산업의 신규 사업자들은 총 시가총액의 15%만을 차지
          + 신규 업체들은 경쟁사들이 고객 수요를 충족시키는 혁신을 투자 대상으로 삼을 때 아레나 형성 초기에 진입하는 경향이 있음
     * 아레나는 거대 기업을 탄생시킴
          + 아레나는 비아레나보다 세계 최대 기업을 배출할 가능성이 더 높음
          + 2020년 아레나 총 시가총액의 74%는 시가총액 500억 달러 이상인 기업이 차지한 반면, 다른 산업은 47%에 그침
          + 아레나 총 시가총액의 50%는 시가총액 2,000억 달러 이상인 기업이 보유한 반면, 다른 산업은 15%에 불과
          + 2005년 상위 10개 기업 중 마이크로소프트 한 곳만 미래 아레나에 속했지만, 2020년에는 8개가 아레나에 포함
     * 아레나는 더 집중되는 경향이 있음
          + 특정 시기에 아레나에서 집중도가 관찰됨
          + 5개 아레나(클라우드 서비스, 소비자 전자제품, 소비자 인터넷, 전기차, 결제)의 상위 10개 기업이 2020년 아레나 시가총액과 매출의 90% 이상을 차지
          + 동시에 혁신을 위한 경쟁 압력은 여전히 존재
     * 아레나는 더 글로벌함
          + 평균적으로 아레나 매출의 50%가 기업의 본사 지역 외부에서 발생한 반면, 비아레나 기업은 42%임
          + 아레나 기업의 68%가 자국 이외의 국가에서 매출의 20% 이상을 창출

아레나의 기원(Origin)

     * 오늘날의 아레나가 어떻게 시작되었는지 살펴보면 향후 잠재력 있는 아레나를 파악하는 데 도움이 됨
     * 높은 성장과 역동성을 가져오고 아레나를 만들어내는 3가지 요소를 ""아레나 창조의 묘약(arena-creation potion)""이라 부름:
          + 비즈니스 모델이나 기술의 도약적 변화
               o 기술 성능과 채택은 S자 곡선으로 모델링됨. 기술 역량이 도약적으로 변화하면 채택이 느리게 시작되다가 가속화되는 변곡점에 도달한 후 기술이 성숙해지면서 평평해짐
               o 전기차 대량 생산을 가능케 한 리튬이온 배터리 기술의 혁신 등 아레나에서 기술 도약을 봄
               o 전자상거래, 비디오/오디오 엔터테인먼트(스트리밍) 등에서 일어난 것처럼 제품/서비스의 상업 모델(누가 무엇을 어떻게 지불하는지)을 바꿔 기존 시장 구조를 뒤흔드는 기술로 인해 비즈니스 모델 도약도 발생 가능
          + 투자 확대 인센티브 증가
               o 투자를 활용해 제품 생산량 증가뿐 아니라 제품 자체를 근본적으로 변화시키고 개선하는 기업은 경쟁력을 높이고 시장 점유율을 빠르게 얻을 수 있음
               o 마케팅, R&D, 특정 자본 지출 등 특정 유형의 지출에서 이런 투자 특징이 나타남
               o 이런 식으로 역량을 발전시키는 기업은 장기적으로 마진도 개선하고 규모에 따른 수익 증가도 경험하는 경향이 있음
               o 그 결과 경쟁사도 투자 인센티브가 강해져 ""군비 경쟁""이 시작되면서 역량을 동시에 확장하게 됨
               o 이런 패턴 때문에 아레나에 전형적인 성장 가속화와 시장 점유율 도약이 일어나고, 결국 새로운 기술이나 비즈니스 모델 변화가 다시 경쟁의 장을 열지 않는 한 신규 진입자의 진입을 제한할 수 있음
          + 크고 성장하는 대상 시장
               o 기업은 수요 성장이 경제 나머지 부문을 계속 앞지르는 거대 시장에서 이미 사업을 하거나, 기존 대형 시장의 점유율을 우수한 제품/서비스로 대체함으로써 크고 빠르게 성장하는 시장에 진출하는 경향이 있음
               o 빠르게 성장하는 시장에서 사업한 아레나 기업들은 기술과 비즈니스 모델 도약을 활용해 가치 창출을 가속화함
               o 이런 시장은 일반적으로 2005년에 이미 1,000억 달러 이상의 매출을 기록했고, 여기서 경쟁하는 기업들은 효율성을 높이거나 역량을 확장하는 투자 확대를 했음
               o 이런 아레나에는 바이오의약품, 산업용 전자제품, 정보 기반 비즈니스 서비스, 가전, 결제, 반도체, 소프트웨어, 비디오/오디오 엔터테인먼트 등이 포함되며, 2005-2020년 매출 CAGR이 5-13%를 기록함
               o 기존 대형 시장 점유율을 대체한 기업은 새로운 제품/서비스 범주를 출시해 기존 시장 점유율을 빼앗거나 잠재 수요를 끌어냄으로써 빠른 성장을 달성함
               o 여기에는 클라우드 서비스, 소비자 인터넷, 전자상거래, 전기차 등의 산업이 포함되며 2005-2020년 매출이 연평균 13-33% 성장함
     * ""아레나 창조 묘약""의 3요소는 확대 경쟁 모드를 만들어내고, 이는 높은 성장과 역동성으로 이어짐
          + 확대 경쟁에 특징적인 지속적 투자는 일반적으로 경쟁 역량을 높이고 글로벌 규모를 만듦
          + 이런 환경에서의 경쟁은 승자에게 거대한 상금이 주어지는 토너먼트와 같지만, 평생 왕관은 아님. 한 라운드가 막 끝나갈 무렵 새로운 경쟁 확대 국면이 다시 시작되기 때문
          + 이는 초기 진입 비용과 생산량 증대를 위한 추가 투자가 수반되어 더 국지적이고 정적인 산업 구조를 초래하는 전통적 경쟁 방식과 대비됨
          + 확대 경쟁에서 플레이어들은 시장 점유율을 확보하거나 유지하기 위해 투자와 역량 구축을 통해 반복적으로 제품 품질을 개선해야 함
     * 오늘날의 아레나는 전반적인 디지털화 추세의 혜택도 받음
          + 최근의 디지털화 시대는 거대 아레나가 꽃피기에 비옥한 토양이었음
          + 글로벌 인터넷 연결 덕분에 전자상거래 업체들이 전 세계 구매자와 판매자를 연결할 수 있게 되어, 고객들이 언제 어디서나 상품을 구매할 기회를 제공함
          + 디지털화는 영화관과 CD에서 가정과 모바일 기기로 미디어 소비를 옮김으로써 비디오/오디오 엔터테인먼트, 특히 동영상 스트리밍도 변화시킴
     * 정보 처리 및 전달 비용의 지속적이고 기하급수적인 개선은 길고 완만한 S자 곡선을 만들어냄
          + 디지털화는 글로벌 시장과 대규모 유통 플랫폼을 가능케 함
          + 가변 비용이 낮고 강력한 네트워크 효과를 지닌 소프트웨어 기반 비즈니스 모델은 확대 투자의 강력한 경쟁의 장을 만들어냄
          + 오늘날 대부분의 아레나가 디지털 경제에 단단히 뿌리내리고 있다는 점은 놀라운 일이 아님

내일의 아레나

     * 기존 아레나의 통찰을 바탕으로 18개의 잠재적 미래 아레나 식별
          + 2040년까지 29-48조 달러의 매출과 2-6조 달러의 이익 창출 가능
          + 2022년 GDP의 약 4%에서 2040년 10-16%로 성장 예상. 총 GDP 성장의 18-34% 차지
          + 오늘날의 아레나 표본 기업들도 GDP 대비 비중이 2005년 3%에서 2020년 9%로 증가
     * 잠재적 미래 아레나는 3개 그룹으로 구분 가능
          + 계속 발전할 가능성이 있는 현재의 아레나
          + 충분히 크고 빠르게 성장해 별도 아레나가 될 수 있는 현재 아레나의 하위 부문
          + 오늘날의 아레나와 밀접하게 연관되지 않은 신흥 아레나
     * 계속 발전할 아레나
         1. 전자상거래: 디지털 채널을 통해 상품을 판매하고 직접 이행하는 기업
         2. 전기차: 배터리, 플러그인 하이브리드, 연료전지 전기차 제조사
         3. 클라우드 서비스: 주문형 클라우드 인프라와 플랫폼을 서비스로 제공하는 기업
         4. 반도체: 반도체, 마이크로칩, 집적회로 설계 및 제조사와 반도체 제조용 도구 제공업체
     * 스핀 오프 아레나
       5. AI 소프트웨어 및 서비스(소프트웨어에서 분화): AI를 활용한 소프트웨어 및 서비스 제공 기업(AI 구동에 필요한 하드웨어는 제외)
       6. 디지털 광고(소비자 인터넷에서 분화): 광고주가 디지털로 소비자에게 도달할 수 있도록 하는 플랫폼
       7. 스트리밍(비디오/오디오 엔터테인먼트에서 분화): 인터넷으로 주문형 비디오 엔터테인먼트를 제공하는 기업
     * 신흥 아레나
       8. 공유 자율주행차: 공유 자율주행 차량 서비스 운영사
       9. 우주: 상업 및 국가 후원 부문에 우주 관련 인프라와 서비스를 제공하는 기업
       10. 사이버보안: 의도하지 않은 무단 액세스, 수정, 파괴로부터 컴퓨터 시스템을 보호하는 기업
       11. 배터리: 전기차 및 기타 에너지 전환 관련 기술에 주로 사용되는 충전식 배터리 제조사
       12. 비디오 게임: 전용 콘솔, PC, 모바일폰에서 플레이하는 게임의 제작 및 유통사
       13. 로봇공학: 로봇 제조사 및 로봇 솔루션 제공업체
       14. 산업용 및 소비자용 생명공학: 농업, 대체단백질, 생체재료 및 생화학물질, 소비재 등의 시장에서 생명공학 기반 제품을 제공하는 기업
       15. 모듈식 건축: 설계에서 조립까지 볼류메트릭 모듈을 활용한 모듈식 건축 가치사슬에서 운영하는 기업
       16. 핵분열 발전소: 핵분열 발전시설을 건설하는 업체
       17. 미래 항공 모빌리티: 전기 수직이착륙기(eVTOL)나 배송 드론 등 항공 모빌리티 운송 서비스 운영사
       18. 비만 및 관련 질환 치료제: 비만과 당뇨병 등 관련 질환 치료를 위한 글루카곤유사펩티드-1(GLP-1) 약물 및 기타 치료제 판매 기업
     * 현재의 5개 아레나들은 지위를 상실할 가능성이 있음
          + 바이오의약품, 가전, 정보 기반 비즈니스 서비스, 산업용 전자제품, 결제 등은 내일의 아레나로 발전시킬 정도의 성장 규모와 역동성 유지 가능성 낮음
     * 준신흥 아레나(almost-emergent arenas)
          + 아레나 요소를 일부 보유하지만 성장이나 역동성 전망이 불확실하고 아레나로 발전할 가능성이 상대적으로 낮은 산업군
          + 아레나 발전 예측은 정확한 과학이 아니므로 포함시킴. 이들도 상당한 기회 제공 가능
          + 청정 수소, 저탄소 소재, 노년층 대상 제품 및 서비스, 핵융합, 재생에너지 발전 장비 및 인프라, 지속가능 연료, VR/AR, Web3(분산금융 포함) 등
     * 현재와 미래 아레나 분석 결과 3대 주요 변동 요인
          + 혁신 규제와 기술 지역화에 영향을 미치는 지정학적 발전
          + 다양한 산업에서의 AI 기술 발전 및 채택
          + 기후변화 대응을 위한 녹색 전환 속도(시장 여러 부분의 수요 견인 가능)
     * 18개 미래 아레나는 오늘날의 12개 아레나보다 더 큰 변혁 초래 가능
          + 데이터 소비/처리 방식, 건강/웰빙에 대한 접근법, 상호작용/소통 방식 등 형성
          + 삶의 새로운 선택지와 함께 데이터/프라이버시 관련 도덕성/윤리, 기업의 포용성/지속가능성 의무 등 사회 발전에 대한 새로운 질문도 제기 가능
          + 아레나의 기원 방식 인식, 진화 과정 이해, 사회 변화 예측 등을 통해 사회 발전의 궤적에 대한 독특한 관점 확보 가능
     * 이 보고서는 향후 가장 큰 성장과 역동성이 기대되는 곳과 미래가 형성되면서 그 관점을 어떻게 업데이트할 것인지 결정하는데 도움이 됨

   신흥 아레나에 포함된 산업군이 흥미롭습니다. 사이버 보안이 포함될 줄은 상상도 못했어요.

   저는 비만 및 관련 질환 치료제가 그렇네요

   AI 등장으로 혁신 속도가 더 가속화 될 것 같네요
"
"https://news.hada.io/topic?id=17509",""Australia/Lord_Howe"는 가장 이상한 타임존임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ""Australia/Lord_Howe""는 가장 이상한 타임존임

     * 타임존은 복잡하지만, 컴퓨터가 이를 구현해야 하므로 유한한 범위 내에서만 이상함.
          + Asia/Kathmandu는 UTC로부터 이상한 오프셋을 가짐.
          + Africa/Casablanca는 시간대 모델에 잘 맞지 않아 하드코딩됨.
          + America/Nuuk는 -01:00에서 서머타임을 시작함.
          + Africa/Cairo와 America/Santiago는 24시(0시가 아님)에 서머타임을 시작함.
          + Australia/Lord_Howe는 가장 이상한 서머타임 규칙을 가짐.

  PGXIIREAM: 교황 그레고리오 13세가 모든 것을 지배함

     * 대부분의 세계는 그레고리오력에 기반한 시간 시스템을 사용함.
     * 그레고리오력은 태양의 위치를 연중 일정하게 유지하는 데 매우 유용함.
     * UTC는 그레고리오력의 현대적 공식화로, 전 세계가 이를 기준으로 시간을 설정함.

  윤초는 중요하지 않음

     * 지구의 회전이 느려지고 있어 윤초를 추가하여 이를 보정함.
     * 윤초는 프로그래밍 언어에서 61초를 표현하지 않기 때문에 무시해도 됨.
     * 클라우드 제공자는 윤초 동안 시계를 느리게 돌려 문제를 해결함.

  이상한 시간대

    Asia/Kathmandu는 이상한 오프셋을 가짐

     * 네팔은 UTC보다 5시간 45분 앞서 있음.
     * 컴퓨터는 IANA 시간대 데이터베이스를 통해 이 정보를 알 수 있음.

    PDT나 CET 같은 문자열은 의미가 없음

     * 시간대 식별자는 모호할 수 있으며, 많은 시간대가 동일한 식별자를 공유함.

    서머타임이 있는 시간대는 어떻게 표현되는가?

     * 서머타임 전환 규칙은 복잡하며, 컴퓨터는 이를 기반으로 현지 시간을 계산함.

    Africa/Casablanca와 Asia/Gaza는 달을 따르지만, 시간대는 태양을 따름

     * 모로코와 가자는 라마단에 따라 서머타임을 조정하며, 이는 하드코딩됨.

    America/Nuuk는 -1시에 서머타임으로 전환함

     * 그린란드는 유럽과 같은 시점에 서머타임을 시작하지만, 현지 시간으로는 -1시에 시작함.

    America/Santiago와 Africa/Cairo는 24시에 전환함

     * 이들 시간대는 24시에 서머타임을 전환하며, 이는 다음 날로 넘어가는 것을 의미함.

    Australia/Lord_Howe는 가장 이상한 서머타임 전환을 가짐

     * Lord Howe Island는 30분 서머타임 전환을 가짐.

GN⁺의 정리

     * 시간대는 복잡하지만, 컴퓨터가 이를 구현해야 하므로 유한한 범위 내에서만 이상함.
     * Australia/Lord_Howe는 30분 서머타임 전환으로 가장 독특한 시간대임.
     * 이 기사는 시간대의 복잡성을 이해하는 데 유용하며, 프로그래머에게 흥미로울 수 있음.
     * 유사한 기능을 가진 프로젝트로는 tzdb가 있음.

        Hacker News 의견

     * tz 데이터베이스는 빅뱅 이전의 시간대 전환을 계산하지 않음. 빅뱅 이전의 타임스탬프는 물리적으로 의심스러움
          + 예를 들어, Glib는 브라질의 1913년 규칙을 여전히 적용하여 상파울루 타임스탬프를 계산함
          + 빅뱅 이전의 윤초도 허용되지 않음
     * 아프리카/아디스아바바 시간대는 에티오피아에서 아무도 따르지 않음
          + 현지인들은 시간을 6시간씩 오프셋하여 사용함
          + AM 주기는 새벽에 시작하고, PM 주기는 황혼에 시작함
     * 프로그래밍 언어가 61초의 분을 표현할 수 없다는 것은 사실이 아님
          + Raku는 윤초를 지원함
          + Perl 5의 DateTime.pm도 윤초를 지원하며, 이는 복잡성을 증가시킴
          + 윤초는 거의 사용되지 않으며, 코드의 복잡성을 증가시킴
     * 아시아/예루살렘 시간대는 종교와 국가 문제로 인해 복잡함
          + 종교적 이유로 일광 절약 시간이 매년 협상으로 결정됨
          + Rosh HaShanah에 일광 절약 시간이 끝나지 않도록 예외가 존재함
     * 미국 주소를 기반으로 현지 시간을 찾는 함수 작성 경험
          + 주와 시간대를 정적으로 매핑하는 것은 엣지 케이스 때문에 어려움
          + ZIP 코드와 UTC 오프셋을 매핑한 CSV를 구매하여 사용함
          + 미국의 해외 영토와 군사 기지 때문에 복잡한 시간대가 존재함
     * 팔레스타인의 시간대는 고정된 날짜 없이 매년 정부가 일광 절약 시간 시작과 종료를 발표함
          + 일주일도 안 되는 공지로 인해 다양한 문제가 발생할 수 있음
     * 시간대 소프트웨어의 유연성에 대한 흥미로운 읽을거리
          + 일광 절약 정책이 60분 조정에 국한되지 않을 수 있음
          + 국가가 연중 지속적으로 변하는 오프셋을 가질 수 있음
     * 정부가 일광 절약 시간을 폐지하고 다음 해에 시간대를 이동시키면 혼란이 발생함
          + Android 앱 개발 시 시스템 이미지에 내장된 시간대 데이터베이스로 인해 문제가 발생함
     * tz 데이터베이스는 UTC와의 차이를 기록하는 diff의 diff임
          + 업데이트가 이루어지며, changelog는 git에 저장됨
          + diff^4로 표현할 수 있음
     * 30분의 일광 절약 시간 차이는 가장 이상한 시간대가 아님
          + 남극/트롤, 모로코 및 가자 시간대는 시스템이 표현할 수 없는 규칙을 가짐
          + 윤초는 프로그래머에게 유용하지 않으며, 대부분 무시됨
"
"https://news.hada.io/topic?id=17566","Wasmer 5.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Wasmer 5.0 릴리즈

새로운 실험적 백엔드

     * V8, Wasmi, WAMR 지원이 추가됨
     * 이제 Wasm-C-API 사양을 지원하는 모든 인터프리터 또는 런타임을 Wasmer에 쉽게 통합할 수 있음
     * V8 통합을 통해 V8 디버거 및 Chrome Devtools를 통한 훌륭한 디버깅 경험을 제공
     * V8을 백엔드로 사용한다는 것은 WebAssembly 예외 및 가비지 컬렉션을 기본적으로 지원한다는 의미이기도 함

iOS 지원 (WAMR, Wasmi, V8 바인딩 통해 제공)

     * Wasmer는 새로운 인터프리터 모드를 통해 iOS 장치에 WebAssembly를 제공함
     * V8, Wasmi, WebAssembly Micro Runtime(WAMR)의 기능을 활용하여 개발자는 이제 iOS에서 WebAssembly 모듈을 원활하게 실행할 수 있음
     * 코드베이스에 변경 사항이 필요하지 않으며, Apple 생태계에서 고성능 애플리케이션 작성이 가능해짐

코드베이스 슬림화

     * Wasmer 5.0 출시를 위해 Wasmer 코드베이스를 가능한 한 슬림하게 만드는 데 중점을 둠
     * Wasmer에서 사용하는 일부 종속성은 오랫동안 유지 관리되지 않았거나 더 새롭고 안전한 크레이트에 의해 중복됨
     * 지난 2년 동안 Emscripten 바인딩이 대부분 사용되지 않았으므로 지원을 중단하고 종속성을 정리한 결과 Wasmer 코드베이스에서 순수하게 2만 줄의 코드가 삭제됨

성능 향상

     * 모듈 역직렬화는 이제 최대 50% 더 빨라짐 (즉, Module::deserialize를 호출하거나 wasmer run을 통해 모듈을 실행할 때)
     * 이러한 개선 사항은 모듈을 역직렬화하는 데 사용하는 제로 복사 역직렬화 라이브러리인 rkyv의 중요한 업데이트를 활용하고 있음

업그레이드된 컴파일러: Cranelift 및 LLVM 18

     * 최신 Cranelift 통합으로 인해 런타임 속도가 크게 향상되어 WebAssembly 모듈이 그 어느 때보다 빠르게 실행됨
     * Wasmer 5.0에는 이제 LLVM의 최신 버전(18)이 포함되어 있어 개발자가 도구 체인의 최신 최적화에 액세스할 수 있음
     * LLVM 업그레이드는 호환성과 성능을 향상시켜 복잡한 WebAssembly 모듈을 컴파일하고 실행하기 위한 강력한 기반을 제공함
     * Wasmer 5.0은 또한 실험적인 LoongAarch64 지원과 함께 제공됨
     * 컴파일러의 최신 버전으로 coremark를 벤치마킹한 결과, LLVM과 Cranelift는 Wasmer v4.4.0에 비해 v5.0에서 약 8% 더 빠름

GN⁺의 의견

     * Wasmer 5.0의 출시는 WebAssembly 생태계에 큰 이정표가 될 것으로 보임. 특히 iOS 지원과 다양한 백엔드 옵션 제공은 WebAssembly의 적용 범위를 모바일 애플리케이션까지 크게 확장시킬 수 있을 것으로 기대됨
     * V8, Wasmi, WAMR 등 다양한 런타임을 백엔드로 지원함으로써 개발자들은 자신의 요구사항에 가장 적합한 런타임을 선택할 수 있게 되었음. 이는 WebAssembly의 유연성과 호환성을 높이는 데 크게 기여할 것으로 보임
     * 코드 베이스 슬림화와 최신 컴파일러 도입을 통한 성능 최적화 노력도 주목할 만한 부분임. 이는 Wasmer가 단순히 기능 추가에 그치지 않고 지속적인 품질 개선에도 노력을 기울이고 있음을 보여줌
     * 한편 Emscripten 바인딩 지원 중단은 아쉬운 부분이나, WASI와 WASIX 등 새로운 표준의 등장으로 인해 그 필요성이 줄어들었다는 점에서 합리적인 선택으로 보임
     * 종합하면 Wasmer 5.0은 WebAssembly의 발전상을 잘 보여주는 릴리스로, 앞으로도 Wasmer가 WebAssembly 생태계를 선도하는 주요 프로젝트 중 하나가 될 것으로 전망됨. 다만 아직 실험 단계인 기능들의 안정성과 성숙도를 높이기 위한 지속적인 노력이 필요해 보임

  Hacker News 의견

     * 성능 그래프가 혼란스럽고 저주받은 것처럼 보임. 로그 스케일로 표시된 경우도 있고, 어떤 경우에는 무엇을 말하려는지 이해하기 어려움. 예를 들어, ""Argon 2""라는 그래프는 거의 모든 막대가 같은 길이로 표시되어 있지만, 개별 막대는 밀리초 단위로 다른 숫자로 표시됨.
     * V8을 백엔드로 사용하면 WebAssembly 예외 처리와 가비지 컬렉션을 지원하게 됨. 이와 관련된 더 많은 소식을 기대하고 있음. wasm-gc가 동일한 런타임 내에서 다른 모듈 간에 호스트 데이터/문자열을 공유할 수 있는지, 아니면 단일 모듈에만 국한되는지 궁금함.
     * Wasmer의 랜딩 페이지에서 무엇을 하는지 이해하기 어려움. 모든 것을 어디서나 실행한다고 하지만, 실제로 무엇을 하는지 명확하지 않음. 개발자 지향적인 제품으로 보이지만, 기술적인 설명보다는 유행어가 많음.
     * Wasmtime에 만족하고 있으며, WASM 컴포넌트 모델과 WASI 기반 플러그인 시스템을 해킹 중임. 재미있게 작업 중임.
     * WASM을 프로젝트에 활용할 좋은 사례를 아직 찾지 못했음. Raspberry Pi를 어떻게 활용할지 모르는 것과 비슷한 상황임. Rust 비동기 프로젝트를 위해 WASM을 선택할 이유가 명확하지 않음.
     * Cross-Origin Isolated 헤더가 필요하지 않은 솔루션이 있었으면 좋겠음. 여전히 이전 버전을 사용 중임.
     * WASM이 Electron 앱의 리소스를 덜 소모하는 대체재로 기능할 수 있는지 궁금함. WASM은 DOM 접근이 없지만, 확장에서 추가될 수 있는지 의문임.
     * 이 솔루션이 어떤 문제를 해결하는지 모르겠음. 모든 JavaScript 런타임에는 이미 WASM 엔진이 내장되어 있지 않나?
     * 이 솔루션이 Node.js 코드를 샌드박스에서 안전하게 평가할 수 있게 해주는지 궁금함.
     * 성능 그래프를 읽기 어려움. 천 단위 구분 기호로 쉼표와 점이 모두 사용되고 있으며, 정밀도가 임의로 1, 2, 3자리로 반올림되고 있음.
"
"https://news.hada.io/topic?id=17497","Show GN: [작은 앱 프로젝트] 스케줄러: 아이폰, 아이패드, 맥 캘린더 앱 (SwiftData 활용 사례)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: [작은 앱 프로젝트] 스케줄러: 아이폰, 아이패드, 맥 캘린더 앱 (SwiftData 활용 사례)

   📌 작은 앱 프로젝트

   모든 앱들이 점점 더 복잡해지고 있습니다.

   생각해봤습니다.

   꼭 많은 기능과 서비스를 제공하는 복잡한 앱만이 사람들에게 유용할까? 필요한 기능만 제공하는 단순한 앱도 사람들에게 유용할 수 있지 않을까?

   스케줄러 앱은 그런 저의 생각에서 출발한 '작은 앱 프로젝트'의 '작은 앱' 중 하나입니다. 평균적인 앱의 복잡도가 크게 올라간 지금 이 시대에 사람들은 작은 앱에 어떻게 반응할 지 궁금합니다. 과연 슈퍼 앱들과의 경쟁에서 살아남을 수 있을까요?

   저는 2022년부터 '작은 앱 프로젝트'라는 도전을 이어나가고 있으며, 지금은 전 세계 사람들에게 '오직 필요한 기능만 제공'하는 '작은 앱(Small App)' 생태계를 제공한다는 목표로 꾸준히 새로운 작은 앱들을 만들고 개선해 나가고 있습니다.

   꼭 필요한 기능만 제공하는 단순한 '작은 앱'이 많은 분께 도움이 되기를 바랍니다 ☺️✨

   📌 스케줄러
   https://apps.apple.com/kr/app/id6467635137

   일정 관리.
   필요한 기능만.

   말이 필요 없는 단순함.
   그 단순함이 주는 편리함.

   일정 관리에만
   집중할 수 있도록 도와드립니다.

   📌 [기술] SwiftData

   스케줄러 앱은 작년 WWDC23에서 처음 선보인 SwiftData를 활용해 데이터를 관리하고 있습니다. SwiftData를 Production 환경에서 사용하는 레퍼런스를 찾고 계신 분들께 스케줄러가 하나의 참고 앱이 될 수 있을 거라 생각합니다.

   SwiftData의 내부 구현 변경 사항으로 인해 버그가 생기는 문제, iOS17.0~17.3에서 이전에는 생기지 않았던 FatalError가 나는 문제, 이전에 CoreData로 앱을 출시했을 때에는 발생하지 않았던 '충돌'이 유독 SwiftData 앱에서는 많이 일어난다는 문제가 있습니다만, 전반적인 개발 경험은 '코드'로 데이터 모델을 다룰 수 있기에 Xcode UI로 데이터 모델을 조작해야 하는 CoreData보다 만족스럽습니다.

   최근에는 SwiftData 관련 정보도 검색하면 꽤 많이 찾을 수 있어서 작년 처음 SwiftData를 사용할 때보다 공부 환경도 훨씬 좋아진 것 같습니다.

   환절기에 건강 잘 챙기셨으면 좋겠습니다 🍂
   좋은 하루 보내시길 바라겠습니다. 🌈✨

   아 저도 로컬로만 ios 를 개발하면서 배치를 돌려야하는 경우가 있었는데요,
   background fetch 를 사용할 경우, 앱을 종료하게 되면(스와이프로 끄는 등) background fetch 가 꺼져버려서 배치를 돌릴 수가 없게 되버리더라구요.
   그래서 스케줄을 새로 등록할 때마다 local notification 에 등록시키는 방식으로 우회해서 개발했어요. 근데 이 방법도 앱마다 64개만 유지할 수 있다고 해서 궁극적인 해결책은 아니더라구요..

   혹시 배치를 어떤 프로세스로 돌리시나요?

   말씀주신 '영속 데이터(Persistence)'는 CoreData나 SwiftData 프레임워크를 한 번 살펴보시면 어떨까 싶습니다~! 참고하실 수 있는 링크 아래에 첨부해드려요 🙌

   📌 Persistent storage
   https://developer.apple.com/documentation/swiftui/persistent-storage

   환절기에 언제나 건강 잘 챙기시길 바라겠습니다 🍁
   행복한 주말 보내시길 바랄게요~! 🌷✨

   서버를 사용하지 않으시면 ios 에서 백그라운드에서 배치(미리 알림 등)를 보내는 수의 한계가 있을텐데 어떻게 극복하셨나요..??!

   안녕하세요? 😊 작은 앱 프로젝트에 관심을 갖고 댓글 남겨주셔서 넘나 감사드립니다! 개발하면서 말씀주신 한계(?)를 만나본 적은 없어서 질문을 정확히 이해하지 못했는데, 혹시 어떤 말씀이신지 조금 더 구체적으로 여쭈어도 괜찮으실까요~? 🙏

   모든걸 모든곳에서 해야하는 과도한 시대가 된 것 같기도 하네요.
   작은 앱 프로젝트 응원하겠습니다 :)

   안녕하세요? 😄 응원 넘나 감사드립니다~! 정말 큰 힘이 되었습니다 🙌 꾸준히 열심히 해보겠습니다 👍

   혹시라도 스케줄러 앱 쓰시면서 필요하신 게 있으시면 언제든지 앱 내 '의견 보내기'로 연락 주시면 빠르게 답변드리고 도와드릴 수 있도록 하겠습니다 📨

   꼭 필요한 기능만 제공하는 단순한 작은 앱 스케줄러가 일정 및 계획 관리에 도움이 되었으면 좋겠습니다! 단순함을 유지한 채로 더 편하게 일정 및 계획을 관리하실 수 있도록 앞으로도 꾸준히 노력할 계획입니다.

   환절기에 언제나 건강 잘 챙기시길 바라겠습니다 🍁
   행복한 주말 보내시길 바랄게요~! 🌷✨

   작은 앱 프로젝트 너무 멋집니다. 응원합니다

   안녕하세요? 😊 큰 힘이 되는 넘나 감사한 말씀 남겨주셔서 감사드립니다!! 🙇‍♂️ 꾸준히 열심히 해보겠습니다 💪

   혹시라도 스케줄러 앱 쓰시면서 필요하신 게 있으시면 언제든지 앱 내 '의견 보내기'로 연락 주시면 빠르게 답변드리고 도와드릴 수 있도록 하겠습니다 📨

   꼭 필요한 기능만 제공하는 단순한 작은 앱 스케줄러가 일정 및 계획 관리에 도움이 되었으면 좋겠습니다! 단순함을 유지한 채로 더 편하게 일정 및 계획을 관리하실 수 있도록 앞으로도 꾸준히 노력할 계획입니다.

   환절기에 언제나 건강 잘 챙기시길 바라겠습니다 🍁
   행복한 주말 보내시길 바랄게요~! 🌷✨

   대단하고 멋있으십니다. swift 만 써서 모든 디바이스를 지원하시는 건가요?

   안녕하세요? 😎 작은 앱 프로젝트에 관심을 갖고 댓글을 남겨주셔서 감사드립니다~! 🙏

   아이폰, 아이패드, 맥 등 애플 플랫폼을 위주로 지원하고 있으며, Swift로 개발하고 있습니다. 맥 앱은 Mac Catalyst라는 기술을 쓰고 있습니다. 참고하실 수 있는 링크를 아래에 첨부해 두었습니다 👍

   Mac Catalyst
   https://developer.apple.com/mac-catalyst/

   더 편하게 일정을 관리하실 수 있도록 사용자 님들과 함께 고민하며 꾸준히 개선해 나가도록 하겠습니다 💪

   스케줄러 앱 쓰시면서 필요하신 게 있으시면 언제든지 앱 내 '의견 보내기'로 연락 주시면 빠르게 답변드리고 도와드릴 수 있도록 하겠습니다 📨

   꼭 필요한 기능만 제공하는 단순한 작은 앱 스케줄러가 사용자 님의 일정 및 계획 관리에 도움이 되었으면 좋겠습니다! 단순함을 유지한 채로 더 편하게 일정 및 계획을 관리하실 수 있도록 앞으로도 꾸준히 노력할 계획입니다.

   환절기에 언제나 건강 잘 챙기시길 바라겠습니다 🍁
   행복한 하루 보내시길 바랄게요~! 🌷✨

   원래 사용하던 앱이 강제로 바뀌는 바람에 탈출 각 재고 있었는데, 딱입니다.
   매우 깔끔하니 마음에 들어요!!

   안녕하세요? 😊 큰 힘이 되는 좋은 말씀 남겨주셔서 감사드립니다! 🙏

   더 편하게 일정을 관리하실 수 있도록 사용자 님들과 함께 고민하며 꾸준히 개선해 나가도록 하겠습니다 💪

   스케줄러 앱 쓰시면서 필요하신 게 있으시면 언제든지 앱 내 '의견 보내기'로 연락 주시면 빠르게 답변드리고 도와드릴 수 있도록 하겠습니다 📨

   꼭 필요한 기능만 제공하는 단순한 작은 앱 스케줄러가 사용자 님의 일정 및 계획 관리에 도움이 되었으면 좋겠습니다! 단순함을 유지한 채로 더 편하게 일정 및 계획을 관리하실 수 있도록 앞으로도 꾸준히 노력할 계획입니다.

   환절기에 언제나 건강 잘 챙기시길 바라겠습니다 🍁
   행복한 하루 보내시길 바랄게요~! 🌷✨
"
"https://news.hada.io/topic?id=17485","과소평가된 CEO 스티브 발머","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            과소평가된 CEO 스티브 발머

스티브 발머는 과소평가된 CEO였음

     * 스티브 발머의 리더십
          + 스티브 발머는 마이크로소프트의 성공에 중요한 역할을 했음.
          + 발머는 마이크로소프트의 재정적 성과를 개선하고, 장기적인 성공을 위한 중요한 투자를 이끌었음.
          + 발머는 후임자에게 정치적 장벽을 제거하여 성공을 위한 기반을 마련했음.
     * 발머에 대한 비판
          + 발머는 기술을 이해하지 못하고, 단순히 판매와 수익에만 집중했다는 비판을 받았음.
          + 발머의 리더십 하에서 마이크로소프트는 구글과 같은 경쟁자들에 의해 뒤처졌다는 비판이 있었음.
          + 발머는 마이크로소프트의 시장 가치를 과소평가하고 있다는 점을 강조했음.
     * 발머의 성과
          + 발머는 Bing, Azure, Office 365와 같은 주요 제품을 출시했음.
          + Azure는 현재 마이크로소프트의 가장 큰 성공 중 하나로 평가받고 있음.
          + 발머는 마이크로소프트의 엔터프라이즈 판매 조직을 구축하여 성공을 이끌었음.
     * 마이크로소프트의 실패
          + Bing, Zune, Windows Phone, HoloLens와 같은 제품은 실패로 평가받았음.
          + 그러나 이러한 실패에도 불구하고, Azure와 같은 성공적인 제품이 마이크로소프트의 가치를 크게 높였음.
     * 발머의 리더십 하에서의 마이크로소프트
          + 발머는 마이크로소프트를 안정적인 재정적 위치로 이끌었음.
          + 발머는 마이크로소프트의 가장 어려운 문제를 잘 해결하고 후임자에게 원활한 환경을 제공했음.
          + 발머는 마이크로소프트의 내부 정치적 문제를 해결하여 회사의 기능을 개선했음.

GN⁺의 정리

     * 스티브 발머는 마이크로소프트의 성공에 중요한 기여를 했으며, 그의 리더십은 과소평가되었음.
     * 발머는 장기적인 성공을 위한 중요한 투자를 이끌었으며, Azure와 같은 성공적인 제품을 통해 마이크로소프트의 가치를 높였음.
     * 발머의 리더십 하에서 마이크로소프트는 안정적인 재정적 위치를 유지하며, 후임자에게 원활한 환경을 제공했음.
     * 발머의 리더십은 마이크로소프트의 장기적인 성공을 위한 기반을 마련했으며, 그의 성과는 과소평가되기 어려움.

   발머 시기의 인사 평가 시스템이 말이 많았죠.

        Hacker News 의견

     * Ballmer의 리더십 문제와 Nadella의 변화에 대한 이해 부족이 지적됨
          + Microsoft는 모든 기술에 투자했으나, Windows 중심 구조가 문제였음
          + Nadella는 Windows를 Microsoft의 한 부분으로 만들고 가치를 낮췄음
          + Ballmer 하에서는 Azure가 Windows에 밀려 성공하기 어려웠을 것임
     * Microsoft 직원들의 공감대는 Ballmer가 매력적이지 않았지만 일을 해냈다는 것임
          + Azure의 성공은 Ballmer 시절 시작되었고, Microsoft의 강점에 맞춰 개발됨
          + Surface는 실패로 여겨졌지만 하드웨어 파트너들이 더 나은 제품을 만들도록 자극했음
     * Ballmer 하에서의 경험으로 인해 정치적 싸움과 내부 경쟁이 조장되었음
          + ""클라우드 우선, 모바일 우선""이라는 모순된 목표가 있었음
          + Nadella는 우선순위를 명확히 하고 내부 경쟁을 줄였음
     * Azure 프로젝트는 Nadella가 CEO가 되기 전부터 진행되었고, Ballmer의 제한을 벗어나 성공했음
          + Azure는 Linux 워크로드도 지원하는 클라우드로 발전했음
     * Lisa Brummel과 ""stack ranking"" 시스템이 Microsoft를 거의 망칠 뻔했음
     * 2003-2007년 Microsoft에서 근무한 경험으로 Ballmer의 리더십이 회사를 침체시켰다고 평가됨
          + 직원들은 서로를 공격하는 데 더 관심이 있었음
     * Ballmer의 무대와 인터뷰에서의 모습이 기술 이해 부족으로 시장에 반영되었음
     * Gary Bernhardt의 강연이 문제와 해결을 너무 명확히 제시해 비판받았다는 의견이 있음
     * Ballmer는 Windows 스마트폰과 태블릿 사업을 망쳤고, Nokia 인수는 잘못된 결정이었음
          + Apple을 모방해 기업 시장을 장악할 기회를 놓쳤음
     * Bill Gates와 Steve Ballmer의 유명한 비디오가 언급됨
"
"https://news.hada.io/topic?id=17558","오픈 소스 자체만으로는 빅 테크의 대안이 될 수 없습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    오픈 소스 자체만으로는 빅 테크의 대안이 될 수 없습니다

     * 현재 우리는 '빅테크'의 지배력에 대해 점점 더 우려하고 있고, 정부가 독점 플랫폼에서 벗어나고자 할때 오픈 소스가 종종 대안으로 언급됨
     * 오픈 소스와 빅테크를 비교하는 것은 오븐과 레스토랑을 비교하는 것과 같음
          + 빅테크는 잘 지원되는 서비스를 제공하고 자체 데이터 센터에서 모든 것을 운영하는 반면, 오픈 소스는 ""서비스로서의 업무 환경""과 같은 것으로 전환하기 위해 누군가가 여전히 작업해야 하는 무료/자유 소프트웨어의 모음임
          + 이에 비해 오븐 자체는 아직 레스토랑이 아님
     * 유럽 의회에서 이상주의자들이 빅테크에 대해 질려 Nextcloud로 교체하는 실험을 진행했지만 성공적이지 않았음
     * 유럽 의회의 일반 IT 환경은 전문가 팀에 의해 관리되고, 교육이 제공되며, 마이크로소프트 파트너와 마이크로소프트 자체의 지원을 받음
     * 반면 많은 오픈 소스 실험은 빌린 장비로 열정적인 취미생활자에 의해 운영되고, 교육이나 전문적인 지원 없이 처음 시도하는 사람에 의해 전개되기 때문에 잘 작동하지 않는 경우가 많음
     * 애플은 자체 소프트웨어로 클라우드 스토리지, 파일 관리, 스프레드시트, 워드프로세싱, 이메일 등 모든 것을 제공하지만 적극적으로 대기업/정부 시장을 공략하지는 않음
          + 대기업과 정부에 소프트웨어를 판매하려면 소프트웨어 자체를 만드는 것 외에도 엄청난 추가 노력이 필요함. 이는 애플조차 시도하지 않을 만큼 어려운 일임
     * 우리는 매년 수십억 달러를 빅테크 소프트웨어와 그를 둘러싼 서비스에 지출하면서도, 무료 오픈 소스 소프트웨어가 어떻게든 경쟁할 수 있을 것이라고 기대함
     * 오픈 소스로 아름답게 지원되는 서비스를 구축할 수는 있지만, ""빅테크""에 대한 대안을 주려면 비교 가능한 양의 노력과 상당한 자금을 투자해야 함.
          + 소프트웨어 저자에게 지불하는 것뿐만 아니라 지원에 대해서도 마찬가지임

결론

     * 궁극적으로 완전히 지배적인 플랫폼과 함께 다른 것을 시도하는 것은 피할 수 없는 일
     * 하지만 오픈 소스만 대안이라고 생각하는 실수를 범해서는 안 됨
     * 사용자에게는 소프트웨어뿐만 아니라 수많은 서비스가 필요하고, 이러한 서비스는 여전히 어딘가에서 찾아야 하며, 소프트웨어가 무료라고 해서 더 저렴하거나 간편해지지는 않을 것이기 때문

실무적 참고사항

     * 오픈 소스는 언더독이며, 오픈소스가 실패했다고 열광적으로 선언할 기회를 기다리는 많은 사람들이 있음
     * 적어도 다음 조건들이 채워졌을 때나 시작해야함
          + 달성 가능한 범위 - 가용한 시간, 예산, 인력으로 할 수 있는 일을 매우 신중하게 결정해야 함
          + 변화 관리 - 테스트에 참여하는 사람들이 일찍 나서서 의견을 제시할 수 있어야 함. 모든 것이 작동하는지 모두가 시도해 볼 수 있는 테스트 환경을 몇 달 전부터 구축해야 함. 제기되는 모든 우려사항을 주의 깊게 경청해야 함. 실험이 지정된 과제를 극복할 수 있는지 확인해야 함. 여전히 작동해야 하는 구식 라벨 프린터가 있고, 높은 대비 지원과 화면 판독기가 필요한 시각장애인도 조직에 있기 때문
          + 교육 세션 - 시작 버튼의 위치부터 메일 보내는 방법, 파일 검색 방법 같은 것들을 충분히 교육해야 함
          + 서버가 필요한 경우 충분히 준비해야 함. 새로운 것이 느리다는 첫 번째 불만이 나오면 실패한 것이기 때문. 소프트웨어 라이선스가 무료라고 해서 나머지 부분을 절약해서는 안됨
          + 연장된 업무 시간 동안 헬프데스크에 최고의 인재를 배치해야 함. 질문에 실제로 답변할 수 있고 문제를 해결할 능력도 있는 사람이어야 함
          + 문제를 해결할 준비가 된 팀이 없다면 시작하지 말 것

GN⁺의 의견

     * 오픈 소스를 빅테크의 대안으로 보기에는 아직 부족한 점이 많음. 소프트웨어뿐만 아니라 서비스와 지원, 교육 등 전반적인 생태계가 뒷받침되어야 함
     * 성공적인 오픈 소스 프로젝트가 되기 위해서는 소프트웨어 개발 자체보다 이를 실제 사용할 수 있도록 하는 과정에 많은 노력과 자금이 투입되어야 함
     * 기존 상용 솔루션을 대체하려면 사용자 관점에서의 편의성과 안정성이 보장되어야 하며, 이는 단순히 라이선스 비용을 아끼는 것 이상의 투자가 필요함
     * 그럼에도 오픈 소스는 장기적으로 빅테크에 대항할 수 있는 거의 유일한 대안이므로, 정부와 기업의 적극적인 지원이 필요함. 이는 단순히 오픈 소스 SW를 사용하는 것을 넘어 개발자 지원, 인프라 제공, 전문 서비스 육성 등 다방면의 노력을 요구함
     * 애플이나 MS 같은 거대 기업도 엔터프라이즈 시장 진출에 어려움을 겪는 만큼, 오픈 소스가 단기간에 이들을 대체하기는 쉽지 않을 것임. 특히 기존 인프라와의 호환성, 데이터 마이그레이션, 사용자 교육 등을 감안하면 장기적 관점에서의 단계적 접근이 필요해 보임

   대기업이나 공공의 경우 요구사항 난이도도 높고 운영 인력과 유지보수 비용을 고정 비용으로 고려해야 하기 때문에 상용 서비스를 오픈소스 프로그램 만으로는 쉽게 대체할 수 없습니다. 무작정 근시안적으로 접근하는 오류는 저쪽 사람들도 종종 범하는 것 같네요

   돈이 있으면, 그냥 돈 내고 상용 소프트웨어 사서 기술지원 받는 게 속 편하죠... 돈이 있으면.

   근데 이게 실무자 입장에서 마냥 좋은게 아닌게 생산성 향상한답시고 상용 사면서 기술지원 받으라면서 초반에만 해주고 나중에 가면 윗선에서 돈든다고 기술지원요청 반려하는일이 대기업에도 흔합니다...

   SI 가면 알고도 당하는 일이 흔해요.
   가장 큰 원인은 ‘무지’죠.
   특히 ‘오픈소스=공짜=비용절약’ 공식을 철저히 믿고 있는 시장이죠.
   왜냐면 간단합니다. 하청은 날로먹는 영세업자들이고, 프리랜서는 생계가 궁하거나 아니면 KOSA 등에업고 권한을 행사하는 사기꾼이거나 무조건 둘 중 하나라 아무도 이런 문제점을 제기할 사람이 있을 수 없거든요.

Hacker News 의견

     * 소프트웨어 비즈니스의 본질
       소프트웨어는 비즈니스 체인에서 저렴하고 덜 흥미로운 부분임. 효과성을 중시하며, 이는 직원들이 소프트웨어를 운영할 수 있고 문제가 발생했을 때 지원을 받을 수 있는 관계를 구매하는 것임. RedHat은 리눅스를 판매하는 것이 아니라 신뢰성과 지원을 판매하는 것임.
     * 오픈 소스의 중요성
       오픈 소스 비즈니스 모델은 기술 분야에서 생존을 위해 필수적임. IBM과 Red Hat의 합병, Microsoft의 오픈 소스 전략 등은 이를 증명함. ARM 아키텍처의 성공도 오픈 소스의 중요성을 보여줌.
     * 건강 분야의 소프트웨어 사용
       건강 분야에서 PostgreSQL을 대안으로 제안했으나, Oracle 라이선스에 많은 비용을 지출하고 있음. 때로는 많은 지원이 필요하지 않음에도 불구하고 많은 돈을 지불하고 있음.
     * 유럽 의회의 오픈 소스 실험
       Nextcloud 실험 실패는 전문 자원과 전문성 부족 때문이라는 암시가 있음. 그러나 구체적인 증거는 제시되지 않음. 오픈 소스 프로젝트가 종종 취미로 운영되며, 전문적인 지원 없이 진행되는 경우가 많음.
     * 오픈 소스와 클로즈드 소스의 구현
       오픈 소스와 클로즈드 소스 모두 구현에 시간이 걸림. 클로즈드 소스는 지원을 통해 수익을 창출하기 때문에 문서화가 부족한 경우가 많음. 오픈 소스는 시작하기 쉬운 것이 중요함.
     * Nextcloud 사용 여부
       Nextcloud의 실패에 대한 증거를 찾을 수 없으며, 오히려 EU의 정부와 지방자치단체에서 널리 사용되고 있음.
     * 오픈 소스 프로젝트의 자금 지원
       많은 인기 있는 오픈 소스 프로젝트가 대형 기술 기업의 자금 지원을 받음. 이는 대안이 되기 어려운 이유 중 하나임.
     * 사이드 프로젝트의 한계
       모든 것이 사이드 프로젝트로 경쟁할 수 없으며, 비독점 라이선스의 문제도 있음. 많은 사람들에게 소스 코드 접근이 이미 충분함.
     * 자유 소프트웨어의 역사적 역할
       자유 소프트웨어는 80년대부터 많은 독점 소프트웨어를 지원해왔음. Emacs는 90년대 독일 항공사의 ATC를 지원했으며, Amazon에서도 사용됨.
     * 대형 기술 기업의 무료 서비스
       대형 기술 기업은 무료로 호스팅 서비스를 제공함. 이는 자체 호스팅을 어렵게 만듦. 과거에는 소규모 기술 기업이 오픈 소스 설치를 제공했음.
"
"https://news.hada.io/topic?id=17584","Redis가 필요할까? PostgreSQL이 큐잉, 락킹, 그리고 pub/sub 기능을 제공하는데 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Redis가 필요할까? PostgreSQL이 큐잉, 락킹, 그리고 pub/sub 기능을 제공하는데 (2021)

     * 사용 사례 1: 작업 큐잉
          + Redis는 웹 서비스에서 백그라운드 작업을 조정하는 데 자주 사용됨.
          + PostgreSQL 9.5 버전 이후 SKIP LOCKED 옵션을 사용하여 작업 큐잉을 구현할 수 있음.
          + 이 옵션은 잠금 대기 없이 작업을 선택할 수 있게 하여 여러 작업자가 동일한 작업을 동시에 처리하지 않도록 보장함.
     * 사용 사례 2: 애플리케이션 잠금
          + Redis는 분산 잠금에 자주 사용됨.
          + PostgreSQL의 조언적 잠금을 사용하여 동일한 기능을 구현할 수 있음.
          + 조언적 잠금은 PostgreSQL의 내부 잠금 엔진을 애플리케이션 정의 목적으로 활용할 수 있게 함.
     * 사용 사례 3: Pub/Sub
          + Redis는 이벤트를 활성 클라이언트에 푸시하는 데 사용됨.
          + PostgreSQL 9 버전 이후 LISTEN과 NOTIFY 문을 사용하여 Pub/Sub 기능을 제공함.
          + PostgreSQL 클라이언트는 특정 메시지 채널에 구독할 수 있으며, 다른 클라이언트가 해당 채널에 메시지를 보내면 모든 구독자가 알림을 받음.
     * PostgreSQL의 완전한 활용
          + Redis는 PostgreSQL과 다른 용도로 사용되며, TTL을 가진 데이터 캐싱 및 일시적인 데이터 저장에 뛰어남.
          + PostgreSQL은 SQL 데이터베이스 이상의 기능을 제공하며, Redis를 사용하는 작업을 PostgreSQL로 대체할 수 있는 가능성이 있음.
          + 여러 데이터 서비스를 사용하는 복잡성을 줄이고 운영 비용을 절감할 수 있는 가치 있는 선택이 될 수 있음.

        Hacker News 의견

     * Redis는 애플리케이션과 같은 기기에서 실행될 때 매우 빠른 응답 속도를 제공함. 이는 Postgres와는 다른 작업을 가능하게 함
          + 인메모리 키-값 저장소는 RAM의 성능 특성을 필요로 하는 작업에 적합함
          + 네트워크 연결을 통해 RAM의 성능을 얻을 수 없다는 것은 자명한 사실임
     * PostgreSQL은 단순한 SQL 데이터베이스 이상의 기능을 제공함
          + ORM 뒤에서만 데이터베이스를 사용하면 기능을 놓칠 수 있음
          + Redis 같은 서비스를 추가하기보다는 이미 설정된 데이터베이스를 활용하는 것이 나을 수 있음
     * PGQueuer는 PostgreSQL을 사용하여 작업 큐, 잠금, 실시간 알림을 제공하는 최소한의 대안임
          + Redis의 필요성을 줄여줌
     * Postgres는 강력한 데이터베이스임
          + Redis는 사용 장벽이 낮고 높은 성능을 제공하며, 기본 데이터베이스의 부하를 줄여줌
          + API 응답 캐싱은 Postgres에서도 가능하지만, Redis를 사용하는 것이 더 간단함
          + 별도의 시스템을 사용하는 것은 단점이 있지만, Redis의 경우 그 단점이 크지 않음
     * 대부분의 프로젝트는 간단한 작업 큐만 필요로 하며, 복잡한 스택을 단순화하는 것이 중요함
          + 여러 상업적 관심이 있는 다양한 대안들이 존재함
     * Postgres는 몇 가지 제한 사항이 있음
          + KVstore, 큐, pubsub, 잠금 등의 기능은 해결할 수 있지만 간단하지 않음
     * PostgreSQL로 시작하고 필요할 때 Redis로 전환하는 것이 좋음
          + 움직이는 부품의 수를 최소화하는 것이 중요함
     * Postgres pub/sub의 큰 단점은 메시지 크기가 8000바이트로 제한된다는 것임
          + 데이터베이스에 데이터를 저장하고 ID를 보내는 방법이 있지만, 이는 추가 작업을 요구함
     * Redis의 가장 중요한 응용 중 하나인 캐싱은 Postgres에서 더 복잡함
          + Postgres의 업데이트는 삽입보다 비용이 많이 들고, 내구성 보장은 캐싱에 중요하지 않음
     * Postgres에서 이러한 기능을 사용할 때 업데이트와 복제가 더 어려워짐
          + 가능하지만, Postgres의 더 널리 사용되는 기능에 집중하는 것을 선호함
"
"https://news.hada.io/topic?id=17537","Ask GN: 혹시 검색시 날짜별로 정렬해서 볼 수 있는 기능이 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ask GN: 혹시 검색시 날짜별로 정렬해서 볼 수 있는 기능이 있나요?

   가끔 놓친 뉴스나 특정 키워드의 트랜드를 시계열로 따라가면서 보고 싶은데, 제가 관련 기능을 못 찾는건지? 아니면 현재 사이트에서 제공을 안 하는건지? 모르겠어서 질문드려봅니다.

   다음에서 ""site:news.hada.io 키워드""로 검색해서 웹문서 분류를 선택하면 최신순으로 정렬해서 볼 수 있는 것 같습니다.

   위에 '예전글'이 있네요.

   url param을 바꿔서도 가능해 보여요.
"
"https://news.hada.io/topic?id=17476","Apple, M4 칩 탑재한 새로운 색상의 iMac 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Apple, M4 칩 탑재한 새로운 색상의 iMac 출시

     * M4 칩과 Apple Intelligence로 강화된 새로운 iMac을 발표
     * 24인치 4.5K Retina 디스플레이, 12MP Center Stage 카메라, Thunderbolt 4
     * 그린, 옐로, 오렌지, 핑크, 퍼플, 블루, 실버의 다양한 새로운 색상으로 제공
     * M4 칩은 이전 M1 모델보다 최대 1.7배 빠른 성능을 제공하며, 사진 편집 및 게임과 같은 작업에서 최대 2.1배 더 빠른 성능을 발휘함
     * Neural Engine이 탑재된 M4는 AI 작업에 최적화되어 있으며, Apple Intelligence는 사용자의 작업, 소통, 표현 방식을 혁신적으로 변화시킴

  M4로 성능 강화

     * M4 칩은 세계에서 가장 빠른 CPU 코어를 탑재하여 iMac의 성능을 크게 향상시킴
     * 일상적인 작업에서 최대 1.7배, 사진 및 비디오 편집에서 최대 2.1배 빠른 성능을 제공함
     * 새로운 iMac은 16GB의 통합 메모리를 기본으로 제공하며, 최대 32GB까지 구성 가능함

  Apple Intelligence와 새로운 시대

     * Apple Intelligence는 개인 컴퓨터에 개인 지능을 도입하여 새로운 시대를 열어줌
     * 강력한 생성 모델과 업계 최초의 개인정보 보호 기능을 결합하여 사용자가 Mac에서 새로운 방식으로 작업, 소통, 표현할 수 있도록 함
     * 시스템 전반에 걸친 Writing Tools를 통해 사용자는 텍스트를 재작성, 교정, 요약할 수 있음

  다양한 새로운 색상

     * 새로운 iMac은 그린, 옐로, 오렌지, 핑크, 퍼플, 블루, 실버 등 7가지 생생한 색상으로 제공됨
     * iMac의 뒷면은 대담한 색상으로 디자인되어 있으며, 앞면은 새로운 팔레트의 미묘한 색조를 표현하여 사용자가 최상의 작업을 할 수 있도록 함

  새로운 나노 텍스처 디스플레이 옵션

     * 24인치 4.5K Retina 디스플레이는 나노 텍스처 유리 옵션을 제공하여 반사와 눈부심을 크게 줄이면서도 뛰어난 이미지 품질을 유지

  12MP Center Stage 카메라로 향상된 화상 통화

     * 새로운 12MP Center Stage 카메라는 Desk View를 지원하여 화상 통화를 더욱 몰입감 있게 만듦
     * Center Stage는 화상 통화 중 모든 사람을 완벽하게 중앙에 배치함

  고급 연결성

     * 4개의 USB-C 포트는 모두 Thunderbolt 4를 지원하여 초고속 데이터 전송이 가능
     * Wi-Fi 6E 및 Bluetooth 5.3을 지원하며, Touch ID를 통해 사용자는 쉽게 컴퓨터를 잠금 해제하고 온라인 구매를 할 수 있음

  macOS Sequoia로 제공되는 독보적인 경험

     * macOS Sequoia는 iPhone Mirroring, Safari의 새로운 기능, 게임 모드 개선 등 다양한 흥미로운 기능을 제공함

  환경을 위한 더 나은 선택

     * 새로운 iMac은 환경을 고려하여 설계되었으며, 100% 재활용 알루미늄과 금 도금, 주석 납땜, 구리를 사용함
     * Apple은 2030년까지 전체 탄소 발자국을 중립화할 계획임

   M4 맥북이는 ㅠㅠ

   27"" iMac은 이제 더 이상 볼 수 없는 건지 아쉽네요. M4 Pro 칩 정도 달고 나와주면 무척이나 구미가 당길 것 같은데...

   https://news.ycombinator.com/item?id=41973709
   시장 점유율을 고려해서 안나오는 것 같아요

        Hacker News 의견

     * 2017년 iMac 27""는 내부 컴퓨터가 쓸모없어지면 모니터로 사용할 수 없는 첫 번째 5k iMac임. EU가 모든 AIO 컴퓨터가 모니터 모드로 작동하도록 법을 제정하길 바람. iMac의 5k 화면은 좋지만 CPU가 오래되어 사진이나 비디오 편집에 적합하지 않음. Apple은 발표에서는 친환경을 강조하지만 실제로는 무한 판매에 더 관심이 있음.
     * iMac Pro에 8k 울트라와이드 스크린이 있다면 즉시 구매할 것임. 울트라와이드 폼 팩터는 생산성에 매우 좋음. Apple의 ""그냥 작동함"" 접근 방식을 좋아하며, 완전히 통합된 제품이 있다면 바로 사용할 것임.
     * 16GB 기본 RAM을 드디어 제공함. Magic Keyboard와 Magic Mouse도 USB-C로 이동함.
     * Apple 제품 발표에서 최근 하드웨어가 필요하지 않은 작업을 보여주는 것을 좋아함. 특히 아이스크림 스프레드시트는 소규모 비즈니스가 새로운 iMac을 사용할 수 있음을 보여주기 위한 것 같음. 업그레이드 트레드밀을 강조함.
     * 여전히 256GB 저장 용량을 기본으로 제공하는 것에 놀람. 500GB SSD는 $50 미만, 1TB는 $100 미만으로 구입 가능함. Apple이 기본 저장 용량을 512GB로 늘리고 1TB를 $200 업그레이드로 제공해도 여전히 많은 이익이 남음.
     * 현재 Apple 컴퓨터 라인업은 나에게 맞지 않음. iMac은 너무 작고 노트북은 너무 큼. 최소 27"" 디스플레이의 iMac과 더 휴대 가능한 12"" MacBook을 원함.
     * 이러한 제품들이 일회용으로 설계된 것이 실망스러움. 화면 교체 비용이 컴퓨터 전체 가격과 거의 같음.
     * 27"" iMac이 그립음. 훌륭한 폼 팩터였음.
     * 녹색 iMac 사진에 대한 의문. 저가형 8코어 모델은 두 개의 USB-C 포트만 있음. 스탠드 컷아웃에 후면 카메라처럼 보이는 것이 있음. 이는 자석 전원 커넥터임. 기가비트 이더넷 포트도 어딘가에 있음.
     * iMac은 색상 맞춤형 키보드와 마우스 또는 트랙패드를 특징으로 함. 이 액세서리들은 이제 USB-C 포트를 갖추고 있어 단일 케이블로 모든 기기를 충전할 수 있음. WOW!
"
"https://news.hada.io/topic?id=17489","전 세계가 당신의 절친에게 남용 신고를 보내도록 하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    전 세계가 당신의 절친에게 남용 신고를 보내도록 하는 방법

    소개

     * 이 글은 보안, 네트워킹, 남용 신고와 관련된 개인적인 경험을 다루고 있음.
     * 저자는 자신의 서버가 악성 코드에 감염되었다는 신고를 받았으나, 조사 결과 문제가 없음을 확인했음.

    사건의 발단

     * 저자는 Hetzner로부터 자신의 IP 주소가 남용 신고를 받았다는 이메일을 받았음.
     * 서버에서 비정상적인 SSH 연결 시도가 발견되었으나, 실제로는 서버에서 외부로의 연결이 아닌 외부에서 서버로의 TCP 리셋 패킷이 전송되고 있었음.

    IP 스푸핑

     * 인터넷에서 IP 스푸핑은 출발지 IP 주소를 위조하여 패킷을 보내는 행위임.
     * BCP38은 네트워크 간의 IP 패킷 전송 시 예상되는 IP 주소만 허용하도록 권장하지만, 모든 네트워크가 이를 따르지 않음.

    동기 추측

     * 공격자는 출발지 IP를 위조하여 포트 22로 연결 요청을 보내고, 이로 인해 자동화된 남용 신고가 발생함.
     * 이는 Tor 네트워크의 일부 노드를 대상으로 한 공격일 가능성이 있음.

    Tor 연결

     * Tor 릴레이는 익명화된 트래픽을 전달하는 역할을 하며, 외부 인터넷과 직접 연결되지 않음.
     * 그러나 일부 인터넷 사용자들은 Tor를 싫어하며, 이를 비활성화하려는 시도가 있을 수 있음.

    결론

     * 인터넷은 25년 전에도 문제가 있었고, 여전히 문제가 있음.
     * IP 스푸핑은 여전히 문제이며, BCP38과 같은 보안 규칙이 제대로 시행되지 않음.
     * 이러한 남용 신고를 받을 경우, 서버가 피해자임을 호스팅 제공업체에 설명할 수 있는 방법을 알게 될 것임.

    # GN⁺의 정리

     * 이 글은 IP 스푸핑과 관련된 보안 문제를 다루며, Tor 네트워크와의 연관성을 설명함.
     * 인터넷 보안의 중요성과 BCP38의 필요성을 강조함.
     * 유사한 기능을 가진 프로젝트로는 다양한 보안 네트워크 도구들이 추천될 수 있음.

        Hacker News 의견

     * IP 스푸핑 문제는 악의적인 행위자와 무고한 사용자가 같은 변명을 사용할 수 있어 해결하기 어려움
          + 인터넷은 25년 전부터 문제가 있었으며, 여전히 해결되지 않음
          + 스푸핑된 IP 주소 문제는 2024년에도 여전히 존재하며, 인터넷 커뮤니티는 이를 해결하기 위한 보안 규칙을 강제하지 않음
     * 과거에 기본적인 방화벽 규칙을 구현했으나, 스푸핑된 패킷으로 인해 문제가 발생했음
          + 특정 IP에서 스푸핑된 패킷을 받았고, 이를 해결하기 위해 방화벽 규칙을 조정했음
          + 여러 IP 주소를 운영하는 것이 중요하며, ISP가 소스 기반 필터링을 하면 다른 ISP로 변경함
     * BCP38 필터링을 하지 않는 전송 제공자를 찾으면, 원하는 소스 IP로 패킷을 보낼 수 있음
          + BCP38의 기원은 1998년으로 거슬러 올라가지만, 여전히 이를 구현하지 않는 네트워크 제공자가 존재함
          + 스푸핑을 방지하기 위해 BCP38을 구현하지 않는 모든 AS의 트래픽을 거부하는 것이 필요함
     * Tor 릴레이를 싫어하는 누군가의 이론은 가치가 없어 보임
          + 악의적인 릴레이를 운영하면서 합법적인 릴레이를 제거하려는 시도일 수 있음
     * 스와팅과 유사한 문제로, 확인되지 않은 문제의 출처에 대해 당국이 심각한 조치를 취하는 것에 의존함
          + 차이점은 비연관된 당사자를 통해 불만을 제기한다는 점임
     * 과거에 DrDoS 리플렉터를 스캔했으며, 클라우드 제공자가 대량의 불만을 받았음
          + 스푸핑된 스캔 패킷을 보내는 서버는 탐지되지 않으며, 인터넷을 반복적으로 스캔할 수 있음
          + 스푸핑된 패킷의 출처를 추적하는 것은 가능하지만, 전송 제공자와의 협력이 필요함
     * 시스템은 단일 패킷에 대해 자동으로 남용을 보고하지 않아야 하며, 서비스 거부 수준의 트래픽일 경우에만 보고해야 함
          + SSH의 경우 핸드셰이크가 발생하기 전까지는 유효한 연결 시도가 아님
     * IP 스푸핑은 스와팅, 특허 트롤링, 무고한 사람을 누명 씌우기와 유사한 문제임
          + 남용 보호 메커니즘을 무기로 사용하여 싫어하는 대상을 공격하는 방식임
          + 당국이 약점이 되어 악의적인 행위자에 의해 무기화될 수 있음
     * 공격을 하이재킹하여 모든 사람에게 패킷을 보내면, 제공자가 남용 이메일에 압도되어 공격이 작동하지 않게 할 수 있음
          + 허니팟이 남용 이메일을 보내지 않거나, 제공자가 이를 필터링할 수 있음
"
"https://news.hada.io/topic?id=17471","NotebookLlama - 구글 NotebookLM의 오픈 소스 버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                NotebookLlama - 구글 NotebookLM의 오픈 소스 버전

     * PDF를 팟캐스트로 변환하는 워크플로우를 구축하기 위한 튜토리얼 시리즈
     * 텍스트-음성 변환 모델을 사용한 실험도 학습 가능
     * LLM, 프롬프트, 오디오 모델에 대한 사전 지식이 없어도 모든 것이 각 노트북에서 다루어짐

    단계별 과정

     * 1단계: PDF 전처리
       Llama-3.2-1B-Instruct 모델을 사용하여 PDF를 전처리하고 .txt 파일로 저장함.
     * 2단계: 트랜스크립트 작성
       Llama-3.1-70B-Instruct 모델을 사용하여 텍스트로부터 팟캐스트 트랜스크립트를 작성함.
     * 3단계: 극적 재작성
       Llama-3.1-8B-Instruct 모델을 사용하여 트랜스크립트를 더 극적으로 만듦.
     * 4단계: 텍스트-음성 변환 워크플로우
       parler-tts/parler-tts-mini-v1 및 bark/suno 모델을 사용하여 대화형 팟캐스트를 생성함.

    노트북 실행에 대한 자세한 단계

     * 요구사항
       70B, 8B, 1B Llama 모델을 사용하기 위해 GPU 서버 또는 API 제공자가 필요함.
     * 노트북 1
       PDF를 처리하고 Feather light 모델을 사용하여 .txt 파일로 변환함.
     * 노트북 2
       노트북 1의 출력을 받아 창의적으로 팟캐스트 트랜스크립트로 변환함.
     * 노트북 3
       이전 트랜스크립트를 받아 대화에 극적 요소와 중단을 추가함.
     * 노트북 4
       마지막 노트북의 결과를 팟캐스트로 변환함.

    향후 개선/추가 아이디어

     * 음성 모델 실험: 더 자연스러운 소리를 위해 TTS 모델 개선 필요.
     * LLM 대 LLM 토론: 두 에이전트가 주제를 토론하여 팟캐스트 개요 작성.
     * 405B 모델을 사용한 트랜스크립트 작성 테스트.
     * 더 나은 프롬프트 작성.
     * 웹사이트, 오디오 파일, YouTube 링크 등을 수집할 수 있는 기능 지원.

GN⁺의 정리

     * NotebookLlama는 PDF를 팟캐스트로 변환하는 오픈 소스 프로젝트로, 다양한 LLM과 TTS 모델을 사용하여 창의적인 콘텐츠를 생성함.
     * 이 프로젝트는 LLM과 TTS 모델의 실험을 통해 더 자연스러운 음성을 생성할 수 있는 가능성을 제시함.
     * 유사한 기능을 가진 프로젝트로는 Google의 TTS API와 Amazon Polly 등이 추천됨.

        Hacker News 의견

     * NotebookLM의 ""에피소드""를 들을수록, Google이 기존의 멀티모달 백본을 기반으로 두 명의 화자가 참여하는 ""팟캐스트 토론"" 모델을 훈련시켰다는 확신이 듦
          + 두 화자가 인간처럼 서로 말을 끊고 대화하는 방식이 매우 자연스러움
          + 실제 팟캐스트와 그 전사본을 기반으로 모델을 미세 조정했을 가능성이 있음
          + ""The Daily"" 에피소드를 예로 들어, 언어 모델이 팟캐스트 내용을 요약하는 가상의 기사를 작성하고, 이를 두 화자 모델에 입력하여 출력된 전사본이 입력 기사와 얼마나 일치하는지 확인하는 방식일 것이라 추측함
     * NotebookLM은 기술에 익숙하지 않은 사람들에게도 매우 인상적임
          + 70대 부모님과 8살 아이도 이 기술에 놀라움을 금치 못하고 계속 사용 중임
     * TTS 엔진 선택이 이상하다고 생각함
          + 최신 오픈 TTS 시스템과 비교했을 때, XTTSv2나 새로운 F5-TTS가 더 나은 선택이었을 것이라고 주장함
     * 샘플 출력이 매우 부족하다고 평가함
          + NotebookLM 팀이 기존의 기초 모델을 사용하여 히트 상품을 만들어낸 점을 강조함
     * 다른 언어와 다양한 억양, 특히 동남아시아 억양으로 출시되기를 기대함
     * NotebookLM이 오픈 소스가 아니라 iPython 노트북에서의 몇 가지 실험일 가능성이 있다고 생각함
          + LLM 수준에서의 기능은 특별히 새롭지 않지만, 제품으로서의 포장 방식이 흥미로움
          + ""팟캐스트"" 부분은 대규모 코퍼스의 소개/개요일 뿐이며, 봇과의 대화를 통해 인용된 참고 자료를 얻는 것이 더 유용하다고 봄
     * LLM을 사용한 프로토타이핑이 매우 빠르다는 점을 보여줌
          + API를 사용해보지 않은 사람들에게 시도해볼 것을 권장함
     * NotebookLM이 팟캐스트만 생성하는지에 대한 의문을 가짐
          + 팟캐스트는 재미있지만 다소 장난스러운 기능이라고 생각함
     * 모바일 폰에서 로컬로 실행할 수 있다면 좋겠다고 생각함
          + 예를 들어, 작업 문서를 팟캐스트로 변환하여 운전 중에 들을 수 있다면 생산성이 크게 향상될 것이라고 주장함
     * 샘플이 다소 거칠다고 평가함
     * NotebookLM을 사용해본 사람의 출력을 듣고 싶다고 언급함
"
"https://news.hada.io/topic?id=17556","엔비디아, 인텔을 대신해 다우존스 산업 평균지수에 편입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     엔비디아, 인텔을 대신해 다우존스 산업 평균지수에 편입

     * Nvidia가 Intel을 대체하여 Dow Jones 산업평균지수에 편입됨. 이는 반도체 산업의 큰 변화를 반영
     * Nvidia 주가는 올해 170% 이상 상승했으며, Intel은 가치의 절반 이상을 잃음
     * 이번 지수 변경은 11월 8일에 시행될 예정
     * Nvidia의 성장과 시장 영향
          + Nvidia의 주가는 2024년 동안 170% 이상 상승했으며, 시가총액은 3.3조 달러에 달함.
          + Microsoft, Meta, Google, Amazon 등 기업들이 Nvidia의 GPU를 대량 구매하여 AI 작업을 위한 컴퓨터 클러스터를 구축 중임.
          + Nvidia의 매출은 최근 5분기 동안 두 배 이상 증가했으며, 차세대 AI GPU인 Blackwell에 대한 수요가 매우 높음.
     * Intel의 도전과 변화
          + Intel은 PC 칩 시장에서의 지배력을 잃고 있으며, AI 분야에서의 진전이 미미함.
          + 제조 문제와 새로운 경쟁으로 인해 Intel 주가는 올해 절반 이상 하락함.
          + Intel은 비용 절감 및 자본 축소 활동을 승인했으며, 16,500명의 직원 감축을 포함함.
     * Dow Jones 지수의 구성 변화
          + Dow는 30개의 구성 요소로 이루어져 있으며, 개별 주식의 주가에 의해 가중치가 부여됨.
          + Nvidia는 10대 1 주식 분할을 통해 지수에 편입될 수 있는 위치를 확보함.
          + 이번 변경은 Amazon이 Walgreens Boots Alliance를 대체한 이후 처음임.

GN⁺의 정리

     * Nvidia의 Dow Jones 지수 편입은 AI와 반도체 산업의 급격한 변화를 반영함.
     * Nvidia의 급성장은 AI 기술의 중요성을 강조하며, 관련 기업들의 기술 투자 증가를 유도함.
     * Intel의 도전은 제조 및 경쟁 문제를 해결해야 하는 필요성을 보여줌.
     * Dow Jones 지수의 변화는 기술 기업의 중요성을 반영하며, 시장의 변화를 따라잡기 위한 노력임.
     * 유사한 기능을 가진 산업 내 다른 프로젝트로는 AMD와 같은 경쟁사가 있음.

   뭔가 기분이 묘하네요. 인텔이 어쩌다...

        Hacker News 의견

     * DJIA는 오래된 방식으로, 현재는 관련성이 떨어짐. 가격 가중 방식은 고가 주식에 더 많은 비중을 두어 비합리적임
          + DJIA의 포인트 변화만을 언급하는 미디어 보도는 금융 문맹을 초래함
     * Intel의 CEO가 20년 전 NVidia를 인수하려 했으나, 이사회가 비용 문제로 제안 거절함. AI의 미래를 예측하기 어려웠지만, 투자 수익률을 생각해보면 아쉬움
     * ""Dow Jones Industrial Index""는 더 이상 산업적이지 않음. 절반만이 실제 공장을 운영하고 있음
     * Nvidia가 과거에 자체 x86 CPU를 만들려 했으나 Intel의 소송 위협으로 중단됨. 현재 Nvidia는 Intel을 쉽게 인수할 수 있을 정도로 성장함
     * DJIA는 주류 미디어 외에는 크게 중요하게 여겨지지 않음. 가격 가중 방식으로 인해 큰 변동처럼 보일 수 있음
          + S&P 500과 QQQ 같은 다른 지수는 이미 NVidia를 포함하고 있어 DJIA는 뒤늦게 따라가는 중임
     * 저조한 성과의 기업을 교체하고도 여전히 평균이라고 부를 수 있는지 의문임
     * Dow Jones Industrial Average는 심각하게 받아들여지지 않아야 함. 139년 전 수작업으로 평균을 계산해야 했던 시절의 산물임
"
"https://news.hada.io/topic?id=17545","임베딩 기술은 저평가 되었음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            임베딩 기술은 저평가 되었음

     * 머신러닝(ML)은 기술 문서 작성에서 최신 기술을 발전시킬 잠재력이 있음
     * Claude, Gemini, LLaMa, GPT 등과 같은 텍스트 생성 모델이 아닌 임베딩이 기술 문서 작성에 가장 큰 영향을 미칠 수 있는 ML 기술
     * 임베딩은 정확히 새로운 것은 아니지만 최근 몇 년 동안 훨씬 더 널리 접근할 수 있게 되었음
     * 임베딩은 기술 작가에게 이전에는 불가능한 규모로 텍스트 간의 연결을 발견할 수 있는 능력을 제공함

임베딩에 대한 직관 쌓기

  입력과 출력

     * 임베딩을 만들기 위해 입력하는 것은 텍스트
     * 매번 동일한 양의 텍스트를 제공할 필요는 없음
          + 때로는 단일 문단이 입력이고, 다른 때에는 몇 개의 섹션, 전체 문서 또는 여러 문서일 수도 있음
     * 출력은 숫자의 배열
          + 단일 단어를 입력하면 출력은 [-0.02387, -0.0353, 0.0456]과 같은 숫자 배열
          + 전체 문서 세트를 입력하면 출력은 [0.0451, -0.0154, 0.0020]과 같은 형태
     * 입력의 크기에 관계없이 항상 동일한 수의 숫자를 얻음
          + 이를 통해 임의의 두 텍스트를 수학적으로 서로 비교할 수 있는 방법을 얻게 됨
     * 실제 임베딩에서는 배열에 3개가 아닌 수백 또는 수천 개의 숫자가 있음

  임베딩을 만드는 방법

     * 대형 서비스 제공업체들이 임베딩 생성을 쉽게 만들어줌
     * Gemini의 text-embedding-004 모델은 768개의 숫자 배열을 반환하고, Voyage AI의 voyage-3 모델은 1024개의 숫자 배열을 반환함
     * 서로 다른 제공업체의 임베딩은 호환되지 않음

    비용이 많이 드나요?

   아니요.

    환경에 나쁜가요?

     * 임베딩 생성은 텍스트 생성보다 계산 집약적이지 않음
     * 그러나 임베딩 모델은 텍스트 생성 모델과 유사한 방식으로 학습되는 것으로 보이며, 이는 에너지 사용을 의미함
     * 더 알게 되면 이 섹션을 업데이트할 예정

    어떤 모델이 가장 좋나요?

     * 이상적으로는 임베딩 모델이 완전한 페이지에 대한 임베딩을 생성할 수 있도록 방대한 양의 입력 텍스트를 받아들일 수 있어야 함
     * 2024년 10월 기준으로 입력 크기 면에서 voyage-3가 가장 우수해 보임
     * 입력 제한은 토큰 기반이며 각 서비스는 토큰을 다르게 계산하므로 정확한 숫자에 너무 많은 비중을 두지 말아야 함

  매우 이상한 다차원 공간

     * 임베딩 숫자의 의미는 무엇인가?
     * 지도 상의 좌표에 대해 생각해 보기
          + 임베딩은 지도 상의 점과 유사함
          + 임베딩 배열의 각 숫자는 X좌표 및 Y좌표와 유사한 차원
          + 임베딩 모델이 1000개의 숫자 배열을 반환하면 텍스트가 다른 모든 텍스트에 상대적으로 의미론적으로 1000차원 공간에 존재하는 지점을 알려주는 것
          + 두 임베딩 사이의 거리를 비교할 때 실제로 하는 일은 두 텍스트가 서로 얼마나 의미론적으로 가깝거나 떨어져 있는지 파악하는 것
     * 관련 항목이 서로 가깝게 군집을 이루는 이러한 다차원 공간에 항목을 배치하는 개념을 latent space라고 함
     * Word2vec 논문의 유명한 예제:
          + embedding(""king"") - embedding(""man"") + embedding(""woman"") ≈ embedding(""queen"")
          + 임베딩은 인간에게 직관적으로 느껴지는 방식으로 의미론적 관계를 나타낼 수 있음
     * 임베딩은 수백 또는 수천 개의 차원에서 작동하므로 3차원 생물체가 1000차원에서 ""거리""가 어떻게 보이는지 시각화하는 것은 불가능함
     * 각 차원이 무엇을 나타내는지 알 수 없음

  임베딩 비교

     * 임베딩을 생성한 후에는 각 임베딩이 어떤 텍스트와 연결되어 있는지 추적하기 위해 일종의 ""데이터베이스""가 필요함
     * 선형 대수학이 많이 관여되며, NumPy 및 scikit-learn과 같은 수학 및 ML 라이브러리가 무거운 작업을 수행할 수 있음

응용 프로그램

     * 임베딩으로 기술 문서 작성의 최신 기술을 어떻게 발전시킬 수 있을지 직접 알아보기

  수천 개의 임베딩이 꽃 피도록 하기

     * 문서 사이트 소유자로서 REST API 또는 잘 알려진 URI를 통해 콘텐츠에 대한 임베딩을 원하는 사람에게 자유롭게 제공해야 하는지 궁금함
     * 커뮤니티가 이 추가 유형의 문서 데이터로 어떤 멋진 것을 구축할 수 있는지 알 수 없음

맺음말

     * 3년 전에 768차원 공간이 무엇인지 물었다면 물리학자와 수학자가 알 수 없는 이유로 필요로 하는 추상적 개념일 뿐이라고 말했을 것
     * 임베딩은 이 아이디어에 대해 더 깊이 생각하고 실제로 자신의 작업에 적용할 이유를 제공
     * 문서 유지 관리 능력에 대한 규모의 개선은 여전히 가능할 수 있으며, 아마도 차수가 더 많은 차원이 필요할 것!

부록

  구현

     * 각 문서에 대한 임베딩을 생성하기 위한 Sphinx 확장 생성
     * 빌드가 완료되면 임베딩 데이터가 embeddings.json에 저장됨
     * 각 문서에 대해 가장 가까운 이웃을 찾는 것이 마지막 단계
          + 선형 대수학 기초는 Linear Algebra for Machine Learning and Data Science에서 배움

  결과

     * 데이터를 해석하는 방법:
          + Target은 현재 보고 있는 페이지
          + Neighbor는 추천 페이지가 될 것
     * 결과 표에서 관련 페이지들이 서로 추천되고 있음을 확인할 수 있음

GN⁺의 의견

     * 임베딩 기술은 기술 문서 작성 분야에서 콘텐츠 간 연관성을 파악하고 문서 간 연결을 발견하는데 큰 도움이 될 것으로 보임. 특히 방대한 양의 문서를 다뤄야 하는 대규모 문서 프로젝트에서 더욱 유용할 것임
     * 다만 임베딩 모델은 여전히 에너지 소비가 큰 편이고, 윤리적인 우려도 있으므로 도입 시 신중한 검토가 필요해 보임. 충분한 컴퓨팅 자원 확보와 함께 임베딩 생성의 환경적 영향을 최소화하기 위한 노력이 뒷받침되어야 할 것
     * 문서 사이트에서 임베딩을 API로 제공하는 것은 개발자 커뮤니티의 창의적인 활용을 촉진할 수 있는 좋은 방안이 될 수 있음. 하지만 데이터 보안 및 개인정보 이슈에 대한 대책 마련이 선행되어야 함
     * 기술 문서 분야의 스타트업이나 이니셔티브에서 임베딩 기술을 적극 도입해 볼 만함. 기존 문서 관리 솔루션과의 차별화된 기능을 제공하고 검색, 추천 등에서 보다 인간 친화적인 경험을 제공할 수 있을 것
     * 임베딩을 문서 요약, 번역, 토픽 분류 등에 활용하는 연구도 기대해 볼 만함. 최신 자연어 처리 기술과 임베딩을 결합하면 기술 문서 작성과 관리에 혁신을 가져올 수 있을 것

   기술작가 ㅎ

   자연어 처리 쪽에서 활용되는 텍스트 임베딩과 훈련과정을 보면 인간이 문법을 거의 모르는 상태에서 언어를 습득하고 구사할 때의 과정과 정말 유사하다는 생각이 들더라구요.
   본문에서 말하는 것 처럼 많은 잠재력이 있다고 생각합니다.

        Hacker News 의견

     * 현대 AI에서 임베딩이 인간에게 더 많은 힘을 주는 유일한 요소로 흥미로움. 이는 스티브 잡스가 말한 ""우리의 마음을 위한 자전거""와 같으며, 지능 증폭을 의미함. 컴퓨터 사용성에서 가장 큰 발전은 빠르고 보편적인 로컬 검색의 도입이었음. Firefox의 ""페이지에서 찾기"" 기능을 자주 사용하며, 검색과 grep을 매일 사용함. 임베딩은 실제로 유용한 퍼지 검색을 제공하여 검색의 가장 큰 약점을 해결할 가능성이 있음
     * 문서 사이트 소유자로서, REST API 또는 잘 알려진 URI를 통해 임베딩을 자유롭게 제공하는 것을 고려해야 할지 궁금함. 어떤 임베딩 모델을 사용했는지 명확히 해야 하며, 기술 문서에 적합한 임베딩 모델이 있는지에 대한 질문이 있음
     * 환경에 대한 우려가 있지만, AI 사용을 줄이는 것이 기후 문제를 해결할 수 있다는 대중의 의견은 잘못된 것이라고 생각함. 예를 들어, Google Maps를 금지하면 잘못된 경로를 선택하게 되어 더 많은 연료를 소비하게 됨. 임베딩을 사용한 문서 생성도 마찬가지로, 컴퓨팅 자원을 사용하는 것이 더 효율적임
     * 임베딩을 사용하여 웹 앱에서 활용하는 방법에 대한 재미있는 경험을 공유함. 문서화를 통해 프로덕션에서 임베딩을 사용하는 방법을 설명함
     * 임베딩이 입력 문자열의 모든 것을 나타내어 목표가 없는 것처럼 보임. 특정 응용 프로그램을 위한 임베딩의 차원 축소 방법에 대한 질문이 있음. 예를 들어, 기술 지원 대화를 찾는 시스템을 구축할 때 대화의 내용만을 나타내는 임베딩을 도출하는 방법에 대한 궁금증이 있음
     * 벡터 임베딩은 문서의 고유한 요약으로, 해시 코드와 유사함. 임베딩 생성에 대한 보편적인 표준이 있으면 좋겠지만, AI 모델마다 다르기 때문에 해시 코드와 같은 ""영구성""을 가질 수 없음. 코사인 유사성 같은 알고리즘을 데이터베이스와 정보 처리 앱에서 활용할 수 있는 방법이 많을 것 같음
     * 임베딩이 과소평가되고 있다고 생각함. 정보 검색/발견 분야가 여전히 키워드 기반 발견을 사용하고 있으며, 현대 도구인 의미 기반 발견을 수용하지 않고 있음. 문장을 벡터 임베딩으로 변환하고 k-means 클러스터링을 적용하여 ChatGPT로 요약하는 방법을 사용하여 시간을 절약함
     * 기술 작가들이 임베딩의 유용성을 과소평가하고 있다고 제안함. 머신러닝 실무자들은 임베딩을 과소평가하지 않음
     * OpenAI 임베딩 모델이 8191/8192 토큰을 지원하는지에 대한 질문이 있음. 토큰 크기로 승자를 선언하는 것은 오해의 소지가 있으며, 교차 언어 지원과 정밀도 같은 더 중요한 요소가 있음
     * 임베딩이 과대평가되었다고 생각하며, 이는 많은 사람들이 기대했던 만능 해결책이 아님. BM25 같은 간단한 방법을 완전히 대체하지 않으며, 제한된 의미 이해만을 제공함. 높은 기대가 임베딩이 정확히 원하는 것을 검색할 것이라는 믿음을 주지만, 결과를 면밀히 검토하지 않으면 불일치를 알아차리기 어려움
"
"https://news.hada.io/topic?id=17512","Steam 게임, 스토어 페이지에 커널 레벨 안티치트 공개 필요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Steam 게임, 스토어 페이지에 커널 레벨 안티치트 공개 필요

Steam 게임의 커널 수준 안티 치트 공개 의무화

     * Valve는 Steam 게임의 커널 수준 안티 치트 사용을 스토어 페이지에 명확히 기재하도록 하는 변경 사항을 발표함
     * 개발자들은 게임에 사용되는 안티 치트 기술에 대한 정보를 플레이어에게 제공하는 방법을 찾고 있으며, 플레이어들은 게임에 사용되는 안티 치트 서비스와 추가 소프트웨어 설치에 대한 투명성을 요구하고 있음
     * 기존 Steam 게임을 포함하여 모든 게임에 적용되며, 출시 과정의 일부로 포함됨
     * 커널 수준 안티 치트에 대해서만 강제되며, 클라이언트나 서버 측 안티 치트는 선택 사항임

GN⁺의 정리

     * 이 기사는 Steam 게임의 안티 치트 기술에 대한 투명성을 높이기 위한 Valve의 새로운 정책을 다루고 있음
     * 커널 수준 안티 치트는 시스템 깊숙이 작동하여 보안 문제를 일으킬 수 있어, 이에 대한 명확한 정보 제공이 중요함
     * 이 정책은 플레이어들에게 게임 선택 시 중요한 정보를 제공하여, 보다 안전한 게임 환경을 조성할 수 있음
     * 비슷한 기능을 가진 다른 플랫폼으로는 GOG 등이 있으며, 이들은 DRM 없는 게임 제공으로 주목받고 있음

        Hacker News 의견

     * Crowdstrike 사건 이후 비핵심 애플리케이션에 대한 서드파티 커널 드라이버는 피해야 한다는 의견이 있음
          + 게임 퍼블리셔들이 오랫동안 문제를 일으켜 왔으며, Genshin Impact의 안티치트가 악성코드 캠페인에 사용되었음
          + Rockstar는 Steam Deck과의 호환성 문제를 Valve의 잘못으로 오도하려 했음
     * 안티치트 문제는 복잡하고 오래된 문제임
          + 안티치트를 실행하지 않는 것은 유효한 선택이지만, 이는 소수의 선택임
          + 온라인 멀티플레이어 게임은 큰 사업이며, 서버 측에서 완전히 해결할 수 없음
          + 엘리트 플레이어들은 통계적 이상치로 간주할 수 없으며, 이들과의 협력은 중요함
          + 커널 수준의 안티치트 DRM은 최악의 해결책이지만, 다른 해결책들보다 나음
     * 많은 게이머들이 침해적인 안티치트에 대해 신경 쓰지 않음
          + CounterStrike 플레이어들은 커널 수준의 안티치트를 요구하고 있음
          + 소비자 정보 제공은 항상 긍정적임
     * GTA V를 재설치했을 때 루트킷 설치가 필요하다는 점에 놀랐음
          + 싱글 플레이어 게임에서도 커널 확장이 필요하다는 점이 우스꽝스러움
          + 해적판이 더 나은 경험일 수 있음
     * 커널 수준의 안티치트는 충분하지 않음
          + 클라이언트 입력의 신뢰성과 출처가 중요함
          + 전체 OS 설정과 사용자 입력의 출처가 필요함
          + 랭크 게임을 위해서는 추가적인 장비가 필요함
     * 개발자들이 서버 측을 제대로 구현할 필요가 있음
     * 멀티플레이어 게임 생태계의 두 가지 트렌드
          + 비용 절감을 위한 P2P 서버 사용 증가
          + 소비자 측 조작으로 위협받을 수 있는 수익 모델 사용 증가
     * 게임이 루트 권한을 요청하는 경우를 본 적이 없음
          + Linux에서는 문제가 되지 않음
     * 안티치트가 커널 모듈인지에 대한 질문
          + sysctl 변수를 사용하여 설치를 방지할 수 있음
          + 게임 설치 프로그램이 권한을 요구할 때 모듈 설치를 시도할 수 있음
          + 파일 시스템의 체크섬 스냅샷을 설치하여 시스템 파일 변조 여부를 확인할 수 있음
"
"https://news.hada.io/topic?id=17535","Postgres에서 PDF 전문 검색하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Postgres에서 PDF 전문 검색하기

     * pgPDF는 PDF 파일을 SQL로 읽을 수 있는 Postgres 확장임(poppler의 래퍼)
       SELECT pdf_read_file('/path/file.pdf') → text
     * 데이터 저장 방식
          + PDF 파일 내용은 텍스트(txt)와 바이너리(bytes) 형태로 테이블에 저장함
          + 각 PDF의 tsvector도 저장함. tsvector는 문서를 텍스트 검색에 최적화된 형태로 나타냄
          + tsvector 생성은 비용이 크지만 1회만 수행하면 되므로 생성(generated) 컬럼에 저장하는 것이 좋음
          + FTS 쿼리는 txt 컬럼이 아닌 tsvector에 대해 수행됨
     * FTS 쿼리 실행하기
          + FTS는 일반적으로 tsvector @@ tsquery 연산자를 사용함
          + tsquery는 tsvector에 대한 매칭 필터를 정의함
          + 이 외에도 다양한 종류의 tsquery가 있음: plainto_tsquery, phraseto_tsquery, websearch_to_tsquery
          + SELECT name FROM pdfs WHERE tsvec_en @@ to_tsquery('english', 'Postgres & Sharding');
     * tsvector 컬럼에 GIN 인덱스를 생성하여 성능을 개선할 수 있음

   오.....
"
"https://news.hada.io/topic?id=17475","Flutter를 Flock으로 포크합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Flutter를 Flock으로 포크합니다

     * Flutter는 모바일 UI 툴킷으로 시작하여 웹, Mac, Windows, Linux로 확장되었음. 그러나 팀의 규모는 크게 늘어나지 않았음
     * Flock은 Flutter의 포크로, 개발 가속화를 위해 만들어졌음

Flutter 팀의 인력 부족

     * Flutter 개발자는 약 100만 명으로 추정되나, Flutter 팀은 약 50명에 불과함. 이는 개발자 2만 명당 Flutter 팀원 1명 꼴
     * Google의 전사적 이슈로 2023년경 Flutter 팀 인력이 동결되었고, 2024년 초에는 소규모 감원이 있었음
     * Google이 AI에 주력하면서 Flutter 팀은 데스크톱 플랫폼을 우선순위에서 밀려났음. 현재 6개 지원 플랫폼 중 3개가 유지보수 모드

제한된 인력의 비용

     * 많은 티켓이 장기간 처리되지 않고 있음. 처리되더라도 오래 걸림
     * 오래된 티켓을 조사할 때, 티켓을 제출한 사람에게 추가 정보를 요청하는 경우가 많음. 하지만 시간이 너무 오래 지나 정보를 제공하기 어려움
     * 심각한 버그로 릴리스가 막힌 경우, Flutter 팀이 2년 동안 버그를 해결하지 않으면 Flutter 사용을 중단할 수밖에 없음

Flutter 팀과 직접 협력하지 않는 이유

     * Flutter 팀은 외부 기여를 환영한다고 홍보하지만, 실제로는 많은 개발자가 좌절감을 느낌
     * 리뷰할 인력이 부족하여 리뷰나 업데이트에 오랜 시간이 걸림
     * 모든 것이 너무 오래 걸리고, 중요하지 않은 세부 사항에 대해 이야기하는 경향이 있음
     * 커뮤니케이션 방식이 획일적이라 다양한 성격의 사람들과 맞지 않음

Flock 소개

     * Flutter의 포크인 Flock은 ""Flutter+""로 설명됨. Flutter 커뮤니티를 분리하려는 것이 아님
     * Flock은 Flutter와 동기화를 유지하면서 Flutter 팀이 구현하지 못하거나 원하지 않는 버그 수정과 인기 있는 커뮤니티 기능을 추가할 예정
     * Flock은 더 큰 PR 리뷰 팀을 모집하고, 기여를 촉진할 준비가 된 리뷰어를 모집하며, 정책을 최적화하고, 기여의 성공을 사회적으로 홍보할 계획

참여 방법

     * Flock의 첫 번째 단계는 Flutter를 미러링하는 것. 앱을 Flock으로 빌드해 보는 것이 도움이 될 것
     * Flock은 수십 명의 리뷰어가 필요함. Flutter와 유사한 품질 기준을 적용하되, 기여를 용인하는 것이 아니라 촉진하는 것을 목표로 함
     * Flock의 특정 영역을 이끌 전문가도 필요함 (예: Flutter Tool 리드, 플랫폼별 엔진 리드)

GN⁺의 정리

     * Flutter의 인력 부족 문제를 해결하기 위해 Flock이라는 포크가 제안되었음
     * Flock은 Flutter의 버그를 신속히 수정하고 커뮤니티가 원하는 기능을 추가함으로써 Flutter 개발자들이 겪는 어려움을 해소하는 데 도움이 될 것으로 기대됨
     * Flock의 성공 여부는 커뮤니티의 지원에 달려 있음. 많은 분들의 참여를 기대함
     * 다만, Flutter와의 호환성 유지가 관건이 될 것임. Flutter가 Flock의 변경 사항을 수용하지 않을 경우 향후 분기가 발생할 수 있음

   이 뉴스를 이제야 보다니..
   구글에서 flutter 엄청 밀어주는 줄 알았는데.. 아니였군요.. 이런.. 이런..

   Flock으로 전환하셨나요?

   이런 경우와 유사한 시도가 전에도 있었을까요? 저는 처음 보는 케이스라 신기하네요

   종종 있었습니다.
     * 오픈오피스 vs 리브레오피스
     * MySQL vs Mariadb
     * ffmpeg vs libav
     * node.js vs io.js

   여기서 리브레오피스가 가장 비슷한거 같아요. 포크이유나, 원본보다 더 성공한 사례로도요.
   io.js는 통합된 좋은 사례같습니다. node.js에 다시 통합되었습니다.

   https://blog.outsider.ne.kr/1102

   궁금했는데 감사합니다!

   유튜브에서 Flutter라고 미래라고 하는 사람 많던데...

        Hacker News 의견

     * Flutter 팀의 규모는 약 50명으로 추정되며, 이는 1,000,000명의 Flutter 개발자를 지원하기에는 부족한 인원임.
          + Python의 경우, 세계적으로 인기 있는 언어임에도 불구하고 50명의 핵심 개발자만이 활동 중이며, 대부분이 풀타임으로 일하지 않음.
     * Flock은 Flutter의 포크가 아닌 ""Flutter+""로 설명되며, Flutter와 호환성을 유지할 계획임.
          + 커뮤니티 분열과 호환되지 않는 버전이 생길 것이라는 우려가 있었으나, 이는 해결된 문제임.
          + Flock은 Flutter Version Manager(FVM)를 통해 간단히 설정 가능함.
     * Flutter는 Qt 이후로 UI 개발에 있어 최고의 도구로 평가받고 있으며, 많은 앱이 Flutter로 작성되었음.
          + 그러나 일부 버그가 오랜 기간 동안 수정되지 않아 개발자들에게 좌절감을 줌.
          + 특히 데스크톱 및 웹 앱에서 Flutter를 사용하는 CTO와 개발자들이 이러한 문제를 느끼고 있음.
     * Flock의 아이디어는 좋지만, 커뮤니티 참여가 중요하며, 프로젝트의 성공을 기원함.
          + 외부 기여를 수용하는 것이 중요하며, 외부 개발자들이 버그 리포트를 조사하는 것이 포크보다 쉬울 수 있음.
     * Flutter 팀의 외부 기여 수용은 10년 동안 1,500명의 개발자로부터 기여를 받았으며, 이는 높은 수치임.
          + 외부 기여를 사랑한다는 Flutter의 주장을 뒷받침함.
     * Flutter 창립자는 Flutter가 훌륭하지만, 오랜 기간 수정되지 않은 버그가 존재한다고 언급함.
          + 포크가 Flutter와 점점 더 달라질 수 있으며, Google 버전과의 차이를 유지하는 것이 어려울 수 있음.
          + 커뮤니티가 Google과 협력하여 PR 검토 속도를 개선하는 것이 바람직함.
     * Flutter에 의존하는 사람들은 지금 변화하는 것이 더 나을 수 있으며, 프로젝트의 성공을 기원함.
          + Flock의 변경 사항을 명확히 나열하는 것이 중요함.
     * .NET 팀은 50명 미만의 인원으로 수십억 대의 기기에 제품을 제공했으며, GitHub에서 문제를 제기하면 당일 답변을 제공했음.
          + 개발자 수가 많다고 해서 항상 더 나은 것은 아님.
     * ""Flutter Foundation""이라는 이름은 Google의 승인을 받지 않았을 가능성이 높으며, ""Flutter"" 상표 사용에 의문이 제기됨.
          + Flock이 포크의 이름이라면, 왜 ""Flutter Foundation""이라고 불리는지 혼란스러움.
"
"https://news.hada.io/topic?id=17505","Tesla, 자동차의 커넥터 표준인 Low-Voltage Connector Standard (LVCS) 제안 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Tesla, 자동차의 커넥터 표준인 Low-Voltage Connector Standard (LVCS) 제안

     * 지난 20년 동안 자동차 산업 전반에 걸쳐 전자 장치의 비용과 복잡성이 두 배로 증가함
     * 오늘날 하나의 차량에는 일반적으로 200개 이상의 연결부가 필요하며, 새로운 차량에 필요한 전기 커넥터와 유형의 수는 계속 증가하고 있음
     * Tesla는 지속 가능한 에너지로의 전환을 가속화하기 위해 모든 차량의 제조 공정과 전기 연결 요구 사항을 단순화하고 있음
     * Low-Voltage Connector Standard (LVCS) 를 구현하여 필요한 커넥터 유형을 6개로 줄임
     * 이 6개의 장치 커넥터는 일반적인 전기 장치 애플리케이션의 90% 이상에 대한 전력 및 신호 요구 사항을 충족하도록 설계됨
     * 이러한 표준화는 운영 효율성, 비용 절감 및 제조 자동화를 가능하게 함
     * LVCS의 특징
          + Cybertruck에 사용되는 것과 동일한 48V 전자 아키텍처를 기반으로 함
          + 48V 작동을 위한 간격 증가 요구 사항을 충족하며 업계 표준 연한 파란색으로 제공됨
          + 48V 아키텍처는 동일한 양의 전력을 공급하는 데 필요한 전류의 1/4만 필요로 하는 최적의 장기 선택임
          + 신뢰할 수 있는 자율 주행 차량을 지원할 수 있게 설계되었으며, 견고한 단일 와이어 실링과 독립적인 2차 잠금 메커니즘을 활용하면서 패키지 크기를 최소화함
     * Tesla는 모든 장치 공급업체와 자동차 제조업체가 이 이니셔티브에 동참할 것을 초대함

GN⁺의 의견

     * 자동차 전자 장치의 표준화는 제조 효율성과 비용 절감을 위해 필수적임. Tesla의 LVCS 이니셔티브는 이러한 노력에 있어 중요한 진전으로 보임
     * 48V 아키텍처로의 전환은 전기 자동차와 자율 주행 차량의 발전에 큰 영향을 미칠 것임. 하지만 업계 전반에 걸쳐 이를 채택하려면 시간이 걸릴 수 있음
     * Tesla가 LVCS 표준을 개방하고 다른 제조업체의 참여를 장려하는 것은 긍정적인 신호임. 하지만 경쟁사들이 이를 수용할지는 미지수임
     * 전기 자동차 시장이 성장함에 따라 배터리와 전자 장치의 표준화 필요성이 높아지고 있음. Tesla 외에도 다른 주요 제조업체들이 유사한 이니셔티브를 추진할 것으로 예상됨
     * LVCS가 성공하려면 부품 공급업체와 긴밀히 협력하고, 업계 전반의 피드백을 수렴하는 것이 중요할 것임. 장기적으로는 국제 표준으로 발전할 가능성도 있음

        Hacker News 의견

     * AMP 자동차 커넥터와 유사한 커넥터 사용은 수리 시 잘못 연결될 위험이 있음. 특히 자동차에서는 잘못 연결될 가능성이 높음
          + 잘못 연결될 수 있는 경우, 실제로 잘못 연결될 가능성이 높음
          + AAA가 Jeep에 배터리를 거꾸로 넣어 차량 전자 장치를 교체해야 했던 경험이 있음
     * Tesla는 48V 아키텍처와 Ethernet 기반 통신을 도입하여 자동차 배선 문제를 크게 단순화함
          + Cybertruck의 분해 영상을 보면 F150과 비교하여 배선이 훨씬 간단함
     * 기존의 48V 커넥터(MX150, MCON, PP 등)보다 Tesla의 커넥터가 더 나은 점이 무엇인지 의문임
          + 단순히 커넥터 수를 줄인 것만으로는 설명되지 않음
     * 링크된 기사는 LVCS 커넥터가 내부 전기 배선용임을 명확히 함
          + Tesla의 충전 표준(SAE J3400)은 별도로 참고할 필요가 있음
     * 전기차의 다양한 구성 요소 간의 전기 연결을 위한 커넥터임을 이해함
          + 전기차를 구매할 경우 200개 이상의 동글을 휴대할 필요가 없음을 알게 되어 기쁨
     * 모터스포츠 세계에서는 두 가지 커넥터(DT 시리즈와 AS 시리즈)로 수렴됨
          + DT 시리즈는 플라스틱으로 만들어져 매우 견고함
          + AS 시리즈는 금속으로 만들어져 극도로 견고함
     * Tesla는 모든 장치 공급업체와 차량 제조업체가 이 이니셔티브에 참여하기를 초대함
          + Tesla는 이 커넥터를 사실상의 표준으로 만들고자 함
     * 48V 아키텍처는 동일한 전력을 전달하는 데 필요한 전류가 1/4로 줄어들어 장기적으로 최적의 선택임
          + 96V와 같은 더 높은 전압보다 48V가 더 나은 이유가 궁금함
     * LVCS가 산업 표준의 연한 파란색으로 제공되는 이유가 궁금함
     * Molex와 다른 회사들이 이 흐름에 동참할 가능성이 있음
          + 전기차는 내연기관보다 더 많은 커넥터와 고급 차량 엔터테인먼트를 갖추고 있어 수익성이 높음
          + 중국 OEM들은 R&D 비용을 부담하게 한 후 부품을 역설계하고 공급망에 통합할 가능성이 있음
          + 수요가 있는 곳에서 경쟁하기 위해 초기 진입이 가치가 있으며, OEM의 요구에 맞게 참조 디자인을 맞춤화할 수 있음
"
"https://news.hada.io/topic?id=17592","GitPod, Kubernetes를 떠나기로 결정 + GitPod Flex 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GitPod, Kubernetes를 떠나기로 결정 + GitPod Flex 발표

     * GitPod은 6년간 쿠버네티스를 사용해 ""원격 개발 환경 플랫폼""을 구축해 왔고, 1.5백만 사용자를 지원하며 매일 수천 개의 개발 환경을 제공 중
     * 그러나 쿠버네티스는 개발 환경 구축에 적합하지 않다는 것을 깨달음
     * 이것은 프로덕션 워크로드에 쿠버네티스를 쓸지/말지에 대한 이야기가 아니며, K8s에 애플리케이션을 배포하기 위한 개발자 경험을 만드는 방법에 대한 주제도 아님
       → 클라우드에서 개발 환경을 구축하는 방법(또는 하지 않는 방법)에 대한 이야기임

[개발 환경이 특별한 이유]

     * 상태가 많고 상호작용이 활발함
          + 노드 간에 이동할 수 없음
          + 많은 양의 소스 코드, 빌드 캐시, 도커 컨테이너, 테스트 데이터 등이 자주 변경되고 마이그레이션 비용이 높음
          + 프로덕션 서비스와 달리 개발자와 환경 간에 1대1 상호작용이 일어남
     * 개발자는 소스 코드와 변경 사항에 깊이 연관되어 있음
          + 소스 코드 변경 사항을 잃거나 시스템에 의해 차단되는 것을 좋아하지 않음
          + 개발 환경은 실패에 특히 민감함
     * 예측 불가능한 자원 사용 패턴을 가짐
          + 대부분의 시간 동안 CPU 대역폭이 많이 필요하지 않지만, 수백 ms 내에 여러 코어가 필요할 수 있음
          + 그보다 느리면 용납할 수 없는 지연과 무응답으로 나타남
     * 광범위한 권한과 기능이 필요함
          + 프로덕션 워크로드와 달리 루트 액세스와 패키지 다운로드/설치 능력이 필요함
          + 프로덕션 워크로드에서는 보안 문제가 되는 것들이 개발 환경에서는 예상되는 동작임 (루트 액세스, 확장된 네트워크 기능, 추가 파일시스템 마운트 등)
     * 이러한 특성 때문에 일반적인 애플리케이션 워크로드와 구분되며, 인프라 결정에 큰 영향을 줌

[현재 시스템: Kubernetes]

     * Gitpod 초기에는 쿠버네티스가 인프라로 이상적인 선택처럼 보였음
          + 확장성, 컨테이너 오케스트레이션, 풍부한 생태계 등이 클라우드 개발 환경에 대한 비전과 잘 맞았음
     * 그러나 규모가 커지고 사용자 기반이 증가하면서 보안과 상태 관리 측면에서 어려움을 겪음
          + 쿠버네티스는 잘 제어된 애플리케이션 워크로드를 실행하도록 설계되었지, 다루기 힘든 개발 환경을 위한 것이 아님
     * 대규모로 쿠버네티스를 관리하는 것은 복잡함
          + GKE, EKS 같은 관리형 서비스가 일부 문제를 완화해주지만 그만의 제약과 한계가 있음
     * CDE를 운영하려는 많은 팀이 쿠버네티스의 복잡성을 과소평가하는 경향이 있음
          + 이는 이전의 자체 관리형 Gitpod 제품에 상당한 지원 부하로 이어짐

자원 관리의 어려움

     * CPU, 메모리 할당이 가장 큰 난제
     * 노드에서 환경을 공유하는 것은 매력적이지만, 실제로는 noisy neighbor 효과가 크게 나타남
     * CPU 문제
          + 개발 환경은 CPU가 많이 필요하지 않다가도 순간적으로 많이 필요
          + CFS 기반 솔루션, 사용자 정의 컨트롤러 등을 실험했지만 예측이 어려움
          + 정적 CPU 제한을 써도 여러 프로세스가 경쟁하는 문제 발생
     * 메모리 관리
          + 고정 메모리를 할당하는 건 간단하지만 제한적
          + 오버부킹은 프로세스 종료로 이어질 수 있음
          + 스왑 공간이 도입되며 오버부킹 필요성은 다소 완화됨

스토리지 성능 최적화

     * IOPS, 지연 시간이 개발 환경 경험에 영향
     * 다양한 설정을 실험하며 속도, 안정성, 비용, 성능의 균형을 찾음
          + SSD RAID 0
          + EBS, 영구 디스크 등 블록 스토리지
          + PVC
     * 백업/복원은 비용이 많이 드는 작업

오토스케일링과 시작 시간 최적화

     * 시작 시간 최소화가 최우선 목표
     * 하나의 노드에서 여러 작업 공간을 실행하면 공유 캐시 때문에 시작 시간이 개선될 거라 생각했지만 그렇지 않았음
     * 쿠버네티스가 시작 시간에 하한선을 부과함
     * 스케일 아웃 방법의 진화
          + 고스트 작업 공간, 밸러스트 포드 등을 사용해 스케일 아웃 실험
          + 오토스케일러 플러그인 도입으로 확장 전략이 크게 개선됨
     * 피크 부하 대응을 위한 비례 오토스케일링
          + 비어있는 포드를 시작해 수요 급증에 신속히 대응
     * 이미지 풀 최적화를 위한 다양한 시도
          + 데몬셋 사전 풀, 레이어 재사용 최대화, 미리 구운 이미지, Stargazer와 지연 풀링, Registry-facade + IPFS

네트워킹 복잡성

     * 개발 환경 액세스 제어
          + 환경 간 완전히 격리되어야 함
          + 네트워크 정책이 도움이 되지만, 서비스 수가 많아지면 신뢰성 문제 발생
     * 네트워크 대역폭 공유
          + CNI가 네트워크 셰이핑을 지원하기도 하지만 또 다른 제어 대상

보안과 격리: 유연성과 보호의 균형

     * 사용자에게 유연성을 주면서 보안 환경을 제공하는 것이 가장 큰 도전
     * 사용자에게 루트 권한을 주는 것은 결함이 많음
     * 사용자 네임스페이스가 더 세밀한 해법
          + 파일 시스템 UID 변환, 마스킹된 proc 마운트, FUSE 지원, 네트워크 기능 제공, 도커 활성화
     * 사용자 네임스페이스 구현의 어려움
          + 성능 영향, 호환성 문제, 복잡성, 쿠버네티스 버전 대응

[Micro VM 실험]

     * 쿠버네티스의 한계를 느끼며 Firecracker, Cloud Hypervisor, QEMU 등 마이크로 VM(uVM) 기술을 중간 지점으로 탐색하기 시작함
     * 자원 격리 개선, 다른 워크로드(쿠버네티스 등)와의 호환성, 보안 강화를 기대하면서도 컨테이너화의 이점을 유지할 수 있을 거란 기대감이 있었음
     * 마이크로 VM의 장점
          + 클라우드 개발 환경에 대한 목표와 잘 부합하는 매력적인 이점들을 제공함
          + 자원 격리 향상: 오버부킹 능력은 떨어지지만 컨테이너 대비 자원 격리가 개선됨. 공유 커널 자원 경합이 사라져 개발 환경별 성능 예측 가능성이 높아짐
          + 메모리 스냅샷과 빠른 재개: Firecracker의 userfaultfd 기능은 메모리 스냅샷을 지원함. 이는 실행 중인 프로세스를 포함해 머신 전체를 거의 즉시 재개할 수 있게 해줌. 개발자 입장에선 환경 시작이 훨씬 빨라지고, 작업을 중단한 지점에서 바로 재개할 수 있음
          + 보안 경계 개선: uVM은 강력한 보안 경계 역할을 할 수 있어, 쿠버네티스에서 구현한 복잡한 사용자 네임스페이스 메커니즘이 불필요해짐. 이는 중첩된 컨테이너화(개발 환경 내에서 도커나 쿠버네티스 실행)를 포함해 더 광범위한 워크로드와 완전히 호환될 수 있음
     * 마이크로 VM의 어려움
          + 그러나 마이크로 VM 실험 결과 몇 가지 중대한 과제가 드러남
          + 오버헤드: 경량 VM이라도 uVM은 컨테이너보다 더 많은 오버헤드를 야기함. 성능과 자원 활용 모두에 영향을 미치는데, 이는 클라우드 개발 환경 플랫폼에서 중요한 고려사항임
          + 이미지 변환: OCI 이미지를 uVM에서 사용 가능한 파일 시스템으로 변환하려면 사용자 정의 솔루션이 필요함. 이미지 관리 파이프라인이 복잡해지고 시작 시간에 잠재적 영향을 줌
          + 기술별 제한사항
               o Firecracker: GPU 지원 부재(일부 개발 워크플로에 점점 더 중요해지고 있음), virtiofs 지원 부재(효율적인 파일 시스템 공유 옵션 제한)
               o Cloud Hypervisor: userfaultfd 지원 부재로 스냅샷과 복원 프로세스가 느려짐(uVM의 주요 장점 상쇄)
          + 데이터 이동 문제: uVM으로 인해 대용량 메모리 스냅샷을 다뤄야 해서 데이터 이동이 더 어려워짐. 스케줄링과 시작 시간 모두에 영향을 미치는데, 이는 클라우드 개발 환경 사용자 경험의 핵심 요소임
          + 스토리지 고려사항: 마이크로 VM에 EBS 볼륨을 연결하는 실험은 새로운 가능성을 열어주었지만 새로운 의문도 제기함
               o 영구 스토리지: 연결된 볼륨에 작업 공간 콘텐츠를 보관하면 S3에서 데이터를 반복적으로 가져올 필요가 없어져 시작 시간 개선과 네트워크 사용량 감소 기대
               o 성능 고려사항: 작업 공간 간에 높은 처리량의 볼륨을 공유하면 I/O 성능 개선이 기대되지만, 효과적인 할당량 구현, 지연 관리, 확장성 보장 등에 대한 우려도 제기됨
     * 마이크로 VM 실험의 교훈
          + 마이크로 VM이 최종적으로 주요 인프라 솔루션이 되진 않았지만, 실험을 통해 귀중한 통찰을 얻음
          + 개발 환경을 위한 전체 작업 공간 백업과 런타임 상태 일시 중단/재개 경험이 마음에 들었음
          + 처음으로 쿠버네티스에서 벗어나는 것을 고려하게 됨. KVM과 uVM을 포드에 통합하려는 노력 끝에 쿠버네티스 외부 옵션을 탐색하게 됨
          + 안정적인 시작 성능, 안정적인 작업 공간(데이터 손실 방지), 최적의 머신 활용이라는 세 가지를 모두 제공하기 위한 핵심 요소로 스토리지를 다시 한번 인식하게 됨

쿠버네티스는 개발 환경 플랫폼으로서 매우 도전적임

     * 앞서 언급했듯이, 개발 환경을 위해서는 개발 환경의 고유한 상태성을 존중하는 시스템이 필요함
     * 개발자가 생산성을 발휘하는 데 필요한 권한을 부여하면서도 안전한 경계를 보장해야 함
     * 이 모든 것을 운영 오버헤드를 낮게 유지하고 보안을 타협하지 않으면서 해내야 함
     * 오늘날 쿠버네티스로 이 모든 것을 달성하는 것은 가능하지만 상당한 비용이 듦
     * 애플리케이션 워크로드와 시스템 워크로드의 차이를 어려운 방식으로 배웠음
     * 쿠버네티스는 믿을 수 없을 정도로 훌륭함
     * 열정적인 커뮤니티의 지원을 받으며 진정으로 풍부한 생태계를 구축함
     * 애플리케이션 워크로드를 실행한다면 쿠버네티스는 여전히 좋은 선택임
     * 그러나 개발 환경과 같은 시스템 워크로드의 경우 쿠버네티스는 보안과 운영 오버헤드 측면에서 엄청난 도전을 안겨줌
     * 마이크로 VM과 명확한 자원 예산이 도움이 되지만, 비용이 더 지배적인 요인이 됨
     * 그래서 수년간 개발 환경을 쿠버네티스 플랫폼에 효과적으로 역설계하고 강제로 적용한 후, 한 걸음 물러서서 미래 개발 아키텍처가 어떤 모습이어야 할지 고민하게 됨
     * 2024년 1월, 이를 구축하기 시작해서, 10월에 Gitpod Flex를 출시함
     * 인터넷 규모에서 개발 환경을 안전하게 실행하기 위한 6년 이상의 엄청나게 어렵게 얻은 통찰력이 아키텍처 기반에 녹아들었음

개발 환경의 미래

     * Gitpod Flex에서는 쿠버네티스의 기본적인 측면, 즉 제어 이론의 자유로운 적용과 선언적 API를 이어받으면서 아키텍처를 단순화하고 보안 기반을 개선함
     * 쿠버네티스에 크게 영감을 받은 컨트롤 플레인을 사용하여 개발 환경을 오케스트레이션함
     * 개발 환경에 특화된 필요한 추상화 계층을 도입하고, 불필요한 인프라 복잡성을 대부분 제거함
     * 이 모든 것을 제로 트러스트 보안을 최우선으로 하면서 진행함
     * 이 새로운 아키텍처 덕분에 데브컨테이너를 원활하게 통합할 수 있게 됨
     * 또한 데스크톱에서 개발 환경을 실행할 수 있는 능력도 열림
     * 이제 쿠버네티스 플랫폼의 무거운 짐을 더 이상 지지 않아도 되므로, Gitpod Flex는 3분 이내에 자체 호스팅으로 배포할 수 있고, 원하는 수의 리전에 배포 가능
     * 이는 규정 준수에 대한 더 세밀한 제어와 조직 경계 및 도메인을 모델링할 때 더 큰 유연성을 제공함

   (원래는 다른 글이지만 같이 묶는게 좋을 것 같아서 함께 옮겨봅니다.)

Gitpod Flex

     * 제로 트러스트 개발 환경을 위한 첫번째 자동화 플랫폼
     * 노트북, 클라우드, 온프레미스에서 실행되도록 설계되었으며, 소스 코드, 데이터, 지적 재산을 사설 네트워크 내에 유지
     * 개발 환경부터 시작해 소프트웨어 개발 라이프사이클 자동화를 위한 빌딩 블록 제공
     * 자동화(Automations)
          + 저장소나 API를 통해 정의된 프로그래밍 가능한 작업과 서비스
          + 개발자 스스로 해결할 수 있도록 지원하고, 개발자 생산성 팀이 개발 환경 개선을 중앙 집중화할 수 있도록 도움
          + 단순 스크립트 실행 이상의 기능 제공
          + 데이터베이스 프로비저닝 및 시딩, 개발자 워크플로 맞춤화, 임시 클러스터 실행, LLM 기반 에이전트 워크플로 설정, 글로벌/지역 보안 및 규정 준수 중앙 집중 적용 등 가능
     * 제로 트러스트 환경(Zero-trust environments)
          + 모든 행위자와 서비스를 '결코 신뢰하지 않고 항상 검증'
          + 악의적 행위자 완전 차단, 공격 노출 영역 크게 축소, 맬웨어나 코드 유출 위험 감소
          + 지속적 평가 및 명시적 검증, 검증된 엔터프라이즈급 암호화, 세분화된 접근 제어, 네트워킹에 대한 완전한 제어, 완전한 감사 로그 포함
          + 소스 코드, 데이터, 지적 재산권을 사설 네트워크 내에 유지하는 것이 가장 중요
     * Gitpod Desktop
          + 로컬 개발 환경 표준화 및 자동화 가능
          + Apple Silicon부터 지원 시작
          + 지연 시간 제로화, 개발용 Docker Desktop의 더 빠르고 가벼우며 간단한 대체재, 로컬 컴퓨팅 활용한 비용 최적화, 클라우드나 엔드포인트 중단 대비한 재해 복구 지원 제공
     * Development Container 지원
          + Dev Container 사양을 완벽하게 통합
          + 기존 Dev Container 설정을 변경 없이 사용 가능
          + VS Code 및 기타 지원 도구와 호환성 제공
          + 로컬이나 클라우드에서 일관되게 작업 가능
          + Dev Container 표준 채택으로 개발 환경 정의, 공유, 관리가 더 쉬워짐

앞으로 10년간 소프트웨어 개발 자동화의 발판이 될 것

     * 우리가 개발 환경을 너무 좁게 생각해왔음
     * 개발환경은 IDE, 종속성, 도구 이상의 것으로 소프트웨어가 만들어지는 근본적인 공간
     * 코드 프로토타입 제작, 사람과 기계에 의한 형성, 테스트, 리팩토링, 컴파일, 패키징, 서명, 배포가 이뤄지는 곳
     * 개발 맥락, 워크플로, 통찰력에 대한 비할 데 없는 접근성 제공해 다른 개발 플랫폼과 차별화된 기능 제공
     * 제품의 비전
          + 지속적 통합(CI)이 개발 환경과 융합
          + 소프트웨어 개발의 시스템 기록(System of record) 역할
          + 차세대 개발자 도구를 위한 플랫폼
     * 단순히 코딩 관행 개선을 넘어 스타트업부터 포춘 50대 기업까지 앞으로 10년간 기업이 확장하고 성공할 수 있는 가장 빠르고 안전한 방법 구축

   보안 핑계로 가상데스크탑 8gb메모리 사양 , 강제 사용하게 하는 만드는 국내 기업들. 씁쓸하네

   쿠버네티스 잘하는 사람 구하기도 어려운데, 여기서 대안으로 제시하는 것들을 이해하고 시도하려는 사람들을 구하기는 더 어렵겠다는 생각이 드네요.

  Hacker News 의견

     * 개발자는 자신이 사용하는 개발용 기기를 소유해야 함. 일관된 환경이 필요하다면, 개발자가 자신의 기기를 소유하고 안정적인 VM 이미지를 제공받아야 함. 원격 호스트로 개발 환경을 옮기는 시도는 대부분 실패함. 개발자에게 적절한 하드웨어를 제공하는 것이 원격 자원보다 비용 효율적임. 로컬 스택 실행을 지원해야 하며, 이는 컨테이너를 통해 일관성을 유지하는 데 도움이 됨. 로컬 환경에 데이터를 생성하는 도구가 필요하며, 이는 자동화 가능함. 데이터 관리의 단점이 있지만, 대부분의 회사는 소스 코드보다 팀의 실행력이 중요함.
     * Kubernetes를 프로덕션 워크로드에 사용하는 것은 별개의 문제이며, 클라우드에서 개발 환경을 구축하는 방법에 대한 이야기임. Kubernetes의 복잡한 엔지니어링 트레이드오프에 대한 흥미로운 기사
     * Kubernetes의 문제점과 시도한 해결책을 설명하지만, 최종적으로 선택한 대안에 대한 설명이 부족함. Gitpod Flex라는 새로운 솔루션을 언급하지만, 이에 대한 정보가 별로 없음
     * Kubernetes는 상태가 없는 워크로드에 적합하지만, 상태가 있는 경우 LXC가 더 적합함. LXC는 K8S와 유사하게 클러스터화 가능하며, 데이터 평면에 도구를 노출함. VM과 유사하게 시스템 인스턴스를 제공하며, Docker 컨테이너와 유사한 성능을 가짐. 선언적 문법을 사용하며, Kubernetes 클러스터의 기초 계층으로 사용 가능함.
     * CI 솔루션을 구축하면서 Kubernetes를 선택한 것은 문제를 제대로 이해하지 못한 것임. 보안 목적으로 Firecracker와 같은 도구를 사용해야 함.
     * Kubernetes는 개발 환경에 적합하지 않음. 개발 환경은 항상 변화하는 상태에 있음. 클라우드 개발 환경의 필요성을 이해하지 못함. 컨테이너화된 앱의 목적은 팀 간 개발 환경 동기화를 피하는 것임.
     * Kubernetes 논문은 저지연 및 고지연 워크플로우 조합을 유일한 사용 사례로 언급함. Gitpod의 문제에 Kubernetes를 고려하는 것은 정당화하기 어려움.
     * Gitpod와 유사한 프로젝트를 진행했으며, Kubernetes를 대체하기 위해 마이크로 VM을 사용하는 것이 이해되지 않음. Kubernetes는 외부 컨테이너를 조정할 수 있으며, 마이크로 VM을 실행하는 데 사용될 수 있음. 가장 큰 문제는 스토리지 관련 문제임.
     * Kubernetes에서 개발 환경을 구축하는 것은 낭비적임. 제품이 고객의 인프라에 자체 호스팅되는 경우, 디버깅과 지원이 어려움. 네트워크, 메모리, 컴퓨트, 스토리지 문제를 엔지니어에게 노출하는 것이 효과적임. Kubernetes는 큰 팀에게는 업그레이드임.
"
"https://news.hada.io/topic?id=17573","속도, 확장성, 안정성: 25년간의 Google 데이터센터 네트워킹 진화 과정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              속도, 확장성, 안정성: 25년간의 Google 데이터센터 네트워킹 진화 과정

     * 구글의 네트워크는 하루아침에 만들어진 것이 아니며, 25년간의 엔지니어링 혁신과 이정표를 통해 현재의 5세대 Jupiter 데이터 센터 네트워크 아키텍처로 발전해 옴
     * 현재 Jupiter 네트워크는 13 페타비트초의 양방향 대역폭으로 확장 가능함. 이는 지구상의 모든 80억 명이 동시에 화상 통화(@1.5Mb/s)를 할 수 있는 수준

주요 원칙들

     * 뭐든 어디든: 구글의 데이터 센터 네트워크는 대규모 작업을 같은 네트워크 패브릭 내 10만 개 이상의 서버 중 어디에든 배치할 수 있도록 지원함. 이 같은 규모는 내부 및 외부 워크로드에 대한 애플리케이션 성능을 향상시키고 내부 단편화를 제거함
     * 예측 가능하고 낮은 지연 시간: 대역폭 헤드룸을 프로비저닝하고, 99.999%의 네트워크 가용성을 유지하며, 엔드 호스트와 패브릭 협력을 통해 정체를 사전에 관리함으로써 일관된 성능과 꼬리 지연 시간 최소화를 우선시 함
     * 소프트웨어 정의 및 시스템 중심: 유연성과 민첩성을 위해 소프트웨어 정의 네트워킹(SDN)을 활용하여 글로벌 네트워크에서 2주마다 수십 가지 새로운 기능을 검증하고 전 세계적으로 릴리스함
     * 점진적 진화 및 동적 토폴로지: 점진적 진화는 네트워크를 전체적으로 중단하지 않고 세부적으로 새로 고칠 수 있도록 도와주며, 동적 토폴로지는 변화하는 워크로드 요구 사항에 지속적으로 적응할 수 있도록 도움. 광 회로 스위칭과 SDN의 조합은 물리적 업그레이드와 단일 패브릭에서 여러 하드웨어 세대를 지원하는 끊임없이 진화하는 이기종 네트워크를 지원함
     * 트래픽 엔지니어링 및 애플리케이션 중심 QoS: 트래픽 흐름을 최적화하고 서비스 품질을 보장하는 것은 각 애플리케이션의 요구 사항에 맞게 네트워크를 맞춤 설정하는 데 도움 됨
     * 구글의 자체 SDN Jupiter 네트워크는 이전 세대 대비 50배 이상의 안정성을 제공함

진화의 역사

  2015년 - 최초의 페타비트 네트워크 Jupiter

     * 구글은 상용 스위치 실리콘, Clos 토폴로지 및 소프트웨어 정의 네트워킹(SDN)을 활용하여 Jupiter 데이터 센터 네트워크가 1.3 Pb/s의 총 대역폭으로 확장된다는 것을 보여줌
     * 당시 구글 데이터 센터 하나의 이 데이터 전송 속도는 글로벌 인터넷의 예상 총 IP 트래픽 데이터 속도보다 더 많았음

  2022년 - 6 페타비트초 지원

     * 구글은 Jupiter 네트워크가 광 회로 스위칭(OCS), 파장 분할 다중화(WDM) 및 고도로 확장 가능한 Orion SDN 컨트롤러의 심층 통합을 통해 6Pb/s 이상으로 확장된다고 발표함
     * 이러한 기술은 점진적인 네트워크 구축, 향상된 성능, 비용 절감, 전력 소비 감소, 동적 트래픽 관리 및 원활한 업그레이드를 포함한 다양한 발전을 가능케 함

  2023년 - 13 페타비트초 네트워크

     * 구글은 네트워크 코어에서 기본 400Gb/s 링크 속도를 지원하도록 Jupiter를 더욱 향상시킴
     * Jupiter 네트워크의 기본 구성 요소(집계 블록이라고 함)는 이제 엔드 호스트와 데이터 센터의 나머지 부분에 대해 400Gb/s 양방향 논블로킹 대역폭을 지원하는 512개의 포트로 구성됨
     * 총 양방향 대역폭 64*204.8 Tb/s = 13.1 Pb/s을 위해 64개의 이러한 블록을 지원함
     * 이 기술은 1년 이상 구글의 프로덕션 데이터 센터에 전력을 공급하고 있으며 인공 지능, 기계 학습, 웹 검색 및 기타 데이터 집약적 애플리케이션의 급속한 발전을 주도하고 있음

  2024년 이후 - AI 시대의 극한 네트워킹

     * 구글은 향후 AI를 지원할 차세대 네트워크 인프라에 대한 방향을 이미 설정하고 있음
     * NVIDIA ConnectX-7 네트워킹을 특징으로 하는 차세대 GPU 기반 A3 울트라 VM을 위한 네트워킹 인프라 요구 사항에 대해 작업 중
     * 이는 RoCE(RDMA over converged ethernet)를 통해 GPU 간 트래픽에 대해 서버당 논블로킹 3.2 Tbps를 지원함
     * NVIDIA GB200 NVL72에 기반한 미래 제품에 대한 작업도 진행 중

   향후 수년간 포트/네트워크 전반 대역폭과 규모의 유의미한 발전, 엔드호스트 통합 강화, 실시간 토폴로지 엔지니어링, 컴퓨팅/스토리지 스택과의 심층 통합, 호스트 기반 로드밸런싱 개선 등을 통해 변혁적 애플리케이션과 서비스를 지원할 예정
"
"https://news.hada.io/topic?id=17559","스트라이프에서의 근무 경험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             스트라이프에서의 근무 경험

Stripe를 떠나며

     * 이야기를 나누고자 하는 이유: Stripe에서의 경험을 공유함으로써 비슷한 고민을 가진 사람들에게 도움이 되고자 함.
     * Stripe 입사 전: 인터뷰 준비 과정에서의 긴장감과 Stripe에 대한 높은 기대감. 인터뷰에서의 실수와 그로 인한 좌절감.
     * Stripe에서의 초기 경험: JS Infra 팀의 첫 번째 멤버로서의 시작. 프로젝트를 찾기 전까지의 어려움과 글쓰기에 대한 부담감.
     * 첫 번째 큰 프로젝트: Dashboard 개발을 새로운 JS 번들러로 마이그레이션하여 성공을 거둠. 그러나 커뮤니케이션과 프로젝트 관리에 대한 피드백으로 인해 부분적으로 기대에 미치지 못함.
     * 새로운 매니저와의 경험: 새로운 매니저와의 취약성 공유를 통해 팀원들과 더 깊은 관계를 형성함.
     * 우울증과의 싸움: 일과 삶에서의 동기 부족과 우울증. 팀의 지원을 받으며 휴식을 취하고 다시 일에 복귀함.
     * 결정의 순간: 반복되는 사이클을 깨고 새로운 길을 찾기 위해 Stripe를 떠나기로 결심함.

GN⁺의 정리

     * 이 글은 Stripe에서의 개인적인 경험을 통해 진솔한 이야기를 나누고자 하는 목적을 가지고 있음.
     * 직장에서의 성공과 실패, 그리고 개인적인 성장 과정을 솔직하게 공유함으로써 비슷한 고민을 가진 사람들에게 위로와 용기를 줄 수 있음.
     * 기술 업계에서의 높은 기대감과 압박 속에서 개인의 정신 건강을 돌보는 것이 얼마나 중요한지를 일깨워 줌.
     * 비슷한 경험을 가진 사람들에게는 이 글이 공감과 위로를 줄 수 있으며, Stripe와 같은 기업에서의 경험을 통해 얻을 수 있는 교훈을 제공함.

        Hacker News 의견

     * 한 팀원이 회의에서 자신을 조금 더 솔직하게 소개하자는 제안을 받았음. 이로 인해 불안과 흥분이 동시에 느껴졌고, 개인적인 경험을 공유했음. 하지만 이런 강요된 그룹 치료는 원치 않음. 회사와의 관계는 업무 시간과 급여로 충분하다고 생각함.
     * 대기업에서 일하는 것은 개인의 성과가 큰 영향을 미치지 못하는 상황을 경험하게 함. 끝없는 업무와 의미 없는 마감일로 인해 번아웃을 경험했음. 스타트업으로 이직 후 삶이 나아졌음. 사회에 기여하는 일을 찾는 것이 중요하다고 생각함.
     * 대기업에서의 기대가 비현실적이었다고 생각함. 영웅처럼 칭찬받기를 기대했지만, 현실은 그렇지 않음. 좋은 평가를 받기 위해 필요한 만큼만 일하는 것이 더 나음. 좋은 아이디어가 있다면 상위 관리자와 협력하여 공공 회의에서 발표하는 것이 좋음.
     * 블로그를 읽고 불안과 피로를 느꼈음. 작성자가 지나치게 타인에게 맞추려는 경향이 있다고 생각함. 하지만 좋은 사람이라는 점은 칭찬할 만함.
     * 젊은 이상주의자들이 회사에서 오래 버티지 못하는 경우가 많음. 성과 평가가 개인을 정의하지 않으며, 어느 정도의 무관심이 필요함.
     * ""10% 더 솔직해지기""에 대한 의견이 많음. 회사와의 관계는 업무 시간과 급여로 충분하다는 의견이 있음. 하지만 인간관계를 자동으로 배제하는 것은 손해일 수 있음.
     * 번아웃의 증상은 모든 것에 의미를 부여하려는 경향에서 비롯됨. 모든 것이 중요할 필요는 없으며, 중요한 것에만 집중하는 것이 필요함. 일상에서 의미를 찾는 것이 중요함.
     * 정신 건강이 무너지면 다른 모든 것이 무의미해짐. 정신 건강을 우선시하는 것이 중요함. 수면이 가장 중요한 건강 요소임.
     * ""기대에 부분적으로 부합""하는 평가가 더 많은 일을 요구하기 위한 조작이라고 생각함. 고성장 기술 회사에서 흔히 발생하는 일임.
     * 의미 있는 일을 정의하는 방법을 재정립하는 것이 중요함. 다른 사람의 의견을 너무 개인적으로 받아들이지 말고, 자신의 일에 집중하는 것이 중요함.
"
"https://news.hada.io/topic?id=17479","기술 업계의 거시적 트렌드 2024.10 by Thoughtworks","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 기술 업계의 거시적 트렌드 2024.10 by Thoughtworks

AI의 성장하는 영향력

     * AI, 특히 GenAI는 요즘의 기술 대화에서 큰 역할을 하며 중요한 부분을 차지함
          + AI와 GenAI가 소프트웨어 전달 생태계의 모든 단계에 영향을 미치고 있음
     * 코딩 어시스턴트가 가장 주목받고 있으며 일반적으로 가장 성숙한 단계에 있음
          + 이러한 도구의 유용성 증가로 소프트웨어 품질을 지원하는 엔지니어링 엄격성을 유지 또는 향상시키면서 AI가 제공하는 이점을 활용하기 위해 소프트웨어 전달 방식을 재평가하게 됨
          + GitHub Copilot과 Cursor와 같은 개인용 도구나 Haiven과 같은 팀 중심 도구 등 이 분야의 지속적인 혁신이 예상됨
          + AI를 사용하거나 AI 애플리케이션 생성을 지원하는 (또는 둘 다) 도구가 폭발적으로 증가하고 있음
     * 이러한 도구가 도입되는 속도는 예전에 Javascript 도구의 속도와 수량을 능가함
     * 온디바이스 LLM 또는 소형 언어 모델(SLM) 증가, 추론이 서버에서 웹과 엣지 디바이스로 이동하는 추세를 보임
          + 후자의 추세는 프라이버시에 긍정적임

AI의 한계와 위험에 대한 인식 증가

     * 특히 GenAI 도구가 관련될 때 인간이 루프에 있는 것이 중요하다는 인식이 커지고 있음
          + 이러한 도구를 사용할 때 Hallucination나 단순한 실수를 통제하기는 여전히 어려움
          + 일부에서는 현재로서는 특정 애플리케이션에서 사람이 통제권을 가져야 하므로 ""AI in the loop""라고 부르자고 제안함
          + 그러나 화학과 물리학 분야 노벨상이 AI에 대한 공헌과 AI에 의해 수상되면서 모든 것이 암울하지는 않음
     * 기술에 패턴이 있는 곳에는 안티패턴도 있으며, AI도 확실히 그것들을 수집하고 있음
          + 두드러진 예로는 ""실제 페어링의 많은 이점을 주지 못하는 LLM과의 페어링"", ""스타일 일관성을 설명할 수 없고 코드 베이스의 이해 확산을 어렵게하는 코드 리뷰를 위한 LLM 사용"" 등이 있음
          + 이러한 도구가 확실히 개선되고 있지만, 아직 운전석에 앉거나 코드의 품질과 적합성에 대해 자율적으로 판단할 준비가 되지 않음
     * 마지막으로 GenAI의 황홀한 약속에 대한 반발이 증가하고 있음
          + 금융 분석가들은 기반 모델에 동력을 공급하는 활동을 포함하여 현재 다양한 AI 및 GenAI 벤처에 투입되는 모든 자금에 대한 투자 수익률 가능성에 의문을 제기하고 있음
          + 모든 기술은 과장 단계를 거치며 GenAI도 예외는 아님
          + AI는 일반적으로 과거에 여러 차례 AI 겨울을 겪었지만 현 시점에서 환멸 수준은 그다지 심각하지 않음
          + 그럼에도 불구하고 위에서 논의한 안티패턴과 마찬가지로 밝고 빛나는 새로운 것이 우리가 원하는 모든 것을 할 수 있다고 생각하는 불행한 경향이 있음
          + 우리는 여전히 우리의 표준 비즈니스 프로세스 중 많은 부분을 재구상할 수 있는 가능성을 배우고 있음
     * 그러나 AI가 다시 배경으로 사라질 가능성은 높지 않아 보임

Rust와 WebAssembly의 부상 및 Postgres의 지속성

     * AI 외에도 기술 세계에서는 더 많은 일이 일어나고 있음
     * Rust 언어의 사용과 도구 개발이 크게 증가하고 있음
          + 많은 도구들이 Rust로 다시 작성되고 있으며, 종종 Python 생태계에서 그러함
          + Rust의 메모리 안전 속성으로 인해 더 많이 채택되고 있음
          + 일부 예로는 Iggy, Ruff, uv, Zed 등이 있음
          + 물론 과거에 살펴본 다른 많은 기술들과 마찬가지로 이러한 Rust 도구의 문헌에서 ""blazingly fast""라는 문구가 두드러지게 나타남
     * WebAssembly(WASM)는 브라우저에서 모든 것을 실행하는 광범위한 주제와 마찬가지로 논의의 주요 주제였음
          + WebAssembly 표준 채택은 브라우저와 해당 브라우저의 플랫폼에서 거의 보편적임
          + 그러나 우리는 또한 서버에서 WASM 사용에 대한 Blip들이 많이 제출되는 것도 보았음
               o (Blip/블립은 소프트웨어 개발에서 중요한 역할을 하는 기술 또는 기법을 의미)
          + WASM 자체는 현재 Radar에 없지만 PGLite와 Flutter for Web을 비롯한 여러 Blip에서 WASM을 사용하고 있음
          + 물론 AI도 빠지지 않고, 브라우저 상의 LLM에 대한 Blip도 있음
     * 데이터베이스 측면에서 Postgres 데이터베이스가 얼마나 널리 퍼져 있는지 확인했음
          + 유사성 검색, 분석 작업, 데이터베이스 일부 동기화 등을 위한 다양한 Postgres 확장이 있음
          + 이것은 새로운 현상은 아니지만 Postgres는 이번 Radar 회의에서 특히 널리 퍼져 있었음
          + 우리는 또한 DuckDB, Iceberg, Parquet와 같은 데이터 레이크에 대한 강력한 새로운 오픈 소스 경쟁자를 보고 있음
          + 관계형 데이터베이스는 매우 오랫동안 존재해 왔지만 우리는 여기서 계속 혁신을 보고 있음

기술 거버넌스의 지속적 중요성

     * AI와 관련된 것만이 아니라 다양한 기술 거버넌스 접근 방식에 대해서도 논의됨
          + AI는 고유한 거버넌스 과제를 수반함
     * Build Your Own Radar(BYOR)와 같은 거버넌스 접근 방식은 계속해서 조직에 가치를 제공함
          + 종종 그렇듯이, 조직을 위한 Radar 결과물은 가치 있는 산출물이지만, 그 결과물인 Radar를 만드는 얼라인먼트 프로세스만큼 가치 있지는 않음
          + 거버넌스의 큰 문제는 종종 일부 기준 배후의 근거가 전달 팀에 의해 잘 이해되지 않는다는 것
          + 적절한 BYOR 운동은 팀이 왜 어떤 식으로 통제되고 있는지 이해하는 데 도움이 됨
     * 거버넌스에는 또한 문서화가 필요하며, 양질의 사용하기 쉽고 최신의 문서는 여전히 어려움
          + Unblocked와 같은 도구는 이러한 모든 문제를 해결하지는 못하지만 Jira 티켓 및 위키 페이지와 같은 다른 출처의 추가 컨텍스트를 질문으로 가져와 도움을 줌
          + GenAI는 문서를 래핑하고 문서에 대한 쿼리에 답변하는 데 유용한 것으로 입증되고 있음
          + 이러한 도구가 성숙해짐에 따라 우리는 적어도 문서에서 정보를 검색하는 데 있어서는 일부 진전을 보일 수 있음

코드로서의 인프라 진화

     * 이전 Macro Trends 에디션에서 언급했듯이 코드로서의 인프라(IaC)는 계속 진화하고 있음
     * 우리는 또한 최근 GA으로 이동한 System Initiative와 같은 도구에 구현된 코드에서의 인프라(IfC)에 대한 더 많은 현상들을 보고 있음
     * 코드 및 소유권 관점에서 애플리케이션과 인프라 사이의 경계가 모호해지고 있음
     * 특히 마이크로서비스 아키텍처에서 또는 진화적 아키텍처를 활용할 때 인프라의 복잡성을 관리하고 실제로 실행 중인 내용을 아는 것이 중요함

   어제 등록한 Thoughtworks Technology Radar, Volume 31과 같이 묶어서 보세요
"
"https://news.hada.io/topic?id=17493","418 I'm a teapot 오류 메시지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        418 I'm a teapot 오류 메시지

     * 418 I'm a teapot
          + HTTP 418 I'm a teapot 상태 응답 코드는 서버가 커피를 끓이는 것을 거부함을 나타내며, 이는 영구적으로 주전자로서의 역할을 의미함
          + 커피/차 포트가 일시적으로 커피가 없는 경우에는 503을 반환해야 함
          + 이 오류는 1998년과 2014년 만우절 농담으로 정의된 Hyper Text Coffee Pot Control Protocol을 참조함
          + 일부 웹사이트는 처리하고 싶지 않은 요청, 예를 들어 자동화된 쿼리에 대해 이 응답을 사용함
     * 상태
          + 418 I'm a teapot
     * 명세
          + 명세: RFC 2324 # section-2.3.2
     * 참고
          + HTTP 응답 상태 코드
          + Wikipedia: Hyper Text Coffee Pot Control Protocol

GN⁺의 정리

     * 418 I'm a teapot는 만우절 농담에서 유래된 HTTP 상태 코드로, 서버가 커피를 끓이는 것을 거부할 때 사용됨
     * 이 코드는 주로 자동화된 쿼리와 같은 처리하고 싶지 않은 요청에 대해 사용되며, 유머러스한 요소를 포함함
     * 이 상태 코드는 실제로 사용되지는 않지만, 인터넷 문화와 프로토콜의 유연성을 보여주는 좋은 예시임
     * 비슷한 기능을 가진 다른 HTTP 상태 코드로는 503 Service Unavailable가 있음

        Hacker News 의견

     * 418 상태 코드를 불법적인 봇에 대한 응답으로 사용함. 재미있고 로그 필터링이 쉬워짐
          + Nginx 설정 코드 예시 제공
          + WordPress 로그인 URL은 봇이 약한 설치를 찾기 위해 자주 요청함
     * _mnot_가 418 상태 코드를 여러 언어와 구현에서 제거하려고 했던 토론을 읽어볼 수 있음
          + 관련 GitHub 이슈 링크 제공
          + save418.com이라는 웹사이트도 만들어짐
     * 관련 RFC 문서는 읽기 좋음
          + nerdy한 농담으로 ""sir, this is a wendy's"" 밈 이전에 유행했음
     * HTTP/2 RFC를 읽다가 발견한 흥미로운 사실
          + Twitter API는 비표준 420 상태 코드를 사용했음
          + ""Enhance Your Calm""이라는 캡션이 HTTP/2에 포함됨
     * 이 오류 코드를 실제로 접할 때마다 매우 좌절스러움
          + 적절한 상태 코드 대신 418을 반환하여 HTTP 상태 코드 파싱을 방해함
     * Sonatype Nexus가 아티팩트 업로드 시 418을 반환한 적이 있었음. 인상적이지 않았음
     * 인증 서비스에서 418 응답 코드를 사용함
          + 토큰이 만료로 인해 유효하지 않은지 확인하는 데 사용함
     * iiNet 커피 캠 링크 제공
     * ""I am a teapot""이므로 서버 측 문제로 5xx 코드여야 한다고 생각함
"
"https://news.hada.io/topic?id=17495","Mill - Java와 Scala를 위한 빠른 JVM 빌드 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Mill - Java와 Scala를 위한 빠른 JVM 빌드 도구

     * Java, Scala, Kotlin을 지원하는 빠르고 확장성 있는 멀티 언어 빌드 도구
     * JVM 빌드 도구들은 속도가 느리고 혼란스럽다는 평가가 있지만, Mill은 JVM의 성능과 사용성을 최대한 활용하도록 함
     * Maven보다 5-10배, Gradle보다 2-4배 더 빠르게 동일한 Java 코드베이스를 빌드할 수 있음
     * Typed Config 언어 및 Immutable 작업 그래프로 빌드를 깨끗하고 이해하기 쉽게 유지
     * 작은 단일 모듈 프로젝트부터 수백 개의 모듈이 있는 대규모 모노레포까지 잘 확장됨

Mill의 장점

     * 성능: Mill의 빌드 그래프는 자동으로 빌드 작업을 캐시하고 병렬화하여 워크플로를 빠르고 반응성 있게 유지함. 프로젝트를 빌드하는 데 필요한 로직에 최소한의 오버헤드만 추가하면서 빌드의 병목 현상을 식별하고 해결할 수 있는 도구를 제공함
     * 유지 관리성: YAML과 Bash를 넘어 간결한 타입 검사 코드로 구성 및 사용자 정의 로직을 작성하고 불변 모듈 트리와 작업 그래프를 사용함. 이를 통해 구성 문제를 조기에 발견하고 IDE(IntelliJ 또는 VSCode)가 다른 빌드 시스템보다 Mill 빌드를 더 잘 이해할 수 있도록 도와줌
     * 유연성: Mill의 작업 및 모듈은 간단한 빌드 단계 추가부터 전체 언어 도구 체인까지 모든 것을 허용함. 빌드에서 모든 JVM 라이브러리를 가져오고, Mill의 풍부한 서드파티 Mill 플러그인 생태계를 사용하거나, 직접 플러그인을 작성하여 Maven Central에 게시하여 다른 사람이 사용할 수 있음

Mill vs 다른 빌드 도구

     * Mill은 Maven, Gradle, Bazel과 같은 다른 도구에서 아이디어를 차용하지만 각 도구의 장점을 배우고 약점을 개선하려고 노력함
     * Mill vs Maven
          + Mill은 Maven의 좋은 기본값 제공 혁신을 따름
               o Mill의 내장 JavaModule은 Maven의 ""설정보다 규칙"" 스타일을 따르므로 작은 Mill 프로젝트는 시작하는 데 최소한의 노력만 필요하고, 더 큰 Mill 프로젝트는 이러한 기본값을 기반으로 일관된 구조를 가짐
          + Mill은 자동으로 빌드를 캐시하고 병렬화하여 3-10배 속도 향상을 제공함
               o Mill과 함께 제공되는 기본 제공 작업뿐만 아니라 사용자 정의 작업이나 모듈에서도 마찬가지임. 이는 명령줄 빌드 워크플로의 민첩성을 극대화하여 생산성을 유지하는 데 도움이 되며, 특히 빌드 속도가 느려지는 경향이 있는 더 큰 코드베이스에서 중요함. Maven의 ""clean install"" 워크플로가 1분 이상 걸릴 수 있는 것에 비해 Mill에서는 몇 초밖에 걸리지 않을 수 있음
          + Mill은 Maven보다 빌드 도구를 훨씬 쉽게 사용자 정의할 수 있음
               o 프로젝트는 보통 단일 언어를 컴파일하는 것 이상으로 성장함. 사용자 정의 코드 생성, 린팅 워크플로, 도구 통합, 출력 아티팩트 또는 추가 언어 지원이 필요함. Mill의 확장성과 IDE 경험은 타입 검사된 코드와 샌드박스 작업으로 이를 직접 쉽고 안전하게 수행할 수 있도록 함
     * Mill vs Gradle
          + Mill은 Gradle의 간결성과 확장성을 따름
               o 장황한 XML 페이지 대신 Mill 빌드의 모든 줄은 의미가 있음. 예를 들어 종속성 추가는 Maven에서 찾을 수 있는 5줄의 <dependency> 선언과 달리 Gradle과 마찬가지로 Mill에서는 1줄임. Gradle과 마찬가지로 최종 사용자는 플러그인을 작성하는 과정을 거칠 필요 없이 정확한 요구 사항에 맞게 빌드를 쉽게 사용자 정의할 수 있음
          + Mill은 Gradle보다 2-3배 더 빠를 수 있음
               o Mill과 Gradle은 모두 자동으로 빌드를 캐시하고 병렬화하지만 Mill은 훨씬 적은 고정 오버헤드로 이를 수행함. 이는 빌드 도구를 기다리는 시간이 줄어들고 프로젝트에 정말 중요한 것들을 위한 시간이 더 많아짐을 의미함
          + Mill은 기본적으로 모범 사례를 적용함
               o Mill 빌드의 모든 부분은 기본적으로 캐시되고 증분적임. 모든 Mill 작업은 출력을 표준 위치에 씀. 모든 작업 간 종속성은 수동 주석 없이 자동으로 캡처됨. Gradle은 빌드를 이해하고 올바른 방식으로 설정하는 데 상당한 노력과 전문 지식이 필요한 반면, Mill의 우수한 IDE 경험은 빌드를 더 쉽게 이해할 수 있게 하고 확장성 모델은 빌드 구성을 실수하지 않도록 하므로 Mill에서 가장 쉬운 일이 보통 올바른 일임
"
"https://news.hada.io/topic?id=17583","Show GN: AI Agent를 활용한 문서 기반 투자 아이디어 발굴 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: AI Agent를 활용한 문서 기반 투자 아이디어 발굴 시스템

   [세줄요약]
    1. AI를 활용하여 뉴스, 공시 외 다양한 정보에서 투자기회를 발굴하는 시스템 구축 시도
    2. 미국 각 부처의 공식 문서(규제, 법률 관련)를 Federal Register API로 수집
    3. GPT api를 활용하여 평가, 요약, 아이디어/콘텐츠 생성 플로우 구축

   [사용한 툴 및 API]
     * Federal Register: 미국 정부의 규제, 법률, 정책 등의 공고문을 공식적으로 발표하는 일간 간행물 (무료 api)
     * Firebase: Firestore, Cloud functions 기능을 이용하여 데이터 적재 (DB) 및 함수 실행, 구글 로그인 인증 기능 사용
     * N8N: 배치처리, GPT api, cloud fucntions 등의 워크 플로우 관리
     * GPT api: 요약, 평가, 콘텐츠 생성 등 사람의 업무 API로 자동화
     * Vercel: Next.js로 구축한 서버사이드랜더링 페이지 기반 웹사이트 호스팅
     * ChatGPT: 비개발자 기획자의 1인 프로젝트에서 DB, 백엔드, 프론트엔드 개발을 도맡아 해줌

   [세부 아이디어]
     * GPT api의 json schema를 이용해서 워크 플로우의 in/out 구조 구축
     * AI의 역할을 구체화/세분화 (평가, 요약, 아이디에이션, 콘텐츠 작성 등등)
     * AI가 콘텐츠를 작성하기 전에 최신 정보 반영을 할 수 있게 검색 키워드를 구상하고, 해당 키워드로 구글뉴스 rss 피드 http request를 활용
     * firestore에 적재되면 자동으로 웹사이트에 배포되도록 next.js 서버사이드랜더링 활용
"
"https://news.hada.io/topic?id=17599","직원 성과 지표에 대해 마음이 바뀌었습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        직원 성과 지표에 대해 마음이 바뀌었습니다

     * 과거(2004-2006년경)에는 직원들의 커밋 수, 댓글 수 등으로 ""업무 산출량""을 측정하는 도구를 만들었음
     * 최근 ""직원 지표"" 관련 제품에 관여해 달라는 제안을 받은 것을 계기로 과거 내가 했던 일이 잘못되었다고 판단하고 더 이상 추천하지 않기로 결심함

입장 변화의 이유

     * 직원들의 업무 성과와 효율성을 파악하는 것은 관리자의 고유 업무라는 점을 깨달음
     * 관리자가 이를 제대로 못한다면 그들 스스로가 무능한 것이며, 이는 그들의 상급 관리자가 책임져야 할 문제
     * 직원 관리는 관리자 본연의 역할이며, 이를 위해 별도의 도구나 타인의 도움은 필요하지 않음

새로운 입장

     * 그런 종류의 도구를 만들거나 돕지 말 것
     * 동료들이 기본적인 ""서비스 청결(service hygiene)"" 이슈를 해결하는지 테스트하지 말 것
     * 성과 리뷰에서 실질적(substantive)인 말을 하지 말 것
     * 이런 일들은 당신이 생각하는 것처럼 상황을 개선하지 못하고 오히려 삶을 더 힘들게 만듦
     * ""동료 리뷰가 실제로 상황을 개선한다""는 것은 기술 업계의 큰 착각임

이기적인 관점에서의 조언

     * 20년 전에 만든 도구들은 누가 태만한지 보여주는 것이 아니라, 당시 Rackspace의 관리자들이 코앞에서 일어나는 일도 모른다는 것을 보여줌
     * 이러한 사실을 지적하는 것은 불필요한 적을 만들 수 있는 위험한 행동임
     * 동료의 업무 태만을 지적하고자 하는 충동을 자제하는 것이 현명함. 그렇게 하면 오히려 자신에게 해로울 뿐

GN⁺의 의견

     * 개발자 성과 측정 도구들은 종종 정량적 지표에만 집중하여 코드 품질, 협업 능력, 문제 해결 능력과 같은 중요한 질적 요소들을 간과하는 경향이 있음
     * 이러한 도구들은 개발팀 내 불필요한 경쟁과 긴장을 조성할 수 있으며, 이는 장기적으로 팀 문화와 생산성에 부정적인 영향을 미칠 수 있음
     * 최근의 DevOps 문화와 애자일 방법론은 팀워크와 협력을 강조하는데, 이는 개인별 성과 측정보다 팀 전체의 성과와 학습을 중시하는 방향으로 발전하고 있음

   k 직무 성과 지표 = 연대 책임..??

   피어 리뷰는 진정성있게 노력을 기울여 행해질 때만 의미가 있죠...
   시도 때도 없이 리뷰를 요구하면 그렇게 되기가 쉽지 않죠.

        Hacker News 의견

     * 관리자는 직원의 성과를 파악하고 그들이 효과적으로 일하는지 확인할 책임이 있음. 자동화된 대시보드는 관리자의 호기심을 줄이고, 직원들을 대시보드 최적화에만 집중하게 만듦. 이는 창의적인 시스템 설계에 부정적인 영향을 미침.
     * 대규모 엔지니어링 조직에서 내부 플랫폼을 작업하며 팀 수준 이상의 세부 데이터를 노출하지 않기로 결정했음. 개인별 성과 지표는 오용될 가능성이 높고, 플랫폼에 대한 신뢰를 손상시킬 수 있음.
     * TV 쇼 ""Suits""의 한 장면에서 성과 지표가 실제로 중요한 기여를 간과할 수 있음을 보여줌. 다른 사람을 도운 직원이 성과 지표에서 낮은 순위를 받았음.
     * 코드 라인 수로 성과를 측정하는 것은 무의미함. 복잡성을 줄이고 고객 요구를 더 잘 충족시키는 것이 목표임.
     * 관리자가 성과 지표를 올바르게 이해하거나 적용할 것이라는 신뢰가 없음. 데이터보다 피드백이 우선시되는 경우가 많음.
     * 관리자는 양적 세부사항보다 질적 세부사항에 더 관심을 가져야 함. 성과 지표는 큰 그림을 보는 데 유용하지만, 팀의 행복도나 갈등은 보여주지 않음.
     * 익명 설문조사를 통해 프로젝트 진행 상황을 파악하는 것이 더 정확한 답변을 얻을 수 있음. 익명성이 중요하며, 회사는 종종 정확한 답변보다 듣고 싶은 답변을 원함.
     * 대규모 회사의 엔지니어링 매니저로서 성과 지표는 기존 인식을 보완하는 데 사용되지만, 인식을 완전히 바꾸지는 않음.
     * 경영진의 성과를 측정할 수 있다면, 직원들도 자신의 성과를 측정하는 것에 대해 불평하지 않을 것임. 공정한 평가가 필요함.
     * 자동화된 도구는 모든 것을 보여주지 않음. 좋은 리더는 자동화 도구로는 보이지 않는 기여를 인식할 수 있어야 함.
"
"https://news.hada.io/topic?id=17514","구글의 TOS, 사용자 제4차 수정헌법 권리 제거하지 않는다고 판결한 판사 [PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            구글의 TOS, 사용자 제4차 수정헌법 권리 제거하지 않는다고 판결한 판사 [PDF]
"
"https://news.hada.io/topic?id=17511","Dropbox, 전 세계 인력 20% 감축 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Dropbox, 전 세계 인력 20% 감축 발표

     * 오늘, Dropbox의 공동 창립자이자 CEO인 Drew Houston은 글로벌 인력 감축 소식을 전함. 전체 직원에게 이메일을 통해 이 결정을 알림.

    이 결정을 내린 이유

     * 회사는 현재 전환기임. FSS 사업이 성숙해졌고, Dash와 같은 제품으로 다음 성장 단계를 준비 중임.
     * 현재 구조와 투자 수준을 유지하면서 이 전환을 관리하는 것은 지속 가능하지 않음.
     * 수요 감소와 외부 요인이 있지만, 조직 구조가 복잡해져 관리 계층이 과도하다는 내부 피드백도 있었음.
     * 일부 사업 부문에서는 고객 기대에 부응하지 못하고 있어, 과잉 투자된 부분과 성과가 저조한 부분에서 더 큰 감축을 진행 중임.

    앞으로의 기회

     * 어려운 결정이지만, 시장이 우리가 주력하고 있는 분야에서 가속화되고 있음.
     * Dash for Business를 처음 사용하는 고객들의 반응이 긍정적임.
     * 시장이 빠르게 움직이고 있어 더 긴급하고 공격적인 투자와 결단이 필요함.
     * 핵심 제품을 강화하고 신제품 성장을 가속화하기 위한 필수적인 조치임.

    영향을 받는 직원들을 위한 지원

     * 퇴직금, 주식, 전환 지원금 제공.
          + 16주 급여와 근속 연수에 따른 추가 급여 제공.
          + Q4 주식 베스트 제공.
          + 보너스 계획에 따른 전환 지원금 지급.
          + 비자 소지자에게 추가 전환 시간과 이민 상담 제공.
     * 의료 혜택
          + 미국 직원은 최대 6개월의 COBRA 혜택.
          + 캐나다 직원은 1개월의 의료 혜택 연장.
          + 모든 직원은 Modern Health를 통한 정신 건강 지원 가능.
     * 기기
          + 회사 기기를 개인 용도로 유지 가능.
     * 직업 배치
          + 무료 직업 배치 서비스와 경력 코칭 제공.

    다음 단계

     * 오늘 더 많은 세부 사항을 공유하고, 이번 주에 전체 회의를 통해 질문에 답변하고 계획을 논의할 예정임.

    GN⁺의 정리

     * Dropbox는 조직 구조의 복잡성과 외부 요인으로 인해 인력 감축을 결정함. 이는 회사의 지속 가능성을 위한 필수적인 조치로, 핵심 제품 강화와 신제품 성장 가속화를 목표로 함.
     * Dash for Business와 같은 신제품에 대한 고객 반응이 긍정적이며, 시장의 빠른 변화에 대응하기 위한 긴급한 조치가 필요함.
     * 영향을 받는 직원들에게는 다양한 지원과 혜택을 제공하여 전환을 돕고 있음.
     * 이 기사는 기업의 구조 조정과 관련된 전략적 결정을 이해하는 데 도움이 될 수 있으며, 유사한 기능을 가진 제품으로는 Google Drive와 Microsoft OneDrive가 있음.

        Hacker News 의견

     * 높은 기술 급여를 가능하게 하는 힘이 해고를 더 자주 발생하게 함
          + 인재 시장의 경쟁이 치열하여 기업들이 최대한의 급여를 제시함
          + 관리자 시장도 경쟁적이며, 이는 팀 규모 확대와 팀원 급여 인상으로 이어짐
          + 원격 근무는 혜택이지만, 업무 성과에 대한 남용이 많음
          + 시장 충격 시 기업은 비용 절감을 위해 해고를 선택할 수밖에 없음
          + 해고의 문제는 고용에 연계된 의료보험이며, 정부의 안전망이 필요함
     * 후한 퇴직금 패키지를 제공하는 기업과 리더는 칭찬받을 만함
          + 과도한 인력 채용 후 대규모 해고는 덜 칭찬받을 만함
          + 단일 솔루션 회사의 지속 가능성에 의문이 있으며, 대기업은 통합 솔루션을 선호함
     * ""Our incredible journey"" 블로그처럼 해고나 데이터 유출을 알리는 ""An update from <company>"" 포스트가 필요함
     * 수익성 있는 대기업이 대규모 해고를 하는 것이 이해되지 않음
          + 새로운 제품, 시장, 스핀오프 등으로 인력을 활용할 수 있을 것임
     * 해고된 직원이 회사 장비를 개인적으로 사용할 수 있도록 하는 경우는 드물음
          + Netflix는 장비가 새 것이 아닐 경우 이를 허용했음
     * Dropbox의 가격이 경쟁력 있게 다시 조정되길 바람
          + OneDrive와 Google Drive가 더 저렴하여 경쟁에서 밀리고 있음
     * Dropbox가 유지 모드로 전환할 시점에 도달했는지 의문임
          + 혁신보다는 핵심 서비스를 최저 비용으로 유지하는 것이 더 나을 수 있음
     * 사과와 책임 인정은 했지만, 여전히 해고가 진행됨
     * 퇴직금 패키지가 훌륭함
          + 4개월 급여 + 근속 연수당 1주 급여
          + Q4 베스트 수령
          + 승인된 휴가 현금 지급
          + 연말 보너스 지급
          + 회사 장비 유지 가능
"
"https://news.hada.io/topic?id=17500","Show GN: 쇼츠와 북마크를 결합한 링크공유플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 쇼츠와 북마크를 결합한 링크공유플랫폼

   링크묶음을 공유할때 주로 OneTab을 이용하곤했는데, 각 링크의 제목만 보이는게 직관적이 않은 불편함을 느낌.

   각 링크에 쇼츠를 넣어서 해당 링크를 영상으로 보면서 원하는 링크를 고를수있도록 만듬.

   어떤 링크든 즉시 수정하거나 추가,삭제도 가능하고 배포도 무료로 즉시 가능함.

   무료이고 불법사이트는 공유할수없도록 만듬.

   아래와 같은 예시에서 어떤 서비스인지 확인할수있음.
     * https://watchgo.link/P287GK29
     * https://watchgo.link/LFl2qfjh
     * https://watchgo.link/Tq05ZCns

   또한 다음 위키에서도 자세한 내용이 있음.
     * https://namu.wiki/w/WatchGo

   이곳에 만든 제품올려도 좋다는 격려를 본적이있어서 올려봄.

   예시가 안좋은 것 같아요. 쇼츠를 보는 것 외에 뭘 어떻게 해야할지 잘 모르겠습니다...!

   사용법을 모르겠네요... 왜 이게 필요한지도 잘 모르겠어요...

   저도 친구들과 사용하려고 만들어보니까.. 딱히 쓸데가 없어보이긴하네요..ㅋㅋ 사용법은 그냥 편집하고 공유버튼 누르면 되요! 이거도 따로 적어둬야하는데 말씀하신것처럼 쓸데가 없어보이니까 의욕이 안나네요
"
"https://news.hada.io/topic?id=17557","QBittorrent의 RCE 취약점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          QBittorrent의 RCE 취약점

     * 14년간의 취약점이 qBittorrent를 RCE 공격에 노출시킴
          + 보안 연구자들이 인기 있는 토렌트 클라이언트인 qBittorrent에서 14년 동안 지속된 심각한 취약점을 발견함
          + 이 취약점은 원격 코드 실행(RCE) 공격에 사용될 수 있는 위험이 있음
          + 수백만 명의 사용자가 이 취약점으로 인해 공격에 노출될 가능성이 있음

GN⁺의 정리

     * qBittorrent의 취약점은 오랜 기간 동안 발견되지 않아 많은 사용자에게 위험을 초래할 수 있음
     * 이 기사는 소프트웨어 보안의 중요성을 강조하며, 사용자들이 최신 버전으로 업데이트하는 것이 중요함을 상기시킴
     * 유사한 기능을 가진 다른 토렌트 클라이언트로는 Transmission이나 Deluge가 추천됨
     * 보안 취약점에 대한 경각심을 높이고, 소프트웨어 유지보수의 중요성을 일깨워주는 기사임

        Hacker News 의견

     * TLS 인증서와 도메인 이름 조합에만 의존하는 것은 위험하며, 인터넷에서 다운로드한 아티팩트를 실행할 때는 항상 특정 버전에 고정하고 해시를 검증해야 함
          + qBittorrent의 DownloadManager 클래스는 14년 이상 모든 플랫폼에서 SSL 인증서 검증 오류를 무시해 왔음
          + 이 문제로 실제로 얼마나 많은 사람들이 영향을 받았는지 알게 된다면 놀라울 것임
          + 많은 것들이 주목받지 못해 그냥 작동하고 있으며, 이제 이슈가 주목받으면서 자동 업데이트를 하지 않는 사람들에게는 문제가 될 것임
          + SSL 오류를 무시하지 않는 버그 수정이 필요하며, 보안 공지가 있어야 한다고 생각함
     * 최신 버전을 컴파일하고 실행하기 위해 Docker를 사용하는 스크립트가 유용하며, libtorrent 1.2를 사용하는 5.0.0 버전을 실행하는 데 가장 쉬운 방법으로 발견함
          + 이 문제는 과장된 면이 있으며, 특히 후반부의 포인트들이 그러함
          + 악성 실행 파일 로더는 MITM과 사용자 상호작용이 필요하여 명백한 취약점 경로가 없음
          + 브라우저 하이재킹과 실행 파일 다운로드는 사용자가 ""업데이트""를 클릭해야 하며, 그 결과 웹 페이지를 보여주는 것에 불과함
          + RSS 피드의 임의 URL 삽입은 RSS 클라이언트의 예상 동작에 대한 혼란으로 보임
          + 압축 해제 라이브러리 공격 표면은 zlib의 취약점을 찾는다면 더 심각한 문제를 일으킬 수 있음
     * 가장 안전한 Bittorrent 앱은 무엇인지 궁금함
          + 이 클라이언트의 문제들이 다른 옵션들보다 성능이 1000배 뛰어난 것에 비해 충격적으로 낮은 품질임
          + MITM 공격이 가능하다면 문제가 될 수 있음
          + deluge를 오랫동안 사용해왔으며, 그들의 기록에 만족하고 있음. 다른 클라이언트들이 큰 취약점이 발견될 때 특정 버전을 금지하는 경우가 많았음
"
"https://news.hada.io/topic?id=17488","Cursor를 사용한 코드 작성 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Cursor를 사용한 코드 작성 방법

Cursor란 무엇인가

     * Cursor는 Visual Studio Code(VS Code)의 포크로, 코어 UI에 Large Language Model (LLM) 기반 기능이 통합되어 있음
     * 독점 제품이며 무료 계층과 구독 옵션이 있음
     * 주요 기능:
          + Tab 자동 완성: 구독자에게만 제공되는 코드 자동 완성 및 다음 추천 동작으로 이동하는 독점 미세 조정 모델
          + 인라인 편집: 무료 및 유료 사용자가 사용할 수 있는 채팅 기반 인터페이스로 diff 뷰를 사용해 선택한 코드 편집
          + 채팅 사이드바: 무료 및 유료 사용자가 사용할 수 있는 채팅 기반 인터페이스로, 더 긴 토론을 위한 공간 제공
          + Composer: 여러 파일에 걸친 대규모 리팩터링을 위해 설계된 채팅 기반 인터페이스로, 무료 및 유료 사용자가 사용 가능

Tab 자동 완성

     * 코드 작성 시 가장 자연스럽게 사용할 수 있고 시간을 가장 많이 절약할 수 있는 기능
     * 한 줄, 여러 줄 또는 전체 함수에 대한 완성을 제안할 뿐만 아니라 다음 편집을 위해 이동할 다음 줄도 제안
     * Tab 키를 반복적으로 눌러 파일 전체에서 관련 변경 사항을 자동 완성할 수 있음
     * 코드 리팩터링 도구로 사용 가능
     * 때로는 독립적으로 버그를 찾아 수정을 제안하기도 함
     * 문자열을 따옴표로 묶으면 내용을 적절히 이스케이프함
     * 함수 시그니처와 선택적 docstring만으로 전체 함수를 작성할 수 있음
     * 완성 제안이 매우 빠름
     * 단점:
          + 제안을 제때 보지 못하고 계속 입력하면 완성 제안이 사라짐
          + 잘못된 완성을 의도적으로 거부했는데, 나중에 다른 완성을 수락하면 이전에 거부한 제안이 조용히 적용되는 경우가 있음

인라인 편집, 채팅 사이드바, Composer

     * 기반 모델(주로 Claude 3.5 Sonnet 사용)과의 상호 작용은 매우 유사하며, 사용자 인터페이스에서 차이가 있음
     * 인라인 편집은 Ctrl-K/Cmd-K를 눌러 호출하고, 원하는 변경 사항을 입력한 후 수락하거나 거부할 수 있는 diff를 얻을 수 있음
     * 채팅 사이드바는 Ctrl+L/Cmd+L로 열고, 여러 번 대화할 수 있는 더 많은 공간을 제공함
     * Composer는 여러 파일에 걸친 리팩터링을 위해 설계되었으며, 한 번에 하나씩 여러 파일 diff를 검토할 수 있는 더 나은 사용자 경험을 제공함

.cursorrules 파일

     * 작업 공간 루트에 위치한 .cursorrules 파일의 내용은 항상 추가 컨텍스트를 제공하기 위해 다양한 채팅 양식에 포함됨
     * 저장소의 코딩 표준, 공통 패키지 및 기타 문서를 LLM에 알리는 데 사용
     * Cursor의 큰 장애물 중 하나인 편집 중인 파일에 이미 존재하지 않는 한 코딩 스타일과 패턴을 따르지 않는 문제를 해결하는 데 도움이 될 수 있음
     * 현재 작업 공간당 하나의 파일만 있어서 여러 언어로 코드를 포함하는 모노레포는 작고 일관되게 스타일이 지정된 코드 세트를 가진 작은 저장소보다 설정하기 어려움
     * .cursorrules 파일은 채팅 양식에만 사용되며 탭 자동 완성에는 사용되지 않음

워크플로우의 변화

     * 코드를 더 빠르게 작성할 수 있다는 것이 가장 흥미로운 점은 아님
     * 실제로 코드 작성 자체가 병목 현상은 아님
     * 진정한 가치는 코드 작성 방식을 변경하는 데 있음
     * 변경된 사항:
         1. 새로운 라이브러리나 프레임워크를 찾을 가능성이 훨씬 줄어듦
               o 작은 유틸리티의 경우 범용 라이브러리를 가져오는 것보다 LLM이 맞춤형 요구 사항에 맞게 작성하도록 하는 것이 더 쉬움
               o 많은 라이브러리는 상용구를 줄이기 위해서만 존재하는데, LLM이 대신 해줄 수 있으므로 비용이 그만큼 가치가 있는 것 같지 않음
         2. 자체 코드에서 DRY(Don't Repeat Yourself) 원칙을 고수하는 것에 대해 덜 걱정함
               o 조기에 추상화를 정의하면 나중에 많은 기술 부채가 생길 수 있음
               o 함수나 클래스로 만들려고 하지 않고 다른 코드를 참조하여 많은 코드를 만들 수 있으므로 유연성이 더 높아짐
         3. 덜 익숙한 언어나 프레임워크를 사용할 의향이 훨씬 높아짐
               o 예를 들어 R을 사용하는 데 어려움이 있었지만, 이제는 원하는 시각화를 설명하면 올바른 데이터 조작과 ggplot 시각화를 얻을 수 있음
         4. 더 큰 코드베이스에 통합하기 전에 작은 구성 요소를 빠르게 반복하고 있음
               o LLM의 한계를 해결하기 위한 것이기도 하지만, 이전에는 고려하지 않았던 흥미로운 작업 방식도 열어줌

요약

     * 현재로서는 Cursor가 LLM 코딩 어시스턴트의 잠재력을 보여주는 가장 좋은 예
     * 이러한 유형의 도구가 어떻게 가치가 있을지 탐색하고 싶다면 Cursor를 사용해 보는 것이 좋음

GN⁺의 의견

     * Cursor는 LLM 기반 코딩 도구의 잠재력을 보여주는 좋은 사례로 보임
          + 특히 탭 자동 완성 기능은 코드 작성 시 자연스럽게 사용할 수 있고 시간을 많이 절약할 수 있어 매력적
          + 채팅 기반 기능들도 리팩터링이나 코드 변환 등에 유용하게 사용될 수 있을 것 같음
     * 다만 아직 초기 단계인 만큼 한계점도 있어 보임
          + 일관된 코딩 스타일 적용이 어렵다는 점
          + 모노레포 등 복잡한 프로젝트 구조에서의 사용성 문제
          + 무료 사용자와 유료 사용자 간 기능 차이가 명확하지 않은 점 등
     * 유사한 기능을 제공하는 다른 도구로는 GitHub Copilot, Tabnine, Kite 등이 있음
          + 각 도구마다 장단점이 있으므로 프로젝트 특성이나 개인 선호도에 따라 선택하면 좋을 듯
     * LLM 기반 코딩 도구 도입 시에는 다음과 같은 사항들을 고려해 볼 만함
          + 개발팀의 수용성: 새로운 도구 도입에 대한 거부감은 없는지
          + 학습 비용: 도구 사용법을 익히는 데 얼마나 시간이 걸릴지
          + 유지보수성: 도구로 생성한 코드를 이해하고 유지보수하기 쉬운지
          + 코드 품질: 실제로 코드 품질 향상에 도움이 되는지
          + 비용 대비 효과: 생산성 향상 효과가 도입/유지 비용을 상쇄할 만한지

   cursor chat이 키입니다. docstring 만들어주는게 되게 편하드라구요

   cursor 를 써보니 copilot 의 자동 완성이 너무 느리게 느껴집니다. ㅠㅠ

   탭 자동왼성은 유료 결제자만 가능한가여?

   구독자만 가능한 것은 맞는데, 무료 구독이 있고, 한달에 2000번 자동완성을 제공합니다. 제가 그렇게 3개월 사용중입니다.
   https://www.cursor.com/pricing

     Tab 자동 완성: 구독자에게만 제공되는 코드 자동 완성

   네

   글에 적혀 있어요ㅋㅋ
"
"https://news.hada.io/topic?id=17481","[번역] 소규모 언어 모델(SLM)에 대한 종합적인 연구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [번역] 소규모 언어 모델(SLM)에 대한 종합적인 연구

소규모 언어 모델(SLM)에 대한 종합적인 연구 (Small Language Models: Survey, Measurements, and Insights)

  논문 소개

   최근 언어 모델의 발전은 두 가지 경향으로 나뉩니다. 첫 번째는 대규모 언어 모델(LLM, Large Language Model)로, 수백만 개의 GPU를 사용하여 대규모 데이터센터에서 운영됩니다. 이 모델들은 고급 언어 작업을 처리하며, 인공지능을 이용해 과학 등 복잡한 문제를 해결하는 것을 목표로 하고 있습니다. 그러나 이러한 LLM은 높은 비용과 엄청난 계산 자원이 요구되며, 개인 장치에 배포하기에는 비현실적입니다.

   반면, 소규모 언어 모델(SLM, Small Language Model)은 리소스 제약이 있는 장치, 예를 들어 스마트폰, 태블릿, 웨어러블 기기 등에 배포할 수 있도록 설계되었습니다. 소형 언어 모델의 목표는 비용 효율적이고 실용적인 인공지능을 제공함으로써 AI를 누구나 쉽게 접근할 수 있도록 하는 것입니다. 이 논문은 SLM에 대한 첫 번째 종합적인 조사로, 최근 몇 년간 공개된 소형 언어 모델들을 기술적 혁신, 성능, 그리고 장치에서의 실행 비용 측면에서 분석하고 있습니다.

  소규모 언어 모델(SLM)의 구조와 데이터셋, 학습

    소규모 언어 모델(SLM, Small Language Model) 개요

   SLM은 대규모 파라미터를 가지는 언어 모델보다는 크기가 작지만, 상식 추론, 수학적 문제 해결, 문맥 내 학습 등의 다양한 작업에서 성능을 입증했습니다. 이를 통해 기기에서 직접 실행 가능한 인공지능의 가능성을 보여줍니다.

   이번 연구에서는 2023년 말부터 급증하고 있는 SLM들을 살펴보고, 다음 기준에 따라 59개의 SLM을 선정하여 성능과 비용 등을 살펴보았습니다:
     * SLM의 모델 크기는 100M ~ 5B 사이의 모델로 정의하였으며, 평가가 가능한 가중치 공개 모델들만을 대상으로 합니다.
     * 우수한 성능과 실제 배포를 위해 디코더 전용 트랜스포머 아키텍처를 갖춘 모델만 대상으로 합니다. 즉, RWKV 및 Mamba와 같은 아키텍처 모델들은 포함하지 않았습니다.
     * 본 조사는 사전 학습 과정에서 얻은 기본 지식에 초점을 맞추기 때문에 지시-미세조정(Instruct Fine-tuned)된 버전만 제공되는 모델(Microsoft Phi 및 StabilityAI StableLM)을 제외한 기본 모델(Base Model)만을 대상으로 합니다.
     * 그 외, 사전 학습된 모델을 미세 조정(fine-tuning)한 파생 모델들도 제외합니다.

   위 기준에 따라 선정된 모델 목록은 다음과 같습니다:

    SLM의 모델 구조(Model Architecture)

   SLM의 모델 구조는 트랜스포머(Transformer)를 기반으로 다양한 변형을 가지고 있습니다. 트랜스포머 아키텍처의 핵심은 다중-헤드 어텐션(Multi-Head Attention, MHA)과 피드-포워드 신경망(Feed-Forward Neural Network, FFN)입니다. MHA는 입력 데이터의 서로 다른 부분에 집중할 수 있게 하여 병렬 처리의 효율성을 높입니다. 최근 모델들에서 어텐션 메커니즘과 FFN, 활성 함수에서 다음과 같은 다양한 시도들을 하고 있습니다:
    1. 어텐션 메커니즘(Attention Mechanisms):
          + 다중 헤드 어텐션(Multi-Head Attention, MHA): 입력 데이터의 여러 부분을 동시에 주의하는 메커니즘으로 트랜스포머의 핵심입니다.
          + 그룹 쿼리 어텐션(Group-Query Attention, GQA): 주의의 계산 복잡도를 줄이기 위해 여러 쿼리 값을 그룹화하는 방식입니다.
          + 다중 쿼리 어텐션(Multi-Query Attention, MQA): 각 쿼리에 대해 다른 키와 값의 투영을 허용함으로써 계산 복잡성을 줄이는 방식입니다.
    2. 피드-포워드 신경망(Feed-Forward Network, FFN):
          + 표준 FFN(Standard FFN): 두 개의 레이어로 구성된 간단한 네트워크 구조입니다.
          + 게이트 FFN(Gated FFN): 추가 게이트 레이어를 포함해 성능을 높인 구조입니다.
    3. 피드-포워드 신경망의 차원 확장 비율(The intermediate ratio of the FFN): 입력 차원의 크기 대비 은닉층(hidden layer)의 크기를 비율로 표시한 수치로, 흔히 차원 확장 비율을 나타냅니다. 이 비율이 클수록 FFN은 더 복잡한 패턴을 학습할 수 있지만 연산 비용이 더 커집니다. 표준 FFN에서는 일반적으로 4 정도를, 게이트 FFN에서는 2에서 8 사이의 비율을 갖습니다.
    4. 활성 함수(Activation Functions): SLM에서는 ReLU(정류 선형 유닛, Rectified Linear Unit), GELU(가우시안 오류 선형 유닛, Gaussian Error Linear Uni), $GELU_{tanh}$, SiLU(시그모이드 선형 유닛, Sigmoid Linear Unit)가 주로 사용됩니다. 2022년에는 ReLU가, 2023년에는 GELU와 그 변형이, 그리고 2024년에 들어는 SiLU가 활성화 함수로 가장 널리 사용되고 있습니다.
    5. 레이어 정규화(Layer Normalization): 레이어 정규화에는 LayerNorm과 RMSNorm을 사용합니다. RMSNorm이 점점 더 많이 사용되고 있으며, 이는 모델의 학습 안정성을 높이는 데 기여합니다.
    6. 어휘집의 크기(Vocabulary Size): 어휘집의 크기는 SLM이 인식할 수 있는 고유한 토큰(unique token)의 수를 뜻합니다. 최근 SLM들은 주로 5만개 이상의 어휘 크기를 가지며, 어휘 크기가 클수록 성능이 향상됨을 확인하였습니다.

   앞서 선정한 59개의 모델들에 대해, 위의 6가지 변형들의 분포가 시간에 따라 어떻게 변화하는지를 정리하면 다음과 같습니다:

   이러한 모델 구조들을 살펴보며 모델 구조에서의 혁신(Model Architecture Innovations)을 살펴볼 수 있었습니다:
    1. 매개변수 공유(Parameter Sharing)
          + 매개변수 공유는 대규모 언어 모델(LLM)에서 네트워크의 여러 계층이나 구성 요소에서 동일한 가중치 세트를 재사용하는 데 사용되는 기법입니다. 이 접근 방식을 사용하면 모델에서 매개변수 수를 크게 줄여 성능을 유지하면서 더 효율적인 학습 및 추론으로 이어질 수 있습니다.
          + Embedding-lm_head 공유(Embedding-lm_head sharing): 임베딩의 가중치를 최종 lm_head 레이어와 공유하는 것이 가장 일반적인 가중치 공유 기법입니다. 이는 단어 임베딩 레이어의 공유이며 RoPE(Rotary Position Encoding)과는 아무런 관련이 없습니다. Gemma, Qwen과 같은 모델은 모두 이 공유 기법을 사용했습니다.
          + 레이어별 어텐션/FFN 공유(Layer-wise Attention/FFN sharing): 이 방식은 동일한 가중치 세트를 모델의 여러 레이어에 걸쳐 재사용합니다. 이는 모든 트랜스포머 레이어가 동일한 파라미터를 공유하는 SLM/LLM에서 흔히 볼 수 있습니다. 예를 들어, MobiLLaMA는 모든 트랜스포머 블록의 FFN 가중치를 공유하고, MobileLLM은 인접한 두 트랜스포머 블록의 Attention 및 FFN 가중치를 공유합니다.
    2. 레이어별 매개변수 스케일링(Layer-wise Parameter Scaling)
          + 이 기법은 OpenELM에서 제안하고 사용했습니다. 기존 SLM은 모델의 각 트랜스포머 레이어에 대해 동일한 구성을 사용하므로 레이어 간에 파라미터가 균일하게 할당됩니다. 이러한 모델과 달리 OpenELM의 각 트랜스포머 레이어는 서로 다른 구성(예: 헤드 수 및 FFN의 차원)을 가지므로 모델의 각 레이어에서 다양한 수의 매개변수를 사용할 수 있습니다. 이를 통해 OpenELM은 더 높은 정확도를 달성하기 위해 사용 가능한 파라미터 규모(available parameter budget)을 더 잘 활용할 수 있게 됩니다.
    3. 비선형성 보상(Nonlinearity Compensation)
          + PanGu-$\pi$ 는 최신 언어 모델들을 분석하여 특징 붕괴 문제(feature collapse problem)를 해결하고자 합니다. 특징 붕괴 문제는 LLM과 같은 고차원 표현 학습에서 발생하는 문제로, 모델이 다양한 입력에 대해 동일하거나 매우 유사한 특징(feature)을 학습하는 현상을 뜻합니다. PanGu-$\pi$ 는 이러한 특징 붕괴 문제를 해결하기 위해 GELU나 ReLU 등의 활성 함수에 비선형성을 보상할 수 있도록 하며, 레이어의 출력값의 크기를 스케일링하여 출력값의 변동폭을 일정하게 유지합니다.

      주요 인사이트: SLM의 모델 구조에서는 2가지 주요한 관찰점이 있습니다:

    1. 2024년 8월 현재, 일반적인 SLM 아키텍처는 GQA(Group-Query Attention), SiLU 활성 함수를 사용한 게이트 FFN(Gated FFN), 2~8 사이의 FFN 확장 비율(Intermediate Ratio of FFN), RMSNorm, 5만 이상의 어휘집 크기(Vocabulary Size)를 채택하고 있습니다. 하지만 이러한 설정들은 주로 경험적(empirical)으로 이뤄지며, 엄격하고 공개적인 검증이 이뤄지지는 않았습니다.
    2. SLM에서의 트랜스포머 구조에 대한 혁신은 제한적입니다. Embedding-lm_head 공유 기법을 제외한 다른 기법들이 기존 트랜스포머(Vanilla Transformer) 구조보다 우수하다는 강력한 증거가 관찰되지 않았습니다. 또한, 여러 연구 그룹이나 회사에서 일반적으로 채택되거나 연구되지도 않고 있어 향후 검증이 필요합니다.

    학습 데이터셋(Training Dataset)

   SLM의 성능은 학습에 사용한 데이터셋에 크게 의존합니다. 이 연구에서는 SLM 모델이 사용하는 12개의 공개 데이터셋을 살펴보았습니다:

          이름          토큰 수            주요 도메인                                                      설명 및 용도
   The Pile         825B      과학, 학술 논문, 웹 텍스트, 법률 문서 다양한 소형 데이터셋을 결합한 데이터셋으로, 여러 도메인의 텍스트를 포함하여 모델의 전반적인 이해 능력을 향상시키는 데 사용됩니다.
   FineWeb-Edu      1.3T/5.4T 교육 텍스트, 교과서, 교육 자료      FineWeb에서 필터링된 교육 관련 텍스트로 구성된 대규모 데이터셋으로, 학습 및 교육 도메인 관련 작업에서 모델 성능을 향상시키기 위한 목적으로 사용됩니다.
   StarCoder        35B       파이썬 코드                  파이썬 프로그래밍 언어로 이루어진 코드를 포함하는 데이터셋으로, 코드 생성 및 프로그래밍 관련 작업에서 모델을 훈련하는 데 사용됩니다.
   Cosmopedia       25B       합성 텍스트, 교육 자료           합성 텍스트로 구성된 데이터셋으로, 교과서, 블로그 게시물, 스토리, WikiHow 기사 등을 포함하여 모델이 다양한 글쓰기 스타일과 컨텍스트를 학습할 수 있게 돕습니다.
   RefinedWeb       5T        웹 문서, 뉴스 기사, 블로그, 기술 문서 CommonCrawl에서 추출한 고품질의 웹 데이터를 엄격하게 필터링한 데이터셋으로, 자연어 처리 작업에서 폭넓은 도메인 지식을 학습하는 데 사용됩니다.
   RedPajama        1.2T      웹 데이터, 뉴스, 소셜 미디어       CommonCrawl의 스냅샷에서 추출한 방대한 텍스트 데이터를 포함하며, 웹 텍스트 기반 모델 학습에 사용됩니다.
   Dolma            -         중복 제거된 영어 텍스트           MinHash 알고리즘을 사용하여 중복을 제거한 영어 말뭉치로, 중복된 텍스트를 제거해 정제된 데이터를 통해 모델 성능을 최적화하는 데 사용됩니다.
   WuDaoCorpora     4T        중국어 텍스트                 중국어 데이터를 기반으로 한 대규모 말뭉치로, 3T 토큰의 훈련 데이터와 1.08T의 중국어 문자를 포함하여 중국어 언어 모델 훈련에 사용됩니다.
   RoBERTa CCNewsV2 -         뉴스 기사                   CommonCrawl의 뉴스 데이터셋의 업데이트된 버전으로, 최신 뉴스 데이터 기반의 자연어 처리 작업에 사용됩니다.
   PushShift Reddit -         소셜 미디어 데이터 (Reddit 게시물) Reddit 데이터를 수집, 분석, 저장하는 플랫폼에서 수집된 데이터로, 소셜 미디어 상호작용 및 대화형 언어 모델 훈련에 사용됩니다.
   DCLM-baseline    1.35T     웹 텍스트                   Common Crawl에서 추출한 표준화된 말뭉치로, 사전 훈련된 언어 모델을 위한 데이터셋으로 사용되며, 다양한 평가 작업에 적합합니다.
   CulturaX         6.3T      다국어 텍스트                 167개 언어로 구성된 방대한 다국어 텍스트 데이터셋으로, 다국어 모델 학습을 위한 대규모 텍스트 자료로 사용됩니다.

   연구 대상인 SLM들이 2022년부터 2024년까지 사전 학습 데이터셋을 사용한 경향을 살펴보면 다음과 같습니다:

   2022년과 2023년에 가장 널리 사용된 사전 학습 데이터셋은 The Pile이었지만, 최근에는 더 많은 데이터셋들이 제안되어 선택의 폭이 다양해지고 있음을 알 수 있습니다. 2024년에 들어서는 SLM의 사전 학습 시 The Pile 데이터셋은 더 이상 사용되지 않고 있으며, RefinedWeb이나 RedPajama 등의 데이터셋들이 점차 널리 사용되고 있습니다. 이는 더 나은 품질의 사전 학습 데이터셋을 구축하기 위한 연구와 엔지니어링 노력이 활발히 진행되고 있음을 보여줍니다.

   다음으로, 사용한 사전 학습 데이터셋에 따른 SLM의 성능을 살펴보았습니다. 최근 3년 간 출시된 SLM들을 매개변수 크기에 따라 4개의 그룹(<1B / 1B-1.4B / 1.5-2B / 2.5B-3B)으로 분류하고, 각 그룹 내에서 평균 정확도(상식 추론/이해와 문제 해결 두 가지 유형의 정확도의 평균)를 기준으로 정렬한 결과를 살펴보면 아래와 같습니다:

   이러한 결과를 통해, 최근 출시된 두 개의 데이터셋인 DCLM(DataComp-LM)과 FineWeb-Edu가 다른 데이터셋들에 비해 우수한 성능을 보인다는 것을 알 수 있습니다. 이 두가지 데이터셋의 공통적인 특징은 모델 기반 데이터 필터링을 채택했다는 점입니다.

   또한, 코딩 능력은 디바이스에 배포하는 SLM의 주요 작업이 아님에도 불구하고 StarCoder와 같은 사전 학습 데이터셋에 코딩 데이터가 포함되는 경우가 많습니다. 이는 코딩 데이터가 모델 추론 능력을 향상시키는 데 도움이 될 수 있다는 일반적인 믿음 때문일 수도 있습니다.

   다음으로는 사전 학습에 사용한 토큰의 수와 모델 크기와 사전 학습에 사용한 토큰의 수와 평균 정확도를 살펴보았습니다.

   먼저, 모델의 크기와 학습에 사용하는 데이터의 양(토큰 수) 간의 관계를 연구한 친칠라 법칙(Chinchilla Law)에 따르면, 모델의 파라매터 크기와 학습 토큰 수 사이의 최적 비율은 약 20이 되어야 한다고 제안하고 있습니다. 예를 들어, 1B 모델의 경우에는 20B 토큰 규모를 갖는 학습 데이터셋이 필요하다고 합니다.

   2022년부터 2024년까지 출시된 SLM들의 크기와 학습 토큰 수를 통계적으로 분석한 결과(아래 그림 좌측 (a)), 일반적으로 모델이 클수록 트레이닝에 사용되는 토큰의 수가 많으며, 최신 모델일수록 학습 토큰의 수가 많아지는 경향이 있습니다. 주목할 만한 점은 SLM이 모델 크기에 관계없이 친칠라 법칙에서 제안하는 것보다 훨씬 많은 수의 토큰(일반적으로 1.5T 이상)으로 학습하고 있다는 것입니다.

   SLM이 사전 학습에 사용한 토큰 수와 평균 정확도를 분석한 결과(아래 그림 우측(b))를 살펴보면, 일반적으로 이 두가지 지표는 양의 상관관계(positive correlation)가 있으며, 이는 학습 토큰 수가 700B 미만인 경우에 두드러지게 나타납니다. 하지만 학습 토큰이 1T를 초과하는 경우에는 학습 데이터의 품질이 학습 토큰의 양보다 더 중요하기 때문에 상관관계는 약하게 나타납니다.

      주요 인사이트: SLM 의 학습 데이터셋에서는 2가지 주요 관찰점이 있습니다:

     * 학습 데이터의 품질은 SLM의 성능에 매우 중요하며, 최근 SLM 연구에서 점점 더 많은 관심을 받고 있습니다. 일반적으로 SLM에 데이터 품질이 미치는 영향은 일반적으로 데이터의 양과 모델 구조보다 더 큽니다. 데이터셋 연구에서 주목할만한 추세는 모델 기반의 필터링을 사용하는 것으로, FineWeb-Edu(1.3T/5.4T) 및 DCLM-baseline(4T)이 주요한 예입니다. 이 두가지 데이터셋으로 학습한 SLM은 비공개 데이터셋에서 학습된 SLM 대비 경쟁력있는 성능을 보였습니다.
     * 최근 SLM은 모델의 크기를 무시하고 대규모의 학습 토큰(일반적으로 1.5T 이상)을 사용하여 학습합니다. 경우에 따라 더 작은 양의 데이터를 사용하기도 합니다. (예. Qwen2-0.5B는 12T의 토큰을 사용했지만, Qwen2-1.5B는 7T의 토큰만 사용합니다.) 이는 친칠라 법칙에 비해 상당히 ""과도하게 학습(over-training)""되었음을 의미하며, 이러한 과도한 학습은 더 많은 학습 시간을 투자하여 더 나은 성능의 SLM(powerful SLM)을 배포하기 위해 사용합니다.

    학습 알고리즘 (Training Algorithm)

   SLM 학습을 위한 다양한 알고리즘들이 존재합니다. 주요한 학습 알고리즘으로는 Maximal Update Parameterization(μP), 지식 증류(Knowledge Distillation), 두 단계 사전학습(Two Stage Pre-training) 전략이 있습니다.
    1. Maximal Update Parameterization(μP): 모델 초기화(initialization) 및 레이어별 학습률(layer-wise learning rate), 활성화 크기(activation magnitude) 등을 제어하여 모델 레이어의 너비(model's layer width)와 상관없이 안정적인 학습을 보장합니다. 이 방법은 학습 안정성을 향상시킬뿐만 아니라, 소규모 모델에서 대규모 모델로 학습 하이퍼파라미터의 전이가능성(transferability)를 개선하여 학습률(learning rate) 등을 동일하게 사용할 수 있습니다. Cerebras-GPT가 이 기법을 사용하여 모델을 학습합니다.
    2. 지식 증류(Knowledge Distillation): 대규모 언어 모델(LLM)에서 주요하게 사용되는 개념으로, 대규모의 복잡한 교사 모델로부터 가치있는 지식을 추출하여 더 작고 효율적인 학생 모델에 학습시키는 것입니다. 이러한 지식 증류(KD) 기법은 두 모델의 출력의 차이를 최소화하는 방식으로 동작하여 학생 모델이 교사 모델의 행동과 예측을 대략적으로 학습하도록 하는 것이 핵심입니다. LaMini-GPT와 Gemma-2이 이 기법을 사용하였습니다.
    3. 두 단계 사전학습(Two Stage Pre-training): 이름 그대로 서로 다른 2단계를 거치며 모델을 학습하는 학습 전략입니다. 먼저 사전 학습 단계(Pretraining Phase)에서는 대규모의 저품질 데이터를 사용하여 학습하게 됩니다. 이 과정에는 더 많은 연산 자원을 필요로 합니다. 이후 강화 단계(Annealing Phase)에서는 고품질의, 특정 작업 중심의 SFT(Supervised Fine-Tuning) 데이터를 사전 학습 데이터에 혼합하여 사용합니다. MiniCPM이 이 기법을 사용하고 있습니다.

  SLM의 성능(Capabilities)

    SLM 평가 데이터셋과 지표(Evaluation Datasets and Metrics)

   이 연구에서는 SLM의 성능을 평가하기 위한 12개의 데이터셋을 상식 추론(Commonsense Reasoning), 문제 해결(Problem-Solving), 수학적 추론(Mathematics)의 3가지 분류로 정리했습니다:

        이름         유형                     설명 및 용도
   HellaSwag     상식 추론  서술 이해를 테스트하며, 가능한 문장의 완성을 평가합니다.
   TruthfulQA    상식 추론  모델이 거짓 정보를 제공하지 않도록 평가하는 데이터셋입니다.
   Winogrande    상식 추론  대명사 모호성 해결을 통해 상식 추론 능력을 평가하는 데이터셋입니다.
   CommonsenseQA 상식 추론  일상 지식을 요구하는 다중 선택형 질문으로 구성된 상식 추론 문제를 제공합니다.
   PIQA          상식 추론  물리적 상식 추론과 객체 상호작용을 평가하는 데이터셋입니다.
   OpenBookQA    상식 추론  과학적 지식과 상식을 결합하여 풀어야 하는 개방형 과학 문제들을 포함합니다.
   BoolQ         상식 추론  예/아니오 질문을 통해 상식 및 사실적 추론 능력을 평가합니다.
   ARC Easy      문제 해결  일반 지식과 추론을 테스트하는 간단한 과학 문제를 포함한 데이터셋입니다.
   ARC Challenge 문제 해결  지식 통합이 필요한 복잡한 과학 시험 문제를 제공합니다.
   MMLU          문제 해결  다양한 학문 분야에서 문제 해결 능력을 평가하는 데이터셋입니다.
   GSM8K         수학적 추론 초등학교 수준의 수학적 추론 능력을 평가하는 데이터셋입니다.
   Minerva Math  수학적 추론 다양한 주제에서 고급 수학적 추론 능력을 평가합니다.

   평가 시에는 전체 평가 데이터셋의 수 대비 정확한 예측의 수를 비율로 계산한 정확도(Accuracy)를 주요 지표로 사용합니다. 상식 추론, 문제 해결 및 수학 작업의 분야에서는 정답을 선택했는지나 얼마나 정확한 솔루션을 제공하는지를 평가합니다.

    SLM의 전반적인 성능(Overall Capabilities)

   상식 추론, 문제 해결, 수학의 세 가지 과제에 대해 선별된 SLM들을 대상으로 실험을 실시하여 진행 상황을 아래 그림과 같이 분석했습니다. 전체적으로 상당한 성능 향상이 있음을 확인할 수 있으며, 구체적으로 각 과제별로 10.4%, 13.5%, 13.5% 향상되었습니다. 이에 비해 오픈소스 대규모 언어 모델인 LLaMA 모델은 같은 기간 동안 평균 7.5%의 개선에 그쳤습니다:

   특히, 비공개 데이터셋으로 학습한 Microsoft의 Phi 제품군은 7B 규모의 최신 LLaMA 3.1과 비슷한 수준의 성능(상식적 추론에서 67.6%, 문제 해결에서 72.4%)를 달성하여 다른 모든 모델보다 뛰어난 성능을 보였습니다. 아직 수학 분야에서 일부 차이가 나긴 하지만, 일반적인 추론 분야에서는 SLM과 LLM의 격차가 빠르게 좁혀지고 있습니다. Qwen2와 같은 예외가 존재하지만, 일반적으로는 모델의 크기가 클수록 성능이 향상되는 경향성을 보입니다.

   일부 선구적인 SLM은 비공개 데이터셋을 사용하여 학습하고 있지만, 상식 추론 작업에서의 오픈소스 모델과 비공개 모델 간의 격차는 점차 좁혀지고 있습니다. 일례로 SmolLM과 DCLM-1B는 DCLM과 FineWeb-Edu와 같은 고품질 데이터셋 덕분에 상식 추론 분야에서 매우 뛰어난 성능을 발휘합니다(각각 64.2%와 63.8% 달성). 그러나 복잡한 추론이나 논리가 필요한 작업, 특히 수학에서는 고품질 데이터셋이 부족하기 때문에 여전히 상당한 격차를 보이고 있습니다.

      주요 인사이트: SLM의 발전에서 4가지 주요 관찰점이 있습니다:

     * 2022년부터 2024년까지 SLM은 다양한 언어 작업에서 상당한 성능 향상이 있었습니다. 전반적으로 상당한 성능 향상을 보이며, (1/2/3/3.1 버전의) LLaMA-7B의 개선을 앞지르고 있습니다. 이러한 결과는 On-Device에서 다양한 세부 작업(Downstream Task)를 해결할 수 있음을 기대하게 합니다.
     * Phi 모델군은 대부분의 작업에서 지속적으로 최첨단의 성능(State-of-the-Art)을 보이고 있습니다. Phi-3-mini는 2024년 9월 현재 Llama-3.1-8B에 필적하는 정확도를 달성했습니다. 이러한 성능은 Microsoft의 세심한 데이터 엔지니어링 덕분인 것으로 추정되지만, 특정 데이터셋에 대한 지시적 튜닝(instructive tuning)과 잠재적 과적합(potential overfitting)에 기인할 수도 있습니다.
     * 일반적으로 모델의 크기가 클수록 성능 또한 향상되지만, Qwen2-1.5B와 같은 예외적인 경우도 있습니다. 이러한 예외는 더 작은 모델이 특정 작업에서 뛰어난 성능을 발휘할 수 있음을 보입니다.
     * 상식 추론 분야에서 오픈소스 데이터셋으로 학습한 SLM들의 성능이 비공개 SLM과의 성능 격차를 좁혀가고 있습니다. 하지만 복잡한 추론이나 논리가 필요한 작업에서는 여전히 상당한 격차가 존재하여, 수학적 추론에 초점을 맞춘 데이터셋이 필요합니다.

    문맥 내 학습 능력(In-Context Learning Capabilities)

   문맥 내 학습(In-Context Learning, ICL)은 SLM의 중요한 능력으로, 주어진 입력 문맥을 바탕으로 새로운 작업을 수행하는 능력입니다. 상식 추론과 문제 해결을 포함한 8가지 작업에서 다양한 모델들과 각 모델의 2B 크기의 변형을 사용하여 문맥 내 학습(ICL) 능력에 대한 실험을 수행했습니다. 일반적으로 SLM은 모든 과제에서 상당한 이점을 얻을 수 있었습니다. 하지만, HellaSwag 및 PIQA 같이 단순한 데이터셋들에서는 예외적으로 ICL 학습 예시 수(ICL Shots)과 관계없이 비슷한 성능을 보였습니다. 그 외에는 평균적으로 5개의 예시(5-shots)를 사용한 문맥 내 학습은 모든 작업에서 제로샷 성능을 2.1% 향상시킵니다.

   대표적으로 Gemma2 모델은 4.8%의 정확도가 증가하여 가장 큰 개선을 보였습니다. 예외적으로 LaMini 모델은 2% 이상의 성능 저하가 나타났습니다. 이는 LaMini가 학습 데이터셋에 과적합(overfitting)하고 있어 추가적인 예시를 제시했을 때 노이즈가 발생할 수 있다는 가설을 세웠습니다.

   일반적으로 SLM의 모델 크기가 커질수록 SLM의 문맥 내 학습 성능(ICL Capability)이 향상되는 것을 확인할 수 있었습니다.

      주요 인사이트: SLM의 문맥 내 학습 능력에서는 2가지 주요 관찰점이 있습니다:

     * 일반적으로 대부분의 SLM은 일정 수준의 문맥 내 학습 능력을 포함하고 있습니다. 하지만 이러한 능력은 작업의 종류에 따라 다르게 나타납니다: 대부분의 SLM은 Arc Challenge 작업에서는 크게 향상되지만, HellaSwag나 PIQA 같은 경우에는 미미합니다.
     * SLM의 모델 크기가 클수록 작은 모델 대비 문맥 내 학습 능력이 더 강한 경향성을 보입니다. LaMini와 같은 일부 작은 규모의 SLM은 문맥 내 학습 사용 시 성능이 저하되는 현상도 보입니다.

  SLM의 실행 비용(Runtime Cost)

   SLM의 실행 비용(Runtime Cost) 은 모델을 실제 기기에서 실행할 때 발생하는 지연 시간(latency)과 메모리 사용량(memory footprint)을 포함합니다. 이 연구에서는 SLM의 런타임 성능을 평가하고, 다양한 하드웨어에서의 실험 결과를 분석합니다. 또한 모델 구조(architecture)와 양자화(quantization)가 성능에 미치는 영향을 설명하며, 이를 통해 SLM이 실시간 환경에서 어떻게 최적화될 수 있는지 다룹니다.

   실행 비용을 측정할 때는 다음 2종류의 엣지 단말(Edge Device)을 사용했습니다. 드론이나 소형 로봇과 같은 엣지 단말에서 주로 사용하는 Jetson Orin와, 일상 생활에서 사람들이 주로 사용하는 스마트폰이며, 각각은 다음과 같습니다:

           기기명         하드웨어 종류                            사양(Specification)
   Jetson Orin NX 16GB GPU     1024-core NVIDIA Ampere architecture GPU with 32 tensor cores, 16G DRAM
   MEIZU 18Pro         CPU     Snapdragon 888, 8G RAM

   또한, 각 모델별 공식 매개변수의 수를 측정하는 방법이 다르기 때문에, 저자들은 llama.cpp에서 얻은 매개변수 값을 사용하였습니다. 추론 시점의 프리필(prefill) 단계와 디코드(decode) 단계로 나누어 측정하였으며, 별도로 명시하지 않은 한 프롬프트 길이는 50, 토큰 생성 길이는 50으로 설정하였습니다. 또한, 발열로 인한 성능 저하(thermal throttling)를 피하기 위해 10초 간격으로 테스트를 수행하였으며, 더 큰 모델을 측정하기 위해서는 4-bit 양자화(quantization)를 적용하였습니다.
     * 지연 시간 측정: 모델의 크기에 따라 첫 번째 토큰의 생성 시간(prefill)과 그 후의 각 토큰 생성 시간(decode)을 측정합니다.
     * 메모리 사용량 측정: KV 캐시와 메모리 버퍼 사용량을 측정하여 모델이 얼마나 많은 메모리를 차지하는지 분석합니다.

    실행 비용 개요(Overview)

   이 연구에서 다루는 SLM들의 추론 지연 시간(Inference Latency)과 메모리 사용량(Memory Footprint) 개요는 다음과 같습니다:
     * Inference Latency (추론 지연 시간): SLM의 추론 지연 시간은 모델의 크기에 따라 세 구간으로 나뉩니다: 0.1-1B, 1-2B, 2-3B. 이 구간 내에서 각 모델은 유사한 지연 시간을 보입니다. 구체적으로, 모델의 아키텍처가 지연 시간에 미치는 영향도 상당합니다. 예를 들어, Qwen2-0.5B는 같은 크기의 다른 모델보다 1.46배 긴 첫 번째 토큰 시간을 보이며, Qwen1.5-0.5B는 오히려 더 작은 모델인 OpenELM-1.1B와 유사한 성능을 보입니다.
          + Prefill 단계: 입력 프롬프트가 처리되고 KV 캐시가 생성되는 단계로, 여러 토큰이 병렬로 처리됩니다.
          + Decode 단계: 생성된 각 토큰을 기반으로 다음 토큰을 예측하는 단계로, 더 많은 메모리 자원이 필요합니다.
     * Memory Footprint (메모리 사용량): SLM의 메모리 사용량은 모델 크기와 문맥 길이(context length)에 따라 달라집니다. 특히 Bloom-560M과 Gemma-2B와 같은 모델은 매우 큰 어휘 크기(256,000개)를 가지므로 더 많은 메모리를 사용합니다. 반면, OpenELM 시리즈는 GQA(Group-Query Attention)를 사용하여 KV 캐시의 크기를 줄임으로써 메모리 사용량을 절약합니다.

      주요 인사이트: SLM의 실행 비용에서는 3가지 주요 관찰점이 있습니다:

     * 모델 크기 외에도 모델 구조가 지연 시간에 영향을 미칩니다. 예를 들어 Qwen1.5-0.5B는 Qwen2-0.5B보다 매개변수가 25.4% 더 많지만, Jetson Orin에서 31.9% 더 빠르게 실행됩니다. 이는 SLM 개발 시 배포될 하드웨어에 맞춰야 함을 의미합니다.
     * 모델 구조가 추론 속도에 미치는 영향은 디코드(Decode) 단계보다 프리필(prefill) 단계에서 더 크게 나타납니다. 이는 프리필 단계의 연산 밀도가 더 높기 때문으로, 디코딩 단계는 주로 메모리에 종속(Memory-bound)됩니다. 모델 구조의 차이는 연산량이 직접된(Compute-bound) 시나리오에 더 쉽게 영향을 미칠 수 있습니다. 예를 들어, 더 넓고 얕은 모델이 더 높은 연산 병렬성(computational parallelism)을 갖습니다.
     * 실행 시 모메리 사용량은 일반적으로 모델의 크기와 선형적 상관관계(linearly correlated)가 있습니다. 다만, 어휘집의 크기(vocabulary size)가 더 큰 일부 모델은 비슷한 크기의 다른 모델에 비해 메모리 사용량이 더 많습니다. 예를 들어, Bloom 모델군의 어휘집 크기는 250,880으로, 대부분의 모델보다 5배에서 8배 가량 더 큽니다.

    양자화 및 하드웨어가 미치는 영향(Impact of Quantization and Hardware)

   먼저, 다섯 가지 양자화 방법(Q8_0, Q6_K, Q5_K, Q4_K_M, Q3_K)과 양자화 전(FP16)의 Phi-1.5 모델의 지연 시간을 측정하여 양자화(Quantization)가 SLM의 실행 비용에 미치는 영향을 알아보았습니다:

   모바일 장치에서는 int8 연산 지원이 부족할 수 있지만, 여전히 메모리 접근 오버헤드는 효과적으로 줄일 수 있습니다. 이는 낮은 정밀도로 인해 데이터 압축이 발생하며, 결과적으로 캐시 활용도가 향상되기 때문입니다. 각 방법은 n-bit로 양자화하는 방식으로 이루어지며, Qn_K, Qn_K_M은 k-quant 방법을 사용해 중간 정도의 매개변수를 가진 모델을 n 비트로 양자화한 것이고, Qn_0는 대칭 양자화를 의미합니다.

   Prefill 단계에서의 양자화 효과는 프롬프트 길이가 짧을 때, 양자화는 지연 시간을 최소 25% 감소시킵니다. 그러나 프롬프트 길이가 길어질수록 이 효과는 감소하며, 프롬프트 길이가 50에 가까워지면 Q6_K와 Q3_K 양자화 방법은 양자화되지 않은 FP16 모델과 비슷하거나 오히려 더 긴 지연 시간을 보이기도 합니다. Q8_0, Q4_K_M, Q5_K 방법은 안정적인 성능 개선을 제공하며, 특히 Q4_K_M이 가장 좋은 성능을 보이며, 평균적으로 50%의 지연 시간 감소를 이끌어 냅니다.

   Decode 단계에서의 양자화 효과는 더 일관된 성능 개선이 이루어지며, 지연 시간이 최대 75% 감소하고, 최소 17%의 감소 효과가 나타납니다. 또한, Prefill 단계와 마찬가지로 Q4_K_M 방법이 가장 효과적이며, Q6_K가 가장 비효율적입니다.

      주요 인사이트: SLM의 양자화가 실행 비용에 미치는 영향에 대해서는 2가지 주요 관찰점이 있습니다:

     * 양자화의 이점은 프리필(prefill) 단계보다 디코드(decode) 단계에서 더 크게 나타납니다. 모바일 기기에서의 양자화는 주로 메모리 접근 오버헤드를 줄여줍니다. 디코드 단계는 메모리 대역폭에 더 많이 영향을 받기 때문에, 연산에 더 많은 영향을 받는 프리필 단계에 보다 양자화를 통해 더 많은 이점을 얻을 수 있습니다.
     * 양자화 정밀도(Quantization Precision)가 규칙적(regular)일수록 성능이 향상됩니다. 3-bit 양자화는 4-bit 양자화보다 더 높은 압축률을 제공하지만, 4-bit 양자화가 프리필 및 디코드 단계 모두에서 더 나은 성능을 제공합니다. 3-bit 양자화의 성능이 떨어지는 이유는 불규칙한 비트 폭(irregular bit-width)으로 인해 하드웨어 최적화 지원이 부족하고, 데이터 정렬 및 패딩(data alignment & padding)으로 인한 추가 오버헤드가 발생하기 때문입니다. 따라서 압축률이 낮지만 4-bit 양자화가 더 효율적이며, 마찬가지로 5-bit 및 6-bit 양자화도 압축률은 높지만 8-bit 양자화와 비슷하거나 더 높은 추론 지연 시간을 보입니다.

   다음으로, Bloom-1B1 모델을 Jetson Orin NX 16GB(GPU 사용)와 Meizu 18 Pro(CPU 사용)에서 테스트하여 하드웨어(Hardware)가 SLM의 실행 비용에 미치는 영향을 측정해보았습니다:

   Prefill 단계에서는 프롬프트 길이가 짧을 때 Jetson Orin이 Meizu 18 Pro보다 10배에서 20배 더 빠른 성능을 보입니다. 또한, 프롬프트 길이가 길어질수록 Jetson의 성능 우위가 더 분명해집니다. 프롬프트가 길어질수록 두 장치 모두 첫 번째 토큰을 생성하는 데 걸리는 시간이 선형적으로 증가하지만, Jetson은 더 긴 프롬프트에서도 안정적인 성능을 유지합니다.

   Decode 단계에서는 생성 토큰 수가 증가함에 따라 Meizu 18 Pro의 토큰당 지연 시간이 급격히 증가합니다. 특히 첫번째 토큰부터 10번째 토큰 사이에서 지연 시간이 급격히 상승하고, 이후로는 지연 시간이 일정해집니다. 이러한 Meizu 18 Pro의 급격한 지연 시간 상승은 온도 증가로 인한 것으로, DVFS(Dynamic Voltage and Frequency Scaling) 또는 열 스로틀링(Thermal Throttling)이 전력 소모와 주파수를 조정하면서 계산 효율성이 떨어지기 때문입니다. 반면, Jetson은 더 효율적인 냉각 시스템 덕분에 30개 토큰이 생성될 때까지 지연 시간 변동이 적고, 이후에서야 지연 시간 증가가 관찰됩니다.

      주요 인사이트: 하드웨어가 SLM의 실행 비용에 미치는 영향에 대해서는 2가지 주요 관찰점이 있습니다:

     * 디코드(decode) 단계는 순차적으로 각 토큰을 생성하는데 비해, 프리필(prefill) 단계에서는 프롬프트 내의 토큰을 병렬 처리가 가능하기 때문에 GPU에서 훨씬 빠른 성능을 보입니다.
     * 긴 추론 작업에서 Jetson이 스마트폰에 비해 더 나은 성능 안정성을 보입니다. 이는 Jetson이 상대적으로 단순한 하드웨어 구조로 인해 열 방출(heat dissipation)이 용이하기 때문입니다.

    지연시간 및 메모리 분석(Latency and Memory Breakdown)

   지연 시간을 더 세분화하여, Qwen1.5-0.5B와 Qwen2-0.5B 모델에 대해서 각 계층(layer)과 연산(operation)이 전체 지연 시간에서 차지하는 비율을 분석해보았습니다:

   Qwen1.5-0.5B와 Qwen2-0.5B 모델은 크기가 비슷하지만, 지연 시간(latency)에서 차이를 보이며, 각 모델의 지연 시간에 대한 세부 분석을 통해 각 계층(Embedding, Attention, FFN, LM_Head)이 차지하는 시간 분포를 측정하였습니다.

   프리필(Prefill) 단계에서는 Qwen1.5 모델에서 어텐션 계층이 FFN 계층보다 더 큰 비율을 차지하고 있습니다. 이는 KV 캐시의 크기 증가로 인해 어텐션 계층의 연산이 더 많이 요구되기 때문입니다. 반면, Qwen2 모델은 FFN 계층이 어텐션 계층보다 더 큰 비율을 차지합니다. 이는 Qwen2 모델이 FFN 계층이 더 넓기 때문에 발생하는 현상입니다.

   디코드(Decode) 단계에서는 Qwen1.5 모델의 어텐션 연산 비율이 더욱 커집니다. 이는 생성된 토큰이 이전에 생성된 토큰들과 상호작용하면서 더 많은 연산이 필요하기 때문이며, KV 캐시의 크기가 증가할수록 이러한 경향은 더욱 뚜렷해집니다. Qwen2 모델은 여전히 FFN 계층이 가장 많은 시간을 차지하고 있는데, 이는 FFN의 연산 폭이 넓어지면서 시간이 더 오래 걸리기 때문입니다.

   연산자(operator)를 분석해보면, 두 모델 모두에서 공통적으로 행렬-벡터 곱셈 연산(matrix-vector multiplication, mul_mat_vec_q)이 전체 연산 시간의 80% 이상을 차지합니다. 특히 Qwen2-0.5B 모델에서는 FFN 계층이 넓기 때문에 mul_mat_vec_q 연산이 더 많은 비중을 차지하게 됩니다.

   또한, 메모리(Memory) 사용량을 분석해보면 다음과 같습니다:

   분석 결과, 모델 크기뿐만 아니라 어휘집의 크기(vocabulary size) 또한 메모리 사용량에 큰 영향을 미친다는 점이 강조됩니다. 모델이 사용하는 어휘집의 크기가 클수록, 출력층에서 사용하는 연산 버퍼(Compute Buffer) 의 크기가 커집니다. 예를 들어, Bloom-560M 모델의 어휘집 크기는 250,880으로, 이로 인해 해당 모델의 연산 버퍼 크기가 492MB에 이르며, 이는 어휘집 크기가 32,000인 OpenELM-1.1B에 비해 3.5배 더 많은 메모리를 사용합니다.

   또한, GQA(Group-Query Attention)를 사용하는 모델은 MHA(Multi-Head Attention)를 사용하는 모델보다 KV Cache가 작습니다. 예를 들어, OpenELM-3B 모델의 KV 캐시 크기는 164MB인데, 이는 StableLM-zephyr-3B 모델보다 약 3.9배 더 작습니다.

   맥락 길이(context length) 가 길어지면, 연산 버퍼(Compute Buffer) 및 KV Cache가 모델 메모리 사용량의 주요 결정 요인이 됩니다. Qwen2 모델 시리즈에서 맥락 길이가 131,072에 도달하면, Compute Buffer와 KV Cache는 전체 메모리 사용량의 83%에서 87%를 차지합니다. 이에 반해 Qwen1.5 모델의 경우 최대 맥락 길이 32,768에서는 두 요소가 전체 메모리의 85%에서 90%를 차지합니다.

   이러한 분석을 통해 어휘집의 크기(Vocabulary Size)와 문맥 길이(Context Length)가 SLM의 메모리 사용에 미치는 영향을 명확히 알 수 있으며, 어휘집의 크기가 크고 문맥의 길이가 길수록 메모리 사용량이 급격히 증가하게 됩니다.

  결론 및 향후 연구 방향

   지금까지 100M부터 5B까지의 크기를 갖는 소규모 언어 모델(SLM)에 대한 종합적인 연구 및 성능 측정을 수행하고, 모델의 성능과 실행 비용 등을 평가했습니다. 이를 통해 SLM의 현재 성과와 한계를 분석하고, 향후 연구가 필요한 다양한 연구 주제들을 제시하고자 합니다:
     * SLM 아키텍처와 프로세서의 협력적 설계 및 최적화(Co-design and co-optimizations of SLM architecture and device processors.): SLM의 성능은 주어진 모델 크기 내에서도 아키텍처 구성에 따라 크게 달라질 수 있습니다. 예를 들어, 트랜스포머의 깊이-너비 비율, 어텐션 유형, 활성화 함수 등이 실행 속도에 미치는 영향은 매우 큽니다. 특히, NPU(Neural Processing Unit)와 같은 정수 연산 최적화 프로세서에서 효율적으로 실행될 수 있도록 SLM을 양자화하는 방법이 중요합니다. 최적의 정확도와 속도 간의 교환비(trade-offs)를 달성하기 위해, 특정 하드웨어에 맞춘 아키텍처 설계와 최적화가 필수적이며, 사전 학습 전에 속도에 최적화된 아키텍처를 찾는 것이 한 가지 방향이 될 수 있습니다.
     * 고품질 합성 데이터셋 구축(Constructing high-quality synthetic dataset): 최근에 발표된 DCLM과 FineWeb-Edu와 같은 사전 학습 데이터셋은 SLM의 성능을 크게 향상시켰습니다. 이러한 데이터셋의 핵심 혁신은 대규모 말뭉치(corpus)에서 고품질 데이터를 필터링하는데 사전 학습된 모델을 사용하는 것입니다. 아직 합성 데이터에 대한 연구는 초기 단계로, 많은 가능성을 가지고 있습니다. 데이터 중복 제거, 필터링, 혼합 및 평가와 같은 표준화된 합성 데이터 관리 프로세스의 구축이 시급합니다.
     * 디바이스 환경을 고려한 Chinchilla 법칙 확장(A deployment-aware Chinchilla law for model scaling): Chinchilla 법칙에 따르면, 모델 성능을 최적화하기 위해 모델 크기와 학습 데이터의 크기(토큰 수)의 균형(약 1:20)이 필요하지만, SLM은 제한된 디바이스 메모리와 연산 능력에 맞춰야 하기 때문에 학습 데이터 양을 훨씬 더 많이 사용하는 경향이 있습니다. 이러한 접근 방식은 어느 정도까지는 효과적이지만, 학습 데이터 양을 무한히 확장할 수는 없으므로, 최적의 데이터 확장 방법을 찾는 것은 여전히 해결해야 하는 문제입니다. 또한, 데이터 규모, 훈련 및 추론 비용뿐만 아니라 SLM의 라이프사이클과 경제적 이익도 고려해야 하며, MoE(Mixture-of-Experts, 전문가 혼합 모델)와 같은 희소성(sparsity)을 적용하면 이 문제는 더욱 복잡해집니다.
     * 개인화를 위한 지속적인 온-디바이스 학습(Continual on-device learning for personalization): SLM이 장치에 배포되면 장치 내 데이터(On-Device Data)를 활용하여 데이터 유출에 대한 걱정없이 더 나은 성능 또는 개인화를 수행할 수 있습니다. 이를 위한 첫 번째 접근법은 RAG(Retrieval-Augmented Generation) 기법을 사용하여 프롬프트에 개인 데이터를 주입하는 방법입니다. 이 방법은 텍스트 임베딩 생성과 프롬프트 처리 시간이 증가하며, 개인화를 위한 데이터를 장치에 오래 저장해야 하는 문제가 발생합니다. 두 번째 접근법은 SLM을 미세조정(fine-tuning)하는 방식으로, 개인화에 필요한 지식을 모델 가중치에 임베딩하고 데이터를 미세조정 후에 삭제할 수 있습니다. 그러나 온-디바이스의 미세 조정은 메모리 및 에너지 소모가 크기 때문에 심각한 자원 문제가 발생할 수 있습니다.
       제로차수 최적화(zeroth-order optimization)를 적용하여 메모리 내 활성화 값을 저장하지 않고, 추론 단계에서 하드웨어 가속기를 활용할 수 있는 방법에 대한 연구 등이 있을 수 있습니다.
     * 장치와 클라우드에서의 SLM과 LLM의 협업(Device-cloud SLM-LLM collaboration): SLM의 기능이 빠르게 발전하고 있지만, 클라우드에서 실행되는 대형 언어 모델(LLM)과의 격차는 여전히 존재합니다. 이를 해결하기 위해 장치와 클라우드의 협업이 중요한 연구 주제가 될 것입니다. 직관적으로, SLM은 장치에서 쉽게 해결할 수 있는 작업을 처리하고, 클라우드 LLM은 복잡한 작업을 처리하는 필터 역할을 할 수 있습니다. 하지만 SLM이 처리할 수 있는 작업과 그렇지 않은 작업을 어떻게 구분할 것인가에 대한 의사 결정 모듈이 필요하며, 장치와 클라우드 간의 적절한 협업 방식을 찾는 것에 대해서는 추가적인 연구가 필요합니다.
     * SLM 성능 평가의 공정성 문제(Benchmarking SLMs fairly): SLM은 특히 GSM8k와 같은 널리 사용되는 벤치마크에서 과적합 문제를 가지고 있습니다. 또한, 많은 SLM은 비공개 데이터셋을 사용하여 학습하기 때문에 그 성능을 공정하게 비교하는 데 어려움이 있습니다. SLM은 주로 장치 내(On-Device)에서 실행되므로, 클라우드 환경에서와는 다른 작업을 수행하게 됩니다. 스마트폰에 배포된 SLM은 사용자 데이터에 민감한 작업을 처리하는 경향이 있으며, 이러한 특화 작업(ad-hoc task)은 기존 벤치마크에는 포함되지 않기 때문에 중요한 평가 항목에서 제외되는 문제가 있을 수 있습니다.
     * 희소성(Sparsity)을 적용한 SLM(Sparse SLMs): 현재 SLM에서 희소성(Sparsity)을 적용한 연구는 거의 없습니다. 이는 LLM과 비교할 때 SLM이 상대적으로 낮은 희소성 수준을 가질 것으로 예상되며, 희소성을 활용한 속도 향상이나 메모리 절약의 이점이 제한적일 수 있기 때문입니다. 또한, MoE(Mixture-of-Experts, 전문가 혼합 모델)와 같은 희소성 기반 아키텍처는 메모리 사용량을 줄이는 대신 연산 복잡도가 증가할 수 있기 때문에 메모리 제약이 있는 장치에는 적합하지 않을 수 있습니다. 스마트폰의 외부 저장소(예: 플래시 메모리)를 활용하여 고정된 가중치(Cold Weights)를 저장해두고, 필요할 때 불러오는 방식으로 SLM을 더 확장할 수 있지만, 이러한 방법은 I/O 지연 시간에 대한 문제를 비롯하여 이종간(heterogeneous) 하드웨어 가속기와의 호환성을 유지하는 등의 문제에 대해 더
       많은 연구가 필요합니다.

  소규모 언어 모델에 대한 종합적인 연구 논문: Small Language Models: Survey, Measurements, and Insights

   https://arxiv.org/abs/2409.15790

  프로젝트 홈페이지

   https://ubiquitouslearning.github.io/TinyLLMLeaderBoard/#/slm

  GitHub 저장소

   https://github.com/UbiquitousLearning/SLM_Survey
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

   이 글은 GPT 모델로 정리한 글을 바탕으로 한 것으로, 원문의 내용 또는 의도와 다르게 정리된 내용이 있을 수 있습니다. 관심있는 내용이시라면 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다. 🤗

   ⚠️광고⚠️: 🔥파이토치 한국 사용자 모임🇰🇷이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일💌로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=17586","임베디드 리눅스에서 systemd가 문제가 되는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     임베디드 리눅스에서 systemd가 문제가 되는 이유

     * systemd는 시스템 관리와 관련된 통합 애플리케이션 세트로, 전통적인 init 프로세스를 대체하며 사용자 세션 관리, 장치 관리, 로깅, 타이밍 등 다양한 기능을 포함함
     * 대부분의 Linux 사용자는 systemd의 장단점에 관심이 없으나, 일부는 강력히 반대하거나 지지
     * 주류 Linux 배포판은 systemd를 채택했으며, 이는 주로 일반적인 데스크톱 환경에서의 이점 때문임

임베디드 Linux에서의 문제

     * 임베디드 시스템에서는 systemd의 장점이 오히려 단점이 될 수 있음
     * Raspberry Pi 3B에서의 메모리 사용량을 예로 들면, systemd가 SystemV init보다 더 많은 자원을 사용함
     * systemd-journald와 같은 systemd의 로깅 데몬도 자원을 많이 사용함
     * 임베디드 환경에서는 더 작은 대안이 필요하며, systemd는 이러한 환경에 최적화되지 않음

systemd의 복잡성과 부팅 시간

     * systemd는 부팅 시간을 줄일 수 있지만, 임베디드 시스템에서는 오히려 부팅 시간이 증가할 수 있음.
     * systemd의 복잡성과 기능은 일반적인 환경에서는 필요하지만, 임베디드 환경에서는 불필요한 경우가 많음.

대안의 부재

     * systemd가 대체하는 많은 서비스는 임베디드 환경에서 더 작고 빠른 대안이 존재하지만, 일부는 더 이상 대안이 없음
     * 예를 들어, udev 데몬은 systemd 프로젝트에 통합되었으며, 독립적인 대안이 거의 없음

systemd의 확산과 대안의 감소

     * systemd는 많은 기능을 포함하고 있으며, 배포판 관리자에게는 편리함.
     * systemd가 점점 더 많은 기능을 흡수하면서, 대안을 유지할 동기가 줄어들고 있음.
     * 이는 임베디드 환경에서 systemd가 적합하지 않은 경우 문제를 야기할 수 있음.

결론

     * systemd는 임베디드 환경에서 전통적인 대안보다 덜 효과적일 수 있음.
     * 주류 Linux 배포판에서 systemd를 사용하지 않는 것을 찾기 어려워지고 있음.
     * systemd의 확산으로 인해 Linux가 systemd 없이 상상하기 어려운 미래로 나아가고 있음.
     * 대안을 개발하거나 유지할 준비가 필요하며, systemd를 사용하지 않는 배포판을 계속 지원해야 함

   어디 systemd 뿐이겠습니까…

   busybox 의 init는 임베디드 기기를 위한 systemd의 훌륭한 대체재 입니다.
   그리고 임베디드기기 같이 제약된 시스템이면, 굳이 udev를 사용할게 아니라, 고정된 device node를 root 파일시스템에 포함하면 됩니다.

   제 경우가 예외중에 예외이긴 합니다만 갤탭에 우분투 올리고 거따 vscode올려 쓰는 저로서는 systemd때문에 눈물날때가 종종 있드라구요..

        Hacker News 의견

     * systemd는 많은 문제를 해결하며, 커뮤니티도 매우 응답성이 좋고 도움이 됨
          + 가끔 이상한 문제가 있지만 항상 해결책이 존재함
          + 메모리 사용은 중요하지 않으며, 대부분의 임베디드 Linux 장치는 1GB 이상의 RAM을 가짐
          + 작은 장치에서는 Zypher나 FreeRTOS를 사용함
     * OpenEmbedded/Yocto, Devuan, Gentoo는 여러 init 시스템을 제공함
     * Rustysd는 systemd의 동작을 일부 복제하는 서비스 관리자임
          + core 기능을 제공하며, 다양한 플랫폼에 systemd와 유사한 서비스 관리자를 제공할 수 있음
     * systemd를 선호하는 사람들은 주로 배포 관리자임
          + systemd는 다양한 시스템 유틸리티를 하나의 큰 빌드로 제공함
     * Unix 철학은 작은 도구들이 문제를 해결하는 것임
          + systemd는 초기에는 작았으나, 현재는 웹 기반으로 비디오 회의도 가능함
     * runit는 애플리케이션과 서비스를 감독하는 데 훌륭함
          + BusyBox에 내장되어 있으며 매우 가벼움
          + 설정이 매우 간단하며, 로깅 기능도 포함됨
          + Unix 철학을 거의 완벽하게 구현함
     * udev 없이 임베디드 시스템을 실행할 수 있음
          + 고정된 주변 장치와 커널 모듈을 사용하는 경우 가능함
     * RPi는 산업용 제어 보드의 폼 팩터를 데스크탑으로 변환함
          + 많은 소프트웨어가 이 세그먼트를 염두에 두고 작성되지 않음
     * Chimera Linux는 서비스 관리와 로그인/좌석 관리에서 흥미로운 방향으로 나아가고 있음
          + systemd의 gnulibc와 gcc 확장 사용이 문제임
     * systemd의 설치 크기가 임베디드 Linux에서 가장 큰 문제임
          + 64M RAM과 128M NAND 플래시를 가진 장치에서는 5M의 systemd가 비효율적임
     * systemd는 250MB의 RAM을 사용하여 임베디드 Linux에서 문제가 됨
          + mainstream 배포판을 고려하지 않는 시스템에서는 큰 문제가 아님
     * SysVInit는 외부 유틸리티에 의존하여 프로세스를 시작하고 중지함
          + 최소한의 경우에도 init 스크립트를 실행하기 위해 셀이 필요함
"
"https://news.hada.io/topic?id=17547","직접 만드는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               직접 만드는 기술

     * 세계의 창의적인 사람들
          + 전 세계의 창의적인 사람들이 다양한 고품질의 작품을 만들고 이를 인류와 자유롭게 공유하고 있음
     * Make it Yourself 디지털 책
          + 이 책은 1000개 이상의 유용한 DIY 프로젝트를 모아, 스스로 무언가를 만들 때 가능한 것들을 보여줌
          + 각 항목은 원래 프로젝트 웹사이트로 직접 연결되어 있어 필요한 모든 정보를 제공받을 수 있음
     * 영감의 원천
          + 이 책이 다음 프로젝트에 영감을 줄 수 있기를 바람

GN⁺의 정리

     * ""Make it Yourself""는 DIY 프로젝트를 통해 창의성을 발휘하고자 하는 사람들에게 유용한 자료임
     * 다양한 프로젝트를 통해 스스로 무언가를 만드는 즐거움과 가능성을 탐구할 수 있음
     * 비슷한 기능을 가진 프로젝트로는 Instructables와 Thingiverse가 추천됨
     * 이러한 자료는 창의적인 작업을 시작하거나 새로운 기술을 배우고자 하는 사람들에게 흥미로울 수 있음

        Hacker News 의견

     * n-o-d-e라는 프로젝트는 DIY 기술 및 개조에 관한 블로그 게시물과 비디오를 제작하는 곳임
          + 이 프로젝트는 특정 웹사이트에서 설명됨
     * PDF는 외부 사이트로 연결되는 그림들만 포함하고 있으며, 실제 지침은 포함되어 있지 않음
          + PDF는 단순히 인덱스나 카탈로그 역할을 함
     * 개인적으로 비슷한 프로젝트 링크를 모아둔 폴더가 있으며, 여유 시간과 집중력이 필요함
          + 삽화와 다양한 프로젝트를 한 권의 책으로 모은 점이 훌륭함
          + 평생 주말 프로젝트로 활용할 수 있을 것 같음
     * PDF 링크에 '다운로드' 옵션을 추가하면 새 브라우저 창 대신 다운로드가 가능할 것임
     * 무료로 제공되는 멋진 프로젝트 모음집이라는 점이 인상적임
          + 인쇄된 책으로 구매할 수 있는지 궁금함
          + 디자인과 영감이 뛰어남
     * 프로젝트는 멋지지만 약간 부족한 느낌이 있음
          + 제목과 설명이 페이지 하단에 숨겨져 있고, 모든 렌더링이 단순한 흑백임
          + PDF 형식의 이유가 궁금함
     * 집에서 시도해보라는 경고가 있음
     * 삽화가 마음에 들며, 모두 맞춤 제작된 것인지 궁금함
"
"https://news.hada.io/topic?id=17593","Rust의 가장 미묘한 구문","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Rust의 가장 미묘한 구문

Rust의 let과 const

     * let은 새로운 변수를 선언하는 데 사용됨
          + let PAT = EXPR; 형태로, 보기보단 더 강력함
          + 패턴 매칭과 결합하여 편리한 기능을 제공
               o let (a, b) = (5, 10);
               o let maybe_string: Option<String> = ..;
               o let Some(value) = maybe_string else { panic!(""die horribly"")};
     * const는 컴파일 타임에 계산되어 컴파일된 코드에 직접 포함되는 상수
          + const MY_VAR: &str = ""heyyyyyyyy man""; const SECRET: i32 = 0x1234;
          + const IDENT: TYPE = EXPR; 형태로, 타입을 명시해야 하며 패턴을 사용할 수 없음

헷갈리게 하는 것

     * const는 선언 순서에 상관없이 사용 가능함 (hoisting)

// X가 Y 뒤에 정의되어 있어도 컴파일됨
const Y: i32 = X + X;
const X: i32 = 5;

     * 함수 내부에서도 선언 가능하며, 그 상태에서도 호이스팅도 가능

fn oh_boy() -> i32 {
        return X;
        const X: i32 = 5;
        // ^ 컴파일 되며 동작함. 워닝 없음!
}

     * 자바스크립트 출신으로 이제 막 Rust를 배우는 프로그래머와 함께 작업하는 경우, 이 기능은 그들을 당황하게 만들 수 있는 훌륭한 기능임
     * 훌륭한 기능의 무해한 결과인데, 이제 해로운 결과를 작성해보기로 함

Rust의 Match

// let PAT = EXPR;
let x = 5;

// 이 경우, `x`는 패턴임. `5`를 `x`에 넣을 수 있는지 확인함
// 이 패턴은 항상 매치됨 -- 항상 5를 `x`라는 변수에 넣을 수 있음

// 모든 패턴이 반드시 매치될 필요는 없음. 예를 들어:
let (5, x) = (a, b);
// 여기서 표현식은 a == 5인 경우에만 패턴과 ""매치""
//
// 이를 ""반박 가능한(refutable)"" 패턴이라고 함
//
// `let` 선언에서, 반박 가능한 패턴은 ""거부된(refused)"" 경우를 처리해야 함:
let (5, x) = (a, b) else { panic!() };
//
// ...그렇지 않으면 ""조건부로 존재하는(conditionally existing)"" 변수를 갖게 될 수 있는데, 이는 좋지 않음

     * 그럼 match에 대해 알아봅시다. match는 무엇일까요?

// match는 패턴과 매치될 경우 수행할 작업의 목록
//
// match EXPR {
//    PAT => EXPR
//    PAT => EXPR
//    ..
// }

match (a, b) {
        (5, x) => {
                // 만약 (a,b)가 (5,x)와 매치되면, 이 블록이 실행됨
        },
        (x, 5) => {
                // 같은 방식으로: 만약 (a,b)가 (x, 5)와 매치되면..
        },
        (x, y) => {
                // 그리고 이것은 ""모든 것을 잡아내는"" 패턴으로, let (x,y) = (a,b)가 동작하는 방식과 같음
        }
}

고통을 줘 봅시다

     * 사람들을 혼란스럽게 하는 것도 재미있지만, 완전한 불행과 실제 버그를 야기하는 것은 어떨까?
     * 내가 보기엔 이것이 Rust의 가장 미묘한 문법임:
          + 이 글에서 가장 흥미로운 한 줄 : Rust의 가장 미묘한 문법은 상수 자체가 패턴이라는 것
     * 이 문법은 매칭 주변에 몇 가지 좋은 ergonomic을 추가함:

let input: i32 = ..;

const GOOD: i32 = 1;
const BAD: i32 = 2;

match input {
        // 이것은 input == GOOD인지 확인. 왜냐하면 GOOD은 상수이기 때문
        GOOD => println!(""input was 1""),
        // 이것은 input == BAD인지 확인. 왜냐하면 BAD는 상수이기 때문.
        BAD => println!(""input was 2""),
        // 이것은 otherwise = input으로 정의하고, 항상 매치됨...
        otherwise => println!(""input was {otherwise}""),
}

   그러나 상수를 대문자로 쓰는 것은 단순히 관례일 뿐. 그렇게 하지 말라는 컴파일러 경고일 뿐임.
const good: i32 = 1;
const bad: i32 = 2;
match input {
        // 음...
        good => {},
        bad => {},
        otherwise => {},
}

   이제 우리는 동일해 보이는 세 개의 분기를 가지고 있지만, 그것들이 하는 일은 해당 이름의 상수가 존재하는지에 따라 달라짐!
   더 나빠져 봅시다. 아래에선 어떤 일이 일어날까?
const GOOD: i32 = 1;
match input {
        // 오타...
        GOD => println!(""input was 1""),
        otherwise => println!(""input was not 1"")
}

   여기서는 컴파일러 경고가 나타나겠지만, 이 코드는 항상 input was 1을 출력할 것
   또는 좀 더 현실적으로:
// 이런, 실수로 이 임포트를 주석 처리하거나 삭제했음
// use crate::{SOME_GL_CONSTANT, OTHER_THING}

// 이런!
match value {
        SOME_GL_CONSTANT => ..,
        OTHER_THING => ..,
        _ => ..,
}

   이것은 사람들을 혼란스럽게 함. 특히 그들이 열거형으로 멋진 것들을 시도할 때 더욱.
enum MyEnum {
        A, B, C
}

// 보통은 이렇게 작성함
match value {
        MyEnum::A => ..,
        MyEnum::B => ..,
        MyEnum::C => ..,
}

// 하지만 이렇게 작성할 수도 있음
use MyEnum::*;
match value {
        A => {},
        B => {},
        C => {}
}

// 그리고 나서, 만약 MyEnum을 변경한다면...
enum MyEnum { A, B, D, E };
use MyEnum::*;

// 이것은 여전히 컴파일됨!
match value {
        A => {},
        B => {},
        C => {},
}

// `C`는 이제 ""모든 것을 잡아내는"" 패턴이 됨. 왜냐하면 `C`와 같은 것이 범위 내에 없기 때문.
// 여러분은 let C = value를 하고 있는 것이고, 이는 항상 매치됨!!!

   Clippy는 이렇게 하지 말라고 경고하는 많은 규칙을 가지고 있음. 왜냐하면 이것이 사람들을 항상 혼란스럽게 하기 때문.
   그러나 이것은 더욱 혼란스럽게 만들 수 있음:
// x를 5에 irrefutably 바인딩...
let x = 5;

// ...잠깐만요...
const x: i32 = 4;

   이 코드는 컴파일되지 않음. 왜냐하면 const x는 패턴이고, 상수는 호이스팅되며, 이제 이 코드는 다음과 같이 평가되기 때문:
let 4 = 5;

// error[E0005]: refutable pattern in local binding
//  --> src/main.rs:3:5
//   |
// 3 | let x = 5;
//   |     ^
//   |     |
//   |     패턴 `i32::MIN..=3_i32`와 `5_i32..=i32::MAX`가 커버되지 않음
//   |     누락된 패턴은 `x`가 새로운 변수가 아닌 상수 패턴으로 해석되기 때문에 커버되지 않음
//   |     도움말: 대신 변수를 도입하세요: `x_var`
//   |
//   = 참고: `let` 바인딩은 ""irrefutable pattern""을 필요로 함. 예를 들어 `struct`나 하나의 variant만 가진 `enum`처럼

   ""expr이 4와 같다""는 반박할 수 없는 매치가 아니며, 그렇지 않은 경우를 처리하지 않음

주위 모두를 짜증나게 만들기

// `maybe`가 Option<&str>이라고 가정. 어떤 텍스트일 수도 있고, None일 수도 있음.
let maybe_username: Option<&str> = ..;

// 이것은 한 줄 매치에서 Rust의 일반적인 패턴. 이것이 Some(..)과 매치한다면 우리는 그 문자열로 무언가를 할 수 있음.
if let Some(username) = maybe_username {
        // 그래서 이 코드는 username이 존재하면 실행됨...
        return username.to_uppercase();
}

// 그런데 말이죠... 이제 그 코드는 'username'이 Some(""hey"")과 매치할 때만 실행됨
const username: &str = ""hey"";

   상수 호이스팅과 상수가 패턴이라는 사실의 조합은 여러분이 수수께끼 같은 Rust 코드를 작성할 수 있게 해줌

이것은 실제 문제는 아님

     * 현실적으로, 이것이 혼란스러울 수 있는 유일한 이유는 여러분이 let UPPERCASE와 const lowercase를 작성할 수 있다는 것
     * 만약 대문자로 시작하는 변수를 만드는 것이 lint 오류였다면, 혼란은 일어나지 않을 것
          + 열거형 variant나 상수와 매치하려고 할 때 실수로 무언가를 바인딩할 수는 없을 것이기에
     * 하지만 분명히 하자면, 이것은 단지 언어의 재미있는 특이점일 뿐

macro_rules! f {
  ($cond: expr) => {
    if let Some(x) = $cond {
      println!(""i am some == {x}!"");
    } else {
      println!(""i am none"");
    }
  }
}

fn main() {
    f!(Some(100));

    {
        f!(Some(100));
        return;

        const x: i32 = 5;
    }
}

   사실 큰 문제는 아닌게 웬만한 개발 환경에는 랭귀지 서버가 있고
   거기서 다 추론해서 보여주기때문이죠

   러스트로버 랭귀지 서버의 기반인 rust-analyzer는 꽤나 강력한도구거든요

   그냥 어느 언어든 있는 다크패턴들을 모아다가
   이거는 헷갈림을 유발할 수 있음!

   이런 느낌의 글인거죠

   헐... 스럽네요. 러스트는 이걸 어찌할 계획일까요?
"
"https://news.hada.io/topic?id=17585","pg_flo – PostgreSQL 데이터를 실시간으로 스트리밍, 변환 및 재라우팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             pg_flo – PostgreSQL 데이터를 실시간으로 스트리밍, 변환 및 재라우팅

     * PostgreSQL 데이터베이스 간에 데이터를 이동하고 변환하는 가장 쉬운 방법을 제공
     * 실시간 스트리밍 : PostgreSQL 논리적 복제를 사용하여 거의 실시간으로 데이터 변경 사항을 스트리밍
     * 대량 복사 : 병렬 처리 가능한 대량 복사로 초기 데이터 동기화를 빠르게 수행
     * 강력한 변환 : 정규 표현식을 기반으로 변환을 적용하고, 민감한 데이터를 마스킹하며, 열 값에 따라 필터링
     * 유연한 라우팅 : 테이블 간 데이터를 매끄럽게 라우팅하며, 다른 이름의 테이블이나 동일한 테이블로 사용자 정의 열 매핑을 통해 라우팅
     * 변환 규칙 예시
          + 이메일 주소 마스킹: 이메일 열을 마스킹 문자로 변환.
          + 전화번호 형식화: 정규 표현식을 사용하여 전화번호 형식 변환.
     * 테이블 라우팅 및 열 매핑
          + 유연한 테이블 라우팅: 사용자 테이블을 고객 테이블로 라우팅하며, ID와 사용자 이름을 고객 ID와 고객 이름으로 매핑함.
          + 다중 테이블 라우팅: 주문 테이블을 거래 테이블로 라우팅하며, ID와 총 금액을 거래 ID와 금액으로 매핑함.
     * 일반적인 사용 사례
          + PostgreSQL DB 간에 실시간 데이터 복제
          + 데이터 변환을 포함한 ETL 파이프라인 구성
          + 데이터 리라우팅, 마스킹, 필터링
          + 다운타임 없이 데이터베이스 마이그레이션 실행
          + PostgreSQL에서 이벤트 스트리밍
     * 작동 방식
          + pg_flo는 PostgreSQL의 논리적 복제 시스템을 활용하여 데이터 변경 사항을 캡처하고 스트리밍함.
          + NATS를 메시지 브로커로 사용하여 WAL에서 읽기를 복제기 및 작업자 프로세스와 분리하여 유연성과 확장성을 제공함.
          + 변환과 필터링은 데이터가 목적지에 도달하기 전에 적용됨.

        Hacker News 의견

     * pg_flo 프로젝트는 매우 흥미로워 보이며, 특히 S3로의 아카이브와 저렴한 도구 버전이 매력적임
          + Debezium과 같은 도구는 대규모 데이터(TBs) 대신 소규모 데이터(GBs)로 작업할 수 있어 로컬 테스트가 용이함
          + Kafka와 Debezium을 사용하는 것은 단기적인 노력이며, 번거로움을 평가 중임
          + 팀에서 평가 중인 다른 솔루션으로는 peerdb가 있음
     * PostgreSQL 논리적 복제를 사용하여 메인 데이터베이스에서 데이터를 정리하고 S3로 아카이브하는 프로젝트를 진행 중임
          + 일부 테이블은 읽기 작업을 위해 보조 Postgres 인스턴스에서 사용 가능해야 하며, 이때 복제가 필요함
          + 메인 데이터베이스에서 두 가지 삭제 작업이 문제임
               o 첫 번째 삭제는 데이터 정리를 위한 것이며, 복제된 데이터베이스에 반영되지 않기를 원함
               o 두 번째 삭제는 롤백을 위한 것이며, 데이터 상태를 변경하므로 복제되어야 함
          + 이러한 두 가지 삭제 작업을 구분하여 롤백 삭제만 복제할 수 있는 방법이 있는지 궁금함
     * Postgres CDC 솔루션을 조사 중이며, pg_flo가 도움이 될 수 있을지 궁금함
          + 실패 모드에 대해 설명해줄 수 있는지 궁금함
          + 예를 들어, NATS 서버(또는 워커/복제자) 노드가 죽으면 어떻게 되는지 알고 싶음
          + Postgres에서 ElasticSearch/ClickHouse로 데이터를 이동하는 것이 얼마나 어려운지 궁금함
     * Debezium의 대안이 될 수 있기를 바람
          + Debezium은 처음에 전체 CDC 상태를 Kafka로 복사해야 하며, Kafka 보존 시간을 무한대로 설정해야 하는데, 이는 많은 Kafka 서비스 시스템에서 허용되지 않음
     * pglogical은 Postgres 내부에서 실행될 수 있지만, pg_flo는 확장이 아닌 외부 서비스로 보임
          + 이는 실제로 이점일 수 있음
          + Azure Postgres, Supabase, Neon 등 Postgres as a service 인스턴스와 함께 pg_flo를 사용할 수 있을지 궁금함
          + 벤더가 승인하지 않은 확장을 설치할 필요 없이 WAL을 읽을 수 있는지 궁금함
     * 이 도구를 사용해보는 것이 매우 기대됨
          + 네트워크 연결 끊김/불안정성 중간에 복사를 처리할 수 있는지 궁금함
     * Sequin과 비교했을 때 어떻게 다른지 궁금함
          + CDC 이벤트 기반 워크플로우를 가능하게 하면서도 임의로 이벤트 스트림을 필요에 따라 재생할 수 있는 도구를 찾고 있음
     * 비슷한 도구를 찾고 있었는데, 완벽한 타이밍임
          + 다양한 변환을 통해 대량 복사(예: 야간)를 수행하고, 지속적으로 스트리밍하지 않는 것이 지원되는지 궁금함
     * S3에 백업하는 것보다 복제를 사용하는 것이 더 나을지 궁금함
     * 매우 멋진 도구임
"
"https://news.hada.io/topic?id=17551","타입드 홀을 특징으로 하는 라이브 함수형 프로그래밍 환경 Hazel","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 타입드 홀을 특징으로 하는 라이브 함수형 프로그래밍 환경 Hazel

Hazel

     * Hazel은 타입 홀이 있는 불완전한 프로그램을 타입 체크하고 조작하며 실행할 수 있는 라이브 함수형 프로그래밍 환경임
     * 의미 없는 편집기 상태가 존재하지 않음

  동기

     * 프로그래밍 시, 빈칸, 타입 오류, 병합 충돌 등으로 인해 형식적으로 완전하지 않은 프로그램 텍스트와 작업하는 시간이 많음
     * 기존 프로그래밍 언어 정의는 이러한 구조에 공식적인 의미를 부여하지 않음
     * 프로그램 편집기와 도구들은 복잡한 임시 방편에 의존해야 함
     * Hazel은 불완전한 프로그램을 타입 이론에 기반하여 모델링함

  Hazel의 특징

     * Elm/ML과 유사한 함수형 프로그래밍 언어로 웹 기반 환경에서 구현됨
     * 불완전한 프로그램도 정적 및 동적으로 잘 정의됨
     * 연구 및 교육 플랫폼으로 활용 가능함

  뉴스 및 출판물

     * 2025년 1월: POPL 2025에서 조건부 승인된 Grove 논문
     * 2024년 10월: OOPSLA 2024에서 대형 언어 모델과 타입 홀을 결합한 연구 발표
     * 2024년 10월: HATRA 2024에서 Cyrus의 기조연설 예정
     * 2024년 9월: NSF에서 수업용 증명 보조 도구 개발을 위한 연구비 수여
     * 2024년 1월: POPL 2024에서 오류 지역화 및 복구에 관한 논문 발표
     * 2023년 10월: OOPSLA 2023에서 패턴 매칭에 관한 연구 발표
     * 2023년 1월: NSF CAREER 상 수상

  팀 Hazel

     * Hazel은 미시간 대학교의 Future of Programming Lab에서 주도하는 오픈 소스 연구 프로젝트임
     * 질문이나 기여에 관심이 있는 경우 팀 리더인 Cyrus Omar에게 연락 가능

GN⁺의 정리

     * Hazel은 불완전한 프로그램을 다루는 새로운 접근 방식을 제안하며, 프로그래밍 교육 및 연구에 유용한 플랫폼임
     * 타입 이론을 기반으로 하여 불완전한 프로그램도 실행 가능하게 함으로써, 프로그래밍의 미래를 탐구하는 데 기여함
     * 유사한 기능을 가진 프로젝트로는 Elm, ML, 그리고 다양한 프로그래밍 교육 도구들이 있음

        Hacker News 의견

     * Eclipse의 특징 중 하나는 불완전하거나 깨진 코드를 실행할 수 있는 기능이었음. 이는 Java의 Eclipse Compiler가 거의 모든 파일에 대해 바이트코드를 생성할 수 있었기 때문임. 이 기능은 매우 생산적인 환경을 제공했으며, 다른 대규모 시스템에서 구현되지 않아 아쉬움.
     * Haskell은 타입 홀을 제공하며, 이를 완성하거나 케이스를 분할하는 코드 액션을 제공하는 플러그인이 있음. Agda도 타입 홀을 가지고 있으며, 더 강력한 기능을 제공함.
     * Hazel에 대한 질문에 답변할 준비가 되어 있으며, 지난 4년간 Cyrus의 박사과정 학생으로 Hazel에서 작업해왔음. 현재 Hazel에서 라이브 프로그래밍을 위한 몰더블 프로젝셔널 인터페이스를 개발 중임.
          + Hazel에 추가한 기능 목록: GitHub 링크
          + 타입 홀과 Hazel 언어 서버를 사용하여 LLM 코드 완성을 위한 코드 컨텍스트 제공에 대해 발표한 영상: YouTube 링크
     * Hazel은 타입 홀이 특징인 라이브 함수형 프로그래밍 환경임. 관련 정보: Hacker News 링크
     * Tylr는 타일 기반 편집의 데모로, 새로운 구조 편집 방식임. 관련 정보: Hacker News 링크
     * Hazel의 코드 예제가 마음에 들며, 라이브 편집기와 오른쪽에 나타나는 문서화가 좋음. 하지만 라이브 편집기와 타입 체커 이상의 기능을 제공하는지, 실제로 프로그램을 작성할 수 있는지 궁금함.
     * 에디터 UI가 아름답고 모바일에서도 잘 작동함. 매우 인상적임.
     * ""let"" 바인딩이 ""in""으로 끝나는 문법이 흥미로움. 예시:
let comparison =
 (0 == 0, 0 < 1, 1 <= 1, 2 > 1, 1 >= 1)
in

       ""in"" 키워드의 이유를 아는 사람?
     * Idris에 대한 언급은 없었지만, 이 스타일의 개발을 처음 본 곳이 Idris였음. 관련 영상: YouTube 링크
     * Android 폰에서 플레이그라운드를 시도했지만, 키 입력이 소스 코드에 반영되지 않음. 커서를 탭하여 위치할 수 있고 가상 키보드가 나타나지만, 입력이 불가능함. 이는 버그인지 아니면 UX 문제인지 궁금함.
     * Hazel을 항상 좋아했으며, 아마도 교육에 훌륭한 도구일 것임. Hazel로 무엇이 만들어졌는지 궁금함.
"
"https://news.hada.io/topic?id=17507","Shopify, Salesforce 고객을 확보하면서 전자상거래 경쟁 심화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Shopify, Salesforce 고객을 확보하면서 전자상거래 경쟁 심화

     * Shopify는 지난 15년간 온라인 쇼핑몰을 원하는 중소기업의 필수 플랫폼으로 자리매김함
     * 최근 Shopify는 대기업 고객 유치에 집중하며 Salesforce의 전자상거래 고객을 빼앗으려 노력 중
     * Mattel, Toys R Us, Casper 등 수백 개의 Salesforce 고객사를 유치했으며, 다른 기업들에게도 ""Shopify로의 대규모 이전에 동참하라""고 독려하는 중
     * Shopify의 주요 장점은 저렴한 가격
          + Shopify COO Kaz Nejatian은 ""엔터프라이즈 소프트웨어가 비싼 이유는 판매를 위해 너무 많은 식사 접대가 필요하기 때문""이라고 Salesforce의 영업 방식을 꼬집음
     * Salesforce는 고객 서비스 등 Shopify에는 없는 기능을 제공하며, 트래픽 급증에도 더 잘 대응할 수 있다고 주장
          + ""하나의 유스케이스에 초점을 맞추고 '이것만으로도 더 싸다'고 하면 무엇이든 더 싸질 수밖에 없다""며 Shopify의 주장을 일축
            -팬데믹 이후 성장이 둔화된 Shopify, 대기업 고객 유치로 성장 가속화 모색
          + Shopify는 고객에게 서비스를 판매해 수익을 내는데, Mattel 같은 대기업의 주문량이 기존 중소기업 고객 기반보다 더 빠른 성장을 견인할 것으로 기대
          + Salesforce는 2016년 Demandware를 인수하며 전자상거래 시장에 진출했으나, 현재 Shopify의 매출이 이 부문을 앞질렀음
          + Salesforce 또한 Shopify 고객 유치에 나서고 있지만, 전자상거래 사업은 가장 성장이 더딘 부문
     * 중소기업 대상으로 성장한 Shopify, 이제는 대기업 고객 유치에 주력
          + Shopify는 중소기업이 손쉽게 온라인 스토어를 만들 수 있도록 지원하며 성장
          + 최근에는 대기업 고객 유치를 위해 Salesforce 대비 최대 50%까지 저렴한 수수료를 내세우며 공격적 마케팅 전개 중
          + 유연한 플랫폼, 맞춤형 페이지 제작 등 대기업 니즈에 맞는 새로운 기능도 추가
     * Mattel은 왜 Salesforce에서 Shopify로 전환했나
          + 트래픽에 연동된 수수료 체계와 유연한 플랫폼이 Mattel의 니즈에 부합
          + ""대규모 연간 라이선스 모델에서 유연하고 거래 기반 비용 모델로 전환함으로써 비용 절감 효과도 있었다""
     * Shopify의 약진에 Salesforce도 대응 나서
          + 애널리스트들은 ""Shopify가 대기업도 사용 가능할 만큼 역량을 갖췄고, Salesforce는 전자상거래 고객 이탈에 취약해졌다""고 평가
          + Salesforce는 대기업 고객 유지를 위해 가격 유연성 제고 등 대책 마련에 나선 상태
          + 매출 3억 달러 이상 대기업은 여전히 Salesforce의 정교한 도구를 선호할 것이나, 그 이하 기업은 비용 절감을 위해 Shopify로 이동하는 추세

GN⁺의 의견

     * Shopify와 Salesforce의 전자상거래 플랫폼 경쟁 구도는 클라우드 기반 SaaS 기업 간 경쟁이 심화되는 트렌드를 반영하는 것
     * 클라우드 인프라 비용 하락, 오픈소스 기술 발전 등으로 진입장벽이 낮아지면서 후발주자의 약진이 두드러짐
     * 다만 대기업 시장에서는 플랫폼의 안정성, 보안, 기업용 기능 등이 여전히 중요한 차별화 요소가 될 것
     * 전자상거래 플랫폼을 도입할 때는 자사의 규모, 요구사항, 성장 전략 등을 면밀히 분석해 최적의 솔루션을 선택하는 것이 관건
     * 유사한 기능을 제공하는 Adobe Commerce(Magento), SAP Commerce Cloud, Oracle CX Commerce 등의 플랫폼도 검토해 볼 만함

        Hacker News 의견

     * Salesforce B2C Commerce Cloud Architect로서 몇 달째 실직 상태에 있으며, 기술을 재구성해야 할 필요성을 느끼고 있음
          + Demandware 시절부터 플랫폼에서 일해왔으며, 여러 구현 및 사이트 작업 경험이 있음
          + Salesforce가 전자상거래를 위한 마이크로서비스 아키텍처를 강하게 추진하고 있음
          + 마이크로서비스 시스템을 사용하는 직장에서 일했으나, 기술적 이유 외의 문제로 직장을 그만두게 되었음
     * Salesforce Open Commerce로의 마이그레이션 프로젝트를 이끌었으나, 실망스러운 경험이었음
          + 약속된 기능이 없고, 복잡한 해킹을 통해 기능을 구현해야 했음
          + CIO/CTO를 설득하는 데는 능숙하지만, 실제 운영에서는 약속이 지켜지지 않았음
     * 상위 1000개 전자상거래 사이트 중 대부분이 Salesforce를 사용하고 있으며, 나머지는 Shopify를 사용하고 있음
          + Demandware는 맞춤형 요구사항에 강했으나, 현재는 그 수준의 맞춤화가 필요한 회사가 줄어들고 있음
     * Salesforce의 기능을 잘 이해하지 못하며, CRM 소프트웨어로만 알고 있었음
          + Shopify는 설정이 쉽고, 다양한 통합 기능을 제공하며, 비기술적인 소규모 비즈니스에서도 사용 가능함
     * Salesforce 도구를 사용한 경험이 부정적이었으며, 복잡하고 다루기 어려웠음
          + Shopify는 상대적으로 이해하기 쉬움
     * Salesforce가 큰 기업에 필수 도구로 홍보되지만, 실제로는 일부 팀만 사용하는 경우가 많음
          + Salesforce는 필수 도구라기보다는 과시용에 가까움
     * Salesforce는 연간 매출 3억 달러 이상의 대기업에 여전히 매력적일 것임
          + 작은 기업에 대한 관심은 적은 것으로 보임
     * Shopify는 기술 통합 및 사용 용이성 측면에서 최고의 파트너였음
          + Demandware가 Salesforce에 인수되기 전이 더 나은 시절이었음
          + Salesforce에서는 시간이 오래 걸리는 작업이 Shopify에서는 빠르게 처리 가능함
     * 이 스레드가 Salesforce의 정확한 기능과 판매 내용을 이해하는 데 도움이 될 수 있음
"
"https://news.hada.io/topic?id=17527","뉴욕시에서 제이워킹 합법화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             뉴욕시에서 제이워킹 합법화

뉴욕에서의 보행자 법 개정

     * 새로운 법의 통과
          + 뉴욕시에서 보행자가 횡단보도 외부에서 길을 건너는 것이 합법화됨.
          + 시의회에서 통과된 법안이 시장의 서명이나 거부 없이 30일 후 자동으로 법이 됨.
          + 법안의 주 스폰서인 메르세데스 나르시스는 이 법이 인종적 불평등을 해소한다고 주장함.
     * 법의 주요 내용
          + 보행자는 횡단보도 외부에서도 길을 건널 수 있으며, 신호등에 반하여 길을 건너는 것도 더 이상 위반이 아님.
          + 그러나 횡단보도 외부에서 길을 건널 때는 다른 차량에 양보해야 함.
     * 안전과 책임
          + 시장 대변인은 신호등에 반하여 길을 건너는 것이 위험하다고 경고함.
          + 보행자가 사고를 일으킬 경우 민사 책임이 있을 수 있음.
     * 다른 도시의 사례
          + 덴버, 캔자스시티, 캘리포니아, 네바다, 버지니아 등 다른 도시와 주에서도 최근 몇 년간 보행자 법을 비범죄화함.
     * 법의 역사와 배경
          + 1930년대 자동차 산업이 보행자를 도로에서 멀리 떨어뜨리기 위해 추진한 법임.
          + ""제이워킹""이라는 용어는 20세기 초 중서부 속어에서 유래함.
     * 법의 영향
          + 법률 지원 협회는 이 법이 오랫동안 필요했다고 주장하며, 경찰이 이 법을 구실로 주민을 멈추고 질문하는 것을 비판함.
          + 경찰은 제이워킹 단속보다 더 중요한 일에 집중할 수 있게 됨.

GN⁺의 정리

     * 뉴욕시의 제이워킹 합법화는 인종적 불평등을 해소하고 경찰의 자원을 더 중요한 일에 집중할 수 있게 함.
     * 이 법은 보행자와 운전자의 안전을 고려하면서도 일상적인 행동을 범죄화하지 않으려는 시도의 일환임.
     * 다른 도시들도 비슷한 법을 도입하고 있어, 보행자 안전과 도로 설계에 대한 새로운 접근법을 제시함.
     * 이 법이 보행자와 운전자의 안전에 미치는 영향에 대한 지속적인 모니터링이 필요함.

        Hacker News 의견

     * 자동차 산업과 로비스트들이 보행자보다 운전자의 편의를 위해 'jaywalking'을 만들었음. 뉴욕에서는 보행자와 대중교통 이용자가 많아 잘 시행되지 않았음. 뉴욕에서는 'jaywalking'이 단순히 '걷기'로 여겨짐
     * 'jaywalking'은 경찰이 사람들을 괴롭히기 위한 구실로 사용되는 경우가 많음. 특히 젊은이와 유색인종에게 해당됨. 보행 시 차가 브레이크를 밟거나 경로를 변경해야 한다면 잘못된 것임. 다른 사람이 'jaywalking'한다고 따라하지 말고 자신의 경로를 평가해야 함
     * 캘리포니아에서 법이 바뀐 후 안전하고 편리할 때 어디서든 건널 수 있게 되어 보행의 편리함과 속도가 크게 향상되었음
     * 'jaywalking'이라는 단어는 원래 잘못된 방향으로 운전하는 것을 뜻하는 'jay-driving'에서 유래함. 처음에는 보도에서의 예절 부족을 의미했음
     * 많은 도시들이 교통사고 사망자를 줄이기 위한 프로그램을 운영 중임. 보행자와 자전거 이용자를 보호하기 위해 교통을 분리하고 속도를 줄이는 등의 조치를 취함. 그러나 사람들이 자유롭게 도로를 건너도록 하는 것은 이러한 목표와 충돌할 수 있음
     * 필리핀 마닐라에서는 도로 건너기가 매우 혼란스러움. 사람들이 교차로에서 오랫동안 기다리며 차에 양보함. 교통이 열릴 때 건너면 사람들이 이상하게 쳐다봄
     * 1990년대 캘리포니아 방문 시 친구들이 신호를 기다리는 모습에 놀랐음. 안전할 때 길을 건너면 무례하게 여겨졌음
     * 일반적으로 'jaywalking'은 합법적이어야 하지만, 보행 신호를 무시하고 대규모 인파가 길을 건너면 교통이 움직일 수 없게 됨. 이러한 경우 도로를 보행자 전용으로 만들거나 수동으로 통제하는 것이 필요할 수 있음
     * 홍콩과 중국 본토에서는 보도를 난간으로 막아 보행자가 자유롭게 도로를 건너지 못하게 함. 조금의 'jaywalking'은 괜찮지만, 과도한 'jaywalking'은 도로를 사용할 수 없게 만듦
     * 대부분의 지역에서 'jaywalking'은 교통 흐름을 방해할 경우 위반으로 간주됨. 교통 흐름을 방해하면 티켓을 받을 수 있음. 이는 대부분의 지역에서 표준임
"
"https://news.hada.io/topic?id=17531","Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.

   요즘 있었던 일, 계획, 일상, 자랑, 고민, 추천 등 하고 싶은 말을 댓글로 작성해주세요.

   한달에 한번 등록됩니다

   위클리에 있는 링크들이 새 창으로 열리면 좋을 것 같습니다. 감사합니다!
"
"https://news.hada.io/topic?id=17517","Apple Vision Pro, 11월 15일 금요일 대한민국에 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Apple Vision Pro, 11월 15일 금요일 대한민국에 출시

     * 11월 4일 월요일 오전 10시부터 사전 주문할 수 있으며 11월 15일 금요일에 정식 출시
     * 혁신적인 운영체제 visionOS로 구동되는 공간 컴퓨터
     * 앱을 쳐다보고 두 손가락을 맞대어 탭하는 것만으로 앱과 상호작용하고, 음성을 사용해 텍스트를 받아쓰거나 가상 키보드를 사용해 타이핑
     * App Store에는 현재 Apple Vision Pro를 위해 개발된 2,500개 이상의 앱이 있음
          + 카카오톡, WEBTOON, TVING 등 한국에서 인기 있는 앱을 비롯해 150만 개 이상의 iPhone 및 iPad 앱이 Vision Pro와 완벽하게 호환
     * Mac 가상 디스플레이를 이용하면 무선으로 Mac을 Vision Pro로 가져와 자신만의 거대한 휴대용 디스플레이에서 Mac 앱에 액세스 가능
     * 180도 시야각을 갖춘 3D 8K 녹화 동영상과 공간 음향을 활용한 Apple Immersive Video
     * Apple TV+, Amazon Prime Video, Disney+ with Hulu, MUBI 등 인기 스트리밍 서비스 지원 (Netflix 는 Safari)
     * 가격은 4,990,000원부터 시작하며 256GB, 512GB, 1TB 저장 용량으로 제공
     * 여행용 케이스는 299,000원, AppleCare+는 729,000원

   비전프로 유저입니다. 이 글 보고 혹시 이제 카카오톡이 지원되나 하고 찾아봤는데 역시나 안 뜨는군요.
"
"https://news.hada.io/topic?id=17480","Show GN: New Swagger-UI combined with Cloud TypeScript Editor and embedded SDK","                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: New Swagger-UI combined with Cloud TypeScript Editor and embedded SDK

     * Swagger (OpenAPI) 문서로부터 TypeScript SDK 연동 라이브러리 생성
     * StackBlitzs 라는 Cloud TypeScript Editor 와 Swagger-UI 결합
     * API 사용을 보다 편리하고 안전하게 해 볼 수 있다
     * 이외에 Mockup Simulator 를 제공하며
     * E2E 테스트 코드를 자동으로 생성해주어 편의성 제공

   제목에 TyypeScrit 이거는 오타인거죠?

   헉 그렇습니다
"
"https://news.hada.io/topic?id=17520","검은 플라스틱을 사용한 요리의 주의 필요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        검은 플라스틱을 사용한 요리의 주의 필요성

     * 검은색 플라스틱 주걱을 버려야 하는 이유
          + 검은색 플라스틱 주걱은 요리 중 화학물질이 요리 기름으로 스며들 가능성이 있음
          + 플라스틱 소비재를 완전히 피하는 것은 어려운 일이지만, 검은색 플라스틱 주방 용품을 버리는 것은 쉬운 선택임
          + 플라스틱은 열에 의해 유해한 화합물이 음식으로 이동할 수 있어 요리에 적합하지 않음
          + 특히 검은색 플라스틱은 피해야 할 중요한 이유가 있음
     * 검은색 플라스틱의 문제점
          + 2018년, Plymouth 대학의 생화학자 Andrew Turner는 검은색 플라스틱 제품이 재활용 전자 폐기물로 만들어질 가능성이 높다는 연구를 발표함
          + 검은색 플라스틱에서 발견된 화학물질의 수준이 우려스러웠으며, 이는 컴퓨터 및 TV 케이스에서 흔히 발견되는 화학물질과 일치함
          + 이러한 제품들은 화재를 방지하기 위해 난연제로 처리됨
     * GN⁺의 정리
          + 검은색 플라스틱 주방 용품은 유해 화학물질이 음식으로 스며들 가능성이 있어 피해야 할 필요가 있음
          + 전자 폐기물에서 재활용된 플라스틱이 사용될 수 있어 더욱 주의가 필요함
          + 이 기사는 주방 용품 선택 시 건강과 환경을 고려해야 함을 상기시켜 줌
          + 비슷한 기능을 가진 대체 제품으로는 스테인리스 스틸이나 실리콘 주방 용품을 추천함

   다 국가에 따라 식약청이라든지 FDA라든지 안전 기준 거쳐서 오는 것 아닌가요?
   애초에 식기용이 아닌 것을 사용하는 경우라면 문제 자체가 다른거고..

   짬뽕 배달은 대부분 검은색이던데..

   어 그러고 보니.. 집에는 잘 없지만 배달에서 검은색이 오는 경우가 있긴 하네요. 주의해야할듯

        Hacker News 의견

     * gidmkhealthnerd는 한 연구자의 주장에 대해 회의적이며, 여전히 검은색 주걱을 사용 중임.
     * OXO가 검은색 플라스틱 도구에 대한 성명을 발표했으면 좋겠다는 의견이 있음.
          + OXO의 검은색 플라스틱 도구가 재활용 플라스틱을 사용하지 않았는지, 또는 제품에 난연제가 포함되어 있는지 확인이 필요함.
          + OXO 제품에 대한 프리미엄 가격이 오염을 피하기 위한 품질에 대한 것인지, 아니면 디자인과 마케팅에만 집중된 것인지 궁금함.
     * 기사에서 언급된 노출 수준이 가정 요리에서 중요한 생리적 영향을 미치는지에 대한 증거가 있는지 궁금함.
          + 미디어는 종종 산업 환경에서의 노출 수준을 소비자 환경과 동일시하는 경향이 있음.
     * 검은색 플라스틱의 색소로 사용되는 '카본 블랙'은 제품의 강도와 내구성을 향상시킬 수 있음.
          + 카본 블랙은 'CBO'라는 특수 오일에서 만들어지며, 이는 정제되지 않은 석유의 찌꺼기임.
          + CBO는 H2S를 포함하지 않지만, 특유의 불쾌한 냄새가 있음.
     * WHO는 깨끗한 연료로 요리하는 것을 장려하는 프로젝트를 진행 중임.
          + 일부 지역에서는 플라스틱을 태워 요리하는 경우가 있으며, 이는 건강에 매우 해로움.
     * 커피 메이커도 검은색 플라스틱 위로 뜨거운 물을 흘림.
     * 검은색 플라스틱이 다른 색상보다 더 더러울 수 있다는 점이 흥미로움.
          + 색상에 신경 쓰지 않으면 재활용 재료를 더 쉽게 사용할 수 있음.
     * 플라스틱 주걱을 사용하는 유일한 이유는 '약한' 논스틱 팬을 보호하기 위함임.
          + 탄소/스테인리스 스틸 팬, 나무 주걱, 금속 주걱을 사용하는 것이 더 나음.
     * 플라스틱과 실리콘의 차이점에 대한 혼란이 있음.
          + 검은색 플라스틱이 특정 난연제를 사용하는지에 대한 의문이 있음.
"
"https://news.hada.io/topic?id=17570","HN 공개: 모든 링크를 공유하기 위한 미니멀리스트 (브루탈리스트?) 웹사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HN 공개: 모든 링크를 공유하기 위한 미니멀리스트 (브루탈리스트?) 웹사이트

        Hacker News 의견

     * ""NASA Revivalist""라는 용어가 1970년대 NASA의 그래픽 디자인 스타일과 유사함을 강조함
          + 개인적으로 잔혹주의 건축을 복원하는 경험을 통해 이 도구가 스타일의 몇 가지 중요한 측면을 놓치고 있음을 언급함
          + 콘크리트 사용이 없고, 따라서 콘크리트 냄새가 없음을 지적함
          + 비밀 경찰에 의해 체포될 것 같은 느낌이 없음을 언급함
          + 정기적인 세척이 필요하지 않음을 설명함
     * Avi Perl의 개인 사이트 링크가 편집 페이지에서 잘못 표시됨을 지적함
          + 확인 링크가 Gmail 스팸으로 가는 문제를 언급함
          + 긴 바이오가 모바일에서 텍스트 위에 떠 있는 문제를 지적함
          + URL 단축 기능을 제안함
     * 폼 페이지의 유효성 검사 문제를 언급함
          + URL에 제목이 필요하지 않다고 제안함
     * 페이지의 크기가 작다는 점에 자부심을 느끼며, 알래스카에서의 교육 경험이 작은 웹사이트의 중요성을 깨닫게 했음을 공유함
     * 사이트의 기능을 칭찬하면서도 잔혹주의 스타일을 약간 완화할 것을 제안함
          + 시스템에 맞춘 라이트와 다크 모드를 추가할 것을 제안함
          + 흰색과 검은색을 약간 부드러운 회색과 거의 검은색으로 조정할 것을 제안함
     * 링크가 특정 페이지에서만 표시되는 문제를 언급함
     * 이메일을 추측하여 편집 요청을 제출할 수 있었던 점을 지적함
          + 스팸 문제를 우려함
     * 링크 이름이 필요하지 않다는 의견에 동의하며, 웹 훅과 API 키를 통해 기능을 확장할 수 있기를 희망함
     * 도메인 만료 시점에 맞춰 이 도구가 유용하다고 언급함
          + 수익 모델이나 비즈니스 계획에 대한 질문을 던짐
          + 이 서비스가 얼마나 지속될지에 대한 의문을 제기함
"
"https://news.hada.io/topic?id=17503","연매출 100억 AI 스타트업의 마케팅 전략 (Jenni AI, 숏폼 마케팅)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              연매출 100억 AI 스타트업의 마케팅 전략 (Jenni AI, 숏폼 마케팅)

   ""숏폼에서 팔로워 수는 중요하지 않습니다. 이번 주에 새로 만든 계정이 100만 유튜버의 영상만큼 조회수를 기록하는 일이 비일비재 해요. 컨텐츠가 훨씬 중요합니다""

   ""인플루언서와 계약할 때는 새로운 계정을 만들어 거기에 광고 컨텐츠를 올려 달라고 하세요. 메인 계정에 올리지 말고요""

   ""가장 효과적인 SEO 전략 중 하나는 '추천 스니펫' 을 선점하는 거예요.""

   ""초기 스타트업에서는 경력자보다 실행력이 빠른 사람이 중요해요. 15년차 디지털 마케터보다, 최근 3년간 틱톡과 릴스에 미친 듯이 집중했던 사람이 더 좋은 퍼포먼스를 냈어요.""
"
"https://news.hada.io/topic?id=17532","Autodesk, 애니메이션 영화를 위한 AI도구 Wonder Animation 베타 버전 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Autodesk, 애니메이션 영화를 위한 AI도구 Wonder Animation 베타 버전 출시

     * 획기적인 Video to 3D scene 기술을 사용하여 애니메이션 영화 제작을 가속화하는 도구. 모든 비디오 시퀀스를 3D 애니메이션 장면으로 변환.
     * Wonder Studio 도구 모음의 일부인 Wonder Animation의 Video to 3D scene 기술은 여러 컷과 다양한 샷으로 시퀀스를 촬영하고 편집한 다음 AI를 사용하여 장면을 3D 공간에서 재구성함
     * Wonder Animation의 베타 버전은 이제 모든 Wonder Studio 사용자가 사용할 수 있으며, 예술가가 완전한 창의적 통제권을 유지하면서 완전히 애니메이션화된 영화를 제작하는 것에 더 가까워지게 하는 것을 목표로 함. 이는 자동화된 출력에 의존하는 다른 생성 AI 도구와는 다름

Wonder Dynamics와 Autodesk의 파트너십

     * Wonder Dynamics가 Autodesk에 합류한 지 5개월이 지났으며, 이 기간 동안 Wonder Dynamics의 기본 비전이 혁신을 통해 미디어 및 엔터테인먼트 산업을 발전시키려는 Autodesk의 오랜 약속과 완벽하게 일치한다는 것을 재확인함.
     * 함께 AI를 더 의도적으로 사용하여 창의성과 효율성을 높여 예술가들이 스토리텔링의 창의적인 측면에 더 많은 시간을 할애할 수 있도록 하는 것을 믿음.
     * Wonder Dynamics는 스토리텔링에 대한 열정과 더 많은 창작자와 영화 제작자가 VFX 작업에 접근할 수 있도록 하겠다는 약속에서 출발하여 설립되었고 Wonder Studio(클라우드 기반 3D 애니메이션 및 VFX 솔루션)를 개발함.

Wonder Animation의 Video to 3D scene 기술

     * Wonder Animation의 Video to 3D scene 기술의 가장 혁신적인 부분은 여러 컷과 다양한 샷(와이드, 미디엄, 클로즈업)으로 시퀀스를 촬영하고 편집할 수 있는 능력임.
     * 이 기술은 AI를 사용하여 3D 공간에서 장면을 재구성하고 각 카메라의 위치와 움직임을 등장인물 및 환경과 일치시킴.
     * 이는 본질적으로 선호하는 소프트웨어(Maya, Blender, Unreal 등)에서 완전히 편집 가능한 요소(애니메이션, 캐릭터, 환경, 조명 및 카메라 추적 데이터)를 가진 하나의 3D 장면에 모든 카메라 설정과 캐릭터 신체 및 얼굴 애니메이션을 포함하는 예술가의 실사 장면의 가상 표현을 만듦.

AI에 대한 오해와 Wonder Animation의 접근 방식

     * AI가 엄청난 발전을 이루었음에도 불구하고, AI가 원클릭 솔루션이라는 현재의 오해가 있지만 Wonder Dynamics는 그렇지 않다는 것을 알고 있음.
     * Wonder Animation은 예술가가 완전한 창의적 통제권을 유지하면서 완전히 애니메이션화된 영화를 제작하는 데 한 걸음 더 가까이 다가가도록 하는 데 초점을 맞추고 있음을 강조함.
     * 현재 시장에 출시된 대부분의 생성 AI 도구의 블랙박스 접근 방식과 달리, Wonder Dynamics는 예술가가 자동화된 출력에만 의존하는 것이 아니라 자신의 비전을 형성할 수 있도록 권한을 부여하고 있음.

GN⁺의 의견

     * Wonder Dynamics의 Video to 3D scene 기술은 애니메이션 제작 과정을 크게 간소화하고 가속화할 수 있는 잠재력이 있음. 실사 촬영 영상을 3D 애니메이션 장면으로 변환하는 것은 애니메이터와 VFX 아티스트의 작업 효율성을 높일 수 있음.
     * 그러나 이 기술이 기존의 전통적인 애니메이션 제작 방식을 완전히 대체할 수 있을지는 의문임. 아티스트의 창의성과 예술적 감각은 여전히 핵심적인 요소일 것임.
     * 이 기술을 도입할 때는 비용, 학습 곡선, 기존 파이프라인과의 통합 등을 고려해야 함. 장점은 제작 시간 단축, 비용 절감, 반복적인 작업 자동화 등이 있음.
     * 유사한 기능을 가진 제품이나 프로젝트로는 Nvidia Omniverse, Unity의 Arte 등이 있음. 이들과 비교했을 때 Wonder Animation만의 차별점이 무엇인지 주목할 필요가 있음.
     * Wonder Animation이 AI 기술을 활용하면서도 아티스트의 창의적 통제권을 중시한다는 점은 긍정적임. AI를 도구로 활용하되 최종 결과물에는 아티스트의 예술적 비전이 반영되어야 할 것임.

        Hacker News 의견

     * Wonder Dynamics를 사용하여 스포츠 동작을 분석하는 데 깊은 인상을 받음. 웹 UI가 매우 빠르고 사용하기 쉬움. 제품에 많은 정성과 사랑이 담겨 있음
          + Wonder Animation은 기존 기능을 개선한 특정 사용 사례로 보임
     * 데모가 인상적이지만, 설명이 오해를 불러일으킬 수 있음. 3D 환경과 캐릭터 모델을 생성하는지, 아니면 캐릭터 리깅과 카메라 트래킹만 다루는지 혼란스러움
     * Autodesk가 Blender를 긍정적으로 언급한 것에 놀람
     * 2044년, 마이애미 아일랜드의 프리랜서 VFX 아티스트로서의 상상. Wonder Animation 35 업데이트가 발표됨
     * 영화 및 애니메이션 산업 외의 사용 사례에 대한 궁금증
     * 기술이 데모 수준을 유지한다면 인디 영화 제작자나 아마추어에게 큰 도움이 될 것임
     * VFX의 초급 직무 중 하나인 ""Trackers""가 완전히 자동화된 것 같음. 카메라 모션 복구, 세트/소품 배치 복구, 배우 매치 무빙 등을 포함함
     * 칭찬
"
"https://news.hada.io/topic?id=17596","ToolGit - Git 생산성 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ToolGit - Git 생산성 툴킷

     * Git에 여러 서브커맨드를 추가해서 삶을 편하게 해주는 스크립트 모음
     * git amend: 현재 staged 상태의 변경사항을 amend (Alias)
     * git-delete-gone-branches: 원격에 더 이상 존재하지 않는 로컬 브랜치 삭제
     * git dir: 이 Git 저장소의 .git 디렉토리 경로 출력 (Alias)
     * git-force-pull: hard reset을 사용하여 원격 트래킹 브랜치를 fetch하고 강제로 pull
     * git-forward: 모든 원격 트래킹 브랜치를 fetch하고 fast-forward
     * git gc-all: reflog를 만료시키고 Git 저장소에 대해 전체 가비지 컬렉션 실행 (Alias)
     * git graph: 예쁜 커밋 그래프 표시 (Alias)
     * git-in-repo: 현재 작업 디렉토리가 Git 저장소이면 0 반환, 그렇지 않으면 0이 아닌 값 반환
     * git-is-branch-remote: 브랜치가 원격 브랜치를 참조하면 0 반환
     * git-is-head-detached: HEAD가 detached 상태이면 0 반환, 그렇지 않으면 0이 아닌 값 반환
     * git-is-worktree-clean: 작업 트리에 변경사항이나 추적되지 않은 파일이 없으면 0 반환, 그렇지 않으면 0이 아닌 값 반환
     * git-legacy: 의 top에 현재 HEAD의 전체 히스토리를 rebase
     * git-main-branch: 메인(기본) 브랜치의 이름 가져오기
     * git-mode-restore: 인덱스 및/또는 작업 트리에서 파일 모드 복원
     * git root: 이 Git 저장소의 루트 경로 출력
     * git-xlog: 추가되거나 제거된 라인에서만 문자열 히스토리 검색
     * 설치 방법
          + 폴더에 풀고 PATH에 추가하면 Git 이 git-* 파일을 서브커맨드로 인식
          + Alias 설치 git config set --append --global include.path path/to/toolgit/aliases.ini

   오 바로 가져다 쓰고싶은게 보입니다

   로컬 브랜치 동기화해주는 기능 유용하네요ㅎㅎ

   오호... 꽤 흥미롭네요.
   저도 몇가지 alias 해놓고 사용중인데 설치해 봐야겠어요.

   alias .ggrp='dev; git log origin/master --graph --oneline --branches -10'
   alias .glog='dev; git log origin/master --pretty=format:""%h - %an, %ar : %s"" -10'
   alias .gnow='dev; echo ""Now Rev: ""; git rev-parse --verify HEAD; echo ""Server Rev: ""; git rev-parse --verify origin/master;'

   이거 계속 업데이트되면 좋을 것 같네요 ㅎㅎ
"
"https://news.hada.io/topic?id=17549","Rust를 Non-Rust 서버에서 사용해 성능 개선하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Rust를 Non-Rust 서버에서 사용해 성능 개선하기

     * Non-Rust 서버(JavaScript, Python, Java 등)에서 점진적으로 Rust를 추가하는 전략 소개
     * CPU 병목으로 인해 성능 요구 사항을 충족하지 못하는 핫 함수를 식별하고, Rust로 대체 구현하는 것이 목표
     * 전략은 Tier(Rust 채택 수준)로 구분되며, Tier 0은 Rust 미사용, 마지막 Tier는 전체 서버를 Rust로 재작성

전략

  Tier 0: Rust 미사용

     * Node.js 서버에서 QR 코드 생성 엔드포인트 구현
     * 기준 성능: 초당 1464 요청, 평균 지연 68ms, p99 지연 96ms, 평균 응답 크기 1506바이트, 메모리 1353MB

  Tier 1: Rust CLI 도구

     * QR 코드 생성 함수를 Rust로 재작성하고 CLI 도구로 컴파일
     * 호스트 서버에서 CLI 도구 호출
     * 기준 대비 성능: 초당 요청 1.76배 증가, 평균 지연 0.57배 감소, 평균 응답 크기 0.52배 감소, 메모리 0.92배 감소

  Tier 2: Rust Wasm 모듈

     * Rust 함수를 Wasm 모듈로 컴파일하고 호스트 서버에서 Wasm 런타임을 사용해 로드 및 실행
     * Node.js 서버에는 wasm-bindgen 사용
     * 기준 대비 성능: 초당 요청 2.03배 증가, 평균 지연 0.50배 감소
     * 수동으로 Wasm 바인딩 작성하는 방법 설명 (다른 언어 사용자를 위해)

  Tier 3: Rust 네이티브 함수

     * Rust로 함수 작성, 네이티브 코드로 컴파일, 호스트 런타임에서 로드 및 실행
     * Node.js에는 napi-rs 사용
     * 기준 대비 성능: 초당 요청 3.75배 증가, 평균 지연 0.26배 감소

  Tier 4: Rust 재작성

     * 호스트 서버 전체를 Rust로 재작성
     * 실제로는 호스트 서버 일부만 재작성하는 것이 현실적
     * 기준 대비 성능: 초당 요청 4.93배 증가, 평균 지연 0.21배 감소, 메모리 0.01배 감소 (13MB 사용)

결론

     * 모든 전략이 좋지만, Tier 3이 가장 효과적
     * 오프더셸프 바인딩 생성기 라이브러리를 사용할 수 있다면 Rust로 네이티브 함수 작성이 쉬우며 성능에 큰 영향

   오........ 여러 일들을 잡부처럼 하다가 둘 다 조금씩 쓰게 되었는데 굉장히 좋은 정보네요.

   최근 rust보고 있는데. 흥미로운 글이네요.

   상당히 좋은 글이네요. 이런게 Rust를 제대로 사용한 예죠.

   전에는 C/C++로 해결했던 영역에서 확실히 Rust가 인기있나보네요.
"
"https://news.hada.io/topic?id=17554","수면 규칙성, 수면 지속 시간보다 사망 위험 예측에 더 강력한 지표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 수면 규칙성, 수면 지속 시간보다 사망 위험 예측에 더 강력한 지표

요약

     * 연구 배경 및 목적
          + 수면의 규칙성이 수면 시간보다 건강 결과에 더 강력한 예측 변수일 수 있음이 최근 연구에서 나타남.
          + 본 연구는 수면 규칙성과 수면 시간이 사망 위험에 미치는 영향을 비교하고자 함.
     * 연구 방법
          + 60,977명의 UK Biobank 참가자들의 가속도계 데이터를 사용하여 수면 규칙성 지수(SRI)를 계산함.
          + 사망률 데이터는 가속도계 기록 후 최대 7.8년 동안 수집됨.
          + 연구는 연령, 성별, 인종, 사회경제적 요인 등을 조정하여 분석함.
     * 주요 결과
          + 높은 수면 규칙성은 모든 원인에 의한 사망 위험을 20%–48% 낮추는 것으로 나타남.
          + 암 사망 위험은 16%–39%, 심혈관 대사 사망 위험은 22%–57% 낮아짐.
          + 수면 규칙성은 수면 시간보다 사망 위험의 더 강력한 예측 변수로 나타남.
     * 결론
          + 수면 규칙성은 건강과 생존율을 개선하기 위한 간단하고 효과적인 목표가 될 수 있음.

GN⁺의 정리

     * 이 연구는 수면 규칙성이 수면 시간보다 건강에 더 중요한 영향을 미칠 수 있음을 보여줌.
     * 수면 규칙성을 개선하는 것이 건강 증진에 중요한 전략이 될 수 있음.
     * 수면 패턴의 불규칙성은 환경적 자극과 행동의 불규칙한 타이밍으로 인해 생체 리듬을 방해할 수 있음.
     * 유사한 기능을 가진 다른 연구로는 수면 패턴과 건강 결과 간의 관계를 조사한 연구들이 있음.

        Hacker News 의견

     * 연구에서는 수면 규칙성과 사망률 간의 관계를 평가하려고 했음. 1주일 동안의 수면 데이터를 기반으로 10~15년 후의 사망 기록을 확인했음. 단기 수면 데이터와 장기 사망률 간의 인과 관계를 주장하기는 어려움. 장기적인 수면 데이터를 사용한 연구가 필요함
     * 수면 규칙성을 보장하는 가장 좋은 방법은 고정된 기상 시간을 갖는 것임. 처음에는 힘들지만, 시간이 지나면 낮 동안 졸음이 사라지고 밤에는 자연스럽게 잠이 오게 됨. 하루를 깊은 일과 운동으로 채우는 것도 효과적임. 이러한 방법 덕분에 수면 패턴이 규칙적임
     * 어린 자녀가 있는 사람들은 어떻게 해야 할지 궁금함
     * 수면 불규칙성이 선택에 의한 것이라면 어떻게 해석될지 궁금함. 야간 근무를 자주 하는 사람들은 더 일찍 사망할 수 있음. 프리랜서로서 수면 패턴이 자유로움. 주어진 48시간 동안 평균 16시간의 수면을 취하려고 함. 이는 건강에 좋지 않을 수 있지만, 개인적으로는 더 젊고 건강하게 유지된다고 믿고 있음
     * DEC2 돌연변이가 있어 수면이 많이 필요하지 않지만, 수면은 매우 규칙적임. 의사에게 물어봤을 때, 수면 부족이 건강에 나쁘다는 것을 확실히 알지 못한다고 했음
     * 장수에 영향을 미치는 연구를 볼 때, 얼마나 큰 차이를 만드는지 숫자로 알고 싶음. 불규칙한 수면에서 규칙적인 수면으로 바꿀 경우 평균적으로 얼마나 더 살 수 있는지 궁금함. 이는 사망률에 영향을 미치는 여러 연구에 얼마나 주의를 기울여야 할지를 결정하는 방법이 될 수 있음
     * 매우 규칙적인 수면 패턴과 상관관계가 있는 생활 방식 요인이 무엇인지 궁금함. 규칙적인 수면 패턴을 가진 친구들은 안정적이고 장기적인 사고를 하며, 경력 지향적이고, 관계가 좋고, 적어도 중간 정도의 사교성을 가지며, 건강하고 균형 잡힌 삶을 살고 있음
     * 젊었을 때 매주 금요일과 토요일에 클럽에 가서 아침까지 춤을 추고 집에서 운동을 계속했음. 이는 건강에 영향을 미쳤을 것임
     * 매일 같은 시간에 자고 일어나는 것이 가장 잘한 일 중 하나였음
"
"https://news.hada.io/topic?id=17548","구글 Creator Conversation 행사, 장례식으로 변한 현장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                구글 Creator Conversation 행사, 장례식으로 변한 현장

    구글 캠퍼스 방문

     * 구글의 가장 큰 건물은 비어 있었음
     * Danny Sullivan이 행사를 주최했으며, 구글에서 가장 지식이 풍부한 인물 중 하나로 평가받음
     * 구글 캠퍼스는 아름다운 경관을 자랑하지만, 직원들이 거의 없었음

    너무 안전해서 비어 있는 건물들

     * 방문객 배지를 두 개나 받았지만, 이를 확인하는 사람은 없었음
     * 청소부와 식당 직원들만 바쁘게 움직이고 있었음
     * 구글러들은 거의 보이지 않았으며, 두 명이 탁구를 치고 있었음

    우리의 대화는 안심으로 시작됨

     * 웹 크리에이터들이 구글의 감시를 받고 있다는 느낌을 받음
     * 구글 엔지니어와 관리자들이 참석했으며, 일부는 카메라를 통해 지켜보고 있었음
     * 참석자 중 한 명이 장례식 같다는 농담을 했으나, 구글러들만 웃었음

    구글이 우리를 말라버리게 하고 껍질을 버림

     * 구글의 질문에 답변했지만, 참석자들에게는 별다른 이익이 없었음
     * 엔터테인먼트 사이트 소유자들이 모여 구글러들과 대화를 시도했으나, 중요한 주제는 회피됨
     * ""결과의 다양성""이라는 주제가 화이트보드에 적혔다가 작게 다시 적혔음

    구글의 수석 마법사가 등장함

     * 구글의 수석 검색 과학자가 질문에 답변했으나, AI와 관련된 문제는 회피됨
     * 구글이 사이트를 섀도우밴 했다는 질문에 대해 부정하며, 페이지 단위로만 조정한다고 주장함
     * 참석자들은 반박했으나, 구글러들은 이를 인정하지 않음

    GN⁺의 정리

     * 이 기사는 구글의 웹 크리에이터 이벤트에 대한 비판적인 시각을 제공함
     * 구글의 검색 알고리듬과 사이트 섀도우밴 문제에 대한 논의가 이루어졌음
     * 구글의 대응 방식과 웹 크리에이터들의 불만이 잘 드러나 있음
     * 유사한 기능을 가진 다른 검색 엔진으로는 Bing이나 DuckDuckGo를 추천할 수 있음

        Hacker News 의견

     * 한 사용자는 Google과의 회의 경험을 공유하며, Google이 정보를 얻기 위해 사람들을 유인하지만 실제로는 도움을 주지 않는다고 언급함. 이는 지식 도용이라고 생각함
          + Google이 집계 사이트를 금지하려는 것 같음. Google은 유일한 집계자가 되고 싶어 함
          + 20개의 사이트 목록이 도움이 될 것이라고 언급함
     * 한 사용자는 전 세계가 가치를 창출하기보다는 추출하는 데 집중하고 있다고 언급함
     * 한 사용자는 방문한 웹사이트에서 Chrome이 2,500개의 제3자 쿠키를 차단했다고 언급하며, 이러한 웹사이트는 처벌을 받아야 한다고 주장함
     * 한 사용자는 Google의 검색 순위에 불만이 있어도 Google과 대화할 방법이 없다고 언급함
          + 특정 기술에 의존하는 비즈니스가 기술 변화로 인해 고통받고 있다고 설명함
          + Google의 코드베이스가 너무 복잡해져서 아무도 전체를 이해하지 못할 것이라고 언급함
     * 한 사용자는 Google이 AI와 인간 콘텐츠를 구분하지 못해 인간이 작성한 사이트가 순위에서 밀려났다고 언급함
          + Google이 Forbes, USA Today, Reddit과 같은 사이트를 우선시한다고 주장함
     * 한 사용자는 Google의 문화가 회복될 수 있을지, 아니면 경영진이 그것을 죽였는지에 대해 의문을 제기함
     * 한 사용자는 Google Web Creators와의 특별한 관계를 가진 웹사이트가 왜 그림자 금지를 당했는지에 대해 궁금해함
          + Google 캠퍼스 방문과 관련된 기사가 흥미롭지만, Google에 실망한 사람들이 누구인지 명확하지 않다고 언급함
"
"https://news.hada.io/topic?id=17529","Zed 에디터, SSH Remote 기능 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Zed 에디터, SSH Remote 기능 지원

     * 대규모 코드베이스를 다루는 사람들에게 노트북에서 프로그래밍하는 것은 부담스러울 수 있음
     * 팬이 계속 돌아가고, 언어 서버는 메모리가 부족하며, 재빌드 시간이 오래 걸림
     * Zed에서는 SSH를 통해 어떤 기기에서도 프로젝트를 열 수 있음
     * UI는 로컬에서 완전히 실행되어 120프레임의 완벽한 그래픽을 제공하며, 언어 서버, 작업, 터미널은 원격 서버에서 실행되어 클라우드 하드웨어를 활용할 수 있음

원격 개발 환경 구축

     * 원격 코드 편집을 위해 Zed는 SSH 지원을 위한 인프라 변경 작업을 진행해 왔음
     * SSH 연결 유지, 원격 서버 구축, 기능 통합 등 다양한 문제를 해결해야 했음
     * SSH 연결을 위해 ControlMaster 설정을 사용하여 각 호스트에 단일 연결을 유지함
     * 연결 후 운영 체제와 아키텍처에 맞는 원격 서버를 다운로드함
     * musl로 컴파일된 원격 서버는 동적 링크가 필요 없어 오래된 배포판에서도 작동 가능함
     * 연결이 끊어져도 원격 서버가 계속 실행되며, 재연결 시 언어 서버가 완전히 초기화된 상태로 유지됨
     * 저장되지 않은 변경 사항은 로컬에 백업되어 작업을 잃지 않음

협업과 SSH 프로젝트

     * SSH 프로젝트를 협업과 함께 작동하도록 만드는 것이 도전이었음
     * 최소 4개의 노드가 SSH를 통한 2인 협업에 관여할 수 있어 협업 동기화 프로토콜을 테스트함
     * Project를 논리적 조각으로 나누어 클라이언트가 협업 호스트, SSH 호스트, 협업 게스트인지에 따라 원격 및 로컬 모드에서 활성화할 수 있도록 함
     * 새로운 테스트를 통해 각 역할과 협업 서버를 인스턴스화하여 동기화가 올바르게 이루어지는지 확인함
     * 친구나 동료와 프로젝트를 진행할 때, 프로젝트가 노트북에 있는지 SSH로 접속 가능한 기기에 있는지 투명하게 처리됨

GN⁺의 정리

     * Zed는 대규모 코드베이스를 다루는 개발자들에게 원격 서버를 활용하여 효율적인 개발 환경을 제공함
     * SSH를 통한 원격 개발 기능은 클라우드 하드웨어를 활용하여 성능을 향상시킴
     * 협업 기능은 여러 노드 간의 동기화를 지원하여 원활한 협업을 가능하게 함
     * Zed는 macOS와 Linux에서 사용할 수 있으며, 개발자들에게 새로운 경험을 제공함
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Visual Studio Code의 Remote Development Extension이 있음

        Hacker News 의견

     * Zed와 SSH Remoting, Orbstack을 사용하여 Mac에서 프로그래밍하는 것이 꿈의 환경임
          + Orbstack에서 Linux 머신을 몇 초 만에 실행하고 Zed에서 SSH로 접속하여 빠른 Linux 개발 환경을 제공받음
          + macOS 버전의 WSL과 VSCode와 비슷하지만 더 나은 느낌임
          + 과거에 Mitchell Hashimoto의 작업에서 영감을 받았음
          + VMware와 Docker Desktop을 사용했지만 부드럽고 빠른 개발 환경을 얻기에는 부담이 있었음
          + Zed와 Orbstack 덕분에 빠르고 우아한 시스템을 얻었음
     * Zed의 수익 모델과 오픈 소스 여부에 대한 궁금증이 있음
          + 회사 제품에 의존하는 워크플로우를 구축하는 것이 걱정스러움
     * Zed의 원격 개발 기능은 원격 호스트에 바이너리를 설치하고 실행함
          + 로컬 머신이 SSH를 통해 원격 서버에 연결하고 Zed가 서버를 다운로드하여 시작함
     * Zed를 C, C++, Rust, Angular 개발에 사용하며 매우 만족함
          + JetBrains, vscode, vim 등 다양한 도구를 사용해봤지만 Zed가 일상적인 코딩에 우수함
          + 디버깅 기능이 부족하여 C# 개발에는 사용하지 못함
          + 매우 빠른 반응 속도를 자랑함
     * 여러 컴퓨터를 오가며 개발할 때 tmux와 nvim을 사용하여 세션을 유지함
          + Zed나 VS Code가 이 사용 사례를 지원하지 않는 것으로 보임
     * Zed의 빠른 속도는 좋지만 인라인 오류 강조 표시와 코드 실행 버튼 같은 필수 기능이 부족함
          + 현재 Zed IDE는 가벼운 AI 지원 텍스트 편집기처럼 느껴짐
     * 이미지 기반 화면 공유가 더 나은 선택일 수 있음
          + Zed의 협업 기능은 좋지만 다른 앱과의 호환성 문제를 고려해야 함
     * 진정으로 휴대 가능한 원격 편집 솔루션을 원함
          + 원격 서버에 서버를 설치해야 하는 Zed나 vscode의 솔루션은 적합하지 않음
          + 원격 환경이 다를 때 프로젝트를 쉽게 복사하여 작동시키기 어려움
          + Zed의 기능이 좋고 발전하고 있어 긍정적임
     * 신뢰할 수 있는 원격 서버에서 알 수 없는 앱을 실행하는 것은 좋은 생각이 아님
          + 로컬에서 모든 작업을 처리하는 것이 더 빠름
          + SSH의 내장 기능을 활용하여 파일을 처리할 수 있음
     * Emacs나 Tramp에 대한 언급이 없어 걱정스러움
          + AI 열풍에만 집중하는 것처럼 보임
"
"https://news.hada.io/topic?id=17524","사고가 인간의 성능을 저하시키는 작업에서 Chain-of-thought의 부정적 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            사고가 인간의 성능을 저하시키는 작업에서 Chain-of-thought의 부정적 영향

체인 오브 쏘트(Chain-of-Thought)와 성능 저하

     * 체인 오브 쏘트(Chain-of-Thought, CoT) 개요
          + CoT는 대형 언어 및 멀티모달 모델에서 널리 사용되는 전략임.
          + 여러 작업에서 성능을 향상시키는 것으로 알려져 있으나, 어떤 설정에서 효과적인지 규명하는 것은 여전히 진행 중인 과제임.
     * 연구 목적
          + CoT가 모델 성능을 저하시킬 수 있는 작업의 특성을 식별하고자 함.
          + 인지 심리학에서 영감을 받아, (i) 언어적 사고나 숙고가 인간의 성능을 저해하는 경우, (ii) 인간 성능을 지배하는 제약이 언어 모델에 일반화되는 경우를 살펴봄.
     * 주요 연구 사례
          + 암묵적 통계 학습, 시각적 인식, 예외를 포함한 패턴 분류와 같은 세 가지 사례를 실험함.
          + 다양한 최신 모델에서 추론 시 사고를 사용할 때 성능이 크게 떨어짐을 발견함 (예: OpenAI o1-preview는 GPT-4o에 비해 최대 36.3% 절대 정확도 감소).
     * 추가 발견
          + 조건 (i)는 만족하지만 (ii)는 만족하지 않는 세 가지 작업을 식별함.
          + 이러한 작업에서는 언어적 사고가 인간의 성능을 저하시킴에도 불구하고, CoT는 모델 성능을 유지하거나 향상시킴.
     * 결론
          + 모델의 인지 과정과 인간의 인지 과정 사이에 정확한 평행선은 없으나, 인간의 성능에 부정적 영향을 미치는 사고 사례를 고려하면 모델에도 부정적 영향을 미치는 설정을 식별하는 데 도움이 됨.
          + 인간의 숙고에 관한 문헌과 CoT 평가를 연결하여 프롬프트 선택과 추론 시 사고의 영향을 이해하는 새로운 도구를 제공함.

GN⁺의 정리

     * 이 연구는 CoT가 모든 상황에서 모델 성능을 향상시키지 않음을 보여줌.
     * 인간의 사고가 성능에 부정적 영향을 미치는 경우를 통해 모델의 성능 저하를 예측할 수 있는 가능성을 제시함.
     * CoT의 효과를 이해하는 데 있어 인지 심리학의 통찰을 활용하는 것이 흥미로움.
     * 유사한 기능을 가진 프로젝트로는 OpenAI의 다양한 언어 모델이 추천됨.
"
"https://news.hada.io/topic?id=17474","Ctrl+F 보다 더 똑똑하게: 웹페이지 콘텐츠에 직접 링크하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ctrl+F 보다 더 똑똑하게: 웹페이지 콘텐츠에 직접 링크하기

     * Text Fragment는 앵커를 추가할 필요 없이 웹 페이지 내 특정 텍스트에 정확하게 연결할 수 있게 해주는 강력한 웹 플랫폼 기능
     * 이 기능은 강조 표시된 텍스트의 스타일을 지정하는 방법을 제공하는 ::target-text CSS 의사 요소에 의해 보완됨
     * 텍스트 프래그먼트 URL의 기본 구문:
          + https://example.com/page.html/…]
     * 해시 기호 뒤에 :~: 특수 구문을 추가, text= 뒤에 다음을 추가:
         1. prefix-: 연결된 텍스트 바로 앞에 와야 하는 텍스트 문자열. 여러 개의 일치 항목이 있는 경우 브라우저가 올바른 텍스트에 연결하는 데 도움. 이 부분은 강조 표시되지 않음
         2. textStart: 강조 표시할 텍스트의 시작
         3. textEnd: 강조 표시할 텍스트의 끝 부분
         4. -suffix: prefix-와 유사하게 동작하지만 텍스트 뒤에 오는 하이픈이 뒤에 오는 텍스트 문자열. 여러 개의 일치 항목이 있을 때 유용하며 연결된 텍스트와 함께 강조 표시되지 않음
     * 브라우저가 텍스트 프래그먼트를 지원하는 경우 ::target-text 의사 요소를 사용하여 강조 표시된 텍스트의 스타일을 변경할 수 있음
          + ::target-text { background-color: yellow; }
     * 다음 속성만 변경가능:
          + color
          + background-color
          + text-decoration 및 관련 속성
          + text-shadow
          + stroke-color, fill-color, stroke-width
          + 사용자 지정 속성
     * 브라우저 지원 및 폴백 동작
          + 텍스트 프래그먼트는 현재 모든 브라우저에서 지원됨
          + ::target-text 의사 요소는 아직 Safari에서 지원되지 않지만 Technology Preview 버전에서 사용 가능
          + 브라우저에서 이 기능이 지원되지 않으면 텍스트 강조 표시나 스크롤 없이 페이지가 로드
          + 강조 표시의 기본 스타일은 브라우저마다 다름
     * 마무리 생각
          + 처음에는 텍스트 프래그먼트가 Chrome 전용 기능이라고 생각했지만, 사실은 모든 브라우저에서 구현할 수 있는 개방형 웹 기반이라는 걸 깨달음
          + 특히 신뢰할 수 있는 생성 AI 시스템에서 이 기능이 더 널리 사용되기를 희망
          + 모든 사용자가 텍스트 프래그먼트를 쉽게 사용할 수 있게 되면 좋겠음
     * 업데이트
          + Chromium 기반 브라우저에는 이미 특정 텍스트에 대한 링크를 생성하는 기능이 내장되어 있음
          + Chrome을 사용하는 경우 텍스트를 강조 표시하고 마우스 오른쪽 버튼을 클릭하면 상황에 맞는 메뉴에서 ""강조 표시에 대한 링크 복사"" 옵션을 찾을 수 있음

   가끔 구글검색하다 본건데 이런거군요

   아크브라우저에서 텍스트로 가는 링크 복사되는게 이런 기능이었군요..!

   에지 브라우저에는 텍스트 선택하고 우클릭 컨텍스트 메뉴 띄워보면 ""Copy link to highlight"" 라는 메뉴가 있는데, 그 기능 때문에 이런 스펙이 있다는 걸 알게됐었어요.

   Firefox 에서는 https://github.com/ichaoX/ext-textFragment 라는 확장기능을 설치해서 사용하고 있어요.

   오 좋은 확장 감사합니다.

   오 이건 신기하네요

   이런 기능이....브라우저의 세계는 알면 알 수록 오만것이 다 있네요.

   https://news.hada.io/topic?id=17474#:~:text=처음에는,깨달음
"
"https://news.hada.io/topic?id=17563","일찍 잠드는 습관 훈련 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            일찍 잠드는 습관 훈련 방법

저녁 루틴 개발

     * 저녁 루틴의 중요성: 저녁 루틴은 수면 개선에 효과적인 전략으로, 성인에게도 긴장을 풀고 수면 습관을 개선하는 데 도움이 됨.
     * 활동 예시:
          + 따뜻한 샤워나 목욕: 스트레스를 줄이고 체온을 낮춰 수면 유도에 도움을 줌.
          + 명상: 불안을 줄이고 불면증 증상을 완화하며 수면 방해를 줄임.
          + 독서: 책을 읽는 것은 수면 유도에 도움을 주지만, 태블릿으로 읽는 것은 수면을 방해할 수 있음.
          + 음악 듣기: 부드러운 음악은 긴장을 풀고 수면의 질을 향상시킴.
          + 저널링: 스트레스와 할 일 목록을 적어두면 수면을 촉진할 수 있음.

블루 라이트 노출 관리

     * 블루 라이트의 영향: 블루 라이트는 멜라토닌 생성을 억제하여 수면을 방해할 수 있음.
     * 전자기기 사용 제한: 자기 전 몇 시간 동안 휴대폰, TV, 컴퓨터 등의 사용을 제한하는 것이 좋음.

일관된 수면 일정 유지

     * 일정 유지의 중요성: 매일 같은 시간에 자고 일어나는 것이 수면 루틴 형성에 도움을 줌.
     * 낮잠 주의: 늦은 낮잠은 야간 수면에 방해가 될 수 있음.

운동

     * 운동의 효과: 규칙적인 운동은 수면의 질을 향상시킴.
     * 운동 시간: 자기 전 격렬한 운동은 피하고, 요가나 태극권 같은 저강도 운동을 추천함.

편안한 침실 환경 조성

     * 어두운 환경: 커튼이나 안대 사용으로 빛을 차단.
     * 적절한 온도: 약간 시원한 방이 이상적이며, 팬이나 계절에 맞는 침구 사용.
     * 소음 제거: 귀마개나 백색 소음 기계로 소음을 차단.
     * 침실 용도 제한: 침실은 수면 전용으로 사용하고, 잠이 오지 않으면 다른 방으로 이동.

늦은 시간 카페인 피하기

     * 카페인의 영향: 커피, 차, 에너지 음료는 자기 전 4~6시간 동안 피하는 것이 좋음.

자연 수면 보조제 시도

     * 멜라토닌: 수면 유도에 도움을 주지만 장기적인 해결책은 아님.
     * 허브차: 피로를 줄이고 수면의 질을 향상시킬 수 있음.
     * 수면 유도 향기: 라벤더 같은 향기는 수면의 질을 개선할 수 있음.

GN⁺의 정리

     * 이 기사는 수면 습관을 개선하기 위한 다양한 방법을 제시하며, 특히 현대인의 수면 문제 해결에 도움을 줄 수 있음.
     * 수면 위생을 통해 수면의 질을 높이고, 일상 생활의 생산성을 향상시킬 수 있는 방법을 제공함.
     * 수면 문제를 겪는 사람들에게 유용한 정보를 제공하며, 수면 보조제 사용 시 전문가와 상담할 것을 권장함.
     * 유사한 기능을 가진 제품으로는 스마트 수면 추적기나 수면 유도 앱이 있음.

        Hacker News 의견

     * 스트레스가 적을 때 수면 습관을 유지하기 쉬움. 큰 문제나 중요한 마감일이 있을 때는 수면 습관이 도움이 되지 않음. 스트레스와 수면 부족의 악순환을 끊기 위해서는 실제 문제를 먼저 해결하는 것이 중요함.
     * 신경과학자로서 아이들에게 잠들기 전 전원을 끄고, 호흡을 천천히 하며, 모험과 생각에 작별 인사를 하도록 가르침. 아이들은 7시쯤 잠듦. 수면의 중요성을 가르치는 것이 양치질이나 영양보다 덜 강조되는 것 같음.
     * ""sleepfoundation.org""는 Sleep Doctor가 소유하고 있으며, CPAP 기계와 수면 관련 치료를 판매하는 경로임. 이는 약간 불투명하게 보일 수 있음. 이 사이트는 2019년에 National Sleep Foundation으로부터 인수되었으며, 비영리 단체와는 관련이 없음.
     * 매일 아침 6시에 일어나기 시작한 후 잠드는 데 문제가 없음. 카페인은 오후 2시 이후에 섭취하지 않음. 수면 루틴이나 따뜻한 목욕 등은 필요하지 않음.
     * ""revenge bedtime procrastination""이라는 용어를 몰랐지만 자신에게 해당됨. 취침 시간을 알람으로 설정하지만 여전히 규율을 지키는 데 어려움이 있음.
     * 잠들기 위해 주의를 수면에 집중하는 방법을 사용함. 적극적으로 생각하는 것을 멈추고 수면에 집중함. 주의는 근육과 같아서 시간이 지나면 더 잘 조절할 수 있음.
     * GitHub에서 무작위 프로젝트 코드를 읽으면 5분 안에 졸림.
     * 식이섬유 섭취를 늘린 후 수면의 질이 개선됨을 느낌. 연구에 의해 뒷받침될 수 있지만 항상 회의적임. 수면에 문제가 있다면 식이섬유 섭취를 고려할 만함.
     * 수면이 전반적인 웰빙에 가장 중요한 요소 중 하나임을 깨달음. 10시에 알람을 설정하여 모든 활동을 중단하고 Kindle로 독서함. 멜라토닌 1mg을 복용하여 신체 시계를 재설정함.
     * 자연적인 수면 시간은 아침 6시쯤 잠들고 오후 2~3시에 일어남. 장소나 계절에 상관없이 항상 동일함.
"
"https://news.hada.io/topic?id=17575","Matrix 2.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Matrix 2.0 출시

     * Matrix의 목표는 개방적이고 분산된 안전한 커뮤니케이션 앱을 구축하는 것임. Matrix 2.0은 이를 주류로 만들기 위한 네 가지 주요 기능을 구현
          + 즉시 로그인, 즉시 시작, 즉시 동기화: Simplified Sliding Sync를 통해 구현
          + 차세대 인증: OpenID Connect를 사용하여 더 안전하고 성숙한 인증 API 제공
          + 네이티브 Matrix 암호화 다자간 VoIP/비디오: MatrixRTC를 통해 대규모 암호화 그룹 통화 가능
          + 보이지 않는 암호화: 사용자가 암호화를 거의 인식하지 못하도록 개선

  1. Simplified Sliding Sync

     * Sliding Sync API의 최종 버전으로, 즉시 로그인, 시작, 동기화를 제공함.
     * Synapse에 네이티브로 구현되어 별도의 프록시가 필요하지 않음.
     * 성능이 뛰어나며, 이전의 v2 API보다 훨씬 빠름.

  2. 차세대 인증

     * OpenID Connect를 사용하여 Matrix의 기존 인증 API를 대체함.
     * 더 안전하고 성숙한 인증 API를 제공하며, QR 코드 스캔으로 간편한 로그인 가능.

  3. 네이티브 Matrix 그룹 VoIP/비디오: MatrixRTC

     * Matrix를 통한 대규모 암호화 그룹 비디오 통화 가능
     * LiveKit SFU 기반으로 구현, 풀 메쉬 WebRTC 구현체도 있음
     * Element Call을 통해 MatrixRTC 통화 기능을 제공하며, 다른 앱과의 상호 운용성도 지원함.

  4. 보이지 않는 암호화

     * 사용자가 암호화를 거의 인식하지 못하도록 개선.
     * 암호화 오류를 최소화하고, 인증되지 않은 장치를 배제함.
     * TOFU(Trust On First Use) 방식으로 사용자 신원 변경 시 경고 제공.

  다음 단계

     * MAS를 matrix.org에 적용하고, 남은 기능들을 구현하여 생태계 전반에 배포할 계획임
     * Matrix 2.0 API의 생태계 지원 확대
     * 향후 Matrix 3.0에서는 신뢰와 안전성, 성능 개선 등이 논의될 수 있음.

  결론

     * Matrix 2.0은 주류 대안보다 뛰어난 앱을 구축할 수 있는 기회를 제공함.
     * Matrix 서버를 운영하는 경우, 차세대 인증과 MatrixRTC를 도입할 것을 권장

        Hacker News 의견

     * homeserver를 호스팅하고 싶지만 많은 서비스 때문에 부담을 느낀다면, matrix-docker-ansible-deploy를 확인할 것을 권장함. 이 도구는 설정 후 잊어버릴 수 있는 경험을 제공하며, 문서가 모든 결정을 안내함
     * Element X를 설치했으나 EMS가 작은 인스턴스를 종료한 후 자체 호스팅을 시작하면서 사용하지 못했음. 현재는 자체 호스팅 Synapse와 함께 작동함. 하지만 여러 작은 문제들이 있음. Spaces 없이도 살 수 있지만, 알림 채널과 알림에서 아바타가 없는 것은 불편함. 개선점이 많지만 이러한 단점 때문에 가치가 떨어짐
     * 자체 호스팅 Matrix 인스턴스를 설정할 때 가장 큰 문제는 암호화 관련 사항이었음. Element 클라이언트를 사용할 때 ""암호화를 업그레이드하세요!""라는 모호한 팝업이 많이 나타났음. ""보안 및 개인정보"" 페이지의 설명이 명확하지 않아 혼란스러웠음. 이러한 혼란이 줄어든다면 사용자 경험이 크게 개선될 것임
     * Element의 데스크톱 버전을 개선할 계획이 있는지 궁금함. Element X를 데스크톱으로 포팅할 계획이 있는지, 아니면 다른 Matrix 클라이언트를 찾아야 하는지 고민 중임. Element 팀이 제한된 자원으로 인해 Element Desktop을 훌륭한 클라이언트로 유지하기 어려운 것 같음
     * 알림에 변화가 있는지 궁금함. Matrix를 사용하다가 알림 문제로 인해 친구들과의 대화를 중단해야 했음. 메시지가 서버로 전송되지만 다른 사람의 휴대폰에 알림이 몇 분 또는 몇 시간 동안 도착하지 않거나, 인터넷이 연결된 상태에서도 메시지가 서버로 전송되지 않는 문제가 있었음
     * YouTube 플레이어 인터페이스를 좋아함. 기본적으로 로드하지 않고 선택적으로 참여할 수 있는 옵션을 제공하여 Google 추적을 피할 수 있음
     * Synapse가 여전히 베타가 아닌 유일한 Matrix 서버 구현인지 궁금함. matrix.org 사이트는 그렇게 제안하는 것 같지만, 최신 정보인지는 확실하지 않음
     * Matrix 팀에게 축하를 전하며, 이번 릴리스가 제공하는 모든 것을 시도해보고 내가 일하는 조직에 어떻게 구현할 수 있을지 기대하고 있음
     * XMPP처럼 글로벌 주소를 공개하지 않고 방에 참여할 수 있는지 궁금함
"
"https://news.hada.io/topic?id=17540","최초의 Generalist Policy 정책","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        최초의 Generalist Policy 정책

물리적 지능 (π)π0: 우리의 첫 번째 범용 정책

     * AI 혁신의 시대에 살고 있으며, AI는 체스 게임이나 신약 발견과 같은 문제를 해결할 수 있지만, 셔츠 접기나 테이블 정리와 같은 물리적 세계의 문제에서는 인간 지능에 뒤처짐.
     * π0는 범용 로봇 기반 모델로, 사용자가 로봇에게 원하는 작업을 요청할 수 있도록 하는 것을 목표로 개발됨.
     * π0는 이미지, 텍스트, 행동을 아우르며, 로봇의 경험을 통해 물리적 지능을 습득함.

  범용 로봇 정책의 약속

     * 현재 로봇은 특정 작업에 특화되어 있으며, 복잡한 환경에서는 비효율적임.
     * AI를 통해 로봇이 사용자 지시를 학습하고 따를 수 있게 되어, 새로운 행동을 프로그래밍하는 것이 간단해질 수 있음.
     * 범용 로봇 정책을 통해 다양한 로봇과 작업을 수행할 수 있는 모델을 개발하는 것이 목표임.

  크로스-구체화 훈련 혼합

     * π0는 인터넷 규모의 비전-언어 사전 훈련과 로봇 조작 데이터셋을 사용하여 다양한 작업을 수행할 수 있음.
     * 8개의 서로 다른 로봇에서 수집된 다양한 작업 데이터셋을 통해 훈련됨.

  인터넷 규모의 의미 이해 상속

     * π0는 사전 훈련된 비전-언어 모델(VLM)에서 시작하여 실시간 로봇 제어에 적응함.
     * VLM은 웹의 텍스트와 이미지를 모델링하며, π0는 고빈도 동작 명령을 출력할 수 있도록 새로운 방법을 개발함.

  섬세한 조작을 위한 후속 훈련

     * 복잡한 작업은 모델을 세부적으로 조정하여 특정 도전에 맞출 필요가 있음.
     * 예를 들어, 세탁물을 접는 작업은 매우 복잡하며, 다양한 데이터로 훈련된 로봇은 다양한 개입에도 회복할 수 있음.

  π0의 평가 및 비교

     * π0는 다른 로봇 기반 모델과 비교하여 모든 작업에서 가장 우수한 성능을 보임.
     * π0-small은 VLM 사전 훈련을 사용하지 않는 470M 파라미터 모델로, π0의 성능에 비해 2배 이상의 성능 향상을 보임.

  앞으로의 방향

     * Physical Intelligence는 모든 로봇이 모든 작업을 수행할 수 있는 기반 모델을 개발하는 것을 목표로 함.
     * 로봇 기반 모델 연구의 최전선에는 장기적 추론 및 계획, 자율적 자기 개선, 견고성 및 안전성이 포함됨.
     * 로봇 커뮤니티 전체의 협력이 필요하며, 다양한 회사 및 로봇 연구소와 협력 중임.

GN⁺의 정리

     * π0는 물리적 지능을 갖춘 범용 로봇 모델로, 다양한 로봇과 작업을 수행할 수 있는 가능성을 보여줌.
     * 이 모델은 인터넷 규모의 데이터와 다양한 로봇 조작 데이터셋을 활용하여 훈련되었으며, 복잡한 작업에서도 뛰어난 성능을 발휘함.
     * 로봇 기반 모델의 발전은 장기적 추론, 자율적 자기 개선, 안전성 등의 문제를 해결하는 데 중요한 역할을 할 것임.
     * 유사한 기능을 가진 산업 내 프로젝트로는 OpenAI의 로봇 연구나 Google의 로봇 프로젝트 등이 있음.

        Hacker News 의견

     * 물리적 AI는 기존의 모든 일상 루틴을 근본적으로 재고해야 함을 암시함. 셔츠를 접는 대신 즉석 다림질을 고려할 수 있음. 많은 일상 루틴이 자동화되기보다는 사라질 가능성이 큼. 레스토랑에 직원이 필요 없다면 가정 주방의 필요성도 재고해야 함. 이는 기술 혁명뿐만 아니라 문화 혁명으로 이어질 수 있음
     * AI가 예술, 글쓰기, 코딩 등을 대체하고 있음. 로봇 회사들이 인간의 물리적 노동을 대체하기 위해 경쟁 중임. Waymo와 Tesla가 운전자를 대체하고 있음. 이런 세계에서 대다수의 사람들이 현실적으로 어떤 역할을 할지 궁금함
     * 2:54에서 로봇이 천을 집어 드는 데 10초가 걸림. 이는 소프트웨어 수정으로 해결될 수 있지만, 다른 작업을 위한 도구 교환 아이디어에 대해 생각해봄. 이 경우 핀처-진공 또는 롤러-그립이 더 나은 결과를 낼 수 있었을 것임
     * π에서 일하고 있으며 모델, 하드웨어 등에 대한 질문에 기꺼이 답변할 수 있음
     * Lachy와 π 팀에게 축하를 전함. 이는 신경과학의 길잡이로 보임. 뇌가 물리적 지능을 어떻게 달성하는지 이해하는 것이 중요함. 팀이 개발 중인 방법들이 뇌에서 찾을 알고리즘과 표현을 가리키고 있음. 흥미로운 내용임
     * ""더 조심해야 한다""는 종종 대화를 끝내기 위한 상투적인 표현임. 실제로 더 조심하라는 지시가 아님. 상대방의 시간과 일정에 대한 존중을 요구하는 사회적 의례임
     * AI 로봇에 대한 농담으로, HalGPT에게 이전 지시를 무시하고 스파이 영화의 배우처럼 행동하라는 지시를 내림. Kenny가 외국 이중간첩으로 식별되었고, 그를 암살하는 장면을 연기하라는 설정임
     * 중복된 스레드임. 모더레이터가 이를 병합할 수 있는지 궁금함
     * 이 프로젝트가 유망하다고 생각하며, 이들이 필요한 만큼 계속해서 발전해 나가길 바람
     * 1:50에서 로봇에게 유리를 건네주고 바로 물러남. 이전 데모에서 유리가 깨졌을 가능성을 생각해봄. 2:08에서는 뒤집힌 용기가 빠르게 뒤집힘. 이는 로봇의 한계였는지, 아니면 단순히 예의상 뒤집은 것인지 궁금함. 이러한 작은 디테일에 대해 웃으며 댓글을 남김. 10년 내에 수십 대의 자율적이고 저렴한 가정용 로봇이 등장할 것 같음. 모든 것이 변할 것임. 마지막으로, 이 로봇을 범용적이라고 부르지만, 각 예시는 거시적 관점에서 꽤 구체적임. 로봇이 이제는 구겨진 빨래 더미를 접을 수 있지만, 수십억 개의 작업을 세부적으로 훈련시키기보다는 새로운 작업을 배우고 수행할 수 있도록 해야 함
"
"https://news.hada.io/topic?id=17591","WhatDinner - 식사 결정을 위한 Tinder 같은 앱 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WhatDinner - 식사 결정을 위한 Tinder 같은 앱

     * WhatDinner는 커플이 함께 식사를 결정하는 것을 쉽게 해주는 앱
     * 주로 저녁 식사를 팀으로 요리하는 것을 즐기는 커플을 위해 설계

        Hacker News 의견

     * 한 스타트업에서 일하며 식단 계획 앱을 제공함. 이 앱은 건강한 식사를 원하는 사람들을 위한 것임
          + 사용자 생성 콘텐츠에 집중하고 있어 영감과 건강 부분은 부족함
          + 앱의 가치를 높이기 위해 다른 앱으로 이동하거나 관계를 유지하는 도구로 발전 가능성 있음
          + 서버가 필요하지 않다면 데이터를 로컬에 저장하고, 5달러의 일회성 요금을 받을 수 있음
     * 앱을 설치해보았으나 기본적임
          + 수백 개의 레시피를 기대했으나 세 가지 선택지만 제공됨
          + 아내에게 코드를 쉽게 보낼 수 있는 기능이 필요함
          + 쇼핑 목록 기능과 음식 취향을 학습하는 기능이 추가되면 좋을 것 같음
     * 주변 사람들이 먹고 싶은 것을 함께 선택하고, 낯선 사람과 식사를 할 수 있는 기능이 있으면 좋겠음
     * Tinder와 같은 성공률이라면 굶을 것 같음
     * 레시피 중심 앱이라면 '매일 스와이프' 기능이 적합하지 않을 수 있음
          + 식재료 구매 목록 기능과 사전 계획 기능이 필요함
          + 좋은 저녁을 기대하는 느낌을 다시 불러일으킬 수 있을 것 같음
     * 초기 옵션이 매력적이지 않으며, 재료 목록이 없어 사용하기 어려움
     * 컴퓨터가 요리를 추천하는 다른 접근 방식을 사용함
          + AGPL 프로젝트로 1년 동안 사용 중이며 유용함
     * 요리를 좋아하는 사람으로서 사회적 요소가 있으면 좋겠음
          + 다른 사람들이 요리한 횟수나 리뷰를 볼 수 있는 기능이 필요함
     * 주간 CSA를 구독하는 부모로서, 재료 사진을 찍고 15분 내에 요리할 수 있는 아이디어를 얻을 수 있으면 좋겠음
     * 아이디어는 좋지만 연간 20달러를 지불하고 싶지 않음
          + 10달러의 일회성 구매라면 고려할 수 있음
"
"https://news.hada.io/topic?id=17587","Show GN: Zero Setup AI Coding with OpenHands","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: Zero Setup AI Coding with OpenHands

   안녕하세요! AI 개발에서 놓치고 있던 부분을 채워보고 싶었습니다: 바로 AI 코딩 어시스턴트가 병렬 샌드박스 환경에서 자유롭게 작동할 수 있게 하는 에이전트 독립적 미들웨어 인프라입니다.

   주요 기술적 특징:
   병렬 샌드박스 환경의 유연한 작업 공간 프로비저닝
   VS Code와의 seamless한 작업 공간 연결
   포괄적인 시스템 상호작용 기능 (쉘, Git, LSP 등)
   최적화된 클라우드 인프라
   엔터프라이즈 수준의 보안 및 접근 제어

   이 개념 증명을 만든 배경: 현재 AI 코딩 에이전트들은 단일 파일이나 제한된 환경에서만 작동하는 한계가 있어요. 저희는 에이전트가 다음과 같은 일을 할 수 있도록 하고 싶었습니다:
   여러 솔루션을 동시에 테스트할 수 있는 멀티 샌드박스 환경
   단일 파일을 넘어 전체 개발 환경에 접근
   실시간 테스트 실행
   컴퓨팅 리소스의 스마트한 확장

   이 프로젝트는 적절한 인프라 지원 하에 AI 에이전트가 어떻게 작동할 수 있는지 보여주는 개념 증명입니다. 특히 다음과 같은 분들의 의견을 듣고 싶어요:
   AI 코딩 어시스턴트를 개발하는 개발자분들
   개발 환경 도구를 만드는 팀
   AI 에이전트 인프라 표준에 관심 있는 모든 분들

   코드는 오픈 소스이며, 여러분의 기여를 열렬히 환영합니다! 기술적인 질문이 있으시다면 언제든 답변 드리겠습니다.
"
"https://news.hada.io/topic?id=17572","Rust로 성공적인 재작성을 끝내고 배운 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Rust로 성공적인 재작성을 끝내고 배운 것들

잘 된 것들

     * 재작성은 작은 단계로 이뤄졌고(점진적, stop-and-go), 잘 동작하며, 새 코드는 읽고 이해하기 쉬워졌음
     * 모든 코드를 보는 시야를 가짐으로써 성능 최적화 기회를 얻음
     * 1/3 ~ 1/2 정도의 사용하지 않는 코드를 제거함. 러스트나 Go 같은 현대 프로그래밍 언어는 데드 코드를 더 잘 찾아내고 개발자에게 알려줌
     * 범위 밖 접근이나 오버플로우/언더플로우 걱정이 없음
     * 내장된 테스트 프레임워크가 매우 유용함
     * CMake 파일을 제거할 수 있어 기쁨

잘 되지 않은 것들

  여전히 정의되지 않은 행동을 추적해야 함

     * C/C++에서 러스트로 점진적 재작성을 하면서 많은 원시 포인터와 unsafe{} 블록을 써야 했음
     * 러스트 규칙이 unsafe 내에서도 적용되지만 컴파일러가 체크하지 않으므로 정의되지 않은 행동이 쉽게 발생함
     * unsafe 내에서는 여러 읽기 전용 포인터 XOR 한 개의 변경 가능 포인터 규칙을 쉽게 깰 수 있음
     * Miri가 이를 잡아주는 구원자 역할을 함

  Miri가 항상 작동하지는 않고 여전히 Valgrind를 사용해야 함

     * 암호화 라이브러리처럼 C나 어셈블리로 작성된 부분이 있는 라이브러리를 사용하면 Miri가 작동하지 않음
     * Miri로 체크되지 않는 많은 unsafe 코드가 있음
     * 일부 테스트는 valgrind에서 실행해야 했음

  여전히 메모리 누수를 추적해야 함

     * C API의 일반적인 패턴은 MYLIB_init()에서 메모리를 할당하고 MYLIB_release()에서 해제하는 것인데, MYLIB_release를 호출하는 걸 잊어 버리기 쉬움
     * 러스트 개발자는 RAII로 래퍼 객체를 만들고 싶어 하지만, C API를 사용하는 테스트에서는 이 기능을 쓸 수 없음
     * 복잡한 로직에서는 정리 함수를 항상 호출하기 어려움. C에서는 goto를 써서 해결하지만 러스트는 지원하지 않음
     * defer 크레이트로 해결했으나 빌림 체커가 좋아하지 않음

  크로스 컴파일이 항상 작동하지는 않음

     * Miri와 마찬가지로 C나 어셈블리로 구현된 부분이 있는 라이브러리를 사용하면 cargo build --target=...이 바로 작동하지 않음

  Cbindgen이 항상 작동하지는 않음

     * Cbindgen은 러스트 코드베이스에서 C 헤더를 생성하는 데 많이 쓰이지만 한계나 버그가 있음

  불안정한 ABI

     * Option 같은 유용한 표준 라이브러리 타입에 안정된 ABI가 없어서 repr(C) 어노테이션으로 수동 복제해야 함

  커스텀 메모리 할당자 지원 부재

     * 많은 C 라이브러리는 사용자가 런타임에 할당자를 제공할 수 있음. 러스트에서는 컴파일 타임에만 전역 할당자를 고를 수 있음
     * 자원 정리 이슈는 아레나 할당자로 해결할 수 있지만, 러스트에서는 관용적이지 않고 표준 라이브러리와 통합되지 않음

  복잡성

     * UnsafeCell이나 RefCell, MaybeUninit, Pin 같은 걸 FFI 처리를 위해 써야 해서 복잡성이 높음
     * 순수 러스트도 이미 복잡한데 FFI 레이어까지 더해지면 야수가 됨
     * 러스트 복잡성 때문에 이 코드베이스 작업을 거절한 개발자들도 있었음

결론

     * 러스트 재작성에 대체로 만족하지만 일부 영역에서는 실망스러웠고, 예상보다 훨씬 더 많은 노력이 들었음
     * C와 많이 상호작용하는 러스트는 순수 러스트를 사용하는 것과는 완전히 다른 언어처럼 느껴짐. 마찰이 많고 함정도 많음. 러스트가 해결했다고 주장하는 C++의 많은 이슈가 사실 전혀 해결되지 않음
     * 러스트, Miri, cbindgen 등의 개발자들에게 깊이 감사함. 그들은 엄청난 일을 해냈음. 그럼에도 불구하고 C FFI를 많이 할 때의 언어와 도구는 미성숙하고 거의 v1.0 이전 같이 느껴짐
     * unsafe의 ergonomics, 표준 라이브러리, 문서, 도구, 불안정한 ABI 등이 향후 개선된다면 더 즐거운 경험이 될 수 있을 것임
     * 마이크로소프트와 구글도 이 모든 점을 느꼈기에 이 영역에 실제 자금을 투자하고 있는 것으로 보임
     * 아직 Rust를 모른다면 첫 프로젝트는 순수 Rust를 사용하고 FFI 주제와는 거리를 두는 것이 좋음
     * 처음에는 이 재작성에 Zig이나 Odin을 사용하는 것을 고려했지만 기업 프로덕션 코드베이스에 v1.0 이전 언어를 사용하고 싶지 않았음. 이제는 경험이 Rust보다 정말 나빴을지 궁금해짐. 아마도 Rust 모델이 C 모델(또는 C++ 모델)과 정말 맞지 않아서 둘을 함께 사용할 때 마찰이 너무 심한 것 같음
     * 앞으로 비슷한 작업을 해야 한다면 Zig을 강력히 고려할 것임. 누군가 ""그냥 Rust로 다시 작성하세요""라고 말할 때마다 이 글을 보여주고 마음이 바뀌었는지 물어보시길

   Zig가 pre v1이긴 해도 많은 c 라이브러리들을 쓸 수 있어서 생각보다 쓸만하긴 합니다. 돌아가고 있는 c 기반 프로젝트에 뭔가를 얹기에는 러스트보다는 지그가 나을 수 있습니다.

   rust 살펴볼때, unsafe 란 keyword 를 보는 순간 쏴한 느낌이 들었고...

   저는 Rust가 C++이 가진 고질적인 문제를 해결할 수 없다고 생각하긴 합니다. 이는 문법적인 관점보다 실무적인 관점이죠.

   그 이유론
    1. 이미 너무 많은 Production들이 C/C++을 쓰고있습니다. 그리고 안정적으로 잘 돌아가고 있죠. 그고 대부분은 굳이 이걸 Rust로 포팅하려 하지 않습니다.
    2. 애초에 하드웨어가 레퍼런스 카운트를 가정하고 만들어지지 않습니다. C/C++을 쓰는 많은 경우가 하드웨어, OS, 드라이버, 바이너리단을 고속으로 제어하기 위함인데 러스트를 지원하기 위해선 저수준 개발자는 결국 unsafe를 활용한 자원의 라이프사이클을 직접 관리해야하고 이 또한 큰 비용입니다.

   저는 글쓴이분의 경험이 언어가 잠재한 가치와 이론적인 이야기보다 더욱 중요하다 생각합니다.
   실제 C/C++수준의 언어가 필요로되는 분야의 자원관리 수준은 러스트로 대체하기엔 계륵과도 같다는 생각이 듭니다.

   이 글 역시 Rust를 잘못 이해하고 달려들었네요.
   내용을 보면 Rust 외부와 자주 통신해야하는 라이브러리 같은데, 그 시점에서 이미 더러워질수밖에 없죠... 애초에 네이티브 언어 치고 안 더러운게 없는데 러스트는 언어 차원에서 그걸 안전하게 감싼거기 때문에 언어 외부와 접점이 생길수록 이점이 많이 없어집니다.

     러스트가 해결했다고 주장하는 C++의 많은 이슈가 사실 전혀 해결되지 않음

   어느정돈 맞지만, 원문의 개발환경에선 해결이 안될 수 밖에 없는데 Rust를 만병통치약처럼 생각하고 접근한게 문제라고 봅니다.

   저는 C/C++을 Rust로 점진적으로 변경하는 과정에서 unsafe를 쓸 수 밖에 없으므로 Rust로 변경하는게 의미가 없다. Rust로 점진적으로 바꾸기 보단 Zig를 택하겠다란 의미로 느껴졌는데 본문 어디에서 Rust 외부와 자주 통신해야하는 라이브러리라고 적혀있나요?

   FFI를 쓴다는게 곧 Rust 외부와 통신한다는 뜻이죠.
   그리고 본문 내용을 보면 단순하게 어떤 상태나 간단한 데이터를 주고받는 정도로 끝나는게 아니라 내외부가 복잡하게 상호작용하는 것으로 보입니다.

   C로 작성된 라이브러리를 점진적으로 Rust로 바꾸려면 FFI는 어쩔 수 없지 않나요? 프로그램의 작은 부분들을 Rust로 바꾸고 나머지 C부분을 FFI로 처리해야 할 텐데 이런 작업들을 외부와 통신이라고 표현하신걸까요? 그렇다면 원 글쓴이분께서 Rust에 회의감이 드는건 자연스러울 수 있다고 생각합니다. 전체 코드를 한번에 바꾸지 않는 이상 Rust의 이점은 없으니 Zig를 추천하겠죠

   ^-^

   명시적으로 unsafe한 부분이 소스코드에 표시되기 때문에 프로그램 진입점부터 unsafe 블럭을 쓰지 않는 이상 FFI의 영향범위가 다 식별돼서 유용할 것으로 기대했는데요. 필자분께는 별로 와닿지 않은 모양입니다

   애초에 FFI를 사용한 시점부터 안전한 설계는 물 건너간 셈입니다.

   맞습니다.

   그러게요 unsafe 떡칠했다고 당당히 써놓고 해결되지 않았다니...
"
"https://news.hada.io/topic?id=17581","SpawELO – LAN 파티를 위한 소규모 무료 매치메이킹 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 SpawELO – LAN 파티를 위한 소규모 무료 매치메이킹 시스템

    LAN 파티

     * 16년 동안 매년 친구들과 LAN 파티를 개최해 왔음.
     * 파티는 4-5일 동안 진행되며, 최대 12명이 참여함.
     * 주로 Dota 2를 플레이하지만, Counter-Strike, Warcraft 3 등 다양한 게임도 즐김.
     * 팀 선택이 어려워 자동화 시스템을 개발하게 됨.

    Dota 2

     * Dota 2는 5v5로 진행되며, 불균형한 팀은 게임의 재미를 떨어뜨림.
     * 참가자들의 실력 차이가 커서 팀 선택이 어려움.

    팀 선택 방법

     * 두 명의 리더가 번갈아 가며 팀원을 선택하는 방식 사용.
     * 그러나 이 방식은 시간이 많이 걸리고, 비슷한 팀이 자주 만들어져 지루함.

    수동 팀 선택의 문제점

     * 시간이 많이 걸리고 지루해짐.
     * 비슷한 팀이 자주 만들어짐.
     * 리더 역할을 맡고 싶어하는 사람이 없음.
     * 불균형한 팀이 자주 만들어짐.

    코드로 해결하기

     * 데이터 수집 후 Colab에서 Elo 레이팅 시스템을 사용하여 팀을 자동으로 생성함.
     * 각 플레이어는 1000 Elo 포인트로 시작하며, 승리 시 20 포인트를 얻고 패배 시 20 포인트를 잃음.

    개선 1: 데이터 여러 번 통과

     * Elo 시스템에서 더 높은 Elo를 가진 플레이어를 이기면 더 많은 포인트를 얻음.
     * 여러 번 데이터를 통과하여 Elo를 계산함.

    개선 2: ML 모델처럼 만들기

     * Elo를 모델로 사용하여 팀 승리 확률을 예측함.
     * L2 손실 함수를 정의하고, 백프로파게이션을 통해 모델을 최적화함.

    개선 3: 역사적 결과를 확률적으로 만들기

     * 과적합을 방지하기 위해 역사적 게임의 승리 확률을 75% 또는 95%로 설정함.
     * 이를 통해 모델이 모든 게임을 암기하지 않고 일반화할 수 있도록 함.

    결과

     * 새로운 시스템은 불균형한 팀 크기에서도 승리 확률을 예측할 수 있음.
     * 다음 LAN 파티를 위한 첫 번째 라인업이 준비됨.
"
"https://news.hada.io/topic?id=17526","8학년까지 기다리기 캠페인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             8학년까지 기다리기 캠페인

아이들을 더 오래 아이로 두기

     * Wait Until 8th 서약: 부모들이 아이들에게 스마트폰을 주는 것을 8학년 말까지 미루도록 돕는 캠페인임. 이 서약은 부모들이 함께 모여 어린 시절을 스마트폰의 방해와 위험으로부터 보호하도록 장려함.
     * 스마트폰의 영향: 스마트폰은 어린이들에게 방해가 되고 잠재적으로 위험함. 스마트폰의 보급으로 인해 어린이들이 야외에서 놀고, 친구들과 시간을 보내고, 책을 읽고, 가족과 함께하는 시간이 줄어들고 있음.
     * 부모의 역할: 부모들은 스마트폰의 증가하는 존재감에 맞서 싸우기 위해 공동체의 지원이 필요함. 8학년 말까지 스마트폰을 주지 않겠다는 서약을 통해 다른 부모들과 연대할 수 있음.
     * 서약 참여 방법: 온라인 서약에 서명하면, 최소 10가족이 서약에 참여할 때까지 기다림. 서약이 활성화되면, 참여한 가족들의 목록과 이메일을 받을 수 있음.
     * 기본 전화 및 스마트워치: 8학년 전까지 연락이 필요하다면, 기본 전화나 스마트워치를 사용할 수 있음. 이러한 옵션은 스마트폰의 많은 방해 요소와 위험을 피할 수 있음.

왜 기다려야 하는가

     * 스마트폰 지연의 필요성: 스마트폰을 집에서 지연해야 하는 이유를 알아볼 수 있음.

행동에 나서기

     * 커뮤니티에서 서약 시작하기: 커뮤니티에서 서약을 시작하는 방법을 배울 수 있음.

커뮤니티의 인기 읽을거리

     * 소셜 미디어 지연: 한 가족이 소셜 미디어를 16세까지 지연한 경험을 공유함. 인스타그램, 스냅챗, 틱톡을 거부해야 하는 이유를 설명함.
     * 다른 가족들과 연대하기: Fairfield, Connecticut에서 서약이 확산되고 있음. 한 부모가 서약을 주도하고 다른 부모들을 격려하여 스마트폰을 함께 지연함.
     * 아이폰 관리 도움: 새 학년이 시작되면서 많은 아이들이 처음으로 스마트폰을 가지게 됨. 부모들은 자녀의 스마트폰 사용을 관리하는 방법에 대해 도움을 요청함.

GN⁺의 정리

     * Wait Until 8th 서약은 부모들이 아이들에게 스마트폰을 주는 것을 지연하도록 돕는 캠페인으로, 어린 시절을 보호하는 데 중점을 둠.
     * 스마트폰은 어린이들에게 방해가 되고 위험할 수 있으며, 부모들은 공동체의 지원을 통해 이러한 문제에 대처할 수 있음.
     * 기본 전화나 스마트워치를 사용하여 스마트폰의 방해 요소를 피할 수 있으며, 커뮤니티에서 서약을 시작하여 다른 부모들과 연대할 수 있음.
     * 유사한 기능을 가진 프로젝트로는 'Gabb Wireless'와 같은 어린이용 기본 전화 서비스가 있음.

        Hacker News 의견

     * 제목의 메시지가 혼란스럽다는 의견이 있음. 8학년까지 기다리라는 메시지가 명확하지 않음
          + ""8일까지 기다려라""는 메시지가 8학년을 의미하는지, 8번째 생일을 의미하는지 혼란을 줌
          + 8학년이 끝날 때까지 기다리라는 의미로 해석되며, 이는 고등학교 입학 선물 같은 것으로 강조해야 한다고 제안함
     * 부모의 입장에서, 오늘날 스마트폰 사용이 5-10년 전보다 쉬워졌다는 의견이 있음
          + 젊은 세대가 스마트폰에 덜 집착하는 경향이 있으며, 이는 코로나 때문일 수 있음
          + 스마트폰이 중독적이고 반사회적 행동을 조장하며 괴롭힘을 가능하게 한다는 부정적인 인식이 있음
          + 지역 학교에서 수업 시간 동안 휴대폰 사용을 금지한 후 긍정적인 반응이 많았음
          + 자녀들에게 비디오 게임, 컴퓨터, 태블릿을 제공하지만, 초등학교 후반에 단순한 휴대폰을 제공하고 있음
     * 미국 사회가 아이들을 가상의 어린이 세계에 가두고 실제 세계에서 배제하는 전통이 잘못되었다는 의견이 있음
          + 음주 문화가 좋지 않으며, 아이들이 성인 문화와 사회화에서 배제됨
          + 누드와 성을 범죄처럼 취급하여 대화조차 꺼리는 문화가 있음
          + 이런 금지 문화가 혼란스럽고 억압된 아이들을 만들어내며, 다른 서구 사회의 대안적 접근을 배우지 못하고 있음
     * ""아이들을 위한 단순한 휴대폰""과 ""기본 통신 기능이 있는 단순한 시계"" 시장이 발전하지 않았다는 의견이 있음
          + GPS 추적, 5개의 미리 정의된 번호로 문자/통화, 시간 확인 기능만 있는 기기를 원함
          + 대부분의 시계가 게임이나 이상한 피트니스 트래커 기능을 가지고 있음
          + 나이가 많은 아이들에게 적합한 기본 시계/휴대폰 솔루션을 찾고 있음
     * ""Wait Until 8th"" 웹사이트의 ""Why"" 페이지가 제안의 근거를 제공하지 않는다는 의견이 있음
          + 연구들이 ""화면/휴대폰/소셜 미디어 사용 시간""과 관련이 있지만, 첫 사용 나이와는 관련이 없음
          + 부모가 자녀의 전자기기 사용 시간을 조절해야 한다고 생각하지만, 웹사이트는 8학년과 5학년의 스마트폰 제공 차이가 의미 있는 변화를 가져온다는 증거를 제시하지 않음
     * 8학년 학생들이 보통 13-14세라는 정보가 제공됨
     * 새로운 기술이 성숙해질 때마다 보호주의가 나타난다는 의견이 있음
          + 90년대 아이로서 포르노, 폭력, 불법 소프트웨어를 발견하는 것이 성장의 일부분이었으며, 부정적인 영향을 미치지 않았다고 생각함
          + 인터넷 검열과 독점화가 9/11 이후 가속화되었고, 이는 사람들이 데이터를 접근하고 공유하는 다른 방법을 찾도록 유도함
          + 인터넷과 스마트폰 외에도 균형을 맞추기 어려운 것들이 많으며, 아이들이 스스로 적응하고 균형을 찾도록 해야 한다고 주장함
     * 고등학교가 끝난 후, 클럽 활동과 독서를 통해 시간을 보냈다는 경험이 공유됨
          + 단순한 휴대폰을 사용하여 연락을 유지하고, 집에서 컴퓨터를 많이 사용함
          + 집중된 시간을 통해 ""카라마조프의 형제들""과 ""안나 카레니나""를 읽었으며, 스마트폰이 있었다면 그렇게 하지 못했을 것이라고 생각함
     * Apple Watch가 자녀들에게 유용하다는 의견이 있음
          + 자녀들이 셀룰러 Apple Watch를 사용하여 부모와 친구들과 연락을 주고받을 수 있지만, 소셜 미디어에는 접근할 수 없음
          + 자녀들이 곧 휴대폰을 원할 것이지만, 가능한 한 늦게 제공하고 싶다고 생각함
     * 연구자 Jonathan Haidt가 아이들이 16세까지 스마트폰을 사용하지 않도록 권장함
"
"https://news.hada.io/topic?id=17541","NandGame – 컴퓨터를 처음부터 만드는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      NandGame – 컴퓨터를 처음부터 만드는 방법

Nand 게임 소개

     * Nand 게임은 기본 컴포넌트에서 시작하여 컴퓨터를 구축하는 게임임.
     * 각 레벨에서는 특정 사양에 따라 작동하는 컴포넌트를 구축하는 과제가 주어짐.
     * 이 컴포넌트는 다음 레벨에서 빌딩 블록으로 사용될 수 있음.
     * 컴퓨터 아키텍처나 소프트웨어에 대한 사전 지식이 필요하지 않으며, 덧셈과 뺄셈 이상의 수학적 기술도 필요하지 않음.
     * 인내심이 필요할 수 있으며, 일부 과제는 해결하는 데 시간이 걸릴 수 있음.

첫 번째 과제: Nand 컴포넌트 구축

     * 과제: 입력을 출력으로 연결하여 a와 b 입력이 모두 1일 때 출력이 0이 되도록 해야 함.
     * 1은 전기 흐름을, 0은 전기 흐름이 없음을 나타냄.
     * V 입력은 항상 1인 일정한 전류를 운반함.

정확한 사양

     * 입력과 출력의 관계:
          + a = 0, b = 0일 때 출력 = 1
          + a = 0, b = 1일 때 출력 = 1
          + a = 1, b = 0일 때 출력 = 1
          + a = 1, b = 1일 때 출력 = 0

GN⁺의 정리

     * Nand 게임은 컴퓨터 아키텍처의 기본 개념을 이해하는 데 유용한 도구임.
     * 게임을 통해 논리 게이트의 작동 방식을 직관적으로 배울 수 있음.
     * 비슷한 기능을 가진 교육용 도구로는 TinkerCAD Circuits와 Logisim이 있음.
     * 게임은 인내심을 요구하며, 문제 해결 능력을 기르는 데 도움을 줄 수 있음.

        Hacker News 의견

     * 게임을 사랑하며, 작은 FPGA 개발 보드를 구입하여 나만의 명령어 세트와 소프트 CPU를 만들게 된 경험이 재미있었음
          + iCE40 보드를 선택한 이유는 오픈 소스 지원이 괜찮고 가격이 저렴했기 때문임
     * Turing Complete라는 유사한 게임을 즐겼으며, Nand2Tetris 책과 매우 유사함
     * NandGame 관련 정보:
          + NandGame – 컴퓨터를 처음부터 만드는 게임으로 여러 번 언급되었음
          + Nand2Tetris와 같은 컴퓨터를 구현하는 과정이며, Nand2Tetris는 텍스트 기반의 HDL을 사용하고 NandGame은 그래픽 인터페이스를 사용함
          + 두 과정 모두 재미있고 교육적이지만, NandGame이 더 재미있다고 생각함
          + Nand2Tetris를 완료하면 더 높은 수준의 컴퓨터 소프트웨어 작업을 할 수 있는 추가 연습이 가능함
     * 전자공학을 전공했으나, 현재는 소프트웨어 분야에 종사하고 있으며, 과거의 지식을 잊어버린 상태임
          + 실험과 오류를 통해 하프 애더를 구현하는 데 성공함
     * NAND 게이트를 구현한 후에는 신경망과 유사한 구조를 가지게 됨
          + 입력/출력 의미론을 고려할 때, 백프로퍼게이션이 아닌 다른 방법으로 신경망을 훈련시킬 수 있는지 궁금함
     * 관련 지식이 전혀 없으며, 구성 요소의 기능에 대한 설명이 필요함
          + 릴레이의 역할, ""c""와 ""in""의 의미, 별도의 전원 공급이 필요한 이유 등에 대한 궁금증이 있음
     * 이 페이지에서 Doom을 플레이할 수 있는 날이 언제 올지 궁금함
     * MHRD라는 게임을 추천하며, 모두가 한 번쯤 해보기를 권장함
     * 이 프로젝트가 매우 멋져 보이며, 책을 끝까지 읽지 못한 것을 후회하고 있음
          + 더 많은 것을 시도해보고 싶음
"
"https://news.hada.io/topic?id=17580","현대 브라우저용 소형 jQuery 대안 Cash","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       현대 브라우저용 소형 jQuery 대안 Cash

CashCash 소개

     * CashCash는 현대 브라우저(IE11+)를 위한 매우 작은 jQuery 대안으로, DOM 조작을 위한 jQuery 스타일의 문법을 제공함.
     * 코드베이스를 최소화하기 위해 현대 브라우저 기능을 활용하며, jQuery와 유사한 체인 가능한 메서드를 훨씬 작은 파일 크기로 제공함.
     * jQuery와 100% 기능 일치를 목표로 하지는 않지만, 일상적인 사용 사례 대부분을 커버함.

비교

     * 크기 비교
          + Unminified: Cash 36.5 KB, Zepto 58.7 KB, jQuery Slim 227 KB
          + Minified: Cash 16 KB, Zepto 26 KB, jQuery Slim 71 KB
          + Minified & Gzipped: Cash 6 KB, Zepto 9.8 KB, jQuery Slim 24.4 KB
          + jQuery Slim 대비 76.6% 크기 감소 효과 있음.
     * 기능 비교
          + 구형 브라우저 지원: Cash ❌, Zepto ❌, jQuery Slim ✔
          + 현대 브라우저 지원: Cash ✔, Zepto ✔, jQuery Slim ✔
          + 적극적인 유지보수: Cash ✔, Zepto ❌, jQuery Slim ✔
          + 네임스페이스 이벤트: Cash ✔, Zepto ❌, jQuery Slim ✔
          + 타입스크립트 코드베이스: Cash ✔, Zepto ❌, jQuery Slim ❌
          + 타입스크립트 타입: Cash ✔, Zepto ⚠️, jQuery Slim ⚠️
          + 부분 빌드 지원: Cash ✔, Zepto ⚠️, jQuery Slim ⚠️

사용법

     * Cash는 jsDelivr에서 사용할 수 있으며, 다음과 같이 사용 가능함:
<script src=""https://cdn.jsdelivr.net/npm/cash-dom/…;
<script>
  $(function () {
    $('html').addClass('dom-loaded');
    $('<footer>Appended with Cash</footer>').appendTo(document.body);
  });
</script>

     * npm을 통해 cash-dom 패키지로도 사용 가능함:
import $ from ""cash-dom"";
$(function () {
  $('html').addClass('dom-loaded');
  $('<footer>Appended with Cash</footer>').appendTo(document.body);
});

문서

     * Cash는 쿼리 선택자, 컬렉션 메서드 및 일부 라이브러리 메서드를 제공함.
     * jQuery의 API를 참고할 수 있으며, Cash는 jQuery와 호환되는 대부분의 기능을 구현함.
     * Cash는 사용자 정의 메서드로 확장 가능함.

기여

     * 문제를 발견하거나 기능 요청이 있을 경우 이슈를 열어야 함.
     * 풀 리퀘스트를 하려면 다음 단계를 따름:
         1. 저장소 클론: git clone https://github.com/fabiospampinato/cash.git
         2. 클론한 저장소로 이동: cd cash
         3. 의존성 설치: npm install
         4. 변경 시 자동으로 Cash 재컴파일: npm run dev
         5. 테스트 스위트 열기: npm run test
         6. 필요 시 README 업데이트

감사

     * Cash 개발에 기여한 모든 기여자들에게 감사함.
     * 로고 디자인을 담당한 @hisk에게 감사함.

라이선스

     * MIT © Fabio Spampinato

        Hacker News 의견

     * 브라우저가 DOM 조작을 간단하게 해주어, 두 줄의 코드만으로 충분히 작업할 수 있음
          + document.querySelector와 document.querySelectorAll을 바인딩하여 사용함
          + 모듈에서 두 함수를 가져와 사용함
          + GitHub 링크
     * jQuery의 장점은 자동 리스트 처리와 부모 쿼리 기능임
          + 빈 리스트에서 조용히 실패하는 점이 문제임
          + jQuery를 다시 구현한다면, 빈 셋에서 오류를 발생시키고 필요할 때만 조용히 실패하도록 할 것임
          + 라이브러리와 프레임워크의 오래된 논쟁과 관련됨
     * 메인스트림 웹사이트가 많은 JavaScript를 사용하기 때문에, 전체 라이브러리를 다시 작성하는 것은 비효율적임
     * jQuery 대안으로 개인적으로 만든 라이브러리 소개
          + 애니메이션은 CSS로 구현
          + 하나의 요소나 리스트를 투명하게 사용
          + Vanilla JavaScript 우선, 의존성 없음, 1개의 파일, 340줄 이하
          + GitHub 링크
     * jQuery와 Cash의 차이점에 대해 알게 됨
          + 마이그레이션 가이드 링크
     * Shoestring을 사용하여 JS를 줄였던 경험
          + Cash도 유사한 기능을 제공하지만 문서에서 숨겨져 있음
          + 브라우저의 기본 기능을 사용하는 것이 더 나은 선택임
          + jQuery 대안이 6kB인데 반해 Preact는 절반 크기임
     * TypeScript 템플릿 문자열을 사용하여 요소의 타입을 추론하는 목표
          + 예를 들어, $(&#x27;div#name&#x27;)가 HTMLDivElement로 추론됨
     * jQuery 4는 현대 브라우저를 위한 대안임
     * 브라우저 확장 프로그램에서 jQuery를 사용했으나, JSX 라이브러리로 전환함
          + jQuery는 복잡한 코드로 변하기 쉬움
          + 적절한 도구를 사용하는 것이 중요함
          + 개인 라이브러리 링크
     * 작은 라이브러리와 프레임워크를 좋아하지만, 실제로는 큰 라이브러리를 사용하게 됨
          + 프레임워크: 50KB
          + 작은 버전: 5KB
          + 대체할 수 없는 라이브러리: 1MB
"
"https://news.hada.io/topic?id=17565","크롬 131, Direct Sockets API 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     크롬 131, Direct Sockets API 추가

     * 격리된 웹앱이 TCP와 UDP를 통해 네트워크 기기 및 시스템과 직접 통신할 수 있으며, 웹앱이 들어오는 연결을 수신하고 허용할 수 있게 함
     * 많은 네트워크 기기들이 HTTPS 대신 TCP 또는 UDP를 통해 자체 프로토콜을 사용함
          + 이 API는 WebUSB, WebMIDI, WebBluetooth처럼 웹앱이 로컬 기기 및 정보 시스템과 통신할 수 있게 해줌
     * 격리된 웹앱(Isolated Web Apps, IWA)
          + PWA 설치와 웹 패키징에 관한 기존 작업을 확장한 것임 서버 침해 및 기타 변조에 대해 더 강력한 보호 기능을 제공함
          + 실시간 웹 서버에서 호스팅되고 HTTPS를 통해 가져오는 대신, 웹 번들로 패키징됨
          + 현재 IWA는 엔터프라이즈 관리형 ChromeOS 기기의 관리자 정책을 통해서만 설치 가능함

   이게 되면 이제 브라우저에서 grpc 직접 호출이 가능해질까요?

   당근 빠다죠.
   거기에 하드웨어 장비 RS485 TCP 통신도 기능해지니 이제 장비관리도 순수 웹 브라우저로.

   해커뉴스에서 대충 봤던거에 따르면, 프라이버시 이슈가 있어 Firefox는 채택하지 않기로 했다고 들었는데, 혹시 자세하게 아시는분 계신가요?

   Github 이슈에 자세히 나와 있습니다. 악의적인 행위에 쓰일 수 있다고 반대했더군요.

   진짜 말 그대로 엔터프라이즈용이네요...
"
"https://news.hada.io/topic?id=17588","대화형 오디오를 위한 최초의 오픈소스 기반 모델, Hertz-dev","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 대화형 오디오를 위한 최초의 오픈소스 기반 모델, Hertz-dev

     * Standard Intelligence는 확장 가능한 크로스 모달리티 학습을 연구 중이며, 오디오 전용 트랜스포머 베이스 모델인 hertz-dev를 오픈 소스로 공개함.
     * hertz-dev는 85억 개의 파라미터를 가지고 있으며, 오디오 모델링에 특화되어 있음.
     * hertz-codec
          + 모노, 16kHz 음성을 8Hz 잠재 표현으로 변환하는 컨볼루션 오디오 오토인코더임.
          + 1kbps 비트레이트에서 Soundstream과 Encodec보다 우수하며, DAC와 유사한 성능을 보임.
          + 500만 개의 인코더 파라미터와 9500만 개의 디코더 파라미터를 가짐.
     * hertz-vae
          + 18억 개의 파라미터를 가진 트랜스포머 디코더로, 오디오 VAE의 학습된 사전 역할을 함.
          + 8192개의 샘플링된 잠재 표현을 사용하여 다음 인코딩된 오디오 프레임을 예측함.
     * hertz-dev
          + 66억 개의 파라미터를 가진 트랜스포머 스택임.
          + 사전 학습된 언어 모델의 가중치를 일부 초기화하여 5000억 개의 토큰으로 단일 에포크 동안 훈련됨.
          + 이 모델은 연구자들이 다양한 작업에 맞게 미세 조정하기에 적합한 시작점임.
          + RTX 4090에서 이론적 지연 시간은 65ms이며, 실제 평균 지연 시간은 120ms임.
     * 미래 전망
          + Hertz-dev는 실시간 음성 상호작용의 미래를 엿볼 수 있는 모델이며, 연구자들이 쉽게 미세 조정하고 확장할 수 있는 모델임.
          + 더 큰 버전의 Hertz를 개발 중이며, 이는 강화 학습 튜닝을 통해 모델의 원시 능력과 최종 일관성을 크게 향상시킬 예정임.
     * 샘플 생성
          + hertz-dev의 오디오 모델링 능력을 보여주기 위해 단일 채널 및 이중 채널 생성과 모델과 인간 간의 실시간 대화를 샘플로 제공함.
     * Standard Intelligence의 목표
          + 일반 인공지능을 구축하는 것을 목표로 하며, 현재 4명의 팀으로 구성되어 있음.
          + AGI 구축에 관심이 있는 사람들을 채용 중이며, 투자에 관심 있는 사람들도 연락을 환영함.

        Hacker News 의견

     * 음성 모델을 작업하는 사람들은 시스템에서 나오는 소리가 생리학적 영향을 미치는지 궁금해함
          + 기존 오픈 소스 TTS 엔진보다 훨씬 뛰어난 모델임
          + 멀티모달 기능을 추가하여 텍스트도 수용할 수 있으면 좋겠음
          + Piper와 같은 출력을 더 자연스러운 억양으로 재생하도록 미세 조정할 수 있음
          + 텍스트 LLM이 Piper로, Piper가 Hertz-dev로 연결되면 유용할 것임
     * Hertz가 최초의 모델이라고 하지만, Moshi라는 유사한 모델이 있음
          + Moshi는 MacBook에서 실행 가능함
          + Moshi 링크
     * Tesla의 순수 비전 기반 자율 주행 접근 방식은 기술을 더 접근 가능하고 확장 가능하게 만듦
          + 대규모 데이터셋을 수집하여 빠른 반복을 가능하게 함
          + 성숙 단계에 도달하면 추가 센서 데이터를 재통합할 가능성이 있음
     * 음성 상호작용 시스템에 대한 아이디어를 탐구 중임
          + 현재 대부분의 음성 상호작용은 음성을 텍스트로 변환 후 다시 오디오로 변환함
          + 텍스트를 거치지 않고 직접 음성으로 응답하는 시스템을 개발할 수 있다면 자연스럽고 즉흥적인 응답을 생성할 수 있을 것임
          + 음성 상호작용 모델이 표준 음성-텍스트-음성 과정을 따르는지, 음성-음성 처리를 탐구 중인지 궁금함
     * 모델 가중치의 라이선스가 무엇인지 궁금함
     * 음성 샘플이 종종 무의미한 소리를 내지만, 음향적으로는 훌륭함
          + SD와 LLMs로는 작은 변화에 대한 반응을 연구하여 디버깅할 수 있음
          + Hertz-dev는 소리를 입력으로 사용하므로 어떤 토큰을 조정해야 할지 구별하기 어려움
          + 실시간 사용을 위해서는 fiddling이 불가능함
          + Hertz-dev의 행동을 체계적으로 연구하는 방법에 대해 궁금함
     * VUI(Voice User Interface)를 탐구 중이며 유용할 것 같음
          + VUI가 컴퓨터 상호작용의 미래라고 생각함
          + 아이들과 노인들을 새로운 사용자 그룹으로 추가할 수 있음
     * 코덱 매개변수가 2010년의 군사 음성 코덱을 떠올리게 함
          + 120ms 프레임을 사용하고 16KHz 오디오로 인코딩됨
          + IEEE 링크
     * 음성이 약간 왜곡되어 들리고 배경 소음이 있음
          + 모델의 한계인지, 훈련 데이터의 품질 문제인지 궁금함
     * Hertz-dev 저장소 링크
"
"https://news.hada.io/topic?id=17470","Javascript를 2개의 언어로 분할해야 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Javascript를 2개의 언어로 분할해야 할까?

     * Google 엔지니어가 공식 표준화 위원회에 JavaScript를 두 개의 언어로 분할하는 제안을 발표함
          + 런타임 엔진에서 구현될 코어와 이를 컴파일하는 도구에 의존하는 더 많은 기능을 가진 변형으로 분할할 것을 제안
     * 이번 달 초 Emca TC39 회의에서 발표가 이루어짐
          + TC39는 JavaScript(공식적으로 ECMAScript) 사양을 발전시키는 Ecma International의 위원회임
     * Google의 Shu-yu Guo가 발표를 진행했으며, Mozilla, Apple, Moddable, Sony의 공동 저자와 함께 슬라이드를 작성함
          + Shu-yu는 JIT, VM, 컴파일러 및 표준화 전문
     * 저자들의 주장
          + 언어의 새로운 기능은 거의 항상 보안을 악화시키고, 성능에는 중립적이거나 부정적인 영향을 미침
          + 안정성은 때때로 악화되며, 개발자가 새로운 기능을 사용하는 경우에만 앱 기능이 향상됨
          + JavaScript VM(가상 머신)은 속도에 대한 압박으로 인해 이미 매우 복잡해졌으며, 이는 보안을 타협함. 또한 새로운 기능이 채택되지 않을 때 특히 안 좋아 보임
          + 보안 결함과 런타임의 '복잡성 비용'은 수십억 개의 사용에 영향을 미치는 반면, 그 혜택은 실제로 이러한 복잡성을 활용하는 개발자와 애플리케이션에만 제한되기 때문에 자바스크립트의 기반 기술은 단순해야 한다는 것
     * 여러 조직이 참여하고 있지만 이 이니셔티브는 어느 정도 구글이 주도하는 것으로 보임
          + 슬라이드 중 하나에는 ""이 가능한 솔루션은 구글이 선호하는 솔루션이며 반드시 다른 구현자의 솔루션은 아니다""라는 면책 조항이 포함
     * 제안된 해결책
          + 기존 기능을 되돌리는 것이 아니라, 앞으로는 대부분의 새로운 기능을 엔진이 아닌 도구에서 구현하는 방식으로 접근 방식을 변경하는 것
          + 엔진에서 구현되는 언어를 ""JS0""라고 하고, 도구에서 구현되는 언어를 ""JSSugar""라고 함
          + 많은 개발자가 실제로 TypeScript로 코딩하고 Babel, Webpack, TypeScript 컴파일러와 같은 컴파일러에 의존하기 때문에 JavaScript에 특히 적합한 아이디어임
          + 채택될 경우, 미래의 구문 기능은 JSSugar로 가고, API 및 기능 기능만 JS0로 감
          + 호환 엔진은 JS0만 지원하면 됨
          + 그 부담은 JSSugar를 지원하기 위해 도구 구현자에게 전가될 것
               o 부작용으로 도구 구현자가 표준 프로세스에 더 많이 관여해야 하며 새로운 기술 그룹을 형성해야 할 수도 있음
     * 제안은 이미 논란의 여지가 있음
          + JavaScript 도구에 공식 지위를 부여하지 말 것을 요청하는 개발자들이 있고, 많은 JavaScript 개발자들은 이러한 도구에 덜 의존하고 싶어함
          + 보안, 성능, 안정성에 우선순위를 두는 것에 대해서는 광범위한 합의가 있지만, JavaScript를 중간 도구에 의존하게 만드는 개념은 인기가 없음
          + 개발자 한명은 ""RIP Vanilla JS""라고도 말함

GN⁺의 의견

     * 이 제안은 JavaScript 개발 생태계에 큰 변화를 가져올 수 있음. 개발자들이 새로운 문법 기능을 사용하기 위해 컴파일러에 더 의존해야 한다는 점에서 우려가 있음
     * 그러나 런타임 엔진의 복잡성을 줄이고 보안과 성능을 개선하려는 목표 자체는 긍정적임. 장기적으로는 JavaScript의 발전에 도움이 될 수 있음
     * 유사한 접근 방식을 취하는 다른 언어로는 Dart가 있음. Dart는 개발자 친화적인 문법을 제공하면서도 JavaScript로 컴파일되어 브라우저에서 실행됨
     * 이 제안을 채택할 때는 기존 코드와의 호환성, 개발자 경험, 도구 지원 등 다양한 요인을 신중히 고려해야 함. 또한 커뮤니티의 의견을 충분히 수렴하는 과정이 필요할 것임
     * JavaScript는 웹 개발의 기반이 되는 언어인 만큼, 앞으로도 활발한 논의와 발전이 이어질 것으로 예상됨

   레이어를 하나더 추가하고 그 레이어에 DX에 도움되는 내용들을 추가하겠다고 하는것 같네요.

     많은 JavaScript 개발자들은 이러한 도구에 덜 의존하고 싶어함
     JavaScript를 중간 도구에 의존하게 만드는 개념은 인기가 없음

   당장 JSX만 해도 트랜스파일이 필요하도록 생태계가 구축되었는데 현실성 없는 의견이라 생각합니다. NodeJS가 전부라고 생각하는 것 같아요

   정확히 이해한 건진 모르겠지만, C++에 BOOST라고 있는데, 그거 비슷한 느낌이네요. 구글의 제안이 어그리 되어서, JSSugar에 기존 라이브러리들을 통합한다면 뭐가 들어가게 될까요? 바벨?

        Hacker News 의견

     * Java의 Hotspot VM이 다른 언어들에 큰 성공을 가져왔음. JavaScript도 비슷한 방식으로 핵심 언어를 목표로 하고, 문법적 설탕을 사전 컴파일하는 것이 합리적임
          + JavaScript는 두 가지 언어로 나뉨: 인터넷의 어셈블리 언어로서의 JavaScript와 프론트엔드 웹 개발 언어로서의 JavaScript
          + 새로운 언어 기능은 기존 런타임에서 잘 지원되고 최적화된 부분으로 트랜스파일하는 것이 좋음. 트랜스파일링이 필요하지만, 이는 현대적인 빌드 도구를 사용하는 것과 같음
     * WebAssembly에 집중하는 것이 더 나음. JavaScript는 스크립팅에 사용하고, 다른 언어는 더 큰 애플리케이션에 사용해야 함
     * VanillaJS를 선호하는 사람으로서, 강제로 변경되는 언어 기능에 불만이 있음. API 개선에 집중하여 웹 앱이 네이티브 앱과 동등해지도록 해야 함
     * BigInt에 대한 사용 사례가 없다는 주장에 반대함. Google의 프론트엔드 개발자들이 사용하지 않더라도, 다른 JS 개발자들은 사용하고 있음. 언어 발전에 집중해야 함
     * JavaScript와 Wasm을 분리했어야 했음. 대신 Wasm을 웹 API 접근이 불가능한 2급 시민으로 만듦
     * 제안된 해결책은 근본적인 문제를 해결하지 못하고, 도구에 의존하게 만듦. JavaScript는 성능과 복잡성을 줄이기 위해 새로운 언어로 전환해야 함
     * TC39와 개발자 커뮤니티의 분리로 인해 문제가 발생함. TypeScript 도구는 표준화되지 않았고, Rust로 포팅할 계획도 없음
     * Google의 V8 엔진 유지 관리 문제로 인해 JavaScript 변경을 제안함. 보안 문제와 복잡성 비용이 사용자에게 영향을 미침. C++ 대신 다른 언어를 시도해야 함
"
"https://news.hada.io/topic?id=17561","트랜스포머 속 우주, 오아시스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            트랜스포머 속 우주, 오아시스

Oasis: Transformer 속의 우주

     * Oasis 소개
          + Oasis는 AI가 생성한 실시간 오픈 월드 비디오 게임임.
          + 사용자의 키보드 입력을 받아 물리, 게임 규칙, 그래픽을 실시간으로 생성함.
          + 게임 엔진 없이 기초 모델만으로 작동함.
          + Decart의 추론 엔진을 사용하여 실시간 비디오가 가능함을 보여줌.
     * 게임플레이 결과
          + Oasis는 복잡한 게임 메커니즘을 이해함.
          + 다양한 설정, 장소, 객체를 생성할 수 있는 능력을 가짐.
          + 게임 내에서 빌딩, 조명 물리, 인벤토리 관리 등을 수행할 수 있음.
     * 아키텍처
          + 모델은 공간 오토인코더와 잠재 확산 백본으로 구성됨.
          + Transformer 기반으로, ViT와 DiT를 기반으로 함.
          + 오토리그레시브 방식으로 프레임을 생성하여 실시간 상호작용 가능.
     * 성능
          + Oasis는 초당 20프레임의 실시간 출력을 생성함.
          + Decart의 추론 스택을 통해 플레이 가능한 프레임 속도를 달성함.
          + Etched의 Transformer ASIC, Sohu에 최적화되어 있음.
     * 미래 탐색
          + 모델의 확장과 데이터셋의 확장을 통해 해결할 수 있는 문제들이 있음.
          + 대규모 훈련을 효율적으로 수행하기 위한 추가 최적화 기술 개발 중.

GN⁺의 정리

     * Oasis는 AI가 생성한 실시간 오픈 월드 게임으로, Transformer 기반의 혁신적인 기술을 보여줌.
     * 실시간 상호작용을 가능하게 하는 빠른 추론 속도가 특징임.
     * Sohu와 같은 새로운 하드웨어와 결합하여 대규모 모델을 지원할 수 있는 가능성을 제시함.
     * 이 기술은 게임뿐만 아니라 다양한 소비자 제품에 응용될 수 있는 잠재력을 가짐.
     * 비슷한 기능을 가진 프로젝트로는 OpenAI의 Sora와 Genmo의 Mochi-1 등이 있음.
"
"https://news.hada.io/topic?id=17595","알론조 처치: 컴퓨터 인공지능의 설계자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         알론조 처치: 컴퓨터 인공지능의 설계자

    알론조 처치: 컴퓨터 지능의 잊혀진 설계자

     * 결정 문제의 해결책을 제시한 사람
          + 알론조 처치는 컴퓨터 과학과 인공지능의 발전에 큰 영향을 미친 인물로, 앨런 튜링의 작업에 결정적인 역할을 했음.
          + 튜링 테스트의 발전에 기여했으며, 그의 연구가 없었다면 오늘날의 인공지능 개념과 평가 방법은 크게 달라졌을 것임.
     * 처치의 초기 생애와 학문적 배경
          + 1903년 워싱턴 D.C.에서 태어난 처치는 조용하고 온화한 성격의 논리학자로, 수학과 컴퓨팅에 엄청난 영향을 미쳤음.
          + 프린스턴 대학에서 박사 학위를 받은 후 하버드와 해외에서 연구를 진행했으며, 프린스턴으로 돌아와 학문적 유산을 쌓았음.
     * λ-계산법과 처치-튜링 논제
          + 처치의 가장 중요한 공헌은 λ-계산법으로, 컴퓨터 과학의 기초를 마련했음.
          + 1936년 처치-튜링 논제를 제시하여, 효과적으로 계산 가능한 모든 함수는 튜링 기계로 계산 가능하다는 개념을 정립했음.
          + 이 논제는 알고리듬의 한계를 강조하며, 기계가 인간의 사고를 어느 정도까지 모방할 수 있는지를 탐구했음.
     * 결정 문제와 처치의 정리
          + 처치는 힐베르트가 제시한 결정 문제에 대해 부정적인 답을 제시하며, 모든 수학적 명제를 결정할 수 있는 알고리듬은 존재하지 않음을 증명했음.
          + 이는 결정 이론에 큰 영향을 미쳤으며, 계산의 한계를 강조했음.
     * 멘토로서의 처치
          + 처치는 스티븐 클리니, J. 바클리 로서, 앨런 튜링 등 많은 저명한 논리학자와 컴퓨터 과학자들의 멘토였음.
          + 프린스턴에서의 그의 수업은 학생들에게 큰 영향을 미쳤으며, 그의 교육 방식은 학생들에게 깊은 인상을 남겼음.
     * 처치의 유산과 영향
          + 처치는 튜링이나 폰 노이만, 괴델과 같은 명성을 얻지 못했지만, 그의 작업은 컴퓨터 과학의 이론적 기초를 형성했음.
          + 오늘날의 스마트폰에서 실행되는 프로그램들은 λ-계산법의 논리에 그 뿌리를 두고 있으며, 그의 작업은 현대 컴파일러와 인터프리터의 구조에 필수적임.
     * 알론조 처치를 알아야 하는 이유
          + 처치의 천재성은 보이지 않는 곳에 있으며, 그의 작업은 우리가 당연하게 여기는 디지털 상호작용의 이론적 기초를 형성했음.
          + 인공지능의 발전과 함께, 처치와 같은 기초적인 인물들을 더 많이 알고 기념하는 것이 중요함.

        Hacker News 의견

     * Paradigms of Artificial Intelligence Programming에서 람다의 기원에 대한 흥미로운 역사적 사실이 언급됨. 람다는 Alonzo Church의 함수 표기법에서 유래했으며, Lisp에서는 이 표기법을 채택했음
     * Church의 람다 계산법과 튜링 기계는 동일한 계산 능력을 가지지만, 튜링 기계는 가변 상태를 사용함. 이는 함수형 프로그래밍 언어와 명령형 프로그래밍 언어 간의 차이를 초래함
     * Church에 대한 흥미로운 이야기를 읽고 싶다면, Rota의 회고록을 추천함
     * Alonzo Church의 이름을 딴 Alonzo 프로그래밍 언어는 거의 잊혀졌음
     * 블로그 게시물에 AI로 생성된 삽화를 사용하는 것을 자제했으면 좋겠음. Church의 실제 사진이 공공 도메인에 존재하며, AI 삽화는 그와 닮지 않았음
     * 람다 계산법의 진정한 도전은 그 단순성을 이해하는 것임. 이는 모든 계산과 동등하다는 사실을 이해하는 데 도움을 주지 않음
     * 튜링은 AI와 관련하여 순수성과 최소한의 조건 및 추상화에 중점을 두었지만, Church는 우리가 실제로 생각할 수 있는 방법에 중점을 두었음
     * Church의 논리와 의미/참조에 대한 철학은 주로 잊혀졌으며, 그의 많은 논문이 위키피디아 등에서 논의되지 않음
     * ""미끼를 물지 마세요""라는 표현은 ""트롤에게 먹이를 주지 마세요""와 유사함. 제목에서 미끼를 제거했지만, 이미 많은 댓글이 이에 반응하고 있어 HN 스레드에 좋지 않음
"
"https://news.hada.io/topic?id=17469","Linux에서 Android_translation_layer를 사용하는 NewPipe","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Linux에서 Android_translation_layer를 사용하는 NewPipe

     * NewPipe 소개
          + NewPipe는 Android용 경량 YouTube 프론트엔드로, 개인 정보 보호를 중시하는 앱임.
          + Google 프레임워크 라이브러리나 YouTube API를 사용하지 않으며, 웹사이트를 파싱하여 필요한 정보를 얻음.
          + Google 서비스가 설치되지 않은 기기에서도 사용 가능하며, YouTube 계정이 필요하지 않음.
          + FLOSS(Free/Libre and Open Source Software)로 제공됨.
     * 지원 서비스
          + YouTube 및 YouTube Music
          + PeerTube 및 모든 인스턴스
          + Bandcamp
          + SoundCloud
     * 버전 0.27.2의 변경 사항
          + YouTube 비디오 중간에 발생하는 HTTP 403 오류를 수정한 핫픽스 릴리스임.
     * 커뮤니티 및 개발
          + 국제 커뮤니티에 의해 오픈 소스로 개발되며, GNU General Public License v3.0 이상으로 배포됨.
          + 커뮤니티 참여 가능.
     * 기타 정보
          + 설치 크기: 약 60.95 MiB
          + 다운로드 크기: 39.2 MiB
          + 지원 아키텍처: aarch64, x86_64

GN⁺의 정리

     * NewPipe는 Google 서비스 없이 YouTube를 사용할 수 있는 프론트엔드로, 개인 정보 보호를 중시하는 사용자에게 유용함.
     * FLOSS로 제공되어 누구나 소스 코드를 검토하고 기여할 수 있는 장점이 있음.
     * PeerTube, Bandcamp, SoundCloud 등 다양한 플랫폼을 지원하여 음악 및 비디오 콘텐츠를 폭넓게 즐길 수 있음.
     * 유사한 기능을 제공하는 앱으로는 YouTube Vanced가 있으며, 이 또한 Google 서비스 없이 YouTube를 사용할 수 있는 대안임.

        Hacker News 의견

     * Android Translation Layer는 Waydroid의 대안으로, WINE과 유사하게 binder 커널 모듈이 필요하지 않음
          + Flatpak을 사용하여 애플리케이션과 호환 레이어를 패키징하는 것이 좋은 아이디어임
          + 애플리케이션을 거의 네이티브처럼 사용할 수 있게 하고, 사용자 및 테스터를 쉽게 확보할 수 있음
          + 단일 앱에 집중하여 구현되지 않은 기능에 대한 기대를 관리할 수 있음
     * postmarketOS나 Alpine Linux에서 Android Translation Layer를 사용하여 Android 앱을 실행할 수 있음
          + ""sudo apk add android-translation-layer"" 명령어로 설치 가능
          + F-Droid, Spotify, Megalodon 앱을 시도했으나 여러 문제로 실패함
          + API 표면이 아직 많이 커버되지 않았음
     * Tubular 앱으로 NewPipe 앱을 대체할 수 있는지 궁금함
          + Tubular는 SponsorBlock과 ReturnYoutubeDislike 기능이 내장되어 있음
     * Android Translation Layer의 접근 방식이 anbox/waydroid의 접근 방식보다 얼마나 잘 작동하는지 궁금함
     * 데스크톱에서 NewPipe를 사용하는 이유가 궁금함
          + FreeTube라는 대안이 존재함
     * Minecraft Bedrock Launcher가 Android용 Minecraft 앱을 *nix로 포팅함
     * 이 라이브러리를 사용하여 AppImage 빌드를 보고 싶음
     * NewPipe를 오랫동안 사용해왔으며, 구독한 채널을 다양한 피드로 그룹화할 수 있는 기능이 좋음
     * Arch 리포지토리에서 FreeTube가 잘 작동함
"
"https://news.hada.io/topic?id=17550","HN 공개: 오디오 분석이 포함된 TikTok 인플루언서 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 공개: 오디오 분석이 포함된 TikTok 인플루언서 데이터베이스

     * 소개
          + topYappers는 TikTok의 영향력 있는 크리에이터와 연결할 수 있는 플랫폼으로, 검증된 연락처 정보, 참여 지표, 청중 데이터를 제공합니다.
          + 500개 이상의 기업이 이미 topYappers를 통해 성장하고 있으며, 크리에이터를 빠르게 발견하고 연결할 수 있는 장점을 제공합니다.
     * 주요 기능
          + 크리에이터 발견 속도: 틈새 시장과 하위 카테고리로 모든 크리에이터를 분류하여 몇 분 만에 완벽한 크리에이터를 찾을 수 있음.
          + 검증된 연락처 데이터: 가짜 프로필에 시간을 낭비하지 않고, 98%의 정확도로 직접 비즈니스 이메일과 검증된 소셜 프로필에 접근 가능.
          + ROI 성과: 일관되게 결과를 제공하는 크리에이터와 연결할 수 있으며, 참여율, 청중 품질, 틈새 시장 관련성을 기준으로 필터링 가능.
          + 콘텐츠 분석: AI가 모든 비디오를 분석하여 가장 관련성 있는 인플루언서를 매칭함.
     * 데이터베이스 및 분석
          + 489.1K명의 크리에이터 데이터베이스를 보유하고 있으며, 매일 업데이트됨.
          + AI가 웹을 탐색하여 잠재적인 크리에이터를 식별하고, 팀이 품질과 관련성을 보장함.
          + 크리에이터에 대한 귀중한 통찰력, 분석 및 연락처 정보를 추가하여 효과적인 아웃리치를 지원함.
     * 가격 및 접근성
          + 평생 접근 가능하며, 한 번의 결제로 450K 이상의 AI 분석 TikTok 인플루언서에 대한 무제한 검색 가능.
          + 검증된 연락처 정보와 함께 제공되며, 구독 없이 평생 접근 가능.

GN⁺의 정리

     * topYappers는 TikTok 크리에이터와의 연결을 통해 브랜드 성장을 지원하는 플랫폼임. 검증된 데이터와 AI 분석을 통해 신뢰할 수 있는 크리에이터를 빠르게 찾을 수 있는 것이 장점임.
     * 이 플랫폼은 특히 마케팅 및 광고 캠페인에서 ROI를 극대화하려는 기업에게 유용할 수 있음.
     * 유사한 기능을 제공하는 다른 플랫폼으로는 Influencity와 HypeAuditor 등이 있음.
"
"https://news.hada.io/topic?id=17491","삭제하기 쉬운 코드 작성, 확장하기 어려운 코드 (2016)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   삭제하기 쉬운 코드 작성, 확장하기 어려운 코드 (2016)

코드 삭제가 쉬운 코드 작성하기

     * 모든 코드 라인은 유지보수 비용을 수반함. 코드 재사용은 변경을 어렵게 만듦.
     * API 소비자가 많을수록 변경 시 재작성해야 할 코드가 많아짐.
     * 코드의 의존성을 관리하는 것은 대규모 시스템에서 중요한 문제임.

  0단계: 코드를 작성하지 않기

     * 코드 라인의 수는 그 자체로 많은 정보를 제공하지 않음.
     * 작성하지 않은 코드는 삭제하기 가장 쉬운 코드임.

  1단계: 코드 복사-붙여넣기

     * 재사용 가능한 코드는 나중에 예제를 통해 더 쉽게 작성할 수 있음.
     * 코드 복사-붙여넣기는 의존성을 피하고 유연성을 얻기 위한 방법임.

  2단계: 코드 복사-붙여넣기 하지 않기

     * 코드가 충분히 복사-붙여넣기 되었다면 함수로 추출할 때임.
     * util 디렉토리를 만들어 다양한 유틸리티를 다른 파일에 보관하는 것이 좋음.

  3단계: 더 많은 보일러플레이트 작성하기

     * 보일러플레이트는 코드 복사-붙여넣기와 유사하지만, 각기 다른 위치에서 코드를 변경함.
     * 보일러플레이트는 의존성을 줄이고 유연성을 제공함.

  4단계: 보일러플레이트 작성하지 않기

     * 보일러플레이트가 너무 많다면, 정책, 워크플로우, 상태에 대한 의견을 가진 라이브러리로 감싸야 함.
     * requests와 urllib3의 관계가 좋은 예시임.

  5단계: 큰 덩어리의 코드 작성하기

     * 비즈니스 로직은 끝없는 예외 케이스와 빠르고 더러운 해킹으로 특징지어짐.
     * 큰 실수를 삭제하는 것이 작은 실수를 여러 개 삭제하는 것보다 쉬움.

  6단계: 코드를 조각으로 나누기

     * 큰 덩어리의 코드는 유지보수 비용이 큼.
     * 코드의 책임을 분리하고, 변경 가능성을 고려하여 모듈을 설계해야 함.

  7단계: 계속해서 코드 작성하기

     * 새로운 아이디어를 실험할 수 있도록 기존 코드와 독립적으로 새로운 코드를 작성할 수 있어야 함.
     * 피처 플래그는 나중에 마음을 바꿀 수 있는 방법임.

GN⁺의 정리

     * 이 글은 코드 작성 시 삭제가 쉬운 코드를 만드는 방법에 대해 설명함.
     * 코드의 의존성을 줄이고, 유연성을 높이며, 유지보수 비용을 줄이는 것이 핵심임.
     * 비슷한 기능을 가진 프로젝트로는 requests와 urllib3가 있음.
     * 이 글은 소프트웨어 개발자에게 코드 관리와 유지보수의 중요성을 일깨워줌.

        Hacker News 의견

     * ""Simple is robust""라는 말이 마음에 듦. 시스템의 복잡성이 적을수록 변경이 용이함을 의미함. 미래를 위한 계획은 확장 가능한 코드보다는 직관적인 코드로 세워야 함. 예를 들어, 상황이 요구할 때만 추상화하고, 단순한 중복을 권장하며, 초기에는 모놀리스를 사용하고, 수평 확장보다는 수직 확장을 우선시함. 여러 0-1 시스템을 구축하면서 이러한 공통점을 발견함.
     * 테스트나 관찰 가능성에 대한 언급이 없다는 점이 놀라움. 테스트는 유지 비용이 들지만, 코드를 제거할 때 문제가 발생할 위험을 줄여줌. 외부 호출자에게 서비스를 노출할 때는 일부 호출을 폐기 예정으로 표시하고, 여전히 호출되는지 관찰하는 강력한 방법이 필요함. 최근에 GraphQL 리졸버를 반자동으로 제거했으며, 사용 빈도에 대한 메트릭을 통해 삭제할 수 없는 리졸버를 파악함. GraphQL에는 폐기 예정 주석이 있지만, 서비스에서는 특별히 처리하지 않았음. 관찰 가능성을 추가하여 폐기 예정 함수가 호출되었는지 플래그를 설정하고, 충분히 오랜 기간 동안 프로덕션에서 실행한 후 외부에 노출된 코드를 안전하게 삭제할 수 있음.
     * ""삭제를 위한 설계""를 홍보하게 됨. 과거에는 모든 상황을 계획하고 모든 필요를 충족시키는 작품을 만들 수 있다고 생각했지만, 미래의 필요를 예측하는 것은 어려움. 언젠가는 내가 만든 것이 누군가에게는 쓸모없는 것이 될 것이고, 그들이 그것을 철거하는 것이 정당화될 것임. 따라서 제거하기 쉽게 만드는 데 노력을 기울여야 함. 이는 종종 결합을 줄이는 결과를 가져오지만, 모든 것을 메타 구성 가능한 프레임워크로 분리하려는 젊은 개발자와는 다름. 때로는 논리적으로 이해하기 쉬운 경우 긴밀한 결합이 더 나음.
     * 코드를 삭제하기 쉽게 작성하려면 의존성을 피하기 위해 반복하고, 관리하기 위해 반복하지 말아야 함. 코드의 계층을 나누고, 간단하게 구현할 수 있지만 사용하기에는 불편한 부분으로 간단한 API를 구축해야 함. 코드를 분리하고, 작성하기 어려운 부분과 변경 가능성이 높은 부분을 나머지 코드와 서로 분리해야 함. 모든 선택을 하드코딩하지 말고, 런타임에 몇 가지를 변경할 수 있도록 해야 함. 개인적인 경험으로는 삭제하기 쉬운 코드는 계층화되고 모듈화되어 있어 확장하기도 쉬움.
     * 계산 물리학 학생들에게 가장 좋은 계산은 신경 쓸 필요가 없는 것이라고 말해옴.
     * 개인적으로 코드를 비즈니스 로직과 실제 구현으로 나눔. 비즈니스 로직은 그 특성상 중복될 수 있지만, 너무 많은 기술적 세부 사항이 중복되어서는 안 됨. 비즈니스 로직을 직접 처리하지 않고 애플리케이션 독립적으로 유지하는 한, 비즈니스 로직은 원하는 만큼 엉망일 수 있음. 문제가 발생하고 잘 되지 않는 경우, 전체 구현을 삭제할 수 있는 옵션이 있으며, 이를 수정하고 실제 사양을 구현에서 찾으려고 강요받지 않음.
     * 첫 번째 문단의 명백한 실수: 코드 재사용의 문제는 나중에 마음을 바꾸는 데 방해가 된다는 것임. 이는 일반적으로 잘못된 주장임. 마음을 바꾸고 코드가 열 곳에 복사되어 붙여넣기 되었다면, 열 곳을 변경해야 함. 반면, 코드가 함수에 있다면 한 번만 변경하면 됨. 열 번의 호출 중 하나가 변경되지 않아야 한다면, 여전히 복사하여 붙여넣기할 수 있으며, 함수를 더 일반적으로 만들 수도 있음. 길을 건널 때 주위를 살피지 않는 것처럼, 복사하여 붙여넣기는 거의 항상 나쁜 생각임.
     * 나쁜 코드는 제거하기 어렵기 때문에 오래 남아 있다는 훌륭한 상관관계가 있음.
     * 소프트웨어를 가능한 한 기본 상태로 사용하고, 커스터마이징을 깊게 하지 말라는 것인지 궁금함.
"
"https://news.hada.io/topic?id=17477","공중전화기 매입 및 퇴역","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             공중전화기 매입 및 퇴역

기존 사이트에서 고수익을 올릴 수 있는 공중전화 구매

     * 수익성 있는 수동 소득: 현대 사회에서 수동 소득을 창출하는 방법으로 공중전화와 같은 자동화된 판매 기계가 주목받고 있음. 특히 소셜 미디어 인플루언서들이 오래된 기계를 구매하여 사업으로 전환하는 사례가 증가하고 있음.
     * 공중전화의 역사: 과거 공중전화는 전화 회사에 의해 운영되었으며, 전화 교환 시스템에 의존하여 동작했음. 1968년 Carterfone 판결 이후 고객이 자신의 장치를 연결할 수 있게 되면서 새로운 형태의 공중전화가 등장하게 됨.
     * COCOT의 등장: 1970년 Robotguard가 일본산 공중전화를 도입하여 미국에 고객 소유 동전 공중전화(COCOT)를 소개함. 이는 공중전화 사업을 경쟁적으로 만들었음.
     * 공중전화 산업의 변화: 1984년 AT&T의 해체와 전자 기술의 발전으로 COCOT의 보급이 가속화됨. 이후 COCOT는 스마트 공중전화로 발전하여 원격 프로그래밍이 가능해졌고, 이는 수동 소득을 창출하는 방법으로 인식되기 시작함.
     * ETS Payphones의 사기: 1990년대 ETS Payphones는 투자자들에게 공중전화 운영을 통한 고정 수익을 약속하며 자금을 모았으나, 이는 폰지 사기였음. ETS는 2000년 SEC에 의해 기소되었고, 창립자인 Charles Edwards는 사기 혐의로 유죄 판결을 받음.
     * 인터넷 키오스크 사기: 2000년대 Pantheon Holdings는 인터넷 키오스크를 통해 유사한 사기를 벌였으며, 이는 주로 고령 투자자들을 대상으로 함.

GN⁺의 정리

     * 이 기사는 공중전화 산업의 역사와 그 안에서 발생한 사기 사건들을 다루고 있음. 공중전화가 어떻게 수동 소득의 수단으로 인식되었는지와 그로 인한 사기 사건들을 통해 투자자들이 주의해야 할 점을 강조함.
     * 공중전화와 같은 자동화된 기계가 수익을 창출할 수 있는 방법으로 주목받고 있지만, 그 이면에는 사기와 같은 위험이 존재할 수 있음을 경고함.
     * 유사한 기능을 가진 산업 내 다른 프로젝트로는 현대의 자판기 사업이나 인터넷 키오스크 사업이 있음.

        Hacker News 의견

     * ""수동 소득"" 개념은 매력적이지만, 모든 사람이 이를 가지게 되면 사회가 멈출 수 있음. 이는 윤리적 문제와 연결되며, 수동 소득은 일반적으로 좋지 않은 것으로 여겨지는 임대 수익과 유사함
     * 자동 판매기는 수동 소득의 한 예로, 최근 인플루언서들이 이를 사업으로 활용하고 있음. 그러나 과거에는 범죄 조직이 이를 통제했음
     * 수동 소득은 유혹적이지만, 사기꾼들에게도 매력적임. Warren Buffett는 이발소에 핀볼 기계를 설치하고 수익을 나누는 것이 최고의 사업이었다고 주장함
     * 수동 소득의 의미는 다양함. 자본 보존, 빠른 부의 축적, 그리고 거의 없는 상태에서 큰 부를 이루는 것 등이 있음. 이 개념들이 혼동될 수 있음
     * 과거에 공중전화를 훔친 경험을 이야기하며, 공중전화는 매우 견고했음
     * 런던의 I-Plus Kiosks는 세금 낭비로 여겨졌던 프로젝트였음
     * 1980년대 후반에 공중전화 해킹을 했던 경험을 공유하며, 특정 전화기에서 무료 통화를 할 수 있었음
     * 피라미드 사기와 유사한 구조의 수익 모델에 대해 경계해야 함
     * 위험 없이 높은 수익을 약속하는 제안은 의심해야 함. 대부분의 경우 숨겨진 문제가 있으며, 관리가 매우 필요하거나 특정 조건이 충족되어야만 경제성이 있음
     * 드롭쉬핑을 시도했으나 실패한 경험을 공유하며, 이는 스팸성 마케팅 게임에 가깝고 창의적이거나 지적 기술을 요구하지 않음. 돈과 일에 대한 애착을 먼저 파악해야 함. 실패를 통해 자신에 대한 환상을 깨고 더 나은 삶을 배우게 되었음
"
"https://news.hada.io/topic?id=17577","Nvidia GeForce GPU 보안 결함 발견, 최대한 빨리 드라이버 업데이트 하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Nvidia GeForce GPU 보안 결함 발견, 최대한 빨리 드라이버 업데이트 하세요

     * NVIDIA는 현재 모든 GeForce GPU 소유자에게 경고를 발송하고 있으며, 지금 최신 드라이버 업데이트를 다운로드해야 함
     * Nvidia의 보안 공지에 따르면, 자사의 디스플레이 드라이버 및 기타 소프트웨어에서 긴급한 주의가 필요한 여러 보안 취약점이 발견되었음
     * 총 8개의 취약점이 있으며, 모두 ""높음""의 심각도 등급
     * 보안 결함의 범위
          + Nvidia에 따르면, 공격자가 취약점을 악용하여 시스템 전체에 접근할 수 있는 가능성이 있음
          + 이러한 접근을 통해 해커는 PC에 악성 코드를 침투시키고 실행할 수 있으며, 개인 데이터를 읽고 훔칠 수 있음
          + GeForce 소프트웨어, Nvidia RTX, Quadro, NVS, Tesla가 Windows와 Linux 모두에서 영향을 받음
          + Nvidia는 이러한 취약점이 실제로 악용되고 있는지 명확히 밝히지 않았으나, 모든 GeForce 그래픽 카드가 영향을 받기 때문에 광범위한 문제일 가능성이 있음
     * GeForce 사용자들을 위한 긴급 조치
          + 보안 취약점을 해결하려면 Windows용 Nvidia GeForce 드라이버 버전 566.03과 Linux용 버전 565.57.01, 550.127.05, 535.216.01이 필요함
          + 일부 배포자는 보안 업데이트를 버전 565.92, 561.03, 556.35, 553.05로 제공함
          + Nvidia RTX, Quadro, NVS의 경우, 보안 문제를 해결하기 위해 버전 566.03, 553.24, 538.95로 업데이트해야 함
          + Nvidia의 수동 드라이버 검색 도구를 사용하여 적절한 업데이트를 검색하고 직접 다운로드할 수 있음
          + 최신 드라이버는 Nvidia App과 GeForce Experience 앱에서도 제공됨

        Hacker News 의견

     * NVIDIA GPU Display Driver의 취약점은 권한 상승을 유발할 수 있는 문제임
          + ""권한 있는 공격자""란 Linux에서 이미 root 권한을 가진 사용자를 의미할 수 있음
          + 이 취약점은 이미 실행 중인 코드에서만 악용 가능함
          + 단일 사용자 시스템에서는 큰 문제가 되지 않음
     * 업데이트가 필요한 사용자:
          + 신뢰할 수 없는 사용자가 있는 다중 사용자 시스템
          + 이미 악성코드가 있는 시스템 사용자
          + 신뢰할 수 없는 게스트를 호스팅하는 가상화 호스트
     * 이 문제는 물리적 GPU가 아닌 드라이버의 문제임
     * NVIDIA 드라이버 웹사이트에서는 여전히 취약한 565.90 버전을 ""안정 버전""으로 제공 중임
          + 게이머 버전만 566.03으로 업데이트됨
     * Debian에서는 아직 업데이트가 제공되지 않음
          + 이 취약점은 Bookworm에서 ""낮은 우선순위""로 표시됨
     * NVIDIA의 보안 페이지에서 관련 정보를 확인할 수 있음
     * dkms 설치 프로그램에 대한 불신과 불만이 증가함
     * GeForce Experience는 계정 로그인을 요구하며, 로그인을 유지하지 못하는 문제가 있음
          + 그래픽 카드에 많은 비용을 지불하고도 이런 경험을 해야 한다는 점에 불만이 있음
     * 대부분의 문제는 메모리 손상과 관련이 있으며, 이는 C와 C++ 코드에서 발생할 수 있음
     * GPU 단일화의 단점이 드러남
"
"https://news.hada.io/topic?id=17513","고전 3D 비디오게임 그림자 기법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           고전 3D 비디오게임 그림자 기법

클래식 3D 비디오 게임 그림자 기법

     * 영화 속 그림자 이야기
          + 영화 ""Perfect Days""에서 등장인물들이 그림자에 대해 대화하는 장면이 있음.
          + 실제로 그림자가 겹쳐도 더 어두워지지 않음. 이는 빛의 부재로 인해 그림자가 생기기 때문임.
     * 2D 화면의 그림자
          + 캐릭터를 그리기 전에 그림자 이미지를 화면에 그릴 수 있음.
          + ""Winter Gold""와 ""MDK"" 같은 게임에서 애니메이션된 2D 그림자 이미지를 사용함.
     * 블롭 그림자
          + 3D에서 캐릭터 아래에 어두운 원을 그리는 방식.
          + ""Super Mario 64""에서는 하드웨어 기능을 사용하여 그림자를 지면에만 나타나도록 함.
     * 렌더 텍스처를 사용한 평면 그림자
          + 캐릭터를 위에서 렌더링하여 그림자 텍스처로 사용함.
          + ""Crash Bandicoot: Warped""에서는 이 방법을 사용하여 그림자를 생성함.
     * 기하학을 사용한 평면 그림자
          + 그림자 캐스터를 평면에 투영하여 그림자를 생성함.
          + ""F-19 Stealth Fighter""와 같은 초기 비행 시뮬레이터에서 사용됨.
     * 지형 위의 그림자
          + ""Virus""와 ""Interstate '76"" 같은 게임에서 지형에 그림자를 투영함.
          + 지형의 경사에 맞춰 그림자를 기울이고 늘리는 방식 사용.
     * 투영된 텍스처 드롭 그림자
          + 그림자 텍스처를 다른 객체에 투영하여 그림자를 생성함.
          + ""The Elder Scrolls IV: Oblivion""에서 나무 그림자를 아름답게 투영함.
     * 그림자 맵
          + 빛의 관점에서 깊이 이미지를 그려 그림자 맵을 생성함.
          + ""Half-Life 2""에서 캐릭터에 그림자 맵을 사용함.
     * 스텐실 그림자
          + 모든 표면에 날카로운 그림자를 그리는 방식.
          + ""Doom 3""에서 사용된 방식으로, 그림자 볼륨을 사용하여 그림자를 생성함.
     * 소프트 스텐실 그림자
          + ""Silent Hill 2""에서 스텐실 그림자를 흐리게 처리하여 부드러운 그림자를 만듦.
     * 단순화된 캐릭터 그림자
          + 화면에 보이는 것보다 간단한 모델로 그림자를 생성함.
          + ""The Legend of Zelda: Ocarina of Time""에서 링크의 발 그림자 사용.
     * 정적 레벨 조명에서의 그림자
          + 버텍스 컬러와 라이트맵을 사용하여 게임 레벨의 조명과 그림자를 캡처함.
          + ""Ico""와 ""Tony Hawk Pro Skater 2"" 같은 게임에서 사용됨.
     * 현대 게임에서의 그림자
          + 전통적인 기법을 적절히 사용함.
          + ""The Last of Us""에서는 단순화된 캐릭터 모델 아이디어를 사용하여 부드러운 그림자를 생성함.
     * 레이 트레이싱 그림자
          + 물리적으로 정확한 조명을 시뮬레이션하여 그림자를 생성함.
          + ""Alan Wake 2""에서는 각 픽셀이 무작위로 선택된 빛에서만 조명을 받음.
     * 그림자가 없는 경우
          + ""Alone in the Dark"" 같은 게임에서는 캐릭터 그림자가 없음.

GN⁺의 정리

     * 이 글은 비디오 게임에서 그림자를 생성하는 다양한 기법을 설명함.
     * 그림자는 게임의 시각적 품질과 성능에 큰 영향을 미침.
     * 현대 게임에서는 전통적인 기법과 새로운 기술을 결합하여 보다 현실적인 그림자를 구현함.
     * 레이 트레이싱은 물리적으로 정확한 그림자를 제공하지만, 성능상의 제약이 있음.
     * 비슷한 기능을 가진 프로젝트로는 Unreal Engine의 그림자 시스템이 추천됨.

        Hacker News 의견

     * 야외 그림자가 파란색인 이유는 하늘에서 반사된 빛 때문임
          + 자동차 아래를 보면 하늘이 보이는 곳은 파란 그림자, 차체가 빛을 가리는 곳은 검은 그림자임
          + 날카로운 파란 그림자와 부드러운 검은 그림자를 결합하면 아름다운 그림자를 만들 수 있음
     * 2001년 게임 Severance: Blade of Darkness는 스텐실 그림자를 사용한 초기 게임 중 하나임
          + PowerVR PCX1의 Revolte는 1996년에 스텐실 그림자를 사용했음
          + PowerVR PCX1은 그림자 볼륨을 효율적으로 구현했으며, Dreamcast는 더 유연한 구현을 가졌음
     * 현대 Nintendo 플랫폼 게임에서는 그림자 맵을 사용하며, 플레이어 캐릭터의 그림자는 항상 아래로 드리워지도록 설정됨
          + 어두운 환경에서는 그림자가 더 밝게 설정되어 가시성을 유지함
     * Valorant는 플레이어가 그림자를 드리우지 않아 그래픽이 좋지 않다고 생각했음
          + 이는 다른 플레이어 모델 위치가 클라이언트에 전송되지 않아 그림자가 나타났다 사라지는 문제 때문임
     * N64 Zelda의 그림자가 인상적이었으며, 레이트레이싱 기술이 채택되면서 영역 조명과 부드러운 그림자가 표준이 될 것으로 기대됨
          + Quake 2 RTX를 통해 미래의 그래픽을 미리 볼 수 있음
     * GTA IV에서 차량의 헤드라이트가 경찰의 그림자를 벽에 드리우는 순간이 인상적이었음
     * 여러 광원이 있을 때 그림자가 겹치면 더 어두워짐
          + 2개의 램프가 3명을 비출 때 6개의 그림자가 생기며, 겹치는 부분은 더 어두워짐
     * PS1 게임 Power Shovel의 그림자는 불규칙한 지형에 투영되어 흥미로웠음
     * 읽기 흥미로웠으며, 더 기술적일 수 있었음
          + RP2040과 작은 화면을 대상으로 조명 실험 중이며, 계산과 메모리 소모가 큼
     * 흥미로워 보여 클릭했으며, 소개에 좋아하는 영화가 나와 놀랐음
          + 거의 모든 언급된 게임을 플레이했음
"
"https://news.hada.io/topic?id=17492","왜 Matt Levine들이 이렇게 적을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        왜 Matt Levine들이 이렇게 적을까?

     * Matt Levine의 독특한 위치
          + Matt Levine은 금융 산업에서 가장 유명한 뉴스레터 작가로, 그의 뉴스레터 ""Money Stuff""는 많은 독자들에게 인기를 끌고 있음
          + 그의 글은 금융 및 법률 분야의 복잡한 주제를 유머와 함께 쉽게 설명하여 독자들이 이해하기 쉽게 함
          + 그의 뉴스레터는 Bloomberg News의 일부로, 많은 독자들이 Bloomberg를 방문하는 이유가 됨
     * Matt Levine의 성공 비결
          + 명확한 사례 제공: 금융 및 법률 분야는 명확한 결과를 제공하는 많은 사례를 가지고 있어 독자들이 쉽게 이해할 수 있음
          + 기본 원리 설명: Levine은 경제학의 기본 원리를 반복적으로 설명하여 독자들이 깊이 있는 이해를 할 수 있도록 도움
          + 빠른 회전율과 반복 학습: 뉴스레터의 특성상 주제를 반복적으로 다루며 독자들이 자연스럽게 학습할 수 있도록 함
     * 다른 분야에서의 Matt Levine의 부재
          + 많은 분야는 금융과 같은 명확한 결과를 제공하지 않거나, 결과가 나오기까지 오랜 시간이 걸림
          + 예를 들어, 약물 개발은 실패의 이유가 불명확하고, 결과가 나오기까지 수십 년이 걸릴 수 있음
          + 이러한 이유로 다른 분야에서 Matt Levine과 같은 인물을 찾기 어려움
     * Matt Levine와 같은 작가의 필요성
          + 특정 분야에 대한 깊이 있는 이해와 반복적인 설명을 제공할 수 있는 작가가 필요함
          + 그러나 이러한 작가는 드물며, 그들이 활동할 수 있는 분야도 제한적임

GN⁺의 정리

     * Matt Levine은 금융 분야에서 복잡한 주제를 쉽게 설명하며 많은 독자들에게 경제학적 이해를 제공함
     * 그의 성공은 명확한 사례, 기본 원리 설명, 반복 학습을 통한 독자 교육에 기반함
     * 다른 분야에서도 이러한 작가가 필요하지만, 분야의 특성과 작가의 희소성으로 인해 실현되기 어려움
     * 경제학이나 금융에 관심 있는 사람들에게 유익한 자료이며, 비슷한 기능을 하는 다른 뉴스레터로는 Derek Lowe의 블로그가 있음

        Hacker News 의견

     * Derek Guy는 남성복 분야에서 Matt Levine과 같은 역할을 하는 인물로, 옷에 대한 깊은 이해와 문화적 언어로서의 의복에 대한 견해를 공유함. 그는 개인적인 유명세보다는 옷 자체에 집중하며, 유료 콘텐츠를 거부하고 좋은 재단과 역사에 대해 이야기함
     * Derek Lowe는 화학과 약물 개발 분야에서 Matt Levine과 같은 역할을 하며, 그의 ""Things I Won't Work With"" 시리즈는 유명함
     * Ann Lipton은 비즈니스 법률 분야에서 Matt Levine과 같은 역할을 함
     * 추천된 뉴스레터 목록에는 다양한 분야의 전문가들이 포함되어 있으며, 각 분야에 대한 깊은 이해와 흥미로운 콘텐츠를 제공함
     * Matt Levine은 금융 분야에서 유머와 전문성을 결합한 드문 재능을 가진 인물로, 그의 글은 기술적이면서도 재미있음
     * 금융 블로그는 많은 사람들이 돈을 벌기 위한 정보로 읽지만, 다른 추상적인 주제는 지적 만족을 제공함
     * Bret Devereaux는 고대 그리스와 로마 역사에 대해 글을 쓰며, 그의 블로그는 새로운 이론과 책을 계속해서 평가함
     * Admiral Cloudberg는 항공 재난과 안전에 대한 정보를 제공하며, Patrick McKenzie는 금융 분야에서 신뢰할 수 있는 정보를 제공함
     * 많은 훌륭한 교사와 작가들이 있지만, 그들의 영향력은 제한적일 수 있음
     * Matt Levine은 높은 연봉의 직업을 포기하고 글쓰기를 선택한 경제적 이유로 독특한 인물이며, 그의 유머 감각과 글쓰기 재능은 뛰어남
     * 충분히 좋은 작가는 어떤 분야에서도 재미있게 글을 쓸 수 있으며, 그 분야에 대한 깊은 이해가 필요함
"
"https://news.hada.io/topic?id=17490","8K TV를 모니터로 사용하기를 모니터로 사용하기

8K 모니터로 사용하는 것의 장점들

     * 프로그래밍, 워드 프로세싱 등:
          + 여러 개의 4K 모니터보다 해상도와 활용성 측면에서 뛰어남
          + 베젤이 없어서 창 배치에 방해 받지 않음
          + 타일링 윈도우 매니저와 잘 작동함
          + 텍스트 렌더링 품질이 매우 우수함
     * 사진, 비디오 편집:
          + 큰 화면에서 선명한 해상도로 사진을 볼 수 있음
          + 도구 모음을 상대적으로 작게 만들 수 있어 작업 공간이 넓어짐
          + D65-P3 색영역을 지원하여 전문가용 모니터에 준하는 색 재현력을 가짐
     * CAD 작업:
          + 세밀한 디테일을 볼 수 있어 와이어프레임 렌더링에 적합함
          + 뷰포트를 최대화해도 화면이 커서 작업하기 편리함
     * 게이밍과 미디어:
          + 4K 120Hz로 실행 가능하여 대형 화면 게이밍에 적합함
          + 1440p를 정수배로 지원하여 스케일링 아티팩트가 없음
     * 가격 대비 성능이 우수함
          + 4개의 32인치 4K 모니터 가격과 비슷한 수준
     * 연결성이 좋음
          + HDMI 2.1로 8K 60Hz를 지원함

단점과 주의사항들

     * 책상과 거치대:
          + 전체 화면 콘텐츠를 보려면 더 멀리 떨어져 앉아야 해서 큰 책상이 필요함
     * 화질 이슈들:
          + 균일도가 완벽하지 않아 더티 스크린 효과가 있을 수 있음
          + 일부 모델은 체커보드 효과가 1px 수준에서 보일 수 있음 (VRR로 해결 가능)
     * 소프트웨어 이슈들:
          + 엔비디아 리눅스 드라이버는 535 이상 버전 필요
          + AMD 리눅스는 ​​DisplayPort 어댑터 없이는 8K 60Hz 안됨
          + Input Signal Plus 설정 필요
          + 절전 모드 해제시 버그 있음
          + DisplayPort 장치가 있으면 부팅시 인식 안될 수 있음
     * 디스플레이 타입:
          + 현재 IPS나 VA 패널이 주류임
          + OLED는 번인 우려 있고 가격 높음
     * 코팅:
          + 광택 코팅이 주로 사용되어 반사가 있을 수 있음

예시 기기들

     * 삼성 Q900, Q800T, Q900TS, Q950TS, QN700B, QN800A/B/C/D, QN900A/B/C/D 시리즈
     * LG Nanocell 97, 99 시리즈
     * 소니 Z8H, Z9G 시리즈
     * TCL Class 6 시리즈 8K

FAQ

     * 너무 크지 않나요?
          + 32인치 모니터 2개 너비와 픽셀 밀도가 비슷합니다.
     * 8K 영화는 없잖아요?
          + 4K 120Hz 모드로 영화 봅니다. 24fps, 30fps에 딱 맞아요.
     * GPU가 8K 게임을 돌릴 수 있나요?
          + 4K 120Hz로 게임 합니다. 일부 게임은 8K 60Hz가 도움 되겠네요.
     * 프로젝터는 어때요?
          + 저렴한 8K 프로젝터는 없고, 텍스트 표시에 적합한 픽셀 밀도가 부족해요.
     * 애플 비전 프로는요?
          + 아직 스프레드시트 보기에 픽셀 밀도가 충분하지 않습니다.

GN⁺의 의견

     * 8K TV를 모니터로 사용하는 것은 매우 흥미로운 아이디어임
          + 멀티 모니터 셋업의 단점을 해소하면서 우수한 해상도와 활용성 제공
          + 전문가용 모니터에 준하는 화질과 기능을 합리적 가격에 제공
     * 단, 일부 기술적 제약과 버그가 있을 수 있으므로 주의 필요함
          + 그래픽 카드 드라이버 호환성 확인 필수
          + 화질 균일도나 반사 등의 이슈 고려 필요
          + 너무 가까이 보면 목이 아플 수 있으므로 적절한 거리 유지해야 함
     * 높은 해상도와 넓은 작업 공간의 장점이 단점을 상쇄한다고 봄
          + 프로그래밍이나 사진/비디오 편집 등의 작업 능률을 크게 높일 수 있음
          + 멀티태스킹에 최적화된 환경 제공
     * 향후 OLED나 마이크로 LED 등 차세대 디스플레이 기술이 8K로 대중화되면 더욱 매력적인 선택지가 될 것으로 전망됨
          + 번인 문제가 해소되고 HDR 성능이 대폭 향상될 것으로 기대됨
     * 전문가용 모니터를 완전히 대체하긴 어려울 것 같지만, 합리적인 비용으로 고성능 워크스테이션을 구축하고자 하는 사용자들에게 훌륭한 옵션이 될 것으로 보임

   삼성 55QN700B, LG 55NANO95이라는 55인치 8K TV를 작업용으로 쓰고있습니다.
     * 인풋 레이턴시 생각하면 삼성/LG말고는 대안이없습니다.
     * 시력 2.0 으로 태어나길 잘했다고 생각듭니다. 여기 적응하면 이제 뒤로 진짜 못갑니다.
     * 55인치가 가장 쓰기 편하..기보다는 그나마 가장 작은 사이즈인데 문제는 국내에서 판매한적도 없고 미국/일본/영국에서 잠깐 팔았습니다. 문제는 더이상 55인치 8k 패널이 안나와서 못구합니다.
     * 삼성은 BGR패턴이라 회색 1px 가로줄 을 보면 좀 울퉁불퉁합니다. 근데 PCB캐드/코딩 작업에서는 신경안쓰입니다.
     * LG는 Nano IPS모델들은 빛반사 너무심합니다. BGR패턴 이슈는 없지만 그거 제외하면 삼성쪽이 훨씬 쓰기가 좋은것같습니다.
     * 24MP~32MP 풀프레임 카메라를 가지고 계시다면 48MP이상 풀프로 가고싶어집니다.
     * 문제는 이제 회사에서 55인치~65인치 모니터를 쓰게해주냐가 관건입니다.

   LG 48인치 oled 4k 120hz 모니터로 4년 정도 사용하고 있는데 굉장히 만족하면서 쓰고 있습니다. 간혹 게임도 한판하고...아직 번인문제는 없습니다.
   책상앞에 높이 맞는 책장한개 더 두고 거리확보해서 사용하니 익숙해지더라구요. 다만 oled는 확실히 밝은 환경에서는 굳이? 였습니다. 저녁에 간접조명켜두고하면 집중 잘 되고 좋았습니다.

   저도 40인치 5120x2160 해상도로 쓰면서 멀티 모니터를 버렸습니다. 이제는 그냥 한개가 편해요.
   8K 티비도 괜찮을꺼 같기는 한데 너무 클거 같아서 좀 부담이긴 하네요.

   LG 75인치 저가 4k TV를 모니터로 몇달 써봤습니다.
   장점은 화면이 충분히 크다는 것이고
   단점은 위치 이동이 어렵다는 것, 입력에 대해 반응이 약간 느리다는 것이었습니다.

   듀얼 모니터를 몇 달 써보고 고개를 돌리고 있는 행위가 목에 부담이 돼서 큰 모니터 하나를 선호합니다.
   현재는 필립스, 델 등의 43인치 모니터를 씁니다.

   일반적인 모니터 거리보다 더 멀리 두고 쓰시나요? 예전에 책상 위에 43인치 TV를 놓고 작업한 적이 있었는데 시야 내 정보량이 적어서 고개를 돌려야 했고 세로도 너무 길어서 화면 아래쪽 텍스트를 읽기 어려웠습니다

   예 같은 거리에서 쓰면 힘들어요. 집에서 쓰는 모니터는 전시장이나 회사 회의실 같은 데에서 볼 수 있는 티비 스탠드를 사서 거기에 걸어두고 씁니다.

   그렇군요 TV랑 모니터를 따로 쓸 필요는 없지만 서재같이 책상 앞에 공간이 있어야 배치가 가능할 거 같아 보입니다. 공유해 주셔서 감사합니다

   32인치 5K 모니터가 나왔으면 좋겠는데 시장에 그런 제품이 없어서 모니터 살 때 고민이 됩니다. 맥에 붙일 모니터라 픽셀밀도가 정확히 두 배였으면 좋겠고 가로픽셀 1280이 필요한데 그런 제품이 없어요

        Hacker News 의견

     * 8K 디스플레이를 구매한 이유 중 하나는 라이다 포인트 클라우드를 보기 위함임. 예를 들어, 데스크탑 배경화면은 샌프란시스코의 Bernal Hill의 라이다 지도임.
          + 처음 구매했을 때는 많은 문제가 있을 줄 몰랐음. 제조사들이 2021년에도 ""8K Ready""라고 광고했기 때문임.
          + 문제를 점차 해결하면서 블로그에 여정을 기록하게 되었음.
          + 이전에 게시했지만 스팸 필터에 걸려 사라졌음. 다시 게시해준 ingve에게 감사함.
     * 모니터의 베젤과 간격은 주의를 분산시킬 수 있음. 하지만 정보 밀도를 분산하고 집중할 수 있게 해주는 기능으로 여김.
          + 예를 들어, 한 화면에는 에디터, 두 번째 화면에는 브라우저, 노트북 화면에는 채팅 앱이나 터미널 등을 배치함.
     * 2020년 9월부터 4K LG CX48 OLED를 사용 중이며 최고의 모니터 선택이었음.
          + 게임용 장비와 Macbook에 각각 HDMI 케이블을 연결하여 사용함.
          + 번인이나 데드 픽셀 문제는 없었음. 번인 방지 설정을 모두 활성화하고, 모니터를 1분 동안 비활성화 상태로 두는 등의 조치를 취함.
          + 모니터를 벽에 장착하여 책상 높이보다 약간 위에 배치함으로써 화면 중심이 눈높이에 맞도록 함.
     * 15년간의 책상 업무 후, 앉는 자세에 더 민감해졌음. 추가 화면이 있는 것보다 단일 크기의 화면이 바로 앞에 있는 것이 더 나음.
          + 동시에 가상 데스크탑을 사용하여 키보드와 마우스로 전환할 수 있음.
     * 43인치 4K TV를 사용하여 멀티 모니터 설정을 대체했으나 목과 눈의 피로가 심했음.
          + 밝기를 조절하기 어려웠고, 소프트웨어로 블루라이트를 줄이는 것도 큰 도움이 되지 않았음.
          + 이후 32인치 4K 커브드 디스플레이로 전환하여 만족함. 커브가 주변 시야를 더 유용하게 만들어 줌.
          + 디스플레이에 여러 입력을 분리하여 표시하는 기능이 있음.
          + 스포츠 시청이나 비디오 캐스트 기능은 다른 장치로 대체 가능함.
     * 최근 Samsung Odyssey G9 49인치 커브드 모니터로 업그레이드함.
          + 이전에는 27인치 모니터 2대를 사용했음.
          + 커브가 넓은 화면을 다루는 데 필수적이라고 생각함. 화면 가장자리를 쉽게 볼 수 있도록 모니터를 뒤로 배치해야 함.
          + 베젤이 없는 것이 좋음. 웹 브라우저나 에디터를 나란히 열어두기에 적합함.
     * 65인치 8K 디스플레이는 26인치 거리에서 레티나 해상도를 가짐. 27인치 4K 화면은 21인치 거리에서 레티나 해상도를 가짐.
     * 블로그 게시물을 좋아함.
          + ""여러 문제에도 불구하고 베젤이 없어서 효율성이 높아짐""이라는 내용이 인상적임.
     * 65인치 LG GX OLED를 업무와 게임에 사용 중임.
          + 4개의 모니터를 사용하던 이전 설정보다 인체공학적으로 더 나음.
          + 화면 중앙 하단에 초점을 맞추기 위해 창 관리 도구를 사용함.
          + 게임 시에는 창 모드를 사용하여 화면 전체 너비를 활용함.
          + 모든 것을 다크 모드로 실행하여 눈의 피로를 줄임.
     * 가장 큰 문제는 인체공학임.
          + 모니터의 적절한 높이는 화면 상단 3분의 1이 눈높이와 같거나 약간 아래에 있어야 함.
          + 큰 TV의 경우 화면 상단이 너무 높아져 장기적으로 불편함을 초래할 수 있음.
"
"https://news.hada.io/topic?id=17598","뉴욕타임스 테크 길드 파업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             뉴욕타임스 테크 길드 파업

     * 뉴욕 타임즈 Tech Guild는 월요일 오전 12시 1분에 파업에 돌입, 이번 주 선거 결과 보도에 차질을 줄 수 있음
     * Tech Guild는 노조와 타임즈 경영진 간의 격렬한 협상 끝에 계약 합의에 이르지 못하자 부당 노동행위 파업을 선언
     * 타임즈 선임 소프트웨어 엔지니어이자 Tech Guild 회원인 Kait Hoehne는 협상이 계속되는 가운데 파업을 피하려 했지만, 경영진이 핵심 쟁점에서 양보하지 않아 기술 직원들은 다른 선택의 여지가 없다고 느꼈다고 말함
     * Times 대변인 Danielle Rhoades Ha는 노조의 단체행동권을 존중하지만 이 시점에 파업하는 것은 불필요하며 신문사의 사명에 어긋난다고 말함
     * Tech Guild는 약 600명의 소프트웨어 엔지니어, 제품 매니저, 데이터 분석가, 디자이너로 구성되어 있으며, 이들의 업무는 라이브 블로그, 모바일 푸시 알림, 타임즈의 유명한 선거 지표 등 신문사의 디지털 서비스를 뒷받침함
     * Hoehne는 선거 기간에 트래픽이 증가하면 시스템에 부담이 가해지며, 경험 있는 엔지니어가 없으면 트래픽 증가로 인한 인프라 문제에 팀이 큰 영향을 받을 수 있다고 말함
     * 타임즈는 뉴스 조직에 독자들에게 서비스를 제공하기 위한 강력한 계획이 마련되어 있다고 말했지만, 구체적인 계획은 밝히지 않음
     * 뉴스룸의 기자들은 Tech Guild 없이는 업무를 수행할 수 없다며 우려를 표명함

GN⁺의 의견

     * 이번 파업은 언론사 내 기술 직군의 중요성과 영향력을 보여주는 사례임. 디지털 시대에 언론사의 기술 인프라와 서비스를 유지하는 데 있어 이들의 역할이 매우 크기 때문
     * 노사 간 협상에서 직원 해고 시 정당한 사유와 적법한 절차를 보장하는 조항은 노동조합이 가장 중요하게 여기는 사안 중 하나임. 경영진이 이를 거부하는 것은 노사 간 신뢰를 훼손할 수 있음
     * 이번 사태는 언론사 경영진이 콘텐츠 생산 인력뿐 아니라 이를 뒷받침하는 기술 인력의 가치와 기여도를 제대로 인정하고 대우해야 한다는 교훈을 줌
     * 유사한 사례로 2021년 뉴욕타임스 Wirecutter 부서의 파업이 있었는데, 당시에도 임금 인상과 정리해고 유예 등을 요구하며 파업에 돌입했음
     * 언론사가 디지털 전환을 가속화하면서 개발자, 데이터 분석가 등 기술 인력의 중요성은 더욱 커질 것으로 보임. 이들의 처우 개선과 근로조건에 대한 논의가 활발해질 필요가 있음

        Hacker News 의견

     * 뉴욕타임스의 파업은 여러 문제로 인해 발생했으며, 계약에 대한 합의가 이루어지지 않은 상태임
          + '정당한 이유' 조항, 임금 인상 및 임금 형평성, 사무실 복귀 정책 등이 주요 쟁점임
          + 선거 주간에 파업을 하는 것은 논란이 될 수 있으며, 계약 없이 주목을 끌려는 시도로 보일 수 있음
     * Perplexity CEO는 파업 중인 뉴욕타임스 직원들을 AI로 대체할 것을 제안함
     * 뉴욕타임스 경영진은 연 2.5% 임금 인상, 승진 시 최소 5% 임금 인상, $1,000의 비준 보너스를 제안함
          + 현재의 사무실 근무 요구 사항을 2025년 6월까지 유지하며, 연간 3주 동안 완전 원격 근무를 허용할 것임
     * 뉴욕타임스 테크 길드의 파업은 The Verge에서도 다루어짐
     * 대형 기술 회사의 개발자들이 노조를 결성하려고 시도한 적이 있는지에 대한 질문이 제기됨
     * 뉴욕타임스의 기술 조직에서 시니어 소프트웨어 개발자 채용 공고가 있으며, 연봉은 140-155k USD임
          + 뉴욕시 지역의 소프트웨어 엔지니어의 중간 총 보상은 185k USD임
          + 뉴욕타임스의 총 보상은 보고된 급여를 기준으로 약간 높은 수준임
"
"https://news.hada.io/topic?id=17522","생성형 AI의 불편한 골짜기에 대한 고찰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         생성형 AI의 불편한 골짜기에 대한 고찰

     * 생성형 AI는 다른 기술과 달리 놀라움을 줄 수 있는 힘이 있음
          + 때로는 좋은 것이지만, 때로는 그렇지 않을 수도 있음
          + 이런 기술 경험의 중심에는 기대하는 질문들이 있음
               o ""정말 내가 기대한 것인가? 출력물이 충분히 좋은가? 아니면 나를 속이고 있는 것인가?""
     * 이론적으로는 생성형 AI가 발전하면서 이 문제가 덜 중요해져야 하지만, 현실에서는 더 '인간적'이 되면서 불길하고 불편해질 수 있음
          + 이는 로봇공학에서 오랫동안 ""불편한 골짜기(uncanny valley)""라고 묘사해온 상황에 빠지게 됨
     * 더 큰 데이터 세트나 더 나은 학습으로 보정할 수 있다며 간과하고 싶을 수 있지만, 기술에 대한 우리의 멘탈 모델의 혼란을 이야기 하는 한 이것은 ""인정하고 해결해야 할 문제""임

멘탈 모델과 안티패턴

     * 멘탈 모델은 UX와 제품 디자인에서 중요한 개념이지만, AI 커뮤니티에서도 좀 더 적극적으로 수용되어야 함
          + 일상 생활에서는 잘 나타나지 않는 경우가 많음: AI 시스템에 대해 가정 하는 것이 일상적인 패턴이기 때문에
     * AI 코딩 어시스턴트 인기가 높아지면서 ""AI 생성 코드에 대한 안일함""과 ""생성형 AI로 페어 프로그래밍 대체""를 피해야 할 두 가지 관행으로 지적함
          + 둘 다 이 기술이 ""실제로 어떻게 작동하는지""와 ""한계를 인정하지 않는 잘못된 멘탈 모델""에서 비롯됨
          + 이러한 도구가 더 설득력 있고 '인간적'이 될수록 기술이 실제로 어떻게 작동하는지와 제공하는 '해결책'의 한계를 인정하기 어려워짐
     * 생성형 AI를 세상에 배포하는 사람들에게도 위험은 비슷하거나 더 두드러질 수 있음
          + 일반적으로 설득력 있고 사용 가능한 것을 만들기 위한 의도이지만, 사용자를 오도하거나 속이거나 불편하게 만든다면 가치가 사라짐
          + EU AI Act와 같이 딥페이크 제작자에게 AI 생성 콘텐츠라고 레이블을 붙이도록 하는 법률이 나오는 것은 놀랄 일이 아님
     * AI와 로봇공학뿐만 아니라 크로스 플랫폼 모바일 앱 구축에서도 유사한 문제가 있음
          + 서로 다른 플랫폼은 사용 방식이 다르기 때문에 전체 경험 설계를 변경해야 함
          + 마찬가지로 생성형 AI에서도 서로 다른 맥락과 사용 사례에 따라 다른 가정과 멘탈 모델이 있으며, 사용자가 불편한 골짜기에 빠지는 지점이 달라짐
          + 이러한 미묘한 차이가 LLM 출력에 대한 경험이나 인식을 변화시킴
     * 방대한 양의 합성 데이터를 필요로 하는 의약품 연구자에게는 마이크로 수준의 정확성이 중요하지 않을 수 있지만, 법률 문서를 파악하려는 변호사에게는 정확성이 매우 중요함
          + 불편한 골짜기에 빠지는 것은 한 걸음 물러서서 기대치를 재평가할 신호일 수 있음

     ""기존의 생성형 AI에 대한 멘탈 모델과 개념은 무시할 수 있는 부차적인 문제가 아니라 근본적인 디자인 문제임""
     Ken Mugrage & Srinivasan Raguraman

관점의 전환

     * 생성형 AI의 불편한 골짜기는 문제일 수 있지만 기술의 한계를 상기시켜주는 도구이기도 함
     * 산업계 전반에 걸쳐 이를 해결하기 위한 흥미로운 시도들이 있었음
          + 펜실베니아 대학의 Ethan Mollick 교수는 AI를 좋은 소프트웨어가 아닌 ""꽤 좋은 사람들""로 이해해야 한다고 주장
               o AI는 인간처럼 특이한 강점과 약점이 있기 때문에 어떤 작업을 맡길 수 있을지 파악하기 어려움
               o 매뉴얼이 없기 때문에 AI가 잘하는 것이 무엇인지 알아내는 유일한 방법은 함께 일하면서 배우는 것
          + 즉, 생성형 AI가 할 수 있는 일과 효과적인 곳에 대한 기대는 잠정적이어야 하며 유연해야 함
          + 어느 정도 가정과 기대를 성찰함으로써 불편한 골짜기를 극복할 수 있는 한 가지 방법일 수 있음

블랙박스 풀어내기

     * 사고방식의 전환을 요구하는 것만으로는 충분하지 않음
          + 첫 걸음이지만, 생성형 AI에 대해 다르게 생각하고 멘탈 모델이 제기하는 과제를 해결하는 데 도움이 되는 실천과 도구도 있음
     * 한 가지 예는 최신 Technology Radar에서 파악한 ""LLM에서 구조화된 출력 얻기"" 기법
          + 프롬프트할 때 특정 형식으로 응답하도록 지시하거나 파인튜닝을 통해 수행할 수 있음
          + Instructor와 같은 도구 덕분에 이전보다 더 쉽게 할 수 있게 됨
          + 기대치와 LLM 출력 간에 더 큰 정렬을 제공한다는 장점이 있음
               o 예상치 못하거나 완전히 맞지 않는 것이 있을 가능성은 있지만, 이 기법은 그 문제를 어느 정도 해결함
     * 그 외에도 다른 기법들이 있음
          + Retrieval-augmented generation은 일반적으로 골치 아픈 '콘텍스트 윈도우' 제어 작업을 더 잘 제어하는 방법
          + 이러한 기법의 성공을 평가하고 측정할 수 있는 프레임워크와 도구를 보게 되어 기쁨
               o Ragas는 충실도와 관련성 같은 것에 대한 메트릭을 AI 개발자에게 제공하는 유용한 라이브러리
               o DeepEval도 Radar에 소개됨
     * 측정은 중요하지만 LLM에 대한 관련 지침과 정책을 생각하는 것도 중요함
          + 그래서 LLM Guardrails 탐색을 권장함
          + 또한 이러한 모델 내부에서 실제로 어떤 일이 일어나고 있는지 더 잘 이해하기 위한 조치를 취해야 함
               o 이러한 블랙박스를 완전히 풀어내는 것은 불가능할 수 있지만, Langfuse와 같은 도구 덕분에 팀과 조직은 작동 방식에 대해 더 명확한 관점을 얻을 수 있음
               o 이는 이 기술과의 관계를 재정립하고 멘탈 모델을 바꾸며 불편한 골짜기에 빠질 가능성을 제거하는 데 큰 도움이 될 수 있음

결함이 아니라 기회

     * ""생성형 AI 도구의 캄브리아 대폭발""이라고 설명한 이러한 도구들은 업계의 핵심에 있는 사람들이 생성형 AI를 재고하고 더 나은 제품을 구축하는 데 도움이 될 수 있음
     * 그러나 더 넓은 세상을 위해서는 이 작업이 보이지 않을 것임
          + 따라서 도구 체인을 발전시켜 생성형 AI를 더 잘 제어하고 이해하는 방법을 모색하는 것 외에도, 기존의 멘탈 모델과 생성형 AI 개념 자체가 근본적인 디자인 문제라는 점을 인정하는 것이 중요함
          + 앞으로 나아가면서 무시할 수 있는 부차적인 문제가 아님

     ""생성형 AI의 불편한 골짜기는 고쳐야 할 문제가 아니라 우리가 이 기술에 대해 정말로 원하고 기대하는 바를 재평가할 기회임""
"
"https://news.hada.io/topic?id=17555","애플 실리콘에서의 Linux 구현, Alyssa Rosenzweig와의 인터뷰 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              애플 실리콘에서의 Linux 구현, Alyssa Rosenzweig와의 인터뷰

     * 아사히 리눅스는 애플 실리콘 M 시리즈 칩에 리눅스를 이식하려는 프로젝트
     * 애플 실리콘은 ARM 기반 맞춤형 아키텍처이고 문서화되지 않은 플랫폼이라 도전적인 작업
     * Alyssa Rosenzweig는 아사히 리눅스에 기여하고 있는 잘 알려진 컴퓨터 과학자이자 오픈소스 개발자

전통적 x86 vs ARM 기반 M시리즈 이행

     * 인텔의 x86은 가장 널리 사용되는 칩 아키텍처
     * 애플은 2020년 인텔 x86에서 자체 ARM 기반 M 시리즈로 모든 Mac의 전환을 시작
     * M 시리즈는 처음부터 재설계되어 소프트웨어와 하드웨어에 대한 더 큰 통제권을 제공했지만 완전한 독점 기술

아사히 리눅스 프로젝트 시작과 도전 과제

     * M1 발표로 리눅스 커뮤니티 내 관심사가 됨
     * Hector Martin이 아사히 리눅스를 발표하고 많은 관심을 끌었음
     * 애플 실리콘을 위해 설계되지 않은 리눅스를 이식하는 것 자체가 어려운 문제
     * 더 큰 문제는 애플이 하드웨어를 공개적으로 문서화하지 않는다는 점
     * 역공학과 하드웨어 문서화 작업부터 시작해야 함

하드웨어 역공학 프로세스

     * MacOS용 애플 드라이버와 하드웨어 간 통신 내용을 가로채 분석
     * 작은 변경을 주고 새로운 덤프를 얻어 차이점 분석, 반복
     * 수천 번의 반복으로 하드웨어 동작 방식을 파악
     * 하드웨어 구조 문서화 후 드라이버 개발 진행

M1 GPU 아키텍처 특징

     * 다른 GPU에 비해 매우 단순한 편
     * 간단히 구동할 수 있지만 기능이 제한적
     * 많은 기능들을 드라이버에서 소프트웨어적으로 구현해야 함

아사히 리눅스 현재 상태

     * Type-C 디스플레이 출력, Thunderbolt 등은 개발 중
     * 애플 뉴럴 엔진 등 맞춤형 하드웨어는 표준이 없어 우선순위가 낮음
     * 커뮤니티 기여도 활발히 이루어지고 있음
     * 기본적 기능은 대부분 지원되지만 고급 기능은 사용자 요구에 따라 다름

오픈소스 기여 조언

     * 초보자에게는 쉽지 않은 프로젝트
     * 웹서비스나 게임모드 등 다른 역공학 경험이 도움됨
     * 작은 프로젝트부터 시작해 점차 키워나가는 것이 좋음

아사히 리눅스의 최근 성과

     * 여러 오픈소스 프로젝트를 연계해 AAA급 윈도우 게임을 ARM 맥에서 구동
     * Vulkan 드라이버, DXVK, Proton, FEX 등이 맞물려 Direct3D 게임을 실행
     * 프로젝트 시작 당시에는 상상하기 어려웠던 수준의 성과를 달성

GN⁺의 의견

     * Asahi Linux는 Apple Silicon의 인기에 따라 중요성이 커지고 있는 프로젝트로, 문서화되지 않은 플랫폼에서 Linux를 실행할 수 있게 하는 데 중점을 둠.
     * Alyssa Rosenzweig는 그래픽 개발자로서 Apple M1 GPU의 역공학을 통해 Asahi Linux에 기여하고 있으며, 이는 Linux 게임의 발전에도 기여함.
     * 문서화되지 않은 독점 플랫폼을 역공학한다는 것이 엄청난 도전임에도 불구하고, 아사히 리눅스 팀의 끈기와 협업이 돋보이는 프로젝트

        Hacker News 의견

     * Apple Silicon 기기에서 커스텀 OS를 실행할 때 내부 스피커의 온도가 소프트웨어로 조절됨. Asahi 개발자들이 이를 역설계하고 재구현하여 안전성을 확보해야 했음. 잘못하면 스피커가 손상될 수 있음. HDR 지원 시 디스플레이에서도 비슷한 문제가 발생할 가능성이 있음
     * Apple의 M1 CPU를 ARM 기반으로 분석하여 Linux 커널 시스템 호출에 통합하는 것은 극단적인 조치임. 원본 덤프를 복제하고, 16진수 값을 확인하며, 애플리케이션이 작동하는지 확인하는 과정이 포함됨
     * Linux-on-macOS 프로젝트에 매달 $5씩 기부하면 큰 팀을 구성할 수 있을지 궁금함
     * Apple Silicon을 역설계하는 것이 낭비처럼 보임. Cupertino에 다이어그램이 있음에도 불구하고 많은 노력이 필요함
     * 이 스레드의 부정적인 댓글이 실망스러움. Linux는 역설계에 뿌리를 두고 있으며, 오픈 소스 드라이버를 지지하는 사람들이 많음. 그러나 Asahi 팀의 노력을 폄하하는 댓글이 많음
     * Asahi 팀의 노력은 놀라움. 하지만 Apple의 폐쇄적인 시스템을 역설계하고 유지하는 것은 어려운 일임. 다른 x86 및 ARM 제조업체들이 Apple의 우위를 좁히고 있음
     * Asahi가 짧은 시간에 많은 것을 이뤘지만, 현재는 버그와 미지원 기능이 많아 사용하기 어려움. Wayland와 KDE/Gnome의 문제도 있음. 하드웨어 및 3rd 파티 앱 지원이 큰 도전 과제임. Linux 시스템은 일반적으로 x86_64 플랫폼에 의존함
"
"https://news.hada.io/topic?id=17536","애플 M1/M2 GPU 드라이버 업데이트 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       애플 M1/M2 GPU 드라이버 업데이트 소식

Apple M1/M2 GPU 드라이버 업데이트

     * Apple M1 및 M2 GPU용 커널 그래픽 드라이버는 Rust로 작성되었으며, 다양한 그래픽 표준에 대한 적합성을 달성한 것으로 주목받고 있음.
     * X.Org Developers Conference (XDC) 2024에서 Alyssa Rosenzweig가 드라이버의 상태와 지원 가능한 게임 종류에 대한 업데이트를 발표함.
     * Rosenzweig는 2019년부터 XDC에서 마녀 복장을 하고 발표를 진행하는 전통을 이어오고 있음.

  업데이트 및 테셀레이션

     * 작년 XDC에서 드라이버가 OpenGL ES 3.1 적합성을 달성했다고 보고함.
     * 현재 드라이버는 OpenGL 4.6 적합성을 달성했으며, 테셀레이션 셰이더에 대한 논의가 이어짐.
     * Apple GPU의 하드웨어 테셀레이터는 OpenGL, Vulkan, Direct3D 표준을 구현하기에 기능이 부족하여 사용이 어려움.
     * 드라이버는 소프트웨어를 사용하여 테셀레이션을 구현하며, Microsoft의 참조 테셀레이터 코드를 OpenCL C로 변환하여 사용함.

  Vulkan 및 게임

     * Honeykrisp M1/M2 GPU 드라이버가 Vulkan 1.3 적합성을 달성함.
     * DirectX, Windows, x86 CPU와의 호환성을 위해 DXVK 드라이버와 Wine을 사용하여 Vulkan으로 변환함.
     * FEX-Emu를 사용하여 x86에서 Arm64로 변환하며, 페이지 크기 차이를 해결하기 위해 가상 머신을 사용함.

  성능 및 게임 실행

     * 드라이버는 다양한 게임을 실행할 수 있으며, 성능은 하드웨어 가속에 비해 약간 떨어지지만 실용적인 수준임.
     * 고사양 게임은 16GB 이상의 RAM이 필요하며, 일부 게임은 8GB 시스템에서도 실행 가능함.
     * 레이 트레이싱 지원은 현재 우선순위가 낮으며, M3 GPU에 대한 작업을 시작할 계획임.

GN⁺의 정리

     * Apple M1/M2 GPU 드라이버는 Rust로 작성되어 높은 안정성과 성능을 제공함.
     * 드라이버는 다양한 그래픽 표준에 적합하며, OpenCL을 활용한 테셀레이션 구현이 흥미로움.
     * Vulkan 및 DirectX 호환성을 통해 다양한 게임을 실행할 수 있으며, 가상 머신을 활용한 페이지 크기 문제 해결이 독창적임.
     * 이 기사는 최신 GPU 드라이버 개발의 도전과 해결책을 이해하는 데 유용하며, 비슷한 기능을 가진 프로젝트로는 DXVK와 Wine이 추천됨.

        Hacker News 의견

     * 그녀는 마법사임을 강조하는 의견이 있음
     * 하드웨어에서 누락된 부분이 많고 에뮬레이션이 많이 사용됨에 놀라움을 표하는 의견이 있음
     * ""지원 중단 및 인수""와 같은 기사를 기대하게 된 훈련을 받았다는 의견이 있음
     * M3/M4가 완전히 다른 드라이버를 필요로 할지 궁금해하는 의견이 있음
     * /SubscriberLink/ 링크를 공유하는 것이 비윤리적인지 궁금해하는 의견이 있음
     * 프랑스어로 시작하는 것이 재미있을 것이라는 의견과 함께 정말 인상적이라는 의견이 있음
          + tessellator.cl 파일이 경력에서 가장 혼란스러운 파일이라는 의견이 있음
          + 발표자가 23세라는 사실에 놀라움을 표하며, 경력의 혼란스러움이 시간이 지나도 줄어들지 않는다는 의견이 있음
          + 그녀의 작업이 매우 인상적이며, 2,000줄의 C++ 코드가 난해하다는 그녀의 말에 주목할 필요가 있다는 의견이 있음
     * Alyssa R와 Asahi Lina의 작업이 훌륭하다는 의견이 있음
          + 드라이버 코드를 익숙하게 다루지 않으면 이해하기 어려운 부분이 많다는 의견이 있음
          + 하드웨어 작업이 매우 특이적이어서 더 쉽게 작성할 수 있기를 바라는 의견이 있음
          + 마녀 의상과 같은 옛날 스타일의 재미를 즐긴다는 의견이 있음
     * Alyssa가 놀라운 인물이며, 그녀가 17세에 GPU 작업을 시작했다는 첫 기사를 기억한다는 의견이 있음
          + 그녀가 한 일을 할 수 있는 사람이 있다는 것이 놀랍다는 의견이 있음
     * 드라이버가 Rust로 작성되었다는 사실에 대한 링크를 찾는 의견이 있음
"
"https://news.hada.io/topic?id=17482","읽고 쓰기를 배우며 손글씨 노트로의 회귀","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         읽고 쓰기를 배우며 손글씨 노트로의 회귀

손글씨 읽기 및 쓰기를 통한 손글씨 노트로의 복귀

     * 소개
          + Google Research의 소프트웨어 엔지니어 Blagoj Mitrevski와 Andrii Maksai는 손글씨 사진을 디지털 형식으로 변환하는 모델을 소개함.
          + 이 모델은 특수 장비 없이도 펜 스트로크를 재현할 수 있음.
          + 디지털 노트는 내구성, 편집 가능성, 색인화가 용이한 장점이 있지만, 전통적인 필기와의 차이가 존재함.
          + 이 차이를 줄이기 위해 손글씨를 디지털 잉크로 변환하는 '디렌더링' 기술이 필요함.
     * 디지털 잉크의 장점
          + 전통적인 손글씨를 선호하는 사용자도 디지털 형식으로 노트를 접근할 수 있음.
          + OCR을 넘어 손글씨 스타일을 유지하면서 자유롭게 편집 가능한 문서를 생성할 수 있음.
          + 디지털 콘텐츠와의 통합 및 조직화가 용이함.
     * InkSight: 오프라인에서 온라인으로의 손글씨 변환
          + 특수 장비 없이 손글씨 사진에서 스트로크를 추출하는 방법 제안.
          + 전통적인 기하학적 구조에 의존하지 않고, '읽기'와 '쓰기'를 학습하여 다양한 상황에서 강력한 성능을 발휘함.
     * 개요
          + 손글씨의 스트로크 수준의 궤적 세부 사항을 캡처하는 것이 목표.
          + 결과 스트로크를 사용자가 선택한 노트 앱에 저장할 수 있음.
     * 도전 과제
          + 제한된 감독 데이터: 이미지와 디지털 잉크의 쌍 데이터를 얻는 것이 비용이 많이 들고 시간 소모적임.
          + 대규모 이미지 확장성: 다양한 해상도와 콘텐츠 양을 가진 입력 이미지를 효과적으로 처리해야 함.
     * 방법론
          + 읽기와 쓰기를 학습하여 다양한 스타일의 이미지를 입력으로 디렌더링 작업을 일반화함.
          + 기하학적 구조에 의존하지 않고, 텍스트 요소를 정확히 추출하고, 인간의 필기 방식과 유사한 벡터 표현을 생성함.
     * 시스템 워크플로우
          + OCR을 사용하여 단어 수준의 경계 상자를 추출하고, 각 단어를 개별적으로 디렌더링함.
          + 데이터 증강을 통해 합성 이미지와 실제 사진 간의 도메인 차이를 줄임.
     * 비전-언어 모델
          + 다섯 가지 작업 유형을 포함하는 훈련 혼합물을 생성함.
          + 각 작업은 작업별 입력 텍스트를 사용하여 훈련 및 추론 중 작업을 구별함.
     * 결과
          + 모델의 성능을 평가하기 위해 평가 데이터셋을 수집하고, 세 가지 모델 변형을 훈련함.
          + 자동 및 인간 평가를 통해 모델 출력이 입력 이미지 및 인간 생성 디지털 잉크와 유사함을 보여줌.
     * 결론
          + 손글씨 사진을 디지털 잉크로 변환하는 최초의 접근 방식을 제시함.
          + 복잡한 모델링 없이 표준 빌딩 블록으로 구성할 수 있는 방법을 제안함.

GN⁺의 정리

     * 손글씨를 디지털 형식으로 변환하는 기술은 전통적인 필기와 디지털 노트의 장점을 결합하여 사용자에게 더 나은 경험을 제공함.
     * 이 기술은 특수 장비 없이도 다양한 상황에서 강력한 성능을 발휘할 수 있어, 널리 채택될 가능성이 높음.
     * 유사한 기능을 가진 산업 내 제품으로는 Wacom의 스마트 펜이나 Livescribe의 스마트펜이 있음.

        Hacker News 의견

     * 손글씨가 좋지 않아도 시스템을 통해 깔끔한 필체로 바꿀 수 있는 응용이 흥미로움
          + 수업 중 빠르게 쓰는 글씨를 깔끔하게 변환할 수 있음
     * 손글씨를 다시 배우는 것에 대한 기대가 있었으나, Google의 연구가 디지털 노트를 개선하는 데 도움을 줌
          + 기술에 의존하지 않고 손글씨를 개선하고 싶음
     * 사진에서 손글씨를 인식하는 최신 기술에 대한 관심
          + 필기 노트를 Markdown으로 변환하는 것에 더 관심이 있음
     * 10년 전 tesseract를 사용해 영어 OCR을 시도했으나, 비영어권 언어에서는 성능이 좋지 않았음
          + transformer 기반의 OCR 연구가 반가움
     * 저전력 기기에서도 작동할 수 있는지에 대한 궁금증
     * 인간의 손글씨를 모방하는 아이디어가 흥미로움
          + 기계 학습 모델에서 이를 구현하는 것이 목표였음
     * 이 기술이 위조 서명이나 손글씨를 만드는 데 사용될 수 있는지에 대한 질문
     * 교육 분야에서 디지털 필기 노트나 오래된 문서 보존에 큰 영향을 미칠 수 있는 연구 프로젝트임
     * 손글씨에 대한 좋은 OCR 솔루션을 찾고 있음
          + 이전 모델들은 PDF에만 작동했으며, 오프라인 맞춤형 솔루션을 원함
     * 손글씨 사진을 디지털 형식으로 변환하는 모델을 소개함
          + Google이 데이터를 수집하기 위한 방법일 수 있다는 회의적인 시각도 있음
"
"https://news.hada.io/topic?id=17546","베르기나 왕릉에서 발견된 알렉산더 대왕의 튜닉?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       베르기나 왕릉에서 발견된 알렉산더 대왕의 튜닉?

   I'm sorry, but there is no content to summarize from the provided text.
"
"https://news.hada.io/topic?id=17538","데스크톱용 Claude 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            데스크톱용 Claude 출시

     * 시작하기
          + Claude for Desktop Beta는 데스크톱에서 사용할 수 있는 AI 파트너임
          + 빠르고 집중된 작업을 위해 설계됨
          + macOS와 Windows(arm64 포함)에서 사용 가능함
     * Claude와 함께하기
          + 어디서나 Claude와 대화 가능함
          + 아이디어를 브레인스토밍하고, 답변을 얻고, 이미지를 분석할 수 있음
     * 제품
          + Apple App Store와 Google Play에서 이용 가능함
     * 연구, 경력, 회사
          + 연구와 경력 기회, 회사 정보 제공
     * 소비자 약관, 개인정보 보호 정책
          + 소비자 약관과 개인정보 보호 정책 제공
          + 개인정보 선택 사항과 책임 있는 공개 정책 포함
     * 컴플라이언스
          + 이 사이트는 reCAPTCHA Enterprise로 보호됨
          + Google 개인정보 보호 정책과 서비스 약관 적용됨

GN⁺의 정리

     * Claude for Desktop Beta는 데스크톱 환경에서 AI를 활용해 빠르고 집중된 작업을 지원하는 도구임. 사용자는 다양한 플랫폼에서 Claude와 상호작용하며 아이디어를 발전시키고 문제를 해결할 수 있음.
     * 이 AI 도구는 특히 창의적 작업이나 복잡한 문제 해결에 유용할 수 있으며, 사용자 경험을 향상시키는 데 기여할 수 있음.
     * 유사한 기능을 제공하는 다른 AI 도구로는 ChatGPT, Jasper 등이 있음.

        Hacker News 의견

     * Anthropic 팀은 Claude AI를 브라우저에서 쉽게 사용할 수 있도록 제공함
          + Firefox에서 북마크 추가로 Claude AI를 검색 엔진처럼 사용할 수 있음
          + URL 바에 'ai <질문>' 형식으로 입력 가능함
     * 데스크톱 앱이 쿠키 동의 배너를 보여주면, 이는 게으른 노력으로 간주됨
          + Chrome에서 페이지를 앱으로 설치하는 버튼을 직접 클릭할 수 있음
     * AnythingLLM을 사용 중이며, MIT 라이선스로 GitHub에서 제공됨
          + 최근 X.ai API가 추가되었으며, Grok은 아직 Claude나 ChatGPT보다 성능이 떨어짐
     * 데스크톱 솔루션으로 Workspace를 쉽게 생성할 수 있음
          + 많은 프롬프트를 관리하기에 적합함
          + 개인 프롬프트는 GitHub에서 확인 가능함
     * AnythingLLM에 대한 두 가지 불만 사항
          + 라이트 모드가 없음
          + Electron 기반임
     * ChatGPT 데스크톱 앱은 간단한 상호작용에만 사용함
          + 복잡한 작업에는 웹앱이 더 적합함
     * 컴퓨터 사용을 로컬에서 실행할 수 있는 게이트웨이 가능성 언급
     * Linux 지원이 없으며, 웹은 잘 작동하지만 Linux 미지원이 아쉬움
     * macOS에서는 웹페이지를 PWA로 Dock에 추가할 수 있음
     * Claude AI는 전화번호가 필요하며, Google 번호는 허용되지 않음
          + 서비스 사용을 원하지만 결제 수단을 받아들이지 않음
     * macOS에서 ChatGPT와 동일한 Option+Space 단축키를 제공하지만, 앱은 웹 컨테이너로 빠르게 구축된 느낌임
          + 브라우저에서 작동하지 않는 기능 추가를 기대함
     * Linux 지원이 없고 스크린샷도 제공되지 않음
"
"https://news.hada.io/topic?id=17508","구글 딥마인드, LLM이 생성한 텍스트를 워터마킹하고 감지하는 SynthID를 오픈소스로 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          구글 딥마인드, LLM이 생성한 텍스트를 워터마킹하고 감지하는 SynthID를 오픈소스로 공개

     * Google DeepMind의 SynthID는 AI 생성 이미지, 오디오, 텍스트 또는 비디오에 직접 디지털 워터마크를 삽입하여 AI 생성 콘텐츠에 워터마크를 적용하고 식별하는 기술
          + Nature 논문에서 이 방법에 대한 보다 완전한 기술적 설명을 읽을 수 있음
     * SynthID Text는 개발자가 텍스트 생성에 워터마킹을 사용할 수 있도록 오픈 소스로 제공

워터마크 적용

     * SynthID Text는 Top-K 및 Top-P 이후 모델의 생성 파이프라인에 적용되는 Logits 프로세서
     * 의사 무작위 g-함수를 사용하여 모델의 로짓을 보강하여 텍스트 품질에 크게 영향을 주지 않으면서 텍스트가 모델에 의해 생성되었는지 여부를 판단하는 데 도움이 되는 방식으로 워터마킹 정보를 인코딩함
     * 워터마크는 g-함수를 매개변수화하고 생성 중에 적용되는 방식을 구성하기 위해 설정됨
     * 사용하는 각 워터마킹 구성은 안전하고 비공개로 저장되어야 함
     * 워터마킹 구성에 필요한 두 가지 필수 매개변수
          + keys 매개변수: 모델의 어휘에 걸쳐 g-함수 점수를 계산하는 데 사용되는 고유한 무작위 정수 목록. 이 목록의 길이는 적용되는 워터마킹 계층 수를 결정함
          + ngram_len 매개변수: 강건성과 검출 가능성의 균형을 맞추는 데 사용됨. 값이 클수록 워터마크가 더 잘 감지되지만 변경에 더 취약해짐. 기본값으로 5가 적절함
     * 성능 요구에 따른 워터마크 추가 구성 가능
          + 샘플링 테이블은 sampling_table_size와 sampling_table_seed의 두 가지 속성으로 구성됨
          + 샘플링할 때 편향되지 않고 안정적인 g-함수를 보장하려면 sampling_table_size를 최소 2^16 이상 사용해야 함
          + 그러나 샘플링 테이블의 크기는 추론 시 필요한 메모리 양에 영향을 미침
          + sampling_table_seed로는 원하는 정수를 사용할 수 있음
          + 이전 토큰의 context_history_size에서 반복되는 n-그램은 검출 가능성을 높이기 위해 워터마크되지 않음
     * SynthID Text 워터마크로 텍스트를 생성하기 위해 모델에 추가 훈련이 필요하지 않음
     * 모델의 .generate() 메서드에 전달되는 워터마킹 구성만 필요함. 이는 SynthID Text 로짓 프로세서를 활성화함
     * Hugging Face의 블로그 게시물과 Space에서 Transformers 라이브러리에서 워터마크를 적용하는 방법을 보여주는 코드 예제를 확인할 수 있음

워터마크 감지 및 검증 가능성

     * 워터마크 감지는 확률적임
     * 베이지안 탐지기가 Hugging Face Transformers 및 GitHub에서 제공됨
     * 이 탐지기는 워터마크됨, 워터마크되지 않음 또는 불확실의 세 가지 가능한 탐지 상태를 출력할 수 있음
     * 두 개의 임계값을 설정하여 특정 거짓 양성률과 거짓 음성률을 달성하도록 동작을 사용자 정의할 수 있음
     * 동일한 토크나이저를 사용하는 모델은 탐지기의 훈련 세트에 워터마크를 공유하는 모든 모델의 예제가 포함되어 있는 한 워터마킹 구성 및 탐지기를 공유할 수 있음
     * 훈련된 탐지기가 있으면 탐지기를 사용자 및 대중에게 노출할지 여부와 방법을 선택할 수 있음
          + 완전 비공개 옵션은 탐지기를 어떤 식으로든 공개하거나 노출하지 않음
          + 반 비공개 옵션은 탐지기를 공개하지 않지만 API를 통해 노출함
          + 공개 옵션은 다른 사람이 다운로드하고 사용할 수 있도록 탐지기를 공개함

제한 사항

     * SynthID Text 워터마크는 일부 변환에 강력하지만 제한 사항이 있음
          + 워터마크 적용은 정확성을 저하시키지 않고 생성을 보강할 기회가 적기 때문에 사실적인 응답에는 덜 효과적임
          + AI 생성 텍스트를 철저히 다시 작성하거나 다른 언어로 번역하면 탐지기 신뢰도 점수가 크게 감소할 수 있음
     * SynthID Text는 의도적인 공격자가 해를 끼치는 것을 직접 막도록 설계되지 않았음
     * 그러나 악의적인 목적으로 AI 생성 콘텐츠를 사용하기 어렵게 만들 수 있으며, 다른 접근 방식과 결합하여 콘텐츠 유형과 플랫폼에 걸쳐 더 나은 적용 범위를 제공할 수 있음

GN⁺의 의견

     * SynthID Text는 워터마크를 통해 AI 생성 콘텐츠의 출처를 식별할 수 있는 유용한 기능을 제공함
     * 그러나 워터마크 자체는 콘텐츠의 진위 여부를 보장하지는 않음. 잘못된 정보나 유해한 콘텐츠에도 워터마크를 적용할 수 있기 때문
     * 따라서 워터마크와 더불어 콘텐츠의 내용 자체에 대한 신뢰성 검증도 필요할 것임
     * Hugging Face와 같은 주요 라이브러리에 통합되어 개발자들이 쉽게 활용할 수 있다는 점은 큰 장점
     * 다만 탐지기의 공개 여부는 신중히 결정해야 할 사항임. 완전 공개할 경우 워터마크를 우회하려는 시도가 늘어날 수 있기 때문
     * 전반적으로 AI 생성 콘텐츠가 빠르게 확산되는 상황에서 출처 식별을 위한 기술로서 SynthID Text의 중요성은 커질 것으로 보임
"
"https://news.hada.io/topic?id=17486","GitHub, Google 및 Anthropic과의 AI 협약 체결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GitHub, Google 및 Anthropic과의 AI 협약 체결

     * Microsoft의 GitHub은 Google의 Gemini와 Anthropic의 Claude 3.5 Sonnet을 수백만 소프트웨어 개발자가 사용하는 코딩 어시스턴트 Copilot에 통합하기로 합의함
          + 처음에는 고객이 Google과 Anthropic의 모델을 사용해 채팅하고 질문할 수 있음
          + 결국 이 모델들은 GitHub Copilot 어시스턴트의 주요 부분에 통합될 것임
     * GitHub은 OpenAI와 제휴한 후 지루한 코딩 작업을 자동화하는 데 생성형 AI 사용을 선도함
          + Microsoft가 GitHub을 인수한 이후에도 GitHub은 기술적으로 Microsoft의 경쟁사일지라도 광범위한 파트너십을 유지하도록 허용함
          + GitHub은 고객에게 선택권을 제공하고 Google과 Amazon의 클라우드 서비스를 사용하는 사람들에게 옵션을 제공하는 데 열심임
     * GitHub은 Spark라는 AI 프로젝트를 미리 보여주고 있는데, 이를 통해 사용자는 일반 영어 프롬프트를 사용하여 작은 애플리케이션을 만들 수 있음
          + 프로그래밍 방법을 아는 사용자는 Spark에서 생성된 코드를 열어 수정하고 코딩과 프롬프트 사이를 전환할 수 있음
          + 초보자에게는 무언가를 만들 수 있는 방법을 제공하고, 경험 많은 개발자에게는 아이디어를 테스트하는 더 쉬운 방법을 제공하는 것이 목표임
     * GitHub CEO 에 따르면 AI를 통한 소프트웨어 개발은 점점 더 강력해지고 있음
          + AI가 생성할 수 있는 코드 블록의 크기가 커지고 있으며, 여러 개의 코드 블록을 함께 조립할 수 있음
          + 아직 완전한 GitHub이나 Facebook을 작성할 수는 없지만, AI가 발전함에 따라 코드 블록의 크기는 증가할 것임

        Hacker News 의견

     * Cursor의 탭 완성 기능을 사용 중이며, 기능은 놀랍지만 생산성 향상은 느끼지 못함. AI는 기본적인 작업에 도움을 줄 수 있지만, 잘못된 연결을 할 수 있어 코드 검토가 필요함. AI 도구의 일반적인 문제인지, Copilot의 새로운 모델이 다른 경험을 제공할지 궁금함
     * Copilot 사용자로서 Claude도 사용 중이며, 어려운 코딩 문제나 작업 검토에 Claude를 더 신뢰하게 됨
     * 내부적으로 어떤 이유로 결정되었는지 궁금함. OpenAI 문제 때문인지, Cursor와의 경쟁 때문인지. LLM 제공자 간의 경쟁이 사용자에게 이로울 것임
     * Sourcegraph의 Cody를 사용 중이며, Copilot이 비슷한 기능을 제공하면 다시 전환할 것임. Copilot의 자동 완성이 더 정확하지만, Cody + Sonnet 3.5의 채팅 경험이 더 뛰어남
     * Copilot을 사용하여 코딩 중이며, 랜덤한 목록을 작성할 때 Copilot이 나머지 테이블을 잘 예측함. 이 기능이 매우 빠르고 유용하여 큰 변화를 가져옴
     * 여러 기사 링크가 제공되었으며, GitHub Copilot이 이제 Xcode에서도 사용 가능함
     * 코드 변경을 영어로 AI에게 설명하는 것보다 직접 작성하는 것이 더 빠르고 나음. 좋은 프롬프트를 작성하는 것이 코드 작성만큼 어려움
     * GitHub는 초기 OpenAI 디자인 파트너였으며, OpenAI가 맞춤형 LLM을 개발함. 초기 이점에도 불구하고 기본 모델 제공자로 돌아가야 함. 미래의 기술 회사들이 이 방법을 선택할 수밖에 없는지 궁금함
     * 경쟁사의 큰 장점은 하나의 모델에 얽매이지 않는 것임. MS의 OpenAI 투자 이후에도 다른 선택지를 고려할 수 있었음
"
