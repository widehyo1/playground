"https://news.hada.io/topic?id=5096","Tidy Viewer (tv) - CSV를 깔끔하게 보는 CLI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Tidy Viewer (tv) - CSV를 깔끔하게 보는 CLI

   ""CSV Pretty Printer""
   - 크로스 플랫폼 지원. Rust 오픈소스
   - 컬럼 스타일링을 통해서 CSV를 예쁘게 출력
   - 숫자 표시에 R의 Pillar 패키지와 같은 Significant Figure(sigfig) 룰을 사용
   - xsv, q, miller 등과 잘 연동

   - xsv - CLI용 CSV파일 처리도구 https://news.hada.io/topic?id=1197
   - q - CSV 파일에 SQL쿼리 하기 https://news.hada.io/topic?id=3000
   - Miller - CSV/JSON 데이터 처리용 CLI 도구 https://news.hada.io/topic?id=4888
"
"https://news.hada.io/topic?id=5167","WebAssembly는 어떻게 JavaScript를 빠르게 실행할 수 있는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               WebAssembly는 어떻게 JavaScript를 빠르게 실행할 수 있는가

   ### 인트로
   - JS를 브라우저에서 띄울 때는 브라우저의 JS 엔진이 잘 튜닝되어 있어서 실행이 빠른데, 요즘은 다른 환경에서도 JS를 많이 쓴다. (서버리스, 게이밍 콘솔, iOS 등)
   - WASM은 이러한 런타임에서 JS를 빠르게 돌릴 수 있게 해주는 기술이다.
   ### 작동 방식
   - JS 코드는 JS 엔진이 있다면 인터프리터와 JIT 컴파일러 등을 통해 바이트코드로 바뀐다.
   - JS 엔진이 없는 환경에는 JS 엔진을 코드와 함께 배포해야 하는데, JS 엔진을 WASM 모듈로 배포함으로써 여러 환경에서 포터블하게 만들 수 있다.
   - JS 코드는 WASM 엔진 안에 격리된 JS 엔진 안에서 작동하게 된다.
   - WASM 엔진이 사용하는 JS 엔진은 SpiderMonkey로, 파이어폭스도 이를 사용한다.
   - WASM은 그 자체로 머신코드를 만들어낼 수 없으므로 JS로 컴파일을 거쳐야 한다.
   - 근데 JIT을 쓸 수 없으므로 WASM은 느린 게 정상이다. 그러면 WASM이 대체 어떻게 JS 실행을 “빠르게” 한다는 걸까?
   ### 어디에서 WASM을 쓰는가
   iOS (또는 JIT 못쓰는) 환경에서 JS 쓰기
   - 게이밍 콘솔, unprivileged iOS app, 스마트 TV 등은 보안을 이유로 JIT을 못 쓴다.
   (→ JIT 컴파일링에 보안 이슈가 있는 게 당연하다는 듯 얘기하고 있는데 그 이유는 찾아봐도 잘 모르겠습니다.)
   - 따라서 이런 데서는 인터프리터를 써야 하는데, 사실 원래 이런 플랫폼에서 도는 앱들은 굉장히 오래 돌고 코드 양이 많기 때문에 인터프리터를 써서 느려지는 걸 피하는 게 맞다.
   - 인터프리터의 성능 저하 이슈를 피하면서도 JS를 쓰려면 어떻게 해야 할까?
   서버리스에서 JS 쓰기
   - 서버리스 환경은 JIT은 존재하지만 콜드 스타트 타임이 길어서 레이턴시가 길어지는 게 문제다. (엔진 로드에만 최소 5 ms)
   - 콜드 스타트 타임을 숨기는 최적화 기법들이 있지만, 네트워크 레이어가 좋아질수록(e.g., QUIC) 큰 의미가 없어지고, 또 여러 서버리스 함수를 동시에 실행해도 최적화 기법이 별 쓸모가 없어진다.
   - 인스턴스 재사용으로 콜드 스타트 타임을 피할 수도 있지만, 이는 요청 사이의 상태가 공유된다는 뜻이고 보안 위험이 된다.
   - 이런 것 때문에, 실무에서는 베스트 프랙티스를 따르지 않고 한 서버리스 함수에 많은 내용을 집어넣는 일도 많아지고 있다.
   - 즉 콜드 스타트 문제만 해결되면, 이를 피하기 위한 여러 기법을 쓸 필요도 없고 많은 문제가 해결된다.
   - WASM은 JS를 감싸서 격리하고 있고, WASM 자체의 코드는 짧고 단순해서 감시하기도 쉽고, 보안 리스크도 줄어든다.
   ### JS 엔진은 어디에 시간을 많이 쓰는가
   초기화 페이즈
   - (engine 초기화) 서버리스에 해당. 자기 자신을 준비해야 하고, 빌트인 함수들을 환경에 추가해야 한다. 이게 서버리스의 콜드 스타트가 느린 이유 중 하나다.
   - (application 초기화) 함수를 바이트코드로 파싱, 변수에 메모리 할당, 변수에 값 할당
   런타임 페이즈
   - 이때부터의 throughput은 여러 조건의 영향을 받는다.
   - which language features are used
   - whether the code behaves predictably from the JS engine’s point of view
   - what sort of data structures are used
   - whether the code runs long enough to benefit from the JS engine’s optimizing compiler
   JS 엔진을 빠르게 한다는 건 초기화와 런타임 페이즈 두 개를 빠르게 한다는 것이다. 정확히는, 초기화에 걸리는 시간을 줄이고 런타임에는 쓰루풋, 즉 코드의 처리 속도를 늘린다.
   ### 초기화 시간 줄이기
   - WASM은 Wizer 라는 pre-initializer 를 사용하여 초기화 시간을 줄인다. (작은 앱 기준으로 JS isolate 대비 JS on WASM은 대략 13배 빠르다)
   - 코드를 배포하기 전에 빌드하는 단계에서, pre-initializer는 모든 JS 코드를 한번 초기화 단계까지 실행해본다.
   - 이렇게 하면 JS 엔진의 리니어 메모리에 JS 코드들이 바이트코드로 저장되어 있는 상태이고, 메모리 할당도 끝나있다.
   - 이걸 그대로 복사해서 WASM의 데이터 섹션에 붙인다.
   - JS 엔진이 instantiate될 때는 데이터 섹션의 모든 데이터에 접근할 수 있다. 특정 메모리가 필요하면 데이터 섹션에서 복사해오면 된다. 그래서 스타트 시간이 필요가 없고, 그래서 pre-initialization이라고 부른다.
   - 현재는 JS 엔진과 같은 모듈에 데이터 섹션을 붙여두지만, 미래에는 module linking을 이용하여 데이터 섹션을 별도의 모듈로 만들어, 여러 어플리케이션이 JS 엔진을 공유할 수 있게 할 계획이다.
   - 그리고 사실 이 pre-초기화 테크닉은 JS 엔진에 국한될 필요가 없고 파이썬, 루비, 루아 등 어떤 런타임에도 쓸 수 있는 컨셉이다.
   ### 쓰루풋 늘리기
   - JS 코드가 짧은 시간동안만 실행된다면 어차피 JIT을 거치지 않기 때문에 WASM의 쓰루풋도 브라우저와 같을 것이다. 그러나 길게 실행되는 코드는 JIT의 개입 여부가 야기하는 쓰루풋 차이가 크다.
   - WASM은 JIT을 못 쓰니, 대신 AOT(ahead-of-time) 컴파일을 하되 JIT에서 가져올 수 있는 기법은 가져오는 방식을 취했다.
   - JIT의 최적화 기법 중 하나가 인라인 캐싱이다. 과거에 실행된 코드 조각을 유지해뒀다가 재사용하는 것.
   - WASM에서는 JS에서 자주 사용하는 패턴을 stub으로 만들어놓았다. 예를 들어 오브젝트 프로퍼티에 접근하기.
   - 원래 오브젝트 프로퍼티 접근을 제대로 하려면 shape와 offset 정보가 필요한데, 이것들은 AOT로 알 수 없다.
   - 그러나 shape와 offset을 파라미터로 해서 프로퍼티에 접근하는 stub은 미리 만들어둘 수 있다. 이 stub 코드는 여러 군데서 재사용 가능하다.
   - WASM은 이러한 common patterns를 다 stub으로 만들어둔다. 이건 JS 코드가 실제로 어떻게 생겼냐랑은 상관없다. 이를 통해 JS 엔진이 만들 머신코드가 줄고, 초기화 시간도 줄고, 캐시 로컬리티도 좋아지게 할 수 있다.
   - 이러한 stub을 2kb만 준비해놔도, 실제 JS 코드의 95% 정도는 커버할 수 있음이 확인되었다.
   - 이런 기법은 ahead-of-time, 즉 코드 내용을 모르는 채(프로파일링 없이) 최적화하는 것이므로, 프로파일링을 더 한다면 JIT처럼 더 최적화할 여지가 있을 것이다.
   - 그런데 프로파일링 자체가 쉬운 게 아니라서 노력하는 중이다.

   JIT의 보안 이슈 관련해서는 예전에 여기에 소개되었던 MS Edge 팀의 블로그 글에 관련 내용이 언급된 바가 있습니다. 기본적으로 JIT 엔진은 복잡하기 때문에 공격 표면이 늘어날 뿐더러, JIT에서 성능 향상을 위해 적용하는 투기적 최적화(Speculative Optimization)와 같은 방법이 특정 패턴의 보안 문제를 반복적으로 발생시키는 경향이 있는 모양입니다. 이 때문에 웹 브라우저의 보안 결함 중 JIT 관련 보안 결함의 비율이 상당히 높다고 합니다.
   https://news.hada.io/topic?id=4771
   https://microsoftedge.github.io/edgevr/posts/Super-Duper-Secure-Mode/
   https://docs.google.com/spreadsheets/d/…

   오 감사합니다! 정작 긱뉴스를 안찾아봤었네요
"
"https://news.hada.io/topic?id=5168","코드와 어셈블리를 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              코드와 어셈블리를 비교

   각 코드와 어셈블리를 라인별로 구분 해주고 연동됩니다
   - https://godbolt.org/z/v9ovn74xs
   컴파일 옵션과 다양한 언어를 지원하기 때문에 최적화할 때 쓰면 좋을것 같습니다.
   루비, 자바, 파이썬, 하스켈처럼 고수준의 언어도 지원해요.
   [똑같은 어셈블리를 만들기위한 예]
   - C++: https://godbolt.org/z/v9d5jdYaP
   - 러스트: https://godbolt.org/z/vaM5rjnGd
   (PC로 보는 것을 권장합니다)
"
"https://news.hada.io/topic?id=5184","YoHa - 실용적인 핸드 트래킹 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         YoHa - 실용적인 핸드 트래킹 엔진

   ""YOur HAnd tracking""
   - 어플리케이션에 핸드 트래킹을 이용한 인터랙션을 추가할 때 사용
   - 웹캠만으로 동작
   - 실시간 수준의 고성능
   - 그림 그리기 등에 사용 가능한 수준의 높은 정확도 제공
   - 특정 포즈 인식 (핀치/피스트)
   - 잘 문서화된 TypeScript API
   - TensorFlow.js 와 자체 데이터셋으로 훈련시킨 커스텀 신경망 사용

   페이지에 인트로 영상이 모든걸 다 말해주네요.
   오픈소스도 홍보와 첫인상이 확실히 중요한 듯
   - 구글, iOS/Android 에서 실시간 손(Hand) 트래킹 가능한 오픈소스 공개 https://news.hada.io/topic?id=387
   - Handsfree.js - 웹에서 얼굴/손/포즈 인식을 쉽게 https://news.hada.io/topic?id=4409
"
"https://news.hada.io/topic?id=5097","2021년, 엔터테인먼트 업의 본질은 무엇일까요? (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2021년, 엔터테인먼트 업의 본질은 무엇일까요? (번역)

   본질적으로 ‘엔터테인먼트 사업’이란 다음의 세 가지로 정의됨
   #1. 스토리 – 스토리를 만들고 전하는 것
   #2. 사랑 – 그 스토리를 사랑하게 만드는 것
   #3. 수익화 – 그 사랑을 수익화하는 것
   그리고 이걸 잘 배울 수 있는 방법은, 디즈니를 살펴보는 것
   // 디즈니는 업계를 선도합니다. 1-2-3 모두 최고이기 때문입니다.
   // 가장 큰 열쇠는 팬덤과 사랑
   // 하지만 사랑은 변해요. 언제나 그렇듯.
   ㅤ→ 사랑의 첫 번째 변화 – 새로운 개척지, 게임
   ㅤ→ 사랑의 두 번째 변화 – 궁극의 개척지, 트랜스 미디어
   // 그래서 이게 왜 그렇게 중요한 걸까요?
   ""엔터테인먼트와 IP 산업은 훌륭한 스토리(#1), 팬덤의 사랑(#2), 수익화(#3)의 루프로 움직입니다. 이를 가장 잘하고, 가장 많이 하는 쪽이 이길 겁니다. 당연하게도, 그건 점점 더 어려워지고 있습니다.""

   오호~ 제가 비록 엔터업계를 떠나긴 했지만, 여전히 관심있고, 다른 업종과의 시너지를 모색중이라~~ 좋은 내용이네요~~
"
"https://news.hada.io/topic?id=5081","Elk - 임베디드 시스템을 위한 초소형 JS엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Elk - 임베디드 시스템을 위한 초소형 JS엔진

   - ES6의 주요 서브셋을 구현한 임베더블 JS 엔진
   ㅤ→ 마이크로컨트롤러 개발용으로 설계 : C/C++ 대신 JS로 펌웨어 코드 작성
   ㅤ→ 또는 제품 개인화를 위해 고객에게 안전하고 보호된 스크립팅 환경 제공
   - 크로스플랫폼 : 8~64bit
   - 의존성 없음 : ISO C/C++ 컴파일러만으로 빌드가능
   - elk.c 와 elk.h 두개만 코드에 첨부하면 임베딩 완료
   - 작고 간단한 임베딩 API
   - JavaScript 에서 Native C/C++ 호출 가능. 반대도 지원
   - malloc 사용하지 않음. 주어진 메모리 버퍼만으로 동작
   - 작은 footprint : 플래시/디스크에 20KB, 코어VM용으로 100byte 정도
   - Bytecode 없음. JS코드를 직접 인터프리팅
"
"https://news.hada.io/topic?id=5068","데이터 사이언티스트를 위한 효율적인 파이썬 코딩 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     데이터 사이언티스트를 위한 효율적인 파이썬 코딩 가이드

   1. for 문에선 tqdm 사용
   2. 함수 작성시엔 type hinting 쓰기
   3. 인자 갯수 모르는 함수엔 args & kwargs
   4. pre-commmit 훅 사용하기
   5. 상수 저장엔 .yml 사용
   6. 유용한 VS-Code 확장들
   ㅤ→ Bracket Pair Colorizer : 매칭 꺽쇠 컬러링
   ㅤ→ Path Intellisense : 파일이름 자동완성
   ㅤ→ Python Dockstring Generator : 파이썬 함수 Docstring 생성
   ㅤ→ Python Indent - 멀티라인에 적절한 자동 들여쓰기 지원
   ㅤ→ Python Type Hint - 함수 작성시 힌트 자동완성
   ㅤ→ TODO tree : 모든 TODO를 한곳에서 관리
   ㅤ→ Pylance - 코드 자동완성, 인자 추천 등 코딩을 빠르게 해주는 다양한 것들
"
"https://news.hada.io/topic?id=5164","Tech Worker Handbook - 기술 노동자 핸드북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Tech Worker Handbook - 기술 노동자 핸드북

   ""Preparedness is Power - 준비가 힘이다""
   - 기술업계의 내부 고발자(Whistleblower)들을 위한 법률/미디어/보안/스토리 핸드북
   - 내부 고발의 경우, 회사는 법률/미디어/보안 전담 부서도 있고 무제한의 외부 지원을 받을 수 있는 자원도 있지만, 개인이 ""고용주의 의사에 반하는 공익을 위한 정보 공유""를 하고자 할 때 그런 지원을 받을수 없어서 위협이 됨
   ㅤ→ 그래서 법률/미디어/보안/스토리 총 4가지 항목에 대해서 개인이 준비하고 도움 받을수 있는 부분들을 정리
   - 핀터레스트의 인종 및 임금 차별을 내부 고발했던 Ifeoma Ozoma가 설립한 Earthseed 재단이 주도하여 작성

   페이스북이 이번에 Frances Haugen의 내부고발로 ""도덕적 파산""을 했다고 얘기되고 있는데요.
   - WSJ의 Facebook Files https://www.wsj.com/articles/the-facebook-files-11631713039
   “페이스북은 세상을 더 좋게 만들 생각이 없습니다. 페이스북은 사람보다 돈이 앞서는 회사입니다. 어린이에게 해롭고 분열을 조장하며 민주주의를 약화시킵니다. 도덕적으로 파산했습니다. 회사의 지도부는 페이스북과 인스타그램을 더 안전하게 만드는 방법을 알지만 개선할 생각이 없습니다.”
   (이슈가 너무 길고 해서 정리된 글이 있으면 좋겠는데.. 긱뉴스에 공유할 만한 한국어 문서가 안보이네요. )
   이와 관련해서 이 핸드북도 같이 얘기되고 있어서 공유해 봅니다.
   이 핸드북 전체가 CC BY-SA 여서 한글화 되면 좋을거 같기는 합니다만, 슬쩍 둘러봐도 양이 상당하기도 하고 로컬라이즈 해야할 부분이 많이 있을 것 같네요.

   뉴스페퍼민트에 청문회 발언 번역은 있어서 덧붙입니자.
   https://newspeppermint.com/2021/10/06/fanceshaugen/
"
"https://news.hada.io/topic?id=5187","MS와 Nvidia가 세계 최대규모 언어 모델 MT-NLG 530B를 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               MS와 Nvidia가 세계 최대규모 언어 모델 MT-NLG 530B를 발표

   - Megatron-Turing Natural Language Generation
   - GPT-3의 1750억개보다 큰 5300억개의 파라미터
   - 기존과 비교되지 않는 정확도를 보임
   ㅤ→ 문장 완성, 이해력, 상식적인 추론, 자연어 추론 등
   - 105개 레이어, 트랜스포머 기반
   - NVIDIA A100 Tensor Core GPU & HDR InifiniBand 네트워킹
   - 슈퍼컴퓨팅 클러스터인 NVIDIA Selene 와 Microsoft Azure NDv4
"
"https://news.hada.io/topic?id=5108","Hacktoberfest 2021 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Hacktoberfest 2021 시작

   - 디지털오션이 매년 10/1 ~ 10/31 동안 진행하는 오픈소스 참여 이벤트
   - 참가한(Opted-in) GitHub/GitLab의 Repo에 PR보내서 참여 가능
   - 첫 5만명 까지 티셔츠 제공
   - 추구하는 가치
   ㅤ→ Everyone is welcome
   ㅤ→ Quantity is fun, quality is key
   ㅤ→ Short-term action, long-term impact

   - Hacktoberfest 2020 시작 https://news.hada.io/topic?id=2946
   - 왜 Hacktoberfest 스팸은 대부분 인도에서 올까 https://news.hada.io/topic?id=2961
   - Hacktoberfest로 인한 스팸 PR 사태 정리 https://news.hada.io/topic?id=2950
"
"https://news.hada.io/topic?id=5070","NSA,CIA등도 Ad Blocker 사용중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        NSA,CIA등도 Ad Blocker 사용중

   - ""온라인 광고는 보안상 위험하기 때문""
   ㅤ→ 악의적인 광고를 이용해서 정보를 훔치고, 중요한 데이터를 지우고, 원격에서 마이크를 제어하여 대화를 녹음할 수 있음
   ㅤ→ 또한 온라인 광고회사들이 사용자로부터 다양한 정보를 수집하고 이걸 다른 나라(중국,러시아)에 판매하고 있음
   - CISA,NSA 가 Ad-Blocking 정책을 만들고 베스트 프랙티스를 추천
   ㅤ→ 미국 정보공동체(IC) : NSA,CIA,FBI,DEA,DHS 및 DoD 산하 단체들의 일부를 포함
   ㅤ→ 네트웍 기반의 Ad-Blocking 기술을 구현 (DNS 및 여러단계의 정보를 이용해서 악성 광고 콘텐츠를 차단)
   - OMB(미국 관리 예산실)은 Federal Zero Trust Strategy 초안을 발표

   일반 적인 Ad-Blocker 방식이 아니라 아예 네트워크 단에서 원천 차단하는 방식이군요.

   전 광고차단기는 안쓰는 쪽이긴 합니다. 광고를 봐줘야 사이트들도 돌아갈테고..
   너무 심한 광고가 붙은 사이트는 안가면 그만이라고 생각하는 쪽이에요.
   (물론, 긱뉴스는 광고 안붙이고 계속 운영할테니 걱정 안하셔도 됩니다.)
"
"https://news.hada.io/topic?id=5180","builtin으로 파이썬의 모든 것을 이해하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       builtin으로 파이썬의 모든 것을 이해하기

   - builtins 모듈에 있는 내장 객체들을 하나씩 설명하는 방식으로, 파이썬을 이해하도록 구성한 글
   - L.E.G.B. Scope 룰 이란
   - dir(__builtins__)
   ㅤ→ 66개의 내장 Exception 클래스들
   ㅤ→ 5개의 상수 : True, False, None, Ellipsis, NotImplemented
   ㅤ→ 전역 변수 : __spec__ , __loader__ , __debug__등
   ㅤ→ compile, exec, val : 코드 작동 방식
   ㅤ→ globals and locals : 모든 것이 저장되는 곳
   ㅤ→ input and print : 빵과 버터
   ㅤ→ str, bytes, int, bool, float and complex: 5개의 Primitives
   ㅤ→ object: 모든것의 기초
   ㅤ→ type: 클래스 팩토리
   ㅤ→ hash and id: equality 의 기본
   ㅤ→ dir and vars: 모든 것이 dictionary
   ㅤ→ hasattr, getattr, setattr and delattr: 속성 도우미
   ㅤ→ super: 상속의 힘
   ㅤ→ property, classmethod and staticmethod: 메소드 데코레이터
   ㅤ→ list, tuple, dict, set and frozenset: 컨테이너들
   ㅤ→ bytearray and memoryview: 더 좋은 Byte 인터페이스
   ㅤ→ bin, hex, oct, ord, chr and ascii: 기초 변환
   ㅤ→ format: 쉬운 텍스트 변환
   ㅤ→ any and all
   ㅤ→ abs, divmod, pow and round: 수학의 기초
   ㅤ→ isinstance and issubclass: 런타입 타입 체킹
   ㅤ→ callable and duck typing basics
   ㅤ→ sorted and reversed: 시퀀스 변경
   ㅤ→ map and filter: Functional primitives
   ㅤ→ len, max, min and sum: Aggregate 함수들
   ㅤ→ iter and next: 고급 iteration
   ㅤ→ range, enumerate and zip: 편리한 iteration
   ㅤ→ slice
   ㅤ→ breakpoint: 내장 디버깅
   ㅤ→ open: File I/O
   ㅤ→ repr: 개발자 편의성
   ㅤ→ help, exit and quit: site builtins
   ㅤ→ copyright, credits, license: 또 다른 site builtins

   파이썬을 내부에서부터 이해시키는데 설명이 쉽고 깔끔한, 굉장히 독특한 글이네요.
"
"https://news.hada.io/topic?id=5133","윈도우 11 리뷰 : 윈도우 10의 불필요한 대체품","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      윈도우 11 리뷰 : 윈도우 10의 불필요한 대체품

   - 윈도우 11은 몇개 좋은 아이디어가 있지만, MS가 윈도우에 ""합당한 이유 없이"" 근본적인 변화를 준 것 같다
   - 장점
   ㅤ→ 신선한 UI
   ㅤ→ 초기 설치가 깔끔
   ㅤ→ 설정(Settings) 메뉴가 유용
   ㅤ→ 스토어 개편이 훌륭
   ㅤ→ Snap View로 윈도우 관리가 편해졌음
   ㅤ→ Widget이 아마도 당신이 원했던 정보를 제공할 것
   - 단점
   ㅤ→ 태스크 바와 스타트 버튼 변경이 사용자에게 그다지 도움이 되지 않음
   ㅤ→ Teams Chat은 불필요하고, 방해됨
   ㅤ→ 로컬 ""오프라인"" 계정을 사용하려면 ""윈도우 11 프로""가 필요함
   ㅤ→ 다른 브라우저 설치 및 사용이 매우 불편
   ㅤ→ TPM 문제(없으면 설치가 어려움)
   - 총평
   ㅤ→ 개선된 기능과 불필요한 변경이 혼합
   ㅤ→ 시간에 지나면서 개선되겠지만, 현재로선 많은 사용자들이 포기하고 싶을 정도로 매우 양극화된 업그레이드

   wsl gui지원 하나만으로 너무 좋습니다 :)

   파일 검색이나 잘 되었으면 좋겠네요. 그거 하나 바라네요.

   장점은 다 맞는 것 같군요. 제 경우에는 단점은 TPM 하나인것 같군요. 시작메뉴는 Launchy 써서 원래 안썼고, 팀챗은 삭제하면 될듯. 엣지에서 변경 어렵게 만든건 좀 심하긴 하더군요

   태블릿에서는 몇가지 흥미로운 점이 있지만, 그 외에는 잘 모르겠습니다. 사실 테스크바는 그냥 윈10에서 제공해주던 UX에서 왜 바뀌었는지 이해가 안 됩니다. 뭘 하고 싶었던 걸까요?

   유구한 역사와 전통의 MS 틱톡 법칙대로, 이번에도 걸러야하는 버전 같네요
   95/98 - ME
   XP - Vista
   7 - 8
   10 - 11

   Teams Chat는 단축키도 부여되어 있습니다. 윈도우+C를 누르면 Teams 화면이 나옵니다.

   아.. 윈도우+C 면 너무 심하긴 하네요.
   윈도우 단축키에는 좀 더 생산성에 좋은 기능을 연결하는데 써줄법 한데요.
   예를 들어 ""포맷 제거하고 클립보드로 복사하기"" 같은..

   - MS Windows 11 발표 https://news.hada.io/topic?id=4498
   - Windows 11이 개발자에게 의미하는 것 https://news.hada.io/topic?id=4499
   - TPM 및 SecureBoot 없이 윈도우11 설치하기 https://news.hada.io/topic?id=4544
   - 윈도우 11 Pro 버전만 로컬계정으로 설치 가능 https://news.hada.io/topic?id=4553
"
"https://news.hada.io/topic?id=5178","스타트업 부트스트래핑 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            스타트업 부트스트래핑 가이드

   - 온라인 Form 기능만으로 1천만 사용자를 가진 Jotform의 CEO가 15년간의 경험을 정리
   #1 Story of Jotform
   #2 다른 길 - 영혼을 투자자에게 팔기 싫은 기업가들을 위한 팁
   #3 Sink or Swim - 부트스트래핑이 당신을 더 나은 기업가로 만든다
   #4 부트스트래핑 vs. VC펀딩 - 어떤게 당신에게 더 좋을까? 장점과 단점
   #5 현재 일을 그만둘까 말까
   ㅤ→ 아직 그만두지 말 것 : 성공적인 스타트업의 발판 만들기
   ㅤ→ 사이드 프로젝트를 만들고, 제국을 건설하기
   ㅤ→ entrepreneurship vs. “employee-ship”
   #6 창업자의 필수 스킬 6가지
   ㅤ→ 1. 더 나은 생각을 하는 사람이 되기
   ㅤ→ 2. 카리스마 키우기
   ㅤ→ 3. 무엇이든 파는 법 배우기
   ㅤ→ 4. 질문하는 기술 마스터 하기
   ㅤ→ 5. 상대하기 어려운 사람에게서 원하는 것 얻기
   ㅤ→ 6. ""올바른 방식""으로 ""동의하지 않는 방법"" 배우기
   #7 아이디어 : 문제를 솔루션으로 만들기
   ㅤ→ 열정으로 시간을 낭비하지 말기
   ㅤ→ 가려운데를 긁으면 성공은 따라 올 것
   ㅤ→ 차세대 페이스북/아마존을 발명하려고 하지 말 것
   ㅤ→ 새로운 빅 아이디어를 찾을 수 있는 4곳 : 인구통계학적 변화/인식의 변화/부적절해보이는 것/예상치 못한 실패와 성공
   #8 1인 창업 vs. 공동창업 의 길 : 공동창업자가 필요없는 이유
   #9 스타트업의 초기 트랙션 : 어떻게 처음 1000명의 사용자를 모을까
   #10 1000명을 넘어서 : 고객 중심 비즈니스
   ㅤ→ (경쟁이 아닌) 고객에 집중함으로써 매년 100만명의 신규사용자를 모집한 방법
   ㅤ→ Hater를 팬으로, 팬을 브랜드 홍보대사로 만드는 방법
   ㅤ→ 고객 리텐션 전략 수립 방법
   #11 마케팅 & Growth 기초
   ㅤ→ 고객이 생각하는 방식을 방해하지 말 것 : 말한 것을 실천할 것(Walk you talk)
   ㅤ→ 당신의 브랜드는 당신이 생각하는 것이 아님 : 고객 행복 및 기타 혼란스러운 지표들 측정 방법
   ㅤ→ 왜 고객 서비스는 새로운 마케팅인가
   #12 5백만명 사용자 마일스톤 : 그동안 배운 5가지 교훈
   ㅤ→ 1. 고객에 집중(경쟁이 아니라)
   ㅤ→ 2. 야심찬 기업은 야심찬 사람들을 끌어들인다
   ㅤ→ 3. 기하급수적인 결과를 위한 생산성 향상 하기
   ㅤ→ 4. 서둘러 고용하거나 해고하지 말 것
   ㅤ→ 5. 다운타임(휴식시간)을 보호 할 것
   #13 제품 개발과 런칭
   #14 모든 사람이 지켜 볼 때 런칭하는 방법
   ㅤ→ 그냥 Ship 하지 말 것 : 새로운 아이디어를 3년간 작업한 이유
   #15 혁신의 예술
   ㅤ→ 정신 잃지 않고 전력 질주 하기 : 해킹 주간이 혁신과 창의성을 장려하는 방법
   ㅤ→ 적합성은 혁신을 죽임 : 회사내의 검은 양을 포용할 것
   ㅤ→ 회사는 좋은 아이디어가 고갈나지 않음 - 단지 간과할 뿐
   #16 팀 성장시키기
   ㅤ→ 늦게 채용하고, 늦게 성장하기 : 우리가 1에서 300명 직원이 된 방법
   ㅤ→ 더 적게해서 더 크게 성공하기 : 위임(Delegation)의 예술
   ㅤ→ 효율이 아닌 생산성에 집중할 것
   #17 문화의 힘
   ㅤ→ 놀라운 사람들을 끌어당기고 채용하는 방법
   ㅤ→ 핑퐁 테이블을 넘어 : 진부한 것들을 피해서, 사랑하는 팀을 구성하는 방법
   #18 스타를 붙잡기
   ㅤ→ ""job-hopping"" 은 근거 없음. 최고의 직원을 붙잡는 방법
   ㅤ→ 스타 직원의 5가지 자질 : 훌륭한 사람을 식별하고, 육성하고, 유지하는 방법
   ㅤㅤ훌륭한 태도 / 남다른 기술과 능력 / 높은 목표를 향한 자신감 / 성장을 위한 추진력 / 강력한 커뮤니케이션 능력
   ㅤ→ 직장에서 독성을 가진(toxic) 직원들의 진실
   #19 팀 생산성 부스팅하기
   ㅤ→ 팀 빌딩 Exercise들이 직원들의 생산성을 향상시키지 못하는 이유
   ㅤ→ 생산적인 일터 뒤에 숨겨진 진실
   ㅤ→ 300+명의 직원이 생산성, 동기 부여 및 행복을 유지 하는 방법
   #20 결론 : 산만하지 않은 기업가의 6가지 원칙
   ㅤ→ 1. 리더를 따르지 않는다.
   ㅤ→ 2. 잠재 고객이 아닌 실제 사람에 집착(fixate)
   ㅤ→ 3. 자신만의 동기(motivation) 만들기
   ㅤ→ 4. 잡초에 걸리지 않기
   ㅤ→ 5. 주의를 산만하게 하는 요소를 제거할 수는 없지만, 관리할 수는 있음
   ㅤ→ 6. 항상 몇 번이라도, 기본으로 돌아갈 것
"
"https://news.hada.io/topic?id=5163","Copilot 의 Intellij 플러그인 Preview 시작됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Copilot 의 Intellij 플러그인 Preview 시작됨

   Copilot preview 에 등록된 분은 별도로 플러그인을 설치하면 사용 가능합니다.
   플러그인 설치 방법은 Copilot 등록된 후, https://github.com/github/copilot-preview/discussions/1173 에서 확인할 수 있습니다.
   현재 IntelliJ Idea 및 PyCharm 에서만 동작이 확인되었다고 하고, 다른 IntelliJ 기반 IDE는 추가적으로 작업이 될 것이라고 합니다.
"
"https://news.hada.io/topic?id=5118","Windows 11 WSL2 Ubuntu 성능 벤치마크 - 베어메탈에 설치된 Ubuntu와 견줄만한 성능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Windows 11 WSL2 Ubuntu 성능 벤치마크 - 베어메탈에 설치된 Ubuntu와 견줄만한 성능

   최신 인사이더 버전의 Windows 11 의 WSL2에 설치된 Ubuntu와, 베어메탈에 설치된 Ubuntu 를 벤치마크 테스트하여 성능을 비교한 글 입니다. 물론 베어메탈에 설치된 것이 성능이 더 좋습니다만, WSL2가 나름 베어메탈에 설치된 Ubuntu 성능에 견줄만한 성능을 보여주는군요.
   같은 CPU로 테스트 되었지만 세부 하드웨어 구성이나 소프트웨어 구성 차이가 좀 있어 감안하고 보면 좋을 것 같네요.

   WSL2 HyperV 위에서 돌아가죠

   댓글은 nginx 성능이 WSL2가 유난히 높아서 말도 안된다는 소리가 많네요.
   그러게요. 왜 빠르지...
"
"https://news.hada.io/topic?id=5077","Delphi / C++ Builder / RAD Studio 11 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Delphi / C++ Builder / RAD Studio 11 릴리즈

   - High-DPI 지원 (4K+)
   - 멀티모니터/멀티윈도우 향상
   - 디자인시에 VCL 스타일 지원
   - 윈도우 11 지원
   - Android API 30, Google Play V3 지원
   - 맥 M1 및 유니버설 패키지 지원
   - Remote Desktop 지원 향상 : 맥/윈 원격 디버깅

   지금은 없어진 이름 볼랜드 델파이. 오랜만에 들어보는 친숙한 이름이네요.
   90년 중반 볼랜드 터보C 쓰다 알바비 모아 C++ 빌더 처음 정품으로 사서 썼었던 기억이 새록 새록하네요.
   델파이나 C++빌더가 가 아직 꾸준히 쓰이나 보네요. C++빌더는 VS에 밀려서 정리된 줄 알았네요.
   반가운 소식 고맙습니다~

   20년도 전에.. 제가 정말 좋아했던 툴이 Delphi 인데 꾸준히 나오고 있습니다.
   이제는 윈/맥/리눅스/안드로이드/iOS 를 다 지원하는 크로스플랫폼 개발도구가 되었고요.
   근데, 기능만큼 가격이 계속 올라가고 있다고 해서..
   Delphi 호환 오픈소스인 Lazarus 를 추천하기도 합니다.
   https://www.lazarus-ide.org/
"
"https://news.hada.io/topic?id=5131","Ask GN: 이달의 구인공고 - 멤버를 찾고 계신가요 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask GN: 이달의 구인공고 - 멤버를 찾고 계신가요 ?

   현재 근무중인 스타트업에서 같이 일할 멤버를 찾고 계시다면
   회사 소개 / JD / 위치 / 리모트 가능 여부 / 연락방법(이메일,웹사이트) 등을 적어주세요.
   ""멤버가 직접 1개의 댓글로 홍보를 작성""하시면 됩니다. (서치펌 등은 불가)
   이 글은 매월 첫번째 월요일에 고정적으로 등록됩니다.
   해당 회사의 공고에 관심있으시면 기재된 메일등으로 연락하시기 바랍니다.
   작성 예)
   하다 | 프론트엔드 개발자, 디자이너 | 서울 역삼 | Remote 가능 | https://hada.io | jobs@hada.io
   하다는 긱뉴스를 개발 및 운영하는 스타트업 입니다. 저희는 이러 저러 해서 엄청 좋은 회사입니다~~
   [1] 프론트엔드 개발자 JD : 내용 또는 URL
   [2] 디자이너 JD : 내용 또는 URL

   💎 AB180(에이비일팔공) | 소프트웨어 엔지니어 | 서울 서초(사당역 1분) | https://abit.ly/ab180-hiring-at-geeknews | hr@ab180.co
   🎉에어브릿지가 페이스북 공식 비즈니스 파트너가 되었어요. 🎉
   모바일 측정(MMP)과 멀티터치 기여도 분석(MTA) 파트너로 동시 선정된건 ""세계 최초"", MMP 파트너는 ""세계 6번째""에요!
   덕분에 더 많은 분들을 모실 수 있게 되었어요ㅎㅎ
   유니콘부터 대기업까지 쓰는 제품을 만들며 함께 성장해요 —
   초당 10만 건의 트래픽 처리, 월 2,000만 MAU, 월 100억 이벤트 수집 및 분석, 실시간 대규모 데이터 분석 및 성과 극대화를 위한 머신러닝을 경험하실 수 있어요.
   AB180에서는 '에어브릿지'라는, 웹과 앱에서의 사용자 행동을 분석하고 마케팅 성과를 측정해서 더 좋은 퍼포먼스를 낼 수 있도록 돕는 도구를 만들고 있어요. GS SHOP, KB증권, 버거킹, 다노, 펫프렌즈 등 많은 기업들에서 저희의 제품을 사용하고 있어요.
   - 에어브릿지 → https://airbridge.io
   - 기술 블로그 → https://engineering.ab180.co
   - 페이스북 비즈니스 파트너 선정 안내 → https://blog.ab180.co/posts/…
   저희에 대해 궁금하시다면 아래의 공고를 확인해주세요 :)
   [1] Software Engineer - Backend (Junior) : https://abit.ly/ab180-backend-junior-gn
   [2] Software Engineer - Backend (Senior) : https://abit.ly/ab180-backend-senior-gn
   [3] Software Engineer - Data (Senior) : https://abit.ly/ab180-data-senior-gn
   [4] Software Engineer - Database Engine : https://abit.ly/ab180-dbe-gn

   인크리멘탈리티 분석에 관한 설명과 함께 페이스북 비즈니스 파트너 선정 소식을 긱뉴스에도 올릴까 했지만... 너무 회사 홍보같아서 우선 여기에만 올려요!
   + 괜찮으시면 그때 업로드할게요 😉

   네이버 | Tune CIC > NOW Data Engineer | 경기도 분당 | Remote 가능 | https://www.naver-monthlyopening.com/#category-tune-be-5 | jinpil.chung@navercorp.com
   안녕하세요.
   네이버 Tune CIC에서 NOW 서비스의 Data Engineer를 찾고 있습니다.
   상세한 Job Description은 아래 채용 공고를 참고 바랄게요~!
   https://www.naver-monthlyopening.com/#category-tune-be-5
   Data Engineering 업무는 물론 서비스의 성장을 위해 데이터가 흐르는 조직을 만들기 위한 다양한 실험들을 함께 하실 동료를 모십니다~!
   Data Engineering 경험자 환영하고요! Back-end 개발자에서 Data Engineer로의 Career 전환을 고려하시는 분들도 적극 환영합니다.
   서비스, 조직에 대한 궁금증이나 채용 포지션에 대해 궁금한 점 있으시면 언제든 편하게 아래 이메일로 연락 부탁드립니다. 가능한 빠르게 회신드리도록 할게요!
   email : jinpil.chung@navercorp.com
   p.s 혹 스타트업 구인만 올려야 하는 것이면 확인 후 삭제하도록 하겠습니다^^;

   아닙니다 큰 회사도 문제없습니다. 다만 회사가 커서 다른 조직이 올린다면 좀 그렇긴 하겠습니다만.. 현재로선 괜찮습니다. ㅎㅎ
"
"https://news.hada.io/topic?id=5177","ScummVM 20주년","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ScummVM 20주년

   ""Script Creation Utility for Maniac Mansion Virtual Machine""
   - SCUMM은 루카스아츠가 1987년 고전 어드벤처 게임인 ""매니악 맨션""을 만들면서 개발한 게임 엔진 및 개발 언어
   ㅤ→ 10여년간 사용되면서 룸, 인디아나존스, 원숭이섬의 비밀 등 다양한 게임이 이 기반으로 출시 되었고, 이걸 현대의 하드웨어에서 돌릴 수 있도록 만든 게 ScummVM
   ㅤ→ 그동안 많은 발전을 거치면서 대부분의 고전 어드벤처/롤플레잉 게임들을 지원하는 엔진이 되었음
   - DOSBOX등 하드웨어 및 OS를 에뮬레이트하는 엔진들과는 약간 달리, 게임을 직접 실행하는 방식이어서 자원을 적게 쓰고 성능이 빠름
   ㅤ→ 윈/맥/리눅스/iOS/Android 등 다양한 플랫폼 지원
   - 20주년을 맞아 2.5.0 버전 출시
   ㅤ→ 18년간 별도로 개발되던 자매 프로젝트인 ResidualVM과 합병을 발표. Grim Fandango, Myst 3, The Longest Journey 등이 지원 가능해짐
   ㅤ→ 그 외에 새로 추가된 게임들 : Little Big Adventure, Transylvania, The Journeyman Project 2, Crusader: No Remorse
   ㅤ→ GUI 완전히 개선. UTF-32로 변경되고, 한국어 지원이 추가됨
   ㅤ→ scummkor 프로젝트를 통해서 다양한 한국어 팬 번역이 추가 : Castle of Dr. Brain, EcoQuest 1, Gabriel Knight 1, King’s Quest 1/5/6, Laura Bow 2, Space Quest 4

   저 LBA 랑 Crusader 굉장히 좋아했는데 다시 보니 반갑네요.
   Crusader는 Ultima 시리즈의 제작사 Origin Systems가 만든 액션게임입니다.
   찾아보니 마침 GOG 에서 둘 다 할인하고 있네요. ScummVM이 지원한다는거 알고 한걸까요 ㅎ
   https://www.gog.com/game/crusader_no_remorse $1.49
   https://www.gog.com/game/little_big_adventure $2.39
   (GOG 버전은 DOSBOX로 실행됩니다)
"
"https://news.hada.io/topic?id=5082","Ask GN: 이직할 때 어떻게 회사를 고르시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 이직할 때 어떻게 회사를 고르시나요?

   사람마다 전혀 다른 답변이 나올 것 같아서 Ask 하게 되었습니다.
   - 중요하게 생각하는 기준들과 각 기준에 대한 가중치
   - 회사 정보를 찾아보는 경로
   - 효과를 본 방식, 실패한 방식
   - etc
   에 대해서 얘기를 나눠보면 좋을 것 같습니다.

   생각보다 연봉에 대해서 회의적인 분이 많으시네요... 저같은 경우는 5년차까지 거의 동결에 가까운 인상율로 다니다가 이직 할 때 뻥튀기한 기억에 연봉도 무시못하게 됐어요.
   그 전까지는 도메인에대한 재미와 사람관의 관계만 추구했는데...

   좀 다른 질문인데, 이직하실 때 미리 연봉에 대한 얘기를 어느정도 해 두고 면접에 들어가시나요? 아니면 면접을 다 본 후 처우협상할 때 얘기를 꺼내나요?
   전자의 경우는 언제 말을 누구에게 하면 좋을지 애매하고, 후자의 경우엔 만약 처우협상까지 갔는데 못맞춰준다 하면 너무 스트레스일 것 같아요.

   아이고 고생하셨어요. 저도 놓치지 않겠습니다 ㅎㅎㅎ

   이 회사가 얼마나 린하게 업무 처리 하냐를 최고 기준으로 봅니다

   전 사실 회사를 고를 때 그냥 가보고 느낌이 괜찮으면 그다지 고르지는 않았습니다.
   개인적으로 사회에 나올 때 즈음에, 누구든 언젠가는 창업을 해야 하는 시점이 온다고 생각했고, 그렇다면 큰, 좋은 회사보다 내가 창업할 회사와 비슷한 모습을 하고 있는 회사를 겪어 보는 게 필요할 거라고 생각했어요.
   그리고 그게 얼마 안되는 급여로 돌아올지라도, 가능성이 높은 내 미래 중 하나일 것이고 그 상황에서 사는 게 큰 문제인지 어떤지도 알고 싶었고요.
   그래서 마치 회사 다니기를 처음보는 사람을 만나서 이야기하는 것과 비슷하게, 너무 이상하지만 않으면 그냥 다녔습니다. 그게 일종의 나에게 준비된 운명 같은 느낌도 들어서 재밌었어요.
   요즘 분위기를 보면 뭐 하나 제대로 갖추어져 있지 않으면 엄청 뒤떨어진 회사로 치부하는 경향이 있습니다만, 개인적인 경험을 비추어 보면 그런 하나하나의 조건들은 결국 그 회사가, 그 회사가 속한 산업이 그걸 할 수 있게 허락되었는지에 달려있을 가능성이 매우 높습니다. 대학때 학점 잘 맞은 친구들이 적지 않았듯 회사들도 나름 괜찮은 경우가 많습니다. 유명하지 않고 급여가 높지 않고 멋진 에이스가 없고 그럴 뿐이죠.
   고액 연봉을 받지 못한다고 살 수조차 없는 것은 아니지 않습니까. 사는 지역이 좀 달라지거나 좀 고단한 일이 생길지언정 다들 잘 살아갑니다.
   그럼에도 불구하고, ""나""의 미래를 위해서 ""회사""를 고르는 기준을 세운다면 이럴 것 같네요.
   1. 내가 되고 싶은 롤이 될 수 있는 회사 (가중치 40%)
   마치 내가 iOS개발자로 전향하고 싶어서 앱 개발사를 찾는 것과 비슷하게, 다음 이직시에는 PM롤을 해 보고 싶어서, 혹은 아키텍트가 되고 싶어서 회사를 찾을 수가 있겠지요. 이건 마치 대학 간판보다 학과를 먼저 고르는 것과 비슷하다고 생각합니다.
   2. 급여와 복지수준 + 사내문화(40%)
   이부분은 어찌보면 너무 당연할 것 같아서 설명은 스킵하겠습니다.
   3. 회사의 발전 가능성(20%)
   내가 발전하려면 회사 역시 발전하는 게 필요하지요. 회사에 다니는 건 회사의 성공을 함께하는 기쁨을 누리고 싶어서도 있으니까요. 나의 중장기 동기부여에 가장 영향을 주는 게 이 부분일 것 같습니다.

   그리고 회사 정보를 찾아보는 경로는 거의 100% 지인에게 문의한 게 기준이었던 것 같네요. 이유는 링크드인을 보함한 어떤 서비스도 회사의 현재 상황을 제대로 알려주지를 못합니다. 결국은 지인찬스만한 게 없었어요.
   마지막으로 개인적으로 가장 재미있었던 경험은, 비 IT계열 분들과 업무를 하는 경험이었습니다. 디자이너나 기획자가 아니라, 세일즈 혹은 운영팀, 총무, HR 등의 아예 다른 분야의 전문성을 가진 분들과 일할 때, 정말 많은 보람을 (다양한 의미로) 느낄 수 있어요.

   정말 재밌는 삶을 살고 계시군요! (이게 아마 선생님께 드릴 수 있는 최고의 칭찬 아닐까 싶습니다.ㅋㅋ)
   마지막에 적어주신 아예 다른 분야의 전문가들과 일을 하면, 어떤 부분이 유니크하게 보람찬가요? 그런 경험이 없어서 궁금합니다.

   연봉은 뭐 0순위이니 접어두고
   안정성 : 회사가 다 망해서 퇴사후 실업급여 안받은 적이 없네요. ㅠㅠ
   현 회사의 안정적인 부분이 꽤 큰 영향을 줬습니다.
   거리 : 대학교때부터 편도 2시간 거리 다니다가 30분거리 다니니까 천국이 따로 없네요.
   연차 사용성 : 아이가 있다보니 계획에 없는 연차를 쓰는 경우가 많습니다. 눈치 전혀 안보고 연차 쓸 수 있다는 부분은 꽤나 큰 메리트입니다.
   사실 아이를 키우면서 회사의 비전과 내 경력은 많이 포기했죠.
   그 결과 시대에 많이 뒤떨어졌습니다.
   2년전부터 정신차리고 따라잡고 있긴 합니다만,
   그럼에도 불구하고 자신감은 되찾지 못했습니다.
   다만 이대로 정년까지 갈 수 있는 안정성은 확보했네요.

   앗.. 거리에 대한 문제는 사실 탑티어급(?) 중요 요소인데 깜빡했군요. 놓치고 있었습니다. 감사합니다.
   나중에 아이가 선생님을 많이 자랑스러워 할거예요.

   와...윗분들 역시 연륜이 느껴지는군요...
   저는
   1. CTO급이 있는가? (개발팀이 따로 존재하는가?)
   2. 자체 서비스가 있는가? (서비스를 개발 중인가? / 개발한 전력이 있는가?)
   3. CI/CD를 도입해 사용하고 있는가? ( 테스트를 적극 활용 하는가 )
   4. 컨퍼런스에 발표를 한 적이 있는가? ( 후원을 했는가 )
   5. 개발 블로그를 작성 중인가? ( 개발에 대한 철학이 있는가? )
   6. 투자를 받았는가? (2년은 버틸만한 회사인가? / 수입율이 좋은가?)
   7. 대표가 개발자 출신인가? (개발팀에 투자를 하고 있는가?)
   8. 크레딧잡이 블럭된 회사인가? ( 역시 .. 블럭은.. 이유가 있다!!)
   9. 연봉/퇴사율
   등으로 봅니다.
   추가적으로는
   투자/수입율이 어느정도 되는지 보는건 다니던 회사들이 두번이나 파산한 경험이 있어서 중요하게 봅니다. (월급 밀리면 생존의 문제라...)
   면접 보러 해당 회사 갔을때 분위기도 많이 봅니다. (영업팀/CS팀 바로 옆에 개발팀이 있다던가, 숨막히도록 조용한 곳인가 등등)
   그리고 면접때 질문시 꼭 ""회사의 방향성 / 왜 사람을 뽑고 있는지"" 에 대해서도 물어봅니다.
   일하던 직원이 한꺼번에 다 나가서 급하게 뽑는 경우도 더러 있더라고요.

   마지막에 적어주신 부분들에서 많은 것을 느꼈습니다. 정말 감사합니다.
   저는 4, 5 는 크게 중요하게 생각하지 않는 것 같습니다. 너무 바빠서 (rocket) 미처 그런것까지 못하는 애매한 상태의 회사들이 있더라구요. (3년에서 5년 사이 유니콘/예비유니콘들이 그런 경향이 좀 있는 것 같습니다)

   최근들어 가끔 생각해보는 주제라서.. 지금까지의 생각을 좀 적어볼까 합니다.
   * 중요하게 생각하는 것
   1. 우선 제가 원하는 이직의 목표를 이룰 수 있는지가 중요합니다. 이직의 목표는 그때 그때 다르긴 한데.. 특정 역할(결정권을 가진 사람, 리더 등)이나 특정한 경험(라이브 경험, 초기 셋업 경험, 조직 구조 등), 업무 영역(새로운 업무 영역을 개척하는 경우가 특히 더..)등의 좀 추상적인것이거나 연봉인상/안정적인회사(오랜 근속)/아는 사람을 데려갈 수 있는 회사 등의 커리어와는 약간 카테고리가 다른 것을 원할 수도 있는데. 각각 항목의 우선순위가 정해져야 이직할 회사를 결정하는게 쉽다고 생각합니다. (물론 이력서 내서 붙어야... =.=)
   2. 그 다음에는 이직의 시기에 대해서도 고민하는데 이직이라는게 그냥 한달전에 말하고 인수인계하는 것보다는 좀 더 계획과 준비가 필요하다고 생각해서 보통 3~6개월 후를 생각하며 준비를 시작합니다. (잘 풀렸을 때.. 잘 안풀리면 일단 이직할 회사가 결정되는게 중요해지겠지만..)
   3. 어느 정도 이직할 회사들이 결정되어 가면 (2차까진 갔다던가.. 합격된 회사가 2군데 이상이 되면) 그 회사의 특이점들, 위에서 말한 이직의 목표에서 강화되는 것, 약화 되는 것 + 그냥 일반적인 이득/손실 (출퇴근 시간, 점심, 야근, 포괄임금제, 주차, 노트북 지급 등등 너무 많죠.. ㅎ)을 정리해보는 편입니다.
   * 회사 정보를 찾아보는 경로
   지인이 제일 유망하죠. 꼭 이직할 회사가 아니더라도 이직을 생각하고 지인을 만날때는 대화의 주제가 최근 잘 되는 회사들, 최근의 이슈들, 여러 소문이나 평소에 연락안하던 다른 지인의 소식등을 더 이야기 하게 되고 그러면서 자연스레 어디에 이력서를 넣어야 겠다가 정해질 것 같습니다. 그리고 꼭 이력서를 내지는 않더라도 로켓펀치나 원티드, 잡코리아 등 여러 군데서 어떤 회사들이 어떤 인력을 뽑고 있고, 어떤 프로젝트(가칭일지라도)가 있는지를 확인해야 주변 사람들에게 어떤 정보를 물어볼지 알수 있게 되겠죠. 아직까지는 헤드헌터를 써본 경험이 없어서 그쪽은 잘 모르겠습니다. 좀 유명한 회사들은 기술블로그나 직원들이 유튜브/SNS활동을 많이 하는 경우가 많아서 그런 부분들을 찾아보기도 합니다.
   그리고 어느 순간부터는 '직장을 구하고 있음'을 주변인들에게 열심히 말합니다. 그냥 소문/정보를 물어보는 것과는 다르게 실제로 '자리'를 알려줄 수도 있기 때문입니다.
   * 효과를 본 방식, 실패한 방식
   가령 갈 곳이 정해졌다고 해도(대표/임원이 스카웃 한다던가..) 여러군데 면접은 보고 비교해보는 것이 좋다고 생각합니다. 보통 3군데 이상 붙고 그 사이에서 선택을 해야 후회가 없을거라 생각은 하는데 뭐.. 3군데 이상의 좋은 후보를 찾아서 거기에 다 합격하는 것 자체가 쉬운일은 아니겠지요;;
   두번째로는 합격해도 갈지 말지 애매한 회사 -> 합격하면 꼭 갈거 같은 회사의 순서로 면접을 보는게 좋다는 생각입니다. 다만 채용의 속도가 회사마다 다르기 때문에 그 부분은 지인/지인의 지인이 있다면 미리 좀 조사를 하는게 좋긴 합니다. 위에서 언급했지만, 1차면접 합격후 3개월 안에 이직한다고 생각하면 좀 맘이 편하긴 합니다만 개인은 이직시장에서 을의 위치인 경우가 많거나 좀 소심해서 이렇게 길게 시간을 부르기 힘들긴 합니다.
   지금까지 한 5번 정도 이직을 했는데, 2번 정도는 이직하려다가 기존 회사에서 잡아서 남았던 경험이 있습니다. 하지만 보통 회사에서 잡아서 남았던 경우는 결국 또 금방 이직을 하게 되더라구요. 만약 기존 회사와 어느 정도 딜을 하고 싶다면 이직을 결정 -> 타 회사 합격 후 딜을 하기 보다는 평가/피드백, 연봉협상 등의 자리에서 좀 더 회사와 딜을 적극적으로 해본 후에 그게 안 통하면 이직을 시도하는 것이 좋겠다는 생각을 했었습니다.
   처음에 썼던 '이직의 목표'를 잘 세우는 것이 제일 중요한 것 같습니다. 그럴려면 이 회사에서 내가 얻은 것/성장,변화, 경험한 것을 정리하고 앞으로 2~3년을 더 다녀도 얻지 못할 것/정체되거나 퇴보할 수 있는 것을 생각해보고.. 그게 회사와의 딜을 통해서 변경될 수 있는 사항인지 아닌지를 생각해보다 보면 좀 정리가 되고 답이 나오지 않을까 싶네요. 하지만 이론은 그럴싸 한데, 실제로 제 현재 상황에 맞춰서 정리해보자고 하면 참 답이 안나오긴 합니다. :(

   길게 적어주셔서 감사합니다. 목표를 세우는 것이 사실 참 어려운 것 같습니다. 저는 아직 연차가 많이 모자란지라, 세상을 보는 식견도 넓히기 어렵네요 (우연한 계기 좋은 스승을 만날 수 있다면 얼마나 좋을까요).
   저는 말씀하신 것과 반대로, 애매한 회사들의 면접을 앞쪽에 배치하려고 합니다. 중요한 회사는 좀 더 면접 경험이 많은 상태로 면접장에 들어가고 싶어서요.

   제가 의도한 내용이 말씀하신 것처럼 애매한 회사들을 먼저 배치하는 것이었습니다. 다만 합격하면 꼭 갈거 같은 회사들이 큰 기업일 때 합격 통보가 늦거나, 채용 프로세스가 긴 경우에는 시간 조절을 할 필요가 있다.라는 말을 넣다보니 내용이 잘못 이해할만한 소지가 있는 것 같습니다.

   다른 분들의 글을 보면서 '사람'을 보고 가는 것도 하나의 중요한 포인트가 될 수 있겠다 싶었습니다. 기존의 이직들은 별로 그런 경우가 없긴 했는데 점차 연차가 들면서 사람이라는 부분이 더 중요할 수도 있겠다고 생각이 되네요.

   저는 예닐곱 회사를 다녔는데요.
   이직할 때 주로 생각한 것은 '성장할 수 있는가, 내게 도전이 되는가'였어요. 면접볼 땐 잘한다고 어필하지만 사실 잘하기보다는 잘하고 싶은 것이랄까요. ㅎㅎ
   있었던 회사에서 배울 것이 정말 많았어도 이직한 경우에는, 갈 곳에서 성장의 폭이 더 클 것이라 기대했어요.
   그런데 업그레이드 하고 싶은 것이 계속 달라졌던 것 같아요.
   관심있던 도메인 지식과 관련 기술 (저는 웹과 광고였네요 ㅎㅎ), 하는 업무를 통한 전략적 사고력과 커뮤니케이션 스킬 등, 또한 공동 창업 이후 및 좀 더 연차가 쌓이고서는, 맡을 역할을 통해 주도적으로 회사를 키우고 이것을 하며 나도 같이 배울 수 있는가였네요.
   저는 부족한 게 많아서 그런지, 정말 엉망진창만 아니면 어디서든 배울 게 있다고 생각하는데요. 그래서 실패라고 하고 싶은 이직은 없어요.
   다만 문화를 많이 고려안하고 갔을 때 힘들었던 것 같아요.
   회사에 기여하고 성장하면서 즐거움과 고통이 같이 있기 마련인데 이 균형이 지속되거나 깨지곤 했던 것이 '회사가 가진 문화'의 영향이 컸던 것 같습니다.
   지금은 제가 '주도적으로 참여'하고 '즐거움을 느끼는 것'을 가장 중요하게 생각하고 있고요. 그것이 오래 가려면 저도 '비전'이 중요하다고 생각해요.
   기본적인 것인데 스타트업이나 작은 회사일수록 또는 내가 참여하는 정도에 따라 더 크게 영향 받는 것 같아요. 물론 거대한 회사에 신입 사원이어도 업무 등등이 비전으로부터 이어지지만 예전에는 체감을 잘 못했던 것 같네요.
   함께 일했던 분들이 추천해주시거나 같이 다시 일해보자고 하셔서 이직을 했어요.
   어떤 회사인지 여러모로 찾아보고, 내가 여기서 원하는 일을 할 수 있는가 알아보고, 주변 생각들도 구해서 결정했던 것 같습니다.

   여러가지로 좋은 말씀 감사합니다. '좋지 않은 문화 경험'에 대해서 살짝 더 맛을 보여주실 수 있으실까요. ㅎㅎ

   옳고 그름보다는 회사의 문화가 나와 맞나 안맞나 아닐까 싶네요.
   극단적으로(?) 예를 들자면 결과만 보는 문화를 가진 회사가 있을 수 있고, 과정을 보는 문화가 있을 수 있죠. 또는 구성원들이 의사결정에 모두 참여하는 문화가 있을 수 있고, 대표가 결정하면 그냥 그대로 믿고 가는 곳이 있을 수도 있고요.
   우리가 다니는 회사들은 사실 그 사이 어디쯤이니 더욱 좋고 나쁨을 얘기하기는 어려운 것 같아요.
   회사에서 새로운 업무를 하거나 어떤 상황이 생겼을 때, 우리 회사 사람이라면 이렇게 하지~ 라고 생각하는 방식이나 습성(?) 같은 게 문화니까 그게 나랑 맞는지, 아니면 내가 문화를 만들어갈 수 있는지 그런 걸 중요하게 생각해요.

   중요하게 생각하는 기준
   1. 나의 관심: 내가 재밌게 할 수 있는 일인가.
   내가 내 일이 재미없게 느껴진다면 저는 '일' 이 주는 행복이 덜한것같습니다.
   도메인에 영향도 있을것이고, 맡게되는 업무도 영향이 있었습니다.
   2. 회사의 분위기: 직원들이 만족하고 회사에 자부심을 갖고 다니는가.
   이부분은 직접 다녀보지 않으면 느끼기 힘든부분이지만 다른분의 의견과는 달리 잡플래닛 등의 리뷰를 파악하는것이 어느정도는 도움이 되었습니다.
   믿을만한 지인을 통해서 알음알음 물어보는것도
   회사가 직원들을 위하는것이 보이면 직원들은 그것을 느끼고 함께 성장해 나갈 수 있는 발판이 된다고 생각합니다.
   3. 회사의 비전: 회사의 비전과 나의 비전의 방향성이 잘 맞는가.
   아무리 좋은 비전을 가진 회사라고 하더라도 나의 비전과 맞지 않으면 결국 만족도가 떨어지는 것 같습니다.
   가치판단의 기로에서 회사와 내가 다른 결정을 한다면 서로에게 좋은 선택이 되지 않을 것입니다.
   4. 안정성: 최소 기간을 버틸만한 자금이 있는가 / 안정적으로 운영되는 서비스가 있는가.

   회사를 찾아보는 경로
   1. 지인의 소개
   나를 잘 알고 회사를 잘 하는 지인이 소개시켜준 회사는 나름 잘 맞을 가능성이 높다고 봅니다.
   하지만 나의 테두리 안에서 벗어나지 못한다는 제한이 있습니다.
   2. 헤드헌터
   여러 경로로 알게된 헤드헌터들과 이야기를 나누며 적당한 회사를 찾아보는것도 좋은 경험이었습니다.
   이력서를 전달하면 헤드헌터가 알아서 회사를 추천해주고 면접시간을 맞춰서 보면 되어서 꽤나 편했습니다.
   다만, 헤드헌터의 역량이나 관심도에 따라 큰 차이가 나는 것 같습니다.
   제가 경험해 본것은 위 두가지정도였고 크게 실패한적은 없었습니다.
   첫번째 이직을 할 때 당시 다니던 회사가 정말 마음에 들었었기 때문에 가장 큰 고민을 했었는데
   한번 이직을 하고나니 그 다음이직들은 크게 어렵지 않았습니다.
   뚜렷한 못표를 가지고 판단하는것이 가장 중요한것 같습니다.

   추가로 여러 매체를 통해서 접한 서비스들중 정말 맘에들거나 비전이 좋다고 생각하면 한번 채용페이지를 확인씩 채용페이지를 확인해보기도 합니다.
   아직 이런식으로 이직을 해본적은 없지만요 ㅎㅎ

   좋은 말씀 감사드립니다. 잡플래닛 리뷰는 어떤 식으로 체크하시나요? 카테고리를 나눠보려고 해도 ""IT/컴퓨터""로 구분하는게 고작이라, 이 회사 그것도 내가 지원하는 팀의 상태를 정확하게 알기가 어렵다는 생각을 했습니다. 양이 너무 많기도 하고요.
   헤드헌터도 한 분 만나보면 좋을 것 같은데, 어떻게 시작해야 할지 모르겠네요. 링크드인으로 콜드메일은 가끔 오는데... 좋은 헤드헌터의 기준도 있을까요? 경험적으로요.

   리뷰는 매우 신뢰하는 편은 아니지만, 회사를 거르는 용도로는 적절하다고 생각합니다.
   물론 팀바이 팀일수 있겠지만, 평점이 현저히 낮거나, 경영진의 문제를 지적하는 회사는 거르는편입니다.
   제가 겪어본 좋은 헤드헌터는 저희 성향과 가치가 어떤 회사에는 맞을지 아닐지를 같이 고민해주는 분이었습니다.
   냉정하게 ""이 회사는 잘 맞지 않으실 수 있습니다"" 라고 말해주는 헤드헌터가 좋은 헤드헌터일 것 같습니다.

   사려깊은 말씀 감사드립니다. 리뷰는 최저점을 체크하는 용도군요.
   헤드헌터에 대한 말씀도 감사합니다!

   *회사를 잘 하는 -> 회사를 잘 아는

   저는 ""이직""은 해본게 마지막이 10년전이긴 합니다만..
   창업 포함해서 10개 정도의 회사를 다녀봤는데요.
   중요하게 봤던게 연차별로 약간씩은 변한거 같아요. 이건 이직시에 만나게 되는 사람들의 레벨이 변하기 때문이기도 한데요.
   스타트업이면 대표를 만나서 얘기해 볼수 있겠지만, 큰 회사라면 그게 힘들수도 있으니까요.
   사회생활 초기엔 도메인과 연봉만 봤습니다. 내가 흥미를 가질만한 분야인가, 그리고 돈은 잘 주는가..
   창업할 때는 도메인과 재미가 중요했습니다. 내가 열정을 가지고 할 수 있는 분야인가가 중요했어요.
   그런데 사회생활 10년 넘으면서 부터 회사를 결정할 때는 가장 중요했던 건 회사의 비전이었습니다.
   어찌 되었던 마지막에 남는 건 ""그 회사가 어디로 가는가"" 인거 같아요.
   마지막 10년전 이직 때는, 함께 하게 될 보스가 보여주신 비전이 너무 훌륭해서 아직도 기억에 많이 남습니다.
   물론 이건 상사의 능력치가 영향을 준다고도 볼 수 있겠네요.
   아마도 전 이제 다시는 ""이직""을 할 일은 없을거 같기는 한데요.
   한다면 이런 걸 중요하게 볼 것 같습니다. 가능만 하다면 창업자랑 만나서 이야기 해보는게 가장 좋은거 같아요.
   - 창업자가 어떤 비젼을 가지고 있는가
   - 창업자가 엔지니어 출신 또는 기술에 대한 이해도가 충분한가
   - 창업자는 흥미로운 사람인가
   그렇게 하기 위해서는 일반적인 취업경로로는 이런걸 알기는 어려운 것 같고..
   지인추천 또는 헤드헌터를 통한 구직이 좋다고 봅니다.
   소개 받고 나서는 가능한 모든 경로로 정보를 알아봐야죠.
   회사 홈페이지 뒤져보고, 구인글은 어떻게 적는지도 보고, 회사 관련 뉴스들과 대표 인터뷰도 다 살펴보고요.
   잡플래닛/KreditJob/Blind 정보는 알아서 필터링해서 보는 것도 중요할 것 같아요.

   감사합니다. 연차가 올라가면서 좀 더 '큰' 그림을 보셨다는 인상을 받았습니다. 저도 창업자까지는 아니어도 대표, CTO와 같이 얘기해볼 기회를 많이 가질 수 있으면 좋겠네요. 그러기 위해서 노력해보겠습니다. 감사합니다.

   - 중요하게 생각하는 기준들과 각 기준에 대한 가중치
   -- 도메인을 우선적으로 봅니다. 그런데 특정 도메인을 피하는 쪽으로 확인하는 수준에서 멈춥니다. 예를 들면, 저는 광고에는 별로 관심이 (유독) 없습니다.
   -- 내가 들어본 회사인지 확인합니다. 들어본 정보는 흘러다니는 유언비어나, 해당 회사에 재직중인 직원의 하소연을 포함하고, 전반적인 이미지를 형성합니다. 좋지 않은 버릇인 것 같네요.
   -- 연봉 정보는 확인하지 않습니다. 한국에서는 크게 의미 없는 것 같더라구요 편차가 너무 커서...
   -- 부끄럽습니다만, 회사에 대해 가지고 있는 어렴풋한 이미지로 회사를 가늠하는 것 같습니다.

   - 회사 정보를 찾아보는 경로
   -- 더브이씨 에서 투자정보를 확인합니다. 너무 높거나 낮은 수준의 시리즈는 거르는 편입니다.
   -- 잡플래닛 은 가급적 확인하지 않습니다. 좋게 말하는 직원과 나쁘게 말하는 직원 양쪽 다 항상 존재하는데, 모든 글을 읽어서 통계를 내지 않는 이상 한 쪽 정보에 치우치기 십상인 것 같아서입니다. 그렇다고 모든 리뷰를 보는 건 정신적으로 너무 힘들고요.
   -- 채용설명회 영상이 있다면 해당 영상을 참고합니다. 그러나 그 영상은 대개 인터넷에서 구할 수 있는 정보나 뻔한 얘기를 하는 경우가 대부분이기 때문에, 오히려 채팅창의 분위기 (다른 사람들의 관심도)나 나와서 설명하는 직원들의 표정 등을 주의깊게 보는 편입니다.

   - 효과를 본 방식, 실패한 방식
   -- 아직 저는 한 번도 이직을 해본 적이 없어서, 잘 모르겠습니다 ㅎㅎ..

   - etc
   -- 최근 알게된 몇몇 회사들은, 따로 투자를 받지 않는 데도 굉장히 좋은 회사 취급을 받더군요. 대부분의 사람은 존재도 모르고요. 그런 회사를 어떻게 찾을 수 있을지, 어떻게 내 손에 최대한 많은 정보를 쥐고 적절한 판단을 할 수 있을지가 저의 최대 관심사입니다.

   아, 추가로 ""대표가 돈이 얼마나 많은가""도 중요하다고 생각합니다. 그런데 확인할 방법이 마땅치 않더라구요 보통은.

   혹시 대표가 돈이 많다는게 어떤건지 여쭤봐도 될까요? 돈이 많다는게 대표의 개인자산이 많다는 건지, 그게 긍정적 요소인지 부정적 요소로 봐야하는지 궁금하네요

   ""투자금을 받지 않아도 어느 정도 개인 자본력으로 버텨가면서 J 커브를 견뎌낼 수 있는가""의 표면적 지표로 간주하고 있습니다.
   제가 예전에 있었던 회사는, 많이 초창기였습니다만, 자체 서비스를 개발하면서도 동시에 당장 직원들 월급을 못주기 때문에 외주를 병행했습니다. 속된 말로 SI 업체였죠.
   얘기하다보니 생각난 거지만, 극 초창기 스타트업이 아니면 크게 중요한 지표는 아닌듯 합니다.

   두분다 좋은 답변 감사합니다! :)

   저는 사실 대표의 돈은 성향에 따라 다르게 인식될거 같아요.
   돈이 많아서 딴거 상관없이 이 일에만 집중하는 경우가 있고, 다른거에 신경쓰느라 일을 신경 안쓸수도 있고요.
   돈이 없어서 오래 못버틸 수도 있고, 더 미친듯이 일할 수도 있고요.
   물론 둘중에 선택하라고 하면 많은 쪽을 선택하겠습니다만..
"
"https://news.hada.io/topic?id=5089","'구글 for 스타트업 액셀러레이터: 한국' 접수 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     '구글 for 스타트업 액셀러레이터: 한국' 접수 시작

   - 국내 시드 및 시리즈A 단계 스타트업을 지원하는 8주 간의 온라인 엑셀러레이터 프로그램
   - 9월 27일(월) ~ 10월 29일(금) 접수
   - 최종 선발된 스타트업은 2022년 2월 21일(월)부터 총 8주간 진행
   - 성장에 필요한 다양한 맞춤형 지원을 제공받게 됨
   ㅤ→ 기술적 프로젝트 지원, 멘토링, 맞춤화 교육 등
   - 2016년 이스라엘을 시작으로 전세계 여러 국가에서 진행하고 있으며, 이번에 한국은 처음 진행
"
"https://news.hada.io/topic?id=5120","딥러닝 가속기가 이끄는 반도체 시장의 미래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        딥러닝 가속기가 이끄는 반도체 시장의 미래

   지난 10년 간 전 세계에서 가장 주가가 많이 상승한 IT기업을 꼽으라고 한다면 애플과 엔비디아를 들 수 있을 것이다. 애플은 아이폰의 등장과 함께 고가의 스마트폰 시장을 그야말로 10년 넘게 지배해 오고 있고, 엔비디아는 고성능 게임용 GPU, 그리고 2010년대 중반 이후 딥러닝과 코인 채굴용 가속기 시장이 폭발적으로 증가하면서 주가가 급상승하고 있다.
   엔비디아는 1999년, 진정한 의미의 GPU (브랜드명 GeForce)를 처음 세상에 선 보인 기업이다. 물론 90년대 후반-00년대 후반까지는 엔비디아가 집중하던 사업은 고성능 게임용 GPU였다. 그런데 엔비디아는 AI 시대가 출현하게 될 것을 예견이라도 한 듯, 2007년 GUGPU (or GPGPU)를 세상에 소개한다. 엔비디아가 새롭게 창조하려고 했던 시장은 단순히 게임을 위한 고성능 그래픽카드 시장이 아닌, 범용 (general purpose) 가속기 시장이었던 것이다. 시장의 성장을 위해 전 세계의 칩 설계 개발자들이 자사의 GUGPU를 활용할 수 있는 SDK인 CUDA를 같이 공개한 것이 엔비디아의 노림수였는데, 그것이 제대로 먹혔다. 그와 더불어 openCL이 같이 병행되면서 그야말로 GPU는 GUGPU의 시대로 접어들 수 있었고, 엔비디아는 조금씩 게임용 그래픽 카드의 시장을 벗어나, 본격적으로 가속기 시장으로
   접어들게 되었다.
   잘 알려져 있다시피, CPU와 GPU의 가장 큰 차이는 serial vs parallel이다. GPU에는 단위 개수로만 따지면 CPU보다 훨씬 많은 core가 집적된다. 그리고 병렬로 처리하고자 하는 곱셈, 덧셈 등의 연산을 각각의 core에 분산하여 '순식간에' 처리한다. 이에 반해 CPU는 그 아키텍처 상, serial로 데이터를 받아서 결과물을 만들어낼 수밖에 없는데, 당연히 계산 속도는 GPU의 병렬 처리에 비할 수 없을 정도로 느리다. 여기서 오해하면 안 되는 것이 있다. '그러면 굳이 왜 CPU를 비싼 돈 내서 또 사는 것인가? 그냥 다 GPU로 하면 안 되는 것인가?'라는 의문을 가질 수 있는데, 사실 이는 비유하자면 장인이 조각을 하는 것과 비슷하다. 장인 한 사람이 한 달 걸려 혼자서 나무 깎고 칠하고 다듬고 하는 과정을 하는 것을 CPU에 비유한다면, 장인이 본인의 제자 10명에게 각각의 일을 분배하여
   한 달에 10개의 조각품을 만드는 것을 GPU에 비유할 수 있다. 일종의 가내수공업과 분업의 차이라고 볼 수 있다. 조금 더 정확한 비교를 해 보자. 사실 GPU가 2000년대 중후반 이후 병렬 계산 성능으로 각광을 받은 이유는, GPU에 분산된 각각의 core에서 동시에 비슷한 계산을 하고, 그것을 한꺼번에 모아서 출력할 수 있는 칩의 설계 때문이었다. 예를 들어 B = [5*5] 행렬과 C = [5*1] 행렬을 곱하는 연산을 생각해 보자. 이 연산을 CPU로 하려면
   for ii=1:행의 개수
   ㅤfor jj=1:열의 개수
   ㅤㅤA = B(ii,jj)*C(jj);
   ㅤㅤA(ii) = A(ii) + A;
   ㅤend
   end
   같이 for loop을 두 번 돌려야 한다. 그렇지만 GPU로 이 연산을 하려면 B행렬의 각 성분과 C행렬의 각 성분의 index를 GPU 코어에 각각 분배해두기만 하면 된다. 예를 들어 B*C 행렬의 곱셈은 각 성분을 5*5 = 25번 곱하는 연산이 필요한데, B(i,j) 성분과 C(k) 성분은 GPU 코어에서는 [행의 개수*(i-1) + j] 번째 코어에 미리 할당해 두면 끝난다. 그러면 각 코어는 분배받은 곱하기 연산만 하고, 그 결과를 메모리에 모아서 더하기 연산만 추가로 하면 된다. 즉, 사전에 어떻게 분배하고 모을 것이냐의 순서만 잘 정해두면 단순한 곱셈/덧셈의 반복 연산은 GPU가 훨씬 빠를 것이다. CPU는 GPU에 비해 이런 병렬 연산이 거의 불가능한 대신, 부동소수점 자리를 더 많이 가져갈 수 있다. 즉, 정밀한 계산을 GPU의 개별 코어보다는 더 잘할 수 있고, 따라서 정확도가 필요한 ALU 계산은 당연히
   CPU가 GPU보다 훨씬 잘한다. 다만 반복된 계산은 대부분 그렇게 높은 정밀도를 요구하지 않으므로 GPU의 병렬 계산이 훨씬 유리하다.
   이렇게 병렬화에 최적화된 GPGPU가 왜 2010년대 중반 이후, AI, 특히 딥러닝 시대가 본격 개막된 이후에 더 각광을 받게 된 것일까? 애초에 딥러닝이 어떤 방식으로 작용하는지 알면 이해하기 쉽다. 딥러닝을 배울 때 초반에 기초로 배우는 연산 중 하나가 바로 합성곱 (convolution)이다. 합성곱은 주어진 행렬 형태의 input data에 또 다른 행렬인 kernel을 위치를 바꿔가며 연산하는 matrix operation이다. 그런데 가만 보면 이는 각 행렬들의 성분을 곱하고 더하는 연산의 반복일 뿐이다. 물론 kernel을 어떤 것을 쓰느냐에 따라 input matrix의 결과물은 달라진다. 예를 들어 이미지 처리 강의에서도 다뤘지만 라플라시안 kernel을 사용할 경우, 이미지의 경계나 경계의 구배 혹은 패턴 구별을 할 수 있는 기능이 생긴다. 어떤 종류의 kernel이든 일단 이렇게 합성곱을 거치는 과정에서 결국
   단순한 곱셈/덧셈을 반복하게 되므로, 당연히 그에 특화된 설계 방식을 가지고 있던 GUGPU가 훨씬 유리한 입장이 되는 것은 사실이다. 또한 딥러닝에서 학습과 추론이 어떻게 이루어지는지를 생각해 보면, 왜 애초에 CPU를 기반으로 하는 딥러닝은 거의 불가능에 가까운 지도 이해할 수 있다. 앞서도 이야기했지만, GPU는 CPU만큼의 정밀도를 요구하지도 않고 그렇게 하도록 설계되지도 않았다. 딥러닝으로 training data를 학습하는 과정은 눈을 가린 사람이 손발만 사용해서 길을 찾아가는 것과 비슷한 과정이다. 운이 좋으면 손을 뻗은 곳에 지표로 삼을 만한 물체가 있을 수도 있지만, 운이 안 좋으면 발을 뻗은 곳에는 함정이 있을 수도 있다. 즉, 매번 trial을 할 때 반드시 error가 나오게 되어 있는데, 애초에 그 error의 정확도 혹은 정밀도는 별로 중요하지 않다. 오히려
   그 error의 정밀도에만 신경 쓰다 보면 학습 속도가 느려질 것이다. 1초당 100번의 trial-and-error를 하는 사람이 길을 더 빨리 찾을 것인지, 1초당 1번의 아주 조심스러운 successful trial만 하는 사람이 더 길을 빨리 찾을 것인지를 비교해보면 답이 나올 것이다. 이러한 딥러닝의 학습 방식은 GPU가 설계된 아키텍처와 정확히 맞아떨어졌고, 이 때문에 이제는 GPU는 고성능 게임이 아닌 딥러닝용 가속기 머신으로 인식되기 시작했다.
   여기서 한 가지 간과하면 안 되는 것은 여전히 GUGPU는 게임 성능 강화에도 최적화되어 있다는 것이다. 애초에 GPU가 행렬 처리에 특화된 성능을 가진 것을 생각하면 이것은 당연한 이야기다. 90년대 초반 이전의 게임에서는 사실 3D 이미지라는 개념이 거의 없었고, 있었어도 특정 방향으로의 2D projection만 계속 보여주는 식이었다. 사실상 2D only라고 봐도 무방하다. 행렬에 관한 선형대수 연산에서 2차원 행렬은 사실 쉬운 계산에 속한다. 그런데 문제는 3차원 행렬 연산이다. 우리가 사는 세상은 3차원이고, 보고 듣고 느끼는 모든 물리적 현상이 3차원 공간 + 1차원 시간 속에서 벌어진다. 매 초마다 3차원 속에서의 이벤트는 시시각각 바뀌는데, 우리 눈은 그 정보를 강제로 2차원에 매핑하여 인식해야 한다. 인간의 두뇌가 시각 정보를 처리하는데 굉장히 많은
   리소스를 사용하고 있다는 것은 바로 이 때문이다. 이는 연산에 대해서도 똑같이 적용할 수 있는 이야기다. 3차원의 어떤 물체 이미지를 우리가 인식하는 2차원 공간, 즉 모니터 위에 띄워야 하는 작업을 생각해 보자. 예를 들어 3차원 폴리곤으로 구성된 인형을 특정한 각도에서 바라보는 이미지를 2차원 모니터 상에 띄워야 하는 것이다. 이러려면 행렬 변환 (matrix transformation) 연산이 들어가야 한다. 회전 변환, stretching, 소실점 처리 같은 연산을 해야 한다. 여기에 조금 더 욕심을 부리면 ray tracing도 해야 한다. 즉, 빛과 그림자 효과도 같이 봐야 하는데, 이 계산은 더더욱 많은 연산을 필요로 한다. 기하광학 연산이 같이 모든 폴리곤의 각 질점마다 행해져야 하기 때문이다. 그런데 이렇게 무지막지한 계산을 매초에 한 번도 아니고, 적어도 30번에서 60번 정도는
   해야, 사람의 눈은 이 현상이 실시간으로 자연스럽게 일어나고 있다고 인식을 한다. 그야말로 컴퓨터 공학자들에게는 악몽 같은 과업이었을 것이다. 90년대 초반에 CPU로 이러한 작업을 했다고 한다면 아마 1분에 한 장면 정도 겨우 띄울 수 있었을 것이다. 참을성 없는 게이머들에게는 참을 수 없는 랙이 된다. 그런데 GPU는 이러한 반복된 연산을 행렬 기반으로 병렬 처리할 수 있기 때문에, 이제는 CPU가 이러한 작업의 부담을 홀로 질 필요가 없다. 각종 행렬 변환 연산과 ray tracing 기하광학 연산의 대부분은 GPU가 담당하고, CPU에서는 이들의 후속 연산만 담당하면 된다. 즉, 게이머 입장에서는 이제는 이 연산이 '가속'된 것처럼 느껴진다. 이로 인해 가속기라는 이름이 붙기도 했다.
   이렇게 행렬 기반으로 표현될 수 있는 데이터라면 그것이 게임용 고해상도 3차원 이미지든, 의료용 3D voxel data든, 딥러닝 학습용 multi-feature tensor data든, GUGPU의 전성시대는 확실히 peak에 도달하고 있다고 해도 과언이 아닐 것이다. 그렇지만 문제는 GUGPU의 장점이 동시에 단점도 된다는 것이다. 병렬 처리의 속도를 개선하는 방법은 코어의 개수를 더 늘리거나, 코어와 코어 사이의 정보 I/O 속도를 더 빠르게 하는 것이다. 이를 위해 메모리를 각 코어와 통합할 수도 있고, 밴드폭 (bandwidth)을 더 늘릴 수도 있다. 그렇지만, 변하지 않는 한 가지 대가는 그만큼 전력 소모량이 늘어난다는 것이다. 코어 자체가 소모하는 전력과 더불어, 코어에서 소모되는 전력이 열로 환원되는 과정에서 이를 식히기 위한 냉각을 위한 전력 소모도 늘어난다. 또한 반복된 발열-냉각 과정은
   칩의 수명에도 영향을 준다. GPU 역시 실리콘 기반의 반도체 칩이므로, 결국 집중된 전력의 사용과 연산은 코어를 이루고 있는 재료와 소자의 수명을 단축시킨다. 기계적인 failure, thermal failure, electrical failure가 생길 수 있기 때문이다. 실제로 블록체인 채굴용으로 거의 공장식으로 운영되는 채굴장에서 쓰인 GUGPU의 수명이 6개월도 못 간다는 이야기가 괜히 나오는 것이 아니며, 일반 피시방에서 사용되는 high performance GPU 역시, 수명은 보통 2년, 길게 잡아도 3-4년에 불과하다. 물론 그 수명이 무색하게 다음 세대의 GPU가 나오기 때문에 수명의 문제는 가려져 있지만, 수명 자체는 CPU보다 짧아지는 것은 감내할 수밖에 없는 단점이다.
   이럼에도 불구하고 AI 시대는 이제 막 성장하고 꽃 피우려는 상황인데, GPU 같은 가속기를 쓰지 않고는 그 수많은 연산을 감당할 방법은 없다. 그렇지만 GPU에만 의존하자니, 점점 학습을 위해 GPU가 소모하는 전력량은 하늘을 찌를 기세다. 이에 대한 대안이 당연히 필요하며, 2010년대 후반에서 2020년대 넘어오면서 나온 솔루션 중 하나가 FPGA와 NPU다. 지난 2019년, 인텔과 더불어 CPU 제조업체 양강을 이루고 있던 AMD는 세계 제1위의 FPGA 업체인 자일링스를 전격 인수했다. 업계의 시각은 올 것이 왔다는 것이었는데, 그도 그럴 것이 경쟁자 인텔은 이미 FPGA 시장의 2인자 알테라를 2015년에 167억 달러에 인수한 바 있기 때문이다. 전통의 CPU 제조 대기업들이 CPU 와는 결이 다른 FGPA를 경쟁적으로 인수한 이유는 무엇일까? FPGA는 말 그대로 사용자가 그때그때 목적에 맞게
   reprogramming 할 수 있는 연산 칩이다. 사용자가 재프로그래밍할 수 있다는 이야기는, 칩이 동작할 수 있는 최소한의 기능만 남겨 두고, 나머지 유닛의 배열이나 설계는 사용자가 바꿀 수 있다는 이야기다. 그렇다면 당연히 CPU나 디램 같은 표준화된 공정에서 찍어내는 반도체 칩에 비해, 비용이 비싸질 수밖에 없다. degree of freedom을 늘려 두어야 하기 때문이다. 딥러닝 시대 이전에는 이런 연유로 FPGA 기반의 칩들은 특수한 목적 (원전용, 우주탐사선용 같은 특정한 용도)로 주요 활용되었을 뿐, 범용으로 쓰이는 일은 거의 없었다.
   그런데 딥러닝 시대가 본격화되면서, GPU가 마냥 지배할 것 같던 시장이 점점 다변화되기 시작했다. 이 기조는 GPU에게는 결코 좋기만 한 상황이 되지는 않았다. 예를 들어 단순히 딥러닝이 합성곱 계산만 반복하는 연산들의 집합이었다면 문제가 되지 않았을 것이지만, 딥러닝을 적용하고자 하는 분야가 넓어지면서, 딥러닝 엔진이 학습해야 하는 데이터의 규모와 특징도 더욱 다양하게 바뀌었다. 단순히 이미지에서 숫자를 인식하거나 개와 고양이를 구분하는 정도로는 응용 범위가 제한이 되니, 자연어를 처리한다든지, 1,000개가 넘는 feature를 갖는 복잡한 화학 공정 데이터에서 오류를 검출한다든지, IoT 센서들의 네트워크를 설계해야 한다든지, CFD로는 커버할 수 없는 다공성 매질 내부의 복잡한 유체의 흐름을 추론하여 모사한다든지, 실시간으로 자율주행
   엔진을 만들어야 한다든지 하는 식으로 용도와 스펙이 다변화된 시장이 열리기 시작한 것이다. 딥러닝을 산업에 응용하고자 하는 측에서는 이렇게 시장이 다변화되는 것이 환영할만한 일이지만, 범용 GPU로 이것을 커버하려던 측에서는 이것은 고민거리가 된다. 각 응용처에서는 구별이 중요한지, 추론이 중요한지, 예측이 중요한지, 검출이 중요한지 가중치는 다 다른데, 이에 대해 천편일률적인 뉴럴넷 알고리듬에 최적화된 연산 구조를 계속 이끌고 가기 어려워졌기 때문이다. 딥러닝이 등장한 초반에는, 가용한 하드웨어가 거의 GUGPU 밖에 없으므로, 딥러닝 알고리듬 개발자들은 주어진 GUGPU 스펙을 기반으로 알고리듬을 구축할 수밖에 없었다. 그런데 딥러닝이 다루는 데이터의 종류와 양이 기하급수적으로 늘어나면서, 이제는 오히려 딥러닝 알고리듬이 GPU의
   아키텍처 설계에 영향을 미치는 빈도가 늘어가고 있다. GPU 개별 코어의 정밀도 (부동소수점 자리)를 FP16에 고정시킨다는지, 정밀도의 변동 허용 (다중 정밀도) 코어를 설계하는 것이 바로 이런 사례에 해당한다. 그렇지만 이러한 딥러닝-driven GPU 설계에도 한계는 명확하다. GPU 역시 한 번 찍어내면 그 구조를 바꾸기 거의 불가능하고, reprogramming 할 여지가 없기 때문이다. 도끼로 면도를 한다면야 할 수는 있겠지만, 손에 잘 익은 면도기가 아쉬워지는 것은 인지상정이다.
   대조적으로 FPGA가 이러한 목적에 더 적합할 수 있음이 점점 시장에서 받아들여지고 있다. FPGA는 앞서 언급한 것처럼, 로직 설계를 채 다 마치지 않은 상황에서 고객에게 납품된다. 다만 그 위에 고객들이 자신들의 목적에 맞게 프로그래밍할 수 있는 일종의 SDK를 제공한다. 고객들이 자신의 목적에 맞게 예를 들어 유체역학 시뮬레이션 전용 딥러닝 칩을 만들 수도 있다는 이야기인데, 설사 초반에 설계에 착오가 있어서 제대로 동작하지 않는다고 해도, reprogramming이 가능하므로 얼마든지 소정이 가능하고, 따라서 초기 테스트 과정에서 비용 손실을 줄일 수 있다. GPU에서 이루어졌던 하드웨어 단계에서의 병렬 처리 성능에 비할 수는 없겠지만, FGPA 역시 병렬 처리를 할 수 있는데, 이 역시 FPGA의 특징에 기인한다. FPGA에서는 소프트웨어 레벨에서 병렬 처리를 구현할
   수 있는데, 단일 코어에서 복수의 명령어 (multiple instruction)를 받아 복수의 아웃풋을 만들어내는 알고리듬 설계가 가능하다. 이러한 방식을 Multiple instruction multiple data (MIMD)라고 한다. 그런데 GPU의 개별 코어에서는 반복된 작업을 통한 병렬 처리에 최적인 조건을 맞추기 위해 애초에 데이터 흐름이 single instruction multiple data (SIMD)로 구성된다. 명령어 셋이 잘 구축되어 있고 데이터 규격이 잘 정돈되어 있다면 그야말로 GPU는 하드웨어 레벨에서는 거의 신계에 가까운 병렬 처리가 가능하지만, 데이터 규격이 달라지거나 주어진 명령어 셋으로 커버하기 어려운 연산이 나오면 버벅댈 수밖에 없다. 그에 반해 FPGA는 하드웨어 레벨에서의 병렬 처리는 어려우나, flexible 하다는 것이 제일 좋은 장점이다. 데이터 규격 (width)가 달라져도 미리 define 된 명령어 셋에 구애받을
   필요가 없으니, multiple instruction set을 활용할 수 있으니 오케이이기 때문이다. 이렇게 flexible 하다는 특징이 있다는 것은 다변화된 데이터셋과 말단 application이 각광받고 있는 지금의 딥러닝 시대에는 FPGA의 시장성이 높아질 것임을 의미한다.
   그에 더해 애초에 수천 개의 코어를 동시에 돌릴 필요가 없는 (물론 성능은 다소 떨어지더라도) FPGA는 GPU와 비교해 보면 전력 소모는 매우 매우 낮아진다 (첨부 표 1 참조). 추가적으로 FPGA는 시장의 딥러닝 알고리듬이 개선됨에 따라, 전력 소모 방식도 수정이 가능하므로, 언제든 에너지 효율을 최적화할 수 있다. 필요 없는 스위치는 끄고, 필요한 스위치만 올리면 되는 방식이기 때문이다. 이러한 연유로 딥러닝 시대가 본격화되기 전, GPU에서 딱히 재미를 못 봤던 인텔과 AMD는 부랴부랴 업계 1, 2위 FPGA 업체를 거액으로 인수한 것으로 해석할 수 있다. 물론 기존의 GPU 강자였던 엔디비아 역시 가만있는 것은 아니다. FPGA가 아무리 장점이 많다고 해도, 여전히 GPU에 비해 딥러닝에서 취약한 치명적 단점이 있다. 그것은 GPU에 비해 training 속도가 느리다는 것이다. 이는
   어쩔 수 없는 단점이다. 애초에 가용한 코어를 하드웨어 레벨에서 무작정 늘려서 built-in 한 구조가 아니기 때문이다. 인텔과 AMD는 FPGA를 통해 GPU가 지배하고 있던 AI용 가속기 시장의 포션을 가져가려는 복안을 세웠다. 인텔은 Agilex와 PAC (programmable acceleration card)를 출시했고, AMD (자일링스) 역시 가속기 카드 Alveo를 출시하면서 승부수를 던진 바 있다. 특히 자일링스는 HMB (high-bandwidth memory)를 아예 FPGA에 결합한 제품인 버설 (versal) 같은 제품으로 선회하기도 했는데, 이는 10 나노 이하급 반도체 초미세 패터닝 기술이 성숙 단계에 이르면서 구현이 가능해진 기술이기도 했다 (versal의 경우 7 나노 공정으로 제조). 인텔이 알테라를 인수한 이후, 인텔의 FPGA 기반 가속기 매출은 큰 성장세를 보이지 않은 반면, 자일링스의 매출은 지속적으로 큰 성장세를 보이고 있고,
   이는 자일링스 방식의 FPGA + HBM 구조가 딥러닝 가속기 성능의 격차를 조금씩 메꿔가고 있음을 보여 주는 것이기도 하다. 자일링스는 이에 더해, 딥뉴럴넷에 최적화된 xDNN 프로세서로 개발을 확대하면서 flexible 딥러닝 가속기 시장을 노리고 있다.
   사실 딥러닝 학습 과정에서 행렬 연산만큼 중요한 것이, 대용량 데이터의 학습 결과를 integration 하는 과정인데, 이를 위해서는 데이터가 쭉 줄지어 있을 때, 대기 시간을 단축하는 과정이 필요하다. 즉, 데이터의 지연성을 줄이는 것이 에너지 소모 면에서나 학습 속도 면에서나 점점 중요해지고 있다. 엔비디아가 FPGA 진영에 대해 꺼내 든 카드 역시, 바로 이 데이터 지연성을 줄이는 기술인 인피니밴드다. 이를 위해 엔비디아는 인텔과 AMD의 인수 경쟁에서 승리하면서 2019년, 네트워크-인터페이스 카드 (NIC)와 인피니밴드 분야 글로벌 강자인 멜라녹스를 69억 달러에 인수했고, 자사의 NPU 최적화 기술을 확보할 수 있었다. 엔비디아가 GPU에 더해 딥러닝, 나아가 AI 가속기 시장 전체를 노리고 있는 기술은 범용 딥러닝 가속기인 Xavier인 SoC며, 이는 특히 AI 가속기
   수요가 폭증하고 있는 자율주행차 시장의 주력 제품으로 포지셔닝되고 있다. 엔디비아의 CUDA 역시 딥러닝에 특화된 cuDNN을 제공하는데, 데이터셋이나 규모에 상관없이, 거의 모든 딥뉴럴넷이 필요로 하는 유닛들을 미리 구현해 놓았기 때문에, 향후 NPU (Neural processing unit)으로의 시장 교두보도 확보해 놓은 상태라고 볼 수 있다. 특히 NPU는 특정 데이터셋에 대해 미리 하드웨어 레벨에서 DNN을 구현해 놓은 칩 (말 그대로 딥러닝 네트워크를 구성하는 각 층을 실리콘 칩 기반의 로직 유닛으로 1:1 대응시켜 구현한 칩이다. 즉, 뉴런을 하드웨어 레벨에서 그대로 구현한 것으로 보면 된다.)이기 때문에, 그 특성상 모바일 AP에 집적되기 좋다는 것을 고려한다면, 앞으로도 크게 성장할 AP 시장에서의 지배력도 계속 유지할 가능성이 높을 것이다. NPU는 '추론'을 GPU에서 하는
   것이 아닌, 말단 장비 (예를 들어 스마트폰)에서 할 수 있는 수준으로 기능을 고정시켜 놓은 칩이라고 볼 수 있다. 웬만한 두꺼운 책 수준으로 덩치가 커진 GPU를 스마트폰에 넣을 수는 없으니, 최대한 학습된 기존 구조가 built-in 된 방식으로 NPU를 만드는 것이다. 모델 학습 자체는 GPU 서버에서 담당하되, 학습된 모델을 기반으로 입력된 데이터로부터 특성을 추론하는 기능만 담당하게끔 NPU가 역할 분담을 한다면, 이제는 전력을 많이 소모하지 않아도 되고, 덩치가 커질 필요도 없으므로, 스마트폰이나 차량용 반도체 칩 등에 맞춤형으로 같이 집적될 수 있다. 이는 FPGA가 추구해 오던 flexibility를 우회하는 전략으로도 볼 수 있다. 엔비디아는 바로 이러한 NPU 시장을 타깃으로 Xavier 이후 기술인 Jetson 시리즈를 발표했고, 가격도 더 인하했다.
   NPU 시장의 경쟁 상대는 아마도 구글이 될 것인데, 구글은 자체 설계한 칩인 TPU (tensor processing unit) 시리즈 Coral을 발표했으며, 가격은 엔비디아의 Jetson의 1/5 이하로 책정하면서 원가 경쟁을 시도하고 있다. 물론 성능과 가격은 비례하는데, Coral의 성능은 Xavier나 Jetson의 1/5-1/3 수준으로 알려져 있다. 다만, 구글이 이후 출시할 TPU들은 시장에서의 피드백을 바탕으로 조금 더 광범위한 분야에서 활용될 것으로 전망되는데, 이는 구글이 구상하고 있는 GPU 클라우드 서버를 통한 학습 모델 업데이트 속도에서의 경쟁력에 기반을 둔 것이라 추정할 수 있다. 삼성이나 퀄컴 같은 전통의 모바일 AP 업체들 역시, 초미세 패터닝의 한계로 인해 AP 칩의 성능 자체가 개선될 여지가 점점 없어지다 보니, NPU를 욱여넣는 전략을 취하고 있다. 퀄컴은 자사의 스냅드래곤 시리즈 845
   이후부터 NPU를 탑재하기 시작했으며, 삼성은 자사의 엑시노스 시리즈 9 이후부터 NPU를 탑재하기 시작했다. NPU를 통합하거나 병행하려는 업체들은 당연히 모바일 칩에서의 데이터를 확보하여 점점 그 적용 범위를 넓혀갈 것인데, 다음 시장은 아마도 차량용 반도체 (자율주행차칩이나 전장반도체칩), IoT 신호처리용 칩, 군사용 복합 레이더칩 등으로 점점 범위가 넓어질 것이다.
   그런데 아이러니컬하게도 FPGA와 NPU/TPU/cuDNN 시장의 경쟁은 하드웨어가 아닌 소프트웨어, 특히 딥러닝 알고리듬의 변화 추세가 어떻게 될 것이냐에 달려 있다. 지금도 딥러닝 알고리듬 분야는 하루가 다르게 새로운 방법론, 새로운 이론, 새로운 모델이 쏟아져 나오고 있고, 매년 4대 인공지능 학회에 논문을 억셉시키는 것은 점점 어려워지고 있다. 그러나 다른 분야의 기술이 그렇듯, 딥러닝 역시 이제 점점 성숙기에 접어들면서 알고리듬의 혁신 속도가 느려지기 시작하면, FPGA 고유의 flexiblity의 장점도 점점 희석될 것이다. 더 빠르고 더 효율적인 알고리듬이 나오면 그에 맞춰 reprogramming 할 수 있었던 장점이, 만약 알고리듬 교체 주기가 점점 느려진다면 딱히 장점이 되지는 않을 것이기 때문이다. 일례로 이제는 이미지 인식 정도의 기능에 대해서는 더 이상
   개선될 여지가 거의 없을 정도로 (사람의 인식률은 이미 넘은 지 오래고, 웬만한 알고리듬들은 이제 이미지 인식률이 95%를 넘는다.) 알고리듬은 saturated state에 도달한 것으로 볼 수 있다. 오히려 범용 DNN를 계속 개질 하여 하드웨어와 최신 알고리듬 사이의 격차를 줄여 나가는 방식이 나중에는 더 유리해질 수 있다.
   딥러닝 가속기 시장은 앞으로도 계속 성장할 것이고, 아마 2030년 이후에도 수요는 증가 추세일 것이지만, 시장을 지배하는 방식이 무엇이 될지는 더 두고 보아야 한다. 딥러닝 알고리듬의 성숙기가 언제 찾아올 것인지는 아무도 예측할 수 없으나, 결국 성숙기는 올 것이고, 그 시점에서 어떤 기술이 더 최적화된 상황일지는 예측하기 어렵다. FPGA 역시 얼마든지 혁신할 여지는 있다. 올해 6월에 Nature에 공개된 구글의 강화학습 기반 칩 디자인 연구* (*https://www.nature.com/articles/s41586-021-03544-w)는 이러한 혁신의 가능성을 보여주는 좋은 사례다. 좁은 칩 다이 면적 위에 수백만수천만 개의 유닛을 배치하고, 각 유닛 사이의 데이터 인풋과 아웃풋을 지연 시간을 최소로 하면서 에너지 사용량을 줄이는 설계는 반도체 칩 설계의 가장 어려운 부분 중 하나였다. 팹리스
   업체들은 그간의 노하우를 활용하여 이러한 최적화를 진행해 왔는데, 구글에서 공개한 결과는 자뭇 충격적일 정도로 그간의 노하우를 무색게 할 정도의 개선을 이뤄냈다. 이는 마치 복잡한 아파트 평면에 온갖 가구와 가전제품을 배치하되 몸의 움직임을 최소화하면서도 힘을 최소로 쓸 수 있는 최적의 동선을 배치하는 것과 비슷하다. 구글은 바둑의 상태 공간 (~10^360) 보다 훨씬 큰 공간인 유닛 배치 상태 공간 (~10^2500)에 대해 알파고의 방법을 훨씬 더 발전적으로 계승시킨 방식으로 최적화 설계를 이뤄낸 것이다. 이러한 설계 방법은 당연히 FPGA의 최적화에도 바로 적용할 수 있는데, 주어진 instruction set의 degree of freedom을 고려하여 주어진 성능을 최적화하는 것은 같은 맥락에서 달성 가능한 작업이기 때문이다.
   엔비디아나 구글, 인텔, AMD, 퀄컴 등이 사용하는 기존의 방식과 아예 궤를 달리 하는 기술도 나올 수 있을까? 당연히 그럴 가능성이 있다. 뉴럴넷이라는 이름 그대로, 이제는 인간의 대뇌 신경망을 단순히 흉내 낸 것이 아니라, 아예 copy & phaste 하는 방식으로 반도체 칩과 연계하는 방식의 기술을 생각할 수 있다. 최근에 삼성과 하버드대 한국이 과학자들이 공개한 perspective가 바로 그런 예다** (**https://www.nature.com/articles/s41928-021-00646-1...). 이 논문에서 전망한 대체 기술은 바로 뉴로모픽 반도체 (neuromorphic chip)인데, 이미 잘 알려진 개념인 뉴로모픽 칩이 새삼 다시 주목받은 이유는, 아예 인간의 뇌 신경망에서 주고받는 전기신호를 나노 전극과 연결하여 그대로 복사 (copy)하고 그것을 하부에 연결된 메모리에 복사 (phaste)하는 개념이 가능하다는 것을 실존 기술
   레벨에서 보였기 때문이다. 이는 뇌라는 소프트 조직을 다 걷어낸 나머지 모든 기능을 그대로 반도체 칩으로 옮겨갈 수 있다는 것을 의미한다. 뉴로모픽 칩을 구현하기 위한 메모리 반도체 기술은 이미 SRAM, RRAM, MRAM, memristor 등으로 구현되어 있거나 이미 실제로 활용되고 있기 때문에, 수천조 개의 뉴런에서 발생하는 신호를 어떻게 실시간으로 지연성을 최소화한 채 메모리로 옮기느냐가 관건이 될 뿐, copy & phaste 방식의 연결은 이제는 기술적으로 불가능한 상태는 아닌 것으로 보인다.
   앞으로도 딥러닝 가속기가 이끄는 반도체 시장은 다양하게 그리고 더 강력하게 성장할 것이다. 딥러닝 기반의 데이터 처리가 얼마나 더 다변화된 시장을 뚫을 수 있을 것이고, 얼마나 더 큰 비정형 데이터들을 처리할 수 있느냐에 따라 그 시장 규모, 그리고 지배 기술이 정해질 것이며, 여기서 주목해야 하는 것은 현재의 키 플레이어 기술들의 발전과 더불어, 그것을 아예 다른 방향에서 대체할 수 있을만한 신개념 기술 들일 것이다. 뉴로모픽 외에도, photonics 기반의 neural network이 가능하며, 이는 지연시간 자체가 빛의 속도로 줄어들 것임을 의미하므로, 더 강력한 NPU의 등장을 예고할 수 있다. 스핀트로닉스의 경우 병렬 처리 성능을 더 끌어올릴 수 있을 것이며, 구글이 공개한 TFQ 같은 앙자컴퓨터 전용 딥러닝 알고리듬은 지금까지의 방식과 전혀 다른
   양상으로 '추론'을 재정의하게 될 가능성도 있다. 앞으로의 반도체 시장 역시, 결국 딥러닝이 주도하는 AI 가속기와 그에 걸맞은 알고리듬의 혁신에서 주요 모멘텀이 창출될 것이고, 다양한 아키텍처를 가져오는 더 많은 팹리스 업체들이 우후죽순 등장하는 와중에, 이들의 옥석을 가려내고 기술의 구현 한계를 결정할 수 있는 공정 기술의 확보가 결국 앞으로 창출될 시장의 지배력을 결정하게 될 것으로 예상된다.
   * 성균관대학교 권석준 교수님의 페이스북 글인데, 그간의 CPU/GPU 발전 상황을 재미나게 풀어주셔서 가져와 봅니다.

   페이스북 계정이 없는 분들이 계셔서 전문으로 가져와 봅니다. 페북 댓글에도 참고할 내용들이 있으니 가셔서 보시는걸 추천드려요.
"
"https://news.hada.io/topic?id=5098","사람의 피드백과 함께 재귀적으로 책 요약하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        사람의 피드백과 함께 재귀적으로 책 요약하기

   - OpenAI가 새로 발표한 논문
   - AI모델 적용을 위해서는 머신러닝 모델이 사람의 의도대로 동작하는지를 확인해야함
   ㅤ→ Alignment 문제
   - Alignment 해결은 사람이 평가하기 어렵고 시간이 많이 걸림
   - Scalable Alignment 기술을 테스트 하기 위해 책 전체를 요약하는 모델을 훈련시켰음
   ㅤ→ 책을 섹션단위로 요약한 후에, 그 요약을 다시 상위레벨에서 요약하는 방식으로 최종 요약이 될때까지 요약해 나감
   ㅤ→ 26449 단어 짜리 ""이상한 나라의 앨리스""를 136단어로 요약
   ㅤ→ GPT-3 에서 미세 조정한 것으로, 사람이 작성한 요약의 평균 품질과 비슷한 수준의 훌륭한 요약을 생성해냄
"
"https://news.hada.io/topic?id=5112","CSS 미디어 쿼리는 가고 컨테이너 쿼리가 온다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       CSS 미디어 쿼리는 가고 컨테이너 쿼리가 온다

   - 반응형 페이지 만들때 스크린 사이즈가 아닌 컨테이너의 사이즈에 따라 변경하는 방식
   - 아직 스펙 초기 단계
   - 크롬에서는 플래그 설정시에만 지원되지만, CQFill 폴리필로 모든 브라우저에서 미리 적용 가능
   @container (min-width: 600px) {
   ㅤ.card {
   ㅤㅤdisplay: flex;
   ㅤ}
   }

   https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries
"
"https://news.hada.io/topic?id=5083","Show GN: NocoDB : 오픈 소스 Airtable을 소개합니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: NocoDB : 오픈 소스 Airtable을 소개합니다.

   오늘 GeekNews 포럼에서 NocoDB를 선보이게 되어 매우 기쁩니다.
   NocoDB는 무료 및 오픈 소스 Airtable 대안 솔루션입니다.
   우리는 불과 15주 전에 NocoDB를 출시했습니다. 그리고 우리는 이제 -
   - 2,000,000개 이상의 Docker 다운로드!
   - 17,500+개 이상의 Github 별점 획득! 💫 💫 💫
   - 1,600개 이상의 강력한 채팅 커뮤니티 활동!
   - 그리고 Runa Capital의 분석에 의하면 NocoDB는 2분기 동안 가장 빠르게 성장한 오픈 소스 프로젝트였습니다.
   그 누구도 이렇게 성장할 것이라고 예상 못 했습니다.
   그리고 많은 분들과 마찬가지로 우리도 출시일을 앞두고 걱정이 많았습니다. 하지만 우리는 커뮤니티의 반응에 완전히 압도되었습니다. 이제 GeekNews를 통해 제품정보와 일정에 대해 더 많이 공유하고 싶습니다.
   작동 방식은 아래와 같습니다.
   docker run -p 8080:8080 nocodb/nocodb
   or
   npx create-nocodb-app
   NocoDB는 간단하게 여러분의 데이터베이스에 연결하고 스마트 스프레드시트 인터페이스로 변환해 줍니다! 이를 통해 google/airtable 스프레드시트처럼 팀원들과 협업할 수 있습니다. 또한 REST 및 GraphQL API를 사용하여 이러한 스프레드시트에 프로그래밍 방식으로 액세스할 수도 있습니다!
   NocoDB는 현재 아래 DB와 협력하고 있습니다.
   MySQL
   PostgreSQL
   Microsoft SQL Server
   SQLite
   Amazon Aurora & MariaDB databases.
   우리 커뮤니티에 가입 바랍니다.
   📣 Github : https://github.com/nocodb/nocodb
   📣 Discord : https://discord.gg/5RgZmkW
   📣 Twitter : https://twitter.com/nocodb
   감사합니다. NocoDB 팀
   (내 한국어가 약하더라도 용서하십시오. 이것을 완료하기 위해 한국 친구의 도움을 받았습니다)

   정말 멋집니다!

   한국어 readme 초안 버전 : https://github.com/nocodb/nocodb/blob/master/markdown/readme/korean.md

   의견이 있으면 알려주십시오.

   Github에서 이 초안에 관한 Pull Request를 보냈습니다.
   I sent a Pull Request for this draft on Github.
   https://github.com/nocodb/nocodb/pull/582

   정말 고맙습니다. 병합되었습니다.

   Thank you for posting!
   런칭 축하드립니다.
   NocoDB 는 예전에 런칭하자 마자 제가 뉴스로 따로 올렸었는데, 이렇게 직접 개발팀에서 직접 올려주시니 좋네요.
   - NocoDB - 오픈소스 AirTable 대체제 https://news.hada.io/topic?id=4350
   국내에서는 아직 Airtable 자체가 많이 사용되지는 않아서 아쉽긴 합니다만,
   스프레드 시트 형태의 노코드 도구 작성도구는 회사의 사내도구 작성에 정말 유용합니다.
   유료 SaaS 도입을 꺼려하는 국내 회사들에게는 NocoDB가 훌륭한 대안이 될 것 같습니다.
   아직 GUI 쪽에 한글지원 부분은 없는거 같은데, 여기 올려주셔서 한국분들도 참여하시게 되면 좋을것 같네요.

   정말 고맙습니다
   아래는 언어에 대한 링크입니다

   https://github.com/nocodb/nocodb/blob/master/packages/nc-gui/lang/

   Thank you xGuru for spreading word!
"
"https://news.hada.io/topic?id=5151","Nios V - 인텔의 RISC-V 프로세서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Nios V - 인텔의 RISC-V 프로세서

   - 오픈소스 RISC-V ISA(Instruction Set Architecture)를 이용한 인텔의 FPGA 기반 차세대 소프트 프로세서
   - RISC-V: RV32IA 기반
   ㅤ→ 고성능, 5스테이지 파이프라인
   - Nios V 기반으로 General-Purpose / Application-Class / Linux-Capable 프로세서 등을 출시할 예정
   - JTAG 디버그 모듈 지원
   - 오픈소스 이코시스템 + 프리 라이센스
   - Intel® Quartus® Prime Pro Edition Software v21.3 에서 개발 지원

   FPGA 기반 RISC-V라면 CPU 하드웨어 업그레이드도 받을 수 있는 세상이 다가오고 있네요. 사용자 사용 형태별로 자주 사용되지 않는 어셈블리를 분석해서 자주 사용하는 연산에 관련된 코어 갯수를 동적으로 늘리고 줄이고가 가능하겠네요.

   이게 굉장한 이유는 에뮬레이션을 하면 CPU별 어셈블리어와 구조가 달라서 변환 과정을 거치는데 필연적으로 순정보다 리소스를 더 사용하는 경우가 많은데 스스로 설계가 가능하다면 한 프로세서 위에 X64와 ARM64도 이론상 하나로 만들어서 ARM 안드로이드 에뮬레이터 사용시 성능 하락이 거의 없어진다는 거죠. 전성비도 향상되구요.

   RISC-V를 재설계시키는 코어가 별도로 붙겠네요.

   - M1은 RISC-V의 상승을 예고한다 https://news.hada.io/topic?id=3447
   - 애플, RISC-V 프로그래머 구인중 https://news.hada.io/topic?id=4949
   - MIPS, 자체 아키텍처를 버리고 RISC-V로 전환 https://news.hada.io/topic?id=3859
   - SiFive 고성능 RISC-V 프로세서 공개 https://news.hada.io/topic?id=4545
"
"https://news.hada.io/topic?id=5149","120GB가 넘는 Twitch 데이터 유출 (소스 코드, 암호화된 비밀번호, 스트리머 정산액 등)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         120GB가 넘는 Twitch 데이터 유출 (소스 코드, 암호화된 비밀번호, 스트리머 정산액 등)

   *비밀번호를 즉시 변경하고 2FA를 활성화할 것을 권함*
   유출된 것으로 알려진 것들:
   - Twitch 전체 소스 코드
   - 2019년부터의 크리에이터 정산금
   - 모바일, 데스크탑, 콘솔 트위치 클라이언트
   - 소유권이 있는(proprietary) SDK 및 내부 AWS 서비스
   - 기타 Twitch가 소유한 것들: IGDB, CurseForge
   - 릴리즈되지 않은 Amazon Game Studios의 Steam 대상 경쟁작 (코드네임: Vapor) - https://twitter.com/Sinoc229/status/1445653203740098560
   - 트위치 내부 'red teaming' 툴
   등

   https://twitter.com/twitch/status/1445770441176469512?s=21
   Twitch가 공식 트위터를 통해 데이터 유출에 대한 사실을 인정했습니다.

   https://twitter.com/DraconTV/status/1445676501467164672
   독일의 한 스트리머가 유출된 데이터가 진짜라고 검증해줬습니다.

   와 이번 유출은 역대급이네요. 크리에이터 정산금 내역까지..
"
"https://news.hada.io/topic?id=5161","Quickemu - 윈/맥/리눅스 VM을 빠르게 생성 및 실행하는 리눅스용 툴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Quickemu - 윈/맥/리눅스 VM을 빠르게 생성 및 실행하는 리눅스용 툴

   - 명령 2개로 QEMU 기반으로 최적화된 윈/맥/리눅스 VM을 생성 및 실행
   ㅤ→ 자동으로 최신 OS이미지를 다운받아서 진행
   - macOS High Sierra/Mojave/Catalina/BigSur
   - Windows 8.1/10/11 TPM 2.0 포함
   - Ubunutu 모든 버전 (quickget)
   - 호스트/게스트 클립보드 복사를 포함한 SPICE* 지원
   - 게스트OS와의 파일 공유
   - USB / Smartcard pass-through
   - 자동 SSH 포트 및 네트웍 포트 포워딩
   - Full Duplex Audio
   - EFI 와 Legacy BIOS 부팅
   * SPICE : Simple Protocol for Independent Computing Environments
   맥 설치 및 실행 명령
   $ quickget macos catalina
   $ quickemu --vm macos-catalina.conf
   윈도우 설치 및 실행 명령
   quickget windows 11
   quickemu --vm windows-11.conf

   거의 허이퍼바이저 급으로 만들어놨네요. 대단합니다.
   개인적으로 저정도 기능을 바랄꺼면 아에 Proxmox같은 하이퍼바이저를 쓸 거 같아요.

   QEMU 는 정말 다양하게 잘 활용 되네요
   - https://news.hada.io/search?q=qemu
   QEMU 개발자인 Fabrice Bellard가 만든 다른 것들은 아래 댓글에 제가 적어 두었습니다.
   FFMPEG, QEMU, QuickJS, LZEXE, JSLinux..
   - https://news.hada.io/topic?id=59
"
"https://news.hada.io/topic?id=5074","JupyterLab 데스크탑 앱 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          JupyterLab 데스크탑 앱 공개

   - JupyterLab 의 크로스플랫폼 스탠드얼론 앱 배포판
   ㅤ→ 파이썬 환경과 유명 파이썬 라이브러리들을 번들
   ㅤ→ 맥/윈/리눅스용 원클릭 인스톨러 제공
   - 오픈소스 : TypeScript + Electron + conda/numpy/scipy/pandas/ipywidgets/matplotlib
"
"https://news.hada.io/topic?id=5123","LibreOffice 탄생 11주년","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          LibreOffice 탄생 11주년

   2021년 9월 28일, 리브레오피스(LibreOffice)가 출시된지 11주년 되는 날입니다.
   2010년 9월 28일, 리브레오피스(LibreOffice)가 온세상에 발표되었습니다.
   11년 후, 리브레오피스(LibreOffice) 프로젝트와 글로벌 커뮤니티는 FLOSS(Free/Libre Open Source Software)생태계에서 가장 큰 규모가 되었습니다.
"
"https://news.hada.io/topic?id=5104","Ask GN: 가장 사랑스러운 전자기기 / 가장 돈 아까운 전자기기 하나씩만 꼽아주세요!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Ask GN: 가장 사랑스러운 전자기기 / 가장 돈 아까운 전자기기 하나씩만 꼽아주세요!

   제 가장 사랑스러운 전자기기는: 로지텍 인체공학 키보드/마우스 세트입니다. 얘를 쓰고 손목 통증과 손가락 통증이 사라졌어요. 하루 종일 키보드 두들기는 저에겐 이젠 얘 없으면 일을 못할 정도로요.
   가장 돈 아까운 전자기기는: 서피스 프로 X요... 2 in 1 PC란 무엇인가, 사용자가 150만원을 내놓고 호환성 목록 표를 들고 다녀야 하는가, 그리고 생각보다 너무 무겁지 않은가, 왜 툭만하면 UI가 개판이 되는가, 얘 제조사랑 OS 제조사랑 같은 게 맞는가, 왜 MS Whiteboard는 선 그으면 뻗으려고 하는가. 왜 잠을 자면 가끔 영면을 한 다음 배터리를 다 갉아 먹는가, 등등. 수많은 물음표를 저에게 안겨주었습니다. 하지만 묘한 매력이 있어서... 방출을 못하고 있습니다. DeX나 iPad와는 근본적으로 데스크톱 UI를 그냥 그대로 있다보니까. 방출하긴 아깝더라고요. =ㅁ= 게다가 열도 안 납니다.

   사랑스러운 / MX master 시리즈 / 2S로 시작해서 3까지 넘어왔습니다. 상하, 좌우 스크롤 기능 유용하고 멀티페어링도 좋습니다. 무엇보다 엄지 쪽에 있는 제스처버튼을 창 전환에 사용하다보니 맥, 윈도우 둘다 매우 편리합니다.
   돈 아까운 / 맥북프로(인텔) / 회사에서 사용하는데 2년내에 배터리 안부푼 사람을 찾기가 어려울 정도입니다. 저도 벌써 두번 교체했습니다.

   MX Master 완전 좋져. 3을 가지고 있는데, Vertical이 손목이 편하다는 단 하나의 장점으로... 갈 곳을 못 찾고 있습니다. OTL
   인텔 맥북은 배터리 스웰링 문제가 심각한가보군여.

   사랑스러운: 한성 TFG ART 키보드 + 게이트론 백축 (슈퍼루브 스프레이 윤활), 직접 윤활하고 조립해서 더 애착이 가는 것 같습니다. 가볍고 편해서 좋더군요
   돈 아까운: ㅇㅋ 에서 나온 ㅎㅋ ㄹㅍㄹㅅ 3335 RGB 무선 게이밍 마우스, 4개월 썼는데 마우스 휠 내리면 위로 올라갔다 내려가는 문제 있더군요. 이 회사 마우스는 안사기로 했습니다

   역시 프로그래머의 손을 가장 많이 타는 게 키보드 / 마우스라 그런가 사랑스러워 하시는 분이 많군여 'ㅁ '!

   요즘 가장 사랑하는 전자기기는 SixKeyBoard 입니다.
   - https://techkeys.us/products/sixkeyboard
   제 업무중 중요한 이메일 과 기술뉴스를 보는데 필요한 단축키만 딱 정리해서 쓰는데 이거 없었으면 손이 많이 불편했을거에요. 그 옆에 StreamDeck 15키 버전도 있는데 빠르게 작업하는데는 이게 더 편한 것 같습니다.
   돈 아까운 기기는 현재 상태로 뛰어난 전용 게임이 별로 없는 PS5, XSX 정도가 들어갈 거 같네요. 힘들게 구했는데 좀 천천히 샀어도 되지 않았나 생각이..

   저도 PS5가 있어서 한동안 할 게임을 못 찾다가 리쳇 & 클랭크를 하고 있는데, 워우. 차세대 게임 느낌은 확 오더라고요. 그런데 한 1년 정도는 더 기다려야 할 만한 게임들이 나올 것 같습니다.

   구체적으로 쓰시는 인체공학 키보드/마우스 세트의 모델명이 어떻게 되나요? 지금도 손가락과 손목이 계속 아픈데 문림 프로젝트는 취소되었고 해서, 해외에서 파는 스플릿 키보드에 도전해야 하나 아니면 MS나 로지텍의 인체공학 키보드를 시도해야 하나 한창 고민중인지라 그게 더 궁금하네요.
   지금은 딱히 사랑스러운 전자기기는 없고, 대신 구입하고 싶은 것으로는 스팀 덱 정도가 있군요. 돈 아까울 정도는 아니지만 불만스러운 것으로는 사용하기 시작한 지 대략 1년차인 갤럭시 S20FE 폰이 있고요. 주된 불만은 2가지인데, 터치 오류가 잦다는 것과 지문인식 실패율이 높다는 것입니다. 바꾸고 싶긴 하지만, 아직 할부가 남아 있어서 최소 반 년 정도는 더 참고 쓸 예정이네요.

   로지텍 K860과 MX Vertical입니다. 'ㅁ '/ 인체공학 인증도 받았어용!

   정보 감사합니다.
   문제는 찾아보니 세트 가격이 무려 28만원(http://prod.danawa.com/info/?pcode=13717385 기준)에 달한다는 것인데… 고민되는군요.

   저는 제가 들고 있던 리얼포스를 매각해서 샀어용 ㅋㅋㅋㅋ... 도저히 손가락이 아파서 더 이상 못 치고... 먼지만 쌓여갈 것 같아서 새로운 키보드의 양분으로 삼았습니다.
   회사부터 마우스 + 키보드를 바꿨었는데, 회사에서 마우스 + 키보드 모두 지원해줘서 써보다가 집에도 바꿨어요.

   저희 회사는 내규상 개인이 직접 키보드 등의 장비를 구입해서 사용하지 못한다고 하네요. 문제는 비싼 키보드를 쓰려면 사장님까지 결재가 올라가서 사장님을 직접 대면 설득(!)해야 한다는 모양이라… 저희 팀의 팀장님이 그렇게 해서 리얼포스와 MX Vertical을 쓰고 계시기는 한데, 이제 입사 1년차인 꼬꼬마가 도전하기에는 솔직히 좀 부담되네요.

   크흑... 아니면 하나만 바꾸시고 차근차근 바꾸시는 것도 좋습니다. 집에는 처음에는 마우스만 바꿨다가, 한 6개월 있다가 키보드도 바꿨어용. 개인적으로는 키보드를 먼저 바꾸는 편이 좋은 듯여.

   결국 로지텍 ERGO K860 + MX VERTICAL 세트를 질렀습니다. 오늘 집으로 배송되어 왔길래 만져보고 있는데, 타자연습 사이트에서 1시간 정도 문장 연습을 하니 어느 정도 손이 적응하는 것 같군요. 키보드는 키압이 조금 낮았으면 좋겠고, 마우스도 휠 클릭할 때 힘이 너무 들어가는 것이 조금 아쉽습니다. 그래서 마우스의 경우 앞으로/뒤로가기 버튼을 커스터마이징해서 휠 클릭으로 쓰고 있네요. 나머지는 좀 더 써봐야 알 수 있을 것 같습니다.
"
"https://news.hada.io/topic?id=5073","Ask GN: 다들 어떤 의자 사용하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Ask GN: 다들 어떤 의자 사용하시나요?

   재택을 하면서 좋은 의자에 필요성을 절감하네요.
   혹시 어느 의자를 사용하시나요?

   두달전에 제가 비슷 질문을 한게 있으니 거기 답변들도 참고하세요 ㅎㅎ
   https://news.hada.io/topic?id=4633
   저는 허먼밀러 Aeron 사용중이고, 다음번에는 허먼밀러 Cosm으로 가려고 합니다~

   허먼밀러 에어론 사용하고 있습니다!
   기존에는 식탁 의자를 사용하고 있었는데 바꾸고 의자의 중요성을 엄청나게 느끼고 있습니다 ㅎㅎ
"
"https://news.hada.io/topic?id=5103","Vintage Apple","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Vintage Apple

   - 애플의 초기시절 매뉴얼, 관련 잡지와 책의 스캔본들을 모은 사이트
   - MacWorld 1984-2005
   - Byte Magazine 1975-1998
   - Apple Develop Magazine 1990-1997
   - 예전 Apple II, Mac , Lisa 등 관련 서적들
   - 그외 다수
"
"https://news.hada.io/topic?id=5138","Brave와 Firefox, 강제로 Edge로 열리는 링크를 인터셉트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Brave와 Firefox, 강제로 Edge로 열리는 링크를 인터셉트

   - MS는 자신들의 앱(검색,위젯,Cortana,메일 등)에서 URL 오픈시 강제로 Edge로 가게 하기 위해서 ""microsoft-edge:"" 라는 커스텀URL 스킴을 이용
   - Brave는 지난주 1.30.86 버전부터 이 URL스킴을 지원해서 가로채기가 가능
   - Firefox도 해당 URL 스킴 지원하는 패치가 올라와 있음
   - 구글 크롬도 iOS에서 비슷한 동작을 하기 위해 2014년 부터 ""googlechrome:"" 이라는 커스텀URL 스킴을 사용하고 있음
   - Brave는 이걸 넘어서 윈도우 검색/Cortana 자체에서 Bing 검색 하는 것을, 사용자의 기본 검색엔진으로 바꾸는 게 가능하도록 계획 중
"
"https://news.hada.io/topic?id=5129","Sorrygle - 소리글. MIDI로 컴파일되는 작곡용 프로그래밍 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Sorrygle - 소리글. MIDI로 컴파일되는 작곡용 프로그래밍 언어

   - 코드를 실행해볼 수 있는 놀이터 제공: https://sorry.daldal.so/sorrygle
   ## 제작배경
   저자는 채팅 커뮤니티의 지인들과 악상을 공유하기 위해 작곡 프로그램인 MuseScore를 이용해 왔음
   새 음악 프로젝트를 만들고 음악 파일로 출력해서 파일 업로드하여 공유하는 일련의 과정이 번거로웠음
   짧은 코드로 채팅창에서 바로 공유할 수 있도록 MML(Music Macro Language) 등 작곡 프로그래밍 언어 사용을 검토
   MML에서는 스타카토, 스포르잔도, 크레센도, 꾸밈음 등을 간결하게 표현할 수가 없어서 새로운 문법을 고안하고 구현

   소리글의 저자인 쪼리핑님은 유명 오픈소스 끝말잇기 온라인 게임 끄투의 개발자이기도 하십니다: https://github.com/JJoriping/KKuTu

   끄투가 오픈소스였다니 대단하네요. 소리글도 정말 직관적이고 잘 만든 오픈소스같은데 제가 음악에 문외한이어서 더 못만져보는게 아쉽습니다.
"
"https://news.hada.io/topic?id=5092","파일을 보관하는 방식과 세대 차이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           파일을 보관하는 방식과 세대 차이

   - 지금 대학생들응 디렉토리나 폴더 같은 개념 자체를 잘 모른다.
   - ""그러니까 젊은 학생들은 살면서 주어진 일을 하는 데 폴더나 디렉토리가 필요했던 적이 없던 거죠. 검색하면 다 찾을 수 있었으니까요.""
   - 자신이 구축한 디렉토리 체계에서도 찾지 못했던 중요한 문서나 약속 일정을 컴퓨터의 검색 기능을 통해 찾게 된 경험을 하고 나서 그런 생각은 확신이 됐습니다. “와, 이 모든 하위 폴더들이 다 소용없는 것일 수도 있겠다고 생각하게 됐어요.”
   ---
   3줄 요약이 어려워서 포탈 연예 뉴스면 마냥, 눈에 들어오는 문장들로만 가져왔습니다.
   오늘 얼핏 보다가 제 다운로드 폴더에 파일 1200개 있는 걸 알게 되었는데, 저도 점점 정리를 안하고 검색하는 쪽으로 가는 듯 한거 같긴 하데, 다들 어떠신가요? 정리 하시는 편이신가요? 아니면 검색 하는 편이신가요?

   기사 첫머리에 나온 얘기는 학생들이 디렉토리의 개념 자체를 모른다고 하지만... 뒤에 이어지는 내용을 보면 폴더를 쓰긴하되 예전 사람들처럼 구조적으로 정리하진 않는다, 정도 같네요.
   바탕화면이 꽉 찰때까지 파일들을 늘어놓다가 바탕화면이 꽉 차면 폴더하나에 전부 우겨넣는 식으로 관리하는 친구가 생각나네요.

   저는 파일을 보관할 때는 디렉터리 나눠서 맞게 저장을 하지만,
   정작 파일을 다시 열거나 찾을 때는 디렉터리로 찾아들어가기보다
   spotlight로 단번에 검색을 하는 것 같아요

   ""그런데 지금 대학생들에겐 디렉토리나 폴더 같은 개념 자체가 무척 낯섭니다""
   ...어떤 식으로 상상해봐도 이해할 수 없는 에피소드네요.

   아래 달았던 댓글로 대신 합니다~
   https://news.hada.io/comment?id=7029

   저장을 계속 할거라면 상관없지만
   언젠가 삭제할거라면 어찌됐든 정리를 해야되지않나 싶네요.

   디렉토리 개념 자체를 모른다는 주장은 신뢰가 안가네요.

   옛날에는 먼길을 갈때 주소를 가지고 지도를 보며 다 찾아 갔지만
   지금은 네비를 써서 그런거 신경 안쓰고 찾아가듯이
   파일을 찾아가는 방식도 바뀐거 같네요.
   저도 spotlight와 everything으로 인해 더이상 파일을 폴더 관리해서 넣어두는게 아니라 그냥 날짜별로 쪼개 두거나 하는 경우가 늘어나고 있습니다. 다만 적절한 이름이 생각 안나면 저도 고통...

   맥에서는 spotlight 검색과 태그 기능을 쓰고 윈도우에서는 everything으로 그냥 검색합니다
   파일명만 잘 지어놓으면 되니..ㅎㅎ

   저는 이 글의 제목만 이해하고 내용은 잘 이해를 못 하겠더라구요. 번역 문제는 아닌듯 한데..
   아직까진 폴더 단위로 정리하는 걸 선호하긴 합니다. 검색으로 모든 걸 찾을 수 있으면 좋을텐데, 수많은 파일의 종류와 메타데이터 들을 다 인식하고 검색해주는 그런 환경은 아직인거 같아요. 물론 언젠가는 그런 날이 올 수 있을거라고는 생각합니다.
   ""고양이""를 검색하면, 고양이 사진, 고양이/Cat 글자가 들어간 사진 및 DOC/PDF들, 고양이와 관련된 영상과 음악들, 고양이를 키우는 친구들의 목록, 고양이 관련 커뮤니티 방문내역 및 봤던 글들, 고양이 관련 물품 영수증과 구매내역 등등이 한번에 나오는 날이 언젠가는 가능하겠죠.. ?

   아이폰을 쓰신다면 100%, 안드로이드 폰을 쓰신다고 하셔도 아마도 스마트폰에서 폴더 별로 나누고 파일/사진/음악을 관리하는 방식을 생각해보시면 이해가 되실거 같아요.
   본문에 나온 ""학생들 생각 속엔 폴더나 주소 개념이 없었어요. 컴퓨터가, 아니 이 세상이 그냥 커다란 하나의 바구니고, 그 안에 다 같이 섞여 사는 거예요.” 문장과, 스마트폰에서 파일 관리하는 우리 모습과 별반 다르지 않거든요.
   생애 첫 컴퓨터가 아이폰이고, 보조나 일 때문에 쓰는 기계가 일반 컴퓨터라면 글에 나온 대학생 친구들처럼 파일을 관리하는 모습이 이상하진 않은 것 같다는 생각이 들더라고요. 저희도 스마트폰을 쓸 땐 그러고 있으니.

   ""아마도 2017년 무렵일 겁니다. 천체물리학자 캐서린 갈란드 교수가 처음으로 이 문제를 인지한 시점 말입니다. 갈란드 교수의 공학 과목을 듣는 학생들은 시뮬레이션 소프트웨어를 이용해 제트엔진 터빈을 만들어보는 과제를 제출해야 했습니다""
   2017년에 제트엔진 터빈 시뮬레이션을 만드는 수업을 듣는 학생들이 디렉토리가 뭔지도 모른다는 게 대체 무슨 상황인지 이해가 안됩니다 저는.

   저도 대체 외장하드 어느 구석에 박혀 있는지 도저히 찾지 못하던 파일을 everything 검색 한방에 찾는 경우가 꽤 많다 보니, 갈수록 파일 정리라는 걸 안 하고 그냥 대충 정해진 폴더에다 던져넣는 경우가 늘고 있습니다. 자주 쓰는 파일이면 서브 디렉토리를 만들어서 거기다가 몰아넣어 두고요. 문제는 그러다 보니 파일 이름을 짓는 것이나 혹은 적절한 검색어를 바로 떠올리지 못했을 때 좀 골치아파지더라고요.

   저는 문서 파일명에
   날짜 - 주요 내용 - 정리(발표자) - 주요 단어(한글,영어) . 확장자
   형태로 만들어 둡니다.
   그래서 긴 파일명은 70글자가 되는 경우도 있습니다. ㅎㅎ
   그리고 everything 으로 파일명을 검색해서 사용합니다.
"
"https://news.hada.io/topic?id=5114","AWS, ARM기반 Lambda 공개기반 Lambda 공개

   - AWS Graviton 2 ARM 프로세서로 호스팅 되는 AWS Lambda
   - 19% 더 나은 성능을 보이지만, 20% 더 저렴
   ㅤ→ 가격/성능이 최대 34% 까지 개선
   - 한국 리전은 아직 지원 안함 : Asia 싱가폴/시드니/도쿄, US N. Virginia/Ohio/Oregon, Europt Frankfurt/Ireland/London

   ARM 기반이면 단점은 뭘까요? ...

   람다는 현재로선 대부분 JS로 돌아갈테니까, 혹시나 X86 관련 코드를 사용하는 아주 특별한 경우 아니면 단점이 거의 없을거 같아요.
"
"https://news.hada.io/topic?id=5186","브라우저와 HTML을 어뷰징 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           브라우저와 HTML을 어뷰징 하기

   - 웹의 기능들을 의도하지 않은 용도로 사용하는 것들을 여러 예제를 통해서 시험해본 웹사이트
   - 황당한 UI와 아이디어가 가득. 소스 코드에 대한 설명 포함
   - Popup Trombone : 윈도우 크기로 트롬본 연주
   - Inspect This Snake : 인스펙트 창에서 스네이크 게임 실행
   - Bubble Tape Text : 스크롤로 텍스트 써진 Tape 움직이기
   - URL에서 애니메이션 하기
   * 대부분 팝업블로킹을 꺼야 동작됩니다.

   와... 진짜 황당한데 영감이 샘솟는 예제가 많네요 ㅋㅋㅋ
   트럼본은 진짜 깜짝 놀랐고, reCAPTCHA가 둥둥 떠다니는 Captcha Hunt도 아이디어가 진짜 재밌네요 ㅎㅎㅎ
"
"https://news.hada.io/topic?id=5175","Keybase가 Zoom에 인수된 후의 커밋 그래프","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Keybase가 Zoom에 인수된 후의 커밋 그래프

   - 작년 5월에 Zoom 이 Keybase 인수한 후 거의 커밋이 없음
   - 최소한의 유지보수만 하는 수준
   - 인수시에 Keybase팀은 Zoom의 보안을 강화하는 것을 최우선 과제로 한다고 발표 했고, 그대로 나타나고 있음

   Zoom이 Keybase를 인수 https://news.hada.io/topic?id=2040
   Keybase가 서버 쪽을 오픈소스로 풀어주면 좋겠지만, 그렇게는 아마 안될것 같고..
   https://keys.pub/ 이 그나마 대체할 오픈소스로 선택받는듯 합니다.
"
"https://news.hada.io/topic?id=5134","Gollum 5.0 - Git-Based Wiki","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Gollum 5.0 - Git-Based Wiki

   - Git 저장소와 로컬 프론트엔드로 구현된 간단한 위키 오픈소스
   - 텍스트/마크다운/RDoc 및 github-markup을 통해서 다양한 마크업 지원
   - 폴더 형태로 페이지 구성
   - 이미지/PDF/헤더/풋터 등 포함 가능
   - 자신의 에디터/IDE 또는 내장 웹 편집기로 수정 가능
   - 다양한 추가 기능 지원
   ㅤ→ UML 다이어 그램 (PlantUML)
   ㅤ→ BibTex & Citation
   ㅤ→ Annotation (CriticMarkup)
   ㅤ→ 수식 (MathJax)
   ㅤ→ Macro, Redirects
   ㅤ→ RSS Feed
   - 루비 오픈소스
   ㅤ→ rugged 로 유닉스 기반 시스템들 지원
   ㅤ→ JRuby에서도 실행가능 (윈도우에서는 JRuby에서 실행됨)
"
"https://news.hada.io/topic?id=5088","Rust로 라즈베리 Pi용 임베디드OS 만들어보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Rust로 라즈베리 Pi용 임베디드OS 만들어보기

   - ARM64에 익숙하지않은 취미 OS 개발자들을 위한 튜토리얼
   - 단계별로 Monolithic OS 커널을 밑바닥부터 작성해보기
   - 시리얼 콘솔, 가상메모리, HW예외 처리등 일반적인 OS기능들을 Rust의 특징을 이용해서 작성해보기
   - 16단계로 구성. 각 단계당 부팅 가능한 커널 바이너리 포함
   - 이전 단계를 계속 확장해가는 형태
   - Raspberry Pi 3과 4가 메인 타겟이지만 다른 CPU로도 충분히 포팅 가능
   튜토리얼
   1. Wait Forever
   2. Runtime Init
   3. Hacky Hello World
   4. Safe Globals
   5. Drivers: GPIO and UART
   6. UART Chainloader
   7. Timestamps
   8. HW Debugging using JTAG
   9. Privilege Level
   10. Virtual Memory Part 1: Identity Map All The Things!
   11. Exceptions Part 1: Groundwork
   12. Integrated Testing
   13. Exceptions Part 2: Peripheral IRQs
   14. Virtual Memory Part 2: MMIO Remap
   15. Virtual Memory Part 3: Precomputed Translation Tables
   16. Virtual Memory Part 4: Higher-Half Kernel
"
"https://news.hada.io/topic?id=5141","Show GN: 화상회의/녹화/AI받아쓰기 한 번에 브라우저에서 ATEND","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: 화상회의/녹화/AI받아쓰기 한 번에 브라우저에서 ATEND

   안녕하세요!
   geeknews에 현재 저희 팀에서 개발 중인 프로덕트를 소개해보고자 합니다. :-)
   요즘 STT도 생활에 많이 스며들어오고 있고, 화상을 통한 대화 서비스도 있는데 이 부분들이 파편화 되어있거나 연동이 불편한 부분이 있는 듯 합니다. 그리고 대부분 STT를 지원하는 서비스는 영어뿐인 상황이죠.
   ATEND는 기록과 정보의 조회/검색/편집/공유를 통한 업무 생산성과 효율을 높이는 비대면 솔루션 입니다. 크롬 브라우저로 ATEND에 접속해 불편한 연동 없이 아래 기능을 모두 사용하실 수 있어요.
   그리고 제일 중요한 가격은 현재 베타기간으로 ""무료""로 사용하실 수 있습니다.

   활용 추천!
   1. Weekly 1 on 1 meeting
   1 on 1 을 진행하실 때 녹화하시면 내용을 기록해 회고가 가능하며, 곧 업데이트 되는 결과공유 기능(11월 업데이트 예정)으로 당사자와 함께 기록을 계속 볼 수 있어요. 보다 깊이있는 대화와 발전이 가능합니다.
   2. 외부 참여 회의
   앱/프로그램 설치없이 크롬 브라우저에 최적화되어, 로그인만으로 웹 상에서 화상회의와 녹음 그리고 결과 받아쓰기와 편집까지 한 번에 사용하실 수 있습니다. 또한 링크만 전달하면 가입하지 않은 사용자들도 PC/모바일로 회의 참여가 가능해요.
   3. 컨설팅/상담
   요즘 다양한 서비스를 통해 비대면 컨설팅, 상담을 진행하시는 경우가 많은데, 이 때 녹화 내용을 남길 수 있어 관련 내용을 회고하거나 상담자에게 공유해줄 수 있고(결과공유 기능 11월 업데이트 예정), 나만의 또 다른 컨텐츠로 활용하실 수 있습니다.
   4. 회사 회의시
   본인 PC/모바일을 녹음기 삼아 웹에서 실행해 현장 음성을 받아 쓸 수 있습니다.

   자세한 내용은 아래 사용가이드에서 확인하실 수 있습니다.
   ATEND 사용가이드 : https://seasoned-alyssum-113.notion.site/ATEND-807909c4e2ea42ee9bae81c…

   앞으로 더욱 발전시켜 갈 예정이기에 많은 피드백 부탁드리며,
   이렇게 시간내어 글 읽어주셔서 감사합니다. :-)

   런칭 축하드립니다! 기억력이 안 좋다보니 미팅을 기억하는 영역에 관심이 많아서 좋은 제품 나오기를 기대하고 있습니다.
   한 가지 질문이 있는데요, 혹시 녹화를 시작하면 회의에 참여하고 있는 상대방도 녹화가 시작됐다는 걸 알 수 있는건가요?

   안녕하세요!
   네, 녹화가 시작되면 참여인원 모두에게 녹화 상태를 알리는 표시와 함께 녹화 시간 카운트가 시작됩니다.
   그렇기에 녹화가 진행 중이라는 사실을 참여자 모두가 충분히 인지할 수 있습니다. :-)

   Descript 첫페이지 영상 대박이네요ㅎ 위트있고 써보고싶다는마음이 확들었습니다

   ATEND도 써보고 싶다는 마음이 확 드시도록 잘 준비해보겠습니다.ㅎㅎ

   런칭 축하드립니다!
   요즘 화상 회의가 원체 많아지니까, 이런식으로 기록해두고 다시 볼수 있는 플랫폼들이 유용한 듯 합니다. 대기리스트 상태여서 바로 써볼수가 없어 페이지에 대한 첫 인상 부분만 피드백 해봅니다.
   첫페이지에 제품에 대한 소개가 너무 없는듯 합니다. 사용가이드 페이지 가서도 좀 뒤져봐야 알 수가 있는데요. 첫페이지에 위에 적어주신 서비스 특장점 소개가 이미지와 함께 있으면 좋을것 같아요. 간단하게 사용 영상을 보여주면 더 좋고요.
   베타 신청에 너무 많은 정보를 입력해야 하는듯 합니다. 연령/성별/업계/회사규모/직함이면 유료 솔루션의 데모 요청 수준으로 받는 건데요. 지금 만드시는 팀에 대한 정보가 전혀 공개 안된 상태에서 이걸 베타 사용자에게 다 입력 받으시는건 큰 허들이 될 것 같습니다. 이메일로 신청받아서 실제 사용해보거나 한 다음에 몇번 사용하면 그때 추가 정보를 받도록 플로우를 짜면 좋을 것 같아요.
   사람들이 Atend 페이지에 들어오는 기회는 여기 긱뉴스를 통해서든 다른 사람 소개를 통해서든 딱 1번이라고 생각이 들어요. 그 한번에 어 이거 좋네 라는 생각이 들지 않으면 안된다고 봅니다.
   많은 기능을 만드신 것 같은데, 더 편하게 보여주는 방법을 고민해 보시면 좋을것 같습니다. 이쪽 도구중에서 첫페이지 영상만 보고도 혹했던 descript 가 생각이 났습니다.
   https://www.descript.com/
   아직 제가 써보지 못한 상태에서 쓰는거라 이정도 밖에 피드백을 드릴수가 없네요. 응원합니다!

   안녕하세요!
   1) 랜딩페이지를 지금 준비 중인데 역시 중요성이 크다는 걸 다시 한 번 느낍니다 ㅠㅜ descript 영상은 참 잘 만든것 같습니다! 저희도 설명도 잘 하면서 끌릴만한 영상이나 내용으로 1번의 접속으로 좋다는 느낌이 들도록 준비를 잘 해보도록 하겠습니다.
   2) 베타 신청시 정보가 많은 부분에 대해서도 내부 논의를 다시 진행해보도록 하겠습니다.
   소중한 피드백 감사드립니다. :-)

   기존 상용 솔루션들(ex. nCloud Clova STT)과 다른 방식으로 STT 모델이 구축되어있는걸까요?

   네, 여타 클라우드에서 제공되는 STT와는 다른 모델을 사용합니다.
   저희는 인공지능 기술을 연구개발하고 있는 액션파워라고 합니다.
   2017년말부터 인공지능 받아쓰기 서비스 다글로 (https://daglo.ai)를 운영하고 있으며,
   오랜시간 운영하며 쌓은 기술력과 학습 데이터를 바탕으로 서비스에 적합하게끔
   자체개발한 STT/화자분리/자연어처리 모델을 사용하고 있습니다.
   특히 고객님들께서 보내주신 피드백들을 기반으로, 실제로 사용하시는 사용 케이스에 적합하게끔
   다양한 녹음환경을 고려하는 동시에, 분야별로 주로 사용하시는 언어를 잘 알아들을 수 있는
   특화된 받아쓰기 모델을 구현하여 높은 정확도를 달성해 나아가고 있습니다. :-)

   궁금한 부분 말씀해주셔서 감사합니다. 탄탄한 내공이 있어 보이네요. ㅎㅎ
"
"https://news.hada.io/topic?id=5121","500줄의 코드로 셀프파킹 자동차 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         500줄의 코드로 셀프파킹 자동차 만들기

   - 유전 알고리듬(Genetic Algorithm) 기반으로 자동차가 셀프 파킹 가능하도록 훈련 시키기
   ㅤ→ 세대(Gen)를 진화해 갈수록 똑똑해짐
   - 시뮬레이터를 통해서 진화 과정을 보고, 파라미터 조정해서 테스트 가능
   - TypeScript로 구현된 오픈소스
   ㅤ→ 단계별로 코드를 상세히 설명
"
"https://news.hada.io/topic?id=5106","Simula One - Linux기반 사무실용 VR 기기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Simula One - Linux기반 사무실용 VR 기기

   - 실제 업무를 하는 용도로 제작된 스탠드얼론형 VR 헤드셋
   - Persistent ""Always On"" 컴퓨팅 : 계속 쓴채로 걷고 생각하기
   - 헤드셋 카메라 뷰 지원(키보드 및 주변을 보기)
   - 10x 많은 스크린과 집중도
   - Ultraleap 을 이용한 6DOF 핸드 트래킹
   ㅤ→ 6 자유도(Degrees of Freedom) : 3개의 방향축과 3개의 회전축
   - 블루투스 키보드/마우스 연결
   - Highly Customizable한 오픈소스 OS인 SimulaOS를 사용
   ㅤ→ 리눅스 데스크탑에서 실행되는 앱들과 호환(Firefox, LibreOffice, Emacs, Vim..)
   ㅤ→ 선명한 텍스트 품질
   ㅤ→ Godot 게임 엔진 기반
   ㅤ→ HTC Vive, VivePro, Valve Index 와도 동작
   - 현재 대기자리스트에 등록 가능

   리누스 토발즈가 자서전에서 말하길 모든건 생존-소셜-오락의 단계를 거친다고 하는데요. 인터넷도 정보를 얻는 도구에서, 페이스북 같은 소셜 서비스가 나타났다가, 이젠 틱톡같은 오락성 강한 숏폼 서비스가 나타난것처럼요.
   역으로 보면, 무언가가 오락의 도구로 대중화되려면 생존-소셜의 단계를 거쳐야 된다고 생각해요. 그래서 오락도구로써 vr이 대중화되려면 우선 비즈니스 도구같은 생존도구로 정착을 하는 과정이 필요하지 않을까? 하는 생각을 했었는데, 그래서 그런지 이런 vr을 업무에 도입하는 뉴스들이 재밌게 느껴지네요.

   윈도우 환경도 지원하고, 오래 착용했을 때 불편하지 않다면 구입하고 싶군요.

   인텔 CPU를 쓰는 걸로 보아 아마 윈도우도... 되겠지만 소프트웨어 지원이 중요하겠네요.

   Godot 게임 엔진이면 윈도우 빌드를 뽑아서 해결할 수도 있을 것 같은데...

   아직 공개하기엔 이른 단계라고 창업자들이 직접 댓글을 적었네요. 몇주내에 실 사용 영상들 및 프로토타입을 공개할 것이라고
   - https://news.ycombinator.com/item?id=28695455

   - 2.5년간 1주에 40-50시간 업무용으로 VR을 사용한 사람의 후기 https://news.hada.io/topic?id=5099
   이 글과 연결지어 보면 되겠네요. VR을 업무에 적용하려는 시도들이 점차 많아질 듯
   - 6 DoF 가 무슨 뜻이죠? https://www.inven.co.kr/webzine/news/?news=219448&site=vr
"
"https://news.hada.io/topic?id=5155","애플, 내년 1월 31일부터 앱 내 계정 삭제 기능 필수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플, 내년 1월 31일부터 앱 내 계정 삭제 기능 필수

   - 지난 6월에 발표한 App Store 심사 지침 5.1.1 업데이트로 개인 데이터에 대한 사용자 관리 권한이 더욱 강화
   - 계정 생성을 허용하는 모든 앱은 ""사용자가 앱 내에서 계정을 삭제""할 수 있도록 허용해야 함
   - 이 요구 사항은 2022년 1월 31일부터 제출하는 모든 앱에 적용

   오 이거 좋네요.
   근데 안드로이드에서는, 애플처럼 강제하지 않는이상 크로스플랫 앱에서 기능 만들어놓고도, 삭제기능 뺄듯

   - App Store 심사 지침 변경 : 계정 생성 가능한 앱은 계정 삭제도 지원해야 함 https://news.hada.io/topic?id=4423
"
"https://news.hada.io/topic?id=5071","구글, 안드로이드에 리눅스 커널의 "Upstream First"  방식으로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              구글, 안드로이드에 리눅스 커널의 ""Upstream First"" 방식으로 전환

   - 다운스트림 패치로 악명이 높았지만 점점 더 많은 코드가 업스트림됨
   - 단편화를 줄이기 위해 Android GKI(일반 커널 이미지)로 전환중
   - LPC2021 컨퍼런스에서
   ㅤ→ Android 12 및 Linux 5.10 기반 GKI 이미지를 사용하여 단편화를 거의 제거했음
   ㅤ→ Android 12 GKI로 대부분의 벤더/OEM 커널 기능들이 리눅스 커널에 업스트림 되거나, 벤더 모듈/훅으로 분리되거나, Android 공통 커널에 머지 됨
   - 앞으로 2023~2024년까지 기술부채 줄일 것
   ㅤ→ 새로운 기능에 대해서 ""Upstream First"" 개발 모델을 추구
   ㅤ→ 구글은 현재 안드로이드 공통 커널에서 모든 Out-of-Tree 패치를 업스트림하기 위한 작업에 전념중

   '업스트림 퍼스트' 에 대한 이해가 적어서.. 찾아봤어요 https://www.redhat.com/ko/blog/what-open-source-upstream

   다운스트림 패치로 악명 = 안드로이드가 리눅스 커널을 사용하는데, 리눅스 커널을 받아다가 자신만을 위한 패치를 해서 안드로이드에는 사용하면서, 리눅스 커널 프로젝트에는 그 패치를 반영(기여)하지 않는 걸로 악명 높았다
   이런 의미인거죠?

   말씀하신 내용으로 이해하고 있습니다. 삼성 같은 경우 안드로이드 가져다가 커널관련 보안패치를 자체적으로 하면서 실제적으로 더 많은 보안구멍을 만들고 있어서, 구글이 싫어했다는 기사도 있었어요.
   https://news.hada.io/topic?id=1542
"
"https://news.hada.io/topic?id=5156","Firefox Suggest, 주소바 추천 창에 광고 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Firefox Suggest, 주소바 추천 창에 광고 도입

   - 주소창 입력시 사용자에게 상황에 맞는(Contextual) 추천을 제공
   ㅤ→ 기존에는 방문기록, 북마크, 열린 탭들, 검색 엔진 정도를 포함
   ㅤ→ 92버전 부터 여러 파트너 등을 통한 콘텐츠 제안이 가능
   - 사용자가 ""Allow suggestions"" 클릭하여 Opt-In 해야하며, 현재는 미국내에서 만 동작
   - 사용자의 쿼리 및 클릭 데이터는 모질라의 프록시를 통해서 파트너들에게 제공
   - adMarketplace 가 광고 파트너

   Opt-In 해야 하는 것이고, 이 정도면 많이 방해가 될것 같지는 않네요. 한국에 활성화 될지는 모르겠지만..
   저는 과하지 않은 약간의 광고는 사이트들 운영에 도움 된다고 보는 편이긴 합니다.
"
"https://news.hada.io/topic?id=5153","SQLime - 온라인 SQLite Playground","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SQLime - 온라인 SQLite Playground

   ""JSFiddle for SQL""
   - sql.js 기반으로 최신 SQLite를 브라우저에서 실행
   ㅤ→ 뷰/트랜잭션/CTE/Window 등 전체 기능 지원
   - 로컬/리모트 SQLite 접속 지원 (파일 또는 URL)
   - DB와 쿼리를 GitHub에 저장해서 재사용 및 남에게 공유 가능
   - 모바일 지원
   - 오픈소스 : SQL.js + HTML/CSS/Vanilla JS

   Repo : https://github.com/nalgeon/sqlime
"
"https://news.hada.io/topic?id=5110","Ask GN: 프론트엔드 개발자를 위한 백엔드 가이드가 있을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 프론트엔드 개발자를 위한 백엔드 가이드가 있을까요?

   저는 스타트업을 다니고 있는 백엔드 엔지니어 입니다.
   저희 프론트엔드 팀에 비전공 출신 프론트엔드 개발자 분들이 들어왔는데요, 이 분들이 회사 생활을 시작하고 나서 개발 지식 확장에 어려움을 느끼시는 것 같더라고요.
   특히 저한테 프론트엔드가 배우면 유용할 것 같은 백엔드 가이드 혹은 책이 있냐라고 물어보시는데, 뭐부터 추천해야할지 감이 안잡히더라고요. 아무래도 다른 개발 방면을 조금 공부하고 오시는 전공자분들과는 다르니깐 어느 부분을 공부해보라고 추천드려야할지...TCP/IP 로우레벨 부터 알려주기도 좀 그렇고요.
   의지가 있으신데 바로 도움을 드리기가 곤란해서 미안해 지네요.
   나중에 백엔드 개발자와 소통하기가 편해질 수 있는 개발 공부 로드맵이나 책이 있으면 부탁드립니다.

   저는 우아한형제들에서 운영하는 비전공자 대상 백엔드 개발자 양성과정인 [우아한테크코스]를 나왔는데요, 여기서는 Java/Spring 기반 백엔드 위주의 교육 커리큘럼을 진행합니다. 프론트엔드 개발자를 위한 것은 아니지만, 비전공자 대상으로 백엔드 개발자의 길을 위한 로드맵을 제시하고 있기 때문에 충분히 참고할 만하다고 봅니다. 그 외에, 이런 로드맵의 원조인 roadmap.sh 에 나오는 내용을 참고하는 것도 좋을 것 같습니다.
   https://github.com/woowacourse/back-end-roadmap
   https://roadmap.sh/backend

   오 코스 내용이 좋네요. 특정 언어 (Java/Spring) 을 빼도 참고할 만하네요. 감사합니다!

   위 roadmap.sh 의 번역본도 있으니 참고하세요. https://news.hada.io/topic?id=1075

   오...좋네요. 감사합니다!
"
"https://news.hada.io/topic?id=5122","앱 비즈니스 성장을 위한 가이드북 by 구글 [26p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   앱 비즈니스 성장을 위한 가이드북 by 구글 [26p PDF]

   더 많은 앱 유저들과 밀접하게 상호작용하면서 앱의 성장을 가속화시키기 위한 방법
   - 다양한 비즈니스 목표별 앱 광고 활용법
   - 앱 성장을 가속화시키는 자동화 활용법
   - 전환 추적 설정, 목표 지정, 광고 소재 제작 및 딥 링크 구현 등 앱 광고의 주요 요소를 통해 빠르게 최적화를 실행하는 방법
   - 광고 효과 제고를 위한 권장사항
"
"https://news.hada.io/topic?id=5194","Rancher Desktop - Docker Desktop 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Rancher Desktop - Docker Desktop 대체제

   - 맥/윈도우 데스크탑용 쿠버네티스 및 컨테이너 관리 도구
   ㅤ→ 컨테이너 이미지 생성, 실행, Push & Pull
   ㅤ→ 쿠버네티스 버전 선택 지원
   ㅤ→ 로컬 쿠버네티스 환경에서 어플리케이션 개발
   - Electron + containerd, k3s, kubectl 등을 이용해서 개발

   docker desktop에서 가장 편리한 기능은 daemon을 윈도우가 뜰때 알아서 띄워주는거더라구요. wsl에서는 systemctl이 동작하지 않아 데몬 띄우는것도 귀찮고...
   내년 초까진 docker desktop을 사용해도 되니 그때까지는잘 버텨 볼려구요 ㅎ

   도커 데스크탑에 대입해서 생각하는 것보단 그냥 랜처 데스크탑을 새로 배운다고 생각하는게 좀 더 마음이 편한것 같네요. k8s를 이용하면서 docker 느낌으로 사용하는게 신선합니다.

   아직 M1 (Apple Silicon) 맥북은 지원하지 않고 있네요.
   https://github.com/rancher-sandbox/rancher-desktop/…
"
"https://news.hada.io/topic?id=5086","chezmoi - 여러 머신의 dotfile 통합 관리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     chezmoi - 여러 머신의 dotfile 통합 관리

   - 여러 환경(리눅스/맥/윈), 여러 장소(집/사무실)의 dotfile을 동기화해서 관리
   - GitHub/GitLab Repo 에서 파일들을 관리하고 curl/wget/scp등으로 쉽게 한번에 설치
   - 템플릿 지원해서 OS/아키텍처/호스트 이름별로 커스터마이즈 가능
   - 1Password, Bitwarden, LastPass 등과 연동 지원
   - 뭐가 변경되는지 확인하는 Dry Run 모드 지원
"
"https://news.hada.io/topic?id=5139","btop++ 1.0 - 쉽고 강력한 리소스 모니터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      btop++ 1.0 - 쉽고 강력한 리소스 모니터

   - bashtop/bpytop 의 C++ 재작성 버전
   - 프로세서, 메모리, 디스크, 네트워크, 프로세스 등의 리소스 모니터링 툴
   - 사용하기 쉬운 게임 형태의 메뉴 시스템
   - 전체 마우스 조작 지원
   - 프로세스 필터링 및 소팅, 시그널 보내기 지원
   - 네트웍 사용량 그래프, IO
   - 맥(1.1)/FreeBSD(1.2) 추가 예정
   - 1.3부터는 GPU 모니터링 지원할 것
"
"https://news.hada.io/topic?id=5147","Rowy - GCP를 이용한 오픈소스 Airtable 대체제 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Rowy - GCP를 이용한 오픈소스 Airtable 대체제

   - 구글 제품 기반으로 Airtable과 유사한 환경을 구성
   ㅤ→ 스프레드시트 UI로 Firestore 데이터를 관리(CRUD,Filter,import/export..)
   ㅤ→ 브라우저 상에서 Cloud Functions 로 기능 구현
   - 기본 제공 확장과 API/NPM 등을 통해 SendGrid,Algolia,Twilio 등과 연결
   - 사용자 관리 및 접근 권한 기능 내장
   - 모든 데이터는 GCP에 저장
"
"https://news.hada.io/topic?id=5146","Firefox 93 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Firefox 93 릴리즈

   - AVIF 이미지 포맷 지원
   - PDF 뷰어가 더 많은 폼입력 방식 지원
   - 윈도우 버전에서 시스템 메모리 부족시, 최종사용 시간/메모리사용량 등에 따라 ""탭을 자동 언로드""하여 OOM 크래쉬를 줄임. 해당 탭으로 전환시 그때 자동으로 리로드 함
   - 보안을 위해 HTTP 다운로드 및 샌드박싱된 iframe 에서 다운로딩하는 것을 차단
   - SmartBlock에 Referrer Tracking Protection 추가
   - ____________________ UI 구현
"
"https://news.hada.io/topic?id=5190","Scribe - Medium의 대체 프론트엔드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Scribe - Medium의 대체 프론트엔드

   - Medium의 글을 다른 정보들 걷어내고 글만 읽을 수 있게 보여주는 프론트 엔드
   - 도메인만 변경하는 것으로 바로 적용 가능
   - 크롬/FF/Edge/Opera 에서 Redirector 확장을 이용하면 자동으로 이용 가능
   - 사용자가 만든 북마클릿 및 Siri 숏컷으로 편하게
   - Crystal 언어 + Luck 프레임워크로 개발된 오픈소스
   ㅤ→ Repo : https://git.sr.ht/~edwardloveall/scribe

   HN에 댓글로 북마클릿 코드 골프가 열렸네요. https://news.ycombinator.com/item?id=28838053
   가장 작은 버전의 북마클릿
   javascript:l=location;l.href=""//scribe.rip""+l.pathname;
   Siri 숏컷
   https://www.icloud.com/shortcuts/d6782bdf84f94612a197ef410ec9f51e
"
"https://news.hada.io/topic?id=5162","xterm.js - 브라우저에서 터미널 UI 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      xterm.js - 브라우저에서 터미널 UI 만들기

   - VSCode, Hyper 등의 다앙한 IDE들의 터미널 프론트엔드 구성시에 사용중
   - bash, vim, tmux 등과 잘 동작
   - 빠른 속도. 별도 WebGL 렌더러 포함
   - 링크, 테마, 애드온, 스크린 리더 모드, Unicode 지원
   - 별도 의존성 없는 TypeScript 오픈소스
   - Electron 및 Node.js 에서도 사용 가능

   실제 사용 예제를 보면, 우리가 아는 대부분의 웹 기반 IDE에서는 다 사용중이네요.
   VSCode, RStudio, Theia, Azure Cloud Shell/Data Studio, Hyper, cPanel, Webssh, Linode, Codecademy, Repl.it, HashiCorp Nomad, GoormIDE (구름 반갑네요!)
"
"https://news.hada.io/topic?id=5109","Amazon 2021.9월 하드웨어 발표 총정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Amazon 2021.9월 하드웨어 발표 총정리

   - Astro : 집안을 순찰하는 홈 로봇. Alexa 내장. $1449 (선주문 $999)
   - Echo Show 15 : 벽에 부착하는 15인치 1080p Alexa 홈스크린. 카메라 내장. $250
   - Halo View 피트니스 밴드. $80
   - Halo Fitness and Nutrition 구독서비스
   - Ring Alarm Pro 홈 보안 시스템. 월 $20 구독서비스
   - Blink 비디오 도어벨. $50
   - Ring Always Home Cam : Security Drone 구입 등록 받기 시작. $250
   - Glow : 어린이용 화상전화 디스플레이 및 프로젝터(19인치 터치인식 공간을 생성) $249
   - Alexa 내장 스마트 온도계. $60

   한국은 아직 Alexa 서비스가 지원 안되서 기다려 봐야겠네요. SKT와 손잡고 서비스를 한다고 들었는데, 올 상반기 베타 테스트한 이후 아직인가봐요
"
"https://news.hada.io/topic?id=5137","MagInkCal - 벽에 걸어두는 E-Ink 구글 달력 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  MagInkCal - 벽에 걸어두는 E-Ink 구글 달력 만들기

   - Raspberry Pi Zero + Waveshare 12.48"" 3색(흰/검정/빨강) E-Ink 디스플레이 + PiSugar2(RTC 및 배터리 제공)
   - 구글 캘린더와 싱크해서 이벤트 표시 가능
   ㅤ→ 오늘 날짜 및 최근 추가된 이벤트는 빨간색으로 표시
   - 배터리를 내장해서 집안 어디나 걸어둘 수 있음
   - Python 오픈소스

   헛... 개인 프로젝트로 만들기 위해 전부 구매해 뒀던건데 오픈소스로 만들어졌다니... 게을렀던 자신을 반성해봅니다..

   디스플레이 가격대가.. 13인치 포터블 디스플레이 가격이랑 비슷하네요.
   배터리가 아니라 전원 연결해도 되는 거면, 포터블 디스플레이를 활용해서 만들어보는 것도 좋겠네요

   집에 안쓰는 킨들이 있다면 아래 방법도 있습니다.
   - 킨들을 저전력 대쉬보드로 사용하기 https://news.hada.io/topic?id=3664

   생각보다 괜찮아 보여요. 다만 다른 분께서 말씀해주셨듯이 디스플레이 가격이 조금 아쉽네요.
   렌더되는 부분이 css 형태로 되어 있는 것 같으니, 이 부분을 조금 수정하고 하나의 색만을 표현하는 디스플레이 모듈을 이용하면 레트로 느낌으로 조금 저렴하게 즐길 수 있지 않을까 싶어요.

   앙증맞고 이쁘네요. 토이 프로젝트로 딱이겠습니다

   배터리가 3-4주 간다는데 최적화 하면 조금 더 갈 수도 있을 것 같다고 하네요.
   하나 만들어 보고 싶긴 합니다. 근데 3색 E-Ink는 $179로 꽤 비싸군요.
"
"https://news.hada.io/topic?id=5085","GitHub Hotkey 1.5 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GitHub Hotkey 1.5 라이브러리

   - 특정 Element 에서 키 또는 키 시퀀스가 입력시 트리거 실행
   - 폼필드 의 포커스 이벤트 및 클릭이벤트 등도 트리거
   - data-hotkey 속성을 사용. 오버라이드 가능
   - 다양한 입력 방식 지원
   ㅤ→ ""s,/"" 멀티
   ㅤ→ ""Control+h"" 콤비네이션
   ㅤ→ ""g c"" 시퀀스 : g키 하위로 저장됨. ""g c"", ""g i""
   - 1.5.3 부터 scoped-hotkey 지원
   - GitHub이 만들고 사용중인 오픈소스
"
"https://news.hada.io/topic?id=5113","PostgreSQL 14 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           PostgreSQL 14 릴리즈

   - JSON 내부 데이터 접근 지원 :
   ㅤ→ SELECT ('{""a"": 1}'::jsonb)['a'];
   ㅤ→ UPDATE tb SET jsonb_field['a']['b'] = '1';
   - Multirange 타입 지원
   ㅤ→ SELECT '{[1,9), [20,30)}'::int4multirange;
   - 분산 워크로드 성능 향상
   ㅤ→ 논리 리플리케이션에 트랜잭션 스트리밍 지원
   - 어드민, 모니터링 & 옵저버블리티 관련 기능 추가
   - 병렬 쿼리, SQL 성능 향상 및 편의성 증대
   - CTE에 SEARCH/CYCLE 옵션 구현
"
"https://news.hada.io/topic?id=5152","테크컴퍼니즈 코리아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               테크컴퍼니즈 코리아

   - 한국의 주요 기술 회사들을 한페이지로 정리한 리스트
   ㅤ→ 시가총액 또는 기업가치, 투자현황, 매출, 영업이익, 직원수, 개발직군 학사 신입 연봉
   ㅤ→ DART 전자공시, 국민연금, 보도자료 등을 조합
   - 테크 대기업 : 네이버, 라인, 쿠팡, 카카오
   - 게임 3N + 크래프톤
   - 유니콘 : 기업가치 1조원 이상
   - 주요 스타트업 : 추정가치 1천억 이상 또는 700억 이상 투자
   - 네이버/카카오 주요 계열사

   요즘 신입이 부럽네요 ㄷㄷ 연봉이...후아...

   저 학사 신입 때 최저임금 수준으로 받았는데.. 요즘은 5천~7천이군요. 후아
"
"https://news.hada.io/topic?id=5142","하드웨어와 알고리즘 발전중 어느쪽이 더 빠를까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       하드웨어와 알고리즘 발전중 어느쪽이 더 빠를까?

   - 일반적인 두 발전을 비교하는 것은 불가능
   - 하지만 특정 알고리즘으로 한정한다면 비교가 가능할 것.
   - 주어진 식을 만족하는 해가 존재하는지 판별하는 SAT 문제(https://en.wikipedia.org/wiki/Boolean_satisfiability_problem) 를 기준으로 알고리즘과 하드웨어 발전 속도를 비교.
   - 하드웨어는 Pentium III processor (467MHz) + 1.5GB RAM (1999년을 대표), Intel Xeon Silver 4112 CPU (2.60GHz) + 128GB RAM (2019년을 대표), 두가지가 비교대상.
   - 200개의 인스턴스중 900초안에 풀리는 인스턴스의 개수를 측정함으로써 속도를 비교.
   - SAT 문제에 한해서는, 알고리즘의 발전이 하드웨어 발전보다 빠르다.
   - ""2019년에 가장 좋은 알고리즘으로 알려진 Maple SAT solver가 1999년 하드웨어를 쓴 경우 다른 알고리즘보다 약간 더 못푸는 경우가 발생했다. 저자들도 정확한 이유를 알지는 못하고, 아마 좋은 알고리즘에서 사용한 특정한 자료구조가 현대 하드웨어에 훨씬 적합한게 아닐까.. 같은 추측을 한다.""
"
"https://news.hada.io/topic?id=5157","Twitch의 나쁜 사용자 이름 체킹 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Twitch의 나쁜 사용자 이름 체킹 시스템

   - 유출된 Twitch 소스코드에서 뽑아낸 사용자명 체킹 시스템 코드
   - 분류별로 LIKE 와 SIMILAR TO 를 이용한 SQL 함수로 만들어 놓았음
   is_terrorism, is_child_exploitation, is_hateful, is_harassment, is_violence, is_tragedy, is_selfharm, is_sexual, is_drugs, is_derogatory, is_profanity, is_blasphemy, is_marijuana, is_sex_insult

   (o|0) , (f|ph) , (i|1|l|j|y) , (e|3) 등으로 글자 교체 시도들도 차단한게 재미나네요.
   120GB가 넘는 Twitch 데이터 유출 (소스 코드, 암호화된 비밀번호, 스트리머 정산액 등) https://news.hada.io/topic?id=5149
"
"https://news.hada.io/topic?id=5067","Ask GN: 서울을 벗어난 삶에대해 어떻게 생각하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask GN: 서울을 벗어난 삶에대해 어떻게 생각하시나요?

   저는 지방에서 10대시절을 보내고 상경하여, 현재 서울거주중인 30대 초반 신혼 개발자입니다.
   부동산가격, 재택근무의 보편화, 지방소멸 등의 이유로 서울을 벗어난 삶에대해 생각이 많아집니다.
   생각의 끝엔 항상 ""직장"" 이라는 문제가 발목을 잡네요.
   그러다보니 단순히 수도권에서 서울로 출퇴근하는 삶이 아닌,
   지방으로 내려가 새로운 가치를 만들며 살 수 있는 길이 있을까? 에 대한 생각이 들었습니다.
   다른분들도 이런생각을 하시는지, 서울을 벗어난 삶에대해선 어떻게 생각하시는지 의견을 듣고싶습니다 :)

   인구 10만 고향, 100만 학교, 그리고 직장 때문에 1000만 사는 서울에 올라온지 11년차인데요. 예전부터 가끔씩 ""시골쥐와 서울쥐"" 생각을 합니다. 차이점이라면 서울에 살고 싶어하는 서울쥐가 아니라, 강제로 서울쥐가 되어 버린거라 더 슬프달까요.

   ㅎㅎ재밌고 함축적인 비유군요

   4인가족을 외벌이로 꾸리고 있는 입장에서
   안정적인 삶을 살고 있는 수도권을 떠나
   지방에서 무언가를 한다는건 말 그대로 로망으로 남았네요 ㅎㅎ
   애들 대학교 졸업하고 취직해서 지들 밥벌이 할 수 있을때쯤
   은퇴하고 코딩하면서 살거라는 말은 종종 합니다.

   저의 경험을 이야기해볼께요.
   10대시절을 서울에서 보내고, SI업체에 취직하여 6년간 서울 생활했어요.
   결혼후 대전에 신혼집을 구하여 정부대전청사로 출퇴하였고, 그후 세종시에서 대전으로 출퇴근했어요. 여기서 5년 근무했어요.
   지금은 제주에서 풀재택근무하고 있어요. 이제 3년 지났어요.

   서울을 떠나고자 마음을 먹은 건 1시간 이상되는 출퇴근시간이 너무 길고 힘이 들었어요.
   그렇다고 출퇴근을 1시간 이내로 줄이는건 꿈도 못꾸지요. 돈이 없으니..

   대전으로 이직후 출퇴근 시간이 반 이상 줄어서 좋았고, 더불어 나의 시간을 가질수 있어서 더 좋았어요. 여유가 생기니 사이드 프로젝트도 이것저것 진행해보게 되더군요. 이때 만든 가계부는 아직도 잘 쓰고 있어요.
   크게 부족한게 없었어요. 서울에서 누릴수 있는 문화생활(?)을 제가 적극적으로 누리는 사람은 아니라서 그렇게 느낄수도 있었겠지만, 대형 병원, 큰 마트, 영화관 등등 왠만한건 다 있었어요. 30분만 나가도 녹음을 볼 수 있고, 천도 있어서 저녁마다 산책도 가능했어요.
   다만, 직장이 문제였어요. 거의 공공쪽 일들이라 제가 원하는 일은 아니었어요. 먹고 살려고 다니다가, 회사에서 눈치가 PM을 원하는 눈치라 어떻게된 되겠지하며, 퇴사했어요. 여차하면 판교로 출퇴근도 생각하고 있었어요.

   지금은 전 직장 동료의 소개로 제주에서 풀재택으로 근무하고 있어요.
   제주는 중소도시중에서 소도시라고 보면 되요. 대도시에 비해 기반시설이 부족하단 생각이 들어요. 쓰레기처리나, 하수처리같은 대도시에선 기본적인게 덜 되어 있어요.
   개인적으론 꽤 만족하지만, 포기하고 돌아가는 사람도 많아요. 직장문제로 돌아가는 사람도 꽤 있어요.

   어쩌다보니 초대형도시, 대도시, 중소도시를 살아보게 되었네요.

   결론은.
   1. 지방에서도 먹고 살수 있다.
   2. 사이드 프로젝트등으로 개인의 성장도 가능하지 않겠나..
   3. 계속 더 좋은 직장 생활을 고민하고, 준비하면 기회를 잡을 수 있다.

   아, 참고로.
   전 결혼은 했지만, 아이는 없어요.

   서울 근교로 생각하시고 계신건가요?
   전 부산에서 대학까지 보내고 올라와서 서울에 몰려있는 직군에 종사하다보니..
   완전 재택이 아닌 상태라면 서울을 벗어나기가 쉽지 않은 상태입니다..
   지방도 지방 나름이라... 어디로 가실지에 따라서 인프라 시설과 병원과 같은 것들을 고려해보시는것도 좋은 방법일 꺼같습니다...
   지방이라고 해도 완전히 시골이 아닌 어느정도 시정도로 확인하시는게..

   뚜렷한 계획을가진 생각은 아닙니다 ㅎㅎ
   저나 tujuc 님처럼 많은 사람들이 서울을 벗어나는것이 쉽지않을 것 이라고 생각합니다.
   그런데 사람들이 서울을 벗어나지 못하는 것일지 벗어나지 않는 것일지에 대한 궁금증에 올려본 질문이었습니다.

   라이프스타일 비즈니스를 갖고 있습니다만, 그럼에도 서울에 살고 있습니다.
   지방에서 살아볼까 하는 생각은 항상 드는데 막상 그렇게 하기는 쉽지 않네요.
   1. 지인들과의 만남과 즐거운 대화
   2. 일주일에 두 번씩 하는 조기 축구
   3. 서울에 혼자 계신 부모님.
   4. 아직은 아니지만 나중에 아이가 크면 학교 문제.
   이런 것들을 포기할 수가 없어서...
   만약 제가 결혼도 안했고 아이도 없다면 자유롭게 여기저기 다니며 살았을 것 같습니다.
   지금은 가족들과 일주일 짜리 지방 여행을 한두달 정도마다 다녀오는 걸로 만족하며 살고 있네요.

   서울 살다가 오산 세교 쪽으로 이사해서 살고 있습니다.
   집값 부담은 줄고, 비용 대비 더 넓은 집,
   코로나 및 미세 먼지에 대한 위험은 줄고,
   교통 걱정없이 놀러갈 곳이 많고,
   어린이집 대기줄이 짧은 장점이 있었습니다.
   동네 맛집에 줄서지 않고 바로 먹을수 있고 배달도 다 됩니다.
   걸어갈수 있는 거리에 텃밭을 얻기도 했구요.
   단점으로는 아이들 교육 문제가 있습니다.
   학원은 다 있지만 서울-강남권의 학생들의 상위 대학 진학율을 무시할수는 없죠.
   전 그부분에 신경쓰지 않지만, 와이프는 걱정하고 있는 편이긴 합니다.
   기대하는 새로운 가치를 만드는 것이 단순히 지방으로 내려간다고 해서 얻어지지 않을수도 있습니다.
   사람 사는 곳이 어디든 비슷할수 있고 어떤 문제는 오히려 지방에서 더 크게 있을수도 있습니다.
   새로운 것이라는게 정말 기존에 없던 것이라면 그걸 얻기위해
   처음부터 셀프로 만들어야 하는 경우가 많아 보이더라구요.
   아이들 교육을 위해 가치관이 비슷한 분들과 어린이집을 직접 만든 분들도 봤는데,
   일 외의 시간을 많이 투자할수 밖에 없었습니다.
   물론 그 분들은 그만큼 원하는 것을 얻기는 했어요.
   도움이 될지 모르겠네요.

   교육에 대한 부분은 저나 와이프나 크게 신경쓰지 않긴 합니다.ㅎㅎ
   좋은 인사이트가 된것 같습니다.
   실례가 되지 않는다면 혹시 handohee 님께서는 어떻게 서울에서 오산으로 내려갈 수 있었는지 여쭤봐도 될까요?

   가치관 맞는 사람이 많은 마포나 은평, 일산 등에 가고 싶었지만,
   직장하고 너무 멀거나 가격이 비쌌어요.
   대신 자연 환경과 교통이 편한 곳을 찾았죠.
   그리고 일년동안 돈안벌고 와이프랑 세계여행 다녔더니 임대아파트 입주 조건에 맞더라구요.
   집은 없지만 빚도 없이 살고 있습니다.ㅎㅎ
   추가로 자녀계획이 있으실까봐 말씀드리면,
   교육에 욕심이 없어도 학원은 보낼수밖에 없습니다.
   아니면 교육과정 이후의 남은 시간을 직접 다 채워야 하는데 효율적인 방법은 아닙니다.

   ㅎㅎ 흥미로운 스토리군요.
   교육과정 이후의 남은 시간에 대한 생각은 해본적이 없었는데 좋은 이야기 잘 들었습니다.
   감사합니다!

   https://facebook.com/groups/hanbitreaders/…
   남해에서 적극적으로 유치하더라고요...
   꼭 남해 아니더라도 언젠가 해보고 싶은 라이프스타일

   한달살기.. 제가 혼자살고 있다면 저런 프로그램에 참여해보고 싶긴 하네요 :)

   저는 지방에서 오래 살아본 경험이 없어서 그런지 지방생활에 대한 약간 두려움이 있어요.
   대학시절에 경기도 안성에 몇달 살았던 적이 있는데, 서울로 왔다 갔다 하느라 굉장히 진이 빠졌던 기억이 있거든요.
   (고속버스로 딱 한시간 걸렸던거 같아요.)
   근데, 저건 굉장히 오래전이고 요즘 같아선 충분히 지방에서 생활하는 것도 가능한게 아닌가 생각이 들어요.
   원격근무가 충분히 가능해지기도 했고, 1인/소규모 온라인 스타트업이라면 더 잘 맞을 것도 같고요.
   Patreon / GitHub Sponsor 같은 것들로 후원이나 다양한 방식들이 가능해진듯 해서,
   특히나 개발자들에게는 서울을 벗어나서 사는 것들이 점점 더 많이 가능해지지 않을까 생각합니다.
   - 라면 비즈니스에서 라이프스타일 비즈니스로 https://xguru.net/2186
   저는 라이프스타일 비즈니스를 운영하는 개발자들이 더 많아지면 좋겠다고 생각해요.

   라이프스타일 비즈니스를 만들게 된다면 좋겠어요.
   당장 뭐라도 시작해야 가능한 일이겠지요..ㅎㅎ
"
"https://news.hada.io/topic?id=5140","넷플릭스가 FreeBSD에서 비디오를 400Gb/s로 서빙한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  넷플릭스가 FreeBSD에서 비디오를 400Gb/s로 서빙한 방법

   - 넷플릭스는 2020년부터 싱글서버에서 TLS암호화된 비디오를 200Gb/s 로 서빙중이었음
   ㅤ같은 서버에서 400Gb/s로 속도를 증가시킨 방법
   - FreeBSD + NGINX + sendfile + kTLS
   - NUMA (Non Uniform Memory Architecture)
   ㅤ→ 특정 메모리/기기 들이 CPU코어에 더 가까워지도록, 상대적 위치에 따라 메모리 접근 시간이 다르도록 하는 방식

   발표 슬라이드 [97p PDF]: https://people.freebsd.org/~gallatin/talks/euro2021.pdf
   이 영상은 온라인으로 진행된 EuroBSDCon 2021에서 발표된 자료입니다.
   https://youtube.com/playlist/?list=PLskKNopggjc4dadqaCDmctW-swHPD49td
"
"https://news.hada.io/topic?id=5182","48번째 메르센 소수 M(57885161) 검증 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     48번째 메르센 소수 M(57885161) 검증 완료

   - 8년반 전에 찾은 메르센 소수인 M(57885161)에 대해서 그 이하의 모든 숫자들을 더블체크하여 48번째 메르센 소수임을 확인
   - 메르센 소수 : ""2의 n승 - 1"" 로 표현 되는 소수. n도 소수
   ㅤ→ M(57885161) = 2⁵⁷⁸⁸⁵¹⁶¹ - 1
   ㅤ→ 17,425,170개 자리수
   - 49번째 M(74207917), 50번째 M(77232917), 51번째 M(82589933) 메르센 소수들도 발견은 되었으나 아직 검증이 완료되지 않음
   ㅤ→ 2018년 12월 7일에 발견된 M(82589933)은 자리수만 24,862,048개
   ㅤ→ 메르센 소수 29번째가 30/31번째를 찾은 이후에 발견 되었던 경우도 있어서 중간에 있는 숫자들을 다 검증하는 단계를 두는 것
   - GIMPS : Great Internet Mersenne Prime Search 에 의해 발견 및 검증 됨
   ㅤ→ 1996년 부터 메르센 소수를 찾는 사람들이 공동으로 시작한 프로젝트
   ㅤ→ 35번째부터의 메르센 소수는 모두 GIMPS에 의해서 발견 및 검증
"
"https://news.hada.io/topic?id=5125","Show GN: Frost - Flask 기반의 여러 Built-In 기능이 있는 REST API 서버 템플릿","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: Frost - Flask 기반의 여러 Built-In 기능이 있는 REST API 서버 템플릿

   안녕하세요! 저는 현재 졸업작품(과 취직...)을 준비하는 학부생입니다.
   Flask로 REST API 서버를 작성하면서, 여러 프로젝트에 공통적으로 들어가는 기능들이 포함된 템플릿이 있으면 좋겠다는 생각에 관련된 프로젝트를 만들었습니다.
   현재 있는 기능은 아래와 같습니다.
   # JWT 회원가입, 로그인 및 인증 (Refresh, Access 토큰 인증)
   ......- Flask-Admin 인증 (Admin 토큰 쿠키 자동 발급 및 인증)
   ......- 수동 토큰 무효화 (특정 로그인한 유저의 토큰 무효화)
   ......- 이메일 주소 인증과 이메일을 사용한 비밀번호 초기화 (이메일 토큰)
   # Python의 docstring과 decorator를 통한 기능 사용
   ......- 로그인 필수 및 로그인 권장 라우트 정의
   ......- 요청 파라미터 정의 및 제한(Required/Optional field 관리)
   ............- Header/Body/Query 입력 검증
   ......- 라우트 설명 / 요청 파라미터 / 해당 라우트에서 가능한 응답 문서화
   # 문서 내보내기
   ......- OpenAPI 3.0 YAML 문서로 내보내기
   ......- ER Diagram 생성 기능(.dot 출력)
   이 중 로그인(JWT 인증)과 OpenAPI 3 문서 생성 기능쪽은 PyJWT와 apispec를 사용하여 직접 작성했습니다.
   OpenAPI 3 문서 생성 기능쪽은 Flask-RESTful이나 Flask-RESTplus는 unmaintained 상태이고, Flask-RESTX는 제가 원하는 사용법이 아니었습니다.
   또, 로그인이나 인증쪽은 Flask-Login은 세션 기반이고 Flask-JWT-Extended는 있는줄 몰라서(...) 직접 작성하게 됐습니다.
   아무려도 학부생인데다가 급하게 만들어서 주석도 부족하고 코드도 깨끗하지 않지만, 이런 식으로 API를 정의할 수 있겠다는 PoC로서 봐주시면 감사하겠습니다!
   (사실 조금 전에 한번 올렸는데, 기능 쪽에서 들여쓰기 공백이 전부 날아가버려서(...) 지우고 다시 올립니다. 양해 부탁드립니다!)

   와 학부생이신데 멋지네요. 응원합니다!!
"
"https://news.hada.io/topic?id=5185","오픈소스 Ecology - 농업/제조 관련 기계들을 오픈소스로 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 오픈소스 Ecology - 농업/제조 관련 기계들을 오픈소스로 만들기

   - 농업/제조/건축 분야의 기계들을 저비용/모듈식/DIY로 만들어 볼수 있도록 오픈 소스로 만들어 공개하는 사이트
   - 트랙터, 불도저, 트럭, 윈드 터빈, CNC머신, 레이저 커터, 웰더, 시더, 플라즈마커터, UPS..
   - MicroHouse 같은 작은 집도 구현
"
"https://news.hada.io/topic?id=5130","Always-On Processor의 마법: 아이폰 전원이 꺼져도 찾기가 가능한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Always-On Processor의 마법: 아이폰 전원이 꺼져도 찾기가 가능한 이유

   - iOS 15부터는 꺼져 있어도 나의 아이폰 찾기(Find My)가 가능
   - Apple의 AOP(Always-On Processor)가 이걸 가능하게 해줌
   ㅤ→ 실시간OS인 RTKitOS로 동작
   ㅤ→ 아이폰의 모든 칩과 연결되어 필요할때 마다 깨우는 역할을 하여 전원을 절약
   ㅤ→ Siri도 AOP에 구현됨
   - 전원이 꺼져있어도 AOP를 통해서 Bluetooth LE 광고 시그널 전송 가능

   간단히 옮겼는데요. 커널 덤프 및 시스템 로그들을 통해서 꽤 자세한 얘기를 하고 있는 글입니다.
   관심 있으신 분들은 원글을 보시길 권해드립니다.
"
"https://news.hada.io/topic?id=5179","미국 10대들의 기업 선호도 조사 - 2021년 가을","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국 10대들의 기업 선호도 조사 - 2021년 가을

   Piper Sandler 투자은행이 21년째 매년 두번씩 시행하는 꽤 재미난 통계인 ""Talking Stock With Teens®""
   - 87%가 아이폰을 소유, 88%가 다음에 아이폰 구입예정, 애플워치 30% 소유해서 처음으로 시계에서 1등
   - 지불 방식은 현금이 아직 1등, 애플페이 2등
   - 페이팔의 Venmo가 페이먼트 앱중 1등이고, 그 안에서 제공하는 ""Pay in 4""가 10대들의 BNPL(Buy Now Pay Later)중 1등
   - 패션브랜드 : Nike가 11년 연속 1등(27%), 신발도 1등
   - 패션에서 룰루레몬이 전체로는 5등인데, 상위 소득자 10대들 중에서는 3등. 상위소득자 여성 10대 대상으로 하면 1등
   - Crocs가 신발에서 처음으로 6등(작년 9등)
   - 8%의 시간을 중고 쇼핑에 할애. 51%가 구매 경험. 62%가 판매 경험
   - 38%가 파트타임잡 하는 중 (봄 33%에서 상승)
   - 10대들이 ""직접 보고""한 바에 의하면 연간 소비액이 $2274로 5% 상승했고, 이중 61%가 부모에게 받은 것
   - 소비중 의류가 1등(22%). 2014년 가을이후 처음으로 음식(21%)을 제치고 1등에 위치함
   - 최고의 식당 : Chick-fil-A (16%) > 스타벅스(10%) > Chipotle/맥도널드(5%)
   - 14%가 대체육 제품 소비. Impossible Foods (40%) > Beyond Meat (31%)
   - 비디오 게임 지출이 8%. 52%가 차세대 콘솔 구매 계획
   - 하루 비디오 소비 시간의 32%를 넷플릭스, 유튜브가 30%
   - 9%가 암호화폐 거래 경험이 있고, 그중 78%가 남자
   - 52%가 아마존을 1등 전자상거래 사이트로 선정. SHEIN이 9%로 2등
   - 뷰티사이트는 Ulta 가 1등(46%), Sephora 2등 (21%)
   - 뷰티 소비중에서 헤어케어와 향수 비중이 커지는중 (피부 및 화장은 정체)
   - 화장품은 Maybelline 이 1등 (12%)
   - 스킨케어는 CeraVe가 1등 (39%) > 2등 Cetaphil (10%)
   - 핸드백 소비가 $96로 늘었고, Michael Kors가 1등으로 복귀(18%) 루이비통이 2등(16%)
   - 소셜미디어중 스냅챗 1등(35%), TikTok 2등(30%), 인스타그램 3등 (22%)
   - 과자 브랜드 : Goldfish (12%) > Lays (12%) > Cheez-It (10%) > Doritos (7%) > Cheetos (5%)
   - 가장 좋아하는 유명인은 Adam Sandler 이고, 최고 인플루언서는 Emma Chamberlain(계속 1등이었던 David Dobrik의 자리를 탈환)
   - 미국 44개주, 1만명의 10대들을 대상. 평균나이 15.8세. 남성 51% 여성 47% Non-Binary 2%
   - 조사한 가정의 평균소득 $67,755

   지난 봄에도 읽었었는데 신기하고 재미있습니다. 인상깊었던 것들은
   - BNPL 네이버도 하는것 같던데 빚내는 걸 장려하는 것 같아 조금은 무섭네요.
   - 대체육이 삶속으로 확 들어왔네요
   - 아담 샌들러가 미국에서 이런 인기인지 몰랐네요. 요즘 활동을 전혀 몰라서요
   - Emma Chamberlain이 누구지? David Dobrik이 누구지?

   이거 전체 91페이지 짜리 자료로 보면 각 회사에 대한 분석들도 따로 있어서 굉장히 재미납니다.
   - KEY FINDINGS https://www.pipersandler.com/1col.aspx?id=6216
   - 인포그래픽 PDF https://www.pipersandler.com/private/pdf/TSWT_Fall21_Infographic.pdf
   = 전체 리포트 PDF 91장 https://piper2.bluematrix.com/sellside/EmailDocViewer/…
   - 미국 10대들의 기업 선호도 조사 - 2020년 가을 https://news.hada.io/topic?id=3072
   - 미국 10대들의 기업 선호도 조사 - 2021년 봄 https://news.hada.io/topic?id=4488
"
"https://news.hada.io/topic?id=5196","모듈형 노트북 Framework 마켓플레이스 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      모듈형 노트북 Framework 마켓플레이스 공개

   - 필요한 부속만 따로 주문해서 교체 가능
   - 신품,중고 및 리퍼비시도 지원 예정
   - 써드 파티 및 커뮤니티가 만든 모듈들도 판매하게 확장 할 것
   - 구매 가능 부속들
   ㅤ→ MicroSB/USB-C/USB-A/DisplayPort/HDMI
   ㅤ→ 메인보드 : i5 ~ i7
   ㅤ→ 메모리 및 NVMe
   ㅤ→ 각 언어별 키보드
   ㅤ→ 히트싱크&팬, 전원 어댑터, 오디오 보드, 하판 전체, 디스플레이, 지문 인식기, 힌지, WiFi, 스피커, 터치패드, 웹캠, 커스텀 베젤(블랙/그레이/오렌지)

   - 모듈형 노트북, Framework Laptop 공개 https://news.hada.io/topic?id=3797
   - Framework Laptop 배송 시작 및 리뷰들 공개 https://news.hada.io/topic?id=4681
"
"https://news.hada.io/topic?id=5102","내 엔지니어링 매니저는 하루종일 뭘 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내 엔지니어링 매니저는 하루종일 뭘 할까?

   - 리드 프론트 엔지니어에서 시니어 엔지니어링 매니저가 된 사람의 후기
   - 각종 미팅이 빼곡한 본인의 월요일~금요일 아웃룩 시간표를 쭉 나열
   ㅤ→ 그중 오전9시 ~ 오후5시 사이의 빈 ""자유 시간""들을 다 합치면 일주일에 ""일""하는 시간은 4시간 이라고
   ㅤ→ 시간 관리에 실패한 걸까? 이중 짤라낼수 있는 미팅은 뭘까 ?

   본인이 답을 준 것은 아니군요.
   이게 맞는 건지, 다들 이런건지 물어보는 것이군요

   제목이 재미나서 본 글인데, 작성자가 Target 에서 일하는 한국분이신가 보네요.
   미팅들 리스트가 다른 초급 매니저 분들께는 도움이 될듯 해서 가져와 봅니다.
"
"https://news.hada.io/topic?id=5087","2년만에 8조원 가치가 된 스타트업에서 배운 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2년만에 8조원 가치가 된 스타트업에서 배운 것

   - 온라인 이벤트 플랫폼 Hopin 초기 멤버의 글
   - 현재 8백명 직원, 5천억원 시리즈D 펀딩
   초성장 플레이북 : Hopin의 첫 6개월 고성장을 반복하기 위한 19가지 단계
   1. 제품 디자인에 집착하고, 엔지니어이면서, 타고난 세일즈맨인 비젼있는 창업자와 함께 시작할 것. 대부분의 기업은 이 첫번째 단계를 통과하지 못함. Hopin은 그런 창업자인 Johnny가 있었음
   (똑똑하고 개방적이면서 야망과 호기심 많은 개발자)
   2. ""오직 엔지니어들만"" 고용하고, 글을 쓰고 제품을 팔고 고객의 성공을 지원할수 있는 ""한명의 제네럴리스트 기업가""만 고용할 것
   3. 바이럴 성장 루프를 가진 훌륭한 제품을 만들 것
   4. 주요 ICP(Ideal Customer Profile, 이상적인 고객 프로필)들과 긴밀히 협력해서 제품 로드맵 만들기. 당신이 서비스를 시작하는 시장이 최종적으로 지배하게 될 시장이 아닐 수도 있음을 명심할 것. Hopin 은 1인 기업가, 인플루언서등과 시작했지만, 빠르게 고급시장으로 가속화 했음.
   5. 더 많은 엔지니어 고용하기
   6. 바람직한 고객을 확보하기 위해 첫번째 연간 계약 사인하기
   Sign your first annual contracts to anchor desirable customers
   (문맥상 이해가 잘 안되네요.. 무슨 뜻일까요 ?)
   7. 투자자들과 프리시드 또는 시드라운드 펀딩 논의 시작
   8. 고객 성공 담당자, 지원 담당자, 운영쪽 성향이 있는 영업사원을 고용
   9. 얼리 억세스로 제품 출시. 대기자 리스트를 만들고 고객들을 천천히 유입. Hubspot CRM, Zapier, Stripe, Typeform 과 같은 린 마케팅 스택 이용하기. 이 대기자 명단이 당신의 커뮤니티임. StreamYard는 열광적인 팬을 위한 커뮤니티를 구축하기 위한 놀라운 기능을 가지고 있음
   10. 고객들 중에서 알아볼 수 있는 로고들을 서비스에서 사용하기 위해 허가를 얻을것. 좋은 로고와 숫자들로 케이스 스토리를 게시
   11. Buzz 를 만들기 위해 PR회사 고용
   12. 더 많은 엔지니어 고용할 것. 조직/제품 관리에 집중 시작. 고객친화적인 제품 출시 프로세스에 대해서 GTM(Go To Market)과 협력. 프로덕트 마케터 고용. ARWAG(Always Release With A GIF, 항상 GIF와 함께 릴리즈하기)
   13. 영업팁을 확장하여 데모를 하게 하고, 더 많은 거래를 성사시키기. 비즈니스 운영 책임자(Biz Ops) 고용
   14. (고객) 성공 및 지원팀을 확장. 제품이 좋을수록 작아야 함. 제품이 복잡할 수록 이 팀은 더 커야함. 초성장 중에는 지원콘텐츠가 빠르게 구식(outdated)되므로 이걸 최신 상태로 유지하는 프로세스를 구축.
   15. 마케팅활동(브랜드, 크리에이티브, 유료 광고, ㄴEO, 콘텐츠, 이벤트, PR)을 아웃소싱 하려면 지금쯤은 5개 이상의 대행사와 협력 해야함. 그들을 슬랙에 조인시키고, 적합하지 않은 회사에선 빨리 다른 회사로 옮길 것
   16. 가격 실험해 보기. 경쟁자와 비교해서 시장에서 어떤 위에 있으면 좋을까? 이상적으로는 어딘가 브랜드 워터마크가 붙어 있는 무료버전을 제공하는 것도 가능(바이럴 성장 루프에 끌어들이기 위해). 항상 다음 계획을 준비 할 것
   17. 커뮤니티 피드백(페이스북 그룹도 괜찮음)과 사용자 설문조사(HotJar)등을 활용해서 고객들을 다음 계획으로 따라오게 만드는 필수 기능을 식별할 것
   18. Product/Market Fit은 충분한 시간동안 계속 성장하면서도 WoW에 도달할 때 가능. 대기자 명단은 가득차야 하고, 고객들은 정기적으로 만족했다는 리뷰를 작성해야 함. 만약 그렇지 않다면 인센티브를 줘서 리뷰사이트의 맨 위에 표시되게 할 것
   19. 시리즈 A 펀딩 발표와 제품 출시를 결합. 주요 기능을 발표하는 첫번째 고객 이벤트로 트래픽을 유도 할 것

   또한 이러한 종류의 제품에 대한 필요성은 잠금으로 인해 가장 컸습니다. 그리고 그들은 단순히 그것을 최대한 활용했습니다.

   제품 디자인에 집착하고, 엔지니어이면서, 타고난 세일즈맨인 비젼있는 창업자
   누군가 떠오르는건 저만의 착각인가요 ㅎㅎ

   6번과 관련해 또 다른 의견으로 4번에서 설정한 ICP보다 한단계 나아가서 우리가 중요하다고 생각하는 ""진짜"" 고객과 지속적인 관계를 맺고, 피드백을 얻기 위해서 계약을 체결하라는 의미는 아닐까요?

   6번 해석
   SaaS임을 감안할 때 고객 리텐션 확보(이른 이탈 방지)랑 초기 매출액 확보 등의 목적을 충족하기 위해 월/분기/반기 단위보다는 연단위로 구독 계약을 도모하라는 것 같습니다

   글이 굉장히 긴데 플레이북 부분만 옮겨봤습니다.
   정말 중요한거는 ""엔지니어를 많이 고용하고 바이럴 가능한 훌륭한 제품을 만들기"" 이고,
   그러기 위해서 ""맨땅에 헤딩하지 말고 다양한 최신 도구들과 기법을 이용하라"" 정도 인것 같네요.
   근데 플레이북 1번이 최근 제가 긱뉴스에 적은 글들과 일맥상통하네요.
   ""엔지니어이면서 비즈니스도 잘하는 창업자와 함께 할 것""
   - Ask GN: 이직할 때 어떻게 회사를 고르시나요? https://news.hada.io/topic?id=5082
   - Ask GN: 코더에서 CEO가 되는 것에 대한 리소스가 뭐가 있을까요? https://news.hada.io/topic?id=5054
"
"https://news.hada.io/topic?id=5076","MS, Surface Laptop Studio 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      MS, Surface Laptop Studio 공개

   - 고성능 노트북 라인 Surface Book의 후속
   - 14.4인치 PixelSense 2400x1600 120hz 터치스크린
   - 세가지 모드로 사용
   ㅤ→ 스튜디오 모드 : 타블렛 형태
   ㅤ→ 스테이지 모드 : 게임/스트리밍/프리젠테이션용 키보드 가리는 모드
   ㅤ→ 랩탑 모드 : 일반 노트북
   - 인텔 11th Gen CPU, 16/32GB, ~2TB SSD, WiFi 6
   ㅤ→ Core i5, Intel Iris Xe, 1.74Kg
   ㅤ→ Core i7, Nvidia RTX 3050 Ti + 4GB VRAM, 1.82Kg
   - 2 USB 4 + Thunderbolt 4, 서피스 충전 포트
   - Surface Slim Pen 2 연동 (별도 판매)
"
"https://news.hada.io/topic?id=5126","스트라이프 한국 시장 진출 준비중?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          스트라이프 한국 시장 진출 준비중?

   - 미국의 온라인 결제 스타트업 Stripe 가 한국 진출을 추진하고 있다는 소식 (루머)
   - 올 3분기부터 팀 빌딩(한국의 금융업계 종사자, 법률 전문가 등을 포함)
   - 왜 지금?
   ㅤ→ 세계 1위 사업자인 Paypal의 한국 진출 썰 정리 (2013~2016)
   ㅤ→ 논란의 중심에는 전자금융거래법(전금법) 개정안이 있음
   ㅤ→ 외국 전자금융업자에 관한 특례가 신설
   ㅤㅤ""해외 핀테크 기업이 한국에서 PG를 포함한 전자금융업을 영위하기 위해서는 한국에 지점과 대표자를 둬야 하며, 한국인 이용자의 예탁금에 대해 국내 금융사와 동일하게 예탁금 규제를 받아야 한다""

   정말 들어오는걸까? 싶으면서도 꼭 들어오면 좋겠네요.

   아직 공식으로 보도자료가 나온 거는 아닌듯 한데, 별도의 소스를 가지고 얘기하신듯 한데요.
   찾아보니 Stripe가 한국에서 채용을 진행하고 있긴 하더군요.
   https://stripe.com/jobs/search?q=Korea
   Regulatory Counsel / Partnerships Lead 를 한국/싱가폴/원격 으로 뽑고 있네요
   지켜봐야 할 것 같아요. (물론 저는 Stripe 대환영합니다.)
"
"https://news.hada.io/topic?id=5173","우리 회사는 dbt(data build tool) 를 써야 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  우리 회사는 dbt(data build tool) 를 써야 할까?

   dbt(data build tool)은 무엇이고 언제 써야하는 것일까?
   TL;DR
   dbt는 sql만으로 데이터 파이프라인을 구성할 수 있게 해주는 툴
   dbt를 사용하는 이유
   우리회사에 dbt를 도입하는게 좋을까?
   우선 아직!

   geeknews에 긁힌 내용은 적지만, 원문에 가 보면 나름 현실적인 dbt에 대한 내용을 볼 수 있어 좋았습니다.
"
"https://news.hada.io/topic?id=5174","Hello IPv6 : IPv4 사용자를 위한 최소한의 자습서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Hello IPv6 : IPv4 사용자를 위한 최소한의 자습서

   - IPv6가 단순히 더 많은 주소를 주는 것은 맞지만, 우리가 IPv4에서 배운 많은 것들이 IPv6에서는 변경되거나 사라짐
   - 집 또는 작은 사무실에서 사용하는 사람들을 위한 가이드
   ㅤ→ ARP, DHCP, NAT 등이 어떻게 IPv6에서 동작하는지
   - 요약
   ㅤ→ IPv6는 다른 이더넷 프레임 타입을 가짐 : 0x0800 (v4) vs. 0x86DD (v6)
   ㅤ→ IPv6 주소는 128-bit(16 bytyes) = 64-bit (network) prefix + 64-bit interface id
   ㅤ→ IPv6는 ARP(Address Resolution Protocol)가 아닌 NDP(Neighbor Discovery Protocol)
   ㅤ→ IPv6는 broadcast 주소 컨셉이 없음. 일부 multicast 주소들이 이 기능을 수행
   ㅤ→ IPv6는 DHCPv4처럼 동적으로 설정 가능하지만, DHCPv6, RA, PD, SLAAC을 이용 해서, 더 자주, 상태를 유지하는 것 없이 설정이 가능.
   ㅤ→ IPv6 에서는 NAT는 필요 없음. 만약 보안을 위해 필요하다면 랜덤/임시 IPv6주소를 사용 가능

   다음과 같은 한글 IPv6 설명 문서들도 있기 합니다만 https://www.sollae.co.kr/ko/download/pds_files/an_ipv6_guide_ko.pdf
   이 글이 기존에 알고있는 지식 기반에 비교하면서 설명해서 더 읽기가 편한듯 하네요.
"
"https://news.hada.io/topic?id=5136","2021년 웹 스크래핑 현황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            2021년 웹 스크래핑 현황

   - 웹 스크래핑이란 ?
   - 웹 스크래핑용 메인 프레임워크는 ?
   ㅤ→ 파이썬 : Scrapy, Beautiful Soup, MechanicalSoup
   ㅤ→ JS : Cheerio, Puppeteer, Apify SDK
   ㅤ→ Java : Jaunt, jsoup
   ㅤ→ Ruby : Kimurai
   ㅤ→ PHP : Goutte
   - 기업용 수준의 유료 웹 스크래핑 프레임워크들
   ㅤ→ Scraper API : 프록시 로테이션, 캡차 풀기, 안티 봇 체크 지원
   ㅤ→ Apify : 커뮤니티에 의해 개발된 수천개의 플러그인 제공
   ㅤ→ Parsehub : 데스크탑 앱을 이용한 포인트 앤 클릭 방식 노코드 도구
   ㅤ→ Diffbot : 웹에서 수집한 회사/리테일/뉴스/게시판/이벤트 등의 데이터에서 빅데이터/머신러닝을 통한 데이터 추출 지원
   ㅤ→ Octoparse : Parsehub처럼 포인트 앤 클릭 방식. IP로테이션 및 정규식 도구를 이용한 데이터 정제, 대용량 스크래핑등을 지원
   ㅤ→ ScrapingBee : 복잡한 기능을 제공하는 노 코딩 도구
   - 파이썬 웹 스크래핑 예제 : Beautiful Soup 이용
   - 자바스크립트(Node.js) 예제 : Puppeteer로 구글 검색
   - Do's and Don'ts of Web Scraping
   ㅤ→ 한개의 IP연결만 이용할 것
   ㅤ→ 피크타임이 아닌 시간에 크롤링 할 것
   ㅤ→ 사이트의 ToS 지킬 것
   ㅤ→ robots.txt 의 룰 준수
   ㅤ→ 콘텐츠를 다른 방식으로 보여주기 위해 크롤링 하는 것이라면, 단순 카피가 아닌 유니크한 솔루션일 것
   ㅤ→ GDPR / CCPA 룰 지킬 것

   글 하단에 있는 ""Web scraping is now legal"" 글도 참고하세요.
   Linkedin이 분석회사 HiQ가 크롤링을 못하게 해달라고 요청했다가 미국 법원에서 거절된 사례입니다.
   https://medium.com/@tjwaterman99/…
"
"https://news.hada.io/topic?id=5172","Ask GN: 유튜브에서 얻은 정보를 어떻게 저장하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask GN: 유튜브에서 얻은 정보를 어떻게 저장하시나요?

   최근 유튜브에서 알고리즘의 추천으로 유용한 채널들을 많이 알게 됐는데요, 나중에 계속 찾아보고 싶어서  인상깊었던 부분들을 받아적고 간단한 메모도 남겼습니다.
   그런데 이부분(특히 재생 멈추며 받아적는 부분) 이 은근 불편해서 다른분들은 어떻게 하고 계신지 궁금합니다.
   1. 유튜브에서 얻은 정보를 어떻게 메모/기록/저장하고 계신가요?
   2. 어떤 내용들을 기록하고 계신가요?
   3. 어떤 기기로 유튜브를 보시나요?(폰,태블릿,컴퓨터)

   저는 최초로 정보를 접하는 건 거의 휴대폰인 것 같습니다. 인상적인 영상이었다면 링크를 메모 도구(workflowy)에 넣어두고, 왜 인상적이었는지 정도만 간단히 메모해둡니다.
   그리고 한달에 한번 TIL 느낌으로 블로그를 쓰는데, 이 때 기록해뒀던 영상들을 2배 정도로 보면서 좀 더 자세히 매모해둡니다.
   뭘 기록하느냐는 엄청 케바케인것 같네요. 근데 거의 블로그 위주로 생각하는 것 같습니다. 정말 인상적인 내용이 많다면 아예 그 영상 하나나 관련 주제로 글을 하나 쓸 생각으로 자세히 기록하고, 그게 아니라면 몰랐던 내용 위주로 짧게 (TIL에 한두 문단으로 들어갈 정도로) 적습니다.

   개인적으로는 제목과 링크 정도만 OneNote에 붙여넣어 두고, 정말 필요하다 싶은 내용만 대충 그 밑에 메모해 두는 정도 이상은 아직 하지 않고 있습니다. 추후 제텔카스텐 같은 방법을 시도해보고 싶긴 한데, 아직은 생각만 하고 있네요.

   전 딱히 부분별로 적어서 정리하지는 않고
   유튜브 계정에 비공개 리스트를 몇개 만들어서 거기다 카테고리 별로 영상을 저장해둡니다.
   전 유튜브 영상은 대부분 소리만 듣기 때문에 차에서 운전할 때 폰으로만 틀어둡니다.
   Glancer/VideoGlancer 같은 도구를 시도해 보긴 했는데.. 지속적으로는 안하게 되더군요.
   - videoglancer: 유튜브 비디오를 캡쳐해서 PDF https://news.hada.io/topic?id=4525
"
"https://news.hada.io/topic?id=5084","nginx playground","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            nginx playground

   - nginx 설정을 맘대로 바꿔서 테스트 가능한 플레이 그라운드
   ㅤ→ config 와 curl/http 명령을 입력하고 Run을 눌러서 실행
   ㅤ→ 실행한 명령의 결과와 nginx 에러 로그를 보여줌
   - Vue.js 프론트 + Go 백엔드(Gist로 서버코드만 공개)
   - 실행 버튼을 누르면 Go 백엔드가 다음의 일들을 수행
   ㅤ→ 설정파일을 temp 파일로 저장
   ㅤ→ 새로운 네트워크 네임스페이스 생성
   ㅤㅤㅤip netns add $RANDOM_NAMESPACE_NAME
   ㅤ→ go-httpbin 을 777 포트로 실행
   ㅤ→ nginx 시작
   ㅤ→ nginx 제대로 실행될때까지 100ms 대기. 실패하면 nginx 에러로그 리턴
   ㅤ→ 사용자가 입력한 명령 실행 (curl / http 로 되어있는지 확인)
   ㅤ→ 요청의 출력 리턴
   - 1대의 공유 서버로 모든 요청을 처리
   - 보안 적인 접근 : 약간의 isolation, 약간의 YOLO
   ㅤ→ 프론트엔드는 CDN에서 호스트
   ㅤ→ DB 사용안함. 브라우저 로컬 스토리지만 사용
   ㅤ→ 모든 nginx는 자신의 네트워크 네임스페이스에 두기. 인터넷 접속 못하게 막음
   ㅤ→ fly.io 의 무료티어 사용
   ㅤ→ 사람들한테 nice 하게 행동하도록 FAQ에 넣기
   - 성능
   ㅤ→ 아주 작은 인스턴스(1 shared CPU, 256MB 램)
   ㅤ→ 프론트엔드는 CDN이어서 백엔드는 실제 사용할때만 가동
   ㅤ→ 요청 하나는 400ms 정도 걸림. 나쁘지 않음
   ㅤ→ Go 버전 httpbin 이 오리지널 파이썬 버전 보다 가벼움
   ㅤ→ 프론트엔드 성능은 그다지 좋지는 않음
"
"https://news.hada.io/topic?id=5191","AWS Lambda 런타임별 Cold/Warm 시작 시간 비교 2021/09","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               AWS Lambda 런타임별 Cold/Warm 시작 시간 비교 2021/09

   - API-Gateway → AWS Lambda → DynamoDB 플로우로 POST 메소드를 테스트
   - 메모리 128/256/512/1024/10240MB 각각 테스트
   - Cold Start
   ㅤ→ 전체적으로 Rust가 가장 빠름. 128Mb에서만 Python이 1등
   ㅤ→ Java 와 .NET을 제외하고는 대부분 빠름
   ㅤ→ Java는 128Mb로는 시작도 불가능이지만, GraalVM은 가능
   - Warm Start
   ㅤ→ Golang 과 Rust 가 승리자
   ㅤ→ .Net도 Go/Rust와 거의 비슷한 성능을 보여주지만, 1k 반복실행 후에만 가능(JIT 이후)
   ㅤ→ GraalVM도 .Net과 비슷한 안정적인 성능을 보여주고, Rust/Go 보다는 약간 느림. 최소 셋업에서는 잘 동작하지 않음
   ㅤ→ Java가 GraalVM 바로 뒤. Java 역시 .Net처럼 1~3k 반복후에만 성능이 나옴
   ㅤ→ Python이 안정적인 좋은 성능을 보이지만, 128MB에서는 너무 느림
   ㅤ→ Ruby 는 Python과 비슷한 성능을 보이지만, 20분 정도(15k 반복)후에는 약간의 지속시간(duration)이 증가함
   ㅤ→ Node.js 가 가장 느린 런타임. 지속시간도 가장 김
   - Cold + Warm 으로 보면 Golang 과 Rust가 승리자. 항상 빠르고 안정적인 결과를 보여줌
   - 비교 런타임 : NodeJs(14.x), Python(3.9), Go(1.x), Ruby(2.7), .Net(3.1), Java (11), Rust(1.54.0), GraalVM(21.2)

   대충 보기는 했지만,
   Rust, Golang ~~ Python, Ruby 구도는 일반적인 기대와 크게 다르지 않은 것 같기는 하고...
   Java가 VM 뜨는 비용이 없고 JIT 적용되어도 느린 것은 조금 의외이긴 하네요.
   Node.js도 JIT 후에는 빠르다고 생각했는데 느린 결과가 나왔네요.
   Lambda가 동작하는 아키텍쳐나 가상화 스택 이런 게 달라서 그런걸까나요..

   성능 테스트에는 영향 줄 수 있는 요소가 너무 많기는 해서 너무 심각하게 결과를 받아들이지는 않아도 될 것 같기도 하구요... ㅎㅎㅎ

   golang이 승자 아닐까요? ㅎㅎ

   네, 그런 결과 같네요.
   클라우드 환경에서 golang을 써본 건 아니지만, 클라우드 환경에 딱 맞는 것 같다는 생각이 들어요.

   Rust 너무 매력적이네요 책 사놓고 안보고 있었는데 호기심에 불이 확 댕겨집니다 ㅎㅎ
"
"https://news.hada.io/topic?id=5078","아이폰 13 프로 카메라 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            아이폰 13 프로 카메라 리뷰

   - 사진작가 오스틴 만의 리뷰 in 탄자니아
   - Macro : 마치 4번째 렌즈 처럼
   ㅤ→ 올해의 가장 큰 향상. 언제 어디서나 즉시 사용가능한 매크로 렌즈는 큰 장점
   - 완전히 새로운 울트라 와이드 렌즈
   ㅤ→ 하드웨어상으로는 가장 중요한 향상
   ㅤ→ 13mm에 아이폰 12대비 훨씬 빠른 f/1.8
   ㅤ→ 약간의 엣지 왜곡은 여전히 있지만, 선예도(Sharpness)는 현저히 개선되었음
   - 새로운 3X 망원 렌즈는 Naturally Cinematic
   ㅤ→ 뭘 찍어도 영화스럽게 나옴
   ㅤ→ 흔들리는 헬리콥터 위에서도 잘 찍힘
   ㅤ→ 인물모드 아니고 근거리 사물/인물을 찍을 때도 자연스럽고 얕은 심도의 보케를 보여줌
   - iOS 15의 집중 모드 활용
   ㅤ→ 카메라 앱 사용시에 자동으로 방해금지/알림 차단 켜기 가능
   - 몇가지 바라는 점
   ㅤ→ 아이폰 내장 마이크의 좀 더 나은 Wind Screening 필요
   ㅤ→ 디지털 줌을 끄는 방법이 있었으면.. 13mm / 26mm / 77mm 의 ""프라임"" 렌즈 퍼스펙티브를 선택가능하면 좋겠음
   ㅤ→ 야간 모드에서 수동으로 노출 길이 조정 가능 하면 좋겠음

   Austin Mann 의 아이폰 리뷰는 장소와 훌륭한 사진때문에 항상 재미납니다.
   - 아이폰 12 리뷰 : Glacier 국립공원 https://news.hada.io/topic?id=3093
   - 아이폰 11 리뷰 : 중국 https://news.hada.io/topic?id=560
"
"https://news.hada.io/topic?id=5192","RPiPlay - 라즈베리 파이로 만드는 Airplay 서버 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   RPiPlay - 라즈베리 파이로 만드는 Airplay 서버

   - Raspberry Pi Zero 에서도 실행되는 Airplay 미러링 서버
   - h264 비디오는 GPU로 디코딩하고, 오디오는 FDK-AAC 디코더를 사용
   - iOS 9 이상 지원

   덕분에 라즈베리파이 OSMC에서 동작하는 Airplay 미러링 찾아봤습니다.
   https://github.com/rumpelrausch/rpiplay-osmc
   나온데로 세팅하니 잘 동작합니다.

   RPiPlay를 Balena를 써서 원클릭으로 설치하기
   - Air-Pi-Play https://github.com/rahul-thakoor/air-pi-play
"
"https://news.hada.io/topic?id=5148","Android 12가 AOSP에 Live","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Android 12가 AOSP에 Live

   - 안드로이드 최종 버전을 Android Open Source Project (AOSP) 에 릴리즈
   - 이를 통해서 Pixel 을 시작으로 삼성 갤럭시,샤오미 등이 업데이트 될 것
   - 12버전에 대해 상세히 다룰 ""안드로이드 개발자 서밋"" 10월 27-28 사이 개최 예정
   [개발자 대상 변경 사항]
   - 새로운 UI
   ㅤ→ Material You
   ㅤ→ 재디자인된 위젯
   ㅤ→ 알림 UI 변경
   ㅤ→ ""Stretch"" 오버스크롤 효과 추가
   ㅤ→ 앱 런치 스플래시 스크린 추가
   - 성능
   ㅤ→ 더 빠른 시스템 성능 : 코어 시스템 CPU 22% 감소. 앱 시작시간 감소 등
   ㅤ→ Foreground 서비스들 최적화
   ㅤ→ 알림 트램펄린 제한으로 알림을 눌러 앱 실핼할때 대기시간 줄임
   ㅤ→ 퍼포먼스 클래스 제공
   ㅤ→ 더 빠른 머신러닝
   - 프라이버시
   ㅤ→ Privacy Dashboard 제공
   ㅤ→ 앱에 위치 제공을 정확/대략 으로 선택해서 제공 가능
   ㅤ→ 상태바에 마이크/카메라 사용 인디케이터 표시
   ㅤ→ 위치정보 권한을 사용하지 않는 근처 기기 스캔/페어링 권한 추가
   - 더 나은 사용자 경험 도구
   ㅤ→ 어떤 소스(클립보드,키보드,드래그앤 드랍)에서든 Rich 컨텐츠를 받을수 있는 통합 API 추가
   ㅤ→ 둥근 스크린 코너 지원
   ㅤ→ AVIF 이미지 지원
   ㅤ→ HEVC 포맷 품질 향상
   ㅤ→ 더 사용가기 쉬운 그래픽 효과
   ㅤ→ 향상된 햅틱 경험
   ㅤ→ 기기 제조사에 의해 제공되는 카메라 이펙트 확장들 사용 가능 (보케,HDR,야간 모드등)
   ㅤ→ 네이티브 크래쉬에 대한 디버깅 향상
   ㅤ→ 게임모드 API
   - Android 12 퍼블릭 릴리즈가 되었으니, 모든 안드로이드 개발자들은 호환성 테스트 및 12 업데이트를 준비할 것
"
"https://news.hada.io/topic?id=5145","10/4일에 페이스북이 어떻게 사라졌는지 이해하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      10/4일에 페이스북이 어떻게 사라졌는지 이해하기

   - 10/4일 페이스북 관련 서비스들이 접속 불가능했던 이유를 CloudFlare가 외부에서 분석한 글
   - DNS 룩업부터 실패하고, 모든 페이스북 관련 인프라의 IP연결이 끊어졌었음
   - 페이스북의 공식 발표는
   ㅤ→ ""데이터 센터간 네트워크 트래픽을 조정하는 백본 라우터 구성을 변경하면서 문제가 발생. 이게 데이터 센터간의 연결에 연쇄적으로 영향을 미쳐서 서비스가 중단되었음""
   ㅤ→ DNS 서버들은 보통 BGP를 통해서 자신을 알리게 되어있는데, 페이스북의 DNS서버들은 페이스북 데이터 센터와 연결이 안되면 BGP를 disable하도록 되어있었음
   ㅤ→ 데이터 센터 백본이 끊어지면서 BGP 요청을 거부하게 되고, DNS서버에 접근이 불가능하게 되어버림
   ㅤ→ 이 때문에 모든 페이스북 서버들 접속이 불가능해져버린게 문제
   ㅤ→ 실제로 데이터센터 접근 자체가 어려워져서 엔지니어들이 온사이트로 출동해서 문제를 해결했다고
   - 마치 누가 페이스북 데이터 센터의 인터넷선을 뽑은 것처럼 문제가 발생
   - DNS 이슈는 아니었지만, DNS 오류가 대규모 중단의 첫번째 증상이었음
   - BGP(Border Gateway Protocol)
   ㅤ→ 인터넷의 AS(Autonomous Systems)들이 라우팅 정보를 교환하는 메커니즘
   ㅤ→ 대형 라우터들은 라우팅 정보를 계속 공유해서 최종 정보에 도달하도록 관리
   ㅤ→ 페이스북이 자신의 존재를 네트웍에 알리지(advertising) 않으면 접근이 불가능해 지는 것
   ㅤ→ 개별 네트웍들은 ASN(Number) 를 가지고 있고, 자신들이 관리하는 IP들의 prefix 를 알려줌
   - 10/4 15:40 UTC 부터 페이스북이 자신들의 DNS Prefix를 어나운싱 중단
   ㅤ→ 위에 페이스북이 말한 이슈처럼 BGP Ad를 발송안하므로 접근 불가가 됨
   ㅤ→ 이것 때문에 라우팅이 바뀌면서 BGP 업데이트가 대규모로 이뤄졌음
   ㅤ→ 모든 DNS 서버들이 페북 URL들에 대해 SERVFAIL 시작
   ㅤ→ DNS 쿼리들이 30x 증가하기 시작
   ㅤ→ Twitter, Signal, Telegram 등에 대한 DNS쿼리도 증가
   - 21:00 UTC 에 BGP가 다시 업데이트 되어 정상으로 돌아옴

   페이스북에서 5시간 장애라니... 정말 큰 사건이긴 했네요.

   - BGP는 안전한가요? https://news.hada.io/topic?id=1932
   - 8월30일 CenturyLink/Level(3) 인터넷 다운상황 분석 https://news.hada.io/topic?id=2746
"
"https://news.hada.io/topic?id=5176","SQL Fluff - 사람을 위한 SQL Linter","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SQL Fluff - 사람을 위한 SQL Linter

   - 다양한 SQL Dialect 지원
   ㅤ→ ANSI SQL, BigQuery, Hive, MySQL, PostgreSQL, Snowflake, SQLite, Transact-SQL..
   - 린팅 에러를 자동으로 수정하는 오토 포매터
   - 에러에 대한 상세한 설명 제공
   - ELT 어플리케이션을 염두에 두고 설계. Jinja 및 dbt 의 템플릿도 지원
   - Python 오픈소스
"
"https://news.hada.io/topic?id=5160","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.
   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   모두들 생산적으로 사시는 군요.
   저 당구치러 갑니다(이미 갔다 왔군요)
   대학시절이후 죽~~~ 제 최고의 취미는 3쿠션이네요.

   온라인 모각코 모임에서 처음으로 오프라인 모각코 모임을 합니다!

   우와 모각코 모임이 어떤 모임인가요??

   파이썬 강의 유튜브를 같이 보며 학생 멘토링을 하고 있었는데 시험 기간이어서 몇 주 쉬다가 다시 시작해요. 클래스 들어갈 차례네요~ 스타크래프트로 설명하던데 잘 이해하면 좋겠어요 ㅎㅎ
   그리고 날 선선해져 좋네요. 남산에 산책 다녀오려고요 ^^

   1. 4분기 목표를 적어야 합니다. 1~3분기 목표를 모두 이뤘으니(공개하고 싶은데 절반이 사내 프로젝트와 엮여 있습니다(...)) 이제 1년을 멋들어지게 장식할 사이드 프로젝트 목표를 세울거에요!
   2. 저번주부터 Weekly Review를 적고 있는데요. 한 주간 인상깊은 사건(개인적 사실(3kg로 몸무게 감량! IT기기 100개 돌파!)이건/진짜 사건사고건(C++23, 스크립트 언어가 되다!))과 인상깊은 글들을 모으는 코너입니다. 이번 주차의 Weekly Review도 적을 예정이에요. 이게 있으면 나중에 1년 회고를 할 때 그 주는 어떤 생각으로 살았는지 알 수 있을 것 같아서 좋을 것 같아요.
   3. Godot 게임잼을 꼭 할 겁니다.. 꼭이요..

   오 목표를 모두 이루셨다니 성취감이 크시겠어요~
   일주일 회고 좋네요. 저도 한번 해볼까 싶어요. 고맙습니다.

   오랜만에 게임개발에 손을 대려구요.
   그동안 팀의 리소스에 비해 너무 큰 규모의 게임을 만들고 있어서.. 이러다간 완성도 못하고 엎어지겠다 싶어 전략을 바꿨습니다.
   큰 게임을 플래피버드 수준으로 작고 단순한 게임으로 쪼개서 반복 출시한뒤 쌓인 게임들을 합치자, 이런 식으로 해야겠더라구요.

   자격증 공부 합니다

   무슨 자격증 공부하시나요?

   1. 이직 준비
   2. 템플릿 코드 유지보수
   정도 할 것 같습니당.. 다시 이직준비 하려니깐 서터레스네요.. 흑흑

   화이팅입니다!!!

   으아 이직준비 스트레스풀 하죠. 화이팅입니다!!

   테슬라 구입하고 샀던 이런 저런 물품들을 함 정리해서 적어 볼까 합니다. 간만에 개인 블로그에 먼지좀 털어야.
   만들고 싶었던 서비스가 하나 있는데, 상세 기획을 함 해보려고 해요. 최종적으로는 긱뉴스랑 어느정도 연결되는 모양새가 될듯 합니다.
"
"https://news.hada.io/topic?id=5100","CloudFlare R2 Object Storage 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CloudFlare R2 Object Storage 공개

   - AWS S3 API와 완벽 호환
   - ""Egress 비용 무료""
   ㅤ→ $0.015/GB 로 월 저장 비용도 저렴
   ㅤ→ Storage Size 와 Operation 에만 비용을 받음
   - S3에서 마이그레이션 지원
   ㅤ→ 버켓 지정후 엔드포인트 교체하면 필요시마다 S3에서 복사해서 서빙
   - 현재 개발중이고 대기리스트 조인 가능. 곧 오픈베타 발표 예정
   R2 means
   ㅤ→ “Really Requestable”
   ㅤ→ “Repositioning Records”
   ㅤ→ “Ridiculously Reliable”
   ㅤ→ “Radically Reprogrammable”

   굉장히 저렴하네요 ㅎㅎ 좋은정보 감사합니다!

   Corey Quinn 이 S3 랑 가격 비교를 했네요.
   https://twitter.com/QuinnyPig/status/1443028078196711426
   결론적으로 1GB 를 저장해두고 1백만명한테 서빙할 경우
   R2쓰면 13¢ 이면 되고, AWS S3 를 쓰면 $53,891 이라는 얘기
   서빙이 많은 파일이라면 R2가 무조건 우위에 있겠네요.

   제일 예측하기 어렵고 비용이 많이드는 부분이 egreess쪽으로 생각합니다.. 그런데 그 비옹을 무료로 하다니...
   최근 개인 도메인 dns 서버를 클라우드플레어로 바꿨는데..
   거기에 workers 같은것도 간단히 쓸 수 있어 좋더라구요.
   다만.파일을 저장할 방법이 KV뿐이라 애매했는데,
   clodflare에 object storage가 정식으로 생기면, 뭘 만들때 진정 서버리스로 다 해 볼 수 있겠네요.
   기대 됩니다.

   $0.0015/GB*월이 아니라 $0.015/GB*월인 것 같습니다.

   헛 그렇네요. 수정했습니다. 고맙습니다.

   - AWS의 어처구니 없는(Egregious) Egress 비용 https://news.hada.io/topic?id=4693
   AWS가 Egress 비용을 일부러 비싸게 받고 있다고 Cloudflare 가 저격 글을 작성한 적이 있는데요.
   이 R2 서비스를 위한 빌드업 이었나 보군요.
"
"https://news.hada.io/topic?id=5183","어떤 버전의 JDK를 써야 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           어떤 버전의 JDK를 써야 할까?

   - OpenJDK는 Java SE 스펙의 오픈소스 구현체이지만, 소스 코드 만임
   - 바이너리 배포본은 여러 벤더에서 제공
   ㅤ→ 라이센스/유료 지원 여부/지원하는 플랫폼/업데이트 빈도등에서 차이가 있음
   - 어떤 것을 선택하면 좋은지를 정리한 가이드
   ㅤ→ 기본 추천은 Adoptium Eclipse Temurin 17
   - 각 배포본에 대한 설명
   ㅤ→ OpenJDK builds by Oracle (jdk.java.net)
   ㅤ→ Oracle Java SE Development Kit (JDK)
   ㅤ→ Adoptium Eclipse Temurin
   ㅤ→ AdoptOpenJDK
   ㅤ→ Azul Zulu
   ㅤ→ BellSoft Liberica JDK
   ㅤ→ IBM Semeru Runtime
   ㅤ→ Amazon Corretto
   ㅤ→ Microsoft Build of OpenJDK
   ㅤ→ Alibaba Dragonwell
   ㅤ→ SapMachine
   ㅤ→ Red Hat OpenJDK
   ㅤ→ GraalVM

   CI와 빌드용으로 graalvm을 잘 쓰고 있습니다만. 아직 m1옹 바이너리가 나오지 않은게 아쉽습니다.
   곧 Java17에 대응하는 graalvm 이 나올것 같은데 포함되기를 기원합니다... 만
   메모리가 모잘라서 CI 구성하기가 어렵다는 이야기가 있네요.
   https://github.com/oracle/graal/issues/2666#issuecomment-937627354

   GraalVM unboxing(?) 이벤트는 여기서 스트리밍될 예정이라고 합니다.
   https://youtu.be/Tsc2Io9DJsE

   당연하게 AdoptOpenJDK를 사용하고 있었는데 7월부터 Adoptium으로 넘어갔군요...

   AWS 기반 서비스를 운영중이라 Amazon Corretto 를 이용중입니다. :)

   AdoptOpenJdk 를 주로 쓰고 있었는데 이 프로젝트가 Adoptium… 으로 이어지는 거군요
"
"https://news.hada.io/topic?id=5107","Marked 3.0 - 빠른 마크다운 파서 & 컴파일러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Marked 3.0 - 빠른 마크다운 파서 & 컴파일러

   - 빠른 속도를 위해 설계
   - 브라우저, 서버, CLI 어디서든 사용 가능
   - 캐슁/장시간 블로킹 없이 마크다운 파싱 가능한 저수준 컴파일러
   - CommonMark 와 GFM(GitHub Flavored Markdown) 의 모든 마크다운 기능을 구현하지만 가볍게 만드는 것을 목표
"
"https://news.hada.io/topic?id=5075","JetBrains DataSpell 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         JetBrains DataSpell 공개

   ""데이터 사이언티스트를 위한 IDE""
   - 똘똘한 Jupyter Notebook
   ㅤ→ 커맨드/에디터 빠른 전환
   ㅤ→ 코드 자동완성, 실시간 에러 체킹 등 코딩 보조
   ㅤ→ 로컬/리모트 노트북 지원
   - 인터랙티브 파이썬 스크립트
   ㅤ→ 파이썬 콘솔
   ㅤ→ DataFrame 및 시각화 지원
   - 다양한 도구들 내장
   ㅤ→ Git 버전 컨트롤
   ㅤ→ DB 접속 및 쿼리 도구
   ㅤ→ 터미널
   - 마크다운, Conda, R, Docker 등등 지원
   - 현재 Early Preview
"
"https://news.hada.io/topic?id=5127","Fixture Monkey - 엣지케이스 포함 테스트 인스턴스 자동생성 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Fixture Monkey - 엣지케이스 포함 테스트 인스턴스 자동생성 도구

   ""Write once, Test anywhere""
   - 재사용 및 제어 가능한 임의의 테스트 픽스쳐를 자동 생성해주는 Java 라이브러리
   - 네이버의 오픈소스
   - 테스트 인스턴스를 쉽게 만들고, 같은 테스트 설정을 여러 개의 테스트에 사용하게 해줌
   - 한개의 FixtureMonkey 인스턴스로 여러 개의 엣지케이스 작성 가능
"
"https://news.hada.io/topic?id=5099","2.5년간 1주에 40-50시간 업무용으로 VR을 사용한 사람의 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 2.5년간 1주에 40-50시간 업무용으로 VR을 사용한 사람의 후기

   - 오큘러스 퀘스트 2와 Immersed(VR 업무환경 SW)를 이용
   - 정보시스템 개발 같은 일반 프로그래밍 업무를 수행했음
   - Immersed 로 가상 3-스크린 구성
   ㅤ→ 메인 스크린 : 업무 (4k, 6m x 4.6m, 4:3)
   ㅤ→ 레퍼런스 : 참고 자료 및 음악 (1080p, 2.5m x 3.6m, 9:16)
   ㅤ→ 커뮤니케이션 : 하단에 작게 대화/캘린더.. (1.2m x 2.1m, 16:9)
   - 표준 키보드 & 마우스(트랙볼) 사용
   ㅤ→ 마이너리티 리포트 처럼 한다면 더 피곤 했을 것
   ㅤ→ 음성인식/타블렛도 이용은 가능하지만 프로그래밍에는 적합하지 않음
   - 사무실에는 실제 피지컬 디스플레이는 하나도 없음
   - 팁
   ㅤ→ 눈에 잘 맞는 지점을 찾을 것 : IPD(interpupillary distance, 동공사이 거리) 와 렌즈 조정
   ㅤ→ 교정용 렌즈를 써야하면 렌즈 인서트를 쓸 것. 안경이나 콘택트렌즈 보다 나음
   ㅤ→ 렌즈와 헤드셋을 청소할 것
   ㅤ→ Pixel Parity를 맞추도록 노력. 퀘스트2는 각 눈에 1832x1920 이므로 1:1과 가까울수록 가장 잘 보임
   ㅤ→ 피지컬 화면 구성을 에뮬레이팅 하려고 하지 말 것. 마음대로 구성 가능
   ㅤ→ ""크고 먼 것"" 이 ""작고 가까운 것"" 보다 더 편안함
   ㅤ→ 인체공학(Ergonomics)은 여전히 중요. 목을 오래 돌리고 있거나, 머리를 기울이거나, 고정된 자세를 취하지 말 것
   ㅤ→ 좋은 WiFi가 중요. 가능하다면 컴퓨터랑 헤드셋간에 WiFi Direct로 구성
   ㅤ→ Immersed 매뉴얼 필독
   - 경험
   ㅤ→ 코드가 IMAX 극장처럼 보임. 스크린샷으로 표현 불가
   ㅤ→ 사용시 정말 편안하고, 생산성 좋고 효율적임.
   - 오큘러스 퀘스트에는 얼굴에 닿는 부분은 폴리우레탄 가죽으로 교체하고, Halo Mount 를 추가했음
   - tmux/vim 같은 예전 도구들이 더 큰화면과 함께 쓰기 편해짐
   - Mural 같은 새로운 협업 도구들도 훌륭
   왜 이렇게 까지?
   - 실제 멀티 모니터 설정보다 비용은 더 저렴
   - 집중도가 훨씬 높아짐 20~100%
   - 스크린을 편하게 구성할수 있어서 더 유연함(인체공학적으로)
   - 접근성도 더 좋음
   주료 사용하는 도구들
   - 생산성 : Immersed
   - 협업 : BigScreen, Walkabout Mini Golf, MultiBrush
   - 명상 : Calm Place, Supernatural, MultiBrush
   - 운동 : Supernatural, Beatsaber, Pistol Whip, Synth Riders, The Thrill of the Fight
   - 창작 : Gravity Sketch, MultiBrush
   - 엔터테인먼트 : 엄청 많지만 최고는 Onward

   오큘러스2 + virtual desktop으로 사용해봤습니다.
   일단 초점이 안맞습니다. 모니터를 3개 구동시켜서 보는데 곁눈질로 가운데 이외의 모니터를 보면 멀미가 납니다. 이유를 잘 살펴보니 글자가 흐릿하게 보이면서 가운데 있는 모니터와 초점이 다르더군요. 그래서 모니터를 3대 구동시켰는데 결국은 1대만 보게 되는 현상이 생겼습니다.
   억지로 참고 더 사용해봤는데 체험이외 효과는 못 본 것 같습니다. 저도 미래에 간 느낌을 받아보려고 했었는데.. 멀미 때문에 장시간 사용은 어렵더군요. 아쉬웠습니다. ;ㅁ;

   저같은 경우에는 가장 큰 문제가 양쪽 눈 시력 차이로 인한 두통이더라구요. 시력 차이가 있는 짝눈이 평소 생활할 때 한쪽 눈만 많이 사용하고 그에 익숙해져 있다는 것을 VR을 사용하고 뼈저리게 느꼈습니다. VR을 쓰면 강제로 양쪽 눈을 모두 동일하게 쓰게 되는데요. 이러니까 금방 피곤해지고 VR 마운트를 벗고 난 뒤에도 한동안 양쪽 눈을 모두 동일하게 써서 시야에 이질감이 듭니다. 짝눈에게는 아무래도 VR보다는 AR이 더 맞는 것 같습니다. ㅠㅠ

   제가 땀 + 갑갑한 걸 못 참고 물을 꽤 많이 마셔서... 안경 형태로 나올 때까지 존버해야겠네요. 그런데 재택 환경에서는 모니터가 아주 많아서 꼭 필요한지는 모르겠습니다. (
   메인(프로그래밍):
   2k 모니터 3개 ( Notion/Obsidian, 코드, 실행화면 ) + 1080p 서브 모니터( 스포티파이, 터미널 )
   서브(글쓰기/일감 정리/뉴스 탐색):
   DELL 34인치 4k 모니터 1개 (글쓰기) + 맥북 프로 (스포티파이, Notion, Edge)
   수집용도로(... ) 모아놓은 2 in 1 PC들... 서피스 프로 X.. 갤럭시 탭 S7... 아이패드 11인치...
   노트북... Thinkpad X1.. Thinkpad X230 2대..
   ... 적다보니 '음. 아직 나는 완전 리얼리스트구만.' 이라는 생각이 들었습니다.

   저는 생각보다 별롭니다.
   1. 땀차고 꽤 무겁습니다. (30분 정도 사용)
   2. 컴퓨터 자원을 꽤나 먹음.
   제가 과거 VR Ready 노트북이라
   가벼운 VR 게임 개발도 돌리곤 합니다만
   따라서 노트북으로 하는건 글쎄.. 잘 모르겠습니다.
   3. 화면이 아이맥스 극장처럼 보이는건 사실 모르겠습니다.
   그렇게 놓으면 모니터 한개만 딱 눈앞에 놓을수 있고
   나머진 목이나 자세를 틀어서 봐야하는데,
   키보드나 마우스가 의자에 붙어있지 않다면 그닥 ...
   4. 초기 모니터 배치가 상당히 귀찮습니다.
   모니터 1개만 놓으면 모르겠으나, 여러개를 겹쳐서 놓는게
   생각보다 엄청 편하게 놓을수 있는 구조는 아닙니다.
   혹시 저처럼 시도해보실분은 참고하시길 [ ...]

   저도 재택시에는 immersed로 사용합니다
   장점이 잘 나와있는것 같아서 단점을 써보자면
   - 오큘러스 땀 차고 갑갑함
   - 키보드만 사용한다면 괜찮지만 마우스가 필요한 경우에는 마우스찾느라 허우적허우적
   - 충전을 위한 케이블이 방해됨
   정도네요
   무게 문제는 제 경추가 단련되서인지 괜찮았습니다 :D 고마워 경추양...

   목이 부러질 것 같은데... 그걸 어떻게 해결했을까 궁금하네요.

   와 멋지네요

   잠깐 시도해봤는데, 미래로 온 기분이 들어 즐겁네요. 괜히 휴대폰이 눈에 밟혀 의미없이 시간낭비 하지도 않고요.
   다만 컵이나 텀블러로 뭘 마실때 vr 기기가 걸려소 빨대나 페트병을 사용해야 된다는 단점이 있긴 합니다.

   돈이 들더라도 해보고 싶네요

   단점이 없으니 해보고 싶다는 생각이 드네요

   엄청나네요. 의외로 단점이나 현재에서는 사용하기 좀 그렇다는 이야기가 없군요.

   Immersed 후기인데.. 궁금해 지네요. 한번 사용해 봐야 겠어요.
"
"https://news.hada.io/topic?id=5116","Youki - Rust로 작성된 컨테이너 런타임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Youki - Rust로 작성된 컨테이너 런타임

   - OCI 런타임 스펙을 Rust 로 구현한 오픈소스
   - Go로 구현된 runc와 비슷
   ㅤ→ OCI 스펙은 Go로 구현하기엔 약간 까다로움(namespace, fork 등 때문에)
   ㅤ→ 하지만 Rust에서는 쉽고 안전함
   - runc 보다 더 빠르고 적은 메모리 사용
   - 오라클이 Rust로 만들던 OCI 런타임 Railcar 는 개발이 중단되었음
"
"https://news.hada.io/topic?id=5193","아마존, 재택 근무에 대해서 팀별로 선택 가능하게 할 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    아마존, 재택 근무에 대해서 팀별로 선택 가능하게 할 것

   - 각 팀의 Director 레벨에서 어떻게 할 것인지 결정 가능
   ㅤ→ 업무에 따라 완전히 재택을 할지, 일주일에 몇 일 근무할지
   - 회사의 요청사항은, 가능하면 하루전 공지해도 사무실에 나올 수 있도록 팀과 가까이 있기 바란 다는 것
   ㅤ→ 별도로, 원하면 근무 국가내에서는 4주까지 풀로 재택할수 있게 지원 할 것임
   - 내년 1월 3일 이전에 리더들이 결정해서 알려줄 것이라고
"
"https://news.hada.io/topic?id=5066","Rome, Rust로 작성 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Rome, Rust로 작성 예정

   - Babel 개발자가 만든 자바스크립트 e2e 개발 툴체인 Rome
   - JS에서 Rust로 변경한 이유
   ㅤ→ 다들 속도/메모리/안정성을 이야기함
   ㅤ→ 우리에겐 생산성이 가장 큰 고려 대상. 소수의 JS 개발자들 팀이 새 언어를 도입한다는게 어려웠지만 프로토타이핑 해보니 Rust가 훨씬 생산적
   ㅤ→ Rome 의 초기 주요 결정중 하나는 써드 파티 종속성을 가지지 않는 것인데 이것도 Rust 와 커뮤니티에 의해서 대부분 해결

   - Rome - 실험적인 자바스크립트 툴체인 https://news.hada.io/topic?id=1609
   - Rome - JavaScript / TypeScript Linter 베타 릴리즈 https://news.hada.io/topic?id=2621
   - 모든 길은 Rome으로 통할까? [번역] https://news.hada.io/topic?id=2788
   - Rome Tools, Inc 회사 설립 https://news.hada.io/topic?id=4193
   음.. Rome은 나오는 뉴스들만 봐서는 이상하게 좀 요란한듯 해보여요.

   물론 Next.js / Deno 도 swc(Rust 기반 JS/TS 컴파일러) 도입중이라 JS 툴체인 자체는 Rust 로 가는게 미래 방향인거 같기는 합니다.
"
"https://news.hada.io/topic?id=5105","VSCode의 Bracket Pair 색상화를 1만배 빠르게 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 VSCode의 Bracket Pair 색상화를 1만배 빠르게 만들기

   - 2016년에 개발된 Bracket Pair Colorizer 확장은 6백만회 설치
   - 성능을 개선한 2버전도 3백만회 설치
   - 하지만 VS Code Decoration API의 한계 및 토큰 정보에 접근이 불가능해서, 아직도 큰파일에서는 느림
   ㅤ→ 42k 짜리 파일은 10초간 CPU를 100% 사용해서 다른 모든 동작들이 동작 안됨
   - 1.60 부터는 이 확장 자체를 VS Code 코어에서 구현해서 1만배 빠르게 개선(특정 예제에서)
   ㅤ→ ""editor.bracketPairColorization.enabled"": true
   - VS Code for Web 과 Monaco 에도 적용
   * 이 기능 자체가 대대적인 API변경 없이, 확장에서는 빠르게 구현하기 힘들다는 것
   * (원 글에는 알고리듬 상세 내용 포함되어 있으나 너무 길어서 옮기지 않습니다.)

   예전부터 Bracket Pair Colorizer 2를 사용했었는데 다시 확장페이지에 들어갔더니 유지보수가 끝났었네요.
   확장을 지우고 editor.bracketPairColorization.enabled 옵션을 켰습니다.

   업데이트 된 것은 알았지만
   1. 성능이 이정도로 향상된 것인줄은 몰랐네요
   2. 저는 확장 프로그램 1을 사용중이었군요
   3. 확장프로그램 지우고 설정에서 이 기능을 enable 했습니다. :)

   얼핏 봐서는, 유명한 확장을 VSCode가 내부에 구현해서 문제가 되는 것 처럼 보이지만
   https://github.com/microsoft/vscode/…
   Bracket Pair Colorizer 의 원작자가 이 성능 이슈를 같이 팔로윙하고 있고,
   정작 자신도 이 확장이 이제 자신이 손대기 어려울 정도가 되어서 유지보수 하기 어렵다고 얘기하고 있습니다.
   즉, VS Code가 내부에서 빠르게 구현해주면 차라리 서로 좋다는 것

   저도 같은 생각을 했는데, 윈윈 했군요 ^_^ ( 원래 개발자는 이제.. 더 이상 관리를 안해도 되니.ㅎㅎ )
"
"https://news.hada.io/topic?id=5093","시계열DB를 밑바닥부터 만들어보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           시계열DB를 밑바닥부터 만들어보기

   - Go로 작성되어 있지만 거의 언어 무관
   - 시계열 데이터는 타임스탬프가 붙은 여러 값의 컬렉션. 각 항목은 데이터 포인트
   ㅤ→ 양이 많음. 많아야 의미를 가짐. 초당 백만번씩 캡쳐링 되는 경우도 많음
   ㅤ→ Append-only, 시간순 정렬, 최근 데이터 우선
   ㅤ→ 특정 시간단위 벌크 리딩
   ㅤ→ High Cardinality (집합의 단위가 매우 큼)
   ㅤ→ 대부분 최근 데이터를 읽어서 사용
   - 시계열 데이터는 주로 쓰기가 많은 것을 반영한 TStorage DB엔진 라이브러리를 Go 언어로 개발
   - 데이터 모델
   ㅤ→ 선형 데이터 모델
   ㅤ→ 데이터 포인트를 시간단위로 파티셔닝
   ㅤ→ 각 파티션은 해당 시간내의 모든 데이터를 가진 별도의 독립적인 DB처럼 동작
   ㅤ→ 헤드 와 그 다음 파티션만 Heap에 저장되는 메모리 파티션으로 수정 가능
   ㅤ→ 데이터 손실을 막기 위해 쓰기전에 WAL(Write Ahead Log)에 작성
   ㅤ→ 그 이전 파티션 데이터들은 디스크에 싱글 파일로 저장. 디스크 파티션들은 읽기 전용
   - 메모리 파티션
   ㅤ→ 데이터 포인트들의 리스트가 힙상에 배열로 표시 (Go 의 Slice 와 비슷)
   ㅤ→ 레이턴시 및 동기화 때문에 Out-of-order 가 자주 발생. 같은 파티션 내라면 버퍼링을 통해서 저장할때 재 정렬, 다른 파티션이라면 헤드가 아닌 이전 파티션 뒤에 추가하는 것으로 가능
   ㅤ→ WAL 에 실제로 기록되는 것과 똑같은 데이터를 저장해서, 오류시에도 복구 가능하게
   - 디스크 파티션
   ㅤ→ 파티션당 한개의 디렉토리에 메타 데이터와 압축된 실제 데이터를 저장 (Prometheus V3 Storage 의 축소판)
   ㅤ→ Memory-Mapped 데이터 형식(커널에서 mmap 으로 캐쉬가능)
   ㅤ→ 메타데이터는 JSON 형식으로 인덱스를 형성
   - 타임스탬프와 밸류 튜플로 표현되는 데이터 인코딩은 페이스북의 Gorilla 논문에서 제안된 인코딩 방식을 사용
   ㅤ→ 타임스탬프와 밸류를 서로 다른 메소드로 인코딩
   ㅤ→ timestamp 는 unsigned 64-bit integer 값으로 Delta-of-delta 인코딩을 이용
   ㅤㅤ✓ Delta 인코딩 : 기존값과 현재값의 차이만 기록하는 방식
   ㅤㅤ✓ Delta-of-Delta 인코딩 : 일반적으로 특정 시간당 생기므로 델타의 델타만 기록
   ㅤㅤ✓ 가변 길이로 인코딩 되므로 Delta-of-Delta 가 가장 작은 공간을 사용
   ㅤ→ values 는 signed 64-bit floating-point 값으로 XOR 인코딩 을 사용
   ㅤㅤ✓ 처음 값은 그냥 저장
   ㅤㅤ✓ 다음 값을 XOR 해서 0이면 기존 값과 같으므로 0 비트 하나만 저장
   ㅤㅤ✓ 0이 아니면 다른 비트들 기반으로 계산(Meaningful Bit)
   ㅤㅤ✓ 앞/뒤의 0들을 계산해서, 0의 갯수가 같다면 0과 의미있는 비트만 저장, 다르면 리딩 제로 갯수, Meaningful Bit의 갯수과 그 자체를 저장
"
"https://news.hada.io/topic?id=5159","Paddle, iOS 인앱결제(IAP) 대체 서비스 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Paddle, iOS 인앱결제(IAP) 대체 서비스 공개

   - Paddle은 B2B/B2C SaaS용 결제 플랫폼
   - 다양한 구독 옵션 및 결제 방법 지원
   - 앱스토어가 해주는 결제 관리자, 국가별 세금, 고객지원등을 자체적으로 제공
   - 저렴한 수수료 : $10 이하는 10%, $10 이상은 5% + $0.5
   - 고객과 이메일 컨택 가능, 환불 지원, 쿠폰 기능 지원
   - 세밀한 구독관리 : 요금제, 취소, 플랜 변경, 갱신일자, 구독 잠시 멈춤(Pausing) 가능
   - 웹/앱 크로스 플랫폼 지원
   - SaaS 방식의 빌링 모델 지원 : 사용량, 유닛 또는 'Seat'별

   단순 결제 만이 아니라, 인앱결제 처럼 관리기능을 제공하는데
   웹을 통해 구매하고 그걸 앱내에서 정보를 가져다 쓰는 방식으로 지원한다고 보면 되겠네요.
   결제서비스 제공자들은 다 도입할만 할듯.

   헐.. 이건 애플의 정책에 벗어나는 것은 아닐까요? 애플의 반응이 궁금해지네요.

   이번 에픽 및 한국/일본 법적인 결정등에 따라, 아마도 웹을 통한 결제 방법인데 좀더 쓰기편한 모양새로 만든다 정도로 귀결될거 같아요.
"
"https://news.hada.io/topic?id=5115","Ampie - 현재 웹사이트 관련 HN/트위터 링크를 보여주는 브라우저 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ampie - 현재 웹사이트 관련 HN/트위터 링크를 보여주는 브라우저 확장

   - 보고있는 페이지에 대해 트위터 링크와 HackerNews 의 토론 쓰레드를 표시
   - 백링크들 표시
   - 현재 도메인의 다른 흥미로운 페이지들도 추천

   비슷하게 현재 페이지에 대한 HackerNews, Lobste.rs, Reddit, Barnacles 페이지를 보여주는 북마클릿도 있습니다.
   https://discussions.xojoc.pw/
"
"https://news.hada.io/topic?id=5132","SpiceDB - 분산 관계기반 권한 시스템 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SpiceDB - 분산 관계기반 권한 시스템 오픈소스

   - 구글의 Zanzibar 논문을 기반으로 프로덕션 가능 수준으로 구현한 오픈소스
   ㅤ→ Zanzibar : 유튜브,닥스,캘린더,맵스 등 구글 클라우드 제품의 퍼미션을 관리하는 글로벌 권한 시스템
   - 퍼미션 모델을 스키마로 만들고 클라이언트 라이브러리로 DB에 저장한후 효율적으로 쿼리
   ㅤ→ 표현이 풍부한 API
   ㅤ→ 직관적인 스키마 언어와 플레이그라운드 제공
   ㅤ→ 분산/병렬 평가를 지원하는 강력한 그래프 엔진
   ㅤ→ 인메모리, PostgreSQL, CockroachDB 지원 (Pluggable)
   ㅤ→ Prometheus Metrics 제공

   - Zanzibar - 구글의 Consistent 글로벌 권한 시스템 https://news.hada.io/topic?id=171
   - Ory - 오픈소스 Identity 플랫폼 https://news.hada.io/topic?id=4038
   SpiceDB 소개글 ""SpiceDB is open source!""
   - https://authzed.com/blog/spicedb-is-open-source/
"
"https://news.hada.io/topic?id=5165","Show GN: 한·중·일 전산학 용어 대조","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 한·중·일 전산학 용어 대조

   안녕하세요. GeekNews에 계정을 만들고 나서, 그 동안 그저 잘 읽기만 해왔는데, 한글날이 되니 올해 초에 만들었던 《한·중·일 전산학 용어 대조》표가 떠올라서 Show GN으로 공유해 봅니다.
   어느 전문 분야나 그런 경향이 있지만, 요즘에는 편의상 전산학 용어를 예전부터 이미 정착된 번역어를 쓰지 않고 영어를 외래어로서 그대로 쓰는 경우가 많습니다. 이를테면 요즘에는 “값”도 그냥 “value”라고 말하고 쓸 때도 많지요.
   아무튼 한국어에도 이미 수십년 전부터 정착된 좋은 전산학 번역어들이 많은데요. 이들 중 상당수가 같은 한자문화권인 일본이나 대만과 공유된다는 걸 알게 되어서, 재미삼아 만들었던 대조표입니다. 한글날 기념으로 한 번 구경해 주셔도 좋을 것 같습니다.
   소스 코드는 < https://github.com/dahlia/cjk-compsci-terms >에 있습니다. 각 용어들은 tables/ 디렉터리 안에 분류에 따라 YAML 파일로 정리되어 있으니, 용어를 추가하거나 오류를 수정하는 PR도 환영합니다.
   읽어주셔서 고맙습니다!

   문의사항이있습니다.
   YAML에있는 중국어와 일본어 표기를 보니 한국에서 사용하는 한자 표기를 쓰고 하위에 term으로 번체, 간체, 일본식 약자 표기를 한걸 확인하였습니다.
   어떤 의도로 개발하였는지 궁금하네요
   예를들어 Source Code에 대해서는
   중국 대륙(zh-CN) 한국어 한자표기 표현으로 ""源代碼""와 ""源程序""를 사용한다고하는데
   term에는 간체표기를 제대로 한거보면 일관성이 안맞다고 보여지긴합니다.
   참고로 Source Code는
   중국대륙에선 源代码、源码、源程序를 주로 사용
   대만에선 原始碼、原始程式碼로 사용함
   홍콩에서 原始碼, 源碼 를 사용한다고 들었습니다.
   그리고, Computer의 경우
   중국 대륙에선 공식적으로 ""电子计算机""이며, 많은 책과 문서에서 Compuer에 대한 표기를 ""计算机""를 씁니다만,
   대만, 홍콩의 영향으로 사람들이 ""电脑""도 혼용하여 많이 사용합니다.
   참고1: https://zh.wikipedia.org/wiki/…
   참고2: 电脑吧 https://tieba.baidu.com/f?kw=%B5%E7%C4%D4&fr=ala0&tpl=5
   징동닷컴 CPU코너 : https://pcdiy.jd.com/
   징동닷컴 노트북코너: https://list.jd.com/list.html?cat=670,671,672
   그래서, 이 부분은 정부 공식 표기 위주로 진행할것인지 확인을 해야할 것이 많아보입니다.
   중화권에서 사용하는 표기가 제각각이고, 사용하는 사람마다 빈도수가 다른 경우가 있으니 고려해야할 대상도 많을 것으로 보입니다.

   귀중한 의견 고맙습니다.
   우선, 먼저 웹으로 출판된 페이지를 먼저 확인해 보시면, 대륙 중국어의 용어 중에 간화자가 아닌 한국식 한자 표기로 표시된 항목이 없는 것을 확인하실 수 있을 것입니다. YAML 데이터에서 term 필드만이 실제 화면에 표시되는 내용이기 때문에, 말씀하신 것처럼 term에서만 각 지역에서 쓰는 표기 방식으로 적은 것입니다 (단, 한국어의 경우 한글 대신 한국식 한자로 표기).
   그렇다면 그보다 위쪽에 쓰인 《강희자전》체의 문자열이 무엇이냐면, 그냥 데이터 안에서 서로 다른 언어 (또는 방언) 사이의 동계어들을 묶기 위한 임의의 그룹 식별자입니다. 임의이기 때문에 굳이 한자일 필요도 없고 그냥 숫자나 해시를 써도 됩니다. 그렇지만 이를테면 일본어 「科学」와 대만 중국어 「科學」은 하나의 동계어로 연결되어서 보여야 하기 때문에, 같은 그룹 식별자를 공유해야 합니다. 비슷하게 한국어 「컴퓨터」와 일본어 「コンピュータ」 역시 같은 그룹 식별자로 묶여야 합니다.
   식별자를 그냥 「foobar」 같은 임의의 무의미한 문자열로 해도 되겠지만 편의상 내용을 드러나고 일관된 규칙에 따라 짓는 게 관리하기 편하겠다고 생각했습니다. 따라서 영어 유래어는 로마자로, 한자어는 한자로 표기하는 것이 가장 쉽게 떠올릴 수 있는 규칙이었습니다. 단, 한자 표기도 다양한 방식이 있을 수 있기 때문에, 여러 속자나 이체자 등을 정규화해야 했고 (그룹 식별자이므로 하나로 모아야겠죠), 이 과정에서 자연스럽게 중국의 간화자나 일본의 신체자는 후보에서 탈락했습니다. 각 지역 기준 독음이 같다고 서로 다른 글자를 합친 경우가 꽤 있기 때문에 정규화에 부적합하기 때문입니다 (분류 정보 손실). 따라서 선택지는 홍콩의 번체나 대만의 정체, 한국식 한자 따위 중에 고를 수밖에 없는데, 현존하는 어떤 정치체와 연결된 함의가 없다고 볼
   수 있는 《강희자전》체를 기준으로 삼았습니다.
   이상의 내용은 저장소 내의 CONTRIBUTING.md 파일을 보시면 이미 기술되어 있는 내용입니다. 그 밖의 부분도 적혀 있으니 참고해주셔도 좋을 것 같습니다.
   언중이 같은 뜻을 가르키는 여러 낱말 중 어떤 것을 가장 많이 쓰는지, 즉 어휘의 분포를 폭넓게 파악하는 것은 전문 연구자도 아닌 일개 개인이 조사하기에는 비용도 시간도 너무 많이 필요해서 무리입니다. 컴퓨터 과학 연구에 종사하거나 소프트웨어 개발에 임하는 사람들 사이에서 용어 사용의 분포를 조사한 선행 연구가 있다면 저도 적극적으로 활용하고 싶지만, 그런 것이 딱히 없다면 저로서는 여러 참여자들의 도움, 특히 각 언어의 원어민 화자의 제안이 절실히 필요합니다. 당연히 지금까지는 홀로 조사했기 때문에 중국어 위키백과나 바이두 백과 등을 중심으로 조사할 수밖에 없었습니다.
   말씀하신 구체 사례들에 대해서는 풀 리퀘스트를 보내주시면 더 빠르게 반영할 수 있을 것 같습니다.
   긴 댓글 읽어주셔서 감사합니다.

   홍콩정부에서 발간하는 English-Chinese Glossary of IT Terms 참고하시면 홍콩에서 사용하는 용어 정리가 될겁니다.
   https://ogcio.gov.hk/en/our_work/…

   멋집니다 :D

   좋은 정리 감사합니다.
   나중에 기회 되면 북한의 전산 용어에 관한 자료도 보고 싶군요. 통일부 북한자료센터에 적절한 자료가 있을지 모르겠습니다.

   이미 통일부 사이트에 존재합니다
   남북한 IT용어 비교: https://nkinfo.unikorea.go.kr/nkp/term/skNkItTerm.do

   북조선의 리눅스 배포본인 붉은별 같은 걸 뜯어보면 뭔가 자료가 나올 수도 있을 것 같네요. 《조선말대사전》도 들어있던 것 같던데… 한 번 시간 날 때 북조선말도 추가해 보도록 하겠습니다!

   남북한 IT용어 비교: https://nkinfo.unikorea.go.kr/nkp/term/skNkItTerm.do
   이걸 스크래핑 하면 빠르게 추가할 수 있을 것 같습니다.

   잘 보니 스크래핑할 필요도 없이 xls 포맷의 파일로 해당 내용을 전체 제공하고 있군요.

   ko를 ko-kr과 ko-kp를 분리해서 북한 전산용어를 달면 좋겠네요

   Markdown처럼 <>로 묶으면 URL 경계가 잡힐 줄 알았는데 아니었네요. 😅 저장소 링크는 이쪽입니다: https://github.com/dahlia/cjk-compsci-terms

   마크다운 지원 작업을 해야 하는데 아직 못하고 있습니다 ㅠ
   제가 URL 클릭 가능하게 앞뒤로 빈칸만 추가해서 수정해두었습니다.
   근데 정말 한글날에 잘 어울리는 Show 네요. 재미나게 보겠습니다!

   본문도 고쳐주셔서 고맙습니다!
"
"https://news.hada.io/topic?id=5171","MaryJane - 30줄의 파이썬코드로 작성된 MJPEG 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  MaryJane - 30줄의 파이썬코드로 작성된 MJPEG 서버

   - 하드에서 MJPEG 파일을 읽어서 웹브라우저로 스트리밍 전송하는 간단한 서버
   - 브라우저의 img 태그를 이용해서 Motion JPEG 으로 된 영상을 스트리밍 형태로 표시 가능
   [<a rel=] http://18.116.60.15:8080/maryjane/""/>

   요즘은 mp4 와 video 태그로 영상들 많이 표시하는데, 이 방식으로 하면 MP4 지원 안하는 예전 기기들도 영상 표시 가능하겠네요.
"
"https://news.hada.io/topic?id=5064","Manyverse - 탈중앙화 분산 SNS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Manyverse - 탈중앙화 분산 SNS

   - 포스트, 좋아요, 프로필, 채팅등의 기능을 가진 오픈소스 SNS
   - 모든 친구들의 글과 소셜데이터가 폰에 자체 기록되고, 온라인될 때마다 친구들로부터 최신버전으로 싱크
   - 영원히 무료 : 광고/페이월/토큰/추적/등록/알림 모두 없음. 회사/클라우드/데이터센터 모두 필요없음
   - Scuttlebutt (P2P Gossip Protocol) 기반
   - 블루투스/와이파이/인터넷 기반 싱크
   - 7명까지의 그룹 대화 가능
   - Block/Mute 지원

   https://signal.org/ 같기도 하네요...

   이런거랑 비슷하게 탈중앙화 기반의 메신저는 왜 안나올까요?

   Matrix 가 P2P 방식으로 테스트 하고 있긴 합니다.
   https://news.hada.io/topic?id=2207

   음.. 저는 P2P 서비스들이 정말 특정 포인트를 넘어서 사용이 가능할까 하는데에는 항상 의문이..
   물론 요즘의 페이스북은 정말 재미없어요. 차라리 트위터가 자신의 용도에 알맞는 것 같음.
"
"https://news.hada.io/topic?id=5169","Google의 iOS용 앱들이 iOS 디자인을 따르기로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Google의 iOS용 앱들이 iOS 디자인을 따르기로

   - 거의 10년간 개발해온 iOS용 오픈소스 Material Design Components(MDC)를 더 이상 개발하지 않고 유지보수 모드로 전환
   - 계속 변하는 애플의 플랫폼 위에서 이를 업데이트 하기 보다는, 플랫폼이 제공하는 UI를 따르기로
   - SwiftUI 와 iOS 14+의 UIKit 향상때문에 작은 코드로도 브랜드 경험을 제공하기가 쉬워졌다고
   ""The best code is often no code""
   - 이제 구글 개발자들은 더이상 커스텀 코드 개발을 안 해도 되고, iOS위에서 구글앱을 사용하는 사람들은 더 iOS앱처럼 느껴지는 구글 앱을 사용할 수 있게 될 것

   메터리얼 디자인 테마 커스터마이징해서 쓰는 플러터는 어떻게...?

   궁극적으로는 이게 맞는 방향이라고 봅니다. 브랜드가 아닌, 플랫폼의 디자인 가이드를 따라야 속도도 빠르고, 사용자가 편한거 같아요.
   물론 스타트업 들은 처음엔 iOS/Android 를 따로 개발하는거 보다는 모바일웹이나 React Native/Flutter 같은 거로 하는게 맞을 것 같구요.
   어느정도 사용자 층이 생기면 그때 각 플랫폼의 UI를 잘 살리는게 효율적인 것 같습니다.

   흠... 이제는 안드로이드 앱에서 iOS의 향수가 느껴지겠네요..
   뭔가 개성이 없어지는 것 같아서 아쉽네요..

   안드로이드 앱은 그대로이고 iOS에서만 변경되는 것 아닌가요?

   네 말씀하신게 맞습니다. 구글 서비스가 iOS와 Android에서 서로 다른 UI를 가지게 될 것이라는 얘기
"
"https://news.hada.io/topic?id=5094","프로그래머를 위한 이름 짓는 원리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           프로그래머를 위한 이름 짓는 원리

   컴퓨터 프로그래머는 '이름 짓기'를 가장 전문적으로 다루는 직업일지도 모릅니다
   - 이름은 프로그래머들이 생각하는 것만큼 실제로 중요한 것일까요?
   - 어떤 이름이 좋다 나쁘다 판단할 수 있는 기준은 무엇일까요?
   이름 짓는 원리 from 책 ""클로저 기본원리(Elements of Clojure)""
   - 이름이 중요한 이유
   - 좋은 이름을 어떻게 찾을 수 있을까?
   - 프레게의 의미이론
   - 코드에서의 의미이론
   - 의미를 기준으로 이름을 붙여야 하는 이유
   - 협의성과 일관성
   - 의도적 비일관성
   - 자연 이름, 인공 이름
   - 그 외의 팁들
"
"https://news.hada.io/topic?id=5144","로그인 기능 없이 제품을 런칭 해야하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        로그인 기능 없이 제품을 런칭 해야하는 이유

   - 로그인 구현을 미룸으로써
   ㅤ→ 개발 속도를 빠르게 하고, 코드 복잡도 감소
   ㅤ→ 사용자 온보딩시에 부담 감소
   ㅤ→ 해킹 공격 범위 감소
   ㅤ→ 잠재적인 SEO 이점 포함
   - 필자가 성공시킨 2개의 웹 제품은 로그인이 없었음
   - 지금 작업하는 제품은 일 5만뷰 / 월 $2K 수익이 나지만, 런칭후 4년이 되어서야 로그인 추가

   워.. 로그인 없이 unique한 link를 통해 사용자를 식별하는 방식은 상상도 못해봤는데 신박하네요 ㄷㄷ
   이번 사이드 프로젝트는 로그인 없이 구현해 봐야겠어요ㅎㅎ

   저희는 개인정보처리의 부담때문에 제일 먼저 일차에서 제외한 기능이 회원가입/로그인이었어요. 기능 구현 부담도 있지만 일단 운영이나 개인정보처리할 인력이 없어서 부담되더라구요. 로그인 후에 제공할 수 있는 기능이나 편의가 많아 고민됐지만, 결국 빼고 일차 진행중이에요.

   맞아요 훌륭한 선택이시라고 생각됩니다. 만드시는 제품도 기회가 되면 Show GN에 소개를! ㅎㅎ

   잠재먹인 SEO 이점 포함 -> 이부분 오타가 있는듯 합니다

   헛 넵 급히 수정해두었습니다 ;)

   저희 회사 제품이 처음에 로그인 없이 시작해서 잘 크긴 했는데요, 나중에 로그인이 필요하도록 제품이 진화했을 때 로그인 유도를 하려니 힘들더라고요. 제품에 따라 선택할 수 있는 옵션이긴 한 것 같습니다.

   네 나중에 로그인 유도를 부드럽게 하는게 스킬인듯 합니다. 이런거는 사례 공유가 많이 되면 좋을것 같아요

   - 로그인 기능도 OAuth2를 포함하여 일종의 템플릿화가 가능하지 않을까 싶은데 잘 모르겠습니다.
   - OAuth2 정도만 있어도 사용자 온보딩 부담은 많이 감소되지 않을까 싶기는 합니다.
   - 해킹 공격 범위 감소란 개개인의 정보를 담고 있지 않기에 애초에 해킹할 거리가 없다는 것 정도로 보면 될까요?

   원문에 ""Evil-doers are much less likely to break into your house if there is nothing of value inside""라고 하는걸 보아, 털어갈게 없으니 안전하다라는 의미가 맞네요.

   감사합니다. 원문까진 챙겨보지 못했는데 명확해지네요

   네 아마도 서버로 뭔가를 보내거나, 암호 저장등의 행위들이 일어나야 하다보니 그부분을 얘기한듯 합니다.
   저도 개발쪽은 요즘 Passport.js 같은 것들이 다 해주는 부분도 많아서 개발쪽은 큰 부담은 아닌거 같아요.
   근데 ID가 있으면 서비스 기획부분이 많이 들어가긴 해서요. ID없이도 기능을 써볼수 있게 만드는게 초기 사용자 트랙션을 만드는데 훨씬 좋아보여요. 개인적으로 저는 새로 만든 사이트들에는 OAuth 로 로그인 하는거 자체도 꺼려지거든요. ^^;

   말씀 듣고보니 OAuth도 제 개인정보를 흩뿌리는 행동이기는 하네요. 저는 워낙 마음을 비워서...;;;

   이건 만드는 제품에 따라 다르겠지만..
   꼭 로그인까지는 필요없는 서비스라면, 기능 제외하고 빠르고 개발하고 런칭한다음 추가하는게 맞다고 봅니다. 우리나라 서비스들은 쓸데 없이 다른 개인정보를 많이 받기는 하는거 같아요.
   하나만 추가하면.. 글에서는 이메일도 저장하지 말라고 하지만, 기능 알림 또는 뉴스레터 발송을 위해 이메일 주소 정도만 옵셔널로 받는게 맞는거 같아요
"
"https://news.hada.io/topic?id=5117","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.
   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   이번 분기 보고서를 쓰고, 소설을 마감한 다음, Godot 게임 엔진을 만져보려고 합니다.

   주중에 개발 관련 서적들 읽으면서 순간 순간 사진으로 찍거나 메모해두거나 하는데요. 이게 꽤 쌓여서 독서노트에 옮길 생각입니다. 추가로 시간이 남으면 사두고 언박싱하지 않아 밀린 보드게임들 룰북을 읽어볼까 해요!

   저번주에 백신1차 맞고나서 뭔가 무기력증이 밀려오는듯 하네요. 이번주는 스위치용 로멘싱사가3 리마스터나 열심히 달리려고 합니다.

   러시아 전통 인형인 마트료시카 꾸미기를 하고 있어서 마저 하려고 해요.
   총 5단인데 목각 인형 형태만 제공되고 그림은 직접 그리도록 되어 있습니다.
   각각 함께 살았던 동물들인 거북이, 강아지, 고양이들로 구상하고 있는데 재미있어요~

   화이자 2차 맞았더니 체온이 확실히 올라가네요. 타이레놀 먹고 쉬려고 합니다.
   쉬는 김에 엑박으로 쇼파에 뒹굴거리면서 디아블로2 나 살짝 돌려볼까 해요. 예전 기억을 되살려서!
"
"https://news.hada.io/topic?id=5095","Bain의 기술 보고서 2021 [92p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Bain의 기술 보고서 2021 [92p PDF]

   ""The '20s Roar""
   - 신기술 경제에 온 것을 환영합니다
   - 가치의 진화
   ㅤ→ Tech-Tonic Shifts : 기술이 세계 경제를 재편 하는 중
   ㅤ→ 신중한 규제 : 빅 테크 M&A 사례
   ㅤ→ VC들이 기술 투자를 두배로 늘리는 이유
   ㅤ→ SaaS가 소프트웨어 Superperformance 의 다음 주기에 박차를 가하는 중
   - Competetive Battlegrounds
   ㅤ→ 하이브리드 클라우드의 혼돈에 질서를
   ㅤ→ 클라우드 회사들이 유럽에서 승리할 수 있는 방법
   ㅤ→ 반도체 균형이 이동 중
   ㅤ→ 인공지능 : 누가 다음 시대를 이끌 것인가
   ㅤ→ 미국과 중국이 디커플링 중이고, 다른 나라들이 따라가는 중
   - Operational Advantage
   ㅤ→ 기술 인재 전쟁은 글로벌, 산업간 그리고 생존의 문제
   ㅤ→ 거친 DevOps 길들이기
   ㅤ→ ""Hello"" 단계에서 B2B 기술 구매자를 붙잡고 ""GoodBye""라고 말하지 않는 방법
   ㅤ→ 칩 부족이 공급망에 대해 우리에게 가르쳐 준 두가지 교훈

   파일 링크 : https://bain.com/globalassets/noindex/…
   (URL에 연도가 없어서 나중에 혹시 내용이 바뀔지도 몰라 파일 직링크를 걸어둡니다.)
"
"https://news.hada.io/topic?id=5090","내 오픈 소스 프로젝트가 사용자로부터 자금을 조달한 방법!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    내 오픈 소스 프로젝트가 사용자로부터 자금을 조달한 방법!

   재정적으로 지원을 찾는 데 있어 오픈 소스가 압도적일 수 있음을 인정합시다.
   오늘 저는 수년에 걸쳐 진화하고 사용자로부터 엔젤 투자를 받은 오픈 소스 프로젝트의 의외의 여정을 공유하고 싶습니다.
"
"https://news.hada.io/topic?id=5143","Steve를 기리며 (Apple 공홈)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Steve를 기리며 (Apple 공홈)

   Apple 사이트에 Steve Jobs 사후 10주기 추모 영상이 올라왔습니다.
   영상의 도입부에 Jobs의 멘트를 따왔습니다.
   ---
   우리는 자라면서 이런 말을 자주 듣습니다.
   세상은 원래 그런 곳이며,
   그런 세상 안에서 살아가는 게 인생이다.
   그러니 되도록 순리대로 살아라.
   하지만 간단한 사실 한 가지를 깨닫는 순간,
   인생은 훨씬 큰 의미를 지니게 됩니다.
   그건 바로 당신이 살아오면서 당연하게 받아들여 온 모든 것이
   당신보다 특별히 똑똑할 것도 없는 사람들이 만들었다는 사실이죠.
   당신도 그것들을 바꿀 수 있고 거기에 영향을 줄 수 있습니다.
   남들에게 융용한 무엇인가를 당신 손으로 만들 수도 있죠.

   헛 링크가 바뀌었는지 apple 공홈에 추모 영상이 없네요 ㅜㅜ 보고 싶은데..
   https://twitter.com/tim_cook/status/1445358107157221379?s=20
   팀쿡이 트윗한 이 영상이 맞죠?

   앗 애플에선 링크를 찾을 수가 없네요. 올려주신 영상이 맞습니다. 아래는 유튜브 링크입니다.
   https://www.youtube.com/watch?v=CeSAjK2CBEA
   한글 자막도 있었는데 트위터나 유튜브엔 없어서 아쉽네요.

   감동이네요.. 사무실에서 눈물이 찔끔찔끔 ㅠ

   ""나는 퍽이 갔던 곳이 아닌 갈 곳으로 향한다""
   영상 너무 좋네요. 감사합니다!

   저도 추모 영상이 너무 좋아서 사진을 바탕화면으로 지정했습니다.
"
"https://news.hada.io/topic?id=5158","애플, 앱스토어 제품 페이지에 "문제 신고" 링크 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     애플, 앱스토어 제품 페이지에 ""문제 신고"" 링크 추가

   - iOS, iPadOS, macOS 의 App Store에 적용
   - 'Report a Problem'(문제 신고) 링크를 노출하여 간편하게 신고 가능
   - ‘Report a scam or fraud'(사기 신고) 및 ‘Report offensive, abusive, or illegal content'(모욕적·악의적·불법적인 콘텐츠 신고) 옵션 선택 가능
   - IAP가 없는 무료 앱도 이걸로 신고 가능
   - 현재 오스트레일리아, 캐나다, 뉴질랜드, 미국에서 지원되며 추후 다른 지역으로 확장될 예정
   - 개발자가 의도적인 조작, 사기 또는 남용에 연루된 것으로 의심되는 경우 Apple은 해당 개발자에게 이를 알리고 적절한 조치를 취함
   - 경우에 따라 해당 앱이 제거될 수 있으며, App Store 심사 지침 5.6에 설명된 대로 Apple Developer Program 멤버십에 영향을 미칠 수도 있음

   ""IAP가 없는 경우도 이걸로 신고 가능"" 이라고 명시해 둔거 보니..
   예전엔 무료앱은 신고 자체가 불가능했었나 보군요. 해본적이 없어서 잘 몰랐네요.
"
"https://news.hada.io/topic?id=5069","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.
   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   - 연휴때 아무것도 안 하는 업적을 달성했습니다. 왜 그 업적을 달성하게 되었는지 Traceback을 찍어보며 디버깅을 할 계획입니다(...)

   - 아이와 함께 자동차 수리 맡기고 공원 산책
   - 9월에 읽고 배우고 익힌 것들 정리해서 블로그 글 쓰기
   - javascript 모듈과 tree-shaking에 대해 참 대충 알고 있었는데 요 며칠간 제대로 공부하게 됨. 이것들도 정리해서 블로그 글로 쓰기
   요즘 블로깅에 다시 맛들려서 글쓰는 게 재밌네요.

   수시 입시도 끝났고, 마치 모든것이 끝나버린것 같은 느낌이 드는데, 경험상 제가 지금같은 상황에서 아주 오랜 기간을 목표없이 방황하고 낭비하는 경향이 있어 두렵습니다.
   차라리 입시 결과라도 좋으면 남들 누구나 다 하는 잠깐의 일탈이겠거니 하겠으나, 결과가 참담할것으로 예상되어 더 걱정이 드네요.
   이왕 이렇게 된겸, 속 빈 강정 되지 않으려 애써볼까합니다.
   바닐라 JS, CSSLayout, Python 한 달 공부 계획을 잡아볼까 합니다
   == 사실상 아무것도 안하고 놀 계획이라는 뜻 ㅎㅎ

   1. 토요일에 아내와 함께 백신2차접종하고 월요일까지 집에서 쉴 생각입니다.
   2. 회사에서 Coursera 자격증 선발대(?)를 모집해서 덜컥 신청해버렸는데 몸이 괜찮으면 진도를 좀 빼놓으려고 합니다.
   3. 회사 지인분이 빌려준 아리스토텔레스 수사학을 완독하고 담주에 반납하려고 합니다.
   * 주말에 너무 많은 것을 계획하고 실행하려면 지쳐서 최대한 간단하고 작게 목표를 잡으려구요 :-)

   정말로 주말 계획은 간단히 하는게 맞는듯 합니다. 여기에 쓰고 난뒤로 뭔가를 더하려는 경향이 있어서 가능하면 살살 적으려구요 ㅎㅎ

   책장이 부족해서 이케아에서 주문을 했어요. 책장 조립하고 나서 책 등을 정리하고, 올려둘 공간이 생겼으니 작은 레고도 하나 조립하려고요. 조립의 날입니다.

   오늘 백신을 맞는날이라 조금 쉬지 않을까 합니다.
   몸이 괜찮다면 그동안 미룬 자기개발에 대한 계획을 다시좀 세워볼까 해요.

   - 오큘러스 2 슈퍼핫 진행중입니다. VR이 피로한지 연휴기간에 다 못끝내서 주말엔 꼭 엔딩 봐야!
   - 가을맞이 방청소를 함 해야할 시점인듯 해요
   - 보드게임 18xx 의 솔로버전 Roll & Write 인 18Write 를 발견해서 이거를 한번 출력해서 해보려고 해요
   https://boardgamegeek.com/thread/2689045/…
"
"https://news.hada.io/topic?id=5111","Ask GN: 정보를 어떻게 골라서 취식하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 정보를 어떻게 골라서 취식하시나요?

   자기가 관심있는 분야, 혹은 업무에 직접적으로 관련있는 분야로 한정지어도 도저히 소화할 수 없을 만큼의 정보가 쏟아지는 시대입니다.
   긱뉴스(웃음), 뉴스레터, 블로그, 웹페이지, 팟캐스트, 유튜브, 세미나, 워크샵, 컨퍼런스, ... 나름대로 선별하고 솎아내지만 잘 하고 있는 것인지도 모르겠고 스스로 생각해도 효율적으로 정보를 먹고 있다는 생각이 안드네요.
   여러분은 어떻게 정보를 골라 드시나요?

   주로 피들리로 RSS 구독해서 봤는데 이것도 많아지니 다 읽는게 힘들더군요. 구독 정리가 필요할 것 같네요
   요즘은 트위터, 뉴스레터 정도 보고 있습니다. RSS 리더 좀 봐야될듯

   피들리도 어느순간 몹시 부담스러워지는 듯 합니다. ㅎㅎ 저도 피들리 했다가, 지웠다가 최근 다시 시작했네요 다 비운채로...

   저는 일단 정보중독이라고 할만큼 많은 정보를 봅니다. 능동적으로 정보를 습득하려고 하죠.
   RSS 리더에 피드를 등록해서 보았으나 구글리더가 죽은 이후로는 RSS 리더로는 잘 보지 않습니다. 다만 그 역할이 소셜미디어로 넘어왔다고 생각하고 트위터로 챙겨봅니다. 그런데 한국의 경우 마케팅 채널에서 트위터가 디폴트한 채널이 아닌 경우가 많고 회사나 크리에이터(아티스트)가 사고를 치거나 논란거리를 만들거나 혹은 그런 것을 염려하여 조용히 떠난 경우도 많습니다. 그래서 RSS피드를 이용해 봇을 만들어 봅니다. 그러나 계속해서 최근까지 자동화 서비스에서 트위터 전송빈도가 줄어들거나 검색제한(서치밴이라고 부르는) 문제가 있어 디스코드로 넘어왔고 디스코드를 이용합니다. 디스코드의 장점은 웹훅이 채널마다 10개씩 만들 수 있고 검색에 제한이 없다는 점입니다. 슬랙의 경우에는 일정 사용량이 넘어가면 사용자당 비용을 지불해야하지만
   디스코드는 각자가 니트로(프리미엄 플랜)을 사면 여러 혜택을 받는 방식입니다. 그렇기 때문에 레딧과 연계해 CS 커뮤니티로 사용하는 곳이 많습니다. 케이팝 커뮤니티도 다수 운영되고 있고요. 디스코드가 편한게 embed를 지원합니다. 유튜브 URL을 붙이면 바로 볼 수 있지요.
   뉴스레터도 구독은 정말 국내/해외 가리지 않고 했지만 꼭 봐야할 건 트위터, 디스코드, 텔레그램으로도 보내서 접점을 많이 만들어둡니다. 그래서 언제든 열어보게요. 사람 심리라는게 어느순간 쌓이게 되면 부담이 되어서 잘 안열어보게 되는 것 같더라고요.

   말씀하시는 디스코드가 개인이 만들어서 혼자쓰시는걸까요, 아니면 그런 그룹이 따로 존재하는 걸까요?
   후자라면.. 공유해주셨으면 좋겠습니다ㅎㅎ

   개인적으로 쓰는 서버도 있고 공유할 목적으로 만든 서버도 있는데 아직 정비가 안되어서 공개가 어렵네요. 정리해서 한 번 홍보할게요! 😀

   긱뉴스를 포함한 IT뉴스(해커뉴스나 인디해커 등)도 디스코드에서 봅니다. 최근에 쓰레드 기능이 생겨서 해당 아티클에 관련된 코멘트를 남겨서 공유할 수 있습니다. 그중에 공유를 하고 싶을 때는 트위터에도 같이 남깁니다.

   디스코드 내에서 특정 이모지(별이나 따봉)를 붙이면 #북마크 라는 채널에 따로 쌓입니다. 프로덕트헌트에 업보트하면 디스코드에 보내지고, 트위터에 관심글을 붙여서 포켓에 저장되면(URL이 있는 트윗의 경우) 포켓글도 디스코드에 보내집니다. 유튜브도 좋아요를 누르면 보내집니다. 플레이리스트를 만들어서 나중에도 다시 보거나 해야할 건 넣어두면 그것도 디스코드에 보내집니다. 삭제될 때도 URL로 이게 무슨 영상인지 알 수 있지요.

   이러한 이유에서 플랫폼이 오픈 정책을 포기하고 폐쇄형으로 들어가는 걸 염려합니다. 웹 3.0이라며 하는 여러 캠페인에 그래서 관심이 있습니다. 저는 데이터가 최대한 이용자가 권한을 갖는걸 원합니다. 그래야 한다고 믿고요. 플랫폼이 API를 제공해주면 자동화 하는 것에도 흥미가 있습니다. 그래서 웬만해서 한두가지 기능이나 디자인을 이쁘게 만들어 출시되는 다양한 다이어리 앱은 잘 사용하지 않습니다. 제가 남긴 데이터를 안전하게 나중에 내보낼 수 있다는 보장이 없거든요. 이미 경험을 몇 번 하기도 했고요.

   저는 요즘은 정보 취득 경로를 최대한 단순화 했는데요. 하루의 일과는 다음과 같습니다.
   1. Gmail 을 통한 뉴스레터 들 보기
   2. Feedly 로 블로그 새 글 조회
   3. HN 의 Show, ProductHunt 둘러보기
   예전엔 Pocket 이나 Pinboard 등 여기 저기에 기록했는데,
   요즘은 가능하면 바로 읽고 긱뉴스에 남기는 것으로 기록을 대신합니다. 나중에 읽으려고 하면 잘 안되더라구요.
   일단 읽고 기록하고, 나중에 긱뉴스 검색으로 찾아보는 편이에요.
   유튜브 + 팟캐스트는 운동 및 운전시에 소리만 듣습니다.

   읽고 증발시켜버리는 대신에 긱뉴스를 저의 노트로 삼아볼까요. 제가 관심있는 주제가 광범위하지 않아서 다른 분들에게 실례가 될수도 있겠다는 생각이 먼저 드는데, 조금 고민해봐야겠네요. (저한테는 남는 장사 같아서...)

   보통 시간을 들여서 읽고 정리해 볼 정도로 관심있어 하는 주제들은, 꼭 다른 관심가진 분들이 더 있더군요.
   긱뉴스에 올려보시면 분명 호응해주는 분들이 있을거라 봅니다! ㅎㅎ

   음.. 혹시 HN이 무엇인가요?

   HackerNews 입니다!
   https://news.ycombinator.com/show
   여기 Show 에는 다양한 새 오픈소스/서비스 들이 올라와서 종종 둘러보고 있습니다

   상세한 답변 고맙습니다!

   오전 10시 10분부터 메일로 오는 뉴스레터를 20분간 훑어보며 그 날 가장 재미있을 것 같은 뉴스를 뽑아 한글로 요약한 다음 프로그래머 팀원분들에게 공유합니다. 오늘의 IT라는 의미로 TOD(it) 이라고 불러요!
   훑어 볼 때에는 영미권 뉴스 레터 + GeekNews의 글 대부분은 제목이 요약을 잘 해놔서 제목만 보고도 클릭해도 속았다! 라는 느낌은 안 들었던 것 같네요.
   초반에 할 때에는 정보를 고르는 게 아니라 단순히 정보를 공유하는 거였는데, 나중에 그걸 메모 툴에도 저장하니까 저에게도 그 날 어떤 게 흥미가 있었는지 추적도 되고. 서로 의견도 들을 수 있어서 좋은 것 같아요.
   프로그래밍 책을 읽을 때는 예전에는 일감도 만들고, 트랙킹도 하면서 읽으려고 했는데... 요즘은 그냥 손에 잡히면 읽습니다. 글을 읽을 때는 되도록 부담감 없이, 습관적으로 읽을 수 있도록 노력하고 있어요. 책 읽기 시간을 확보한 게 아니라 스마트폰(... ) 대용으로 책을 읽기로 했는지라..
   되도록 부담을 가지지 않기 위해 노력합니다. 새로운 걸 얻을 때 부담감과 피로감보다는(언제 정리하지... 이걸 언제 다 보지...) 흥미와 새로움(우와 완전 대단해 나중에 정리도 한번 해야하나!?)을 더 많이 느끼고 싶거든요.

   부담을 가지지 않도록 마인드셋을 가지는 것도 중요해보이는 군요. 좋은 팁들 감사합니다. TOD 도 되게 좋을 것 같아요
"
"https://news.hada.io/topic?id=5101","GitHub의 RDB 파티셔닝 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GitHub의 RDB 파티셔닝 후기

   - 10여년 전에 RoR과 싱글 MySQL 인스턴스로 시작한 GitHub
   - 2019년에 파티셔닝 시작해서 2년간 다양한 작업들을 수행한 후기
   ㅤ→ 2021년 현재 DB의 로드가 50% 감소했다고
   1. 가상 파티션
   - 실제 테이블을 옮기기 전에 어플리케이션 레이어 단에서 가상으로 분리
   - 테이블들을 그룹핑 하여 스키마 도메인으로 묶고, SQL Linter를 이용해서 경계를 두도록 강제
   ㅤ→ 나중에 파티셔닝 할 때 안전하도록
   - Query Linter 와 Transaction Linter 로 가상 경계 확인
   2. 다운타임 없이 데이터 옮기기
   - Vitess 의 Vertical Sharding 기능을 이용
   ㅤ→ VTGate를 쿠버네티스 클러스터에 배포후 연결 포인트로 변경
   - Write-cutover 프로세스 도입
   ㅤ→ MySQL의 Replication 기능을 이용해서 데이터를 다른 클러스터로 피딩
   ㅤ→ ProxySQL 을 이용해서 MySQL 클라이언트 연결을 Multiplex
   결과
   - 2019년에는 싱글 클러스터였던 mysql1은 초당 평균 95만 쿼리 응답
   - 2021년에는 멀티 클러스터로 분산되었고, 초당 평균 120만 쿼리 응답 하면서 호스트 부하는 절반
"
"https://news.hada.io/topic?id=5135","최신 트렌드 : 초소형 사모펀드(Micro PE)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      최신 트렌드 : 초소형 사모펀드(Micro PE)

   “시간은 돈이 아님. 돈은 벌 수 있지만 시간은 만들 수 없음”
   - 사업을 처음부터 시작하지 않고, 사서 빠르게 시작하고 키우기
   ㅤ→ ""Buy a business. Fast-forward to product-market fit. Then scale""
   - 주로 SaaS 및 이커머스, 작은 인터넷 서비스들에 집중하는 여러 MicroPE 들이 활동 중
   ㅤ→ SureSwift, XOXO, Calm, MicroAngel, Concrete, Karta, Verne, Thrasio..
   - 이들을 위한 Marketplace 가 별도로 존재
   ㅤ→ MicroAcquire, IndieMaker, Flippa, Fameswap
   [예상]
   - 이들을 통해서 자금 조달 방법이 다양해 질 것
   - 가치 배수가 증가할 것 (투명한 데이터를 통해서)
   - 거래 속도가 빨라 질 것
   [기회]
   - 플레이북을 이용하기 : ""어떻게 매출을 증가시키고, 비용을 줄일까?""
   ㅤ→ 가격 인상
   ㅤ→ 유료 광고 진행
   ㅤ→ SEO 개선
   ㅤ→ 워크플로우 자동화
   ㅤ→ 벤더 수수료 협상
   ㅤ→ 전환율 최적화
   ㅤ→ 어필리에이트 수수료 협상
   ㅤ→ 재무/회계 등 비핵심 역량들을 통합하기
   - Off-Market 딜을 찾기
   ㅤ→ Product Hunt 등을 뒤져서 유명하지만 비활성화된 프로젝트들을 찾아 보기
   ㅤ→ 괜찮은 프로젝트의 창업자에게 직접 연락해보기
   - Deal 을 찾게해주는 서비스 만들기
   ㅤ→ Deal Feed 같은 Data as a service
   ㅤ→ Deal Flow as a Service
   - 비슷한 고객베이스를 가지고 있는 비즈니스 구입하기
   [핵심 레슨]
   - 만드는 대신 구매해서 시간 절약하기
   - Acquisition Entrepreneurship 연습하기
   - 작게 시작해서 키우기. 초기 수익보다 학습을 우선시
   - 망하는 위험을 피하기
   - 위험에 대해 알기
   ㅤ→ 경쟁자 / 실행 / 플랫폼 / 핵심인물 / 마켓 / 고객 집중

   저도 MicroPE에 관심이 있었는데, 관련 정보들을 잘 정리한 글입니다.
   * 1인 유니콘 기업의 등장 https://news.hada.io/topic?id=4834
   * Microacquire - 스타트업 판매 장터 https://news.hada.io/topic?id=4322
   * 재미로 만든 작은 인터넷 프로젝트 팔기 https://news.hada.io/topic?id=4323
   * Tiny Acquisitions - 작은 프로젝트 장터 https://news.hada.io/topic?id=4537

   이 중에 재미난 사례중에 이런 것도 있습니다.
   * Micro Angel https://microangel.so/
   $500k (약 6억원)을 출자해서 스타트업을 사고 키우는 것을 진행하는데,
   이 과정을 뉴스레터를 통해서 공개하는데, 이 뉴스레터를 상세로 받아보는 것은 유료입니다.
   2년내에 이 투자금을 불려서 15억원으로 만드는게 목표라고 합니다.
"
"https://news.hada.io/topic?id=5079","Bespoke Synth 1.0 - 오픈소스 모듈러 Synthesizer","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Bespoke Synth 1.0 - 오픈소스 모듈러 Synthesizer

   ""Customizable Playground for Sound""
   - 맥/윈/리눅스
   - 모듈기반 Digital Audio Workstation(DAW)
   ㅤ→ 전체 타임라인 보다는, Jamming 과 Exploration 에 최적화된 설계
   ㅤ→ 190개 이상의 모듈제공
   ㅤ→ 음악 재생중에도 실시간 변경 가능
   ㅤ→ 파이썬 라이브 코딩 환경
   ㅤ→ VST Host / Complex Sequencer / MIDI Controller Performance Platform
   - C++ 오픈소스(GPLv3)

   juce framework (https://juce.com/) 기반으로 만들어졌나 보네요. 최근에 juce6 으로 메이저 업데이트 되면서 cmake 기반 빌드를 지원하는데 같이 반영되어 있군요. GN에서 관련 분야 소식을 보게 되어 매우 반갑습니다.

   와 저는 잘 모르는 분야라 새로운 도구 소개한다는 느낌으로 올렸는데, 역시나 잘 아시는 분이 계셨군요.
   종종 소개나 댓글도 부탁드립니다! ㅎㅎ
"
"https://news.hada.io/topic?id=5188","개발자들이 알면 좋은 크롬의 숨겨진 기능들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        개발자들이 알면 좋은 크롬의 숨겨진 기능들

   모두 ""Settings-Experiments"" 에서 켜줘야 함
   - CSS Overview : 사용된 컬러,폰트,미디어쿼리 및 사용 안한 선언들 보기
   - CSP Violations : 알려진 보안 약점들 경고
   - New Font Editor : 모든 폰트를 한번에 변경해서 보기
   - Dual Screen Mode : 듀얼스크린/폴더블 기기들 디버깅용
   - Full Accessibility Tree View : 접근성 관련 항목을 더 상세히 보기

   이 기회에 굳이 개발자 관련이 아니더라도 크롬에서 소소하지만 유용하게 쓰고 있는 기능/확장기능을 댓글로 공유해보는 건 어떨까 싶네요.
   말 꺼낸 김에 저부터. 간단하지만 의외로 자주 사용하는 것으로 [ALT] 키를 누른 채 링크 텍스트를 드래그 선택하는 기능을 자주 씁니다. 링크 텍스트를 드래그하면 링크 자체가 드래그되지 텍스트가 선택이 안 되는데, [ALT] 키를 누르면 일반 텍스트처럼 링크 텍스트도 드래그 선택이 되더라고요.

   오 좋네요!
   감사합니다

   와 정말 다 유용한 기능들이네요! 바로 적용합니닷!
"
"https://news.hada.io/topic?id=5091","Show GN: 낸내 - 라이선스 걱정 없는 한글 폰트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 낸내 - 라이선스 걱정 없는 한글 폰트

   안녕하세요.
   '낸내'는 상업적으로 이용할 수 있는 무료 한글 폰트를 모아 많은 사람들에게, 그리고 광고 없이 제공하고자 시작한 프로젝트입니다.
   -
   낸내는 기존의 '눈누'라는 서비스를 타깃으로 만들게 되었습니다.
   '눈누'는 상업적인 용도로 사용이 가능한 무료 한글 폰트를 소개하는 웹 사이트입니다.
   '눈누'는 처음에는 광고도 없었고, 또 많은 폰트를 소개하고 있어 자주 사용했으나...
   언제부턴가 광고가 눈에 띄게 증가하게 되었고, 결국 사용자의 동작을 방해하는 광고마저 추가되는 것을 보고 '낸내'를 만들고자 생각했습니다.
   쓸 데 없고, 불편하기만 한 광고 따위는 없는 한글 폰트 소개 서비스를 만들고자 했습니다.
   -
   라이선스 걱정 없이 한글 폰트를 사용하고자 하는 모든 분들이 사용할 수 있으며, 현재는 284 개(총 435 종류)의 폰트를 제공하고 있습니다.
   또한, 기존 '눈누'에서 제공하고 있는 CSS 및 HTML Import 코드를 제공하고 있습니다.
   오픈 소스이며 코드는 https://github.com/naen-nae/naen-nae 에서 확인하실 수 있습니다.
   읽어주셔서 감사합니다.

   저는 폰트를 npm으로 설치해서 사용하는 편인데요, npm 설치 스크립트도 제공해주면 좋겠다는 생각이 드네요. :-) npm 쪽에서는 https://github.com/item4/kfonts 요런 프로젝트가 있네요.

   피드백 감사합니다.
   '낸내'와 함께 충분히 제공할 수 있을 것이라 생각됩니다.
   조금 다른 이야기지만, GeekNews에 올려보길 정말 잘 한 듯 싶습니다. 사실 게시하기 전에 고민을 조금 했었거든요... 제가 감히 올려도 되는건가 하고 ㅎㅎ..
   많은 분들이 함께 피드백 주시니 혼자서는 생각치도 못한 피처들을 많이 발견하게 되는 것 같습니다.
   감사합니다.

   영-한이 잘 어우러져서 코딩용으로 사용할 수 있는 고정폭 폰트를 더 찾기 쉬웠으면 좋겠다는 바람이 늘 있는데요, 낸내에서 가능할까요? ^^;; 제 개인적인 바람입니다.

   넵 '고정폭' 여부를 어떻게 보여 드릴 수 있을지 고민좀 해봐야 할 것 같습니다.
   '고정폭'은 전혀 생각하지 못했던 부분인데.. 피드백 감사드립니다!

   저도 광고 부분이 눈누에 대한 비판으로 여겨져서 좀 마음에 걸렸는데 다행이네요.
   당연히 광고가 없으면 유저 입장에서야 좋지만, 오픈소스 프로젝트라고 해서 유지보수하고 이슈 처리하고 서버 운영하는 이 모든 걸 아무런 금전적 보상 없이 (특히 개인이) 오래 지속하기는 쉽지 않을 것 같습니다. 처음에는 트래픽이 늘어날수록 그거 자체로 행복하지만 트래픽이 늘어날수록 비용도 증가하니까요.
   애드센스나 패트론, 또는 예를 들어 스폰서십(유료 폰트 판매자로부터 한두개 광고를 받아서 노출해준다거나) 같은 게 적당한 수준으로만 있다면 저는 공짜로 사이트 쓰는 입장에서 당연하게 받아들일 수 있을 것 같습니다. 물론 유저경험이 방해되는 수준이면 짜증내겠지만요.
   아무튼 프로젝트의 지속가능성을 위해 프로젝트 초기부터 광고나 수익화가 고려되면 좋겠다는 생각입니다. 이런 글들도 한번 보시면 어떨까 싶네요.
   - https://www.telerik.com/blogs/can-we-make-open-source-more-sustainable
   - https://news.hada.io/topic?id=1103

   특히 폰트 다운로드 눌렀을 때 바로 다운받아지는거 보면 CDN 기능까지 포함된 셈으로 보이는데 이러면 물론 유저 입장에서는 좋지만 운영 비용은 더 나갈 것 같네요.

   추가적인 피드백 감사드립니다!
   (1)
   스폰서십이나 후원은 처음 개발할 때 염두는 했었으나, 사실 mau가 1k도 안되는 서비스에 이러한 것들을 요구한다는 것이 좀 부적절한 것 같다 생각했었습니다. 그러나 같이 올려주신 두 개의 아티클을 모두 읽고(특히 첫 번째 아티클의 ""economics perspective, the idea that authors want money for their work shouldn't be surprising at all"" 문장에서), 좀 다른 시각으로 바라보게 되네요.
   말씀해주신 것과 같이 지금의 열정이 계속해서 남아있으리라는 보장은 없습니다. 프로젝트의 지속가능성을 위해 다음(또는 지금의) 프로젝트에는 어떤 방식으로 수익화가 가능할 것인지 생각해야겠습니다. 감사합니다.
   (2)
   현재 '낸내' 서비스로 인해 지출되는 금전적인 비용은 없습니다.
   - Hosting: GitHub Pages (https://github.io/)
   - CDN: jsDelivr (https://www.jsdelivr.com/)
   - Domain: 기존 사용하고 있던 블로그(https://shj.rip/) 도메인을 이용하였습니다.
   처음 '낸내'를 설계할 때, 이 서비스로 인해 지출이 생겨버리면 언젠가는 광고가 붙을 수 밖에 없다 생각했었습니다. 이로 인해 사용자 경험은 최대한 유지한 채 비용을 최소화는 방법을 찾아보았고, 그 결과 위와 같이 비용 지출을 최소화하는 스택으로 구성하게 되었습니다.
   마지막으로, 기존의 '눈누'는 정말 잘 사용하고 있었던 서비스였기에 이 프로젝트에도 개인 후원이 가능했다면 어땠을까 하는 생각이 드네요(현재는 기업 후원만 받고있는 듯 싶습니다 https://noonnu.cc/about).
   감사합니다!

   역시 자신만의 철학이 있으셨군요. 설명 감사합니다. :)

   깔끔한 사이트 잘 봤습니다. 사용하기 편리하고 좋네요 ^_^
   다만, 눈누는 2018년 개인이 후원을 일부 해 주고, 이후 후원사도 모집하는등 서버 운영비의 문제를 계속 겪고 있었던듯 합니다. ( 관련된 내용은 눈누의 공지사항을 보시면 알 수 있습니다. -
   https://noonnu.cc/news )
   굳이 ""광고 따위""라는 용어를 사용해 눈누를 비난할 필요는 없을듯 합니다. ^_^
   낸내는 광고가 없다는것만으로도 눈누보다 더 경쟁력이 높아 보입니다.
   눈누와 좋은 경쟁자가 되기를 빌겠습니다. ^_^

   앗 제가 잘못된 표현을 사용했습니다. 눈누 자체를 비난하려는 의도는 절대로 아니었습니다 ㅠㅠ..
   눈누가 운영비 관련해서 이슈가 존재한다는 것은 어렴풋이 알고 있었습니다. 그래서 저는 지출이 없는 서비스로 구성하려 했던 이유기도 했구요..
   피드백 감사드립니다. README에서도 해당 단어 제거하도록 하겠습니다.

   사이트 멋지네요. 다크 모드도 있고, 스타일 테스트한 문자열이 저장되어있는것도 좋네요. 응원합니다. 잠깐 써보고 피드백 드려봐요(저는 눈누는 안써봤습니다).
   - 핸드폰에서 보니 예시 문장인 “다람쥐 헌 쳇바퀴에 타고파” 가 끝까지 안 보이는 폰트들도 꽤 있네요. 박스를 벗어나는 것으로 보이는데 horizontal scroll이 가능하면 좀 더 좋지 않을까 싶습니다.
   - 폰트 이름 검색시 한글 초성 검색까지 가능하게 하면 좀 더 편할 것 같습니다. 저는 https://github.com/e-/Hangul.js/ 를 써봤는데 타입 지원이 약한거 빼고는 사용 경험이 나쁘지 않았어요.
   - 폰트 스타일이 하나일 때도 1 styles 라고 복수형으로 표현되어있네요.
   - 회사에서 폰트 고를 때 숫자와 문자가 고정폭을 가지는지도 중요했었는데요. 예시 문자열이 지금은 ㄱ~ㅎ만 표현되는데 숫자도 같이 표현해준다거나, 고정폭 여부를 볼 수 있다거나, 고정폭을 필터링한다거나.. 도 있으면 어떨까요?

   앗... 먼저 피드백 감사합니다.
   박스를 벗어나는 것은 약간 의도된 것이긴 했는데, 말씀을 들어보니 글자를 끝까지 볼 수 없다는 점으로 인해 부적절한 것 같다 생각되네요.
   고정폭 부분은 정말 생각치도 못했던 부분입니다. 폰트 소개 서비스를 출시한 주제에 정작 폰트에 대한 이해도는 많이 떨어졌었네요..
   그 외에도 복수형과 초성 둘 다 좋은 지적이라 생각됩니다.
   이슈로 함께 정리해 두겠습니다. 피드백에 감사드립니다!

   와 깔끔하고 좋네요! 좋은 사이트 만들어주셔서 고맙습니다.
   많이 검색하거나 클릭하는 폰트순 정도로 정렬하는 옵션 하나만 있으면 좋을 것 같아요!
   현재는 제작자 순 소팅인거 같은데, 랜덤으로 정렬하거나 폰트 이름순 배열은 어떨까요?

   앗 댓글 감사합니다 ㅎㅎ!
   말씀해주신대로 현재는 제작자 순서로 소팅이 되어 있습니다.
   이를 다양한 기준으로 소팅할 수 있도록 옵션을 추가해주면 사용해주시는 분들이 더 편할 것 같아요!
   피드백 감사합니다. 바로 이슈로 하나 정리 해야겠어요 ㅎㅎ
"
"https://news.hada.io/topic?id=5080","Replay - 웹 개발용 시간여행 디버거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Replay - 웹 개발용 시간여행 디버거

   - 웹앱을 녹화하고 Replay 하게 해주는 도구
   ㅤ→ 브라우저 개발자 도구와 비슷한 디버깅 환경
   - 동작 방식
   ㅤ→ Replay 브라우저에서 페이지를 녹화하고 저장. 공유 가능
   ㅤ→ 특정 시점에 코멘트 달고 팀원과 커뮤니케이션 가능
   - 맥/리눅스 지원. 윈도우즈는 WSL2로 사용 가능
"
"https://news.hada.io/topic?id=5065","Motion One - 작지만 고성능 웹 애니메이션 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Motion One - 작지만 고성능 웹 애니메이션 라이브러리

   - Web Animations API 기반으로 더 사용하기 쉽게 최소화
   - Selector, 개별 Transform, Timeline Sequencing 등 기능 추가
   - 하드웨어 가속 사용
   - 코어 기능만 비교시 번들크기가 Anime.js의 절반, Greensock 의 1/7
   - MIT 라이센스. TypeScript 오픈소스

   - Animate.css - 크로스 브라우저 애니메이션 라이브러리 https://news.hada.io/topic?id=2242
   - GSAP - GreenSock Animation Platform https://news.hada.io/topic?id=2086
   - AniX - 가볍고 쉬운 CSS 애니메이션 라이브러리 https://news.hada.io/topic?id=690
"
"https://news.hada.io/topic?id=5072","키보드 2개 동시 사용해서 통증 없애기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         키보드 2개 동시 사용해서 통증 없애기

   - 인체공학 키보드는 배열이 이상하고, 분할 키보드는 둘 사이의 거리가 충분히 멀지 않음
   - 두개의 애플 매직 키보드를 동시에 연결하고 한 손에 하나씩 사용
   ㅤ→ 어깨를 뒤로 젖힐 수 있을 정도로 자연스러운 각도 가능
   ㅤ→ 시프트/단축키를 공유하기 위해서 Karabiner-Elements 사용
   - 이렇게 하고 나서 몇일 뒤 바로 6년동안 아팠던게 사라졌다고

   조합키는 어떻게 할 수 있나요?

   저도 약 2주 전부터 k380을 2개 사용하고 있어요.
   정말 좋습니다.

   저는 마우스가 두 개인데 ㅎㅎㅎ
   https://d.pr/i/ElOdE2

   https://www.youtube.com/watch?v=cOmEzt9n-mw
   이런 영상도 있습니다. 오른손은 원래 키보드를 쓰고 왼손은 반쪽짜리 키보드를 써서, 어고노믹 키보드의 최대 문제인 'b 키 위치'를 resolve 했습니다.

   좋네요!!

   Split 키보드로 유명한 키네시스 freestyle에 이미 50cm이나 벌어지는 키보드가 있는데....아무래도 작성자가 9인치만 보고 없는지 알았나 보군요...

   오 이글보고 나서 바로 해보고 있습니다.
   서로 다른 키보드를 사용해서 높이도 다르고 좀 어색한 점이 있긴한데,,
   확실히 어꺠를 피게 되니까 좋은 점이 있는것같네요.

   인체공학 키보드에서 'ㅜ' 키만 어떻게 쓸텐데, 저건 그 문제가 없겠군요! 한번 해봐야지..

   이거 정말 재미있는 시도네요 ^^ 조만간 분할키보드가 출시될지도 모르겠네요~

   분할 키보드 자체는 이미 있는 개념(이미 본문에도 언급)입니다.
   https://awesomeopensource.com/project/diimdeep/awesome-split-keyboards
   https://reddit.com/r/MechanicalKeyboards/…

   그러네요. 찾아보니 이런 제품이 있는데... 살짝 뽐뿌가 오네요.
   https://11st.co.kr/products/3411673998/…

   와~ 해 보니.. 정말 타이핑이 되네요.. 약간 어색 하긴 하지만..
   대신 마우스의 위치가 애매해 졌습니다.
   마우스를 키보드 가운데 놓고 사용하게 되었습니다.

   제가 언급한거 찾아봤는데 못찾겠네요.
   근데 생각해보니까 윈도우에서 기본적으로 지원해주는 mousekey의 shceme을 그대로쓰는 이상 마우스 가속 감속이 매우 불편할게 명확하네요.
   마우스를 아예안쓰는 솔루션으로
   이런것도 괜찮은 것 같습니다.
   https://github.com/pit-ray/win-vind

   어엇? 긱뉴스에서 https://github.com/zsims/hunt-and-peck 이녀석을 알게 되어서 사용하고 있는데, 또 다른 것도 있었네요!

   그 저는 빨콩자체도 안써보긴했는데
   빨콩 비슷하게 키보드로 마우스 움직이게 해주는 툴이있더라고요.

   가운데 놓을 거라면 어쩌면 트랙패드가 더 나을지도 모르겠습니다.

   이런걸 볼때마다,, 어릴때 자판연습좀 잘 해둘걸 생각이 듭니다..
   완전 편한대로만 치다보니 손가락을 아무렇게나 써서..

   실제로 따라해보고 괜찮아졌다는 후기들이 많군요.
   https://news.ycombinator.com/item?id=28631435
   똑같은 키보드가 두개 있다면 해보면 괜찮을거 같아요. 달라도 상관없으려나요?
"
"https://news.hada.io/topic?id=5128","Ct.css - 의 성능 분석용 CSS Snippet ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ct.css - 의 성능 분석용 CSS Snippet

     * 헤드에 ct.css 를 추가하면 문제를 체크해줌
       ㅤ→ 빨강 : 수정 필요
       ㅤ→ 오렌지 : 문제 있을 수 있음
       ㅤ→ 녹색 : 문제 없음. 정보만 제공
       ㅤ→ 실선 : 이 파일이 문제 있는 파일임
       ㅤ→ 점선 : 다른 파일이 문제를 일으키고 있음
     * 크롬 개발자 도구에 스니펫으로 넣어두면 어떤 페이지에서든 확인 가능

(function(){
 var ct = document.createElement('link');
 ct.rel = 'stylesheet';
 ct.href = 'https://csswizardry.com/ct/ct.css';
 ct.classList.add('ct');
 document.head.appendChild(ct);
}());

   와 신박한 방법이네요. stylesheet로 체크하는 방법이라니...
"
"https://news.hada.io/topic?id=5150","ChessCoach - 자연어로 조언해주는 신경망 기반 체스 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ChessCoach - 자연어로 조언해주는 신경망 기반 체스 엔진

   - Elo 체스 레이팅 : 3450
   ㅤ→ 인간 최고 수준인 2850은 이기고, 3550인 Stockfish 14 엔진에는 종종 지는 수준
   - 체스에 대한 지식을 바탕으로 이동이나 위치에 대해 ""영어로 코멘트""를 남겨줌
   - 기존 엔진처럼 남은 모든 수를 조사하여 최적의 수를 두는 방식
   - 윈/리눅스에서 실행되는 C++ 오픈소스

   플레이는 여기 : https://lichess.org/@/PlayChessCoach
   Elo 평점 시스템 : https://ko.wikipedia.org/wiki/엘로_평점_시스템
   - 2500 이상이 그랜드마스터
   - 인간의 최고점수는 2882 점인 Magnus Carlsen
   ㅤ→ https://en.wikipedia.org/wiki/…

   점수의 기준이 무엇인가 궁금하네요. :-)
"
"https://news.hada.io/topic?id=5170","ATMO - WASM을 이용한 클라우드 어플리케이션 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ATMO - WASM을 이용한 클라우드 어플리케이션 개발

   - 확장성, 인프라, 네트워킹에 대한 고민 없이 서버 어플리케이션 개발을 지원하는 오픈소스
   - WASM을 이용하여 원하는 프로그래밍 언어로, 함수 단위 개체인 Runnable 을 생성하여 실행
   - API 같은 웹서비스나 HTTP & 스트림 환경에 적합
   - 개발 방식
   ㅤ→ 1. Self-contained & Composable 함수 작성
   ㅤ→ 2. YAML로 된 ""Directive""로 동작 방식을 지정 (라우팅, 로직 등)
   ㅤ→ 3. Runnable 번들로 생성해서 디플로이
   - ATMO는 Go로 된 오픈소스. Runnable 예제들은 대부분 Rust
"
"https://news.hada.io/topic?id=5181","SerenityOS - 90년대 GUI로 구현한 Unix-like OS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                SerenityOS - 90년대 GUI로 구현한 Unix-like OS

   - 1990년대말 윈도우/맥의 UI와 2000년대말의 *nix 코어를 합친 느낌의 OS
   - 1인 프로젝트로 시작되어 3년동안 커뮤니티의 지원으로 성장중
   - 커널부터 웹브라우저/IDE 까지 모두 ""외부 라이브러리 없이 밑바닥부터 손수 개발""
   - 시스템 자체는 Serenity C++ 로 개발됨.
   ㅤ→ 자체 표준 라이브러리를 가진 최신 C++의 변형
   Repo : https://github.com/SerenityOS/serenity
   - 커널 기능
   ㅤ→ 선점형 멀티스레딩 지원하는 x86(32bit) / x86_64(64bit) 커널
   ㅤ→ IPv4 스택 (ARP, TCP, UDP, ICMP)
   ㅤ→ ext2 파일 시스템
   ㅤ→ POSIX signal 지원
   ㅤ→ /proc 파일시스템 지원
   - 시스템 서비스
   ㅤ→ Launch/session daemon (SystemServer)
   ㅤ→ Compositing window server (WindowServer)
   ㅤ→ Text console manager (TTYServer)
   ㅤ→ DNS client (LookupServer)
   ㅤ→ Network protocols server (RequestServer and WebSocket)
   ㅤ→ Software-mixing sound daemon (AudioServer)
   ㅤ→ Desktop notifications (NotificationServer)
   ㅤ→ HTTP server (WebServer)
   ㅤ→ Telnet server (TelnetServer)
   ㅤ→ DHCP client (DHCPClient)
   - 라이브러리
   ㅤ→ C++ templates and containers (AK)
   ㅤ→ Event loop and utilities (LibCore)
   ㅤ→ 2D graphics library (LibGfx)
   ㅤ→ OpenGL 1.x compatible library (LibGL)
   ㅤ→ GUI toolkit (LibGUI)
   ㅤ→ Cross-process communication library (LibIPC)
   ㅤ→ HTML/CSS engine (LibWeb)
   ㅤ→ JavaScript engine (LibJS)
   ㅤ→ Markdown (LibMarkdown)
   ㅤ→ Audio (LibAudio)
   ㅤ→ Digital Signal Processing/Synthesizer Chains (LibDSP)
   ㅤ→ PCI database (LibPCIDB)
   ㅤ→ Terminal emulation (LibVT)
   ㅤ→ Out-of-process network protocol I/O (LibProtocol)
   ㅤ→ Mathematical functions (LibM)
   ㅤ→ ELF file handling (LibELF)
   ㅤ→ POSIX threading (LibPthread)
   ㅤ→ Higher-level threading (LibThreading)
   ㅤ→ Transport Layer Security (LibTLS)
   ㅤ→ HTTP and HTTPS (LibHTTP)
   ㅤ→ IMAP (LibIMAP)
   - Userland 기능들
   ㅤ→ Unix-like libc and userland
   ㅤ→ Shell with pipes and I/O redirection
   ㅤ→ On-line help system (both terminal and GUI variants)
   ㅤ→ Web browser (Browser)
   ㅤ→ C++ IDE (HackStudio)
   ㅤ→ Desktop synthesizer (Piano)
   ㅤ→ E-mail client (Mail)
   ㅤ→ Various desktop apps & games
   ㅤ→ Color themes

   취미로 만드는 OS 중에서 가장 독특한 것 같아요. 저 수많은 Library 와 앱들을 구현해서 넣었다는게 놀랍기도 하고요.
   원작자인 Andreas Kling이 2018년에 3개월간의 약물 중독 재활프로그램을 마치고, 자기 시간이 많아져서 시간을 보내기 위해 시작한 프로젝트인데요.
   그는 이전에는 애플과 노키아에서 WebKit 개발을 하던 개발자였어요. 애플에서 일했던 경험때문에 외부 패키지 없이 모든걸 직접 개발하는 것을 지향하고 있다고 합니다.
   올해 5월부터는 이제 후원금이 충분히 많아져서, 풀타임으로 SerenityOS를 개발하고 있습니다.
   깃헙 스폰서를 통해서 현재 232명이 후원하고 있네요. https://github.com/sponsors/awesomekling
   Patreon 에는 279명이구요 https://www.patreon.com/serenityos
   컨트리뷰터가 500명이 넘었고, 유튜브 채널에도 매달 OS 업데이트를 올리는데요
   https://youtube.com/playlist/?list=PLMOpZvQB55bfp6ykOLayLqLrjcpv_Sw3P
   2019년 초반엔 10분 단위였는데, 요즘은 30~40분 분량으로 업데이트가 길어졌어요.
   디아블로 1을 리버스 엔지니어링 한 Devilution을 SerenityOS에서 돌아가게 한시간만에 포팅한 영상도 유명합니다.
   https://github.com/diasurgical/devilution
   https://www.youtube.com/watch?v=ZOzZ8R4gphE
"
"https://news.hada.io/topic?id=5154","지문 인증으로 동작하는 FIDO키, Yubico Bio 시리즈 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 지문 인증으로 동작하는 FIDO키, Yubico Bio 시리즈 공개

   - 하드웨어 키를 꽂고, 암호 없이 지문 인증을 통해 로그인 및 2 Factor 인증
   - USB-C / USB-A 로 FIDO2/WebAuthn 및 U2Fopen 인증 표준을 지원
   - 배터리 없고, 기본 방수 지원
   - YubiKey 5 시리즈 방식의 NFC는 지원하지 않음
   - 맥/윈/리눅스에서 Yubico 앱을 통해 지문 등록/삭제 가능
   - USB-C $85, USB-A $80

   근데 예전 무료로 유비키 줄때도 그렇고 이걸 대체 어따 쓰죠 -_-;;; 수령하고나서도 쓸데가 없어 박아놨는데

   google authenticator, authey 대체품이죠

   지운 등록 -> 이부분 오타가 있는듯 합니다

   아흑 넵!! 고맙습니다

   꼽고 → 꽂고
   가격이 한 절반 정도로 내려오면 좋겠네요. 언젠가는 그리 되겠죠?
"
