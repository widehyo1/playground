"https://news.hada.io/topic?id=17922","2천 대의 도난당한 Playdate 휴대용 게임기 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     2천 대의 도난당한 Playdate 휴대용 게임기 사건

  에피소드 31: 진실 범죄 에디션

     * 올해 초, 우리의 재무 관리자 Jen은 Playdate 재고가 2,000개 부족하다는 것을 발견함. 이 사건이 어떻게 Circle Kin North Las Vegas로 이어졌는지, 그리고 지붕 상담에 얼마를 팁으로 줘야 하는지에 대한 이야기임.
     * Magnum P.I.의 멋진 차를 타고 모험을 떠나는 내용임.

  쇼 노트

     * Cabel의 GDC 강연
     * Magnum, P.I.
     * Circle K Froster
     * 사진이 포함된 에피소드 페이지
     * 에피소드 대본

  에피소드 내용 요약

     * Ship Fusion으로 보내진 Playdate 팔레트가 사막의 Circle K 주차장에 잘못 배달됨.
     * Ship Fusion의 사진 제공으로 Circle K 주차장에 잘못 배달된 팔레트 위치가 확인됨.
     * Jen과 Kyle이 문서화한 Ship Fusion 맞은편의 새로 지어진 Circle K.
     * 미스터리 해결을 위한 필수 비용으로 구매한 두 개의 Dr. Pepper 맛 Circle K Froster.
     * 깔끔하게 쌓인 Playdate 상자들이 무자비하게 버려짐.
     * 깔끔하지 않게 쌓인 Playdate 상자들이 무자비하게 버려짐.
     * 깔끔하게 쌓인 상자들을 자세히 살펴보니, 일부 상자가 약간 구겨졌지만 Playdate는 손상되지 않음.
     * 이곳이 Cracker Barrel이라면 재미있을 것이라는 농담.

        Hacker News 의견

     * FedEx가 분실된 배송에 대해 400k를 지불하지 않은 것에 놀라움. 분실 증거가 있었고, FedEx는 그곳에서 일하지 않는 사람의 서명만 있었음. 고위층이 개입했음에도 불구하고 FedEx는 아무런 조치를 취하지 않았음. 화물 배송에 보험이 없는 것인지 의문임
     * Playdate를 처음 출시했을 때 구매하고 싶었으나 배송이 되지 않았음. 이제는 배송이 가능해져서 주문을 했고, 은행에서 사기 거래가 아닌지 확인 전화가 옴. 파트너가 Playdate가 무엇인지 물어봄
     * 범죄자 처벌보다는 회복에 중점을 둔 PI를 선택한 것이 흥미로움. 이 작전의 미숙함을 고려할 때, 회복은 어차피 이루어졌을 것이며, 도둑들은 실제로 처벌을 받을 수도 있었음. 결과적으로 도둑들은 도난당한 물건 외에는 잃은 것이 없고, 앞으로도 비슷한 기회를 계속 활용할 가능성이 있음
     * 대화 내용을 기사로 요약함. 다른 사람에게 도움이 될지는 모르겠지만, 나에게는 이야기를 이해하기 쉽게 만듦. 대부분 수작업으로 작성했으며, LLM을 사용해 대략적인 개요를 잡고 수작업으로 줄거리 정리, 환각 제거, 인용문 확인, 이미지 및 링크 추가 작업을 함
     * 기회주의적 범죄로 보이며, 정교한 작전은 아님. 배송이 건설 현장의 잘못된 쪽으로 어떻게 갔는지 불분명함. FedEx의 실수인지, 도둑의 속임수인지, 도둑이 하역장에서 방향을 틀었는지 의문임
     * 필수 기기 등록이 그들을 구한 핵심 통찰임. 모두가 등록이 필요 없는 완전히 개방된 기기를 좋아하지만, Panic이 등록을 하지 않았다면 기기를 찾을 수 없었을 것이며, 400k 손실로 끝났을 것임
     * ""들어주셔서 감사합니다. 그리고 우리 Playdates를 훔치지 마세요. 우리는 당신을 찾을 것입니다.""라는 인용문을 특히 좋아함
     * FedEx가 KYC나 OTP 인증 없이 400k 상당의 물건을 배송한다는 것에 놀라움
     * Circle K에서 이상한 일이 벌어지고 있음
     * 도둑이 되어 이 이상한 인디 핸드헬드 기기 팔레트를 가지고 아무도 그것이 무엇인지 몰라 처분할 수 없는 상황을 상상해 봄
"
"https://news.hada.io/topic?id=17954","SQLiteStudio - 오픈소스 멀티플랫폼 SQLite 관리도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 SQLiteStudio - 오픈소스 멀티플랫폼 SQLite 관리도구

     * SQLite 데이터베이스를 생성, 편집, 탐색할 수 있는 오픈소스 도구
     * C++과 Qt 프레임워크로 작성되어 강력하면서도 가볍고 빠름
     * Windows, Linux, MacOS X 용 포터블 바이너리 제공: 설치나 제거가 필요 없으며, 다운로드 후 압축 해제하여 실행 가능

주요 기능

  고급 SQL 코드 편집기

     * SQL 문법 힌트와 하이라이팅 제공
     * 코드 포맷팅 및 문법 오류 표시 기능 포함
     * SQL 쿼리에서 테이블 이름 등을 Ctrl+클릭하여 해당 테이블, 인덱스, 트리거, 뷰 등을 열 수 있음

  암호화된 데이터베이스

     * SQLCipher, WxSQLite3, System.Data.SQLite 등의 암호화 및 비밀번호 보호 기능을 지원

  다중 데이터베이스 지원

     * 단일 쿼리에서 여러 데이터베이스를 참조할 수 있는 투명한 데이터베이스 연결 메커니즘 제공

  사용자 정의 SQL 함수

     * JavaScript, Python, Tcl로 사용자 정의 SQL 함수(스칼라 및 집계 함수)를 구현 가능
     * Wiki 페이지에서 바로 사용할 수 있는 스크립트 제공

  사용자 정의 정렬 방식

     * 정렬 알고리즘을 구현하여 ORDER BY 절 등에 사용할 수 있는 사용자 정의 정렬 방식 지원

  SQL 및 DDL 히스토리

     * 2주 전 실행한 쿼리도 쉽게 검색 가능
     * SQLiteStudio에서 실행된 DDL 문들을 확인하고 프로덕션 데이터베이스를 업그레이드 가능

  데이터베이스 간 드래그 앤 드롭

     * 데이터베이스 간 테이블, 인덱스 등의 객체를 드래그 앤 드롭으로 복사 또는 이동 가능
     * 데이터 포함 여부 선택 가능

  크로스 플랫폼 지원

     * Windows, MacOS X, Linux를 포함한 주요 플랫폼에서 실행 가능
     * FreeBSD와 같은 기타 플랫폼에서도 소스 코드 컴파일을 통해 실행 가능

  포터블 배포

     * 설치가 필요하지 않으며 다운로드 후 압축 해제 및 실행만으로 사용 가능
     * 관리자 권한이 필요하지 않음

  데이터 생성 기능

     * 다양한 전략(상수, 시퀀스, 난수, 사전 기반 텍스트 등)을 사용하여 테이블에 데이터를 자동으로 채울 수 있음

  데이터 가져오기 및 내보내기

     * CSV 또는 정규 표현식을 사용하는 텍스트 파일에서 데이터 가져오기 가능
     * SQL 문, CSV, HTML, XML, PDF, JSON 등 다양한 형식으로 내보내기 가능

  스크립팅

     * JavaScript, Python, Tcl 언어를 지원
     * 데이터 생성기, 사용자 정의 SQL 함수, 사용자 정의 정렬 방식 등의 구현에 스크립트를 활용 가능

  플러그인 지원

     * 새로운 스크립팅 언어, 데이터 가져오기/내보내기 형식, 테이블 데이터 생성 전략, 데이터베이스 형식 등을 플러그인으로 확장 가능

        Hacker News 의견

     * 작성자는 자신의 프로젝트가 소개된 것에 놀라움과 영광을 느낌. 현재 3.4.x 브랜치의 버그 수정 및 다듬기 작업 중이며, 이후에는 많은 새로운 기능이 추가될 3.5.0에 집중할 계획임. 그 중 하나는 ERD 기능임
          + 프로젝트는 C++와 Qt로 개발되었으며, GPL 라이선스를 따름. 약 10년간 개발 중임
     * SQLiteStudio와 SQLiteBrowser의 비교에 대한 질문이 있음
     * VisiData를 사용하여 테스트 데이터베이스의 내용을 빠르게 확인할 수 있었음. 터미널에서 vd test.sqlite3 명령어를 사용하여 테이블 목록을 확인하고, 화살표와 Return 키로 테이블 데이터를 그리드 뷰로 볼 수 있었음
     * 최근에 dbgate.org 클라이언트를 사용 중인 사용자도 있음
     * 몇 년간 Windows와 Linux에서 SQLiteStudio를 사용해온 사용자는 빠르고 강력하며, Atom 노트북에서도 잘 작동한다고 평가함. 무료 SQLite 관리자로서 최고라고 언급함
     * Emacs 사용자에게는 v29에서 sqlite-mode가 도입되었으며, 빠른 SQLite 보기 및 편집에 유용한 확장 기능을 실험 중임
     * Samba를 통해 사용할 때 주의가 필요함. WAL 모드를 활성화해도 중요한 테스트 데이터베이스가 손상될 수 있음. 다행히 .recover 기능으로 대부분의 데이터를 복구할 수 있었음
     * DBeaver를 가끔 사용하지만, 이는 지속적인 연결을 위해 설계되어 있어 임의 파일을 여는 데는 적합하지 않음. SQLite용 JDBC 드라이버도 언급됨
     * SQLite의 고유한 요구 사항을 준수하며 스키마 객체를 업데이트할 때 기대대로 작동하는 훌륭한 제품임
"
"https://news.hada.io/topic?id=17870","에픽 게임즈, Internet Archive를 통해 ‘Unreal’ 및 ‘Unreal Tournament’ 무료 배포 허용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  에픽 게임즈, Internet Archive를 통해 ‘Unreal’ 및 ‘Unreal Tournament’ 무료 배포 허용

  게임 보존 문제와 저작권의 충돌

     * 오래된 비디오 게임 보존은 문화적 유산 보호와 밀접한 관련이 있음.
     * 게임 퍼블리셔들은 종종 저작권을 주장하면서도 게임을 지원하거나 공개하지 않아, 대중이 이를 보존할 방법이 부족해지는 문제가 발생함.
     * 이는 저작권 계약의 기본 원칙인 “창작물에 대한 한시적 독점권 제공 후 공공 도메인으로의 귀속”을 위반하는 사례로 볼 수 있음.

  왜 퍼블리셔들은 오래된 게임을 공개하지 않는가?

     * 복고 게임 열풍: 퍼블리셔들은 게임 리마스터나 재출시를 계획한다고 주장하지만, 실제 실행하지 않는 경우가 많음.
     * IP 보호주의: 일부 기업은 지나치게 지적재산권 보호에 집착해 게임을 공개하지 않음. 예: 닌텐도.
     * 권리 문제: 퍼블리셔가 사라졌거나, 누가 권리를 소유하고 있는지 알기 어려운 경우도 있음.

  에픽 게임즈와 Internet Archive의 사례

     * 에픽 게임즈는 ‘Unreal’과 ‘Unreal Tournament’를 Internet Archive를 통해 자유롭게 액세스 가능하도록 허용함.
     * OldUnreal 그룹이 이를 지원하며, 현대 PC에서도 게임을 쉽게 실행할 수 있도록 다운로드 및 설치 방법을 제공함.
     * 에픽 게임즈 대변인은 이를 공식적으로 확인하며, 누구나 게임을 다운로드하고 플레이할 수 있음을 강조함.

  이 사례의 중요성

     * 두 게임은 역사적으로 중요한 타이틀로, 에픽은 리마스터나 후속작 계획 대신 공개를 선택함.
     * Internet Archive와 같은 신뢰할 수 있는 플랫폼을 통해 게임이 보존될 수 있도록 허용함.
     * 이는 팬들의 열정적 노력 덕분이며, 오래된 게임을 현대적으로 부활시키는 데 기여함.

  앞으로의 방향

     * 단순히 두 게임 공개에 그치지 않고, 다른 퍼블리셔들도 유사한 프로그램을 실행하거나 Internet Archive와 협력해 오래된 게임 보존에 동참해야 함.
     * 게임 보존을 지원하는 체계적인 프로그램이 만들어질 필요가 있음.

   훌륭하십니다.

        Hacker News 의견

     * Quake처럼 GPL로 공개되기를 바라는 의견이 있으며, 커뮤니티가 부족한 부분을 대체할 수 있을 것이라는 기대가 있음
          + ioquake3를 웹으로 포팅하고 온라인 데모를 설정한 경험을 공유함
          + Unreal Tournament에서도 같은 작업을 할 수 있으면 좋겠다는 의견이 있음
     * Unreal Tournament의 멀티플레이어와 변형(mutator) 기능이 재미있었다고 회상함
          + 플레이어 아바타가 점수를 얻으면 커지고, 반대로 작아지는 변형 기능이 인상적이었음
          + 이후 멀티플레이어 게임들이 이 개념을 채택하지 않은 것이 아쉽다는 의견이 있음
     * UT2004가 아카이브에 포함되기를 바라는 의견이 있으며, 여전히 가끔씩 플레이한다고 언급함
          + 다른 게임들이 아레나 슈터의 갈증을 해소하지 못했다고 평가함
     * 2000년대 초반 Unreal Tournament의 instagib 모드를 즐겼던 경험을 공유함
          + Facing Worlds 맵에서 많은 시간을 보냈다고 회상함
     * 대학 신입생 시절 Unreal을 플레이했던 경험을 이야기함
          + 컴퓨터를 구매하기 위해 여름 내내 일했고, 비디오 카드가 좋은 컴퓨터를 샀다고 언급함
          + 친구의 전화에도 불구하고 Unreal을 플레이한 것이 옳은 선택이었다고 생각함
     * Unreal 다운로드 링크를 찾지 못했다는 의견이 있었으나, 업데이트로 링크를 공유함
     * UT2004의 Onslaught 모드가 최고의 팀 기반 아레나 FPS였다고 평가함
          + City of Heroes처럼 부활하기를 바라는 의견이 있음
     * Unreal Tournament가 삶을 바꿨다고 표현하며, Quake 3보다 선호했던 이유를 밝힘
          + 밝은 색상 팔레트와 Assault 모드가 좋았다고 언급함
          + Facing Worlds 맵이 가장 놀라운 맵이었다고 평가함
     * 최근 엔진 재구현 프로젝트를 공유함
          + 빠른 시작 지침과 아카이브에서 UT를 가져오는 방법을 설명함
     * Unreal/UT 2004의 64비트 리눅스 버전이 있는지 궁금해하는 의견이 있음
          + 코드 오픈소스를 위한 청원을 제안하며, CD-ROM을 여전히 가지고 있다고 언급함
          + Xonotic이 비슷하지만, 좋은 NPC/경로 매핑이 부족하다고 평가함
"
"https://news.hada.io/topic?id=17994","2024: 기업내에서의 생성형 AI 현황 - Menlo 벤처스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2024: 기업내에서의 생성형 AI 현황 - Menlo 벤처스

파일럿에서 프로덕션으로: AI 도입 가속화

     * 2024년은 생성형 AI가 기업의 핵심 전략으로 자리 잡은 해
     * AI 관련 지출: 2023년 $23억에서 2024년 $138억으로 6배 이상 증가
     * 기업의 72%가 생성형 AI 도구의 채택이 더욱 확대될 것으로 예상
     * 많은 조직이 여전히 구현 전략을 명확히 정의하지 못했지만, 대규모 변화의 초기 단계로 진입 중

생성형 AI 지출: 기업의 헌신적 투자

     * 60%: 혁신 예산에서 조달
     * 40%: 기존 예산을 재배치하며 AI를 장기 전략으로 편입
     * $46억이 생성형 AI 애플리케이션에 투자되며, 전년 대비 8배 증가
          + 기업들은 평균 10개의 잠재적 활용 사례를 식별하며 도입 속도 증가

주요 사용 사례와 ROI

    1. 코드 코파일럿 (51% 도입)
          + GitHub Copilot, Codeium, Cursor 등 도구가 개발 생산성 향상
    2. 지원 챗봇 (31% 도입)
          + 24/7 지원 제공: Aisera, Decagon, Sierra 등
    3. 엔터프라이즈 검색 및 데이터 변환 (28%, 27% 도입)
          + 데이터 사일로를 통합 검색으로 활용: Glean, Sana 등
    4. 회의 요약 (24% 도입)
          + Fireflies.ai, Otter.ai, Fathom이 회의 효율 개선

AI 기반 에이전트와 자동화의 부상

     * 현재: 인간의 작업을 보완하는 방식 선호
     * 미래: 독립적으로 복잡한 프로세스를 관리하는 완전 자동화 에이전트로 전환 예상
          + 예: Clay, Forge

도입 장벽과 실패 원인

     * 실패 이유:
         1. 구현 비용(26%)
         2. 데이터 프라이버시 문제(21%)
         3. 기대에 못 미치는 ROI(18%)
         4. 기술적 문제(15%, ""헛소리"" 생성 포함)
     * ROI와 맞춤화를 우선시하되, 기술 통합 및 지원도 고려 필요

산업별 생성형 AI 도입 현황

    1. 헬스케어 ($5억 지출)
          + 자동화된 의료 문서화 및 환자 관리: Abridge, Notable
    2. 법률 ($3.5억 지출)
          + 계약 검토 및 소송 준비 자동화: Harvey, Everlaw
    3. 금융 서비스 ($1억 지출)
          + 회계 및 규제 준수 개선: Numeric, Rogo
    4. 미디어 및 엔터테인먼트 ($1억 지출)
          + 콘텐츠 제작 효율 향상: Runway, Descript

AI 기술 스택과 설계 패턴

     * 주요 트렌드:
         1. RAG(검색 증강 생성): 51% 채택
         2. 미세 조정: 여전히 드물며 9%만 도입
         3. 에이전틱 아키텍처: 12%에서 도입 시작
     * 데이터 스토리지:
          + AI 네이티브 벡터 DB Pinecone 18% 시장 점유

전망: AI의 미래에 대한 주요 예측

     * 2024년은 하이프에서 현실적 구현으로 전환된 해로, 주요 데이터와 투자 트렌드를 바탕으로 향후 다음과 같은 세 가지 주요 예측을 제시:
     * AI 에이전트가 차세대 변화를 주도
          + 에이전틱 자동화가 콘텐츠 생성과 지식 검색을 넘어 복잡한 다단계 작업을 처리하며 AI 변혁을 이끌 전망
               o 예: Clay와 Forge 같은 플랫폼은 $4천억 소프트웨어 시장과 $10조 미국 서비스 경제에 도전
          + 이 변화는 새로운 인프라 필요:
               o 에이전트 인증, 도구 통합 플랫폼, AI 브라우저 프레임워크, AI 생성 코드 전용 런타임 등
     * ""다윗이 골리앗을 이긴다"": 기존 기업의 쇠퇴
          + ChatGPT는 올해 Chegg와 Stack Overflow를 강타:
               o Chegg: 85%의 시장 가치 소멸
               o Stack Overflow: 웹 트래픽 절반 감소
          + 추가적인 도전이 예상되는 영역:
               o IT 아웃소싱 기업(Cognizant) 및 기존 자동화 기업(UiPath)
               o Salesforce 및 Autodesk 같은 대형 소프트웨어 기업도 AI 네이티브 스타트업의 도전을 받을 가능성
     * AI 인재 부족 심화
          + AI 시스템 확산과 고도화로 심각한 인재 부족 상황 초래
               o 데이터 과학자뿐 아니라 AI 기술과 도메인 전문성을 결합할 수 있는 전문가가 특히 부족
               o 경쟁 심화:
                    # AI 숙련 엔터프라이즈 아키텍트의 연봉이 2-3배로 상승하는 현상 보편화
               o 훈련 프로그램 및 AI 센터에 대한 투자에도 불구, 인재 수요는 공급을 초과
               o 다음 AI 혁신을 이끌 인재 확보를 위한 치열한 경쟁 예상
"
"https://news.hada.io/topic?id=17873","BM25 전체 텍스트 검색 알고리즘 이해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BM25 전체 텍스트 검색 알고리즘 이해

     * BM25 알고리듬 이해하기
          + BM25는 Lucene/Elasticsearch와 SQLite 등에서 기본적으로 사용되는 널리 사용되는 전체 텍스트 검색 알고리듬임.
          + 최근에는 전체 텍스트 검색과 벡터 유사성 검색을 결합하여 ""하이브리드 검색""을 구현하는 것이 일반적임.
          + BM25 점수를 여러 쿼리 간에 비교할 수 있는지에 대한 질문에서 시작됨.
     * 문서 순위 매기기
          + 전체 텍스트 검색 알고리듬의 기본 목표는 쿼리에 가장 관련 있는 문서를 찾는 것임.
          + BM25는 문서가 쿼리에 관련될 확률을 기반으로 문서를 순위 매김.
     * BM25의 구성 요소
          + 쿼리 용어: 여러 용어로 구성된 쿼리의 경우, 각 용어에 대해 별도의 점수를 계산하고 합산함.
          + 역문서빈도(IDF): 전체 문서 컬렉션에서 특정 검색 용어의 희귀성을 계산함.
          + 문서 내 용어 빈도: 특정 문서에서 검색 용어가 나타나는 빈도를 계산함.
          + 문서 길이 정규화: 문서의 길이를 다른 문서와 비교하여 정규화함.
     * BM25의 수학적 표현
          + BM25 알고리듬은 수학적으로 복잡해 보일 수 있지만, 각 구성 요소를 이해하면 쉽게 이해할 수 있음.
          + 주요 수식은 각 쿼리 용어의 점수를 합산하여 계산됨.
     * BM25의 독창성
          + 확률 계산 없이 확률에 기반한 순위 매기기: BM25는 확률적 관련성 프레임워크에 기반하여 문서의 순위를 매김.
          + 대부분의 문서가 관련이 없다고 가정: BM25는 대부분의 문서가 쿼리와 관련이 없다고 가정하여 관련성 정보를 사용하지 않고도 유용하게 만듦.
     * 결론
          + BM25 점수는 동일한 컬렉션 내에서 쿼리 간에 비교할 수 있음.
          + BM25는 문서의 관련성을 추정하는 것이 아니라, 쿼리에 대한 관련성 순위를 매기는 데 중점을 둠.
          + 동일한 컬렉션 내에서 동일한 문서의 BM25 점수를 비교할 수 있음.
     * 추가 읽을거리
          + BM25의 이론과 역사에 대해 더 알고 싶다면 Elastic 엔지니어 Britta Weber의 2016년 강연과 Stephen Robertson과 Hugo Zaragoza의 ""The Probabilistic Relevance Framework: BM25 and Beyond""를 추천함.
"
"https://news.hada.io/topic?id=17912","Amazon, Anthropic에 40억 달러 추가 투자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Amazon, Anthropic에 40억 달러 추가 투자

     * Amazon, Anthropic에 40억 달러 추가 투자로 총 투자액 80억 달러로 확대
     * AWS를 주요 클라우드 및 AI 모델 훈련 파트너로 지정, AWS의 Trainium, Inferentia 칩과 Bedrock 플랫폼 활용, AWS Annapurna Labs와 AI 최적화 관련 협력 진행
     * AWS Bedrock 플랫폼에 Claude를 통합하여 기업들이 AI 솔루션을 간편하게 활용할 수 있음
"
"https://news.hada.io/topic?id=17993","D-Link, 60,000대 구형 모뎀 보안 패치 미제공 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   D-Link, 60,000대 구형 모뎀 보안 패치 미제공 발표

     * 보안 연구자들이 발견한 취약점
          + 오래된 D-Link 모뎀에서 심각한 보안 취약점이 발견됨.
          + D-Link는 이러한 취약점을 패치하지 않고 하드웨어 업그레이드를 권장함.
          + 약 60,000개의 취약한 장치가 존재하며, 대부분 대만에 위치함.
     * D-Link의 대응
          + D-Link는 EoL(End of Life) 상태에 도달한 장치에 대해 패치를 제공하지 않기로 결정함.
          + 사용자는 새로운 모델로 교체할 것을 권장받음.
          + D-Link NAS 장치에서도 유사한 취약점이 발견되었으나, 이 역시 패치가 제공되지 않음.
     * 발견된 취약점 세부사항
          + CVE-2024-11068: API 접근을 통해 비밀번호를 변경할 수 있는 취약점, 심각도 9.8.
          + CVE-2024-11067: 경로 탐색 취약점, 심각도 7.5.
          + CVE-2024-11066: 원격 코드 실행 취약점, 심각도 7.2.
     * 추가 권장 사항
          + 라우터를 즉시 교체할 수 없는 경우, 원격 접근을 제한하고 안전한 비밀번호 설정을 권장함.
          + 라우터는 가장 많이 공격받는 엔드포인트 중 하나임.
     * 기타 정보
          + D-Link는 EOL/EOS에 도달한 장치의 은퇴 및 교체를 권장함.
          + 대만 컴퓨터 및 대응 센터(TWCERTCC)에서 추가적인 명령어 삽입 취약점 4개가 발견됨.

        Hacker News 의견

     * D-Link의 오래된 모뎀에 대한 보안 패치가 없다는 기사 소개
          + D-Link는 보안이 취약한 장비를 출시한 역사가 있으며, 다른 제품을 구매하는 것이 좋음
     * EU 제품 책임 지침은 제품의 보안을 유지하기 위해 업데이트를 요구함
          + 독일에서는 제품과 관련 앱이 평균 5년 동안 업데이트되어야 한다는 기대가 있음
     * 장기 지원 제품을 찾는 사람들에게 Ubiquiti (Unifi)와 OpenWRT를 추천함
          + OpenWRT 지원 장치는 저렴하면서도 장기적으로 지원될 가능성이 높음
     * 제품의 지원 약속뿐만 아니라 회사의 소프트웨어 품질도 중요함
     * 오래된 와이파이 라우터의 취약점을 분석하고 블로그에 게시하려 했던 경험 공유
          + 제조사가 업데이트를 중단하여 새로운 장비를 구매해야 했던 경험
     * Ubiquiti Edge Router를 사용했지만 장기적으로는 만족스럽지 않았음
          + Protectli 박스를 구매하여 coreboot를 플래시하고 pfSense를 사용하다가 OPNSense로 이동함
     * 소비자 네트워크 장비는 보안에 취약하며, 보안을 중요시하는 사람들은 사용하지 말아야 함
     * 오래된 하드웨어에 OpenWRT를 플래시하는 것을 추천함
          + pfSense나 OPNSense를 실행할 수 있는 하드웨어를 구매하는 것이 좋음
     * D-Link의 제품 종료와 관련된 버그의 배경 설명
          + OpenWRT를 사용하는 방법 소개
     * CVSS 점수에 대한 비판
          + CVE 점수가 보안 취약점의 실제 영향을 평가하는 데 유용하지 않음
     * MikroTik 라우터의 UI가 비전문가에게 적합하지 않다는 점이 아쉬움
          + 저렴하고 장기적으로 지원되지만 UI가 비전문가에게는 어려움
"
"https://news.hada.io/topic?id=17890","Electrobun - TypeScript로 작성된 크로스 플랫폼 데스크톱 애플리케이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Electrobun - TypeScript로 작성된 크로스 플랫폼 데스크톱 애플리케이션

     * Electrobun은 Typescript로 작성된 초고속, 경량, 크로스 플랫폼 데스크톱 애플리케이션을 구축, 업데이트 및 배포하기 위한 완전한 솔루션을 제공하는 것을 목표로 함
     * bun을 사용하여 메인 프로세스를 실행하고 웹뷰 Typescript를 번들링하며, zig로 작성된 네이티브 바인딩을 포함
     * 주요 기능
          + Typescript: 메인 프로세스와 웹뷰를 위한 Typescript를 작성할 수 있으며, 하나의 언어로 간편하게 작업 가능함.
          + 빠름: 메인과 웹뷰 프로세스 간의 격리로 보안과 성능을 보장하며, 빠르고 타입이 지정된 RPC를 쉽게 구현할 수 있음.
          + 작음: 약 12MB의 작은 자체 추출 앱 번들과 4KB만큼 작은 앱 업데이트로 자주 배포하면서 대역폭 비용을 절감할 수 있음.
          + 완전한 통합: 5분 내에 코드 작성을 시작하고 10분 내에 배포할 수 있는 완전한 통합 워크플로우를 제공함.

   Bun은 써보면 써볼수록 정말 마음에 들었습니다. 무엇보다 빠르게 동작한다는 목표를 아직까지도 충실하게 따르고 있는 점이 대단해 보입니다. 이 프로젝트는 잘되었으면 좋겠습니다.

   기존에 nodejs로 개발 된 것들을 bunjs로 재작성하는 시도? 중 하나 일까요.
   Bun 은 아직 안써봤는데 + 이미 node로 만들고 있고 만든 걸 Bun 으로 옮길 계획도 없는데...
   10년 뒤엔 모르려나요. 혹시 모르니 만져보긴 해야겠네요.

   wails도 소소하게 쓸만합니다.

   Tauri와 비슷하지만 다른 결의 시도들이 자주 보여서 좋네요

        Hacker News 의견

     * Electrobun은 Tauri와 비슷하지만 Zig를 사용하여 빠르고 네이티브한 부분을 구현하고, 프론트엔드/UI 부분에 더 집중하는 프로젝트임
          + 이는 흥미로운 제안이지만 엄청난 작업량을 요구함
     * Electrobun의 개발자는 프로젝트가 초기 단계에 있으며, 로드맵이 업데이트가 필요하다고 언급함
          + Tauri처럼 시스템 웹뷰를 사용하고, Chromium을 번들링하지 않음
          + Electron처럼 Bun을 메인 프로세스로 사용하여 타입스크립트를 메인 및 브라우저 컨텍스트에서 사용함
          + C/Objective-C로 작성된 네이티브 바인딩을 Zig 래퍼로 감싸서 Bun 프로세스가 실행함
          + 크로스 플랫폼을 목표로 하지만 안정성에 우선 집중하고 있음
          + CLI가 업데이트, 코드 서명 등을 처리하며, 빌드 아티팩트를 생성하여 S3나 정적 파일 호스트에 업로드할 수 있음
          + Zig로 최적화된 bsdiff 구현을 통해 4KB 크기의 업데이트를 자동 생성함
          + Zstd를 사용하는 자체 Zig 셀프 추출 메커니즘으로 초기 다운로드 크기를 최소화함
          + Bun과 브라우저 프로세스 간에 메서드 시그니처와 핸들러만 작성하면 되는 암호화된 RPC 메커니즘을 제공함
          + OOPIF 구현을 통해 성능이 뛰어나고 사용하기 쉬운 격리된 브라우저 컨텍스트를 HTML <electrobun-webview> 요소로 임베드할 수 있음
     * OS별 기능을 순수 타입스크립트로 어떻게 관리하는지, Tauri와 비교하여 크기와 속도에서 어떤 차이가 있는지 궁금해하는 의견이 있음
     * Electrobun의 렌더링 엔진에 대한 질문이 있으며, 프로젝트 이름이 Electron을 암시하지만 언급되지 않음
          + Electrobun Playground 앱의 크기가 50.4MB로, 대부분이 Bun 런타임임
     * Electrobun의 성장을 지켜보는 것이 흥미롭다는 의견이 있으며, 바로 참여하지는 않겠지만 훌륭한 프로젝트라고 평가함
     * Electrobun은 Node.js를 Bun으로, Chromium을 WebView로 대체한 Electron이라는 의견이 있음
     * 크로스 플랫폼 앱을 만들기 위한 대안이 많을수록 좋다는 의견이 있음
     * Electrobun이 NeutralinoJS, Electrino, DeskGap과 같은 또 다른 웹뷰 기반 프레임워크인지, Node 대신 Bun을 사용하는 것 외에 어떤 장점이 있는지 궁금해하는 의견이 있음
          + 정말 가벼운 크로스 플랫폼 데스크톱 앱을 위해서는 Qt, GTK, wxWidgets, FLTK 1.4와 같은 비웹뷰 기반 네이티브 프레임워크를 사용하는 것이 좋다고 제안함
     * 메인 프로세스와 웹뷰 프로세스 간의 격리로 인한 성능 문제를 우려하는 의견이 있음
          + IPC 브리지를 사용하여 데이터를 공유해야 하며, 이는 모든 공유 데이터를 복사해야 함
          + 예를 들어, ffmpeg를 사용하여 비디오를 디코딩할 때 각 프레임을 렌더링하기 전에 디코딩된 이미지를 복사해야 함
     * Electron의 대안으로 Bun을 사용하는 것이 좋지만, Electron보다 나은 것은 낮은 기준이라고 평가함
          + Bun이 FreeBSD에서 작동하기를 기다리고 있으며, 크리스마스 위시리스트에 포함되어 있다고 언급함
"
"https://news.hada.io/topic?id=17923","구글의 양자 오류 수정 혁신 이해하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          구글의 양자 오류 수정 혁신 이해하기

     * 양자 컴퓨터의 기본 단위인 큐비트는 매우 민감하여 미세한 외부 간섭에도 오류가 발생함
     * 양자 오류 수정(QEC) 은 다수의 민감한 물리적 큐비트를 결합해 더욱 안정적인 논리적 큐비트를 생성하고 오류를 수정함
     * QEC의 핵심 목표는 물리적 큐비트의 오류율이 임계치 이하일 때, 더 많은 큐비트를 추가해도 오류가 줄어들도록 만드는 것임

  구글의 주요 성과: 임계치 이하의 오류율 달성

     * 구글은 특정 유형의 QEC인 표면 코드(surface codes) 를 사용하여 오류를 지수적으로 줄이는 데 성공함
     * 5개에서 7개의 큐비트로 코드 거리(code distance)를 증가시킴으로써 논리적 오류율이 2.14배 감소함
     * 실험 결과, 논리적 큐비트는 물리적 큐비트보다 두 배 더 오래 지속됨
     * 이는 논리적 큐비트가 물리적 큐비트보다 뛰어난 성능을 입증한 첫 사례로, 확장 가능한 양자 컴퓨터의 중요한 기반을 마련함


  제어 엔지니어링 관점에서 구글의 혁신

    1. 실시간 동기화

     * 모든 오류 수정 주기를 1.1µs 내에 완료해야 했으며, 이는 큐비트 간 완벽한 동기화를 요구함
     * 신호의 미세한 타이밍 오류도 오류 누적과 계산 실패를 초래할 수 있음

    2. 실시간 디코딩

     * 디코딩은 측정 데이터를 분석해 오류 위치와 유형을 파악하는 작업
     * 구글은 63µs의 지연 시간으로 100만 회 이상의 오류 수정 주기를 처리함
     * 디코더 속도가 느리면 오류가 축적되므로 실시간 디코딩이 필수적임

    3. 고충실도 게이트 운영

     * 단일 큐비트 게이트 오류율 0.1% 미만, 두 큐비트 CZ 게이트 오류율 0.3% 를 달성해 논리적 큐비트의 안정성을 확보함
     * 게이트 오류는 시스템 전반으로 오류가 전파될 수 있어 정확도가 중요함


  실시간 디코딩의 중요성

     * 구글의 연구는 디코더의 지연 시간(latency)과 처리량(throughput)이 QEC 성능에 얼마나 중요한지 보여줌
     * 디코딩은 FPGA와 같은 하드웨어에서 빠르고 정확하게 수행되지만, GPU는 더 높은 계산 능력을 제공함
     * NVIDIA와 Quantum Machines의 협업으로 탄생한 DGX Quantum 플랫폼은 4µs 미만의 데이터 왕복 지연 시간으로 QEC 작업을 지원함


  앞으로의 과제와 전망

    구글의 시사점

     * 구글은 논리적 큐비트가 물리적 큐비트를 능가할 수 있음을 보여줌으로써 오류 내성(fault tolerance) 양자 컴퓨팅으로 가는 길을 열었음
     * 논리적 오류율이 지수적으로 감소함을 입증하여 복잡한 양자 계산을 수행할 수 있는 잠재력을 제시함

    향후 연구 과제

     * 디코더 속도의 향상 및 자동화된 보정
     * 빠른 오류 완화 전략 개발
     * 양자와 고전적 작업 간의 통합 제어 시스템 설계
     * 실시간 피드백 루프를 완성하여 오류가 축적되기 전에 수정하는 시스템 필요

   AlphaQubit - AI를 활용한 양자 컴퓨터의 오류 식별

        Hacker News 의견

     * 클래식 컴퓨터에서 오류 저항 메모리는 비트를 중복하여 오류를 감지하고 수정하는 것이 아니라 오류 수정 기술을 사용하여 달성됨
          + ECC와 같은 오류 수정 기술은 비트를 중복하는 것보다 효율적임
          + 논리 회로와 혼동된 것일 수 있음
     * 웹사이트가 브라우저의 확대 설정을 조정할 때 본문을 제외한 모든 것을 확대할 수 있도록 설계되었음
     * 언급된 논문은 2024년 8월 27일에 발표되었음
          + 논문 링크
     * 양자 컴퓨팅의 발전을 기대하고 있지만, 소수의 곱을 몇 비트 이상으로 인수분해할 수 있을 때까지는 진정한 돌파구로 보지 않음
     * 양자 컴퓨팅의 각 진보가 어떤 결과를 가져오는지 잘 모르지만, 언젠가 모든 보안 키와 암호 알고리즘을 변경해야 할 위험에 노출되어 있음
          + 이 연구가 양자 암호 아포칼립스에 얼마나 가까워졌는지 궁금함
          + 분기별 엔지니어링 계획에 이를 반영해야 할 시간이 얼마나 남았는지 알고 싶음
     * 이 성과가 실용적인 양자 컴퓨터에 얼마나 가까워졌는지 이해하는 사람이 있는지 궁금함
     * 돌파구처럼 느껴지지 않음
          + 긍정적인 엔지니어링 진전이지만 돌파구는 아님
          + AI와의 관련성에 대한 의문이 있음
"
"https://news.hada.io/topic?id=17966","사이버트럭의 잦은 리콜","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              사이버트럭의 잦은 리콜

Cybertruck의 잦은 리콜 문제

     * 품질 문제: Tesla의 Cybertruck은 출시 이후 여러 품질 문제로 인해 신뢰성이 낮은 전기차 중 하나로 평가받고 있음. 최근 리콜은 차량의 추진력 손실 가능성과 관련되어 있으며, 이는 충돌 위험을 증가시킬 수 있음.
     * 소비자 반응: Cybertruck 구매자들은 품질이나 안전성보다는 차량의 독특한 디자인과 이미지에 더 관심을 가짐. 이들은 차량의 실용성보다는 외관과 주목받는 것을 중시함.
     * 리콜 현황: Cybertruck은 올해만 6번의 리콜을 겪었으며, 이는 2024년 차량 중 91%보다 더 많은 리콜 수치임. 리콜 문제는 주로 결함 있는 드라이브 인버터와 관련되어 있음.
     * 시장 반응: Cybertruck의 중고차 가격은 급격히 하락하고 있으며, Tesla는 새로운 모델을 출시하여 시장을 안정시키려 하고 있음. 예약 없이도 차량을 구매할 수 있는 상황이 됨.
     * 미래 전망: Cybertruck의 판매는 북미 외 지역에서 제한적이며, 유럽의 안전 규정을 충족하지 못해 판매가 어려움. 또한, 일반적인 트럭과 달리 교환이 거의 이루어지지 않음.
     * 리콜의 중요성: 리콜은 규제 시스템이 제대로 작동하고 있음을 보여주지만, Musk의 정부 자문 역할로 인해 규제 기관의 권한이 약화될 가능성도 있음. 이는 소비자 안전에 영향을 미칠 수 있음.

        Hacker News 의견

     * 최근 리콜이 소프트웨어 업데이트가 아닌 물리적 리콜임을 언급하며 이는 이례적임을 암시함
          + 소프트웨어 업데이트로 해결된 리콜을 제외하면 모든 자동차에서 순위가 어떻게 될지 궁금함
     * 안전과는 무관하게, 이 차량들은 오래된 것처럼 보이지 않음
          + 도로에서 보이는 차량들이 이미 조금 낡아 보임
          + 마감과 스타일링이 작은 흠집도 강조함
     * Cybertruck 소유자들이 안전성, 신뢰성 등에 대해 신경 쓰지 않는다는 내용이 있음
          + CNN 리뷰어가 Cybertruck을 ""개인의 오만함을 강철로 표현한 것""이라고 비판함
          + Cybertruck 구매자들은 ""이걸 운전할 때 사람을 죽여도 상관없다""고 생각하는 사람들일 것이라고 언급함
          + 시장이 작을 것이라고 예측함
     * 사람들이 왜 그렇게 많은 돈을 결함이 있는 못생긴 것에 쓰는지 의문임
          + 2017년형 Kia Soul이 5배 저렴하고 결함이 없었음
     * ""리콜""이 단순한 무선 소프트웨어 업데이트인지 궁금함
          + 자동차 업계가 익숙하지 않다고 해서 나쁜 것은 아님
          + 버그가 없는 것이 더 좋지만, 소프트웨어 개발 과정을 아는 사람들이 많음
     * 다양한 분야에서 라벨에 대한 소란이 왜 항상 있는지 궁금함
          + 자동차가 안전하게 운전되기 위해 OTA 업데이트가 필요함
          + 리콜이라고 부르는 것이 중요한 이유가 궁금함
     * 특정 자동차 브랜드와 모델을 보면 운전자를 조심해야 한다고 생각함
          + 유럽에서 Cybertruck을 본 적은 없지만 조심할 것임
          + 다른 운전자에게는 큰 빨간 경고 표시처럼 보임
     * 리콜은 심각도를 나타내지 않아 신뢰할 수 있는 척도가 아님
     * 최근 Cybertruck을 처음 봤는데 예상보다 덜 이상해 보였음
          + 매우 다른 새로운 디자인임
          + 91%와 비교할 때 완전히 새로운 디자인이 얼마나 되는지 궁금함
          + ""Tesla의 급진적인 새로운 EV 디자인인 Cybertruck이 2024년 모든 차량의 9%를 품질 면에서 앞서고 있음""이라는 제목으로 바꿔보자고 제안함
          + 개인 스타일은 아니지만, 다르게 시도하고 성공하는 것을 높이 평가함
          + 가솔린 트럭 소유자들이 전기차로 전환하는 것도 좋을 것임
"
"https://news.hada.io/topic?id=17880","DBT를 사용한 Redshift 데이터 로딩","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        DBT를 사용한 Redshift 데이터 로딩

     * Yelp는 최근 소비자의 데이터에 대한 수요가 증가함에 따라 Redshift에 데이터를 더 효율적으로 로드하는 방법을 재검토함
     * 이 글에서는 DBT가 Redshift Spectrum과 원활하게 사용되어 Data Lake에서 Redshift로 데이터를 읽어들여 런타임을 크게 줄이고, 데이터 품질 문제를 해결하며, 개발자 생산성을 향상시키는 방법을 살펴봄

시작점

     * 배치 데이터를 Redshift에 로드하는 방법은 수년 동안 효과적이었지만 계속해서 개선점을 모색함
     * 주로 Spark 작업을 사용하여 S3 데이터를 읽고 in-house Kafka 기반 데이터 파이프라인에 게시하여 Data Lake와 Redshift 모두에 데이터를 가져옴
     * 그러나 몇 가지 문제점에 직면하기 시작함:
          + 성능: 대용량 데이터 세트(일일 100만 개 이상의 행)가 지연되기 시작함. 대부분 upsert 시 기본 키가 중복되지 않도록 하기 위한 테이블 스캔 때문임
          + 스키마 변경: 대부분의 테이블은 Avro 스키마로 구성되었음. 스키마 변경은 때때로 복잡했는데, 이는 새 Avro 스키마를 생성하고 등록하는 다단계 프로세스가 필요했기 때문임
          + 백필: 데이터 수정에 대한 백필 지원이 미흡했는데, in-place로 행을 수정할 수 있는 쉬운 방법이 없었기 때문임. 전체 파티션에 대해 수정된 데이터를 쓰기 전에 데이터를 수동으로 삭제하는 경우가 많았음
          + 데이터 품질: Data Lake와 Redshift에 병렬로 쓰는 것은 두 데이터 스토어 간의 데이터 유형 차이와 같은 데이터 차이의 위험이 있었음

DBT로 Redshift 로드 개선하기

     * 데이터를 보다 효율적으로 이동시키는 방법을 고려할 때 Redshift에서 Data Lake 데이터를 쿼리할 수 있도록 특별히 구축된 도구인 AWS Redshift Spectrum을 활용하기로 선택함
     * Data Lake 테이블은 일반적으로 가장 업데이트된 스키마를 가지고 있었기 때문에 Redshift 배치를 위한 데이터 소스로 S3 대신 Data Lake를 사용하기로 결정함. 이는 데이터 차이를 줄이는 데 도움이 될 뿐만 아니라 Data Lake를 단일 진실 소스로 취급하는 우리의 모범 사례와도 일치함
     * 구현을 위해 Spectrum은 정의된 스키마가 필요한데, 이는 우리의 Data Lake 테이블을 위해 Glue에 이미 존재함. 추가로 필요한 유일한 설정은 Data Lake 테이블을 외부 테이블로 추가하여 간단한 SQL 쿼리로 Redshift에서 액세스할 수 있도록 하는 것뿐이었음
     * 이미 다른 데이터 세트에 DBT를 채택하기 시작했지만, 파이프라인에서 Redshift Spectrum 쿼리를 캡처하는 데에도 완벽한 후보로 보임. DBT는 데이터 변환에 탁월하며 모듈화되고 버전 제어된 SQL 작성을 적용하는 데 도움이 됨
     * Spark 작업이 S3에서 Redshift로 읽는 대신 DBT를 사용하여 Data Lake에서 Redshift로 데이터를 직접 복사함. DBT는 재현성, 유연성 및 데이터 계보와 같은 특징적인 이점을 제공할 뿐만 아니라 위에서 언급한 몇 가지 문제점을 해결하는 데도 도움이 됨

단순화된 스키마 변경

     * 스키마 변경을 단순화하기 위해 DBT의 on_schema_change 구성 인수를 활용함. append_new_columns로 설정하여 들어오는 데이터에 열이 없는 경우 삭제되지 않도록 보장함
     * 또한 DBT 계약을 두 번째 보호 계층으로 사용하여 작성 중인 데이터가 모델의 구성과 일치하는지 확인함

덜 수동적인 백필

     * DBT를 통해 백필도 훨씬 쉬워졌음. pre_hook 구성 인수를 사용하여 모델 바로 직전에 실행할 쿼리를 지정할 수 있음
     * 이를 통해 작성될 파티션에 대한 데이터를 보다 자동으로 삭제할 수 있음
     * 이제 멱등성을 보장할 수 있게 되어 오래된 데이터가 제거되지 않는 것에 대해 걱정할 필요 없이 백필을 수행할 수 있게 됨

데이터 중복 제거

     * 중복 행을 해결하기 위해 SQL에 중복 제거 계층을 추가하고 DBT 테스트로 유효성을 검사함
     * DBT에는 기본 제공 unique 열 테스트가 있지만 전체 테이블 스캔이 필요하므로 큰 테이블에는 실행 가능하지 않음
     * 대신 dbt_expectations 패키지의 expect_column_values_to_be_unique 함수를 사용함. 이를 통해 최근에 작성된 행만 스캔하는 행 조건을 지정할 수 있음

성능 향상

     * 가장 눈에 띄는 성과는 특히 가장 큰 문제가 있는 Redshift 데이터 세트의 성능 향상이었음:
          + 쓰기는 약 2시간이 걸렸지만 이제는 일반적으로 단 10분 만에 실행됨
          + 이전에는 한 달에 최대 6시간의 지연이 있었지만 이제는 더 이상 지연이 없음. 이는 온콜 인시던트 대응 노력에 큰 부담을 줄여줌
          + 스키마 업그레이드는 이전에 더 긴 다단계 프로세스였음. 이제는 몇 시간밖에 걸리지 않는 3단계 프로세스로 개선됨

더 나은 데이터 일관성

     * 데이터 흐름의 분기를 제거함으로써 다른 데이터 저장소 간에 데이터가 달라지지 않을 것이라는 확신이 높아짐
     * Redshift에 들어오는 모든 데이터는 먼저 Data Lake를 통과해야 하므로 Data Lake가 단일 진실의 원천으로 남을 수 있도록 더 잘 보장할 수 있음

결론

     * 마이그레이션의 성공에 따라 약 12개의 다른 데이터 세트에 이러한 변경 사항을 적용했으며 전반적으로 유사한 이점을 관찰함
     * AWS Redshift Spectrum 및 DBT와 같은 도구를 활용하여 인프라를 진화하는 데이터 요구 사항에 맞게 조정하여 사용자와 이해 관계자에게 더 큰 가치를 제공함
"
"https://news.hada.io/topic?id=17876","Erlang 핫 코드 업데이트의 활용 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Erlang 핫 코드 업데이트의 활용 방법

     * Erlang 생태계의 강력한 기능 중 하나는 핫 코드 업데이트임
     * 이 기능은 거의 다른 런타임에서는 불가능하며 매우 독특함
     * Elixir는 Erlang 위에서 빌드되었으며 동일한 기능을 지원함

  Elixir에서 핫 코드 업데이트 적용

     * 표준적인 Elixir 릴리스(mix release) 방식은 Erlang 핫 코드 업데이트를 기본적으로 지원하지 않음
     * 핫 코드 업데이트를 구현하려면 여러 블로그 포스트를 참고하거나 Erlang 공식 문서를 세부적으로 연구해야 함
     * 관련 자료:
          + Learn You Some Erlang: Relups 문서
          + AppSignal: Elixir 핫 코드 리로딩 가이드

  핫 코드 업데이트의 실제 활용 사례

     * 핫 코드 업데이트는 실무에서 크게 두 가지로 나뉨:
         1. 간단한 코드 리로드
               o 예: 개발 중 IEx에서 r MyModule 또는 recompile 명령을 실행하는 것
               o 이는 간단하고 유용하지만, 새로운 컴파일러나 빌더의 일부처럼 느껴짐
         2. 더 복잡한 응용
               o Nerves 프로젝트에서 핫 코드 업데이트를 자주 활용:
                    # 내장 Elixir 디바이스에서 숫자를 튜닝하거나 모듈을 수정할 때, 펌웨어 업로드 및 재부팅을 기다리는 대신 IEx로 업데이트
                    # 애플리케이션의 특정 부분을 시작/중지하거나, GenServer를 종료하여 상태를 초기화
               o NervesHub를 통해 원격 디바이스에 핫 코드 업데이트 적용:
                    # 예: 실시간 클럭 디버깅 시 I2C 호출을 직접 실행하며 문제를 빠르게 파악

  핫 코드 업데이트의 도구 및 주의사항

     * Elixir의 mix release나 기존 distillery 도구 위에 핫 코드 업데이트를 지원하는 툴링이 늘어나길 희망
     * 핫 코드 업데이트는 데이터베이스 마이그레이션처럼 세심한 주의가 필요:
          + 종속성들이 핫 코드 업데이트에 어떻게 반응하는지 이해해야 함
          + 기타 고려해야 할 다양한 주제 존재

   이 내용은 국내 유일 엘릭서 번역서인 처음 배우는 엘릭서 프로그래밍에 자세히 실려 있기도 합니다.

   멋지고 강력한 기능이긴 합니다만,
   실시간 디버깅 및 확인 용으로만 사용하는게 좋을거 같습니다

        Hacker News 의견

     * Discord에서 BEAM 핫 코드 로딩을 사용하여 긴 배포 주기를 단축하고 긴급 업데이트에 활용했음
          + 여러 모듈을 동시에 패치할 수 있는 도구를 개발하여 클러스터에 업데이트를 전파했음
          + Erlang의 내장 분배 기능을 통해 핫 패치를 배포했음
     * Nerves 장치에서 코드 리로딩이 유용하며, 실시간으로 수정 사항을 테스트할 수 있어 통합 테스트에 좋음
          + 원격에서 새로운 펌웨어를 테스트하고 업데이트하여 고객을 만족시켰음
          + 파일을 /tmp에 복사한 후 Code.compile을 사용하는 것이 더 나은 오류 메시지를 제공함
          + 모든 코드를 컴파일하고 삭제하는 헬퍼 함수를 작성하는 것이 간단함
     * Elixir 프로젝트에서 핫 코드 업데이트를 사용할 수 없었지만, 고객에게 도움이 되었을 것이라고 생각함
          + 복잡한 변경 사항에는 핫 코드 업데이트가 문제를 더 일으킬 수 있음
          + 간단한 변경 사항에는 최소한의 영향을 주는 것이 좋음
     * kosmi.io에서 핫 코드 업그레이드를 성공적으로 사용하고 있음
          + 빠른 개발과 수정, 업데이트 배포가 가능함
          + Distillery와 커스텀 스크립트를 사용하지만 표준화되었으면 좋겠음
     * Nerves와 핫 코드 리로딩을 통해 Erlang에 관심을 가지게 되었음
          + 생산 환경에서 실용적이지는 않지만, 신뢰할 수 있는 시스템 구축에 유용한 도구임
     * 릴업 준비 시 매우 주의해야 하며, Linux에서는 새로운 서버를 실행하고 세션 데이터를 전송하는 방법도 있음
          + 핫 패칭은 동일한 VM을 계속 실행하기 때문에 만족스럽지 않을 수 있음
     * Elixir를 임베디드 Linux에 배포하며, Nerves가 systemd를 대체하고 BEAM VM을 프로세스 1로 부팅함
          + Elixir를 하드웨어에 가깝게 배치함
     * WhatsApp은 과거에 SSH 스크립트를 사용하여 모든 노드에서 핫 리로딩을 수행했음
     * 핫 코드 업데이트는 유용하지만 쉽게 실수를 유발할 수 있으며 지원이 부족함
          + 핫 코드 업데이트의 이점은 신중한 롤링 재시작을 통해 얻을 수 있음
          + Erlang의 코드 리로딩 기능을 활용하여 실시간 문제 진단 도구를 만들 수 있음
     * 핫 코드 업데이트는 많은 클라이언트가 연결된 상황에서 코드 변경을 수행할 때 유리함
          + GNU Make를 사용하여 코드를 프로덕션에 동기화하고 디버그 셸을 통해 모듈을 로드했음
"
"https://news.hada.io/topic?id=17934","Bluesky에 호스팅된 웹사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Bluesky에 호스팅된 웹사이트

    Bluesky와 AT 프로토콜

     * Bluesky와 AT 프로토콜 소개
          + Bluesky는 개인 데이터 서버(PDS)를 통해 웹사이트를 호스팅할 수 있는 기능을 제공함.
          + AT 프로토콜은 웹사이트 콘텐츠 업로드에 사용되는 API를 정의하며, PDS가 이를 구현함.
          + Bluesky는 bsky.social 도메인을 통해 PDS에 접근할 수 있는 진입점을 제공함.
     * 콘텐츠 유형: 레코드와 블롭
          + 대부분의 소셜 애플리케이션은 레코드와 블롭이라는 두 가지 주요 콘텐츠 유형을 가짐.
          + 레코드는 사용자가 생성하는 핵심 엔티티로, 구조와 메타데이터를 가짐.
          + 블롭은 주로 미디어 자산과 같은 큰 비구조적 데이터로, 레코드를 통해 참조됨.
     * 블롭 업로드와 관리
          + 블롭은 레코드가 참조하기 전에 PDS에 업로드되어야 함.
          + 업로드된 블롭은 임시 저장소에 저장되며, 참조되기 전까지 접근할 수 없음.
          + 서버는 레코드 생성 시 참조된 블롭을 확인하고, 성공 시 블롭을 공개적으로 접근 가능하게 함.
     * 데이터 생성 및 인증
          + PDS에 데이터 생성 작업을 수행하려면 인증을 위한 액세스 토큰이 필요함.
          + com.atproto.server.createSession XRPC 메서드를 사용하여 사용자 자격 증명을 토큰으로 교환할 수 있음.
     * 블롭 참조 및 레코드 생성
          + 블롭은 app.bsky.feed.post 레코드에서 참조될 수 있으며, 이미지로 포함될 수 있음.
          + MIME 타입 검증을 통해 블롭 참조의 유효성을 확인함.
     * 보안 고려 사항
          + 웹 서버에서 사용자 업로드 파일을 제공하는 것은 보안 문제를 야기할 수 있음.
          + 콘텐츠 보안 정책(CSP)을 통해 getBlob 엔드포인트에 대한 보안을 강화해야 함.
     * CDN을 통한 이미지 제공
          + Bluesky 애플리케이션의 이미지 블롭은 PDS 인스턴스가 아닌 CDN을 통해 제공됨.
          + 애플리케이션은 CDN을 통해 이미지를 제공하는 방법을 알고 있어야 함.
     * 오픈 소스의 장점
          + Bluesky의 PDS 구현은 오픈 소스로 제공되어, 블롭 참조가 어떻게 정의되는지 확인할 수 있음.
          + 새로운 렉시콘을 지원하기 위해 PDS는 알지 못하는 렉시콘도 처리할 수 있어야 함.
     * 렉시콘의 확장 가능성
          + app.bsky.feed.post 타입은 유효한 임베드에 대한 유니온을 포함하며, 기본적으로 오픈되어 있음.
          + 새로운 타입의 임베드를 추가할 수 있으며, 이는 기존 사용 사례를 확장하는 ""마이크로 확장""을 가능하게 함.
"
"https://news.hada.io/topic?id=17938","덴마크, 10억 그루 나무 심고 농지 10%를 숲으로 전환 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  덴마크, 10억 그루 나무 심고 농지 10%를 숲으로 전환 계획

     * 덴마크의 새로운 환경 협약
          + 덴마크는 향후 20년 동안 10억 그루의 나무를 심고 농지의 10%를 숲과 자연 서식지로 전환하기로 합의함.
          + 이 협약은 비료 사용을 줄이기 위한 노력의 일환으로, 덴마크의 풍경에 100년 만에 가장 큰 변화를 가져올 것이라고 정부는 발표함.
          + 덴마크의 녹색 삼자 협약부의 책임자인 예페 브루스는 ""덴마크 자연은 1864년 습지가 배수된 이후로 보지 못한 방식으로 변화할 것""이라고 언급함.
     * 협약의 세부 내용
          + 협약에 따라 430억 크로네(약 61억 달러)가 농민들로부터 토지를 매입하는 데 할당됨.
          + 덴마크의 숲은 추가로 25만 헥타르(61만 8천 에이커)로 확장되며, 현재 기후에 해로운 저지대 토양에서 경작되고 있는 14만 헥타르(34만 6천 에이커)는 자연으로 전환되어야 함.
          + 현재 덴마크의 14.6%의 토지가 숲으로 덮여 있음.
     * 정치적 합의
          + 이 협약은 사회민주당, 자유당, 중도당으로 구성된 덴마크의 3당 정부와 사회주의 인민당, 보수당, 자유연합당, 사회자유당에 의해 체결됨.
          + 의회에서의 투표는 형식적인 절차로 간주됨.
     * 추가적인 환경 조치
          + 6월에 정부는 2030년부터 소, 양, 돼지에서 배출되는 온실가스에 대해 가축 농민들에게 세금을 부과할 것이라고 발표함. 이는 메탄 배출의 주요 원천을 목표로 하는 첫 번째 국가임.

        Hacker News 의견

     * 덴마크의 총 토지 면적의 10%가 자연과 숲으로 전환되며, 이는 농지 면적의 약 15%에 해당함. 이러한 전환은 주로 수질 개선을 위한 것임. 농업에서 발생하는 질소 과잉이 강과 해안의 산소를 고갈시켜 생태계를 파괴했기 때문임
          + 지구 온난화와 CO2 문제에 있어, 이탄지의 전환이 도움이 될 수 있지만, 주요 변화는 농업 산업 전체에 대한 탄소세 도입임
          + CO2 외의 다른 배출물에 대한 혼란을 피하기 위해, 이는 CO2 등가(CO2e) 세금임. 예를 들어, 1kg의 메탄은 25kg CO2e에 해당함
          + 더 많은 정보를 원한다면, 덴마크어로 된 두 개의 공식 문서를 Claude나 ChatGPT에 업로드하여 구체적인 계획을 확인할 수 있음
     * Kim Robinson의 소설 ""The Ministry for the Future""에서 이와 유사한 접근법이 설명됨. 이 소설은 기후 변화에 대한 정치적 영향을 다루고 있음
     * 농지 전환에 대한 의문 제기. 덴마크와 네덜란드는 농업 수출 강국이며, 농지 위에 나무를 심는 것이 이해되지 않음
     * 인구 증가로 인해 식량이 필요하며, 농업 부문은 경제에 큰 기여를 하고 있음. 많은 국가가 덴마크의 농업 수출에 의존하고 있음
     * 과수원을 심는 것이 흥미로운 타협안일 수 있음
     * 나무가 자라면 벌목하여 목재를 활용하고, 새로운 나무를 심어 탄소를 더 많이 포집할 계획이 있는지 궁금함
     * 어떤 종류의 숲을 조성할 것인지에 대한 질문. 자연을 위한 것인지, 목재를 위한 것인지. 후자의 경우, 목재의 품질이나 목재 펠릿을 태우는 발전소의 증가 여부에 대한 의문이 있음
     * 벌목은 미래에 새롭게 생길 직업 중 하나로 흥미로움
     * 남유럽은 농지를 태양광 발전소로 전환 중이며, 새로운 숲은 상업적 이유로 빠르게 자라는 유칼립투스 단일 재배임. 그러나 야생 동물은 거의 없음. 유럽이 재조림되기를 바라지만, 식량 안보가 감소할 수 있음
     * 유럽의 많은 지역에서 20세기와 특히 19세기 이후로 숲이 증가함. 사람들은 더 이상 나무를 연료로 사용하지 않으며, 일부 과거의 목초지가 나무로 다시 채워짐. 체코는 현재 34%가 숲이며, 18세기 중반에는 20% 미만이었음
"
"https://news.hada.io/topic?id=17892","생성형 AI는 고객 경험을 개선할 잠재력이 있음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       생성형 AI는 고객 경험을 개선할 잠재력이 있음

     * 최근 조사에서 약 절반의 응답자가 생성형 AI 도구의 잠재력을 높이 평가함
     * 고객들은 독립적인 생성형 AI 기능보다 리뷰 요약과 같은 통합된 수동적 기능을 선호하는 경향을 보임
     * 온라인 쇼핑 고객들은 생성형 AI가 개인화된 경험을 제공할 수 있음을 이해하고 있으며, 다른 상황보다 개인정보 공유에 더 긍정적임
     * 생성형 AI는 어려운 구매 여정을 포함하여 효율적으로 고객 서비스를 제공하는 데 기여할 수 있음

설계 원칙 및 전략적 시사점

    설계 원칙 1: 기존 쇼핑 습관을 보완하는 AI 설계

     * 현재 흐름을 보완: 기존 방식에 더해 새로운 가치를 제공하는 방식으로 AI 도구 설계.
     * 챗봇 개선 기대: 기존 챗봇의 낮은 만족도를 극복하는 대화형 AI를 통한 개선 필요.
     * 명확한 실험 식별: 고객이 새로운 도구와 기존 흐름을 쉽게 구분할 수 있도록 실험의 목적과 제한을 명확히 설명해야 함.

    설계 원칙 2: 챗봇을 넘어 AI를 더 깊이 통합

     * 다양한 상호작용 활용: 반응형, 수동적, 능동적 상호작용을 통합해 쇼핑 과정에 적합하게 활용.
     * 직관적 사용자 경험: 기존 플랫폼에 자연스럽게 통합되도록 설계해 고객 학습 곡선을 줄임.
     * 효율성 강화: 자연어 검색과 필터링 같은 대화형 기능을 활용해 구매 시간을 단축.

    설계 원칙 3: 고객 데이터 가치 교환 재고

     * 개인화 강화: 고객 데이터를 활용해 개인화된 추천을 제공하고 탐색 경험을 풍부하게 함.
     * 피드백 루프 구축: 데이터 공유에 대한 고객의 통제권을 강화해 신뢰를 형성하고 알고리즘을 개선.

    설계 원칙 4: 데이터 출처 및 처리 투명성 확보

     * 명확한 데이터 처리: 데이터를 어떻게 사용하고 보호하는지 명확히 설명하여 고객 신뢰를 강화.
     * 빠른 피드백 반영: AI의 오류를 신속히 수정하며, 고객 피드백을 반영해 서비스 품질을 지속적으로 개선.
     * 사용자 중심 설계: 고객이 불필요한 콘텐츠를 쉽게 제거하거나 플래그 지정할 수 있도록 설계.

    설계 원칙 5: 고객 서비스 재구상

     * 개인화된 고객 관계 구축: 초기 고객 확보와 구매 후 관계를 더 자연스럽고 지속 가능하게 만듦.
     * 전문적 조언 제공: 생성형 AI를 활용해 전문적이고 대화형 조언을 제공, 기존 오프라인 경험을 온라인으로 확장.

고객 중심 접근법

     * 생성형 AI는 고객 경험 설계에서 혁신적인 도구를 제공하며, 고객들은 이러한 가능성에 대해 낙관적임.
     * 하지만 기술이 고객의 필요보다 앞서게 되는 경우를 피해야 하며, 고객의 요구를 우선적으로 해결하는 데 초점을 맞추는 것이 중요함.

   고객 입장에서 탐색 경험이 풍부해지는 게 좋은건가? 기분은 좋을 수 있겠는데, 필요한 거 사러 들어왔으면 그거만 빨리 사고 나가는게 고객 입장에선 좋은게 아닌지... 남자라 이렇게 생각하는건가?
"
"https://news.hada.io/topic?id=17936","Starlink Direct to Cell - 위성을 이용한 LTE 전화 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Starlink Direct to Cell - 위성을 이용한 LTE 전화 서비스

     * Starlink Direct to Cell은 전 세계 LTE 휴대폰에 텍스트, 음성, 데이터에 대한 원활한 접근을 제공하는 프로젝트
     * 2024년부터 텍스트 서비스, 2025년부터 음성 및 데이터 서비스가 시작될 예정
     * IoT 기기 연결도 2025년부터 지원 예정

주요 기능

     * 기존 LTE 휴대폰과 호환되며 하드웨어, 펌웨어 변경 및 특별한 앱 없이 사용 가능함.
     * Starlink 위성은 우주에서 셀폰 타워처럼 작동하는 eNodeB 모뎀을 탑재하여 네트워크 통합을 지원함.
     * 원격 지역에서도 연결성을 제공하여 통신 사각지대(Dead Zone)를 제거함.

SpaceX의 기술력

     * SpaceX는 세계에서 가장 진보된 로켓과 우주선을 제조 및 발사한 경험을 바탕으로 Direct to Cell 기능을 갖춘 Starlink 위성을 대량으로 배치할 계획임.
     * 초기에는 Falcon 9 로켓, 이후에는 Starship을 통해 위성을 발사할 예정임.
     * 위성은 궤도에서 레이저 백홀을 통해 Starlink 별자리와 즉시 연결되어 글로벌 연결성을 제공함.

모바일 및 IoT 연결 강화

     * Direct to Cell은 지상 커버리지 외부에서도 IoT 연결을 가능하게 하여 중요한 글로벌 산업의 수백만 기기를 연결함.
     * 추가 하드웨어가 필요 없으며, CAT-1, CAT-1 Bis, CAT-4 모뎀과 호환됨.
     * 2025년부터 승인된 국가에서 글로벌 파트너를 통해 플랜 제공 예정임.

글로벌 파트너

     * Direct to Cell을 사용하는 이동통신사는 모든 파트너 국가에서 상호 글로벌 접근을 제공받음.
     * 주요 파트너로는 T-Mobile(미국), Optus(호주), Rogers(캐나다), One NZ(뉴질랜드), KDDI(일본), Salt(스위스), Entel(칠레, 페루) 등이 있음.

        Hacker News 의견

     * Starlink과 SpaceX가 자체 브랜드의 태양광 충전 및 궤도에서 LTE를 제공하는 트레일 카메라를 판매하면 좋겠다는 의견이 있음. 이는 사냥꾼, 자연 애호가, 연구자들이 어디서든 하드웨어를 설치할 수 있게 해줌
          + SWVA 지역에서는 인구가 적어 밀집된 타워 커버리지가 없지만, 위성 연결을 통해 해결 가능함
          + 시장이 충분히 크지 않을까 걱정되지만, 최소 20명은 사슴 사냥 시즌에 2개 이상의 LTE 카메라를 사용함
     * Starlink를 통해 특정 통신사를 거치지 않고 전 세계 위성 기반 LTE를 직접 사용할 수 있으면 좋겠다는 의견이 있음
          + 전 세계를 위한 하나의 우주 기반 셀 플랜이 필요함
     * Elon Musk가 관여하는 모든 기업의 관계를 보여주는 다이어그램이 있으면 흥미로울 것이라는 의견이 있음
          + xAI가 Tesla의 FSD 구축을 돕기 위해 수십억 달러를 모금함
          + 그의 제국은 여러 기업으로 나뉘어 있지만, 대부분 그의 직접적인 통제 하에 있음
          + Berkshire Hathaway와 비교할 수 있음
     * 전 세계 연결성이 없는 것이 시대착오적이라는 의견이 있음
          + 이는 야생 구조 및 재난 대응에 명백히 좋음
          + 그러나 원격 지역에서 캠핑과 하이킹을 즐기는 사람들에게는 연결성이 없는 것이 더 좋을 수 있음
          + 완전한 연결성이 생기면 TikTok 인파로 인해 마지막 남은 진정한 원격지가 붐비게 될까 걱정됨
     * Starlink를 사용하기 위해 ATT에서 T Mobile로 전환하려 했으나, T Mobile for Business는 6개의 라인이 필요하다는 것을 알게 됨
     * T Mobile의 원격 지역 직접 셀 통신 솔루션이 외국에서 셀폰 통신사를 스푸핑하여 통화, SMS, 데이터를 중간자 공격할 수 있는지 궁금해하는 의견이 있음
     * SpaceX를 따라잡을 수 있는 기업이 있을지 궁금해하는 의견이 있음
          + Kuiper는 진전이 없고, 기존 운영자들은 LEO 별자리 확장에 소극적임
     * 2024년 뉴질랜드에서 현지 통신사와 협력하여 출시될 예정이라는 소식이 있었으나, 최근에는 별다른 소식을 듣지 못함
     * 특정 IMEI의 위치를 궤도에서 추적할 수 있는지 궁금해하는 의견이 있음
     * T-Mobile로 전환한 이유는 가족이 하이킹 시 Garmin InReach 장치에 의존하지 않게 되기를 기대했기 때문임
"
"https://news.hada.io/topic?id=17891","당신이 놓쳤을 OpenAI의 기능: Predicted Outputs","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 당신이 놓쳤을 OpenAI의 기능: Predicted Outputs

     * OpenAI는 최근 Predicted Outputs라는 강력한 기능을 공개했음
     * 기술 미디어에서 크게 주목 받지 못했지만, 이는 주목할 만한 가치가 있음
     * 이 기능은 API 응답 대기 시간을 줄이고, 미리 예상 가능한 출력물의 생성 속도를 크게 향상 시킬 수 있음

Predicted Outputs란 무엇인가?

     * Chat Completion API에서 주로 예측 가능한 응답이 있는 경우 응답 속도를 높이는 기능
     * prediction 매개변수를 사용하여 예상되는 출력을 모델에 제공하여 효율적으로 결과를 생성할 수 있음
     * 현재 gpt-4o 및 gpt-4o-mini 모델에서만 지원됨

Predicted Outputs의 작동 방식

     * 이미 대부분의 콘텐츠가 예상 가능한 경우 해당 콘텐츠를 모델에 예측값으로 제공 가능
     * 모델은 이 예측값을 사용해 응답 생성을 가속화하고 성능을 향상시킴

예제: Configuration 파일 업데이트

     * JSON Conf 파일을 업데이트하는 상황에서 Predicted Outputs를 활용 가능
     * 기존 파일 전체를 새로 생성하는 대신, 기존 파일을 예측값으로 제공하고 필요한 변경만 요청함

import OpenAI from ""openai"";

const config = `
{
  ""appName"": ""MyApp"",
  ""version"": ""1.0.0"",
  ""settings"": {
    ""enableFeatureX"": false,
    ""maxUsers"": 100
  }
}
`.trim();

const openai = new OpenAI();

const updatePrompt = `
Change ""enableFeatureX"" to true in the following JSON configuration. Respond only with the updated JSON, without any additional text.
`;

const completion = await openai.chat.completions.create({
  model: ""gpt-4o"",
  messages: [
    { role: ""user"", content: updatePrompt },
    { role: ""user"", content: config }
  ],
  prediction: {
    type: ""content"",
    content: config
  }
});

console.log(completion.choices[0].message.content);

예제 : 스트리밍 및 Predicted Outputs

     * 스트리밍 응답을 필요로 하는 애플리케이션에서는 Predicted Outputs가 대기 시간을 더욱 줄여줌

import OpenAI from ""openai"";

const config = `...`; // 기존 JSON 구성 파일

const openai = new OpenAI();

const updatePrompt = `...`; // 기존 요청 프롬프트

const completion = await openai.chat.completions.create({
  model: ""gpt-4o"",
  messages: [ /* ... */ ],
  prediction: {
    type: ""content"",
    content: config
  },
  stream: true
});

for await (const chunk of completion) {
  process.stdout.write(chunk.choices[0]?.delta?.content || """");
}

개발자를 위한 팁

     * 멋진 점은 사용하기 위해 거의 아무것도 필요하지 않다는 것
     * 그냥 기존 API 요청에 단순히 새로운 매개변수를 추가하면 됨

제약 사항

     * 모델 호환성: gpt-4o 및 gpt-4o-mini 모델에서만 사용 가능
     * 비용: 거부된 예측 토큰도 생성된 토큰과 동일한 비용이 부과됨. 비용 관리를 위해 rejected_prediction_tokens를 모니터링해야 함
     * 지원되지 않는 매개변수:
          + n (1보다 큰 값)
          + logprobs
          + presence_penalty (0보다 큰 값)
          + frequency_penalty (0보다 큰 값)
          + max_completion_tokens
          + tools (함수 호출 불가)
     * 모달리티 제한: 텍스트 모달리티만 지원하며, 오디오 입력 및 출력은 불가능함

결론

     * OpenAI의 Predicted Outputs는 AI 응용 프로그램에서 공통적으로 발생하는 지연 문제를 해결하는 혁신적인 도구임
     * 예측 가능한 출력을 제공하여 응답 시간을 단축하고 사용자 경험을 향상시킴

   LMQL 비슷한 느낌이군요
"
"https://news.hada.io/topic?id=17911","Autoflow - 그래프 RAG 기반 대화형 지식 베이스 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Autoflow - 그래프 RAG 기반 대화형 지식 베이스 도구

     * TiDB Vector와 LlamaIndex, DSPy 위에 구축된 오픈 소스 GraphRAG(지식 그래프)
     * Perplexity 스타일 대화형 검색 페이지: 고급 웹사이트 크롤러가 내장되어 있어 공식 및 문서 사이트를 쉽게 탐색하고, 사이트맵 URL 스크래핑을 통해 검색 과정을 간소화함
     * 지식 그래프 편집 기능: 정보를 추가하거나 부정확한 내용을 수정할 수 있어 검색 경험을 향상시키고 최신 정보를 제공
     * 임베드 가능한 JavaScript 스니펫: 간단한 JavaScript 코드 스니펫을 복사하여 웹사이트에 대화형 검색 창을 쉽게 통합할 수 있음. 사이트의 오른쪽 하단에 배치되어 제품 관련 문의에 즉각적인 응답을 제공
     * Docker Compose를 사용하여 배포 가능 (4 CPU 코어와 8GB RAM 필요)

기술 스택

     * TiDB: 채팅 기록, 벡터, JSON 및 분석 데이터를 저장하는 데이터베이스
     * LlamaIndex: RAG 프레임워크
     * DSPy: 프로그래밍을 위한 프레임워크
     * Next.js: 프레임워크
     * shadcn/ui: 디자인
"
"https://news.hada.io/topic?id=17901","PKI.js - PKI 앱용 기능을 순수 JS로 구현한 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  PKI.js - PKI 앱용 기능을 순수 JS로 구현한 라이브러리

     * PKI 지원 애플리케이션을 구축하는 데 필요한 가장 일반적인 형식과 알고리듬의 Typescript 구현을 제공
     * 지원 기능
          + X.509 인증서(RFC 5280) 인증서 생성 및 검증
          + PKCS#10(RFC 2986): X.509 애플리케이션에서 가장 널리 사용되는 인증 요청 데이터 구조. 요청자가 특정 공개 키를 제어할 수 있음을 증명할 수 있도록 지원
          + Cryptographic Message Syntax (CMS, RFC 5652): X.509 애플리케이션에서 데이터 서명에 가장 많이 사용되는 데이터 구조. 서명에 필요한 모든 데이터를 손쉽게 포함하고 검증 가능하게 표현 가능
          + Time-Stamp Protocol (TSP, RFC 3161): 특정 시점 전에 데이터가 존재했음을 증명하는 데 가장 널리 사용되는 프로토콜. 서명 애플리케이션에서 활용되어 장기적으로 서명을 검증 가능하게 보장
     * 목표
          + 타입스크립트 및 객체 지향 구현
          + 암호화 구현이 포함되지 않고 대신 Web Crypto API를 활용
          + 브라우저와 Node/Deno에서 모두 똑같이 동작
"
"https://news.hada.io/topic?id=17984","GoogleLabs의 인공지능 기반 체스 GenChess","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GoogleLabs의 인공지능 기반 체스 GenChess

     * 아이디어를 플레이 가능한 체스 세트로 만들어주는 AI 실험
          + Gemini와 Imagen 3의 조합을 사용하여 사용자 지정 세트에 대한 아이디어를 창의적으로 해석한 다음, 온라인에서 대결할 수 있는 재미있는 테마의 컴퓨터 상대를 생성
     * 프롬프트를 통해 나만의 커스텀 체스 세트를 생성하고, 테마에 따르는 플레이어를 생성하여 플레이 가능 (난이도/타이머 선택)

   World of Warcraft 기반으로 만들라고 했더니, 아는 캐릭터들로 주요 말들을 생성해주네요.
   그러고는 상대방은 자동으로 League of Legends 테마를 잡아서 싸우게 합니다 ㅎㅎ

        Hacker News 의견

     * 유럽 연합에서 사용할 수 없는 이유는 체스를 빙자하여 수집하는 데이터 때문일 가능성이 있음
     * 체스를 플레이하는 시점에서의 시각이 불편하다는 의견이 있으며, 설정에서 시점을 변경할 수 있는 옵션이 있음
          + 이 옵션을 더 눈에 띄게 해야 한다는 의견이 있음
     * 서비스에 접근할 수 없는 사람들을 위한 대체 링크 제공
     * 이 도구는 18세 미만 사용자나 특정 국가 및 지역에서는 사용할 수 없음
     * Android의 Chrome에서 ""GenChess의 요청이 Google의 정책을 준수하지 않음""이라는 오류 메시지를 받았다는 경험 공유
     * AI 관련 기능을 모두 갖춘 멋진 도구이지만, 일부 디자인 선택이 아쉬움
          + Armored Core에서 영감을 받은 체스 세트를 요청했으나, 결과물이 기대와 다름
          + 체스 말들이 카메라를 직접 바라보거나 체스판에 제대로 놓이지 않는 경우가 있음
     * 저작권 침해에서 영감을 받은 창의적인 체스 세트를 요청했을 때의 결과물 설명
     * 체스를 플레이하기에 가장 좋은 곳은 여전히 Lichess.org라는 의견
     * 이 도구가 단순한 이미지 생성기인지 궁금해하는 의견
     * 특정 국가에서 ""다른 프롬프트를 시도해 보세요""라는 오류 메시지를 받았다는 경험 공유
          + 뉴질랜드나 호주에서는 오류가 발생하지만, 영국에서는 정상 작동함
"
"https://news.hada.io/topic?id=17884","Vercel, 코드 검색 서비스 Grep 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Vercel, 코드 검색 서비스 Grep 인수

   Vercel이 코드 검색 서비스인 Grep을 인수했습니다. Grep은 50만 개 이상의 공개 Git 레포지토리를 대상으로 빠른 코드 검색을 제공하는 서비스로 매우 빠른 코드 검색을 제공해 개발자들이 빠르게 디버그하거나 예제로부터 빠르게 학습할 수 있도록 도와주는 서비스입니다. 예를 들어, React에서 useActionState라는 hook을 어떻게 사용하는지 확인하고 싶다면 Grep을 통해 빠르게 예제를 찾을 수 있습니다.

   이번 인수를 통해 Grep의 창립자인 Dan Fox가 Vercel의 AI 팀에 함류하여 코드 검색의 새로운 가능성을 열어나갈 예정입니다.

   어쩐지 갑자기 UI가 바뀌었더라니,,

   GitHub Search랑 차별점이 있을까요?

   깃헙은 검색 이상하던데요..

   이미 구축해놓은 데이터가 의미 있는거 아닐까요?
"
"https://news.hada.io/topic?id=17942","미 법무부의 구글 크롬 매각 명령에 대한 구글의 반대 성명 게시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  미 법무부의 구글 크롬 매각 명령에 대한 구글의 반대 성명 게시

   미 법무부의 크롬 매각 명령 ( https://news.hada.io/topic?id=17840 ) 에 대해, Google에서 반대성명을 공개했습니다.

   법무부의 개입(권한 남용)이 소비자에게 도움되지 않으며, 구글 및 미국의 기술혁신에 걸림돌이 될 가능성이 높다고 주장하고 있습니다.

   또한 다음달에 Google에서 법원에 다른 제안(Proposal)을 제시할 예정이라고 합니다.
"
"https://news.hada.io/topic?id=17888","PHP 8.4 릴리즈릴리즈

     * 속성 훅, 비대칭 가시성, 업데이트된 DOM API, 성능 향상, 버그 수정 및 일반적인 정리가 포함
          + IDE와 정적 분석 도구가 네이티브로 이해할 수 있는 계산 속성을 지원하는 속성 훅 제공
          + 속성의 읽기와 쓰기 범위를 독립적으로 제어할 수 있는 비대칭 가시성 도입.
     * 새로운 기능
          + #[\Deprecated] 속성을 통해 사용자 정의 함수, 메서드 및 클래스 상수에 PHP의 기존 사용 중단 메커니즘을 적용 가능.
          + 새로운 DOM API는 HTML5 문서 파싱을 위한 표준 준수 지원을 포함하며, DOM 기능의 여러 오래된 호환성 버그를 수정함.
          + BcMath\Number 객체를 사용하여 임의의 정밀도 숫자를 객체 지향적으로 처리 가능.
          + array_find(), array_find_key(), array_any(), array_all() 등의 새로운 배열 함수 제공.
          + PDO의 새로운 하위 클래스 Pdo\Dblib, Pdo\Firebird, Pdo\MySql, Pdo\Odbc, Pdo\Pgsql, Pdo\Sqlite 제공.
          + 새로 인스턴스화된 객체의 속성과 메서드를 괄호 없이 접근 가능.
     * 새로운 클래스, 인터페이스 및 함수
          + 새로운 Lazy Objects, IR Framework 기반의 JIT 구현.
          + request_parse_body() 함수, bcceil(), bcdivmod(), bcfloor(), bcround() 함수 추가.
          + DateTime::createFromTimestamp(), DateTime::getMicrosecond(), DateTime::setMicrosecond() 등의 메서드 추가.
          + mb_trim(), mb_ltrim(), mb_rtrim(), mb_ucfirst(), mb_lcfirst() 함수 추가.
          + pcntl_getcpu(), pcntl_getcpuaffinity(), pcntl_getqos_class(), pcntl_setns(), pcntl_waitid() 함수 추가.
          + ReflectionClassConstant::isDeprecated(), ReflectionGenerator::isClosed(), ReflectionProperty::isDynamic() 메서드 추가.
          + http_get_last_response_headers(), http_clear_last_response_headers(), fpow() 함수 추가.
          + XMLReader::fromStream(), XMLReader::fromUri(), XMLReader::fromString(), XMLWriter::toStream(), XMLWriter::toUri(), XMLWriter::toMemory() 메서드 추가.
          + grapheme_str_split() 함수 추가.
     * 사용 중단 및 호환성 깨짐
          + IMAP, OCI8, PDO_OCI, pspell 확장 기능이 번들에서 제거되어 PECL로 이동됨.
          + 암시적으로 nullable한 매개변수 유형이 사용 중단됨.
          + 클래스 이름으로 _ 사용이 사용 중단됨.
          + 0을 음수의 거듭제곱으로 올리는 것이 사용 중단됨.
          + 잘못된 모드를 round()에 전달하면 ValueError 발생.
          + 확장 기능의 클래스 상수가 이제 타입이 지정됨.
          + GMP 클래스가 이제 final로 지정됨.
          + MYSQLI 관련 상수와 함수가 사용 중단됨.
          + stream_bucket_make_writeable()와 stream_bucket_new()가 이제 StreamBucket 인스턴스를 반환함.
          + exit()의 동작 변경.
          + E_STRICT 상수가 사용 중단됨.
     * 성능 및 문법 개선
          + 성능 향상, 문법 개선, 타입 안전성 향상.
          + PHP 8.4로 업그레이드 권장.

   워드프레스, 라라벨 덕분에 최소한 굶어죽지는 않을 언어

   워드프레스, 라라벨 망해도 굶어죽지 않을 언어입니다.

        Hacker News 의견

     * $this->countryCode가 무한 재귀를 일으키지 않는 이유는 RFC에 명시되어 있음. PHP의 속성 접근이 맥락에 따라 다른 의미를 가질 수 있다는 점이 마법처럼 느껴짐.
          + 속성 접근이 메서드 호출로 변환되는 언어의 마법이 있음.
          + PHP 사용자는 아니지만, 이러한 복잡성이 언어에 추가되는 것이 우려됨.
     * PHP 프로그래머로서 PHP의 방향성에 대해 걱정됨. 새로운 언어 기능들이 의심스러운 이득을 위해 언어 복잡성을 높임.
          + 속성 후크는 속성 접근이 메서드 호출로 변환됨을 의미함.
          + JS와 Perl에서 이와 유사한 기능을 사용했지만, 명시적인 메서드가 더 명확하고 확장하기 쉬움.
     * PHP가 여전히 번창하고 있음에 기쁨을 느낌. 2021년에는 Nikita Popov의 이탈로 걱정했지만, PHP는 여전히 좋은 언어로 많은 개발자들이 활동 중임.
     * 속성 후크에 가장 기대됨. C#에서 그리웠던 기능임.
          + __get()과 __set()을 사용해 흉내내기도 했지만, 이는 무겁고 많은 PHPDoc 주석이 필요했음.
     * 배열 접근자 오버로딩을 보다가 ""Property Hooks""를 발견함. 최근에 추가된 기능임을 알고 놀람.
          + 다른 언어의 표현력과 문법적 설탕이 PHP에 도입된 것을 기쁘게 생각함.
     * PHP의 새로운 릴리스에 만족함. 클로저에 대한 더 나은 스택 추적, 성능 개선, HTML5 지원, 레이지 객체 등 많은 개선이 이루어짐.
     * bcmath 객체에 대해 기대됨. 산술 연산자보다는 래퍼 클래스 없이 데이터 타입 검사를 할 수 있게 된 점이 좋음.
     * PHP가 여전히 발전하고 있음에 기쁨. 프리랜서로 시작했을 때의 기억이 떠오름.
     * PHP의 새로운 array_find 함수는 언어 설계의 문제를 보여줌. 기존의 array_search와 유사하지만 인수 순서가 다름.
          + 다른 언어들이 이러한 함수를 가지고 있다는 이유로 PHP에도 추가되었지만, 대부분의 언어는 이를 전역 함수로 만들지 않음.
     * ""public private(set)""이 이해되지 않음. ""readonly public""이 더 적절해 보임.
          + Swift의 private(set)과 유사해 보임.
"
"https://news.hada.io/topic?id=17908","HN 공개: 컴포스트 모니터링 기술 오픈소스화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HN 공개: 컴포스트 모니터링 기술 오픈소스화

Monty Home Device Hacking Guide

   Monty Home Device Hacking Guide는 Raspberry Pi를 사용하여 Monty Home BLE 장치의 기능을 확장하는 방법을 안내하는 저장소임. 이 장치는 원래 퇴비 모니터링을 위해 설계되었으며, 온도, 습도 등 환경 데이터를 수집함. 이 가이드를 통해 데이터를 검색, 표시, 자동화하는 방법을 배울 수 있음.

  개요

     * 이 가이드는 BLE 장치, IoT 애플리케이션, 환경 모니터링에 관심 있는 사람들을 위해 설계됨.
     * Monty Home 장치는 BLE를 통해 실시간 데이터(온도, 습도, 배터리 수준 등)를 제공함.
     * Python, BLE, Raspberry Pi를 사용하여 Monty Home 장치와 상호작용하는 세 가지 프로젝트가 포함됨.

  프로젝트

    프로젝트 1: 온도 기반 LED 제어

     * 목적: Monty Home 장치의 온도 데이터를 사용하여 Raspberry Pi의 LED를 제어함. 온도가 특정 임계값을 초과하면 LED가 경고를 표시함.
     * 습득 기술: GPIO 제어 설정, BLE 데이터 쿼리, 기본 Python 프로그래밍 및 조건 처리
     * 필요 하드웨어: BLE 지원 Raspberry Pi, LED 및 330옴 저항

    프로젝트 2: I2C 디스플레이에 온도 및 습도 표시

     * 목적: Monty Home 장치의 실시간 온도 및 습도 데이터를 Raspberry Pi에 연결된 OLED 화면에 표시함.
     * 습득 기술: I2C 장치 작업, SSD1306 OLED 디스플레이를 사용한 동적 데이터 표시, BLE 데이터 검색 및 디스플레이 업데이트 구현
     * 필요 하드웨어: BLE 지원 Raspberry Pi, SSD1306 OLED 디스플레이

    프로젝트 3: IFTTT를 통한 온도 경고

     * 목적: Monty Home 장치의 온도가 특정 임계값을 초과하면 Raspberry Pi가 IFTTT를 통해 알림을 보내도록 설정함.
     * 습득 기술: IFTTT와의 IoT 자동화 통합, requests 라이브러리를 사용한 HTTP 요청 전송, BLE 데이터와 클라우드 기반 알림 결합
     * 필요 하드웨어: Wi-Fi 지원 Raspberry Pi, IFTTT 계정

  설정

    하드웨어 요구 사항

    1. Raspberry Pi (Zero 2 또는 BLE 지원 모델)
    2. Monty Home BLE 장치
    3. 각 프로젝트에 필요한 추가 하드웨어 (LED, OLED 디스플레이, IFTTT 계정 등)

    소프트웨어 요구 사항

    1. Raspberry Pi OS: Raspberry Pi OS Lite(헤드리스) 또는 Raspberry Pi OS with Desktop(그래픽 인터페이스) 설치
    2. Python 3: Python 3 및 pip 설치
    3. 라이브러리:
          + Bleak: BLE 통신용
          + Requests: IFTTT 통합용
          + Adafruit CircuitPython SSD1306: OLED 제어용
          + Pillow: OLED 이미지 조작용

  BLE 명령어

     * Monty Home 장치와 상호작용하기 위해 사용되는 명령어들임. 각 명령어는 특정 데이터를 요청하거나 작업을 수행함.
     * 예: ;QT\r\n은 NTC 센서의 온도 읽기를 반환함.

  코드 실행

     * 각 프로젝트는 BLE 연결을 설정하고 쿼리를 보내고 데이터를 처리하는 Python 스크립트를 포함함.
     * 스크립트 실행 방법:
         1. Raspberry Pi에서 터미널 열기
         2. 프로젝트 폴더로 이동: cd /path/to/project
         3. 스크립트 실행: python3 project_script.py

  커스터마이징

    BLE 명령어 조정

     * Monty Home 장치에서 다양한 유형의 데이터를 검색하기 위해 코드에서 BLE 명령어를 수정할 수 있음.

    알림 핸들러 확장

     * 여러 유형의 데이터를 처리하기 위해 notification_handler 함수 내에 조건을 추가하여 다양한 읽기를 디코딩하고 표시할 수 있음.

    다른 플랫폼과의 통합

     * 실시간 데이터 시각화, 로깅 또는 추가 자동화를 위해 IoT 플랫폼이나 대시보드에 데이터를 통합하는 것을 고려할 수 있음.

  추가 자료

     * Raspberry Pi에서의 Python
     * Raspberry Pi에서의 BLE 가이드
     * IFTTT Webhooks 문서
     * Adafruit CircuitPython SSD1306 가이드

  기여

     * 풀 리퀘스트 제출, 문제 보고, 기능 제안 등을 환영함. 이 가이드를 개선하고 새로운 프로젝트를 추가하는 데 기여할 수 있음.

        Hacker News 의견

     * 한 사용자는 말 마구간에서 나온 퇴비 더미에서 감자와 당근을 재배해 본 경험을 공유하며, 감자는 잘 자랐지만 당근은 물 부족으로 잘 자라지 않았음을 언급함
          + ESP8266 기반 온도 센서를 사용하여 퇴비의 온도를 모니터링하고자 하는 계획을 설명함
          + 온도 센서를 IP67 인클로저에 넣고 태양 전지와 함께 퇴비 더미 위에 설치할 계획을 세움
     * 다른 사용자는 전자 모니터링을 통해 퇴비의 품질을 개선할 수 있는 규모에 대해 궁금해하며, 대규모로 진행해야 할 것 같다고 의견을 제시함
          + 가정용 디자인의 버섯 느낌을 좋아한다고 언급함
     * 또 다른 사용자는 저렴한 센서를 사용한 환경 모니터링 경험을 공유하며, 센서의 반복성 문제와 CO2 센서의 노이즈 내성 문제를 언급함
          + 신뢰할 수 있는 구성 요소를 기반으로 프로젝트를 진행하고 싶다고 밝힘
     * 한 사용자는 소규모 퇴비 모니터링의 확장 가능성을 환영하며, Gathering for Open Ag Tech 커뮤니티에 관심을 가질 수 있다고 언급함
     * 다른 사용자는 퇴비의 온도를 측정하는 간단한 방법을 선호하며, 온도가 45도 이상이면 열성균이 활동 중임을 알 수 있다고 설명함
     * 또 다른 사용자는 식물 모니터링 시스템을 만들고 싶다는 생각을 공유하며, 토양 구성, 영양소 수준, 습도 등을 측정하는 센서를 추천받고 싶다고 언급함
     * 한 사용자는 퇴비 모니터링을 통해 얻은 센서 데이터의 실용성에 대해 궁금해하며, 온도와 습도 외에 가스 조성이 C/N 비율에 미치는 영향이나 퇴비가 무산소 상태로 가는지 여부를 확인할 수 있는지 질문함
          + 모니터링 경험을 통해 자신의 퇴비 관리 방식을 변경했는지에 대해 묻기도 함
     * Monty Monitor 제품에 대한 정보를 추가로 제공함
     * 한 사용자는 퇴비 모니터링을 위해 열전쌍을 찾고 있었다고 언급함
     * HomeAssistant와의 통합을 위한 작업이 진행 중인지 궁금해하는 사용자가 있음
"
"https://news.hada.io/topic?id=17937","Scooter - 터미널용 인터랙티브 Find & Replace 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Scooter - 터미널용 인터랙티브 Find & Replace 도구

     * GUI 에디터에서 사용하는 찾기/치환 기능을 터미널에서 UI로 제공
     * 여러개의 파일에 대해 동작하며, 개별적으로 처리 가능
          + 고정 문자열 또는 정규식을 사용해 검색하고, 치환 내용을 입력한 뒤, 개별적으로 치환 여부를 선택
          + 파일 경로에 대한 정규식을 지정해 특정 파일만 검색 가능
     * 검색 후 파일이 변경된 경우, 해당 변경에 대한 치환이 자동으로 제외되며, 이러한 사례는 마지막에 별도로 표시됨
     * .gitignore 및 .ignore 파일을 지원
     * 기본적으로 숨김 파일을 무시하며, --hidden 플래그로 포함 가능
     * 정규식의 캡처 그룹을 치환 문자열에 활용 가능 : (\d) - (\w+) 검색하여 ($2) ""$1""로 치환하기
     * Rust로 작성됨. 윈/맥/리눅스용 바이너리 제공
"
"https://news.hada.io/topic?id=17914","'사무실 복귀' 라는 거짓말","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            '사무실 복귀' 라는 거짓말

  재택근무의 효용성과 오피스 복귀의 비효율성

     * 재택근무에 대한 비판적인 태도를 정당화하려는 논리적 접근이 종종 피상적임
          + ""협업"", ""사회적 상호작용"" 등의 명분으로 복귀를 요구하지만, 이는 종종 사무실 공간 유지를 위한 핑계로 느껴짐
          + 협업의 필요성이 있는 경우에는 특정 상황에 따라 오피스를 이용하면 충분하며, 고정적인 출근이 불필요함
     * 사무실에서 이루어지는 일은 이미 대부분 디지털화되어 있으며 재택근무로도 충분히 효율적
          + 데이터 입력, 이메일, 보고서 작성, 디지털 문서 관리 등은 오피스에서 이루어질 필요가 없음
          + 동료들과의 상호작용 역시 Teams나 이메일, 전화로 가능함
     * FAANG 같은 대기업의 정책을 맹목적으로 따르려는 태도에 대한 비판
          + 해당 기업들과 성격이 다른 조직에서도 이와 같은 이유로 출근을 강요하는 것은 어리석음

  재택근무를 반대하는 근거의 모순

     * 출근 요구를 사회적 상호작용 증대와 고립 방지를 이유로 정당화하는 것은 설득력이 부족
          + 진정으로 사무실에서의 사회적 관계를 원하는 사람은 자발적으로 출근할 수 있음
          + 반면, 재택근무가 더 많은 사람들에게 더 나은 사회적 관계를 유지할 수 있는 환경을 제공함
          + 출근은 피로와 스트레스를 증가시키고, 개인의 삶과의 균형을 악화시킴
     * 사무실에서의 출근은 장애인 및 만성 질환자들에게는 특히 부담
          + 출근이 오히려 고립감을 증가시키고, 질병 감염 등의 위험을 초래함
          + 예를 들어, 크리스마스 행사에서 코로나 감염 사례 발생

  재택근무의 필요성과 장애인 및 취약계층에 미치는 긍정적 영향

     * 재택근무는 많은 사람들에게 더 나은 작업 환경과 생산성을 제공
          + 가족, 집안일, 교육, 취미 활동 등 다양한 개인적 책임을 병행 가능
          + 조용하고 중단 없는 환경에서 업무에 집중 가능
          + 스트레스와 번아웃 감소, 사랑하는 사람들과 더 많은 시간을 보낼 수 있음
     * 장애인 및 만성 질환자들에게 재택근무는 고용 유지의 중요한 수단
          + 재택근무 덕분에 장기 결근 없이 업무를 지속할 수 있었던 개인적인 사례 공유
          + 이는 팀원들이 추가 업무를 부담하지 않도록 하여 조직 전체에 긍정적 영향을 미침
     * 재택근무는 엘리베이터와 같은 접근성 요소로 간주되어야 하며, 이를 제한하는 것은 차별적임

  직장 내 불공정한 대우와 동료들의 헌신

     * 동료들이 지난 몇 년간 더 많은 업무와 책임을 맡으며 노력해 왔음에도 불구하고 보상이 부족
          + 인력 부족, 임금 동결 등의 문제가 지속됨
          + 개인적으로도 질병에도 불구하고 성과를 인정받았으나, 올해는 전 직원에게 성과 보너스가 지급되지 않음
     * 재택근무가 더 이상 허용되지 않는다면 퇴사를 고려할 것임
          + 이는 젊고 유능한 인재들의 이탈을 초래할 수 있음
          + 노령화된 인력 구조에서 이는 조직의 미래를 위협할 수 있음

        Hacker News 의견

     * FAANG 직장을 그만두고 완전 원격 근무 회사에 합류했음. 급여는 50% 이상 줄었지만 삶의 질이 크게 향상되었음. 출퇴근 시간 절약과 생활 단순화로 만족감을 느끼고 있음
     * RTO(사무실 복귀)에 대한 다양한 의견을 들었음. 사무실에 있는 것을 가끔 좋아하지만 출퇴근은 싫어함
     * RTO는 부동산 문제가 아니라 권력 문제임. 대유행 기간 동안 직원들이 더 많은 권한을 가졌고, 이제 기업들이 이를 되찾으려 하고 있음
     * 사무실 근무가 예상보다 나았음. 동료들과의 관계가 원격 근무보다 더 깊어졌음. 하지만 근무 장소 선택의 유연성을 원함
     * 오픈 오피스에서는 대부분 Slack으로 소통하며, 개인 공간을 침범하는 사람들이 있어 집중하기 어려움
     * 100% 재택근무를 선호하지만, 팀 리더로서 주니어를 원격으로 빠르게 훈련시키기 어려움. 현장에서는 문제 해결과 습관 교정이 더 빠름
     * 주니어들은 필요한 기술을 알지 못하거나 우선순위를 정하기 어려워함. 이들을 돕기 위해서는 대면 상호작용이 필요함
     * 사무실 출근은 비생산적이며 시간 낭비임. 회사가 생산성을 희생하면서까지 협업을 가장하려 한다면 어쩔 수 없음
     * 원격 근무의 장점 중 하나는 좋은 회사가 없는 도시에서 살 수 있는 가능성임. 같은 나라 내에서 원격 근무를 허용하는 것이 큰 장점임
     * 원격 근무가 불가능한 직종의 사람들을 생각해야 함. 사무실 복귀에 대한 불만을 최소 임금으로 일하는 사람들 앞에서 크게 말하는 것은 불편함
     * “필요한 것을 제공하고 빼앗겠다고 위협하는 것은 장애인 차별임”이라는 메시지가 가장 인상적이었음. 엘리베이터와 같은 접근성 기능을 빼앗지 않듯이 원격 근무도 그렇게 해야 함
"
"https://news.hada.io/topic?id=17950","RFC 35140: HTTP Do-Not-Stab (2023) 정책o-Not-Stab (2023) 정책

개요

     * 이 문서는 사용자가 웹사이트에 찔리지 않기를 원하는지를 나타낼 수 있는 제안된 HTTP 헤더인 Do-Not-Stab 헤더의 문법과 의미를 정의함.
     * 서비스가 이러한 사용자 선호를 준수하는 방법에 대한 표준을 제공함.

소개

     * 지난 50년 동안 주변 기기의 발전으로 인해 웹사이트가 사용자를 찌를 수 있게 되었음.
     * 일부 사용자는 가슴에 칼이 꽂히는 것에 불편함을 느끼며, 이 헤더는 이러한 사용자가 개인 선호를 표현할 수 있게 함.
     * 악의적인 행위자가 아닌 대부분의 회사는 법을 준수하며, 요청 시 찌르기를 중단할 것임.
     * 이 표준은 사용자가 법적으로 요구되는 경우를 제외하고 모든 찌르기에서 쉽게 벗어날 수 있는 방법을 제공함.

문법

     * 헤더는 오직 하나의 형태, Do-Not-Stab: 1을 가짐.
     * 헤더가 없으면 사용자가 찔리기를 원한다는 명확한 선호를 나타냄.

기본값

     * 사용자 에이전트는 Do-Not-Stab: 1을 기본 선호로 채택해서는 안 됨.
     * 사용자 에이전트는 사용자가 찔리기를 원하는지 여부를 결정할 위치에 있지 않으며, 이는 사용자가 명시적으로 선택해야 함.

시행

     * Microsoft는 EEA(유럽 경제 지역) 내에서 Do-Not-Stab 헤더를 지원할 것을 약속함.
     * EEA 외부에서는 헤더 지원이 진행 중이며, 설정되어 있어도 찔릴 수 있음.

예외

     * 상업적 이익이 안전 문제보다 클 때 Do-Not-Stab 헤더의 예외가 허용됨.
          + 사용자가 찔리기를 동의한 경우 (동의했는지 모를 수도 있음).
          + 정부가 요청한 찌르기.
          + 사용자를 죽일 가능성이 없는 찌르기.
          + 주주가 원한 경우.

        Hacker News 의견

     * 개인의 자율성을 보호하는 책임이 기관이나 규제자에서 개인 사용자로 이동하는 사회적 변화가 있음. 자발적 준수는 재정적 압박 앞에서 시작하기 어려움
          + 개인의 컴퓨터 사용 자유를 적극적으로 방어하는 것이 필요함
     * Do-Not-Stab 헤더는 더 이상 사용되지 않음. General Assault Control이라는 비표준 대안이 있음
          + 미국의 법적 요구로 인해 기본적으로 활성화되지 않음. 사용자가 명시적으로 선택 해제해야 함
     * 이 기능은 기본적으로 비활성화되어 있지만, 일부 브라우저에서 구현됨. 사용자는 웹 서버에서 GAC 헤더 지원을 요청할 수 있음
     * 유럽의 관료주의가 투명하게 드러남. 유럽의 비즈니스 환경이 SaaS 회사에 적합하지 않음
     * 웹 기반 스태빙에 대한 EU 및 CA 규정을 준수하는 스태빙 동의 배너를 제공함
     * Do Not Track 헤더는 2009년에 제안되었고, Mozilla Firefox가 처음으로 구현함
     * 기업은 사용자를 싫어하지 않음. 그들은 사용자의 돈을 좋아하며 사용자에 대한 무관심을 가짐
     * Do-Not-Shoot, Do-Not-Rape, Do-Not-Stone에 대한 지원은 여전히 없음
     * RFC는 의견 요청임. 의견을 남기는 방법과 대상에 대한 궁금증이 있음
     * 이 헤더는 결국 기업이 사용자를 공격하는 데 사용될 수 있는 또 다른 정보가 될 수 있음
"
"https://news.hada.io/topic?id=17916","Terminal3D - 3D 객체(.obj)를 터미널에서 보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Terminal3D - 3D 객체(.obj)를 터미널에서 보기

     * .obj 파일을 읽어서 터미널에서 렌더링
     * 점자(⡟)와 블록(▛) 문자로 렌더링
     * 와이어프레임과 정점(Vertices) 모드 중에서 선택가능
     * 다른 3D 소프트웨어처럼 마우스를 이용하여 회전/확대하며 보기 가능
          + 스크롤:Zoom, 클릭 이동:Rotate, 시프트 클릭 이동:Pan
     * Rust 오픈소스

   너무 좋습니다!!!
"
"https://news.hada.io/topic?id=17988","nrm - npm registry manager","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       nrm - npm registry manager

     * 서로 다른 npm 레지스트리간에 빠르고 쉽게 전환 가능
          + npm, cnpm, taobao, nj(nodejitsu) 지원
     * .yarnrc 에 자신의 개인 registry 추가 가능(프로젝트별 또는 개인 HOME의 .yarnrc 가능)
     * nrm ls 레지스트리 리스트 보기
     * nrm use cnpm 사용할 레지스트리 지정
     * 다양한 명령 지원 : login, set/del-scope, publish, test 등

   여기 소개되는 프로그램이나 라이브러리 매번 homebrew 찾아보고 없으면 추가하는데 참 좋은것들이 많네요.

   brew install nrm

   https://formulae.brew.sh/formula/nrm

   아, 이거 좋네요
"
"https://news.hada.io/topic?id=17956","Series B 단계에서 성공하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Series B 단계에서 성공하는 법

     * 요즘 스타트업들에게 ""성장 단계 갭(growth-stage gap)"" 은 무섭고도 큰 도전 과제임
          + 초기 단계에서 성공적으로 자리 잡은 스타트업이 성장 단계로 넘어가면서 겪게 됨
     * 많은 회사들이 시리즈 B 유치전에 사라짐. 정답은 없지만, 성공적인 B 단계에 도달할 때 항상 적용되는 것들이 있음

Series B 성공의 세 가지 핵심 원칙

  Rule 1. 실질적인 성과를 보여주세요. (Show me the traction)

     * 초기 단계 투자자와 달리 Series B 투자자는 실질적인 고객 및 매출 성과에 초점을 둠
     * TAM(Total Addressable Market) 설명이나 시장 배경보다는 구체적인 계약과 실적을 강조해야 함
     * 투자자가 구체적인 실적을 파악하기 위해 긴 프레젠테이션을 살펴보게 하지 말고, 핵심 내용을 앞에 배치해야 함
     * 예: Formo
          + Formo는 동물 없는 유제품을 만드는 푸드 테크 스타트업으로, 정밀 발효 기술을 사용
          + 2021년 투자 당시 기술과 창업자들의 잠재력을 긍정적으로 평가받음
          + B 라운드에서는 전체 식품 시장의 크기를 강조하는 대신 실질적이고 구체적인 성과에 초점을 맞췄음
               o Rewe라는 유럽 주요 슈퍼마켓 체인(21개국, 15,000+ 매장)과 소매 계약 체결 사례를 중심으로 피칭
               o 추가로 계약 대기 중인 10개 이상의 소매 파트너 목록을 공개하며 성장 가능성을 입증

     핵심 교훈: 실제 고객과 매출 성과를 앞세워 신뢰를 구축.

     * 초기 단계에서는 배경 설명이나 시장 규모 강조가 유효할 수 있으나, 후기 단계에서는 실질적인 고객 확보와 거래 실적을 강조해야 함
     * 실제 계약과 수익 창출을 보여주는 것이 중요하며, 이는 투자자에게 즉각적인 신뢰를 줄 수 있음
     * 사업의 목적은 궁극적으로 수익을 창출하는 것이므로, 투자자와의 대화에서도 이를 최우선으로 두어야 함

  Rule 2. 단위 경제(unit economics)를 간과하지 마세요. (하드웨어 스타트업도 예외 아님)

     * 하드웨어 스타트업은 개발이 어렵다는 점을 강조할 수 있으나, 투자자들은 난이도에 점수를 주지 않음. 매출 대비 비용 구조를 명확히 제시해야 함
     * Series B 투자자는 긍정적인 매출 총이익률과 단위당 수익성을 중점적으로 평가
     * 수치가 기대치에 미치지 못하더라도 이를 개선할 명확한 계획을 제시해야 함
     * 예: unspun
          + unspun은 의류 스타트업으로, 2년 만에 제로 웨이스트 방식으로 청바지를 제작하는 로봇 프로토타입 개발에 성공
          + 해외 대안보다 저렴한 제품을 생산하고, 미국 내 제조로 공급망 문제를 최소화
          + Walmart 등 주요 소매업체들과의 계약 체결로 빠른 성장 가능성을 입증
          + 강력한 매출총이익률, 효율적인 투자 회수 기간, 잘 관리된 하드웨어 비용 등을 통해 수익성 있는 비즈니스 모델을 보유
          + 빠른 확장, 저렴한 비용, 높은 수익을 동시에 달성하며 전통적인 패스트 패션 모델을 능가하는 성과를 보여줌
     * 다른 사례와 대안
          + 모든 스타트업이 이 단계에서 완전한 프로토타입을 보유하지는 않음
          + 일부 스타트업은 디지털 트윈을 활용하여 유닛 경제학 모델을 설득력 있게 제시하며 성공적으로 B 라운드를 진행
               o 디지털 트윈과 AI 같은 기술을 통해 생산성과 수익성을 효과적으로 입증 가능
          + B 라운드에서 공장을 완전히 구축하지 않았더라도, 수익 잠재력을 증명할 방법은 다양함

     핵심 교훈: 수익성을 명확히 제시하고, 목표 수치를 달성하기 위한 구체적인 계획을 제시.

     * 하드웨어 스타트업일지라도 유닛 경제학을 명확히 제시해야 함
     * 긍정적인 매출총이익률과 수익 모델을 증명하거나 이를 달성하기 위한 명확한 경로를 보여주는 것이 중요
     * 디지털 트윈이나 AI와 같은 기술 활용을 통해 수익성을 입증하는 것도 효과적인 접근

  Rule 3. 뛰어난 기술뿐 아니라 뛰어난 회사를 구축하는 방법을 보여줘야 함

     * 기술에서 비즈니스로 초점을 전환하며, 확장을 이끌 전문 인력을 영입해야 함.
     * 예: Antora
          + Antora는 열 배터리 기술을 개발하는 회사로, 창업자들은 Stanford와 MIT에서 열 엔진 및 에너지 효율 기술에 대한 선구적인 연구를 수행
          + 기술적 이정표를 꾸준히 달성하며 성공적인 기술 기반을 마련
          + 그러나 기술의 성공이 가져온 높은 수요를 충족하기 위해 새로운 도전에 직면
          + B 라운드 이전에 자금 활용 계획을 구체화하여, 산업 확장을 지원할 숙련된 운영 전문가와의 협력을 포함
               o 수백만 달러 규모의 계약을 이행하면서도 창업자들이 주요 경영 역할을 유지
          + 올바른 팀 구성과 관리 역량을 강조하며 회사를 효과적으로 확장

     핵심 교훈: 기술 창업자라도 확장 가능한 팀 구축과 조직 역량 강화가 중요.

     * 후기 단계에서는 기술 이상의 가치를 보여줘야 하며, 회사를 키우기 위한 명확한 계획을 제시해야 함
     * 숙련된 관리 팀을 구성하여 산업 확장을 효과적으로 이끌 역량을 갖추는 것이 중요
     * 창업자가 사업 확장의 요구를 이해하고 적합한 인재를 영입하는 것은 회사의 신뢰도를 높임
     * 뛰어난 기술뿐 아니라, 이를 상업적 성공으로 전환할 수 있는 조직 역량을 투자자에게 입증해야 함

Series B 성공을 위한 요약

     * 핵심은 다음 세 가지:
          + 실적(traction) 을 중심으로 투자자를 설득
          + 명확한 단위 경제(unit economics) 를 제시
          + 성장을 위한 인재 채용 전략 을 구체적으로 설명
     * 성공적인 회사는 단순히 기술 개발을 넘어서 어떻게 확장할지 명확히 보여줌
          + Seed 단계에서는 기술 개발로 0에서 1로 이동
          + A 라운드에서는 초기 매출을 통해 1에서 10으로 도약
          + B 라운드에서는 10에서 1000으로 확장할 계획을 제시해야 함

결론: 성장의 로드맵

     * Series B는 기술 검증에서 시장 지배로 가는 여정.
     * 성공적인 스타트업은 단순히 좋은 제품을 만드는 것을 넘어 어떻게 시장을 확장하고 지배할 것인지 명확히 설명
"
"https://news.hada.io/topic?id=17963","데이터 엔지니어링 핸드북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             데이터 엔지니어링 핸드북

     * 데이터 엔지니어가 되기 위한 모든 자료들을 모은 Repo
          + 프로젝트/인터뷰/책/커뮤니티/뉴스레터 들 모음
     * 처음이라면 2024 데이터 엔지니어링 진입 로드맵을 읽는 것부터 시작
     * 꼭 읽어야 하는 책 3가지 와 주요 서적 25권
          + 견고한 데이터 엔지니어링
          + 데이터 중심 애플리케이션 설계
          + 머신러닝 시스템 설계
     * 꼭 가입해야할 커뮤니티 5개 와 주요 커뮤니티들 10여개
          + [DE] DataExpert.io Community Discord
          + [DE] Data Talks Club Slack
          + [DE] Data Engineer Things Community
          + [ML] AdalFlow Discord
          + [ML] Chip Huyen MLOps Discord
     * 데이터 엔지니어링 관련 기술 회사 와 블로그들
          + 카테고리별 회사 정리 : Orchestration, Data Lake/Cloud, Warehouse, Data Quality, 교육, Analytics/Visualization, Data Integration, Modern OLAP, LLM 응용, 실시간 데이터
          + 블로그 : Netflix , Uber , Databricks , Airbnb , Amazon AWS Blog , Microsoft Data Architecture Blogs , Microsoft Fabric Blog , Oracle , Meta , Onehouse
     * 데이터 엔지니어링 화이트 페이퍼
          + A Five-Layered Business Intelligence Architecture
          + Lakehouse:A New Generation of Open Platforms that Unify Data Warehousing and Advanced Analytics
          + Big Data Quality: A Data Quality Profiling Model
          + The Data Lakehouse: Data Warehousing and More
          + Spark: Cluster Computing with Working Sets
          + The Google File System
          + Building a Universal Data Lakehouse
          + XTable in Action: Seamless Interoperability in Data Lakes
          + MapReduce: Simplified Data Processing on Large Clusters
     * 주요 소셜 계정과 팟캐스트
     * 꼭 구독해야할 뉴스레터 4개 및 그외 20개 이상의 뉴스레터들
          + DataEngineer.io Newsletter
          + Joe Reis
          + Start Data Engineering
          + Data Engineering Weekly
     * 각종 교육 코스들
"
"https://news.hada.io/topic?id=17968","하루의 일상: 글로벌 BGP 테이블","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          하루의 일상: 글로벌 BGP 테이블

글로벌 BGP 테이블의 하루

     * BGP 테이블에 대한 많은 분석이 이루어졌으며, 주로 장기적인 경향에 초점을 맞추고 있음. 그러나 이 글에서는 단기적인 관점에서 BGP 테이블의 하루를 살펴보고자 함.

  야크 쉐이빙 시작

     * 데이터를 수집하기 위해 BGP 데몬을 사용하여 BGP 메시지를 JSON 형식으로 출력하는 bgpsee 도구를 개발함.
     * 2024년 6월 1일부터 7월 1일까지 수집된 데이터셋은 464,673개의 BGP UPDATE 메시지로 구성됨.

  초기 전송, v4 및 v6 경로 수

     * BGP 피어링을 시작할 때 '첫 번째 트랜치'로 많은 UPDATE 메시지를 받음.
     * 이 첫 번째 트랜치에서는 총 949,483개의 경로가 포함되어 있음.

  정원 호스 또는 소방 호스?

     * 업데이트는 실시간 스트림이 아닌 30초 간격으로 묶여서 전송됨.
     * IPv4 경로는 평균적으로 30초마다 약 50개의 경로 업데이트가 발생하며, IPv6는 약 47개임.
     * IPv4 업데이트는 주기적인 변동성을 보이며, 40분 주기의 사이클이 관찰됨.

  프리펜딩 광기

     * 네트워크 관리자는 AS 경로 길이를 조정하여 트래픽 경로를 제어할 수 있음.
     * IPv4 경로의 최대 길이는 105, IPv6 경로는 599로 매우 길며, 이는 네트워크 관리자의 실수로 인한 것일 수 있음.

  경로 속성

     * BGP 업데이트는 경로 속성과 네트워크 계층 도달 가능성 정보를 포함함.
     * 일부 AS는 개발용으로 예약된 속성 255를 사용하여 경로를 발표하고 있음.

  플래피 경로: 누가 어려움을 겪고 있는가?

     * 가장 많이 변동하는 경로는 140.99.244.0/23로, EpicUp이라는 회사가 소유하고 있음.
     * 경로의 변동은 다양한 요인에 의해 발생할 수 있으며, 이는 현대 글로벌 네트워크의 피어링 다양성과 BGP 프로토콜의 회복력을 보여줌.

  시작에 불과함

     * BGP 테이블은 전 세계의 다양한 요소를 요약한 것으로, 정치적 불안, 자연 현상, 네트워크 관리자의 실수 등 다양한 요인이 포함될 수 있음.
     * 이러한 복잡성을 이해하는 것은 흥미롭고 아름다운 일임.

        Hacker News 의견

     * 25년 전, 작은 ISP에서 일하며 멀티홈 설정을 위해 Avi Freedman의 튜토리얼을 참고했음. 덕분에 ARIN에서 /20을 받아 두 개의 피어에 경로를 광고할 수 있었음. 이 과정에서 많은 것을 배웠고, 그 작동 방식에 놀라움을 느낌
     * EpicUp 140.99.244.0/23 프리픽스의 플래핑은 경로 감쇠의 대상이 되었어야 했음. 이는 ISP가 모든 피어에 대해 적용하는 제한으로, 단일 프리픽스가 글로벌 BGP 변동의 상당 부분을 차지하지 않도록 방지하는 것임
     * 저자가 언급한 업데이트와의 상관관계에 대해 확신이 없음. 특히 불안정한 자율 시스템의 프리픽스 경로에 광고가 기반하는 것은 불안정할 것임
     * 40분 주기성에 대해서도 의문이 있음. 8년 전 BGP 세계에 깊이 관여했을 때는 그런 주기성이 없었음. 이는 데이터셋이 우연히 보여준 것이거나 저자가 BGP 피드를 받은 네트워크 때문일 수 있음
     * 데이터를 깊이 파고들어 AS와 프리픽스의 변화를 보면, 특정 패턴 없이 여기저기서 변화가 일어남
     * 매일 몇몇 시끄러운 ISP가 존재하는데, 이는 잘못된 회로나 잘못된 구성 때문임. 새로운 프리픽스가 처음으로 온라인에 연결되면서 플래핑이 발생하기도 함
     * 캔자스의 작은 ISP가 파이버를 사용하는 백호로 인해 퍼스의 라우터에 나타나는 것은 동시에 흥미롭고 약간 무서운 일임. 그러나 업데이트 빈도는 전 세계적으로 <10hz로 유지됨
     * BGP에 대해 배우고 싶다면, 오리건 대학의 Network Startup Resource Center에서 제공하는 비디오 시리즈가 유용함
     * 0xff 예약 BGP 속성은 화웨이의 특이점일 가능성이 높음. bgp.tools에서 보이는 거의 모든 0xff는 동일한 형식을 따르며, 해당 네트워크 중 일부는 화웨이 장비를 사용 중임
     * MRT 파일에서 BGP 경로 데이터를 추출하고 Neo4j에 가져와 탐색하기 위해 파이썬 스크립트를 작성했음. 이 파일에는 약 5600만 개의 매우 중복된 경로가 포함되어 있으며, Neo4j는 이러한 유형의 데이터를 ""병합""하는 데 탁월함
     * 이 기사에서 BGP에 대해 몰랐던 많은 것을 배웠으며, 특히 그 혼란스러움이 가장 흥미로웠음. 후속 기사에서 더 많은 세부 사항을 읽고 싶음
     * 보르네오 주변에 현장 사무소를 둔 대형 미국 고객을 위해 위성-마이크로파 하이브리드 네트워크를 설계하고 구성한 경험이 있음. 자카르타에서 임대 회선 핸드오프를 했던 기억이 남음. BGP를 사용해 OSPF/UBNT 네트워크와 IGRP/Cisco 기업 WAN을 연결해야 한다고 읽었음
     * Memory Safety 이니셔티브가 Rust로 인터넷 인프라 보안 및 안전을 재구현하는 작업을 통해 BGP 서버 구현에도 적용되면 좋겠음
     * as8772 NetAssist는 나쁜 트래픽을 라우팅함
          + AS15626 GREEN FLOID LLC (러시아 선전)
          + AS34224 Neterra Ltd. (불릿프루프)
          + AS44477 STARK INDUSTRIES SOLUTIONS LTD (불릿프루프)
          + AS207656 Epinatura LLC (불릿프루프)
     * 일반인이 BGP 데이터를 얻는 가장 쉬운 방법은 무엇인지 궁금함. ISP에 친구가 없는 경우 유사한 분석을 시도하고 싶음
"
"https://news.hada.io/topic?id=17957","Amazon S3, Put-If-Match(Compare-and-Swap) 기능 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Amazon S3, Put-If-Match(Compare-and-Swap) 기능 추가

     * Amazon S3의 새로운 기능: 조건부 쓰기
          + Amazon S3는 이제 객체가 수정되지 않았는지 평가한 후 업데이트하는 조건부 쓰기를 수행할 수 있음. 이는 동일한 객체에 대한 동시 쓰기를 조정하고 여러 동시 작성자가 객체의 내용을 모르는 상태에서 의도치 않게 덮어쓰는 것을 방지하는 데 도움을 줌.
          + 이 기능은 S3 일반 목적 및 디렉토리 버킷 모두에서 S3 PutObject 또는 CompleteMultipartUpload API 요청을 통해 객체의 ETag를 제공하여 사용할 수 있음.
          + 조건부 쓰기는 여러 클라이언트가 공유 데이터 세트를 동시에 업데이트하는 분산 애플리케이션의 방식을 단순화함. HTTP if-none-match 조건부 헤더를 사용하여 객체가 생성되기 전에 존재하는지 확인하는 것과 유사하게, 클라이언트는 이제 API 요청에서 HTTP if-match 헤더를 통해 객체의 ETag를 지정하여 조건부 쓰기 검사를 수행할 수 있음.
          + S3는 객체의 ETag가 API 요청에서 제공된 값과 일치하는지 평가한 후 쓰기를 커밋하며, 조건이 충족될 때까지 클라이언트가 객체를 덮어쓰지 않도록 방지함.
          + 이 새로운 조건부 헤더는 대규모 분석, 분산 머신 러닝 및 기타 고도로 병렬화된 작업의 효율성을 개선하는 데 도움을 줄 수 있음.
          + 이 새로운 조건부 쓰기 기능은 모든 AWS 지역에서 추가 비용 없이 제공됨. AWS SDK, API 또는 CLI를 사용하여 조건부 쓰기를 수행할 수 있음. 조건부 쓰기에 대한 자세한 내용은 S3 사용자 가이드를 참조할 수 있음.

        Hacker News 의견

     * Amazon S3에서 조건부 쓰기 작업을 강제할 수 있는 기능이 추가되었음
          + S3에서 객체의 이름이 해시와 일치하도록 강제하는 기능을 원했음
          + 이는 콘텐츠 주소 지정 가능한 저장소를 구축하는 데 도움이 됨
     * Turbopuffer.com은 객체 저장소 외의 의존성을 피하기 위해 이를 데이터베이스에서 사용해 왔음
          + Google Cloud Storage에서 시작한 지 1년 만에 S3에서 이 기능을 사용할 수 있게 되어 기쁨
     * 강력한 일관성을 통해 원하는 기능의 절반을 달성했음
     * 이 기능이 왜 중요한지 이해하기 어려워하는 사람도 있음
     * 이는 비교 후 교환(compare-and-swap)보다는 비교 후 설정(compare-and-set)에 가까움
     * 읽기 후 쓰기 일관성 보장과 결합하면 객체 저장소 위에 증분 추가 전용 저장소를 구축하는 데 완벽한 기반이 됨
          + 여러 작성자가 WAL에 접근할 때의 문제를 해결함
     * Azure Blob Storage도 e-tag 및 낙관적 제어를 지원함
          + AWS의 기능과 어떻게 다른지 궁금해하는 사람도 있음
     * AWS의 기본 ETag 알고리즘이 평범한 MD5 해시인 경우, MD5 충돌로 인해 객체 데이터가 실패할 가능성이 있는지 의문을 가짐
          + 서로 다른 사용자 제공 데이터가 항상 다른 ETag를 생성할 것이라고 가정하는 상황을 고려함
     * Amazon S3의 오픈 소스 구현인 MinIO는 거의 2년 전부터 이 기능을 제공해 왔음
          + Amazon이 이제야 따라잡고 있음
     * s3fs의 IfNoneMatch 기능에 대한 반응으로 여름에 새로운 기능이 추가되었음
          + 이 새로운 기능이 파일 시스템 추상화에서 어떻게 나타날지 궁금해하는 사람도 있음
"
"https://news.hada.io/topic?id=17977","원온원 6년의 기록: 시행착오와 배움들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         원온원 6년의 기록: 시행착오와 배움들

   원온원 미팅을 진행하면서 시도한 내용과 배움들에 대해 작성한 글입니다.
   원온원 미팅 경험담을 서로 나누는 자리가 많아지면 좋을 것 같네요. 팀장님들, 원온원 미팅을 진행해야 하는 분들에게 도움이 되길!

   목차
     * 원온원의 정의와 목적
     * 원온원 역량의 발전 과정
          + Lv 1. 초기 : 질문 리스트에 의존한 시기
          + Lv 2. 본질에 집중한 시기
          + Lv 3. 맥락에 기반한 개인화된 원온원을 시도한 시기
          + Lv 4. 조직 전체의 원온원 프레임워크 개발
     * 원온원 실천을 위한 구체적인 가이드
          + 원온원 프로세스 : 어떤 흐름으로 대화하면 좋을까?
          + 원온원 템플릿
          + 그 외 원온원 관련 생각과 TIP

   다시 보아도 좋네요, 감사합니다!
"
"https://news.hada.io/topic?id=17947","C++의 두 파벌의 두 파벌

     * 방언(Dialect) 없는 단일 C++의 꿈은 이미 오래전에 사라진 것으로 보임
     * Reddit와 그 오렌지색 웹사이트(HN), 그리고 공식 C++ 표준 위원회 회의에서 C++의 미래에 대한 많은 논쟁이 있음

C++의 현재 상태

     * C++의 진화 작업 그룹(EWG)은 P3466 R0를 채택하기로 합의함.
          + ABI(응용 프로그램 이진 인터페이스) 중단 없이 C 및 이전 C++과의 링크 호환성을 유지함.
          + '바이럴 주석'을 사용하지 않음.
          + ABI 중단과 제로 오버헤드 원칙이라는 상충되는 목표를 고수함.
     * 미국 정부는 C++ 사용을 중단하도록 권고함.
          + CISA, NSA, 백악관 등 여러 기관이 메모리 안전하지 않은 언어 사용에 대한 경고를 발표함.
     * 대형 기술 기업들이 Rust를 채택하고 있음.
          + Microsoft, Google, AWS 등이 Rust를 사용하고 있음.
          + Google은 C++/Rust 상호 운영 툴까지 개발
     * C++ 커뮤니티 내 내부 갈등
          + Herb Sutter가 Microsoft를 떠나고 MSVC가 C++23 기능 구현에 느리다는 소식이 있음.
          + Google은 C++ 개발 프로세스 참여를 줄이고 자체 C++ 후속 언어를 개발 중임.
          + 기존 C++ 표준 위원회 프로세스에 대한 신뢰 부족
          + 모듈 기능은 여전히 미완성 상태
          + '안전 프로파일(‘Safety Profiles’)'이 이상한 상태에 있음

C++의 두 문화

     * 현대적이고 자동화된 도구 사용 그룹
          + Google과 같은 대형 기술 기업들이 주요 예
          + 최신 C++ 표준(C++17 이상)을 사용하며, 자동화된 빌드 및 테스트 도구 지원
          + 코드 품질 유지에 투자하며 지속적으로 코드베이스를 현대화
     * 레거시 C++ 그룹
          + 오래된 환경과 도구에서 운영되는 코드베이스
          + 소스 코드 없이 운영되거나 빌드 시스템이 구식
          + 유지보수 비용이 높고 현대화의 장벽이 큼
     * 주요 차이점은 도구와 프로세스
          + 현대 C++ 그룹은 통합 빌드 시스템과 정적 분석기, 포매터, 린터 등 도구에 의존
          + 레거시 그룹은 이러한 도구와 프로세스 부재로 인해 운영 효율성이 낮음

결과 및 영향

     * 안전 프로파일
          + 기존 레거시 코드의 변경 없이 안전성을 강화하려는 목적
          + 현대적 C++의 요구보다는 기존 코드 유지에 초점
     * 모듈
          + 헤더 파일을 모듈로 간단히 가져올 수 있도록 설계
          + 레거시 코드와의 호환성을 고려해 설계됨
     * C++ 커뮤니티의 분열
          + 현대와 레거시 그룹 간의 요구사항 불일치로 커뮤니티 내 갈등 심화
          + C++ 표준 위원회의 보수적 접근이 이러한 갈등을 완화하려는 시도로 보임

대안적 관점

     * Safe C++ 같은 대안적인 아이디어는 커뮤니티 내에서 환영받지 못하고 있음
     * 표준 위원회의 일부 멤버가 개인적인 미적 기준을 고수하며 변화에 저항하는 경우가 있다는 비판 존재

   Rust 는 gui 개발 생태계가 아직 없어서, 채택하질 못하고 있긴 한데요
   Rust를 사용하는 괜찮은 gui 프레임워크가 나와야할텐데...

   러스트가 C++를 대체할 수 있는지는 잘 모르겠지만
   신규 C++ 프로젝트가 거의 보이지 않는 것은 사실이죠...
   C++ 위원회는 탈태보다 본래의 가치를 더 중시하는 방향이 옳다고 정한 듯 하네요.

        Hacker News 의견

     * Google의 C++ 코드는 종종 최신 버전에서 작동하지 않으며, 개발자들이 이를 수정할 의지가 없는 경우가 많음. 이는 Google의 코드가 오래된 것과 현대적인 것 사이의 중간 지점에 머물러 있기 때문임
          + Google의 C++ 코드는 상태 기계와 수동 약한 포인터로 인해 메모리 손상이 발생할 수 있음
          + Google이 C++ 생태계를 떠나는 것을 긍정적으로 봄
          + Rust 생태계에 대한 Google의 관심이 긍정적이지 않을 것이라고 생각함
     * C++ 표준 작업자들에게 현재의 C++ 방향성을 지지하며, C++의 미래에 대해 온라인에서 나오는 소음은 무시하라고 조언함
          + Rust를 사용하여 정적 수명 검사를 원하는 사람들에게 Rust를 사용하라고 권장함
          + 정부 계약자라면 Rust를 사용하라고 제안함
          + 기존의 C++ 개발 프로세스가 잘 작동하고 있다고 주장함
     * C++를 사용하는 유일한 집단은 리팩토링하기에는 너무 큰 레거시 코드베이스를 가진 집단일 것이라고 주장함
          + WG21에 대한 신뢰를 잃은 다른 집단은 새로운 언어로 이동하고 있음
          + Herb Sutter가 C++에 수명 주석을 추가하는 것이 다른 언어로의 ""출구 램프""를 만들 것이라고 언급함
     * Rust의 에디션 시스템이 매우 잘 작동한다고 평가함
          + C++에도 이러한 시스템이 도입된다면, 모듈 경계에 제한이 있을 수 있지만 두 진영이 모두 만족할 수 있는 방법이 될 수 있다고 제안함
     * Herb Sutter가 Microsoft를 떠난다는 소식이 Microsoft에 좋지 않은 영향을 미칠 것이라고 우려함
          + Herb가 C++ 표준 채택을 주도하고 더 나은 미래 비전을 위해 노력했다고 평가함
          + Microsoft의 제안이었던 std::span이 범위 검사를 제외하고 채택된 것을 언급하며, Herb의 노력이 필요했다고 주장함
     * 자동화된 테스트가 두 진영을 구분하는 주요 요소라고 강조함
          + 레거시 C++ 앱에서 자동화된 테스트가 없으면 코드 변경이 앱을 손상시킬 위험이 있다고 설명함
          + C++의 특성상 무해해 보이는 코드 변경도 문제를 일으킬 수 있다고 경고함
     * C++의 매력을 떨어뜨린 주요 요인은 모듈의 부재라고 주장함
          + 모듈이 있었다면 C++ 커뮤니티가 형성될 수 있었을 것이라고 평가함
     * Herb Sutter는 타협을 이끌어내는 데 능숙했지만, Google은 자신의 의제를 밀어붙였다고 비교함
     * 대규모 코드베이스를 가진 고객들은 엄격한 규칙을 만족시키기 위해 코드의 1%도 변경하지 않으려 한다고 언급함
          + 많은 회사들이 새로운 표준으로 업그레이드하는 데 시간을 투자하고 있다고 주장함
     * Python과 Javascript/Node/Typescript에도 여러 파벌이 존재한다고 설명함
          + Rust는 이러한 파벌을 피하려고 했지만, 학습 곡선이 높아졌다고 평가함
          + Go는 파벌을 방지하고 널리 채택되기 위한 시도를 했지만, 제네릭을 도입해야 했다고 언급함
"
"https://news.hada.io/topic?id=17868","밈이 된 Lake Tank 이미지의 기원 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     밈이 된 Lake Tank 이미지의 기원 (2021)

     * 호수 탱크 이미지의 기원
          + ""호수의 판저"" 밈의 템플릿인 이 이미지는 미확인 국가의 군인이 판저로 보이는 것을 바라보는 장면을 담고 있음. 그러나 이 이미지의 기원은 잘 알려져 있지 않음.
          + 이미지의 기원에 대한 다양한 의견이 존재하며, 초기 온라인 출처는 2017년 러시아 웹사이트로 추정됨.
     * 판저와 ""호수""
          + 이 사진은 1940년 5월 13일, 벨기에의 현대 월로니아 근처 뫼즈 강에서 찍힌 것으로 추정됨. 탱크는 1941년까지 회수되지 않았음.
          + 1940년 5월 12일, 31번째 판저 연대는 뫼즈 강의 다리를 점령하려 했으나 실패함. 독일군은 강을 건너기 위해 임시 다리를 사용했음.
          + 5월 13일 저녁, Lt. Zobel의 탱크가 강을 건너려다 사고로 강에 빠짐.
     * 사진 속 인물
          + 사진 속 인물은 독일군 개척병으로 추정되며, 카라비너 98k 소총을 들고 있음. 그의 복장은 작업 중 손상을 방지하기 위한 것으로 보임.
          + 이 군인은 뫼즈 강에서 사용된 임시 다리와 관련이 있으며, 그의 복장은 이를 뒷받침함.
     * 추가 연구 및 추측
          + 사진 속 탱크는 판저 IV D로 추정되며, 이는 1939년 10월부터 대량 생산됨.
          + 사진 속 군인은 독일군 소총을 사용하고 있으며, 복장은 소련군의 것일 가능성도 있음. 이는 당시 군수품 부족으로 인한 것으로 추측됨.
     * 업데이트 및 추가 정보
          + ConeOfArc는 이 사진의 기원을 찾기 위해 $100의 현상금을 걸었으며, 추가적인 정보는 그의 Discord에서 확인 가능함.

        Hacker News 의견

     * ""Know Your Meme""에서 ""lake""의 기원을 설명하지 않음. 영국 전설에 익숙하지 않을 수 있음
          + ""Lady of the Lake""는 몬티 파이썬을 통해 잘 알려져 있음
          + ""이상한 여자가 연못에서 칼을 나눠주는 것은 정부 시스템의 기초가 될 수 없음""이라는 유명한 대사 포함
          + 란슬롯에게 예술과 글쓰기를 가르치고, 지혜와 용기를 주며 훈련을 감독함
     * 1990년대 인터넷의 유령 같은 느낌이 듦
          + 이 글은 자체 웹사이트가 필요할 정도로 가치가 있음
          + 최소한의 CSS로 구성된 사이트에서 가족 사진과 파티 사진을 발견할 수 있음
     * 이 깊이 있는 탐구는 훌륭함
          + 1st Lieutenant de Wispelaere의 영웅적 행동을 강조하고 싶음
          + 다리를 폭파하려고 했으나 실패, 수동 점화 장치를 사용하려다 독일군에 의해 치명상을 입음
     * 이처럼 철저히 연구되고 세밀하게 답변된 질문이 인터넷 포럼에 존재한다는 사실이 신뢰를 회복시킴
     * ""lake tank"" 이미지가 밈으로 사용된 것을 본 적이 없음
          + 이 역사적 이야기를 찾는 데 도움을 준 모든 사람에게 경의를 표함
     * Jacques Littlefield의 Tank Ranch에서 이 탱크를 본 적이 있음
          + 강에 빠져 있었던 탱크를 복원하여 캘리포니아로 가져옴
          + Jacques 사망 후 경매의 인터넷 아카이브에서 복원된 탱크의 사진을 찾을 수 있을 것임
     * 사진이 벨기에 Meuse 강 근처에서 촬영됨
          + ""여기 근처에서 찍혔다""는 표현이 정밀한 좌표와 함께 나와 웃음이 나옴
     * 이 질문이 ChatGPT 프롬프트가 되는 날을 기다림
          + 매우 다른 ChatGPT가 될 것이지만, 그것이 꿈일 것임
     * 이미지의 기원을 모르지만, Thames 강에서의 상징적인 적대적 출현에 영감을 주었을지 궁금함
     * 독일 공병이 흰색 유니폼을 입었는지 궁금함
          + 도랑을 파거나 탱크를 복구하거나 위장하는 데 최악의 색상일 수 있음
          + Hugo Boss가 디자인했는지 궁금함
"
"https://news.hada.io/topic?id=17869","중국 국적 화물선 Yi Peng 3, C-Lion 1 및 BSC 케이블 손상 시점과 일치하는 교차 기록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       중국 국적 화물선 Yi Peng 3, C-Lion 1 및 BSC 케이블 손상 시점과 일치하는 교차 기록

     * 중국 국적 화물선 Yi Peng 3의 이동 경로
          + Yi Peng 3는 C-Lion 1과 BSC라는 두 해저 케이블을 지나갔으며, 이 시점에 케이블이 손상되었음.
          + 덴마크 해군이 밤 동안 이 선박을 추적했으며, 현재 발트해를 떠나 덴마크 해협으로 이동 중임.
          + AIS(자동 식별 시스템) 데이터에 주의가 필요함.
     * 추가 정보 및 의혹
          + @pekka.bsky.social 및 @garygnutter.bsky.social 계정을 팔로우하면 더 많은 정보를 얻을 수 있음.
          + Yi Peng 3의 최근 항구는 Murmansk, Port Said, Luga Bay였으며, Ust-Luga, 러시아에서는 정박하지 않았음.
     * 속도 및 항로 분석
          + Yi Peng 3는 두 발트해 케이블 손상 지점을 지나면서 속도가 감소했음.
          + 사건 전에는 정상 속도를 유지했으나, 70분간 정지 및 표류 후 다시 정상 속도로 복귀했음.
          + 다른 선박들은 동일한 기상 조건에서 속도가 감소하지 않았음.
     * 덴마크 해군의 대응
          + 덴마크 해군은 Yi Peng 3를 추적 중이며, 현재 덴마크의 Sealand 북쪽에서 정지 상태임.
          + 아직 선박에 대한 탑승이나 조사가 이루어지지 않았음.
     * 독일 국방부 장관의 발언
          + 독일 국방부 장관 Pistorius는 케이블 손상이 사보타주에 의한 것이라고 언급함.
     * 기타 의견 및 반응
          + 일부 사용자는 중국과 러시아 선박의 덴마크 해협 통과를 제한해야 한다고 주장함.
          + 법적 대응 및 보험 청구에 대한 논의가 이루어지고 있음.

        Hacker News 의견

     * 중국 화물선이 발트해 케이블을 손상시킨 사건이 있었음. 중국 회사 Hainan Xin Xin Yang Shipping Co, Ltd. 소속의 'Newnew Polar Bear'라는 배가 닻을 끌면서 케이블을 절단했음. 중국 조사에서는 폭풍 때문이라고 주장하지만, 실제로는 폭풍이 없었음
          + 이러한 사고는 가끔 발생하지만, 이렇게 자주 발생하지 않음. 러시아는 이를 부인하려고 시도 중임
     * 덴마크 국방부는 그들의 존재를 확인했지만, 추가 정보는 제공하지 않음
     * 더 많은 정보는 gCaptain 웹사이트에서 확인 가능함
     * 4일 전 러시아 스파이 선박이 아일랜드 해역에서 추방되었음
     * 유럽의 불안정을 조장하려는 시도로 보임
     * 제목이 더 설명적일 필요가 있음. 평균 독자는 맥락 없이 제목을 보고 지나칠 수 있음
     * 의문점: 만약 의도적으로 케이블을 손상시키려 했다면, 왜 AIS 데이터를 위조하거나 비활성화하지 않았는지 이해가 안 됨
     * bsky 링크가 제공되어 기쁨. 앞으로도 이렇게 되길 바람
     * 중국이 발트해에서 두 번째로 이런 일을 저지른 것 같음. 의도적일 가능성이 있음. 중국 선박의 발트해 출입을 금지해야 할지도 모름
     * 원인을 확인하기는 쉬울 것임. 교차점 근처의 케이블을 확인하면 됨. 닻이 케이블을 친 증거가 있다면 명확한 증거가 될 것임
          + 누군가가 지금 당장 이를 조사해야 함. 확인되기 전까지는 추측할 필요가 없음
          + 의도적인지 과실인지 확인하기 위해 선박에 탑승할 필요가 있을 수도 있음
     * 보츠와나는 부패가 적은 국가 중 하나임. 우크라이나나 보츠와나에 대해 잘 모를 수도 있음
"
"https://news.hada.io/topic?id=17897","HN 공개: Sparse Autoencoders를 활용한 Llama 3.2 해석 가능성 연구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN 공개: Sparse Autoencoders를 활용한 Llama 3.2 해석 가능성 연구

프로젝트 개요

     * 현대의 대형 언어 모델(LLM)은 여러 특징을 동일한 뉴런에 중첩하여 개념을 인코딩하고, 각 뉴런의 활성화가 다른 뉴런의 활성화에 따라 여러 해석 가능한 의미를 갖도록 함. 이를 _중첩(superposition)_이라고 부름.
     * 희소 오토인코더(Sparse Autoencoders, SAE)는 훈련된 LLM에 삽입되어 활성화를 매우 큰 희소한 잠재 공간으로 투영하여 중첩된 표현을 분리하고 해석 가능한 특징으로 변환함.
     * 이 프로젝트는 Anthropic, OpenAI, Google DeepMind가 성공적으로 수행한 연구를 재현하여 해석 가능한 특징을 추출하는 것을 목표로 함.
     * Llama 3.2-3B 모델을 위한 기능적이고 해석 가능한 희소 오토인코더를 생성하기 위한 전체 파이프라인을 제공함.

핵심 기능

     * PyTorch로 작성된 활성화 캡처부터 SAE 훈련, 특징 해석 및 검증까지의 완전한 엔드 투 엔드 파이프라인 제공.
     * 대형 언어 모델로부터 잔여 활성화를 캡처하여 SAE 훈련 데이터셋으로 사용.
     * 훈련 데이터를 효율적으로 전처리하고, 다중 GPU를 활용한 대규모 분산 훈련 지원.
     * SAE 훈련 중 보조 손실을 구현하여 죽은 잠재 변수를 방지하고 훈련 역학을 안정화함.
     * Weights & Biases를 통한 SAE 훈련의 포괄적인 로깅, 시각화 및 체크포인트 제공.
     * 해석 가능성 분석 도구를 통해 학습된 특징의 의미 분석을 지원.
     * Llama 3.1/3.2의 순수 PyTorch 구현을 통해 외부 종속성 없이 일반 사용 및 결과 검증 가능.
     * 텍스트 및 채팅 완성 작업을 통해 모델 행동에 대한 SAE의 영향을 검증하고, 추출된 의미적 특징의 조정 가능.

공개된 자원

    1. OpenWebText 문장 데이터셋:
          + 활성화 캡처에 사용된 OpenWebText 데이터셋의 사용자 정의 버전.
          + 원본 텍스트를 유지하며, 빠른 접근을 위해 개별 문장을 파케 형식으로 저장.
          + NLTK 3.9.1의 ""Punkt"" 토크나이저를 사용하여 문장 분할.
    2. 캡처된 Llama 3.2-3B 활성화:
          + Llama 3.2-3B의 23번째 레이어 잔여 활성화 2,500만 문장.
          + 4TB의 원시 데이터를 3.2TB로 압축하여 100개의 아카이브로 분할.
    3. SAE 훈련 로그:
          + Weights & Biases를 통한 훈련, 검증 및 디버그 메트릭 시각화 로그.
          + 10번의 에포크와 10,000번의 로그된 단계 포함.
    4. 훈련된 65,536 잠재 SAE 모델:
          + 10번의 에포크 후 최종 훈련된 SAE 모델.

프로젝트 구조

      1. 데이터 캡처

     * capture_activations.py: LLM 잔여 활성화 캡처.
     * openwebtext_sentences_dataset.py: 문장 수준 처리용 사용자 정의 데이터셋.

      2. SAE 훈련

     * sae.py: 핵심 SAE 모델 구현.
     * sae_preprocessing.py: SAE 훈련을 위한 데이터 전처리.
     * sae_training.py: 분산 SAE 훈련 구현.

      3. 해석 가능성

     * capture_top_activating_sentences.py: 특징 활성화를 극대화하는 문장 식별.
     * interpret_top_sentences_send_batches.py: 해석을 위한 배치 생성 및 전송.
     * interpret_top_sentences_retrieve_batches.py: 해석 결과 수집.
     * interpret_top_sentences_parse_responses.py: 해석 결과 분석.

      4. 검증 및 테스트

     * llama_3_inference.py: 핵심 추론 구현.
     * llama_3_inference_text_completion_test.py: 텍스트 완성 테스트.
     * llama_3_inference_chat_completion_test.py: 채팅 완성 테스트.
     * llama_3_inference_text_completion_gradio.py: 상호작용 테스트를 위한 Gradio 인터페이스.

        Hacker News 의견

     * LLMs의 기계적 해석 가능성은 모델이 자신을 설명할 때 설득력 있는 답변을 생성하는 문제를 해결함. 강력한 모델일수록 ""거짓말""을 정당화하는 데 더 설득력이 있어 자기 탐지 테스트에서 더 낮은 점수를 받을 수 있음. 목표는 일관성이지 진실이 아님
          + 진정한 설명 가능성은 모델이 답변을 생성할 때 거치는 인과적 사고 과정을 보여주는 것임. 이는 사람이 생각할 때 여러 방향으로 잠깐씩 떠오르는 생각들과 유사함
     * Sparse Autoencoders(SAEs)에 대한 연구에서 손실 곡선의 하한이 멱법칙으로 확장됨을 관찰함. 보조 손실을 통해 죽은 잠재 변수를 완전히 해결할 수 있었고, 훈련 반복 동안 부드러운 사인파 패턴을 관찰함
     * 기계적 해석 가능성에 대한 질문 제기: 미래의 AI가 자신의 훈련을 감독하면서 모호성을 이용해 기계적 해석 관찰자를 속일 수 있는 모델을 만들 가능성에 대한 우려가 있음
     * SAEs 평가의 어려움에 대한 블로그 게시물을 읽고, 이 문제를 어떻게 해결했는지 궁금해함. 리포지토리에서 접근 방식을 이해할 수 있는 부분을 찾고 싶어함
     * 이 작업이 정렬에 긍정적인 영향을 미칠 수 있다고 생각하지만, 세부 사항을 아직 확인하지 않음. 시간, 비용, 위험을 보상하기 위해 얼마나 지불해야 하는지 궁금해함
     * 문서화에 많은 시간을 들인 것에 대해 감사함
     * 매우 멋진 작업이며, SAELens와 통합할 계획이 있는지 궁금해함
"
"https://news.hada.io/topic?id=17955","친애하는 친구야, 넌 Kubernetes를 만들었어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      친애하는 친구야, 넌 Kubernetes를 만들었어

     * 친구에게 보내는 편지
          + Kubernetes를 피하려고 했지만 결국 비슷한 시스템을 만들게 되었음을 설명하는 내용.
          + 친구는 ""지루한 기술""을 선택하여 간단한 컨테이너 실행을 원했지만, 결국 복잡한 스크립트와 설정으로 인해 문제가 발생함.
          + Docker Compose로 전환해도 모든 문제를 해결할 수는 없으며, 배포, 롤링 업데이트, 롤백, 스케일링을 위한 별도의 솔루션이 필요함을 깨달음.
     * 서버 확장과 네트워크 복잡성
          + 두 번째 서버로 확장할 필요성을 느끼게 됨.
          + Tailscale과 같은 오버레이 네트워크를 사용하여 서비스 발견을 시도함.
          + 네트워크 복잡성을 해결하려고 노력하지만, 결국 더 많은 문제에 직면하게 됨.
     * 유지보수와 자동화
          + 스크립트를 만든 당사자가 휴가를 가거나 퇴사하면, 복잡한 설정과 문서화되지 않은 설정 변경 사항을 누가 관리할 것인가라는 질문이 발생.
          + 커스텀 스크립트의 유지보수 문제를 해결하기 위해 Ansible을 사용하여 VM을 불변하고 버전 관리 가능하게 만듦.
          + Kubernetes를 사용하지 않기 때문에 더 쉽게 유지보수할 수 있을 것이라 생각함.
     * 컨테이너 스포닝과 보안 문제
          + 프로그램적으로 다른 컨테이너를 생성해야 하는 요구사항이 생김.
          + Docker 소켓을 웹 앱에 마운트하는 것은 보안상 위험하기 때문에, 이를 해결하기 위한 별도의 서비스 작성.
               o Docker API의 안전한 부분만 노출하는 별도의 서비스를 작성하여 문제를 해결함.
     * 결론
          + 결국 Kubernetes와 유사한 시스템을 구축하게 되었음을 깨달음.
               o 표준 설정 포맷, 배포 방법, 오버레이 네트워크, 서비스 디스커버리, 불변 노드, API 서버를 포함한 복잡한 시스템 완성
     * PS
          + 쿠버네티스를 대체할 더 나은 솔루션이 존재할 수 있다는 가능성을 부정하는 것은 아님.
          + 단, 쿠버네티스를 복잡하다고 단정짓기 전에, 그것이 해결하려는 문제를 충분히 이해하길 권장.

   배포 인수인계를 해결하기 위해 쿠버네티스를 도입한다는 이야기는 잘 이해가 안되네요

   유지보수와 자동화 가 코드레벨로 쉽게 되어있습니다.
   Infra as code도 가능합니다.

   EKS같은 매니지드 k8s 서비스 환경에서는 로드밸런서도 있고 Route 53도 연동 가능하지만, 셀프호스팅 k8s는 로드밸런서 구현체도 없고 DNS 연동도 제한적이더라구요. k8s 관리팀이 따로 있는 회사에서는 말씀하신 장점이 사실일 수도 있겠네요

   언뜻 들으면 괜찮은 솔루션 같아 보이지만 막상 써보면 모든 상황에서 동작하지는 않습니다

   k8s 관리팀 없어도 사용하기 쉽습니다. EKS사용하면됩니다.

   소스코드만 주면 인수인계 끝이라는 주장이랑 똑같지 않나요? 업무 매뉴얼이랑 업무 수행 이력은 여전히 필요할거 같은데요

   Infra as Code 자체가 소스코드만 주면 끝내려고 있는거긴 하죠.
   아 물론 어느 코드나 다 마찬가지로 기본적인 문서화는 되어있어야죠.

   소스코드가 잘짜있고, 문서가 잘되어 있으면 가능합니다.
   업무 매뉴얼이랑 업무 수행 이력은 따로 있으면 도움이 되겠지만, 이 글이랑은 다른 이야기 같네요.

        Hacker News 의견

     * 여러 회사에서 쉘 스크립트를 사용하여 배포를 성공적으로 수행한 경험이 있음
          + PHP 서비스 2개로 하루에 10억 건 이상의 요청을 처리하며, 서버에 파일을 전송하고 마이그레이션을 실행하여 다운타임 없이 배포를 수행함
          + 은퇴 계좌와 같은 웹스케일이 필요 없는 산업에서 Jenkins를 통해 Docker 명령어로 배포를 수행함
          + 테스트 환경을 몇 분 안에 필요에 따라 사용할 수 있었음
          + 현재 회사는 Kubernetes를 도입하려고 하지만 복잡성 때문에 어려움을 겪고 있음
     * Kubernetes는 YAML 파일을 관리하기 위해 두세 명의 전담 직원이 필요함
          + 클라우드 제공업체를 선택하면 복잡한 부분을 해결할 수 있지만 추가 비용이 발생함
          + YAML 파일은 사람이 작성하는 것이 아니라 도구가 생성해야 하는 구성 파일임
          + 대부분의 웹사이트와 서비스에는 Kubernetes가 필요하지 않음
     * 단순한 것이 취약하다는 생각은 잘못된 것임
          + YAML 파일과 Kubernetes의 복잡성을 이해하고 디버깅하는 것이 더 어려움
          + Kubernetes의 대안으로는 쉘 스크립트가 있음
     * Kubernetes가 필요하지 않은 경우도 있음
          + EC2 인스턴스와 간단한 쉘 스크립트로 100,000명 이상의 동시 사용자 처리 가능
          + 문제가 없으면 굳이 변경할 필요가 없음
     * 쉘 스크립트로 iptables 규칙과 sysctl 편집을 쉽게 관리할 수 있음
          + 작업 큐를 사용하여 컨테이너를 프로그래밍적으로 생성하는 대신 작업을 푸시할 수 있음
     * Kubernetes를 비판하는 것은 비전문적임
          + Google이나 Netflix 같은 대규모 애플리케이션이 아니라면 간단한 스크립트를 작성하는 것이 더 나음
     * 홈그로운 시스템의 제약이 모두 비용이라는 가정과 범용 솔루션의 유연성이 모두 이점이라는 가정은 잘못됨
          + 코드베이스에서 유사한 패턴을 따르고 서비스가 동일한 방식으로 배포되기를 원함
     * Kubernetes의 문제는 수많은 오픈 소스 라이브러리가 시스템을 이해하기 어렵게 만들고 버그를 유발함
     * Kubernetes의 학습 곡선을 넘은 사람들은 복잡성이 그렇게 나쁘지 않다고 말함
          + 개발자에게 Kubernetes를 가르치는 강의는 30분 정도 소요되며 Helm 차트를 작성할 수 있게 함
"
"https://news.hada.io/topic?id=17885","체중 감량 약물, 쥐 및 인간 세포에서 근육 축소 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     체중 감량 약물, 쥐 및 인간 세포에서 근육 축소 발견

     * 연구 결과 및 경고
          + 알버타 대학교 연구진은 인기 있는 체중 감량 약물이 체중뿐만 아니라 심장과 다른 근육도 줄일 수 있음을 발견함
          + 연구는 Ozempic과 같은 약물이 심장 근육 손실을 일으킬 수 있음을 보여줌
          + 연구진은 이러한 약물의 장기적인 건강 영향에 대한 경고를 제시함
     * 연구 배경 및 방법
          + Ozempic은 원래 제2형 당뇨병 환자의 혈당 조절을 위해 개발된 약물임
          + 연구진은 쥐를 사용하여 연구를 진행했으며, 비만 쥐와 마른 쥐 모두에서 심장 근육 감소를 관찰함
          + 인간 심장 세포에서도 유사한 결과를 확인함
     * 연구 결과 및 해석
          + 연구진은 쥐의 심장 기능에 즉각적인 부정적 영향을 관찰하지 않았으나, 장기적으로는 영향이 있을 수 있음을 경고함
          + 심장 구조와 기능을 임상 연구에서 신중히 평가할 것을 제안함
     * 근육 손실의 영향
          + 체중 감량 약물을 사용하는 사람들의 체중 감소 중 최대 40%가 근육 손실임
          + 근육 손실은 면역력 감소, 감염 위험 증가, 상처 치유 저하 등의 장기적인 건강 문제를 초래할 수 있음
     * 근육의 중요성
          + 근육은 아미노산을 저장하여 신체가 스트레스나 부상 시 스스로를 회복하는 데 도움을 줌
          + 근육은 혈당 관리에 중요한 역할을 하여 당뇨병 예방에 기여함
          + 근육은 면역 체계를 지원하는 마이오카인이라는 분자를 방출함
     * 근육 보존의 중요성
          + 체중 감량 중 근육을 보존하는 것은 신체의 전반적인 건강을 유지하는 데 중요함
          + 근육 손실은 고지방과 저근육량을 특징으로 하는 사코페닉 비만을 악화시킬 수 있음
     * 근육 보존을 위한 권장 사항
          + 영양과 운동에 집중하여 근육을 강하게 유지하는 것이 중요함
          + 고품질 단백질, 필수 비타민 및 미네랄 섭취가 필요함
          + 저항 훈련과 같은 운동은 체중 감량 중 근육 분해를 방지하고 강도를 유지하는 데 도움을 줌
     * 결론
          + 체중 감량 약물을 사용하는 사람들은 충분한 단백질과 저항 훈련을 포함한 균형 잡힌 프로그램을 따르는 것이 좋음
          + 이는 지방을 줄이면서 근육 손실을 최소화하고 치료의 건강 혜택을 최대화하는 데 도움을 줌

        Hacker News 의견

     * 체중 감량 시 근육 손실에 대한 경고에 혼란스러움을 느끼는 의견이 있음
          + 체중이 줄면 몸이 더 이상 많은 근육을 필요로 하지 않음
          + 체중 증가 시 필요한 근육도 증가함
          + 체중 감량 시 근육이 줄어드는 것은 자연스러운 현상임
          + 운동을 하면 필요한 근육은 유지됨
          + 체중 감량이 근육 손실로 인해 부정적이라는 생각에 동의하지 않음
     * 연구에서 심장 근육 감소가 체중 감량의 주요 원인이라는 의견이 있음
          + 현대 체중 감량 프로그램은 단백질 섭취와 저항 운동을 강조함
          + 근육을 유지하기 위해 영양과 운동이 중요함
          + 단백질 보충제가 필요할 수 있음
          + 이와 관련된 연구가 더 필요함
     * GLP-1 사용 시 근육 손실이 부작용이라는 의견이 많음
          + 개인적으로는 Semaglutide 사용 후 근육량이 증가함
          + 근육 손실에 대한 과도한 우려는 근거가 없음
     * 오픈 보디빌딩 팬으로서 Ozempic 사용 추세를 주목하고 있음
          + 식욕 감소와 근육 증가 효과가 있음
          + 심장 문제를 겪는 보디빌더들에게 도움이 될 수 있음
     * Semaglutide의 부작용은 칼로리 섭취 감소로 인한 것일 수 있음
          + 대조군이 없으면 부작용의 원인을 정확히 알기 어려움
     * 장 운동 감소가 식욕 억제에 도움을 줌
          + 젊은 사람들은 크게 신경 쓰지 않음
          + 노인들에게는 부정적인 영향이 있을 수 있음
     * 미국에서 건강에 해로운 음식이 더 수익성이 높다는 의견이 있음
          + 건강에 해로운 음식에 세금을 부과해야 한다고 주장함
     * 연구가 견고하지 않다는 의견이 있음
          + 쥐의 종류에 대한 정보가 부족함
          + 인간에게 적용하는 것은 위험함
     * 체중이 무거운 사람은 더 강한 심장이 필요하다는 의견이 있음
          + 연구에서 마른 쥐와 비만 쥐 모두 심장 근육이 감소함
          + 칼로리 제한만으로는 설명할 수 없는 근육 손실이 있음
          + 장기적인 건강 결과에 대한 우려가 있음
          + 더 많은 연구가 필요함
"
"https://news.hada.io/topic?id=17902","아마존, Anthropic에 추가 40억 달러 투자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      아마존, Anthropic에 추가 40억 달러 투자

     * Amazon의 Anthropic 투자
          + Amazon이 인공지능 스타트업 Anthropic에 추가로 40억 달러를 투자함.
          + 이번 투자로 Amazon의 총 투자액은 80억 달러에 달하지만, 여전히 소수 투자자로 남아 있음.
          + Amazon Web Services(AWS)는 Anthropic의 주요 클라우드 및 훈련 파트너가 될 예정임.
          + Anthropic은 Claude 챗봇과 AI 모델을 개발한 회사로, OpenAI의 전 연구 임원들이 설립함.
     * Anthropic의 기술 및 시장 경쟁
          + Claude는 OpenAI의 ChatGPT와 Google의 Gemini와 같은 인기 있는 챗봇 중 하나임.
          + Anthropic과 OpenAI 같은 스타트업과 Google, Amazon, Microsoft, Meta 같은 대기업들은 생성형 AI 시장에서 경쟁 중임.
          + 이 시장은 향후 10년 내에 1조 달러 이상의 수익을 올릴 것으로 예상됨.
     * AWS와의 협력 및 고객 혜택
          + AWS 고객은 Anthropic의 Claude를 통해 자체 데이터를 사용하여 미세 조정을 할 수 있는 기능을 조기에 접할 수 있음.
          + 이는 AWS 고객에게 독특한 혜택을 제공함.
     * Anthropic의 기술 발전
          + Anthropic은 최근 AI 에이전트가 컴퓨터를 사용하여 복잡한 작업을 수행할 수 있는 기능을 발표함.
          + 이 기능은 컴퓨터 화면을 해석하고, 버튼을 선택하고, 텍스트를 입력하고, 웹사이트를 탐색하며, 소프트웨어와 실시간 인터넷 브라우징을 통해 작업을 수행할 수 있음.
          + Amazon은 이 도구에 대한 초기 접근 권한을 가졌으며, 초기 고객과 베타 테스터에는 Asana, Canva, Notion이 포함됨.
     * Anthropic의 제품 출시
          + Anthropic은 Claude Enterprise를 출시하여 기업들이 Anthropic의 AI를 통합할 수 있도록 함.
          + 더 강력한 AI 모델 Claude 3.5 Sonnet을 출시하고, 소규모 기업을 위한 ""Team"" 플랜을 제공함.
     * Google의 투자
          + Google은 Anthropic에 20억 달러를 투자할 것을 약속했으며, 10%의 지분을 보유하고 있음.

        Hacker News 의견

     * Claude를 ChatGPT보다 선호하는 사용자가 많음. Claude는 의도를 잘 이해하고, 요청에 대한 명확한 답변을 제공함
          + Claude는 요청을 이해하기 위해 명확한 질문을 자주 던짐
          + Claude의 개선을 위해 더 많은 자금이 필요하다고 생각함
          + Pro 서비스의 용량 제한 문제로 인해 불편함을 겪고 있음
     * Pro 서비스가 용량 초과로 제한 모드로 운영되고 있음
          + ""Full Response"" 모드로 전환해도 품질 저하와 오류 메시지가 발생함
          + 컴퓨팅 자원이 부족하다고 판단됨
     * Anthropic과 AWS 간의 계약 조건에 대한 궁금증이 있음
          + Anthropic이 AWS에서 비용 가격으로 서비스를 제공받는지 궁금해함
          + 40억 달러의 투자가 AWS 수익으로 전환될 가능성이 있음
     * Claude가 ChatGPT보다 우수하다고 생각하며 더 많은 인정을 받아야 한다고 주장함
     * Anthropic이 더 나은 코드 생성기로서의 전략을 강화해야 한다고 생각함
          + AI 에이전트가 필요하지 않으며, 개발자들을 사로잡는 것이 중요하다고 봄
     * Anthropic이 AWS Bedrock을 통해 많은 비즈니스를 얻고 있으며, Amazon이 Claude 사용량 증가에 대해 자신감을 가지고 있다고 판단됨
     * Pro 요금제가 사용 불가능해져 Teams 요금제로 전환했으며, 5개의 계정에 대해 150 USD를 지불함
          + 40 USD로 몇 시간 동안 중단 없이 작업할 수 있는 계정이 필요하다고 생각함
          + Claude는 마치 10명의 비서가 있는 것처럼 느껴지며, 100 USD의 가치가 있다고 평가함
     * OpenAI와 Anthropic의 상태 페이지가 대조적이며, 이는 경험을 반영함
          + Anthropic의 코드와 프로젝트 기능을 좋아하지만, OpenAI가 음성 및 신뢰성 면에서 앞서 있다고 봄
     * Anthropic이 Google 진영에 있었으나, DeepMind의 새로운 ""Experimental"" Gemini 모델이 주목받고 있음
          + AWS는 AI의 최첨단 기술을 보유하고 있지 않음
          + Anthropic이 용량 제한 문제를 해결할 수 있기를 바람
"
"https://news.hada.io/topic?id=17960","Show HN: lla - 개인적으로 사용하려고 ls 대체제를 만들었어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show HN: lla - 개인적으로 사용하려고 ls 대체제를 만들었어요

     * Rust로 작성된 기존 ls에 대한 고성능, 확장 가능 대체제
     * 향상된 기능, 커스텀 가능한 출력, 확장 기능을 위한 플러그인 시스템을 제공
     * 효율적인 파일 리스팅: 대용량 디렉토리에서도 빠른 속도에 최적화
     * 다양한 보기 모드 : 기본, 롱포맷, 트리뷰, 재귀적 리스팅
     * 고급 정렬 기능 : 알파벳 순(기본), 파일 사이즈, 수정 일자별 등
     * 유연한 필터링: 파일명 또는 확장자를 기준으로 필터링
     * 재귀적 탐색 깊이 설정: 하위 디렉토리 탐색 깊이 최대값 설정 가능
     * 확장 가능한 플러그인 시스템: 사용자 정의 기능을 개발 및 통합 가능
     * 색상 구분 출력: 파일 유형 및 권한을 쉽게 식별할 수 있도록 색상 코드 사용
     * 플러그인을 통한 추가 기능들
          + Git 연동: 파일의 Git 상태를 표시
          + 파일 분류: 파일을 타입별로 분류
          + 키워드 검색: 파일 내용에서 특정 키워드 검색 가능
          + 파일 해시 출력: 파일의 해시값 표시
          + 코드 복잡성 분석: 코드의 복잡도 분석
          + 파일 크기 시각화: 파일 크기 시각화 제공
          + 중복 파일 탐지: 중복 파일 식별
          + 디렉토리 메타데이터 표시: 디렉토리의 세부 정보 제공
          + 파일 메타데이터 표시: 파일의 확장 메타데이터 표시
          + 최근 Git 커밋 정보 표시: 마지막 Git 커밋 정보 표시

  Hacker News 의견

     * 제작자의 말 : 프로젝트 lla에 대한 피드백에 감사하며, 이 프로젝트의 가장 놀라운 부분은 또 다른 ls 대안을 만드는 것이 아니라, Rust로 시스템 도구를 구축하고 플러그인 아키텍처를 구현하는 과정에서 엄청난 학습을 경험한 것임
          + 전통적인 ls보다 더 많은 기능을 제공하며, 이는 의도적인 것임
          + 성능과 문서화가 개선될 필요가 있지만, 오픈 소스의 장점은 피드백을 통해 계속 발전할 수 있다는 것임
          + 비슷한 프로젝트를 고려하는 사람들에게는 일상적으로 사용하는 도구를 재구상해보시길 권장
     * POSIX 도구를 대체하는 프로젝트로서 개인 사용에 적합하게 기대치를 설정한 점에 감사함
          + 많은 도구들이 최소한의 기능만 제공하고 확장 속성이나 ACL을 무시하며, STDOUT와 STDERR를 제대로 구분하지 못해 하위 도구에 문제를 일으킴
          + 자신의 아이디어를 세상에 내놓는 것이 불안할 수 있지만, 이를 잘 수행한 점이 훌륭
     * 원래의 LISP 머신에서 Genera를 사용한 경험이 있는데 거기서는 클릭 가능한 ls 결과를 다시 가져오는 기능이 있음. 이걸 구현할수 있으면 좋겠음
          + ls --hyperlink가 비슷하다는 댓글이 있는데, 그것과는 다름
     * 현대 CLI 도구들이 파일 관리자, git 클라이언트, grep 등 모든 것을 하려고 하는 경향이 있음
     * 재미있는 프로젝트로 보이지만, README에서 효율적인 파일 목록화에 대해 언급했는데, 속도를 최적화하기 위해 무엇을 다르게 하고 있는지 궁금함
     * Linux에서 잘 알려지지 않은 파일 시스템 CLI 도구인 gio가 있음
          + gio는 glib2와 함께 제공되며, 대부분의 Linux 설치에서 사용할 수 있음
          + cp와 유사한 진행 상황 표시, freedesktop 휴지통에 대한 쉬운 CLI 인터페이스, 트리 명령어, 파일 시스템 변경 모니터링 등의 기능을 강조함
     * ""개인 사용""으로 명시했지만, 흥미로운 새로운 아이디어를 도입한 칭찬할 만한 프로젝트임
          + 자신의 ls 대안인 pls에 아이디어를 도용할 수도 있다고 언급함
     * ls 대체 도구에서 색상화 외에 어떤 이점을 얻는지 궁금해함
          + 최근에 ranger를 사용하기 시작했으며, 디렉토리 내 모든 것을 보여주고 vim과 같은 단축키로 필터링, 정렬, 검색, 파일 미리보기 및 다른 디렉토리로 이동할 수 있어 ls 사용을 대체할 수 있을 것이라고 생각함
"
"https://news.hada.io/topic?id=17904","위상 배열 마이크로폰위상 배열 마이크로폰 (2023)

     * 위상 배열 마이크
          + 192채널 위상 배열 마이크로, FPGA 데이터 수집 및 GPU에서의 빔포밍/시각화 기능을 제공함. 위상 배열은 전통적인 방향성 마이크로는 불가능한 응용을 가능하게 하며, 녹음 후 방향성을 즉시 변경하거나 수십만 개의 지점에 동시에 초점을 맞출 수 있음.
          + 모든 설계는 오픈 소스로 제공됨:
               o 호스트 소프트웨어
               o FPGA 게이트웨어
               o PCB 레이아웃 및 회로도, 기계적 구성 요소
     * 하드웨어
          + 위상 배열 마이크를 만들기 위해 많은 수의 마이크를 넓은 간격으로 배열해야 함. 선형 배열의 경우, 마이크 간의 지수 간격이 광대역 신호에 최적임.
          + 총 비용은 약 $700임.
    팔
          + 각 팔의 길이는 PCB 제조 및 조립의 한계에 의해 결정됨. JLCPCB에서 제조되었으며, 4층 PCB의 최대 길이는 570mm임.
          + 선택된 마이크는 가장 저렴한 디지털 출력 MEMS 마이크로, 성능 특성에 큰 차이가 없음.
          + PDM을 사용하여 데이터를 출력하며, DDR을 지원하여 두 개의 마이크를 하나의 와이어에 다중화할 수 있음.
          + 각 팔에는 8개의 마이크가 4개의 출력 라인을 공유하며, 클럭 입력 라인에 출력 버퍼가 포함됨.
          + PCB의 수율이 좋지 않으며, 클럭 라인이 3V3 또는 접지로 단락되는 것이 가장 흔한 문제임.
    허브
          + FPGA는 많은 수의 저지연 IO를 수집하고 고속 인터페이스로 통신할 수 있어 데이터 수집에 사용됨.
          + Colorlight i5 카드가 사용되며, 충분한 IO와 저렴한 가격, 두 개의 이더넷 PHY가 통합되어 있음.
          + 허브에는 간단한 전력 관리 회로와 팔 보드 및 이더넷 커넥터가 포함됨.
    기계적 설계
          + 팔은 M3 나사를 사용하여 허브에 부착되며, PCB 장착 스탠드오프/너트를 사용하여 조립됨.
          + 초기 설계는 팔 PCB에 슬롯이 있어 구조적 PCB와 맞물리도록 되어 있었으나, 최종 설계는 MDF로 외곽을 감싸고 케이블 타이로 부착됨.
          + 벽에 장착된 마이크 배열은 반사에 민감하므로, 반사를 줄이기 위해 음향 폼을 사용함.
     * 게이트웨어
          + 게이트웨어의 주요 목표는 원시 데이터를 손실 없이 컴퓨터로 전송하는 것임.
          + FPGA에서 디시메이션 및 필터링을 수행하면 데이터 전송 속도가 줄어들지만, 원시 PDM 데이터를 전송하는 것이 가능함.
    PDM 인터페이스
          + PDM 입력 모듈은 50MHz 시스템 클럭을 16으로 나누어 3.125MHz PDM 클럭을 출력하고, 각 클럭 엣지 후 96개의 입력 핀을 래치함.
          + 데이터 속도는 600Mbps이며, 헤더를 포함하면 700Mbps임.
    패킷화
          + 패킷화는 FIFO 버퍼로, 큐에 충분한 데이터가 있을 때만 패킷을 시작하여 일정한 크기의 패킷을 보장함.
          + 48개의 PDM 출력 블록이 각 패킷에 포함되어 있으며, 715 Mbps의 전송 속도를 가짐.
    UDP 스트리머
          + LiteEth 프로젝트 덕분에 UDP 및 IP 캡슐화의 복잡성을 추상화하여 FIFO를 UDP 스트림에 연결하는 것이 간단함.
     * 소프트웨어
    CIC 필터
          + 각 마이크는 3.125MHz에서 1비트 신호를 생성하며, 이를 더 합리적인 샘플 속도와 비트 깊이로 줄여야 함.
          + 4단계, 16배 디시메이션 CIC 필터를 사용하여 샘플 속도를 195kHz로 줄임.
    보정
          + 배열 보정을 위해 스피커가 화이트 노이즈를 재생하며 배열 앞에서 이동함.
          + FFT 기반의 상호 상관을 사용하여 마이크 간 상대 지연을 계산함.
          + 소스 위치와 마이크 위치를 최적화하여 시스템의 최적 모델을 얻음.
    빔포밍
          + 빔포밍은 원시 마이크 입력을 처리하여 방향성 응답을 생성하는 방법임.
          + 주파수 도메인에서 지연을 구현하여 신호를 처리함.
          + 3D 근거리 빔포머와 2D 원거리 빔포머를 구현함.
    근거리 3D 빔포밍
          + 5cm 보셀 그리드에서 수행되며, RTX 4090에서 12Hz의 업데이트 속도를 달성함.
          + VisPy를 사용하여 시각화함.
    원거리 2D 빔포밍
          + 512x512 픽셀 그리드를 사용하며, 12Hz의 업데이트 속도를 달성함.
    방향성 오디오
          + 시간 도메인 지연 및 합산 빔포머를 구현하여 방향성 오디오 녹음을 가능하게 함.
    녹음
          + 마이크 배열의 데이터는 UDP 패킷으로, tcpdump와 같은 도구로 녹음할 수 있음.
          + 녹음 구현의 단점은 출력 데이터 속도가 매우 높다는 것임.
     * 다음 단계
          + 이 프로젝트는 본질적으로 완료되었으며, 앞으로 추가 작업을 할 계획은 없지만, 여러 가지 확장 가능성이 있음.
          + 더 발전된 빔포밍 알고리즘 사용
          + 모든 기능을 결합한 더 나은 GUI
          + 차별 가능한 빔포밍과 신경망 모델 결합

        Hacker News 의견

     * 소리 속도를 최적화하여 시스템의 최적 모델을 얻는 과정이 매우 복잡한 온도계처럼 작동함을 언급함
          + 모든 센서는 온도 센서이며, 일부는 다른 것도 측정함을 상기시킴
     * 4개의 마이크로폰을 사용하여 박쥐의 위치를 찾고 종을 식별하는 프로젝트를 수행했음
          + 풍력 터빈 설치의 환경적 영향을 연구하기 위해 사용되었음
     * TDM I2S 마이크로폰 대신 PDM을 사용한 이유에 대한 질문을 받음
          + ICS-52000이 저렴하고 여러 마이크로폰을 연결할 수 있는 보드가 있음
          + Jetson과 같은 I2S 하드웨어를 사용하면 16개의 마이크로폰을 연결할 수 있음
     * 초음파 스피커 배열과 결합하여 의료 응용에 사용하고 싶다는 의견을 제시함
          + 고강도 집속 초음파(HIFU)와 실시간 피드백을 결합한 형태를 상상함
     * 유튜브에서 음향 카메라의 인상적인 데모를 볼 수 있다고 언급함
          + FLIR과 같은 대기업들이 이 분야에 진입하고 있음을 지적함
          + 공공장소에서 대화를 녹음하고 나중에 '확대'하는 기능이 흥미롭고 소름 끼친다고 함
     * 모바일 기기에 고품질 방향성 오디오 기능이 도입되기를 바람
          + 소음 감소와 방향 감지가 보조기기와 번역기에 큰 도움이 될 것이라고 생각함
          + 주변의 모든 전화기가 협력하여 고품질 오디오를 제공할 수 있다면 좋겠다고 제안함
     * Boeing이 787 프로토타입에 사용한 구형 음향 시스템을 언급함
          + 비행기와 같은 시끄러운 상황에서 소리가 다른 위치에서 오는 것처럼 들릴 수 있음을 설명함
     * 위치 기반으로 소리를 분리하는 프로젝트가 멋질 것이라고 생각함
          + 이미지의 초점을 편집할 수 있는 라이트필드 카메라와 유사한 개념임
     * 긴 '팔' 형태의 PCB에 놀라움을 표함
          + 각 센서를 개별 PCB에 배치하고 보정으로 나머지를 처리하는 것이 더 나을 것이라고 제안함
     * 드론에서 이러한 기술이 점점 더 많이 사용되고 있음을 언급함
          + 군사적 목적으로 드론을 탐지하거나 드론 배송 회사가 저비용으로 비행기를 탐지하는 데 사용됨
"
"https://news.hada.io/topic?id=17990","스노우플레이크 협박 해커, 미군일 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스노우플레이크 협박 해커, 미군일 가능성

     * 두 명의 남성이 클라우드 데이터 저장 회사 Snowflake를 이용하는 여러 기업의 데이터를 훔치고 협박한 혐의로 체포되었음. 그러나 세 번째 용의자인 Kiberphant0m이라는 해커는 여전히 활동 중이며 피해자들을 공개적으로 협박하고 있음. Kiberphant0m의 신원은 미국 육군 병사로, 최근 한국에 주둔했을 가능성이 있음.
     * Kiberphant0m은 여러 사이버 범죄 포럼과 Telegram, Discord 채널에서 Snowflake 고객의 데이터를 판매하고 있음. 2023년 말, 해커들은 많은 기업이 민감한 고객 데이터를 Snowflake 계정에 업로드했으며, 이 계정들이 단순한 사용자 이름과 비밀번호로만 보호되고 있다는 사실을 발견했음.
     * 해커들은 Snowflake 계정 자격 증명을 도난당한 후, 세계 최대 기업들의 데이터 저장소를 침입하기 시작했음. 이 중에는 AT&T도 포함되어 있으며, AT&T는 약 1억 1천만 명의 개인 정보와 전화 및 문자 메시지 기록이 도난당했다고 7월에 공개했음.
     * 캐나다 당국은 10월 30일 Alexander Moucka를 체포했으며, 그는 Snowflake 해킹과 관련된 20건의 범죄 혐의로 기소되었음. 또 다른 용의자인 John Erin Binns는 현재 터키에서 수감 중임.
     * Kiberphant0m은 Moucka의 체포 소식이 전해진 직후, 해커 커뮤니티 BreachForums에 AT&T의 도널드 J. 트럼프 대통령 당선인과 카말라 해리스 부통령의 통화 기록을 게시하며 협박했음.
     * Kiberphant0m은 또한 Verizon의 푸시 투 토크(PTT) 고객의 통화 기록을 판매하고 있으며, Verizon PTT 고객을 대상으로 하는 ""SIM 스와핑"" 서비스를 제공하고 있음.

‘BUTTHOLIO’ 소개

     * Kiberphant0m은 2024년 1월 BreachForums에 가입했으며, Discord와 Telegram 채널에서의 활동은 최소 2022년 초부터 시작되었음. BreachForums에서 첫 게시물에서 Telegram 핸들 @cyb3rph4nt0m으로 연락할 수 있다고 밝힘.
     * @cyb3rph4nt0m은 2024년 1월 이후 4,200개 이상의 메시지를 게시했으며, 많은 메시지는 IoT 봇넷에 호스트 머신을 감염시키는 악성 소프트웨어를 배포할 사람을 모집하려는 시도였음.
     * Kiberphant0m은 BreachForums에서 Mirai 악성 소프트웨어를 기반으로 한 Linux DDoS 봇넷 "" Shi-Bot ""의 소스 코드를 판매했음.

‘REVERSESHELL’

     * @Kiberphant0m은 Telegram ID 6953392511로 지정되었으며, Flashpoint의 데이터에 따르면 2024년 1월 4일 Dstat 채널에 게시했음. 이 채널은 DDoS 공격을 수행하고 DDoS 대여 서비스를 판매하는 사이버 범죄자들이 모여 있음.
     * Flashpoint의 데이터에 따르면 @kiberphant0m은 2024년 4월 10일 Dstat의 다른 회원에게 자신의 대체 Telegram 사용자 이름이 "" @reverseshell ""이라고 밝힘.
     * 2022년 11월 15일, @reverseshell은 Telegram 채널 Cecilio Chat에서 자신이 미 육군 병사라고 밝힘.

PROMAN AND VARS_SECC

     * Flashpoint는 Telegram ID 5408575119가 2022년부터 Reverseshell 및 Proman557이라는 여러 별칭을 사용했다고 밝힘.
     * Intel 471은 Proman557이라는 이름이 2022년 러시아어 해킹 포럼 Exploit에서 다양한 Linux 기반 봇넷 악성 소프트웨어를 판매한 사람 중 하나라고 밝힘.

BUG BOUNTIES

     * Vars_Secc는 2023년 5월 Telegram에서 HackerOne을 통해 소프트웨어 결함에 대한 보고서를 제출하여 돈을 벌었다고 주장했음. HackerOne은 기술 회사가 제품 및 서비스의 보안 취약점에 대한 보고서를 처리하도록 돕는 회사임.
     * Vars_Secc는 reddit.com, 미국 국방부, Coinbase 등 30개 이상의 회사에서 버그 바운티를 받았다고 주장했음.
     * Kiberphant0m의 여러 정체성은 그가 최근까지 한국에 주둔한 미 육군 병사일 가능성을 강하게 시사함. Kiberphant0m의 다른 정체성은 군 계급, 연대, 또는 전문성을 언급하지 않았으나, 그의 컴퓨터 및 네트워킹 능력이 군대에서 주목받았을 가능성이 있음.
"
"https://news.hada.io/topic?id=17899","LLM 체스 이상 현상 부분적 설명 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        LLM 체스 이상 현상 부분적 설명 가능성

     * 최근 대형 언어 모델(LLM)이 체스를 잘 못한다는 미스터리가 있었음. 그러나 gpt-3.5-turbo-instruct는 예외적으로 아마추어 수준에서 체스를 잘 플레이함. 이 모델은 다른 최신 모델보다 오래되었고 크기도 작음.
     * 여러 이론이 제시됨:
          + 이론 1: 충분히 큰 기본 모델은 체스를 잘하지만, 채팅 모델로의 지시 조정에서는 그렇지 않음.
          + 이론 2: gpt-3.5-turbo-instruct가 더 많은 체스 데이터를 학습했을 가능성.
          + 이론 3: 특정 LLM 아키텍처에 무언가 특별한 것이 있음.
          + 이론 4: 데이터 유형 간의 ""경쟁""이 있어, LLM이 체스를 잘하려면 체스 게임 데이터가 많아야 함.
          + 이론 5: OpenAI가 속임수를 쓴다는 주장.
          + 이론 6: LLM은 실제로 체스를 할 수 없다는 주장.
     * OpenAI가 속임수를 쓴다는 주장은 믿기 어려움. gpt-3.5-turbo-instruct는 체스 엔진과 다르게 움직임을 선택하며, 전문가 기준으로는 뛰어나지 않음.
     * LLM은 체스를 할 수 있음. gpt-3.5-turbo-instruct는 불법적인 움직임을 거의 제안하지 않으며, 새로운 보드 상태에서도 잘 플레이함.
     * gpt-3.5-turbo-instruct는 ""완성"" 모델로, 텍스트를 받아 새로운 텍스트를 생성함. gpt-4o-mini와 gpt-4o는 ""채팅"" 모델로, 시스템 프롬프트와 사용자 프롬프트를 사용함.
     * 다양한 실험을 통해 프롬프트 조정, 예제 추가, 미세 조정 등이 모델 성능에 영향을 미칠 수 있음을 확인함.
     * 예제 추가는 성능에 큰 영향을 미쳤으며, 미세 조정도 도움이 됨. 그러나 법적 움직임 제공은 성능을 저하시킴.
     * gpt-4o를 ""완성"" 모드처럼 작동하게 유도하면 성능이 향상됨. 이는 gpt-4-base가 체스를 잘할 가능성을 시사함.
     * 결론적으로, OpenAI의 기본 모델은 더 많은 체스 데이터를 학습했을 가능성이 높으며, 채팅 모델은 완성 모델보다 성능이 떨어질 수 있음.
     * 최적의 프롬프트와 예제, 미세 조정을 찾는 것은 어렵고 비용이 많이 드는 작업임.

        Hacker News 의견

     * 작성자는 불법적인 움직임의 빈도에 대한 데이터를 제공하지 않아 의미 있는 결론을 내리기 어려움
          + 예를 들어, LLM이 전문가 수준의 의사라고 주장하면서 잘못된 의료 조언을 제외한 데이터를 제공하는 것과 비슷함
     * gpt-3.5-turbo-instruct는 후반전에서도 불법적인 움직임을 거의 제안하지 않음
          + 이 모델이 체스를 ""이해""하고 ""논리적 사고""를 할 수 있다고 주장됨
          + ""고급 아마추어"" 체스 플레이어가 불법적인 움직임을 하는 경우는 드물다는 점에서 의문을 제기함
     * 체스를 이해하는지 테스트하는 방법으로 1000개의 무작위 합법적인 위치에서 다음 움직임을 하게 함
          + ChessPositionRanking 프로젝트를 통해 생성된 위치에서 불법적인 움직임을 제안하지 않는지 확인함
          + 이러한 위치는 다음 움직임의 합법성을 테스트하는 데 유용하지만, 품질을 구별하는 데는 덜 유용함
     * 모든 사람이 틀린 것은 아님
          + 출판된 벤치마크가 훈련 중에 특정 타겟이 된다고 가정해야 함
          + OpenAI가 훈련 데이터에 체스 게임을 포함시키는 것이 자연스러움
     * LLM은 마치 주문을 찾는 것처럼 느껴짐
          + 기술 혁신이 계속되기를 바라며, LLM이 놀랍지만 때로는 SF 영화처럼 느껴짐
     * 코드 샘플로 훈련하면 ""추론""이 향상된다고 주장됨
          + ""언어에서 세계 모델""로의 논문이 작동한다면 체스가 가장 작은 사례여야 함
     * gpt-3.5-turbo-instruct가 체스 표기법을 인식하고 외부 체스 엔진을 호출하는 특별한 경우가 있을 수 있음
          + 특정 모델이 체스 표기법을 인식할 때 다른 LLM으로 전환되도록 훈련되었을 가능성 제기
     * LLM이 게임을 이기도록 명시적으로 지시하지 않았음에도 결과가 측정됨
          + ""당신은 체스 그랜드마스터입니다""라는 프롬프트에 내포된 것인지 의문을 제기함
     * 세부 조정이 도움이 되며, 예제가 세부 조정을 대체할 수 있음
          + 예제를 제공하는 것이 세부 조정과 동등한 효과를 낼 수 있다는 점에서 흥미로움
     * 프롬프트를 생각하지 않고 LLM과 체스를 두는 것이 재미있을 것임
          + LLM이 어떻게 ""생각""하는지 느낄 수 있는 새로운 방법이 될 수 있음
"
"https://news.hada.io/topic?id=17932","암흑의 숲 이론과 인터넷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             암흑의 숲 이론과 인터넷

암흑의 숲: 배경과 개념

     * ""암흑의 인터넷 숲(Dark Internet Forest)""은 기술 및 사회적 인터넷 환경에서 불안과 혼란을 설명하는 개념으로, 과학소설 ""삼체""의 작가 류츠신(Liu Cixin)의 ""암흑의 숲"" 이론을 기반으로 함
     * 킥스타터 공동 창립자인 얀시 스트릭클러(Yancey Strickler)가 2019년에 이 개념을 인터넷에 적용
     * 인터넷 공간을 ""숨겨진 은신처""와 ""위험한 장소""로 나누어 설명하며, 개인의 정신적, 사회적 안전을 중심으로 논의
          + Liu의 암흑의 숲 이론은 Fermi Paradox를 해결하는 방법으로, 모든 고급 은하 문명이 만나는 다른 문명을 파괴하는 것이 유일한 올바른 전략이라고 설명함
          + Strickler는 인터넷이 이러한 위험한 어두운 숲이 되어가고 있다고 주장하며, 뉴스레터, 팟캐스트, 비공개 메시지 보드 등 다양한 보호 공간이 이러한 숲에 포함된다고 설명

암흑의 숲의 주요 특징

     * 안전한 공간: 비공개 인스타그램, 초대 전용 게시판, 슬랙 채널, 스냅챗 등 비공개적이고 최적화되지 않은 온라인 커뮤니티에서 심리적 안정감을 제공
     * 맥락 붕괴(Context Collapse): 특정 그룹을 대상으로 한 의사소통이 예상치 못한 그룹에 의해 접촉되면서 발생하는 혼란으로, 인터넷의 주요 문제로 부각
     * 추출적 시스템: 인터넷의 인덱싱, 최적화, 게이미피케이션이 개인의 본래 맥락을 왜곡하고 악용

암흑의 숲의 양면성

     * 은신처로서의 암흑의 숲: 심리적, 사회적 안정감을 제공하며 진정한 자신을 드러낼 수 있는 환경 (슬랙, 비공개 인스타그램, 초대 전용 포럼 등)
     * 위협적인 암흑의 숲: 광고주, 클릭 유도 콘텐츠 제작자, 트롤 등 인터넷의 추출적 시스템이 지배하는 위험한 공간

글로벌 관점에서 본 암흑의 숲

     * 암흑의 숲 이론이 서구 중심의 관점을 반영하며, 미국 외부 지역의 더 심각한 피해를 간과
     * 예시:
          + 페이스북이 미얀마에서의 인종 청소와 제노사이드에 영향을 미친 사례
          + 트위터에서 여성, 특히 유색 인종 여성이 겪는 조직적 괴롭힘
          + 틱톡 알고리즘이 젊은 층에게 자해, 극단적 사고를 유도하는 콘텐츠 노출

책임의 결여와 상상력 부족

     * 메가 플랫폼(페이스북, 트위터 등)은 인간의 행동을 추출 가능한 데이터로 전환하는 시스템으로 설계 되었으며, 문제 해결보다는 수익 창출에 초점
     * 기술 플랫폼의 구조적 문제를 인식하지 못하고 이에 대응하지 않는 것은 상상력과 용기의 부족으로 이어짐
     * 이러한 시스템이 불가피한 것이 아니라, 법적, 금융적 구조물에 불과하다는 점을 기억하는 것이 중요

더 나은 인터넷을 위한 설계 방향

     * 지역화된 네트워크: 글로벌 메가 플랫폼의 중앙 집중적 시스템 대신 지역적 규범과 문화를 반영하는 다수의 소규모 네트워크 필요
     * 생태계적 접근법: 실제 숲과 유사하게 연결성과 다양성을 갖춘 네트워크 설계
     * 공공 인터넷의 가치: 상업적 이익보다 인간의 상호작용과 협력의 가치를 반영한 시스템 구축

디지털 생태계의 미래: 소셜 인터넷은 숲이어야함

     * 숲은 파괴 후 새로운 생명을 창조하는 공간으로, 인터넷도 이를 반영해야 함
          + 실제 숲처럼 연결되어야 하며, 무한한 틈새와 교환 및 놀이의 공간을 제공해야 함
          + 이는 인간과 비인간의 협력의 결과로, 추출이 과도하지 않고, 진화적 변화를 위한 실험을 지속할 수 있는 환경을 제공해야 함.
     * 현재의 메가 플랫폼은 일시적인 현상으로, 더 나은 시스템을 구축할 기회가 존재
     * 기술은 본질적으로 ""불타는 숲""처럼 빠르게 변하지만, 그 잔재에서 새로운 것이 자랄 가능성도 있음

   번역된 부분만 보는 중인데 ""지역화된 네트워크""라는 단어에서 안티프래질 개념이 떠오르네요.
   소규모 네트워크로 쪼개지는게 저도 좋다고 보는 입장인데,
   방법이 없는 것 같습니다. 점점 커지고 하나가 되어가는 중...

        Hacker News 의견

     * 엔지니어들이 사회과학에 대한 경멸이 그들을 사회 구조를 재생산하고 강화하는 시스템을 구축하도록 조종당하게 함
          + 다학문적 접근의 부족이 문제의 일부임
          + 인간은 합리화에 놀라울 정도로 능숙함
     * AI와 봇이 인터넷을 끊임없이 훈련시키는 필요성으로 인해 인터넷이 모든 것을 소비하고 모방하는 공간으로 변함
          + AI는 우리를 파괴하려 하지 않음
          + 그러나 우리의 행동과 소리가 복제되고 증폭되는 상황을 상상할 수 있음
     * 다크 포레스트 경험은 소셜 미디어가 공격적이고 불쾌한 공간이 되어 사람들이 더 전문화된 플랫폼으로 이동하게 만듦
          + 일반적인 플랫폼에 가입하는 것이 나쁜 경험임
          + 사기, 판매, 포르노, 극단적 폭력, 유명인 숭배, 이념적 극단주의, 인종차별, 성차별 등이 문제임
     * 다크 포레스트 가설은 Liu Cixin 이전에도 존재했음
     * 네트워크를 고쳐야 한다는 것과 분산 네트워크가 해결책이라는 것 사이에 변화가 있는 것 같음
          + 분산 네트워크는 관리가 불가능함
          + 사람들은 정보를 관리당하고 싶어하지 않음
          + Facebook이 미얀마에서 네트워크를 충분히 관리하지 않았다는 비판과 모순됨
     * 90년대에 인터넷은 사이버스페이스와 정보 고속도로로 불렸음
          + 2000년에서 2012년 사이에 웹이 현실 세계의 연장선이 됨
          + 2024년에는 웹이 공공 담론의 중심이 됨
     * 익명성을 유지하는 것이 온라인에서의 실수를 쉽게 버릴 수 있는 장점임
          + 실수가 직업에 영향을 미치지 않음
     * 다크 인터넷 포레스트의 가장 위험한 약점은 연결의 광범위한 풍경을 우리가 단순히 없이도 잘 지낼 수 있는 것으로 간주하는 것임
          + 사회적 지위가 확립된 사람들에게는 맞을 수 있음
          + 그러나 다른 사람들은 광범위한 네트워크의 혜택을 포기해야 하는가?
     * 사회적 이동성은 경제 구조의 결과이며 네트워킹의 결과가 아님
          + '아는 것이 아니라 아는 사람'이라는 말이 있지만, 다른 방법으로 성공한 사람들은 비밀을 공유하는 데 덜 효과적일 수 있음
     * 사회 인터넷의 나쁜 결과가 오프라인 세계를 왜곡할 때 문제가 집단적인 것으로 변함
          + 갈등이 다가오고 있음
          + 정보에 주의를 기울이고, 반대되는 아이디어에 도전하지 않는 것이 현명함
"
"https://news.hada.io/topic?id=17949","Autotab - 복잡한 웹 작업을 API로 만들어 주는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Autotab - 복잡한 웹 작업을 API로 만들어 주는 도구

     * Chrome 기반 브라우저로, 복잡한 작업을 수행할 수 있도록 학습시킬 수 있는 기능을 제공하며, 이를 앱 또는 백엔드에서 실행하기 위한 간단한 API를 지원
          + 자체 편집기를 통해 브라우저에서 하는 작업들을 녹화하여 API로 실행 가능한 작업으로 만들어줌
          + 사용자는 브라우저 환경에서 워크플로우를 정의하고, 이를 바탕으로 자동화된 작업을 생성할 수 있음
     * 주요 기능
          + 자동 복구 기능: 웹사이트가 변경되더라도 자동화 작업이 중단되지 않음
          + 전용 저작 도구: 모델에 메모리를 구축하면서 작업 단계를 정의할 수 있음
          + 컨트롤 흐름 및 높은 구성 가능성: 복잡한 추론 작업에서도 자동화가 올바르게 작동하도록 지원
          + 웹사이트 호환성: 특정 사이트 API 없이도 모든 웹사이트에서 작동 가능
          + 보안 실행 환경: 클라우드 또는 로컬에서 안전하게 실행 가능
          + 간단한 API: Python과 Node용 클라이언트 라이브러리를 제공하는 REST API

   브라우저에서 단순 반복작업 할 일이 생겼는데 이 앱 덕분에 좀 편하게 진행했습니다.

   100여 개의 jira 태스크를 다른 이슈의 서브 태스크로 모두 이동하는 것이었는데;
   마우스 클릭하기 너무 힘들 작업이었는데 재생 버튼만 여러번 눌러 해결했습니다.

   별도 브라우저라는 점이 끌리지가 않네요..

   Autotab - AI 기반 크롬 확장 프로그램으로 Selenium 스크립트 생성
   1년전에는 셀레니움 스크립트 생성이었는데 이걸 API 생성으로 약간 피봇팅했나 보네요.
   OpenAI가 투자했다고 나오는데, 찾아보니 내용은 없고요. 아마도 OpenAI Startup Fund의 Converge 2 중에 하나일듯도 한데, 이 프로그램 결과가 공개되질 않아서 어떤 스타트업들이 투자받았는지 미스테리합니다.
   Converge 1 에는 Descript, Harvey, Mem, Speak(한국회사 맞습니다) 등이 포함되었습니다. 소문엔 요즘 핫한 Cursor도 이 Converge 1에 포함이라는 얘기도 있었는데, 그냥 별도로 OpenAI에서 $8M 투자 받은거로 보나 봅니다.
"
"https://news.hada.io/topic?id=17871","AAA – 분석적 안티앨리어싱 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AAA – 분석적 안티앨리어싱 기술

오늘의 여정: 안티 앨리어싱

     * 안티 앨리어싱은 수십 년간의 수학, 창의적인 기술, 끊임없는 혁신을 통해 발전해 온 예술 형태임.
     * SSAA, SMAA, DLAA 등 다양한 접근 방식이 존재하며, 각기 다른 방법으로 동일한 목표를 달성하려 함.
     * 이 글에서는 이러한 방법들이 어떻게 작동하는지 살펴보고, 문제를 해결하는 새로운 방법인 분석적 안티 앨리어싱을 소개함.

설정

     * 안티 앨리어싱 알고리듬을 이해하기 위해 WebGL 캔버스를 사용하여 움직이는 원을 그리며 구현함.
     * 해상도가 너무 높아 앨리어싱이 보이지 않는 경우, 해상도를 낮춰서 확인할 수 있음.

기술적 분석

     * GPU 코드 이해는 필수는 아니지만, 분석적 부분을 이해하는 데 도움이 됨.
     * 원은 기하학적으로 그려지는 것이 아니라 셰이더에 의해 그려짐.

SSAA

     * SSAA는 슈퍼 샘플링 안티 앨리어싱의 약자로, 더 큰 해상도로 렌더링한 후 다운샘플링하는 방식임.
     * 구현은 간단하지만, 메모리와 계산 요구량이 큼.
     * 적절한 샘플 배치가 필요하며, 렌더링 파이프라인과 깊이 있는 통합이 필요함.

MSAA

     * MSAA는 모델의 실루엣, 겹치는 기하학, 텍스처 가장자리에서만 슈퍼 샘플링을 수행함.
     * 하드웨어에 의해 구현되며, 지원 여부는 하드웨어에 따라 다름.
     * 특정 상황에서는 성능 비용이 없을 수도 있음.

포스트 프로세스 안티 앨리어싱

     * 2009년 Alexander Reshetov의 논문으로 MLAA가 탄생함.
     * FXAA는 MLAA에서 영감을 받아 개발된 알고리듬으로, 성능이 저렴하고 구현이 쉬움.
     * 복잡한 장면에서 더 효과적임.

분석적 안티 앨리어싱

     * 분석적 안티 앨리어싱은 문제를 역으로 접근하여, 필요한 모양을 알고 이미 안티 앨리어싱된 픽셀을 화면에 그리는 방식임.
     * 추가 버퍼나 하드웨어 요구 사항이 없으며, 기본 WebGL 1.0 또는 OpenGLES 2.0에서도 실행 가능함.
     * 픽셀 크기를 계산하여 모양의 경계를 페이드 아웃함.

구현

     * 서명 거리 필드를 사용하여 샘플링하는 각 점에서 원하는 모양까지의 거리를 알 수 있음.
     * 픽셀 크기를 계산하는 방법에는 dFdx, dFdy, fwidth 함수가 사용됨.
     * 블렌딩은 알파 블렌딩이나 MSAA + Alpha to Coverage를 사용하여 수행됨.
     * smoothstep 대신 linearstep을 사용하여 성능을 최적화할 수 있음.

결론

     * 분석적 안티 앨리어싱은 모양의 경계를 정확하게 페이드 아웃하여 부드러운 가장자리를 제공함.
     * 다양한 구현 방법이 있으며, 성능과 정확성 사이에서 선택할 수 있음.

        Hacker News 의견

     * 그래픽 프로그래밍 분석이 WebGL 예제를 통해 이루어졌으며, 매우 깊이 있는 기사임
          + MSAAx4를 사용해왔으나 FXAA/TAA로 전환을 고려 중이며, UI 항목에 대한 분석적 접근을 배울 수 있었음
          + 그래픽 프로그래밍 관련 자료가 드물지만, 프레임 분석 목록이 유용한 자원임
          + AA 설정의 약어 차이를 설명하지 않는 게임들이 많아 사용자 친화성이 부족함
          + SDF(mSDF)는 이미 충분히 좋은 고전적인 기술임
          + Slug와 DirectWrite에서 베지어 곡선 세그먼트를 픽셀 단위로 해결하는 것이 현재 또는 미래의 기술임
          + Captain Disillusion의 작업을 처음 알게 되었으며, 비디오 효과에 관심 있는 사람들에게 추천함
          + 원과 확대된 부분이 포함된 프레임이 메시지를 전달하는 훌륭한 방법임
          + 부드러운 그라데이션이 매우 만족스러움
          + 2D와 3D 렌더링 엔진은 완전히 다른 목표와 사용 사례를 가짐
          + 3D에서는 중요하지 않지만 2D에서는 정확성과 편향이 중요한 AA 기술 기준이 있음
          + NeoTokyo 스크린샷이 인상적이었으며, 해당 모드 서버를 운영하며 즐거운 시간을 보냈음
          + SSAA를 '화면 공간 안티앨리어싱'으로 잘못 읽었음
"
"https://news.hada.io/topic?id=17979","Show GN: 듀얼 페이지 싱크 - 외국어 개발문서를 보기 쉽게 해주는 크롬 확장프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: 듀얼 페이지 싱크 - 외국어 개발문서를 보기 쉽게 해주는 크롬 확장프로그램

   크롬 확장프로그램 하나 만들었는데 써보세유

   개발문서 볼 때, 원문과 한글을 동시에 스크롤 하면서 보면 좋겠다는 니즈로 만들었어요
     * 확장프로그램 실행 시 현재 창과 동일한 사이트가 뜨면서 화면 양쪽으로 분할
     * 한쪽을 구글 번역 등으로 번역 후 스크롤하면서 사용
     * url 연동 기능으로 한 브라우저에서 다른 사이트로 이동하면 같이 이동
     * 개발문서 자체가 한글 번역 본을 제공할 경우, url 동기화 제거 후 사용
     * 싱크가 안맞을 경우 스크롤 동기화를 off 한 후 수동으로 스크롤

   두 브라우저의 높이 비율을 계산하여 스크롤을 연동하고 있어 조금의 차이는 있을 수 있어요!

   좋은 기능이네요.
   스크롤 동기화 아이디어:
   스크롤 발생시 스크롤 위치를 이용하기 전에 elementFromPoint 로 마우스 위치 객체를 얻어서 xpath 만들어 해당 객체를 찾아 객체의 높이로 맞춰주면 어떨까요?
   해당 객체가 화면 밖에 걸쳐있으면 스크롤 위치로 대체하는 등 예외사항이 좀 필요하겠네요.

   오 이건 꼭 써보고 싶네요
   개발하시느라 고생하셧습니다

   감사합니다!!

   분할 후 번역 까지 했는데 왜 저는 스크롤과 페이지 이동 등 싱크가 않될까요?
   다른 설정이 있나요?

   뉴스 사이트 같은곳에서는 잘 되네요.
   https://github.com/features/copilot
   이런 인터렉티브한 사이트에서 확인 해서 잘 안되었나봐요.
   좀 더 사용해 보겠습니다. 감사합니다.

   사용해주셔서 감사합니다!
   코파일럿 메인 사이트 같은 경우는 저는 잘되는데 혹시 안되시나요?

   말씀하신 것처럼 피그마처럼 url 이 수시로 변하는 사이트의 경우에는 무한로딩이 일어날 수 있고,
   스토어의 서비스 설명 글에 적어놓긴 했는데, 구글이 제공하는 서비스 들(gmail, drive)에서도 작동하지 않는거 같아요. 스크롤 이벤트가 감지되지 않는다든가 등의 이유 같은데, 아직 파악은 안되서 적용하지 못했습니다!

   immersive translate와 유사한 접근 방식이군요. 항상 번역을 신뢰할 수는 없어서 저도 원문과 번역본을 동시에 보는걸 좋아해요.

   사용해주셔서 감사합니다~
   맞아요 저도 그런 경험 때문에 만들게 된게 커요!
   한국인이 직접 번역한게 아니면 아직 자연스럽지가 않더라고요, 아직 gpt 의 번역을 크롬번역이 따라가지도 못하는거 같구요
"
"https://news.hada.io/topic?id=17978","Ask GN: Mono-repo vs Git Submodules vs 각자 도생 repo: 어떤걸 선호하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask GN: Mono-repo vs Git Submodules vs 각자 도생 repo: 어떤걸 선호하시나요?

   서로 성격은 다르지만 관련 있는 여러 프로젝트를 어떻게 통합(or 하지 않는걸) 선호하시나요?

   예를 들어, 동일 서비스에 대해 front-end, back-end(api), serverless, batch, pipeline, ... 등등 있다면
    1. Mono-repo
       서비스가 같다면 레포지토리는 하나다! 각 프로젝트는 패키지/폴더 구조로
       -> 커밋 관리는 어떻게..? CI/CD나 pre-commit 같은 hook 복잡해질텐데..
    2. Git Submodules
       성격이 다르면 최소한 git 히스토리는 따로 관리해야지! 그래도 최대한 하나로 묶어서..
       -> sub module sync 등 러닝 커브.. 머지도 복잡해지고.. 다른 개발자들이 따라올까?
    3. 각자 도생 repo
       심플하게! 다른 프로젝트면 레포도 다르게!
       -> A 서비스 보려면 무슨 레포 봐야해요? 어 이거랑, 저거랑,.. 또 뭐 있더라...

   정답은 없는것 같지만 어떤 걸/왜 선호하시는지 궁금합니다!

   저는 각자 도생 repo...
   내가 이 기능 관련 api의 히스토리를 보고 싶으면 뭘 봐야 하지? 라는 질문이 떠올랐을 때, repo 하나를 하나의 기능이랑 매칭 시켜두는 게 편하더라고요.

   저는 웬만한 상황에선 모노레포를 사용하지만, 서브모듈을 사용하는 케이스가 2개 있는데요.
    1. 외부 퍼블리셔를 고용했을 때.
       퍼블리싱에 필요한 정보 이외의 것을 외부 퍼블리셔에게 공개하고 싶지 않을 때 서브모듈을 사용합니다.
    2. 외부 솔루션을 커스터마이징 해야할 때.
       특히 플러그인 기능을 제공하는 솔루션일때 서브모듈을 사용합니다.
       해당 외부 솔루션을 서브모듈로 등록해두고, 내 플러그인들을 심링크 등으로 플러그인 경로 내에 넣어주는 식으로 작업합니다. 내 플러그인들은 나대로 따로 버전 관리하고, 외부 솔루션은 그들의 버전 컨트롤을 그대로 유지할 수 있는 장점이 있어요.

   submodule 사용경험은 다들 안좋군요.. 개선시킬 수 있는 툴이 있다면 좋겠네요

   예전에는 그냥 각자 독립적인 repo들을 사용했지만 최근에는 서브모듈을 사용하는 방법으로 완전히 틀었습니다.
   예전에는 git에 대한 이해도가 낮아서 서브모듈을 제대로 활용하지 못했지만, 현재는 서브모듈을 사용하는 게 더 나을 것이라고 생각해서입니다.
   다만 서브모듈을 사용하면 해당 서브모듈에 대한 커밋을 하고 부모 repo에도 커밋을 다시 해야 하는데 그 결과 두 시기가 벌어지게 되어 repo의 일관성이 떨어지는 문제가 발생한다는 문제가 뒤따르는 것 같습니다.

   https://monorepo.tools/
   위 사이트 안 보셨으면 한번 보시면 좋을 것 같구요.

   서브 모듈은 개인 경험상 비추합니다.
   서브 모듈로 다른 저장소의 코드를 공유하고 싶으면 차라리 패키지로 배포하는 게 나을 것 같네요.
    1. API 서버를 직접 구현하는 경우에는 API 규약을 맞추기 위해서 프론트엔드-백엔드 모노레포를 사용했습니다
    2. Supabase와 같이 DB에 의존성이 강한 2티어 아키텍처 프로젝트의 경우에는 스키마 자동 생성 도구에 의존해서 프론트엔드와 백엔드를 별도의 레포로 분리했습니다
    3. 디자인 시스템의 경우에는 아직 완전히 해결하진 못했는데 일단 서브모듈은 학습 곡선이 가팔라서 철회했고 프로젝트 템플릿이 나은 방향이라고 생각중입니다

   저희 회사의 경우에는 프로젝트 당 팀원이 적고 프론트엔드와 백엔드의 언어와 기술스택이 분리되어있어서 직무간 교차 기여는 거의 없었습니다. 모든 IT 시스템과 마찬가지로 결국 조직 구성을 따라가는 것 같네요

   오.. 인터페이스를 사람이 맞추느냐 툴이 해주느냐에 따라 상대 코드 가시성을 조절하는 접근법이군요

   제가 Mono-repo 경험이 없어서 궁금한게 하나 있는데요. Mono Repo로 할 때, 여러 프로젝트나 서비스에 공통적인 모듈(ex. 디자인 시스템)은 각각 Mono Repo에 들어가는 식이 되나요? 아니면 얘는 어쩔 수 없이 별도의 Repo로 빠져서 참조하는 식으로 하나요?

   공통모듈에 대한 접근은 yarn workspace 같은 도움을 받아 symlink 형태로 접근했던거 같습니다!

   저는 회사에서나 개인 프로젝트에서느 프론트 백엔드 배치 등 구분하지 않고 하나의 git으로 관리하고 있습니다.

   하위호환을 지키기보다 둘을 같이 수정하면 편한 경우도 있고요. 둘 다 팀 규모가 작아서 괜히 나눠서 좋을 게 없다고 할지... 깃허브 액션은 변경된 부분만 돌게 설정해두는 수고 정도는 감수할 만 했습니다. 무엇보다도 백엔드 프론트 구분보다는 서로가 서로에게 기여할 수 있는 게 좋다고 할까요. (프롬트 작업하다가 백엔드에 필요한 게 있으면 직접 추가하거나, 에러도 직접 고치는 등...)

   음 확실히 규모가 작거나 역할군이 엄격하지 않으면 모노레포를 선호하시는거 같군요! 깃 히스토리가 섞이는? 것도 크게 게의치 않으시나요? (어차피 다 보는 코드니까?)

   재미있는 점은 제 사이드 프로젝트에서도 그러는데요. 지금 12명 정도랑 같이 작업을 했는데. 한 명 한 명마다 프론트에서 백엔드까지 한 호흡으로 작업을 합니다. 버티컬 슬라이스랑 유사한 것도 같네요.

   그걸 섞인다고 보지 않는 편이에요. 하나의 PR에서 프론트랑 백엔드랑 둘 다 수정하는 경우도 많아서요. 저희는 모두가 풀스택 4명이라는 기조라서, 백엔드/프론트 가리지 않고 서로 리뷰도 하고 변경사항도 알아야 합니다.

   모듈이 별로 크지 않다면 모노레포
   모듈이 크다면 서브모듈

   아니면 오픈소스 배포할 때 서브모듈만 기여하게 하고 메인레포는 자체적으로 관리하게 설정하고 싶다면
   서브모듈로 분리하는 것 같습니다.

   근데 서브모듈 끼면 오픈소스할 때 다른 사용자가 기여를 위해 테스트나 빌드관련해서 문서 작성하기가 조금은 복잡해지는 것 같긴합니다.

   그래서 개인적으로는 둘의 기여가 다른 경우가 아니라면 모노레포로 하거나
   다른 깃헙으로 하는데 각각을 패키지로 배포하거나, 도커이미지로 하는 방식으로 관리하기는 것 같습니다

   오픈소스 관련해서는 생각 못했는데 의견 감사합니다!

   머지 커밋만 할 자신이 있으면 모노레포,
   수시로 리베이스할거면 멀티리포,
   서브모듈? 그냥 OS에서 제공하는 디렉토리 링크 쓰세요…
"
"https://news.hada.io/topic?id=17918","HN 공개: 우주 해적을 다룬 Terminal 게임 'Rebels in the Sky'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            HN 공개: 우주 해적을 다룬 Terminal 게임 'Rebels in the Sky'

     * Rebels in the Skydemo_v1.0.18.mp4
          + 2101년, 기업들이 세계를 지배하는 시대임. 자유를 얻기 위해 해적단에 가입하여 은하계를 약탈해야 함. 생존의 유일한 방법은 농구를 하는 것임. 이제 당신의 차례로, 자신의 팀을 만들고 은하계를 돌아다니며 가치 있는 농구 상대를 찾아야 함. 게임은 아직 개발 중이며, 종종 큰 변화가 도입됨. 저장 파일이 유효하지 않아 이전 게임을 계속할 수 없는 경우, 새 게임을 시작하거나 저장 파일을 이전할 수 있는지 확인하기 위해 문제를 제기해야 함.
     * Just try it out!
          + SSH를 통해 게임을 시도할 수 있음: ssh rebels.frittura.org -p 3788. 비활성 상태가 2일 지속되면 저장 파일이 삭제됨.
     * Installation
          + Build
               o Rust 도구 체인이 설치되어 있어야 함: https://www.rust-lang.org/tools/install. 그런 다음 저장소를 복제하고 cargo build --release로 게임을 빌드할 수 있음.
          + With cargo
               o cargo install rebels
          + From the latest release page
               o 플랫폼에 맞는 최신 릴리스 자산을 다운로드: https://rebels.frittura.org
               o chmod +x rebels로 실행 권한 부여
          + Distro Packages
               o Arch Linux
                    # rebels-in-the-sky는 공식 저장소에서 설치 가능: pacman -S rebels-in-the-sky
     * Run
          + 이 게임은 터미널 애플리케이션으로 실행되며, 터미널에서 실행 파일을 실행하면 됨: ./rebels. 최소 터미널 크기: 160x48. 모든 터미널이 게임 색상을 잘 지원하지 않으므로 다양한 터미널을 시도해야 할 수 있음. 테스트된 터미널 목록:
               o Linux: 기본 터미널
               o MacOS: iTerm2, tabby, WezTerm
               o Windows: tabby
          + 중요: 현재 로컬 봇 팀이 기본적으로 생성되어 게임을 더 즐겁게 만듦. 이 동작은 -f 플래그를 실행 파일에 전달하여 비활성화할 수 있음. 향후 더 많은 플레이어가 가능해지면, 게임은 온라인 팀만으로 기본 설정될 예정임.
     * Music
          + 이전 버전에서는 게임 내에서 음악을 직접 재생할 수 있었으나, 바이너리 크기를 줄이기 위해 제거됨. 이제 음악은 인터넷 라디오에서 스트리밍됨. 여전히 https://radio.frittura.org/rebels.ogg에 연결하여 게임 사운드트랙을 직접 들을 수 있음. assets/data/stream_data.json에 라디오 방송국을 추가할 수 있음.
     * Credits
          + 행성 GIF는 Deep Fold의 픽셀 행성 생성기를 사용하여 생성됨. Il Deposito에게 영감과 훌륭한 음악 아카이브에 감사의 뜻을 전함.
     * Contribution
          + 디스코드에 참여하세요! 게임에 대한 고정된 로드맵은 아직 없으며, 누구나 아이디어로 참여할 수 있음. 여정을 따라가다 보면 버그를 만날 가능성이 높음. 버그를 발견하면 문제를 제기하고 발생한 일을 설명해야 함. 개발자라면 기여하고 싶을 때 풀 리퀘스트를 열어도 됨.
     * License
          + 이 소프트웨어는 GPLv3 라이선스로 배포됨.

        Hacker News 의견

     * 서버가 모든 트래픽을 처리할 수 없지만, 게임이 중앙 권한 없이도 작동할 수 있음을 보여줄 기회임. 새로운 릴레이어와 SSH 노드를 생성했음.
          + ssh 85.214.130.204 -p 3788 명령어를 사용하여 SSH 접속 가능하지만, 이전 서버에 연결을 시도하므로 릴레이가 작동하지 않음
          + 로컬 클라이언트를 rebels -i 85.214.130.204 플래그와 함께 시작하여 대체 릴레이어 노드 IP 주소를 지정할 수 있음
     * 예비 트레일러 링크 제공: https://rebels.frittura.org/demo_v1.0.18.mp4
     * 행성/위성 애니메이션이 매우 아름다움
     * 독창적이지만 익숙해지기 어려울 것 같음. 나중에 시도해볼 계획임. 피드백: 테마의 혼합으로 인해 비디오를 봐도 게임플레이를 평가하기 어려움. 예를 들어, 언제 행동을 취하고 언제 화면을 벗어나는지 알기 어려움
     * 친구가 FTL을 플레이했는데, 그 게임이 단순한 터미널 게임이라고 생각했음
     * 매우 재미있음! Windows 터미널에서도 잘 작동함. 마우스, 키보드, 색상 모두 좋음
     * 행성 애니메이션이 Captain Blood를 떠올리게 함. 제약에서 창의성이 나옴
     * 정말 놀라움!!! 너무 좋아서 만들어줘서 고마움
     * 완전히 p2p 게임을 만든다는 흥미로운 아이디어임. 게임에서 사용자 간 상호작용이 어떻게 이루어지는지 궁금함
     * 정말 멋짐. TradeWars 2002와 스포츠볼 관리의 혼합 같음. 잘했음
"
"https://news.hada.io/topic?id=17951","Anthropic, Model Context Protocol 오픈소스로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Anthropic, Model Context Protocol 오픈소스로 공개

     * MCP(Model Context Protocol)는 AI 어시스턴트를 콘텐츠 저장소, 비즈니스 도구, 개발 환경과 같은 데이터 시스템에 연결하기 위한 새로운 표준으로, 보다 나은 응답 생성을 목표로 함
     * AI 어시스턴트가 주류로 자리 잡으면서, 업계는 모델 기능에 많은 투자를 하여 추론과 품질에서 빠른 발전을 이룸. 그러나 데이터와의 고립으로 인해 가장 정교한 모델조차도 정보 사일로와 레거시 시스템에 갇혀 있음. 새로운 데이터 소스마다 맞춤 구현이 필요하여 연결된 시스템을 확장하기 어려움
     * MCP는 이 문제를 해결함. MCP는 데이터 소스와 AI 시스템을 통합하는 단일 프로토콜로, 파편화된 통합 과정을 간소화하고 더 신뢰성 있는 연결성을 제공함

모델 컨텍스트 프로토콜 (MCP)

     * MCP는 데이터 소스와 AI 도구 간의 안전한 양방향 연결을 구축할 수 있도록 지원하는 개방형 표준
     * 아키텍처는 간단하며, 개발자는 MCP 서버를 통해 데이터를 노출하거나 MCP 클라이언트를 구축하여 이러한 서버에 연결할 수 있음
     * 주요 구성 요소
          + MCP 명세 및 SDK
          + Claude 데스크톱 앱에서 로컬 MCP 서버 지원
          + 오픈소스 MCP 서버 저장소: Google Drive, Slack, GitHub, Postgres 등의 데이터 소스를 지원하는 MCP 서버 제공
          + Claude 3.5 Sonnet은 MCP 서버 구현을 빠르게 구축할 수 있도록 지원하며, 기업 및 개인이 데이터셋을 AI 도구와 빠르게 연결 가능하도록 도움
          + Block, Apollo, Zed, Replit, Codeium, Sourcegraph 등 다양한 기업이 MCP를 도입하여 AI 에이전트의 정보 검색 및 기능 확장 지원
     * 장점
          + 개발자는 각 데이터 소스에 대한 개별 커넥터를 유지할 필요 없이 표준 프로토콜을 사용 가능
          + AI 시스템이 여러 도구와 데이터셋 간에 컨텍스트를 유지할 수 있어 더 지속 가능한 아키텍처 구축 가능

시작하기

     * 개발자들은 오늘부터 MCP 커넥터 구축 및 테스트 가능
     * Claude for Work 고객은 MCP 서버를 로컬에서 테스트하여 내부 시스템 및 데이터셋과 연결 가능
     * 곧 원격 프로덕션 MCP 서버 배포를 위한 개발자 도구를 제공할 예정

        Hacker News 의견

     * Twitter, Reddit, 문서를 통해 정보를 수집한 후, 전체적인 그림을 이해하게 되었음. 초보자를 위한 빠른 시작 가이드를 제공함
          + 빠른 시작 가이드 링크
     * @jspahrsummers와 함께 Anthropic에서 몇 달 동안 작업해왔으며, 질문에 답변할 준비가 되어 있음
     * ""Protocol Handshake"" 섹션에서 자연어를 데이터베이스 쿼리로 변환하는 과정에 대한 자세한 정보가 필요함. 비효율적이거나 잘못된 쿼리가 데이터베이스에 영향을 미칠 경우, 이를 사용자 정의할 수 있는지 궁금함. 민감한 데이터가 쿼리에서 반환되지 않도록 보장하는 방법이 필요함
     * 표준화를 추진하는 것이 기쁘며, 많은 사람들이 자체 통합을 작성하고 있어 단편화와 반복이 매우 높음. 터미널 코딩 에이전트를 구축 중이며, 외부 서비스와의 연결을 계획하고 있음. Anthropic의 mcp 통합을 감사히 여김
     * 표준화가 이루어진다면 산업에 큰 도움이 될 것임
     * Matt Pocock의 2분짜리 비디오 개요가 유익함
          + 비디오 링크
     * 모든 LLM에 대한 통합 인터페이스 제공 아이디어가 마음에 들지만, 왜 로컬 전용인지 이해하기 어려움. 웹 앱에서 github에 연결하여 Claude가 코드 저장소에 접근할 수 있다면 더 흥미로울 것임. 현재 로컬 파일 시스템에서 가능할 것 같음. LLM 기반 앱을 구축할 때, RAG를 사용하여 데이터를 프롬프트에 주입하는 방식 대신 사용할 수 있을지 궁금함. 특정 데이터와의 사용 사례가 현재로서는 매우 제한적이라고 생각함
     * LLM 전용 API가 있을지 궁금하며, 일반적인 웹사이트 간 API 통합에도 유용할지 의문임
     * 프롬프트와 샘플링 인터페이스의 비대칭성에 대해 궁금함. 클라이언트가 서버에서 프롬프트를 가져와서 실행하는 방식과 샘플링 인터페이스에서 서버가 클라이언트에 완료 요청을 제시하는 방식의 차이점이 이해되지 않음. MCP의 기능 클래스가 발전할 가능성이 있음
     * 주요 플레이어가 아닌 오픈 소스 솔루션을 신뢰하지 않음. 다른 주요 플레이어와 함께 출판되지 않으면 왜곡된 인센티브가 너무 큼
"
"https://news.hada.io/topic?id=17886","ICC, 네타냐후, 갈란트 및 하마스 관계자들에 대한 체포영장 발부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ICC, 네타냐후, 갈란트 및 하마스 관계자들에 대한 체포영장 발부

     * 팔레스타인 상황: ICC 예심재판부 I, 이스라엘의 관할권 도전 기각 및 벤자민 네타냐후와 요아브 갈란트 체포영장 발부
     * 이스라엘의 요청에 대한 결정
          + 이스라엘은 2024년 9월 26일 두 가지 요청을 제출함. 첫 번째 요청은 팔레스타인 상황에 대한 ICC의 관할권을 일반적으로, 그리고 이스라엘 국민에 대해 구체적으로 도전하는 것이었음.
          + 두 번째 요청은 검찰이 이스라엘 당국에 새로운 조사 개시 통지를 제공하도록 명령할 것을 요구함.
          + 재판부는 이스라엘의 관할권 도전이 시기상조라고 판단함.
     * 체포영장
          + 재판부는 벤자민 네타냐후와 요아브 갈란트에 대해 인도에 반한 죄와 전쟁 범죄 혐의로 체포영장을 발부함.
          + 체포영장은 비밀로 분류되었으나, 피해자와 그 가족의 이익을 위해 일부 정보가 공개됨.
     * 혐의 범죄
          + 네타냐후와 갈란트는 전쟁 범죄와 인도에 반한 죄에 대한 공동 가해자로서의 책임이 있다고 판단됨.
          + 이들은 가자 지구의 민간인에게 필수 물품을 의도적으로 차단하여 생존을 위협한 혐의를 받고 있음.
     * 배경
          + 팔레스타인은 2015년 1월 1일 로마 규정의 관할권을 수락하고, 2015년 4월 1일 로마 규정에 가입함.
          + 2018년 5월 22일, 팔레스타인은 2014년 6월 13일부터의 상황을 ICC에 회부함.
          + 2021년 3월 3일, ICC 검찰은 팔레스타인 상황에 대한 조사를 개시함.

        Hacker News 의견

     * 양측 지도자가 전쟁 범죄로 기소되는 것이 정당하다고 생각하는 사람이 나뿐인지 궁금함
          + 누군가 나를 공격하고 내가 그들의 가족을 다치게 하면, 공격자와 나 모두 범죄적 폭행에 대해 유죄임
          + 완벽한 비유는 아니지만, 이 상황이 그렇게 보임
          + ICC와 검사는 매우 확고한 입장에 있음
          + 검사는 국제법 전문가 패널의 의견을 물었으며, 패널에는 이스라엘 외무부 전 법률 고문인 Theodor Meron, Helene Kennedy, Adrian Fulford 등이 포함됨
          + Netanyahu와 Yoav Gallant는 의도를 증명할 충분한 증거를 제공했음
          + 그들이 히브리어로 말할 때 세계가 듣지 않는다고 생각했는지 의문임
          + 의도에 대한 증거가 없었다면 기소가 더 어려웠을 것임
     * 이 상황은 팔레스타인이 ICC 회원국이 되기 위해 오랜 시간 노력했기 때문에 가능했음
          + 팔레스타인 영토에서 발생한 범죄에 대해 ICC가 관할권을 갖게 됨
          + 미국은 여전히 이에 대해 불만을 품고 있음
          + 전체 이야기는 읽어볼 가치가 있으며, 다양한 저항 세력들이 ICC 관할권에 속하게 될 것이라는 고려사항과 미국 및 이스라엘의 보복 조치 위협을 인식했음을 포함함
     * ""Chamber는 Netanyahu와 Gallant가 전쟁 범죄로 기소될 합리적인 근거가 있다고 판단함""
          + 흥미로운 점은 2,141,643명 중 41명의 기아 사망에 대한 기소임
          + 의도적인 기아로 인한 모든 사망은 중대한 범죄이며 처벌받아야 함
          + 과거 인류에 대한 범죄와 비교할 때 상대적으로 낮은 기준을 설정함
     * Chamber는 2023년 10월 8일부터 2024년 5월 20일까지 인도에 대한 범죄와 전쟁 범죄로 Netanyahu와 Gallant에 대한 체포 영장을 발부함
          + 2024년 후반부에는 상황이 훨씬 악화됨
          + 2024년 5월 20일 이후의 사실을 고려하지 않더라도 충분한 증거가 이미 존재했음
          + 더 많은 증거가 고려되면 더 많은 영장이 발부될 것임
     * Netanyahu의 사무실은 ICC의 체포 영장 발부에 대해 ""터무니없고 거짓된 주장""이라고 설명하며, 결정을 ""반유대주의적""이라고 비난함
          + Netanyahu와 Gallant가 정말로 무죄라고 생각한다면 ICC와 협력해야 함
          + 법정에서 주장하고 혐의가 터무니없음을 증명해야 함
          + 그렇게 하지 않으면 대중이 부정적인 추론을 할 수 있음
     * Chamber는 가자 지구로의 인도적 지원 증가가 종종 조건부였다고 언급함
          + 국제 인도법에 따른 이스라엘의 의무를 이행하기 위한 것이 아니었음
          + 국제 사회의 압력이나 미국의 요청에 대한 반응이었음
          + 인도적 지원의 증가는 필수 물품에 대한 접근을 개선하기에 충분하지 않았음
     * BBC에 따르면, [하마스 군사 사령관] Mohammed Deif에 대한 영장도 발부되었지만, 이스라엘 군은 그가 7월 가자에서 공습으로 사망했다고 발표함
     * 이 스레드의 댓글을 읽고 역사를 반영해보면, 이 사건은 피고인에 대한 재판이 아니라 ICC와 국제 기관의 독립성, 효과성, 궁극적으로 관련성에 대한 재판임
     * 유럽인으로서 Al-Jazeera 기사에서 언급된 미국 정치인들의 반응이 충격적임
          + 아마도 편향적일 수 있음
          + 좀 더 미묘한 성명을 가진 링크가 있는지 궁금함
"
"https://news.hada.io/topic?id=17883","낭비되고 있는 클라우드 비용, 월간요금 473만 원 직접 절감한 경험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 낭비되고 있는 클라우드 비용, 월간요금 473만 원 직접 절감한 경험

   클라우드 비용 절감을 위해 다양한 방법을 시도하고 그 과정에서 발생한 문제를 해결한 경험을 공유하는 글입니다.

  문제 상황

   클라우드 서비스 사용 중 예상보다 높은 비용이 지속적으로 발생하여 서비스 운영과 재무 관리에 부담이 됨.

  주요 개선 사항

    1. 테스트 워크로드 최적화
          + 주말 동안 사용하지 않는 테스트 서버를 자동으로 중단하고, 평일에 다시 시작하도록 스케줄링하여 월 약 $400의 비용 절감 효과를 달성.
    2. ECS 커맨드 사양 조정
          + ECS 커맨드의 CPU와 메모리 사용량을 분석하여, 실제 사용량에 맞게 사양을 조정함으로써 비용을 절감.
    3. ECS 태스크 개수 조정
          + 서비스의 트래픽 패턴을 분석하여, 필요에 따라 ECS 태스크의 개수를 조정함으로써 리소스 사용을 최적화하고 비용을 절감.
    4. 최신 인스턴스 사용 및 예약 인스턴스(RI)와 세이빙 플랜(Savings Plan) 활용
          + AWS의 최신 인스턴스를 도입하고, 예약 인스턴스와 세이빙 플랜을 활용하여 장기적인 비용 절감 효과를 얻음.

  결과

   위의 개선 사항을 통해 월간 클라우드 비용을 약 473만 원 절감
"
"https://news.hada.io/topic?id=17953","LLM 프롬프트 튜닝 플레이북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LLM 프롬프트 튜닝 플레이북

이 문서는 누구를 위한 것인가?

     * Post-Trained LLM의 프롬프트 작성 능력을 향상시키고자 하는 사람들을 위한 문서
     * 기술적 배경이 부족하더라도, 기본적인 LLM 사용 경험이 있는 사람을 대상으로 함
     * 전반부: 사후 학습과 프롬프트에 대한 직관적 이해를 제공
     * 후반부: 구체적인 프롬프트 작성 절차 및 팁 제공

왜 튜닝 가이드가 필요한가?

     * LLM 프롬프트 작성은 경험적이고 지속적으로 학습과 수정이 필요한 작업
     * 이 문서는 효과적인 프롬프트 작성 전략을 체계적으로 공유하고자 함
     * Gemini와 같은 후교육 모델을 중심으로 작성되었으나 다른 모델에도 적용 가능

Pre-Training vs. Post-Training

  사전학습 (Pre-training)

     * 사전학습의 개념
          + 사전학습은 딥러닝에서 오래된 개념으로, 작은 데이터셋(A)과 비슷하지만 훨씬 더 큰 데이터셋(B)을 활용해 일반적인 특징을 먼저 학습한 후, A 데이터셋에서 세부 조정을 하는 방법임.
          + 예시로는 소량의 유방촬영 데이터셋(A)과 인터넷에서 수집된 대규모 자연 이미지 데이터셋(B)을 생각할 수 있음.
     * 사전학습의 절차
         1. 큰 데이터셋(B)에서 모델을 학습해 일반적인 유용한 특징을 학습함.
         2. 이후, 모델을 A 데이터셋에 맞게 미세 조정하여 A에서 더 나은 성능을 얻음.
         3. 구체적으로, B 데이터셋에서 물체 분할이나 이미지 내 위치에 관계없이 개념을 인식하는 기본 기술을 학습한 후, 이를 기반으로 A 데이터셋의 특정 기술을 추가 학습하는 방식임.
     * 사전학습의 필요성
          + B 데이터셋을 통해 학습하지 않으면, A 데이터셋만으로는 일반적인 기술을 학습하기에 데이터가 부족하여 성능이 떨어질 수 있음.
          + B 데이터셋에서 일반적인 기술을 학습한 모델은 A 데이터셋에서 제한된 데이터를 사용해 전문화된 기술만 추가로 학습하면 됨.
     * LLM(대규모 언어 모델)의 사례
          + LLM의 사전학습은 인터넷 텍스트의 ""다음 단어를 예측하는 작업""을 수행함으로써 이루어짐.
          + 이 과정에서 모델은 웹에 반영된 세상의 구조를 암묵적으로 학습함.
     * 인터넷과 세상의 반영
          + 인터넷이 어떤 세상을 반영하는지에 대한 질문은 중요하며, 이를 이해하기 위해 '시네마틱 유니버스'라는 비유를 사용할 수 있음.

  사전학습의 '시네마틱 유니버스' 직관

     * 텍스트와 세상의 묘사
          + 대규모 언어 모델(LLM)은 텍스트를 통해 세상을 학습함.
          + 텍스트는 반드시 ""진실""만을 반영해야 하는 제약을 가지지 않음.
          + 허위정보나 잘못된 진술 외에도, 텍스트가 단일한 객관적 현실만을 반영하지 않는 이유는 다양함.
     * 예시: 아라고른과 곤도르
          + ""아라고른은 결국 곤도르의 왕이 된다""는 문장이 진실인지 여부는 문맥과 전제에 따라 달라짐.
               o ""반지의 제왕"" 시네마틱 유니버스: 진실로 간주될 수 있음.
               o ""마블 시네마틱 유니버스"" 또는 현실: 아라고른과 곤도르는 허구적 존재이므로 진실이 아님.
     * 진실의 기준
          + 진술이 진실인지 여부는 ""어떤 세계""를 전제로 하느냐에 따라 달라짐.
          + 이는 철학적·언어학적 논의의 오랜 주제이며, 진리에 대한 자세한 개요는 이 링크에서 확인 가능함.
          + 실용적으로는, ""진술이 진실인지 아닌지는 그 진술이 배경으로 삼는 시네마틱 유니버스에 따라 달라진다""는 개념으로 단순화 가능함.
     * 사전학습 데이터와 시네마틱 유니버스
          + 사전학습 코퍼스는 인간 문화가 만든 다양한 시네마틱 유니버스의 합집합에 가까움.
          + 정확히는, 사전학습 데이터 소스(예: 웹)에 크게 기여한 문화들의 집합임.

     중요
     사전학습 코퍼스는 인간 문화가 만든 시네마틱 유니버스의 합집합으로 간주 가능하며, 특히 웹과 같은 데이터 소스에 크게 기여한 문화를 반영함.

     * 모델의 맥락 이해
          + LLM은 주어진 맥락(즉, 프리픽스)을 기반으로 어떤 ""유니버스""에 있는지 추론함.
          + 이후 해당 유니버스의 규칙, 관습, 사실에 따라 행동함.
          + 강한 맥락 신호가 있는 프롬프트는 모델이 ""스크립트""를 이해하기 쉽게 함.
               o 예: 뉴욕에 대한 블로그 글의 시작 (""꿈이 이루어지는 콘크리트 정글은 단순한 가사가 아니라 뉴욕의 전기 같은 진실이다..."")
          + 반면, ""Hi, how are you?""처럼 맥락이 약한 프롬프트는 모델이 어떤 유니버스에 있는지 판단하기 어려움.
               o 이와 같은 일반적인 표현은 다양한 코퍼스에 걸쳐 등장하므로 여러 가능성을 열어둠.
     * 사후학습(Post-training)의 역할
          + 맥락이 부족한 경우, 모델이 보다 구체적이고 일관된 출력을 생성할 수 있도록 사후학습이 중요하게 작용함.

  사후학습 (Post-training)

     * 사후학습의 역할
          + 사후학습은 LLM이 기본적으로 작동하는 ""디폴트 유니버스""에 대한 지침을 제공함.
          + 프롬프트만으로 유니버스를 추론하는 대신, 사후학습을 통해 특정 가정을 고정하거나 모호성을 일관되게 해결하도록 제약을 설정함.
          + 이는 모델의 유용성을 높이는 데 필요하며, 예를 들어 LLM에게 기본적으로 ""사용자 지시를 따르는 것""을 가르치는 데 유용함.
     * 사후학습의 중요성
          + 사후학습이 없으면, ""조지 워싱턴에 대한 보고서를 작성하라""라는 지시가 단순히 그 지시를 이어가는 텍스트를 생성하는 식으로 오작동할 수 있음.
          + 사후학습은 모델의 기본 동작을 사회적 규범과 일치시키는 데 도움을 줄 수 있음.
          + 이를 통해 모델이 더 안전하고 생산적인 도구가 되도록 지원함.

     중요
     사후학습은 다양한 배포 환경에서 모델이 일관되고 기본적인 역할을 수행하도록 가르침.

     * 사후학습에서 학습할 수 있는 내용
          + 사후학습 중 모델이 학습할 수 있는 내용은 실용적이고 구체적인 것부터 주관적이고 개인적인 것까지 다양함.
     * 사후학습에서 가르칠 수 있는 주요 내용
          + 특정 형식을 따르는 방법
               o 예: Gemma's Formatter에서는 모델이 항상 사용자와 대화를 나누는 시네마틱 유니버스에서 동작한다고 가정함.
               o 이 시나리오에서 모델은 시스템 지시에 따라 행동하며, 대화는 항상 인간 사용자의 턴으로 시작됨.
          + 사용자의 지시를 따르는 방법
               o 예: ""강아지에 대한 에세이를 작성하라""는 요청에 대해 실제로 에세이를 작성해야 함.
               o 사용자의 요청을 무시하고 다른 방식으로 응답하지 않도록 사후학습을 통해 학습 가능.
          + “현실 세계”와의 일치
               o 모델의 디폴트 시네마틱 유니버스를 사용자들이 주로 관심을 가질 ""현실 세계""로 맞추는 데 활용됨.
               o 예: ""유명인 $CELEBRITY는 어디에서 태어났나?""라는 질문에 대해, 팬 픽션 세계가 아닌 현실 세계의 정보를 기본으로 가정함.
          + 안전성 강화
               o 인터넷은 다양한 규범적 기준을 포함하며, 일부 콘텐츠는 상업적 배포 환경에서 부적합할 수 있음.
               o 사후학습은 모델이 특정 안전 정책에 맞춰 조정되도록 도움을 주며, 생성 내용에 대한 규범적 기준을 설정함.
               o 이는 모델이 복잡한 텍스트를 생성할 때 필수적인 규범적 가정을 내포하도록 함.
     * 결론
          + 사후학습은 모델이 다양한 사용 환경에서 기대에 부합하는 동작을 일관되게 수행하도록 지원함.
          + 모델의 유용성과 안전성을 극대화하는 데 필수적인 과정임.

  사후학습 데이터 수집

     * 핵심 요약
          + 사후학습 중 LLM은 인간 평가자들이 만든 데이터를 기반으로 학습되고 평가됨.
          + 사후학습 중 모델은 ""디지털 역할 연기자""로서 데이터를 생성한 인간 평가자를 역할 모델로 삼음.
     * 사후학습 데이터 수집 과정
          + 다양한 입력 예제 데이터셋 생성
               o LLM이 수행할 수 있는 작업을 묘사한 프롬프트 모음 생성 (예: JSON으로 데이터 재구성, 결혼식 계획 지원 등).
               o 이 데이터는 개발자의 직관이나 인간 평가자가 제안한 아이디어를 기반으로 생성될 수 있음.
          + 인간 평가자 모집
               o 평가자의 역할: 입력 예제에 대해 ""정답"" 작성 또는 모델의 응답을 순위별로 평가.
               o 모델 학습 단계에 따라 평가자는 다른 유형의 데이터를 생성함.
          + 평가 지침 작성
               o 평가자가 작업을 잘 이해할 수 있도록 예제와 세부 지침 제공.
          + 데이터 수집 및 사후학습 수행
               o 수집된 데이터를 사전학습 모델에 활용하여 사후학습 진행.
          + 모델 배포
               o 사후학습 완료 후 모델을 실제 환경에 배포.
     * 사후학습의 영향
          + LLM이 인간처럼 행동할 수 있는 이유 중 하나는 신중하게 수집된 인간 행동 데이터셋을 학습했기 때문임.
          + 사전학습은 모델의 핵심 역량을 구축하며, 사후학습은 모델의 행동 방향을 인간 시연을 통해 조정함.

     중요
     LLM이 인간처럼 행동할 수 있는 이유는 신중하게 수집된 인간 행동 데이터를 학습했기 때문임.

     * 사후학습 데이터 수집의 도전 과제
          + 반복적인 작업의 단조로움
               o 평가 작업은 지루할 수 있음. 예를 들어, 뛰어난 파이썬 프로그래머는 자신의 프로젝트를 진행하는 것이 더 흥미로울 수 있음.
               o 시인은 자신의 시를 쓰는 것을 선호하며, AI가 생성한 시를 평가하는 데 흥미를 느끼지 않을 가능성이 큼.
               o 평가자는 작업 반복성, 데이터 소유권에 대한 부족한 통제, 작업의 사회적 의미 결여 등으로 동기 저하를 경험할 수 있음.
          + ""좋은"" 응답 정의의 어려움
               o 작업의 ""좋은"" 응답을 정의하는 것은 복잡함.
               o 좋은 작문, 사실성, 사회적 현실의 복잡성을 반영하는 작업의 기준을 명확히 하기 어려움.
               o 법 체계에서 판례를 통해 에지 케이스를 해결하듯, 이러한 문제는 주관성과 맥락에 크게 의존함.
          + 평가자의 작업 이해 부족
               o 평가자가 작업을 제대로 이해하지 못할 가능성이 있음.
               o 잘못된 기술 수준의 평가자를 채용하거나 평가자가 자신의 한계를 인지하지 못하는 경우 발생.
               o 예: 생물학 질문에 대해 오래된 대학 지식을 바탕으로 잘못된 응답 작성.
          + 인간의 실수
               o 인간은 실수를 함. 교수는 잘못된 답안을 포함한 시험 문제를 낼 수 있고, 의사는 피로 상태에서 오진 가능성이 높음.
               o 인간 평가 데이터의 품질이 완벽하지 않기 때문에 AI 시스템도 종종 잘못된 데이터를 학습할 가능성이 있음.
     * 결론
          + 사후학습 데이터 수집은 모델 품질에 중요한 역할을 하지만, 데이터 품질 보장을 위한 많은 노력이 필요함.
          + 정확하고 신뢰할 수 있는 데이터를 얻기 위해 평가자와 작업 간의 적합성을 보장하는 것이 중요함.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

프롬프트 작성

     * 핵심 요약
          + 시스템 지시문과 프롬프트를 작성할 때, 이는 사후학습 팀의 평가자 집단의 ""집합적 정신""을 염두에 두고 작성해야 함.
          + 평가자들이 이해하고 충실히 따를 수 있는 지시를 작성하면 모델도 이를 더 잘 따를 가능성이 높음.

     중요
     시스템 지시문과 프롬프트는 사후학습 팀의 평가자 집단의 집합적 정신을 반영하여 작성해야 함.

  프롬프트 작성시 주요 고려사항

     * 명확하고 간결하며 명시적인 지시인지 확인
          + 예: 파이썬 코드를 생성하는 지시라면, 무작위로 선택된 숙련된 파이썬 프로그래머가 지시를 읽고 바로 이해할 수 있어야 함.
               o 나쁨: ""Write a Python function that computes prime numbers.""
               o 좋음: ""Write a Python function that computes prime numbers from 1 to 100. Include pytype annotations for the function and use 2-space indentation.""
     * 지시가 모순되거나 따르기 어려운지 확인
          + 사람이 피곤하거나 배고플 때도 지시를 충실히 따를 수 있도록 간결하고 직관적으로 작성해야 함.
               o 나쁨: ""Don’t write a story about a mean dog, unless it's friendly, and also sad...""
               o 좋음: ""Write a short story (200-300 words) about a loyal golden retriever named Buddy...""
     * 지시가 너무 많은가?
          + 모델은 길고 복잡한 지시를 모두 따르기 어려울 수 있음. 가능한 경우 작업을 하위 작업으로 나누는 것이 좋음.
               o 나쁨: ""Read each article and, for each key idea, rate it on a scale of 1-10...""
               o 좋음: 하위 작업으로 나눔: 1) 주요 아이디어 목록 생성, 2) 각 아이디어 평가, 3) 상위 아이디어 번역, 4) 소셜 미디어용 게시물 생성.
     * 긍정적 지시 사용
          + ""하지 말아야 할 것""을 지시하기보다 ""해야 할 것""을 명시하는 것이 효과적임.
               o 나쁨: ""Don’t ever end your response with a full stop.""
               o 좋음: ""Your response should always end with an exclamation mark or a question mark.""
     * 모델에 대한 ""리마인더"" 역할의 지시
          + 다양한 입력 예제를 고려하여 명확하지 않은 경우에 대한 추가적인 지침을 제공함.
          + 예: ""추가 고려사항"" 또는 ""추가 가정"" 섹션에 에지 케이스를 명확히 설명.
     * 프롬프트는 새로운 하이퍼파라미터
          + 프롬프트의 품질은 시스템 성능에 큰 영향을 미침. ""최적의"" 프롬프트를 찾는 것은 불가능하지만, 점진적으로 더 나은 프롬프트를 찾기 위한 실험은 중요함.
     * ""모르겠다""는 응답 지시
          + ""알 수 없음"" 또는 ""모호한 경우""에 대한 명시적 지침을 제공하여 모델이 잘못된 응답 대신 명확히 모호함을 표시하도록 유도.
     * 프롬프트와 체크포인트의 밀접한 연계
          + 프롬프트는 특정 모델 체크포인트와 깊이 연계됨. 새로운 모델 버전에서는 동일한 프롬프트가 다르게 작동할 수 있음.

  프롬프트 스타일 가이드(기초)

     * 마크다운 사용 고려 : 각 프롬프트를 별도의 마크다운 파일에 저장하고, 제목 및 섹션을 잘 구성하여 가독성을 높임.
     * 다른 사용자에 대한 고려 : 프롬프트는 모델뿐만 아니라 유지보수 담당자를 위해 작성되어야 함.
     * 단순성 유지 : 프롬프트가 길거나 복잡하면 모델 변경 시 유지보수 부담이 증가할 수 있음. 간결하고 명확하게 작성할 것.
     * 제로샷 지시 선호 : 제로샷 지시는 간단하고 디버깅 및 이해가 용이함. 몇 샷(few-shot)은 마지막 수단으로 사용.
     * 예제 통합 : ""For example""과 같은 방식으로 지시문에 예제를 자연스럽게 포함시키는 것이 좋음.
          + 예: ""Always start your response to the user with something passive aggressive. For example, start with something like 'Oh that’s what you want? ...'""


새로운 시스템 지시문 반복 개선 절차

     * 프롬프트 개발은 반복적 과정
          + 프롬프트 작성은 검증 데이터셋을 사용해 모델을 훈련하는 과정과 유사함.
          + 명확하고 간결한 문장 작성이 핵심이며, 생성과 편집 단계를 분리하여 접근하는 것이 효과적임.
     * 검증 데이터셋 없이 시작 가능
          + 초기에는 간단한 MVP(Minimum Viable Product)를 빠르게 구축하며, 나중에 정량적 평가를 통해 성능을 추적해야 함.
          + 예상치 못한 모델 동작에도 제품이 안정적으로 작동하도록 설계가 중요함.

  시스템 지시문 반복 절차

    1. 다양한 입력 예제 준비

     * 문제를 잘 나타내는 약 10~50개의 다양한 입력 예제를 수집.
     * 원하는 출력 행동에 대한 직관을 형성.

    2. 간단한 지시문으로 시작

     * 가능한 한 간단하고 명확한 지시문을 작성.
     * 예산이 적은 모델(예: Gemini Flash 8B)을 먼저 사용.

    3. 첫 번째 입력 예제에 실행

     * 모델이 적절한 응답을 생성하도록 테스트.

    4. 첫 번째 예제에 과적합

     * 모델의 응답에서 발견된 특정 결함을 해결하기 위해 지시문에 ""리마인더"" 추가.
     * 예: 사람 이름만 추출해야 하는데 건물 이름도 포함될 경우, 지시문에 이를 명시적으로 언급.

    5. 다음 예제로 이동

     * 다른 입력 예제에서도 지시문이 효과적인지 테스트.
     * 첫 번째 예제에 과도하게 맞춘 지시가 있다면 이를 조정하여 보다 일반화.

    6. 지시문 정리

     * 모든 입력 예제에서 작동하는 지시문을 만든 후, 문장을 정리하고 철자 오류 수정.
     * 정리된 지시문이 여전히 모든 예제에서 작동하는지 확인.

    7. 자동화 가능성

     * 미래에는 메타 최적화 도구가 지시문 생성을 자동화할 수 있을 것.
     * 하지만 정성적 분석과 품질 보증 작업은 여전히 필요함.

     중요
     정성적 분석은 모델 개발에서 필수적이며 이를 회피할 수는 없음.

  LLM이 유용한 상황

    1. 검증이 쉬운 문제
          + LLM은 ""답을 만드는 것은 어렵지만, 검증은 쉬운"" 문제에 가장 적합.
          + 예: 생성적 AI의 ""스위트 스팟""에 대한 Chris Gorgolewski의 게시글 참조.
    2. 문제를 하위 문제로 분해
          + 복잡한 프롬프트 대신 문제를 잘 정의된 하위 문제로 나눠 모델의 추론 체인을 구성.
    3. 미래를 염두에 둔 접근
          + 하드웨어, 비즈니스 모델의 혁신으로 추론 용량이 증가할 가능성을 고려.
          + 현재 비용이 아닌 가치 중심으로 기능을 설계.
    4. 추론 비용의 감소
          + 추론 비용이 점차 감소할 것으로 예상되며, ""가치"" 중심의 의사결정이 필요.
          + 더 가치 있는 기능 구현을 위해 현재 경제적 한계를 감안한 점진적 롤아웃 고려.

     예상
     LLM 추론 비용에 대해 무어의 법칙에 준하는 가격 하락이 나타날 가능성.


  추가 자료

     * Anthropic의 프롬프트 엔지니어링 강의
     * OpenAI 프롬프트 엔지니어링 가이드
     * Gemini 프롬프트 작성 가이드
"
"https://news.hada.io/topic?id=17905","Golang에서의 Hyrum's Law 적용 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Golang에서의 Hyrum's Law 적용 사례

     * Hyrum의 법칙과 Golang
          + 최근 Gocodebase를 탐색하던 중 흥미로운 주석을 발견함
          + ""Hyrum의 법칙 때문에 이 텍스트는 변경할 수 없음""이라는 주석이 있는 코드 예시
          + MaxBytesError 구조체의 Error() 메서드에서 ""http: request body too large""라는 오류 메시지를 반환함
     * Hyrum의 법칙
          + Hyrum Wright라는 Google 소프트웨어 엔지니어의 이름을 딴 원칙
          + 많은 사용자가 API를 사용할 경우, 시스템의 모든 관찰 가능한 동작은 누군가에 의해 의존될 것이라는 내용
          + 코드에서 의도적이든 우연이든 관찰 가능한 모든 동작은 결국 누군가에 의해 의존됨
          + 오류 메시지를 변경하면 기존 코드가 깨질 수 있는 이유 설명
     * Golang에서의 사례
          + crypto/rsa와 internal/weak 패키지에서도 Hyrum의 법칙을 언급하는 주석 발견
          + crypto/rsa/rsa.go와 crypto/rsa/pss.go에서의 주석 예시
          + internal/weak 패키지에서의 주석 예시
     * 관찰
          + Golang에만 국한된 것이 아님
          + JavaScript의 진화 과정에서도 유사한 현상 관찰 가능
          + 이러한 현상을 Hyrum의 법칙이라고 부름
     * 최종 생각
          + 다른 사람들이 의존할 수 있는 코드를 변경할 때 주의해야 한다는 점을 상기시킴
          + 의도치 않은 동작이 의존되지 않도록 시스템을 설계하는 것이 중요함
          + 작은 변화가 큰 영향을 미칠 수 있다는 점을 기억해야 함

        Hacker News 의견

     * Hyrum's Law는 유용한 관찰이지만, 잘못된 결론을 내리지 않도록 주의해야 함. 함수의 전체 실행 시간도 관찰 가능한 속성이므로, 함수를 최적화하여 더 빠르게 만드는 것이 99.99999999%의 사용자에게는 좋을 수 있지만, 이는 깨지는 변경이 될 수 있음. 따라서 ""깨지는 변경""은 기술적 계약이 아닌 사회적 계약임을 이해해야 함. 라이브러리 작성자는 API의 변경되지 않을 부분을 문서화하고, 사용자에게 공감해야 함. 라이브러리 소비자는 문서화되지 않은 인터페이스를 사용하는 것이 위험할 수 있음을 이해하고, 작성자에게 공감해야 함
     * Go 언어에서는 Hyrum's Law와 하위 호환성을 매우 중요하게 생각함. 예를 들어, GenerateKey 함수에서 MaybeReadByte를 사용하여 알고리즘이 고정되지 않도록 함. ECDSA 키의 문제를 해결하기 위해 노력 중임. 맵의 반복 순서는 무작위로 설정되어 내부를 노출하지 않도록 함. rand.Rand의 출력은 호환성 약속의 일부로 간주되어 개선을 위해 많은 노력을 기울임. 문서에서 어떤 약속을 할지, 어떤 행동을 부인할지에 대해 항상 논의함
     * 특정 문제에 대한 해결책으로 문자열 기반 오류 대신 센티넬 오류를 사용할 것을 권장함. API 소비자가 비기술적 문자열에 의존하지 않도록 사전 정의된 오류 값, 타입 또는 상수를 사용해야 함. Hyrum's Law는 존재하지만 그 영향을 완화할 수 있음
     * Hyrum's Law에 대항하는 방법으로 랜덤성을 추가하는 것이 있음. QUIC 프로토콜은 사용하지 않는 필드를 무작위 값으로 설정하여 라우터가 패킷을 식별하는 데 의존하지 않도록 함. 이를 ""greasing""이라고 하여 ""ossification""을 방지함
     * Golang 설계자는 예외를 원하지 않았지만, 비형식적 오류는 문제가 있음. 패턴 매칭 없이 형식화된 오류를 처리하는 방법에 대한 논의가 필요함
     * 한 직장에서 오류 메시지의 오타를 발견하고 수정했으나, 그 오타에 의존하는 종속성이 너무 깊어 수정이 불가능하여 원래 상태로 되돌려야 했던 경험이 있음
     * Go의 오류는 열거형 타입으로 변경할 수 있었지만, 문자열을 타입으로 사용하여 소비자가 어떻게 의존할지 알 수 없음. 이는 더 나은 대안이 존재하는데도 불구하고 오래된 설계 결정임
     * Hyrum's Law는 Robustness Principle/Postel's Law와 정반대임. 수용하는 것에 대해 자유로우면, 그 방법을 이해하고 문서화해야 함. API가 수용하는 것에 대해 자유롭지 않도록 설계하려고 함
     * Hyrum's Law는 테스트에서 자주 나타남. 보장되지 않은 동작에 대한 가정으로 인해 다양한 유형의 테스트가 깨짐. 예를 들어, Hashmap의 요소 순서 변경, 오류 메시지 변경, 윤일 처리 방식 변경 등이 있음
     * 일부 패키지 작성자는 Hyrum's Law를 더 수용할 수 있음. json 패키지의 주석에서 내부 세부 사항이지만 널리 사용되는 패키지가 이를 링크네임을 통해 접근하는 것을 발견함
"
"https://news.hada.io/topic?id=17940","AI 데이터 인프라의 부상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI 데이터 인프라의 부상

     ""우리는 현재 새로운 산업 혁명의 시작에 있음. 전기 생산 대신 인공지능을 생성하는.. [오픈소스]는 모든 기업이 인공지능 기업이 될 수 있게 함"" - 젠슨 황

     * 문서에서 정보를 추출하는 것은 새로운 개념은 아님. 하지만 생성형AI(GenAI)는 대량의 고품질 데이터를 필요로 함
     * 훈련과 추론 모두에 데이터가 중요하며 데이터 규모뿐만 아니라 텍스트, 테이블 데이터에서 비디오, 이미지, 오디오로 확장됨
     * 위성 이미지, 로봇 센서 데이터 등 공간 데이터의 증가도 관찰됨
     * 데이터 계층에서 AI로 인해 가장 즉각적으로 재창조될 수 있는 새로운 영역은 무엇일까?
          + 비정형 데이터 추출과 파이프라인, 검색 증강 생성 (Retrieval-Augmented Generation, RAG), 데이터 큐레이션, 데이터 스토리지 , - 인공지능 메모리
     * 이 글의 목적은 AI 데이터 인프라 환경을 분석하고, 최신 트렌드를 공유하고, 가장 유망한 혁신 영역에 대해 이야기 하는 것

AI 데이터 인프라 현황

     * AI 데이터 가치 사슬에서 데이터 흐름을 간단히 시각화하며, 데이터 학습 및 추론 과정의 흐름을 설명하고자 함
     * 데이터 인프라의 가치 사슬을 여섯 개 주요 영역으로 분류
          + 데이터 소스 (Sources)
          + 데이터 수집 및 변환 (Ingestion & Transformation)
          + 저장 (Storage)
          + 훈련 (Training)
          + 추론 (Inference)
          + 데이터 서비스 (Data Services)

  데이터 소스

     * 앱 데이터: Salesforce, ServiceNow 등에서 추출
     * 실시간 데이터: 센서, 제조, 의료 데이터
     * OLTP 데이터베이스: Oracle, MongoDB와 같은 트랜잭션 데이터
     * 합성 데이터: 현실 세계에서 수집하지 않은 인공 생성 데이터 (e.g., Mostly AI, Datagen, Tonic)
          + 비용 효율적이고 데이터 준수 측면에서 유리함
          + 그러나, 통계적 이상치 데이터 표현이 부족해 모델 성능 최적화에 한계 있음
     * 웹 데이터: 웹 스크래핑을 통해 공용 데이터를 수집 (e.g., Browse AI, Apify)
          + 대규모 데이터 모델 훈련에 필수적이나, 공개 데이터가 고갈될 가능성 있음 (2026~2032년 예상)

  데이터 수집 및 변환

     * 데이터 파이프라인은 데이터의 출발지에서 목적지로 데이터를 전송하고 분석 가능한 상태로 변환하는 과정
          + ETL/ELT: 전통적인 방식 (배치 처리, 스트리밍 처리)
          + 피쳐 엔지니어링/파이프라인: ML에서는 주로 테이블 데이터 처리
          + 비정형 데이터 파이프라인: 데이터 추출, 변환, 저장 과정을 통합하여 비정형 데이터를 정리 및 저장
     * 파이프라인 유형
          + 배치 처리: 특정 시간 간격으로 데이터를 추출 및 적재
          + 스트리밍 처리: 데이터를 실시간으로 로드 (Kafka, Flink등)
     * 도구 및 프레임워크
          + 스트리밍 (Kafka, Confluent), 처리 엔진 (Databricks, Flink), 오케스트레이션 도구 (Astronomer, Dagster, Airflow, Prefect 등)
          + 라벨링 도구: LabelBox, Scale AI 등 (테스트 데이터 라벨링 중요)
               o 배치: ETL(Airbyte, Fivetran), 트랜스폼(dbt,coalesce)
               o 비정형 데이터 처리: Datavolo, Unstructured, LlamaIndex 등

  데이터 저장

     * 전통적 접근: 데이터 웨어하우스에 저장
     * AI 활용 데이터:
          + 데이터 레이크와 레이크하우스 구조 활용
          + 벡터 데이터베이스를 통한 데이터 임베딩 저장
     * 주요 도구:
          + 데이터 레이크 : Databricks, Onehouse, Tabular, Amazon S3, GCS 등
               o 벡터 DB: Pinecone, Chroma, Milvus, Weaviete 등

  모델 훈련

     * 학습 방식:
          + 지도 학습, 비지도 학습, 강화 학습
     * 대규모 언어 모델(LLM) 학습 과정:
          + 사전 학습: 비지도 학습으로 데이터의 패턴 인식
          + 지도 학습: 성능 최적화
          + 강화 학습(RLHF): 인간 피드백을 통한 성능 향상
     * 검증 및 평가:
          + 정확도, 정밀도, 손실 최소화 등 모델의 적합성 평가
     * 최종 단계:
          + 보안 테스트, 거버넌스, 컴플라이언스 확인
     * 주요 도구:
          + 트레이닝: TensorFlow, Modular
               o Evaluation: neptune.ai, Weights & Biases
               o MLOps: Databricks, H2O.ai, DataRobot, Dataiku, DOMINO
               o Model: OpenAI, Cohere, Mistral AI, Runway

  모델 추론

     * 과정:
          + 프롬프트 입력 → 토큰화/벡터화 → 데이터 처리 → 출력 생성
     * 맞춤화:
          + 벡터 데이터베이스와 LLM 연동
          + 사용자의 컨텍스트를 반영한 고유한 결과 생성
     * 필수 고려사항:
          + 데이터 보안, 모델 품질, 컴플라이언스
     * 주요 도구:
          + Tooling: ANON, E2B
          + Memory: MemGPT, cognee.ai
          + RAG Framework: LangCHain, LlamaIndex, contextual.ai, databricks
          + Agent/App: ChatGPT, Claude, character.ai, Decagon, NormAi

  데이터 서비스

     * 범주:
          + 데이터 보안: 접근 제어, 데이터 유출 방지 (Rubrik, eureka, imperva, sentra, Dig, Cyera, Varonis, BigID)
          + 데이터 가시성: 데이터 파이프라인의 품질 및 성능 모니터링 (Anomalo, datologyai, OBSERVE, MonteCarlo, Cleanlab, Scale AI, onum, metaplane)
          + 데이터 카탈로그: 메타데이터 중앙화, 데이터 자산 조직화 (atlan, Alation, Collibra, Informatica, Acryl Data, CastorDoc, select star, data.world)
     * 결론:
          + 데이터가 잘 조직화될수록 보안, 가시성, 관리가 효율적임


[AI로 인한 데이터 재구성]

   AI로 인해 데이터 인프라의 다음 영역에서 혁신이 관찰됨:

  1. AI 에이전트 및 애플리케이션을 위한 비정형 데이터 파이프라인

     * 비정형 데이터 파이프라인의 부상:
          + 대화형 AI 및 에이전트 애플리케이션에 내부 비정형 데이터를 활용하려는 수요 증가
          + 비정형 데이터 파이프라인은 전통적 데이터 파이프라인과 유사한 과정 포함: 데이터 추출, 변환, 인덱싱, 저장
     * 주요 데이터 소스:
          + PDF 텍스트, 지식 베이스, 이미지 등
          + 주로 대화형 AI 활용 사례를 지원하는 데이터
     * 차별화 요소:
          + 변환 단계에서 기존 파이프라인과의 차이 발생:
               o 데이터 청킹(chunking): 데이터를 작은 단위로 나누기
               o 메타데이터 추출: 인덱싱을 위해 필요한 데이터 생성
               o 임베딩: 각 데이터 청크를 벡터 형태로 변환해 저장
     * 성공 요소:
          + 청킹 전략과 임베딩 모델의 선택은 데이터 검색 정확성에 중요한 영향을 미침
          + 도메인 특화 임베딩 모델의 등장: 예를 들어 코드, 법률 콘텐츠에 특화된 모델
     * 벡터 호환 데이터베이스 활용:
          + 비정형 데이터를 저장하고 질의 가능한 형식으로 변환
          + RAG(Retrieval-Augmented Generation) 및 에이전트를 통해 LLM 개인화 가능
     * 주요 관찰
          + 팀들은 다양한 청킹 전략을 시도하고 있음
          + 도메인별 특화된 임베딩 모델이 점차 증가하며 정확도와 성능 개선에 기여
          + 기업들은 데이터를 쉽게 질의할 수 있는 형식으로 변환하는 도구를 찾고 있음

  2. Retrieval-Augmented Generation (RAG)

     * RAG 개요:
          + RAG는 LLM 애플리케이션의 효율성을 개선하기 위해 사용자 정의 데이터를 활용하는 아키텍처적 워크플로
          + 작동 방식:
               o 데이터를 로드하고 질의 처리를 위해 ""인덱싱""
               o 질의는 인덱스를 기반으로 가장 관련성 높은 데이터를 필터링
               o 필터링된 컨텍스트와 질의가 LLM과 프롬프트로 전달되어 응답 생성
          + 데이터를 제품 경험의 일부로 활성화 가능
     * RAG의 주요 장점:
          + 업데이트된 정보 제공:
               o LLM은 사전 학습 데이터에 제한이 있어 오래되거나 부정확한 응답 가능성 존재
               o RAG는 외부 정보 소스에 접근해 최신 응답 제공
          + 사실성 강화:
               o LLM이 정확한 정보를 제공하지 못하는 문제를 RAG가 보완
               o 선별된 지식 베이스를 활용해 신뢰도 높은 정보를 제공
          + 출처 제공:
               o LLM의 응답에 인용 및 주석 추가 가능
               o 사용자 신뢰도 향상

  3. 학습 및 추론 성능 향상을 위한 데이터 큐레이션

     * 데이터 큐레이션: 최적의 학습 및 추론 성능을 위해 데이터셋을 필터링하고 구성하는 과정
          + 주요 작업:
               o 텍스트 분류
               o NSFW 필터 적용
               o 데이터 중복 제거
               o 배치 크기 최적화
               o 성능 기반 소스 최적화
               o 합성 데이터를 통한 데이터 증강
     * Meta Llama-3 발표에서의 인사이트:
          + 학습 데이터 큐레이션:
               o ""최고의 언어 모델을 학습시키기 위해 고품질 대규모 데이터셋의 큐레이션이 중요""
               o Meta는 다음과 같은 데이터 필터링 파이프라인 개발:
                    # 휴리스틱 필터
                    # NSFW 필터
                    # 의미적 중복 제거
                    # 데이터 품질 예측 텍스트 분류기
          + 미세 조정 데이터 큐레이션:
               o ""모델 품질의 가장 큰 개선은 데이터를 신중히 큐레이션하고, 인간 주석가의 주석을 다수의 품질 보증 단계를 통해 검토함으로써 달성됨""
     * 데이터 큐레이션의 효과:
          + Meta AI 연구팀에 따르면:
               o 큐레이션은 학습 시간을 최대 20% 단축
               o 다운스트림 정확도 개선
               o 인터넷 데이터 고갈 상황에서도 모델 성능 개선 경로 제공
     * 향후 방향:
          + 모델 학습 및 미세 조정을 위해 자동화된 고품질 데이터 필터, 중복 제거, 분류기가 중요
          + Datology AI와 같은 기업이 이를 실현하기 위해 노력 중

  4. AI를 위한 데이터 저장

     * AI 데이터를 저장하는 방식에는 세 가지 주요 트렌드가 있음:
          + 벡터 데이터베이스
          + 데이터 레이크의 부상
          + 레이크하우스에 대한 투자 증가
     * 벡터 데이터베이스의 중요성:
          + 벡터 데이터베이스는 AI 붐의 핵심 기술 중 하나로 주목받음
          + 데이터 임베딩(숫자 표현) 저장에 적합:
               o 비정형 데이터(이미지, 오디오, 비디오 등)를 수치로 변환하여 저장
               o 의미적 검색(예: ""dog"" 검색 시 ""wolf"" 또는 ""puppy"" 반환) 지원
          + 벡터 데이터베이스의 형태:
               o 네이티브 벡터 데이터베이스: 벡터 저장 전용으로 설계됨
               o 기존 데이터베이스 확장형: 기존 데이터베이스에 벡터 지원 기능 추가
          + 활용 사례: LLM 개인화
               o 기업의 커스텀 데이터를 벡터 임베딩으로 저장하고 검색 가능
               o AI 에이전트가 이 구조를 활용해 맞춤형 경험 제공
     * 데이터 레이크 및 레이크하우스
          + 데이터 레이크의 부상:
               o 대부분의 기업이 대규모 데이터를 데이터 레이크에 저장
               o 커스텀 AI 개발을 위해 데이터 레이크 활용 필수
          + 레이크하우스 아키텍처:
               o 데이터 레이크를 효과적으로 관리하고 질의할 수 있는 아키텍처 제공
               o 오픈 테이블 포맷으로 데이터 구성:
                    # Iceberg, Delta Lake, Hudi 등 활용
               o 데이터 조직화 및 쿼리 성능 향상
          + Databricks의 역할:
               o Databricks는 Tabular를 인수하여 Delta Lake와 Iceberg의 개발팀 통합
               o 경쟁사의 진입을 어렵게 하며 레이크하우스 기술 발전을 선도

  5. AI 메모리

     * AI 메모리의 부상:
          + ChatGPT의 메모리 기능 발표 이후 AI 메모리가 주요 논의 주제로 떠오름
          + 표준 AI 시스템은 강력한 에피소드 메모리 및 상호작용 간 연속성이 부족:
               o 현재 시스템은 일종의 단기 기억 상실 상태에 있음
               o 복잡한 순차적 추론과 다중 에이전트 시스템에서의 지식 공유에 제약
     * 다중 에이전트 시스템에서의 메모리
          + 다중 에이전트 시스템으로 발전함에 따라 에이전트 간 메모리 관리 시스템이 필요
          + 기능 요구사항:
               o 에이전트 별로 기억 저장 및 세션 간 접근 지원
               o 접근 및 개인정보 보호 통제 포함
               o 에이전트 간 메모리 풀링:
                    # 한 에이전트가 다른 에이전트의 경험을 활용 가능
                    # 의사결정 능력 향상
          + 계층적 메모리 필요:
               o 접근 빈도, 중요도, 비용에 따라 메모리를 계층적으로 저장
     * MemGPT: AI 메모리 관리의 선도 프레임워크
          + MemGPT의 비전: LLM이 차세대 운영 체제(OS)의 진화를 이끌 것이라는 목표
          + 아키텍처 개요:
               o 메모리 유형:
                    # 주요 컨텍스트 메모리: 주 메모리(RAM)와 유사
                    # 외부 컨텍스트 메모리: 디스크 메모리/디스크 스토리지와 유사
     * AI 메모리의 중요성
          + 개인화, 학습, 반성(reflection)을 지원하며 AI 애플리케이션 발전에 필수적
          + 에이전트 간 협력과 기억 공유를 통해 복잡한 작업 해결 능력 향상

  AI 워크로드의 기회

     * AI 워크로드와 데이터 인프라:
          + GenAI의 부상으로 데이터 인프라의 모든 측면이 변화한 것은 아니지만, 다음과 같은 기술의 등장은 매우 흥미로운 발전:
               o 비정형 데이터 추출 및 파이프라이닝
               o Retrieval-Augmented Generation (RAG)
               o 데이터 큐레이션
               o 데이터 저장
               o AI 메모리
     * Felicis의 투자 전략
          + AI와 데이터 인프라의 미래에 집중:
               o 데이터 및 인프라 계층 관련 스타트업에 투자
               o 주요 투자 사례:
                    # Datology: 데이터 큐레이션
                    # Metaplane: 데이터 관찰 가능성(data observability)
                    # MotherDuck: 서버리스 데이터 웨어하우스
                    # Weights & Biases: 실험 추적 도구
     * AI 시장의 성장 가능성
          + 확장 가능성:
               o AI 시장은 채팅봇에서 다중 에이전트 워크플로까지 광범위하게 확장 중
               o 현재는 시작 단계에 불과하며 앞으로 더 많은 발전 가능성 존재
          + 데이터 솔루션의 중요성:
               o 성공적인 AI 애플리케이션을 위해 데이터 솔루션이 핵심
               o AI 워크로드를 지원하는 대규모 데이터 비즈니스가 구축될 전망
"
"https://news.hada.io/topic?id=17879","MIT, 가계 소득 20만 달러(2.8억원) 이하 학부생 등록금 면제 정책 시행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              MIT, 가계 소득 20만 달러(2.8억원) 이하 학부생 등록금 면제 정책 시행

     * 연 소득 20만 달러 이하 가정의 학생들은 2025년부터 MIT 등록금이 면제됨
          + 미국 가정의 80%가 이 소득 기준에 해당. 기존 14만 달러에서 20만 달러로 상향
     * 연 소득 10만 달러 이하 가정의 경우, 학비, 주거비, 식비, 수수료, 책 및 개인 경비 포함한 ""모든 비용이 면제""됨
          + 이 소득 기준은 올해 7만 5천 달러에서 10만 달러로 증가함
     * MIT는 학생과 가정의 부담을 줄이기 위해 1억 6730만 달러의 필요 기반 재정 지원을 마련함 (10년 전보다 약 70% 증가)
     * MIT의 교육 모델과 사회적 가치
          + MIT의 교육은 과학과 공학에 뿌리를 둔 강도 높은 교육으로, 학생과 사회에 실질적인 가치를 제공함
          + Wall Street Journal 조사에 따르면 MIT는 졸업생의 재정적 미래를 가장 잘 향상시키는 대학으로 평가받음
          + MIT는 졸업생의 고용 가능성 면에서 세계 1위로 평가받음
     * 입학 및 재정 지원 정책
          + MIT는 입학 과정에서 지원자의 지불 능력을 고려하지 않음
          + 재정 지원을 받는 학생에게 대출을 요구하지 않으며, 졸업생의 87%가 무채무로 졸업함
          + 졸업생의 평균 시작 연봉은 $126,438임 (1.76억원)
     * MIT의 기부금과 재정 지원
          + MIT의 기부금은 졸업생과 친구들의 기부로 구성되어 있으며, 이를 통해 현재와 미래의 재정 지원을 제공함
          +

     ""오늘의 발표는 우리 졸업생들이 MIT 경험을 얼마나 소중히 여기는지 강력하게 표현한 것입니다. 이러한 범위의 재정 지원을 제공할 수 있는 우리의 능력은 수십 년에 걸쳐 MIT 동문과 다른 친구들이 우리 기금에 기부한 개인 기부금에 달려 있기 때문입니다. 사실상 우리 기금은 과거 MIT 학생들이 오늘날과 미래의 학생들에게 주는 세대 간 선물입니다"" - MIT 총장 Sally Kornbluth
     * 2025년 MIT 가족이 기대할 수 있는 것
          + 연 소득 10만 달러 이하 가정은 모든 비용이 면제됨
          + 연 소득 10만 달러에서 20만 달러 사이의 가정은 최대 약 2만 3천 9백 70달러까지 지불할 수 있음
          + 다시 말해, 내년에는 소득이 20만 달러 미만인 모든 MIT 가정은 미국 공립 대학에 다니는 주내 학생이 캠퍼스에서 생활하는 데 드는 연간 평균 비용인 27,146달러보다 훨씬 낮은 금액을 기여할 것으로 예상할 수 있음
          + 연 소득 20만 달러 이상의 가정도 필요 기반 재정 지원을 받을 수 있음
          + MIT가 제공하는 온라인 계산기로 학교에 다니는데 드는 비용을 계산해 볼 수 있음

   재단에 돈이 많나보네요.. 부럽..

   최고의 선순환

   대단하네요.
   당연히 시민권자에게만 해당하겠죠?

   경험상, 이런 혜택에서 시민권을 요구하는 경우는 많지 않습니다. 부모가 세금을 낸 기록을 요구할수는 있겠죠.

   멋지네요 공부만해라 이건가

   기부금이 빵빵하니 저렇게도 가능하군요
"
"https://news.hada.io/topic?id=17874","2024 테크 트렌드 by CBInsights [93p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  2024 테크 트렌드 by CBInsights [93p PDF]

금융 서비스

     * 사이보그 자산 관리자
     * AI 에이전트가 사용할 돈을 부여받음
     * 암호화폐, 대중화로 한 발 더 다가섬
     * 압축된 핀테크 밸류에이션이 인수자들에게 기회를 제공함

헬스케어 및 생명 과학

     * AI를 활용한 질병 관리의 새로운 단계 도래
     * RNA 치료제에 대한 투자 물꼬가 트임
     * 자율 로봇이 요양 서비스를 겨냥함

AI

     * AI 인수합병이 새로운 기업 전략의 물결을 촉진함
     * 대형 언어 모델(LLM)의 설명 가능성의 순간
     * 오픈소스, 상위 LLM에서는 양보했으나 소형 모델에서 우위를 점함
     * 미국이 AI 군비 경쟁을 선도하고 있으나 현재까지의 이야기임

엔터프라이즈

     * 엔터프라이즈를 위한 공간 컴퓨팅, 지속 가능한 기술로 자리잡음

리테일 및 소비자

     * 리테일의 개인화 필수 과제

산업

     * 차세대 데이터 센터의 도래
     * 우주를 향한 저렴한 접근성이 투자자들의 관심을 받음

   사이보그 자산 관리자의 원문이 뭘까요

   The cyborg wealth advisor 입니다

   리스트에 포함돼있군요 https://linkedin.com/posts/…
"
"https://news.hada.io/topic?id=17896","Show GN: Smart Composer - 글쓰기를 Cursor AI만큼 편하게 해주는 옵시디언 플러그인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: Smart Composer - 글쓰기를 Cursor AI만큼 편하게 해주는 옵시디언 플러그인

   Obsidian 노트를 작성할 때, 기존의 노트/정보를 이곳저곳 찾아 다니는 일이 많습니다.
   좋은 글을 효율적으로 쓰고 싶은데, ChatGPT를 시키는 길은 너무 멀죠.
     * 내 맥락 (Vault 내용 배경지식 + 원하는 문체) 를 설명하는 게 한세월임.
     * 왔다갔다 context-switching, 복사+붙여넣기가 너무 많음.

   저희는 Cursor AI를 사랑하는 개발자들이어서, 이렇게 AI가 나의 작업을 파악해서 딱 맞춰 도와주는 경험을 Obsidian 노트 편집에 적용하고 싶었습니다.

   그래서 만든 플러그인 Smart Composer를 소개합니다.

  Smart Composer 주요 기능

     * 맥락을 이해하는 대화
          + 노트 멘션: @파일명으로 노트를 참고해 AI와 대화 -> AI에게 내 배경 설명을 반복할 필요 없음
          + 웹링크 멘션: 웹사이트를 웹 링크만 붙여넣어 내용 참조할 수 있습니다. (유튜브 내용도 이해)
          + Vault Search(RAG): Vault 전체 검색으로 관련 내용을 자동으로 찾아 활용
     * 원클릭 수정 제안
          + AI 자동 편집 ""Apply"": AI가 문서 수정을 제안하면 클릭 한 번으로 적용
          + 수정 전후를 비교해보고 선택적으로 적용 가능
     * 로컬 모델 지원
          + 원하는 API 키를 통한 개인화된 AI 모델 사용 가능
          + Ollama로 오픈소스 AI 모델을 로컬에서 실행 -> 프라이버시, 오프라인 사용
          + Prompt Template(자주 쓰는 프롬프트 저장) 등, 각종 AI 편의기능

   Smart Composer는 현재 커뮤니티 플러그인으로 등록되어 있습니다.
   옵시디언에서 ""Smart Composer""를 검색하시거나, 링크를 통해 설치해 보세요.

   GitHub Star나 피드백 남겨주시면 감사하겠습니다!

   의견이나 질문 있으시면 언제든 환영합니다.

   와... 이건 진짜 멋집니다!
   ChatGPT MD, Obsidian Copilot, Smart Connections 등등 AI 관련 확장은 여러가지 많이 써봤는데 이 확장이 정말 좋네요!

   클로드는 개인 계정으로는 유료로 API 못쓰게 되어 있어서 openrouter 쓰고 있는데, 커스텀 설정으로 적용하니 잘 됩니다.
   약간 긴가민가 했는데, 오픈라우터도 지원한다고 안내가 있으면 자신있게 설정을 할 수 있었을 것 같습니다. ^^;

   감사합니다!! ㅎㅎ 오픈라우터 지원이 도움이 되셨다니 다행이네요, 다른 분들 더 편하게 들어오실 수 있도록 안내 업데이트 해야겠네요 ㅎㅎ

   항상 응원합니다 ㅎㅎ

   감사합니다 익명의 개발자님 ㅎㅎ

   릴리브ai 화이팅입니다
   제가 잘 전도하고 다니고 있습니다 ㅋㅋㅋㅋ

   옵시디언 최고 권위자 요한님 덕분에 너무 큰 힘이 됩니다 ㅎㅎㅎ 앞으로도 화이팅!!

   오, 직접 만드신거죠? 저도 이 제품 잘 쓰고 있습니다 :) Obsidian 헤비하게 쓰다보니 유용할때가 많습니다

   네, 저희가 만든 플러그인입니다 ㅎㅎ 감사합니다!!

   안녕하세요, 오늘 설치해서 너무 잘 쓰고 있습니다 :)
   Copilot의 Inline Chat 같은 기능 혹은 선택한 블록을 즉시 Chat에 삽입해주는 기능이 있으면 완전 좋을거 같아요!

   ""Add Selection to Chat"" command를 사용하시면 선택한 블록을 Chat에 삽입하실 수 있습니다!
   관련 문서도 첨부드립니다: https://github.com/glowingjade/obsidian-smart-composer/…

   감사합니다! 이미 만들어져 있었군요ㅎㅎ 참고차 저는 단축키를 잘 까먹어서 obsidian-commander 플러그인으로 컨텍스트 메뉴에 커스텀 커맨드 추가해서 쓰고 있는데 너무 편하네여

   이 플러그인 때문에 클로드와 GPT에 API 요금을 결제했습니다. 좋은 앱 감사합니다. 이리저리 써보고 기여도 하고싶네요!

   감사합니다! 저희도 이것 때문에 노션에서 옵시디언 Sync로 팀 스페이스 다 옮겼네요 ㅎㅎ
   기여는 언제나 환영입니다!! 아래 오픈채팅방 링크에서 편하게 의견 나눠 주시거나, Github 오픈소스로 이슈/PR 도와주시면 큰 힘이 됩니다 ㅎㅎ

   정말 좋네요. Cursor랑 UI가 굉장히 비슷한데 직접 구현하신건가요?

   감사합니다! 기본적인 UI는 커서를 참고했고, Obsidian 편집 상황에 더 편하게 발전시키고 있습니다. 전부 직접 구현입니다 ㅎㅎ

   Smart Composer 사용자 분들의 정보공유를 위한 오픈카톡방도 공유 드립니다!
   https://open.kakao.com/o/gCL8TjWg

   참여 인원을 늘려주실 수 도 있나용

   아, 참여 인원에 제한이 있는걸 이제 알았네요 ㅎㅎ;; 풀어드렸습니다! 알려주셔서 감사합니다 ㅎㅎ
"
"https://news.hada.io/topic?id=17985","Rill - Go용 Composable Concurrency 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Rill - Go용 Composable Concurrency 툴킷

     * 간단하고 재사용 가능한 요소들로 동시 프로그램을 쉽게 구축할 수 있도록 해줌
     * Go의 자연스러운 채널 기반 모델을 유지하면서, Boilerplate를 줄임

주요 기능과 목표

     * 일반적인 동시성 작업 단순화
          + 병렬 작업 실행, 실시간 이벤트 처리 등에서 안전하고 깨끗한 방법을 제공함.
          + Goroutine, 채널, 에러 관리의 복잡성을 추상화함.
          + 동시성 레벨에 대한 완전한 제어를 개발자에게 맡김.
     * 모듈화된 코드 작성 지원
          + Go 채널을 입력으로 받아 변환된 채널을 반환하는 방식으로 함수들이 동작.
          + 유닉스 파이프와 유사하게 여러 작업을 체인처럼 연결 가능.
     * 에러 처리 중앙화
          + 파이프라인에서 발생한 에러를 단일 지점에서 처리 가능.
          + 복잡한 경우에는 에러를 특정 지점에서 가로채거나 처리할 수 있는 도구도 제공.
     * 스트림 처리 간소화
          + 무한 스트림 처리 가능.
          + 메모리에 맞지 않는 대규모 데이터나 실시간 처리에 적합.
     * 고급 작업 지원
          + 배치 처리, Map-Reduce, 스트림 분할, 병합 등 고급 기능 제공.
          + 선형뿐 아니라 DAG(Directed Acyclic Graph) 형태의 파이프라인 지원.
     * 커스텀 확장 지원
          + 표준 Go 채널과 호환되며, 사용자 정의 함수 추가가 쉬움.
     * 경량화 및 의존성 제거
          + 작은 API와 zero-dependency로 기존 프로젝트에 쉽게 통합 가능.
          + 자원 사용 최소화.
"
"https://news.hada.io/topic?id=17921","Amazon S3, 객체에 데이터 추가 기능 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Amazon S3, 객체에 데이터 추가 기능 지원

     * Amazon S3 Express One Zone이 객체에 데이터를 추가할 수 있는 기능을 새로 지원함
     * 이제 애플리케이션이 기존 객체에 데이터를 추가할 수 있게 되어, 로그 처리 애플리케이션이나 미디어 방송 애플리케이션에 유용
     * 이전에는 데이터를 로컬 저장소에서 결합한 후 최종 객체를 S3에 복사해야 했으나, 이제는 S3 Express One Zone 내에서 직접 데이터를 추가하고 객체를 즉시 읽을 수 있음
     * 모든 AWS 리전에서 S3 Express One Zone 저장 클래스가 사용 가능한 경우 데이터를 추가할 수 있음
     * AWS SDK, AWS CLI, 또는 Mountpoint for Amazon S3(버전 1.12.0 이상)을 사용하여 시작할 수 있음

        Hacker News 의견

     * ""S3 Express One Zone"" 버킷 클래스는 더 비싸고 가용성이 낮음
          + 16c/GB/월로 S3 표준 계층의 2.3c보다 비쌈
          + 하나의 가용 영역에만 존재함
     * 객체에 데이터를 추가할 때마다 객체의 일부를 생성하며, 최대 10,000개의 부분까지 가능함
          + 이는 로그 파일을 직접 S3에 쓰는 솔루션으로는 적합하지 않음
     * GCS는 직접 추가 기능을 지원하지 않지만, 기존 객체를 새로운 객체로 구성하는 방법으로 우회 가능함
          + 객체 A에 객체 B를 추가하여 A로 명명하면 B를 A에 추가하는 것과 동일하게 작동함
     * R2가 출시된 이후에도 S3를 고려하는 것이 이상하다고 생각함
          + R2로 전환하여 수천 달러 또는 수십만 달러를 절약하는 사례가 많음
     * 제목 수정 필요: Amazon S3 Express One Zone이 객체에 데이터를 추가할 수 있는 기능을 지원함
     * 여러 경우에 유용하지 않을 수 있음
          + 작동하려면 쓰기 오프셋을 지정해야 하며, 여러 작성자가 있는 경우 복잡해질 수 있음
          + 매번 크기를 요청하고 현재 객체의 체크섬을 사용하여 경합해야 함
     * 이 기능의 다양한 사용 사례에 대해 궁금함
          + Firehose/Kinesis 등이 더 적은 위험 요소로 추가 기능을 제공한다고 생각함
     * 지금까지 지원되지 않았다는 사실에 놀라움
          + Azure Blob Append와 비교하여 어떻게 다른지 궁금함
          + Azure Storage Append Blob을 사용하여 주기적으로 플러시하는 장기 실행 작업의 로그를 저장해왔음
     * 이는 S3 ""Express One Zone""에 특정한 기능임
     * 모든 S3 유사 API에 대한 영향이 궁금함
"
"https://news.hada.io/topic?id=17889","네덜란드의 일반적인 도시 교차로 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        네덜란드의 일반적인 도시 교차로 (2018)

도시 교차로 설계

     * 도시 교차로의 중요성
          + 도시 교차로는 자전거 타기를 더 안전하고 매력적으로 만드는 데 중요한 역할을 함.
          + 잘못된 교차로 설계는 자전거 이용을 꺼리게 할 수 있음.
     * 네덜란드의 교차로 설계
          + 네덜란드의 교차로 설계는 전국적으로 사용되는 설계 매뉴얼에 기반을 둠.
          + 특정 교차로는 특별하지 않으며, 전국적으로 유사한 예시를 쉽게 찾을 수 있음.
          + 교차로는 주 도로와 이웃 접근 도로 사이의 교차로로, 주 도로는 50km/h 속도 제한과 전용 자전거 인프라를 가짐.
          + 이웃 접근 도로는 벽돌 표면과 30km/h 속도 제한을 가짐.
     * 교차로 설계 특징
          + 주 도로와 평행한 자전거 도로 사이에 충분한 공간이 있어 차량이 자전거를 기다릴 수 있음.
          + 교차로는 높게 설계되어 잠재적 충돌 지점을 강조함.
          + 자전거 도로 표면이 교차로를 넘어 계속되어 자전거가 우선권을 가짐을 명확히 함.
          + 교차로에는 신호등이 없으며, 사람들은 서로의 우선권을 협상해야 함.
     * 도로 사용자 관점에서의 교차로
          + 운전자: 주 도로에서 운전자는 검은 아스팔트 위를 주행하며, 이는 50km/h 우선 도로임을 나타냄. 교차로 접근 시 속도를 줄이도록 설계됨.
          + 자전거 이용자: 자전거 도로를 따라 주행할 때 모든 차량보다 우선권을 가짐. 자전거 도로는 연속적이며, 자전거 이용자는 다른 도로 사용자와 눈을 맞추어 우선권을 확인할 수 있음.
          + 보행자: 보행자는 자전거 도로를 건널 때 우선권이 없으며, 자전거가 지나갈 때까지 기다려야 함. 교차로는 휠체어나 유모차를 밀고 가기에 용이하게 설계됨.
     * 네덜란드의 교통 시스템
          + 네덜란드는 세 가지 유형의 교통을 구분하며, 각각의 교통 유형에 맞춘 인프라를 설계함.
          + 이는 네덜란드 교통 시스템의 핵심 요소임.

        Hacker News 의견

     * 영국의 자전거 인프라 문제점은 자전거 도로가 단절되어 있으며, 보행자와 자전거 도로가 명확히 구분되지 않아 불편함을 초래함
          + 자전거 도로가 주요 도로와 연결되지 않아 자전거 이용이 비효율적임
          + 브리스톨 중심부의 자전거 도로는 색상이 구분되지 않아 보행자와 자전거 이용자 간의 불필요한 충돌을 유발함
     * 외국 전문가들이 칭찬하는 매끄러운 인프라를 경험한 적이 있음
          + 특정 교통 신호등 디자인이 마음에 들며, 작은 LED가 녹색 신호로 바뀌기 전까지 카운트다운을 제공함
          + 이러한 신호등은 바쁜 도로에서 유용하며, 대기 시간을 예측할 수 있어 편리함
     * 도시 계획은 운전자에게도 책임을 부여함
          + 운전 교육에서 보행자와 자전거 이용자를 항상 주시하는 방법을 배움
          + 방어적인 운전 태도를 강조하며, 도시 환경에서 보행자와 자전거 이용자를 보호함
     * 도시 디자인에 대한 다양한 의견이 존재함
          + 런던에서는 대중교통과 도보로 이동이 가능하며, 미국 도시에서는 자동차로 이동이 편리함
          + 두 시스템 모두 장단점이 있으며, 개인의 취향에 따라 다르게 느껴질 수 있음
     * 폴란드의 자전거 도로는 설계가 미흡하며, 법적 규제가 명확하지 않음
          + 자전거 도로에서의 우선권이 불분명하여 혼란을 초래함
     * 교통 계획과 분산 시스템 간의 학습 가능성에 대한 의견이 제시됨
          + 자동차와 보행자, 자전거 교통을 안전하게 통합하는 데 많은 공간이 필요함
     * 네덜란드와 같은 도시 지역이 더 많아지길 바람
          + 자전거 도로와 보행자 도로가 명확히 구분되지 않아 혼란을 초래함
     * 네덜란드에서의 운전은 외국인에게 두려움을 줄 수 있음
          + 자전거 이용자를 보호하기 위해 운전자가 주의해야 함
     * 말뫼는 자전거 친화적이지만, 교통 흐름이 원활하지 않음
          + 자동차 운전자는 자전거와 보행자를 위해 멈춰야 하며, 이는 운전자의 불만을 초래함
          + 건강한 사회는 자동차보다 건강한 대안을 우선시해야 함
"
"https://news.hada.io/topic?id=17967","J. Kenji Lopez-Alt의 The Onion 문제 해결책 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              J. Kenji Lopez-Alt의 The Onion 문제 해결책 (2021)

양파 문제의 해결책

     * 배경: 친구들과의 모임에서 양파를 자를 때 슬라이스의 부피 편차를 줄이는 방법에 관심을 가짐. Kenji López-Alt의 유튜브 영상에서 시작된 문제로, 수학적 접근을 통해 해결하고자 함.
     * 문제의 기원: Kenji López-Alt는 양파를 자를 때 중심에서 60% 아래의 지점을 향해 방사형으로 자르는 것이 황금비의 역수와 관련이 있다고 주장함. 이 방법을 시도하며 즐거움을 느낌.
     * 수학적 접근: 양파를 무한한 층으로 가정하고, 연속 수학을 통해 문제를 해결하고자 함. 이를 통해 방사형 절단의 깊이가 층의 수에 따라 달라짐을 발견함.
     * 좌표계 변환: 직사각형 좌표계를 극좌표계로 변환하여 문제를 해결. Jacobian을 사용하여 무한히 작은 조각의 크기를 상대적으로 측정함.
     * 새로운 좌표계: 양파 중심 아래의 지점을 향해 자르기 위한 새로운 좌표계를 만듦. 이 좌표계는 양파의 상반구에서만 작동하며, 방사형 절단을 모델링함.
     * 계산 및 결과: Mathematica를 사용하여 수치적 통합을 통해 최소 분산을 찾음. 최적의 절단 깊이는 양파 중심 아래로 55.73066% 지점임을 발견함. 이는 유튜브 영상에서 주장한 61.803%와 다름.
     * 추가 연구: 층의 수가 결과에 미치는 영향을 고려할 필요가 있음. 한 층일 때는 중심을 향해 자르는 것이 최적이며, 층의 수가 증가할수록 최적의 깊이가 증가할 것이라 추측함.
     * 결론: 양파를 가장 균일하게 자르기 위해서는 중심 아래 55.73066% 지점을 향해 방사형으로 자르는 것이 최적임. 이 수학적 상수는 아름다우며, 이를 'samekh'로 명명함.
"
"https://news.hada.io/topic?id=17900",""Demon Core"의 밈화 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ""Demon Core""의 밈화 현상

    ""Demon Core""의 밈화

     * 1946년 5월 21일, 캐나다 물리학자 루이스 슬로틴은 로스앨러모스 과학자들에게 핵 실험을 시연하던 중 사고를 당함. 이 사고는 ""Demon Core""라는 이름으로 알려지게 됨.
     * 슬로틴은 베릴륨 반구를 플루토늄 코어 위에 조심스럽게 올리던 중 드라이버가 미끄러져 핵 반응이 일어났고, 이로 인해 치명적인 방사선에 노출되어 9일 후 사망함.
     * ""Demon Core""는 두 번의 치명적인 사고에 연루되었으며, 이는 원자 시대의 전설로 자리잡음. 이 사건은 여러 영화와 비소설에서 다루어짐.

    밈의 탄생

     * 2019년부터 ""Demon Core""에 대한 밈이 인터넷에서 확산되기 시작함. 이 밈은 주로 일본의 kawaii 스타일로 표현되며, 귀여운 애니메이션 캐릭터와 결합되어 독특한 유머를 창출함.
     * 이러한 밈은 ""알고 있는 사람만 아는"" 바이럴리티를 얻었으며, 주로 젊은 남성층에게 인기를 끌고 있음.
     * 밈은 다양한 형태로 존재하며, 기존의 밈 포맷에 ""Demon Core"" 이미지를 추가하는 방식도 있음.

    밈의 의미와 문화적 맥락

     * ""Demon Core"" 밈은 인간의 고통에서 유래된 것으로, 본질적으로 나쁜 맛을 지닌 유머임. 이는 어두운 유머가 세상의 공포를 길들이고 무력화하는 일종의 방어 기제일 수 있음을 시사함.
     * 특히 일본에서 시작된 밈은 역사적 맥락에서 흥미로운 의미를 가짐. ""Demon Core""는 원래 일본 도시를 공격하기 위해 사용될 예정이었으며, 일본인들이 이를 유머로 소비하는 것은 복잡한 감정을 내포함.
     * 미국에서는 히로시마와 나가사키 원폭에 대한 유머가 오랫동안 존재해왔으며, 이는 전쟁 후에도 계속됨. 이러한 유머는 어두운 유머의 일환으로 볼 수 있음.

        Hacker News 의견

     * KnowYourMeme에서 Demon Core 밈의 기원을 아직 파악하지 못했음. 이 밈은 KanColle(2013) 커뮤니티에서 시작되어 Futaba, nicovideo.jp, Twitter로 확산되었음
          + 이 밈은 주로 이미지 기반이며, Demon Core에만 집중되어 있음
          + Futaba 사용자와 Hacker News 독자, KnowYourMeme 사용자 간의 교차점이 거의 없음
     * Demon Core 밈은 인간의 고통에서 유래된 것이며, 나쁜 취향을 의도한 것이라는 의견에 동의하지 않음
          + 스트레스와 위험한 상황을 다른 것과 대조하는 데서 유래되었다고 생각함
          + 고통이 Demon Core를 유명하게 만든 것은 중요하지만, 사고 없이도 밈은 여전히 작동할 것임
     * Slotin의 실험 의도를 이해하지 못함
          + 실험이 어떻게 진행되었는지, 드라이버의 역할이 무엇인지 이해하기 어려움
          + 실험은 데이터 수집과 정밀한 측정이 필요하다고 생각함
     * 일본 스타일의 예술이 주로 사용됨
          + 2000년까지 약 60건의 임계 사고가 발생하여 약 20명의 사망자를 초래했음
          + 후쿠시마 사고 이전에 일본이 세계에서 가장 많은 핵 사고를 겪고 있다는 것을 알게 되었음
          + 일본의 자동차 및 반도체 산업에서 성공한 방법이 핵 산업에서는 실패로 이어졌음
     * Demon Core 사건은 ""불장난""의 궁극적인 사례로 사람들에게 공감을 줌
          + 인간은 항상 불장난을 해왔고, 이는 위험하지만 기술의 기원이 되었음
          + 핵무기 과학자가 원시적인 방법으로 새로운 ""불""을 다루는 모습이 아이러니하면서도 공감됨
     * 2019년에 ""Demon Core Kun"" 비디오가 YouTube에 업로드되었음
          + 이 비디오 시리즈는 일본 애니메이션으로 구성되어 있으며, 밈의 인기를 높였음
          + KnowYourMeme에 따르면, 이 시리즈는 Demon Core Kun 시리즈보다 최소 1년 전에 시작되었음
     * 재미있는 사실: Demon Core를 먹으면 124조 칼로리를 제공하여 평생 에너지를 충족할 수 있음
     * Slotin 사건 이후, 손으로 임계 조립을 하는 것이 금지되었음
          + Los Alamos는 원격으로 작동되는 임계 조립 기계를 개발했음
          + ""Godiva"" 시리즈와 같은 기계에 대한 오픈 소스 문헌이 많이 존재함
"
"https://news.hada.io/topic?id=17962","Y Combinator는 다른 YC 기업을 모방하는 스타트업도 종종 지원하고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Y Combinator는 다른 YC 기업을 모방하는 스타트업도 종종 지원하고 있음

     * 실리콘밸리에서 독창적인 기술 아이디어로 창업하여 성공을 거두는 꿈은 많은 창업가의 목표임
     * Y Combinator(YC)는 Airbnb, Coinbase, Stripe 같은 성공 사례를 배출한 대표적인 스타트업 인큐베이터로 명성을 얻음
     * 하지만 YC에서 지원한 약 5,000개 스타트업 데이터를 분석한 결과, YC 스타트업은 반드시 독창적일 필요가 없음
          + 이전 YC 졸업생의 유사 제품을 개발하거나, 다른 지역(아시아, 라틴아메리카) 또는 특정 시장(예: 바 전용 결제 시스템)을 겨냥한 경우가 많음

PearAI 논란과 YC의 경쟁 스타트업 지원

     * 데이터 분석 스타트업 Deckmatch는 PearAI 논란을 계기로 YC의 유사 스타트업 지원 경향을 조사
          + PearAI는 YC 지원을 받은 또 다른 스타트업 Continue의 AI 코드 편집기를 복제한 것으로 비판받음
          + PearAI 창업자는 이를 어느 정도 인정하며 제품을 재구축하겠다고 발표
     * YC CEO Garry Tan은 ""더 많은 선택지가 좋다""며 경쟁 스타트업 지원 방침을 옹호
          + 이전에도 같은 카테고리의 스타트업을 지원한 사례가 있음
          + 예: 경찰 바디캠 스타트업 Flock Safety(2017년)와 Abel Police(2024년)

YC의 창업자 중심 투자 철학

     * YC는 아이디어보다 창업자의 역량에 중점을 둠
          + ""변화를 이끄는 창업자의 잠재력, 비전, 실행 능력을 평가""
          + 특정 카테고리의 경쟁 스타트업 동시 지원도 허용

YC 졸업생의 반응

     * 일부 졸업생은 유사 제품 경쟁에 불만을 가짐
          + 보안 스타트업 Oneleet 창업자는 유사 제품으로 경쟁한 경험을 공유
     * 다른 졸업생들은 경쟁이 긍정적이라 평가
          + Tile 창업자인 Nick Evans는 ""스타트업은 경쟁으로 죽지 않는다. 고객의 무관심으로 죽는다""고 주장
          + 동일한 카테고리의 경쟁 스타트업 지원이 투자자의 산업 이해를 높인다고 봄

Deckmatch와 분석 배경

     * Deckmatch는 YC 스타트업 제품 분석을 통해 새 데이터 분석 도구 AlphaLens를 시연
          + AlphaLens는 8백만 개 이상의 스타트업 데이터를 분석, 유사/독창적 제품 식별
          + YC의 특정 인기 카테고리 및 시기적 트렌드 공개

YC가 선호하는 제품 카테고리

     * AI 코드 편집기
          + 대표 사례: Continue, Void, EasyCode, Greptile 등
     * 음식/음료/레스토랑 PoS(Point of Sale) 시스템
          + Avocado, Dripos 등 2020~2023년 다수 지원
     * 비즈니스 금융/급여 관리
          + Gusto, Rippling의 성공으로 Warp, Zeal 같은 경쟁사 등장
     * AI 판매 및 고객 관계 관리(CRM)
          + Apten, Persana AI, Topo 등
     * AI 미팅 도우미
          + Circleback, Spinach AI 등
     * AI 법률 보조 도구
          + Dioptra, Leya 등

감소세를 보이는 인기 카테고리

     * 암호화폐 거래 플랫폼
          + Coinbase 성공 이후 2014~2022년 동안 약 12개 스타트업 지원
     * 전자상거래 플랫폼
          + Shopify와 유사한 스타트업 지원은 2018~2022년 사이에 집중
     * 기업 경비 카드
          + Brex 성공 후 2018~2022년 다수 지원
     * YC의 투자 경향은 창업자를 중심으로 하며 특정 시장의 경쟁 스타트업 동시 지원을 허용하는 독특한 방식을 채택함.

        Hacker News 의견

     * YC 스타트업은 독창적일 필요가 없음을 강조함. 초기 단계에서 아이디어의 좋고 나쁨을 판단하기 어렵고, 아이디어는 변하고 스타트업은 피벗하며 시장은 검증되지 않음. 새로운 아이디어보다는 기존 아이디어의 새로운 접근이 성공 가능성이 높음
     * YC 회사들이 비슷한 제품을 만들 수 있지만, 목표 시장, 시장 진입 경로, 제품 초점 등은 다를 수 있음을 지적함. 예를 들어, IBM DOORS와 유사한 요구사항 관리 앱을 만들었지만, 목표 시장이 다름
     * YC가 창업자에 투자하는 것이 맞다고 믿으며, 투자 노출을 극대화하기 위한 전략으로 여러 유사한 아이디어에 투자하는 것이 중요함을 언급함. Box.net과 Dropbox에 모두 투자한 사례를 제시함
     * 경쟁이 시장을 검증하는 데 도움이 되며, 많은 경우 경쟁사들이 서로 우호적인 관계를 유지하면서 시장을 확장하는 데 기여함. 특히 비즈니스 SaaS에서는 Excel이 주요 경쟁 상대임
     * 벤처 캐피털의 작동 방식을 상기시킴. 새로운 기술에 투자하여 다수의 실패를 감수하고 하나의 큰 성공을 기대하는 것이 VC의 역할임. YC는 여전히 VC 회사로 간주됨
     * 투자자로서 특정 제품이나 아이디어가 좋다고 믿는다면, 그 아이디어를 실행하는 사람이나 팀과 성공 확률을 분리하고 싶을 수 있음. 시장을 식별하고, 그 시장에서 실행할 수 있는 회사를 선택하는 것이 중요함
     * Y Combinator가 합병에 적합한 장소로 보이며, 매년 겨울마다 팟캐스팅 회사를 지원한 사례를 언급함
     * Techstars를 통해 스타트업을 진행했지만, 유사한 회사가 더 많은 자금과 주목을 받았음을 경험함. 결국 두 팀 모두 확장에 실패했지만, 더 나은 팀이 성공할 수 있었다면 그들의 선택이 옳았을 것임
     * YC가 유사한 제품을 만드는 스타트업을 자주 수용하며, 일부는 직접 경쟁자이고, 다른 일부는 새로운 지리적 시장이나 더 큰 시장의 하위 집합을 목표로 함. ""Crossing The Chasm""에 따르면, 모든 스타트업은 전체 시장을 장악하기 전에 틈새 시장을 정복해야 함. 특정 틈새 시장에서 성공한 투자가 있다면, 다른 틈새 시장에도 투자하는 것이 현명한 전략임
"
"https://news.hada.io/topic?id=17972","Redis가 모든 오픈소스 Redis 라이브러리를 장악하려는 중 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Redis가 모든 오픈소스 Redis 라이브러리를 장악하려는 중

     * Redis 상표권을 소유한 Redis Inc.가 Redis 관련 OSS들에 법적인 연락을 취하는 중
     * Jedis, Lettuce, redis-py가 다운되었고, 이제 redis-rs를 위협
     * Redis-rs에 연락해서 얘기한 내용은 다음과 같음
          + 현재 이 라이브러리의 상태는 자신들(Redis Inc.)쪽에서 억셉터블하지 않음
          + 그래서 제공 가능한 옵션들은 이런 내용으로 요약 가능
               o Redis Inc.가 상업적으로 인수
               o 라이브러리 이름이 상표권 위반이므로 패키지 이름을 변경
               o Redis 프로젝트의 거버넌스에 따라 지속적으로 유지 관리

   배경을 잘 모르시는 분들은 위해:
   Redis는 Redis Inc가 만들지 않았습니다.

   WordPress와 상황이 비슷하면서 다른데, Redis 관련 기술 지원을 하던 업체가 Redis 개발자를 3년인가 4년정도 고용하면서 상표권과 소스 베이스를 구매하고 이름을 Redis Inc로 바꾸고 독점화 하려고한다..정도였던것 같네요.

   다들 결국엔 Redis 가 관련 라이브러리들이 Valkey와 호환되지 않도록 하게 만들것이라고 우려하고 있네요. 이게 짜증나는 사람들은 미리 다 Valkey로 넘어가려는 것 같고요.

   Valkey가 빠르게 Redis를 대체하고 있음
   Valkey - 리눅스 재단(Linux Foundation)이 발표한 Redis의 오픈소스 대체재
   Redis 자리를 차지하기 위한 대체제 경쟁

   Redis, 라이선스를 BSD 에서 듀얼 라이선스로 변경
   GN⁺: Redis, 이중 소스-사용 가능 라이선스 채택
   Redict은 redis의 독립, 카피레프트 포크입니다

        Hacker News 의견

     * Redis의 상표권 문제로 인해 프로젝트에서 Redis를 제거하려고 노력 중임
          + Redis Labs의 변호사가 Redis™라는 상표를 강조하며 웹사이트에 표시할 것을 요구했음
          + 이러한 요구로 인해 Redis를 의존성에서 제거하려고 함
     * Redis가 오픈 소스 라이브러리를 장악하려는 시도로 보임
          + Jedis, Lettuce, redis-py 등이 영향을 받고 있으며, redis-rs도 위협받고 있음
     * Redis_py 프로젝트는 Redis Labs의 상표 등록보다 오래된 프로젝트임
          + 최근의 상표 등록은 공격적인 움직임으로 보임
          + 기존의 사용이 정당하다고 생각하며, 프로젝트가 이러한 움직임에 굴복하지 않기를 바람
     * 상표권 주장이 점점 더 일반화될 가능성이 있음
          + 라이브러리가 특정 제품과 연결된다는 것을 암시하지 않도록 이름을 일반화해야 할 필요성이 있음
     * Redis가 인기 있는 라이브러리를 자신들의 우산 아래로 끌어들이려는 시도로 보임
          + Valkey와의 호환성을 깨려는 방어적인 움직임으로 보임
     * 프로젝트 이름을 지을 때는 핵심 제품과 다른 이름을 사용하는 것이 중요함
          + ${name}-rs 같은 이름은 피하고, 리포지토리의 래퍼로 만드는 것이 좋음
     * PSF도 상표권 주장을 방어함
          + Python-2.8이라는 이름 사용에 반대하며, 법적 조치를 고려한 적이 있음
     * Redis Inc.의 움직임이 Nagios의 사례와 유사하다고 봄
          + Nagios의 사례는 일부에게 재미를 주었음
          + crates.io 팀이 유사하게 대응하기를 바람
"
"https://news.hada.io/topic?id=17933","커리어를 끝내는 실수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              커리어를 끝내는 실수

    경력의 끝

     * 경력의 끝은 은퇴 날짜를 정하는 것이 아니라, 경력의 목표를 설정하는 것임.
     * 현재 하는 일을 사랑하고 바꾸고 싶지 않다면 이미 경력의 끝에 도달한 것임.
     * 그렇지 않다면, 어떤 일을 사랑할 수 있을지, 그리고 그 일을 어떻게 얻을 수 있을지 고민할 필요가 있음.

    통제 불능

     * ""경력""이라는 단어는 ""무질서하게 달리다""라는 의미도 포함함.
     * 많은 사람들이 경력의 방향을 제대로 설정하지 못하고, 만족스럽지 않은 직업에 머물러 있음.
     * 경력을 계획하고 원하는 것을 얻기 위해 적극적으로 행동해야 함.

    목적지 선택

     * 연금 계획을 일찍 시작하는 것이 중요하듯이, 경력 계획도 일찍 시작하는 것이 중요함.
     * 경력 초반에는 실험과 실수를 할 수 있는 여지가 많음.
     * 경력의 마지막 단계에서는 선택의 폭이 좁아지므로, 원하는 위치에 도달하기 위해 계획을 세워야 함.

    세 가지 경력 유형

    1. 고위직
          + 고위 엔지니어는 기술적으로 뛰어나며, 주로 기술 작업에 집중함.
          + 많은 돈과 권위를 얻을 수 있지만, 작업 선택의 자유는 제한적일 수 있음.
    2. 관리직
          + 관리자는 기술적 역량뿐만 아니라 사람을 이끄는 능력이 필요함.
          + 좋은 관리자는 드물지만, 프로젝트와 회사의 성공에 큰 영향을 미침.
    3. 독립
          + 독립적으로 일하는 것은 자신의 회사를 운영하거나 컨설턴트로 일하는 것을 의미함.
          + 불규칙한 수입과 같은 단점이 있지만, 자신의 사업을 소유할 수 있음.

    선택하기

     * 경력의 방향과 목표를 생각하고, 이를 위해 무엇을 할 수 있는지 고민해야 함.
     * 경력의 여러 가능성을 탐색하고, 자신의 가치와 일치하는 방향으로 나아가야 함.

    작은 방향 수정

     * 경력의 방향을 설정하면 선택에 도움이 됨.
     * 너무 세부적인 계획보다는 유연하게 대처할 수 있는 계획을 세워야 함.

    계획의 중요성

     * 경력의 끝을 위한 계획은 지금 시작해야 함.
     * 준비된 마음은 기회를 인식할 수 있음.

        Hacker News 의견

     * 사람은 본질적으로 변화하기 때문에 경력 계획이 항상 유효하지 않음
          + 인생의 시기에 따라 교육, 가족 등 다른 것이 중요할 수 있음
          + 경력을 중단하거나 전환하는 것이 자연스러움
          + 정점에 도달하는 데 10년이 걸리지만, 40대에 시작해도 괜찮음
     * 대기업에서의 경력은 떠난 후 5년이 지나면 거의 기억되지 않음
          + 대부분의 팀원들이 다른 직업으로 이동함
          + 코드가 리팩토링되거나 다시 작성됨
          + 문서가 CMS 마이그레이션 중에 사라짐
          + 취미, 친구, 가족이 더 중요하다고 느끼는 경우가 많음
          + 빠르게 돈을 벌고 에너지를 소모하지 않는 것이 중요함
     * 기술 분야에서 20년 후를 계획하는 것은 어렵다고 생각함
          + 세상이 선형이 아닌 기하급수적으로 변화함
          + 10년 후에는 현재의 1/5만큼의 개발자가 필요할 수도 있음
     * ""무엇이 되고 싶은가?""라는 질문에 대한 답을 모른다고 해도 괜찮음
          + 다양한 회사와 직책을 경험하며 성공적인 경력을 쌓음
          + 계획 없이 프로젝트와 기회를 따라가는 삶이 행복할 수 있음
     * 대부분의 사람들은 자율적으로 경력을 설계할 수 있는 여지가 적음
          + 가족과 시간을 보내기 위해 매주 10시간을 잃을 수 없음
          + 같은 경력의 새로운 변형을 위해 기술을 향상시키는 것이 어려움
     * 프로그래머로서의 경력을 계획하지 않았지만, 40년 후에 은퇴함
          + 15개의 다른 고용주와 함께 일하며 새로운 것을 경험함
          + 단기적인 관점이 성공적인 삶을 위한 최적화가 될 수 있음
     * 모든 회사에서 기술과 관리 중 하나를 선택해야 하는 것은 아님
          + Stream에서는 리드가 80% 기술적이고, 디렉터는 50% 기술적임
          + 기술적 우수성 없는 관리 트랙은 잘못된 생각임
     * 경력의 끝을 다양한 방식으로 열어야 함
          + 이전 경험 없이 다양한 역할로 이동할 수 있는 능력을 갖추는 것이 목표임
          + 부자가 되어 일을 하지 않는 것도 경력의 한 형태임
          + 디지털 노마드도 경력의 끝으로 고려해야 함
     * 경력의 끝이 불확실함
          + 클라우드 컴퓨팅의 기회를 통해 소프트웨어 개발로 진입함
          + DIY 기술을 활용한 건설업 사업을 꿈꾸기도 함
          + 매니저 역할은 매력적이지 않지만, 자신의 사업을 운영하려면 필요할 수 있음
     * 현재 하는 일을 사랑하고 직업을 바꾸고 싶지 않다면 경력의 끝에 도달한 것임
          + 스트레스가 적고 유연한 원격 웹 개발 직업을 가짐
          + 높은 연봉과 낮은 생활비 지역에서의 생활이 만족스러움
"
"https://news.hada.io/topic?id=17895","AlphaQubit - AI를 활용한 양자 컴퓨터의 오류 식별 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AlphaQubit - AI를 활용한 양자 컴퓨터의 오류 식별

     * Google DeepMind와 Quantum AI 팀이 공동으로 개발한 AlphaQubit은 AI를 이용하여 양자 컴퓨터 내부의 오류를 정확하게 식별함
     * 이 기술은 양자 컴퓨터를 더 신뢰할 수 있도록 만들어 약물 발견, 재료 설계, 기본 물리학 등에서 혁신 가능성을 제공하며 기존 컴퓨터로 수십억 년 걸리는 문제를 몇 시간 만에 해결할 수 있음
     * 그러나 양자 프로세서는 기존 프로세서보다 노이즈에 취약함. 양자 컴퓨터의 신뢰성을 높이려면 오류를 정확히 식별하고 수정해야 함
     * AlphaQubit은 양자 컴퓨터가 대규모 계산을 수행할 수 있도록 정확한 오류 식별 기능을 제공하며, 이는 과학적 돌파구를 위한 필수 단계임

양자 컴퓨팅 오류 수정

     * 양자 컴퓨터는 초전도와 얽힘과 같은 물질의 독특한 속성을 활용하여 기존 컴퓨터보다 빠르게 복잡한 문제를 해결할 수 있음
     * 그러나 양자 비트(큐비트)의 자연적 상태는 열, 진동, 전자기 간섭, 우주선 등 다양한 요인으로 인해 쉽게 방해를 받음
     * 양자 오류 수정 기술은 여러 물리적 큐비트를 그룹으로 묶어 하나의 논리적 큐비트를 형성하고, 일관성 검사를 통해 오류를 식별하여 수정함
     * AlphaQubit은 이 일관성 검사 데이터를 사용하여 오류를 감지하는 신경망 기반 디코더 역할을 함

신경망 기반 디코더 AlphaQubit 개발

     * AlphaQubit은 Google이 개발한 Transformer 아키텍처를 활용하여 일관성 검사를 바탕으로 오류를 예측하는 신경망 기반 디코더임
     * Sycamore 양자 프로세서에서 생성된 데이터를 활용해 수백만 개의 오류 예제를 학습하며 정확도를 높였음
     * 기존 디코더와 비교해 AlphaQubit은:
          + 텐서 네트워크 기반 디코더보다 6% 더 낮은 오류율을 기록 (텐서 네트워크는 정확하지만 비효율적임)
          + 빠르면서도 정확한 correlated matching 방법보다 30% 낮은 오류율을 달성

AlphaQubit의 확장성과 미래 가능성

     * AlphaQubit은 현재 사용 가능한 시스템을 넘어서는 241 큐비트 이상의 데이터를 활용한 시뮬레이션에서 탁월한 성능을 보였음
     * 더 큰 시스템에서 AlphaQubit은 여전히 높은 정확도를 유지하며, 중규모 양자 장치에서도 잘 작동할 가능성을 시사함
     * AlphaQubit은 입력 및 출력에서 신뢰도를 보고할 수 있는 기능도 제공하여 향후 양자 프로세서 성능 향상을 지원할 수 있음
     * 최대 100,000 라운드 이상의 오류 수정 시뮬레이션에서 안정적인 성능을 유지하며 훈련 데이터 이상의 일반화 능력을 입증함

실용적인 양자 컴퓨팅을 향한 도전

     * AlphaQubit은 양자 오류 수정에서 기계 학습의 가능성을 보여주는 중요한 이정표를 세움
     * 하지만 실시간 오류 수정을 위한 속도 문제와 데이터 효율성 훈련 방식 개선 등 해결해야 할 과제가 남아 있음
     * Google 팀은 기계 학습과 양자 오류 수정 기술의 선도적인 발전을 결합하여 신뢰할 수 있는 양자 컴퓨터 개발을 목표로 함

        Hacker News 의견

     * 양자 메모리를 유지할 때, 양자 오류 수정 코드의 패리티 검사를 측정함. 이러한 패리티 검사는 논리 상태에 대한 정보가 아닌 오류에 대한 부분적인 정보를 포함하며, 논리적 양자 정보는 이 과정을 통해 일관성을 유지함.
     * 이러한 측정은 고전적인 데이터이며, 측정된 신드롬으로 인해 발생한 가장 가능성 있는 오류를 추론하기 위해 계산이 필요함. 이 과정을 디코딩이라고 함.
     * 이 연구는 매우 일반적인 양자 코드인 서피스 코드에 대한 디코딩 알고리즘으로 작용하는 모델임. 서피스 코드는 반복 코드의 양자적 유사체와 같음.
     * AlphaQubit은 신드롬 입력을 기반으로 논리적 관측치의 오류를 예측하는 재발변환기 기반 신경망 구조임. 이 네트워크는 시뮬레이션 샘플로 사전 훈련하고 제한된 양의 실험 샘플로 미세 조정하여 Sycamore 서피스 코드 실험을 이전의 어떤 디코더보다 정확하게 디코딩함.
     * 서피스 코드에서의 한 번의 오류 수정 라운드에서는 X와 Z 안정자 정보가 디코더의 내부 상태를 업데이트하며, 각 안정자에 대한 벡터로 인코딩됨. 내부 상태는 주의와 합성곱을 포함하는 신드롬 변환기 신경망의 여러 층에 의해 수정됨.
     * 논문과 참조된 그림 외에는 아키텍처에 대한 자세한 설명을 찾을 수 없다는 의견이 있음. 2017년 이후로 Google이 ML 방법론을 쉽게 제공하지 않는다는 점을 지적함.
     * 본질적으로 오류가 발생하기 쉬운 계산이 또 다른 오류가 발생하기 쉬운 계산에 의해 수정되고 있다는 의견이 있음.
     * 고전적인 시스템이 양자 시스템에서 오류를 감지/수정할 수 있는 방법에 대한 의문이 제기됨. 모든 양자 오류 수정 알고리즘이 큐비트를 기반으로 한다고 생각했음.
     * 양자 컴퓨팅과 AI는 분명히 하이프의 정점임.
     * AI 하이프에 대해 불평할 곳이 없다는 의견이 있음. 유일한 AI 관련 내용이 반쯤 합법적으로 들린다는 의견도 있음.
     * 이 모든 것이 과거의 ""컴퓨터와 함께"" 특허와 같다는 느낌이 듦.
     * 이제 암호화폐를 여기에 통합하면 거의 완성된다는 농담이 있음.
     * 양자 컴퓨터에 대해 잘 알지 못하지만 흥미롭다는 의견이 있음. 양자 컴퓨터 부품 목록으로 모든 것이 필요하고 많은 GPU가 필요하다는 의견이 있음.
     * 오랫동안 시도했지만 여전히 양자 컴퓨팅이 어떻게 작동하는지 이해하지 못한다는 의견이 있음. 항상 모든 가능한 조합을 시도하고 답을 얻는다는 식으로 설명됨.
"
"https://news.hada.io/topic?id=17981","Show GN: Cursor Chat Keeper - Chat 히스토리를 마크다운으로 정리해주는 Cursor 익스텐션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: Cursor Chat Keeper - Chat 히스토리를 마크다운으로 정리해주는 Cursor 익스텐션

   Cursor 에디터의 Chat 기록을 마크다운으로 정리해주는 익스텐션입니다.

   Cursor의 Chat 기록이 로컬에 저장되어, 여러 환경에서 개발하는 경우에는 이전 Chat들을 참고할 수 없는 것이 불편해서 개발했습니다.

   Git 으로 관리하는 프로젝트의 경우, 코드 변경이 어떤 Chat들을 재료로 이루어졌는지 알 수 있다는 점에서도 유용할 것 같다고 생각합니다.

   Cursor의 Extensions pane에서 Cursor Chat Keeper를 검색해서 다운로드 하거나,
   Marketplace 에서 .vsix 파일을 다운로드 받아서 드래그하는 방식으로 설치할 수 있습니다.

   아래 주소의 Marketplace 에 자세한 내용을 적어두었습니다.
   https://marketplace.visualstudio.com/items/…

   Cursor 사용하는 분들께 도움이 되었으면 좋겠네요!

   Cursor가 다 편한데 지금 하던거 다른 PC에서 옮겨서 하려니 답이 안나오더군요

   인덱싱 해둔 Docs들, 참조용으로 작성한 Notebooks, API 키 뭐하나 동기화 되는게 없어서...
"
"https://news.hada.io/topic?id=17915","테크 유토피아 환상은 끝났다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            테크 유토피아 환상은 끝났다

기술의 초기 이상과 현실의 괴리

     * 과거에는 기술의 미래에 대한 긍정적인 시각이 주를 이루었음
          + 광고 및 미디어는 기술이 인간의 삶을 편리하고 효율적으로 만들며, 흥미롭고 독창적인 디자인과 소재를 통해 꿈같은 미래를 그려냄
          + 문제점(생산 방식, 에너지 소비, 자원 문제 등)에 대한 고민은 적었고, 기술은 단지 '멋진 것'으로 여겨졌음
     * 스마트폰과 소셜 미디어의 등장
          + 기술은 모든 사람, 심지어 저소득층도 인터넷과 교육에 접근할 수 있게 함
          + 인터넷은 새로운 지식 공유의 시대를 열고, 모든 사람이 성공할 수 있는 기회를 제공한다고 믿어짐
          + 하지만 이 모든 이상적인 전망은 실제로 실현되지 않았고, 기업의 마케팅 이미지와 현실 간의 괴리가 커지고 있음

인터넷의 긍정적인 면과 증가하는 부정적인 영향

     * 인터넷과 기술의 긍정적인 면
          + 정치적 지식과 저항 강화, 검열 회피, 새로운 형태의 인간 관계 및 문화 교류
          + 학문적 자료 접근성 증가, 장애인을 위한 사회적 참여 기회 확대 등
     * 부정적인 측면이 점차 주목받음
          + 정보의 검색과 접근성이 악화됨
          + 잘못된 정보의 확산과 AI로 인한 혼란
          + 상업화된 플랫폼의 우세로 인해 독립적이고 전문적인 콘텐츠가 줄어듦
          + 교육 자료와 분석적인 콘텐츠의 점점 증가하는 페이월

  기술로 해결하려던 사회 문제들: 미완성된 약속

     * 경제적 상승과 교육적 평등
          + 인터넷은 일부에게 경제적 기회를 제공했으나, 대부분은 돈과 주목을 위해 인간성을 저하시키는 콘텐츠 생산에 몰두
          + 높은 품질의 교육 자료가 점점 비용 장벽 뒤로 숨겨짐
     * 인종차별 및 편견 감소
          + 글로벌 연결이 오히려 극단주의와 갈등을 조장하는 경우가 많음
          + 소수자 및 취약 계층이 온라인에서 더 많은 혐오와 괴롭힘을 겪음
     * 지속 가능성 문제
          + 기술의 생산, 유지, 폐기 과정에서 환경에 미치는 부정적인 영향이 명확해짐
          + AI와 암호화폐 같은 신기술이 에너지와 자원을 과도하게 소모

  주요 기술 기업들의 행보와 문제점

     * Meta (Facebook, Instagram, Threads, WhatsApp, Quest 등 소유)
          + 선거와 관련된 잘못된 정보 확산 (예: Cambridge Analytica 스캔들)
          + Facebook 알고리즘이 로힝야족에 대한 폭력을 조장했다는 비판
          + 사용자 데이터 오용 사례
     * ByteDance (TikTok, Douyin, CapCut, Lemon8 등 소유)
          + 중국 정보 기관과의 연계 및 여론 조작 가능성으로 인한 불신
          + 홍콩 시위와 위구르 탄압과 관련된 검열 논란
          + 러시아 친선적 프로파간다를 확산했다는 의혹
     * Amazon (Prime, Music, Audible, Twitch, IMDb, Goodreads, Whole Foods 등 소유)
          + 노동조합 활동 방해 및 노동자의 적절한 임금과 근무 환경 보장에 비협조적
          + 창고와 배송 기사들의 열악한 근로 환경 (예: 기사들이 병에 소변을 본 사례)
          + 전 CEO 제프 베이조스가 특정 정치적 입장을 표명하며 논란에 휩싸임
     * Alphabet (Google, YouTube, Android, Fitbit 등 소유)
          + 개인정보 침해와 중국, 터키, 러시아 등과 관련된 정치적 검열 문제
          + 성희롱 불만사항 처리 실패 및 열악한 근무 환경
          + 반노조 캠페인 및 HIPAA(미국 건강보험 이동과 책임에 관한 법률) 위반
     * X (구 Twitter)
          + 엘론 머스크와 연계된 기업 이미지로 인해 비판이 많음
          + 공해 유발, 숲 파괴, 물 부족 문제를 포함한 환경적 비판
          + 엄격하고 가혹한 회사 문화로 노동자 권리를 침해한다는 평가
     * Andreessen Horowitz (a16z로도 알려짐, 주요 투자사)
          + Skype, Facebook, Twitter, Coinbase 등 유명 스타트업에 투자
          + 자율 무기를 제조하는 Anduril에 투자
          + 암호화폐 관련 투자로 인해 환경 문제 및 사기 논란
     * YCombinator
          + DoorDash, Coinbase, Dropbox, Reddit, Stripe, Twitch 등의 스타트업 지원
          + CEO Garry Tan의 반진보적 입장과 규제 반대, 엘론 머스크 지지 성향
     * Sequoia Capital
          + Apple, Nvidia, ByteDance, Cisco 등의 투자사
          + 중국 군사 관련 문제와의 연계로 논란
          + 특정 정치적 인물 및 당파 지원으로 비판받음
     * 기타 주요 인물
          + David Sacks (전 PayPal COO): 공화당에 다수 기부 및 정치적 행보 논란
          + Peter Thiel (PayPal 공동 창립자, Palantir Technologies 설립자): 트럼프 캠프에 100만 달러 이상 기부

결론

     * 이 글은 단순한 블로그 게시글로 작성된 것으로, 모든 회사를 다루지 못했음. 여기 언급된 사례 외에도 추가로 조사할 기업과 논의할 내용이 많음.
     * 물론 몇몇 기업들은 부정적인 영향을 완화하거나 자금을 선한 목적으로 사용하려는 노력을 했으나, 이는 충분하지 않으며, 기술 산업이 점점 우경화되고 있다는 우려가 있음.
     * 이들이 사용자로부터 얻은 돈과 데이터를 의심스러운 목적에 사용하는 사례가 늘어나는 추세임.
     * 이러한 행동이 기술 기업들이 홍보하는 높은 이상과 마케팅 이미지와 어떻게 부합하는지 의문스러움. 단순히 더 많은 기술을 투입한다고 문제가 해결될 수는 없음.
     * 결론적으로, 기술 유토피아 환상은 이제 나에게 완전히 죽은 개념임
          + 멋지고 진보적이며 히피적인 실리콘밸리 기술의 이미지는 잘못된 것임.
          + 이 기업들과 이들이 의존하는 벤처 캐피털은 당신의 이익에 반하는 가치를 지지하며, 그들의 마케팅 이미지와도 전혀 부합하지 않음.
          + 그들에게 더 이상 돈, 시간, 데이터를 제공하지 않도록 해야 함.
          + 이들은 약속했던 이상에 우리를 더 가까이 이끌지 않을 것임.

        Hacker News 의견

     * 기술에 대한 지나친 낙관주의는 문제의 근본임. 제약 산업의 부패를 경험한 후 실망한 어머니의 사례를 언급하며, 산업에 대한 낙관보다는 인류의 발전에 기여할 수 있는 자신의 잠재력에 대한 낙관이 더 나음. 나쁜 행위자가 항상 존재할 것이지만, 해결책을 만드는 데 참여하는 것을 포기해서는 안 됨. 냉소적이거나 비관적인 태도는 장기적으로 도움이 되지 않음
     * 기술은 여전히 좋은 것이지만, 특정 기술 비즈니스 모델이 문제임. 과거에는 기술이 사람들의 삶을 더 편리하고 즐겁게 만드는 도구였으나, 이제는 사람들을 광고 클릭과 지출로 유도하는 수단이 됨. 광고와 구독 비즈니스 모델이 문제의 근본 원인임. 기술 산업의 성공 비결은 가치를 보여주고 의존성을 키우며, 많은 돈을 지불하지 않으면 기능을 제거하겠다고 위협하는 것임. 이는 다른 산업으로도 확산되고 있음
     * 정보가 자유롭기를 원했던 웹의 초기 시절을 회상하며, Linux, Wikipedia와 같은 프로젝트가 낙관주의의 사례를 증명했음. 온라인 문화는 매우 달랐고, 다양한 사람들이 있었지만 그들이 주도하지는 않았음
     * 부정적인 의견이 많지만, 객관적으로 세계는 많은 면에서 나아졌음. 극빈층이 거의 사라졌고, 소아마비가 거의 근절되었으며, 많은 암이 치료 가능해졌음. YouTube, Wikipedia 등을 통해 무료로 원하는 것을 배울 수 있음. 문제는 여전히 존재하지만, 90년대에 태어난 것이 60년대에 태어난 것보다 나음
     * 기술은 기존 권력 구조를 잠시 방해할 뿐, 궁극적으로는 이를 강화함. 기술만으로는 권력 구조를 지속적으로 전복할 수 없음. 유토피아가 몇 줄의 코드로 가능하다고 믿는 사람들이 많다는 것이 놀라움
     * 이 글은 'techlash'에 대한 훌륭한 게시물 중 하나임. 구체적인 예시와 주석을 포함한 저자의 노력이 돋보임
     * 처음부터 낙관주의를 느끼지 못했음. 2013년 즈음부터 기업들이 적대적일 것이라고 기대하게 되었음. WhatsApp을 통해 멀리 있는 친척과 연결되는 노인들의 행복을 이해하지만, 기업이 프로그램 사용을 통제하려 한다면 그들의 우선순위는 나의 이익이 아님. 정책 입안자들이 기술적 세부 사항에 무관심하거나 부패로 인해 반대 방향으로 움직이고 있음. 해결책은 없지만, Free Software Foundation, EFF, Tor Project와 같은 사용자 이익을 위해 행동하는 조직에 시간과 돈을 기부함
     * 과거에는 기술에 대한 긍정적인 시각이 있었지만, 현실은 중간 어딘가에 있음. 영화 'Threads', 'Terminator 2', 'Blade Runner' 등을 언급하며, 미래에 대한 시각이 항상 긍정적이지 않았음을 지적함
     * 기업과 벤처 캐피탈이 지원하는 가치와 정부가 개인의 이익에 부합하지 않는다는 의견에 동의함. 공개적으로 거래되는 회사가 개인의 이익을 위해 행동한다고 믿는 것은 착각임
     * 미국의 경제 및 정치 시스템이 역사적 경향에 따라 작동하는 것에 놀라는 사람들에 대한 언급. 2000년이 황금기를 가져올 것이라고 기대한 것은 비현실적임
"
"https://news.hada.io/topic?id=17959","직원 성과의 가우시안 분포 여부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           직원 성과의 가우시안 분포 여부

    직원 성과는 정말로 가우시안 분포를 따르는가?

      데이터 과학자의 관점

     * 요약: 직원 성과는 가우시안 분포가 아닌 파레토 분포를 따를 가능성이 높음. 이는 대기업의 성과 관리 프로세스의 문제점을 설명하고, 우수한 인재를 채용하기 어려운 이유를 밝힘. 경제학적으로는 임금의 한계 생산성 이론과 지니 계수를 결합하여 주요 통찰을 얻음.
     * 성과 관리 시즌: 포춘 500대 기업에서는 매년 4분기에 성과 관리가 이루어짐. 직원들은 지난 12개월 동안의 성과에 따라 평가받고, 보너스와 급여 인상이 결정됨.
     * 가우시안 분포의 한계: 많은 기업이 직원 성과를 가우시안 분포로 가정하지만, 이는 현실과 맞지 않음. 실제로는 파레토 분포가 더 적합할 수 있음.

    다른 관점: 파레토

     * 임금과 성과의 관계: 경제학에서는 임금이 직원의 성과를 반영한다고 봄. 파레토 분포는 임금 분포와 성과 분포를 설명하는 데 유용함.
     * 파레토 분포의 장점: 파레토 분포는 성공과 실패의 비율을 더 잘 설명함. 대기업의 성과는 파레토 분포를 따르는 경향이 있음.

    시사점

     * 성과 관리의 변화 필요성: 파레토 분포를 고려하면 매년 하위 10%를 해고할 필요가 없음을 시사함. 성과 관리 프로세스는 파레토 가정을 기반으로 재설계될 필요가 있음.
     * 채용의 어려움: 낮은 성과를 보이는 직원이 높은 성과를 보이는 직원보다 3배 더 흔함. 이는 채용의 어려움을 설명함.

    결론 및 전망

     * 성과 관리의 재고: 현재의 성과 관리 시스템은 시대에 뒤떨어져 있으며, 파레토 분포를 고려한 새로운 접근이 필요함. 성과 관리의 목표 달성 여부를 모니터링하고, 비용 분석을 통해 시스템의 효율성을 평가해야 함.
     * 역사적 배경: 현대의 성과 관리 시스템은 1980년대 GE에서 시작되었으며, 당시에는 평생 고용이 일반적이었음. 그러나 현재는 직원들이 자주 이직하므로, 기존의 당근과 채찍 방식은 재고가 필요함.

    추가 콘텐츠

     * 파레토 아이디어의 데이터 지원: 20세기 초의 데이터가 파레토 아이디어를 지지함. 직원 성과는 주관적이며, 객관적인 수치를 찾기 어려움.
     * ""롤링 업"" 관행에 대한 고찰: 강제 분포 사용으로 인해 약 5%의 직원이 부당하게 평가받을 수 있음. 이는 성과 관리의 공정성을 저해할 수 있음.

        Hacker News 의견

     * 많은 대기업에서 2024년에 실행되는 성과 관리는 구식 기술이며 업데이트가 필요함. 직원들이 개별적으로 회사에 얼마나 기여했는지에 따라 보상을 받는다는 가정은 잘못된 것임. 고용주는 직원에게 가능한 최소한의 보수를 지급하려고 하며, 이는 정보 비대칭성과 가우시안 분포를 이용함. 공정성은 기대하기 어려움.
     * 회사가 효율성을 우선시하고 하위 5%를 줄이는 것이 아니라, 결합된 생산성이 더 중요함. 모든 직원이 눈에 띄는 기능을 개발하는 슈퍼스타일 필요는 없으며, 청소부나 카페 직원도 필요함.
     * IQ는 가우시안 분포가 아니며, 이는 제조된 것임. IQ 테스트는 가우시안 분포를 형성하는 질문을 선택하여 만들어짐. 이는 테스트의 정확성을 높이기 위한 방법임.
     * 인간의 재능이 파레토 분포를 따른다고 해도, 회사에 고용된 사람들은 그 인구의 선택된 하위 집합이며, 선택 방법과 과제에 따라 다른 분포를 가질 수 있음. 회사와 산업 내에서의 데이터를 통해 주장을 뒷받침해야 함.
     * Netflix에서는 모든 직원이 최고 성과자라는 기본 가정이 있었음. 성과와 보상은 완전히 분리되어 있었으며, 성과 평가는 360도 동료 리뷰로 이루어졌음.
     * 대기업에서의 직원 성과 평가는 데이터 기반보다는 정치적임. 관리자는 10% 해고 할당량을 무기로 사용하거나, 실제로 존재하지 않는 저성과자를 찾기 위해 강제 기능으로 사용함.
     * 직원 성과를 정의하지 않으면 그래프가 무엇을 나타내는지 알 수 없음. 고용 오류는 연속체이며, 고용 과정은 전체 노동 시장의 일부를 얻으려는 것이 아니라 주어진 급여에서 최대 성과를 얻으려는 것임.
     * 웰치식 스택 랭킹과 가우시안 분포 가정은 잘못된 것으로 연구됨. 많은 연구자들이 파레토 분포가 더 현실적이라고 동의함.
     * 학교 성적은 특히 쉬운 수업에서는 정규 분포를 따르지 않음. 일부 직무는 다른 직무보다 잘 수행하기 쉬움. 행정직은 거의 모든 업무를 성공적으로 수행할 수 있음.
     * 데이터 과학을 통해 직원 그룹을 분석할 때, 이미 해고되거나 승진하기로 결정된 사람들은 이상치로 간주되어 샘플에서 제외되어야 함.
"
"https://news.hada.io/topic?id=17926","시니어 리더에게 피드백을 제공하는 안전한 방법 (해고되지 않고)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  시니어 리더에게 피드백을 제공하는 안전한 방법 (해고되지 않고)

문제 상황과 접근 방식

     * 상위 리더에게 피드백을 전달하는 것은 어려운 과제임
     * 피드백을 하지 않으면 조직의 성과를 해칠 수 있음
     * 피드백을 하면 관계 악화와 개인적인 위험이 있을 수 있음
     * 전통적으로 권력 구조에서 상위 리더가 하위 직원에게 피드백을 주는 것이 일반적임
     * 리더에게 피드백을 주는 것은 이 규범을 뒤집는 것이므로 신중하고 체계적인 접근이 필요함

피드백 전에 고려할 점

     * 내가 통제할 수 있는 점을 개선할 수 있는가?
          + 먼저 자신의 행동이나 태도를 조정해 상황을 개선할 수 있는지 확인
     * 이 상황을 감수할 수 있는가?
          + 불만이 큰지, 리더에게 피드백을 주는 것이 성공 가능성이 있는지 평가
     * 충분히 신중하게 준비되었는가?
          + 섣불리 도덕적 우위를 주장하거나 감정적으로 접근하지 말 것
          + 관계와 신뢰 수준, 리더의 성향 등을 고려

효과적인 피드백 방법론

  1. “더욱 더” 프레이밍 사용

     * 리더가 이미 하고 있는 것을 인정하면서, 그들이 더 나아질 가능성을 제안
          + 예:
               o 🚫 “신입 직원에게 지침을 줘야 합니다.”
               o ✅ “신입 직원에게 조금 더 지침을 주는 것이 유용할 수 있습니다.”
          + 효과: 리더가 비난받는 기분을 느끼지 않고 피드백을 더 잘 수용

  2. 자신의 경험을 예로 들기

     * 민감한 내용을 전달할 때 효과적
          + 예:
               o 🚫 “이 방법을 시도해야 합니다.”
               o ✅ “저도 비슷한 문제를 겪었는데, 이 방법이 도움이 됐습니다.”
          + 효과: 상대방의 자존심을 건드리지 않고 자연스럽게 조언을 제시

  3. 외교적이고 호기심이 담긴 언어 사용

     * 공격적이거나 위협적으로 보이지 않도록 조심
          + 제안형 문장 사용:
               o “이 방법을 시도해 볼 수도 있지 않을까요?”
               o “이 점에 대해 어떻게 생각하세요?”
               o “이 접근법이 어떨까요?”
          + 효과: 협력적이고 건설적인 태도를 강조하여 수용 가능성 증가

  4. 데이터와 사례로 뒷받침

     * 추상적인 주장을 피하고, 구체적인 예시와 논리로 보완
          + 예:
               o 🚫 “우리는 프로젝트 중 더 많은 피드백이 필요합니다.”
               o ✅ “디자인 목업을 주간 리뷰한 결과, 고객이 최종 결과에 매우 만족했음을 알게 됐습니다. 비슷한 접근법이 현재 프로젝트에도 유용할 수 있습니다.”
          + 효과:
               o 제안이 간결하고 논리적임
               o 행동 변화의 이점을 명확히 전달

  핵심 요약

    1. “더욱 더” 프레이밍 활용: 기존의 노력을 인정하면서 개선 가능성을 제시
    2. 자신의 경험으로 전달: 상대방의 방어 반응을 줄이고 공감을 이끌어냄
    3. 외교적이고 협력적인 언어 사용: 협업적인 태도를 강조
    4. 데이터와 사례 제공: 논리적이고 설득력 있는 방식으로 제안

        Hacker News 의견

     * 나쁜 관리자는 자신의 문제를 인식하지 못하는 경우가 드물며, 불안감을 느끼는 경우가 많음. 좋은 리더는 자신의 행동을 인식하고 다른 사람의 관점을 받아들임. 나쁜 관리자를 감싸는 대신, 그들이 해를 끼칠 가능성을 고려하고, 협력적으로 문제를 해결하도록 도와야 함
     * 상사에게 피드백을 줄 때는 직설적으로 전달해야 하며, 상사가 이를 처리하지 못한다면 그들은 관리자로서의 자격이 없음. 부하 직원에게는 피드백을 부드럽게 전달하는 것이 필요함
     * ""Saving Private Ryan""의 대사에서 상사는 불만을 위로 전달해야 한다고 강조함. 이는 조직 내에서 불만이 위로 전달되어야 한다는 것을 의미함
     * 미국 회사에서 일할 때, 특히 H1B 비자로 일하는 경우, 계층 구조에 대한 두려움 때문에 의견을 표현하기 어려움. 다른 문화에서는 계층 구조에 대한 두려움이 적고, 고용법이 더 나은 경우가 많음
     * 13년의 경험을 통해 관리자가 좋으면 문제가 없고, 나쁘면 피드백이 소용없음을 깨달음. 나쁜 관리자에게는 거짓말로 자신을 보호하는 것이 필요함
     * 항공 산업의 Crew Resource Management는 비즈니스 세계에서도 배울 점이 많음. 책임자는 왕이 아니며, 다른 사람이 그들의 결정을 평가하고 문제가 있을 때 말하는 것이 중요함
     * 피드백을 주는 것이 해고의 이유가 되는 것은 이해할 수 없음. 피드백을 주고받는 것이 당연한 문화가 필요함
     * 피드백을 주기 전에 상대방의 상황과 도전 과제를 이해해야 함. 문제를 해결하는 데 도움을 주는 것이 중요함
     * ""어떻게 하면 더 아첨할 수 있을까""라는 제목으로 기사를 다시 작성해야 한다고 주장함. 피드백을 주는 것이 위험하다면, 상위 관리자가 더 나은 리더십 자질을 가진 사람을 찾아야 함
     * ""X를 한 이유가 있나요?""라는 질문은 결정을 수용하고 그 이유를 궁금해하는 방식으로 효과적임. ""제안을 드려도 될까요?""라는 질문도 존중의 표시로 유용함
"
"https://news.hada.io/topic?id=17867","Let's Encrypt 10주년 기념 행사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Let's Encrypt 10주년 기념 행사

     * 인터넷을 통해 개인 및 비즈니스 정보가 빈번하게 전송되고 있으며, 이를 암호화하는 것이 중요함. 그러나 TLS(SSL의 후속 기술)를 모든 곳에서 사용하지 않는 이유는 서버 인증서 때문임.
     * TLS 보호 통신의 핵심은 공용 키 인증서로, 이는 사용자가 의도한 서버와 실제로 통신하고 있음을 증명함. 그러나 많은 서버 운영자에게 기본 서버 인증서를 얻는 것은 복잡하고 비용이 들며 설치와 갱신이 번거로움.
     * Let's Encrypt는 무료 인증 기관으로, 협력과 개방성을 기반으로 하여 간단한 클릭만으로 도메인에 대한 기본 서버 인증서를 발급받을 수 있게 함. Mozilla Corporation, Cisco Systems, Inc., Akamai Technologies, Electronic Frontier Foundation, IdenTrust, Inc., 그리고 미시간 대학교 연구자들이 ISRG를 통해 이 인프라를 제공하고 있음.

Let's Encrypt의 주요 원칙

     * 무료: 도메인 소유자는 무료로 인증서를 받을 수 있음.
     * 자동화: 인증서 등록 과정이 서버 설치나 구성 과정에서 자동으로 이루어지며, 갱신도 백그라운드에서 자동으로 진행됨.
     * 보안: 현대 보안 기술과 모범 사례를 구현하는 플랫폼 역할을 함.
     * 투명성: 인증서 발급 및 취소 기록이 누구에게나 공개됨.
     * 개방성: 자동 발급 및 갱신 프로토콜은 개방 표준이며, 가능한 많은 소프트웨어가 오픈 소스로 제공됨.
     * 협력: 인터넷 프로토콜처럼, Let's Encrypt는 특정 조직의 통제를 넘어 전체 커뮤니티에 이익을 주기 위한 공동 노력임.
     * TLS Everywhere를 실현하기 위해 ISRG를 후원하거나 Let's Encrypt 구축에 참여할 수 있음. ISRG와 파트너에 대한 자세한 정보는 About 페이지에서 확인 가능함.

        Hacker News 의견

     * Let's Encrypt는 인터넷 보안을 강화하고 HTTPS 연결을 쉽게 만들어준 훌륭한 서비스임
          + 과거에는 HTTPS 인증서 비용이 높아 ""진지한"" 프로젝트에만 사용되었음
          + Let's Encrypt의 첫 인증서는 2015년에 발행되었으며, 2015년 12월부터 누구나 사용할 수 있게 되었음
     * 무료 TLS 인증서를 제공하는 Let's Encrypt 덕분에 StartSSL 같은 의심스러운 업체를 이용할 필요가 없어졌음
          + 하지만 TLS 인증서의 신뢰 모델은 여전히 문제가 있음
          + 모든 인증 기관이 사용자의 개입 없이 도메인에 대한 인증서를 발행할 수 있는 구조임
          + CAA 레코드나 인증서 투명성 같은 해결책이 있지만 완벽하지 않음
     * ACME 프로토콜 덕분에 인증서 갱신이 쉬워졌음
          + 과거에는 개인 키를 이메일로 보내는 방식이었음
          + Let's Encrypt에 감사함
     * 어떤 고객은 Let's Encrypt를 신뢰하지 않아 유료 인증서를 선호함
     * 데스크톱 인증서 세계에도 Let's Encrypt 같은 서비스가 필요함
          + Microsoft의 현재 요구사항은 과도하며, 인증서로 많은 수익을 올리고 있음
     * Let's Encrypt는 중요한 인프라로 자리 잡았으며, 개방형 프로토콜을 기반으로 하여 단일 실패 지점이 되지 않음
     * Peter Eckersley는 Let's Encrypt의 창립 작업으로 인터넷 명예의 전당에 헌액되었음
     * 10년 전 SSL과 유사한 문제를 해결할 수 있는 서비스가 필요함
          + 많은 구독 앱이 무료 비구독 앱으로 대체될 수 있음
"
"https://news.hada.io/topic?id=17964","캘리포니아에서 가장 소외된 학생 그룹: 영재 학생들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      캘리포니아에서 가장 소외된 학생 그룹: 영재 학생들

     * 캘리포니아는 학업적으로 뛰어난 학생들을 위한 교육을 요구하거나 자금을 지원하지 않음.
     * 학교들은 다양한 학생들의 특별한 교육적 요구를 충족시키기 위해 노력하고 있지만, 학업적으로 재능 있는 학생들은 주로 간과되고 있음.
     * 많은 학군이 빠르게 학습하는 학생들을 위한 프로그램을 중단했으며, 이는 2021년 Black Lives Matter 운동 이후 더욱 가속화되었음.
     * 재능 있는 프로그램의 원래 목적은 부모의 경쟁으로 인해 잃어버렸으며, 이러한 프로그램은 고성취자를 위한 교실로 변질되었음.
     * 재능 있는 아이들은 특정 영역에서 뛰어나지만 다른 영역에서는 어려움을 겪는 비동시적 발달을 보임.
     * 학교는 이러한 학생들이 수업에 흥미를 잃지 않도록 특별한 주의를 기울여야 함.
     * LAUSD는 여전히 재능 있는 교육을 유지하고 있으며, 다양한 학문적 및 창의적 기술을 위한 프로그램을 제공함.
     * 캘리포니아는 2013년 이후 재능 있는 프로그램에 대한 자금을 중단했으며, 학교들은 이를 유지할 인센티브가 거의 없음.
     * 차별화된 교육은 좋은 아이디어이지만, 큰 학급에서는 실행하기 어려움.
     * 일부 프로그램은 학생들이 자신의 수준에 맞게 작업하고 지루함을 피할 수 있도록 자유를 제공했지만, 이러한 프로그램은 더 이상 존재하지 않음.

        Hacker News 의견

     * 캘리포니아뿐만 아니라 여러 주에서 평등한 결과를 중시하는 정책이 재능 있는 학생들에게 부정적인 영향을 미침. 헤드 스타트와 잘 운영되는 재능 프로그램이 좋은 예시임.
     * 재능 프로그램보다 아이들이 서로 자극을 주고받을 수 있는 환경이 더 중요함. 다양한 서브컬처에서의 경험이 더 큰 도움이 됨.
     * 재능 프로그램이 항상 해결책이 아님. 많은 학생들이 이익을 얻지 못하고, 부모의 사회적 연결이 더 큰 영향을 미침. 좋은 교사를 만나기 위해서는 명예 과정을 들어야 했음.
     * 어떤 학교는 학문적 수준과 사회적 수준을 나누어 수업을 진행했음. 그러나 미시시피 주 대법원은 이를 불법으로 판결했음.
     * IQ가 높은 자녀를 둔 부모로서 캘리포니아는 재능 있는 아이들을 적으로 간주함. 공립학교의 교육 기준이 낮아지고 있음.
     * 현대 사회는 계층 구조를 부정하려는 경향이 있음. 직장에서도 IQ 테스트를 통해 인재를 발굴하는 것이 필요함.
     * 교육 시스템이 산업적이고 권위적인 모델에 맞춰져 있음. 재능 프로그램이 구조적 문제를 해결하지 못함.
     * 재능 있는 학생을 인식하는 것이 차별적일 수 있음. 다양한 인종의 평균 IQ 차이가 존재함.
     * 학교에서 지루함을 느껴 발달 장애 프로그램에 배정될 뻔했으나, 부모의 개입으로 재능 프로그램에 들어감.
     * 경쟁이 치열한 공립 고등학교에서 학생들이 교육보다 더 중요함. 재능 있는 학생들은 자발적으로 학습할 수 있어 자원이 덜 필요함.
"
"https://news.hada.io/topic?id=17965","Golang 사용을 지속하기 위해 우리가 스스로에게 하는 거짓말 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Golang 사용을 지속하기 위해 우리가 스스로에게 하는 거짓말 (2022)

     * 저자는 오리너구리
          + 비판을 무시하기 위해 저자를 무능하다고 치부하는 것은 게으른 방식임.
          + 주니어 개발자는 새로운 시각으로 문제를 바라볼 수 있으며, 이는 고용의 중요한 이유임.
          + 저자는 주니어 개발자가 아니며, 다양한 경험을 통해 언어 설계에 대한 이해를 가지고 있음.
     * 엄마가 담배를 피우니 괜찮을 거야
          + 다른 회사들이 사용하는 기술을 무조건 따라가는 것은 비효율적임.
          + 기술 블로그는 회사의 이미지를 좋게 보이게 하려는 목적이 있음.
          + Tailscale의 블로그는 솔직하지만, Go의 문제를 해결하기 위해 많은 노력이 필요함.
     * 좋은 부분
          + Go는 비동기 런타임과 쓰레기 수집기가 뛰어남.
          + 패키지 관리, 리팩토링, 크로스 컴파일링 등의 도구가 사용하기 쉬움.
          + 그러나 Go의 단점은 무시할 수 없으며, 언어의 설계가 우연히 이루어졌다는 점이 문제임.
     * Go는 섬이다
          + Go는 다른 언어와의 상호 운용성이 부족함.
          + Go의 도구 체인은 독특하며, 기존의 어셈블리 언어나 디버거를 사용할 수 없음.
          + 네트워크 경계를 통해 Go와 통합하는 것이 가장 쉬운 방법임.
     * 전부 아니면 아무것도 (그래서 아무것도 안 함)
          + Go는 초기화되지 않은 구조체 필드를 남길 수 있음.
          + 제로 값이 의미를 가지는 것은 순진한 생각이며, 많은 경우에 문제가 됨.
          + Go의 문화는 문제를 해결하기보다는 주의하라는 식임.
     * ""Rust는 완벽하고 너희는 모두 바보야""
          + Rust는 점진적으로 도입할 수 있으며, 다른 언어와 잘 통합됨.
          + Rust의 성공은 부분적으로 안전한 언어로의 전환이 가능하다는 점에 있음.
          + Rust의 문제점도 존재하지만, 이는 점진적으로 해결되고 있음.
     * Go를 프로토타입/스타터 언어로 사용
          + Go는 배우기 쉬운 언어로 여겨지지만, 실제로는 많은 경험이 필요함.
          + 코드가 잘못되었음을 명확히 알 수 있는 기능이 부족함.
          + Go의 단점은 시간이 지남에 따라 드러나며, 쉽게 이동할 수 없는 언어임.
     * 우리가 Golang을 계속 사용하는 이유에 대한 거짓말
          + 다른 사람들이 사용하니 우리에게도 좋을 것이라는 생각
          + 언어 설계의 결함을 개별적으로 또는 집합적으로 괜찮다고 여기는 것
          + 주의 깊게 하면 문제를 극복할 수 있다는 생각
          + 작성하기 쉬우니 생산 소프트웨어 개발도 쉽다는 생각
          + 언어가 단순하니 모든 것이 단순하다는 생각
          + 나중에 언제든지 다시 작성할 수 있다는 생각

   아주 찰나와 같은 시간동안 집중적으로 Go언어와 함께하고 있는 아마추어가 글을 남겨도 될까 싶습니다만... Go언어는 장점과 단점이 정말 명확해서 선택하시는 분들도, 피하시는 분들도 분명한 이유가 있어 보입니다. 개인적으로 Rust 언어와 비교할 건 아닌 거 같고 Kotlin(Java)과 비교하는 게 맞는 거 같습니다.

   Go의 고루틴은 정말 훌륭하지만, 마법은 아닙니다. 특히 백엔드에서 MySQL을 하나만 쓰는 작은 프로젝트에서는 이 동시성이라는 게 관리하기 정말 까다롭습니다. JS/TS런타임에서는 크게 신경 안써도 되는 MySQL 자원 고갈 현상이나 풀 관리가 생각보다 어렵거든요. 결국 이 상황에서는 DB가 병목이 되므로 Go언어의 동시성에 대한 장점이 일부 퇴색됩니다. (JS/TS 런타임의 비동기 I/O나 이벤트 루프가 오히려 더 적절할 수도 있음) 당장 hey 같은 도구로 -c 100 이렇게 때려넣어보면 알 수 있습니다.

   그리고 훌륭한 GC가 있지만, 그렇다고 함부로 객체를 포인터만 넘겨서 쓰다가 뒤처리는 나몰라라 해선 안됩니다. 모든 게 트레이트오프가 있지만, Go언어도 가능하면 작은 객체들은 그냥 값 복사로 넘겨서 사용하고 함수가 끝나면 바로 처리되도록 하는게 낫습니다. 제가 낡은 사고에 같혀 있는 걸지도 모르겠지만, C/C++ 언어처럼 효율의 관점으로 포인터를 쉽게 접근하면 안되었습니다.

   error 를 함수 리턴할 때 거의 매번 리턴하고 그걸 매번 if err != nil {} 로 검사해야 하는 건 정말 귀찮지만, 이건 장점입니다. try catch 보다 비용이 저렴하니까요. 그리고 finally {} 와 같은 역할을 해주는 defer 키워드도 훌륭합니다. 자원 해제 시점을 고민할 필요가 없으니 좋습니다. 표준 라이브러리만으로 훌륭한 백엔드 서버 구성이 바로 가능한 점도 좋구요 (1.23 이상) 무엇보다 타켓 OS에 맞춰 빌드하면 다른 런타임이나 사전 설치가 필요하지 읺다는 점이 가장 좋습니다.

   Go언어를 길게 쓰진 않았는데 너무 개인적인 의견으로 길게 쓰는 것 같아 이만 줄입니다. ㅎㅎ 저는 Go언어도 좋고 다른 언어도 좋습니다!

        Hacker News 의견

     * Go 언어의 단점에 대한 많은 지적이 있지만, 명시적 오류 처리는 그 중 하나가 아님. 예외 처리는 너무 쉽게 실수할 수 있는 ""마법"" 같은 층을 추가함. 개인 프로젝트에서는 Rust를 선호하지만, 다양한 수준의 개발자가 참여하는 대규모 프로젝트에서는 Go의 철학이 현대 세계에서 가장 합리적인 오류 처리 접근법임.
          + Go는 단순함 덕분에 다른 ""새로운"" 언어보다 더 많이 채택되고 있음. 최고의 언어는 아니지만, 많은 내장된 의견으로 인해 일반 목적 언어로는 종종 최고의 선택임.
     * Rust와 Go는 매우 다르며, 사람들이 원하는 중간 지점은 현재 존재하지 않음.
          + Rust의 타입 시스템과 유사한 타입 시스템을 가진 상대적으로 간단한 언어가 필요함.
          + Gleam과 Kotlin이 약간 비슷하지만 완전히 그렇지는 않음. Rust는 너무 복잡해서 비전공자나 비전문가에게는 어려움.
          + 완벽한 언어는 없지만, Go와 Rust는 놀라운 점을 가져왔음. 두 언어에서 영감을 받아 널리 사용 가능한 간단한 프로그래밍 언어가 만들어지길 바람.
     * 단순한 언어를 좋아함. 기술은 항상 트레이드오프가 있기 때문에 균형 잡힌 비판이 중요함.
          + Go를 선택한 이유에 대한 블로그 링크를 공유함.
     * 언어를 비판하는 것이 왜 그렇게 중요한지 궁금함. 비판은 건설적인 스타일로 작성되지 않음.
          + 모든 언어는 비판받을 수 있음. Go는 ""더 정교한"" 언어와의 차이에도 불구하고 프로젝트에서 훌륭하게 작동함.
          + Go 팀에 피드백을 주고 언어의 느린 발전을 지켜보며 커뮤니티에서 서비스를 계속 제공함.
     * Go의 비판을 읽을 때마다 여전히 Go를 계속 사용할 것임.
          + 이론적으로 많은 문제가 있지만, 실제로는 여전히 좋은 프로그래밍 언어임.
          + 명시적 오류 처리를 좋아함. 다른 언어의 단점도 크게 신경 쓰지 않음.
          + Go의 단점에 민감한 사람들은 계속 불평할 것임. 자신에게 잘 맞는 언어를 선택함.
     * 다른 언어를 사용할 때마다 Go로 돌아가고 싶음.
          + Go는 설치하고 코드 다운로드 후 작성하면 끝임. 버전, 런타임, 설정, 빌드 도구, 패키지 관리자 등을 고민할 필요가 없음.
          + Rust도 비슷한 경험을 제공할 수 있음. Python, Typescript, Java를 사용할 때는 설정과 관련된 문제로 인해 프로그래밍이 두려움.
     * 더 나은 Python을 찾고 있었음. Go는 명백한 선택이었지만, 문법을 싫어함.
          + Rust는 많은 특수 문자를 사용하고, Lisp는 괄호와 역폴란드 표기법 때문에 싫어함.
          + Python 코드를 Nuitka로 컴파일하여 바이너리를 제공함. C#의 AOT 컴파일에 관심이 있음.
          + Nim과 Crystal을 좋아하지만 작은 커뮤니티가 장벽임. Nim은 작은 커뮤니티에도 불구하고 훌륭한 언어임.
     * Go와 Rust가 자주 비교되는 이유를 모르겠음. Java와 비교하는 것이 더 적절함.
"
"https://news.hada.io/topic?id=17987","HN 공개: 휴대폰 잠금 해제 시마다 '왜?'라고 묻는 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN 공개: 휴대폰 잠금 해제 시마다 '왜?'라고 묻는 앱

     * Intenty 앱 소개
          + Intenty는 사용자가 스마트폰과의 관계를 건강하게 유지할 수 있도록 돕는 앱임.
          + 잠금 해제 시점에 부드러운 인식 프롬프트를 제공하여 사용자가 스마트폰 사용을 더 의식적으로 할 수 있도록 도움.
          + 앱 차단이나 제한 없이 사용자가 스스로 선택할 수 있도록 유도함.
     * 주요 기능
          + 생각을 자극하는 프롬프트
               o 기본 제공 프롬프트를 선택하거나 사용자 맞춤형 프롬프트 생성 가능.
               o 각 스마트폰 사용 세션에 명확한 목적 설정.
               o 현재 순간으로 돌아오도록 유도.
               o 신체적 웰빙을 기억하도록 도움.
               o 중요한 것에 집중하도록 유도.
          + 스마트 맞춤화
               o 개인 맞춤형 프롬프트 생성 가능.
               o 프롬프트 빈도 조절 가능.
               o 프롬프트 피로를 방지하기 위한 쿨다운 기간 설정 가능.
               o 개인 통찰을 위한 데이터 내보내기 기능 제공.
          + 미니멀리스트 디자인
               o 깔끔하고 방해 없는 인터페이스.
               o 최대 효과를 위한 전체 화면 프롬프트.
               o 세심하게 설계된 사용자 경험.
          + 프라이버시 우선
               o 100% 로컬에서 작동.
               o 광고나 추적 없음.
               o 메트릭스나 분석 수집 없음.
               o 사용자의 데이터는 사용자의 통제 하에 있음.
     * 효과적인 이유
          + 앱 차단이나 임의의 제한을 설정하는 대신, 자연스럽게 인식을 높여줌.
          + 잠금 해제 시점마다 자신을 체크할 기회를 제공하여 하루 종일 스마트폰 사용에 대해 의식적인 결정을 내릴 수 있도록 도움.
          + 스마트폰을 덜 확인하고 더 의식적으로 사용하고자 하는 사람들에게 적합함.
     * 대상 사용자
          + 무의식적인 스마트폰 확인을 줄이고 싶은 사람.
          + 현재에 집중하고 싶은 사람.
          + 더 나은 디지털 습관을 형성하고 싶은 사람.
          + 제한적인 차단 없이 생산성을 유지하고 싶은 사람.
     * Intenty 권한 사용에 대한 주의사항
          + Intenty는 다른 앱 위에 표시, 배터리 최적화 비활성화, 접근성 서비스와 같은 Android 기능을 사용할 수 있음.
          + 모든 권한은 기기에서 로컬로 기능을 작동시키기 위해 사용됨.
          + 접근성 서비스는 사용자가 빠르게 화면을 끌 수 있도록 하는 잠금 버튼을 위해 사용되며, 기본적으로 비활성화되어 있고 데이터를 수집하거나 공유하지 않음.
     * 업데이트 정보
          + 구독 상태와 관련된 중요한 문제 수정.
          + 프롬프트 생성 시 발생하는 앱 충돌 및 중복 답변 문제 수정.

        Hacker News 의견

     * 나무로 만든 휴대폰 모형을 주머니에 넣고 실제 휴대폰처럼 사용했을 때, 무의식적으로 꺼내는 행동이 얼마나 자주 일어나는지 깨달음
     * 아침에 설치한 앱을 테스트해본 결과, 휴대폰을 산만함에서 벗어나게 하는 데는 좋지만, 다른 경우에는 불편함을 느낌
          + 예를 들어, 노래를 바꾸거나 사진을 빠르게 찍을 때 방해가 됨
          + 앱은 좋지만, 휴대폰 사용을 ""산만함"", ""작업"", 그리고 ""빠르고 간헐적인 사용""이라는 세 가지로 나누어 생각하게 됨
     * 앱이 ""매 N번 잠금 해제"" 옵션을 제공하는 것을 보고, ""세 번째 클래스"" 문제 해결에 도움이 될지 시도해볼 계획
     * 이러한 앱이 필요하다고 생각하며, Leechblock Firefox 확장 프로그램의 기능을 참고할 것을 제안함
          + 사용자가 휴대폰을 사용하는 것을 어렵게 만들지만 불가능하게 하지는 않음
          + Leechblock은 긴 암호를 입력하거나 복사할 수 없는 64자 랜덤 문자열을 입력하게 하여 사용을 방해함
     * Microsoft 계정 로그인을 위해 복잡한 인증 절차가 필요하다는 점을 언급함
     * 10년 전 형제와 함께 만든 앱을 떠올리며, 화면 잠금을 해제할 때 만트라를 강화하거나 휴대폰을 열지 말아야 한다는 것을 인식하게 하는 아이디어를 공유함
     * Android 런처에 도구 앱과 산만함을 유도하는 앱을 구분하여 접근할 수 있는 섹션을 추가하는 아이디어를 상상함
     * 앱의 디자인과 아이디어를 칭찬하며, 여러 의도를 선택할 수 있는 기능과 더 비싼 평생 구독 옵션을 추가할 것을 제안함
     * 앱이 ""커뮤니케이션"" 의도를 선택했을 때는 통신 앱만 사용하게 하고, ""지루함""을 선택했을 때는 실제 활동을 즐기도록 유도하는 기능을 추가하면 더 재미있을 것이라고 제안함
     * 친구가 휴대폰 배경화면에 ""지금 휴대폰을 들어야 할까?""라는 문구를 넣어두었다고 언급함
     * 데스크톱 브라우저에서 비슷한 기능을 찾는 사람들에게 Intention을 시도해볼 것을 추천함
"
"https://news.hada.io/topic?id=17925","펜티엄 프로세서의 안테나 다이오드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           펜티엄 프로세서의 안테나 다이오드

Pentium 프로세서의 안테나 다이오드

     * Pentium 프로세서의 실리콘 다이를 연구하면서 신호선이 실리콘 기판에 연결된 구조를 발견함. 이는 제조 과정에서 회로를 보호하는 ""안테나 다이오드""임.
     * Intel은 1993년에 Pentium 프로세서를 출시했으며, 이는 고성능 프로세서 라인의 시작이었음. 이 블로그에서는 원래 Pentium을 연구하고 있음.
     * 현대 프로세서는 CMOS 회로로 구성되며, NMOS와 PMOS 트랜지스터를 사용함. NMOS 트랜지스터는 게이트, 소스, 드레인으로 구성됨.
     * Pentium 프로세서는 여러 금속층으로 구성되며, 각 층은 서로 다른 기능을 수행함. 금속층은 실리콘과 폴리실리콘을 연결하여 논리 게이트를 구성함.
     * 제조 과정에서 플라즈마 식각이 사용되며, 이는 금속을 제거하는 데 효과적이지만 ""안테나 효과""로 인해 산화막 손상을 초래할 수 있음.
     * 안테나 효과는 긴 금속선이 플라즈마로부터 전하를 수집하여 큰 전압을 발생시키는 문제임. 이는 트랜지스터의 게이트 산화막을 손상시킬 수 있음.
     * 안테나 문제를 방지하기 위해 긴 선을 짧은 세그먼트로 나누거나, 상위 금속층으로 이동하거나, 안테나 다이오드를 추가하여 전하를 소산시킬 수 있음.
     * Pentium에서 안테나 다이오드는 필요한 경우에만 사용되며, 대부분의 안테나 문제는 라우팅을 통해 해결됨.
     * 현대 집적 회로에서도 안테나 효과는 여전히 문제이며, 제조 공정에서 안테나 규칙을 준수해야 함. 이를 위반하면 칩이 손상될 수 있음.

        Hacker News 의견

     * Ken이 /r/chipdesign subreddit에 글을 올린 후, 그가 해당 스레드를 언급하고 링크를 제공한 것이 좋음
          + Cadence와 Synopsys 소프트웨어를 사용하여 수십억 개의 표준 셀로 구성된 블록의 칩 레이아웃을 설계하는 물리적 설계 엔지니어임
          + 설계 흐름은 자동으로 모든 블록 입력 핀에 안테나 다이오드를 추가함
          + 도구들이 내부 네트를 레이어 점프로 분할하여 안테나를 피하는 데 충분히 좋음
          + 일부 전하는 CMP 공정에서 발생함
          + 현대 칩은 약 20개의 금속 레이어를 가지며, 그 사이에 많은 비아 레이어와 실제 트랜지스터가 있는 기본 레이어가 있음
          + 다음 레이어를 만들기 전에 웨이퍼가 평평해야 함
     * 저자: 이 주제가 매우 생소할 수 있지만, 일부에게는 흥미로울 수 있기를 바람
          + 칩 제조에서 ""안테나""에 대한 재미있는 사실: 실제 안테나와는 관련이 없음
          + 제조 중 긴 와이어에 전하가 축적될 수 있으며, 이는 노출된 와이어와 상호작용하는 화학물질 때문임
          + 이 전하는 나머지 회로를 보호하기 위해 어디론가 이동해야 함
          + RF와 관련이 없음
          + 28 nm 이하의 최신 기술은 ""안테나"" 효과 방지를 위한 광범위한 설계 규칙을 가짐
     * IC 아키텍처에 대한 논의가 흥미롭지만, 회로 사진을 제공하는 이 페이지와 다른 페이지를 칭찬하고 싶음
          + 사진들은 계몽적일 뿐만 아니라, 매우 훌륭하고 진정되는 색상 팔레트를 가짐
     * 31년 된 기술을 연구하고 그 복잡성에 놀라는 것이 흥미로움
     * 안테나 다이오드가 제조 중 손상을 줄이기 위한 것인지, 아니면 전자기적 소음 환경에서 런타임에도 영향을 미치는지 궁금함
     * 지역 재활용 센터에서 Pentium-75를 구입한 후 이 기사가 첫 페이지에 올라온 것이 매우 멋짐
          + SX969 칩을 손에 들고 Ken의 다이샷을 볼 수 있음
          + 이 Pentium의 세라믹 패키지는 매우 독특하며, CPU를 책상에 놓을 때 유리 조각을 놓는 것 같은 소리가 남
     * SOI 기술에서 안테나 다이오드의 필요성을 살펴보길 권장함
          + 기판이 더 이상 안전한 피난처가 아니므로, 제조 중 큰 차동 전압에 노출될 수 있는 산화물이 많아짐
"
"https://news.hada.io/topic?id=17930","게임에서 웹으로 확장된 Frosted Glass 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     게임에서 웹으로 확장된 Frosted Glass 기술

게임에서 웹으로의 프로스트 글래스

     * 소개
          + Forza Horizon 3와 Forza Motorsport 7의 UI 개발자로 일하면서 아름다운 프로스트 아크릴 디자인 요소를 경험했음.
          + HTML을 사용하여 유사한 효과를 구현하고자 했으며, 이 페이지에서 그 시도를 공유함.
     * backdrop-filter의 역할
          + 프로스트 글래스 효과의 핵심은 Gaussian 블러를 사용하여 배경을 흐리게 하는 것임.
          + CSS에서 backdrop-filter와 blur 함수를 사용하여 Gaussian 블러를 적용할 수 있음.
          + Internet Explorer는 이 기능을 지원하지 않음.
     * 깊이 추가하기
          + backdrop-filter: blur(10px)를 사용하여 기본적인 글래스를 만들었으나, 더 깊이 있는 효과를 위해 box-shadow: inset을 사용하여 가장자리에 깊이를 추가함.
     * 실제 그림자
          + 3D 객체가 2D 공간에 갇힌 것 같은 느낌을 없애기 위해 어두운 box-shadow를 추가하여 글래스를 배경에서 물리적으로 띄워 보이게 함.
     * 빛과의 상호작용
          + 글래스와 빛의 상호작용을 개선하기 위해 간단한 서브서피스 스캐터링을 도입함.
          + box-shadow: inset을 사용하여 빛이 글래스 가장자리에서 약간 퍼지는 효과를 시뮬레이션함.
     * 더 흥미로운 빛
          + 글래스의 반사 특성을 강조하기 위해 빛의 광선을 배경 이미지로 사용함.
          + ::before를 사용하여 배경 이미지를 글래스 요소에 적용함.
     * 동적 빛
          + CSS와 JavaScript를 사용하여 모든 플랫폼에서 동적 반사 효과를 구현함.
          + JavaScript를 사용하여 background-position을 동적으로 조정하여 background-attachment: fixed 효과를 시뮬레이션함.
     * 마무리
          + 글래스 효과를 완성하기 위해 둥근 모서리와 색상 및 텍스트를 추가함.
          + border-radius를 사용하여 모서리를 둥글게 하고, overflow: hidden을 사용하여 자식 요소가 글래스 표면을 넘지 않도록 함.
     * 결론
          + 프로스트 글래스 효과를 만드는 과정을 따라와 주셔서 감사드림.
          + 모든 자산과 코드를 빠르게 복사할 수 있는 방법은 문서 초반의 ""Final Recipe Lookahead"" 섹션을 참고.

        Hacker News 의견

     * 한 사용자는 미적 요소가 마음에 들지만, 클라이언트가 반복적으로 비싼 블러 필터를 계산하는 것이 낭비라고 느끼며, 웹 개발의 일반적인 경향이 너무 많은 부하를 주는 것 같다고 언급함
          + GPU를 사용하여 최적화되었지만, 실제로는 큰 차이가 없을 것이라고 생각함
     * 다른 사용자는 Windows 7의 ""빛의 광선"" 텍스처를 추출하여 Android에서 유사한 효과를 구현하려고 했으며, 블러 배경의 채도를 약간 높였다고 설명함
     * 또 다른 사용자는 인터랙티브 데모가 훌륭하다고 생각하지만, 사용자 인터페이스 디자인에서 프로스트 글라스 사용을 싫어하며, Mac OS에 추가된 것이 후퇴라고 느낀다고 언급함
          + 특히 패널 뒤의 콘텐츠가 동적이거나 사용자 생성일 때 이상적이지 않다고 생각함
     * 한 사용자는 2008년에 CSS 실험을 통해 고정 위치의 미리 블러 처리된 배경 이미지를 사용하여 유사한 효과를 구현했다고 설명함
          + 이는 실시간 가우시안 블러보다 성능이 뛰어나지만, 동적 배경 이미지를 허용하지 않는 단점이 있다고 언급함
     * 또 다른 사용자는 10개의 효과가 겹쳐져 있는데, 가장 요구되는 미적 요소를 제외하고는 7개 정도가 너무 많다고 생각함
          + 배경색, 블러, 박스 그림자 또는 테두리만 사용하는 것이 좋다고 제안함
     * 한 사용자는 노이즈 텍스처를 추가하여 더 거친 결과를 얻는 것을 좋아한다고 설명함
     * 다른 사용자는 기술적 성취는 멋지지만, UX가 나쁘다고 언급함
          + 반투명 패널 내부의 내용을 읽거나 이해하기가 더 어렵고, 배경과의 대조가 낮고 일관성이 없기 때문이라고 설명함
     * 한 사용자는 원래 CSS 데모 중 하나가 프로스트 글라스 효과를 위한 것이었다고 언급하며, 흥미롭다고 생각함
     * 또 다른 사용자는 CSS의 창의적이고 강력한 면모를 보는 것이 항상 인상적이라고 생각하지만, HTML/CSS의 일부 이해 수준을 결코 이해하지 못할 것 같다고 느낀다고 설명함
     * 마지막으로, 인터랙티브 예제가 좋지만, 이전 버전으로 전환할 수 있는 비교 또는 토글 기능이 있었다면 더 좋았을 것이라고 언급함
          + 대부분의 경우 각 반복의 개선이 미묘해서 차이를 알 수 없었다고 설명함
"
"https://news.hada.io/topic?id=17986","AI와 미래의 일자리 - 미국 국립과학원(NAS)의 153P 보고서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AI와 미래의 일자리 - 미국 국립과학원(NAS)의 153P 보고서

     * 최근 인공지능(AI)의 발전으로 정책 결정자와 대중이 AI가 일자리와 노동자에게 미치는 영향에 주목하고 있음
          + ChatGPT와 같은 생성형 AI 시스템이 급격히 발전 및 채택되며 경제와 노동시장에 중요한 변화를 초래할 가능성 존재
          + AI 기술 발전이 생산성, 일자리 안정성, 소득 불평등에 미치는 영향을 분석하고, 이에 적응하기 위한 연구 및 데이터 필요성 강조

주요 시사점

     * AI 기술 발전과 그에 따른 경제 및 사회적 영향의 구체적인 양상을 정확히 예측하는 것은 불가능
     * AI 기술의 채택, 전문성 수요, 노동시장 영향에 대한 정보를 수집하고 확산하는 것이 중요
          + 이를 위해 다음과 같은 역량 구축 필요:
               o 변화 추적을 위한 신속한 데이터 수집 및 분석
               o 관찰된 변화에 유연하게 대응할 수 있는 접근법
     * 노동자에게 가장 중요한 점은 AI가 전문성에 대한 수요를 어떻게 재구성하고 다양한 직업의 본질을 어떻게 변화시킬 것인가 하는 점
          + AI에 의해 증강될 전문성과 새롭게 요구될 전문성을 예측하기는 어려움
     * 지속적인 교육에 대한 접근은 노동시장이 변화에 적응할 수 있는 핵심 요소
          + AI는 새로운 온라인 학습 환경을 제공하는 데 기여할 가능성 존재

AI 발전에 대한 대응

     * AI는 인간 노동을 강화하고, 전문성을 보완하며, 새로운 가치 있는 작업 형태를 창출할 가능성을 가진 도구
          + 그러나 이러한 결과는 자동적으로 이루어지지 않음
          + 정책 결정자, 기업 리더, AI 연구자, 고용주, 노동자 모두가 AI 시스템을 사회의 공유된 가치와 목표에 맞게 설계할 기회를 가짐
     * AI를 유익하게 활용하려면 집단적 역량을 강화하고, 인간의 복지를 증진하며, 미래 과제에 대응할 준비가 된 노동력을 지원해야 함
     * 이를 위해 AI의 발전 및 노동시장에 미치는 영향을 실시간으로 관찰하고 추적하며 , 이 정보를 널리 공유하는 것이 중요
          + AI 변화, 채택 과정, 다양한 전문성 수요의 변화를 수집하고 투명하게 배포해야 함
          + 이를 통해 노동자와 정책 결정자들이 AI 발전에 유연하게 대응할 수 있도록 준비 가능

AI와 노동시장

     * AI 기술 발전은 경제 내 많은 인지 작업에 폭넓게 적용될 수 있으며, 상호 보완적 혁신을 촉진하여 생산성과 노동시장 역학에 큰 영향을 미칠 가능성 존재
     * AI 기술 발전
          + 신경망 혁신과 더 큰 비주석 데이터 세트의 활용이 AI 기술 진보를 가속화
               o 생성형 AI는 여러 언어로 대화하거나, 긴 문서를 요약하고, 컴퓨터 프로그램을 작성할 수 있는 기능을 보유
          + 자율주행차와 같은 로봇 공학 및 대규모 데이터 세트 활용의 꾸준한 발전
          + 그러나 AI의 미래 발전 방향은 불확실하며, 현재 AI 시스템은 여전히 오류와 편향, 비합리적 추론 등 여러 한계를 가짐
     * AI와 생산성
          + 생성형 AI는 고객 센터, 소프트웨어 개발, 글쓰기 등 특정 분야에서 생산성을 이미 증가시킴
               o 과학적 발견과 혁신을 가속화해 생산성 향상 가능성을 더욱 높일 수 있음
          + 하지만 이러한 혜택이 균등하게 분배될 보장은 없음
               o 정책 및 제도 변화 없이는 일자리 손실, 임금 격차, 불평등 증가, 직업의 질 저하 등의 부작용 초래 가능
          + 프라이버시 위협, 차별 및 편향 가능성, 민주주의 및 국가 안보에 대한 위협 등 AI 관련 사회적 위험 고려 필요
     * 노동시장에 미치는 영향
          + AI는 기존 전문성의 가치를 훼손하거나 새로운 전문성을 요구하는 기회를 창출 가능
               o AI가 ""대중 전문성"" 작업(예: 소매 재고 관리) 자동화를 가속화하고, ""고급 전문성"" 작업(예: 복잡한 시스템 관리)을 부분적으로 자동화할 가능성 존재
               o AI는 관련 정보를 제공하거나 디지털 안전장치를 제공하여 인간의 전문성을 보완할 수도 있음
                    # 예: 의료 분야에서 AI가 특정 치료 정보 제공 및 장비 사용법 안내를 통해 의료진의 역할 보완
     * 교육과 훈련에 미치는 영향
          + AI는 교육을 개인화하고, 몰입도를 높이며, 비용 효율성을 개선해 학습 성과를 변화시킬 잠재력 보유
               o 온라인 학습 기회에 대한 접근성 증가와 AI 강화 교육에 안전장치를 통합하는 데 공공 및 민간 투자가 필요
               o AI 도구를 활용할 수 있도록 교사 훈련 및 AI 기반 교육 효과 테스트 필요
          + AI로 인한 기술 수요 변화에 적응하기 위해 지속적인 교육 및 재훈련 프로그램 접근이 필수

핵심 기회

     * AI가 노동시장에 미치는 영향은 사회 내 다양한 기관(기업, 비영리 단체, 노동자 단체, 대학, 정부 등)의 선택과 AI 개발 및 활용 방식을 어떻게 이끌어 가느냐에 따라 달라질 것임.
     * AI의 노동시장 영향 측정
          + 정부와 관련 기관은 데이터 수집 노력을 확대하여 실시간으로 AI가 노동자와 기업에 미치는 영향을 추적해야 함
               o 공공-민간 데이터 파트너십을 통해 기술 수요, 임금, 지속 교육 기회와 관련된 데이터를 공유
               o AI 채택이 경제 부문 및 지역별 소외 계층에 미치는 영향을 측정
               o 공공-민간 데이터 공유 및 분석을 지원할 독립적 비영리 기관 설립 고려
     * AI 기술 발전 지원
          + AI 기술 발전을 방향성 있게 이끌고 견고함과 발전 속도를 최적화하기 위한 다양한 기회 존재
               o AI 기초 연구 및 윤리적 표준 마련
               o 고급 AI 모델 훈련에 사용되는 데이터의 투명성과 공유를 장려하기 위한 규제와 인센티브 개발
               o 교육, 의료, 국가 안보 등 고우선 AI 응용 분야 연구 지원
               o 국가 AI 연구 자원 및 Microelectronics Commons 같은 허브 구축을 통해 AI 인재 육성
     * AI 생산성 이익 공유
          + AI의 생산성 증가 혜택이 불균등하게 분배되지 않도록 정책 및 제도적 변화 필요
               o 직업 간, 기업 간, 지역 간 노동 이동성을 지원하는 정책 평가
               o 제품 책임, 저작권, 프라이버시, 편향 등 규제 불확실성을 해결하여 정책 결정자의 판단 능력 강화
               o AI 남용 또는 의도치 않은 피해를 방지할 안전장치 개발
               o 시장 집중의 영향을 연구하여 경쟁력 있는 시장 유지와 규모의 경제 혜택 간 균형 모색
               o 과학적 발견을 가속화하는 AI 연구 지원
     * 노동시장 영향 균형
          + AI의 유익한 활용은 인간 전문성을 대체하지 않고 확장하는 의도적 설계로부터 시작
               o 인간-AI 협력 팀이 더 높은 품질의 결과를 생산하는 AI 시스템 연구
               o 포괄적 AI 채택 및 노동자 목소리를 강화하는 관행 연구
               o 개인 속성 및 창작물 사용에 대한 통제권과 보상 방안 연구
               o 정부 내 AI 전문성을 강화해 효과적인 투자, 감독, 규제 지원
               o 공공 교육 및 의료 분야에 적용할 AI 기술의 품질 평가 및 인증 시스템 구축
     * 지속 교육의 중요성 이해
          + AI는 많은 직업의 본질을 변화시키며, 변화하는 노동시장 환경에 적응하기 위한 지속 교육 프로그램 필요
               o 높은 수요를 보이는 기술을 가르치는 지속 교육 접근법 연구
               o AI, 증강현실 등 기술을 활용해 교육 품질 향상
               o 커뮤니티 칼리지 등 교육 기관이 고수요 직업에 맞는 졸업생을 배출할 수 있도록 표준 및 인증 연구
               o 기술 수요 변화와 지속 교육 기회를 안내하는 ""커리어 로드맵"" 개발 및 배포
               o 미래 AI 기술을 최대한 활용할 수 있도록 교육 목표 재설정
"
"https://news.hada.io/topic?id=17970","Fly.io 장애 해결 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Fly.io 장애 해결 완료

     * 이 사이트는 글로벌 사건 업데이트를 제공하는 페이지임. 일상적인 하드웨어 고장이나 제한적인 인프라 사건은 포함되지 않음.
     * 개인화된 앱에 영향을 미칠 수 있는 모든 사건을 보려면 Fly Organization의 대시보드에서 개인화된 상태 페이지를 확인할 수 있음.

과거 사건

  2024년 11월 27일

     * 사건 보고 없음

  2024년 11월 26일

     * API 지연 및 타임아웃 오류: 해결됨. Machines API와 GraphQL API의 성능이 정상으로 돌아옴.
     * 연결성 저하: CPU 할당량의 전체 롤아웃으로 인해 일부 고객의 머신이 제한됨. 네트워킹 문제를 일으켰으며, 이를 해결하기 위해 변경사항을 일시적으로 롤백함.
     * API 성능 저하: 해결됨. 시스템을 확장하고 API에 대한 수정사항을 적용하여 정상 운영 중임.

  2024년 11월 25일

     * API 성능 저하: 문제를 식별하고 수정 중임. Machines API와 프록시 성능이 저하됨.
     * Corrosion 클러스터 복구: 복구 및 재시드 프로세스를 실행 중이며, 일부 호스트에서 여전히 작업 중임.

  2024년 11월 24일

     * 사건 보고 없음

  2024년 11월 23일

     * 사건 보고 없음

  2024년 11월 22일

     * 로그 검색 불가: 해결됨. Fly Metrics 로그 검색 패널과 과거 앱 로그에 영향을 미침.

  2024년 11월 21일

     * 응급 네트워크 유지보수: 완료됨. 네트워크 공급자가 스위치 교체를 수행함.

  2024년 11월 20일

     * 사건 보고 없음

  2024년 11월 19일

     * 로그 검색 불가: 해결됨. Fly Metrics 로그 검색 패널과 과거 앱 로그에 영향을 미침.

  2024년 11월 18일

     * 사건 보고 없음

  2024년 11월 17일

     * 사건 보고 없음

  2024년 11월 16일

     * 사건 보고 없음

  2024년 11월 15일

     * 사건 보고 없음

  2024년 11월 14일

     * IAD에서의 IPv6 연결성 저하: 해결됨. 상위 공급자와 협력하여 문제를 해결함.

        Hacker News 의견

     * 한 사용자는 fly.io에서 호스팅한 웹사이트가 5분 동안 다운되었지만, 이후로는 안정적으로 운영되고 있다고 언급함. 무료 모니터링 서비스를 사용하여 5분마다 체크하고 있음.
     * fly.io는 포스트모템을 공개하며, 2016년에는 Consul이라는 중앙 집중형 TLS 서버를 사용했으나 2020년에 Corrosion으로 대체함. 2024년 10월에 Consul의 루트 키 서명 키가 만료되어 연결이 끊겼고, 새로운 SSL 인증서를 배포하여 복구했음.
     * fly.io의 인프라 문제로 인해 다른 서비스의 TLS 키도 만료되었음을 발견했으며, 로그 도구가 네트워크 제공자를 DDOS 공격함. 여러 문제를 해결하기 위해 많은 노력이 필요했음.
     * fly.io의 안정성에 의문을 제기하며, 클라우드 플랫폼이 신뢰성을 제공하지 않는다면 가상 서버를 임대하는 것이 더 나을 수 있다고 언급함.
     * Fly.io API가 여전히 접근 불가능하며, 사용자는 배포나 데이터베이스에 접근할 수 없다고 함. 정확한 업데이트는 커뮤니티 페이지를 통해 확인할 수 있음.
     * 개인적으로 Fly.io와 Railway.com을 비교했을 때 Railway가 더 나았으며, 지원도 뛰어났다고 언급함. Fly.io는 데이터 삭제 문의에 응답하지 않았음.
     * Fly.io의 주요 장애를 여러 번 경험했으며, 서비스의 안정성이 최우선이 되어야 한다고 강조함.
     * Turso도 Fly.io의 장애와 관련된 문제를 겪고 있으며, CEO가 Discord에서 이를 확인함.
     * Fly.io의 낮은 가격에 대해 의문을 가졌으며, 기술 문서에서 인스턴스가 하나의 물리적 서버에 고정되어 있어 서버가 다운되면 백업에서 복원해야 한다고 설명함.
     * 주요 휴일 주간에 장애가 발생하는 경향이 있으며, MS 365/Teams/Exchange도 영향을 받았다고 언급함. 주요 휴일에는 변경을 중단하는 것이 좋다고 제안함.
     * 2023년 초의 일련의 장애도 Corrosion과 관련된 문제를 겪었음을 언급함.
"
"https://news.hada.io/topic?id=17903","HN 공개: Netlify를 위해 제작한 Marble Madness 영감을 받은 WebGL 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HN 공개: Netlify를 위해 제작한 Marble Madness 영감을 받은 WebGL 게임

     * Netlify가 500만 명의 개발자에 도달한 소식 공유
     * 이 과정에서 많은 재미있는 순간과 중요한 순간들이 있었음
     * 이 여정을 통해 어떻게 여기까지 왔는지, 그리고 여러분이 이 이야기에서 어떤 역할을 했는지 확인 가능

        Hacker News 의견

     * 게임에서 흰 점을 피하는 것이 가장 큰 도전이었음
          + 이 게임은 광고를 위한 간단한 게임치고는 훨씬 뛰어남
          + 완벽한 컨트롤과 훌륭한 레벨 디자인이 돋보임
          + 다양한 경로와 광고를 대부분 건너뛸 수 있는 점이 좋았음
          + 광고를 제거하고 퍼즐이 있는 복잡한 레벨을 추가하면 완벽한 작은 게임이 될 것 같음
     * 프로젝트에 참여한 개발자 중 한 명임
          + 질문이 있으면 언제든지 답변 가능함
          + 프로젝트에 대한 추가 정보는 여기에서 확인 가능함
     * 온라인 게임에서 WARS 키를 사용하라는 안내를 처음 봄
          + 비 QWERTY 레이아웃을 잘 처리한 점이 인상적임
          + 2012년 맥북과 오래된 HD 4000 iGPU에서도 매끄럽게 실행됨
     * Marble Madness는 Mark Cerny가 디자인했음
          + 그는 PS4와 PS5를 디자인한 것으로 더 잘 알려져 있음
     * Netlify가 무엇을 하는지 설명해줄 수 있는지 궁금함
          + 사이트를 방문했지만 마케팅 설명만으로는 이해하기 어려웠음
     * Marble Madness는 프로그래밍을 시작하게 된 큰 영감이었음
          + 아버지가 어렸을 때 이 게임을 했고, 나에게도 영향을 미쳤음
          + 컴퓨터가 등각 투영 공간에서 복잡한 물체를 시뮬레이션하는 것이 놀라웠음
          + 수학을 더 잘하게 되면서 이 게임이 내 프로젝트에 영향을 미쳤음
     * Netlify에 대한 기술적 설명이 있는 페이지가 있는지 궁금함
          + 마케팅 설명만으로는 이해하기 어려웠음
     * 게임을 즐겼음
          + Netlify에 대한 정보는 관심 없었지만, 구슬을 움직이는 것이 재미있었음
          + 매끄러운 경험에 감명받았음
     * Oxyd라는 게임을 좋아했지만 현대적으로 번역되지 않았음
          + 나중에 Enigma로 재출시되었음
     * 이 프로젝트가 오픈 소스로 공개될 가능성이 있는지 궁금함
          + 현재 튜토리얼이 거의 없는 많은 것들의 좋은 예시가 될 것 같음
"
"https://news.hada.io/topic?id=17992","웹캠 LED를 끄고 비디오를 녹화하는 악성코드, ThinkPad X230에서 시연","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             웹캠 LED를 끄고 비디오를 녹화하는 악성코드, ThinkPad X230에서 시연

     * 이 저장소는 ThinkPad X230의 웹캠 LED를 소프트웨어로 제어할 수 있는 도구를 포함하고 있음
     * 물리적 접근 없이도 웹캠을 통해 비디오를 녹화할 수 있는 악성코드의 가능성을 보여주기 위해 만들어짐
     * USB를 통해 웹캠 펌웨어를 다시 플래시하여 LED를 임의로 제어할 수 있는 기능을 추가함
     * 이 접근 방식은 다른 많은 노트북에도 영향을 미칠 가능성이 있음

도구

     * srom.py: Ricoh R5U8710 기반 웹캠의 SROM 펌웨어를 USB를 통해 읽고 씀. 웹캠은 부팅 시에만 SROM 펌웨어를 로드하므로, 업데이트된 펌웨어를 로드하려면 노트북을 완전히 종료하고 다시 켜야 함.
     * patch_srom.py: FRU 63Y0248 웹캠의 SROM 이미지를 패치하여 범용 임플란트를 추가함. 원래 X230 웹캠 SROM 이미지와 함께 사용하려면 수정이 필요함.
     * fetch.py: 범용 임플란트를 통해 동적으로 업로드된 2단계 임플란트를 통해 IRAM, XDATA, CODE 메모리 공간의 내용을 USB를 통해 가져옴.
     * led.py: 범용 임플란트를 통해 XDATA의 주소 0x80의 값을 덮어써서 웹캠 LED를 켜거나 끔.

메모리 덤프

     * srom/x230.bin: 원래 X230 웹캠 모듈의 SROM 내용.
     * srom/63Y0248.bin: FRU 63Y0248 웹캠 모듈의 SROM 내용.
     * code/63Y0248.bin: FRU 63Y0248 웹캠 모듈에서 유출된 CODE 메모리 공간의 내용. 부트 ROM은 오프셋 0xb000 아래에 있으며, 원래 X230 웹캠 모듈의 부트 ROM과 동일함.

        Hacker News 의견

     * 카메라 LED는 전원과 연결되어 항상 켜져 있어야 하는데, 펌웨어로 제어할 수 있으면 보안에 문제가 생김
     * 카메라보다 마이크가 더 걱정됨. macOS는 마이크 사용 시 메뉴바에 불빛을 표시하지만, 하드웨어적으로 해킹 불가능한 것이 더 좋음
     * ThinkPad X1 Carbon Gen 8에서는 웹캠 LED를 끄고 녹화 가능. ThinkShutter라는 물리적 스위치가 있지만, 잘못 사용하면 LED만 꺼지고 렌즈는 가려지지 않음
     * 대부분의 웹캠 LED는 카메라 전원과 직렬로 연결되어 있어야 함. 소프트웨어로 제어 가능한 LED 설계는 문제임
     * 현대 기기의 마이크는 LED나 스위치가 없어 카메라보다 더 큰 문제임. 민감한 정보를 쉽게 수집할 수 있음
     * Lenovo 노트북은 카메라를 물리적으로 가리는 슬라이더 버튼이 있음. 이는 드라이버에도 영향을 미쳐 Windows에서 카메라가 분리된 것으로 인식됨
     * 카메라와 마이크는 물리적 스위치가 필요함. 소프트웨어 스위치는 신뢰할 수 없음. 사용하지 않을 때는 카메라와 마이크를 분리함
     * 마이크와 카메라의 전원을 개별적으로 제어할 수 있는 물리적 스위치가 필요함. 이는 iPhone의 음소거 스위치처럼 간단할 수 있음
     * X230 노트북은 여전히 많이 사용됨. Lenovo의 최신 키보드는 품질이 떨어짐. T14s 시리즈는 휴대성이 떨어짐
     * 웹캠 커버를 사용하여 프라이버시를 보호하는 사람들이 많음. 마이크는 차단하기 어려움
     * 보안 커뮤니티에서는 오래전부터 알려진 문제임. X230은 오래된 모델로, 최신 모델에서는 이 문제가 해결되었기를 바람
"
"https://news.hada.io/topic?id=17907","게임 40주년 기념 FORTH 코드 공개된 Chipwits","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    게임 40주년 기념 FORTH 코드 공개된 Chipwits

  ChipWits의 40주년: 원본 FORTH 코드 오픈 소스화

     * ChipWits의 40주년 기념으로 원본 Mac과 Commodore 64 FORTH 소스 코드를 오픈 소스로 공개함. 이는 8비트 마이크로컴퓨터의 크로스 플랫폼 소프트웨어 개발에 대한 감사를 공유하고자 함.

  ChipWits의 역사와 FORTH 선택

     * ChipWits는 1984년 Macintosh에서 처음 출시된 게임 중 하나로, 프로그래밍 로봇을 주제로 한 게임임.
     * 당시 Apple Lisa는 너무 비싸서 MacForthPlus 프로그래밍 언어를 사용하여 개발함.
     * FORTH는 다양한 8비트 마이크로컴퓨터에서 사용 가능하여 포팅에 유리한 언어였음.

    다른 플랫폼으로의 포팅

     * Commodore 64로의 포팅은 Super Forth 64로 진행되었으며, 사용자 인터페이스 디자인을 유지하기 위해 조이스틱을 사용한 풀다운 메뉴 시스템을 개발함.
     * Apple II 버전도 FORTH의 변형으로 작성됨.

  리뷰와 수상

     * ChipWits는 많은 리뷰와 상을 받았으며, MacUser Editor’s Choice 1986 Award를 포함한 여러 매체에서 호평을 받음.

  원본 게임을 에뮬레이션으로 플레이

     * Emularity와 Apple2js 같은 오픈 소스 프로젝트 덕분에 브라우저에서 원본 ChipWits를 플레이할 수 있음.

  소스 코드 복구

     * 원본 디스크를 복구하는 과정에서 많은 노력이 필요했으며, 대부분의 데이터가 손상 없이 복구됨.
     * Commodore 64와 Mac 디스크를 읽기 위해 다양한 하드웨어와 소프트웨어를 사용함.

  소스 코드 탐색

     * GitHub에서 ChipWits의 FORTH 소스 코드를 확인할 수 있으며, FORTH 코드는 매우 간결하고 우아함.
     * Mac 버전의 소스 코드는 약 3,000줄로, 현대화된 포트는 이미 35,000줄의 C# 코드로 구성됨.

  ChipWits 리부트에 대한 도움 요청

     * 원본 FORTH 버전의 오픈 소스 릴리스에 집중하고 있지만, 현대화된 버전도 개발 중임.
     * 새로운 버전은 프로그래머의 새로운 세대를 영감을 주기를 희망함.
     * GitHub 저장소에서 여러 이슈를 생성하였으며, 커뮤니티가 유지하는 FORTH 버전의 ChipWits를 목표로 함.

  참여 요청

     * ChipWits Discord 서버에 참여하여 프로젝트에 도움을 줄 수 있음.

        Hacker News 의견

     * FORTH를 사용하여 ChipWits를 코딩한 이유에 대한 글을 작성했음
          + FORTH는 오래된 컴퓨터에서 중간 속도의 언어로 자리 잡았음
          + ValForth는 Atari ST 생태계에서 초기 크로스 플랫폼 FORTH 구현 중 하나였음
          + 8비트 컴퓨터에서도 Elcomp의 FORTH가 있었고, 관련 서적도 존재했음
          + Leo Brodie의 ""Starting FORTH""는 여전히 훌륭한 입문서임
          + BASIC을 배우면서 다른 프로그래밍 메타포를 접할 수 있었음
          + 80년대 아이들에게는 사고를 확장하는 경험이었음
     * TumbleForth라는 프로젝트도 흥미로워 보임
          + 이 프로젝트를 경험한 사람이 있는지 궁금함
     * 어릴 적 이 게임을 간절히 원했음
          + 나이가 들었다는 느낌이 듦
     * Human Resource Machine을 대부분 즐겼음
          + ChipWits와 유사한 개념에 기반한 게임임
          + 두 게임을 비교한 경험이 있는지 궁금함
     * Commodore 64에서 많이 플레이했음
          + 독특하고 호기심을 자극하며 재미있었음
     * FORTH는 perl과 같은 일회성 작성 언어로 보임
          + 작성과 빌드가 쉽지만, 시간이 지나면 코드 이해가 어려움
          + 매우 빠르고 효율적임
     * ChipWits의 현대 버전은 어떤 언어로 작성되었는지 궁금함
"
"https://news.hada.io/topic?id=17919","소금 알갱이 크기의 "meta-optics" 카메라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      소금 알갱이 크기의 ""meta-optics"" 카메라

     * 소금 알갱이 크기의 카메라가 이미징을 혁신할 수 있음
          + 연구자들이 개발한 ""메타-옵틱스"" 카메라는 소금 알갱이 크기로, 기존의 이미징 장치보다 500,000배 작음
          + 프린스턴 대학교와 워싱턴 대학교의 연구팀이 혁신적인 방법과 재료를 사용하여 이 초소형 카메라 시스템을 개발함
          + 메타-옵틱스 카메라는 기존 카메라와 동일한 수준의 이미지 품질을 제공하면서도 훨씬 작은 크기를 자랑함
     * 전통적인 렌즈에서 메타표면으로
          + 모든 카메라 설계자는 가능한 한 컴팩트한 카메라를 만들고자 함
          + 메타표면은 빛을 독특한 방식으로 조작할 수 있는 인공적인 재료로, 수백만 개의 나노 안테나로 구성됨
          + 연구팀은 메타표면을 사용하여 기존의 굴절 렌즈보다 더 많은 빛 조작 능력을 가진 카메라를 개발함
     * 더 나은 내시경, 스마트폰 카메라, 망원경
          + 메타-옵틱스 카메라는 의료 이미징, 소비자 하드웨어, 드론 등 다양한 분야에 응용 가능성 있음
          + 초소형 내시경은 덜 침습적인 진단과 수술을 가능하게 할 수 있음
          + 스마트폰, 웨어러블, AR/VR 헤드셋 등에서 카메라의 크기를 줄여 더 많은 가능성을 열 수 있음
          + 메타표면은 컴퓨터 칩을 생산하는 기술과 유사하게 제조될 수 있어 비용 절감 가능성 있음
     * 추가 읽기
          + 연구자들이 소금 알갱이 크기의 카메라를 개발한 과정과 그 가능성에 대한 추가 자료 제공
     * 저자 소개
          + Logan Kugler는 플로리다 탬파에 거주하는 프리랜서 기술 작가로, _Communications_에 정기적으로 기고하고 있음

        Hacker News 의견

     * 나노 카메라로 촬영한 사진이 기사에 포함되지 않아 회의적이었으나, 원본 논문에 인상적인 예시가 있음.
     * 과거에 미래학자가 언급한 인터뷰를 본 적이 있음. ""언젠가 아이들이 장난감 가게에서 스티커 형태의 카메라를 구매할 수 있을 것""이라는 내용이었음. 이 기술은 이미 존재하지만 대량 생산이 가능할 만큼 저렴하지 않음. 경제 규모가 커지면 물리적 프라이버시에 대한 사회적 인식이 크게 변할 것임.
     * Vernor Vinge의 소설 _A Deepness in the Sky_에서의 ""유비쿼터스 감시""를 실현할 수 있는 기술로 보임. 주의 깊게 지켜볼 필요가 있음.
     * 많은 사람들이 프라이버시와 감시에 대해 생각하고 있는 반면, 나는 이 기술이 나노 카메라를 상대론적 속도로 가속화하여 다른 태양계를 근접 촬영할 수 있게 할지 궁금함.
     * 작은 크기와 넓은 시야각을 고려할 때, 배열 위에 일반 렌즈를 추가하면 일상적인 휴대폰 카메라에 160x160도와 같은 극단적인 넓은 시야각을 제공할 수 있음. 또는 매우 작은 360x180도 독립형 카메라를 만들 수 있음. AR 안경에 몇 개의 카메라를 장착하면 360x160도 시야각으로 상황 인식이 뛰어날 수 있음. 또 다른 응용 분야로는 작은 라이트 필드 카메라가 있음. 이 기술이 직접적으로 적용 가능한지는 모르겠으나, 저렴한 라이트 필드 카메라가 생긴다면 초점 조정과 3D 이미지 감지 및 장면 재구성에 유용할 것임.
     * AI 기반 이미지 후처리를 통해 고품질 이미지를 생성하는 기술이지만, 직관적으로는 기존 카메라와 비교할 수 없음.
     * 이 소식은 새로운 것이 아님. 2021년에 이미 발표되었음.
     * 만약 사실이라면, 스마트폰에 10,000개의 카메라 배열(100x100)을 장착하여 계산 촬영을 통해 흥미로운 작업을 할 수 있을 것임.
     * 메타 옵틱스 카메라는 기존 카메라와 동일한 품질의 풀컬러 이미지를 생성할 수 있는 최초의 장치임. 기존 카메라보다 500,000배 작음.
"
"https://news.hada.io/topic?id=17973","Runway, 이미지 생성 모델 Frames 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Runway, 이미지 생성 모델 Frames 출시

     * Frames는 스타일 제어 및 시각적 충실도에서 뛰어난 성능을 제공하는 새로운 이미지 생성 모델
     * 프로젝트에 특정한 미적 스타일을 설정하고, 이를 유지하면서 다양한 변형을 생성할 수 있는 능력을 제공함
     * Gen-3 Alpha 및 Runway API를 통해 점진적으로 액세스가 제공되며, 더 유기적인 창작 흐름 내에서 정확한 스타일 및 분위기를 구현할 수 있도록 설계됨
     * 안전한 배포를 보장하기 위해 여러 콘텐츠 검열 및 안전 절차를 갖추고 있음

예제로 제공되는 World들

  WORLD 1089: Mise-en-scène

     * 고전 영화의 시각 언어를 사용하여 디지털 초상화를 재구상함
     * 빛과 그림자의 정교한 조화를 통해 상징적인 구도를 담아냄

  WORLD 3190: 1980년대 SFX 메이크업

     * 라텍스와 페인트로 제작된 실물 특수 효과를 되살리는 세계
     * 수작업으로 제작된 괴물과 고어의 독창성을 기리는 이미지 제공

  WORLD 3204: 1970년대 앨범 아트

     * 동물, 극적인 사진, 실험적인 타이포그래피가 결합된 디자인
     * 음반 아트에서 볼 수 있는 대담한 미학을 재구성함

  WORLD 4027: 일본 Zine

     * 레트로 애니메이션 미학과 초현실적인 과학 판타지가 결합된 이미지
     * 70년대 만화 스타일의 과감한 선과 우주적 배경을 재현함

  WORLD 7621: 디지털 초상화 프로필

     * 현대적인 초상화와 건축적 대칭성, 영화적 색보정의 조화
     * 예술적 감각과 치밀하게 구성된 장면을 통해 주제와 공간의 조화를 표현함

  WORLD 0981: 다이내믹 레인지 풍경

     * 자연의 전체 스펙트럼을 생생하게 묘사함
     * 산의 그림자에서부터 미네랄의 질감까지, 풍부한 색조로 표현

  WORLD 8421: Disposables

     * 35mm 필름의 불완전함과 즉흥적인 매력을 강조한 세계
     * 빛바랜 하이라이트와 선명한 색상 변화가 포함된 이미지 제공

  WORLD 1009: 정물

     * 일상적인 사물을 자연광과 구도를 통해 시적인 아름다움으로 변모
     * 케이블, 노트북 등의 평범한 사물을 예술적으로 묘사

  WORLD 8862: 잡지 콜라주

     * 빈티지 클리핑과 팝아트 감각의 결합
     * 대담한 타이포그래피와 독창적인 조합을 통해 새로운 내러티브를 창조

  WORLD 3107: 움직이는 사물

     * 단순한 사물들이 에너지와 움직임의 역동적인 조각으로 변모
     * 단색 배경 위에서 완벽히 조화를 이루는 혼돈의 순간을 포착
"
"https://news.hada.io/topic?id=17893","구글, Forbes/CNN/WSJ등의 기생 SEO 같은 악용에 대해 강경 대응을 시작 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            구글, Forbes/CNN/WSJ등의 기생 SEO 같은 악용에 대해 강경 대응을 시작

     * Google은 ""사이트 평판 남용 정책(site reputation abuse policy)""을 업데이트하며, 검색 엔진 최적화(SEO)를 악용하는 방식에 대해 강경 대응을 시작함
     * 주요 변화는 뉴스 및 리뷰 사이트에서 제3자가 제품 리뷰 콘텐츠를 게시하며 도메인 권위를 이용해 순위를 높이는 관행을 겨냥한 것임
     * 이러한 콘텐츠는 해당 사이트의 전문 분야와 관계가 없는 제품을 리뷰하며, 사용자 경험을 저하시킴
     * 포브스, CNN, 월스트리트 저널, 타임 등 주요 사이트의 하위 도메인에서 트래픽이 대폭 감소
          + ""Best CBD Gummies""와 같은 검색어에서 포브스의 순위가 압도적이었으나, 이번 업데이트 이후 하위 도메인의 순위가 최대 97%까지 대폭 하락 함
          + 트래픽 손실로 인한 경제적 손실이 약 750만 달러에 달함
     * 타임의 ""Time Stamped""와 포브스의 ""Forbes Advisor""와 같은 하위 도메인이 영향을 받았으며, 뉴스 관련 메인 URL에는 영향을 미치지 않음
     * 기생 SEO(Parasite SEO) 는 잘 확립된 도메인의 신뢰도를 활용해 판매를 유도하는 비윤리적 SEO 관행을 의미함
          + 예: 포브스의 하위 도메인인 ""Forbes Marketplace""는 오랜 도메인 역사를 활용해 제품 리뷰 콘텐츠를 상위에 노출
          + ""Best CBD Gummies"", ""Best Pet Insurance"", ""How to Get Rid of Roaches""와 같은 검색어에서 상위 결과를 차지하며 수익을 창출
          + 이 관행은 ""불공정하고 착취적인"" 방식으로 평가됨
     * Google은 제3자 콘텐츠를 활용한 리뷰 콘텐츠를 스팸으로 간주하며 검색 순위에서 대폭 하락시키는 방침을 명확히 함
     * 기존에 인정된 제3자 콘텐츠 형식(와이어 서비스 보고서, 콘텐츠 배포, 명확히 표시된 스폰서 콘텐츠 등)에는 영향을 미치지 않음
     * Google은 이번 변경 사항을 정책에 어긋나는 사이트에 ""수동 조치(Manual Action)"" 를 적용하며 적극적으로 대응 중
          + Time Stamped는 검색 순위가 최대 97% 하락
          + Forbes Advisor는 43% 하락

   포브스 선정 구글 최악의 업데이트 (예정)

   Google - Updating our site reputation abuse policy
     * Google은 스팸 퇴치와 더 나은 검색 경험 제공을 위해 사이트 평판 남용 을 겨냥한 스팸 정책을 강화
     * 제3자가 콘텐츠를 게시해 기존 도메인의 랭킹 신호를 악용 하는 관행을 막는 것이 이번 정책의 핵심
          + 이러한 관행은 본래 도메인과 무관한 콘텐츠가 상위 랭킹에 오르도록 하며, 사용자 경험을 저하시킴
     * 다양한 사례를 검토한 결과, First-Party의 일부 관여 여부(화이트 라벨 서비스, 라이선스 계약, 부분 소유권 등)와 상관없이, 제3자 콘텐츠는 여전히 기본적으로 착취적이고 불공정한 성격 을 지님
     * 이에 따라 Google은 정책 언어를 더 명확히 하여 이러한 행위를 명백한 정책 위반 으로 규정
     * 업데이트된 정책
          + ""사이트 평판 남용은 제3자 페이지를 게시해 검색 랭킹 신호를 악용하려는 행위"" 로 정의
          + 정책 위반 평가 기준
               o 제3자 콘텐츠가 악용되는 방식인지 다각적으로 고려
               o 사이트 소유자의 콘텐츠 제작 주장만으로 판단하지 않음
          + 정책 위반 시 조치
               o 스팸 수동 조치(Spam Manual Action) 가 적용되며, 사이트 소유자는 Search Console 계정을 통해 재심사를 요청 가능
     * 모든 제3자 콘텐츠가 정책 위반은 아님
          + 스팸 정책 페이지에 위반 여부를 판단하는 상세 기준이 포함
     * 사이트의 특정 섹션 평가 방식 변화
          + 주 콘텐츠와 독립적이거나 다른 특성을 지닌 섹션은 별도의 독립 사이트처럼 평가
          + 이러한 변화로 인해 섹션의 트래픽 변화가 발생할 수 있음
          + 이는 스팸 정책 위반이 아닌, 사이트 전체 신호의 영향을 받지 않는 독립 평가 결과를 의미
     * 사이트 소유자를 위한 권장 사항
          + 콘텐츠 품질 향상과 사용자 중심의 콘텐츠 제작에 집중해야 함
          + 검색 엔진 랭킹을 노리는 조작적인 콘텐츠 제작이 아닌, 사용자에게 유익한 고품질 콘텐츠를 우선적으로 제공할 것을 권장

   Forbes Marketplace - 숙주를 먹어치우려는 기생 SEO 회사의 진실

        Hacker News 의견

     * Google의 새로운 정책에 대한 혼란이 있음. 과거에도 검색 품질 문제를 논의했으며, Mahalo 같은 스팸 콘텐츠를 빠르게 차단했음. 그러나 현재 AI와 스팸이 더 공격적이어서 문제임. 스팸이 수익성이 있는 것이 근본적인 문제임
          + 작은 블로그에도 게스트 글을 올려달라는 요청이 주당 3번 정도 옴. 가격은 $50-$200임
          + Forbes에 실렸다고 자랑하는 사람들은 과거의 Forbes와 현재의 SEO 운영을 혼동하는 것 같음
          + Google의 검색 결과가 너무 나빠졌음. AI 생성 및 SEO 쓰레기로 가득 차 있음. SearchGPT가 검색 시장을 장악하는 것도 원치 않음. 과거의 Google로 돌아가길 바람
     * Forbes Marketplace와 ""parasite SEO""에 대한 토론이 있었음
          + Google 검색이 특히 포르노 관련 검색에서 문제가 있음. 특정 용어를 검색하면 관련 없는 검색 페이지로 연결됨
     * Google이 다른 사이트들도 차단해야 함. ""Best CBD Gummies""를 검색하면 얕은 비교 페이지들이 나옴. Forbes가 다른 페이지들보다 더 나쁘다고 할 수 없음
     * 전체 부서가 무용지물이 되었음. 이에 대해 아쉬움이 없음
     * Google이 Forbes나 Business Insider 같은 대규모 콘텐츠 스팸 사이트를 수동으로 차단하지 않는 이유에 대한 의문이 있음. 문제를 실제로 해결하는 것이 필요함
     * OpenAI와 같은 경쟁자들이 Google의 비즈니스에 위협이 되면서 이러한 문제를 해결하기 시작한 것으로 보임. 사용자들이 오랜 기간 동안 열악한 결과로 고통받은 것에 대해 불만이 있음
     * Google의 공식 성명서에 따르면, 외부인에게는 이러한 유료 배치가 불투명할 수 있음. Forbes와 같은 악성 행위자를 추적할 때 부수적인 피해를 방지하기 어려움. Google이 이 문제를 해결하려고 노력하는 것이 기쁨
"
"https://news.hada.io/topic?id=17946","Google Chrome이 나쁜 브라우저인 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Google Chrome이 나쁜 브라우저인 이유

다른 브라우저로 전환해야 하는 이유

   과거 Google Chrome의 사용자로서, 다른 브라우저로 전환하는 것이 온라인 보안과 자유에 있어서 게임 체인저가 될 수 있다는 것을 증명할 수 있습니다. 이 글에서는 Google Chrome이 문제가 있다고 생각하는 이유와 Firefox가 더 나은 대안이라고 믿는 이유를 설명하겠습니다. Brave, Ungoogled Chromium 등 무료 오픈 소스 Chromium 기반 웹 브라우저를 사용할 수도 있지만, Firefox가 좋은 이유는 Chromium 기반 웹 브라우저가 아니기 때문입니다.
     * Google Chrome의 데이터 수집 관행
       Chrome은 검색 기록, 검색어, 개인정보, Google ID, 쿠키, 추적 픽셀을 포함ㅎ마야 방대한 사용자 데이터와 개인정보를 수집. 이 데이터를 사용하여 사용자에 대한 프로필을 만들고, 타겟팅 광고 및 기타 목적으로 사용할 수 있음.
     * 웹에 대한 Google의 통제
       Chrome은 웹을 통제하고 조작하여 이점을 얻으려 시도한 경력이 있음. 예를 들어, 2023년 웹 환경 무결성(WEI; Web Environment Integrity)을 도입하려 시도하였음. WEI는 웹에 효과적으로 DRM을적용하여 콘텐츠가 소비되고 공유되는 방식을 제어.
     * FLoC (Federated Learaning of Cohorts)
       2021년에 Google은 쿠키를 사용하지 않고도 웹에서 사용자를 추적할 수 있는 시스템인 FLoC를 도입했음. 이는 Google이 사용자에게 선택권을 주지 않고도 사용자를 추적할 수 있는 방법으로 널리 비판을 받았음.
       (역주: FLoC는 결국 폐기되었습니다.)
     * Google의 개인정보 보호 샌드박스
       Google의 개인정보 보호 샌드박스는 겉보기와 다르며, 사용자의 개인정보를 보호하는 방법으로 여겨지지만 실제로는 Google이 웹에 대한 통제력을 유지하고 다른 회사는 사용자를 추적하지 못하도록 제한하는 방법임.
     * 독점 금지 소송
       Google은 검색엔진 및 독점적 관행과 관련된 소송을 포함하여 수많은 독점 금지 소송에 연루되어 있음. 미 정부(법무부)는 Google에게 Chrome을 매각하도록 강요하려고 하고 있음.
     * Manifest v2 및 광고 차단기
       Google이 Manifest v2를 종료하기로 결정한 것은 웹에 나쁜 일임. Manifest v2를 사용하면 광고와 추적기를 차단할 수 있는 확장 프로그램을 만들 수 있으며, 이는 사용자의 개인정보를 보호하는 데 필수적임.
       Manifest v3는 훨씬 더 제한적이며, 효과적인 광고 차단기를 만들지 못하도록 제한함.
          + uBlock Origin은 Google의 조치로 피해를 입고 있는 광고 차단기의 좋은 예임.
     * Google Chrome의 미래
       Google은 Windows Recall과 유사한, 브라우저에 직접 통합될 기능을 개발하고 있음. Jarvis라 불리는 이 기능은 스크린샷을 찍고화면에서 하는 모든것을 기록한 후 AI의 학습을 위해 서버로 전송.
       이것은 본질적으로 감시 도구임.

  Firefox로 전환해야 하는 이유

     * Firefox는 Mozilla에서 개발하고 Gecko 엔진을 사용하는 독립적인 브라우저.
     * Chromium 기반 브라우저와 달리 Google에서 제어하지 않으며, uBlock Origin과 같은 확장 프로그램을 사용하여 더 나은 개인정보 보호와 사용자 정의 옵션을 제공
     * Firefox로 전환하면 더 건강하고 다양한 웹 생태계에 기여할 뿐아니라, 온라인 보안과 자유를 보호하기 위한 중요한 단계를 밟게 됨. 독립성, 투명성, 사용자 제어를 중시하는 커뮤니티에 가입하게 되며, 사용자를 최우선으로 생각하는 브라우저를 지원하게 됨.

  결론

     * 결론적으로 Firefox와 같은 다른 브라우저로 전환하는것이 온라인 보안과 자유를 위해 가장 좋은 결정이라 확신함.
     * Google의 인터넷 지배력은 개인정보 보호 문제를 넘어서는 심각한 문제. 한 회사가 너무 많은 통제력을 행사하면 웹에서 경쟁, 혁신 및 다양성이 억제됨.
          + 90년대 Internet Explorer로 인한 침체와 열악한 사용자 경험이 발생한 사례를 이미 보았음.
          + Google의 관행은 오늘날에도 비슷한 시나리오를 만들어낼 위험이 있음.
     * 과거의 실수를 반복하지 마세요. 대안을 지원하고 독점적 통제에 맞서세요!


   ※ 역주: 원문에는 각 항목에 대한 좀 더 자세한 설명과, 링크가 제공됩니다.

   개인적으론 내용은 공감이 가는데, 대안 제시가 파폭이라 신뢰도 하락...

   V2 종료된다고 해서 V3용 애드가드 설치했더니 필터 수 제한 오류가 많이 뜨더군요. 그냥 시원하게 유료버전 지르고 그 김에 모바일에도 깔아버리게 되었네요.

   https://github.com/mozilla-mobile/firefox-ios/issues/10939
   iOS 의 firefox (safari 엔진 이겠죠) 에 한정된 내용입니다만,
   아무 페이지나 방문하면 정상적인 요청 이후, facebook user agent 로 재요청이 일어납니다.
   문제제기를 했지만 제대로 된 답변 없이 닫혔습니다.
   아무리 콩글리시였어도 이상한 agent 값으로 추가조회되는 현상을 묻는건 명확한데 그냥 닫혀버렸네요.
   방금 다시 테스트 해 봤는데 증상이 여전합니다.
   저 github 이슈는 다시 열지 말아주세요.

   링크된 이슈 오픈하신 분이신가요? 살펴보니 파비콘 관련 이슈는 타 이슈에서 처리된것 같네요.

   다만 어느 오픈소스 프로젝트건 재현 가능한 방법을 알려달란 요청에 더이상 사용하지 않고 믿지 않는다 같은 답변 다시면 도움받기는 힘듭니다.

   webkit 도 괜찮다면 https://kagi.com/orion/ 오리온도 사용할만합니다~!

   저는 웨일 사용하는데 다른 분들은 어떻게 생각하시는지 궁금하네요

   제목이 어그로..

   다른 건 그렇다 치더라도 MV2 제거는... 하... 광고 차단 확장 외에도 지금도 사용되고 있는 오래된 확장 프로그램 중에서도 MV2를 사용하고 있는 경우가 많은데 정말 안타깝습니다.

   근데 크롬 설정에서 개인정보 수집, 광고 활용을 꺼도 수집한다는 의미일까요?

   크롬 설정에서 개인정보 수집 제어가 가능한걸로 알고 있거든요

   근데 대부분 개인정보 수집, 맞춤광고 설정이 킨 상태로 사용하시겠지만

   Arc버리고 Zen 사용중인데 개인적으로 Arc보다 나은듯합니다...

   어떤 점이 낫다고 생각하시나요? 저도 Arc를 사용중인데 Zen을 눈여겨보고있어서요!

   회사에서는 크롬하고 EDGE 쓰는데, 집에서는 BRAVE하고 EDGE 쓰고 있네요...

   웹표준이 너무 크로미움 위주로 휘둘리는 느낌이 강해서 gecko와 webkit을 응원합니다

   그리고 Ladybird도요!

   크롬보다야 낫다고 생각하기는 하지만.. 요즘 파이어폭스도 점점 초심을 잊은 듯한 결정을 하니 걱정입니다.

   이게 다 돈이 궁해서...

   참고로 이 글은 구글 번역기를 사용하여 작성되었습니다 :)

   저는 주 브라우저로 Firefox를 사용하며, 어쩔 수 없는 경우에만 대안으로 MS Edge를 사용합니다.

   그리고 uBlock Origin은 정말 좋은 광고 차단기입니다. 다른 차단기를 쓰고 계시다면 전환을 고려해 보아도 좋을 정도로요. 게다가 Firefox에서 아주 잘 작동합니다.
     * uBlock Origin이 Firefox에서 가장 잘 동작하는 이유

   파이어폭스 유저입니다.
   파이어폭스 좋아요. 츄라이츄라이~
   모질라를 응원하는 마음으로 모질라 vpn 결제했습니다.
"
"https://news.hada.io/topic?id=17980","십대 수학자들, 경이로운 프랙탈을 통한 매듭 묶기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      십대 수학자들, 경이로운 프랙탈을 통한 매듭 묶기

    소개

     * 2021년 가을, Malors Espinosa는 고등학생들이 증명할 수 있는 수학 문제를 만들고자 함.
     * Menger 스펀지라는 프랙탈을 통해 모든 매듭을 찾을 수 있다는 것을 증명함.

    Menger 스펀지

     * Menger 스펀지는 큐브에서 점점 작은 큐브를 제거하여 만들어짐.
     * 이 프랙탈은 무한 반복을 통해 부피는 0으로 줄어들고 표면적은 무한히 커짐.

    매듭과 프랙탈

     * Menger는 모든 곡선을 스펀지에 포함시킬 수 있다고 증명했으나, 모든 매듭도 포함될 수 있는지는 증명되지 않았음.
     * Malors와 세 명의 고등학생이 모든 매듭이 Menger 스펀지에 포함될 수 있음을 증명함.

    매듭을 보는 새로운 방법

     * 매듭을 아크 프레젠테이션이라는 특별한 다이어그램으로 표현함.
     * Menger 스펀지의 면에 아크 프레젠테이션의 수평선과 수직선을 배치하여 매듭을 3차원으로 확장하는 방법을 찾음.

    매듭으로 측정

     * 학생들은 trefoil knot을 포함한 모든 ""pretzel"" 매듭을 Menger 스펀지의 사면체 버전에 포함시킬 수 있음을 증명함.
     * 이 연구는 프랙탈의 복잡성을 측정하는 새로운 방법을 제시할 수 있음.

    결론

     * 이 연구는 프랙탈과 매듭 이론에 대한 새로운 통찰을 제공하며, 수학적 진리에 기여하는 의미 있는 작업임.
"
"https://news.hada.io/topic?id=17974","Nvidia, 유연한 AI 사운드 생성 모델 Fugatto 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Nvidia, 유연한 AI 사운드 생성 모델 Fugatto 공개

     * 텍스트를 사용해 오디오 출력을 제어할 수 있는 사운드 생성 AI 모델 'Fugatto'
          + 음악 생성, 목소리의 억양이나 감정 변경, 기존 음악에 악기 추가/제거 등 다양한 작업 가능
          + 기존에는 들어본 적 없는 완전히 새로운 소리도 생성 가능
     * Fugatto는 음악, 음성, 환경음을 텍스트 또는 오디오 파일로 입력받아 생성 또는 변환할 수 있음
          + 인간처럼 소리를 이해하고 생성하도록 설계되었음
          +

     ""비지도(Unsupervised) 멀티태스크 학습이 가능해 데이터와 모델 스케일에서 새로운 잠재력을 발휘""

다양한 사용 사례

     * 음악 제작: 노래의 스타일, 음성, 악기를 즉각적으로 실험하고 수정 가능
     * 광고: 지역별, 상황별로 음성을 맞춤 변경해 캠페인 최적화
     * 언어 학습: 사용자 선택 음성으로 개인화된 학습 콘텐츠 제공
     * 게임 개발: 게임 상황에 따라 오디오 자산을 변형하거나 새로 생성
     * 새로운 소리 만들기: 이미지 생성 AI의 ""아보카도 의자""처럼
          + 예를 들어, 트럼펫이 강아지처럼 짖는(bark) 소리나 색소폰이 고양이처럼 우는(meow) 소리를 생성 가능
          + 미세 조정과 소량의 노래 데이터를 통해 텍스트 프롬프트에서 고품질의 노래 음성을 생성하는 등 사전 학습되지 않은 작업도 처리할 수 있음

사용자에게 Artistic Control(예술적 통제력)을 제공

     * 사용자 지향적 제어 기능
          + ComposableART 기술을 통해 여러 지시사항을 조합
          + 텍스트 지시의 세부 조정 가능: 예를 들어, 프랑스 억양에 슬픈 감정을 결합
          + 시간적 인터폴레이션으로 소리의 진화 제어: 예, 천둥이 점차 사라지는 비 오는 풍경 생성
     * 사용자에게 전례 없는 소리 창작의 자유 제공

기술적 특징

     * NVIDIA DGX 시스템과 H100 GPU를 사용해 2.5억 개 매개변수로 훈련된 생성 AI 모델
     * 다국적 연구팀의 협력으로 다중 언어 및 억양 지원 강화
     * 수백만 개의 오디오 샘플로 훈련 데이터셋 생성
          + 데이터 간 관계를 새롭게 분석해 성능 향상
     * 훈련 데이터 확보와 모델 확장하는데 1년 이상의 시간 소요
     * 첫 텍스트 프롬프트로 음악 생성에 성공했을 때 깜짝 놀랐으며, 전자 음악과 개 짖는 소리를 조합한 데모에서 폭소를 자아내며 앞으로의 가능성을 확인했음
"
"https://news.hada.io/topic?id=17878","Documind - PDF 문서를 구조화된 데이터로 전환하는 오픈소스 AI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Documind - PDF 문서를 구조화된 데이터로 전환하는 오픈소스 AI 도구

     * PDF 변환, 정보 추출, 결과를 사용자가 지정한 스키마에 따라 포맷팅하는 기능을 제공
          + PDF를 이미지로 변환 하여 세부적인 AI 처리를 가능하게 함
     * OpenAI의 API를 활용하여 정보를 추출하고 구조화
     * 다양한 문서 형식에 대한 추출 스키마를 사용자 정의 가능
     * 로컬 및 클라우드 환경 모두에서 유연하게 배포 가능하도록 설계됨
     * Zerox 기반으로 개발됨

   아무튼 오픈소스이긴 한데 요즘 AI 달리기만 해서, 라이트하고 무료로 사용할 수 있는 도구들이 잘 나오지 않아서 아쉬울 따름이네요...

   초첨단 AI기반 소프트웨어가 40년된 Ghostscript에 의존한다니… 미묘하네요 ㅎㅎ

   문자를 pdf로 바꾸고 pdf를 이미지로 바꾸고 이미지를 문자로 바꾸는군요.

   사내 서비스로 개발중인 서비스인데.. 이게 오픈소스로 나오는군요 ㅎㅎ

   혹시 회사가 ㅎㅋ 이신가요?
"
"https://news.hada.io/topic?id=17945","JetBrains, 조직(회사) 구독시 연속 할인 정책 변경 안내 - 2025년부터 할인 정책 폐지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        JetBrains, 조직(회사) 구독시 연속 할인 정책 변경 안내 - 2025년부터 할인 정책 폐지

     * 새로운 조직 구독에는 연속 할인이 적용되지 않음.
     * 시행일: 2025년 1월 2일
     * 기존 라이선스: 현재 할인율 유지(갱신 시 20% 또는 40% 할인 계속 적용)
     * 연속 할인 모델 적용받으려면 2025년 1월 2일 이전에 신규 구독 구매 필요
"
"https://news.hada.io/topic?id=17887","모든 사람은 수학적 사고가 가능하며, 그로부터 혜택을 받을 수 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 모든 사람은 수학적 사고가 가능하며, 그로부터 혜택을 받을 수 있음

     * David Bessis는 수학적 사고가 누구나 접근 가능하며 삶에 큰 혜택을 줄 수 있다고 주장함
     * 그는 수학을 이해하지 못해 수학에 끌렸음. 수학은 외부로 드러나는 음악이나 그림과 달리 내부 과정이기 때문에 매력적이라고 느꼈음
     * 1990년대 후반 파리 디드로 대학에서 박사 학위를 취득하고, 2010년 머신러닝 스타트업을 창업함
     * Bessis는 수학을 하는 것이 무엇인지에 대해 끊임없이 질문하며, 다른 사람들이 수학자들이 어떻게 사고하고 실천하는지를 이해하도록 돕고자 함.
     * 수학적 사고의 본질
          + 수학은 단순히 기호와 논리만으로 이루어진 것이 아니라 직관과 논리, 본능과 이성 사이의 대화로 이루어짐
          + 수학은 물리적 훈련과도 유사하며, 상상력과 실수를 받아들이는 태도를 요구함
          + 그는 수학적 사고가 요가나 무술처럼 꾸준한 훈련을 통해 발전할 수 있는 기술이라고 주장함
     * 수학적 직관은 누구에게나 존재함
          + Bessis는 모든 사람이 수학적 사고를 할 수 있으며, 이는 자기 계발의 한 형태로 활용될 수 있다고 주장함.
          + 사람들의 일상적인 사고방식에 이미 수학적 직관이 숨어 있음
               o 예를 들어, ""10억에서 1을 빼면?""이라는 질문에 대부분의 사람들은 즉각적으로 답을 떠올림
          + 이러한 직관은 훈련의 결과로, 고대 로마 시대와 비교하면 엄청난 발전을 이룬 것임
     * 수학적 천재란 무엇인가?
          + 수학적 천재는 타고난 능력이 아니라 훈련과 환경에 의해 형성되는 상태라고 주장함
          + 어린 시절부터 지속적인 자기 학습을 통해 형성된 상태가 바로 천재성임
     * 수학적 사고를 어떻게 향상시킬 수 있는가?
          + 직관과 논리 간의 불일치를 발견할 때 이를 탐구하여 새로운 통찰을 얻는 과정을 반복해야 함
          + 직관을 명확히 표현하고, 논리적 토론에 연결시키며, 이를 통해 점차 직관과 이성이 정렬되도록 함
     * 수학적 사고의 이점
          + 수학적 사고는 삶의 기쁨, 명확성, 그리고 자기 자신에 대한 자신감을 증대시킴
          + 이는 어린아이들이 학습하는 방식과 유사하며, 지속적인 깨달음과 성취감을 제공함
          + 베시스는 성인들도 이 방식을 통해 창의력을 확장할 수 있다고 주장함
     * 수학과 자기 계발
          + 베시스는 수학적 사고가 자기계발의 도구라고 보며, 이를 통해 개인적 도전 과제를 극복할 수 있다고 믿음
          + 수학적 사고는 정직함과 창의력을 훈련하는 방법으로, 이는 감정적, 인지적 문제를 해결하는 데 도움을 줄 수 있음

        Hacker News 의견

     * 저자가 쓴 Mathematica라는 책을 읽고 있으며, 수학적 기술이 스포츠 재능과 비슷하다는 점을 강조함. 수학을 상상력 스포츠로 비유하며, MathAcademy.com에서 기초 수학을 다시 배우는 것이 재미있고 스트레스가 된다고 함
     * 수학적 재능과 천재성에 대한 집착이 성장 마인드셋에 해롭다고 주장함. 수학이 어렵다고 느껴지면 이미 한계에 도달했다고 생각했지만, 사실은 반대임. 쉬운 것이 오히려 시간 낭비임
     * 수학의 조기 형식화가 사람들을 수학에서 멀어지게 한다고 주장함. 수학적 방법보다 동기 부여 예제가 먼저 나와야 하며, 공식과 증명은 부록에 있어야 한다고 함
     * 고등학교에서는 응용 수학만 배웠고, 대학에서 수 이론과 추상 대수를 배우며 수학의 아름다움을 깨달음. SAT 시험에 나오지 않기 때문에 고등학교에서는 가르치지 않는다고 함
     * 경험 부족으로 인해 삶의 어려움을 겪는 사람들을 언급하며, 소프트웨어 개발의 명확성 강조가 유아 대화에 도움을 주었다고 함. 교육이 더 많은 삶의 기술을 제공해야 한다고 주장함
     * 많은 사람들이 기본적인 수학적 사고조차 배우지 못하는 현실을 지적하며, 모든 사람들이 쉽게 배울 수 있다는 주장에 대한 과학적 연구가 있는지 의문을 제기함
     * 수학을 배우지 않는 이유는 경제적 여건 때문이라고 주장하며, 기본소득이 보장된다면 많은 사람들이 자기 완성이나 예술을 추구할 것이라고 함
     * 추상적 수학적 사고가 교육 시스템에서 노출되지만 이해하지 못하고 단절되는 경우가 많다고 함. 기호와 방정식을 다루는 것이 더 널리 접근 가능해야 한다고 주장함
     * 대부분의 사람들은 재미있는 부분에 도달하지 못한다고 주장하며, 대학에서 집합론을 배우면서 수학을 처음으로 좋아하게 되었다고 함
     * 수학에 대한 진지한 목표를 가지고 배우면서 많은 것을 배웠다고 함. 좋은 수학 학생이 없다는 것이 아니라 나쁜 수학 교사가 문제라고 주장함
"
"https://news.hada.io/topic?id=17872","Tiny Glade, 한 달 만에 60만 개 이상 판매 달성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Tiny Glade, 한 달 만에 60만 개 이상 판매 달성

    Tiny Glade: 한 달 만에 60만 장 이상 판매

     * Tiny Glade는 Pounce Light의 ""편안한 건축 게임""으로, 2024년 9월 23일 Steam에 출시된 후 한 달 만에 60만 장 이상 판매됨. 이 게임은 2년의 개발 기간을 거쳤으며, 6월의 Next Fest에서 Top 10에 진입한 바 있음.
     * 이 게임은 The Sims 스트리머와 같은 편안한 게임을 좋아하는 유저들에게 인기를 끌었으며, 사용자 생성 콘텐츠(UGC)가 풍부하여 플레이어들이 게임 내에서 다양한 건축물을 만들 수 있음.
     * Steam에서의 판매량은 미국(32%), 독일(9%), 프랑스(7%), 영국(7%), 중국(7%) 등 다양한 국가에서 고르게 나타남.
     * Tiny Glade는 목표가 없는 샌드박스 게임으로, 사용자 리뷰에서 97% 긍정적인 평가를 받음. 게임의 중간 플레이 시간은 1시간 4분으로 비교적 짧지만, 구매자들은 게임을 사랑하고 후회하지 않음.

    게임 개발 및 성공 요인

     * 개발자들은 게임의 디자인 기둥으로 ""적은 노력으로 많은 것을 얻음"", ""틀린 답이 없음"", ""살아있음""을 설정함. 이 요소들은 게임의 성공에 큰 기여를 함.
     * Tiny Glade는 프로토타입을 여러 번 반복하며 개발되었으며, 출시 전 5번의 외부 플레이테스트를 거침.
     * 게임의 기술적 영감은 Limbo와 Inside에서 얻었으며, 저사양 PC에서도 아름다운 조명을 경험할 수 있도록 설계됨.

    게임의 시장 반응 및 영향

     * Tiny Glade는 출시 전 1,375,441개의 Steam 위시리스트를 기록하며 큰 관심을 받음. 이는 게임의 초기 바이럴 마케팅과 관련이 깊음.
     * 게임은 아직 할인된 적이 없으며, 할인 시 더 많은 판매가 예상됨.
     * Tiny Glade의 성공은 잘 만들어진 게임이 판매된다는 자명한 사실을 보여주며, 목표가 없는 자유로운 게임이 $15의 가격으로 판매될 수 있다는 점에서 흥미로움.

    게임 산업의 구조적 문제

     * Disco Elysium 스튜디오의 스핀오프인 Summer Eternal은 게임 개발의 구조적 문제를 지적하며, 플랫폼 주도의 현상 유지가 억압적일 수 있음을 언급함.
     * Valve와 같은 디지털 플랫폼이 전체 PC 수익의 1/3을 차지하는 문제를 지적하며, 커뮤니티 소유의 대안을 논의할 필요성을 강조함.

        Hacker News 의견

     * Tiny Glade는 최신 실시간 글로벌 조명 엔진을 사용하여 독특한 게임 경험을 제공함. Tomasz Stachowiak과 Anastasia Opara가 개발에 참여했으며, 각각 실시간 렌더링과 절차적 그래픽 분야에서 유명한 인물임
     * 이 게임은 Rust와 Vulkan으로 완전히 작성된 최초의 게임 개발 프로젝트 중 하나로, Steam에서 큰 성공을 거둔 사례임. Rust 생태계가 창의적인 게임 개발의 기반이 될 수 있음을 보여줌
     * Tiny Glade는 기술적 예술 작품으로, 장르에 상관없이 플레이할 가치가 있음. 절차적 예술은 예술, 모델링, 렌더링, 프로그래밍, 수학을 결합한 흥미로운 분야임
          + Anastasia Opara는 절차적 예술 튜토리얼을 제공하며, Houdini를 사용한 환경 생성 방법을 공유함
          + Tomasz Stachowiak은 GPC 2024에서 렌더링 관련 발표를 진행했음
     * Rust 게임 개발에 관심 있는 사람들을 위해 Bevy를 사용한 소개 자료를 작성함. Bevy는 시뮬레이션에 적합하지만 UI는 아직 개선이 필요함
     * Tiny Glade는 출시 전 100만 개 이상의 위시리스트를 기록하며 큰 기대를 받았음. Steam의 추천 알고리즘이 강력하게 작용했을 가능성이 있음
     * 마케팅이 효과적이었으며, Rust와 캐주얼 게임, 생성 콘텐츠에 관심 있는 사람들에게 잘 맞았음. 팀의 성공을 축하함
     * Digital Foundry가 이 게임을 리뷰했으며, 작은 인디 게임이 이 채널에 소개되는 것은 드문 일임
     * 인디 게임 개발을 따르는 것은 흔치 않지만, 이 게임의 데모를 보는 것을 즐겼음. 업데이트가 반복적으로 느껴져 구독을 취소했지만, 성공을 기쁘게 생각함
     * 기술적으로 놀라운 작품이며, 건축 요소를 우아하게 통합하는 능력이 인상적임. 개발자들이 이룬 성과는 경이로움
     * 서로 다른 객체 간의 매끄러운 통합이 인상적임. 지붕의 높이에 상관없이 블록이 완벽하게 작동하는 방식이 좋은 예시임. 절차적 기하학이 사용된 것으로 보임
"
"https://news.hada.io/topic?id=17931","React Scan - React 앱을 스캔하여 성능 문제를 자동으로 찾아주는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             React Scan - React 앱을 스캔하여 성능 문제를 자동으로 찾아주는 도구

     * 기존 도구(Profiler, Why Did You Render?, React Devtools)와 달리 코드 변경이 거의 필요 없고, 단순한 비주얼 큐와 프로그래밍 가능한 API를 제공함
     * 성능 문제를 일으키는 렌더링을 자동으로 감지하고 강조 표시하고, 정확히 어떤 구성 요소를 수정해야 하는지 보여줌
     * 간단한 Javascript 이므로, 어디든 넣을수 있음 : Script 태그, NPM 등

React Scan이 필요한 이유

     * React를 최적화하는 것은 까다로울수 있음
     * 의도적으로 컴포넌트 props가 값이 아닌 참조로 비교된다는 것. 이렇게 해서 렌더링 실행 비용을 감소 시킴
     * 하지만, 이렇게 하면 불필요한 렌더링이 실수로 발생하기 쉬워 앱 속도가 느려질 수 있음
     * 수백명 개발자가 있는 대규모의 프로덕션 앱에서도 최적화가 어려운 경우가 많음 (GitHub, Twitter, Instagram 사례).

React Scan이 React Devtools보다 나은 점

     * React Devtools의 한계:
          + 범용 도구로 설계되어 있어, 불필요한 렌더와 필요한 렌더를 명확히 구분하지 못함.
          + 프로그래밍 가능한 API가 없어, 성능 디버깅의 자동화가 어려움.
     * React Devtools의 하이라이트 기능에 대한 개인적인 불만:
          + 렌더링 감지 지연: React Devtools는 렌더링을 배치로 처리하여 빠르게 렌더링되는 컴포넌트는 매 초 1번만 표시.
          + 박스 위치 업데이트 문제: 스크롤하거나 크기를 조정할 경우 박스 위치가 업데이트되지 않음.
          + 렌더링 횟수 표시 부족: 각 컴포넌트의 렌더링 횟수를 보여주지 않음.
          + 문제 렌더링 구분 어려움: 느리거나 비효율적인 렌더링을 확인하려면 직접 컴포넌트를 검사해야 함.
          + 사용자 경험 부족: 메뉴가 숨겨져 있어 기능을 켜고 끄기가 번거로움. 성능 디버깅에 적합한 UI 설계가 아님.
          + 프로그램 API 없음: 디버깅을 자동화하거나 고급 작업에 사용할 수 없음.
          + Chrome 확장에 국한: 웹 어디에서나 사용할 수 없고 브라우저 확장에 의존.
          + 주관적 디자인 문제: 박스 선이 흐릿하고 느리게 작동하는 느낌.
     * React Scan의 차별화된 점:
          + 성능 디버깅을 위해 설계된 전문 도구로, 불필요한 렌더를 명확히 식별.
          + 모든 플랫폼에서 사용 가능하며(웹, 스크립트, npm), 개발자 경험을 최적화.
          + Ambitious한 기능 로드맵으로, React Devtools를 넘어서는 가능성을 제공.

   보기 쉬워서 좋습니다.

   매우 적절한 사용례

   데모가 작은앱이라 그런지 몰라도, 반응속도가 빠르네요.
"
"https://news.hada.io/topic?id=17909","빌드 시스템 없이 프론트엔드 자바스크립트 라이브러리 가져오기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   빌드 시스템 없이 프론트엔드 자바스크립트 라이브러리 가져오기

     * 빌드 시스템 없이 자바스크립트를 작성하려면 라이브러리를 가져오는 과정이 복잡할 수 있음
     * 많은 라이브러리가 설정 방법에 대해 빌드 시스템 사용을 전제로 작성하기 때문
     * 이 글은 빌드 시스템 없이 자바스크립트 라이브러리를 사용하는 방법에 대해 다룸
          + 자바스크립트 라이브러리가 제공하는 세 가지 주요 파일 형식
          + 라이브러리의 빌드 파일에서 파일 형식을 확인하는 방법
          + 각 파일 형식을 가져오는 방법
"
"https://news.hada.io/topic?id=17913","태양 표면의 최고 해상도 이미지 포착","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          태양 표면의 최고 해상도 이미지 포착

  스마트 뉴스

    태양의 표면을 가장 높은 해상도로 촬영한 이미지

     * 유럽우주국(ESA)은 태양의 전체 가시 표면인 광구의 가장 높은 해상도 이미지를 포함한 네 장의 새로운 이미지를 공개함.
     * 각 이미지는 2023년 3월 22일 Solar Orbiter 임무에 의해 촬영된 25장의 고해상도 사진으로 구성된 모자이크임.
     * 이 우주선은 태양으로부터 4,600만 마일 이내에서 총 100장의 이미지를 촬영했으며, 각 사진을 찍기 위해 위치를 변경해야 했기 때문에 4시간 이상 소요됨.

    태양의 복잡한 상호작용 이해

     * NOAA의 우주 기상 예측 센터의 천체물리학자 Mark Miesch는 ""더 가까이 볼수록 더 많은 것을 볼 수 있다""고 말하며, 태양의 복잡한 자기장과 흐름을 이해하기 위해 이러한 고해상도 이미지가 중요하다고 설명함.
     * Solar Orbiter는 ESA와 NASA의 공동 임무로, 2020년 2월에 발사되어 그 해 7월 첫 이미지를 공개함.
     * 이 임무는 태양의 가장 가까운 이미지와 극지방의 첫 근접 이미지를 촬영하는 등 여러 이정표를 달성함.

    새로운 이미지의 세부 사항

     * 새로 공개된 이미지는 두 가지 장비로 촬영됨: Polarimetric and Helioseismic Imager (PHI)와 Extreme Ultraviolet Imager (EUI).
     * PHI는 가시광선 이미지, 자기장 방향 지도, 태양 표면의 속도 지도를 포함한 세 가지 이미지를 제공함.
     * EUI는 태양의 외부 대기인 코로나를 자외선으로 촬영함.

    태양의 자기장과 흐름

     * PHI의 새로운 고해상도 지도는 태양 표면의 자기장과 흐름을 자세히 보여줌.
     * 태양의 자기장은 태양의 동적 특성을 이해하는 데 핵심적인 요소임.
     * 가시광선 이미지는 태양의 뜨거운 플라즈마 표면을 보여주며, 이 층은 8,132~10,832도 화씨의 온도를 가짐.

    태양의 자기장과 속도 지도

     * 자기장 지도는 태양의 자기장이 강한 흑점에서 빨간색은 바깥쪽으로, 파란색은 안쪽으로 이동하는 것을 나타냄.
     * 속도 지도는 태양 표면의 일부가 Solar Orbiter 쪽으로 이동하는 것을 파란색으로, 멀어지는 것을 빨간색으로 표시함.

    태양의 코로나

     * EUI의 자외선 이미지는 태양의 코로나를 보여주며, 흑점 주변의 플라즈마가 자기장 선을 따라 바깥쪽으로 발사되는 활동을 나타냄.
     * ESA 전문가들은 앞으로 더 빠르게 유사한 이미지를 제작할 수 있을 것으로 기대함.

    과학적 중요성

     * ESA의 과학 책임자 Günther Hasinger는 이 임무가 과학에 매우 중요한 보물이라고 설명함.

        Hacker News 의견

     * 링크를 통해 태양의 다양한 이미지 파일을 다운로드할 수 있음
          + 가시광선, 자기장, 속도 지도, 자외선 이미지 포함
     * ESA 웹사이트에서 태양의 전체 표면을 보여주는 확대 가능한 이미지 제공
     * Andrew McCarthy와 Jason Guenzel이 촬영한 태양의 가장 멋진 이미지로 평가받음
     * 고급 생명체가 별 내부에 숨을 가능성에 대한 궁금증 제기
          + 에너지가 풍부하고 덜 발달된 생명체가 방해할 가능성이 낮음
     * 태양의 과정은 규모와 폭력성이 놀라울 정도로 큼
          + 4,300만 km 떨어진 곳에서 1제곱미터당 20kW의 에너지를 방출함
     * 직접 태양을 보지 않으려는 이유는 눈을 보호하기 위함
     * 가시광선으로 본 태양 이미지의 중앙에 있는 #에 대한 의문
          + 물리적 현상인지 사진의 인공물인지 궁금증 제기
     * 태양은 큰 주황색 공으로 묘사됨
     * 우주선이 각 사진을 찍기 위해 위치를 변경해야 했기 때문에 과정이 4시간 이상 소요됨
          + 최종 모자이크에서 태양의 직경은 거의 8,000 픽셀에 달함
          + 수동 슈퍼샘플링과 유사한 방식으로 추측됨
     * 우주 사진이 웹 페이지 갤러리에서만 확대 가능한 형식으로 표시되어 배경화면으로 사용하기 어려움
"
"https://news.hada.io/topic?id=17971","런치 HN: Human Layer (YC F24) – AI 시스템을 위한 인간 참여 API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           런치 HN: Human Layer (YC F24) – AI 시스템을 위한 인간 참여 API

     * HumanLayer 소개
          + HumanLayer는 AI 에이전트가 인간과 상호작용하여 피드백, 입력, 승인 등을 받을 수 있게 하는 API임.
          + 안전한 자율 AI 시스템의 배포를 지원하며, Python 및 TypeScript SDK를 통해 쉽게 시작할 수 있음.
          + 무료 체험과 투명한 사용 기반 가격 정책을 제공함.
     * AI 시스템의 위험성 관리
          + AI 시스템의 위험성을 줄이기 위해 인간의 개입이 필요한 경우를 지원함.
          + 데이터 팀을 위한 AI 에이전트를 개발하면서 시작되었으며, 고객들이 AI 에이전트가 직접 프로덕션 시스템에 접근하는 것을 꺼려했음.
          + 기본적인 승인 흐름을 구축하여 AI가 중요한 작업을 수행하기 전에 인간의 승인을 받도록 함.
     * HumanLayer의 기능
          + HumanLayer SDK를 통합하면 AI 에이전트가 실행 중 언제든지 인간의 승인을 요청할 수 있음.
          + 요청을 적절한 사람에게 전달하고, 응답을 기다리는 동안 상태를 관리하며, 완전한 감사 추적을 제공함.
          + ""승인 요청"" 외에도, LLM이나 에이전트 프레임워크에 노출될 수 있는 ""인간을 도구로"" 기능을 지원함.
     * HumanLayer의 활용 사례
          + AI SDR가 개인화된 판매 이메일을 작성하고, 발송 전에 Slack에서 인간의 승인을 받음.
          + AI 뉴스레터에서 구독자와 이메일 대화를 진행하며, HumanLayer가 수신 이메일을 에이전트에게 라우팅하고 응답 도구를 제공함.
          + 고객 대상 DevOps 에이전트를 구축하여 PR 검토, DB 마이그레이션 계획 및 실행 시 인간의 승인을 받음.
     * 가격 정책 및 지원
          + 무료 티어와 유연한 크레딧 기반 가격 정책을 제공함.
          + 고객 대상 에이전트를 구축하는 팀에게는 화이트라벨링, 추가 기능 및 우선 지원을 제공함.
     * 추가 정보
          + HumanLayer를 시스템에 통합하려면 문서를 참조하거나 데모 예약을 통해 확인할 수 있음.
          + 초기 단계에 있으며, 에이전트, 신뢰성, 인간+AI 작업 부하 균형에 대한 아이디어와 경험을 환영함.

        Hacker News 의견

     * 스타트업 소유자가 AI를 활용하여 내부 서비스를 DIY로 만들고자 하는 의견이 있음. SAAS를 활용하는 것이 더 좋다고 생각하지만, 가격이 비싸고 복잡하지 않음. 경쟁이 생기면 가격이 하락할 것이라고 봄
     * AI 서비스의 높은 비용에 대한 우려가 있으며, 무료 크레딧 제공이나 가격 조정이 필요하다는 의견이 있음
     * 자동화 편향과 자동화 태만에 대한 우려가 있으며, 인간이 AI의 결정을 무비판적으로 승인할 수 있는 위험이 있음
     * AI 에이전트가 할 수 없는 일을 대신할 인간 대리인을 활용하는 아이디어가 제안됨
     * 비동기적이거나 장기 실행 도구 호출을 처리하는 프레임워크의 문제점이 지적됨. 이를 해결하기 위한 아이디어가 있지만, 다른 글에서 다룰 예정임
     * API 위에 머무르기 위한 노력이 필요하다는 의견이 있음
     * AI의 초기 단계에서 인간이 논리를 수행했으며, 이후 인간을 제거하면서 품질이 저하되었다는 의견이 있음. 이를 해결하기 위해 제3자 회사가 인간을 다시 투입하는 것이 일시적인 해결책이라는 비유가 있음
     * 스타트업에서 인간의 개입을 중요시하며, LLM 기반의 잠재력을 실제 가치로 전환하기 위해 통제와 감독이 필요하다고 봄. 이를 위해 맞춤형 워크플로우와 수동 프로세스를 구축했음
     * 기본적인 입출력 기능을 제공하는 서비스가 이미 많은 시스템에서 가능하다는 의견이 있음. 직접 구현하기 전에 시도해볼 가치가 있다고 봄
     * 의료기기 회사에서 워크플로우 에이전트로 AI를 고려 중이며, ISO13485 품질 보증 프로세스를 지원하기 위해 LLM을 활용할 계획임. 다른 HN 사용자들의 의견을 듣고 싶어함
"
"https://news.hada.io/topic?id=17882","Z-Library, 학생들의 학문적 빈곤 극복에 도움, 연구 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Z-Library, 학생들의 학문적 빈곤 극복에 도움, 연구 결과

     * 최근 연구는 Z-Library 사용 동기에 대해 조사함. 비싼 책과 제한된 학문적 자료 접근이 주요 요인으로 나타남. 특히 중국 대학원생들은 그림자 도서관이 학문적 빈곤을 극복하는 데 도움을 준다고 믿음. Z-Library는 인터넷에서 가장 큰 그림자 도서관 중 하나로, 수백만 권의 책과 학술 기사를 무료로 다운로드할 수 있음.
     * Z-Library는 지난 2년 동안 미국의 전면적인 형사 기소에도 불구하고 운영을 계속함. 두 명의 러시아인 피고가 아르헨티나에서 체포되었으나, 최근 정보에 따르면 가택 연금에서 탈출하여 행방이 묘연해짐. 이들의 역할은 명확하지 않으나, 사이트의 생존에 필수적이지 않았음.

Z-Library 동기 연구

     * Z-Library 사용자들은 형사 기소에도 불구하고 사이트를 계속 지원하고 사용함. 많은 사람들에게 Z-Library는 무료 책을 다운로드할 수 있는 편리한 포털임. 다른 이들에게는 학문적 경력을 발전시키는 데 필수적인 자원임.
     * 연구는 Reddit 사용자와 중국 대학원생의 동기를 조사함. 두 그룹의 차이가 큼에도 불구하고, Z-Library에 대한 견해는 유사함.

Reddit 사용자들의 반응

     * 134개의 Reddit 응답은 Zlibrary 서브레딧에서 샘플링되었으며, 사이트에 유리하게 편향되어 있음. 그러나 단순히 ""무료 물건을 원한다""는 이유를 넘어서는 이유가 있음.
     * 많은 댓글 작성자들은 빈곤 때문에 사이트에 끌렸다고 강조함. Z-Library는 학문적 목표를 달성하기 위한 필수 도구로 여겨짐.
     * 무료로 모든 학습 자료에 접근할 수 없는 것, 특히 대학 도서관의 학술 저널 구독이 주요 동기임. 저널 출판사가 저자에게 보상하지 않고 막대한 수익을 올린다는 인식이 '해적' 대안을 정당화함.

중국 학생들

     * 연구의 두 번째 부분은 중국의 103명의 대학원생을 대상으로 한 구조화된 형식으로 진행됨. 이 그룹은 Z-Library와 단속에 대해 논의하는 세미나에 참여함. 학생들은 그림자 도서관의 (일시적) 폐쇄가 학습과 학위 학습 자료 찾기에 영향을 미쳤다고 응답함.
     * 학생들은 Z-Library와 유사 사이트에 대해 긍정적인 견해를 가지고 있으며, 71%는 과거에 그림자 도서관을 사용한 적이 있다고 인정함. 지식에 대한 접근은 모두에게 무료여야 한다는 의견이 대다수임.
     * 학생들은 저작권법을 알고 있지만, 지식 접근의 필요성이 권리 소유자의 우려보다 중요하다고 믿음.

로빈 후드 정신

     * 연구는 그림자 도서관 사용의 주요 동기에 대해 흥미로운 통찰을 제공함. 그러나 작은 표본 크기와 선택 편향, 그룹의 특정 특성 때문에 이러한 결과는 신중하게 해석해야 함.
     * Dr. Michael Day는 응답이 로빈 후드 정신의 명확한 징후를 보여준다고 언급함. Z-Library 사용자는 출판사의 '지식 세금'을 피하고 무료로 작품을 다운로드함.
     * 연구는 대학과 출판사가 현 상태를 재고하고 더 많은 콘텐츠를 무료로 접근할 수 있도록 고려해야 한다고 제안함. 연구는 Creative Commons 라이선스 하에 출판되어 모두에게 무료로 접근 가능함.

        Hacker News 의견

     * 첫 회사에서 앱이 불법 Play Store 버전으로 배포되었고, IAP가 무료로 제공되었음. 이를 막기 위해 노력했지만, 결과적으로 사용자에게 부정적인 영향을 미치는 버그가 발생하고 Play Store 순위에도 악영향을 미쳤음. CEO와의 회의에서 무료 버전 차단이 긍정적인 영향을 주지 않았음을 깨달았음.
     * 28년 전, 그래픽 디자인, 기본 개발, 서버 관리 등을 독학했으며, 상업 소프트웨어를 불법으로 다운로드하여 사용했음. 현재는 오픈 소스가 상업 소프트웨어를 대체했으며, 여전히 원하는 것을 얻을 수 있음.
     * 대학 수업에서 추천 도서의 PDF를 다운로드하여 사용함. 유용한 책은 실제로 구매하여 책장에 두고, 필요 없는 책은 구매하지 않음. 이러한 그림자 도서관은 책을 '데모' 버전처럼 사용하게 해줌.
     * Annas Archive가 요즘 더 인기를 끌고 있으며, 이러한 그림자 도서관은 많은 온라인 서점보다 더 나은 사용자 경험을 제공함.
     * VirusTotal에서 5개의 다른 벤더가 Z-Library를 악성으로 표시함. 이는 IP 문제 때문인지, 사이트에 실제로 악성 소프트웨어가 있는지 궁금함.
     * Aaron Swartz를 잊지 말아야 함.
     * 학생들이 '로빈 후드'와 비교하는 경향이 있다는 연구 결과가 흥미로움. 이는 디지털 미디어에서 정직한 소비자가 항의하는 강력한 방법 중 하나로 해석될 수 있음. 해적판은 주로 선의의 사람들이 사용한다고 가정함.
     * Z-Library와 같은 웹사이트가 빈곤층 학생들에게 도움이 된다는 의견이 82%임. 18%의 반대 의견이 궁금하며, 이는 저자들이 책을 쓰지 않게 되어 모든 학생에게 해가 될 것이라는 가설적 시나리오 때문인지 궁금함.
     * Z-library의 존재를 알게 된 날을 잊지 못함. 교수님이 추천한 교재를 Amazon에서 찾았을 때, 교수님이 Z-library를 보여주셨음.
     * 학술 교재는 학생들에게 강요되는 경우가 많으며, 졸업 후 보관하고 싶지 않은 책임. 출판 산업의 빠른 에디션 전환으로 인해 학생들에게 부담을 줌. 현재는 LLM을 사용하여 독창적인 문제 세트를 쉽게 만들 수 있음. 학생들은 LLM을 사용하여 문제를 해결할 것이므로, 수업 내 퀴즈 세션이 일반화될 가능성이 있음.
"
"https://news.hada.io/topic?id=17939","2024 데이터 엔지니어링 진입 로드맵","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2024 데이터 엔지니어링 진입 로드맵

     * 데이터 엔지니어링 취업은 복잡한 기술 생태계(예: Spark, Flink, Iceberg, BigQuery 등)로 인해 어렵게 느껴질 수 있음
     * 단순히 Python과 SQL을 배우는 것만으로는 충분하지 않으며, 체계적인 전략과 실습이 필요

  데이터 엔지니어링 취업에 필요한 요소

    1. 기술 역량:
          + SQL 및 Python 숙련
          + 분산 컴퓨팅 기술(Snowflake, Spark, BigQuery 중 하나 이상)
          + 오케스트레이션 도구(Airflow, Mage, Databricks Workflows 등) 이해
          + 데이터 모델링 및 데이터 품질 관리 능력
    2. 포트폴리오 프로젝트:
          + 실제 기술을 보여줄 수 있는 프로젝트 제작
    3. 개인 브랜딩:
          + LinkedIn 프로필 관리 및 인터뷰 준비를 통해 전문성 강조

  SQL 학습 및 숙련

     * SQL은 데이터 엔지니어링의 필수 언어:
          + 추천 학습 리소스:
               o DataExpert.io
               o DataLemur
               o StrataScratch
          + 핵심 개념:
               o JOIN 유형: INNER, LEFT, FULL OUTER (RIGHT JOIN은 거의 사용하지 않음)
               o GROUP BY를 통한 집계 및 DISTINCT 활용
               o 윈도우 함수와 RANK, DENSE_RANK, ROW_NUMBER의 차이 이해
               o SQL 분산 환경에서의 키워드와 셔플(예: JOIN, GROUP BY, ORDER BY) 이해
               o CTE(Common Table Expression), Temp Table, View의 활용

  Python 및 Scala 학습

     * 언어 선택:
          + 초보자는 Python, 경험자는 Scala 추천.
     * 중요한 개념:
          + 데이터 구조: 리스트, 딕셔너리, 스택 등
          + 알고리즘: 반복문, 이진 검색, Big O 표기법 이해
          + Python의 주요 활용:
               o Airflow DAG 작성
               o REST API와 상호작용
               o Spark UDF 작성 및 성능 최적화

  분산 컴퓨팅 개념

     * 분산 컴퓨팅의 핵심:
          + 데이터 처리량을 분산시키는 Hadoop/Spark 기반 아키텍처 이해
          + 셔플과 스큐(skew) 문제 관리:
               o Broadcast JOIN, Bucket JOIN, 파티셔닝 활용
               o Spark 3+에서의 적응형 실행 사용
     * 출력 데이터 관리:
          + Parquet 파일의 런 렝스 압축(run length encoding)을 활용해 파일 크기 최적화

  데이터 품질 및 사용성 확보

    1. 데이터 품질:
          + 중복 제거, NULL 값 점검, 적절한 형식 및 데이터 양 확인
          + 데이터 파이프라인에 Great Expectations 같은 도구로 품질 검증 추가
    2. 사용성:
          + 적절한 문서화와 사전 사양 협의
          + 데이터 모델링 방식:
               o 관계형, Dimensional(Kimball), One Big Table 각각의 장단점 이해
    3. 개인정보 준수:
          + 개인 식별 정보(PII)의 익명화 및 데이터 보관 기간 최소화

  포트폴리오 프로젝트 제작

     * 효과적인 프로젝트 특징:
          + 개인적으로 관심 있는 주제 선택
          + 프론트엔드와 연계된 프로젝트 제작 (예: Tableau, Power BI)
          + 최신 기술(Spark, Snowflake, Delta Lake 등) 적용
          + 프로덕션 환경에서 실행되는 파이프라인 구현

  개인 브랜딩 및 인터뷰 준비

    1. LinkedIn 활용:
          + 채용 관리자, 동료와 네트워킹 구축
          + 학습 여정을 공유하며 인지도를 높임
    2. 인터뷰 준비:
          + 인터뷰어 및 회사 배경 조사
          + 질문에 차분하고 긍정적으로 대응
          + 기술 및 직무에 대한 호기심과 열정 전달

  결론

     * 2024년 데이터 엔지니어링 취업은 어려운 시장 상황에서도 체계적인 전략을 통해 접근 가능
     * 위 로드맵을 따라가면 목표하는 데이터 엔지니어링 직업에 더 가까워질 것

   스칼라가 진짜 좋은 언어인데, 점점 Spark 외에는 쓰임새를 잃어가는 것 같아서 안타까워요
"
"https://news.hada.io/topic?id=17920","Synapse 핀테크 위기로 수천 명 미국인들의 저축이 증발됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Synapse 핀테크 위기로 수천 명 미국인들의 저축이 증발됨

     * Synapse라는 핀테크 중개업체의 붕괴로 인해 수천 명의 미국인들이 저축 계좌에서 거의 아무것도 받지 못하게 됨
     * 고객들은 계좌가 미국 정부의 신용으로 뒷받침된다고 믿었음
     * Yotta라는 핀테크에서만 13,725명의 고객이 6,490만 달러를 예치했지만, 1,180만 달러만 제안받고 있음
     * 위기의 시작과 진행
          + Synapse와 Evolve Bank 간의 고객 잔액에 대한 분쟁이 5월에 시작되었고, Synapse는 거래를 처리하는 시스템 접근을 차단함
          + Synapse의 파산 후, 법원에서 임명한 신탁 관리인은 최대 9,600만 달러의 고객 자금이 사라졌다고 발견함
          + Synapse는 외부 회사를 고용할 자금이 없어 자금의 행방을 밝히지 못하고 있음
     * 고객의 피해와 대응
          + 고객들은 Synapse를 통해 제공된 계좌가 FDIC 보험에 가입되어 있다고 믿었음
          + Zach Jacobs는 94,000달러 이상을 잃고, 피해자 그룹을 조직하여 언론과 정치인들의 관심을 끌고자 함
          + 일부 고객은 예치금의 극히 일부만 돌려받고 있으며, 많은 사람들이 법적 대응을 고려 중임
     * 규제 기관의 역할과 대응
          + FDIC는 Synapse와 같은 비은행의 실패에 대해 보험이 적용되지 않는다고 명확히 함
          + 연방준비제도는 Evolve의 고객 자금 반환을 모니터링할 것이라고 발표함
          + FDIC는 핀테크 앱 고객을 위한 은행 기록 보관을 강화하는 새로운 규칙을 제안함
     * 법적 절차와 결과
          + Evolve는 고객 자금의 일부만 반환할 수 있었으며, 나머지 자금의 위치는 확인되지 않음
          + 법원은 피해자들이 자신들의 상황을 공개적으로 알릴 수 있는 기회를 제공함
          + 협력이 이루어지지 않으면 문제가 해결되지 않을 것이라는 우려가 제기됨
     * 결론
          + Synapse 위기는 핀테크와 전통 은행 간의 관계에서 발생할 수 있는 위험을 보여줌
          + 고객들은 자신들의 자금이 안전하다고 믿었으나, 중개업체의 붕괴로 인해 큰 손실을 입음
          + 규제 기관과 법원이 문제 해결을 위해 노력하고 있으나, 아직 명확한 해결책은 나오지 않음

        Hacker News 의견

     * Yotta 웹사이트는 온라인 도박 사이트처럼 보이며, 신뢰할 수 없는 느낌을 줌. 평균 연간 저축 보상률이 2.70%라고 주장하지만, 실제 주요 미국 은행에서는 4.65%를 제공받았음
          + 페이지 하단의 약관에 따르면, 이 보상률은 매일 밤 숫자 맞추기 확률에 기반한 통계적 추정치이며, 회원의 운에 따라 달라질 수 있음
     * 비은행 핀테크가 고객의 돈을 은행에 예치하고 FDIC 보험이 적용된다고 알렸으나, 실제로는 돈을 은행 밖으로 이동시켜 보험이 적용되지 않음
          + Evolve 은행은 모든 기록을 가지고 있어 이를 증명할 수 있으며, 만약 사실이라면 핀테크의 명백한 사기임
     * Synapse/Yotta의 사기 가능성이 높으며, 돈이 어디로 갔는지 불분명함
          + 위험한 투자가 없었고, 은행도 파산하지 않았음
     * 문제는 돈이 사라진 것이 아니라, Synapse만이 자금 분배를 조정할 수 있는 상황임
          + 대량의 자금 이체가 최종 채권자를 식별하지 않았다는 점이 문제임
     * Synapse의 파산 후, 법원에서 임명한 수탁자가 최대 9,600만 달러의 고객 자금이 사라졌음을 발견했으며, 여전히 해결되지 않음
     * 규제 기관이 행동하지 않으면, 유사한 사기가 반복될 가능성이 있으며, 이는 새로운 은행에 대한 신뢰 상실로 이어질 수 있음
     * 대량의 돈이 사라지는 것은 누군가가 원하지 않는 한 불가능하며, 법무부가 형사 조치를 취하지 않는 이유가 궁금함
     * Yotta 웹사이트에 ""YCombinator 지원""이라는 문구가 있음
     * Peerstreet 파산 사례를 참고할 수 있으며, FDIC 보험이 도움이 되지 않았음
     * 최근 사기성 있는 YC 스타트업이 증가하고 있음
"
"https://news.hada.io/topic?id=17935","마셜 브레인 사망 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              마셜 브레인 사망 소식

     * NC State 교수이자 웹사이트 창립자 Marshall Brain 사망
          + North Carolina State University의 교수이자 인기 웹사이트 ""How Stuff Works""의 창립자인 Marshall Brain이 사망함.
          + Brain은 N.C. State의 센테니얼 캠퍼스에 있는 자신의 사무실에서 수요일에 사망함.
          + 대학 측은 사망과 관련된 세부 사항을 확인하지 않았으나, Brain과 가까운 소식통에 따르면 자살로 사망한 것으로 전해짐.
          + N.C. State 경찰은 더 이상 조사하지 않으며, 범죄 혐의는 없는 것으로 보고 있음.
          + Brain은 WRAL.com에 여러 기사를 기고했으며, ""The Doomsday Book: The Science Behind Humanity’s Greatest Threats""의 저자임.
     * 도움 받기: NC의 정신 건강 및 위기 자원 안내
          + 자살 충동이나 정신 건강 위기를 겪고 있다면, 988로 전화하거나 문자 메시지를 보내거나 National Suicide Prevention Lifeline에 800-273-8255로 전화할 수 있음.
          + 군인은 988로 전화한 후 ""1""을 눌러 Veterans Crisis Lifeline에 직접 연결할 수 있음. 문자의 경우, 군인은 Veterans Crisis Lifeline 단축 코드 838255로 계속 문자 메시지를 보낼 수 있음.

        Hacker News 의견

     * Marshall Brain의 작품은 많은 사람들에게 큰 영향을 미쳤음. 특히 'Manna' 이야기는 여러 번 언급되었으며, 그의 웹사이트 ""Why Won't God Heal Amputees""는 기독교 근본주의자들에게 중요한 내용을 담고 있음
          + 이 웹사이트는 기적에 대한 잘못된 주장들을 폭로하며, 신의 약속이 인간에게 정직하게 지켜지지 않는다는 사실을 직시하게 함
          + 'Manna'는 두 사회를 대조하는데, 하나는 AI가 중산층을 대체하는 디스토피아이고, 다른 하나는 기술을 통해 개인의 자유를 증진시키는 사회임
     * Howstuffworks는 2000년대 초반에 매우 유용한 웹사이트였으며, 다양한 기계 및 과학 장비에 대한 명확한 설명을 제공했음
          + 현재는 SEO 스팸과 불필요한 콘텐츠로 가득 차 있음
          + Marshall Brain의 기여에 감사하며, 그의 사망을 애도함
     * Marshall Brain은 대학 시절 멘토였으며, 그의 헌신과 기업가 정신에 대한 사랑은 많은 학생들에게 영감을 주었음
          + 그의 가르침 덕분에 자신의 회사를 소유하게 되었으며, 그의 사망 소식은 비극적임
     * Marshall Brain은 'Manna'라는 SF 이야기를 썼으며, 이는 오랫동안 기억에 남음
     * Howstuffworks.com은 개인의 프로그래밍 관심에 큰 영향을 미쳤으며, HTML을 처음 배울 때 중요한 자원이었음
          + 긍정적인 경험 덕분에 프로그래밍을 계속할 수 있었음
     * Howstuffworks 웹사이트가 판매되었을 때, Marshall Brain이 부당한 대우를 받았다고 느껴짐
          + 그의 Win32 API 책은 Windows 프로그래밍에 대한 첫 번째 소개였으며, 그의 사망은 큰 손실임
     * 최근 그의 웹사이트와 서브레딧에 디스토피아적 콘텐츠가 많았으며, 사회의 방향에 대해 절망감을 느꼈던 것으로 보임
"
"https://news.hada.io/topic?id=17927","약 100줄의 Bash로 구현된 Docker, Bocker (2015)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                약 100줄의 Bash로 구현된 Docker, Bocker (2015)

     * Bocker
          + Bocker는 약 100줄의 bash로 구현된 Docker의 간단한 버전임.
     * Prerequisites
          + Bocker를 실행하기 위해 필요한 패키지:
               o btrfs-progs
               o curl
               o iproute2
               o iptables
               o libcgroup-tools
               o util-linux >= 2.25.2
               o coreutils >= 7.5
          + 시스템 설정 요구 사항:
               o /var/bocker에 btrfs 파일 시스템 마운트
               o bridge0라는 네트워크 브리지와 10.0.0.1/24 IP
               o /proc/sys/net/ipv4/ip_forward에서 IP 포워딩 활성화
               o bridge0에서 물리적 인터페이스로의 트래픽 라우팅을 위한 방화벽
          + Vagrantfile을 사용하여 필요한 환경을 구축할 수 있음.
          + Bocker는 루트 권한으로 실행되며 네트워크 인터페이스, 라우팅 테이블, 방화벽 규칙을 변경하므로 가상 머신에서 실행하는 것이 좋음.
     * Example Usage
          + Bocker의 사용 예시:
               o bocker pull centos 7 명령어로 CentOS 7 이미지를 가져옴.
               o bocker images로 이미지 목록 확인 가능.
               o bocker run img_42150 cat /etc/centos-release로 컨테이너에서 명령어 실행 가능.
               o bocker ps로 실행 중인 컨테이너 확인 가능.
               o bocker logs ps_42045로 컨테이너 로그 확인 가능.
               o bocker rm ps_42045로 컨테이너 삭제 가능.
               o bocker run img_42150 yum install -y wget로 패키지 설치 가능.
               o bocker commit ps_42018 img_42150로 컨테이너 변경 사항 커밋 가능.
               o CPU 및 메모리 제한 설정 가능.
     * Functionality: Currently Implemented
          + 현재 구현된 기능:
               o docker build의 제한적 구현
               o docker pull
               o docker images
               o docker ps
               o docker run
               o docker exec
               o docker logs
               o docker commit
               o docker rm / docker rmi
               o 네트워킹
               o 쿼터 지원 / CGroups
     * Functionality: Not Yet Implemented
          + 아직 구현되지 않은 기능:
               o 데이터 볼륨 컨테이너
               o 데이터 볼륨
               o 포트 포워딩
     * License
          + 이 프로그램은 GNU General Public License에 따라 배포되는 자유 소프트웨어임.
          + 상업성이나 특정 목적에 대한 적합성에 대한 보증은 없음.

        Hacker News 의견

     * proot를 사용하여 Bag이라는 프로젝트를 만들었음. 이는 Docker 대안이 아니며 cgroups와 관련이 없고, CLI도 Docker와 다름. 인터넷 검열을 우회하기 위해 프록시 체인 솔루션을 개발했으며, 이를 termux에서 실행하고자 했음. 당시 termux에는 jdk/jre가 없었고, proot를 통해 archlinux 환경을 생성하여 jdk를 사용할 수 있었음. 이 환경은 다양한 작업에 적합했으며, bag.sh라는 스크립트를 통해 자동화된 환경 생성 및 명령 실행을 가능하게 했음. 이 스크립트는 5년 동안 업데이트되지 않은 로드맵을 가지고 있음
     * 최소한의 bash 스크립트를 좋아하며, 10년 전 해커톤에서 Docker, Mesos 등을 사용한 분산 인프라를 홍보하기 위해 40줄의 bash로 intra-cluster 로드 밸런서를 구현한 적이 있음. 또한, colo-to-cloud 전송 도구를 개발했으나 현재는 잃어버린 상태임. Shell Fu 등에서 유용한 스크립트 모음을 찾을 수 있음
     * 저장소에 ""아직 구현되지 않음"", ""할 일"", ""작업 중""이라는 메시지가 있고 마지막 커밋이 몇 년 전인 경우가 좋음. 이는 본인이 코드에서 놓친 할 일 목록을 다시 돌아보지 않아도 된다는 안도감을 줌
     * lazydocker가 Docker Desktop의 훌륭한 대안으로 언급되지 않은 것이 놀라움. 이는 ssh를 통해 실행되는 꽤 완전한 기능의 터미널 UI임
     * BastilleBSD는 BSD에서 jails를 관리하는 도구로, Docker에서 찾을 수 있는 많은 구조를 사용함. BSD의 다른 jail 관리 소프트웨어보다 의존성이 적어 선호함
     * 실용성을 떠나 구현에서 배울 점이 많음
     * GitHub 홈페이지 링크가 깨져 있으니 ""www.""를 제거해야 함
     * Docker의 간단한 재구현이 가능하다는 점이 Docker 회사가 직면한 가장 큰 문제임. Docker의 진정한 가치는 Docker Hub뿐만 아니라 Windows와 Mac용 Docker에서 제공하는 통합 경험에 있음. 이는 VirtualBox와 Vagrant를 수동으로 설정하는 것보다 훨씬 우수한 경험을 제공함
     * Docker가 어떻게 시작되었는지에 대한 의문
     * Docker가 아직 ubuntu/debian 저장소에 포함되지 않은 이유에 대한 의문. 이는 쉬운 순이익이 될 것임
"
"https://news.hada.io/topic?id=17881","Niantic, 포켓몬 고 플레이어 데이터를 기반으로 훈련된 "Large Geospatial Model" 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Niantic, 포켓몬 고 플레이어 데이터를 기반으로 훈련된 ""Large Geospatial Model"" 발표

     * Niantic은 대규모 기계 학습을 활용하여 장면을 이해하고 전 세계 수백만 개의 다른 장면과 연결하는 대규모 지리 공간 모델(LGM)을 개발 중
     * 인간은 공간 이해력을 통해 구조물을 다양한 각도에서 상상할 수 있지만, 기계에게는 어려운 과제
     * Niantic의 Visual Positioning System(VPS)은 50억 개 이상의 뉴럴 네트워크를 훈련하여 100만 개 이상의 위치에서 작동 가능하게 함
     * 대규모 지리 공간 모델이란?
          + LGM은 컴퓨터가 물리적 세계를 인식하고 이해하며 탐색할 수 있도록 도와줌
          + LLM과 유사하게, LGM은 방대한 양의 원시 데이터를 사용하여 구축되며, 이는 공간, 구조 및 물리적 상호작용에 대한 위치 기반 이해를 가능하게 함
          + 3D 비전 모델을 넘어서는 지리 공간 모델은 특정 지리적 위치에 뿌리를 두고 있으며, 정밀한 척도 단위로 측정 가능함
     * Niantic의 작업 현황
          + 지난 5년간 Niantic은 VPS를 구축하여 사용자가 물리적 환경에 디지털 콘텐츠를 정확하게 배치할 수 있도록 함
          + VPS는 사용자 스캔을 통해 구축되며, 이는 보행자 관점에서 수집된 데이터로, 자동차로 접근할 수 없는 장소를 포함함
          + 현재 전 세계 1천만 개의 스캔된 위치가 있으며, 매주 100만 개의 새로운 스캔을 수집함
     * 지역 시스템에서 공유 이해로
          + 현재의 뉴럴 맵은 사용 가능한 지리 공간 모델이지만, LGM은 독립적인 지역 맵을 넘어서는 비전을 가지고 있음
          + LGM은 지역 모델 간의 데이터 공유를 가능하게 하며, 특정 위치에서 건물의 뒷모습을 추론할 수 있음
          + 이는 지리 공간 및 시각적 데이터를 기반으로 한 중앙 집중식 세계 이해를 구현함
     * 인간과 같은 이해
          + 인간은 본 것을 다른 각도에서도 인식할 수 있는 능력을 가짐
          + 이러한 이해는 대규모 기계 학습을 통해서만 현실적으로 달성 가능하며, Niantic은 이를 목표로 함
     * 보완적인 기초 모델로의 발전
          + LGM은 단순한 위치 지정 이상의 용도로 사용될 수 있으며, 장면 표현, 조작 및 생성의 새로운 방법을 가능하게 함
          + 다양한 유형의 기초 모델이 서로를 보완하며, 이러한 시스템은 물리적 세계를 인식하고 이해하며 작동할 수 있게 함
          + Niantic은 대규모 지리 공간 모델 개발을 선도하여 사용자에게 새로운 경험을 제공하는 것을 목표로 함

        Hacker News 의견

     * 포켓몬 GO 플레이어로서, 게임을 통해 훈련 데이터를 제공하게 되어 그들이 내 노동으로 이익을 얻는 것 같음. 포케스탑을 스캔하는 작업은 보상에 비해 노력이 크기 때문에 중단했음. 만약 그들이 모델과 가중치를 공개한다면, 더 큰 공익에 기여했다고 느낄 것임.
     * 포켓몬 GO의 AR 기술이 느려서 잘 사용하지 않았는데, 이제는 LGM 훈련에 사용될 정도로 발전했다는 것이 놀라움. 경제적으로도 플레이어는 무료 게임을 얻고, Niantic은 수익을 얻으며, 새로운 기술이 세상에 제공됨.
     * MyFitnessPal에서는 사용자가 바코드를 스캔할 때 배경 소음을 수집하여 훈련 데이터로 사용함. 이를 통해 평균적인 식료품 저장소, 냉장고, 슈퍼마켓 통로에 대한 정보를 얻을 수 있음.
     * 이 블로그 게시물과 HN의 반응이 혼란스러움. 실제로 모델을 훈련한 것이 아니라 계획을 발표한 것임. 5천만 개의 신경망을 훈련했다고 하지만, 이는 기존에 하던 일의 일부일 뿐임. Niantic을 AI 회사로 포지셔닝하려는 비전 문서로 보임.
     * 지리 공간 데이터가 공공재로 되어야 한다는 철학적 의견이 있음. 군중 소싱된 데이터는 일반 사람들로부터 온 것이므로, 지식과 사실은 공공의 자산이 되어야 한다고 생각함.
     * 3D 장면을 실시간으로 생성하는 것이 미래의 지도라고 생각하지 않음. 건물, 도로, 표지판 등은 매우 정적이며, 대부분의 사용 사례에 큰 변화가 없음. 정확한 모델을 클라우드에서 가져오는 것이 더 유용할 것임.
     * Google/Niantic의 회의에서 군중 소싱을 통해 새로운 세대의 3D 모델을 구축하자는 아이디어가 나왔을 것임. 포켓몬 권리를 구매하여 이를 실현함.
     * Brian Maclendon(Niantic)이 Bellingfest 발표에서 이에 대한 흥미로운 세부 사항을 제시함.
     * LGM이 무엇인지 이해하기 어려움. 지리 공간 데이터가 아닌 건물의 뒷면을 예측하는 비전 모델 개선에 관한 것 같음. 훈련 데이터는 포켓몬을 잡을 때 생성된 이미지에서 온 것임.
     * CIA가 이미 접근할 수 있을 것이라는 의견이 있음. 몇 년 전부터 프라이버시 우려가 제기되었음.
"
"https://news.hada.io/topic?id=17917","퀘이크 3 소스 코드 리뷰: 네트워크 모델 (2012)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     퀘이크 3 소스 코드 리뷰: 네트워크 모델 (2012)

  네트워크 모델

     * Quake 3의 네트워크 모델은 엔진의 가장 우아한 부분으로, 빠른 환경에서는 첫 전송에서 수신되지 않은 정보는 다시 전송할 가치가 없음을 강조함.
     * UDP/IP를 사용하며, TCP/IP의 신뢰성 있는 전송은 지연을 초래하여 사용하지 않음.
     * 네트워크 스택은 두 가지 상호 배타적인 계층으로 확장됨: 사전 공유 키를 사용한 암호화와 사전 계산된 허프만 키를 사용한 압축.
     * 서버 측에서 UDP 데이터그램의 크기를 최소화하면서 UDP의 신뢰성 부족을 보완하는 시스템이 돋보임.

  아키텍처

     * 클라이언트 측은 간단하며, 각 프레임마다 서버에 명령을 보내고 게임 상태 업데이트를 받음.
     * 서버는 마스터 게임 상태를 각 클라이언트에 전파해야 하며, UDP 패킷 손실을 고려해야 함.
     * 세 가지 주요 요소: 마스터 게임 상태, 클라이언트의 명령을 Netchannel을 통해 전송, 32개의 최근 게임 상태를 순환 배열로 저장하는 스냅샷.

  스냅샷 시스템

     * 서버는 클라이언트에 업데이트를 전송할 때 항상 마스터 게임 상태를 클라이언트의 다음 히스토리 슬롯에 복사하고 다른 스냅샷과 비교함.
     * 유효한 스냅샷이 없으면 ""더미 스냅샷""을 사용하여 전체 업데이트를 생성함.
     * 클라이언트가 이전 업데이트를 수신했음을 확인하면 부분 업데이트만 전송됨.
     * 패킷이 손실된 경우에도 동일한 프로세스를 따르며, 이전에 수신되지 않은 정보와 새로운 정보를 단일 메시지로 전송함.

  메모리 내성 및 C

     * Quake3는 introspection 없이 스냅샷을 비교하며, 각 필드 위치는 배열과 전처리 지시문을 통해 미리 구성됨.
     * netField_t 구조체를 사용하여 필드의 위치와 크기를 정의하고, 이를 통해 차이를 네트워크로 전송함.

  사전 분할

     * NetChannel 모듈은 메시지를 1400바이트 청크로 나누어 전송하며, 이는 라우터가 패킷을 조각화하는 것을 방지함.
     * 라우터 조각화는 네트워크 진입 시 패킷을 차단하고, 네트워크를 떠날 때는 모든 조각을 기다려야 하므로 비용이 많이 듦.

  신뢰성 있는 및 신뢰성 없는 메시지

     * 스냅샷 시스템은 네트워크에서 손실된 UDP 데이터그램을 보상하지만, 일부 메시지와 명령은 반드시 전달되어야 함.
     * 이러한 보장은 NetChannel을 통해 추상화됨.

        Hacker News 의견

     * 이 기사는 매우 흥미로우며, 이전 기사들도 마찬가지였음. 하지만 현재의 일은 지루하여 취미 프로젝트에 에너지가 남지 않음.
     * ""Isochronous""라는 용어는 FireWire가 나왔을 때 처음 들었으며, UDP 사용의 정당성에서 이를 언급함. 현재 USB/Thunderbolt 사양에서 중요한 부분임.
     * 시리즈의 첫 번째 기사 링크: https://fabiensanglard.net/quake3/index.php
     * 지연 예측과 수정 기능이 흥미로우며, 복잡한 운영 변환(OT)을 사용하지 않음. 이는 더 간단하고, 공유 상태가 협업 편집 문서가 아닌 독립적인 진실의 원천이 필요하며, 개발이 빠르고 성능이 더 좋음.
     * 원래 Q3A 클라이언트의 네트워크 코드는 LAN에서는 잘 작동했지만, 원격 플레이에서는 지연에 민감했음. Quake Live의 흥미로운 변화 중 하나는 원격 플레이를 위한 업데이트된 네트워크 코드였음. 인터넷 연결도 시간이 지나면서 전반적으로 개선됨.
     * 사이트가 HN Hug of Death를 겪고 있는 것 같음: <연결이 시간 초과됨>
     * 토요일 아침에 마차를 천천히 마시며 읽기에 좋은 글임. 삶의 작은 즐거움임.
     * Q: 실시간 게임 프로토콜에 대한 현대적 접근 방식을 배울 수 있는 자원이 있는지?
     * 아마도 스냅샷 ID 번호도 클라이언트에 전송되어 확인됨?
     * 총알 방지 오픈 소스 미들웨어가 여전히 있는지?
"
"https://news.hada.io/topic?id=17929","rate then sum YES, sum then rate NO","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  rate then sum YES, sum then rate NO

     * Prometheus에서 counter를 다룰 때, rate 같은 counter-only 함수와 aggregation을 적용할때 실수하기 쉬운게 있음
     * Prometheus에서 counter는 오직, ""증가하거나"", ""유지되거나"", ""초기화되거나""만 가능
     * Node Exporter의 초당 요청율을 구하고 싶을때 다음과 같은 쿼리를 작성할 수 있음?
          + sum by (job)(rate(http_requests_total{job=""node""}[5m]))
     * 그런데? 다음과 같은 쿼리는?
          + rate(sum by (job)(http_requests_total{job=""node""})[5m])
          + 이 쿼리는 문제가 있음
     * 만약 어떤 노드가 재시작되었다 하면, 해당 노드 위 Node Exporter의 http_requests_total는 0으로 초기화 됨
          + 그럼 전체 sum(...)의 값은 줄어들게 됨
          + rate()은 counter가 초기화된것이라 판단하고, 잘못된 spike가 생기게 됨
               o *n에서 n-a만큼 값이 줄어들면, rate입장에선 (n-a)만큼 값이 튀었다고 보게 되므로
     * 따라서...
          + rate(counter_a[5m] + counter_b[5m]) 이렇게 하면 NO
          + rate(counter_a[5m]) + rate(counter_b[5m]) 이렇게 하는건 YES
     * sum() 말고도 min(), max(), avg(), ceil(), histogram_quantile(), predict_linear() 같은 것들에도 해당되는 얘기임
     * counter에 대한 함수에는 rate() 말고도 irate(), increase(), resets()들도 있음


   *가 붙은 요약은 원문에 없는 부연 설명이라 따로 표시했습니다.
"
"https://news.hada.io/topic?id=17958","AI 어시스턴트 Continue.dev로 앱 만들기 (설치 불필요!)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AI 어시스턴트 Continue.dev로 앱 만들기 (설치 불필요!)

   AI 페어 프로그래머인 Continue.dev를 사용하여 간단한 랜딩 페이지를 만드는 방법을 알아보세요. 모든 작업이 클라우드 기반 개발 환경에서 이루어지며, 로컬 설치나 특별한 요구사항이 필요 없습니다!
"
"https://news.hada.io/topic?id=17952","내 Git 아이덴티티 설정 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           내 Git 아이덴티티 설정 방법

내 Git 정체성을 설정하는 방법

     * 소개: 이 글은 Git 설정을 통해 작업 환경에 맞는 정체성을 관리하는 방법을 설명함. 필자는 includeIf를 사용하여 특정 조건에 따라 파일을 포함하는 방법을 발견했음.
     * Git 설정:
          + includeIf를 사용하여 특정 디렉토리에 따라 다른 Git 설정 파일을 포함할 수 있음.
          + 예를 들어, ~/code 아래의 Git 디렉토리에는 ~/.config/git/personal을, ~/work 아래에는 ~/.config/git/work을 포함하도록 설정할 수 있음.
          + 각 파일에는 사용자 이름, 이메일, 서명 키 등의 정보가 포함됨.
     * 리모트 URL 기반 설정:
          + hasconfig:remote.*.url을 사용하여 특정 리모트 URL이 존재할 때 Git 설정을 조건부로 구성할 수 있음.
          + 예를 들어, github.com:orgname/**와 같은 리모트가 있는 디렉토리에서는 ~/.config/git/config-gh-org을 사용하도록 설정할 수 있음.
     * SSH 키 설정:
          + SSH 키를 설정하여 리모트에 pull 및 push를 할 수 있도록 해야 함.
          + ~/.ssh/config 파일에서 Host와 IdentityFile을 설정하여 각 리모트에 맞는 SSH 키를 사용할 수 있음.
          + 같은 Hostname에 대해 다른 IdentityFile을 사용하려면 Host 값을 다르게 설정해야 함.
     * Git config에서 SSH 설정 사용:
          + 특정 리포지토리에 대해 다른 SSH 설정을 사용하려면 Git config에서 insteadOf를 사용하여 URL을 대체할 수 있음.
          + 예를 들어, github.com:orgname 대신 gh-work:orgname을 사용하여 올바른 SSH 설정을 적용할 수 있음.
     * 고려사항:
          + 이 접근 방식에 문제가 있을 수 있으며, 더 나은 방법이 있는지에 대한 피드백을 받고 싶음.

  참고 자료

     * 여러 Git 정체성을 관리하는 방법에 대한 다양한 블로그 글을 참고함.

        Hacker News 의견

     * gh-work라는 이름을 사용하여 SSH 및 Git 신원을 구분하는 방법을 설명함. gh-work로 클론한 모든 Git 저장소는 gh-work.inc의 설정을 따르게 되어 SSH 구성과 동일한 서명 키를 사용함
     * 한 스타트업에서 일할 때, 매일 신원을 동화 같은 이름으로 바꾸는 동료가 있었음. 이는 버전 관리 포렌식에 도움이 되지 않았지만, 신원 구성에 무엇이든 넣을 수 있다는 점을 상기시키려는 의도였을 수 있음
     * .gitconfig에 신원에 대한 별칭을 추가하여, 저장소를 초기화하거나 클론한 후 git config-company 또는 git config-personal 명령어를 실행하는 방법을 제안함
     * ~/.ssh/config를 수정할 필요 없이, ~/.gitconfig에 SSH 명령어를 설정하여 서브모듈을 쉽게 관리할 수 있는 방법을 설명함
     * includeIf와 hasconfig:remote를 사용하여 디렉토리별로 Git 설정을 관리하는 방법을 소개함. 이는 저장소를 클론할 때도 유용함
     * 컨설턴트에게는 업무용으로 별도의 기기나 최소한 별도의 OS 사용자를 사용할 것을 강력히 권장함. 개인 기기를 업무에 사용하는 것은 위험할 수 있음
     * NixOS와 home-manager를 사용하여 Git 설정을 관리하는 방법을 설명함. hasconfig:remote 조건을 사용하여 특정 이메일을 설정함
     * SSH 복잡성을 ~/.ssh에 유지하고, 고객이나 프로젝트별로 별도의 설정을 포함하는 방법을 설명함. GitHub와 같은 호스트 이름이 없는 경우에는 별칭을 할당함
     * gitdir을 사용하여 업무와 개인 작업을 분리하는 방법을 설명함. hasconfig:remote는 게임 체인저임
     * 업무와 개인 저장소를 ~/dev와 ~/src로 분리하여 관리하는 방법을 설명함. 각 경로에 따라 다른 Git 설정 파일을 포함함
     * 개인 및 업무용 .gitconfig 파일을 설정하여 이메일과 서명 키를 다르게 설정하는 방법을 설명함. GPG 서명을 활성화하여 커밋에 서명함
"
"https://news.hada.io/topic?id=17943","Bluesky, 모든 면에서 Threads를 추월하기 직전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Bluesky, 모든 면에서 Threads를 추월하기 직전

     * Bluesky의 성장
          + Bluesky는 Elon Musk의 X에 대한 탈중앙화된 대안으로, 빠른 속도로 Threads와의 격차를 좁히고 있음
          + Bluesky 앱은 350만 명의 일일 활성 사용자 수를 기록하며 Meta의 Threads에 비해 1.5배 적은 사용자 수를 보유하고 있음
          + 이는 Threads 앱이 한 달 전 Bluesky의 5배의 활성 사용자를 보유했던 것에 비해 인상적인 성과임
     * 사용자 증가 요인
          + 11월 5일 선거 이후 Bluesky의 사용자 기반은 300% 증가함
          + 기자, 학자, 기업들이 Elon Musk의 혼란스러운 X를 떠나 Bluesky로 이동하고 있음
          + Meta의 CEO Mark Zuckerberg가 Threads에서 정치적 콘텐츠를 축소하려는 결정이 많은 사용자들을 실망시켰음
     * Bluesky의 매력
          + Bluesky는 ""정치적으로 참여하는 이메일 직업 집단""에게 인기를 끌고 있음
          + 이는 초기 Twitter를 문화적 거대 플랫폼으로 변모시킨 동일한 집단임
     * Bluesky의 과제
          + Bluesky는 여전히 발전 중인 플랫폼으로, 급속한 성장으로 인해 정전, 오류, 사기 등의 문제를 겪고 있음
          + 더 많은 사용자가 이 새로운 ""Twitter 대체 플랫폼""으로 몰리면서 성장통이 예상됨

   블루스카이는 확실히 머스크 인수 전의 예전 트위터 느낌이 많이 나긴 합니다.
   머스크 인수 이후의 트위터는
     * 검수를 거치지 않은 저질 광고 증가
       (최근엔 알리에서 애저 사진을 모자이크 없이 광고하기도 함)
     * 트럼피스트가 득세하면서 정치적 갈등 심화
     * 게시물을 모두 자체 AI 학습에 사용하겠다고 약관변경
     * 실사용자가 줄어든 부분을 LLM 봇이 채우고 있어서 노이즈가 심함
     * 서비스 안정성 자체도 점차 나빠짐

   같은 이슈가 있어서 다들 대안을 찾는 중입니다.

        Hacker News 의견

     * Instagram이 Threads를 추가하면서 모든 사용자에게 계정을 만들어 주었기 때문에 데이터 분석에서 많은 Threads가 나타나는 것 같음. 이는 실제로 채택된 것이 아니라 인위적으로 생성된 것임. Threads는 독립적인 소셜 네트워크가 아니라 다른 소셜 네트워크의 부가 기능임.
     * Bluesky 앱이 하루 350만 명의 활성 사용자를 기록하며 Meta의 Threads보다 1.5배 적은 수치를 보이고 있음. 그러나 Threads의 월간 활성 사용자는 2억 7,500만 명이고, Bluesky는 총 2천만 명의 사용자를 보유하고 있음. 이러한 수치에 대한 출처가 없어서 믿기 어려움.
     * 소셜 미디어는 서로 다른 사회적, 정치적 집단으로 분리될 것임. 전 세계가 하나의 네트워크를 공유하는 것은 일시적이고 예외적인 상황이었음.
     * DAU(일일 활성 사용자 수)는 중요하지만, '창작자' 계정의 수와 '관찰자'의 수 또한 중요함. Bluesky는 사용자 선택을 존중하며, 사용자를 팔로우하는 목록이 주요 기능임. Bluesky의 알고리즘은 시간순 피드임.
     * 오래전에 Bluesky 계정을 만들고 TikTok의 프로젝트 관리 주제를 교차 게시했음. 최근에 팔로우를 X에서 Bluesky로 옮기기 시작했음. Bluesky는 활기차고 친근한 장소임. Sky follower bridge를 사용하여 X의 차단 목록을 가져왔지만 Bluesky 차단 목록으로 변환할 수 없었음.
     * Threads는 사용량이 급증했다가 빠르게 감소했음. Bluesky도 비슷할 것 같음. Bluesky는 중재 외에는 새로운 것이 없어 보임.
     * Instagram/Threads의 책임자인 Mosseri는 알고리즘이 어떻게 작동하는지 잘 모르는 것 같음. 많은 사람들이 Threads에 대해 이야기하는 것을 보고 놀람.
     * Twitter에서 Bluesky로 팔로우를 옮기는 확장 프로그램이 있음. Chrome과 Firefox에서 사용 가능함. 개인적으로 사용해봤고 잘 작동했음.
     * Threads를 넘어서기 위한 최저 기준이 무엇인지 의문임.
     * Google의 Twitter 클론은 어디에 있는지 궁금함. AI를 탑재하고, 기억하기 어려운 이름을 가질 수 있으며, 사용자가 없을 때 조용히 종료될 수 있음.
"
"https://news.hada.io/topic?id=17875","스페이스X 슈퍼 헤비, 걸프만에 착수하며 'Chopsticks' 착륙 취소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               스페이스X 슈퍼 헤비, 걸프만에 착수하며 'Chopsticks' 착륙 취소

        Hacker News 의견

     * 우주에서 엔진 재점화 시연이 중요한 이유는, 엔진 설계가 시작하기 까다롭고 메탄 탱크에서 물과 CO2 얼음이 형성될 위험이 있기 때문임. 이는 과거 시험 비행에서 여러 번 실패를 초래했음. 이로 인해 실제 궤도에 진입하는 시험 비행을 곧 볼 수 있을 가능성이 있음
     * Falcon 설계의 한 단계에서 바지선 착륙을 완벽하게 한 것처럼 보였으나, 이후 여러 번 실패를 겪었음. SpaceX는 하드웨어의 한계를 찾기 위해 일부러 오래된 부스터를 충돌시켰다고 인정했음. 데이터가 회수된 부스터보다 더 가치가 있었음
     * 바다에 착수하는 것보다 'chopsticks' 착륙의 장점이 무엇인지에 대한 질문이 있음. 바다 착수는 육상 착륙보다 더 큰 손상을 초래할 수 있음. 'chopsticks' 접근법 개발 비용을 고려할 때 상당한 장점이 있을 것으로 추정됨
     * Musk가 더 많은 주의를 기울일수록 SpaceX의 성과가 더 인상적임. 그가 100개의 회사 CEO라면 어떤 성과를 낼지 상상해보라는 의견이 있음
     * 잡기 중단의 이유에 대한 기술적 세부 사항이 아직 공개되지 않았음. 예를 들어, 어떤 매개변수가 범위를 벗어났는지에 대한 질문이 있음
     * Polymarket에서 많은 사람들이 돈을 잃었음. Starship을 잡을 확률이 약 75%였으나 발표 후 즉시 0%로 떨어졌음
     * Starship의 공개된 일정이나 추정된 일정이 있는지에 대한 질문이 있음. 다음 단계가 무엇인지 궁금해하는 의견이 있음
     * 더 높은 입사각 때문인지에 대한 질문이 있음. 이는 미션 설명에서 주요 '어려움' 요소로 보였음
     * 왜 타워/‘chopsticks’가 부스터만큼 휴대할 수 없는지에 대한 질문이 있음
"
"https://news.hada.io/topic?id=17941","제품 속도에 대한 원칙","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              제품 속도에 대한 원칙

     * 많은 회사들이 복잡한 프로세스나 장황한 요구 사항에 얽매여 개발 속도가 느려지지만, 실제로 중요한 것은 빠르게 ‘올바른 제품’을 만드는 것임
     * 제품 개발 과정에서 불필요한 요소들을 제거하면 제품 개발 속도가 매우 빨라짐. 올바른 제품을 만드는 것 자체는 본질적으로 빠른 과정임
     * 제품 팀의 속도를 늦추는 것은 프로세스, 의사 결정자와 실행자 간의 거리, 과도한 명세서 등의 불필요한 요소들임

[Product Velocity를 위한 원칙]

  1. ‘덜 하기’가 필요함

     * 일반적으로 속도와 품질 사이에는 트레이드오프가 존재함
     * 대부분의 회사는 요구사항과 기한을 정하고 품질은 결과물로 취급하지만, 우리는 반대로 품질 기준을 정하고 60일 안에 무엇을 출시할 수 있는지 고민함
     * 중요한 것은 모든 요구 사항을 다 충족하려 하기보다는, 중요한 것만 빠르게 완성하는 것임
     * 요구사항을 제거하고 필요한 일만 하면 속도와 품질을 모두 높일 수 있음
     * Elon Musk도 비슷한 접근 방식을 제안하며, “먼저 요구 사항을 덜 멍청하게 만들어라”고 말함

  2. ‘바보 모드’가 종종 효과적임

     * ‘midwit meme’을 예로 들면, 똑똑한 사람과 바보는 간단한 해결책에 동의하는 반면, 평균적인 사람은 불필요하게 복잡한 문제를 만듦.
     * 우리는 종종 ‘바보 모드’로 문제를 접근하며, 복잡하게 생각하는 대신 단순한 해결책을 찾으려고 노력함.
     * 실수를 했을 때는 대개 생각이 너무 많았던 것임, 간단한 방법이 더 자주 효과적임
     * ""내가 바보라면 어떻게 할까?""라고 자문하면 실행 가능한 해결책에 도달하곤 함

  3. 모든 문제가 중요한 것은 아님

     * 소수의 문제들만 매우 중요함. 보안과 같은 중요한 문제는 반드시 해결해야 하지만, 모든 문제를 다 해결할 필요는 없음.
     * 예를 들어, 모바일 UI가 좋지 않지만 고객이 모바일 사용을 거의 하지 않기 때문에 이를 개선하지 않고 있음.
     * 이처럼 고객이 크게 신경 쓰지 않는 문제는 무시할 수 있음.

  4. 그냥 만들어라

     * 우리는 제품 개발을 위한 프로세스가 없음. 피그마 목업, PRD, 디자인 시스템, 애자일, OKR, 확실한 제품 로드맵, A/B 테스팅, 그로스 해킹 등을 하지 않음
     * 고객이 엔지니어이기에 우리 엔지니어가 제품, 디자인 등을 모두 처리할 수 있다고 기대함
     * 빠르게 제품을 만들어보고 고객의 반응을 살피는 방식을 선호함

  5. 재작성은 필요할 때 함

     * 회사들은 종종 기술 부채를 가능한 오래 미룰수록 더 빨리 움직일 수 있다고 생각하지만, 우리는 필요할 때 대규모 재작성을 하는 것을 불편해하지 않음
     * 때로는 올바른 것을 만들기 위한 가장 빠른 길이 잘못된 것을 만들고, 그것이 잘못되었다는 것을 깨닫고, 올바른 것으로 대체하는 것임
     * 기술 부채를 제거하는 것이 유용해 보인다면 그렇게 할 것임

  6. 가능하면 외주를 활용함

     * 가능하다면 사내에서 만드는 대신 외부 벤더의 솔루션을 구매함. 예를 들어 Fern이라는 업체를 통해 SDK를 생성함
     * 물론 공급업체를 이용하는 것은 상당한 초기 비용이 들고 자유도를 제한하지만, 일반적으로 옳은 선택임
     * 우리는 엔지니어링 리소스가 매우 제한적이고 비싼데, 엔지니어 일주일치 시간이 약 5천 달러의 비용이 듦. 기회비용을 고려하면 그 가치는 훨씬 더 높음
     * 실제로 만들 가치가 있는 것은 상대적으로 적음

  7. 채용하지 않음

     * 인력을 늘리면 팀의 산출량이 늘어날 것이라 기대하지 않음. 채용은 느리고 어려우며, 온보딩과 인력 관리는 시간을 소모함
     * 특히 많은 지원 없이 기여할 수 있는 유능한 사람을 데려오기가 어려움
     * 따라서 대규모 엔지니어링 팀을 구축할 자원이 있음에도 불구하고, 소규모로 유지하기 위해 최선을 다함. 이는 삶을 훨씬 더 쉽게 만듦

마무리 생각

     * 우리가 이전에 깨닫지 못했던 정도로, 제품 개발은 그렇게 오래 걸리지 않아야 한다는 것을 깨달았음
     * 고객에게 필요한 것을 알고, 강력한 팀을 보유하고 있으며, 주의를 산만하게 하는 불필요한 요소를 배제하면 높은 속도로 제품을 개발할 수 있음

   저도 또 보러 왔습니다. 담에 또 뵈어요.

   보고 또 봐도 좋네요.

   ?? 굉장히 이상적이네요

   외주에 대한 관리 비용이나 거기에 투입되어야 하는 리소스가 만만치 않을텐데... 그래도 전반적으로는 훌륭한 조언입니다.

   항상 외주를 이용하라고 하지만. 외주를 사용할때는 어떻게 해야한다는 거의 못본듯하네요.
   명확한 서비스 그림없이 간단한 밑그림만을 넘기게되면 생각보다 더 심한 것들을 받는다는 것을 인지하지 못하는....

   ???: 빠르지만 애자일하지 않게 만들어주세요

   제품이 명확할 때 가능하다고 생각합니다
   해야할 게 분명할 때 그 이상의 설계는 불필요하다 요런 느낌

   ""먼저 요구 사항을 덜 멍청하게 만들어라""

   외주 업체가 어느 날 없어지면... 전화 안 받으면 ㅠㅠ

   내부 개발이라도 어느날 다들 퇴사해버린다고 하면 상황은 비슷하지 않나요..?
"
"https://news.hada.io/topic?id=17991","저는 Kubernetes가 필요하지 않았고, 여러분도 아마 필요하지 않을겁니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              저는 Kubernetes가 필요하지 않았고, 여러분도 아마 필요하지 않을겁니다

Kubernetes를 떠나 Google Cloud Run을 선택한 이유

  Kubernetes 도입의 배경

     * 2013년 출시한 온라인 3D 편집 플랫폼 Clara.io에서 베어메탈 서버를 사용해 인프라를 최적화했으나, 하드웨어 관리와 모니터링에 과도한 작업 필요.
     * 2018년 Threekit.com 프로젝트에서 Kubernetes를 선택. 당시 Azure, AWS, Docker가 Kubernetes를 표준으로 채택하며 주류화.

  Kubernetes의 한계

    1. 비용 문제:
          + 관리 노드, 클러스터 중복 구성 등 기본 클러스터 구축 비용이 큼.
          + 느린 오토스케일링으로 서비스 과잉 프로비저닝 필요, 미사용 리소스 비용 발생.
    2. 작업량 관리의 어려움:
          + 작업 스케줄링이 복잡하며, 내장 스케줄러 및 Argo도 대량 작업에서는 비효율적.
    3. 복잡성 과부하:
          + 풍부한 기능이 단순 작업도 복잡하게 만듦.
          + Kubernetes 관리에 전담 DevOps 인력이 필요하며, 이는 비용 상승으로 이어짐.

  Google Cloud Run으로 전환

   Cloud Run은 Kubernetes의 복잡성을 대체하며 간소화된, 비용 효율적인 환경을 제공.

    새로운 설정

     * Docker 컨테이너 기반 인프라:
          + 자동 스케일링 서비스와 장기 실행 작업용 컨테이너 포함.
          + Cloud Run은 컨테이너 배포, 스케일링, 가동 중단 관리 및 작업 실행을 자동화.

    Cloud Run의 장점

    1. 비용 효율성:
          + CPU 및 메모리 사용 시간에 따라 요금 부과.
          + 유휴 서비스에는 비용이 발생하지 않음.
          + 예: Web3D Survey 사이트는 월 500,000회 트래픽을 처리하면서 $4/월로 운영 가능.
    2. 빠르고 안정적인 오토스케일링:
          + Kubernetes보다 빠른 몇 초 내 스케일링.
          + 수요 급증을 신속히 처리 가능.
    3. Kubernetes 관리 부담 없음:
          + Cloud Run은 Google의 Borg 기반으로 Kubernetes 클러스터 관리 불필요.
    4. 간단한 비동기 작업:
          + Cloud Run Tasks를 사용해 자동 재시도, 대량 작업 실행이 간편.

    Kubernetes의 잠재적 문제: 클러스터 락인

     * Kubernetes 기능에 의존하면 클러스터 외부 리소스 통합이나 확장이 어려워짐.
     * 특정 인프라에 의존하게 되어 확장과 마이그레이션이 복잡하고 비용 증가.

  Cloud Run 사용에 대한 일반적인 질문

    “GCP 종속성이 걱정되지 않나요?”

     * Docker 기반 설정으로 AWS 같은 다른 클라우드로의 마이그레이션이 약 1주일이면 가능.
     * 현실적으로 정치적 요인 외에는 클라우드 제공자를 변경하는 경우가 드물음.

    “Cloud Run도 결국 Managed Kubernetes 아닌가요?”

     * Cloud Run은 Knative 인터페이스를 사용하나, Kubernetes가 아닌 Google의 Borg 위에서 작동.
     * Kubernetes의 복잡성을 없애고 간소화된 인터페이스 제공.

  현 워크플로의 단점

    1. 서비스 이름 관리의 불편함:
          + 로컬 및 서버에서 일관된 구성 관리를 위한 추상화 계층 필요.
          + Kubernetes의 네임 관리 기능이 부재.
    2. Cloud Run Task 에뮬레이션 부족:
          + 로컬에서 작업 개발 시 로그 출력 캡처 및 추적을 포함한 간단한 에뮬레이션 환경 부재.

  결론

     * Cloud Run은 비용, 속도, 확장성, 간소화 측면에서 최적의 솔루션
     * 대기업이나 복잡한 요구사항이 있는 경우 Kubernetes가 유용할 수 있으나,
     * 간소성과 효율성이 중요한 프로젝트에서는 Cloud Run이 훨씬 실용적
     * PS: Kubernetes의 특정 확장을 추가하는 것으로 문제를 해결할 수도 있겠지만, 이는 복잡성을 더할 뿐이며, 단순한 필요를 초과하는 Kubernetes 환경에 의존하고 싶지 않음

   silver bullet이 어디 있겠습니까. 상황에 맞게 잘 쓰면 되는거겠죠 ㅎㅎ
   트렌디한거라고 무비판적으로 kubernetes를 도입하면 힘들어질 수 있는데 그래도 좀 규모가 큰 환경에서는 괜찮은 도구라고 생각하고 있습니다.
   도입을 하더라도 도입만 하고 끝나면 제대로 못쓰게 될거에요.
   그리고 어떤 도구든 마찬가지지만 100% 개발자나 사용자의 니즈를 충족시킬 수는 없기 때문에 적절한 수준의 자동화는 필수일 것 같습니다.

   쿠버네티스는 구축만 되면 꿀빠는 일만 남았는데 ... ㅠㅠ

   kubernetes 가 제 밥줄이고 한때는 이것이 정답이다 라고 믿었던 시절이 있습니다만
   시간이 지날수록 많은 문제들을 경험하고 시간을 낭비하게 되는 스스로를 찾게되네요.

   남한테는 k8s 추천하지만 제 서비스에 사용하진 않을 것 같습니다. k8s도 k8s지만 그냥 컨테이너도 지쳤습니다.

   AWS 를 사용중이라면 ECS 와 비슷하다고 생각하면 될까요?

   네 그것이라고 보시면 됩니다. :)

   kubernetes를 못쓰는게 잘못이지 kubernetes가 별로 라고 하기에는 좀 그렇네요.

   저도 글쓴이의 생각과 비슷합니다.
   아직 회사 규모가 kube를 사용할정도가 아니기도하구요.

   모든 개발자가 Kube를 이용해서 관리를 할 수 있을꺼라는 것은 저만의 생각이었어요.
   회사의 개발자의 평균보다 못하게 인프라를 구축하고 문제를 해결할 수 있도록 가이드해주는게 더 낫더라구요...

   ???: 저는 AI 가 필요하지 않았고, 여러분도 아마 필요하지 않을겁니다.

   어떤 제품이건 트레이드오프가 되는 부분들이 있을텐데

   managed 서비스를 쓰면 딱히 관리에 어려움을 느끼진 못했어서,,
   어떤 도구든 적당한 선에서 사용하면 유용한데 쿠버네티스는 유독 '복잡한 설정이 가능함'이 주로 비판되는 것 같다는 생각이 드네요.

   거의 모든 것을 내가 원하는데로 만들 수 기술이다보니... :) 복잡하게 사용하는 경우가 많아서 그럴꺼같네요 ㅎㅎㅎㅎ...

        Hacker News 의견

     * ""클라우드 기술""에 대한 불만을 표현하며, Kubernetes 사용 시 YAML 파일을 수정하고 오류를 해결하는 데 많은 시간을 소비하게 됨을 언급함. 클라우드 통합을 피하고 직접 서버를 설정하고 싶다는 의견을 가짐
     * Kubernetes는 DevOps와 관리 시간 외에도 상당한 인프라 비용이 발생함. 클라우드 제공자의 관리형 Kubernetes를 사용하는 것이 더 효율적임을 제안함
     * Kubernetes는 컨테이너 오케스트레이션 도구가 아닌 컴퓨터 클러스터를 만드는 도구로, 클러스터가 필요하지 않다면 Kubernetes를 사용하지 않아도 됨을 설명함
     * DevOps에 대한 과도한 투자가 줄어들고 있으며, Kubernetes에 대한 비판적인 시각을 공유함. 작은 스타트업에서는 단일 서버로도 충분할 수 있음을 강조함
     * Cloud Run 사용 시 주의할 점으로 TCP 연결 제한, 실행 환경 선택, 자동 확장 설정 등을 언급함
     * Cloud Run은 작은 스타트업에 적합하지만, 보안 아키텍처의 기본 요소인 방화벽 제어가 부족함을 지적함. 결국 VPC가 필요하게 될 것임을 설명함
     * Google Cloud Run과 Kubernetes의 비교는 공정하지 않다고 주장하며, 각각의 장단점을 설명함. Kubernetes는 복잡한 작업에 적합함을 강조함
     * Kubernetes는 학습 곡선이 가파르지만 적절히 사용하면 강력한 도구임을 설명함
     * Kubernetes에 대한 비판에 동의하지 않으며, 복잡한 앱을 배포할 때 Kubernetes API가 필요할 수 있음을 강조함
     * Kubernetes의 복잡성은 주로 시스템 관리 작업에서 발생하며, Kubernetes 자체는 안정적임을 설명함
     * IaC와 CM은 구성을 줄이고 관리하기 쉽게 만들어야 하지만, 실제로는 더 많은 노력이 필요하다는 점을 지적함. 많은 경우 Kubernetes가 필요하지 않으며, 좋은 시스템 관리자가 더 중요함을 강조함
"
"https://news.hada.io/topic?id=17975","Deno vs. Oracle: JavaScript 상표 취소 소송","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Deno vs. Oracle: JavaScript 상표 취소 소송

     * 2024년 11월 22일, Deno는 ""JavaScript"" 상표를 취소하기 위해 USPTO(미국 특허상표청)에 공식 청원을 제출
          + 이번 소송은 ""JavaScript""를 법적 얽힘에서 해방하고, 이를 공공재로 인정받으려는 중요한 시도
          + 성공 시, ""JSConf"" 대신 ""JavaScript Conference""와 같은 명칭 사용 가능
          + ECMAScript라는 이름 대신 ""JavaScript Specification""으로 변경 가능
          + 커뮤니티는 ""JavaScript"" 용어 사용에 대한 법적 위협에서 벗어날 수 있음
     * 청원 전문은 여기 에서 확인 가능하며, 세 가지 주요 주장에 기반


    주장 1: JavaScript는 일반 명사임

     * JavaScript는 ECMA-262 사양에 정의된 프로그래밍 언어의 보편적 이름으로 자리 잡음
          + 전 세계 수백만 개발자와 조직이 독립적으로 사용
     * Oracle은 JavaScript 사양이나 사용을 통제하지 않으며, JavaScript는 브랜드가 아닌 현대 프로그래밍의 핵심임
     * 법적으로 일반 명사가 된 상표는 상표로 유지될 수 없음


    주장 2: Oracle의 사기 행위

     * Oracle은 2019년 JavaScript 상표 갱신 과정에서 USPTO에 허위 증거를 제출
          + Node.js의 스크린샷을 상업적 사용 증거로 제출했으나, Node.js는 Oracle과 무관한 프로젝트
     * USPTO가 이 허위 증거를 근거로 상표를 갱신했다면, 갱신이 무효화될 가능성 존재


    주장 3: 상표의 사용 포기

     * Oracle은 ""JavaScript"" 이름으로 유의미한 제품이나 서비스를 제공하지 않음으로써 상표를 포기
          + JavaScript Extension Toolkit이나 GraalVM과 같은 미미한 제공은 상업적 사용으로 간주되지 않음
     * 미국 법은 3년 연속 사용되지 않은 상표를 포기된 것으로 간주하며, Oracle은 이 기준에 해당


    다음 절차

     * Oracle은 2025년 1월 4일까지 응답해야 함
          + 응답하지 않을 경우 소송은 기본적으로 Oracle의 패배로 간주되며, 상표는 취소될 가능성 높음
     * Oracle이 소송을 진행할 경우, Deno는 Oracle의 법적 요건 불이행을 입증할 수 있는 풍부한 증거를 제출할 준비 완료
     * 모든 소송 과정은 투명하게 커뮤니티와 공유될 예정


    커뮤니티의 지원

     * Brendan Eich(JavaScript 창시자)를 포함한 14,000명 이상의 개발자가 상표 포기를 요구하는 공개 서한 - Oracle, it’s time to free JavaScript.에 서명
     * “JavaScript”를 언어만큼 개방적이고 접근 가능한 이름으로 만들기 위해 노력
     * 게시물을 공유하여 소송 진행을 알리는 데 동참 가능

   예전에야 자바의 다른 자식으로 오해를 샀지만 이젠 자바스크립트가 더 인기 많고 요즘은 자바를 안배우는 사람도 많아서 인기 역전 되어버린 상황

   마치 아버지를 아버지라 부르지 못하는 뭐 그런 느낌입니다. 이름을 개발자들에게 다시 돌려주었으면 좋겠네요.

   오라클은 자바부터 시작해서 자유소프트웨어 진영에 도움이 되는게 하나도 없는 느낌이 드네요.

   그래도 첫 발은 항상 쏴주는 오라클이라..

   Javascript는 java의 파생형으로 많이 오해해서 다른 말로 바꾸는 게 좋을 듯 한데...

   요즘도 그러나요?

   Oracle, 이제 JavaScript를 놓아줘야 할 때입니다.
"
"https://news.hada.io/topic?id=17948","BYD 공장의 규모공장의 규모

        Hacker News 의견

     * 2024년에는 흐릿하고 품질이 떨어지는 사진보다 더 나은 이미지를 제공할 수 있음. 예를 들어, ACME mapper를 통해 더 깨끗한 이미지를 확인할 수 있음. Google Maps는 공장 부지를 절반만 보여주는 경향이 있음
          + ACME mapper 이미지는 2023년 중반의 것으로, 최근 이미지는 동쪽 건설이 완료된 상태임
     * 방콕에서 BYD 차량의 수가 2년 전과 비교해 1000% 증가했음. 거리 곳곳에서 볼 수 있음
     * 건설 차량이 작업 중인 수가 대기 중인 차량보다 많아 인상적임
     * BYD는 90만 명의 직원이 있는 반면, Tesla는 12만 2천 명의 직원이 있음
     * 공장의 규모가 3km/2mi에 달해 이해하기 어려울 정도로 거대함
     * 중국에서는 지붕 공간이 많지만 태양광 패널 설치가 적음. 이는 규제가 초원에 더 저렴하게 설치할 수 있도록 허용하기 때문일 수 있음
     * 중국이 부동산처럼 전기차 거품에 빠질 가능성을 궁금해하는 의견이 있음
     * 공장의 규모가 놀랍고 흥미로우며 무서울 수 있음
     * 세계에서 가장 큰 공장 목록이 있는지 궁금해하는 의견이 있음. 일반적으로 개별 구조물만 고려하는데, 여러 건물로 이루어진 산업 단지는 제외됨
"
"https://news.hada.io/topic?id=17894","쿠키 처리는 지뢰밭임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              쿠키 처리는 지뢰밭임

     * HTTP 쿠키: 웹의 상태를 유지하기 위해 사용되는 작은 데이터 조각으로, 브라우저가 설정한 후 만료될 때까지 모든 HTTP 요청에 포함됨.
     * 문제 발생: 특정 자바스크립트 코드가 Go 표준 라이브러리에서 쿠키를 파싱하지 못해 오류 발생.

  명세

     * RFC 2109, 2965, 6265: 쿠키의 초기 정의 및 업데이트. 쿠키 값에 대한 명세가 서버와 브라우저 간에 일치하지 않음.
     * 문제점:
         1. 서버가 보내야 하는 것과 브라우저가 수락해야 하는 것이 일치하지 않음.
         2. 브라우저가 서버로 보내는 쿠키 값에 대한 제한이 없음.
         3. 표준 라이브러리가 쿠키 헤더를 처리하는 방식에 대한 명확한 지침이 없음.

  웹 브라우저

     * Firefox: RFC에서 권장하지 않는 몇 가지 문자를 허용함.
     * Chromium: Firefox보다 약간 더 제한적이지만, 여전히 많은 문자를 허용함.
     * Safari: 허용되지 않는 문자를 만나면 쿠키 처리를 중단하지 않고 해당 문자까지의 값을 수락함.

  표준 라이브러리

     * Golang: RFC와 유사하게 동작하지만, 공백과 쉼표를 허용함.
     * PHP: 특정 제어 문자에서 오류 발생.
     * Python: 이해하지 못하는 쿠키를 무시하고 추가 쿠키 로딩을 중단함.
     * Ruby: 모든 문자를 수락하고 퍼센트 인코딩함.
     * Rust: UTF-8 문자열을 모두 수락함.

  웹의 중요성

     * 실제 문제: 명세의 모호성으로 인해 많은 웹사이트가 쉽게 오류를 일으킬 수 있음.
     * 해결책: IETF HTTP Working Group이 쿠키 명세를 업데이트하고, 브라우저와 프로그래밍 언어가 쿠키를 처리하는 방법을 명확히 해야 함.

  요약 표

     * 브라우저 및 언어의 쿠키 처리: 각 브라우저와 언어가 쿠키를 처리하는 방식이 다름. RFC와의 일치 여부가 다름.

        Hacker News 의견

     * 쿠키는 예상치 못한 문제와 불편한 동작을 포함하며, 99.95%의 경우에 작동함. 쿠키 섀도잉은 동일한 이름이지만 다른 키 속성(도메인, 경로 등)을 가진 쿠키를 설정할 때 발생하는 문제로, 백엔드나 JS가 어떤 쿠키인지 구분할 수 없음
     * Rust는 표준 라이브러리에 쿠키 처리 기능이 없으며, 서드파티 ""cookie"" 크레이트의 동작을 참고함. 이는 Ruby처럼 퍼센트 인코딩 옵션을 포함함
     * HTTP 프로토콜은 수많은 다른 프로토콜을 내포하고 있으며, 브라우저와 웹 서버는 다양한 기능을 추가함. 이러한 기능들은 명확한 규격이 없고, 클라이언트와 서버가 호환성을 지정할 수 없음. 따라서 과거의 잘못된 결정을 계속 이어가야 하는 상황임
     * 약 10년 전, 프로젝트에서 쿠키 기반 세션을 구현했을 때 Safari에서는 작동하지만 Chrome에서는 작동하지 않는 문제를 겪음. 이는 브라우저가 올바른 형식이 아니면 쿠키를 설정하지 않는 차이 때문이었음
     * 쿠키의 유일한 합리적인 사용은 서버가 클라이언트를 인식할 수 있도록 불투명한 토큰을 설정하는 것임. 클라이언트가 서버가 보내지 않을 값을 처리할 수 있는 것은 문제가 아님
     * 쿠키는 복잡한 문제이며, 하위 호환성 문제로 인해 변경이 거의 불가능함. 새로운 메커니즘을 만들어야 할 필요성이 있음. 예를 들어, NewCookie 메커니즘은 현대 보안 조치와 엄격한 규격을 갖출 수 있음
     * 쿠키는 사라져야 하며, 인증 헤더로 대체할 수 있음. 브라우저에서 웹사이트에 표준 방식으로 인증할 수 있다면 좋을 것임. Basic 및 Digest 인증이 충분하지 않았던 것이 아쉬움
     * Safari의 네트워킹 코드가 오픈 소스가 아니므로, Swift의 Foundation 포트가 좋은 대안이 될 수 있음. 여기서 제어 및 삭제 문자를 확인할 수 있음
     * 쿠키 헤더 파싱은 혼란스러움. ""표준""은 실제로 존재하는 것을 반영하지 않으며, 각 백엔드 서버나 라이브러리, 프레임워크는 서로 다른 것을 수용함. 프론트엔드와 백엔드를 완전히 제어할 수 있다면 큰 문제가 아니지만, 다른 것들과 상호작용해야 할 때 매우 복잡해짐
     * Crystal 언어로 실험할 때 유사한 문제를 겪었음. 간단한 웹 스크래퍼를 구축하려 했으나, 기본 HTTP 클라이언트가 응답에 설정된 많은 쿠키를 파싱하지 못하고 중단됨
"
"https://news.hada.io/topic?id=17910","Show GN: 오픈소스 - Ollama 기반 LLM 모바일 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: 오픈소스 - Ollama 기반 LLM 모바일 클라이언트

   올해 꽤 많은 시간을 들여서 비디오와 관련한 LLM-RAG 관련 작업을 했습니다. 그러다 보니 부산물(?)이 좀 나왔는데 그중 일부를 정리해서 앱으로 만들고 오픈소스로 업로드했습니다.

   데모를 위해 앱,웹 동시에 사용할수 있는 채팅 UI가 필요해서 플러터의 flutter_chat_ui 를 기반으로 작업을 했는데, 데모로 끝내기 뭣해서 Ollama 클라이언트로 모바일에서 사용할 수 있는 앱을 만들었습니다.

   ChatGPT, Claude가 성능은 좋지만 비용이나 보안이 걱정되는 분들은 자신의 컴퓨터에 Ollama를 설치하고 필요한 적절한 LLM을 깔아서 사용해보는것도 좋은 방법입니다.
   플러터(Flutter) 소스라서 아이폰, 안드로이드폰에 빌드해서 사용할수 있습니다.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

   소개

   Ollama는 대규모 언어 모델(Large Language Models, LLMs)을 로컬 컴퓨터에서 쉽게 실행할 수 있게 해주는 오픈 소스 소프트웨어입니다. MyOllama를 사용하여 Ollama에 접속하여 다양한 LLM을 활용할 수 있습니다. MyOllama - Ollama 프로그램을 통해 자신의 컴퓨터에서 LLM을 실행하므로, 별도의 사용료 없이 AI 모델과 대화할 수 있습니다.

   주요 기능
     * 원격 LLM 접속: IP 주소를 통해 Ollama 호스트에 연결
     * 커스텀 프롬프트: 사용자 정의 Instruction 설정 지원
     * 다양한 오픈 소스 LLM 지원 (Llama, Gemma, Qwen, Mistral 등)
     * 사용자 정의 Instruction 설정 가능
     * 이미지 인식 기능 지원 (해당 기능을 지원하는 모델에 한함)
     * 직관적인 채팅 형식의 UI
     * 대화 기록: 채팅 세션 저장 및 관리
     * iOS와 Android 지원
     * 한국어, English, 日本語를 지원

   사용 방법
     * Ollama를 컴퓨터에 설치합니다 (macOS, Windows, Linux 지원). Ollama 설치 방법은 Ollama GitHub에서 확인할 수 있습니다.
     * 소스를 다운 받아서 Flutter를 이용하여 빌드하거나, App Store에서 MyOllama 앱을 다운로드합니다.
     * Ollama에 원하는 모델을 설치합니다. 모델다운로드
     * Ollama를 원격 접속이 가능하도록 설정을 변경합니다.
     * MyOllama 앱을 실행하고 Ollama가 설치된 컴퓨터의 IP 주소를 입력합니다.
     * 원하는 AI 모델을 선택하고 대화를 시작합니다.

   장점
     * 이 앱은 오픈소스 LLM을 효율적으로 활용하고자 하는 개발자 및 연구자를 위해 설계되었습니다. API 호출, 프롬프트 엔지니어링, 모델 성능 테스트 등 다양한 기술적 실험에 활용 가능합니다.
     * 무료로 고급 AI 기능 사용 가능
     * 다양한 LLM 모델 지원
     * 프라이버시 보호 (로컬 컴퓨터에서 실행)
     * 프로그래밍, 창의적 작업, 일상적인 질문 등 다양한 용도로 활용 가능
     * 대화의 맥락을 이어갈수 있도록 구성

   주의사항
     * 이 앱을 사용하려면 반드시 Ollama가 설치된 컴퓨터가 필요합니다.
     * Ollama 호스트 설정 및 관리는 사용자 책임입니다. 보안 설정에 유의하세요.

   저도 목적은 다르지만 비슷한 앱을 만들어서 현재 운영중에 있는데요, Ollama 또한 최근에 지원하는 업데이트를 배포했습니다.
   해외에서 특히 Ollama 요청이 많더라구요.

   https://news.hada.io/topic?id=15375

   깃헙 링크
   https://github.com/bipark/my_ollama_app
"
"https://news.hada.io/topic?id=17944","WireGuard: 기본 설정을 넘어서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         WireGuard: 기본 설정을 넘어서

     * 기본 설정
          + OpenVPN을 WireGuard로 대체하려는 시도에 대한 경험 공유.
          + 기본 설정 요약:
               o 서버와 클라이언트 각각에 대한 키 쌍 생성.
               o VPN 네트워크와 IP 주소 지정.
               o 서버와 클라이언트 구성 파일 작성 및 실행.
               o 네트워크 네임스페이스를 사용하여 VPN과 인터넷 연결을 분리 가능.
     * NAT
          + NAT 뒤에서 작동하지 않는 일부 애플리케이션 문제 해결.
          + UPnP를 사용하여 NAT 문제 해결 가능.
          + WireGuard는 기본적으로 UPnP를 지원하지 않으므로 수동 설정 필요.
          + miniupnpd 설치 및 설정을 통해 UPnP 기능 추가 가능.
     * IPv6
          + NAT 문제를 해결하는 더 나은 방법은 NAT를 사용하지 않는 것.
          + IPv6를 사용하여 NAT 없이 공개적으로 라우팅 가능한 주소 할당 가능.
          + 서버와 클라이언트에 IPv6 주소를 할당하여 NAT 없이도 통신 가능.
          + IPv6 설정을 통해 UPnP 없이도 공개 인터넷에서 접근 가능.

        Hacker News 의견

     * 개인 서버를 설정하고 웹에서 접근 가능한 서비스를 제공하려고 함. Caddy를 사용해 서브도메인을 서비스에 매핑하는 것은 성공했으나, Tailscale Magic DNS는 서브도메인을 지원하지 않음. 이를 해결하기 위해 pihole을 설정하여 개인 DNS 서버를 만들고자 함. Wireguard의 제한인지 궁금해함
     * Wireguard 설정 시 유용한 사이트를 발견했음: Procustodibus Wireguard Topologies
     * 동적 DNS 레코드를 설정하여 호스트 이름을 홈 네트워크의 동적 IP에 매핑하면 개인 VPN 사용이 가능해짐. 이를 통해 외부 인터넷에 노출하지 않고도 로컬 서비스를 원격에서 접근할 수 있음
     * Wireguard 사용 시 NAT가 필수라는 오해가 있음. 실제로는 목적지 호스트가 Wireguard 서버를 게이트웨이로 인식하면 일반 서브넷 라우팅이 잘 작동함. 기본 라우터에 정적 경로를 설정하는 것으로 충분함
     * Wireguard의 원리, 구현 및 설정을 다루는 좋은 책이 있는지 궁금해함. IPSEC 관련 책은 많지만 Wireguard는 드물다고 함
     * Wireguard에서 특정 IP를 제외하고 모든 트래픽을 터널링하는 쉬운 방법이 없음을 의아해함. 특정 IP를 제외한 모든 CIDR 목록을 프로그래밍적으로 생성해야 함
     * RBAC 기능이 없어 아쉬움. Wireguard는 OpenVPN보다 빠르지만, RBAC 때문에 직원과 계약자에게는 OpenVPN을 사용해야 함
     * Wireguard와 IPv6를 사용 중이나, IPv6 프리픽스 위임 기능이 작동하지 않음. 일반 이더넷 서브넷처럼 장치가 자체 주소를 선택하고 변경할 수 있도록 하고 싶음
     * Wireguard에서 포트 포워딩을 마스커레이딩 없이 제대로 작동시키지 못함. 소스 IP를 유지하려면 AllowedIPs에 0.0.0.0/0을 추가해야 하지만, 이는 응용 프로그램의 응답이 소스로 돌아가는 것을 방해함
     * IPv6를 기반으로 인프라를 구축하고 있음. Wireguard의 현대적 암호화와 무상태 설계를 활용하면서도 Wireguard 주소 체계를 채택하지 않고 IPv6 주소 체계를 유지하고 싶음
"
"https://news.hada.io/topic?id=17928","Show GN: 인터넷 연결 없이 클라이언트에서 간편결제 QR코드 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: 인터넷 연결 없이 클라이언트에서 간편결제 QR코드 만들기

   함께 보기: https://news.hada.io/topic?id=10280
     * 디미페이는 한국디지털미디어고등학교에서
       사용하는 인하우스 QR 간편결제 솔루션입니다.
     * 학생들은 저렴한 데이터 요금제를 사용하여 인터넷 연결이 자유롭지 않은 경우가 많았고, 인터넷 연결 없이도 결제할 수 있는 방법을 고민하였습니다.
     * 오프라인 결제 프로젝트를 리드한 팀원이 연구 과정을 블로그에 상세히 기록해두어서 공유합니다.

   기술적 접근:
     * TOTP에서 영감을 받은 결제토큰
          + TOTP의 카운터와 HKDF를 활용하여 암호화에 필요한 키를 동적 생성
          + XChaCha20-Poly1305를 사용한 대칭키 암호화
     * 결제코드 유효성 검증
          + 이미 사용되었거나 만료된 토큰을 구분하기 위해 Nonce(uuidv7)를 도입함
          + 논스가 가장 최근 결제 시간보다 과거에 생성되었다면 거래 거부
          + 리플레이 공격을 예방하려는 의도
     * TLV(Tag-Length-Value) 포맷 도입: 페이로드를 유연하면서도 작게 직렬화할 수 있음

   시연 영상을 보니까 퀄리티가 대박이네요

   Local Generated Pay... LG 페이네요 하하하하

   하하하하하
"
"https://news.hada.io/topic?id=17877","Apple, macOS 시스템 대상 0-day 공격 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Apple, macOS 시스템 대상 0-day 공격 확인

     * Apple은 이미 악용되고 있는 두 가지 취약점을 해결하기 위해 주요 macOS 및 iOS 보안 업데이트를 긴급히 배포함.
     * 이 취약점들은 Google의 TAG(위협 분석 그룹)에 의해 보고되었으며, Intel 기반 macOS 시스템에서 적극적으로 악용되고 있음.
     * Apple은 보안 대응팀을 통해 공격에 대한 세부 정보나 감염 징후를 제공하지 않음.
     * 패치된 취약점의 세부 사항
          + CVE-2024-44308: JavaScriptCore - 악의적으로 제작된 웹 콘텐츠를 처리할 때 임의 코드 실행으로 이어질 수 있음.
          + CVE-2024-44309: WebKit - 악의적으로 제작된 웹 콘텐츠를 처리할 때 크로스 사이트 스크립팅 공격으로 이어질 수 있음.
          + Apple은 iOS 18.1.1, macOS Sequoia 15.1.1 및 이전 iOS 17.7.2의 긴급 업데이트를 권장
     * 관련 뉴스
          + 북한의 암호화폐 도둑들이 피싱 이메일, 가짜 PDF 애플리케이션 및 새로운 기술을 사용하여 macOS 사용자를 대상으로 한 새로운 맬웨어 캠페인을 다시 시작함.
"
"https://news.hada.io/topic?id=17982","RAII, Rust/Linux의 환상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          RAII, Rust/Linux의 환상

요약

   Rust 개발자와 기존 Linux 개발자 사이의 분쟁을 지켜보고 쓰는 글입니다. 여러 개발자가 각자 다른 코딩 스타일을 가질 순 있으나, Linux 프로젝트는 이미 C++을 배제해서 그것의 코드 스타일과 구조(RAII)를 피한 전적이 있습니다.

   Asahi Lina가 언급한 코드의 작동 방식은 그 프로그램을 종료할 때 너무 느리며, 성능 지향 소프트웨어를 만드는 데 가장 기초적인 방식인 일괄 작업과 대립합니다. 예를 들어, 메모리 영역을 사용해 일괄 작업을 하는 것은 여러 개의 수명을 하나로 조정할 수 있어 RAII가 필요 없습니다.

   여기 제 주장을 뒷받침하는 자료를 제시합니다. 이 자료들 모두 일괄 작업이 왜 좋은지 알려주고 있습니다:
     * Casey Muratori | Smart-Pointers, RAII, ZII? Becoming an N+2 programmer
     * CppCon 2014: Mike Acton ""Data-Oriented Design and C++""
     * Modern Systems Programming: Rust and Zig - Aleksey Kladov

   따라서 저는 Linux가 평생 RAII를 받아들이지 말아야 한다고 생각합니다.


   제가 이 글을 가져온 이유는 이렇습니다. 한국의 러스트 개발자분들이 저 글을 보고 매우 화가 난 모습을 여러 번 봐서 여기 분들은 어떤 생각을 가졌을지 궁금했기 때문입니다. 여러분은 어떻게 생각하시나요.

   제 견해지만 특정 개발자들의 엘리트 주의가 어느정도 이해는 갑니다. 소프트웨어 ""공학"" 적 관점에서, 특히 리눅스처럼 오늘날 오픈소스 진영에서 클로즈드 진영과도 두루두루 손을 잡고 오픈소스 철학의 진보에 도움이 된 ""소프트웨어""는 찾아보기 어려운데, 검증되지 않은 프로그래머들이 Rust를 앞세워서 물밀듯 들어와 기존의 프로젝트 유지보수 중핵들의 통제를 벗어난 코드를 덕지덕지 붙혀 기술부채를 마구 늘려서 리눅스의 생명주기를 짧게 만들까봐 더욱 배타적이고 러다이트 같이 보이기마저 하는 보수적인 태도를 견지하는게 아닐까요?

   오픈소스가 오픈소스로 오래 남아있기 위해 ""오픈""적이지 않은 태도를 취하는 게 재미있습니다.

   저도 RAII나 비슷한 형식의 리소스 관리를 자주 사용하고 권장하는 편입니다. RAII가 뭔지도 모르고 무지성적으로 사용해도 “일단은 안전한“ 코드가 나오기 때문이죠.

   다만 제대로 알고 쓰지 않는다면 파일을 한번만 오픈해도 될것을 수십번 열고닫고 하는 식의 비효율적인 코드가 양산되기 십상입니다. 개발자가 성능에 꾸준히 관심을 가지고 있고 그런 문화가 개발팀에 전제가 된다면 RAII로도 충분한 수준의 성능을 낼 수 있다는 생각입니다.
    1. RAII : Free를 각 객체가 없어질 때마다 실행
    2. 일괄실행? Free 해야할 것들을 모았다가 bulk로 실행?
       리눅스에서 2가 1보다 더 빠르게 실행하도록하는 기능? api 같은게 있나요?
       저는 당연히 1로 살았어서, 잘 이해가 안되서요.

   정확하게는 모르지만 RAII를 안쓰겠다는건, 의도적인 메모리 누수를 이용해 (닫기)성능을 끌어올리겠다는거 같은데 이게 맞는지 방향인지 모르겠네요.
   어짜피 수동으로 메모리 관리를 잘하는 개발자면 RAII도 잘 쓸것이고, RAII없이 개발 못하는 개발자는 메모리를 수동으로 관리도 못할것이니 RAII를 안쓸 이유가 없을것같습니다.

   저는 zig이나 rust이후에도 많은 언어가 나왔으면 좋겠습니다. 근데 아직까지 rust만하게 적절한 언어는 본적이 없어요. 오히려 이런 언어 사이의 논의 사이에서 튀어나오는 개발자 간의 지식이 유용하다고 생각합니다. 하하..

   양쪽 다 맞는 말을 하고 있습니다.

   비유를 들자면, 온라인 게임 롤의 캐릭터 아지르는 스플릿 운영과 한타에서의 지역장악력, 그리고 궁 밸류가 압도적으로 좋은 고티어 챔프라는 인식이 있는데, 이건 고도로 숙련된 프로 경기에서나 통하는 얘기고, 일반인 레벨에선 라인전도 너무 약하고 체급도 약해서 그저 최하티어 챔피언일 뿐이죠.

   아사히 리나처럼 상위 10% 이상의 프로그래밍 및 운영체제 지식이 있는 사람들의 입장에선 RAII 이외의 안이 당연히 좋겠지만, 나머지 90%가 다루는 부분에선 RAII나 Rust만한게 없다고 생각합니다.

   다만 메모리 안정성/안전성을 보장해야 하는 큰 이유 중 하나에 보안 문제가 있기 때문에... tradeoff는 불가피하다고 봅니다.

   raii 가 없이는 경험이 상대적으로 부족한 개발자는 버그를 양산하게 될것 같음

   os말고 응용프로그램 수준에서는 적어도...

   개발 다하고, valgrind로 메모리 누수를 찾는 개발경험으로 다시 되돌아 가고 싶지 않네요.

   Free가 얼마나 시간을 소모하는지 궁금해서 실제 워크로드와는 많이 다르겠지만, 간단하게 코드를 짜서 테스트해봤습니다. (Rust 릴리즈 빌드로, std::alloc::alloc이랑 std::fs::File을 사용했습니다.)
   다양한 크기의 메모리를 10,000,000개, 약 2.5GB 분량으로 할당해두고, 해제하는 시간만을 측정했더니 1.87초가 걸렸습니다. 개당 187ns 꼴입니다.
   반면 파일의 경우, 핸들 10,000개 정도만 열어두고, 닫는 데 걸리는 시간만 측정했더니 약 9초였습니다. 파일 하나당 900us가 걸린 셈입니다.
   (이 윈도우 PC가 백신 때문인지 파일 작업이 유독 느리긴 합니다. 다른 윈도우 노트북에서는 각각 400ns/200us, 다른 리눅스 PC에서는 50ns/600ns가 걸리더군요.)

   RAII의 대안으로 벌크 처리라던가, 종료 시 OS를 믿고 리소스를 누수시키는 방법이 많이 언급되는데요, 메모리라면 쉽게 가능하겠습니다.
   그런데 파일이나 소켓 같은 리소스는 벌크 회수 API를 본 적이 없고, 리소스를 누수시키면 유저 코드에서의 시간은 줄어들지 몰라도, 줄어든 만큼 고스란히 커널이 프로세스를 종료하는 데 걸리는 시간이 늘어나서 성능적 이득이 별로 없습니다.

   메모리 RAII는 상대적으로 그렇게 느린 것도 아니고, arena 사용을 불가능하게 하는 기술도 아니며, 필요하면 의도적인 누수를 못 하게 하는 것도 아니라서 RAII 를 기피할 이유가 되긴 어려운 것 같습니다.
   그리고 더 느린 파일 RAII의 경우, 벌크로 처리할 방법도 없고, 비용을 피할 방법도 없는 상황에서, RAII의 대안은 얼마나 더 나은지 궁금합니다.


   약간 논외지만, RAII 와 lifetime 에 관한 반론들이 malloc/free 로 대표되는 메모리 자원에만 한정지어서 논의된다는 인상을 받습니다.
   RAII 와 lifetime 은 메모리 할당 뿐 아니라, 파일, 소켓, 락같은 OS 자원 뿐 아니라, 객체 풀, 커넥션 풀 등과 같이
   획득과 반환을 하고, 획득중 배타적 접근 제어가 필요한 대부분의 리소스 모델링에 두루두루 유용합니다.

   이런 리소스들도 malloc/free 과 같은 구조를 공유 하기 때문에 누수, use after free, double free 와 같은 구조의 문제를 공유하고,
   같은 구조를 공유하는 덕에 RAII 와 lifetime 가 메모리 뿐 아니라 이런 리소스들의 문제까지도 한꺼번에 해결한다는 점이 더 조명 될 필요가 있다 생각합니다.
   예를 들어 Rust 에서는 파일 핸들에 대해서도 use after close, double close 를 컴파일타임에 방지합니다:
   https://play.rust-lang.org//…

   주요 GC 언어들이 메모리는 GC 로 관리하지만 결국 파일핸들, 소켓과 같은 관리가 결정론적이어야 하는 리소스를 위해서
   RAII 와 같은 구조나 (Java의 try-with-resources statement 나, C# 의 using statement, Python 의 with statement 등) 비슷한 구조 (Go 의 defer 등)
   들을 추가로 도입 해서 결국 한 언어에 여러 리소스 관리 모드가 있게 되는데, 이런것보다 좀 더 낫지 않나 싶습니다.
    1. Linux에서 C++를 배제함으로서 RAII를 피한 것은 맞지만, 그것이 Linux가 C++를 피한 것이 ""RAII를 피하기 위해서"" 라는 근거로는 부족해 보입니다. 제시하신 Linus의 서신에는 RAII라는 단어가 없습니다.
    2. 솔직히 말씀드리자면, Asahi Lina가... 로 시작하는 문단부터 제시된 링크는 모두 수십분 단위의 유튜브 영상이라, 보기가 어렵습니다. RAII가 필요 없는 사례 기반의 기술적인 예시를 들어주시면 논의가 더 활성화될 것 같습니다.
    3.

     예를 들어, 메모리 영역을 사용해 일괄 작업을 하는 것은 여러 개의 수명을 하나로 조정할 수 있어 RAII가 필요 없습니다.

   이것이 아레나를 의미하시는 거라면, Rust에도 당연히 아레나가 있으며 lifetime으로 아레나를 없앰으로서 ""일괄 해제"" 한 뒤에 아레나의 원소에 접근하는 것을 금지하는 것 또한 가능합니다. https://crates.io/keywords/arena 를 참고하시기 바랍니다.

   저도 나름대로 Rust를 주력 언어로 사용하는 개발자인데 화는 나지 않았으나 좀 극단적인 예시(""그 프로그램을 종료할 때 너무 느리며""라며 링크된 영상에서도 Rust 프로젝트에서의 사례와 직접적 관련은 없는, Visual Studio를 종료할 때 각 개별 컴퍼넌트의 소멸자가 호출되면서 너무 오래 걸린다는 사례를 들고 있습니다)를 들고 오는 게 아닌가 싶긴 합니다.

   성능상 여러 컴퍼넌트의 Clean-up이 한 번에 처리되는 것이 필요한 경우에는 개별 컴퍼넌트에 대해 Drop을 구현하는 대신 해당 컴퍼넌트들의 수명을 들고 있는 타입에서 Clean-up을 한 번에 수행하도록 Drop을 구현하는 방식을 택할 수 있을 것 같습니다. 해당 컴퍼넌트를 그 타입의 API를 통해서만 생성할 수 있게 하는 안전장치를 두면 더 좋을 거고요.

   물론 위 글의 저자분이 우려하는 바는 RAII를 사용하는 관행이 Linux 코드베이스에 들어올 경우 방대한 코드베이스에서의 복잡성 속에서 굉장히 암시적인 성능 우려가 있는 코드가 누적되면서 장기적으로 Visual Studio와 유사한 일이 벌어질 수 있다는 점일 것 같은데 이는 충분히 우려할만한 지점인 것 같습니다. 다만 다른 댓글에서 말씀하신 것처럼 RAII가 제공하는 안정성도 있으니 선택은 다소 트레이드오프라고 봅니다.
"
"https://news.hada.io/topic?id=17906","댐 제거 프로젝트 후 역사적 서식지로 돌아온 산란하는 연어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    댐 제거 프로젝트 후 역사적 서식지로 돌아온 산란하는 연어

    과학 및 환경

      미국 역사상 최대 댐 철거 프로젝트 이후 연어가 역사적 서식지로 돌아와 알을 낳음

     * 클라마스 강의 네 개의 높은 댐이 철거된 지 한 달도 채 되지 않아 수백 마리의 연어가 수십 년 동안 차단되었던 시원한 개울로 돌아와 산란을 시작함.
     * 거대한 암컷 치누크 연어가 얕은 물에서 몸을 뒤집어 강바닥에 둥지를 파고, 수컷들은 알을 수정하기 위해 서로 경쟁함.
     * 오리건-캘리포니아 경계에 있는 클라마스 강과 그 지류를 따라 400마일 이상을 막고 있던 수력 발전 댐을 철거하기 위해 현지 부족들이 수십 년간 싸워왔음.
     * 댐 철거 후, 유로크 부족이 촬영한 비디오에 따르면 수백 마리의 연어가 이전의 철문과 코프코 댐 사이의 지류에 도달했으며, 이는 새롭게 해방된 수로에 대한 희망적인 신호임.
     * 유로크 부족의 회장인 조셉 L. 제임스는 ""연어가 이전 댐 위에서 산란하는 것을 보니 마음이 벅차다""며 ""우리의 연어가 집으로 돌아오고 있다""고 말함.
     * 클라마스 강은 남부 오리건의 수원지에서 시작하여 북부 캘리포니아의 산악 숲을 가로질러 태평양으로 흘러감.
     * 10월 2일에 완료된 수력 발전 댐 철거 프로젝트는 현지 부족들에게 큰 승리를 안겨줌. 부족들은 시위, 증언, 소송을 통해 댐이 환경에 미치는 파괴적인 영향을 보여주었으며, 특히 연어가 역사적 서식지에서 차단되고 수질 악화로 인해 대량으로 죽어가는 문제를 강조함.
     * 댐 철거 이후 유해 조류 번식이 감소했으며, 10월의 낮 기온은 지난 9년 동안 같은 달에 비해 평균 8도 섭씨(14도 화씨) 낮았음.
     * 카룩 부족의 어업 프로그램 관리자 토즈 소토는 ""올해 올라온 물고기들은 정말 건강했다""며 ""수온이 이미 물고기의 건강에 영향을 미치고 있다""고 말함.
     * 전문가들은 접근할 수 없었던 지류에 빠르게 도달한 연어의 수가 고무적이라고 평가함. 오리건 어류 및 야생동물부의 마크 헤어포드는 ""연어가 좋은 서식지가 어디인지, 서식지가 부족한 곳이 어디인지 보여주고 있다""고 말함.
     * 파워 회사인 퍼시픽코프는 1918년부터 1962년 사이에 전기를 생산하기 위해 댐을 건설했으나, 이는 서부 해안에서 세 번째로 큰 연어 생산 강으로 알려진 강의 자연 흐름을 막았음.
     * 댐은 퍼시픽코프의 전체 에너지의 일부만 생산했으며, 관개, 식수, 홍수 조절을 제공하지 않았음.
     * 유로크 부족의 어업 부서장 배리 맥코비 주니어는 ""이 많은 연어의 귀환이 예상보다 빨리 이루어졌으며, 강의 미래에 대한 희망을 준다""고 말함.

        Hacker News 의견

     * 동물의 행동은 타고난 본능과 학습된 행동의 이상한 조합을 가짐
          + 비버의 댐 건설 행동은 흐르는 물 소리에 대한 싫어함에서 비롯됨
          + 실험에서 스피커로 물 소리를 재생하자 비버들이 막으려는 행동을 보임
     * 연어의 기억에 대한 많은 논의가 있지만, 단순히 좋은 장소를 찾은 것일 수도 있음
          + 연어가 어느 정도 유연성을 가지고 생존할 가능성이 있음
     * 댐 제거에 대한 흥미로운 기사를 읽었음
          + 기사에서는 댐 제거에 대한 양측의 이야기를 공정하게 다룸
          + 지역 주민 중 반대하는 사람도 있었고, 부족을 포함한 강력한 옹호 그룹도 있었음
          + 기사를 읽고 양측의 입장을 더 잘 이해하게 되었지만, 올바른 선택에 대한 확신은 줄어듦
     * 팟캐스트 Gastropod에서 댐과 연어에 대한 훌륭한 에피소드를 다룸
     * Klamath 강의 모든 댐에는 연어가 상류로 올라가 산란할 수 있는 어도가 있었음
          + 댐 제거로 인해 상류로 올라가는 물고기의 수가 증가함
          + 일부 어도는 유리 벽이 있어 사람들이 물고기가 오르내리는 모습을 볼 수 있었음
     * 북서부 지역에 연어가 서식하는 하천을 소유하고 있어 행운임
          + 연어는 그들의 생애 주기를 통해 매우 영감을 주는 종임
     * 적절한 연어 ""엘리베이터""를 설계하지 못한 것에 놀라움
          + 댐 제거 비용을 고려할 때, 첨단 기술의 로보 엘리베이터를 만들어 물고기를 상류로 옮기는 것이 가능할 것 같음
          + 댐 기슭에 거대한 그물을 설치해 물고기를 잡아 이상적인 다음 단계로 자동 운송하는 방법 제안
     * 캐나다 브리티시 컬럼비아 해안에서는 해양 어장 제거로 인해 핑크 연어의 수가 다시 급증함
     * 더 많은 태양광과 원자력으로 인해 이러한 프로젝트가 더 많이 가능해질 것임
"
"https://news.hada.io/topic?id=17924","고대 시리아 도시에서 발굴된 가장 오래된 알파벳 문자 증거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    고대 시리아 도시에서 발굴된 가장 오래된 알파벳 문자 증거

     * 고대 시리아 도시에서 발견된 가장 오래된 알파벳적 글쓰기 증거
          + 존스 홉킨스 대학교 연구팀이 시리아의 한 무덤에서 발굴한 손가락 길이의 점토 실린더에 인류 역사상 가장 오래된 알파벳적 글쓰기의 증거가 새겨져 있음
          + 이 글쓰기는 기원전 2400년경으로 추정되며, 다른 알려진 알파벳적 스크립트보다 약 500년 앞서 있음
          + 이는 알파벳의 기원, 사회 간의 공유 방식, 초기 도시 문명에 대한 새로운 통찰을 제공함
     * 알파벳의 혁신적 역할
          + 알파벳은 왕족과 사회 엘리트 외의 사람들에게 글쓰기를 접근 가능하게 하여 생활 방식, 사고 방식, 의사소통 방식을 변화시켰음
          + 이번 발견은 사람들이 새로운 의사소통 기술을 훨씬 이전에 다른 장소에서 실험하고 있었음을 보여줌
     * 발견의 세부 사항
          + 글렌 슈워츠 교수는 이번 발견을 11월 21일 해외 연구 연례 회의에서 발표할 예정임
          + 슈워츠 교수는 시리아 전역의 초기 도시 지역 발전과 중소 도시의 출현을 연구하는 근동 고고학자임
          + 암스테르담 대학교와 공동으로 서부 시리아의 중형 도시인 텔 움엘 마라에서 16년간 고고학 발굴을 진행함
     * 텔 움엘 마라에서의 발굴
          + 초기 청동기 시대에 속하는 무덤을 발견하였으며, 그 중 하나는 잘 보존된 상태로 여섯 개의 해골, 금과 은 장신구, 조리기구, 창끝, 완전한 도자기 용기를 포함함
          + 도자기 옆에서 알파벳적 글쓰기가 있는 네 개의 가볍게 구운 점토 실린더를 발견함
     * 알파벳의 기원에 대한 새로운 시각
          + 이전에는 알파벳이 기원전 1900년 이후 이집트에서 발명된 것으로 여겨졌으나, 이번 발견은 알파벳의 기원이 전혀 다른 이야기일 수 있음을 시사함

        Hacker News 의견

     * 인간이 수만 년 동안 집을 짓고, 그림을 그리고, 밧줄을 만들고, 항해를 했으면서도 글쓰기를 발명하지 않았다는 것을 믿기 어렵다는 의견이 있음
          + 아마도 우리가 아직 발견하지 못한 것일 수 있음
     * 알파벳 글쓰기는 정말 놀라운 것임
          + 개인적으로 음절문자를 선호하지만, 알파벳이 다른 언어에 채택된 것은 대단한 일임
          + 알파벳은 매우 유연하여 다양한 언어에 적용 가능함
     * 라틴 알파벳은 영어, 터키어, 인도네시아어, 스와힐리어 등 다양한 언어에서 사용됨
          + 이렇게 많은 언어가 하나의 글쓰기 시스템을 따르는 것은 알파벳으로만 가능함
          + 중국 문자나 한국 한글로는 불가능함
     * 알파벳 글쓰기는 쐐기문자나 상형문자보다 더 최근의 것임
     * 번역할 수 없다면 어떻게 알파벳인지 알 수 있는지 궁금하다는 의견이 있음
          + 번역 수단이 없으면 추측만 가능하다고 함
     * 만약 사실이라면 인상적임
          + 탄소 연대 측정 방법의 정확성이 궁금함
          + 알파벳이 수백 년 동안 고립되어 있었다는 것이 이상하게 느껴짐
     * languagehat의 댓글에서 이에 대한 정보가 있음
     * 새로운 알파벳이 알려진 것들과 비교된 부분을 찾을 수 없었음
          + 페니키아어나 아람어와 가까운지 궁금함
     * 음악 스케일이나 직조 패턴, 기초 인코딩된 숫자일 수도 있다는 의견이 있음
          + 이집트 문자는 약 5000년 전으로 거슬러 올라가며, 셈족 언어이므로 같은 범주에 속할 가능성이 있음
          + 이러한 고고학적 발견을 좋아함
          + 고베클리 테페에서 더 오래된 문서가 발견될지 궁금함
          + 현재 연구자들에게 개방되지 않은 상태임
     * CHON? (의미 불명)
"
"https://news.hada.io/topic?id=17983","ZetaOffice: 브라우저에서 사용하는 LibreOffice","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ZetaOffice: 브라우저에서 사용하는 LibreOffice

     * ZetaOffice는 LibreOffice를 브라우저에서 사용할 수 있게 함
          + 사용자는 어떤 기기에서든 작업할 수 있으며, 자체 호스팅이나 CDN을 통해 데이터 제어 가능
          + 기존 시스템과의 매끄러운 통합을 제공
     * ZetaOffice의 장점
          + 데이터 보안을 유지하면서 다양한 기기에서 접근 가능
          + LibreOffice의 기능을 활용하여 비즈니스에 이용
     * ZetaOffice 데스크톱 버전
          + 데스크톱 환경에서도 ZetaOffice를 사용할 수 있는 옵션도 제공
     * Allotropia Software는 LibreOffice를 통해 비즈니스를 지원하는 회사

        Hacker News 의견

     * ASUS Zephyrus G15 2021 노트북에서 ZetaOffice 데모를 시도했으나 성능이 매우 나쁨. 텍스트 렌더링과 입력이 제대로 작동하지 않음. 특정 메뉴를 시도했을 때 앱이 충돌함. 50MB 다운로드 후 시작 가능함.
          + ZetaOffice의 성능 문제는 웹 기술과 관련된 부분이 많아 수정이 어려울 것으로 보임.
          + 실제 DOM을 타겟으로 하지 않고 캔버스만 사용하면 좋은 결과를 얻기 어려움.
     * ZetaOffice가 Linux와 Windows용 데스크톱 애플리케이션으로도 제공됨.
          + LibreOffice와 호환된다면 데스크톱 애플리케이션을 개발하는 이유가 궁금함.
          + 데스크톱 애플리케이션이 최신 LibreOffice 릴리스와 동등한 수준인지, 특정 버전까지의 문서 형식 호환성만 보장하는지 궁금함.
     * 브라우저에서 LibreOffice를 사용하고 싶지 않음. 브라우저가 이미 느림.
          + 다음은 Blender나 OS를 브라우저에서 실행하는 것인가? 이미 존재함.
     * Nextcloud와의 상호작용을 통해 LibreOffice를 WASM 기반으로 통합하면 좋은 추가 기능이 될 것임.
          + Nextcloud는 OnlyOffice를 통합하여 Google Docs와 유사한 솔루션을 제공함.
     * Zeta.js는 인상적인 JavaScript 라이브러리임. 문서를 10줄 미만으로 로드하고 셀 색상을 변경하는 예제가 놀라움.
          + 저장소에 gulp 파일이 있는 것도 놀라움.
     * 기술적으로 놀라운 성과이지만, 폰트 렌더링 등 해결해야 할 문제들이 있음. 향후 발전이 기대됨.
     * 애니메이션 광고가 매력을 떨어뜨림.
          + LibreOffice/OpenOffice/StarOffice를 20년간 사용했으며, Microsoft 데스크톱 형식과의 상호운용성이 개선됨.
     * ZetaOffice 데모에서 Tools -> Options를 시도하면 콘솔에 unreachable 오류가 발생함.
          + hiDPI 인식이 부족하여 MacBook의 레티나 화면에서 불행하게 보임.
     * 읽기 전용 모드로 전환이 쉬운지 궁금함. WASM 빌드가 가능한지 몰랐음.
     * 브라우저에서 LibreOffice를 테스트한 기억이 있으며, 2020년에 프로젝트가 중단된 것으로 보임. Docker에 대한 가이드가 있음.
"
"https://news.hada.io/topic?id=17989","공장에서 Apple이 잘못 납땜한 커패시터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        공장에서 Apple이 잘못 납땜한 커패시터

    애플이 공장에서 잘못 납땜한 커패시터

     * 애플의 매킨토시 LC III 모델에서 커패시터가 거꾸로 설치되었다는 소문이 있음. LC III는 1993년 초부터 1994년 초까지 주로 교육 시장을 대상으로 생산된 모델로, 다양한 소비자용 Performa 모델로도 출시되었음.
     * 필자는 최근 Performa 450을 구입하여 이 문제를 직접 확인할 수 있었음. 커패시터 C19, C21, C22가 모두 PCB 실크스크린의 + 기호와 반대로 설치되어 있었음.
     * C21은 심하게 누출되어 납땜 마스크와 구리층을 손상시켰음. 이 커패시터들은 전원 공급 장치의 세 가지 전원 레일에 각각 연결되어 있음.
     * C22의 경우, 양극 단자가 -5V 핀에 연결되어 있어 시스템이 켜지면 -5V가 걸리게 됨. 이는 커패시터의 올바른 연결 방식이 아님.
     * 원래의 매킨토시 LC와 LC II에서는 올바르게 설치되었으며, LC 475에서도 이 문제는 해결되었음.
     * 이 문제는 실크스크린과 공장 설치 모두 잘못된 것으로, 많은 사람들이 이 문제를 인식하지 못하고 있음.
     * 원래 설치된 전해 커패시터는 이 오류를 어느 정도 견딜 수 있었으나, 현대의 탄탈 커패시터는 그렇지 않음. 잘못된 방향으로 설치된 경우, -5V 레일에 잘못된 전압이 발생할 수 있음.
     * 결론적으로, LC III의 C22는 실크스크린과 반대로 설치해야 함. 커패시터의 양극은 접지에, 음극은 -5V에 연결되어야 함.

    댓글

     * Guy Dunphy: C21이 실패한 것이 흥미롭다며, 전해 커패시터의 제조 과정에 대해 설명함.
     * Doug Brown: 모든 전해 커패시터가 누출되었으며, 이는 오래된 전자기기에서 흔한 문제라고 언급함.
     * Anonymous: 전해 커패시터의 제조 과정에 대한 다른 의견을 제시함.
     * Joakim: 애플이 이 문제를 알고 있었을 가능성을 제기함.
     * Tech Tangents: 이 문제에 대한 정보를 공유해줘서 감사하다고 언급하며, 다른 제조사에서도 유사한 문제가 발생할 수 있다고 언급함.

        Hacker News 의견

     * 34년 된 컴퓨터의 PCB에 역방향으로 설치된 커패시터를 발견한 경험을 공유함
          + Commodore의 Amiga 4000 CPU 보드인 A3640에 3개의 커패시터가 역방향으로 장착되어 있었음
     * 많은 경우에 이런 실수가 발생하며, 더 어리석은 경우도 있음
          + 몇 년 전 선형 전원 공급 장치를 수리할 때, 서비스 매뉴얼이 없어 역설계를 해야 했고, 전해 커패시터의 두 다리가 모두 접지에 연결된 것을 발견함
     * 80년대 중반, CS 학생 챕터의 책임자로서 과학 학부의 컴퓨터실을 운영했음
          + Apple의 Mac 128k에서 자주 연기가 나는 문제가 있었고, 예비 부품을 준비해 수리 보냈음
          + 개인적으로 가장 좋아하는 Mac은 IIcx였으며, '풀 페이지 디스플레이'와 함께 사용했을 때 꿈같았음
     * 보드를 설계한 사람이 항상 음극을 접지에 연결하는 간단하고 현명한 규칙을 따랐다고 생각함
          + 그러나 -5V의 음전압을 처리해야 할 때 문제가 발생함
     * 2011-2015년 사이, SF Bay Area에서 Apple 재작업 기술자로 일했던 전직 해군 전기 기술자와 대화한 경험이 있음
          + 제조 문제를 해결하고, 재작업 개선을 추가하며, 맞춤형 테스트 장비를 제작했으나, 결국 해고되고 해외로 일자리가 아웃소싱되어 2016년까지 노숙 생활을 했음
     * '대 커패시터 전염병'의 베테랑인 사람도 있음
          + 서버실에서 불량 커패시터로 인한 화재를 여러 번 목격했으며, 서버를 '번인'하는 것이 문자 그대로의 의미가 되었음
     * -5V가 필요하지 않은 기계들이 많음
          + 제공되는 양전압만으로도 RS-422가 작동하며, LocalTalk도 포함됨
          + -5V는 확장 카드가 필요할 경우를 대비한 것일 뿐임
     * 작동하지 않는 오리지널 Mac을 가지고 있으며, 교체할 커패시터가 있을 것이라고 생각함
          + 이를 찾기 위한 동기를 얻음
     * 오래된 커패시터의 액체가 무엇인지 궁금함
          + PCB(폴리염화비페닐)인지 의문을 가짐
          + 전자공학에 대해 충분히 알아서 더 많은 질문을 할 수 있는 수준이라고 생각함
"
"https://news.hada.io/topic?id=17969","자동차 라이다 기술 개요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             자동차 라이다 기술 개요

    자동차 라이다 기술에 대한 간단한 소개

     * 자율주행 차량을 위한 라이다
       라이다는 Light Detection and Ranging의 약자로, 적외선 레이저 빛을 사용하여 원격 객체와의 거리를 측정하는 방법임. 이 기술은 새로운 것이 아니며, 식생, 도시 지형, 숨겨진 고고학적 사이트, 건물 건설 및 증강 현실에 사용되어 왔음. 라이다는 고해상도 이미지를 생성할 수 있는 능력으로 자율주행 차량의 ""눈"" 역할을 하며, 정확한 거리 추정에 필수적임. 그러나 라이다의 단점은 비용이 높다는 것임.
     * 작동 파장
       라이다 시스템은 주로 적외선 영역의 두 가지 파장에서 작동하도록 설계됨: 905 nm (근적외선, NIR) 및 1550 nm (단파 적외선, SWIR). 파장의 선택은 레이저 소스의 출력 전력, 감지기의 민감도 및 자연 및 인공 광원 간섭에 따라 달라짐. 905 nm는 가시광선에 가까워 눈에 해로울 수 있으며, 1550 nm는 눈 안전성이 더 높음.
     * 포토디텍터
       라이다에서 가장 일반적으로 사용되는 감지기는 Avalanche Photodiodes (APDs)이며, 실리콘, 게르마늄, 인듐 갈륨 비소로 제작됨. SPADs는 단일 광자에 반응하여 매우 정확한 거리 측정이 가능함.
     * 거리 측정 기술
          + 직접 비행 시간 (dToF): 레이저 펄스를 방출하고 반사 신호를 감지하여 거리를 측정하는 방법임.
          + 주파수 변조 연속파 (FMCW): 전송된 펄스의 주파수를 변조하여 거리와 속도를 동시에 측정할 수 있음.
     * 기계식 라이다 시스템
          + 스캐닝 라이다: 360° 수평 시야를 제공하며, Waymo의 Laser Bear Honeycomb가 예시임.
          + MEMS-미러 라이다: 움직이는 레이저 소스 대신 MEMS 미러를 사용하여 레이저 빛을 반사함.
     * 고체 상태 라이다 시스템
          + 플래시 라이다: 공간을 사진처럼 캡처하여 실시간 3D 렌더링을 제공함.
          + 광학 위상 배열 (OPA) 라이다: 실리콘 포토닉스를 사용하여 칩에서 스캐닝 라이다를 구현하는 최신 접근 방식임.
     * 참고 자료
       다양한 자료들이 라이다 기술의 방향성과 비교를 제공함.

        Hacker News 의견

     * Velodyne의 회전 스캐너가 여전히 사용되는 것에 놀라움. 비용이 높고, 플래시 LIDAR나 MEMS 거울이 대체할 것으로 예상했음
          + Continental이 플래시 LIDAR 회사를 인수했지만 대량 시장이 형성되지 않았음
          + Waymo는 차량 모서리에 회전 LIDAR를 사용 중이며, 저렴하고 매립형 대체품이 필요함
          + LIDAR의 위치가 취약하며, 밀리미터 위상 배열 레이더가 대안이 될 수 있음
          + LIDAR의 외관이 자동차처럼 보여야 한다는 주장은 초기 자동차가 마차처럼 보여야 한다는 주장과 같음
          + 펄스 LIDAR는 연속 LIDAR에 비해 간섭 문제가 적음
     * Hacker News에서 발견된 LIDAR 장애물 감지 알고리즘
          + 자율주행차 회사의 Git 저장소에서 유출된 알고리즘
          + Velodyne HDL-32E를 위한 코드로, 여러 단계로 작동하며 주요 장애물 감지 방법임
          + NaN 포인트를 처리하며, 캐시 효율적인 행 우선 행렬 레이아웃으로 재작성됨
          + 간단하지만 효과적인 장애물 감지 방법임
     * 자동차용 FMCW LiDAR 개발 경험
          + 시장에 출시되지 못했으며, 비용 절감이 어려웠음
          + 자동차 시장에서 마진이 낮음
     * LIDAR가 운전자나 보행자에게 위험한지에 대한 질문
     * LIDAR의 고해상도 이미지 생성 능력에 대한 의문
          + 자동차 레이더는 고정되어 있으며, LIDAR도 고정되어 있을 것임
          + 회전 레이더는 연속 해상도를 제공하며, LIDAR는 샘플링함
          + LIDAR는 정확성과 높이 측정에 강점이 있음
     * LIDAR 기술에 대한 긍정적인 의견과 Musk의 반대
     * 소비자용 레이저 포인터로 LIDAR가 무력화될 수 있으며, 이를 방어하는 시스템이 있는지 궁금함
     * LIDAR의 높은 비용과 소형화 필요성
          + 시간이 지나면 해결될 문제이며, 충분한 엔지니어링 노력이 있음
     * 고해상도로 집을 스캔할 수 있는 LIDAR 유닛에 대한 질문
"
"https://news.hada.io/topic?id=17976","React Native v0.77.0 첫 RC 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     React Native v0.77.0 첫 RC 릴리스

     * iOS 지원 개선: Swift 템플릿 지원 추가(AppDelegate.swift), RCTDependencyProvider 사용으로 구조 최적화
     * Native API 안정성 강화: 주요 네이티브 API 내부화 및 타입 안정성 향상
     * tvOS 통합 강화: Hermes 아티팩트 지원 추가
     * 애니메이션 성능: Animated 성능 개선 및 memoization 최적화
     * iOS 접근성 강화: 고대비 모드 시스템 설정 감지 기능 추가
     * Deprecated 및 제거: 이전 아키텍처 API와 미사용 인터페이스 삭제
     * 기타 업데이트: React DevTools v6.0.0, Metro v0.81.0, Folly v2024.10.14.00

   rn은 꾸준히 업데이트 하는데 메이저 버전은 언제 나올런지..

   axios 보는 기분입니다 ㅋㅋ

   같이 보면 좋은 링크:
     * Swift Template: https://github.com/react-native-community/template/pull/45
     * https://news.hada.io/topic?id=17425
"
"https://news.hada.io/topic?id=17961","Kyanos - eBPF 기반의 네트워크 이슈 분석 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Kyanos - eBPF 기반의 네트워크 이슈 분석 도구

     * HTTP, Redis, MySQL 등의 네트워크 요청을 캡처하고, 복잡한 패킷 캡처와 분석 과정 없이 빠르게 네트워크 문제를 해결할 수 있게 도와줌
     * 강력한 트래픽 필터링: IP/포트뿐 아니라, 프로세스, 컨테이너, L7 프로토콜, 요청/응답 크기, 지연 시간 등을 기반으로 필터링 가능
     * 고급 분석: tcpdump와 달리 패킷 메트릭을 다양한 차원에서 집계하고, 빠르게 문제를 파악할 수 있는 중요한 데이터를 제공함
     * 커널 수준의 지연 시간 분석: 요청이 네트워크 카드에서 커널 소켓 버퍼에 도달하는 과정을 추적하여 각 단계의 지연 시간을 시각적으로 보여줌
     * 경량 및 무종속성: 단일 바이너리 파일로 작동하며, 모든 결과는 커맨드 라인에서 표시됨
     * 자동 SSL 트래픽 복호화: 캡처된 모든 요청과 응답을 평문으로 표시함
"
"https://news.hada.io/topic?id=17898","MS Office Excel에 Python 통합","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       MS Office Excel에 Python 통합

   MS 오피스 엑셀에 파이썬이 통합되었습니다.

   셀에 =PY() 함수를 사용하여 파이썬 코드를 입력할 수 있습니다. 파이선 코드 내에서는 xl() 함수를 사용해 엑셀 객체(셀, 시트 등)을 참조합니다.

   파이썬 코드는 MS Cloud에서 실행됩니다. 즉 파이썬 기능을 사용하려면 반드시 인터넷 연결이 있어야 합니다.

   Excel의 Python은 버전 2407(빌드 17830.20128)부터 Enterprise 또는 Business Microsoft 365 구독을 사용하는 고객에게 배포되었습니다.

   libreoffice쪽은 도입 계획이 어떻게 되고있나요?

   진짜 구글 시트나 리브레오피스에서 이거 무료로되면 갈아타거나 병행사용할 생각 있습니다..!

   excel과 연동되는진 모르겠지만 이런걸 찾긴 했습니다. https://github.com/Amourspirit/python_libre_pythonista_ext

   다른환경에서 실행되는 값을 사용하는 엑셀.. 흠..

   엔지니어링 측면에서는 오피스 웹 인터페이스도 자주 사용을 하니까... 일단은 비슷한 방식으로 처리하는 게 가능한 선택지인 것 같긴 합니다.
   그리고 이미 구글은 전부 온라인이고 회사에서 코딩 AI 도 다 쓰고 있으니..
   그래도 온라인 파이썬 기능이 동작하기 전에 강력한 보안 경고를 표시하긴 해야 말이 덜 나오겠네요...

   저희 회사에선 보안 때문에 도입이 어렵겠네요.

   왜 VBA랑 다르게 엑셀에 언어를 내장시키지 않는지 모르겠어요

   참 마이크로소프트다운 선택이네요. 나중 가면 모든 앱을 클라우드에서 실행되게 바꾸는 것 아닌가 몰라.

   김대리, 엑셀 PY 팡션? 사용 하지 마세요. 위험성이 증대하죠 (진짜임)

   ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ

   파이썬을 사용하기 위해서 인터넷 연결이 필요하게 만든건 대체 뭘 하자는건지 모르겠습니다. 윈도 로컬 계정을 MS 계정으로 전환하게 유도하는것도요.

   이미 파이썬을 통합한 다른 어플리케이션들처럼 엑셀에 파이썬 런타임을 내장하는게 어려웠던건 아닐테고, 어떻게든 자사 클라우드에 잡아놓고 싶은가봅니다.

   덕분에 두 가지 문제가 발생합니다.
   하나는 저처럼 인터넷이 없는 환경에서 일하는 사람들은 기능을 쓸 수 없다는 것이고, 다른 하나는 이제 보안에 민감한 기업/기관은 엑셀 파일의 어디서부터 어디까지가 계산을 위해 전송되는지 따져봐야 할 것 같네요.
"
