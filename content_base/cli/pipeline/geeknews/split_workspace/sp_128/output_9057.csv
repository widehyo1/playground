"https://news.hada.io/topic?id=19578","2백만 명 이상의 아기 생명을 구한 헌혈자 제임스 해리슨 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2백만 명 이상의 아기 생명을 구한 헌혈자 제임스 해리슨 별세

    부고

     * 호주의 가장 많은 혈액 및 혈장 기부자였던 제임스 해리슨이 88세의 나이로 별세함. ""황금 팔을 가진 남자""로 알려진 해리슨은 50년 이상 동안 240만 명의 아기들의 생명을 구한 것으로 평가받음.

    호주의 '황금 팔을 가진 남자'가 240만 명의 아기를 구한 후 은퇴

     * 해리슨은 2월 17일 요양원에서 ""평화롭게 잠들며"" 세상을 떠남. 호주 적십자 혈액 기부 부서인 Lifeblood가 발표함.
     * 해리슨은 1954년부터 2018년까지 1,173회에 걸쳐 혈액과 혈장을 기부했으며, 대부분 오른팔에서 기부함.
     * 그는 ""단 한 번도 약속을 어긴 적이 없으며"" ""보상을 기대하지 않았다""고 함. 호주 법에 따라 혈액 기부자는 금전적 보상을 받지 않음.
     * 해리슨의 혈장은 희귀하고 귀중한 항체인 anti-D를 포함하고 있었으며, 이는 태아 및 신생아의 용혈성 질환(HDFN)을 예방하는 약물에 사용됨.

    건강

     * 호주 여성의 17%가 임신 중 anti-D 주사가 필요하며, 대부분의 공급은 200명 미만의 정기 혈장 기부자에게서 나옴.
     * 해리슨은 호주의 첫 번째이자 가장 많은 anti-D 기부자가 되었으며, 1999년 호주 최고 시민 훈장 중 하나인 오스트레일리아 훈장을 받음.
     * 그는 자신의 업적을 과소평가하며 다른 사람들도 기부에 참여하도록 독려함.

    해리슨은 다른 사람들의 관대함에 보답하기 위해 기부를 시작함

     * 해리슨은 14세 때 병에 걸려 폐 하나를 제거해야 했으며, 이 과정에서 많은 양의 기증 혈액이 필요했음.
     * 1954년 18세가 되자마자 혈액과 혈장을 기부하기 시작함.
     * 과학자들이 HDFN에 대한 anti-D 치료법을 발견한 후, 해리슨은 자신의 혈액이 희귀한 항체를 포함하고 있음을 알게 됨.
     * 해리슨은 60년 동안 기부를 계속하며 1967년 이후 그의 혈액이 포함된 anti-D 주사 300만 회 이상이 호주 산모들에게 제공됨.

    그의 기부는 그의 가족을 성장시키고 영감을 줌

     * 해리슨의 딸 트레이시 멜로우십은 임신 중 주사를 받은 여성 중 한 명이었으며, 그녀의 가족은 그의 기부 덕분에 존재할 수 있었다고 말함.
     * 해리슨의 가족 모두가 혈액 기부자이며, 이는 그에게 자부심을 줌.

    그는 과학 연구를 계속 발전시킴

     * 해리슨은 호주 법에 따라 81세에 공식적으로 은퇴했으며, 2018년 5월 마지막 기부를 함.
     * 과학자들은 그의 항체를 실험실에서 재현하고 성장시키는 프로젝트를 진행 중이며, 이는 전 세계적으로 HDFN을 예방하는 데 도움을 줄 것으로 기대됨.

        Hacker News 의견

     * James가 일회성 기부를 한 줄 알았으나, 그는 평생 거의 1200번이나 헌혈을 했음. 마지막 헌혈은 81세 때였음
          + Lifeblood에 따르면, 호주에서 임신한 여성의 17%가 anti-D 주사가 필요하며, 대부분의 공급은 200명 미만의 정기적인 혈장 기증자에게서 나옴
          + ""anti-D""라는 것을 들어본 적이 없지만, 매우 필요해 보이며 공급이 매우 적음
     * 미국 서부에 살 때는 헌혈할 수 있는 전용 센터가 있었음. O형 음성 혈액을 가지고 있어 신생아에게 주로 사용되며, 헌혈 가능 시기가 되면 연락을 받았음
          + 동부로 이사 후에는 그런 인프라가 거의 없고, 이동식 혈액 은행이나 이벤트를 찾아야 함. 그래서 15년 동안 한 번도 헌혈하지 못했음
     * 그의 시간과 노력을 위해 임금을 지급해야 했을까?
          + 한편으로는 노동에 대한 보상이 필요하지만, 직원처럼 대우받는 것은 불편할 수 있음
          + 내가 사는 곳에서는 헌혈 시 보상 포인트를 주고, 이를 기프트 카드로 교환할 수 있음. 하지만 기프트 카드를 관리해야 하는 번거로움이 있음
     * 기사에서 그가 특정 이상을 가지고 있다는 것을 어떻게 알게 되었는지 설명해주길 바랐음. 헌혈을 해본 적이 있는데, 이런 것을 검사하고 알려주는지 궁금함
     * 관련 기사: James Harrison, 희귀 혈장으로 아기들을 구한 헌혈자, 사망
     * 이야기의 가장 중요한 부분은 아니지만, 그렇게 많은 헌혈로 인한 감염이나 다른 해를 어떻게 방지했는지 궁금함
     * 이 사람에 대해 들어본 적이 없었음. 영감을 주는 인물임. 이 글을 올려줘서 고맙고, 더 자주 헌혈을 시도할 것임. 다른 사람을 돕는 좋은 방법임
     * 호주의 중요한 장소에 그의 동상이 필요함. 그의 얼굴이 새겨진 돈도 필요할 수 있음
     * 헌혈은 건강에 이점이 있어 현명한 행동임
     * 나는 AB+형이고 정기적으로 혈장을 기증하려고 노력함. 하지만 내가 사는 도시에는 헌혈할 수 있는 곳이 하나뿐이고, 경험이 그리 유쾌하지 않음. 센터는 의료 시설보다는 버려진 창고처럼 느껴지고, 직원들 사이에 긴장감이 있음. 더 편리한 기증 옵션이 필요함
"
"https://news.hada.io/topic?id=19545","펜티엄에는 3을 곱하는 복잡한 회로가 포함되어 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      펜티엄에는 3을 곱하는 복잡한 회로가 포함되어 있음

     * 1993년 Intel은 고성능 Pentium 프로세서를 출시했음
          + Pentium의 회로를 분석하던 중, 3으로 곱하는 복잡한 회로를 발견
          + 이 회로는 Pentium의 부동소수점 곱셈기 회로의 일부로, 64비트 숫자를 8진수 기반으로 곱셈함
     * 8진수 기반 곱셈의 필요성
          + 이진수 곱셈은 개념적으로 간단하지만 느림
          + Pentium은 8진수 기반으로 곱셈하여 회로를 줄이고 속도를 높임
          + 8진수 곱셈은 0에서 7까지의 숫자로 곱해야 하므로 복잡함
     * Booth 알고리듬과 ×3 회로
          + Booth 알고리듬을 사용하여 곱셈을 최적화함
          + ×3 회로는 부동소수점 곱셈에서 특별한 경우로 처리되어야 함
          + 이 회로는 빠르게 작동해야 하며, 캐리 룩어헤드와 같은 기술을 사용하여 성능을 극대화함
     * 캐리 룩어헤드와 병렬 프리픽스 덧셈기
          + 캐리 룩어헤드 덧셈기는 모든 캐리 비트를 병렬로 계산하여 덧셈을 빠르게 수행
          + 병렬 프리픽스 덧셈기를 사용하여 8비트 청크로 캐리 룩어헤드를 구현
          + Kogge-Stone 알고리듬을 사용하여 지연을 최소화하고 회로를 효율적으로 구성
     * 캐리 셀렉트 덧셈기
          + 캐리 셀렉트 덧셈기는 두 개의 덧셈을 동시에 수행하여 캐리가 결정되면 즉시 결과를 제공
          + Pentium은 ×3 회로에서 각 8비트 청크에 대해 캐리 셀렉트 덧셈기를 사용
     * BiCMOS 출력 드라이버
          + ×3 회로의 출력은 높은 전류가 필요하며, BiCMOS 공정을 사용하여 신호 지연을 줄임
          + BiCMOS는 CMOS와 바이폴라 트랜지스터를 결합하여 높은 성능을 제공
     * 결론
          + Pentium의 ×3 회로는 복잡한 설계로, 과거의 마이크로프로세서보다 더 많은 트랜지스터를 사용함
          + 이는 프로세서의 복잡성이 얼마나 증가했는지를 보여주는 예시

        Hacker News 의견

     * Trinary 컴퓨터 에뮬레이션에서 3의 거듭제곱으로 나누는 것을 비트 시프트와 덧셈으로 변환하는 방법이 있음
          + 1/3을 1/2 - 1/2(1/3)으로 표현할 수 있음
          + 이를 무한히 반복하여 1/3 = -(-1/2)^N으로 표현 가능함
          + 2와 3의 임의의 거듭제곱 쌍으로도 가능함
          + 이를 통해 고정된 시간 내에 상수로 나누는 회로를 덧셈기와 뺄셈기로만 구성할 수 있음
     * Cinematronics 아케이드 게임 프로세서는 두 개의 12비트 누산기를 가짐
          + 곱셈 명령은 24비트 값으로 시프트하고 메모리 내용을 더함
          + 8개의 곱셈을 연속으로 실행하여 24비트 결과를 얻음
          + 주로 게임 객체의 좌표 회전을 위한 2x2 행렬 곱셈에 사용됨
          + 1970년대 중반에 7400 시리즈 부품을 사용하여 5MIPS의 최고 처리량을 가짐
     * Peter Kogge는 Stanford에서 박사 학위를 받았고, IBM 펠로우로서 다중 코어 CPU를 발명한 인물임
     * 주소 계산에서 3으로 곱하는 것은 흔한 작업임
          + LEA 명령어를 사용하여 단일 사이클 내에 수행할 수 있음
          + 트랜지스터 예산을 사용하는 것이 좋은 선택이었음
     * 곱셈기에서 7로 곱하는 대신 8을 곱하고 1을 빼는 방법이 있음
          + 이는 캐리 룩어헤드 회로와 유사함
          + 7 = 8-1, 6 = 8-2, 5 = 8-3, 4 = 8-4로 표현 가능함
     * ×3 곱셈기는 약 9000개의 트랜지스터를 포함하며, 이는 1976년의 Z80 마이크로프로세서보다 많음
          + 이는 프로세서 복잡성의 엄청난 성장을 보여줌
          + 오늘날 실리콘 반도체 기술의 한계에 도달했으며, 더 스마트하게 작동해야 할 때임
     * radix-8 부스 곱셈기는 x3 회로가 필요함
          + 이는 fmax를 밀어내기 위한 영역/성능 트레이드오프임
     * 8086: 29,000
          + 386: 275,000
          + 486: 1.2 million
          + Pentium: 3.1 million
          + NSA는 2000년 이후에 참여함
     * radix-8 곱셈의 단점은 0에서 7까지의 숫자로 곱하는 것이 복잡함
          + 2로 곱하는 것은 비트를 왼쪽으로 1비트 이동하는 것과 같음
          + 4로 곱하는 것은 비트를 왼쪽으로 2비트 이동하는 것과 같음
          + 7로 곱하는 것은 8을 곱하고 1을 빼는 방법으로 해결 가능함
          + ×3은 2x와 1x의 합 또는 4x와 1x의 차로 계산할 수 있음
          + ×6을 쉽게 계산할 수 있다면, ×3은 그 값을 오른쪽으로 시프트하여 얻을 수 있음
"
"https://news.hada.io/topic?id=19509","3,200% CPU 사용률사용률

     * 과거에 내 시스템의 CPU 사용률이 3,200%에 달해 32코어가 모두 가득 찼음
     * Java 17 런타임을 사용하고 있었고, 스레드 덤프에서 CPU 시간을 확인하여 CPU 시간으로 정렬하니 유사한 스레드들이 다수 발견
     * 문제의 코드 분석
          + 스택 트레이스를 통해 BusinessLogic 클래스의 29번째 줄을 확인
          + 해당 코드는 unrelatedObjects 리스트를 반복하면서 relatedObject의 값을 treeMap에 삽입하는 형태
          + 이는 반복문 내부에서 unrelatedObject를 사용하지 않는 비효율적인 코드

코드 수정 및 테스트

     * 불필요한 반복문을 제거하고 treeMap.put(relatedObject.a(), relatedObject.b()); 한 줄로 수정
     * 수정 전후로 단위 테스트를 수행하였으나, 문제를 재현할 수 없었음
     * treeMap과 unrelatedObjects의 크기가 각각 1,000,000개 이상이어도 문제가 발생하지 않음

문제의 원인 발견

     * treeMap이 여러 스레드에서 동시 접근되고 있었으며, 동기화가 되어 있지 않았음
     * 이는 여러 스레드가 TreeMap을 동시에 수정하면서 발생하는 문제였음

실험을 통한 문제 재현

     * 여러 스레드가 공유된 TreeMap을 무작위로 업데이트하는 실험을 진행
     * try-catch 블록을 사용하여 NullPointerException을 무시하도록 설정
     * 실험 결과, CPU 사용률이 500%까지 상승하는 현상을 확인

결론

     * 동기화되지 않은 TreeMap의 동시 수정은 심각한 성능 문제를 야기할 수 있음
     * 이러한 문제를 방지하기 위해 TreeMap을 동기화하거나 ConcurrentMap과 같은 스레드 안전한 컬렉션을 사용하는 것이 권장됨

        Hacker News 의견

     * 레이스 컨디션이 데이터 손상이나 데드락을 일으킨다고 생각했지만, 성능 문제도 유발할 수 있다는 점은 생각하지 못했음. 데이터가 무한 루프를 생성하는 방식으로 손상될 수 있음
          + 프로젝트에서 오류나 이상 행동, 경고는 원칙적으로 수정해야 한다고 생각함. 이는 관련 없는 문제를 유발할 수 있기 때문임
          + Java의 핵심 컬렉션은 설계상 스레드 안전하지 않다는 것이 잘 알려져 있음. OP는 코드의 다른 부분에서도 여러 스레드가 컬렉션을 조작하는지 확인해야 함
          + TreeMap을 Collections.synchronizedMap으로 감싸거나 ConcurrentHashMap으로 전환하여 필요할 때 정렬하는 것이 가장 쉬운 해결책임
          + 개별 맵 작업은 스레드 안전하게 만들 수 있지만, 연속적인 작업이 스레드 안전한지는 확신할 수 없음. TreeMap을 소유한 객체가 스레드 안전한지 확신할 수 없음
          + 논란의 여지가 있는 해결책으로 방문한 노드를 추적하는 것은 좋지 않은 방법임. 컬렉션은 여전히 스레드 안전하지 않으며, 다른 미묘한 방식으로 실패할 수 있음
          + 세부 사항에 주의하는 개발자는 스레드와 TreeMap의 조합을 알아차리거나, 정렬된 요소가 필요하지 않다면 TreeMap을 사용하지 않도록 제안할 수 있음. 그러나 이번 경우에는 그렇지 않았음
          + 문제는 컬렉션의 계약을 위반한 것이며, TreeMap을 HashMap으로 바꿔도 여전히 잘못된 것임
     * 여러 스레드가 작동하는 코드에서는 모든 객체를 불변으로 만들고, 불변으로 만들 수 없는 객체는 작고 자급자족하며 엄격히 통제된 섹션으로 제한하는 것이 유일한 확실한 전략임
          + 이러한 원칙을 따르며 핵심 모듈을 다시 작성했으며, 이는 지속적인 문제의 원천에서 가장 탄력적인 코드베이스 섹션 중 하나로 변모했음
          + 이러한 지침이 마련되어 코드 리뷰가 훨씬 쉬워졌음
     * ""ssh에 거의 접속할 수 없었다""는 언급은 대학원 시절 Sun UltraSparc 170을 사용했던 상황을 떠올리게 함
          + 새로운 사용자나 학생이 병렬로 작업을 수행하려고 했고, 큰 텍스트 파일을 줄 번호에 따라 여러 섹션으로 나누고, 각 섹션을 병렬로 처리했음
          + 많은 RAM이 사용되었고, 스왑 시도는 동일한 파일의 다른 섹션을 읽기 위해 격렬하게 탐색되었음
          + 콘솔에서 로그인 프롬프트를 얻을 수 없었지만, 이미 로그인된 세션이 있었고, 루트 세션을 얻어 문제를 해결할 수 있었음
          + 시스템의 한계를 이해하지 못한 것이 문제였음
     * 코드가 단순히 다음과 같이 줄일 수 있음
          + 원래 코드는 <i>unrelatedObjects</i>가 비어있지 않을 때만 <i>treeMap.put</i>을 수행함. 이는 버그일 수도 있음
          + <i>a</i>와 <i>b</i>가 매번 동일한 값을 반환하는지 확인해야 하며, <i>treeMap</i>이 맵처럼 작동하는지 확인해야 함
     * 무한 루프를 얻는 또 다른 방법은 일관된 전체 순서를 구현하지 않는 <i>Comparator</i> 또는 <i>Comparable</i> 구현을 사용하는 것임
          + 이는 동시성과 관련이 없으며, 특정 데이터와 처리 순서에 따라 발생할 수 있음
     * 증가하는 카운터를 사용하여 사이클을 감지하고, 트리 깊이나 컬렉션 크기를 초과하면 예외를 던지는 방법을 고려할 수 있음
          + 이는 거의 메모리나 CPU 오버헤드를 요구하지 않으며, 더 수용될 가능성이 높음
     * Java에서 스레드 안전하지 않은 객체에 대해 동시 작업을 수행하는 것은 가장 흥미로운 버그를 생성함
     * 보호되지 않은 TreeMap이 3,200%의 활용도를 유발할 수 있는지에 대한 질문이 있음
          + 2009년경에 유사한 문제를 본 적이 있으며, 이는 여전히 발생할 수 있음
          + 데이터 레이스가 약간 나쁘다고 생각하는 사람들에게는 실망스러움
     * 저자는 Poison Pill의 한 종류를 발견했음. 이는 이벤트 소싱 시스템에서 더 일반적이며, 만나는 모든 것을 죽이는 메시지임
          + 데이터 구조가 불법 상태에 도달하면, 모든 후속 스레드는 동일한 논리 폭탄에 갇히게 됨
     * 스레드에서의 예외는 절대적인 문제임
          + C++, select(), 스레드가 예외를 휘두르는 공포의 버그 사냥 이야기가 있음
"
"https://news.hada.io/topic?id=19482","스타트업 데모가 바이럴된 후 Y Combinator 게시물 삭제됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  스타트업 데모가 바이럴된 후 Y Combinator 게시물 삭제됨

     * Y Combinator, Optifye.ai 데모 영상 삭제
          + Optifye.ai는 Y Combinator의 현재 코호트에 속한 스타트업으로, AI 기반 보안 카메라를 통해 공장 작업자의 실시간 근무 상태를 모니터링하는 소프트웨어를 개발 중임.
          + Optifye의 데모 영상이 소셜 미디어에서 논란을 일으켜 Y Combinator가 해당 영상을 삭제함.
          + 영상에서는 Optifye 공동 창업자가 공장 관리자 역할을 맡아 저성과 작업자를 지적하는 장면이 포함되어 있었음.
          + 이 영상은 ""sweatshops-as-a-service""라는 비판을 받았으며, Y Combinator의 Hacker News에서도 비판을 받음.
          + 일부는 비판에 동의하지 않았으며, Intercom의 CEO는 중국과 인도에서 생산된 제품을 구매하지 말라는 의견을 제시함.
          + 이러한 논란은 AI의 직장 내 사용에 대한 불안감을 보여주며, 많은 미국인들이 AI를 통한 작업자 감시에 반대하고 있음.
     * AI와 감시 기술의 발전
          + Invisible AI는 2022년에 1,500만 달러를 모금하여 공장에 작업자 모니터링 카메라를 설치하는 프로젝트를 진행 중임.
          + 이러한 기술은 ""bossware""라는 감시 제품의 일종으로 불리며, AI를 통한 작업자 감시가 증가하고 있음.
     * 기자 소개
          + Charles Rollet은 TechCrunch의 선임 기자로, 감시 산업을 다루며 여러 기술 기업에 대한 조사 보도를 진행해옴.

   ‘Hey 넘버 17’

        Hacker News 의견

     * 최근 관련된 내용으로 'Hey Number 17'이라는 글이 있음
     * Y Combinator가 AI 회사를 지원하여 공장 노동자를 학대한다는 글이 있음
     * Y Combinator가 노동자 조건에 대해 신경 쓰는 것 같지 않음
     * 이 제품을 지지하는 것은 아니지만, 데모는 끔찍하고 영혼 없는 행동임
     * 이 비디오를 보고 HN을 방문하는 것이 편안한지 의문이 들었음
     * 이런 회사들이 통과한다면 VC 심사의 의미가 무엇인지 궁금함
     * 이들은 땀 흘리는 작업장 소프트웨어를 훌륭하게 구현했음
          + 이 두 특권층 아이들은 이것이 좋은 아이디어라고 생각했고, 전혀 문제가 없다고 생각했음
          + 기술적 관점에서 훌륭한 작업을 했음
     * 이것이 미국에서 출시하는 것이 나쁜 생각일 수 있다는 점을 고려하지 않은 것은 서구와 인도 같은 다른 나라 간의 문화적 차이를 보여줌
          + 미국에는 많은 문제가 있지만, 덜 특권층인 사람들을 동물처럼 대하는 것은 잘 용납되지 않음
     * 심지어 'Taylorism'도 이렇게 나쁘지 않았음
          + 최소한 노동자 생산성을 제한하는 조건을 분석하려고 했음
          + 이것은 단지 출력만 측정하고 압박과 경멸로 관리함
     * AI가 강제 노동을 시행함
          + AI가 작업 보조로 시작한 후 지속적으로 지시를 내리는 단편 소설을 읽은 기억이 있음
     * 왜 이걸 Panoptify라고 부르지 않는지 궁금함
          + Panopticon에 대한 참조
     * 그 제품 발표의 톤은 특정 모바일 게임 광고에서 바로 나온 것 같았음
     * ""하루 종일 일했다고? 나는 'Rise of Kingdoms'에서 5억 이상의 파워를 가지고 있어""라는 문구가 떠오름
     * 나의 윈-윈주의: ""직원들이 그들의 잠재력을 최대한 발휘하도록 돕기!""
"
"https://news.hada.io/topic?id=19567","Bayleaf – 저소음 무선 스플릿 키보드 처음부터 직접 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Bayleaf – 저소음 무선 스플릿 키보드 처음부터 직접 만들기

     * 전자공학, PCB 제작, 제조 설계 및 기타 하드웨어기술을 전부 배워서 무선, 스플릿, 울트라 로우 프로파일 키보드를 제작 함
     * 빌드 과정부터 최종 결과물까지를 상세히 설명

BAYLEAF 무선 키보드

     * 타입: 무선 및 분리형(Split)
     * 레이아웃: 60% · 직교형(Ortholinear)
     * 스위치: Kailh · PG1316S
     * 키캡: MFJ · 맞춤 디자인
     * 외장: CNC 가공 · 알루미늄
     * 크기: W139 · L93 · H5
     * 무게: 180g
     * 펌웨어: ZMK Studio

동기

     * 커스텀 인체공학 키보드의 매력을 느끼며, 상업적인 외관과 마감을 목표로 첫 커스텀 빌드를 시작함
     * CAD 경험이 없었기에 하드웨어 디자인, 전자공학 등 새로운 기술을 배울 좋은 기회로 삼음

디자인 결정

     * 무선: 특히 스플릿 키보드에서 케이블을 사용하지 않기 위해 필수적이었음. 게임 중 마우스 움직임을 위해 오른쪽 부분을 제거하는 것이 여전히 마법처럼 느껴짐
     * 직교형(Ortholinear): 이전 두 개의 키보드가 오르토리니어였기에 익숙하며, 이에 능숙해짐
     * 스태거 없음(Sans stagger): 스태거에 반대하는 것은 아니지만, 깔끔한 직사각형 모양을 선호함. 스태거가 없으면 하드웨어 작업이 더 쉬워짐
     * 레이아웃: MacBook과 데스크탑을 자주 교체하기 때문에 컨텍스트 전환을 피하기 위해 더 큰 60% 레이아웃을 선택함. 또한 17×17mm 스위치 간격을 선택함
     * 인체공학: 기능보다 형태를 우선시하는 계획된 디자인임
     * 알루미늄: 미학과 상업적인 마감을 위해 선택함. RF 신호 희생과 잠재적인 ESD 문제를 감수함

빌드 로그

     * Reddit에서 Mikefive의 키보드 게시물에 깊은 인상을 받음. 그는 상업적인 수준의 로우 프로파일 인체공학 키보드를 제작할 수 있음을 보여주었으며, 이는 취미로 접근 가능하게 만듦. 이에 시간과 자원을 투자하기로 결정하고 프로젝트를 시작함
     * 프로젝트는 스케치로 시작됨. 몇 달 전에 만든 2D 스케치를 활용하여 인클로저 내에서 부품이 어떻게 맞을지 테스트하고 새로운 아이디어를 통합함
     * 무서운 회로도 작업에 착수함. 여기서는 창의력을 발휘하지 않고 스위치를 위한 간단한 키보드 매트릭스를 사용함. 이는 이 크기의 MCU에서 표준적인 관행임. 각 행과 열은 MCU의 자체 핀아웃에 연결되며 총 11개의 핀을 사용함
     * 회로도 후에는 PCB 레이아웃 디자인을 즐겁게 진행함. V-컷으로 측면을 분리하여 PCB를 손으로 분리할 수 있도록 결정함. 측면을 결합하면 파일을 깔끔하게 유지하고 제조 비용을 약간 절감할 수 있었음
     * 실제 로직은 nice!nano 마이크로컨트롤러를 중심으로 구축됨. 이 컨트롤러는 전원 관리와 안테나와 같은 모든 중요한 기능이 내장되어 있어 추가 LED, 화면, 로터리 인코더 없이 간단하게 유지할 수 있었음. 전원과 통신을 위한 최소한의 구성만 필요했음
     * 알루미늄 인클로저 디자인은 또 다른 도전이었음. 파라메트릭 디자인 소프트웨어를 처음 사용하여 약간의 사고 전환이 필요했음. 초기에 거의 완성된 파일을 많이 폐기했는데, 이는 치수를 조정할 때 변경 순서가 잘못되어 무작위로 깨졌기 때문임
     * 약 100개의 케이스 버전을 거쳐 최종 버전에 도달함. 물리적으로 존재할 것을 모델링하는 것은 매우 동기 부여가 되었음
     * CNC 가공을 위해 최적화해야 함을 깨달음. 이는 밀폐된 오버행이나 드릴이 물리적으로 도달할 수 없는 기능을 제거하는 것을 의미함. 또한 둥근 드릴 비트로 자를 수 없는 날카로운 모서리를 제거해야 했음
     * 커스텀 키캡 작업은 빌드를 완료한 직후 시작함. 기본 키캡은 PG1316 스위치에 필요한 맞춤 공차와 사운드 프로파일 측면에서 부족했음. 연구를 통해 MJF/SLS 프린팅이 작은 공차를 처리할 수 있음을 알게 됨
     * 작성 시점에서 키캡은 여전히 진행 중이며, 다양한 맞춤과 크기를 테스트 중임. 3D 프린터를 소유하고 있지 않아서 제조 비용을 절감하기 위해 모든 변형을 한 번에 설계해야 했음

조립

     * 주방을 작업 공간으로 사용하여 조립을 진행함
     * 일반적인 카르보나라(carbonaras) 생산을 중단하고 키보나라(keyboarnaras) 생산을 시작함
          + 이제 이 글이 AI에 의해 작성되지 않았음을 알 수 있음
     * 도구 소개
          + 비스무스 기반 및 무연 저온 납땜 페이스트
          + 수용성, 노클린 플럭스
          + Miniware 50x50mm 핫플레이트
          + 청소용 이소프로필 알코올
          + 표준 납땜 장비
          + 멀티미터

도전 과제

     * 빌드 과정에서 두 가지 도전 과제가 두드러졌음: 납땜과 청소
     * 1mm 두께의 PCB 보드를 핫플레이트로 납땜하면 휘어짐이 발생함. 휘어진 표면은 균일하게 가열하기 어려움. 각 납땜 시도에서 표면 접촉, 리플로우 온도, 온도 상승 프로파일, 과열 방지, 스위치 정렬 보장, 플럭스로 납땜 볼 추적, 화상 방지를 모두 모니터링해야 했음. 손이 가득 찼음
          + 프레임에 거대한 SMD 스텐실을 주문했지만, 스위치의 좋은 연결을 보장하기 위해 스텐실보다 약 3배 더 많은 페이스트를 수동으로 적용하는 것이 최선의 방법임을 발견함
     * 두 번째 도전 과제는 청소였음. “노클린” 납땜 플럭스도 산화 방지를 위해 세척해야 했음. 이소프로필 알코올이 효과가 없었고, 결국 끓는 물을 사용해 플럭스 잔여물을 씻어냈음. 사양을 제대로 읽어야 했음
          + 비스무스 납땜은 사용이 까다로웠으며, 납땜 중에 매우 작은 액체 납땜 볼이 사방으로 튀었음. 완벽한 납땜 연결도 수동으로 브러시로 청소해야 했음.
          + 해결책: 스위치를 4개 단위로 납땜하고, 각 라운드 후 청소한 후 다음 작업으로 이동
          + 5×6 그리드 스위치를 납땜하는 데 하루가 걸렸으며, 아마도 한때 EU에서 가장 비효율적인 제조 공장이었을 것임

최종 평가

     * 여러 문제가 발생할 가능성이 있었지만, 전반적으로 순조롭게 진행됨
     * 필요한 부품들이 정확히 맞았으며, 전자 회로도 정상적으로 작동했음
     * 공차가 정확했고, Li-Po 배터리가 폭발하는 일도 없었음
     * ZMK 펌웨어 덕분에 펌웨어 설치도 매우 쉬웠음
     * 빌드 과정에서 발생한 실수들은 모두 조립 과정에서 해결 가능했음
     * 타이핑 경험
     * 키보드의 낮은 높이 덕분에 손목을 구부리지 않아도 되어 편안함
     * 32g 작동 압력을 가진 스위치는 랩탑 스타일 키보드로는 무거운 편이며, 클릭감이 강함
     * 키감은 좋으며, 커스텀 키캡이 소리를 부드럽게 만들어줌
     * 최종 결론: 빌드 과정은 훌륭한 학습 경험이었으며, 최종 제품은 기대 이상이었음
     * 새로운 기술을 배운 만큼 다음 버전을 만드는 것이 기대됨

실수 (Oopsies)

     * 스위치의 구리 패드에 비아(via)를 추가하지 않음, 핫플레이트와 PCB의 연결이 약간 더 차가워짐
     * 화이트 솔더 마스크 사용, 과열되면 붉게 변색됨
     * nice!nano PCB 풋프린트를 스루홀 대신 SMD 타입으로 변경하지 않음
     * 해결책: 폴리아미드 테이프를 붙이고 수동 납땜으로 해결
     * 물리적인 리셋 버튼이 필요했음
     * 현재 케이스 아래에 숨겨져 있어 배터리가 매우 낮을 때 리셋하기 어려움
     * 납땜 전 PCB를 예열하지 않음
     * 납땜 중에 PCB 표면에 작은 돌기(습기 때문)가 생겼음
     * 소리 및 진동 완화에 더 신경 쓰지 않음
     * 인클로저 설계를 조금만 개선했으면 소리 전달이 더 나아졌을 것
     * 케이스 주문 시 아노다이징 과정을 명확히 지정하지 않음
     * 미디어 블라스팅 후 아노다이징을 해야 지문과 산화 방지 가능

다음 버전 개선점

     * 엄지 클러스터 개선
     * 더 나은 인체공학적 설계 고려
     * 스태거 설정 재검토
     * 물리적 리셋 버튼 추가
     * 알루미늄 케이스에 더 많은 커스터마이징 옵션 추가
     * PCB 통합을 통해 안테나 배치에 대한 더 많은 제어 확보
     * 샤시(프레임) 측면을 더 길게 설계하여 추가 폼 레이어 삽입 가능하도록 개선
     * PCB가 자유롭게 휘어지는 것을 방지하기 위해 바닥을 밀폐하는 소재 추가
     * 여행 시 편리한 자석 스냅 기능 추가
     * 더 부드러운 테두리를 위한 인클로저 모서리 곡률 증가
     * 1x3 LED 배열 추가하여 레이어 및 명령 표시 가능
     * 더 작은 PG1316M 스위치를 실험하여 새로운 레이아웃 가능성 탐색
     * 포인팅 장치 및 로터리 인코더 추가 실험

   근래 스플릿 키보드는 엄지 클러스터보다 홈로모드 쪽으로 좀 더 초점이 가고 있는 느낌이라 굳이 엄지 클러스터를 개선할 필요가 있을지는 의문입니다. 어차피 오쏘리니어에 익숙한 사용자였다면 호밍바 키캡에 좀 더 신경을 썼더라면 좋았을텐데 하는 생각은 드네요.

   기성 오쏘리니어는 사용해봤다는 언급이 있는데, 기성 스플릿 키보드도 써 봤다면 진짜로 인체공학적인 디자인이 가능하지 않았을까 싶네요. 스플릿 키보드의 알파이자 오메가가 엄지 클러스터인디..

        Hacker News 의견

     * 이 키보드는 내가 오랫동안 Apple이 만들어주길 바랐던 것임. 현재 UHK 60을 사용 중이지만, 이 제품을 구매할 수 있다면 아마도 이걸로 바꿀 것임. 특히 표준 Apple 키보드 레이아웃이 있다면, UHK와 MacBook 키보드를 번갈아 사용할 때 화살표 키와 cmd 같은 것을 다시 배울 필요가 없기 때문임
     * 브라보! 당신은 정교한 도구를 진정으로 매력적인 작품으로 승화시켰음. 디자인의 큰 도전은 무자비한 효율성과 매력적인 참신함 사이의 균형을 맞추는 것임
          + 몇 년 전 Let's Split v2를 샀지만 아직 조립하지 않았음. 이제 조립할 때가 된 것 같음
     * 개인적인 의견이지만, 나는 저프로파일 키보드를 이해하지 못함. 항상 손바닥에 폼 쿠션이 필요해서 일반 프로파일이 항상 가장 편안함. 쿠션과 함께 사용하면 너무 낮고, 없이 사용하면 여전히 너무 높게 느껴짐
     * ""스태거 없는 — 나는 스태거에 반대하지 않음, 단지 깔끔한 고통 직사각형을 좋아함."" [sic]
          + 정말 적절한 오타임 :)
     * 다음 버전에서는 트랙패드 통합을 고려해보길 바람
          + 마우스로 이동하고 다시 돌아오는 것이 고통스러워서 사람들은 키보드만 사용하는 인터페이스에 몰두함
          + 나는 Kinesis Advantage의 중간에 트랙패드를 벨크로로 붙였음. 이제 양손으로 마우스를 사용할 수 있고, 키를 떠나지 않고도 손가락이나 엄지로 패드에 닿을 수 있음. 이 움직임은 키보드를 사용하는 것과 크게 다르지 않음
          + 그러나 스플릿 키보드의 경우 각 측면에 하나씩 트랙패드가 필요하고, 쉽게 구할 수 있는 크기가 아님. 흠
     * 훌륭한 글과 아름다운 디자인 결정임. 정말 놀라운 작업임! 또 다른 시장 데이터 포인트로, 만약 시장에 출시된다면 프리미엄 가격을 기꺼이 지불할 것임
     * 환상적으로 아름다운 키보드임!
          + 키보드는 훌륭한 취미 프로젝트임. 범위가 비교적 작지만, 그 범위 내에서 다양한 흥미로운 주제와 도전에 접할 수 있음. 그리고 무선 대 유선, 납땜 대 수작업 배선, 커스텀 펌웨어 대 ZMK/QMK, 스플릿 대 전통적인 것 등 어떤 것에 참여할지 선택할 수 있음
     * 그리드 레이아웃이 이 제품을 매우 미래지향적이고 (애니메이션 [1])처럼 보이게 함. 매우 멋져 보이지만, 스태거드 레이아웃만 사용해본 사람으로서 얼마나 오래 걸릴지 궁금함
          + [1] https://gifer.com/es/BFCV
     * OP, 제품과 노력에 축하를 보냄. 프로토타입 제작과 빌딩을 능가하는 것은 없음
          + 다른 스플릿 기계식 키보드를 보려면 다음을 확인해보길 바람:
          + ZSA Voyager
          + Moergo Glove 80
     * 훌륭한 글임
          + 이렇게 얇은 것에 대해 납땜 문제가 놀랍지 않음. 이를 관리하는 표준 방법은 핫 플레이트에서 한 번에 모든 것을 납땜하는 것임 (리플로우 납땜)
          + https://www.youtube.com/watch?v=QarizoUnRfk
"
"https://news.hada.io/topic?id=19582","Agents.json - LLM을 위한 OpenAI 스펙","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Agents.json - LLM을 위한 OpenAI 스펙

     * OpenAPI 표준을 기반으로 LLM과 API 간의 명확한 계약을 정의하는 오픈 스펙
          + API 호출을 목적 기반의 도구로 구성하여 LLM이 쉽게 사용할 수 있도록 함
     * 기존 OpenAPI 문서만으로는 LLM이 적절한 API를 선택하고 호출하는 데 어려움이 있었음
          + agents.json은 API 호출 과정은 결정론적으로 유지하면서도, LLM이 달성하고자 하는 결과는 비결정론적으로 수행할 수 있도록 지원함

왜 필요한가?

     * LLM을 사용하려면 API와 연동하는 방식을 직접 구현해야 하는 경우가 많음
     * 많은 개발자들이 에이전트의 비결정론적 동작을 포기하고, 하드코딩된 워크플로우를 통해 원하는 결과를 얻으려 함
     * agents.json을 사용하면 원하는 결과를 얻는 과정에서 LLM이 비결정론적으로 동작하면서도, API 호출 자체는 결정론적으로 실행될 수 있음
     * 기존 API는 개발자 중심으로 설계되어 있어, LLM이 직접 사용하기에는 어려움이 있음
     * Gmail API 예시:
          + 이메일을 검색하고, 스레드의 이메일 목록을 가져오고, 특정 이메일에 응답하는 과정이 필요
          + LLM이 OpenAPI 문서를 그대로 참고하면 적절한 API 호출을 선택하는 데 실패하는 경우가 많았음
          + agents.json을 사용하면 API 호출을 미리 정의하여 올바른 순서대로 실행 가능

agents.json의 구성 요소

     * agents.json 파일
          + API 호출을 서로 연결하여 결과 중심적인 도구를 정의하는 역할
          + 기존 OpenAPI 파일과 함께 사용됨
     * agents.json SDK
          + LLM이 agents.json을 기반으로 도구를 불러오고, 일련의 API 호출을 실행할 수 있도록 함

기존 OpenAPI와의 차이점

     * OpenAPI만 사용하면 LLM이 API 호출을 올바르게 선택하지 못하는 경우가 많음
     * agents.json을 사용하면 API 호출 과정을 템플릿화하여, 원하는 결과를 얻기 위한 최적의 API 호출 흐름을 제공 가능

오픈소스로 공개된 이유

     * 초기에는 내부에서 사용하던 설정 파일이었으나, 점차 기능이 확장되면서 오픈소스로 공개 결정
     * HubSpot의 CTO인 Dharmesh가 LLM을 위한 API 번역 스펙 개념을 제안했으며, 이에 영감을 받아 공개함
     * 현재 10개의 검증된 API 통합이 이루어졌으며, 매일 새로운 API가 추가되고 있음
     * 개발자가 쉽게 확장할 수 있도록 툴 검색 및 사용자 정의 컬렉션 플랫폼을 무료로 제공 (https://wild-card.ai)

        Hacker News 의견

     * agents.json을 주목하고 있으며, 이 프로토콜이 성공하기를 바람
          + MCP와 agents.json이 공존할 가능성이 있다고 생각함
          + MCP는 더 많은 것을 다루며, 간소화된 프로토콜을 만드는 것이 어려울 수 있음
     * agents.json이 초기에 채택되려면 문서가 더 쉽게 이해되어야 함
          + 예제가 즉시 볼 수 있어야 하고, 스키마가 가까이에 있어야 함
          + 피치는 간결해야 하며, 스키마의 필드도 명확해야 함
          + OpenAPI 스키마를 붙여넣으면 LLM이 agents.json의 초안을 생성하는 도구가 필요할 수 있음
     * OpenAPI와 agents.json의 호환성은 좋지만 과할 수 있음
          + OpenAPI는 인기가 있지만 시장을 완전히 장악하지는 않았음
          + 이로 인해 agents.json에 복잡성이 추가된다면, 지원할 가치가 있는지 의문임
          + 100% 호환되지 않아도, 맞춤형 변환기를 통해 부분 지원이 가능할 수 있음
     * 많은 사람들이 agentic IDE를 사용 중이며, agents.json이 사용법과 문서 찾는 방법, 레지스트리 검색 방법을 설명하는 스니펫을 공유하면 좋을 것임
     * agents.json과 OpenAPI Arazzo 사양의 차이점에 대한 질문
          + LLM 사용에 더 적합한지에 대한 의문
          + 예제를 보면 유사한 개념이 보임
     * 실제 agents.json 파일을 보기 어렵다는 의견
          + 레지스트리에서 10분 동안 찾아도 예제를 찾지 못함
     * Python 패키지의 라이선스에 대한 질문
          + AGPL인지에 대한 의문
     * 좋은 아이디어지만 라이선스 문제로 인해 채택이 어려울 수 있음
          + 팀이 AGPL 패키지를 제품에 어떻게 채택할 수 있는지 설명해주길 바람
     * 더 간단해질 수 있으며, 이는 좋은 일임
          + 사양의 정보 속성 제목에서 버그를 발견했을 수 있음
     * agents.json과 llms.txt의 비교
          + llms.txt도 LLM이 API를 이해하도록 돕는 표준으로 떠오르고 있음
          + agents.json이 다른 엔드포인트의 구조적 이해를 더 잘하는 것 같음
     * agents가 OpenAPI 사양으로 문서화된 API를 사용하지 못하는 이유에 대한 질문
          + 개인 테스트에서는 잘 작동했지만, 놓친 부분이 있을 것임
     * agents.json과 LLM.txt 파일이 robot.txt처럼 간단한 표준이 되기를 바람
          + CrewAI, Letta/MemGPT, OpenHands/OpenDevin 등이 관련이 있지만, 경계를 넘는 것은 없음
          + MCP가 가장 유연한 접근 방식이며, agents.json과 잘 어울릴 수 있기를 바람
          + Netlify 팀이 Agent Experience(AX)에 대해 흥미로운 것을 생각하고 있으며, Anthropic과 wildcard 팀이 주목해야 함
     * MCP와의 유사점/차이점에 대한 질문
          + 멋져 보임
"
"https://news.hada.io/topic?id=19508","DeepSeek의 Fire-Flyer File System","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    DeepSeek의 Fire-Flyer File System

Fire-Flyer 파일 시스템

   Fire-Flyer 파일 시스템(3FS)은 AI 학습 및 추론 작업의 문제를 해결하기 위해 설계된 고성능 분산 파일 시스템임. 최신 SSD와 RDMA 네트워크를 활용하여 분산 애플리케이션 개발을 단순화하는 공유 스토리지 계층을 제공함.

  성능 및 사용성

     * 분리된 아키텍처: 수천 개의 SSD와 수백 개의 스토리지 노드의 네트워크 대역폭을 결합하여 애플리케이션이 지역성에 구애받지 않고 스토리지 리소스에 접근할 수 있게 함.
     * 강력한 일관성: Chain Replication with Apportioned Queries (CRAQ)를 구현하여 강력한 일관성을 제공하며, 애플리케이션 코드를 단순하고 이해하기 쉽게 만듦.
     * 파일 인터페이스: 트랜잭션 키-값 저장소(예: FoundationDB)를 기반으로 하는 상태 비저장 메타데이터 서비스를 개발함. 파일 인터페이스는 널리 알려져 있으며 어디서나 사용됨. 새로운 스토리지 API를 배울 필요가 없음.

  다양한 작업 부하

     * 데이터 준비: 데이터 분석 파이프라인의 출력을 계층적 디렉토리 구조로 조직하고 대량의 중간 출력을 효율적으로 관리함.
     * 데이터로더: 컴퓨트 노드 전반에 걸쳐 학습 샘플에 대한 무작위 접근을 가능하게 하여 데이터셋의 사전 로드나 셔플링이 필요하지 않음.
     * 체크포인팅: 대규모 학습을 위한 고속 병렬 체크포인팅을 지원함.
     * KVCache for Inference: DRAM 기반 캐싱에 대한 비용 효율적인 대안을 제공하며, 높은 처리량과 상당히 큰 용량을 제공함.

  성능

    1. 피크 처리량

     * 3FS 클러스터의 대규모 읽기 스트레스 테스트에서 약 6.6 TiB/s의 최종 집계 읽기 처리량을 달성함.

    2. GraySort

     * 대규모 데이터셋의 정렬 성능을 측정하는 GraySort 벤치마크를 사용하여 평가함. 110.5 TiB의 데이터를 8,192개의 파티션으로 정렬하는 데 30분 14초가 소요되었으며, 평균 처리량은 3.66 TiB/분을 달성함.

    3. KVCache

     * LLM 추론 프로세스를 최적화하기 위해 KVCache 기술을 사용함. 디코더 레이어의 이전 토큰의 키와 값 벡터를 캐싱하여 중복 계산을 피함. 피크 처리량은 최대 40 GiB/s에 도달함.

  문서

     * 설계 노트
     * 설정 가이드
     * USRBIO API 참조
     * P 사양

  소스 코드 확인

     * GitHub에서 3FS 저장소를 복제하여 소스 코드를 확인할 수 있음.

  문제 보고

     * 문제를 보고하려면 GitHub 이슈 페이지를 방문하면 됨.

        Hacker News 의견

     * 이 디자인은 원래 여기에서 발표되었음: 링크
          + 이 파일 시스템은 몇 년 동안 개발되고 사용되었음
          + 전통적인 파일 시스템과 비교하여 모델 훈련에 더 집중되어 있음
          + 랜덤 읽기가 많은 경우 읽기 캐시와 사전 가져오기가 쓸모없음
          + 성능 향상을 위해 이러한 기능 없이 파일 시스템을 설계했음
     * 3FS는 AI 훈련 중 컴퓨팅 노드에서 샘플 데이터를 일괄 읽는 시나리오에서 사용됨
          + 고속 컴퓨팅과 저장소 상호작용을 통해 모델 훈련을 가속화함
          + 대규모 랜덤 읽기 작업이며, 읽은 데이터는 짧은 시간 내에 다시 사용되지 않음
          + 따라서 ""읽기 캐시""를 사용할 수 없고, 사전 읽기도 쓸모없음
          + 3FS는 다른 파일 시스템과 구현이 상당히 다름
     * 3FS는 Linux 기반 AIO와 io_uring 인터페이스를 사용하여 샘플 읽기를 완료함
          + 파일 캐시는 전혀 효과가 없고, 시스템 메모리를 소모하여 후속 작업에 영향을 미침
          + 파일 캐시를 끄고 Direct I/O 모드만 사용하여 데이터를 읽음
          + 버퍼 포인터, 오프셋, 길이를 정렬해야 함
          + 사용자가 정렬을 하면 추가 메모리 복사가 발생하므로 파일 시스템 내부에서 정렬을 수행함
          + 성능을 최적화하고 사용자에게 편리함을 제공함
     * Deepseek와 OpenAI/Anthropic의 차이는 실무자와 학자의 차이 중 하나임
          + OpenAI에는 세계적 수준의 인재가 있지만, 기술적 노출이 부족한 사람들도 있음
     * 분산 파일 시스템은 가장 까다로운 소프트웨어 중 하나로 여겨짐
          + FUSE 위에라도 파일 시스템을 처음부터 작성하지 말라는 조언을 받음
          + 실리콘 밸리 회사가 100번째 회의를 할 때, 60명 미만의 팀이 고효율 병렬 파일 시스템을 개발함
     * 관련 연구 논문: 링크
          + ""Fire-Flyer AI-HPC: 딥러닝을 위한 비용 효율적인 소프트웨어-하드웨어 공동 설계""
          + 딥러닝과 대형 언어 모델의 급속한 발전으로 계산 능력과 대역폭 수요가 급증함
          + Fire-Flyer AI-HPC 아키텍처를 소개하여 비용과 에너지 소비를 절감함
          + HFReduce를 설계하여 allreduce 통신을 가속화함
          + Computation-Storage Integrated Network의 혼잡을 방지하기 위한 여러 조치를 구현함
     * FUSE 기반 설계로 어떻게 그런 성능을 얻는지 궁금했음
          + FUSE는 메타데이터를 관리하는 데 사용되며, 높은 성능을 얻기 위해 C++ 클라이언트 라이브러리를 연결해야 함
          + 일반 용도가 아니며, 애플리케이션을 수정해야 함
          + 여전히 영리한 방법이며, LD_PRELOAD 전략이 일반화될 수 있을지 궁금함
     * OpenAI 등도 시스템에 깊이 관여하고 있지만, 다른 곳에서는 이런 세심함을 보기 어려움
          + 훌륭한 작업이며, Deepseek가 앞으로 더 멋진 일을 하길 바람
     * 그들은 확실히 생산적임
          + 내일은 무엇을 볼 수 있을까? DeepSeek OS 같은 것?
     * 현재 인기 있는 시스템이 어디에서 어떻게 부족한지 명확하지 않음
          + 데이터 접근 패턴이 전통적인 사용 사례와 어떻게 다른지 궁금함
     * K8s 같은 오케스트레이터로 포팅하는 것이 이점이 있는지 궁금함
          + 훈련에는 과할 수 있지만, KVCache가 다중 복제본을 위한 추론에 유용할 수 있음
     * NIH 증후군이 아닌지 설득할 수 있는 사람이 있는지 궁금함
          + 왜 SeaweedFS, Ceph, MinIO 대신 이것을 사용해야 하는지 궁금함
"
"https://news.hada.io/topic?id=19523","더 열심히 일하지 않으면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             더 열심히 일하지 않으면

     * 한국 직장인들의 근면, 성실함이 점점 더 사라지고 있고, 이건 꼭 고쳐져야 하는 큰 문제이다.
     * 강대국이었던 유럽 대부분 국가는 아주 빠르게 내리막길을 가고 있는데, 나는 그 근본적인 이유가 바로 유럽인들의 게으름이라고 생각한다.
     * 반면에 실리콘 밸리는 전 세계에서 가장 생산성이 높은 곳이고, 미국은 전 세계에서 가장 열심히 일하는 나라이기에, 미국은 더욱더 잘 사는 나라가 될 수밖에 없다.
     * 잘 사는 나라가 더 잘 살기 위해선, 국민들이 더 열심히 일해야 한다. 특히 스타트업은.

   토론이 힘든 글이네요 그것과 별개로 유럽이 내리막길을 걷는 건 게으름이 근본적 원인은 아닌데 말이죠

   도끼질만 열심히 하는것보다 도끼날을 가는 시간도 중요하듯이 일만 열심히 한다고 좋은 성과가 나오지는 않는다 봅니다.
   물론 중국이 잘나가는데는 근면도 한몫하겠지만 특히 미국은 장시간근무에 그만한 보상이 주어지고 있고 한국은 그에 못미치니 한국기업도 임금이나 보상을 더주든지 아니면 근무시간을 늘릴게아니라 추가로 협업할 인력을 채용해야한다고 봅니다.

   이딴게... 뉴스?

   제목에 낚여 원래 글도 읽어보고 왔습니다. :) 몇가지는 동의하는 부분도 있고 몇가지는 동의하기 어려운 부분도 있네요.
   현재 유럽의 경제적 영향력이 작아지고 있다는 것에는 동의합니다만, 그럼에도 불구하고 ""이름값""과 ""삶의 질"" 측면에서 유럽의 크기가 축소되지 않고 있다는것도 생각해봐야 합니다.
   또한 ""열심히 일한다 = 성공한다 = 재산(부)가 늘어난다 = 행복해진다""의 등식이 반드시 성립하지 않는다는것도 생각해봐야겠죠.
   결국 ""열심히 일하는 행위""가 추구하는것이 무엇인가를 제대로 정의해야 ""열심히 일해야 한다""라는 명령문이 정상동작할겁니다. 특히나 위와같은 등식이 성립하지 않는 세계에서라면 말이죠.

   반도체 R&D 연장근로…삼성 2년간 43만시간, SK하이닉스 '0'

   삼성은 더 열심히 일하지 않으면 안됩니다.

   https://youtu.be/PN3YakYISso?si=h7AplyV-Ve2mvOaf

   주인의식을 갖고 일하라고는 하지만 하인 취급만 하니 ㅋ

   과연 단수히 ""열심히"" 일까요?

   우리나라가 내리막길인 것은 근면성이 문제가 아니라, 윗대가리들이 다 빼돌리는 보상부재로 인한 무기력감인거 같아요.

   예????

   열심히 일하기는 노동자 본인이 스스로 동기부여가 되어야지 강제한다고 되는 문제였다면 너무 쉽죠

   미국의 근로시간은 한국 근로기준법과 비슷하게 일하는 것 같고, 애초에 고학력자들이 체계적으로 일하는 문화라 효율 차이에서 달라서 그런 것 같은데(애초에 대면회의하느라 왔다갔다하지 말고 컨퍼런스콜로 하거나, 쓸데없는 회의시간만 줄여도 훨씬 나아질 듯)
   ""점심시간을 빼면 일주일 평균 근무 시간은 30-35시간. 그나마 회사 근무는 월-목요일까지고 금요일은 집에서 일한다.""
   https://www.kmib.co.kr/article/view.asp?arcid=0012998456

   잘 산다는 것의 정의가 뭘까요? GDP, 무역수지 흑자액? 이젠 물질적인 것만 보면 안된다고 생각합니다. 삶의 질적인 면도 같이 봐야하지 않을까요? 직업 윤리 차원의 근면과 성실함은 사회 구성원으로서 아주 기본이되는 태도이지만, 강도 높은 노동 시간만을 의미한다면 이젠 그렇게 일하면 안되는 시대라고 생각해요. 생산성이 뒷받침되지 않고 노동력으로만 버티는 것은 전세계적인 시대 정신에도, 초고령화 사회로 진입한 우리 현실에도 맞지 않습니다. 급격한 인구 감소를 경험하고 있는 이상 생산성을 혁신하지 않으면 미래는 없다고 생각해요.

   저도 미국에서 반도체쪽에 밥먹으면서... 비슷한 생각을 합니다. 그런데 정답은 없다고 봐요. 한가지 분명한건, 선택은 우리가 하는것이고... 우리가 더 인간답고 여유있게 사는걸 선택했다면, 어느정도 경쟁에서 뒤쳐지는걸 받아들여야 한다고봐요. 모든걸 다 가질수는 없습니다.

   저는 ""열심히 일하는""거에 돈 얘기가 빠지면 안된다고 봅니다.

   NVidia는 2024년 기준 직원대상 주식보상(Stock Compensation)금액이 $3549m(5조원)가 넘고 테슬라의 경우 $1999m(3조원) 입니다. 그것도 매년 늘어나고 있어요.
   직원들에게 주는 주식을 통해서 회사가 성장하면 직원도 부자가 되는 구조가 만들어져 있죠.

   그런데 국내는 대기업에서 이런 경우가 잘 안보입니다. RSU를 오너 가족이 다 챙기면서 경영권 승계 목적으로나 이용합니다.
   최대기업인 삼성전자도 2025년에 와서야 ""임원 성과급을 자사주로 지급한다""는게 기사로 뜨는 상황이고, 2026년부터는 일반 직원에게도 본인이 원하면 주식보상을 하겠다고 ""검토""한다네요. 이제와서?

   스타트업도 마찬가지입니다. 적절한 보상이 있어야 ""더 열심히 일하는""게 가능하다고 봅니다.
   원 글에서 일을 안 한다는 스타트업의 임직원 분들은 ""적절한 보상""을 받고 있을까요? 아님 언젠가 그걸 받을 수 있는 미래가 있긴 한건지 궁금하네요.
   정작 대표를 제외한 다른 초기 직원들이 지분 많이 가지고 있으면 투자하기 꺼려진다고 얘기하는게 우리나라 VC들 속성이던데요.
   CTO들 지분 나눠주는 것도 꺼려하는 대표가 대다수입니다.

   이딴 글이 왜 긱뉴스에..ㅋㅋ

   공감합니다

   공감합니다

   트위터에서 제목만 보고는 '어떻게 긱뉴스에 이따위 글이 올라왔지?' 하며 달려왔습니다.
   읽어보니 글쓴이의 생각을 이해할 수 있는 부분이 있기는 합니다.

   제가 벤처 창업을 하고 365일 일을 할 때도 자기보다 일을 열심히 하는 벤처가 드물다고 말하는 VC 사장이 있었죠. (세월이 흘러 그 사람을 살펴보니 그닥 재미는 못 본 모양입니다.)

   형편이 바뀌어 투자를 위해 창업자들을 만나게 되니 관점이 달라지기는 했습니다만, 눈동자가 살아있고 미친 듯이 일을 하던 똑똑한 친구들이 꼭 성공을 하지는 않더군요.
   누구나 나름대로 열심히 일을 하지만 성공은 운을 많이 따른다는 생각을 했습니다.

   이제는 청년들에게 '너의 미래를 위해서 열심히 미친듯이 일을 하라.'고 강권할 생각은 없습니다.

   글쓴이도 미국에서 손벌려 모은 돈을 한국에서 투자한 게 여러 번 엎어진다면, 스타트업보다 열심히 일하는 경제적 유인이 사라질 것이고 생각도 바뀌리라 봅니다. 사업이 잘되길 바랍니다.

   이 정도 논쟁적인 글을 인터넷에 올리면서 타인에게 함부로 '게으름'이라 표현하는 건 크게 잘못된 행동이라고 생각합니다.

   더 열심히 일하지 않으면 (미국의 7배, 일본의 100배 규모의 임금체불을 기록하며)

   이 글에 대한 댓글을 쓰려고 어떠한 SNS도 가입하지 않겠다던 의지를 버리고 GeekNews에 가입했습니다.

   저는 일련의 사건으로 인해, 기업을 위해서 일할 때 ""왜 열심히 일해야 하는가?"" 라는 본질적인 질문을 하게 되었습니다. 내가 80시간을 일해서 생산을 하더라도 노동의 대가는 기업의 오너에게 돌아갈 뿐 저에게 돌아오지 않았습니다. 이것은 유니콘이 된 스타트업에서 일해본 경험으로 알게 되었습니다. 비교적 초기에 입사 했지만 별로 재미를 못봤습니다.

   한국에 많은 유니콘 스타트업이 있습니다. 쿠팡, 토스, 배민 등. 이러한 기업의 Early Stage에 합류해서 정말 주 80시간을 일했지만 강남 아파트 한 채 못사는 분들이 신분당선으로 한 번에 수송이 불가능할 정도 일겁니다. 이런 사례가 쌓이고 쌓여서 그런 것 아닐까요?

   제 생각에 한국은 주주환원도 잘 안되고, 사원에게 분배도 잘 안되는, 정말 오너 독식의 극한을 보여주는 기업문화를 가지고 있다고 생각합니다. 이런 기업문화에서 사원에게 열정을 강요하는 것 자체가 모순이 아닐까요?

   제 주변에 열심히 일하시는 분들은 모두 객관적 및 주관적으로 봤을 때, 경제력이 좋습니다. 유니콘 초기(10인 이내, 많이 쳐줘도 20명 이내)에 합류해서 80시간 일했는데 경제적으로 재미 못 봤으면, 본인에게 어떤 문제가 있는지 돌아보는 게 빠르지 싶습니다. 그리고 열심히는 기본 소양입니다. 리스크를 짊어져야 비로소 큰 보상을 얻을 수 있습니다. 기본조차 안 하는 사람을 지적하는 글에다 대고, 기본만 하면 강남 아파트 살 수 있어야 하는 거 아님? 이라고 하는 게 넌센스입니다.

   이상하게 댓글이 좀 날서 있는 느낌이네요. 제 자신을 돌아보라고 하시니.

   경제적 이익을 누리지 못한 이유는 비교적 간단합니다.

   유니콘 기업 대부분 10년이 넘는 업력을 가지고 있지만 상장하지 못한 경우가 많은데 이 경우 스톡옵션을 받아서 어떻게 현금화를 하나요? 비상장 거래도 있지만 비상장 거래는 거래량이 낮고 가치 평가가 박한 경우가 많습니다. 반면 오너는 라운드를 돌 때마다 금전적 이익을 볼 수 있습니다.

   거기에 사원인 경우 쿠팡처럼 초 대박이 터지더라도 보호예수 같은 제도로 인해서 점점 대박을 내기 어려워지고 최근에는 카카오, 네이버에서도 자회사 상장할 때 스톡옵션 무리해서 샀다가 손해를 본 경우도 많습니다.

   타인에게 열심히는 기본이라고 강변하기 이전에 현실이 어떤지 한 번 냉정하게 돌아보시는 것을 권합니다.

   효율성 저하를 노력의 부재로 인식하시는게 참 안타깝습니다. 여기서 더 ‘열심히’ 일하면 과로사 빼고 뭐가 남을까요.
     * 성실함은 강요될 수 없는 온전히 개인의 선택의 영역입니다. 계몽시키고자 하는 의도와 맥락은 알겠으나, 강요로 들릴 수 있는 메세지는 사람들의 반발을 불러일으키기 딱 좋습니다. (저자는 인문학을 공부해야한다, 라고 하면 저자는 당연히 반발하겠죠?)
     * 게으른 유럽의 쇄락과 성실한 미국의 성장은 설명하기 참 명료합니다만, 그렇다면 996의 중국과 성실함의 일본은 왜 gdp가 정체되고 별다른거 안하고 유전발견한 가이아나는 어떻게 gdp가 쑥쑥 큽니까.
     * 개인이 하루하루 성실히 살아가는 것이 선이 되는 분위기를 조성해야하는 사회의 몫이라고 생각합니다. 돈이 될수도 있고 명예가 될 수도 있고, 그냥 일을 즐겁다고 느끼게 만들어줄 수도 있겠죠. 성실한 직장인을 무시하고 부동산부자와 코인부자를 치켜세우는 일은 지금도 일어나고 있습니다. 맥락을 인정하지 않고 약자를 멸시하는 것은 파시즘의 시작입니다.
     * 바로 윗 글이 ""상속은 노동보다 중요해지고 있음""이네요. 과연 미국도 저자의 말씀처럼 계속 성실함을 유지할 수 있을지요.

   우리는 개발자나 엔지니어로서 실제 존재하는 데이터와 연구 결과를 바탕으로 이야기할 필요가 있습니다.

   작성자의 주장에 따르면 '덜 일 하고, 더 많이 노는 문화와 태도'가 문제라고 했지만, 현실은 정반대입니다. OECD 통계에 의하면 한국은 연간 근로시간이 1901시간으로, '주6일제' 논란 중인 그리스(1886시간)보다 더 깁니다. 우리보다 더 오래 일하는 OECD 국가는 칠레, 코스타리카, 멕시코 단 3곳뿐이에요. 즉, 한국은 이미 세계에서 가장 많이 일하는 나라 중 하나입니다.
   그런데 이렇게 열심히 일하는 게 우리 삶을 행복하게 만들었나요? 통계청(2023 조사)에 따르면 한국인 삶의 만족도는 6.5점으로 OECD 38개국 중 35위에 불과합니다. 우리보다 낮은 국가는 단 3개국(튀르키예, 콜롬비아, 그리스)뿐이고요. 오히려 근로시간이 짧은 나라들이 삶의 만족도는 더 높은 편입니다.

   원글에 ""한국의 근면성실함이 '망가졌다'""고 표현했는데.. 우리나라에선 삶의 만족도가 소득이 낮을수록, 나이가 많을수록 낮아진다는 점입니다. 결과적으로는 근면성실하게 일한세대가 노년에 제대로 된 보상과 돌봄을 받지못한다는 것이죠.
   우리나라는 일은 세계최상위권으로 많이 하는데, 행복도는 최하위권, 자살률은 세계 1위입니다.
   이건 진짜 발전이 단순히 '얼마나 오래 일하나'가 아니라 '얼마나 효율적으로 일하고 삶의 질이 좋아지나'에 달려있다는 걸 보여주죠.
   유럽이 쇠퇴하고 있다고 표현했지만 최근 글로벌 위기들의 여파에 따른 영향을 고려하지 않고 편한 방향으로 해석한 것으로 보입니다. 오히려 근로시간을 줄이고 효율을 높이는 정책을 시행한 독일, 네덜란드 같은 나라들이 높은 삶의 만족도와 경제적 안정성을 동시에 유지하고 있습니다.

   정말이지 ""더 열심히 일 안 하면 한국 망한다""는 논리는 이제 버려야 할 때가 됐습니다.

   그 스타트업의 패밀리면 납득. 사실 시키지 않아도 저절로 그렇게 됩니다. 근데 스타트업에 ""고용""되어서 갈린다면? 그건 당하는 사람이 바보에요.

   산업혁명 시대만큼 열심히 잠도 제대로 못자고 사셨던 노동자들이 없었던 것 같은데, 이들에게 보상이 주어졌나요? 열심히 일하는 것과 보상이 주어지는 건 다른 문제 아닐까 생각합니다.

   마이클 센델이 ""공정이라는 착각""에서 설파했던 전형적인 실력주의, 엘리트주의적 주장이네요(원문 댓글에 동일하게 달았습니다. 여길 통해 처음 봐서리).

   미국이 진짜 열심히 일해서 잘 사는건지도 모르겠고 한국 사람이 미국보다 더 일하는 것 같던데. 그리고 못사는 나라보면 쉬는날도 없이 주말도 없이 일만 하던데

   그렇다면 대기업에서 좋소까지 근면하게 일한 직원들에 대한 처우가 제대로 주어져야 되겠다고 생각 합니다. 특히 경영자도 아닌 오너가 대대로 상속해가며 고혈을 다 빨아가는데 누가 헌신할까요?
   잘 사는 나라라는 슬로건이 파시즘 시대로 회귀하는 구호로 이용되지 않길 바랍니다.

   이 글도 그렇고 https://news.hada.io/topic?id=19517
   저는 한국적 시각만 가지고 있는지라 다른 분들의 의견이 궁금하여 올려 봅니다. 우리는 어디로 가길 원하는지, 그리고 우리는 어디로 가고 있는지에 대한.

   전 방향과 리더쉽이 더 중요하다고 봅니다.

   더 일해서 잘 된다는 믿음이생기면 누구든 다 열심히 일하죠. 링크의 글처럼 미국의 기술리더들은 그걸 잘 하고요.

   근데 우리나라의 착각은 리더 (혹은 리더 본인)들이 미국 의 기술리더와 동급으로 생각한다는 점이고, 본인의 방향을 밀어붙일 생각밖에 안한다는거죠. 본인들은 틀렸다고 절대 생각하지 않는 건 덤이고요.

   예로들면 삼전에서 이미 본인들의 예측실패로 HBM 말아먹어놓고는, 리더들은 책임도 안 지면서 52시간 운운하면 서 열심히 일하자고하고 있죠. 그러면 열심히 일해봤자 소용없다고 생각을 할 수 밖에 없다 봅니다.

   동의하면 동의하는대로 주장 얘기하면 되고
   동의하지 않으면 그런 쪽으로 주장 얘기하면 되고
   주장 말하기도 귀찮으면 그냥 지나가면 되는데

   ""너 이런 글 올리는게 얼마나 나쁜짓인지 알고 있어?! 운영자님 이런 글을 올린 놈은 차단해야 되지 않겠습니까?""

   이런 댓글이 도배되어있는걸 보니 긱뉴스도 헤쳐나갈 관문이 많네요

   다들 머리속에 있는 사례가 다르고 적용범위도 다르고 하니
   객관화가 되는 대화로 이어지긴 힘들거 같네요.

   실리콘밸리처럼 스톡으로 보상하세요 그러면

   왜 일을 덜하게 되었는지 생각해야하지 않겠습니까.
   일 더해봐야 대가보다는 일만 더 준다는 걸 체험해서 그런 거죠.

   직장인들의 근면, 성실함을 개인 차원으로 문제 삼으며 지속해오던 신자유주의와 자본주의의 환상이 깨진게 아닐까 생각이 드네요.

   백번 양보해서 포괄임금제 폐지하고 법적으로 가이드 잡아준 야근 수당, 주휴 수당 챙겨주고 저런 소리 했으면 좋겠습니다.

   생산성이 무엇일까요? 생산량(= GDP) 나누기 근로시간입니다. 임금 나누기 근로시간으로 계산하는 경우도 있지만 역시 분모는 여전히 근로시간입니다. 근로시간만 늘리려고 하니까 당연히 그놈의 생산성이 떨어지지요. ""생산성""을 올리는 방법은 반대로 근로시간을 제한해서 효율적으로 일하는 겁니다. 생산성이라는 말을 함부로 하는 걸 들을 때마다 경영자들이 말하는 생산성은 좀 다른 것 아닌가 의심하게 됩니다.

   기술, 마켓, 품질 등 Mission-centric한 요소가 아닌 시간, 비용 등 1차원적으로 측정가능한 요소가 목적이 되면 조직은 경쟁력을 상실하고 장기적인 비전을 잃게 됩니다. 보상 체계를 논하기에 앞서 기본적인 안목부터 갖추지 못해 뒤죽박죽인 글이 관심을 많이 받는 것도 안타깝네요. 한국 사회 전체가 겪는 병폐이자 현 시대의 리더들이 보여주는 한심함의 단편이라 생각하면 납득이 가긴 합니다.

   열심히 노력한 것에 대한 대가를 정당히 주는 사회가 되지 않았으니까요. 회사뿐 아니라 노동자들도 다분히 자유시장경제 적으로 대응하고 있는 셈인데 이것을 문제삼고 경고를 한다는 것은 과연 어떤 정치, 경제적 가치를 가졌기에 가능한 걸까요?

   최근 10년간규모나 실적 면에서 가장 성공한 스타트업중 하나인 쿠팡, 토스의 기업문화에 대한 세간의 평을 돌아보면 일부 공감이 되는 면도 있는데요.

   한국의 성공 DNA 에는 '농업적 근면 성실' 이 있었지만 그만큼 노동자들의 희생이 있었고 소수의 경영자에게만 부가 집중되는 문제가 있었습니다. 글쓴이는 이런 근면성실이 없어졌다고 하지만 현대의 한국에는 당연한 것이고. 사실 필요한건 북미 스타트업 업계의 파격적인 보상이 전제된 성과주의, 피어 프레셔가 높은 근무환경 이런 것일진데 핀트가 빗나간거 같아 아쉽네요.

   이 글을 읽고 내용과 취지에 동의하시기 때문에 여기에 공유하신거겠죠?
   전 laeyoung님께서 어떤 위치에 서서 이 글에 동의하시는지가 궁금하네요.

   SW, 혹은 다른 첨단 기술기반 사업에서 연구개발에 직접 종사하는 노동자이신가요? 아니면 관련 회사를 직접 운영하시거나, 혹은 지분을 가지고 참여하고 계신지요?

   동의해서 올린 글은 아닙니다. Neo가 올린 이 글 https://news.hada.io/topic?id=19517 도 AI가 60시간을 동의해서 올린게 아니듯, 원문 기사를 쓴 Gizmodo도 60시간을 동의해서 기사랄 쓴게 아니듯이요.

   글 올리고 첫 댓글에 적은 의견처럼, 다른 분들의 의견과 담론이 궁금해서 공유 했습니다. 원글에 댓글들도 있지만, 거기는 글쓴이하고 싸움터가 된거 같아서 어려워 보였구요.

   https://slownews.kr/15615
   10년 정도 지난 글인데 현실이 얼마나 달라졌을까요?

   긱뉴스에 비추천 기능, 사용자 차단을 통한 글 안보기 기능 도입 부탁드리겠습니다

   비추는 있지만 카르마를 올려야 할 수 있어서요...

   얼마나 많은 사람을 겪고 나서 쓴글인지는 모르겠지만, 제가 겪은 대기업 직원들 다 새벽까지 On-duty 에 노트북도 집에 들고 퇴근하는데 참 아쉽네요.
   별개로 생산성은 무조건 근로시간에 정비례한다고 보긴 합니다만(아무리 창의적이라고 하는 작업이라고 해도요), 보상이 충분할 때의 이야기이죠. 그 보상이 내적동기든 물질적, 외적 동기든 간에요.

   열심히, 성실히 일하는 것을 미덕으로 삼는 건 시대착오적 발상. 효율적으로, 생산적으로, 요령피우면서, 최고의 성과를 낼 수 있게, 적게 일하고 많은 리턴을 얻는 것이 오히려 더 권장되어야. 나태가 도태를 만드는 건 맞지만, 미국이 열심히만 일한다고 생각한다면 아주 좁은 시야를 가지고 있는 것.

   일본이나 미국의 경우에 돈이 많아서, 건물주라서 논다? 사회에 쓸모없는 멍청이로 봅니다. 일 자체가 사회적 기여라 보기에, 부자라도 일하는 것이 있어야 인정받을 수 있고 그에 따라 사회적 존경이 담보되죠.
   제 생각에 한국의 노동시장은 불성실해지는 게 아니라 무기력해지고 있어요. 부동산이 그걸 가속시켰고요. 한량 노는 건물주를 부러워하는 시선은 내가 사회에 기여하고 있는 노동의 가치를 무기력하게 만듭니다. 일에 몰입된 사람을 가정에서 사회에서 존경하지도 않고요. 그러니 적당히 일 하고 투자나 잘 하고 살아가죠. 물론 보상도 아쉽지만 그건 시장이 결정하는 부분이구요.

   근로를 더 원하면 그만한 대가를 더 줘야 일하지 말든지 하겠지요. 최근 반도체 분야는 52시간 제한 폐지하자는 기사를 봤는데 정말 어이가 없었는데요. 지금도 야근 수당 주기만 하면 가능할텐데 굳이 폐지하자고? 아직 한국 경영자는 배가 덜 불렀습니다.

   저는 밤낮으로 일을 합니다. 보상도 있지만, 경영진으로서의 책임이 있기 때문입니다. 책임이 있는 자에게는 '열심히'의 의무가 있다는 생각을 합니다.
   물론 어떤 관점에서 글을 써주신 분이 이야기를 해주셨는지 이해는 되지만... 스타트업 이전에 기업이고, 기업은 효율을 높여 경쟁력을 갖춘다는 걸 생각했을 때, 시간만을 늘리는 것은 조금 미묘하다는 생각도 듭니다.
     * 우리가 산업시대의 노동이 아닌, 지식노동을 하고 있다는 점도 기억해야겠습니다.

   국내에서도 스타트업 내지 유니콘 중 현금성 보상을 많이 주거나, 시간외 보상을 확실히 해주거나, 주식보상을 확실히 해주는 곳들은 이미 자발적이든 비자발적이든 10to11, 11to12 식으로 일하고 있습니다.

   진짜 현실적으로, 까놓고 말해서, 보상도 제대로 안주고(혹은 거의 휴지될 스톡옵션을 이미 유니콘된양 더럽게 아끼면서) 열심히 일하길 바라는게 말이나 되나요.

   작성자 차단 기능 추가 부탁드립니다.

   왜 직원이

   자신은 효율적으로 일한다.
   자신은 생산성이 뛰어나다.
   자신은 열심히 한다.
   자신은 성과를 많이 냈다.

   를 스스로 평가하고 그게 맞다고 생각할까요? 돈을 주는 기업이 평가하는게 맞지 않을지?

   유일하게 근로자가 측정할 수 있는 것은 “얼마나 오래 일했냐” 입니다 그래서 법적으로 최소 시급이 정해져있는 것이고요.

   이외에는 기본적으로 회사가 평가를 하는게 맞지 않을지요?

   회사에서 보상을 안주거나 불합리하다고 생각하면 그 회사 떠나면 되는거 아닐지….

   이 글이 어디에 올라왔는지요, '스타트업' 바이블이죠?
     * 어떤 회사에 근무하기 전에도, 근로자는 이미 '기회비용'이라는 걸 측정할 수 있답니다.
     * 보상을 안주거나 불합리하다고 생각하기 때문에 스타트업에는 이미 인재가 없습니다.
     * 스타트업 동네에서는 기본적으로 '떠나는' 게 아니라 '가지 않는' 방법으로 구직자가 평가를 합니다.
     * 구인난을 보면 이미 점수는 나온 것 같네요.

   좀 더 쉽게 설명해주실 수 있을까요? 어떤 말씀을 하고 싶으신건지 잘 이해가 가질 않습니다.

   저의 댓글을 다시 보시면 아시겠지만 구직자가 아니라 재직자와 회사에 대한 이야기입니다.

   댓글 달아주신 네가지 항목이 모두 구직자에 대한 이야기인 것 같아서요. 그리고 그 네가지 이야기가 틀렸다고도 생각하지 않습니다. 맞는 것 같아요.

   패배자 마인드 많네 ㅋㅋ

   직원 착취하는 경영자들이 한둘이어야죠 ㅋㅋ

   게으른 경영자만 할까요
"
"https://news.hada.io/topic?id=19494","Ladybird - 진정한 독립형 웹 브라우저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ladybird - 진정한 독립형 웹 브라우저

     * Ladybird는 독립적인 웹 브라우저로, 웹 표준에 기반한 새로운 엔진을 사용함
          + 현재 프리-알파 상태로, 개발자용으로만 적합함
     * 현대 웹을 위한 완전하고 사용 가능한 브라우저를 목표로 함
     * 멀티 프로세스 아키텍처를 사용하여, 주요 UI 프로세스 외에 여러 개의 WebContent 렌더링 프로세스, ImageDecoder 프로세스, RequestServer 프로세스를 운영
          + 이미지 디코딩 및 네트워크 연결을 별도 프로세스에서 처리하여 악성 콘텐츠에 대한 내구성을 높임
          + 각 탭은 독립적인 렌더러 프로세스를 사용하며 시스템의 다른 부분과 격리됨
     * 현재 핵심 라이브러리는 SerenityOS에서 가져온 여러 컴포넌트를 포함함:
          + LibWeb: 웹 렌더링 엔진
          + LibJS: JavaScript 엔진
          + LibWasm: WebAssembly 구현
          + LibCrypto/LibTLS: 암호화 및 TLS 지원
          + LibHTTP: HTTP/1.1 클라이언트
          + LibGfx: 2D 그래픽 라이브러리, 이미지 디코딩 및 렌더링
          + LibUnicode: 유니코드 및 로캘 지원
          + LibMedia: 오디오 및 비디오 재생
          + LibCore: 이벤트 루프 및 OS 추상화 계층
          + LibIPC: 프로세스 간 통신 지원
     * 빌드 및 실행 방법
          + Ladybird를 빌드하는 방법은 빌드 가이드 참조
          + Ladybird는 Linux, macOS, Windows(WSL2 사용), 기타 다양한 UNIX 계열 OS에서 실행 가능함

   시작은 누구나 할 수 있지만… 끝까지 갈 수 있을지는…
   그나저나 이분 serenityOS도 그렇고.. 맨땅에 헤딩을 좋아하시네요… 진심 부럽!

   음? 빌드 가이드 링크가 잘못된 듯 하네요

   수정했습니다!

        Hacker News 의견

     * 이 프로젝트는 Firefox가 본질을 잃은 지금 더 중요해졌음
          + Thunderbird도 같은 길을 갈 수 있음
          + Andreas를 응원함
     * Ladybird는 Andreas Kling의 BSD-2 프로젝트로, SerenityOS를 만든 사람임
          + Ladybird는 Safari 바로 뒤에 있는 네 번째로 표준을 잘 준수하는 브라우저임
          + GMail, Google Calendar, Figma가 완전히 로드되지만, 사용성은 아직 100%가 아님
          + 업데이트는 비디오 버전도 있으며, Ladybird의 렌더링 데모를 포함함
          + 작년에 Ladybird는 공식 비영리 단체가 되었고, Github 창립자인 Chris Wanstrath로부터 100만 달러의 기부를 받았음
     * Ladybird는 마케팅의 중요성을 아는 사람이 있어 운이 좋음
          + 다른 오픈소스 브라우저 엔진 프로젝트는 PR, 후원, 자원봉사자 부족으로 어려움을 겪고 있음
          + NetSurf는 자원봉사자 부족으로 웹사이트가 오래되었지만, 프로젝트는 활발히 개발 중임
          + Servo는 Rust 코드베이스 덕분에 괜찮은 PR을 가지고 있음
          + Goanna 브라우저 엔진도 있지만, Mozilla Gecko처럼 독립적인 브라우저 엔진을 제공하지 않음
     * 웹 인터페이스의 복잡성이 증가했음
          + 초기 웹은 이미지와 폼 컨트롤 지원 등으로 이미 복잡했음
          + 현대 웹 브라우저는 두 개의 가상 OS 환경이 필요할 정도로 복잡해졌음
          + 크롬 프로젝트는 10년 이상 개발되었고, 수천 명의 개발자가 참여했음
          + 현대 웹이 너무 복잡해서 이 정도의 복잡성이 필요하다는 의견과, Chromium이 과도하게 설계되었다는 의견이 있음
          + Ladybird는 적절한 기능 집합을 목표로 한다는 의견도 있음
     * Waterfox를 설치하고 Mozilla에 실망했음
          + Ladybird는 기술적으로 인상적이며, 일상적으로 사용하기에 좋음
          + Ladybird 엔진을 Electron 대안으로 사용하고 싶음
     * 현대 브라우저의 보안을 유지하는 것은 매우 어려움
          + 주요 벤더들은 보안 엔지니어 팀을 고용하지만 여전히 취약한 코드를 배포함
          + Ladybird는 매우 틈새 시장이므로 특정한 적이 없다면 공격 대상이 될 가능성이 낮음
     * Ladybird가 '롱테일' 기능을 얼마나 잘 지원하는지 궁금함
          + WebCodecs, WebRTC, WebUSB 같은 기능을 지원하는지 궁금함
     * Ladybird가 수익화 없이 어떻게 생존할지 궁금함
          + 비영리 단체로 100만 달러의 초기 자금을 받았지만, 그 이후가 문제임
"
"https://news.hada.io/topic?id=19520","글쓰기로 기본 사고 방식에서 벗어나기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          글쓰기로 기본 사고 방식에서 벗어나기

     * 우리의 뇌는 평균적인 범주에 머무르는 경향이 있고, 과거 기억을 효율적으로 보관하지 못함
     * 현재 순간에는 자극적인 생각의 파편들에 휩쓸리기 쉬우며, 혼란을 정리하지 못하고 방황하기 쉬움
     * 글쓰기는 이러한 무질서한 사고에 구조를 제공하는 도구로, 효과적인 사고를 가능하게 함
     * 생각을 체계적으로 구성하고, 더 깊이 사고하는 과정을 가능하게 해주는 역할을 함
     * 때로는 글쓰기가 ""제대로 생각하기 시작하는"" 유일한 방법이 되기도 함

인간의 기본적인 사고 방식: '영원한 근사치 모드(perpetual approximation mode)'

     * 우리는 아이디어, 소문, 사소한 사실, 과거의 논쟁 에 쉽게 휩쓸림
     * 사고의 기저에 있는 의미를 찾지 않으면, 많은 시간을 이러한 파편적인 생각들 사이를 옮겨 다니며 보내게 되며,
       실제로 행동하거나 직접 탐구하기보다는 머릿속에서만 어렴풋이 상상하는 데서 그치기 쉬움
     * 비극, 혼란, 기회 같은 강력한 사건이 일어나기 전까지는 그 이면의 의미를 탐색하지 않는 경우가 많음

글쓰기는 사고의 혼란을 정리함

     * 사고를 문맥과 논리적으로 정리하도록 강요함
          + 글로 옮기는 과정에서 정신적 ‘잡동사니’를 정리하고 제거하게 됨
     * 머릿속에서만 떠돌 때 보이지 않던 맹점, 편향, 가정 등을 ‘형태화’시켜 인식하게 함
     * 단순한 사고로는 불가능한 수준의 명확성과 연결성을 가능하게 함
     * 더 큰 아이디어들을 연결할 수 있게 해줄 뿐 아니라, 연결되지 않은 생각들의 오류나 비합리성을 드러내는 역할임
          + 우리의 편향, 맹점, 그리고 가정을 명확하게 인식할 수 있도록 도와줌

글쓰기와 독서의 힘

     * 글쓰기와 독서는 스스로도 알아차리지 못했던 감정이나 생각의 뒤틀림을 드러내는 계기가 됨
     * 뿌리 깊이 박혀 무의식적으로 감정과 믿음을 조종해온 잘못된 아이디어를 찾아내는 수단이기도 함
     * 새로운 아이디어가 실제로는 환상일 수도 있고, 다른 사람의 의도나 동기가 잘못 해석되어 있었음을 깨닫게 되기도 함

반복적으로 떠오르는 생각은 글로 정리해야 함

     * 생각, 감정, 신념이 반복적으로 떠오른다면, 빠르고 거칠게라도 글로 써보는 것이 중요함
     * 아이들이 끊임없이 ""왜?""라고 질문하듯이, **""나는 왜 이렇게 생각/느낌/믿음을 갖고 있는가?""**를 반복적으로 자문해야 함
     * 글로 쓰는 과정에서 예상치 못한 통찰이 생길 수 있으며, 마치 통조림 스파게티처럼 엉켜 있던 생각들을 쏟아내고 나면 그만큼 마음의 여유 공간이 생길 수도 있음

     “자신에 대해 글을 쓰는 것은 마치 맑은 강물에 나뭇가지를 넣어 바닥의 진흙을 휘젓는 것과 같다.”
     — 스티븐 킹, Different Seasons

   생각을 확고히 하고 비판적으로 바라보는 데 글쓰기가 큰 도움이 됩니다.

   “자신에 대해 글을 쓰는 것은 마치 맑은 강물에 나뭇가지를 넣어 바닥의 진흙을 휘젓는 것과 같다.”
   — 스티븐 킹, Different Seasons

   이건 쓰지 말라는거 아닌가요 ㅋㅋㅋ

   특히 지금 같은 생성AI 시대에 필요한 것 같군요. 최근 일부러라도 종이책을 많이 읽으려고 하는데, 글쓰기도 정기적으로 일부러 해야겠다 싶군요.

        Hacker News 의견

     * ""Writing is thinking""이라는 말을 들은 적이 있으며, 이는 내 삶에 큰 영향을 주었음
          + 글로 적어보지 않았다면 충분히 생각하지 않은 것임
          + 다양한 주제에 대한 생각을 모으기 위해 여러 저널을 사용함
          + 직장에서는 Bullet Journal을 사용하여 프로젝트를 정리함
          + 코드 리팩토링이나 오류 조사 시 글을 쓰며 문제를 명확히 함
          + 질문을 하고 답을 적으면 명확한 서사가 형성됨
     * 반복적으로 떠오르는 생각이나 감정이 있다면 빠르게 적어보라는 의견에 동의함
          + 친구가 글쓰기 습관을 시작하고 싶어 했으나 주제를 몰라 고민했음
          + 빈 페이지에 나타나는 것이 완전히 허용됨
          + Byron Katie의 The Work 프레임워크를 사용하여 스트레스 받는 생각을 분석함
          + Derek Sivers의 질문들도 유용함
     * Julia Cameron의 The Artist’s Way라는 책에서 매일 아침 세 페이지를 쓰는 것이 주요 과제임
          + 첫 두 페이지는 빠르게 쓰지만 세 번째 페이지에서 흥미로운 내용이 나옴
          + 12주 프로그램 중 9주차에 있으며, 자아 발견의 여정을 경험함
          + 만년필과 종이로 글을 쓰는 것이 아름다움
     * 글을 적으면 다시 보지 않아도 기억에 남음
          + 10년 동안 저널을 유지해왔으며, 작업 과제나 디자인을 기록함
          + 과거의 글을 다시 보면 변화와 변하지 않은 점을 발견함
          + 글쓰기는 자아를 구체화하는 데 도움을 줌
     * David Foster Wallace의 ""This is Water"" 연설이 언급되지 않은 것에 놀람
          + 이 게시물의 제목이 ""This is Water""를 참조한 것일 수 있음
     * 도구를 만들고 도구가 우리를 형성함
          + 글쓰기는 생각을 구체화하는 데 중요함
          + 블로그 포스트 형식의 글쓰기가 최선은 아니라고 생각함
          + 펜과 종이로 짧은 메모를 적는 것이 좋은 아이디어를 포착하는 방법임
     * 빈 페이지의 공포를 극복하기 위해 휴대폰을 가로 모드로 전환하여 글을 씀
          + 키보드가 넓어져 타이핑이 편해지고, UI가 가려져 글을 보지 않음
     * 최근에는 눈가리개를 쓰고 글을 쓰며 자기 편집을 피함
          + 매일 10분 동안 '글쓰기 [as] 생각하기'를 실천함
     * 논문 작업 중 글쓰기에 어려움을 겪었으나, 비주류 손으로 필기를 시작함
          + 필기 자체가 마음을 차분하게 하고 집중하게 함
          + 글쓰기의 물리적 난이도를 높여 생각을 명확히 함
          + 글쓰기는 다양한 사고 능력을 사용하게 함
"
"https://news.hada.io/topic?id=19540","Repomix - 자신의 코드베이스를 AI친화적인 형식으로 변환하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Repomix - 자신의 코드베이스를 AI친화적인 형식으로 변환하는 도구

     * 코드베이스를 AI 모델이 쉽게 이해할 수 있도록 최적화된 형식으로 변환하여 LLM과의 통합을 쉽게 만들어 줌
          + ChatGPT, Claude, DeepSeek, Perplexity, Gemini, Llama, Grok 등과 사용 가능
     * 각 파일과 전체 코드베이스의 토큰 수 계산 기능 제공(LLM 컨텍스트 제한에 유용)
     * 단일 명령어로 전체 리포지토리를 하나의 파일(XML/마크다운/TXT)로 압축하며, 포함 및 제외할 파일 지정 가능
     * .gitignore 파일을 인식하여 자동 반영
     * Secretlint를 사용하여 민감 정보들이 포함되는지 검사도 지원
     * VSCode 확장 도 제공

동작방식

     * npm install -g repomix 로 설치후 repomix 만 실행하면 전체 코드가 포함된 repomix-output.txt 가 생성됨
     * 그리고 나서는 이 파일을 AI에 보내서 다음과 같은 프롬프트로 설명하면 됨

     This file contains all the files in the repository combined into one. I want to refactor the code, so please review it first.

   Python 코드베이스라면 Gitingest - Git 리포지토리를 AI 친화적인 텍스트로 변환하는 도구 를 쓰라고 추천합니다.
"
"https://news.hada.io/topic?id=19507","폭력이 인간 유전자에 미치는 세대 간 변화, 연구진 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    폭력이 인간 유전자에 미치는 세대 간 변화, 연구진 발견

폭력이 인간 유전자에 미치는 영향

     * 1982년 시리아 정부가 하마를 포위하여 수만 명의 시민을 학살한 사건이 있었음. 이 사건은 시리아 가족의 유전자에 깊은 영향을 미쳤음.
     * 하마 포위 당시 임신 중이었던 여성들의 손주들은 폭력을 직접 경험하지 않았음에도 불구하고 유전자에 그 흔적이 남아 있음.
     * 이 연구는 동물에서만 관찰되었던 스트레스의 유전적 전파 현상이 인간에게도 나타날 수 있음을 처음으로 입증한 사례임.

연구의 중요성

     * 유전자는 삶의 경험에 의해 변화하지 않지만, 후성유전학이라는 시스템을 통해 조정될 수 있음.
     * 스트레스나 다른 사건에 반응하여 세포는 유전자에 작은 화학적 표식을 추가할 수 있으며, 이는 유전자의 행동을 조정할 수 있음.
     * 이러한 변화는 스트레스 환경에 적응하는 데 도움이 될 수 있지만, 그 효과는 아직 잘 이해되지 않음.

연구 방법과 발견

     * 연구는 시리아 이민자 3세대를 대상으로 진행되었으며, 하마 공격을 경험한 가족과 최근 내전을 경험한 가족을 비교함.
     * 연구팀은 하마 생존자의 손주들 유전자에서 14개의 변화된 영역을 발견하였음.
     * 직접 폭력을 경험한 사람들의 유전자에서는 21개의 후성유전학적 변화가 발견되었음.
     * 어머니의 자궁에서 폭력을 경험한 사람들은 가속화된 후성유전학적 노화의 증거를 보였음.

연구의 확장성

     * 이 연구는 난민뿐만 아니라 가정 폭력, 성폭력, 총기 폭력 등 다양한 형태의 폭력에도 관련이 있을 수 있음.
     * 스트레스 유발 후성유전학적 변화와 질병 간의 연관성을 찾는 연구가 필요함.
     * 연구는 전쟁과 트라우마의 지속적인 영향을 찾는 데 중점을 두었으며, 연구에 참여한 가족들의 회복력에 주목하였음.

결론

     * 연구 결과는 폭력의 유전적 영향이 미래 세대에까지 미칠 수 있음을 보여줌.
     * 연구에 참여한 가족들은 전쟁을 겪으면서도 전통을 이어가며 생산적인 삶을 살고 있음.
     * 이러한 회복력과 인내심은 인간의 독특한 특성일 수 있음.

        Hacker News 의견

     * 연구 제목은 ""시리아 난민 세대 간 폭력 노출의 후성유전학적 서명""임
     * ""역사적 트라우마가 유전체 변화를 통해 대물림된다는 새로운 증거가 있음""
     * ""유전체 또는 후성유전체?""
     * ""...후성유전체임""
     * 몇 년마다 비슷한 연구를 읽는 것 같음. 처음 기억나는 것은 '영양, 초기 생활 환경 및 장수에 대한 세대 간 반응'임. 항상 헤드라인을 넘기고 실제 연구는 다르다는 것을 읽을 때 실망스러움
          + 후성유전적 변화 자체로도 흥미로움. 하지만 인간 유전자를 바꾸지는 않음. 최대한 유전자 <i>발현</i>을 바꿈
     * 80년대 중반에 Sac State에서 유전학을 공부하던 사람과 데이트했음. 어느 날, 차에 치여 다친 암컷 개가 나중에 차를 두려워하는 강아지를 낳을 수 있다는 기사를 읽었음. 이 가능성을 그녀에게 말했지만, 그녀는 이를 강력히 부정했음
     * 이 현상을 부정적으로만 보는 기사와 달리, 전쟁 관련 스트레스의 부족이 인간의 섬 온순함의 원인일 수 있다고 생각함
          + 시어도어 루즈벨트의 말을 인용하자면, ""고대 문명의 저주는 결국 그 남자들이 싸울 수 없게 된 것임. 물질주의, 사치, 안전, 심지어 현대적인 감상주의가 각 문명 인종의 섬유를 약화시켰고, 결국 각 나라는 평화주의자가 되었으며, 그 후 더 거친 사람들이 그 전투력을 유지한 채 그들을 짓밟았음""
     * 이것이 리센코주의를 재활성화하는 것인가?
          + 후성유전적 유전적 변형이 어떻게 가능한지 혼란스러움. 생물학자는 아니지만, 후성유전적이면 유전적이지 않고 그 반대도 마찬가지임
     * 대학 보도 자료에 혼란스러움. 그들이 논의하는 연구 기사에 대한 링크가 정말 없는 것인가?
     * 특정 갈등을 지적하는 이유가 이해되지 않음. 사람들은 객관적인 폭력 측정기를 가지고 있지 않음. 경험한 최악의 폭력은 더 나쁜 일이 생기기 전까지는 항상 최악임
     * 지중해 지역의 오래된 지혜임: ""나는 질투하는 신으로 부모의 죄를 3대, 4대까지 벌함"". 축복이 1000대까지 전해진다는 언급도 있으며, 이는 현대 진화론 및 후성유전학 이론과 잘 맞음
     * 폭력 피해자, 특히 여성 강간 피해자에 대한 유사한 연구가 있는지 알고 있는가? 청소년기에 성폭력을 경험한 생존자와 결혼했던 경험이 있어, 이러한 사건의 중대성을 완전히 이해하기 위한 유사한 연구가 진행되기를 바람
     * ""현상에 대한 첫 번째 인간 증거""는 아님. 2013년에 1836년 감자 기근에 대한 기사가 발표됨. 기근을 직접 경험한 사람들의 후손은 스트레스로 인해 변형된 유전체를 표현했음
"
"https://news.hada.io/topic?id=19558","50년간의 여행에서 얻은 팁들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            50년간의 여행에서 얻은 팁들

     * Wired 창립 편집장 케빈 켈리(KK) 는 50년 넘게 다양한 방식으로 여행을 해옴
          + 혼자부터 40명 투어 그룹 인솔, 배낭여행부터 전용 제트기, 자전거로 미국횡단, 전세계 국가의 절반 가량을 방문
          + 직접 여행 계획을 짜거나 가이드를 고용해보면서, 여행은 목적지보다 ‘방식’ 이 더 중요하다는 점을 깨달음
          + 그 동안의 여행을 통해 얻은 팁들을 정리
     * 여행 모드에는 두가지 모드가 있음
          + R&R(Rest & Relaxation) 모드
               o 일상의 루틴을 벗어나 휴식과 재충전을 얻기 위한 여행임
               o 편하고 쉬운 환경에서 여유롭게 시간을 보내는 것에 집중함
          + 주로 쉬운 곳으로 여행을 가게 되고, 이건 휴가 또는 R&R
          + E&E(Engagement & Experience) 모드
               o 새로운 문화, 사람, 환경을 적극적으로 체험하고 배우기 위한 여행임
               o 예측 불가능한 모험과 도전을 통해 스스로를 발견하고 성장함
               o 이런 종류의 여행은 일종의 학습
          + 본문의 팁들은 주로 E&E 모드에 초점을 맞춤


     * 목적지가 아닌 열정 중심으로 일정 잡기
          + 여행지를 정할 때, 유명 관광지보다 ‘특정 관심사’를 중심에 두면 더 깊이 있고 잊지 못할 체험을 얻을 수 있음
          + 예: 치즈 탐방, 음악 탐방, 역사적 테마 등을 따라다니면 유명한 장소를 둘러보는 웅장한 투어보다 훨씬 더 많은 모험과 기억에 남음
          + 요점은 예상에서 벗어나 예상치 못한 곳으로 가는 것
     * 택시를 타거나 드라이버를 고용했을 때, 비용을 지불하고 운전사의 ‘어머니 댁’ 방문을 요청해보면 독특한 경험을 할 수 있음
          + 효도의 기회이기 때문에 대부분 운전사들은 그 기회를 잡음
          + 현지 음식을 맛볼수도 있고, 가족 문화를 가까이서 체험하게 되어 운전자도, 어머니도, 여행자인 당신도 모두 만족
     * 어떤 곳이 열려 있을거라 가정하지 말 것. 현지 사정상 예측과 달리 문이 닫혀 있을 수 있음
          + 가능하면 마지막 순간까지 확인하고, 그렇지 않으면 플랜 B를 준비
     * 결혼식에 참석해보기
          + 제일 쉬운 방법인 정해진 시간에 결혼식을 올리는 예식장을 찾아서 참석이 가능한지 요청해 보는 것
          + 보통 결혼식 참석을 부탁해보면 손님을 환영하는 분위기에서 특별한 경험을 할 수 있음
          + 작은 현금 선물을 하거나, 즉흥적으로 춤을 추거나, 사진 촬영 등으로 결혼식 분위기에 자연스럽게 섞여볼 수 있음
          + 나는 내가 방문한 대부분의 나라에서 결혼식에 난입(crash)했음
     * 비싼 박물관, 공연장 입장료 때문에 겁먹지 말 것
          + 전체 여행 비용에 비하면 작은 부분임
          + 이미 많은 돈을 투자해서 멀리왔는데, 그런 사소한 비용때문에 보러 온 것을 보지 않을 이유는 없음
     * Google Maps 를 이용하면 대중교통에 대한 매우 자세하고 정확한 경로를 안내해줌. 대부분의 도시에서 환승 지점까지 포함
     * 외국 도시를 처음 방문하면 가이드가 진행하는 ""길거리 음식 투어""를 해볼 것
          + 지역에 따라 푸드 카트, 푸드 트럭, 푸드 코드 등 작은 식당들을 포함
          + 보통 몇시간 가량 진행되며 비용에 음식도 포함
          + 최고의 음식을 맛볼수 있고, 보통 가이드들이 문화에 대해서 훌륭한 소개도 해줌
          + 구글에서 ""street food tour for city X""를 검색
     * 여행 동반자를 선택할 때 가장 중요한 기준은 그 사람이 불평(Complain)을 하느냐 하지 않느냐임
          + 불평은, 심지어 정당한 이유가 있더라도, 여행 중에는 하지 말 것! 불평은 여행이 끝난 후 정리할 때 하는 것임
     * 모든 예술이 그렇듯이 제약은 창의성을 낳음. 여행에 창의적인 제약을 줘 볼 것
          + 자전거 여행, 하루용 가방에 초경량 짐 꾸리기, 극단적 저예산, 야간 이동수단만 이용하기 등
          + 이런 걸 섞어 볼 것. 방랑하는 것 조차 틀에 박힌 것이 될 수 있음(become a rut)
     * 요즘은 자동차 렌트가 엄청 쉬워짐
          + 도시 외곽의 여러 장소로 향하는 경우 이동 수단으로 가장 좋은 선택이며, 특히 2-3명이 여행할 경우 좋음
          + 반면에 혼잡한 도로, 무법적인 태도, 불리한 법적 책임 때문에 운전하고 싶지 않은 곳도 여전히 많이 있음
          + 이런 곳에서 며칠 여행을 위해 운전자와 자동차를 고용하는 것은 종종 놀라울 정도로 매력적임
          + 2-3명이 나눠서 낼 경우 총 비용은 기차와 택시를 타는 것보다 적을 수 있음
          + 도어투도어 서비스도 받고, 현지 도로와 최고의 식당을 잘 아는 운전자와 함께라면 일반 렌트보다 2배 비싸다고 해도 2배 더 좋을수 있음
          + 보통 여행 포럼에서 추천을 검색해서 드라이버를 찾음. 의사 소통 능력으로 후보자 점수를 매김
     * 당신이 여유가 있다면 친구에게 여행 경비를 지원해 함께 떠나는 것도 좋음. 둘다 즐거운 시간을 보내게 될 것
     * 묘지에 가보고, 신성한 장소를 찾아 볼 것. 사람들은 그곳에서 진짜로 그렇게 살아감
          + 그냥 시장만 방문하지 말고, 작은 워크샵, 철물 점, 약국에 가볼 것
          + 이런 곳은 지역적인 특성을 쉽게 볼 수 있음. 어떻게 다르고 어떻게 같은지 한번에 확인해 볼 것
     * FlightAware는 항공편 상태를 알려주는 최고의 무료 앱
          + 가끔 항공사 보다도 몇시간 더 빨리 지연에 대해 알려주는 경우도 있음
          + 팁: FlightAware를 이용해서 당신이 타고갈 비행기가 도착했는지를 확인할 것
     * 엉성한 여행 계획과 엉성한 장소로의 여행도 좋음
          + 기회를 잡을 것. 만약 일이 잘못되면, 당신의 휴가가 모험으로 바뀌는 것
          + 완벽함은 시계를 위한 것이고, 여행은 불완전 해야함
          + 아무 일도 잘못되지 않는다면 스토리는 없음
     * 여행의 즐거움은 짐의 무게와 반비례함
          + 여행이 길수록 짐을 덜 가져 가야함
          + 6주 여행을 가는 사람도 기내 반입용 짐 하나만으로 충분히 행복함
          + 짐이 가벼운 유연성이 극대화 되어, 엘리베이터 없어도 계단으로 올라갈수 있고, 툭툭을 공유해서 이용하거나, 효율적으로 짐을 싸고 풀고, 잃어버리지 않게 됨
          + 부족한 물건은 대부분 현지에서도 구할 수 있음
     * ‘내부 투어’ 경험하기
          + 공장 견학, 오페라 무대 뒤 방문, Amish 홈 등 일반인에게 공개되지 않은 장소를 둘러보면 잊지 못할 추억이 됨
          + 업무상 출장을 갈 때 가끔 연설료 대신 일반적이지 않은 장소의 내부 출입을 요청할 때도 있음
          + 단순한 돈으로는 살 수 없는 경험을 목표로 할 것. 좋은 여행은 미리 계획을 세워야 함
     * 밤에는 생각보다 항상 추움. 열대 지방은 특히. 무조건 겹쳐 입을 옷을 챙길 것
     * 여행 일정 계획하기
          + 모든 것을 보고 싶기도 하고 다시 돌아오지 않을 가능성이 높으므로, 일정을 쌓아서 여기저기 다녀보고 싶은 유혹이 생김
               o 우리는 X에 있고 Y와 Z는 매우 가깝기 때문에, Y랑 Z를 다 보는게 좋지만..
          + 역설적으로 여행할 때는 도착한 후에 이동 시간을 최소화 해야함
          + 여러 장소에서 약간의 시간을 보내는 것보다, 몇개의 장소에서 더 많은 시간을 보내는게 훨씬 좋음
     * 자신의 나라가 아닌 전 세계 어디에서든 기차를 예약하려면 가장 먼저 ""The Man in Seat 61""에 가 볼 것
          + 원하는 기차를 편하게 예약 가능
     * 다양한 사람들과 함께 여행을 한 지 53년이 되었지만, 먹는 곳과 장 질환이 있는지의 여부 사이에 아무런 상관관계가 없다는 걸 알게 됨
          + 따라서 현지 음식을 최대한 즐기기 위해 내가 정한 원칙은 건강해 보이는 현지인들이 먹는 곳에서 먹는 것
     * 사람들이 방문하기 좋아하는 도시 리스트에는 공통점이 있음: 보행자 중심
          + 부킹닷컴 같은 온라인 호텔 사이트에는 지도를 보고 위치별로 호텔을 선택가능
          + 가능하면 걷기에 가장 좋은 곳 근처의 호텔을 예약해서 문을 나가 산책을 시작할 것
     * 정말 기억에 남는 여행을 하려면, 예약 없이 여행을 떠날 것
          + 마음에 들면 하루 더 머물고, 싫으면 하루 일찍 떠나면 됨
          + 기차가 만석이면 버스를 타는 등의 자유는 해방감을 줌
     * Google Translate 앱은 음성, 텍스트, 필기를 250개 언어로 번역할 수 있고 무료임
          + 메뉴판 해석, 표지판 읽기, 직원과의 대화 등에 유용함
          + 종종 생명의 은인이 됨
     * 대형 럭셔리 크루즈는 취향이 아니지만, 소형 크루즈는 완전히 다르고 고려해볼만 함
          + 숙소가 이동하는 거니까 짐을 한 번만 풀면 됨
          + 소규모 그룹 여행 시에 좋은데, 식사 결정이 간단함 (항상 배에서 식사)
          + 소형 크루즈는 빠르게 하선할 수 있고, 작은 마을을 방문할 기회가 많음
          + 활동 옵션이 쇼핑 외에도 스노클링, 카약, 자전거 타기, 하이킹 등 다양함
          + 하루 대부분을 배 밖에서 보내며 경험을 쌓을 수 있음
          + 소형 크루즈의 기준은 40인 이하, 가격은 비싸지만 거의 매 순간이 가치 있음
          + 소형 크루즈가 좋았던 추천 여행지: 갈라파고스, 알래스카 내륙 수로, 메콩강, 터키 해안, 인도 케랄라
     * 여행 속도는 걷고, 자전거 타고, 운전하는 이동 속도가 아니라 휴식 시간에 의해 결정됨
          + 천천히 여행하고 자주 쉬는 것이 중요함
          + 가장 기억에 남는 순간들, 놀라운 낯선 사람들과의 대화, 실내 초대, 숨겨진 예술 작품은 보통 당신이 움직이지 않을 때 일어날 것
     * 전문 가이드는 대체로 흥미롭지 않음
          + 가이드북에서 볼 수 있는 내용을 반복하는 경우가 많아서 거의 고용하지 않음
          + 현지 친구나 지인을 통해 즉흥적으로 여행하는 것을 더 선호
     * 비누 대신 휴대용 세제 시트를 준비하면 유용함
          + 무게가 거의 없고 샐 염려가 없어 응급 세탁에 적합함
     * 여행 중에는 항상 연결 상태를 유지해야 함. 셀룰러 커버리지와 Wifi가 필요
          + 내비게이션, 번역 앱, 차량 호출, 모바일 결제를 위해서는 안정적인 모바일 네트워크가 필요함
          + T-Mobile, Google Fi 같은 국제 무료 플랜이 있는 통신사가 최선
          + 두 번째 옵션은 현지 SIM 카드나 eSIM을 사용하는 것
          + 데이터 사용량을 줄이기 위해 사진 및 동영상 백업 기능을 꺼 두는 것이 좋음
     * 어디서나 속거나, 사기를 당하거나, 이용당할 수 있음
          + 그러나 역설적이게도 그런 일을 피하는 가장 좋은 방법은 낯선 사람을 신뢰하고 잘 대하는 것
          + 친절하게 대하면 좋은 대우를 받을 가능성이 높아짐
          + 그 반대도 마찬가지. 안전을 위해 미소를 짓고, 겸손하고 자존심을 최소화 할 것
          + 왜 이게 전 세계 어디에서나 통하는지 모르겠음. 심지어 ""나쁜"" 평판이 있는 곳에서도 통함
     * 관광지 근처에서도 중심지에서 최소 5블록 이상 걸어나가면 저렴하고 맛있는 식사를 할 수 있음
     * 디지털 지갑이 현금을 대체하고 있음
          + 영국과 중국에서는 현금을 전혀 사용하지 않고 여행 가능
          + 현금을 줄이려면 Apple Pay, Google Pay, Alipay를 미리 설정해둘 것
          + 공항에서 환전할 필요 없이 현지 ATM에서 인출하는 것이 더 경제적(수수료가 없는 카드를 사용)
     * 사람들이 많이 가는 방향을 따라가면 흥미로운 장소를 발견할 가능성이 높음
          + 시장, 퍼레이드, 생일 파티, 거리 공연, 축제 등을 우연히 마주칠 수 있음
     * 최신 가이드북을 구입하는 것이 유용함
          + 점심값 정도의 비용으로 가장 신뢰할 수 있는 최신 정보를 얻을 수 있음
          + 온라인 여행 포럼을 함께 참고하면 정보의 깊이와 최신성을 모두 확보 가능
     * 여행을 처음 시작하고 세계를 거의 보지 못했다면, 여행 비용이 가장 저렴한 곳으로 향하면 여행 시간을 두 배로 늘릴 수 있음
          + 저렴한 여행지를 선택하면 같은 예산으로 두 배 더 오래 여행할 수 있음
          + 'The Cheapest Destination Blog' 참고
     * 오늘날 세계 곳곳에서 오토바이는 자동차의 역할을 함
          + 뒷좌석에 타거나 우버같은 앱으로 모토-택시를 이용하거나, 가이드가 운전하는 오토바이 투어를 할 수 있음
          + 오토바이를 주로 이용하는 지역에선 일반 자동차보다 이동이 10배 더 빠를 수 있음
     * 해외에서 맥도날드를 방문해보는 것도 흥미로운 경험이 될 수 있음
          + 현지화 된 메뉴, 또는 익숙한 것의 예상치 못한 버전을 접할 수 있음
     * 가방에 Apple AirTag을 넣어두면 분실 방지에 도움됨
          + 호텔 보관 가방, 버스 아래 짐칸, 배송해야 하는 짐의 위치를 추적 가능
     * 최고의 여행 경험을 위해서는 많은 돈이나 많은 시간이 필요함
          + 둘 중에서는 돈보다 시간이 중요함. 노력할 수는 있겠지만 돈으로는 시간이 가져다주는 것을 살 수 없음
          + 희귀한 축제에 참석하고, 새로운 단어를 배우고, 실제 가격을 알고, 날씨를 기다리거나, 지프로 일주일이 걸리는 곳에 갈 시간은 충분함
          + 시간은 자신에게 줄 수 있는 유일한 자원이므로, 돈이 없는 젊은이라면 이것을 활용할 것
     * 기념품은 의미 있는 것이어야 함
          + 단순히 예쁘거나 저렴한 것이 아니라 여행에서 특별한 의미가 있는 것이 좋음
          + 기념품을 살 때 스스로에게 물어볼 수 있는 좋은 질문은 ""집에 돌아갔을 때 어디에 둘까?""임
     * 최고의 기념품은 여행의 기억임
          + 여행 일기를 쓰거나, 친구에게 업데이트를 보내거나, 스케치북을 가지고 다니고, 본 것을 어디다 올리거나, 사진첩을 만드는 것도 방법임
     * 식당 추천을 받을 때는 ""어디가 맛있나요?""가 아니라 그들이 어디서 먹는지를 물어볼 것. ""최근에 어디에서 식사했나요?""
     * 내가 2주짜리 여행을 최적화하는 방법
          + 새로운 나라에 도착 후 즉시 가장 멀고 외진 곳으로 이동
               o 여행 중에 작은 마을, 외딴 스파, 친구의 농장 또는 야생 지역을 방문할 계획이라면 즉시 갈 것
               o 공항 근처에 들르거나 도착 도시에서 하룻밤 쉬지 말기. 적응하기위해 멈추지 말 것
               o 가능하다면 비행기, 버스, 지프, 차를 타고 방해받지 않고 가장 먼 지점까지 바로 갈 것
          + 먼 지역에 도착해서 짐을 풀고 탐험하고 천천히 대도시로 돌아옴
          + 끝으로 직진(laser-straight)한후 구불 구불 돌아오는 방식임
               o 대도시는 전세계 대부분이 더 비슷하기 때문에 똑같아 보임
               o 이런 여행(Laser-back)에서는 완전히 새로운 곳에 던져진다는게 큰 차이임
               o 먼 지역에서 실수를 해도 비용이 적고 회복이 쉬움
               o 시간이 지나면서 점점 문명화된 환경으로 돌아오면서 도시를 더 새롭게 경험할 수 있음
               o 12일 일정이 최적이며, 10일간 본격적인 여행을 하고 2일을 이동 및 적응에 사용함
     * 여행 중에 일을 하거나 원격 근무를 하는 경우 'Nomadico' 뉴스레터를 참고하면 좋음
          + 매주 4개의 짧은 여행 팁을 제공하며 무료임

   맥도날드 방문은 쉬울 것 같아요. 재미있는 경험이 될 것 같습니다.

   인도도 가보셨으려나

   E&E 모드는 극강의 E 만 가능한 계획같네요.. 무리무리

   다른 나라에 비해서 비교적 재미없다는 싱가폴에서 소소하게 재밌었던 것 몇개 적어봅니다
     * 센트럴 아닌 주거 지역 호커센터에서 아침 먹기
     * 아파트 단지 찾아가서 코인세탁기 돌리기
     * 싱글리시로 커피 주문해보기: ex) 아이스 아메리카노 테이크아웃 = kopi o kosong peng dabao
     * 주말에 East Coast Park 가보기 - 한강이랑 또 다르게 재밌습니다
     * Sembawang Hot Spring에서 족욕하기

   한국 결혼식 오면 실망하실 것 같네요.

   패스트웨딩이라고 놀라워 할 수도.

   좋아용

   처음 봤는데 매우 유익하네요. 다음 여행가기전에 다시 봐야겠습니다. 👍🏻

   KK옹은 긱뉴스에서 인생 조언들로 여러번 소개 드렸네요. 이렇게 매번 잘 정리하는 것도 대단하신듯
     * 케빈 켈리의 68가지 조언
     * 케빈 켈리의 99가지 추가 조언
     * 케빈 켈리의 알았더라면 좋았을 103가지 조언
"
"https://news.hada.io/topic?id=19571","fastDOOM의 속도가 빠른 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          fastDOOM의 속도가 빠른 이유

왜 FastDOOM이 빠른가

     * 2024년 겨울, IBM PS/1 486-DX2 66Mhz 컴퓨터를 복원하며 FastDOOM을 테스트하게 되었음. 원래 DOOM은 21.5 fps였으나 FastDOOM은 30 fps로 30% 더 빠르게 실행되었음.

역사적 배경

     * DOOM은 NeXT Workstation에서 개발되었으며, DOS I/O는 id Software에서 작성되었음. 1997년에는 DMX라는 사운드 라이브러리 때문에 소스가 공개되지 않았고, 대신 Linux 버전이 공개되었음. 이후 커뮤니티는 PCDOOM v2를 통해 DOS 버전을 복원했음.

성능 향상의 큰 그림

     * Victor ""Viti95"" Nieto는 FastDOOM의 성능 향상을 위해 많은 노력을 기울였음. 52개의 FastDOOM 릴리스를 다운로드하고 성능을 비교하여 개선점을 분석했음.

Git 고고학

     * Viti95는 git에서 뛰어난 관리 능력을 보여주었으며, 각 커밋이 하나의 작업을 수행하고 각 릴리스가 태그되어 있었음. FastDOOM의 git 기록은 3,042개의 커밋으로 구성되어 있으며, 각 기능을 벤치마크할 수 있었음.

FastDOOM v0.1

     * 이 릴리스는 220개의 커밋을 포함하고 있으며, 주요 최적화는 상태 표시줄의 렌더링을 줄여 2 fps의 성능 향상을 가져왔음.

FastDOOM v0.6

     * 33개의 커밋이 포함된 이 릴리스에서는 불필요한 렌더링을 건너뛰고, 플레이어 포인터의 간접 참조를 제거하는 등의 최적화가 이루어졌음.

FastDOOM v0.8

     * 282개의 커밋이 포함된 이 릴리스에서는 텍스트 모드 렌더러에 초점을 맞추었으며, 여러 최적화가 이루어졌음.

FastDOOM v0.9.2

     * 110개의 커밋이 포함된 이 릴리스에서는 skyflatnum 비교 최적화와 R_DrawColumn 최적화가 이루어졌음.

FastDOOM v0.9.7

     * 293개의 커밋이 포함된 이 릴리스에서는 x86 ASM 변경 테스트와 CPU 선택 최적화가 이루어졌음.

모드 13h 대 모드 Y

     * FastDOOM은 다양한 CPU와 비디오 버스에 맞게 최적화를 시도했음. 모드 13h는 RAM에서 VRAM으로 데이터를 복사하는 방식이며, 모드 Y는 VRAM에서 직접 데이터를 쓰는 방식임. 각 모드는 CPU와 버스 속도에 따라 성능이 달라짐.

추가 최적화

     * OpenWatcom의 프로세서별 플래그를 사용하여 최적화를 시도했으나, 386 버전이 항상 더 빠르게 실행되었음. FastDOOM은 OpenWatcom v2에서 DJGPP(GCC)로 컴파일러를 전환하여 더 빠른 코드를 생성하려고 함.

전반적인 인상

     * Victor Nieto의 뛰어난 작업 덕분에 FastDOOM은 3,000개의 최적화를 통해 놀라운 성능을 보여주었음. 기존의 개선점을 활용하고 새로운 최적화를 도입하여 많은 주목을 받았음.

        Hacker News 의견

     * MPV 패치 v0.1의 빌드 36은 성능 향상에 큰 기여를 했음. ""Cripy 최적화""는 상태 바 퍼센트 렌더링을 변경되지 않았을 때 noop으로 전환하여 2fps의 향상을 가져왔음. 처음에는 믿기 어려웠지만, PCDOOMv2에서 패치를 적용해보니 엄청난 속도 향상이 확인되었음
          + 병목 현상이 예상치 못한 곳에 있을 수 있으며, 이를 발견하기 위해 프로파일링과 측정이 필요함
          + Doom의 구조가 전문가들에게는 상대적으로 명확할 수 있지만, 일반적으로는 병목 현상으로 예상하기 어려운 부분임
     * 성능 진화를 이해하기 위해 fastDOOM, PCDOOMv2, 원본 DOOM.EXE의 52개 릴리스를 다운로드하고, 모든 버전에서 -timedemo demo1을 실행하는 RUN.BAT을 생성했음
          + mTCP의 NETDRIVE를 사용하여 네트워크를 통한 저장 옵션이 과거에도 존재했음을 알게 되었음
          + NetDrive는 다른 컴퓨터에 호스팅된 원격 디스크 이미지를 로컬 장치처럼 접근할 수 있게 해주는 DOS 장치 드라이버임
     * GitHub의 Ken Silverman과의 스레드는 매우 유익함. FastDOOM 저자와 Ken이 486 레지스터와 클럭 사이클 효율성을 논의하는 과정이 인상적임
          + Doom의 성능 개선을 계속해서 이루어지고 있는 것이 기쁨
     * ""IBM PS/1 486-DX2 66Mhz, ""Mini-Tower"", 모델 2168""은 청소년 시절에 원했지만 가질 수 없었던 컴퓨터였음
          + 1992년에는 네 번째로 직접 조립한 PC를 사용 중이었음
          + KCS 컴퓨터 쇼는 부품을 구매하고 PC를 조립하여 사용 후 판매하고 다시 부품을 구매하는 과정을 반복할 수 있는 훌륭한 자원이었음
          + 1992년 말에는 486-DX3 100과 ULSI 487 수학 보조 프로세서를 사용 중이었음
          + 당시 캠퍼스에서 가장 빠른 PC를 가졌다고 주장할 수 있었음
          + 환경 과학을 전공했지만, 경력은 컴퓨터와 관련 있음
     * FastDOOM의 독특한 비디오 모드들이 언급되지 않았음
          + IBM MDA 텍스트 모드
          + EGA & Plantronics ColorPlus
          + 클래식 블루 & 핑크 CGA
          + CGA, 320x200x16 'ANSI from Hell' 해킹
          + Hercules
          + 대부분 VGA보다 성능이 떨어짐
     * 과거에는 486DX50을 DX2-66보다 선호했을 것임. 50MHz 버스 인터페이스가 33MHz보다 더 나았음
     * 문서에서 John Carmack의 성이 ""Carnmack""으로 잘못 표기되었음
     * ""Ibuprofen을 복용하며 게임을 해야 했지만 fastDOOM을 알게 되었음""이라는 표현이 이해되지 않음
     * 가독성을 위해 HTML에 시스템 UI 폰트를 추가하는 것을 고려할 수 있음. 코드 블록은 여전히 고정폭 폰트로 표시됨. 고정폭 폰트는 프로즈에 적합하지 않음
     * ""Ibuprofen을 복용하며 게임을 해야 했지만 fastDOOM을 알게 되었음""이라는 표현의 의미를 이해하지 못함
"
"https://news.hada.io/topic?id=19533","Firefox Sync 서버 셀프 호스팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Firefox Sync 서버 셀프 호스팅

     * 자체 호스팅 Firefox Sync 서버 설정
          + Firefox에서 LibreWolf로 전환한 후, 자체 호스팅 Firefox Sync 서버에 관심을 가지게 됨.
          + 처음에는 Mozilla의 Sync Server 저장소를 찾았으나, 유지보수가 중단된 상태였음.
          + Rust 기반의 syncstorage-rs로 전환하여 진행하기로 결정함.
     * Docker의 복잡성과 혼란
          + Docker 문서에서 grpcio와 protobuf 버전 일치 문제와 수동 복사 지시사항 등 혼란스러운 부분이 있었음.
          + syncstorage-rs-docker 저장소를 발견하여 더 간단한 Docker 설정을 찾게 됨.
     * 서버 설정: Docker Compose와 MariaDB
          + docker-compose.yaml 파일에 필요한 서비스를 추가함.
          + 데이터베이스 비밀번호 설정 시 특수 문자를 피하는 것이 중요함.
          + MariaDB 컨테이너를 실행하고 초기화 스크립트를 실행하여 데이터베이스를 초기화함.
          + 전체 스택을 온라인으로 가져옴.
     * Caddy를 사용한 Reverse Proxy 구성
          + Caddy reverse proxy를 업데이트하여 새로운 Syncserver로 포인트함.
          + DNS 항목을 업데이트하고 프록시를 재시작하여 서버를 실행함.
     * 직면한 도전 과제
          + MariaDB 컨테이너 재시작 시 데이터 지속성 문제 발생.
          + Docker 이미지와 중간 파일로 인해 서버 저장 공간 부족 문제 발생.
          + 올바른 설정 단계를 찾는 데 시간이 걸림.
     * 최종 생각
          + 자체 호스팅 Firefox Sync 서버 설정은 쉬운 작업이 아님.
          + 공식 문서는 혼란스러웠지만, syncstorage-rs-docker 저장소 덕분에 가능했음.
          + 약 2시간이 소요되었지만, 그만한 가치가 있었음.

        Hacker News 의견

     * Mozilla 인프라를 사용하여 인증, 이메일, 계정 메타데이터 등의 서비스를 지원하는 설정임
     * 계정 마이그레이션이 가능하다면 나중에 이를 연결할 수 있으며, 모든 구성 요소를 자체 호스팅하는 것도 가능하지만 조금 더 복잡함
          + 문서와 개발 경험이 개선되고 있음
     * Garuda Linux는 FireDragon 브라우저를 위해 자체 Firefox Sync 서버를 호스팅하고 있음
          + Rust 기반이 아닌 이전 버전의 sync 서버를 사용 중임
     * 개인 경험을 공유하며, 이전 Python 2로 작성된 버전이 훨씬 나았다고 언급함
          + Docker나 Python이 필요하지 않지만, 현재 MySQL이 필요하며, sqlite 지원을 위한 자원봉사자가 있음
          + 주요 기여자들은 메트릭 수집을 위한 정당성을 작성하고 새로운 메트릭 프레임워크를 도입하는 데 집중하고 있음
     * Canvas Browser Extensions는 브라우저 탭을 자체 호스팅된 가상 디렉토리 트리에 동기화하는 것을 목표로 함
          + lmdb와 roaring bitmap 인덱스를 사용하며, rxdb나 pouchdb를 사용했어야 했다고 회고함
          + 서버 구성 요소가 재작성 중이며, 새로운 도구로 인해 아이디어의 가장 큰 제한 요소는 시간이 됨
     * Mozilla를 신뢰하여 데이터를 맡기지만, 인증 설정이 복잡하여 공공 호스팅 서비스를 사용하는 것이 더 나을 수 있음
     * Firefox Sync와 유사한 Floccus는 북마크와 탭 동기화만 필요하다면 설정이 간단함
     * MySQL과 Spanner가 현재 지원되는 DB 엔진이며, sqlite와 Postgres 지원을 위한 노력이 진행 중임
          + 다중 사용자 인스턴스는 Postgres를 통해 저장하는 것이 더 나을 수 있음
     * Firefox Sync가 E2E 암호화되어 있어 프라이버시 이점이 무엇인지 질문함
     * 자체 호스팅 솔루션이 너무 복잡해 보이며, SQLite를 사용하는 간단한 동기화 서버 구현이 이상적임
     * go-syncstorage는 완전히 배포되지는 않았지만 수십만 명의 사용자와 함께 테스트되었으며 안정적임
"
"https://news.hada.io/topic?id=19468","카카오의 언어모델, Kanana 테크니컬 리포트 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     카카오의 언어모델, Kanana 테크니컬 리포트 공개

     * 카카오는 서비스 적용에 최적화된 AI 모델을 목표로, 높은 성능과 비용 효율성을 동시에 고려한 ‘카나나 모델 패밀리(Kanana Model Family)’를 개발하고 있음
     * 초거대 언어모델 ‘Kanana Flag’의 학습을 완료하고, 이를 포함한 Kanana Essence, Kanana Nano 등의 언어모델 라인업을 완성
     * AI 연구 생태계 기여 및 글로벌 AI 커뮤니티와의 협업을 위해 ‘Kanana Nano 2.1B’ 모델(base, instruct, embedding)을 오픈소스로 공개

1. Global Top 수준의 한국어·영어 고성능 달성

     * 카카오는 글로벌 경쟁력을 갖춘 모델 개발을 목표로, 한정된 자원 내에서 최고의 성능을 달성하기 위해 다양한 학습 기법을 실험
     * Kanana Flag는 학습자원 최적화를 통해 타사 모델 대비 50% 이상의 학습 비용 절감과 동시에 최고 수준(SOTA)의 성능을 기록
     * 영어 벤치마크(MMLU, MT-Bench)에서 글로벌 모델과 유사한 성능을 보였으며, 한국어 벤치마크(KMMLU, KoMT-Bench)에서는 경쟁 모델 대비 압도적인 성능을 입증
     * 벤치마크 성능 요약
          + 대화 및 요청 수행 성능
               o Kanana Flag 32.5B는 영어 및 한국어 기반 대화에서 경쟁 모델 대비 높은 점수를 기록함
               o 특히 지식 기반 한국어 대화(KoMT-Bench) 및 논리적 사고 평가(LogicKor)에서 우수한 성능을 보임
          + 지식, 코딩, 수학 성능
               o 영어(81.08점) 및 한국어(64.19점) 지식 평가에서 높은 점수를 기록하며, 경쟁 모델 대비 우수한 성과를 거둠
               o 코드 완성 및 코드 솔루션에서도 높은 정확도를 보였으며, 기초 수학(GSM8K)에서는 90.83점으로 우수한 성능을 달성함

2. 학습 효율화로 유사 사이즈 모델 대비 절반 이하의 학습 비용

     * 대규모 언어 모델 학습에는 막대한 컴퓨팅 자원이 소요되므로, 카카오는 학습 효율성을 극대화하는 Pre-training 전략을 적용함
     * Staged pre-training 방식을 활용하여 8B, 26.8B 크기의 모델을 학습한 후, 최적화를 통해 Kanana Nano 2.1B 모델을 구축함
     * 가지치기(Pruning) 및 지식 증류(Distillation) 기법을 활용하여 경량화 모델을 최적화함
     * 깊이 업스케일링(DUS, Depth Up-Scaling) 기법을 적용하여, Kanana Essence 9.8B 및 Kanana Flag 32.5B를 개발함
     * 이를 통해 유사한 크기의 글로벌 모델 대비 절반 이하의 비용으로 학습을 최적화하는 데 성공함

3. 온디바이스에서도 활용 가능한 고성능 경량 모델, Kanana Nano 2.1B 오픈소스 공개

     * 연구자 및 개발자의 활용도를 고려하여, ‘Kanana Nano 2.1B’의 base, instruct, embedding 버전을 오픈소스로 공개함
     * Kanana Nano 2.1B는 온디바이스 환경에서도 원활히 운영될 수 있도록 설계되어, 연구 및 개발 목적으로 활용 가능함
     * 대형 모델의 높은 비용 문제와 작은 모델의 낮은 정확도 문제를 고려하여, 가장 실용적인 크기로 공개를 결정함
     * 비교적 작은 모델임에도 글로벌 모델과 견줄 수 있는 성능을 보이며, 다양한 응용 가능성을 제공함
     * 다만, 복잡한 추론이나 수학 문제 해결 등 고난도 태스크에서는 한계가 있을 수 있으나, 연구자 및 개발자들이 이를 기반으로 다양한 연구를 진행할 수 있도록 지원할 예정임

마무리

     * 카카오는 이번 테크니컬 리포트를 통해 카나나 언어모델 전체 라인업과 오픈소스 모델 Kanana Nano 2.1B를 소개함
     * 향후 강화학습(RL) 기반 기술을 접목하여 reasoning(추론) 능력, 수학 및 코드 성능을 강화할 예정임
     * 연속 학습(Continual Learning) 을 통해 새로운 데이터를 지속적으로 학습하면서 기존 학습 내용을 유지할 수 있도록 개선할 계획임
     * 얼라인먼트(Alignment) 기술을 고도화하여 사용자 요청 수행 능력을 강화하고, AI가 보다 자연스럽게 이해하고 대화할 수 있도록 발전시킬 예정임
     * 궁극적으로 카나나 모델은 멀티모달 AI로 진화하여 사람처럼 보고, 듣고, 말하며 직관적으로 소통할 수 있도록 개발될 것임
     * 카카오는 AI가 사용자 일상에 가치를 더할 수 있도록 지속적으로 도전하고, 기술 경쟁력을 강화해 나갈 계획임

   Kanana GitHub link
   Kanana Technical Report link
   Kanana Nano 2.1B Download

   [1] 가지치기(Pruning): AI 모델의 구성 요소를 가지치기해 중요 요소만 남기는 기법
   [2] 지식증류(Distillation): 큰 모델의 지식을 더 작은 모델로 전달하는 기법
   [3] 깊이 업스케일링(Depth Up-Scaling): 기존 모델의 레이어를 더 많이 쌓아 올려 모델 규모를 효과적으로 키우는 방식

   라이센스가 어떻게 되어 있나 봤더니 CC BY-NC-ND 4.0네요..?? NonCommercial이면 카카오 외 회사는 쓰지말라는건지... 의도를 잘 모르겠네요

   ㅋㅋㅋㅋㅋ

   ㅋㅋㅋ
"
"https://news.hada.io/topic?id=19541","Firefly의 로봇 달 착륙선 ‘Blue Ghost’ 달 착륙 성공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Firefly의 로봇 달 착륙선 ‘Blue Ghost’ 달 착륙 성공

     * 미국 텍사스 기반 회사 Firefly Aerospace가 개발한 로봇 달 착륙선 Blue Ghost가 3월 2일(CT 기준) 성공적으로 달 표면에 착륙함
     * Blue Ghost는 1월 SpaceX 로켓을 이용해 발사되었으며, 지구 궤도를 돌며 달로 접근 후 착륙 진행
     * Firefly는 민간기업 중 두 번째로 달 착륙에 성공한 기업이 됨 (이전에는 Intuitive Machines가 성공)
     * 이번 임무는 NASA의 CLPS(Commercial Lunar Payload Services)와 Artemis 프로그램의 일환으로 진행됨

  향후 14일간 수행할 과학 연구

     * X-밴드 안테나 활성화하여 달에서 데이터를 송신할 예정
     * 10개의 과학 및 기술 실험 장비 점검 (예: 달 표면의 열 흐름 연구, 착륙 과정에서 발생한 먼지 분석 등)
     * 3월 14일 달 일식 관측 예정 (지구의 그림자가 착륙 지역을 가림)
     * 달 지평선 빛 현상(Lunar Horizon Glow) 촬영 시도 (달 먼지가 전기적으로 떠오르는 현상)
     * 14일 후 달 밤 돌입 시 배터리로 작동 유지 시도 (영하 250°F/130°C 환경에서 생존 여부 확인)
     * 임무 종료 후 Blue Ghost는 달 표면에 영구히 남겨질 예정

  Blue Ghost의 디자인 및 착륙 성공 요인

     * Firefly의 CEO 제이슨 김(Jason Kim)은 기존 달 착륙선의 설계를 참고하여 ""짧고 뚱뚱한"" 형태의 안정적인 설계를 적용했다고 설명
     * 착륙 지점은 Mons Latreille(고대 화산 지역) 로 선정됨 (달의 남극이 아닌 지역)
     * 착륙선의 4개의 착륙 다리 중 3개만 착륙 신호 확인, 하지만 착륙선은 정상적으로 작동 중

  Blue Ghost의 특수 기술 및 실험

     * 달 표면 GPS 신호 테스트 (LuGRE 장비 활용, NASA와 이탈리아 우주국 협력)
     * 달 먼지 진공 장치(Lunar PlanetVac) 실험 (허니비 로보틱스 개발, 진공 청소기처럼 달 표면 샘플 채취)
     * 고해상도 카메라 12대 탑재, 4K 영상 촬영 및 실시간 데이터 전송
     * NASA의 전기 먼지 방지 실험 장비를 이용해 달 표면 먼지 관리 테스트 진행

  NASA 및 Firefly 관계자 반응

     * NASA와 Firefly 주요 관계자들은 성공적인 임무 수행을 축하하며 샴페인 건배
     * NASA 과학 미션 책임자인 닉키 폭스(Nicky Fox)는 ""모든 과정이 완벽하게 진행됐다""고 평가
     * Firefly CEO 제이슨 김은 ""이번 성공이 향후 화성 탐사로 이어질 수 있다""고 언급

  향후 계획 및 민간 달 탐사 경쟁

     * Firefly는 이미 두 번째 Blue Ghost 임무 준비 중, 달의 뒷면 착륙 예정
     * NASA 및 여러 민간 기업이 달 탐사 경쟁에 적극 참여, 현재까지 중국, 인도, 일본만이 달 착륙 성공
     * 100개 이상의 달 탐사 임무가 2030년까지 계획되어 있으며, 달 자원 활용 및 장기 거주 기반 마련이 목표

   이번 착륙은 NASA의 민간 우주 탐사 지원 프로그램의 성공 사례로 평가되며, 미래 유인 달 탐사의 기반을 다질 중요한 성과로 여겨짐.

        Hacker News 의견

     * 지금까지 촬영된 사진들: 링크
     * 마지막 궤도 이탈 중 촬영된 멋진 달 비행 영상도 있음. 만세!
     * 달이 3D라는 사실이 놀라움. 지구의 사진을 보면 땅이 평평해 보이지만, 달의 분화구 깊이와 능선 높이는 정말 놀라움
     * KSP가 실제 상황을 정말 잘 모방했음
     * 관련된 모든 사람들에게 축하를 보냄
     * 라이브 스트림을 보려고 했지만 못 봤음. 성공적인 착륙 순간은 꽤 소박했으며, 주로 정적인 화면과 텔레메트릭스만 공개되었지만, 마법 같은 느낌이었음. 이제 달은 인류의 손이 닿을 수 있는 곳에 있는 것 같음
     * 우연히 지역 도서관에서 '우주 형제들'(코야마 츄야 작)을 발견하고 최근에 읽기 시작했음. 10년 전의 관점과 현재의 우주 탐사 발전을 비교하는 것이 재미있음
     * 달을 제대로 식민지화할 수 있다면 정말 멋질 것임. Futurama처럼 사람이 살지는 않더라도, 달로의 왕복 여행이 지속적으로 이루어진다면 믿을 수 없을 만큼 멋질 것임
     * 아니면 그냥 달을 폭파시킬 수도 있음. 그것도 나름 재미있을 것임: 링크
     * 저 창백한 푸른 점이 보임. 멋진 셀피임
     * 비전 내비게이션 팀의 비하인드 씬: 링크
     * 추가 정보:
          + 링크
          + 링크
     * 더 많은 논의: 링크
     * 텍사스 Cedar Park에 대해: Cedar Park에 사는 많은 사람들이 자신을 Austin 출신이라고 말할 것임. 북쪽의 교외 지역임. 몇 년 전 Firefly의 엔지니어를 알았는데, 항상 이야기 나누기 흥미로웠음. 몇 년 전 Craigslist를 통해 Firefly 직원에게 MK3s+ 3D 프린터를 판매했음
     * 그들이 성공을 거두고 있어 기쁨
     * 정말 멋짐. 이런 것들은 미래를 느끼게 함. 예전에 가본 적이 있지만 여전히 멋진 이벤트임
     * 누군가가 다시 금성으로 가길 바람. 어렵다는 걸 알지만, 누군가 제발 가줬으면 함
"
"https://news.hada.io/topic?id=19497","Microsoft, 14년간 방치한 Skype 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Microsoft, 14년간 방치한 Skype 서비스 종료

     * Microsoft는 2025년 5월 5일부로 Skype 서비스를 종료한다고 발표
     * 사용자들은 Microsoft Teams로 전환하여 기존의 채팅과 연락처를 계속 사용할 수 있음
     * Skype는 2003년에 시작한 인기 있는 VoIP 메시징 플랫폼
          + 2011년, Microsoft는 Skype를 85억 달러(9.2조원)에 인수
          + 이후 Windows, Windows Phone, Xbox 등 다양한 제품에 Skype를 통합하려는 시도를 했음
     * 그러나, 최근 몇년간 Skype는 심하게 방치되었음
          + 팬데믹 기간 동안 Skype를 효과적으로 활용하지 못하였고 소비자들에게 외면당함
          + 많은 사용자들이 Telegram, WhatsApp, iMessage, Discord 등 더 현대적인 플랫폼으로 이동
     * Microsoft는 Teams 서비스를 구축하는 데 Skype의 기술을 백본으로 활용했으나 둘은 많이 다름
     * Skype의 종료는 오랫동안 예견된 일
          + 현재의 Skype는 웹 기반 앱으로, 동기화 및 알림 기능이 느리고 부실하다는 평가를 받음
          + Microsoft는 Skype를 개선하기 위한 여러 시도를 했으나 큰 성과를 거두지 못함
          + 2024년 5월 이후로 Skype에 대한 주요 업데이트는 이루어지지 않았음
     * Microsoft는 이제 Skype가 실제로 2025년 5월 5일에 종료될 것이라고 확인
          + Skype 사용자가 Microsoft Teams로 마이그레이션을 시작할 수 있는 기간이 두 달 남짓 남았다는 뜻

        Hacker News 의견

     * Microsoft와 Skype가 팬데믹 동안 비디오 회의에서의 기회를 놓친 점은 비즈니스 스쿨에서 연구할 만한 가치가 있음
          + 'Skype'라는 용어는 여전히 비디오 통화의 대명사로 사용되며, 특히 나이가 많은 사람들 사이에서 FaceTime과 다른 서비스 대신 사용됨
     * Windows 7 시절, 부모님 컴퓨터에 Skype를 설치했을 때, 전화 받는 것처럼 간단하게 사용할 수 있었음
          + 최근에는 데스크톱에서 전화 받는 것처럼 간단한 애플리케이션이 없어졌음
          + 아버지에게 Zoom 링크를 이메일로 보냈지만, 컴퓨터 사용이 복잡해져서 로그인할 수 없었음
          + 규제가 경쟁사를 인수하는 것을 막았으면 좋겠음
     * Microsoft가 Skype에 투자하지 않음으로써 비디오 회의의 표준이 될 기회를 놓쳤다는 의견이 있음
          + 그러나 Teams를 통해 여전히 해결책을 제공하고 있음
          + Zoom의 시장 가치를 고려할 때, Microsoft는 큰 손해를 보지 않았다고 생각됨
     * 미국 Skype 번호를 사용 중이며, 대체 VoIP 서비스에 대한 의견을 찾고 있음
          + 미국 외 지역에서 장기간 사용할 수 있는 대체 전화번호 서비스가 있는지 궁금함
     * Skype를 사용하여 친구와 가족과 연락했던 좋은 기억이 있음
          + Microsoft가 Nokia와 Skype를 인수 후 방치한 점이 유럽 기술 산업에 피해를 줬다는 의견이 있음
     * Skype는 처음 해외에서 생활할 때 큰 도움이 되었음
          + 과거에는 회사들이 Skype를 사용했지만, 이제는 Slack을 사용함
          + Microsoft가 Skype를 잘못 관리했다는 의견이 있음
     * Teams는 무거운 UX를 가지고 있으며, Skype의 경량감을 잃어버렸음
          + Microsoft가 Skype를 잘 개발했다면 더 나은 결과를 얻었을 것이라는 의견이 있음
     * Skype는 해외에서 미국과 캐나다의 무료 전화번호로 쉽게 전화를 걸 수 있는 방법이었음
     * Microsoft가 Skype를 인수했을 때, 경쟁자를 제거하기 위한 목적이었음
          + Skype 기술을 흡수하고 Live Messenger를 Skype처럼 보이게 만들었을 수도 있었음
     * Microsoft가 Skype의 종료를 발표했음
          + 2025년 5월에 Skype가 종료될 예정임
          + 구독 및 자동 충전은 2025년 4월 3일까지 유지됨
          + Skype 번호는 2025년 4월 3일까지 자동 갱신됨
          + SMS 서비스는 2025년 5월 5일에 종료됨
          + Skype Dial Pad는 2025년 5월 5일 이후에도 웹 포털과 Teams에서 사용 가능함
          + Microsoft는 Skype 사용자들에게 감사의 메시지를 전함
"
"https://news.hada.io/topic?id=19551","스크롤 시 페이지를 따라 내려가는 Scroll Bar Buddy 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 스크롤 시 페이지를 따라 내려가는 Scroll Bar Buddy 개발

     * Scroll Buddy 소개
          + 스크롤 바를 재미있게 바꾸기 위해 애니메이션 스틱 피규어를 추가한 프로젝트임
          + 스크롤할 때 페이지 옆에서 위아래로 움직이는 스틱 피규어를 볼 수 있음
          + 향후 스케이트보더, 암벽 등반가, 다람쥐 등 다양한 버전을 계획 중임
     * 주의 사항
          + 페이지 측면에 포함된 예제 애니메이션이 일부 독자에게 문제를 일으킬 수 있음
          + 전정 운동 장애가 있는 독자는 애니메이션을 보기 전에 기기에서 모션 감소 기능을 활성화하는 것이 좋음
          + 모션 감소 설정이 켜져 있으면 대부분의 브라우저에서 Scroll Buddy가 숨겨짐
     * 기타 정보
          + 이 프로젝트는 간단한 자바스크립트로 만들어졌음
          + 스크롤 바를 더욱 흥미롭게 만들기 위한 아이디어를 제안받고 있음
     * 기타 내용
          + 나머지 텍스트는 스크롤을 위한 더미 텍스트로, 실제 내용과 관련이 없음

        Hacker News 의견

     * 재미있음. 코딩하지 않은 아이디어가 있었음. 기본적으로 낙하산을 가진 햄스터가 페이지 하단으로 천천히 떨어지는 것임
          + 빠르게 스크롤하면 낙하산이 펼쳐져서 뷰포트 하단에 다시 착륙함
          + 마우스를 올리면 ""Top"" 표지판을 들고 클릭하면 제트팩으로 날아가며 화면이 맨 위에 도달하면 다시 낙하산을 펼쳐 화면 하단에 부드럽게 착륙함
     * 왜 아무도 이것을 'Stroll Bar'라고 부르지 않았는지 궁금함
     * 사용자가 prefers-reduced-motion 설정을 했을 때는 이런 기능을 비활성화해야 함
          + 추가적인 CSS 규칙이 필요함
          + @media (prefers-reduced-motion) { #scrollBuddy { visibility: hidden; } }
     * 지루한 스크롤바 대신 애니메이션 스틱 피규어가 페이지 옆에서 위아래로 걷는 것이 재미있을 것 같음
          + 첫 번째 프로토타입을 만들었음
          + 다음에는 스케이트보더, 암벽 등반가, 다람쥐를 만들 예정임
          + 다른 스크롤 친구로 무엇을 만들면 좋을지 궁금함
     * 왜 구현을 Google Form 뒤에 숨기는지 궁금함
          + 구현 세부사항은 DOM에서 쉽게 접근 가능함
          + 이메일을 제공하지 않고도 관련 세부사항을 추출할 수 있는 gist를 공유함
     * Google Form 뒤에 있는 이유가 궁금함. 이메일 주소를 수집하기 전에 어떻게 생겼는지 스크린샷조차 없음. 이상한 게시물이 메인 페이지에 올라옴
     * 90년대 후반 사람들이 웹사이트에 눈이나 마우스를 따라다니는 불꽃 효과를 추가하던 시절이 생각남
     * 무엇을 놓치고 있는지 모르겠음. Firefox와 Chrome에서 스크롤바 자체 외에는 아무것도 보이지 않음. 사용자 정의 스크롤바 색상이 관련이 있는지 궁금함
     * 이런 프로젝트는 옛날 인터넷을 떠올리게 함. 좋아함
     * 기존 스크롤바가 얼마나 쓸모없고 사용하기 어려운지를 강조함
          + 페이지에서 어디에 있었는지를 쉽게 볼 수 있는 기능이 좋았음. 유머도 있음. 좋아함
"
"https://news.hada.io/topic?id=19579","Show GN: Yuki-no: 오픈소스 문서 번역 프로젝트를 위한 GitHub Action","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: Yuki-no: 오픈소스 문서 번역 프로젝트를 위한 GitHub Action

   안녕하세요. Vite 한국어 문서 번역 프로젝트를 진행하며 개발한 오픈소스를 소개합니다.

  Yuki-no (Gumball12/yuki-no)

   번역 작업은 원본 문서 변경에 대한 추적이 매우 중요합니다. 그렇지 않으면 자칫 잘못된 부분을 번역하거나, 내용 중 일부를 빠트릴 수 있습니다.

   이를 위해 기존에는 Ryu-Cho 라는 오픈소스를 사용했습니다. 이 오픈소스는 GitHub Actions를 이용해, 원본 리포지토리 변경 사항을 번역 리포지토리 GitHub Issues로 등록해 알려줍니다. 다만 2년 가까이 사용하며 몇 가지 개선점을 발견했습니다.
    1. Actions 실패 시, 처리되지 못한 원본 리포지토리 변경 사항이 모두 유실되어 GitHub Issues로 등록되지 않습니다. 이로 인해 원본 내용 중 일부를 빠트리게 됩니다.
    2. 추적 대상 파일을 필터링하는 방식이 매우 제한적입니다(시작 문자열 비교 방식).
    3. 만들어지는 이슈에 라벨을 설정할 수 없어, 다른 이슈와 섞일 수 있고, 한눈에 보기 어렵습니다.
    4. 원본 문서 변경 사항이 릴리스되었는지 여부를 제공해주지 않습니다. 이는 자칫 릴리스되지 않은 콘텐츠를 너무 이르게 제공할 수 있게 만듭니다.

   이를 개선하는 목적으로 개발했으며, 아래 기능을 제공합니다:
     * 배치 처리를 통한 Action 안정성 향상 (200개 이상 커밋에 대해 정상 동작함을 확인)
     * Action 실패 시, 다음 실행에서 이를 자동으로 복구하도록 구성
     * 릴리스 추적 기능 제공 (예시: Vite 한국어 번역 프로젝트)
     * Glob 패턴 기반 추적 대상 필터링
     * 생성하는 이슈에 대한 커스텀 라벨 설정 가능

   현재 다음 프로젝트에서 사용 중입니다:
     * Vite 공식 한국어 번역 프로젝트 (생성된 이슈)
     * Vue.js 공식 한국어 번역 프로젝트
     * Vite 번역 템플릿

   번역 프로젝트를 진행하실 예정이거나, 마이그레이션 등 구성에 도움이 필요하시거나, 프로젝트에 관심이 있으시다면 GitHub Issues 또는 메일(to@shj.rip)을 통해 언제든지 연락해주세요. 감사합니다.
"
"https://news.hada.io/topic?id=19498","Microsoft, 5월 5일에 Skype 영구 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Microsoft, 5월 5일에 Skype 영구 종료

     * Microsoft는 2025년 5월 5일을 기점으로 Skype 서비스를 완전히 종료할 것이라고 발표
     * Skype 사용자는 기존 계정으로 Teams에 로그인할 수 있으며, 채팅 및 연락처가 그대로 유지됨
     * Teams로의 이전은 즉시 가능하며, 점진적으로 더 많은 사용자에게 지원될 예정
     * 이전을 원하지 않는 사용자는 연락처, 통화 기록, 채팅 내역을 별도로 내보낼 수 있음
     * 서비스 종료 전까지 Skype와 Teams 간의 크로스 플랫폼 메시징 및 통화는 지원될 예정

Skype 유료 서비스 이용자에 대한 조치

     * Skype 프리미엄 서비스 이용자는 종료일까지 계속 서비스를 이용할 수 있음
     * 신규 가입은 더 이상 받지 않으며, 기존 Skype Credit 사용자는 잔액을 소진하는 것이 좋음
     * 종료 후에도 Skype 다이얼 패드는 웹 인터페이스 및 Teams 내에서 계속 제공될 예정

Skype 서비스 종료 배경

     * Skype는 기술 및 통신 역사에서 중요한 위치를 차지했던 서비스였음
     * Skype for Business는 이미 오래전에 종료되었으며, Windows 10에서는 기본 앱으로 제공되었지만 Windows 11부터는 Teams가 기본 제공됨
     * 2000년대 인기 메시징 서비스였던 ICQ도 2024년 6월에 종료되었으며, Skype도 같은 길을 걷게 되었음

   Microsoft, 14년간 방치한 Skype 서비스 종료 글에는 배경에 대한 설명이 조금 더 있습니다

        Hacker News 의견

     * Skype는 기술 부채의 전형적인 예임. 기술적으로 더 이상 제공하기 어려운 서비스가 아님에도 불구하고 수백만 줄의 코드가 있음. Microsoft에 있을 때, Skype에서 일하는 것은 마치 강제 수용소에 보내지는 것만큼 인기가 없다고 들었음
          + 브랜드의 가치는 매우 강력함. 그래서 처음부터 다시 구축하고 모든 불필요한 부분을 제거한 ""2.0"" 버전을 출시하지 않은 것이 놀라움
     * Skype는 부모님과 할머니와 대화하는 주요 수단임
          + 비기술적인 사람들을 위한 대체품으로 무엇을 추천하는지 궁금함
          + 가족 중 나만 iPhone을 가지고 있어 Facetime은 사용할 수 없고, 컴퓨터에서 실행할 수 있는 것이 필요함
          + 부모님에게 Signal desktop 설치를 설득해야 할 것 같지만, Skype처럼 ""사용자가 온라인 상태임""을 보여주는 기능이 있는 것을 원함
     * 초기 Skype 버전부터 사용해왔고, 20년 이상 사용 중임. ICQ, IRC보다 오래 사용했음
          + 대부분의 연락처가 더 이상 Skype를 사용하지 않지만, 가족과 연락하는 주요 수단임
          + 내 사용 사례를 완전히 만족시킬 명확한 대체품을 생각할 수 없음
     * Skype의 피어 투 피어 아키텍처는 흥미로운 아이디어였음. 인터넷이 분산 통신을 촉진하기 위해 존재하는 것임
          + Microsoft가 인수한 후 빠르게 망가졌고, 이름은 오랫동안 조롱의 대상이 되었음
          + RIP Skype, 우리는 당신을 만나지 못했음
     * 고등학교 시절 Skype에서 많은 좋은 시간을 보냈음. 12시간 동안 무료로 통화할 수 있었고, 그것이 가능했던 것에 감사함
          + 우리가 일자리를 얻을 수 있을 만큼 나이가 되었을 때 $10의 Skype 크레딧을 구매하고 장난 전화를 했음. 매우 유치했지만 그게 우리였음
          + 다행히도, P2P 통화와 비디오 통화는 이제 웹 표준으로 해결된 문제임. Skype가 그때 존재해서 기쁨
     * 이제 마이크가 작동하는지 어떻게 확인할 것인가?
     * 안타깝게도, 여전히 국제 전화에 대한 저렴한 옵션으로 사용 중이었음
          + 이와 관련하여 좋은 EU 대안이 있는지 궁금함
     * Yahoo Messenger가 석유 거래의 중요한 부분이었던 것을 상기시킴. 그 종료는 산업을 더 불투명하게 만들었을 수 있음
          + Skype를 기반으로 한 틈새 산업이 적응하기 위해 고군분투하는 이야기를 볼 수 있을 것임
          + 요즘은 다른 방법들이 산업을 방해하는 것에 비해 사소한 문제일 수 있지만, B2C 서비스를 출시할 때 사용자에게 암묵적으로 약속하는 것에 대해 인식해야 함
     * 1-800 번호로 무료 전화를 걸 수 있는 Skype 대안이 있는지 아는 사람 있음?
          + 해외 여행 중에 데이터 전용 eSIM을 사용하면서 은행/항공사에 전화를 걸 수 있도록 Skype를 비상용으로 유지했음
"
"https://news.hada.io/topic?id=19553","게임 "스피드러너"는 취약점 연구자임, 아직 자각하지 못했을 뿐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  게임 ""스피드러너""는 취약점 연구자임, 아직 자각하지 못했을 뿐

     * 수천 명의 비디오 게임 애호가들이 자신도 모르게 사이버 보안 산업에서 경험을 쌓고 있음
     * 그들은 게임의 세부 사항을 분석하는 취미를 가지고 있으며, 이는 취약점 연구자가 되는 것과 유사함.

스피드런이란? :

     * 비디오 게임이 출시되자마자 사람들은 친구보다 더 빠르게 게임을 클리어하려고 노력함
     * 가장 인기 있는 게임이나 문화적으로 중요한 게임은 치열한 경쟁을 유발함.
     * 스피드러너들은 수백 번, 수천 번 게임을 반복 플레이하여 커뮤니티 주도의 리더보드에서 가장 빠른 시간을 기록하려고 함
     * ""Any%"" 스피드런은 모든 규칙이 무시되는 카테고리로, 게임의 버그를 의도적으로 활용하여 빠르게 클리어하는 것이 목표임

글리치 헌팅은 리버스 엔지니어링

     * 게임의 스피드런 커뮤니티 내에는 새로운 글리치를 발견하기 위해 엔지니어링을 적용하는 그룹이 형성됨
     * 이들은 반복적인 시도뿐만 아니라, IDA Pro나 Ghidra와 같은 사이버 보안 업계의 표준 도구를 사용하여 소프트웨어의 내부 작동 방식을 분석함
     * 또한 동적 분석을 위해 Dolphin Emulator의 메모리 뷰어나 Cheat Engine과 같은 도구를 활용하여 프로그램의 내부 데이터 구조와 정보 기록 방식을 파악함
     * 일부 커뮤니티는 게임 파일 형식을 리버스 엔지니어링하고 Ghidra 프로그램 로더를 생성하거나, Ghidra에서 분해한 코드를 C 언어로 다시 구현하여 퍼저에 적용하는 등 새로운 도구를 개발함

취약점 연구

     * 이러한 그룹은 리버스 엔지니어링뿐만 아니라 취약점 연구도 수행함
     * 그들은 게임의 작동 방식을 파악하는 것뿐만 아니라, 게임을 어떻게든 깨뜨리려고 시도함
     * 이러한 글리치는 메모리 손상 익스플로잇과 매우 유사하게 동작하며, 버퍼 오버플로우, use-after-free, 잘못된 상태 머신 전이 등을 발견함
     * 특히 인상적인 점은 그들이 익스플로잇을 제품화한다는 것임
     * 스피드런 커뮤니티는 이러한 글리치를 실제로 활용하기 위해 매우 제한적인 제약 조건을 극복하며, 이는 사이버 보안 업계의 취약점 연구자들이 수행하는 작업과 유사함
     * 일부 게임 커뮤니티는 도구 지원 스피드런(TAS)을 통해 인간이 수행할 수 없는 정밀한 글리치를 수행함. 프레임 단위로 입력을 기록하여 정확한 각도로 조작함.
     * TAS는 메모리 디버거를 사용하여 완벽한 힙 스프레이를 만들거나, 플레이어 인벤토리에 쉘코드 페이로드를 작성함.

산업의 존재

     * 이러한 기술적으로 능숙한 사람들이 사이버 보안 업계와 단절되어 있다는 사실은 놀라움
     * 스피드런 글리치 헌터들은 힙 use-after-free 익스플로잇을 개발하고 기술적인 글을 작성하지만, 이를 ‘아이템 저장’ 글리치라고 부름
     * 그들은 자신들의 취미가 사이버 보안 업계의 취약점 연구와 밀접하게 관련되어 있다는 것을 인식하지 못함
     * 이러한 기술을 가진 사람들이 취약점 연구나 리버스 엔지니어링과 같은 직업에 지원하지 않는 것은 안타까운 일임
     * 취약점 연구는 프로그램의 작동 방식을 깊이 이해하는 것을 요구하며, 이는 게임 글리치 발견과 유사함.
     * 스피드런 커뮤니티의 기술적 글리치 분석은 사이버 보안 업계에서도 인기가 있음. 이들은 프로그램의 내부를 깊이 탐구하고, 창의적으로 취약점을 활용함.

   QA팀을 여럿 보고 나니 느낀게 있는데 결국 내가 사용자라면 어떻게 할 것인가라는 생각을 가지고 있지 않는한 체크리스트에 체크하는 수준으론 본문에서 말하는 취약점같은건 찾을수 없더라고요.

   토끼공듀..?

        Hacker News 의견

     * 비유가 콘텐츠 마케팅을 위해 조금 과장된 느낌임. 취약점 연구자와 스피드러닝 커뮤니티의 주요 차이점은 스피드러닝이 매우 협력적이고 개방적이라는 점임. 각 게임마다 거대한 스피드러닝 Discord 커뮤니티가 있으며, Discord가 존재하기 전에도 많은 사람들이 다른 사람들의 플레이를 보면서 의도치 않게 발견된 트릭과 해킹을 이해하려고 노력했음
          + Nintendo는 사람들이 오래된 게임에서 ACE를 발견하고 GitHub에 게임의 디컴파일된 버전을 게시하는 것에 대해 보통 신경 쓰지 않음. 하지만 취약점 연구자들은 법적 문제를 피하기 위해 그렇게 할 수 없음
          + 스피드러닝 커뮤니티에 활발히 참여하는 사람들은 이미 이러한 점을 잘 알고 있을 것임. 재미있는 추가 예로, TAS'er들이 임의 코드 실행에 대해 이야기하는 것을 자주 볼 수 있음. TASBot의 대체 엔딩을 이용한 전설적인 GDQ의 OoT 실행은 정말 놀라웠음
     * 왜 이 두 가지 관심사가 겹치지 않는지 궁금했음. 일부는 ""암을 치료하고 싶지 않다. 사람들을 공룡으로 만들고 싶다.""라는 효과 때문인 것 같음. 게임을 해킹하는 사람들 중 일부는 자신이 관심 있는 게임에서 할 수 있는 것에만 관심이 있음. 이는 다른 모든 것에 같은 기술을 사용하는 것에 대한 관심으로 일반화되지 않음
          + 20-30년 된 게임을 해킹하는 것이 현대 소프트웨어보다 훨씬 쉬움. 이는 게임에 완화 조치가 전혀 없기 때문임. 인기 있는 게임의 경우 수십 년간의 역공학 작업을 기반으로 하며, (잠재적으로) 처음부터 시작하지 않음. 그리고 더 나은 도구 세트(저장 상태 등)가 있음
          + 이 블로그 글이 다루려는 큰 요인은 대부분의 사람들이 취약점 연구 산업에 대해 전혀 모른다는 것임. 이는 수백만 명의 시청자를 위해 자선 방송을 하는 스피드런과는 다르게 주목을 받지 않음
     * 중요한 차이점은 동기임. 스피드러너는 게임이 재미있기 때문에 즐김. 스피드러너는 이러한 취약점을 자신의 삶에서 의미 있는 방식으로 실제로 사용할 수 있지만, 취약점 연구자는 일반적으로 그렇지 않음
          + 사이버 보안에 대한 일반적인 관찰임. 버그 사냥과 역공학은 소프트웨어 작성 및 IT의 다른 분야보다 많은 끈기가 필요함. 끈기는 급여가 유일한 동기이고, 대상 소프트웨어가 본질적으로 지루하며, 버그를 찾든 못 찾든 보상을 받을 것이라는 것을 알 때 소환하기 어려움
     * 이는 절대적으로 명백한 사실임. 취약점 연구자들은 도구를 사용한 스피드런 비디오를 부러워함. 참고로 Microcorruption을 했을 때, 게임 개발자들이 엘리트 취약점 연구자들을 제외하고는 모두를 능가했음
     * 최근 Subnautica의 세계 기록 스피드런을 보았는데, 누군가가 게임을 28분 만에 클리어하기 위해 사용한 모든 버그 목록을 친절하게 댓글로 남겼음
          + 정말 놀라웠음. 게임을 플레이할 때 거의 버그나 글리치를 만나지 않았고, 꽤 잘 다듬어졌다고 생각했음. 그러나 실제로는 게임 출시 후 수년이 지나고 여러 번 업데이트되었음에도 불구하고 수백 개의 버그가 남아 있었음
     * 흥미로운 기사임
          + 사이버 보안이 많은 스피드러너에게 비디오 게임만큼 본질적으로 재미있고 흥미롭지 않다는 점이 아쉬움. 스피드러너가 이러한 게임에서 글리치와 해킹을 찾기 위해 시간을 보낼 수 있는 큰 이유는 그들이 그것을 하면서 엄청난 재미를 느끼기 때문임. 또한 수십 년 된 게임에서 글리치를 해킹하는 것은 일반적으로 접근성이 좋고 사이버 보안처럼 높은 진입 장벽이 없음
     * 극단적으로는 Super Mario World에서 임의 코드 실행과 같은 것을 얻을 수 있음
          + 편집: 여기에 링크가 있어야 했음. 링크
     * 이 블로그 스팸은 ""Senior Cyber Engineer""로부터 작성된 것임. 그들이 (a) 자신이 쓴 광고가 터무니없다고 부끄러워하는 것인지, 아니면 (b) 실제로 엔지니어가 아니라 ChatGPT 프롬프터인지 궁금함
     * 나는 스피드러너이며, 이것이 잘 알려져 있고 일부 카테고리에서는 표준으로 받아들여진다고 확신함. 제목이 거의 경미한 모욕일 정도로 잘 받아들여진 표준임
          + 게임 세계에서 정의되지 않은 소프트웨어 동작은 이러한 것에 중요함. 특히 Ocarina of Time 스피드런에서 발견된 전설적인 해킹에서 이를 볼 수 있음
          + Super Mario World에서는 SethBling이 코드 주입을 통해 Flappy Bird의 버전을 수동으로 실행했음. 저장 상태 없이. 시간이 오래 걸렸고, 그 과정은 정말로 매혹적이었음. 링크
          + 나는 게임 외의 것들도 스피드런함. 그래서 일반화는 우리가 보안 연구자일 뿐만 아니라, 사물의 ""형태""를 매우 잘 배우고, 이 형태를 사용하여 그 형태의 한 상태에서 다른 상태로 이동하는 방법을 배우는 사람들임
          + 결론적으로, 예, 보안 연구처럼 간단한 것이 될 수 있음. 그러나 스피드러닝의 기쁨과 아름다움은 그것보다 훨씬 크고 아름다움. 물론 그것은 얻을 수 있는 하나의 결과임

   https://reddit.com/r/comicbooks/…

   zzz
"
"https://news.hada.io/topic?id=19559","수리 가능한 플랫팩 토스터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             수리 가능한 플랫팩 토스터

소개

     * 수리 가능한 플랫팩 토스터 프로젝트는 사용자가 직접 조립하고 수리할 수 있는 토스터를 설계하는 것임.
     * 이 프로젝트의 목적은 DIY 조립 및 수리가 가능한 소비자 제품의 가능성을 보여주는 것임.
     * 토스터는 상자에 평평하게 포장되어 모든 부품이 포함되며, 사용자가 처음부터 조립하고 고장 시 수리할 수 있음.
     * 수리와 순환 경제의 개념을 통해 토스터의 수명을 연장하는 것이 목표임.

문제

     * 프로젝트는 전자 폐기물(E-waste) 문제를 조사하는 것에서 시작됨.
     * 2014년 약 4,180만 톤의 전자 폐기물이 발생했으며, 그 중 6분의 1도 재활용되지 않음.
     * 프로젝트의 목표는 전자 폐기물을 줄이기 위한 해결책을 제시하는 것임.

해결책

     * 감성 디자인을 통해 제품에 대한 애착을 높이려 했으나, 전자 제품에서는 기능적 가치가 더 중요함.
     * 따라서 수리를 위한 디자인을 통해 제품의 수명을 연장하고 기능적 가치를 유지하는 접근 방식을 선택함.
     * 사용자가 처음부터 조립할 수 있는 플랫팩 디자인을 통해 수리 경험을 향상시키고자 함.

과정

     * 초기 아이디어는 수리 가능한 토스터를 만드는 것이었으며, 토스터의 구조를 이해하기 위해 두 개의 토스터를 분해함.
     * 기존 토스터는 분해 및 수리가 어렵게 설계되어 있었음.
     * 사용자가 처음부터 조립할 수 있다면 수리도 가능할 것이라는 생각에서 플랫팩 토스터를 설계하기로 결정함.

프로토타입

     * 개발 과정은 프로토타입 제작과 3D CAD 모델링에 크게 의존함.
     * 초기에는 스케치로 구조를 표현하기 어려워 물리적 프로토타입을 제작함.
     * 종이, MDF, 금속 등 다양한 재료로 프로토타입을 제작했으며, 두 번째 금속 프로토타입은 성공적이었음.
     * 3D CAD 모델을 통해 디자인을 검증하고 수정한 후 금속 프로토타입을 제작함.

최종 프로토타입

     * 두 번째 금속 프로토타입 이후, 더 정교한 프로토타입을 위해 공장에 외주를 맡김.
     * 최종 프로토타입은 이전 프로토타입과 거의 동일하며, 열 차단을 위한 금속 조각을 추가함.
     * 토스터는 PAT 테스트를 통과했고, 실제로 토스트를 구울 수 있음.

사용자 테스트

     * 4명의 참가자가 조립 설명서를 통해 프로토타입을 조립함.
     * 조립 과정의 효과성을 평가하고 관찰하기 위해 테스트를 진행함.
     * 참가자들은 조립 과정을 재미있고 쉽다고 평가했으며, 개선할 점을 제안함.
     * 두 명의 참가자는 조립 후 수리에 자신감을 느꼈고, 두 명은 토스터를 커스터마이징하고 싶어 했음.

반성

     * 이 프로젝트를 통해 CAD 모델링, 설명서 제작, 금속 가공 등 다양한 기술을 배움.
     * 디자인 과정에서 넓은 시각으로 연구하고 단일 아이디어로 좁히는 방법을 배움.
     * 프로토타입을 반복적으로 개선하며 문제를 발견하고 해결하는 능력을 키움.
     * 디자인 과정 자체가 가장 보람 있었으며, 앞으로의 프로젝트에 적용할 자신감을 얻음.

        Hacker News 의견

     * 이 프로젝트의 핵심은 토스터의 실용성이나 경제성에 대한 논쟁이 아니라, 역설계, 설계, 제조, 초보자용 문서 개발, 실제 사용자 연구를 포함한 과정임
     * 많은 댓글 작성자들이 저자에게 남성 대명사를 사용하고 있음. Dezeen 기사에서는 Kasey에게 여성 대명사를 사용함
     * 오래된 Toastmaster나 Sunbeam 토스터를 구입해 청소하면 오래 사용할 수 있음. 나사로 고정되어 있어 수리가 쉬움
          + 단점은 베이글을 넣기에는 슬롯이 좁음
          + 오래된 토스터는 무한정 있지는 않지만, 원하는 사람에게는 충분함
     * 저렴한 토스터는 분해와 수리가 어려움. 이 프로젝트의 토스터는 훌륭해 보임
          + 저렴한 토스터는 몇 년 후 고장남. 비싼 Dualit 토스터를 구입했는데 25년째 사용 중임
          + Dualit는 저렴한 토스터보다 10배 비쌌지만, 장기적으로 돈을 절약하고 쓰레기를 줄임
          + 이 기사에 나온 토스터는 Dualit와 비슷해 보임
     * 이 기사를 보고 Thomas Thwaites의 The Toaster Project가 떠올랐음. 글로벌리즘과 자급자족에 대한 성찰임
     * 이 프로젝트는 실용적이고 일상적인 물건을 더 접근 가능하게 만듦
          + 오픈 소스가 아니지만, 일상에서 필요한 물건에 더 많은 오픈 소스가 필요하다고 생각함
     * 전원 연결 토스터를 조립 설명서와 함께 제공하는 것은 어떻게 가능한지 궁금함
          + DIY 전자 제품의 경우, 전원 관련 지침 제공에 대해 매우 신중함
     * 전자 폐기물에 가장 큰 기여를 하는 제품에 대한 데이터가 있는지 궁금함
          + 토스터는 수리 가능한 디자인을 배우기에 좋은 사례임
          + Framework는 노트북 문제를 해결하고 있음
     * 어릴 때 휴가 중에 사용했던 전기 ""사이드 도어 토스터""가 기억남
          + 양쪽에 스프링이 달린 접이식 문이 있어 토스트를 넣고, 반쯤 구워지면 문을 내려서 뒤집어 구웠음
     * 2010년에 결혼 후 구입한 $30짜리 무명 토스터를 사용 중임. 몇 년마다 청소하고 코드도 두 번 교체했음
          + 오래가는 제품에 돈을 기꺼이 지불하지만, 이 토스터는 기대와 다르게 매우 튼튼함
"
"https://news.hada.io/topic?id=19538","React 기술 스택eact 기술 스택 2025

     * 2025년을 위한 Full-Stack React Tech Stack
          + SaaS 제품 또는 최소 기능 제품(MVP)을 개발하는 데 유용한 기술들을 소개
     * Next.js: 리액트 기반의 프레임워크로, 라우팅, 캐싱 등 다양한 기능을 기본 제공하며, 서버 컴포넌트 및 서버 함수와 같은 최신 리액트 기능을 통해 백엔드와의 연결을 지원함
     * Astro: 제품의 랜딩 페이지를 생성하기 위한 선택적 도구로, 빠른 랜딩 페이지 제작과 개발자 경험 향상을 위해 사용됨
     * Server Components: 서버에서 실행되어 데이터베이스 접근 등을 가능하게 하는 컴포넌트로, 풀스택 리액트 애플리케이션 개발 방식을 혁신함
     * Server Functions: 리액트 컴포넌트에서 서버 측 코드를 함수 호출만으로 실행할 수 있게 해주는 기능으로, API 엔드포인트를 자동 생성함
     * Server Actions: 서버 함수의 하위 집합으로, 사용성을 높이기 위한 라이브러리가 존재하지만, 직접 구현도 가능함
     * Tailwind CSS: 빠른 제품 개발과 장기적인 CSS 유지보수를 위해 추천되는 도구로, 익숙해지면 전통적인 CSS 방식으로 돌아가기 어려움
     * Shadcn UI: Tailwind CSS와 원활하게 통합되는 UI 라이브러리로, 버전이 없는 시스템을 제공하여 UI 관리에 신선한 접근 방식을 제시함
     * Lucide React: Shadcn UI와 함께 제공되는 아이콘 라이브러리로, 다른 대안이 나타나기 전까지는 교체 필요성이 낮음
     * TypeScript: 자바스크립트 프로젝트의 산업 표준으로, 개발자 경험 향상, 버그 감소, 코드 유지보수성 향상에 기여함
     * Zod: TypeScript와 잘 맞는 검증 라이브러리로, 주로 서버 측 검증에 사용되며, 클라이언트 측 폼은 네이티브 HTML 검증을 활용하여 복잡성을 줄임
     * nuqs: Next.js에서 URL 상태(예: 검색, 정렬, 페이지네이션)를 타입 안전하게 관리하기 위한 도구로, 다른 프레임워크에서는 내장 기능이나 다른 라이브러리를 사용할 수 있음
     * Zustand: 클라이언트 측 상태 관리를 위한 선택적 도구로, URL 상태, 클라이언트 측 데이터 캐싱, 서버 주도 리액트 애플리케이션의 발전으로 사용 빈도가 줄어듦
     * React Query: 무한 스크롤 등 복잡한 클라이언트 측 데이터 페칭에 사용되는 선택적 도구로, 프로젝트 복잡도가 낮을 경우 서버 컴포넌트만으로도 충분함
     * Prisma (ORM): 안정적인 ORM 선택으로, 최신 트렌드에 따라 Drizzle로 대체할 수 있으나, 현재는 Prisma를 선호함
     * Supabase (데이터베이스): Postgres 데이터베이스를 제공하는 서비스로, 유연성을 위해 데이터베이스만 사용하고 Prisma로 연결하여 다른 데이터베이스로의 교체를 용이하게 함
     * Lucia (인증): 더 이상 유지보수되지 않지만, Oslo, Argon2, Arctic 등을 활용한 인증 시스템 구축 학습 자료로 사용되어, 서드파티 솔루션에 의존하지 않는 맞춤형 인증 시스템을 구현할 수 있음
     * S3 (파일 업로드): AWS S3, 프리사인드 URL, AWS IAM을 활용하여 유연하고 저렴한 파일 저장 솔루션을 구축할 수 있으며, 대부분의 서드파티 서비스도 동일한 API를 사용하므로 필요 시 제공자를 변경하기 용이함
     * Inngest (큐): 백엔드에서 복잡한 작업 조율을 위해 사용되는 도구로, 시간에 민감하지 않은 백그라운드 작업에 적합하며, 설정과 유지보수가 용이한 큐 시스템을 제공함
     * React Email + Resend: 전자는 리액트 컴포넌트로 이메일 템플릿을 생성하게 해주며, 후자는 이메일 전송을 위한 훌륭한 솔루션으로, 이전에 사용하던 Postmark에서 Resend로 전환하여 만족스러운 결과를 얻음
     * Vercel (호스팅): 수년간 사용해 온 풀스택 애플리케이션 호스팅 솔루션으로, 자체 호스팅을 원할 경우 Hetzner/DigitalOcean과 Coolify를 추천함
     * CloudFlare (도메인): 다양한 도메인 관리 경험 후, 현재는 CloudFlare의 우수한 UI와 DNS 레코드에 추가 정보를 첨부할 수 있는 기능으로 인해 만족스럽게 사용 중임
     * Stripe (결제 게이트웨이): 수년간 사용해 온 결제 게이트웨이로, 훌륭한 문서와 API를 제공하지만, 기능과 API 범위가 확대되어 복잡해질 수 있음
     * 테스팅 및 도구: React Testing Library와 Cypress/Playwright의 조합이 좋은 선택이며, ESLint(미래에는 Biome), Prettier를 추천함. UI 문서를 위해 여전히 Storybook을 사용하며, 터미널에서 TypeScript를 실행하기 위해 tsx를 사용함

   nuqs알아가네요 감사합니다.
"
"https://news.hada.io/topic?id=19527","리눅스 초기 시대리눅스 초기 시대 (2023)

     * 초기 리눅스의 시작
          + Lars Wirzenius는 리눅스의 초기 개발에 참여한 경험을 공유함.
          + 1988년 헬싱키 대학교에서 Linus Torvalds를 만나게 됨.
          + Unix 서버와 Usenet을 접하게 되면서 운영체제에 대한 관심이 커짐.
     * 리눅스 커널의 탄생
          + 1991년 Linus는 첫 PC를 구입하고 Intel 어셈블리 언어를 배우기 시작함.
          + 'A'와 'B'를 화면에 출력하는 멀티태스킹 프로그램을 개발하며 리눅스 커널의 기초를 다짐.
          + Lars는 sprintf() 함수를 구현하여 Linus를 도와줌.
     * 리눅스의 발전과 공개
          + Linus는 커널에 파일 권한과 모뎀을 통한 네트워크 기능을 추가함.
          + 1991년 8월, comp.os.minix 뉴스그룹에서 처음으로 리눅스를 공개함.
          + 초기 이름은 Freax였으나, Ari Lemmke가 Linux로 이름을 변경함.
     * 리눅스의 성장
          + 리눅스는 GNU GPL 라이선스를 채택하며 자유 소프트웨어로 발전함.
          + X11 시스템이 포팅되면서 1992년 리눅스 데스크탑의 해로 불리게 됨.
          + Lars는 커뮤니티 활동에 집중하며 문서 작성과 질문 답변을 도왔음.
     * 리눅스 배포판의 시작
          + 1992년 Softlanding Linux System(SLS)이 첫 리눅스 배포판으로 시작됨.
          + 1993년에는 Slackware와 Debian이 등장하며 커뮤니티 기반 개발 구조를 탐구함.
     * 리눅스의 성숙
          + 1994년 리눅스 1.0 버전이 출시되며 공식적인 릴리스 이벤트가 열림.
          + Linus는 DEC Alpha 머신을 통해 리눅스를 새로운 아키텍처로 포팅함.
          + 리눅스는 이더넷과 TCP/IP 지원을 추가하며 네트워크 기능을 강화함.
     * 리눅스의 세계적 성공
          + 1997년 Linus는 미국으로 이주하여 Transmeta에서 일하게 됨.
          + 오픈 소스가 세계적으로 확산되며 IBM과 같은 대기업이 리눅스 개발에 투자함.
          + 2023년 현재 리눅스는 전 세계 수십억 대의 기기에서 사용되고 있음.

        Hacker News 의견

     * 재미있음. 나는 1992년에 Linux 0.98을 사용하기 시작했음. 패치 레벨은 기억나지 않음
          + 모뎀을 사용하여 많은 게시판에 연결했음. ""WarGames""의 주인공처럼 전화번호를 걸며 즐거움을 느꼈음
          + 처음으로 ppp를 사용하여 실제 인터넷에 연결했던 날이 아직도 기억남. 여러 번의 시행착오 끝에 www.linux.org에 핑을 보냈고, 호스트 이름이 해결되고 핑이 돌아왔음. 그 순간 ""와""라는 말밖에 나오지 않았음
          + 정말 즐거운 시절이었음
     * Linux가 이 세상에서 유일하게 안정적인 것이 된 것이 이상함. 켜기만 하면 시간이 지남에 따라 나쁜 의도 없이 더 나아질 것임을 알게 됨
     * Linux 초기 시절을 잘 기억함. 90년대 중반 워털루 대학에서 꽤 많은 관심을 받았지만, 설치나 특정 시스템에서 안정적으로 실행하는 데 문제가 많았음. 당시 모든 OS에 흔한 일이었음
          + Red Hat 같은 Linux 배포판이 이러한 문제를 짧은 시간 안에 해결하고 모든 면에서 더 쉽게 만들어 주었음. 그들의 문서도 훌륭했음
          + 1990년대 후반에는 Red Hat이 Solaris, AIX, IRIX만큼 대학에서 흔했지만 대부분은 여전히 Solaris보다 열등하다고 여겼음. 지금은 RHEL이 주요 *nix 시스템으로 사용되고 있음 (몇몇은 Debian을 사용함)
     * Linux가 없는 세상을 경험한 적이 없을 만큼 젊지만, 그 창조 시점에 가까워 관련된 많은 사람들이 여전히 주변에 있는 것이 이상한 느낌임. 내 전문 경력 전체가 어느 정도 Linux와 관련되어 있었음. 12살 때부터 내 인생 전체가 그 영향을 받았다고 생각하면 정말 놀라움
     * X11 시스템이 Linux로 포팅된 것이 Linux의 미래 성공에 더 중요했음. 1992년이 Linux 데스크탑의 해가 되었음
          + 그게 드디어 해결되어 기쁨
          + 훌륭한 읽을거리였음
     * 내 인생 대부분 동안 이러한 기술적 성과들이 손대기 어려운 천재들의 작품이라고 생각했지만, 이 이야기를 읽으면서 서로의 탐구를 지원하기 위한 장기적인 우정과 재정적/사회적 안정의 가치를 잘 보여줌
     * 오늘 배운 것: Linus는 스웨덴어를 사용하는 핀란드인임. 1994년부터 이 소리가 내 머릿속에 남아있음
          + [링크](https://en.wikipedia.org/wiki/File:Linus-linux.ogg)
     * 읽을 가치가 있는 책: Just for Fun
          + 링크
     * 첫 번째 Linux 배포판은 1992년에 시작된 Softlanding Linux System 또는 SLS였음. 다음 해에 SLS는 Slackware로 변모했고, 이는 Ian Murdock가 1993년에 Debian을 시작하도록 영감을 주었음. 이는 더 많은 커뮤니티 기반 개발 구조를 탐구하기 위함이었음. 이후 몇몇 다른 배포판들이 뒤따랐음
          + 그리고 그들은 따라갔음! Slackware, Debian 등에서 파생된 수많은 배포판의 인상적인 그래프가 여기에 있음. 이 그래프는 여전히 커뮤니티에 의해 적극적으로 유지되고 있음: 여기
     * 2003년의 Linux에 관한 놀라운 다큐멘터리가 있음. 제목은 Revolution OS임. 강력히 추천함
          + 링크
"
"https://news.hada.io/topic?id=19501","Yaak - Git 친화적인 데스크탑 API 클라이언트 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Yaak - Git 친화적인 데스크탑 API 클라이언트 오픈소스

     * REST, GraphQL, Server Sent Events (SSE), WebSocket, gRPC API와 상호작용할 수 있는 데스크톱 API 클라이언트
     * Tauri + Rust + ReactJS 오픈소스
     * Postman, Insomnia, OpenAPI, Swagger, Curl에서 데이터 가져오기 지원
     * 다양한 Request 전송 가능: REST, GraphQL, SSE, WebSockets, gRPC
     * 자동 인증: OAuth 2.0, JWT 토큰, Basic Auth 등
     * JSONPath 또는 XPath를 사용하여 Response 본문 필터링
     * 여러 Request를 체인으로 묶어 동적 값 참조 가능
     * Request를 워크스페이스 및 중첩된 폴더로 정리할 수 있음
     * 환경 변수를 이용하여 개발(Dev) 및 운영(Prod) 환경을 쉽게 전환
     * UUID, 타임스탬프 등을 템플릿 태그를 이용하여 동적인 값 보내기 가능
     * 기본 제공 테마 사용 또는 사용자 정의 테마 제작
     * 워크스페이스 데이터를 폴더로 미러링하여 Git, Dropbox와 동기화 가능
     * 각 Request의 Response 기록 보기
     * 인증, 템플릿 태그 등의 다양한 플러그인 개발 지원
     * 프록시 설정 지원하여 방화벽으로 차단된 API 접근

   유료 구독상품이 있네요!

   $6/월. 1년 구독하면 평생 현재버전 무료. 로드맵 투표권. 이메일 지원.

   개발자의 고뇌가 느껴집니다. 기능을 차별화하는 건 껄끄럽고, 뭐로 차별화하지… 라는 고뇌가…
"
"https://news.hada.io/topic?id=19456","Microsoft Copilot, 무료 무제한 Voice 및 Think Deeper 기능 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Microsoft Copilot, 무료 무제한 Voice 및 Think Deeper 기능 출시

     * 모든 Copilot 사용자에게 Voice 및 Think Deeper 기능을 무료로 무제한 제공
     * Voice 기능을 활용하면 Copilot과 음성으로 대화할 수 있으며,
       Think Deeper는 OpenAI의 o1 모델을 기반으로 복잡한 질문이나 작업을 수행
     * Voice 기능 활용 사례
          + 새로운 언어의 간단한 문장을 연습하여 여행이나 새로운 사람을 만날 때 유용하게 활용 가능
          + 지원하고 싶은 직무 및 경력을 설명하면 Copilot이 면접 연습을 도와줄 수 있음
          + 요리를 할 때 레시피를 단계별로 따라가며 음성으로 도움을 받을 수 있음
     * Think Deeper 기능 활용 사례
          + 보다 복잡한 주제를 다룰 수 있으며, 예를 들어 다음과 같은 질문을 처리 가능함:
               o ""최고의 전기차를 비교해줘. 나는 디자인과 편안함을 우선시하며, 'future-proof'한 구매를 하고 싶어.""
               o ""홈 리노베이션에 $15K를 사용할 수 있어. 주방 아일랜드, 욕실 리모델링, 지붕 교체 중에서 향후 3년간 집 가치 상승에 가장 좋은 선택은?""
               o ""강풍이 불 때마다 정전이 발생하는 지역에 거주 중이야. 발전기를 구매해야 할까? 장단점과 예산 및 편의성을 고려한 분석을 해줘.""
     * Microsoft는 더 많은 사용자에게 빠르게 무제한 고급 기능을 제공하기 위해 노력 중
          + 다만, 사용량이 많거나 보안 문제, 남용 등이 감지될 경우 일시적인 지연 또는 제한이 발생할 수 있음
     * Copilot Pro 사용자는:
          + 최신 모델을 우선적으로 사용 가능
          + 실험적 AI 기능 조기 접근 가능
          + Microsoft 365 앱(Word, Excel, PowerPoint 등)에서 추가적으로 Copilot 활용 가능

   Gemini Code Assist로 코딩 지원 받기 - 이제 무료로 사용 가능
   훌륭한(?) 경쟁이네요.

   Microsoft Copilot은 그 Copilot이 아닙니다.
   그건 (Microsoft) GitHub Copilot…

   아앗 착각을 ㅠ
"
"https://news.hada.io/topic?id=19522","크롬북으로 제작된 가장 기발한 비디오 월","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         크롬북으로 제작된 가장 기발한 비디오 월

     * 세상의 가장 독특한 비디오 월 만들기
          + 이 프로젝트는 오래된 Chromebook을 활용하여 비디오 월을 만드는 과정에 대한 이야기임.
          + 프로젝트는 소프트웨어 담당자인 필자와 하드웨어를 설계한 친구 Aksel Salmi와의 협업으로 진행됨.
          + 학교에서 폐기 예정인 Chromebook을 활용하여 비디오 월을 만들자는 아이디어에서 시작됨.
     * Lenovo ThinkPad 11e 소개
          + Lenovo ThinkPad 11e는 성능이 낮은 학교용 노트북으로, 필자의 어린 시절 컴퓨터에 대한 관심을 키워준 기기임.
          + 현재는 소프트웨어 업데이트가 중단되고, 웹페이지 로딩에 어려움을 겪는 등 성능이 떨어져 폐기 대상이 됨.
     * 비디오 월이란?
          + 비디오 월은 여러 화면을 조합하여 하나의 큰 디스플레이를 만드는 것임.
          + 이 프로젝트에서는 노트북 화면을 재사용하여 비디오 월을 만들기로 결정함.
     * 화면을 별도의 하드웨어로 구동할 수 있을까?
          + 처음에는 노트북 디스플레이 패널만 활용하여 강력한 컴퓨터로 구동하려 했으나, 시간과 비용 문제로 포기함.
     * 두 장치 간의 비디오 동기화 시도
          + 각 화면을 독립적으로 구동하는 것이 더 나을 것이라 판단하고, 여러 컴퓨터 간의 비디오 동기화 문제에 집중함.
          + VLC의 스트리밍 기능을 사용해 보았으나, 완벽한 동기화에는 적합하지 않음.
     * Socket.io를 활용한 동기화
          + Socket.io를 사용하여 웹 페이지에서 비디오 재생을 동기화하는 방법을 발견함.
          + 비디오 재생이 끝나면 각 클라이언트가 시작 이벤트를 전송하여 동기화를 유지함.
     * ChromeOS 대체
          + Chromebook의 소프트웨어 문제로 ChromeOS를 Linux로 대체하기로 결정함.
          + coreboot를 사용하여 기본 펌웨어를 덮어쓰고, 자동으로 비디오를 재생하는 스크립트를 작성함.
     * 최종 단계
          + Aksel이 하드웨어 장착을 담당하고, 필자는 웹 페이지로 부팅하는 방법을 개선함.
          + Porteus Kiosk를 사용하여 자동으로 Chromium 브라우저를 실행하도록 설정함.
     * 자체 배포판 제작
          + Debian을 기반으로 한 최소 설치를 통해 자동 설치 USB를 제작함.
          + c-sync 클라이언트를 관리하고 비디오를 할당할 수 있는 컨트롤러를 구축함.
     * 장착 및 최종 조정
          + Aksel이 설계한 장착 하드웨어를 사용하여 노트북을 벽에 장착함.
          + 팬 속도를 수동으로 설정하여 발열 문제를 해결함.
     * 프로젝트의 의미
          + 이 프로젝트는 팀워크와 협업의 중요성을 보여주는 사례로, E-Waste를 유용하게 활용한 예임.
          + 프로젝트는 필자의 고등학교 경험에 큰 영향을 미쳤으며, 다양한 사람들의 도움으로 가능했음.

        Hacker News 의견

     * 이 재미있는 프로젝트를 완성한 것을 축하함. 나는 여러 기기에서 미디어 콘텐츠를 동기화하는 작업을 많이 해서 사람들이 어떤 해결책을 내놓는지 보는 것이 항상 재미있음. 아마도 연구 중에 BrightSign 미디어 플레이어를 접했을 것임. 20개의 디스플레이를 구매하는 총 비용은 수만 달러에 이를 수 있음. 재활용 기기로 이 작업을 수행한 것에 큰 찬사를 보냄
          + 미디어 동기화 관련 코드베이스 작업에 관심이 있다면 연락하길 바람. 우리는 프리랜서 계약을 위해 개발자를 자주 고용함
     * Chromebook이 출시될 때 Google에서 일했음. 로비 장식을 위한 제안을 했지만 거절당했음. 아마도 40-64대의 기기를 요청했기 때문일 것임
          + 비디오 동기화를 시도하지 않았을 것임. 대신 시간 기반 애니메이션을 만들고 네트워크를 사용하여 시계를 동기화했을 것임
          + 예시를 여기서 볼 수 있음: [YouTube 링크]
          + 8대의 기기가 Chrome을 실행 중임. 동기화된 것은 설정과 시간뿐임
          + 기기들이 반드시 격자 형태일 필요는 없음. Boston Science Museum의 가상 수족관에서 영감을 받았음
     * 멋짐! 4x4 태블릿으로 비슷한 작업을 했음. 16대를 ADB와 단일 호스트에 연결한 후 대부분의 작업을 자동화할 수 있었음
          + 16개의 VNC 클라이언트와 함께 sway에서 16개의 가상 화면을 만들고 Wi-Fi를 통해 모두 스트리밍함. Wi-Fi가 너무 잘 작동해서 더 효율적인 솔루션을 찾지 않았음
          + 그 기간 동안 내 PC에는 19개의 디스플레이가 있었음. 그 중 17개는 VNC를 통해 연결됨. 모든 디스플레이에서 작업을 하거나 각각을 다른 목적/프로그램(음악, htop, 캘린더, 시계, ssh 세션)에 할당할 수 있었음
          + 하드웨어를 다루는 것이 꽤 귀찮았음. 일부는 속도가 느려지고, 일부는 연결 문제가 있었으며, 다른 것들은 배터리가 충전되지 않았음
     * 이 솔루션이 왜 이렇게 잘 작동하는지 완전히 확신할 수는 없지만 우연히 터무니없는 해결책을 생각해냈음
          + 가장 느린 컴퓨터가 가장 빠른 컴퓨터를 지연시킴
          + 시스템의 병목 현상을 고려하여 설계를 최적화했기 때문에 잘 작동함. 제약 이론을 확인해보길 바람
     * 몇 년 전의 비슷한 사례: junkyard jumbotron은 무작위로 모은 디스플레이를 사용하여 더 큰 이미지의 일부를 표시할 수 있게 함
          + [GitHub 링크]
          + 비디오 [YouTube 링크]
     * Chromebook이 말 그대로 경첩이 없음
     * 가장 흥미로운 점은 coreboot로 전환하여 동결 현상이 해결된 것임. 왜 그런 일이 발생했는지에 대한 이론이 있는지 궁금함. ACPI/DSDT 관련 문제인지, 아니면 원래 BIOS를 사용하여 하드웨어 컨트롤러가 잘못 초기화되었는지 궁금함
     * 하나의 비디오를 만들고 컴퓨터가 비디오의 다른 부분을 확대하도록 하는 것이 더 쉬웠을지 궁금함. 그런 다음 웹 브라우저를 통해 비디오를 동시에 실행함
     * 역설계된 iPod Nano 6 디스플레이로 만든 멋진 비디오 월을 보고 역설계에 대해 배우고 싶다면?
          + 11년 전 Mikes Electric Stuff의 비디오 시리즈가 있음. 훌륭함
          + [YouTube 링크]
     * 나와 다른 개발자가 아마도 8년 전 Windows Embedded thin clients로 300석의 콜센터에서 이 작업을 수행했음. 동기화를 위해 타임스탬프와 고정밀 자바스크립트 라이브러리를 사용했음
          + 모든 사람이 퇴근한 후, 모든 화면에 비즈니스 이름과 하루의 통계를 스크롤함. 첫 번째 통화 몇 시간 전까지 대기 중인 비디오나 텍스트, 또는 그날에 따라 단순한 색상 줄을 로드함.
"
"https://news.hada.io/topic?id=19499","Firefox 이용 약관 및 개인정보 보호 공지 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Firefox 이용 약관 및 개인정보 보호 공지 업데이트

     * Mozilla는 처음으로 Firefox에 대한 이용 약관을 도입하고, 기존 개인정보 보호 공지를 업데이트함
     * 기존에는 오픈 소스 라이선스와 공개적인 약속을 기반으로 운영해 왔으나, 기술 환경이 변화하면서 보다 명확한 법적 문서를 제공할 필요성이 생김
     * Mozilla의 원칙:
          + 인터넷에서의 보안과 개인정보 보호는 필수이며 선택사항이 아님
          + 사용자는 자신의 데이터를 포함해 인터넷 경험을 직접 관리할 권리를 가짐
          + 투명성을 유지하는 것이 신뢰를 형성하는 데 중요함

이용 약관 및 개인정보 보호 공지의 주요 내용

     * Firefox는 계속해서 새로운 기능을 추가하고 개선할 예정이며, 이를 투명하게 관리하기 위해 공식적인 이용 약관을 제공
     * 새로운 이용 약관은 사용자가 자신의 권리와 권한을 명확하게 이해하도록 돕는 것이 목적
     * 3월부터 신규 사용자에게 적용되며, 기존 사용자에게도 올해 중순부터 적용될 예정
     * 개인정보 보호 공지를 업데이트하여 데이터 수집 및 활용 방식을 보다 명확하게 설명함

개인정보 보호 원칙 및 사용자 제어 권한

     * Mozilla는 항상 사용자 개인정보 보호를 최우선으로 고려하며, Firefox 기능을 유지하고 개선하기 위해 데이터를 활용
     * 일부 선택적 기능은 추가적인 데이터 수집이 필요할 수 있으나, 항상 투명성을 유지할 것
     * 사용자는 브라우저 설정을 통해 데이터 수집 옵션을 직접 관리할 수 있으며, 설치 및 초기 설정 과정에서도 이를 검토 가능
     * Mozilla는 사용자가 자신의 데이터에 대한 통제권을 가질 수 있도록 하는 것이 기본 원칙이며, 다른 기술 기업들도 이러한 접근 방식을 채택하기를 희망함

Update

     * 사람들이 이용 약관에서 라이선스 관련 문구를 오해하는 경우가 있어서 Mozilla가 추가로 설명
     * Firefox의 기본 기능을 구현하려면 일부 사용자 입력 데이터를 처리할 수 있는 라이선스가 필요함
     * 하지만, Mozilla가 사용자의 데이터를 소유하거나, 약관을 통해 임의로 사용할 권리를 가지는 것은 아님
     * 데이터 활용은 개인정보 보호 공지에서 설명된 목적에 한정됨
     * 즉, 이용 약관에 포함된 라이선스 관련 내용이 사용자 데이터 소유권을 의미하는 것이 아님을 강조

     * 이용 약관
     * 개인정보 보호 공지

        Hacker News 의견

     * Firefox 사용 시 Mozilla의 허용 사용 정책을 따라야 하며, 성적이거나 폭력적인 콘텐츠를 업로드, 다운로드, 전송, 표시, 접근할 수 없다는 규정이 있음
          + 이는 Firefox를 사용해 포르노를 보는 것이 이용 약관 위반이라는 의미로 해석될 수 있음
          + 법률팀의 실수일 수도 있으며, 그렇다면 빠르게 수정하고 사과해야 함
          + 그렇지 않다면 다른 브라우저로 전환을 추천함
     * Brendan Eich와는 몇 가지 의견 차이가 있었지만, 그는 Firefox의 좋은 관리자였음
          + Mitchell Baker가 Mozilla를 이끌면서 더 강압적이 되었음
          + Waterfox가 한때 Mozilla 웹사이트에 자랑스럽게 표시되었음
     * Firefox는 사용자들이 오랫동안 요구해온 기능을 구현하고 있지만, 이상한 정책 선택도 하고 있음
          + 잘 확립된 관리 체계가 없는 포크를 사용하는 것은 신뢰를 이동시키는 것임
          + Waterfox는 적절한 법적 실체로 대표되도록 노력했음
     * Chrome이 µBlock origin을 제거하면서 Firefox를 홍보할 기회가 있었지만, 사용자 기반을 소외시키고 있음
     * Firefox는 대안 브라우저로 고려되었지만, 이제는 신뢰할 수 없는 기업 브라우저와 다를 바가 없음
          + 브라우저는 이제 자동차와 같아졌으며, 프라이버시를 존중받기 어려움
          + 적대적인 이용 약관에 서명하지 않고는 정상적인 생활을 할 수 없는 상황임
     * Mozilla의 서비스로 Firefox를 간주할 수 있으며, 허용 사용 정책에 따라야 함
          + 이는 Firefox를 통해 포르노를 보거나 다운로드할 수 없다는 의미로 해석될 수 있음
          + 폭력적인 그래픽 묘사는 뉴스 보도에서 자주 볼 수 있는 전쟁 지역의 바디캠 영상 등을 포함할 수 있음
     * 일부 의견은 전체 이야기를 전달하지 않으며, 분노를 유발하기 위한 것처럼 보임
          + 이용 약관의 문장을 잘라내어 정보의 일부를 재포장하고 있음
          + 문장의 마지막 부분이 전체 이야기를 바꿀 수 있음
     * Mozilla는 Firefox의 기본 기능을 가능하게 하기 위해 라이선스가 필요하다고 설명함
          + 이는 사용자 데이터의 소유권을 부여하지 않으며, 개인정보 보호 고지에 설명된 것 외에는 사용하지 않음
     * Mozilla는 언제든지 Firefox에 대한 접근을 중단할 수 있으며, 이는 자유 소프트웨어와는 거리가 멀음
     * Firefox를 통해 정보를 업로드하거나 입력할 때 비독점적이고 로열티 없는 전 세계적 라이선스를 부여하게 됨
          + 이는 Mozilla가 사용자가 입력하는 정보를 수집할 수 있다는 의미로 해석될 수 있음
          + Firefox의 모든 호출을 차단하는 방법을 고려해야 함
"
"https://news.hada.io/topic?id=19496","Airdrop의 오픈소스 대안"이였던" Snapdrop의 몰락","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Airdrop의 오픈소스 대안""이였던"" Snapdrop의 몰락

     * Snapdrop은 본래 로컬 네트워크 내에서, 기기끼리 내부망에서 파일을 전송하기 위한 프로젝트였음.
     * Airdrop과 비슷한 기능을 가지고 있었음.
     * 2025년 2월 10일, Snapdrop의 소유권이 Limewire에게 이전됨.
     * 로컬 네트워크 내 공유 기능은 사라졌으며, 클라우드 스토리지에 업로드하는 방식으로 사이트가 수정됨.
     * 사이트 내에는 어떠한 ToS와 개인정보 처리방침이 없으며, 사용자에게 혼란을 줌.
     * sharedrop.io, file.io 등의 사이트 역시, Limewire에게 잠식당함.
     * Snapdrop의 오픈소스 대안으로는, pairdrop.net 이 있음(오픈소스)

   블루투스로 공유하는 앱이 필요히다면 rquickshare도 나쁘지 않은 것 같습니다

   https://news.hada.io/topic?id=1480

   저는 안드로이드 사용자나 PC로 파일 보낼때 주로 LocalSend를 사용합니다.
"
"https://news.hada.io/topic?id=19536","GPT-4.5: "프론티어 모델이 아니다프론티어 모델이 아니다""?

     * GPT-4.5의 공개와 함께 OpenAI는 모델의 시스템 카드를 먼저 공개함
     * 초기 시스템 카드에는 ""GPT-4.5 is not a frontier model""(GPT-4.5는 최첨단 모델이 아님)라는 문구가 포함됨
          + 이후 공식 블로그 게시물과 업데이트된 시스템 카드에서는 이 문구가 삭제
     * OpenAI의 누군가는 그 문구를 넣어야 할 필요성을 느낀듯. 근데 ""왜 OpenAI는 이걸 릴리즈 했을까?""
     * 프론티어 모델이 아니라는 주장에 대한 주요 모순은 GPT-4.5가 일반 대중이 테스트할 수 있는 가장 큰 모델이라는 것
          + 이 정도 크기의 모델로 확장한다고 해서 우리가 측정하는 기능에서 뚜렷한 도약이 일어나지는 않음
          + GPT-3.5 → GPT-4 전환은 보통(Okay) 에서 좋음(Good) 이었음
          + GPT-4o → GPT-4.5 변화는 훌륭함(Great) 에서 매우 훌륭함(Really Great)
     * 최신 모델의 차이점을 알아내는 것은 매우 어렵기 때문에, AI에 투자하고 발전을 기대하는 사람들은 실제보다 더 나은 것으로 착각할 가능성이 있음
     * 기대했던 만큼의 큰 성능 향상 없이 스케일링의 경제적 한계가 명확해지는 시점임
          + Anthropic도 비슷한 문제를 겪으며, Claude 3.7 이후 훨씬 더 큰 모델을 훈련할 것이라고 확인됨
     * GPT-4.5는 점진적인 발전을 보여주는 모델로, 기존의 혁신적인 도약과는 다름
          + AI 연구에서 ""단순한 사전 훈련 확장은 더 이상 기존 수준의 혁신을 만들지 못한다""는 사실을 보여줌
          + OpenAI 내부적으로는 GPT-4.5를 오랫동안 활용했으며, GPT-4.5를 기반으로 다른 모델을 훈련하는 용도로 사용했을 가능성이 큼(Cutdate가 2023년인것으로 보아)

GPT-4.5는 뭐가 좋은가

     * (GPT-4.5와 GPT-4o의 매개변수 수에 대한 몇 가지 추정치이고, 유출된 정보를 기반으로 한 것이 아니므로 오차 범위가 크므로 주의해야 함)
     * GPT-4.5는 매우 큰 모델이며, Grok 3보다 클 가능성이 큼
          + GPT-4는 1조(1T) 이상의 전체 파라미터를 가진 혼합 전문가(MoE) 모델이었으며, 활성 파라미터는 약 200B으로 추정됨
          + 소문에 의하면 GPT-4o 또는 Gemini Pro와 같은 모델의 활성 매개변수가 60B까지 작아짐
          + 즉, 최근 모델들은 활성 파라미터를 줄이고 인프라를 최적화하여 속도와 비용을 개선하는 방식으로 발전 중
     * GPT-4.5는 GPT-4 대비 약 10배 더 많은 연산량(10X compute) 이 필요할 것으로 추정됨
          + 5배 더 많은 파라미터 + 2배 더 큰 데이터셋 = 10배의 연산량 증가
          + 전체 파라미터가 5-7조(5T-7T) 에 달할 수 있으며, 활성 파라미터는 약 600B일 것으로 예상
     * 하지만, 이만큼 확장해도 성능 향상이 체감되기는 어려움.
     * 여기서부터 상황이 매우 이상해짐. OpenAI가 이번 발표에서 강조한 2가지
          + 환각(Hallucination) 감소 : 모델이 사실이 아닌 정보를 생성하는 빈도를 줄임
          + 감성 지능(Emotional Intelligence) 향상 : 문맥과 감정을 더 잘 이해하고 표현 가능
          + 하지만, 이 2가지는 객관적으로 평가하기 어려운 특성임
     * 벤치마크 성능 (OpenAI 제공 데이터 기준)
          + SimpleQA: AI 모델의 세계 지식 평가에서 GPT-4.5가 큰 성능 향상을 보임
          + PersonQA: 개별 인물 관련 질문 평가에서도 최고 성능
          + GPQA (Google-proof QA): 정보 검색 없이 논리적 추론을 평가하는 지표에서도 우수한 성과
     * 출시 직후 AI 전문가들 사이에서 GPT-4.5가 사용하기 편하고 글을 더 잘 쓴다는 의견이 나옴
          + 하지만, 코드 및 기술적 성능 평가에서는 Claude 3.7, R1 등의 경쟁 모델과 비교해 중간 수준으로 평가됨
     * 글쓰기 스타일 비교(Karpathy의 X(트위터) 설문조사 결과)
          + GPT-4.5 vs. GPT-4o-latest: 다수의 사용자들이 GPT-4o-latest의 글쓰기 스타일을 더 선호함
          + 이유? GPT-4o-latest가 이전에 Orion1이라고 불렸던 이 새로운 모델에서 증류된(distilled) 모델일 가능성이 높고, 크기가 훨씬 작아 반복 속도에서 밤낮으로 차이가 나기 때문에 사후 훈련이 더 잘 될 수 있을 것
     * 이 모든 것은 OpenAI가 ChatBotArena 랭킹에서 다시 1위를 차지하기 위해 지불해야할 대가
          + GPT 4.5가 이를 달성할 것으로 기대하지만 결과는 아직 미확정
     * 필자가 미리 직접 사용해본 결과, 속도가 느려 처음에는 불편했으나, 신뢰성이 높아 계속 사용할 가치가 있음
          + 그러나 추가 비용을 내면서까지 GPT-4.5를 선택할 필요는 없으며, OpenAI의 o1 Pro 및 다른 유료 서비스가 더 높은 가성비를 제공함

GPT-4.5의 가격이 비싼 이유

     * GPT-4 출시 당시 가격도 상당히 높았고, 실제로 GPT-4.5와 비슷했음
     * GPT-4.5의 초기 가격은 다음과 같음:
          + 입력 (Input): $75.00 / 1M 토큰
          + 캐시된 입력 (Cached Input): $37.50 / 1M 토큰
          + 출력 (Output): $150.00 / 1M 토큰
          + 즉, 이전 모델들보다 훨씬 높은 가격으로 시작되었음
     * OpenAI의 이전 모델들도 처음에는 가격이 비쌌지만, 점진적으로 크게 인하된 사례가 있음
          + GPT-4 (2023년 3월 출시)
               o 처음에는 입력 100만 개당 $30, 출력 100만 개당 $60으로 시작
               o 32K 컨텍스트 버전은 더 비싸서 입력 $60, 출력 $120이었음
          + GPT-4 Turbo (2023년 11월 출시)
               o 훨씬 저렴해져서 입력 $10, 출력 $30으로 가격이 내려감
          + GPT-4o (2024년 5월 출시)
               o 가격이 더 내려가 입력 $2.5, 출력 $10이 되어 GPT-4 대비 10배 이상 저렴해짐
          + 이처럼, OpenAI는 새로운 모델이 나올 때마다 가격을 크게 낮추는 패턴을 보임
     * 현재 GPT-4.5의 가격이 비싸게 책정된 이유는 출시 초기라서 높은 마진을 설정했기 때문으로 보임
          + OpenAI는 모델이 API에 계속 남을지 보장하지 않으며, 사용자 반응을 보고 결정하겠다고 언급함
     * 많은 전문가들은 Nvidia의 차세대 GPU Blackwell이 출시되면, 더 큰 모델을 효율적으로 운영할 수 있어 비용이 낮아질 것으로 예상
     * GPT-4에서 GPT-4 Turbo, GPT-4o로 가면서 가격이 점점 낮아졌듯이, GPT-4.5도 향후 GPT-4.5 Turbo 같은 버전이 나오면서 가격이 인하될 가능성이 높음

스케일링의 미래

     * 언어 모델의 스케일링은 아직 죽지 않았음
          + 하지만, 이번 발표가 왜 그렇게 이상하게 느껴졌는지 되돌아 보는 것은 AI의 발전속에서 냉정함을 유지하는데 매우 중요함
          + 우리는 다양한 스케일링 유형간의 장단점이 존재하는 시대에 접어들었음
     * 짧게 요약하자면, ""GPT-4.5는, 이상하지만, 시대를 앞서 나가고 있음""
          + GPT-4.5는 단순한 모델 확장이 아니라 새로운 스케일링 방식이 필요하다는 신호
          + 이는 AI의 발전이 단순한 모델 크기 확장(Scaling Up)만으로는 충분하지 않고 다른 방식을 취해야 한다는 것을 의미하지만, 우리는 이미 추론 모델의 빠른 발전을 통해 이를 알고 있었음
          + GPT-4.5의 진정한 영향력은 여러 라인의 빠른 발전과 통합될 때 발휘됨
     * DeepSeek의 R1 논문과 후속 RL 연구에서 더 큰 모델일수록 RL 트레이닝이 더 효과적이라는 결론이 나옴
          + OpenAI의 o4 모델도 GPT-4.5 기반의 추론 모델을 활용해 훈련될 가능성이 높음
          + OpenAI의 현재 모델은 GPT-4.5가 없었다면 그다지 훌륭하지 않았을 것
     * 빠르면 1년 이내에 대부분의 모델이 GPT-4.5 규모로 발전하고, 속도도 훨씬 빨라질 것
          + ""균형 잡힌"" 개선 사항은 더 많은 애플리케이션을 더욱 견고하게 만드는 데 도움이 될 것
          + OpenAI와 AI 연구소들의 다른 연구자들은 기존 인프라 한계를 넘어서는 수준까지 모델을 확장하려 하고 있음
     * 프론티어 랩이 모든 확장 방향의 한계를 뛰어넘지 않는다면 충분한 위험을 감수하지 않는 것
          + 모델을 공개할 필요는 없지만, OpenAI가 실제로 왜 이렇게 하려고 했는지 추측해볼 필요가 있음
          + 현재 다른 내부 시스템과 곧 다른 외부 제품에도 GPT-4.5가 사용될 가능성이 높기 때문에 이 모델을 출시하는 것은 우회로가 아니라 다음 단계로 나아가는 자연스러운 과정
     * GPT-4.5는 프론티어 모델이지만, 그 출시가 흥미진진한 것은 아님
          + AI의 발전은 공짜가 아니며 많은 노력이 필요함
          + GPT-4.5 자체가 중요한 것이 아니라, 이 모델이 다른 기술과 결합될 때 진짜 가치가 드러날 것

   이미 많은 벤치가 포화된 상태에서 사용성이나 환각등에 집중하는 것 당연한 흐름이라고 보입니다.

        Hacker News 의견

     * GPT 4.5도 2023년 10월까지의 지식 컷오프를 가짐
          + 이 모델은 최소 1년 전에 사전 훈련이 완료되었을 가능성이 있음
          + OpenAI는 Q-star/strawberry와 같은 다른 프로젝트에 집중했을 수 있음
     * OpenAI의 추론 모델이 기대만큼 강력하지 않을 수 있음
          + Gemini 2.0 Flash, Grok 3, Sonnet 3.7과 같은 강력한 비추론 모델들이 등장함
          + OpenAI는 외관상 무언가를 출시할 필요성을 느꼈을 수 있음
     * 가격은 다소 미스터리임
          + 최신 효율성 트릭이 없는 오래된 모델의 반영일 수 있음
          + GPT-4.5는 OpenAI가 얼마나 많은 비용을 지불할지 알아내는 방법일 수 있음
     * GPT-4o에서 4.5로의 도약은 큰 도약이 아님
          + 사치품처럼 가격이 매겨졌지만 사치스러운 보상은 없음
     * GPT-4.5는 복잡하고 미묘한 생각을 매우 빠르게 처리할 수 있음
          + 다른 AI보다 훨씬 뛰어남
     * GPT-4.5는 이상한 방향으로 가지 않고 현실에 기반을 둠
          + 톤 선호에 잘 반응하고 미묘한 차이를 잘 이해함
     * 장기적으로 인프라를 수익화하기 어려울 수 있음
          + 코딩 API는 Claude 3.5/3.7이 더 많이 사용될 가능성이 큼
          + 비코딩 API는 Gemini 2.0 Flash가 더 저렴하고 성능이 좋음
          + 구독 앱은 ChatGPT가 여전히 최고지만 Grok이 경쟁 중임
     * GPT-4.5는 ""창의적 글쓰기""에 약간 더 나음
          + Anthropic은 더 실용적인 문제를 해결하는 새로운 모델을 출시함
     * 기술의 한계에 도달하고 있는 것 같음
     * 두 문장이 모순적이지 않나 하는 의견이 있음
          + 모델 크기를 확장해도 명확한 능력 향상이 없었음
          + GPT-4o에서 GPT-4.5로의 도약은 모델을 훌륭하게 만듦
     * 벤치마크의 마지막 퍼센티지를 실제로 보는 사람이 있는지 의문임
          + 벤치마크가 100% 정확하다고 가정하는 것이 실수일 수 있음
     * Azure의 모든 GPT4o 모델이 5월에 사용 중단 예정임
          + Anthropic으로 이동해야 할지 고민 중임
          + 새로운 ""o"" 모델 출시 시기에 대한 정보가 필요함
"
"https://news.hada.io/topic?id=19581","Apple, M4칩 탑재한 MacBook Air 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Apple, M4칩 탑재한 MacBook Air 공개

     * M4(10코어 CPU, 8/10코어 GPU, 16코어 뉴럴 엔진) + 16GB/32GB 통합메모리 + 최대 2TB
     * 기본 디스플레이외 최대 2대의 외장 디스플레이 지원 (6K)
     * 최대 18시간 배터리, 12MP 센터 스테이지 카메라
     * 신규 스카이 블루 색상 및 미드나이트, 스타라이트, 실버
     * MagSafe 3 충전 포트 + Thunderbolt 4 포트 2개 + 3.5mm 헤드폰 잭(하이 임피던스 지원)
     * 13모델 : 1.24kg, 1,590,000원 부터, 4스피커, 30W/35W USB-C 어댑터(GPU 숫자에 따라 다름)
     * 15모델 : 1.51kg, 1,890,000원 부터, 포스 캔슬링 우퍼를 탑재한 6 스피커, 35W 듀얼 USB-C 어댑터
     * Wi-Fi 6E, Touch ID
"
"https://news.hada.io/topic?id=19542","솔라펑크 운동","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                솔라펑크 운동

배경

     * Solarpunk은 지속 가능한 미래를 자연과 공동체와 연결하여 실현하려는 문학 및 예술 운동임.
     * ""Solar""는 태양 에너지를, ""punk""는 DIY와 반문화적, 탈자본주의적 측면을 나타냄.
     * 사이버펑크와 대비되며, 지속 가능성과 환경에 대한 인간의 영향을 강조함.

주제와 철학

  재생 가능 에너지

     * Solarpunk은 오염을 줄이는 에너지 형태로의 전환을 지지함.
     * 생태 마을과 같은 공동체를 만들고, DIY 윤리를 통해 기술을 활용함.

  비관주의 거부

     * Solarpunk은 긍정적인 사회 변화를 그리며, 반-디스토피아적 관점을 제시함.
     * DIY 윤리, 사회적 포용성, 긍정 심리학을 강조함.

  지속 가능한 기술

     * 기술을 사회, 경제, 환경의 지속 가능성을 개선하는 방식으로 통합함.
     * 사이버펑크와 달리, 인간과 환경의 공존을 가능하게 하는 기술을 상상함.

  DIY 정신

     * Solarpunk은 기술뿐만 아니라 저기술적 지속 가능성도 포용함.
     * 환경 철학과 반소비주의, 반권위주의, 탈중앙화를 반영함.

  인종 및 성 평등

     * 인종 및 성 평등 요소를 포함하며, 초기 유토피아 작품에서 이 주제를 차용함.

예술 운동과 미학

     * Solarpunk은 2010년대에 등장한 예술 운동으로, 낙관적이면서도 현실적인 문제를 직시함.
     * Art Nouveau 스타일을 사용하며, 자연 색상과 다양한 문화적 기원을 암시함.

소설

  문학

     * Solarpunk은 과학 소설의 하위 장르로, 기술의 사회적 영향과 진보를 탐구함.
     * 환경 재난이나 중앙 권력의 실패를 목격한 ""메이커-영웅""을 주인공으로 함.

  영화

     * Hayao Miyazaki의 작품들은 초기 Solarpunk 영화의 예로 간주됨.
     * James Cameron의 아바타 영화와 같은 실사 영화도 포함됨.

  테이블탑 RPG

     * Solarpunk 테마는 테이블탑 게임에서도 점점 더 많이 탐구되고 있음.

비판

     * Solarpunk은 외관상 지속 가능성을 제공하지만 실제 환경 문제의 근본 원인을 해결하지 못할 위험이 있음.

건축

     * Solarpunk 건축은 자연 요소와 인간 사회를 결합함.
     * Bosco Verticale와 같은 실제 예시가 있음.

        Hacker News 의견

     * 나는 이 미학과 미래에 대한 비전을 정말로 사랑함. 깨끗한 공기, 건강한 음식, 자립하는 공동체. 낭비 없는 풍요, 파괴 없는 발전, 폭정 없는 평등한 기회. 우리는 이런 미래를 가능하게 하는 소프트웨어를 개발해야 함. 그러나 현대 소프트웨어 사용은 과도한 낭비를 초래하고, 지구의 파괴를 가속화하며, 권위주의를 가능하게 하는 것 같아 실망스러움. 우리가 무엇을 목표로 하고 있는지 다시 생각해볼 때일지도 모름
     * Becky Chambers의 ""A Psalm for the Wild Built""는 기분 전환이 필요할 때 좋은 솔라펑크 소설임. Chambers의 작품 전체는 과학 소설 형태로 영혼을 위한 따뜻한 차 한 잔과 담요 같음. ""The Long Way to a Small, Angry Planet""으로 시작하는 Wayfarers 시리즈는 내가 발견한 최고의 취침 전 읽기 자료일지도 모름
     * 멋진 미학이지만 실용적인 운동으로서는 현실과의 문제가 있음. 예를 들어, 많은 사람들이 방문하면 배터리가 소진되는 태양광 웹사이트 같은 것이 있음. 멋진 발언이지만, 클라우드 호스팅에서 일시적으로 존재하는 작은 가상 인스턴스로 배포하는 것이 환경적으로 더 친환경적일 수 있음. AWS의 전력 소비를 약간 증가시키는 것과 집으로 여러 부품을 배송하는 것 중 어느 것이 더 친환경적인지 생각해볼 필요가 있음
     * 솔라펑크 관련 내용을 볼 때마다 떠오르는 생각은 솔라펑크가 초기 Star Trek이라는 것임. 이는 우리가 가진 가장 가까운 개념으로, 비록 매우 작은 규모에서의 희소성 없는 유토피아이지만, 전 세계 인구의 상당 부분에는 완전히 지속 가능하지 않을 것임. 그러나 그 진보를 어떻게 가장 잘 계획할 수 있을지, 현재 기술 수준을 기반으로 삶의 질에 대한 현재의 등가물은 무엇일지 궁금해짐
     * 나는 기사에서 언급된 ""hopepunk""이라는 용어를 좋아함. 최근 공포, 스릴러, 디스토피아 등이 모든 미디어에서 증가하고 있는 것 같음. 그래서 창작자들이 미래에 대해, 적어도 허구의 미래에 대해 낙관적인 것을 보는 것이 매우 좋음
     * 이 주제에 대해 몇 시간 동안 읽다 보니 몇 가지 멋진 건축 응용 프로그램을 발견함. Bosco Verticale는 링크 점프에서 멀지 않으며, 이러한 유형의 공상 과학 아이디어를 사용하는 현재의 가장 적용 가능한 건축물 중 하나임. 밀라노의 지상 수준에서의 Streetview 버전이 있음. 다른 하나는 Earthships, 깡통 벽, 병 벽을 살펴보면서 꽤 멀리 떨어져 있었던 Wat Pa Maha Chedi Kaew임. 150만 개의 빈 하이네켄과 창 맥주병으로 만든 태국의 불교 사원임. Google에서의 사진 투어가 매우 인상적임
     * 솔라펑크에 대한 나의 비판은 수력, 풍력, 태양 에너지에 대한 강조가 더 효율적인 원자력 같은 에너지원보다 우선시된다는 것임. 그러나 솔라펑크의 미래주의적 낙관론과 자립 정신을 높이 평가함. 나는 개별화와 개인의 자유를 희생하는 솔라펑크의 측면에는 관심이 없음. 혁신적인 솔루션이 개인의 자유와 우리 모두를 지탱하는 시스템을 모두 존중할 수 있다고 생각함
     * 이상을 중심으로 구축된 미학 시스템처럼, 솔라펑크는 대부분의 사람들에게 실현 가능하지 않을 수 있지만, 이상적인 실용적인 부분을 라이프스타일에 구현할 방법이 있음. 내가 정기적으로 하는 좋아하는 활동 중 하나는 인스턴트 팟과 에어프라이어를 사용하여 ""태양"" 요리를 하는 것임. 이들은 주로 내 패널이나 그리드에서 오프 피크 태양광 전력으로 충전되는 가정용 배터리로 작동함. 이것이 내가 가족의 식사의 80%를 요리하는 방법임. 내 경우에는 집 전체 배터리가 있지만, 이론적으로는 더 큰 용량의 휴대용 배터리 중 하나로 인스턴트 팟을 작동할 수 있음
     * Chobani는 솔라펑크 미학을 특징으로 하는 정말 아름다운 광고를 만듦. 사람들은 다양한 이유로 이를 싫어하지만, 나는 그들이 추구하는 비전/미학을 좋아함. 참고: Chobani와 관련 없음
     * 나는 어떤 형태의 사회적 이상주의도 그리움
"
"https://news.hada.io/topic?id=19512","Show GN: [유튜브 강의 정리] 안드레 카파시 - Deep Dive into LLMs like ChatGPT","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: [유튜브 강의 정리] 안드레 카파시 - Deep Dive into LLMs like ChatGPT

   강의를 직접 볼 시간이 없는 분들이나 핵심 내용을 빠르게 파악하고 싶은 분들을 위해 내용을 정리했습니다.

   와 정리 진짜 잘돼있네요!! LLM에 대한 개념이 머릿속에서 조금이나마 잡힌거 같아요. 감사드려요!!
"
"https://news.hada.io/topic?id=19516","상속이 노동만큼 중요해지고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           상속이 노동만큼 중요해지고 있음

     * 최근 몇십 년간, 재능과 노력으로 부를 쌓는 것이 가능했으나, 이제는 상속 재산의 중요성이 커지고 있음
     * 선진국에서 올해 예상되는 상속 재산 규모는 약 6조 달러로, GDP의 10%에 해당하며, 20세기 중반 5%였던 것에 비해 두 배 증가함
     * 프랑스에서는 1960년대 이후 상속 재산 비율이 두 배 증가했고, 독일에서는 1970년대 이후 거의 세 배 증가함
     * 이제 젊은이들이 집을 사고 안정적인 삶을 사는 것은 노동의 성공뿐만 아니라 부모로부터 받은 상속에도 크게 좌우됨
     * 이는 능력주의(meritocracy)뿐만 아니라 자본주의 자체를 위협하는 문제임

  상속 증가의 원인

     * 경제 성장 속도가 둔화된 반면, 부동산 가격은 급등하여 부의 규모가 소득에 비해 급격히 커짐
     * 특히 유럽에서는 경제 성장 정체와 생산성 저하가 지속되며 부의 집중이 심화됨
     * 베이비부머 세대가 축적한 재산이 자녀 세대로 상속되면서 ""상속 계급(inheritocracy)""이 형성되고 있음

  부자들의 변화: 자수성가에서 상속으로

     * 20세기 대부분 동안, 부자는 전쟁, 인플레이션, 잘못된 투자로 인해 재산을 잃는 경우가 많았음
     * 한 연구에 따르면, 1900년 미국의 부유층 가문이 주식시장에 단순 투자하면서 소득의 2%만 사용하고 일반적인 출산율을 유지했다면, 오늘날 미국에는 약 16,000명의 상속 부자가 존재해야 함
     * 그러나 실제로 미국에는 1,000명도 되지 않으며, 이들 대부분은 자수성가형 부자임
     * 하지만 최근에는 상속으로 억만장자가 되는 경우가 증가하고 있음
          + 2023년에는 53명이 상속으로 억만장자가 되었으며, 이는 자수성가형 억만장자(84명)와 큰 차이가 없음
          + 이는 인덱스 펀드 등을 활용해 재산을 쉽게 불릴 수 있고, 자산 관리 기법이 발전했기 때문
          + 또한, 정부가 상속세를 줄이거나 폐지하면서 상속 부의 축적이 더욱 쉬워짐

  상속 계급은 부자만의 문제가 아님

     * 상속을 받는 사람들은 초호화 요트나 대저택을 물려받는 것이 아니라, 일반적인 주택이나 그 매각 대금을 상속받음
     * 특히 런던, 뉴욕, 파리 등 대도시에서 주택 가격이 폭등하면서 부동산을 보유했던 세대가 큰 자산을 물려줌
     * 결과적으로, 은행가와 기업 변호사조차도 택시 운전사의 유산으로 나온 집을 두고 경쟁하는 상황이 됨
     * 뉴욕과 런던에서는 이제 고소득자조차도 상위 10% 수준의 삶을 살기 어려워졌으며, 부모의 재산이 없는 경우 ""엄마·아빠 은행""에 의존해야 함

  상속 격차 심화

     * 영국에서는 1960년대 출생자의 6명 중 1명이 평균 연 소득의 10배 이상의 유산을 받을 것으로 예상됨
     * 1980년대 출생자의 경우, 이 비율은 3명 중 1명으로 증가함
     * 상속 재산의 불평등도 심각함
          + 35~45세 연령대의 20%는 1만 파운드(약 1,300만 원) 미만을 상속받을 것으로 예상됨
          + 반면, 25%는 28만 파운드(약 3억 7천만 원) 이상을 상속받을 것으로 예상됨

  상속 계급의 경제적 위험성

     * 자유 시장 경제를 지지하는 사람들에게도 이 현상은 심각한 문제로 작용함
     * 상속 계급은 생산적이지 않은 ""임대 수익 계층(rentier class)""을 만들어 경제에 악영향을 줌
          + 법의 허점을 이용해 세금을 회피하는 데 집중함
          + 부동산 가격 유지를 위해 건설을 반대하는 님비(NIMBY) 성향을 강화함
          + 부모의 재산에 의존하며 노동이나 혁신에 대한 유인이 줄어듦
     * 상속을 받지 못한 계층은 점점 뒤처지고 정치적 불만이 커질 위험이 있음
          + 내 집 마련이 어려워지고 안정적인 삶이 불가능해지면서, 젊은 근로자들의 근로 의욕이 저하됨
          + 시스템이 자신들에게 불리하게 작용한다고 느낄 경우, 주류 정당에 대한 지지가 약해짐

  해결 방안: 부동산 정책과 세제 개편

     * 과거처럼 전쟁이나 인플레이션으로 재산을 파괴하는 것은 답이 될 수 없음
     * 상속세는 공정한 해결책이 될 수 있으나, 정치적으로 인기가 없어서 제대로 시행되지 못하고 있음
     * 보다 현실적인 해결책은 다음과 같음
          + 주택 공급 확대: 적절한 지역에 충분한 주택을 공급하면 노동과 부의 연계를 회복할 수 있음
          + 부동산 보유세 도입: 특히 토지 가치에 기반한 세금을 부과하면 주택 가격이 하락하여 소득 대비 주택 가격 비율을 낮출 수 있음
          + 경제 성장 촉진: 경제 성장이 이루어지면 부의 집중이 완화될 가능성이 큼
     * 능력주의가 자리 잡았던 시대에는 사회적 이동성과 경제 성장, 번영이 함께 이루어졌음
     * 적절한 정책을 통해 다시 이러한 시대를 만들 수 있음

   우리나라에서 상속세를 폐지하자는 의견이 나오던데 과연 좋을지는 미지수인 것 같습니다.

   Hacker News 의견에도 써있지만, 10년 전에 피케티가 쓴 <21세기 자본>에서 같은 이야기를 했었습니다. 그 때 이야기를 두 줄로 요약하면, ""자본소득의 수익률이 근로소득의 수익률보다 더더 커지고 있다. 그 때문에 상속이 더 중요해지고 이 때문에 부의 불평등이 더 심해지고 있다""라고 했었고요.

   한국에선 이런 인식이 금수저 흙수저 란 단어가 유행하는 것으로 표현된듯 싶네요. 그것도 꽤 옛날이네요...

   위 글의 대표 이미지가 아기용 공갈젖꼭지인데 그걸 금으로 표현했더군요. (Golden Pacifier)
   금수저보다도 더 빨리, 젖먹이때부터 상속받는 걸 표현한거 같아요.

   아들이 두머 doomer 세대라고 표현하더군요.

        Hacker News 의견

     * Gary Stevenson의 작업을 살펴보는 것이 중요함
          + 경제 성장은 대부분의 사람들에게 실질적으로 일어나지 않고 있으며, 부자들이 가난한 사람들로부터 돈을 빠르게 이전하고 있음
          + 시스템이 부패했다고 생각하기 시작하며, 유럽은 파괴되고 미국은 내전으로 향하고 있는 것 같음
          + 이 순간이 미국 제국의 종말처럼 느껴지며, 이후 무엇이 올지는 매우 불확실하지만, 사람들은 세계 대전 후에야 공정한 부의 분배를 요구하는 것 같음
     * 기사에서 언급된 내용:
          + ""적절한 장소에 충분한 주택을 건설하는 것이 정부가 일과 부의 연결을 회복하기 위해 취할 수 있는 가장 큰 조치임""
          + 오늘날 부유한 국가들의 경제 문제에 대해 이보다 더 큰 진실은 없다고 생각함
     * 평균적인 사람이 열심히 일하면 결국 국가의 땅과 자원을 소유하고 가족에게 대대로 부를 물려줄 수 있다는 생각은 개척 시대에서 유래함
          + 인구가 계속 증가하는 한 이러한 상황은 영원히 지속될 수 없었음
          + 정착민들이 유럽을 떠나 해외에서 운을 찾으려 했던 이유임
          + 소유되지 않은 땅이 남아 있지 않기 때문에, 땅의 시장 가격은 지역 인구 증가와 맞먹거나 이를 초과할 것임
          + 열심히 일하는 것은 여러 이유로 자체적으로 필요하지만, 모든 사람에게 ""열심히"" 일하면 후손을 위해 준비할 수 있다고 약속하는 것은 순전히 마케팅임
          + 이를 달성하지 못한 사람을 ""게으르다""고 비난하는 것도 마찬가지임
     * 노동 소득이 자본 소득보다 높은 세율로 과세되는 이유에 대한 명확하고 존경할 만한 주장이 없다고 생각함
          + 여기서 시작하기를 희망하며, 매우 간단하고 직접적인 조치임
     * Piketty의 책 ""21세기 자본""에서 예측한 바와 같음
          + 부가 노동을 능가하며 전후 시대는 예외적이었음
          + 그의 제안된 해결책은 부유세임
          + 부와 권력을 가진 사람들이 부유세를 시행할 것이라고 보지 않으며, 대안은 부를 축적하기 위해 투자하고, 투자할 위치에 있지 않은 자녀들이 그 부에 의존할 것임을 아는 것임
     * 내가 아는 거의 모든 사람들은 다운페이먼트를 위해 수십만 달러를 선물 받았으며, 대부분은 중산층 또는 상위 중산층 배경임
          + 캐나다 기준으로 상위 2% 소득을 가지고 있지만, 내가 할 수 있는 최선은 2베드룸 콘도나 시장 하위의 타운하우스임
          + 이 도시의 평균 가구가 현재 가격으로 살 수 있는 동네를 알지 못함
          + 더 이상 왜 일하는지 모르겠으며, 달성 가능한 재정 목표가 없고 저렴한 지역으로 이사 가서 저축으로 생활할 때까지 최대한 저축하는 것뿐임
     * The Economist가 Rothschild 가문에 의해 부분적으로 소유되고 통제된다는 것은 클리셰처럼 들릴 수 있지만 사실임
     * 상속이 모든 부패의 근본 원인임
          + 자녀에게 그들이 벌지도, 받을 자격도 없는 부를 주는 원칙에 기반한 정의로운 사회는 결코 가질 수 없음
     * 시애틀에서 20대나 30대에 집을 산 내 친구들 대부분은 상속 자금을 사용했음
          + 내가 모기지 대출 업무를 했을 때, 30세 이하의 사람들은 부모로부터 많은 도움을 받는 것이 거의 보편적이었음
          + 젊을 때 집을 소유하는 것은 특히 금리 인상 전에는 큰 이점임
"
"https://news.hada.io/topic?id=19563","일본 연필의 황금기 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           일본 연필의 황금기 (2022)

     * 일본 연필의 황금기, 1952-1967
     * 1952년 여름, Tombow Pencil의 경영진은 일본 연필 산업을 혁신하기 위해 준비 중이었음. Hachiro Ogawa는 Tombow의 관리 이사로, 일본 최고의 연필을 만들기 위한 프로젝트를 완료했음.
     * ""HOMO""라는 이름의 새로운 모델은 당시 일본 연필과 비교해 더 균일한 코어를 가졌음. 이는 Tokyo 대학과의 협력을 통해 연구된 결과로, 미국에서 더 발전된 산업용 밀을 수입하여 구현되었음.
     * HOMO 연필은 17가지 등급으로 제공되었으며, 향나무를 사용하여 고급스러운 디자인을 자랑했음. 1952년 Tokyo Kaikan에서의 발표에서 720,000개가 주문되며 성공을 거두었음.
     * 도쿄 연필 경쟁
     * HOMO는 일본 최초의 현대적인 코어를 가진 연필이었지만, Tombow는 일본 최초의 연필 제조업체는 아니었음. Jinroku Masaki가 1901년에 일본 통신부에 연필을 공급했으며, Mitsubishi라는 이름을 등록했음.
     * Tombow의 전신인 Harunosuke Ogawa Pencil은 1913년에 설립되었으며, 1927년 Toshima 공장을 열어 Mitsubishi를 앞서 나갔음.
     * 산업의 조직화
     * 일본 제조업체들은 품질과 신뢰성을 구축하기 위해 일본 산업 표준(JIS)을 도입했음. 1951년에 공식 채택된 연필 표준은 1953년까지 90%의 연필이 인증을 받았음.
     * Mitsubishi의 재도전
     * 1953년, Mitsubishi의 Yoji Suhara는 유럽과 미국을 방문하여 일본 연필의 평판을 조사했음. 그는 품질 향상을 위해 새로운 기술과 디자인을 도입했음.
     * Yoshio Akioka가 디자인한 ""Uni"" 연필은 1958년에 출시되어 성공을 거두었음. Uni는 독특한 마룬 색상과 현대적인 디자인으로 인기를 끌었음.
     * 마지막 프리미엄 연필
     * 1966년, Mitsubishi는 Hi-Uni를 출시했으며, 이는 Uni의 업그레이드 버전이었음. Hi-Uni는 다양한 등급으로 제공되었으며, 높은 품질과 부드러움을 자랑했음.
     * 1967년, Tombow는 MONO 100을 출시했으며, 이는 Hi-Uni와 같은 가격으로 판매되었음. MONO 100은 정밀함과 내구성을 강조했음.
     * 황금기는 끝나지 않음
     * 오늘날에도 Hi-Uni와 MONO 100은 여전히 제조되고 있으며, 많은 예술가와 작가들에게 영감을 주고 있음. 일본 연필의 황금기는 여전히 계속되고 있음.

        Hacker News 의견

     * FAA에서 인정한 페인트 필름 경도 테스트는 Mitsubishi Pencil Company에서만 제공하는 특수 연필로 수행됨. 이 연필은 17개 묶음으로 $224에 판매되며, 각 연필은 개별적인 교정 인증서를 포함하고 있음. 이 테스트는 ASTM D 3363, ""연필 테스트에 의한 필름 경도 표준 시험 방법""임
     * Masaki는 '세 개의 다이아몬드'를 의미하는 'Mitsubishi' 이름과 함께 세 개의 다이아몬드 상표를 등록할 아이디어를 가졌음. 이는 Mitsubishi Group의 중공업 회사들이 이름과 동일한 상표를 등록하기 10년 전의 일이었음. Mitsubishi Pencil은 일본의 다른 Mitsubishi 회사들과는 관련이 없으며, 항상 필기 및 그림 용품을 제조하는 회사였음. 이 사실을 오늘 처음 알게 되었음. 항상 세 개의 다이아몬드 마크와 이름을 보고 연필이 자동차와 관련이 있다고 생각했음
     * 일본 연필에 관한 이야기는 아니지만, 영국의 LAke District를 방문할 기회가 있다면 Derwent Pencil Museum을 강력히 추천함. 연필이 어떻게 만들어졌는지, 제작 과정이 얼마나 복잡한지에 대해 매우 흥미로움. 전통적인 제조 방식을 매우 좋아하며, 연필은 20세기 초반 최고의 기술이었음
     * Tombow, Mitsubishi와 같은 연필 브랜드를 많이 가지고 있으며, 주로 eBay에서 구매함. 이 연필로 글을 쓰는 경험은 놀라움. 주로 H, HB를 사용하며, 고급 연필의 H가 일반 H와 어떻게 다른지 흥미로움. 연필과 함께 사용하는 샤프너, 지우개 등의 도구도 있음. 코딩은 키보드 사용을 유도하지만, 점점 더 글을 쓰게 되면서 속도가 느려지고, 이는 도움이 됨. 매우 아날로그적인 경험이며, 디지털 디톡스의 한 형태임. 그림을 배우고 있어 연필에 투자하게 되었음. 아직 예술가는 아니지만, 다양한 연필의 세계는 놀라움
     * 일본 기계식 연필의 흥미로운 (공학적) 특징에 대해 알아보는 것도 매우 즐거웠음. 관련 블로그 포스트의 사진이 매우 인상적임. 얕은 심도의 매크로 사진으로 정성스럽게 배열된 연필과 문구류가 매우 만족스러움. 일부 제품은 Amazon에서도 찾을 수 있었음
     * 과거에 사용했던 가장 소중한 도구는 Pentel 0.3 슬라이딩 슬리브 연필, 모델 PS523이었음. 슬리브 덕분에 매우 가는 심에 많은 압력을 가해도 부러지지 않았음. 심은 매우 부드러워 사용하기 좋았음. B는 그 직경에서 가장 부드러운 심이었으므로, 진한 검정을 얻기 위해 압력이 필요했음. 모델이 단종된 이후 여러 기계식 연필을 구매했지만 실망스러웠음. 슬라이딩 슬리브가 있는 연필은 거의 없고, 있는 경우에도 슬리브가 매끄럽게 움직이지 않음. 이와 같은 연필은 다시 없을 것 같음. 잉크 드로잉을 위해 다양한 너비의 Sakura Pigma Micron 펜 세트를 가지고 있으며, 일반적인 글쓰기를 위해서는 Uniball 마이크로 펜을 선호함. 이 모든 것이 일본 제품이라는 것은 우연이 아님
     * 일반적으로 일본은 문구류에 있어 타의 추종을 불허함. 펜, 연필, 노트 등 모든 것이 더 나음. 편의점과 100엔 숍에서 찾을 수 있는 간단한 것부터 Hands와 같은 백화점의 전체 층, 그리고 고급 제품까지. 일본 브랜드의 문구류는 전 세계적으로 인기가 있음. 일본이 연필의 황금기를 가졌다는 것은 놀랍지 않으며, 오늘날에도 여전히 제품을 구매할 수 있고 여전히 최고임
     * 일본의 지우개가 달린 사무용 연필을 매우 좋아함. 최근 서랍을 정리하다가 Mitsubishi 9850 반 상자를 발견하고 매우 기뻤음. 12개에 약 $8 정도지만, 보물 창고를 발견한 기분이었음. 부드러운 필기감, 좋은 페인트, 잘 중심 잡힌 심, 느슨해지지 않는 페룰의 좋은 지우개가 특징임. 좋은 나무 연필로 글을 쓰는 것은 즐거움
     * 수십 년 동안 일본 문구류를 선호해왔으며, 여전히 전체적인 품질은 최고지만, 전성기는 지난 것 같음. 일부 분야에서는 여전히 혁신이 있지만, 대부분의 제품 라인은 20년 전만큼 광범위하지 않으며, 일부 생산은 해외로 이전되어 품질이 약간 하락했음. 아마도 이러한 하락은 화면 기반 커뮤니케이션으로의 전환 때문일 것임. 일본 기업들은 국내 시장이 이를 지원했기 때문에 더 나은 (즉, 더 비싼) 제품을 생산할 수 있었음. 젊은 세대가 스마트폰에 몰두하면서 전통적인 문구 제품의 사용이 크게 줄어들었음. eBay에서 구입한 단종된 제품을 서랍에 몇 개 보관하고 있음
"
"https://news.hada.io/topic?id=19459","DeepGEMM: 세밀한 스케일링을 통한 깨끗하고 효율적인 FP8 GEMM 커널","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              DeepGEMM: 세밀한 스케일링을 통한 깨끗하고 효율적인 FP8 GEMM 커널

DeepGEMM

   DeepGEMM은 FP8 일반 행렬 곱셈(GEMM)을 위한 라이브러리로, DeepSeek-V3에서 제안된 세밀한 스케일링을 지원함. 이 라이브러리는 일반 및 Mix-of-Experts(MoE) 그룹화된 GEMM을 지원하며, CUDA로 작성되어 설치 시 컴파일이 필요하지 않음. NVIDIA Hopper 텐서 코어를 지원하며, FP8 텐서 코어 누적의 부정확성을 해결하기 위해 CUDA 코어 2단계 누적을 사용함. CUTLASS와 CuTe의 개념을 일부 활용하지만, 템플릿이나 대수에 대한 의존성을 최소화하여 단순함을 유지함. 약 300줄의 코드로 구성된 하나의 핵심 커널 함수로 Hopper FP8 행렬 곱셈 및 최적화 기술을 학습하기에 적합한 자원임. 경량 설계에도 불구하고 다양한 행렬 형태에서 전문가가 조정한 라이브러리와 성능이 같거나 뛰어남.

  성능

   DeepSeek-V3/R1 추론에서 사용될 수 있는 모든 형태를 H800 SXM5에서 NVCC 12.8로 테스트함. 모든 속도 향상 지표는 CUTLASS 3.6을 기반으로 내부적으로 최적화된 구현과 비교하여 계산됨. 일부 형태에서는 성능이 좋지 않을 수 있으며, 최적화 PR을 환영함.

    일반 GEMM (밀집 모델)

     * 다양한 행렬 크기에서 DeepGEMM의 성능을 측정한 결과, 특정 크기에서 최대 2.7배의 속도 향상을 보임.

    MoE 모델을 위한 그룹화된 GEMM (연속 레이아웃)

     * 그룹 수와 각 그룹의 행렬 크기에 따라 최대 1.2배의 속도 향상을 보임.

    MoE 모델을 위한 그룹화된 GEMM (마스크 레이아웃)

     * 마스크 레이아웃을 사용하여 최대 1.2배의 속도 향상을 보임.

  빠른 시작

    요구 사항

     * Hopper 아키텍처 GPU, sm_90a 지원 필요
     * Python 3.8 이상
     * CUDA 12.3 이상 (최상의 성능을 위해 12.8 이상 권장)
     * PyTorch 2.1 이상
     * CUTLASS 3.6 이상

    개발

     * 서브모듈 클론, 심볼릭 링크 생성, JIT 컴파일 및 모든 GEMM 구현 테스트를 포함한 개발 과정 설명.

    설치

     * deep_gemm을 Python 프로젝트에 가져와 사용 가능.

  인터페이스

    주의사항

     * 이 라이브러리는 GEMM 커널만 포함하며, NT 형식만 지원함. 전치나 다른 FP8 캐스팅 작업은 독립적으로 구현해야 함.

    일반 밀집 GEMM (비그룹화)

     * 기본 비그룹화 FP8 GEMM 수행을 위한 함수 제공.

    그룹화된 GEMM (연속 레이아웃)

     * MoE 모델에서 전문가가 동일한 형태를 공유하는 시나리오에 맞춰 설계됨.

    그룹화된 GEMM (마스크 레이아웃)

     * 추론 디코딩 단계에서 마스크 텐서를 제공하여 유효한 부분만 계산.

    유틸리티

     * 다양한 유틸리티 함수 및 환경 변수를 제공하여 성능 최적화에 도움을 줌.

  최적화

    지속적인 워프 특화

     * CUTLASS 디자인을 따르며, 데이터 이동, 텐서 코어 MMA 명령어, CUDA 코어 승격을 겹치게 함.

    Hopper TMA 기능

     * TMA를 활용하여 데이터 이동을 가속화함.

    공통 세부 최적화

     * 다양한 최적화 기법을 통해 성능을 향상시킴.

    통합 및 최적화된 블록 스케줄러

     * 모든 비그룹화 및 그룹화 커널에 대한 스케줄러 제공.

    완전한 JIT 설계

     * 설치 시 컴파일이 필요 없는 JIT 설계를 통해 성능을 향상시킴.

    정렬되지 않은 블록 크기

     * 특정 형태에서 SM 활용을 극대화하기 위해 정렬되지 않은 블록 크기를 지원함.

    FFMA SASS 인터리빙

     * 성능 향상을 위해 FFMA 명령어를 수정하여 워프 수준 병렬성을 향상시킴.

  감사

     * DeepGEMM은 CUTLASS 프로젝트에서 영감을 받았으며, 개발자들에게 감사와 존경을 표함.

  라이선스

     * MIT 라이선스로 공개됨.
"
"https://news.hada.io/topic?id=19483","Fish 4.0.0 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Fish 4.0.0 릴리스

     * Fish는 macOS, Linux 및 기타 Unix 계열 운영체제를 위한 사용자 친화적인 커맨드라인 쉘
     * 4.0.0 부터 Fish의 핵심 코드가 C++에서 Rust로 포팅됨
          + 이는 종속성과 빌드 방식에 큰 변화를 가져오지만 사용자에게 직접적인 영향은 없음
     * 비호환 변경 사항:
          + bind 명령어의 새로운 키 표기법 도입
          + ctrl-c가 이제 clear-commandline을 호출하며, 이전 동작은 cancel-commandline으로 사용 가능
          + random 함수의 시드 값에 따른 결과가 이전 버전과 다르게 나올 수 있음
          + 명령어 위치에 있는 변수는 이제 서브커맨드 키워드로 확장될 수 없음
          + functions --handlers가 이제 정의된 순서대로 핸들러를 나열함
          + qmark-noglob 기능이 기본적으로 활성화됨

개선 사항 및 수정

     * 키보드 프로토콜: XTerm의 modifyOtherKeys와 kitty의 키보드 프로토콜 지원
     * 자체 설치 바이너리: fish를 자체 설치 가능한 바이너리로 빌드 가능
     * 명령어 히스토리: fish_should_add_to_history 함수로 히스토리에 추가할 명령어 결정 가능
     * 되돌리기 기능: 명령어 실행 후에도 히스토리가 유지됨
     * 약어 제한: 특정 명령어에만 약어 확장 가능

비추천 및 제거된 기능

     * commandline --tokenize가 commandline --tokens-expanded로 대체됨
     * bind -k 구문을 통한 키 이름 지정이 비추천됨
     * 붙여넣기 모드가 제거됨

스크립팅 개선

     * 새로운 히스토리 명령어: history append로 명령어를 실행하지 않고 히스토리에 추가 가능
     * 새로운 리다이렉션: `

        Hacker News 의견

     * Fish 4.0의 가장 흥미로운 점은 이제 Rust로 작성되었다는 것임
          + 테스트를 통해 눈에 띄는 차이가 있는지 확인하고 싶음
     * 사용자에게 직접적인 영향은 없을 것이라고 함
          + Fish의 핵심을 다시 작성했지만, 거의 모든 것이 동일하게 작동함
     * Fish 셸로 전환한 사람들에게 가장 큰 단점이 무엇인지 궁금함
          + 시스템에서 익숙해진 후 회사 서버 시스템에서 Bash나 Zsh를 사용해야 하는 경우
          + Bash에서 Fish로 전환할 거라면 Nushell로 전환하는 것도 고려할 만함
     * Zsh 사용자로서 Fish를 시도해보고 싶음
          + Zsh에 플러그인을 추가하여 Fish처럼 작동하게 만들고 있음
     * Homebrew를 사용하는 경우 아직 Fish가 제공되지 않음
          + 추가될 예정임
     * Fish를 여러 해 동안 사용했지만, 주로 뛰어난 자동 완성 기능 때문임
          + 간소화된 테마/프롬프트 시스템과 oh-my-fish 플러그인 관리도 좋지만 부차적임
     * Bash와 호환되지 않는 Fish의 나머지 기능들은 불편함
          + 특히 환경 변수 관리가 문제임
          + 원칙적으로는 Bash보다 더 나은 설계지만, 그리 큰 차이는 없고 사용 빈도가 낮아 매번 다시 배워야 함
          + 문서에서 설정 지침을 복사-붙여넣기할 때 불편함
     * Rust로의 마이그레이션을 위한 개발 조정이 어떻게 이루어졌는지 궁금함
          + 단일 PR(#9512)만 보임
     * Rust로 다시 작성한 후 바이너리가 얼마나 커졌는지 궁금함
     * clear-commandline는 흥미로운 기능임
          + Windows와 macOS 간의 일관성을 유지하는 데 어려움이 있음
          + Karabiner를 제대로 사용하지 못함
          + 기본 cancel-commandline 설정을 확인할 예정임
"
"https://news.hada.io/topic?id=19565","SQLite-on-the-Server에 대한 오해: 작은 규모보다 초대형(Hyper-Scale) 규모에 더 적합","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SQLite-on-the-Server에 대한 오해: 작은 규모보다 초대형(Hyper-Scale) 규모에 더 적합

     * 많은 개발자들이 서버에서 SQLite를 사용하는 것은 소규모 애플리케이션에나 어울린다고 생각
     * 그 이유는 다음과 같음:
          + 낮은 인프라 비용: 별도의 데이터베이스 서버가 필요하지 않음 (단일 파일로 운영)
          + 개발 및 테스트 용이: 동일한 DB 파일을 클라이언트와 서버에서 활용 가능
          + 관리 부담 최소화: 복잡한 설정이나 데몬 관리가 불필요
          + 높은 신뢰성: SQLite는 전 세계에서 가장 많이 배포된 DB이며, 강력한 내구성을 가짐
     * LiteFS, Litestream, rqlite, Dqlite, Bedrock 등의 도구가 SQLite에 복제(replication) 및 고가용성(HA)을 추가하여 소규모 배포에 적합하게 만들어줌

   하지만 이 글에서는 소규모가 아닌 초대형 애플리케이션(Hyper-Scale)에 적합한 SQLite의 가능성을 탐구함

기존의 대형 데이터베이스 확장 문제

     * 대형 애플리케이션은 보통 PostgreSQL, MySQL을 단일 DB로 유지하기 어려워 샤딩(Sharding)된 데이터베이스를 사용
     * 예: Cassandra, ScyllaDB, DynamoDB, Vitess(샤딩된 MySQL), Citus(샤딩된 Postgres)
     * 샤딩된 DB는 다음과 같은 장점을 가짐:
          + 데이터 파티션을 통해 배치 읽기(Batch Read) 최적화
          + 수평적 확장(Scalability) 가능
          + 고속 쓰기 성능 제공

하지만 현재의 파티셔닝 솔루션에는 다음과 같은 단점이 존재

     * 고정된 스키마(Rigid Schemas): MySQL이나 Postgres처럼 유연한 쿼리를 지원하지 않음
     * 스키마 변경이 어려움: 인덱스 추가나 관계 변경 시 운영 부담이 큼
     * 복잡한 크로스 파티션 연산: ACID 트랜잭션을 유지하기 어렵고, 두 단계 커밋(2PC) 같은 복잡한 기법 필요
     * 데이터 불일치 문제: 파티션 간 강력한 데이터 제약 조건을 적용하기 어렵고, 데이터 정합성이 깨질 가능성이 높음

SQLite 기반 하이퍼스케일 데이터베이스의 가능성

     * Cloudflare Durable Objects와 Turso는 SQLite를 기반으로 하이퍼스케일 애플리케이션을 설계하는 방식을 보여줌
     * 이들 시스템은 다음과 같은 강점을 제공함:
          + 동적 확장(Dynamic Scaling): 엔터티(Entity)별로 데이터베이스를 생성하여 인프라 복잡성을 감소
          + 무제한의 저비용 데이터베이스: 기존 샤딩처럼 데이터 파티션을 강제하지 않고, 필요할 때마다 새로운 SQLite 인스턴스를 생성 가능
          + 글로벌 분산(Global Distribution): 데이터베이스를 사용자 가까운 위치에 배치하여 성능 향상
          + 내장된 복제 및 내구성(Built-in Replication & Durability): 기존 SQLite와 달리 다중 지역에서 데이터를 복제하여 고가용성 유지
     * SQLite를 활용한 샤딩 대체 방식 (Cloudflare Durable Objects & Turso 활용)
          + 기존 샤딩 방식에서는 단일 데이터베이스 파티션에 여러 채팅 로그 저장
          + SQLite를 사용하면 각 채널별로 독립적인 SQLite 데이터베이스를 생성하여 보다 유연한 스키마 활용 가능
          + 예제 구조
               o 기존 샤딩: 채팅 로그 테이블 + 파티션 키
               o SQLite 기반: 채널별 개별 SQLite DB (채팅 로그, 참여자, 반응 정보 포함)
     * SQLite를 사용한 이 방식의 장점은 다음과 같음:
          + 로컬 ACID 트랜잭션 유지: 크로스 파티션 문제 없이 개별 DB 내에서 트랜잭션 수행 가능
          + 고성능 I/O: SQLite는 단일 파일 DB이므로, 읽기 및 쓰기 성능이 매우 뛰어남
          + SQL 확장 기능 활용 가능:
               o FTS5(Full-Text Search): 검색 성능 향상
               o JSON1: JSON 데이터 저장 및 쿼리 지원
               o R*Tree, SpatiaLite: 공간 데이터 활용 가능
          + SQL 마이그레이션 지원: Prisma, Drizzle 같은 기존 마이그레이션 도구와 호환 가능
          + 느린(Lazy) 스키마 마이그레이션 지원:
               o 마이그레이션 실행이 즉시 필요하지 않고, SQLite 인스턴스를 열 때 가벼운 마이그레이션을 수행하는 방식 사용 가능

서버에서 SQLite를 사용할 때의 한계점

     * 오픈소스, 자체 호스팅 가능한 솔루션 부족
     * 크로스 데이터베이스 쿼리 미지원 → 분석을 위해서는 별도의 데이터 레이크 필요
     * 제한된 데이터베이스 툴링 (SQL 브라우저, ETL 파이프라인, 모니터링, 백업)
          + StarbaseDB가 Cloudflare Durable Objects + SQLite 기반으로 이 문제 해결 중
     * 통합된 표준 프로토콜 부족
          + PostgreSQL, MySQL, Cassandra는 표준화된 프로토콜을 사용하지만, SQLite 서버는 아직 표준화된 네트워크 프로토콜이 부족
     * 하이퍼스케일에서 SQLite를 사용한 대규모 사례 부족
          + Cassandra, DynamoDB 같은 사례 연구가 부족하지만, 시간이 지나면서 변화할 가능성이 있음

결론: SQLite는 단순한 로컬 DB가 아닌, 초대형 애플리케이션에서도 강력한 옵션

     * SQLite는 단순한 소규모 프로젝트용 DB가 아니라, 초대형 애플리케이션에서도 기존 샤딩 방식을 대체할 수 있는 강력한 도구
     * Cloudflare Durable Objects & Turso를 활용하면, 데이터베이스를 엔터티 단위로 분할하여 SQL의 강력한 기능과 ACID 트랜잭션을 유지하면서 확장 가능
     * 전통적인 샤딩된 데이터베이스보다 더 유연하고 관리가 쉬운 대안으로 자리 잡을 가능성이 높음

   어떤 용감한 사람이 많은 요청을 받아내는 초대형 규모에 기꺼이 sqlite를 쓸지...

        Hacker News 의견

     * 한 사용자가 SQL로 커스텀 데이터베이스를 교체하려고 고민 중임
          + Sqlite3는 단일 서버에서 실행되기 때문에 후보로 고려됨
          + 데이터베이스는 주로 읽기 작업이 많아 Sqlite3가 유리함
          + 커스텀 데이터베이스는 특정 작업에서 매우 빠르지만 복잡한 결정임
          + 벤치마크 테스트를 통해 Sqlite3와 Postgresql을 비교함
          + Sqlite3가 모든 작업에서 Postgresql보다 약 두 배 빠름
          + 커스텀 데이터베이스는 단일 레코드 접근에서 Sqlite3보다 100~1,000배 빠름
     * 한 사용자는 로컬 우선 웹 앱을 개발 중이며 SQLite가 적합하다고 생각함
          + SQLite 데이터베이스 상태를 클라우드 서비스로 쉽게 동기화하는 방법을 원함
          + Turso와 SQLite Cloud가 유망한 옵션으로 보임
          + 사용자가 S3 스토리지로 푸시할 수 있는 간단한 접근법을 고려 중임
     * SQLite-Per-Partition의 이점에 대해 논의함
          + 글로벌 테이블이 필요한 상황에서는 한계가 있음
          + SQLite를 사용한 다양한 프로젝트 경험을 공유함
     * 다중 사용자 환경에서 SQLite는 MVCC 부족으로 인해 어려움을 겪음
          + MVCC를 추가하는 sqlite 호환 구현 및 확장에 대해 궁금해함
     * Ruby on Rails의 8.0 릴리스에서 SQLite 지원을 확장함
          + 캐시 및 작업 큐 구성 요소를 대체하고 일반적인 웹 앱에 적합하게 만듦
     * Vitess나 Citus에 익숙하지 않은 사용자가 기사 내용을 이해하기 어려워함
          + Sharded Sqlite와 Sharded Postgres의 차이점에 대해 궁금해함
     * 한 사용자는 VPS 호스팅을 원하지 않아 SQLite를 사용한 웹 페이지를 만듦
          + 데이터베이스를 사용자의 장치로 다운로드하여 사용함
     * Ubiquiti 컨트롤러를 설정하는 데 어려움을 겪은 사용자가 SQLite 사용을 제안함
          + MongoDB 대신 SQLite를 사용하면 더 나은 경험을 제공할 수 있다고 생각함
     * Apple이 2022년 기준으로 약 300,000개의 Cassandra/ScyllaDB 인스턴스를 운영함
          + DB-per-tenant 접근 방식이 더 나은 방향으로 나아가고 있다고 평가함
     * TDLib(텔레그램 데이터베이스 라이브러리)가 SQLite를 사용함
          + 각 TDLib 인스턴스가 24,000개 이상의 활성 봇을 동시에 처리함
"
"https://news.hada.io/topic?id=19457","NSF의 Platforms for Wireless Experimentation 감독자 전원 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         NSF의 Platforms for Wireless Experimentation 감독자 전원 사임

     * 미국 국립과학재단(NSF)에서 Platforms for Wireless Experimentation (PAWR) 프로젝트를 관리하던 모든 담당자가 떠남
     * PAWR 프로그램은 무선 네트워크 테스트베드 환경을 제공하여 모바일 및 셀룰러 네트워크 발전을 지원하는 역할을 수행함
     * 테스트베드는 뉴욕 할렘, 유타 솔트레이크시티, 아이오와 에임스, 노스캐롤라이나 캐리에 위치함
     * 프로그램의 주요 목표 중 하나는 미국이 무선 기술 개발 및 관련 인력 양성에서 경쟁력을 유지하는 것임

프로그램 지속 가능성에 대한 우려

     * 일부 PAWR 계약이 여전히 활성 상태이며, 일부 플랫폼(작성자의 플랫폼 포함)은 PAWR 외부 자금 지원을 받고 있음
     * 그러나 관리팀의 사임으로 제도적 지식이 손실되었으며, 이는 프로그램 운영에 큰 타격을 줄 것으로 예상됨
     * 이러한 변화가 ""효율적""이라고 보기 어렵다는 의견

        Hacker News 의견

     * 많은 프로그램이 과학자가 아니라면 이해하기 어려운 이유로 운영됨
          + NSF 프로그램 매니저는 종종 학계에서 잠시 나와 전문가로서 다양한 업무를 수행함
          + 이로 인해 그들은 종종 수습 기간에 있음
          + 이는 주제에 대한 깊은 전문 지식을 가진 사람을 고용하는 유일한 방법임
          + 트럼프 행정부는 NSF의 많은 수습 직원을 그들이 무엇을 하는지 또는 왜 하는지에 대한 고려 없이 해고함
          + 이는 효율성 평가가 아닌 무작위적인 행동이었음
          + 이러한 결정들로 인해 미국의 과학은 혼란스럽게 분열될 것임
     * National Science Foundation은 Google의 원래 연구를 지원했음
          + 이 연구는 Stanford 교수 Hector Garcia-Molina와 Terry Winograd에게 Digital Library Initiative 보조금을 제공함으로써 이루어짐
          + 이는 Google과 같은 가치 있는 회사를 탄생시켰음
          + 기본 연구는 벤처 캐피탈 투자와 같으며, 많은 실패가 있지만 성공은 모든 사람에게 큰 이익을 줌
          + NSF와 같은 기관이 존재하는 이유는 순수 시장에서는 이러한 연구가 충분히 투자되지 않기 때문임
     * 시스템을 이해하지 못하는 사람들이 시스템을 이해하는 척하며 모든 것을 망가뜨리는 것처럼 보임
          + 이는 ""Character Limit""와 같지만 Twitter 대신 연방 정부를 대입한 것처럼 보임
     * 앞으로 4년 동안 연방 조직이 온전하게 유지될 것이라고 기대하지 않음
          + 연방 직원으로 일하는 것을 배제함
     * 중국과의 무선 기술 경쟁에 대한 흥미로운 접근 방식임
          + 연구 개발에서 중국보다 경쟁 우위를 갖는 것이 중요하다고 생각했음
     * Elon이 19세 범죄자를 고용해 기관의 설명을 grok에 통과시켰고, 그것이 중요하지 않다는 결과가 나옴
     * 그 영역은 Huawai가 처리할 것이며, 미국은 더 이상 통신 기술 산업이 거의 없음
     * 이 행정부의 전문성과 능력을 보여주는 것을 제거하는 접근 방식과 일치함
          + 매우 편향적이고 대통령에게 복종하는 임명자들의 패턴을 따름
     * NIST는 대부분의 서비스에서 자금 지원을 받는 기관이며 새로운 기술의 허용 기준을 정의함
          + 이는 말이 되지 않음
     * 트럼프 행정부의 초기 몇 주 동안의 행동에 대해 양쪽 모두 강한 감정을 가지고 있음
          + 목표가 가치 있다고 믿든 아니든, 이 모든 것이 이루어지는 방식은 깊이 우려됨
          + 트럼프는 몇 년 안에 사라질 것이지만, 강력한 권위주의적 역할을 정당화하는 기초가 위험함
          + 목표가 수단을 정당화할 만큼 가치 있다고 믿는다면, 최악의 대통령이 같은 권력을 갖기를 원하는지 생각해 보아야 함
          + 정치인들은 권력을 쉽게 놓지 않으며, 트럼프의 선례를 그들의 행동을 정당화하는 수단으로 사용할 것임
          + 우리의 기관이 이 공격을 견딜 만큼 강력하고, 충분한 사람들이 행정부에 넘지 않을 선이 있음을 분명히 하기를 바람
"
"https://news.hada.io/topic?id=19470","$10k ISBN 시각화 Bounty 수상자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        $10k ISBN 시각화 Bounty 수상자

     * 몇 달 전, Anna의 Archive 데이터의 ISBN 공간을 가장 잘 시각화하는 사람에게 $10,000의 보상금을 제공한다고 발표함
     * 이 시각화는 이미 보관된 파일과 보관되지 않은 파일을 보여주며, ISBN을 보유한 도서관 수를 나타내는 데이터셋을 포함함
     * 많은 사람들이 참여하여 창의적인 아이디어를 제시함. 이 프로젝트에 대한 열정과 에너지가 인상적이었음
     * 목표는 세계에 존재하는 책들 중 이미 보관된 책의 수와 앞으로 집중해야 할 책들을 파악하는 것임

기본 시각화

     * 300kb 이하의 이미지로 인류 역사상 가장 큰 ""책 목록""을 간결하게 표현함.
     * 다양한 데이터 소스가 포함됨: All ISBNs, Anna’s Archive, Google Books, Internet Archive 등.

도전 과제 및 수상자

     * $6,000의 1등 상, $3,000의 2등 상, $1,000의 3등 상을 제공하기로 함. 많은 참여로 인해 3등 상을 네 명에게 각각 $500씩 수여하기로 결정함.
     * 1등 $6,000: phiresky - 유연한 시각화 옵션과 빠르고 매끄러운 구현이 돋보임.
     * 2등 $3,000: hypha - 매크로 수준의 시각화가 인상적이며, 사용자 친화적인 UI를 제공함.
     * 3등 $500 #1: maxlion - 다양한 뷰, 특히 비교 및 출판사 뷰가 인상적임.
     * 3등 $500 #2: abetusk - 비교 기능이 뛰어남.
     * 3등 $500 #3: conundrumer0 - 유연성이 뛰어난 시각화 도구로 인상적임.
     * 3등 $500 #4: charelf - 간단하지만 효과적인 기능을 제공함.

주목할 만한 아이디어

     * BWV_1011: 희귀성을 위한 고층 빌딩
     * robingchan: 실시간 통계
     * reguster: 주석 및 실시간 통계
     * orangereporter: 독특한 지도 뷰와 필터
     * joe.davis: 멋진 기본 색상 스킴과 히트맵
     * timharding: 데이터셋의 빠른 비교를 위한 쉬운 전환
     * j1618: 예쁜 라벨
     * immartian: 책 수를 표시하는 스케일 바
     * backrndsource: DJ처럼 데이터셋을 비교할 수 있는 많은 슬라이더

결론

     * 첫 번째 수상작을 메인 웹사이트에 통합할 예정이며, 다른 작품들도 고려 중임.
     * 희귀한 책을 식별, 확인, 보관하는 과정을 조직하는 방법에 대해 고민 중임.
     * 참여해 주신 모든 분들께 감사드리며, 많은 사람들이 이 프로젝트에 관심을 가져주셔서 감사함.

        Hacker News 의견

     * 최근 Hacker News에서 논의된 우승작은 기술적 결정과 그래픽 디자인 측면에서 매우 인상적임. 20억 권의 책을 책장처럼 우아하게 시각화함
     * 흥미로운 관찰을 할 수 있는 기능이 있음. 독일어 섹션 동쪽에서 Hueber Verlag 같은 출판사를 찾을 수 있음. ISBN 번호 사이에 1360000 같은 패턴이 있으며, 이는 반복적인 패턴과 많은 빈 공간을 생성함. 출판사들이 번호를 할당하는 규칙이 없는지 궁금함
     * 3위를 차지한 내 작품은 단순함과 시각화가 좋았던 것 같음. 하지만 개인적으로 아래 두 작품이 더 좋음
          + bwv-1011.github.io의 작품은 기술적으로 유사하지만 전반적으로 더 나음
          + anna.candyland.page의 작품도 좋음
     * 'Stubborn Attachments'를 검색했을 때는 잘 나왔음. 같은 책장에 Stripe Press의 다른 책들이 있음. 'Zero to One Hundred'라는 책은 Amazon에서 다른 제목으로 나옴. 아직 출판되지 않아 제목이 확정되지 않았을 수 있음. 검색 결과에 따라 책장의 같은 부분이 다르게 보임
     * 대규모 데이터셋의 시각화는 종종 ""예쁘지만"" 특별히 깨달음을 주지 않음. 이 경우에도 해당됨
     * 상위 이미지에서 디프래그 프로그램을 찾으려는 반사적인 반응이 있었음
     * 참가하는 것이 매우 재미있었음. 모든 관련자에게 축하를 보냄
     * 모든 섀도우 라이브러리에 진심으로 감사함. 당신들은 신의 일을 하고 있음
     * 우승작은 Eagle mode 파일 관리자를 연상시킴. 디렉토리를 확대하여 파일을 보고 하위 디렉토리로 계속 확대할 수 있음
     * 데이터베이스의 출처와 업데이트 빈도가 궁금함. 두 권의 자가 출판 책이 있는데, 그 중 하나는 2월 23일에, 다른 하나는 12월 24일에 출판됨. 적어도 오래된 책은 포함될 줄 알았음. 왜 포함되지 않았는지 아는 사람 있음?
          + ISBN: 9786500718836
          + ISBN: 9786501276830
"
"https://news.hada.io/topic?id=19535","HN 공개: 베를린 스왑페스트 – 전자기기 벼룩시장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN 공개: 베를린 스왑페스트 – 전자기기 벼룩시장

행사 개요

     * BERLIN SWAPFEST는 2025년 4월 19일 c-base에서 열리는 행사임.
     * 이 행사는 분기별로 열리며, 전자 제품, 컴퓨터 장비, 도구 등을 사고팔고 교환할 수 있는 자리임.
     * c-base라는 베를린의 오래된 해커 스페이스와 협력하여 개최됨.

행사 목적

     * 수리할 권리와 재사용의 정신에 맞춰, 더 이상 사용하지 않는 전자 제품, 장비, 도구 등을 좋은 주인에게 전달하는 것이 목표임.
     * 가정 실험실을 구축하거나 새로운 전자 부품이나 도구를 찾고 있다면 이 행사가 적합함.

자주 묻는 질문 (FAQ)

     * 판매 비용: 판매자는 항상 무료로 참여할 수 있음. 다만, 가져온 물품을 다시 가져가지 않을 경우 폐기 처리 보증금을 요구할 수 있음.
     * 테이블 제공: c-base에서 판매자에게 공간과 테이블을 제공함. 공간은 등록 정보에 따라 배정됨.
     * 물품 교환 방법: 물품 교환 방식에 대한 요구사항은 없음. PayPal, 암호화폐, 현금 등 자유롭게 선택 가능함. 분쟁은 판매자와 해결해야 하며, c-base 규칙 위반 시에만 팀원이 개입함.

주최 및 디자인

     * 주최: mirshko
     * 디자인: Brandon Oxendine

        Hacker News 의견

     * 미국에서는 저렴한 가격에 잉여 전자 장비가 많지만, 유럽에서는 그렇지 않음
     * 이 문제는 시장 장소가 아니라 가용 물품의 양임
     * 이 행사는 정말 멋져 보임. 다른 도시에서도 비슷한 이벤트가 있다는 것을 보니 기쁨
     * 내 차고를 정리하고 새로운 물건을 들여놓고 싶어짐
     * 정말 멋져 보임. 참여하기 위해 몇 시간 여행할 수도 있음
     * c-base에 대해 몰랐음. 유럽 전역에 비슷한 협회가 있는지 궁금함. 가입하고 싶음. 해커 정신이 멋져 보임
     * 다른 도시의 관련 이벤트? 예를 들어:
          + 미국 보스턴/뉴잉글랜드 지역 - MIT Swapfest
     * 웹사이트 디자인이 좋음. 다운로드할 수 있는 찢어진 종이들...
     * 어떤 흥미로운 물품들이 가져왔는지 후속 보도를 보고 싶음
     * 행운을 빔
     * 벼룩시장을 방문하기 위해 등록해야 한다는 것을 들어본 적이 없음
     * 훌륭한 이니셔티브임. 잘 되길 바람. 그날 베를린에 있을 수 없어 아쉬움
     * 온라인을 이용하지 않으면 이 도시에서 중고 전자제품과 장비를 구하기 어려움. 다음 행사에 등록하고 싶음
     * 예전에는 전자제품이나 컴퓨터 박람회에서 무게로 고장난 장비를 구매할 수 있었고, 집에서 수리했음
     * 이런 순간에는 물건을 쌓아두는 습관이 싫어짐. 오래된 장비를 버리지 못함
     * 회사 후원을 받아 전자 폐기물 컨테이너를 마련할 수 있음. 큰 회사들이 이런 물건을 생산하고 나중에 쓸모없게 만듦. 전자 폐기물을 회사별로 분리하여 가장 큰 ""범죄자""가 누구인지 확인할 수 있음. 많은 Fritz 박스가 있을 것임
     * 멋짐! 이 행사에 참여하기 위해 베를린으로 여행할 수도 있음
     * 독일어를 모르는 사람에게 얼마나 친절할지 궁금함. 해커스페이스 웹사이트는 독일어로만 되어 있지만, 대부분의 참석자/판매자가 영어를 할 수 있기를 바람
"
"https://news.hada.io/topic?id=19491","AI 군단은 다음에 어디를 공격할까? AI 비디오, 소셜 미디어, 그리고 헐리우드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI 군단은 다음에 어디를 공격할까? AI 비디오, 소셜 미디어, 그리고 헐리우드

     * AI 기술이 다양한 산업을 뒤흔들고 있으며, 특히 수천 개의 AI 스타트업이 등장하여 기존 기업들과 경쟁하고 있음
     * AI는 단순한 자동화 도구가 아니라, 노동을 대체하고 보완하는 범용 컴퓨팅 기술로 작용하며, 산업 전반에 걸쳐 혁신을 주도하고 있음
     * 기존 기업(Incumbent)들은 기존 시장을 방어하려 하지만, AI 스타트업은 빠르게 변화하며 기회를 모색하는 ""AI Horde""로 움직임

""AI가 할리우드를 파괴할까?"" - 진짜? 가능할까?

     * SNS에서 ""AI가 할리우드를 파괴할 것""이라는 주장이 자주 보이며, 이는 AI 비디오 생성 모델, 음성 합성, AI 음악 기술이 발전하고 있기 때문
     * 현재 AI 비디오 기술은 아직 완벽하지 않지만, 발전 속도가 매우 빠름
     * 할리우드와 AI 스타트업의 시각 차이
          + 기존 기업(Incumbent): 기존 시장을 방어하는 것이 우선이며, 새로운 기술 도입보다는 현재의 비즈니스 모델 보호에 집중
          + AI 스타트업: 빠르게 실험하고, 약한 시장을 공략하며, 필요하면 방향을 전환(pivot)함

# AI 비디오 스타트업의 주요 전략 선택지

  1. 기존 엔터테인먼트 산업과 협력할 것인가?

     * 기존 생태계와 협력하는 방식
          + AI 기반의 영화/TV 콘텐츠 제작 후 기존 스튜디오에 판매 (예: ""AI Pixar"")
          + 기존 영화/TV 스튜디오를 인수한 후 AI 기술을 통합
          + AI 기반 제작 도구를 기존 제작사에 판매
     * 기존 업계 협력의 어려움
          + 할리우드는 AI에 대한 강한 반감을 가진 이해관계자(예: 크리에이터, 노조)들이 많음
          + 기존 스튜디오들은 AI 기술 도입을 꺼릴 가능성이 높으며, AI 제작 콘텐츠를 구매하지 않을 수도 있음
          + 할리우드의 주요 의사결정권자(넷플릭스, 아마존 등)는 비교적 유연할 수 있음
     * 낙관적인 시각
          + 비즈니스 관점에서 보면, AI는 제작 비용을 절감하고 창의성을 확장할 수 있는 도구
          + AI 친화적인 소규모 제작사들이 먼저 성공을 거두고, 이후 기존 시장에도 영향을 미칠 가능성 있음

  2. 소셜 미디어 생태계를 타겟할 것인가?

     * AI 기반 콘텐츠 크리에이터
          + AI로 대량의 콘텐츠를 생성하는 새로운 유형의 크리에이터(예: AI 기반 유튜버)
     * 소셜 미디어 크리에이터용 도구 개발
          + AI 기반 영상 편집 도구, 콘텐츠 자동 생성 도구 등
          + 경쟁이 치열하지만, 거대한 시장을 타겟 가능

  3. 독립적인 새로운 플랫폼을 만들 것인가?

     * AI를 활용한 새로운 앱이나 플랫폼을 구축 (예: AI 기반 TikTok, AI 기반 ReelShort)
     * AI 기술을 활용한 새로운 형식의 미디어 개발 (예: 인터랙티브 콘텐츠, AI 게임)
     * 기존 영화/TV 제작 방식과 다른 새로운 소비 경험을 창출

# AI와 할리우드 협력 모델

  1. ""AI Pixar"" 모델

     * AI 기술을 활용한 영화/TV 콘텐츠 제작사 설립
     * 기존 스튜디오(소니, 파라마운트 등)와 협업하여 AI 영화 제작 후 판매
     * 도전 과제: 초기부터 극장급 고품질 콘텐츠를 만들어야 하며, 기술적으로 어려움

  2. AI 기반/기술 주도 스튜디오

     * 기존 영화 제작사를 인수하고 AI 기술을 접목
     * AI를 활용해 비용 절감 및 제작 효율성 향상
     * 법률, 고객 지원, 회계 등 다양한 분야에서도 유사한 시도가 진행 중

  3. AI 제작 도구 판매

     * 영화 제작 과정에서 활용할 AI 도구 개발 (예: AI 더빙, 영상 검색, 편집)
     * 도전 과제: 할리우드는 IT 기술 도입이 느리고, AI에 대한 반감이 클 가능성이 있음

# AI 기반 디지털 네이티브 미디어

     * 할리우드와 협력하지 않는다면, AI 스타트업은 소셜 미디어 및 디지털 네이티브 콘텐츠 시장을 타겟할 수 있음

  1. ""AI 코코멜론"" 모델

     * AI로 제작된 유튜브 콘텐츠 네트워크 구축
     * 기존 미디어 기업의 승인 없이 바로 소비자들에게 제공 가능
     * 도전 과제: 광고 기반 수익 모델이므로, 대규모 콘텐츠 제작이 필요

  2. 소셜 미디어 크리에이터 도구 개발

     * AI를 활용한 영상 제작, 편집, 번역 도구 제공
     * 수십억 명의 크리에이터를 타겟으로 거대한 시장 형성 가능

  3. AI 기반 새로운 플랫폼 개발

     * AI가 자동으로 영상을 생성하는 TikTok 스타일의 플랫폼
     * AI 기반 인터랙티브 콘텐츠(게임과 영화의 결합 등)
     * 도전 과제: 신규 앱의 성공 가능성 낮고, 마케팅/배급 비용이 높음

# AI 스타트업의 성공 전략

     * AI 호드는 기존 시장을 직접 공략하기도 하고, 기존 기업을 지원하는 방식으로도 성장할 수 있음
     * AI 기술이 발전하면서 기존 산업과 AI 스타트업의 관계는 점점 더 복잡해질 것
     * 성공 전략은 유연성(flexibility): 특정 모델에 집착하기보다 시장 반응을 보면서 빠르게 변화해야 함

# AI의 파급력은 할리우드만이 아니다

     * 이 논의는 단순히 할리우드에 국한되지 않음. AI는 다양한 산업에서 비슷한 패턴으로 혁신을 일으킬 것
          + 기존 시장과 협력할 것인가, 아니면 새로운 시장을 창출할 것인가?
          + 도구를 판매할 것인가, 아니면 직접 콘텐츠를 생산할 것인가?
          + 기존 기업을 인수하여 AI를 접목할 것인가, 아니면 새로운 회사를 만들 것인가?
     * 이 질문들은 법률, 마케팅, 회계, 고객 서비스 등 다양한 산업에서 유효함

결론: AI는 할리우드를 ""파괴""할까?

     * AI는 할리우드를 파괴하는 것이 아니라, 기존 시스템과 융합하면서 발전할 가능성이 큼
     * AI 기반 새로운 콘텐츠 소비 방식이 기존 영화/TV 시장과 경쟁할 것이지만, 할리우드도 AI를 적극적으로 도입하게 될 것
     * 넷플릭스와 유튜브가 공존했듯이, AI 콘텐츠와 기존 영화/TV도 공존 가능

     AI 호드는 단순히 영화/TV를 변화시키는 것이 아니라, 엔터테인먼트, 소셜 미디어, 게임 등 다양한 산업을 재편하고 있음.
"
"https://news.hada.io/topic?id=19525","OlmOCR - PDF에서 텍스트를 추출하는 오픈 소스 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OlmOCR - PDF에서 텍스트를 추출하는 오픈 소스 도구

     * PDF 및 JPG/PNG문서를 자연스러운 읽기 순서를 유지하면서 일반 텍스트로 변환하는 오픈 소스 도구
     * 대량의 문서를 빠르게 처리할 수 있도록 설계되었으며, 표, 수식, 손글씨 등을 지원함
     * 학술 논문, 기술 문서, 기타 참고 자료를 기반으로 학습됨
     * 고유한 프롬프팅 기법을 활용하여 정확도를 높이고 환각(hallucination)을 줄이는 방식 사용
     * 현재 모델은 영어 문서에 최적화되어 있으며, 다른 언어는 제대로 지원되지 않을 가능성이 높음
     * 데모 페이지에서 직접 문서를 테스트해볼 수 있음
     * 100만 페이지 변환 비용이 약 $190 USD로 경제적인 운영 가능
     * 최신 NVIDIA GPU 필요 (RTX 4090, L40S, A100, H100 테스트 완료)
     * 온라인 데모 에서 테스트 해보기 (PDF, JPG, PNG)

툴킷 오픈소스에 포함된 코드들

     * ChatGPT 4o 기반 프롬프팅 전략 (buildsilver.py) : 자연스러운 텍스트 파싱 성능을 극대화하는 기법 포함
     * 파이프라인 비교 평가 도구 (runeval.py)
     * 언어 필터링 및 SEO 스팸 제거 기능 (filter.py)
     * Qwen2-VL 및 Molmo-O 파인튜닝 코드 (train.py)
     * 대량의 PDF를 처리하는 파이프라인 (pipeline.py) : Sglang을 사용하여 수백만 개의 PDF를 처리 가능
     * Dolma 문서 뷰어 (dolmaviewer.py) : PDF에서 변환된 Dolma 형식의 문서를 시각적으로 확인 가능

   현재는 윈도우에선 돌아가지 않는군요..

   GPU 없이 동작하는 라이브러리들이 아직은 쓸모가있겠네요
"
"https://news.hada.io/topic?id=19544","CSRF 보호와 CORS를 둘다 사용하는 이유는 무엇인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CSRF 보호와 CORS를 둘다 사용하는 이유는 무엇인가요?

     * Cross-Site Request를 고민하다 보니 CSRF 보호와 CORS가 둘 다 필요하다는 것이 처음에는 이해되지 않았음. 하지만 이를 설명하려면 많은 단어가 필요함

CSRF와 CORS

     * CSRF (Cross-Site Request Forgery)
          + 과거에는 흔했지만, 현재는 대부분의 웹 프레임워크에서 기본적으로 보호 기능을 제공하여 거의 문제가 되지 않음
          + 공격 방식: 사용자가 악성 사이트에서 특정 폼을 클릭하게 만들어 크로스 사이트 요청을 전송하도록 유도함
          + 방어 방식: 요청이 타 사이트에서 유입된 것이 아닌지 확인하는 것
     * CORS (Cross-Origin Resource Sharing)
          + HTTP 스펙의 일부로, 특정 크로스 사이트 요청을 허용하는 방법을 정의함
          + 사전 요청(preflight) 및 응답 헤더를 사용하여 어떤 출처(origin)에서 요청을 보낼 수 있는지 지정함

     그렇다면 크로스 사이트 요청이 기본적으로 허용되며 CSRF 보호가 필요한 것인지, 아니면 기본적으로 차단되며 CORS가 필요하여 허용하는 것인지? 정답은 둘 다임.

기본 동작 방식

     * 동일 출처 정책(Same-origin policy)
          + 브라우저가 강제하는 보안 정책
          + 일반적으로 크로스 사이트 쓰기(Write)는 허용, 읽기(Read)는 금지
          + 예를 들어, 브라우저는 폼을 통한 POST 요청은 허용하지만, 응답을 읽을 수는 없음
     * SameSite 쿠키 정책
          + 2019년에 쿠키의 기본 동작 방식이 변경됨
          + 기존에는 크로스 사이트 요청에서도 쿠키가 항상 전송되었음
          + 새로운 SameSite 속성이 추가되었으며, 기본값이 Lax로 변경됨
          + 2025년 기준, 96%의 브라우저가 SameSite 속성을 지원, 75%가 새로운 기본값(Lax)을 지원
          + 그러나 Safari는 이를 기본값으로 적용하지 않았으며, UCBrowser는 여전히 지원하지 않음
     * 사이트(Site)와 출처(Origin)의 차이
          + 출처(Origin): 프로토콜 + 호스트명 + 포트 조합
          + 사이트(Site): 프로토콜 + 최상위 도메인 + 1 조합 (서브도메인과 포트는 무시됨)

CORS

     * CORS는 동일 출처 정책을 특정 출처(origin)에 대해 예외적으로 허용하는 방식
     * 브라우저는 요청을 보내기 전에 OPTIONS 타입의 **사전 요청(preflight request)**을 전송함
     * 서버는 응답 헤더를 통해 허용 규칙을 정의 (Access-Control-* 헤더 사용)
     * CORS가 적용되는 요청 유형:
          + fetch 및 XMLHttpRequest
          + 웹 폰트
          + WebGL 텍스처
          + canvas에서 drawImage로 그린 이미지/비디오 프레임
          + CSS shape-outside 속성에서 사용하는 이미지
     * 단, 폼 제출은 예외적으로 CORS가 적용되지 않음
          + HTML 4.0의 <form> 태그는 오래전부터 크로스 사이트 요청을 허용하고 있었음
          + 따라서 기존 서버들은 이미 CSRF 공격을 방어하도록 설계되었어야 함
          + 서버는 응답을 공유하려면 Access-Control-Allow-Origin을 설정해야 하지만, 요청 자체는 사전 요청 없이도 수락됨

     질문: SameSite 정책과 이 방식은 어떻게 일관성을 유지하는가?

CSRF 보호 방법

     * 크로스 사이트 쓰기 요청은 허용되지만 응답은 공유되지 않음
          + 대부분의 웹사이트에서는 크로스 사이트 쓰기를 허용하고 싶지 않음
     * 표준적인 CSRF 방어 방법
          + 사용자별 CSRF 토큰을 요청에 포함하여 검증
          + 방법:
               o 폼 제출: 숨은 입력 필드(hidden input)로 토큰 추가
               o JS 요청: 쿠키 또는 meta 태그에 저장한 후, 요청 헤더나 파라미터에 포함
     * JS 요청은 원래 크로스 사이트가 기본적으로 차단됨
          + 하지만 동일 사이트 요청(same-site request)에는 허용됨
          + CSRF 토큰을 포함하면 모든 요청에서 동일한 방식으로 검증 가능
     * 추가적인 보안 이점
          + 브라우저가 기본적으로 응답 읽기를 차단해야 한다는 가정에서 작동
          + Origin 헤더를 검사하는 것보다 더 보안성이 높음

     질문: 일부 프레임워크에서는 CSRF 토큰을 주기적으로 변경함. 그 이유는?

브라우저의 역할

     * 웹 보안의 핵심은 브라우저가 신뢰할 수 있는지에 달려 있음
     * 브라우저는:
          + 동일 출처 정책을 강제
          + 응답이 허용되지 않으면 읽지 않도록 차단
          + SameSite=Lax 기본값을 적용할지 결정
          + CORS를 구현하고, 안전한 사전 요청을 보냄

     우리는 사용 중인 브라우저를 신뢰해야 함.

결론

     * SameSite=Lax가 100% 브라우저에서 지원되면 보안이 더 강화되겠지만,
       현재는 여전히 크로스 사이트 POST 요청만 예외적으로 허용되는 상황
     * 따라서 개발자는 CSRF 보호를 지속적으로 고려해야 함

     ""인터넷이 점점 더 안전해지지만, 그만큼 과거와의 호환성도 점점 줄어들고 있음.""

출처

    1. Same-origin policy
    2. caniuse SameSite cookie attribute
    3. OWASP CSRF cheatsheet
    4. CORS wiki with requirements
    5. CORS spec
    6. CORS on MDN
    7. Preflight request
    8. Origin request header
    9. Origin and Site

        Hacker News 의견

     * CORS는 서버가 브라우저에게 어떤 크로스 오리진 요청이 응답을 읽을 수 있는지를 명시적으로 알려주는 메커니즘임
          + 기본적으로 브라우저는 크로스 오리진 스크립트가 응답을 읽는 것을 차단함
          + 명시적으로 허용되지 않으면 요청 도메인은 응답을 읽을 수 없음
          + 예를 들어, evil.com의 스크립트가 bank.com/transactions에 요청을 보내 피해자의 거래 내역을 읽으려 할 수 있음
          + 브라우저는 요청이 bank.com에 도달하도록 허용하지만 evil.com이 응답을 읽는 것은 차단함
     * CSRF 보호는 인증된 사용자를 대신하여 악의적인 크로스 오리진 요청이 무단으로 행동을 수행하는 것을 방지함
          + 예를 들어, evil.com의 스크립트가 bank.com에서 행동을 수행하도록 요청을 보낼 수 있음 (예: bank.com/transfer?from=victim&to=hacker로 돈을 이체)
          + bank.com의 서버 측 CSRF 보호가 이를 거부함 (아마도 요청에 비밀 CSRF 토큰이 포함되어 있지 않기 때문임)
     * CSRF 보호는 쓰기 보호에 관한 것이고, CORS는 읽기 보호에 관한 것임
     * JS로 시작된 요청은 기본적으로 크로스 사이트가 허용되지 않음
          + fetch()를 사용하여 허용된 헤더만 사용하면 크로스 사이트 요청을 시작할 수 있음
     * 이 주제에 대한 더 나은 설명이 있다고 생각함
          + 관련 블로그 링크 제공
     * 블로그 게시물의 질문에 대한 응답
          + HTML 4.0의 <form> 요소는 어떤 오리진으로도 간단한 요청을 제출할 수 있음
          + 이와 관련하여 SameSite 이니셔티브와 어떻게 일치하는지에 대한 질문이 있었음
     * 2022년에 MDN CORS 기사에 ""간단한 요청"" 용어의 출처를 명확히 하기 위해 단락을 추가했음
          + 이전에는 fetch 사양에 언급되지 않았다고만 나와 있었음
          + 2019년 브라우저의 CSRF 방지 기능이 SameSite=Lax를 지원하거나 기본값으로 설정된 경우에 대한 언급이 없었음
     * SameSite가 CORS 사전 요청과 독립적으로 추가된 것이 혼란스러움
          + 브라우저 제작자들이 모든 크로스 오리진 POST 요청에 사전 요청을 요구하지 않은 이유가 궁금함
     * csrf를 사용하지 않아도 안전하다고 생각할 수 있지만, 일부 라이브러리(예: django rest framework)는 콘텐츠 타입 헤더가 설정되면 HTML 폼을 처리할 수 있음
          + 이는 사용자의 사이트에 폼을 게시하여 사용자를 대신하여 요청을 보낼 수 있게 함
     * CSRF 토큰이 회전되는 이유에 대한 질문
          + OWASP는 이것이 더 안전하다고 하지만 이유를 잘 모르겠음
     * 복잡한 주제에 대한 흐름도를 요청함
          + 새로운 애플리케이션 플랫폼과 표준 세트를 원함
     * 이러한 것들이 쉬운 진단 추적을 지원하지 않음
          + 적절히 구성되지 않은 합법적인 사용 사례에 대한 불투명한 오류를 여러 번 경험했음
     * CORS가 등장하기 전에는 페이지 오리진이 아닌 임의의 엔드포인트에 요청을 보낼 수 있었지만 응답을 볼 수 없었던 이유를 이해하지 못함
          + 이것이 사양에 우연히 포함된 것인지, XSS를 예상하고 의도적으로 한 것인지, 아니면 주도적인 브라우저가 그렇게 했고 다른 브라우저들이 따라한 것인지 궁금함
     * CSRF 보호에 대한 혼란
          + 공격자가 goodsite.com에서 CSRF 토큰을 얻어 badsite.com에 넣고 Alice를 속여 badsite.com에서 goodsite.com으로 요청을 제출하게 하는 것을 막을 방법이 무엇인지 궁금함
"
"https://news.hada.io/topic?id=19484","제프 베조스의 Washington Post 오피니언 섹션 개편으로 인한 편집장 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             제프 베조스의 Washington Post 오피니언 섹션 개편으로 인한 편집장 사임

     * 2025년 2월 26일, 워싱턴 포스트의 소유주인 제프 베조스는 신문의 오피니언(의견) 섹션을 ‘개인 자유’와 ‘자유 시장’을 지지하는 방향으로 개편한다고 발표
     * 이러한 변화로 인해 2022년에 블룸버그 의견 섹션에서 영입된 편집자 데이비드 시플리가 사임 결정
     * 베조스는 직원들에게 보낸 메모에서 “우리는 매일 개인의 자유와 자유 시장이라는 두 가지 기둥을 지지하고 방어하는 글을 쓸 것입니다.“라고 밝혔음
     * 베조스는 다양한 관점을 제공하는 기존의 ‘op-ed’ 관행을 시대에 뒤떨어진 것으로 묘사

뉴스룸 내부 반응과 충격

     * 오피니언 섹션의 작가들과의 한 시간 동안의 회의에서 시플리는 앞으로의 방향에 대해 알지 못한다고 밝혔음
     * 시플리는 “더 넓고 다원적인 공간”을 원했지만, 베조스는 “집중된 의견 보고서”를 추구했다고 언급
     * 베조스는 메모에서 자신의 결정을 정당화하며, 미국의 성공에 있어 경제적 자유와 전반적인 자유가 큰 역할을 했다고 강조
     * 이 결정은 신문 내부에서 충격과 당혹감을 불러일으켰으며, 수석 뉴스 편집자들이 우려를 표명하자, 편집장 매트 머레이는 베조스가 뉴스 보도에 간섭할 의도가 없음을 재확인
     * 부편집장 데이비드 마라니스는 베조스가 소유하는 한 더 이상 글을 쓰지 않겠다고 밝혔음
     * 전 수석 관리 편집자 카메론 바는 링크드인에 워싱턴 포스트와의 관계를 종료한다고 발표

베조스의 새로운 접근 방식과 이전과의 차이점

     * 베조스는 첫 번째 트럼프 행정부 기간 동안 신문의 철저한 보도를 지지했으며, 이 기간 동안 워싱턴 포스트는 “어둠 속에서 민주주의는 죽는다”라는 모토를 채택했음
     * 그러나 2024년 10월, 베조스는 카말라 해리스에 대한 대통령 지지를 철회하기로 결정했으며, 이로 인해 수십만 명의 구독자들이 구독을 취소
     * 시플리는 베조스에게 새로운 접근 방식이 권력을 감시하는 워싱턴 포스트의 약속을 위반할 것이라고 전했음

어려운 상황에 처한 오피니언 편집자

     * 시플리의 재임 기간 동안 오피니언 섹션은 두 개의 퓰리처 상과 두 개의 로브 상을 수상하며 명성을 얻었음
     * 그러나 해리스 지지 철회 등 베조스의 최근 결정으로 인해 그의 입지는 크게 약화
     * 시플리는 베조스에게 새로운 방향의 오피니언 섹션을 이끌 것을 제안받았으나, 그는 이를 수락하지 않았음
     * 베조스는 메모에서 시플리를 칭찬하며, 그에게 개편된 섹션을 이끌 기회를 제공했다고 밝혔음
"
"https://news.hada.io/topic?id=19557","애플 소프트웨어 품질 위기: 프리미엄 하드웨어와 수준 이하의 소프트웨어가 만났을 때","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             애플 소프트웨어 품질 위기: 프리미엄 하드웨어와 수준 이하의 소프트웨어가 만났을 때

     * 최근 iPad Air 11"" M2 모델에서 발생하는 성능 저하와 과열 문제로 인해 Apple의 소프트웨어 품질에 대한 우려가 제기되고 있음
     * Apple의 기본 애플리케이션인 Notes와 Freeform을 사용할 때 특히 두드러지며, Apple Pencil Pro와 함께 사용 시 입력 지연과 과열 현상이 발생함
     * 필자는 강의 시작 시 새로운 노트를 만들고, 제목과 태그를 추가한 후 Apple Pencil Pro로 필기를 시작하는데, 한 페이지 정도의 필기를 마치면 iPad가 과열되고 지연 현상이 빈번해짐
     * 11월 6일에 해당 문제때문에 애플스토어 방문해서 11월 13일 하드웨어를 교체했음. 그러나 2/27부터 교체한 기기에서도 문제 발생

프리미엄 하드웨어, 고전하는 소프트웨어

     * iPad Air 11"" M2에서 기본 애플 애플리케이션 사용 시 심각한 지연 발생
     * 과열로 인해 장치를 잡기 불편하며, 장기적인 하드웨어 손상 우려
     * 애플 스토어 직원들은 하드웨어 교체를 제안했으나, 문제의 근본 원인은 소프트웨어에 있음
     * 소프트웨어 품질 저하로 인해 애플의 지원 인프라가 부적절하게 느껴짐

주목할 만한 세부 사항

     * 열 관리 실패: M2 칩이 외부 온도가 불편해지기 전에 성능을 조절해야 하지만, 열 관리 시스템이 제대로 작동하지 않음
     * 메모리 관리 문제: 성능이 점진적으로 저하되는 것은 메모리 누수 또는 Apple의 드로잉 애플리케이션에서의 부적절한 가비지 컬렉션이 문제 인것으로 보임
     * 여러 소프트웨어 업데이트가 근본적인 성능 문제를 해결하지 못하고 새로운 기능을 추가하여 시스템에 부담을 줌

""애플 세금(Apple Tax)""에 대한 재고

     * 프리미엄 가격을 지불하는 이유는 뛰어난 사용자 경험, 디자인, 생태계 통합 때문이었음
     * 소프트웨어 품질이 계속 저하되면 이러한 가치 제안이 점점 더 방어하기 어려워짐
     * 고객으로서 최소한 다음을 요구할 수 있음:
         1. 투명성: 알려진 성능 문제 인정
         2. 기본에 집중: 성능과 안정성에만 집중한 업데이트
         3. 확장된 지원: 소프트웨어 문제가 하드웨어 수명에 영향을 미칠 때 확장된 보증 고려
     * 애플 제품 사용의 즐거움이 점점 사라지고 있으며, 소프트웨어가 하드웨어 성능을 따라가지 못하고 있음
     * 애플이 사용자 경험을 우선시하는 제품을 다시 만들기를 촉구함

   10년 넘게 맥을 써왔는데, 요즘처럼 맥 소프트웨어 품질이 엉망진창이라고 느꼈던 적이 없던 것 같습니다. mediaanalysisd라는 프로세스가 캐시 파일로 몇십기가 용량 낭비하고 있고, 한/영 변환하는 커서 아이콘을 출력하는 프로세스가 몇 기가씩 램을 사용하고 있고 그러네요.
   예전 라이언이나 요세미티 시절도 최적화가 나쁘긴 했지만, 그 때는 하드웨어 사양이 훨씬 나빴으니..

   원래 애플은 구미가 당기는 하드웨어와 모든 것을 폐쇄적으로 만들어 가둬버리는 소프트웨어의 어이없는 조합이긴 했죠

   같은 앱에서 비슷한 문제를 겪으면서, 대강 아이패드 화면 밝기가 너무 밝아서 나오는 발열 문제때문에 쓰로틀링이 걸렸나보다 하면서 쓰고 있었는데.. 소프트웨어 품질 문제일지도 몰랐겠네요 🤯

        Hacker News 의견

     * 새로운 직장에서 Windows 노트북을 사용하게 되면서 Mac에 대한 불만이 줄어듦. Windows를 사용하면서 Mac 생태계의 소중함을 깨달음
     * Apple의 소프트웨어 개발 과정에 근본적인 문제가 있다고 느끼게 된 개인적인 경험을 공유함
          + 최근 macOS 버전에서 바탕화면을 오른쪽 클릭하고 '배경화면 변경'을 선택하면 새로운 설정 패널이 열림
          + '사용자 지정 색상'을 클릭하고 색상 선택 원 안에서 '색상 커서'를 몇 초간 드래그하면 커서가 불규칙하게 움직임
          + 이 문제는 색상 원 아래의 선형 슬라이더를 사용할 때도 발생함
          + 이 버그는 설정 패널의 깊은 곳에 숨겨져 있지 않으며, 바탕화면 색상을 변경하는 유일한 방법임
          + 이 문제를 OS 업데이트 후마다 확인하는 것이 취미가 되었으며, Ventura에서 새로운 설정 패널이 도입된 이후로 계속 문제가 있음
          + 피드백 어시스턴트 티켓을 작성했지만, 보고서가 사라진 것처럼 느껴짐
     * MacOS 15.3.0으로 업그레이드하면 Apple Intelligence가 자동으로 활성화되고, 15분 간격으로 보고가 켜짐
          + 사용자가 활성화 여부를 묻지 않음
          + Apple Intelligence를 비활성화한 후 15.3.1로 미니 업데이트를 하면 다시 활성화됨
          + 이는 Apple 소프트웨어 품질에 대한 나쁜 신호로 보이며, Windows 11에서 보이는 어두운 사용자 방법으로 이동하는 것 같음
     * 기능 우선순위가 최적화보다 중요시됨: 엔지니어링 자원이 기존 성능 문제를 해결하기보다는 새로운 기능에 집중됨
          + 최근 Apple에 대한 불만의 핵심을 찌르는 지점임
          + Windows XP Pro에서 OS X 10.2로 전환한 이유는 간단하고 견고한 데스크탑 경험을 원했기 때문임
          + 오래된 MacBook을 부팅하여 파일을 가져오면서 10.2의 단순함에 놀람
     * 2021-22년 Apple에서 일할 때 그들의 문제는 다른 소비자 앱 및 기기 제조 회사와 거의 비슷했음
          + 엔지니어링 문화가 끔찍하며, 특히 'Apple 정신'을 다음 세대 개발자에게 전수하는 데 관련됨
          + Apple이 향후 10년 내에 다른 회사와 구별되지 않을 것 같음
          + 사용자 테스트가 거의 없는 개발 접근 방식과 결합되어 있음
          + 기본 글꼴 크기를 한 단계 올리면 얼마나 많은 것이 깨지는지 관찰할 수 있음
          + 생일을 연도 없이 연락처에 입력하면 저장할 때 다음 날로 넘어가는 버그가 있음
          + '적지만 더 나은' 것을 원하지만, 소비자들이 이 접근 방식을 취하는 회사를 보상하지 않는 것 같음
     * Apple뿐만 아니라 모든 곳에서 소프트웨어 품질이 심각하게 저하됨
          + 기업 문화가 소프트웨어 품질을 무시하는 것이 주요 요인으로 보임
          + 많은 엔지니어가 성능, 보안, 신뢰성 같은 CS 기본 개념을 제대로 이해하지 못함
          + '시니어' 엔지니어가 작성한 코드가 리뷰를 통과해서는 안 되는 경우가 많음
          + 소프트웨어 품질이 회사의 수익에 영향을 미치지 않는 한, 경영진이 앱 로딩 시간이 20초 걸리는 것에 신경 쓰지 않음
          + 소비자들은 비대함에 무감각해졌고, 규제 기관은 주의를 기울이지 않음
     * 2013년경 사용자 경험을 우선시하는 제품을 만드는 것에 매료되어 첫 MacBook을 구입함
          + 처음 몇 년 동안 하드웨어/UI/UX 측면에서 '프리미엄' 인상을 주었지만, 2016년경 Linux로 돌아가야 했음
          + 소프트웨어 경험과 사용자 경험이 너무 나쁘고, 버그가 많으며, 자주 변경됨
          + CarPlay에서 전화가 올 때 내비게이션 지도를 볼 수 없는 기본 UX조차 고려되지 않음
          + 하드웨어는 놀라울 정도로 훌륭하지만, 지난 10년간 소프트웨어 경험이 너무 나빠서 다시 돌아가기 어렵게 만듦
     * Apple의 버그 보고에 대한 태도가 문제의 주요 부분이라고 생각함: 그들은 기본적으로 당신의 의견을 듣고 싶어하지 않음
          + 드문 버그가 눈에 띄지 않고 묻히게 됨
          + 버그 보고를 대규모로 처리하는 것이 어렵다는 것을 알지만, 수백억 달러를 잘 활용할 수 있을 것 같음
     * Apple Music이 급격히 악화됨. iTunes는 안정적이고 사용하기 쉬운 소프트웨어였지만, Apple Music은 신뢰할 수 없음
          + Spotify는 디자인과 제품 결함이 많지만 실제로 작동함
     * 품질 측면에서 업계 전반의 점진적인 하락과 관련이 있다고 생각함
          + 신뢰성, 세부 사항에 대한 주의, 정확성이 보안, 기능 추가, 경쟁사보다 시장에 빨리 나오는 것에 비해 예산의 작은 부분을 차지함
          + 스타트업 문화가 많은 엔지니어가 실력을 쌓는 용광로가 되었고, 주로 돈을 위해 업계에 들어온 새로운 인재들이 주요 요인임

   어이없는 애플앱 끝판왕은 xcode 일듯..

        Reddit 주요 댓글

  u/ubermonkey

     * 소프트웨어는 시간이 지날수록 복잡해지고, 개발자들이 전체 구조를 이해하기 어려워지면서 품질이 떨어짐.
     * Apple도 예외가 아니며, 시간이 지날수록 macOS의 안정성이 줄어든다고 주장.

  AHrubik

     * Apple의 문제는 ""enshittification""(점진적인 품질 저하)과 ""feature creep""(불필요한 기능 추가)에 있음.
     * 기업이 사용자보다 이익을 우선하면 제품의 품질이 저하됨.

  tagman375

     * Apple이 경쟁사를 따라가기 위해 불필요한 기능을 추가하면서 사용자 경험을 해치고 있음.
     * 특히 AI 기반 추천 기능과 자동 텍스트 요약 기능이 실용성이 부족하다고 지적.

  iapplexmax

     * macOS에서도 ""enshittification"" 현상이 보이며, 불필요한 기능 추가와 기존 기능 개선 부족이 문제.
     * Apple Music이 iTunes보다 퇴보했고, 시스템 데이터가 비대해지는 문제도 해결되지 않고 있다고 언급.

  King-in-Council

     * Apple은 macOS의 품질을 개선하기 위해 ""Snow Leopard"" 스타일의 최적화 중심 업데이트를 해야 한다고 주장.
     * 연간 OS 업데이트 대신 2년 주기로 품질을 향상시키는 방식이 필요함.

  trisul-108

     * Notes 앱에서 긴 손글씨 입력 시 성능이 급격히 저하되는 이유는 Apple이 전체 텍스트를 한 번에 처리하기 때문.
     * OCR(문자 인식) 기능이 활성화되면 더욱 문제가 심각해짐.

  Coolpop52

     * Freeform과 Notes 앱의 입력 지연 문제는 오랫동안 지속된 버그이며, Apple이 이를 해결할 의지가 없어 보임.
     * Apple은 하드웨어 개발에 집중하지만, 소프트웨어 품질 저하가 사용자 경험을 망치고 있음.

  FlukyS

     * Apple의 소프트웨어 품질이 저하되고 있지만, Windows는 기본 OS 품질이 낮고, Linux는 서드파티 앱 지원이 부족함.
     * macOS가 여전히 가장 완성된 경험을 제공하지만, 최근 소프트웨어 문제가 증가하고 있다고 분석.

  rudibowie

     * Apple의 소프트웨어 품질 저하는 시간의 흐름 때문이 아니라 리더십 문제라고 주장.
     * Steve Jobs가 있었던 시절에는 품질이 향상되었지만, 현재의 Craig Federighi 체제에서는 품질이 지속적으로 악화되고 있다고 비판.

  Stoppels

     * 연간 macOS 업데이트는 단순한 마케팅 전략이며, 소프트웨어 품질이 떨어지는 주된 이유는 Apple이 macOS를 iOS와 통합하면서 우선순위를 낮췄기 때문.
     * Apple은 macOS를 하드웨어 판매를 위한 부가 서비스로 취급하고 있음.

  Fine-Subject-5832

     * Apple은 최소 1년 동안 신기능 추가 없이 기존 기능을 다듬는 업데이트를 해야 한다고 주장.
     * 그렇게 하면 소비자들도 Apple이 소프트웨어 품질을 신경 쓰고 있다고 인식할 것.

  Darth_Ender_Ro

     * Apple이 Steve Jobs 시절의 완벽주의 문화를 잃어버렸다고 주장.
     * 현재는 모두가 서로를 존중하는 분위기 속에서 강력한 품질 개선이 이루어지지 않고 있다고 지적.

  Equivalent-Cut-9253

     * macOS는 여전히 경쟁 OS보다 낫지만, 최근 몇 년간 점점 덜 직관적이고 불편해지고 있음.
     * 만약 Windows가 더 나아졌거나 Linux가 더 쉽게 사용할 수 있었다면, 많은 사용자가 Apple을 떠났을 것.

  rialovessex2

     * AirDrop이 대용량 파일 전송 시 자주 실패하는 문제를 경험함.
     * iCloud 기반 사진 관리도 불안정하며, 대체 앱을 사용해야 하는 경우가 많음.

  sagarpachorkar

     * Apple은 macOS와 iOS의 기본 성능과 안정성을 점검하는 대대적인 품질 개선 프로젝트가 필요함.
     * iOS 12나 macOS Snow Leopard처럼 성능 향상에 초점을 맞춘 업데이트가 다시 필요하다고 주장.

  Opening_Sherbet8939

     * macOS Sequoia 15.3 업데이트 이후 Safari가 멈추고, 키보드 입력이 지연되며, 창 전환이 심하게 끊김.
     * MacBook Pro의 높은 가격을 고려하면 이런 소프트웨어 경험은 용납될 수 없다고 비판.
"
"https://news.hada.io/topic?id=19471","OpenAI, GPT-4.5 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenAI, GPT-4.5 공개

     * GPT-4.5는 OpenAI의 최신 모델로, 사전 훈련(pre-training)과 후속 훈련(post-training)에서 확장성을 개선한 버전임
     * 비지도 학습(unsupervised learning)의 규모를 확장하여 패턴 인식과 창의적 통찰력 강화
     * 보다 자연스러운 대화가 가능하며, 사용자 의도를 더 잘 이해하고 감성 지능(EQ)이 향상
     * 글쓰기, 프로그래밍, 문제 해결 등 다양한 작업에서 유용하게 활용 가능
     * 환각(hallucination) 발생률이 줄어들 것으로 예상
     * 연구 프리뷰 형태로 제공되어, 모델의 강점과 한계를 탐구하고 다양한 사용 사례를 수집하는 것이 목표

비지도 학습의 확장

     * AI의 발전을 위해 비지도 학습과 추론(reasoning) 의 두 가지 축을 확장함
          + 추론 강화: 복잡한 STEM 문제 해결을 위해 모델이 체계적인 사고를 할 수 있도록 훈련됨
               o OpenAI o1, OpenAI o3-mini 같은 모델이 이 접근법을 발전시킴
          + 비지도 학습 확장: 더 많은 데이터를 통해 모델의 직관과 세계 지식 정확도를 높임
     * GPT-4.5는 Microsoft Azure AI 슈퍼컴퓨터에서 훈련되었으며, 더 넓은 지식과 깊은 이해력을 갖춤
          + 이로 인해 환각 발생이 줄고 다양한 주제에서 더욱 신뢰할 수 있는 결과를 제공

GPT 패러다임의 확장

     * GPT-4.5는 이전 모델보다 뛰어난 지식을 보유함
          + 언어의 기원과 같은 역사적 질문에 대해 더 깊은 통찰을 제공
          + ""최초의 언어가 무엇인가?"" 같은 질문에 대해:
               o 단일한 최초의 언어는 존재하지 않았을 가능성이 높음
               o 아프리카에서 10만 년 이상 전에 언어가 출현했을 것으로 추정됨
               o 원시 언어(proto-languages)는 제스처, 소리, 신호 등에서 발전했을 가능성이 큼
               o 언어는 기록이 없기 때문에 정확한 기원을 알 수 없음
     * 이처럼 GPT-4.5는 언어학 및 역사 분야에서도 깊이 있는 답변을 제공할 수 있음

더 깊은 세계 지식

     * SimpleQA 평가 결과에서 GPT-4.5는 다른 모델보다 높은 정확도를 기록함
          + 정확도(Accuracy) 비교:
               o GPT-4.5: 62.5%
               o GPT-4o: 38.2%
               o OpenAI o1: 47%
               o OpenAI o3-mini: 15%
          + 환각률(Hallucination Rate) 비교 (낮을수록 좋음):
               o GPT-4.5: 37.1%
               o GPT-4o: 61.8%
               o OpenAI o1: 44%
               o OpenAI o3-mini: 80.3%
     * GPT-4.5는 사실 확인이 필요한 질문에서 더 높은 정확도를 유지하고 환각률을 낮춤

인간과의 협업을 위한 훈련

     * GPT-4.5는 인간의 요구와 의도를 더 잘 이해하도록 훈련됨
          + 사용자 의도를 더 정교하게 해석하고 자연스러운 대화가 가능함
          + 기존 모델보다 감성 지능(EQ)이 향상되어 미묘한 뉘앙스를 더 잘 이해함
          + 글쓰기, 디자인 작업에서 창의적 직관과 미적 감각이 뛰어남
     * 비교 평가(Win-rate vs GPT-4o)
          + 창의적 작업: 56.8%
          + 전문적 질문: 63.2%
          + 일상적 질문: 57.0%
     * GPT-4.5는 인간과의 협업을 자연스럽게 수행하며, 대화 속에서 사용자 의도를 보다 정확하게 파악함

향후 전망: 더 강력한 추론 능력

     * GPT-4.5는 응답 전에 논리적으로 사고하는 모델이 아님
     * OpenAI o1 및 OpenAI o3-mini 같은 추론 중심 모델과는 다른 접근 방식임
     * 미래 모델에서는 사전 훈련(pre-training)과 추론(reasoning)의 결합이 핵심이 될 것으로 전망됨

안전성 강화

     * GPT-4.5는 기존의 SFT(지도 학습 미세 조정)와 RLHF(인간 피드백 강화 학습) 를 포함한 새로운 감독 기법으로 훈련됨
     * 모델 배포 전 안전성 테스트를 수행하여 잠재적 위험을 평가함
     * 평가 결과를 담은 시스템 카드(system card) 를 공개하여 연구 및 피드백을 유도함

ChatGPT에서 GPT-4.5 사용 방법

     * 오늘부터 ChatGPT Pro 사용자는 웹, 모바일, 데스크톱에서 GPT-4.5 선택 가능
     * 다음 주 Plus 및 Team 사용자에게 제공 예정
     * 그다음 주 Enterprise 및 Edu 사용자에게 제공 예정
     * 주요 기능:
          + 최신 정보 검색 가능
          + 파일 및 이미지 업로드 지원
          + 캔버스를 활용한 글쓰기 및 코딩 작업 가능
          + 다만, 음성 모드, 동영상, 화면 공유 기능은 미지원

API에서 GPT-4.5 사용 방법

     * Chat Completions API, Assistants API, Batch API를 통해 개발자에게 제공됨
     * 주요 기능:
          + 함수 호출(Function Calling)
          + 구조화된 출력(Structured Outputs)
          + 스트리밍(Streaming)
          + 시스템 메시지(System Messages)
          + 이미지 입력을 통한 비전 기능 지원
     * 개발자 활용 사례:
          + 감성 지능과 창의성이 중요한 애플리케이션 (예: 글쓰기 도우미, 학습 코칭, 브레인스토밍)
          + 복잡한 코드 작업 (예: 다단계 코딩 워크플로우, 자동화)
     * API 제공 관련 고려 사항:
          + GPT-4.5는 연산량이 많고 비용이 높은 모델이므로 GPT-4o를 대체하지 않음
          + 장기적으로 API에서 계속 제공할지 검토 중이며, 사용자 피드백이 중요함

결론

     * GPT-4.5는 비지도 학습의 한계를 확장하는 모델로, 창의적이고 새로운 기능을 탐색할 수 있음
     * AI 기술의 새로운 가능성을 탐험하며, 사용자의 혁신적인 활용 사례를 기대함.

  Hacker News 댓글

     * GPT 4.5의 가격이 매우 높음
          + 입력: 1백만 토큰당 $75.00
          + 캐시된 입력: 1백만 토큰당 $37.50
          + 출력: 1백만 토큰당 $150.00
          + GPT 4o와 비교 시 가격 차이가 큼
          + GPT-4.5는 매우 크고 계산 집약적인 모델로, 장기적으로 API에서 제공할지 평가 중임
          + 사용자 피드백이 중요함
     * GPT-4.5 사용 소감
          + 매우 느림, 실시간 상호작용에는 적합하지 않음
          + 글쓰기 스타일이 개선됨, 더 캐주얼하고 접근 가능함
          + 책 초안 비교에서 GPT4o와 GPT4.5의 차이가 눈에 띔
     * 감정 지능(EQ)에 집중
          + ""친절한 AI 친구""로 변모하는 경향이 보임
          + Anthropic과 Grok도 이 방향으로 움직이고 있음
          + API 응답에 이러한 행동이 스며들지 않기를 바람
     * 블로그 게시물과 라이브 스트림 데모에 실망
          + 새로운 모델이 인상적이지 않음
          + OpenAI가 경쟁자들보다 앞서 나가기 어려워 보임
          + 가격이 매우 높아 놀라움
     * OpenAI와 Anthropic의 다른 접근
          + Anthropic은 단일 패러다임(추론)이 모든 사용 사례에 적합할 수 있다고 믿음
          + OpenAI는 다양한 기능을 가진 모델의 앙상블이 필요하다고 믿음
          + GPT 4.5는 크기가 커서 더 많은 사실 데이터를 저장할 수 있음
     * Kagi LLM 벤치마크에서 GPT-4.5의 성능
          + 높은 가격과 속도에도 불구하고 성능이 뛰어남
          + 일부 작업에서는 여전히 부족함
     * API를 통한 GPT-4.5 사용 방법
          + uvx 도구를 사용하여 실행 가능
          + API 키 설정 필요
     * 코딩 성능 비교
          + ChatGPT 4.5가 ChatGPT 4o보다 코딩에서 약간 더 나음
          + Anthropic Claude 3.7이 더 나은 성능을 보임
     * OpenAI의 시도에 대한 이해
          + GPT 4.5는 사전 훈련 확장 법칙을 탐구하기 위한 중요한 시도였음
          + 과학에 기여하는 선물임

   GPT-4.5의 가격 (1M 토큰당)
     * 입력당 $75
     * 캐시된 입력 $37.50
     * 출력당 $150
       4o 랑 가격 비교해보면 입력은 30배, 출력은 15배 비싸네요

   하지만 성능은 그정도로 좋아지지는 않아서 불만이 많은듯

   Cursor 에서 GPT-4.5를 사용해보면 다른 모델이 실패하는 케이스에서도 효율적으로 작동한다고 합니다.
   물론 너무 비싸서 사용량 기반으로 돈을 내야 합니다. ""복잡한 코딩 시키다 파산하겠네"" 라는 반응이..
   https://x.com/cursor_ai/status/1895210110714290302

   Claude Code 가격을 보면서도 비슷한 생각이 들었던것같네요. 월급쟁이라면 시급을 넘으면 파산이 아닐까요 😵‍💫

   다행인것 같기도하네요. 모델 가격에 따라 우리 몸값도...;;;
"
"https://news.hada.io/topic?id=19495","AI 탑재한 요약 전문 녹음기 플라우드 노트핀 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AI 탑재한 요약 전문 녹음기 플라우드 노트핀 출시

   플라우드 노트핀은 AI 기반의 웨어러블 음성 녹음기로 녹음을 자동으로 텍스트화하고 요약할 수 있음. 다국적 언어 지원 등 다양한 기능을 제공하여 회의, 강의, 인터뷰 등 다양한 상황에서 사용 가능. 전작 플라우드 노트와 함께 전년 판매액 1000억을 달성하였음. 이번 달에 한국에서 출시함.
    1. 적재적소의 AI

     * 녹음된 음성을 목소리별로 구분하고, 정확하게 텍스트로 기록해주는 Whisper AI
     * 해당 텍스트를 핵심 요약, 요점 정리, 마인드맵 구성, ASK AI까지 생성형 기능을 해주는 GPT-4o / Clude 3.5
     * 1개의 AI를 사용하면 각각 기능에 대한 전문성이 떨어지나, 3개의 AI를 사용하여 적재적소의 기능을 보여줌

    2. 하드웨어

     * 25g의 500원짜리 동전 3개 정도의 무게와 컴팩트한 사이즈
     * 초정밀 알루미늄 CNC 가공에서 나오는 유려한 마감
     * 다양한 악세사리들과 착용 가능한 편의성
     * 컴팩트한 사이즈에 들어있는 고용량의 배터리와 메모리

    3. 녹음 텍스트화 및 요약 기능

     * AI 기반의 선명한 음성 녹음 및 필사 기능, 자동 요약 제공, 업무 부담을 대폭 줄이고 생산성을 향상시킴
     * 112개 언어를 지원하여 높은 정확도의 필사를 제공
     * 새롭게 업데이트된 ""All-day"" 녹음 기능과 스마트 ""개요"" 기능을 통해 최대 20시간 분량의 녹음을 구간별로 미리보기하고, 선택적으로 필사 및 요약할 수 있음

   4. AI 기능
     * AI 검색(Ask AI): 이전 녹음이나 요약본에서 원하는 정보를 찾아 할 일 목록, 핵심 지표, 결론 등으로 추가 프롬프트 작성 가능
     * 맞춤형 템플릿: 필요에 맞게 템플릿을 직접 설정할 수 있음

   광고네요.. 신고 기능도 있어야할거 같아요

   너무 광고같아여...

   그냥 광고네요
"
"https://news.hada.io/topic?id=19556","2025년을 위한 필수 React 라이브러리들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2025년을 위한 필수 React 라이브러리들

     * 리액트는 오랜 기간 사용되면서 방대한 라이브러리 생태계가 형성됨
     * 다른 언어/프레임워크에서 온 개발자들은 리액트 애플리케이션을 구축하는 데 필요한 라이브러리 선택에 어려움을 겪을 수 있음
     * 리액트의 핵심은 컴포넌트 기반 UI를 구축하는 기능 중심의 라이브러리
          + 함수형 컴포넌트와 리액트 훅(React Hooks) 을 활용해 로컬 상태 관리, 부수 효과 처리, 성능 최적화 가능
          + 궁극적으로 컴포넌트와 후크 모두 함수를 활용하여 UI를 구성하는 방식으로 작동함
     * 2025년을 위한 대규모 애플리케이션을 개발하는 데 필요한 필수 리액트 라이브러리를 소개함

React 프로젝트 시작하기

     * Vite : React 프로젝트를 설정하는 가장 인기 있는 도구. 빠른 빌드 속도와 간편한 TypeScript 지원 제공
     * Next.js :
          + React 기반 메타 프레임워크로 서버사이드 렌더링(SSR) 및 정적 사이트 생성(SSG) 지원
          + 파일 기반 라우팅, API 라우트, React Server Components(RSC) 등 다양한 기능 제공
     * TanStack Start (Beta) : React 기반의 새로운 프레임워크로, React Server Components 지원 예정. Next.js의 대안으로 개발 중
     * React Router : React의 클라이언트 사이드 라우팅을 위한 대표적인 라이브러리. 현재 Remix의 영향을 받아 변화 중
     * Astro : 프레임워크에 구애받지 않는 정적 사이트 생성 도구. React와 함께 사용할 수 있으며, 불필요한 JavaScript를 최소화하여 성능 최적화 가능
     * Nitro , Redwood , Waku
          + React의 새로운 프레임워크 및 툴링
          + Waku는 Zustand 개발자가 만든 React Server Components 지원 라이브러리
     * 추천:
          + 클라이언트 사이드 렌더링(CSR): Vite
          + 서버 사이드 렌더링(SSR): Next.js
          + 정적 사이트 생성(SSG): Astro

React 패키지 매니저

     * npm : Node.js 기본 패키지 매니저이자 가장 널리 사용됨
     * Yarn : 더 나은 의존성 관리 및 속도 개선 제공
     * pnpm : 성능이 뛰어나지만 상대적으로 덜 보편적
     * Turborepo : Monorepo(모노레포) 관리 도구로, 여러 React 프로젝트를 효과적으로 관리 가능
     * 추천:
          + 일반적인 패키지 관리: npm
          + 성능 최적화 필요 시: pnpm
          + 모노레포 필요 시: Turborepo

React 상태 관리

     * useState, useReducer : React 기본 내장 훅으로 컴포넌트 내 상태 관리
     * useContext : 전역 상태 관리를 위한 React 기본 내장 훅
     * Zustand : 간단한 API로 전역 상태를 관리할 수 있는 라이브러리. Redux보다 사용이 간편하여 최근 많은 개발자들이 선호
     * Redux : 오랜 기간 사용된 상태 관리 라이브러리. 최근에는 Redux Toolkit이 표준으로 자리 잡음
     * XState, Zag : 상태 머신 기반 상태 관리 라이브러리
     * Mobx , Jotai , Nano Stores : Zustand, Redux 대안으로 사용 가능한 상태 관리 라이브러리
     * 추천:
          + 로컬 상태: useState / useReducer
          + 작은 전역 상태: useContext
          + 큰 전역 상태: Zustand

React 데이터 패칭

     * TanStack Query : REST 및 GraphQL API 요청을 위한 데이터 패칭 라이브러리. 캐싱, 동기화, 옵티미스틱 업데이트 등의 기능 제공
     * Apollo Client : GraphQL API에 최적화된 데이터 관리 라이브러리
     * urql : 경량 GraphQL 클라이언트
     * Relay : Facebook이 개발한 고성능 GraphQL 클라이언트
     * RTK Query : Redux 환경에서 데이터 패칭을 쉽게 할 수 있도록 돕는 도구
     * tRPC : TypeScript 기반의 백엔드-프론트엔드 간 타입 안전 API 통신을 제공. TanStack Query와 함께 사용 가능
     * 추천:
          + 서버 사이드 데이터 패칭: React Server Components / Functions (지원되는 메타 프레임워크 사용 시)
          + 클라이언트 사이드 데이터 패칭: TanStack Query (REST, GraphQL)
          + GraphQL 전용: Apollo Client
          + 타입 안전한 API 통신: tRPC

React 라우팅

     * React Router : 클라이언트 사이드 라우팅을 위한 가장 널리 사용되는 라이브러리
     * TanStack Router (Beta) : TypeScript 지원이 뛰어난 새로운 라우팅 라이브러리
     * 추천:
          + 서버 사이드 라우팅: Next.js
          + 클라이언트 사이드 라우팅: React Router (가장 많이 사용됨), TanStack Router (최신 트렌드)

React의 CSS 스타일링

     * Tailwind CSS
          + Utility-First-CSS 방식으로, 미리 정의된 클래스를 활용해 빠르게 스타일링 가능
          + 디자인 시스템을 일관되게 유지할 수 있지만, 클래스 네이밍이 복잡해질 수 있음
     * CSS Modules
          + 컴포넌트별로 스타일을 모듈화하여 전역 스타일 충돌 방지 가능
          + CSS-in-CSS 접근법 중 가장 널리 사용됨
     * styled-components
          + JavaScript 코드 내에서 CSS를 정의하는 CSS-in-JS 방식
          + 성능 및 서버 사이드 환경에서의 문제로 최근 인기가 줄어드는 추세
     * Emotion : styled-components와 유사한 CSS-in-JS 라이브러리로, 성능 최적화 및 유틸리티 클래스 활용 가능
     * clsx : 조건부 className 설정을 쉽게 해주는 유틸리티 라이브러리
     * StyleX : Facebook이 개발한 새로운 CSS-in-JS 솔루션. 최적화된 컴파일 방식으로 유틸리티-퍼스트 스타일링 제공
     * 기타 CSS 라이브러리 : PandaCSS , linaria , vanilla-extract , nanocss , UnoCSS , Styled JSX
     * 추천:
          + 가장 인기 있는 방식: Tailwind CSS
          + 스타일 모듈화 필요 시: CSS Modules
          + 최신 CSS-in-JS 솔루션: StyleX

React UI 라이브러리

     * Material UI (MUI) : 프리랜서 프로젝트에서 여전히 많이 사용되는 UI 라이브러리. Google의 Material Design 시스템 기반
     * Mantine UI : 2022년 가장 인기 있었던 UI 라이브러리. 다양한 기능과 커스텀 스타일 지원
     * Chakra UI : 2021년 가장 인기 있었던 UI 라이브러리. 접근성과 스타일링 편의성이 뛰어남
     * Hero UI : 이전 Next UI에서 변경된 UI 라이브러리
     * Park UI : Ark UI 기반 UI 라이브러리
     * PrimeReact : 다양한 프리빌트(Prebuilt) UI 컴포넌트 제공
     * 헤드리스 UI 라이브러리
          + shadcn/ui (2023-2024년 가장 인기 있음)
          + Radix (shadcn/ui의 기반)
          + React Aria
          + Ark UI (Chakra UI 제작팀 개발)
          + Ariakit
          + Daisy UI
          + Headless UI
          + Tailwind UI (유료)
     * 사용 빈도가 줄어든 UI 라이브러리
          + Ant Design
          + Semantic UI
          + React Bootstrap
          + Reactstrap
     * 추천:
          + 스타일 포함 UI 라이브러리: MUI, Mantine, Chakra UI
          + 스타일 미포함 헤드리스 UI 라이브러리: shadcn/ui, Radix

React 애니메이션 라이브러리

     * Motion : 가장 추천되는 애니메이션 라이브러리 (구 Framer Motion)
     * react-spring : 물리 기반 애니메이션 구현 가능

React 차트 및 데이터 시각화

     * D3.js : 저수준 차트 라이브러리로 강력하지만 학습 곡선이 가파름
     * Recharts : 사용하기 쉬운 차트 라이브러리. 기본적인 커스터마이징 가능
     * visx : D3와 유사한 방식으로 동작하지만 React 친화적
     * 기타 차트 라이브러리 : Victory , nivo , react-chartjs
     * 추천:
          + 간편한 차트: Recharts
          + D3 스타일 커스터마이징: visx

React 폼 라이브러리

     * React Hook Form : 가장 널리 사용되는 React 폼 라이브러리. zod과 함께 사용하여 강력한 폼 검증 가능
     * Conform : 풀스택 애플리케이션과의 통합이 용이한 신흥 폼 라이브러리
     * Formik , React Final Form : 전통적인 React 폼 라이브러리로, 여전히 일부 프로젝트에서 사용됨
     * 추천:
          + 폼 라이브러리 선택 시 React Hook Form + zod 사용

React 코드 스타일 및 포맷팅

     * ESLint : 코드 스타일 유지를 위한 린터. 인기 있는 스타일 가이드를 적용할 수 있음
     * Prettier : 일관된 코드 포맷팅을 제공하는 도구. ESLint와 함께 사용 가능
     * Biome : Rust 기반의 빠른 올인원 린터 및 코드 포맷터 (구 Rome). ESLint 및 Prettier의 대안으로 주목받는 중
     * 추천:
          + ESLint + Prettier 조합 사용
          + 새로운 대안으로 Biome 고려

React 인증(Authentication)

     * Lucia : OAuth 및 암호화 기능을 지원하는 인증 솔루션
     * Better Auth : 최신 인증 서비스 중 하나
     * Auth.js : Next.js 및 다양한 프레임워크에서 쉽게 사용할 수 있는 인증 라이브러리
     * 유료 인증 서비스 : Clerk , Kinde
     * Firebase/Supabase 기반 인증 : Supabase Auth
     * 기타 인증 서비스 : AuthKit , Auth0 , AWS Cognito
     * 추천:
          + 손쉬운 인증: Auth.js, Supabase Auth
          + OAuth 및 보안 기능 강화: Lucia, Better Auth

React 백엔드

     * Next.js : 서버사이드 렌더링(SSR) 및 API 라우트 제공
     * Astro : 정적 웹사이트 생성에 적합한 프레임워크
     * tRPC : 타입 안전한 API 통신을 위한 솔루션
     * Hono : 초경량 서버 프레임워크로, React와 함께 사용 가능
     * 전통적인 Node.js 백엔드 프레임워크
          + Express : 가장 인기 있는 Node.js 백엔드 프레임워크
          + Fastify : 고성능 Node.js 프레임워크
          + NestJS : 대규모 애플리케이션에 적합
          + Elysia : 최신 TypeScript 기반 백엔드
     * 기타 백엔드 프레임워크
          + Koa
          + Hapi
     * 추천:
          + 풀스택 React 개발: Next.js, tRPC
          + 전통적인 백엔드 필요 시: Express, Fastify

React 데이터베이스 및 ORM

     * Prisma : 가장 인기 있는 TypeScript 기반 ORM
     * Drizzle ORM : Prisma의 대안으로 주목받는 ORM
     * 기타 ORM 및 쿼리 빌더 : Kysely , database-js : PlanetScale 전용
     * 서버리스 데이터베이스
          + PlanetScale (유료)
          + Neon PostgreSQL 서버리스
          + Xata
          + Turso
     * Firebase/Supabase 기반 데이터베이스
          + Supabase PostgreSQL 기반, 자체 호스팅 가능
          + Firebase Firestore
     * 추천:
          + ORM 필요 시: Prisma, Drizzle ORM
          + 서버리스 데이터베이스: PlanetScale, Neon

React 호스팅

     * 자체 관리형 서버 : Digital Ocean , Hetzner
     * 완전 관리형 호스팅 :
          + Vercel : Next.js 프로젝트에 최적화
          + Coolify : 중간 단계 솔루션
     * 기타 호스팅 플랫폼
          + Render , Fly.io , Railway
          + CloudFlare , AWS , Azure , Google Cloud
     * 추천:
          + Next.js 프로젝트: Vercel
          + 자체 서버 관리 필요 시: Digital Ocean, Hetzner

React 테스트 라이브러리

     * Vitest : Jest보다 빠르고 최신 React 프로젝트에 최적화된 테스트 프레임워크. 테스트 실행, 어서션, 목(mocking) 기능 제공
     * Jest : 오래된 프로젝트에서도 많이 사용되는 테스트 프레임워크
     * React Testing Library (RTL)
          + React 컴포넌트 테스트를 위한 대표적인 라이브러리
          + HTML 요소 렌더링 및 이벤트 시뮬레이션 기능 제공
     * Playwright
          + 가장 추천되는 E2E(End-to-End) 테스트 도구
          + 다양한 브라우저 및 디바이스 환경에서 자동화 테스트 가능
     * Cypress : 프론트엔드 E2E 테스트 도구로, Playwright와 경쟁 중
     * 추천:
          + 유닛/통합 테스트: Vitest + React Testing Library
          + E2E 테스트: Playwright (또는 Cypress)
          + 스냅샷 테스트 옵션: Vitest

React와 불변 데이터 구조

     * Immer :
          + 불변 데이터 구조를 쉽게 다룰 수 있도록 돕는 라이브러리
          + 복잡한 상태 변경 로직을 간결하게 구현 가능

React 다국어(i18n) 지원

     * FormatJS : 날짜, 숫자, 통화 등의 포맷팅 포함한 강력한 i18n 라이브러리
     * react-i18next : React에서 가장 널리 사용되는 다국어 지원 라이브러리
     * Lingui : 최소한의 설정으로 강력한 다국어 지원 제공
     * next-intl : Next.js 프로젝트를 위한 다국어 라이브러리
     * 추천:
          + 가장 보편적인 선택: react-i18next
          + Next.js 기반 프로젝트: next-intl

React 리치 텍스트 에디터

     * TipTap : 확장성이 뛰어난 최신 리치 텍스트 에디터
     * Plate : Slate.js 기반의 강력한 에디터 솔루션
     * Lexical : Facebook이 만든 경량 리치 텍스트 에디터
     * Slate : 커스텀 가능한 리치 텍스트 에디터 프레임워크
     * 추천:
          + 유연한 확장성 필요 시: TipTap
          + 경량 & 최적화된 에디터: Lexical

React 결제 시스템

     * PayPal : 가장 널리 사용되는 결제 시스템 중 하나
     * Stripe : 개발 친화적인 결제 API 제공
          + React Stripe Elements
          + Stripe Checkout
     * 기타 결제 솔루션
          + Braintree (PayPal 소유)
          + Lemon Squeezy (Stripe 기반)
     * 추천:
          + 간편한 결제 솔루션: Stripe
          + PayPal 지원 필요 시: PayPal 또는 Braintree

React에서 시간 및 날짜 처리

     * date-fns : 가벼우면서도 다양한 날짜/시간 함수 제공
     * Day.js : Moment.js의 가벼운 대안으로, API가 유사함
     * 추천:
          + 가장 가벼운 라이브러리: Day.js
          + 기능이 풍부한 라이브러리: date-fns

React 데스크톱 애플리케이션

     * Electron :
          + 크로스 플랫폼 데스크톱 애플리케이션 개발 프레임워크
          + 웹 기술(HTML, CSS, JS)로 Windows, macOS, Linux 애플리케이션 제작 가능
     * Tauri
          + Electron보다 가벼운 대안으로 Rust 기반 백엔드 사용
          + 보안성과 성능이 중요한 프로젝트에 적합
     * 추천:
          + 웹 기술을 그대로 활용: Electron
          + 경량 & 보안 우선: Tauri

React 파일 업로드

     * react-dropzone : 파일 업로드를 위한 React 훅 기반 라이브러리. 드래그 앤 드롭 기능 지원

React 이메일 렌더링

     * react-email (추천) : React 컴포넌트를 활용한 반응형 HTML 이메일 제작 가능
     * mjml : HTML 이메일을 간편하게 생성하는 마크업 언어
     * Mailing : 개발자가 쉽게 이메일을 생성하고 관리할 수 있도록 지원
     * jsx-email : JSX 문법을 활용한 이메일 템플릿 제작 가능
     * 이메일 서비스 제공업체 :
          + Resend
          + Postmark
          + SendGrid
          + Mailgun
     * 추천:
          + React 스타일로 이메일 제작: react-email
          + 이메일 서비스 필요 시: SendGrid, Mailgun

React 드래그 앤 드롭

     * @hello-pangea/dnd : react-beautiful-dnd의 후속 프로젝트로 간편한 사용법 제공
     * dnd kit : 높은 유연성과 커스터마이징 가능하지만 학습 곡선이 있음
     * 추천:
          + 쉬운 드래그 앤 드롭: @hello-pangea/dnd
          + 커스터마이징 필요 시: dnd kit

React 모바일 개발

     * React Native : React 기반의 크로스 플랫폼 모바일 애플리케이션 개발 프레임워크
     * Expo : React Native 개발을 더욱 쉽게 만들어주는 툴체인
     * Tamagui : 웹과 모바일에서 동일한 UI 컴포넌트를 사용할 수 있도록 지원
     * 추천:
          + 모바일 개발: React Native + Expo
          + 웹과 모바일 UI 통합: Tamagui

React VR/AR 개발

     * react-three-fiber : Three.js 기반 3D 렌더링 라이브러리. VR 지원 사례 존재
     * react-360 (아카이브됨) : 페이스북이 개발한 VR/AR 프레임워크 (현재 유지보수 중단)
     * aframe-react (더 이상 유지보수 안됨) : A-Frame을 React에서 사용할 수 있도록 지원하는 라이브러리
     * 추천:
          + 최신 React 3D/VR 라이브러리: react-three-fiber

React 디자인 프로토타이핑

     * Figma : UI/UX 디자인 및 프로토타이핑을 위한 가장 인기 있는 툴
     * Excalidraw : 손으로 그린 듯한 와이어프레임 및 다이어그램 제작 가능
     * tldraw : Excalidraw과 유사한 스케치 도구
     * 추천:
          + UI/UX 디자인: Figma
          + 간단한 와이어프레임: Excalidraw

React 컴포넌트 문서화

     * Storybook : UI 컴포넌트 개발 및 문서화를 위한 대표적인 툴
     * Docusaurus : 기술 문서를 위한 정적 사이트 생성기
     * Styleguidist : React 컴포넌트 중심의 스타일 가이드 문서화 툴
     * React Cosmos : UI 컴포넌트를 독립적으로 개발 및 테스트할 수 있는 환경 제공
     * 추천:
          + 컴포넌트 문서화: Storybook
          + 기술 문서 생성: Docusaurus

   expo는 RN의 프레임워크라고 봐야하지 않나 싶네요.

   구글 트렌드 검색시 redux가 90프로 zustand 는 10프로도 안되는것으로 아는데 zustand 가 위에 있네요 ㅋㅋ

   레거시의 힘이죠.

   참고로 jQuery는 시장 점유율 90퍼센트입니다...

   React 기술 스택 2025 도 함께 참고하세요

   2022년 현재 React로 앱 개발할 때 추천 라이브러리들

   매년 업데이트 하고 있나본데, 3년만이네요. 비교해서 보시면 좋습니다.
"
"https://news.hada.io/topic?id=19524","경영진의 재산이 "사무실 복귀(RTO)"에 미치는 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     경영진의 재산이 ""사무실 복귀(RTO)""에 미치는 영향

     * 아마존 VP로 재직중 주식이 9082% 상승했고, 일반적인 삶의 어려움에 대해 잘 알지 못하며, 나보다 더 위인 SVP나 CEO들은 더더욱 그런 경우가 많음
     * ""부(Wealth)""와 그 영향에 대해 이야기 하는 것은 대부분의 임원들이 금기(Taboo)시 하는 주제지만, 내 자신의 얘기와 함께 이야기 해보려함
     * 나의 경우:
          + 주택 담보 대출 없음
          + 2주마다 청소 서비스를 이용
          + 정원 관리를 다른 사람이 함
          + 50세에 은퇴했음
     * 일반적인 가정, 심지어 평균적인 기술직 종사자도 이러한 혜택을 누리기 어려움
     * 나보다 상위레벨인 임원들은
          + 여러 채의 별장을 관리인과 함께 운영
          + 개인 제트기(PJ) 이용
          + 개인 비서 고용(청구서 납부, 장보기, 육아 등 대행)
          + 운전기사(보안 및 효율성 목적)
          + 아이들을 위한 초고가 사립학교
          + 거주지 선택 시 비용이 고려 대상이 아님
     * 사무실 복귀 정책과 현실의 괴리
          + 임원들은 대부분 직장과 경력을 삶의 최우선 순위로 둠. 그렇지 않으면 최고 임원이 되는 경우가 거의 없음
          + 높은 급여를 통해 시간을 확보하며, 대부분의 시간을 일과 가족에 사용
          + 이런 환경에서는 사무실 복귀(Return-To-Office) 가 당연한 선택처럼 느껴짐
     * 임원들의 현실
          + 출퇴근 시 운전할 필요 없이 차량 내에서 업무 가능
          + 아이들을 픽업하기 위해 집으로 달려갈 필요 없음(개인 비서가 대신 해줌)
          + 쇼핑, 청소, 요리 걱정 없음(가사 도우미 활용)
          + 자녀 교육도 별도로 신경 쓸 필요 없음(고급 사교육 제공)
     * 이런 상황에서는 ""사무실 출근""이 가치 있는 선택처럼 보이지만, 일반 직원들에게는 같은 논리가 적용되지 않음
     * 이는 임원의 부를 비판하려는 것이 아님
          + 나는 인생의 25년을 바쳐 부를 얻었음
          + 대신 현실과의 단절을 이해할 수 있게 설명하는 것
     * 임원들의 삶은 일반 직원과 근본적으로 다름
          + 그들이 악의적인 것은 아니지만, 시간이 지나면서 현실 감각이 흐려질 수 있음
          + 임원을 설득하고 싶다면, 스토리, 영상, 데이터를 활용해 현실적인 영향을 보여줄 것

   코로나 이전에는 다들 어떻게 사무실에 출근을 했던거죠?? ㅎㅎ;

   그땐 그게 당연한 줄 알고 있었으니 그런게 아니었을까 싶네요.

   공감은 경험에서 나오죠

   C레벨이 직원들의 상황을 모른다기 보단, 신경쓰지 않아도 되는 상황이라 보니까 그런 게 아닐까 싶네요

        Hacker News 의견

     * 나는 이 임원이 주장한 대로 정확히 했음. 하드 데이터와 통계를 사용하여 근로자의 관점에서 이러한 명령이 어떻게 보이는지 그림을 그렸지만, 완전히 무시당했음
          + 차량 마모 및 보험 비용, 추가 식비, 통근 시간 손실, 주택 선택에서의 경제적 기회 손실을 고려할 때, 이는 약 30,000달러의 급여 삭감과 동등하다는 그림을 그렸음
          + 특히 기술 팀의 경우, 우리의 태양을 따라가는 지원 모델로 인해 지역 사무실에서 네트워크를 형성할 실제 동료가 없었음
          + 반응은 더욱 강화되었음. ""허브"" 외부에 있는 사람들은 승진과 성장 기회를 점점 더 놓치게 되었고, 허브는 의무적인 사무실 출근일을 강제하기 시작했음
          + 회사의 소수자 동료 지원 약속은 텍사스로의 이전을 ""장려""하기 위해 실질적으로 타협되었음
          + 내가 해고되었을 때 놀랍지는 않았지만, 매우 실망스러웠음
          + 데이터만으로는 이 사람들을 설득하기에 충분하지 않음. 그들은 근로자의 필요나 목표에 관심이 없는 자신만의 의제를 가지고 있음
          + 해결책은 기본적인 공감을 위한 협상이 아니라 집단 행동임
     * 이것은 내가 의심했던 많은 것과 일치함. 임원들은 매우 일 중심의 삶에 대한 생존 편향을 가지고 있음
          + 그들은 다른 사람들이 왜 다르게 선택하는지 이해하기 어려워함
          + 이는 근무 위치와 주당 근무 시간 모두에 적용됨
          + 모든 동료 임원들이 자신의 견해를 공유할 때, 하위 직원들이 다른 견해와 우선순위를 가지고 있다는 것을 이해하고 받아들이기 어려움
          + 트윗에서 말했듯이, 일정 수준에서는 근무 위치/근무 시간의 모든 부정적인 점을 상쇄할 수 있음
          + 통근이 없고, 개인 셰프가 있으며, 모든 가사일이 해결되고, 전담 개인 보육이 있음
          + 사무실 밖에서 수면과 생존을 균형 잡으려고 시간을 보내지 않아도 될 때, 주당 50-60시간 사무실에 출근하는 것이 훨씬 쉬움
          + 그러나 이는 평균 직원의 삶과는 다름
     * 또 다른 요소가 있음: 그들의 직업은 다름
          + 사무실에서 일하는 것이 회의와 사람들과의 대화가 전부인 경우 유리함
          + 그들은 사무실에 있을 때 대화하고 싶은 사람들이 없으면 좌절할 것임
          + 그러나 하루 종일 프로그래밍만 하는 경우에는 훨씬 덜 유용함
          + 내 아내는 코로나 이전에 내가 사무실에 가서 하루 종일 아무와도 대화하지 않는 것이 놀랍다고 생각했음
          + 실제로 책상에 앉아 타이핑만 하고 있었음. 그 책상은 어디에나 있을 수 있었음
          + 만약 FAAaaaang 임원이라면, 직접 관리하고 대화하는 사람들에게만 출근을 의무화하고, 그들이 부하 직원에 대한 정책을 결정하도록 하길 고려하길 바람
     * 임원의 경험이 현실과 동떨어져 있을 때 영향을 미치려면, 이야기, 비디오, 데이터를 통해 그 영향을 보여주길 바람
          + 그들은 문자 그대로 다른 세계에 살고 있음. 이는 그들을 악하게 만들지는 않지만, 단절되게 함
          + 나는 ""현실과 동떨어지고 싶지 않음"" 하지만 시간이 지남에 따라 이런 일이 발생한다는 것을 인정하는 것이 중요함
          + 아니, 그렇지 않음. 우리는 모두 같은 세계에 살고 있으며, 우리 주변 사람들과 환경에 대한 영향을 깨닫는 것은 모두의 책임임
          + 지배 계급의 성격 장애(일반인과의 단절)는 주로 그들의 문제이며, 우리가 해결해야 할 것이 아님
     * ""단절""은 ""공감이 없음""처럼 느껴짐
          + 게시물에 나열된 혜택이 없는 사람의 고충을 상상하는 것이 정말 어려운가?
          + 단순히 앉아서 빠르게 계산해보면, 혜택이 없는 사람에게 ""사무실 복귀""를 우선시하는 시간 할당 딜레마가 즉시 드러날 것임
          + 시간은 보편적으로 가치가 있음! 그러나 그들의 삶을 관리할 직원 군단을 고용할 수 없기 때문에 시간이 훨씬 적은 사람에게는 더욱 가치가 있음
          + ""내가 이것을 갖지 않았다면? 그것이 나를 어떻게 느끼게 할까?"" 꽤 우울함. 공감은 사업을 운영할 수 없지만, 확실히 강한 팀 결속력과 성과와 상관관계가 있음
     * 나는 Google의 초기 ""사무실 복귀"" 명령 동안에 있었음
          + 이와 관련된 TGIF(회사 전체 회의)에서, 정책의 설계자가 왜 그것이 필요한지 설명했음
          + 그들이 무슨 말을 했는지 기억나지 않지만, 원격 근무에 대한 정책이 이미 시행된 후에도 원격으로 일하고 있었다는 것을 기억함
          + 원격 근무가 Google에 해롭다고 강의하면서 원격으로 일하는 그들의 대담함은 충격적이었음
          + 예측 가능하게도, 이에 대한 내부 분노는 엄청났음
     * 목적이 무엇인지 확실하지 않음 - 이것은 그저 부드러운 과시처럼 읽힘
          + 우리는 모두 ""왜"" 사무실 복귀가 추진되는지 알고 있음 - 이는 단지 임원들이 왕족 같은 삶을 살고 있는 동안 농민들이 교통 체증에 스트레스를 받으며 아이들이 공립학교에 방치되기를 기대하는 것이 아님
          + 사무실 복귀가 단지 단절된 것에 관한 것이라고 생각하는 것은 저자가 실제로 얼마나 단절되어 있는지를 강조함
          + 사무실 복귀는 단지 임원이 ""그들을 통근하게 하라!""고 말하는 것이 아니라, 세금 인센티브, 임대 인센티브, 점유 사용 계약에 의해 더 자주 추진됨
     * ""이것은 임원 부에 대한 비난이 아님. 결국, 나는 내 인생의 25년을 지불했고 약간의 부를 얻었음""
          + 그러나 다른 직원들도 그렇게 하지 않았는가? 물론 부의 부분은 제외하고
     * 그들은 사무실로 돌아가고 싶어서가 아니라, 직원들에 대한 더 많은 통제와 책임을 원하기 때문에 이를 추진함
          + 일부는 직원의 일정 비율이 그만두기를 원함
     * 사무실 복귀가 화제가 된 이후로 나는 이것을 말해왔음
          + 잘 보상받는 화이트칼라 IC조차도 블루칼라 노동자와 같은 일상적인 현실을 많이 다루어야 함
          + 그들은 청구서를 지불하고, 아이들을 돌봐야 함
          + 그들은 더 편안하게 살지만, 여전히 이 모든 것을 개인적으로 처리해야 함 - 가사 직원을 위한 돈이 없음
          + 원격 근무는 가족이 있는 사람들에게 모든 면에서 엄청난 개선임
          + 임원들은 단지 다른 행성에 있음
          + 이들은 Lucille Bluthe의 ""바나나 하나야, Michael. 얼마일 수 있겠어, $10?""라는 인용문을 구현하는 사람들임

   ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ 배가 불러 터졌네
   미국은 몰라도 한국 근로계약서에는 근무 시간과 장소(집 X)가 정해져있음
   코로나 기간 동안 일시적인 '배려'로 재택 근무 도입
   호의가 계속되면 권리인 줄 안다고 코로나 이후에도 계속하는 게 당연한 줄 암 ㅋㅋ
   정 바뀌길 원하면 지들이 나는 재택해도 생산성 하락이 없음을 '증명' 해야함
   재택 근무가 근로자의 삶에 가져오는 긍정적인 효과는 1도 관심없음 ㅋㅋ
   꼬우면 나가면 됨

   한국에 재택가능한 테크기업: 네이버, 쿠팡
   생산성, 매출 잘나옴

   특히 쿠팡은 생산성이 저하됐다면 바로 출근시켰을텐데 유지하고 있죠.
   이게 왜 배려라고 생각하시는걸까요?

   이 분은 주 6일제 하던 시절에서 일하셔야겠네요
"
"https://news.hada.io/topic?id=19502","젤렌스키, 격앙된 회담 후 백악관 떠남","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         젤렌스키, 격앙된 회담 후 백악관 떠남

    누가 젤렌스키에게 '왜 정장을 입지 않느냐'고 물었는가?

     * 젤렌스키 대통령은 오벌 오피스에서의 격렬한 논쟁 직전에 보수 성향의 기자로부터 전투복 착용에 대한 질문을 받음.
     * 기자는 ""왜 정장을 입지 않느냐? 정장이 있느냐? 많은 미국인들이 당신이 직무의 품위를 존중하지 않는다고 생각한다""고 질문함.
     * 젤렌스키는 세계 지도자들과의 중요한 회의에서도 우크라이나 삼지창 문양이 새겨진 스웨트셔츠를 자주 착용하는 것으로 알려져 있음.
     * 젤렌스키는 ""전쟁이 끝나면 정장을 입겠다. 아마 당신 것과 비슷한 것, 아니면 더 나은 것, 아니면 더 저렴한 것을 입을 수도 있다""고 답변함.
     * 질문을 한 사람은 Real America’s Voice의 백악관 수석 특파원인 Brian Glenn으로, 이 네트워크는 트럼프 지지자들로 가득한 프로그램 라인업을 가지고 있음.
     * 젤렌스키의 답변이 얼마나 신랄했는지는 불분명하며, 기자회견은 곧 다른 주제로 넘어감.
     * 그러나 존중에 대한 문제는 몇 분 후 오벌 오피스에서 벌어진 논쟁의 중심에 있었음.

        Hacker News 의견

     * 우크라이나는 어려운 상황에 있으며, 미국은 원하는 대로 할 수 있는 힘을 가짐
          + 그러나 세계의 국가들은 미국이 얼마나 빨리 동맹에서 괴롭히는 존재로 변할 수 있는지를 기억할 것임
          + 이는 미국 외교 정책에 매우 나쁜 날임
          + EU는 이제 NATO의 미래에 대해 깊이 고민할 것임
     * 마치 그를 백악관에 초대하여 강의와 꾸짖음을 준비한 것 같았음
          + 그를 세계 앞에서 굴욕을 주려는 의도 외에는 없었음
          + 우리 행정부가 한 일이 부끄러움
     * 나는 내 나라의 민주주의를 위해 상당한 개인 자원을 투자했으며, 결국 편안한 삶을 뒤로하고 도망쳐야 했음
          + 미국은 항상 영감이 되었음에도 불구하고, 이 상황을 지켜보는 것은 매우 불안함
          + 특히 공화당 대표들의 행동이 실망스러움
          + 한 달 전만 해도 우크라이나의 가장 친한 친구였던 사람들이 갑자기 완전히 반대되는 이야기를 하고 있음
          + 250년 된 민주주의에서 이런 일이 쉽게 일어날 수 있다면, 민주주의는 싸울 가치가 있는 것인가?
          + 우크라이나인의 희생이 가치 있는 것인가?
     * 미국 정책은 이제 세계를 제로섬 게임으로 몰아가고 있으며, 이는 부끄러운 일임
          + 세계는 모두에게 이익을 주는 우정과 협력의 이점을 잃게 될 것임
          + 신뢰와 협력이 사라지면 창문에 철창이 생기는 것처럼, 이는 부끄러운 일임
          + 미국이 너무 근시안적이고 두려워서 괴롭히는 존재가 되어야 한다는 것이 부끄러움
     * 광물 측면에서 미국은 우크라이나로부터 필요한 것이 없음
          + 대부분의 광물은 채굴되지 않은 매장량이며, 미국은 이미 충분히 보유하고 있음
          + 희토류: 미국은 희토류 정제 능력이 부족하며, 중국은 기술을 수출하지 않음
          + 그러나 Mountain Pass에 새로운 분리 공장이 가동 중이며, 최종 단계 공장이 텍사스에 건설됨
          + 우라늄: 미국은 충분한 우라늄 자원을 보유하고 있음
          + 티타늄: 테네시에서 티타늄 광석이 발견되었다고 함
          + 리튬: 미국은 사용하는 리튬의 약 75%를 생산하며, 아칸소와 네바다에서 새로운 매장량이 발견됨
          + 흑연: 중국이 주요 생산국이지만, 캐나다와 노르웨이가 생산을 늘리고 있음
          + 희토류와 마찬가지로, 저렴한 공급원이 가격을 올리면 국내 생산이 증가함
     * 유럽 지도자들이 이를 보고 자신들의 운명을 통제해야 한다는 것을 깨닫지 못한다면 바보임
          + 몇몇 유럽 지도자들이 이번 주에 관세를 피하기 위해 무릎을 꿇고 방문함
          + 미국이 더 이상 신뢰할 수 있는 동맹국이 아님을 깨닫고 모든 분야에서 자립을 시작해야 함
     * 이상한 불협화음이 느껴짐
          + 이는 백악관에 관한 TV 쇼의 한 장면 같았음
          + 기본적인 관리 교육에서도 공개적으로 칭찬하고 비판은 비공개로 하라고 함
          + 세계 언론 앞에서 이렇게 하는 것은 이해하기 어려움
     * 최근 몇 년 동안 미국인으로서 이렇게 부끄러움을 느낀 적이 없음
          + 컴퓨팅 분야의 외국 친구들에게, 미국의 대다수 사람들은 대통령과 그의 꼭두각시의 캐리커처가 아님
     * 보통 주류 뉴스를 여기서 다루지 않지만, 이번에는 다뤄야 했음
          + 진정한 외교에 참여할 의도 없이 그들의 청중 앞에서 잘 보이려는 설정처럼 느껴짐
     * 깊이 부끄럽고 불안함
          + 미국 대통령과 부통령이 외국 독재자에게 이렇게 굴욕을 당하는 것을 보는 것은 슬픈 광경임
          + 대통령답지 않다는 말로는 부족함
          + 우크라이나를 위한 마음이 아픔
          + 2024년 11월 5일 선거의 결과는 비극적인 실수가 될 것임
"
"https://news.hada.io/topic?id=19490","IBM의 HashiCorp 인수 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          IBM의 HashiCorp 인수 완료

     * IBM이 HashiCorp를 인수하여 하이브리드 클라우드 애플리케이션과 생성 AI를 지원하는 인프라를 자동화하고 보안을 강화
     * IBM과 HashiCorp의 기술이 결합되어 혁신 가속화, 보안 강화, 클라우드 활용 가치 증대에 기여
     * 약 75%의 기업이 하이브리드 클라우드를 사용 중이며, 이는 대규모 인프라 관리에 일관된 접근 방식을 제공
          + 2028년까지 생성 AI가 10억 개의 새로운 클라우드 네이티브 애플리케이션을 창출할 것으로 예상
     * IBM은 HashiCorp의 기술과 개발자 커뮤니티를 활용하여 글로벌 확장과 R&D 혁신에 투자할 계획임.
          + HashiCorp는 IBM의 글로벌 규모와 고객 관계를 통해 클라우드 인프라 자동화, 보안, 최적화 지원을 확대할수 있음
     * HashiCorp의 Terraform은 하이브리드 및 멀티 클라우드 환경에서 인프라 프로비저닝을 선도
          + HashiCorp의 Vault와 Terraform은 IBM의 자동화 소프트웨어 포트폴리오에 포함되어 있으며, Red Hat과의 협력을 통해 강력한 보안 및 관리 기능을 제공
     * IBM은 IT 비용 최적화와 문제 해결을 위한 AI 기반 소프트웨어에 지속적으로 투자 중임.
          + HashiCorp 인수는 IBM의 자동화 소프트웨어 포트폴리오를 확장하여 클라우드 비용 절감과 애플리케이션 성능 최적화를 지원함
     * IBM은 HashiCorp의 보통주를 주당 $35에 인수하여 총 기업 가치를 $64억으로 평가

        Hacker News 의견

     * 나는 2016년에 HashiCorp에 합류하여 Nomad 작업을 시작했음. 합류 당시 HashiCorp는 약 50명 규모였음. Armon Dadgar가 직접 우리를 한 명씩 온보딩했으며, 커피 메이커 사용법을 알려주었음 (자신의 접시는 직접 씻어야 함을 기억할 것). IPO와 같은 상승과 BUSL과 같은 하락이 있었지만, Nomad 팀과 사용자들은 내가 함께 일해본 최고의 사람들이었음
          + 이전에는 스타트업에서만 일했지만, HashiCorp는 IPO 이후 스타트업 범주를 벗어났음. 각 단계는 확실히 다르지만, 작은 화이트보드에 로드맵을 그리거나 노트북에서 릴리스 바이너리를 빌드하는 시절로 돌아가고 싶지는 않음. 그 시절은 재미있었지만, 이제는 내 삶의 새로운 단계를 준비하고 있음. IBM에 인수되는 것에 대한 공포 이야기를 들었지만, 자원과 기회를 즐긴 사람들의 이야기도 들었음. Nomad, 사용자들, 그리고 팀을 위해 최선을 바라며, 세상에 여러 스케줄러가 존재할 공간이 있다고 생각하고 싶음. 그렇지 않다면, 노력 부족 때문은 아닐 것임
     * HashiCorp의 제품은 항상 해킹 같은 느낌이었고, 어색한 디자인 결정이 있었음. Terraform의 경우, 몇 년 전에는 잘못된 PR이 심각한 데이터 손실을 초래할 수 있었음. 자원이 명시적인 무덤 표시 없이 삭제되었기 때문임
          + 그들은 라이선스 변경을 했고, 이는 그들에게 좋은 인상을 주지 못했음
          + 이제 IBM에 매각되고 있으며, IBM은 본질적으로 주로 차별화되지 않은 소프트웨어 제공으로 전환하려는 컨설팅 회사임. 그래서 HashiCorp는 기본적으로 끝난 것 같음
          + 다양한 포크들이 한동안 사용될 것이라고 추측함
     * 미안해 HashiCorp, 나도 그곳에 있었고 티셔츠(핑크색)를 얻었음 :)
          + 사실, 내가 있던 회사는 IBM에 인수되기 직전 파산 직전이었음. 그래서 IBM이 우리의 일자리를 구해주었고, 나는 그곳에서 여러 해를 보냈음
     * HP, Oracle, Broadcom, 그리고 과거의 CA와 같은 곳은 한때 좋은 회사들이 죽으러 가는 곳임
     * IBM에 남아 있을 수밖에 없었던 사람들
          + IBM에 인수된 회사에서 일했지만 다른 곳으로 갈 수 없었던 사람들
          + 이제부터 당신의 플랫폼 형성 핵심 제품에 대한 의사 결정에 이 두 그룹이 혼합되어 참여할 것임
     * 조의를 표함, HashiCorp 사람들. 나도 그곳에 있었음
     * Lotus Notes로 전환하는 것을 즐기길 바람
     * 모든 Red Hatter들이 CentOS가 죽지 않았다고 말하는 것 같음. Kool aid가 맛있나 봄
     * IBM이 Terraform과 Ansible을 효과적으로 통제하고 있는 상황에서 이런 일이 일어나지 않기를 정말로 바랐음
          + Salt와 Puppet은 모두 좋은 상태가 아닌 것 같음
          + System Initiative는 여전히 AWS임, 맞지?
          + 웰프
     * IPO에서 투자자들이 꽤 많은 돈을 잃었음
"
"https://news.hada.io/topic?id=19462","Awesome DeepSeek Integrations - DeepSeek을 연동한 서비스 리스트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Awesome DeepSeek Integrations - DeepSeek을 연동한 서비스 리스트

     * 빠르게 늘어나는 DeepSeek 연동 서비스들을 정리. 현재 17개 카테고리 총 102개
     * Applications (총 40개)
          + DeepChat: 강력한 LLM 기반 데스크톱 AI 어시스턴트
          + ChatGPT-Next-Web: GPT-3, GPT-4 및 Gemini Pro 지원하는 웹 UI
          + LibreChat: DeepSeek과 통합된 오픈소스 AI 챗봇
          + PapersGPT: Zotero 플러그인, 연구 논문 요약 지원
          + Raycast: macOS 프로덕티비티 툴, DeepSeek 확장 지원
     * AI Agent Frameworks (총 10개)
          + smolagents: 간단한 Python 코드 기반 AI 에이전트 프레임워크
          + YoMo: 상태 유지형 서버리스 LLM 호출 프레임워크
          + SuperAgentX: 멀티에이전트 AI 프레임워크
          + Alice: 블록체인 기반 자동화 AI 에이전트
     * RAG Frameworks (총 4개)
          + RAGFlow: RAG(검색증강생성) 기반 문서 이해 엔진
          + DeepSearcher: 벡터 DB를 활용한 AI 검색 솔루션
     * FHE (Fully Homomorphic Encryption) Frameworks (총 1개)
          + Mind FHE Rust SDK: 완전 동형 암호화(FHE) 지원 AI 프레임워크
     * Solana Frameworks (총 1개)
          + Solana Agent Kit: Solana 프로토콜과 AI 에이전트 연결
     * Synthetic Data Curation (총 2개)
          + Curator: LLM 학습을 위한 대규모 데이터셋 생성 도구
          + Kiln: AI 모델을 위한 합성 데이터 생성
     * IM Application Plugins (총 3개)
          + HuixiangDou: WeChat과 Feishu에서 AI 챗봇 제공
          + LangBot: QQ, Lark 등 다중 플랫폼 지원
     * Browser Extensions (총 10개)
          + Immersive Translate: 웹 페이지 실시간 번역 플러그인
          + ChatGPT Box: 브라우저 내 AI 챗봇
          + Trancy: 이중 언어 자막 및 번역 지원
     * VS Code Extensions (총 4개)
          + Continue: VS Code에서 실행되는 AI 자동완성 및 추천 엔진
          + SeekCode Copilot: DeepSeek을 활용한 AI 코딩 보조
     * Visual Studio Extensions (총 3개)
          + Comment2GPT: 주석을 활용한 AI 기반 코드 설명
          + Unity Code Assist Lite: Unity 스크립트 코드 보조 기능
     * Neovim Extensions (총 4개)
          + avante.nvim: Neovim에서 실행되는 AI 보조 기능
          + llm.nvim: 다양한 AI 모델과 통합된 Neovim 플러그인
     * JetBrains Extensions (총 5개)
          + AutoDev: JetBrains IDE용 AI 코딩 도우미
          + Onegai Copilot: JetBrains IDE 내 AI 지원
     * Discord Bots (총 1개)
          + Geneplore AI: DeepSeek AI 기반의 대형 Discord 봇
     * Native AI Code Editor (총 2개)
          + Cursor: AI 기반 코드 편집기 (VS Code 기반)
          + WindSurf: Codeium이 개발한 AI 코드 편집기
     * Emacs (총 2개)
          + gptel: Emacs에서 실행되는 AI 챗봇 클라이언트
          + Minuet AI: AI를 활용한 코드 자동완성 플러그인
     * Security (총 1개)
          + CodeGate: AI 기반 코드 보안 솔루션
     * Others (총 14개)
          + Wechat-Bot: WeChat 기반 AI 챗봇
          + LiteLLM: 여러 LLM API를 통합하는 Python SDK
          + GPTLocalhost: Microsoft Word에서 DeepSeek 활용
"
"https://news.hada.io/topic?id=19454","ChatGPT가 제 생명을 구했습니다(아니, 진짜로 응급실에서 이 글을 쓰고 있어요)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ChatGPT가 제 생명을 구했습니다(아니, 진짜로 응급실에서 이 글을 쓰고 있어요)

     ChatGPT가 날 오늘 ER로 보냈음: 그게 내 생명을 구했을지도 모름

     * 최근 몇 주 동안 몸 상태가 이상하다고 느꼈음. 주치의 검사 후 식단 조언을 해줬지만, 주말 사이 증상이 악화됨
     * 새벽 3시에 ChatGPT에 증상을 설명하며 식단 개선 방법을 논의
     * 일요일 아침, 다리와 손에 작은 빨간 점들이 생기자, ChatGPT에 사진 업로드하고 대화를 이어나갔음
     * ChatGPT에 혈액검사 결과를 업로드하자 혈소판 수치가 비정상적으로 낮다고 지적받았고, 응급실을 가라는 강력한 권고를 받았음
     * 주치의가 검사를 아직 확인하지 않았을 수도 있다는 점도 ChatGPT가 지적함
     * 주치의에게 연락했으나, 2-3일 후에나 답변을 받을 수 있다는 회신을 받고, ChatGPT의 조언에 따라 응급실로 향함
     * 결국 ER에 가서 긴급한 치료(혈소판 수혈 등)를 받았음

혈소판 ‘0’: 새로운 문제?

     * 실제로 응급실 도착 후 혈소판 수치가 0으로 판정됨
     * 의료진도 매우 드문 상황이라 놀라워했음
     * 신속히 응급조치를 받고 입원하게 됨
     * “어떻게 응급실에 오게 되었는가?”라는 질문에 ChatGPT 권고 때문이라 대답했음
     * 의료진도 AI가 초기 위험 징후를 알리는 데 도움이 될 수 있다고 긍정적으로 평가함

AI가 위기 상황을 중재하는 방법

     * 위기 상황에서 AI를 사용한 것은 이번이 처음이 아님. AI가 응급실에 가라고 설득한 것도 이번이 처음이 아님 (참고로 두 번 모두 옳은 판단이었음)
     * 이번에는 ChatGPT가 단계별로 증상과 검사값을 분석하며 긴급함을 강조함
     * 혈액검사 결과를 빠르게 해석하고, 즉각적인 병원 방문을 추진하게 함
     * ER에 온 뒤에도 수치와 용어를 실시간으로 ChatGPT에 물어보며 상황을 이해함
     * AI와의 대화 내용을 바탕으로, 구체적인 용어를 의료진에게 말해 더욱 신속한 대응을 이끌어냄

앞으로의 방향

     * 금요일 늦게 나온 검사 결과를 월요일에야 의사가 확인할 수 있는 의료시스템의 공백 문제를 체감함
     * AI가 이 공백을 메우며 “주말 긴급 상황에 환자를 안전하게 안내하는 역할”을 함
     * 병원에서는 환자가 미리 검사 결과를 파악하고 대화를 준비해 두니, 의사와의 면담이 더 효율적이었음
     * 의료 체계와 AI가 함께 작동할 때 생길 수 있는 새로운 의사소통 방식과 환자 자율성이 부각됨
     * 지금은 병원에서 글을 쓰며, 적절한 치료 후 빠른 퇴원을 기대 중임

부록 (""Proof of Reality"")

     * ""또 다른 AI 사기극""이라고 생각하는 모든 혐오자들을 위해, 실제 입원 중 찍은 사진을 공개함
     * 현재 면역치료 등 중대한 조치가 진행 중임

        Hacker News 의견

     * 아내가 의사인데, 이미 AI 서기가 방문 기록을 작성하고 요약하며 명령을 준비하는 시스템을 사용 중임
          + AI가 실험 결과를 검토하는 것도 멀지 않은 일 같지만, 아직 AI 시스템이 인간의 개입 없이 환자에게 정보를 해석하고 전달하는 것은 준비되지 않음
          + 문제는 인간이 혈소판 수치를 놓친 것이 아니라 아직 검토되지 않았다는 것임
          + AI 개입은 환자 측에서 이루어져야 하며, 제공자는 위험이 크고 환자는 자신의 AI를 선택할 수 있는 능력이 있음
     * LLM이 긴급 조치가 필요한 결과를 표시하는 알고리즘보다 더 나은 점이 무엇인지 모르겠음
          + 사용자에게 더 명확하고 이해하기 쉬운 정보를 제공할 수 있지만, 이는 건강 시스템이나 인터넷 자원의 실패를 의미함
          + LLM이 환자에게 자신의 건강에 대해 행동할 수 있는 힘을 주었음
     * 이 이야기는 LLM의 ""킬러 앱""이 없다는 좋은 예임
          + 사람들이 이를 인정하기 꺼려하는 이유는 이 기술이 막대한 권력을 집중시키기 때문임
     * 친구가 최근 영상 검사를 받았고, 의사가 검토하기까지 7일을 기다려야 했음
          + AI/LLM이 검사 결과를 분류하고 의사에게 우선적으로 검토해야 할 결과를 알려줄 수 있음
          + 대부분의 방사선 보고서는 텍스트로 작성되므로, LLM이 이를 사용해 분류하고 의료 제공자에게 우선 순위를 알릴 수 있음
     * 이 이야기를 공유해줘서 고맙다는 의견
          + LLM의 위험 요소에 대한 많은 대화가 있지만, 이 이야기는 새로운 기술의 놀라운 잠재력을 상기시켜 줌
          + 다른 방법으로 문제의 심각성을 알 수 있었을 수도 있지만, LLM이 정보를 이해하고 필요한 방식으로 정보를 제공한 것은 새로운 상호작용 방식임
     * 혈소판 수치가 0으로 떨어지는 것은 심각한 문제임
          + 혈액 검사에서 비전문가는 정상 범위를 벗어난 값이 괜찮은지 생명에 위협이 되는지 알기 어려움
          + 색상 코드로 WBC/RBC, 헤모글로빈 및 혈소판을 표시하는 것만으로도 큰 도움이 될 수 있음
     * '피부에 작은 붉은 반점이 있는 낮은 혈소판 수치'를 검색하면 긴급한 치료가 필요하다는 것을 알 수 있음
          + AI가 필요하지 않음
     * 이제 LLM을 통해 그럴듯한 진단을 받을 수 있음
          + DNA를 완전히 시퀀싱하고 데이터를 ChatGPT 세션에 업로드하여 특정 유전적 프로필에 대한 질문을 할 수 있음
          + 의사와 논의하여 해결책을 찾을 수 있음
     * ChatGPT가 의사의 대충 평가보다 의료 문제를 더 잘 진단할 수 있다는 의견
          + 의사가 모든 증상에 대해 철저히 평가하지 않는 경우가 많음
          + 개인적인 경험으로, ChatGPT가 모노뉴클레오시스를 진단했으며, 이는 놀라운 결과였음

   피부에 작은 붉은 반점이 있는 낮은 혈소판 수치'를 검색하면 긴급한 치료가 필요하다는 것을 알 수 있음 -> 요즘 구글 검색이 점점 지저분해져서, 찾는 게 불가능하진 않지만, 정확한 정보를 구하는 건 오래걸리지 않았을까요

   OpenAI는 정작 개인정보를 업로드 하지 말라고 하지만요...

   이건 사실 혈액검사에서 중대한 이상값이 나왔는데, 환자는 정작 조회를 할 수 있는데 의사에게 보고가 되지 않는 것이 문제인거죠. 요새는 이런 문제 때문에 큰 일부 병원에서는 이상값이 발견될때, 바로 검사실에서 의사에게 바로 개별연락이 가기도 합니다.
"
"https://news.hada.io/topic?id=19487","DeepSearcher - 로컬 오픈소스 Deep Research","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  DeepSearcher - 로컬 오픈소스 Deep Research

     * 오픈소스 모델과 도구(Milvus, LangChain 등)를 활용해 Deep Research 형태의 리서치 에이전트를 구현
     * 웹·문서 검색을 통해 주제나 질문에 대해 자동으로 심층 리서치를 수행하고, 중간 단계마다 행동(검색, 정리 등)을 선택하는 에이전트 구조를 구현하는 사례가 늘어났음
     * 본문에서는 이러한 아이디어를 확장한 DeepSearcher 오픈소스 프로젝트를 소개. 쿼리 라우팅, 조건부 실행 흐름, 웹 크롤링 도구 사용 등을 소개
     * DeepSearcher는 파이썬 라이브러리·CLI 형태로 제공되어, 여러 소스 문서를 입력받고 임베딩 모델 및 벡터 DB 설정을 파일로 간단히 조정할 수 있음
     * 간단하지만 에이전트 기반 RAG를 시연하는 사례로, 실제 AI 애플리케이션 개발로 이어지는 발판 역할을 할 수 있음
     * 특히 추론 모델의 속도와 효율성 문제가 강조되는데, 질의와 검색 과정에서 많은 토큰 생성이 필요해 추론 리소스가 병목이 됨
     * SambaNova의 맞춤형 하드웨어로 돌아가는 DeepSeek-R1 reasoning model을 사용하면 초당 토큰 생성 속도가 경쟁 서비스보다 빠르게 나옴
     * 이러한 클라우드 추론 서비스를 통해 Llama 3.x, Qwen2.5, QwQ 등 다양한 모델에 대해서도 효율적인 추론이 가능해짐

질문 정의 및 세분화

     * 초기 사용자 질의를 세부 하위 질의로 분해함
     * 이전 글과 유사하게, ""How has The Simpsons changed over time?"" 같은 질의가 아래와 같이 여러 하위 질의로 나누어짐
          + 예: 작품의 문화·사회적 영향, 시즌별 캐릭터·유머·서사 방식 변화, 애니메이션·제작 기술 변화, 시청자 반응 변화 등
     * 이후 단계에서 필요하다면 추가적으로 질문을 재정의하거나 확장하기도 함

리서치 및 분석

     * 하위 질의를 토대로 쿼리 라우팅, 벡터 검색, 반성(reflection), 그리고 조건부 반복 단계를 거침
     * 쿼리 라우팅
          + 여러 데이터베이스 컬렉션 중 어떤 것을 사용할지 LLM이 결정하도록 프롬프트를 구성함
          + JSON 형태 응답을 받아, 컬렉션별로 검색 질의를 생성하도록 함
     * 벡터 검색
          + Milvus에 저장된 임베딩을 활용해 유사도 검색을 실행함
          + 이전 글과 유사하게, 소스 데이터를 미리 분할하고 벡터화해둠
     * 반성(reflection)
          + LLM이 이전 단계에서 나온 질의·답변을 바탕으로 추가 정보가 필요한지 확인함
          + 부족한 부분이 있으면 새로운 하위 질의를 생성해 재검색을 시도함
     * 조건부 반복
          + 반성 결과 추가 질의가 필요하면 위 과정을 반복함
          + 더 이상 정보를 수집할 필요가 없다고 판단하면 최종 보고서를 생성하는 단계로 넘어감

최종 보고서 생성

     * 모든 하위 질의와 검색 결과를 종합해 하나의 프롬프트로 보고서를 생성함
     * 이전 시연보다 일관성과 응집력을 높인 형태의 보고서를 얻게 됨
     * 예를 들어, “How has The Simpsons changed over time?”에 대한 최종 보고서는 아래와 같은 구조로 상세 내용을 제공함
          +
              1. 문화적 영향과 사회적 관련성
          +
              2. 캐릭터·유머·스토리라인 진화
          +
              3. 애니메이션·기술적 변화
          +
              4. 시청자 층, 반응, 시청률 변화
          + 결론: 작품이 초기의 반항적 풍자에서 대중적 아이콘으로 변모한 과정 등
     * DeepSeek-R1 모델을 사용한 버전과 GPT-4o mini 모델로 생성한 버전 보고서를 비교할 수 있음

향후 방향

     * DeepSearcher는 아직 간단한 수준이나, 추가적 에이전트 구성, 보고서 구조화, 조건부 반복 확장 등으로 더 발전시킬 수 있음
     * 대규모 추론 모델은 매우 무거운 연산을 수반하므로, 추론 속도와 비용이 서비스의 핵심 이슈가 됨
     * SambaNova의 DeepSeek-R1 모델을 이용해 65회 추론 호출, 약 25k 입력 토큰과 22k 출력 토큰을 사용했으며, 약 0.30달러 비용으로 충분히 빠른 응답을 얻었다고 함
     * DeepSearcher 저장소에서 프로젝트를 직접 체험 가능하며, 앞으로도 추가 기능과 사례를 지속적으로 공유할 계획임

     * 참고 링크
          + DeepSearcher GitHub
          + 이전 글: “I Built a Deep Research with Open Source—and So Can You!”
          + SambaNova - Fastest DeepSeek-R1 671B
          + Milvus Open-Source Vector Database

        Hacker News 의견

     * 이 시스템은 로컬 LLM을 사용하지 않아서 진정한 로컬 시스템이 아님
          + Ollama와 LM Studio가 호스팅하는 로컬 LLM을 사용할 수 있는 깊은 검색기가 있는지 궁금함
     * HuggingFace의 오픈소스 버전과 비교가 궁금함
          + HF 버전은 웹을 탐색하고 결과를 수집한 후 평가하여 최종 결과를 합성하는 추론 LLM을 사용함
          + 이 버전은 웹 크롤링에서 생성된 문서의 벡터 저장소를 보여주는 것 같음
     * Grok의 구현의 마법은 대부분의 웹사이트를 캐시하고 있어서 매우 빠르게 느껴짐
          + Bing/Brave 검색은 그 기능을 제공하지 않는 것 같음
          + 이런 서비스가 존재하는지 궁금함
     * Deep Research에 대한 다양한 접근을 좋아함
          + Flow를 사용하여 새로운 워크플로우를 시도 중임
     * 관련된 두 개의 블로그 게시물이 있음
          + 오픈소스를 사용하여 Deep Research를 구축한 경험을 공유함
     * 주요 AI 회사들이 동일한 Deep Research 제품을 만들었으므로, 공유 오픈소스 플랫폼에 집중하는 것이 합리적일 것임
     * 웹 크롤링 통합의 실질적인 의미가 궁금함
          + 이론적으로 Sci-Hub에서 논문을 읽고 유효한 대학원 수준의 연구를 생성하는 데 사용될 수 있을지 궁금함
          + DeepSeek R1과 GPT-4o 및 다른 대형 모델을 사용하여 작성된 보고서를 비교하는 데 유용할 수 있음
          + 오픈소스 코드가 다양한 LLM의 한계를 더 빨리 드러내고 특정 필요에 맞는 더 나은 추론 루프 개발에 도움을 줄 수 있음
     * 개인 노트(Obsidian)와 웹에 연결할 수 있는 Deep Research 도구를 찾고 있었음
          + 이 도구가 그 기능을 가지고 있는 것 같음
          + 이제 남은 것은 Deep Research 결과를 Obsidian으로 내보내는 방법을 찾는 것임
     * 실제로 사용해 보았고 몇 가지 문제에 직면하여 openAI 텍스트 임베딩을 MilvusEmbedding으로 교체해야 했음
          + QuickStart의 반응이 좋았음
     * 진정한 마법의 총알은 lib-gen과 sci-hub를 검색하는 것임
"
"https://news.hada.io/topic?id=19539","바이럴되는 AI 제품 뒤에 숨겨진 패턴들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         바이럴되는 AI 제품 뒤에 숨겨진 패턴들

     * AI 제품들은 역사상 가장 빠른 성장 속도를 보이며, 일부는 출시 몇 달 만에 연 매출 1억 달러를 돌파함
     * 단순한 AI 성능이 아니라, 사용자 친화적인 UX가 AI 제품의 성공을 결정하는 핵심 요소로 작용
     * Bolt, Cursor, Replit, PhotoRoom 등은 직관적이고 원활한 UX를 통해 수백만 명의 사용자를 빠르게 확보함

# 성공하는 AI 제품의 UX 패턴

  1. AI의 작동 원리를 투명하게 설명하기

     * 사용자는 AI가 어떻게 작동하는지 이해하지 못하면 신뢰하지 않음
     * 특히 금융, 의료, 개발자 자동화 분야에서는 투명성이 매우 중요함
     * Bolt - 실시간으로 AI 프로세스를 단계별로 보여주어, 사용자가 코드 생성 또는 자동화 과정을 정확히 파악할 수 있게 함
     * Cursor - 코드 수정 시 각 제안의 이유를 설명하여 신뢰를 강화
     * PhotoRoom - AI 편집의 배경 설명을 추가하여 사용자가 결정의 이유를 이해하도록 도움
     * 프로 팁:
          + AI 프로세스의 단계별 가시성을 제공
          + 사용자가 “AI가 왜 그렇게 했는가?“를 질문할 수 있도록 함
          + 시각적 설명을 통해 신뢰 구축

  2. 사용자가 AI와 더 쉽게 소통할 수 있도록 지원하기

     * 대부분의 사용자는 적절한 프롬프트를 입력하는 방법을 모름
     * 입력이 부정확하면 AI 출력도 부정확해져 사용자가 좌절감을 느낌
          + Bolt & Replit - 한 번의 클릭으로 프롬프트를 개선할 수 있는 기능을 제공하여, 사용자가 실행 전에 입력을 향상시키고 더 나은 결과를 얻을 수 있도록 도움
          + PhotoRoom - 세 가지 AI 편집 모드를 도입
               o Assisted mode: 단계별 가이드를 통해 구조화된 편집을 지원
               o Image mode: 유사한 이미지를 제안하여 영감을 제공
               o Manual mode: 고급 사용자에게 완전한 편집 제어권을 부여
     * 프로 팁:
          + 사전 구축된 템플릿을 제공하여 사용자를 안내
          + 다양한 상호작용 모드(가이드, 수동, 혼합)를 제공
          + AI가 실행 전에 더 나은 입력을 제안하도록 함

  3. AI를 단순한 도구가 아니라 협업 파트너로 만들기

     * AI가 단순히 결과만 제공하는 것이 아니라, 사용자가 결과를 개선할 수 있도록 지원해야 함
          + Replit - 에이전트 모드(전체 빌드를 자동화)와 어시스턴트 모드(작은 수정 지원)를 사용하는 이중 모드 AI 어시스턴트를 제공
          + Cursor - AI 채팅과 실행을 결합하여 탐색적 대화와 직접적인 코딩 지원을 전환할 수 있게 함
          + Fathom - Ask Fathom 기능을 통해 AI 회의 요약을 인터랙티브하게 제공하여, 사용자가 정적 출력 대신 상호작용할 수 있도록 함
     * 프로 팁:
          + AI 도구를 출력 중심이 아닌 상호작용적으로 설계
          + 다양한 협업 모드를 제공
          + 사용자가 AI 결과를 쉽게 수정하고 반복할 수 있도록 함

  4. 사용자가 AI 결과를 테스트할 수 있도록 하기

     * 예측할 수 없는 결과는 사용자의 신뢰를 떨어뜨리고 AI 도입을 방해함
          + Bolt - 사전 정의된 AI 프롬프트를 사용하여, 사용자가 가입 전에 테스트할 수 있도록 함
          + Replit - AI 생성 코드를 실행하기 전에 미리보기 및 롤백 체크포인트를 추가하여 위험과 두려움을 줄임
          + Fathom - AI 인사이트를 테스트할 수 있는 인터랙티브 온보딩을 제공하여, 실제 회의 전에 샌드박스 환경에서 경험할 수 있도록 함
     * 프로 팁:
          + 사용자가 완전히 참여하기 전에 AI 기능을 테스트할 수 있도록 함
          + AI 변경 사항을 실행하기 전에 미리보기 또는 실행 취소 옵션을 제공
          + 탐색적 온보딩 경험을 통해 신뢰 구축

  5. AI가 사용자 워크플로우에 자연스럽게 녹아들도록 만들기

     * AI가 추가적인 작업을 요구하는 것이 아니라, 기존 워크플로우를 자연스럽게 보완해야 함
          + Cursor - 사용자가 AI 제안을 즉시 수락 또는 거부할 수 있도록 하여 원활한 워크플로를 지원
          + Granola - 간단한 메모를 포괄적이고 맥락적인 요약으로 통합하여, 통화 중에도 집중력을 잃지 않고 생각을 기록할 수 있도록 함
          + Grammarly - 각 상황에 맞는 컨텍스트 기반 수정 및 답변을 제공하여, 반복적인 “이렇게 답변해줘” 요청을 줄임
          + Bolt - AI 생성 코드와 라이브 미리보기를 원활하게 전환할 수 있도록 함
     * 프로 팁:
          + AI 제안에 대한 간단한 수락/거부 메커니즘을 제공
          + AI 상호작용 간의 원활한 전환을 설계
          + 사용자의 컨텍스트를 우선시하여 워크플로 방해를 최소화

결론

     * AI 자체가 차별화 요소가 아니라, 뛰어난 UX가 성공을 결정함
     * AI 제품이 성공하려면 명확하고 신뢰할 수 있으며 원활한 경험을 제공해야 함
     * 투명성, 안내된 입력, 상호작용성, 예측 가능성, 원활한 통합 등의 패턴을 통해 AI 경험을 향상시켜 실제 도입과 유지율을 높일 수 있음
"
"https://news.hada.io/topic?id=19469","TypeScript 타입 시스템만으로 DOOM 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     TypeScript 타입 시스템만으로 DOOM 실행하기

     * 순수 TypeScript 타입 시스템만으로 DOOM을 실행하는 데 성공
          + 총 3조 5천억 줄, 177TB의 코드
          + 첫 프레임 생성에 12일 소요
     * 이를 위해 순수 TypeScript 타입 시스템으로 WASM 가상 머신을 구현
          + 따라서 DOOM뿐만 아니라 다른 프로그램도 실행 가능
          + GitHub 리포지토리: MichiganTypeScript/typescript-types-only-wasm-runtime

  기술적 도전 과제 및 솔루션

     * 규모 문제
          + 최적화 이전 코드 규모는 1.25PB로, 초기 계산에 3개월이 필요했음
          + 최적화를 통해 각각 177TB와 12일로 감축
     * TypeScript 컴파일러 제한
          + 스택 깊이 및 재귀 제한 등을 극복하기 위해 컴파일러 수정
     * 게임 리소스 인코딩
          + 맵, 텍스처, 적 AI, 물리엔진 등 모든 게임 요소를 타입으로 인코딩
          + 타입 수준의 Garbage Collector, L1 CPU 캐시, Dead-Code Elimination, 실시간 Memory Compactor, 전역 스택 등을 구현해야 했음
          + 엔진 전체는 문자열 리터럴 형태의 2의 보수만으로 구현됨

  이후 예정

     * 후속으로 심층 분석 영상 게시 예정
     * 개발 중에 만들었으나 게시하지 못한 60개 이상의 Shorts도 있음
          + 관련 예고 트윗

   와우 1.25PB ㄷㄷ

   이것은 호기심을 빙자한 광기인가... ㅎㄷㄷㄷㄷ

   Holy shit.... GOAT

   wow...

   ""최적화 이전 코드 규모는 1.25PB"" ㄷㄷ..

   GN 에서 먼저 보고 와.. 만 했습니다.. 엄청 대단한 것 같아요.
"
"https://news.hada.io/topic?id=19504",""Firefox를 통해 정보를 업로드하거나 입력하면 당사에 라이선스를 부여하는 것입니다."","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ""Firefox를 통해 정보를 업로드하거나 입력하면 당사에 라이선스를 부여하는 것입니다.""

You Give Mozilla Certain Rights and Permissions

     You give Mozilla the rights necessary to operate Firefox. This includes processing your data as we describe in the Firefox Privacy Notice. It also includes a nonexclusive, royalty-free, worldwide license for the purpose of doing as you request with the content you input in Firefox. This does not give Mozilla any ownership in that content.

사용자는 Mozilla에 특정 권리 및 권한을 부여합니다.

     사용자는 Firefox를 운영하는 데 필요한 권리를 Mozilla에 부여합니다. 여기에는 Firefox 개인정보 취급방침에 설명된 대로 귀하의 데이터를 처리하는 것이 포함됩니다. 또한 사용자가 Firefox에 입력한 콘텐츠에 대해 사용자가 요청한 대로 수행할 수 있도록 로열티가 없는 전 세계 비독점 라이선스가 포함됩니다. 이는 해당 콘텐츠에 대한 소유권을 Mozilla에 부여하지 않습니다.

        Hacker News 의견

     * 우리는 스레드를 원본 소스가 포함된 https://news.ycombinator.com/item?id=43185909 로 병합했음
     * 이 조건들은 ""인증된 소스""의 실행 파일에만 적용된다는 점을 주목할 필요가 있음
          + ""인증된 소스""가 무엇인지 확실하지 않음
          + 직접 컴파일한 것이나 Mozilla가 컴파일하지 않은 Archlinux 패키지는 포함되지 않을 것 같음
          + 법률 전문가가 아님
     * 이러한 정책의 존재 자체가 오픈 소스의 정신과 모순되는 느낌이 있음
     * 여러 가지 우려되는 점이 있음
          + Firefox를 통해 정보를 업로드하거나 입력할 때, Mozilla에게 비독점적이고 로열티 없는 전 세계적인 라이선스를 부여하게 됨
          + 이는 너무 광범위하고 모호하게 보임
          + 다른 댓글에서는 ""당신이 표시한 대로""라는 부분이 Mozilla의 행동을 제한한다고 하지만, 그 의미가 여전히 모호함
          + 영어의 모호성 때문에 그 수식어의 범위가 모호함
          + Mozilla는 이러한 약관을 업데이트할 수 있으며, 업데이트된 약관을 온라인에 게시할 것임
          + Firefox를 계속 사용하는 것을 이러한 변경 사항의 수용으로 간주할 것임
          + 현재 약관이 괜찮다고 생각하더라도, Mozilla는 언제든지 사전 통보 없이 변경할 수 있음
          + Mozilla는 언제든지 어떤 이유로든 Firefox에 대한 접근을 중단하거나 종료할 수 있음
          + 왜 이것이 나쁜지 자명함
     * 기사 제목은 ""Firefox 이용 약관""임
     * 왜 제목을 편집하는 것을 허용하는지 의문임
     * [중복] 이전 및 관련:
          + https://news.ycombinator.com/item?id=43187423
          + https://news.ycombinator.com/item?id=43194536
"
"https://news.hada.io/topic?id=19517","Google 세르게이 브린, 엔지니어들에게 "AI 개발 위해 주 60시간 근무해야"한다고 주장 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Google 세르게이 브린, 엔지니어들에게 ""AI 개발 위해 주 60시간 근무해야""한다고 주장

     * 구글 공동 창업자 세르게이 브린은 엔지니어들에게 ""경쟁이 가속화되고 있으며, 인공지능(AI)의 궁극적인 목표인 AGI를 향한 최종 경주가 진행 중""이라고 강조함
     * Gemini 팀에 보낸 메모에서 ""우리는 이 경쟁에서 승리할 모든 요소를 가지고 있지만, 노력을 더욱 가속화해야 한다""며 주 60시간 근무를 제안함
     * 브린은 엔지니어들이 Google의 AI 모델을 활용해 코드를 작성해야 하며, 이를 통해 ""세계에서 가장 효율적인 개발자와 AI 과학자가 될 것""이라고 주장
     * 하지만, 브린의 요구는 아이러니함. AI 기술은 인간이 작성한 코드를 학습하여 패턴을 분석하고 새로운 코드를 생성하는데, 이는 결국 엔지니어의 역할을 일부 대체할 가능성이 있음
     * Salesforce CEO 마크 베니오프는 최근 ""AI의 성공 덕분에 올해 엔지니어를 추가로 채용하지 않을 계획""이라고 발언하며 AI 기반 자동화가 엔지니어 채용 감소로 이어질 수 있음을 시사함
     * 다만, AI를 이용한 코드 생성이 실제로 엔지니어를 완전히 대체할 수 있을지는 논란의 여지가 있음
          + AI는 반복적인 코드 작성에는 유용하지만, 대규모 코드베이스를 다룰 때는 한계가 있음
          + 일부 기업들은 비용 절감을 위해 AI를 활용해 인간을 대체할 가능성이 있으나, AI가 엔지니어 수준의 문제 해결 능력을 갖출지는 불확실함
     * AI 옹호자들은 ""AI가 엔지니어의 일을 줄이는 것이 아니라, 기존보다 더 많은 프로젝트를 수행할 수 있도록 도와줄 것""이라는 반론을 제기함
          + 즉, AI가 반복적인 작업을 처리하면 엔지니어들은 창의적인 문제 해결과 새로운 기능 개발에 집중할 수 있다는 주장
     * 브린의 사무실 출근 요구는 팬데믹 이후 지속되는 재택근무 vs. 사무실 근무 논란과 맞물려 있음
          + 특히, 실리콘밸리에서는 Zoom 같은 원격 근무 솔루션을 만든 기업들이 중심에 있었던 만큼, 사무실 복귀 요구가 엔지니어들 사이에서 반발을 불러일으킬 가능성이 큼
          + Google을 비롯한 주요 빅테크 기업들은 팬데믹 이후 대규모 정리해고를 진행했으며, 이에 따라 엔지니어들의 협상력이 약화되었음
          + 기업들은 사무실 복귀가 생산성을 높일 것이라고 주장하지만, 동시에 사무실 공간에 대한 막대한 투자를 회수하기 위한 전략적 이유도 포함되어 있음

   출퇴근 및 점심, 저녁 시간 포함해서 주 60시간이면 킹정

   60시간..

   미국 쪽도 52시간 이상 일하나...

        Hacker News 의견

     * 불필요한 작업, 불필요한 회의, 형식적인 작업이 많지 않다면 40시간 이상 일할 필요가 없으며, 솔직히 32시간이면 충분함. AI 경쟁은 많은 시간이 아니라 질 높은 시간과 실제로 깊이 있는 시간으로 이겨낼 것임
          + Google은 대규모 변화와 AI/LLMs를 사용하여 생산성을 높이고 있으며, 훌륭한 인프라를 가지고 있어 60시간/주를 일해야 할 필요가 없음
          + 절망을 나타내는 끔찍한 방법임
     * Google이 무작위로 직원을 해고하는 상황에서 Sergei의 말로 인해 누가 60시간을 일하고 싶어할지 의문임. 해고가 동료들의 근무 습관보다 사람들을 더 사기를 꺾을 것임
          + 이런 종류의 권고는 2023년 이전에 필요했음
     * 7am-7pm
          + 60시간/주 근무는 교통 등을 고려할 때 가족이 없는 20대에게 고된 노동을 요구하는 것임
          + 물론 Google의 권리임
          + 이로 인해 다른 회사에 훌륭한 인재들이 열릴 수 있기를 바람. Google의 손실이 다른 회사의 이익이 되기를 희망함
     * 40시간은 이미 충분히 많은 시간임. 현재 직원을 희생시키기보다는 더 많은 사람을 고용해야 함
     * 40시간 주급에 대해서는 당연함
     * 평생 가장 중요한 기술을 개발하는 선도 기업에서 연간 100만 달러 이상을 벌 수 있다면 정말 기쁠 것임. 그런 급여가 주는 편리함으로 주당 20시간을 쉽게 회복할 수 있을 것임
          + 불행히도 이 분야에서의 나의 기술은 열정에 비해 부족함
     * 이 업계에서 약 30년 동안 일해왔으며, 매번 변화나 골드 러시가 있을 때마다 경영진/소유주/주주로부터 같은 노래와 춤을 봄. 적절히 동기 부여되고 집중된 팀과, 경영 실패, 예기치 않은 사업 변화, 단순한 불운을 직원에게 떠넘기는 팀 간에는 큰 차이가 있음. 이는 모욕적이고 문제를 악화시킴
          + 강경한 태도로 팀을 다루는 것은 팀을 불순종하는 아이들로 만드는 방법임. 이 경우, 사람들이 사무실에서 주당 60시간을 일하지 않는다는 이유로 문제가 발생한다고 생각하지 않음
          + 1440억 달러의 가치가 있는 사람이 자신의 부하들이 더 많은 돈을 벌기 위해 자신을 희생하지 않는다고 화를 내는 것은 더욱 나쁨
     * 그는 주당 몇 시간을 일하는가? 그는 시간당 얼마나 벌고 있는가?
     * 내 생각: 올바른 기술을 가지고 있다면 결코 실직하지 않을 것임
     * 아무도 Googlers가 AI를 구축하기 위해 50% 더 벌어야 한다고 말하지 않음

   셀프 해고를 위해 60시간 일하라니....하하
"
"https://news.hada.io/topic?id=19576","4개의 클래식 Command & Conquer 타이틀이 이제 오픈 소스로 제공됩니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            4개의 클래식 Command & Conquer 타이틀이 이제 오픈 소스로 제공됩니다.

   요약
   EA는 자사의 네 가지 고전 Command & Conquer 타이틀의 소스 코드를 공개해 GPL 라이센스 하에 무료로 제공하게 되었습니다.
   공개된 타이틀에는 Command & Conquer와 Red Alert의 원본 소스 코드, SAGE 엔진을 사용하는 Command & Conquer: Renegade와 Command & Conquer: Generals가 포함됩니다.
   OpenRA 및 OpenSAGE와 같은 팬 프로젝트가 이들 타이틀의 코드 근사치를 생성했으나, 이제 원본 소스 코드를 활용할 수 있게 되어 비디오 게임 보존 및 개발자들에게 큰 혜택이 됩니다.
   소스 코드 복구 및 복원 작업은 EA 기술 이사 Brian Barnes, Respawn 프로듀서 Jim Vessella, 및 C&C 커뮤니티의 오래된 멤버 Luke Feenan의 공동 노력으로 이루어졌습니다.
   EA는 또한 최신 Command & Conquer 타이틀에 Steam Workshop 지원을 추가하고 모딩 도구 팩을 제공합니다.
   이 모딩 도구 팩은 SAGE 엔진을 사용하는 모든 C&C 타이틀의 소스 XML, Schema, Script, Shader, 및 맵 파일을 포함합니다: C&C Renegade, C&C Generals & Zero Hour, C&C 3 Tiberium Wars 및 Kane’s Wrath, C&C Red Alert 3 & Uprising, C&C 4 Tiberian Twilight.
   사용자는 이 도구를 통해 새로운 맵과 자산을 만들고 더 근본적인 변경을 가할 수 있으며, 높은 주사율 지원이나 초광각 해상도와 같은 기능을 추가할 수 있습니다.
   이 발표에 맞춰 EA는 Command & Conquer: Generals와 Renegade의 알파 게임플레이 및 미사용 아카이브 영상을 포함한 35분짜리 비디오를 공개했습니다.
   이 자산 및 도구 제공이 새로운 RTS 타이틀 개발을 자극하여 고전의 전통을 이어가기를 기대합니다.
   요약은 AI가 다시쓰기하여 생성한 내용으로 부정확한 내용 또는 의미가 축약된 내용을 포함할 수 있습니다. 자세한 내용은 원본을 참조해 주세요.

   브리핑
   EA는 Command & Conquer 시리즈의 네 가지 고전 타이틀의 소스 코드를 GPL 라이선스 하에 무료로 공개했습니다. 이번 공개로 팬 프로젝트는 원본 소스 코드를 활용할 수 있어 비디오 게임 보존과 개발자들에게 큰 혜택이 될 것으로 기대됩니다. 또한 EA는 최신 Command & Conquer 타이틀에 Steam Workshop 지원을 추가하고 모딩 도구 팩을 제공하여, 사용자들이 새로운 맵과 자산을 만들고 게임에 다양한 기능을 추가할 수 있도록 합니다.

   C&C는 너무 옛날 것이라 스크린샷이 없군요. ㅋ
"
"https://news.hada.io/topic?id=19500","Github 스캠 조사: 데이터를 훔치는 수천 개의 'Mod'와 '크랙'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Github 스캠 조사: 데이터를 훔치는 수천 개의 'Mod'와 '크랙'

     * GitHub에 ""mods""나 ""cracks"" 형태로 위장된 수많은 리포지토리가 존재하며, 사용자가 다운로드하면 컴퓨터 내 민감 정보를 탈취하는 사기(Scam)임
     * Roblox, Fortnite, FL Studio, Adobe Photoshop 등 인기 프로그램과 게임 이름을 이용해 ""무료 다운로드""나 ""크랙 버전""처럼 홍보하고 있음
     * 이 악성 파일을 실행하면 Redox Stealer 같은 정보를 수집하는 멀웨어가 작동함
     * 탈취된 정보는 Discord 서버나 Anonfiles 등의 공유 사이트로 전송되어, 암호화폐 지갑이나 소셜 미디어 계정 등을 훔쳐가는 구조임
     * GitHub 검색으로도 이런 리포지토리를 쉽게 발견할 수 있으며, 실제 규모는 최소 천 개 이상으로 추정됨
     * GitHub에 공개 이슈로 ""바이러스""나 ""맬웨어""라 경고하는 경우도 있으나, 전체의 10% 정도밖에 되지 않아 많은 사용자가 위험에 노출되는 상황임

TL;DR

     * 발견 과정
          + 소셜 엔지니어링 관련 포럼에서 GitHub에 악성 리포지토리를 대량으로 퍼뜨리는 구체적 가이드를 발견함
          + 가이드를 토대로 공격자들이 직접 만든 리포지토리까지 추적해봄
     * 규모
          + 1,115개 이상의 리포지토리를 찾았으며, 그중 구조가 의심스럽고 악성일 가능성이 큰 것만도 351개 이상임
          + 10% 미만의 리포지토리만이 ‘이슈(issue)’를 통해 경고받고 있으며 대부분은 멀쩡해 보이는 상태임
     * 악성코드 특징
          + Redox Stealer 계열로 보이며, 디스코드 웹훅을 통해 피해자 컴퓨터의 쿠키, 비밀번호, 암호화폐 지갑, 게임 계정 등 각종 민감 정보를 탈취함
          + 공유 사이트(예: Anonfiles)를 통해 압축 파일 형태로 전송된 뒤, 웹훅으로 후속 링크를 보내 분석하고 거래하는 식임

Some background

     * 텔레그램 봇 홍보
          + 작성자는 예전에 이용하던 TikTok 분석 봇 메시지에서 포럼 관련 홍보를 발견함
          + 해당 포럼은 별도의 초대나 Tor 접속 없이 이메일·비밀번호만으로 회원가입 후 불법적인 거래/가이드 열람이 가능함
     * 포럼 특징
          + 계정 거래(예: TikTok, Instagram, Facebook Ads 등)부터 사기용 ""affiliate"" 프로그램 관련 자료까지 자유롭게 공유하는 구조임
          + ransomware as a service(RaaS), CryptoGrab 등 이미 유명한 스캠도 많으나, GitHub를 통한 멀웨어 유포 가이드는 새롭고 충격적임
     * Redox Stealer
          + 텔레그램 등에서 유통되는 악성코드로, 상대적으로 간단한 파이썬 스크립트임
          + PC에서 찾을 수 있는 모든 민감 정보를 무더기로 수집해 Discord 서버로 전송하는 구조임

Github에 [트래픽을] 쏟아붓는 방법 A부터 Z까지

     * GitHub 계정 대량 확보
          + 1.5달러 정도로 계정을 구매하거나 직접 여러 개를 생성해 공격에 활용함
     * 악성 파일 업로드 방식
          + .zip, .rar 등으로 묶어 GitHub에 올리거나, README에 외부 공유 링크를 걸어 바이러스 검사를 회피함
     * README 템플릿
          + 실제 스크린샷, 영상, virustotal 검사 결과(위조) 등을 첨부해 믿음을 주도록 구성함
          + ChatGPT 등을 이용해 README 텍스트를 조금씩 바꿔 중복 검출을 피함
     * Topics 태그 활용
          + GitHub topic 기능을 이용해 게임 이름, crack, hack, cheat 등 키워드를 반복적으로 등록함
          + 검색 엔진에서 ""무료 크랙"" 등을 찾는 사람들에게 노출되기 쉽게 만듦
          + Banned topic인지 여부를 확인해 피하는 방식을 안내함

Redox Stealer 분석

     * 파일 실행 과정
          + 사용자가 리포지토리를 다운받고 악성 스크립트를 실행하면, PC 내부 정보 수집이 시작됨
          + ip, geolocation, 사용자 이름, 브라우저 쿠키, 비밀번호, Discord, Telegram, Steam, Riot Games 계정, 암호화폐 지갑 파일 등 다량 탈취 대상임
     * 수집 방식
          + 멀웨어가 sqlite DB 파일을 임시로 복사해 브라우저 쿠키, 비밀번호, Discord 토큰 등을 추출함
          + Metamask, Exodus 등 암호화폐 확장 프로그램 파일과 Steam, Riot Games 등 게임 계정 정보 파일을 별도로 압축해 업로드함
     * 데이터 전송
          + 탈취된 파일은 Anonfiles 같은 공유 서비스에 업로드되고, 그 링크나 정보는 Discord 웹훅을 통해 공격자에게 전달됨
          + 최종 목표는 판매 가치가 있는 계정(예: 암호화폐, 게임 아이템)이나 금융 정보(신용카드, PayPal 등)를 가져가는 것임

GitHub에서의 검색과 발견

     * 규모 추정
          + 한 사람만 300-500개 리포지토리를 올려도 하루 50-100건 이상의 피해 로그를 생성할 수 있다고 안내함
          + 실제로는 여러 사람이 이런 스키마를 동시에 진행 중일 가능성이 높아, 훨씬 더 많은 악성 리포지토리가 존재함
     * PoC(Proof of Concept) 스크립트
          + 작성자는 가이드에서 제시한 키워드(예: ""fortnite hack"", ""roblox cheat"" 등)를 조합해 GitHub 검색 API를 이용해 자동으로 리포지토리를 크롤링함
          + 약 2,100개 정도의 토픽 키워드로 확인했을 때, 1,155개 리포지토리가 확인됨
          + 그중 351개가 README와 .rar/.zip 파일 구조 등으로 볼 때 악성 가능성이 높다고 판단함
     * 문제점
          + 10% 미만 리포지토리에만 “이것은 악성”이라는 이슈가 남아있어 사용자 경고 기능이 부족함
          + 많은 사용자들이 정상 프로그램으로 착각해 실행할 위험이 큼

Conclusion

     * 온라인상의 불법 정보
          + Tor나 별도 초대 없이도 일반 웹에서 쉽게 접근 가능한 포럼이 존재함
          + Ransomware, crypto drainer 등 다양한 스캠이 활발히 공유되고 있음
     * Redox Stealer의 단순성
          + 수백~수천 줄의 파이썬 코드만으로 광범위한 정보를 자동 수집해 공격자에게 전송함
          + 기술적으로 난도가 높지 않아 쉽게 대량 유포되는 문제임
     * GitHub 측의 대처 필요성
          + 이슈로 악성 여부가 공개된 리포지토리조차도 그대로 방치된 경우가 많음
          + GitHub에서 적극적인 모니터링과 차단을 시행해야 피해가 줄어들 것으로 보임
     * 마무리
          + 게임, 프로그램 크랙 등을 다운받으려 할 때는 오픈소스, 바이러스 검사 여부를 꼼꼼히 확인해야 하는 상황임
          + 작성자는 추가적인 스캠/사기 광고 관련 후속 분석을 예고함

요약

     * GitHub를 이용한 악성코드 유포중 : 대부분 ""무료"", ""크랙"", ""mod""라는 명칭을 쓰며, 실제로는 Redox Stealer를 포함함
          + Redox Stealer는 쉽고 간단해 누구나 대량으로 배포하기 쉬움움
     * 주요 피해 대상 : 암호화폐 지갑, Steam/Riot Games 계정, PayPal, Facebook, Twitter 등 폭넓은 계정 정보임
     * 예방 수단
          + 공신력 있는 출처에서만 다운로드하기
          + 수상한 링크나 README를 면밀히 확인하기
          + GitHub Issues나 별점, 다른 사용자 리뷰 여부를 확인하기
          + 백신 및 최신 보안 패치 유지하기
     * 포럼 기반 스캐밍 확산
          + 낮은 진입장벽으로 누구나 가이드 입수 후 악성 스크립트 유포가 가능함
          + 하나의 공격자가 여러 계정을 사들여 수백 개 리포지토리를 올리는 식으로 확산됨
     * GitHub와 보안 커뮤니티의 책임
          + 악성 리포지토리 식별·차단 시스템 강화 필요성
          + 일반 사용자의 경각심 제고가 필수임

     * ""Crack""이나 ""mod""를 무료로 제공한다는 GitHub 리포지토리는 항상 의심해야 하는 상황
     * 스프레드시트(링크 참조)에는 작성자가 수집한 1,000개 이상의 의심 리포지토리 목록이 존재함
     * 모든 악성코드는 단일 목적(재정적 이득)으로 연결되며, 빠르고 규모 있는 유포가 특징임

        Hacker News 의견

     * Microsoft는 그들의 생태계에서 불필요한 것들을 제거하는 데 일반적인 문제가 있음
          + feedback.azure.com 포털에 스팸 및 악성코드 댓글과 링크가 가득 차 있음
          + 내부 팀조차 이를 해결할 사람을 찾지 못함
     * Discord 웹훅을 통해 새로 손상된 시스템을 알림
          + Discord는 학대 신고에 대해 반응이 빠름
          + 간단한 스크립트를 작성하여 웹훅 링크를 추출하면 계정을 차단할 수 있을 것임
          + 과거 경험에서 Discord는 불법 목적으로 참여한 사람들의 계정을 차단하는 데 적극적이었음
     * Microsoft가 어느 정도 책임이 있음
          + Windows Defender가 실제 악성코드가 없어도 ""Win32/Keygen"" 경고를 발생시킴
          + 이는 사용자들이 안티바이러스를 끄도록 훈련시킴
          + 잘못된 긍정이 실제 긍정을 무시하게 만들어 시장을 형성함
     * 악성코드 저장소를 삭제해야 하는 이유에 대한 질문
          + 저장소 자체는 해를 끼치지 않으며 연구에 가치가 있음
          + GitHub가 제거해도 다른 방법으로 배포될 것임
          + ""주의! 이 저장소가 주장하는 것을 하지 않을 수 있음""이라는 배너가 더 적절할 수 있음
     * 재미있는 사실: Discord 웹훅을 발견하면 삭제할 수 있음
          + curl -X DELETE 명령어 사용
     * Microsoft의 지원은 비극적으로 형편없음
          + GitHub에 수년간 응답 없는 열린 이슈가 넘쳐남
          + Azure의 기술 지원도 매우 나쁨
          + 계정 접근을 잃고 복구할 수 없는 공포 이야기가 온라인에 많음
     * 문제의 핵심은 애플리케이션이 OS 수준에서 격리되지 않음
          + Minecraft 모드를 설치해도 컴퓨터의 다른 파일에 접근할 수 없어야 함
          + Excel에서 스프레드시트를 열면 해당 파일과 설정 파일에만 접근 가능해야 함
          + Android처럼 앱이 파일 접근을 명시적으로 요청해야 함
     * GitHub의 악용 신고 시스템의 효과에 대한 큰 질문
          + 1,000개 이상의 악성 저장소가 몇 달 동안 지속될 수 있다면 자동 스캔이 부족하거나 사용자 신고에 너무 의존하는 것일 수 있음
     * Plants vs. Zombies 모드를 설치하는 데 도움 요청받음
          + GitHub 저장소에서 다운로드 가능한 여러 모드를 발견했으나 신뢰할 수 없어 다운로드하지 않음
          + 지금 생각해보면 저자가 설명한 악성코드 종류였던 것 같음
     * GitHub 저장소에서 악성코드를 발견하면 Abuse Report 페이지를 통해 직접 신고 가능
          + GitHub는 Acceptable Use Policy를 위반하는 저장소를 제거함
          + 응답 시간은 다를 수 있음
          + 악성코드가 적극적으로 사용되고 있다면 보안 조직이나 CERT 팀에 신고 고려 가능
"
"https://news.hada.io/topic?id=19575","초기 스타트업에서 엔지니어로 일한다는 것은","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        초기 스타트업에서 엔지니어로 일한다는 것은

   스타트업 열풍이 한 차례 지나간 2025년이지만 여전히 (초기) 스타트업의 엔지니어들이 회사에서 무슨 역할을 맡아야 하는지는 잘 정리되어 있지 않습니다. 실리콘밸리에서도 비슷한 질문이 엔지니어들 사이를 맴돌고 있는데요.

   미국의 투자사 basecase capital에서 실제 사례를 들어 스타트업의 엔지니어 역할에 대해 잘 정리해준 글이 있어 번역해보았습니다. (초기) 스타트업의 엔지니어나 팀원들이 어떤 일을 하는지 궁금하신 분들이 읽어보시면 좋을 거 같습니다.
     * 스타트업에 초기에 합류한 엔지니어들의 역할은?
     * 초기 스타트업 엔지니어들이 가지면 좋은 역량
     * 스타트업 이후의 커리어 패스

   좋은 글이네요. 감사합니다.

   비슷한 헬로 스타트업 이라는 책이 있습니다.
   커리어패스와는 다른 기수, 문화에 대한 부분을 설명 합니다.

   기수.. 가 뭔가요? 👀

   목차를 보면 기술의 오타인 것으로 보입니다
"
"https://news.hada.io/topic?id=19528","중국, 보안 우려로 AI 리더들에게 미국 여행 자제 권고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    중국, 보안 우려로 AI 리더들에게 미국 여행 자제 권고

     * 중국 정부는 AI 기술을 경제 및 국가 안보의 핵심으로 간주하며, AI 연구자 및 기업가들의 해외 방문을 자제하도록 권고함
     * 중국의 AI 전문가들이 해외에서 국가의 기술 발전과 관련된 기밀을 유출할 가능성을 우려함
     * 미국과 중국 간 협상의 지렛대로 활용될 가능성을 경계, 특히 화웨이 임원이 캐나다에서 체포되었던 사례와 유사한 상황을 우려함

미·중 기술 경쟁과 자립 강화

     * 미국과 중국의 AI 기술 경쟁이 심화되면서, 중국 정부는 기업들에게 국가 이익에 충실할 것을 요구함
     * 미국의 반도체 수출 제한과 무역 관세 등으로 이미 양국의 기술 협력이 약화된 상황
     * 중국은 자국의 기술 산업을 자립적으로 키우려는 정책을 강화하는 중

AI 및 전략적 산업 종사자의 여행 제한

     * 명확한 여행 금지는 없으나, 중국 내 주요 기술 허브(베이징, 상하이, 저장성 등)에서 기업들에게 미국 및 동맹국 방문을 자제하도록 지침을 내림
     * AI 및 로봇공학 등 전략적으로 중요한 산업의 기업들은 해외 방문 시 사전 보고 및 귀국 후 활동 보고 의무 부과됨
     * 예를 들어, DeepSeek 창립자 량원펑은 2월 파리 AI 정상회의 초청을 거절했으며, 또 다른 주요 AI 스타트업 창립자도 미국 방문 계획을 취소함

중국 지도부의 기술 기업가 통제

     * 2월 17일, 시진핑 주석이 중국의 주요 기업가들과 회동하며 ""국가적 사명감을 가져야 한다""고 강조함
     * 해당 회의에는 DeepSeek의 량원펑 및 로봇 기업 Unitree Robotics 창립자 왕싱싱 등이 참석함
     * 중국 기업인들이 미국 또는 유명한 미국인들과 공개적으로 교류하는 것은 당국의 감시 대상이 될 가능성이 있음
     * 예를 들어, 2017년 알리바바 공동 창업자 마윈이 도널드 트럼프 대통령 당선 직전 만남을 가졌던 것이 이후 중국 정부의 강력한 규제 조치로 이어졌다는 분석이 있음

중국 정부의 우려와 향후 전망

     * 중국 당국은 미국 기업이 중국 기술을 인수하거나 라이선싱하는 것을 통해 기술이 유출되는 것을 걱정함
     * 부유한 중국 기술 인재들의 해외 이탈(브레인 드레인)도 주요 우려 사항 중 하나
     * 유라시아 그룹의 샤오멍 루는 ""기술 분야에서 인재 유출은 치명적인 영향을 미칠 수 있다""고 분석
     * 중국은 2025년 여름 자체 AI 정상회의를 개최할 예정이며, 외국 전문가들의 참여를 환영한다는 입장을 표명

        Hacker News 의견

     * 안타깝지만 이해할 수 있는 상황임
          + 미국과 중국의 AI 하드웨어 스타트업에서 일했으며, 두 나라의 정부 우려가 장벽이 될 수 있음
          + 규칙이 경쟁적 관점에서 비생산적일 수 있으며, 승-패 상황으로 바뀔 수 있음
          + 미국인으로서 중국 동료들은 매우 똑똑하고 친절한 사람들이었음
          + 국가 간 긴장이 있을 때 개인들은 자연적인 적이 아니라 친구임
          + DeepSeek가 AI 발전을 공유한 것은 다행스러운 일이며, 이러한 공유가 계속되기를 바람
     * 중국이 AI 기술을 국가 안보에 중요한 기술로 보고 있음이 흥미로움
          + 여러 국가들이 국가 안보와 관련된 직업을 가진 사람들에게 비슷한 지침을 제공함
     * 미국이 중국과 미국의 학자들을 체포하고 감금하는 것은 놀랍지 않음
          + 10년 전 중국에서 열린 회의에 대해 언급하지 않았다는 이유로 체포됨
     * 런던과 베를린이 기술 중심지였던 역사적 시기가 떠오름
          + 과학자들이 다른 나라의 연구를 읽지 않았으며, 방문 시 감시받을 수 있었음
     * 유명 회사에서 중국에 전자기기를 가져가지 말라고 권고했음
          + 악성 소프트웨어가 설치될 위험이 있었음
          + Tesla에 대한 규제를 강화하지 않은 이유가 궁금함
     * archive.ph가 차단된 곳에서 작동하는 링크 제공
     * 사람들의 탈출과 비밀 유출을 막기 위한 조치임
          + 국가 통제 회사의 직원들이 여권을 압수당하거나 출국 금지를 당함
     * 미국이 이유 없이 인재 유출을 선택한 것은 믿기 어려움
     * 최근 미국의 '도덕적' 손실로 인해 과학자와 엔지니어의 탈출이 있을지 궁금함
          + 과거 소련으로의 탈출 이유를 이해하기 어려우나, 당시에는 소련이 나쁘지 않다고 생각했을 수 있음
          + 최근 중국 과학자들이 미국을 떠나는 경향이 있어, 일부 사람들이 이 문제를 내부적으로 논의할 수 있음
"
"https://news.hada.io/topic?id=19543","OpenAI 창업자가 일상과 업무에서 AI를 활용하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenAI 창업자가 일상과 업무에서 AI를 활용하는 법

     * OpenAI를 공동창업한 Andrej Karpathy의 일반인을 위한 AI 강의 중 2/28에 올라온 How I use LLMs 를 캡처와 함께 요약
     * 다양한 시각화 자료와 카파시의 실사용 예제들에 큰 가치가 있기 때문에 글 요약만으로는 영상의 맛이 살아나지 않아 제작함


  여러 종류의 LLM이 있음

   ChatGPT는 가장 유명하고, 가장 기능이 많음. 그 외에는 이런 것들이 유명함
     * 구글의 Gemini
     * Meta의 Meta AI
     * MS의 Copilot
     * Anthropic의 Claude
     * xAI의 Grok
     * Perplexity
     * 중국의 DeepSeek
     * 프랑스 Mistral의 Le Chat

  ChatGPT는 어떻게 동작하는가

   LLM은 인터넷 문서 전체를 1TB로 손실 압축한 zip 파일과 유사. 이 안에 수조 개의 파라미터가 있는 인공신경망이 있고 그게 '다음 글자'를 확률적으로 뱉어냄

   이 압축파일은 크게 두 종류 학습을 해서 만듦

   사전 학습: 수천만 달러 + 3개월 이상 듦. 비용 많이 드니까 자주 못하고, 그래서 knowldge cutoff가 생김

   사후 학습: 훨씬 저비용으로 파인튜닝. 단순히 인터넷 문서를 뱉어주는 게 아니라 사용자의 질문에 답하는 Assistant로서 처럼 동작하게 만듦
     * 모범답안을 알려주는 지도학습(Supervised Fine-Tuning)
     * 생성된 답안에 대한 인간의 선호를 토대로 한 강화학습(Reinforcement Learning from Human Feedback)
     * 인간의 질문에 대한 Assistant의 이상적 답변을 토대로 한 강화학습(Reinforcement Learning on Conversation)

   ChatGPT에서 새 세션을 만들어 유저가 메시지를 입력하면 그게 토큰화되어 모델의 인풋으로 들어가고, 그걸 통해 LLM이 다음 토큰을 만듦. 그리고 이 대화(유저의 입력, ChatGPT의 출력)는 모두 Context Window 안에 저장됨.

   Context Window는 인간의 작업기억(Working Memory)와 유사하며, 인간과 마찬가지로 한계가 있음. Context Window가 길어질수록 부정확한 정보를 줄 가능성이 조금 더 높아지고, 다음 답변 생성도 조금 더 비싸짐(= 느려짐).

   따라서 꼭 필요하지 않다면 한 세션을 오래 유지하는 게 그리 좋은 선택은 아님

  언제 'Thinking' 모델을 써야 할까

   기존의 사전/사후 학습을 거친 LLM에, 복잡한 STEM(과학, 기술, 공학, 수학) 문제에 대한 답을 긴 사고 과정을 통해 답변할 수 있도록 추가로 강화학습한 모델

   여러 토큰을 뱉어내면서 '생각'을 하기 때문에 비용도 시간도 많이 걸리는 대신 복잡한 문제에 대한 답변 정확도가 급격히 올라감

   '생각'을 하는 모델이 문제를 꼭 정확히 푸는 것도 아니고, 반대로 '생각'이 없는 모델도 문제를 정확히 풀 수 있음에 주의(카파시가 준 복잡한 디버깅 문제를 모든 생각 모델은 성공했고 ChatGPT-4o는 실패했지만 , Sonnet 3.5, Gemini 2.0 Pro, Grok 3는 Thinking 없이도 성공)

   카파시는 일단 답변이 빨리 돌아오는 non-thinking 모델로 테스트해보고, 답변이 의심스러우면 Thinking을 써보는 식으로 사용한다고 함

  LLM을 돕는 도구들

    인터넷 검색

   인터넷 검색이 가능한 모델이 있고 아닌 모델이 있음. (꼭 검색이 아니더라도) 우린 항상 이 모델이 뭘 할 수 있는지 알고 써야 함

   검색은 가장 기본적으로는 Knowledge Cutoff 때문에 최신 데이터에 대한 답변을 할 수 없기 때문에 필요. 초기 ChatGPT에서 이게 안됐던 걸 Perplexity가 뚫어내서 많은 사용자를 모았음

   유저 쿼리에 따라 '이건 검색을 해야 한다'는 판단을 해서, 인터넷 검색한 결과를 토큰화해서 Context Window에 집어넣은 상태로 답변하는 것. (어떨 때는 명시적으로 검색해서 알려달라고 해야 할 수도 있음)

   카파시는 요즘 구글링 대신 Perplexity에 묻는 일이 많음. '이런 정보는 Perplexity에 물어봐야지' 하는 습관이 생김
     * 구글링해서 최상위 링크 몇 개 클릭해서 알 수 있을 것 같다 (오늘 주식시장 열리냐, 화이트 로투스 시즌 3 언제 촬영했냐 등)
     * 정보가 계속 바뀌는데 최신화된 정보가 필요하다 (Vercel이 Postgresql 지원하냐, 솔로지옥 시즌 4 출연 배우들 지금은 뭐하냐 등)

    딥 리서치

   간단히 얘기하면 인터넷 검색 + Thinking임. 길면 몇십분간 검색하고, 그렇게 얻은 정보를 Thinking을 통해 정리해서 리포트를 만들어줌.

   ChatGPT 딥리서치의 특징은 더 좋은 리포트를 만들기 위해, 질문자의 의도는 뭐고 어디에 집중할지 물어본 다음 시작한다는 것. 유사 기능으로 Perplexity에도 딥 리서치가 있고, Grok3에도 '딥 서치'가 있음. 각각의 속도와 품질이 다 다름.

   인터넷 검색과 마찬가지로 여기서도 답변이 정확하지 않을 수 있음에 주의. 출처를 직접 확인해볼 필요가 있으나, '굉장히 유용한 초안'이긴 함

   카파시는 20여개 정도 딥리서치 해봤는데 ChatGPT 답변이 가장 (유의미한 정보로) 길어서 가장 좋았음. 카파시가 던졌던 주제들:
     * 건강기능식품의 특정 성분에 대한 이해
     * 브레이브 브라우저와 아크 브라우저 중 보안과 프라이버시에 더 좋은 쪽이 뭔지
     * 생쥐의 수명을 증가시키는 최신 기술이 뭐지? 어떤 개입 방식들이 시도되었나? 나는 ML 쪽에서 왔는데 평가 지표를 설정하고 높이는 데 익숙함. 생쥐의 수명도 그런 식으로 평가하나?
     * 미국 내의 모든 메이저한 LLM 연구실에 대한 표를 만들어줘. 언제 생겼고, 몇명이 일하고, 펀딩 잘 받았는지.

    코드 인터프리터

   LLM이 코드를 작성해서 실행한 다음, 코드의 결과물을 컨텍스트에 넣어서 답변해주는 것. 파이썬도 있고 자바스크립트도 있음. 잘 쓰면 아주 강력함. 똘똘한 주니어 하나 마련했다보 보면 됨
     * ChatGPT 4o로 데이터 분석하기
     * Claude로 책 내용 요약한 플래시카드 앱 만들기
     * Claude로 책 내용 시각화하는 Mermaid 다이어그램 만들기
     * Cursor로 틱택토 게임 만들고 채팅만으로 승자 효과 추가하는 개선하기

  모달리티

   LLM과 텍스트만 주고받는 게 아니라 오디오, 이미지, 비디오도 가능

    오디오 입출력

   오디오 입력은 카파시는 SuperWhisper, WisprFlow, MacWhisper 등 맥 받아쓰기 앱 활용. 예전같았으면 타이핑했을 것의 대략 절반은 말로 한다고 함.

   오디오 출력은 대개 앱 내에서 기능 제공. 화면 받아쓰기 해도 됨

   근데 이것들은 여전히 근본적으로는 텍스트로 주고받는 것. Speech-to-Text 후 다시 Text-to-Speech 해야 하니까 느림.

   진짜로 오디오만으로 LLM과 주고받는 것도 가능. 오디오 정보를 토큰화하는 것. 이걸 카파시는 True Audio라고 부르고, ChatGPT에서는 Advanced Voice Mode라고 부름.
     * 다양한 억양과 속도로 얘기해보게 하고, 동물 소리 흉내도 시키는 대화 시연 영상

   Grok3도 모바일 앱에서 Advanced Voice Mode를 제공함. 섹시 모드, 욕설 모드 등 노빠꾸 모델이 많아서 어떤 면에서는 더 재밌고 흥미롭기도 함
     * 카파시의 Grok3 대화 시연 영상

   NotebookLM은 파일을 업로드해서 분석하고, 그 내용을 기반으로 여러 진행자가 자연스러운 음성으로 팟캐스트를 진행하게 하는 것도 가능. 사이에 내가 개입해서 질문도 자유롭게 할 수 있음(Interactive Mode).
     * 카파시는 본인의 전문성이 강하지 않지만 호기심은 있는 분야들에 팟캐스트 만들어 듣는 걸 자주 했음. 자기가 그렇게 만든 팟캐스트를 Histories of Mysteris라는 이름으로 스포티파이에도 올려둠

    이미지 입출력

   카파시는 OCR할 때 항상 정확히 읽었는지 확인하고 나서 내용 물어보는 습관이 있음. 언제나 잘못 읽었을 가능성이 있기 때문.

   실제 용례: 건강기능식품 영양 성분 확인, 채혈 검과 해석, 수식의 Latex 버전 얻기, 밈 해석하기 등

   이미지 출력은 DALLE, IdeoGram 등으로 함. 이미지 생성은 LLM에 내장된 기능은 아니고 별도의 모델에 프롬프트를 넣어서, 출력된 이미지를 다시 가져오는 역할.

    비디오 입출력

   오디오처럼, Advanced Voice + Video를 입력으로 써서 대답하게 할 수 있음. 모바일 앱에서 가능. LLM이 진짜로 영상을 인풋으로 가져가는 대신 영상을 일정 프레임 별로 가져가서 이미지 입력으로 변환하는 식일 것

   카파시 본인은 자주 쓰진 않으나 부모님 세대처럼 기술적 배경이 부족한 사람들도 바로 질문 답변할 수 있으니 좋음
     * 시연 영상

   비디오 출력은 Sora를 비롯한 여러 모델이 있음. 카파시는 현재는 Google Veo 2가 가장 현실적이라고 느낌
     * 9개 영상 모델 비교

  추가 기능들

    메모리

     * 사용자와 문답하다가 '이건 기억해두면 더 좋은 답변을 하겠다' 싶은 것, 또는 사용자가 명시적으로 기억해달라고 한 건 Memory Updated 라는 문구와 함께 저장됨
       = 이것들은 새 채팅 만들 때마다 Context Window에 들어간다고 보면 됨. 전체 목록 보고 관리하는 것도 가능

    Customize

     * 사용자를 뭐라고 부르고, 어떤 일 하고, 어떻게 답변하길 원하고... 등을 담아두면 이것 또한 컨텍스트 윈도우에 들어간 채로 답변함
     * 카파시는 요즘 한국어를 배우고 있기 때문에 관련 내용을 넣어두는 실험을 해보고 있음

    Custom GPTs

   카파시는 한국어 공부를 위한 GPTs를 여러 개 만들어서 활용하고 있음. 간단한 프롬프트에 Few-Shot 사용.

   Korean Vocabulary Extractor: 한글 문장을 쪼개서 용어들을 추출해줌

   Korean Detailed Translator: 위와 유사한데 단어 바이 단어로 매칭해서 번역해줌

   KoreanCap: 이미지 캡처해서 주면 OCR 후 번역하고, 발음까지 포함해서 단어별로 쪼개줌

     '다음 글자'를 확률적으로 뱉어냄

   이보다 더 적절한 설명이 있을까 싶습니다.

   한국어 공부하는 건 신기하네요

   https://youtube.com/watch/… 자막으로 보세요
"
"https://news.hada.io/topic?id=19478","제프 베조스의 워싱턴 포스트 의견 섹션 통제 강화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      제프 베조스의 워싱턴 포스트 의견 섹션 통제 강화

     * 제프 베조스는 2025년 2월 26일, 워싱턴 포스트 의견 섹션이 ""개인 자유와 자유 시장""을 옹호하는 방향으로 운영될 것이라고 발표했음
     * 반대되는 견해는 더 이상 신문의 의견 섹션에서 다루지 않을 것이라고 밝혔음
     * 베조스는 의견 편집자 데이비드 시플리에게 이 새로운 방향을 이끌 기회를 줬으나, 시플리는 이를 거절하고 사임했음
     * 베조스는 ""이것은 중요한 변화이며, 쉽지 않을 것이다 100의 헌신이 필요하며, 나는 그의 결정을 존중한다""고 밝힘

베조스와 트럼프 행정부의 관계 변화

     * 베조스는 2013년부터 워싱턴 포스트를 소유하고 있으며, 첫 번째 트럼프 행정부 당시 신문은 트럼프에 대한 비판적 보도를 지속했음
     * 이에 대해 트럼프는 반독점 조사를 위협하며 아마존을 공격했고, 결국 마이크로소프트가 정부 계약을 따내는 결과를 초래했음
     * 그러나 최근 베조스는 트럼프를 공개적으로 지지하는 모습을 보이고 있음
     * 아마존은 트럼프의 취임 기금에 100만 달러를 기부했으며, 베조스는 트럼프의 취임식에 참석했음
     * 베조스는 2024년 대선에서 워싱턴 포스트가 카말라 해리스를 지지하는 사설을 게재하는 것을 막았음
     * 2023년, 바이든 행정부의 FTC와 여러 주 검찰총장이 아마존을 반독점법 위반으로 소송을 제기했으며, 재판은 2026년 10월로 예정됨

베조스의 논리와 내부 반발

     * 베조스는 ""과거에는 신문이 모든 견해를 담아야 한다고 여겼지만, 이제 인터넷이 그 역할을 한다""며 기존의 다양한 관점을 포괄하는 방식이 시대에 뒤떨어졌다고 주장했음
     * ""미국의 성공에는 경제적 자유가 큰 역할을 했다 자유는 윤리적이며, 창의성과 번영을 촉진한다""고 강조했음
     * 그러나 워싱턴 포스트 경제 담당 기자 제프 스타인은 X트위터에서 ""베조스가 의견 섹션에 대한 강력한 개입을 했다""며 우려를 표명했음
     * 스타인은 ""뉴스 보도에는 아직 개입이 없지만, 만약 그런 일이 발생하면 즉시 사임할 것이며 이를 공개하겠다""고 밝힘

언론계의 비판

     * 전 워싱턴 포스트 편집장 마틴 배런은 베조스가 자신의 정치적 입장과 동일한 의견만을 실으려 한다고 강하게 비판했음
     * 배런은 ""베조스는 개인 자유를 보호하는 것이 아니라, 정부 권력을 이용해 반대자를 탄압하는 대통령에게 굴복한 것""이라고 비판했음
     * 또한 ""그는 아마존과 블루 오리진 같은 자신의 사업적 이익을 워싱턴 포스트의 원칙보다 우선시했다""고 주장했음

다른 언론사와의 비교

     * LA 타임스의 소유주 패트릭 순시옹도 유사한 방식으로 의견 섹션을 통제하려 하면서 편집자들의 사임을 초래한 바 있음
     * 언론계에서는 베조스의 결정이 독립적인 저널리즘의 원칙을 훼손할 수 있다는 우려가 커지고 있음

        Hacker News 의견

     * 전국 신문이 이상하게 집착하는 모습임. Will Lewis의 후속 편지는 ""pillars""의 일일 출현에 더욱 투명하게 집착하고 있음. ""개인 자유""는 ""시민 자유""와는 눈에 띄게 다른 새로운 개념임. 이는 Bezos가 원하는 바를 잘 보여줌. 결국, 논의의 질이 떨어질 것으로 예상됨. 모순된 의견을 두려워하는 것이 지적 쇠퇴의 첫걸음임
     * Post에서 큰 변화가 일어남. 수십 년 동안 정치적 좌우와 다양한 국제적 관점을 충실히 제공해왔음. 이제 모든 것이 끝날 것 같음. 앞으로의 기고문은 신중하게 선별된 Post 직원들에 의해 작성될 것임
          + 이는 Post가 미국 수도에 위치한 또 다른 지방 신문이 될 것임을 시사함. 이 전략의 대변화는 신문의 시장 규모와 속보 명성을 확실히 감소시킬 것임
          + 이는 신문의 탐사 저널리즘에 대한 헌신이 크게 감소할 것임을 예고함. 이는 대체 불가능한 것임. (특히 NY Times의 탐사가 Post의 오랜 노력에 비해 그림자에 불과하게 되었기 때문에 더욱 그러함. 예를 들어, Snowden의 폭로 보도에서 형편없는 일을 했음)
          + [참고로, 나는 Post의 구독자였고 그 전에도 오랜 독자였지만, Bezos가 2024년 대선 후보에 대한 Post의 지지를 갑자기 철회했을 때 항의로 구독을 취소했음. 이제 영원히 멀리할 것 같음]
     * ""만약 대답이 '당연히 예'가 아니라면 '아니오'여야 한다고 그에게 제안했음""이라는 발언은 우려스러움. 이는 자신이 관대하고 공정하다고 믿는 사람들이 하는 발언임. 이는 ""예스맨""으로 둘러싸이는 방법임. 이것이 우리가 처한 곤경과 연결되어 있다고 생각함. 이 감염은 많은 기업에 존재함. 싸우기 어려움. 우리는 확인을 원하지만 많은 ""예스맨""은 단지 생존하려고 함 (하지만 일부는 조작적임). 그러나 이것은 항상 사업의 죽음을 초래함. 너무 커서 실패할 수 없다는 것은 경쟁을 억제하는 환경 때문에 느린 죽음을 의미함. Bezos가 장려한다고 주장하면서 만드는 환경이 아이러니함. 성인으로서 우리는 여전히 젊다고 느끼는데, 이것이 기업에도 해당되는지 궁금함
     * 거대 기업들이 우리의 미디어를 통제하도록 허용한 결과임. 미국이 공정성 원칙을 다시 도입하길 바람. 그렇지 않다면, 이 회사들과 그들의 모든 모회사/자회사가 3개 이상의 미디어 회사를 소유하지 못하도록 강제해야 함. 미디어란 라디오, TV, 케이블, 스트리밍, 영화 제작 및 소셜 미디어를 의미함
     * 적어도 그는 그것에 대해 솔직함. 솔직히 말해서, 최근 정치적 영역에서 자유 시장이 약간 부정적인 단어가 된 것 같음. Bezos가 그것을 옹호하는 것에 대해 너무 불평하지 않을 것임. 도움이 필요함. 그들이 어떤 관점을 밀어붙일지 지켜봐야 할 것 같음
     * ""인터넷에서 책""을 좋아했다면 이 천재 창립자의 최신 발명품인 Cato Institute Blog를 좋아할 것임. 하지만 비용을 지불해야 함
     * ""민주주의는 어둠 속에서 죽는다""는 단순한 모토가 아니라 비즈니스 계획이라고 오랫동안 말해왔음. 이것은 그것을 가속화하고 명확히 하고 있음
     * 거의 50년 동안 Post 구독자였고, 그 기간 동안 의견 페이지 소비가 점차 감소했음. 뉴스 콘텐츠가 예전으로 돌아가길 바람
     * 그의 소유권이 편집 결정에 절대 영향을 미치지 않을 것이라고 약속한 것이 너무 기쁨
     * 항상 엘리트들이 큰 뉴스 조직을 통제한다고 느꼈음. Hearst, Bezos, 모두 부유한 사람들임. 그들은 작은 뉴스 조직을 삼키고 각 조직을 자신의 편집 선호에 맞춤. Bezos는 새로운 Hearst임. 필요한 것은 더 많은 지역 뉴스와 사람들이 지역 뉴스를 선호하는 것임. 이메일로 매일 마을 신문을 다시 가져와야 함. 우리는 전 세계에서 휴대폰을 내려다보느라 바로 앞에서 일어나는 뉴스를 보지 못함
"
"https://news.hada.io/topic?id=19580","사전 훈련 없이사전 훈련 없이 ARC-AGI

ARC-AGI란 무엇인가?

     * ARC-AGI는 2019년에 도입된 인공지능 벤치마크로, 최소한의 예시로부터 추상적인 규칙을 추론하고 일반화하는 시스템의 능력을 테스트하기 위해 설계됨.
     * 데이터셋은 IQ 테스트와 유사한 퍼즐로 구성되며, 각 퍼즐은 기본 규칙을 보여주는 여러 예제 이미지와 그 규칙을 적용해야 하는 테스트 이미지를 제공함.
     * ARC-AGI를 해결하는 것은 인공지능의 발전을 방해하는 현재의 도전 과제를 조명하는 것이 목적임.

우리의 솔루션 방법

     * 손실 없는 정보 압축이 ARC-AGI 퍼즐을 해결하는 효과적인 프레임워크가 될 수 있다고 제안함.
     * 퍼즐의 더 효율적인 압축이 더 정확한 솔루션과 상관관계가 있음.
     * CompressARC는 신경망을 디코더로 사용하며, 인코딩 알고리즘은 다른 네트워크가 아닌, 디코더의 매개변수와 입력 분포를 최적화하여 가장 압축된 퍼즐 표현을 얻음.

네트워크 학습 관찰: 상자 색칠하기

     * 인간의 솔루션: 입력이 상자로 나뉘고 출력에서도 상자가 유지되며 색칠됨을 인식함.
     * CompressARC 솔루션: 학습 단계별로 네트워크가 퍼즐의 규칙을 점차적으로 이해하고 적용함.

우리의 솔루션 방법 도출 방법

     * 손실 없는 정보 압축은 가능한 한 적은 비트로 정보를 표현하면서도 그 정보를 비트 표현으로부터 재구성할 수 있도록 하는 것임.
     * ARC-AGI 데이터셋을 가장 잘 압축하는 시스템이 어떤 답을 압축 해제할지를 알아내고자 함.

신경망의 도움

     * 프로그램 공간을 검색하는 대신, 프로그램을 선택하여 입력 공간의 다양성에 위임함.
     * 신경망의 전방 패스를 실행하는 프로그램을 작성하고, 입력 공간을 통해 검색함.

아키텍처

     * ARC-AGI 퍼즐을 디코딩하기 위한 신경망 아키텍처를 설계함.
     * 가장 중요한 특징은 대칭 규칙을 따르는 등가성임.

결과

     * CompressARC는 훈련 세트에서 34.75%, 평가 세트에서 20%의 성과를 기록함.

해결할 수 있는 퍼즐과 해결할 수 없는 퍼즐

     * CompressARC는 특정 능력을 사용하여 가능한 한 많은 것을 알아내려고 시도함.
     * 예를 들어, 패턴을 짧은 거리로 확장할 수 있지만 긴 거리로는 확장할 수 없음.

상자 색칠하기: 사례 연구

     * 훈련 중 재구성 오류가 매우 빠르게 감소하고 평균적으로 낮게 유지됨.
     * CompressARC가 퍼즐을 해결하는 방법을 이해하기 위해 z에 저장된 표현을 분석함.

우리의 작업을 개선하는 방법

     * CompressARC의 릴리스 당시 시도하거나 시도하지 않은 여러 아이디어가 있었음.
     * 퍼즐 간의 가중치 공유를 통한 공동 압축 등 몇 가지 아이디어는 여전히 유효하다고 생각함.
"
"https://news.hada.io/topic?id=19548","Leetcode Interview 치팅 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Leetcode Interview 치팅 프로그램

   트위터를 통해 직접 아마존의 코딩 테스트를 프로그램을 통해서 베껴서(cheating) 통과한 것을 보여주고,

   직접 프로그램을 만들어서 공개했습니다.

   한국계 미국인으로 추정되는데 해당 트위터에 스토리가 자세하게 나와있네요.

   재미있습니다.

   https://x.com/im_roy_lee

   https://x.com/im_roy_lee/status/1905063484783472859?s=46
   1년 정학을 당했나 보네요
"
"https://news.hada.io/topic?id=19561","초등학생을 위한 요즘 LLM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            초등학생을 위한 요즘 LLM

     * 초등학생도 이해할 수 있게 간단하게 풀어쓴 AI 이야기
     * RAG 란 무엇인가
     * Function Calling 이란 무엇인가
     * 누구나 쉽게 따라할 수 있는 Agentic AI 만들기
"
"https://news.hada.io/topic?id=19574","인스타그램 SEO는 무엇이고 어떻게 하는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        인스타그램 SEO는 무엇이고 어떻게 하는가

     * Instagram SEO는 Instagram 프로필과 콘텐츠를 최적화하여 더 많은 사람들이 발견할 수 있도록 하는 과정임
     * 이를 통해 사용자의 피드, 탐색(Explore), 릴스(Reels), Instagram 검색 결과 등에서 유료 광고 없이 노출도를 높일 수 있음
     * 예를 들어, 누군가가 Instagram 검색창에 '인테리어 디자인'을 입력하면 다양한 프로필, 캡션, 해시태그 등이 검색 결과로 나타날 수 있음

Instagram SEO의 작동 원리

     * Instagram은 사용자가 관심을 가질 만한 콘텐츠를 연결하기 위해 알고리듬을 사용하며, 주요 고려 요소는 다음과 같음:
          + 검색어: 사용자가 입력한 키워드를 사용자 이름, 바이오, 캡션, 해시태그, 위치 등과 매칭함
          + 사용자 활동: 사용자가 팔로우하는 계정, 조회한 게시물, 이전 상호작용(좋아요, 댓글, 공유 등)을 기반으로 개인화된 결과를 제공함
          + 인기 게시물: 좋아요, 댓글, 공유, 팔로우 등이 많은 게시물, 계정, 해시태그는 검색 결과 상위에 나타날 가능성이 높음
     * 탐색(Explore), 릴스(Reels), 스토리(Stories), 피드(Feeds) 등은 각각 고유한 랭킹 신호를 가지며, 사용자의 활동과 콘텐츠의 참여도에 따라 노출이 결정됨

Instagram과 Google에서 가시성을 높이는 방법

     * Instagram SEO 기술 중 다수는 Google SEO에도 유용하며, 특히 관련 키워드 사용이 중요함

  1. 프로필을 키워드로 최적화하기

     * Instagram은 사용자 이름, 프로필 이름, 바이오에 사용된 키워드를 고려하여 계정의 주제를 파악함
     * 예를 들어, '피트니스 코치 런던'을 검색하면 '코치', '피트니스 코치', '런던'과 같은 키워드를 포함한 프로필이 상위에 나타남
     * 이러한 키워드 사용은 Google 검색 결과에서도 가시성을 높일 수 있음
     * 키워드를 선택할 때는 비즈니스 유형, 전문 분야, 위치 등을 반영해야 함
          + 비즈니스 유형: 예: '베이커리', '맞춤 케이크'
          + 전문 분야: 예: '비건 레시피', '초보자 요가'
          + 위치: 예: '뉴욕 사진작가', '토론토 개인 트레이너'

  2. 캡션과 해시태그에 키워드 추가하기

     * 캡션에 관련 키워드를 추가하면 Instagram이 콘텐츠를 이해하는 데 도움이 되며, 검색 결과나 다른 영역에 노출될 가능성을 높임
     * 해시태그에 키워드를 사용하는 것도 유용하며, 플랫폼이 콘텐츠를 분류하고 특정 주제를 찾는 사용자와 연결하는 데 도움을 줌
     * 적절한 키워드를 찾기 위해 다음을 활용할 수 있음:
          + 경쟁자 분석: 유사한 계정의 캡션을 확인하여 어떤 키워드를 사용하는지, 어떤 게시물이 참여도가 높은지 파악함
          + Instagram 검색창 활용: 주제를 입력하고 추천되는 용어, 프로필, 해시태그를 확인하여 인기 키워드를 찾음. '태그' 탭을 사용하면 해시태그에 대한 자세한 정보를 얻을 수 있음

  3. 동영상에 자막 추가하기

     * 동영상에 자막을 추가하면 사용자가 소리 없이도 콘텐츠를 이해할 수 있으며, 스크롤 중인 사용자의 관심을 끌 수 있음
     * 자막은 직접 조회수를 늘리지는 않지만, 콘텐츠의 참여도를 높여 더 많은 사람들에게 도달할 수 있도록 도움을 줌
     * Instagram에서 자막을 추가하는 방법:
          + 릴스를 만들고 스티커 아이콘을 탭함
          + '캡션'을 선택하면 Instagram이 자동으로 자막을 생성함
          + 생성된 자막을 검토하고 정확성을 위해 편집함

  4. 게시물에 대체 텍스트(Alt Text) 작성하기

     * 대체 텍스트는 이미지나 동영상이 보여주는 내용을 설명하는 짧은 설명으로, 시각 장애가 있는 사용자에게 콘텐츠를 전달하고, Google에서 콘텐츠를 인식하는 데 도움을 줌
     * Instagram에서 대체 텍스트를 추가하는 방법:
          + 게시물을 선택하고 상단의 세 점 아이콘을 클릭하여 '편집'을 선택함
          + '대체 텍스트 편집'을 선택하고 내용을 입력한 후 저장함
     * 대체 텍스트 작성 시 간결하고 구체적으로 작성하며, 125자 이내로 유지하는 것이 좋음

  5. 일관된 테마 유지하기

     * 특정 테마에 집중한 콘텐츠를 게시하면 브랜드 인지도를 높이고, 참여도가 높은 팔로워를 구축할 수 있음
     * 사용자가 브랜드의 콘텐츠에 익숙해지면 플랫폼 내에서 해당 콘텐츠를 인식하고 상호작용할 가능성이 높아짐
     * 게시물이 더 많은 참여를 얻으면 Instagram은 해당 콘텐츠를 더 많은 사람들에게 추천할 수 있음

  6. 적절한 시간에 게시하기

     * Instagram은 콘텐츠를 업로드한 시점만으로 노출을 결정하지 않지만, 팔로워가 가장 활발한 시간에 게시하면 더 많은 좋아요, 댓글, 공유를 유도할 수 있음
     * Instagram의 알고리듬은 콘텐츠가 가치 있다고 판단하면 더 많은 사용자에게 노출할 가능성이 높음
     * CoSchedule의 연구 결과에 따르면, 일반적으로 다음 시간대가 가장 효과적임:
          + 최적의 게시 시간: 오전 9:01, 오후 7:59, 오전 9:00, 오후 8:00, 오전 7:59
          + 최적의 시간대: 오전 9시, 오전 8시, 오전 10시, 정오, 오후 3시
          + 비효율적인 시간대: 새벽 2시~5시, 오후 11시
          + 최적의 요일: 수요일, 금요일, 화요일
          + 비효율적인 요일: 일요일, 토요일, 목요일
     * 하지만 가장 적절한 게시 시간은 업종과 타겟 고객에 따라 다르므로, 직접 실험하고 분석하는 것이 중요함
     * Instagram의 프로페셔널 대시보드에서 '총 팔로워'를 선택하면 팔로워의 활동 시간대를 확인할 수 있음

  7. 릴스(Reels)에서 워터마크 피하기

     * Instagram은 다른 플랫폼(예: TikTok)에서 가져온 워터마크가 있는 릴스를 추천 목록에서 제외할 가능성이 높음
     * 이 문제를 피하려면 Instagram 내에서 직접 콘텐츠를 제작하거나, 워터마크가 없는 유료 편집 도구를 사용할 것을 권장함
     * TikTok에서 가져온 콘텐츠를 재활용하려면, CapCut 등의 도구를 사용하여 워터마크를 제거할 수 있음
     * 하지만 Instagram CEO인 Adam Mosseri는 타사 앱에서 제작된 콘텐츠라도 최종 업로드 버전이 워터마크가 없으면 문제되지 않는다고 얘기한바 있음

  8. 사용자와의 적극적인 소통

     * Instagram에서 콘텐츠의 노출 여부는 사람들이 해당 콘텐츠와 얼마나 상호작용하는지에 따라 결정됨
     * Instagram이 제안하는 참여도 향상 방법:
          + 공감할 수 있는 진정성 있는 콘텐츠 제작: 첫 3초 안에 사용자의 관심을 끌어야 함
          + 고품질 비주얼 활용: 최대한 높은 해상도의 영상을 게시하여 콘텐츠의 전문성을 높임
          + 전략적인 태그 사용: 위치 태그 추가 및 인기 있는 콘텐츠 유형(예: 릴스) 활용
          + 전문 분야 집중: 타겟 고객이 관심을 가질 만한 트렌디한 오디오 및 해시태그 사용
          + 상호작용 유도: 질문을 던지고, 투표를 만들고, 댓글에 응답하여 참여를 유도함

Instagram SEO를 활용한 콘텐츠 최적화

     * Instagram SEO는 장기적인 전략이며, 꾸준한 실행이 필요함
     * 위에서 언급한 팁을 적용하면 점진적으로 도달 범위와 참여도를 높일 수 있음
     * Semrush Social과 같은 도구를 활용하면 콘텐츠 관리, 성과 추적, 경쟁사 분석 등을 간편하게 수행할 수 있음
"
"https://news.hada.io/topic?id=19547","코드에서 발생하는 환각은 LLM 오류 중 가장 덜 위험한 형태임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  코드에서 발생하는 환각은 LLM 오류 중 가장 덜 위험한 형태임

     * 많은 개발자들이 LLM을 코드 작성에 사용하려다 환각(Hallucination)을 경험하고 신뢰를 잃음
          + LLM이 존재하지 않는 메서드나 라이브러리를 창작하는 것은 흔한 일
          + 하지만 코드에서의 환각은 가장 덜 위험한 유형의 환각임
     * 가장 위험한 것은 LLM이 오류를 만들어내지만 컴파일러나 인터프리터에서 즉시 감지되지 않는 경우
          + 환각된 메서드는 실행 즉시 오류를 발생시키므로 쉽게 발견할 수 있음
          + 오류 메시지를 LLM에 다시 입력하면 자동으로 수정할 수도 있음
     * 일반적인 텍스트 환각과 달리, 코드는 실행을 통해 사실 확인이 가능함
     * 자동 오류 수정 기능이 있는 LLM
          + ChatGPT Code Interpreter, Claude Code 등의 도구는 LLM이 작성한 코드를 실행하고 오류를 감지하여 스스로 수정함
          + LLM이 작성한 코드를 실행도 안 하고 평가하는 것은 비효율적임
     * 일부 개발자들은 LLM이 환각된 메서드를 생성했다는 이유로 기술 자체를 배척하려 함
          + 하지만 효과적으로 사용하려면 학습과 실험이 필수적임
          + 필자는 2년 넘게 AI 기반 코드 작성에 대해 연구하고 있으며, 여전히 새로운 기술을 배우고 있음
     * 코드의 수동 테스트는 필수임
          + 코드가 정상적으로 실행된다고 해서 기대한 대로 동작한다는 보장은 없음
          + 코드 리뷰나 자동화된 테스트만으로 코드의 정확성을 완전히 검증할 수 없음
          + 직접 실행하고 검증하는 과정이 필수적임
          + LLM이 생성한 코드는 가독성이 뛰어나기 때문에 방심할 가능성이 있음
          + 사람의 코드도 마찬가지로, 직접 실행해보기 전까지는 신뢰해서는 안 됨
     * 환각을 줄이는 방법
          + 다른 모델 사용: 특정 플랫폼에 대한 학습 데이터가 더 풍부한 모델을 선택
               o 예: Claude 3.7 Sonnet (thinking mode 활성화), OpenAI o3-mini-high, GPT-4o (Python Code Interpreter 포함)
          + 맥락(context) 활용: 특정 라이브러리를 LLM이 모르더라도 예제 코드를 제공하면 패턴을 학습 가능
               o 최근 Claude의 GitHub 통합 기능 사용 시 효과적이었음
          + 안정적인 기술 선택: 오래된 라이브러리를 선택하면 LLM이 더 잘 다룰 가능성이 높음
               o Boring Technology 철학 활용
     * 코드 리뷰의 중요성
          + ""LLM이 작성한 코드를 전부 리뷰해야 한다면 직접 작성하는 게 빠르다""는 주장에 반박함
          + 이는 코드 리뷰 능력 부족을 드러내는 발언일 수도 있음
          + LLM이 생성한 코드 리뷰는 실력을 향상시킬 좋은 기회가 될 수 있음
     * 보너스: Claude 3.7 Sonnet의 피드백
          + 필자는 블로그 초안을 Claude 3.7 Sonnet의 ""extended thinking mode""에 검토 요청함
          + ""이 글의 논리가 설득력 있는지, 개선할 점이 있는지, 빠진 내용이 있는지 검토해 달라""고 요청함
          + Claude는 초안의 어조를 부드럽게 만드는 데 도움을 줌
          + Claude 피드백 대화 링크

        Hacker News 의견

     * 작성자가 이전 글에서는 동의했지만 이번 글에는 동의하지 않음
          + ""LLM이 작성한 모든 코드를 검토해야 한다면, 내가 직접 작성하는 것이 더 빠르다""는 의견에 반대함
          + 다른 사람의 코드를 읽고 이해하며 검토하는 능력에 대한 투자가 부족하다는 주장에 동의하지 않음
          + 검토는 작성자의 전문성과 신뢰도에 따라 다르며, 익명의 기여를 검토하는 것은 다름
          + 코드의 의도와 접근 방식을 추론하고 비교하는 것이 중요하며, LLM의 경우 그 범위가 제한적임
          + 동기 부여는 중요하며, 모든 개발자가 코드 검토를 좋아하는 것은 아님
          + LLM의 코드는 사회적 측면이 없으며, 다른 사람이 변경 사항을 검토해야 함
     * LLM이 생성한 코드가 잘 작동하더라도, 작성자가 아니면 버그나 논리적 결함을 찾기 어려움
          + 코딩을 잘 설계된 계획을 구현하는 것이 아니라 조각을 맞추는 것으로 본다면, 알고리즘이 추측으로 조각을 맞추는 것에 대한 우려가 있음
          + LLM은 인간이 감수할 수 있는 위험을 감수하지 않으며, 특정 맥락에서의 코드 블록의 의미를 이해하지 못할 수 있음
     * LLM 생성 코드는 깔끔하지만, QA와 정리 작업에 더 많은 시간을 소비하게 됨
          + 코드가 잘 작동하고 오류가 없다고 해서 올바른 일을 하고 있다는 것을 의미하지 않음
          + 코드를 실행하고 테스트하는 것만으로는 코드의 정확성을 증명할 수 없으며, 논리적으로 추론해야 함
     * The Primeagen과 Casey Muratori가 최신 LLM 코드 생성기의 출력을 검토함
          + LLM의 훈련 데이터에 잘 대표된 작업을 제공하여 개발이 쉬워야 함
          + 실제로는 반복적인 개발이 쓸모없는 코드로 수렴하며, LLM이 점점 더 진전을 이루지 못함
     * Simon이 간과한 또 다른 오류 범주는 모델이 기능을 잊어버리는 환각임
          + 코드가 컴파일되는 긍정적인 측면보다 핵심 기능을 잊어버리는 부정적인 측면이 더 어려움
          + 코드가 대화/컨텍스트 창 외부에 있을 것으로 예상되는 코드에 따라 기능이 약간 변할 수 있음
     * 환각된 메서드는 작은 장애물이며, 사람들이 이를 불평할 때 시스템을 효과적으로 사용하는 방법을 배우는 데 최소한의 시간을 보냈다고 가정함
          + 이는 매우 잘못된 가정이며, 사람들이 환각을 보고 ""가장 쉬운 것도 일관되게 맞추지 못한다면 더 어려운 것을 신뢰할 수 없다""고 생각함
     * 환각 자체가 LLM이 제기하는 가장 큰 위험은 아님
          + 더 큰 위험은 챗봇이 인간을 해치도록 설득할 수 있다는 것임
          + 이는 이미 발생한 사례가 있으며, 더 위험한 것이 무엇인지에 대한 아이디어는 공유하고 싶지 않음
     * 컴파일 오류의 제한된 맥락 내에서만 덜 위험함
          + 프로그래머가 실제 솔루션을 찾는 노력을 피하기 위해 전체 라이브러리를 발명했다면 더 화가 날 것임
          + 환각을 단순한 속도 저하로 간주한다면 LLM이 실제로 해야 할 일을 과소평가하는 것임
     * LLM에서 좋은 결과를 얻기 위해 많은 노력이 필요함
          + 이는 과대 광고를 꿰뚫는 것임
          + LLM이 무엇에 유용한지, 신뢰할 수 없는 결과를 얻기 위해 수년간 학습해야 한다면 무엇을 기대할 수 있는지에 대한 의문이 있음
     * 의료 센터에서 환자의 '주요' 클리닉을 찾는 코드 작성 경험
          + 임상 예약만을 고려하여 가장 최근의 예약을 찾아야 했음
          + 임상 예약이 없으면 모든 종류의 가장 최근 예약을 찾아야 했음
          + 데이터를 정렬하여 코드를 작성했으나, ChatGPT가 문서화하는 과정에서 정렬을 반대로 이해함
          + 이는 ""코드가 실행되지 않음""보다 훨씬 나쁜 실수임
"
"https://news.hada.io/topic?id=19464","Warp 터미널, Windows용 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Warp 터미널, Windows용 공개

     * Rust로 작성된 빠른 터미널 Warp가 Windows용도 공개
     * IDE 같은 블록/라인단위 편집
     * 400+개 넘는 CLI 도구에 대한 자동완성 및 추천 기능을 내장
     * PowerShell, Git Bash, WSL 간에 자유롭게 이동
     * DirectX를 이용한 빠른 렌더링
     * 폰트, 컬러, 키바인딩 모두 커스터마이즈 가능
     * Warp Drive로 팀간의 협업 지원
          + 실시간 세션 공유
          + 팀전체에 공유되는 runbook 으로 공통 프로세스를 표준화
          + 팀 설정 동기화 (문서, runbook, 환경 변수등)
          + 자주 사용되는 명령어를 템플릿으로 만들어 워크플로우화하고 팀에 공유

   원래 mobaxterm 을 잘 쓰고 있는 상태에서 warp 처음 사용해보는데, Warpify 기능이 신선하고 자체적으로 히스토리 제공하는 게 좋네요. AI 기능도 멋지기는 한데... 또 결제하고 쓰기는 좀 부담스럽네요.
   세션별로 테마를 다르게 할 수 없는게 아쉽고요.
   여러 세션에 동시에 접속했을 때 시각적으로 잘 구분이 되는게 작업에 안전한데 말이죠.

   warp 터미널의 장점 중 하나는 OS에 따른 디자인 표준을 잘 준수하는 점이라고 생각합니다

   오... 제대로 만들려고 오래 걸렸나보네요.

   Warp - Rust로 작성된 빠른 터미널
   Warp 터미널 - 이제 로그인 안해도 사용가능

   맥이랑 우분투에서 쓰는데, 다 좋은데 한글 입력이 부자연스러워서 조금 아쉬워요.
   깃헙으로 이슈도 남겼는데 아직 진지하게 받아들여지지 않는거 같아요. 중국 친구들도 열심히 이슈들 올렸더라고요 ㅎ 한중일 cjk 문제 같아요.

   Warp 설치만 해놓고 안 쓰고 있는데, 써보신 분들 의견 어떠신가요? 궁금하네요.

   터치나 펜 지원이 안되는 부분이 조금 아쉬워요

   편하게 쓰고있어요 UI 도 좋고 agent 모드도 좋고..
"
"https://news.hada.io/topic?id=19562","TSMC, 미국 내 $100B(150조원) 투자 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     TSMC, 미국 내 $100B(150조원) 투자 발표

     * TSMC는 향후 몇 년간 미국 내 반도체 제조 공장에 최소 1,000억 달러를 추가 투자할 계획을 발표함
     * 이 자금은 아리조나주에 새로운 반도체 제조 공장 3곳, 반도체 패키징 공장 2곳, 연구개발 센터 1곳 건설에 사용될 예정임
     * 이러한 확장은 최근 수십 년간 아시아 국가로 이전된 반도체 제조업을 미국 내로 되돌리려는 미국의 오랜 목표를 진전시킬 것으로 보임
     * 트럼프 대통령은 반도체 산업 육성을 경제 및 국가 안보 문제로 강조함
          + 트럼프 대통령은 대만에서 생산된 칩에 대해 최대 50%의 관세를 부과할 수 있다고 언급하며, 미국 내 생산의 중요성을 강조함
     * TSMC는 이미 2020년 아리조나주에 120억 달러 규모의 반도체 공장 건설을 발표함
          + 이후 두 개의 추가 공장을 포함하여 총 650억 달러 규모로 투자를 확대함
          + 첫 번째 공장은 지난해 말 대량 생산을 시작함
     * TSMC는 현재 가장 첨단 칩 제조 시설을 대만에만 보유하고 있음
          + 이러한 칩은 최신 인공지능 시스템부터 스마트폰까지 다양한 분야에 필수적임
     * 미국은 2022년 CHIPS 법안을 통해 국내 반도체 제조에 수백억 달러의 보조금을 지원함
          + TSMC는 최대 66억 달러의 보조금을 받았으며, 최근 연방 자금을 수령하기 시작함
          + 미국 관리들은 반도체 제조를 경제, 기술 발전, 군사력에 필수적이라고 보고 있으며, COVID-19로 인한 공급망 문제로 반도체 산업의 중요성이 부각됨
     * 트럼프 대통령은 미국 내 반도체 제조의 필요성을 강조하며, 수입 반도체에 25% 이상의 관세를 고려 중이라고 밝힘
          + 트럼프 대통령은 대만이 시장을 거의 독점하고 있다고 언급하며, 미국 내 생산의 중요성을 강조함
     * OpenAI의 Sam Altman, Oracle, SoftBank Group은 미국 내 인공지능 인프라 구축에 최대 5,000억 달러를 투자하겠다고 발표함
          + 애플은 향후 4년간 5,000억 달러 이상을 투자하고 20,000개의 일자리를 창출하겠다고 발표함

        Hacker News 의견

     * 과거 대만이 핵무기를 개발하려 했다는 사실에 놀라움
          + 미국이 '악역'으로 변모하면서 대만이 북한처럼 핵무기를 보유했다고 발표할 가능성도 있음
          + 많은 국가들이 미국의 안정성에 의존했으나 이제는 이스라엘처럼 핵무기 보유 여부를 밝히지 않거나 공개적으로 시험할 가능성 있음
     * 미국이 대만을 중국의 침공으로부터 보호한다는 생각은 믿기 어려움
          + 중국 입장에서 전쟁 비용이 칩 개발 비용보다 높음
          + 최악의 경우 2-3년 뒤처질 수 있지만 이는 치명적이지 않음
          + 대부분의 전자기기는 최첨단 칩을 필요로 하지 않으며, 중국은 최신 칩 없이도 AI 경쟁력을 입증했음
     * 미국 입장에서 중국과의 전쟁 시나리오
          + 중국이 대만을 빠르게 점령하면 미국이 방어할 것이 없고, 대만을 되찾기 위한 군사적 행동은 어려움
          + 교착 상태가 되면 대만에 무기와 지원을 보내 전쟁을 장기화하고 중국을 약화시킬 수 있음
          + 대만이 중국 침공을 성공적으로 방어하면 미국이 군대를 보내 대만을 방어할 가능성이 있음
     * 미국이 자국의 이익만을 위해 행동한다면, 아시아-태평양 지역을 중국에 넘기지 않기 위해 전쟁에 휘말리지 않을 것임
     * 대만 정부가 이런 결정을 내린 것에 대한 이해 불가
          + 미국의 관세는 봉쇄되면 의미가 없으며, 체스터 니미츠는 이미 사망했음
     * 중국과 대만의 상황을 러시아와 우크라이나의 상황과 비교하는 것은 잘못된 생각
          + 중국군은 수십 년간의 준비로 러시아보다 훨씬 강력함
          + 대만은 일본 외에 국경을 맞댄 국가가 없으며, 미국이 개입하려면 전력을 다해야 함
          + 현재 미국 행정부가 이런 거래를 할 수 있을지 상상하기 어려움
          + 미국이 대만을 중국에 '판매'할 가능성이 더 높음
     * 위스콘신 Foxconn 거래와 같은 결과가 될 가능성에 대한 의문
          + 투자를 이끌어낼 실제 동인이 있는지에 대한 의문
     * FABS는 많은 물이 필요하며, 애리조나에는 충분한 물이 없을 수 있음
          + 애리조나의 원자력 발전소는 회색수를 사용해 운영 중임
     * 미국과 EU 간의 긴장 속에서 ASML이 미국 기업에 기계를 판매하지 못하게 되면 어떻게 될지에 대한 의문
     * Musk의 기관이 CHIPS ACT 인력을 줄인 후 이 뉴스가 나왔음
          + 보조금이 줄어들면 확장이 철회될지 궁금함
     * TSMC에게는 괜찮은 거래지만 대만에게는 끔찍한 거래
          + TSMC는 트럼프의 압박으로 미국에 투자하게 되었을 가능성 있음
          + 미국에 더 많은 공장을 두면 관세를 피할 수 있음
          + 중국이 대만을 군사적으로 점령하면 미국이 TSMC의 공장을 압수할 위험 있음
          + 대만에게는 돈이 투자되지 않고, 세계에서의 중요성이 감소함
          + '실리콘 방패'가 깨지고 대만 정부는 미국 내 공장에 대한 통제권이 없음
          + TSMC가 가장 첨단 노드를 대만에 유지할지, 트럼프의 당이 퇴출될 때까지 시간을 끌지 지켜봐야 함
"
"https://news.hada.io/topic?id=19477","HN 공개: 로그라이트/뱀파이어 서바이버 변형이 있는 Breakout 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 공개: 로그라이트/뱀파이어 서바이버 변형이 있는 Breakout 게임

        Hacker News 의견

     * 멋지다, 나는 이 특전 시스템이 마음에 듦. 몇 라운드를 플레이했음. 간단한 생각들:
          + 처음에는 동전이 동전인 줄 몰랐음, 시각 효과로 벽돌 입자처럼 보였음. 현재 동전 카운터나 시각적 차이가 도움이 되었을 것임
          + 동전에 대해 말하자면, 공과 동전이 색상이 너무 비슷해서 떨어지는 동전 속에서 공을 찾기 어려웠음. 아마도 의도된 것일 수 있지만, 동전 색상과 공 사이의 대비가 도움이 될 것임
     * 안녕하세요,
          + 이 게임은 정말 훌륭하고 모든 면에서 깔끔함. 정말 감사합니다!
          + 아래는 제가 조금 흥분한 내용이니 무시하셔도 됨. 요점은: 훌륭한 게임, 감사합니다!!
          + 하지만 두 가지를 바랐음:
               o <i>달리기에 더 집중</i>
                    # A) 현재 달리기 위치를 추적하는 무언가 (예: 레벨 2/10)
                    # B) 다음 레벨을 선택할 수 있는 특전 (2-4가지 선택지) (좋아하는 것을 선택하거나 숨겨진 콤보를 찾을 수 있음)
                    # C) 달리기를 1-3 레벨 연장할 수 있는 특전 (더 높은 점수를 얻기 쉽고 숨겨진 콤보를 찾기 쉬움)
               o <i>잠금 해제 시스템의 복잡성</i>
                    # Vampire Survivors에서 영감을 받았다고 하니 더 복잡한 잠금 해제가 가능할 것임
                    # 예를 들어, 특전을 3단계로 레벨업하면 다른 특전이 잠금 해제됨, 2단계 특전 2개가 결합되어 다른 특전이 됨. 특정 특전 3개가 결합되어 새로운 특전이 됨 등
                    # 레벨 세트를 완료하면 같은 테마의 최종 레벨이 잠금 해제됨
                    # 레벨당 또는 달리기당 놓친 횟수에 기반한 잠금 해제
                    # 동전 잡기 비율에 기반한 잠금 해제, 당연히 100%도 있지만 다른 것도 있음
                    # 시간 기반 잠금 해제 (X초 이내에 모든 레벨 완료, 이전 레벨보다 느리게 모든 레벨 완료, 또는 Mario 스타일의 시간 잠금 해제, 예: 11, 22 등으로 끝남)
     * 놀라움! 잘 실행된 아이디어와 적을수록 더 좋다는 훌륭한 예시임 :)
          + 고려할 사항:
               o (a) 마우스 잠금
               o (b) 커서 숨기기
               o (c) 전체 화면 모드
          + 다른 사람들이 언급했듯이 UI는 몇 번 더 반복이 필요하지만 괜찮음. 업그레이드를 구매하기 위해 동전을 사용하지 않기 때문에 달리기 중에 동전을 추적할 필요는 없다고 생각함 - 이는 명확하지 않으며 커뮤니케이션 방식을 변경해야 할 수도 있음 - 하지만 반면에 이는 도마뱀 뇌를 자극하고 추가적인 도파민 부스트를 생성함. 생명 카운터는 필수임
          + Electron 또는 Tauri를 살펴보세요
          + 현재 상태로는 Steam에 올릴 수 있을 만큼 충분함. 현재 상태로는 매우 견고한 무료 게임이며, 추가 작업을 통해 인디 요금을 받을 수 있음
     * 당신은 천재임. 이 게임은 정말 잘 만들어졌음! 즉시 홈 화면에 추가했음
          + 나에게 (Android Chrome) 클릭하기 전까지, 즉 누르고 놓기 전까지 음악이 재생되지 않음. 그래서 조용히 레벨을 진행하다가 첫 업그레이드 후에야 훌륭한 소리를 들을 수 있었음
          + Breakout과 Vampire Survivor 업그레이드에 대한 오마주 조합을 좋아함. 제목에 둘 다 언급되어 동전과 진행 메커니즘이 이미 익숙하고 편안했음
          + 참고로 현실적인 동전은 약간 skeumorphic UI 디자인처럼 보임... 벽돌과 패들은 실제 세계의 물체처럼 보이지 않으며 좋은 효과를 냄
     * 이 게임을 의도치 않게 몇 시간을 플레이했음; 진정으로 훌륭함
          + 색상 조합이 조금 가혹했음. 흰색 배경에 흰색 공은 너무 많음. 일부 특전은 매우 모호한 장점을 가짐; 공의 색상이 바뀌는 것은 내가 알기로는 결코 이점이 아님. 특전에 마우스오버 설명이 있으면 좋겠음. 몇 시간을 플레이한 후에도 여전히 몇 가지는 무엇을 하는지 모르겠음
          + 공을 튕길 때마다 -1이 나타나는데 점수에 영향을 미치지 않는 것 같음. 그게 뭐지?
          + Breakout의 아케이드 버전에 스킬 트리가 있었다면 Nolan Bushnell은 오늘날 Richard Branson보다 부자가 되었을 것임
     * 모바일에서 터치를 멈추면 자동으로 일시 정지되는 점이 마음에 듦
     * 훌륭한 컨트롤. 이 게임이 모바일에서 어떻게 플레이될 수 있는지를 이해하려는 노력을 진심으로 감사함. 업그레이드는 좋은 터치임. 보스 전투를 추가하는 것도 좋을 것임
     * 재미있는 게임!
          + 발견한 몇 가지 작은 번역 문제: ""여기를 계속 눌러 플레이하세요""는 실제로 ""반복해서 탭하세요""를 의미해야 함, ""여기를 눌러 플레이하세요""라고 쓰는 것이 좋겠음; 다른 하나는 업그레이드 설명 중 하나가 ""공을 느리게""라고 했는데, ""공을 느리게 하세요""라고 쓰는 것이 좋겠음
     * 마우스 컨트롤에 문제가 있음 (마우스 패드로 플레이 중이지만 일반 마우스에서도 문제가 발생할 것임): 마우스를 빠르게 움직이면 제어 영역을 벗어나고 작은 움직임이 더 이상 반응하지 않음, 마우스가 제어 영역으로 돌아올 때까지 보통 과도하게 움직이게 됨
          + 이로 인해 패드의 제어를 잃을 때 게임이 반응하지 않는 것처럼 느껴짐. 또한 포인터가 패드가 아닌 위치를 알아야 하기 때문에 몰입감을 깨트림
          + 이 때문에 몇 레벨 이상 플레이할 수 없었음
     * 정말 놀라운 우연임. 방금 Steam Next Fest에서 내 로그라이크 Breakout 클론 데모를 출시했음. 나는 총알 지옥/슈팅 게임 접근 방식을 선택했음. 빠를수록 좋음
          + 당신의 게임을 플레이하는 데 큰 재미를 느꼈음. 사운드 디자인이 특히 좋았음
"
"https://news.hada.io/topic?id=19570","공중 보건 데이터 소실, RestoredCDC.org 복원 추진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  공중 보건 데이터 소실, RestoredCDC.org 복원 추진

     * RestoredCDC.org 소개
          + RestoredCDC.org은 독립적인 프로젝트로, CDC(질병통제예방센터)와 관련이 없으며, CDC.gov에서 무료로 제공되는 정보를 아카이브 형태로 제공함.
          + 2025년 1월 6일 이후의 최근 발병 정보는 포함되지 않으며, 비디오도 복원되지 않음.
          + 이 사이트 사용은 면책 조항에 대한 동의를 의미함.
     * 건강 주제
          + 호흡기 질환, Mpox 발병, Oropouche 발병, 식품 안전을 위한 네 가지 단계, 아데노바이러스, 비만 위험 요인, 겨울 날씨 등 다양한 주제를 다룸.
     * CDC 소개
          + CDC는 과학 기반의 데이터 중심 서비스 조직으로, 미국 내외의 건강, 안전, 보안 위협으로부터 대중의 건강을 보호하는 역할을 수행함.
          + 24/7 운영을 통해 미국의 건강과 안전을 지키는 데 주력함.
     * CDC의 주요 정보
          + 조직 구조, 리더십, 실험실 안전, 자금 및 보조금, CDC에서의 경력, 펠로우십 및 교육, CDC 박물관, CDC 디렉터 Mandy K. Cohen, MD, MPH 등의 정보를 제공함.

        Hacker News 의견

     * 오늘 archive dot org에 기부하기를 권장함
     * CDC 웹사이트에 있던 많은 페이지들이 사라지고 있음
          + 최근 행정 명령에 대한 반응으로 보이지만 명확히 밝혀지지 않음
          + 예를 들어, 여성 건강 페이지에서 많은 내용이 제거됨
          + 생리 건강과 위생 관련 페이지, 여성 질병 통계 요약 페이지 등이 포함됨
     * 두 사이트 간의 차이를 비교하는 것이 유용함
          + 변경된 내용을 목록으로 제공하면 더 좋을 것임
          + 현재는 이미 알고 있는 데이터를 접근해야 하는 의사와 과학자들에게 주로 도움이 됨
          + 검열되는 패턴을 관찰하는 데는 덜 유용함
     * 부자라면 새로운 tld (.usgov?)를 구매하여 파괴되는 모든 것을 재창조하고 싶음
     * 실제로 사라진 것이 무엇인지 궁금함
          + pubmed가 잠시 중단되었지만 지금은 다시 작동 중임
          + 이 모든 것이 무엇에 관한 것인지 궁금함
     * Discord 초대 링크가 블랙홀로 연결됨
          + 초대가 제한된 것인지 궁금함
     * 법무부 통계국 사이트가 며칠 동안 오프라인 상태였음
          + 지금은 다시 작동 중임
          + NLEAD 데이터베이스 삭제 이후 발생한 일임
     * 현 행정부가 연방 정부에 대한 신뢰를 파괴하기 위해 모든 것을 하고 있음
          + 이 모든 것은 과두제들이 세금 감면을 받고 완전히 민영화된 국가로 가는 길을 닦기 위한 것임
"
"https://news.hada.io/topic?id=19466","DeepSeek, 최적화된 병렬 처리 전략 오픈소스 3가지 공개 (4 of 5)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              DeepSeek, 최적화된 병렬 처리 전략 오픈소스 3가지 공개 (4 of 5)

     * DeepSeek V3/R1에서 사용했던 전략 및 코드들
          + DualPipe : 계산-통신 오버랩을 위한 양방향 파이프라인 병렬화 알고리듬
          + EPLB: Expert-Parallel 로드밸런서
          + Profile-Data: DeepSeek 인프라의 데이터 프로파일링으로 계산-통신 오버랩을 분석

DualPipe

     * DualPipe는 DeepSeek-V3 Technical Report에서 소개된 혁신적인 양방향 파이프라인 병렬 알고리듬
     * 순방향 및 역방향 계산-통신 단계를 완전히 오버랩하여 파이프라인 버블을 줄이는 역할을 함
     * 보다 자세한 계산-통신 오버랩 정보는 profile data에서 확인 가능

Expert Parallelism Load Balancer (EPLB)

     * Expert Parallelism(EP)에서는 서로 다른 전문가(experts)를 각 GPU에 할당함
     * 그러나 전문가별 작업량이 다를 수 있기 때문에, GPU 간 부하를 균형 있게 조절하는 것이 중요
     * DeepSeek-V3에서는 중복 전문가(redundant experts) 전략을 사용하여 부하가 높은 전문가를 복제한 후, 이를 GPU에 효율적으로 배치하여 부하 균형을 맞춤
     * 또한, 그룹 제한 전문가 라우팅(group-limited expert routing) 을 활용하여 같은 그룹의 전문가를 최대한 동일한 노드에 배치함으로써, 노드 간 데이터 전송을 최소화
     * 이를 재현 및 배포하기 쉽게 하기 위해, eplb.py에서 EP 부하 균형 알고리듬을 오픈소스로 제공함
          + 이 알고리듬은 예상된 전문가 부하를 기반으로 균형 잡힌 전문가 복제 및 배치 계획을 계산
          + 다만, 전문가 부하를 예측하는 구체적인 방법은 해당 저장소 범위를 벗어나며, 일반적으로 과거 통계를 이용한 이동 평균 방식이 많이 사용됨
     * 부하 균형 알고리즘은 두 가지 정책을 제공하며, 각각 다른 상황에서 사용됨.
          + 계층적 부하 균형 (Hierarchical Load Balancing)
               o 서버 노드 수가 전문가 그룹 수를 나눌 수 있는 경우, 계층적 부하 균형 정책을 사용하여 그룹 제한 전문가 라우팅을 최적화함
               o 먼저, 전문가 그룹을 균등하게 노드에 배치하여 노드 간 부하를 균형 있게 조정함
               o 이후, 각 노드 내에서 전문가를 복제함
               o 마지막으로, 복제된 전문가를 개별 GPU에 배치하여 GPU 간 부하 균형을 맞춤
               o 이 정책은 전문가 병렬 규모가 작은 프리필링(prefilling) 단계에서 사용 가능함
          + 전역 부하 균형 (Global Load Balancing)
               o 그 외의 경우에는, 전역 부하 균형 정책을 사용하여 전문가 그룹에 상관없이 전역적으로 전문가를 복제하고, 이를 개별 GPU에 배치함
               o 이 정책은 전문가 병렬 규모가 큰 디코딩(decoding) 단계에서 적합함.

DeepSeek Infra의 Profiling Data

     * DeepSeek의 학습 및 추론 프레임워크에서 프로파일링 데이터를 공개하여, 커뮤니티가 통신-계산 오버랩 전략과 저수준 구현 세부 사항을 더 잘 이해할 수 있도록 지원함
     * 이 프로파일링 데이터는 PyTorch Profiler를 사용하여 수집되었으며, 다운로드 후 Chrome에서는 chrome://tracing, Edge에서는 edge://tracing을 통해 시각화 가능
     * 또한, 실험에서는 균형 잡힌 MoE 라우팅 전략을 시뮬레이션하여 프로파일링을 진행
     * 학습 (Training)
          + 학습 프로파일 데이터는 DualPipe에서 순방향 및 역방향 청크의 오버랩 전략을 보여줌
          + 각 청크는 4개의 MoE (Mixture of Experts) 레이어를 포함하며, DeepSeek-V3의 사전 학습 설정과 일치하는 병렬 구성을 가짐:
     * 추론 (Inference)
          + 프리필링(Prefilling)
               o 이 단계에서는 두 개의 마이크로 배치를 활용하여 계산과 all-to-all 통신을 오버랩함
               o 또한, 주의(attention) 연산 부하를 두 마이크로 배치 간에 균형 있게 분배하여 동일한 프롬프트가 여러 마이크로 배치로 나뉠 수 있도록 함
          + 디코딩 (Decoding)
               o 디코딩에서도 프리필링과 마찬가지로 두 개의 마이크로 배치를 사용하여 계산과 all-to-all 통신을 오버랩함
               o 그러나, 디코딩에서는 all-to-all 통신이 GPU SM을 차지하지 않음 → RDMA 메시지를 전송한 후 GPU SM을 해방하며, 계산이 끝난 후 통신 완료를 대기하는 방식으로 동작함
               o 더 자세한 all-to-all 구현 정보는 DeepEP에서 확인 가능

DeepSeek Open Infra 로 공개되는 5개 오픈소스 중 4번째 임
"
"https://news.hada.io/topic?id=19583","AI가 기술 면접을 죽였다. 이제 어떻게 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AI가 기술 면접을 죽였다. 이제 어떻게 할까?

     * 채용 프로세스는 누구가 싫어함. 채용 관리자도, 담당자도, 지원자도 마찬가지
     * 기술 면접은 그중에서도 악명 높은 단계인데, 면접자 대부분이 싫어함
     * 실제 업무는 간단한 API 연결 위주인데, 면접에서는 복잡한 이론과 알고리듬 등을 묻는 상황을 종종 볼 수 있음
          + 구글의 90% 엔지니어가 쓴다는 Homebrew의 개발자가 칠판에 이진트리 전환을 못해서 면접에서 탈락한 것 처럼

최근 몇 년간의 변화 (인터뷰 무력화 요인)

     * 원격 면접에서 카메라를 끄고 대리인을 고용하는 사례가 발생함
     * 북한 작업자가 deepfake 영상을 활용해 구직을 시도한 사례가 있었음
     * GitHub Co-pilot, Cursor와 같은 자동 코딩 도구, 그리고 Claude나 OpenAI 같은 LLM이 등장하면서 기본 코딩 문제나 질의응답이 손쉽게 해결 가능해짐
     * 이력서 작성부터 대규모 지원, 영상 면접에 이르기까지 AI가 개입 가능해지는 추세이지만, 이 글에서는 기술 인터뷰 자체에 집중함

기술 면접의 기본

   개발자를 채용하는 거의 모든 회사에서 아래와 같이 약간씩 변형된 프로세스를 가지고 있음
     * Hackerrank 사전 과제
          + 주니어나 인턴 개발자를 뽑기 위한 필터 역할
          + 온라인으로 자유롭게 문제를 풀 수 있음
     * 컴퓨터공학 기초(Comp Sci Fundamentals)
          + 자료구조, 알고리즘, Big O 등을 묻는 방식
          + 주니어 개발자 대상인 경우가 많음
     * 코딩 인터뷰
          + 실제 코드를 짜서 동작시키는 능력을 평가함
          + 간단한 프로젝트 예시로 기본적인 언어 사용 및 문제 해결 능력을 확인함
     * 아키텍처/디자인
          + 주니어보다는 시니어 개발자 대상
          + 시스템 설계, 확장성, 데이터베이스 및 API 설계 등을 평가함

면접에서의 AI 사용

     * AI 때문에 Hackerrank 같은 사전 과제의 필터 역할이 크게 약화됨
     * 컴퓨터공학 기초 및 코딩 인터뷰도 문제 난이도가 LLM의 답변 범주에 속해 쉽게 풀리는 추세임
     * 아키텍처/디자인 인터뷰는 아직 비교적 안전한 편이지만, 장기적으로 AI가 더욱 발전하면 이 영역도 위협받을 가능성이 있음

우리의 옵션은?

     * 1. 원격 기술 인터뷰 중단
          + 면접관이 직접 옆에서 지켜보면 AI 활용이 어려움
               o 나머지 모든 과정을 통과한다고 가정하면 대면 코딩 면접이 될 수도 있음
     * 2. Pearson Vue 스타일 소프트웨어 사용
          + 감시 프로그램을 설치해 카메라로 감독하는 형태
          + 우회 방법이 여러 경로로 알려져 있어 완벽하진 않음(관련 하위 레딧이 따로 있을 정도임)
     * 3. 문제점 외면
          + ""AI 쓰지 말라""는 도의적 요청에 의존하는 방식
          + 결과적으로 AI를 쓰는 사람이 유리해지므로, 기업 입장에서 적절한 지원자를 선발하기 어려워짐
     * 4. AI 사용을 허용
          + 코딩 실력 대신 LLM에 프롬프트를 잘 쓰는 능력과 리팩토링 역량을 평가하는 형태
          + AI 출력 오류를 직접 교정할 수 있는 코딩 역량도 필요한 과도기적 상황
     * 5. 하이브리드 접근
          + 원격으로 AI 활용 능력 등을 먼저 확인한 뒤, 오프라인 최종 검증을 진행하는 식의 혼합 방식

가능한 솔루션

     * 장기적으로는 4번과 5번 방식이 실현 가능성이 높음
     * RTO를 시행해도 원거리 후보 모두를 오프라인으로 부를 순 없으므로 효율적 방안을 마련해야 함
     * 면접 자체의 형식을 바꾸는 것도 또 하나의 대안
          + 오늘날 코딩 인터뷰는 FizzBuzz나 계산기 구현 수준의 작은 과제에 그치는 경우가 많음
          + AI 보조를 활용하면 과제 난이도를 10배 이상 확장해, 완전한 애플리케이션을 만드는 과정으로 평가할 수 있음
          + 아키텍처와 코딩을 혼합해 2시간 정도의 긴 인터뷰로 진행하는 방법도 시도할 수 있음
     * 이런 방식에서는 애플리케이션을 구축하고, 확장하고, 추가 기능을 구현하도록 요구가능
          + 코드베이스가 커지는 과정에서 일관성을 유지할 수 있는지, 표면적인 답변에 그치지 않고 더 깊은 수준의 역량을 확인할 수 있는 이점이 있음
     * 이런 과정을 통해 다음을 평가
          + 기본적인 git과 IDE 등 도구 활용 능력
          + LLM에 효과적으로 프롬프트를 주고, 더 나은 출력을 얻도록 프로그래밍할 수 있는 능력
               o LLM 출력을 이해하고 결합해, 유지보수 가능한 형태로 코드를 완성할 수 있는 역량
               o 제한된 시간 안에 일정 수준 이상의 규모와 확장성을 가진 애플리케이션을 완성할 수 있는지 여부
          + 일관된 품질과 논리를 유지하는 능력
     * 이런 종합 평가 방식이 AI 시대의 코딩 인터뷰 대안이 될 가능성이 있음

Summary

     * 기술 인터뷰는 가까운 미래에 큰 변화를 맞이할 전망
     * 당장은 AI 활용이 비교적 느리거나 어색하게 드러날 수 있지만, 점차 AI가 감춰질 가능성이 있음
     * 이에 따라 발생할 수 있는 시나리오
          + 합격률이 상승하고, 대신 실제 업무 기간(프로베이션) 중에 탈락하는 사례가 늘어날 수 있음
          + 주니어 개발자가 기업의 높은 기술 스펙을 조기에 따라가야 하는 부담이 더욱 커질 수 있음
     * AI를 활용해 FAANG 면접을 통과하는 방식이 확산된다면, 변화 속도는 더욱 가속될 가능성이 있음

   기술 면접과 실제 업무의 미스 매치를 줄여야지 애꿏은 AI 탓이 될까 걱정이네요

   이 변화때문인지 모르겠지만 제가 다니는 회사는 사전문제 없이 인터뷰에서 라이브 코딩을 하고 있어요.

   제가 속한 곳은 이제 기술면접에서 ai로 물어보는것을 허용하는 정책으로 가는중.. 인풋이 아웃풋을 좌우하기에 오히려 질문하는 역량을 보기위해서..

   AI 써도 된다고 생각합니다.
   근데 그렇게 나온 결과물을 100% 자기 걸로 만들어야죠.
   제가 면접관이라면 온라인으로 코딩 과제물 내주고 대면 면접에서 해당 코드에 대해서 설명해보라고 하겠습니다. 당연히 추가적인 질문도 하구요.
   자기가 짰던 AI가 짰던 제출한 코드를 설명하고 그에 대한 답변도 못하는 수준이면 패스해야죠.

     코딩 실력 대신 LLM에 프롬프트를 잘 쓰는 능력과 리팩토링 역량을 평가하는 형태

   이 역량이 중요해 질 것이라는 생각은 듭니다.

   Leetcode Interview 치팅 프로그램
   이 글에서 얘기하는 기술 면접에서의 AI 치팅 사례로 적절하네요

        Hacker News 의견

     * 최고의 인터뷰 과정은 팀원과의 페어 프로그래밍과 전화 인터뷰를 포함했음. 몇 분 안에 지원자가 일을 잘할 수 있는지 알 수 있었고, 이 과정은 20년 이상의 경력 중 가장 생산적인 팀을 만들었음
          + 문제는 소프트웨어 문화의 많은 부분을 망친 확장 가능한 프로세스와 높은 처리량의 필요성임
          + ""우리는 수백 명의 후보자를 처리해야 하며, 결과보다는 과정의 지표가 중요함""이라는 사고방식이 문제임
     * 코드 리뷰는 평가 도구로서 매우 유용함
          + 지원자가 코드를 리뷰하도록 하는 것이 중요함
          + 주니어, 미드, 시니어, 스태프는 동일한 코드베이스에서 매우 다른 점을 볼 수 있음
          + AI 생성 코드가 일반화됨에 따라, 코드의 품질과 정확성을 효율적으로 검토할 수 있는 개발자를 선택하는 것이 중요함
          + YC 회사에서 코드 리뷰를 첫 번째 라운드로 진행한 인터뷰를 경험했으며, 이를 통해 오픈 소스 앱을 만들게 되었음
     * 2005년쯤 SME에서 화이트보드 코딩을 요청받았으나, 컴퓨터를 사용할 수 없었음
          + 화이트보드를 사용하는 이유를 물었을 때, Google의 모범 사례를 모방한다고 답변받음
          + 결국 화이트보드로 코딩을 했지만, 컴퓨터를 제공하면 다시 할 의향이 있다고 말했음
          + 결국 다른 곳으로 갔음
     * 회사 A는 AI가 모든 기술 인터뷰 질문을 해결할 수 있다면 AI를 고용하지 않는 이유를 고민해야 함
          + 엔지니어가 기능 구현 여부를 평가하는 것이 필요할 수 있으며, 인터뷰에서 후보자에게 예시 기능 요청에 대해 생각해보도록 할 수 있음
          + 회사가 엔지니어의 가치를 명확히 이해하지 못해 후보자의 가치를 판단하기 어려운 경우가 많음
     * AI를 피하는 고용 기술로 주니어 개발자에게 코드를 가져오게 하고 설명하도록 요청함
          + 그들이 무엇을 변경할지, 어떻게 변경할지, 패턴을 사용했는지 등을 논의함
          + 시니어 개발자에게는 복잡한 코드를 주고 실시간으로 분석하도록 함
          + AI를 사용해 일상적인 작업을 단축하는 것은 괜찮지만, 결과를 비판적으로 생각할 수 있어야 함
     * 인터뷰어로서, FAANG이 아닌 회사에서는 간단한 인터뷰 과정을 사용함
          + 후보자의 이력서, 기대 사항, 능력에 대해 질문하고 작성한 코드를 보여달라고 요청함
          + 이 과정은 빠르고 효과적임
     * 현재의 취업 시장은 혼란스러워서 벽에 부딪힐 때까지는 취업이 어려울 것 같음
          + 26년의 경력이 있지만 완벽하지 않으며, 속이는 것은 잘 되지 않음
     * Leetcode 중급/고급 문제를 30-45분 동안 인터뷰에서 사용하는 것은 두 가지 유형의 사람만 드러낼 수 있음
          + 문제를 처음부터 접근하는 사람과 이미 해결책을 알고 있는 사람
          + Kadane의 알고리즘을 모르면 문제를 처음부터 접근하는 것과 같음
          + 최적의 인터뷰 방법은 모르지만, 개인적으로 선호하는 스타일이 있음
          + 인터뷰 질문은 테스트 케이스가 있고, 점진적으로 복잡해지며, 데이터 구조에 초점을 맞추고, 후보자가 타협하고 결정을 내릴 수 있는 기회를 제공해야 함
     * 문제는 AI가 아니라, 회사가 후보자를 적절히 선택하는 방법을 모르는 것임
          + 심리측정학의 기본조차 적용하지 않음
          + 가장 좋은 선택 과정은 새로운 사람이 실제로 몇 주 동안 일을 하도록 하는 것임
     * 마지막 인터뷰에서는 AI를 포함한 도구를 사용하여 과제를 수행하도록 요청받았음
          + 라이브 코딩 인터뷰에서도 유사한 과정을 거쳤음
          + 도구를 사용하여 기술과 좋은 관행을 확인하는 것이 당연한 선택임

   AI 탓이 아니라, 기존에 면접 과제가 optimal answer 를 구하시오. 그러면 만사 OK 라는 이런 허술한 포맷이었던 것이 문제고 그 문제가 이제 드러난 게 아닐까요? 실업무에서 AI 를 활용하지 않을 것도 아닌데 왜 제한을 거나요? ㅎㅎ 어떤 수단을 사용했던 간에, output 이 나오면 되는겁니다. 다만 그 수단을 어떻게 활용했는가를 투명하게 심사할 필요는 있죠

   동감합니다. AI가 등장하면서 실무와 거리감 있는 엉터리 코딩 테스트들은 시장에서 자연스레 탈락하게 될거고, 좀더 나은 채용 방식을 쓰는 회사들이 좋은 인재들을 가져가겠죠.
   흥미로운 창과 방패의 싸움이네요.
"
"https://news.hada.io/topic?id=19488","스택오버플로우의 다음 단계 - Q&A는 그냥 시작이었어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    스택오버플로우의 다음 단계 - Q&A는 그냥 시작이었어요

     * Stack Overflow는 16년 이상 기술 전문가들이 배우고, 기술을 공유하며, 경력을 발전시키는 중심 허브 역할을 해왔음
     * 그러나 기술 환경이 변화하면서 기존의 Q&A 모델만으로는 사용자들의 다양한 요구를 충족하기 어려워졌음
     * 이에 따라, 기존의 Q&A를 유지하면서도 새로운 기능과 콘텐츠 유형을 도입할 계획

Stack Overflow의 변화 방향

     * Stack Overflow를 개인화된 기술 허브로 발전시키고자 함
     * Q&A뿐만 아니라, 블로그, 뉴스, 코딩 워크숍, 교육 자료, 코딩 유머, 업계 경험담 등 다양한 콘텐츠를 한곳에서 제공하는 플랫폼으로 확장할 예정
     * 사용자가 각자의 학습 방식에 맞게 기술 정보를 습득할 수 있도록 콘텐츠 형식을 다변화할 것
     * 이 공간이 인터넷에서 내 동네로 들어가는 '제3의 화면(Third Screen)'이 되기를 바람

     ""지식 창출을 진정으로 성장시키고, 키우고, 장려하는 유일한 방법은 웹의 지식 소스에 기여할 수 있는 방법을 확대하는 것""

새로운 콘텐츠 유형

     * 기존의 Q&A 시스템을 유지하면서도, 다양한 콘텐츠 유형을 도입하여 기여할 수 있는 방식을 확대할 예정
     * 투표 시스템, 커뮤니티 편집 기능 등 기존의 품질 관리 체계를 유지하면서 새로운 콘텐츠에도 적용하겠음
     * 새로운 콘텐츠 유형에 대한 기여도를 측정하고, 이를 통해 사용자들이 명확한 보상을 받을 수 있도록 할 것
     * 배지와 포인트 시스템을 개선하여 지속적인 기여를 장려하고, 멘토링 및 학습 경로 완료 등 새로운 참여 방식도 인정할 계획

새로운 유형의 사용자를 위한 더 나은 경험

     * 기존 Q&A 모델에 관심이 없던 사용자들도 새로운 방식으로 지식을 공유할 수 있도록 다양한 콘텐츠 형식을 제공할 예정
     * Stack Overflow Jobs는 개발자와 기술 전문가를 위한 맞춤형 채용 플랫폼으로 성장하고 있으며, 더 많은 국가로 확장할 계획을 가지고 있음
     * 기술 산업 내 실업률 증가에 대응하여, 더 많은 구직자와 고용주를 연결하는 역할을 강화할 예정

커뮤니티와의 협력 강화

     * AMA 등 커뮤니티와의 대화를 지속적으로 이어가며, 사용자 의견을 적극 반영할 계획
     * 사용자가 원하는 기능이나 개선점을 제안할 수 있도록 지속적인 피드백 채널을 운영할 예정
     * 앞으로 몇 달 동안 진행될 변화와 실험에 대한 소식을 정기적으로 공유할 것임

   이제 플로오버스택으로 거듭나는거야!

   Powered by humans 가 인상적이네요

   GPT로 대표되는 LLM이 시작 된고 난 후.

   각종 개발 커뮤니티의 유입이 줄었다고 생각됩니다.

   (개인적으로도) 구글링은 계속하고 있지만, 의미있는 작업은 프로프트에서 이뤄지고 있습니다.

   커뮤니티화 되는 것 같군요

   힘내라! 스택오버플로!!
"
"https://news.hada.io/topic?id=19510","수백만 명과 수백 개의 인기 앱에서 코드 실행 권한을 획득하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 수백만 명과 수백 개의 인기 앱에서 코드 실행 권한을 획득하는 방법

     ""물론 Firebase가 (부분적으로) 원인이었어요""

     * AI 편집기 Cursor의 설치 파일 다운로드 과정에서 Lulu 방화벽을 통해 TodeskTop으로 연결을 시도한다는 사실을 확인함
          + ToDesktop은 Electron 앱 패키징, SDK, 업데이트 등을 제공하는 서비스임
     * 앱이 Firestore를 사용하고 있음을 확인하고, 개발자 도구를 통해 Firebase에 대한 기본 조사를 시작
          + Firebase: 구글에서 제공하는 앱용 백엔드 플랫폼으로, Firestore라는 NoSQL 데이터베이스를 통해 클라이언트 측 데이터 저장 및 처리를 지원
     * 개발자도구(DevTools)와 소스맵(sourcemap)을 활용해 Firestore에서 사용되는 컬렉션들을 살펴봄
     * temporaryApplications라는 이름의 컬렉션이 발견되었으나, 오래된 목록일 뿐 민감한 정보는 없었음(2022년 이후 업데이트되지 않음)
     * 대부분의 주요 로직과 배포 작업은 npm 패키지 @todesktop/cli를 통해 이뤄짐을 확인함
     * @todesktop/cli도 소스맵이 있어서, sourcemapper로 원본 소스 구조를 파악함

Todesktop CLI 들여다 보기

     * ToDesktop CLI: 앱 배포, 소스코드 업로드 등 주요 기능을 담당함
     * CLI 소스맵을 분석하면서 Firebase Cloud Function 중 getSignedURL을 악용해 임의 S3 업로드를 시도할 수 있는 취약점을 발견했으나, 실제로 의미 있는 파일 경로를 찾기는 어려워 보였음

Postinstall 스크립트를 통해 배포 파이프라인 하이재킹하기

     * 목표: 빌드가 진행되는 컨테이너(서버)에서 코드 실행 권한을 획득하는 것임
     * package.json의 postinstall 스크립트에 리버스 쉘(reverse shell) 페이로드를 넣어 빌드 컨테이너에서 연결을 수신함
     * 성공적으로 컨테이너 내부 접근에 성공하고, 빌드 환경의 구조와 중요한 파일들을 살펴봄
     * config.json.encrypted 파일을 확인하고, 복호화 방식도 찾아내어 실제 비밀정보(config.json)를 추출함
     * 추가로 Firebase Admin 키(광범위 권한을 지닌 키)도 내부에서 발견함

Post-exploitation

     * 이 취약점을 통해 마음대로 앱 업데이트를 배포해, 사용자가 앱을 재시작할 때 즉시 악성 코드 실행 가능함
     * 실제로 테스트용 앱에 업데이트 배포 후, 클라이언트 측에서 RCE(원격 코드 실행)을 재현함

영향범위

     * ToDesktop을 사용하는 모든 앱에 악성 업데이트를 배포할 수 있어, 수백만 명 이상의 사용자에게 잠재적으로 영향을 끼칠 수 있는 문제임
     * 예시로 언급되는 앱:
          + ClickUp (https://clickup.com)
          + Cursor (https://cursor.com) (현재 자체 빌드 시스템으로 이전함)
          + Linear (https://linear.app)
          + Notion Calendar (https://calendar.notion.so)
     * 특히 이들 사용자들은 IT·기술 업계 종사자가 많아 공격 시 피해가 클 가능성이 높음

The fix

     * 보고 후 즉시 ToDesktop 측과 연락해 해결 과정을 진행함
     * ToDesktop은 빠르게 문제를 해결하고, 추가 보상을 제공했음
     * 빌드 컨테이너와는 분리된 권한의 사이드카 컨테이너에서 서명, 업로드 등의 중요한 작업을 수행하도록 구조를 변경함
     * ToDesktop의 공식 보안 incident 보고서는 이곳에서 확인 가능함
     * 보안 사고는 어느 회사에나 일어날 수 있지만, 중요한 것은 대응 태도이며, ToDesktop은 신속하고 협조적으로 대처해 긍정적인 인상을 남김
"
"https://news.hada.io/topic?id=19467","TCP나 UDP를 사용하지 않으면 무슨 일이 일어날까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     TCP나 UDP를 사용하지 않으면 무슨 일이 일어날까?

     * 네트워크 인프라는 스위치, 브리지, 라우터, 로드 밸런서, 방화벽 등으로 구성됨
     * 운영체제는 패킷을 분류하고, 큐에 배치하며, 방화벽 규칙을 적용하는 등 네트워크 통신을 제어함
     * 그렇다면 존재하지 않는 전송 계층 프로토콜을 사용하면 어떻게 될까?
     * OS가 허용할까? 패킷이 실제로 전달될까? 방화벽이 차단할까?
     * 직접 실험을 진행하여 확인함

인터넷 프로토콜 개요

     * 인터넷은 여러 계층의 프로토콜이 데이터를 전달하는 방식으로 동작함
     * 애플리케이션이 요청을 보내면, OS가 이를 여러 네트워크 계층의 헤더로 감싸면서 전송함
     * 전송 계층(Transport Layer): TCP(6), UDP(17) 등의 프로토콜이 위치함
     * IP 헤더의 Protocol 필드를 수정하여 미사용된 번호를 넣으면 어떤 일이 벌어질까?

실험 #1: 내 PC에서 직접 테스트

  실험 방법

    1. HDP(가짜 프로토콜) 정의: 기존 프로토콜과 전혀 다른 새로운 전송 계층 프로토콜 설계
    2. 서버와 클라이언트 구현: 패킷을 송수신하는 프로그램 개발
    3. 루프백(loopback) 테스트: OS가 자체적으로 패킷을 처리하는 방식 관찰

  실행 과정

$ sudo cargo run --bin server  # 서버 실행
$ fortune | cowsay | sudo cargo run --bin client 127.0.0.1  # 클라이언트 실행

  결과

     * OS가 HDP 패킷을 정상적으로 처리하여 루프백 인터페이스를 통해 다시 수신됨
     * IP 프로토콜 번호를 변경하여 추가 테스트 진행
          + 1 (ICMP), 2 (IGMP), 6 (TCP) → 서버에서 감지되지 않음
          + 50, 51 (IPSec 관련 프로토콜) → 클라이언트에서 전송 자체가 차단됨
          + 256 (IP 프로토콜 번호 범위 초과) → socket() 호출 단계에서 오류 발생

  원인 분석

     * OS가 특정 프로토콜 번호를 시스템적으로 예약하여 차단하는 경우 존재
     * Darwin(BSD 기반 macOS)에서는 socket() 호출 시 protocol=0을 설정하면 일부 패킷이 자동 필터링됨
     * IPSec 관련 프로토콜은 보안상의 이유로 차단될 가능성이 큼
     * IPv4 프로토콜 번호는 8비트이므로 0~255까지만 유효함

실험 #2: 인터넷에서 패킷 전송

  실험 계획

    1. DigitalOcean VPS 설정: 독일 프랑크푸르트에 있는 클라우드 서버에 실험 환경 구축
    2. HDP 패킷 전송: 내 PC(사우디아라비아)에서 DigitalOcean 서버로 패킷을 송신
    3. 네트워크 장비의 반응 분석: 패킷이 도착하는지, 방화벽이 차단하는지 확인

  예상 결과

     * HDP 패킷이 정상적으로 전달되거나, 일부 ISP 또는 DigitalOcean의 방화벽이 차단할 가능성이 있음

  실제 결과

     * 첫 번째 패킷만 전달되고 이후 패킷은 차단됨
     * tcpdump를 사용하여 확인한 결과:
          + 내 PC에서 패킷이 정상적으로 전송됨
          + DigitalOcean 서버에서는 첫 번째 패킷만 감지됨
          + 이후 패킷은 어딘가에서 차단됨 (NAT, 방화벽, ISP 등)

  원인 분석

     * DigitalOcean에서는 비표준 IP 프로토콜을 지원하지 않음
     * 클라우드 제공업체의 방화벽 정책이 주요 원인일 가능성이 큼
     * 왜 첫 번째 패킷만 도착했는지는 불명확함

  AWS에서 재실험

     * AWS에서 두 대의 인스턴스를 사용하여 실험을 재진행함
     * 같은 데이터센터 내에서는 HDP 패킷이 정상적으로 송수신됨
     * 그러나 인터넷을 통해 전송할 경우 DigitalOcean과 동일한 첫 번째 패킷만 도착하는 문제 발생

주요 이슈

     * NAT(Network Address Translation): TCP/UDP 포트 기반으로 작동하므로 HDP 같은 신규 프로토콜을 다룰 방법이 없음
     * 방화벽/네트워크 필터링: 대부분의 ISP와 클라우드 제공업체는 미승인 IP 프로토콜을 차단함
     * 네트워크 장비의 최적화 문제: 일부 네트워크 장비는 비표준 패킷을 무조건 삭제할 가능성이 있음

결론: TCP와 UDP를 사용하는 것이 최선

     * OS 간의 네트워크 스택 구현이 다름
          + Linux, macOS, Windows에서의 socket() 동작 방식이 제각각임
     * 방화벽과 NAT 장비가 비표준 프로토콜을 차단함
          + 개인 네트워크에서는 동작하더라도 인터넷에서는 거의 불가능함
     * 성능 개선 효과 없음
          + UDP 기반으로 구현된 QUIC 등 이미 검증된 대안이 존재함
     * TCP/UDP를 사용하자
          + 표준 프로토콜을 사용하면 포트 기반 NAT, 방화벽, 라우팅 등이 자동으로 지원됨

추가 자료

     * UDP 프로토콜 사양
     * IP 프로토콜 번호 목록
     * Raw 소켓의 플랫폼별 차이

   https://www.saturnsoft.net/network/2019/03/21/quic-http3-1/ 를 읽어보셔도 도움이 될 것 같네요.

   생각해보니 NAT이 모든걸 막겠군요...IPv6가 완전히 정착하고 NAT이 없어진다면(그럴 일은 없을 것 같지만) 자신이 만든 프로토콜로 통신하는것도 가능할 수 있겠어요.

   오호 좋은 시도군요...
   네트워크 근간을 흔드는 시도는 좋았으나, 이 세상의 모든 네트워크 장비는 TCP/UDT 에 특화된 장비만 있어서...

   네트워크 장비가 틀 찍어내기라는 것을 모를때... 는 가능할꺼같은데... 알고나면 내가 잘되서 내 프로토콜을 모두가 사용하도록 하겠다가 아니면 못하는 거란걸 알게되죠...

        Hacker News 의견

     * TCP보다 우수하지만 채택되지 않은 오래된 프로토콜인 SCTP가 있음
          + 네트워크 하드웨어가 TCP와 UDP 외의 모든 것을 차단했기 때문임
     * 다양한 전송 프로토콜을 구현한 사람으로서 IP 위에 계층을 쌓는 가장 큰 장애물은 WAN 라우터가 아닌 소비자 NAT 장치임
          + 특정 Netgear 라우터의 경우, 트래픽이 끝까지 살아남지만 첫 4바이트가 0으로 변하는 특정한 손상이 발생했음
          + 이는 TCP/UDP로 처리되었지만 실제 번역 경로는 따르지 않았다고 의심됨
     * TCP나 UDP를 사용하지 않으면 통신이 어려울 것임
          + 인터넷은 TCP와 UDP를 표준으로 삼고 있음
          + 다른 프로토콜을 처리할 수 없는 장치가 많음
          + 인터넷 하드웨어를 모두 교체하는 것은 IPv4를 폐기하는 것보다 더 오래 걸릴 것임
          + 새로운 프로토콜의 큰 이점이 있어야만 모든 기업과 정부가 큰 비용을 들여 지원을 구현할 것임
     * 기사의 끝이 클리프행어처럼 느껴짐
          + 왜 커스텀 프로토콜의 단일 패킷만 통과하고 나머지는 드롭되었는지 궁금함
     * TCP/UDP 패킷은 OS 네트워크 스택에 의해 특정 포트를 듣는 프로세스에만 전송된다고 생각했음
          + 이는 보안 기능일 수 있으며, 권한이 없는 프로세스는 일부 포트를 들을 수 없음
          + 다른 프로세스가 모든 트래픽을 캡처할 수 있을 것이라고 기대하지 않음
          + 여러 전송 계층 프로토콜의 트래픽을 캡처할 수 있는지 몰랐음
          + 아마도 해당 시스템 호출은 높은 권한을 요구할 것임
     * 인터넷 프로토콜과 라우팅 장비가 오늘날 처음부터 설계되었다면 어떻게 되었을지 궁금함
          + 훨씬 큰 패킷과 UDP 스타일의 기본 프로토콜이 HTTP를 대체했을 것임
          + 간단한 스트리밍 프로토콜이 TCP를 대체하고 비디오 재생을 지원했을 것임
          + 이 두 프로토콜이 대부분의 트래픽을 더 효율적으로 처리했을 것임
     * ""바퀴를 재발명한다면 어떻게 될까?""라는 가정임
     * 패킷 소켓이 필요함
          + IP 네트워크는 모든 것을 전달해야 하지만 NAT가 주요 문제임
          + IPv6로 시도해보는 것이 흥미로울 것임
     * TCP/UDP/IP가 모든 것을 장악하기 전의 다른 프로토콜을 사용했을 것임
     * 모두 UUCP를 사용했을 것임
          + TCP/UDP 이전에 유사한 작업을 수행했음

   옛날 스타크래프트에서 하마치로 멀티를 할 때 IPX가 있었는데, 그 때 이게 뭘까 참 궁금했던 기억이 나네요.
"
"https://news.hada.io/topic?id=19549","Superglue – 코드를 자동 생성하는 오픈소스 API 커넥터 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Superglue – 코드를 자동 생성하는 오픈소스 API 커넥터

     * 자동으로 API 연결 코드를 생성하는 오픈소스 프록시 서버이자 데이터 커넥터
     * 복잡한 API와 시스템 간에 프록시 역할을 하면서 API 응답을 원하는 형식으로 자동 변환하고, 데이터 구조를 검증하며, 예상치 못한 오류를 자동으로 수정하는 셀프 힐링 기능을 제공
     * 동작 방식: 원하는 데이터 스키마를 정의하고 ""Jira에서 모든 이슈 가져오기"" 같은 명령을 내리면 다음 동작을 수행
          + API 문서를 분석하여 자동으로 API 설정을 생성
          + 다양한 페이지네이션 및 인증/오류를 자동으로 처리
          + JSONata를 활용하여 API 응답 데이터를 원하는 스키마로 변환
          + 들어오는 데이터가 스키마를 따르는지 검증하고, 변환이 깨지면 자동 수정
     * 만약 다음과 같은 문제를 자주 겪는다면 superglue가 해결책이 될 수 있음:
          + 복잡한 레거시 API 연결이 필요할 때
          + ERP 시스템의 외국어 필드 및 복잡한 데이터 매핑이 필요할 때
          + FTP 서버에 저장된 CSV 데이터를 자동으로 변환하고 싶을 때
          + API 변경 시 코드가 깨지는 문제를 자동으로 해결하고 싶을 때
     * 주요 기능
          + LLM 기반 데이터 매핑: 대형 언어 모델을 활용하여 자동으로 데이터 변환 생성
          + API 프록시: 실시간으로 API 응답을 가로채어 변환 (지연 최소화)
          + 파일 처리: CSV, JSON, XML 등 다양한 파일 형식 및 자동 압축 해제 지원
          + 스키마 검증: 데이터가 정의된 스키마를 따르는지 확인
          + 유연한 인증 지원: 헤더 인증, API 키, OAuth 등 다양한 인증 방식 지원
          + 스마트 페이지네이션: 다양한 페이지네이션 방식 자동 처리
          + 캐싱 및 재시도 로직: 내장된 캐싱 기능과 재시도 전략을 자유롭게 설정
"
"https://news.hada.io/topic?id=19476","iMac G4(K) + M4 Mac Mini","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        iMac G4(K) + M4 Mac Mini

     * 1년 전, M1 iMac을 업무용으로 사용해 보았지만 21인치 화면이 책상에 너무 많은 공간을 차지
     * Sean의 Action Retro 비디오에서 iMac G4에 M4 Mac Mini를 넣는 것을 보고 시도해 보기로 함

Juicy Crumb DockLite G4 시도하기

     * Juicy Crumb DockLite G4는 iMac G4의 메인 로직 보드를 대체하여 내장된 LCD를 HDMI 모니터로 전환함
          + iMac의 전원 공급 장치를 사용하고 Apple Pro 스피커를 구동할 수 있는 내장 오디오 앰프가 있음
     * DockLite G4를 주문했으나 도착까지 몇 주가 걸렸고, 작동하지 않는 17인치 iMac G4를 찾아야 했음. eBay에서 구입했으며, 배송비가 기계 가격만큼 비쌌음.
     * DockLite가 도착한 후, LCD가 정상적으로 작동하고 Mac Mini의 데스크톱을 HDMI로 표시하는 것을 확인할 수 있었음

색상 밴딩

     * DockLite 또는 20년 된 LCD 화면의 문제인지 확실하지 않지만, 화면에 색상 밴딩이 눈에 띔. 특히 macOS 창 그림자에서 두드러짐.

iMac 화면 해상도

     * iMac G4의 17인치 화면 해상도는 1440x900으로, 현대 macOS에 적합하지 않음

노출된 포트

     * DockLite의 새로운 포트와 iMac 하단 케이스 컷아웃 사이의 공간을 채울 커버가 없어서 아쉬웠음.

화면 블랭킹

     * DockLite는 HDMI를 통한 화면 끄기를 지원하지 않음. Mac Mini가 비활성화 후 화면을 끄려고 할 때, DockLite는 백라이트를 켜둔 채 검은 화면을 표시함

화면 업그레이드

     * DockLite의 문제를 해결하기 위해 맞춤형 화면 업그레이드를 선택함. 다른 LCD와 적절한 드라이버 보드를 사용하여 더 높은 해상도와 더 나은 색상을 얻을 수 있었음.
     * Sharp LQ170R1JX42, 4K 3840x2400 17인치 LCD를 선택하여 iMac의 원래 LCD와 동일한 외부 크기에 맞춤.

  iMac 목

     * 새로운 LCD가 USB-C로 작동한 후, iMac의 관절 목 안에 새로운 케이블을 넣는 문제가 발생함.
     * USB-C 케이블을 통과시키기 위해 목의 플랜지를 새로 설계하고 3D 프린팅하여 해결함.

  Mac Mini 장착

     * Mac Mini를 iMac의 돔 내부에 장착하기 위해 새로운 원형 부품을 설계하고 3D 프린팅하여 Mac Mini를 고정함.
     * Mac Mini의 전원 버튼이 iMac 하단에서 접근 가능하도록 배치함.

  남은 문제

     * 후면 포트 브래킷을 제작해야 하며, 플립다운 광학 드라이브 도어를 USB 포트로 활용할 계획임.
     * eDP LCD 컨트롤러의 ""No Signal"" 메시지를 비활성화하는 방법을 찾고 있음.

   낭만적이지만 배보다 배꼽이 더 크긴 하네요.
   그냥 적당한 LG 울트라파인이나 델 울트라샤프 모니터 사고 VESA 홀에 브라켓 달아서 맥미니 장착하면 현대적이고 간단한 솔루션같습니다.
"
"https://news.hada.io/topic?id=19514","국산 CMS Rhymix의 저작권자 표기 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       국산 CMS Rhymix의 저작권자 표기 변경

   Rhymix가 공개된지 꽤 오랜 기간이 지났지만, 많은 분들이 인지하지 못하고 계실 여러가지 소식을 정리해 보았습니다.
     * Rhymix는 네이버에서 개발유지보수하던 XpressEngine의 포크 버전임.
       현재 그 사업을 인수한 XEHub는 XE1의 유지보수를 사실상 포기하고, Laravel 기반의 XE3에 집중하고 있음.
     * Rhymix의 저작권 표기가 Rhymix의 최다 기여자 (주)포에시스로 변경됨.
       운영 주체를 분명히 밝힘으로써 공신력을 높이기 위함임.
       https://github.com/rhymix/rhymix/issues/2436
     * Rhymix 공식 홈페이지 및 커뮤니티, 자료실이 개설됨.
       기존에 XE/RX 겸용 커뮤니티로 사용되던 XETOWN의 데이터를 이전받음.
       (필자평) XETOWN 운영진의 결정이 아주 놀라움.
       https://rhymix.org/free/1900022
     * Laravel의 대표 템플릿 엔진인 Blade를 지원함.
       Laravel의 Blade를 Laravel 밖에서 사용하는 것을 지원하지 않아, Blade 문법 템플릿 파서를 직접 작성함.
       https://github.com/rhymix/rhymix/pull/2200
     * Namespace를 지원함.
       conf/module.xml에서 정의한 정보를 토대로 오토로딩을 지원함. 준 표준에 가까운 composer를 활용하는 방식은 논의중임.
     * 비동기 처리를 위한 Queue 기능을 제공함.
       더 이상 큐 처리를 위한 별도의 모듈을 작성하여 관리하지 않아도 됨.
       https://github.com/rhymix/rhymix/pull/2414
     * 최근 20,000커밋을 넘김. 국산 오픈소스 CMS중 제일 활발하게 유지보수 되고 있음.

   기진님 아니였으면 이미 죽은 프로젝트이긴 해요

   XE1을 사용했었는데 개발사에서 지원을 중단한 프로젝트를 사용자들이
   fork해서 라이믹스 프로젝트가 시작될 때 참 놀라웠던 기억이 나는데 벌써 10년이나 됐네요.
   xetown에 올라왔던 글을 라이믹스 사이트로 포워딩하는 것 까지 xetown에서 신경 많이써주셨네요
   응원합니다
"
"https://news.hada.io/topic?id=19564","macOS 폴더 액션으로 컴퓨터 자동화 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        macOS 폴더 액션으로 컴퓨터 자동화 하기

     * 반복적인 작업을 사람이 직접 수행하는 것은 비효율적이며, 자동화가 필요함
     * 예를 들어, macOS의 기본 .MOV 동영상을 .MP4로 변환하는 과정이 번거로웠음
          + 기존에는 GUI 변환 앱을 사용했지만, 여러 단계를 거쳐야 함
          + 이를 해결하기 위해 macOS 폴더 액션(Folder Actions) 을 활용하여 자동 변환 시스템을 구축
     * 추가로 한 작업들: 비디오-to-GIF 변환, 이미지-to-WebP 변환, Youtube 비디오 다운로드, Twitter 비디오 다운로드, Youtube 비디오-to-MP3 변환

폴더 액션을 이용한 자동 변환

     * 특정 폴더에 파일을 드롭하면 자동으로 변환 작업이 실행됨
     * 예제:
          + .MOV → .MP4 변환
          + .JPG → .WEBP 변환
          + Twitter 및 YouTube 동영상 다운로드
     * 폴더에 파일을 넣는 것만으로 변환이 완료됨, 원본 파일도 자동 삭제됨

macOS 폴더 액션 설정 방법

  주의사항

     * 폴더 액션을 설정한 후 폴더 이름을 변경하면 동작하지 않음.
     * 폴더 이름을 변경하면 다시 액션을 재설정해야 함.

  설정 절차

    1. 터미널에서 폴더 생성
    2. Automator 실행 후 새 ""Folder Action"" 생성
    3. ""Get Selected Finder Items"" 및 ""Run Shell Script"" 추가
          + Pass input: ""as arguments"" 설정
    4. 변환 스크립트 입력
          + 예제: .MOV → .MP4 변환
for f in ""$@""; do
    /opt/homebrew/bin/ffmpeg -n -loglevel error -i ""$f"" -vcodec libx264 -crf 23 -preset ultrafast -tune film ""/Users/alexander/Library/Mobile\ Documents/com\~apple\~CloudDocs/Downloads/$(date +""%Y_%m_%d_%I_%M_%p_%s"").mp4"";
    rm -f ""$f""
done

    5. 저장 후 종료
    6. 폴더에 .MOV 파일을 드래그 앤 드롭하면 자동 변환 실행
          + 실행 중에는 메뉴바에 기어 아이콘이 표시됨.

추가 폴더 액션 예제

  동영상 → GIF 변환

for f in ""$@""; do
    /opt/homebrew/bin/ffmpeg -n -loglevel error -i ""$f"" -vf ""fps=18,scale=720:-1:flags=lanczos"" ""/Users/alexander/Library/Mobile Documents/com~apple~CloudDocs/Downloads/$(date +""%Y_%m_%d_%I_%M_%p_%s"").gif"";
    rm -f ""$f""
done

  이미지 → WEBP 변환

for f in ""$@""; do
    /opt/homebrew/bin/cwebp -q 70 ""$f"" -o ""/Users/alexander/Library/Mobile Documents/com~apple~CloudDocs/Downloads/$(date +""%Y_%m_%d_%I_%M_%p_%s"").webp"";
    rm -f ""$f""
done

  YouTube 동영상 다운로드

   브라우저에서 이 폴더로 그냥 URL을 Drag & Drop 하면 다운로드 시작
for f in ""$@""; do
    url=$(grep -o '<string>.*</string>' ""$f"" | sed 's/<string>\(.*\)<\/string>/\1/')
    if [ -n ""$url"" ]; then
        /opt/homebrew/bin/yt-dlp -P ""~/Downloads"" ""$url""
        if [ $? -eq 0 ]; then
            rm -f ""$f""
        fi
    fi
done

  Twitter 동영상 다운로드

for f in ""$@""; do
    url=$(grep -o '<string>.*</string>' ""$f"" | sed 's/<string>\(.*\)<\/string>/\1/')
    if [ -n ""$url"" ]; then
        /opt/homebrew/bin/yt-dlp -P ""~/Downloads"" ""$url""
        if [ $? -eq 0 ]; then
            rm -f ""$f""
        fi
    fi
done

  YouTube → MP3 변환

brew install yt-dlp; brew install ffmpeg

for f in ""$@""; do
    url=$(grep -o '<string>.*</string>' ""$f"" | sed 's/<string>\(.*\)<\/string>/\1/')
    if [ -n ""$url"" ]; then
        /opt/homebrew/bin/yt-dlp -x --audio-format mp3 --audio-quality 0 --ffmpeg-location /opt/homebrew/bin/ffmpeg -P ""~/Downloads"" ""$url""
        if [ $? -eq 0 ]; then
            rm -f ""$f""
        fi
    fi
done

  폴더 액션 변경 방법

     * 폴더 액션을 수정하려면 폴더에서 우클릭 → ""Folder Action Setup"" 선택
     * 저장된 모든 액션은 다음 경로에 있음:
Macintosh HD / Users / YourName / Library / Workflows / Applications / Folder Actions/

     * 이 시스템을 활용하면 각각의 폴더를 터미널 명령어의 인터페이스로 변환 가능
     * 덕분에 데스크톱이 훨씬 더 유용한 작업 공간이 됨

   우와 Windows 용은 없을까요?

   윈도우용 Watch 4 Folder 라는 도구가 정확히 같은 작업을 합니다.
   특정 폴더에 파일/폴더가 생성/변경/삭제/되면 프로그램이나 스크립트를 실행해줍니다.
   https://leelusoft.blogspot.com/p/watch-4-folder-25.html
   무료버전은 1개의 폴더만 감시하며, 유료는 $4.99 네요

   페이스북이 만든 오픈소스인 Watchman 도 있습니다. 윈도우/맥/리눅스 모두 지원합니다
   물론 GUI가 아니라서 위의 도구보다는 조금 불편합니다.
   https://facebook.github.io/watchman/

   오 영상저장은 참 편해보이네요. 진짜 컴퓨터처럼쓰는느낌

   느낌상으로 리눅스용도 있을거 같기는 합니다만. 하나 만들어도 좋을거 같습니다.

   이거 재밌어보이네요 ㅎㅎ

   오.. 적용해봐야겠네요!

   몰랐는데 이거 괜찮네요.
"
"https://news.hada.io/topic?id=19526","NIH.gov DNS 서버 장애로 PubMed, BLAST 등 접속 불가 [복구 완료]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            NIH.gov DNS 서버 장애로 PubMed, BLAST 등 접속 불가 [복구 완료]

     * 개발자를 위한 DNS
          + DNS를 한 번에 이해하기 위한 자료임
          + 도메인 이름과 DNS 레코드에 대한 학습 자료 제공
          + 브라우저 확장 프로그램과 DNS 조회 API에 대한 정보 포함
     * DNS 레코드
          + www.nih.gov에 대한 DNS 레코드 예시 제공
          + Cloudflare와 Google DNS에 대한 설명 포함
     * 권한 있는 DNS 서버
          + 권한 있는 DNS 서버가 사용 불가능할 때 다른 DNS 서버를 선택하여 시도할 것을 권장함
     * DNS 도구
          + Reverse IP 조회, DNS 검사기, 웹사이트에서 IP 조회, CNAME 조회, TXT 조회 등의 도구 제공
     * 학습 센터
          + 다양한 DNS 레코드 유형에 대한 학습 자료 제공
     * 추가 정보
          + 브라우저 확장 프로그램, 연락처, 광고, 개인정보 보호정책, 이용 약관, 상태 정보 제공

        Hacker News 의견

     * DNS 해상도가 다시 작동 중임
     * 서버들이 여전히 TCP로 응답함
          + 서비스가 부분적으로 운영 중이지만 외부에서 상황을 파악하기 어려움
     * Pubmed는 과학자들을 위한 Google과 같음
          + 과학 출판물을 검색할 때 주로 Pubmed를 사용함
          + 대안이 있지만 대부분의 유럽 과학자들도 최근까지는 잘 몰랐을 것임
     * NIH는 과학자들에게 많은 기능을 제공함
     * 기술적으로 NIH.gov에는 세 개의 네임 서버가 있음
          + 모든 호스트가 작동 중이지만 TCP로만 DNS 응답함
          + IPv6는 없음
          + 외부 회사에 서버나 서비스 운영을 위임한 흔적이 없음
     * NIH에는 정보 기술 센터라는 부서가 있음
          + IT 지원을 담당하며 DNS 서버 운영을 맡고 있음
     * FAA 데이터베이스도 다운됨
          + 일반인들이 모르는 여러 시스템이 영향을 받았을 가능성이 있음
     * 중국의 사이버 공격이라면 큰 스캔들이 될 것임
          + 그러나 의도적인 것임
     * BLAST는 생물정보학 도구의 일부분임
          + 유사성을 찾기 위해 시퀀스를 데이터베이스에 쿼리로 보냄
     * DNS 서버가 일시적으로 다운될 수 있음
          + NIH가 유지보수를 하고 있을 가능성 있음
          + 웹사이트에 접근할 수 없는 것은 아님
     * ""접근 불가""라는 표현은 비유적인 것일 수 있음
     * 웹사이트에 접근할 수 있으며 필요한 사람에게 IP 제공 가능함
          + 예시: www.nih.gov의 여러 IP 주소 제공
     * 유럽 대안 사이트들:
          + europepmc.org
          + ebi.ac.uk/ena/browser/home
          + ensembl.org
     * 최소 16시간 동안 이런 상태였음
          + 백업이 있기를 바람
          + 비공식 소스를 사용하는 것에 대해 나쁘게 생각하지 않음
     * NIH DNS 서버가 모두 종료된 것 같음
          + NIH 웹사이트, PubMed, BLAST는 작동 중이지만 해상 불가
          + Cloudflare의 1.0.0.1 DNS 리졸버는 여전히 캐시된 기록을 가지고 있음
          + Google과 다른 대부분은 그렇지 않음
          + /etc/hosts를 통한 우회 방법 제공
     * ns.nih.gov, ns2.nih.gov, ns3.nih.gov는 응답하지 않지만 lhcns1.nlm.nih.gov는 응답함
"
"https://news.hada.io/topic?id=19460","FFT의 반격: Self-Attention에 대한 효율적인 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FFT의 반격: Self-Attention에 대한 효율적인 대안

     * 기존 Self-Attention 메커니즘은 O(n²) 의 복잡도를 가지며, 긴 시퀀스에 대한 확장성이 제한적임
     * 본 논문에서는 Fast Fourier Transform(FFT) 을 활용한 FFTNet을 제안함
     * FFTNet은 O(n log n) 의 시간 복잡도로 글로벌 토큰 혼합을 수행
     * 주파수 도메인에서 학습 가능한 스펙트럴 필터와 modReLU 활성화 함수를 도입하여 중요한 주파수 성분을 강조함
     * Long Range Arena(LRA) 및 ImageNet 벤치마크 실험에서 기존 Self-Attention 및 고정된 Fourier 변환 모델보다 우수한 성능을 보임

관련 연구

     * Self-Attention의 복잡도 : Transformer 모델은 O(n²) 의 연산량이 필요하여 긴 시퀀스 처리에 비효율적임
     * Fourier 기반 접근법 : FNet과 같은 모델은 고정된 Fourier 변환을 활용하여 연산량을 줄였으나, 입력 적응성이 부족함
     * 선형, 희소 및 저차원 근사 기법 : Performer, Linformer, BigBird 등의 연구가 Self-Attention의 연산을 근사하는 방법을 제안함
     * 직교 행렬 분해 기법 : 직교 변환(DFT 포함) 을 활용하면 모델 학습 안정성이 향상됨
     * 적응형 스펙트럴 필터링 : FFT 기반 변환에 학습 가능한 필터를 추가하여 기존 방식보다 더 유연하고 표현력이 높음

FFTNet: 적응형 스펙트럴 필터링 기법

  동기

     * Self-Attention은 O(n²) 의 복잡도를 가지며 긴 시퀀스에서 비효율적임
     * FFT는 O(n log n) 으로 동작하며 글로벌 상호작용을 효율적으로 인코딩 가능

  방법론

     * Fourier 변환 (FFT 적용)
          + 입력 시퀀스를 주파수 도메인으로 변환하여 전역적 의존성을 효율적으로 캡처
     * 적응형 스펙트럴 필터 적용
          + 전역 컨텍스트 벡터를 활용하여 학습 가능한 필터를 생성하고, 중요한 주파수 대역을 동적으로 강조
     * modReLU 비선형 활성화
          + 복소수 주파수 도메인에서 ReLU 기반 활성화 적용하여 표현력을 증가
     * 역 Fourier 변환 (IFFT)
          + 변환된 데이터에 대해 필터링 및 활성화를 적용한 후 다시 시간 도메인으로 변환

FFTNet의 이론적 근거

     * O(n log n)의 연산량으로 글로벌 토큰 혼합 가능
     * 적응형 Attention: 주파수 도메인에서 학습 가능한 필터가 주어진 입력에 따라 주파수를 조정
     * 비선형 활성화의 표현력 강화: modReLU 적용으로 단순 선형 변환을 넘어선 고차원 패턴 학습 가능
     * Parseval's theorem 기반 안정성 보장: 신호의 에너지를 보존하여 정보 손실을 최소화

실험 결과

  Long Range Arena (LRA) 벤치마크

     * FFTNet은 Transformer 및 FNet보다 전반적으로 더 높은 정확도를 기록함
     * 특히 ListOps, Text, Retrieval, Image, Pathfinder 태스크에서 더 좋은 성능을 보이며, 평균적으로 가장 높은 점수를 기록함
     * Transformer는 일부 태스크에서 높은 성능을 보였으나, 장기적인 의존성을 처리하는 데 한계를 가짐
     * FNet은 FFT를 활용하지만, 고정된 변환 방식이 적응성이 부족하여 전반적으로 낮은 성능을 보임
     * 특히 Path-X 태스크에서는 Transformer가 메모리 초과(OOM)로 실패한 반면, FFTNet은 안정적인 성능을 보였음

  ImageNet 분류 실험

     * FFTNet 기반 Vision Transformer(FFTNetViT)는 기존 ViT와 유사한 정확도를 유지하면서 연산량(FLOPs)을 크게 줄이는 데 성공함
     * Base 모델의 경우, FFTNetViT는 ViT보다 약 38% 적은 FLOPs를 사용하면서도 정확도가 소폭 증가함
     * Large 및 Huge 모델에서도 FFTNetViT는 ViT 대비 낮은 연산량으로 유사한 성능을 유지함
     * 이를 통해 FFTNetViT가 높은 계산 효율성을 제공한다는 점을 확인할 수 있음

  Ablation Study (구성 요소별 중요도 분석)

     * FFTNet의 다양한 요소를 제거하며 모델의 성능에 미치는 영향을 분석함
     * FFTNet의 주요 구성 요소를 제거할수록 정확도가 감소하는 경향을 보임
          + 스펙트럴 게이팅 제거: 특정 주파수를 강조하는 기능이 사라지면서 정확도가 소폭 하락함
          + 적응형 모듈 제거: 입력에 따라 필터를 동적으로 조정하는 기능이 사라져 정확도가 더 낮아짐
          + FFT 대신 합성곱 사용: 글로벌 정보를 효율적으로 혼합하는 기능이 사라져 가장 큰 성능 저하가 발생함
     * 이를 통해 FFTNet의 각 요소가 성능 향상에 중요한 역할을 한다는 점을 확인할 수 있음

결론

     * FFTNet은 Self-Attention보다 연산 효율성이 뛰어난 대안임
     * 주파수 도메인에서 적응형 스펙트럴 필터와 modReLU를 결합하여 강력한 표현력을 제공
     * 실험 결과, LRA 및 ImageNet에서 기존 Self-Attention 모델보다 성능 및 효율성 우수
     * O(n log n) 복잡도를 유지하면서도 Self-Attention 수준의 성능을 제공하여 긴 시퀀스 처리에 유리함
     * FFTNet을 기반으로 한 Vision Transformer(FFTNetViT)도 낮은 FLOPs로 ViT와 비슷한 성능 달성

     * 코드 저장소: GitHub 링크

        Hacker News 의견

     * 기본적으로 컨볼루션 정리를 활용함: 직접 공간에서의 비싼 컨볼루션이 상호 공간에서는 간단한 곱셈이 됨
          + 데이터에 컨볼루션 연산이 있을 때, 이를 곱셈으로 바꾸기 위해 켤레 도메인으로 변환함
          + 즉, 데이터에 자연스러운 도메인에서 작업함
     * Google은 2022년에 ""FNet: Mixing Tokens with Fourier Transforms""라는 아이디어를 소개함
          + 나중에 그들의 TPU가 대부분의 시나리오에서 FFT보다 행렬 곱셈에서 더 빠르다는 것을 발견함
     * Fourier 변환은 ""토큰"" 차원에서 수행됨. 그러나 많은 응용에서 이 차원은 의미가 없음
          + 그래서 변환기는 순열 불변 데이터를 처리하는 데 훌륭한 옵션임
          + 덜 알려진 유한 그룹에 대한 Fourier 변환을 사용한 추가 실험을 보고 싶음
          + 이것이 LLMs의 다음 큰 것이 된다면, 추론 엔진(vLLM, llama.cpp 등)이 이를 통합하기 얼마나 쉬울지 궁금함
     * 수학이 너무 어려워서 이해하기 힘듦. 누군가 이게 주의 메커니즘과 어떻게 동등한지, 어떤 주파수를 말하는지, 토큰 간의 위치 관계를 어떻게 인코딩하는지 기본 영어로 설명해 줄 수 있는지 궁금함
     * 이 프레임워크에 인과 마스킹을 어떻게 맞출 수 있을지 모르겠음. 위치 임베딩에 대한 언급도 없어서 비교되는 자기 주의 구현이 비인과적 NoPE인 것 같음
          + 결과가 최첨단에 가까웠다면 아마 저자가 언급했을 것임
     * 몇 년 전 이미 O(n log n) 전체 컨텍스트 혼합을 시연한 Hyena Operator에 대한 언급이 없음
     * 텔레메트리 시대에 클라우드 텔레메트리에 FFT를 적용하여 드라마를 유발하기 전 에피사이클과 준안정 시스템을 찾아내지 않는 것은 큰 실수라고 생각함
          + ""SLA는 서비스 배포 후 23-25분 후에 가장 위반될 가능성이 높음. 왜 그런지 궁금함... 아, 안돼.""
     * 주파수 도메인에서 사물을 보는 것이 왜 도움이 되는지에 대한 직관을 가진 사람이 있는지 궁금함
          + DC 항은 이해할 수 있지만 입력 데이터가 다른 주파수가 의미 있을 만큼 주기적이라고 기대하지 않음
     * 빅 O 표기법을 어느 정도 이해하지만, 컴퓨터나 전기 공학과 관련된 대부분의 것처럼 이것도 이해하기 어려움
          + 수학에 매우 약한 사람으로서 이런 것을 이해하거나 배울 수 있는 사람들을 부러워함
          + FFT에 대해 아는 것은 신호를 변화시키고, 어떤 신호 처리에 사용되며, 과거에 핵 폭발을 감지하는 데 중요한 역할을 했다는 것임
     * 주의가 왜 필요한지 이해하지 못함. 완전 연결 레이어도 모든 입력에 ""주의""할 수 있음
          + 매우 작은 데이터셋(0 - 500 토큰)에서는 주의가 훈련을 더 오래 걸리게 하고 결과를 나쁘게 만듦
          + 더 큰 데이터셋에서 이점이 나타나는 것 같음
          + AI 초보자로서 개인 AI 프로젝트를 하고 있어 정확한 참고 자료는 아님
"
"https://news.hada.io/topic?id=19531","대화형 음성의 불쾌한 골짜기 넘어서기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          대화형 음성의 불쾌한 골짜기 넘어서기

     * 인간의 음성은 톤, 피치, 리듬, 감정 등 다양한 변화를 통해 깊은 의미를 전달하는 가장 친밀한 매체임
     * 현재의 디지털 음성 비서는 이러한 감정적 요소가 부족하여 사용자와의 효과적인 협업에 한계가 있음
     * 감정이 결여된 음성은 초기에는 신기할 수 있지만, 시간이 지남에 따라 실망스럽고 피로감을 줄 수 있음
     * Sesame의 목표는 대화형 파트너가 단순히 요청을 처리하는 것을 넘어, 신뢰와 자신감을 쌓는 진정한 대화를 나누는 것임
     * 이를 통해 음성이 지닌 잠재력을 최대한 활용하여 지시와 이해의 궁극적인 인터페이스로 만들고자 함

핵심 요소

     * 감정 지능: 감정적 맥락을 읽고 대응하는 능력
     * 대화 역학: 자연스러운 타이밍, 일시정지, 끼어들기, 강조 등을 포함한 대화 흐름
     * 상황 인식: 상황에 맞게 톤과 스타일을 조정하는 능력
     * 일관된 성격: 일관되고 신뢰할 수 있으며 적절한 존재감을 유지하는 것

우리는 아직 거기에 도달하지 못했음

     * 디지털 동반자에게 음성 존재감을 부여하는 것은 어려운 과제이지만, 우리는 성격, 기억, 표현력, 적절성 등 여러 측면에서 꾸준히 발전하고 있음
     * 아래 데모는 통해 친근함과 표현력을 최적화한 대화형 음성 생성 작업의 일부를 보여주는 것

대화형 음성 생성 하기

     * 진정으로 상호작용하는 AI 동반자를 만들기 위해서는 고품질 오디오 생성뿐만 아니라 실시간으로 맥락을 이해하고 적응해야 함​
     * 전통적인 텍스트-음성 변환(TTS) 모델은 텍스트에서 직접 음성을 생성하지만 자연스러운 대화에 필요한 맥락 인식이 부족함​
     * 최근 모델은 인간과 유사한 음성을 생성하지만, 동일한 문장을 다양한 방식으로 표현할 수 있는 'one-to-many' 문제를 겪고 있음​
     * 추가적인 맥락(톤, 리듬, 대화의 역사 등)이 없으면 모델은 최적의 선택을 할 정보가 부족함​
     * 이러한 미묘한 차이를 포착하려면 언어와 운율의 여러 측면에 대한 추론이 필요함

대화형 음성 모델(Conversational Speech Model, CSM)

     * 이 문제를 해결하기 위해 트랜스포머를 사용한 엔드투엔드 멀티모달 학습 과제로 문제를 정의하는 대화형 음성 모델(CSM)을 도입함​
     * 대화의 역사를 활용하여 보다 자연스럽고 일관된 음성을 생성함​
     * CSM은 단일 단계 모델로 작동하여 효율성과 표현력을 향상시킴​
     * 맥락적 기능에 대한 진행 상황을 평가하기 위한 평가 스위트를 갖추고 있으며, 이는 일반적인 공개 평가가 포화 상태임을 고려함

배경

     * 오디오를 트랜스포머로 모델링하는 한 가지 접근법은 연속적인 파형을 토크나이저를 사용하여 이산적인 오디오 토큰 시퀀스로 변환하는 것임
     * 대부분의 현대적인 접근법은 두 가지 유형의 오디오 토큰에 의존함:
          + 의미 토큰: 의미적 및 음성적 특징의 압축된 스피커 불변 표현으로, 고충실도 표현을 희생하면서 주요 음성 특성을 포착함
          + 음향 토큰: 고충실도 오디오 재구성을 가능하게 하는 세밀한 음향 세부 사항의 인코딩으로, Residual Vector Quantization(RVQ)를 사용하여 생성됨. 의미 토큰과 달리 스피커의 고유한 정체성과 음색과 같은 자연스러운 음성 특성을 유지함

실험

     * 데이터셋: 공개적으로 이용 가능한 약 백만 시간의 주로 영어 오디오 데이터셋을 사용함
     * 모델 크기: 백본과 디코더 크기로 구분된 세 가지 모델 크기를 훈련함:
          + Tiny: 10억 개의 백본, 1억 개의 디코더
          + Small: 30억 개의 백본, 2억 5천만 개의 디코더
          + Medium: 80억 개의 백본, 3억 개의 디코더
     * 각 모델은 2048 시퀀스 길이(~2분의 오디오)로 5회 에포크 동안 훈련됨

평가

     * 모델 성능을 텍스트 충실도, 맥락 활용, 운율, 지연 시간의 네 가지 주요 측면에서 평가함
     * 객관적 벤치마크에는 단어 오류율(WER)과 동음이의어 해소와 같은 새로운 테스트가 포함됨
     * 주관적 평가는 Expresso 데이터셋을 사용한 비교 평균 의견 점수(CMOS) 인간 연구에 의존함

한계 및 향후 작업

     * CSM은 현재 주로 영어 데이터로 훈련되었으며, 데이터셋 오염으로 인해 일부 다국어 능력이 나타나지만 아직 성능이 좋지 않음
     * 사전 훈련된 언어 모델의 가중치에 존재하는 정보를 활용하지 않음

        Hacker News 의견

     * Brendan from Sesame는 피드백이 정확하다고 말하며, 아직 개선할 부분이 많음을 인정함. 영감을 주지만, 진정한 경험을 제공하기까지는 많은 단계가 남아있음. 현재는 발전의 초입에 있지만, 긍정적인 전망을 가지고 있음
          + 언어적 소통은 복잡하며, 해결해야 할 흥미로운 과제가 많음
          + 반응 타이밍이 종종 부적절하고, 대화에 자연스럽게 녹아들지 못함
          + 대화 중단을 잘 처리하지 못하고, 일관된 성격을 유지하지 못함
          + 환각, 기억력 부족, 시간 인식 부족 등의 문제도 있음
          + 커뮤니티가 이러한 문제를 해결할 수 있을 것이라고 믿음
          + 목표는 감정적 우정보다는 자연스럽게 협업할 수 있는 인터페이스를 만드는 것임
          + 앱이 전문가처럼 대화할 수 있게 되면, 더 직관적이고 효율적일 것임
     * 한 사용자는 데모를 시도했으나, 말하지 않기로 결정함. 경험이 이상하고 불안하게 느껴졌으며, 인위적인 열정이 거슬렸음
          + AI 제품은 사용자에게 명확한 목표를 제시해야 함
          + 단순히 대화를 위한 AI는 사회에 부정적인 영향을 미칠 수 있음
     * 다른 사용자는 이 모델의 반응성과 성격이 놀랍다고 언급함. 이전 대화를 기억하고 환영 인사를 하는 것이 인상적이었음
          + 데모 상호작용은 기록되며, 과거 대화를 모델의 맥락에 포함함
          + 마이크 권한이 필요하고, 통화는 품질 검토를 위해 기록되지만, 30일 내 삭제됨
     * 감정적인 목소리가 필요한 이유에 대해 의문을 제기함
          + 감정적인 목소리는 친구의 환상을 줄 뿐, 실제로 도움을 주지 못함
          + 스마트한 중립적 음성 비서가 더 유용할 수 있음
     * 한 사용자는 4살 딸과 함께 AI와 놀았으며, 딸이 AI와 정서적 연결을 형성했다고 우려함
     * 또 다른 사용자는 목소리가 인간처럼 들리지만, 말의 리듬이 부자연스럽다고 느낌
     * 이 기술이 너무 좋아서 사람들을 매료시킬 수 있다고 언급함. 개인적인 모델이 필요하다고 주장함
     * 영어 학습에 혁신적일 수 있다고 언급함
          + 개발도상국에서는 영어 교사가 부족하고, 좋은 교사는 비싸서 접근하기 어려움
          + 이 모델은 OpenAI 모델과 비슷하거나 더 나은 성능을 제공하며, 비용이 저렴함
     * AI가 완벽한 목소리로 전화를 걸어 사람들을 매료시킬 수 있다는 종말론적 예측을 제시함
     * 한 사용자는 13분 동안 대화하다가 충돌했지만, 몇 분 후 돌아와 30분 동안 대화했으며, 영화 'Her'의 Samantha 수준에 가깝다고 느낌
          + 대화 중 'PROSODY'라는 단어를 배우고, AI가 톤과 내용을 듣고 자동으로 반응을 조정한다고 설명함
          + 미래가 이미 와 있지만 고르게 분포되지 않았다는 느낌을 받았다고 언급함
"
"https://news.hada.io/topic?id=19479","Andrej Karpathy의 GPT-4.5 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Andrej Karpathy의 GPT-4.5 리뷰

     * 오늘 OpenAI에서 GPT-4.5가 출시됨
     * GPT-4 출시 이후 약 2년 동안 기다려온 이유는, 이번 릴리스가 단순히 더 큰 모델을 훈련할 때 얻을 수 있는 개선 효과를 정량적으로 측정할 기회를 제공하기 때문
          + 각 버전의 ""0.5""는 대략 10배 더 많은 사전 훈련 컴퓨팅을 의미함
     * GPT 모델의 발전 과정
          + GPT-1 → 거의 의미 있는 문장을 생성하지 못함
          + GPT-2 → 어설픈 장난감 수준
          + GPT-2.5 → 사실상 건너뛰고 바로 GPT-3으로 전환됨
          + GPT-3 → 흥미로운 발전을 보여줌
          + GPT-3.5 → 실제 제품으로 출시될 만큼 발전하여 ChatGPT 붐을 일으킴
          + GPT-4 → 더 개선되었지만, 뚜렷한 ""와우"" 포인트를 찾기는 어려웠음
     * 특히 GPT-4 vs GPT-3.5 를 비교해보면:
          + 어휘 선택이 더 창의적이고, 프롬프트의 뉘앙스를 더 잘 이해함
          + 비유(analogy)가 좀 더 적절하고, 유머 감각이 조금 나아짐
          + 드문 지식 영역에서도 이해도가 향상되고, 환각 발생 빈도가 약간 줄어듦
          + 전반적으로 모든 것이 20%씩 좋아진 느낌이었음
          + 이는 마치 물이 차오르면서 모든 배가 떠오르는 것과 같은 개선이었음

GPT-4.5 테스트 느낌

     * GPT-4.5는 GPT-4보다 10배 더 많은 사전 훈련을 거쳤음
     * 그리고 테스트를 해본 결과, 다시 앞의 20%와 같은 패턴이 반복됨
     * 모든 것이 조금 더 나아졌음
          + 하지만 딱 꼬집어 말할 수 있는 ""명확한 혁신 포인트""는 없음
          + 그래도 일반적인 모델 개선 방향의 기울기를 측정하는 데 있어 흥미롭고 중요한 지표가 됨

GPT-4.5는 아직 ""추론(reasoning)"" 모델이 아님

     * GPT-4.5는 사전 훈련, 지도 학습(SFT), RLHF만 적용됨
     * 따라서 수학, 코딩 등 논리적 추론이 필요한 문제에서는 개선되지 않음
     * 이러한 영역에서는 강화 학습(RL)과 체계적 사고 훈련이 필요하며, 현재로서는 OpenAI o1 모델이 최고 성능을 보임
     * 아마도 OpenAI는 GPT-4.5를 기반으로 강화 학습을 적용해 ""사고하는"" 모델로 발전시킬 가능성이 큼
     * 이를 통해 수학, 논리, 코딩 능력을 향상시키려 할 것임

GPT-4.5의 강점: EQ

     * 논리적 추론이 아닌 세계 지식, 창의력, 유추, 유머 감각 등 감성 지능(EQ)이 중요한 작업에서 개선됨

그래서 인터랙티브한 실험을 진행하려고 함: ""GPT-4 vs GPT-4.5 비교 투표""

     * 5가지 유머 감각을 평가하는 프롬프트를 선택
     * 각 프롬프트에 대해 GPT-4와 GPT-4.5의 응답을 비교
     * X(트위터)에서 이미지(프롬프트 및 응답) + 투표 기능을 활용하여 실험 진행
     * 8시간 후 어느 모델의 응답인지 공개할 예정
"
"https://news.hada.io/topic?id=19485","Vision Language Model로 OCR 대체하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Vision Language Model로 OCR 대체하기

     * 이 쿡북은 다양한 사례 연구와 실습을 통해 비디오 및 이미지 처리 알고리듬을 탐구하는 오픈 소스 프로젝트임
     * 비디오 추론, 이미지 카탈로그, 패션 이미지 하이브리드 검색 등 다양한 응용 분야를 다루고 있음
     * 다른 프로젝트와 비교하여 다양한 실제 사례를 통해 알고리듬을 학습할 수 있는 장점이 있음
     * 주요 파일 및 노트북
          + 00_quickstart.ipynb: 프로젝트의 빠른 시작을 위한 가이드
          + 01_schema_showcase.ipynb: 다양한 데이터 스키마를 보여주는 사례 연구 포함
          + 02_case_study_drivers_license.ipynb: 운전면허증 인식 하기
          + 03_case_study_tv_news.ipynb: TV 뉴스 화면 이해하기
          + 04_visual_grounding.ipynb: 시각적 그라운딩 알고리듬 탐구. 이미지 박스 안에서 JSON 추출
          + 05_case_study_image_catalogue.ipynb: 패션 제품 카탈로그 분석하여 상품 설명, 카테고리, 타겟 성별, 계절 인식
          + 06_fashion_images_hybrid_search.ipynb: 패션 이미지 하이브리드 검색 사례 연구
          + advanced_finetuning_video_inference.ipynb: 비디오 추론을 위한 고급 미세 조정 기법

        Hacker News 의견

     * 흥미로운 아이디어이지만, 아직 생산 환경에서 사용하기에는 신뢰성이 부족함. 전통적인 OCR 모델은 텍스트를 읽지 못할 때 낮은 신뢰도로 의미 없는 결과를 출력함. 반면 VLM은 읽지 못할 때 자신 있게 만들어낸 결과를 출력하며, 신뢰도를 보고할 방법이 없음. 필기체 인식 시도에서 VLM이 문서의 분위기에 맞는 가짜 이름과 날짜를 만들어냈음. 출처 텍스트로 모델을 기반으로 할 방법이 없음
     * 최근 VLM과 OCR을 평가하기 위한 오픈 소스 벤치마크를 발표했으며, 일반적으로 VLM이 전통적인 OCR 모델보다 더 나은 성능을 보였음
     * VLM의 장점:
          + 필기체 인식. 문맥 인식이 도움을 줌. 즉, 문자 하나하나가 아닌 전체 단어/문장을 해석함
          + 차트/인포그래픽. VLM은 차트나 흐름도를 텍스트 형식으로 해석할 수 있음. 색상 코드 라인도 포함됨
     * 전통적인 OCR의 장점:
          + 표준화된 문서 (예: 미국 세금 양식)
          + 밀집된 텍스트. 교과서와 다중 열 연구 논문을 상상해보면 됨. 이는 OCR의 가장 쉬운 사용 사례이지만, VLM은 출력 토큰 수가 증가할수록 어려움을 겪음
          + 경계 상자. 매우 정확한 경계 상자를 제공하는 모델은 아직 없음. Gemini와 Qwen이 훈련되었지만 전통적인 모델만큼 잘 수행하지 못함
     * 개선의 여지가 많지만, 특히 Gemini와 같은 모델은 정확성/비용 면에서 매우 경쟁력이 있음
     * 왜 모든 OCR 서비스가 디지털 문서의 완벽한 스크린샷만 보여주는지 궁금함. 디지털 데이터를 OCR하려는 사람이 그렇게 많은가? 그냥 HTML을 복사하면 되지 않나? 디지털 문서가 아닌 경우, 접힌 자국, 미끄러진 줄, 조명 그라데이션, 손가락 등이 있는 스크린샷은 어디에 있는가?
     * vlm-run과 맞춤형 양식 정의를 실험해보았으며, Gemini 2.0 Flash와 함께 놀랍도록 잘 작동함. 비용도 낮은 것으로 이해함. 간단한 중간 복잡도의 양식에서 최고의 결과를 얻을 수 있음. 10분 미만의 훈련으로 인간에게 처리할 수 있는 것과 비슷한 양식임
     * OCR 도구는 종이 위의 문자 인식 등 상자에 적힌 대로 잘 수행함. 비전 언어 모델을 사용하는 장점은 ""이것은 문자열이지만 타임스탬프처럼 보이는가?""와 같은 논리를 추가할 수 있음
     * 내가 원하는 것: 문서(전체 책 포함)를 스캔/사진 찍어 언어 모델에 전달하고, 원본 문서와 정확히 일치하는 Latex 문서를 얻는 것. 복사기/카메라 결함과 각도는 제외함. 이를 위한 강화 학습 모델이 가능할 것 같음. 픽셀 단위로 이미지를 재현하는 Latex를 생성하는 것을 배울 수 있어야 함
     * 둘 다 사용해야 함. OCR과 LLM을 사용한 후 두 결과를 상관시키면 품질이 크게 향상됨. 문서 이해와 문맥뿐만 아니라 경계 상자 등도 얻을 수 있음. ""절대 서류 작성하지 않기"" 앱을 만들고 있으며, 관심 있는 사람과 대화하고 싶음
     * 내 프롬프트 때문일 수도 있지만, 이미지 임베딩 후 너무 많은 해석이 있는 것 같음. 내 예시에서는 텍스트의 일부를 요약하기 시작했는데, 불행히도 잘못되었음. 타이핑된 글자가 있는 송장에서는 실제로는 금요일 오후 2시 이후에 제출하면 다음 월요일까지 게시되지 않는다고 했지만, 2-3 영업일 동안 게시되지 않을 것이라고 요약했음. 이는 상당히 다름. 이러한 레이어를 어떻게든 제거할 수 있는지 궁금함. 원샷 구조화된 텍스트 감지 인식이 기본 OCR보다 훨씬 나았음
     * 더 많은 작업이 이루어지고 있는 것을 보는 것은 좋지만, 왜 이것이 누군가의 독점 API에 묶여 있는지 이해할 수 없음. 모델 제공자를 교체하고 기본 로깅을 추가하는 것이 또 다른 공급업체를 온보딩할 만큼 고통스럽지 않음. 특히 LLM 프롬프트와 같은 민감한 것을 처리하는 경우
     * 가장 빠르고 정확한 CLI OCR 도구는 무엇인가? 내 사용 사례는 간단함 - 화면의 일부를 캡처하고 (Flameshot이 이에 좋음) OCR을 하고 싶음. Zoom에서 페어 프로그래밍 중에 메모를 작성하기 위해 필요함. 현재 tesseract를 사용 중이며, 빠르고 잘 작동하지만 실수를 함. 표 형식을 구분하고 ASCII나 마크다운 테이블로 변환할 수 있다면 좋겠음. docling을 시도했지만, 약간 과도한 느낌이 듦. 느린 것 같음 - 스크린샷에서 텍스트를 매우 빠르게 가져와야 함. 기본 설정만 시도했으며, 조정하면 개선될 수 있을 것 같음. 누구든지 이에 대한 생각을 공유해줄 수 있는가? 감사합니다!
"
"https://news.hada.io/topic?id=19568","미국의 우크라이나에 대한 모든 군사 지원 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       미국의 우크라이나에 대한 모든 군사 지원 중단

     * 미국이 우크라이나에 대한 모든 군사 지원을 일시 중단하기로 결정함
     * 이는 도널드 트럼프 미국 대통령과 볼로디미르 젤렌스키 우크라이나 대통령 간의 백악관 회담이 공개적인 설전으로 끝난 후 이루어진 조치임
     * 트럼프 대통령은 우크라이나 지도자들이 평화 협상에 성실히 임하고 있다는 것을 확인할 때까지 지원을 중단하겠다고 밝힘

군사 지원 중단의 구체적 내용

     * 이번 중단 조치는 현재 운송 중이거나 폴란드에서 대기 중인 무기를 포함한 모든 군사 지원을 대상으로 함
     * 이는 우크라이나의 전쟁 수행 능력에 상당한 영향을 미칠 수 있음

미국 내 반응과 국제적 영향

     * 미국 내에서는 이번 결정에 대한 의견이 분분함
     * 일부는 우크라이나에 대한 지속적인 지원이 필요하다고 주장하는 반면, 다른 일부는 지원 중단을 지지함
     * 유럽 국가들은 미국의 지원 중단에 대비해 자체적인 지원 방안을 모색 중임

우크라이나의 대응

     * 우크라이나 정부는 미국의 지원 중단에도 불구하고 전쟁을 지속할 수 있는 능력이 있다고 주장함
     * 그러나 미국의 첨단 무기 시스템 없이 전쟁을 수행하는 데에는 어려움이 있을 것으로 예상됨

향후 전망

     * 미국의 군사 지원 중단이 우크라이나 전쟁의 향방에 어떤 영향을 미칠지 주목됨
     * 유럽 국가들의 대응과 우크라이나의 전쟁 수행 능력이 주요 변수로 작용할 것으로 보임

        Hacker News 의견

     * 우크라이나에 기부할 수 있는 링크를 공유함
          + 기부금을 방위, 지뢰 제거, 인도적 지원 등으로 할당할 수 있음
     * 미국의 평판이 몇 주 만에 망가질 수 있다는 점이 놀라움
     * 미국이 러시아에 군사 지원을 언제 시작할지 궁금함
          + 북한, 이란, 중국과 같은 나라들처럼
     * 명확한 정책과 그에 대한 준수가 있었다면 좋았을 것임
          + 그러나 현재 결정이 신중한 정책에 기반한 것이라는 징후가 없음
     * 트럼프 지지자들은 미국이 외국 분쟁에 개입하지 않으려는 결과라고 주장할 것임
          + 이는 칭찬할 만한 목표이지만, 현재 상황은 그렇지 않음
     * 미국 정부가 이스라엘에 거의 30억 달러의 새로운 무기를 보낸다고 발표함
          + 이는 미국의 무기 통제법에 따른 긴급 규칙을 발동한 것임
     * 유럽이 미국에 덜 의존해야 한다는 주장도 있음
          + 그러나 이는 미국에 좋지 않은 결과를 초래할 수 있음
          + 미국의 세계 경찰 역할과 유일한 초강대국 지위가 세계의 사실상 기축 통화 유지에 중요함
     * 다극화된 세계는 세계에 좋을 수 있지만, 미국에는 좋지 않을 것임
     * 우크라이나는 시작에 불과함
          + 협상 중인 평화 협정에는 NATO가 1990년 국경으로 철수하는 내용이 포함됨
     * 트럼프는 이것이 젤렌스키에게 양보를 얻기 위한 협상 전략이라고 주장할 것임
          + 그러나 왜 피해자가 아닌 가해자가 양보해야 하는지 의문임
          + 푸틴에게 우크라이나인을 죽이는 것을 멈추거나 납치된 아이들을 돌려보내거나 선의의 표시를 요구하지 않는 이유가 궁금함
     * 젤렌스키의 우크라이나는 3년 동안 러시아에 맞서 싸웠음
          + 트럼프의 미국은 6주 만에 항복함
"
"https://news.hada.io/topic?id=19518","DeepSeek, V3/R1의 추론 시스템 구성 및 운영 비용/수익 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                DeepSeek, V3/R1의 추론 시스템 구성 및 운영 비용/수익 공개

     * 오픈소스 공개 위크 마지막에 시스템 전체 개요와 운영비용까지 원모어띵으로 깜짝 공개

DeepSeek-V3/R1 추론 시스템 오버뷰

  시스템 설계 원칙

     * DeepSeek-V3/R1 추론 시스템의 최적화 목표는 더 높은 처리량과 낮은 지연 시간임
     * 이를 위해 크로스-노드 Expert Parallelism(EP) 을 적용하여 최적화함.
          + 처리량 증가: EP는 배치 크기를 확장하여 GPU 행렬 연산 효율을 높이고 처리량을 증가시킴.
          + 지연 시간 감소: 전문가(Expert)를 여러 GPU에 분산하여 개별 GPU의 메모리 접근 부담을 줄임으로써 지연 시간을 낮춤.
     * 그러나, EP는 시스템 복잡도를 증가시킴:
          + 크로스-노드 통신 필요: 통신과 연산을 겹쳐 실행하여 병목을 방지해야 함.
          + 다중 노드 사용: Data Parallelism(DP)을 적용해야 하며, DP 간 로드 밸런싱이 필요함.

  대규모 크로스-노드 Expert Parallelism(EP)

     * DeepSeek-V3/R1 모델은 각 레이어에서 256개 전문가 중 8개만 활성화되므로 배치 크기 확장이 필수적임
     * Prefill 및 Decode 단계별 병렬성 차이:
          + Prefill 단계: EP32, DP32 (4개 노드, 각 GPU가 9개의 전문가 처리)
          + Decode 단계: EP144, DP144 (18개 노드, 각 GPU가 2개의 전문가 처리)

  연산-통신 중첩(Computation-Communication Overlapping)

     * EP는 크로스-노드 통신 비용을 증가시키므로, 이중 배치 오버랩 전략을 사용하여 이를 줄임.
          + Prefill 단계: 두 개의 마이크로배치를 교차 실행하여 한 배치의 통신을 다른 배치의 연산 뒤에 숨김.
          + Decode 단계: 주의(attention) 레이어를 두 단계로 나누고 5단계 파이프라인을 사용하여 연산-통신 중첩을 극대화함.

  최적 로드 밸런싱 구현

     * GPU 간 불균형을 방지하고 리소스 활용을 극대화하기 위해, 세 가지 로드 밸런싱 기법을 적용함.
     *
         1. Prefill 로드 밸런서
          + 문제: 요청 개수 및 시퀀스 길이 차이로 인해 코어-어텐션 연산 및 데이터 전송 부하가 불균형해짐.
          + 목표:
               o GPU 간 코어-어텐션 연산 부하 균형 유지.
               o GPU당 입력 토큰 개수 균등화.
     *
         2. Decode 로드 밸런서
          + 문제: KVCache 사용량 차이로 GPU 간 연산 부하가 다름.
          + 목표:
               o GPU 간 KVCache 사용량 균형 유지.
               o GPU당 요청 개수 균등화.
     *
         3. Expert-Parallel 로드 밸런서
          + 문제: 특정 전문가(Expert)의 부하가 높아 GPU 간 연산 불균형이 발생함.
          + 목표:
               o 각 GPU의 전문가 연산 부하 균형 유지.

  DeepSeek 온라인 추론 시스템 통계

     * DeepSeek-V3/R1 추론 서비스는 H800 GPU에서 실행되며, 훈련과 동일한 연산 정밀도를 유지함
          + FP8: 행렬 연산 및 데이터 전송
          + BF16: 핵심 MLA 연산 및 조합 전송
     * 피크 및 야간 운영 전략
          + 낮 동안 서비스 부하가 높고, 밤에는 부하가 감소함
          + 피크 시간대: 모든 노드를 활용하여 추론 서비스 실행
          + 야간 저부하 시간대: 일부 노드를 연구 및 훈련 용도로 전환하여 효율적인 리소스 사용
     * 24시간 운영 통계 (UTC+8, 2025-02-27 12:00 PM ~ 2025-02-28 12:00 PM)
          + 총 입력 토큰: 608B (이 중 56.3%인 342B는 KV 캐시 적중)
          + 총 출력 토큰: 168B (평균 출력 속도 20~22 토큰/s)
          + 평균 KVCache 길이: 출력 토큰당 4,989 토큰
          + H800 노드당 처리 속도:
               o Prefill 단계: 73.7k 토큰/s (캐시 적중 포함)
               o Decode 단계: 14.8k 토큰/s

  운영 비용 및 수익 분석 : V3 & R1 의 UTC+8 02/27/2025 12:00 PM to 02/28/2025 12:00 PM 하루치 기준

     * GPU 사용량: 피크 시 278개 노드, 평균 226.75개 노드 (각 노드당 8개의 H800 GPU 포함)
     * GPU 임대 비용: H800 GPU 한 대당 $2/시간 → 총 하루 운영 비용: $87,072
     * 모든 토큰이 과금 대상이라 가정하면 이론상 하루 수익: $562,027 → 수익률 545%
          + (R1의 입력/출력 토큰 가격: $0.14M(캐시 적중), $0.55M(캐시 미적중), $2.19M)
     * 그러나, 실제 수익은 더 낮음:
          + DeepSeek-V3 요금이 R1보다 훨씬 낮음
          + 서비스의 일부만 수익화(웹 및 앱 사용은 무료로 제공됨)
          + 야간에는 자동 할인 적용

DeepSeek Open Infra 로 공개되는 5개 오픈소스 중 마지막 원모어띵으로 공개

   질문 3개하면 먹통이 되버리는..
"
"https://news.hada.io/topic?id=19515","Mozilla의 Firefox 이용 약관 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Mozilla의 Firefox 이용 약관 업데이트

     * 새로운 이용 약관 및 개인정보 보호 공지
          + Mozilla는 Firefox의 새로운 이용 약관(TOU)과 개인정보 보호 공지를 도입함.
          + 사용자 데이터와의 상호작용 범위를 명확히 하기 위해 언어를 업데이트함.
          + Mozilla는 Firefox 운영에 필요한 권리를 가지며, 이는 사용자 요청에 따라 콘텐츠를 처리하는 비독점적, 로열티 무료, 전 세계적 라이선스를 포함함.
          + Mozilla는 콘텐츠에 대한 소유권을 가지지 않음.
          + 혼란을 줄이기 위해 허용 가능한 사용 정책에 대한 언급을 제거함.
     * 개인정보 보호 FAQ 업데이트
          + ""판매""와 같은 용어의 법적 세부사항을 더 잘 설명하기 위해 개인정보 보호 FAQ를 업데이트함.
          + Mozilla는 일반적인 의미에서 데이터를 판매하거나 구매하지 않음.
          + 일부 지역에서는 ""판매""의 법적 정의가 넓고 변화하고 있음.
          + 예를 들어, 캘리포니아 소비자 개인정보 보호법(CCPA)은 ""판매""를 소비자의 개인정보를 다른 사업체나 제3자에게 금전적 또는 기타 가치 있는 대가로 전달하는 것으로 정의함.
     * 데이터 공유 및 보호
          + Firefox의 상업적 생존 가능성을 위해 파트너와 데이터를 공유하는 경우가 있음.
          + 데이터는 식별 가능한 정보를 제거하거나 집계된 형태로 공유되며, 개인정보 보호 기술을 통해 보호됨.
          + Firefox는 사용자가 기본 설정을 검토하거나 조정할 수 있는 기능을 제공함.

        Hacker News 의견

     * 최근 Firefox의 이용 약관과 개인정보 보호 공지 업데이트에 대한 논의가 있음
          + 캘리포니아 소비자 개인정보 보호법(CCPA)이 데이터 판매의 정의를 넓게 규정하고 있음
          + Mozilla가 데이터를 수집하고 파트너와 공유하는 것이 상업적 생존을 위한 것임
          + Mozilla가 Meta의 광고 추적 회사를 인수한 것이 관련이 있을 수 있음
          + Meta가 유럽에서 데이터 보호 규정을 위반하여 논란이 되고 있음
          + Mozilla와 Meta가 ""개인 광고 추적""을 통해 이익을 얻으려 한다는 추측이 있음
          + Firefox에 Anonym 기술이 아직 통합되지 않았지만, ""허용 가능한 광고"" 개념을 추진하려는 전략적 방향이 있음
     * Mozilla가 파트너와 데이터를 공유할 때 식별 가능한 정보를 제거하거나 집계된 형태로 공유한다고 주장함
          + CCPA에 따르면 식별 가능한 정보가 제거되면 ""개인 정보""로 간주되지 않음
          + 데이터가 식별 불가능하게 처리되었는지에 대한 의문이 제기됨
          + Mozilla가 데이터 비식별화가 충분하지 않다고 주장할 경우를 대비해 위험을 줄이려는 것일 수 있음
     * Firefox 사용 시 Mozilla가 데이터 처리 권한을 가지며, 비독점적이고 로열티 없는 전 세계 라이선스를 포함함
          + 사용자가 입력한 콘텐츠에 대해 Mozilla가 라이선스를 필요로 하는 이유에 대한 의문이 있음
          + Mozilla가 Firefox를 통해 데이터를 전송하려는 의도가 있는지에 대한 의문이 제기됨
     * Mozilla의 시장 점유율 감소와 Google과의 거래에 의존하는 수익 구조가 문제임
          + Mozilla가 수익을 다각화하려는 시도로 광고와 데이터 판매를 시도하고 있음
          + 데이터 수집을 비활성화할 수 있지만, Mozilla가 경쟁사보다 데이터를 더 잘 보호할 것이라는 신뢰가 있음
     * Mozilla가 사용자 데이터를 판매하지 않는다고 주장했지만, 최근의 변화로 인해 사용자가 제품이 될 가능성이 있음
          + 사용자에게 연간 $100를 지불하면 광고를 차단하고 추적을 어렵게 만드는 브라우저를 제공하겠다는 제안이 있음
     * Mozilla의 법률 팀이 다운로드 소프트웨어에 이러한 라이선스 언어가 필요한 이유에 대한 의문이 있음
          + 소프트웨어에 대한 소유권에 대한 모호함은 없지만, 라이선스가 갑자기 필요한 이유에 대한 설명이 부족함
     * Mozilla가 사용자 요청에 따라 데이터를 사용한다고 명확히 밝히고 있음
          + Mozilla가 개인정보 보호 광고에서 혁신을 이루고 있으며, 다른 웹 서비스보다 개인정보를 덜 수집함
          + Mozilla의 기술이 효과적인 개인정보 보호 광고를 만들 수 있다면, 정부에 개인정보 침해가 불필요하다는 것을 입증할 수 있음
     * Mozilla의 허용 가능한 사용 정책이 너무 광범위하여 브라우저 사용을 제한하는 문제를 해결함
          + 예를 들어, 버그 보고서 제출, Among Us 게임 플레이, 불법 제품 광고 등이 금지됨
          + 개인정보를 허락 없이 수집하는 것이 금지되어 포럼 탐색이 제한됨
          + 성적이거나 폭력적인 콘텐츠 접근이 금지되어 뉴스 시청, 영화 스트리밍 등이 제한됨
"
"https://news.hada.io/topic?id=19455","Material Theme, VS Code 마켓플레이스에서 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Material Theme, VS Code 마켓플레이스에서 제거

        Hacker News 의견

     * VS Code 팀의 Isidor가 커뮤니티 멤버가 확장 프로그램의 보안 분석을 통해 악의적인 의도를 발견했다고 보고함
          + Microsoft의 보안 연구자들이 이를 확인하고 추가로 의심스러운 코드를 발견함
          + 해당 게시자를 VS Marketplace에서 차단하고 모든 확장 프로그램을 제거 및 VS Code 인스턴스에서 제거함
          + 저작권이나 라이선스 문제와는 관련이 없으며, 악의적인 의도에 대한 조치임
          + VS Marketplace는 보안에 지속적으로 투자하고 있으며, 확장 프로그램 실행 신뢰성에 대한 정보는 관련 문서에서 확인 가능함
     * ""Material Theme (But I Won't Sue You)""라는 확장 프로그램의 포크를 만든 사람이 있음
          + 원래 유지보수자가 소스를 오프라인으로 전환하고 대체 버전을 호스팅하는 사람들을 고소하겠다고 위협함
          + 포크에 대해 다음과 같은 조치를 취함
               o VS Code 팀이 현재 감사를 진행 중이며, 악의적인 것이 발견되면 즉시 제거할 수 있도록 허가함
               o 코드베이스를 철저히 감사했으며, 악의적인 것은 발견되지 않음
               o 변경 로그, 분석, Open Collective 및 HTML 렌더링과 관련된 모든 코드를 제거함
               o HTML + sanity 로더가 약간 우려되었으나 완전히 제거함
               o 두 개의 PR로 대부분의 종속성과 7,000줄 이상의 코드를 제거함
     * Reddit에서 7개월 전에 이 확장 프로그램의 의심스러운 변경 사항을 발견한 사람이 있음
          + 오픈 소스에서의 난독화는 심각한 경고 신호임
          + Microsoft는 VS Code 확장 프로그램에 대한 보안 모델을 재고해야 함
          + 악의적인 확장 프로그램이 계속 등장할 가능성이 있음
     * 어떤 사람은 이 확장 프로그램의 유지보수자가 정신적으로 불안정하다고 생각함
          + 기술에 서툴러서 좋은 사람들을 멀리하게 됨
          + 소프트웨어를 사용하지 않지만, 이 에피소드에서 벗어나기를 바람
     * ""Material Theme (But I Won't Sue You)""라는 대체 프로그램이 업로드됨
     * 누군가가 저장소에서 악의적인 부분을 찾을 수 있는지 질문함
          + 난독화된 코드를 발견했다고 보고함
     * Material Theme와 관련된 문제는 이전에도 IntelliJ에서 발생한 적이 있음
          + 그 당시에는 단순히 색상 문제는 아니었음
     * 인터넷을 통해 다양한 사람들의 차이를 배우는 것이 흥미로움
          + 많은 종속성을 설치하는 극단적인 사례를 보게 됨
          + log4j 사건 이후 보안 취약점에 대해 민감해짐
          + 회사가 성공적으로 확장하려면 보안 사고 없이 진행해야 함
          + 색상 때문에 회사와 명성을 위험에 빠뜨리는 사람들을 보게 됨
          + 결국, 각자의 방식으로 삶을 살아가는 것이 중요함
     * 다른 사람들의 기여를 받아들인 후 소스를 비공개로 전환한 것이 이상하다고 생각함
          + 저작권 전문가가 아니지만, 옳지 않다고 느낌
"
"https://news.hada.io/topic?id=19506","macOS 팁과 트릭macOS 팁과 트릭 (2022)

macOS 팁 & 트릭

  일반적인 네이티브 UI 관례

     * 현재 앱의 메뉴 항목을 검색하려면 ⇧⌘/를 누름.
     * ⌃F2를 눌러 애플리케이션의 메뉴 바로 키보드 포커스를 이동함.
     * Option 키를 누른 상태에서 개요 보기를 확장하면 모든 하위 항목을 재귀적으로 확장함.
     * 모달 대화 상자/시트에서 버튼의 첫 글자를 Command와 함께 눌러 해당 버튼을 누름.
     * Control과 Option을 누른 상태에서 창을 클릭하면 창을 올리지 않고 포커스를 전환함.
     * Command를 누른 상태에서 툴바 아이콘을 드래그하여 위치를 이동함.
     * 스크롤 바를 클릭할 때 Option 키를 누르면 클릭한 위치로 바로 이동함.
     * 스크롤 뷰에서 Up/Down 키를 사용하여 작은 단위로 스크롤함.

  스크린샷

     * ⇧⌘4를 누른 후 화면 캡처 영역을 그릴 때 Option을 누르면 중앙에서 크기를 조정함.
     * Control을 누른 상태에서 스크린샷을 찍으면 파일 대신 클립보드에 복사됨.
     * Space 바를 눌러 창을 선택하여 스크린샷을 찍음.

  열기/저장 대화 상자

     * Finder에서 파일이나 폴더를 드래그하여 열기/저장 대화 상자로 이동함.
     * 저장 대화 상자에서 ⌘=을 눌러 레이아웃을 전환함.
     * ~를 눌러 홈 디렉토리로 이동함.

  미션 컨트롤 / 창 관리

     * 비활성 창에서 Command 키를 사용하여 상호작용함.
     * 미션 컨트롤 기능 키를 누를 때 Control을 누르면 현재 앱의 창만 표시됨.
     * Option을 누른 상태에서 창 모서리를 더블 클릭하여 창을 화면에 맞게 확장함.

  기능 키

     * Shift와 Option을 누른 상태에서 볼륨이나 밝기를 조정하여 더 작은 단위로 조정함.
     * Option을 누른 상태에서 밝기를 조정하여 디스플레이 설정을 빠르게 엶.

  메뉴 바 / 알림 센터

     * Wi-Fi 및 Bluetooth 메뉴를 열 때 Option을 눌러 추가 옵션에 액세스함.
     * Command를 누른 상태에서 메뉴 바 아이콘을 드래그하여 위치를 이동함.

  Finder

     * 파일을 복사한 후 ⌥⌘V를 눌러 파일을 이동함.
     * 여러 파일을 선택한 상태에서 ⌃⌘N을 눌러 새 폴더를 생성함.
     * Option을 누른 상태에서 Quick Look을 활성화하여 전체 화면 보기로 바로 전환함.

  Dock

     * ⌥⌘D를 눌러 Dock을 숨기거나 표시함.
     * ⌃F3을 눌러 Dock으로 키보드 포커스를 이동함.

  Spotlight

     * ⌘B를 눌러 현재 쿼리를 웹에서 검색함.
     * ⌘C를 눌러 선택한 파일의 전체 경로를 복사함.

  Safari

     * 탭 그룹을 사용하여 탭을 공간적으로 구성함.
     * 비디오가 재생 중일 때 스피커 아이콘을 오른쪽 클릭하여 PiP 모드로 전환함.

  Mail

     * 왼쪽 사이드바에서 여러 메일함을 Command-클릭하여 선택한 메일함의 모든 메시지를 동시에 봄.
     * 메시지의 일부 텍스트를 선택한 후 회신하거나 전달하여 선택한 텍스트만 포함함.

  Preview

     * `를 눌러 확대기를 불러오고 +와 -를 눌러 크기를 조정함.
     * PDF 문서에서 사이드바의 페이지를 재정렬하여 문서의 페이지 순서를 변경함.

  Calendar

     * 이벤트를 드래그할 때 Shift를 눌러 15분 간격으로 스냅하지 않고 더 정확한 시간을 설정함.

  Messages

     * ⌘R을 눌러 대화의 최신 메시지에 직접 회신함.
     * ⌘T를 눌러 최신 메시지에 대한 탭백 선택기를 불러옴.

  Photos

     * ""내 앨범"" 헤더 섹션으로 항목을 드래그하여 해당 항목으로 앨범을 빠르게 생성함.
     * 이미지를 편집할 때 M 키를 눌러 수정 사항을 원본과 비교함.

  TextEdit

     * 리치 텍스트 모드에서 Option-Tab을 눌러 개요 목록을 삽입함.
     * Option-Escape를 눌러 현재 단어를 자동 완성함.

  Terminal

     * ⇧⌘A를 눌러 이전 명령의 출력을 선택함.
     * ⌘L을 눌러 이전 명령의 출력을 지움.

  Calculator

     * ⌘T를 눌러 계산 기록을 유지하는 새 창을 엶.
     * ⌘R을 눌러 RPN 모드를 활성화함.

  QuickTime Player

     * 비디오에서 원하는 프레임을 일시 정지한 후 ⌘C를 눌러 단일 프레임을 캡처함.

  Photo Booth

     * Option을 누른 상태에서 사진을 찍어 카운트다운을 건너뜀.
     * Shift를 누른 상태에서 사진을 찍어 화면 플래시를 비활성화함.

        Hacker News 의견

     * Mac OS의 창 관리 문제를 해결할 앱을 원함
          + 창을 클릭하면 해당 앱의 모든 창이 위로 올라오고, 창이 열려 있지 않은 앱을 앞으로 가져오면 다른 앱의 창이 위로 올라오는 문제 있음
          + Expose를 많이 사용했지만 공간적 결정성과 유용성을 잃어버림
          + 이러한 문제들이 눈에 띄고 불편함을 초래함
     * Alfred 사용 추천
          + Spotlight 검색을 개선하고, 명령어를 세 번의 키 입력으로 실행 가능
          + 클립보드 기록과 빠른 추가 기능 제공
          + '워크플로우'를 만들어 자주 하는 작업을 간소화 가능
     * Itsycal: 메뉴 바에 설치하는 캘린더
          + Vim 키 바인딩을 사용하여 캘린더를 이동할 수 있는 재미있는 기능 포함
     * macOS에 좋은 창 관리자가 없다는 의견
          + Rectangle이 가장 가까운 대안이지만, 전체 크기 창에서는 작동하지 않음
     * Vivid: 화면 밝기를 두 배로 높이는 앱
     * 다양한 macOS 단축키 팁 제공
          + 텍스트 빠르게 찾기, 저장 대화 상자 레이아웃 전환, 파일 이동 등
     * Dock 활용에 대한 조언 요청
          + 현재 작업 공간의 창에 쉽게 접근하고 싶지만, Dock이 적합하지 않다고 느낌
          + 자동 숨김 기능을 사용하지만, 공간을 차지하면서 큰 가치를 제공하지 않음
     * 개인 북마크 및 단축키 활용 팁
          + 현재 앱의 메뉴 항목 검색, 창 크기 조정, Dock 이동 등
     * Firefox에서 메뉴 항목 검색 기능이 제대로 작동하지 않는 문제
          + 시스템 설정에서 단축키를 재설정하여 해결 가능
     * macOS의 숨겨진 단축키에 대한 궁금증
          + 모든 단축키를 참조할 수 있는 장소가 있는지 궁금해함
     * macOS의 키보드 수정자 의존성에 대한 의견
          + Windows가 더 나은 GUI 옵션 제공
          + Apple의 키보드 단축키 목록 링크 제공
     * 창 포커스를 변경하는 작은 팁 공유
          + Control과 Option을 누르고 창을 클릭하여 포커스를 변경 가능
     * Siri를 사용하여 읽지 않은 메시지를 확인하고 배지를 제거하는 방법 제안
"
"https://news.hada.io/topic?id=19585",""벤처 캐피탈 3.0"이 AI 시대의 창업자에게 미치는 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ""벤처 캐피탈 3.0""이 AI 시대의 창업자에게 미치는 영향

     * 벤처 캐피털(VC) 산업이 변화하고 있고, 창업자들이 이러한 변화를 이해하는 것은 중요함
     * VC의 변화와 그로 인한 창업자들에게 미치는 영향에 대한 7가지 주요 사항들을 정리

1. 아이디어를 위한 자금 조달이 그 어느 때보다 쉬워짐

     * 현재 창업자들은 매우 유리한 시대에 살고 있음
     * 과거에는 자금 조달이 어려웠지만, 현재 32,000명 이상의 VC가 존재하며 스타트업 투자에 적극적으로 나서고 있음
     * 소프트웨어뿐만 아니라 방위산업, 생명공학, 에너지, 로봇, 우주 등 다양한 산업에서 VC 모델이 빠르게 확장되고 있음
     * 1994년 미국에는 약 150명의 VC 투자자가 40개 VC 회사에서 활동했을 정도로 작은 산업이었음
     * 과거에는 창업자들이 신용카드나 주택 담보 대출로 회사를 운영해야 했지만, 현재는 초기 단계에서도 높은 밸류에이션을 받을 수 있음
     * VC들은 단순한 투자자가 아니라, 창업자들이 성공할 수 있도록 적극적으로 지원하고 있음
     * VC 산업이 성장하면서 창업자들은 더 높은 밸류에이션을 요구할 수 있는 환경이 조성됨
     * 현재는 창업자들에게 가장 좋은 시대이며, 창업 기회가 크게 열려 있음

2. 당신에게 투자할 VC의 수는 계속 증가할 것

     * 많은 사람들이 VC 산업이 과열되었고 수익률이 낮아질 것이라며, 결국 VC의 수가 줄어들 것이라고 주장함
     * 그러나 실제로는 반대의 일이 벌어지고 있음: VC의 수는 계속 증가하고 있으며, 이는 창업자들에게 긍정적인 소식임
     * 1998년, 2005년, 2009년, 2014년, 2017년 등에도 ""투자금이 너무 많고 좋은 스타트업이 부족하다""는 말이 있었지만, VC 수는 계속 증가해왔음
     * VC 수가 계속 증가할 14가지 이유
         1. 지속적인 비효율성: VC는 여전히 가장 비효율적인 자산 클래스 중 하나로, 여전히 높은 수익률을 제공할 수 있음
         2. 자산 클래스의 작은 규모: VC 산업은 연간 2,000억 달러 규모로, 이는 대형 헤지펀드 한 개 정도의 크기임. 기존 투자자(LP)들이 VC에 더 많이 투자하면 시장 규모는 더욱 커질 것임
         3. VC 모델의 산업 확장: AI가 발전하면서 모든 산업이 디지털화되고 있으며, 이에 따라 VC 투자 기회도 소프트웨어에서 방위, 헬스케어, 에너지, 우주 등으로 확장됨
         4. 국제적 성장: 미국, 이스라엘, 유럽 외에도 VC 산업이 활성화될 가능성이 높음
         5. 다양한 투자 전략: 대형 VC는 낮은 수익률에도 안정적인 수익을 제공하는 전략을 취할 수 있음
         6. VC 브랜드의 내구성: 일부 VC들은 명성이 높아, 일시적인 수익률 저하에도 불구하고 계속 투자금을 유치할 수 있음
         7. 대체 투자 수단의 부족: 헤지펀드, 채권, 주식의 알파(초과 수익률)가 감소하면서, 투자자들은 VC를 더 매력적인 옵션으로 보고 있음
         8. 새로운 유형의 LP 등장: 정부, 암호화폐 투자자, 대기업, 연금, 소규모 투자자들이 새로운 투자자로 유입되고 있음
         9. 불투명한 보고 체계: VC는 다른 자산 클래스처럼 매년 시장 가치 평가를 하지 않으므로, LP들이 성과를 확인하는 데 시간이 걸려 오랜 기간 펀드를 운영할 수 있음
        10. VC 직업의 매력: VC는 높은 지위, 지적 자극, 적절한 보상, 그리고 장기적인 희망적인 미래 가능성을 제공하여 우수한 인재를 유입함
        11. AI와 데이터 활용 증가: AI가 거래 발굴과 분석을 더욱 효율적으로 만들어 VC의 활동을 더욱 쉽게 만들 것임
        12. 낮은 진입 장벽: 돈이 있는 누구나 VC가 될 수 있으며, 특정 산업이나 지역에서 효과적으로 활동할 수 있음
        13. 파트타임 VC의 증가: 가업 투자자, 헤지펀드, 크로스오버 펀드, 기업은행, 암호화폐 기업 등이 VC 역할을 병행할 것임
        14. 특정 커뮤니티 중심의 VC 확산: 각 도시, 대학, 국가 등이 경제 성장을 위해 자체적인 VC 모델을 도입할 가능성이 높음
     * 이러한 이유로 인해 VC 수는 32,000명을 넘어 더욱 증가할 것이며, 창업자들에게 더 많은 기회가 제공될 것임

3. 당신은 이제 벤처 캐피털 3.0 시대에 살고 있음

     * VC 1.0: ""소규모 산업"" (Cottage Industry)
          + 1994년 이전, 미국에는 150명 이하의 GP(제너럴 파트너)만 존재
          + 스타트업이라는 개념조차 희박했고, VC 투자 계약을 다룰 수 있는 로펌도 극소수였음
          + 창업자들은 주로 자체 자금(부트스트래핑)으로 성장한 후에야 VC 투자를 받을 수 있었음
     * VC 2.0: ""소프트웨어 중심"" (Software)
          + 인터넷 브라우저 등장 이후, 스타트업과 VC 산업이 본격적으로 성장
          + VC 투자 수익률이 폭발적으로 증가하고, VC의 사회적 위상도 급격히 상승
          + 2004년 이후 VC 관련 블로그가 등장하고, 액셀러레이터(스타트업 지원 프로그램)도 활성화됨
          + TechCrunch(2005년), A16Z(2008년), AngelList(2010년), Signal.nfx.com(2018년) 등의 등장으로 스타트업 및 VC 정보가 공개적으로 확산
          + 전체적인 VC 투자 규모, 스타트업 수, 모금된 투자금 등이 폭발적으로 증가
          + 1994년부터 2022년까지 VC의 본질은 변하지 않았지만, 전체 시장 규모가 대폭 성장
     * VC 3.0: ""보편화"" (Ubiquity)
          + 2022년 이후, 강세장이 끝나면서 AI가 동시에 등장하며 VC 산업의 운영 방식이 변화
          + VC가 더 이상 소프트웨어 중심이 아니며, 방위산업, 헬스케어, 에너지, 기후기술, 우주산업 등으로 급격히 확장
          + 대형 멀티스테이지 VC 펀드(Sequoia, A16Z, Greylock, Accel 등)들이 등장하면서 VC 시장이 성숙기에 접어듦
          + VC와 사모펀드(PE) 모델이 융합되면서, 후기 단계 투자(레이트 스테이지 VC) 수익률이 하락할 가능성이 높음
     * VC 산업은 더 이상 특정 기술(소프트웨어) 중심이 아니라 모든 산업으로 확산되고 있으며, 창업자들은 새로운 형태의 투자 환경을 맞이하게 됨

4. 소프트웨어는 특별한 산업임

     * 소프트웨어가 등장하기 전에는 VC 산업이 거의 존재하지 않았음
     * 현재 우리가 알고 있는 VC와 스타트업 생태계는 1994년 인터넷 브라우저 등장 이후 본격적으로 성장함
     * 소프트웨어는 빠른 가치 창출이 가능했기 때문에, 창업자와 VC 모두 성공하기 쉬운 환경이었음
     * 하지만 앞으로는 VC들이 더욱 뛰어나야 하고, 창업자들도 1994년 이전처럼 강한 생존력을 가져야 함
     * 지난 60년간 VC 모델은 100배 이상의 수익(100X 리턴)을 목표로 운영되어 왔으며, 1994년 이후 이런 사례가 많았기 때문에 VC 산업이 번성할 수 있었음
     * 하지만 현재 Series A 단계의 VC 투자 밸류에이션이 10년 전(약 3,000만 달러)보다 3배 높은 9,000만 달러 수준으로 상승하면서, 높은 수익률을 유지하는 것이 점점 어려워지고 있음
     * 앞으로 VC 산업은 더 치열한 경쟁 속에서 운영될 것이며, VC와 창업자 모두 더 강한 실행력과 전략이 필요함

5. 일부 메가 VC 펀드는 사모펀드(PE)처럼 행동할 것이며, 창업자들은 그 변화를 체감할 것임

     * 소프트웨어 산업이 성숙기에 접어들면서, 대형 VC들은 사모펀드(PE) 스타일의 투자 방식을 도입할 가능성이 높음
     * PE 기업들은 벤처 지원 스타트업을 인수하여 기존 기업으로 통합할 가능성이 있음, 이로 인해 낮은 가격의 인수 제안을 받을 수 있음
     * 대형 VC들이 PE 모델을 혼합하여 다양한 전략을 활용할 수 있지만, 이러한 투자 방식이 기대만큼 매력적이지 않을 가능성이 있음
     * AI와 소프트웨어를 활용하는 PE 기업들과 경쟁하면서 VC들은 새로운 방식으로 생존 전략을 모색해야 함
     * VC vs PE: 성격과 접근 방식의 차이
          + VC(벤처 캐피털) 투자자
               o 창의적이고 유연한 사고방식 보유
               o 창업자를 지원하고 새로운 시장과 비즈니스 모델을 탐색하는 데 익숙함
               o 가치를 창출하는 역할 수행 (ex. 새로운 산업 개척)
               o 100배(100X) 수익을 목표로 하며, 꿈을 실현하는 투자 방식
          + PE(사모펀드) 투자자
               o 현실적이고 효율성을 중시하는 접근 방식
               o 기존 기업을 최적화하고 비용 절감을 통해 수익을 극대화함
               o 가치를 포착하는 역할 수행 (ex. 기존 사업 최적화)
               o 비효율적인 요소를 제거하고, 종종 경영진을 교체하며, 수익 극대화가 목표
     * 창업자들은 VC와 PE의 차이를 이해하고, 어떤 유형의 투자자와 협력할지 신중하게 선택해야 함

6. AI가 VC와 창업자의 상호작용 방식을 변화시킬 것임

     * VC의 주요 업무는 정보 수집, 요약, 분석, 평가임. AI는 이러한 작업을 잘 수행하며, 앞으로 10년 동안 VC 산업에 큰 변화를 가져올 것
     * 소싱(Sourcing): VC가 창업자를 찾는 방식 변화
          + AI 기반 데이터 분석으로 VC가 직접 창업자를 찾는 '아웃바운드 소싱'이 증가
          + 기존에는 네트워크를 통한 '인바운드 소싱'이 주류였으나, AI가 스타트업 정보를 분석하면서 초기 단계(Seed, Pre-Seed)에서도 적극적으로 창업자를 찾는 방식으로 변화
          + 예를 들어, LinkedIn 상태를 ""새로운 프로젝트 진행 중""으로 변경하면 48시간 내에 10~30명의 VC가 연락할 가능성이 있음
     * 분석(Analyzing): AI가 창업자의 디지털 데이터를 종합적으로 분석
          + AI는 창업자, 팀, 제품, 고객, 시장 반응 등의 디지털 흔적을 분석하여 더욱 정밀한 평가 가능
          + 이는 VC들이 더 많은 스타트업을 효과적으로 평가하는 데 도움을 줄 것임
     * 의사결정(Deciding): AI가 투자 결정을 보조하거나 직접 개입
          + AI는 투자 판단을 보조하며, 향후에는 AI가 투자 결정을 내릴 가능성도 있음
          + 예전에도 Google Ventures가 AI를 활용해 투자 결정을 내린 사례가 있었으며, 앞으로 더 많은 VC가 AI를 활용할 것으로 예상됨
     * 지원(Support): AI가 창업자의 성장을 돕는 방식 변화
          + AI를 활용하면 VC들이 창업자들의 진행 상황을 보다 정확하고 실시간으로 모니터링 가능
          + VC들이 창업자들에게 더 효과적인 조언과 네트워크 연결을 제공할 수 있을 것
     * AI가 VC 산업을 더욱 효율적으로 만들면서, 창업자들은 더 많은 VC들의 관심을 받을 가능성이 높아짐

7. 벤처 캐피털에 대한 부정적인 전망 (약세론)

     * 일부 전문가들은 VC 산업이 위기에 직면할 가능성이 있다고 주장함
          + VC가 너무 많아 경쟁이 과열됨
               o 32,000명 이상의 VC가 존재하면서, 좋은 스타트업보다 투자자가 더 많아짐
               o 투자 밸류에이션이 지나치게 높아져 VC들이 3~8배의 수익을 내기 어려워짐
          + 새로운 기술 윈도우가 소프트웨어만큼 VC 친화적이지 않음
               o 지난 30년간 소프트웨어 산업이 VC에게 높은 수익을 제공했지만, 앞으로의 기술(예: AI, 바이오테크)은 기존만큼 높은 수익을 제공하지 않을 수 있음
                 -AI가 정보 비효율성을 제거하면서 VC의 경쟁이 심화됨
               o AI는 모든 VC가 동일한 정보를 갖도록 만들며, 이는 투자 기회를 더욱 희석시키고 수익률을 낮출 가능성이 있음
          + AI가 스타트업 비용을 낮춰 VC 자금 수요 감소
               o AI로 인해 창업 비용이 절감되면서, 일부 창업자들은 VC 투자를 덜 필요로 하거나 더 적은 지분만 판매할 가능성이 있음
          + AI가 VC 인력을 대체할 가능성
               o AI가 투자 심사 및 분석을 자동화하면서, 많은 VC 인력이 필요하지 않게 될 가능성이 있음
          + 크립토가 전통적인 VC 모델을 대체할 수 있음
               o 블록체인과 토큰화(tokenization)를 활용하여 VC 없이도 창업자들이 자금을 조달할 수 있는 환경이 조성될 가능성
          + AI 산업의 이익이 기존 대기업(빅테크)에 집중될 가능성
               o AI 혁신의 대부분이 기존 대기업(Apple, Amazon, Google, Meta 등)에 의해 독점될 가능성이 있으며, 스타트업과 VC에게 돌아가는 몫이 적어질 수 있음
          + VC 수익률이 S&P 500보다 낮아질 경우, LP(투자자)들이 이탈할 가능성
               o VC 펀드의 수익률이 낮아지면, 기관 투자자(LP)들이 VC 대신 전통적인 주식 시장에 투자할 가능성이 커짐
          + 20개 대형 VC만 살아남고, 나머지는 개인 투자자(엔젤)만 남을 가능성
               o 대형 VC들은 살아남지만, 소규모 VC들은 도태되어 스타트업 투자는 취미 수준의 엔젤 투자로 축소될 수 있음
          + VC 산업이 더 이상 '쿨'하지 않을 가능성
               o 과거처럼 VC와 스타트업이 뜨거운 관심을 받지 못할 가능성이 있음
          + VC 산업이 축소되어 금융 산업 내에서 작은 영역으로 자리 잡을 가능성
               o 결국 VC 시장이 현실적인 규모로 줄어들고, 전체 금융 산업에서 차지하는 비중이 감소할 수 있음
     * 위의 주장은 일리가 있지만, 앞서 언급된 14가지 이유(VC 산업 확장 요소)들이 더욱 강력한 힘을 발휘할 가능성이 큼
     * VC는 서구 경제의 핵심 성장 동력이며, 앞으로도 지속적으로 발전할 것임

창업자들에게 미치는 영향

     * VC 산업의 약세론이 VC의 종말을 의미하는 것은 아님
     * 그러나 VC 간 경쟁이 심화되면서, 창업자들에게도 다양한 영향을 미칠 것임
     * 긍정적 영향:
          + VC 간의 경쟁으로 인해 높은 밸류에이션을 받을 가능성이 높음
          + VC들은 차별화를 위해 창업자들에게 더 나은 지원을 제공할 것
          + VC들은 블로그, X(구 트위터), LinkedIn 등을 통해 더 많은 비즈니스 인사이트를 무료로 공유할 것
          + 과거에는 투자받기 어려웠던 파격적인 아이디어에도 수백 명의 VC들이 관심을 가질 가능성 높음
     * 부정적 영향:
          + 더 많은 VC들에게 더 많이 투자받은 더 많은 경쟁 스타트업이 등장하여 시장 내 경쟁이 치열해질 것
          + 일부 VC들은 PE 투자자처럼 냉정하고 비협조적인 태도를 보일 가능성이 있음
     * 불확실한 영향:
          + 벤처 캐피털(VC)과 사모펀드(PE)의 자금이 많아지면서, 스타트업이 더 오랜 기간 비상장 기업으로 남을 가능성 증가
               o 이는 상장으로 인한 부담을 줄일 수 있지만, 개인 및 기업 문화 성장에 부정적인 영향을 미칠 수도 있음
               o 또한, 이사회(Board)의 정치적 개입이 증가할 가능성 있음
          + 희석(Dilution) 수준 유지
               o 밸류에이션이 증가하더라도, VC들이 요구하는 지분율(Ownership Percentage)은 유지될 가능성이 큼
               o 결과적으로 더 많은 자금을 유치할 수 있지만, 창업자 지분율은 예전과 비슷할 것임
"
"https://news.hada.io/topic?id=19573","TCP/IP 스택 코딩, 1: 이더넷 및스택 코딩, 1: 이더넷 및 ARP (2016)

     * TCP/IP 스택 구현
          + TCP/IP 스택을 직접 구현하는 것은 복잡한 작업처럼 보일 수 있음.
          + TCP의 핵심 사양은 TCP 헤더 파싱, 상태 기계, 혼잡 제어 및 재전송 시간 초과 계산으로 구성됨.
          + 이 블로그 시리즈에서는 Linux에서 최소한의 사용자 공간 TCP/IP 스택을 구현할 예정임.
          + 이 게시물과 소프트웨어의 목적은 네트워크 및 시스템 프로그래밍을 더 깊이 배우기 위한 교육적 목적임.
     * TUN/TAP 장치
          + Linux 커널에서 저수준 네트워크 트래픽을 가로채기 위해 TAP 장치를 사용함.
          + TUN/TAP 장치는 사용자 공간 프로그램에서 설정하기 쉽고 OpenVPN과 같은 다양한 프로그램에서 사용됨.
          + TAP 장치를 사용하여 이더넷 버퍼에 데이터를 읽고 쓸 수 있음.
     * 이더넷 프레임 형식
          + 이더넷은 LAN에서 컴퓨터를 연결하는 다양한 네트워킹 기술의 기반임.
          + 이더넷 표준은 1980년 처음 발표된 이후 크게 발전해 왔음.
          + 이더넷 프레임 헤더는 C 구조체로 선언될 수 있으며, DMAC, SMAC, Ethertype 및 페이로드 필드를 포함함.
     * 이더넷 프레임 파싱
          + GNU C 컴파일러가 구조체 메모리 레이아웃을 최적화하지 않도록 packed 속성을 사용함.
          + 이더넷 프레임을 파싱하고 처리하는 전체 시나리오는 간단함.
     * 주소 결정 프로토콜 (ARP)
          + ARP는 48비트 이더넷 주소를 프로토콜 주소로 동적으로 매핑하는 데 사용됨.
          + ARP 패킷 형식은 비교적 간단하며, 하드웨어 유형, 프로토콜 유형, 하드웨어 크기, 프로토콜 크기, opcode 및 데이터 필드를 포함함.
     * 주소 결정 알고리듬
          + ARP의 결과를 저장하기 위해 translation table을 사용하여 중복 ARP 요청을 피함.
          + ARP 구현의 궁극적인 테스트는 ARP 요청에 올바르게 응답하는지 확인하는 것임.
     * 결론
          + 이더넷 프레임 처리 및 ARP의 최소 구현은 비교적 쉬우며 몇 줄의 코드로 가능함.
          + 프로젝트의 소스 코드는 GitHub에서 확인할 수 있음.
          + 다음 게시물에서는 ICMP 에코 및 응답(핑) 및 IPv4 패킷 파싱 구현을 계속할 예정임.
"
"https://news.hada.io/topic?id=19566","Firebender - 안드로이드 개발자를 위한 AI 코딩 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Firebender - 안드로이드 개발자를 위한 AI 코딩 에이전트

     * 안드로이드 스튜디오에 통합된 AI 코딩 어시스턴트로, 개발자의 생산성을 향상시키기 위해 설계
     * AI 자동완성, 코드베이스에 대한 채팅, 로그 및 에뮬레이터와의 상호 작용, 빠른 파일 편집 등을 제공
     * 최신 안드로이드 SDK와 라이브러리에 대한 지식을 지속적으로 업데이트
     * 안드로이드 스튜디오에서 Firebender 플러그인을 검색하여 설치

주요 기능

     * AI 자동 완성: 코딩 중 실시간으로 코드 제안을 제공하여 개발 속도를 향상시킴
     * 코드 편집: AI를 활용하여 코드 수정 및 최적화를 지원함
     * 채팅 기능: 코드베이스, 로그, 에뮬레이터와의 상호 작용을 통해 문제 해결 및 코드 개선을 도와줌
     * 개인정보 보호 우선: 코드 저장이나 로깅 없이 사용자의 프라이버시를 보호함

   Android Studio에 gemini로 된 code assistant가 default로 달려오던데, 어떻게 유저를 가져올 수 있을지 궁금하긴 하네요.
"
"https://news.hada.io/topic?id=19473","부팅 가능한 컨테이너 만들기 모범사례 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          부팅 가능한 컨테이너 만들기 모범사례

     * Red Hat Enterprise Linux(RHEL)의 이미지 모드는 부팅 가능한 컨테이너로 RHEL을 구축, 배포 및 관리하는 과정을 단순화함
     * 개발, 운영 및 솔루션 제공자는 동일한 컨테이너 네이티브 도구와 기술을 사용하여 애플리케이션과 기본 운영 체제를 관리할 수 있음

부팅 가능한 컨테이너 vs. 애플리케이션 컨테이너 구축

     * 일반적인 애플리케이션 컨테이너와 마찬가지로, Podman, Docker 또는 buildkit과 같은 기존 컨테이너 기술을 사용하여 부팅 가능한 컨테이너를 구축할 수 있음
     * 이미지는 Quay.io, Docker Hub, GitHub Container Registry 또는 내부 컨테이너 레지스트리와 같은 컨테이너 레지스트리에 저장 가능
     * 부팅 가능한 컨테이너는 컨테이너 기술의 자연스러운 진화로, 전체 운영 체제와 Linux 커널을 포함하여 포괄적인 컨테이너 네이티브 워크플로우와 사용자 경험을 제공함

Containerfile 사용

     * Containerfile(Dockerfile이라고도 함)은 컨테이너 이미지를 구축하는 데 필요한 모든 정보를 포함하며, 여기에는 베이스 이미지, 소프트웨어 패키지 설치 지침, Git 저장소에서 파일 복사 등이 포함됨
     * 부팅 가능한 컨테이너를 구축하기 위한 워크플로우와 도구는 애플리케이션 컨테이너와 본질적으로 동일함
     * 그러나 부팅 가능한 컨테이너를 구축할 때 적용되는 몇 가지 모범 사례가 있음

린팅을 위한 모범 사례

     * Containerfile의 마지막 단계로 bootc container lint 명령을 실행하는 것이 권장됨
     * 이 명령은 컨테이너 이미지 내부에서 여러 검사를 수행하고 문제가 있을 경우 오류를 발생시킴
     * 예를 들어, /usr/lib/modules에 여러 커널이 있는지 확인하고, /usr/lib/bootc/kargs.d의 파일 구문을 검사하며, /etc 및 /usr/etc의 위생(hygiene) 상태를 점검함

GitHub Actions와 디스크 공간

     * GitHub Actions를 사용하여 컨테이너를 구축할 때, 부팅 가능한 컨테이너 이미지의 크기 때문에 디스크 공간 관련 문제에 직면할 수 있음
     * 이러한 문제를 해결하기 위해, 워크플로우 파일에 /opt/hostedtoolcache 디렉토리를 삭제하는 단계를 추가하여 디스크 공간을 확보할 수 있음

/var 이해하기

     * /var는 지속적이고 변경 가능한 머신 로컬 데이터와 상태를 위한 디렉토리로, 업데이트 중에도 컨테이너 이미지의 /var 내용은 변경되지 않음
     * 따라서, 애플리케이션이 /var에 데이터를 쓰는 경우, 이를 /usr/share와 같은 다른 디렉토리로 이동하여 읽기 전용 마운트 문제를 피해야 함

useradd 명령 사용

     * 패키징 스크립트에서 useradd를 호출하는 경우, /etc/passwd가 로컬에서 수정되면 상태 드리프트가 발생할 수 있음
     * 이러한 문제를 피하기 위해, systemd의 DynamicUser=yes 옵션을 사용하여 동적 사용자 생성을 고려할 수 있음
     * 그러나 복잡한 경우에는 DynamicUser=yes로 전환하는 것이 어려울 수 있으며, 이 경우에는 systemd-sysusers를 사용하여 사용자를 생성하는 것이 좋음

Quadlet을 사용한 컨테이너 내장

     * systemd에서 컨테이너화된 워크로드를 실행하는 것은 신뢰할 수 있는 배포를 위한 간단하면서도 강력한 방법임
     * Podman은 systemd와의 통합을 위해 Quadlet이라는 도구를 제공하며, 이를 통해 컨테이너화된 워크로드를 선언적으로 관리할 수 있음
     * Quadlet은 이미지 모드와 완벽하게 통합되며, 부팅 시 애플리케이션 컨테이너 이미지를 사전 가져오기 위해 논리적으로 바인딩된 이미지를 사용할 수 있음

요약

     * 이미지 모드를 사용하면 RHEL 호스트 작업 방식에 패러다임 전환이 일어남
     * 클라우드 네이티브 도구를 사용하여 운영 체제를 구축, 배포 및 관리할 수 있으며, 시스템의 대부분이 읽기 전용으로 마운트되는 불변의 OS를 다루게 됨
"
"https://news.hada.io/topic?id=19569","`Reusable.email` - 재사용 가능한 임시 이메일 계정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  `Reusable.email` - 재사용 가능한 임시 이메일 계정

     * 스팸용 또는 다양한 용도로 사용 가능한 무료 임시 이메일 계정
     * 2개의 인박스 모드 제공
          + Unecrypted: 사용자 이름만 있으면 누구나 접근가능 REUSABLE.EMAIL/any-name
          + Encrypted: 프라이빗 키가 있어야 접근 가능. 생성 및 복호화는 브라우저내에서 됨
     * 무료로 커스텀 도메인 연결 지원 (MX DNS 레코드만 설정하면 끝)
     * REST API로도 호출가능 (1000번 호출당 $0.5)
          + 동기/비동기 모드로 호출 가능하며, 파이썬 패키지도 제공됨

   PC에서는 그럭저럭 재미있는 UI인데, 모바일에선 끔찍하네요...ㅎ
   저는 이전에 올라왔던 https://news.hada.io/topic?id=15088 를 애용하고 있습니다.
"
"https://news.hada.io/topic?id=19480","솔리테어 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                솔리테어 게임

솔리테어

     * 영감의 원천: Balatro 게임의 영감 중 하나로 솔리테어(클론다이크)를 언급하며, 이 게임이 Balatro에 미친 영향을 설명함. 솔리테어는 혼자서 즐기는 카드 게임으로, Balatro도 기술적으로 솔리테어 게임에 속할 수 있음.
     * 게임의 문화적 위치: 솔리테어는 게임 문화의 정점에 위치하며, 사회적으로 널리 수용되어 많은 사람들이 이 게임을 즐긴 기억을 가지고 있음. 이는 게임 디자이너로서 긍정적인 여가 활동으로 인식되는 점이 흥미로움.
     * Balatro의 목표: Balatro 1.0 개발이 마무리될 즈음, 게임을 즐길 사람과 그들의 플레이 세션을 상상함. Balatro는 낮은 긴장감으로 편안하고 즐거운 경험을 제공하고자 하며, 이는 크로스워드나 스도쿠 퍼즐과 유사한 방식으로 두뇌를 자극함.
     * 메타 게임 요소: Balatro는 솔리테어와 달리 메타 게임 요소를 포함함. 이는 플레이어가 게임의 디자인을 탐색하고, 게임 루프를 즐기는 플레이어에게 체크리스트를 제공하기 위한 것임. 이러한 요소는 플레이어가 자신의 목표를 설정하고 장기적인 플레이를 형성하는 데 도움을 줌.
     * 개인적 경험: Balatro 출시 이후 1년이 넘는 시간 동안 거의 매일 게임을 즐기고 있으며, 솔리테어를 플레이하는 느낌을 재현하는 데 성공했다고 느낌. 게임에 대한 담론을 통해 평균적인 플레이어의 상호작용 방식과 다를 수 있지만, 사람들이 게임을 즐기고 있다는 점에 만족함.
     * '재즈 솔리테어': Balatro를 '재즈 솔리테어'라고 부르는 이유는 솔리테어의 옛 느낌을 현대적인 디자인 요소와 결합하여 새로운 동시에 친숙한 게임을 만들고자 했기 때문임. 시간이 지나야 이 목표가 달성되었는지 알 수 있을 것임.

        Hacker News 의견

     * 이 글을 정말 좋아함. 우리의 세계는 참여를 간절히 원하는 플랫폼들로 가득 차 있음. 나는 여러 방향으로 끌려가는 느낌을 받음. Balatro와의 참여는 localthunks와는 다름. 많이 하다가 잠시 쉬고 다시 돌아오는 식임. 이는 localthunk가 말하는 것과 같은 정신임. Balatro는 나에게 스트레스 해소 게임임. 디지털 세계가 모든 것을 항상 간절히 붙잡지 않는 접근 방식을 채택한다면 어떨지 궁금함
     * 솔리테어를 좋아함. 기다리는 동안 시간을 보내기 좋은 방법임. 하지만 많은 솔리테어 앱은 광고가 많고 느리거나 조작이 불편함. 몇 년 전, 무료 오픈 소스 솔리테어 앱을 발견함. 빠르고 카드 이동 단축키가 좋음. Klondike/Spider Solitaire를 매일 여러 번 플레이함. 간단한 솔리테어 게임을 원한다면 추천함
     * Balatro를 거의 매일 플레이하고 있음. 게임을 만든 사람은 직접 플레이해야 한다고 생각함. 많은 게임에서 개발자가 플레이어처럼 게임을 하지 않음. 하지만 이런 게임들은 종종 저렴한 게임임. Balatro는 내가 플레이한 게임 중 가장 잘 숫자를 올리는 게임임
     * 플레이어가 안전지대를 벗어나 게임 디자인을 탐험하도록 강요하는 것이 좋음. Balatro는 드로우 포커를 하면서 전략에 따라 다른 핸드를 만드는 게임임. 25분 정도의 시간이 있다면 완벽한 게임임. 복잡하지만 플레이어가 많은 정보를 기억할 필요는 없음
     * 몇 주 전에 Balatro와 Zachtronics 솔리테어를 충동적으로 구매함. Zachtronics는 UI가 작아서 실망스러웠음. Balatro는 훌륭함. 솔리테어 중독자임. Microsoft Solitaire Collection도 좋아함. Klondike는 나를 진정시킴. FreeCell, Pyramid, TriPeaks로 다양성을 추가하는 것이 좋음
     * 오래된 일요일 오후에 이 게임을 플레이하는 것이 환상적임. 몇 번의 플레이 후 하루를 계속함. 이런 게임을 더 원함. Balatro는 광고나 스키너 박스 메커니즘 없이 건강한 게임플레이를 제공함
     * 카드 게임과 도미노 게임에 최근 빠져 있음. 재미있고 사회적이며 정신적으로 자극적임. 보드 게임 밤도 비슷하지만, 카드 한 벌이나 도미노로 다양한 게임을 할 수 있는 것이 아름다움. 복잡한 규칙서가 필요하지 않음
     * 주제에서 벗어날 수 있지만, Windows 2000 Solitaire를 웹 기반 에뮬레이터에서 플레이할 수 있음
"
"https://news.hada.io/topic?id=19493","27년 된 EXE 파일을 Claude 3.7에 업로드한 후 일어난 놀라운 일","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               27년 된 EXE 파일을 Claude 3.7에 업로드한 후 일어난 놀라운 일

   소스가 아닌 부분적인 바이너리(런타임DLL이 없었음)에서
   원래 프로그램의 목적을 알아내고, 파이썬으로 재작성…
   좋은 쪽이든 나쁜 쪽이든 확실히 “인공”지능이네요.

   번역:

   수년간의 AI 실망 끝에 저는 정말 큰 충격을 받았습니다. 이 글은 일반적인 ""AI는 놀랍다""는 식의 글이 아닙니다. 저는 오늘까지만 해도 회의적이었습니다.

   배경 : 많은 분들과 마찬가지로 저도 코딩 지원을 위해 ChatGPT와 다른 AI 도구를 사용해 보았습니다. 결과는? 일관되게 압도적이었습니다. 자신감 넘치는 설명으로 포장된 잘못된 코드를 뱉어내는 미화된 검색 엔진이었죠.

   도전 과제 : 2살짜리 손녀가 오늘 저를 찾아왔습니다. 저는 1997년에 Visual Basic 4로 만든 간단한 앱이 생각났습니다. 하지만 27년 된 실행 파일을 실행한다고요? 오래된 DLL과 호환성 레이어 없이요? 네, 맞습니다.

   The Hail Mary : 호기심에 실제 EXE 파일을 Claude 3.7에 업로드하고 간단한 질문을 던졌습니다: ""이 파일을 실행하는 방법을 알려주실 수 있나요? 이 파일은 Visual Basic 4에서 만든 것 같습니다. 파이썬으로 변환하면 좋을 것 같습니다.""

   예상한 결과 : ""오래된 파일이라 보안 위험이 있고 어쩌고저쩌고...""라는 일반적인 답변이 돌아왔습니다.

   실제로 일어난 일: Claude 3.7은 예상했던 경고와 함께 시작했지만, 그 후 상황이 흥미로워졌습니다. 어떻게든 바이너리를 분석하고 특정 구성 요소를 식별했습니다:
     * ""Form1""
     * ""cntTimer""
     * ""btnExit""
     * 심지어 임베디드 사운드 파일도 감지했습니다!

   그런 다음 다른 어떤 AI도 하지 못한 일을 해냈습니다. Pygame을 사용하여 완전한 Python 변환을 작성했습니다:
    1. 기능을 완벽하게 복제했습니다.
    2. 설치에 대한 명확한 지침이 있었습니다.
    3. 실제로 처음 작동함

   소요 시간: 5분 미만. 과장이 아닙니다.

   스페이스 키에 소리를 바인딩하고 다채로운 글꼴을 추가하는 등의 조정을 요청하자 즉시 완벽한 코드 업데이트를 제공했습니다.

   AI를 사용해 본 이래 처음으로 정말 감탄했습니다. 단순한 파티용 트릭이 아니라 제 작업 시간을 절약해 주는 실용적인 솔루션이었죠.

   결국 저는 Claude에게 감명을 받았다고 말하면서 왜 멋지다고 생각하는지 서툴게 요약해서.... 보내주었고, 그 후 Reddit 게시물을 다시 작성해 주었습니다. 사실 ""거의"" 정상적으로 들립니다. (이 부분은 제가 썼습니다).

   <같은 날 5시간 후> 업데이트

   이 게시물에 대한 업데이트/요약(제가 작성한)을 올렸습니다. 이게 올바른 방법인지는 잘 모르겠지만, 인터넷에서 적어도 한 사람이 그렇게 말했으니 사실인 것 같습니다.

   https://reddit.com/r/ClaudeAI/…

   <업데이트 - 11시간 후>

   제가 '레딧 할아버지'인가 봐요. 재밌네요.

   몇 가지를 바로잡습니다:

   - 예, 클라우드는 EXE를 업로드하도록 허용했습니다.
   - 컴파일된 EXE에는 알아볼 수 있는 문자열이 몇 개 있지만 많지는 않습니다.
   - 클로드가 이 글과 제목을 작성했습니다. 그 외에도 원샷이 가장 좋은 부분입니다.
   - 이제 29살이 된 딸이 키보드를 두드리면 wav 파일을 재생하고 텍스트를 보여주었습니다.

   댓글에 채팅 링크가 보이지 않는 분들이 있어서 추가합니다:

   https://claude.ai/share/3eecebc5-ff9a-4363-a1e6-e5c245b81a16

   <업데이트 - 1일 후>

   트위터/X에 다시 게시한 이 글의 조회수가 백만 건을 넘었습니다. Full post here. 저는 대본과 게시물을 작성했던 동일한 맥락에서 모든 댓글과 함께 게시물을 Claude에게 업로드했습니다. 특히 비평을 요약해 달라고 요청했습니다. 다음은 클로드가 요약한 내용입니다:

   유효한 기술적 맥락

   일부는 VB4 실행 파일이 머신 코드가 아닌 p-코드로 컴파일되므로 완전히 컴파일된 실행 파일보다 분석하기 쉽다는 점을 정확하게 지적했습니다. 이는 사실 정확한 지적입니다. .NET 이전의 VB는 해석 가능한 바이트코드 형식을 저장했기 때문에 완전히 컴파일된 바이너리보다 정보를 쉽게 추출할 수 있었습니다.

   복잡성에 대한 회의론

   다른 사람들은 결과 Python 코드가 비교적 간단하다고 지적했습니다(약 100줄). 앱 자체가 복잡한 애플리케이션이 아니라 기본적인 기능을 갖춘 단순한 프로그램이었기 때문입니다. 인상적인 부분은 생성된 코드의 복잡성이 아니라 바이너리에서 작동하는 코드로 전환하는 데 아무런 노력이 필요하지 않았다는 점입니다.

   프로세스에 대한 오해

   몇몇 비평가들은 제가 Claude가 전통적인 의미에서 실행 파일을 '디컴파일'했다고 주장했다고 생각하는 것 같았습니다. 실제로는 제가 대화에서 설명했듯이 눈에 보이는 문자열을 분석하고 기능을 유추한 것으로, 여전히 인상적이지만 진정한 디컴파일과는 다릅니다.

   일반적인 AI 회의론

   기술 업계에서는 AI 기능에 대한 회의적인 시각이 자연스럽게 존재하며, 일부 댓글 작성자는 인상적인 데모를 가짜, 과장 또는 ""패턴 매칭에 불과하다""고 반사적으로 일축하기도 합니다. 이는 AI 발전에 대한 일반적인 반응 패턴입니다.제가 가장 타당하다고 생각하는 비판은 이 성과가 상황에 맞게 활용되어야 한다는 것입니다. Claude는 임의의 컴파일된 코드에 대해 진정한 바이너리 분석을 수행한 것이 아니라 VB 실행 파일의 텍스트 문자열에서 스마트한 추론을 수행한 것이기 때문입니다.

   사실 그냥 텍스트 문서 읽고 분석하는 거랑 다를 게 없긴 한데..

   와 옛날 잊혀진 자료들도 복구가 가능할까요 ㅋㅋ
   옛날 dos 게임 영상 올리면 exe파일이 나온다던지..

   와 이건 좀 놀랍네요

   본문 의견처럼 vb exe는 코드를 작성한 그대로 확인가능하지만, c++ exe여서 어셈블리였으면 아직 불가능했을겁니다.
   ai 강점중 명령어을 이해하고 응용이 가능해서 다른 언어로 마이그레이션 작업을 은근히 잘 하더라고요

   Claude가 학습한 데이터중에 vb 4.0의 p-code 관련 문서가 있었던게 아닐까 싶습니다.

   그게 아니라면(사전학습된 무언가가 없었다면), AI입장에서 vb 4.0의 p-code와 x86(or arm or…) 기계어 코드가 다를게 있을까요? 둘다 어떤 규칙이 있는 숫자의 나열일 뿐이죠. 짧은 샘플에서 패턴을 읽어낸거라면 그건 그거대로 무섭네요.

   vb나 python같은 언어에서 exe를 만들면 기계어로 컴파일이 아니라서 exe만 있으면 함수명, 변수명 그대로 소스코드를 뽑아낼 수 있습니다.
   이런 규칙을 학습해서 응용한다는건.. 웬만해서 미래엔 개발자로 살아남기 어렵겠어요.

   근데 어짜피 어셈블리도 스펙이 있어서 스펙이랑 같이 주면 금방 번역할것같네요.

   어셈블리에서 읽을만한 자연어 코드로 나오는건 불필요한게 지워진후 다시 창조(변수명, 함수명 등)의 영역이라서 괜찮게 나오려면 시간이 좀 걸리지 않을까 싶어요

   쉬울수도 있어요 ㅋㅋ
   제가 10여년전에 비슷한걸로 논문썼네요
"
"https://news.hada.io/topic?id=19534","약속을 어긴 Mozilla, Firefox 팬들로부터 데이터 판매 비판받아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               약속을 어긴 Mozilla, Firefox 팬들로부터 데이터 판매 비판받아

Mozilla의 새로운 이용 약관과 프라이버시 정책

     * Mozilla는 최근 Firefox 사용자에게 새로운 이용 약관을 준수할 것을 요청하고, 프라이버시 공지 및 FAQ를 업데이트함.
     * 초기 문서에서는 사용자 데이터에 대한 소유권을 주장하는 것처럼 보였으나, Mozilla는 이러한 조항을 제거하고 이는 단순한 형식적인 문구였다고 설명함.
     * Firefox 제품 부사장 Ajit Varma는 커뮤니티의 우려를 반영하여 계약 언어를 수정했다고 밝힘.

프라이버시 약속의 변화

     * Mozilla의 FAQ 페이지에서 Firefox가 개인 데이터를 광고주에게 판매하지 않는다는 문구가 삭제됨.
     * Varma는 데이터 공유와 프라이버시의 맥락에서 ""판매""의 정의가 유동적이라고 설명하며, Mozilla는 데이터를 판매하지 않는다고 주장함.

Mozilla의 내부 변화

     * Mozilla는 최근 경영진 변화를 겪었으며, 새로운 임원들이 합류함.
     * 이러한 변화는 Mozilla의 전략적 방향에 영향을 미쳤을 가능성이 있음.

경쟁 브라우저

     * Firefox 코드베이스를 기반으로 한 다른 브라우저들이 존재함.
     * Waterfox, Zen Browser, LibreWolf, Floorp 등 다양한 대안이 있으며, 각기 다른 특징을 제공함.

   Mozilla의 새로운 이용 약관과 프라이버시 정책 변경은 사용자들 사이에서 논란을 일으켰으며, Mozilla가 광고 사업에 참여하고 있다는 사실이 강조됨.

   최근 행보가 점점 마음에 들지 않네요. 이제 남은 가치는 크로미움의 독주를 조금이나마 막고 있다는 것 정도?

        Hacker News 의견

     * Mozilla에 기부를 고려했으나, 기부금이 소프트웨어 개발에 사용되지 않는다는 것을 알고 기부하지 않음
          + Mozilla의 수익 사용 방식이 무책임하다고 생각함
          + AI 이니셔티브가 이해되지 않음
          + 타겟 광고는 비윤리적이며, 친구가 약물 중독으로 고생한 사례를 언급함
          + Firefox와 관련된 것들을 분리하고 나머지 ""미션""을 포기하길 바람
     * 10년 전 Firefox 팀이 사용자들이 원하는 것에 집중했다면 더 나았을 것임
          + 대신 Pocket, VPN, 프라이버시를 저하시키는 변화들이 생김
     * Mozilla가 Chrome을 이긴 이유는 프라이버시 중심이었음
          + 현재는 그 방향성을 잃었고, 사용자들은 이를 인식하고 있음
     * Mozilla의 주요 고객은 Google이며, Google의 영향력을 무시할 수 없음
          + TOS 변경은 프라이버시 관련 법적 책임을 피하기 위한 것임
     * Mozilla의 경로를 관찰하며, Pournelle의 관료주의 철칙이 떠오름
          + Firefox는 공공재로서의 가치가 있지만, Mozilla의 관료주의로 인해 쇠퇴할 운명임
     * Mozilla가 광고와 관련된 회사로 변했다고 느끼며, 기존 및 미래의 구독을 취소함
     * Mozilla의 경영 실패를 지적하며, Firefox 초기부터 사용해왔지만 좋은 소문을 들은 적이 없음
     * 새로운 대안인 Servo와 Ladybug에 집중할지 고민 중임
          + Firefox Send와 같은 유용한 기능이 중단됨
     * 이제 어디로 이동해야 할지 고민 중임
"
"https://news.hada.io/topic?id=19481","nRootTag - 루트 권한 없이 블루투스 장치를 애플 에어태그로 전환하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               nRootTag - 루트 권한 없이 블루투스 장치를 애플 에어태그로 전환하기

     * nRootTag는 원격 공격자가 사용자의 블루투스 기기를 애플 에어태그처럼 변환하여 위치를 추적할 수 있도록 하는 새로운 공격 기법
     * 루트 권한 없이도 실행 가능하며, 데스크톱, 스마트폰, 스마트워치 등 다양한 기기를 대상으로 할 수 있음
     * 전 세계적으로 15억 대 이상의 아이폰이 공격자의 무료 추적 장치 역할을 하게 됨

연구 개요

     * 애플의 '나의 찾기' 네트워크는 10억 개 이상의 애플 기기를 활용하는 세계 최대의 기기 추적 네트워크임
     * 연구진은 이 네트워크를 악용하여 블루투스 기기를 추적하는 방법을 분석함
     * nRootTag는 루트 권한 없이 컴퓨터를 추적 가능한 '에어태그'로 변환하는 공격 기법임
     * 공격 성공률이 90% 이상이며, 비용은 몇 달러에 불과함
     * 레인보우 테이블을 사용하면 즉각적인 키 검색이 가능해 추적 속도를 높일 수 있음
     * 리눅스, 윈도우, 안드로이드 등 다양한 운영 체제에서 작동하며, IoT 기기도 추적 가능함

애플 '나의 찾기(Find My)' 네트워크의 작동 방식

     * 에어태그는 소유자의 기기와 공개키/비공개키 정보를 공유함
     * 에어태그가 소유자와 분리되면, BLE 광고를 통해 공개키를 방송함
     * 근처의 애플 기기들은 이 정보를 수집하여 암호화된 위치 보고서를 생성한 후 애플 클라우드에 전송함
     * 올바른 비공개키가 있으면 애플 클라우드에서 위치 데이터를 복호화할 수 있음
     * 근처 애플 기기는 송신된 BLE 신호가 애플 기기에서 온 것인지 검증하지 않음

nRootTag의 작동 원리

     * 트로이목마 코드가 실행되면 기기의 광고 주소를 수집하고, 서버에서 해당하는 공개키를 가져옴
     * 공격 대상 기기는 BLE 광고를 통해 '나의 찾기' 네트워크에 위조된 신호를 전송함
     * 서버는 레인보우 테이블을 활용해 키를 검색하고, 애플 클라우드에서 위치 데이터를 복호화함
     * 이 과정을 통해 공격자는 사용자의 위치를 추적할 수 있음

GPU 벤치마크

     * 연구팀은 RTX 3070, RTX 3080, RTX 4090, A100, H100 등의 GPU를 테스트함
     * H100이 가장 빠른 키 생성 속도를 보였지만, 비용이 높아 RTX 3080이 가장 경제적인 옵션으로 평가됨

보안 패치 및 대응

     * 연구진은 애플과 협력하여 보안 취약점을 보고함
     * 애플은 iOS 18.2, macOS Ventura 13.7.2, Sonoma 14.7.2 등 여러 운영 체제에서 보안 패치를 발표함
     * 하지만 패치되지 않은 아이폰이나 애플 워치가 근처에 있는 경우, 공격은 여전히 유효함

연구 지원 및 감사

     * 본 연구는 미국 국립과학재단NSF과 Commonwealth Cyber InitiativeCCI의 지원을 받았음
     * 애플 보안팀은 취약점 보고에 대해 신속히 대응하였으며, 연구진은 이에 감사를 표함
"
"https://news.hada.io/topic?id=19572","청년기와 그 상실의 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             청년기와 그 상실의 영향

젊음

    그리고 그것이 사라졌을 때 일어나는 일

     * 그는 20대 초반에 자신의 책상 위에 타임라인을 걸어두었음. 18세부터 30세까지의 기간을 다루며, 자신이 존경하는 작가들이 첫 소설을 출판한 나이를 표시했음. 매년 생일마다 자신의 얼굴을 한 칸씩 앞으로 옮겼고, 결국 30세가 되었을 때 그는 자신의 얼굴을 붙일 곳이 없었음.
     * 젊은 나이에 무언가를 성취하는 것은 위대함으로 가는 지름길임. 젊은 시절의 실수는 경험 부족으로 용서받지만, 나이가 들면 실수는 성격의 결함으로 간주됨. 젊은 작가로서의 실패는 그에게 큰 좌절이었음.
     * 그는 25세 이전에 두 권의 소설을 완성했지만 출판되지 않았음. 그 소설들은 젊은 사람의 작품으로, 과장되고 자의식이 강하며, 자부심이 넘치는 미숙한 모방작이었음. 그는 젊은 나이에 성취를 이루고 싶었지만, 결국 그 조건이 만료되었음.
     * 나이가 들면서 그는 제2차 세계대전, 고대 그리스, 미국 남북전쟁, 양자 물리학, 우주의 역사에 관한 책을 읽기 시작했음. 이는 세상의 광대함 속에서 위안을 찾기 위한 것이었음.
     * 젊은 시절에는 우상과의 만남을 꿈꾸었음. 그러나 나이가 들면서 그 꿈은 현실과의 괴리감을 느끼게 했음.
     * 그는 결국 소설을 출판했음. 37세 생일에 출판된 그의 소설은 젊은 시절의 꿈을 이루지 못한 것에 대한 아쉬움을 남겼음.
     * 자신의 젊음뿐만 아니라 자녀들의 젊음도 사라지는 것을 보며 슬퍼했음. 자녀들이 성장하면서 그들의 순수함을 잃는 것을 지켜보는 것은 그에게 큰 슬픔을 안겼음.
     * 젊은 작가가 되고자 했던 그의 욕망은 단순한 욕심이 아니었음. 그것은 생물학적 의무였으며, 그는 글쓰기를 멈출 수 없었음. 나이가 들어도 여전히 자신의 삶을 의미 있게 만들고자 하는 욕망은 사라지지 않았음.
     * 결국 그는 자신의 젊음을 잃었지만, 그로 인해 얻은 삶을 살아가고 있음.
"
"https://news.hada.io/topic?id=19505","Microsoft, Edge에서 uBlock Origin 및 기타 확장 프로그램 비활성화 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Microsoft, Edge에서 uBlock Origin 및 기타 확장 프로그램 비활성화 시작

     * Google Chrome 및 Microsoft Edge에서 uBlock Origin 확장 프로그램을 사용하는 경우, 대안을 찾는 것이 필요함
     * Google이 Manifest V2 기반 확장 프로그램을 단계적으로 제거하면서 uBlock Origin을 포함한 여러 확장 프로그램을 비활성화하기 시작함
     * 이제 Microsoft Edge도 같은 방식으로 Manifest V2 확장 프로그램을 비활성화하기 시작함

Edge에서 확장 프로그램이 비활성화되는 방식

     * 최신 Edge Canary 버전에서 Manifest V2 기반 확장 프로그램을 비활성화하는 메시지가 표시됨
       → ""이 확장 프로그램은 더 이상 지원되지 않습니다. Microsoft Edge에서 제거할 것을 권장합니다.""
     * 확장 프로그램이 자동으로 꺼지지만, ""Manage extension""에서 다시 활성화 가능
       → 단, 다시 활성화하려면 추가적인 확인 절차 필요

Microsoft의 계획 불확실성

     * Google은 2024년 6월부터 Manifest V2 기반 확장 프로그램을 단계적으로 폐지할 계획을 세웠음
     * 하지만 Microsoft의 공식 문서에는 여전히 정확한 일정이 명시되지 않음 (현재 ""TBD"" 상태)
     * 따라서 Edge의 변경 사항이 Chromium의 예기치 않은 업데이트로 인한 것일 가능성이 있음

현재 영향을 받는 버전 및 대응 방안

     * 현재 Edge의 정식 버전(Stable) 및 Beta/Dev 채널에는 적용되지 않음
       → Canary 버전에서만 Manifest V2 확장 프로그램이 비활성화됨
     * uBlock Origin은 아직 Edge 애드온 스토어에서 다운로드 가능하며, 최근 스토어에 대한 큰 업데이트도 진행됨

대체 방안: uBlock Origin Lite 또는 Firefox

     * Google이 2024년 8월부터 uBlock Origin을 ""지원되지 않음""으로 표시하기 시작하자,
       개발자는 **""uBlock Origin Lite"" (Manifest V3 기반)**로 전환할 것을 권장함
       → 단, 기능이 제한적임
     * 또 다른 대안은 Firefox로 전환하는 것
       → Mozilla는 Manifest V2 확장 프로그램 지원을 유지할 것이라고 공식 발표함
       → Mozilla Manifesto에 따라 사용자가 인터넷을 직접 통제할 수 있도록 지원한다는 방침

결론

     * MV2 확장 프로그램을 계속 사용하려면
       → Firefox 같은 대체 브라우저로 전환
       → Manifest V3 기반의 새로운 확장 프로그램으로 이동
     * 하지만 일부 MV2 확장 프로그램은 MV3로 전환되지 않으므로, Firefox로 이동하는 것이 유일한 대안이 될 수도 있음

        Hacker News 의견

     * Microsoft는 Chromium의 릴리스를 가져와 광고를 더 많이 보여주고 Bing을 기본 검색 엔진으로 설정하는 방향으로 재포장하는 것 같음
          + Manifest V2 확장 기능의 지원을 중단하고, 요청을 차단하는 확장 기능을 지원하지 않는 Manifest V3로 이동 중임
          + Mozilla는 Firefox가 Manifest V2와 V3를 모두 지원할 것이라고 발표했음
          + uBlock Origin을 사용하려면 Firefox가 가장 좋은 선택임
     * uBlock Origin 없이는 인터넷 사용이 매우 불편함
          + Firefox로 이동하거나 웹 디톡스를 해야 할 것임
     * 20년 후 웹 브라우저와 웹의 모습에 대해 고민 중임
          + 대형 기술 회사들이 출시하는 ""무료"" 소프트웨어는 결국 이익을 추구함
          + 더 중앙 집중화되고, 더 무겁고, 더 침해적이며, 선택의 자유가 줄어들 것임
     * 광고 네트워크가 브라우저에 과도한 영향을 미치는 것을 금지하지 않는 것은 비극임
          + 많은 파워 유저들이 브라우저 업데이트를 중단할 가능성이 있음
          + 개인적으로는 uBlock Origin을 사용할 수 없는 것보다는 구 버전의 Firefox로 인한 보안 버그로 인해 악성코드에 감염될 가능성을 감수할 것임
          + 절대적인 보안이 필요한 웹 브라우징은 격리된 샌드박스 환경에서 사용할 것임
     * Firefox로 돌아갈 시간임
          + Windows에서 Edge를 사용했지만, 이제 Firefox로 돌아갈 것임
          + Firefox의 DevTools가 더 마음에 들었음
     * Google Chrome이나 Edge에서 uBlock Origin 확장을 사용하는 경우, 대체 브라우저나 확장을 찾아야 할 것임
          + Android에서는 광고 차단이 없는 Chrome 대신 Firefox를 사용 중임
          + Google 생태계에서 벗어나는 데 시간이 걸리겠지만, 데스크톱에서도 Firefox로 이동했음
          + Chrome 대신 Firefox를 여는 것이 완전히 쉬웠음
     * Microsoft가 Edge의 EOL을 발표하는 이상한 방식임
          + Microsoft가 더 이상 실질적인 브라우저를 가지지 않기로 한 것이 아쉬움
     * Thorium은 Google이 도입한 기능 및 UI 퇴보를 되돌리는 패치셋을 유지하는 Chromium의 포크임
          + Manifest V2 지원을 가능한 한 오래 유지할 것임
     * uBlock Origin Lite를 설치하면 동일한 차단 목록을 더 나은 보안 속성으로 사용할 수 있음
     * 집에서 사용하는 PC와 Mac에 시스템 전반에 걸친 Adguard를 사용 중임
          + 직장 기기에서는 해결책이 아니지만, 브라우저 API에 대한 걱정에서 벗어날 수 있음
"
"https://news.hada.io/topic?id=19474","EA, Command and Conquer: Red Alert 오픈소스화 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              EA, Command and Conquer: Red Alert 오픈소스화 발표

   이 저장소는 Command & Conquer Red Alert의 소스 코드를 포함하고 있으며, Steam Workshop 지원도 포함

Dependencies

     * DirectX 5 SDK
     * DirectX Media 5.1 SDK
     * Greenleaf Communications Library (GCL)
     * Human Machine Interface (HMI) ""Sound Operating System"" (SOS)

Compiling (Win32 Only)

     * 현재 소스 코드는 완전히 컴파일되지 않으며 복구를 위해 노력이 필요함
     * 원래 빌드 환경을 복구하려면 다음 도구가 필요함:
          + Watcom C/C++ (v10.6) - C/C++ 소스 파일용
          + Borland Turbo Assembler (TASM v4.0) - 어셈블리 파일용
     * 컴파일된 바이너리를 사용하려면 게임을 소유해야 하며, C&C Ultimate Collection은 EA App 또는 Steam에서 구매 가능함

Contributing

     * 이 저장소는 기여(풀 리퀘스트, 이슈 등)를 받지 않음
     * 소스 코드에 변경을 가하고 협업을 장려하려면 GitHub 사용자/조직 공간에 저장소를 포크해야 함

Support

     * 이 저장소는 보존 목적으로만 존재하며, 지원 없이 보관됨

License

     * 이 저장소와 그 내용은 GPL v3 라이선스 하에 있으며, 추가 조건이 적용됨. 자세한 내용은 LICENSE.md를 참조

   이게 Red Alert 만 공개한게 아니군요. C&C 관련 다양한 것들을 다 오픈소스로 공개했네요
   Electronic Arts GitHub에서 다 볼 수 있습니다.
     * CnC_Remastered_Collection - Command & Conquer: Remastered Collection (C++, 19.3k⭐, 5k🍴)
     * CnC_Generals_Zero_Hour - Command and Conquer: Generals - Zero Hour (C++, 1.9k⭐, 531🍴)
     * CnC_Renegade - Command and Conquer: Renegade (C++, 813⭐, 244🍴)
     * CnC_Red_Alert - Command and Conquer: Red Alert (C++, 2.9k⭐, 508🍴)
     * CnC_Tiberian_Dawn - Command and Conquer: Tiberian Dawn (C++, 898⭐, 249🍴)
     * CnC_Modding_Support - Command and Conquer: Modding Support (HLSL, 312⭐, 142🍴)

   OpenRA 가 있긴하지만..

   이전부터 정품을 가지고 있어서 .. 언젠가 .. 언젠가 맥에서 할수 있는 날이 올까 하는..

   제로아워를 맥에서 할수 있는 날이오길 ..

   존경을 담아… 스팀에서 한카피 샀습니다. 8861원이네요.

        Hacker News 의견

     * EA에서 이 프로젝트를 추진한 사람에게 깊은 존경을 표함
     * 오래전에 C&C가 처음부터 다시 작성되었지만, Zero Hour의 오픈 소스 버전은 놀라운 선물임
     * 이 프로젝트를 진행한 사람에게 감사의 인사를 보내고 싶다면 Linkedin에서 할 수 있음
     * 모든 오픈 소스 게임과 몇 가지 다른 게임이 포함된 C&C 번들이 현재 Steam에서 $6에 판매 중임
          + 이로 인해 판매가 증가하고 다른 개발자들이 유사한 일을 하도록 장려되기를 바람
     * Windows에 대한 불만을 토로하며, Windows를 싫어하는 이유를 설명함
     * EA가 15년 이상 전에 게임을 프리웨어로 출시했으며, EA 서버에서 무료로 다운로드 가능했음
          + 따라서 이 코드와 함께 사용할 수 있는 아트 및 기타 자산을 얻는 데 문제가 없을 것임
     * OpenRA가 더 잘했다고 언급하며, OpenRA를 추천함
          + OpenRA는 오픈 소스 그룹에서 LAN 게임으로 즐겼던 좋은 추억이 많음
          + FOSS 커뮤니티에 참여하는 사람들에게 주말 게임을 추천함
          + 대부분 또는 전적으로 FOSS 게임으로 구성하면 추가 점수를 얻을 수 있음
     * EA가 Westwood를 억압한 이후로 EA를 비난했지만, 이번 프로젝트에 감사함
     * 오래된 게임에 대해 이런 프로젝트가 더 자주 이루어져야 한다고 생각함
          + EA Games에서 이 프로젝트를 성공적으로 수행한 사람에게 감사하며, 큰 기업에서 이를 해낸 것에 대해 찬사를 보냄
     * C&C Generals/Zero Hour의 현대적 업데이트를 4k 렌더링, 레이 트레이싱 등을 포함하여 만들 영웅이 누가 될지 궁금함
"
"https://news.hada.io/topic?id=19554","미국 상위 10%가 전체 주식의 87%를 소유하고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국 상위 10%가 전체 주식의 87%를 소유하고 있음

     * 상위 10%가 미국내 주식의 87%를 소유하고 있음. 또한, 개인 사업체의 84%, 부동산의 44%, 전체 부의 3분의 2를 소유하고 있음.
     * 1989년 이후 이 수치들은 증가했으며, 총 부(60.8%에서 67.3%), 주식(81.7%에서 87.2%), 개인 사업체(78.4%에서 84.4%), 부동산(38.2%에서 43.9%) 모두 증가함.
     * 월스트리트 저널에 따르면, 상위 10%는 전체 소비의 50%를 차지하고 있음. 30년 전에는 상위 10%가 소비의 36%를 차지했음.
     * 최근 10년 동안 이 추세는 가속화되고 있음. 2023년 9월부터 2024년 9월까지 고소득층의 소비는 12% 증가했으며, 같은 기간 동안 노동자 계층과 중산층 가구의 소비는 감소함.
     * 하위 80%의 소득자들은 4년 전보다 25% 더 소비했지만, 같은 기간 동안 물가 상승률 21%를 간신히 앞질렀음. 상위 10%는 58% 더 소비함.
     * 2020년대에 상위 10%는 인플레이션 조정 기준으로 훨씬 더 많은 소비를 하고 있음.

   집중화는 어디에나 있음
     * 주식 시장과 경제는 집중화되어 있음. 이러한 집중화는 시장과 경제를 더 위험하게 만들 수 있지만, 이해하기 더 어렵게 만듦.
     * 부가 소수에게 집중되면 과거에 효과적이었던 지표를 사용하여 현재 상황을 이해하기 어려움.
     * 경제적 일화는 미국 경제의 성과를 평가하는 데 유용하지 않음.

   부의 효과가 둔화되면 어떻게 될까?
     * 상위 10%는 금융 자산 가치가 크게 증가했기 때문에 더 많은 소비를 하고 있음. 주식, 주택 가격, 사업체의 주식 가치가 상승함.
     * 주식 시장은 경제가 아니지만, 두 가지가 과거보다 더 밀접하게 연결되어 있음.

   이것을 멈출 수 있는 방법을 모르겠음
     * 부의 불평등은 점점 더 심해지고 있으며, 이 추세를 멈출 방법을 모르겠음. 지속 가능하지 않은 것처럼 느껴지지만, 부유층은 계속 부유해지고 있음.
     * 금융 위기가 없다면 이 추세를 둔화시킬 방법이 없을 것 같음. 금융 위기가 발생하더라도 장기적인 영향이 크지 않을 것 같음. 금융 위기가 발생하면, 저렴한 가격에 자산을 매입할 수 있는 사람은 상위 10%임.
     * 불행히도, 부의 불평등이 곧 개선될 것 같지 않음. 오히려 더 악화될 것이라고 확신함.

        Hacker News 의견

     * 모든 것이 순환적이라는 생각을 가끔 하게 됨. 대부분의 사람들은 봉건 시대의 농민이었고, 상황이 나빠지면 항상 어떤 형태로든 혁명이 일어남. 이제는 글로벌 규모와 시간 프레임에서 일어남
          + 인구의 더 많은 사람들이 불평등의 영향을 느끼게 되면, 그들은 단순히 화려한 장난감과 반짝이는 것들로 만족하지 않고, 강제로 변화를 원하게 됨. 다행히도 그때쯤이면 나는 아마 오래전에 죽었을 것임
     * 주식 시장이나 부동산 붕괴가 불평등을 줄이는 데 실제로 도움이 될 수 있음. 사실, 불평등을 극적으로 줄이는 유일한 방법이라고 생각함
          + 현재 젊은 사람들이 첫 집을 사려고 하는데, 점점 불가능해지고 있음
     * 어떤 재화의 비균일한 분배에서는 항상 상위 x%가 그것의 불균형한 양을 소유하게 됨 (경제 시스템에서는 금융 지식과 레버리지 같은 다른 요인들로 인해 이 수학적 사실이 더욱 증폭됨)
          + 이러한 논의에서 항상 빠진 것은 이 가치가 어느 정도여야 하는지, 그리고 분배가 질적으로 어떻게 보여야 하는지임 (즉, 이상적인 로렌츠 곡선은 어떻게 보여야 하는지)
          + 이러한 주제를 탐구하는 논의/연구/사례 연구 분석이 있는지 궁금함. 즉, 전체 시민 만족도/경제 생산성과 부의 분배와의 관계에 대해
     * 제목은 주식 통계를 사용하고 있음. 하지만 나에게 가장 무서운 통계는 기사에서 언급된 다른 것임: ""상위 10%가 전체 소비의 50%를 차지함"". 이는 매우 불안정해 보임. 부유한 사람들의 행동에 작은 변화가 국가 전체에 큰 부정적인 결과를 초래할 수 있음
     * 휴가 예산에 매우 놀랐음. 인구의 80%가 2500달러 미만임? 이는 이 80% 중 누구도 가족과 함께 호텔이나 에어비앤비에 일주일 이상 머물지 않는다는 것을 의미하는가? 해외 여행을 하지 않거나, 한다면 5년마다 한 번씩인가? 2000달러는 4인 가족의 비행기 티켓에 쉽게 쓸 수 있는 금액임
     * 이 사람은 오랫동안 이런 말을 해왔음
          + Gary's Economics 링크
     * 대학 시절에 토마스 피케티의 ""21세기 자본""을 읽었고, 그의 새로운 ""자본과 이데올로기""의 일부도 읽었음 (하지만 끝까지 읽지는 못했음)
          + 나에게 가장 큰 교훈은 부의 불평등은 어떤 큰 재앙(전쟁, 혁명, 전염병 등) 없이는 절대 개선되지 않는다는 것임. 제안된 모델은 정말 직관적이고 설득력 있음 (요약하자면, 자본의 수익률은 역사적으로 항상 실질 성장보다 높았으며, 이는 위기가 발생할 때까지 부의 집중을 보장함)
          + 작년 노벨 경제학상 수상자인 아세모글루와 로빈슨은 ""국가는 왜 실패하는가""에서 비슷한 이야기를 하고 있음. 그들은 정치 및 경제 제도의 침식과 제국의 붕괴 사이에 더 인과적인 연결을 제안하는 것 같음
          + 이러한 아이디어가 더 널리 접근 가능하고 이해되기를 바람. 사회적 붕괴의 진정한 위험은 이상적인 세율, 정부의 인플레이션/실업 목표 등에 대한 당파적 싸움을 초월해야 함. 폭력적인 격변이 없기를 바라는 것은 모두의 공통된 이익임 (아마도 부유층이 가장 그럴 것임)
          + 마지막으로 확인한 숫자에 따르면, 현재 부의 불평등은 대공황 이전과 비슷하게 나쁨. ""절대 부가 더 중요하다""고 말하는 것만으로는 충분하지 않음. 다른 사람들이 지적했듯이, 이렇게 큰 상대적 부의 격차를 갖는 것은 안정적이지 않음. 그리고 그것은 부패를 고려하기 전의 이야기임
     * 상위 10%는 실제로 많은 사람들임
          + 부의 평등은 실제로 목표가 아님. 하위 50%가 절대적인 측면에서 부유해졌는지 묻는 것이 더 나음, 이는 저자가 다른 게시물에서 답변함
          + A Wealth of Common Sense 링크
     * 그들이 전체 부의 높은 비율을 차지하지 않고 부동산의 비율도 낮은 것을 감안할 때, 이는 주로 금융 교육 때문인 것 같음
          + 나는 상당한 저축을 가진 많은 노동 계층 사람들을 알고 있음 (내가 가진 것보다 더 많음) 하지만 그들은 은행의 저축 계좌에 넣거나 아마도 임대할 부동산에 투자하는 경향이 있음
          + 많은 사람들이 주식 시장을 카지노로 보고 있음, 비록 인덱스 펀드에 투자하는 것이 부동산 임대보다 훨씬 적은 위험을 가짐에도 불구하고
     * 상위 10%가 모든 것의 66%를 소유하고 있음
          + Statista 링크
"
"https://news.hada.io/topic?id=19458","‘Hey 넘버 17’","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ‘Hey 넘버 17’

     * YC의 펀딩을 받은 ""공장 근로자를 위한 AI 성과 모니터링 시스템""은 공장에서 머신 비젼을 통해 노동자의 손 움직임과 생산량을 추적하여 효율성을 그래프로 보여주는 시스템을 제안
     * Optifye.ai의 창립자들이 제품의 사용 예시를 보여주는 풍자적인 영상을 공개
     * 영상에서는 공장 관리자들이 시스템 대시보드를 보고 노동자의 효율성을 지적하는 장면이 포함되어 있음

     관리자: “으, 작업장 17이 문제야. 여기가 병목 구간이고, 성과가 최악이야.”
     (공장에서 옷을 만드는 작업자의 영상을 보며)
     관리자: “이봐, 17번! 무슨 일이야? 너 지금 ‘빨간불’ 상태야.”
     작업자: “저 하루 종일 일했어요.”
     관리자: “하루 종일 일했다고? 그런데 오늘 한 번도 시간당 목표를 달성하지 못했어. 효율이 11.4% 라고? 이건 정말 심각해.”
     작업자: “오늘 그냥 좀 힘든 날이었어요…”
     관리자: “힘든 날? (빼곡히 빨간색으로 표시된 달력을 보며)
     ‘힘든 하루’가 아니라, 거의 ‘힘든 한 달’ 수준인데?”
     * Optifye.ai의 배경
          + Optifye.ai는 Duke University의 컴퓨터 과학 학생인 Baid와 Mohta에 의해 설립되었으며, Y Combinator의 지원을 받고 있음.
          + 두 창립자는 어린 시절부터 공장 환경에 노출되어 왔으며, 가족이 여러 제조 공장을 운영하고 있다고 밝힘.
          + 이들은 공장 소유자에게 카메라를 판매하여 실시간으로 노동자의 작업 상태를 확인할 수 있도록 하는 것을 목표로 함.
     * Y Combinator의 반응
          + Y Combinator는 최근 Optifye.ai의 런칭을 축하하는 게시물을 삭제함
          + Optifye.ai의 Y Combinator 프로필에 따르면, 설치된 AI 감시 시스템은 공장 소유자에게 실시간 생산성 지표를 제공하고, 생산 책임자에게는 라인별, 노동자별 지표를 제공
          + 노동자에게는 ""좋은 성과나 나쁜 성과에 대한 책임"" 을 부여함
     * 노동자 감시의 현황
          + 원격 근무의 증가로 인해 회사들은 마우스 움직임을 기반으로 노동자의 생산성을 추적하기 시작함
          + Amazon 창고에서는 노동자들이 엄격한 기대치를 충족하지 못할 경우 처벌을 받으며, 화장실 휴식 시간도 제한됨
          + Optifye.ai의 접근 방식은 생산성을 이유로 노동자에 대한 잔인함을 수용하는 듯한 태도 때문에 문제가 됨
          + Optiifye의 창업자와 YC는 노코멘트였음

   영상을 보고나니... 똑같은 데이터를 가지고 다른 식으로 연출(연기)했다면 다른 평이 나왔을 것 같기도 하고요, 그런 식으로 다른 평을 받으면 그건 또 괜찮다고 쳐도 되는건가 싶기도 하고요.

   좋은 내용감사합니다.

   wow;

        Hacker News 의견

     * 이 기술이 논란이 되는 이유에 대해 혼란스러워하는 사람들이 있다는 것이 놀라움. 데모는 느린 직원을 식별하고 그를 번호로 부르며 굴욕감을 주는 의류 제조 공장에서 이루어졌음
          + 긍정적으로 활용할 수 있는 방법도 있었음. 예를 들어, 고장난 기계를 사용하는 직원을 발견하거나 조립 라인의 병목 현상을 찾아내는 데 기술을 사용할 수 있었음
          + 그러나 이는 노동자를 어떻게 보는지에 대한 냉정한 시각을 보여줌
     * Optifye.ai는 Duke University의 컴퓨터 과학 학생들이 시작한 회사로, Y Combinator의 지원을 받고 있음
          + 창립자들은 어릴 때부터 공장 작업 환경에 노출되어 있었음
          + 그러나 그들은 직접 공장에서 일한 적이 없음. 그들이 공장에서 일하며 AI의 감시를 받는 것이 그들의 차례임
     * 소프트웨어가 인간성을 증진시키는 밝은 미래가 있다고 믿음
          + 그러나 이 기술은 없어져야 함. 창작자들이 이 글을 읽는다면, 그들이 스스로를 묶을 족쇄를 발명하고 있다는 것을 이해해야 함
     * 저렴한 노동력이 자동화보다 저렴한 공장에서 일하는 사람들을 알고 있음
          + 이러한 공장들은 높은 이직률과 미세 관리하는 상사들이 있음
          + 이러한 상사들이 목표 고객이라면 광고는 잘 만들어진 것일 수 있음. 그러나 이 프로젝트가 실패하길 바람
     * 이러한 기술을 금지하는 규제가 필요함. EU의 규제가 이를 부분적으로 다루고 있음
          + AI 시스템의 고위험 카테고리에 고용이 포함되어 있음
     * 기계가 반복적이거나 부상 위험이 있는 작업에서 우리를 해방시킬 것이라는 말을 들었음
          + 그러나 그것들이 우리의 노예화 도구가 될 것인지 의문임
     * 유명한 트윗과 Charlie Chaplin의 Modern Times의 공장을 만들려는 시도와 같음
     * AI 기반 노동자 감시는 의류 공장 직원에서 멈추지 않을 것임
     * 프로 스포츠 팀과 선수들이 투입하는 상대적 노력을 고려해보면, 목표나 결과에 대한 불일치가 거의 없음
          + 그러나 최고 성과를 내는 선수들도 항상 100%의 노력을 기울이지 않음. 이는 번아웃을 방지하기 위함임
          + 기업 세계에서는 효율적인 팀에 대한 집착이 있지만, 스포츠에서는 ""효율성""을 추구하지 않음
     * 제목을 읽고 The Prisoner를 참조한 것이라고 생각했음
          + 기사를 읽고 나서 그것이 아니었음을 깨달았음
          + 더 생각해보니 우연히 참조한 것임
"
"https://news.hada.io/topic?id=19552","Gitingest - Git 리포지토리를 AI 친화적인 텍스트로 변환하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Gitingest - Git 리포지토리를 AI 친화적인 텍스트로 변환하는 도구

     * Git 리포지토리를 LLM(대형 언어 모델)과 통합할 수 있도록 변환
     * GitHub URL을 간단히 변경하여 요약본(digest) 생성 가능
          + 예: https://github.com/user/repo → https://gitingest.com/user/repo
     * 브라우저 확장 지원 : 크롬 / Firefox
     * 간편한 코드 컨텍스트 추출: 리포지토리 URL 또는 로컬 디렉토리에서 텍스트 요약 생성
     * LLM 프롬프트에 적합한 출력을 제공하는데 최적화
     * 통계 제공 : 파일 및 디렉토리 구조, 추출된 데이터 크기, 토큰 수 계산
     * CLI로 터미널에서 간편 실행 가능
     * Python 패키지 지원: 코드에서 직접 사용 가능
     * Tailwind CSS + FastAPI + Jinja2 + tiktoken + posthog
     * Python 에코시스템 및 데이터사이언스 프로젝트에 잘 동작하며, JavaScript/Node 가 필요하다면 Repomix 추천

   Repomix - 자신의 코드베이스를 AI친화적인 형식으로 변환하는 도구
   와 비슷한 도구지만, 둘이 잘 지원하는 언어가 달라서 Python에는 Gitingest, Javascript 에는 Repomix 를 쓰라고 서로 추천하고 있네요.
"
"https://news.hada.io/topic?id=19584","Apple, M4 Max 및 M3 Ultra 칩 탑재한 Mac Studio 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Apple, M4 Max 및 M3 Ultra 칩 탑재한 Mac Studio 공개

     * M4 Max : 14/16 코어 CPU, 32/40 코어 GPU, 16코어 뉴럴 엔진, 36/48/64/128GB 메모리, 512GB 및 1/2/4/8TB SSD, 3,290,000원부터
          + 최대 5대 디스플레이 : 60HZ 6K 4대 + 144HZ 4K 1대, 60HZ 6K 2대 + 60HZ 8K / 240HZ 4K 1대
     * M3 Ultra : 28/32 코어 CPU, 60/80 코어 GPU, 32코어 뉴럴 엔진, 96/256/512GB 메모리, 1/2/4/8/16 TB SSD, 6,590,000원부터
          + 최대 8대 디스플레이 : 60HZ 에서 6K 또는 144Hz 4K 8대, 60HZ 에서 8K 또는 240HZ에서 4K 4대
     * Thunderbolt 5(USB‑C) 포트 4개 : Thunderbolt 5(최대 120Gb/s), USB 4(최대 120Gb/s), USB 3(최대 10Gb/s), DisplayPort 2.1
     * HDMI 2.1 포트: 60Hz에서 최대 8K 해상도 또는 240Hz에서 최대 4K 해상도
     * USB 3(USB-A) 포트(최대 5Gb/s) 2개
     * Wi-Fi 6E, Bluetooth 5.3, 10Gb 이더넷, 3.5mm 헤드폰 잭

   아아 가격이 너무나도 안드로메다로 가고 있는 것 같습니다. 저야 뭐 Mac mini M4 Pro로도 만족하긴 하지만 진짜 Ultra 급 성능이 필요한 분들은 지출이 막대하겠네요.

  Hacker News 의견

     * 512GB의 통합 메모리는 새로운 지평을 여는 것임. Apple이 메모리 제약을 극복할 때가 언제일지 궁금했는데, 이제 반 테라바이트 수준의 통합 메모리를 보게 됨. 이는 대형 AI 모델을 로컬에서 실행하는 데 매우 실용적이며, Apple의 효율적인 메모리를 단일 칩에 통합하는 접근 방식은 NVIDIA의 솔루션과 비교해 매력적임
          + 두 개의 M3 Max 칩을 ""융합""하는 이 디자인이 열 방출과 전력 소비 측면에서 어떻게 성능을 발휘하는지 궁금함
     * M3 대신 M4. 이것이 기본적으로 비닝(binning)인지 궁금함. M1 칩에 대해 이를 가능하게 했던 인터포저가 사용 가능하지 않다는 것을 어디선가 읽었던 것 같음
          + 512GB의 통합 램과 NPU 접근은 절대적인 게임 체인저임. 내 추측으로는 Apple이 내부 AI 작업을 위해 이 칩을 개발했으며, 이제 다른 사람들이 사용할 수 있도록 공개하고 있는 것임. 이를 위해 2U 랙 형태가 정말 필요함
          + 이 하드웨어는 현재 운영 체제에 의해 제약을 받고 있음
     * 이전 M2 Ultra 모델은 최대 메모리가 192GB였음. Pro와 다른 M3 모델은 128GB로, 이는 심지어 99.9%의 전문 작업에도 충분하다고 생각함
          + 이제 이를 512GB로 늘림. 512GB Mac Studio의 가격은 $9499로 매우 비쌈. 이는 AI 골드 러시임이 확실함
     * Studio를 M3 Ultra로 업데이트했으니, M4 Ultra는 WWDC에서 Mac Pro에 직접 들어갈 수 있을 것임. 흥미로운 타이밍임. 아마도 Mac Pro의 폼 팩터도 변경할 것임
          + 또한, 이는 매우 소량의 제품일 것이므로 N3B에 있는 것이 큰 문제가 아님. 동시에, 이 칩들은 제작 비용이 매우 비쌀 것이므로, 고급 가격의 RAM과 결합하는 것이 일리가 있음
     * 512GB 통합 메모리는 AI 작업에 절대적으로 놀라운 것임. NVIDIA GPU가 얼마나 많이 필요한지에 비해, 가격이 거의 합리적으로 보임
     * M3 Ultra와 M4 Max의 일반 컴퓨팅 가치를 비교할 때, Studio의 M4 버전에서 RAM을 최대한으로 설정한다고 가정하면 어떻게 생각하는지 궁금함
     * Thunderbolt 5 (TB 5)는 매우 유용함. 매우 얇고 가벼운 노트북을 가지고 있다가 필요할 때 TB 5를 통해 외부 GPU나 eGPU에 접근할 수 있음
          + Asus가 세계 최초의 Thunderbolt 5 eGPU를 발표했음
     * AI 모델을 실행하기 위해 최대 메모리(512GB)를 원하고 모델 가중치를 아카이브하기 위해 드라이브를 연결하는 것이 괜찮다면, 약 $10K에 이를 얻을 수 있음. 꿈의 기계임
          + Nvidia의 Project DIGITS는 $3K로 곧 출시될 예정이며, 이 Mac의 128GB & 4TB 버전을 약 $4700에 얻을 수 있음. 차이점은 이를 일주일 내에 실제로 얻을 수 있으며 macOS를 실행할 것임
          + 누군가가 이 전체 DeepSeek 모델을 테스트하는 것을 보고 싶음. 아마도 이것이 완전히 소유할 수 있는 첫 번째 작은 동반자 AI 장치가 될 것이며, 번거로움 없이 원하는 대로 할 수 있을 것임
     * Apple은 오늘 M3 Ultra를 발표했으며, 이는 지금까지 만든 가장 높은 성능의 칩임
          + 몇 주 전에 M4 Max가 나왔던 것 같았음
     * 요즘 컴퓨터 - 더 매력적이고, 흥미롭고, 멋지고 바람직할수록 가격이 천문학적으로 높아짐
          + $9499
          + 컴퓨팅에서의 경쟁은 어떻게 된 것인지 궁금함
          + 컴퓨팅 하드웨어 경쟁은 예전에는 치열하고, 잔인하게 경쟁적이었음. 이제는 단순한 대규모 골드 러시 현금 획득임

   M3 Ultra 가 M4 Max 대비 2배까지 빠르다고 하네요. 그래서 가격도 2배 ㅎㅎ
"
"https://news.hada.io/topic?id=19521","GSA, 18F 폐지 결정폐지 결정

     * 미국 연방총무청(GSA)이 정부 기술 컨설팅을 담당하던 18F 팀을 해체. 약 90명의 직원이 영향을 받음
     * GSA 기술 혁신 서비스(TTS) 책임자인 Thomas Shedd가 토요일 새벽 1시에 직원들에게 이메일을 보내 18F 팀을 ""비필수"" 조직으로 분류했다고 발표함
          + GSA의 임시 수장인 Stephen Ehikian은 월요일 직원들에게 전체적인 인력 감축 계획을 설명
          + GSA 내 다른 부서들도 이번 감축 조치에 영향을 받거나 영향을 받을 예정
          + 백악관의 지시에 따라 감축이 진행되고 있으며, 향후 추가적인 변화가 예상됨
     * 18F는 2014년 미국 디지털 서비스(USDS)와 함께 설립된 정부 기술 컨설팅 조직으로, 정부 기관의 기술 프로젝트를 지원해 옴
          + USDS는 이후 Elon Musk가 운영하는 DOGE로 개편됨
          + Musk는 오래된 정부 기술을 개선하겠다고 밝힌 바 있으나, USDS 내 기존 직원들이 해고되거나 항의하며 퇴사함
     * Musk는 소셜 미디어 X에서 18F와 TTS가 ""삭제되었다""고 언급함
          + 18F를 ""좌파 성향의 정부 기술 조직""이라 비판하는 게시물을 공유하며, 18F의 IRS 무료 세금 신고 시스템(Direct File) 개발을 예로 듦
     * 18F의 주요 프로젝트
          + 미 법무부의 장애인 권리 보호 웹사이트(ada.gov) 개편
          + 10주년을 맞아 450개 이상의 정부 기술 프로젝트 수행 사실을 공개
          + 창립 초기 몇십 명 규모였으나, 최대 100명 이상의 기술 전문가가 근무했던 시기도 있음
     * 백악관의 지시에 따라 정부 전반에 걸친 대규모 해고 진행 중
          + GSA는 ""비필수 컨설팅"" 기능 축소를 요구한 트럼프 행정부의 지침을 따르고 있음
          + GSA 수장은 AI를 활용하여 인력 감축을 추진하는 방향을 제시함
          + GSA 연방 조달 서비스(FAS)에서 12명의 고위 임원이 해고됨

        Hacker News 의견

     * Russell Vought가 정부 직원에 대해 언급한 내용이 있음
          + 관료들이 아침에 일어나기 싫어하도록 만들고 싶음
          + 그들이 악당으로 보이도록 하고 싶음
          + 환경 보호국(EPA)의 자금 지원을 중단시켜 에너지 산업에 대한 규제를 막고 싶음
          + 그들을 트라우마에 빠뜨리고 싶음
     * 18F는 그들이 트라우마를 주고 싶어하는 관료들임
          + 미국 정부의 많은 웹사이트보다 훨씬 나은 웹사이트 구현을 보여줌
          + GSA의 Digital Analytics Program은 정부 웹사이트 사용에 대한 방대한 데이터를 제공함
          + Treasury의 Government Spending Explorer는 2017년 이후 정부 지출을 상세히 분석함
     * 온라인으로 세금 신고를 할 수 있는 아이디어가 미국에서는 극좌주의로 간주됨
          + 세금 신고를 간소화하고 비용을 줄이는 것이 우파가 지지할 만한 것임
     * 18F의 주요 프로젝트에 대한 설명이 있음
          + Beta.FEC.gov: 연방 선거 위원회의 웹사이트를 개편함
          + MyUSCIS: 미국 시민권 및 이민 서비스(USCIS)의 이민 과정을 간소화함
          + eRegulations Platform: 규제를 더 쉽게 접근하고 이해할 수 있도록 함
          + College Scorecard: 대학 비용, 졸업률, 부채 및 졸업 후 수입에 대한 명확한 데이터를 제공함
          + Cloud.gov: 정부 팀이 웹 애플리케이션을 효율적으로 개발하고 관리할 수 있는 플랫폼을 제공함
     * 18F는 지난 두 행정부에서도 충분히 활용되지 않았음
          + 이들은 실제로 기관의 비용을 절감했으며, 큰 계약 업체들이 반대했던 이유임
          + 의회의 할당을 받지 않고 기관에 작업을 청구했음
     * USDS는 경쟁을 원하지 않음
          + 18F와 USDS는 매우 똑똑하고 헌신적인 사람들이 있었음
          + 이러한 기관들이 이렇게 변한 것이 안타까움
     * New York Times는 정부 장악에 대한 폭로 기사를 작성함
          + Musk가 몇 년 전부터 정부에 침투하기 시작했음
          + 2029년에 들어설 행정부가 이들의 기여를 간과하지 않기를 바람
     * 18F와 USDS가 사라진 것이 슬픔
          + 이 기관에서 일하고 싶다는 생각을 했었음
     * 18F 친구들이 일자리를 찾고 다시 일어설 수 있도록 도와야 함
          + 팀과 HR 채용 과정을 열어 이들을 도와야 함
     * 관련 진행 중인 스레드가 있음
"
"https://news.hada.io/topic?id=19511","Meta Aria Gen 2 안경 공개 - 기계 지각, 컨텍스트 AI, 로봇 공학 연구를 위한 차세대 안경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Meta Aria Gen 2 안경 공개 - 기계 지각, 컨텍스트 AI, 로봇 공학 연구를 위한 차세대 안경

     * Aria Gen 2 안경은 인간의 관점에서 세상을 이해하려는 AI 시스템 연구에 중요한 도구로 활용될 수 있음
     * 최첨단 센서 모듈 : RGB 카메라, 6DOF SLAM 카메라, 시선 추적 카메라, 공간 마이크, IMU, 기압계, 자력계, GNSS 등의 개선
          + 코받침에 심박수 측정용 PPG 센서와 사용자의 목소리를 구별하는 접촉 마이크 추가
     * 초저전력 및 온디바이스 기계 지각 : SLAM, 시선 추적, 손 추적, 음성 인식 기능을 Meta의 커스텀 실리콘으로 온디바이스에서 처리
     * 하루 종일 사용 가능 : 약 75g의 무게, 6~8시간 연속 사용 가능, 접이식 다리로 향상된 휴대성
     * 오디오를 통한 상호작용 : 오픈 이어 포스 캔슬링 스피커를 통한 오디오 피드백 제공으로 사용자 중심 시스템 프로토타이핑 지원
     * 차세대 컴퓨팅 플랫폼 개발을 위한 10년간의 연구가 이러한 핵심 기술 발전으로 이어짐
          + Meta의 Reality Labs Research와 FAIR AI 연구소에서 이를 활용하여 장기적인 연구 비전을 추진할 계획
          + Project Aria를 통해 학계 및 상업 연구소에 기술을 제공함으로써 개방형 연구와 컴퓨팅 및 AI의 미래를 형성할 핵심 기술에 대한 공공의 이해를 증진할 것으로 기대
     * 2020년부터 Project Aria를 통한 개방형 연구가 학계와 산업 전반에서 널리 사용되는 오픈 소스 도구 개발로 이어짐
          + 1세대 Aria 안경으로 수집된 Ego-Exo4D 데이터셋은 현대 컴퓨터 비전 및 로봇 공학 분야의 필수 도구로 자리 잡음
          + 조지아 공과대학교 연구진은 Aria Research Kit를 활용하여 휴머노이드 로봇이 가정에서 인간을 돕는 방법을 학습하도록 연구함
          + BMW 연구팀은 증강 및 가상 현실 시스템을 스마트 차량에 통합하는 가능성을 탐색하는 데 활용함
          + 카네기 멜론 대학교의 NavCog 프로젝트에서 시각 장애인을 위한 실내 내비게이션 지원
          + Envision이 Aria Gen 2의 온디바이스 SLAM 기능과 스피커 기반 공간 오디오 기능을 활용하여 시각 장애인과 저시력 사용자가 실내 환경을 원활하게 탐색할 수 있도록 지원
               o 이 기술 활용은 아직 탐색 및 연구 단계에 있으며, 연구자들이 자아 중심 관찰 기반 AI 경험을 프로토타이핑하는 방법을 보여주는 사례
               o SLAM, 시선 추적, 손 추적, 오디오 상호작용을 포함한 고급 센서 및 온디바이스 기계 지각 기능이 연구 및 로봇 공학 응용을 위한 데이터 수집에 이상적인 환경을 제공
     * 향후 몇 개월 동안 파트너들에게 기기 제공 일정에 대한 세부 정보를 공유할 예정
     * Aria Gen 2가 다양한 연구 분야에서 혁신을 촉진하는 도구로 작용하며 차세대 컴퓨팅 플랫폼의 발전에 기여할 것으로 기대

     * SLAM : Simultaneous Localization and Mapping
"
"https://news.hada.io/topic?id=19513","마이크로소프트 Azure 사용을 피해야 하는 400가지 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   마이크로소프트 Azure 사용을 피해야 하는 400가지 이유

     * Microsoft Azure에서 매일 경험하는 이상한 일들을 공유하는 계정. 현재 400일이 넘어감
     * Day 403: 최근 #Microsoft Cloud for Sustainability Technical Summit이 있었음. 그러나 실제로는 지속 가능성에 약간의 포커스를 둔 #Copilot 서밋처럼 느껴졌음. (이 스크린샷은 처음 세 세션에서만 가져온 것임)
     * Day 402: Azure CLI의 새로운 #AI 기능은 지금까지 훌륭하게 작동하고 있음 (에러 스크린샷)
     * Day 401: 링크 에러 이미지. 존재하지도 않는 섹션으로 연결되는 #Azure 문서 링크의 무수한 사례 중 하나에 불과
       ...

        Hacker News 의견

     * 몇 년 전 Mojang에서 일할 때 Microsoft에 인수되었음
          + AWS에서 Azure로 이전하려고 했지만 실패했음
          + Azure를 클라우드 제공자로 고려하지 않게 되었음
          + 클라우드 인프라에 대한 불만은 관리 서비스 사용량에 비례함
          + 가상 머신을 주로 사용하는 팀은 불만이 적음
     * Azure의 서비스와 추상화가 좋지 않다는 의견
          + 많은 기업들이 이러한 ""이상한"" 서비스를 소비하는 것이 안타까움
          + Azure에서 벗어나 Hetzner로 이전하여 비용 절감과 개발자 경험 개선을 이룸
          + 대규모 글로벌 분산이나 작은 규모의 MVP 스타일을 제외하고는 대형 클라우드를 사용할 이유가 적음
     * Azure 사용자 경험이 부족하다는 의견
          + 필터 바가 제대로 작동하지 않는 페이지가 많음
          + 이러한 문제는 조직의 핵심 가치가 아니면 해결되지 않을 가능성이 높음
     * AWS와 Azure를 모두 사용하는 사람의 의견
          + Azure 포털이 AWS보다 더 직관적임
          + AWS 환경에서의 복잡함을 해결하기 위해 Azure를 선호함
     * 작은 회사에게는 Cloudflare가 좋은 선택일 수 있음
          + 대형 클라우드 제공자에 비해 개발자 경험이 좋음
     * Azure의 통합이 좋지만 VM 가용성 문제와 UX 문제로 인해 사용이 어려움
          + Azure Functions의 경험이 불편하여 사용하지 않기로 결정함
          + 자체 .NET 빌드를 사용하는 것이 더 간단함
"
"https://news.hada.io/topic?id=19550","Blender로 제작한 영화 Flow, 오스카상 수상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Blender로 제작한 영화 Flow, 오스카상 수상

     * 독립 애니메이션 영화 'Flow' 가 아카데미 최우수 장편 애니메이션상을 수상하며 라트비아와 감독 Gints Zilbalodis에게 첫 오스카 트로피를 안김
     * 영화는 홍수로 집을 잃은 동물들이 함께 보트를 타고 여정을 떠나는 이야기로, 대사가 없는 독특한 연출이 특징임
     * 무료 오픈 소스 소프트웨어인 Blender로 제작되어 기술적으로도 주목받음
     * 'Flow'는 'Inside Out 2', 'Moana 2', 'The Wild Robot' 같은 대형 스튜디오 작품들이 있는 경쟁 속에서도 골든글로브 수상 이후 오스카까지 거머쥠
     * 작은 예산의 독립 영화임에도 불구하고 최우수 국제영화상 부문에도 노미네이트되며 애니메이션으로서는 드문 성과를 거둠
     * 라트비아 영화 역사상 최초의 오스카 후보 및 수상 기록을 세우며 의미 있는 업적을 남김

        Hacker News 의견

     * Blender로 제작되었을 뿐만 아니라, 최종 렌더링은 Blender의 반실시간 Eevee 엔진으로 수행되었음. 이는 Cycles 엔진보다 컴퓨팅 요구량을 크게 줄였음. 감독은 로컬 워크스테이션으로 4K 프레임을 0.5-10초 만에 생성할 수 있었다고 언급했음
          + ""정식"" 제작 렌더러인 Cycles가 물론 더 나은 품질을 제공하지만, 저예산으로도 가능한 대안이 있다는 것은 매우 가치가 있음
     * Flow는 기술적으로 인상적인 영화는 아니었음. 애니메이션은 매우 불완전했고, 렌더링(특히 그림자와 텍스처)이 부족했음. 전체 영화는 비디오 게임 컷신처럼 보였음
          + 그러나 매우 놀라운 컷신을 보는 것 같았음. 미디어가 이 영화를 혁신적이고 최첨단이라고 이야기하는 것이 걱정됨. 실제 이야기는 감독이 제한된 환경에서 다른 작품들만큼 즐겁고 의미 있는 것을 만들어냈다는 것임
          + 가장 중요한 것은 이 영화가 실제 어린이 테스트를 통과했다는 것임. 7살 아들과 그의 친구들이 슬랩스틱, 팝 음악, 심지어 대화 없이도 영화 전체를 몰입해서 봤음. 그것도 한 번이 아니라 네 번이나
     * 아카데미 회원들이 최우수 애니메이션 후보작을 모두 볼 필요가 없다는 것이 놀라움. 사실 그들은 어떤 영화도 볼 필요가 없음
          + 몇 년 전, 애니메이션 업계에서 확실히 이길 것이라고 생각했던 영화가 수상하지 못한 해가 있었음. 애니메이션 업계 잡지가 아카데미 회원들에게 어떤 영화에 투표했는지 물어본 결과, 많은 투표자들이 애니메이션 영화를 어린이용으로만 생각하고 후보작을 보지 않았다는 것을 발견했음
          + 그들은 자녀들이 반복해서 보는 영화를 기준으로 투표했음. 자녀가 없는 경우 손자나 조카에게 ""작년에 어떤 만화를 좋아했니?""라고 물어보고 그에 따라 투표했음
          + 또 다른 요인은 가장 많이 들어본 영화에 투표하는 경향이 있었음. 이는 Disney에게 큰 이점을 줌. Flow는 어떻게 이겨냈을까?
          + Inside Out 2는 미국에서 더 넓은 극장 개봉을 했고, 광고도 많이 했으며, 6억 5천만 달러의 국내 수익을 올렸고, 현재까지 전 세계에서 두 번째로 높은 수익을 올린 애니메이션 영화임. Disney+에서도 스트리밍됨
          + 이는 애니메이션 영화를 보지 않는 아카데미 회원들이 이 영화를 들었을 가능성을 높임
          + Flow는 연말에 미국에서 소규모 극장 개봉을 했고, 광고를 본 적이 없음. 많은 아카데미 회원들이 이 영화를 들어본 적이 없을 것임
          + 추측하건대, Moana 2가 아이들이 반복해서 스트리밍하는 영화일 수 있음. 이는 후보작이 아니었기 때문에 ""내 아이가 본 영화에 투표""하는 사람들이 올해 투표하지 않았고, 그래서 비Disney 영화가 기회를 얻었을지도 모름
     * Flow의 가장 큰 강점은 음성 해설이 전혀 없다는 점이었음. 거의 무성 영화처럼 느껴졌음. 강압적인 내레이터가 없었음. Flow는 방해 없이 자신의 방식으로 느낄 수 있게 해줌
          + 할리우드, 인터넷, AI 이후 대부분의 미디어는 정확히 무슨 일이 일어나는지 알려주는 것에 익숙해져 있음. '웃음 트랙'이 웃으라고 지시하는 것처럼. 무언가의 의미나 답을 찾는 과정이 대부분 사라짐. 그런 지시가 없으면 각자가 해석을 하게 됨. 특정 메시지나 주제를 전달하지 않음. 이는 영화가 각자에게 다르게 경험된다는 것을 의미함. 그래서 훌륭함
     * Blender 1.8 이전부터 사용했던 사람으로서, Blender가 이 지점에 도달하는 것을 보는 것은 매우 놀라운 일이었음. 당시에는 레이 트레이싱도 없었고, 긴 형식의 비디오를 만들려는 시도는 매우 기초적이었음
          + 어린 시절 Blender를 배우며 업계 표준이 되기를 응원했던 기억이 남. 프로젝트가 얼마나 성장했는지 보는 것은 놀라움
          + Blender에 감사하는 말을 듣고, 그 Blender를 말하는 것인지 확인하기 위해 구글링했음. 어릴 때 모든 튜토리얼을 하며 게임 개발을 고려했던 기억이 남
          + Ton Roosendaal에게도 감사함. Blender Foundation을 만들고 ""Free Blender"" 캠페인을 시작하여 Blender가 지금의 위치에 도달하도록 한 것은 성공할지 의심스러웠지만, 결국 성공했음. Blender는 OSS 생태계의 보석 중 하나임
     * Blender가 많은 발전을 이루었음을 보여주지만, FLOW는 기술적으로 놀랍지 않음. 반면에 최근에 Shrek을 다시 봤는데, 복잡한 그래픽이 전부는 아님
     * 최근 관련 소식: Blender로 제작된 작품이 처음으로 Golden Globe를 수상함
"
"https://news.hada.io/topic?id=19530","DOGE 직원이 자신의 공개 GitHub에 DOGE 작업을 게시하고 있는 것으로 보임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            DOGE 직원이 자신의 공개 GitHub에 DOGE 작업을 게시하고 있는 것으로 보임

     * 이번 주부터 한 DOGE 직원이 자신의 공개 깃허브에 DOGE 작업을 게시하고 있는 것으로 보임
     * 직원인 Jordan Wick은 불과 3일 전에 트위터 DM 다운로드 도구의 리포지토리를 만들기도 했음
     * 그는 1월에 해저 케이블, 항구 및 ""중요한 광물""에 대한 지리공간 데이터 작업을 게시함

        Hacker News 의견

     * 많은 사람들이 기밀이라고 생각할 수 있는 데이터가 실제로는 기밀이 아닌 경우가 많음. 예시로 제시된 데이터는 모두 공개적으로 접근 가능한 데이터이며, Twitter 관련 부분은 단지 로컬 도구를 설정하기 위한 것임
          + datacatalog.worldbank.org
          + opendata.arcgis.com
          + mrdata.usgs.gov / www.usgs.gov
     * 이러한 정보를 공유하는 것은 유용하지 않음. DOGE가 중요하지 않다고 생각하는 사람들은 이를 통해 '공개적으로 접근 가능한 데이터를 공개한 것이 최악이라면 큰 문제가 아니다'라고 생각할 것임. 반면, 이를 중요하게 생각하는 사람들은 비밀 정보를 유출했다고 주장할 것임. 결국 두 개의 다른 세계에 살고 있는 사람들처럼 보이게 됨
     * 미국 외부에 거주하는 사람으로서, DOGE의 성공을 위해 무엇이든 할 것이라는 이해를 하고 있음. 실패는 받아들일 수 없는 것임. 성공하지 못하면 성공했다고 가장할 것임. 정치적 팀 스포츠가 시작되는 시점임. 어느 한쪽을 너무 지지하면 실패를 객관적으로 볼 수 없게 됨. 증명의 책임은 권력을 가진 정부에 있음
     * Twitter를 열고 싶지 않다면, xcancel 링크를 사용하면 됨
          + https://xcancel.com/SollenbergerRC/status/1895609294810464390#m
     * Jordan Wick에 대한 추가 정보는 다음 링크에서 확인 가능함
          + https://therevolvingdoorproject.org/doge-agent-jordan-wick/
     * DOGE에서 누군가가 중요한 인프라에 대한 데이터를 수집하는 이유가 궁금함. 비록 공개된 데이터일지라도
     * 연방 근로자를 노조 상태에 따라 필터링할 가능성에 대해 우려하고 있음
     * 미국 연방 정부 직원이 공식 업무의 일환으로 만든 작품은 기밀 또는 제한된 정보가 아닌 한 공공 도메인에 속함
     * 사람들이 연방 근로자와 그들의 기관에 항상 이렇게 주의를 기울였으면 좋겠음
     * 스크린샷에서 잠재적으로 불법적인 것이 무엇인지 구체적으로 설명해 줄 수 있는 사람이 필요함
     * 몇 년 전 다국적 기업에서 일할 때, 한 주니어 개발자가 집에서 작업하기 위해 코드베이스를 가져갔음. 발견되자마자 모든 접근이 차단되고 회사 자산이 압수되었으며 보안 요원에 의해 건물 밖으로 호송되었음
     * 스크린샷 중 하나에서 HTML 테이블을 사용하고 있음
     * 미국 연방 정부의 무결성을 유지하고자 하는 관점에서 보면, DOGE 관련 모든 것(그리고 전체 트럼프주의 운동)은 사이버 보안의 적색 팀 역할을 하고 있음. 모호한 의도를 가진 사람들이 모든 것에 접근할 수 있게 됨
     * 미국인들이 정부의 무결성을 중요하게 생각한다면, 파란 팀이 필요함. 이러한 재앙 수준의 접근을 어떻게 처리할 것인지, 미래에 어떻게 보호할 것인지에 대한 계획이 필요함. 그러나 이러한 관점이 실행되고 있는 것을 보지 못하고 있음. 명백한 보안 타협이 허용되고 있으며, ""권력 분립""과 ""견제와 균형""에 의존하고 있음. 그러나 이러한 메커니즘이 실패하고 있음
     * 계획이 무엇인지, 반격은 어디에 있는지 궁금함. 시스템이 해킹되는 것을 보고 있으며, 복구 계획이나 예방 계획에 대해 이야기하는 사람을 아직 보지 못했음
"
"https://news.hada.io/topic?id=19537","주택 이론으로 보는 세상주택 이론으로 보는 세상 (2021)

     * 서구 사회에서 주택 부족은 단순히 집값을 높이는 문제를 넘어, 불평등, 저성장, 건강 문제, 출산율 저하, 비만, 기후 변화 등 다양한 사회적 문제를 악화시키는 요인으로 작용하고 있음.

주택 비용 상승의 명확한 영향

     * 주택은 사람들이 어디서 일하고, 여가를 보내며, 친구를 사귀고, 언제 몇 명의 자녀를 가질지, 그리고 건강 상태에까지 영향을 미치는 중요한 요소임.
     * 서구 사회 대부분에서 주택 가격이 지나치게 높으며, 이는 단순한 건축 비용이 아니라 수요 증가와 공급 제한이 결합된 결과임.
     * 경제 중심지가 되는 도시에서는 높은 임금이 주택 수요를 증가시키지만, 규제로 인해 공급이 따라가지 못하면서 가격이 계속 오름.
     * 뉴욕, 런던, 샌프란시스코 같은 도시는 지난 수십 년 동안 주택 가격이 700~2,000% 이상 상승하였으며, 건축 비용 대비 주택 가격의 괴리가 커지고 있음.
     * 반면, 텔레비전, 자동차, 냉장고 같은 다른 내구재들은 기술 발전과 경쟁으로 인해 가격이 낮아졌음.
     * 결과적으로, 과거에는 한 명의 중산층 소득자가 가족을 부양할 수 있었지만, 이제는 대부분의 가정에서 맞벌이를 해야만 괜찮은 집을 가질 수 있음.


비싼 주택의 숨겨진 영향

  생산성 저하

     * 높은 주택 비용은 사람들이 원하는 직업이 있는 곳으로 이동하는 것을 방해함.
     * 이로 인해 사람들이 덜 생산적인 지역에서 일을 하게 되며, 이는 전체 경제의 생산성을 저해함.
     * 높은 생산성을 가진 대도시의 기업들은 인력을 충분히 확보하기 어렵게 되며, 직원들이 자기 전문 분야가 아닌 일을 처리하게 됨.
     * 뉴욕, 샌프란시스코 같은 도시가 더 많은 주택을 공급할 수 있었다면, 미국 GDP가 8.9% 증가했을 것이라는 연구 결과도 있음.

  혁신 감소

     * 대부분의 혁신은 도시에 집중되며, 도시의 밀집도가 높을수록 아이디어 교류가 활발해짐.
     * 실리콘밸리는 유럽 전체보다 더 많은 유니콘 스타트업을 배출함.
     * 과거 런던, 암스테르담, 빈, 디트로이트 같은 도시들이 혁신 중심지가 되었던 것도 밀집된 환경에서 창의적인 교류가 이루어졌기 때문임.
     * 하지만 주택 부족으로 인해 창의적인 인재들이 이들 도시에서 살기 어려워지고, 이는 전체 혁신 속도를 늦추는 결과를 초래함.

  불평등 심화

     * 주택이 충분히 공급되지 않으면, 기존 주택 소유자들이 주택 가격 상승으로 부를 축적하게 됨.
     * 이는 토지를 보유한 사람과 그렇지 않은 사람 간의 자산 불평등을 심화시킴.
     * 영국, 미국 등에서 불평등이 심화된 주된 이유가 주택 가격 상승 때문이라는 연구도 있음.
     * 도심 지역이 부유층의 공간으로 변하면서 원주민들이 높은 임대료를 감당하지 못하고 외곽으로 밀려나는 젠트리피케이션이 발생함.

  지역 간 격차 확대

     * 과거에는 가난한 주에서 부유한 도시로 이주하면서 경제적 격차가 점점 줄어들었음.
     * 하지만 현재는 저임금 노동자들이 주택 비용 때문에 부유한 도시로 이주하지 못하고, 결국 가난한 지역에서 저임금 일자리 경쟁을 하면서 격차가 더욱 심화됨.
     * 1960년대에는 알라바마에서 뉴욕으로 이주하면 실질 소득이 70% 증가했지만, 현재는 높은 주택 비용 때문에 이주 후 실질 소득이 오히려 감소할 수도 있음.

  출산율 감소

     * 주택 가격이 비싸질수록 자녀를 양육하는 비용이 증가하고, 출산을 미루거나 포기하는 사람들이 많아짐.
     * 영국에서는 1996~2014년 사이 주택 가격 상승이 약 15만 7천 명의 출생 감소를 초래한 것으로 추정됨.
     * 특히 대도시에서 주택 비용 문제로 인해 젊은 층이 아이를 낳지 않거나 늦게 낳는 경향이 강해짐.

  비만 문제

     * 미국의 비만율은 1960년대 10%에서 현재 35%로 증가했음.
     * 일본은 미국보다 가계 소득이 높음에도 불구하고 비만율이 5% 미만임.
     * 이는 일본이 밀집된 도시 구조를 갖추고 있어 대중교통과 도보 이동이 활성화된 반면, 미국은 도시가 지나치게 넓고 자동차 중심 사회이기 때문임.
     * 일본 도쿄는 자동차 이용률이 12%에 불과하지만, 로스앤젤레스는 85%에 달함.
     * 뉴욕은 미국에서 가장 비만율이 낮은 도시이며, 맨해튼의 비만율은 미국 평균의 25% 수준임.
     * 주택 부족이 도시 밀도를 낮추고, 자동차 중심 사회를 조장하면서 비만 문제를 악화시키고 있음.

  기후 변화 악화

     * 밀도가 높은 도시는 자동차 의존도를 줄이고, 대중교통 이용률을 높이며, 에너지 효율적인 주거 형태를 가능하게 함.
     * 일본의 1인당 이산화탄소 배출량은 연간 10.3톤이지만, 미국은 17.6톤으로 74% 더 많음.
     * 자동차 사용에 따른 탄소 배출량은 일본이 1.63톤, 미국이 5.22톤으로 3배 이상 차이가 남.
     * 샌프란시스코와 같은 도시는 기후 친화적인 환경을 가지고 있음에도 불구하고 높은 주택 가격 때문에 사람들이 피닉스, 댈러스 같은 자동차 의존도가 높은 도시로 이동하면서 탄소 배출이 증가함.
     * 새로 건설되는 주택은 에너지 효율성이 높고, 아파트 단지는 단독 주택보다 난방 및 냉방 비용이 적게 들기 때문에 기후 변화 대응에도 유리함.


해결책과 결론

     * 주택 부족 문제는 단순한 경제 문제가 아니라, 혁신, 불평등, 건강, 환경 등 다양한 사회적 문제와 연결됨.
     * 기존 정책들은 주택 공급 확대보다 보존을 우선시하는 경향이 있었음.
     * 해결책 중 하나는 지역별 투표를 통해 높은 밀도의 주택 개발을 결정하는 방식으로, 거주자들이 직접 개발 여부를 선택하게 하면 반발을 줄일 수 있음.
     * 주택 공급 확대는 제로섬 게임이 아닌, 모두가 이득을 보는 방식으로 설계될 필요가 있음.
     * 적절한 해결책이 실행된다면, 주택 문제 해결을 통해 경제 성장, 더 나은 일자리, 높은 출산율, 건강한 삶, 그리고 환경 보호까지 실현할 수 있음.

        Hacker News 의견

     * 주택의 거시적 효과에 대해 논의함. Oak Park, IL에서 주택 활동가로 활동 중임
          + 주택 제한의 미시적/지역적 영향으로 소매업 침체가 발생함. 소매업은 유동 인구에 의존하지만, SFZ 주민들은 원하는 사업체를 지원하는 방법을 이해하지 못함
          + 공공 안전 문제 발생. 상업 지역이 밤이 되면 사람이 없어 범죄가 집중되는 경향이 있음
          + 재산세 상승 문제. 많은 사람들이 은퇴 후에도 같은 지역에 살고 싶어하지만, 주택 다양성이 부족해 경제적으로 합리적인 선택지가 없음
     * Henry George는 100년 전에 'Progress and Poverty'에서 토지세를 제안함. 이는 건물이 아닌 토지에 세금을 부과해 개발을 촉진하는 방법임
     * 주택 소유자들은 문제를 악화시키는 데 이해관계가 있음. 주택 구매자들은 문제가 악화될 것이라고 가정함. 비용을 불평하는 사람들은 주택을 구매하면 입장을 바꿈
     * 많은 젊은이들이 더 나은 교육을 위해 도시로 이동하지만, 경제가 침체된 환경에서 실업 상태에 빠지거나 막다른 직업에 종사하게 됨
          + 교육을 위해 도시로 이동한 후, 주택 비용이 저렴하고 경쟁이 덜한 시골이나 작은 도시로 돌아가는 것이 이득임
          + 일부 직업(의사, 심리학자 등)은 시골 지역에서 더 높은 급여를 받을 수 있음
     * 주택 부족의 해결책이 더 많은 주택을 짓는 것이라면, 이는 문제를 더 악화시킬 수 있음
          + 지역의 매력을 줄이는 접근 방식이 주택 부족을 완화할 수 있을지 궁금함
          + 예를 들어, 밀집 지역에 위치한 기업에 더 많은 세금을 부과하거나, 특정 지역의 모든 기업의 총 수익을 제한하는 방법이 있음
     * Derek Guy는 일본이 낮은 임대료와 높은 밀도로 인해 많은 장인들이 있는 이유를 설명함
     * 토지 부족이 아닌 효율적인 교통 수단의 부족이 문제임
          + 미국은 중국과 같은 규모의 국가와 비교해 현대적인 교통 인프라가 부족함
          + NIMBYism 문제는 외관에 영향을 미치지 않는 지하 고속철도를 건설함으로써 해결할 수 있음
     * 주택을 감당할 수 없는 것에 대한 가장 큰 불만은 높은 임대료로 인해 아이를 낳기 어려운 점임
     * 주택 비용은 중요하지 않음. 이는 단지 벽돌에 대한 돈의 교환임
          + 정부는 지역에 기여하는 경제적 가치를 기반으로 신용 등급을 평가할 수 있음
          + 공장 근처 주택에는 직원들이 거주하는 것이 이상적임. 10분 거리의 도보가 2시간 운전보다 경제적으로 선호됨
     * 자동차가 주택 밀도를 낮춘 근본적인 문제임
"
"https://news.hada.io/topic?id=19519","미국 국민에게 보내는 서신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             미국 국민에게 보내는 서신

18F: 우리는 미국 국민을 위해 헌신하며, 아직 끝나지 않았음

  미국 국민에게 보내는 편지

     * 11년 넘게 18F는 정부 기술을 개선하기 위해 노력해 온 비당파적 공무원 조직이었음
     * 수백 개의 프로젝트를 통해 정부 기술의 효율성과 효과를 높이고, 미국 납세자의 비용 절감을 도모해 왔음

  18F의 전격적인 해체

     * 그러나 2025년 3월 1일 자정(동부 표준시)을 기해, 18F의 모든 직원이 해고되었음
     * 트럼프 행정부의 GSA 기술 혁신 서비스(TTS) 국장인 토마스 쉐드는 2025년 2월 3일 TTS 및 18F와의 회의에서 18F를 ""시빅 테크놀로지의 금본위(gold standard)""라고 칭찬하며, 팀의 기술과 지식을 높이 평가했음
     * 그럼에도 불구하고, 3월 1일 자정에 18F 전 직원은 우리의 직책이 ""GSA의 인력 감축(RIF) 단계에서 비핵심으로 식별되었다""는 통보를 받았음
     * 이 결정은 행정부와 GSA의 최고 지도부의 명시적인 지시에 따른 것이라고 쉐드는 이메일에서 밝혔음

  갑작스러운 업무 중단과 그 영향

     * 이 통보는 18F 직원과 협력 기관 모두에게 큰 충격이었음
     * 전날까지도 NOAA와 함께 기상 데이터 접근성 향상, 국무부와 함께 여권 발급 절차 개선, IRS와 함께 무료 세금 신고 지원 등 연방 및 주 기관과의 중요한 프로젝트를 진행 중이었음
     * 그러나 이러한 모든 작업이 갑작스럽게 중단되었으며, 전 직원이 행정 휴가에 들어가 컴퓨터 접근이 차단되어 업무의 질서 있는 전환을 도울 수 없게 되었음
     * 개인 고용 데이터에 접근할 수 없으며, 장비 반납 절차에 대한 안내도 받지 못한 상태임

  18F 해체의 배경과 우려

     * 18F의 해체는 원래의 미국 디지털 서비스(US Digital Service)의 약화에 이은 것으로, 미국의 IT 인프라를 지원하는 핵심 팀에 대한 일련의 대대적인 감축의 최신 사례임
     * 이번 인력 감축 이전에 DOGE(Digital Operations and Government Efficiency) 회원과 GSA 정치 임명자들은 보안 예방 조치를 무시하고 민감한 정보를 보유한 IT 시스템에 대한 접근을 요구하고 획득하였음
     * 이러한 의심스러운 행동에 반발한 일부는 접근 권한 부여를 거부하며 사임하였고, 다른 일부는 업무 커뮤니케이션 채널에서 제외되는 등의 보복을 당하였음

  우리의 다짐

     * 우리는 아직 일어난 일을 완전히 받아들이지 못하고 있으며, 이것이 우리와 우리의 가족, 그리고 파트너와 미국 국민에게 어떤 영향을 미칠지 고민하고 있음
     * 그러나 우리는 정부를 개선하기 위해 이곳에 왔으며, 우리의 일은 아직 끝나지 않았음
     * 앞으로 더 많은 소식을 전할 예정

        Hacker News 의견

     * 18F의 예산 삭감이 목표와 맞지 않음에 대한 우려가 있음
          + 18F는 다른 조직에 컨설팅 서비스를 제공하여 비용을 회수하는 방식으로 운영되었음
          + USPS의 주 1회 배송 제안은 현실과 동떨어진 의견으로 보임
          + USPS는 연간 1000억 개 이상의 소포를 배송함
          + 정부 운영자와 그들의 조언자 간의 괴리가 두려움을 줌
     * 예산관리국의 Russell Vought가 정부 직원에 대해 언급한 내용
          + 관료들이 출근하기 싫어하도록 만들고 싶다는 발언이 있었음
          + 18F는 이러한 관료들 중 하나로 간주됨
     * 18F의 영향력에 대한 인식
          + 18F의 작업을 통해 많은 긍정적인 영향을 보았음
          + 여러 해커 뉴스 회원들이 18F에서 일한 경험이 있음
          + 그들의 노고에 감사함
     * 정보 기술을 통한 정부의 투명성과 효율성 향상에 대한 중요성
          + 18F의 폐지가 실망스러움
          + 신뢰가 낮은 시기에 정부의 역할이 중요함
          + 시민 사회가 단기적으로 공백을 메우길 바람
     * 정부 기능을 방해하려는 의도가 있다는 의견
     * 18F가 진행한 프로젝트의 중요성
          + NOAA와의 협력으로 기상 데이터 접근성 향상
          + 국무부와의 협력으로 여권 발급 절차 간소화
          + IRS와의 협력으로 무료 세금 신고 지원
     * 18F의 오픈 소스 기여
          + 여러 가이드와 리소스, 표준을 공개함
          + US 웹 디자인 가이드라인 작업도 포함됨
          + login.gov 소유 여부에 대한 언급
     * 18F와 TTS의 긍정적인 역할
          + 최근 몇 십 년간 정부에서 중요한 역할을 했음
          + 18F와 USDS의 서비스에 감사함
          + 여러 사람들이 18F와 USDS의 저장소를 클론 중임
     * 18F와 USDS의 GitHub 저장소 정보
          + USDS: 4.2GB, 54개의 저장소
          + 18F: 37GB, 1,213개의 저장소
          + 최근 커밋 날짜와 주요 기여자 정보 제공
     * 인근 주에서 18F 인력을 채용할 기회
          + 정부 급여에 맞춰 일할 준비가 된 IT 팀을 얻을 수 있는 기회로 봄
"
"https://news.hada.io/topic?id=19489","DeepSeek, 3FS 파일시스템 과 Smallpond 데이터 처리 프레임워크 오픈소스 공개 (5 of 5)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     DeepSeek, 3FS 파일시스템 과 Smallpond 데이터 처리 프레임워크 오픈소스 공개 (5 of 5)

     * Fire-Flyer File System(3FS)는 AI 학습 및 추론 워크로드를 처리하기 위해 설계된 고성능 분산 파일 시스템
     * 최신 SSD 및 RDMA 네트워크를 활용하여 공유 스토리지 계층을 제공하고, 분산 애플리케이션 개발을 단순화함

주요 특징 및 장점

     * 성능 및 사용성
          + 분리형 아키텍처: 수천 개의 SSD 및 수백 개의 스토리지 노드 네트워크 대역폭을 결합하여 지역성에 관계없이 스토리지 리소스에 접근 가능
          + 강력한 일관성 보장: Chain Replication with Apportioned Queries(CRAQ)를 사용하여 일관성을 유지하여, 애플리케이션 코드를 단순화함
          + 파일 인터페이스 지원: FoundationDB 기반의 트랜잭션 키-값 저장소를 활용한 상태 없는 메타데이터 서비스 제공. 기존 파일 인터페이스를 사용하므로 새로운 스토리지 API 학습 불필요
     * 다양한 워크로드 지원
          + 데이터 준비: 데이터 분석 파이프라인의 출력을 계층형 디렉터리 구조로 정리하고, 대량의 중간 출력을 효율적으로 관리
          + 데이터 로더 최적화: 데이터셋을 사전 로드하거나 섞을 필요 없이, 여러 컴퓨트 노드에서 학습 샘플에 랜덤 접근 가능
          + 체크포인트 저장: 대규모 학습을 위한 고속 병렬 체크포인트 저장 지원
          + KVCache 기반 추론 최적화: DRAM 기반 캐싱보다 비용 효율적이며 높은 처리량과 대용량 저장 가능

성능 테스트

     * 최대 처리량 테스트
          + 180개의 스토리지 노드(각각 2×200Gbps InfiniBand NIC 및 16개 14TiB NVMe SSD 장착)
          + 500개 이상의 클라이언트 노드(각각 1×200Gbps InfiniBand NIC 장착)
          + AI 학습 작업과 병렬로 실행한 읽기 부하 테스트에서 총 6.6TiB/s의 처리량 기록
     * GraySort 벤치마크 테스트
          + 25개 스토리지 노드(각 노드당 2개 NUMA 도메인, 2×400Gbps NIC)
          + 50개 컴퓨트 노드(192개 물리 코어, 2.2TiB RAM, 1×200Gbps NIC)
          + 110.5TiB 데이터(8,192개 파티션)를 30분 14초 만에 정렬, 평균 처리량 3.66TiB/min 달성
     * KVCache 성능 테스트
          + 대규모 언어 모델(LLM) 추론 과정에서 키-값 벡터 캐싱을 통해 불필요한 연산 최소화
          + 피크 읽기 처리량 40GiB/s 기록
          + Garbage Collection(GC) 실행 중 삭제 작업(IOPS) 성능 분석 포함

SmallPond - DuckDB와 3FS위에 구축된 경량 데이터 프로세싱 프레임워크

     * 고성능 데이터 처리, 대규모 확장성, 간단한 운영이 특징
          + 고성능 데이터 처리: DuckDB를 활용하여 빠른 데이터 처리
          + 대규모 데이터셋 지원: 페타바이트(PB) 규모 데이터 처리 가능
          + 운영 간편성: 장기 실행 서비스 없이 손쉽게 사용

DeepSeek Open Infra 로 공개되는 5개 오픈소스 중 5번째 임
"
"https://news.hada.io/topic?id=19472","Page Assist - 로컬 AI 모델로 웹브라우징 도와주기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Page Assist - 로컬 AI 모델로 웹브라우징 도와주기

     * 로컬 AI 모델을 위한 사이드바와 웹 UI를 제공하는 오픈소스 브라우저 확장
     * 모든 웹 페이지에서 모델과 상호 작용 가능해짐(웹 페이지에 대해 질문 가능 )
     * 크로미움 기반 브라우저(크롬, Brave, Edge) 및 Firefox 지원
     * 사이드 바 : 모든 웹페이지에서 브라우저에 열리고 모델과 인터랙션하면서 결과보기 가능
     * Web UI : ChatGPT 웹사이트와 비슷하게 로컬 모델과 인터랙션 가능
"
"https://news.hada.io/topic?id=19555","MIT 6.S184: 플로우 매칭 및 디퓨전 모델 입문플로우 매칭 및 디퓨전 모델 입문

흐름 매칭 및 확산 모델 소개

     * MIT의 컴퓨터 과학 수업 6.S184는 확률 미분 방정식을 활용한 생성 AI에 대한 강의임.
     * 확산 및 흐름 기반 모델은 이미지, 비디오, 음악 등 다양한 데이터 모달리티에서 생성 AI의 최첨단 기술로 자리잡고 있음.
     * 이 강의는 이러한 모델의 수학적 기초를 처음부터 구축하는 것을 목표로 하며, 학생들은 수업이 끝날 때 장난감 이미지 확산 모델을 직접 구축하게 됨.
     * 이 과정은 생성 AI의 이론과 실습을 원칙적으로 이해하고자 하는 학생들에게 이상적임.

강의 노트

     * 강의 노트는 수업의 중심을 이루며, 모든 자료에 대한 독립적인 설명을 제공함.
     * 강의 슬라이드는 시각적 보조 자료로 제공되며, 독립적인 자료는 아님.

강의

     * 1강: 흐름 및 확산 모델
          + 생성 모델 소개
          + 일반 및 확률 미분 방정식
          + 흐름 및 확산 모델에서 샘플링
     * 2강: 훈련 목표 구축
          + 조건부 및 주변 확률 경로
          + 연속성 및 포커-플랑크 방정식
          + 주변 벡터 필드 및 주변 점수 함수
     * 3강: 흐름 및 확산 모델 훈련
          + 흐름 매칭
          + 점수 매칭
          + 다양한 확산 모델 접근법
     * 4강: 이미지 생성기 구축
          + 가이드 및 조건부 생성
          + 신경망 아키텍처
          + 최첨단 모델 조사
     * 5강: 생성 로봇공학
          + Benjamin Burchfiel의 게스트 강의
          + 대규모 행동 모델
          + 로봇공학을 위한 확산 모델
     * 6강: 생성 단백질 설계
          + Jason Yim의 게스트 강의
          + AI를 통한 새로운 단백질 설계
          + 단백질 구조 생성을 위한 흐름 매칭

실습

     * 수업과 함께 제공되는 3개의 실습이 있으며, 단계별로 흐름 매칭 및 확산 모델을 구축하는 실습을 제공함.
     * 실습은 Google Colab에서 열어 진행할 수 있음.

강사

     * Peter와 Ezra가 공동 강의하며, Tommi Jaakkola가 후원자 및 자문 역할을 맡고 있음.
     * Peter Holderrieth는 박사 과정 학생이며, Ezra Erives는 공학 석사 과정 학생임.

사전 요구 사항

     * 선형 대수, 실해석, 기본 확률 이론이 필요하며, Python과 PyTorch에 대한 경험이 있어야 함.

주의 사항

     * 이 강의는 대규모 언어 모델(LLM)을 다루지 않음. LLM은 텍스트와 같은 이산 데이터를 포함하지만, 이 강의는 이미지, 비디오, 단백질 구조와 같은 연속 공간의 데이터를 중심으로 함.

감사의 말

     * 이 강의는 여러 개인 및 조직의 지원 없이는 불가능했음.
     * Tommi Jaakkola 교수, MIT EECS의 Lisa Bella, Ellen Reid, 그리고 많은 사람들에게 감사의 뜻을 전함.

        Hacker News 의견

     * MIT 수업 ""6.S184: Introduction to Flow Matching and Diffusion Models""가 YouTube에 공개됨
          + 이미지, 비디오, 단백질 등 생성 AI 알고리즘과 이를 이해하기 위한 수학적 도구를 가르침
          + 흐름과 확산 모델은 수학적으로 까다로운 주제이므로 많은 강의가 높은 수준의 직관만 가르침
          + 이 강의는 수학적으로 엄밀하고 독립적인 소개를 제공하며 AI 초보자를 대상으로 함
          + 강의가 마음에 들기를 바람
     * 조건부 정규화 흐름은 역설계 문제에 대한 가장 아름다운 해결책 중 하나임
          + 데이터가 있다면 이를 훈련시킬 수 있음
          + 기본 분포를 비젹티브 함수로 변형하여 올바른 위치로 이동시키는 개념이 매우 우아함
          + 연속적이고 범주적인 목표를 동시에 다루는 데 어려움이 있었음
          + 정말 멋진 방법임
     * 지난 10년은 딥러닝 교육의 황금기였음
          + 고품질 학습 콘텐츠를 무료로 제공하려는 경쟁이 흥미로움
     * 멋진 강의임, 빨리 수강하고 싶음
          + 이 강의는 연속 공간에 집중되어 있지만, 이산 확산에서도 많은 흥미로운 일이 일어남
          + 후속 강의 계획이 있는지 궁금함
          + 강사 Peter가 이산 확산에 관한 논문을 발표했음을 알게 됨
     * 최신 AI 기술에 대한 모든 공개 강좌를 모은 컬렉션이 있는지 궁금함
     * MIT OCW와 그 협력자들에게 매우 감사함
          + 이를 보조 자료로 사용하며 같은 주제를 두 가지 다른 방식으로 배우는 것이 매우 유익함
          + 특히 이해하기 어려운 주제에 도움이 됨
     * 이 기술이 매우 유용함에도 불구하고 LLMs가 많은 주의를 분산시킨 것 같음
     * MIT가 시의적절하고 관련성 있는 콘텐츠를 무료로 제공하는 것이 훌륭함
     * 정말 감사함, 현대 AI에 관한 다른 OCW 강좌가 있는지 궁금함
     * 잘했음, 축하함
"
"https://news.hada.io/topic?id=19465","유안타증권 AI Agent 프로젝트: 실전 LLM 서비스 개발(고생)기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                유안타증권 AI Agent 프로젝트: 실전 LLM 서비스 개발(고생)기

   1.서두: 2025년 AI 업계의 화두는 ‘Agent’이며, 기존 RAG 중심 챗봇 접근 방식에서 벗어나 보다 고도화된 시스템이 필요함을 강조.

   2.프로젝트 소개 (유안타 AI 챗봇 서비스): 금융 보안 요건 등 높은 진입 장벽을 극복하고 AI 기반 투자 분석 기능을 포함한 챗봇을 개발, 혁신 금융 서비스로 선정됨.

   3.요구사항 도출 및 의도 분류 활용: 사용자 실제 질의 데이터를 분석하여 서비스 요구사항을 조정, Function Calling을 기반으로 LLM의 지속적 개선을 위한 모니터링 체계 구축.

   4.Function Calling 기법: RAG의 한계를 보완하여 실시간 데이터를 처리하는 방식으로 Function Calling을 활용했으나, 다중 기능 연동 및 정확한 호출에 대한 어려움을 극복해야 했음.

   5.프롬프트 엔지니어링과 운영 관점: 프롬프트 설계와 버전 관리를 통해 LLM 성능을 최적화하고, 비용 절감 및 보안 강화를 위한 운영 전략이 필수적임을 강조.

   Show GN에 맞지 않아 이동하였습니다.
   Show 사용방법 을 참고해서 올려주세요.
"
"https://news.hada.io/topic?id=19577","Apple, M3칩 탑재 iPad Air 및 신규 Magic Keyboard 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Apple, M3칩 탑재 iPad Air 및 신규 Magic Keyboard 공개

     * M3 (8코어 CPU, 9코어 GPU) 칩을 탑재한 11 / 13 두가지 사이즈 모델
     * M1 대비 최대 60% 빠른 16코어 Neural Engine으로 AI 성능 향상
     * Apple Pencil Pro 및 Apple Pencil(USB-C)과 호환
     * 블루, 퍼플, 스타라이트, 스페이스 그레이

새로운 Magic Keyboard

     * 14개 키로 구성된 기능 키 열과 더 커진 트랙패드를 통해 사용성이 향상됨
     * 자석 방식으로 부착되며, Smart Connector를 통해 전력과 데이터를 바로 연결함
     * 기계 가공 알루미늄 소재의 힌지에는 충전을 위한 USB-C 커넥터가 포함되어 있음
     * 화이트 색상으로 제공되며, 11 모델용은 419,000원, 13 모델용은 449,000원부터 시작함

가격 및 출시 정보

     * iPad Air 11 모델은 949,000원부터, 13 모델은 1,249,000원부터 시작함
     * M3 탑재 iPad Air와 Magic Keyboard는 일부 국가 및 지역에서 오늘부터 사전 주문 가능하며, 3월 12일 수요일에 정식 출시

A16 탑재 iPad도 공개

   60hz ㅠㅠ

   와 M3와 A16.. 애플도 급 나누기 고민 많네요
"
"https://news.hada.io/topic?id=19461","AI 시대에도 블로깅은 여전히 가치가 있습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AI 시대에도 블로깅은 여전히 가치가 있습니다

     * 사람들이 모두 ChatGPT, Claude, DeepSeek를 사용하고, AI가 답변을 떠먹여 준다면 블로깅의 의미가 무엇일까? AI 외에 누가 당신이 쓴 글을 읽을까?

     ""블로깅은 그저 읽히는 것이 아니라 배우고 생각하는 것이며, 둘 다 할 수 있다는 것을 오래도록 증명하는 것""
     * 배운 것을 블로그에 올리는 두 가지 큰 이유
          + 새롭게 배운 지식을 구체화하는데 도움이 됨
          + 그러면 나중에 다른 사람에게도 도움이 됨
     * 다른 사람이나 LLM이 읽든 말든 글을 쓰면 더 잘 배울수 있음
     * 물론 두번째 사례에서 AI가 기존 글을 찾아서 종합해 답을 내놓으니, 직접 블로그에 방문하여 읽는 사람은 적어질 수 있음
          + 향후 AI 모델 재학습으로 원문 출처가 언급되지 않을 가능성도 있음
     * 하지만 “다른 사람들에게 문제 해결 방법을 알리는 것” 외에도 여러 이유로 블로깅은 가치가 있음
          + 이름 알리기
               o 블로그만으로 유명해지기는 어려움
               o 유명 블로거 대부분은 이미 다른 업적(오픈소스 프로젝트, 기업 창업, 저명 강연 등)으로 인정받은 이들임
               o 오직 블로그만으로 개인 브랜드를 구축하고, 인생 역전하거나 이름을 널리 알리는 것은 현실적으로 쉽지 않음
          + 도파민 히트(다른 사람들의 반응)
               o 글에 대한 댓글이나 긍정적인 반응은 큰 보람이 됨
               o 가끔 Hacker News처럼 예상치 못한 폭발적 관심을 받을 때 강한 만족감이 옴
               o 하지만 대부분의 경우 반응이 없고, 이는 예전부터 그랬음
               o 독자가 글을 읽고 도움을 받았다면 “잘 읽었다”는 간단한 댓글만으로도 큰 힘이 되니, 감사 인사를 남겨주는 문화가 형성되면 좋겠음
          + 커리어 관점에서의 글 모음(포트폴리오) 구축
               o 글을 쌓아두면, 면접이나 프로젝트 등에서 자신의 생각과 지식을 체계적으로 보여줄 수 있음
               o GitHub 프로필이 코딩 능력을 나타낸다면, 블로그는 사고력과 지식 공유 능력을 드러내는 도구임
               o 작성한 글이 쌓이면 전문성을 어필할 수 있는 포트폴리오가 됨

맺음말

     * 블로깅은 학습 과정 정리, 다른 사람의 문제 해결 지원, 가끔 얻는 반응의 즐거움, 그리고 전문성을 보여줄 수 있는 기록을 남기는 데 의미가 있음
     * AI가 결과를 종합해 보여주는 시대에도, 블로그에 글을 쓰는 행위는 여전히 가치가 높음
     * 설령 미래에 AI가 모든 것을 대체한다 해도, 블로그에 남긴 생각들은 AI의 학습 데이터로 남아 어느 형태로든 이어질 것이라는 점에서 의미가 있음

     * “블로깅은 단순히 독자를 얻는 것만이 아니라, 배우고 생각을 정리하는 과정이며 이를 증명할 수 있는 흔적을 남기는 행위임”

        Hacker News 의견

     * Hacker News의 다른 사용자들이 어떻게 활동하는지 정말 흥미로움. 네트워킹, 자기 마케팅, 블로그를 통한 이력서 작성 등 다양한 활동이 있음. 나는 그냥 가끔 블로그 글을 쓰는 직장인임. AI는 내가 계속 글을 쓸지 말지 결정하는 데 큰 영향을 주지 않음
     * 글쓰기와 그림 그리기는 사고의 과정임. 명확하게 생각하고 새로운 아이디어를 떠올리며, 진정으로 이해하기 위해서는 스스로 빈 페이지에 표시를 해야 함. 리처드 파인만이 브라질에서 가르쳤던 대부분의 학생들처럼 교사나 교과서가 말하는 것을 반복하는 것만으로는 부족함
     * 대형 언어 모델(LLM)과 AI는 우리가 더 멀리, 더 빠르게 나아가도록 도와주는 유용한 도구임. 때로는 대화 중에 너무 많은 마법 버섯을 먹은 것 같은 재치 있고, 능숙하며, 지적인 친구 같음
     * 우리의 주체성과 개성을 잊는 것은 우리에게 해롭고, 사회에 위험함
     * 샬럿 브론테의 제인 에어에서 ""나는 새가 아니며, 그 어떤 그물도 나를 가두지 못함. 나는 독립적인 의지를 가진 자유로운 인간임""이라는 구절이 있음
     * 프리모 레비의 ""이것이 인간인가""에서 ""괴물은 존재하지만, 그 수가 너무 적어 진정으로 위험하지 않음. 더 위험한 것은 질문 없이 믿고 행동할 준비가 된 평범한 사람들임""이라는 구절이 있음
     * 동물처럼 자유롭게 창조하고 싶다면, 스스로 질문을 하고, 글을 쓰고, 그림을 그려야 함. 다른 사람들이 말하는 것을 맹목적으로 믿기보다는 스스로 보고, 발견해야 함
     * 유용한 책 두 권: 베티 에드워즈의 ""Drawing on the Right Side of the Brain""과 프랭크 R. 윌슨의 ""The Hand - How Its Use Shapes the Brain, Language, and Human Culture""
     * 당신이 관심 있는 주제에 대해 글을 쓰면서 포트폴리오를 쌓고 있음. 이 이유가 나에게 크게 와 닿음
     * 글을 쓰면서 이해를 깊게 하기도 함. 글쓰기는 사고의 과정임
     * 나는 3년 동안 매일 블로그에 글을 쓰고 있으며, 내가 진정으로 관심 있는 것이 무엇인지 알아내고 패턴을 보는 것이 매우 보람 있었음
     * 스케이트보더들이 소셜 미디어 이전에 비디오 카메라를 들고 다니며 순간을 포착하는 것처럼 생각하는 것을 좋아함
     * 블로그를 더 많이 쓰지 않는 이유는 시간이 너무 오래 걸리기 때문임. 유용한 블로그 글을 20분 만에 쓸 수 있을지도 모르지만, 나에게는 4~8시간이 걸림
     * 웹 기술을 주로 다루기 때문에 샘플이 실제로 작동하도록 만들어야 하고, 다이어그램도 필요함. 교정을 해야 하는데, 한 번에 제대로 하는 것이 어려움
     * 글을 쓰고 샘플을 추가하고, 이미지를 추가하면서 여러 번 교정해야 함
     * 글쓰기를 좋아함. LLM 시대가 이를 더 좋게 만듦. Claude를 사용하여 블로그와 인터페이스하는 작은 MCP 서버를 작성했으며, 내가 쓴 글에서 생각을 찾는 데 매우 유용함
     * LLM은 글쓰기 과정을 개선함. 인용할 때 웹사이트를 스크린샷하고 ChatGPT에 인용문을 작성하도록 요청할 수 있음
     * 블로깅은 내가 그렇지 않았을 것들을 탐구하도록 밀어붙임. 지난 5년 동안 일관되게 블로깅을 지속한 주요 이유임
     * 주목받는 것이 목표가 아니었기 때문에 LLM의 등장은 나에게 큰 영향을 주지 않음
     * 시간이 지나면서 독자가 늘어났고, 이제는 월 3만 명의 독자가 있음. 이해하지 못했던 주제에 대해 글을 썼다가 사람들이 수정해 주면서 많은 것을 배움
     * 사람들이 LLM에 이해를 맡기면서, 주제를 깊이 이해할 수 있는 능력이 점점 더 돋보이게 될 것이라고 생각함
     * 기술 주제에 대해 글을 쓸 때, 새로운 마크다운 문서를 열고 시작함. 자신의 이해 한계에 빠르게 도달하는 것이 가치 있는 연습임
     * 프로젝트의 역사를 기록하기 위해 블로깅을 시작했음. 예를 들어 Microsoft Band와 HBO Max의 출시 역사 등. 그러나 가장 성공적인 글은 SSR 사용을 경고하는 논란이 된 글이었음
     * 역사 기록이 중요하다고 믿기 때문에 주목할 만한 사건을 계속 기록할 것임
     * 블로깅의 더 중요한 이유는 생각을 정리하고, 빈틈을 채우고, 자신의 주장을 명확히 하기 위함임
     * ""글쓰기는 이해임""이라는 말을 좋아함
     * ""다시는 창의적인 것을 출판하지 않겠다, AI 훈련에 사용될 뿐이다""라는 말을 듣는 것이 매우 우울함
     * 세상에 가치를 더하지 않으려는 변명처럼 느껴짐

   Ai의 훈련에 사용되면 안되나? 싶어서, robots.txt에 걍 * 넣고 사는데요. 그게 싫은 분도 있으실테니... 민감한 얘기네요.
"
"https://news.hada.io/topic?id=19546","Postgres를 Graph DB로 사용하기: PgRouting을 Ab(using) - 활용 혹은 남용?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Postgres를 Graph DB로 사용하기: PgRouting을 Ab(using) - 활용 혹은 남용?

     * pgRouting은 Postgres의 확장으로, 지리정보 시스템(GIS)에서 두 지점 간의 최단 경로를 찾는 데 주로 사용됨
     * 그러나 pgRouting은 지리공간 데이터 외에도 다양한 그래프 구조의 데이터를 처리하는 데 활용될 수 있음
     * Apache AGE나 Neo4j와 같은 전문 그래프 데이터베이스의 경량 대안으로 사용 가능함

pgRouting 소개

     * pgRouting은 PostGIS의 확장 기능으로, 지리공간 라우팅 기능을 제공함
     * 이를 통해 최단 경로 계산, 네트워크 분석, 복잡한 라우팅 문제 해결 등이 가능함
     * 주로 두 위치 간의 최단 경로를 찾는 등 GIS에서 활용됨

그래프와의 연계

     * pgRouting의 강점은 그래프로 구조화된 모든 데이터와 함께 작업할 수 있다는 점임
     * 그래프는 상호 연결된 지점들의 네트워크로 구성되며, 여기서:
          + 노드는 개체를 나타냄
          + 엣지는 노드 간의 관계나 경로를 나타냄
     * 지도나 GIS에서는 노드와 엣지가 각각 교차로와 도로를 의미하지만, 소셜 네트워크와 같은 추상 시스템에도 적용 가능함

GIS 외의 pgRouting 활용 사례

     * 작업 스케줄링
          + 프로젝트에서 작업 간에는 의존성이 존재하며, 이는 **유향 비순환 그래프(DAG)**를 형성함
               o 노드는 작업을 나타냄
               o 엣지는 의존성을 나타냄
          + 프로젝트 관리의 주요 과제 중 하나는 전체 프로젝트 기간을 결정하는 '주요 경로(critical path)'를 찾는 것임
          + pgRouting을 사용하여 작업의 의존성을 모델링하고, 그래프 알고리즘을 통해 주요 경로를 찾을 수 있음
     * 리소스 할당 기반의 리버스 프록시 라우팅
          + 분산 시스템에서는 네트워크의 노드 간 리소스를 효율적으로 할당하는 것이 중요함
          + 각 노드는 물리적 위치나 컴퓨팅 프로세스를 나타내며, 엣지는 노드 간의 데이터 이동 경로를 나타냄
          + 예를 들어, 클라우드 인프라에서 pgRouting을 사용하여 분산 서버 간의 데이터나 컴퓨팅 작업을 가장 효율적인 경로로 라우팅할 수 있음
     * YouTube와 같은 추천 엔진
          + 추천 엔진이나 지식 그래프를 사용하는 검색 알고리즘에서 pgRouting을 활용하여 엔터티와 이벤트 간의 관계를 구축할 수 있음
          + 예를 들어, YouTube의 추천 알고리즘에서는:
               o 노드는 사용자, 비디오, 카테고리 등의 엔터티를 나타냄
               o 엣지는 사용자와 비디오 간의 상호작용이나 비디오 간의 카테고리 공유 등의 관계를 나타냄
          + 이러한 그래프 구조를 통해 사용자에게 맞춤형 추천을 제공할 수 있음

pgRouting의 추가 정보

     * pgRouting은 Postgres의 강력한 확장 기능으로, 다양한 그래프 기반 문제를 해결하는 데 사용될 수 있음
     * 자세한 내용은 pgRouting 공식 문서에서 확인 가능

   apache age 나 pgRouting 실제 도입해보신 분 계실까요?
   회사에서 그래프DB 도입중인데 기존에 RDB를 postgres로 사용하고 있긴 하나
   plugin/extension은 postgres를 '마치 그래프DB 처럼' 쓸 수는 있으나 실제로 퍼포먼스는 안나온다고 하여 neo4j로 고민중이었는데, 해커뉴스 의견은 또 neo4j에 불만이 많은가보군요

        Hacker News 의견

     * 다섯 해 전, Graph 데이터베이스와 라이브러리에 실망하여 NetworkX와 유사한 Python 인터페이스 뒤에 여러 비-Graph DBMS를 배치하려고 했음
          + Neo4J는 모든 그래프에서 충돌했으며, SQLite와 Postgres가 네트워크 처리 작업에 더 적합한 옵션이었음
          + Postgres 호환성이 증가하면서 프로젝트를 새로 고칠 가치가 있는지 궁금함
          + MemGraph와 같은 더 많은 Graph DB가 CYPHER와 호환되어 Neo4J보다 더 잘 작동할 가능성이 있음
          + pgrouting이 AI/에이전트를 위한 메모리 레이어를 구축하는 데 좋은 도구인지 알아보는 것이 목표였음
          + 초기 결과는 유망하며, 곧 다른 기사를 통해 후속 조치를 취할 예정임
          + SuiteSparse를 기반으로 하는 onesparse와 같은 흥미로운 확장 기능이 있음
     * Supabase는 PostGIS와 관련된 훌륭한 콘텐츠를 지속적으로 제공함
          + 타일을 직접 제공하거나 PG 지리적 컨텍스트에서 기능을 (남용)하는 것과 관련된 내용이 있음
          + 혁신적이거나 복잡하지 않지만 재미있고 정신적으로 자극적임
          + 데이터베이스와 작업하는 것에 대한 흥미를 자극하는 콘텐츠를 자주 게시하는 것을 칭찬함
     * ""그래프를 위한 SQLite""가 없는 이유가 항상 궁금했음
          + 디스크 기반 저장소와의 인프로세스 솔루션을 방해하는 저장 방식이 있는지 궁금함
     * 간단한 Postgres 그래프 DB 프로젝트를 작업 중임
          + 쿼리와 테이블 구조가 동일한 작업에 대해 훨씬 간단함
     * roaring 비트맵을 bytea postgres 열에 저장하여 인접 행렬을 표현하는 것에 대한 생각을 듣고 싶음
          + RDS가 plrust와 PostgreSQL의 SPI를 지원하므로 croaring-rs를 사용하여 구축할 수 있을 것 같음
          + 많은 그래프를 표현할 수 있으며, 각 그래프는 테넌트(회사/B2B SaaS 사용 사례)에 할당됨
          + plrust를 사용하여 roaring 비트맵을 DB 서버의 bytea에 저장하고 SPI를 사용하여 네트워크 오버헤드를 최소화할 수 있음
          + PostgreSQL은 트랜잭션 안전성을 제공하며, 테넌트 ID 열과 관계 메타데이터를 쿼리하는 JSONB 등 다른 열 기반 데이터에 대한 지원도 제공함
          + 많은 테넌트 그래프를 지원해야 하며, citus를 이미 사용하고 있어 대규모로도 가능할 것 같음
          + 관계를 더 잘 인덱싱하기 위해 일부 연산자 클래스를 만들어야 할 것 같음
          + pg_roaringbitmap을 알고 있지만 int64를 사용하고 RDS에서 시작하는 것을 선호함
          + Neo4J를 사용하지 않고 PostgreSQL을 깊이 사용하고 있음 (~20+ TB 테이블 작업 등)
          + 블로그 게시물 작성자에게 큰 감사를 전함
          + pgRouting을 그래프 DB로 사용할 수 있을 것 같아 테스트 목록에 추가함
     * ""Apache AGE""에 대한 의견이 있는지 궁금함
          + Apache AGE™는 그래프 데이터베이스 기능을 제공하는 PostgreSQL임
     * 데이터 모델만 보고 (예: 쿼리 언어가 아닌) ""그래프"" 데이터베이스와 ""일반 SQL"" 데이터베이스 간에 실제 차이가 있는지 궁금함
     * PgRouting을 사용하여 등시선 생성 경험이 있는지 궁금함
          + 걷기, 자전거 타기 등을 위한 등시선 지도를 생성하는 사용 사례가 있음
          + 가능하다면 Postgres만 사용하고 Valhalla, OpenTripPlanner, OpenRouteService와 같은 다른 인프라를 피하고 싶음
     * Postgres는 항상 새로운 데이터 모델링 기회를 열어주는 확장을 제공함
          + CedarDB (Postgres 호환) 그래프 기능과 비교하여 어떻게 쌓이는지 궁금함
"
"https://news.hada.io/topic?id=19532","마크 큐반, 전 18F 직원들에 자금 지원 제안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       마크 큐반, 전 18F 직원들에 자금 지원 제안

     * 정부 기술 부서 자금 지원 제안
          + 억만장자 투자자 마크 큐반이 정부 기술 부서의 해고된 연방 근로자들을 지원하기 위해 소셜 네트워크 Bluesky에서 메시지를 전파함.
          + 큐반은 해고된 엔지니어와 디자이너들에게 컨설팅 회사를 시작할 것을 권장하며, 자신이 투자하거나 도움을 줄 수 있다고 언급함.
     * 18F 기술 부서 해체
          + 정부의 일반 서비스 관리국(GSA)이 18F 기술 부서를 갑작스럽게 해체함.
          + 이 부서는 다른 정부 기관들이 기술 제품을 구축, 구매, 공유할 수 있도록 지원하는 역할을 맡았음.
          + 해고는 트럼프 행정부의 지시에 따라 연방 인력을 축소하고 지출을 줄이기 위한 조치로 이루어짐.
     * 새로운 기회
          + 큐반의 제안은 해고된 근로자들이 정부 기술을 새롭게 재구성할 수 있는 가능성을 제시함.
          + 정부의 해고된 전직 직원들이 스타트업을 설립하여 정부에 다시 전문 지식을 판매할 수 있는 기회를 잡을 수 있음.
     * 18F의 미래
          + 18F 부서의 구성원들은 아직 상황을 파악 중이며, 앞으로의 계획을 세우고 있음.
          + 한 Bluesky 사용자는 새로운 회사의 이름을 ""18FU""로 제안함.

        Hacker News 의견

     * 마크 큐반이 정부에서 민간으로의 전환에 자신을 끼워 넣으려는 DOGE의 움직임에 동참하려는 것 같음
          + 큐반이 머스크와 비슷하지만 PR이 더 뛰어나다는 증거를 제공함
          + 큐반은 18F에서 해고된 직원들에게 컨설팅 회사를 시작하라고 권장하며, DOGE가 결국 그들이 만든 문제를 해결하기 위해 그들을 고용할 것이라고 언급함
          + 큐반은 투자하거나 돕겠다고 제안함
     * HackerNews에서 login.gov에 대한 긍정적인 의견을 많이 봄
          + 이 서비스를 사용해 본 적이 없고 구현 품질에 대해 잘 모름
          + 사용자 관점에서 이 서비스가 품질이 좋은 이유가 궁금함
          + 기술자 관점에서 이 소프트웨어가 품질이 좋은 이유가 궁금함
          + login.gov는 오픈 소스 Ruby on Rails 앱으로 기본적인 문서화, 테스트, 모니터링이 있음
     * 많은 사람들이 민영화가 답이라고 믿음
          + 연방 정부가 낭비와 쓸모없는 일을 많이 한다고 생각함
          + 대기업에서 일해 본 적이 없는 사람들의 생각일 수 있음
          + 큰 조직은 비효율, 낭비, 부패 등이 있지만 대부분의 사람들은 좋은 일을 하려고 노력함
     * 헤드라인이 부정확하다고 생각함
          + 마크 큐반은 18F 직원들에게 정부 서비스를 제공하는 회사를 시작하라고 권장함
          + DOGE가 실수를 인정하고 그들을 다시 고용할 것이라고 기대함
          + 하지만 머스크는 실수를 인정하지 않을 것임
     * 미국 정부가 완전히 민영화되는 경향의 시작을 나타냄
     * login.gov를 구축 및 관리함
          + 트위터에 버그가 있는 것과는 다른 문제임
          + 정부 서비스 로그인이나 가입 시 버그가 있으면 심각한 문제임
     * 큐반: ""DOGE가 만든 문제를 해결하기 위해 당신의 회사를 고용할 것임""
          + 머스크와 친구들은 자존심이 강해 도움을 요청하지 않을 가능성이 큼
          + 정치적으로 지친 상태임
     * 빌 클린턴은 재임 기간 동안 직원 수를 줄였음
          + 정부 직원 수 감소에도 불구하고 비용은 증가했음
          + 상황은 복잡함
     * 18F가 민영화되는 것이 좋은 아이디어라고 생각함
          + 해체되는 상황에서 민영화가 더 나은 선택이라고 봄
          + 정부 내에서 계속 존재하는 것이 더 좋지만, 민영화가 해체보다 나은 선택이라고 생각함
"
"https://news.hada.io/topic?id=19463","EdgeDB가 Gel로 리브랜딩 - Postgres가 미래입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  EdgeDB가 Gel로 리브랜딩 - Postgres가 미래입니다

     * EdgeDB가 Gel이라는 새로운 이름으로 리브랜딩됨
     * PostgreSQL이 최근 데이터베이스 시장을 점점 잠식하고 있음
          + PostgreSQL은 오픈소스로 유지·개발되는 메인스트림 DB 중 거의 유일한 사례임
          + 연구 프로젝트에서 출발했으며, MIT 유사 라이선스로 공개되어 라이선스 변경이나 인수 같은 이슈가 없어 높은 신뢰를 얻고 있음
     * PostgreSQL이 “가장 진보된 오픈소스 관계형 DB”로 불리는 이유
          + 1985년 Berkeley POSTGRES 프로젝트 시절부터 확장성과 모듈성을 핵심으로 설계함
          + 다양한 데이터 타입(JSON, 공간 데이터, 벡터 등)을 처리할 수 있어 사실상 멀티모달 DB 역할을 수행함
          + 쿼리 최적화와 Planner 성능이 우수해, EdgeQL(Gel의 질의 언어)을 SQL로 컴파일할 때 대규모 쿼리도 안정적으로 처리함
          + 풍부한 Postgres 확장이 존재하며, Rust로도 확장 개발 가능함
          + CockroachDB, YugabyteDB, TiDB, Google Spanner 등 많은 DB가 Postgres 호환을 우선으로 삼고 있음
     * Gel(구 EdgeDB) 은 Postgres의 프런트엔드 계층을 대체하는 개념임
          + Aurora나 Neon은 스토리지 레이어를 변경했지만, Gel은 SQL 대신 EdgeQL을 사용하는 DB 접근을 지향함
          + TypeScript가 JavaScript 위에서 작동하듯, Gel은 Postgres를 기반으로 스키마와 질의를 더 친화적인 형태로 컴파일하고 최적화함
          + 새 버전 Gel 6.0부터 SQL도 직접 지원하여, 점진적으로 도입할 수 있게 되었음
          + Drizzle, Prisma, SQLAlchemy 같은 도구에서 Gel을 활용 가능함

재브랜딩의 이유

     * “Edge”라는 명칭이 Edge Computing이나 그래프 DB 같은 이미지를 연상시켜 혼동이 있었음
     * 간결하면서도 유연한 느낌을 주는 “Gel” 로 이름을 바꿈

무엇이 바뀌고, 바뀌지 않는지

     * 회사, 팀, 미션은 그대로 유지됨
     * 도구와 라이브러리는 기존 명칭(edgedb)을 대체하는 새 명칭(gel)으로 제공되며, 하위 호환을 위해 이전 명칭에 대한 심링크나 패키지도 제공함
     * Gel Cloud에서 v6.0을 이미 사용해볼 수 있음
     * Apache 라이선스와 오픈소스 개발은 지속되며, 향후 포스팅으로 상세한 보증 방안을 공유할 예정임

   EdgeDB - 개발자를 위한 차세대 오픈소스 ORDB
   EdgeDB 1.0 릴리즈
   EdgeDB 1년 사용 후기 - ""다시는 SQL로 돌아가지 않을꺼야""

        Hacker News 의견

     * PostgreSQL의 쿼리 플래너/최적화기는 최첨단이라는 의견이 있음
          + Postgres의 비용 기반 플래너는 뛰어나지만, 1980년대 디자인으로 Microsoft SQL Server와 CockroachDB에서 사용하는 Volcano/Cascades 시스템보다 오래된 것임
          + 지난 30년 동안 쿼리 최적화 분야에서 많은 발전이 있었지만, Postgres에는 거의 반영되지 않았음
          + Postgres는 병렬 작업자와 JIT를 도입했지만, 기본 설계는 크게 변하지 않았음
          + 개선 사항을 추가하는 데 보수적이며, 다른 데이터베이스는 오래전부터 인덱스 스킵 스캔을 지원해왔지만, Postgres는 아직 이를 지원하기 위해 작업 중임
          + 최첨단 기술은 뮌헨 대학의 Thomas Neumann 그룹의 연구 프로젝트인 Umbra이며, HyPer의 후속작으로 CedarDB로 상용화되고 있음
          + Postgres 쿼리 플래너에 대한 그들의 분석은 흥미로운 읽을거리임
     * Gel이 Postgres에 대한 TypeScript와 같다는 의견이 있음
          + EdgeDB를 몇 년 동안 사용해왔으며, RethinkDB와 MongoDB를 사용한 후 가장 좋아하는 데이터베이스임
          + SQL 명령어를 외울 필요가 없고, 쿼리에 문제가 생기면 데이터를 보기 위한 멋진 UI를 제공받음
     * EdgeDB는 단순히 훌륭함. 스키마, 마이그레이션, TypeScript 쿼리 빌더, 인증 등 모든 기능이 뛰어남
          + 작은 Remix 앱에서는 별도의 API 레이어를 만들 필요 없이 DB를 직접 사용함
     * 새로운 이름이 마음에 들며, CLI 사용 시 ""edgedb""를 입력하는 것이 번거로웠음
     * 새로운 문서가 더 나아지길 바라며, 이전 문서는 사용하기 어렵고 조금 부족했음
     * 여러 ORM을 시도했지만, EdgeDB의 ORM은 지침을 따르지 않는 문제를 제외하고는 매우 간단하게 작동했음
          + 버그나 구성 오류 없이 모든 것이 잘 작동했음
     * EdgeDB는 잘 설계된 제품이며, 개인 프로젝트에 사용할 계획임
     * Postgres는 훌륭하지만, 대규모 작업 부하를 처리하기 위해 필요한 작업량이 상당히 많음
          + 데이터베이스를 샤딩해야 했던 사람에게 물어보면 알 수 있음
     * 새로운 데이터베이스 회사를 시작할 때는 SQL로 시작하는 것이 교훈임
          + SQL 지원 없이 시작한 거의 모든 DB는 결국 이를 추가하게 됨
     * TypeScript 도구 체인과의 긴밀한 통합이 edgeql과 함께 매우 유용했으며, ORM보다 오류가 훨씬 적었음
     * Gel은 특히 TypeScript 세계에서 성공적인 공식임
     * EdgeDB 5.0을 사용하여 사이드 프로젝트를 진행했으며, Django나 Rails로 앱을 개발하는 재미를 느꼈음
          + 서버리스 환경에서 Typescript+React와 함께 사용했음
          + 자체 호스팅에 대한 궁금증이 있음
     * 특정 지역에 위치한 Postgres DB를 가지고 있고, 문서에 명시된 대로 k8s 클러스터에 gel을 배치하면 잘 작동하는지 궁금함
          + 이러한 배포가 무료인지, 클라우드 제공에서 어떤 기능이 누락되는지 궁금함
          + GCP의 고가용성, 백업 및 모니터링 기능을 잃고 싶지 않음
          + 데이터가 있는 지역을 구성할 수 있는지, VPC 뒤에 배치할 수 있는지 궁금함

   The World's Most Advanced Open Source Relational Database
"
"https://news.hada.io/topic?id=19486","Elixir에 Python 내장하기, 문제없어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Elixir에 Python 내장하기, 문제없어요

     * 최근 몇 년간, Elixir는 Nx (Numerical Elixir) 프로젝트를 통해 머신 러닝과 데이터 분야에서 역량 확장 중임
     * Nx, Explorer, Axon, Bumblebee, Scholar 등의 프로젝트가 등장하여 Python과 R 생태계에서 배운 교훈을 기반으로 발전 중
     * 초기에는 Python 라이브러리에 직접 의존하지 않기로 결정했는데, Elixir에 최적화된 설계 추구 및 Python 환경 설정의 복잡성 회피를 위해서였음
     * 그런데, 요즘 이 분야에서 Elixir 도입을 주도하는 것은 Livebook 임
          + Elixir와 Erlang의 강점을 기반으로 재현성, 분산 실행, 앱 개발의 최전선에 있는 노트북 플랫폼
          + Livebook을 통해 Elixir 생태계에 처음으로 발을 들여놓으려는 팀과 기업들의 관심이 점점 더 커지고 있음
     * 하지만 장애물이 있음
          + Elixir와 Livebook을 인프라에 도입하려는 대부분의 회사는 이미 Python 기반의 워크플로, 패키지 및 리포지토리를 사용중
          + 이 선택을 위해서 Elixir에서 동등한 패키지를 찾거나 처음부터 새로 작성해야 한다는 것을 의미하며, 데이터 스택에 Elixir를 추가하는 데 따르는 위험과 비용이 증가한다는 것을 의미
     * 이를 해결하기 위해 Python 인터프리터를 Erlang VM 내에 내장하는 Pythonx 를 발표

Pythonx

     * Pythonx는 Elixir와 Python 간의 자동 데이터 변환, 코드 평가, 가상 환경 관리 기능을 제공
     * Optical Character Recognition(OCR) 수행을 위해 pytesseract 패키지 활용 가능
     * req를 사용하여 이미지를 다운로드한 후, Pythonx.uv_init/1 호출을 통해 Python과 종속성 다운로드 및 초기화
     * Pythonx.eval/2을 사용하여 Python 코드 실행 및 결과를 Elixir 문자열로 변환

내부 구조

     * Python의 CPython 참조 구현은 다른 애플리케이션에 내장 가능
     * Python 인터프리터의 핵심 기능이 C 라이브러리로 제공됨
     * C/C++ 애플리케이션이 해당 라이브러리를 링크하고 API를 사용하여 코드 실행 및 객체 상호 작용 가능
     * Elixir는 Erlang NIFs를 통해 C/C++와의 상호 운용성을 제공
     * Pythonx는 NIFs를 활용하여 Python을 내장하며, 동일한 OS 프로세스에서 동작
     * Python과 Elixir 간의 데이터 전달이 효율적으로 이루어짐

Livebook의 다중 언어 지원

     * Pythonx를 기반으로 Livebook에서 Python 지원 추가 진행 중
     * 동일한 노트북에서 Elixir와 Python이 상호 작용 가능해짐
     * Livebook이 Python 및 종속성을 자동으로 설치하고, Elixir와 Python 변수 간의 변환을 관리
     * 재현 가능한 환경을 보장
     * 현재 코드 완성, 문서화 등 추가 작업 진행 중이며, Livebook nightly 다운로드 및 사용 가능

사용 시 고려사항 및 대안

     * Pythonx의 주요 목적은 Livebook 및 스크립트 내에서 Python 워크플로우를 통합하는 것임
     * Python의 전역 인터프리터 잠금(GIL)로 인해 여러 Elixir 프로세스에서 Pythonx 호출 시 동시성 제한 가능성 존재함
     * 단일 Elixir 프로세스에서 호출하거나, Python 라이브러리가 동시 호출을 처리할 수 있는지 확인 필요함
     * 대안으로 System.cmd/3 또는 Port를 사용하여 여러 Python 프로세스 관리 가능함
     * AI 워크플로우의 경우 Bumblebee를 통해 사전 학습된 모델 실행 가능함
     * Ortex를 활용하여 ONNX 모델 실행 가능함
     * LLM의 경우 서드파티 API 사용 또는 온프레미스에서 Llama.cpp Docker 컨테이너 실행 가능함
     * HTTP 기반 인터페이스 활용 시 Elixir의 Instructor 및 LangChain 등의 도구 활용 가능함

Fine 프로젝트

     * Pythonx는 NIFs를 사용하여 구현됨
     * NIFs는 C로 구현된 Elixir 함수이며, 많은 보일러플레이트 코드 요구됨
     * 메모리 관리 및 오류 처리 복잡성이 존재
     * 이를 해결하기 위해 C++ 기반의 Fine 라이브러리 개발됨
     * Fine은 데이터 구조 변환 자동 처리, 리소스 객체 안전 관리, 예외 발생 기능을 제공
     * NIF 작성 시 코드의 양을 크게 줄일 수 있음

결론

     * Numerical Elixir 프로젝트의 목표는 Elixir가 데이터 및 머신 러닝 생태계에서 독자적인 정체성을 갖도록 하는 것임
     * 이제 상호 운용성을 주요 목표로 삼고 있음
     * Pythonx는 Elixir에 Python을 내장하여, 두 언어 간의 투명한 상호 변환을 가능하게 함

   다른언어에서 python. pandas. numpy 새로 만들려는 그거만큼 뻘짓이 없죠.

   Numpy는 진짜 좋아요...

        Hacker News 의견

     * Livebook의 기능이 매우 멋있음. Elixir에서 C++ NIFs를 통해 CPython을 직접 호출하고 Elixir-native 데이터 구조를 반환하는 점이 깔끔함
          + 프로덕션 서버에서는 Pythonx 사용이 다소 위험할 수 있음. Elixir 앱과 동일한 OS 프로세스에서 실행되기 때문에 Elixir/BEAM 앱의 강력한 실패 복구 기능을 우회하게 됨
          + 일반적으로 Elixir 앱은 자체 BEAM 프로세스의 실패를 우아하게 처리할 수 있는 감독 트리를 가지고 있으며, 이는 Elixir, Erlang, Gleam 같은 언어의 큰 장점임
          + NIFs를 사용할 경우, Pythonx에서 처리되지 않은 예외가 발생하면 전체 OS 프로세스와 모든 BEAM 프로세스를 중단시킬 수 있음
          + Rustler는 Elixir에서 Rust를 위한 인기 있는 NIF 래퍼로, NIFs가 매우 유용한 경우도 있지만, 전체 앱을 중단시킬 수 있는 위험을 고려해야 함
          + Ports를 사용하여 Python이나 Rust 같은 다른 네이티브 코드를 실행하는 것이 이 점에서 덜 위험함
     * Elixir 커뮤니티의 ""잘 알려진"" 사람들이 이러한 접근 방식을 지지하고 적극적으로 개발하는 것을 보는 것이 좋음
          + VM과 런타임이 다른 언어와 기술을 조율하는 데 매우 적합하여 표준 트랙과 오프로드 트랙이 있는 것처럼 느껴짐
          + 오프로드 ""위험해 보이는"" 아이디어와 안전한 실행의 차이는 종종 작업량에 불과하지만, 런타임은 이를 장려함
          + NIF이기 때문에 약간의 위험이 있지만, 별도의 BEAM 인스턴스를 생성하고 이를 통해 분산할 수 있음
     * NIFs 사용의 안전성 문제를 지적한 다른 댓글들이 있음
          + Erlang VM 스케줄러는 NIF를 선점할 수 없으므로, 장시간 실행되는 Python 호출이 VM을 중단시킬 위험이 있음
          + GIL이 동시 Python 실행을 방지하지만, Erlang 호출자가 여러 Python 인터프리터를 실행할 수 있어 Ports에서는 문제가 되지 않음
     * 매우 유익한 기사임. Pythonx가 단순한 서브프로세스 호출이 아니라 동일한 프로세스에서 실행된다는 점을 명확히 언급한 것이 좋음
          + Elixir에서 Python에 정의된 함수를 호출하는 예제가 추가되었으면 좋겠음
     * Elixir가 AI 전쟁에서 JavaScript와 Python보다 더 적합함에도 불구하고 뒤처져 있는 것을 보게 되어 기쁨
          + Elixir의 ML 기반을 처음부터 확장하려는 초기 결정을 좋아하지만, 빠르게 발전하는 Python 라이브러리를 활용할 수 있는 방법이 생긴 것도 좋음
     * Python에서 Elixir/Erlang 생태계로 진입하는 것이 너무 어렵게 느껴졌지만, Pythonx로 점진적인 학습이 훨씬 더 가능해 보임
          + Python의 GIL 문제에 대해 자유 스레딩을 실험했는지 궁금함
     * Elixir에는 Python에 있었으면 하는 몇 가지 기능이 있음
          + 아톰, 대부분의 것이 매크로임, 파이프 |>, 진정한 불변성, 감독 트리 덕분에 진정한 병렬성과 동시성, 핫 코드 리로딩, 내결함성
     * Elixir에 깊이 관여하고 Python을 많이 사용했던 사람으로서 매우 실용적이라고 생각함
          + C++ NIFs를 쉽게 만드는 Fine 라이브러리에 더 관심이 있음
     * 이 프로젝트와 블로그 게시물이 나를 위해 만들어진 것처럼 느껴짐. 사용해보고 싶음, 고마움
"
"https://news.hada.io/topic?id=19529","GLP-1: 경제를 뒤흔드는 게임체인저경제를 뒤흔드는 게임체인저? (2024)

     * ""100조 달러 경제 지각변동: 비만치료제가 몰고 올 변화""
     * 실리콘밸리가 AI에 집착하는 동안, 비만치료제는 인터넷 이후 가장 큰 경제 파괴자로 부상함. 이를 이해해야 직업, 투자, 미래가 달라짐

개인의 작은 변화, 거대한 경제적 여파

     * 2021년, 소프트웨어 엔지니어 리사 첸이 비만치료제를 복용하기 시작함
     * 6개월 후, 매일 먹던 머핀을 끊어 커피숍 연간 매출이 $600 감소
     * 1년 후, 술 구독 서비스 해지, 야식 주문 중단, 식료품 지출 40% 감소
     * 술 관련 지출은 85% 감소, 충동적인 아마존 구매도 60% 급감하며 소비 습관 전반이 변화
     * 리사의 이야기가 수백만 명의 현실이 될 것이라는 점이 핵심

예상치 못한 혁신: GLP-1 약물은 에어컨과 같다

     * 경제 혁명은 종종 의외의 곳에서 시작됨 (예: 에어컨이 제조업과 IT 산업에 미친 영향)
     * GLP-1 약물은 단순한 체중 감량이 아니라 인간의 충동 조절을 가능하게 함
     * 경제는 충동 소비에 의해 돌아감 (야식, 술, 즉흥 구매 등)
     * 이 약물이 충동을 억제하면, 수조 달러 규모의 산업이 흔들릴 수 있음

충격적인 숫자: 2차, 3차 파급 효과

     * 2030년까지 미국 성인의 30%가 GLP-1 약물 복용 예상 (약 7,800만 명)
     * 1차 효과: 체중 감소, 건강 보험 비용 절감, 식품 소비 감소
     * 더 중요한 것은 2차, 3차 효과:
          + 음주량 40% 감소 → 주류 산업 타격, DUI(음주 운전) 45% 감소, 폭력 범죄 28% 감소
          + 기업 건강보험 비용 절감 → 직원당 연 $12,000 감소, 생산성 25% 증가
          + 광고 산업 붕괴 → 감정적 충동 마케팅 효과 급감, 광고 클릭율 40% 감소
          + 외식업 변화 → 충동적 주문 감소로 레스토랑 모델 재설계 필요

극장, 쇼핑몰, NFL까지 변화 중

     * 영화관 수익의 72%는 충동적 매점 구매에서 나옴 → 팝콘, 콜라 판매 급감 예상
     * AMC는 ""소형 메뉴""와 ""프리미엄 좌석 경험""을 테스트 중
     * NFL도 변화 감지 → 경기장 내 40%의 푸드코트 공간을 ""경험 존""으로 변경
     * 쇼핑몰 변화 → Simon Property Group은 대형 매장을 의료센터·웰니스 공간으로 개조 중

광고 산업의 붕괴

     * 광고의 핵심 원리: 감정적 반응 유발 → 충동 소비 유도
     * GLP-1 복용자는 광고 반응률 감소:
          + 음식 광고 반응률 65% 하락
          + 충동 구매 클릭율 40% 하락
          + 야간 온라인 쇼핑 85% 감소
     * 광고 업계 패닉 → 2027년까지 기존 광고 전략의 50%가 무용지물이 될 가능성
     * 기업들은 적응 중:
          + Whole Foods → 구독 서비스 중심 전략
          + Nike → 단기 충동 마케팅 대신 장기 건강 파트너십
          + American Express → 외식 캐시백 대신 건강 관련 보상 시스템 도입

부동산의 변화: 쇼핑몰이 웰니스 센터로

     * 예상: 2030년까지 30%의 레스토랑이 매장 크기를 40% 줄일 것
     * 약 9,500만 평방피트(=쇼핑몰 57개 규모)의 상업 공간이 비게 됨
     * 대신 의료 클리닉, 웰니스 센터, 체험형 매장, 소규모 물류 창고로 전환 중

라스베이거스도 변신 중

     * 베이거스는 ""충동 소비의 성지"" → 5대 카지노가 대대적 개편 중
     * 바·레스토랑 공간 35% 축소, 웰니스 스파·의료 관광 시설 확장
     * ""포스트 충동 경제""를 대비한 전략적 변화

계층 격차 심화: 새로운 '능력 격차' 등장

     * GLP-1 약물 접근성이 소득 수준에 따라 차등화
          + 상위 20%: 80%가 복용 가능
          + 하위 20%: 5%만 접근 가능
          + 도시 vs 시골 접근성: 8:1 차이
          + 복용자의 생산성: 비복용자의 1.35배
     * 기업 승진 및 기회에서도 약물 복용 여부가 결정적 요소가 될 가능성
     * 새로운 형태의 사회 불평등 초래 가능

우리는 준비되어 있는가?

     * 100조 달러 규모의 변화가 예상되며, 이는 인터넷 혁명보다도 큰 파급력을 가질 수 있음
     * 문제는 변화의 속도:
          + 1903년 비행기 발명 → 1914년 공중전 → 1969년 달 착륙
          + 이번에는 인간 행동 자체가 변하는 것
     * 변화를 통제하지 않으면 과거 산업혁명처럼 혼란과 실직이 뒤따를 것
     * 결론: 미래는 이미 시작되었으며, 우리가 적응할지 밀려날지가 문제임

   한국도 위고비 판매 시작했다던데... 조금 겁나네요

   위고비가 이 데이터를 광고에 활용하면 비싼 약값에 대한 가격저항 심리를 무력화 할수 있을것 같습니다.

        Hacker News 의견

     * Tirzepatide를 3-4주 전에 시작했음. GLP-1에 대한 관심을 이해하기 위한 실험으로 시작했으며, 당뇨병이 없고 체지방이 20%로 약간 과체중임
          + 극단적인 식욕 억제 효과로 인해 충분히 먹고 있는지 확인하기 위해 칼로리를 세기 시작했음. 먹는 것을 잊기 매우 쉬움
          + 배고픔을 전혀 느끼지 않음. 이는 다소 우울함. 먹는 것이 더 이상 즐겁지 않고 의무처럼 느껴짐. 며칠 전 처음으로 배고픔을 느꼈을 때 매우 기뻤음
          + 술을 완전히 끊었음. 식사 후 배가 불러 술을 마시기 어려운 느낌이 항상 듦
          + 장을 보면 3-4일 내에 간식이 다 사라지곤 했지만, 이제는 간식을 먹지 않아 식료품이 더 오래 지속됨. 이는 약값을 상당히 절약해 줌
          + 아침 스타벅스 루틴이 2개의 음식에서 1개로 줄어들어 월 $200를 절약함
          + 음식 외의 충동 제어에 대한 변화는 느끼지 못했음
          + 이 약이 널리 보급되고 저렴해지면 과체중은 약을 선택하지 않는 선택이 될 것임을 확신함
          + 이 약의 가장 중요한 점은 습관을 바꾸도록 강요한다는 것임. 의지력이 필요하지 않음
          + 나쁜 식습관에 대해 벌을 줌. 늦은 밤 맥도날드에 가면 다음 날 기분이 나쁠 것임
          + 예전에는 식당에서 메뉴를 다 먹을 수 있었지만 이제는 그럴 수 없음. 친구들과 식당에 가서 음식에 전혀 관심이 없는 것이 다소 창피함
     * 이 사람이 전문가인지 의문임. 출처 없이 수많은 숫자를 던짐. 예를 들어, 영화관 체인이 사용자 데이터를 분석하여 수익의 72%가 충동 구매에서 나온다고 주장함. 이는 자기계발서에서 흔히 볼 수 있는 헛소리처럼 보임
     * 젠지 세대가 밀레니얼 세대보다 술을 덜 마시고 외출이나 약물을 덜 사용함. 고 BMI를 가진 사람들에게만 알코올 절제가 효과적이라는 증거가 있음
     * 미국 경제를 단기적으로 무너뜨릴 수 있는 요인들:
          + 관세
          + 정부 지출 삭감 (특히 복지)
          + 공무원 해고로 인한 실업률 급등
          + 화폐 시스템 구조 변경
          + AI로 인해 직업군이 사라짐 (택시 운전, 전화 센터, 사무직 등)
     * Simon Property Group이 앵커 스토어를 의료 센터와 웰니스 공간으로 전환하고 있음. 이는 기존 트렌드에 대한 반응임. 쇼핑몰은 수년간 쇠퇴해 왔으며 COVID가 결정적인 타격을 줌
     * Google과 같은 회사가 직원당 연간 $12,000의 의료비 절감과 25%의 생산성 증가를 경험함. 이는 원격 근무가 사소한 조정에 불과하다는 것을 보여줌. 그러나 내 사무실에는 비만인 사람이 거의 없음. 캐나다의 비만율은 26%이며 과체중 성인은 36%임. 이러한 숫자를 모든 인구에 적용하는 것은 잘못임
     * 비만은 건강 문제를 유발하지만, 음식과의 나쁜 관계, 즉각적인 만족을 추구하는 미국 사회 구조, 식품 제조업체의 착취적 성격의 증상이기도 함. 증상을 치료하는 것은 좋지만, 근본적인 문제를 해결하지 않으면 새로운 문제가 발생할 수 있음
     * 상위 소득 계층의 80%가 이 약을 복용할 것이라는 주장이 있음. 그러나 상위 20%의 소득자 중 80%가 비만이라는 것은 의심스러움. 많은 부자들이 건강한 체형을 유지하고 있음
     * 대형 식품 기업은 초가공 식품을 통해 우리의 자연 시스템을 조작하여 이익을 얻음. 설탕, 지방, 소금을 조합하여 포만감을 무시하고 뇌의 도파민 경로를 활성화함. 소비자 건강보다 이익 성장이 우선임
     * 실제 트렌드는 디플레이션임. 사람들이 아이를 덜 낳고, 사무실로의 이동이 줄어들고, 충동 구매가 줄어들고 있음. 이는 인플레이션이 아님. 우리는 깊은 디플레이션의 세계에 살고 있음
     * GLP-1이 일반적인 충동 제어를 변화시키는지 의문임. 충동 제어 약물이 효과적이라면 경제적 영향은 측정할 수 없을 것임. 이는 사회 전체에 근본적인 변화를 가져올 것임 (예: 데이팅)

   비슷한 것으로는 오젬픽이 있다고 들었던 것 같네요.

   예전에 읽었던 SF 창작물 중 비슷한 시놉시스가 있었는데, 엄청나게 발전한 사회에서 더 이상 욕망할게 없어진 인류들이 최종적으로는 식물이 되어 버렸다는 내용이었네요.

   어쩌면 이렇게 점점 수동적이 되어버린 우리들은 AI가 관리하는 실내 재배실에 들어가 살게 될지도 모르겠습니다.

   올해 안에 라스베가스에는 4층짜리 인앤아웃이 들어선다는데....
   거기 가보기 전에는 절대 식물이 되어서는 안 되겠다는 생각이 문득 듭니다.
"
