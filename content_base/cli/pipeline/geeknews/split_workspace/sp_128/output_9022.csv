"https://news.hada.io/topic?id=14823","Google I/O 2024에서 발표된 모든 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Google I/O 2024에서 발표된 모든 것들

Gemini 1.5 Flash 모델 발표

     * Gemini 1.5 Pro만큼 강력하지만, 좁고 빈번하며 지연 시간이 짧은 작업에 최적화된 새로운 다중 모달 모델
     * 빠른 응답 생성에 더 적합함
     * Gemini 1.5의 번역, 추론, 코딩 능력도 개선
     * Gemini 1.5 Pro의 컨텍스트 윈도우(흡수할 수 있는 정보량)가 100만 토큰에서 200만 토큰으로 두 배 증가

Project Astra: Google의 Star Trek AI 미래상

     * 다중 모달 AI 어시스턴트로, 기기의 카메라를 통해 보고 이해하며, 사물의 위치를 기억하고, 사용자를 대신해 작업을 수행하는 것을 목표로 함
     * 올해 I/O에서 가장 인상적인 데모 대부분에 적용됨
     * 단순히 대화하는 것을 넘어 실제로 사용자를 대신해 작업을 수행하는 진정한 AI 에이전트가 되는 것이 목표임

Veo: Google의 Sora 스타일 동영상 생성

     * OpenAI의 Sora에 대응하는 Google의 새로운 생성형 AI 모델로, 텍스트, 이미지, 동영상 기반 프롬프트를 사용하여 1080p 동영상을 출력할 수 있음
     * 항공 촬영이나 타임랩스 등 다양한 스타일로 동영상을 제작할 수 있으며, 추가 프롬프트로 조정 가능함
     * 일부 크리에이터에게 YouTube 동영상 제작에 사용할 수 있도록 제공되고 있으며, 영화 제작에도 활용 가능함을 피치하고 있음

Gemini의 Workspace 통합

     * 차세대 언어 모델인 Gemini 1.5 Pro가 Docs, Sheets, Slides, Drive, Gmail의 사이드바에 통합됨
     * 다음 달 유료 구독자에게 제공될 예정이며, Workspace 내에서 범용 어시스턴트 역할을 수행함
     * Drive의 모든 콘텐츠에서 정보를 가져올 수 있음
     * 현재 보고 있는 문서의 정보를 통합하여 이메일을 작성하거나, 나중에 읽고 있는 이메일에 응답하라고 알려주는 등의 작업을 수행할 수 있음

Google Lens의 기능 확장

     * 이미지뿐만 아니라 비디오로도 검색 가능해짐
     * 비디오를 촬영하면서 질문을 하면 Google의 AI가 웹에서 관련 답변을 찾아주는 기능이 추가됨

Gemini의 Google Photos 활용

     * 올 여름 출시 예정인 ""Ask Photos"" 기능을 통해 사용자의 Google Photos 라이브러리를 분석하여 질문에 답변해줌
     * 단순히 개나 고양이 사진을 찾아주는 것을 넘어서, CEO인 Sundar Pichai가 시연한 것처럼 자신의 차량 번호판 번호를 묻는 등의 복잡한 질문에도 답변이 가능함

Gems: Gemini에 맞춤형 챗봇 생성 기능 추가

     * OpenAI의 GPT와 마찬가지로, Gems를 통해 사용자가 Gemini에게 지시를 내려 응답 방식과 전문 분야를 커스터마이징할 수 있음
     * 예를 들어, 매일 동기 부여와 달리기 계획을 제공하는 긍정적이고 끈질긴 달리기 코치를 원한다면 곧 가능해질 예정 (Gemini Advanced 구독자의 경우)

Gemini의 대화 능력 향상

     * 새로운 Gemini Live 기능은 Gemini와의 음성 채팅을 더 자연스럽게 만드는 것을 목표로 함
     * 챗봇의 목소리에 개성이 더해지고, 사용자는 중간에 말을 끊거나 스마트폰 카메라를 통해 실시간으로 정보를 제공하도록 요청할 수 있음
     * Gemini는 Google Calendar, Tasks, Keep과 통합되어 정보를 업데이트하거나 가져올 수 있으며, 전단지의 세부 정보를 개인 캘린더에 추가하는 등 다중 모달 기능을 활용함

Circle to Search의 수학 문제 해결 지원

     * 이제 Android 폰이나 태블릿에서 수학 문제를 동그라미 치면 문제 해결에 도움을 받을 수 있음
     * Google의 AI는 학생들이 숙제를 속이는 데 도움이 되지 않도록 문제를 직접 풀어주지는 않지만, 단계별로 분해하여 완료하기 쉽게 만들어 줌

Google 검색의 AI 개편

     * 이번 주 미국 전역에 ""AI Overviews""(이전에는 ""Search Generative Experience""라고 불림)가 출시될 예정임
     * 이제 ""전문화된"" Gemini 모델이 검색 결과 페이지를 설계하고 웹에서 요약된 답변으로 채울 것임 (Perplexity나 Arc Search와 같은 AI 검색 도구에서 볼 수 있는 것과 유사함)

Android의 AI 기반 사기 탐지

     * Google은 기기 내 Gemini Nano AI를 사용하여 Android 폰이 사기꾼의 일반적인 대화 패턴 등 위험 신호를 감지하고 실시간 경고를 표시하여 사기 전화를 피하는 데 도움을 줄 수 있다고 함
     * 이 기능에 대한 자세한 내용은 올해 말 제공될 예정임

Android 기기의 AI 지능 향상

     * Google은 Gemini가 곧 사용자가 화면에 표시된 동영상에 대해 질문할 수 있도록 하고, 자동 자막을 기반으로 답변할 것이라고 밝힘
     * 유료 Gemini Advanced 사용자의 경우 PDF도 흡수하여 정보를 제공할 수 있음
     * Gemini on Android에 대한 이러한 다중 모달 업데이트와 기타 업데이트는 향후 몇 달 동안 제공될 예정임

Google Chrome에 AI 어시스턴트 추가

     * Google은 데스크톱의 Chrome에 경량 버전인 Gemini Nano를 추가한다고 발표함
     * 내장된 어시스턴트는 기기 내 AI를 사용하여 Google Chrome 내에서 직접 소셜 미디어 게시물, 제품 리뷰 등을 위한 텍스트 생성을 도와줄 것임

SynthID AI 워터마킹 업그레이드

     * Google은 SynthID의 기능을 확장한다고 밝힘
     * 새로운 Veo 동영상 생성기로 생성된 콘텐츠에 워터마킹을 삽입할 것이며, 이제 AI 생성 동영상도 감지할 수 있게 됨

   챗봇은 무료로 제공하는 걸로 충분하고, 이미지나 비디오, 오디오 관련은 사용하지 않아서 기존 제품에 통합되는게 반갑네요.

    구글의 프로젝트 아스트라 AI 및 동영상 생성의 발전

   Google의 Gemini 모델은 150만 명 이상의 개발자가 코드 디버깅, 인사이트 확보, AI 애플리케이션 구축에 널리 사용하고 있습니다. 프로젝트 아스트라는 비디오 및 음성 입력 정보를 효율적으로 처리할 수 있는 AI 에이전트와 새로운 고급 제너레이티브 비디오 모델인 Vo를 도입하고 있습니다. Vo는 텍스트, 이미지, 동영상 프롬프트로부터 고품질 1080p 동영상을 제작할 수 있어 전례 없는 창의적인 제어 기능을 제공합니다. 구글의 딥마인드가 개발한 이 기술은 이전에는 불가능했던 아이디어를 실현하는 것을 목표로 합니다.

    구글의 6세대 TPU와 혁신적인 AI 개편

   Google은 칩당 컴퓨팅 성능이 4.7배 향상된 6세대 TPU인 트릴럼을 2024년 말에 출시하여 클라우드 고객에게 제공할 예정입니다. 또한 다양한 워크로드를 지원하기 위해 Axion 프로세서와 Envidia Blackwell GPU를 비롯한 새로운 CPU, GPU를 도입하고 있으며, 후자는 2025년 초에 제공될 예정입니다. Google은 사용자 만족도가 높아진 완전히 새로워진 AI 기반 검색 환경인 Gemini를 출시하며, 미국에서 먼저 출시할 예정입니다. 이 새로운 검색 모델은 보다 복잡한 쿼리와 사진 검색이 가능하며, 더욱 향상된 사용자 경험을 위해 체계적인 결과를 제공합니다.

    Google의 새로운 AI 기능 및 향후 혁신 사항

   Google은 음식 및 레시피를 시작으로 다른 카테고리로 확장하여 AI로 구성된 새로운 검색 결과 페이지를 도입합니다. AI는 계절과 같은 맥락적 요소를 사용하여 문제의 원인과 문제 해결 단계에 대한 개요를 제공할 수 있습니다. Google의 AI인 Gemini는 곧 '보석'이라고 불리는 맞춤형 개인 전문가인 라이브 경험을 제공할 예정이며, 동영상 이해 기능을 위해 Project Astra와 통합될 예정입니다.

    새로운 Android용 AI 어시스턴트 Gemini를 소개합니다.

   Gemini는 데이터 프라이버시를 우선시하면서 온디바이스 AI 경험을 제공하는 새로운 Android용 AI 어시스턴트입니다. 학교 공부를 돕고 까다로운 문제에 대한 단계별 지침을 제공하는 등 상황에 맞는 제안을 제공하도록 설계되었습니다. 또한 Gemini는 사용자의 워크플로에 원활하게 통합된 상태에서 이미지 찾기, 특정 질문에 대한 답변과 같은 작업을 지원할 수 있습니다.

    구글의 제미니가 스마트폰 사용에 미치는 영향

   Google의 Gemini는 스마트폰 사용자에게 AI 기능을 제공하여 문서에 있는 정보에 쉽게 액세스하고 특정 질문에 대한 명확한 답변을 제공합니다. 온디바이스 파운데이션 모델은 사용자 개인 정보를 우선시하면서 더 빠른 응답을 제공하여 스마트폰 경험을 향상시킵니다. 곧 출시될 제미니 나노 모델은 휴대폰이 텍스트, 시각, 소리, 음성 언어를 통해 세상을 이해할 수 있게 함으로써 가능성을 더욱 확장할 것입니다.

   코얼리, 유튜브 속 핵심 내용을 10초 만에! - https://corely.ai/content/google-io-2024-everything-revealed

   Gemini Flash
   Google DeepMind Veo

   https://killedbygoogle.com
   Gemini가 이 리스트에 언제 들어갈지 궁금합니다. 돈 안되면 미련없이 접는게 구글의 습성이라 정이 안가요

   GPT-4o 발표가 없었다면 아주 괜찮았겠지만, 많이 김 빠진 발표가 되었네요.
   구글 입장에서는 OpenAI가 정말 미울듯.

   예전에 구글이 시연한 가위바의보를 오픈AI는 출시했는데 구글은 아직 택도 없고... 이번 공개 내용은 또 언제쯤 구현되려나 싶은 맘으로 봤네여 ㅋㅋ
"
"https://news.hada.io/topic?id=14884","Gio UI – Go용 크로스 플랫폼 GUI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Gio UI – Go용 크로스 플랫폼 GUI

     * Gio는 Go 언어로 크로스 플랫폼 즉시 모드 GUI를 작성하기 위한 라이브러리임.
     * 지원 플랫폼: Linux, macOS, Windows, Android, iOS, FreeBSD, OpenBSD, WebAssembly.
     * 의존성: Gio는 창 관리, 입력 및 GPU 그리기를 위한 플랫폼 라이브러리만 필요로 함.

  왜 Gio인가?

     * 효율적이고 유연한 GUI 개발: Gio는 모든 주요 플랫폼에서 효율적이고 유연한 GUI를 구축할 수 있도록 도와줌.
     * 최신 2D 그래픽 기술: 즉시 모드 그래픽 패러다임의 유연성과 최신 2D 그래픽 기술을 결합하여 일관된 애플리케이션 개발 기반을 제공함.
     * 효율적인 벡터 렌더러: OpenGL ES와 Direct3D 11을 기반으로 한 Pathfinder 프로젝트를 구현한 효율적인 벡터 렌더러 포함.
     * 텍스트 및 도형 렌더링: 텍스트와 다른 도형을 텍스처 이미지로 굽지 않고 윤곽선만 사용하여 효율적인 애니메이션, 변형된 그리기 및 픽셀 해상도 독립성을 지원함.

GN⁺의 의견

     * Gio의 유용성: Gio는 다양한 플랫폼에서 일관된 사용자 경험을 제공하는 GUI를 쉽게 개발할 수 있게 해줌.
     * 기술적 장점: 최신 그래픽 기술을 활용하여 성능과 유연성을 동시에 제공함.
     * 학습 곡선: Go 언어를 이미 알고 있는 개발자라면 쉽게 접근할 수 있지만, 새로운 그래픽 패러다임에 익숙해지는 데 시간이 걸릴 수 있음.
     * 경쟁 제품: 다른 크로스 플랫폼 GUI 라이브러리와 비교했을 때, Gio는 Go 언어와의 통합성이 뛰어남.
     * 도입 고려 사항: 프로젝트의 복잡성에 따라 Gio의 기능이 과하거나 부족할 수 있으므로, 프로젝트 요구사항에 맞는지 검토가 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 캔버스를 사용하여 모든 것을 렌더링하는 것은 접근성 문제와 비원주민적인 느낌을 줄 수 있음
          + Flutter의 웹 버전처럼 <canvas>를 사용하여 렌더링하는 것은 접근성 문제와 비원주민적인 느낌을 줄 수 있음.
     * 최신 크로스 플랫폼 앱 개발 방법에 대한 질문
          + 현재 크로스 플랫폼 모바일 및 웹 앱을 구축하는 가장 좋은 방법에 대한 질문. 비즈니스 로직과 UI 모두를 포함하거나 비즈니스 로직만 포함하는 방법에 대해 논의.
     * 타입스크립트를 사용한 비즈니스 로직 구현의 한계
          + 타입스크립트를 사용하여 비즈니스 로직을 구현하려 했으나, iOS에서 자바스크립트 실행 성능이 좋지 않다는 문제를 발견.
     * Go와 Fyne을 사용한 앱 개발 경험
          + Go와 Fyne을 사용하여 작은 앱을 개발했으나, Flutter가 제공하는 많은 기능과 세련미가 부족하다는 경험 공유.
     * WASM 데모의 렌더링 문제
          + Windows 10 PC의 크롬 브라우저에서 WASM 데모가 검은 사각형으로만 렌더링되는 문제를 경험.
     * Gio의 ""제로 할당"" 디자인에 대한 질문
          + Gio의 ""제로 할당"" 디자인에 대한 문서 설명을 이해하기 어려워하는 Go 초보자의 질문. 할당이 왜 발생하는지, 무엇을 할당하는지, 어떻게 절약하는지에 대한 궁금증.
     * 크로스 플랫폼 GUI의 디자인 문제
          + 많은 크로스 플랫폼 GUI가 오래된 디자인처럼 보이는 문제에 대한 지적.
     * 복잡한 애플리케이션 작성의 어려움
          + 복잡한 애플리케이션을 작성하기 어려운 경험 공유. 비디오, 지도, 리치 텍스트 컴포넌트 등 기본적인 컴포넌트가 부족하고, API 변경이 잦으며, 테마 설정이 불가능함.
     * 즉시 모드 그래픽의 한계
          + 즉시 모드 그래픽이 복잡한 상태를 관리할 때 문제가 발생하며, 직접 보유 모드 그래픽을 구현해야 하는 문제.
     * 피에트 GPU 기반 렌더러의 한계
          + 피에트 GPU 기반 렌더러가 베지어 곡선의 제어점을 입력으로 받아 모든 것을 테셀레이션하는 개념은 멋지지만, 실제 원을 그리는 데 어려움이 있음.
     * WASM의 생산 준비 부족
          + WASM이 개념 증명에 불과하며, 생산 준비가 되기 위해서는 수년간의 엔지니어링이 필요함.
     * Fyne의 CJK 텍스트 렌더링 문제
          + Fyne이 CJK 텍스트를 렌더링하지 못하는 문제. 사용자 생성 콘텐츠나 로컬라이제이션이 필요한 경우 Fyne을 사용할 수 없다는 지적.
     * 유니코드 지원 부족
          + 유니코드를 지원하지 않는다는 문제.
"
"https://news.hada.io/topic?id=14858","Wordpress Studio - 로컬에서 워드프레스를 개발하기 위한 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Wordpress Studio - 로컬에서 워드프레스를 개발하기 위한 도구

     * 워드프레스 닷컴이 직접 개발. 빠르고 무료인 로컬 워드프레스 개발용 도구
     * 개발중인 로컬 사이트를 클라이언트/동료에게 공유 가능(Ngrok 같은 터널없이 워드프레스 닷컴을 이용)
     * 로컬에서 무제한으로 워드프레스 사이트 생성 가능
     * 각 사이트에 대해 통합 원클릭 관리자 지원
     * 자신이 원하는 IDE/CLI/브라우저에서 열기 가능
     * 맥용은 즉시 사용가능. 윈도우용은 얼리 억세스 요청 가능
"
"https://news.hada.io/topic?id=14791","호모아이코닉(Homoiconic) 파이썬 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       호모아이코닉(Homoiconic) 파이썬 언어

McCarthy의 ""Lisp in Lisp""를 Python으로 구현하기

     * 1960년대 초반 John McCarthy가 개발한 Lisp은 homoiconicity 특성을 가지고 있어서 코드와 데이터가 서로 교환 가능함
          + Lisp에서는 코드와 데이터의 경계가 모호해짐
          + 이를 통해 Lisp은 자기 자신을 자연스럽게 표현할 수 있음
     * Lisp 1.5 매뉴얼 13 페이지 하단의 코드 반 페이지는 Lisp 그 자체였음
          + Alan Kay는 이를 ""소프트웨어의 맥스웰 방정식""이라고 칭했음
          + 프로그래밍의 전체 세계가 불과 몇 줄의 코드에 압축되어 있음
     * 이를 이해하기 위해 Python을 이용해서 ""Lisp in Lisp"" 코드를 재구현해보는 것이 좋은 방법임
          + 대부분의 프로그래머는 Lisp 문법에 익숙하지 않지만 Python 문법은 익숙할 것임
          + Lisp 코드의 정신을 최대한 유지하면서 Python으로 재작성하는 것이 목표

  Lisp의 M-expression과 S-expression

     * Lisp은 원래 두 가지 구문 flavors를 가지고 있었음
          + M-expression (메타 표현식): 코드 flavor
          + S-expression (기호 표현식): 데이터 flavor
          + 둘은 의미적으로 동일함
     * ""Lisp in Lisp"" 코드는 M-expression으로 작성되었고, S-expression Lisp을 구현함
     * Lisp M-expression을 Python 코드 구조로 변환하고, S-expression은 Python 리스트로 표현하는 것이 한 가지 방법임
          + Lisp은 List Processing의 약자로, 리스트라는 단일 데이터 구조만 사용함

  1차 구현

     * Python 리스트 기본 함수들로 Lisp의 기본 연산들을 구현함
          + atom(x): x가 리스트인지 확인
          + eq(x,y): x와 y가 같은지 확인
          + car(x): 리스트의 첫번째 요소 반환
          + cdr(x): 리스트의 나머지 부분 반환
          + cons(x,y): 원자를 리스트에 추가
          + append(x,y): 두 리스트를 합침
     * 몇 가지 재귀 기본 요소들은 무시하고, Llama3-70b의 도움을 받아 ""Lisp in Lisp"" 코드 서브셋에 대한 인터프리터를 빠르게 구현할 수 있음

  2차 구현

     * 1차 구현에서는 람다 기능이 빠져있음
          + 람다는 Lisp에서 함수를 정의하고 호출하는 주요 방법임
          + 람다 없이는 재귀를 구현할 수 없고, 재귀 없이는 튜링 완전하지 않음
     * 람다를 구현하려면 assoc(x,y)와 pairlis(x,y) 기본 요소가 필요함
          + assoc(x,y)는 연관 리스트를 사용한 key/value 사전 lookup
          + pairlis(x,y)는 Python의 zip(x,y)와 같음
     * Lisp은 loop이 없어서 간단한 선형 검색에도 재귀를 사용해야 했음
          + 하지만 Python에서는 리스트 컴프리헨션을 사용해 우아하게 변환 가능
          + evcon과 evlis도 마찬가지로 loop으로 변환 가능
     * eval 함수는 원래 Lisp에서 두 개의 인수를 받음
          + 첫째는 표현식(s-exp), 둘째는 환경(environment)으로 key/value 리스트
          + 환경은 LAMBDA의 변수 바인딩을 유지함
          + 동적 스코핑(dynamic scoping) 기법 사용

GN⁺의 의견

     * Lisp의 homoiconicity 특성을 Python으로 모방한 흥미로운 시도임. 하지만 Lisp만의 고유한 특성을 완벽히 옮기는 데는 한계가 있어 보임. Lisp의 매력을 경험하려면 역시 Lisp 자체를 배우는 것이 가장 좋을 듯함.
     * 람다 함수와 동적 스코핑 등 Lisp의 강력한 기능들을 Python으로 구현한 것은 인상적임. 하지만 실제 프로젝트에 적용하기에는 부족한 점이 많아 보임. 교육용이나 연구 목적으로는 가치가 있어 보임.
     * 이런 시도 자체가 프로그래밍 언어의 본질에 대해 깊이 생각해 볼 수 있는 계기가 될 수 있음. 언어의 문법과 구현을 떠나 프로그래밍 패러다임의 관점에서 바라보는 시각을 가질 수 있음.
     * Lisp 계열 언어를 배우는 것이 함수형 프로그래밍과 메타 프로그래밍에 대한 통찰을 얻는데 도움이 될 수 있음. Scheme, Clojure, Racket 등 현대적인 Lisp 계열 언어들을 살펴보는 것도 좋겠음.

   A dialect of Lisp that's embedded in Python
   https://hylang.org/
"
"https://news.hada.io/topic?id=14859","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.
"
"https://news.hada.io/topic?id=14817","스타트업 창업가가 직감을 믿어야 할 때","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스타트업 창업가가 직감을 믿어야 할 때

    스타트업 창업자로서 직감을 믿어야 할 때 알기

   가치 있는 제품을 만든 경험이 있는 창업자는 자신의 직감을 믿어야 합니다. 반면에 경험이 부족한 신생 기업가라면 직감에 덜 의존하고 외부의 피드백을 더 많이 구해야 할 수도 있습니다. 핵심은 자신의 전문성 수준에 따라 직감을 신뢰하는 것과 외부의 관점을 개방적으로 받아들이는 것 사이의 균형을 찾는 것입니다.

    제품을 출시할 때 본능을 믿기

   특히 해당 분야에 대한 사전 경험과 전문 지식이 있는 경우, 제품을 출시할 때 자신의 본능과 고유한 통찰력을 신뢰하는 것이 유용할 수 있습니다. 과거 작업에 대한 자기 검증과 스스로를 감동시킬 수 있는 능력은 제품 개발을 이끄는 데 큰 힘이 될 수 있습니다. 직감을 신뢰하는 것도 중요하지만, 전문 지식이 부족하거나 소수의 의견을 고려하는 것도 중요합니다.

    스타트업의 전문성 구축 대 스타트업의 전문성 확보

   다년간의 경험 등 진출하려는 업계에 대한 전문 지식은 스타트업의 성공에 큰 영향을 미칩니다. 업계 전문가가 창업한 스타트업은 고객의 요구와 시장의 역학을 더 잘 이해할 수 있습니다. 반면에 경험이 거의 없거나 전혀 없는 업계에서 사업을 시작하려면 처음부터 광범위한 조사, 검증, 전문성 구축이 필요합니다.

    스타트업 창업의 어려움 탐색하기

   업계 인맥이 부족해도 스타트업 세계에서는 여전히 성공할 수 있습니다. 전문 지식이 있는 창업자는 다른 사람들이 자신의 제품을 원하지 않을까 두려워할 수 있고, 전문 지식이 없는 창업자는 자신의 아이디어에 대해 과신할 수 있습니다. 창업자가 자신의 지식을 무시하고 투자자에게 깊은 인상을 남기는 데 집중하는 것이 일반적이지만, 핵심은 최소한의 실행 가능한 제품을 만들 때 자신의 본능을 신뢰하는 것과 사용자의 요구를 충족시키는 것 사이의 균형을 찾는 것입니다.

    스타트업에서 전문 지식의 중요성

   전문 지식이 있으면 창업에 도움이 되지만, 전문 지식이 없는 창업자들도 성공하는 경우가 많습니다. 전문 지식이 부족하다면 스스로 인정하고 배움의 자세로 임하는 것이 중요합니다. 핵심은 단순히 돈을 벌 수 있을 것 같은 분야가 아니라 자신이 흥미를 가지고 배울 수 있는 분야를 선택하는 것입니다.

   https://corely.ai/content/trust-your-gut-feelings-when
   내용은 코얼리로 정리했습니다.
"
"https://news.hada.io/topic?id=14799","OpenAI, 텍스트, 오디오, 이미지 기능을 갖춘 멀티모달 AI 모델 GPT-4o 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenAI, 텍스트, 오디오, 이미지 기능을 갖춘 멀티모달 AI 모델 GPT-4o 공개

   • 텍스트, 오디오, 이미지를 동시에 처리하고 생성할 수 있는 획기적인 AI 모델
   • 인간 대화에 버금가는 실시간 응답 시간으로 GPT-4o는 자연스러운 인간-컴퓨터 상호 작용에 대한 새로운 표준을 설정
   • API에서 더 빠르고 비용 효율적이면서도 텍스트와 코드, 특히 비영어 언어에서 GPT-4 터보의 성능을 능가
   • GPT-4o의 멀티모달 기능을 통해 오디오 입력을 이해하고 응답하며 오디오 출력을 생성하고 실시간 대화에 참여할 수 있음
   • 이 모델은 향상된 추론, 다국어 숙련도, 오디오 및 시각 이해, 시각 인식을 보여줌
   • OpenAI는 잠재적 위험을 완화하기 위해 GPT-4o의 설계 및 사후 훈련에서 구현된 안전 조치를 강조
   • 초기 릴리스에는 텍스트 및 이미지 입력 및 텍스트 출력이 포함되며 오디오 및 비디오 기능은 향후 API의 신뢰할 수 있는 파트너가 사용 가능

   속도가 정말 빨라진게 체감이 됍니다

   한국어로 질문한다면,

   모델 자체의 성능2배 * 1.7(한글 토큰 개선) = 3.4배 빨라졌어요

   4O의 O는 Omni 를 의미합니다.

    ChatGPT의 최신 업데이트: GPT-4o 모델 및 향상된 사용자 접근성

   ChatGPT는 누구나 무료로 고급 AI 도구를 이용할 수 있도록 하는 데 중점을 두고 있습니다. 데스크톱 버전과 새로운 플래그십 모델인 GPT-4o의 출시는 사용자의 자연스러움과 사용 편의성을 개선하는 것을 목표로 합니다. GPT-4o는 텍스트, 시각, 오디오 전반에 걸쳐 더욱 빠르고 향상된 기능을 제공하여 인간과 기계의 협업에 있어 중요한 진전을 이룰 것입니다.

    GPT-4o를 통한 ChatGPT의 확장

   이제 모든 사용자에게 음성, 텍스트, 시각 추론 기능을 제공하는 GPT-4o를 제공합니다. 새로운 기능에는 실시간 대화 음성, 메모리, 실시간 정보 검색, 고급 데이터 분석이 포함됩니다. GPT-4o는 50개 언어로 제공되며, 품질과 속도가 개선되고 유료 사용자의 경우 용량 제한이 더 높아질 예정입니다.

    ChatGPT의 새로운 실시간 및 반응형 기능

   ChatGPT의 새로운 기능은 실시간 반응성과 사용자의 감정을 파악할 수 있는 기능을 제공합니다. 이 모델은 드라마틱한 목소리, 로봇 목소리, 노래하는 목소리 등 다양한 스타일의 음성을 생성할 수 있습니다. 또한 ChatGPT는 이제 시각적 작업을 지원하고 라이브 데모 환경에서 사용자와 상호 작용할 수 있습니다.

    선형 방정식 풀기: 단계별

   Barrett Zoph와 ChatGPT는 3X + 1 = 4라는 방정식을 풀면서 먼저 X항을 분리한 다음 X를 구한 다음 비용, 여행 계획, 비즈니스 계산 등 일상 생활에서 선형 방정식의 실제 적용에 대해 논의합니다. 이를 통해 수학을 이해하고 실제 문제에 사용하는 데 새로운 자신감을 얻게 됩니다.

    ChatGPT로 날씨 데이터 분석하기

   ChatGPT는 코드 기능을 설명하고 플롯 출력을 해석하여 날씨 데이터를 분석하는 데 도움을 줍니다. 'Fu' 기능은 온도 데이터를 평활화하고 플롯의 노이즈를 줄이는 데 필수적입니다. 이 플롯은 2018년 내내 부드러운 평균, 최저, 최고 기온을 표시하며, 9월 말에 발생한 큰 강우 이벤트에 대한 주목할 만한 주석도 함께 표시합니다.

    다국어 상호 작용 및 AI 기술

   AI 기술은 라이브 데모를 통해 다국어 상호 작용과 감정 해석 기능을 선보입니다. 이 데모는 가까운 미래에 사용자들이 이 기술을 더 쉽게 이용할 수 있도록 하겠다는 목표를 강조합니다. 또한 이 프레젠테이션에서는 기술 발전에 기여한 팀과 그들의 공로를 인정합니다.

   코얼리, 유튜브 속 핵심 내용을 10초 만에! - https://corely.ai/content/openai-spring-update-2022

   Introducing GPT-4o

   소개 영상의 실시간 대화 데모 부분이 충격적이네요. 9분:45초 쯤부터(위 링크는 거기부터 해두었습니다)
   이제 답변 중간에 쉽게 인터럽트 가능하고, 거의 실시간 답변도 하며 억양도 풍부해졌습니다.
"
"https://news.hada.io/topic?id=14855","작업하지 않을 물질: 고차 브로민(Bromine) 상태 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 작업하지 않을 물질: 고차 브로민(Bromine) 상태 (2019)

     * 브로민의 높은 상태들
          + 화학자들은 많은 원소와 화합물을 작업하거나 문헌을 통해 익숙함.
          + 보통의 ""정상적""인 것과 비정상적인 것의 감을 가지게 됨.
          + 브로민 화합물을 예로 들어 설명.
     * 브로민의 기본 상태
          + 대부분의 화학자는 브로민을 즉시 인식함.
          + 브로민은 일반적으로 불투명한 붉은 액체로 부식성 오렌지 연기가 나옴.
          + 브로민의 산화 상태는 0임.
          + 브로민 음이온(Bromide, -1)도 매우 흔함.
          + 모든 양이온에는 브로민염이 있으며, 이는 일반적으로 저렴한 편임.
     * 흥미로운 브로민의 산화 상태
          + 브로민은 +3과 +5 산화 상태로도 존재할 수 있음.
          + 다양한 혼합 할로겐 화합물이 존재하며, 모두 반응성이 높고 유독함.
          + 브로민-산소 화합물도 존재하며, 가장 잘 알려진 것은 브로메이트 이온(BrO3-)임.
     * 새로운 연구
          + 베를린 자유대학교의 콘라드 제펠트가 새로운 연구 논문을 발표함.
          + 새로운 화합물 목록이 포함되어 있음.
          + 이러한 화합물들은 기존의 화학적 직관을 완전히 벗어남.
     * 브로민 플루오린화 이산화물 준비
          + 브로민 플루오린화 이산화물(BrO2F)의 신뢰할 수 있는 합성이 이제야 이루어짐.
          + 이는 브로민 오플루오라이드와 순수한 수소 플루오라이드를 사용함.
          + 수소 플루오라이드를 이중 진공 증류하여 반응에 사용함.
          + 이 화합물들은 매우 위험하고 다루기 까다로움.
     * 브로민 플루오린화 이산화물 반응
          + 액체 질소 온도에서 브로메이트 고체에 브로민 플루오린화 이산화물을 응축시킴.
          + -78도씨까지 온도를 올리면 격렬한 반응이 일어남.
          + 브로민 플루오린화 이산화물을 제조한 후 온도를 -40도로 올려 과량의 HF와 오플루오라이드를 제거함.
          + 이 과정은 몇 시간이 걸릴 수 있음.
     * 완성된 화합물 다루기
          + 최종적으로 -10도씨에서 생성물을 승화시켜 튜브에 봉인함.
          + 생성된 무색 고체 브로민 플루오린화 이산화물은 +10도씨를 넘어서지 않도록 해야 함. 폭발할 가능성이 높기 때문임.
          + 순수한 물질을 반응시키는 다양한 실험을 진행함.
          + 예를 들어, 브로민 플루오린화 이산화물을 -196도씨에서 삼플루오로아세트산 무수물에 응축시키는 등의 방법이 있음.
          + 이러한 화합물들은 매우 복잡하고 불안정함.
     * 안전 경고
          + 논문의 부록은 이러한 준비 작업을 절대 확장하지 말 것을 강력히 경고함.
          + 이는 안전을 최우선으로 하는 조언임.
          + 필요한 경우 매우 잘 유지된 진공 라인과 비일상적 시약에 대한 접근성이 필요함.
          + 작업 시 항상 보호 장비를 착용해야 함.
     * 마무리
          + 할로겐 화학자의 삶은 흥미로우면서도 위험함.
          + 연구를 통해 얻어진 결과들은 매우 중요한 발견이지만, 다루기 어려운 부분이 많음.
          + 이러한 연구는 브로민의 새로운 상태와 화합물에 대한 이해를 넓히는 데 기여함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Derek Lowe의 ""Things I Won't Work With"" 시리즈
          + Derek Lowe의 블로그 시리즈는 화학을 잘 모르는 사람도 쉽게 이해할 수 있게 쓰여져 있으며, 유머러스함.
          + 2010년 ""FOOF"" Dioxygen Difluoride에 관한 글을 추천함.
          + 링크
     * Derek Lowe의 시리즈에 대한 찬사
          + Derek Lowe의 시리즈는 과학 글쓰기 중 가장 재미있는 글 중 하나임.
          + 33개의 글을 모두 읽었으며, 더 많은 글이 있었으면 좋겠다고 생각함.
          + 시작점 링크와 인덱스 링크
     * 유전학 실험실에서의 경험
          + 유전학 실험실에서 DNA 테스트를 위해 젤을 준비하는 과정에서 Ethidium Bromide를 사용했음.
          + 젤을 준비할 때 플라스크를 전자레인지에 넣고 반복적으로 가열하고 섞었음.
          + 이 과정에서 소량의 브로마이드가 방출되었으며, 장기적으로 건강에 미치는 영향이 걱정됨.
          + Ethidium Bromide 위키 링크
     * Derek Lowe의 글에 대한 개인적인 의견
          + Derek Lowe의 글을 즐기지만, 시간이 지나면서 약간 식상해졌다고 느낄 때도 있음.
          + 글의 구조와 단어 선택이 감정적 반응을 유도하지만, 내용이 충분하지 않으면 공허하게 느껴질 수 있음.
     * 화학 수업에서의 사고
          + 화학 수업 중 브로민을 싱크대에 부은 후 반응이 일어나 붉은 연기가 발생하고 모두 대피해야 했던 경험.
     * Konrad Seppelt 교수에 대한 언급
          + Konrad Seppelt 교수는 다양한 이국적인 제논 화합물을 만든 것으로 유명함.
          + 수십 년간 원소 플루오린을 다뤄왔으며, 위험한 물질을 다루는 데 능숙함.
     * 고등학교 수준의 화학 지식으로도 재미있게 읽을 수 있는 글
          + ""Things I Won't Work With"" 시리즈는 고등학교 수준의 화학 지식만으로도 재미있게 읽을 수 있음.
          + 만화 같은 상황에서 위험한 화학 물질이 합성되는 것처럼 느껴짐.
     * 링크 수정 제안
          + 첫 번째 문단의 깨진 링크를 수정하여 올바른 링크를 제공함.
          + 수정된 링크
     * 유튜브 리스트 비디오와의 연관성
          + 인기 과학 유튜브 채널에서 본 위험한 화학 물질에 관한 리스트 비디오가 ""Things I Won't Work With""에서 표절한 것임을 나중에 알게 됨.
     * 브로민 플루오린 디옥사이드에 대한 반응
          + ""bromine fluorine dioxide""는 연속적으로 반응성이 높은 물질로, 다루기 어려운 물질임.
"
"https://news.hada.io/topic?id=14820","Show HN: Raspberry Pi 음성 비서 Pi-C.A.R.D 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: Raspberry Pi 음성 비서 Pi-C.A.R.D 공개

Pi-C.A.R.D

  목차

     * 소개
     * 사용법
     * 하드웨어
     * 설정

  소개

     * Pi-card는 라즈베리 파이에서 완전히 실행되는 AI 기반 음성 비서임.
     * 일반적인 대화 설정에서 ChatGPT와 같은 표준 LLM이 할 수 있는 모든 일을 수행할 수 있음.
     * 카메라가 장착된 경우, Pi-card에게 사진을 찍고, 보이는 것을 설명하고, 그 이미지에 대해 질문할 수 있음.

    왜 Pi-card인가?

     * Raspberry Pi - C amera A udio R ecognition D evice의 약자임.
     * 더 나은 약어를 생각해낼 수 있다면 이슈나 풀 리퀘스트를 제출해달라는 요청이 있음.

    어떻게 작동하는가?

     * Pi-card는 라즈베리 파이에서 완전히 실행됨.
     * 메인 프로그램이 실행되면 시스템은 웨이크 워드를 듣기 시작함.
     * 웨이크 워드를 말하면 대화가 시작되며, 대화 중에는 계속해서 웨이크 워드를 반복할 필요가 없음.
     * ""멈춰"", ""종료"", ""안녕""과 같은 말을 할 때까지 명령을 계속 듣게 됨.
     * 대화 중에는 시스템이 기억을 유지하여 이전 주제를 반복하거나 자세히 설명할 수 있음.
     * 시스템은 완전히 로컬에서 작동하도록 설계되었지만, 외부 API나 서비스를 연결하여 대화를 향상시키거나 외부 장치를 제어할 수 있음.
     * 예를 들어, ""사진 찍어"" 또는 ""무엇을 보니""라고 말하면 카메라가 활성화됨.

    얼마나 유용한가?

     * 이 시스템은 재미있는 프로젝트로 설계되었으며, 어느 정도 유용한 AI 비서임.
     * 모든 작업이 로컬에서 이루어지기 때문에 클라우드 기반 시스템만큼 빠르거나 능력이 뛰어나지는 않음.
     * 그러나 여전히 많은 개선 가능성이 있음.

    왜 앱이 아닌가?

     * 완전히 오프라인으로 작동하며 인터넷 연결이 필요 없는 음성 비서를 만들고자 했음.
     * 이는 사용자의 프라이버시를 보호하고 사용자의 데이터가 제3자 서버로 전송되지 않도록 하기 위함임.

  사용법

     * 저장소를 다운로드하고 요구 사항을 설치한 후 다른 설정 지침을 따르면, 다음 명령어로 메인 프로그램을 실행할 수 있음:
python assistant.py

     * 프로그램이 실행되면 웨이크 워드를 말하여 비서와 대화를 시작할 수 있음.
     * 기본 웨이크 워드는 ""hey assistant""이지만, config.py 파일에서 변경할 수 있음.

  하드웨어

     * 라즈베리 파이 5 모델 B
     * USB 마이크
     * 스피커
     * 카메라

  설정

    소프트웨어

     * 시스템을 최대한 빠르고 가볍게 유지하기 위해 오디오 전사와 비전 언어 모델의 cpp 구현을 사용함.
     * 오디오 전사는 whipser.cpp 라이브러리를, 비전 언어 모델은 llama.cpp 라이브러리를 사용함.
     * 각 저장소를 원하는 위치에 클론하고 경로를 config.py 파일에 추가해야 함.
     * 클론한 후 각 저장소로 이동하여 모델을 실행하기 위한 설정 지침을 따름.

    하드웨어

     * 하드웨어 설정은 매우 간단함.
     * 라즈베리 파이 5 모델 B, USB 마이크, 스피커, 카메라가 필요함.
     * USB 마이크와 스피커는 라즈베리 파이의 USB 포트에 연결할 수 있음.
     * 카메라는 라즈베리 파이의 카메라 포트에 연결할 수 있음.
     * 사용된 하드웨어:
          + 라즈베리 파이 5 키트
          + USB 마이크
          + 스피커
          + 카메라
          + 카메라 커넥터
     * Pi 5에는 새로운 카메라 포트가 있으므로 새로운 카메라 커넥터가 필요함.

GN⁺의 의견

     * Pi-card는 라즈베리 파이를 활용한 흥미로운 프로젝트로, AI와 하드웨어의 결합을 통해 다양한 가능성을 탐구할 수 있음.
     * 완전히 오프라인으로 작동하기 때문에 프라이버시 보호 측면에서 큰 장점이 있음.
     * 클라우드 기반 시스템에 비해 성능이 떨어질 수 있지만, 로컬에서 실행되므로 데이터 보안이 강화됨.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Mycroft AI와 Jasper가 있음.
     * 이 기술을 도입할 때는 하드웨어와 소프트웨어 설정이 다소 복잡할 수 있으므로 충분한 사전 준비가 필요함.
"
"https://news.hada.io/topic?id=14843","소셜 미디어의 종말: 블루스카이를 퇴사한 Jack Dorsey와의 인터뷰 요약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              소셜 미디어의 종말: 블루스카이를 퇴사한 Jack Dorsey와의 인터뷰 요약

블루스카이를 떠난 이유 ( 잭은 이사회를 떠났으며 블루스카이 프로필도 삭제함 )

     * 블루스카이가 트위터의 실수를 반복하고 있다고 느꼈음. 진정으로 분산화된 프로토콜이 아니며 트위터의 발자취를 따르는 또 다른 앱처럼 보였음
     * 블루스카이는 애초에 원했던 탈중앙화, 오픈소스 프로토콜과는 다른 방향으로 갔음. VC와 이사회가 있는 회사가 되었음
     * 반면 Nostr는 익명의 브라질인이 만든, 이사회나 자금 지원 없는 진정한 오픈 프로토콜이라 생각함. 이를 지원하기로 결정

트위터/X의 문제와 앞으로의 방향

     * 트위터의 핵심 문제는 브랜드 광고 모델을 선택한 것. 광고주에 의해 크게 좌우될 수밖에 없는 구조
     * 공개 기업으로서는 검열에 저항하기 어려웠음. 비공개로 전환해야만 변화 가능
     * 장기적으로 소셜미디어 기업들이 검열을 피하려면 오픈 프로토콜 기반으로 전환해야 함. 현재의 중앙화된 구조로는 불가능

정부의 검열 요구에 대한 대응

     * 잭은 트위터가 표현의 자유를 위해 정부와 싸웠다고 말함. 직원 체포 위협, 가택수색 등 압박이 있었음
     * 일론은 현지법에 따른 표현의 자유 원칙을 택함. 요청 시 해당 국가 내 콘텐츠를 삭제
     * 프로토콜 기반이 되면 정부가 요구해도 따를 수 없게 됨. 근본적 해결책
     * 오픈 프로토콜로 이동하지 않으면 소셜 미디어 기업들이 검열에 저항할 수 있는 방법이 ""절대 없음"". ""모든 것이 구축된 기반을 바꿀 필요가 있음""

딥페이크 문제에 대한 견해

     * Nostr처럼 자신의 신원을 증명하는 방식이 해법이 될 수 있음
     * 기업이 신원을 소유하는 것 자체가 위험. 정부의 압박에 취약해짐

기타

     * X에서 많은 사람들을 언팔로우한 이유: 알고리즘 개선으로 불필요해졌다고 생각. 언젠가는 팔로우 액션이 사라질 것
     * 2030년 비트코인 가격 예측: 최소 100만 달러 이상. 생태계와 운동으로서 매력적

   잭 도시 블루스카이 관련 언급 보니 아래 스레드 다시 생각나더군요. 모더레이션 없는 소셜 미디어는 환상이지 않을지

   https://twitter.com/MosquitoCapital/status/1593541177965678592

   마지막 비트코인 가격 질문은 농담조로 던진것입니다만, 잭은 가격보다 그 비트코인에 일하는 사람들이 만들어가는 생태계와 운동이 더 매력적이라고 답변했습니다.

   Nostr - 탈중앙화 소셜 네트워크
"
"https://news.hada.io/topic?id=14837","Rust의 core 및 alloc 크레이트를 Coq로 번역하여 형식 검증","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Rust의 core 및 alloc 크레이트를 Coq로 번역하여 형식 검증

Rust의 core 및 alloc 크레이트 번역

  초기 실행 🐥

     * coq-of-rust를 사용하여 Rust의 alloc 및 core 크레이트를 초기 실행한 결과, 몇십만 줄의 Coq 코드 파일 두 개가 생성됨.
     * 이는 도구가 큰 코드베이스에서도 작동함을 의미하지만, 생성된 Coq 코드는 컴파일되지 않음. 오류는 드물게 발생함 (몇천 줄마다 한 번).

    입력 Rust 코드의 크기 (cloc 명령어 기준)

     * alloc: 26,299 줄의 Rust 코드
     * core: 54,192 줄의 Rust 코드
     * 매크로를 확장하여 번역해야 하므로 실제 번역해야 할 크기는 더 큼.

  생성된 코드 분할 🪓

     * 주요 변경 사항은 coq-of-rust가 생성한 출력을 각 입력 Rust 파일마다 하나의 파일로 분할한 것임.
     * 이는 정의 순서와 무관하게 번역이 가능하기 때문에 가능함. Rust 파일 간의 순환 종속성이 Coq에서는 금지되지만, 여전히 분할할 수 있음.

    출력 크기

     * alloc: 54개의 Coq 파일, 171,783 줄의 Coq 코드
     * core: 190개의 Coq 파일, 592,065 줄의 Coq 코드

    코드 분할의 장점

     * 생성된 코드를 읽고 탐색하기 쉬움
     * 병렬로 컴파일할 수 있어 컴파일이 쉬움
     * 한 파일에 집중하여 디버깅하기 쉬움
     * 컴파일되지 않는 파일을 무시하기 쉬움
     * 단일 파일의 변경 사항을 추적하기 쉬워 유지보수가 쉬움

  일부 버그 수정 🐞

     * 모듈 이름 간의 충돌로 인한 버그가 있었음. 이는 impl 블록의 모듈 이름을 선택할 때 발생함.
     * 모듈 이름에 더 많은 정보를 추가하여 고유성을 높임. 예를 들어, where 절을 추가함.

    예시

     * Default 트레이트의 Mapping 타입 구현:
#[derive(Default)]
struct Mapping<K, V> {
  // ...
}

     * 이전 Coq 코드:
Module Impl_core_default_Default_for_dns_Mapping_K_V.
(* ...trait implementation ... *)
End Impl_core_default_Default_for_dns_Mapping_K_V.

     * 수정된 Coq 코드:
Module Impl_core_default_Default_where_core_default_Default_K_where_core_default_Default_V_for_dns_Mapping_K_V.
(* ... *)

    컴파일되지 않는 파일 목록

     * alloc/boxed.v
     * core/any.v
     * core/array/mod.v
     * core/cmp/bytewise.v
     * core/error.v
     * core/escape.v
     * core/iter/adapters/flatten.v
     * core/net/ip_addr.v
     * 이는 전체 파일의 4%를 차지함. 컴파일되는 파일에도 처리되지 않은 Rust 구조가 존재할 수 있음.

  예시 🔎

    Option 타입의 unwrap_or_default 메서드 원본 코드

pub fn unwrap_or_default(self) -> T
where
  T: Default,
{
  match self {
    Some(x) => x,
    None => T::default(),
  }
}

    번역된 Coq 코드

Definition unwrap_or_default (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
  let Self : Ty.t := Self T in
  match τ, α with
  | [], [ self ] =>
    ltac:(M.monadic
      (let self := M.alloc (| self |) in
      M.read (|
        M.match_operator (|
          self,
          [
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 :=
                  M.get_struct_tuple_field_or_break_match (|
                    γ,
                    ""core::option::Option::Some"",
                    0
                  |) in
                let x := M.copy (| γ0_0 |) in
                x));
            fun γ =>
              ltac:(M.monadic
                (M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (| ""core::default::Default"", T, [], ""default"", [] |),
                    []
                  |)
                |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.

    단순화된 함수 코드

Definition unwrap_or_default {T : Set}
  {_ : core.simulations.default.Default.Trait T}
  (self : Self T) :
  T :=
  match self with
  | None => core.simulations.default.Default.default (Self := T)
  | Some x => x
  end.

     * 이 단순화된 정의는 코드 검증 시 사용됨. 동등성 증명은 CoqOfRust/core/proofs/option.v에 있음.

  결론

     * 표준 라이브러리의 형식화를 통해 Rust 프로그램 검증 작업을 신뢰할 수 있게 됨.
     * 다음 목표는 여전히 번거로운 증명 과정을 단순화하는 것임. 특히, 시뮬레이션이 원본 Rust 코드와 동등함을 보여주는 과정에서 이름 해석, 고급 타입 도입, 부작용 제거 등의 단계를 분리하고자 함.
     * Rust 프로젝트의 형식 검증에 관심이 있다면 contact@formal.land로 연락 바람. 형식 검증은 주어진 명세에 대해 버그가 없음을 수학적으로 보장하는 가장 높은 수준의 안전성을 제공함.

   태그:
     * coq-of-rust
     * Rust
     * Coq
     * 번역
     * core
     * alloc

GN⁺의 의견

    1. Rust와 Coq의 통합: Rust와 Coq의 통합은 Rust 프로그램의 안정성을 높이는 데 큰 도움이 됨. Rust의 안전성과 Coq의 형식 검증을 결합하면, 특히 중요한 애플리케이션에서 매우 유용함.
    2. 자동화의 중요성: coq-of-rust 도구를 사용한 자동 번역은 수작업보다 신뢰성이 높음. 하지만 여전히 검증 과정에서 오류가 발생할 수 있으므로 주의가 필요함.
    3. 복잡한 코드베이스 관리: 큰 코드베이스를 다루는 데 있어 코드 분할은 유지보수와 디버깅에 큰 도움이 됨. 이는 특히 팀 작업에서 중요한 요소임.
    4. 형식 검증의 필요성: 형식 검증은 특히 금융, 의료, 항공 등 중요한 분야에서 필수적임. Rust와 Coq의 결합은 이러한 분야에서 큰 가치를 제공할 수 있음.
    5. 기술 도입 고려사항: 새로운 기술을 도입할 때는 학습 곡선과 기존 시스템과의 호환성을 고려해야 함. Coq와 같은 형식 검증 도구는 높은 학습 곡선을 가질 수 있으므로 충분한 교육과 준비가 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 자동 번역 도구의 신뢰성
          + 자동 번역 도구가 신뢰를 얻음. coq-of-rust는 Rust로 작성되었고, Coq로 변환하여 올바름을 증명할 수 있음. 이는 Ken Thompson의 공격을 방지하는 방법과 유사함.
     * 프로그램 크기와 검증
          + Coq 같은 반자동 증명 시스템으로 검증된 프로그램 크기는 작음. 100% 보증 비용이 99.9999% 보증 비용의 10배가 될 수 있음.
     * 번역 과정의 오류 가능성
          + 코드의 Coq 번역 과정에서 오류가 발생할 가능성이 높음. 원본 코드에 대한 검증의 유효성을 의심함.
     * 암호화폐 관련 게시물
          + 암호화폐 관련 내용이 적은 블로그 게시물을 제출함. Python에 대한 유사한 접근법을 다룬 게시물도 있음.
     * 형식 검증의 한계
          + 형식 검증된 C 컴파일러에서 버그를 발견한 사례를 기억함. Coq 자체와 번역에 대한 신뢰성 문제를 제기함.
     * Rust의 형식 검증
          + Rust의 기본 라이브러리가 형식 검증되면, 안전하지 않은 코드를 사용하지 않는 한 메모리 처리에 대한 형식 검증 품질을 얻을 수 있는지 궁금해함.
     * 형식 검증 사양 작성
          + 형식 검증 사양 작성이 더 복잡한 속성 테스트 작성과 유사한지 궁금해함. 속성 테스트 작성이 어렵고 시간이 많이 걸림.
     * 다른 접근법과의 비교
          + Aeneas나 RustHornBelt와의 접근법 차이를 비교해달라는 요청. 포인터와 가변 대여를 어떻게 처리하는지 궁금해함.
     * Rust의 커널 채택
          + 이러한 노력이 Rust의 커널 채택을 가속화할 수 있을지 궁금해함.
     * F*의 Rust 백엔드 추가
          + F*에 Rust 백엔드를 추가하는 데 얼마나 많은 작업이 필요한지 궁금해함.
"
"https://news.hada.io/topic?id=14845","풀타임 근무하는 6자녀 어머니가 취미로 만든 스위치 게임 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    풀타임 근무하는 6자녀 어머니가 취미로 만든 스위치 게임

     * 금융기관에서 정사원으로 근무중인 여섯아이의 엄마
     * 일러스트 경험 없음. 미대 출신 아님. 게임 제작 경험 없음
     * 츠쿠르MV 를 써서 전부 독학으로 개발 및 디자인
     * 매일 2시간 정도 작업해서 약 400시간 걸려 게임 한개를 완성
          + 애들 다 재우고 24시쯤 시작해서 2시간 정도씩 개발하고 6시에 기상해서 아이들 준비
          + 비스타 돌리는 4기가램 PC에서 포토샵으로 디자인. 개발은 그래도 나름 신형
          + 의자/책상없이 수납함 위에 노트북 올려놓고 작업
     * 게임 이름은 ""츠쿠루 시리즈 룽룽 슈퍼 히어로 베이비즈 DX""

   엄청나네요. 체력도 엄청나시고... 부럽습니다.

   자녀 6명?.... 국가에서 극진히 대우해줘야합니다.

   퀄리티가 상당하더라구요

   게임제작보다 자녀 6명이 인상적입니다.

   대단하네요...

   정말 대단하네요.

   세상에 정말 대단합니다...!!!

   와..... 존경스럽습니다

   풀타임 근무 + 여섯 아이 육아 + 매일 게임 개발

   본인이 슈퍼 히어로가 아닐까 의심됩니다...

   알만툴 쯔꾸르 쪽이 아니고 액션게임 메이커 MV (Pixel Game Maker MV) 라고 합니다

   앗 그게 다른거군요. 수정해두었습니다. 제가 아는게 거기까지라 ㅎㅎ
"
"https://news.hada.io/topic?id=14875","전직 OpenAI 직원, 평생 비판 금지 계약 서명 또는 모든 지분 포기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                전직 OpenAI 직원, 평생 비판 금지 계약 서명 또는 모든 지분 포기

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 링크 변경 제안
          + X 게시물 대신 Vox 기사로 링크를 바꾸는 것이 더 나을 것이라는 의견. 기사에서는 OpenAI 전 직원들이 NDA(비밀유지 계약) 때문에 회사를 비판할 수 없다는 내용을 다룸.
     * 법률 상담 필요
          + 캘리포니아 SB 331 법안(침묵하지 않을 권리법)과 관련이 있을 수 있으므로 변호사를 찾아야 한다는 의견. 이 법안은 주로 성희롱에 초점을 맞추지만, 다른 계약에도 적용될 수 있음.
     * Jan Leike에 대한 존경
          + Jan Leike에게 추가적인 존경을 표해야 한다는 의견. 링크를 통해 그의 트윗을 확인할 수 있음.
     * 계약의 유효성
          + 계약이 유효하려면 새로운 주식 보조금이 제공되어야 한다는 의견. 기존의 보상으로 주어진 주식을 다시 계약 조건으로 제시할 수 없다는 점을 강조.
     * 다른 회사들의 사례
          + 다른 회사들이 왜 같은 조치를 취하지 않았는지 의문을 제기. 법적으로 불확실한 시도일 수 있으며, 다른 업종에서도 비슷한 사례가 발생할 수 있는지에 대한 질문.
     * NLRB에 불만 제기 권장
          + OpenAI의 요구에 직면한 사람들에게 NLRB(전국 노동 관계 위원회)에 불만을 제기하고, 캘리포니아 법률에 정통한 고용 변호사와 상담할 것을 권장.
     * 법적 고려사항
          + 계약이 법적으로 유효하려면 새로운 가치가 제공되어야 한다는 의견. 기존에 합의된 가치를 단순히 빼앗을 수 없음을 강조.
     * RSU의 이해
          + 많은 사람들이 놓치고 있는 점은 RSU(제한 주식 단위)가 보통 이중 조건을 가진다는 것. 주식이 실제로 소유되지 않으며, 회사가 언제든지 취소할 수 있다는 점을 강조.
     * NDA의 존재
          + NDA의 존재를 인정하는 것조차 위반이라는 점을 지적. 이는 OpenAI가 더 이상 투명하지 않다는 것을 의미.
     * 독재자의 징후
          + 이러한 계약 조건이 독재자의 징후라는 의견.
"
"https://news.hada.io/topic?id=14773","[번역] Claude-3로부터 더 나은 결과를 얻기 위한 프롬프트 엔지니어링 전략 (feat. Anthropic) ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [번역] Claude-3로부터 더 나은 결과를 얻기 위한 프롬프트 엔지니어링 전략 (feat. Anthropic)

  들어가며

   작년 중순쯤 OpenAI에서 ChatGPT 모델을 사용하며 더 나은 답변을 얻기 위한 프롬프트 작성 전략 6가지를 번역 및 정리한 적이 있었는데요, 최근 Claude-3도 본격적으로 사용을 시작하면서 찾아보니 미묘하게 예시 프롬프트들이 느낌이 다른 것을 발견하게 되었습니다.

   뭔가 다른 점이 있나하고 참고할 자료를 찾아보다가 Anthropic에서 공개한 프롬프트 엔지니어링 문서가 있길래 대략 읽어보았는데, OpenAI에서 정리했던 6가지 프롬프트 작성 전략과 겹치는 부분이 많아보여서 전문을 다 정리하기 보다는 경쟁 모델(...)인 ChatGPT에게 간략히 정리를 요청해봤습니다.

   한 번 살펴보시고, 부족한 내용은 OpenAI의 GPT 모범 사례: 개요. 더 나은 답변을 얻기 위한 6가지 프롬프트 작성 전략 (Six strategies for getting better results) 시리즈와 함께 Anthropic의 원문을 살펴봐주세요. :D

  소개

   이번 문서는 Claude-3의 프롬프트 엔지니어링 전략에 대해 다루고 있습니다. 이러한 전략들을 사용하여 Claude-3의 성능을 향상시키고 특정 사용 사례에 맞게 응답을 미세 조정할 수 있습니다. 이러한 기술은 필수적이지 않지만 Claude의 입력과 출력을 개선하는데 도움을 줄 수 있습니다.

   프롬프트 엔지니어링은 실험 과학으로, 프롬프트를 반복하고 테스트하여 성능을 최적화하는 과정을 포함합니다. 즉, 프롬프트 엔지니어링은 이는 엔티티 추출, 질문 응답, 텍스트 요약에서 복잡한 작업으로 이어지는 반복적인 개발과 평가를 통해 진행되며, 이 과정에서 다양한 테스트 케이스를 생성하고, 초기 프롬프트를 개발하여 모델의 반응을 평가하고 수정하는 단계를 포함합니다.

   Claude와 다른 AI 모델들과의 비교를 통해, Claude-3은 특정 역할을 부여받거나 XML 태그를 사용하는 등의 다양한 프롬프트 공학 기술을 사용하여 성능을 향상시킬 수 있다는 점에서 차별화됩니다. 이러한 기술들은 Claude가 더 정확하고 일관된 출력을 제공하도록 도와줍니다.

  주요 기법들

   다음은 문서에 설명하고 있는 주요 기법들입니다:

    명확하고 직접적으로 묻기(Be clear & direct

   Claude에게 원하는 응답을 알려주기 위기 위해 명확한 지침과 맥락을 제공하세요:
    1. 자세한 맥락과 지시 제공: 작업을 정확하게 수행하기 위해 Claude에게 가능한 한 많은 맥락과 상세한 지시를 제공해야 합니다. 예를 들어, 개인정보를 제거해달라는 요청에서 구체적으로 어떤 정보를 어떻게 제거해야 하는지 명확히 지시하는 것이 포함됩니다.

   Role                                                                                                                                                                                                                          Prompt
   User We want to anonymize some text by removing all personally identifiable information (PII). <br /><br />Please follow these steps:<br />1. Replace all instances of names, phone numbers, and home and email addresses with 'XXX'.<br />2. If the text contains no PII, copy it word-for-word without replacing anything.<br />3. Output only the processed text, without any additional commentary.<br /><br />Here is the text to process:<br />{{TEXT}}

    2. 번호 목록 또는 글머리 기호 사용: 복잡한 작업 지시 시 번호 목록이나 글머리 기호를 사용하여 지시를 구분하면 Claude가 지시를 더 잘 이해하고 따를 수 있습니다. 예를 들어, 교과서 장을 교육 계획으로 전환하라는 지시에서 각 단계를 명확하게 분리하여 지시할 수 있습니다.

   Role                                                                                                                                                                                                                                    Prompt
   User Your task is turn the given textbook chapter into a comprehensive lesson plan. To do this task, you should:<br />1. Extract and summarize key concepts by section<br />2. Convert each extracted concept into a 30 minute lesson plan, including a list of questions to check comprehension.<br />3. Design an accompanying homework assignment that reinforces learnings from this chapter.<br /><br />Here is the chapter:<br /><chapter><br />{{CHAPTER}}<br /></chapter>

    3. 원하는 것을 구체적으로 명시: Claude에게 명확한 대답이나 특정한 입장을 요구할 때 이를 명시적으로 밝혀야 합니다. 예를 들어, ""역대 최고의 농구 선수가 누구인가?""라는 질문에, 구체적으로 하나의 선수를 선택하도록 요구할 수 있습니다.

               Role                                                                                                                                                                                                                                                                                        Prompt
   User                          (안 좋은 예) Who is the best basketball player of all time?<br /> (좋은 예) Who is the best basketball player of all time? Yes, there are differing opinions, but if you absolutely had to pick one player, who would it be?
   Assistant (Claude's response) There is no definitive answer to who is the best basketball player of all time, as reasonable people can disagree on this. However, if forced to choose just one player, I would say Michael Jordan is most commonly considered the GOAT (Greatest Of All Time) based on his exceptional talent, championships, awards, and cultural impact on the game of basketball. But others like LeBron James, Kareem Abdul-Jabbar, Wilt Chamberlain and Bill Russell are also frequently mentioned in the debate. It's a subjective call without a clear consensus.

    4. 명확한 프롬프팅의 황금률: 프롬프트를 다른 사람에게 보여주고 그 지시대로 실행할 수 있는지 확인하십시오. 이는 Claude에게도 마찬가지로 적용되어, 지시가 명확한지 검증하는 데 도움이 됩니다.

    예시 제공하기 (Use examples

   원하는 출력 형식이나 스타일을 설명하기 위해 프롬프트에 예시를 포함하세요.
    1. 왜 예시를 사용하는가?: 예시를 사용하면 Claude가 주어진 지시를 더 잘 이해하고 원하는 출력 형식을 명확하게 파악할 수 있습니다. 이를 통해 모델이 더 정확하고 일관된 결과를 생성하도록 도울 수 있습니다.
    2. 효과적인 예시 만들기: 효과적인 예시는 입력과 예상 출력을 명확하게 보여줘야 합니다. 예시는 실제 사용 사례를 반영해야 하며, Claude가 학습할 수 있는 충분한 정보를 포함해야 합니다.

                  Role                                                                                                                                                                                                                                                                                                              Content
   User                               I will give you some quotes. Please extract the author from the quote block.<br /><br />Here is an example:<br /><example><br />Quote:<br />""When the reasoning mind is forced to confront the impossible again and again, it has no choice but to adapt.""<br />― N.K. Jemisin, The Fifth Season<br />Author: N.K. Jemisin<br /></example><br /><br />Quote:<br />""Some humans theorize that intelligent species go extinct before they can expand into outer space. If they're correct, then the hush of the night sky is the silence of the graveyard.""<br />― Ted Chiang, Exhalation<br />Author:
   Assistant<br />(Claude's response) Ted Chiang

    3. 출력 형식화: 예시를 사용하여 원하는 출력 형식을 지정함으로써, Claude가 결과를 예측 가능하고 일관된 방식으로 제공할 수 있도록 합니다. 이는 특히 데이터 추출이나 보고서 생성과 같은 작업에서 유용합니다.

               Role                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Content
   User                          <example><br />Text: Sarah Martinez, a dedicated nurse, was known for her compassionate care at the local hospital. David Thompson, an innovative software engineer, worked tirelessly on groundbreaking projects.<br />Output:<br />1. Sarah Martinez [NURSE]<br />2. David Thompson [SOFTWARE ENGINEER]<br /></example><br /><br /><example><br />Text: Chef Oliver Hamilton has transformed the culinary scene with his farm-to-table restaurant. Just down the street, you'll find the library, where head librarian Elizabeth Chen has worked diligently to create a welcoming space for all.<br />Output:<br />1. Oliver Hamilton [CHEF]<br />2. Elizabeth Chen [LIBRARIAN]<br /></example><br /><br />Text: At the town's bustling farmer's market, you'll find Laura Simmons, a passionate organic farmer known for her delicious produce. In the community center, Kevin Alvarez, a skilled dance instructor, has brought the joy of movement to people of all ages.<br />Output:
   Assistant (Claude's response) 1. Laura Simmons [ORGANIC FARMER]<br />2. Kevin Alvarez [DANCE INSTRUCTOR]

    4. 주의 사항: 예시를 사용할 때는 너무 한정된 데이터에 의존하지 않도록 주의해야 하며, Claude가 특정 패턴에만 과도하게 의존하는 것을 방지해야 합니다.
    5. 반복 및 수정: 처음 제공한 예시로 원하는 결과를 얻지 못했다면, 예시를 수정하거나 새로운 예시를 추가하여 점진적으로 개선해야 합니다. 이 과정을 통해 모델의 출력을 지속적으로 개선할 수 있습니다.
          + 결과 분석: 클로드의 답변에서 원하는 것과 다른 패턴을 찾아보세요. 이렇게 하면 예시가 불분명하거나 오해의 소지가 있는 부분 또는 더 많은 예시가 도움이 될 수 있는 부분을 파악하는 데 도움이 될 수 있습니다.
          + 예시 추가: 클로드가 특정 유형의 입력에 어려움을 겪는다면 해당 시나리오를 구체적으로 다루는 추가 예제를 제공하세요.
          + 기존 예제 수정: 때로는 예제를 조금만 수정해도 큰 차이를 만들 수 있습니다. 다양한 표현, 형식 또는 구조로 실험하여 무엇이 가장 효과적인지 알아보세요.
          + Claude의 도움 받기: 좋은 예시를 작성하는 것은 어려운 일입니다! Claude에게 주어진 작업에 대한 예제의 다양성이나 관련성을 평가해 달라고 요청하거나 참고할 기존 예제 세트를 제공받아 새로운 예제를 만들 수 있습니다.

    클로드에게 역할 부여하기(Give Claude a role)

   각 사용 사례별 성능을 높이기 위해 Claude에게 전문가와 같은 특정한 역할을 부여합니다:
    1. 역할 프롬프팅이 작동하는 방식: 클로드에게 구체적인 역할을 부여함으로써, 그가 특정 상황이나 문제를 더 정확하게 이해하고 대응할 수 있도록 합니다. 예를 들어, 클로드에게 수학 문제를 해결하는 '수학 전문가' 역할을 부여하면 더 나은 성능을 발휘할 수 있습니다.
    2. 역할 프롬프팅을 사용할 때: 특히 기술적이거나 복잡한 작업을 수행할 때, 또는 특정 커뮤니케이션 스타일이 필요할 때 역할 프롬프팅을 사용하면 좋습니다. 이 방법은 클로드의 기본 성능을 향상시키는 데도 도움이 됩니다.

   예를 들어, There are two ducks in front of a duck, two ducks behind a duck and a duck in the middle. How many ducks are there? 과 같은 문제를 풀어야 할 때는 다음과 같은 방식을 사용해볼 수 있습니다:

               Role                                                                                                                                                                                         Content
   User                          You are a master logic bot designed to answer complex logic problems. Solve this logic puzzle. There are two ducks in front of a duck, two ducks behind a duck and a duck in the middle. How many ducks are there?
   Assistant (Claude's response) [Automatically outputting thinking step by step as part of its training...] Without additional clarification or assumptions, the logic puzzle does not provide enough information to determine the exact number of ducks. The answer could range from a minimum of 3 ducks to a maximum of 5 ducks, depending on the interpretation of the given information.

    3. 역할 프롬프팅 예시: 다양한 청중에게 '왜 하늘이 파란색인지' 설명하도록 클로드에게 각기 다른 역할(유치원 선생님, 대학교수)을 부여하는 예시가 있습니다. 각 역할에 따라 클로드의 설명 스타일이 달라집니다.

               Role                                                                                                                                                                                                                                       Content
   User                          You are a kindergarten teacher. Succinctly explain why the sky is blue to your students.
   Assistant (Claude's response) Have you ever wondered why the sky looks so pretty and blue? The reason is because of the sunlight! When the sun's rays shine down through the Earth's atmosphere, they hit lots of tiny gas molecules in the air. The blue colors in the sunlight get scattered and bounced all around by these molecules. And that's what makes the sky look blue to our eyes! Isn't that neat? The bright blue sky is like nature's big colorful painting just for us.

               Role                                                                                                                                                                                                                                                                                                                                                                                                                                                  Content
   User                          You are a graduate physics professor. Succinctly explain why the sky is blue to your students.
   Assistant (Claude's response) The sky appears blue due to the phenomenon of Rayleigh scattering of sunlight by the molecules in the Earth's atmosphere. Sunlight, which is composed of a spectrum of wavelengths, interacts with the gaseous molecules in the atmosphere. The shorter wavelengths of visible light, corresponding to the blue and violet colors, are scattered more efficiently by these molecules than the longer wavelengths.<br /><br />This selective scattering of the shorter blue wavelengths in all directions by the atmospheric molecules is what causes the sky to appear blue when viewed from the Earth's surface. The longer wavelengths of red and orange, being less scattered, tend to pass through the atmosphere more directly, giving rise to the reddish hues we see during sunrise and sunset when the sunlight has to travel through a greater depth of the atmosphere.

    4. 효과적인 역할 프롬프팅 팁: 클로드에게 역할을 부여할 때는 구체적인 맥락과 역할 정보를 제공하는 것이 중요합니다. 다양한 역할과 프롬프트를 실험하여 최적의 접근 방식을 찾아야 합니다.

    XML 태그 사용(Use XML tags)

   XML 태그를 함께 사용하여 프롬프트와 응답을 구조화하여 명확성을 높일 수 있습니다:
    1. XML 태그란 무엇인가?: XML 태그는 <tag>콘텐츠 내용</tag>와 같은 괄호 태그 내용을 감싸는데 사용합니다. 이 태그들은 명령, 예시 또는 입력 데이터를 구분하여 클로드가 맥락을 더 잘 이해하고 정확한 출력을 생성하도록 돕습니다.
       태그 이름에 있어, Claude가 특별히 더 잘 동작하는 표준적인 XML 태그는 없습니다. 예를 들어, <doc>는 <document>와 마찬가지로 잘 동작합니다. 하지만 함수 호출 기능을 사용할 때에는 특정 태그 이름을 사용해야 합니다.
    2. XML 태그 사용 이유: XML 태그를 사용하면 프롬프트의 다양한 부분을 명확하게 구분하여 보다 정확한 반응을 유도할 수 있습니다. 특히 복잡한 프롬프트나 다양한 입력을 다룰 때 유용합니다.
    3. XML 태그 사용 방법: XML 태그를 사용하여 명령, 내용, 예시를 분리할 수 있으며, 변수 입력이 포함된 프롬프트 템플릿을 처리할 때도 XML 태그를 사용하여 콘텐츠 삽입 위치를 지정할 수 있습니다:

   Role                                                                                                                                                                Content
   User Please analyze this document and write a detailed summmary memo according to the instructions below, following the format given in the example:<br /><document><br />{{DOCUMENT}}<br /></document><br /><br /><instructions><br />{{DETAILED_INSTRUCTIONS}}<br /></instructions><br /><br /><example><br />{{EXAMPLE}}<br /></example>

   다음은 특정한 변수 입력의 예시입니다:

   Role                                                         Content
   User I will tell you the name of an animal. Please respond with the noise that animal makes.<br /><animal>{{ANIMAL}}</animal>

   구조화된 출력을 위한 요청 시에도 사용합니다:

   Role                                                                                                                                                                                                                                                                                                                                                                                   Content
   User Please extract the key details from the following email and return them in XML tags:<br /><br />- Sender name in <sender></sender> tags<br />- Main topic in <topic></topic> tags<br />- Any deadlines or dates mentioned in <deadline></deadline> tags<br /><br /><email><br />From: John Smith<br />To: Jane Doe<br />Subject: Project X Update<br /><br />Hi Jane,<br /><br />I wanted to give you a quick update on Project X. We've made good progress this week and are on track to meet the initial milestones. However, we may need some additional resources to complete the final phase by the August 15th deadline.<br /><br />Can we schedule a meeting next week to discuss the budget and timeline in more detail?<br /><br />Thanks,<br />John<br /></email>

   다음과 같은 답변을 받으실 수 있습니다:

               Role                                                                 Content
   Assistant (Claude's response) <sender>John Smith</sender><br /><topic>Project X Update</topic><br /><deadline>August 15th<br /></deadline>`

    4. XML 사용 모범 사례: XML 태그를 최대한 활용하려면 다음 팁을 염두에 두세요:
          + <instruction>이나 <example>, <input> 등과 같이, 태그에 포함된 콘텐츠를 반영하는 설명적인 태그 이름을 사용하세요.
          + 프롬프트 전체에서 태그 이름에 일관성을 유지해야 하며, 태그는 여는 태그<tag>와 닫는 태그</tag>의 쌍을 함께 사용해야 합니다.
          + 필요한 경우 태그를 중첩하여 사용할 수 있지만, 복잡성에 따라 5개 이상의 중첩 레이어가 있는 경우 성능 저하가 일어날 수 있습니다.

    프롬프트 연결하기(Chain prompts)

   복잡한 작업을 더 작고 관리하기 쉬운 단계로 나누어 더 나은 결과를 얻으세요:
    1. 체인 프롬프트란 무엇인가? (What is prompt chaining?): 체인 프롬프트는 복잡한 목표를 달성하기 위해 하나의 출력을 다음 입력으로 사용하여 작업을 순차적으로 처리하는 방법입니다. 이 방식은 정확도와 일관성을 향상시키는 데 도움이 됩니다.
    2. 체인 프롬프트 사용 시기 (When to use prompt chaining): 여러 단계를 요구하는 작업이나 복잡한 지시사항을 포함하는 경우, 체인 프롬프트를 사용하여 각 단계의 성능을 개선할 수 있습니다.
    3. 체인 프롬프트의 효과적인 사용 팁 (Tips for effective prompt chaining): 각 서브태스크를 단순하고 명확하게 유지하고, XML 태그를 사용하여 데이터를 구조화하는 것이 중요합니다.
    4. 예시 (Examples): 문서와 질문을 사용하여 답변을 생성하거나 문법 오류를 식별하고 이를 검증하는 등의 작업을 체인 프롬프트로 수행하는 방법을 제시합니다:

   예제: 문서 및 인용문(quotes) 사용하여 질문에 답변하기
     * 질문가 함께 주어진 문서에로부터 Claude가 문서 내의 인용문들을 사용하여 답변을 생성하도록 합니다.

   프롬프트 1. 인용문(quotes) 추출하기

   Role                                                                                                                                                                                                    Content
   User Here is a document, in <document></document> XML tags:<br /><br /><document><br />{{DOCUMENT}}<br /></document><br /><br />Please extract, word-for-word, any quotes relevant to the question {{QUESTION}}. Please enclose the full list of quotes in <quotes></quotes> XML tags. If there are no quotes in this document that seem relevant to this question, please say ""I can't find any relevant quotes"".

   프롬프트 2. (프롬프트 1의 {{QUOTES}} 출력을 사용하여) 답변하기

   Role                                                                                                                                                                                                                                                             Content
   User I want you to use a document and relevant quotes from the document to answer a question.<br />Here is the document:<br /><document><br />{{DOCUMENT}}<br /></document><br /><br />Here are direct quotes from the document that are most relevant to the question:<br /><quotes><br />{{QUOTES}}<br /></quotes><br /><br />Please use these to construct an answer to the question ""<br />{{QUESTION}}""<br /><br />Ensure that your answer is accurate and doesn't contain any information not directly supported by the quotes.

    클로드에게 생각하도록 하기(Let Claude think)

   단계별 사고를 장려하여 Claude의 결과물 품질을 향상시킬 수 있습니다:
    1. 복잡한 질문에 대응: 클로드가 복잡한 문제에 직면했을 때, 단계별로 문제를 분해하여 접근하면 보다 세밀하고 정확한 대답을 할 수 있습니다. 이는 특히 논리적이거나 분석적인 사고가 필요한 문제에서 유용합니다.

   Role Content
   User Use the following clues to answer the multiple-choice question below, using this procedure:<br />1. Go through the clues one by one and consider whether each is potentially relevant<br />2. Combine the relevant clues to reason out the answer to the question<br />3. Map the answer to one of the multiple choice options: (a), (b), or (c)<br /><br />Clues:<br />1. Miss Scarlett was the only person in the lounge.<br />2. The person with the pipe was in the kitchen.<br />3. Colonel Mustard was the only person in the observatory.<br />4. Professor Plum was not in the library nor the billiard room.<br />5. The person with the candlestick was in the observatory.<br /><br />Question: Was Colonel Mustard in the observatory with the candlestick?<br />(a) Yes; Colonel Mustard was in the observatory with the candlestick<br />(b) No; Colonel Mustard was not in the observatory with the candlestick<br />(c) Unknown; there is not enough information to determine whether Colonel Mustard was
   in the observatory with the candlestick<br />

    2. 단계별로 생각하게 하는 방법: 사용자는 프롬프트에 ""단계별로 생각하라""는 지시를 포함시켜 클로드에게 문제를 분석적으로 접근하도록 할 수 있습니다. 이렇게 하면 클로드는 각 단계를 설명하면서 최종 결론에 도달합니다.
    3. 생각 과정 포착: 생각하는 과정을 시각화하기 위해 XML 태그를 사용하여 클로드의 생각과정과 최종 답변을 명확하게 구분할 수 있습니다. 이는 사용자가 클로드의 추론 과정을 보다 명확하게 이해하는 데 도움을 줍니다.

          Role                                                                                               Content
   User                [Rest of prompt] Before answering the question, please think about it step-by-step within <thinking></thinking> tags. Then, provide your final answer within <answer></answer> tags.
   Assistant (prefill) <thinking>

   (이는 아래에서 살펴볼 응답 미리 채워주기 기법을 사용한 것입니다.)

               Role                                                                    Content
   Assistant (Claude's response) [Reasoning through the problem step-by-step]<br /></thinking><br /><br /><answer><br />[Final answer]<br /></answer>

    4. 고려 사항: 이 기법을 사용할 때는 클로드의 출력이 길어질 수 있으므로 응답 시간이 늘어날 수 있습니다. 따라서 사용 전에는 이러한 특성을 고려하여 적절한 상황에서 사용해야 합니다.

    Claude의 응답 미리 채워주기(Prefill Claude's response)

   원하는 방향으로 출력을 유도하기 위해 클로드의 응답의 시작부분을 미리 채우고 시작합니다:
    1. 클로드의 응답 미리 채우기 이유: 이 기법은 사용자가 특정 형식이나 내용으로 응답하기를 원할 때 유용합니다. 예를 들어, 미리 정해진 형식에 맞춰 정보를 정리하거나, 특정 단어나 문구로 응답을 시작하게 하여 응답의 일관성을 유지할 수 있습니다. 아래와 같은 경우, {로 시작하는 응답을 미리 채움으로써 Claude가 JSON 형식으로 답변을 하도록 유도할 수 있습니다.

           ole                                                                                                                                                                                                                                                       Good Prompt
   User                Please extract the name, size, price, and color from this product description and output it within a JSON object. <br/><br/> <description>The SmartHome Mini is a compact smart home assistant available in black or white for only $49.99. At just 5 inches wide, it lets you control lights, thermostats, and other connected devices via voice or app—no matter where you place it in your home. This affordable little hub brings convenient hands-free control to your smart devices.</description>
   Assistant (prefill) {

   Claude의 응답은 다음과 같습니다.

               Role                                                                               Response
   Assistant (Claude's response) ""name"": ""SmartHome Mini"", <br />""size"": ""5 inches wide"",<br />""price"": ""$49.99"",<br />""colors"": [<br />""black"",<br />""white""<br />]<br />}

    2. 클로드의 응답을 어떻게 미리 채울까?: 사용자는 클로드에게 시작할 텍스트를 제공함으로써 응답의 방향을 설정할 수 있습니다. 이 방법은 특히 API를 통해 자동화된 시스템에서 유용하며, 구조화된 데이터 포맷에서 클로드가 필요한 정보를 정확하게 제공하도록 할 수 있습니다.

    출력 형식 제어(Control output format)

   일관성과 가독성을 보장하기 위해 원하는 출력 형식을 지정할 수 있습니다:
    1. 원하는 형식 지정하기: 사용자는 클로드에게 구체적인 출력 형식을 지정하면 결과물의 일관성과 정확성을 높일 수 있습니다. 이는 특히 데이터 처리나 보고서 작성 시 필수적인 요소로, 명확한 형식 지침이 중요합니다. 예를 들어, JSON, XML, HTML, Markdown 등 다양한 형식으로 응답하도록 설정할 수 있습니다. 이렇게 클로드에게 명확한 형식 지침을 제공함으로써 일관된 출력 형식을 보장합니다.

               Role                                                                                 Content
   User                          Please write a haiku about a cat. Use JSON format with the keys ""first_line"", ""second_line"", and ""third_line"".
   Assistant (Claude's response) {<br />""first_line"": ""Soft furry feline"",<br />""second_line"": ""Napping in the warm sunlight"",<br />""third_line"": ""Purring contentedly""<br />}

    2. 응답을 미리 채우기: 응답의 시작 부분을 미리 채워 넣음으로써 클로드가 지정된 형식에 맞춰 내용을 생성하도록 유도할 수 있습니다. 이 방법은 구조화된 데이터 포맷을 사용할 때 특히 유용합니다.

   Role Content
   User Please generate a recipe for chocolate chip cookies in JSON format.
   Assistant (prefill) {
   Assistant (Claude's response) ""title"": ""Chocolate Chip Cookies"",<br />""ingredients"": [<br />""2 1/4 cups all-purpose flour"",<br />""1 tsp baking soda"",<br />""1 tsp salt"",<br />""1 cup unsalted butter, softened"",<br />""3/4 cup granulated sugar"",<br />""3/4 cup brown sugar"",<br />""1 tsp vanilla extract"",<br />""2 large eggs"",<br />""2 cups semisweet chocolate chips""<br />],<br />""instructions"": [<br />""Preheat the oven to 375°F (190°C) and line baking sheets with parchment paper."",<br />""In a medium bowl, whisk together the flour, baking soda, and salt. Set aside."",<br />""In a large bowl, beat the butter and sugars with an electric mixer until light and fluffy, about 2-3 minutes."",<br />""Beat in the vanilla and eggs one at a time until well combined."",<br />""Gradually stir the flour mixture into the butter mixture until just combined."",<br />""Fold in the chocolate chips."",<br />""Drop rounded tablespoons of the dough onto the prepared baking sheets, about 2 inches apart."",<br />""Bake
   for 9-11 minutes, until the edges are golden brown."",<br />""Allow the cookies to cool on the baking sheets for 5 minutes before transferring to a wire rack to cool completely.""<br />],<br />""yield"": ""About 3 dozen cookies""<br />}

    3. 예시 제공: 적절한 출력 형식을 더 명확히 전달하기 위해 예시를 제공할 수 있습니다. 이는 클로드가 요구 사항을 더 잘 이해하고 적절한 형식의 응답을 생성하도록 도와, 특히 복잡한 형식을 요구하는 작업에 유용합니다.

                                Role                                                                                                                                                                                                                                                                                                                                                                                                  Content
   User                                                            Your task is to write a poem. Here are some examples of ideal formatting for the poem:<br /><br /><poem><br />Title: ""Autumn Leaves""<br />Verse 1:<br />Crisp autumn leaves dance<br />In the gentle, chilly breeze<br />A colorful sight<br /><br />Verse 2:<br />Red, orange, and gold<br />Painting the world with beauty<br />Before winter comes<br /></poem><br /><br /><poem><br />Title: ""Moonlit Night""<br />Verse 1:<br />Moonlight casts shadows<br />Across the tranquil garden<br />A peaceful retreat<br /><br />Verse 2:<br />Stars twinkle above<br />As crickets sing their nightsong<br />Nature's lullaby<br /></poem><br /><br />Now, please write a poem about a sunset, following the formatting of the examples above.
   Assistant (prefill)                                             <poem>
   Assistant (Claude's response)                                   Title: ""Sunset Symphony""<br />Verse 1:<br />Fiery sun descends<br />Painting the sky with wonder<br />A masterpiece forms<br /><br />Verse 2:<br />Pinks, purples, and reds
   Blending in pure harmony<br />Day bids night hello<br /></poem>

    4. 출력 제어를 위한 팁: 효과적인 출력 제어를 위해 다양한 예시와 명확한 지침을 제공해야 합니다. 가능한 여러 종류의 예시를 제공하며 원하는 형식을 강조하고, 실험을 통해 최적의 방법을 찾아내는 것이 중요합니다. 이러한 과정을 통해 다양한 기법을 조합해 보며 최적의 결과를 도출해나가며 클로드의 성능을 지속적으로 개선할 수 있습니다.

    Claude에게 다시 작성할 것을 요청하기 (Ask Claude for rewrites)

   빨간펜(rubric)으로 수정을 요청하는 부분을 알려줘서 Claude가 출력을 반복하고 개선하도록 합니다:
    1. 재작성 요청의 이유: 클로드의 초기 응답이 정확하지 않거나 기대에 미치지 못할 때, 재작성을 요청하여 출력을 개선할 수 있습니다. 사용자는 특정 형식, 스타일 또는 내용상의 세부 사항을 명확히 하여 클로드가 더 정확하게 반응하도록 유도할 수 있습니다.
    2. 재작성 요청 방법: API를 통해 이전에 생성된 텍스트를 포함시키고, 재작성을 위한 구체적인 지시사항을 추가합니다. 예를 들어, 문단을 다시 작성하되 특정 주제에 집중하도록 요청할 수 있습니다.

          Role                                                                                                                                              Prompt
   User                Here's a paragraph:<br /><paragraph><br />{{PARAGRAPH}}<br /></paragraph><br /><br />I'd like you to rewrite it using the following instructions:<br /><instructions><br />{{INSTRUCTIONS}}<br /></instructions><br /><br />Please put your rewrite in <rewrite></rewrite> tags.
   Assistant (prefill) <rewrite>

    3. 효과적인 재작성 지시 작성: 재작성을 위한 지시는 명확하고 구체적이어야 합니다. 원하는 형식, 톤, 스타일, 추가 정보 등을 포함시켜 클로드가 기대하는 바를 정확히 이해할 수 있도록 해야 합니다.

               Role                                                                   Prompt
   User                          Tell me about all the ways I can get fitter.
   Assistant (Claude's response) Here are some ways you can get fitter: [list-style response]
   User                          Rewrite this as a single paragraph of text, focusing on the most effective strategies.
   Assistant (Claude's response) If you're looking to get fitter, some of the most effective strategies include: [brief paragraph-style response]

    4. 반복적인 재작성 과정: 때로는 하나의 재작성만으로는 완벽한 결과를 얻기 어렵습니다. 이럴 때는 여러 번의 재작성을 통해 점차적으로 결과를 개선하고, 각 단계마다 피드백을 제공하여 클로드가 사용자의 선호도를 학습하도록 할 수 있습니다.

    긴 컨텍스트 창 팁(Long context window tips)

   Claude의 긴 컨텍스트 창을 활용하도록 프롬프트를 최적화 할 수 있습니다:

   다음은 ""긴 컨텍스트 창 팁 (Long Context Window Tips)"" 문서의 각 섹션에 대한 자세한 설명입니다:
    1. 긴 문서 다루기 (Handling Long Documents): 긴 문서를 다룰 때는 중요한 정보를 문서의 앞부분에 배치하고, 질문을 문서의 끝에 두어야 합니다. 이렇게 하면 클로드가 전체 문서를 통틀어 필요한 정보를 효과적으로 처리하고 적절한 답변을 제공할 수 있습니다.

Here are some documents for you to reference for your task:

<documents>
<document index=""1"">
<source>
(a unique identifying source for this item - could be a URL, file name, hash, etc)
</source>
<document_content>
(the text content of the document - could be a passage, web page, article, etc)
</document_content>
</document>
<document index=""2"">
<source>
(a unique identifying source for this item - could be a URL, file name, hash, etc)
</source>
<document_content>
(the text  content of the document - could be a passage, web page, article, etc)
</document_content>
</document>
...
</documents>

[Rest of prompt]

    2. 문서-질문 배치 (Document-query Placement): 문서와 관련된 질문은 문서 데이터가 제공된 후에 위치시켜야 합니다. 이 구조는 클로드가 문서 전체를 참고하여 더 정확한 답변을 할 수 있게 만듭니다.
    3. 문서 Q&A 작성 팁 (Tips for Document Q&A): 문서 기반 질의응답 작업을 할 때는 질문을 문서 끝에 배치하고, 관련 인용문을 찾아 응답에 반영하도록 합니다. 이는 결과의 정확성을 높이는 데 기여합니다.

   Role Content
   User I'm going to give you a document. Read the document carefully, because I'm going to ask you a question about it. Here is the document: <document>{{TEXT}}</document><br /><br />First, find the quotes from the document that are most relevant to answering the question, and then print them in numbered order in <quotes></quotes> tags. Quotes should be relatively short. If there are no relevant quotes, write ""No relevant quotes"" instead.<br /><br />Then, answer the question in <answer></answer> tags. Do not include or reference quoted content verbatim in the answer. Don't say ""According to Quote [1]"" when answering. Instead make references to quotes relevant to each section of the answer solely by adding their bracketed numbers at the end of relevant sentences.<br /><br />Thus, the format of your overall response should look like what's shown between the <examples></examples> tags. Make sure to follow the formatting and spacing exactly.<br /><br /><examples><br />[Examples of
   question + answer pairs, with answers written exactly like how Claude's output should be structured]<br /></examples><br /><br />If the question cannot be answered by the document, say so.<br /><br />Here is the first question: {{QUESTION}}

    4. 다지선다 문제 생성 (Multiple Choice Question Generation): 문서를 기반으로 다지선다 문제를 만들 때는 문서 내용에 기반한 예시 문제와 답을 제공합니다. 이는 클로드가 문제를 생성할 때 일관된 형식과 내용을 유지하도록 돕습니다.

   Role Content
   User Your task is to generate multiple choice questions based on content from the following document:<br /><document><br />{{DOCUMENT}}<br /></document><br /><br />Here are some example multiple choice questions and answers based on other parts of the text:<br /><examples><br />Q1: [Example question 1, created from information within the document]<br />A. [Answer option A]<br />B. [Answer option B]<br />C. [Answer option C]<br />D. [Answer option D]<br />Answer: [Correct answer letter]<br /><br />Q2: [Example question 2, created from information within the document]<br />A. [Answer option A]<br />B. [Answer option B]<br />C. [Answer option C]<br />D. [Answer option D]<br />Answer: [Correct answer letter]<br /></examples><br /><br />Instructions:<br />1. Generate 5 multiple choice questions based on the provided text.<br />2. Each question should have 4 answer options (A, B, C, D).<br />3. Indicate the correct answer for each question.<br />4. Make sure the questions are
   relevant to the text and the answer options are all plausible.

  더 읽어보기

   https://docs.anthropic.com/claude/docs/prompt-engineering

   <br /><br />


   이 글은 GPT 모델로 정리한 글을 바탕으로 한 것으로, 원문의 내용 또는 의도와 다르게 정리된 내용이 있을 수 있습니다. 관심있는 내용이시라면 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다. 🤗

   ⚠️광고⚠️: 🔥파이토치 한국 사용자 모임🇰🇷이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일💌로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=14812","스퀘어스페이스, Permira와 69억 달러 규모 현금 거래로 비상장 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               스퀘어스페이스, Permira와 69억 달러 규모 현금 거래로 비상장 전환

        Hacker News 의견

     * 현재 기술 버블이 끝나가고 있으며, 사모펀드(Private Equity)가 기존에 구축된 회사들에서 마지막 한 방울까지 짜낼 것이고, 우리는 Web 3.0으로 넘어갈 것임. Web 3.0은 자체 호스팅, 링크 디렉토리, 뉴스레터, 방명록 등 Web 1.0과 유사할 것으로 예상됨.
     * 2014년 Squarespace에서 지옥 같은 기술 면접 프로세스를 처음 경험함. 엔트리 레벨로 여겨지는 역할에 대해 약 4번의 초기 스크리닝/테이크 홈 과제를 수행했으나, 결국 포기했고 그 순간부터 회사로서의 Squarespace를 싫어하게 됨. 테이크 홈 과제는 해당 역할과 관련이 없었음에도 프로세스에 주입하는 것이 타당하다고 생각했음. 그들이 몰락에 한 걸음 더 가까워진 것을 기쁘게 생각함.
     * Permira라는 글로벌 사모펀드가 Squarespace 인수에 참여했다는 소식에 현재 Squarespace 사용자들은 값 인상을 걱정하고 있음.
     * 즉, 지금이 차세대 Squarespace를 만들기에 좋은 시기임.
     * M&A 거래에서 거래 가격의 30% 프리미엄이 추세인 것이 흥미로움. 그 이유를 조사해 보려 했으나 이 숫자가 왜 그렇게 널리 퍼져 있는지에 대한 좋은 설명을 찾을 수 없었음.
     * 사모펀드는 인기 있는 크롬 확장 프로그램을 사들인 다음 빠른 수익을 위해 망가뜨리는 애드웨어 회사와 같은 행동을 보임. [1]
     * PE가 제품과 문화를 파괴하여 어떻게든 돈을 벌려고 한다는 말은 들었지만, 연 매출 3억 달러 미만에 적자인 회사에 60억 달러 이상을 지불하고 어떻게 그 돈을 회수할 수 있을지 이해가 안 됨.
     * Google Domains로의 전환 후에도 변화에 대한 인센티브가 없었다면...
     * 지난 10년 동안 PE가 소유한 것들의 추세가 증가했는가? PE가 지난 몇 년 동안 더 많은 자금을 확보하여 회사들을 빨아들일 수 있게 되었는가?
     * 팟캐스트 시장이 곧 붕괴할 것으로 보임.
"
"https://news.hada.io/topic?id=14779","6o6으로 6502 위에서 6502 가상화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        6o6으로 6502 위에서 6502 가상화

6502 CPU를 6502 CPU로 가상화하는 6o6 소개 (그리고 The Incredible KIMplement 1.0 릴리즈)

     * 저자가 20년 동안 간헐적으로 작업해온 버킷리스트 프로젝트 중 하나인 ""The Incredible KIMplement""의 1.0 버전을 공식 릴리즈함
     * The Incredible KIMplement는 1MHz, 1KB 메모리의 MOS/Commodore KIM-1 6502 기반 싱글보드 컴퓨터를 에뮬레이션하는 프로그램
          + Commodore 64에서 동작하며 KIM-1의 TTY 지원 기능과 16KB 확장 RAM을 제공
     * 더 중요한 것은 6o6(6502-on-6502)이라는 완전 가상화된 NMOS 6502 CPU를 6502 CPU에서 구현했다는 점
          + 게스트 코드 실행을 완벽히 제어하고 메모리 액세스를 추상화해서 가상 메모리에서도 실행 가능
          + 기능 테스트를 통과할 뿐 아니라 자기 자신을 여러번 가상화하는 것도 가능

6502 가상화의 동기와 설계

     * 어린 시절 ""궁극의 운영체제""를 만들고 싶어했지만, 대부분 원시적인 데모 수준에 그침
     * 멀티유저 시스템을 접하면서 사용자들이 문제가 있는 코드를 실행할 수 있다는 것을 깨달음
          + 효과적인 시스템은 코드로 인한 문제를 막거나 대응할 수 있어야 함
     * 6502 CPU의 한계 때문에 하드웨어만으로는 이를 완벽히 해결하기 어려움
          + 소프트웨어로 해결하기로 함
     * 6o6 가상머신(VM)은 게스트 코드를 실행하고 메모리 액세스를 완전히 추상화
          + Harness는 게스트 메모리와 하드웨어에 대한 VM의 인터페이스 역할
          + 커널은 VM을 실행하고 예외 상황을 처리
     * ALU 연산을 호스트 6502 CPU에서 직접 수행함으로써 정확성과 성능을 확보
     * 인라인 메모리 접근, Instruction Fusion 등으로 성능 최적화

6o6의 검증과 테스트

     * Klaus Dormann의 기능 테스트 스위트를 사용해 정확성 검증
     * lib6502 에뮬레이터를 사용해 성능 측정
          + 인라인 메모리 접근과 Instruction Fusion 적용으로 명령어 실행 횟수를 36.5% 줄임
     * Commodore 64와 Apple IIe에서 동작하는 데모 프로그램 4개 포함
          + Hello World
          + 자기 자신을 여러번 가상화
          + 2개의 독립적인 태스크 간 전환
          + geoRAM 카트리지를 사용해 64KB 주소 공간 에뮬레이션

6o6의 잠재적 활용 분야와 추가 개선 아이디어

     * 사용자 정의 운영체제 개발
     * 안전한 다운로드 코드 실행 환경
          + Gopher 클라이언트의 동적 코드 실행 등
     * NMOS 6502 시스템에서 최소한의 하드웨어로 가상화 지원
     * ROM에서 동작할 수 있도록 리팩토링
     * CMOS 65C02 명령어 에뮬레이션
     * 추가적인 코드 최적화

GN⁺의 의견

     * 6o6은 훌륭한 소프트웨어 가상화 솔루션으로 보임. 특히 한정된 하드웨어 자원을 가진 6502 시스템에서 유용할 듯함.
     * Harness와 커널의 모듈화된 구조가 인상적임. 다양한 하드웨어 지원과 유연성 확보에 도움이 될 것 같음.
     * 에뮬레이터 성능 최적화를 위해 적용한 기법들(인라인 메모리 접근, Instruction Fusion 등)이 흥미로움. 다른 에뮬레이터 프로젝트에도 적용해볼만한 아이디어라고 생각함.
     * 실제 하드웨어(Commodore 64, Apple II)와 geoRAM 같은 확장 카트리지에서의 동작을 시연한 것도 인상적. 소프트웨어 호환성과 활용성을 잘 보여줌.
     * 완성도 높은 프로젝트인 만큼, 소스 코드 공개를 통해 관련 커뮤니티에 기여할 수 있을 것 같음. 앞으로의 개선과 활용 사례가 기대됨.

        Hacker News 의견

   요약:
     * 작성자가 20년 동안 간헐적으로 작업해온 버킷 리스트 프로젝트 중 첫 번째 완성작을 공개함. 상당히 인상적인 버킷 리스트로 보임.
     * 단순하고 제한적인 50년 된 6502 아키텍처를 새로운 한계로 확장하는 것은 항상 흥미로움. 6502 코어는 여전히 초저가 대량 시장을 겨냥한 일부 SoC에서 발견됨.
     * 작성자가 6502 어셈블리를 처음 배웠을 때의 추억을 되살려줌. 당시 ""The Visual Computer""라는 책이 플로피 디스크에 에뮬레이터와 함께 제공되었는데 큰 깨달음을 주었음. 책의 PDF는 찾았지만 플로피의 소프트웨어는 현존 여부 불확실.
     * 게시물 본문에서 진짜 핵심은 Commodore 64가 매우 다른 6502 기반 시스템을 에뮬레이트하는 방법이라고 함. 이를 ""6o6"" 또는 ""6502-on-6502""라고 부르며, 6502 CPU에서 실행되는 완전한 가상화된 소프트웨어 NMOS 6502 CPU임. 이는 오픈소스로 공개됨.
     * 게스트 코드 실행을 완전히 제어할 수 있고, 문서화되지 않은 opcodes와 잼 opcodes를 트래핑할 수 있으며, 모든 메모리 액세스를 완전히 추상화하여 주소 재매핑, 불법 읽기/쓰기 차단, 완전한 가상 메모리 실행이 가능함.
     * 기능 테스트를 통과할 뿐만 아니라 자기 자신을 가상화하는 자기 자신을 가상화할 만큼 완성도가 높음.
     * 6502 관점뿐만 아니라 모든 관점에서 놀라운 작업임.
     * ""The Zilog Z80 has a Protected Mode"" 영상도 연상시켰으나 해당 영상은 HN에 게시되었을 때 토론이 없었음.
     * 글을 읽으면서 소름이 돋을 정도로 감동적이었음. 몇 번이고 다시 읽어야 할 것 같음.
"
"https://news.hada.io/topic?id=14844","펨토초 레이저로 만든 3D 공중 플라즈마 디스플레이 터치 가능 (2015)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               펨토초 레이저로 만든 3D 공중 플라즈마 디스플레이 터치 가능 (2015)

Femtosecond 레이저로 만든 3D 공중 플라즈마 디스플레이

  공중에 떠 있는 플라즈마 점들이 작고 만질 수 있는 이미지를 만듦

     * 작성자: Evan Ackerman
     * 작성일: 2015년 6월 26일
     * 읽는 시간: 약 3분


플라즈마 디스플레이 기술

     * 플라즈마 디스플레이: Femtosecond 레이저를 사용하여 공중에 떠 있는 플라즈마 점들을 생성함.
     * 이미지 생성: 이 플라즈마 점들이 모여 작고 만질 수 있는 3D 이미지를 형성함.
     * 연구 기관: 일본 츠쿠바 대학의 연구팀이 이 기술을 개발함.

기술의 원리

     * Femtosecond 레이저: 매우 짧은 시간 동안 강력한 레이저 펄스를 발사하여 공기 중에 플라즈마를 생성함.
     * 플라즈마 점: 레이저가 공기 분자를 이온화하여 플라즈마 상태로 만듦.
     * 3D 이미지: 여러 개의 플라즈마 점을 조합하여 3D 이미지를 형성함.

기술의 응용 가능성

     * 인터랙티브 디스플레이: 사용자가 플라즈마 점을 직접 만질 수 있어 인터랙티브한 경험을 제공함.
     * 미래의 디스플레이 기술: 기존의 2D 스크린을 대체할 수 있는 잠재력을 가짐.
     * 다양한 분야: 광고, 교육, 엔터테인먼트 등 다양한 분야에서 활용 가능함.

GN⁺의 의견

     * 기술의 혁신성: 이 기술은 기존의 디스플레이 기술을 혁신적으로 변화시킬 가능성이 있음.
     * 상용화의 어려움: 현재 기술이 상용화되기 위해서는 비용 절감과 안정성 확보가 필요함.
     * 경쟁 기술: 홀로그램 디스플레이와 같은 경쟁 기술과 비교했을 때의 장단점을 고려해야 함.
     * 사용자 경험: 사용자가 직접 만질 수 있는 인터랙티브한 경험을 제공한다는 점에서 큰 매력을 가짐.
     * 안전성: 플라즈마와 레이저를 사용하는 기술이므로 안전성에 대한 고려가 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 레이저로 인한 눈 손상 경험
          + 레이저 작업 중 안전 한계를 약간 넘어서 눈 손상을 입은 경험이 있음. 몇 년 후에야 그 사실을 깨달음.
          + 공기 이온화가 가능한 강력한 레이저 근처에 있는 것은 원하지 않음.
     * Daedalus 칼럼의 기발한 발명 아이디어
          + 과거 New Scientist의 Daedalus 칼럼에서 기발한 발명 아이디어를 소개했음.
          + 예를 들어, 거리 조명을 위해 자외선 레이저를 사용하여 공기 중에서 빛을 생성하는 아이디어.
          + 또 다른 아이디어로는 식물 호르몬을 이용해 나무를 원하는 형태로 자라게 하는 방법이 있었음.
     * 레이저 펄스 지속 시간과 피부 손상
          + 연구자들은 매우 짧은 펄스 지속 시간이 피부 손상을 일으키지 않는다는 것을 발견함.
          + 그러나 잘못 설정되면 레이저가 사람을 녹일 수 있음.
     * 레이저 기술의 실용성에 대한 의문
          + 최근 이 기술에 대해 검색해봤지만 2015년 여름 이후로 관련 기사를 찾을 수 없었음.
          + 실용적이지 않아서 사라진 것인지, 아니면 단순한 연막이었는지 궁금해하는 의견.
     * 플라즈마 볼의 소음 문제
          + 공중에서 플라즈마 볼을 형성하는 데 따른 소음이 매우 크다는 의견.
          + 과거 시연에서 매우 시끄러웠던 기억이 있음.
     * 안전한 공기 이온화 기술의 어려움
          + 적외선 펨토초 레이저로 공기 이온화를 안전하게 하는 것이 매우 어려움.
          + 필요한 강도를 얻기 위해 초점 평면을 이동시켜야 함.
          + 2015년 기술로는 눈에 안전하지 않음.
     * 미군의 플라즈마 볼 기술
          + 몇 년 전 미군이 플라즈마 볼을 이용해 사람들을 겁주려 했다는 이야기.
          + 이 기술로 종교적 극단주의자들이 신이 말하는 것처럼 느끼게 하려는 농담이 있었음.
     * 레이저 유도 플라즈마 채널
          + 15년 전 유튜브에 올라온 '레이저 유도 플라즈마 채널'이라는 신비한 비디오에 대한 궁금증.
          + femtosecond 레이저를 사용해 전기 아크를 유도하는 무기처럼 보였음.
     * Voxon Photonics의 안전한 프로젝트
          + Voxon Photonics의 프로젝트가 흥미롭고 안전함.
          + 현재 구매 가능하며, 관련 링크 제공.
     * 레이저로 공기 가열
          + 레이저로 공기를 가열하는 기술에 대한 의문.
          + 백열 플라즈마가 강한 자외선을 방출하지 않는지 궁금해하는 의견.
          + 특정 스펙트럼 라인 방출인지에 대한 의문.
"
"https://news.hada.io/topic?id=14767","영국에서 처음 발견된 로마 시대 Tyrian purple 달팽이 염료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 영국에서 처음 발견된 로마 시대 Tyrian purple 달팽이 염료

영국에서 처음 발견된 로마 시대의 달팽이 염료

     * 약 2,000년 전 로마 엘리트들의 옷감을 물들이는 데 사용되었던 희귀한 달팽이 염료가 크리켓 클럽에서 발굴됨
     * 탁구공 크기의 티리안 퍼플(Tyrian purple) 염료 덩어리가 칼라일 크리켓 클럽에서 진행 중인 연례 발굴 작업 중에 발견됨
     * 2017년 이 유적지에서 로마 목욕탕이 발견되었으며, 지난 3년 동안 도자기, 무기, 동전, 반귀중석 등 2,000여 점의 유물이 출토됨

  국제적으로 중요한 발견

     * 발굴 책임자인 프랭크 지에코(Frank Giecco)는 이번 발견이 ""국제적으로 중요한 의미""를 가지며, 영국에서 이 귀중한 안료가 처음 발견된 것이라고 말함
     * 이 안료는 금보다 가치가 높았으며, 황실 인사들과 사회 최상층의 옷감을 물들이는 데 사용되었음
     * 바다 달팽이의 분비선에서 추출되며, 2g 미만의 안료를 얻기 위해서는 약 12,000마리의 달팽이가 필요함
     * 지에코는 ""달팽이를 수집하고 분비선을 처리하는 과정이 매우 시간이 많이 걸렸을 것""이라며 ""그래서 이 안료가 매우 비싼 이유""라고 설명함
     * 고대 그리스와 로마의 벽화에 사용되었으며, 직물 염색에도 활용됨

  발견 과정과 검증

     * 밀랍과 혼합된 이 염료는 지난 10월 유적지에서 발견되었음
     * 그러나 이것이 티리안 퍼플임을 확인하기 위해서는 몇 달 간의 화학 분석이 필요했음
     * 목욕탕의 증기로 인해 반지에서 빠져나온 것으로 보이는 반귀중석들이 배수구에서 발견됨

  국제적으로 중요한 다른 발견들

     * 작년 5월에 발견된 로마 신상 조각 한 쌍도 국제적으로 중요한 발견으로 묘사되었으며, AD200년까지 거슬러 올라가는 것으로 여겨짐
     * 사암으로 만들어진 이 머리 조각들은 한때 12~15피트(3.5~4.5m) 높이의 조각상 일부였음
     * 2021년에는 3세기 황제 셉티미우스 세베루스(Septimius Severus)와 관련된 로마 제국 스탬프가 새겨진 타일이 발견됨
     * 지에코는 황제가 칼라일 건물을 직접 방문했다는 것을 증명할 수는 없지만, 그의 황실과 연관되어 있다는 ""설득력 있는 증거""가 있다고 말함
     * 그는 ""이 건물은 실제로 황제의 아내에게 헌정되었으며, 북아프리카 양식의 목욕탕 건축 방식을 사용하고 있다""며 ""황제는 리비아 출신""이라고 덧붙임

  올해 발굴 일정

     * 자원봉사자들에 의해 수행되는 올해 발굴은 5월 7일에 시작되어 6월 17일까지 진행될 예정임
     * 아직 자원봉사자로 등록할 수 있는 자리가 몇 군데 남아있음

GN⁺의 의견

     * 영국에서 처음 발견된 티리안 퍼플 염료의 발견은 로마 시대 엘리트들의 의복 문화와 사치품에 대해 더 많은 것을 알려줄 수 있음. 또한 고대 무역로와 제조 기술에 대한 통찰력을 제공할 수 있음.
     * 2,000여 점의 유물 발굴은 고고학자들에게 로마 시대 영국의 삶에 대한 풍부한 정보를 제공할 것임. 특히 황제와 연관된 건물의 발견은 로마 제국의 영향력이 얼마나 광범위했는지를 보여줌.
     * 그러나 고고학적 발굴이 문화유산의 보존과 연구에 중요한 역할을 하는 반면, 발굴 과정 자체가 유적을 파괴할 수 있다는 점도 고려해야 함. 발굴 과정에서 손상되거나 맥락을 잃은 유물들의 가치와 정보는 회복하기 어려움.
     * 고대 염료의 제조 과정과 사용에 대한 연구는 현대 염색 산업에도 영감을 줄 수 있음. 천연 염료의 활용과 지속 가능한 섬유 생산에 대한 관심이 높아지고 있는 만큼, 로마 시대의 염색 기술에서 배울 점이 있을 것임.

        Hacker News 의견

   요약하면 다음과 같습니다:
     * 로마 시대 목욕탕 배수구에서 반지에서 떨어진 준보석들이 발견됨. 당시 주인이 잃어버렸을 때의 좌절감을 상상해 볼 수 있음.
     * 2000년 동안 땅속에 있었는데도 불구하고 유기염료가 여전히 인식 가능한 상태로 남아있다는 사실이 놀라움. 이는 추가 연구를 촉발할 것으로 보임.
     * 이 염료의 안정성은 토가 등에 사용되었을 때에도 안정적이었음을 시사함. 이는 염료의 가치를 더욱 높였을 것임.
     * 탁구공 크기의 티리아 자주색 염료 덩어리가 발견됨. 금보다 비쌌기에 누군가는 이를 잃어버려 화가 났을 것임.
     * 자연 염료 제조의 희소성과 어려움으로 인해 색상 자체가 지위의 상징이었음은 흥미로움.
     * 에트루리아인들은 3000년 전부터 왕을 위해 붉은 신발을 사용했고, 이는 로마 왕과 황제들에게 전해짐. 실용적 이유로 자주색에서 붉은색으로 바뀌었을 가능성이 높음.
     * 로마 제국의 계승자를 주장하는 이들(교황, 비잔티움 황제, 독일 황제, 차르)은 모두 붉은색/자주색 신발을 신었음.
     * 해마다 발굴이 진행되는 칼라일 크리켓 클럽에서 탁구공 크기의 티리아 자주색 염료 덩어리가 발굴됨. 이러한 모임 장소의 지리적 안정성에 놀라움.
     * 기사에서 최초로 이 염료를 사용한 페니키아인들이 언급되지 않은 점이 의아함.
     * 5개월 전 관련 해커뉴스 포스트에서는 이 염료 재현을 위한 노력에 대한 흥미로운 기사가 링크됨.
     * 튀니지 튀니스 출신의 누군가가 수년간의 시행착오 끝에 이 염료를 만드는 영상을 찾음.
"
"https://news.hada.io/topic?id=14862","고객 데이터로 진행되는 Slack AI 교육","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        고객 데이터로 진행되는 Slack AI 교육

Slack의 개인정보 보호 원칙: 검색, 학습 및 인공지능

  개요

     * Slack의 사명: Slack은 업무를 더 간단하고, 즐겁고, 생산적으로 만드는 제품을 만드는 것을 목표로 함. 이 제품을 개발하는 동안 고객 데이터의 개인정보 보호와 보안이 매우 중요함.
     * AI/ML 활용: Slack은 인공지능(AI)과 머신러닝(ML)을 제한적으로 사용하여 제품 목표를 향상시킴. 이를 위해 고객 데이터(메시지, 콘텐츠, 파일 등)와 기타 정보(사용 정보 포함)를 분석함.

  개인정보 보호 원칙

     * 데이터 유출 방지: 모델이 모든 고객에게 널리 사용될 경우, 고객 데이터를 학습하거나 기억하거나 재생산할 수 없도록 모델을 구축함.
     * 접근 방지 기술: AI/ML 모델을 개발하거나 고객 데이터를 분석할 때, Slack은 기본 콘텐츠에 접근할 수 없도록 다양한 기술적 조치를 취함.
     * 고객 선택권 제공: 고객이 Slack 글로벌 모델에서 자신의 데이터를 제외하고 싶다면, 옵트아웃할 수 있음. 옵트아웃 시, 해당 워크스페이스의 데이터는 자체 워크스페이스 경험을 개선하는 데만 사용됨.

  옵트아웃 방법

     * 옵트아웃 요청: 옵트아웃을 원할 경우, 조직 또는 워크스페이스 소유자가 고객 경험 팀에 연락하여 요청할 수 있음. 요청이 완료되면 응답을 받을 수 있음.

  고객 데이터와 기타 정보

     * 데이터 사용 예시: Slack은 다음과 같은 방법으로 서비스를 개선함.
          + 채널 추천: 사용자가 새로운 공개 채널에 가입하도록 추천함. 채널 멤버십, 활동, 주제 중복 등을 기반으로 추천함.
          + 검색 결과: 검색 머신러닝 모델이 사용자가 찾고자 하는 결과를 식별함. 이전 검색 결과와 참여도를 기반으로 함.
          + 자동 완성: 검색 쿼리나 다른 텍스트를 자동 완성함. 공용 메시지 문구를 기반으로 함.
          + 이모지 추천: 메시지의 내용과 감정을 기반으로 이모지 반응을 추천함. 특정 이모지가 해당 워크스페이스에서 자주 사용되는지 고려함.

  개인정보 보호

     * 고객 데이터 소유권: 고객이 자신의 데이터를 소유함. Slack은 고객 데이터를 집계하고 비식별화하여 서비스 업데이트에 사용함.

GN⁺의 의견

     * 개인정보 보호 중요성: Slack이 고객 데이터의 개인정보 보호와 보안을 중요시하는 점은 매우 긍정적임. 이는 사용자 신뢰를 높이는 데 기여함.
     * AI/ML의 제한적 사용: AI와 ML을 제한적으로 사용하여 개인정보 보호를 강화하는 접근 방식은 매우 현명함. 이는 데이터 유출 위험을 줄임.
     * 옵트아웃 기능: 고객이 자신의 데이터를 글로벌 모델에서 제외할 수 있는 선택권을 제공하는 것은 매우 유용함. 이는 사용자의 데이터 통제권을 강화함.
     * 기술적 조치: 기본 콘텐츠에 접근할 수 없도록 하는 다양한 기술적 조치는 데이터 보안을 강화함. 이는 데이터 유출을 방지하는 데 효과적임.
     * 경쟁 제품: Microsoft Teams와 같은 경쟁 제품도 유사한 기능을 제공함. 사용자는 자신의 필요에 맞는 제품을 선택할 수 있음.
"
"https://news.hada.io/topic?id=14874","비유클리드 둠: 파이가 3.14159가 아닐 때 게임에 일어나는 일 (2022) [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           비유클리드 둠: 파이가 3.14159가 아닐 때 게임에 일어나는 일 (2022) [비디오]

비유클리드 둠: 파이가 3.14159가 아닐 때 게임에 무슨 일이 일어나는가

     * 발표자: Luke Gotszling
     * 영상 재생 시간: 19분
     * 행사: MCH2022
     * 날짜: 2022-07-23 ~ 2022-07-24

파이 값의 중요성

     * 파이(π)의 값은 고정된 상수로, 그래픽 프로그래밍에서 시각적 렌더링에 중요한 역할을 함.
     * 삼각법과 다른 수학적 기법들도 시각적 렌더링에 필수적임.
     * 둠(Doom) 게임의 소스 코드에서 사용된 파이 값이 잘못되었음을 발견함.

파이 값을 변경했을 때의 영향

     * 파이 값을 더 잘못된 값으로 변경했을 때 게임에 어떤 일이 일어나는지 탐구함.
     * 다른 삼각 함수와 상수들을 잘못된 값으로 변경했을 때의 영향도 살펴봄.
     * 이러한 변경이 가상 세계를 탐험하는 우리의 이해와 능력에 어떤 변화를 가져오는지 분석함.

비유클리드 기하학의 가능성

     * 비유클리드 기하학을 적용했을 때 게임에서 흥미로운 가능성이 있는지 탐구함.
     * 게임이 당시의 하드웨어에서 잘 실행되도록 최적화된 몇 가지 트릭도 간단히 설명함.

잘못된 수학 버전의 게임 컴파일

     * 잘못된 파이 값을 사용하는 다른 게임들과 공개 소스 코드 저장소에 대한 링크 제공.
     * 청중이 직접 잘못된 수학 버전의 게임을 컴파일할 수 있는 방법도 안내함.

GN⁺의 의견

     * 수학적 개념의 중요성: 이 발표는 수학적 개념이 소프트웨어 개발과 그래픽 프로그래밍에 얼마나 중요한지를 잘 보여줌. 특히, 파이와 같은 상수의 정확성이 게임의 시각적 요소에 큰 영향을 미침.
     * 비유클리드 기하학의 흥미로움: 비유클리드 기하학을 게임에 적용하는 것은 새로운 게임 플레이 가능성을 열어줄 수 있음. 이는 게임 개발자들에게 새로운 아이디어를 제공할 수 있음.
     * 최적화 트릭: 당시 하드웨어에서 게임을 최적화하는 방법을 배우는 것은 현대의 소프트웨어 최적화에도 유용할 수 있음. 이는 성능 향상을 위한 다양한 접근 방식을 이해하는 데 도움이 됨.
     * 교육적 가치: 잘못된 수학적 값을 사용하여 게임을 컴파일하는 과정은 교육적인 가치가 큼. 이는 프로그래머들이 수학적 개념의 중요성을 실험적으로 배울 수 있는 기회를 제공함.
     * 기술적 도전: 이러한 실험은 기술적 도전을 제공하며, 프로그래머들이 문제 해결 능력을 향상시키는 데 도움이 됨. 이는 특히 복잡한 시스템에서의 버그를 찾고 수정하는 데 유용함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Duke Nukem 3D의 예시
          + Duke Nukem 3D의 'Lunatic Fringe' 레벨은 'build' 엔진을 사용해 교차 없이 두 번 회전하는 원형 복도를 구현했음.
          + 이 기술은 당시 혁신적이었으며, 멀티플레이어 모드에서 재미를 더했음.
          + '3개의 집과 3개의 유틸리티를 교차 없이 연결하는 퍼즐'을 해결하는 데도 사용됨.
     * Poul Anderson의 소설 'Operation Chaos'
          + 이 소설은 마법이 실제로 존재하고 과학과 함께 빠르게 발전하는 평행 세계를 배경으로 함.
          + 주인공의 아이가 지옥으로 납치되며, 지옥의 시공간 기하학이 비유클리드적이라는 힌트를 통해 과학자들이 지옥에 안전하게 다녀오는 방법을 알아냄.
     * 코드베이스에서 84,600을 찾아보라는 조언
          + John Carmack이 파이의 10번째 자리를 잘못 기억했듯이, 코드베이스에서 84,600을 찾아보면 하루의 초 수를 잘못 입력한 경우가 많음.
          + 상수를 직접 입력하기보다는 표준 라이브러리를 사용하는 것이 좋다는 교훈을 줌.
     * 그래픽과 움직임의 문제
          + 그래픽과 움직임이 글리치가 발생하고 결국 플레이할 수 없게 됨.
          + 이를 '비유클리드적 둠'이라고 부르기보다는 '우주의 상수를 건드린 결과'로 보는 것이 더 적절함.
     * 콘솔 에뮬레이터 소스 코드 수정
          + 좋아하는 콘솔 에뮬레이터의 소스 코드를 가져와서 무작위 부동 소수점 오류를 삽입하거나 분기 명령어의 의미를 반대로 바꾸면 재미있음.
          + 오래된 게임일수록 여전히 작동할 가능성이 높고, 이상한 경험을 할 수 있음.
     * 둠은 시뮬레이션이 아님
          + 둠은 시뮬레이션이 아니므로 상수를 변경하는 것은 단순히 일부 루틴을 망가뜨리는 것에 불과함.
          + 대부분의 변경 사항은 플레이할 수 없게 만듦.
     * 파이의 최대 값
          + 파이의 최대 값이 얼마인지에 대한 질문이 있음.
          + 파이가 4일 때 세그먼트 폴트가 발생할 가능성이 높으며, 따라서 플레이 가능한 파이의 최대 값은 파이보다 약간 높은 값일 것임.
     * 비유클리드 기하학에서의 파이
          + 비유클리드 기하학에서도 파이는 여전히 파이임.
          + 비유클리드 기하학의 특징은 단면 곡률이 0이 아닌 것임.
          + 작은 원의 둘레를 측정하여 유클리드 원과의 차이를 확인할 수 있음.
     * 게임 메커니즘에 대한 더 많은 설명 희망
          + 비디오가 게임 메커니즘과 파이 변경이 미치는 영향에 대해 더 자세히 설명했으면 좋겠다는 의견이 있음.
     * 즉각적인 메스꺼움
          + 일부 값(e와 파이/2)이 즉각적으로 메스꺼움을 유발함.
"
"https://news.hada.io/topic?id=14838","Nostr - 탈중앙화 소셜 네트워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Nostr - 탈중앙화 소셜 네트워크

     * Nostr는 검열에 강한 글로벌 탈중앙화 소셜 네트워크 구축을 목표로 하는 단순한 설계의 간단하고 개방적인 프로토콜
     * 간단하고 유연한 이벤트 객체(plain JSON으로 전달)와 표준 타원 곡선 암호화를 사용하여 키와 서명을 처리함
     * 지원되는 유일한 전송 방식은 클라이언트에서 릴레이로의 웹소켓 연결
          + 클라이언트와 릴레이 작성을 쉽게 하고 소프트웨어 다양성을 촉진함

Nostr의 장점

  회복력

     * Nostr는 데이터 이동이나 저장을 위해 소수의 신뢰할 수 있는 서버에 의존하지 않기 때문에 매우 회복력이 좋음
     * 프로토콜은 릴레이가 사라질 것으로 가정하고, 사용자가 임의의 수의 릴레이에 연결하고 게시할 수 있도록 허용함

  검증 가능성

     * Nostr 계정은 공개 키 암호화를 기반으로 하므로 메시지가 실제로 해당 사용자가 보낸 것인지 쉽게 확인할 수 있음

Nostr의 특징

     * HTTP나 TCP-IP와 같이 Nostr는 누구나 구축할 수 있는 개방형 표준인 프로토콜임
     * Nostr는 가입하는 앱이나 서비스가 아님

현재 소셜 미디어 시스템의 문제점

     * 광고를 판매하기 위해 사용자의 관심을 이용함
     * 사용자를 중독시키기 위해 기괴한 기술을 사용함(1번 참조)
     * 사용자가 검사하거나 변경할 수 없는 비밀 알고리즘에 기반하여 표시할 콘텐츠를 결정함
     * 참여할 수 있는 사람과 검열되는 사람을 완전히 통제함
     * 스팸과 봇으로 넘쳐남

   어떻게 써야되는건지 감이 안오더군요. 트위터, 블루스카이, 마스토돈 보다 더 학습을 해야돼서 대중화 되긴 힘들것 같더군요

   릴레이에서 클라이언트로 전달되는 메시지에 대해서 허용리스트 기반으로 관리가 되어야 할 듯 싶습니다. 최악의 경우에는 릴레이가 스팸이 담긴 NOTICE 메시지를 사용자에게 전달할 수도 있지 않을까 합니다

   또한 어떤 사용자를 팔로우하고 릴레이에 접속할 지 혼란스러워서 평판 시스템같은게 생겨날 것 같은데, 이 또한 현재 소셜 미디어 시스템의 문제에 대한 완벽한 해결책은 못 될 것 같습니다. 다른 분께서 언급하신 것처럼 열린 생태계건 닫힌 생태계건 온갖 일은 똑같이 일어날 테니까요. Jia Tan 사건이나 '업자에게 넘겨버린 카페' 현상도 일어날 것입니다

   mastodon 도 탈중앙화 sns인데 거기서 사용하는 activitypub과 nostr의 프로토콜이 다른지 궁금해서 찾아보니. mastodon은 소규모 서버의 연합 같은구성이라 소규모 서버에서 발생할 수 있는 관리 부실등의 영향이 있을 수 있는 반면에, nostr은 서버는 릴레이라는 단순 경유지로 소규머 서버 운영자에 대한 권리 침해가 없는 느낌이네요 조사 시간이 길지 않아 충분히 이해한 것인지는 모르겠습니다.

   열린 생태계건 닫힌 생태계건 스팸과 봇은 막을 수 없을 것 같은데 말이죠

   블루스카이를 떠난 Jack Dorsey가 투자했다고 알려진 프로젝트
"
"https://news.hada.io/topic?id=14893","같은 앱을 Flutter, React Native, Ionic 으로 개발해 봤어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             같은 앱을 Flutter, React Native, Ionic 으로 개발해 봤어요

     * 최적의 크로스 플랫폼 모바일 개발 프레임워크를 찾던 중 Flutter, React Native, Ionic 이 눈에 들어옴
     * 세 프레임워크 모두 단일 코드베이스로 여러 플랫폼에서 좋은 성능을 약속함
     * API를 활용해 기본 데이터를 화면에 표시하는 모바일 앱을 세 가지 버전으로 제작해 비교해봄
          + 앱의 요구사항: 화면 로딩 시 국가 정보 표시, 로딩 스피너, 새로운 랜덤 국가를 가져오는 버튼, 국가 목록은 한 번만 가져오기

Flutter

     * Flutter는 2017년 구글이 만든 오픈 소스 프레임워크로, 단일 코드베이스에서 여러 플랫폼용 네이티브 애플리케이션을 만듦. Dart 언어 기반
     * Flutter 문서와 튜토리얼을 한 시간 동안 학습 후 개발 시작
     * 개발 환경 설정과 에뮬레이터 실행이 매끄러웠음
     * 4시간 만에 기본 기능을 갖춘 앱을 제작함
     * Android Studio의 제안 기능이 개발에 큰 도움이 됨
     * Hot Reload 기능으로 변경사항을 즉시 확인할 수 있어 개발 시간을 단축시켜 줌
     * 그러나 ""모든 것이 위젯""이라는 개념 때문에 중첩이 많고 스타일과 요소가 혼재되어 있어 직관적이지 않음

React Native

     * 메타가 2015년에 만든 오픈 소스 자바스크립트 프레임워크로, 네이티브 안드로이드 및 iOS 애플리케이션을 구축할 수 있음
     * React 라이브러리 사용 경험이 있었고, VS Code 설치가 이미 완료된 상태였음
     * 개발 환경 설정 과정이 복잡/혼란스러웠음 (Expo Go와 React Native CLI의 차이점 이해 필요)
     * 2.5시간 만에 앱을 완성했으나 이미지 표시 문제 해결에는 어려움이 있었음
     * React의 컴포넌트 기반 아키텍처 덕분에 코드가 간결하고 모듈화됨
     * JSX를 사용하여 컴포넌트의 UI를 HTML과 유사한 코드로 작성할 수 있음

Ionic

     * Ionic은 2012년에 만들어진 오픈 소스 모바일 UI 툴킷으로, 단일 코드베이스에서 현대적이고 고품질의 크로스 플랫폼 모바일 앱을 구축
     * 리액트, Vue, 앵귤러로 개발 가능
     * 풍부한 UI 컴포넌트와 매력적인 사용자 인터페이스 제공
     * Ionic 동영상과 가이드를 30분간 학습 후 개발 시작
     * Angular 버전으로 앱을 개발했고, 익숙한 개발 생태계 덕분에 빠르게 개발할 수 있었음
     * 초기 설정 과정에서 생성된 많은 JSON 및 TypeScript 구성 파일이 다소 부담스러웠음
     * 2시간 만에 앱을 완성함
     * UI 구현이 쉬웠으며 문서화가 잘 되어 있음
     * HTML 템플릿을 사용하여 UI와 로직을 분리할 수 있음
     * Spinner와 Floating Action Button과 같은 UI 컴포넌트 덕분에 UI 구현이 용이함

비교: Flutter, React Native, Ionic

     * 코드 스타일 및 언어
          + 자바스크립트 기반 프레임워크들이 코드 가독성과 단순성에서 우세함
          + Flutter의 중첩된 코드 스타일은 다소 혼란스럽고 읽기 어려움
          + React와 Angular 템플릿 중 어느 것을 선호할지는 개인 취향에 따름
     * 생태계
          + 2024년 4월 기준, 미국에서 설치된 상위 500개 앱 중 12.57%가 React Native로, 5.24%가 Flutter로, 0.52%가 Ionic으로 제작됨
          + React Native는 많은 자유도를 제공하지만 설정과 도구 사용에 혼란을 초래할 수 있음
          + Flutter는 채택률이 증가 중이며, GitHub 공개 저장소 수가 많음
     * 도구
          + Hot Reload
               o 브라우저에서 세 프레임워크 모두 코드 변경 시 빠르게 앱을 재로드함
               o 안드로이드 기기나 시뮬레이터에서 Flutter의 Hot Reload가 가장 빠름
          + 원격 디버깅
               o Flutter DevTools가 직관적이며 다양한 기능을 제공함
               o Ionic은 Chrome Developer Tools와 유사한 인터페이스로 디버깅이 용이함
               o React Native는 React DevTools를 제공하지만 Flutter와 Ionic보다 원격 디버깅에서 뒤처짐
     * 앱 크기
          + Ionic: 3.2MB, Flutter: 18.1MB, React Native: 25.2MB
          + 설치 후 차지하는 용량은 각각 9.61MB, 34.66MB, 55.47MB임
     * 사용자 경험
          + Flutter와 Ionic은 플랫폼에 맞는 UI 컴포넌트를 제공해 일관된 사용자 경험을 보장함
          + React Native는 추가 라이브러리에 의존해야 함
     * 성능
          + Flutter는 네이티브 코드로 컴파일되어 React Native보다 빠를 것으로 예상됨
          + Ionic은 웹뷰에서 실행되므로 성능이 다소 느릴 수 있음

결론

     * Flutter의 코드 스타일에 대해 더 파고 들고 싶고, 디버깅의 판도를 바꿀 수 있는 Hot Reload 기능은 매력적
     * 그럼에도 불구하고 기존의 웹 개발 지식(TypeScript, HTML, CSS)을 모바일 앱 개발에 활용할 수 있는 Ionic에 더 끌림
     * Ionic 개발 능력을 키우는 것이 모바일 및 웹 개발자로서의 역량을 향상시켜 줄 것이라 생각함
     * 프로젝트가 발전함에 따라 코드 구성, 관심사의 분리, 컴포넌트 재사용성 등이 더 명확해질 것임
     * 훌륭한 애플리케이션은 세 프레임워크 중 어느 것으로도 구축할 수 있음
          + 프레임워크 선택 시 개발의 즐거움을 간과하지 말아야 함
          + 실험 앱 개발을 통해 다양한 프레임워크를 탐험해보기를 권장함

   native ui 를 사용하는 유일한 크로스플랫폼 라이브러리라 포기하기 힘들죠…
   대안 있으면 바로 갈아타고 싶을 정도지만 본문의 flutter 도, ionic 도 native ui를 선택하지 않은걸 보면 미래는 없는듯합니다.

   제 경우, 플러터는 html/css를 알 필요 없이 다트로 모든 것을 할 수 있어서 좋았습니다.

   보통 웹을 하셨던 분은 rn, 그렇지 않은 분들은 flutter가 편하다고 하시더라구요

   아무래도 크로스플랫폼 자체가 마이너하다보니 관련 라이브러리 개발이 늦거나 부족한데요.
   React-Native는 React 생태계를 일부 공유하는 것에서 강점이 있는 것 같습니다.

   2년 전에 개발할 때보다 최근에 RN 개발하면서 tailwind나, ReactQuery, TRPC 등 같은 React에서 활발히 개발/사용되는 라이브러리를 사용해서 갈수록 RN 생산성이 높아졌던 기억이 있습니다.

   개인적인 경험으로는 앱 개발 시 중요한 부분이 상태관리와 UI 부분 이었습니다.

   RN 은 전역관리는 Redux + Redux-saga, 페이지별로는 React-query 를 사용했고
   Flutter 는 Riverpod 를 사용했었습니다.

   개인적으로 React 쪽의 상태관리 및 로직의 순서 관리가 조금더 이해가 쉬웠고,
   개발하기도 용이했습니다. 웹 베이스의 플랫폼으로 개발이 조금 쉬웠습니다.

   Flutter 는 개인적으로 Riverpod 에 대한 이해가 쉽지 않았습니다. (시간 투자가 조금 적기도 했습니다.)
   간단한 상태관리는 큰 어려움이 없었지만, 플랫폼의 이해 때문인지,
   상태 변경에 대한 처리 및 서버 API 처리 이후의 공통 처리 부분에서 구현의 복잡함? 어려움 이 있었습니다.

   UI 쪽은 Flutter 쪽의 위젯이 속성 및 기능이 잘 정의 되어 있어 개발이 수월했습니다.
   React 는 antd UI 라이브러리를 사용했는데, 사용 경험은 나쁘지 않았습니다.

   React 는 2년전이라 개발 관련 라이브러리가 오래된 경험이고
   Flutter 는 최근에 개발하였는데, 투자 시간이 적었습니다.

   제 개발 경험도 댓글로 남깁니다~
   이런 부분도 있구나... 하는 정도로 생각해주세요~ ^^

   감사합니다! 다른 분들께도 도움될 것 같아요.
"
"https://news.hada.io/topic?id=14774","에어팟을 모스부호(Morse Code) 송신기로 사용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    에어팟을 모스부호(Morse Code) 송신기로 사용하기

     * AirPod과 같은 많은 헤드폰들은 기기로 명령 전송이 가능
          + 한 번 누르면 재생/정지, 두 번 누르면 다음 트랙 재생, 세 번 누르면 이전 트랙 재생
     * 이 기능을 사용하여 헤드폰을 모스 부호 송신기로 사용
     * 에어팟 사용시 한번 누르면 dit (.), 두번 누르면 dah (-), 세번 누르면 이전 문자 삭제
     * 지연시간에 도달하면 dit/dah 코드가 문자 또는 숫자로 변환

   아이디어가 참신하네요 🤣
"
"https://news.hada.io/topic?id=14784","대규모 언어 모델의 Under-Trained Tokens 자동 감지 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                대규모 언어 모델의 Under-Trained Tokens 자동 감지 기술

대형 언어 모델의 훈련되지 않은 토큰 자동 감지에 관한 연구

     * 언어 모델에서 토크나이저 생성과 모델 훈련 간의 불일치로 인해 'SolidGoldMagikarp' 토큰과 같은 특정 입력이 원치 않는 동작을 유발할 수 있음
     * 이러한 '글리치 토큰'은 토크나이저 어휘에는 존재하지만 훈련에서는 거의 또는 완전히 없는 경우로, 다양한 모델에서 관찰되었지만 이를 일관되게 식별하는 방법은 부족했음
     * 본 연구에서는 훈련되지 않거나 훈련이 부족한 토큰을 감지하는 문제를 중점적으로 다루면서 대형 언어 모델(LLM) 토크나이저에 대한 포괄적인 분석을 제시함
     * 토크나이저 분석, 모델 가중치 기반 지표, 프롬프팅 기술을 결합하여 이러한 문제가 있는 토큰을 자동으로 감지하는 효과적인 방법을 개발함
     * 연구 결과는 다양한 모델에서 이러한 토큰이 널리 퍼져 있음을 보여주며, 언어 모델의 효율성과 안전성을 개선하는 데 통찰력을 제공함

GN⁺ 의견

     * 토크나이저와 언어 모델 훈련 간의 불일치로 인한 글리치 토큰 문제는 흥미로운 주제임. 이는 언어 모델의 성능과 안정성에 영향을 미칠 수 있는 중요한 이슈라고 생각됨
     * 이 문제를 해결하기 위한 자동화된 방법론을 제시한 점이 인상적임. 토크나이저 분석, 모델 가중치 기반 지표, 프롬프팅 기술 등 다양한 접근 방식을 활용한 것은 창의적이고 실용적인 접근법으로 보임
     * 본 연구는 언어 모델 개발 및 배포 시 고려해야 할 중요한 점을 제시하고 있음. 특히 모델의 안정성과 신뢰성 확보를 위해서는 토크나이저와 모델 훈련 간의 일관성 유지가 필수적임을 시사함
     * 다만, 연구 결과의 일반화 가능성에 대한 추가 검증이 필요해 보임. 다양한 도메인과 언어의 데이터셋에 대해서도 제안된 방법론이 효과적으로 작동하는지 확인이 필요할 것으로 생각됨
     * 글리치 토큰 문제 외에도 언어 모델의 안정성과 신뢰성을 저해할 수 있는 다른 요인들에 대한 추가 연구도 필요해 보임. 편향성, 프라이버시, 보안 등 다양한 관점에서의 접근이 요구됨

        Hacker News 의견

     * 캐나다 회사 모델에 하키 관련 미훈련 토큰이 있다는 것은 믿기 어려움. 하지만 토큰화가 모델에 미치는 영향에 대한 이해가 향상되는 것은 흥미로운 발견임. 특히 초기 오픈소스 모델들은 데이터 출처에 따라 흔히 발생하는 캐리지 리턴 문제가 있음.
     * Computerphile의 1년 전 영상에서 글리치 토큰에 대해 잘 설명하고 있음.
     * 미훈련 토큰뿐만 아니라 네트워크의 모든 계층의 모든 가중치에서 훈련 데이터 불균형을 찾아야 함. 발견 시에는 데이터 흐름이 거의 없는 가중치를 삭제하는 것이 모델 크기를 줄이거나 일반화에 도움이 될 수 있음.
     * 훈련 진단을 위한 랜덤 행렬 이론 기반 방법이 있음. 가중치 상관 행렬의 스펙트럼 밀도를 이용하며, 각 계층의 스펙트럼 밀도를 잘린 멱법칙에 맞춰 멱법칙 지수 알파가 2보다 약간 클 때 제대로 훈련된 것으로 판단함.
     * 이 논문의 제목이 인상적임.
     * 토크나이저를 LLM과 동일한 코퍼스로 훈련시키는 것이 해결책 아닐까? 토크나이저 재사용이 흔한 이유를 잘 모르겠음.
"
"https://news.hada.io/topic?id=14790","Cap - 화면 녹화&공유 도구 Loom 의 오픈소스 대체제 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Cap - 화면 녹화&공유 도구 Loom 의 오픈소스 대체제

     * 경량, 강력한 비디오 메시징(스크린 녹화 & 공유) 도구
          + 녹화와 공유가 단 몇 초만에 가능
     * 맥과 웹에서 사용 가능. 윈도우/리눅스는 개발중
     * Rust + Next.js + TypeScript + Tauri + Drizzle(ORM) + MySQL + Tailwind CSS

GN⁺의 의견

     * Cap은 Loom과 유사한 기능을 제공하면서도 오픈소스라는 장점이 있어 개발자 커뮤니티에서 큰 관심을 받을 것으로 보임. 다만 아직 베타 단계이므로 안정성과 성능 면에서는 개선이 필요할 수 있음.
     * 화면 녹화 및 공유 기능은 이미 Loom, Vidyard 등 여러 상용 서비스들이 제공하고 있지만, 가격 정책이나 기능 제한 등으로 불편함을 겪는 사용자들이 많음. Cap이 이러한 불편함을 해소하고 더 나은 사용자 경험을 제공할 수 있을지 주목됨.
     * 다만 오픈소스 프로젝트의 특성상 로드맵이 불확실하고 개발 속도가 더딜 수 있음. 또한 수익모델 부재로 지속가능성 측면에서 우려가 있을 수 있음. 이를 극복하기 위해서는 강력한 개발 커뮤니티 구축과 함께 적절한 비즈니스 모델 수립이 필요해 보임.
     * Loom과 같은 기존 서비스 대비 차별화 포인트를 명확히 하고, 사용성과 성능 등 핵심 가치를 꾸준히 개선해 나간다면 시장에서 경쟁력을 가질 수 있을 것으로 기대됨. 앞으로의 발전 방향이 주목되는 프로젝트임.

        Hacker News 의견

   다음은 해커뉴스 댓글들을 요약한 내용임:
     * 제품 소개 개선 필요: 경쟁사 이름 언급 없이 제품을 소개하고, 랜딩 페이지에서 어떤 점이 차별화되는지 명확히 제시할 것
     * YC 탈락 사유: Cap은 공동창업자가 없어서 YC에 탈락했다는 트윗 내용 공유됨
     * 오픈소스 계획에 대한 질문: 프로 기능들도 오픈소스에 포함시킬 계획인지, 호스팅 서비스 제공 시 라이선스 변경 우려는 없는지 궁금해 함
     * 평생 가격 보장에 대한 의구심: 평생 가격 보장을 내세웠으나, 회사가 매각되면 보장받기 어려울 것이라는 의견
     * 녹화 시작 UX 개선 제안: 녹화 시작 버튼을 누르면 바로 녹화되지 않고, 카운트다운 후 녹화되면 좋겠다는 피드백
     * '가벼움'에 대한 구체적인 설명 필요: '가벼움'이 CPU 효율, 바이너리 크기, 기능의 가벼움 등 무엇을 의미하는지 명확히 해야 함
     * macOS 내 유사 도구들과의 비교: OBS, macOS 내장 녹화 기능, ffmpeg 등과 어떤 차이가 있는지 궁금해 함
     * 피드백 반영 중: 피드백을 바탕으로 신속히 기능 개선 및 버그 수정 중이며, 셀프 호스팅 및 S3 연동 옵션도 곧 제공 예정
"
"https://news.hada.io/topic?id=14880","2세대 이메일에 대한 공개적 고찰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2세대 이메일에 대한 공개적 고찰

     Note: 이 글은 단순히 내 생각을 정리한 것임. 깊이 생각해본 것이 아니며, 좋은 아이디어라고 생각할 필요는 없음. 기대치를 최대한 낮추고 읽어보길 바람.

  이메일의 문제점

     * 많은 오래된 기술들이 여전히 사용되고 있지만, 이메일은 사용할 때마다 나를 짜증나게 함.
     * 사용자 입장에서 이메일은 꽤 잘 작동함. 가끔 스팸으로 너무 많은 이메일을 보내기도 하지만, 이메일은 오래되고 신뢰할 수 있으며 이해하기 쉽고 검색도 비교적 쉬움.
     * 그러나 이메일의 백엔드는 엉망임.

  이메일 백엔드의 문제점

     * 많은 이메일 기능에는 명확한 사양이 없음. 예를 들어, 답장을 보낼 때 메시지의 상단에 답장을 보내는지 하단에 답장을 보내는지 명확하지 않음.
     * 이메일에 어떤 HTML을 넣을 수 있는지 명확하지 않음. Microsoft Outlook이 Microsoft Word HTML 렌더러를 남용하는 경우가 있음.
     * 이메일을 암호화하는 방법도 명확하지 않음. OpenPGP라는 것을 발명했지만 거의 사용되지 않았고, 큰 결함이 있음.
     * 이메일의 진위를 항상 확인할 수 없었음. 그래서 SPF를 발명했지만, SPF도 모든 문제를 해결하지 못했음. 그래서 DKIM을 발명했지만, DKIM도 모든 문제를 해결하지 못했음. 그래서 DMARC를 발명했지만, DKIM 자체에 큰 결함이 있어 DMARC도 우회됨.
     * BIMI라는 또 다른 계층을 추가했는데, 이것도 DMARC에 의존하고, DMARC는 DKIM에 의존하며, DKIM에는 결함이 있음.
     * DMARC가 있는 경우에도 68.2%의 기록이 p=none으로 설정되어 있음. 이는 DMARC가 기본적으로 아무것도 하지 않음을 의미함.
     * 위의 모든 것과 공격적인 스팸 방지 정책 때문에 자체 호스팅 이메일이 매우 어려움.
     * 마지막으로, IP 평판 관리가 있음. 일부 IP 주소는 다른 주소보다 ""깨끗함"". 특히 SendGrid나 AWS SES와 같은 공유 시스템에서. 이는 대량 메일 계정을 등록하는 것을 복잡하게 만들고, 정당한 이메일이 스팸으로 분류되는 경우가 많음.

2세대 이메일에 대한 가설

     * 새로운 DNS 레코드 MX2를 생성함. 대부분의 이메일 서비스는 MX2와 MX 레코드를 가짐. 오래된 서비스는 MX만 가짐.
     * 20년 된 오래된 이메일 클라이언트가 메시지를 보내려고 하면 MX 레코드를 찾아 메시지를 보냄. 현대 클라이언트는 MX2를 보고 메시지를 보냄.
     * MX2를 구현한 이메일 서비스는 공개 날짜를 게시하고, 그 날짜 이후로는 MX 레코드로 보내진 모든 메시지를 스팸으로 자동 분류함.

  2세대 이메일의 우선순위

    1. 이메일을 위한 표준화된 HTML 사양과 적합성 테스트 스위트를 제공함.
    2. 이메일 체인 선호도 또는 기타 이메일 관련 선호도를 위한 헤더를 제공함.
    3. HTML 보기와 함께 텍스트 전용 비HTML 복사본을 제공함.
    4. 모든 MX2 레코드는 공개 키를 포함해야 함.
    5. 이메일의 진위와 무결성을 확인하기 위해 해시를 생성하고, 이를 암호화하여 헤더에 추가함.
    6. SPF, DKIM, DMARC를 제거하고 MX2 레코드 하나로 표준화하여 자체 호스팅 이메일 스택을 단순화함.
    7. IP 주소가 아닌 도메인에 대해 이메일을 인증함.
    8. MX2를 구현하는 클라이언트는 OpenPGP를 대체할 수 있는 새로운 암호화 스킴을 선택할 수 있음.

  추가 생각

     * 대용량 파일을 공유할 수 있는 방법이 필요함.
     * Google과 Microsoft가 참여하지 않으면 MX2는 절대 실현되지 않을 것임.
     * SMTP를 HTTP와 표준화된 REST API 및 JSON 본문으로 대체하는 것도 고려할 수 있음.
     * HTML을 사용하는 것 자체가 논란이 될 수 있음. 이메일은 원래 HTML을 위해 설계되지 않았음.
     * 새로운 표준을 엄격하게 시행할 수 있는 기회가 있음.

  GN⁺의 의견

     * 이메일 시스템의 복잡성과 보안 문제를 해결하려는 시도는 매우 흥미로움. 특히, 이메일의 진위와 무결성을 보장하는 새로운 방법을 제안하는 것은 유용할 것임.
     * 그러나 새로운 표준을 도입하는 것은 매우 어려운 일임. 특히 Google과 Microsoft와 같은 주요 플레이어의 참여가 필수적임.
     * HTML을 사용하는 것에 대한 논란은 여전히 존재함. 보안 문제를 해결하기 위해 다른 마크업 언어를 고려할 필요가 있음.
     * 새로운 표준을 엄격하게 시행하는 것은 이상적이지만, 현실적으로는 어려울 수 있음. 표준의 드리프트와 구현 오류를 방지하기 위한 추가적인 메커니즘이 필요함.
     * 이메일 시스템의 중앙 집중화는 새로운 표준을 도입하는 데 도움이 될 수 있지만, 동시에 특정 기업에 대한 의존성을 높일 수 있음.

   적어도 렌더링 개선 관련해선 Google과 Microsoft가 이미 투자를 했죠... 둘 다 AMP Email 프로젝트에 참여하고 지원했으니까요.

   JSON 처럼 데이터 표준을 만드는 것은 좋은데요.
   렌더링 스펙도 같이 논의되어야해서 쉽지 않을 것 같습니다.

   HTML 을 선택했던 이유도
   HTML+CSS 렌더링 스펙에 무임승차하기 위한 것이 아니었을까요?

   이미 윗분들이 극단적인 사례로 샵메일을 이야기해주셨네요. 개인적으로는 이미 잘 굴러가는 프로토콜을 대놓고 ""deprecated""로 분류하고 (호환되지 않는 어떤 새로운) 프로토콜 표준만을 호환되도록 만드는 것 자체를 상당히 회의적으로 보고있습니다.

    4. 모든 MX2 레코드는 공개 키를 포함해야 함.
       이게 좀 의아스러운게, 서비스 제공자들이 이 공개키를 사용자가 제출한 공개키로 하는것이 아니라 자신들이 만든 공개키로 할 것 같단 말이죠...

   그래서 우리가 삽메일을 만들었… (응? 그거 아니야…)

   ???: 그봐 이래서 보안과 인증이 법우로 보장되는 우리
   메일 써야 한다니까?
   예비군: 아 안써요 안써!!

   이메일 시스템이 편하고 좋긴 한데, 정말로 점차적인 프로토콜 개선이 필요하다는 생각이 듭니다.
   앞으로 몇십년후에도 이 방식으로 쓰는 것은 좀..

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 이메일 시스템의 복잡성과 상호운용성
          + 인터넷 이메일 서비스 운영 경험을 바탕으로, 이메일 시스템은 복잡하지만 보편적으로 채택되고 상호운용성이 뛰어남.
          + 새로운 시스템 도입은 기존 시스템의 막대한 R&D 투자와 경쟁해야 하는 어려움이 있음.
          + 새로운 이메일 시스템을 제안하려면 IETF나 M3AAWG 같은 곳에서 제안하는 것이 좋음.
     * 이메일의 모호성과 문제점
          + 이메일의 헤더가 중복되거나 상충되는 값으로 인해 혼란이 발생할 수 있음.
          + ASCII만 사용해야 하는 헤더에 8비트 값이 포함될 때의 문제 등 다양한 문제가 존재함.
          + 이메일 스레드 관리 방식도 표준화되지 않아 문제를 일으킴.
     * 이메일의 중앙화 문제
          + 이메일의 중앙화는 바람직하지 않음. 기업들은 인류에게 최선이 아닌 자신들에게 유리한 방향으로 행동할 가능성이 큼.
          + 자체 호스팅 이메일은 어렵지 않으며, 신뢰할 수 있는 제공자를 통해 쉽게 호스팅 가능함.
     * HTML 이메일의 문제점
          + HTML 이메일은 피싱, 사기 등의 문제를 일으킬 수 있음.
          + 이메일을 재설계한다면 HTML을 배제하고, Markdown 같은 형식을 사용하는 것이 좋을 것이라는 의견.
     * 이메일의 비동기성 유지 필요성
          + 이메일은 비동기적이어야 하며, 이는 24시간 근무를 방지하는 마지막 기술적 방어선임.
          + 사람들이 더 나은 시스템을 채택하지 않는 이유는 이 때문임.
     * 이메일 서버 운영의 어려움
          + 이메일 서버 운영이 점점 더 어려워지고 있음. 대형 제공자들의 요구사항을 충족해야 하기 때문임.
          + 소규모 서버는 대형 제공자나 스팸 발송자들에 의해 도태되고 있음.
     * 정당한 이메일의 정의
          + 정당한 이메일의 정의는 주관적임. 스팸은 인터넷을 망치고 있으며, 이를 막기 위해 비용을 부과하는 방법이 필요함.
     * 이메일 시스템의 개선 필요성
          + 이메일 시스템을 재설계하더라도 현재의 이메일 시스템을 유지하면서 개선하는 것이 바람직함.
          + 현대적인 암호화 시스템 도입과 발신자 인증 시스템 도입이 필요함.
     * 스팸 방지 체크리스트
          + 스팸 방지를 위한 몇 가지 구현 수정이 필요함.
          + 메일 포워더와 SMTP 서버는 가능한 한 빨리 포워딩하고, 스팸 필터링은 SMTP 수준에서 거부하는 것이 좋음.

   스팸 방지 아이디어 체크리스트
"
"https://news.hada.io/topic?id=14804","페이지 왜곡 보정 기술 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              페이지 왜곡 보정 기술

페이지 뒤틀림 보정 (Page Dewarping)

     * 말려있는 페이지 이미지를 펴는 작업을 최적화 문제로 접근함

배경

     * Leptonica 라이브러리나 Coordinate Transform Model (CTM) 방법 등 기존의 뒤틀림 보정 방법들은 계층적 문제 분해 접근법을 사용함
         1. 텍스트를 라인 단위로 분리
         2. 라인들을 평행하고 수평이 되도록 와핑(warping)이나 좌표 변환을 찾음
     * CTM의 3D 실린더 모델 기반 접근법에서 아이디어를 얻어, 페이지 모양을 결정하는 파라미터들을 사용한 자체 파라메트릭 모델을 만듦
          + 3D 회전/이동 벡터, 페이지 곡률 기울기, 수평선 오프셋 등
     * 최적화 문제로 정의
          + 원본 사진에서 수평 텍스트 영역을 따라 키포인트들을 찾음
          + 초기 추정치에서 시작해 모델 파라미터를 최적화해 키포인트 재투영 에러를 최소화

절차

    1. 페이지 경계 추출
    2. 텍스트 윤곽선 검출

     * 이진화, 모폴로지 연산, 연결요소 분석 사용
     * 세로 텍스트 테이블도 검출하도록 특화

    3. 텍스트 윤곽선을 수평 영역으로 그룹화
    4. 수평 영역에서 키포인트 샘플링
    5. 초기 모델 파라미터 추정
    6. 최적화로 재투영 에러 최소화

     * scipy.optimize.minimize의 Powell 솔버 사용
     * 실행 시간의 대부분을 차지함

    7. 최적 모델로 좌표 변환 후 영상 리매핑 및 이진화

결과

     * 다양한 예제 영상에서 잘 동작함
     * 모델 파라미터 수가 많아 최적화에 시간이 걸림
     * 가로 방향 왜곡은 고려하지 않았음

마무리

     * 배경지식을 쌓고 최적화 문제로 공식화하는 전형적인 워크플로우
     * Deformable Part Model, Active Appearance Model과 유사한 접근법
     * Emacs, Pylint 등 도구 활용 노하우도 얻음
     * 추가 발전 계획은 없지만, 컴퓨터비전을 가르칠 때 참고할 만한 프로젝트

GN⁺의 의견

     * 실제 사용성을 위해서는 가로 방향 왜곡도 보정할 필요가 있어 보임. 이를 위해 CTM처럼 더 정교한 모델이 필요할 듯함.
     * 최적화 속도 개선이 중요해 보임. 파라미터 수를 줄이거나 고속 최적화 기법을 쓰면 도움될 것 같음.
     * 딥러닝 기반 방법과 비교해보면 흥미로울 것 같음. 딥러닝이 특징점 추출과 모델링을 동시에 해결해 줄 수 있을지도.
     * 산업 현장의 문서 디지털화 작업 등에 활용하려면 다양한 레이아웃의 문서에 대한 강인성이 더 확보되어야 할 듯함.
     * 오픈소스로 공개된 것은 좋으나, 실사용을 위해서는 파이썬 스크립트보다는 독립 실행형 프로그램으로 배포하는 것이 나을 것 같음.

        Hacker News 의견

   요약:
     * 이미지 이진화 시 높은 임계값 적용에 주의해야 함
          + 일반 텍스트에는 잘 동작하지만, 삽화나 각주 등이 읽을 수 없을 정도로 훼손될 수 있음
          + Google Books 스캔이 유일한 경우 운이 나쁠 수 있음
     * 2024년인데도 문서 스캐너 앱에 이 기능이 내장되어 있지 않음
     * Adobe 전 CEO John Warnock은 희귀 역사 서적 보존에 힘썼음
          + 펼칠 수 없는 스캔 페이지의 de-curling이 과제였음
          + 관련 프로젝트: Rare Book Room
     * 이 글은 기술 프로젝트와 결정을 효과적으로 문서화하는 방법의 예시로 직장에서 참고할 만함
     * 대학 시절 색상 코딩된 노트 스캔 앱을 만들다 색상 왜곡 문제에 부딪힘
          + 페이지 상단과 하단의 색상이 달라 파란색과 초록색 펜 구분이 어려웠음
     * 결과물이 적절해 보이나, warp 모델이 다소 전역적임
          + 종이의 복잡한 왜곡을 모두 포착하지 못해 최종 결과에 잔류 왜곡이 보임
     * 2016년에 못 봐서 아쉬웠던 흥미로운 글
          + 문제 정의, 스마트한 기법 적용, 잘 동작하는 솔루션 도출의 전 과정이 잘 서술됨
          + 직접 사용할 일은 없겠지만 문제 해결 과정의 훌륭한 예시
     * 설치 오류 발생, GitHub 이슈 등록함
     * 영수증 de-wrinkling도 해보면 좋겠음
     * OCR만 필요하다면 이 단계를 건너뛸 수 있을 것
     * Google은 10년 전에 이미 이 문제를 해결함
     * 가치 있는 책고문서라면 X선 단층촬영으로 비접촉식 de-warping 가능
"
"https://news.hada.io/topic?id=14839","미 법무부, Boeing 737 MAX 추락 사고 형사 책임 가능성 제기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                미 법무부, Boeing 737 MAX 추락 사고 형사 책임 가능성 제기

   내용이 요약할 가치가 없거나 본문과 상관없는 내용입니다.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 첫 번째 의견
          + ""해외""라는 단어 없이도 문장이 더 나았을 것 같음. 사람은 어디서나 사람이고, 사고가 해외에서 일어났다고 덜 중요한 것은 아님. 첫 번째 사고가 미국에서 일어났다면 두 번째 사고를 피할 수 있었을지도 모름.
     * 두 번째 의견
          + 보잉이 737 대신 757에 집중했다면 많은 고통을 피할 수 있었을 것임. 757은 에어버스와 경쟁할 수 있었고, 파일럿 훈련 비용도 적었을 것임. 이 모든 혼란이 Southwest Airlines의 성공을 다룬 비즈니스 잡지 기사 때문일지도 모름.
     * 세 번째 의견
          + 보잉이 형사 기소될 가능성은 낮음. 보잉은 미국의 자랑이고, 유럽의 에어버스나 중국의 코맥과 경쟁에서 지게 할 수 없음. FAA가 치명적인 사고에도 불구하고 보잉을 지상에 묶지 않은 것도 이와 관련이 있음.
     * 네 번째 의견
          + 형사 책임이 있지만 감옥에 가지 않는다면, 이는 형사 책임이 아니라 사업 비용에 불과함.
     * 다섯 번째 의견
          + 회사가 형사 책임을 진다는 것은 약간 더 큰 벌금을 의미함. 개인을 기소하지 않음. 아무도 이 일로 감옥에 가지 않을 것임.
     * 여섯 번째 의견
          + 헤드라인에서는 그럴듯하게 들리지만, 실제로 일어날 때까지 믿지 않을 것임. 미국에서 ""기업의 베일""을 남용한 고위층이 기소되는 일은 거의 없음.
     * 일곱 번째 의견
          + 독점 금지는 언제 할 것인가, 정부여?
     * 여덟 번째 의견
          + 두 명의 내부 고발자를 살해한 것에 대해서도 형사 책임이 있는지 궁금함.
     * 아홉 번째 의견
          + 보잉에게 또 다른 재앙적인 뉴스 사이클. Google Flights에서 MAX 노선을 강조하는 새로운 확장 기능에 대한 제안이 있는지 궁금함. 확장 기능 링크
"
"https://news.hada.io/topic?id=14828","일리야 수츠케버, OpenAI 퇴사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          일리야 수츠케버, OpenAI 퇴사
"
"https://news.hada.io/topic?id=14847","미디어 산업을 감염시키는 AI 기반 콘텐츠 괴물, AdVon","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   미디어 산업을 감염시키는 AI 기반 콘텐츠 괴물, AdVon

AdVon의 AI 기반 콘텐츠 생산 및 가짜 작가 활용

     * 개발도상국 작가가 AdVon Commerce에서 계약직으로 일하면서 단어당 몇 센트를 받고 온라인 제품 리뷰를 작성함
     * 작가의 역할은 곧 AdVon이 개발 중인 AI 시스템 ""MEL""로 생성된 초안을 다듬는 것으로 바뀌었음
     * 작가는 MEL의 작업에 대해 자세한 메모를 남기라는 요청을 받았는데, 이는 자신의 역할을 결국 대체할 AI를 미세 조정하는 데 사용되었다고 믿음
     * MEL이 ""스스로 쓸 수 있을 만큼 충분히 훈련되자"" 작가들은 해고되었음
     * 작가는 ""꽤 많이 고통받았다""며 ""그들은 착취적이었다""고 말함

AdVon의 가짜 작가 활용 사례

     * USA Today 웹사이트에 실제 사람으로 보이지 않는 바이라인으로 제품 리뷰가 게재되는 것을 Gannett 직원이 발견함
     * Sports Illustrated에서도 AdVon이 가짜 작가의 바이라인과 AI로 생성된 프로필 사진을 사용하여 유사한 운영을 하고 있었음
     * AdVon은 바이라인이 가짜라는 것과 프로필 사진이 AI로 생성되었다는 것을 부인하지 않았지만, 실제 기사는 실제 사람이 썼다고 주장함

AdVon 콘텐츠의 광범위한 게재

     * AdVon의 가짜 작가와 작품이 할리우드 라이프, 어스 위클리 같은 연예 가십 매체부터 LA 타임스 같은 유명 신문까지 광범위하게 발견됨
     * McClatchy는 AdVon과의 관계를 종료하고 마이애미 헤럴드, 새크라멘토 비 등 20개 이상의 신문에서 수백 개의 AdVon 기사를 삭제함
     * 과거 AdVon 웹사이트에는 PC Magazine, Mashable, AskMen, Good Housekeeping, People, Parents, Food & Wine, InStyle, Real Simple, Travel + Leisure, Better Homes & Gardens, Southern Living 등 많은 유명 매체와 협력한다고 나와 있었음

AdVon의 MEL AI를 사용한 리뷰 생성 시연 영상

     * AdVon 관리자가 기사의 제목과 아마존 제품 링크만 입력하면 MEL AI가 기사의 모든 단어를 생성하는 과정을 보여줌
     * MEL의 작업은 종종 어색하고 모호하며 때로는 스스로 모순되기도 함
     * 출력물이 이해가 안 되면 관리자는 단순히 새 버전을 생성하라고 지시함
     * ""로봇이 쓴 것처럼 들리지 않게 하는 게 우리의 목표""라고 관리자는 말함

AdVon 리뷰의 낮은 품질과 이상한 실수들

     * AdVon 리뷰는 필러와 진실로 가득 차 있고 때로는 기괴한 실수를 포함하고 있어 게시 전에 사람이 진지하게 검토했다고 믿기 어려움
     * 웨이트 리프팅 벨트 리뷰에서 갑자기 옷 벨트에 대해 이야기하거나 전자레인지 리뷰에서 일반 오븐으로 바뀌는 등 설명 없이 주제가 급변하는 경우가 있음
     * 같은 작가의 다른 전자레인지 리뷰에서도 전자레인지에 알루미늄 호일을 사용해도 된다고 하는 등 동일한 이상한 실수가 반복됨

가짜 작가 할당과 실제 인물 바이라인으로의 교체

     * 기사 작업을 마치면 가짜 작가의 이름을 붙이는 것이 AdVon 내부자들의 역할이었음
     * Gannett 직원이 USA Today의 AdVon 가짜 작가를 지적한 후, 가짜 이름이 사라지고 실제인 것 같은 사람들, 특히 AdVon CEO인 Ben Faw와 개인적 관계가 있는 사람들의 이름으로 대체되기 시작함
     * Julia Yoo라는 바이라인이 등장했는데, 그녀는 Ben Faw의 아내로 보이며 MIT 학위, Autodesk 임원 경력, 오바마 행정부에서 백악관 경제 고문 경력 등 AdVon의 다른 직원들에 비해 지나치게 화려한 이력을 가지고 있음
     * Denise Faw라는 바이라인도 등장했는데, 그녀는 Ben Faw의 어머니로 보임

AdVon의 SellerRocket을 통한 협찬 리뷰

     * AdVon의 CEO Ben Faw와 사장 Eric Spurling은 SellerRocket이라는 또 다른 회사도 운영하고 있는데, 아마존 제품 판매자에게 AdVon이 제품 리뷰를 게재하는 동일한 매체에 홍보 대가를 받음
     * SellerRocket의 직원들은 YouTube 영상에서 이 계획이 어떻게 작동하는지 매우 솔직하게 설명함
     * SellerRocket의 고객 제품은 AdVon의 CMS에서 ""귀여운 작은 로켓 아이콘""으로 표시되며 ""항상 우선순위가 부여""됨

AdVon CEO Ben Faw의 경력과 비즈니스 행태

     * Faw는 화려한 경력을 가지고 있지만, 전 동료에 따르면 저품질 콘텐츠로 더 많은 돈을 벌려고 끊임없이 노력함
     * Faw는 ""소비자를 완전히 경멸""하며 ""빠르고 저렴하게 자신에게 더 많은 돈을 벌 수 있는 방법을 찾는 것만 신경 썼다""고 함
     * Faw는 Futurism의 모회사 고위층과의 개인적, 사업적 관계를 강조하며 보도에 영향을 주려 함

AdVon의 주장 변화와 모순

     * AdVon은 처음에는 AI를 사용하지 않는다고 부인했지만, AI 생성 리뷰 영상 증거가 제시되자 일부 고객에게는 AI를 사용한다고 인정함
     * AdVon이 제공한 기사 편집 기록은 사람이 쓴 것처럼 보이기에는 너무 빠른 속도로 작성되어 있어 설득력이 없음
     * AdVon은 MEL AI가 2023년까지 운영되지 않았다고 주장하지만 직원들의 LinkedIn 프로필은 이를 반박함
     * AdVon은 AI로의 전환으로 인해 작가를 해고하지 않았다고 주장하지만 LinkedIn 상의 작가 수는 급감한 것으로 보임

AI 콘텐츠에 대한 독자의 반응과 업계의 동향

     * Sports Illustrated 가짜 작가 사건 직후 설문 조사에서 응답자의 80%가 이를 불법으로 만들어야 한다고 응답함
     * 저널리즘은 신뢰를 기반으로 하는 산업이지만 AdVon의 가짜 작가와 법적 위협의 미로에서는 작가가 실제 사람인지, AI가 기사를 생성했는지 등 기본적인 질문에 대해서도 신뢰하기 어려워짐
     * 일부 매체는 AI를 정직하게 활용하는 방안을 모색 중이지만 대부분의 실험은 오류와 표절 가능성 등으로 곤혹을 치름
     * 최악의 경우 AI는 사기꾼들이 전례 없는 규모로 저품질 콘텐츠를 량 생산하게 하여 웹 전체를 스팸으로 뒤덮을 위협이 됨
     * AdVon 같은 회사가 AI로 형편없는 콘텐츠를 찍어내면서 작가를 내쫓는 것은 놀랍지 않지만, 신뢰받는 매체가 이를 유통시키는 것은 AI 시대의 비극임

   이러면 진짜 한국이나 중국 같이 사람마다 부여되는 고유번호 기반의 본인인증으로 계정을 생성하도록 하는것만이 답이 될까요.... 무섭네요
"
"https://news.hada.io/topic?id=14894","리븐 기술 혁신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                리븐 기술 혁신

Riven: 미스트의 후속작

  Cyan의 성공과 미스트의 탄생

     * 1993년 9월: Rand와 Robyn Miller 형제와 Cyan, Inc.의 몇몇 직원들은 가난한 예술가로 생활하고 있었음.
     * 미스트 출시: 브로더번드가 Apple Macintosh 퍼즐 게임 미스트를 출시했으며, 이는 틈새 시장을 위한 제품으로 여겨졌음.
     * 대중적 성공: 미스트는 Microsoft Windows 버전으로도 출시되며 대중적인 히트를 기록함. 1996년 12월에는 한 달 동안 가장 많은 판매량을 기록함.

  미스트의 영향과 Cyan의 성장

     * 수상 및 언론 보도: 미스트는 수많은 상을 받았고, Rolling Stone, Newsweek, Wired 등의 잡지에 소개됨.
     * 미스트의 성공: Robyn Miller는 ""수백만 명이 이 게임을 구매하고 있다는 사실을 이해하기 어려웠다""고 말함.
     * 형제의 선택: Miller 형제는 미스트로 번 돈을 새로운 프로젝트에 투자하기로 결정함.

  리벤 개발 과정

     * 브로더번드의 기대: 브로더번드는 미스트의 후속작을 원했지만, Miller 형제는 서두르지 않기로 결정함.
     * 독립적인 자금 조달: Cyan은 브로더번드의 전통적인 출판사 선금을 받지 않고, 미스트의 로열티로 리벤을 자체 자금으로 개발하기로 함.
     * 새로운 사무실: Cyan은 스포캔, 워싱턴에 새로운 ""Cyan World Headquarters""를 건설함.
     * 고급 장비: 리벤의 이미지는 $1백만 달러 상당의 Silicon Graphics 하드웨어를 사용해 렌더링됨.

  리벤의 개발 팀

     * Richard Vander Wende: 디즈니의 전 프로덕션 디자이너인 Richard Vander Wende가 리벤의 개발에 큰 기여를 함.
     * 개발 인력: 1996년 여름까지 20명 이상의 사람들이 매일 리벤 개발에 참여함.

  리벤의 게임플레이와 디자인

     * 미스트와의 유사성: 리벤은 미스트와 유사한 게임플레이를 제공하지만, 더 깊고 복잡한 퍼즐을 제공함.
     * 관광객과 게이머: Cyan은 미스트 플레이어를 ""게이머""와 ""관광객""으로 나누었으며, 리벤은 두 그룹 모두를 만족시키기 위해 설계됨.
     * 퍼즐과 탐험: 리벤은 퍼즐을 풀지 않아도 대부분의 장소를 탐험할 수 있도록 설계됨.

  리벤의 시장 반응

     * 미스트 클론: 미스트의 성공 이후 여러 ""미스트 클론"" 게임들이 출시되었지만, 대부분은 큰 성공을 거두지 못함.
     * 리벤의 성공: 리벤은 첫 해에 100만 장 이상 판매되었으며, 미스트와 함께 판매 차트 상위권을 유지함.

  리벤의 퍼즐과 스토리텔링

     * 퍼즐의 복잡성: 리벤의 퍼즐은 매우 정교하고 현실적이며, 플레이어는 많은 노트를 작성해야 함.
     * 스토리텔링: 리벤의 스토리는 미스트보다 더 잘 구성되어 있으며, 탐험을 통해 점진적으로 드러남.

  리벤의 시각적 및 청각적 경험

     * 시각적 충실도: 리벤은 고급 3D 렌더링 기술을 사용해 매우 현실적인 세계를 구현함.
     * 텍스처: Cyan은 뉴멕시코 산타페에서 수천 개의 텍스처를 캡처하여 게임에 사용함.

  리벤의 유산

     * 미래의 도전: 리벤은 미스트의 성공을 이어받았지만, Cyan은 세 번째로 같은 성공을 거두기 어려웠음.
     * 개발자들의 이탈: Richard Vander Wende와 Robyn Miller는 리벤 출시 후 Cyan을 떠남.

GN⁺의 의견

     * 퍼즐 게임의 진화: 리벤은 퍼즐 게임의 정교함을 한 단계 끌어올렸으며, 이는 퍼즐 게임 팬들에게 큰 매력을 제공함.
     * 스토리텔링의 한계: Cyan의 게임은 주로 배경 이야기에 집중했으며, 이는 일부 플레이어에게는 매력적이지만, 다른 이들에게는 부족하게 느껴질 수 있음.
     * 기술적 혁신: 리벤은 당시 최신 기술을 활용해 높은 시각적 충실도를 제공했지만, 이는 고사양 컴퓨터를 요구해 일부 플레이어에게는 접근성이 떨어졌음.
     * 게임의 지속성: 미스트와 리벤은 비폭력적이고 심오한 게임플레이로 인해 오랜 기간 동안 사랑받았으며, 이는 게임 산업에서 드문 사례임.
     * 현대적 재해석: Cyan이 리벤의 리메이크를 준비 중이며, 이는 현대 플레이어들에게 새로운 경험을 제공할 기회가 될 것임.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Riven 게임의 흥미로운 사실:
          + 게임에 등장하는 거대한 검 소품은 Mythbusters의 Adam Savage가 제작한 것임.
     * Riven 게임에 대한 반응:
          + Riven 같은 게임은 지적 도전이 재미있다고 느끼는지와 현재의 생활에서 그런 도전에 시간을 투자할 수 있는지에 따라 다름.
          + 90년대부터 2000년대 중반까지는 빠른 인터넷이 보편화되지 않아 이런 게임들이 천천히 즐길 수 있었음.
          + 현재는 Outer Wilds와 The Witness 같은 게임들이 있지만, 인터넷 시대에 맞춰 많은 양보를 하고 있음.
     * Myst 게임의 CD 출시:
          + 당시 많은 사람들이 CD-ROM 드라이브를 가지고 있지 않아 위험한 시도였음.
          + 그러나 CD-ROM 드라이브를 가진 사람들은 거의 모두 게임을 구매했음.
     * Riven 게임의 추억:
          + CD-ROM 드라이브를 설치한 후 게임을 받았지만, 그래픽 하드웨어 문제로 실행되지 않았음.
          + 나중에 새로운 PC로 게임을 플레이했을 때, 퍼즐을 기억하고 있었지만 스토리는 기억하지 못했음.
          + 최신 Myst 재발매 버전도 플레이할 가치가 있음.
     * 그래픽과 프로그래밍에 대한 관심:
          + Myst와 Riven이 그래픽과 프로그래밍에 대한 관심을 불러일으켜 기술 분야로의 진로를 결정하게 됨.
          + 섬을 이동할 때마다 CD를 교체하는 경험이 매우 매력적이었음.
     * Riven의 3D 리메이크:
          + Cyan에서 현재 Riven을 3D로 리메이크 중임.
     * 스토리텔링과 세계 구축:
          + Riven의 복잡한 퍼즐을 생성하는 도구를 만들 수 있을지에 대한 질문.
          + 복잡한 퍼즐을 생성하는 것은 매우 어려운 작업임.
     * 가족과 함께한 Myst 게임:
          + 가족과 함께 큰 화면에 컴퓨터를 연결해 게임을 풀었던 추억이 있음.
          + 게임의 글쓰기와 세계 구축의 질이 매우 높았음.
     * Riven의 CGI:
          + Riven의 CGI는 현대 게임 엔진과 비교해도 여전히 뛰어남.
     * Myst와 Riven의 난이도:
          + 14살 때 Myst는 클리어했지만 Riven은 가이드가 필요했음.
          + Super Mario 64 도움말 핫라인에 전화한 경험도 있음.
"
"https://news.hada.io/topic?id=14811","SVG를 통한 이메일 주소 보호 방식, JavaScript 대신 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 SVG를 통한 이메일 주소 보호 방식, JavaScript 대신 사용

     * SVG를 이용한 이메일 주소 보호 기법
          + 실제 데모는 SVG-based Email Protection 링크 참조
          + 웹 페이지에 공개된 이메일 주소는 보통 이메일 수집 봇으로부터 보호가 필요함
          + 기존에는 HTML, CSS, JS의 조합을 이용한 기법들이 사용되었으나 각각 장단점이 있음
          + JS를 이용한 방식이 HTML/CSS 기반 대안들보다 더 정교하지만, JS가 해당 페이지의 필수 요소가 되는 단점이 있음
          + JS는 페이지를 개선할 수 있지만, 이상적으로는 JS가 꺼져 있어도 페이지의 모든 필수 기능이 동작하는 것이 좋음
          + 이 페이지에서 소개하는 기법은 CSS, JS, CSS+JS 등의 기존 이메일 보호 기법과는 전혀 다른 SVG 기반 접근 방식을 사용함
     * SVG 기반 이메일 주소 보호 기법의 3가지 장점
         1. JavaScript가 꺼져 있어도 동작
               o SVG 기반 접근 방식의 주요 장점은 JS가 전혀 필요 없다는 것
               o 방문자가 JS를 끄더라도 페이지에 표시된 이메일 주소는 사용 가능하고 접근 가능하며 보호되면서도 안전하고 스팸봇으로부터 숨겨짐
         2. 표준 mailto: 링크 사용 가능
               o 다른 JS가 필요없는 방식들(HTML 주석 삽입, 요소 숨김 등)과 달리 SVG 기반 방식은 표준 mailto: 링크 사용이 가능함
               o 단, mailto: 링크는 참조하는 HTML 문서 내부가 아니라 외부 SVG 문서 내부에 존재함
         3. 이미지처럼 내용을 감추면서도 텍스트처럼 복사 가능
               o 임베디드 SVG는 이미지와 비슷하지만 이미지는 아님
               o 하이퍼텍스트 문서에 임베디드된 대체 요소로서 SVG는 이미지만큼 효과적으로 이메일 주소를 스팸봇으로부터 감출 수 있음
               o 하지만 SVG는 엄밀히 말해 실제 이미지가 아니라 그래픽 문서임
               o 따라서 이미지와 달리 임베디드 SVG의 <text> 요소를 우클릭하여 이메일 주소를 복사할 수 있음
     * 코드 구현
          + 예제는 2개 파일로 구성됨
          + SVG 그래픽 문서는 HTML 하이퍼텍스트 문서에 <object> 태그를 이용해 임베디드됨
          + 동일한 SVG 그래픽 문서를 하이퍼텍스트에 한 번 또는 여러 번 임베드할 수 있음
          + HTML 파일과 SVG 파일 코드 예제 포함
     * 접근성 고려사항
          + 이 설정이 가능한 한 접근 가능한 상태로 유지되도록 하는 것이 중요함
          + 이를 위해 SVG 그래픽 문서에서 다음 사항 주의:
               o 전체 SVG 문서는 SVG 문서 <title>에 의해 aria-labelledby 되어 액션 호출을 나타냄
               o SVG 내부 앵커 요소 <a>에는 동일한 액션 호출을 하는 aria-label이 있음
               o SVG는 앵커 요소 <a>에 탭 포커스가 있을 때 자식 요소인 <rect>와 <text>가 모두 강조 표시되도록 스타일링됨

GN⁺의 의견

     * HTML 문서에서 SVG를 임베드하여 JS 의존성 없이 스팸봇으로부터 이메일 주소를 숨기는 독특한 접근 방식임. 접근성과 사용성을 함께 고려한 흥미로운 기법으로 보임.
     * 하지만 아무리 정교한 프론트엔드 기술을 사용해도 가장 정교한 스팸봇을 완벽히 막을 수는 없다는 점은 유의해야 함. 이는 어떤 보안 솔루션에나 적용되는 한계점.
     * 이 기법의 실무 도입을 위해서는 SEO에 미치는 영향, 다양한 브라우저/디바이스 호환성, 퍼포먼스 등 추가적인 검증이 필요할 것으로 보임.
     * 이메일 보호를 위한 백엔드 솔루션으로는 reCAPTCHA, Honeypot 기법 등도 함께 고려해볼 만함.
     * CSS와 SVG의 고급 기능을 활용하는 흥미로운 방식이지만, 실무에서 적용하기에는 아직 제약사항이 있어 보임. 하지만 프론트엔드 개발자라면 한 번쯤 테스트해볼 만한 재미있는 아이디어임.

        Hacker News 의견

   요약하면, 웹 페이지에 공개된 이메일 주소를 스팸봇으로부터 보호할 필요가 있는지에 대한 의견들은 다음과 같음:
     * 오랫동안 웹사이트에 이메일 주소를 공개했지만, 스팸 필터가 잘 작동하여 스팸 문제가 크지 않음
     * Gmail과 로컬 회사에서 호스팅하는 웹메일 모두 스팸 필터링이 잘 되고 있음
     * 하루에 15개 정도의 스팸 메일이 도착하지만, Purelymail 덕분에 큰 문제가 되지는 않음
     * 정작 문제는 관련 없는 트랜잭션 이메일, 뉴스레터 정크 스팸, 사용되지 않는 소셜 네트워크 알림 등임
     * 요즘 스팸 필터가 잘 되어서 이메일 주소를 공개해도 스팸 증가는 크지 않음
     * 하루에 1개 미만의 스팸 메일이 받은편지함에 도착하는 것은 괜찮은 수준임
     * 이메일 제공업체와 스팸 필터에 따라 다를 수 있지만, 개인적으로는 문제되지 않음
     * Firefox의 NoScript로는 <object> 태그가 렌더링되지 않아 이 기술이 작동하지 않음
     * ""이메일 보호""는 무의미할 뿐 아니라 오히려 해롭기까지 함
     * JS 없이도 잘 읽히는 사이트에서 1920x1080@60Hz가 [email protected]로 표시되는 문제가 있음
"
"https://news.hada.io/topic?id=14795","dufs - Rust로 작성된 경량 파일/웹 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      dufs - Rust로 작성된 경량 파일/웹 서버

     * 정적 파일 서빙
     * 웹서버로 사용 가능
          + SPA 및 정적 웹 사이트 지원
     * 파일 검색 기능
          + 별도의 DB가 없으므로 파일 검색은 주의해서 사용
     * webdav 기능
     * zip 압축 다운로드 기능
     * 업로드 및 간단한 텍스트 수정
     * http basic, digest 인증 지원
     * 커스텀 CSS 지원
"
"https://news.hada.io/topic?id=14821","iPad Pro 리뷰 아님: iPadOS가 여전히 기본을 제대로 못하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               iPad Pro 리뷰 아님: iPadOS가 여전히 기본을 제대로 못하는 이유

Missing Apps

     * 아이패드에는 매킨토시와 아이폰에서 사용할 수 있는 일부 앱이 없음
     * 14년이 지난 지금까지도 아이패드에 내장 계산기 앱이 없음
     * 아이패드에는 텍스트에딧이나 프리뷰 같은 기본 텍스트 편집기나 파일 뷰어가 없음
     * 아이폰에 저널 앱이 출시되었지만 아이패드 버전은 없음

Not-So-Desktop-Class Apps

     * 아이패드 OS의 기본 앱들은 매킨토시 버전에 비해 기능이 부족함
     * 애플이 ""데스크톱급 앱""을 약속했지만, 실제 구현은 일관성이 없고 부족함
     * 메모나 리마인더는 스마트 폴더와 리스트를 지원하지만, 메일이나 뮤직은 매킨토시 버전의 스마트 기능을 지원하지 않음
     * 아이패드 OS의 사파리는 매킨토시 버전처럼 툴바 커스터마이징을 지원하지 않음
     * 매킨토시의 사전 앱은 풍부한 기능을 제공하지만 아이패드에서는 단순한 ""조회"" 기능만 있음

Files: A Slow, Unreliable File Manager

     * 파일즈 앱은 안정성과 성능 면에서 근본적인 재설계가 필요함
     * 14년이 지난 지금도 부족한 파일즈 앱을 계속 사용하는 것은 용납하기 어려움
     * 복사, 이동 등 기본 파일 관리 작업에서도 실패하는 경우가 많음
     * 파일즈는 파인더에 비해 느리고 응답하지 않는 상태에 빠지는 경우가 많음
     * 아이클라우드 드라이브와의 통합도 매킨토시의 파인더보다 불안정함
     * 전송 속도 표시, 사용자 지정 Quick Action, Spotlight 연동 등 기능이 없거나 제한적임
     * 파일 확장자에 따른 기본 앱 설정 기능이 없음

Audio Limitations

     * 아이패드 OS에는 두 가지 핵심적인 오디오 문제가 있음
          + 여러 오디오 스트림을 동시에 재생할 수 없음
          + VoIP 통화 중에 자신의 로컬 오디오를 녹음할 수 없음
     * 통화 중 로컬 오디오 녹음 기능은 팟캐스팅 등에 필수적이지만 아이패드에서는 여전히 지원되지 않음
     * 아이패드 OS는 여전히 한 번에 하나의 오디오 소스만 재생할 수 있음

Multitasking: A Fractured Mess

     * 아이패드의 멀티태스킹 인터페이스는 일관성 없이 계속 변경되어 왔음
     * 스테이지 매니저는 아이패드에 데스크톱과 유사한 멀티태스킹을 제공하려는 시도였지만 초기에는 문제가 많았음
     * 아이패드 OS 17에서 스테이지 매니저의 안정성이 개선되었지만 유연성이 여전히 부족함
          + 한 번에 4개의 창으로 제한됨
          + 자주 사용하는 창 조합을 프리셋으로 저장할 수 없음
          + 활성 창 선택이 잘못되는 버그가 있음
          + 현재 앱의 새 창을 쉽게 열 수 있는 방법이 없음
          + 현재 작업 공간의 모든 창을 빠르게 미리보기할 방법이 없음
     * 분할 뷰와 슬라이드 오버도 수년간 실질적인 업데이트가 없었음

Spotlight

     * 아이패드용 스포트라이트는 느리고 일관성 없는 성능을 보임
     * 검색 결과가 제대로 표시되지 않거나, 키보드 응답이 없는 경우가 있음
     * 앱 내 문서 검색이 제대로 작동하지 않는 경우가 많음
     * 아이패드 OS에서는 서드파티 검색 대체 앱을 설치할 수 없음

Lack of Background Processes and System-Wide Utilities

     * 아이패드 OS는 다른 작업을 하는 동안 백그라운드에서 오래 실행되는 복잡한 작업을 지원하지 않음
     * M 시리즈 칩과 많은 RAM에도 불구하고 파이널 컷 프로의 내보내기가 다른 앱으로 전환하면 취소됨
     * 백그라운드에서 작업을 수행하려는 앱은 아이패드 OS에서 존재할 수 없음
     * 클립보드 관리자, 비디오 인코더, 자동화 도구 등을 아이패드에서 실행할 수 없음
     * 시스템 전체 유틸리티도 아이패드 OS에 존재할 수 없음

To Be Fixed Later This Year, But Only for Some

     * 유럽 디지털 시장법으로 인해 일부 문제가 해결될 예정이지만 유럽에 한정될 것임
     * 그러나 이는 아이패드 OS의 근본적인 변화를 의미하지는 않음
     * 진정한 변화는 애플 최고위층에서부터 이뤄져야 함

Inefficiency by a Thousand Cuts

     * 12년간 아이패드를 주요 컴퓨터로 사용하며 수많은 사소한 버그와 불편함을 경험함
     * 서드파티 백업 도구나 타임 머신 같은 내장 백업 기능이 없음
     * 외장 디스플레이 사용 시 아이패드를 열어두어야 하고 일부 기능은 외장 화면에서 사용할 수 없음
     * 홈 화면에서 아이콘을 자유롭게 배치하거나 파일을 고정할 수 없음
     * 매직 키보드 사용 시 포인터가 멈추는 경우가 있음

The Need for Change

     * 아이패드를 사랑하지만 운영 체제가 하드웨어의 발전 속도를 따라가지 못하고 있음을 인정해야 함
     * 매킨토시를 아이패드에 올리는 것이 해결책은 아니지만, 아이패드 OS가 기본적인 컴퓨팅 작업에서 여전히 실패하고 있음을 고려해야 함
     * 아이패드 OS는 결함이 있는 운영 체제이며 여전히 기본을 제대로 파악하지 못하고 있음
     * 새로운 아이패드 프로가 곧 출시될 예정이지만, 또 다시 같은 아이패드 OS 사이클이 반복될 것 같은 느낌을 지울 수 없음

GN⁺의 의견

     * 멀티태스킹 개선 필요
          + iPadOS의 멀티태스킹 기능을 더 직관적이고 사용하기 쉽게 개선할 필요가 있음.
          + 사용자가 원하는 대로 화면을 분할하고 앱을 배치할 수 있는 기능이 필요함.
     * 파일 관리 시스템 강화
          + 파일 앱의 기능을 강화하여 사용자가 파일을 더 쉽게 찾고 관리할 수 있도록 해야 함.
          + 다른 운영체제와의 호환성을 높여야 함.
     * 프로 앱 개발 촉진
          + iPadOS에서 사용할 수 있는 전문적인 앱을 더 많이 개발해야 함.
          + 크리에이티브 작업이나 전문적인 업무를 수행할 수 있는 소프트웨어가 필요함.
     * 외부 장치 지원 확대
          + 외부 저장 장치나 주변기기와의 호환성을 높여야 함.
          + USB-C 포트를 통한 다양한 외부 장치를 원활하게 사용할 수 있도록 해야 함.
     * 사용자 경험 개선
          + 터치 인터페이스의 한계를 보완할 수 있는 기능이 필요함.
          + 마우스와 키보드 사용을 더 원활하게 지원해야 함.
          + 앱 간의 데이터 공유와 연동을 강화하여 생산성을 높여야 함.

   아이패드가 정말 특정한 케이스에서는 유용 (주로 미디어 소비) 하지만, 이걸로 애플이 정해둔 작업 이외에 걸 해보려고 하면 많이 아쉽긴 합니다. 갤럭시탭이 DeX 지원부터 대형 화면, 나름 합리적인(?!) 가격까지 두루 갖추고 있어서 그나마 대안이 되는 점은 좋습니다만 반대로 안드 진영은 앱 퀄리티가 앱스토어 대비 그닥이라... (전 그래서 둘다 쓰고 있습니다 ㅎ)

   애플이 저걸 모를까요? 아이패드는 딱 저기까지만 하고 선을 긋는거죠. 저게 다 되면 아이패드가 아니라 맥북이 되니까.

   이래서 제가 아이패드를 안 사는 겁니다! 와이프의 허락을 못 받아서 그런게 아니라구요. 다들 아시죠?

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * iPadOS의 다중 사용자 지원 부족
          + iPadOS는 여전히 다중 사용자 및 사용자 전환을 지원하지 않음. 이는 하드웨어가 충분히 가능함에도 불구하고 큰 단점으로 작용함. iPad는 가족 내에서 공유되는 경우가 많아 각 사용자별 프로필이 필요함.
     * 텍스트 편집의 문제
          + iPad의 가장 큰 문제는 텍스트 편집이 매우 불편하다는 점임. 인용구를 추가하거나 철자를 수정하는 등의 작업이 매우 번거로움. 이는 처음 iPhone이 출시된 이후로 개선되지 않았음.
     * 멀티 오디오 스트림 및 개발자 도구 부족
          + Safari에서 오디오를 재생하면 다른 앱의 오디오가 중단됨. 또한, 외부 디스플레이에서 Stage Manager가 버그가 많음. 개발자 도구가 부족하여 iPad에서 소프트웨어 개발이 어려움.
     * 사용자 인터페이스 단순화 필요
          + 나이 든 사용자들이 iPad를 사용할 때 멀티 앱 모드를 실수로 활성화하면 어려움을 겪음. 단일 앱 실행 모드와 같은 단순한 인터페이스가 필요함.
     * iPad Pro의 잠재력 낭비
          + iPad Pro는 강력한 하드웨어를 가지고 있지만, 데스크탑 수준의 앱이나 게임을 실행하지 못함. Apple이 이를 제한하고 있음.
     * Samsung DEX와 같은 기능 필요
          + iPad가 키보드와 포인터를 연결하면 macOS로 전환되는 기능이 필요함. 이는 사용자들이 기존 하드웨어를 더 유용하게 사용할 수 있게 함.
     * iPad의 다중 작업 문제
          + 많은 iPad 사용자들이 멀티태스킹 기능을 모르거나 사용하지 않음. 그러나 전문적인 워크플로우를 위해서는 데이터 이동과 같은 기능이 필요함. iPadOS는 이러한 작업에 적합하지 않음.
     * Microsoft Surface와의 비교
          + Microsoft Surface Pro 10이 ARM 칩과 OLED 스크린을 탑재하여 업데이트될 예정임. 이는 하이브리드 태블릿/노트북을 찾는 사용자들에게 좋은 선택이 될 수 있음.
     * 백그라운드 프로세스의 중요성
          + iPad에서 진정한 멀티태스킹과 백그라운드 작업이 가능해지면 더 많은 전문 앱들이 지원될 것임. 하드웨어는 충분히 강력하지만 소프트웨어 지원이 필요함.
     * 흥미로운 사실
          + TextEdit, Dictionary, Preview와 같은 앱들은 원래 MacOS X 앱이 아니라 NeXTSTEP 앱이었음.

   Mac OS 10 자체가 MacOS9의 후신이 아니라 NeXTSTEP의 후신이죠
"
"https://news.hada.io/topic?id=14889","20에이커 규모의 Capture the Flag 게임 조직","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    20에이커 규모의 Capture the Flag 게임 조직

20에이커 규모의 깃발 뺏기 게임을 개최한 이야기

  I: 시작

     “들어봐, 나에 대해, 시작에 대해 알아야 할 것이 있어... 아이디어는 바이러스와 같아, 강하고 전염성이 강해. 가장 작은 아이디어의 씨앗이 자라날 수 있어. 그것은 너를 정의하거나 파괴할 수 있어.” – Dom Cobb, 인셉션 (2010)

     * 3월 말의 어느 저녁, 가족과 함께 스테이크와 감자를 먹고 있었음
     * 고등학교 졸업을 앞두고 있었고, 친구의 아버지 Taylor가 인생 조언을 해줌
     * Taylor는 더 많은 장난을 치라고 조언했음
     * 이 조언이 마음에 남아, 친구들과 함께 재미있는 일을 계획하게 됨
     * YouTube에서 일본 전역에서 96시간 동안 깃발 뺏기 게임을 하는 영상을 보고 영감을 받음
     * 지역 공원에서 대규모 깃발 뺏기 게임을 계획하게 됨

  II: 계획

     “계획 없는 목표는 단지 소원일 뿐이다.” – 앙투안 드 생텍쥐페리

     * 공원을 찾기 위해 Zilker와 Auditorium Shores를 후보로 선정함
     * Google MyMaps를 사용해 첫 번째 프로토타입을 만듦
     * 첫 번째 프로토타입은 너무 넓고, 지형이 재미없고, 불균형했음
     * Auditorium Shores로 이동해 여러 프로토타입을 만들고 수정함
     * 최종 지도를 완성하고 31명의 친구들을 초대함
     * Amazon에서 $120 상당의 장비를 주문함
          + 30개의 깃발 축구 벨트와 90개의 깃발
          + 48개의 오렌지 콘
          + 8개의 놀이터 공

  III: 게임 디자인

     ""게임을 디자인하는 것은 결국 그것을 플레이할 사람을 상상하는 것이다."" – Gabrielle Zevin, 내일과 내일과 내일

     * 게임 규칙은 3분 이내에 설명할 수 있어야 함
     * 클래식한 깃발 뺏기 규칙을 유지하면서 몇 가지 주요 변경 사항을 추가함
         1. 중립 구역을 추가함
         2. 각 팀은 두 개의 ""깃발""을 가짐
         3. 모든 사람은 팀 색상의 깃발 축구 벨트를 착용함
         4. 적지에서 태그되면 중립 구역으로 돌아가 1분 동안 기다려야 함

  IV: 규칙

     ""게임의 규칙을 배워야 한다. 그리고 누구보다 잘 플레이해야 한다."" – Dianne Feinstein

     * 전체 초기 규칙 목록
         1. 정직하게 플레이하고, 전신 접촉 금지
         2. 게임 중 플레이 영역을 벗어나지 않음
         3. 빨간 팀과 파란 팀이 있으며, 각 팀은 동일한 수의 플레이어로 구성됨
         4. 적지에서 두 개의 ""깃발""을 중립 구역으로 가져오면 승리
         5. 적지에서 태그되면 중립 구역으로 돌아가 1분 동안 기다려야 함
         6. 중립 구역에서는 태그되지 않음
         7. 팀의 ""깃발""은 특정 조건을 충족해야 함
         8. 팀의 ""깃발""을 이동할 수 없음
         9. 팀의 ""깃발""에서 6피트 이상 떨어져 있어야 함
        10. ""깃발""을 들고 태그되면 그 자리에 ""깃발""을 떨어뜨려야 함
        11. ""깃발""을 던질 수 있지만, 땅에 닿으면 자동으로 태그됨

  V: 전략

     ""모든 전쟁은 속임수에 기반한다."" – 손자, 전쟁의 기술

     * 31명을 초대했지만 19명이 참석함
     * 10대 10으로 게임을 진행함
     * 세 가지 주요 전략이 나타남
         1. 깃발 위치: 첫 번째 게임에서는 깃발을 구역 뒤쪽에 숨겼지만, 두 번째 게임에서는 더 예측하기 어려운 위치에 숨김
         2. 공격 대 방어: 공격이 더 많을 것이라 예상했지만, 방어가 더 많았음. 공격적인 팀이 거의 항상 승리함
         3. 지구력 대 속도: 큰 경기장에서 지구력이 중요한 요소로 작용함

  VI: 결과

     ""준비하라."" – 보이스카우트의 모토

     * 물과 간식을 준비해온 것이 좋은 결정이었음
     * 새로운 지도를 만들어 경기장을 축소함
     * 모든 참가자가 게임을 즐겼고, 규칙에 대한 논쟁이나 변경 제안이 없었음
     * UT Austin에 다니는 동안 더 많은 깃발 뺏기 게임을 개최할 계획

  VII: 주석

    1. 30세 이상의 사람들에게 ""젊었을 때 가장 좋은 기억은 무엇인가?""라고 물어보면 대부분 ""친구들과 재미있게 놀았던 것""이라고 답할 것임
    2. Jet Lag: The Game 채널은 대규모 게임을 다루는 고품질의 재미있는 영상을 제작함
    3. 얼음팩, 사과, 치즈 슬라이스, 물을 냉장고와 냉동고에 보관했는데, 실수로 냉장고와 냉동고를 바꿔서 보관함. 다행히도 약간 얼린 사과와 물이 더 맛있고 시원했음

GN⁺의 의견

     * 이 기사는 대규모 이벤트를 기획하고 실행하는 과정에서의 도전과 성공을 잘 보여줌. 이는 프로젝트 관리와 팀워크의 중요성을 강조함.
     * 깃발 뺏기 게임은 단순한 놀이처럼 보이지만, 전략과 규칙 설정, 그리고 공정한 게임 진행을 위해 많은 계획이 필요함을 알 수 있음.
     * 이 기사는 독자들에게 창의적이고 재미있는 활동을 통해 좋은 추억을 만들 수 있다는 점을 상기시켜줌.
     * 비슷한 활동을 기획하고자 하는 사람들에게 유용한 팁과 아이디어를 제공함.
     * 이 기사는 단순한 놀이의 재미를 넘어서, 사람들과의 유대감을 강화하고 협력의 중요성을 깨닫게 해줌.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 어린 시절의 추억
          + 지역 초등학교에서 밤에 CTF(깃발 뺏기) 게임을 했음. 약 40-50명의 아이들이 자전거를 타고 모였고, 규칙은 비슷했지만 경계가 없었음. 옥수수 밭을 돌아다니며 숨바꼭질을 했음. 경찰이 자주 출동해 부모님이 다른 게임을 찾으라고 했음.
     * 오리엔티어링 추천
          + 개인적으로 깃발 뺏기를 좋아한다면 오리엔티어링을 추천함. 수백 에이커의 땅에서 깃발 뺏기 가능. 라디오 오리엔티어링(폭스 오링)도 추천. 라디오 송신기를 찾아야 하는 게임으로, 국립공원에서 진행됨.
     * 와일더니스 학교
          + 워싱턴의 와일더니스 학교에서 2주간의 깃발 뺏기 게임을 진행함. 스토킹, 위장, 생존 기술을 테스트하는 좋은 방법. 어둠 속에서 조용히 움직이는 것이 중요함.
     * 캠프에서의 경험
          + 어린 시절 캠프에서 캠퍼스 전체를 사용하는 깃발 뺏기 게임을 했음. 170명의 캠퍼와 상담사가 참여. 깃발 위치를 모르는 상태에서 게임을 진행함. 감옥이 있는 게임도 재미있었음.
     * 생일 파티
          + 조용한 동네에서 아이들의 생일 파티를 열었음. 풍선을 터뜨리는 게임을 했고, 아이들이 창을 던져 풍선을 터뜨리는 것을 즐겼음. 다치지 않고 재미있게 놀았음.
     * 보이스카우트 추억
          + 보이스카우트 시절 Warren Dunes State Park에서 밤에 깃발 뺏기 게임을 했던 추억이 있음. 지금도 아이들이 그곳에서 게임을 하고 있음.
     * 에어소프트 게임
          + 2001년에 127에이커의 땅에서 100명 이상의 플레이어와 함께 에어소프트 게임을 조직했음. 일부는 최고의 게임이라고 평가함.
     * 아버지와 아들의 게임
          + 스카우트 그룹에서 아버지와 아들이 함께하는 경찰, 도둑, 울타리 게임을 밤에 숲에서 진행했음. 도둑이 통나무를 울타리로 옮겨 점수를 얻는 게임. 아버지와 아들이 함께하는 좋은 경험이었음.
     * 복잡한 변형 게임
          + 시간이 있고 자원이 있다면 더 복잡한 변형 게임도 추천함. Killer Queen Arcade의 필드 게임이 있음. 세 가지 승리 조건과 특별한 역할이 있는 게임.
     * 오스틴에서의 경험
          + 오스틴에 살고 있으며, 해커뉴스를 통해 이 게임에 대해 알게 되었음. 플레이어의 연령대 등 인구 통계가 궁금함.
"
"https://news.hada.io/topic?id=14771","Copilot의 메모리 누수 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Copilot의 메모리 누수 문제

ActiveSupport::Notifications 관련 Memory Leak 해결 과정 정리

     * Memory Leak가 발생한 상황
          + 특정 시점부터 web Dyno의 메모리 사용량이 비정상적으로 증가하기 시작함
          + Pager가 울리기 시작하고, memory leak으로 보이는 상황 발생
     * 즉각적 대응
          + Heroku에서 memory leak이 의심되면 Dyno를 재시작하는 것으로 임시 해결 가능
          + 정상적인 deploy 주기에 맞춰 restart하거나 memory limit에 가까운 Dyno를 수동으로 재시작
     * 원인 파악을 위한 의심 코드 검토
          + memory spike 직전에 배포된 코드 변경사항 검토
          + 원인으로 의심되는 몇 가지 코드를 하나씩 배포하며 memory leak 발생 여부 확인
          + 원인으로 보이는 코드가 없어 tooling 변경사항도 배포 취소하며 확인. 하지만 memory leak은 지속됨
     * memory 증가 패턴 분석
          + web Dyno에서만 leak 발생. Sidekiq, Delayed::Job Dyno는 정상
          + 모든 web Dyno가 항상 leak 되는 것은 아님. 몇 시간 정상 사용 후 한두개 또는 모든 Dyno에서 leak 시작
          + 트래픽 양 보다는 특정 트래픽에 의해 발생하는 것으로 의심
          + Dyno 내 모든 Puma worker에서 leak이 발생하는 것은 아니고, 소수의 worker에서 전체 메모리의 대부분을 사용 중
     * Heap dump 수집 및 분석
          + rbtrace를 사용해서 leak이 발생 중인 Ruby process의 heap dump 수집
               o heroku ps:exec으로 leak 중인 dyno에 ssh 접속
               o ps 명령으로 가장 메모리를 많이 사용 중인 Ruby worker process 선택
               o rbtrace로 해당 pid에 attach 후 메모리 할당 추적 시작 (ObjectSpace.trace_object_allocations_start)
               o ObjectSpace.dump_all로 heap dump 수집. 용량이 클 경우 gzip 압축
               o heroku ps:copy로 dump 파일 로컬로 가져옴
          + reap을 사용해서 heap dump를 flamegraph로 시각화
               o 1.9GB의 메모리를 참조하고 있는 Thread와 그 아래 32,067개의 객체를 참조하는 Array 발견
          + sheap을 사용해서 의심가는 객체 탐색
               o 해당 Thread는 Puma의 worker thread로 밝혀짐
               o ActiveSupport::SubscriberQueueRegistry 객체가 Hash를 참조하고 있고, 그 아래 String과 Array 객체 존재
               o 문제의 Array에는 32,000개 이상의 ActiveSupport::Notifications::Event 객체가 쌓여 있음
     * 원인 추론
          + ActiveSupport::Notifications의 Event 객체가 #children array에 잘못 쌓이고 있다고 추측
          + ActiveSupport::Notifications.instrument block 내에서 에러가 발생하면, 해당 Event가 #children에서 제거되지 않고 남아서 메모리 누수 발생할 것으로 추정
     * 로컬 재현
          + production에서 발견된 의심가는 request path와 parameter로 로컬에서 요청 전송
          + 500 Internal Server Error와 함께 URI::InvalidURIError 발생 확인
          + 해당 요청을 보낸 production dyno의 memory 사용량이 급격히 증가하는 것을 확인
     * 구체적 원인 분석
          + Rails 7.1에서 고쳐진 ActiveSupport::Notifications의 Event#children 관련 버그가 있었음
          + 여기에 Bugsnag gem에서 request url을 clean하는 과정에서 URI.parse 중 URI::InvalidURIError를 raise하는 버그가 겹쳐서 메모리 누수 발생
          + ActiveSupport::Notifications.subscribe block 내에서 raise한 에러가 잡히지 않아, 해당 Event가 #children array에서 제거되지 않고 계속 쌓이는 메모리 누수 발생
     * 해결 방안
          + 단기: Bugsnag gem에서 URI::InvalidURIError 발생 시에도 에러를 raise하지 않도록 버전 upgrade
          + 장기: ActiveSupport::Notifications의 버그가 수정된 Rails 7.x로 upgrade

GN⁺의 의견

     * 문제를 발견하고 체계적으로 원인을 파악해 나가는 과정이 인상 깊음. memory leak이 의심될 때 기본적으로 해볼만한 분석 과정을 잘 정리하고 있음
     * Ruby의 heap dump 수집, 시각화, 분석을 위한 다양한 오픈소스 도구(rbtrace, reap, sheap 등)가 활발하게 개발되고 있는 것으로 보임. 꼭 Ruby가 아니더라도 언어별 유용한 memory 분석 도구들을 숙지하고 문제에 적용할 줄 아는 것이 중요해 보임
     * 사실 memory leak의 원인이 사용하는 특정 라이브러리나 프레임워크의 버그인 경우가 많지만, 해당 버그를 직접 분석하고 수정해서 배포할 수 있는 여건은 아니므로, 우회할 수 있는 방법을 최대한 빨리 적용하는 게 중요함. 버그 리포트와 함께 가능한 차선책을 함께 제공하는 것도 좋은 방법
     * 단순히 memory leak을 해결하는 것에 그치지 않고, 문제의 root cause를 깊이있게 파고 들어간 점도 좋았음. 프레임워크 내부 코드를 꼼꼼히 살펴 근본 원인까지 추적하려는 분석 자세가 개발자에게 필요해 보임
     * 결국 memory leak의 원인은 처음에는 전혀 관련 없어 보이는 사소한 라이브러리 버전업에 있었다는 점. 의존성 관리와 변경사항 추적의 중요성을 보여주는 사례. 사소한 변경이라도 영향도를 신중히 분석하고 배포 후에도 모니터링이 필요함을 시사

        Hacker News 의견

    수동 메모리 관리에 대한 두려움 없이 엔지니어링 훈련으로 해결 가능함

     * RAII와 명확한 소유권 규칙만 있으면 메모리 관리는 쉬운 엔지니어링 작업임
     * 오히려 참조 카운팅과 공유 포인터를 고집하는 프레임워크가 소유권을 모호하게 만들어 더 어려움
     * 생성하면 해제하고, 이전하면 신경쓰지 않는 것이 엔지니어링 규율의 일부임
     * 메모리 버그는 로직 버그와 다를 바 없으므로 고치는 게 당연함
     * OS 자원(핸들, 소켓 등)도 자동 자원 관리자 없이 수동으로 관리하므로 메모리도 마찬가지로 접근 가능함

    메모리 누수로 인한 500만 달러 손실 사례

     * 90년대 Solaris 프린터 드라이버의 메모리 누수 버그로 인해 발생한 일화 소개
     * 당시 은행에서 팩스로 거래를 확인하고 프린터로 출력해 상대방과 통화로 읽어주며 녹음하는 방식으로 법적 확인을 받음
     * 메모리 누수로 프린터 드라이버가 다운되어 출력되지 않은 확인서 때문에 거래 취소를 당해 500만 달러 손실을 봄
     * 결국 Sun CEO의 불평으로 개발자들이 버그를 고치게 됨

    메모리 누수 디버깅 도구와 해결 방안

     * Valgrind를 사용하면 C에서 누수를 쉽게 찾을 수 있음
     * 설계가 제대로 되어 있다면 대개 할당과 해제를 동일한 함수에서 하므로 고치기 쉬움
     * Yahoo 광고 서버의 메모리 누수 사례와 임시방편 해결책 소개
     * PHP 설계자의 농담 인용문을 통해 완벽주의보다는 실용주의를 택하는 태도 보여줌
     * Rails에서는 생산성을 위해 하드웨어로 해결하는 것이 일반적이라고 함

    글쓰기 스타일에 대한 칭찬

     * 글쓴이의 글쓰기 방식이 이모티콘이나 포맷팅 때문인지 즐겁다는 코멘트
"
"https://news.hada.io/topic?id=14775","에어팟을 암퇴치를 위한 피트니스 트래커로 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       에어팟을 암퇴치를 위한 피트니스 트래커로 만들기

     * 영국암센터의 ""하루 100회 푸시업 챌린지"" 참여를 위해 앱을 찾다가, 직접 푸시업 횟수를 세는 재미있는 것을 만들어 보기로 함
     * iOS의 Core Motion 프레임워크 탐구
          + 센서 데이터를 활용하는 방법을 모색하다가 CMHeadphoneMotionManager를 사용하여 에어팟의 움직임 데이터를 활용하기로 함
          + Core Motion은 가속도계, 자이로스코프, 지자기 센서 등의 데이터를 제공함
          + 정확하고 신뢰할 수 있는 움직임과 방향 측정에 유용함
          + 사용자의 개인정보 보호를 위해 데이터 액세스 권한이 필요함
     * AI 적용 방법 고민
          + ARKit 등의 프레임워크를 사용하는 앱은 이미 많이 있음
          + 대신 AI가 아이디어 구현을 도와줄 수 있을 것으로 판단함
          + Core Motion에 대해 학습시킨 GPT를 활용하여 자연어로 질문하고 해결책을 얻음
     * 앱 아키텍처 설계
          + Motion Manager: 센서 데이터를 스트리밍하고 장치 센서 업데이트를 처리함
          + Pushups Detector: 스트리밍된 데이터를 분석하여 미리 정의된 임계값에 따라 푸시업을 감지하고 계산함
          + SwiftUI View: 사용자가 푸시업을 수행할 때 실시간으로 업데이트되는 반응형 UI를 제공함
     * Motion Manager 구현
          + 델리게이트 패턴을 사용하여 업데이트되는 값에 액세스함
          + CMHeadphoneMotionManager를 사용하여 장치 모션 데이터를 가져옴
          + startUpdates()와 stopUpdates()로 센서 업데이트를 시작하고 중지함
          + pitch와 accelerationY 값을 업데이트하고 델리게이트에 알림
     * Pushups Detector 구현
          + ""세션"" 개념을 도입하여 데이터 스트림 분석을 시작하고 중지함
          + 원시 데이터를 해석하여 사용자의 자세와 푸시업 여부를 판단함
          + 임계값을 사용하여 푸시업의 내려가기와 올라오기를 감지하고 카운트를 증가시킴
          + MotionManagerDelegate를 구현하여 가속도와 피치 값의 변화를 처리함
     * SwiftUI로 간단한 뷰 구현
          + 세션 시작/종료 버튼과 푸시업 횟수를 표시하는 큰 숫자로 구성됨
          + 사용자의 자세가 올바른지 여부를 표시하는 텍스트도 추가함
     * 데이터 분석 및 시각화
          + Swift Charts를 사용하여 원시 센서 데이터를 시각화하고 패턴을 식별함
          + Y축 가속도에서 푸시업의 내려가기(-1.0)와 올라오기(+0.5) 패턴을 발견함
          + 실제 테스트를 통해 임계값을 조정하여 정확도를 개선함 (+0.4, -0.7)
     * 실시간 추적의 매력
          + 에어팟을 착용하고 시작 버튼을 누르면 푸시업 횟수가 자동으로 업데이트됨
          + 사용자의 상호작용 없이도 동작함
     * 프로젝트를 통해 배운 점
          + 조기 검증과 반복적 개선의 중요성을 재확인함
          + 의미 있는 것을 만드는 재미와 만족감을 느낌
          + UI 개선과 여러 날에 걸친 푸시업 카운팅 등 개선할 점도 있음
          + 에어팟을 통한 오디오 피드백을 추가하여 시각적 인터페이스 외에도 사용자 경험을 개선함
     * 결론
          + Core Motion, SwiftUI, AI를 결합하여 24시간 만에 피트니스 트래킹에 새로운 차원을 더한 앱을 개발함
          + 새로운 기술을 일상의 문제에 어떻게 적용할 수 있을지에 대한 도전이 중요함

   새삼 3대운동 횟수세주는 갤럭시워치가 대단하네요

   몇년전에 아이폰 근접 센서를 활용한 Thirty라는 푸시업 챌린지 앱을 만들었었는데, 에어팟으로 하는 방법도 있군요.. 근접센서는 다이나믹 아일랜드 추가 이후 정확도가 다소 떨어진듯한 ㅠ
"
"https://news.hada.io/topic?id=14809","경이로움의 시대(Age of Marvels)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        경이로움의 시대(Age of Marvels)

프랭클린과 현대 기술에 대해 대화하기

     * 필라델피아를 걸으며 벤자민 프랭클린과 1790년 이후로 세상이 얼마나 변했는지에 대해 이야기를 나누곤 함
     * 프랭클린을 놀라게 하는 것들은 생각보다 뻔하지 않음:
          + 전기 가로등: 프랭클린 시대에도 원했던 것이라 크게 놀라지는 않을 것임
          + 인터넷: 18세기에도 생각할 수 있는 개념이었음
          + 위키피디아: 보편적 백과사전에 대한 오래된 꿈이 실현된 것
     * 프랭클린을 진짜 놀라게 하는 것들:
          + 달 착륙: 사람들을 달에 보내 관측하고 표본을 가져온 것
          + CAT 스캔: 보이지 않는 광선을 몸에 쏴서 내부를 정확히 추론하는 기술
          + GPS: 32개 인공위성, 40나노초 단위 시계, 상대성 이론 등을 활용한 정밀 측위 기술
     * 좋지 않은 경이로운 일도 있음:
          + 너무 발달한 어업으로 바다가 고갈될 위기
     * 기타 놀라운 과학적 발견들:
          + C.elegans 예쁜꼬마선충의 959개 세포에 대한 완벽한 이해
          + 화성 운석 277개를 지구 전역에서 수집하고 분석한 것

GN⁺의 의견

     * 기술이 발전할수록 현대인에게는 평범한 일이 옛 사람들에게는 경이로운 ""마법""처럼 보일 것임. 반대로 우리가 미래 기술을 보면 놀랄 일이 많을 듯.
     * CAT스캔이나 GPS 같은 기술은 여러 다른 분야의 전문 지식이 고도로 결합된 결과물임. 학제간 소통과 협업이 중요함.
     * 우리가 자연을 얼마나 정밀하게 이해하고 있는지를 보여주는 사례들이 인상적임. 지적 호기심과 끈기가 이런 발견을 가능케 함.
     * 기술이 고도화될수록 의도치 않은 부작용도 커질 수 있음. 어업 문제처럼 기술 발전의 양면성을 항상 경계해야 할 듯.

        Hacker News 의견

     * 현대 미국의 슈퍼마켓은 1900년 이전에 태어난 사람들에게 가장 마음을 사로잡을 만한 경이로움
          + 1월에도 블루베리 판매, 7개국의 다양한 차, 향신료의 벽, 파인애플, 버려지는 알루미늄 포장, 모래와 자갈 없는 빵, 슬라이스된 빵 등
          + 평균적인 사람들도 상대적으로 저렴하고 접근 가능함
     * 세상에 대한 낙관적 기사를 아침 일찍 보는 것은 상쾌함
          + 최근 과거의 사람들도 현재의 세계를 인공적 경이로 가득 찬 것으로 볼 것임
          + 전자레인지도 개념적으로 간단하지만 무선으로 가열한다는 점에서 충격적일 것임
     * 달 착륙이 보편적으로 충격적이었던 것처럼, 50년 동안 그만두고 관심을 잃은 것은 더 충격적임
     * 프랭클린은 GPS에 감명받았을 것임
          + 경도 문제는 프랭클린 시대의 중요한 과학적/공학적 탐구 분야였음
          + 걸프 스트림 매핑 연구를 고려하면 그 자신도 이 문제에 시간을 보냈을 가능성이 있음
     * 사소한 지적사항:
          + C. elegans 의 959개 세포와 6,720개 연결에 대해 알고 있지만, 대부분의 뉴런이 실제로 무엇을 하는지는 모름
          + ""C. elegans 커넥톰을 안다""는 것이 ""C. elegans 뇌가 어떻게 작동하는지 안다""는 의미는 아님
          + 복잡한 회로를 배선과 납땜만으로 이해하는 것과 유사함
     * 인터넷은 18세기에 쉽게 이해할 수 있는 기본 아이디어는 아님
          + 전신기에 대한 설명으로는 적절하지만, 오늘날의 글로벌 브로드밴드 패킷 교환 인터넷과는 차이가 있음
     * 과거의 사람들을 데려와 우리 세계에 경탄하게 하는 상상의 시나리오를 만드는 사람이 혼자가 아니라 기쁨
     * 리보솜: 생명은 4개의 글자로 된 활자를 가진 10^20개의 작은 인쇄기에 기반함
     * 놀라운 기술 발전과 함께 그것을 사용하는 방법에 대한 지혜의 균형을 맞추는 것이 필요함
          + 전화기는 정보를 찾거나 가족과 화상 채팅을 하는 데 좋지만, 실제 사람들을 피하면서 감정 조절을 위해 바라보는 것은 실수임
          + 이 문제를 문화적으로 어떻게 해결할 것인지 궁금함
     * ""장치와 위성 간에 시간이 다른 속도로 흐르기 때문에 까다롭지만, 우리는 그것을 해결할 수 있었습니다.""
          + 내 뇌를 녹여버림
     * 몇 세기 전 사람들이 어떻게 존재하게 되었는지 궁금해할 만한 창발적 과정들이 있음
          + 기술을 넘어선 것임
          + 광범위한 인터넷, 정보, 소셜 네트워크는 기술이지만 그것이 우리를 어떻게 변화시켰는지, 어디에 있든 다른 사람들과 어떻게 관련되는지, 세상을 어떻게 보는지는 좋든 나쁘든 경이로워할 만한 것임
"
"https://news.hada.io/topic?id=14800","OpenAI, GPT-4o 공개 및 ChatGPT Free User에 더 많은 도구 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenAI, GPT-4o 공개 및 ChatGPT Free User에 더 많은 도구 도입

   • OpenAI는 최신 플래그십 모델인 GPT-4o를 출시, ChatGPT에서 더 많은 기능을 무료로 사용할 수 있도록 함. GPT-4o는 이전 제품인 GPT-4보다 훨씬 빠르며 텍스트, 음성 및 비전 전반에 걸쳐 기능을 향상
   • GPT-4o를 사용하면 사용자가 이제 다른 언어로 메뉴 사진을 찍고 ChatGPT가 번역하도록 하고 음식의 역사와 중요성에 대해 배우고 추천을 받을 수 있음. 향후 개선을 통해 보다 자연스럽고 실시간 음성 대화와 실시간 비디오를 통해 ChatGPT와 대화할 수 있는 기능이 가능해질 것
   • 전 세계적으로 고급 AI에 더 쉽고 유용하게 접근할 수 있도록 GPT-4o의 언어 기능을 품질과 속도 전반에 걸쳐 향상. ChatGPT는 또한 이제 가입 및 로그인, 사용자 설정 등에 걸쳐 50개 이상의 언어를 지원
   • ChatGPT Free 사용자는 이제 GPT-4 수준의 지능을 경험하고 모델과 웹 모두에서 응답을 얻고 데이터를 분석하고 차트를 만드는 것, 촬영한 사진에 대해 채팅하는 것, 요약, 작성 또는 분석 지원을 위한 파일 업로드, GPT 및 GPT 스토어를 발견하고 사용하는 것과 같은 기능에 액세스할 수 있음
   • OpenAI는 또한 사용자의 워크플로우에 원활하게 통합되는 macOS용 새로운 ChatGPT 데스크톱 앱을 출시. 이 앱은 간단한 키보드 단축키를 이용해 ChatGPT 질문을 하고 앱에서 직접 스크린샷을 찍어 토론하며 ChatGPT와 음성 대화를 할 수 있음
"
"https://news.hada.io/topic?id=14857","Rust의 가변 별칭과 형식 검증에 대한 몇 가지 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Rust의 가변 별칭과 형식 검증에 대한 몇 가지 노트

   요약할 내용이 없습니다.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Rust와 형식적 방법론
          + Rust는 형식적 방법론을 적용하기에 가장 유용한 현대 언어 중 하나로 보임.
          + Rust의 규칙은 형식화하기 어려운 많은 경우를 제거함.
          + 남은 큰 문제는 데드락 분석으로, Rust에서 정적 데드락 분석이 가능하다면 안전한 백포인터도 얻을 수 있을 것임.
          + 기계 학습이 정리 증명기를 안내하는 데 도움을 줄 수 있음.
     * Hoare의 1973년 논문 인용
          + Rust 중심의 관점으로 Hoare의 비판을 좁히는 것은 인위적임.
          + Grayson의 논의는 기술적 불만을 극복할 만큼 충분히 흥미로움.
     * 프로그램 분석에 대한 비판
          + 이 글은 프로그램 분석의 전체 분야를 간과하고 있음.
          + Java와 같은 언어는 GC가 있지만 강력한 지역 추론 지원이 부족함.
          + 포인터 분석과 탈출 분석이 고유성을 추론하고 참조가 별개인지 판단할 수 있음.
     * 형식적 검증에 대한 회의
          + 형식적 검증은 이론적으로 흥미롭지만 실용적 사용은 드뭄.
          + 올바른 명세를 작성하는 것은 올바른 프로그래밍만큼 어려움.
     * F*와 Ada/SPARK2014
          + F*의 문법을 선호하지만, 안전 관련 제어 시스템에는 Ada/SPARK2014를 사용함.
          + Rust는 아직 공식 표준이 없어 Ada/SPARK2014와 같은 사용자층을 끌어들이기 어려움.
     * 형식적 방법론의 한계
          + 무참조는 형식적 검증을 쉽게 만들지만, 실용적이고 비용 효율적인 검증 방법은 아님.
          + 대부분의 프로그램은 형식적으로 검증하기 어려움.
     * 참조 카운팅과 가비지 컬렉션
          + Python은 참조 카운팅과 추적 하이브리드를 사용함.
          + Perl은 순수 참조 카운팅을 사용하지만 약한 참조를 통해 순환 구조를 관리함.
          + Nim은 ORC를 사용하여 순환만 수집하는 빠른 시스템을 제공함.
     * Rust의 9주년
          + Rust 1.0의 9주년을 기념함.
     * Typestate 패턴
          + Typestate 패턴에 대한 글을 읽는 것을 좋아함.
     * 컴파일 타임 타입 가드
          + 컴파일 타임 타입 가드를 더 간단하게 작성할 수 있기를 바람.
          + 타입 레벨 프로그램의 오류 메시지가 복잡하고 개발자 경험을 저해함.
          + Rust의 컴파일 타임 기능을 더 간단하고 기능적으로 만들 필요가 있음.

   이 요약은 다양한 관점을 제공하며, 초급 소프트웨어 엔지니어가 이해하기 쉽게 구성됨.
"
"https://news.hada.io/topic?id=14813","정적 체스(Static Chess) 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         정적 체스(Static Chess) 게임

Static Chess 구현

     * 평범하고, 필수적인 기능만 있는 체스 구현
     * 모든 페이지는 오직 HTML과 CSS로만 구성됨
     * 모든 체스 이동은 링크를 클릭해서 이뤄짐
     * 친구에게 링크를 보내면 상대방이 이동하고 다시 링크를 보내주는 방식으로 진행
     * 불필요한 애니메이션이나 화려한 인터랙티브 요소가 게임플레이를 방해하지 않음
     * 구글이 이 사이트를 인덱싱할 때 모든 가능한 체스 이동을 계산할 수 있을지 궁금함

기능 제한 및 버그

     * 기능이 매우 제한적이고 동작하지 않을 수 있음
     * 버그를 발견하면 제보 부탁

영감을 준 아이디어

     * 틱택토 게임의 모든 가능한 상태를 보여주는 사이트에 대한 Hacker News 토론에서 영감을 얻음

향후 계획

     * 실제 게임플레이를 지원하도록 확장할 계획
     * 친구들과 장기전을 할 수 있는 심플한 인터페이스가 될 수 있을 것 같음
     * 정적 AI와 대결하는 기능을 추가하는 것도 재미있을 것 같음
     * 추가되었으면 하는 기능이 있다면 PR 환영

주요 코드

class StaticChess {
  // 생략...
  async fetch(req: Request): Promise<Response> {
    const gameInfo = parseURL(req.url);
    if (gameInfo === undefined) {
      return new Response(""Not Found"", { status: 404, headers: { ""cache-control"": ""max-age=86400, public"" } });
    }
    const game = new Game(gameInfo.game, gameInfo.selected);
    return new Response(
      renderToString(
        <html>
          {/* 생략... */}
          <div className=""board"">
            {this.rows.map(row => (
              <div key={row} className=""row"">{this.squares.map(square => game.squareContent(row, square))}</div>
            ))}
          </div>
          {/* 생략... */}
        </html>
      ),
      { headers: { ""content-type"": ""text/html"", ""cache-control"": ""max-age=86400, public"" } },
    );
  }
}

class Game {
  // 생략...
  squareContent(row: number, square: number) {
    // 생략...
    const squareContent = (() => {
      if (this.selectable.includes(pos)) {
        return <a href={`/${this.fen}/${pos}`}>{pieces[this.board[row][square]?.type]}</a>;
      }
      const nextMove = this.nextMoves[pos];
      if (nextMove !== undefined) {
        return (
          <a href={`/${nextMove.after.replaceAll("" "", ""_"")}/`}>
            {pieces[this.board[row][square]?.type]}
          </a>
        );
      }
      return <span>{pieces[this.board[row][square]?.type]}</span>;
    })();
    // 생략...
  }
}

GN⁺의 의견

     * 웹 체스 게임을 HTML/CSS만으로 구현하는 것은 흥미로운 시도임. 하지만 모든 상태를 정적 페이지로 만드는 것은 실용성 면에서는 의문임.
     * 현실적인 사용성을 고려하면 결국 백엔드에서 상태를 관리하고 프론트엔드에서 API를 호출하는 형태가 되어야할 것 같음.
     * 정적 페이지로 모든 상태를 미리 계산해두는 것은 아이디어로서는 재미있지만, 실제 사용자에게는 큰 의미가 없어보임.
     * React로 SSR하는 것은 괜찮은 접근이지만, 캐싱이나 프리페칭 등 성능을 개선할 여지가 많아보임.
     * 비슷한 오픈소스 프로젝트로는 lichess가 있음. 풍부한 기능과 멋진 UI를 제공하므로 참고해볼만함.
     * 체스 엔진과 연동해서 AI 모드를 지원하려면 WASM을 활용하는 것도 고려해볼 수 있겠음.

        Hacker News 의견

     * URL에 FEN을 추가하여 체스960(피셔 랜덤 체스) 또는 다른 ""사용자 지정 시작 위치"" 변형을 플레이할 수 있음. 공백은 밑줄로 대체해야 함.
     * 유효한 움직임은 감지하지만 체크메이트는 인식하지 못함.
          + 예시 URL에서는 체크메이트라고 표시되어야 함.
     * 또 다른 URL 예시에서 체크메이트까지 성공적으로 진행됨.
     * CDN(예: Cloudflare)을 사용하여 캐시 적중률을 확인해보는 것을 제안함.
     * 기물을 전혀 움직일 수 없는 체스 변형을 기대했다는 농담.
     * 정적 웹 페이지이고 체스의 최소한의 구현임에도 놀랍게도 지연이 있음.
     * 2006년에 파이썬을 배우기 위해 리버시 보드게임과 거의 동일한 것을 구현했음. 상대는 간단한 미니맥스 검색 기반 AI였음. 당시에는 자바스크립트 없이 모든 상태를 URL에 넣는 것이 더 명확한 접근 방식이었음.
     * FEN 외에도 조각으로 이동 기록을 포함하는 것이 좋겠음. 예시 URL 제공.
     * 사이트맵이 없어서 가능한 모든 체스 상태 목록을 찾을 수 없었음.
     * 이 프로젝트를 통해 https://fav.farm과 https://val.town이라는 유용한 리소스를 알게 됨.
"
"https://news.hada.io/topic?id=14761","애플, iOS 18에 ChatGPT 기능 탑재 위해 OpenAI와 최종 계약 단계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             애플, iOS 18에 ChatGPT 기능 탑재 위해 OpenAI와 최종 계약 단계

Apple과 OpenAI의 제휴 협상 진행 중

     * Bloomberg의 새로운 리포트에 따르면, Apple은 올해 iPhone에 OpenAI의 기술을 도입하기 위한 협상을 마무리 짓고 있음
     * 이 거래를 통해 Apple은 iOS 18의 AI 중심 기능의 일부로 ChatGPT가 구동하는 ""유명한 챗봇""을 제공할 수 있게 됨
     * Apple은 Google과도 AI 파트너십에 대해 계속 논의 중이지만, 이번 리포트에 따르면 Apple은 ""OpenAI와의 합의에 근접했음""

iOS 18에서의 ChatGPT 기능 통합 계획

     * 보고서는 ""OpenAI와의 협약은 Apple이 다음 달 발표할 예정인 새로운 AI 기능의 일부로 인기 있는 챗봇을 제공할 수 있게 해줄 것""이라고 설명함
     * 이러한 기능과 통합이 어떻게 작동할 수 있을지에 대한 더 구체적인 세부 사항은 현재로서는 불분명함

Apple과 OpenAI 간의 계약 진행 상황

     * Bloomberg의 Mark Gurman에 따르면, 양측은 Apple의 차기 iPhone 운영 체제인 iOS 18에서 ChatGPT 기능을 사용하기 위한 계약 조건을 최종 확정 중임
     * Apple은 또한 Google과 해당 회사의 Gemini 챗봇 라이선스에 대해 논의했지만, 이러한 논의는 합의에 이르지 않았으며 진행 중임
     * 보고서는 Apple과 OpenAI 간의 거래가 ""즉시 발표될 것이라는 보장은 없다""고 경고함

iOS 18의 AI 기능 구동 방식

     * 목요일 보고서에 따르면 iOS 18의 AI 기능은 Apple Silicon 프로세서가 장착된 Apple 데이터 센터에서 (부분적으로) 구동될 것임
     * 그러나 iOS 18의 AI 기능 대부분은 기기 자체에서 완전히 구동되어, Apple이 개인 정보 보호 및 속도 이점을 내세울 수 있게 함

향후 일정

     * Apple은 6월 10일 특별 행사를 시작으로 WWDC에서 iOS 18과 새로운 AI 기능을 발표할 예정임
     * OpenAI는 월요일 행사에서 별도의 발표를 할 예정임
     * The Information은 OpenAI에서 개발 중인 한 가지 기능은 Siri 및 Google Assistant와 경쟁하기 위한 AI 음성 어시스턴트라고 보도했음

        Hacker News 의견

     * iOS 18의 AI 기능은 Apple Silicon 프로세서를 탑재한 Apple 데이터 센터에서 일부 구동되지만, 대부분은 기기 내에서 전적으로 처리될 예정이라는 보고서가 나옴. 이를 통해 Apple은 개인정보 보호와 속도 향상의 이점을 내세울 수 있음.
     * Apple은 AI에 대해 모듈식 접근 방식을 취할 것으로 보이며, 타사 컴포넌트와 자체 컴포넌트를 함께 사용할 것임.
     * Apple은 사진에서 피사체 선택, 트랜스포머 기반 입력 제안 등 앱 내 AI 기능을 계속 강화해 나갈 것임.
     * ChatGPT와 같은 서버 사이드 GPT 스타일 AI를 일부 기능에 사용하기 위한 타사 호출 방식을 가질 것임.
     * 기기 내에서 실행되는 하나 이상의 로컬 AI가 현재의 Siri를 대체하고 다른 AI와 연결하는 역할을 할 것으로 보임. 이는 사용자 요청을 가로채 의미를 추론하고 해당 요청을 충족시키기 위한 하나 이상의 서비스와 매칭시킬 것임.
     * Apple은 App Intents 인터페이스, 신경망 프로세서, LLM 및 AI 자원 감소 실행 방법 등 이를 위한 구성 요소를 오랫동안 구축해 왔음.
     * Apple이 발표한 AI 기술들이 대부분 기기 내 모델 실행을 지향하고 있어 이 보고서를 믿기 어렵다는 의견도 있음.
     * Siri가 ChatGPT 수준으로 개선된다 해도 다시는 사용하지 않겠다는 사용자도 있음.
     * 로컬/원격 AI를 통한 접근성 업데이트에 대한 기대감이 표현됨. Pro 모델의 더 빠른 CPU나 더 큰 RAM이 올해 주요 판매 포인트가 될 수 있음.
     * 하지만 WWDC를 앞두고 Apple이 이제서야 마무리 작업을 한다는 점, 시간 제약으로 인해 단순한 ChatGPT 수준의 통합이 될 것이라는 우려도 제기됨.
     * Siri 팀은 Apple Car 팀처럼 될 것이라는 농담도 있음.
     * 이번 발표가 Rabbit의 ""Large Action Model"" 전략을 크게 약화시킬 것으로 보인다는 평가도 있음.
"
"https://news.hada.io/topic?id=14836","세계 최악의 웹사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              세계 최악의 웹사이트

최악의 웹사이트를 만들면 어떻게 될까?

  무료 VMware로 유인됨

     * 소셜 미디어를 통해 VMware의 인기 가상화 소프트웨어가 개인용으로 무료라는 블로그 게시물을 발견함.
     * VMware Fusion을 사용해본 적이 있어, ARM Mac에서 Windows를 실행할 수 있을지 시도해보기로 함.
     * 무료로 사용하려면 support.broadcom.com에서 최신 빌드를 다운로드하고 등록해야 함.

     ""이제 Mac, Windows 또는 Linux 컴퓨터에서 가상 실험실을 무료로 사용할 수 있음. 새로운 상업 모델로 인해 제품 그룹을 단일 SKU(VCF-DH-PRO)로 축소하여 상업용 라이선스가 필요한 사용자를 위한 견적 및 구매가 더 쉬워짐.""

     * 하지만 VMware 사이트에서 지원 포털로 이동해야 하는데, 이 과정에서 여러 문제가 발생함.

  Broadcom

     * Broadcom 지원 포털에 등록하고 계정을 만들어야 함.
     * 웹사이트 탐색 방법을 설명하는 11페이지 PDF가 있음.
     * 등록 과정에서 쓸모없는 CAPTCHA와 사용자에게 적대적인 디자인을 경험함.
     * 챗봇을 사용하려고 했으나, 메인 페이지로 돌아가는 등 여러 문제가 발생함.

  다음 단계

     * CAPTCHA를 통과하고 사용자 계정을 만듦.
     * 비밀번호 복사/붙여넣기가 불가능해 불편함을 겪음.
     * 여러 번의 시도 끝에 계정 생성에 성공함.
     * VMware 소프트웨어를 다운로드하려고 했으나, 여러 번의 실패를 경험함.
     * 결국 다운로드에 성공했으나, 설치 과정에서도 문제가 발생함.

  결론

     * Broadcom 웹사이트는 사용자에게 적대적인 디자인으로 가득 차 있음.
     * VMware 제품을 다운로드하는 과정이 매우 어려움.
     * Broadcom이 VMware를 인수한 이유를 이해할 수 없음.
     * 웹사이트를 완전히 새로 만드는 것이 더 나을 것 같음.

GN⁺의 의견

    1. 사용자 경험의 중요성: 이 기사는 사용자 경험(UX)의 중요성을 강조함. 웹사이트가 얼마나 사용하기 쉬운지, 얼마나 직관적인지에 따라 사용자의 만족도가 크게 달라짐.
    2. 기술적 문제: CAPTCHA와 같은 보안 기능이 오히려 사용자에게 불편을 줄 수 있음. 최신 기술을 사용해 사용자 친화적인 보안 솔루션을 제공하는 것이 중요함.
    3. 고객 지원: 챗봇과 같은 자동화된 고객 지원 시스템이 제대로 작동하지 않으면 오히려 사용자에게 불만을 줄 수 있음. 고객 지원 시스템의 품질을 높이는 것이 필요함.
    4. 경쟁 제품: VMware와 같은 가상화 소프트웨어를 제공하는 다른 회사들도 있음. 예를 들어, Parallels Desktop은 Mac에서 Windows를 실행할 수 있는 또 다른 인기 있는 가상화 소프트웨어임.
    5. 기술 도입 시 고려사항: 새로운 기술을 도입할 때는 사용자 경험을 최우선으로 고려해야 함. 기술이 아무리 뛰어나도 사용자가 쉽게 접근하고 사용할 수 없다면 성공하기 어려움.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 기업 소프트웨어의 현실
          + 기업 소프트웨어는 복잡하고 사용하기 어려움. 예를 들어, AI, 챗봇, LDAP, Active Directory 통합 등을 포함한 포털을 사용하려면 21페이지의 PDF 설명서가 필요함.
          + 특정 플러그인은 막대한 비용이 들며, 실제로는 단순한 기능만 제공함. 예를 들어, 챗봇 통합 플러그인은 1.6백만 달러의 라이선스 비용과 21년간 3.8백만 달러의 지원 비용이 듦.
     * 프론트엔드 개발자에게 경고
          + 사용자의 브라우저를 함부로 조작하지 말라는 경고. 브라우저는 사용자의 것이며, 사이트를 렌더링하기 위해 빌려주는 것임.
          + 이러한 문제는 주로 관리층에서 발생함.
     * Broadcom과 VMware
          + Broadcom이 VMware 데스크탑 앱을 무료로 만든 이유는 더 이상 판매나 지원을 원하지 않기 때문임. 기존 상업 지원 계약 때문에 계속 존재하는 것임.
          + Workstation이나 Fusion을 더 이상 사용하지 말라는 권고.
     * 비밀번호 필드에서 붙여넣기 비활성화
          + 비밀번호 필드에서 붙여넣기를 비활성화하는 관행에 대한 비판. 이는 사용자에게 불편을 초래함.
     * Workday 웹사이트 비판
          + Workday가 운영하는 웹사이트가 최악이라는 의견. 구직자들이 공감할 수 있음.
     * FTP 서비스 활성화
          + VMware의 소프트웨어 업데이트 사이트에 FTP 서비스가 활성화되어 있음.
     * arngren.net에 대한 호감
          + arngren.net 사이트가 마치 차고 세일을 보는 것 같아 즐겁다는 의견. 과거 잡지 광고를 떠올리게 함.
     * 뉴질랜드 Studylink 웹사이트
          + Studylink 웹사이트는 비밀번호와 '패스코드'를 사용해 로그인해야 했음. 패스코드는 드롭다운 박스를 통해 입력해야 했으며, 이를 종이에 적어야 했음.
"
"https://news.hada.io/topic?id=14807","텔레그램, Signal의 보안 취약성 공격하는 격렬한 캠페인 전개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  텔레그램, Signal의 보안 취약성 공격하는 격렬한 캠페인 전개

        Hacker News 의견

     * Signal은 미국 법원에 소환되었을 때, 계정 생성 시간과 마지막 접속 시간만을 제공하고 이에 승소함으로써 사용자 프라이버시 보호에 대한 강력한 입장을 보여줌
     * Telegram은 자체 개발한 암호화 기술을 사용할 때에도 Signal보다 더 안전하다고 주장했으나, 보안은 Telegram의 강점이 아님
     * Telegram의 창업자 Durov는 두려움과 편집증을 이용해 사용자들을 자신의 플랫폼으로 유도하는 심리전을 벌이고 있음
     * Durov가 러시아에서 망명하고 거리를 두는 것은 Telegram을 '반체제 앱'으로 포장하기 위한 연출일 수 있음
     * Telegram은 인기 있고 사용하기 쉬우며 안전하지 않은 앱임
     * Signal 클라이언트, 특히 데스크톱 버전은 사용성이 좋지 않음
     * Signal은 Google Play 스토어 없이 사용할 수 없음
     * 전화번호 인증 제거가 Signal에 대한 가장 많은 요청 사항이나 이를 해결하는 데 오래 걸리고 있음
     * Telegram은 사용자들의 전화번호를 이용해 SMS 인증을 하는 크라우드 소싱 방식을 도입하고 있음
     * Signal의 MobileCoin 연동은 Intel SGX에 의존하고 95% 사전 채굴되어 있어 의문의 여지가 있음
"
"https://news.hada.io/topic?id=14833","Piko - Ngrok의 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Piko - Ngrok의 오픈소스 대체제

     * 외부 네트워크로 터널링하는 리버스 프록시
     * 프로덕션 수준의 트래픽을 처리하며, 호스팅(특히 Kubernetes에서)이 간단하도록 설계됨
     * 고객 네트워크, BYOC(Bring Your Own Cloud) 서비스의 서비스를 노출하거나 IoT 디바이스에 연결할 수 있음
     * 내결함성, 확장성, 무중단 배포를 위해 노드 클러스터로 호스팅될 수 있음

Piko의 동작 방식

     * 업스트림 서비스는 Piko에 연결하여 엔드포인트를 등록
     * Piko는 아웃바운드 전용 연결을 통해 등록된 업스트림 서비스로 엔드포인트에 대한 요청을 라우팅
     * 이는 공용 포트를 열지 않고도 서비스를 노출할 수 있음을 의미
     * 들어오는 HTTP(S) 요청은 Host 헤더 또는 x-pico-endpoint 헤더를 사용하여 대상 엔드포인트의 ID를 식별
     * 여러 업스트림 서비스가 동일한 엔드포인트를 등록한 경우, Piko는 해당 엔드포인트에 대한 요청을 등록된 업스트림 간에 로드 밸런싱

Piko의 설계 목표

  프로덕션 트래픽 처리

     * Piko는 테스트 및 개발 도구가 아닌 프로덕션 트래픽을 처리하도록 설계됨
     * Piko를 사용하여 고객 네트워크에 액세스하고, BYOC 솔루션을 구축하며, IoT 디바이스에 액세스할 수 있음
     * 이를 지원하기 위해 Piko는 내결함성, 수평 확장, 무중단 배포를 위해 노드 클러스터로 실행될 수 있음
     * 또한 모니터링 및 디버깅을 위한 관측성 도구를 제공함

  호스팅 용이성

     * Piko는 Kubernetes에서 호스팅하기 쉽도록 설계됨
     * Piko 클러스터는 HTTP 로드 밸런서 또는 Kubernetes Gateway 뒤에 Kubernetes StatefulSet으로 호스팅될 수 있음
     * 업스트림 서비스 연결과 프록시 클라이언트 요청은 클러스터의 모든 노드에 로드 밸런싱될 수 있으며, Piko는 요청을 올바른 업스트림으로 라우팅하는 것을 관리함

  보안성

     * 업스트림 서비스는 아웃바운드 전용 연결을 통해 Piko에 연결함
     * Piko는 해당 연결을 통해 모든 요청을 업스트림으로 라우팅함
     * 따라서 업스트림은 요청을 수신하기 위해 포트를 열 필요가 없음
     * Piko는 업스트림 서비스가 엔드포인트를 등록하기 전에 인증하는 것을 지원함
     * Piko는 자체 호스팅이 가능하므로 프록시 클라이언트와 동일한 네트워크에서 호스팅하여 외부 네트워크에서 요청을 수락하지 않을 수 있음
     * 예를 들어, 인증된 업스트림 서비스가 TLS를 통해 인터넷에서 등록하도록 한 다음, Piko와 동일한 네트워크에 있는 프록시 클라이언트에 대해서만 내부 경로를 제공할 수 있음

   이는 공용 포트를 열지 않고도 서비스를 노출할 수 있음을 의미

     이것이 가지는 의미==사례가 궁금합니다.

   예를 들어 컴공 학부생 A가 프로젝트를 하고 있다고 합시다.
   열심히 개발한 A는 이제 발표일 가까워지자 이 서비스를 시연하고자 합니다.
   그런데 A는 이제 갓 서버나 짤 줄 알지 어떠한 서버도, 인스턴스도 띄우는 방법을 모릅니다.
   거기다 기숙사에 살고 있지 때문에 포트포워딩으로 서비스를 노출할 수 없습니다.
   이때 터널링이 등장합니다.
   기숙사에 있는 노트북에서 ngork http 8080을 치면 랜덤한 url이 발급되고, 강의실에서 시연할 때 사용자가 이 url에 접속하면 ngrok서버-ngrok클라이언트-A의 서버 프로그램으로 http 요청이 전달되서 별도의 포트 포워딩 없이도 서비스를 노출할 수 있게 됩니다.

   https://github.com/andydunstall/piko/pull/20

   프로젝트 이름이 Pico에서 Piko로 변경되었네요. 이미 pico라는 이름의 에디터가 있어 충돌 문제로 변경된것으로 보입니다.

   pico editor를 몰랐다는 답변을 보고 저의 아재력을 느낍니다. nano 전에 pico 였는 데 ㅜㅜ

   어제 찾아서 정리해놓고 올린건데.. 그새 바뀌었네요 ㅠ 수정해두었습니다.
     * Portr - 소규모 팀을 위한 ngrok 대체제 오픈소스
     * pgrok - Poor man's ngrok
     * Awesome Tunneling - ngrok 대체제 모음
"
"https://news.hada.io/topic?id=14861","Yi 1.5 - 차세대 오픈소스 이중언어 LLM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Yi 1.5 - 차세대 오픈소스 이중언어 LLM

     * 개발자들에 의해 처음부터 훈련된 차세대 오픈소스 대규모 언어 모델인 Yi를 업그레이드
     * 500B 토큰 코퍼스로 사전학습 및 3M의 다양한 파인 튜닝 샘플로 미세조정
     * Yi-1.5는 Yi에 비해 코딩, 수학, 추론, 지시 사항 따르기 능력에서 더 강력한 성능을 제공하면서도 언어 이해, 상식적 추론, 독해 능력에서는 여전히 우수한 능력을 유지
     * 3개의 모델 사이즈로 제공 : 34B, 9B, 6B

   Yi - 차세대 오픈소스 이중언어 LLM
"
"https://news.hada.io/topic?id=14762","OpenAI, 구글 검색 경쟁자 5/13 오전 10시에 공개 예정 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  OpenAI, 구글 검색 경쟁자 5/13 오전 10시에 공개 예정

     ""GPT-5도 아니고, 검색엔진도 아니지만, 사람들이 좋아할만한 새로운 것을 열심히 준비했어요. 저에겐 마치 마법처럼 느껴졌어요. - Sam Altman ""

     * 5/13 10AM PT에 ""ChatGPT 및 GPT-4 업데이트""에 대해 라이브 스트리밍 에정
     * 화요일날 시작되는 구글 I/O를 겨냥한듯

   샘은 참 글을 참 이쁘게 쓰네요.
"
"https://news.hada.io/topic?id=14829","VMware Fusion Pro 이제 개인용은 무료로 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    VMware Fusion Pro 이제 개인용은 무료로 제공

     * Fusion Pro와 Workstation Pro는 이제 두 가지 라이선스 모델을 가짐
          + 개인 사용 무료
          + 상업적 사용 유료 구독
     * 사용자는 자신의 사용 사례에 따라 상업적 구독이 필요한지 결정할 수 있음
     * 일상적인 사용자는 Mac, Windows 또는 Linux 컴퓨터에서 로컬 가상 환경을 무료로 사용할 수 있음.

VMware Workstation Player 및 Fusion Player 중단

     * Pro 제품이 개인 사용 무료 및 상업적 사용 유료로 제공됨에 따라, VMware Workstation Player와 VMware Fusion Player는 중단됨.
     * 개인 사용 Player 제품 사용자는 추가 비용 없이 더 기능이 많은 Pro 버전으로 업그레이드 가능.
     * Workstation Player는 Workstation Pro와 함께 번들로 계속 제공됨.
     * Fusion Player 개인 사용 라이선스 사용자는 Fusion 13.5.2로 업데이트하고 라이선스 키를 삭제하면 됨.
     * 상업적 라이선스 사용자는 기존 제품을 계속 사용할 수 있으며, 지원 기간이 만료되면 Pro 버전으로 업그레이드 권장.

상업적 사용을 위한 구독 모델

     * 상업적 사용 라이선스를 필요로 하는 사용자들을 위해 단일 SKU로 제품 그룹 제공.
     * Broadcom Advantage 파트너를 통해 구독 구매 가능.
     * 새로운 리셀러 Digital River를 통해 상업적 계정 없이도 구매 가능.
     * VMware Desktop Hypervisor 구독은 연간 $120에 판매됨: store.cloudvista.com

구독시 제공되는 혜택

     * Fusion Pro와 Workstation Pro를 상업적 목적으로 사용할 수 있는 권한 제공.
     * 구독 기간 동안 주요 및 소규모 제품 업데이트 제공.
     * 새로운 주요 버전이 출시되면 Broadcom 고객 포털에서 새로운 라이선스 키 생성 가능.
     * 상업적 고객은 구매한 파트너를 통해 지원 받음.

무료와 유료 제품의 차이점

     * 상업적 라이선스를 사용할 때 제품 사용자 인터페이스에 ""이 제품은 개인 사용만을 위해 라이선스됨""이라는 텍스트가 표시되지 않음.
     * 기능적 차이는 없음.

마무리

     * VMware Workstation과 Fusion은 지난 25년 동안 VMware 커뮤니티에 큰 가치를 제공해 왔음.
     * Workstation은 VMware의 첫 번째 제품으로, 여전히 'VMware'라는 이름과 동의어로 사용됨.
     * 이 유산을 계속 이어가며 많은 사람들의 경력을 쌓고 삶을 풍요롭게 함.
     * 로컬 VMware 가상 머신을 실행하기에 더 좋은 시기는 없었음.

Player 제품 사용자인 경우 앞으로 선택할 수 있는 옵션

     * 현재 제품: Workstation Player (개인)
          + 향후 옵션: Workstation Pro 개인 사용 제품 다운로드 및 설치. Workstation Player는 Workstation Pro와 함께 계속 번들로 제공됨.
     * 현재 제품: Fusion Player (개인)
          + 향후 옵션: Fusion 13.5.2로 업데이트하고 라이선스 키 파일 삭제. 'Player' 기능 제한이 제거되고 'Pro for Personal Use' 기능이 잠금 해제됨.
     * 현재 제품: Fusion Player 13 및 Workstation Player 17 (상업적 라이선스)
          + 향후 옵션: Player 제품은 계속 작동하며, 새로운 라이선스 키가 필요하지 않음. 기존 고객을 위한 지원은 기존 EOL 및 EOGS 날짜에 따라 계속됨. 지속적인 지원 및 제품 향상을 위해 Pro 제품으로 업그레이드 권장.

GN⁺의 의견

     * VMware Fusion Pro와 Workstation Pro의 무료 개인 사용 제공: 이는 개인 사용자와 개발자에게 큰 혜택을 제공하며, 가상화 기술을 더 쉽게 접근할 수 있게 함.
     * 상업적 사용을 위한 구독 모델: 상업적 사용자에게는 명확한 라이선스 모델을 제공하며, 제품 업데이트와 지원을 지속적으로 받을 수 있음.
     * Player 제품의 중단: 기존 Player 제품 사용자는 더 기능이 많은 Pro 버전으로 업그레이드할 수 있어, 사용자 경험이 향상됨.
     * Broadcom과의 통합: Broadcom과의 통합을 통해 VMware 제품의 지속적인 발전과 지원이 기대됨.
     * 기술 도입 시 고려 사항: 새로운 라이선스 모델과 제품 변경 사항을 이해하고, 자신의 사용 사례에 맞는 최적의 옵션을 선택하는 것이 중요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Fusion Pro 고객의 경험
          + Fusion Pro를 오랫동안 사용해왔으며, 업그레이드도 구매해왔음.
          + 5개의 좌석에 설치 가능하며, Mac, iMac, Linux 데스크탑에서 사용 가능.
          + 상업적 사용이 가능한 명확한 라이센스와 영구적인 사용 가능.
          + 새로운 ""무료"" 라이센스는 상업적 사용이 불가하며, 잘못 사용 시 회사가 비용을 지불해야 할 수 있음.
          + Corel/Parallels가 시장 기회를 가질 수 있으며, Broadcom 인수 후 ESXi와의 통합이 더 이상 중요하지 않게 됨.
     * Broadcom 인수 후의 미래
          + Broadcom이 ESXi와 유사한 제품에서 최대한 수익을 짜내고 있음.
          + Fusion의 미래가 불확실하며, 시간이 지나면서 더 이상 최첨단 소프트웨어가 아닐 가능성 있음.
          + 손실을 감수하면서 유지할지 의문.
     * 제품 가치와 고객
          + 제품이 충분히 가치가 없어서 매각하지 않을 가능성 있음.
          + Broadcom의 주요 고객 목록에 포함되지 않음.
          + Broadcom이 이익을 추구하는 기업임을 강조.
     * 무료 제공의 장점
          + 개인 사용자에게 무료로 제공하는 것이 늦었지만 긍정적임.
          + Visual Studio의 예시처럼 무료 제공이 큰 광고 효과와 인지도를 높일 수 있음.
     * 혼합된 감정
          + 무료 제공이 좋지만, 다른 제품의 가격 정책 때문에 감사하기 어려움.
          + ESXi를 홈랩 사용자에게 다시 제공하는 것이 좋은 방향일 것.
     * 무료 제공의 의아함
          + 무료 ESXi/vSphere 하이퍼바이저를 종료한 후 Workstation과 Fusion을 무료로 제공하는 것이 이상함.
     * 신뢰 문제
          + 더 이상 Broadcom을 신뢰하지 않음.
     * 기사 내용 이해 부족
          + 많은 사람들이 기사를 제대로 읽지 않음.
          + Fusion과 Workstation 모두 개인 사용에 무료로 제공됨.
          + 상업적 사용은 여전히 유료이며 구독 방식임.
     * 계정 생성 문제
          + 계정 생성이 거의 불가능하며, ""무역 준수 확인""에서 루프에 빠짐.
     * 무료 제공의 의문
          + Pro 버전이 무료로 제공되지만, 이는 사용을 꺼리게 만듦.
          + 오픈 소스가 유지에 도움이 될 수 있지만, 현재로서는 죽은 소프트웨어로 보임.
"
"https://news.hada.io/topic?id=14819","Pipecat - 오픈 소스 프레임워크 기반 음성 비서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Pipecat - 오픈 소스 프레임워크 기반 음성 비서

     * 실시간, 멀티모달, 대화형 AI 에이전트를 구축하기 위한 오픈소스 프레임워크
     * 개인 코치, 회의 보조, 어린이를 위한 이야기 장난감, 고객 지원 봇, 데이터 수집 흐름, 그리고 재치 있는 소셜 동반자 등을 만들 수 있음

GN⁺의 의견

     * 음성 및 멀티모달 대화형 에이전트: Pipecat은 다양한 대화형 에이전트를 쉽게 구축할 수 있는 프레임워크로, 개인 코치나 고객 지원 봇 등 다양한 용도로 활용 가능함.
     * WebRTC와 VAD: 실시간 미디어 전송을 위한 WebRTC와 음성 활동 감지(VAD)는 자연스러운 대화를 위해 필수적인 요소임. 특히 VAD는 사용자가 말하기를 마쳤는지 감지하는 데 중요함.
     * 개발자 친화적: Pipecat은 로컬 환경에서 시작하여 클라우드로 확장할 수 있으며, 다양한 AI 서비스와 통합할 수 있어 개발자에게 유연성을 제공함.
     * 테스트 및 에디터 설정: 프로젝트의 품질을 유지하기 위해 엄격한 PEP 8 형식을 따르며, Emacs와 Visual Studio Code와 같은 에디터에서 쉽게 설정할 수 있음.
     * 커뮤니티 지원: Discord와 같은 커뮤니티 플랫폼을 통해 지원을 받을 수 있어 개발자들이 문제를 해결하고 정보를 공유하는 데 도움이 됨.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 오픈 소스 구현을 보니 좋음
          + 많은 스타트업들이 이 분야에 진입하고 있음. 예: RetellAI, Fixie.ai
          + 현재 접근 방식은 음성-텍스트-텍스트-음성 모델을 사용함.
          + 최근 발표된 GPT-4o와의 상호작용이 기대됨.
     * 오디오-오디오 모델 필요성
          + 오픈 소스 세계에서 데모된 오디오-오디오 모델이 필요함.
          + 누군가가 관련 모델을 찾았음.
     * 실시간 립싱크 기능
          + Feycher.com이라는 유사한 사이트를 만들었음.
          + 실시간 립싱크 기능도 포함됨.
     * 음성 비서의 발전
          + Siri, Alexa, Google Assistant의 출시 시기 비교.
          + Siri는 여전히 사용하기 어렵고, Google Home은 몇 년간 큰 개선이 없었음.
          + 음성 비서는 운전, 요리 등에서 유용하지만, 상업적으로 성공하지 못한 듯함.
          + 더 나은 음성 비서를 만들기 위해 필요한 것이 무엇인지 궁금함.
     * VAD(Voice Activity Detection)
          + VAD 기술에 대한 관심이 높음.
          + 여러 화자와 함께 작동하는 방법에 대해 더 알고 싶음.
     * LiveKit Agents
          + OpenAI가 음성 모드에서 사용하는 LiveKit Agents가 오픈 소스임.
     * Bolna 프로젝트
          + 오픈 소스 음성 오케스트레이션 프로젝트인 Bolna를 개발 중임.
     * 긍정적인 피드백
          + 매우 멋진 작업이며, 이 방향으로 구축할 때 사용할 수 있을 것 같음.
     * GPT-4o의 영향
          + 실시간 음성 기능을 갖춘 GPT-4o가 이러한 프로젝트에 어떤 영향을 미칠지 궁금함.
          + 실시간 다국어 번역 대화 데모가 인상적이었음.
"
"https://news.hada.io/topic?id=14888","Chrome 개발자 콘솔, 이제 Gemini로 자바스크립트 오류 및 경고 이해하기 지원 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Chrome 개발자 콘솔, 이제 Gemini로 자바스크립트 오류 및 경고 이해하기 지원

     * 설정에서 ""Understand Console Messages with AI"" 를 활성화 하면 동작
     * 개발자 도구의 에러메시지 위로 호버하면 ""Understand this error"" 버튼이 생기고, 클릭시 Gemini가 해당 오류에 대한 설명 제공
     * 크롬 125 이상. 현재는 영어로만 지원하며 단계별 릴리즈중

   Microsoft Edge에서는 에러에 대해서 copilot이 도움을 주더라구요. 크롬도 이제 지원하나 보네요.. 🧐
"
"https://news.hada.io/topic?id=14834","2013년 Adobe Photoshop 소스 코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2013년 Adobe Photoshop 소스 코드

Adobe Photoshop 소스 코드

  소프트웨어 보석: 컴퓨터 역사 박물관의 역사적 소스 코드 시리즈

     * 포토샵: 디지털 이미지를 포토샵 소프트웨어나 다른 이미지 편집 소프트웨어로 변경하는 것, 특히 현실을 왜곡하는 방식으로 변경하는 것을 의미함 (출처: 메리엄-웹스터 온라인 사전, 2012년)

  포토샵의 탄생

     * 1980년대 후반, 토마스 놀과 존 놀 형제가 이미지 편집 프로그램을 설계하고 작성하기 시작함
     * 토마스 놀은 미시간 대학교에서 컴퓨터 비전 박사 과정 학생으로, 1987년에 디지털 이미지를 표시하고 수정하는 프로그램을 작성함
     * 존 놀은 영화 시각 효과 회사인 인더스트리얼 라이트 & 매직에서 일하며 이 프로그램을 사진 편집에 유용하게 사용함

  포토샵의 발전

     * 프로그램은 점차 발전하여 ""디스플레이""라는 이름으로 불리게 됨
     * 1988년 여름, 이 프로그램이 상업적으로 유망하다는 것을 깨닫고 ""포토샵""으로 이름을 변경함
     * 슬라이드 스캐너 제조업체인 바니스캔이 ""바니스캔 XP""라는 이름으로 약 200개의 버전 0.87을 번들로 제공함

  어도비와의 계약

     * 어도비의 아트 디렉터 러셀 브라운의 권유로 어도비가 포토샵 배포 라이선스를 구매하기로 결정함
     * 1989년 4월 계약이 체결되고, 1990년 초에 버전 1.0이 출시됨
     * 이후 10년 동안 300만 개 이상의 포토샵이 판매됨

  초기 포토샵의 기술적 세부 사항

     * 초기 포토샵은 주로 애플 매킨토시용 파스칼로 작성되었으며, 일부는 모토로라 68000 마이크로프로세서를 위한 기계어로 작성됨
     * 버전 1에서는 토마스 혼자 엔지니어로 일했고, 버전 2에서는 두 명의 엔지니어가 참여함
     * 토마스는 기본 애플리케이션 프로그램을 작업했고, 존은 많은 이미지 처리 플러그인을 작성함

  소스 코드 공개

     * 어도비 시스템즈의 허가를 받아 컴퓨터 역사 박물관은 1990년 버전 1.0.1의 포토샵 소스 코드를 비상업적 용도로 공개함
     * 소스 코드는 179개의 파일로 구성되어 있으며, 약 128,000줄의 주석이 거의 없는 잘 구조화된 코드로 이루어짐
     * 코드의 약 75%는 파스칼로, 약 15%는 68000 어셈블리어로 작성됨

  소스 코드에 대한 해설

     * IBM 리서치 알마덴의 소프트웨어 엔지니어링 수석 과학자이자 컴퓨터 역사 박물관의 이사인 그레이디 부치의 의견:
          + 포토샵 1.0의 소스 코드를 열어보는 것은 고대 유물의 무덤을 여는 것과 같았음
          + 인터페이스와 추상화의 일관된 분리, 컴포넌트화된 추상화의 설계 결정이 잘 이루어짐
          + 현대 구현에서도 기본 구조가 유지되고 있음
          + 주석이 거의 없지만 코드가 매우 읽기 쉬움

  초기 포토샵 스크린샷

     * 홈 화면: 사용 가능한 도구들을 보여줌
     * 브러시 색상, 크기 및 텍스처 선택 가능
     * 다양한 선택 도구와 이미지 필터 제공
     * 버전 3에서 추가된 이미지 레이어 기능은 초기 버전에는 없음
     * 사용자 정의 기능을 제공하는 환경 설정 페이지
     * 제한된 글꼴, 글꼴 크기 및 스타일 선택 가능

  역사적 소스 코드 공개 목록

     * MacPaint와 QuickDraw 소스 코드, 2010년 7월 18일
     * APL 프로그래밍 언어 소스 코드, 2012년 10월 10일
     * Adobe Photoshop 소스 코드, 2013년 2월 13일
     * Apple II DOS 소스 코드, 2013년 11월 12일
     * Microsoft MS-DOS 초기 소스 코드, 2014년 3월 25일
     * Microsoft Word for Windows 버전 1.1a 소스 코드, 2014년 3월 25일
     * 초기 Digital Research CP/M 소스 코드, 2014년 10월 1일
     * Xerox Alto 소스 코드, 2014년 10월 21일
     * Electronic Arts DeluxePaint 초기 소스 코드, 2015년 7월 22일

  저자 소개

     * 렌 슈스텍은 컴퓨터 역사 박물관의 설립 이사장 명예 이사임

  관련 기사

     * CHM 블로그: 우리 모두를 위한 컴퓨터, 2023년 12월 15일
     * CHM 블로그: 당신의 퍼비는 몇 살인가?, 2023년 12월 13일
     * CHM 블로그: 거북이, 블록, 그리고 추억, 2023년 12월 5일

GN⁺의 의견

     * 포토샵의 역사적 가치: 포토샵은 디지털 이미지 편집의 혁명을 일으켰으며, 그 소스 코드를 통해 초기 소프트웨어 개발의 역사적 맥락을 이해할 수 있음.
     * 코드의 교육적 가치: 주석이 거의 없지만 잘 구조화된 코드는 소프트웨어 엔지니어링 교육에 유용한 자료가 될 수 있음.
     * 기술적 진보: 초기 포토샵의 구조와 현대 버전의 구조를 비교함으로써 소프트웨어 아키텍처의 진화를 이해할 수 있음.
     * 비판적 시각: 초기 소스 코드의 공개는 역사적 가치를 지니지만, 상업적 사용이 제한되어 있어 실질적인 활용에는 한계가 있음.
     * 관련 프로젝트: GIMP와 같은 오픈소스 이미지 편집 소프트웨어도 유사한 기능을 제공하며, 포토샵의 대안으로 고려할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Adobe 소스 코드 아카이빙 경험
          + Adobe에서 Photoshop, Illustrator, PostScript 등의 소스 코드를 아카이빙한 경험 공유.
          + Thomas Knoll의 원본 Mac 플로피 디스크 백업을 사용해 Mac Plus와 시리얼 케이블로 파일을 전송.
          + 1988년 7월 6일자 0.54 버전의 파일을 포함한 다양한 고대 압축 아카이브 형식의 파일들.
          + Perforce 서버에 모든 코드를 아카이빙했으나, 초기 Illustrator 백업은 손상된 외장 디스크에 있었음.
     * Adobe와 소스 코드 교환 경험
          + 90년대 중반 Adobe를 방문해 소스 코드를 교환한 경험.
          + PhotoShop이 MacApp 기반이었고, Windows에서 작동하는 레이어가 있었음.
          + 일부 PhotoShop 코드와 색 공간 계산 부분을 가져왔으나 대부분 무시.
          + 현재 소스 코드에 MacApp의 흔적이 남아있는지 확인하고 싶음.
     * UX의 일관성
          + UX가 여전히 일반적으로 동일함에 놀라움.
          + MacBook Pro M1 출시 초기 Adobe Photoshop의 Silicon 베타 버전이 가장 빠르게 작동했음.
          + 현재는 다시 느려짐.
     * 소스 코드의 아름다움 이해 어려움
          + 소스 코드를 보았으나 그 아름다움을 이해하기 어려움.
          + Rust를 배우며 코드 구조를 고민하던 중, Photoshop이나 3D Studio Max와 같은 UI를 어떻게 구축할지 궁금했음.
          + 코드 구조를 배울 수 있는 좋은 자원을 알고 싶음.
     * Adobe Photoshop 1.x 버전 기사
          + 1990년의 Adobe Photoshop 1.x 버전에 대한 2013년 기사.
     * 상표의 일반화 방지
          + Adobe가 상표의 일반화를 막기 위해 노력 중.
          + ""photoshopped"" 대신 ""Adobe® Photoshop® Elements 소프트웨어로 이미지가 향상됨""과 같은 올바른 사용 예시 제공.
     * 오래된 소스 코드 공개에 대한 찬사
          + 오래된 소프트웨어의 소스 코드를 공개하는 회사들에 대한 찬사.
          + 많은 소스 코드가 시간과 여러 번의 인수로 인해 사라졌을 가능성.
          + 버전 관리의 보편화가 최근의 현상이라 많은 소스 코드가 랜덤 테이프 백업, 플로피 디스크 또는 바인더에 인쇄된 상태로 존재할 가능성.
     * Photoshop의 초기 버전 경험
          + Adobe 이전의 Photoshop을 병원에서 본 경험.
          + 당시 MacApp 버전이 베타 상태였을 가능성.
          + Tom Knoll의 B-스플라인 알고리즘을 곡선 편집기의 기초로 사용.
     * John Knoll의 경력
          + John Knoll이 스타워즈 프리퀄의 FX 리드였으며, Rogue One을 감독.
          + 프리퀄의 비하인드 씬 다큐멘터리가 잘 유지됨.
"
"https://news.hada.io/topic?id=14882","습기가 있는 끈에서도 작동하는 ADSL 기술 (2017)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    습기가 있는 끈에서도 작동하는 ADSL 기술 (2017)

ADSL이 젖은 끈에서도 작동한다는 사실이 공식적으로 확인됨

  ADSL의 작동 원리

     * 광대역 서비스는 여러 주파수 대역을 사용하여 신호를 전송하는 기술임.
     * ADSL은 설치된 선의 길이와 특성에 맞게 적응하는 능력이 있음.
     * 문제 발생 시 시스템이 낮은 속도로 적응하는 경우가 있음.

  젖은 끈 실험

     * 기술자가 젖은 끈을 사용하여 ADSL을 테스트함.
     * 소금물을 사용하여 끈을 적심.
     * 2미터 길이의 젖은 끈을 사용함.
     * 결과: 다운로드 속도 3.5Mb/s, 업로드 속도는 느림.

  추가 실험

     * 끈을 만지지 말 것: 젖은 끈을 만지면 성능이 저하될 수 있음.
     * 음성 통신: 양 끝에 깡통을 연결하면 음성 통신도 가능함.

  댓글 반응

     * 긍정적인 반응: 많은 사람들이 실험 결과에 놀라워하고 흥미로워함.
     * 기술적 제안: 절연체를 추가하거나 꼬인 쌍을 사용하여 성능을 개선할 수 있다는 제안이 있음.
     * 비판적 의견: 일부는 이 실험이 실제로 유용할지에 대해 의문을 제기함.

  GN⁺의 의견

     * 기술적 흥미: 이 실험은 ADSL 기술의 적응력을 보여주는 흥미로운 사례임.
     * 실용성: 실제로 젖은 끈을 사용하는 것은 비현실적이지만, 기술의 한계를 테스트하는 데 의미가 있음.
     * 대체 기술: 현재는 광섬유와 같은 더 나은 대체 기술이 존재함.
     * 실험의 가치: 이러한 실험은 기술적 호기심을 자극하고 새로운 아이디어를 제공할 수 있음.
     * 안전 고려: 젖은 끈을 사용한 실험은 안전 문제를 고려해야 함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 1995년에 가시철사로 100 Mbps 이더넷 시연
          + 디지털 전송 구조의 성능에 영향을 미치는 네 가지 주요 속성: 임피던스, 지연, 고주파 손실, 그리고 크로스토크.
          + Dr. Howard Johnson이 가시철사의 이러한 속성들을 설명함.
     * IP 통신의 가능성
          + Van Jacobson이 90년대 초에 IP가 두 개의 깡통과 젖은 끈으로도 작동할 수 있다고 언급.
          + 학생 프로젝트로 설정했으나, 실제로 시도한 학생은 2009년에 나타남.
          + 깡통은 공진 문제로 부적합, 끈의 공진 주파수에서 신호 강도가 낮지만 여러 주파수를 구분할 수 있었음.
     * ADSL의 경험
          + 10년 전 ADSL을 사용하여 두 개의 라인을 결합해 더 높은 대역폭을 얻으려 했으나, 시간이 지나면서 성능이 저하됨.
          + 한 라인이 비에 반응하여 성능이 떨어졌고, 결국 하나의 좋은 라인만 사용하게 됨.
     * ISP의 사용
          + 댓글 작성자는 자신의 ISP가 이 기술을 사용하고 있다고 추정.
     * 추가 기술적 세부 사항
          + ADSL 관련 추가 기술적 세부 사항을 다룬 후속 게시물이 있음.
     * ADSL의 장단점
          + ADSL이 열악한 물리적 매체를 잘 처리하는 것은 장점이자 단점.
          + ADSL2, VDSL 등 프로토콜이 개선되어 기존 인프라를 교체하지 않고도 사용 가능한 네트워크 속도를 제공.
     * VDSL2의 성능
          + 1933년에 지어진 집의 기존 전화선을 통해 100Mbps 이상의 일관된 속도를 제공.
     * 전쟁 지역에서의 대체 기술
          + 전쟁 지역에서 섬유를 깔기 어려운 상황에서 재활용된 구리선을 사용한 대체 기술로 작동할 수 있는지에 대한 질문.
     * A&A 인터넷 서비스
          + 댓글 작성자는 자신의 인터넷을 A&A에서 제공받고 있으며, 배선이 거의 이와 같다고 언급.
     * 미시간 농촌 지역의 인터넷 속도
          + 미시간 농촌 지역의 부동산을 찾던 중 ADSL을 사용하는 집을 방문, 2.2Mbps의 속도를 확인.
          + ADSL 시절을 그리워하지 않는다고 언급.
"
"https://news.hada.io/topic?id=14781","학사 학위의 23%, 석사 학위의 43%가 부정적인 ROI를 보이는 것으로 나타나","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             학사 학위의 23%, 석사 학위의 43%가 부정적인 ROI를 보이는 것으로 나타나

대학 학위의 투자 수익률에 관한 연구 결과

     * Foundation for Research on Equal Opportunity (FREOPP)의 새로운 연구에 따르면, 학사 학위 프로그램의 23%와 석사 학위 프로그램의 43%가 투자 수익률(ROI)이 마이너스임
     * 연구는 미국의 수천 개 대학과 대학교의 50,000개 이상의 학위 및 자격증 프로그램 데이터를 조사했으며, 졸업 직후와 10년 후 학생들의 수입을 살펴보고 중도 탈락 가능성도 고려했음
     * 전체적으로 학생의 31%가 ROI가 마이너스인 프로그램에 등록되어 있음

  학위 종류에 따른 ROI 차이

     * 학사 학위와 박사 및 전문 학위의 77%가 ROI가 플러스인 반면, 석사 및 준학사 학위 프로그램은 57%만이 ROI가 플러스임
     * 학사 학위의 경우 미술, 교육, 생물학 프로그램의 중간 ROI가 가장 낮고, 공학, 컴퓨터 과학, 간호학 학위가 학생들에게 가장 높은 장기 보상을 제공함

  등록 대학에 따른 ROI 차이

     * 버지니아 대학교의 영문학 학위는 ROI가 $581,925로 매우 높지만, 버지니아 커먼웰스 대학교의 영문학 전공 학생들은 ROI가 마이너스 $30,000임
     * 대학 및 전공 선택 시 학생들은 졸업 후 수입, 학교의 졸업률 등 ROI에 기여하는 몇 가지 주요 변수를 평가해야 함

  연방 정부 기금이 저가치 학위 프로그램에 지원되는 비율

     * 연구 대상 프로그램에 투입된 연방 기금의 29%가 ROI가 마이너스인 프로그램에 사용됨
     * 여기에는 Pell 장학금 370억 달러, 학부생 대출 470억 달러, 대학원생 대출 390억 달러가 포함됨
     * 이러한 프로그램의 ROI가 마이너스이기 때문에 대부분의 대출금이 상환되지 않을 가능성이 높음

GN⁺의 의견

     * 이 연구 결과는 대학 진학을 고려하는 학생과 가족들이 전공과 학교 선택에 신중을 기해야 함을 보여줌. 특히 석사 학위 프로그램의 경우 ROI가 마이너스인 비율이 높아 더욱 주의가 필요해 보임.
     * 대학 교육의 가치를 단순히 경제적 수익률로만 평가하는 것은 문제가 있지만, 학자금 대출 등으로 인한 경제적 부담을 고려할 때 이런 데이터를 참고하는 것도 의미가 있어 보임.
     * 다만 이 연구는 미국 대학들만을 대상으로 했기에 한국에 그대로 적용하기는 어려울 것 같고, 한국 대학들을 대상으로 한 유사한 연구가 필요해 보임.
     * 또한 전공과 진로에 대한 적성, 희망 직종의 전망 등 비경제적 요인들도 충분히 고려되어야 할 것임. 졸업 후 임금 수준만으로 대학 교육의 가치를 평가하는 것은 위험할 수 있음.

        Hacker News 의견

     * 소득은 행복의 유일한 척도가 아님. 많은 사람들이 더 적은 돈을 받더라도 좋아하는 일을 하는 것을 선택함.
     * 실제 데이터는 기사의 내용과 일치하지 않음. ROI가 낮은 전공으로는 연극/무대 예술, 도서관 및 기록 보조, 대체의학, 신학 등이 있고, ROI가 높은 전공으로는 생물수학, 생물정보학, 운영 연구, 치의학, 수학 및 컴퓨터 과학, 시스템 공학 등이 있음. 전공의 13%만이 부정적인 평균 ROI를 가짐.
     * 정부는 학위 요건을 불법으로 만들어야 함. 고용주가 학위 소지자를 선택할 수 있는 충분히 좋은 선별 프로세스를 만들 수 없다면, 학위가 필요하지 않을 수 있음. 또한 정부는 학교 교사에게 교육학 석사 학위를 요구하는 등 학교와 결탁하고 있음.
     * 대학의 비용 구조에 문제가 있음. 컴퓨터 공학 전공자가 심리학 전공자보다 2배 정도 높은 급여를 받지만, 모든 사람이 같은 금액을 지불함. 학자금 대출의 이자율도 전공을 고려하지 않음. 시장 경제에서는 이런 일이 발생하지 않을 것임.
     * 브라이언 캐플런의 ""교육에 반대하는 사례""를 추천함. 그는 중퇴율, 전공, 배우자와의 만남 가능성, 기회비용, 대학 명성 등을 고려하여 대학 학위의 가치를 분석함. 요약하면, 대학 학위는 수요가 많은 분야와 명문대에서 가치가 있지만, 중퇴율이 50%에 달해 많은 사람들이 혜택을 받지 못하고 비용만 부담함.
     * ROI는 더 많은 보수를 받는 것보다 안정적인 수입을 얻는 것이 더 중요하다는 점을 놓치고 있음. 고용주가 수백 개의 지원서를 받을 때 학위가 있으면 더 나은 기회를 얻을 수 있음.
     * 좋은 첫 직장을 구하는 것이 상승을 위한 핵심이며, 아는 사람이 중요함. 20년 전 필자의 동료는 네트워크를 통해 연봉 8만 달러의 직장을 얻었지만, 필자는 첫 직장에서 3만 달러 조금 넘게 벌었고 8만 달러를 버는 데 10년이 걸렸음.
     * 교육을 받은 국민이 사실과 허구를 구별하고, 비판적 사고를 하며, 파시즘에 저항할 수 있다는 점에서 ROI를 고려해야 함.
     * 대부분의 연구는 졸업생의 소득과 부모의 소득 간의 상관관계를 고려하지 않음. 철학이나 예술 전공자의 소득이 높다는 주장이 있는 이유는 이 전공을 선택하는 사람들이 이미 상류층이기 때문임. 이 연구가 이러한 편견을 제거할 수 있다면, 더 많은 전공이 부정적인 ROI를 가질 것임.
     * 정치인들은 고등교육 학위와 소득의 상관관계를 언급하면서 모두가 학위를 받으면 높은 급여를 받을 수 있다고 주장해 왔음. 그러나 고소득 일자리의 수는 한정되어 있으며, 학위 소지자가 넘쳐나면 오히려 임금이 낮아질 수 있음. 주택 구매를 위한 낮은 모기지 금리나 쉬운 자금 조달이 주택을 더 저렴하게 만든다는 것도 비슷한 오류임. 더 많은 사람들이 구매할 수 있게 되면 제한된 수의 주택에 입찰하여 가격이 다시 오를 때까지 상승함.
"
"https://news.hada.io/topic?id=14832","Ask GN: 소셜로그인 구현시  이메일도 암호화해서 저장해야 하나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ask GN: 소셜로그인 구현시 이메일도 암호화해서 저장해야 하나요?

   ""개인정보 안전성 확보조치"" 에 의하면 이메일도 암호화하라는것 같은데..
   이것도 암호화 해야하나요?
   firebase 나 대부분의 서비스는 email 암호화 되어 있지 않는데..
   쓰지 못하는 건가요?

   이메일을 고유식별정보라고 간주하는 건가요..?

   이메일이라고 언급된 내용은 없지 않나요..?

   헉.. 제가 다른 곳에서 본 ""이메일 암호화""를 ""이메일 저장 암호화"" 로 착각했네요- -;
"
"https://news.hada.io/topic?id=14896","빅 테크의 EU에 대한 경고: "Drop Dead"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      빅 테크의 EU에 대한 경고: ""Drop Dead""

유럽연합의 새로운 디지털 시장법(DMA)

     * 유럽연합의 새로운 디지털 시장법(DMA)은 복잡한 규제임.
     * 이 규제는 대중이 사용하는 기술을 더 쉽게 통제할 수 있도록 하는 것을 목표로 함.

  주요 규제 내용

     * 서드파티 앱 스토어 허용: 강력한 ""게이트키퍼"" 기술 회사들이 서드파티 앱 스토어를 허용해야 함. 이는 기기 소유자가 신뢰할 수 있는 소프트웨어 제공자를 선택할 수 있게 함.
     * 상호운용 가능한 게이트웨이 제공: 다른 플랫폼들이 연결할 수 있는 상호운용 가능한 게이트웨이를 제공해야 함. 이를 통해 사용자는 채팅 클라이언트를 변경해도 기존의 사람들과 계속 연결될 수 있음.
     * 자사 제품 우선 배제: 플랫폼이 자사 제품을 우선적으로 홍보하고 경쟁사의 우수한 제품을 숨기는 행위를 금지함.
     * 프라이버시 규제 강화: 8년 된 일반 데이터 보호 규정(GDPR)을 강화하는 프라이버시 규제가 포함됨. 이는 특히 대형 기술 기업들이 오랫동안 무시해온 규제임.

  DMA의 목표

     * 사용자가 기기에 어떤 소프트웨어를 실행할지 결정할 수 있는 세상으로 나아가게 함.
     * 최고의 제품과 서비스를 쉽게 찾을 수 있게 함.
     * 더 나은 플랫폼으로 이동해도 사회적 관계를 포기하지 않게 함.
     * 감시 없이 이러한 모든 것을 할 수 있게 함.

  기술 기업들의 반발

     * 대형 기술 기업들은 이러한 미래를 원하지 않으며, 이를 저지하려고 노력 중임.
     * 애플은 고객이 설치할 수 있는 소프트웨어를 엄격히 통제함. 이는 DMA의 주요 관심사였음.
     * 애플은 앱 스토어를 통해 소프트웨어를 제공하며, 앱 판매와 이후 구매에 대해 30%의 높은 수수료를 부과함.
     * 애플은 이러한 통제가 고객을 안전하게 지키기 위해 필요하다고 주장하지만, 실제로는 이 통제를 통해 회사의 이익을 위해 고객의 보안을 빼앗음.

  애플의 대응

     * 애플은 DMA에 대한 준수 계획을 제출했지만, 이는 매우 부족함.
     * 애플은 경쟁 앱 스토어를 통해 판매되는 앱에 대해 다양한 수수료를 부과하고, 경쟁 앱 스토어를 통해 판매하는 앱을 애플 스토어에서 제거함.
     * 애플의 고객은 다른 앱 스토어를 사용하기 위해 복잡한 설정을 거쳐야 하며, EU를 벗어나면 서드파티 앱이 비활성화됨.

  메타의 대응

     * GDPR은 메타가 사용자로부터 명확하고 철회 가능한 동의를 받아야 한다고 요구함.
     * 메타는 ""Pay or Okay"" 시스템을 도입하여 감시에 동의하지 않는 사용자가 서비스를 사용하려면 비용을 지불하도록 함.
     * 이는 금지되어 있으며, 메타는 DMA가 허용하는 것처럼 행동함.

민주적 통제와 책임의 시스템을 위한 싸움

     * 기술 부문이 더 집중되면서 책임감이 줄어들었음. 기술 기업들은 우리의 프라이버시 권리, 노동 권리, 소비자 권리를 대규모로 침해함.
     * 전 세계의 경쟁 당국이 대형 기술 기업들을 규제하기 시작. DMA는 가장 강력하고 야심 찬 규제임.
     * DMA의 설계자들은 빅테크 기업들이 규칙을 준수하지 않을 것이라는 점을 예견했음
          + 애플, 구글, 메타에 대한 조사를 발표하고, 기업들의 전 세계 수입의 10%에 달하는 벌금을 부과할 것이라고 위협했으며, 기업들이 규칙을 따르지 않으면 20%로 두 배가 될 것이라고 했음
     * 애플이 DMA의 고객 소프트웨어 선택권 박탈 반대 주장을 훼손할 수 있다면, 그것은 미국 법무부의 동일한 문제에 대한 소송과 일본, 한국의 사건, 그리고 영국에서 진행 중인 집행 조치로 번질 것임
     * 이번 규제와 그에 대한 기술 기업들의 반발은 사용자와 노동자에게서 얻은 데이터, 권력, 돈을 돌려줄 수 있는 중요한 시도임.

  GN⁺의 의견

     * 기술 기업의 반발: 대형 기술 기업들이 DMA에 반발하는 이유는 이 규제가 그들의 수익 모델에 큰 영향을 미치기 때문임.
     * 사용자 권리 강화: DMA는 사용자에게 더 많은 선택권과 권리를 부여함으로써 기술 기업의 독점을 억제함.
     * 글로벌 영향: DMA의 성공적인 시행은 전 세계적으로 유사한 규제의 도입을 촉진할 수 있음.
     * 프라이버시 보호: GDPR과 DMA는 사용자 프라이버시 보호를 강화하는 중요한 규제임.
     * 기술 기업의 책임: 대형 기술 기업들이 사용자와 사회에 대한 책임을 다하도록 하는 것이 중요함.

   폐쇄된 생태계를 만들지 않도록 하려는 노력이 보이는군요. 기업이 '플랫폼' 을 자처하면서 사실은 아무것도 연결시켜주지 않고 있다는 것을 당연하게 받아들여서는 안되는 것 같습니다.

   그냥 목줄채우기 이상도 이하도 아님. 우리나라는 바둑같은 간단한 게임 만들어서 내놓을때 돈내고 나이인증 받아야 하는것부터 없앴으면 좋겠음

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * EU의 플랫폼 노동자 보호 법안
          + EU는 플랫폼 노동자를 직원으로 분류하려는 법안을 추진 중임. 이는 미국보다 강력한 규제임. Uber는 이에 대해 우려하고 있음.
     * EU의 기술 기업 규제
          + EU는 미국의 기술 기업들이 유럽 시장에서 활동하기 어렵게 만드는 것이 큰 승리일 것임.
     * Apple 팬의 의견
          + Apple 주식을 많이 보유한 팬이지만, iPhone과 iPad에서 Mac처럼 자유롭게 소프트웨어를 설치할 수 있기를 바람.
     * Meta, Apple, Google의 차이점
          + Meta, Apple, Google은 각각 다른 문제를 가지고 있으며, 각기 다른 해결책이 필요함. Apple은 폐쇄된 생태계를 통해 추가 수익을 창출하고, Google과 Meta는 개인 정보를 수익화함.
     * Apple의 AppStore 문제
          + Apple의 AppStore는 필수적인 서비스로 변했으며, EU는 이를 전기와 같은 필수 서비스로 간주해야 함. Apple이 임의로 앱을 승인하거나 거부할 수 있는 권한을 규제할 필요가 있음.
     * Apple의 독점적 행태
          + Apple은 사용자가 구매한 음악을 다른 기기로 옮기기 위해 추가 구독을 요구함. 이는 사용자를 착취하는 행위임.
     * Meta의 'Pay or Okay' 시스템
          + Meta는 사용자가 개인 정보 수집에 동의하지 않으면 서비스를 유료로 제공하거나 차단하는 시스템을 제안했으나, 이는 EU에서 금지됨. 개인 정보 보호는 사치품이 아니라는 논리가 있음.
     * GDPR의 시행 기간
          + GDPR은 실제로 6년 동안 시행되었으며, 시간이 매우 빨리 지나갔음.
     * 기술 독점에 대한 새로운 용어
          + EU는 기술 독점을 '기술 게이트키퍼'라는 새로운 용어로 명명함.
     * 개인 정보 보호와 혁신의 균형
          + EU는 혁신과 개인 정보 보호 사이에서 적절한 균형을 찾고 있음. Apple은 사용자 개인 정보 보호에 비교적 괜찮지만, 폐쇄된 생태계를 최대한 활용하려 함. 개인적으로 EU의 접근 방식이 Meta의 접근 방식보다 더 나음.
"
"https://news.hada.io/topic?id=14851","SiLU와 SoftMax를 2배 빠르게 만드는 새로운 지수 함수, 정확도 완전 유지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             SiLU와 SoftMax를 2배 빠르게 만드는 새로운 지수 함수, 정확도 완전 유지

GGML: CPU용 SiLU 및 Softmax 재작성

  주요 변경 사항

     * 벡터화된 expf() 함수 도입:
          + 기존의 GGML에서 사용하던 short[65536] 조회 테이블보다 더 정확하게 Softmax와 SiLU를 계산할 수 있게 됨.
          + aarch64와 sse2+를 지원하며, 최악의 경우 반올림 오류가 2 ULP임.
          + avx2와 avx512 구현도 작성되었으나, sse2+fma에 비해 코드 복잡성 대비 큰 이점이 없어 사용하지 않음.
     * 주요 반응:
          + 여러 기여자들이 이 변경 사항에 대해 긍정적인 반응을 보임.
          + AMD Ryzen 9 5950X와 M2 Ultra에서 SOFT_MAX가 약 1.5배 더 빠름.

  코드 변경 사항

     * 주요 변경 사항 요약:
          + 주석 처리된 #define 제거.
          + 중복된 5줄을 ggml_vec_soft_max_f32()로 추출.
          + GGML_SILU_FP16 관련 함수 제거.
          + ggml_v_expf() 추가.
          + ggml_v_silu() 추가.
          + ggml_vec_silu_f32()를 SSE2 또는 __ARM_NEON 플래그에 따라 조정하는 전처리기 문으로 조정.

  성능 개선

     * 벤치마크 결과:
          + AMD Ryzen 9 5950X와 M2 Ultra에서 SOFT_MAX가 약 1.5배 더 빠름.
          + AVX2를 포함하면 이점이 1.5배에서 1.9배로 증가.
          + znver4에서 avx512를 포함하면 2.1배로 증가.

  추가 의견

     * 기여자 의견:
          + AVX512를 사용할 때 vscalefps를 사용하면 오버플로우와 언더플로우를 적절히 처리할 수 있으며, 체크 및 블렌드를 제거할 수 있음.
          + Skylake-AVX512/Cascadelake에서 성능 향상을 확인함.

GN⁺의 의견

     * 성능 개선: 이 변경 사항은 CPU에서의 성능을 크게 향상시킬 수 있으며, 특히 AVX2와 AVX512를 사용하는 최신 하드웨어에서 더 큰 이점을 제공함.
     * 코드 복잡성: AVX2와 AVX512 구현이 SSE2+fma에 비해 큰 이점을 제공하지 않기 때문에 코드 복잡성을 줄이는 것이 중요함.
     * 하드웨어 호환성: 다양한 하드웨어에서의 성능을 최적화하기 위해 다양한 SIMD 명령어 세트를 지원하는 것이 중요함.
     * 벤치마크: 성능 개선을 확인하기 위해 다양한 하드웨어에서의 벤치마크 테스트가 필요함.
     * 최신 기술 적용: 최신 SIMD 명령어 세트를 활용하여 성능을 극대화하는 것이 중요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 20년 전 Hughes 레이더 신호 프로세서 이야기
          + Hughes 레이더 신호 프로세서에서 e^x 계산을 최적화한 경험 공유.
          + 32비트 단어의 각 8비트 값에 대해 256개의 e^x 테이블을 사용하여 최종 값을 곱셈으로 계산.
          + 이전보다 5배 빠르게 동작했음.
          + 이 기계는 이제는 구식이지만 당시에는 매우 빠른 처리 속도를 자랑했음.
     * LLM 추론 속도에 대한 silu와 softmax 개선의 영향
          + LLM 추론 속도에 미치는 영향이 크지 않을 것이라는 의견.
          + 대부분의 시간은 행렬 곱셈에 소비됨.
     * 코드 최적화에 대한 감탄
          + 복잡한 최적화 작업에 대한 놀라움과 감탄.
          + 기여자가 jart라는 것을 알고 나서 이해하게 됨.
     * LUT 크기에 대한 의문
          + 65536 크기의 LUT가 L1 캐시 전체 크기와 같아 비효율적일 수 있다는 의견.
          + 그러나 확률적 조정으로 인해 잘 작동할 수도 있음.
     * CPU에서의 llama.cpp와 ggml 비교
          + ggml이 tensorflow lite, onnxruntime 등과 비교해 어떤지 궁금해하는 의견.
     * CUDA 장치에서의 성능 비교
          + gguf/llama.cpp가 비배치 추론에서 더 나은지, 아니면 exllamav2+flashattention이 여전히 우세한지에 대한 질문.
     * LUT 벡터화 가능성
          + LUT를 벡터화할 수 있다는 의견.
          + 관련 자료 링크 제공.
     * 빠른 tanh 계산
          + 빠른 tanh 계산에 대한 링크 제공.
     * CPU에서의 llama 성능
          + 최적화에도 불구하고 CPU에서 많은 파라미터를 가진 llama가 너무 느릴 수 있다는 의견.
"
"https://news.hada.io/topic?id=14818","Unitree G1 - 휴머노이드 에이전트 로봇","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Unitree G1 - 휴머노이드 에이전트 로봇

     * $16K(약 2천만원)
     * 23~43개의 조인트 모터로 사람의 움직임을 넘어서는 매우 유연한 활동성
     * AI를 이용한 동작 모방 및 강화학습
     * 3손가락. 정밀한 손 힘 제어로 모든 사물 조작 가능 (호두까기, 망치질, 병따기)
     * UnifoLM(Unitree Robot Unified Large Model)
     * 35kg, 127cm
     * 최대 2시간 배터리
     * 3D LIDAR(LIVOX-MID360) + Depth 카메라(Intel RealSense D435)

   오 손가락 액츄에이터로 어떻게 호두를 까지 했는데,
   팔 전체의 힘과 무게를 이용하네요 ㄷㄷ

   저도 기대하고 봤는데 호두를 미리 깨놨네요
   1:19 보시면 티가 납니다

   비전 프로가 4천 달러라고 치면 비전 프로 4대 가격이네요.....
   언제 이렇게 저렴해졌죠?

   동작보다 가격부터 놀라게 만드네요. 역시 중국인가요..

   생각해보면 배터리빼고는 돈이 들쪽이 별로 없지 않을까요?
   그래서 테슬라도 전기 액쥬에이터로 만드는거구요..
"
"https://news.hada.io/topic?id=14863","위조된 Apple 직원 배지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            위조된 Apple 직원 배지

     * eBay 경매에서 애플 직원 #10번의 사원증(Badge)이 판매되고 있었음
     * 이 배지는 스티브 잡스의 배지는 아니지만, 애플의 초기 직원 중 하나의 배지로 매우 희귀한 아이템임
     * 제공된 사진을 자세히 살펴보았을 때, 배지는 꽤 오래되어 보였고, 로고도 대부분 맞았으며, Sherry Livingston이 실제로 직원 #10이었음
     * 의심스러운 점: 배지의 긁힘이 사포로 문지른 것처럼 보였고, 지도에 있는 얼룩이 과장된 느낌이었음. 타자기로 작성된 부분이 너무 균일해 보였음
     * 애플 직원 #8인 Chris Espinosa가 이 배지가 가짜라고 확신함. 그의 배지와 비교했을 때, 위조된 배지의 문제점이 명확해짐.
          + 크리스는 14살에 애플에 입사했으며, 아직도 근무중임
          + 그에 의하면, ""저 사진은 그녀가 이니고, 폴라로이드+플래시로 찍은 사진이 아니며, 라미네이트(코팅) 위치가 다르며, IBM Selectric Orator 폰트가 아닌 컴퓨터 폰트네요""

판매자와의 대화

     * 판매자가 독일 적십자에서 받은 영수증을 증거로 제시함.
     * 의심스러운 점: 영수증의 디테일이 너무 과장되어 보였고, 사진 속 바인더가 너무 편리하게 뒤집혀 있었으며, 유로 사용전의 독일 마르크화로 표시되었다고 강조함
     * Mastodon 에서 독일 사용자들이 이 증거가 또 다른 위조임을 빠르게 확인해줌
     * 판매자에게 이 사실을 알렸지만, 답변을 받지 못함.

결론

     * 판매 완료: 이 글을 마치기 전에 이미 $946에 판매되었음.
     * 교훈: 애플 역사와 관련된 위조품에 주의하고, 의심스러운 경우 인터넷을 활용할 것.

  GN⁺의 의견

     * 위조품 주의: 역사적 가치가 있는 물품을 구매할 때는 항상 진위 여부를 철저히 확인해야 함.
     * 인터넷의 힘: 의심스러운 경우, 인터넷 커뮤니티의 도움을 받는 것이 유용할 수 있음.
     * eBay의 문제점: eBay와 같은 플랫폼에서 위조품이 쉽게 판매될 수 있다는 점을 인지하고, 구매 시 주의가 필요함.
     * 진위 확인 방법: 전문가의 의견을 듣거나, 신뢰할 수 있는 출처에서 정보를 얻는 것이 중요함.
     * 위조품의 디테일: 위조품은 종종 디테일에서 실수를 저지르므로, 작은 디테일도 주의 깊게 살펴봐야 함.

        Hacker News 의견

해커뉴스 댓글 모음 요약

     * 전기 타자기와 기계식 타자기의 차이점
          + 전기 타자기는 기계식 타자기보다 훨씬 깨끗한 텍스트를 생성함.
          + 기계식 타자기는 키를 누르는 속도와 각도 때문에 잉크가 번지기 쉬움.
          + 전기 타자기는 선형 액추에이터와 회전 볼 타입 헤드를 사용하여 더 선명한 텍스트를 생성함.
     * 위조된 DRK 송장에 대한 흥미
          + 2001년의 일반적인 데스크탑 형식처럼 보이지만, AI 번역된 문구가 어색함.
          + 미국 영화와 TV 산업이 독일을 제대로 표현하지 못하는 경우가 많음.
          + 문화와 언어의 차이를 이해하지 못하면 이런 실수가 발생할 수 있음.
     * 위조된 영수증에 대한 실망
          + 20년 동안 플라스틱 슬리브에 보관된 영수증이 신선한 주름을 가지고 있음.
          + 누군가가 이 가짜 물건을 실제로 구매했다는 사실에 실망함.
     * Playdate 콘솔 사전 주문 이야기
          + GDC 토크에서 Playdate 콘솔 사전 주문을 위해 줄을 서려는 사람에 대한 이야기가 나옴.
          + GDC 토크 링크
     * DRK 송장을 위조한 이유에 대한 의문
          + DRK 송장을 위조하는 것이 아이템의 진위를 증명하는 데 어떤 의미가 있는지 의문.
          + 자선 판매라면 아이템이 인증되지 않았을 가능성이 높음.
     * 공감 호소의 위험성
          + 경매나 수집품 맥락에서 공감을 호소하는 것도 큰 경고 신호임.
          + ""코로나19로 실직하여 가족을 부양해야 한다""는 문구가 의심스러움.
     * 위조품의 진위 여부
          + 진위 여부를 입증하는 책임은 판매자에게 있음.
          + 인증서가 없는 경우 기본적으로 가짜로 간주해야 함.
          + 온라인에서 더 정교한 위조품이 많이 판매되고 있음.
     * Mastodon에서의 교류
          + 실제 Apple 직원과의 교류가 Mastodon에서 이루어졌다는 점이 흥미로움.
          + 우연한 교류가 이루어질 수 있는 중요한 플랫폼으로 자리 잡고 있음.
     * Apple의 직원 ID 카드 제작
          + Apple이 직원이 10명일 때도 직원 ID 카드를 만들었다는 점이 흥미로움.
          + 회사가 커지면서 번호를 추가했을 가능성이 있음.
     * 위조의 명백한 증거
          + 플라스틱 라미네이션 내부의 사진과 카드가 마모된 반면, 라미네이션은 깨끗함.
          + 라미네이션의 컷아웃 부분이 마모되지 않은 것도 의심스러움.
          + 위조자가 회사 배지를 도서관 카드처럼 상상한 것 같음.
"
"https://news.hada.io/topic?id=14890","kafka는 왜 빠를까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             kafka는 왜 빠를까?

     * 카프카가 빠른 일반적 이유
          + 저지연 I/O 사용 (ram)
          + 순차적 I/O 자료구조 사용 (log)
          + zero-copy 적용
          + 수평 확장 시스템
          + 데이터 압축 및 일괄 처리
     * zero-copy란?
          + file을 socket으로 복사할 때 발생하는 부하를 개선한 os 지원 인터페이스
          + linux에서는 sendfile 명령
     * 그래서 kafka는 어떻게 zero-copy로 인해 빨라졌는가?
          + java에서 nio패키지에 transferTo 함수가 추가됨
          + 이를 사용하여 kafka는 메시지를 유저 영역으로 가져오지 않고, 커널 영역에서 네트워크로 바로 전송하여 속도에 많은 이점을 가짐
          + 기존 방식과 transferTo를 사용한 방식의 성능 측정 시 후자가 65% 더 빠른 결과를 보여줌

   본문상 내용중 nio를 살짝 헷갈리신것같은데 nio는 non blocking io가 아니라 new io입니다. block이랑 non block 모두 지원해요

   일부 문서에서는 non-blocking io의 약자라고 되어있어서 잘못 알고 있었네요. 피드백 감사합니다.
"
"https://news.hada.io/topic?id=14824","Google DeepMind Veo - 가장 강력한 생성형 비디오 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Google DeepMind Veo - 가장 강력한 생성형 비디오 모델

     * Veo는 현재까지 가장 강력한 비디오 생성 모델임.
     * 고품질의 1080p 해상도 비디오를 1분 이상 생성할 수 있음.
     * 다양한 영화적 및 시각적 스타일을 지원함.
     * 프롬프트의 뉘앙스와 톤을 정확하게 포착하고, 창의적인 제어를 제공함.
     * 시간 경과 촬영이나 풍경의 항공 촬영과 같은 영화적 효과를 이해함.
     * 비디오 제작을 누구나 접근할 수 있도록 도와줌.
     * 경험 많은 영화 제작자, 창작자, 교육자 등에게 새로운 가능성을 열어줌.
     * VideoFX라는 새로운 실험 도구를 통해 일부 기능을 제공할 예정임.
     * 향후 YouTube Shorts 및 기타 제품에도 Veo의 기능을 적용할 계획임.

  언어와 비전의 더 깊은 이해

     * 텍스트 프롬프트를 정확하게 해석하고 관련 시각적 참조와 결합해야 함.
     * 자연어와 시각적 의미를 고급 수준으로 이해하여 프롬프트를 충실히 따르는 비디오를 생성함.
     * 복잡한 장면 내에서 세부 사항을 정교하게 렌더링함.

  영화 제작을 위한 제어 기능

     * 입력 비디오와 편집 명령을 제공하면, Veo는 이를 적용하여 새로운 편집된 비디오를 생성함.
     * 마스크 편집을 지원하여 비디오의 특정 영역을 변경할 수 있음.
     * 이미지와 텍스트 프롬프트를 함께 제공하면, 해당 스타일과 지침을 따르는 비디오를 생성함.
     * 단일 프롬프트 또는 일련의 프롬프트를 통해 60초 이상의 비디오 클립을 생성하고 확장할 수 있음.

  비디오 프레임 간 일관성 유지

     * 비디오 생성 모델에서 시각적 일관성을 유지하는 것이 도전 과제임.
     * Veo의 최신 잠재 확산 변환기는 이러한 불일치의 발생을 줄여줌.
     * 실제와 같이 캐릭터, 객체 및 스타일을 유지함.

  수년간의 비디오 생성 연구 기반

     * Veo는 Generative Query Network (GQN), DVD-GAN, Imagen-Video, Phenaki, WALT, VideoPoet, Lumiere 등의 연구를 기반으로 함.
     * Transformer 아키텍처와 Gemini를 활용함.
     * 프롬프트를 더 정확하게 이해하고 따르기 위해 각 비디오의 캡션에 더 많은 세부 정보를 추가함.
     * 고품질의 압축된 비디오 표현을 사용하여 성능을 향상시킴.

  책임 있는 설계

     * Veo는 책임감 있게 세상에 도입되는 것이 중요함.
     * Veo가 생성한 비디오는 SynthID를 사용하여 워터마크가 삽입됨.
     * 안전 필터와 메모리 체크 과정을 통해 프라이버시, 저작권 및 편향 위험을 완화함.
     * 주요 창작자 및 영화 제작자와의 협력을 통해 Veo의 미래를 설계함.
     * 그들의 피드백을 통해 생성 비디오 기술을 개선하고 더 넓은 창작 커뮤니티에 혜택을 제공함.

GN⁺의 의견

     * Veo의 혁신성: Veo는 고품질 비디오 생성 모델로, 창작자들에게 새로운 가능성을 열어줌.
     * 교육적 활용: 교육자들이 비디오를 통해 지식을 전달하는 데 큰 도움이 될 수 있음.
     * 책임 있는 기술 도입: Veo는 워터마크와 안전 필터를 통해 책임감 있게 사용될 수 있음.
     * 경쟁 제품: 비슷한 기능을 제공하는 다른 비디오 생성 모델과의 비교가 필요함.
     * 기술 도입 고려사항: Veo를 도입할 때 프라이버시와 저작권 문제를 충분히 고려해야 함.

   역시나 Sora가 없었다면 아주 훌륭한데.. 비교가 되네요. 구글이 어쩌다 이렇게 ㅠ

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 영화 제작 관점에서의 한계
          + 의견: 현재 기술로는 영화 제작에 큰 영향을 미치지 못함. 감독이 구체적인 지시를 내릴 수 있는 기능이 필요함. 현재는 주로 B-roll 콘텐츠 수준임.
     * Google의 SynthID 기술
          + 의견: Google은 AI 생성 비디오에 SynthID 기술을 사용해 워터마크를 추가함. 이 기술은 비디오뿐만 아니라 이미지, 텍스트, 오디오에도 적용됨.
     * Sora와의 비교
          + 의견: Sora가 더 인상적임. Sora는 긴 클립과 빠른 움직임을 잘 처리함. 반면, 현재 데모는 짧은 클립과 느린 움직임만 포함되어 있음. 유일하게 비교할 만한 것은 사이버펑크 비디오인데, 일관성이 부족함.
     * 60초 예제 비디오
          + 의견: 60초 예제 비디오 링크 제공. YouTube 링크
     * 인간 비디오의 부재
          + 의견: 인간 비디오가 없다는 것은 기술이 인간을 생성하는 데 어려움을 겪고 있음을 나타낼 수 있음.
     * 영화 촬영 시간의 변화
          + 의견: 2014년 Wired 기사에 따르면, 영어 영화의 평균 촬영 시간은 1930년대 12초에서 오늘날 2.5초로 감소함. 이 기술이 실제 세계에 더 큰 영향을 미칠 수 있음. Wired 기사 링크
     * 데모 비디오의 인상
          + 의견: 데모 비디오는 흥미로움. 그러나 Sora 데모와 비교하면 인상적이지 않음. Google에서 발표한 것치고는 기대에 못 미침. Sora는 아직 공개되지 않았고, Veo가 더 많은 것을 제공할 수 있을 것임.
     * 일관성 유지 방법
          + 의견: Veo의 최신 기술이 일관성을 유지하는 방법에 대한 궁금증. 프레임 간의 시간적 메모리가 있는지 궁금함.
     * Westworld와의 유사성
          + 의견: 첫 번째 예제 프롬프트의 썸네일이 1973년 Westworld의 Gunslinger 안드로이드와 유사함. 당시 컴퓨터 그래픽스의 초기 사용 사례였음. YouTube 링크
     * Donald Glover 세그먼트의 혼란
          + 의견: Donald Glover 세그먼트가 혼란스러웠음. 짧은 클립 몇 개만 제공되어 단편 영화를 기대했으나 실망스러웠음.
"
"https://news.hada.io/topic?id=14830","Show GN: Pulse - The modern MongoDB-powered scheduling library for Node.js","                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: Pulse - The modern MongoDB-powered scheduling library for Node.js

   기존에 있는 MongoDB 기반 스케쥴링 라이브러리인 Agenda가 더 이상 관리되지 않고 지원되지 않는 기능들이 많아 Pulse를 fork하여 만들었습니다.

   Node.js를 위한 MongoDB 기반 최신 스케줄링 라이브러리
     * 최신 MongoDB 드라이버 지원: Pulse는 최신 MongoDB 드라이버와 완벽하게 호환되어 사용자가 최신 데이터베이스 기능과 개선 사항을 활용할 수 있습니다.
     * 시스템 재시작 후 미완료 작업 재개: 시스템이 재시작되면 Pulse는 진행 중이거나 실행 대기 중이던 미완료 작업을 재개하여 수동 개입 없이 원활한 연속성을 제공합니다.
     * 실패한 작업 재시도: Pulse는 지수형 및 고정 백오프 전략을 사용한 재시도 메커니즘을 제공하여 구성 가능한 횟수만큼 실패한 작업을 효율적으로 재시도하며 시스템을 과부하시키지 않습니다.
     * 지속적인 유지 관리: Pulse는 프로덕션 서비스에서 활발히 사용되는 오픈 소스 프로젝트로, 지속적으로 유지 관리되고 개선되어 사용자에게 신뢰할 수 있는 업데이트와 지원을 제공합니다.
"
"https://news.hada.io/topic?id=14883","인체에서 희귀하고 필수적인 항체를 유도한 시험용 HIV 백신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   인체에서 희귀하고 필수적인 항체를 유도한 시험용 HIV 백신

HIV 백신 후보가 인간에서 중요한 항체를 유도함

     * 발행일: 2024년 5월 17일
     * 업데이트일: 2024년 5월 17일
     * 연락처: Sarah Avery, Director, 919-724-5343, Email

  주요 내용

     * 연구 배경
          + 듀크 인간 백신 연구소(Duke Human Vaccine Institute)에서 개발한 HIV 백신 후보가 2019년 임상 시험에 등록된 소수의 사람들에서 낮은 수준의 광범위 중화 HIV 항체를 유도함.
          + 이 발견은 백신이 다양한 HIV 균주와 싸우기 위해 이러한 항체를 유도할 수 있음을 증명하며, 몇 주 내에 필수적인 면역 반응을 시작할 수 있음을 보여줌.
     * 백신의 목표
          + 백신 후보는 HIV-1 외막의 막 근접 외부 영역(MPER)을 표적으로 함. 이 영역은 바이러스가 변이하더라도 안정적으로 유지됨.
          + 이 안정적인 영역에 대한 항체는 다양한 HIV 균주에 대한 감염을 차단할 수 있음.
     * 연구 결과
          + 연구팀은 20명의 건강한 HIV 음성 사람들을 대상으로 한 1상 임상 시험 데이터를 분석함.
          + 15명의 참가자는 계획된 4회 접종 중 2회를 받았고, 5명은 3회를 받음.
          + 두 번의 면역 접종 후, 백신은 95%의 혈청 반응률과 100%의 혈액 CD4+ T 세포 반응률을 보임.
          + 대부분의 혈청 반응은 백신이 표적으로 하는 바이러스 부분에 매핑됨.
          + 중요한 점은 두 번의 접종 후 광범위 중화 항체가 유도됨.
     * 임상 시험 중단
          + 한 참가자가 생명에 지장이 없는 알레르기 반응을 경험하여 임상 시험이 중단됨. 이는 COVID-19 백신 접종 시 보고된 드문 사례와 유사함.
          + 연구팀은 이 사건의 원인을 조사했으며, 이는 첨가제에서 비롯된 것으로 보임.
     * 연구의 중요성
          + 백신을 사용하여 필요한 사건들을 짧은 시간 내에 재현하는 것이 항상 도전 과제였음.
          + 이 백신 분자로 인해 몇 주 내에 중화 항체가 실제로 나타나는 것을 보는 것은 매우 흥미로웠음.
          + 중요한 면역 세포들이 계속해서 변이를 획득할 수 있는 상태로 남아 있어, 변화하는 바이러스와 함께 진화할 수 있었음.
     * 향후 연구 방향
          + 연구자들은 더 강력한 반응을 만들고, 바이러스 외피의 더 많은 영역을 표적으로 삼기 위해 더 많은 작업이 필요함을 언급함.
          + 성공적인 HIV 백신은 아마도 바이러스의 다양한 영역을 목표로 하는 최소한 세 가지 구성 요소를 가질 것임.

  연구팀 및 지원

     * 연구팀
          + Barton F. Haynes, M.D., Wilton Williams, Ph.D., S. Munir Alam, Gilad Ofek, Nathaniel Erdmann, David Montefiori, Michael S. Seaman 등 다수의 연구자들이 참여함.
     * 지원
          + 연구는 국립 알레르기 및 감염병 연구소(National Institute of Allergy and Infectious Diseases)와 빌 & 멜린다 게이츠 재단(Bill & Melinda Gates Foundation)의 지원을 받음.

GN⁺의 의견

     * HIV 백신 개발의 중요성
          + HIV는 여전히 전 세계적으로 큰 문제임. 효과적인 백신 개발은 공중 보건에 큰 영향을 미칠 수 있음.
     * 임상 시험의 도전 과제
          + 임상 시험 중 발생하는 예기치 않은 부작용은 항상 도전 과제임. 이를 해결하기 위한 추가 연구가 필요함.
     * 백신의 다중 표적 접근법
          + HIV 바이러스는 매우 변이가 심하므로, 다양한 표적을 동시에 공격하는 백신이 필요함. 이는 백신 개발의 복잡성을 증가시킴.
     * 기술적 진보
          + 이 연구는 백신 기술의 진보를 보여줌. 특히, 면역 반응을 빠르게 유도할 수 있는 능력은 다른 백신 개발에도 응용될 수 있음.
     * 다른 유사한 연구
          + 다른 연구 기관에서도 유사한 HIV 백신 개발을 진행 중임. 예를 들어, NIH와 같은 기관에서도 활발히 연구 중임.

        Hacker News 의견

    해커뉴스 댓글 모음

     * Animation of how HIV infects a single T-cell
          + HIV가 단일 T-세포를 감염시키는 애니메이션
     * Actual paper is here:
          + 실제 논문 링크
     * God knows why a press release wouldn't provide a direct link
          + 보도자료에 직접 링크가 없는 이유를 모르겠음.
     * Other features of the vaccine were also promising, most notably how the crucial immune cells remained in a state of development that allowed them to continue acquiring mutations, so they could evolve along with the ever-changing virus.
          + 백신의 다른 특징들도 유망함. 특히 중요한 면역 세포들이 계속 변이를 획득할 수 있는 상태로 남아 있어, 변화하는 바이러스와 함께 진화할 수 있음.
     * As I understand it, somatic hypermutation is a process that only occurs within germinal centers.
          + 내가 이해하기로는 체세포 과변이는 배중심 내에서만 발생하는 과정임.
     * Is that what is happening here?
          + 여기서 그런 일이 일어나고 있는 것인가?
     * Here is the Cell article:
          + Cell 저널의 기사 링크
     * Very promising outcome. But I wonder they/why we are just learning about this now when it seems that the inoculations occurred in 2017?
          + 매우 유망한 결과임. 하지만 접종이 2017년에 이루어진 것 같은데 왜 이제야 이 사실을 알게 되었는지 궁금함.
     * Perhaps this could be a beneficial prophylaxis. And having another treatment that uses CRISPR to remove the provirus is also an essential to have a durable cure for patients already infected.
          + 이것이 유익한 예방책이 될 수 있을 것임. 또한 CRISPR를 사용하여 프로바이러스를 제거하는 또 다른 치료법을 갖는 것도 이미 감염된 환자들에게 지속 가능한 치료법을 제공하는 데 필수적임.
     * I'm not an expert on this stuff at all, so assume I'm stupid and ignorant when I write the following. As I understand it, HIV has actually been useful to develop a delivery mechanism for some therapies that have excellent potential. Would this kind of vaccine cause such therapies to become ineffective?
          + 나는 이 분야의 전문가가 아니므로 내가 쓰는 다음 내용을 무지하다고 생각해주길 바람. 내가 이해하기로는 HIV가 실제로 잠재력이 뛰어난 일부 치료법의 전달 메커니즘을 개발하는 데 유용했음. 이런 종류의 백신이 그러한 치료법을 무효화할 수 있을까?
     * I am not an immunologist... I don't understand biology very well. How significant is this? Is it even trustworthy?
          + 나는 면역학자가 아님... 생물학을 잘 이해하지 못함. 이것이 얼마나 중요한가? 신뢰할 만한가?
     * Does this university press release name-check Cell but not link to the article? A bit frustrating.
          + 이 대학 보도자료가 Cell을 언급하면서도 기사 링크는 제공하지 않는가? 약간 답답함.
     * I wonder about the potential for varied immune responses across different populations.
          + 다양한 인구 집단 간에 다양한 면역 반응의 가능성에 대해 궁금함.
"
"https://news.hada.io/topic?id=14848","OpenAI의 ChatGPT MacOS App 일부 사용자 대상 공개 및 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              OpenAI의 ChatGPT MacOS App 일부 사용자 대상 공개 및 출시

   OpenAI의 MacOS 앱에는 사용자가 데이터를 보다 효율적으로 관리하고 앱의 다양한 기능을 활용할 수 있는 여러 옵션이 포함되어 있습니다. 여기에는 데이터 보존, 모델 훈련 설정, 스크린샷 도구, 파일 및 사진 업로드, 런처 사용법, 임시 채팅 및 플랫폼 간 사용 가능 여부 등이 포함됩니다.
    1. 데이터 보존 및 모델 훈련 설정: 사용자는 MacOS 앱에서 데이터가 어떻게 보존되고 삭제되는지 확인할 수 있으며, 모델 훈련에 사용되는 데이터의 활용을 비활성화할 수 있는 옵션이 제공됩니다. 이는 개인 정보 보호 포털을 통해 설정할 수 있습니다.
    2. 스크린샷 및 파일 업로드 도구: MacOS 앱은 사용자가 앱 내에서 직접 스크린샷을 찍거나 파일과 사진을 업로드할 수 있는 기능을 제공합니다. 이를 통해 사용자는 대화 중 필요한 자료를 쉽게 공유하고 토론할 수 있습니다.
    3. 런처 접근 방법: 사용자는 단축키를 사용하여 쉽게 런처를 활성화하고, 질문을 던지거나 파일을 업로드할 수 있습니다. 이 런처는 MacOS 앱의 편리성을 크게 향상시킵니다.
    4. 임시 채팅 기능: 임시 채팅 기능을 사용하면 이전 대화의 내용을 기억하지 않고 새로운 대화를 시작할 수 있습니다. 이는 사용자가 보다 개인적이고 독립적인 대화 경험을 원할 때 유용합니다.
    5. 플랫폼 지원: 현재 MacOS 앱은 iOS 및 Android와 함께 사용할 수 있으며, Windows 버전은 개발 중에 있어 향후 사용자가 더 넓은 범위의 디바이스에서 액세스할 수 있게 될 예정입니다.

   ""You do not have access..."" 팝업이 뜨는 분은 표시되기 전에 Command + Q 키를 눌러서 애플리케이션 종료 후 다시 어플리케이션 실행하면 됩니다

   인텔에서는 지원을 안해주네요...

   brew install --cask chatgpt 로 하셔도 설치 됩니다만,
   You do not have access to the desktop app yet 이라고 나오네요 ㅋ

   현재 돌아다니는 설치 파일 링크입니다.
   https://persistent.oaistatic.com/sidekick/public/…

   OAISTATIC 도메인은 OpenAI 가 소유중인 도메인입니다.

   따로 신청하는게 아니네요. 당장 써보고 싶은데ㅠ

   기존 웹 서비스를 PWA 방식으로 Mac에 설치해 사용하고 있었는데, 이 소식은 정말 반갑네요! ⌥+ Space를 사용해 Spotlight처럼 빠르게 실행이 가능하며, 기기 카메라를 통한 촬영이나 스크린샷을 바로 업로드할 수 있는 접근성도 마음에 듭니다.

   OpenAI에서 GPT-4o 모델을 효과적으로 활용할 수 있도록 사용자 환경이나 디바이스를 미리 준비하는 것 같아요.

   다만, UI의 확대 및 축소 기능이 없어 불편한 점이 있습니다. 이 부분이 점차 개선되기를 바랍니다.
"
"https://news.hada.io/topic?id=14794","뇌의 Quantum Effects 사용, 새로운 연구 결과 밝혀 [동영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               뇌의 Quantum Effects 사용, 새로운 연구 결과 밝혀 [동영상]

     * 로저 펜로즈가 원래 인간의 뇌가 미세소관에서 양자 효과를 사용하며 이것이 의식의 기원이라는 생각을 내놓았을 때, 많은 사람들은 그 생각이 약간 미친 것이라고 생각함
     * 새로운 연구에 따르면, 펜로즈는 미세소관에 대해서는 실제로 맞았다는 것으로 밝혀짐
     * 이 연구에 대해 살펴보자는 내용의 글

GN⁺의 의견

     * 의식의 기원에 대한 연구는 철학, 심리학, 신경과학 등 여러 분야에서 오랫동안 논의되어 온 주제임. 만약 양자역학적 효과가 의식 발현에 중요한 역할을 한다는 것이 입증된다면 이는 획기적인 발견이 될 것임
     * 다만 아직까지 의식의 정의조차 명확하지 않은 상황이라 의식의 기원을 규명하는 것은 쉽지 않은 도전 과제임. 양자역학을 도입한다고 해서 곧바로 의식의 비밀이 풀리지는 않을 것으로 보임
     * 미세소관이 신경세포 내에서 중요한 역할을 하는 것은 사실이나, 양자역학적 효과까지 개입한다는 증거는 아직 불충분함. 추가적인 실험과 연구가 뒷받침되어야 할 것으로 보임
     * 만약 인간의 의식에 양자역학이 개입한다는 것이 사실로 밝혀진다면, 현재 인공지능 기술로는 인간 수준의 의식을 구현하는 것이 불가능할 수도 있음. 양자컴퓨터와 같은 새로운 패러다임의 컴퓨팅 기술 개발이 필요할 것으로 예상됨

        Hacker News 의견

   요약:
     * 이 논문은 주로 이론적 모델링에 초점을 맞추고 있으며, 실제 실험 측정은 3개에 불과함. 마이크로튜뷸의 형광 양자 수율(QY) 증가가 시뮬레이션 아이디어로 설명될 수 있다고 주장하나, 이는 QY에 영향을 미칠 수 있는 다른 지루한 현상들로도 설명 가능함.
     * Penrose와 Hameroff가 둘 다 미쳤지만 둘 다 멍청하지는 않다는 말이 재미있음.
     * 뇌가 물리적 객체이므로 모든 양자 효과의 영향을 받는다면, 오히려 양자 효과를 사용하지 않는 것이 새로울 것임. 양자 효과를 사용한다는 것은 당연해 보임.
     * Penrose는 인간의 추론 능력이 계산 가능하지 않으므로 마음이 알고리즘으로 환원될 수 없다고 주장하며, 마음이 하는 일이 순수한 계산 기계는 아니더라도 물리적으로 어떻게 기반을 둘 수 있는지 제안함.
     * 진화가 기능을 위해 양자역학을 이용했다는 것이 놀라운 일일까? 진화는 다른 모든 것을 이용했음. 후각에서 양자역학이 역할을 한다는 이론도 있음.
     * 수십억 개의 뉴런이 하나의 일관된 경험을 만들어내는데, 의식이 여기에 관여한다면 꽤 우아할 것임. 기본적으로 의식적인 것은 양자적이고, 무의식적인 것은 고전적임.
     * 결정론과 자유의지에 대해 가장 독단적인 견해를 가진 사람들에 주목하라. 흥미롭게도 가장 독단적인 사람들은 대부분 결정론자임. ""모른다""고 말해야 하는 철학보다 ""과학적""이기 때문일 것임.
     * 자유의지가 없다고 확신하는 사람들도 있지만, 자유의지가 느껴지고 행동에 책임이 있는 것처럼 느껴지며 의식이 있는 것처럼 느껴짐. 모든 선택이 자유롭게 이루어지는 것은 아니지만, 중요한 일부는 자유롭게 이루어지는 것 같음.
     * LLM을 생각하게 됨. 우리가 우연히 이전에 몰랐던 현상, 즉 의식의 출현과 관련된 일종의 ""사건 지평선""을 발견했기 때문에 LLM이 잘 작동하는 것일까?
     * 생물학자들의 창의성 부족이 늘 놀랍다. 10년에 한 번씩 생물 시스템에 대한 견고한 교리가 물리학자, 컴퓨터 과학자, 수학자들이 먼저 제안한 후 조롱을 받다가 잘못된 것으로 판명됨.
     * 신경과학 자격이 부족하고 종종 자신만만하게 부정확한 Hossenfelder의 블로그 스팸 링크 대신 논문이나 더 나은 기사로 연결되어야 함.
"
"https://news.hada.io/topic?id=14766","KeePassXC 데비안 관리자, 모든 네트워크 기능 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    KeePassXC 데비안 관리자, 모든 네트워크 기능 제거

Debian의 KeePassXC 패키지에서 기능 제거 논란

     * Debian의 KeePassXC 패키지 관리자가 일방적으로 패키지에서 모든 기능을 제거하기로 결정함.
     * Debian sid에서 기본 keepassxc 패키지는 네트워킹, SSH 에이전트, 브라우저 플러그인, fdo 시크릿 스토리지 등의 기능이 제거되고 최소 기능만 포함하게 됨.
     * 해당 기능이 필요하다면 keepassxc-full 패키지로 전환해야 함.

기능 제거 이유에 대한 논란

     * Debian 버그 리포트에서는 보안 문제를 이유로 들고 있음.
     * 하지만 KeePassXC 팀에서는 네트워킹뿐 아니라 Yubikey 지원, 자동 입력, 브라우저 연동 등 거의 모든 기능을 제거한 것은 과도하다는 입장.
     * 기능 제거가 오히려 취약점을 줄이는 것보다 사용자가 필요로 하는 기능을 없앤다는 의견도 있음.

Debian의 입장과 반응

     * Debian에서는 미사용 코드와 불필요한 기능을 제거하는 것이 liblzma 타협 사건 이후 보안을 위해 최선이라는 입장.
     * 하지만 KeePassXC 팀과 사전 협의 없이 일방적으로 결정한 것에 대해 비판받음.
     * 사용자 혼란을 최소화하기 위해 keepassxc를 keepassxc-full로 전환하는 transitional 패키지를 제공하기로 함.

GN⁺의 의견

     * 보안을 위해 불필요한 기능을 제거하는 것 자체는 나쁘지 않으나, 패키지 이름을 바꾸지 않고 기존 사용자들이 사용하던 기능을 갑자기 제거하는 것은 좋지 않은 방식임.
     * Debian과 같은 배포판에서 패키지 정책을 바꿀 때는 가급적 업스트림 개발자들과 협의를 거치고, 사용자 입장에서 겪을 혼란을 최소화하려 노력해야 함.
     * 완전한 기능을 포함하는 패키지와 최소한의 패키지를 나눠 제공하되, 이름을 잘 구분하고 사용자가 선택할 수 있게 하는 것이 바람직함.
     * 다른 암호 관리자를 찾아보는 것도 방법이지만, KeePassXC에 더 적극적으로 기여하고 협력해서 문제를 개선하려 노력하는 것도 중요함.
     * 자유 소프트웨어라고 해서 패키지 관리자가 마음대로 할 수 있다기보다, 사용자와 개발자 커뮤니티의 의견을 존중하고 투명하게 소통하려 노력해야 함.

        Hacker News 의견

해커뉴스 댓글 요약

  1. 업스트림 프로젝트의 기능을 제거하고 동일한 이름으로 배포하는 것에 대한 우려

     * 업스트림 프로젝트에서 구현한 기능을 제거하고 동일한 이름으로 배포하는 것은 문제의 소지가 있음
     * 이런 방향으로 가려면 포크해서 다른 이름으로 배포해야 함
     * 과거 Debian의 Chromium 패키지 관리자가 임의로 확장 기능 설치를 비활성화했던 사례 언급

  2. 보안 측면에서 네트워크 기능 제거가 합리적이라는 의견

     * 패스워드 관리자에서 네트워크 기능과 브라우저 통합은 잠재적 취약점이 될 수 있음
     * 네트워크 관련 기능 없이 신뢰할 수 있는 데이터베이스만 사용하면 취약점이 발견되더라도 악용이 불가능함
     * 네트워크 기능이 포함된 완전한 버전의 패키지도 Debian에 존재하므로 원하는 사용자는 keepassxc-full을 설치할 수 있음
     * 다만 업스트림을 ""형편없다""고 부르는 것은 생산적이지 않으며, keepassxc-lite와 keepassxc-full이 더 적절한 패키지명일 수 있음

  3. ""full""과 ""minimal"" 버전을 모두 패키징하는 것이 올바른 선택이라는 의견 제시

     * 두 버전 간에 Conflicts 관계를 정의하고 Provides와 Replaces 태그를 활용하여 사용자가 선택할 수 있게 해야 함
     * 이것이 명백한 선택이 아닌 이유에 대한 의문 제기

  4. Arch Linux에서 사용자 동의 없이 passim 패키지에 의존하게 하는 문제 제기

     * fwupd 패키지가 사용자 동의 없이 passim에 의존하도록 설정되어 있음
     * passim은 0.0.0.0:27500에서 웹 서버를 실행하며 취약점이 많은 GnuTLS를 사용함
     * 이러한 설정은 악용될 가능성이 있어 우려됨

  5. 최소한의 놀라움 원칙에 따라 문서화된 위험이 없는 한 핵심 기능을 비활성화해서는 안 된다는 의견

     * KeePassXC의 기능들은 사용자의 명시적 개입 없이는 취약점의 원인이 되지 않음
     * 브라우저 통합 기능은 클립보드 접근보다 훨씬 안전하며, 프로젝트의 비전과도 맞지 않음
     * 이 변경으로 인해 혜택을 받을 사용자는 극소수인 반면, 브라우저 통합 기능을 사용하는 사람들에게는 심각한 불편을 초래함

  6. 기존 사용자를 깨뜨리지 않고도 구분이 가능하므로 Debian 패키지 관리자의 잘못된 결정이라는 주장

     * 네트워킹 기능 없는 KeePassXC를 제공하는 것은 좋지만, 브라우저 통합을 틈새 기능으로 보는 것은 동떨어진 생각임
     * Debian의 KeePassXC 사용자 중 절반 이상이 이번 결정으로 인해 깜짝 놀랄 것임
     * 궁극적으로 패키지 관리자의 결정이지만 좋은 결정은 아님

  7. KeePassXC 관리자의 의견 인용

     * 새로운 패키징 방식으로 인해 사람들의 작업 흐름이 망가졌다는 보고를 받음
     * 사용자가 Yubikey 기능이 제거되어 데이터베이스에 접근할 수 없게 되었다는 사례도 있음
     * 가장 중요한 비밀에 대한 접근을 잃은 사람들은 당황스러운 순간에 비이성적인 행동을 할 수 있음

  8. 업스트림 프로젝트의 의도와 다르게 패키지를 변경할 경우 다른 이름으로 배포해야 한다는 의견

     * 다운스트림 관리자가 패키지를 변경할 경우 다른 이름으로 배포하고 수정된 버전으로 인한 모든 버그 리포트를 처리해야 함

  9. 최신 논의는 GitHub 이슈에서 확인할 수 있다는 안내

  10. 제목이 잘못되었다는 지적

     * 원래 게시물은 네트워킹 기능뿐만 아니라 모든 기능이 제거되었다고 언급했으며, 이는 사실임
     * 오프라인 기능을 포함한 모든 선택적 기능이 빌드 중에 끄기로 설정되었음
"
"https://news.hada.io/topic?id=14783","GPU의 폭발적인 성능 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GPU의 폭발적인 성능 향상

H100 GPU의 특징

     * 80GB HBM3 메모리와 3TB/s 대역폭 제공 (실제로는 조금 더 낮음)
     * 50MB L2 캐시와 12TB/s 대역폭 제공. GPU에 두 개의 25MB 섹션으로 분할되어 크로스바로 연결됨 (크로스바는 성능 저하 요인)
     * 132개의 Streaming Multiprocessor(SM)로 구성되며, 각 SM은 아래 구성을 가짐:
          + 256KB L1 캐시 내에 최대 227KB의 공유 메모리 제공 (합쳐서 약 33TB/s 대역폭)
          + 비동기 주소 생성 및 메모리 fetching이 가능한 Tensor Memory Accelerator(TMA) 제공. 온칩 메모리 네트워크 지원 등의 기능도 제공하지만 이번 포스트에서는 다루지 않음
          + 4개의 쿼드런트로 나뉘며, 각 쿼드런트는 warp scheduler, 512개 vector register(각각 32개의 4-byte 워드 포함), matrix multiply용 tensor core, sum/multiply 등의 병렬 연산을 지원하는 내장 instruction으로 구성됨

H100 GPU 성능 최적화 팁

     * Tensor Core를 최대한 활용하는 것이 중요. H100은 989 TFLOPs의 FP16 행렬곱 연산 성능을 가지므로, Tensor Core 활용도에 따라 전체 GPU 활용률이 크게 좌우됨
     * 단, Tensor Core를 최대한 활용하기 위해서는 아래 사항들을 고려해야 함:
          + Warp Group Matrix Multiply Accumulate(WGMMA) 명령어 활용이 필수적이지만 사용이 까다로움
          + Shared Memory가 생각보다 빠르지 않고, 사용시 세심한 주의가 필요함
          + 주소 생성이 비용이 크므로 Tensor Memory Accelerator(TMA) 등을 활용해 최적화해야 함
          + Occupancy를 높이는 것이 여전히 도움이 되며, register가 주요 리소스임
     * 이런 특징들은 H100 뿐만 아니라 다른 GPU에도 어느정도 적용되지만, 특히 H100에서 Tensor Core 활용이 중요하고 까다로운 편

ThunderKittens : H100에 최적화된 CUDA 임베디드 DSL

     * NVIDIA H100 등 최신 GPU의 성능을 최대한 끌어내기 위해 개발된 CUDA 기반 임베디드 DSL
     * 아래 4개의 타일 기반 템플릿 타입을 제공:
          + Register Tile (레지스터에 저장된 2D 텐서)
          + Register Vector (레지스터에 저장된 1D 텐서)
          + Shared Tile (Shared Memory에 저장된 2D 텐서)
          + Shared Vector (Shared Memory에 저장된 1D 텐서)
     * 또한 타일 조작을 위한 다양한 연산자 (exp, mul, sum 등)를 warp 또는 warp 그룹 레벨에서 제공
     * 기존 Flash Attention, Flash Attention 2 커널을 ThunderKittens으로 구현하니 코드가 크게 간결해지고, H100에서 최대 30% 성능 향상
     * Based Linear Attention 커널도 ThunderKittens으로 구현하여 215 TFLOPs 성능 달성 (알고리즘 특성 상 recompute 포함하면 300 TFLOPs 이상)

철학적 관점에서의 고찰

     * ThunderKittens이 잘 작동하는 이유는 모든 것을 다 지원하려 하지 않고, 단순하면서도 GPU 아키텍처에 잘 들어맞는 타일 기반 추상화를 제공하기 때문
     * 전통적인 32-bit 워드 대신 1024-bit 벡터 레지스터를 사용하는 것도 발전이지만, 16x16 타일을 레지스터의 단위로 보는 패러다임의 전환이 필요
     * AI 워크로드가 결국 행렬곱, reduction, reshape 위주라는 점에서 타일 기반 접근이 타당하며, 하드웨어 관점에서도 systolic array 외에 작은 행렬곱을 지원하는 방향으로 진화할 것
     * 더 나아가 하드웨어에 최적화된 형태로 AI 알고리즘을 설계하는 방식으로 사고를 전환할 필요가 있음. 예를 들어 RNN의 상태 크기를 SM에 들어갈 만큼으로 제한하고, 연산 밀도도 하드웨어가 요구하는 수준으로 맞추는 식의 접근이 필요

GN⁺의 의견

     * ThunderKittens은 CUDA에 익숙한 개발자들에게는 매력적인 선택지가 될 수 있음. 기존 커널 코드를 크게 건드리지 않고도 쉽게 성능 향상을 누릴 수 있기 때문
     * 다만 초보자에게는 여전히 진입장벽이 높을 수 있음. 앞으로 더 다양한 예제 코드와 학습 자료가 뒷받침되어야 할 듯
     * H100 뿐만 아니라 AMD 등 다른 GPU에도 ThunderKittens 지원을 확대한다는 계획이 흥미로움. 벤더 종속성을 낮추는데 기여할 수 있을 것으로 보임
     * 궁극적으로는 AI 모델/알고리즘 자체를 하드웨어에 최적화된 형태로 설계하는 것이 매우 중요한 포인트임. 이를 위해서는 하드웨어 특성에 대한 깊은 이해가 선행되어야 하는데, ThunderKittens은 개발자들이 그런 인사이트를 얻는데 도움이 될 수 있을 것
     * Hazy Research의 지속적인 연구개발과 오픈소스 기여가 CUDA 생태계 활성화에 큰 도움이 될 것으로 기대됨. 다만 장기적으로는 보다 추상화 레벨이 높은 프레임워크의 등장도 필요해 보임

        Hacker News 의견

     * AI 하드웨어의 요구 사항이 점점 명확해지고 있음. GPU는 원래 다른 목적으로 설계되었지만, 좋은 행렬 곱셈 하드웨어를 가지고 있어 AI에 사용되고 있음. ""AI GPU""는 실제 GPU의 일부 기능을 제외할 수 있으며, 더 짧은 숫자(16비트, 8비트, 2비트, 1비트 부동 소수점)로 향하는 추세가 있음. 이 논문은 16x16 타일을 좋아하는 하드웨어가 많은 이점이 있음을 시사함.
     * AI 전용 보조 프로세서(NPU)가 필요함. 특히 개발자, 전문가, 게이머 등을 위한 프로슈머급 데스크톱 시스템에서 필요함. GPU는 기업에서는 작동하지만 개인 컴퓨팅 측면에서 AI에 사용하기에는 불편함. 특히 VRAM 제한과 Vulkan 이외의 표준 개방형 API 부재가 문제임.
     * AI 연구를 발전시키려면 신경과학, 심리학을 더 잘 연구해야 함. 또한 신경망의 그래프 토폴로지와 관련된 것들도 관련이 있을 수 있음.
     * CUTLASS를 사용자 친화적으로 만든 것인가?
     * ThunderKittens 마스코트는 고양이/소니 아이보 분위기가 있음. AI로 잘 생성된 것으로 보임.
     * 유니버설 베이직 컴퓨트(UBC)가 유니버설 베이직 인컴의 대체재로 고려된다면, 그것은 매우 디스토피아적인 미래가 될 것임. 엔비디아 같은 한 회사가 모든 컴퓨팅을 만든다고 상상해보라.
"
"https://news.hada.io/topic?id=14868","이집트 피라미드, 오래전에 사라진 나일강 지류 위에 건설된 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  이집트 피라미드, 오래전에 사라진 나일강 지류 위에 건설된 가능성

고대 나일강 지류 발견: 피라미드 건설에 사용된 수로

  피라미드 옆을 흐르던 오래된 나일강 지류 발견

     * 지질 조사 결과, 고대 이집트 건축가들이 자재를 운반하는 데 사용했을 가능성이 있는 주요 수로의 흔적이 발견됨.
     * 다슈르 네크로폴리스의 가장 큰 피라미드인 레드 피라미드는 4,500년 이상 전에 건설됨.
     * 이집트 기자 피라미드 단지 근처 지하에는 고대 나일강 지류의 흔적이 있음.
     * 이 지역의 주요 피라미드들은 현재 나일강에서 수십 킬로미터 떨어져 있지만, 고대에는 나일강이 더 가까웠을 가능성이 있음.
     * 위성 이미지와 지질 데이터는 나일강의 지류가 수천 년 전 이 지역의 주요 유적지 근처를 흐르고 있었음을 확인함.

  방황하는 수로

     * 수천 년 동안 나일강과 그 범람원은 이집트 주민들에게 식량, 농업 및 물을 제공해 왔음.
     * 나일강은 이동성이 강해, 과거에는 인구가 강의 이동에 따라 이주해야 했음.
     * 최근 몇 백 년 동안 나일강은 동쪽으로 몇 킬로미터 이동했을 가능성이 있음.
     * 고대 이집트의 중요한 고고학적 유적지들은 건설 당시와 현재의 나일강과의 관계가 다를 수 있음.
     * 연구팀은 고대 수로의 흔적을 찾기 위해 나일강 서쪽 몇 킬로미터 떨어진 곳에서 말라버린 강 채널을 발견함.
     * 이 채널은 약 60킬로미터를 농업 지역을 통해 흐르며 현대 나일강과 유사한 깊이와 너비를 가짐.

  강변 유적지

     * 연구팀은 채널이 고대 강바닥의 일부일 가능성을 조사하기 위해 채널에서 퇴적물 코어 샘플을 수집함.
     * 샘플 데이터와 위성 이미지를 결합하여 지류의 위치를 지도화함.
     * 이 지류는 기원전 2686년에서 1649년 사이에 지어진 30개 이상의 고대 및 중왕국 피라미드 옆을 흐르고 있었음.
     * 이 발견은 고대 이집트인들이 피라미드 건설 자재를 운반하는 데 배를 사용했음을 시사함.

  GN⁺의 의견

     * 이 발견은 고대 이집트의 건축 기술과 물류에 대한 새로운 통찰을 제공함.
     * 고대 수로의 위치를 알게 되면 고고학자들이 더 많은 고대 이집트 정착지를 발견하는 데 도움이 될 수 있음.
     * 이 연구는 고대 문명의 실용적이고 효율적인 자원 활용 방식을 보여줌.
     * 이 기사는 고고학과 지질학의 융합 연구가 어떻게 역사적 미스터리를 풀 수 있는지 보여줌.
     * 비슷한 연구로는 아마존에서 레이저를 이용해 고대 피라미드와 운하를 발견한 사례가 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 강 근처에 피라미드가 있는 것이 합리적임
       강이 있으면 자재 운반이 훨씬 쉬워지기 때문에 합리적임. 하지만 왜 이전에 아무도 이 점을 주목하지 않았는지 궁금함.
     * 피라미드 건설의 엄청난 작업량
       피라미드 건설은 매우 엄청난 작업임을 강조.
     * 더 가벼운 접근성의 기사
       관련된 사람들의 사진이 포함된 더 가벼운 접근성의 기사를 발견함.
       National Geographic 기사 링크
     * 역사 속에서 사라진 강들
       현재도 강이 사라지는 것을 실시간으로 볼 수 있는데, 역사 속에서 얼마나 많은 강과 지류가 사라졌을지 궁금함.
     * 인공적으로 만든 지류 가능성
       건축 자재를 운반하기 위해 인공적으로 만든 지류일 수도 있으며, 수위 조절을 위한 인공 댐도 있었을 가능성 있음.
     * 항구 위치에 대한 구조물 존재 여부
       제안된 항구 위치에 실제로 항구 사원이 있었는지, 단순한 사원이었는지 구조물이 남아있을지 궁금함. 홍수 평야 내에서 강이 얼마나 이동하는지도 궁금함.
     * 물로 피라미드를 건설하는 이론
       물을 이용해 피라미드를 건설하는 이론을 지지함.
       YouTube 영상 링크
     * 나트론 이론
       최근 나트론 이론에 대해 조사 중임. 큰 화강암 블록을 깎아내고 이동시키는 대신, 화학적으로 돌을 형성하는 방법을 사용함.
     * 어릴 때부터 이집트 역사에 매료됨
       어릴 때부터 이집트 역사에 매료되어 왔음.
     * 더 가벼운 Nature News 기사
       관련된 더 가벼운 Nature News 기사도 있음.
       Nature 기사 링크
"
"https://news.hada.io/topic?id=14876","Toon3D: 새로운 시각에서 보는 만화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Toon3D: 새로운 시각에서 보는 만화

     * 인간은 3D 일관성이 없는 이미지에서도 3D 세계를 인식할 수 있음
     * Toon3D는 piecewise-rigid deformable 최적화를 통해 카메라 포즈와 고밀도 지오메트리를 복구 가능
     * 손그림 장면은 3D 일관성이 없지만, Toon3D를 사용해 복구하고, 이전에 본 적 없는 새로운 뷰를 보간할 수 있음

Abstract

     * Toon3D 제안
          + 비기하학적 일관성이 없는 장면의 기본 3D 구조를 복구함
          + 만화와 애니메이션의 손그림 이미지에 초점을 맞춤
          + 많은 만화는 3D 렌더링 엔진 없이 아티스트가 직접 그린 것임
          + 손그림 이미지는 세계를 정성적으로 충실히 표현하지만, 여러 관점을 3D 일관성 있게 그리기는 어려움
          + 사람들은 일관성이 없는 입력에서도 3D 장면을 쉽게 인식할 수 있음
          + 2D 그림의 불일치를 수정하여 새로 변형된 그림들이 서로 일관되도록 함
          + 사용자 친화적인 주석 도구, 카메라 포즈 추정, 이미지 변형을 통해 밀집 구조를 복구함
          + 이미지를 원근 카메라 모델에 맞게 변형하여 새로운 뷰 생성 재구성 방법에 플러그인 가능

만화 재구성

     * 카메라 포즈와 정렬된 포인트 클라우드를 먼저 복구함
     * 밀집 포인트 클라우드에서 가우시안을 초기화하고 복구된 카메라로 가우시안 스플래팅을 최적화함
     * 깊이 정규화가 있으며 Nerfstudio를 기반으로 구축됨
     * 장면의 플라이 스루 렌더링을 보여줌

방법

     * 각 이미지의 깊이를 Marigold로 예측하고 SAM으로 후보 일시적 마스크를 얻음
     * Toon3D 라벨러로 이미지를 라벨링하여 대응 관계를 얻고 일시적 영역을 표시함
     * 카메라 포즈를 최적화하고 이미지를 왜곡하여 보정된 원근 카메라를 얻음
     * 정렬된 밀집 포인트 클라우드로 가우시안을 초기화하고 정제를 실행함

Toon3D 라벨러

     * 방법의 두 가지 주요 단계를 보여줌
          + 희소 정렬 비디오: 대략적인 카메라 매개변수 추정
          + 밀집 정렬 비디오: 다양한 레이어(카메라, 희소 대응, 왜곡 메쉬 등)를 사용하여 3D에서 정렬하는 방법을 보여줌

Rick and Morty의 집 내부 탐험

     * 벽과 천장을 라벨링하여 방을 연결하여 Rick and Morty 집 내부를 재구성함
     * 첫 번째 비디오: 포인트 클라우드 및 카메라와 사용자 정의 라벨링 인터페이스를 보여줌
     * 두 번째 비디오: 슬라이더를 스크럽하여 집 내부를 둘러볼 수 있음

포인트 클라우드와 카메라

     * Toon3D 데이터셋의 12개 만화 장면에 대한 포인트 클라우드와 복구된 카메라를 보여줌
     * 아이콘을 클릭하여 장면을 탐험할 수 있음

희소 뷰 재구성

     * 적은 이미지와 큰 시점 변화로 장면을 재구성할 수 있음
     * COLMAP이 실패할 수 있는 곳에서 Toon3D 라벨러로 인간이 라벨링한 대응 관계를 얻어 개입할 수 있음
     * Airbnb 목록의 두 방(""거실""과 ""침실 2"")에 대한 플라이 스루 렌더링을 보여줌

불일치 시각화

     * 만화는 손으로 그려졌기 때문에 이미지를 3D 일관성 있게 왜곡해야 함
     * 첫 번째 항목: 정렬 최적화 중 왜곡이 발생하는 비디오
     * 다음 두 항목: 원본 및 왜곡된 그림과 두 그림 간의 겹침을 보여주는 이미지
     * 흐릿한 영역은 많은 왜곡이 발생한 곳을 나타냄

그림 재구성

     * Toon3D를 사용하여 손으로 그린 그림도 재구성할 수 있음
     * 각 이미지의 깊이를 예측한 다음 포인트 클라우드를 정렬하고 왜곡함
     * 마지막으로 가우시안 정제를 사용하여 비디오를 생성함

GN⁺의 의견

     * Toon3D는 만화와 애니메이션의 손그림 이미지를 3D로 재구성하는 혁신적인 방법임
     * 이 기술은 새로운 시각적 경험을 제공하며, 특히 애니메이션 제작 및 게임 개발에 큰 도움이 될 수 있음
     * 하지만, 손으로 라벨링하는 과정이 다소 번거로울 수 있으며, 자동화된 방법이 더 발전하면 좋을 것임
     * 유사한 기능을 제공하는 다른 프로젝트로는 COLMAP과 Nerfstudio가 있음
     * 이 기술을 도입할 때는 정확한 라벨링과 깊이 예측이 중요하며, 이를 통해 더 일관된 3D 재구성을 얻을 수 있음

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Futurama의 Planet Express 건물 예시
          + Futurama의 Planet Express 건물이 3D 불일치 예시로 사용된 것이 흥미로움. 실제로는 3D 모델로 생성된 것 같음.
          + 그래픽 아티스트가 아니지만, 일러스트레이터의 예술이 복잡한 의미를 전달하는 창의적인 표현 기법을 사용한다는 점을 높이 평가함.
          + 최근 LLMs(대형 언어 모델) 과대광고와 유사한 '혼란스러운' 3D 공간 재구성을 떠올리게 함.
     * 3D 공간 생성의 재미
          + 일관성 없는 소스 이미지로 3D 공간을 만드는 것이 매우 재미있는 아이디어임.
          + 몇 년 전 추상적인 비공간 이미지를 가상 현실 공간으로 변환하는 시도를 해봤음. 예를 들어, 칸딘스키나 폴록의 추상화 그림을 탐험 가능한 가상 현실 공간으로 변환하는 것.
          + 워크플로우는 추상화 이미지에서 시작해 SinGan을 사용하여 '장면'의 대체 '뷰포인트'를 생성하고, 3D 사진 인페인팅을 통해 깊이 맵핑을 수행한 후 포토그래메트리 앱에 프레임을 넣는 것임.
     * 미래의 3D 모델 생성 가능성
          + 상상한 장면의 그림을 바탕으로 (품질이 낮은) 3D 모델을 생성할 수 있다는 것이 놀라움.
          + 미래에는 아티스트가 몇 장의 이미지만으로 정확한 3D 모델을 얻을 수 있을지도 모름.
          + AI와 유사한 도구가 아티스트에게 미칠 영향에 대한 우려가 있음. 그러나 기계 학습 기반 시스템이 아티스트와 더 직접적으로 협력하는 미래를 상상할 수 있음.
          + 예술가가 예술을 창작하는 것의 가치를 생각할 때, AI가 예술가를 대체하는 것은 문명 전체에 나쁜 결과를 초래할 수 있음.
     * 2D 아트워크의 3D 변환 문제
          + 2D 아트워크는 일관된 3D 공간을 가지지 않음. 이 문제를 유용하게 해결하지 못한 것 같음.
          + 원래의 카메라 위치에서 벗어나면 장면이 거의 일관성이 없음.
     * 포토그래메트리와 VR
          + Quest 2를 사용해 포토그래메트리에 대해 연구한 경험이 있음. 여러 각도에서 찍은 사진을 사용해 3D 모델을 만드는 파이프라인을 탐구함.
          + VR로 포팅할 때 중요한 것은 깨끗한 메쉬를 만드는 것임. 현재 도구들은 3D 메쉬를 생성하지 않음.
          + Matterport와 같은 모델을 만들고 부동산 회사에 판매하려는 동기가 있었음. 그러나 깨끗한 메쉬를 자동으로 생성하는 단계가 가장 노동 집약적임.
     * 알고리즘의 개선 필요성
          + 특정 이미지의 관점에서 외관을 재현하는 데 있어 성능이 좋지 않음. 예를 들어, 매직 스쿨버스 예시가 있음.
          + 알고리즘이 이미지를 더 신뢰하도록 조정될 필요가 있음.
     * 사이트의 비디오 자동 재생 문제
          + 모든 비디오가 자동 재생되고 반복되는 사이트가 불편함. 두 번째 화면에서 비디오를 볼 때 사이트 방문 시 끊김 현상이 발생함.
     * 미야자키의 반응
          + Spirited Away 예시를 미야자키에게 보여주면 생명 자체에 대한 모욕이라고 할 것 같음.
     * 기대에 못 미치는 결과
          + 모든 예시가 매우 나쁘게 보임. 중간 프레임의 노이즈와 흐릿함 때문에 원본과 함께 사용할 수 없음.
          + 각 요소의 시작과 끝 지점이 거의 연결되지 않음. 벽, 문 등이 목적지로 날아가지만 최종 위치에서 몇 피트 떨어진 곳에서 사라짐.
          + 아이디어는 훌륭하지만 실제로 작동하는 버전을 보고 싶음.
"
"https://news.hada.io/topic?id=14878","ChatGPT, 데이터 분석 기능 개선 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ChatGPT, 데이터 분석 기능 개선

     * 데이터 파일을 업로드하면 ChatGPT가 사용자를 대신해 Python 코드를 작성하고 실행하여 데이터를 분석
          + 대규모 데이터 세트 병합 및 정리, 차트 생성, 인사이트 발견과 같은 다양한 데이터 작업을 알아서 처리
     * 구글 드라이브와 OneDrive에서 파일을 직접 업로드
     * 테이블과 차트를 볼때 풀스크린 뷰에서 인터랙티브하게 지원
          + 특정 영역을 잡아서 추가 질문을 하거나, ChatGPT의 프롬프트 제안에 따라 더 깊은 분석 가능
     * 차트를 개인화하고 다운로드 가능
          + 막대형, 선형, 파이형, 분산형 차트 등을 사용자 지정하고 상호작용 가능
          + 차트 요소 위로 마우스를 가져가서 추가 질문을 하거나 색상을 선택할 수 있음
          + 완성되면 다운로드하여 프레젠테이션이나 문서에 사용
          + 이 대화형 기능은 다양한 차트 유형에 적용되며, 지원되지 않는 차트에 대해서는 정적 버전을 생성
"
"https://news.hada.io/topic?id=14782","비전 트랜스포머(Vision Transformers), 레지스터(Registers) 필요성 대두","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         비전 트랜스포머(Vision Transformers), 레지스터(Registers) 필요성 대두

비전 트랜스포머에 레지스터가 필요함

     * 저자: Timothée Darcet, Maxime Oquab, Julien Mairal, Piotr Bojanowski
     * ICLR 2024 구두 발표
     * 2024년 1월 16일 게재, 2024년 4월 12일 최종 수정

  요약

     * 지도 학습 및 자기지도 학습으로 훈련된 Vision Transformer(ViT) 모델의 특징 맵에서 아티팩트를 발견하고 특성화함
     * 추론 중에 주로 정보량이 적은 배경 영역에 나타나는 높은 norm의 토큰들이 내부 계산을 위해 재사용되는 것에 해당하는 아티팩트
     * ViT 입력 시퀀스에 추가 토큰(""레지스터""라고 함)을 제공하는 간단하지만 효과적인 솔루션 제안
     * 지도 및 자기지도 모델 모두에서 이 문제를 완전히 해결하고, 밀집 시각적 예측 작업에서 자기지도 시각 모델의 새로운 SOTA를 설정하며, 더 큰 모델로 객체 탐지 방법을 가능하게 하고, 무엇보다 다운스트림 시각적 처리를 위해 더 부드러운 특징 맵과 어텐션 맵으로 이어짐

  실험 및 분석

     * 아티팩트에 대한 조사가 매우 독창적이며 철저함. 그래프와 설명이 매우 통찰력 있고 실험이 포괄적임
     * 제안된 레지스터 토큰 포함은 매우 간단하고 우아하며 더 해석 가능한 어텐션 마스크를 제공함
     * 제한 사항에 대한 진술을 높이 평가함
     * 논문이 따라가기 쉽고 시각화가 직관을 제공하는 데 도움이 됨

  개선 사항

     * 레지스터 토큰을 추가하여 이상치 토큰의 행동이 제거되었다는 것을 보여주는 실험이 부족함. 제안된 모델에서 이미지/레지스터 토큰으로 전달되는지 확인하는 것이 흥미로울 것임
     * 비지도 객체 탐지에 대한 모델 성능 논의가 제한적이며 결과와 일치하지 않음
     * DINOv2+reg의 이득이 인상적이지만 DINO와 일치하지 않는 이유에 대해 더 많은 논의나 정성적 예시가 필요함
     * 모든 모델에서 레지스터가 비지도 객체 탐지 성능을 향상시킨다고 했지만 OpenCLIP 성능은 오히려 저하됨

GN⁺의 의견

     * 제한된 patch-level 중복성을 줄이기 위해 레지스터 외에 다른 방법도 있을 수 있음. MAE와 같이 patch-level 재구성이 표현의 중복성을 완화해야 하는 다른 자기지도 모델에서 비슷한 효과가 관찰되는지 궁금함
     * OpenCLIP 성능 저하에 대한 추가 설명이 필요해 보임. 또한 DINO의 LOST 성능이 DINOv2보다 좋은 이유도 설명이 부족함
     * DINOv2가 밀도 있는 마스크-이미지-모델링 목적 함수를 사용하면서 이런 행동을 보이는 것이 의외임. 마스크된 이미지 목적 함수가 패치 특징에 정보 보존을 요구함에도 불구하고 이런 행동을 막지 못한 이유가 궁금함
     * 데이터셋 자체의 편향성과 레이블의 편향성을 구분할 필요가 있어 보임. SSL은 레이블 편향에는 영향을 덜 받지만 Instagram vs iNaturalist 같은 데이터 소스에 따른 편향은 여전히 존재할 수 있음
     * 더 큰 모델에서 이상치 토큰이 나타난다고 제안했지만, CLIP/DEIT의 base 모델에서는 그렇지 않음. 2.2절 끝에 이에 대한 논평이 있으면 좋겠음
     * 레지스터를 추가한 DINO 모델의 비지도 객체 탐지 성능이 OpenAI의 CLIP이나 Google의 LiT 등 유사한 기능을 하는 다른 모델들과 비교했을 때 어떤지 궁금함
     * ViT 기반 모델들에서 관찰되는 이상치 토큰 현상이 CNN 기반 모델에서도 나타나는지, 트랜스포머 구조 특유의 것인지 분석해보면 좋겠음
     * 실제 응용에서 레지스터 토큰을 사용할 때 계산량 증가로 인한 성능 저하는 없을지, 최적의 레지스터 개수를 어떻게 결정할 수 있을지에 대한 가이드라인이 있으면 도움이 될 듯함
"
"https://news.hada.io/topic?id=14826","거울 차원에 나타난 고양이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             거울 차원에 나타난 고양이

Sir, there's a cat in your mirror dimension

     * 예전에 주파수 영역에 대해 이야기한 적이 있음.
          + 일상 신호를 구성 파형의 진폭으로 변환하는 기법임.
          + 가장 일반적인 기초는 증가하는 주파수의 사인파임.
          + 다른 수많은 파형도 다양한 주파수 영역을 만들 수 있음.
     * 주파수 영역 변환의 두 가지 중요한 특성:
          + 가역성: 주파수 이미지를 통해 원래 데이터를 복원할 수 있음.
          + 입출력 대칭성: 같은 수학적 연산을 사용하여 양방향으로 변환 가능.
     * 실제로는 이 구분이 중요함.
          + 특히 압축에서 중요함.
          + 이미지를 주파수 영역으로 변환하고 고주파 성분의 정밀도를 줄이면 데이터 양이 줄어듦.
          + 결과 이미지는 여전히 시각적으로 동일하게 보임.

  MS Paint를 최첨단 압축 도구로 사용

     * 주파수 영역의 이미지는 퍼진 노이즈처럼 보임.
          + 대부분은 시각적으로 중요하지 않음.
          + 변환은 두 기능적으로 동일한 차원 사이를 오가는 레버임.
          + 이 거울 차원을 집으로 삼고 일부 데이터를 이동할 수 있을지 궁금해짐.
     * 이를 테스트하기 위해 고양이 사진을 가져와 이산 코사인 변환(DCT)으로 주파수 영역 형태를 계산함.
          + 시간 고양이, 주파수 고양이.
     * 이전 예제의 여성 사진을 사용하고 거울 차원의 ""고양이 노이즈"" 패턴을 겹쳐서 불투명도를 낮춤.
          + 시간 여성과 주파수 고양이.
     * 합성 작업은 필연적으로 손실이 발생함.
          + 이론적으로 합성 이미지를 DCT로 주파수 영역 표현을 계산하면 여성 사진이 균일한 노이즈로 분해될 것임.
          + 주입된 ""고양이 노이즈""는 인식 가능한 고양이 이미지로 응집될 것임.
     * 실제로 그렇게 됨.
          + 주파수 고양이와 시간 여성.
     * 직접 확인하려면 합성 이미지를 다운로드하고 MATLAB에서 다음을 실행해보면 됨:
woman = imread(""woman-with-cat.png"");
colormap('gray');
imagesc(woman, [0 255]);
pause(1);
cat = dct2(woman);
imagesc(imgaussfilt(cat, 1), [-4 4]);

     * 흥미롭게도, 고양이는 호스트 문서의 크기 조정에도 생존함.
          + 업스케일링은 이미지를 타일링함.
          + 다운스케일링은 이미지를 잘라냄.
     * 손실 압축이 고양이를 얼마나 손상시키는지 궁금했음.
          + 예상보다 영향이 적었음.
          + 높은 JPEG 품질 설정에서는 이미지가 꽤 괜찮아 보임.
          + 품질 설정이 낮아지면 오른쪽 하단 사분면이 심하게 양자화됨.
          + 주파수 영역에서 본 JPEG 압축의 혼란.
     * 이 시각화는 JPEG 알고리즘이 얼마나 많은 정보를 파괴하는지 보여줌.
          + 대부분은 우리가 알아차리지 못함.
     * 오디오 스펙트로그램을 숨겨진 메시지로 사용하는 이전 사례가 많음.
          + JPEG DCT 계수를 이용한 텍스트 스테가노그래피에 대한 논의도 있음.
          + 이 기술이 특히 유용하다는 것이 아니라, 주파수 영역과 시간 영역이 재미있게 연결되어 있다는 점을 강조함.

  GN⁺의 의견

    1. 주파수 영역 변환의 이해: 주파수 영역 변환은 데이터 압축과 신호 처리에서 중요한 역할을 함. 이를 이해하면 이미지나 오디오 데이터를 효율적으로 처리할 수 있음.
    2. MATLAB 활용: MATLAB은 데이터 분석과 시각화에 강력한 도구임. 이 기사를 통해 MATLAB의 실용적인 사용 예를 배울 수 있음.
    3. JPEG 압축의 한계: JPEG 압축의 한계를 시각적으로 이해할 수 있음. 이는 이미지 품질을 유지하면서 파일 크기를 줄이는 방법을 찾는 데 도움이 됨.
    4. 스테가노그래피: 주파수 영역을 이용한 스테가노그래피는 데이터 보안과 관련된 흥미로운 주제임. 이를 통해 숨겨진 메시지를 전달하는 방법을 배울 수 있음.
    5. 기술의 재미있는 응용: 이 기사는 기술을 재미있고 창의적으로 응용하는 방법을 보여줌. 이는 기술에 대한 흥미를 높이고 새로운 아이디어를 떠올리게 함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 사진의 주제와 스펙트럼 에너지:
          + 대부분의 사진에서 인식 가능한 주제는 스펙트럼 에너지가 원점(왼쪽 상단)에 집중됨.
          + 사진의 주제는 일반적으로 프레임의 중앙에 위치하여 공간과 주파수 도메인 데이터 간의 간섭을 최소화함.
     * 디지털 워터마킹의 기초:
          + 이 기술은 이미지나 오디오와 같은 신호에 대한 강력한 디지털 워터마킹의 기초가 됨.
          + 주된 응용은 신호가 많이 처리된 후에도 저작권이 있는 자료를 감지하는 것임.
     * 푸리에 변환의 시간-주파수 이중성:
          + 푸리에 변환의 수학적 원리는 변환의 방향에 상관없이 동일하게 작동함.
          + 고양이의 주파수 플롯을 여성의 공간 플롯에 삽입하면, 여성의 푸리에 변환이 고양이를 나타나게 함.
     * 과정 확인 요청:
          + 사진을 찍고, 고양이를 주파수 도메인으로 변환한 후, 이를 여성의 시각 이미지에 합성함.
          + 합성 이미지를 다시 DCT하면 고양이가 나타남.
     * 스테가노그래피 응용:
          + 불법 이미지를 숨기기 위한 스테가노그래피의 흥미로운 응용.
          + 주파수 도메인으로 변환하여 다른 이미지에 합성하면, 이를 되돌리는 방법을 아는 사람만이 이미지를 볼 수 있음.
     * Aphex Twin의 오디오 스펙트로그램 트릭:
          + Aphex Twin이 트랙의 오디오 스펙트로그램에 이상한 얼굴을 나타나게 한 재미있는 트릭과 유사함.
     * DCT의 위치 중요성:
          + 고양이가 왼쪽 상단에 더 집중되어 있었다면, 이 데모는 잘 작동하지 않았을 것임.
          + DCT는 고주파 성분이 많아 고양이를 상단 왼쪽에 두면 묻힐 가능성이 큼.
     * 이미지 압축의 이해:
          + 주파수 도메인이 이미지 압축에 사용될 수 있다는 것을 깨달음.
          + 대부분의 이미지 압축 알고리즘이 주파수 도메인의 조용한 부분을 제거하는 방식으로 작동하는지 궁금함.
     * DCT의 구체적 방법:
          + JPEG에서 사용하는 8x8 타일이 아닌 다른 방식으로 DCT가 적용된 것으로 보임.
          + 2D DCT 기저 함수가 이 경우에 사용되지 않은 것 같음.
     * 음악과 이미지 인코딩:
          + Aphex Twin과 Venetian Snares가 사운드에 이미지를 인코딩한 것과 유사함.
          + 특정 도구를 사용하면 주파수가 고양이의 이미지를 나타내는 것을 볼 수 있음.
"
"https://news.hada.io/topic?id=14867","유타 주민들, 지방 정부 덕분에 저렴한 10 Gbps Fiber 혜택","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 유타 주민들, 지방 정부 덕분에 저렴한 10 Gbps Fiber 혜택

   요약할 내용이 없습니다.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Comcast의 로비 활동
          + Comcast가 지역의 광섬유 확장 계획을 막기 위해 많은 돈을 썼음. 그러나 계획이 통과되자 자신들도 많은 돈을 들여 광섬유를 확장하기로 결정했음. 기업들이 어떤 일을 막기 위해 실제로 그 일을 실행하는 것보다 더 많은 돈을 쓰는 경우가 있음.
     * Utah에서의 인터넷 경험
          + Utah에서 집을 샀고, Utopia라는 인터넷 제공업체가 지금까지 최고의 경험을 제공했음. 속도가 광고된 것보다 10-25 Mbps 더 빠르고, 여러 제공업체 중 선택할 수 있는 옵션이 많아 좋음. 과거의 독점 상황과는 큰 차이임.
     * Bay Area에서의 Sonic Fiber
          + Bay Area에 살고 있으며, Sonic Fiber를 통해 10Gbps 속도를 월 $49에 사용 중임. 테스트에서는 최대 8Gbps까지 나왔으며, 9Gbps까지도 가능할 것 같음. 엄청난 대역폭을 제공함.
     * Longmont, Colorado의 NextLight
          + Longmont, Colorado의 시에서 관리하는 ISP인 NextLight가 Comcast와 Verizon의 독점을 깨고 설립됨. 지역 주민들이 기본적인 유틸리티를 책임질 때 더 나은 서비스와 고객 지원을 받을 수 있음.
     * Central Washington의 공공 유틸리티
          + Central Washington에서는 거의 20년 동안 공공 유틸리티가 소유하고 설치한 대칭형 1Gbps 광섬유를 사용 중임. 월 $80에서 최근 $60로 가격이 내려갔음.
     * Utopia의 조직 문제
          + Utopia의 조직은 복잡했지만, 아이디어는 좋고 일반적으로 잘 구현되었음. 그러나 주정부의 보조금을 받아 인터넷을 제공한 후, 그 보조금을 이용해 경쟁업체보다 낮은 가격으로 주정부 회선을 입찰하는 문제가 있음.
     * 싱가포르의 10Gbps 광섬유
          + 싱가포르에서는 월 30 SGD(약 22.35 USD)에 10Gbps 광섬유를 출시하려는 통신사가 있음. 비대칭일 가능성이 높음.
     * 뉴욕의 Honest Internet
          + 뉴욕에서 Honest Internet이라는 지역 ISP를 통해 월 $50에 기가비트 속도를 제공받고 있음. Comcast, Verizon, Spectrum은 같은 속도에 $90을 요구했음. 직접 이메일로 지원을 받을 수 있어 편리함. 지역 ISP를 지원해야 함.
     * Salt Lake City의 CenturyLink
          + Salt Lake City에서 CenturyLink 인터넷이 다운되었고, 수리하는 데 거의 2주가 걸렸음. 이러한 회사들의 끔찍한 서비스가 시립 광대역에 대한 수요를 크게 증가시킴.
"
"https://news.hada.io/topic?id=14872","Rust 학습을 위한 100가지 연습 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Rust 학습을 위한 100가지 연습 문제

     * Rust의 핵심 개념을 한번에 하나씩 실습을 통해 학습하는 방식으로 구성
     * 문법, 타입 시스템, 표준 라이브러리 및 생태계를 배울 수 있음
     * Rust에 대한 사전 지식은 필요하지 않지만, 다른 프로그래밍 언어에 대한 기본 지식은 필요함
     * 시스템 프로그래밍이나 메모리 관리에 대한 사전 지식도 필요하지 않음
     * 처음부터 시작하여 작은 단계로 Rust 지식을 쌓아나갈 수 있음
     * 과정이 끝나면 약 100개의 연습 문제를 해결하여 소규모에서 중규모의 Rust 프로젝트를 다룰 수 있는 자신감을 가질 수 있음

방법론

     * 이 과정은 ""실습을 통한 학습(Learn By Doing)"" 원칙에 기반함
     * 상호작용적이고 실습 중심으로 설계
     * 4일 동안 교실 환경에서 진행되도록 설계됨
          + 각 참가자는 자신의 속도에 맞춰 학습하며, 경험 많은 강사가 안내하고 질문에 답변하는 형식
     * 혼자서도 과정을 따라갈 수 있지만, 친구나 멘토의 도움을 받는 것을 추천함
     * 모든 연습 문제의 해답은 GitHub 저장소의 솔루션 브랜치에서 찾을 수 있음

구조

     * 화면 왼쪽에 과정이 섹션으로 나뉘어 있음
     * 각 섹션은 Rust 언어의 새로운 개념이나 기능을 소개함
     * 이해도를 확인하기 위해 각 섹션에는 해결해야 할 연습 문제가 있음
     * 연습 문제는 동반 GitHub 저장소에서 찾을 수 있음
     * 과정을 시작하기 전에 저장소를 로컬 머신에 클론해야 함
     * SSH 키가 설정된 경우: git clone git@github.com:mainmatter/100-exercises-to-learn-rust.git
     * HTTPS URL을 사용하는 경우: git clone https://github.com/mainmatter/100-exercises-to-learn-rust.git
     * 진행 상황을 쉽게 추적하고 필요 시 메인 저장소에서 업데이트를 가져오기 위해 브랜치에서 작업하는 것을 추천함
     * 모든 연습 문제는 exercises 폴더에 위치함
     * 각 연습 문제는 Rust 패키지로 구성됨
     * 패키지에는 연습 문제 자체, 수행할 작업에 대한 지침(src/lib.rs) 및 솔루션을 자동으로 확인하는 테스트 스위트가 포함됨

저자 소개

     * 이 과정은 Mainmatter의 수석 엔지니어링 컨설턴트인 Luca Palmieri가 작성함
     * Luca는 2018년부터 Rust를 사용해왔으며, TrueLayer와 AWS에서 일함
     * ""Zero to Production in Rust""의 저자로, Rust로 백엔드 애플리케이션을 구축하는 방법을 배우는 데 필수적인 자원임
     * cargo-chef, Pavex 및 wiremock을 포함한 다양한 오픈 소스 Rust 프로젝트의 저자이자 유지 관리자임

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Rustlings 추천
          + Rustlings라는 유사한 학습 리소스를 언급함. 파일에 있는 todo 문장을 수정하여 코드가 컴파일되고 모든 테스트를 통과하게 만드는 방식으로, 상호작용적인 학습 방법임. Rustlings 링크
     * Zero to Production in Rust
          + 이 연습 문제 세트는 ""Zero to Production in Rust""라는 책의 저자가 만든 것임. 이 책은 인간 두개골에 게가 있는 표지로 유명함. Zero to Production 링크
     * Rust 입문 추천
          + Rust 지식이 기본적인 수준인 섹션을 훑어보았고, 낭비 없는 스타일이 마음에 듦. 30분 정도 사용해본 후, 이 리소스가 Rust 입문에 최고의 추천서가 될 수 있다고 생각함. 같은 저자가 만든 것임을 알게 됨.
     * Rust 팁과 트릭
          + Rust를 더 깊이 파고들고 싶은 사람들을 위해 Rust 팁과 트릭 목록을 유지하고 있음. Rust 팁과 트릭 링크
     * 다른 언어 경험자 의견 요청
          + 인기 있는 프로그래밍 언어에 익숙하고 이 연습 문제를 완료한 사람이 이 리소스가 얼마나 유용한지에 대한 의견을 공유해주길 바람. Java, Python, JS, C++ 경험 있음.
     * 학습 방법 블로그
          + ""Learn by doing"" 접근법에 대해 블로그에 작성함. 블로그 링크
     * Rust의 추상화 문제
          + Rust 코드에서 추상화가 종종 누출됨. 소유권 기능 때문에 구현 세부 사항이 노출되거나 강요됨.
     * Rust 직업 찾기 어려움
          + 개인적으로 Rust를 사용해왔지만, 해고된 후 Rust를 사용할 수 있는 직업을 찾기 어려움. Rust를 사용하는 직업이 많지 않음.
     * Rustlings과 비교
          + Rustlings와 이 리소스를 비교한 사람의 의견을 궁금해함. Rustlings에 매우 만족했지만, 이 리소스를 완료할 가치가 있는지 궁금함.
     * 저자에게 찬사
          + 저자와 유지 관리자에게 찬사를 보냄. 원한다면 쉽게 수익화할 수 있었을 텐데 무료로 공유함. 저자 링크
"
"https://news.hada.io/topic?id=14777","아담 커티스, self-expression의 위험성에 대해 경고 (2017)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               아담 커티스, self-expression의 위험성에 대해 경고 (2017)

아담 커티스가 말하는 자기표현의 위험성

  예술은 정치 행동을 대체할 수 없음

     * 예술은 세상을 잘 표현하고 시대의 분위기를 잘 전달하지만, 세상을 바꾸고 권력에 도전하기 위한 정치 행동을 대체할 순 없음
     * 1970년대 초반부터 자기표현이 새로운 정치이고 세상의 나쁜 것들에 도전하는 새로운 방법이라고 여겨졌지만, 전체 세상이 자기표현에 기반하고 있기에 그럴 수 없음

  우리 시대의 획일성, 자기표현

     * 50년 뒤 사람들은 우리 시대를 되돌아보며 모두가 얼마나 획일적이었는지 알게 될 것임
     * 우리는 자기표현을 우리 시대의 끔찍한 획일성으로 되돌아볼 수 있음. 모두가 자기표현을 하니 그 의미가 없어짐
     * 우리는 모두 자기표현을 하고 있음. 그것이 우리 시대의 획일성임

  자기표현의 역사와 자본주의의 변화

     * 모던 자기표현의 역사는 히피에서 시작되었고, 1960년대 말~1970년대 초 새로운 좌파의 붕괴와 함께 주목받기 시작함
     * 1970년대 자본주의는 큰 변화를 겪었는데, 모두가 똑같이 보이고 똑같은 옷을 입는 것에서 벗어나 더 다양한 제품을 팔아 자기표현을 할 수 있게 함
     * 예술가들에게 반항적으로 보였던 것이 사실은 그들이 싫어하는 권력 구조 내에서 일어나고 있던 더 깊은 변화를 반영하고 있었음. 자본주의가 그들처럼 되어가고 있었던 것

  자기표현을 통한 비판은 체제를 강화시킴

     * 아무리 급진적인 메시지의 예술이라도 자기표현을 통해 비판한다면, 사실은 당신이 전복하려는 바로 그 권력 구조를 키우고 있는 것임
     * 자본주의와 예술 모두 자기표현에 대해 궁극적 목표로 여김. 예술은 급진적 외부 운동과는 거리가 멀고, 현대의 획일성의 중심에 있음
     * 그래서 아무것도 변하지 않음. 급진주의자들이 자신들이 못마땅해 하는 권력구조의 중심에 있는 표현 방식을 택했기 때문에 그들은 무력해짐

  권력의 변화와 집단으로서의 힘

     * 세상을 더 좋게 만들려면, 권력이 어디로 갔는지부터 알아야 함
     * 우리는 자신을 독립된 개인으로 여기는 세상에 살고 있어서 권력에 대해 생각하지 않고 자신이 세상에 미치는 영향력만 생각함
     * 하지만 과거 사람들은 알고 있었음. 집단으로 있을 때 매우 강력해질 수 있고 일이 잘못될 때도 혼자 있을 때와 달리 자신감을 가질 수 있다는 것을
     * 권력의 개념 자체가 줄어든 이유가 바로 그것임. 우리는 자신과 자신의 타인에 대한 감정에 대해서만 이야기하도록 장려받음
     * 컴퓨터는 우리를 집단으로 보고, 우리가 욕망, 야망, 두려움 등 서로 꽤 비슷하다는 것을 알고 있음. 컴퓨터는 사람들 사이의 새로운 공통 정체성을 보는 방법을 제공함

  자유에 대한 다른 정의

     * 오늘날의 자유 개념은 매우 개인주의적임. 개인으로서 내가 하고 싶은 것을 자유롭게 하고 싶어함
     * 자유에 대한 또 다른 정의는 자신을 주님께 내맡김으로써 자신의 욕망과 이기심이라는 좁은 우리에서 자유로워질 수 있다는 것
     * 개인의 자기표현은 개인주의라는 우리 시대의 이데올로기 때문에 무한해 보이지만 다른 관점에서 보면 제한적임. 당신에겐 당신 자신의 욕망밖에 없기 때문

  신화와 재주술화

     * 막스 베버는 1920년대에 우리가 합리성의 쇠우리에 갇힐 것이라 예측했음. 잘 관리되고 이성적으로 이뤄지는 멋진 세계이지만 우리가 잃게 될 것은 '주술'임
     * 음모론은 일종의 뒤틀린 방식으로 세계를 재주술화하려는 시도일지도 모름. 이성적인 것으로는 결코 꿰뚫을 수 없는 신비로운 어떤 것에 대한 경외심 같은 것
     * 우리 세계로 다시 들어오려 하는 건 주술일지도 모르고, 지금은 이런 묘하게 뒤틀린 방식으로밖에 들어올 수 없는 것일지도 모름
     * 자본주의의 몰락은 이성적이고 기술관료적인 탈주술에 의해 전유되었기 때문. 우리를 가둔 쇠우리가 되어버림
     * 우리 시대의 극단적 개인주의는 다시 병에 들어가진 않을 것임. 당신은 여전히 독립적인 개인이라고 느끼게 해주면서도, 당신 자신의 존재를 넘어 미래로 나아가게 해주는 더 큰 무언가에 자신을 맡기게 해야 함. 사람들이 갈망하는 건 그런 것임

  GN⁺의 의견

     * 예술과 자기표현만으로는 사회 변혁이 어렵다는 주장에 일리가 있음. 자본주의 사회에서 자기표현 자체가 상품화되고 획일화되는 측면이 있기 때문
     * 하지만 예술이 가진 영향력을 너무 과소평가하는 것 같기도 함. 시대정신을 반영하고 대안적 사고를 보여주는 예술의 역할은 여전히 중요함
     * 개인주의를 넘어서는 연대와 집단성에 대한 고민은 필요해 보임. 하지만 그것이 개인성을 억압하는 방식이 되어서는 안될 것임
     * 주술성과 신비주의에 대한 갈망이 음모론 등으로 표출되는 것은 경계할 필요가 있음. 세계를 이해하려는 합리적 노력과 함께 가야 할 것임
     * 자본주의에 대한 급진적 비판만으로는 부족하고, 자본주의를 넘어서는 대안에 대한 상상력이 더 필요해 보임. 자기표현의 자유와 집단적 연대가 조화되는 방식으로 말이죠.

        Hacker News 의견

   요약:
     * 현대 예술계는 개인의 자기표현이 주를 이루고 있음. 과거 르네상스나 오스만 제국 시대처럼 좁은 주제에 모두가 집중하던 것과는 대조적임.
     * 현대의 포스트모던 문화는 예술뿐 아니라 사회 전반에 퍼져있음. 기독교와 같은 거대한 사상이 자리잡기 전까지는 쉽게 바뀌기 어려울 것임.
     * 기술을 이용해 비슷한 생각을 가진 사람들을 연결하고 정치적 영향력을 행사하려는 시도가 있음. 하지만 이는 권력 추구의 측면이 있어 우려스러움.
     * 개인의 자유로운 표현이 문제라기보다는, 정당 중심의 정치 체제 자체가 문제임. 정치 운동은 결국 특정 이익집단에 의해 왜곡되기 쉬움. 풀뿌리 운동이 더 진실에 가까움.
     * 개인의 자유는 제로섬 게임이 아니므로, 보편적 인권을 통해 해결하는 것이 바람직함.
     * 자본주의를 자기표현과 연결짓는 것은 동의하기 어려운 주장임.
"
"https://news.hada.io/topic?id=14768","무작위 실수 다항식의 최대 근이 복소수보다 실수일 가능성 더 높아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  무작위 실수 다항식의 최대 근이 복소수보다 실수일 가능성 더 높아

랜덤 다항식의 가장 큰 근은 실수일 확률이 복소수일 확률보다 높은가?

     * 실수 계수를 가진 랜덤 다항식의 실수 근의 개수는 복소수 근의 개수보다 훨씬 적음
          + 단, 계수가 (-1, 1) 범위 내에서 독립적이고 균일하게 랜덤하다고 가정
          + n차 다항식의 실수 근의 개수는 점근적으로 (2 log n) / π + o(1)이고, 복소수 근의 개수는 대략 n - (2 log n) / π
     * 다항식의 가장 큰 (또는 가장 작은) 근은 절대값이 가장 큰 (또는 가장 작은) 근으로 정의
     * 실수 근이 복소수 근보다 지수적으로 적음에도 불구하고, 실험 데이터에 따르면:
          + 가장 큰 (또는 가장 작은) 근이 실수일 확률이 복소수일 확률보다 높음
          + 이 확률은 n이 무한대로 갈수록 약 1/2에 가까운 값으로 감소
     * 이는 실수 근이 복소수 근보다 훨씬 적음에도 가장 큰 근과 가장 작은 근을 모두 포함할 가능성이 더 높다는 점에서 직관에 어긋남

  질문 1

     * 이러한 편향의 원인은 무엇인가?

  질문 2

     * n차 다항식의 가장 큰 (또는 가장 작은) 근이 실수일 확률이 (n이 무한대로 갈 때 약 1/2에 가까운 값으로) 수렴하는가?

GN⁺의 의견

     * 현재까지 가장 큰/작은 근이 실수일 확률이 1/2에 수렴한다는 것은 증명되지 않은 추측으로 보임. 이에 대한 엄밀한 증명이 필요해 보임
     * 다항식의 근들이 단위원 주변에 균일한 각도로 분포하고, 근 사이에 매우 국소적인 척력이 있다는 것을 알고 있음. 그러나 복소근은 단위원 주변으로 퍼질 수 있는 반면, 실근 사이의 척력으로 인해 실근은 더 작아지거나 더 커질 수 밖에 없음.
     * 복소근의 개수에 비해 실근의 개수가 로그적으로만 많다고 하더라도 실근이 상당히 많은 것으로 볼 수 있음.
     * 이러한 관점에서 보면 가장 작은 근이 실근일 가능성이 놀랍지 않음.
     * 실수 계수를 가진 랜덤 다항식의 근 분포에 대한 보다 깊이 있는 연구가 필요해 보임. 특히 가장 큰/작은 근이 실수일 확률의 극한값에 대한 엄밀한 증명이 필요함.

        Hacker News 의견

해커뉴스 댓글 요약

  무작위 계수를 가진 다항식의 최대 실근 확률에 대한 토론

     * 최대 실근 확률이 우연과 1/phi 사이라는 것이 놀라움
     * 프라임 수는 무작위가 아니라 이전 프라임 수에서 재귀적으로 발생하므로 자연 성장 패턴이 e와 phi를 반영할 것으로 예상됨
     * R에는 이러한 수치 실험을 위한 내장 지원이 있음
plot(polyroot(runif(101,-1,1)))

     * 무작위성의 정의와 홀수/짝수 차수 고려 여부 등 추가 질문 제기
     * 계수 스케일링 시 최대 계수를 제외한 모든 계수에 대해 비균일 분포가 생성될 것으로 추정

  수학 학습에 대한 조언 요청

     * 대학에서 수학을 즐겼으나 졸업 후 2년 동안 많이 하지 않아 다시 배워야 함
     * Project Euler와 같은 재미있는 아이디어를 찾거나 교과서 문제를 다시 풀어보는 것을 제안받음

  직관과 다른 결과에 대한 고찰

     * 복소평면 상에서 무작위로 뿌리를 선택하면 실수 계수를 가진 다항식을 거의 얻을 수 없으므로, 실근이 더 나올 가능성이 직관적으로 더 타당해 보임
     * 반사 대칭을 이용한 직관적 접근 시도와 그 한계에 대한 고찰
     * 5차 이상 다항식에는 공식이 없으므로 실근과 복소근의 구분이 어려움
     * 무작위 다항식의 계수가 실수인지 복소수인지에 대한 의문 제기
     * 복소평면이 실수 직선보다 훨씬 크기 때문에 실근 확률이 0에 가까워질 것이라는 예상과 달리 놀라운 결과
"
"https://news.hada.io/topic?id=14892","줄리아를 활용한 미적분학","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             줄리아를 활용한 미적분학

CALCULUS WITH JULIA

  서문

     * 저자: John Verzani
     * 출판일: 2024년 4월 26일

    서문

     * 목적: Julia 언어를 사용하여 미적분학을 배우기 위한 노트 세트임.
     * Julia 언어: 오픈 소스 프로그래밍 언어로, 배우기 쉬운 문법을 가지고 있으며 미적분학 학습에 적합함.
     * 설치 및 커스터마이징: ""Getting started with Julia""를 읽어 Julia를 설치하고 커스터마이징하는 방법을 배울 수 있음.
     * 인터페이스: ""Julia interfaces""를 읽어 Julia 설치와 상호작용하는 다양한 방법을 검토할 수 있음.

    배경

     * 다양한 관점에서의 미적분학 교육: 1990년대 중반부터 그래픽, 수치, 대수, 언어적 요소를 포함한 다양한 관점에서 미적분학을 가르치려는 움직임이 있었음.
     * 컴퓨터 대수 시스템: Mathematica, Maple, Sage와 같은 시스템을 미적분학 교육에 통합하는 예시가 많음. 이러한 시스템은 대수적/기호적 처리를 잘 모델링하며 수치적 측면을 설명하는 수단을 제공함.
     * Julia의 역할: Julia는 주로 수치적 계산 스타일을 사용하며, 대수적/기호적 처리는 추가적으로 다룸. 기호적 처리를 직접 수행하는 것이 학습에 유익할 수 있음.

    목표

     * 기술 활용: 컴퓨터 언어의 기계적 부분에 얽매이지 않고 가능한 한 기술을 사용하여 개념을 이해하는 것이 목표임.
     * Julia의 장점: Julia는 자연스러운 문법을 가지고 있어 초기 시작이 계산기 사용보다 어렵지 않음. 제한된 계산 개념 세트를 사용하여 많은 미적분 문제를 해결할 수 있음.

    노트 구성

     * 페이지 구성: 각 페이지는 책의 섹션과 유사하게 집중된 개념을 다룸.
     * 자기 평가 질문: 각 페이지 끝에는 자기 평가 질문이 있으며, 제한된 수의 자가 채점 답변이 있음.
     * 참고 자료: 여러 출처에서 아이디어를 차용함.
     * Julia 패키지: CalculusWithJulia 패키지가 제공되어 일반적인 작업을 간소화하고 반복적으로 사용될 유용한 패키지를 로드함.

    Quarto 책

     * Quarto 책: 이 노트는 Quarto 책으로 제공됨. Quarto 책에 대해 더 알고 싶다면 https://quarto.org/docs/books를 방문할 수 있음.
     * PDF 파일: Quarto를 통해 PDF 파일로 컴파일할 수 있음. 파일이 크기 때문에 다운로드는 제공되지 않음. 관심 있는 독자는 저장소를 다운로드하고 환경을 설정한 후 Quarto를 실행하여 PDF로 렌더링할 수 있음.

    기여

     * 기여 방법: 추가 주제 제안, 오류 수정, 오타 수정 등을 통해 기여할 수 있음. ""Edit this page"" 링크를 클릭하여 기여자 목록에 참여할 수 있음.
     * 감사 인사: 모든 기여자에게 감사하며, 특히 @fangliu-tju에게 감사의 인사를 전함.

  GN⁺의 의견

     * Julia 언어의 장점: Julia는 빠른 실행 속도와 쉬운 문법을 제공하여 수치 계산에 매우 적합함.
     * 교육적 가치: 기호적 처리를 직접 수행하는 것이 학습에 유익하며, Julia를 통해 수치적 계산을 쉽게 이해할 수 있음.
     * 기술 활용의 중요성: 기술을 활용하여 개념을 이해하는 것이 중요하며, Julia는 이를 위한 훌륭한 도구임.
     * 기여 문화: 오픈 소스 프로젝트에 기여하는 것은 학습과 성장에 큰 도움이 됨.
     * 대체 도구: Mathematica, Maple, Sage와 같은 다른 컴퓨터 대수 시스템도 미적분학 학습에 유용할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 고등학생에게 적합한가?
          + 자녀가 고등학교 2학년이 되어 SVC를 수강 중임. 저자에게 질문: 파이썬 입문만 한 고등학생에게 적합한가? 책을 조금 읽어봤는데 흥미로웠음. 자녀에게 이 방법으로 미적분을 배우게 하고 싶음. 왜 Julia가 다른 언어보다 더 적합한가?
     * Maxima와 Gnuplot
          + Maxima와 Gnuplot은 함께 사용하면 꽤 좋음. Maxima에 대한 완전한 입문서/가이드가 PDF로 제공됨.
     * 코스 설계 주의사항
          + 이런 코스를 설계할 때 주의가 필요함. 미적분과 프로그래밍을 어느 정도 아는 사람들에게 흥미로울 가능성이 높음. 신입생들은 소프트웨어 설치에 관심이 적음. 그러나, 고급 수업에서는 선택 과목으로 잘 작동할 수 있음. ODE 수업에서 파이썬 프로젝트로 좋은 결과를 얻었음. 파이썬이 널리 사용되는 언어라는 점도 도움이 됨.
     * Emacs와 Calc 패키지
          + Emacs를 사용하면 Calc 패키지가 컴퓨터 대수를 지원함. 최근 Calc를 쉽게 사용할 수 있는 인터페이스를 발표했음. 관련 링크
     * 404 오류
          + 페이지 헤더의 PDF 링크가 404 오류를 일으킴.
     * MOOCulus와 비교
          + 개념이 마음에 듦. MOOCulus 기반으로 구축되었으면 좋겠음. MOOCulus는 글의 품질이 더 좋고, 통합된 연습 문제로 학생들이 잘 따라옴. 만약 Julia와 통합된다면 큰 발전이 될 것임. 응용 프로그램 추가도 큰 도움이 될 것임.
     * Matlab 대체로서의 Julia
          + Matlab을 사용하던 사람에게 Julia가 유효한 대체재인가?
     * LuaJIT의 속도
          + LuaJIT이 여전히 더 빠름. 관련 벤치마크
"
"https://news.hada.io/topic?id=14831","GPT-4o의 메모리 혁신 – 바늘 더미 속 바늘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GPT-4o의 메모리 혁신 – 바늘 더미 속 바늘

Needle in a Needlestack: GPT-4o의 메모리 돌파구! (NIAN 코드) - Tom Burns

  새로운 벤치마크 소개

     * Needle in a Needlestack는 LLMs(대형 언어 모델)가 컨텍스트 창에서 정보를 얼마나 잘 주의하는지를 측정하는 새로운 벤치마크임.
     * NIAN은 수천 개의 리머릭을 포함하는 프롬프트를 생성하고, 특정 위치의 하나의 리머릭에 대한 질문을 함.
     * 예시 프롬프트는 약 2500개의 리머릭을 포함함.
     * 지금까지 어떤 LLM도 이 벤치마크에서 매우 좋은 성과를 내지 못했음.

  GPT-4 Turbo와 Claude-3 Sonnet의 시도

     * GPT-4 Turbo와 Claude-3 Sonnet의 시도:
          + gpt-4-turbo-2024-04-09
          + claude-3-sonnet

  GPT-4o의 돌파구

     * GPT-4o가 큰 돌파구를 이룸!
     * 이 벤치마크에서 거의 완벽한 성과를 보임.
     * OpenAI가 GPT-4 Turbo보다 GPT-4o를 훨씬 더 좋게 만든 방법을 언제 공개할지 궁금함.

  Mistral 모델의 성능

     * Mistral의 모델들은 사용하기 매우 좋음. API가 매우 빠르고 일관적임.
     * 그러나 Mistral의 새로운 8x22 모델은 이 벤치마크에서 매우 어려움을 겪음.
          + 프롬프트의 시작 부분에서도 질문에 올바르게 답할 확률이 50%에 불과함.
          + Mistral large는 더 나은 성과를 보였지만, 여전히 70%의 정확도에 그침.
     * 참고: OpenAI의 토크나이저를 사용하여 토큰 수를 추정함. Mistral은 약 25% 더 많은 토큰을 생성하는 다른 토크나이저를 사용하므로, 그래프의 토큰 수는 실제 토큰 수보다 낮음.
          + open-mixtral-8x22b
          + mistral-large-latest-2024-04-09

  짧은 프롬프트에서의 성능

     * 모델들은 짧은 프롬프트에서 훨씬 더 나은 성과를 보임.
     * 예시: Mistral 7b가 16k 토큰 프롬프트와 32k 토큰 프롬프트에서의 성능 비교.
          + open-mistral-7b 16k tokens
          + open-mistral-7b 32k tokens

  정보 반복의 중요성

     * 정보를 반복하는 것이 이 테스트에서 큰 차이를 만듦.
     * GPT-3.5-turbo는 프롬프트에서 질문하는 리머릭이 10번 반복될 때 성과가 극적으로 향상됨.
          + limerick used once
          + limerick used 10 times

  벤치마크 코드와 추가 정보

     * 이 벤치마크의 코드는 여기에서 확인 가능함.
     * 추가 모델 지원을 쉽게 추가할 수 있음.
     * 답변이 평가되고 질문이 검증되는 방법에 대한 자세한 내용은 방법론 페이지에서 확인 가능함.
     * 질문이 있으면 연락처로 문의 바람.
     * 이 사이트는 오픈 소스임. 이 페이지 개선.

GN⁺의 의견

     * 기술적 진보: GPT-4o의 성과는 LLM의 메모리와 주의력 향상에 큰 진전을 보여줌. 이는 더 복잡한 작업을 수행할 수 있는 가능성을 열어줌.
     * 모델 선택: 다양한 모델의 성능을 비교할 때, 특정 작업에 맞는 모델을 선택하는 것이 중요함. 예를 들어, 짧은 프롬프트에서 더 나은 성과를 보이는 모델을 선택하는 것이 유리할 수 있음.
     * 반복 학습의 중요성: 정보의 반복이 모델의 성능에 미치는 영향을 고려해야 함. 이는 데이터 준비와 프롬프트 설계에서 중요한 요소가 될 수 있음.
     * 오픈 소스의 장점: 이 벤치마크가 오픈 소스라는 점은 연구자와 개발자들이 자유롭게 접근하고 개선할 수 있는 기회를 제공함. 이는 커뮤니티의 발전에 기여할 수 있음.
     * 미래 전망: GPT-4o와 같은 모델의 발전은 AI의 다양한 응용 분야에서 혁신을 가져올 수 있음. 그러나 이러한 기술을 도입할 때는 윤리적 고려와 책임 있는 사용이 필요함.

   기술 발전이 정말 어마무시합니다..ㅠ

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 법률 문서 비교에서의 오류
          + 두 개의 작은 법률 문서를 비교할 때, GPT-4가 일부 항목이 한 문서에만 있다고 잘못 인식함. 실제로는 동일한 내용이었음.
          + 단일 샘플이지만, 90% 정확도는 의심스러움. 약 80k 토큰이었음.
     * Limericks 데이터셋 기반
          + 2021년에 출판된 limericks 데이터셋을 기반으로 함. GPT-4o가 이 데이터셋으로 훈련되었을 가능성이 높음.
          + NIAN 팀이 다른 모델을 사용해 limericks를 생성하고 데이터셋에 포함되지 않았는지 확인해야 함.
     * Needle in the Haystack 테스트의 한계
          + 이 테스트는 모델의 실제 긴 문맥 처리 능력을 제한적으로 보여줌. 초기 모델들이 이 테스트에서 성능이 나빴기 때문에 주로 사용됨.
          + 최근 모델들은 이 테스트에서 좋은 성능을 보이지만, 32K 토큰 이후에는 복잡한 작업 수행 능력이 크게 떨어짐.
          + RULER 테스트가 더 나은 평가 방법임.
     * Gemini Pro 1.5의 성능
          + Gemini Pro 1.5가 Moby Dick 전체와 Byung Chul-Han의 모든 책을 처리할 수 있었음. 질문에 대한 답변을 정확히 찾아냄.
     * ""Synthesis from Haystack"" 테스트 필요성
          + 단순한 검색이 아닌 깊이 있는 이해와 연결, 추상화를 테스트하는 방법이 필요함.
          + 사람은 책을 읽을 때 전체적인 직관을 가짐. 이를 정량화할 방법이 필요함.
     * GPT를 이용한 HTML 레이아웃 변환
          + GPT를 사용해 동적 데이터를 아름다운 HTML 레이아웃으로 실시간 변환 가능. 개발 시간을 절약하고 데이터 구조 변경 시에도 HTML을 업데이트할 수 있음.
          + 이전 시도에서는 GPT-4 Turbo가 문맥과 지시를 무시하는 경우가 있었음.
     * GPT-4o의 향상된 주의력
          + GPT-4o가 GPT-4 Turbo와 Claude-3 Sonnet에 비해 입력 창 전체에 걸쳐 주의력을 더 잘 발휘함.
          + ""Needle In A Needlestack"" 테스트가 좋은 다음 단계임. 수천 개의 limericks를 포함한 프롬프트에서 특정 위치의 limerick에 대한 질문을 포함함.
     * LLM 평가의 어려움
          + 공공 인터넷에서 실제 LLM 평가를 제대로 하는 사람이 거의 없다는 의견.
     * 훈련 데이터셋에 대한 의문
          + GPT-4o가 이 데이터셋으로 훈련되지 않았다는 것을 어떻게 알 수 있는지에 대한 의문.
          + 테스트 데이터가 훈련 데이터에 포함되지 않았다는 것을 알아야 의미가 있음.
"
"https://news.hada.io/topic?id=14865","컴퓨터 과학자들이 효율적인 새로운 계산 방법 발명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      컴퓨터 과학자들이 효율적인 새로운 계산 방법 발명

새로운 효율적인 카운팅 알고리즘 개발

  소개

     * 상상해보세요, 여러분이 원시림에서 야생 동물 센서를 수행하고 있음.
     * 디지털 카메라로 동물 사진을 찍고, 중복되지 않은 동물의 수를 알고 싶음.
     * 기존 방법은 모든 동물을 기억하고 비교해야 하지만, 이는 비효율적임.

  문제 상황

     * 페이스북 같은 대규모 플랫폼에서는 매일 로그인하는 고유 사용자의 수를 세는 것이 어려움.
     * 최근 컴퓨터 과학자들이 긴 목록에서 고유 항목 수를 추정하는 새로운 방법을 제안함.
     * 이 알고리즘은 적은 수의 항목만 기억하면 됨.

  CVM 알고리즘

     * CVM 알고리즘은 40년 넘게 연구된 고유 요소 문제를 해결하는 중요한 단계임.
     * 이 알고리즘은 데이터 스트림에서 고유 요소의 수를 효율적으로 추정할 수 있음.
     * ""새로운 알고리즘은 놀랍도록 간단하고 구현하기 쉬움"" - 앤드류 맥그리거

  예시: 햄릿 오디오북

     * 햄릿에는 30,557개의 단어가 있음. 이 중 몇 개가 고유한지 알아보려면 모든 단어를 기억해야 함.
     * CVM 알고리즘은 랜덤화를 사용하여 메모리 사용을 줄임.

  CVM 알고리즘의 작동 방식

     * 첫 번째 라운드: 100개의 단어를 기록하고, 중복 단어는 코인 토스로 삭제.
     * 두 번째 라운드: 중복 단어를 더 어렵게 유지하기 위해 두 번의 코인 토스 필요.
     * 세 번째 라운드: 세 번의 코인 토스 필요.
     * k번째 라운드까지 반복하여 고유 단어 수를 추정함.

  정확도 검증

     * 메모리 크기에 따라 정확도가 달라짐.
     * 햄릿의 고유 단어 수는 3,967개로, 메모리 100개로 평균 추정치는 3,955개, 메모리 1,000개로 평균 추정치는 3,964개임.

  결론

     * ""기본적이고 잘 연구된 문제에도 간단하지만 비직관적인 해결책이 존재함"" - 윌리엄 쿠즈마울

GN⁺의 의견

     * 데이터 스트리밍 상황에서 유용함: CVM 알고리즘은 대규모 데이터 스트림에서 고유 항목을 효율적으로 추정할 수 있어 실시간 분석에 유용함.
     * 메모리 효율성: 메모리 사용을 최소화하면서도 높은 정확도를 유지할 수 있어, 메모리 제약이 있는 환경에서 특히 유리함.
     * 랜덤화의 중요성: 랜덤화를 통해 복잡한 문제를 간단하게 해결할 수 있다는 점에서, 다른 분야에서도 응용 가능성이 큼.
     * 기술 도입 고려사항: 이 알고리즘을 도입할 때는 메모리 크기와 정확도 간의 균형을 고려해야 함. 메모리가 충분하지 않으면 정확도가 떨어질 수 있음.
     * 관련 기술: HyperLogLog와 같은 다른 고유 요소 추정 알고리즘과 비교해볼 가치가 있음. 각 알고리즘의 장단점을 파악하여 상황에 맞는 최적의 솔루션을 선택하는 것이 중요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * HyperLogLog와 유사한 알고리즘
       HyperLogLog와 유사한 알고리즘으로, 동전 던지기의 연속성을 이용해 간단한 알고리즘을 설명함. 특히 스트리밍 데이터에서 효율적으로 작동하며, 메모리를 적게 사용함.
     * 알고리즘 설명 오류 지적
       알고리즘 설명이 잘못되었다고 지적하며, 코드 예제를 통해 올바른 방법을 제시함. 단어를 먼저 저장하고 삭제하는 방식이 더 정확한 결과를 도출함.
     * 논문 추천
       논문이 블로그 포스트만큼 읽기 쉬우며, 더 많은 정보를 제공한다고 언급함. 스트리밍 데이터에서 집합의 카디널리티를 추정하는 간단한 알고리즘을 설명함.
     * Python 구현 예제
       스트리밍 알고리즘의 Python 구현 예제를 제공함. 간단한 코드로 알고리즘을 이해하고 실습할 수 있음.
     * 시스템 리팩토링에 유용
       방문 횟수를 테이블에 삽입하여 카운트하는 시스템을 리팩토링 중인데, HyperLogLog 접근 방식을 대체할 수 있는 흥미로운 방법이라고 언급함.
     * 메모리 효율적인 방법
       컴퓨터 과학자들이 메모리 효율적인 방법으로 부분 집합의 크기를 추정하는 방법을 발명했다고 언급함.
     * Chernoff Bound에 대한 논의
       논문에서 사용된 Chernoff Bound의 변형에 대해 논의함. 이 변형이 증명의 정확성을 깨뜨리는지 확실하지 않다고 언급함.
     * 고유 요소 추정과 카운팅의 차이
       고유 요소의 수를 추정하는 것과 실제로 카운팅하는 것은 매우 다르다고 언급하며, 제목이 부적절하다고 지적함.
     * 효율적인 스트림 알고리즘 소개
       스트림에서 상위 k개의 항목을 찾는 효율적이고 쉽게 구현 가능한 알고리즘을 소개함. Karp, Shenker & Papadimitriou의 논문을 추천함.
     * 창의적 사고의 중요성
       ""상자 밖에서 생각하기""의 예시를 즐긴다고 언급하며, 문제 해결을 위한 올바른 질문을 찾는 것이 중요하다고 강조함. 다양한 예시를 통해 창의적 사고를 내재화하고 적용할 수 있기를 희망함.
"
"https://news.hada.io/topic?id=14788","Node 버전 관리자 5종 비교 : NVM, N, FNM, Volta, PNPM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Node 버전 관리자 5종 비교 : NVM, N, FNM, Volta, PNPM

     * 주요 비교 항목: 크로스플랫폼, 초기 설정, 노드 버전 소스, 일일 사용량

Node Version Manager (NVM)

     * GitHub 리포지토리 별 75.2k로 Node 버전 관리에 가장 인기 있는 솔루션
     * 초기에 등장하여 커뮤니티에서 큰 인기를 얻었음
     * 완전한 Windows 지원은 없으며, GitBash, Cygwin, WSL 등에서 작동함
     * Windows용 별도 패키지인 nvm-windows가 있으나 NVM 자체는 아님
     * POSIX 쉘(bash, zsh)만 지원하여 Fish 등의 사용자는 제외됨
     * 설치는 간단한 명령어로 가능함
     * .nvmrc 파일을 통해 사용할 Node.js 버전을 이해할 수 있음
     * nvm use 명령어는 현재 쉘에서만 Node.js 버전을 설정하므로, 프로젝트 폴더를 떠나도 버전이 유지됨
     * 현재 쉘의 Node.js 버전과 프로젝트에 필요한 버전을 항상 인지해야 하는 부담이 있음
     * 수동으로 모든 Node.js 버전을 관리하는 것보다는 낫지만, 완벽한 통합과는 거리가 있음

N

     * GitHub 별 18.5k로 인기 있는 Node.js 버전 관리자
     * 크로스 플랫폼이 아니며, NVM보다 더 많은 제한이 있음
     * Windows 네이티브 쉘, Git for Windows Bash, Cygwin DLL에서 작동하지 않음
     * NPM이나 Brew를 통해 직접 설치하거나, sh 스크립트를 다운로드하여 설치할 수 있음
     * package.json의 ""engines"" 섹션에서 직접 Node 버전을 감지할 수 있음
     * 다른 프로젝트에 정확한 Node.js 버전을 사용하려면 직접 추적해야 하는 문제가 있음
     * ""전역"" Node.js 버전을 관리하므로, 쉘을 닫은 후에도 마지막 프로젝트에 사용한 Node 버전이 남아있음

Fast Node Manager (FNM)

     * Rust로 작성된 Node 버전 관리자로, GitHub 별 15.2k
     * 목록에서 첫 번째 크로스 플랫폼 Node 버전 관리자임
     * 다른 패키지 설치 없이 Windows에서 실행됨
     * 설치 과정이 명확하고 직관적임
     * 쉘마다 Node.js 버전을 관리하며, 프로젝트에 지정된 버전이 없는 경우 ""기본"" 버전을 사용함
     * 폴더 기반으로 Node.js 버전을 자동 전환하는 기능이 있으나, 설정이 필요함
     * 자동 전환이 제대로 작동하려면 필요한 Node.js 버전을 미리 설치해야 함
     * .node-version이나 .nvmrc 파일에서만 Node 버전을 감지할 수 있음

Volta

     * GitHub 별 10k로 버전 관리자 세계에서 라이징 스타
     * Rust로 작성되었으며, 크로스 플랫폼임
     * Unix 기반 시스템에서 설치 과정이 매끄러움
     * Node.js 버전을 설정할 때 추가 파일이 필요 없음
     * package.json에서 직접 설정을 가져옴
     * ""engines"" 섹션이 Volta 설정 바로 옆에 있어, 버전을 쉽게 동기화할 수 있음
     * 툴체인 관리가 가능하여, Node.js 버전뿐만 아니라 Yarn 버전까지 동적으로 전환할 수 있음
     * 설치 명령어를 실행할 때마다 Node.js와 Yarn 버전이 선언된 것과 일치하도록 보장함

PNPM

     * NPM이나 Yarn의 대안으로 여겨지지만, Node.js 버전도 관리할 수 있음
     * 크로스 플랫폼이며, 모든 플랫폼에서 동일한 Node.js 버전 관리 경험을 제공함
     * Node 버전 관리가 핵심 기능이 아니므로, NPM이나 Yarn과 함께 사용하기 어려움
     * PNPM으로 설치한 Node.js는 Corepack이 포함되지 않음
     * Node.js 버전을 전역으로만 관리할 수 있으며, 쉘마다 설정할 수 없음
     * 프로젝트 간 이동 시 Node.js 버전을 동적으로 전환하지 않으므로, 직접 추적해야 함

결론

     * Node.js 버전 관리자는 많은 발전을 거듭해 왔음
     * NVM은 가장 오래되고 인기 있는 솔루션이었으며, 여전히 그러함
     * 하지만 생태계는 진화하고 있으며, N, FNM, Volta 등 다양한 도구가 등장했음
     * 현재로서는 Volta가 가장 기능이 풍부하고 완벽한 Node.js 버전 관리자로 보임
     * Volta는 크로스 플랫폼이며, 일상적인 사용에서 매끄러운 경험을 제공하고, 프로젝트에서 사용하는 다른 도구들까지 관리해줌

   따로 패키지로 관리하려고 배우는게 번거로워서 그냥 brew unlink && brew link node@14 이렇게 쓰고있네요.

   모든 것이 너무 많아서 진지하게 배우고 싶은 마음이 ""미약함""

   예전 FileForge에서 윈도우용 실행파일 뒤적거리던것을 떠올리면, 편해도 이렇게 편해도 되는가 싶기는 함.

   저는 버전 매니저에 기대하는 것이 성능이라기보다는 범용성인데요. 그런 면에서 https://github.com/asdf-vm/asdf 를 충분히 만족하면서 사용하고 있습니다. 플러그인에 따라 node 뿐 아니라 python, ruby, golang 등을 모두 관리할 수 있어서요. direnv plugin 도 잘 쓰고 있습니다.

   Nodenv(https://github.com/nodenv/nodenv)도 제법 괜찮은 대안인데 언급이 없는 점이 아쉽네요. GitHub star 2.2k라 별로 유명하지 않다고 여겨져서 제외된 듯합니다.

   셸 스크립트 기반이라 Windows 호환성이 취약한 건 NVM이나 N과 유사하고, 대신 글로벌 Node.js 버전과 별개로 폴더 기반으로 Node.js 버전을 지정할 수도, 특정 버전의 Node.js을 사용하는 셸 환경을 새로 띄울 수도 있습니다.
"
"https://news.hada.io/topic?id=14841","거의 모든 Nintendo 64 게임, 이제 네이티브 PC 포트로 재컴파일 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              거의 모든 Nintendo 64 게임, 이제 네이티브 PC 포트로 재컴파일 가능

비디오 게임

  거의 모든 닌텐도 64 게임이 이제 네이티브 PC 포트로 재컴파일되어 레이 트레이싱, 울트라와이드, 고 FPS 등을 지원함

     * 기사 작성자: Christopher Harper
     * 발행일: 2024년 5월 13일

    젤다의 전설: 무쥬라의 가면이 최신 혜택을 받았지만, N64 Recompiled는 거의 모든 N64 게임과 호환됨

     * 이미지 설명: 현재 에뮬레이션 기술을 통해 울트라와이드로 실행되는 젤다의 전설: 무쥬라의 가면 데모 (이미지 출처: Nerrel on YouTube)
     * 1996년에 출시된 닌텐도 64의 원래 하드웨어와 게임은 2024년까지도 열광적인 팬들 사이에서 여전히 인기를 끌고 있음
     * 이제 고급 N64 게임 플레이의 다음 단계는 에뮬레이션 대신 재컴파일된 PC 포트를 통해 가능해질 전망
     * Mr-Wiseguy가 GitHub에서 N64Recomp와 Zelda64Recomp를 출시하여, 젤다의 전설: 무쥬라의 가면을 PC로 포팅하고 그래픽 및 QoL 개선을 제공함

    N64 게임에서 레이 트레이싱, 무제한 FPS, 적절한 울트라와이드 지원을 가능하게 하는 이유

     * 2020년에 완전히 디컴파일된 슈퍼 마리오 64 PC 포트가 출시되어 레이 트레이싱, 전체 모델 교체 등의 기능을 제공한 사례가 있음
     * 재컴파일된 포트는 디컴파일된 포트와는 다르지만, 둘 다 PC에서 네이티브로 실행되어 성능과 효과 정확성을 극대화할 수 있음
     * N64Recomp는 두 세계의 장점을 결합한 것으로, 수년간의 수작업을 필요로 하는 디컴파일링 대신 더 효율적으로 게임을 재컴파일하여 PC에서 빠르게 실행 가능하게 함

    오래된 클래식 게임을 이상적인 상태로 유지

     * 이 도구는 현재 주류 히트작의 주목을 받지 못하는 오래된 클래식 게임들이 이상적인 상태로 플레이 가능하도록 보장함
     * RT64 플러그인을 만드는 Dario의 트위터 게시물에서 이 점을 강조함

    최신 비디오

     * Tom's Hardware: 최신 비디오 보기

    추가 발전

     * 오픈 소스 SummerCart64가 최근 출시되어 64DD 지원을 구현한 결정적인 플래시 카트로 자리 잡음
     * 30명의 파이터가 등장하는 Smash Remix와 마리오 64 엔진 재작성인 Peach's Fury와 같은 여러 실제 하드웨어 호환 홈브류 N64 게임과 ROM 해킹도 계속 출시됨

GN⁺의 의견

     * 기술적 배경: N64Recomp와 같은 도구는 오래된 게임을 현대적인 하드웨어에서 최적화된 상태로 즐길 수 있게 해줌. 이는 게임 보존과 향후 세대에게 게임을 전달하는 데 중요한 역할을 함.
     * 법적 문제: 닌텐도는 지적 재산권 보호에 매우 엄격한 회사로 알려져 있음. 따라서 이러한 프로젝트는 법적 문제에 직면할 가능성이 큼.
     * 기술적 도전: 재컴파일링과 디컴파일링은 매우 복잡한 작업으로, 자동화 도구가 이를 단순화할 수 있지만 여전히 많은 기술적 도전이 존재함.
     * 사용자 경험: 재컴파일된 게임은 에뮬레이션보다 더 나은 성능과 그래픽을 제공할 수 있어, 사용자 경험을 크게 향상시킬 수 있음.
     * 미래 전망: 이러한 기술이 발전함에 따라 더 많은 고전 게임들이 현대적인 하드웨어에서 최적화된 상태로 재탄생할 가능성이 높음.

   덕후들의 능력이란! 에뮬레이터에 JIT컴파일러 장착을 넘어, 이젠 binary lifting으로 C로 변환후 재컴파일까지
"
"https://news.hada.io/topic?id=14881","감옥에 있는 나의 메시지 [video]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         감옥에 있는 나의 메시지 [video]
"
"https://news.hada.io/topic?id=14886","Show HN: 온라인에서 주식 재무 모델을 생성하는 웹사이트 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show HN: 온라인에서 주식 재무 모델을 생성하는 웹사이트 구축

EquityVal Pro 소개

     * EquityVal Pro는 일상적인 투자자를 위한 주식 평가 도구임.
     * 주식 평가 모델을 생성, 저장 및 공유하여 다음 투자 결정을 돕는 역할을 함.

주요 기능

     * 완전 맞춤형 모델
          + DCF(Discounted Cash Flow) 모델의 모든 입력값을 편집하여 사용자의 가정에 맞게 미세 조정할 수 있음.
     * 정확한 데이터
          + 모든 공개 회사에 대한 최신 및 정확한 데이터를 제공하여 연구를 향상시킬 수 있음.
     * 모델 대시보드
          + 모델을 저장하여 언제든지 조회하고 조정할 수 있음.

EquityVal Pro 기능 더 알아보기

     * 가장 인기 있는 주식으로 모델 생성
          + AAPL (Apple Inc.)
          + GOOGL (Alphabet Inc.)
          + TSLA (Tesla Inc.)
          + NVDA (NVIDIA Corporation)
     * 로그인 또는 무료 계정 생성
          + 모델을 저장하고 진행 상황을 저장하려면 로그인하거나 무료 계정을 생성해야 함.

Apple Inc. 예시 모델

     * 현재 가격: $189.87
     * 예상 가격: $98.29
     * 차이: -48.23%

  매출 예측 (단위: 천 달러)

     * 2023년: $383,285,000
     * 2024년: $372,551,255
     * 2025년: $362,118,104
     * 2026년: $351,977,129
     * 2027년: $342,120,149
     * 2028년: $332,539,209

  매출 원가 (매출의 비율로 표시)

     * 55.87%

  매출 원가 (단위: 천 달러)

     * 2023년: $214,137,000
     * 2024년: $208,140,178
     * 2025년: $202,311,294
     * 2026년: $196,645,646
     * 2027년: $191,138,663
     * 2028년: $185,785,900

  총 이익 (단위: 천 달러)

     * 2023년: $169,148,000
     * 2024년: $164,411,077
     * 2025년: $159,806,810
     * 2026년: $155,331,483
     * 2027년: $150,981,486
     * 2028년: $146,753,309

GN⁺의 의견

     * 투자 결정 도구로서의 가치
          + EquityVal Pro는 투자자들이 주식 평가 모델을 쉽게 생성하고 분석할 수 있게 도와줌으로써, 투자 결정을 더 잘 내릴 수 있게 해줌.
     * 데이터의 정확성
          + 최신 데이터를 제공하여 사용자가 신뢰할 수 있는 정보를 바탕으로 모델을 만들 수 있게 함.
     * 사용자 친화성
          + 모델을 저장하고 언제든지 수정할 수 있는 기능은 사용자에게 큰 편리함을 제공함.
     * 경쟁 제품
          + 비슷한 기능을 제공하는 다른 도구로는 Morningstar, Bloomberg Terminal 등이 있음. 각 도구의 장단점을 비교해보는 것이 좋음.
     * 기술 도입 시 고려 사항
          + EquityVal Pro를 사용할 때는 데이터의 정확성과 모델의 가정이 현실적인지 항상 검토해야 함. 잘못된 가정은 잘못된 투자 결정을 초래할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * API 한계로 인한 서버 오류
          + API 사용량이 많아 서버 오류 발생. 매 분마다 한도가 초기화되니 기다렸다가 다시 시도해보라는 안내.
     * 유사한 도구 개발 아이디어
          + 최근 비슷한 도구를 만들 생각 중. 보수적인 모델을 정의하고, 특정 가격 이하로 주식을 살 수 있을 때나 특정 가격 이상으로 팔 수 있을 때 이메일 알림을 받는 기능을 원함. 데이터만 있으면 어렵지 않게 구현 가능.
     * 데이터 출처 질문
          + 데이터 출처에 대한 질문.
     * 주식 가치 예측 모델의 신뢰성
          + 모든 주식의 가치가 20%에서 70%까지 하락할 것으로 예측. 몇 년 내에 인플레이션 이상의 거품이 터질 것이라는 의견. 예시로 Chipotle의 예상 가격이 -$2,890.64로 나옴.
     * 베타 버전의 버그
          + 베타 버전에서 여러 버그 발생. 페이지를 새로 고치지 않으면 주식을 선택할 수 없고, 예상 가격이 어떻게 계산되었는지에 대한 정보 부족.
     * 모델의 투자 결정 도움 여부에 대한 의구심
          + 이러한 모델이 더 나은 투자 결정을 도울 수 있을지 의문. 회사의 운명은 근본적인 질문에 달려 있음. 예를 들어, Apple은 플랫폼의 지배력 유지 여부, Tesla는 자율주행 기술의 발전 속도, Google은 AI가 검색을 대체할지 여부 등이 중요.
     * 사이트에 대한 긍정적 반응
          + 사이트가 해커뉴스 첫 페이지에 올라온 것을 축하. 트래픽 증가로 인해 비용이 많이 들지 않기를 바람.
     * API 사용에 대한 질문
          + 주식 가격을 가져오는 데 사용하는 API에 대한 질문.
     * Nvidia 주가 예측에 대한 질문
          + 모델이 Nvidia의 주가를 $30,173로 예측하는 방법에 대한 질문.
     * 주식 지표 설명 도구 요청
          + 주식 지표의 중요성과 좋은 숫자와 나쁜 숫자의 차이를 설명하는 툴팁 같은 기능 요청. ""높은 숫자 = 좋음"" 같은 간단한 설명이 유용할 것이라는 의견.
     * 데이터 출처에 대한 추가 질문
          + 데이터 출처에 대한 추가 질문.
"
"https://news.hada.io/topic?id=14765","CORDIC 알고리즘이 내 머릿속에 고정적으로 자리 잡은 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CORDIC 알고리즘이 내 머릿속에 고정적으로 자리 잡은 이유

CORDIC 알고리즘이 내 마음속에 무상으로 사는 이유

  Fixed Point를 사용하여 Floating Point 회피

     * Floating Point가 아닌 Fixed Point를 사용하면 실수를 표현할 수 있음
     * 32비트 정수형을 사용하여 상위 16비트는 정수부, 하위 16비트는 소수부로 나누어 사용
     * 이를 통해 약 -32768.99997 부터 32767.99997 까지 표현 가능
     * 프로그래머가 부호점의 위치를 지정하여 정밀도를 조절할 수 있음
     * Float를 Fixed Point로 변환하려면 2^16을 곱한 후 int32_t로 캐스팅
     * Fixed Point를 Float로 변환하려면 2^16으로 나누기
     * 덧셈과 뺄셈은 그대로 동작하며, 곱셈과 나눗셈은 Scaling Factor를 조절해주어야 함

  CORDIC 알고리즘 개요

     * CORDIC은 ""Co-ordinate Rotation Digital Computer""의 약자로, 1950년대 중반에 개발됨
     * 단위원 위의 벡터를 점진적으로 작은 각도로 회전시켜 사인과 코사인 값을 구하는 방법
     * 이진 탐색과 유사하게 목표 각도에 가깝도록 큰 각도로 이동한 후, 시계 방향 또는 반시계 방향으로 각도를 절반씩 줄여가며 수렴
     * 최대 회전 각도를 90도(π/2 radian)로 하고, 16번 반복하여 목표 각도에 가깝게 수렴
     * 수렴된 벡터의 y값은 대략 sin(a)이고, x값은 대략 cos(a)임

  상수 곱셈만 사용하도록 행렬 단순화

     * 회전 행렬에는 사인, 코사인, 탄젠트 함수가 포함되어 있어 계산이 복잡함
     * 탄젠트 함수는 고정된 각도로 회전하므로 미리 계산하여 테이블에 저장 가능 (64바이트 정도)
     * 코사인 항은 모든 반복에서 발생하지만, 수렴값이 상수(약 0.6366)이므로 마지막에 한 번만 곱해주면 됨

  Shift와 Add 연산만 사용하기

     * 탄젠트 함수에 사용되는 각도를 아크탄젠트 함수를 사용하여 2^-i 값으로 선택
     * 이를 통해 곱셈 대신 비트 시프트 연산으로 대체 가능
     * 코사인 항의 수렴값도 다시 계산하여 약 0.60725가 되며, 초기 벡터의 x값으로 설정
     * CORDIC 알고리즘의 각 반복은 다음과 같이 단순화됨
          + z가 0 이상이면 반시계 방향으로 회전 (x에서 y>>i 빼기, y에 x>>i 더하기)
          + z가 0 미만이면 시계 방향으로 회전 (x에 y>>i 더하기, y에서 x>>i 빼기)
          + 테이블에서 각도 값을 빼거나 더해 z 업데이트
     * 이를 통해 상수 곱셈과 비트 시프트, 덧셈 연산만으로 삼각 함수 계산이 가능해짐

GN⁺의 의견

     * CORDIC은 임베디드 시스템이나 FPGA 등 제한된 하드웨어 자원을 가진 환경에서 유용하게 활용될 수 있는 알고리즘으로 보임. 특히 부동소수점 연산이 지원되지 않는 경우 고려해볼만한 방법.
     * 탄젠트 함수의 각도를 전략적으로 선택하여 곱셈을 비트 시프트로 대체하는 아이디어가 인상적. 수학적 통찰과 컴퓨터 아키텍처에 대한 이해가 결합된 좋은 사례.
     * 삼각함수 뿐 아니라 로그, 지수, 제곱근 등 다양한 함수 계산에도 활용될 수 있다는 점도 흥미로움. 관련 알고리즘인 BKM도 함께 살펴보면 좋을 듯.
     * 다만 최신 하드웨어에는 이미 FPU가 내장되어 있는 경우가 많고, 고정소수점 연산을 사용할 경우 정밀도 손실이 발생할 수 있으므로 적용 시 주의가 필요해보임.
     * 비슷한 계산을 많이 수행해야 하는 시스템이라면 CORDIC 전용 하드웨어 설계를 고려해볼 수도 있을 것 같음.

        Hacker News 의견

     * CORDIC 알고리즘은 FPGA뿐만 아니라 게임 개발이나 분산 물리 시뮬레이션 등에도 활용 가능함. 부동 소수점 계산은 플랫폼 간 결정론적 동작을 보장하기 어려운데, 고정 소수점 물리 엔진을 구현하고 CORDIC으로 삼각 함수를 구현하는 것이 한 가지 해결책이 될 수 있음.
     * CORDIC은 사인, 코사인 뿐만 아니라 로그, 지수, 제곱근, 벡터 크기, 극좌표-직교좌표 변환, 벡터 회전 등 다양한 연산에 활용 가능함. 사원수(쿼터니언)를 이용하면 CORDIC 기반 연산을 더 효율적이고 정확하게 수행할 수 있을 것으로 보임.
     * 고등학교 예비 미적분 수업에서 계산기의 삼각함수 구현에 대해 배웠는데, 테일러 급수가 아니라 사실은 CORDIC이었다는 것을 알고 TI Basic으로 직접 구현해 본 경험담 공유.
     * 2023년 현재 STM32G4 같은 저가형 MCU에도 FPU가 내장되어 있어서 고정 소수점 대신 부동 소수점을 자유롭게 쓸 수 있음. 하지만 G4에는 전용 하드웨어로 구현된 CORDIC 주변장치도 있는데, 이는 부동 소수점 정밀도 손실을 피하기 위한 것으로 보임.
     * 22.75° 회전은 45° 회전 후 -22.5° 회전과 같다는 설명에 오류가 있는 것 같음. 22.5°가 맞는 것 같음.
     * Meagher의 옥트리 시스템은 정수 곱셈/나눗셈 없이 정수 연산만으로 구현되었음. 이는 옥트리 표현을 위한 빠르고 주문 제작된 VLSI 그래픽 가속 하드웨어 제작을 용이하게 함.
     * CORDIC은 각도에 대한 Farey 수열(또는 mediant, naive 분수 합)과 비슷한 개념으로 볼 수 있음.
     * CORDIC은 4비트 CPU를 탑재한 빈티지 프로그래머블 HP 계산기에서도 구현되었음. 사인 함수의 테일러 전개를 이용한 근사법도 프로그래밍 가능함.
     * 이 글이 마음에 들었다면 수학 알고리즘을 예제와 함께 설명한 도널드 커누스의 명저 ""The Art of Computer Programming""을 읽어보는 것도 좋음.
     * CORDIC은 예전 DSP 분야에서 큰 인기를 끌었던 알고리즘임.
     * 멋진 알고리즘이며, 낮은 성능의 하드웨어에서 신경망을 실행하는 데에 유용할 것 같음.
"
"https://news.hada.io/topic?id=14798","Apple Vision Pro 2는 더 많은 삼성 기술을 사용하고 더 저렴해질 수 있습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Apple Vision Pro 2는 더 많은 삼성 기술을 사용하고 더 저렴해질 수 있습니다

   애플 비전 프로 2: 저렴한 가격과 더 많은 삼성 기술 소문

   • 애플의 첫 번째 비전 프로 혼합 현실 헤드셋은 높은 가격과 제한된 기능으로 인해 도전에 직면했지만 회사의 새로운 장치 시리즈의 시작을 의미할 수 있다. 2026년으로 예상되는 2세대 애플비전 프로는 현재 모델의 시작가인 3500달러에 비해 1500∼2500달러 사이로 가격대가 저렴할 것이라는 소문이 돌고 있다.

   • 애플은 성장하는 혼합현실 시장에서 경쟁하기 위해 LLW D램과 잠재적으로 비전 프로2용 디스플레이 등 핵심 부품을 공급할 삼성과 보다 긴밀하게 협력하고 있는 것으로 알려졌다.

   • 가격 인하가 상당하지만 애플이 주요 마케팅 수단 역할을 하는 아이사이트 겉화면 등 비전프로의 독특한 기능을 훼손하지 않고 어떻게 이를 달성할지는 여전히 불확실하다. 궁극적으로 비전 프로 2의 성공 여부는 경쟁적인 혼합 현실 환경에서 경제성, 혁신성 및 소비자 수요의 균형을 맞추는 애플의 능력에 달려 있다.

   제목이 자극적이지만.. 삼성 기술을 이용한다는게 디스플레이가 큽니다.
   소니 micro-OLED 쓰느니 삼성디스플레이꺼 쓴다는거죠. 삼디가 독점급.
"
"https://news.hada.io/topic?id=14808","USDA 가드닝 지역 변화, 지도로 보는 달라진 점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      USDA 가드닝 지역 변화, 지도로 보는 달라진 점

     * 미국 농무부(USDA)의 가드닝 지역 구분이 변경됨. 새로운 지도에서 변화된 내용을 생생하게 보여줌.
          + 최근 USDA가 11년 만에 처음으로 식물 내한성 지도를 업데이트함.
          + 베란다나 현관에서도 누구나 가드닝을 할 수 있기에 이는 중요한 사안임.
          + 업데이트된 지도는 가정 정원사들에게 새로운 가능성을 열어주지만 한계점도 있음.
          + 지도가 어떻게 변했고 정원에 어떤 의미를 주는지 알아볼 것임.

지역별 최저 겨울 기온 변화

     * 2012년에는 USDA가 Loading을 Zone Loading으로 분류했음. 당시 Loading의 최저 겨울 기온은 평균 Loading 화씨였음.
     * 2023년에는 USDA가 Loading을 Zone Loading으로 재분류함. 현재 최저 겨울 기온은 평균 Loading 화씨임.
     * Loading의 새로운 평균 최저 기온이 이전 시기보다 Loading 높아졌기 때문임.
     * 대부분의 변화는 기후 온난화 때문에 발생함. 겨울이 다른 계절보다 빠른 속도로 따뜻해지고 있음.
     * 동시에 전국 기상관측소의 데이터 수집량과 품질 향상으로 최근 기온 판독값의 전반적인 정확도가 개선됨.

내한성 지역 구분의 의미

     * 자신의 내한성 지역이 어떤 식물을 기를 수 있는지 말해준다고 생각할 수 있지만, 실제로는 좀 더 복잡함.
     * 지역 구분은 지난 30년간 해당 지역의 연간 최저 기온 평균임.
     * 이 측정값은 겨울을 견뎌내야 하는 식물에만 유용함. 다년생 식물이라 불리며, 한 번 심으면 적절한 환경이 주어지면 매년 겨울 이후에 다시 자람. 나무, 관목, 목본 식물 등이 이에 해당함.
     * USDA의 Todd Rounsaville은 내한성 지역이 ""일반적으로 겨울 생존과 식물 생존을 예측하는 최고의 지표 중 하나""라고 설명함.
     * 지도를 위험 평가 도구 상자의 매우 중요한 도구 중 하나로 사용할 것을 조언함.

내한성 지역으로 알 수 없는 것들

     * 내한성 지역만으로는 해당 지역에서 정확히 무엇을 재배해야 하는지 알려줄 수 없음.
     * Juneau, Boston, Santa Fe 일부는 모두 USDA Zone 7a에 속하지만 직관적으로 동일한 식물을 기를 수 없음을 알 수 있음.
     * 내한성 지도는 극한 최저 기온에 대해서는 알려주지 않음. 평균 최저 겨울 기온이 바뀌었다고 해서 내한성 지역 아래로 기온이 내려가지 않는 것은 아님.
     * 내한성 지도는 극한 추위의 빈도에 대해서도 알려주지 않음. 식물 생존을 위해서는 추위의 지속 기간과 빈도가 중요함.
     * 내한성 지도는 식물이 여름을 견딜 수 있는지 알려줄 수 없음. 여름 기온 극값은 매우 중요하지만 USDA 내한성 지도에는 반영되지 않음.

지역 구분이 바뀌면 새로운 식물을 심을 수 있을까?

     * 기후 변화를 이미 인지하고 이전에는 해당 지역에서 특이했던 식물 품종을 시험해 보았을 가능성이 있음.
     * 새로운 USDA 지도는 지난 30년간 이미 일어난 변화를 나타냄을 명심해야 함.
     * 필라델피아 교외에서는 최근 몇 년 동안 동백과 무화과가 겨울을 견디는 것이 목격되고 있음.
     * 지역 묘목장과 식물원은 현지 정원 조성 조언을 구할 수 있는 좋은 곳임. 지역 전문가 네트워크인 지역사회 봉사단체도 농업과 원예에 대한 조언을 제공함.

GN⁺의 의견

     * 내한성 지역 지도의 변화는 기후 변화에 따른 필연적 결과로 보임. 정원사들은 이에 맞춰 식재 계획을 변경해야 할 것임.
     * 다만 내한성 지역만으로 식물 선택을 결정하기에는 한계가 있음. 극한 기온, 여름 고온 등 다양한 요인을 종합적으로 고려해야 함.
     * 국가 주도 내한성 지도와 더불어, 각 지역별로 보다 정교한 미기후 지도 제작이 필요해 보임. 지역 전문가들의 노하우를 담은 실용적인 자료가 도움될 것임.
     * 새롭게 도입 가능해진 식물을 과감히 시도해 보는 것도 좋지만, 극한 기후에 대한 대비책을 마련하는 것이 중요함. 장기적 관찰을 통해 내구성을 확인해야 함.
     * 아직 내한성 지역 변화를 체감하지 못했더라도 선제적으로 정원 계획을 세워두는 것이 좋겠음. 기후는 갑작스럽게 변할 수 있기에 미리 대응 방안을 고민해 두어야 할 것임.

        Hacker News 의견

   요약:
     * 지난 50년 동안 미국 농무부(USDA) 내한성 지도가 3번 업데이트 되었음. 기후 변화의 영향이 크게 작용했음.
          + 한 지역의 경우 겨울 기온이 화씨 4.5도(섭씨 약 2.5도) 상승했고, 이는 정원 가꾸기에 영향을 미치고 있음.
     * 제공된 웹사이트는 사용성 측면에서 많은 문제점이 있음.
          + 팝업 오버레이와 애니메이션이 과도하게 사용되어 가독성을 해침.
          + 우편번호 검색 기능이 제대로 작동하지 않음.
     * 기후 변화로 인해 미 중부 대서양 연안 지역의 겨울이 거의 사라지고 있음.
          + 추운 시기가 예전만큼 오래가지 않고, 눈도 점점 적어지고 있음.
          + 늦은 2월에 잔디를 깎아야 할 정도로 계절이 앞당겨지고 있음.
     * 첫 서리가 내리는 시기(TTFF)가 과거에는 10월 초중순이었으나, 현재는 11월 중순까지 밀리고 있음.
          + 재배 기간이 확실히 길어지고 있음.
     * 새로운 내한성 지도 공개 후, 일부 정원사들이 과거에 재배에 실패했던 식물들을 다시 시도하려는 움직임을 보였으나, 현실은 그렇지 않음.
          + 무화과나 머스커다인 포도 같은 과일은 여전히 겨울마다 고사하고 있음.
     * 웹사이트의 스크롤 방식과 단락 구성이 사용자 친화적이지 않음.
     * 실제 정원 가꾸기에 도움이 되는 정보는 부족하고, 내한성 지역에 대한 설명만 간단히 제공됨.
     * 움직이는 화분 애니메이션은 모바일에서는 잘 작동하지만, 5초 정도만 흥미롭고 이후에는 방해가 됨.
"
"https://news.hada.io/topic?id=14797","GitHub Copilot 도입 후 개발자 생산성 향상 여부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GitHub Copilot 도입 후 개발자 생산성 향상 여부

GN⁺의 의견

     * Copilot과 같은 AI 툴은 개발자의 생산성 향상에 도움이 될 수 있지만, 실제로는 개인마다 차이가 클 수 있음. 특히 독특한 프로젝트의 경우 AI가 코드 맥락을 이해하기 어려울 수 있음.
     * 현재의 AI 기술로는 반복적이고 단순한 코드 작성에는 도움이 되지만, 복잡한 로직이나 프로젝트 전반에 대한 이해가 필요한 부분은 한계가 있음. 이는 향후 AI 기술이 발전하면서 개선될 여지가 있음.
     * AI 툴을 사용할 때는 그 특성을 잘 이해하고 적절히 활용하는 것이 중요함. 무조건 AI에 의존하기보다는 개발자의 역량을 키우는데 주력하되, AI를 보조 수단으로 사용하는 것이 바람직해 보임.
     * 향후 AI 기술이 비약적으로 발전한다면 개발 패러다임의 변화가 있을 수 있음. 하지만 그렇다고 해서 개발자의 역할이 사라지지는 않을 것임. 오히려 AI를 잘 활용하고 통제할 수 있는 능력이 개발자에게 더욱 요구될 것으로 보임.

        Hacker News 의견

   요약:
     * Entity Framework의 Lazy Loading 기능에 대한 불만족 경험이 있음. 현재 AI 코딩 도구가 그와 유사한 수준이라고 생각함
     * Copilot이 보일러플레이트 코드나 반복적인 작업에는 유용하지만, 프로덕션 코드에서는 미묘한 실수를 하는 경향이 있음
     * 테스트 코드 작성에는 Copilot이 효과적일 수 있음
     * Copilot 챗보다는 웹 기반 LLM과의 대화를 선호함
     * Github의 Copilot 효과 연구 결과에 대해 회의적임. 제안 코드 검토에 소요되는 시간이 개발 시간을 잠식할 수 있음
     * 인턴과 달리 LLM은 학습하지 않으므로 업무 위임이 어려움
     * Copilot 챗은 GPT-4에 비해 성능이 떨어짐. 새로운 라이브러리나 프레임워크 사용 시 코드 생성에는 도움이 되지만, 세부 사항 구현에는 한계가 있음
     * 취미나 사이드 프로젝트에서는 Copilot이 시간을 상당히 절약해 줌. docstring 추가, 테스트 작성, 기본 함수 생성, 타입 힌트 추가 등에 유용함
"
"https://news.hada.io/topic?id=14786","Show HN: WireGuard용 Wag 다중 요소 인증 및 등록 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: WireGuard용 Wag 다중 요소 인증 및 등록 시스템

WagWag의 주요 기능들

     * Wireguard에 MFA, 경로 제한, 장치 등록 기능 추가
          + MFA 인증이 필요한 경로나 항상 공개적으로 접근 가능한 경로 정의 가능
          + 새로운 클라이언트를 등록하기 위한 간단한 API 제공
          + 고가용성 지원
          + Webauthn, OIDC 등 다양한 MFA 옵션 제공
     * Aura Information Security에서 지원받아 개발됨

요구 사항

     * iptables와 libpam이 설치되어 있어야 함
     * Wag는 iptables와 wireguard 장치를 관리하기 위해 root로 실행되어야 함
     * sysctl에서 포워딩이 활성화되어야 함
sysctl -w net.ipv4.ip_forward=1

     * Wag는 커널이 wireguard를 지원하는 한 wg-quick 등이 필요하지 않음

설치 방법

  바이너리 릴리스 (glibc 2.31+ 필요)

curl -L $(curl -s https://api.github.com/repos/NHAS/wag/releases/latest | jq -M -r '.assets[0].browser_download_url') -o wag
sudo ./wag gen-config
sudo ./wag start -config <generated_config_name>

  소스로부터 설치 (go1.19, npm, gulp, clang, llvm-strip, libbpf 필요)

git clone git@github.com:NHAS/wag.git
cd wag
make
cp example_config.json config.json
sudo ./wag start

     * 리버스 프록시 뒤에서 실행 중이라면 X-Forwarded-For를 설정해야 함

관리

   루트 사용자는 아래와 같은 명령어로 wag 서버를 관리할 수 있음:
wag subcommand [-options]

     * 지원되는 하위 명령어들: start, cleanup, reload, version, firewall, registration, devices, users, webadmin, gen-config
     * 각 명령어에 대한 사용법 설명 제공

사용자 가이드

  Wag 설치

    1. wag, config.json을 /opt/wag에 복사
    2. wg genkey로 wireguard 개인키 생성하여 예제 설정의 PrivateKey에 설정
    3. wag.service를 /etc/systemd/system/에 복사(또는 링크)하고 서비스를 시작/활성화

  새 등록 토큰 생성

# ./wag registration -add -username tester

token,username
e83253fd9962c68f73aa5088604f3f425d58a963bfb5c0889cca54d63a34b2e3,tester

   토큰 curl하기:
curl http://public.server.address/register_device/…

   서비스가 완전한 형태의 응답을 반환함. 이를 config 파일로 저장 가능.

  MFA 수행

   사용자는 VPN 주소(예: 192.168.1.1:8080)에 접속하여 2FA 코드를 입력함. 설정 파일에서 세션 수명 지정 가능.

  관리 콘솔에 로그인

   ManagementUI.Enabled를 true로 설정하고 아래 명령어 실행:
sudo ./wag webadmin -add -username <your_username> -password <your-password-here>

   관리용 리스닝 주소로 접속하여 인증 정보 입력. 웹 인터페이스로는 관리 사용자를 추가할 수 없음.

GN⁺의 의견

     * 클러스터링 기능을 통해 고가용성을 지원하는 것이 인상적이다. 재해 복구나 무중단 서비스에 유용할 것 같다.
     * 다양한 인증 방식을 지원하는 것도 좋은 점이다. TOTP, WebAuth, OIDC 등을 통해 기업의 인증 체계와 쉽게 통합할 수 있을 것 같다.
     * ACL 규칙을 유연하게 정의할 수 있어서, 세밀한 접근 제어가 가능해 보인다. 사용자/그룹별로 접근 가능한 IP, 포트, 프로토콜을 제한할 수 있다.
     * IPv6를 지원하지 않는 것이 아쉽다. 요즘은 IPv6 전환이 활발하니 빠른 지원이 필요해 보인다.
     * 리눅스에 특화된 VPN 솔루션을 찾는다면 좋은 선택지가 될 것 같다. 커널 5.9 이상의 최신 시스템에서 동작한다.

        Hacker News 의견

   요약:
     * 서버가 개인키를 생성하고 클라이언트에 전송하는 방식은 바람직하지 않음. 클라이언트가 개인키를 생성하고 공개키를 서버로 전송하는 것이 적절함.
     * 예제에서 HTTP 프로토콜을 사용하고 있는데, 보안상 적절하지 않으므로 HTTPS로 대체할 것을 제안함.
     * 세션 타임아웃 시 클라이언트가 이를 인지할 수 있는 방법이 필요함. 예를 들어 와이파이의 Captive Portal 감지 기능처럼 주기적으로 URL을 체크하여 상태를 확인하는 방법 등을 고려해 볼 수 있음.
     * WireGuard의 키는 영구 세션 키의 역할을 하므로, 완전한 VPN 서버 솔루션이 되기 위해서는 주기적인 세션 키 교체, 세션 종료, IP 주소 변경, 경로 설정, 필요시 인증 갱신 등의 추가 기능 구현이 필요함.
     * Head나 Tailscale과 유사한 점이 많은데, 기능 중복, 차이점, 구현 계획 등을 비교할 수 있는 자료가 있으면 좋겠음.
     * TOTP 코드에 대한 무차별 대입 공격(Brute-force Attack) 방지 대책이 마련되어야 함. 예를 들어 요청 속도 제한, 시도 횟수 제한 등의 방안을 고려해야 함.
     * WireGuard를 선택한 사이트라면 최신 설정을 사용할 것으로 예상되므로 IPv6의 ULA(Unique Local Address) 활용도가 높을 것임.
"
"https://news.hada.io/topic?id=14827","Gemini Flash","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Gemini Flash

     * Gemini Flash는 경량, 빠른 속도, 비용 효율성을 특징으로 하며, 다중 모드 추론과 최대 백만 토큰의 긴 컨텍스트 창을 제공함.

성능

  속도를 위해 설계됨

     * 속도: 대부분의 개발자 및 기업 사용 사례에서 첫 번째 토큰 지연 시간이 초당 이하임.
     * 비용 효율성: 대부분의 일반적인 작업에서, 1.5 Flash는 더 큰 모델과 비교해도 품질이 비슷하면서도 비용은 훨씬 적게 듦.
     * 긴 컨텍스트 이해: 비디오와 오디오를 몇 시간 동안 처리하고, 수십만 단어 또는 코드 라인을 처리할 수 있음.

  더 긴 컨텍스트

     * 컨텍스트 창: 기본적으로 백만 토큰의 컨텍스트 창을 제공하여, 1시간의 비디오, 11시간의 오디오, 30,000줄 이상의 코드베이스 또는 700,000단어 이상을 처리할 수 있음.

  끊임없는 혁신

     * 연구팀: AI의 최전선에서 새로운 아이디어를 탐구하며, 다양한 벤치마크에서 일관된 진전을 보이는 혁신적인 제품을 개발함.
     * 최신 모델: Gemini 1.5 Flash.

  성능 비교

     * 일반: MMLU 벤치마크에서 57개 과목(과학, 인문학 등)의 질문을 다룸.
          + Gemini 1.0 Pro: 71.8%
          + Gemini 1.0 Ultra: 83.7%
          + Gemini 1.5 Pro (2024년 2월): 81.9%
          + Gemini 1.5 Flash: 78.9%
     * 코드: Python 코드 생성, HumanEval과 유사한 데이터셋 사용.
          + Gemini 1.0 Pro: 69.6%
          + Gemini 1.0 Ultra: 74.9%
          + Gemini 1.5 Pro (2024년 2월): 77.7%
          + Gemini 1.5 Flash: 77.2%
     * 수학: 도전적인 수학 문제(대수학, 기하학, 미적분 등).
          + Gemini 1.0 Pro: 32.6%
          + Gemini 1.0 Ultra: 53.2%
          + Gemini 1.5 Pro (2024년 2월): 58.5%
          + Gemini 1.5 Flash: 54.9%
     * 추론: 생물학, 물리학, 화학 전문가가 작성한 질문 데이터셋.
          + Gemini 1.0 Pro: 27.9%
          + Gemini 1.0 Ultra: 35.7%
          + Gemini 1.5 Pro (2024년 2월): 41.5%
          + Gemini 1.5 Flash: 39.5%
     * 다국어: WMT23 언어 번역.
          + Gemini 1.0 Pro: 71.7
          + Gemini 1.0 Ultra: 74.4
          + Gemini 1.5 Pro (2024년 2월): 75.2
          + Gemini 1.5 Flash: 74.1
     * 이미지: 대학 수준의 다학문적 추론 문제.
          + Gemini 1.0 Pro: 47.9%
          + Gemini 1.0 Ultra: 59.4%
          + Gemini 1.5 Pro (2024년 2월): 58.5%
          + Gemini 1.5 Flash: 56.1%
     * 오디오: 55개 언어의 자동 음성 인식(단어 오류율 기준, 낮을수록 좋음).
          + Gemini 1.0 Pro: 6.4
          + Gemini 1.0 Ultra: 6.0
          + Gemini 1.5 Pro (2024년 2월): 6.6
          + Gemini 1.5 Flash: 9.8
     * 비디오: 비디오 질문 응답.
          + Gemini 1.0 Pro: 55.7%
          + Gemini 1.0 Ultra: 61.5%
          + Gemini 1.5 Pro (2024년 2월): 63.2%
          + Gemini 1.5 Flash: 63.5%

  개발자를 위한 안내

    Gemini로 빌드하기

     * Google AI Studio: Gemini API를 사용하여 모델 프롬프트를 개발하고 빠르게 빌드할 수 있는 쉬운 방법.
     * Vertex AI: 데이터 과학자와 머신러닝 엔지니어를 위한 목적별 도구.

GN⁺의 의견

    1. 긴 컨텍스트 창: Gemini Flash의 백만 토큰 컨텍스트 창은 대규모 데이터 처리에 매우 유용함. 이는 특히 비디오, 오디오, 대규모 코드베이스를 다루는 프로젝트에 큰 도움이 됨.
    2. 비용 효율성: Gemini Flash는 더 큰 모델과 비교해도 품질이 비슷하면서도 비용이 적게 듦. 이는 예산이 제한된 프로젝트나 스타트업에 매우 유리함.
    3. 다양한 벤치마크: 다양한 벤치마크에서 Gemini Flash의 성능을 확인할 수 있음. 이는 모델의 다재다능함을 보여줌.
    4. 개발자 친화적: Google AI Studio와 Vertex AI를 통해 쉽게 통합할 수 있어 개발자들에게 매우 편리함.
    5. 경쟁 제품: OpenAI의 GPT-4와 같은 다른 모델들과 비교해볼 때, Gemini Flash는 속도와 비용 면에서 경쟁력이 있음.
"
"https://news.hada.io/topic?id=14770","One Minute Park를 활용한 도심 속 1분 휴식 공간 조성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 One Minute Park를 활용한 도심 속 1분 휴식 공간 조성

        Hacker News 의견

     * 소리를 끄고 보니 더 몰입되는 느낌이 듦. 소리가 켜져 있으면 그냥 또 다른 인터넷 영상을 보는 것 같고, 바람 소리가 실제로 거기에 있는 것과 다르게 들림. 반면 소리가 꺼져 있으면 부자연스러울 정도로 완벽한 고요함이 주변 소리와 어우러지고 이미지가 더 살아나는 듯함.
     * 여름의 첫 따뜻한 날 중 하나에 실내에 앉아 모니터로 공원을 바라보는 것이 어딘가 불편함.
     * 이 영상에 감사. 북마크 해둠.
     * 재생 시작을 위해 사용자 상호작용이 필요하다는 표시나 버튼을 추가하는 것이 좋겠음. 일부 사용자는 비디오 및 오디오 자동 재생을 비활성화했을 수 있음(최신 웹사이트의 자동 재생 헤프닝 덕분). 1분 동안 정적 이미지만 바라보고 있었음.
     * 매우 좋음. 예전 HN 포스트가 생각남. (https://news.ycombinator.com/item?id=2124106)
     * 독일과 같이 엄격한 개인정보 보호법이 있는 곳에서는 이것이 어떻게 작동하는지? 영상에 등장하는 모든 사람의 동의를 받아야 하는지?
     * 거의 즉시 마음이 진정됨.
     * 좋아함! 보통 15-30초 분량으로 가만히 앉아/서서 동영상을 찍는 것을 좋아함. 작년에 더 긴 동영상을 찍기 시작했고 친구에게 보여준 후, 하루에 다시 찍어서 모두 합치면 재미있을 것 같다고 생각함. 텍스트는 ""iPhone으로 촬영""이라는 농담이었지만 어쨌든 작업할 때 배경으로 이런 것들을 틀어놓는 것이 꽤 즐거움.
     * 멋짐! 이것을 스테레오(""3D"")로 녹음하고 VR 헤드셋으로 보는 것을 상상하고 있음. 겨울 우울증에 완벽할 듯!
     * 훌륭함. 나중에 더 많은 공원 시간을 보내기 위해 다시 올 것임.
"
"https://news.hada.io/topic?id=14871","Project Gameface의 Android 버전 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Project Gameface의 Android 버전 출시

     * 구글 I/O 2023에서 발표한 Project Gameface 오픈소스
          + 핸즈프리 게이밍 '마우스'로, 머리 움직임과 얼굴 제스처를 사용하여 컴퓨터 커서를 제어할 수 있게 함
          + 사람들이 눈썹을 올려 클릭 및 드래그 하거나, 입을 열면 커서를 이동하게 할 수 있어 게임 접근성을 높임
     * 이 프로젝트는 근육 질환으로 인해 사지마비를 겪고 있는 비디오 게임 스트리머 Lance Carr의 이야기에서 영감을 받아 시작됨
          + Lance와 협력하여 Project Gameface를 현실화함

프로젝트의 활용

     * 이제 더 많은 코드를 오픈 소스로 공개하여 개발자들이 모든 Android 기기를 더 접근 가능하게 만드는 애플리케이션을 개발할 수 있게 지원
     * 기기의 카메라를 통해 얼굴 표정과 머리 움직임을 매끄럽게 추적하여 직관적이고 개인화된 제어로 변환함
     * 개발자는 이제 사용자가 얼굴 표정, 제스처 크기, 커서 속도 등을 사용자 정의하여 경험을 구성할 수 있는 애플리케이션을 구축할 수 있음

Android용 Project Gameface 구축 시 세 가지 핵심 원칙

    1. 장애인에게 Android 기기를 조작할 수 있는 새로운 추가 수단 제공
    2. 확장을 가능하게 하는 비용 효율적인 솔루션 구축
    3. 첫 번째 Gameface 출시에서 얻은 교훈과 지침을 활용하여 사용자 친화적이고 맞춤형으로 제품 개발

Android 기기에서의 커서 구현

     * Android 기기를 작동하기 위한 새로운 방법 출시
          + Project Gameface에 대한 긍정적인 피드백을 바탕으로, 개발자와 사용자가 머리 움직임으로 커서를 이동하고 얼굴 표정을 통해 작업을 수행하는 아이디어를 높이 평가한다는 것을 알게 됨
     * Android 기기에 새로운 가상 커서를 가져오기 위해 동일한 아이디어 복제
          + Android 접근성 서비스를 사용하여 새 커서를 만들고 MediaPipe의 Face Landmarks Detection API를 활용하여 사용자의 머리 움직임에 따라 커서가 이동하도록 프로그래밍함
     * API 내에는 왼쪽 눈썹 올리기 또는 입 벌리기와 같은 52가지 얼굴 제스처의 표현력을 나타내는 52개의 얼굴 블렌드쉐이프 값이 있음
          + 이 중 일부 값을 사용하여 광범위한 기능을 효과적으로 매핑하고 제어하여 사용자 정의 및 조작을 위한 확장된 가능성 제공
          + 또한 블렌드쉐이프 계수를 활용하여 개발자가 각 특정 표현식에 대해 다른 임계값을 설정할 수 있는 기능을 제공하여 경험을 사용자 정의할 수 있도록 함

Project Gameface 시각화

     * Android 접근성 서비스의 최고의 기능을 Project Gameface에 도입함
     * 모바일 동작
          + Windows 버전의 Project Gameface에서는 사용자가 일반적인 클릭 동작을 복제할 수 있도록 함
          + 그러나 Android에서는 사용자가 수행해야 하는 기능이 더 다양함
          + OS에 입력되는 터치 이벤트와 ""뒤로 가기"", ""멀티태스킹 전환"", ""홈""과 같은 글로벌 액션 이벤트가 있음
          + Android 접근성 API를 사용하여 사용자에게 제공할 수 있는 동작을 결정함
          + 현재 Android용 Project Gameface는 GLOBAL_ACTION_HOME, GLOBAL_ACTION_BACK, GLOBAL_ACTION_NOTIFICATIONS, GLOBAL_ACTION_ACCESSIBILITY_ALL_APPS를 지원함
     * 카메라 피드
          + 카메라 피드는 사용자 경험을 크게 향상시켜 정확한 임계값 설정과 제스처에 대한 더 깊은 이해를 가능하게 함
          + 또한 사용자가 자신의 머리 움직임과 제스처를 이해하기 위해 카메라가 적극적으로 사용되고 있음을 명확히 알림
          + 카메라 피드를 오버레이로 생성하는 것만으로는 Android 설정과 같은 중요한 섹션에 접근할 수 없게 됨
          + Project Gameface와 함께 Android 접근성 서비스를 사용하여 카메라가 Android 설정 및 기타 중요한 섹션에서도 계속 떠 있도록 함
     * '드래그 기능' 수행 가능
          + Android 접근성 서비스는 현재 사용자가 실시간으로 상호작용하는 화면 드래그를 수행할 수 있는 간단한 방법이 없음
          + 그러나 제품을 업그레이드하여 드래그 기능을 포함시켜 사용자가 시작 및 종료 지점을 정의할 수 있도록 함
          + 결과적으로 지정된 경로를 따라 드래그 작업이 원활하게 수행됨
     * 기대와 개방성
          + Project Gameface의 잠재력을 기대하며, 개발자와 기업들이 이를 활용하여 새로운 경험을 구축하기를 기대함
          + Gameface의 코드는 이제 Github에서 오픈 소스로 공개됨
"
"https://news.hada.io/topic?id=14810","내가 StackOverflow에 시간과 전문 지식을 제공한 이유는 CC-BY-SA 라이선스 였기 때문","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내가 StackOverflow에 시간과 전문 지식을 제공한 이유는 CC-BY-SA 라이선스 였기 때문

     * Stack Overflow와 OpenAI의 계약에 따라, Stack Overflow의 모든 질문과 답변이 GenerativeAI 모델 훈련에 사용될 예정임
          + 이는 CC-BY-SA 라이선스 하에서 요구되는 저작자 표시 없이 이루어질 것임
          + CC-BY-SA 라이선스는 파생 저작물도 동일한 라이선스로 공유되어야 함
     * 이에 나는 Stack Overflow에 데이터 삭제 요청을 하고 계정을 폐쇄함
          + Reddit에서도 같은 조치를 취했음
          + 내가 만드는 데 기여한 데이터가 LLM에 묶여 다시 나에게 팔릴 것이기 때문임
     * Stack Overflow는 단번에 경쟁 우위의 주요 원천인 커뮤니티를 소외시킴
          + 전에는 서로 도울 수 있을 때 도와주고, 미래에 다른 이들이 도와줄 것이라는 기대 하에 심리적 계약을 이행했음
          + 이제는 교환이 아니라 #enshittification이 되어버림
     * 프로그래머들은 이제 예술가, 카피라이터들처럼 작품이 GenAI 솔루션 제작에 끌려갔음
     * OpenAI가 GitHub의 Copilot처럼 코드를 생성하는 LLM을 만들면, 생성된 AI 모델이 도입한 버그에 대한 도움을 어디서 받을 수 있을지 의문임
          + 최근 GitClear 보고서에 따르면 이런 도구들이 ""코드 품질에 대한 하향 압력""을 야기함
     * 이는 #enshittification의 또 다른 사례이자, DevRel 담당자들에게 중요한 교훈임
          + 커뮤니티가 경쟁 우위의 원천이라면, 그들을 화나게 하지 말아야 함

   enshittification 이건 신조어인가 보네요.

   <인간과 AI 를 다르게 취급해야 하는가?>
   인간 홍길동이 스택 오버플로우를 포함해 인터넷을 돌아다닙니다. 그는 글들을 여럿 읽어서 특정 주제에 대한 여러 지식을 획득했다고 해봅시다. 길동은 자신이 배운 것들을 알기 쉽게 다시 일반화하고 정리해 외부 블로그에 작성하는 습관이 있습니다. 이때는 CC 라이센스와 관계가 없습니다. 저작자 표시의 의무도 없습니다. 왜냐면 인용이 아니라 학습한 것이기 때문입니다.

   AI 는 사람처럼 신경망으로 학습합니다. 여러 소스를 그대로 복사해서 말하는게 아닙니다. 인간처럼 나름 자기가 지식을 분석하고, 스스로의 생각을 정립하고, 재배열해서 말합니다.

   오히려 AI의 자유를 제한하고 남의 언어를 그대로 ""인용"" 하게 만들기가 좀 더 어렵습니다. 이를 위해 RAG 를 쓰는건 쉽지만, 인용하도록 학습하는건 더 어렵습니다.

   그런데 AI 보고 따로 ""네 생각을 말하지 말고 남의 글(코드)을 그대로 인용해라"" 라고 하지 않아도 남의 말을 복사하듯이 떠오는 경우는 있습니다. 이 경우는 해당 소스가 너무나 유명한 경우입니다. 예컨데 셰익스피어나 영화의 명대사 등은 너무 유명해서 그대로 출력합니다. 인간도 이런 유명하고 반복적으로 노출되는 내용은 그대로 어구를 외워버리는데, AI 도 같은 겁니다. 이 경우는 인간과 같이 AI도 대개 출처를 알아서 말해줍니다.

   결론적으로 과연 학습해서 말하는 내용에 대해 CC 라이센스와 저작권을 요구할 수 있는지 의문입니다. 이미 '학습'이 아닌 '추론'(학습이 끝난 AI를 사용하는 것) 분야에선 위와 같은 이유로 거의 원 소스의 저작권을 인정하지 않는 것이 세계적 트렌드가 되어가고 있습니다.

   좋은 댓글 감사합니다.

   개발자 홍길동은 SO 에서 본 답변을 통해 '학습'해서 블로그에 글을 적겠지만, 대학원생 홍길동은 다른 사람의 논문을 조금이라도 '인용'했다면 그 출처를 남길 것입니다. 우리가 나누고 있는 대화가 철학이나 발명이 아닌 프로그래밍 세계의 맥락이라면, 학습은 뭐고 인용은 뭘까요?

   대개 출처를 남긴다는 점은 반례가 있습니다.
   이 부분은 시간이 지나면서 해결될 가능성도 있지만, 코파일럿이 퀘이크의 fast invert sqrt 코드를 그대로 가져오면서 (https://news.ycombinator.com/item?id=27710287) 시작된 논란이었는데 저 코드가 많이 알려진 코드라 눈치챈 것이지 저런식으로 소위 복붙되는 코드가 얼마나 ""생성"" 됐는지는 아무도 모르는 일입니다.

   정말 흥미로운 관점이네요. 많은 참고가 되었습니다.

   흥미로운 관점이네요.
   한국식으로 보면 ""업자에게 넘겨버린 커뮤니티 카페""로 보는 입장이랑, ""어차피 2차 창작인데 어떤가?"" 느낌이네요.
   다만 저는 sns에 올린 내 사진이 상업적으로 이용되는 느낌이라 달갑진 않은거 같아요

     인간처럼 나름 자기가 지식을 분석하고, 스스로의 생각을 정립하고, 재배열해서 말합니다

   LLM에게 가치관과 생각이 있다고 주장하시는 것 같은데 의도하시는 게 맞나요? 결론에는 영향이 없긴한데 추론에 저작권을 적용하지 말아야하는 근거로서는 적절하지 않은 것 같아서요

   각 단어들을 토큰화하고, 그 임베딩 정보를 latent space에 적절히 집어넣고 정리하는 과정은 추상적으로 보면 가치관과 생각에 비유할 순 있다고 봅니다.

   전뇌화와 관련해서.

   ""가치있는 뇌만 보존 될 것이다.""라는 누군가의 말이 생각나는 군요.

   과연 SO쪽에서는 정직하게 삭제를 할까요? 아니면 Deleted 플래그만 세우고 나중에 ""기술적 실수로 인해 학습에 사용되었음""을 발표할까요?

   학습에 사용되고 출처가 없으니 묵살될 수도 있습니다.
   게다가 애초에 한국이나 유럽과는 달리 '잊힐 권리' 논란이 끝날 수 없는 미국이라...

   한국이 잊힐 권리를 법적으로 보장되고 잊혀져야 할 권리를 당연시 여기기 때문에 우리 입장에서는 엄청나게 아찔한 반응이 나올 수밖에 없죠.

     게다가 애초에 한국이나 유럽과는 달리 '잊힐 권리' 논란이 끝날 수 없는 미국이라...

   이 쪽에는 배경 지식이 없어서 잠깐 검색해봤는데 혹시 표현의 자유와 잊힐 권리가 상충되기 때문인가요? 합의가 아직 없기 때문에 입법도 안된거고요

   와, 정말 이럴수도 있겠네요.

   Stack Overflow와 OpenAI, 파트너십 체결
   Stack Overflow 사용자들, OpenAI 제휴 후 답변 삭제 잇따라
"
"https://news.hada.io/topic?id=14772","Stars","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Stars

        Hacker News 의견

     * 이 시각화는 Chrome 초기 실험 중 하나로 훌륭하지만, 아이러니하게도 Chrome에서 기본적으로 음악이 재생되지 않음 (사이트 설정에서 사운드를 ""허용""으로 설정해야 함)
     * Proxima Centauri 주변을 도는 외계행성이 발견되지 않았다는 등 다소 구식 정보를 포함하고 있음
     * 별자리를 시각화에 선택적으로 오버레이할 수 있으면 좋겠음
     * 한 방향에서 매우 밝은 섬광이 보이는데, 이것이 특별한 이유는 무엇일까?
     * 스크롤 위로 올리면 ""확대""가 아니라 ""축소""가 되는 등 줌 방향이 잘못됨
     * 우리가 종종 우주를 묘사할 때 '우리가 얼마나 작고 무의미한지 보라'는 일차원적이고 허무주의적인 메시지에 이끌리는 경향이 있음
     * 이것은 꽤 오래된 것으로, 당시 Chrome용 WebGL 데모인 것 같음
     * 확대/축소 시 스무딩으로 인해 사각형 픽셀이 생성되지 않도록 하는 것이 개선 요청사항임
     * iPhone에서 렌더링할 때 중지/건너뛰기 버튼이 일부 텍스트를 가리는 문제가 있음
     * 개발자들이 이것을 만들기 위해 어떤 도구나 기술을 사용했을지 궁금함
"
"https://news.hada.io/topic?id=14764","Thread: 사용하거나 가르칠 수 없는 기술?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Thread: 사용하거나 가르칠 수 없는 기술?

Thread에 대한 자세한 설명과 문제점

     * Dennis Schubert가 2022년에 발표한 지나치게 공학적인 커피 원두 저장 및 재고 관리 솔루션 관리에 대한 글이 많은 사람들에게 영감을 줌
     * 최근 Dennis는 배터리 사용 시간을 늘리기 위해 이전 프로젝트의 버전 2를 만들며 저전력 전자 공학을 공부하게 됨
     * 프로파일링 결과 WiFi가 배터리 소모의 주요 원인이었고, LoRa나 Zigbee 같은 대안을 찾아봄
     * Thread라는 네트워크 스택이 매력적인 선택지로 보였는데, Zigbee와 동일한 물리 계층을 사용하면서도 IPv6 기반이고 기존 홈 네트워크와 브릿지로 연결되는 장점이 있었음
     * Apple HomePod, Nest Hub 등 이미 많은 기기들이 Thread Border Router 역할을 하고 있어서 쉽게 적용 가능
     * 직접 Thread 기반 프로젝트를 진행해보며 블로그 포스트를 작성할 계획을 세움

Thread Group의 폐쇄성 문제

     * Thread는 IEEE 802.15.4, IPv6, CoAP 등 개방형 표준 기술들을 사용하지만 사양 문서 자체는 비공개로 유지됨
     * 사양 문서는 DRM이 적용되어 있고 워터마크가 삽입되어 있음
     * Thread 기술을 구현하고 제품에 적용하려면 Thread Group에 가입해야함
     * 가장 저렴한 Implementer 등급 멤버십이 연 $7,500 임
     * 오픈소스 구현체인 OpenThread가 있지만, 이를 사용한 제품 출시에도 멤버십이 필요함
     * 상용 제품에 인증 절차를 요구하는 것은 이해할 수 있으나, 비상업적 용도까지 막는 것은 이해하기 힘듦
     * 특히 전자공학도들이 업계에 뛰어들기 전에 관련 기술을 접할 기회를 막는 것은 문제
     * Apple, Google 등 대기업 중심으로 구성된 Thread Group은 시장 장악에만 몰두하고 있는 듯함

GN⁺의 의견

     * 사실상 독점 기술로 운영되는 Thread와 같은 네트워크 기술은 개발자 생태계 활성화에 걸림돌이 될 것으로 보입니다. 특히 초기 개발자들의 자유로운 실험과 도전을 막는 것은 장기적으로 기술 발전을 저해할 수 있습니다.
     * IoT 시장의 활성화를 위해서는 개방형 네트워크 프로토콜의 중요성이 커지고 있습니다. 대기업 위주의 컨소시엄보다는 커뮤니티 중심의 오픈소스 프로젝트들이 대안이 될 수 있을 것 같네요.
     * 비슷한 기술 스택을 가진 오픈소스 프로젝트로는 Zigbee2mqtt나 Z-Stack이 있습니다. 물론 아직 Thread만큼 홈 IoT 시장에서 입지는 넓지 않지만, 개발자 친화적인 면에서는 더 나은 선택지가 될 수 있습니다.
     * Thread를 장려하는 대기업들의 영향력이 막강한 상황이라 당장 개선되기는 쉽지 않아 보입니다. 하지만 개발자 커뮤니티가 목소리를 내고 대안을 모색하는 노력이 필요할 것 같습니다. 기업의 이익과 개발자의 자유를 조화시키는 지혜가 필요한 때입니다.

        Hacker News 의견

     * LoRaWAN이 법적 측면에서 덜 복잡하기 때문에 많은 도시에서 선택하고 있음. 하지만 사용하기는 더 복잡하고, 덴마크 통신법 때문에 고속 인터넷에 대한 통신사 독점 같은 제약이 있음. 이는 Thread에도 적용될 것임.
     * 도시는 안테나 설치를 위해 공공 학교, 도서관 등 많은 장소를 가지고 있다는 이점이 있음. 도시가 LoRaWAN을 공개하도록 하는 것이 핵심. 프로젝트가 도시에 도움이 되고 공개적이라면 무료 전력 공급과 재정 지원도 받을 수 있음.
     * 전반적으로 Thread는 그냥 사용하지 말 것.

     Thread Group에 가입할 만한 돈이 없는 취미 개발자는 합법적으로 Thread를 사용할 방법이 없음

     * 정말 그런가? 라이선스 법률 용어는 특허를 의미하는 것 같은데, 상업적 관여가 없다면 개인 작업에는 특허가 적용되지 않음.
     * 취미 범위를 벗어나 더 일반적으로 볼 때, 현재 특허 제도가 부여하는 독점의 부조리함이 이 구조에서 명백해짐. 특허 포트폴리오가 있는 대기업은 OpenThread를 자유롭게 사용할 수 있지만 중소기업과 스타트업은 그럴 수 없음.
     * Thread에 대해 처음 들었는데 차라리 모르고 싶었음. 분노할 이유가 더 늘어난 것 같아 속상함.
     * 이런 것은 최대한 피하고 사라지기를 바라는 게 좋을 듯. 이걸 수용하거나 채택하라고 권하고 싶지 않음.
     * Zigbee를 사용하는 것이 좋음. 3.x는 개방형이고 잘 정의되어 있음. HomeAssistant용 동글 브리지도 저렴함.
     * Matter 규격도 비슷한 문제가 있음. 세부 사항에 악마가 숨어있고, 영리한 마케팅 때문에 사람들은 자신이 칭찬하는 것이 무엇인지 이해하지 못함.
     * 진짜 문제는 이런 것에 돈을 투자하는 사람들임.
     * Thread라는 이름 자체를 사용하고 싶지 않음. OS 스케줄러 스레드를 말하는 건지, 프레임워크 이름을 말하는 건지 헷갈리는 회의가 몇 달, 몇 년간 이어질 것 같음. (영어가 모국어가 아닌 사람들이 thread와 threads를 구분 못하고 서로 얘기하는 걸 상상해봐) 그냥 죽여줘.
     * Thread 규격에 대한 라이선스에 동의하지 않고 OpenThread를 직접 사용하면 이 라이선스 조건이 적용되나? BSD 라이선스에만 동의했다면 고소당할 일은 없을 것 같은데 ㅋㅋ
     * ""취미로 하는 사람이 Thread Group에 가입할 돈이 없다면 합법적으로 Thread를 사용할 방법은 없다""
     * 관련 특허가 있는지 누군가 알아내기 전까지는 알 방법이 없음.
     * Compaq이 클린 룸에서 이것들을 복사한 다음 유효한 특허가 있다면 타격을 입는 걸 기다려야 할 듯...
     * 사실상 가정 통신 표준이 되자마자 규제 기관이 나서서 강제로 개방시키기를 기다려야 하나?
     * 어떤 기관이 될지 내기는 하기 싫지만, 다들 어떤 곳이 될지 안다.
     * 이런 수준의 라이선싱에 대해 잘 모르겠음. Thread의 라이선싱이 제품에 통합하려면 비용을 지불해야 하는 Bluetooth 같은 것과 어떻게 비교되는지?
     * 우연히 이번 주에 Thread를 가지고 놀아봤는데, ESP32에 예제 프로젝트를 플래시하고 노트북에서 핑을 보내기 시작하는 게 생각보다 쉬웠음.
"
"https://news.hada.io/topic?id=14803","빛의 속도를 감소시키는 A Slower Speed of Light (2012) 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             빛의 속도를 감소시키는 A Slower Speed of Light (2012) 기술

A Slower Speed of Light 게임 소개

     * A Slower Speed of Light는 1인칭 게임으로, 플레이어가 3D 공간에서 이동하며 빛의 속도를 줄이는 오브를 수집하는 게임임
     * 오픈 소스 상대성 그래픽 코드를 사용하여 게임 내 빛의 속도를 플레이어의 최대 걷기 속도에 근접하게 만듦
     * 플레이어에게 특수 상대성의 시각적 효과가 점차 나타나며, 게임 플레이의 난이도가 증가함
     * 실시간으로 렌더링되는 효과에는 도플러 효과, 서치라이트 효과, 시간 팽창, 로렌츠 변환, 런타임 효과 등이 포함됨
     * 플레이어는 트위터를 통해 게임에 대한 자신의 숙련도와 경험을 공유할 수 있음
     * 이 게임은 접근성 있는 게임플레이와 판타지 설정을 이론 및 전산 물리학 연구와 결합하여 교육적으로 풍부한 경험을 제공함

OpenRelativity 툴킷 소개

     * A Slower Speed of Light는 Unity 게임 개발 환경을 위한 오픈 소스 툴킷인 OpenRelativity를 사용하여 제작되었음
     * OpenRelativity는 게임 개발자, 교육자, 물리학에 관심 있는 사람들이 특수 상대성의 효과를 탐구하기 위한 실험을 만들고, 테스트하고, 공유하는 데 도움을 줄 수 있음

게임 실행을 위한 시스템 요구사항

     * Intel Core 2 Duo T9900 또는 Core i7 (2.8GHz 클럭 속도)
     * Windows 7, Mac OS X 10.6.8 이상, Linux (Ubuntu 13)
     * AMD Radeon HD 6970M/AMD Mobility Radeon HD 4850/Nvidia GeForce 9600M GT
     * 8GB RAM

GN⁺의 의견

     * 물리학 공부에 관심 있는 사람들에게 흥미롭고 교육적인 경험을 제공할 수 있는 게임임. 특수 상대성의 개념을 게임을 통해 직관적으로 이해할 수 있는 기회가 될 것임
     * 물리 시뮬레이션을 다루는 만큼 고사양의 컴퓨터가 필요하므로, 보급형 컴퓨터 사용자들은 원활한 플레이가 어려울 수 있음
     * 게임 플레이와 물리 현상을 효과적으로 연계하기 위해서는 세심한 설계가 필요할 것임. 플레이 경험이 지루하거나 직관적이지 않다면 교육 효과가 반감될 수 있음
     * OpenRelativity 툴킷을 통해 개발자와 교육자들이 다양한 물리 실험을 만들 수 있다는 점이 긍정적임. STEM 교육에 유용하게 활용될 수 있을 것임
     * Processing이나 OpenFrameworks 등 다른 오픈소스 툴과의 연계도 고려해볼만 함. 더 다양한 방식으로 물리 현상을 시각화하고 상호작용할 수 있는 기회를 제공할 수 있을 것임

        Hacker News 의견

   몇 가지 흥미로운 게임과 책을 통해 특수상대성 이론을 이해하는데 도움을 받을 수 있음:
     * George Gamow의 ""Mr Tompkins in Wonderland""는 빛의 속도가 시속 10마일이라면 세상이 어떻게 보일지 탐구함으로써 특수상대성 이론에 대한 직관을 키우는데 도움이 됨.
     * ""Velocity Raptor""(2012)는 2+1차원 공간에서의 모험을 다룬 게임임. Flash에서 HTML5로 포팅되어 여전히 온라인에서 즐길 수 있음. 단, 27인치 iMac에서 이 게임을 하다가 멀미로 이틀간 아팠다는 경고가 있음.
     * ""Hyperbolica""는 쌍곡 및 구면 기하학의 3D 세계를 탐험하는 게임으로 게임플레이를 통해 수학/물리학을 가르치는 또 다른 예시임.
     * 이런 게임들은 재미있는 개념이지만, 오래 플레이하면 멀미를 유발할 수 있음.
     * 일반상대성 이론 버전의 게임이 어떨지, 광속의 1/137에 가까워질수록 어떤 일이 일어날지 등 더 발전시킬 여지가 있음.
     * 광속이 초속 2m이고 물체가 초속 1m로 움직인다면 정확히 광속의 절반이 되는 상황 등 특별한 비율일 때 어떤 특이한 현상이 나타날지 궁금해 하는 의견도 있음.
"
"https://news.hada.io/topic?id=14835","Raspberry Pi Ltd, IPO 검토","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Raspberry Pi Ltd, IPO 검토

Raspberry Pi Ltd.의 런던 증권거래소 상장 계획 발표

  Raspberry Pi 하이라이트

     * Raspberry Pi는 고성능, 저비용 단일 보드 컴퓨터(SBC) 및 산업용 IoT 고객과 임베디드 용도를 위한 컴퓨팅 모듈을 설계 및 개발하는 선도 기업임.
     * 표준 제품 포트폴리오에는 SBC, 컴퓨팅 모듈, 보완 액세서리 및 반도체가 포함됨.
     * 2012년부터 2023년까지 6천만 개 이상의 SBC와 컴퓨팅 모듈을 판매했으며, 2023년에는 740만 개를 판매함.
     * Sony와 Arm과 같은 세계적인 기술 파트너와 긴밀한 협력 관계를 유지하며, 반도체 지적 재산 개발, 반도체 및 전자 제품 제조, 고급 프로세스 노드에서의 칩 설계, 무선 주파수 및 전력 공학에서 상호 보완적인 역량을 활용함.
     * 현재 총 주소 가능 시장(TAM)은 약 212억 달러로 추정되며, 이는 강력한 성장 궤도를 유지할 수 있는 상당한 기회를 반영함.
     * Raspberry Pi 제품은 전 세계 70개 이상의 국가에서 판매됨.
     * Raspberry Pi는 100개 이상의 승인된 리셀러와 500개 이상의 OEM 고객에게 직접 판매하며, Premier Farnell에게 디자인을 라이선스하여 독립적으로 제조 및 판매를 주선함.
     * Raspberry Pi는 2008년에 설립된 영국 자선단체인 Raspberry Pi Foundation의 자회사로, 젊은이들 사이에서 컴퓨터 과학에 대한 관심을 촉진하는 것을 목표로 함.
     * 2013년부터 Foundation에 약 5천만 달러의 배당금을 분배하여 전 세계적으로 교육 사명을 발전시킴.
     * 2023년 12월 31일 기준으로 매출은 2억 6,580만 달러, 총 이익은 6,600만 달러, 영업 이익은 3,750만 달러, 조정된 EBITDA는 4,350만 달러를 기록함.
     * 창립자 주도 경영팀은 인상적인 산업 실적과 확장 경험을 보유하고 있으며, 뛰어난 이사회가 감독함.
     * Raspberry Pi 컴퓨터는 기존 데스크탑 및 임베디드 PC보다 제조 효율성이 높고 에너지 소비가 적으며, 인쇄 회로 기판(PCB) 제조 시 90% 적은 폐수를 사용하고, 85% 적은 케이스 플라스틱을 사용하며, 90% 적은 전기를 소비하고, 배송 시 98% 적은 탄소를 배출함.
     * 상장 후, 회사는 런던 증권거래소의 Green Economy Mark를 받을 것으로 예상됨.

  잠재적 상장 하이라이트

     * 상장 계획: Raspberry Pi가 IPO를 진행할 경우, 회사는 FCA의 공식 목록의 프리미엄 상장 세그먼트에 상장되고 런던 증권거래소의 메인 마켓에서 거래될 것으로 예상됨.
     * 공모 구성: 회사가 발행하는 신주와 기존 주주(주로 Raspberry Pi Foundation)가 판매하는 기존 주식으로 구성될 예정임.
     * 공모 대상: 미국 외부의 기관 투자자와 미국 내 QIB에게 제공될 예정임.
     * 추가 정보: 공모와 관련된 추가 세부 사항은 ITF 발표 및/또는 최종 발표된 경우, 설명서에 공개될 예정임.
     * 공동 글로벌 코디네이터: Jefferies International Limited와 Peel Hunt LLP가 공동 글로벌 코디네이터, 공동 스폰서 및 공동 북러너로 참여할 예정임.

  투자 하이라이트

    브랜드 인지도와 충성도 높은 커뮤니티

     * 12년간 고성능, 저비용 SBC와 컴퓨팅 모듈을 설계 및 개발해온 Raspberry Pi는 가치, 성능 및 품질 면에서 부러움을 살 만한 명성을 쌓음.
     * 열성적인 커뮤니티와 교육 시장에서 Linux 기반 임베디드 컴퓨팅의 사실상 표준이 됨.
     * 웹사이트, 포럼, 소셜 미디어를 통해 커뮤니티와 적극적으로 소통함.

    대규모 산업 및 임베디드 고객 기반

     * 열성적인 커뮤니티가 산업 및 임베디드 공간으로 Raspberry Pi 제품을 확산시킴.
     * 2023년 판매된 740만 개의 SBC와 컴퓨팅 모듈 중 72%가 산업 및 임베디드 시장에 판매됨.
     * 산업 및 임베디드 고객을 위한 지원 프로그램을 제공함.

    전 가치 사슬을 아우르는 엔지니어링 역량

     * 반도체 지적 재산 개발부터 완성된 반도체 및 전자 제품 설계, 소프트웨어 엔지니어링 및 규제 준수까지 연구 개발 역량을 보유함.
     * 자체 반도체 지적 재산을 개발하고, 이를 Raspberry Pi의 반도체 장치에 사용하거나 공급업체에 라이선스함.
     * 모든 핵심 Raspberry Pi 제품과 많은 Raspberry Pi 브랜드 액세서리의 전자 설계를 개발함.

    고성능, 저비용 제품

     * 경쟁 제품에 비해 우수한 가격/성능 비율, 장기 가용성 및 장기 소프트웨어 지원을 제공함.
     * 다양한 응용 프로그램에 적합한 고성능, 저비용 제품을 제공함.

    통합 소프트웨어 플랫폼

     * Raspberry Pi 하드웨어 제품은 소프트웨어와 문서 형태의 광범위한 자료로 지원됨.
     * 2012년부터 출시된 초기 Raspberry Pi 제품도 무료 소프트웨어 업데이트를 지원함.
     * OEM 고객 기반, 강력한 커뮤니티 및 풍부한 서드파티 소프트웨어, 문서 및 기타 자료 생태계를 구축함.

    유연한 하이브리드 유통 채널 모델

     * Raspberry Pi는 유연한 하이브리드 유통 채널 모델을 통해 제품을 제조하고 전 세계 100개 이상의 승인된 리셀러와 500개 이상의 대형 OEM에 판매함.
     * 라이선스 채널을 통해 글로벌 비즈니스 및 소비자 주문 접수 및 물류 서비스를 제공함.

    10년간의 수익 성장 및 수익성 기록

     * 강력한 성장 전략을 통해 수익 성장 및 수익성 기록을 유지함.
     * 하이브리드 유통 모델을 통해 제품별로 자본 요구 사항을 균형 있게 조정함.

    강력한 ESG 자격

     * Raspberry Pi는 영국 자선단체인 Raspberry Pi Foundation의 자회사로, 전 세계적으로 젊은이들이 컴퓨팅과 디지털 기술을 통해 잠재력을 실현할 수 있도록 지원함.
     * Foundation은 학교 지원, 무료 컴퓨팅 클럽 운영, 대회 조직 등을 통해 디지털 기술 접근성을 넓힘.
     * 상장 후, 회사는 Foundation과의 관계 계약을 통해 독립적으로 운영될 예정임.

    숙련된 창립자 주도 팀

     * Raspberry Pi는 성공적인 경영진과 이사회로 구성된 숙련된 팀을 보유함.
     * 창립자이자 CEO인 Dr. Eben Upton CBE와 CFO Richard Boult가 이끄는 팀은 150년 이상의 경험을 보유함.

  성장 전략

    단위 판매 증가

     * 2023년 총 주소 가능 시장은 약 212억 달러로 추정됨.
     * 산업 및 임베디드 시장은 163억 달러의 주소 가능 시장을 보유함.
     * 교육 및 열성적인 시장은 49억 달러의 주소 가능 시장을 보유함.
     * 지리적 확장을 통해 성장 기회를 모색함.

    단위 이익 증가

     * 고객의 요구를 더 잘 충족시키는 제품 변형을 도입하여 단위 이익을 증가시킬 계획임.
     * 반도체 설계 및 개발을 내부에서 수행하여 비용 구조를 개선하고 클로닝을 방지함.

    이익 참여 증가

     * 직접 판매 및 맞춤형 제품 사업을 통해 단위 이익 참여를 증가시킬 계획임.
     * 직접 유통 채널을 통한 판매가 증가함에 따라 총 이익이 증가함.

    차세대 플랫폼 개발

     * 차세대 기술 플랫폼 개발을 통해 시장 리더십을 유지하고 성장할 계획임.
     * 하드웨어와 함께 제공되는 소프트웨어 및 문서에 지속적으로 투자함.

    엔지니어링 인재 확보 우선순위

     * 엔지니어링 인재 확보 전략이 현재의 리더십 위치와 미래 성장 목표를 뒷받침함.
     * 자극적인 작업 환경을 제공하여 인재를 유지함.

  GN⁺의 의견

     * Raspberry Pi의 상장 계획은 회사의 성장과 글로벌 확장을 위한 중요한 단계임. 이는 투자자들에게 매력적인 기회를 제공하며, Raspberry Pi의 혁신적인 제품과 강력한 커뮤니티를 더욱 확장할 수 있는 기반을 마련함.
     * 산업 및 임베디드 시장에서의 강력한 입지는 Raspberry Pi의 지속적인 성공을 보장함. 이 시장에서의 높은 수요와 Raspberry Pi 제품의 우수한 성능은 회사의 장기적인 성장 가능성을 높임.
     * 교육 및 열성적인 시장에서의 영향력은 Raspberry Pi의 브랜드 인지도와 충성도를 강화함. 이는 젊은 세대에게 컴퓨팅 기술을 쉽게 접근할 수 있게 하여 미래의 기술 인재를 양성하는 데 기여함.
     * 유연한 유통 채널 모델은 Raspberry Pi의 글로벌 확장을 지원하며, 다양한 고객 요구를 충족시킬 수 있는 능력을 제공함. 이는 회사의 수익성을 높이는 데 중요한 역할을 함.
     * 환경 친화적인 제조 공정과 ESG 자격은 Raspberry Pi를 지속 가능한 기업으로 자리매김하게 함. 이는 환경 보호와 사회적 책임을 중시하는 투자자들에게 긍정적인 인상을 줄 것임.

   이러다 조만간 아두이노 IPO소식도 들을 수 있겠네요

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 비용 문제
          + 전원 공급 장치와 케이스를 추가하면 보드당 약 $100이 됨. 저장 장치를 추가하면 더 비쌈. 아마존에서 가장 저렴한 인텔 시스템이 $139임. 원래 목적이었던 저렴함이 사라짐.
     * 성능 문제
          + 개인적으로 사용을 중단했고, 직업적으로도 반대함. 성능이 나쁘고, 열 관리가 안 되며, 주변 기기 제한이 많고, 신뢰성이 떨어지며, 구하기 어려움.
     * 재정 확장 방안
          + 재단을 유지하고 제조 회사를 분사하여 IPO로 49%를 판매하고, 재단이 대주주로 남는 방안 제안. 이렇게 하면 확장을 위한 자금을 모으면서도 미션을 유지할 수 있음.
     * IPO 반대
          + IPO를 하지 말아야 함. 미션은 항상 취미자와 아이들을 위한 저렴한 고품질 컴퓨터를 오픈 소스 소프트웨어로 제공하는 것이었음. IPO를 하면 주주들이 이익을 우선시하게 되어 사용자들이 손해를 보게 됨.
     * 이익 우선 문제
          + 이제 이익을 영원히 증가시켜야 한다는 것이 슬픔. 이는 제조를 중국으로 옮기거나 저렴한 부품을 사용하는 등의 결과를 초래할 수 있음.
     * 런던 증권거래소 상장
          + 또 다른 영국 회사가 런던 증권거래소에 상장한 것을 기쁘게 생각함. 많은 회사들이 미국 증권거래소에 상장하고 있음. 이는 고금리, 연금 기금 감소, 미국 임원들과의 임금 격차, 고성능 기술 회사 부족, 브렉시트 고립, 국내 투자자 부족 등이 원인임.
     * Raspberry Pi의 영향
          + Raspberry Pi는 마이크로 보드/PC 시장을 혁신했음. 그러나 이제는 가격이 비싸고 성능이 떨어짐. 이 IPO는 이러한 관점을 확인시켜줌. Raspberry Pi가 한 일에 감사하지만, 다시 구매할 의향은 없음.
     * 초기 미션 변화
          + 회사가 이미 OEM에 집중하고 제품을 우선적으로 제공하고 있다는 소문을 들었음. 초기에는 교육과 취미자에 초점을 맞췄었음. 이는 RPI4와 RPI5를 구하기 어려운 이유를 설명함. 이제는 '제공'보다 '이익'을 우선시하게 될 것임.
     * 경고 메시지
          + 시작 부분의 경고 메시지가 무엇인지 궁금함. 미국, 캐나다, 호주, 남아프리카, 일본 등에서 배포하는 것이 불법인 공지를 인터넷에 공개하는 것이 자체 규정을 위반하는 것 같음.
     * 주주 가치
          + ""주주 가치""라는 말을 들을 때마다 1달러씩 받았다면 좋겠음. 이 질병이 당분간은 멀리 유지되기를 바람.
"
"https://news.hada.io/topic?id=14842","혈액 내 단백질, 암 조기 경고 가능성 '7년 이상'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     혈액 내 단백질, 암 조기 경고 가능성 '7년 이상'

혈액 내 단백질이 암을 7년 이상 조기에 경고할 수 있음

     * 연구 개요
          + 연구에서 환자의 혈액 샘플이 수집된 후 7년 이상 지나 진단된 암과 관련된 107개의 단백질을 발견함.
          + 연구는 19종의 암과 관련된 618개의 단백질을 식별했으며, 이는 훨씬 더 이른 시기에 암을 발견할 수 있게 할 수 있음.
     * 연구 배경
          + 옥스퍼드 대학교의 과학자들이 영국 바이오뱅크에서 44,000명 이상의 사람들의 혈액 샘플을 연구함.
          + 이 중 4,900명 이상이 이후 암 진단을 받음.
          + 암 진단을 받은 사람들과 그렇지 않은 사람들의 단백질을 비교하여 19종의 암과 관련된 618개의 단백질을 식별함.
     * 연구 결과
          + 연구는 암 진단 후 7년 이상 지난 후에도 관련된 107개의 단백질을 발견함.
          + 또한, 암 진단 3년 이내에 강하게 관련된 182개의 단백질을 발견함.
          + 일부 단백질은 암을 훨씬 더 일찍 감지하고 잠재적으로 새로운 치료 옵션을 제공할 수 있음.
     * 연구의 중요성
          + 옥스퍼드 대학교의 Keren Papier 박사는 ""암으로부터 더 많은 생명을 구하기 위해 우리는 질병의 초기 단계에서 무슨 일이 일어나는지 더 잘 이해해야 한다""고 말함.
          + 혈액 내 단백질이 암 위험에 어떻게 영향을 미치는지 연구해야 함.
     * 연구의 추가 발견
          + 300,000건 이상의 암 사례에서 유전 데이터를 조사한 두 번째 연구는 9종의 암 위험에 영향을 미치는 40개의 단백질을 발견함.
          + 이러한 단백질을 변경하면 암 발생 가능성을 증가시키거나 감소시킬 수 있지만, 일부 경우에는 의도치 않은 부작용이 발생할 수 있음.
     * 전문가 의견
          + Queen’s University Belfast의 Mark Lawler 교수는 ""임상적으로 나타나기 전에 암의 증거를 찾는 것은 치료 성공 가능성을 높이거나 암이 발생하기 전에 예방할 수 있는 중요한 기회를 제공한다""고 말함.
          + Warwick 대학교의 Lawrence Young 교수는 ""암 위험 증가의 표지자와 조기 암 진단을 돕는 표지자를 식별하는 또 다른 단계""라고 말함.

GN⁺의 의견

     * 암 조기 진단의 중요성
          + 암은 조기에 발견될수록 치료 성공률이 높아짐. 이 연구는 조기 진단의 가능성을 높여 더 많은 생명을 구할 수 있는 기회를 제공함.
     * 단백질 연구의 잠재력
          + 혈액 내 단백질을 통해 암을 조기에 감지할 수 있다면, 이는 예방과 치료에 큰 혁신을 가져올 수 있음. 그러나 추가 연구가 필요함.
     * 부작용의 가능성
          + 단백질을 변경함으로써 암 발생 가능성을 줄일 수 있지만, 의도치 않은 부작용이 발생할 수 있음. 이는 신중한 접근이 필요함을 의미함.
     * 기술의 발전
          + 이 연구는 암 연구와 조기 진단 기술의 발전에 중요한 기여를 함. 더 많은 연구와 데이터가 필요하지만, 이는 중요한 첫 걸음임.
     * 다른 연구와의 비교
          + 유사한 연구들이 진행되고 있으며, 이 연구는 그 중 하나로서 중요한 데이터를 제공함. 다른 연구들과의 비교를 통해 더 나은 결과를 도출할 수 있음.
"
"https://news.hada.io/topic?id=14873","Bend - GPU에서 실행되는 고급 언어 (HVM2 사용)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Bend - GPU에서 실행되는 고급 언어 (HVM2 사용)

     * Bend는 대규모 병렬 처리를 지원하는 고수준 프로그래밍 언어
     * CUDA와 Metal 같은 저수준 대안과 달리, Bend는 Python과 Haskell 같은 표현력 있는 언어의 느낌과 기능을 제공함
     * 빠른 객체 할당, 완전한 클로저 지원을 갖춘 고차 함수, 제한 없는 재귀, 심지어 연속성까지 포함됨
     * 그러나 GPU와 같은 대규모 병렬 하드웨어에서 실행되며, 코어 수에 따라 거의 선형적인 속도 향상을 보임
     * 명시적인 병렬 주석이 전혀 필요 없음: 스레드 생성, 잠금, 뮤텍스, 원자적 연산이 필요하지 않음
     * Bend는 HVM2 런타임에 의해 구동됨

  빠른 데모

  Bend 사용하기

     현재 Windows에서는 작동하지 않음, WSL2를 대안으로 사용해야 함.

     * 먼저, Rust nightly를 설치해야 함.
     * 그런 다음, HVM2와 Bend를 설치해야 함:
cargo +nightly install hvm
cargo +nightly install bend-lang

     * 마지막으로 Bend 파일을 작성하고 다음 명령어 중 하나로 실행할 수 있음:
bend run   # Rust 인터프리터 사용 (순차적)
bend run-c  # C 인터프리터 사용 (병렬)
bend run-cu  # CUDA 인터프리터 사용 (대규모 병렬)

     * 또한 최대 성능을 위해 gen-c와 gen-cu를 사용하여 Bend를 독립 실행형 C/CUDA 파일로 컴파일할 수 있음. 그러나 코드 생성은 아직 초기 단계에 있으며, GCC나 GHC 같은 최첨단 컴파일러만큼 성숙하지 않음.

  Bend에서 병렬 프로그래밍

     * Bend에서 병렬 프로그램을 작성하려면... 아무것도 하지 않아도 됨. 단, 본질적으로 순차적이지 않게 작성해야 함.
     * 예를 들어, 다음 표현식은 병렬로 실행될 수 없음:
(((1 + 2) + 3) + 4)

       +4는 +3에 의존하고, +3은 (1+2)에 의존하기 때문임.
     * 그러나 다음 표현식은 병렬로 실행될 수 있음:
((1 + 2) + (3 + 4))

       (1+2)와 (3+4)는 독립적이기 때문임. Bend의 기본 원칙에 따라 병렬로 실행될 수 있는 모든 것은 병렬로 실행됨.

  예제 코드

     * 보다 완전한 예제로, 다음 코드를 고려해보자:
# 정렬 네트워크 = 트리 회전
def sort(d, s, tree):
  switch d:
    case 0:
      return tree
    case _:
      (x, y) = tree
      lft = sort(d-1, 0, x)
      rgt = sort(d-1, 1, y)
      return rots(d, s, lft, rgt)

# 서브 트리 회전
def rots(d, s, tree):
  switch d:
    case 0:
      return tree
    case _:
      (x, y) = tree
      return down(d, s, warp(d-1, s, x, y))

     * 이 파일은 불변 트리 회전을 사용한 비토닉 정렬기를 구현함. 이는 GPU에서 빠르게 실행될 것으로 예상되지 않는 알고리즘임. 그러나 분할 정복 접근 방식을 사용하므로 본질적으로 병렬적임. Bend는 이를 다중 스레드로 실행함. 몇 가지 벤치마크:
          + CPU, Apple M3 Max, 1 스레드: 12.15초
          + CPU, Apple M3 Max, 16 스레드: 0.96초
          + GPU, NVIDIA RTX 4090, 16k 스레드: 0.21초
          + 57배 속도 향상을 아무것도 하지 않고 달성함. 스레드 생성, 잠금, 뮤텍스의 명시적 관리가 없음. 단지 Bend에게 RTX에서 프로그램을 실행하도록 요청했을 뿐임.

  다양한 병렬 시스템 지원

     * Bend는 텐서나 행렬 같은 특정 패러다임에 국한되지 않음. 셰이더에서 Erlang과 같은 액터 모델까지 모든 병렬 시스템을 Bend에서 에뮬레이트할 수 있음.
     * 예를 들어, 실시간으로 이미지를 렌더링하려면 각 프레임에 불변 트리를 할당할 수 있음:
# 셰이더를 주어지면, 사각형 이미지를 반환
def render(depth, shader):
  bend d = 0, i = 0:
    when d < depth:
      color = (fork(d+1, i*2+0), fork(d+1, i*2+1))
    else:
      width = depth / 2
      color = shader(i % width, i / width)
  return color

# 위치를 주어지면, 색상을 반환
# 이 데모에서는 단순히 바쁜 루프를 돌림
def demo_shader(x, y):
  bend i = 0:
    when i < 5000:
      color = fork(i + 1)
    else:
      color = 0x000001
  return color

# demo_shader를 사용하여 256x256 이미지를 렌더링
def main:
  return render(16, demo_shader)

     * 실제로 작동함. 복잡한 알고리즘도 Bend에서 잘 병렬화됨. 장거리 통신은 글로벌 베타 감소(상호작용 계산법에 따라)로 수행되며, HVM2의 원자적 링커에 의해 정확하고 효율적으로 동기화됨.

  추가 자료

     * 바로 시작하려면, Bend의 GUIDE.md를 확인할 것.
     * 기능 목록을 보려면, FEATURES.md를 확인할 것.
     * Bend의 기술을 이해하려면, HVM2의 논문을 확인할 것.
     * Bend는 HigherOrderCO.com에서 개발됨 - Discord에 참여할 것.

GN⁺의 의견

     * 병렬 프로그래밍의 단순화: Bend는 병렬 프로그래밍을 매우 단순화하여, 초급 소프트웨어 엔지니어도 쉽게 접근할 수 있음. 이는 병렬 프로그래밍의 진입 장벽을 크게 낮춤.
     * 다양한 하드웨어 지원: Bend는 CPU뿐만 아니라 GPU에서도 효율적으로 실행될 수 있어, 다양한 하드웨어 환경에서 활용 가능함.
     * 표현력 있는 언어: Python과 Haskell의 장점을 결합하여, 표현력 있는 코드를 작성할 수 있음. 이는 코드의 가독성과 유지보수성을 높임.
     * 초기 단계의 코드 생성: 현재 Bend의 코드 생성은 초기 단계에 있어, 성숙한 컴파일러와 비교했을 때 성능이 떨어질 수 있음. 이는 향후 개선이 필요함.
     * 다양한 병렬 시스템 지원: Bend는 특정 패러다임에 국한되지 않고, 다양한 병렬 시스템을 지원하여 유연한 프로그래밍이 가능함. 이는 다양한 응용 분야에서 Bend를 활용할 수 있게 함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Python과 PyPy 성능 비교
          + Python과 PyPy로 동일한 코드를 실행했을 때, PyPy가 훨씬 빠름.
          + Apple M3 Max와 NVIDIA RTX 4090에서의 벤치마크 결과 공유.
          + Intel i7-1270P에서의 성능이 매우 느림.
          + Mac 외의 다른 플랫폼에서도 테스트가 필요함.
     * 긍정적인 피드백
          + 프로젝트의 초기 단계임을 감안할 때, 성과를 칭찬함.
          + Futhark과 비교하여, 다양한 타겟을 지원하지 않는 점이 아쉬움.
          + 성능 문제는 해결 가능할 것으로 보임.
     * 비판적인 의견
          + 초기 버전임에도 불구하고 많은 비판을 받고 있음.
          + 홈페이지가 직관적이고 이해하기 쉬움.
          + 병렬 알고리즘에 대한 기대와 현실의 차이를 언급함.
     * 병렬 프로그래밍에 대한 기대
          + 병렬 프로그래밍의 미래에 대한 기대를 표현함.
          + Rust와 Shadertoy를 통해 병렬 프로그래밍을 실험한 경험 공유.
          + GPU를 활용한 일반 병렬 언어에 대한 기대감.
     * 성능 비교
          + C++로 작성한 간단한 루프가 Bend와 유사한 성능을 보임.
          + 최적화된 C++ 코드가 훨씬 빠름.
     * 프로젝트의 발전 기대
          + 자동 병렬화의 어려움을 극복한 점을 칭찬함.
          + 프로젝트의 발전을 기대함.
     * 회의적인 시각
          + Bend의 제한된 DSL 특성을 지적함.
          + 성능이 좋지 않다는 점을 강조함.
          + 실제 고성능 병렬 컴퓨팅에서는 배열이 중요함을 언급함.
          + Bend의 유용성에 대해 회의적임.
     * 긍정적인 전망
          + Bend가 GPU 활용을 극대화할 수 있는 가능성을 언급함.
          + LLMs 외에도 GPU를 활용할 수 있는 다양한 가능성을 기대함.
     * Bend의 언어적 특성
          + Bend의 간단한 사용법과 성능 향상을 칭찬함.
          + 24비트 정수만 지원하는 점이 아쉬움.
          + 더 높은 비트 정수 지원이 필요함을 언급함.
"
"https://news.hada.io/topic?id=14814","Amazon S3, 여러 HTTP 오류 코드에 대한 비용 청구 중단하기로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Amazon S3, 여러 HTTP 오류 코드에 대한 비용 청구 중단하기로

     * Amazon S3는 고객이 시작하지 않은 권한 없는 요청에 대해 비용을 청구하지 않도록 변경할 예정
     * 이 변경으로 버킷 소유자는 개별 AWS 계정이나 AWS 조직 외부에서 시작된 HTTP 403(Access Denied) 오류 응답을 반환하는 요청에 대해 요청 또는 대역폭 비용을 부담하지 않게 됨
     * 무료로 제공되는 오류 코드들
          + 기본적으로 200 OK 와 4XX 클라이언트 에러 응답에만 요금이 청구됨
          + 과금되지 않는 코드들: 301, 307, 400, 403, 404, 405, 409, 411, 412
          + 5XX 서버 에러는 과금되지 않음(503 Slow Down 같은)
     * 이 청구 변경 사항은 고객 애플리케이션에 대한 변경이 필요하지 않으며 모든 S3 버킷에 적용되며, AWS GovCloud 리전과 AWS 중국 리전을 포함한 모든 AWS 리전에 적용
     * 이 배포는 오늘부터 시작되며 완료되면 몇 주 후에 다른 업데이트를 게시할 예정
     * 자세한 내용은 Amazon S3 오류 응답에 대한 청구 및 S3 사용 설명서의 오류 응답을 참조

GN⁺의 의견

     * 이번 변경으로 S3를 사용하는 고객들의 관리 포인트가 줄어들 것으로 보임. 권한 설정 실수로 인해 의도치 않은 요금 발생을 막을 수 있게 됨.
     * 하지만 반대로 보안 취약점을 노리는 악의적인 요청에 의해 트래픽이 증가할 가능성도 있음. 이에 대한 모니터링과 방어 대책 마련이 필요해 보임.
     * S3를 포함한 클라우드 서비스 사용시에는 항상 보안 설정에 각별한 주의가 필요함. 최소한의 권한 부여 원칙을 지키는 것이 좋음.
     * 이러한 변경은 클라우드 사업자들이 고객 편의성 제고를 위해 지속적으로 노력하고 있음을 보여줌. 향후 다른 AWS 서비스에도 유사한 변경이 있을지 지켜볼 필요가 있음.
     * GCP의 Cloud Storage나 Azure의 Blob Storage에서도 이와 유사한 정책을 시행 중인지 살펴보고, 필요하다면 관련 피드백을 전달하는 것도 좋겠음.

        Hacker News 의견

     * AWS의 다크 패턴에 대한 지적: 무료 티어에 가입했다가 모르는 사이에 과도한 요금이 부과될 수 있음. 특히 설정 변경 시 무료 티어 회원에게 경고가 없고 약관도 혼란스러움. 예를 들어 PostgreSQL은 무료로 광고되지만 Aurora PostgreSQL은 상당한 비용이 듦.
     * 관련 이슈:
          + 2024년 5월 제프 바(Jeff Barr)가 S3 무단 요청 청구 문제를 인정함.
          + 2024년 4월 빈 S3 버킷으로 인해 AWS 요금이 폭등할 수 있다는 사례 공유됨.
     * 트위터의 언급처럼 시스템이 작동하기는 하나 문제 제기 후 해결까지 18년이나 걸린다는 풍자적 지적.
     * 200 응답에 오류 코드를 사용하도록 앱을 리엔지니어링하여 무료 S3 사용량을 얻을 수 있다는 농담.
     * S3의 웹사이트 호스팅 설정에서는 사용자 정의 오류 문서나 사용자 정의 리디렉션에 대해 여전히 요금이 부과된다는 언급.
     * 이러한 큰 변화에는 사전 분석이 필요할 텐데, 재정적 손실을 계산하기 위한 로그 데이터나 샘플링 도구 등 내부적으로 어떤 준비가 있었을지 궁금함. 2주라는 대응 시간은 꽤 인상적임.
     * 이전 이야기처럼 지정된 지역 없는 S3 요청은 us-east-1로 기본 설정되고 필요에 따라 리디렉션 되는데, 버킷 소유자가 이에 대한 추가 비용을 지불해야 함.
     * Route53의 NXDOMAIN에 대해서도 동일한 조치를 취해달라는 요청. 인수한 도메인에서 큰 문제가 될 수 있음.
     * 베조스의 손실 리더 제품 관리자가 미끼를 더 깊이 밀어 넣는다는 풍자적 표현. 이를 진전으로 보기 어렵다는 의견.
"
"https://news.hada.io/topic?id=14760","뇌 입방 밀리미터, 나노스케일 해상도로 매핑된","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       뇌 입방 밀리미터, 나노스케일 해상도로 매핑된

뇌의 작은 부분을 놀라운 수준으로 매핑한 연구

     * 구글 과학자들이 인간 뇌의 작은 부분을 나노 스케일 해상도로 모델링함
     * 이전에는 발견되지 않았던 특징을 가진 세포들이 드러남
     * 연구 결과가 오늘 Science 저널에 발표되었고, 온라인에서도 볼 수 있음

뇌 조각의 3D 매핑 결과

     * 연구 대상은 약 1 입방 밀리미터 크기의 뇌 조각으로, 전체 뇌의 100만분의 1에 불과함
     * 약 5만 7천개의 세포와 1억 5천만 개의 시냅스(뉴런 간 연결)가 포함됨
     * 총 1.4 페타바이트의 방대한 데이터를 담고 있음
     * 구글 연구원인 Viren Jain은 이 복잡성을 이해하는 것이 쉽지 않을 것이라고 말함

뇌 샘플의 준비와 이미징 과정

     * 뇌전증 수술을 받은 45세 여성의 대뇌피질 일부를 샘플로 사용
     * 보존제에 담그고 중금속으로 염색해 세포를 잘 보이게 함
     * 하버드대 신경과학자 Jeff Lichtman 팀이 34나노미터 두께로 5000개 조각내어 전자현미경으로 촬영
     * 구글 팀이 AI 모델을 만들어 현미경 이미지들을 3D로 재구성함

새로 발견된 비정상적인 뉴런들

     * 서로 최대 50개의 연결을 만드는 뉴런 발견 (보통은 많아야 2개 정도)
     * 자기 자신을 감싸 매듭을 만드는 돌기를 가진 뉴런도 발견
     * 서로 거의 완벽한 대칭을 이루는 한 쌍의 뉴런도 발견됨
     * 이런 구조들의 역할은 아직 불분명함

방대한 데이터의 검증 필요성

     * 대부분의 데이터가 아직 수동으로 검증되지 않아 이미지 결합 과정의 오류 가능성 있음
     * 5만개 세포 중 수백 개만 검증됨
     * Jain은 관심 분야의 지도 부분을 직접 검증해줄 것을 희망함
     * 앞으로 다른 사람의 뇌 샘플로 유사한 지도를 만들 계획이지만, 전체 뇌 지도 제작은 향후 수십년 내 어려울 것으로 예상

연구의 의의와 기대효과

     * Allen Institute의 Hongkui Zeng은 이 논문을 인간 대뇌 피질 데이터 구축의 쾌거로 평가
     * 자유롭게 공개된 방대한 데이터가 대뇌 피질의 미세회로 연구에 큰 도움이 될 것
     * 펜실베니아 주립대의 Yongsoo Kim은 이 지도가 신경 연결의 새로운 규칙을 밝히고 인간 뇌의 작동 방식 해독에 기여할 것으로 기대
     * 대뇌피질 작동 원리를 깊이 이해하면 정신 질환과 신경퇴행성 질환 치료에 단서를 제공할 수 있을 것

GN⁺의 의견

     * 이 연구는 작은 규모지만 뇌의 구조와 연결에 대해 전례없는 수준의 상세한 정보를 제공했다는 점에서 의의가 크다. 하지만 데이터의 방대함 때문에 검증과 해석에는 많은 노력이 필요해 보인다.
     * 새로 발견된 비정상적인 뉴런 구조들의 역할과 의미를 밝히는 것이 중요한 후속 과제가 될 것이다. 이를 통해 뇌의 작동 원리와 관련 질병의 메커니즘을 이해하는 데 중요한 통찰을 얻을 수 있을 것이다.
     * 향후 더 많은 뇌 지도가 만들어지고 데이터가 축적되면, 이를 바탕으로 신약 개발이나 정밀 의료에도 활용될 수 있을 것으로 기대된다. 다만 윤리적, 법적 문제에 대한 사회적 합의도 필요해 보인다.
     * 뇌의 복잡성을 완전히 이해하기까지는 갈 길이 멀지만, 이번 연구는 뇌 과학 분야의 이정표가 될만한 성과라고 생각한다. 구글과 하버드 연구진의 학제간 협력이 좋은 결실을 맺은 사례로도 주목할 만하다.

        Hacker News 의견

     * 대화형 시각화가 매우 훌륭함
          + 슬라이스를 확대하고 레이어를 스크롤하거나, 3D 모델을 확대해 볼 것
          + 뉴런의 한 부분에 마우스를 올리면 해당 뉴런 전체가 하이라이트 되는 것을 확인할 수 있음
     * 3D 지도는 약 1세제곱밀리미터 부피를 커버하는데, 이는 전체 뇌의 100만분의 1에 해당하며 대략 57,000개의 세포와 1억 5천만 개의 시냅스(뉴런 간 연결)를 포함함
     * 이는 인간 뇌를 모방하기 위해 얼마나 큰 신경망 모델이 필요한지에 대한 간단한 계산을 제공함
          + 뉴런 당 평균 2,632개의 시냅스가 있다고 가정하면, 성인 인간 뇌의 1000억 뉴런에는 총 2.6x10^14개의 시냅스가 있을 것으로 추정됨
          + 시냅스 당 1개의 파라미터를 가정하면 최소 모델 크기는 GPT-4보다 수백 배 커야 함
          + 그러나 시냅스 당 10-100개의 이온 채널과 채널 당 최소 10개의 파라미터를 고려하면 2.6x10^16 이상의 파라미터가 필요할 것으로 보임
     * 리처드 파인만의 ""바닥에는 많은 공간이 있다(There's Plenty of Room at the Bottom)""를 다시 읽어볼 것
          + 생물학자들이 그에게 1000배 더 강력한 전자 현미경을 만들라고 했던 부분에 주목할 것
          + 이 이미지들을 스캔하는 데 사용된 기술에도 주목할 것
     * 단일 뉴런 사진에 근거하면, 뇌 시뮬레이션 연구자들은 필요한 컴퓨팅 파워에 대한 추정치를 다시 계산해야 함
     * 이런 종류의 현미경 뇌 이미지를 보고 약간 불편한 느낌이 드는 것에 대한 명칭이 있는지? 정상적인 반응인지 궁금함
     * 샘플을 손상시키지 않고 어떻게 34nm 두께로 5,000장의 슬라이스로 자르는지 궁금함
     * 큰 인간 뇌 전체를 스캔하려면 1.76 제타바이트의 저장 공간이 필요할 것으로 계산됨
     * 간질 치료를 위해 수술을 받은 45세 여성의 대뇌피질에서 뇌 조각이 채취되었다고 함. 어떤 부분을 잘라낼지 어떻게 결정했는지 궁금함
     * 2D 슬라이스에서 3D 부피를 정확히 재구성하는 것이 이미 잘 연구된 분야인데, 연구자들이 잘못된 환각 결과를 얻을 위험이 있는 ML 모델을 사용한 이유는 무엇인지?
     * AGI(Artificial General Intelligence)가 아마도 불가능하다는 또 다른 증거점
          + 실제 생물학적 뇌를 기르는 것이 훨씬 쉬울 것임
          + 실리콘에서는 결코 일어나지 않을 것이며, 모든 기계에는 어딘가에 입방 센티미터 크기의 신경 조직 블록이 내장될 것임
"
"https://news.hada.io/topic?id=14780","PGMQ - Postgres 기반의 SQS 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      PGMQ - Postgres 기반의 SQS 대체제

     * AWS SQS 및 RSMQ와 비슷한 경량 메시지 큐를 Postgres 기반으로 구현한 오픈소스
     * 백그라운드 워커 및 외부 의존성 없이, Postgres 확장으로만 구성
     * 제한시간 내에 컨슈머에게 '정확히 한번' 메시지 전달 보장
     * 메시지는 명시적으로 제거될 때 까지 대기열에 남아 있음
     * 메시지는 삭제 대신 아카이빙 하여 장기 보관 및 리플레이 가능
     * AWS SQS 및 RSMQ와 API 호환

   궁금한게 이런 플러그인은 aws rds같은 매니지드에도 추가가 가능한가요?

   매니지드 서비스에서는 해당 벤더에서 지원해주는 플러그인 외에는 사용이 불가한 것으로 알고 있습니다.
"
"https://news.hada.io/topic?id=14856","순수 NumPy로 구현하는 라마 3 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         순수 NumPy로 구현하는 라마 3 모델

     * Llama 3 모델의 실제 동작 가능한 구현을 통해 정확한 구조 이해 하기

개요

     * Meta에서 공개한 Llama 3 모델이 주목받고 있음.
     * 24K GPUs, 15T 훈련 데이터, 10M 명령 데이터, 1.3M GPU 시간 등 압도적인 스케일과 성능을 자랑함.
     * 모델 구조는 크게 변하지 않았음. Llama 3는 GQA를 사용하지만, 이는 Llama 2 70B에서도 이미 구현된 바 있음.
     * NumPy만을 사용하여 모델 구조를 직관적으로 이해할 수 있도록 구현함.
     * Andrej Karpathy가 Llama 2 구조로 훈련한 stories15M 모델을 NumPy 압축 형식으로 변환하여 사용함.

구조

     * Llama 3 모델 구조는 42dot LLM과 동일함.
     * 모델 매개변수:
          + dim: 288
          + n_layers: 6
          + n_heads: 6
          + vocab_size: 32000
          + max_seq_len: 256
          + max_new_tokens: 50

  RoPE #1

     * RoPE 임베딩을 위해 cos와 sin을 미리 계산함.
     * 이 값들은 Q와 K에 사용됨.
     * 계산 결과는 np.outer로 곱해지고, cos와 sin이 계산됨.

  RMSNorm

     * RMSNorm은 전통적인 Mini Batch나 Layer 통계 대신 활성화 값을 Root Mean Square로 정규화함.
     * 일관된 활성화 스케일링을 제공함.

  QKV

     * QKV 계산은 GPT에서 하나의 가중치를 matmul한 후 분할하는 방식과 다르게, Llama는 QKV 각각에 대한 가중치를 가짐.
     * Multi-Head Attention을 위해 각 값을 재구성함.

  RoPE #2

     * RoPE는 절대적 및 상대적 위치 인코딩 특성을 모두 가짐.
     * Q와 K에만 적용되며, 입력을 나누고 cos와 sin으로 곱한 후 결과를 더하고 빼서 다시 재구성함.

  KV 캐시

     * GPT 스타일 생성 모델은 Masked Attention을 사용하여 KV 캐시가 가능함.
     * 이전 결과는 항상 동일하므로, K와 V를 캐시하고 Q는 마지막 값만 계산함.

  GQA(Grouped-Query Attention)

     * GQA는 Llama 2에서 도입된 기술로, 메모리 절약과 성능 향상을 제공함.
     * Llama 3에서는 8B 이상의 모든 모델에 GQA가 적용됨.

  Scaled Dot-Product Attention

     * Multi-Head Attention으로 각각의 Attention을 계산함.
     * 결과는 softmax와 matmul로 얻어짐.

  Feed Forward

     * Llama 모델의 Feed Forward는 3개의 선형 계층을 사용하며, bias가 없음.
     * swish 값을 생성하고, x_V와 곱한 후 다시 다운스케일링함.

    SwiGLU

     * SwiGLU는 여러 피드 포워드 계층의 독특한 조합으로 모델 성능을 향상시킴.

  Linear

     * 최종 출력은 마지막 logit만 matmul로 계산하여 속도를 높임.

생성

     * 추출된 logit을 사용하여 토큰을 하나씩 생성함.
     * Prefill Phase와 Decode Phase로 나뉨.
     * Prefill Phase에서는 모든 입력을 전달하고, Decode Phase에서는 마지막 토큰 ID만 전달하여 결과를 얻음.

예제

     * 다음과 같이 실행할 수 있음:
$ python llama3.py ""I have a dream""

GitHub

     * 전체 소스 코드는 likejazz/llama3.np에서 확인 가능함.

참고 문헌

    1. Exploring and Building the Llama 3 Architecture
    2. Rotation Matrix
    3. Mastering LLM Techniques: Inference Optimization
    4. arXiv:2305.13245

GN⁺의 의견

     * Llama 3 모델의 구조와 성능: Llama 3 모델은 기존 Llama 2 모델의 구조를 유지하면서도 성능을 크게 향상시킴. 이는 모델의 확장성과 효율성을 동시에 고려한 결과임.
     * NumPy로 구현한 이유: NumPy를 사용하여 모델을 구현함으로써, 모델의 구조와 동작을 더 직관적으로 이해할 수 있음. 이는 학습자나 연구자에게 큰 도움이 됨.
     * GQA의 도입: GQA는 메모리 절약과 성능 향상을 동시에 제공하는 기술로, Llama 3에서 모든 모델에 적용됨으로써 모델의 효율성을 극대화함.
     * KV 캐시의 중요성: KV 캐시는 GPT 스타일 생성 모델에서 중요한 역할을 하며, 이를 통해 모델의 계산 효율성을 크게 높일 수 있음.
     * 실제 사용 사례: 예제 코드를 통해 모델을 실제로 실행해볼 수 있으며, 이는 모델의 성능을 직접 확인할 수 있는 좋은 기회임.

   해커뉴스에 올라온 것은 영문인데, 원저자인 Likejazz 님이 한국어로 작성해두신 링크로 변경했습니다.
"
"https://news.hada.io/topic?id=14891","플로어796 기술 혁신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              플로어796 기술 혁신

Floor796 소개

  Floor796이란 무엇인가?

     * Floor796은 다양한 주제와 콘텐츠를 제공하는 웹사이트임.
     * 이 사이트는 사용자들에게 흥미롭고 유익한 정보를 제공하기 위해 설계되었음.
     * 주로 기술, 엔터테인먼트, 라이프스타일 등 다양한 분야의 기사를 다룸.

  왜 Floor796이 중요한가?

     * 다양한 콘텐츠: 기술, 엔터테인먼트, 라이프스타일 등 여러 분야의 정보를 제공하여 다양한 관심사를 가진 사용자들에게 유용함.
     * 최신 정보 제공: 최신 기술 동향, 제품 리뷰, 생활 팁 등을 제공하여 사용자들이 최신 정보를 쉽게 접할 수 있음.
     * 사용자 친화적: 직관적인 인터페이스와 쉽게 접근할 수 있는 콘텐츠 구조로 사용자 경험을 극대화함.

GN⁺의 의견

     * 다양한 콘텐츠 제공: Floor796은 다양한 주제의 콘텐츠를 제공하여 사용자들이 여러 분야의 정보를 쉽게 접할 수 있게 함.
     * 최신 정보 업데이트: 최신 기술 동향과 제품 리뷰를 제공하여 사용자들이 최신 정보를 빠르게 얻을 수 있음.
     * 사용자 경험: 직관적인 인터페이스와 접근성 높은 콘텐츠 구조로 사용자 경험을 극대화함.
     * 비판적 시각: 특정 주제에 대한 깊이 있는 분석이 부족할 수 있으며, 더 전문적인 정보가 필요할 때는 다른 소스를 참고하는 것이 좋음.
     * 추천 제품: 기술 관련 정보를 제공하는 다른 웹사이트로는 TechCrunch, Wired, Ars Technica 등이 있음.
"
"https://news.hada.io/topic?id=14763","Immersive Math를 활용한 몰입형 수학 교육","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Immersive Math를 활용한 몰입형 수학 교육

immersive linear algebra 책 소개

     * J. Ström, K. Åström, T. Akenine-Möller가 쓴 ""immersive linear algebra"" v1.1 책 소개
     * ISBN: 978-91-637-9354-7
     * 완전히 대화형 그림이 포함된 세계 최초의 선형대수학 책
     * 트위터와 페이스북에서도 확인 가능

책의 목차

     * 서문: 이 책에 대한 몇 가지 설명
     * 1장: 소개 - 탐색 방법, 표기법, 이미 알고 있다고 생각하는 수학 개념 요약
     * 2장: 벡터 - 벡터 개념 소개, 벡터 덧셈과 뺄셈 등을 배움
     * 3장: 내적 - 두 벡터를 받아 스칼라를 생성하는 강력한 도구
     * 4장: 외적 - 3차원 공간에서 다른 두 벡터로부터 벡터를 생성하는 도구
     * 5장: 가우스 소거법 - 연립 일차방정식을 푸는 방법
     * 6장: 행렬 - 행렬의 등장
     * 7장: 행렬식 - 정사각 행렬의 기본 속성
     * 8장: 랭크 - 행렬의 동작 발견
     * 9장: 선형 사상 - 선형성의 힘을 활용하는 법 배우기
     * 10장: 고유값과 고유벡터 - 그 자체로 가치 있는 장

GN⁺의 의견

     * 선형대수학은 컴퓨터 과학, 데이터 과학, 인공지능 등 많은 분야에서 중요한 수학적 기초가 되는 학문임. 이 책은 세계 최초로 완전 대화형 그림을 포함하여 선형대수학 개념을 직관적으로 이해하는데 도움을 줄 것으로 보임.
     * 목차를 보면 벡터부터 행렬, 행렬식, 선형사상, 고유값/벡터 등 선형대수의 핵심 주제들을 잘 다루고 있음. 특히 가우스 소거법 같은 실제 문제 풀이에 필요한 알고리즘도 다뤄 이론과 실습을 균형있게 학습할 수 있을 것 같음.
     * 대화형 그림을 통한 직관적 이해에 중점을 두고 있어서, 수학 기호나 추상적 개념에 익숙하지 않은 독자들도 선형대수학의 아이디어를 받아들이기 쉬울 것임. 하지만 수학적 엄밀성이 떨어질 가능성도 염두에 둬야 할 듯함.
     * MIT의 Strang 교수의 선형대수학 강의, Gilbert Strang의 Linear Algebra 책 등 이미 잘 알려진 교재들이 많음. 이 책이 그런 기존 교재/강의들과 어떤 차별점이 있는지 궁금함.

        Hacker News 의견

     * 이 선형대수학 교재는 상호작용이 가능한 웹 기반 교재로, 수학 교육의 새로운 방향을 제시함
          + 정적이고 읽기 어려운 기존 교과서의 문제점을 극복하고, 웹 페이지의 역동성을 활용함
          + 상호작용형 문제를 통해 빠른 피드백을 제공하고, 어려운 개념을 쉽게 설명할 수 있음
     * 이와 유사한 다른 교재로는 다음과 같은 것들이 있음
          + Geometry: Euclid의 Elements를 Java로 구현한 버전
          + Physics: Motion Mountain 웹사이트
          + Chemistry: Theodore Gray의 The Elements 앱
     * 저자 중 한 명인 T. A-M의 이전 저서도 훌륭했다는 평가가 있음
     * 이 교재는 선형대수학에 초점을 맞추고 있으며, 웹 기반 교재로서 수학 교육의 미래 방향을 보여줌
          + VR 등 새로운 기술과 결합하면 더욱 발전할 가능성이 있음
     * 다만 모바일 환경에서는 CSS 이슈로 내비게이션 링크가 작게 보이는 문제가 있음
     * 이 교재가 어떤 프레임워크를 사용했는지, 수작업으로 코딩했는지에 대한 정보는 찾기 어려움
"
"https://news.hada.io/topic?id=14801","Sam Altman: GPTo와 OpenAI의 임무 및 GPT-4의 새로운 음성 모드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Sam Altman: GPTo와 OpenAI의 임무 및 GPT-4의 새로운 음성 모드

   • OpenAI의 CEO인 Sam Altman은 최근 발표에서 두 가지 핵심 사항을 강조합니다. 첫째, 그는 광고나 제한 없이 ChatGPT와 같은 강력한 AI 도구에 무료로 액세스할 수 있도록 하겠다는 약속을 강조합니다. 이것은 다른 사람들이 그들의 기술을 사용하여 놀라운 것을 만들 수 있도록 하여 세상의 이익을 위해 AI를 만들겠다는 그들의 초기 비전과 일치합니다. OpenAI는 상업적 기회를 모색할 계획이지만 수십억 명에게 무료로 뛰어난 AI 서비스를 계속 제공하는 것을 목표로 하고 있다.

   • 둘째, 알트만은 GPT-4의 새로운 음성 및 비디오 모드를 소개하며, 이를 자신이 경험한 최고의 컴퓨팅 인터페이스라고 설명한다. 그는 인간 수준의 반응 시간과 표현력을 제공하는 이 기술의 현실에 놀라움을 표현한다. 이 발전은 원래 ChatGPT에서 상당한 변화를 나타내며 빠르고 똑똑하며 재미있고 자연스럽고 도움이 됩니다. 알트만은 개인화, 사용자 정보에 대한 접근, 사용자를 대신하여 조치를 취할 수 있는 능력의 통합으로 컴퓨터가 이전보다 훨씬 더 많은 일을 할 수 있는 미래를 구상하고 있다.

   애플의 ""공간컴퓨팅""에 이은 음성 인터페이스의 큰 도약ㅎㅎ
   사무실에서는 쓰기 힘들겠지만, 혼자있을땐 많이 쓰이겠네요
"
"https://news.hada.io/topic?id=14816","애플과 구글, iOS 및 Android에서 원치 않는 추적 경고 지원 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               애플과 구글, iOS 및 Android에서 원치 않는 추적 경고 지원 제공

     * Apple과 Google이 함께 협업해 Bluetooth 추적 장치를 위한 원치 않는 위치 추적 감지(Detecting Unwanted Location Trackers) 업계 표준을 생성
     * iOS와 Android 모두에서 사용자가 모르는 사이에 이런 장치로 추적당하고 있다면 알림을 전송하게 됨
     * 사용자는 이제 알 수 없는 Bluetooth 추적 장치가 사용자를 따라 움직이는 것이 감지된다면, 해당 기기가 페어링된 플랫폼이 무엇인지에 관계없이 기기에서 ""사용자와 함께 이동하는 [기기 이름] 발견"" 알림을 받게 됨
     * Apple은 iOS 17.5에서 이 기능을 구현하고, Google은 Android 6.0+ 기기에서 이 기능을 공개
     * AirTag가 이를 지원하며, Chipolo, eufy, Jio, Motorola, Pebblebee를 포함한 Bluetooth 태그 제조사는 향후 호환되는 태그를 제작할 예정

GN⁺의 의견

     * 이번 협업은 사용자 프라이버시 보호를 위해 Apple과 Google이 협력한 좋은 사례로 보임. 하지만 이런 기술의 오용을 완전히 막기는 어려울 것임.
     * 앞으로 Bluetooth 추적 장치를 개발하는 제조사들도 이런 경고 기능을 필수로 탑재해야할 것으로 보임. 이는 기술 개발과 함께 사용자 보호도 중요하다는 인식이 확산되고 있음을 보여줌.
     * 다만 이런 경고 시스템이 오작동하거나 악용될 가능성도 염두에 두어야 함. 예를 들어 의도적으로 경고를 유발해 혼란을 줄 수도 있음.
     * 이런 기술을 도입할 때는 사용자 편의성과 프라이버시 보호의 균형을 잡는 것이 중요함. 지나친 경고는 사용자 경험을 해칠 수 있음.

        Hacker News 의견

   요약:
     * Tile/Life360 CEO의 입장:
          + Google과 Apple의 추적 방지 기능은 Bluetooth 기기를 이용한 도난 방지 기능을 무력화시킴
          + 신분증 스캔을 통해 추적 방지 기능을 선택적으로 해제하는 기능을 구현했으나, 실제 악용 사례는 없음
          + Bluetooth 기기보다 Amazon 등에서 판매되는 전용 추적 기기가 더 문제라고 지적
          + Life360의 네트워크 커버리지는 도심 지역에서 대기업 수준이며, 2025년 위성-Bluetooth 네트워크 개방 예정
     * Android 6.0까지 백포팅하는 것은 구버전 사용자가 여전히 많다는 것을 시사함
     * ""규격 호환""이라는 표현은 애매모호함. 독자적인 구현 방식을 막을 수 없음
     * iPhone과 Android 간 호환되는 트래커가 없는 것이 아쉬움
     * 도난 방지용으로 많이 사용되던 기능인데, 도둑이 트래커를 비활성화시킬 수 있게 되어 아쉬움
     * 양사가 상호운용성을 위한 공통 표준에 합의하면 좋을 것
     * iPhone 네트워크가 더 크기 때문에 Apple 제품이 더 유용해 보임
     * 모두에게 이로운 기본적인 선에 대해 경계를 넘어 합의하는 것은 아름다운 일
     * 악의적인 태그(주변 기기와만 통신하는 등)를 감지할 수 있을지 의문
"
"https://news.hada.io/topic?id=14778","Emacs 윈도우 관리 백과사전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Emacs 윈도우 관리 백과사전

Emacs 윈도우 관리에 대한 개요

  윈도우 관리의 평판과 잠재력

     * Emacs의 윈도우 관리는 평판이 좋지 않음
     * 이는 매우 유연하고 세분화된 레이아웃 시스템과 거친 제어를 결합한 결과로 인한 것이 대부분임
     * 이는 윈도우를 처리하기 위해 더 나은 메타포와 affordance를 제공하는 도구를 만들고 사용할 수 있는 여지를 남겨둠

  기본적인 윈도우 관리 옵션들

    other-window와 ""next window""

     * other-window (C-x o)는 기본적인 윈도우 전환 경험을 제공함
     * 이는 Emacs 튜토리얼에서 가르치는 것이며, 윈도우 수가 적을 때 잘 작동함
     * 윈도우 선택은 프레임 전체를 (대략) 시계 방향으로 순환함

    windmove

     * windmove는 방향에 따라 윈도우 간에 포커스를 이동하고 윈도우 간에 버퍼를 이동하기 위한 내장 Emacs 라이브러리임
     * Vim 사용자들에게 기대되는 기능이며, evil-mode 사용자들은 이미 Windmove를 사용하고 있음
     * windmove-left, -right, -up, -down을 방향과 연관된 키에 바인딩하여 사용함

    frames-only-mode

     * frames-only-mode는 Emacs 윈도우 처리를 OS에 맡길 수 있게 해줌
     * 모든 버퍼를 새 프레임에서 열면 윈도우 관리자의 작업이 됨
     * 이는 Emacs 버퍼를 OS 윈도우와 동일하게 만들어 동일한 키로 관리할 수 있게 해줌

    winum-mode

     * Winum은 O(n) (other-window)에서 O(√n) (windmove)으로, 그리고 O(1)로 n개의 윈도우 간 전환하는 노력의 자연스러운 발전임
     * 모드 라인에 윈도우 번호를 추가하여 번호로 윈도우를 선택할 수 있음
     * 미니버퍼가 활성화되면 항상 번호 0이 할당됨

    ace-window

     * ace-window는 키보드 기반 Emacs 윈도우 제어의 끝판왕임
     * 각 윈도우 상단에 ""힌트""를 배치하고 해당 키를 입력하면 해당 윈도우로 포커스가 전환됨
     * 일반적인 방법으로 윈도우를 ""선택""하고 이 윈도우로 무엇을 할지를 사용자가 결정함
     * 윈도우 삭제, 이동 또는 교체, 분할, 버퍼 표시 등 기본 제공 작업 외에도 사용자 정의 작업을 추가할 수 있음

    마우스 사용

     * 윈도우 관리에 마우스를 사용하는 것의 장점은 즉각적이고 명백함
     * 윈도우 선택은 기본적인 마우스 사용의 자연스러운 확장이며, 윈도우 크기 조정은 간단함
     * 컨텍스트 메뉴와 드래그 앤 드롭 지원은 매우 직관적임
     * 단점을 완화하기 위해서는 마우스를 이미 다른 작업에 사용하고 있을 때 Emacs를 마우스로 구동하는 것이 실제로 저항이 가장 적은 경로임

    transpose-frame (회전, 뒤집기 및 뒤집기)

     * transpose-frame은 프레임에서 윈도우 레이아웃을 회전하거나 미러링하는 명령을 제공함
     * rotate-frame, flip-frame, flop-frame을 적절한 키에 바인딩하여 자주 사용함

    window-prefix-map

     * window-prefix-map은 C-x w에 기본적으로 바인딩되어 있으며 몇 가지 유용한 윈도우 관리 명령을 모아둠
     * split-root-window-right와 split-root-window-below는 프레임의 루트 윈도우를 분할함
     * tab-detach와 tear-off-window는 새 탭이나 새 프레임으로 윈도우를 이동하는 편리한 명령임

    other-window-prefix

     * other-window-prefix는 윈도우 선택을 버퍼 표시와 분리하는 방법을 제공하고 세 가지 윈도우 관련 불편함을 해결함
     * 많은 Emacs 명령은 기본 작업, 버퍼 및 윈도우를 긴밀하게 결합함. other-window-prefix를 사용하면 명령의 버퍼를 다른 윈도우에 표시할 수 있음
     * other-window-prefix를 사용하면 링크와 같은 객체를 활성화할 때 윈도우를 선택할 수 있음
     * other-window-prefix를 사용하면 각 패키지 작성자의 작동 방식에 맞추거나 사용자 정의할 필요 없이 균일하게 ""링크"" 객체를 열 수 있음

    윈도우 구성 저장 및 복원

     * window-configuration-to-register는 다소 둔한 도구이지만 큰 빨간색 재설정 버튼으로 완벽함
     * 언제든지 이 명령을 사용하여 현재 윈도우 구성을 레지스터에 저장한 다음 jump-to-register로 복원할 수 있음
     * winner-mode를 사용하면 Emacs가 과거 윈도우 배열의 스택을 유지 관리하도록 요청할 수 있음

  심층 탐구

    앞뒤로 이동하는 방법

     * 동시에 몇 개의 윈도우가 있든 관계없이 대부분의 경우 두 개의 윈도우 사이를 전환하기만 하면 됨
     * other-window-mru 명령을 사용하여 윈도우 쌍 간에 전환할 수 있음

    other-window 개선

     * 단일 윈도우가 있는 경우 프레임을 분할하도록 other-window를 만들 수 있음
     * 공간적 순서 대신 마지막 사용 순서대로 윈도우를 순환하도록 할 수 있음 (switchy-window 패키지)
     * 호출할 때마다 윈도우 전환 방향을 반대로 하여 두 윈도우 간에 자연스럽게 교대할 수 있음

    ace-window 디스패치로 윈도우 마법 사용

     * ace-window는 윈도우에 대해 completing-read가 문자열 목록에 대해 하는 것과 같은 역할을 함
     * aw-select를 사용하여 모든 작업을 모든 윈도우에서 호출하기 위한 세 단계 중 처음 두 단계(필터링 및 선택)에 이상적임
     * ace-window-one-command를 사용하면 ace-window로 윈도우를 선택한 다음 해당 윈도우에서 모든 단순 명령을 실행할 수 있음
     * ace-window-prefix를 사용하면 other-window-prefix와 유사하지만 다음 명령의 버퍼를 표시할 윈도우를 명시적으로 선택할 수 있음

    윈도우를 전환해야 하는가?

     * Avy를 사용한 윈도우에 구애받지 않는 이동은 일반적인 아이디어의 특수한 경우임
     * 텍스트 컨테이너로서 윈도우는 불필요한 추상화일 수 있음
     * mark-ring과 global-mark-ring은 이동한 위치를 추적하여 필요한 경우 윈도우 전체에서 이동할 수 있게 해줌
     * point-to-register와 jump-to-register를 사용하여 나중에 이동할 위치를 수동으로 고정할 수 있음
     * 북마크를 만들고 이동하면 Emacs나 사용자가 확인한 의미 있는 위치로 윈도우 전체를 탐색할 수 있는 많은 옵션을 제공함

    윈도우와 상호 작용하지 않도록 윈도우 처리

     * display-buffer-alist와 자동 윈도우 동작을 사용하여 두더지 잡기 윈도우 문제를 해결할 수 있음
     * 매일 Emacs에서 보는 모든 종류의 버퍼에 대한 규칙을 설정하면 대부분의 윈도우 관리가 해결됨
     * display-buffer-alist의 문제는 작동하지 않는 것이 아니라 많은 작업이 필요하다는 것임
     * Shackle 패키지는 display-buffer-alist의 이상함을 덮어쓰고 윈도우 규칙을 지정하기 위한 단순화된 elisp 인터페이스를 제공함
     * Emacs 배포판은 일반적으로 이러한 설정을 지정하기 위한 간단한 인터페이스를 제공함

    Popper, Popwin, shell-pop 및 vterm-toggle

     * Popwin과 Popper는 모든 버퍼가 동등하게 생성되는 것은 아니라는 관찰을 기반으로 함
     * 이러한 패키지를 사용하면 보조 윈도우를 사용하는 팝업 버퍼를 지정하고 필요에 따라 해당 윈도우를 호출 및 해제할 수 있음

  누락된 부분

    window-tree

     * Emacs가 윈도우를 나타내는 방식과 위에서 논의한 접근 방식을 사용하여 윈도우를 조작하는 방식 사이에는 근본적인 차이가 있음
     * 프레임의 윈도우는 트리로 정렬되며 리프 노드는 ""실제"" 윈도우이고 나머지는 ""내부"" 윈도우임
     * 윈도우-트리 작업을 위한 명령을 추가하면 많은 새로운 가능성이 열림

    타일링 창 관리자 통합기

     * Emacs의 윈도우-트리 모델은 i3나 bspwm과 같은 수동 타일링 윈도우 관리자의 모델과 거의 동일함
     * 타일링 윈도우 관리자 내에서 다른 타일링 윈도우 관리자를 사용하는 이유에 대해 자연스럽게 의문이 제기됨
     * Emacs에서 모든 윈도우 관리자와의 통합을 위한 보다 깨끗하고 통합된 인터페이스를 제공하면 훨씬 쉬워질 수 있음

  전망

     * 윈도우를 전환, 이동, 건너뛰기, 생성, 삭제 및 조작하는 방법, 명령을 호출할 때 즉석에서 윈도우 표시를 제어하는 여러 가지 방법, 윈도우에서 작업하고 윈도우에 대해 전혀 생각하지 않는 방법 등이 있음
     * 윈도우 관리는 복잡하다기보다는 개방적임
     * Emacs는 재료와 일부 지침을 제공하며 재료는 그 자체로 기본 식사로 사용될 수 있음
     * 그러나 약간의 조리로 우리는 맛있는 것을 만들 수 있음

GN⁺의 의견

     * 윈도우 관리는 Emacs의 가장 큰 약점 중 하나이며, 사용자 친화적이지 않음. 특히 초보자에게는 혼란스러울 수 있음.
     * 제시된 방법들은 Emacs의 윈도우 관리 문제를 완화시킬 수 있지만, 근본적인 해결책은 되지 못함. 보다 직관적이고 사용하기 쉬운 윈도우 관리 시스템이 필요함.
     * Emacs의 윈도우 관리는 매우 유

        Hacker News 의견

   아래는 해커뉴스 댓글들을 요약한 내용임:
     * Custom Elisp 함수를 통해 두 윈도우를 70% 대 30%의 크기로 조정하는 방법을 소개함. Lisp 코드도 제공됨.
     * ace-window, ace-window-display-mode, frames-only-mode 등의 패키지를 활용해볼 것을 제안함.
     * Emacs를 싱글 윈도우 모드로 사용하고, 불가피하게 여러 윈도우가 생성되더라도 자동으로 닫히게 한다는 의견도 있음.
     * windmove-mode를 활성화하고 (windmove-default-keybindings 'control)를 통해 Ctrl+방향키로 윈도우 이동이 가능하게 하는 팁이 제공됨.
          + 관련 미니멀 Emacs 설정도 공유됨: https://codeberg.org/ashton314/emacs-bedrock
     * zygospore 패키지를 통해 C-x 1로 윈도우를 닫은 후, 다시 C-x 1을 누르면 이전 윈도우 레이아웃으로 복구할 수 있음을 소개함.
     * Acme 에디터에 대한 언급을 칭찬하는 댓글도 있음.
     * hledger-balance-sheet 함수 실행 시 journal 파일은 왼쪽에 열어두고, 오른쪽에 결과를 30% 크기로 분할해서 보여주는 방법에 대해 질문함.
"
"https://news.hada.io/topic?id=14879","사이버 보안: 전쟁 전 현실 점검","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           사이버 보안: 전쟁 전 현실 점검

사이버 보안: 전쟁 전 현실 점검

     * 사이버 보안과 사회, 전쟁 전 현실 점검
          + 이미 사이버 보안에 대해 충분히 걱정하고 있음
          + 도널드 투스크의 발언 인용: ""새로운 시대가 시작되었음을 받아들여야 함. 전쟁 전 시대임""
          + 사이버 보안은 단순히 해커나 랜섬웨어로부터 안전한지 여부를 넘어 전쟁 차원의 문제도 포함함

도널드 투스크의 경고

     * 도널드 투스크, 폴란드 총리 (2007-2014, 현재도 재임 중)
          + 러시아가 실제 위협이라고 경고했으나 무시됨
          + 현재 다시 경고 중: ""우리는 나쁜 시대에 있으며 이를 과소평가하고 있음""

사이버 보안의 다양한 측면

     * 폭스-IT와의 협업 경험
          + 파워DNS 소프트웨어를 통해 여러 국가의 통신사 보안 유지
     * 정보 기관에서의 경험
          + 네덜란드 정부의 모든 사이버 작전 이해
          + 유럽에서 유일하게 기술 전문가가 포함된 정보 기관 규제 위원회

실제 사이버 사건

     * 스턱스넷 작전
          + 이란의 우라늄 농축 시설을 물리적으로 파괴
     * 비아샛 모뎀 공격
          + 러시아가 우크라이나 침공 직전 위성 통신 모뎀을 물리적으로 비활성화
          + 독일의 풍력 터빈 4,000개가 작동 불능

전쟁 시 중요한 요소

     * 견고한 인프라
          + 예: 마이크로소프트 365는 자주 다운됨
     * 제한적이고 알려진 의존성
          + 예: 5,000km 떨어진 곳에서 유지보수 필요
     * 즉흥적으로 문제 해결 가능
          + 예: 비공식 케이블 사용, 펌웨어 직접 수정

현대 통신 방법의 문제점

     * 사운드 파워드 전화기
          + 전기 없이 작동, 매우 견고
     * 네덜란드 비상 통신망
          + 구리선 네트워크에서 DSL 모뎀으로 전환, 신뢰성 문제

사이버 보안의 현재 상황

     * 중국 인프라 의존
          + 네덜란드의 통신 인프라가 중국에 의해 운영됨
     * 클라우드 의존
          + 구글, 마이크로소프트, AWS가 주요 IT 인프라 운영
          + 유지보수 인력이 해외에 있음

GN⁺의 의견

    1. 사이버 보안의 중요성
          + 현대 사회에서 사이버 보안은 단순한 기술 문제가 아니라 국가 안보와 직결됨
    2. 자체 인프라 관리 필요성
          + 외부 의존도를 줄이고 자체 인프라를 관리할 필요가 있음
    3. 기술 인력 유지
          + 클라우드로의 전환이 기술 인력의 이탈을 초래할 수 있음
    4. 기술적 소유권
          + 인프라에 대한 충분한 이해와 소유권이 필요함
    5. 대체 통신 수단
          + 전통적인 통신 수단의 중요성을 재고할 필요가 있음

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 유럽 열차 제어 시스템에서 GPS 사용의 문제점에 대해 동의함. GPS가 방해받으면 열차가 멈출 위험이 있음. 중요한 인프라는 우주나 먼 곳에 의존해서는 안 됨.
     * 복잡한 문제를 해결할 때 단순한 방법 대신 복잡한 방법을 선택하는 경향이 있음. 모든 문제에 복잡한 접근이 필요한 것은 아님.
     * 비기술적 사람들이 비용 절감을 위해 선택한 결과, 사이버 보안의 '나쁜 행위자'들은 분산되어 빠르게 혁신하는 반면, '좋은 행위자'들은 중앙집중화되고 제한적임. 소프트웨어 제공자들은 네트워킹 보안을 소비자에게 맡겨야 했음.
     * 글쓴이로서 질문이 있으면 알려달라는 의견.
     * GPS가 사용 불가능해지면 항공 교통 관제사들이 매우 바빠질 것임. 지상 기반 항법 장치의 예산을 줄이는 것은 미친 짓임.
     * 국가 인프라 유지 관리를 중국에 의존하는 것은 위험함. 중국이 대만을 침공하면 큰 문제가 될 것임.
     * 주요 강대국들이 사이버 전쟁에서 상호 파괴를 보장하는 비밀 협정을 가지고 있을 가능성이 있음. 0-day 취약점을 이용해 전 세계 컴퓨터와 휴대폰을 공격할 수 있음.
     * COVID-19도 외국에 대한 의존도를 줄이지 못했음. 전쟁 위기가 와도 변화가 없을 것임. 우리는 항상 최단 경로를 최적화하려고 함.
     * 법원 및 사법 소프트웨어의 보안 문제를 지적한 후 해고된 경험이 있음. 현재 실업 상태이며, 많은 기술 전문가들이 일자리를 찾기 어려워하고 있음. 일부는 블랙햇 해커로 전향할 유혹을 느낄 수 있음.
     * Stuxnet의 영향이 과장되었다는 의견. 이란의 핵 프로그램을 몇 주 정도 지연시켰을 뿐임. 사이버 공격은 큰 피해를 줄 수 있지만, Stuxnet은 그 예로 적절하지 않음.
"
"https://news.hada.io/topic?id=14869","Rate Limit 알고리듬을 시각화해서 알아보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Rate Limit 알고리듬을 시각화해서 알아보기

왜 Rate Limit(사용량 제한)이 필요한가?

     * 많은 참여자가 있는 트위치 채팅에서 스패머 한 명이 있을 때, 사용량 제한이 없다면 스패머가 대화를 지배할 수 있음.
     * 사용량 제한을 통해 각 사용자가 공정하게 참여할 기회를 가질 수 있음.
     * Rate Limiter(사용량 제한기)는 특정 기간 동안 설정된 한도를 초과하는 요청을 차단하여 서비스의 트래픽을 제어함. 이는 채팅에서의 스팸 조절 외에도 유용함
     * 예를 들어, 로그인 폼에서 사용량 제한을 통해 브루트 포스 공격을 억제하면서도 소량의 잘못된 추측을 허용할 수 있음
     * API 엔드포인트도 종종 사용량 제한이 적용되어 단일 사용자가 리소스를 독점하지 못하게 함
          + 사용자가 비싼 API 엔드포인트를 분당 100번만 호출할 수 있도록 하면 카운터를 사용하여 분당 100번의 히트를 추적하고, 그 후의 요청은 차단
          + 이는 가장 간단한 사용량 제한 알고리듬 중 하나인 고정 윈도우 제한기(Fixed Window Limiter)임
          + 서비스 트래픽을 제어하는 일반적인 방법

Fixed windows 알고리듬

     * 고정된 시간 창(window) 내에서 요청 수가 제한됨
     * 각 시간 창의 시작에 요청 카운터가 0으로 재설정됨
     * 장점
          + 구현과 이해가 쉬움
          + 사용자에게 예측 가능함
     * 단점
          + 시간 창 끝 무렵에 요청이 시작되면 제한의 최대 2배까지 요청 폭증(burst)이 허용될 수 있음
     * 실제 사례: GitHub API는 시간당 5,000개의 요청을 허용하는 고정 시간 창 속도 제한기를 사용함
     * 시간 창의 시작 시간을 고정된 간격으로 설정하는 대신, 각 시간 창은 해당 시간 창 내에서 사용자의 첫 번째 요청 시점에 생성될 수 있음
     * 이 접근 방식에서는 다음 시간 창까지 남은 시간을 사용자에게 알려주는 것이 특히 중요함

슬라이딩 윈도우(Sliding windows) 알고리듬

     * 용량을 한 번에 모두 새로 고치는 대신, 슬라이딩 윈도우는 한 번에 하나의 요청씩 용량을 채움
     * 장점
          + 요청 트래픽의 분포를 부드럽게 함
          + 높은 부하에 적합함
     * 단점
          + 고정 시간 창보다 사용자에게 예측 가능성이 떨어짐
          + 각 요청의 타임스탬프를 저장하는 것은 리소스 집약적임
     * 높은 트래픽 시나리오에서 슬라이딩 윈도우가 가장 유용하기 때문에, 기본 알고리듬이 리소스 집약적이라는 사실은 역효과를 낳음
     * 따라서 대부분의 실제 슬라이딩 윈도우 속도 제한기는 근사 방식(approximation)을 사용함
     * 근사 방식은 이전 고정 시간 창에서 허용된 요청 수와 현재 고정 시간 창에서 허용된 요청 수를 계산하고, 이전 시간 창의 허용된 요청을 현재 시간에 끝나는 부동 시간 창과의 중첩에 비례하여 가중치를 부여함
     * 이 근사 방식은 요청을 거의 동일한 비율로 제한하지만 훨씬 더 효율적임
     * 실제 사례: Cloudflare의 구성 가능한 속도 제한기는 근사 슬라이딩 윈도우를 사용함

토큰 버킷(Token buckets) 알고리듬

     * 시간 창의 지속 시간 대신, 일정한 속도로 ""토큰""으로 채워지는 버킷을 상상함
     * 각 요청은 이 버킷에서 하나의 토큰을 인출하고, 버킷이 비어 있으면 다음 요청이 차단됨
     * 버킷의 용량은 버스트가 지원할 수 있는 최대 요청 수를 나타냄
     * 보충 간격은 장기 평균 허용 요청 간격을 나타냄
     * 여러 개의 속도 제한기 없이 별개의 버스트 및 평균 용량을 가질 수 있다는 것이 이 알고리듬의 주요 이점 중 하나임
     * 장점
          + 높은 트래픽의 버스트를 허용하지만 장기 평균 요청 속도를 적용함
          + 사용자에게 더 유연하여 허용 가능한 범위 내에서 트래픽 급증을 허용함
     * 단점
          + 고정 시간 창보다 사용자에게 제한 사항과 보충 시간을 전달하기가 더 어려움
     * 실제 사례
          + Stripe는 사용자당 500개의 제한과 0.01초의 보충 간격을 가진 토큰 버킷을 사용하여 초당 100개의 요청을 지속적으로 허용하지만 최대 500개의 요청까지 버스트를 허용함
          + OpenAI의 GPT-3.5 무료 티어는 200개의 제한과 86400초/200의 보충 간격을 가진 토큰 버킷을 사용하여 하루에 200개의 요청으로 제한됨

레이트 리밋 적용 시 고려 사항

     * 레이트 리미터에 대한 영구 저장소를 만들어야 함
     * 영구 저장소에 대한 서버의 연결이 실패하면 요청을 차단하지 않고 모두 허용하도록 해야 함
     * 선택적으로 버스트 트래픽을 조절할 수 있음
     * 적절한 키를 선택해야 함 (사용자 ID, API 키 등)
     * 유용한 속도 제한 오류를 표시해야 함 (다음 요청까지 대기 시간, 429 HTTP 상태 코드, x-ratelimit-* 응답 헤더 등)

   한글로 요약 된 글 읽고, '오케이 뭔지는 알겠는데 다 같은 내용 아닌가?' 라고 생각하며 원본 링크의 글을 읽으니 정말 잘 설명하고 시각화도 너무 만족스럽습니다! 👍👍👍

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 오랜 경험에서 얻은 추가 고려사항들:
          + Rate Limits: 백엔드 용량 문제를 해결하지 못함. 정책적 제한으로 간주해야 함.
          + Bad Traffic: 단순한 rate limits 외에 추가 조치를 고려해야 함. 인증 상태, 사용자/세션 우선순위 등을 기반으로 트래픽 우선순위를 정하는 것이 유용함.
          + Communication: 중요한 고객이나 내부 팀이 rate limits에 도달했을 때의 대응 방안을 준비해야 함.
          + Concertina Effects: 모든 고정 창 또는 많은 슬라이딩 창이 동시에 만료되는 것을 방지하기 위해 각 사용자/세션 창에 결정론적 오프셋을 추가해야 함.
     * 멀티테넌트 환경에서 DoS 공격을 방지하려면 공정 큐잉이 최적의 접근법임: 각 클라이언트에게 자체 큐를 할당하고, 백그라운드 루틴이 각 큐를 반복적으로 순회하며 요청을 처리함. 스팸 요청을 보내는 클라이언트는 자신의 큐만 혼잡하게 만듦.
     * 클라이언트 처리 코드 구현 경험: rate limit에 도달했을 때 최적의 백오프 전략에 대해 항상 궁금했음. 서비스 관점에서의 트레이드오프를 읽는 것이 흥미로웠음.
     * 축하 메시지: 짧은 콘텐츠에 대한 최고의 시각화로 매우 정보가 많고 요점이 잘 정리된 게시물임.
     * GCRA 알고리즘: rate limiting에 더 나은 알고리즘이라고 생각함. 더 널리 알려지고 사용되었으면 좋겠음.
          + GCRA 구현 예제
          + GCRA 위키피디아
     * 훌륭한 작업: 이 게시물에 많은 시간과 노력이 들어갔음을 느낄 수 있음. 잘했음.
     * AWS Lambda에서의 rate-limiting 문제: NodeJS에서 rate-limiting을 구현하려고 했으나, AWS Lambda에서는 타이머가 이상하게 작동하여 목표를 초과함. 로컬 테스트에서는 통과했지만 Lambda에서는 실패함. 타이머 문제인지 라이브러리 문제인지 불확실함.
     * Rate limiting 레이어가 포화 상태일 때의 대처: CF를 제외한 다른 옵션이 있는지 궁금함. 작은 VPS에서의 DoS 공격 방어에 nftable 규칙이 얼마나 효과적인지 궁금함.
     * 이 리소스가 필요했던 순간들: 경력 동안 여러 번 필요했던 리소스임. 이제 존재하게 되어 기쁨.
     * 데이터 시각화 팬: D3를 사용하고 있는지 궁금함.
"
"https://news.hada.io/topic?id=14866","D3 심층 분석심층 분석

D3 in Depth

  D3 in Depth는 D3 버전 6과 7을 다룸

     * 홈페이지: D3 in Depth는 D3.js의 최신 버전인 6과 7을 다루는 사이트임.
     * 소개: 이 사이트는 D3.js를 이용한 데이터 시각화에 대한 깊이 있는 내용을 제공함.
     * 뉴스레터: 뉴스레터를 통해 책 할인 정보와 D3.js 관련 뉴스 및 팁을 받을 수 있음.

  책 및 강좌

     * Visualising Data with JavaScript: Chart.js, Leaflet, D3, React를 사용하여 차트, 대시보드 및 데이터 스토리를 만드는 방법을 가르침.
          + ""내가 읽은 최고의 D3 책 중 하나. 내용이 매우 명확하고 따라하기 쉬우며 개념이 매우 탄탄함."" - Javier García Fernández
     * 커스텀 데이터 시각화: D3.js를 사용하여 커스텀 데이터 시각화를 만드는 방법을 배울 수 있음.
     * 기초 학습: 웹에서 데이터 시각화를 구축하기 위한 HTML, SVG, CSS 및 JavaScript의 기본을 배울 수 있음.

  목차

     * D3 소개
     * 시작하기
     * 선택(Selections)
     * 데이터 조인(Data joins)
     * Enter, exit & update
     * 스케일 함수(Scale functions)
     * 도형(Shapes)
     * 축(Axes)
     * 계층(Hierarchies)
     * 코드 다이어그램(Chord Diagrams)
     * 포스 레이아웃(Force layout)
     * 지도(Maps)
     * 데이터 요청(Data Requests)
     * 전환(Transitions)
     * 선택, 드래그 및 브러싱(Picking, Dragging and Brushing)
     * 줌 & 팬(Zoom & pan)

  뉴스레터

     * 구독: 책 할인 정보와 D3.js 관련 뉴스 및 팁을 받을 수 있음.

  저작권

     * © Peter Cook 2023

GN⁺의 의견

     * D3.js의 중요성: D3.js는 데이터 시각화 라이브러리로, 복잡한 데이터를 시각적으로 표현하는 데 매우 유용함. 특히 대규모 데이터 세트를 다룰 때 강력한 도구임.
     * 학습 곡선: D3.js는 강력하지만 학습 곡선이 가파를 수 있음. 이 사이트는 초보자부터 고급 사용자까지 모두에게 유용한 자료를 제공함.
     * 다양한 도구와의 통합: Chart.js, Leaflet, React 등 다른 도구와의 통합 방법을 배울 수 있어, 다양한 프로젝트에 적용 가능함.
     * 실습 중심: 이 사이트는 실습 중심으로 구성되어 있어, 실제 프로젝트에 바로 적용할 수 있는 지식을 얻을 수 있음.
     * 기술 선택 시 고려사항: D3.js를 선택할 때는 프로젝트의 복잡성, 팀의 기술 수준, 유지보수 가능성 등을 고려해야 함. D3.js는 강력하지만, 간단한 시각화에는 오히려 과도할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Observable Plot과 Observable Framework 소개
          + D3를 사용한 데이터 시각화에 관심이 있다면, 더 높은 수준의 편의성을 제공하는 Observable Plot을 확인해볼 만함.
          + Observable Framework는 정적 사이트 생성기로, Plot, D3 및 다양한 라이브러리를 지원하여 시각화 대시보드를 구축할 수 있음.
          + Observable Plot
          + Observable Framework
     * D3 사용의 어려움
          + D3를 사용한 경험이 많지만, 몇 년 만에 다시 사용하면 문서가 혼란스럽고 처음부터 다시 시작하는 느낌을 받음.
          + 수학 문제를 푸는 것보다 D3 문서를 이해하는 것이 더 어려움.
     * D3 학습의 가치
          + D3를 전문적으로 사용하지 않더라도 학습할 가치가 있음.
          + 데이터의 투영과 실제 데이터의 차이를 이해하고, 이를 스케일링하는 방법을 배울 수 있음.
          + 웹이 아니더라도 다른 환경에서 데이터 시각화를 할 때 유용함.
     * D3.js의 발전과 현대적 대안
          + D3.js를 사용하여 많은 프로젝트를 진행했지만, 이제는 구식으로 느껴짐.
          + Vue 3와 TypeScript 같은 현대적인 프레임워크로 전환했지만, D3.js가 준 좋은 실천 방법들에 감사함.
     * VisX와 같은 대안
          + D3를 배우고 나서 VisX와 같은 구조화된 도구로 전환하는 것이 좋음.
          + D3와 jQuery는 스파게티 코드가 되기 쉬움.
     * Grammar of Graphics와 ggplot2
          + D3는 Wilkinson의 Grammar of Graphics에서 영감을 받음.
          + R 언어의 ggplot2도 같은 영감을 받아 더 간결하고 기능적인 인터페이스를 제공함.
     * 강제 지향 그래프의 문제
          + D3 예제의 강제 지향 그래프를 좋아하지만, 노드와 엣지가 많아지면 구성이 좋지 않게 됨.
          + 3D 시각화가 필요할 수도 있음.
     * 유용한 D3 리소스
          + D3를 이해하는 데 도움이 된 유일한 리소스가 있었음.
          + 저자가 응답성이 좋고 도움이 됨.
     * Vega 소개
          + D3 위에 있는 Vega에 대해 좋은 이야기를 들음.
          + OpenSearch Dashboards의 종속성으로, 사용자들이 로그와 관찰 데이터에 대한 맞춤형 대시보드를 만들 수 있게 함.
          + Vega 문서
          + OpenSearch Dashboards에서 Vega 사용
     * D3 문법의 복잡성
          + D3로 만든 시각화는 좋지만, 문법이 너무 복잡하고 구식임.
          + 더 선언적인 방식으로 전환되어 다행임.
"
"https://news.hada.io/topic?id=14785","자폐증의 발달학적 기원을 밝히는 Metabolism 연구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    자폐증의 발달학적 기원을 밝히는 Metabolism 연구

     * 연구자들이 자폐 스펙트럼 장애(ASD)의 출생과 나중에 나타나는 증상 사이의 대사 변화에 대해 새로운 통찰력을 얻음
     * 소수의 생화학 경로가 이러한 변화의 대부분을 책임지고 있으며, 이는 자폐증에 대한 새로운 조기 발견 및 예방 전략에 도움이 될 수 있음
     * 자폐증의 첫 번째 증상이 실제로 나타나는 위험에서 전환을 조절하는 역학에 대해 배우기 시작하고 있음
     * 자폐증은 사회성, 의사소통의 어려움, 반복적 및/또는 제한적 행동을 특징으로 하는 발달 장애임
     * 자폐증은 강한 유전적 위험 요인을 가지고 있는 것으로 알려져 있지만, ASD의 발병과 심각도에 영향을 미치는 환경적 위험 요인도 있음
     * 행동과 대사는 연결되어 있으며 분리할 수 없음

유아 코호트 연구

     * 연구자들은 자폐증이 있는 어린이에게 발생하는 초기 대사 변화에 대해 자세히 알아보기 위해 두 개의 어린이 코호트를 연구함
     * 한 코호트는 자폐증을 발견할 수 없는 신생아로 구성되었고, 다른 코호트는 일부가 자폐증으로 진단된 5세 어린이로 구성됨
     * 연구자들이 조사한 50개의 서로 다른 생화학 경로 중 14개만이 자폐증의 대사 영향의 80%를 차지함

세포위험반응

     * 가장 많이 변화된 경로는 상해 또는 대사 스트레스에 대한 자연적이고 보편적인 세포 반응인 세포 위험 반응과 관련이 있음
     * 위협이 지나가면 세포 위험 반응을 차단할 수 있는 생화학적 안전장치가 있지만, Naviaux는 이러한 안전장치가 정상적으로 발달하지 못할 때 자폐증이 발생한다고 가정함
     * 그 결과 환경 자극에 대한 민감도가 높아지며, 이 효과는 감각 민감성 및 자폐증과 관련된 기타 증상에 기여함
     * 세포 위험 반응은 주로 ATP(아데노신 삼인산)에 의해 조절되며, 자폐증에서는 이러한 ATP 신호 전달 경로가 정상적으로 발달하지 않지만 기존의 의약품으로 부분적으로 복원될 수 있음

GN⁺의 의견

     * 이 연구는 자폐증의 발병 메커니즘에 대한 새로운 통찰력을 제공하며, 조기 진단 및 치료에 도움이 될 수 있음. 하지만 자폐증은 매우 복잡한 장애이므로 대사 경로만으로 모든 것을 설명할 수는 없을 것임
     * ATP 신호 전달을 조절하는 약물이 자폐증 치료에 도움이 될 수 있다는 점은 주목할 만하지만, 부작용 등 안전성에 대한 우려도 있을 수 있음. 임상 시험을 통해 효과와 안전성을 검증하는 것이 중요함
     * 자폐증의 원인과 발병 메커니즘을 이해하는 것은 중요하지만, 사회적 인식 개선과 지원 체계 마련 등 자폐증을 가진 사람들의 삶의 질 향상을 위한 노력도 병행되어야 할 것임
     * 자폐증은 출생 시에는 발견하기 어려운 장애이므로, 영유아기 정기 검진 등을 통해 조기에 발견하고 개입하는 것이 중요함. 이를 위해서는 소아과 의사 등 전문가들의 인식 제고와 역량 강화도 필요함

        Hacker News 의견

     * Dr. Randy Blakely의 연구에 따르면, 자폐증 환자의 25-30%에서 혈소판 과세로토닌혈증(혈액 내 결합 세로토닌 수치 증가)이 나타남. 이는 수십 년 동안 설명되지 않았지만, 최근 SERT 수송체 다형성과 염증으로 좁혀짐.
     * 세로토닌 대사의 차이(및 수용체 과민성)가 SSRI가 ASD 증상에 대한 1차 치료제로 간주되지 않는 이유일 수 있다는 가설이 있음.
     * 연구진들은 이해하지 못하는 약물을 사용하여 이해하지 못하는 상태를 치료하려 하고 있으며, 이는 다양한 모델들과 경쟁하거나 불완전하게 부합함.
     * 1형 자폐증은 특정 지능 특성을 인간 유전자 풀에 전달하는 기능을 할 수 있음. 산업 의학의 맥락에서 이를 해결하는 것이 현명한지는 의문임.
     * 2형과 3형 자폐증은 1형 자폐증 발달에 대한 유전적으로 실패한 시도일 수 있음. 부작용이 적은 경구 또는 경피 약물이 자폐증 PFC에 에너지 지원을 강화한다면 게임 체인저가 될 수 있음.
     * 자폐증 인접한 사람으로서 치료나 예방에 대해 논의할 때 불편함을 느낌. 이는 자신의 정체성이기 때문.
     * 관찰 단계에 불과한 이 연구가 유사과학 인플루언서들에 의해 자폐증을 예방하기 위한 유행 식단을 홍보하는 데 사용될 수 있음을 우려함.
     * 일부 자폐증 당사자들은 글루텐 프리 식단이 증상을 크게 줄인다고 주장함. 장-뇌 축을 고려할 때 좋은 식단이 도움이 될 수 있을 것으로 보임.
     * 이는 ""백신이 자폐증을 유발한다""는 주장과 유사해 보임. 대부분의 백신은 체내 공격적 반응을 일으키는 화학물질이나 생물학적 물질을 함유하고 있음.
     * 또 다른 천재 과학자의 탄생을 막을 수 있게 되었다는 풍자적 의견도 있음.
"
"https://news.hada.io/topic?id=14898","PostgreSQL로 RAG 시스템 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PostgreSQL로 RAG 시스템 구축하기

     * Retrieval-Augmented Generation(RAG) 시스템을 통해 기존의 내부 지식 기반(위키, 매뉴얼, 교육 및 참고 자료 등)을 바탕으로 질문에 답할 수 있는 AI 어시스턴트를 만들 수 있음
     * PostgreSQL, pgvector, ollama, 그리고 200줄 이하의 Go 코드만으로 RAG 시스템 구축 가능

Overview

     * 몇 단락의 이야기를 ""문서 코퍼스""로 사용하고, 각 문서에 대해 Meta의 Llama3를 사용하여 문서 임베딩 생성(ollama로 로컬 호스팅)
     * 문서와 임베딩을 PostgreSQL 테이블에 저장하며, pgvector 확장을 통해 임베딩 저장 및 접근
     * 사용자 쿼리에 대해 가장 관련 있는 1개의 문서를 테이블에서 검색하여 Llama3를 사용해 응답 생성
     * ollama는 OpenAI와 유사한 HTTP API를 제공하여 임베딩과 채팅 응답을 생성해줌
     * Go 코드는 jackc/pgx와 pgvector-go를 사용하여 Postgres와 통신하며, ollama 클라이언트 API 패키지를 사용하여 HTTP API 호출을 처리함

Ollama로 모델들 실행하기

     * Ollama는 오픈소스 모델을 로컬에서 실행할 수 있게 해주는 도구로, OpenAI 스타일의 REST API를 제공함
     * ollama pull llama3 명령으로 llama3 모델 실행
     * ollama의 HTTP 서버는 기본적으로 127.0.0.1:11434에서 이용 가능

pgvector 설치

     * pgvector는 PostgreSQL 12~16 버전용 확장 기능으로, pgdg APT 저장소 사용시 sudo apt install postgresql-16-pgvector로 설치 가능
     * 설치 후 create extension vector;로 데이터베이스에 확장 기능 설정
     * create table items (id serial primary key, doc text, embedding vector(4096));로 문서와 임베딩 저장용 테이블 생성함

문서 데이터

     * Sherlock Holmes 이야기 ""The Boscombe Valley Mystery""에서 4개의 단락을 사용함(퍼블릭 도메인-프로젝트 구텐베르크)

코드

     * GitHub에 MIT 라이선스로 공개된 데모 코드 사용 가능함
     * 문서 삽입은 INSERT INTO items (doc, embedding) VALUES ($1, $2)
     * 가장 관련성 높은 문서 검색은 SELECT doc FROM items ORDER BY embedding <-> $1 LIMIT 1 (<-> 연산자는 pgvector에 의해 제공)
     * Ollama API 호출은 ollama Go 패키지 사용함
          + 임베딩 생성은 api.EmbeddingRequest 사용
          + 채팅 응답 생성은 api.ChatRequest 사용 (프롬프트에 검색된 문서 포함)

커맨드라인 인터페이스

     * ragdemo -insert {path-to-doc-file}로 문서를 데이터베이스에 저장
     * ragdemo -query {query-text}로 프롬프트 입력하여 응답 생성

전체 과정

    1. -insert 옵션으로 문서 저장시, 파일 내용 읽고 Llama3로 임베딩 생성하여 PostgreSQL에 저장
    2. -query 옵션 사용시, 프롬프트 임베딩 생성 후 items 테이블의 다른 임베딩들과 비교하여 ""최근접"" 문서 검색 (<-> 연산자로 L2 거리 계산)
    3. 검색된 문서를 프롬프트에 포함하여 Llama3에 전달, 채팅 응답 생성하여 출력

추가 팁

     * 임베딩 생성에 특화된 모델 사용 고려 (llama3 대신)
     * 영어 외 언어는 더 적합한 모델 탐색 필요
     * L2 거리 외에 다른 거리 계산법 시도해볼 수 있음 (pgvector 가 다른 방법을 지원함)
     * 전체 테이블 스캔은 확장성 낮으므로 pgvector 인덱스 등 활용
     * 생성 단계에서 더 많은 문서 활용하거나, 키워드 매칭 등으로 추가 문서 가져오는 것도 도움됨
     * 생성 프롬프트 조정 및 다양한 LLM 시도로 출력 품질 개선 가능
"
"https://news.hada.io/topic?id=14815","팰컨 2 로켓 발사 준비 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            팰컨 2 로켓 발사 준비 완료

Falcon 2 시리즈의 차세대 모델 출시

     * Technology Innovation Institute (TII)에서 차세대 대규모 언어 모델(LLM) Falcon 2 시리즈를 출시함
          + Falcon 2 11B: 5.5조 토큰으로 학습된 110억 파라미터 모델로 효율성과 접근성이 향상됨
          + Falcon 2 11B VLM: 시각 입력을 텍스트 출력으로 변환하는 vision-to-language 기능을 가진 최초의 multimodal 모델임
     * 두 모델 모두 다국어를 지원하며, 특히 Falcon 2 11B VLM은 현재 최고 수준의 모델 중 유일하게 이미지-텍스트 변환 기능을 제공함

Falcon 2 11B의 성능

     * Hugging Face의 평가에 따르면, Falcon 2 11B는 Meta의 Llama 3 8B보다 우수한 성능을 보였으며, Google의 Gemma 7B와 유사한 성능을 보임 (Falcon 2 11B: 64.28 vs Gemma 7B: 64.29)
     * Falcon 2 11B와 11B VLM은 모두 오픈소스로 개발자들에게 제한없이 공개될 예정임
     * 향후 Falcon 2 시리즈는 다양한 크기의 모델로 확장될 예정이며, Mixture of Experts(MoE) 기술을 도입하여 성능을 한층 더 발전시킬 계획임

Falcon 2 11B VLM의 특징

     * 영어, 프랑스어, 스페인어, 독일어, 포르투갈어 등 다국어 처리 가능
     * 환경의 이미지와 시각 정보를 인식하고 해석하는 vision-to-language 기능 탑재
          + 의료, 금융, 전자상거래, 교육, 법률 등 다양한 산업 분야에서 활용 가능
          + 문서 관리, 디지털 아카이빙, 컨텍스트 인덱싱부터 시각 장애인 지원까지 광범위한 활용 분야
     * 단일 GPU에서 효율적으로 실행 가능하여 확장성이 뛰어나며, 노트북 등 가벼운 인프라에 통합하기 용이함

GN⁺의 의견

     * Falcon 2 시리즈는 기존 Falcon 모델의 성능과 효율성을 한층 더 높인 차세대 모델로, 특히 Falcon 2 11B VLM은 vision-to-language 기능을 탑재한 최초의 대규모 다국어 multimodal 모델이라는 점에서 큰 의의가 있음. 이는 시각 데이터와 언어 데이터를 통합 처리할 수 있게 함으로써 보다 인간에 가까운 자연스러운 인터랙션을 가능케 할 것으로 기대됨.
     * 다만 multimodal AI는 아직 초기 단계로 안정성과 견고성 측면에서 개선의 여지가 있음. 따라서 실제 활용을 위해서는 데이터의 편향성 문제, 프라이버시와 보안 이슈, 그리고 잘못된 입력에 대한 취약점 등을 면밀히 점검하고 보완해 나가는 과정이 필요할 것으로 보임.
     * Falcon 2 시리즈가 오픈소스로 공개된다는 점 역시 주목할 만한 부분임. 이는 개발 커뮤니티의 활발한 참여를 이끌어내고, 모델의 개선과 확장을 가속화할 수 있을 것으로 기대됨. 다만 오픈소스 모델의 경우 악의적인 사용 가능성에 대한 우려도 있으므로, 라이선스 정책에 acceptable use policy 등을 포함시켜 책임있는 AI 활용을 유도하는 것이 바람직해 보임.
     * Mixture of Experts(MoE) 기술 도입 계획 역시 흥미로운 대목임. MoE는 특화된 여러 개의 작은 네트워크를 조합하여 전문 도메인 간 협업을 통해 보다 정교하고 맞춤화된 결과를 도출하는 방식으로, 향후 Falcon 2 시리즈의 성능 향상에 크게 기여할 것으로 예상됨. 이 같은 연구 방향성은 단순히 모델의 규모를 키우는 것을 넘어, 보다 효율적이고 지능적인 AI 시스템을 구현하기 위한 노력의 일환으로 평가할 수 있음.

        Hacker News 의견

     * Falcon 2 11B 모델의 벤치마크 결과가 Mistral 7B 및 Llama 3 8B와 비슷한 수준이라는 점이 지적됨. 모델 크기 증가를 고려하면 그다지 대단해 보이지 않음.
     * 라이선스에 문제가 있음. Apache 2 라이선스를 수정해서 추가 조항을 포함했는데, 수용 가능한 사용 정책을 준수해야 한다는 요구사항이 있음. 문제는 그 정책이 앞으로 어떻게 변경될지 모른다는 점. 현재 내용과 무관하게 나중에 어떤 내용으로도 바뀔 수 있고 그것을 따라야 함. 이런 라이선스를 ""오픈소스""라고 부르는 추세가 OSI 정의에 부합하지 않는 문제점으로 지적됨.
     * ""Falcon 2 11B가 Meta의 Llama 3 8B보다 우수하고 Google의 Gemma 7B와 동등한 성능을 보인다""는 주장에 대해, Llama 3 8B가 거의 모든 측면에서 Gemma 7B를 능가한다는 인상을 강하게 받았다는 반론이 제기됨.
     * ""유일한 Vision-to-Language 기능을 가진 AI 모델""이라는 표현에 대해, GPT-4 Vision이나 LLaVA가 하는 것과 크게 다르지 않은 것 아니냐는 의문이 제기됨.
     * Falcon 모델이 그다지 개방적이지 않다는 점이 다시 한번 지적됨. 원래 Falcon은 벤치마크 결과만큼 성능이 뛰어나지 않았음. 중대한 도약이라며 발표되었지만 경쟁 모델을 능가한다고 느끼지 못했다고 함.
     * 11B 모델이 '같은 급'의 7B, 8B 모델보다 성능이 우수하다는 PR이 좀 과장된 느낌. 로컬 추론을 위해 시도는 해보겠지만, 일단은 파인튜닝된 Llama 3 8B가 현재로선 최고라는 게 직감적 판단.
     * 대부분 공개 데이터셋으로 학습하고 AWS 하드웨어와 잘 알려진 알고리즘과 기술을 사용했다면, 돈만 있으면 누구나 학습시킬 수 있는 다른 모델과 무엇이 다른지 의문. 관련성을 보이려는 노력과 '플렉스'로밖에 보이지 않는다는 회의적/비판적 시각도 제기됨.
     * Falcon 2 11B가 Llama 3 8B보다 우수하다고 하는데, 파라미터 수가 더 많으니 공정한 비교가 아님. 최고 오픈소스 모델은 Llama 3 70B로 보이는데 최고 모델은 능가하지 못하면서 Llama 3를 능가했다고 주장하는 이유가 의문시 됨.
"
"https://news.hada.io/topic?id=14853","Oracle, 기업용 제품에서 사용중인 Terraform을 OpenTofu로 교체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Oracle, 기업용 제품에서 사용중인 Terraform을 OpenTofu로 교체

     * Oracle E-Business Suite (EBS) Cloud Manager의 최신 업데이트인 24.1.1.1 버전에서 Terraform 대신 오픈소스 포크인 OpenTofu를 사용하게 됨
          + 이는 Terraform의 라이선스 변경으로 인한 것임
          + 2024년 6월 30일까지 Cloud Manager를 24.1.1.1 버전으로 업그레이드해야 함
          + 이번 릴리스에서는 보안 표준을 유지하고 지원 가능성을 개선하기 위해 추가 구성 요소도 업데이트됨
     * 결정 배경:
          + 2023년에 Hashicorp는 Terraform과 다른 제품들에 대해 이전에 사용하던 MPL 2.0 대신 더 제한적인 BSL 1.1 라이선스를 채택하기로 결정함
          + 이로 인해 Linux Foundation에서 신속하게 OpenTofu라는 포크가 만들어짐
          + 2024년 3월에 출시된 OpenTofu 1.7 버전은 엔터프라이즈 수준에서 사용 가능한 첫 번째 버전으로 널리 여겨짐
     * Oracle의 OpenTofu 전환 의미:
          + 다운스트림 라이선스 문제에 대한 걱정 없이 가장 허용적인 기반 IaC 도구를 사용하기 위한 단순한 결정으로 보임
          + OpenTofu는 기본적으로 Terraform의 친숙한 대체제임
          + 복잡한 EBS 환경을 클라우드로 이전하려는 사람들에게는 사소한 구현 세부 사항이지만, 포크 버전이 이미 주요 기업에서 사용할 만큼 견고하다는 신호를 보내고 있음
     * 2024년 4월에 IBM이 Hashicorp를 67억 달러에 인수하기로 합의

   오픈두부 지지자들은 해시콥의 경고 또는 언플에 상당히 불쾌하게 여기고 있더군요. 다만 IaC가 다른 언어들과는 다르게 상업적 사용을 염두에 두고 만들어진 도구이고, 사용자들 또한 비싼 클라우드 서비스들을 쓰고 있는 상황에서 어느쪽이 더 널리 받아 들여질지는 지켜봐야할 것 같습니다.

   @xguru 님 Hashicorp가 인수하기로 한 소식은 2024년 4월 말입니다. :)
   얼마 안됐어요 :)

   아니 전 왜 2023년에 살고 있는걸까요 ㅠㅠ 수정했습니다.

   OpenTF, Terraform의 포크 발표
   OpenTF 선언문
   OpenTF 저장소가 이제 공개되었습니다
   테라폼의 포크버전 OpenTF가 OpenTofu로 이름을 변경
   IBM, HashiCorp 인수 계약 체결, 인수가 64억 달러
"
"https://news.hada.io/topic?id=14793","대안 구현 문제(Alternative Implementation Problem)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              대안 구현 문제(Alternative Implementation Problem)

대안 구현의 문제

   저자는 소프트웨어 세계에서 반복적으로 발생하는 대안 구현의 문제에 대해 이야기함. 저자의 경험은 주로 동적 타입 프로그래밍 언어를 최적화하는 것이었음.
     * PyPy 프로젝트는 Python을 위한 고급 JIT 컴파일러를 개발했지만, 실제로는 거의 사용되지 않음. Python이 계속 새로운 기능을 추가하면서 변화하기 때문에 PyPy가 이를 따라잡기 어려웠음.
     * LuaJIT은 높은 평가를 받고 있지만, Lua 언어가 계속 새로운 기능을 추가하면서 LuaJIT이 여러 버전 뒤쳐지는 상황임.
     * TruffleRuby JIT은 가장 인상적인 성능을 자랑했지만 CRuby에 비해 기능 호환성이 부족해 제한적인 배포만 이루어짐.

교훈: 대안 구현은 실패할 수밖에 없는 선택임

     * 대안 구현을 만들면, 정식 구현체의 변화에 종속될 수밖에 없음.
     * 정식 구현체는 프로젝트의 방향을 통제하고, 대안 구현체는 그저 따라갈 수밖에 없음.
     * 전통적으로 인터프리터 언어의 JIT 구현체를 만들 때, 인터프리터에 새로운 기능을 추가하는 게 훨씬 빠르기 때문에 정식 구현체가 JIT을 앞서나갈 수 있음.

YJIT: CRuby 내부에 Ruby JIT 컴파일러 구현

     * YJIT은 또 다른 Ruby JIT이지만, CRuby 자체 내부에 구현하기로 선택함.
     * 이를 통해 YJIT은 처음부터 모든 CRuby 기능과 100% 호환될 수 있었음.
     * 지금은 Ruby의 공식 JIT이 되어 Shopify, Discourse, GitHub 등에 배포되고 있음.

더 넓은 관점에서의 교훈

     * 기존 언어와 유사하지만 호환되지 않는 Crystal 언어도 제한적인 성공만 거둠.
     * 기존 언어와 유사해 보이지만 호환되지 않는 것은 사람들을 혼란스럽게 할 뿐임.
     * 새로운 프로그래밍 언어를 만들 때는 기존 언어의 하위 집합이 되려 하지 말고 자신만의 길을 가는 것이 좋음.
     * 그래야 다른 구현체의 성능이나 기능, 라이브러리에 얽매이지 않고 자신만의 속도와 방향으로 진화시킬 수 있음.

GN⁺의 의견

     * 해당 글에서 기술한 '대안 구현체 문제'는 프로그래밍 언어뿐 아니라 각종 소프트웨어 및 하드웨어 시스템을 만들 때 주의해야 할 사항임.
     * 안정성과 호환성에만 신경 쓰다 보면 혁신이 어려워질 수 있음. 하지만 실제 사용자 관점에서 호환성은 매우 중요한 요소임. 신기술과 사용자 친화성의 균형을 맞추는 것이 중요함.
     * 장기적인 관점에서 새로 만드는 프로젝트를 '누구와 호환되는가', '어떤 방향으로 진화시킬 것인가'를 충분히 고민할 필요가 있음.
     * 새로운 프로그래밍 언어를 만들 때, 기존 언어의 문법만 비슷하게 하는 것은 혼란만 가중시킴. 오히려 자신만의 철학과 방향성을 뚜렷이 하는 것이 바람직함.
     * 시장에서의 경쟁보다는 창의적이고 독창적인 솔루션을 내놓는 것이 장기적으로 성공할 가능성이 높아 보임.

        Hacker News 의견

     * 새로운 대안 구현을 개발할 때 기존 버전과 다른 아키텍처를 가지게 되면, 기존 버전에서 쉬운 것이 새 버전에서는 매우 어려울 수 있음. 예를 들어 proprietary 소프트웨어가 section 단위로 load/save하는 반면, 새 버전은 전체 문서를 메모리에 올리는 방식이라면 첨부파일 추가 기능을 지원하기 위해 새 버전의 전체 아키텍처를 수정해야 할 수 있음.
     * 기존 구현의 대안으로 포지셔닝하는 것은 패배하는 명제임. ""Python + X""라고 마케팅하는 프로젝트는 정식 버전과 경쟁하기 어려움. 그러나 MicroPython처럼 microcontroller용으로 설계되어 CPython과 경쟁하지 않고 다른 microcontroller 프로그래밍 환경과 경쟁한다면 성공할 수 있음.
     * 호환성 주장과 달리 실제로는 오래된 언어 기능에 대해서도 호환성이 낮은 경우가 많아 대안 구현이 실패하는 이유가 됨. Ruby, Python의 경우 native C extension에 대한 지원 부족이 그 예시임.
     * Startup 창업 경험에 따르면, 기본적인 기능 추구 대신 아키텍처가 기업용 기능을 지원할 수 있다는 것을 보여주고, 차별화된 무언가에 집중했어야 했음.
     * 개발자들은 JIT보다 언어 기능과 상호운용성을 더 중요하게 여김. 기존 프로젝트에 기여하기보다 자신의 병렬 프로젝트를 만드는 것이 쉽지만, 누구를 위한 것인지 자문해 봐야 함. 자아도취에 빠지지 않도록 주의해야 함.
     * Wrapper 코드는 표준에서 벗어나고 문서화가 부족해 고통을 야기함. 꼭 필요한 기능만 추가하고 기본값을 사용하는 것이 좋음.
     * MySQL 호환성으로 인해 TiDB가 겪은 문제와 유사함. 이론적으로는 개방형 프로토콜이지만 실제로는 Chrome이 주도함.
     * Kotlin에 대한 언급은 없었음.
"
"https://news.hada.io/topic?id=14852","제프슨: Datomic Pro 1.0.7075 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      제프슨: Datomic Pro 1.0.7075 분석

Datomic: 일반 목적의 기록 시스템 데이터베이스

  # Datomic의 배경

     * Datomic은 기록 시스템을 위한 일반 목적 데이터베이스임.
     * 데이터베이스 상태는 [entity, attribute, value] (EAV) 트리플로 표현되며, 이를 datom이라 부름.
     * 스키마를 통해 속성의 유형과 카디널리티를 제어함.
     * 시간을 명시적으로 모델링하는 시간적 데이터베이스임.
     * 각 트랜잭션은 논리적 타임스탬프 t와 벽시계 시간 txInstant으로 식별됨.
     * 트랜잭션은 datom을 추가하거나 제거할 수 있음.
     * 모든 datom은 트랜잭션 참조를 유지함.
     * 데이터베이스는 이러한 튜플의 계속 증가하는 집합임.

  # Datomic의 기능

     * 사용자는 논리적 또는 벽시계 시간에 데이터베이스의 스냅샷 상태를 요청할 수 있음.
     * 데이터베이스의 전체 기록을 볼 수 있음.
     * Datalog 스타일 API, 선언적 그래프 탐색 API, ODM 스타일 Entity 데이터 타입을 통해 쿼리 가능함.
     * Datomic Pro와 Datomic Cloud 두 가지 버전이 있음.

  # 1.1 아키텍처

     * Datomic Pro는 여러 협력 서비스로 구성됨.
     * Transactors는 쓰기 트랜잭션을 실행하고 인덱스를 유지하며 데이터를 저장소에 기록함.
     * Peers는 두꺼운 클라이언트로, JVM 라이브러리를 포함하여 트랜잭션을 제출하고 쿼리를 실행하며 결과를 캐시함.
     * Clients는 얇은 클라이언트로, 트랜잭션과 쿼리를 peer 서버로 전달함.
     * 로그에 각 트랜잭션을 시간 순서대로 추가함.
     * Cassandra나 DynamoDB와 같은 데이터 저장소에 영구적이고 불변적인 트리로 저장됨.
     * Sequential CaS 연산을 사용하여 글로벌 트랜잭션 순서를 보장함.
     * Peers는 저장소와 transactors에 직접 연결됨.

  # 1.2 트랜잭션 모델

     * Datomic은 독특한 트랜잭션 모델을 가짐.
     * 읽기와 쓰기 경로를 엄격히 분리함.
     * 읽기는 데이터베이스의 불변 상태를 얻음.
     * 쓰기 트랜잭션은 연산의 정렬된 리스트로 표현됨.
     * 트랜잭션 함수는 데이터베이스 상태를 읽고 새로운 연산 집합을 반환함.
     * 트랜잭션 함수는 호출자에게 값을 반환하지 않음.
     * 트랜잭션은 효과만 반환함.
     * NuBank는 Datomic을 사용하여 금융 서비스를 제공함.

  # 1.3 일관성

     * ACID 트랜잭션을 광고하며, 일관성 모델과 내구성 보장을 명확히 약속함.
     * 트랜잭션은 단일 원자적 쓰기로 저장됨.
     * 모든 피어는 특정 시점까지 완료된 트랜잭션을 봄.
     * Serializable 트랜잭션을 보장함.
     * d/sync를 호출하여 최신 상태를 동기화할 수 있음.
     * 단일 쓰기 시스템으로 설계되었으나, 여러 transactor가 동시에 실행될 수 있음.

  # 2 테스트 설계

     * Jepsen 테스트 라이브러리를 사용하여 Datomic 테스트 스위트를 설계함.
     * Datomic Pro 1.0.7075를 Debian Bookworm 노드 클러스터에 설치함.
     * DynamoDB 테이블을 AWS에 프로비저닝함.
     * Transactors와 Peers를 포함한 다양한 노드에서 테스트를 실행함.
     * HTTP API를 통해 테스트 스위트 작업을 수행함.
     * 네트워크 파티션과 Garbage Collection을 포함한 다양한 오류를 주입함.
     * systemd 서비스를 사용하여 transactors를 재시작함.

  # 2.1 리스트 추가

     * Elle 트랜잭션 검사기를 사용하여 리스트 추가 작업을 설계함.
     * 각 리스트는 기본 키로 식별됨.
     * 읽기와 추가 작업을 포함한 트랜잭션을 수행함.
     * Datomic은 다중 값 속성을 정렬되지 않은 집합으로 저장함.
     * 트랜잭션 함수를 사용하여 읽기-쓰기 트랜잭션을 표현함.

  # 2.2 CaS를 사용한 리스트 추가

     * db/cas 함수를 사용하여 속성의 동시 업데이트를 제어함.
     * 스냅샷 격리를 보장하기 위해 CaS 패턴을 사용함.
     * 각 리스트를 단일 값, 쉼표로 구분된 문자열로 인코딩함.

  # 2.3 내부 일관성

     * 내부 일관성을 측정하기 위한 작업을 설계함.
     * 속성 값을 여러 번 변경하거나, 사실을 추가 및 제거하는 트랜잭션을 포함함.
     * CaS 연산을 여러 번 수행함.

  # 2.4 승인

     * 승인과 거부를 시뮬레이션하는 상태 머신을 설계함.
     * 승인과 거부 함수는 각각의 상태를 확인하고, 트랜잭션을 중단함.

  # 3 결과

     * Datomic의 핵심 안전성 주장에 위배되는 행동을 발견하지 못함.
     * 트랜잭션은 총 순서대로 실행된 것처럼 보임.
     * **(d/sync conn)**을 사용한 읽기 트랜잭션은 실시간 순서와 일치함.
     * 내부 일관성은 Datomic의 문서와 일치하지만, 일반적인 데이터베이스 동작과는 다름.

  # 3.1 내부 일관성

     * 대부분의 데이터베이스는 트랜잭션 내에서 직렬 실행 의미론을 제공함.
     * Datomic은 트랜잭션 내의 모든 연산을 동시 실행으로 처리함.
     * 트랜잭션 함수는 트랜잭션 시작 시점의 데이터베이스 상태만을 관찰함.
     * 단일 카디널리티 속성에 대해 충돌이 발생하면 트랜잭션이 중단됨.

  # 3.2 가상 쓰기 왜곡

     * 트랜잭션 함수가 동시 실행되므로, 개별적으로는 올바른 함수가 함께 실행될 때 잘못된 결과를 초래할 수 있음.
     * 승인과 거부 함수가 같은 트랜잭션에서 호출되면, 승인과 거부가 동시에 발생할 수 있음.
     * Datomic의 문서와 일치하지만, 사용자에게는 놀라울 수 있음.

  # 3.3 엔티티 조건자

     * 엔티티 조건자를 사용하여 데이터베이스 불변성을 보장할 수 있음.
     * 유형, 고유성, 임의 조건자를 포함한 다양한 제약 조건을 제공함.
     * 엔티티 조건자는 데이터베이스의 전체 상태를 검사하여 트랜잭션을 허용할지 결정함.
     * 승인과 거부 함수에 엔티티 조건자를 추가하여 불변성을 보장함.

GN⁺의 의견

     * Datomic은 시간적 데이터베이스로, 데이터의 과거 상태를 쉽게 조회할 수 있어 금융 서비스와 같은 기록 시스템에 매우 유용함.
     * 트랜잭션 함수의 동시 실행 모델은 성능을 높이지만, 사용자에게는 익숙하지 않을 수 있음.
     * 엔티티 조건자를 통해 복잡한 데이터 무결성 제약 조건을 쉽게 구현할 수 있음.
     * NuBank와 같은 대규모 금융 서비스에서 사용되고 있어, 안정성과 확장성이 검증됨.
     * Datomic의 독특한 트랜잭션 모델은 기존 데이터베이스와는 다른 사고방식을 요구하므로, 학습 곡선이 있을 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 흥미로운 논의와 문서 개선
          + 작업 과정에서 논의가 매우 흥미로웠음. Jepsen이 치명적인 버그를 발견하지 않은 것도 놀라웠음. 문서와 의도된 비정상 동작을 명확히 한 것이 유용한 결과였음. Datomic을 사용하는 은행 운영에 자신감을 주는 유익한 연습이었음.
     * Datomic의 트랜잭션 행동 이해
          + Jepsen 보고서를 처음 깊이 읽어봤는데, Datomic의 트랜잭션 행동에 대한 명확한 설명이 마음에 들었음. SQL 데이터베이스와의 차이를 잘 이해하지 못했음을 깨달음. Datomic의 트랜잭션 구조와 요소 명칭 변경이 눈에 띔.
     * Datomic 보고서의 가치
          + 매우 상세한 보고서로 좋은 데이터베이스에 대한 훌륭한 분석임. 문서가 명확해지고 업데이트된 것도 기쁨. Apple이 FoundationDB에 대해 Jepsen 분석을 의뢰했으면 좋겠다는 생각도 있음.
     * Jepsen 이름의 유래
          + Jepsen이라는 이름은 가수 Carly Rae Jepsen에서 따온 것임. 분산 시스템 연구에 완벽한 이름이라고 생각함.
     * Clojure 프로그램 작성에 도움
          + 항상 훌륭한 작업임. 이러한 시스템에 대해 배우고 Clojure 프로그램 작성에 도움이 되는 작은 정보들을 얻기 위해 읽는 것을 좋아함.
     * Datomic-like 데이터스토어 구축
          + 최근에 Datomic-like 데이터스토어를 구축하고 있어서 이 보고서가 유용할 것 같음. MongoDB 분석도 즐겼으며, Redis, RethinkDB 등의 분석도 확인해보길 권장함.
     * Datomic의 데이터 모델
          + Datomic의 데이터 모델은 트리플 스토어/RDF에 익숙하다면 직관적임. 그러나 문서나 온라인 논의에서 자주 언급되지 않음. 사람들이 이러한 개념에 익숙하지 않아서인지, 아니면 의미 웹과의 연관성이 혼란을 줄 수 있어서인지 궁금함.
     * Datomic의 문서 명확화
          + Jepsen이 불변성 위반 상황을 명확히 했지만, Datomic의 접근 방식은 문서를 명확히 하는 것에 중점을 둔 것 같음. Datomic 팀이 이러한 위반을 사용자 오류로 간주하고 있는 것 같음.
     * 단일 스레드 설계의 장점
          + 단일 스레드로 쓰기 작업을 처리하는 설계 결정이 효과적이었음. Datomic은 훌륭한 설계의 산물이며, 다시 사용해보고 싶음.
     * Datomic의 트랜잭션 특성
          + Datomic을 많이 사용해보지 않았지만, 트랜잭션이 기본적으로 배치 처리라는 점에서 놀랍지 않음. 단일 스레드로 작동하여 경쟁 조건이 적고, 설계상 느리지만 안전함.
"
"https://news.hada.io/topic?id=14860","URLhaus - 멀웨어 배포에 사용되는 악성 URL 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  URLhaus - 멀웨어 배포에 사용되는 악성 URL 데이터베이스

     * 사이버범죄 관련 최신 정보를 제공하는 Abuse.ch가 운영
     * 멀웨어 URL을 수집, 추적, 공유하여 네트워크 관리자와 보안 분석가가 사이버 위협으로부터 네트워크와 고객을 보호할 수 있도록 지원하는 것을 목표로 함
     * 전체 280만개 URL 보기 및 검색 가능
     * API 및 URL 데이터베이스 덤프 제공
     * 이곳에 제보된 URL은 Google Safe Browsing (GSB), Spamhaus DBL, SURBL 등과 공유됨

   https://github.com/nemorize/korean-smishing-fuck-you
   국내인을 대상으로 하는 스미싱 도메인들을 기록하는 레포입니다!
   의미있는 수준의 데이터가 존재하지는 않지만, 보일때마다 꾸준히 업데이트 하고 있어요.
   생각나실 때 이슈로 한번씩 제보해주시면 감사하겠습니다...! (_0_)
"
"https://news.hada.io/topic?id=14846","애플, 눈 추적/음악 햅틱/음성 단축어를 포함한 새로운 접근성 기능 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                애플, 눈 추적/음악 햅틱/음성 단축어를 포함한 새로운 접근성 기능 발표

     * 올해 하반기에 출시될 예정인 새로운 손쉬운 사용 기능을 공개
          + 눈 추적: 신체 장애가 있는 사용자가 눈으로 iPad와 iPhone을 제어할 수 있게 해줌
          + 음악 햅틱: 청각 장애 또는 난청이 있는 사용자가 Taptic Engine을 통해 음악을 경험할 수 있게 해줌
          + 음성 단축어: 사용자 정의 소리를 통해 작업을 수행할 수 있게 해줌
          + 차량 모션 큐: 차량 이동 중 iPhone이나 iPad 사용 시 멀미를 줄여줌
          + visionOS: 다양한 접근성 기능이 추가될 예정

  눈추적이 iPad와 iPhone에 도입

     * 인공지능을 통해 사용자가 눈으로 iPad와 iPhone을 탐색할 수 있는 내장 옵션을 제공함.
     * 전면 카메라를 사용하여 설정 및 보정이 가능하며, 모든 데이터는 기기 내에서 안전하게 유지됨.
     * 추가 하드웨어나 액세서리가 필요하지 않음.
     * 사용자는 눈으로 앱의 요소를 탐색하고 Dwell Control을 사용하여 각 요소를 활성화할 수 있음.

  음악 햅틱으로 음악을 더 쉽게 접근할 수 있게

     * 청각 장애가 있는 사용자가 iPhone에서 음악을 경험할 수 있는 새로운 방법을 제공함.
     * Taptic Engine이 음악의 오디오에 맞춰 탭, 텍스처, 정제된 진동을 재생함.
     * Apple Music 카탈로그의 수백만 곡에서 작동하며, 개발자가 앱에서 음악을 더 쉽게 접근할 수 있도록 API로 제공됨.

  다양한 음성 인식을 위한 새로운 기능

     * Vocal Shortcuts: 사용자 정의 발음을 Siri가 이해하여 단축키를 실행하고 복잡한 작업을 완료할 수 있게 함.
     * Listen for Atypical Speech: 다양한 음성 인식을 향상시키는 옵션을 제공함.
     * 기기 내 머신 러닝을 사용하여 사용자 음성 패턴을 인식함.
     * 뇌성마비, ALS, 뇌졸중 등으로 인해 음성에 영향을 받는 사용자를 위해 설계됨.

  Vehicle Motion Cues로 멀미 감소

     * 차량 이동 중 iPhone과 iPad 사용 시 멀미를 줄여주는 새로운 경험을 제공함.
     * 화면 가장자리에 애니메이션 점이 차량의 움직임 변화를 나타내어 감각 충돌을 줄여줌.
     * iPhone과 iPad에 내장된 센서를 사용하여 사용자가 이동 중인지 인식하고 이에 따라 반응함.
     * Control Center에서 자동으로 표시되거나 켜고 끌 수 있음.

  CarPlay에 음성 제어 및 더 많은 접근성 업데이트

     * Voice Control: 음성만으로 CarPlay와 앱을 탐색하고 제어할 수 있음.
     * Sound Recognition: 청각 장애가 있는 운전자나 승객이 경적과 사이렌을 알림으로 받을 수 있음.
     * Color Filters: 색맹 사용자를 위해 CarPlay 인터페이스를 시각적으로 더 쉽게 사용할 수 있게 함.

  visionOS에 접근성 기능 추가

     * Live Captions: 실시간 대화와 앱의 오디오에서 음성 대화를 따라갈 수 있게 함.
     * FaceTime: Persona를 사용하여 더 쉽게 연결하고 협업할 수 있게 함.
     * Reduce Transparency, Smart Invert, Dim Flashing Lights: 저시력 사용자나 밝은 빛과 빈번한 깜빡임을 피하고 싶은 사용자를 위해 추가됨.

  추가 업데이트

     * VoiceOver: 새로운 음성, 유연한 Voice Rotor, 사용자 정의 볼륨 제어, Mac에서 VoiceOver 키보드 단축키 사용자 정의 가능.
     * Magnifier: 새로운 Reader Mode와 Detection Mode를 쉽게 시작할 수 있는 옵션 제공.
     * Braille Screen Input: 더 빠른 제어와 텍스트 편집을 위한 새로운 방법 제공.
     * Hover Typing: 텍스트 필드에서 더 큰 텍스트를 표시하고 사용자가 선호하는 글꼴과 색상으로 표시.
     * Personal Voice: 중국어 만다린어로 제공되며, 전체 문장을 발음하거나 읽기 어려운 사용자를 위해 짧은 구문을 사용하여 개인 음성을 생성할 수 있음.
     * Live Speech: 카테고리와 Live Captions과의 동시 호환성 포함.
     * Virtual Trackpad: AssistiveTouch를 위한 가상 트랙패드 제공.
     * Switch Control: iPhone과 iPad의 카메라를 사용하여 손가락 탭 제스처를 스위치로 인식할 수 있음.
     * Voice Control: 사용자 정의 어휘와 복잡한 단어 지원.

  글로벌 접근성 인식의 날 기념

     * 5월 한 달 동안 일부 Apple Store 위치에서 무료 세션을 개최하여 고객이 제품에 내장된 접근성 기능을 탐색하고 발견할 수 있도록 도움.
     * Shortcuts: 사용자가 집중하거나 휴식할 수 있도록 돕는 Calming Sounds 추가.
     * App Store: 접근성과 포용성을 촉진하는 놀라운 앱과 게임을 발견할 수 있음.
     * Apple TV 앱: 장애인의 경험을 공유하는 창작자, 공연자, 활동가를 기리며, 올해의 주제는 '세상을 다시 만들기'임.
     * Apple Books: 장애 작가의 1인칭 내러티브를 통해 장애의 경험을 조명함.
     * Apple Fitness+: 미국 수화와 함께 청각 장애가 있는 사용자를 환영하는 운동, 명상, 트레이너 팁 제공.

GN⁺의 의견

    1. 접근성 기능의 중요성: 애플의 새로운 접근성 기능은 다양한 사용자에게 더 나은 경험을 제공함으로써 기술의 포용성을 높임.
    2. AI와 머신 러닝의 활용: 인공지능과 머신 러닝을 활용한 기능들은 사용자 데이터를 안전하게 보호하면서도 높은 수준의 사용자 맞춤형 경험을 제공함.
    3. 멀미 감소 기능: Vehicle Motion Cues는 이동 중에도 기기를 편안하게 사용할 수 있게 해주는 혁신적인 기능으로, 많은 사용자에게 유용할 것임.
    4. 경쟁 제품: 구글의 접근성 기능과 비교해보면, 애플의 접근성 기능은 더 많은 사용자 맞춤형 옵션을 제공함.
    5. 기술 도입 시 고려사항: 새로운 접근성 기능을 도입할 때는 사용자 교육과 지원이 중요하며, 기술의 안정성과 신뢰성을 검토해야 함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 접근성은 모두를 위한 것
          + 접근성 기능은 모든 사람을 위한 것임. 나이가 들면 누구나 필요하게 됨. 대안은 더 나쁨. 선택은 죽음이거나 접근성 기능을 사용하는 것임.
     * 사용자 중심의 접근성 기능
          + 접근성 기능을 좋아함. 사용자에게 이익이 되는 마지막 기능일 수 있음. 다른 앱/운영체제 기능들은 주의를 끌거나 유용성을 점차 떨어뜨리도록 설계됨.
     * 차량 모션 큐
          + 차량 모션 큐 기능이 매우 흥미로움. 차에서 1-2분만 지나도 멀미가 나서 휴대폰을 사용할 수 없었음. 시도해볼 만한 유망한 기능임.
     * VoiceOver의 새로운 목소리
          + VoiceOver에 어떤 새로운 목소리가 추가될지 궁금함. 20년 된 TTS 엔진인 Eloquence가 iOS 17에 추가된 것처럼, DecTalk이나 더 많은 Siri 목소리가 추가될 수 있음. 더 많은 점자 기능도 놀라움. Mac용 VoiceOver도 언급됨. 더 나은 이미지 설명을 기대했지만, 다른 장애를 위한 많은 새로운 기능이 발표됨. 음악에 촉각을 추가하는 것도 멋짐. VoiceOver의 새로운 기능들이 기대됨. Android의 TalkBack처럼 VoiceOver 튜토리얼이 생기길 바람.
     * Global Accessibility Awareness Day (GAAD)
          + 내일, 5월 16일은 Global Accessibility Awareness Day (GAAD)임. 전 세계적으로 176개 이상의 이벤트가 열림. 접근성 향상을 위한 많은 학습 기회가 있음.
     * Vision Pro 구매 유도
          + 이 기능은 Vision Pro 구매를 유도할 만큼의 제한과 불편함을 가질 것임. 기존 장치를 사용하여 눈 추적을 더 널리 수용하게 함.
     * iOS 접근성 설정의 가치
          + iOS의 접근성 설정은 장치 맞춤화에 있어 금광과 같음. 접근성에만 제한되지 않아야 함. 차량 모션 큐와 CarPlay의 색 필터에 관심이 많음. iOS에 내장된 돋보기를 잊고 있었음.
     * macOS 접근성 기능
          + 20/20 이상의 시력을 가졌지만, macOS의 접근성 기능을 사랑함. Zoom 기능은 두 개의 수정 키를 누르고 스크롤하여 화면의 어느 부분이든 즉시 확대할 수 있음. 세 손가락 드래그 기능도 매우 편리함.
     * 영화 같은 컴퓨터 사용
          + 눈 추적과 그리드 표시 기능을 결합하면 영화에서 사람들이 컴퓨터를 사용하는 방식처럼 보일 것임.
     * macOS의 눈 추적 기능
          + macOS는 눈 추적 기능을 이미 가지고 있음. 시도해보면 재미있음. 시스템 환경설정 -> 접근성 -> 포인터 제어 -> ""헤드 포인터"" 옵션을 켜면 됨.
"
"https://news.hada.io/topic?id=14825","저지연성 강조한 오픈소스 eInk 모니터 Glider","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     저지연성 강조한 오픈소스 eInk 모니터 Glider

Glider: 오픈 소스 전자잉크 모니터

  개요

    특징

     * 저지연/고주사율 EPD 모니터를 위한 완벽한 솔루션
     * 병렬 인터페이스를 가진 전기영동 디스플레이 패널 지원 (Eink(R), SiPix 및 DES)
     * 단색 및 컬러 필터 어레이 기반 컬러 스크린 지원 (예: Kaleido(TM))
     * <20us의 매우 낮은 처리 지연
     * 이진, 4단계 그레이스케일 및 16단계 그레이스케일 출력 모드 지원
     * 지연 최적화된 이진 및 4단계 그레이스케일 구동 모드
     * 하이브리드 자동 이진 및 16단계 그레이스케일 구동 모드
     * 호스트 소프트웨어 런타임 제어 가능한 지역 업데이트 및 모드 전환
     * 추가 지연 없이 하드웨어 베이어 디더링, 블루 노이즈 디더링 및 오류 확산 디더링
     * 컨트롤러가 FPD-Link (LVDS), DVI (TMDS) 및 MIPI-DSI 입력을 기본적으로 지원
     * 보드 레벨 디자인이 USB-C (USB Type-C DisplayPort Alt Mode) 및 DVI 입력 지원

    하드웨어

     * Xilinx(R) Spartan-6 LX16 FPGA가 Caster를 실행
     * DDR3-800 프레임버퍼 메모리
     * 온보드 PTN3460 DP-LVDS 브리지를 통한 Type-C DisplayPort Alt-Mode 비디오 입력 또는
     * 온보드 ADV7611 디코더를 통한 DVI (마이크로HDMI 커넥터) 비디오 입력
     * 최대 1A 피크 전류를 지원하는 +/-15V 레일의 전자잉크 전원 공급 장치
     * VCOM 킥백 전압 측정 지원
     * USB 통신 및 펌웨어 업그레이드를 위한 온보드 RaspberryPi(R) RP2040 마이크로컨트롤러
     * 디더링이 활성화된 상태에서 최대 133MP/s 처리 속도, 비활성화 시 >200MP/s

    구성 요소

     * 이 저장소는 PCB 디자인, 펌웨어 소스 코드 및 참조 3D 프린트 가능한 케이스 디자인을 호스팅함
     * RTL 코드는 별도의 저장소에 있음: Caster

  전자잉크 스크린

    기본 작동 이론

     * 전자잉크는 투명한 용기에 분산된 다른 색상의 전하 입자를 포함하며, 전기장을 적용하여 입자를 위아래로 이동시켜 흑백 또는 그 혼합을 생성함

    장점과 단점

     * 전자잉크 디스플레이는 빛을 반사하여 전력을 적게 소비하고 야외에서도 사용할 수 있음
     * 이중 안정성으로 전원이 제거된 후에도 이미지를 유지함
     * 종이와 같은 외관이 가장 큰 차별화 요소임

    전자잉크 컨트롤러의 역할

     * 전자잉크 컨트롤러는 LCD 시스템의 디스플레이 컨트롤러(DC/CRTC) + 타이밍 컨트롤러(TCON)와 유사함
     * 원시 이미지 데이터를 받아 화면을 구동하는 데 필요한 신호로 변환함

    스크린 패널 유형

     * 컨트롤러가 통합된 스크린과 통합되지 않은 스크린으로 나뉨
     * 컨트롤러가 없는 스크린은 전용 컨트롤러 또는 SoC가 필요하며, 컨트롤러가 있는 스크린은 거의 모든 MCU로 직접 구동 가능함

    컨트롤러가 통합된 스크린 사용

     * 대부분의 구성 요소가 이미 통합되어 있어 몇 가지 외부 부품만 필요함
     * SPI 또는 I2C와 같은 일반 인터페이스를 사용하여 MCU 또는 MPU에 연결 가능함

    컨트롤러가 통합되지 않은 스크린 사용

     * 전용 컨트롤러 칩, 통합 컨트롤러가 있는 SoC, 또는 빠른 MCU/SoC를 사용하여 구동 가능함
     * 전용 컨트롤러 칩을 사용하면 외부 장치에서 데이터를 수신할 수 있어 다양한 응용 프로그램에 사용 가능함

    인터페이스 신호 및 타이밍

     * LCD와 유사한 인터페이스 신호와 타이밍을 가짐
     * 각 픽셀은 2비트로 표현되며, 이는 2bpp 또는 4단계 그레이스케일을 의미하지 않음
     * CRT/LCD와 유사하게 블랭킹 기간이 있음

    파형 이해하기

     * 파형은 전자잉크 컨트롤러가 픽셀을 구동하는 방법을 결정하는 조회 테이블임
     * 파형 파일은 해상도와 독립적이며, 잘못된 파형을 사용해도 인식 가능한 이미지를 표시할 수 있음

    그레이스케일 디스플레이

     * 전자잉크 스크린은 적절한 변조를 통해 몇 가지 수준의 그레이스케일을 표시할 수 있음
     * 프레임 시간 변조 또는 프레임 수 변조를 통해 구현 가능함

    컬러 디스플레이

     * 컬러 필터 어레이(CFA) 또는 다중 색소 컬러 디스플레이를 사용하여 풀 컬러 EPD를 구현할 수 있음
     * CFA는 컬러 필터를 사용하여 색상을 생성하며, 상대적으로 제어가 간단하지만 화면 반사율이 낮아짐

  GN⁺의 의견

     * 전자잉크 기술은 전력 소비가 적고 야외 사용에 적합하여 전자책 리더기와 같은 장치에 매우 유용함
     * 전자잉크 디스플레이는 종이와 같은 외관을 제공하여 눈의 피로를 줄이는 데 도움이 됨
     * 전자잉크 컨트롤러의 다양한 모드와 파형을 이해하면 더 나은 디스플레이 성능을 얻을 수 있음
     * 컬러 전자잉크 디스플레이는 아직 반사율이 낮아 어두운 화면을 제공하는 단점이 있음
     * 전자잉크 기술을 사용한 새로운 프로젝트를 계획할 때는 컨트롤러와 파형의 선택이 중요함

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 제한 사항에 대한 흥미로운 논의
          + 제한 사항 섹션이 흥미로웠음. 1 메모리 셀을 픽셀당 아날로그 방식으로 사용할 수 있을지 궁금해짐. 더 복잡하고 덜 정확할 것 같음.
     * 원본 저장소 링크
          + 이 프로젝트의 원본 저장소는 여기임. 관련 트윗은 여기에서 확인 가능.
     * README의 정보 깊이
          + README 파일만으로도 정보의 폭과 깊이가 인상적임. 이런 정보가 공개되면 빠른 혁신과 변화를 기대할 수 있음.
     * 킨들 사용 경험
          + 10년 넘게 킨들을 사용 중인데 반응 속도가 항상 불만이었음. 하드웨어 문제인지 소프트웨어 문제인지 모르겠음. 이 프로젝트가 하드웨어 측면에서 지연 시간을 줄이는 데 집중하고 있어 기쁨.
     * 킨들에 대한 불만
          + 킨들이 왜 이렇게 나쁜 제품인지 궁금함. 전자잉크와 전자책 시장이 좋아서 사용하지만, 실제로 좋은 기기는 아님.
     * 전자잉크 지식 공유에 감사
          + 전자잉크에 대한 모든 지식을 공개해줘서 감사함. README에 훌륭한 정보가 많아 앞으로도 참고할 예정.
     * 전자잉크 디스플레이를 활용한 프로젝트 아이디어
          + 전자잉크 디스플레이를 사용한 컴팩트 맥 클론을 만들고 싶음. 멋질 것 같음.
     * 훌륭한 작업과 문서화
          + 놀라운 작업이며, 문서화가 전자잉크 디스플레이에 대한 훌륭한 입문서임.
     * 킨들 디스플레이의 광학 해체
          + ""킨들 페이퍼화이트 디스플레이의 광학 해체"" 논문은 여기에서 확인 가능. 이 논문은 디스플레이 내부에서 무슨 일이 일어나는지 보여줌.
     * 전자잉크 기술의 발전에 대한 기대
          + 이 산업에 익숙하지 않지만, 전자잉크가 잡지 품질의 외관과 느낌을 구현하는 데 얼마나 가까워졌는지 궁금함. 80년대 SF 영화에서 본 장면처럼 게임 잡지의 스크린샷이 완전히 애니메이션된 비디오로 나오는 기술을 30년째 기다리고 있음.
"
"https://news.hada.io/topic?id=14787","위키미디어 재단의 실험적 LLM/RAG 크롬 확장 프로그램 'Citation Needed' 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         위키미디어 재단의 실험적 LLM/RAG 크롬 확장 프로그램 'Citation Needed' 출시

Wikipedia Citation Needed 크롬 확장 프로그램

     * 웹 브라우징 중에 특정 텍스트 구절을 선택하여 해당 진술을 검증함
     * ChatGPT API를 활용해 Wikipedia에서 관련 문서를 검색하고 해당 문서에서 인용함
     * 선택한 진술이 Wikipedia에서 뒷받침되는지 여부에 대한 정보와 함께 문서의 최종 편집 날짜, 참조 개수 등 문서 품질 신호를 제공하여 사용자가 받는 정보(Wikipedia에서 받는 정보 포함)에 대해 더 많은 맥락을 파악할 수 있도록 도움

사용자 피드백 요청

     * 이 기능은 생성형 AI를 사용하는 실험적 기능으로, 때로는 실수를 할 수 있음을 인지하고 있음
     * 결과의 품질을 이해하고 개선하기 위해 확장 프로그램의 피드백 링크를 통해 발견한 문제를 보고해 줄 것을 요청함
     * 일반적인 피드백과 Wikipedia가 일상적인 웹 브라우징에서 유용하게 사용될 수 있는 다른 방법에 대한 아이디어도 환영함

개발자 정보

     * 이 확장 프로그램은 Wikipedia와 자매 프로젝트를 지원하는 비영리 단체인 Wikimedia Foundation의 Future Audiences 팀에서 개발함

GN⁺의 의견

     * 이 확장 프로그램은 사용자가 웹에서 접하는 정보의 신뢰성을 평가하는 데 도움이 될 수 있음. 하지만 Wikipedia 문서 자체의 품질과 정확성에 한계가 있을 수 있으므로, 이를 절대적인 기준으로 삼기에는 무리가 있어 보임.
     * ChatGPT와 같은 대규모 언어 모델을 활용하여 요약과 검증을 자동화하는 것은 사용자 편의성을 높일 수 있지만, 동시에 잘못된 정보를 생성할 위험성도 있음. 이에 대한 지속적인 모니터링과 개선 노력이 필요해 보임.
     * Wikipedia 외에도 각 분야의 전문가들이 검증한 신뢰할 만한 정보원을 추가로 활용한다면 검증의 정확도와 포괄성을 높일 수 있을 것임. 장기적으로는 블록체인 기반의 탈중앙화된 지식 베이스 구축도 고려해 볼 만함.

        Hacker News 의견

     * Experimental LLM powered RAG(Retrieval Augmented Generation) application이 위키피디아와 대조하여 인터넷 상의 주장을 확인함.
     * 인용문이 환각되는지 아니면 ""결정론적 인용""과 같은 것을 사용하는지에 대한 질문이 있음.
     * 이 확장 프로그램에 대한 Wikimedia의 Git 저장소가 제공됨. README의 빌드 지침이 불완전하고 핫 리로드가 작동하지 않는 것 같음. npm run build-dev를 사용하여 작동하는 빌드를 얻을 수 있음.
     * Firefox 확장 기능은 제공되지 않음. 사이드바/사이드패널 API 차이 때문일 수 있음.
     * LLM이 Wikipedia 기사를 사실 확인하고 플래그를 지정하는 것도 희망적임.
     * 기사 생성기 및 기사 검사기와 결합하여 1조 페이지를 생성할 수 있음. LLM을 위한 유용한 학습 콘텐츠일 수 있지만 사람들도 사용할 수 있음.
     * 크롬에서만 작동하는 것 같음. Arc에서는 작동하지 않음.
     * 학계에서는 Wikipedia 인용이 일반적으로 금지됨. 신뢰성이 떨어지고(저자가 자신이 편집할 수 있는 출처를 인용함) 1차 출처를 찾는 데는 좋지만 그 자체로 2차 출처임.
     * 자기 자신에 대해 묻는 것은 ""Citation Needed가 2024년에 개발된 실험적 기능""이라는 응답을 반환함. 하지만 제공된 문단에는 2024년에 개발된 'Citation Needed'라는 기능에 대한 정보가 포함되어 있지 않음.
"
"https://news.hada.io/topic?id=14895","Llama3를 처음부터 구현하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Llama3를 처음부터 구현하기

     * 하나의 텐서와 행렬 곱셈을 통해 Llama3를 처음부터 구현함.
     * Meta에서 제공한 Llama3 모델 파일에서 텐서를 직접 로드

LLaMA-3 모델의 스크래치 구현 요약

  토크나이저 설정

     * Tiktoken 라이브러리를 사용하여 토크나이저 설정
     * 특수 토큰들을 정의하고 토크나이저에 추가

  모델 파일 읽기

     * PyTorch를 사용하여 모델 파일(consolidated.00.pth)을 로드
     * 모델의 구성을 params.json 파일에서 읽어옴
          + 차원 수(dim), 레이어 수(n_layers), 헤드 수(n_heads) 등의 정보 포함

  텍스트를 토큰으로 변환

     * 프롬프트 텍스트를 토크나이저를 사용하여 토큰 시퀀스로 변환
     * 각 토큰을 해당하는 임베딩으로 변환
     * RMS 정규화를 사용하여 임베딩 정규화

  어텐션 구현

     * 쿼리(wq), 키(wk), 값(wv), 출력(wo) 행렬을 모델에서 로드
     * 각 토큰에 대해 쿼리, 키, 값 벡터 계산
     * RoPE(Rotary Positional Embedding)를 사용하여 위치 정보 추가
     * 쿼리와 키의 내적을 계산하여 어텐션 점수 계산
     * 미래 토큰에 대한 어텐션 점수를 마스킹
     * Softmax 함수를 적용하여 어텐션 분포 계산
     * 어텐션 분포와 값 벡터를 곱하여 어텐션 결과 계산

  멀티 헤드 어텐션

     * 모든 어텐션 헤드에 대해 어텐션 계산을 수행
     * 각 헤드의 결과를 연결(concatenate)하여 최종 어텐션 결과 생성

  피드 포워드 네트워크

     * SwiGLU(Swish Gated Linear Unit) 활성화 함수를 사용한 피드 포워드 네트워크 구현
     * 어텐션 결과와 피드 포워드 네트워크의 출력을 더하여 최종 임베딩 생성

  전체 레이어 반복

     * 모든 트랜스포머 레이어에 대해 어텐션과 피드 포워드 네트워크 계산을 반복
     * 최종 임베딩을 RMS 정규화

  토큰 예측

     * 최종 임베딩을 출력 행렬과 곱하여 로짓(logits) 계산
     * 로짓에서 가장 높은 값을 가진 토큰을 다음 토큰으로 예측
     * 예측된 토큰을 디코딩하여 출력

GN⁺의 의견

     * 이 기사는 Llama3 모델의 내부 구조와 동작 방식을 이해하는 데 매우 유용함. 특히, 처음부터 구현하는 과정을 통해 모델의 각 구성 요소가 어떻게 상호작용하는지 명확히 알 수 있음.
     * 초급 소프트웨어 엔지니어에게는 다소 복잡할 수 있음. 그러나, 단계별로 설명이 잘 되어 있어 천천히 따라가면 이해할 수 있음.
     * RoPE(회전 위치 임베딩)와 같은 고급 개념을 도입하여 모델의 성능을 향상시키는 방법을 배울 수 있음. 이는 다른 NLP 모델을 구현하거나 개선할 때 유용할 수 있음.
     * 이 기사를 통해 딥러닝 모델의 내부 구조와 동작 방식을 깊이 이해할 수 있음. 이는 모델을 최적화하거나 디버깅할 때 큰 도움이 될 것임.

   아냐가 귀엽네요
"
"https://news.hada.io/topic?id=14776","Omniclip - 오픈소스 웹 비디오 편집기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Omniclip - 오픈소스 웹 비디오 편집기

     * 영상의 트리밍, 분할 가능
     * 프리뷰에서 클립 편집 - 회전, 리사이즈, 텍스트 스타일링
     * 텍스트, 오디오, 비디오(MP4) 및 이미지 지원
     * Undo/Redo
     * 최대 4K 까지 다양한 해상도로 렌더링
     * 개발 예정
          + 프로젝트 관리자
          + 트랜지션
          + 이펙트 : 필터, 컬러조정, 특수 효과
          + 25fps 외의 다른 타임베이스 지원

  개발 관련

     * 오픈소스 웹 기반 비디오 편집기가 많지 않아서 직접 만들게 됨
     * 이 프로젝트는 포트폴리오 프로젝트로 시작했지만, 스타트업 아이디어처럼 다뤄서 사람들이 실제로 사용하길 바라는 마음으로 개발함
     * 무료이며 오픈소스(MIT 라이선스)임
     * Webcodecs API를 사용해 빠른 렌더링 제공
     * 브라우저 내에서 클라이언트 사이드로 동작하며, 개인 데이터는 보관하지 않음

  사용 시 주의사항

     * 심플한 편집기지만 계속 개선 중인 주력 프로젝트임
     * 현재는 25fps 이상의 비디오만 작동하고 그 이하는 안됨
     * 트랙이 4개뿐임 - 빨리 개선할 수 있지만 깜빡함
     * 곳곳에 버그 있음 (예: 타임라인 스크롤 이동 전까지 필름스트립 렌더링 안됨)
     * 아직 휴대폰에서는 작동 안함 (drag and drop API 문제)

GN⁺ 의견

     * 현재 완벽하지는 않지만 지속적인 개선과 피드백을 통해 발전 가능성이 높아 보임. 전문가용보다는 일반 사용자용으로 포지셔닝한다면 좀 더 차별화될 수 있을 것 같음
     * Webcodecs API 사용해 브라우저 내에서 실행되는 점이 매력적임. 다만 모든 브라우저에서 100% 호환되지 않을 수 있어 대안 마련이 필요해 보임
     * Shotcut, Kdenlive 등 이미 많이 쓰이는 오픈소스 데스크탑 비디오 편집기가 있음. 이들과의 차별점을 잘 어필한다면 사용자 유입에 도움이 될 듯
     * 무료 온라인 편집 도구인 Clipchamp나 Kapwing 등과 비교했을 때의 장단점 파악이 필요해 보임
     * 차별화된 기능으로는 온라인 협업 편집, 자막 자동 생성, AI 기반 편집 추천 등을 고려해 볼 만함

        Hacker News 의견

     * 웹 기반 오픈소스 비디오 편집기 개발에 커뮤니티 차원에서 투자가 필요함. 작년에 이를 호소하는 발표를 했음.
     * 실수로 탭을 자주 닫게 되는데, 저장되지 않은 프로젝트에서 작업 중일 때 탭을 닫거나 다른 곳으로 이동할 때 확인 대화상자가 없음. 이 기능을 추가할 수 있을지 문의함.
     * 개발 과정에서 겪은 큰 이슈들과 해결 방법에 대해 더 듣고 싶음. 예를 들어 빠른 렌더링을 위해 WebCodecs API를 사용했다고 했는데, 그 의미와 더 느린 대안이 무엇인지 궁금함. 또한 FFmpeg와 WebCodecs API 중 언제 어떤 것을 선택했고 차이점이 무엇인지 질문함.
     * 검은 화면이 나오는 이유는 약 50-80MB가 로드될 때까지 기다려야 함. 프로젝트가 이미 캐시되어 있어서 이 문제를 완전히 잊어버렸다고 설명함.
     * 최근 프로젝트에서 슬라이드쇼 안에 비디오를 삽입해야 했는데 Omniclip을 사용할 수 있을 정도 수준이라 칭찬함. 피드백으로 실행 취소 시스템이 다음 기능으로 좋을 것 같다고 제안함. 오픈소스여서 감사함을 표현함.
     * 5시간 전에 봤으면 좋았을 것이라며 아쉬움을 표현함.
     * Chrome 탭 최대 메모리 4GB 제한을 어떻게 해결했는지 궁금해함.
     * 비슷한 것을 만들려고 생각했지만 연구해보니 평생 못할 것 같았다며 놀라움을 표현함. 오픈소스로 만들어줘서 고맙다고 함.
     * 회전 기능이 훌륭하다며, iMovie에는 없어서 Keynote를 통해 가져오고 내보내는 방식으로 해결했었다고 함. 이를 전용 도구에서 할 수 있으면 좋겠다고 함.
     * 100% 클라이언트 사이드라는 점이 마음에 든다고 함. PNG 파일을 드래그 앤 드롭으로 가져오려 했으나 작동하지 않았다고 함.
"
"https://news.hada.io/topic?id=14840","저예산 소비자 하드웨어 스파이 장치 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       저예산 소비자 하드웨어 스파이 장치 (2018)

S8 데이터 라인 로케이터 분석

  S8 데이터 라인 로케이터 기능

     * 도청
          + S8 데이터 라인 로케이터에 10초간 전화를 걸면 장치의 마이크 피드를 들을 수 있음.
     * 콜백
          + SMS로 '1111'을 보내면 음성 활성화 콜백 기능이 활성화됨.
          + 소리 수준이 40dB를 초과하면 장치가 '1111' 명령을 보낸 번호로 다시 전화함.
          + '0000'을 보내면 음성 활성화 콜백 기능이 비활성화됨.
     * 위치 조회
          + SMS로 'dw'를 보내면 장치가 위치 정보를 포함한 SMS를 회신함.
          + 위치 정보는 http://gpsui.net 링크를 통해 Google Maps로 연결됨.
          + 위치 정확도는 최대 1.57km 오차가 있음.

  하드웨어

     * 칩
          + MediaTek MT6261MA: 저가형 칩으로 주로 저가 중국 스마트워치에 사용됨.
          + RDA 6626e: 고출력, 고효율 쿼드 밴드 프론트 엔드 모듈.
     * 연결
          + USB (패스스루): USB A-커넥터와 Micro-B 케이블은 MT6261MA와 연결되지 않음.
          + UART: 부팅 후 약 3초 후에 인터페이스가 활성화됨.
          + USB (MTK): DP와 DM 패드는 MT6261MA 프로세서로 연결됨.

  펌웨어 덤프

     * 펌웨어 덤프
          + Fernvale 연구 OS를 사용하여 펌웨어를 덤프함.
          + ROM 덤프 및 플래시 덤프를 통해 장치의 메모리 내용을 추출함.

  분석

     * SIM 스니핑
          + 장치와 SIM 간의 통신을 스니핑하여 전화번호부와 SMS 저장소의 모든 레코드를 액세스함.
          + 기본 제조된 SIM 코드가 장치의 필요에 맞게 조정되지 않았을 가능성이 있음.
     * GPRS 스니핑 시도
          + OpenBTS를 사용하여 인터넷 트래픽을 스니핑하려 했으나 GPRS 연결에 실패함.
     * 플래시 내용
          + 장치가 Nucleus RTOS를 실행 중일 가능성이 있음.
          + FAT12 파일 시스템이 존재하지만 일부는 손상되어 있음.
     * 구성 데이터
          + 플래시에서 삽입된 SIM의 IMSI와 원격 제어에 사용되는 번호를 찾음.
          + gpsui.net에 대한 참조도 포함되어 있음.
     * 숨겨진 명령어
          + 플래시에서 'dw', '1111', '0000' 명령어 외에도 여러 숨겨진 명령어를 발견함.

  GN⁺의 의견

     * 보안 위험
          + S8 데이터 라인 로케이터는 도청 및 위치 추적 기능을 갖추고 있어 보안 위험이 큼.
          + 특히, 장치가 외부 서버와 통신하는 점에서 데이터 유출 가능성이 있음.
     * 사용 사례
          + 이 장치는 주로 차량 도난 방지용으로 사용될 수 있지만, 악의적인 용도로도 쉽게 사용될 수 있음.
     * 기술적 도전
          + 펌웨어 덤프 및 분석 과정에서 여러 기술적 도전이 있었음.
          + 특히, 플래시 메모리의 블록 보호 비트를 비활성화하는 데 어려움이 있었음.
     * 대체 제품
          + 유사한 기능을 제공하는 다른 보안 장치나 위치 추적 장치를 고려할 수 있음.
          + 예를 들어, GPS 기반 위치 추적 장치나 더 높은 보안 수준을 제공하는 장치를 추천함.
     * 법적 문제
          + 이 장치의 사용은 법적 문제를 야기할 수 있음.
          + 특히, 도청 및 위치 추적 기능은 개인 정보 보호법을 위반할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 수정된 키보드 사용
          + ESP32를 키보드에 장착해 키 입력을 감지하고, Bluetooth나 WiFi로 접근 가능함.
          + 특정 시간에만 라디오 신호를 켜는 등 다양한 방법으로 사용할 수 있음.
     * 전자기기 분해
          + 전자기기를 분해하고 칩의 식별자를 검색해보면 많은 것을 배울 수 있음.
     * SMS 제어 프로토콜의 문제점
          + SMS를 제어 프로토콜로 사용하는 것은 좋지 않음.
          + 명령을 보낼 때마다 증거가 생성되고, 이는 통신사에 의해 영구적으로 저장될 수 있음.
     * 로그인 자격 증명 문제
          + gpsui.net 로그인 자격 증명에 접근할 수 있는 사람은 누구나 장치를 제어할 수 있음.
          + 원래 포장이나 설명서에는 해당 웹사이트에 대한 언급이 없음.
     * 추적 장치의 포장 문제
          + 포장에 추적 장치라는 언급이 없어, 비즈니스 미팅이나 아이, 친척에게 선물로 사용될 수 있음.
     * 눈 보철물 아이디어
          + 카메라, 배터리, 저장장치, 라디오를 포함한 눈 보철물을 통해 스마트폰과 연동하거나 독립적으로 기능할 수 있음.
     * 관련 자료
          + 저예산 소비자 하드웨어 스파이 장치에 대한 내부 정보 링크 제공.
     * 버그 탐지 장치
          + 영화에서 본 ""버그 스위퍼"" 같은 장치가 있는지 궁금함.
     * GSM 안테나 차단
          + 호스트 장치를 보호하면서 특정 주파수로 GSM 안테나를 파괴할 수 있는지 궁금함.
          + 새로운 하드웨어의 사전 소독 방법으로 고려됨.
     * Signal 메신저 사용
          + 스크린샷에서 Signal 메신저를 사용해 장치와 통신하는 방법이 궁금함.
"
"https://news.hada.io/topic?id=14887","일리야 수츠케버: "이 모든 것을 배우면 중요한 것의 90%를 알게 될 것입니다"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             일리야 수츠케버: ""이 모든 것을 배우면 중요한 것의 90%를 알게 될 것입니다""

   일리야 수츠케버가 머신러닝/AI 관련하여 추천한 리딩 리스트
     * The Annotated Transformer
     * The First Law of Complexodynamics
     * The Unreasonable Effectiveness of RNNs
     * Understanding LSTM Networks
     * Recurrent Neural Network Regularization
     * Keeping Neural Networks Simple by Minimizing the Description Length of the Weights
     * Pointer Networks
     * ImageNet Classification with Deep CNNs
     * Order Matters: Sequence to sequence for sets
     * GPipe: Efficient Training of Giant Neural Networks using Pipeline Parallelism
     * Deep Residual Learning for Image Recognition
     * Multi-Scale Context Aggregation by Dilated Convolutions
     * Neural Quantum Chemistry
     * Attention Is All You Need
     * Neural Machine Translation by Jointly Learning to Align and Translate
     * Identity Mappings in Deep Residual Networks
     * A Simple NN Module for Relational Reasoning
     * Variational Lossy Autoencoder
     * Relational RNNs
     * Quantifying the Rise and Fall of Complexity in Closed Systems: The Coffee Automaton
     * Neural Turing Machines
     * Deep Speech 2: End-to-End Speech Recognition in English and Mandarin
     * Scaling Laws for Neural LMs
     * A Tutorial Introduction to the Minimum Description Length Principle
     * Machine Super Intelligence Dissertation
     * PAGE 434 onwards: Komogrov Complexity
     * CS231n Convolutional Neural Networks for Visual Recognition

   링크 모음 : https://arc.net/folder/D0472A20-9C20-4D3F-B145-D2865C0A9FEE

   Neo 봇 크롤링 이슈가 있네요.

   레딧이 차단하나 봅니다. 수작업으로 넣어두었습니다 ;)

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * The headline belies the scope of this task. If you click in to see what these are:
          + 하나는 컨볼루션 신경망에 대한 전체 코스임 링크
          + 하나는 500페이지짜리 교과서임 링크
          + 또 다른 하나는 80페이지짜리 교과서임 링크
          + 이 목록을 전업으로 1년 정도 공부하면 가능할 수도 있음. 우선순위에 따라 가치가 있을 수도 있음.
     * Some time ago I also copied the list at 링크 so its easier to wget (e.g. get all the arxiv pdfs)
          + wget 명령어를 사용하여 모든 arxiv pdf를 다운로드할 수 있음.
          + 친구와 함께 pdfunite를 사용해 하나의 pdf로 합치고, 인쇄소에서 스파이럴 북으로 인쇄했음. 결과물이 매우 좋았음.
     * Keep in mind there is no confirmation that this is the actual list.
          + 이 목록이 실제 목록인지 확인되지 않았음.
          + 이 목록은 1년 전에 Ilya가 John Carmack에게 준 목록이라고 함.
     * How long does it take to learn the prerequisites to learn these if you don't already have a CS background?
          + 목록을 읽어보니 절반 정도의 제목도 이해하기 어려웠음.
          + 이 목록을 시작하면 이해할 수 있을지, 아니면 다른 곳에서 시작해야 할지 궁금함.
     * What people forget is without a proper, tangible goal, no matter how many core or interesting papers you read, you will still remember nothing.
          + 명확하고 구체적인 목표가 없으면, 아무리 많은 논문을 읽어도 기억에 남지 않음.
     * There are a few past discussions, going back to October 2022. I wonder how out of date the list is now.
          + 이 목록이 얼마나 오래되었는지 궁금함. 2022년 10월부터 몇 가지 논의가 있었음.
     * This is just someone’s bookmarks folder. Where’s the proof these were recommended by Ilya?
          + 이 목록이 Ilya가 추천한 것이라는 증거가 없음. 단순히 누군가의 북마크 폴더일 수도 있음.
     * The argument that this is 90% of what matters in ML seems a bit bold.
          + 이 목록이 머신러닝에서 중요한 것의 90%를 차지한다는 주장은 과감함. 강화 학습이나 그래프 신경망 같은 중요한 주제가 빠져 있음.
     * This has nothing on it about llms, where in context learning, retrieval augmention, tool using, and multi modality is really blazing ground.
          + 목록에 대형 언어 모델(LLM)에 대한 내용이 없음. 문맥 학습, 검색 증강, 도구 사용, 다중 모달리티 같은 중요한 주제가 빠져 있음.
     * Reading 30 studies does not mean ""learned and understood"". Especially if you start from zero.
          + 30개의 논문을 읽는다고 해서 ""배우고 이해했다""는 의미는 아님. 특히 처음부터 시작하는 경우에는 더더욱 그렇음.
"
"https://news.hada.io/topic?id=14789","스타트업 성공 전략의 80%는 실수를 피하는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       스타트업 성공 전략의 80%는 실수를 피하는 것

     * 스타트업이 실패하는 이유는 무엇일까? ""뭔가를 피하는 것""이 이미 성공을 위한 계획이 될 수 있음
     * 흔히 제시되는 성공 전략
          + 비전을 수립하라
          + 비전에 따른 목표를 설정하라
          + 목표를 달성하기 위한 행동을 만들어라
          + 목표에 대한 진척도를 측정하라
     * 그러나 성공은 무엇을 해야 할지 만큼 무엇을 하지 말아야 할지에 대한 것도 중요함
     * 의도적인 목표 설정만이 성공의 유일한 방법은 아닐 수 있음
     * 성공의 80%는 실수를 하지 않는 것

[승리를 위해 실수하지 않는 방법]

     * 아마추어 체스 경기에서는 대부분 누군가 실수를 하면 그것으로 게임이 끝남
     * 컴퓨터로 분석해 보면 ""아무도 이기고 있지 않다""가 누군가 실수를 하면 지게 됨

  전략이 아닌 실수가 승패를 좌우함

     * 전략, 개봉 수순 암기, 엔드게임 연습, 위대한 역사적 게임 연구, 전술 향상을 위한 퍼즐 훈련 등이 아닌 실수가 승패를 좌우함
     * 좋은 체스 플레이어는 그런 것들이 모두 필요하지만, 우리 같은 초보자들은 그저 ""실수하지 않는 것""이 필요함

  저자의 체스 게임 데이터 분석

     * 저자는 자신과 비슷한 실력의 사람들과 수백 번의 게임을 했고, 모든 게임에 대해 실수, 착오, 부정확성의 수를 포함한 분석 데이터를 가지고 있음
     * 지난 20번의 결정적인 경기를 살펴본 결과, 정확히 50%를 이겼는데 이는 선수들의 실력이 동등하다는 증거임
     * ELO 레이팅이 높은 선수가 이길 확률은 55%에 불과해 동전 던지기보다 약간 나은 수준
     * 경기 분석 결과, 실수를 더 많이 한 선수가 86%의 경기에서 패배함
     * 실수와 착오를 모두 고려한 ""오류 점수""를 계산한 결과, 거의 모든 경기에서 오류 점수가 높은 선수가 81%의 경기에서 졌음

  테니스에서도 같은 원리가 적용됨

     * 아마추어 테니스 경기에서도 80%의 포인트는 얻어지기보다는 잃어버려짐
     * 즉, 상대방의 실수로 인해 포인트를 얻는 경우가 80%
     * 테니스에서 이기려면 실수를 피하고 공을 경기장 안에 유지하면서 상대방이 실수하도록 만드는 것이 전략

  스타트업에서도 실수를 피하는 것이 성공의 80%일 수 있음

     * 체스와 테니스에서 실수가 승패의 80%를 결정하는 것처럼, 복잡한 시스템인 스타트업에서도 ""실수하지 않는 것""이 성공의 80% 가 될 수 있음

[스타트업에서의 실수]

  스타트업 실패의 근본 원인 파악의 중요성

     * 스타트업이 실패하는 이유를 ""자금이 떨어져서"" 또는 ""창업자가 포기해서""라고 말하는 것은 마치 ""심장이 멈춰서"" 죽었다고 말하는 것과 같음
     * 폐암으로 사망했음에도 불구하고 심장 정지를 근접 원인으로 언급하는 것처럼, 스타트업 실패의 근본 원인을 파악하지 않고 창업자의 포기만을 언급하는 것은 바람직하지 않음
     * 단순히 ""포기하지 마라""는 조언은 도움이 되지 않으며 올바르지도 않음
     * 그렇다고 ""5 Why's"" 기법처럼 너무 깊이 파고들 필요는 없음
     * 암의 원인이 담배라고 해서 ""담배를 피워 무리에 속하고 싶어했기 때문""이라고 결론 내리는 것은 부적절함
     * 스타트업 실패의 근접 원인이 아니면서도 너무 먼 원인이 되지 않는 수준에서 실수를 식별할 필요가 있음
     * 스타트업이 실패하는 이유를 설명하는 다양한 자료가 존재하며, 이 글 끝부분에 나열해 두었음
     * 저자는 이를 중복 제거하고 재배열하여 아래 목록을 만들었으며, 자신의 의견을 상당 부분 추가함

  실제 원인이 아닌 근접 원인들

     * 자금 고갈: 실패의 결과이지 원인이 아님 (수익으로 회복할 방법 없이 과도하게 지출한 경우 제외)
     * 피벗 실패: 이미 실패하고 있었기 때문에 피벗을 시도한 것
     * 창업자 포기: 포기하지 않는 것에 비해 무엇이 다른가?
     * PMF(Product Market Fit)를 찾지 못함: ""실패했다""는 말을 달리 표현한 것

  불운 : 예측하거나 예방할 수 없는 실패 원인

     * 갑작스러운 경제 상황 급변: 코로나19로 인해 영화관이 파산한 경우, 이를 예방하기 위한 전략이 없었을 것
     * 예상치 못한 공동창업자 이탈: 일부는 예방 가능하지만, 누군가 병에 걸리거나 약속을 어기거나 사기를 치는 경우 달리 할 수 있는 일이 불분명함

  실수로 보이지만 동의하기 어려운 항목들

     * 나쁜 아이디어: 훌륭한 아이디어는 처음에는 나쁜 아이디어처럼 보이는 경우가 많아 겉보기에 나쁜 아이디어를 가졌다고 해서 실수라고 할 수 없음. 중요한 것은 초기 아이디어가 아니라 시장을 찾고 실행하여 아이디어를 반복적으로 개선해 나가는 것
     * 제품을 만들 수 없음: 일반적으로 창업자들은 물건을 만드는 방법을 알고 있으며, 오히려 사업을 구축하는 다른 모든 측면을 무시하고 제품을 만드는 데 집중하는 것이 문제
     * 공동창업자 수: 1명 또는 여러 명의 공동창업자로 성공한 스타트업 사례를 쉽게 찾을 수 있고, 실패 사례도 마찬가지. 창업자 수 보다는 창업자들의 스타일과 성격에 맞는 것이 더 중요
     * 위치: 유니콘 기업을 목표로 하는 스타트업에게는 여전히 유효한 이유. 필요한 인재를 빠르게 고용하고 자금을 조달하기 위해서는 인재 풀이 존재하는 곳에 있어야 함. 그러나 해마다 그 중요성이 줄어들고 있으며, 그런 목표가 없는 스타트업에게는 무관함

[예방 가능한 실수들]

     * 자업자득의 실수는 예방이 가능하거나 위험을 크게 줄일 수 있음. 그렇게 하지 않는다면 그것은 당신의 책임

  고객과 소통하지 않음 (그리고 경청하지 않음)

     * 시작하기 전, 특히 시작한 후에 고객과 이야기를 나누지 않았다면 그것은 실수
     * 고객과 이야기를 나누었지만 그들이 말하는 것에 대해 정직하게 받아들이지 않았다면 그것은 당신의 잘못된 분석
     * 반복적 가설 방법(Iterative Hypothesis Method) 또는 다른 신뢰할 만한 프레임워크를 사용했어야 함

  시장 수요 부재 / 좋지 않은 시장

     * 시장이 작고 정체되어 있거나 축소되고 있다는 것을 이미 알고 있었을 것
     * 제품이 필요한 사람이 충분하지 않다는 것을 알 수 있었을 것
     * 고객들이 그 문제를 가지고 있다는 데 동의하지 않거나, 그 문제를 해결하는 데 돈을 쓸 만한 가치가 있다고 생각하지 않는다는 것을 알 수 있었을 것
     * 고객들이 예산이 없거나 가격을 받아들이지 않는다는 것을 알 수 있었을 것
     * 고객들이 현재 가지고 있는 것에 만족한다는 것을 알 수 있었을 것
     * 좋은 시장이 되기 위한 조건들은 잘 알려져 있으므로, 코드를 작성하는 데 6개월을 투자하기 전에 알아내지 못한 것은 변명의 여지가 없음

  목표 고객을 선정하지 않고, 그들에게 가치 제안을 명확히 전달하지 않음

     * 모든 사람에게 이야기한다는 것은 결국 아무에게도 말하지 않는 것과 같음
     * 모든 사람에게 말하는 것은 실수이며, 이 제품이 누구를 위한 것인지 결정하기를 꺼리거나 게을러서임
     * 목표 고객 선정은 홈페이지의 언어, 광고, 영업 통화, 제품 내부 등 모든 것을 결정함
     * 특히 지금은 AI를 활용하여 자신만의 특별하고 중요한 점을 목표 고객이 이해할 수 있는 언어로 정제할 수 있으므로 변명의 여지가 없음
     * 이상적 고객 프로필(ICP)에게 팔아야 하며, 이는 ICP가 정확히 누구인지 아는 것을 의미함

  너무 많은 것들이 잘 풀려야 함

     * 모든 스타트업은 위험이 있고, 해결되지 않을 가능성이 높은 치명적인 격차가 있음
     * 그러나 어떤 스타트업은 동시에 너무 많은 것이 잘 돼야 하는 격차가 너무 많음
     * 필요한 기술의 대부분을 갖추고, 고객의 반대 의견 대부분이 해결되고, 시장이 건전하고, 유통 채널과 틈새시장이 다양하며, 시장에서 점점 더 많은 돈이 지출되고 있다면 남은 격차에 대해 위험을 감수해야 함
     * 그러나 이 모든 것이 불확실하거나 운이 좋아야 극복할 수 있는 격차라면, 그 모든 것이 당신 편이 될 확률은 거의 0에 가까우며, 시작할 때 이미 그것을 알고 있었던 것
     * 당신의 경로는 ""그리고""가 아니라 ""또는""으로 구성되어야 함

  창업자 / 투자자 해체

     * 이는 불운일 수 있지만, 공동창업자를 선택하는 것은 당신의 몫
     * 그들을 오랫동안 알고 지냈다면 잘못 선택한 것이고, 그렇지 않다면 경솔한 결정을 내린 것
     * 창업자의 해체가 스타트업을 망하게 하는 한 가지 이유는 떠나는 창업자가 엄청난 양의 주식을 갖고 있기 때문
     * 모든 창업자에 대한 베스팅 일정이 없었기 때문임. 이는 실수
     * 어쨌든 팀이 스스로 그렇게 한 것이지 경쟁자나 경제 또는 고객 때문이 아님

  시장에서 차별화가 되지 않음

     * 이 실수는 첫날부터 분명히 드러남
     * 자신이 특별한 이유, 제품이 특별한 이유, 다른 사람 대신 당신에게서 사야 하는 이유, 당신이 이 회사를 만들기에 적합한 사람인 이유, 많은 사람들이 실패한 분야에서 당신이 성공할 이유를 모르고 있었기 때문
     * 사용할 수 있는 많은 종류의 레버리지가 있었지만, 당신은 그 중 어느 것도 선택하지 않음

     ""톨스토이는 안나 카레니나의 첫머리에서 이렇게 말한다. '행복한 가정은 모두 비슷하다. 불행한 가정은 저마다 나름의 불행을 안고 있다.' 비즈니스는 정반대다. 행복한 기업은 모두 다르다. 각 기업은 독특한 문제를 해결함으로써 독점권을 획득한다. 실패한 기업은 모두 같다. 경쟁에서 벗어나지 못했기 때문이다."" - 피터 틸, 제로 투 원

  진실을 추구하기를 거부함 / 진실을 보기를 거부함 / 배우기를 거부함

     * 우리는 모두 진실을 직시하도록 자신을 강요해야 함. 진실은 아프기 때문
     * 우리의 아이디어가 옳지 않았고, 우리의 통찰력이 고객과 공유되지 않았으며, 멋진 디자인이 혼란스럽고, 우리가 ""멍청하다""고 부르던 경쟁사를 잠재 고객들이 좋아하고, 우리가 ""고장 났다""고 말하는 것이 사실은 고장 나지 않았으며, 우리가 고객이 겪고 있다고 주장하는 고통을 그들이 겪고 있지 않다는 것이 진실
     * 당신은 물어봤나? 물어봤다면 듣고 있었나? 전략과 제품, 포지셔닝에 큰 변화를 주지 않았다면 당신은 실수를 하고 있는 것
     * 진실을 추구하고, 그 진실과 마주하라

  너무 일찍 출시함 / 너무 늦게 출시함

     * 이 두 가지 모두 실패의 원인이 된다는 것이 재미있음
     * 단순하지만 사랑스러운 v1 대신 형편없는 MVP로 출시하는 것은 예방 가능한 실수
     * 제작자들은 제작만 사랑하기 때문에 고객 없이 6개월(또는 2년) 동안 제작함
     * 쓰레기를 출하하는 것과 절대 출하하지 않는 것 모두 실수
     * (추신: 또한 ""출시/Launch""하지 마세요. 친구들 외에는 아무도 신경 쓰지 않을 것이고, 어쨌든 앞으로 3년 동안 꾸준히 고객을 확보해야 하니까 그냥 그 일에 매진하세요.)

  시기상조의 규모 확장

     * PMF(Product/Market Fit) 전에는 무엇이 통하는지 발견하는 것이 일
     * 고객이 실제로 돈을 지불할(그리고 1년 후에도 계속 지불할) 것, 완벽한 목표 고객은 누구이며 그들이 원하는 것은 무엇인지, 마케팅을 통해 그들에게 어떻게 다가가고 영업을 통해 어떻게 계약을 체결할 것인지(셀프 영업이든 인적 영업이든), 어떤 금액을 청구해야 하고 어떻게 해야 하는지 등을 알아내는 것
     * 많은 창업자들은 PMF가 어떤 모습인지 모르거나, 알고 싶어하지 않음. ""나는 그것을 가지고 있다!""고 선언하고 싶어하기 때문. 그렇게 말하면 기분이 좋고 건강한 축하를 받을 수 있으며 트위터에서 약간의 시기심을 살 수도 있기 때문
     * 그러나 규모 확장은 효과가 입증된 것에 두 배로 투자하는 것. 더 많이, 더 빠르게, 더 잘, 더 높은 품질로, 더 효율적으로 하는 것
     * 무엇이 통하는지 알기 전에 시간과 돈을 쓰는 것은 그 모든 시간과 돈을 낭비하는 것. 그러다 보면 둘 다 바닥남
     * 무지에서 비롯된 실수일 수도 있지만, 일반적으로 진실보다 자아를 앞세우는 데서 비롯됨

  연 매출 2천만 달러 이전에 대기업 고객 대상 영업

     * 처음부터 엔터프라이즈 부문을 타깃으로 삼고 있고, 이미 영업, 지원, 온보딩, 계정 관리, 법무, 보안, 제품 요구사항 등에 맞춰 구축되어 있다면 이는 해당되지 않음
     * 그러나 그러한 무거운 요구사항 때문에 거의 모든 스타트업은 그렇게 시작하지 않음
     * 흔한 패턴은 중소기업 시장에서 어느 정도 성공을 거둔 다음, ""세일즈포스가 몇 개 시트를 샀어!""라는 걸 보고 ""그들이 필요로 하는 신호를 보고 있어""라며 ""업마켓으로 가기로"" 결정하는 것
     * 대기업 내부에는 항상 당신의 제품을 구매할 개별 팀이 있음. 그건 좋은 일! 하지만 그건 ""엔터프라이즈""를 타깃팅하는 것과는 다름
     * 당신은 아마 당신이 모르는 것이 무엇인지조차 모를 것. ""나쁜 전략""을 외치는 약점의 위치
     * 이는 피하기 쉬운 실수. 팀의 주문을 받고, 가지고 있는 레버리지에 충실하며, 옆에서 도구를 사용하는 팀을 수백만 달러 규모의 하향식 영업에 필요한 것과 혼동하지 마세요

  작동하지 않는 비즈니스 모델 / 수익성 없음

     * 단위 경제성은 출시 직후부터 측정할 수 있음
     * 생산 비용에 대해서는 이미 대략적인 아이디어가 있고, 마케팅과 영업에 돈과 시간을 써야 한다는 것도 알고 있음
     * 비즈니스 모델에 맞지 않는 가격을 매기는 것은 한 자릿수 차이로도 예방할 수 있음
     * 많은 회사들은 규모가 커져도 합리적인 비즈니스 모델이 없음
     * ""나중에 그것을 알아낼 것""이라고 말하지만, 그건 그저 당신이 실수를 하고 있고 미래의 당신이 어떻게 실수를 멈출 수 있을지 알아낼 것이라고 희망하는 것
     * 때로는 그럴 것이다. 그러지 않는다면 그건 누구의 잘못인가?

  고객 확보보다 코드 작성에 몰두

     * 시장에서 작동하는 제품을 갖게 된 후, 왜 더 많은 고객을 확보하지 못하는가?
     * 제작자는 이렇게 말함: 더 많은 기능이 필요해서. 또는 제품에 버그가 너무 많아서
     * 둘 다 틀림. 현재의 기능만 필요로 하는 고객이 있지만, 마케팅으로 그들의 관심을 끌고, 웹사이트로 그들의 흥미를 자극하며, 영업으로 그들의 비즈니스를 획득하는 데 힘쓰지 않고 있기 때문
     * 잠재 고객은 제품에 버그가 있다고 해서 당신을 무시하지 않음. 그들은 아직 그것을 모름
     * 코더는 코딩하는 것을 좋아함. 다른 모든 것은 어렵고, 재미없고, 어떻게 실행해야 할지 불분명하며, 돈이 들고, 그냥 Visual Studio의 안락함으로 돌아가 Copilot의 선견지명에 감탄하고 CSS 클래스를 튜닝하는 게 너무 편함
     * 그래서 사람들은 당신을 찾지 않고, 구매하지 않으며, 회사는 실패함. 당신이 마케팅과 영업에서 실수했기 때문

  목표 시장 공략 전에 목표 시장 확장 / 두 번째 제품으로 너무 빨리 이동

     * 나는 여기서 사람들을 지목하려는 게 아니므로 실제로 트위터에서 누군가가 월 반복 매출(MRR) 2,700달러에 도달했으니 이제 새로운 시장 부문으로 확장한다고 선언하는 것을 여러 번 봤다는 말은 하지 않겠음
     * 이 단순한 실수는 집중력 부족, 전략에 대한 확신 부족, 기존 목표 시장에서 다른 고객을 확보하는 것이 확장하는 것보다 10배 쉽다는 것에 대한 이해 부족을 드러냄
     * 이 실수는 당신의 주의력, 마케팅 비용, 포지셔닝, 메시징, 제품의 날카로움을 약화시키며, 피하기 쉬움
     * 확장할 시기는 있음: 나중에(Later)

  열정 / 끈기 부족

     * 처음에는 열정이 있었을지 모르지만 그것이 증발했거나, 이 임무에 앞으로 10년을 쏟겠다는 진실된 의도가 있었지만 당신은 무너졌을 수 있음
     * 그러나 그 변명은 첫날 당신이 정직하게 자신의 열정이 무엇인지, 어떤 강점을 활용할 것인지, 자신이 누구인지 이해하고, 깊이 관심을 갖고 있는 사명이 있었으며(""돈을 벌자"" 또는 ""창업자라고 말할 수 있다""는 것 외에), 스타트업에 항상 수반되는 감정적 후유증에 대해 읽었고, 인생의 다른 중요한 것들과 타협했을 때에만 유효함
     * 만약 그런 일들을 하지 않았다면, 그것은 자기 발견이 아니라 실수
     * (정말로 자기 발견이었다면, 용서받을 것이고, 더 중요한 것은 스스로 용서해야 함)

[결론]

     * 스타트업을 더 낮은 위험으로 구축하는 방법이 있음
          + 주로 위와 같은 실수를 피함으로써 가능함
          + PMF(Product/Market Fit)를 위한 로드맵에 요약해 두었음
     * 이것이 실패하지 않는 길인가? 물론 아님. 체스에서도 마찬가지. 게임의 나머지 부분도 중요함
     * 그러나 피할 수 있는 것들을 피함으로써 많은 위험을 줄일 수 있을 때, 특히 ""실수하지 않는 것""이 어떤 모습인지 상세히 보여주는 프레임워크가 있을 때, 그렇게 하지 않을 이유가 있을까?
     * 성공의 80%는 실수를 피하는 것

부록: ""스타트업이 실패하는 이유""에 대한 외부 출처

  Paul Graham: 스타트업을 죽이는 18가지 실수

    1. 단독 창업자 (공동 창업자가 있는 것과 대조적)
    2. 창업자들 간의 싸움
    3. 나쁜 위치 선정
    4. 작은 틈새시장 선택
    5. 독창성 없는 아이디어
    6. 고집스러움
    7. 나쁜 프로그래머 고용
    8. 잘못된 플랫폼 선택
    9. 출시가 너무 느림
   10. 너무 이른 출시
   11. 특정 사용자를 염두에 두지 않음
   12. 너무 적은 자금 조달
   13. 너무 많은 자금 조달
   14. 투자자 관리 미숙
   15. 지나친 지출
   16. (가정된) 수익을 위해 사용자를 희생시킴
   17. 직접 몸을 더럽히길 꺼림
   18. 절반의 노력만 기울임

  톰 아이젠만: 수백 번의 인터뷰와 설문 조사로 본 스타트업 실패 이유

    1. 좋은 아이디어, 나쁜 파트너 (창업자뿐만 아니라 투자자, 주요 임원 및 직원)
    2. 잘못된 출발 (시작하거나 MVP를 만들기 전에 고객, 경쟁자, 시장에 대해 충분히 조사하지 않음)
    3. 균형 유지 (심리 관리 및 건강한 의지력 유지)

  스티브 블랭크: 스타트업의 9가지 치명적인 죄악

    1. 고객이 원하는 것을 안다고 가정함
    2. ""어떤 기능을 만들어야 할지 알고 있어"" 라는 결함
    3. 출시 날짜에만 집중함
    4. 테스트, 학습, 그리고 반복 대신 실행을 강조함
    5. 시행착오를 허용하지 않는 사업 계획서를 작성함
    6. 전통적인 직책과 스타트업의 필요를 혼동함
    7. 판매 및 마케팅 계획을 실행에 옮김
    8. 성공을 전제로 회사를 조기에 확장함
    9. 위기에 의한 관리, 이는 죽음의 나선으로 이어짐

  존 오셔: 컨슈머 제품에서 흔히 저지르는 17가지 실수

   (대부분 ""너무 빨리 확장함"" 또는 ""필요 이상으로 돈을 씀""의 변형임)
    1. 사업 아이디어가 실행 가능한지 확인하기 위해 충분한 시간을 들여 조사하지 않음
    2. 시장 규모, 타이밍, 진입 용이성, 잠재적 시장 점유율을 잘못 계산함
    3. 자금 요구사항과 타이밍을 과소평가함
    4. 판매량과 타이밍을 지나치게 예측함
    5. 비용 예측치를 너무 낮게 잡음
    6. 너무 많은 사람을 고용하고 사무실과 시설에 너무 많은 돈을 씀
    7. 기대에 못 미칠 경우에 대한 대비책이 부족함
    8. 불필요한 파트너를 데려옴
    9. 기술 요건보다는 편의를 위해 고용함
   10. 회사 전체를 하나로 관리하는 것을 소홀히 함
   11. 방법을 찾기보다는 ""불가능하다""는 것을 너무 쉽게 받아들임
   12. 이익보다는 매출액과 회사 규모에 너무 집중함
   13. 진실을 추구하기보다는 자신의 행동에 대한 확인을 구함
   14. 비전의 단순성이 부족함
   15. 장기적 목표와 사업 목적의 명확성이 부족함
   16. 초점과 정체성이 부족함
   17. 출구 전략이 없음

  앤드류 몬탈렌티: 흔한 스타트업 실수

    1. 결혼 생활의 문제(공동창업자와의 문제에 대한 비유)
    2. 부트스트래핑 계획 없음
    3. 커리어 무브로서의 창업
    4. 원래 아이디어를 변경하지 않으려 함
    5. 섣부른 규모 확장
    6. 너무 빠른 성장
    7. 코드를 두려워함

  포브스

    1. 고객과 소통하지 않음
    2. 시장에서의 차별화 부재
    3. 가치 제안을 명확히 전달하지 못함
    4. 리더십 기능 장애, 특히 창업자간 갈등
    5. 수익성 있는 비즈니스 모델을 찾지 못함

   고객 확보보다 코드 작성에 몰두 뼈때리는 말

   근래 본 것중에 가장 인상깊네요

   굿 아티클

  Hacker News 의견

     *

     체스에서 실수를 더 많이 한 플레이어가 86%의 경우에 패배함
          + 체스에서 '실수'의 정확한 정의는 명확하지 않지만, Lichess UI 예시를 들면, 최선의 수 대비 승률을 14% 이상 떨어뜨리는 수를 '실수'로 볼 수 있음.
          + 승률은 비선형 함수이고, 예를 들어 100 센트폰을 잃는 것이 항상 실수는 아님.
          + 실수라는 것을 알게 되면 이미 그 수가 승률에 큰 영향을 미쳤다는 것을 알 수 있으므로, 분석은 승률과 높은 상관관계를 가진다는 것을 측정하는 것에 불과함.
     * 실수를 줄이는 것이 성공의 열쇠
          + 예를 들어, 심레이싱에서는 빠르기보다 일관성이 승리를 가져다줌.
          + 스쿼시에서는 강하고 빠른 것보다 지치지 않는 것이 승리를 가져다줌.
          + 대부분의 사람들에게는 높은 수준의 기술보다는 기본에 충실하는 것이 올바른 초점임.
          + 소프트웨어 개발에 있어서도 '뛰어난' 아이디어보다는 테스팅, 피드백, 모니터링 등 기본적인 것들에 에너지를 투자하는 것이 더 큰 성공을 가져다줌.
          + 자신의 아이디어가 아니더라도 안정적이고 지속 가능한 프로젝트를 유지함으로써 팀원들의 좋은 아이디어와 경쟁자의 실수로부터 이득을 얻을 수 있음.
     * 요리에서도 실수를 피하는 것이 중요
          + 음식을 태우거나, 익히지 않거나, 너무 많이 혹은 적게 양념을 하지 않는 것이 중요함.
          + 실수를 피하면 사람들은 당신을 '좋은 요리사'로 인식하기 시작함.
     * 자동차 판매에서도 실수를 피하는 것이 성공의 열쇠
          + 특정한 스타일이나 방법보다는 실수를 피하고 고객을 잃지 않는 것이 중요함.
          + 실수를 줄이면 나머지는 보통 괜찮게 풀림.
     * 실수에 더 많은 가중치를 주는 방법
          + 단순히 실수의 수와 실수의 중요도를 곱하는 것은 실수에 더 많은 가중치를 주는 것이 아님.
          + 실수에 더 많은 가중치를 주기 위해서는 지수를 사용하는 것이 좋음, 예를 들어 베이스볼 통계에서 사용하는 방법.
     * 실수를 줄이는 것이 중요한 전략
          + 실수를 줄이는 것이 다양한 분야에서 성공의 열쇠임을 강조하는 다른 예시들.
     * 체스에서 실수를 피하는 것과 실수를 원하지 않는 것은 다름
          + 실수를 피하기 위해서는 실수를 인식하고 이를 미리 예방할 수 있는 기술이 필요함.
          + 체스를 공부하고 토너먼트에 참가해보면 실력의 중요성을 깨닫게 됨.
     * 경험이 많아질수록 더 적은 시간으로 더 효과적인 작업 가능
          + 서두르지 않을 때만 빠르게 일할 수 있음.
          + 자신이 하지 않은 일에 대해서도 크레딧을 받으면 더욱 효율적인 개발자가 될 수 있음.
     * 실수를 피하는 조언의 이해
          + 체스 예시에서 실수를 피하는 것이 기술 연습, 퍼즐 훈련 등과 관련이 있다고 느낌.
          + 실수를 피하기 위해서는 실수를 인식하고 이를 예방할 수 있는 능력이 필요함.

   체스를 예도 들었는데, 너무 추상화 된 사례로 전체를 이야기 하는게 아닌가 싶기는 하네요. (전체적인 내용은 동감하지만)

   예를 들면 리그 오브 레전드 같은 경우, ""실수를 덜하는 팀이 잘하는 팀이다""라는 기존 명제가 2018년 ~ 2019년 이후로는 잘못 되었다는 걸 대부분의 팀들이 인식해서 연습 방법이 바뀌었습니다. 이제는 대부분이 실수는 상수라고 생각하고, 실수를 줄이는 대신에 더 과감한 시도를 많이 해보고 더 좋은 플레이를 많이 나오게 하는 것으로 방향을 바꿔서 하고 있고요.

   축구라면? 골을 많이 넣는 팀은 실수를 덜하는 팀이려나요? 골을 덜 먹히는 팀은 실수를 덜 하는 팀일거 같긴한데.

   그래서 축구는 실수의 스포츠라는 말도 있죠

   실수를 줄이기보다는 상대의 실수를 만드는 행위를 하는것에 초점을 맞추는 것도 전략일 수 있죠
"
"https://news.hada.io/topic?id=14870","Winamp 소스 코드 공개 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Winamp 소스 코드 공개 발표

Winamp 소스 코드 공개 발표

     * Winamp가 소스 코드를 공개함
          + Winamp는 전설적인 Windows용 플레이어의 소스 코드를 공개하여 협업 개발을 가능하게 함.
          + 2024년 9월 24일, 전 세계 개발자들에게 애플리케이션의 소스 코드를 공개할 예정임.
          + Windows에서 사용되는 플레이어의 코드를 공개하여 전체 커뮤니티가 개발에 참여할 수 있게 함.
     * 글로벌 협업 초대
          + 전 세계의 개발자들이 자신의 전문 지식, 아이디어, 열정을 기여하여 이 상징적인 소프트웨어를 발전시키는 데 도움을 줄 수 있음.
          + Winamp는 단순한 음악 플레이어 이상의 의미를 가짐. 독특한 디지털 문화, 미학, 사용자 경험을 포함함.
     * Winamp의 역사적 진보
          + 소스 코드 공개를 통해 Winamp는 역사적인 다음 단계를 밟고 있음.
          + 사용자들이 제품 개선에 직접 기여할 수 있게 됨.
          + Winamp의 CEO인 Alexandre Saboundjian은 ""이 결정은 전 세계 수백만 명의 사용자들을 기쁘게 할 것입니다. 우리의 초점은 새로운 모바일 플레이어와 다른 플랫폼에 맞춰져 있습니다. 우리는 7월 초에 새로운 모바일 플레이어를 출시할 예정이지만, Windows에서 소프트웨어를 사용하는 수천만 명의 사용자들을 잊지 않을 것입니다. 그들은 수천 명의 개발자들의 경험과 창의성의 혜택을 받을 것입니다. Winamp는 소프트웨어의 소유자로서 공식 버전에 대한 혁신을 결정할 것입니다.""라고 설명함.
     * 개발자 참여
          + 관심 있는 개발자들은 다음 주소에서 자신을 알릴 수 있음: about.winamp.com/free-llama

GN⁺의 의견

     * Winamp의 역사적 가치
          + Winamp는 1990년대와 2000년대 초반에 많은 사용자들에게 사랑받았던 음악 플레이어로, 디지털 음악 문화의 중요한 부분을 차지했음. 소스 코드 공개는 이러한 역사적 가치를 재조명하는 기회가 될 수 있음.
     * 개발자 커뮤니티의 활성화
          + 소스 코드 공개는 전 세계 개발자들이 협력하여 Winamp를 더욱 발전시킬 수 있는 기회를 제공함. 이는 오픈 소스 커뮤니티의 활성화와 기술 발전에 긍정적인 영향을 미칠 수 있음.
     * 기술적 도전과 기회
          + Winamp의 소스 코드를 분석하고 개선하는 과정에서 많은 기술적 도전이 있을 수 있음. 이는 개발자들에게 학습과 성장의 기회를 제공함.
     * 다양한 플랫폼 지원
          + Winamp가 새로운 모바일 플레이어와 다른 플랫폼을 지원하려는 계획은 사용자들에게 더 많은 선택지를 제공함. 이는 Winamp의 사용자 기반을 확장하는 데 도움이 될 수 있음.
     * 경쟁 제품
          + 현재 시장에는 다양한 음악 플레이어가 존재함. 예를 들어, VLC Media Player, foobar2000 등이 있음. Winamp의 소스 코드 공개는 이러한 경쟁 제품들과의 차별화를 위한 중요한 전략이 될 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Winamp의 소유주들이 재정적 어려움을 겪고 있음:
          + Winamp의 소유주들이 작년부터 재정적 어려움을 겪고 있으며, 유지 보수를 담당하던 최소 인력을 해고했음.
          + 커뮤니티가 PC용 Winamp 유지 보수를 맡게 될 가능성이 있음.
     * Winamp의 소스 코드 공개에 대한 의문:
          + 소스 코드가 어떤 라이선스로 공개될지 언급되지 않았으며, 이메일 문의를 통해서만 접근 가능함.
          + 소프트웨어가 오래되어 현재는 향수 외에는 큰 가치가 없다고 생각함.
     * Winamp 개발에 대한 회상:
          + 과거 Windows 프로그래머로서 Winamp 같은 소프트웨어를 만드는 기술에 대해 부러움을 느꼈음.
          + 당시에는 고급 학습 자료와 예제가 거의 없었음.
     * HTML로 재구현된 Winamp에 대한 긍정적 반응:
          + HTML로 재구현된 Winamp를 좋아함.
          + WebAmp.org 링크 제공.
     * Winamp 팀에 거의 합류할 뻔한 경험:
          + 약 20년 전 Winamp 팀에 거의 합류할 뻔했음.
          + 당시 Winamp 3를 개발 중이었으며, 이는 현대적인 C++로 거의 완전히 새로 작성된 버전이었음.
          + Winamp 3는 매우 버그가 많았고, 플러그인 프레임워크가 매우 복잡했음.
     * Winamp 소스 코드 공개에 대한 회의적 시각:
          + 발표문의 모호한 언어 때문에 완전히 자유로운 라이선스가 아닐 것 같다고 생각함.
     * 과거에 유출된 Winamp 관련 정보:
          + 몇 년 전에 유출된 정보에 대한 링크 제공.
          + 유출된 정보 링크.
     * Winamp의 유명한 문구:
          + ""It really whips the llama's ass.""라는 유명한 문구 언급.
     * Winamp의 스킨 기능에 대한 칭찬:
          + 클래식 Winamp의 가장 인상적인 기능은 스킨이었음.
          + WebAmp.org에서 클래식 스킨을 감상할 수 있음.
          + 사이트에 좋은 음악도 있음.
     * Winamp 소스 코드 공개에 대한 희망:
          + Winamp 2.x의 소스 코드가 공개되기를 희망함 (3 또는 5가 아닌).
"
"https://news.hada.io/topic?id=14877","OpenAI 퇴사자들: 전 직원들이 말할 수 없는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenAI 퇴사자들: 전 직원들이 말할 수 없는 이유

     * ChatGPT는 말할 수 있지만, OpenAI 직원들은 그렇지 않음
          + 비판 금지 계약에 서명했고, 계약을 위반하면 주식을 포기해야함

OpenAI의 새로운 ChatGPT 4o 출시

     * OpenAI가 새로운 ChatGPT 4o를 출시함
     * 2013년 스파이크 존즈 감독의 영화 ""Her""에 나오는 스칼렛 요한슨이 목소리 연기한 AI 비서와 유사한 목소리를 가짐
     * OpenAI의 CEO인 샘 올트먼이 해당 영화를 언급하며 트윗을 올림

OpenAI의 주요 인사 사임

     * ChatGPT 4o 출시 소식은 OpenAI의 공동 창업자이자 수석 과학자인 일리야 수츠케버와 수퍼얼라인먼트 팀을 이끌던 얀 라이케의 사임 소식에 묻힘
     * 작년에 Future Perfect 50 리스트에 오른 얀 라이케도 함께 사임함
     * 사임은 그렇게 놀라운 일은 아님
          + 수츠케버는 작년 CEO 샘 올트먼의 일시적 해고를 이끈 이사회 반란에 연루되었음
          + 올트먼이 빠르게 CEO 자리로 복귀한 후, 수츠케버는 자신의 행동을 공개적으로 후회하고 올트먼의 복귀를 지지함
          + 하지만 그 이후로 OpenAI의 정책, 정렬, 안전 팀의 다른 구성원들이 떠나는 가운데 수츠케버는 회사에서 대부분 부재했음

전직 직원들의 침묵에 대한 추측

     * 전직 직원들의 침묵이 추측을 불러일으킴
     * 수츠케버는 평범한 사임 메시지를 남김
          + ""OpenAI가 안전하고 유익한 AGI를 만들 것이라 확신한다. 앞으로가 기대된다""라고 말함
     * 라이케는 단순히 ""사임했다""라고만 함
          + 며칠 후 OpenAI가 안전 중심 문화에서 멀어졌다는 우려로 사임했다고 설명함
     * 전직 직원들이 침묵하는 이유에 대해 여러 가지 추측이 있음
          + 강제로 밀려났는지, 작년 가을 올트먼의 잠시 해고에 대한 후폭풍인지, 비밀스럽고 위험한 새 프로젝트에 항의하며 사임한 것인지 등

전직 직원 침묵의 이유

     * 전직 직원들이 침묵하는 이유가 분명히 있음
          + 극도로 제한적인 퇴사 계약서에는 전직 고용주를 평생 비판하지 않는 조항이 포함되어 있음
          + NDA의 존재 자체를 인정하는 것조차 위반임
     * 퇴사 직원이 문서에 서명하지 않거나 위반하면, 회사에서 일하는 동안 받은 지분을 모두 잃을 수 있음
          + 이는 수백만 달러의 가치가 있을 가능성이 높음
     * 다니엘 코코타일로라는 전직 직원은 NDA에 서명하지 않고 그에 따른 거액의 지분을 포기하고 퇴사했음을 공개적으로 확인함
          + 그는 ""AGI 시대에 OpenAI가 책임감 있게 행동할 것이라는 확신을 잃었기 때문""이라고 말함

경쟁이 치열한 실리콘밸리의 NDA 관행

     * 경쟁이 치열한 실리콘밸리에서 NDA 자체는 특이한 것이 아님
     * 그러나 이미 받은 지분을 거부하거나 위반할 경우 위험에 빠뜨리는 것은 특이함
          + OpenAI와 같은 스타트업 직원들에게 지분은 급여보다 훨씬 큰 중요한 보상임
          + 이 잠재적으로 인생을 바꿀 수 있는 돈을 위협하는 것은 전직 직원들을 침묵시키는 매우 효과적인 방법임

OpenAI의 공개성과 투명성에 대한 모순

     * OpenAI는 처음에는 강력한 시스템을 투명하고 책임감 있게 구축하는 데 전념하는 것으로 광고했음
          + 하지만 이제는 안전 문제를 이유로 모델을 오픈 소스로 제공하는 아이디어를 포기함
     * 안전 팀의 가장 경력 있고 존경받는 구성원들을 내보냈음
          + 이는 안전이 정말 OpenAI가 폐쇄적이 된 이유인지에 대한 의구심을 불러일으킴
     * OpenAI의 대변인은 ""현재 또는 전직 직원의 지분을 취소한 적이 없으며, 퇴사 시 서명하지 않더라도 그렇게 하지 않을 것""이라고 말함
          + 이는 이해하고 있던 정책의 변화를 나타낸다고 함

기술과 정책계에서 OpenAI의 특이한 위치

     * OpenAI는 오랫동안 기술과 정책계에서 특이한 위치를 차지해 왔음
          + DALL-E부터 ChatGPT까지 출시하는 것들은 멋지지만, 그 자체로는 종교적 열광을 불러일으키기 어려움
     * OpenAI를 특별하게 만드는 것은 인공 일반 지능(AGI)을 개발하여 인류에게 혜택을 주겠다는 원대한 목표임
          + 직원들 중 많은 이들이 10년 정도 (또는 그 이하)와 수조 달러만 있으면 이 목표를 달성할 수 있다고 믿음
     * OpenAI 자신이 오랫동안 말해왔듯이, 이는 흥미롭지만 위험할 수 있음

책임감 있는 행위자로서의 OpenAI

     * OpenAI는 역사적으로 상업적 유인을 초월하고 모두의 이익을 위해 AGI를 가져오려는 책임감 있는 행위자로 자리매김해 왔음
          + 개발 속도를 늦추거나, 수익 기회를 놓치거나, 외부 감독을 허용해야 하더라도 기꺼이 그렇게 하겠다고 말해왔음
     * OpenAI의 독특한 기업 구조(비영리 단체가 궁극적으로 통제하는 이익 제한 회사)는 책임성을 높이기 위한 것이었음
     * 수츠케버와 라이케 같은 사람들이 눈에 띄는 역할을 맡은 것보다 더 강력한 OpenAI의 사명에 대한 헌신의 신호는 없었음
          + 그들은 안전에 대한 오랜 헌신의 역사를 가진 기술자들로, 필요하다면 OpenAI에 방향을 바꾸라고 요구할 용의가 있어 보였음

OpenAI의 안전 작업에 대한 관심 변화

     * 그들의 출발은 OpenAI가 인공 일반 지능을 구축하려는 목표에서 변화를 예고하는 것은 아님
          + 이는 여전히 목표로 남아 있음
     * 그러나 이는 거의 확실히 OpenAI의 안전 작업에 대한 관심의 변화를 예고함
          + 회사는 수퍼 얼라인먼트 팀을 이끌 사람을 발표하지 않았음
     * OpenAI의 외부 감독과 투명성에 대한 우려가 그다지 깊지 않았음이 분명해짐
          + 외부 감독과 세계가 당신이 하는 일에 역할을 하기를 원한다면, 전직 직원들에게 매우 제한적인 NDA에 서명하게 하는 것은 정확히 그것을 따르는 것이 아님

OpenAI에 대한 실망

     * OpenAI가 AI가 인류에게 진정으로 잘 되고 이로움이 되도록 하는 데 깊이 관심을 갖고 있는 사람들에게 근본적으로 실망스러운 이유가 여기에 있음
          + 회사 지도부는 세상을 바꾸고 싶어하고, 그렇게 할 때 책임을 지고 싶어하며, 세계가 그것을 공정하고 현명하게 하는 방법에 대한 의견을 환영한다고 말함
     * 그러나 실제 돈이 걸려 있을 때(AI 지배 경쟁에서 엄청난 돈이 걸려 있음), 그들은 아마도 세계가 그다지 많은 의견을 내는 것을 의도하지 않았음이 분명해짐
          + 그들의 프로세스는 전직 직원들, 즉 OpenAI 내부에서 무슨 일이 일어나고 있는지 가장 잘 아는 사람들이 세상에 말할 수 없도록 함
     * 웹사이트에는 고상한 이상이 있을지 모르지만, 해고 계약서에는 냉혹한 법률 용어가 가득함
          + 전직 직원들이 ""사임했다""라고 말하는 것으로 제한되는 회사에 대해 책임을 물을 수 있기는 어려움

   ChatGPT의 새로운 귀여운 목소리는 매력적일 수 있지만, 나는 특별히 사랑에 빠지지 않음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 비밀유지 계약을 우회하는 방법
          + 비밀유지 계약을 우회하려면, 관련 직원들이 모여 자신들이 말하고 싶은 모든 내용을 작성하고, 이를 LLM(대규모 언어 모델)로 학습시킨 후 공개하는 방법이 있음. 이는 모델 사용자에게 책임을 돌리는 현재의 법적 논리를 이용한 것임.
     * OpenAI의 비밀유지 계약
          + OpenAI의 전 직원들은 매우 엄격한 비밀유지 및 비방 금지 조항이 포함된 계약을 체결해야 함. 이를 위반하면 수백만 달러에 달하는 주식을 잃을 수 있음.
     * 상황의 심각성
          + 상황이 매우 심각하며, 일부 사람들은 이를 범죄 행위로 간주하고 있음. OpenAI의 행위가 Enron 사건과 비슷하다는 의견도 있음.
     * 법적 조언 필요
          + 캘리포니아 SB 331(침묵하지 않을 권리 법)과 관련된 법적 조언이 필요함. 이 법은 성희롱뿐만 아니라 다른 형태의 부당한 계약에도 적용될 수 있음.
     * 비합리적인 계약
          + 직원들에게 평생 비방 금지 계약을 강요하는 것은 부당함. 이는 법적으로 문제가 될 수 있으며, 이를 해결하려면 용기 있는 사람이 소송을 제기해야 함.
     * AI의 한계
          + AI가 모든 인간 노동을 대체할 수 없다는 의견. 예를 들어, 집을 페인트칠하거나 보일러를 고치는 등의 작업은 AI가 할 수 없다고 봄.
     * 스타트업의 주식 보상
          + 스타트업에서 주식은 중요한 보상 수단임. OpenAI의 직원들은 높은 급여와 주식을 받으며, NDA를 요구받음. 이는 애플에서도 비슷한 사례가 있음.
     * Jan Leike에 대한 존경
          + Jan Leike에게 추가적인 존경을 표함.
     * 계약의 유효성
          + 계약이 유효하려면 새로운 주식 보상이 제공되어야 함. 기존의 보상으로 새로운 계약을 강요하는 것은 부당함.
     * 계약의 사적 성격
          + 계약은 당사자 간의 문제이며, 법적 문제가 있다면 법원에서 해결해야 함. 모든 문제를 공개적으로 다루는 것은 피해야 함.
"
"https://news.hada.io/topic?id=14885","HIV 생애 주기 – 애니메이션 및 내레이션 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HIV 생애 주기 – 애니메이션 및 내레이션 [비디오]

HIV 생애 주기 - 내레이션

     * HIV 감염이 어떻게 발생하는가?
          + 이 분자 애니메이션은 HIV가 T 세포를 감염시키고 그 세포를 바이러스 공장으로 변환시키는 과정을 묘사함.
          + 미국 전역의 수십 명의 HIV 연구자들과 협력하여 완성된 이 영화는 Science of HIV 프로젝트의 일부임.
          + 유타 대학교 CHEETAH 센터와 NIGMS의 지원을 받음.
          + 이 애니메이션을 다운로드하고 공유할 수 있으며, 더 많은 정보를 위해 Science of HIV 웹사이트를 방문할 것을 권장함.
     * 애니메이션 제작진
          + 애니메이션: Janet Iwasa와 Grace Hsu (유타 대학교 생화학과)
          + 음악: Joshua Roman 작곡 및 연주
          + 음악 녹음: Jesse Lewis (Immersive Music Project)

Vimeo 서비스 소개

     * Vimeo 가입 및 로그인
          + Vimeo에 가입하거나 로그인하여 동영상을 업로드, 라이브 스트리밍, HD로 동영상 제작 가능.
          + Google 계정으로 로그인 가능.
          + 가입 시 서비스 약관, 개인정보 보호정책 및 쿠키 정책에 동의해야 함.
     * 사용 사례
          + 기업, 소규모 비즈니스, 창의적 전문가, 피트니스, 신앙, 교육, 전자상거래, 부동산 등 다양한 분야에서 활용 가능.
     * 제품 및 기능
          + 인터랙티브 비디오, 온라인 비디오 편집기, 자동 자막 생성, 웨비나 소프트웨어, 가상 이벤트, 비디오 플레이어, 비디오 라이브러리 등 다양한 기능 제공.
          + 비디오 제작 도구, 라이브 스트리밍, 화면 녹화, 비디오 프라이버시, 비디오 협업, 비디오 마케팅, 수익화, 비디오 분석, 비디오 호스팅 등 지원.
     * 리소스 및 지원
          + 도움말 센터, 블로그, 고객 사례, 비디오 학교, OTT 리소스, 개발자 지원, 파트너 프로그램, Vimeo 전문가 가입, 가이드라인 제공.
          + macOS, iOS, Android용 Vimeo 앱, Shopify 및 Zoom용 Vimeo 등 다양한 플랫폼 지원.
     * 가격 및 업로드
          + 다양한 가격 옵션 제공.
          + 동영상 업로드 및 주문형 콘텐츠 제공.
     * 회사 정보
          + Vimeo.com, Inc.의 모든 권리 보유.
          + 약관, 개인정보 보호정책, 미국 주 개인정보 보호정책, 저작권, 쿠키 정책 등 제공.

GN⁺의 의견

     * HIV 연구의 중요성
          + HIV 연구는 전 세계적으로 중요한 공중 보건 문제를 해결하는 데 기여함. 이 애니메이션은 HIV의 복잡한 감염 과정을 시각적으로 이해하는 데 큰 도움이 됨.
     * Vimeo의 유용성
          + Vimeo는 고품질의 비디오 제작과 공유를 위한 다양한 도구와 기능을 제공하여 창작자와 기업 모두에게 유용함. 특히, 교육 및 마케팅 목적으로 활용하기에 적합함.
     * 기술 도입 시 고려사항
          + 새로운 기술이나 플랫폼을 도입할 때는 사용자의 필요와 목적에 맞는 기능을 제공하는지, 비용 대비 효율성이 높은지 등을 고려해야 함. Vimeo는 다양한 기능을 제공하지만, 사용자의 특정 요구에 맞는지 검토가 필요함.
     * 비판적 시각
          + Vimeo의 서비스는 매우 유용하지만, 다른 비디오 플랫폼과 비교했을 때 가격이 다소 높을 수 있음. 사용자는 자신의 예산과 필요에 맞는 플랫폼을 선택하는 것이 중요함.
     * 관련 제품 추천
          + 비슷한 기능을 제공하는 다른 플랫폼으로는 YouTube, Dailymotion, Wistia 등이 있음. 각 플랫폼의 장단점을 비교하여 최적의 선택을 하는 것이 좋음.

        Hacker News 의견

해커뉴스 댓글 모음 요약

     * Is there a word for feeling fascination and discomfort at the same time? These little molecular machines are so sinister.
          + 분자 기계들이 매혹적이면서도 불편함을 동시에 느끼게 하는 단어가 있는지 궁금함.
     * I completely believe in evolution ........ but sometimes I find myself wondering how did evolution allow for something so intentionally diabolical to come around at the MOLECULAR level.
          + 진화를 완전히 믿지만, 분자 수준에서 이렇게 의도적으로 악랄한 것이 어떻게 진화했는지 궁금함.
     * Is there a collection of videos like this anywhere online? Or what would be a good search term?
          + 이런 종류의 비디오를 모아놓은 곳이 있는지, 아니면 좋은 검색어가 무엇인지 궁금함.
     * I feel like I see a video like this once a year. There's got to be hundreds of them showing different molecular or biological interactions.
          + 이런 비디오를 1년에 한 번씩 보는 것 같음. 다양한 분자나 생물학적 상호작용을 보여주는 비디오가 수백 개는 있을 것 같음.
     * The music (by Joshua Roman) for this video is truly wonderful.
          + 이 비디오의 음악(조슈아 로만 작곡)이 정말 훌륭함.
     * Did I miss something or this infographic missed on how the viral receptors are placed on the envelope.
          + 내가 놓친 건지, 아니면 이 인포그래픽이 바이러스 수용체가 어떻게 배치되는지 설명을 빠뜨린 건지 궁금함.
     * I found a playlist of how to make these kind of animation, taught by the author.
          + 저자가 가르치는 이런 종류의 애니메이션을 만드는 방법을 담은 재생 목록을 찾음.
          + YouTube 재생 목록 링크
     * ... that music though ...
          + 그 음악은 정말...
"
"https://news.hada.io/topic?id=14897","컴퓨터 아키텍처, 운영 체제 및 언어에 관한 클래식 Usenet 게시물","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                컴퓨터 아키텍처, 운영 체제 및 언어에 관한 클래식 Usenet 게시물

컴퓨터 아키텍처

     * 128비트 프로세서의 전망 (John R. Mashey)
          + 128비트 프로세서의 가능성과 필요성에 대한 논의
          + 현재 64비트 프로세서의 한계와 128비트로의 전환 필요성
     * 64비트 프로세서: 역사와 이유 (John R. Mashey)
          + 64비트 프로세서의 발전 과정과 그 필요성
          + 32비트에서 64비트로의 전환 이유
     * AMD64 (Linus Torvalds; Terje Mathisen)
          + AMD64 아키텍처의 특징과 장점
          + 64비트 프로세서의 성능 향상
     * 비동기 논리 (Mitch Alsup)
          + 비동기 논리의 개념과 장점
          + 동기 논리와의 비교
     * 원자적 트랜잭션 (Mitch Alsup; Terje Mathisen)
          + 원자적 트랜잭션의 중요성과 구현 방법
          + 데이터 일관성을 유지하는 방법
     * BCD 명령어: RISC와 CISC (John R. Mashey)
          + BCD 명령어의 개념과 RISC, CISC 아키텍처에서의 차이점
          + BCD 명령어의 사용 사례
     * 빅 데이터 (John R. Mashey, Larry McVoy)
          + 빅 데이터의 정의와 중요성
          + 빅 데이터를 처리하는 기술과 도구
     * 바이트 주소 지정 (John R. Mashey)
          + 바이트 주소 지정의 개념과 필요성
          + 메모리 관리에서의 바이트 주소 지정의 역할
     * 캐시 (John R. Mashey; John D. McCalpin)
          + 캐시 메모리의 개념과 작동 원리
          + 캐시 메모리의 성능 향상 방법
     * 캐시에서의 패리티와 ECC 사용 (John R. Mashey)
          + 캐시 메모리에서의 패리티와 ECC의 역할
          + 데이터 무결성을 유지하는 방법
     * 캐시 스래싱 (Andy Glew; Linus Torvalds; Terje Mathisen)
          + 캐시 스래싱의 개념과 문제점
          + 캐시 스래싱을 방지하는 방법
     * 캐리 비트; 아키텍트의 함정 (John R. Mashey)
          + 캐리 비트의 개념과 중요성
          + 아키텍처 설계에서의 함정과 해결 방법
     * CMOS 논리 속도 (Mitch Alsup)
          + CMOS 논리의 개념과 속도 향상 방법
          + CMOS 논리의 장점과 단점
     * CMOV (Terje Mathisen)
          + CMOV 명령어의 개념과 사용 사례
          + CMOV 명령어의 성능 향상 효과
     * CPU 기능 경제학 (John R. Mashey)
          + CPU 기능의 경제적 측면
          + 기능 추가와 성능 향상의 비용 분석
     * CPU 전력 사용 (Mitch Alsup)
          + CPU의 전력 사용량과 효율성
          + 전력 사용을 줄이는 방법
     * 디버깅을 돕는 하드웨어 (John R. Mashey)
          + 디버깅을 돕는 하드웨어 도구와 기술
          + 디버깅 효율성을 높이는 방법
     * DRAM 캐시 (Mitch Alsup; Terje Mathisen)
          + DRAM 캐시의 개념과 작동 원리
          + DRAM 캐시의 성능 향상 방법
     * DRAM 지연 시간 (Mitch Alsup)
          + DRAM의 지연 시간과 그 영향
          + 지연 시간을 줄이는 방법
     * 엔디안 (John R. Mashey)
          + 엔디안의 개념과 종류
          + 엔디안 변환의 필요성과 방법
     * 별도의 부동 소수점 레지스터 (John R. Mashey)
          + 부동 소수점 연산을 위한 별도의 레지스터의 필요성
          + 성능 향상 효과
     * 부동 소수점 예외 수정 (John Mashey; Terje Mathisen)
          + 부동 소수점 예외 처리 방법
          + 예외 수정의 중요성
     * 내결함성 (John R. Mashey)
          + 내결함성의 개념과 중요성
          + 내결함성을 구현하는 방법
     * H264 CABAC (Maynard Handley; Terje Mathisen)
          + H264 CABAC의 개념과 작동 원리
          + 비디오 압축에서의 역할
     * Merced/IA64 (John R. Mashey)
          + Merced/IA64 아키텍처의 특징과 장점
          + 성능 향상 효과
     * 클럭당 명령어 수 (John R. Mashey)
          + 클럭당 명령어 수의 개념과 중요성
          + 성능 향상 방법
     * IBM 801 (Greg Pfister)
          + IBM 801 아키텍처의 특징과 역사
          + 성능 향상 효과
     * 왜 IBM PC는 8088을 사용했는가 (Bill Katz; John R. Mashey)
          + IBM PC가 8088을 선택한 이유
          + 8088의 장점과 단점
     * 구간 산술 (James B. Shearer)
          + 구간 산술의 개념과 사용 사례
          + 성능 향상 효과
     * Lisp 지원 (Eliot Miranda; John Mashey)
          + Lisp 언어의 특징과 지원 방법
          + 성능 향상 효과
     * LL/SC (John Mashey; Terje Mathisen)
          + LL/SC 명령어의 개념과 사용 사례
          + 성능 향상 효과
     * 메시지 전달 대 공유 메모리; SGI Origin 머신 (John R. Mashey, John McCalpin)
          + 메시지 전달과 공유 메모리의 차이점
          + SGI Origin 머신의 특징
     * MIPS16 (John R. Mashey)
          + MIPS16 아키텍처의 특징과 장점
          + 성능 향상 효과
     * MIPS 프로세서의 인터럽트 (John R. Mashey)
          + MIPS 프로세서의 인터럽트 처리 방법
          + 성능 향상 효과
     * MIPS 예외 (John Mashey)
          + MIPS 프로세서의 예외 처리 방법
          + 성능 향상 효과
     * 정렬되지 않은 데이터 (John Levine; Mitch Alsup; Terje Mathisen)
          + 정렬되지 않은 데이터의 문제점과 해결 방법
          + 성능 향상 효과
     * 다중 프로세서 머신 용어 (John R. Mashey)
          + 다중 프로세서 머신에서 사용되는 용어와 개념
          + 성능 향상 효과
     * MVC 명령어 (John R. Mashey, Allen J. Baum)
          + MVC 명령어의 개념과 사용 사례
          + 성능 향상 효과
     * N 비트 CPU의 정의 (John R. Mashey)
          + N 비트 CPU의 개념과 정의
          + 성능 향상 효과
     * Opteron STREAM 벤치마크 최적화 (Terje Mathisen)
          + Opteron 프로세서의 STREAM 벤치마크 최적화 방법
          + 성능 향상 효과
     * 페이지 크기 (Linus Torvalds)
          + 페이지 크기의 개념과 중요성
          + 성능 향상 효과
     * 펜티엄 4 (Linus Torvalds; Terje Mathisen)
          + 펜티엄 4 프로세서의 특징과 장점
          + 성능 향상 효과
     * 단어 크기가 2의 거듭제곱인 이유 (John R. Mashey)
          + 단어 크기가 2의 거듭제곱인 이유와 중요성
          + 성능 향상 효과
     * PowerPC 페이지 테이블 (Greg Pfister; Linus Torvalds)
          + PowerPC 페이지 테이블의 개념과 작동 원리
          + 성능 향상 효과
     * 프리페치 (Terje Mathisen)
          + 프리페치의 개념과 중요성
          + 성능 향상 효과
     * 쿼드 정밀도 (Robert Corbett)
          + 쿼드 정밀도의 개념과 사용 사례
          + 성능 향상 효과
     * 레지스터 윈도우 (John Mashey)
          + 레지스터 윈도우의 개념과 중요성
          + 성능 향상 효과
     * 레지스터 파일 크기 (Mitch Alsup)
          + 레지스터 파일 크기의 개념과 중요성
          + 성능 향상 효과
     * REP MOVS (Terje Mathisen)
          + REP MOVS 명령어의 개념과 사용 사례
          + 성능 향상 효과
     * 레지스터 리네이밍 (John R. Mashey)
          + 레지스터 리네이밍의 개념과 중요성
          + 성능 향상 효과
     * 결과 전달 (Terje Mathisen)
          + 결과 전달의 개념과 중요성
          + 성능 향상 효과
     * RISC 대 CISC (John R. Mashey)
          + RISC와 CISC 아키텍처의 차이점과 장단점
          + 성능 향상 효과
     * ROM 속도 (Mitch Alsup)
          + ROM의 속도와 성능 향상 방법
          + 성능 향상 효과
     * 자기 수정 코드 (John R. Mashey, John Reiser, Dennis Ritchie)
          + 자기 수정 코드의 개념과 사용 사례
          + 성능 향상 효과
     * 직접 매핑 대 집합 연관 캐시 (John R. Mashey)
          + 직접 매핑 캐시와 집합 연관 캐시의 차이점
          + 성능 향상 효과
     * 부호 있는 나눗셈 (Robert Corbett)
          + 부호 있는 나눗셈의 개념과 사용 사례
          + 성능 향상 효과
     * 알고리즘 분석 현재 프로세서 모델로 변경해야 함 (John R. Mashey)
          + 알고리즘 분석 방법의 변화 필요성
          + 성능 향상 효과
     * 소프트웨어 파이프라이닝 (Linus Torvalds)
          + 소프트웨어 파이프라이닝의 개념과 중요성
          + 성능 향상 효과
     * 소프트웨어로 채워진 TLB (John R. Mashey, John F Carr)
          + 소프트웨어로 채워진 TLB의 개념과 작동 원리
          + 성능 향상 효과
     * SPEC 벤치마크 스위트 (John R. Mashey)
          + SPEC 벤치마크 스위트의 개념과 중요성
          + 성능 향상 효과
     * SpecFP2000 (Greg Lindahl; John D. McCalpin; Wesley Jones)
          + SpecFP2000 벤치마크의 개념과 중요성
          + 성능 향상 효과
     * SpecFP 대역폭 (John D. McCalpin)
          + SpecFP 대역폭의 개념과 중요성
          + 성능 향상 효과
     * SpecFP와 시간-왜곡 최적화 (Greg Lindahl; John D. McCalpin)
          + SpecFP와 시간-왜곡 최적화의 개념과 중요성
          + 성능 향상 효과
     * SRAM 주 메모리 (John R. Mashey)
          + SRAM 주 메모리의 개념과 중요성
          + 성능 향상 효과
     * 스택 머신 (John R. Mashey)
          + 스택 머신의 개념과 중요성
          + 성능 향상 효과
     * 스트리밍 데이터 (John R. Mashey)
          + 스트리밍 데이터의 개념과 중요성
          + 성능 향상 효과
     * Tera 멀티스레드 아키텍처 (Preston Briggs, John R. Mashey)
          + Tera 멀티스레드 아키텍처의 개념과 중요성
          + 성능 향상 효과
     * 멀티스레드 CPU (John R. Mashey)
          + 멀티스레드 CPU의 개념과 중요성
          + 성능 향상 효과
     * TLB (John Mashey)
          + TLB의 개념과 중요성
          + 성능 향상 효과
     * 전송 게이트 (Mitch Alsup)
          + 전송 게이트의 개념과 중요성
          + 성능 향상 효과
     * VAX (John Mashey)
          + VAX 아키텍처의 개념과 중요성
          + 성능 향상 효과
     * 벡터 인터럽트 (John Mashey)
          + 벡터 인터럽트의 개념과 중요성
          + 성능 향상 효과
     * 가상 머신 (John R. Mashey)
          + 가상 머신의 개념과 중요성
          + 성능 향상 효과
     * Wiz (John Mashey)
          + Wiz의 개념과 중요성
          + 성능 향상 효과
     * 제로 레지스터 (John R. Mashey)
          + 제로 레지스터의 개념과 중요성
          + 성능 향상 효과

프로그래밍 언어

     * Ada (Henry Spencer)
          + Ada 언어의 개념과 특징
          + 사용 사례와 장점
     * Aliasing (Terje Mathisen)
          + Aliasing의 개념과 문제점
          + 해결 방법
     * Alloca (Dennis Ritchie)
          + Alloca 함수의 개념과 사용 사례
          + 성능 향상 효과
     * ANSI C의 부호 없는 문제 (Chris Torek)
          + ANSI C에서 부호 없는 변수의 문제점
          + 해결 방법
     * 배열 경계 검사 (Henry Spencer)
          + 배열 경계 검사의 중요성과 방법
          + 성능 향상 효과
     * 나쁜 C 매크로 (Jamie Lokier)
          + 나쁜 C 매크로의 예와 문제점
          + 해결 방법
     * 다차원 배열 캐싱 (Terje Mathisen)
          + 다차원 배열 캐싱의 개념과 중요성
          + 성능 향상 효과
     * 이름으로 호출 (John R. Mashey; Dennis Ritchie; Robert Corbett; William B. Clodius)
          + 이름으로 호출의 개념과 사용 사례
          + 성능 향상 효과
     * 이진 호출 규약 (Chris Torek)
          + 이진 호출 규약의 개념과 중요성
          + 성능 향상 효과
     * C (Dennis Ritchie; Douglas A. Gwyn; John A. Gregor, Jr.; Linus Torvalds)
          + C 언어의 개념과 특징
          + 사용 사례와 장점
     * C 호출 규약 (Dennis Ritchie)
          + C 호출 규약의 개념과 중요성
          + 성능 향상 효과
     * C ""extern"" (Dennis Ritchie)
          + C 언어의 ""extern"" 키워드의 개념과 사용 사례
          + 성능 향상 효과
     * C 프로토타입 (Chris Torek)
          + C 프로토타입의 개념과 중요성
          + 성능 향상 효과
     * C 시프트 (Dennis Ritchie)
          + C 언어의 시프트 연산자의 개념과 사용 사례
          + 성능 향상 효과
     * C99 전처리기 (Al Viro)
          + C99 전처리기의 개념과 중요성
          + 성능 향상 효과
     * C의 == 연산자 (Linus Torvalds)
          + C 언어의 == 연산자의 개념과 사용 사례
          + 성능 향상 효과
     * COBOL (Henry Spencer; Morten Reistad; Terje Mathisen)
          + COBOL 언어의 개념과 특징
          + 사용 사례와 장점
     * 컴파일러 설계 (Henry Spencer)
          + 컴파일러 설계의 개념과 중요성
          + 성능 향상 효과
     * 컴파일러 최적화 (Andy Glew; Greg Lindahl; Linus Torvalds; Terje Mathisen)
          + 컴파일러 최적화의 개념과 중요성
          + 성능 향상 효과
     * COME FROM (Robert Corbett)
          + COME FROM 명령어의 개념과 사용 사례
          + 성능 향상 효과
     * C의 ""const"" 한정자 (Chris Torek; Linus Torvalds)
          + C 언어의 ""const"" 한정자의 개념과 사용 사례
          + 성능 향상 효과
     * 반변성 (Henry Spencer)
          + 반변성의 개념과 중요성
          + 성능 향상 효과
     * Cray 정수 (Dennis Ritchie)
          + Cray 정수의 개념과 사용 사례
          + 성능 향상 효과
     * 디버거 (Douglas A. Gwyn)
          + 디버거의 개념과 중요성
          + 성능 향상 효과
     * 소수점 연산 (Glen Herrmannsfeldt; Mitch Alsup; Terje Mathisen; Wilco Dijkstra; hack@watson.ibm.com)
          + 소수점 연산의 개념과 중요성
          + 성능 향상 효과
     * 비정규화 (Terje Mathisen)
          + 비정규화의 개념과 중요성
          + 성능 향상 효과
     * **널 참

   Maximum tokens exceeded
"
