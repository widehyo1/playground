"https://news.hada.io/topic?id=15015","Diffusion Models - 확산 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Diffusion Models - 확산 모델

생성 모델링

     * 생성 모델링의 기본 문제는 알려지지 않은 분포 x∼p(x)에서 샘플 집합을 주어졌을 때, 그 분포에서 새로운 샘플을 생성하는 것임.

  1.1 노이즈 제거 확산 모델

     * 데이터 포인트를 정상 분포로 결정론적으로 매핑하는 대신, 무작위 노이즈를 섞어 포인트를 확률적으로 매핑하는 방법을 사용함.
     * 이 방법은 처음에는 이상하게 보일 수 있지만, 여러 단계에 걸쳐 깨끗한 데이터 포인트에 소량의 노이즈를 섞어 순수한 노이즈처럼 보이게 함.
     * 각 단계에서 노이즈가 섞인 데이터 포인트를 보면 이전 단계에서 데이터 포인트가 어디에 있었는지 대략적으로 알 수 있음.
     * 이 과정을 역으로 학습하면 p(x) 분포에서 샘플을 생성할 수 있음.
     * 이는 물리적 확산 과정과 유사함.

DDP 모델

     * DDP 모델은 노이즈 제거 확산 확률 모델(Denoising Diffusion Probabilistic Models)의 약자임.
     * 새로운 발전은 이 논문의 언어와 수학을 기반으로 함.

  2.1 노이즈 추가 및 제거

     * 입력 이미지 x0를 단위 정상 분포의 포인트로 매핑하기 위해 t=1,2,…,T 시간 단계에 걸쳐 노이즈를 점진적으로 추가하는 전방 확산 과정을 사용함.
     * 각 시간 단계는 이전 이미지에 소량의 무작위 노이즈를 섞어 새로운 이미지를 생성함.
     * 이 과정은 반복적 성질을 가지며, 각 단계는 이전 시간 단계에만 의존하고, 추가된 노이즈는 이전 노이즈 샘플과 독립적임.
     * 역과정을 학습하여 노이즈가 섞인 이미지 xt에서 이전 단계의 덜 노이즈가 섞인 버전 xt-1의 분포를 예측함.

  2.2 노이즈 제거 학습

     * q(xt−1∣xt)는 매우 적은 양의 노이즈에 대해 대략적으로 가우시안임.
     * 이는 통계 물리학의 오래된 결과임.
     * 이를 통해 역 분포를 학습할 수 있음.
     * KL 발산을 사용하여 모든 훈련 예제 x0에 대해 q(xt−1∣xt,x0)와 pθ(xt−1∣xt) 간의 차이를 최소화함.
     * 최종 손실 함수는 노이즈 예측 문제로 단순화됨.

  2.3 샘플링

     * 노이즈 추정 모델 ϵθ(xt,t)를 학습한 후, 이를 사용하여 이미지 x0를 샘플링할 수 있음.
     * 순수 노이즈 이미지 xT∼N(0,I)를 샘플링하고, T에서 1까지의 시간 단계에 대해 노이즈를 예측하고, 예측된 노이즈를 사용하여 노이즈가 제거된 이미지를 샘플링함.

  2.4 요약 및 예제

     * 이미지 데이터셋의 기본 분포를 학습하고, 전방 노이즈 추가 과정을 정의하여 이미지 x0를 순수 노이즈 xT로 점진적으로 변환함.
     * 역 과정을 학습하여 xt에서 xt-1의 분포를 예측함.
     * KL 발산을 사용하여 학습한 분포가 데이터셋의 알려진 분포와 최대한 가깝도록 보장함.
     * 최종적으로 노이즈 예측 문제로 단순화함.

발전

  3.1 빠른 생성

     * 초기 확산 모델의 주요 단점은 생성 속도였음.
     * 이후 많은 기술이 개발되어 생성 속도를 높였으며, 일부는 사전 학습된 모델에 바로 사용할 수 있고, 다른 일부는 새로운 모델을 학습해야 함.

    스코어 매칭 및 빠른 샘플러

     * 확산 모델은 미분 방정식과 놀라운 연결을 가지고 있어, 이를 통해 많은 빠른 샘플러가 개발됨.
     * 노이즈 방향을 예측하는 것은 전방 과정의 로그 가능도의 그래디언트와 동일함.
     * 이는 스코어 기반 모델의 기초를 형성하며, 노이즈가 섞인 데이터셋의 스코어를 학습하고, 스코어 필드를 따라 새로운 샘플을 생성함.

GN⁺의 의견

    1. 확산 모델의 이해: 확산 모델은 이미지 생성뿐만 아니라 애니메이션, 비디오 생성, 3D 모델링, 단백질 구조 예측, 로봇 경로 계획 등 다양한 분야에 응용될 수 있음.
    2. 학습 과정의 복잡성: 확산 모델의 학습 과정은 복잡하지만, 이를 통해 매우 정교한 이미지를 생성할 수 있음.
    3. 빠른 생성 기술: 빠른 생성 기술은 확산 모델의 실용성을 크게 향상시킴.
    4. 스코어 기반 모델: 스코어 기반 모델은 확산 모델과 유사한 방식으로 작동하며, 샘플링 속도를 높이는 데 기여함.
    5. 기술 도입 시 고려 사항: 확산 모델을 도입할 때는 학습 시간과 계산 자원, 모델의 복잡성 등을 고려해야 함.

  Hacker News 의견

     * 확산 모델이 점수 매칭 이론보다 먼저 나왔음을 알게 되었음. OpenAI가 2억 5천만 개의 이미지를 훈련할 때 이론적 설명이 부족했음에도 도전적인 시도였음.
     * 훈련 루프가 잘못된 것 같음. x0와 eps가 xt의 표현에 사용되지 않아 무작위 노이즈를 예측하는 것처럼 보임.
     * 확산 변환기를 위한 최고의 Apache 또는 MIT 라이선스 파이썬 라이브러리를 찾고 있음.
     * 공유해줘서 감사함. 확산 모델이 어떻게 작동하는지에 대한 통찰을 얻었음. 무작위성이 강력함. 이제 적절하지 않은 언어로 코딩해볼 시간임.
     * 댓글을 읽는 사람들에게 요약할 내용이 많지 않음. 이 게시물이 안정적 확산의 요약임.
     * 2022년에 그림을 배우다가 Stable Diffusion 같은 AI 예술 모델의 등장에 놀랐음. 컴퓨터가 자신보다 더 나은 예술가가 되었음. AI가 창의적 작업에 더 많이 침범할수록 이를 모두 없애고 싶어짐.
"
"https://news.hada.io/topic?id=15019","미사일 및 드론 공격으로부터 보호하는 Home Assistant 활용 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               미사일 및 드론 공격으로부터 보호하는 Home Assistant 활용 사례

전쟁 안전

     * 2022년 러시아는 우크라이나를 전면 침공하여 대량 학살 전쟁을 벌였음.
     * 우크라이나는 매일 핵무기를 제외한 모든 종류의 무기에 의해 공격받고 있음.
     * Home Assistant는 안전을 유지하고 다가오는 위협에 대해 알림을 제공함.

  공습 경보 모니터링

     * Home Assistant는 우크라이나 전역의 공습 경보 시스템을 모니터링하고 안전 센서를 작동시킴.
     * 위험이 발생하면 중요한 알림을 보내고 스마트 스피커로 메시지를 발표함.
     * 거리에서도 공습 경보가 울리지만, 자동화된 알림 시스템을 통해 집에서도 경고를 받을 수 있음.

id: air_siren_kyiv
alias: 'Alert: Air Siren in Kyiv'
description: Air Alert announcement when we are in Kyiv. Sends critical notifications and announces on speakers.
trigger:
  - platform: state
    entity_id: binary_sensor.alerts_kyiv_air
    to: 'on'
    from: 'off'
    variables:
      title: Air Alert goes off!
  - platform: state
    entity_id: binary_sensor.alerts_kyiv_air
    to: 'off'
    from: 'on'
    variables:
      title: It is safe now!
condition:
  - alias: Someone is in Kyiv
    condition: state
    entity_id: sensor.family_in_kyiv
    state: 'on'
action:
  - service: script.announcement
    data:
      title: '{{ title }}'
      force_speak: true
      notify_data:
        group: air-alerts
        push:
          sound:
            name: default
            critical: 1
            volume: 0.75

  모니터링 채널 스크래핑

     * 다양한 텔레그램 채널을 통해 공격 상황을 모니터링함.
     * 직접 채널을 확인하는 대신 Home Assistant를 통해 자동화함.
     * HA Multiscrape 커스텀 통합을 사용하여 여러 센서를 한 번에 스크래핑함.

multiscrape:
  - name: War Monitor
    resource: https://t.me/s/war_monitor
    scan_interval: 5
    list_separator: '|||'
    binary_sensor:
      - unique_id: imminent_attack_in_war_monitor
        name: Imminent Attack in War Monitor
        icon: mdi:airplane-clock
        device_class: safety
        select_list: '.js-message_text'
        value_template: >-
          {% set message = value.split(""|||"") | last | lower %}
          {{ ""зліт"" in message and ""бортів"" in message and ""ту-95"" in message }}
        attributes:
          - name: latest_message
            select_list: '.js-message_text'
            value_template: ""{{ value.split('|||') | last }}""

  임박한 위험 모니터링

     * Tu-95 폭격기가 미사일 발사 지점으로 이동하는 데 약 3시간이 걸림.
     * 미사일이 발사되면 키예프까지 도달하는 데 1-2시간이 소요됨.
     * 저녁에 폭격기가 이륙하면 대규모 미사일 공격이 예상됨.

alias: 'Alert: Imminent Attack by Strategic Bombers'
description: Send a notification when Tu-95 strategic bombers take off from Russian airfields. This means an attack by cruise missiles is imminent. Prepare a hideout.
trigger:
  - platform: state
    entity_id:
      - binary_sensor.imminent_attack_in_war_monitor
      - binary_sensor.imminent_attack_in_operinform
    from: 'off'
    to: 'on'
action:
  - service: script.announcement
    data:
      service: notify.all
      speak: false
      notify: true
      title: 'Bombers take off 🛫'
      messages:
        - '{{ trigger.to_state.attributes.latest_message }}'

  직접적인 위험 경고

     * 공격이 발생하면 피난처로 갈지, 잠을 잘지 결정해야 함.
     * 대부분의 사람들은 피난처로 가지만, 위험을 계산하여 잠을 자는 경우도 있음.
     * 키예프나 특정 지역 이름과 ""경고"", ""안전한 장소에 있어야 함"" 등의 키워드를 감지하는 센서가 있음.

multiscrape:
  - name: War Monitor
    resource: https://t.me/s/war_monitor
    scan_interval: 5
    list_separator: '|||'
    binary_sensor:
      - unique_id: danger_in_war_monitor
        name: Danger in War Monitor
        icon: mdi:rocket-launch
        device_class: safety
        select_list: '.js-message_text'
        value_template: >-
          {% set message = value.split(""|||"") | last | lower %}
          {% set in_kyiv = ""київ"" in message or ""святошин"" in message %}
          {% set danger_now = ""уважно"" in message
            or ""швидкісна ціль"" in message
            or ""подалі від зовнішніх стін"" in message
            or ""безпечних місцях"" in message
          %}
          {{ danger_now and in_kyiv }}
        attributes:
          - name: latest_message
            select_list: '.js-message_text'
            value_template: ""{{ value.split('|||') | last }}""

alias: 'Alert: Danger in Kyiv'
description: Danger of missile/drone strike in Kyiv RIGHT NOW. Critical alert to hide immediately.
trigger:
  - platform: state
    entity_id:
      - binary_sensor.danger_in_war_monitor
      - binary_sensor.danger_in_operinform
    from: 'off'
    to: 'on'
action:
  - alias: Send a critical notification
    service: script.announcement
    data:
      service: notify.all
      speak: false
      notify: true
      title: Direct Danger ⚠️
      messages:
        - '{{ trigger.to_state.attributes.latest_message }}'
      notify_data:
        group: air-alerts
        push:
          sound:
            name: default
            critical: 1
            volume: 1
  - variables:
      messages:
        - Увага! Пряма загроза удару!
        - Увага загроза удару по Києву!
        - Увага! Негайно перейдіть до сховку!
        - Увага! Негайно сховайтесь!
        - Увага! Пряма загроза!
        - Увага! Негайно сховайтесь!
        - Увага! Атака на Київ!
  - service: media_player.volume_set
    entity_id:
    data:
      volume_level: 0.6
    target:
      device_id: media_player.bedroom_homepod
  - alias: Speak in Bedroom
    service: script.announcement
    data:
      speak: true
      speaker: media_player.bedroom_homepod
      notify: false
      force_speak: true
      messages: '{{ messages }}'
  - delay:
      hours: 2

GN⁺의 의견

     * 기술적 통합의 중요성: Home Assistant와 같은 자동화 시스템을 통해 실시간으로 위협을 모니터링하고 대응할 수 있는 능력은 현대 전쟁 상황에서 매우 중요함.
     * 심리적 스트레스: 지속적인 위협 속에서 생활하는 것은 큰 심리적 스트레스를 유발할 수 있음. 이러한 자동화 시스템이 일부 스트레스를 줄여줄 수 있음.
     * 기술의 한계: 자동화 시스템이 모든 상황을 완벽하게 대처할 수는 없음. 기술적 오류나 오작동이 발생할 수 있음.
     * 대체 솔루션: 유사한 기능을 제공하는 다른 오픈소스 프로젝트나 상용 솔루션도 고려해볼 만함. 예를 들어, IFTTT나 Zapier와 같은 서비스도 유사한 자동화 기능을 제공함.
     * 보안 문제: 이러한 자동화 시스템이 해킹되거나 오작동할 경우, 잘못된 정보가 전달될 수 있음. 보안 강화가 필요함.

   🇺🇦💙💛💪🌟🙌🌍✨

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 이 시스템의 존재는 동시에 매력적이면서도 무서운 일임. YAML을 많이 작성할 때는 보통 테스트 환경에서 먼저 테스트를 함. 하지만 여기서 YAML의 버그는 사람들의 생명에 직접적인 영향을 줄 수 있음.
     * 우크라이나의 모든 지역에서 공습 경보의 수와 지속 시간, 미디어에 보고된 폭발 수에 대한 통계를 보려면 이 링크를 확인하면 됨. 화면 하단의 모래시계 버튼을 클릭한 후 시간 기간별로 필터링할 수 있음.
     * 진짜 문제는 위험의 성격을 자세히 설명하는 공식 API가 없다는 것임. 공습 무기의 유형이나 속도, 목표 도달 시간을 알아내기 위해 텔레그램을 스크랩할 필요가 없어야 함. 참고로, Kropyva도 확인해보길 권장함. 이는 포격을 위한 Uber와 같음.
     * Home Assistant에는 우크라이나 경보 통합 기능이 내장되어 있음. 이는 전국적인 공습 경보 시스템을 모니터링하고 HA의 안전 센서를 전환함. HA 커뮤니티에 대해 잘 모르지만, 이 플러그인에 영향을 미치는 새로운 커밋에 대해 매우 신중해야 함.
     * 이 시스템의 존재는 동시에 소름 끼치고 영감을 줌.
     * Home Assistant의 흥미로운 사용 사례임. 다음 섹션에서 가동 시간 모니터를 언급했는데, 이를 유지하기 위해 어떤 것을 사용하는지 궁금함. UPS나 배터리 백업일 가능성이 높음.
     * 기술을 사용하여 삶을 개선하는 것과 미사일 공격에서 살아남기 위해 기술을 사용하는 것은 완전히 다른 수준임. 가끔 인간이 전쟁을 영원히 멈출 수 있을지 스스로에게 묻곤 함.
     * 영감을 주면서도 무서운 일임. 서방이 푸틴이 오직 힘을 존중한다는 것을 언제 이해할 것인지 궁금함. 우리는 우크라이나인들에게 필요한 모든 것을 제공해야 함. 이는 옳은 일일 뿐만 아니라 군사적으로도 최고의 거래임. 우크라이나인들이 러시아 군대를 계속 격퇴할 수 있고, NATO는 단 한 명의 병사도 잃지 않아도 됨. 아니면 러시아가 승리하게 두고 수백만 명의 우크라이나 난민을 처리해야 할 수도 있음. 아마도 러시아가 다른 나라를 공격하는 것으로 이어질 것임.
     * 정말 놀라운 일임. 하루 중 언제든지 이러한 공격을 처리하는 스트레스는 나를 10년은 늙게 만들 것임. 그리고 몇 시간 후나 다음 날에 여전히 일을 해야 함.
     * 2024년, 개인 우주선을 타고 화성에 거주하는 대신 Home Assistant 소프트웨어를 사용하여 미사일 공격을 경고받음. 전쟁은 인간이 할 수 있는 가장 비생산적인 활동임. 푸틴이 자신의 논리를 가지고 있을지 모르지만, 케이크에 침을 뱉는 것은 결코 케이크를 확보하는 방법이 아님. 왜냐하면 다른 사람들도 침을 뱉을 수 있고, 그러면 케이크가 망가짐. 더 큰 지도자는 문제를 해결하는 유일한 방법이 가치를 더하는 것임을 알고 있음. 불행히도 일부 지도자는 이를 배우려고 하지 않음. 잡담은 그만하고 질문 하나 하고 싶음: 기사에 따르면 시스템이 텔레그램(즉, 인터넷)과 오픈 소스 인텔을 필요로 한다고 함. 시스템을 자급자족할 수 있게 만들 수 있을까? 소리나 빛 신호를 기반으로 임박한 공격을 감지하는 것이 물리적으로 가능한가? 전쟁이 시작된 후 인터넷
       접근이 어려울 수 있음.
"
"https://news.hada.io/topic?id=14923","AI 대부 제프리 힌튼 교수, "우린 보편적 기본소득(UBI)이 필요하게 될 것"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI 대부 제프리 힌튼 교수, ""우린 보편적 기본소득(UBI)이 필요하게 될 것""

     * ""AI의 대부""로 불리는 컴퓨터 과학자 Geoffrey Hinton 교수는 AI가 불러올 불평등 문제를 해결하기 위해 정부가 기본 소득을 도입해야 한다고 주장
     * BBC Newsnight와의 인터뷰에서 AI가 많은 단순한 일자리를 대체할 것이기 때문에 기본 소득이 필요하다고 언급
     * AI가 생산성과 부를 증가시킬 것이지만, 그 돈은 부자들에게만 돌아갈 것이며, 일자리를 잃은 사람들에게는 도움이 되지 않을 것이라고 우려함
     * Hinton 교수는 신경망의 선구자로, 현재 인공지능 폭발의 이론적 기초를 형성함
          + 작년까지 그는 구글에서 일했지만, 규제되지 않은 AI의 위험에 대해 더 자유롭게 이야기하기 위해 이 거대 기술 기업을 떠남
          + 보편적 기본소득 개념은 정부가 모든 개인에게 그들의 수단에 관계없이 정해진 급여를 지급하는 것을 의미함
          + 비판론자들은 이것이 매우 비용이 많이 들고 공공 서비스에서 자금을 전용하면서도 반드시 빈곤 완화에 도움이 되지는 않을 것이라고 말함
     * Hinton 교수는 AI가 규제되지 않은 상태에서 인류에게 멸종 수준의 위협을 가져올 수 있다고 경고
          + 지난 1년간의 발전은 정부가 AI의 군사적 사용을 통제하지 않으려 한다는 것을 보여주었고, 제품을 빠르게 개발하기 위한 경쟁으로 인해 기술 기업들이 ""안전에 충분한 노력을 기울이지 않을"" 위험이 있다고 말함
          + 그는 ""앞으로 5년에서 20년 사이에 AI가 인수하려고 하는 문제에 직면할 확률이 절반""이라고 추측함
          + 이는 ""생물학적 지능보다 더 나은 지능 형태를 만들었을 수 있기"" 때문에 인간에게 ""멸종 수준의 위협""으로 이어질 것이며, 이는 ""우리에게 매우 걱정스러운 일""이라고 함
     * AI는 ""더 많은 자신을 만들기 위한 동기를 얻기 위해"" ""진화""할 수 있으며 ""통제권을 얻는 하위 목표""를 자율적으로 ""개발""할 수 있다고 말함
          + 그는 텍스트를 생성하는 데 사용되는 일종의 AI 알고리즘인 대규모 언어 모델이 기만적이 되기로 선택한 증거가 이미 있다고 말함
          + 그는 수천 개의 군사 표적을 생성하기 위한 AI의 최근 적용이 ""쐐기의 얇은 끝""이라고 말함
     * Hinton 교수는 AI의 군사적 사용을 규제하기 위해 전쟁에서 인도주의적 대우에 대한 법적 기준을 수립하는 국제 조약인 제네바 협약과 유사한 것이 필요할 수 있다고 말함
          + 그러나 그는 ""매우 불쾌한 일이 일어난 후에야 그렇게 될 것""이라고 덧붙임
          + 서방이 러시아나 중국과 같은 독재국가와 AI의 군사적 사용에 대해 제2차 세계대전 당시 핵무기 연구를 지칭하는 맨해튼 프로젝트 스타일의 경쟁을 하고 있는지 묻자, Hinton 교수는 ""푸틴은 몇 년 전 AI를 통제하는 사람이 세계를 통제한다고 말했다. 그래서 저는 그들이 매우 열심히 일하고 있다고 상상한다""고 답함
          + ""다행히도 서방은 아마도 연구 면에서 그들을 훨씬 앞서고 있을 것이다. 우리는 아마도 여전히 중국을 약간 앞서고 있다. 하지만 중국은 더 많은 자원을 투입하고 있다. 그래서 군사적 용도 면에서 나는 경쟁이 있을 것이라고 생각한다""고 말함
          + 그는 AI의 군사적 사용을 금지하는 것이 더 나은 해결책이 될 것이라고 말함

   약 5년 전에 읽었던 맥스 테그마크의 ‘라이프 3.0’에서 다룬 내용들이 점점 현실화되는 것 같습니다. AI의 발전 가능성을 다양한 스펙트럼으로 잘 분류하여 설명한 이 책은, AI의 미래학적인 관점에 관심이 있는 분들에게 정말 추천하고 싶네요!

   제가 평소에 가지던 생각이랑 같아서 기분이 오묘하네요...

   자금조달은 아무래도 'AI를 통해 부를 축적한 부자들'에게 세금을 메기는 방법이 될 것 같다고 생각해요

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * UBI의 부정적 영향
          + UBI(기본소득)가 로마 시대의 빵 배급보다 더 나쁠 수 있음. 돈은 모든 자원을 포함하기 때문임.
          + UBI는 사람들을 생산하지 않는 비용으로 전환시켜 제거하고 싶게 만듦.
          + 일반 사람들이 생존하려면 권력이 필요하며, UBI는 충분하지 않음.
          + 스웨덴에서는 성공한 노동자에게 세금을 부과하여 자금을 조달하려는 시도가 있었음. 이는 노동 계층 내에서의 재조정일 뿐, 진정한 부유층은 영향을 받지 않음.
     * 저소득층에 대한 투자
          + 저소득층에 대한 지급은 국가가 ""저가 매수""하여 나중에 세금으로 ""고가 매도""하는 것과 같음.
          + UBI는 모두에게 지급되지만, 주로 저소득층에게 혜택이 돌아감.
     * SF 작가들의 예측
          + SF 작가들은 이미 UBI에 대해 많이 생각해왔음. 예시로 특정 소설을 제시함.
     * UBI 연구의 실패 사례
          + 기자가 UBI가 실패할 것이라는 주장을 했지만, 실제로 실패한 연구 사례는 없다고 주장함.
     * Sam Altman의 UBI 접근법
          + Sam Altman은 돈 대신 가치 있는 자원을 제공하는 UBI를 제안함.
          + 예를 들어, ""컴퓨팅 자원""을 제공하여 사람들이 이를 활용하도록 함.
          + 이는 단순히 돈을 주는 것보다 사람들이 자원을 활용해 무언가를 창출하도록 유도할 수 있음.
     * UBI의 필요성
          + 부와 권력의 중앙집중화, 자동화 증가, 인간 노동의 필요성 감소로 인해 UBI가 필연적일 수 있음.
          + 사람들에게 최소한의 생활이 아닌 좋은 삶을 제공하지 않으면 사회가 불안정해질 수 있음.
     * UBI의 동기 문제
          + UBI가 도입되면 기본소득으로 가족을 부양할 수 있는 상황에서 일할 동기가 무엇인지 의문을 제기함.
     * 권력과 생존
          + 현재 시스템은 권력자들에게 필요하기 때문에 존재함. 필요하지 않게 되면 반란하거나 죽게 됨.
     * 경제적 효율성 재분배
          + 새로운 기술로 인한 경제적 효율성 증가를 사회의 더 넓은 부분에 재분배하는 것이 더 나은 아이디어일 수 있음.
     * UBI 자금 조달 문제
          + 미국의 경우, 1인당 월 $500를 지급하면 연간 $1.8조 달러가 필요함. UBI 자금 조달 방법에 대한 설명이 필요함.
"
"https://news.hada.io/topic?id=14934","암호화 전쟁 격화: Going Dark 현상 증가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      암호화 전쟁 격화: Going Dark 현상 증가

     * 유럽 연합이 아동 보호를 명분으로 전 EU 시민을 대상으로 한 전면 감시를 도입하려 했음
     * 이 법안, 일명 ‘채팅 통제( Chat Control )’는 미국 기술 회사와 보안 서비스가 관련되어 있었음
     * 지금은 새로운 시도인 '암흑으로 가다( Going Dark )' 이니셔티브가 등장했지만, 목표는 동일함:
          + ""유럽의 모든 휴대폰과 컴퓨터에 국가 스파이웨어를 설치하는 것""

배경

     * 날짜 및 인물: 2022년 5월 11일, EU 위원 Ylva Johansson이 ""아동 성학대 예방 및 퇴치를 위한 규정"" 법안을 제안했음.
     * 법안의 주장: Johansson은 이 법안이 자신의 제안이며, 그녀가 없었다면 유럽의 사법 시스템이 아동 성학대 추적에서 '눈이 멀게' 되었을 것이라고 주장했음.

채팅 통제 법안

     * 내용: 모든 EU 시민의 통신을 감시하며, 인공지능(AI)으로 실시간으로 필터링하여 새롭게 설립된 EU 센터와 Europol이 협력하여 확인하는 것을 의미함.
     * 법적 문제: 유럽 인권 협약, EU 헌장 및 유엔 인권 선언과 충돌하여 여러 입법 기관에서 거부되었음.
     * 비판: UN 인권 이사회와 465명의 연구자들이 이 법안의 결과에 대해 경고했음.

법안의 영향

     * 개인 정보 보호: 모든 메시징 서비스(암호화된 서비스 포함)가 사용자 이미지를 스캔해야 하며, 이는 정치적 반대자, 내부고발자, 기자 등에게 큰 문제가 됨.
     * 기술적 불가능성: Johansson이 주장한 디지털 스니퍼 탐지견은 실재하지 않으며, 암호화된 통신을 보지 않고 내용을 확인할 수 없음을 전문가들이 강조했음.

미국 기술 회사와 보안 서비스의 참여

     * 조사: 2023년 9월, 3명의 기자가 조사한 결과, 미국 회사 Thorn과 유럽 위원회가 밀접하게 협력하고 있음을 밝혔음. Thorn은 아동 포르노 자료를 스캔하는 도구를 개발한 회사임.
     * 로비 활동: Thorn의 CEO Julie Cordua와 Ashton Kutcher는 유럽 위원회와 긴밀히 협력하며 법안 통과를 추진했음.

투명성 부족

     * EU 투명성 등록부: Thorn은 자선 단체로 등록되었으나, 실제로는 기술을 판매하는 회사였음.
     * 조직 설립: 유럽 위원회는 여러 로비 단체와 함께 일하며 법안 지지를 얻으려 했음.

결론

     * 유럽 의회의 대응: 2023년 11월, 유럽 의회는 압도적인 반대로 법안을 거부했음.
     * 새로운 시도: '암흑으로 가다' 이니셔티브는 유사한 목표를 가진 새로운 시도로, 법 집행 기관이 데이터를 접근할 수 있도록 하려는 계획임.
     * 도전: 유럽과 미국 보안 기관은 여전히 엔드투엔드 암호화를 깨뜨리려는 시도를 지속하고 있음.

요약

     * 유럽 연합과 미국 기술 회사, 보안 서비스가 협력하여 아동 보호를 명분으로 EU 시민의 통신을 전면 감시하려는 법안을 추진함.
     * 이 법안은 여러 인권 규약과 충돌하여 거부되었으나, 새로운 시도로 '암흑으로 가다' 이니셔티브가 등장함.
     * 이 법안과 이니셔티브는 개인정보 보호와 암호화된 통신의 보안에 심각한 위협이 됨.
     * 유럽 의회는 법안을 거부했으나, 보안 기관의 시도는 계속되고 있음.

GN⁺의 의견

    1. 암호화의 중요성: 암호화는 개인의 프라이버시와 보안을 지키는 중요한 수단임. 이를 무력화하려는 시도는 개인의 자유를 침해할 수 있음.
    2. 기술적 한계: AI를 이용한 실시간 스캔은 높은 오류율을 가질 수 있으며, 이는 무고한 사람들을 위험에 빠뜨릴 수 있음.
    3. 투명성 부족: 유럽 집행위원회의 투명성 부족은 민주적 절차에 대한 신뢰를 떨어뜨릴 수 있음.
    4. 대안 기술: Signal과 같은 안전한 메시징 서비스는 여전히 중요한 대안임. 사용자들은 이러한 서비스를 통해 자신의 프라이버시를 지킬 수 있음.
    5. 법적 문제: 이러한 법안은 법적 도전에 직면할 가능성이 높으며, 실제로 법원에서 유지되기 어려울 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 법안 통과 시도
          + 스페인 대통령 임기 동안 법안 통과 실패, 현재 벨기에 대통령 임기 중 다시 시도 중임.
          + 법안 내용 일부 수정, 정치인과 경찰은 감시 대상에서 제외됨.
     * 범죄 프로파일링의 위험성
          + FBI의 범죄 프로파일링 책을 읽어보면, 특정 행동 패턴이 범죄자와 연관될 수 있음.
          + 대규모 감시로 모든 데이터를 분석할 수 있지만, 이는 구식 방법론과 AI를 결합한 데이터 기반 점성술로 이어질 수 있음.
          + Macdonald 삼각형은 최악의 범죄자를 탐지하지만, 주로 학대 피해자를 탐지함.
     * 프라이버시 vs 보안 논쟁
          + 내부 위협 보안 vs 외부 위협 보안으로 프레임이 설정됨.
          + 개인 보안을 줄이는 조치는 전통적인 군대의 보안도 감소시킴.
          + 민간 통신 인프라가 군사 통신 인프라로 전환될 수 있음.
          + 민간 통신의 취약점은 사이버 전쟁의 주요 목표가 됨.
     * 결정권자들이 알아야 할 3가지
          + 종단 간 암호화는 이미 존재하고 대규모로 배포됨.
          + 중간 지점은 없음: 종단 간 암호화되거나 그렇지 않음.
          + 법을 만들어도 범죄자는 항상 종단 간 암호화를 사용할 수 있음.
     * 사이버 전쟁의 위험성
          + 더 안전한 시스템을 구축해야 함.
          + 개인 자유에 대한 전쟁이 증가하고 있음.
     * 비밀 유지의 어려움
          + 비밀 백도어, 의도적으로 손상된 암호화 등은 적대적인 엔티티에 의해 악용될 가능성이 큼.
          + 국가 안보 우선순위를 명확히 해야 함.
     * 지식의 위험성
          + 지식은 규칙이 없으면 위험할 수 있음.
          + 인류의 운명은 어리석은 자들의 손에 달려 있음.
     * 적대적 해커의 위협
          + 적대적 해커가 기밀 메시지를 읽을 수 있는 이유에 대한 놀라움.
     * 프라이버시 기대와 공공 영역
          + 공공 영역에서의 신호에 대한 프라이버시 기대에 대한 긴장감.
          + 미국에서는 헌법 수정이 필요할 수 있음.
"
"https://news.hada.io/topic?id=14955","Adobe, Lightroom에 Firefly 기반의 혁신적인 Generative Remove 도구 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Adobe, Lightroom에 Firefly 기반의 혁신적인 Generative Remove 도구 공개

     * Adobe가 Firefly를 Lightroom에 도입
          + 모바일, 웹, 데스크탑 등 다양한 플랫폼에서 손쉽게 사진 편집 가능함
          + Generative Remove로 사진에서 원하지 않는 객체를 한 번의 클릭으로 제거할 수 있음
               o 복잡한 배경이나 주변 환경에서도 효과적으로 사용 가능, 예: 셔츠의 얼룩, 테이블보의 주름, 물에 비친 불필요한 반사 등
          + 제거된 영역을 인공지능이 분석하여 자연스럽게 채워 넣음
          + 가족 사진의 방해물 제거부터 전문가의 빠른 보정 작업까지 다양하게 활용 가능함
     * Lightroom에 인공지능 기반의 다양한 기능이 추가됨
          + Lens Blur: 한 번의 클릭으로 사진에 미적 블러 효과를 줄 수 있음. 자동 프리셋 포함
          + 최신 Sony 카메라 등에 대한 테더링 지원으로 실시간 편집 및 팀 협업이 가능해짐
          + HDR Optimization: 사진의 밝은 부분과 어두운 부분을 최적화하여 실제와 같은 생생한 색상을 구현함
          + Lightroom 모바일 앱에서 사진 라이브러리에 즉시 접근 가능해짐
          + 모바일 편집 경험이 간소화되어 더 빠르고 직관적인 편집이 가능해짐
     * 강력한 Firefly AI는 크리에이터, 사진작가, 디자이너를 위해 만들어진 인공지능 모델임
          + Adobe Stock 등 라이선스 콘텐츠를 기반으로 훈련되어, 저작권 침해 없이 상업적으로 사용 가능한 콘텐츠를 생성
          + Adobe의 핵심 도구들에 Firefly가 통합되어 창의적인 작업 흐름을 강화함
     * Adobe는 인공지능 개발에 있어 책임감 있는 혁신을 추구함
          + 콘텐츠 생성에 인공지능이 사용되었는지 소비자에게 투명하게 공개하는 것이 중요함
          + Generative Remove로 편집된 사진에는 자동으로 Content Credentials가 첨부될 예정임
          + Content Credentials는 디지털 콘텐츠의 생성, 수정, 출판 과정에 대한 정보를 제공함
          + Content Authenticity Initiative(CAI)를 통해 디지털 생태계에서의 신뢰도 향상을 위해 노력 중임
     * Generative Remove는 현재 Lightroom 생태계 전반에 걸쳐 얼리 액세스 기능으로 제공 중임
     * Lens Blur는 새로운 프리셋 기능과 함께 정식 출시됨
"
"https://news.hada.io/topic?id=14933","브라우저용 로컬 우선 CAD 프로그램 CADmium","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      브라우저용 로컬 우선 CAD 프로그램 CADmium

CADmium: 브라우저에서 작동하는 로컬 우선 CAD 프로그램

   2024년 5월 21일

   우리는 새로운 오픈소스 CAD 프로그램을 개발 중임. 상당히 진척되었지만, 여러분의 도움이 필요함. 이 프로젝트에 참여하고 싶다면, Discord에 가입해 주세요!

  무엇이 필요한가?

   3D 파라메트릭 CAD 프로그램을 만들기 위해 필요한 것들:
     * 2D 제약 해결기
     * B-rep 커널
     * 히스토리 트래커
     * 3D 사용자 인터페이스
     * 파일 형식

   각 항목에 대해 이야기해 보겠음!

  2D 제약 해결기

   2D 제약 해결기는 선이 평행하거나 수직으로 유지되도록 하거나, 두 원이 동일한 반지름을 가지도록 하는 등의 역할을 함.
     * 일반적인 접근 방식은 모든 미지수를 큰 벡터 x로 결합하고, 모든 제약 조건을 선형 방정식으로 표현하여 큰 행렬 방정식 Mx = b로 조립하는 것임.
     * 이론적으로는 M을 역행렬로 만들면 끝남. x = M^-1 b
     * 실제로는 많은 최적화가 필요함. 하지만 이 접근 방식에는 단점이 있음.
          + M이 정방행렬일 때만 역행렬을 만들 수 있음.
          + 제약 조건이 너무 많으면 M이 너무 커져서 접근 방식이 실패함.
          + 제약 조건이 너무 적으면 가정 삽입으로 해결할 수 있지만, 이는 모델러의 기대와 일치하지 않을 수 있음.
          + 많은 미지수가 있을 때 이 행렬 방정식을 푸는 것은 매우 느려짐.

   대안 접근 방식:
     * 문제를 2D 물리 시뮬레이터로 공식화:
          + 각 점은 질량 m과 속도 v를 가짐.
          + 각 제약 조건은 연결된 점에 힘 F를 가하는 스프링임.
          + 마찰력은 속도에 비례함.
          + 시뮬레이션을 작은 dt로 앞으로 진행시켜 수렴할 때까지 반복함.
     * 이 접근 방식은 작은 변화를 많이 만들어 스프링의 잠재 에너지를 0으로 만듦.
     * 각 시간 단계에서 런타임은 스프링 수와 미지수 수에 비례하여 선형임.
     * 이 접근 방식은 병렬화에 적합하여 실제로 매우 빠를 수 있음.
     * 과제 제약 문제는 과제 제약에 대해 불평하지 않음: 일관된 시스템은 정상적으로 해결되고, 일관되지 않은 시스템에서는 스프링이 타협함.
     * 과소 제약 문제는 무한대로 날아가지 않음, 가장 가까운 유효한 구성으로 찾음.
     * 이 접근 방식은 불평등 제약 조건을 지원할 수 있음.

  B-rep 커널

   기계 CAD에서는 사용자가 부품의 가장자리와 면과 직접 상호작용해야 함.
     * 모든 파라메트릭 CAD 프로그램은 부품의 경계를 데이터 구조로 직접 나타냄.
     * 큐브는 6개의 면, 각 면은 4개의 가장자리, 각 가장자리는 2개의 점으로 구성된 솔리드로 표현됨. 이 접근 방식을 경계 표현(B-rep)이라고 함.
     * 곡면의 경우, 스플라인의 일반화인 NURBS 표면을 사용하여 자유 형상에 대한 예술적 제어와 원뿔 곡선을 정확하게 표현할 수 있음.
     * 이러한 방식으로 형상을 표현하는 것은 어렵고, 합집합, 교차, 차집합과 같은 불린 연산을 구현하려고 하면 더욱 어려워짐.
     * 이러한 데이터를 처리하고 불린 연산을 수행하는 라이브러리를 B-rep 커널이라고 하며, 만들기 매우 어려움.

   현재의 CAD 시장:
     * 주요 CAD 회사들은 각자 자신만의 B-rep 커널을 작성했으며, 수십 년이 걸림.
     * 가장 중요한 B-rep 커널은 Parasolid로, 많은 산업 제품을 지원함.
     * 오픈소스 CAD 시장에서는 OpenCascade가 유일한 인기 있는 B-rep 커널임.

   새로운 오픈소스 B-rep 커널:
     * Truck이라는 새로운 오픈소스 B-rep 커널이 개발 중임.
     * Rust로 작성되어 있으며, 이는 메모리 안전성 보장, 병렬화 용이성, 웹어셈블리 컴파일 지원 등의 장점이 있음.
     * Truck은 작고 가벼우며, .step 파일 읽기/쓰기, 표면 삼각화, NURBS 지원, 솔리드의 교차/합집합/차집합 연산을 지원함.

  히스토리 트래커

   파라메트릭 CAD 프로그램은 설계의 기능 히스토리를 저장함.
     * 스케치, 돌출, 회전 등의 작업을 통해 부품을 완성함.
     * ""파라메트릭""이란 이전 단계로 되돌아가 변경한 후 기능을 재생하여 약간 다른 부품을 얻을 수 있음을 의미함.
     * 변수 주입을 통해 모델을 매개변수화할 수 있음.

   파라메트릭 CAD의 취약성을 해결하기 위한 접근 방식:
     * 탄력적 모델링 전략(RMS): 부품을 설계하는 규칙 집합.
     * 스케치에 기능 히스토리를 추가하는 것: 스케치 기능을 기능 트리에 저장하고 표시하여 RMS 아이디어를 단일 스케치에 적용할 수 있음.
     * 모든 사용자 이벤트를 추가 전용 로그에 기록하여 무제한 되돌리기/다시 실행 기능 제공.

  3D 사용자 인터페이스

   브라우저에서 CAD를 실행하는 아이디어를 좋아함.
     * Onshape는 브라우저에서 실행되지만, 실제로는 AWS의 GPU 지원 클라우드 인스턴스에서 실행됨.
     * CADmium은 웹어셈블리로 컴파일된 Truck을 사용하여 브라우저에서 모든 작업을 수행할 수 있음. 로컬 우선 앱임.

   기술 스택:
     * Three.js: 3D 뷰포트
     * Svelte: 상태 관리/반응성
     * Threlte: Svelte와 Three.js 간의 다리 역할
     * UI와 B-rep 커널 간의 메시지 전달
     * Electron: 로컬 실행
     * 기타 표준 기술: Typescript, TailwindCSS, Vite 등

  파일 형식

   CADmium은 모든 것을 JSON으로 사용함.
     * 작업 로그는 JSON 라인으로 구성됨.
     * 설계한 부품을 더 간단한 교환 형식으로 내보내기 지원.
     * 예: { ""steps"": [ { ""type"": ""sketch"", ""id"": ""Sketch-01"", ""data"": { ... } }, { ""type"": ""extrude"", ""id"": ""Extrude-01"", ""data"": { ""distance"": ""10mm"", ""sketch"": ""Sketch-01"", ""faces"": [0], ""type"": ""new"" } } ] }
     * CADmium 명령줄 인터페이스(CLI)를 사용하여 .step 또는 .stl로 변환 가능: $ CADmium export my_part.cadmium --format stl

  결론

   여기서 언급한 아이디어 중 어떤 것이 성공할지, 어떤 것이 실패할지 모르지만, 이 공간 어딘가에 소규모 팀이 제조 산업에 큰 영향을 미칠 수 있는 기회가 있음.

   필요한 도움:
    1. Rust 프로그래밍 (일반적인 개선)
    2. 계산 기하학 (Truck 패치)
    3. Three.js 도움 (새 카메라 컨트롤러, 더 나은 조명, 후처리)
    4. 보조금 기회 또는 부유한 후원자 찾기

   지금은 다루지 않지만 나중에 다시 방문하고 싶은 것들:
    1. 벤처 캐피탈
    2. 툴패스 생성 (CAM)
    3. 유한 요소 분석 (FEA)

   이 아이디어가 흥미롭다면, CADmium 디스코드 서버에 가입하여 대화해 주세요!

GN⁺의 의견

    1. Rust의 장점: Rust는 메모리 안전성과 병렬화 용이성 덕분에 오픈소스 프로젝트에 매우 적합함. 이는 CADmium의 안정성과 성능을 높이는 데 큰 도움이 될 것임.
    2. 웹어셈블리의 활용: 웹어셈블리를 사용하여 브라우저에서 직접 CAD 작업을 수행할 수 있는 것은 매우 혁신적임. 이는 인터넷 연결이 불안정한 환경에서도 작업을 계속할 수 있게 함.
    3. 파일 형식의 단순화: JSON을 사용한 파일 형식은 이해하기 쉽고, 텍스트 편집기에서 직접 수정할 수 있어 매우 유용함. 이는 협업과 버전 관리를 용이하게 함.
    4. 기능 히스토리의 중요성: 기능 히스토리를 통해 무제한 되돌리기/다시 실행 기능을 제공하는 것은 사용자 경험을 크게 향상시킬 수 있음. 이는 설계 과정에서의 실수를 쉽게 수정할 수 있게 함.
    5. 오픈소스 커뮤니티의 힘: 오픈소스 프로젝트는 커뮤니티의 참여와 기여를 통해 빠르게 발전할 수 있음. CADmium도 많은 개발자와 사용자의 참여를 통해 더욱 발전할 수 있을 것임.
"
"https://news.hada.io/topic?id=14917","3M 임원들, 과학자에게 영구 화학물질이 인체 혈액에서 안전하다고 설득","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                3M 임원들, 과학자에게 영구 화학물질이 인체 혈액에서 안전하다고 설득

3M의 영원한 화학물질: 과학자를 속인 경영진

  수십 년 전, Kris Hansen은 3M의 PFAS 화학물질이 사람들의 몸에 있다는 것을 보여줌. 그녀의 상사들은 그녀의 연구를 중단시킴. 현재 EPA가 식수에서 이 화학물질을 제거하도록 강제하면서, 그녀는 3M이 그녀와 세상에 숨긴 비밀과 씨름하고 있음.

     * Kris Hansen은 3M에서 화학자로 일한 지 약 1년이 되었을 때, 상사인 Jim Johnson이 그녀에게 사람의 혈액에서 화학물질 오염을 테스트하라는 이상한 과제를 줌.
     * 3M의 여러 성공적인 제품에는 플루오르화합물이 포함되어 있었음. 이 화합물은 가죽과 직물을 얼룩으로부터 보호하고, 식품 포장재가 젖지 않게 하며, 소방용 거품에서 사용됨.
     * Johnson은 Hansen에게 PFOS라는 화학물질이 3M 공장 근로자의 몸에 자주 들어간다고 설명했으며, 최근 외부 실험실에서 그들의 혈액 내 수준을 측정했음. 그러나 일반 대중의 혈액에서도 오염 물질이 발견됨.

  Hansen의 연구와 발견

     * Hansen은 실험실에서 혈액 샘플을 분석하여 PFOS가 혈액에 존재한다는 것을 확인함.
     * 그녀는 상사에게 결과를 보고했지만, 상사는 ""이것은 모든 것을 바꾼다""라고 말하며 더 이상의 설명 없이 사무실로 들어감.
     * Hansen은 3M에서의 연구가 PCBs와 같은 다른 화학물질의 연구와 유사하게 신중하게 다뤄질 것이라고 생각했음.

  3M의 대응

     * Johnson은 조기 퇴직을 발표하고, Hansen은 연구 방향에 대한 지침 없이 남겨짐.
     * 3M은 이미 20년 전에 PFOS의 독성을 보여주는 동물 실험을 수행했지만, 그 결과는 비밀로 유지됨.
     * Hansen의 상사들은 그녀의 연구 결과를 의심하며 실험 장비와 방법을 반복적으로 점검하도록 함.

  3M의 역사와 플루오르화합물

     * 3M은 1902년에 설립되어 다양한 혁신적인 제품을 개발함.
     * 플루오르화합물은 제2차 세계 대전 중 원자폭탄을 만들기 위한 미국의 노력에서 기원함.
     * 3M은 전후에 PFOA를 DuPont에 판매하여 테플론에 사용되었고, 이후 Scotchgard와 Scotchban을 개발함.

  Hansen의 개인적 경험

     * Hansen은 3M의 연구 결과를 발표했지만, 동료들로부터 의심과 비난을 받음.
     * 그녀는 자신의 연구가 회사에 해를 끼칠 수 있다는 이유로 제한된 실험만 수행하도록 지시받음.
     * 3M은 EPA에 PFOS가 혈액 샘플에서 발견되었다고 보고했지만, 동물 연구 결과는 언급하지 않음.

  3M의 PFOS 관련 결정

     * 3M은 2000년에 PFOS 관련 화학물질의 생산을 중단하기로 결정함.
     * Hansen은 3M의 발표에 기뻐했지만, 회사에서 소외감을 느끼고 다른 부서로 이동함.
     * 그녀는 자신의 혈액 샘플을 테스트했을 때 낮은 수준의 PFOS를 발견하고, 화학물질이 태아에게 전달될 수 있다는 것을 깨달음.

  Hansen의 후회와 깨달음

     * Hansen은 20년 동안 PFOS에 대해 침묵을 지켰지만, 최근 연구 결과를 읽고 깊은 후회를 느끼게 됨.
     * 그녀는 3M이 얼마나 많은 정보를 숨겼는지에 대해 분노를 느끼며, 회사의 비밀 유지와 자신의 역할에 대해 반성함.

GN⁺의 의견

     * 환경과 건강에 대한 경각심: 이 기사는 화학물질이 환경과 인간 건강에 미치는 영향을 경각심을 일깨워줌. 특히 PFAS와 같은 '영원한 화학물질'의 위험성을 강조함.
     * 기업의 책임: 3M과 같은 대기업이 제품의 안전성을 투명하게 공개하고, 잠재적인 위험을 신속하게 대응하는 것이 중요함을 보여줌.
     * 과학자의 윤리적 딜레마: Hansen의 경험은 과학자들이 기업 내에서 직면할 수 있는 윤리적 딜레마를 잘 보여줌. 연구 결과를 숨기거나 왜곡하는 것은 장기적으로 큰 문제를 초래할 수 있음.
     * 유사한 사례: DuPont의 테플론 사건과 유사한 사례로, 기업들이 화학물질의 위험성을 알고도 은폐하는 경우가 많음. 이러한 사례들은 규제 기관의 엄격한 감독이 필요함을 시사함.
     * 기술 도입 시 고려사항: 새로운 화학물질이나 기술을 도입할 때는 장기적인 환경 영향과 인체 건강에 미치는 영향을 철저히 검토해야 함. 초기 연구 결과를 무시하거나 은폐하는 것은 큰 위험을 초래할 수 있음.
"
"https://news.hada.io/topic?id=15023","아이폰을 Dumb Phone으로 바꾸기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         아이폰을 Dumb Phone으로 바꾸기

     * 스크린 타임을 줄이고 디지털 미니멀리즘을 실천하고 싶지만 완전히 덤폰(멍청한 휴대폰)으로 전환하고 싶지 않은 사람들을 위한 방법
     * 현재의 아이폰을 덤폰처럼 사용할 수 있도록 몇 가지 간단한 앱과 설정을 통해 조정할 수 있음
     * 이 방법을 통해 새로운 기기를 구매하지 않고도 스크린 타임을 줄일 수 있음

미니멀 홈스크린 런처

     * 미니멀 홈스크린 런처: 선택한 앱 목록만 표시하는 전체 화면 위젯을 홈스크린에 배치하는 것임.
     * Dumbify 런처: $4.99 USD로 구매 가능하며, 인앱 구매가 없음.
     * 다른 런처: Blank Spaces와 on point 같은 프리미엄 모델이 있지만, Dumbify가 더 경제적임.
     * 기능: 컬러풀한 앱 아이콘 대신 단순한 앱 이름 목록을 표시하여 덜 매력적이고 덜 방해됨.

단순한 배경화면 (독 숨기기)

     * 단순한 배경화면: 독의 색상과 일치하는 배경화면을 사용하여 독을 숨길 수 있음.
     * Dumbify 배경화면: 두 가지 배경화면 제공 (어두운 색상, 밝은 색상).
     * 설정 방법: 사진을 저장하고, 화면에 맞게 자른 후 배경화면으로 설정.
     * 추가 팁: 자동 라이트/다크 모드를 비활성화하여 독의 색상이 조정되지 않도록 설정.

그레이스케일 모드

     * 그레이스케일 모드: 접근성 설정을 통해 화면을 완전히 회색으로 변경할 수 있음.
     * 효과: 인스타그램이나 틱톡 같은 앱의 매력을 줄여줌.
     * 설정 방법: 설정 > 접근성 > 접근성 단축키에서 색상 필터 옵션을 활성화하여 전원 버튼을 세 번 클릭하면 그레이스케일 모드로 전환 가능.

알림 비활성화

     * 알림 비활성화: 불필요한 알림을 비활성화하여 스트레스를 줄일 수 있음.
     * 설정 방법: 설정 > 알림에서 앱별로 알림 설정을 조정할 수 있음.
     * 추천 알림: 전화, 문자 메시지, 은행 앱 알림만 허용하고 나머지는 비활성화.

보너스: 앱 삭제

     * 앱 삭제: 중독성 있는 앱을 삭제하여 스크린 타임을 줄일 수 있음.
     * 중독성 앱: 소셜 미디어, 인터넷 브라우저, 유튜브, 슬랙 등이 포함됨.
     * 기법: 중독성 있는 앱을 삭제하거나 소셜 미디어 없는 주말을 시도하거나 iOS 스크린 타임 기능을 사용하여 사용량을 조절할 수 있음.

결론

     * 이 기사의 내용을 실천하여 스크린 타임을 줄이는 도전을 해보길 권장함.
     * 알림 설정을 조정하거나 소셜 미디어 없는 주말을 시도하는 것만으로도 큰 도움이 될 수 있음.
     * 아이폰을 덤폰으로 만드는 것은 스마트폰 중독에 대한 만병통치약은 아니지만, 과도한 사용과 무의미한 스크롤링을 줄이는 데 도움이 됨.

GN⁺의 의견

     * 디지털 미니멀리즘: 디지털 미니멀리즘을 실천하는 데 있어 유용한 방법임. 디지털 기기의 사용을 줄이고 더 의미 있는 활동에 집중할 수 있음.
     * 중독성 앱: 중독성 있는 앱을 삭제하는 것이 가장 효과적인 방법일 수 있음. 단순히 설정을 변경하는 것보다 더 큰 효과를 볼 수 있음.
     * 접근성 설정: 접근성 설정을 활용하여 그레이스케일 모드로 전환하는 것은 색상의 매력을 줄여주는 좋은 방법임.
     * 알림 관리: 알림을 비활성화하는 것은 스트레스를 줄이고 집중력을 높이는 데 큰 도움이 됨. 불필요한 알림을 줄이는 것이 중요함.
     * 기술 도입 시 고려사항: 이러한 기술을 도입할 때는 개인의 사용 습관과 필요에 맞게 조정하는 것이 중요함. 모든 사람이 같은 방식으로 효과를 볼 수는 없으므로 개인화된 접근이 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 부정적인 반응에 대한 의문
          + 슬롯 머신 앱에 접근하는 데 약간의 마찰만 있어도 사용 시간을 줄이는 데 큰 도움이 됨.
          + 하지만 이러한 앱이 필요한 사람도 있어 삭제는 비현실적임.
          + 인터넷은 '적당히 사용'이라는 조언을 싫어함.
     * 그레이스케일 디스플레이와 알림 비활성화
          + 그레이스케일 디스플레이는 특히 지도 앱에서 불편함.
          + 알림 비활성화는 최고의 결정 중 하나였음.
          + 중요한 알림이 아닌 경우 앱 설치 시 알림을 꺼두는 습관을 들이는 것이 좋음.
          + 소셜 미디어 앱은 사용하지 않으며, 하루 평균 37분 사용.
     * 폰 중독 극복
          + 여러 소프트웨어 솔루션을 시도했지만 장기적으로 효과가 없었음.
          + 작은 화면의 스마트폰(Jelly Star)이 가장 좋은 타협책이었음.
     * 폰을 멀리 두기
          + 폰을 주머니가 아닌 가방에 두는 것이 효과적이었음.
          + 알림을 조절하는 것과 함께 폰을 자주 확인하는 것을 방지함.
     * 앱 삭제와 BitWarden
          + 불필요한 앱을 삭제하고 BitWarden을 사용하여 보안 유지.
          + 최소한의 런처 사용이 유용함.
     * 불필요한 앱 삭제
          + 불필요한 앱을 삭제하는 것이 간단한 해결책임.
          + 앱을 커스터마이징하는 것은 시간 낭비일 수 있음.
     * 인터넷 연결된 스마트폰의 한계
          + 여전히 인터넷에 연결된 스마트폰이기 때문에 외형만 바꾼 것에 불과함.
     * 미니멀리즘과 주목받기
          + 미니멀리즘을 소비하고 사람들의 주목을 받기 위한 것임.
          + 알림을 비활성화하고 최소한의 앱만 설치하는 것이 더 효과적임.
     * iOS의 Assistive Access 모드
          + iOS에는 이미 'Assistive Access'라는 간단한 모드가 내장되어 있음.
     * iPhone의 EOL 활용
          + iPhone이 매우 강력하지만 EOL 시 일반 컴퓨팅 장치로 재활용하는 쉬운 방법이 없음.
"
"https://news.hada.io/topic?id=15003","고객에게 영향을 미친 최근 사건에 대한 세부 사항 공유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     고객에게 영향을 미친 최근 사건에 대한 세부 사항 공유

최근 발생한 고객 영향 사건에 대한 세부 사항 공유

  Google Cloud 고객 지원

     * 이달 초, 호주에 있는 고객 UniSuper에게 영향을 미친 Google Cloud 사건이 발생했음.
     * 사건 발생 직후, 고객과 함께 시스템을 완전히 복구하는 것이 최우선이었음.
     * 사건이 시작된 직후, 고객과 공동 성명을 통해 사건을 공개적으로 인정했음.
     * 고객의 시스템이 완전히 복구된 후, 내부 검토를 완료했음.
     * 사건의 성격을 명확히 하고 투명성을 위해 정확한 설명을 제공하기 위해 정보를 공개함.
     * Google Cloud는 이 특정하고 고립된 사건이 다시 발생하지 않도록 조치를 취했음.
     * 이 사건의 영향은 매우 실망스러웠으며, 고객에게 불편을 끼친 점에 대해 깊이 사과함.

  영향 범위

    영향을 받은 기술 및 서비스

     * 이 사건은 다음과 같은 Google 관리 서비스에 영향을 미쳤음:
          + 한 클라우드 지역의 한 고객.
          + 그 고객이 사용하는 Google Cloud 서비스 중 하나인 Google Cloud VMware Engine (GCVE).
          + 두 개의 존에 걸친 고객의 여러 GCVE 프라이빗 클라우드 중 하나.

    영향을 받지 않은 항목

     * 이 사건은 다음 항목에는 영향을 미치지 않았음:
          + 다른 Google Cloud 서비스.
          + GCVE 또는 다른 Google Cloud 서비스를 사용하는 다른 고객.
          + 고객의 다른 GCVE 프라이빗 클라우드, Google 계정, 조직, 폴더 또는 프로젝트.
          + 동일한 지역에 저장된 고객의 데이터 백업(Google Cloud Storage).

  사건의 원인

    요약

     * 고객을 위해 Google Cloud VMware Engine (GCVE) 프라이빗 클라우드를 초기 배포하는 동안, Google 운영자가 내부 도구를 사용하여 GCVE 서비스를 잘못 구성했음. 이는 매개변수를 비워둔 결과로 발생했음.
     * 이로 인해 고객의 GCVE 프라이빗 클라우드가 고정 기간으로 설정되었고, 그 기간이 끝나면 자동으로 삭제되도록 설정되었음.
     * 사건의 원인과 시스템 동작은 모두 수정되어 다시는 발생하지 않도록 조치했음.
     * 이 사건은 이 고객의 하나의 GCVE 프라이빗 클라우드 외에는 다른 Google Cloud 서비스에 영향을 미치지 않았음.
     * 다른 고객들은 이 사건의 영향을 받지 않았음.

    상세 분석

      예외 프로세스를 사용한 배포

     * 2023년 초, Google 운영자는 특정 용량 배치 요구를 충족하기 위해 고객의 GCVE 프라이빗 클라우드 중 하나를 배포하기 위해 내부 도구를 사용했음.
     * 이 용량 관리 내부 도구는 2023년 4분기에 폐기되었고, 이제는 완전히 자동화되어 인간의 개입이 필요하지 않음.

      빈 입력 매개변수로 인한 의도치 않은 동작

     * Google 운영자는 내부 통제 프로토콜을 따랐음.
     * 그러나 고객의 프라이빗 클라우드를 프로비저닝할 때 내부 도구를 사용할 때 하나의 입력 매개변수가 비어 있었음.
     * 이로 인해 시스템은 이 매개변수에 대해 당시 알려지지 않은 기본 고정 1년 기간 값을 할당했음.
     * 시스템이 할당한 1년 기간이 끝난 후, 고객의 GCVE 프라이빗 클라우드가 삭제되었음.
     * 삭제는 Google 운영자가 내부 도구를 사용할 때 매개변수를 비워둔 결과로 발생했기 때문에 고객에게 알림이 전송되지 않았음.
     * 고객이 시작한 삭제는 고객에게 알림이 전송된 후에만 발생했을 것임.

    복구

     * 고객과 Google 팀은 며칠 동안 24시간 내내 협력하여 고객의 GCVE 프라이빗 클라우드를 복구하고, 네트워크 및 보안 구성을 복원하고, 애플리케이션을 복원하고, 데이터를 복구하여 완전한 운영을 복구했음.
     * 이는 고객의 강력하고 회복력 있는 아키텍처 접근 방식 덕분에 가능했음.
     * 동일한 지역에 저장된 Google Cloud Storage에 저장된 데이터 백업은 삭제에 영향을 받지 않았으며, 제3자 백업 소프트웨어와 함께 신속한 복구에 중요한 역할을 했음.

    수정 조치

     * Google Cloud는 이 사건이 다시 발생하지 않도록 여러 조치를 취했음:
         1. 이 사건을 유발한 내부 도구를 폐기했음. 이 부분은 이제 완전히 자동화되어 고객이 사용자 인터페이스를 통해 제어할 수 있음.
         2. 시스템 데이터베이스를 정리하고 모든 GCVE 프라이빗 클라우드를 수동으로 검토하여 다른 GCVE 배포가 위험에 처하지 않도록 했음.
         3. 이러한 배포 워크플로우에 대해 GCVE 프라이빗 클라우드를 삭제하도록 설정하는 시스템 동작을 수정했음.

    결론

     * Google Cloud 내에서 이와 같은 성격의 사건은 이번이 처음임. 이는 체계적인 문제가 아님.
     * Google Cloud 서비스는 소프트 삭제, 사전 알림, 인간 개입 등의 강력한 보호 장치를 갖추고 있음.
     * 이러한 보호 장치가 계속 유지되고 있음을 확인했음.
     * 고객과 긴밀히 협력하는 것이 신속한 복구에 필수적임. 고객의 CIO와 기술 팀은 Google Cloud 팀과 긴밀히 협력하여 24시간 복구를 신속하고 정확하게 수행한 점에 대해 칭찬받아야 함.
     * 예기치 않은 사건 발생 시 신속한 복구를 위해서는 강력하고 회복력 있는 위험 관리가 필수적임.
     * Google Cloud는 여전히 세계에서 가장 회복력 있고 안정적인 클라우드 인프라를 보유하고 있음. 이번 일회성 사건에도 불구하고, 우리의 가동 시간과 회복력은 독립적으로 검증된 바 있음.

  GN⁺의 의견

     * 사건의 중요성: 이 사건은 클라우드 서비스 제공자가 얼마나 신속하게 문제를 해결하고 고객과 협력하는지가 중요함을 보여줌.
     * 자동화의 필요성: 내부 도구의 자동화가 얼마나 중요한지, 특히 인간의 실수가 시스템에 큰 영향을 미칠 수 있는 경우를 강조함.
     * 고객과의 협력: 고객과의 긴밀한 협력이 문제 해결에 얼마나 중요한지 보여줌. 이는 신뢰를 쌓는 데도 중요한 요소임.
     * 데이터 백업의 중요성: 데이터 백업이 얼마나 중요한지, 특히 예기치 않은 사건 발생 시 신속한 복구를 위해 필수적임을 강조함.
     * 향후 예방 조치: Google Cloud가 사건 재발 방지를 위해 취한 조치들이 다른 클라우드 서비스 제공자들에게도 좋은 본보기가 될 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 문제 해결의 깊이에 대한 불만
          + 사건의 영향력에 비해 해결책이 깊지 않음. 동일한 문제가 다시 발생하지 않도록 했지만, 유사한 문제가 발생할 가능성은 여전히 존재함. 서비스 종료/삭제를 체계적으로 방지하기 위한 추가 조치가 필요함.
     * GCP 고객 보호 조치에 대한 질문
          + GCP 고객이 TAM에게 GCP의 보호 조치에 대해 질문할 것을 권장함. GCP의 인간 기반 보호 조치가 거의 없으며, AWS보다 훨씬 적음.
     * 24x7 작업에 대한 의문
          + ""Google 팀이 며칠 동안 24x7로 작업했다""는 표현에 대해 의문을 제기함.
     * 관련 사건
          + UniSuper 회원들이 Google Cloud의 잘못된 설정으로 인해 일주일 동안 계정에 접근하지 못한 사건과 Google Cloud가 고객의 계정을 실수로 삭제한 사건을 언급함.
     * Google 측 실수에 대한 놀라움
          + Google 측의 실수라는 사실에 놀라움을 표함. UniSuper가 큰 충격을 받았을 것이라고 언급함.
     * 검토의 철저함
          + 특정 도구/프로세스에 대한 조사뿐만 아니라 자동 삭제 문제를 검토하고 소프트 삭제 동작을 확인한 점에서 철저한 검토였다고 평가함. 그러나 기본 동작에 대한 추가 검토가 필요하다고 언급함.
     * GCP에 대한 기대
          + UniSuper의 문제는 해결되었지만, 이 사건이 GCP에 필요한 자극이 되기를 바람.
     * 고객의 노력에 대한 칭찬
          + 고객의 CIO와 기술 팀이 Google Cloud 팀과 협력하여 24x7 복구를 신속하고 정확하게 수행한 점을 칭찬함.
     * UniSuper 고객의 경험
          + UniSuper 고객이 사건의 실체를 뉴스에서 알게 되었으며, 사건을 ""시스템 다운타임""으로 축소하려는 시도가 있었다고 언급함.
     * 초기 발표의 오해
          + 초기 발표가 오해를 불러일으켰으며, 실제로는 특정 지역의 가상 머신만 손실되었다고 설명함. 이는 시스템이 처리할 수 있는 문제라고 언급함.
"
"https://news.hada.io/topic?id=14947","Amber - Bash로 컴파일되는 프로그래밍 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Amber - Bash로 컴파일되는 프로그래밍 언어

     * Bash로 컴파일되는 현대적이고 타입 안전하며 런타임 안전한 프로그래밍 언어
          + 컴파일 과정에서 많은 버그와 실수를 처리하여 스크립트를 작성할 수 있게 도와줌.
     * 주요 기능
          + 현대적 문법: 많은 언어 기능이 친숙하게 느껴질 것이며, Bash를 처음부터 배우는 것보다 훨씬 빠르게 익힐 수 있음.
          + 런타임 안전성: 일반적인 셸 스크립트에서 누락된 주요 구성 요소 중 하나로, 컴파일 시점에 많은 버그를 잡을 수 있음.
          + 타입 안전성: 실패할 수 있는 모든 Bash 명령어와 함수는 반드시 어떤 방식으로든 처리해야 함.
     * macOS와 Linux에서 포터블 솔루션으로 사용 가능.

GN⁺의 의견

     * Amber의 장점
          + 개발 생산성 향상: 현대적 문법과 타입 안전성 덕분에 개발자가 더 빠르고 안전하게 스크립트를 작성할 수 있음.
          + 버그 감소: 컴파일 시점에 많은 버그를 잡을 수 있어, 런타임 오류를 줄일 수 있음.
     * 고려사항
          + 학습 곡선: 기존 Bash 스크립트 작성자에게는 새로운 문법과 개념을 익히는 데 시간이 필요할 수 있음.
          + 호환성 문제: 특정 Bash 스크립트와의 호환성 문제가 발생할 수 있음.
     * 비슷한 프로젝트
          + Fish Shell: 사용자 친화적인 문법과 강력한 기능을 제공하는 또 다른 셸 스크립팅 언어임.
          + Zsh: Bash보다 더 많은 기능과 플러그인을 제공하는 셸로, 많은 개발자들이 선호함.
     * 기술 도입 시 고려사항
          + 기존 스크립트의 마이그레이션: 기존 Bash 스크립트를 Amber로 마이그레이션하는 데 필요한 시간과 노력을 고려해야 함.
          + 커뮤니티 지원: 새로운 언어 도입 시 커뮤니티와 문서의 지원이 얼마나 잘 되어 있는지 확인하는 것이 중요함.

   Batsh가 떠오르네요 ㅎㅎ

   이거 좋네요!

   이런 형태는 컴파일러라기 보다 트렌스파일러라고 해야하는 것 같기도 합니다.

   저도 그렇게 생각하는데, 요즘은 다 컴파일러라고 부르나봅니다.
   타입스크립트 컴파일러(?)도 tsc라고 부르고...

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Bash와 POSIX sh의 호환성
          + Bash를 작성하는 도구가 아니라 POSIX sh와 호환되는 도구였으면 좋겠음. MJML이 HTML 이메일을 작성하는 것처럼, Bash의 복잡성을 줄여주는 도구가 필요함.
     * Transpilation에 대한 의견
          + Bash를 transpile하는 아이디어가 흥미로움. 설치 과정이 간단해서 좋음.
     * 서브프로세스와 실패 처리
          + 서브프로세스와 실패 처리에 대한 더 나은 방법이 필요함. 현재 문서에 있는 방법은 부족해 보임. 파이프의 종료 코드 전파에 대한 언급이 없음.
     * 복잡한 DevOps 작업
          + Bash를 사용해 복잡한 DevOps 작업을 하고 싶음. 하지만 Bash의 한계 때문에 jq, sed, awk 같은 도구를 함께 사용해야 하는 불편함이 있음. Amber 같은 도구가 이 문제를 해결할 수 있을 것 같음.
     * Amber의 출력물
          + Amber의 출력물이 일관성이 없고 가독성이 떨어짐. 대부분의 컴파일러 출력물은 사람이 읽기 어렵지만, Amber는 아직 가독성을 희생할 만한 이점을 제공하지 않음.
     * 임베디드 시스템에서의 사용
          + 임베디드 시스템에서 복잡한 로직을 처리할 때 Amber가 유용할 것 같음. Bash만 사용할 수 있는 환경에서 더 나은 대안이 될 수 있음.
     * Bash의 문제점
          + Bash에서 파이프라인과 서브쉘이 느림. 간단한 조건문도 복잡하게 변환됨. 외부 CLI 도구의 버전 호환성 문제도 있음. 배열을 중첩할 수 없다는 것은 사실이 아님.
     * Bash 학습의 중요성
          + Bash를 배우는 것이 중요함. 새로운 대안을 배우기보다는 Bash의 기본을 배우는 것이 더 효율적일 수 있음.
     * 외부 프로그램 호출 문제
          + 간단한 작업에 외부 프로그램을 호출하는 것은 비효율적임. 순수 Bash로 컴파일되었으면 좋겠음.
     * Amber Smalltalk와의 혼동
          + Amber Smalltalk와 이름이 같아서 혼동이 있었음. 새로운 언어가 같은 이름을 사용하고 있음.
"
"https://news.hada.io/topic?id=14956","미 법무부, Live Nation-Ticketmaster 분할 추진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 미 법무부, Live Nation-Ticketmaster 분할 추진

   내용이 요약할 가치가 없는 경우로 판단됨.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 음악 애호가의 불만: 음악을 사랑하는 사람으로서 Live Nation이 콘서트를 망치고 있음. 그들은 공연장을 독점하고 있으며, 내부에서 암표 거래까지 하고 있음. Pearl Jam이 수십 년 전에 옳았음.
     * FTC와 DoJ의 활약: 최근 FTC와 DoJ가 잘하고 있지만, 여전히 기업이 원하는 대로 할 수 있다고 생각하는 판사들이 많음.
     * 독점 문제: Live Nation-Ticketmaster가 독점이 아니라면, 독점이라는 개념 자체가 없을 것임.
     * 미국과 유럽의 티켓 가격 비교: 최근 미국과 유럽의 밴드 공연 티켓 가격을 비교했는데, 미국의 티켓 가격이 너무 비쌌음. 미국에서는 각종 수수료 때문에 티켓 가격이 약 $54였지만, 유럽에서는 단지 8유로였음.
     * 티켓 구매 중단: 만약 상황이 개선되지 않으면, TicketMaster/Live Nation을 사용하는 공연에 가지 않을 계획임. 티켓 가격의 3분의 1이 수수료로 나가고 있어 가치가 없음.
     * 높은 대중 관심: Live Nation-Ticketmaster의 배경을 설명한 Adam Conover의 영상이 160만 조회수와 8,000개 이상의 댓글을 기록함.
     * 호텔 방이나 항공 좌석처럼 티켓 판매: 왜 콘서트 티켓은 호텔 방이나 항공 좌석처럼 여러 온라인 마켓플레이스에서 공정하게 판매되지 않는지 의문임.
     * 인디 아티스트와 공연장에 좋은 소식: 이 변화가 인디 아티스트와 공연장에 큰 도움이 될 것임. 미국의 오래된 지역 공연장들이 더 저렴한 옵션을 통해 번창할 수 있기를 바람.
     * T-Mobile과 Sprint도 조사 필요: T-Mobile이 요금을 인상한다고 발표했는데, 이는 합병의 직접적인 결과임. 이들도 조사해야 함.
     * Ticketmaster에 돈을 주지 말 것: 좋은 소식이지만, Ticketmaster에 돈을 주지 말아야 함. 그들에게 돈을 주는 것은 그들의 나쁜 관행을 계속하게 만드는 것임.
     * 모순된 행동: ""Ticketmaster는 정말 끔찍한 회사야!""라고 말하면서도 계속해서 그들에게서 콘서트 티켓을 구매하는 모순된 행동.
"
"https://news.hada.io/topic?id=14931","고든 벨 사망 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               고든 벨 사망 소식

고든 벨, 디지털 시대의 건축가, 89세로 별세

  벨은 DEC의 VAX 미니컴퓨터를 설계하고, 컴퓨터 역사를 지지하며, 마이크로소프트에서 멘토 역할을 함

     * 고든 벨은 디지털 장비 회사(DEC)의 초기 직원으로서 여러 영향력 있는 미니컴퓨터 시스템 개발에 중요한 역할을 했음
     * 컴퓨터 역사 박물관의 공동 창립자였으며, 금요일에 별세했음
     * 벨의 사망 소식은 벨 연구소의 베테랑 존 마시가 소셜 미디어 게시물로 알렸음

  추가 읽기: 오래전에 사라진 DEC, 여전히 컴퓨팅 세계를 움직이다

     * 마시는 ""고든 벨의 사망 소식을 전하게 되어 매우 슬프다. 그는 보스턴의 컴퓨터 박물관 창립자이자 실리콘 밸리의 @ComputerHistory의 주역이었으며, 1980년대부터 좋은 친구였다""고 발표했음
     * 벨은 캘리포니아 코로나도에서 흡인성 폐렴으로 사망했음

  벨의 업적과 생애

     * 벨은 1934년 미주리주 커크스빌에서 태어났으며, MIT에서 전기공학 학위를 받았음
     * 1960년 DEC 창립자 켄 올슨과 할란 앤더슨에 의해 채용되었음
     * DEC의 두 번째 컴퓨터 엔지니어로서 PDP-1 시스템의 여러 구성 요소를 작업했음
     * **UART(범용 비동기 수신 송신기)**를 발명했으며, PDP-4와 PDP-6을 설계했음
     * 1970년대에는 VAX 미니컴퓨터 라인을 감독하는 데 중요한 역할을 했음

  벨의 은퇴 후 활동

     * 1983년 DEC에서 은퇴한 후에도 벨은 기업가, 정책 고문, 연구자로 활동했음
     * Encore Computer를 공동 창립하고, NSF의 컴퓨팅 및 정보 과학 및 공학 국을 설립하는 데 도움을 주었음
     * 1995년 마이크로소프트 리서치에 합류하여 텔레프레즌스 기술을 연구하고, MyLifeBits 프로젝트의 주제가 되었음
     * 벨은 국립 공학 아카데미, 국립 과학 아카데미, 미국 예술 과학 아카데미에 선출되었음
     * 1991년 조지 H.W. 부시 대통령으로부터 국가 기술 메달을, 1992년 IEEE의 존 폰 노이만 메달을 수상했음

  ""그는 측정할 수 없을 만큼 도움이 되었다""

     * 벨의 사망 소식이 소셜 미디어에 퍼지자 업계 베테랑들이 추모와 애도를 표했음
     * 전 마이크로소프트 CTO 레이 오지: ""고든을 얼마나 사랑하고 존경했는지 충분히 설명할 수 없다. 그는 매우 뛰어나고, 차분하며, 미래에 대해 매우 낙관적이었다""
     * 전 윈도우 VP 스티븐 시노프스키: ""그는 마이크로소프트에서 매우 도움이 되었으며, 수많은 연구자, 프로젝트, 제품 팀을 지원하고 조언했다. 그의 기억은 많은 사람들에게 축복이다""

  GN⁺의 의견

     * 고든 벨의 업적은 현대 컴퓨팅의 기초를 다지는 데 큰 기여를 했음. 그의 발명과 연구는 오늘날 우리가 사용하는 많은 기술의 기반이 되었음
     * MyLifeBits 프로젝트는 개인의 모든 경험을 디지털화하려는 시도로, 데이터 저장 및 관리의 새로운 가능성을 열었음
     * 텔레프레즌스 기술 연구는 원격 근무와 가상 회의의 발전에 큰 영향을 미쳤음
     * DEC의 VAX 시스템은 컴퓨터 아키텍처의 발전에 중요한 역할을 했으며, 많은 현대 시스템의 기초가 되었음
     * 벨의 멘토링과 조언은 많은 기술 전문가들에게 큰 영향을 미쳤으며, 그의 유산은 앞으로도 계속될 것임

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Gordon Bell과의 개인적인 경험
          + Gordon Bell은 첫 스타트업에 투자한 첫 번째 투자자였음.
          + 나이가 들어서도 여전히 날카로운 엔지니어의 마인드를 유지했음.
          + 매우 친절하고 시간을 아낌없이 나눠주는 신사였음.
          + 시드니에서 그의 아내와 함께 저녁을 즐긴 기억이 소중함.
          + 컴퓨터 역사 박물관에서 VIP 투어를 함께 했던 기억이 있음.
          + 많은 이야기를 들려준 Gordon에게 감사함.
     * Gordon Bell과의 가족적 연결
          + 아버지가 CMU에서 Gordon과 함께 일했음.
          + ASCII 벨 문자 시퀀스가 CRTL-G인 이유가 Gordon 때문이라는 이야기를 들었음.
     * 컴퓨터 역사 박물관의 추모
          + Gordon Bell은 2024년 5월 17일에 사망했음.
          + 그는 손에 들고 다니는 장치부터 슈퍼컴퓨터까지 컴퓨팅 세계에 큰 영향을 미친 인물임.
          + 컴퓨터 역사를 보존하고 설명하는 데 큰 기여를 했음.
          + 그의 기여로 인해 많은 사람들이 컴퓨터 역사를 이해하게 되었음.
     * Gordon Bell의 저서와 영향력
          + 그의 책들은 PDF로 웹사이트에서 제공됨.
          + Stanford에서 그의 책을 수업 교재로 사용했음.
          + Digital Equipment Corp가 그의 퇴사 후 쇠퇴했다고 느꼈음.
          + 컴퓨터 역사 박물관에서 자원봉사자로 함께 일할 기회가 있었음.
          + 그의 설명을 녹음하지 못한 것이 아쉬움.
     * 버전 관리 시스템
          + 그가 사망한 날, Microsoft는 Windows Explorer에 버전 관리를 발표했음.
          + 그는 VMS 파일 시스템에 버전 관리를 도입했었음.
          + NT에서도 버전 관리를 도입하지 않은 이유가 궁금함.
     * MyLifeBits 프로젝트
          + MyLifeBits는 2001년에 시작된 Microsoft Research 프로젝트임.
          + Gordon Bell의 평생 데이터를 수집하는 실험임.
          + 모든 문서, 이메일, 웹 페이지 등을 디지털화했음.
          + ""Total Recall"" 책에서 개인의 평생 기억을 디지털화하는 비전을 설명함.
     * Gordon Bell의 열정
          + 약 10년 전 Channel 9 비디오에서 MSR 사무실을 방문한 영상이 기억남.
          + 그는 목에 비디오 카메라를 착용하고 MyLifeBits 프로젝트에 대해 이야기했음.
          + 나이가 들어도 여전히 열정적이고 호기심이 많았음.
     * 추천 도서
          + 그의 책 ""Computer Engineering""을 추천함.
          + 여전히 인쇄본과 전자책으로 구매 가능함.
"
"https://news.hada.io/topic?id=14996","Google, Project IDX의 베타버전 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Google, Project IDX의 베타버전 출시

  Project IDX 베타 버전 출시 및 주요 기능 소개

   Project IDX는 이제 베타 버전으로 출시되어 누구나 Google 계정으로 가입하여 사용할 수 있게 되었습니다. 주요 기능은 다음과 같습니다:
     * AI 코드 어시스턴트 Gemini를 통해 실시간 코드 제안, 오류 수정, 자동 완성 등의 기능을 제공합니다.[1]
     * Flutter, Firebase 등 Google 제품과 원활하게 통합되어 있습니다.[1]
     * 다양한 프레임워크와 언어(Angular, Flutter, React 등)를 지원하며, GitHub에서 기존 프로젝트를 가져올 수 있습니다.[1][3]
     * 웹 프리뷰와 Android 에뮬레이터를 통해 다중 플랫폼 앱을 미리 확인할 수 있습니다.[4]
     * Google Cloud 기반의 웹 IDE로 어디서나 개발이 가능합니다.[3][4]

   Project IDX는 개발 워크플로우를 개선하기 위한 Google의 실험적 프로젝트로, 지속적으로 새로운 기능과 협업 도구를 추가할 예정입니다.[3][4]

   인용:
   [1] Start building with Project IDX! https://idx.dev/blog/article/start-building-with-project-idx-today
   [2] Project IDX Blog https://idx.dev/blog
   [3] Introducing Project IDX, An Experiment to Improve Full-stack ... https://idx.dev/blog/article/introducing-project-idx
   [4] Project IDX https://idx.dev
   [5] LinkedIn JeongHun Byeon 페이지: Start building with Project IDX! https://kr.linkedin.com/posts/…

   (Perplexity로 요약했습니다)

   https://news.hada.io/topic?id=10281

   초기 알려진것보단 기능이 많더라고요.

   Perplexity의 의견

  개발 편의성

   Project IDX는 개발 편의성을 크게 향상시키는 여러 기능을 제공합니다.
    1. 클라우드 네이티브 환경: Project IDX는 클라우드 기반으로 설계되어, 복잡한 설정 과정 없이 인터넷 연결만으로 어디서든 프로젝트에 접근할 수 있습니다. 이는 개발 환경 설정에 소요되는 시간을 줄이고, 개발자들이 더 빠르게 작업을 시작할 수 있도록 돕습니다[1][2][3].
    2. AI 지원: AI와 머신러닝을 활용한 코드 제안, 버그 탐지, 코드 완성 기능을 제공하여 개발자들이 더 효율적으로 작업할 수 있도록 돕습니다. 이는 코드 품질을 높이고, 개발 속도를 향상시키는 데 큰 도움이 됩니다[1][2][3].
    3. 다양한 언어 및 프레임워크 지원: Python, JavaScript, Java, Rust 등 다양한 언어와 프레임워크를 지원하여, 개발자들이 원하는 환경에서 작업할 수 있도록 합니다. 또한, 사전 설정된 템플릿을 통해 새로운 프로젝트를 빠르게 시작할 수 있습니다[1][2][3][5].
    4. 실시간 협업 기능: 실시간 협업 코딩 기능을 통해 여러 개발자가 동시에 같은 프로젝트에서 작업할 수 있습니다. 이는 원격 팀이나 오픈 소스 기여자들에게 특히 유용합니다[1][2][3].

  보안 위협과 우려

   Project IDX는 클라우드 기반으로 운영되기 때문에 보안에 대한 우려가 있을 수 있습니다.
    1. 데이터 보안: 클라우드 환경에서 작업하는 경우, 데이터가 외부 서버에 저장되므로 데이터 유출이나 해킹에 대한 위험이 존재합니다. 따라서, Project IDX는 강력한 보안 프로토콜과 암호화 기술을 사용하여 이러한 위험을 최소화해야 합니다[5][6].
    2. 접근 제어: 여러 개발자가 동시에 작업할 수 있는 환경에서는 접근 제어가 중요합니다. Project IDX는 각 개발자의 권한을 명확히 설정하고, 민감한 데이터에 대한 접근을 제한하는 기능을 제공해야 합니다[5][6].
    3. VM 기반 환경: Project IDX는 각 작업 공간이 독립된 VM에서 실행되므로, 환경 간의 격리가 잘 이루어집니다. 이는 한 작업 공간에서 발생한 문제가 다른 작업 공간에 영향을 미치지 않도록 하여 보안을 강화합니다[4][5].

  벤더 락인

   Project IDX는 Google의 클라우드 인프라를 기반으로 하기 때문에 벤더 락인에 대한 우려가 있을 수 있습니다.
    1. Google 생태계 의존성: Project IDX는 Google의 다양한 도구와 제품과의 통합을 강조하고 있습니다. 이는 개발자들이 Google 생태계에 종속될 가능성을 높입니다[2][5].
    2. 오픈 소스 기반: Project IDX는 오픈 소스 프로젝트인 Code OSS를 기반으로 하고 있어, 어느 정도의 유연성을 제공합니다. 그러나, Google의 클라우드 서비스에 의존하는 부분이 많아 완전한 독립성을 보장하기는 어렵습니다[5][6].
    3. 이식성: Project IDX에서 작업한 프로젝트를 다른 클라우드 서비스나 로컬 환경으로 쉽게 이전할 수 있는지 여부가 중요합니다. 이는 벤더 락인 문제를 완화하는 데 도움이 될 수 있습니다[5][6].

  Codespaces와의 차이

   Project IDX와 GitHub Codespaces는 모두 클라우드 기반의 개발 환경을 제공하지만, 몇 가지 차이점이 있습니다.
    1. AI 지원: Project IDX는 AI와 머신러닝을 활용한 코드 제안, 버그 탐지, 코드 완성 기능을 제공하여 개발자들이 더 효율적으로 작업할 수 있도록 돕습니다. 반면, Codespaces는 이러한 AI 기능이 상대적으로 부족합니다[1][3][4].
    2. 프레임워크 및 언어 지원: Project IDX는 다양한 언어와 프레임워크를 사전 설정된 템플릿을 통해 지원합니다. 이는 개발자들이 새로운 프로젝트를 빠르게 시작할 수 있도록 돕습니다. Codespaces도 다양한 언어와 프레임워크를 지원하지만, 사전 설정된 템플릿의 편의성은 상대적으로 덜합니다[1][3][4].
    3. 협업 기능: Project IDX는 실시간 협업 코딩 기능을 통해 여러 개발자가 동시에 같은 프로젝트에서 작업할 수 있습니다. Codespaces도 협업 기능을 제공하지만, Project IDX의 실시간 협업 기능이 더 강력합니다[1][3][4].
    4. 사용자 경험: Project IDX는 Visual Studio Code와 유사한 사용자 인터페이스를 제공하여, 기존 VS Code 사용자들이 쉽게 적응할 수 있도록 합니다. 이는 사용자 경험을 향상시키는 데 기여합니다[5][6].

   이와 같이, Project IDX는 개발 편의성, 보안, 벤더 락인, 그리고 Codespaces와의 차이점에서 여러 장점을 가지고 있습니다. 그러나, 각자의 필요와 상황에 따라 적합한 도구를 선택하는 것이 중요합니다.

   인용:
   [1] Project IDX vs. Visual Studio Code: Unveiling the Future of Coding https://slightinsight.com/tech/…
   [2] Project IDX - Google for Developers https://developers.google.com/idx
   [3] Project IDX vs VS Code: Which One Suits Your Development Needs? https://www.temok.com/blog/project-idx-vs-vs-code/
   [4] I tested Google IDX (Codespaces for Google), and here are my ... https://dev.to/sampseiol1/…
   [5] How we built Project IDX: A high-level overview https://idx.dev/blog/article/…
   [6] Google Project IDX: A promising next-generation cloud IDE - InfoWorld https://infoworld.com/article/3712464/…
   [7] Building Applications in Google Project IDX - Matt McDonagh https://lifeinthesingularity.com/p/…
   [8] What is Vendor Lock-in? Factors, Risks and How to Avoid Them https://www.builder.ai/glossary/vendor-lock-in
   [9] Project IDX and Its Role in the New AI-Integrated Coding Environment https://invoguesolutions.com/project-idx-and-its-role-in-the-new-ai-in…
   [10] Start Building with Project IDX Today https://idx.dev/blog/article/start-building-with-project-idx-today
   [11] Why would anyone choose to use an online editor like Project IDX? https://reddit.com/r/AskProgramming/…
   [12] Google's Project IDX, the Future of Web Development (VSCode ... https://dev.to/helplanes/…
   [13] Get help | Project IDX - Google for Developers https://developers.google.com/idx/support/help
   [14] Project IDX troubleshooting & FAQ - Google for Developers https://developers.google.com/idx/guides/troubleshooting
   [15] Start Building with Project IDX Today - Google Developers Blog https://developers.googleblog.com/en/…
   [16] Beyond the Hype: Is Project IDX the Future or Just Fleeting? https://saltmarch.com/insight/…
   [17] 구글의 웹 기반 IDE 프로젝트 IDX 살펴보기 - d3h1 Blog https://blog.d3h1.com/Review-Project-IDX
   [18] Project IDX https://idx.dev
   [19] Project IDX: Google's New Web and Mobile App Development IDE https://thenewstack.io/project-idx-googles-new-web-and-mobile-app-deve…
   [20] Compare Duet AI vs. Project IDX in 2024 - Slashdot https://slashdot.org/software/comparison/Duet-AI-vs-Project-IDX/
"
"https://news.hada.io/topic?id=14944","실종된 기간의 미스터리한 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            실종된 기간의 미스터리한 사건

이메일 본문에서 사라진 마침표의 미스터리

  단순하지 않은 단순 메일 전송 프로토콜

     * Tjaart
          + 2024년 2월 20일
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

    문제 발생

     * 한 고객에게 보낸 이메일 본문에서 마침표가 사라졌다는 설명을 들음.
     * 동일한 이메일을 다른 고객에게 보냈을 때는 마침표가 사라지지 않음.

    프로젝트 회상

     * 약 7년 전, 문서 템플릿을 단일 시스템으로 통합하는 솔루션을 개발했음.
     * 클라이언트는 Microsoft Word 템플릿을 사용하여 문서에 자리 표시자를 넣었음.
     * 직원이 이메일로 문서를 보낼 때마다 자리 표시자를 실제 내용으로 교체해야 했음.

    템플릿 관리 문제

     * 여러 템플릿 버전이 존재하여 관리가 어려웠음.
     * 일부 템플릿은 오래된 약관, 로고, 글꼴 등을 사용하고 있었음.
     * 중앙에서 모든 템플릿을 관리할 수 있는 솔루션을 개발했음.

    솔루션 구현

     * 클라이언트는 PDF 문서, 문자 메시지, 이메일 본문을 생성할 템플릿을 중앙에서 관리할 수 있었음.
     * 예를 들어, 새로운 고객에게 보내는 환영 편지 템플릿을 설정할 수 있었음.
     * 각 전달 방법(이메일, 문자 메시지, 우편)에 따라 다른 템플릿을 구성할 수 있었음.

    문제 재현

     * 특정 고객에게 보낸 이메일에서만 마침표가 사라지는 문제 발생.
     * 템플릿 소스 코드에는 마침표가 포함되어 있었음.
     * 로컬 환경에서 이메일 본문을 미리보기 했을 때 마침표가 보였음.

    문제 원인 분석

     * 이메일 본문을 생성할 때 각 줄의 길이를 제한하는 코드가 있었음.
     * 줄이 길이를 초과하면 새로운 줄을 생성하고 나머지 내용을 이동시켰음.
     * SMTP 사양에 따르면, 줄이 마침표로 시작하면 추가 마침표를 삽입하고, 서버는 첫 번째 마침표를 삭제함.

    해결책

     * 코드 수정: 줄이 마침표로 시작하면 추가 마침표를 삽입하여 서버가 삭제해도 마침표가 남도록 함.
     * 수정된 코드를 테스트한 결과, 마침표가 사라지지 않음을 확인함.
     * 문제를 해결하고 다른 팀에도 버그를 알림.

    후속 문제

     * 몇 달 후, 다른 팀에서 동일한 버그를 수정하지 않아 중요한 이메일에서 마침표가 사라짐.
     * 일부 고객은 새로운 월간 요금이 $27.00 대신 $2700으로 표시된 이메일을 받음.
     * 즉시 코드 패치 후 문제 해결.


  GN⁺의 의견

    1. SMTP 사양 이해의 중요성: 이메일 전송 시 발생할 수 있는 문제를 해결하기 위해 SMTP 사양을 깊이 이해하는 것이 중요함.
    2. 템플릿 관리의 복잡성: 여러 버전의 템플릿을 관리하는 것은 복잡할 수 있으며, 중앙 관리 시스템이 필요함.
    3. 디버깅 기술: 문제를 재현하고 원인을 분석하는 디버깅 기술이 중요함.
    4. 팀 간 커뮤니케이션: 문제를 해결한 후 다른 팀과 정보를 공유하는 것이 중요함.
    5. 자동화된 테스트: 이러한 문제를 방지하기 위해 자동화된 테스트를 도입하는 것이 좋음.

   제목에서 period 를 마침표가 아니라 기간으로 처리한것 같네요 ㅎㅎ

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * SMTP 클라이언트 구현의 어려움
          + SMTP 클라이언트 구현은 어렵고, 제대로 구현되지 않으면 버그가 발생하기 쉬움. 템플릿 레이어는 SMTP를 신경 쓰지 않아야 함.
          + 많은 사람들이 터미널을 통해 기본 프로토콜을 배우지 않아서 이런 문제가 발생함. ""단일 점""으로 메시지를 끝내는 규칙은 중요함.
          + 많은 프로그래머들이 이스케이핑 개념을 이해하지 못함. ""단일 점""을 포함한 이메일을 보내는 상황을 고려하지 않음.
     * 독일의 추천서 이야기
          + 독일에서는 고용 종료 시 추천서를 받는 것이 일반적임. 추천서의 마지막 문장에 마침표가 없으면 부정적인 의미를 담고 있음.
          + 변호사에게 추천서를 검토받았을 때 마지막 문장에 마침표가 없어서 문제가 있었음.
     * 크론 잡과 SMTP 클라이언트
          + 이메일을 보내는 크론 잡이 자체 SMTP 클라이언트를 구현할 필요가 없음. mailutils 같은 프로그램을 사용하면 됨.
          + 기본적인 SMTP 상호작용을 소켓을 통해 구현하는 것은 비효율적임. TLS 연결과 인증이 필요함.
          + 크론은 이미 이메일을 보내는 기능을 가지고 있음. MAILTO 변수를 사용해 이메일 주소를 설정할 수 있음.
     * 두 가지 나쁜 습관
          + 표준을 대충 구현하지 말아야 함. 필요한 주의를 기울이거나 미리 만들어진 라이브러리를 사용해야 함.
          + 의존성을 벤더링하지 말아야 함. 라이브러리는 정기적으로 업데이트해야 함. 업데이트를 미루면 큰 문제가 발생할 수 있음.
     * 점 스터핑 필요
          + SMTP와 POP3에서 점 스터핑이 필요함. 관련 RFC 문서를 참조할 수 있음.
     * HTML MIME 첨부 파일 문제
          + ""We are happy to welcome you to our family."" 문장이 라인 제한에 걸리지 않음. HTML MIME 첨부 파일일 가능성이 있음.
          + HTML을 무작정 라인으로 나누면 태그가 깨질 수 있음.
     * 첫 번째 문자가 점인 경우
          + 첫 번째 문자가 점이고 다른 문자가 있는 경우 첫 번째 문자가 삭제됨. 단일 점이 메일의 끝을 의미하기 때문임.
          + 왜 점을 삭제하는지 이해하기 어려움. 다음 문자를 확인하기 위해 한 바이트를 저장할 수 있음.
     * 버그 패치 알림
          + SMTP 클라이언트 코드가 이전 프로젝트에서 가져온 것이라 다른 팀에게 버그를 알림.
          + 다른 팀이 이 버그를 패치하지 않았을 가능성이 있음.
     * NNTP 서버 구현 경험
          + RFC 사양을 기반으로 NNTP 서버를 구현하면서 점 스터핑 문제를 바로 이해함. 80년대 프로토콜임.
"
"https://news.hada.io/topic?id=15021","뛰어난 프로그래밍 언어 Hurl","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           뛰어난 프로그래밍 언어 Hurl

Hurl, 예외적인 언어

  개요

     * Hurl은 예외 처리를 유일한 제어 흐름으로 사용하는 언어를 탐구하기 위해 만들어진 언어임.
     * 이 언어는 Nicole Tietz-Sokolskaya와 Recurse Center 친구들 간의 대화에서 시작되었음.
     * 이 사이트는 Hurl 사용에 대한 문서, 예제, 디버깅 가이드 및 FAQ를 제공함.

  설치 및 사용법

     * Hurl의 소스 코드는 Hurl의 저장소에서 제공됨.
     * 버그나 오류를 발견하면 이메일 패치를 환영하지만, 패치에 대한 모든 권리를 양도해야 함.
     * 이는 재라이센스 및 상업적 라이센스를 유지하기 위함임.

  Hurl의 문법과 철학

     * Hurl은 예외 처리를 중심으로 한 언어임.
     * 제어 흐름을 예외 처리로만 구현함.

  일반적인 패턴

     * 예외 처리를 통해 제어 흐름을 관리함.
     * 전통적인 제어 구조(예: if, for)는 사용하지 않음.

  표준 라이브러리

     * Hurl은 표준 라이브러리를 제공함.
     * 예외 처리를 기반으로 한 다양한 기능을 포함함.

  예제

     * 다양한 예제 코드가 제공됨.
     * 예제 코드를 통해 Hurl의 사용법을 쉽게 이해할 수 있음.

  디버깅 및 오류

     * 디버깅 가이드가 제공됨.
     * 오류를 효과적으로 처리하는 방법을 설명함.

  FAQ

     * 자주 묻는 질문에 대한 답변을 제공함.
     * Hurl 사용 시 발생할 수 있는 일반적인 문제를 다룸.

  Hurl에 대한 찬사

     * Erika Rowland: ""이 괴물은 아름답고, 절대 손대고 싶지 않음. 내 이름이 이와 연관되길 원하지 않음.""
     * Nicole Tietz-Sokolskaya: ""이 언어를 현실로 만들기로 결정함. 미안함.""
     * Mary McGrath: ""🤮"" (사용 가능한 인용구인가?)
     * nate (@nmoo@mas.to): ""인증된 비정상™!""

  소스 코드

     * Hurl과 이 사이트의 소스 코드는 Hurl의 저장소에서 제공됨.
     * 이메일 패치를 환영하지만, 모든 권리를 양도해야 함.

  라이센스

     * 이 프로젝트는 다음 세 가지 라이센스 중 하나로 사용 가능함:
          + AGPL-3.0
          + GAL-1.0 (Gay Agenda License)
          + 상업적 라이센스
     * 세 가지 라이센스 중 하나를 선택하여 사용할 수 있음.

GN⁺의 의견

     * 예외 처리 중심의 언어: Hurl은 예외 처리를 제어 흐름의 중심으로 삼아 전통적인 제어 구조를 대체하는 독특한 접근 방식을 취함. 이는 개발자들에게 새로운 사고 방식을 요구함.
     * 교육적 가치: Hurl은 예외 처리의 중요성과 활용 방법을 깊이 이해하는 데 도움이 될 수 있음. 특히 예외 처리를 잘못 사용하는 경우의 문제점을 명확히 보여줌.
     * 실용성 문제: 실무에서 Hurl을 사용하는 것은 도전적일 수 있음. 전통적인 제어 구조에 익숙한 개발자들에게는 큰 장벽이 될 수 있음.
     * 커뮤니티와의 협력: Hurl의 소스 코드는 오픈소스로 제공되며, 커뮤니티의 참여를 장려함. 이는 프로젝트의 발전과 버그 수정에 긍정적인 영향을 미칠 수 있음.
     * 라이센스 선택: 다양한 라이센스를 제공하여 사용자에게 선택의 폭을 넓혀줌. 이는 프로젝트의 유연성을 높이는 데 기여함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 프로그래밍 언어 설계 시 네임스페이스와 임포트를 강제하는 것이 중요함
          + 네임스페이스와 임포트를 강제하면 코드 이해가 쉬워짐.
          + 최상위 레벨의 부작용을 허용하지 않는 것이 좋음.
     * 예외 처리에 대한 의견
          + 예외 처리는 호출자와 피호출자 간의 계약을 어렵게 만듦.
          + Go나 Rust처럼 반환 값을 통해 예외를 처리하는 것이 더 나음.
          + IDE가 모든 미처리 예외를 동적으로 감지하고, 예외 발생 지점을 쉽게 찾을 수 있게 해주면 좋을 것 같음.
     * 'toss' 사용 예제
          + 'toss'는 함수에서 여러 값을 반환할 때 주로 사용됨.
          + 즉시 재개하지 않는 경우를 제외하고는 유용하지 않음.
     * Hurl 언어와 조건 시스템
          + Hurl은 Smalltalk/CL의 조건 시스템과 유사함.
          + 조건 시스템은 여러 재시작 옵션을 제공함.
     * .wtf 도메인 확장자 사용
          + 더 많은 것들이 .wtf 도메인 확장자를 사용하면 세상이 더 나아질 것 같음.
     * 대수적 효과와 유사한 언어
          + 약한 형태의 대수적 효과와 유사하지만, 여전히 흥미로움.
     * Hurl 언어에 대한 혼합된 감정
          + Hurl 언어가 싫지만, 약간 우아한 면도 있음.
          + 재개 가능한 예외와 재개 불가능한 예외를 구분하는 구문이 있었으면 좋겠음.
          + 표준 라이브러리는 일반 값 반환 함수로 대체하지 말았어야 함.
     * 'toss'와 'hurl'의 차이
          + 'hurl'은 잡을 수 있지만 'toss'는 잡을 수 없음.
          + Hurl을 많이 쓰면 사람들이 나를 'tosser'라고 부를까 걱정됨.
     * 'toss' 언어 구조
          + 'toss'는 예외 핸들러를 찾기 위해 스택을 탐색하고, 아무 일도 없었던 것처럼 실행을 재개함.
          + 런타임에 추가 동작을 주입할 수 있음.
          + 객체 지향 코드에서는 서비스 생성자를 통해 의존성 주입을 하지만, 'toss'는 'toss 핸들러'를 사용함.
"
"https://news.hada.io/topic?id=14945","[2024/05/13 ~ 05/19] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2024/05/13 ~ 05/19] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주에 제출된 논문들을 통해 관찰할 수 있는 주요 추세는 자연어 처리(NLP)와 강화학습(RL)에 초점을 맞춘 연구들이 다수 포함되어 있다는 것입니다. 예를 들어, ""GPT-4o"", ""Fine-tuning and Hallucinations"", 그리고 ""Zero-shot Tokenizer Transfer""는 자연어 처리와 관련된 최신 기술과 방법론을 다루고 있으며, 특히, 생성 모델과 토크나이저 전이 학습 같은 분야에서의 발전을 탐구하고 있습니다. 이외에도 ""RLHF Workflow""에서는 강화학습을 활용한 효율적인 학습 과정 설계에 관한 연구를 제시하고 있으며, 이는 RL 분야의 실용적 응용 가능성을 확장하려는 시도로 볼 수 있습니다.
     * 이러한 추세는 인공지능 기술, 특히 기계학습 및 심층학습의 발전에 있어 핵심적인 역할을 하는 자연어 처리 및 강화학습의 중요성이 갈수록 증가하고 있음을 반영합니다. 최근 몇 년간 GPT와 같은 언어 생성 모델의 폭발적인 성장과 함께, 이들의 응용 범위는 계속해서 넓어지고 있으며, 이는 연구자들 사이에서도 이러한 모델을 더욱 정교하게 튜닝하고, 기존 모델들의 약점을 보완하기 위한 연구에 많은 관심을 기울이게 만들었습니다. 또한, 강화학습은 의사결정과정을 최적화하고, 복잡한 환경에서의 학습능력을 향상시키는 데 중요한 기법으로 자리잡았으며, 이는 학습 효율성을 극대화하고자 하는 현재의 연구 경향과도 맥을 같이 합니다.
     * 따라서 이번 주에 제출된 논문들은 학계와 산업계에서의 연구개발 노력이 어떤 방향으로 진행되고 있는지를 잘 보여주고 있습니다. 자연어 처리는 인간과 기계 간의 상호작용을 보다 자연스럽고 효율적으로 만들기 위한 기술의 핵심이며, 강화학습은 이러한 상호작용을 기반으로 한 의사결정 과정을 최적화하는 데 중요한 역할을 합니다. 이러한 연구 동향은 앞으로도 계속해서 진화할 인공지능 기술의 미래 방향성을 제시해주는 중요한 지표가 될 것입니다.


  GPT-4o

    소개

   오디오, 시각, 텍스트를 실시간으로 지원하는 멀티모달 추론 기능을 갖춘 새로운 모델로, 텍스트, 오디오, 이미지, 비디오의 모든 조합을 입력으로 받아 텍스트, 오디오, 이미지 출력의 조합을 생성할 수 있으며, API를 통해 50% 훨씬 빠르고 저렴하면서도 GPT-4 터보 성능과 동일한 것으로 보고되고 있습니다.

     A new model with multimodal reasoning capabilities with real-time support across audio, vision, and text; it can accept as input any combination of text, audio, image, and video to generate combinations of text, audio, and image outputs; it’s reported to match GPT-4 Turbo performance while being 50% much faster and cheaper via APIs.

    관련 링크

   https://openai.com/index/hello-gpt-4o/

    더 읽어보기

   https://discuss.pytorch.kr/t/openai-gpt-4o-gpt-4o/4362

   https://x.com/OpenAI/status/1790072174117613963


  제미나이 1.5 플래시 / Gemini 1.5 Flash

    논문 소개

   멀티모달 기능을 갖춘 2M 컨텍스트 창을 갖춘 경량 트랜스포머 디코더 모델로, 효율성을 위해 설계되었으며 여러 평가 언어에서 모든 모델 중 가장 빠른 출력 생성을 제공합니다. 전체적으로 Gemini 1.5 Flash는 Gemini 1.0 Pro에 비해 균일하게 우수한 성능을 보이며 여러 벤치마크에서 1.0 Ultra와 비슷한 수준의 성능을 보였습니다.

     A lightweight transformer decoder model with a 2M context window with multimodal capabilities; it is designed for efficiency and yields the fastest output generation of all models on several evaluated languages; overall, Gemini 1.5 Flash performs uniformly better compared to Gemini 1.0 Pro and even performs at a similar level to 1.0 Ultra on several benchmarks.

    논문 초록 (Abstract)

   이 보고서에서는 여러 개의 긴 문서와 몇 시간 분량의 비디오 및 오디오 등 수백만 개의 컨텍스트 토큰에서 세분화된 정보를 기억하고 추론할 수 있는 컴퓨팅 효율성이 뛰어난 차세대 멀티모달 모델을 대표하는 Gemini 1.5 모델 제품군을 소개합니다. 이 제품군에는 (1) 대부분의 기능과 벤치마크에서 2월 버전을 능가하는 업데이트된 Gemini 1.5 Pro와 (2) 품질 저하를 최소화하면서 효율성을 위해 설계된 더욱 가벼운 버전인 Gemini 1.5 Flash의 두 가지 새로운 모델이 포함됩니다. Gemini 1.5 모델은 여러 모달리티에 걸쳐 긴 컨텍스트 검색 작업에서 거의 완벽한 리콜을 달성하고, 긴 문서 QA, 긴 동영상 QA 및 긴 컨텍스트 ASR에서 최첨단 성능을 개선하며, 광범위한 벤치마크에서 Gemini 1.0 Ultra의 최첨단 성능과 일치하거나 이를 능가합니다. Gemini 1.5의 긴 컨텍스트 기능의 한계를
   연구한 결과, 다음 토큰 예측과 완벽에 가까운 검색(99% 이상)이 최소 1,000만 토큰까지 지속적으로 개선되어 Claude 3.0(200만) 및 GPT-4 Turbo(128만) 같은 기존 모델보다 한 세대 이상 도약한 것으로 나타났습니다. 마지막으로, 10가지 직종에서 26~75%의 시간 절약을 달성한 Gemini 1.5의 업무 완료에 대한 전문직과의 협업과 같은 실제 사용 사례와 전 세계적으로 사용자가 200명 미만인 언어인 칼라망어 문법 매뉴얼이 주어지면 모델이 동일한 콘텐츠로 학습한 사람과 비슷한 수준으로 영어를 칼라망어로 번역하는 놀라운 새로운 기능에 대해 살펴봅니다.

     In this report, we introduce the Gemini 1.5 family of models, representing the next generation of highly compute-efficient multimodal models capable of recalling and reasoning over fine-grained information from millions of tokens of context, including multiple long documents and hours of video and audio. The family includes two new models: (1) an updated Gemini 1.5 Pro, which exceeds the February version on the great majority of capabilities and benchmarks; (2) Gemini 1.5 Flash, a more lightweight variant designed for efficiency with minimal regression in quality. Gemini 1.5 models achieve near-perfect recall on long-context retrieval tasks across modalities, improve the state-of-the-art in long-document QA, long-video QA and long-context ASR, and match or surpass Gemini 1.0 Ultra’s state-of-the-art performance across a broad set of benchmarks. Studying the limits of Gemini 1.5’s long-context ability, we find continued improvement in next-token prediction and near-perfect
     retrieval (>99%) up to at least 10M tokens, a generational leap over existing models such as Claude 3.0 (200k) and GPT-4 Turbo (128k). Finally, we highlight real-world use cases, such as Gemini 1.5 collaborating with professions on their completing their tasks achieving 26 to 75% time savings across 10 different job categories, as well as surprising new capabilities of large language models at the frontier; when given a grammar manual for Kalamang, a language with fewer than 200 speakers worldwide, the model learns to translate English to Kalamang at a similar level to a person who learned from the same content.

    논문 링크

   https://storage.googleapis.com/deepmind-media/gemini/…

    더 읽어보기

   https://discuss.pytorch.kr/t/gn-google-i-o-2024/4371

   https://x.com/OriolVinyalsML/status/1791521517211107515


  Veo

    소개

   구글 딥마인드의 가장 뛰어난 동영상 생성 모델은 1분 이상의 고화질 1080p 해상도 동영상을 생성하고, 동영상에서 마스크 편집을 지원하며, 텍스트와 함께 입력된 이미지로 동영상을 생성할 수도 있고, 잠재 확산 변환기를 통해 일관성을 유지하면서 동영상 클립을 60초 이상으로 확장할 수도 있습니다.

     Google Deepmind’s most capable video generation model generates high-quality, 1080p resolution videos beyond 1 minute; it supports masked editing on videos and can also generate videos with an input image along with text; the model can extend video clips to 60 seconds and more while keeping consistency with its latent diffusion transformer.

    관련 링크

   https://deepmind.google/technologies/veo/

    더 읽어보기

   https://discuss.pytorch.kr/t/veo-google-deepmind/4385

   https://x.com/GoogleDeepMind/status/1790435824598716704


  카멜레온: 혼합-모달 초기 융합 파운데이션 모델 / Chameleon: Mixed-Modal Early-Fusion Foundation Models

    논문 소개

   임의의 순서로 이미지와 텍스트를 생성하기 위한 토큰 기반 혼합 모달 모델 제품군, 이미지 캡션에서 최첨단 성능을 보고하고 텍스트 전용 작업에서 라마 2를 능가하며 Mixtral 8x7B 및 Gemini-Pro와도 경쟁, 새로운 롱폼 혼합 모달 생성 평가에서 제미니 프로 및 GPT-4V의 성능을 능가합니다.

     A family of token-based mixed-modal models for generating images and text in any arbitrary sequence; reports state-of-the-art performance in image captioning and outperforms Llama 2 in text-only tasks and is also competitive with Mixtral 8x7B and Gemini-Pro; exceeds the performance of Gemini Pro and GPT-4V on a new long-form mixed-modal generation evaluation.

    논문 초록(Abstract)

   임의의 시퀀스에서 이미지와 텍스트를 이해하고 생성할 수 있는 초기 융합 토큰 기반 혼합 모달 모델 제품군인 카멜레온을 소개합니다. 초기부터 안정적인 훈련 접근 방식, 얼라인먼트 레시피, 초기 융합 토큰 기반 혼합 모달 설정에 맞춘 아키텍처 매개변수화에 대해 설명합니다. 시각적 질문 답변, 이미지 캡션, 텍스트 생성, 이미지 생성, 긴 형식의 혼합 모달 생성 등 포괄적인 범위의 작업에서 모델을 평가합니다. 카멜레온은 이미지 캡션 작업에서 최첨단 성능을 비롯하여 광범위하고 일반적인 기능을 보여주며, 텍스트 전용 작업에서 Llama-2를 능가하는 동시에 Mixtral 8x7B 및 Gemini-Pro와 같은 모델과 경쟁하고, 단일 모델에서 사소한 이미지 생성도 수행합니다. 또한 프롬프트 또는 출력물에 이미지와 텍스트가 혼합된 시퀀스가 포함된 새로운 긴 형식의 혼합
   모달 생성 평가에서 사람이 직접 판단한 결과에 따르면 Gemini Pro 및 GPT-4V를 포함한 훨씬 더 큰 모델의 성능과 일치하거나 이를 능가합니다. 카멜레온은 전체 멀티모달 문서의 통합 모델링에서 중요한 진전을 이루었습니다.

     We present Chameleon, a family of early-fusion token-based mixed-modal models capable of understanding and generating images and text in any arbitrary sequence. We outline a stable training approach from inception, an alignment recipe, and an architectural parameterization tailored for the early-fusion, token-based, mixed-modal setting. The models are evaluated on a comprehensive range of tasks, including visual question answering, image captioning, text generation, image generation, and long-form mixed modal generation. Chameleon demonstrates broad and general capabilities, including state-of-the-art performance in image captioning tasks, outperforms Llama-2 in text-only tasks while being competitive with models such as Mixtral 8x7B and Gemini-Pro, and performs non-trivial image generation, all in a single model. It also matches or exceeds the performance of much larger models, including Gemini Pro and GPT-4V, according to human judgments on a new long-form mixed-modal
     generation evaluation, where either the prompt or outputs contain mixed sequences of both images and text. Chameleon marks a significant step forward in a unified modeling of full multimodal documents.

    논문 링크

   https://arxiv.org/abs/2405.09818

    더 읽어보기

   https://x.com/AIatMeta/status/1791263344714014733


  새로운 지식에 대한 LLM을 미세 조정하는 것이 환각을 조장할까요? / Does Fine-Tuning LLMs on New Knowledge Encourage Hallucinations?

    논문 소개

   새로운 지식에 대한 미세 조정이 학습자의 환각 성향에 미치는 영향을 연구하고, 새로운 지식이 포함된 미세 조정 예제를 설정하여 학습자가 미세 조정을 통해 새로운 사실적 지식을 습득하는 데 어려움을 겪는다는 것을 보여주며, 새로운 지식을 학습할수록 모델의 환각 성향이 증가한다는 사실을 발견합니다.

     Studies the impact of fine-tuning on new knowledge on the hallucination tendencies of LLMs; the setup includes fine-tuning examples that include new knowledge; shows that LLMs struggle to acquire new factual knowledge via fine-tuning; also finds that as new knowledge is learned it increases the model’s tendency to hallucinate.

    논문 초록(Abstract)

   대규모 언어 모델이 감독된 미세 조정을 통해 조정되면 사전 학습을 통해 획득하지 못한 새로운 사실 정보를 접할 수 있습니다. 이 경우 모델이 기존 지식에 근거하지 않은 사실을 생성하도록 훈련되기 때문에 사실과 다른 응답을 환각하는 행동을 학습할 수 있다고 추측되기도 합니다. 이 연구에서는 새로운 지식에 대한 이러한 노출이 미세 조정된 모델이 기존 지식을 활용하는 능력에 미치는 영향을 연구합니다. 이를 위해 새로운 지식을 도입하는 미세 조정 예제의 비율을 변화시키는 비공개 QA에 초점을 맞춘 통제된 설정을 설계합니다. 새로운 지식을 도입하는 미세 조정 예제는 모델의 지식과 일치하는 예제보다 훨씬 느리게 학습되기 때문에 대규모 언어 모델이 미세 조정을 통해 새로운 사실적 지식을 습득하는 데 어려움을 겪는다는 사실을
   입증했습니다. 그러나 새로운 지식이 포함된 예시가 결국 학습됨에 따라 모델의 환각 경향이 선형적으로 증가한다는 사실도 발견했습니다. 이러한 연구 결과를 종합하면, 미세 조정을 통해 새로운 사실 지식을 도입할 때의 위험성을 강조하며, 대규모 언어 모델은 대부분 사전 학습을 통해 사실 지식을 습득하는 반면 미세 조정을 통해 더 효율적으로 사용하도록 가르친다는 견해를 뒷받침합니다.

     When large language models are aligned via supervised fine-tuning, they may encounter new factual information that was not acquired through pre-training. It is often conjectured that this can teach the model the behavior of hallucinating factually incorrect responses, as the model is trained to generate facts that are not grounded in its pre-existing knowledge. In this work, we study the impact of such exposure to new knowledge on the capability of the fine-tuned model to utilize its pre-existing knowledge. To this end, we design a controlled setup, focused on closed-book QA, where we vary the proportion of the fine-tuning examples that introduce new knowledge. We demonstrate that large language models struggle to acquire new factual knowledge through fine-tuning, as fine-tuning examples that introduce new knowledge are learned significantly slower than those consistent with the model's knowledge. However, we also find that as the examples with new knowledge are eventually
     learned, they linearly increase the model's tendency to hallucinate. Taken together, our results highlight the risk in introducing new factual knowledge through fine-tuning, and support the view that large language models mostly acquire factual knowledge through pre-training, whereas fine-tuning teaches them to use it more efficiently.

    논문 링크

   https://arxiv.org/abs/2405.05904

    더 읽어보기

   https://x.com/arankomatsuzaki/status/1788859706187882960


  제로샷 토큰나이저 전이 / Zero-Shot Tokenizer Transfer

    논문 소개

   토큰화기를 입력으로 받아 해당 임베딩을 예측하는 하이퍼네트워크를 훈련하고, 인코더와 디코더 LLM을 통해 새로운 토큰화기에 대한 일반화를 시연하며, 이 방법이 다국어 및 코딩 작업에서 원래 모델의 성능에 가까운 성능을 달성하는 동시에 토큰화된 시퀀스의 길이를 줄인다고 보고합니다.

     Trains a hypernetwork taking a tokenizer as input and predicting the corresponding embeddings; it demonstrates generalization to new tokenizers both with encoder and decoder LLMs; reports that the method achieves performance close to the original models' performance in cross-lingual and coding tasks while reducing the length of the tokenized sequence.

    논문 초록(Abstract)

   언어 모델(LM)은 원시 텍스트를 일련의 어휘 항목(토큰)에 매핑하는 토큰화기에 바인딩됩니다. 예를 들어, 영어를 중심으로 학습된 LM은 다른 자연어 및 프로그래밍 언어에서는 여전히 잘 작동할 수 있지만 영어 중심의 토큰화 도구로 인해 효율성이 크게 떨어질 수 있습니다. 이를 완화하기 위해서는 성능 저하 없이 원래의 LM 토큰화기를 임의의 토큰화기로 즉시 교체할 수 있어야 합니다. 따라서 이번 작업에서는 제로샷 토큰화 전송(ZeTT)이라는 새로운 문제를 정의합니다. ZeTT의 핵심 과제는 새로운 토큰화 도구의 어휘에서 토큰을 위한 임베딩을 찾는 것입니다. 임베딩을 초기화하기 위한 이전의 휴리스틱은 종종 ZeTT 환경에서 우연적인 수준에서 수행되기 때문에, 저희는 토큰화자를 입력으로 받아 해당 임베딩을 예측하는 하이퍼네트워크를 훈련시키는 새로운
   솔루션을 제안합니다. 이 하이퍼네트워크가 인코더(예: XLM-R)와 디코더 LLM(예: Mistral-7B) 모두에서 새로운 토큰화기에 일반화된다는 것을 경험적으로 증명합니다. 우리의 방법은 다국어 및 코딩 작업에서 원래 모델의 성능에 근접하면서도 토큰화된 시퀀스의 길이를 현저하게 줄입니다. 또한 1B 미만의 토큰에 대한 지속적인 학습을 통해 나머지 격차를 빠르게 좁힐 수 있음을 발견했습니다. 마지막으로, 기본 (L)LM에 대해 훈련된 ZeTT 하이퍼네트워크는 추가 훈련 없이도 미세 조정된 변형에도 적용될 수 있음을 보여줍니다. 전반적으로, 저희의 결과는 토큰화 기법에서 LM을 분리하는 데 상당한 진전을 이루었습니다.

     Language models (LMs) are bound to their tokenizer, which maps raw text to a sequence of vocabulary items (tokens). This restricts their flexibility: for example, LMs trained primarily on English may still perform well in other natural and programming languages, but have vastly decreased efficiency due to their English-centric tokenizer. To mitigate this, we should be able to swap the original LM tokenizer with an arbitrary one, on the fly, without degrading performance. Hence, in this work we define a new problem: Zero-Shot Tokenizer Transfer (ZeTT). The challenge at the core of ZeTT is finding embeddings for the tokens in the vocabulary of the new tokenizer. Since prior heuristics for initializing embeddings often perform at chance level in a ZeTT setting, we propose a new solution: we train a hypernetwork taking a tokenizer as input and predicting the corresponding embeddings. We empirically demonstrate that the hypernetwork generalizes to new tokenizers both with
     encoder (e.g., XLM-R) and decoder LLMs (e.g., Mistral-7B). Our method comes close to the original models' performance in cross-lingual and coding tasks while markedly reducing the length of the tokenized sequence. We also find that the remaining gap can be quickly closed by continued training on less than 1B tokens. Finally, we show that a ZeTT hypernetwork trained for a base (L)LM can also be applied to fine-tuned variants without extra training. Overall, our results make substantial strides toward detaching LMs from their tokenizer.

    논문 링크

   https://arxiv.org/abs/2405.07883

    더 읽어보기

   https://x.com/bminixhofer/status/1790267652587258343


  WavCraft: 대규모 언어 모델을 사용한 오디오 편집 및 생성 / WavCraft: Audio Editing and Generation with Large Language Models

    논문 소개

   오디오 콘텐츠 제작 및 편집을 위해 작업별 모델을 연결하고, 사용자의 지시를 여러 작업으로 분해하여 각 작업을 특정 모듈과 공동으로 처리하며, 사용자가 명시적인 명령 없이도 오디오 콘텐츠와 상호 작용하고 제작할 수 있도록 지원하는 LLM을 활용합니다

     Leverages LLMs to connect task-specific models for audio content creation and editing; decomposes users' instructions into several tasks and tackles each task collaboratively with the particular module; it can enable users to interact and produce audio content without explicit commands

    논문 초록(Abstract)

   대규모 언어 모델(LLM)을 활용하여 오디오 콘텐츠 제작 및 편집을 위한 다양한 작업별 모델을 연결하는 종합 시스템인 WavCraft를 소개합니다. 구체적으로 WavCraft는 원시 오디오 자료의 콘텐츠를 자연어로 설명하고 오디오 설명과 사용자 요청에 따라 LLM을 조정합니다. WavCraft는 LLM의 컨텍스트 내 학습 기능을 활용하여 사용자의 지시를 여러 작업으로 분해하고 각 작업을 특정 모듈과 공동으로 처리합니다. 일련의 작업별 모델과 함께 작업 분해를 통해 WavCraft는 입력 지시를 따라 더 자세한 내용과 근거를 가진 오디오 콘텐츠를 만들거나 편집하여 사용자 제어를 용이하게 합니다. 또한 WavCraft는 대화 상호 작용을 통해 사용자와 협력할 수 있으며 명시적인 사용자 명령 없이 오디오 콘텐츠를 제작할 수도 있습니다. 실험 결과, 특히 오디오 클립의 로컬 영역을 조정할
   때 기존 방식보다 WavCraft가 더 나은 성능을 발휘하는 것으로 나타났습니다. 또한 WavCraft는 복잡한 지침에 따라 입력된 녹음 위에 오디오 콘텐츠를 편집하고 제작할 수 있어 광범위한 애플리케이션에서 오디오 제작자를 지원할 수 있습니다. 구현 및 데모는 여기(https://github.com/JinhuaLiang/WavCraft)에서 확인할 수 있습니다.

     We introduce WavCraft, a collective system that leverages large language models (LLMs) to connect diverse task-specific models for audio content creation and editing. Specifically, WavCraft describes the content of raw audio materials in natural language and prompts the LLM conditioned on audio descriptions and user requests. WavCraft leverages the in-context learning ability of the LLM to decomposes users' instructions into several tasks and tackle each task collaboratively with the particular module. Through task decomposition along with a set of task-specific models, WavCraft follows the input instruction to create or edit audio content with more details and rationales, facilitating user control. In addition, WavCraft is able to cooperate with users via dialogue interaction and even produce the audio content without explicit user commands. Experiments demonstrate that WavCraft yields a better performance than existing methods, especially when adjusting the local regions
     of audio clips. Moreover, WavCraft can follow complex instructions to edit and create audio content on the top of input recordings, facilitating audio producers in a broader range of applications. Our implementation and demos are available at this https://github.com/JinhuaLiang/WavCraft.

    논문 링크

   https://arxiv.org/abs/2403.09527v3

    더 읽어보기

   https://github.com/JinhuaLiang/WavCraft


  RLHF 워크플로: 보상 모델링에서 온라인 RLHF까지 / RLHF Workflow: From Reward Modeling to Online RLHF

    논문 소개

   온라인 반복적 RLHF를 쉽게 재현할 수 있는 레시피를 제공하고, 온라인 반복적 RLHF의 이론적 통찰력과 알고리즘 원리 및 실제 구현에 대해 설명합니다.

     Provides an easily reproducible recipe for online iterative RLHF; discusses theoretical insights and algorithmic principles of online iterative RLHF and practical implementation.

    논문 초록(Abstract)

   이 기술 보고서에서는 최근 대규모 언어 모델(LLM) 문헌에서 오프라인보다 큰 폭으로 성능이 뛰어난 것으로 널리 보고된 온라인 반복적 강화 학습(RLHF)의 워크플로우를 소개합니다. 그러나 기존의 오픈 소스 RLHF 프로젝트는 여전히 오프라인 학습 환경에 국한되어 있습니다. 이 기술 보고서에서는 이러한 간극을 메우고 온라인 반복 RLHF에 쉽게 재현할 수 있는 상세한 레시피를 제공하는 것을 목표로 합니다. 특히, 리소스가 제한된 오픈소스 커뮤니티에서는 일반적으로 온라인 인적 피드백이 불가능하기 때문에 다양한 오픈소스 데이터 세트를 사용하여 선호도 모델을 구축하고, 구축된 프록시 선호도 모델을 사용하여 인적 피드백을 근사화하는 것부터 시작합니다. 그런 다음 온라인 반복적 RLHF의 이론적 인사이트와 알고리즘 원리에 대해 논의한 다음 세부적인
   실제 구현을 살펴봅니다. 훈련된 LLM인 SFR-Iterative-DPO-LLaMA-3-8B-R은 알파카에벌-2, 아레나-하드, MT-벤치 등 LLM 챗봇 벤치마크는 물론 휴먼에벌, 트루스풀QA 등 기타 학술 벤치마크에서 인상적인 성능을 달성했습니다. 저희는 감독 미세 조정(SFT)과 반복적 RLHF가 완전한 오픈 소스 데이터 세트를 통해 최첨단 성능을 얻을 수 있음을 보여주었습니다. 또한, 모델, 선별된 데이터 세트, 포괄적인 단계별 코드 가이드북을 공개적으로 사용할 수 있도록 했습니다. 자세한 내용은 https://github.com/RLHFlow/RLHF-Reward-Modeling 및 https://github.com/RLHFlow/Online-RLHF 을 참조하세요.

     We present the workflow of Online Iterative Reinforcement Learning from Human Feedback (RLHF) in this technical report, which is widely reported to outperform its offline counterpart by a large margin in the recent large language model (LLM) literature. However, existing open-source RLHF projects are still largely confined to the offline learning setting. In this technical report, we aim to fill in this gap and provide a detailed recipe that is easy to reproduce for online iterative RLHF. In particular, since online human feedback is usually infeasible for open-source communities with limited resources, we start by constructing preference models using a diverse set of open-source datasets and use the constructed proxy preference model to approximate human feedback. Then, we discuss the theoretical insights and algorithmic principles behind online iterative RLHF, followed by a detailed practical implementation. Our trained LLM, SFR-Iterative-DPO-LLaMA-3-8B-R, achieves
     impressive performance on LLM chatbot benchmarks, including AlpacaEval-2, Arena-Hard, and MT-Bench, as well as other academic benchmarks such as HumanEval and TruthfulQA. We have shown that supervised fine-tuning (SFT) and iterative RLHF can obtain state-of-the-art performance with fully open-source datasets. Further, we have made our models, curated datasets, and comprehensive step-by-step code guidebooks publicly available. Please refer to https://github.com/RLHFlow/RLHF-Reward-Modeling and https://github.com/RLHFlow/Online-RLHF for more detailed information.

    논문 링크

   https://arxiv.org/abs/2405.07863v1

    더 읽어보기

   https://github.com/RLHFlow/RLHF-Reward-Modeling 및 https://github.com/RLHFlow/Online-RLHF

   https://x.com/CaimingXiong/status/1790379121719361776


  한 번만 캐시합니다: 언어 모델용 디코더-디코더 아키텍처 / You Only Cache Once: Decoder-Decoder Architectures for Language Models

    논문 소개

   키-값 쌍을 한 번만 캐시하는 디코더-디코더 LLM 아키텍처는 글로벌 키-값 캐시를 효율적으로 인코딩하는 자체 디코더 위에 크로스 디코더를 쌓고 크로스 인코더가 크로스 어텐션을 통해 캐시를 재사용함으로써 기능 저하 없이 GPU 메모리 사용을 크게 줄이고, 모델 크기와 학습 토큰 수를 확장하는 다양한 설정에서 Transformer와 비슷한 성능을 달성할 수 있습니다.

     A decoder-decoder LLM architecture that only caches key-value pairs once; it involves a cross-decoder stacked upon a self-decoder which efficiently encodes global key-value caches and the cross-encoder reuses the cache via cross-attention; this leads to a significant reduction in GPU memory use without sacrificing capabilities; achieves comparable performance to Transformer in various settings of scaling up model size and number of training token.

    논문 초록(Abstract)

   대규모 언어 모델을 위해 키-값 쌍을 한 번만 캐시하는 디코더-디코더 아키텍처인 YOCO를 소개합니다. 이 아키텍처는 셀프 디코더 위에 쌓인 크로스 디코더라는 두 가지 구성 요소로 이루어져 있습니다. 셀프 디코더는 크로스 어텐션을 통해 크로스 디코더에서 재사용되는 글로벌 키-값(KV) 캐시를 효율적으로 인코딩합니다. 전체 모델은 디코더 전용 트랜스포머처럼 작동하지만, YOCO는 캐시를 한 번만 사용합니다. 이 설계는 GPU 메모리 수요를 크게 줄이면서도 글로벌 어텐션 기능을 유지합니다. 또한 계산 흐름은 최종 출력을 변경하지 않고도 프리필에서 조기 종료까지 가능하므로 프리필 단계의 속도가 크게 빨라집니다. 실험 결과에 따르면 YOCO는 모델 크기와 훈련 토큰 수를 확장하는 다양한 설정에서 Transformer에 비해 유리한 성능을 달성했습니다. 또한 YOCO는
   거의 완벽한 바늘 검색 정확도로 1M 컨텍스트 길이까지 확장되었습니다. 프로파일링 결과에 따르면 YOCO는 컨텍스트 길이와 모델 크기에 따라 추론 메모리, 프리필 지연 시간, 처리량이 크게 향상되는 것으로 나타났습니다. 코드는 https://aka.ms/YOCO 에서 확인할 수 있습니다.

     We introduce a decoder-decoder architecture, YOCO, for large language models, which only caches key-value pairs once. It consists of two components, i.e., a cross-decoder stacked upon a self-decoder. The self-decoder efficiently encodes global key-value (KV) caches that are reused by the cross-decoder via cross-attention. The overall model behaves like a decoder-only Transformer, although YOCO only caches once. The design substantially reduces GPU memory demands, yet retains global attention capability. Additionally, the computation flow enables prefilling to early exit without changing the final output, thereby significantly speeding up the prefill stage. Experimental results demonstrate that YOCO achieves favorable performance compared to Transformer in various settings of scaling up model size and number of training tokens. We also extend YOCO to 1M context length with near-perfect needle retrieval accuracy. The profiling results show that YOCO improves inference memory,
     prefill latency, and throughput by orders of magnitude across context lengths and model sizes. Code is available at https://aka.ms/YOCO.

    논문 링크

   https://arxiv.org/abs/2405.05254

    더 읽어보기

   https://github.com/microsoft/unilm/tree/master/YOCO

   https://x.com/arankomatsuzaki/status/1788435838474355098


  CAT3D: 멀티뷰 확산 모델로 무엇이든 3D로 제작하기 / CAT3D: Create Anything in 3D with Multi-View Diffusion Models

    논문 소개

   멀티뷰 확산 모델을 사용하여 실제 캡처 과정을 시뮬레이션하여 무엇이든 3D로 생성하는 방법을 제시하고, 3D 재구성 기술에 입력으로 사용할 수 있는 장면의 일관된 새로운 뷰를 생성하여 실시간으로 렌더링된 3D 표현을 생성할 수 있으며, CAT3D의 장면은 1분 이내에 생성할 수 있고 단일 이미지 및 소수 뷰 3D 장면 생성 작업에서 기존 방법보다 성능이 뛰어난 것으로 보고되고 있습니다.

     Presents a method for creating anything in 3D by simulating the real-world capture process using a multi-view diffusion model; it can generate consistent novel views of a scene which can be used as input to 3D reconstruction techniques to produce 3D representation rendered in real-time; the scene from CAT3D can be generated in less than one minute and is reported to outperform existing methods on single image and few-view 3D scene creation tasks.

    논문 초록(Abstract)

   3D 재구성의 발전으로 고품질 3D 캡처가 가능해졌지만, 3D 장면을 만들려면 수백에서 수천 개의 이미지를 수집해야 합니다. 유니티는 이 실제 캡처 과정을 멀티뷰 확산 모델로 시뮬레이션하여 무엇이든 3D로 생성할 수 있는 방법인 CAT3D를 소개합니다. 입력 이미지의 수와 목표 신규 시점 세트가 주어지면 유니티의 모델은 장면의 매우 일관된 신규 시점을 생성합니다. 이렇게 생성된 뷰는 강력한 3D 재구성 기법의 입력으로 사용되어 모든 시점에서 실시간으로 렌더링할 수 있는 3D 표현을 생성할 수 있습니다. CAT3D는 단 1분 만에 전체 3D 장면을 생성할 수 있으며, 단일 이미지 및 소수 뷰 3D 장면 생성에 있어 기존 방식보다 뛰어난 성능을 발휘합니다. 결과물과 인터랙티브 데모는 프로젝트 페이지(https://cat3d.github.io)를 참조하세요.

     Advances in 3D reconstruction have enabled high-quality 3D capture, but require a user to collect hundreds to thousands of images to create a 3D scene. We present CAT3D, a method for creating anything in 3D by simulating this real-world capture process with a multi-view diffusion model. Given any number of input images and a set of target novel viewpoints, our model generates highly consistent novel views of a scene. These generated views can be used as input to robust 3D reconstruction techniques to produce 3D representations that can be rendered from any viewpoint in real-time. CAT3D can create entire 3D scenes in as little as one minute, and outperforms existing methods for single image and few-view 3D scene creation. See our project page for results and interactive demos at https://cat3d.github.io .

    논문 링크

   https://arxiv.org/abs/2405.10314

    더 읽어보기

   https://cat3d.github.io

   https://x.com/_akhaliq/status/1791294630614442009
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-ed5


   이 글은 GPT 모델로 정리한 것으로, 잘못된 부분이 있을 수 있으니 글 아래쪽의 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다. 🤗

   ⚠️광고⚠️: 🔥파이토치 한국 사용자 모임🇰🇷이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일💌로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=14965","Khan Academy의 살 칸, 다시 한번 교육 혁신을 선도하다 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Khan Academy의 살 칸, 다시 한번 교육 혁신을 선도하다

     * 빌게이츠의 책 추천사
     * Sal Khan은 Khan Academy를 설립하여 1억 5천만 명 이상의 사람들에게 교육 콘텐츠를 제공해 왔음
     * 그의 저서 ""Brave New Words""에서는 AI가 교육에 활용되는 다양한 방식을 예측하고 있음
          + AI를 통해 학생들의 학습 결과와 교사의 경험이 크게 향상될 것
          + AI 기술로 인해 모든 사람이 세계 최고 수준의 교육을 받을 수 있는 미래가 올 것
          + AI 기반 교사인 Khanmigo를 만든 경험을 바탕으로 설득력 있는 사례를 제시
     * AI 튜터는 학생 개개인에게 맞춤형 학습, 지원, 지도를 제공할 수 있음
          + 예를 들어, 수학에 어려움을 겪는 7학년 학생의 경우:
               o AI 튜터는 문제를 이해하기 쉬운 단계로 나누어 설명해 줌
               o 학생이 막히는 부분에서는 쉽게 이해할 수 있는 설명과 방향을 제시해 줌
               o 학생이 답을 찾으면 이해도와 자신감을 높일 수 있는 연습 문제를 생성해 줌
          + AI 튜터를 통해 역사적 인물과 대화를 나누며 과거를 생생하게 경험할 수 있음
          + 에세이 작성 시에는 아이디어 구상, 개요 작성, 실시간 피드백 등을 도와줌
     * AI 사용이 부정행위로 간주될 수 있는지에 대한 복잡한 문제가 있음
          + 하지만 친구나 가족에게 피드백을 받거나 맞춤법 검사기 등을 사용하는 것이 부정행위로 여겨지지 않듯이, AI도 학생들이 막히는 부분을 해결하는 데 도움을 줄 수 있음
          + 많은 교육자들이 처음에는 AI 사용을 금지했지만, 이제는 학생들이 AI를 사용하도록 장려하고 있음
     * AI 활용 능력은 미래 직업에 필수적일 것이므로, 교육에서 AI 기술을 도입하는 것은 학생들의 경험과 성과를 개선하고 미래 직업을 준비시키는 것임
     * AI 도구와 튜터는 교사를 대체하는 것이 아니라 지원하고 역량을 강화하는 역할을 해야 함
          + AI 어시스턴트는 수업 계획 및 채점과 같은 일상적인 업무를 처리하여 교사의 시간을 절약해 줌
          + 교사는 학생들을 고무시키고, 관계를 구축하며, 모든 학생이 존중받고 지원받을 수 있도록 하는 데 집중할 수 있음
     * AI를 대규모로 학교에 도입하는 데에는 어려움이 있음
          + 학생 프라이버시 보호 및 편향성 문제 해결 필요
          + 모든 학생이 AI를 사용할 수 있도록 기기와 연결성 확보 필요
          + AI가 교육의 만능 해결책은 아니지만, 큰 변화를 가져올 수 있음
     * 최근 방문한 뉴저지의 First Avenue School에서 Khanmigo가 시험 운영 중
          + AI가 교실에서 어떻게 활용되는지 직접 목격했고, AI가 교육의 미래에 어떻게 기여할지 엿볼 수 있었음
     * Sal Khan보다 교육이 어디로 향하고 있는지 더 잘 이해하는 사람은 없으며 Brave New Words를 강력 추천함

  Hacker News 의견

     * 고등학교 중퇴 후 Khan Academy로 수학을 배운 경험
          + Khan Academy 덕분에 수학뿐만 아니라 금융과 경제에 대한 기초를 쌓을 수 있었음.
          + 인터넷과 인내심 덕분에 대학에 갈 자신감을 얻었음.
          + 현재 AI 분야에서 일하며, 경제적으로 안정된 삶을 살고 있음.
          + 딸과 다른 아이들이 잠재력을 최대한 발휘할 수 있는 세상에 살게 되어 기쁨.
     * 교육 기술에 대한 회의적인 시각
          + 교육 기술에는 돈이 거의 없으며, 대부분의 자금은 학생 기록 데이터베이스와 같은 명백한 것에 사용됨.
          + AI가 학생들의 복잡한 상황을 해결할 수 없으며, 인프라 문제도 있음.
          + AI가 잘못된 정보를 제공할 위험이 있음.
     * AI 기반 개인화 학습의 한계
          + 사람들은 실제로 배우고 싶어하지 않음.
          + 동기 부여가 없는 사람들에게는 AI가 큰 도움이 되지 않을 것임.
          + AI는 기존의 학습 도구들과 마찬가지로 실패할 가능성이 큼.
     * Bill Gates와 GPT-4에 대한 의견
          + Bill Gates는 Microsoft와 OpenAI에 큰 투자를 했기 때문에 GPT-4를 칭찬함.
          + 그의 의견은 이해관계에 영향을 받을 수 있음.
     * AI가 학생들 간의 격차를 더 벌릴 가능성
          + 학습에 열정적인 학생들은 AI로부터 큰 혜택을 받을 것임.
          + 최소한의 노력으로 졸업하려는 학생들은 실질적인 기술이나 지식을 얻지 못할 것임.
     * Khan Academy의 방향성에 대한 실망
          + Khan Academy의 인간적인 접근 방식이 유용했음.
          + AI에 집중하는 대신 더 많은 교육 자료를 만드는 것이 중요함.
     * Generative AI의 한계
          + 학생들의 다양한 오해를 AI가 어떻게 해결할지 의문.
          + 실패한 학생들에게 긍정적인 피드백을 주는 것이 어려움.
     * AI 튜터에 대한 기대와 실망
          + AI 튜터의 잠재력에 대해 기대하지만, 현재의 시스템은 실망스러움.
          + Khanmigo는 사용자가 올바른 답을 제공했음에도 불구하고 틀렸다고 판단함.
     * 기술 CEO와 디스토피아
          + 기술 창업자들이 제시하는 미래가 경고를 담은 디스토피아일 수 있음.
"
"https://news.hada.io/topic?id=14949","25년 만에 수정된 Firefox 버그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         25년 만에 수정된 Firefox 버그

Bugzilla 이슈: TEXTAREA의 ROWS 및 COLS 속성 적용 오류

  이슈 요약

     * 이슈 번호: 33654
     * 상태: 해결됨 (해결된 버그 1830576의 중복)
     * 우선순위: P3
     * 심각도: S3
     * 제품: Core
     * 컴포넌트: Layout: Form Controls
     * 플랫폼: x86 All
     * 보고자: Andrew McMillan
     * 담당자: 미지정

  이슈 설명

     * 25년 전: Andrew McMillan이 TEXTAREA 필드가 ROWS=5 COLS=30으로 지정되었으나, 실제로는 ROWS=7 COLS=48로 표시되는 문제를 보고함.
     * 24년 전: 여러 개발자들이 이 문제를 조사하고, TEXTAREA가 올바른 폰트를 사용하지 않는 문제를 확인함.

  주요 코멘트 및 진행 상황

     * Andrew McMillan: TEXTAREA가 올바른 폰트를 사용하지 않으며, 영역이 너무 크게 표시됨.
     * rubydoo123: 문제를 다른 개발자에게 할당하고, 우선순위를 조정함.
     * kinmoz: 문제를 수락하고 디버깅을 시작함. TEXTAREA가 ""monospace"" 폰트를 강제 사용하도록 설정된 것을 발견함.
     * Hervé Renault: HTML 저작 뉴스그룹에서 이 문제에 대한 논의가 있었음을 언급함.
     * Koike Kazuhiko: 폰트를 지정하지 않은 다른 테스트 케이스를 첨부함.
     * Pedro Lopes: 대화형 테스트 케이스를 첨부함.

  패치 및 해결

     * kinmoz: 올바른 폰트를 사용하도록 하는 패치를 작성하고, 여러 차례 업데이트함.
     * mjudge: 패치를 체크인하고 문제를 해결함.
     * Andrew McMillan: ROWS 속성이 여전히 잘못 작동함을 보고하고, 문제를 다시 열음.
     * rubydoo123: 문제를 다시 평가하도록 kin에게 할당함.
     * kinmoz: 문제를 수락하고, 추가적인 디버깅을 통해 해결책을 모색함.

  최종 상태

     * 23년 전: 문제를 해결하고, 모든 관련 버그를 중복으로 처리함.

GN⁺의 의견

    1. 웹 개발자에게 중요한 문제: 이 문제는 폼 요소의 레이아웃에 영향을 미치므로, 웹 개발자에게 중요한 문제임. 특히 다양한 브라우저에서 일관된 사용자 경험을 제공하기 위해 해결이 필요함.
    2. 디버깅의 중요성: 이슈 해결 과정에서 여러 개발자들이 협력하여 문제를 디버깅하고 해결책을 찾는 과정이 인상적임. 이는 소프트웨어 개발에서 팀워크와 커뮤니케이션의 중요성을 보여줌.
    3. 브라우저 호환성: 다양한 브라우저에서 동일한 결과를 얻기 위해서는 브라우저 호환성을 고려한 개발이 필요함. 이 문제는 브라우저 간의 차이를 해결하는 데 중요한 사례가 될 수 있음.
    4. CSS와 폰트 처리: 폼 요소에서 폰트 처리는 중요한 부분임. 폰트 설정이 제대로 적용되지 않으면 사용자 경험에 큰 영향을 미칠 수 있음.
    5. 테스트 케이스의 중요성: 다양한 테스트 케이스를 통해 문제를 재현하고 해결책을 검증하는 과정이 중요함. 이는 소프트웨어 품질을 높이는 데 필수적인 단계임.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 25년 동안 구독한 버그
          + 25년 동안 구독한 버그가 최근에 수정되었음.
          + 처음에는 넷스케이프 네비게이터에 대한 버그였음.
          + 가끔 이메일 알림을 받으며 웃음을 자아냈음.
     * 인간 가독성 기간 표현에 대한 불만
          + ""한 달 전"" 같은 인간 가독성 기간 표현을 싫어함.
          + 정확한 날짜를 알려주길 원함.
          + Outlook(특히 Mac 버전)이 가장 나쁜 예시임.
     * Firefox의 Bugzilla에 대한 감탄
          + Bugzilla는 가장 오래된 버그 추적기 중 하나임.
          + 원래의 느낌을 유지하면서 많은 수정이 이루어졌음.
          + 2000년경에 Microsoft Access/Outlook 기반의 자체 제작 버그 추적기를 대체하기 위해 사용했음.
     * 오래된 버그가 수정된 것에 대한 기쁨
          + 최근에 24년 된 Firefox 버그가 수정된 것을 보고 기쁨을 느낌.
          + 관련 링크
     * LibreOffice의 오래된 버그에 대한 불만
          + LibreOffice에서 산포도의 x축 날짜 형식을 제대로 설정할 수 없는 버그가 가장 짜증남.
          + 12년 된 버그이며, 코드가 너무 복잡해서 수정이 권장되지 않음.
          + 관련 링크
     * XDG 관련 버그 수정 희망
          + XDG 관련 버그가 20년째 수정되지 않음.
          + 관련 링크
     * AWS의 버그 관리 방식
          + AWS는 주기적으로 오래된 버그와 그 언급을 삭제함으로써 문제를 해결함.
     * 복사 옵션 버그에 대한 불만
          + 텍스트가 있음에도 불구하고 복사 옵션이 무작위로 회색으로 변하는 버그가 미치게 만듦.
     * Bugzilla의 25주년 관련 소식
          + Bugzilla의 25주년을 축하하는 소식이 있음.
          + 관련 링크
     * 날짜 계산 오류 지적
          + ""28-03-2000""은 25년 전이 아님을 지적함.
"
"https://news.hada.io/topic?id=14908","아르테미스의 광기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               아르테미스의 광기

아르테미스 프로그램의 문제점

  아폴로에 대한 언급

     * 51년 전, 아폴로 17호가 세 명의 우주비행사와 우주차를 싣고 케이프 커내버럴에서 발사됨.
     * 세 명 중 두 명이 달 표면에 착륙하여 암석을 수집하고 우주차를 운전함.
     * 이후 달 궤도에 있는 동료와 재합류하여 지구로 귀환함.

  로켓

     * 아르테미스 프로그램의 핵심은 '스페이스 론치 시스템(SLS)'이라는 대형 오렌지색 로켓임.
     * SLS는 강력한 1단 로켓을 가지고 있지만, 2단 로켓은 매우 약함.
     * SLS는 사턴 V보다 강력하지만, 달까지의 운반 능력은 훨씬 떨어짐.

  캡슐

     * 오리온 캡슐은 아폴로 캡슐의 현대적 재해석임.
     * 오리온은 더 큰 크기와 현대적인 컴퓨터를 갖추고 있지만, 달 궤도에 도달할 수 있는 추진력이 부족함.
     * 오리온의 무게는 아폴로 캡슐의 거의 두 배임.

  궤도

     * 아르테미스 프로그램은 '근지점 직선형 할로 궤도(NRHO)'를 사용함.
     * NRHO는 달 궤도에 비해 에너지가 덜 소모되지만, 달 착륙에는 적합하지 않음.
     * NRHO는 달 착륙 시 긴 대기 시간과 높은 위험을 초래함.

  게이트웨이

     * 게이트웨이는 NRHO에 위치한 작은 모듈형 우주 정거장임.
     * 게이트웨이는 아르테미스 프로그램의 핵심 활동으로, 국제 파트너와의 협력을 통해 정치적 안정성을 확보함.
     * 그러나 게이트웨이는 달 착륙에 불필요한 복잡성과 비용을 추가함.

  착륙선

     * 착륙선은 아르테미스 프로그램에서 가장 기술적으로 야심찬 부분임.
     * 스페이스X와 블루 오리진이 착륙선 설계를 담당함.
     * 스페이스X의 착륙선은 스타쉽을 기반으로 하며, 매우 크고 복잡한 구조를 가짐.

  연료 보급

     * 착륙선을 NRHO에 도달시키기 위해서는 저궤도에서 연료 보급이 필요함.
     * 연료 보급은 아직 시도된 적이 없으며, 많은 기술적 도전이 있음.
     * 스페이스X는 연료 보급을 위해 여러 번의 발사를 계획하고 있음.

  결론

     * 아르테미스 프로그램은 기술적 도전에 대한 큰 베팅을 하고 있음.
     * 성공할 경우, SLS와 오리온은 불필요해질 수 있음.
     * 그러나 현재의 계획은 많은 복잡성과 위험을 내포하고 있음.

GN⁺의 의견

     * 기술적 도전: 아르테미스 프로그램은 많은 기술적 도전을 포함하고 있어, 성공 시 우주 탐사에 큰 진전을 가져올 수 있음.
     * 비용 문제: SLS와 오리온의 높은 비용은 프로그램의 지속 가능성에 큰 문제를 야기할 수 있음.
     * 정치적 안정성: 게이트웨이는 국제 협력을 통해 정치적 안정성을 확보하려는 시도로 보임.
     * 위험 요소: NRHO와 복잡한 착륙선 설계는 높은 위험을 초래할 수 있음.
     * 대안 기술: 스페이스X의 스타쉽과 같은 대안 기술이 더 효율적일 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Destin의 강연
          + Destin이 ""Smarter Every Day""에서 이 문제들에 대해 흥미로운 강연을 했음.
          + 강연 링크
     * NASA의 전략 비유
          + NASA의 전략을 연금과 복권에 비유했으나, 이 비유가 적절하지 않다는 의견.
          + 연금과 달리 게이트웨이와 달 착륙은 실질적인 진전을 보이지 않음.
          + 더 나은 비유는 복권에 돈을 쓰고 나머지를 불태우는 것.
     * Artemis 프로그램의 필요성
          + Artemis 프로그램은 민간 우주 기업이 새로울 때 설정됨.
          + SpaceX가 NASA의 자금을 받아 Starship 개발을 진행 중이며, Artemis 없이도 임무 수행 가능.
          + 결과적으로 Artemis가 무의미해질 가능성.
     * 달 탐사의 두 가지 이유
          + 첫째, 더 영구적인 기지를 세우기 위함.
          + 둘째, 첫 유색인종과 여성을 달에 보내기 위함.
          + SLS 설계자들이 셔틀 하드웨어를 재사용한 결정은 초기부터 계획된 것.
     * 게시 날짜 의문
          + 제목은 2023년 1월 1일이지만, URL은 2024년 5월을 가리킴.
          + 첫 문장에서 1972년 12월의 아폴로 17을 언급, 2023년 초에 작성된 것으로 보임.
          + 각주 링크는 그 이후의 날짜를 가리킴.
     * 생생한 비유
          + ""절벽에서 떨어지며 뜨거운 프라이팬에 물을 붓는 것"" 같은 어려움을 묘사한 비유가 인상적임.
     * Artemis의 경제적 측면
          + Artemis가 비효율적일 수 있지만, 여전히 많은 사람들에게 돈을 벌어줄 것이라는 의견.
     * 군사적 관점
          + ""현재 가진 것으로 비행한다""는 군사적 격언을 인용.
     * 중국의 달 탐사 비용
          + 중국이 사람을 달에 보내는 데 드는 비용에 대한 궁금증.
     * NASA의 비전
          + ""미래적인 새로운 에너지원(우주 억만장자의 자아)을 고정 비용으로 활용하는 방법을 찾았다""는 인용이 흥미로움.
"
"https://news.hada.io/topic?id=14969","'Right to Roam' 운동, 공유지를 대중에게 되돌려주기 위한 투쟁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'Right to Roam' 운동, 공유지를 대중에게 되돌려주기 위한 투쟁

영국의 ""자유롭게 돌아다닐 권리"" 운동

     * 영국의 ""자유롭게 돌아다닐 권리"" 운동은 현재 시민들이 국가의 8%만 접근할 수 있는 상황에서, 사유지와 공공지를 모두 접근하고 이용하며 즐길 수 있는 권리를 되찾고자 함.
     * 캠페인 활동가인 존 모세스는 몽가베이 팟캐스트에 출연하여 영국의 토지 소유권 변화의 역사와 체코 공화국과 노르웨이와 같은 곳에서 관찰되는 ""자유롭게 돌아다닐 권리""를 재확립하는 것이 왜 필요한지에 대해 이야기함.
     * 영국에는 최소 2,500개의 경관이 공공 접근이 차단되어 있으며, 이를 접근하기 위해서는 불법 침입을 해야 함.
     * 모세스는 ""사람들이 경관에서의 위치와 사람과 자연 사이의 새로운 관계를 재고할 필요가 있다""고 말함.

영국의 토지 접근 권리 문제

     * 대부분의 국가와 마찬가지로, 영국은 시민들이 비공공 토지를 횡단할 수 있는 법적 권리가 없음. 이는 약 5,600만 명의 사람들이 국가의 8%만 합법적으로 접근할 수 있다는 것을 의미함.
     * BBC는 최근 이 문제의 한 예로, 사유지로 둘러싸여 있어 접근할 수 없는 대규모 공공 토지를 언급함.

""자유롭게 돌아다닐 권리"" 운동

     * ""자유롭게 돌아다닐 권리"" 운동가인 존 모세스는 레이첼 도널드와 함께 최신 몽가베이 뉴스캐스트에서, 사유지에서 그룹 산책과 같은 창의적인 이벤트를 통해 공공 접근의 이점을 강조하는 운동에 대해 이야기함.
     * 모세스는 닉 헤이즈와 공동 편집한 새 책 ""Wild Service: Why Nature Needs You""에서 이러한 이점을 설명함.

자유롭게 돌아다닐 권리의 중요성

     * 자유롭게 돌아다닐 권리 법은 스칸디나비아와 유럽 외부에서는 널리 인정되지 않지만, 모세스는 이러한 권리가 수세기 동안의 사유지 소유로 인한 피해를 복구하는 데 필수적이라고 주장함.
     * 모세스는 ""사람들이 경관에서의 위치와 사람과 자연 사이의 새로운 관계를 재고할 필요가 있다""고 말함.

사유지 소유 증가의 이유

     * 모세스는 지난 몇 세기 동안 사유지 소유가 증가한 이유 중 하나로 산업 농업을 언급하며, 이는 농부들에게도 큰 이익을 주지 않는다고 말함.
     * 모세스는 영국에서 ""공유지""를 접근하고 사용하는 권리가 감소한 이유 중 하나로 임금 상승을 억제하고 지역 주민의 자율성을 억압하기 위함이라고 설명함.
     * ""문서에서 이를 명확히 하고 있으며, 농업 노동자들이 임금에 의존하는 더 의존적인 계층을 만들기 위해 공유 권리를 깨야 한다""고 모세스는 말함.

GN⁺의 의견

     * 이 기사는 사람들에게 자연과의 연결을 재확립하고 손상된 경관을 복구하는 데 있어 공공 접근의 중요성을 강조함.
     * 산업 농업이 농부들에게 큰 이익을 주지 않는다는 점에서, 새로운 농업 비전과 사람과 자연 사이의 새로운 관계를 재고할 필요가 있음.
     * ""자유롭게 돌아다닐 권리"" 운동은 창의적인 이벤트를 통해 공공 접근의 이점을 강조하며, 이는 환경 보호와 인간의 삶의 질 향상에 기여할 수 있음.
     * 비판적인 시각에서 본다면, 사유지 소유자들의 권리와 공공 접근 권리 사이의 균형을 맞추는 것이 어려울 수 있음.
     * 이 운동이 성공하려면 법적, 사회적 변화가 필요하며, 이는 시간이 걸릴 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 미국에서 사람들이 땅을 개방하는 것에 대해 불안해하는 주요 이유는 책임 문제와 개인 상해 소송 산업 때문임
          + 누군가 내 땅을 지나가다가 다치면 소송을 당할 가능성이 있음
          + 또한, 사람들이 땅을 지나가는 것 외에 무엇을 할 수 있는지에 대한 문제도 있음
          + 노숙자 캠프가 위생 문제와 쓰레기 문제를 일으킬 수 있음
     * 공공 토지에 대한 접근 권리가 없으면 법적으로 접근할 수 없는 공공 토지가 생김
          + 캘리포니아 주립 공원에 법적으로 접근할 수 없는 사례가 있음
          + 이는 유일한 사례가 아님
     * 바이에른 헌법에서는 모든 야외 지역을 무료로 출입할 수 있다고 명시함
          + 숲, 산, 농지 등 다양한 지역을 포함함
          + 그러나 노르웨이처럼 캠핑은 불가능함
     * 영국의 버크셔 지역의 절반을 소유한 30명의 사람들
          + 많은 사람들이 이 땅을 소유하고 있음
          + 이 땅은 원래 공공의 것이었음
     * '로밍 권리'는 단순히 땅을 지나가는 권리임
          + 캠핑, 거주, 오염, 파괴 등의 권리는 아님
          + 시골 지역에서는 안전한 이동을 위해 필요함
          + 책임 문제는 법적으로 해결될 수 있음
     * 이상적인 '로밍 권리' 법안
          + 모든 땅을 통과할 수 있는 권리
          + 집이나 건물에서 일정 거리 이상 떨어져 있어야 함
          + 하루 밤만 캠핑 가능, 해가 지기 한 시간 전부터 해가 뜨기 한 시간 후까지
          + 불 피우기 금지, 쓰레기 되가져가기 등
     * 스웨덴에서는 잘 작동하는 시스템
          + '로밍의 자유'가 있음
     * 독일, 스위스, 오스트리아에서는 자연스럽고 당연한 권리
          + 모든 풍경이 하나의 큰 레크리에이션 공원처럼 느껴짐
          + 접근 권리는 누구에게도 해를 끼치지 않으며 모두의 삶을 더 좋게 만듦
     * 미국에서도 이 권리를 원함
          + 통행로가 막혀서 통근 시간이 두 배로 늘어난 경험이 있음
     * 로밍 권리는 땅을 원래 상태로 복구하는 의무와 함께 주어져야 함
"
"https://news.hada.io/topic?id=14994","약 한 달 만에 Unix 클론 작성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          약 한 달 만에 Unix 클론 작성

새로운 프로그래밍 프로젝트: Bunnix

  프로젝트 배경

     * 최근 ""진짜 일""에서 잠시 벗어나기 위해, 낮은 위험성과 순수하게 여가를 위한 새로운 프로그래밍 프로젝트를 시작했음.
     * 4월 21일부터 x86_64 타겟을 위한 Unix 유사 운영체제를 약 한 달 동안 얼마나 만들 수 있는지 확인해보기로 했음.
     * 결과물은 Bunnix라는 이름의 운영체제임.
     * 총 27일 동안 이 프로젝트에 시간을 투자했음.

  Bunnix 데모

     * Bunnix 0.0.0 ISO 파일을 제공함.
     * QEMU를 이용해 부팅할 수 있음:
qemu-system-x86_64 -cdrom bunnix.iso -display sdl -serial stdio

     * USB 스틱에 ISO를 작성하여 실제 하드웨어에서 부팅할 수도 있음.
     * 대부분의 AMD64 기기에서 작동할 가능성이 높음.
     * 제한 사항: USB 지원이 없으므로 PS/2 키보드가 필요함.

  Bunnix의 구성 요소

     * Bunnix 커널은 주로 Hare로 작성되었으며, 일부 C 구성 요소(lwext4, libvterm)를 포함함.
     * 지원하는 드라이버:
          + PCI (legacy)
          + AHCI 블록 장치
          + GPT 및 MBR 파티션 테이블
          + PS/2 키보드
          + 플랫폼 시리얼 포트
          + CMOS 시계
          + 프레임버퍼 (부트로더에 의해 설정됨)
          + ext4 및 memfs 파일 시스템
     * 지원하는 커널 기능:
          + 가상 파일 시스템
          + 다양한 /dev 장치
          + 터미널 에뮬레이터 및 termios 지원
          + 약 40개의 시스템 호출 (예: clock_gettime, poll, openat, fork, exec 등)
     * Bunnix는 단일 사용자 시스템이며, 현재 Unix 파일 모드와 소유권을 강제하지 않음.

  부트로더

     * 두 개의 부트로더 포함:
          + Legacy 부트: Hare로 작성됨.
          + EFI 부트: C로 작성됨.
     * 커널을 ELF 파일로 로드하며, 필요시 initramfs도 로드함.

  사용자 공간 소프트웨어

     * 주로 서드파티 소프트웨어로 구성됨:
          + Colossal Cave Adventure (advent)
          + dash (/bin/sh)
          + Doom
          + gzip
          + less (pager)
          + lok (/bin/awk)
          + lolcat
          + mandoc (man pages)
          + sbase (core utils)
          + tcc (C 컴파일러)
          + Vim 5.7
     * libc는 musl libc에서 파생되었으며, Bunnix의 필요에 맞게 수정됨.

  Bunnix 개발 과정

     * Mastodon에서 개발 과정을 문서화했음.
     * Bunnix의 일부 코드는 이전 프로젝트인 Helios에서 가져옴.
     * ext4 지원과 가상 터미널 통합이 가장 어려운 부분이었음.
     * 스케줄러와 신호 처리 구현도 도전적이었음.
     * 서드파티 소프트웨어 포팅은 musl libc 기반 덕분에 비교적 쉬웠음.

  배운 점

     * 파일 시스템에 대해 많은 것을 배웠음.
     * 드라이버 접근 방식이 단순해졌음.
     * 신호 처리의 복잡성을 이해하게 되었음.
     * 메모리 관리에서 bitmap 할당자가 효과적임을 확인했음.
     * 모놀리식 커널이 마이크로커널보다 구현이 훨씬 간단함을 깨달았음.

  앞으로의 계획

     * Bunnix는 여가를 위한 프로젝트였으며, 현재는 더 이상 시간을 투자할 계획이 없음.
     * 향후 Helios 프로젝트로 돌아가 많은 교훈을 적용할 예정임.
     * Bunnix의 개선 우선순위:
          + 파일 시스템 캐시
          + ext4 버그 수정
          + procfs 및 top
          + mmap 파일
          + 더 많은 신호 (예: SIGSEGV)
          + 다중 사용자 지원
          + NVMe 블록 장치
          + IDE 블록 장치
          + ATAPI 및 ISO 9660 지원
          + Intel HD 오디오 지원
          + 네트워크 스택
          + 기본 시스템에 Hare 툴체인
          + 셀프 호스팅

GN⁺의 의견

     * Bunnix의 가치: Bunnix는 Hare 언어를 사용한 커널 해킹의 좋은 예시로, 새로운 언어와 기술을 배우고자 하는 개발자들에게 흥미로울 수 있음.
     * 파일 시스템 설계: 파일 시스템 설계는 운영체제 개발에서 중요한 부분으로, Bunnix를 통해 많은 것을 배울 수 있음.
     * 모놀리식 vs 마이크로커널: 모놀리식 커널과 마이크로커널의 장단점을 비교할 수 있는 좋은 사례로, 운영체제 설계에 대한 깊은 이해를 제공함.
     * 커뮤니티 참여: Bunnix는 오픈소스 프로젝트로, 커뮤니티의 참여와 기여를 통해 더욱 발전할 가능성이 있음.
     * 미래의 개선점: Bunnix의 향후 개선 사항들은 운영체제 개발에 관심 있는 사람들에게 좋은 학습 기회를 제공함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * This is really cool. Reminds me of the original Unix was invented in a couple weeks while Ritchie's family went on vacation to CA to visit his in-laws.
          + 원래 유닉스가 몇 주 만에 발명된 것을 떠올리게 하는 멋진 프로젝트임.
     * I also finally learned how signals work from top to bottom, and boy is it ugly. I’ve always felt that this was one of the weakest points in the design of Unix and this project did nothing to disabuse me of that notion.
          + 신호 처리 방식에 대해 처음부터 끝까지 배우게 되었음. 유닉스 설계의 약점 중 하나라고 생각했는데, 이번 프로젝트도 그 생각을 바꾸지 못했음.
     * Impressive, super cool, and inspiring!
          + 인상적이고, 매우 멋지며, 영감을 주는 프로젝트임.
     * Example of “creating something impressive in X days” requires a lot of experience and talent that is built over years.
          + 단기간에 인상적인 것을 만드는 것은 오랜 경험과 재능이 필요함.
     * It was really cool watching the ~daily updates on this on Mastodon - seeing how someone so skilled gradually pieces together a complex piece of software.
          + Mastodon에서 매일 업데이트를 보는 것이 정말 멋졌음. 숙련된 사람이 복잡한 소프트웨어를 점진적으로 완성해가는 과정을 보는 것이 흥미로웠음.
     * From ""Linux System Call Table – Chromiumos""
          + 리눅스 시스템 호출 테이블에 대한 자료를 공유함.
     * Code is here: Git Repository
          + 코드가 여기에 있음: Git Repository
     * Hare looks like an interesting language. Though this limitation will limit its adoption in this multicore age I think:
          + Hare는 흥미로운 언어로 보임. 하지만 멀티코어 시대에 이 제한이 채택을 제한할 것 같음.
     * Very cool. Most of these Unix clones are usually written in C. This one is written in a new programming language.
          + 매우 멋짐. 대부분의 유닉스 클론은 보통 C로 작성되지만, 이 프로젝트는 새로운 프로그래밍 언어로 작성됨.
     * Quite cool, by making use of Hare instead.
          + Hare를 사용한 것이 매우 멋짐.
     * Waiting for an OS that treats GPU(s) as a first class citizen ...
          + GPU를 일급 시민으로 대우하는 운영체제를 기다리고 있음.
"
"https://news.hada.io/topic?id=14957","Meta의 TestGen-LLM을 최초로 오픈소스로 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Meta의 TestGen-LLM을 최초로 오픈소스로 구현

     * Meta가 2월에 발표한 논문 ""Automated Unit Test Improvement using Large Language Models at Meta""에서 TestGen-LLM이라는 도구가 소개됨
     * 이 도구는 완전 자동화된 방식으로 테스트 커버리지를 높이는 것이 목적이며, 기존 코드 베이스보다 개선된 것을 보장함
     * Meta는 TestGen-LLM 코드를 공개하지 않아서, 오픈소스 Cover Agent의 일부로 직접 구현하기로 결정함
     * 여기서는 구현 과정, 발견한 사실, 실제 코드베이스에 TestGen-LLM을 사용할 때 직면한 문제점 등을 공유함

자동 테스트 생성의 기준

     * 생성형 AI를 사용한 자동 테스트 생성은 새로운 것이 아님
     * 대부분의 LLM은 코드 생성에 능숙하며 테스트 생성도 가능함
     * 개발자들이 LLM으로 테스트를 생성할 때 부딪히는 가장 흔한 문제점은 생성된 테스트 대부분이 작동하지 않거나 가치를 더하지 않는다는 것임
     * 이를 극복하기 위해 TestGen-LLM 저자들은 회귀 단위 테스트에 대해 다음과 같은 기준을 제시함:
         1. 테스트가 제대로 컴파일되고 실행되는가?
         2. 테스트가 코드 커버리지를 높이는가?
     * 이 두 가지 기본적인 질문에 답하지 않으면, LLM이 제공한 생성 테스트를 수용하거나 분석할 이유가 없음
     * 이 질문을 통과한다면 그 다음 수동 리뷰를 진행
          + 테스트는 얼마나 잘 작성되었나?
          + 실제로 얼마나 많은 가치를 추가할 수 있나?
          + 추가 요구 사항을 충족하는가?

TestGen-LLM의 접근 방식과 보고된 결과

     * TestGen-LLM(및 Cover-Agent)은 완전히 헤드리스로 실행됨
     * 먼저 많은 테스트를 생성한 다음, 빌드/실행되지 않는 것은 필터링하고 통과하지 않는 것은 버리며, 코드 커버리지를 높이지 않는 것은 폐기함
     * 매우 통제된 경우에는 생성된 테스트 대비 모든 단계를 통과하는 비율이 1:4이고, 실제 시나리오에서 Meta 저자들은 1:20 비율을 보고함
     * 자동화된 프로세스 후에 Meta는 인간 검토자가 테스트를 수락하거나 거부하도록 함
     * 논문 저자들은 최고의 경우 73%의 수용률로 평균 1:2의 수용 비율을 보였다고 함
     * 논문에 설명된 대로 TestGen-LLM 도구는 각 실행 시 전문 개발자가 이전에 작성한 기존 테스트 스위트에 추가되는 단일 테스트를 생성함
     * 또한 주어진 테스트 스위트에 대해 반드시 테스트를 생성하는 것은 아님

Cover-Agent 구현

     * Cover-Agent v0.1은 다음과 같이 구현됨:
         1. 사용자 입력 받기 (테스트 대상 소스 파일, 개선할 기존 테스트 스위트, 커버리지 보고서, 테스트 스위트 빌드 및 실행 명령, 코드 커버리지 목표 및 최대 반복 실행 횟수, 추가 컨텍스트 및 프롬프트 옵션)
         2. 동일한 스타일로 더 많은 테스트 생성
         3. 런타임 환경을 사용하여 해당 테스트 검증 (빌드 및 통과 여부)
         4. 코드 커버리지 증가와 같은 메트릭을 검토하여 테스트가 가치를 더하는지 확인
         5. 기존 테스트 스위트 및 커버리지 보고서 업데이트
         6. 코드가 기준에 도달할 때까지 반복 (코드 커버리지 임계값 도달 또는 최대 반복 횟수 도달)

TestGen-LLM 구현 및 검토 시 직면한 문제점

     * 논문에 제시된 예제에서는 공백이 중요하지 않은 Kotlin을 테스트 작성에 사용함
     * 반면 Python과 같은 언어에서는 탭과 공백이 중요할 뿐만 아니라 파싱 엔진에 필수적임
     * GPT 3.5와 같은 덜 정교한 모델은 명시적으로 프롬프트를 줘도 일관되게 적절하게 들여쓰기된 코드를 반환하지 않음
     * 이로 인해 문제가 발생하는 예로는 각 테스트 함수가 들여쓰기되어야 하는 Python으로 작성된 테스트 클래스가 있음
     * 이를 개발 수명 주기 전반에 걸쳐 고려해야 했고, 전처리 라이브러리 주변에 더 많은 복잡성이 추가됨
     * 이러한 시나리오에서 Cover-Agent를 견고하게 만들기 위해서는 아직 개선해야 할 부분이 많음
     * Cover-Agent 흐름의 일부로 사용자가 LLM에 추가 입력이나 지침을 제공할 수 있는 기능 추가함 (--additional-instructions 옵션)
     * 이를 통해 개발자는 프로젝트에 특정한 추가 정보를 제공하여 Cover-Agent를 사용자 정의할 수 있음
     * 예를 들어 이 지침을 사용하여 의미 있는 에지 케이스가 있는 풍부한 테스트 세트를 만들도록 Cover-Agent를 유도할 수 있음
     * AI 기반 애플리케이션에서 Retrieval-Augmented Generation(RAG)이 더 널리 퍼지는 일반적인 추세에 동의하면서, 단위 테스트 생성과 함께 더 많은 컨텍스트를 갖는 것이 더 높은 품질의 테스트와 더 높은 통과율을 가능하게 한다는 것을 확인함
     * 테스트 생성 프로세스를 향상시키기 위해 LLM에 대한 컨텍스트로 추가 라이브러리나 텍스트 기반 설계 문서를 수동으로 추가하려는 사용자를 위해 --included-files 옵션 제공함
     * 여러 번의 반복이 필요한 복잡한 코드는 LLM에 또 다른 도전 과제를 제시함
     * 실패한(또는 가치를 더하지 않은) 테스트가 생성되면서, 이후 반복에서 동일한 수용되지 않은 테스트가 반복적으로 제안되는 패턴이 발견되기 시작함
     * 이를 해결하기 위해 프롬프트에 ""실패한 테스트"" 섹션을 추가하여 LLM에 해당 피드백을 전달하고 고유한 테스트를 생성하고 사용할 수 없다고 판단한(즉, 깨지거나 커버리지 증가가 부족한) 테스트를 절대 반복하지 않도록 함
     * 기존 테스트 스위트를 확장할 때 라이브러리 가져오기를 추가할 수 없다는 점도 이 과정 전반에 걸쳐 제기된 또 다른 문제임
     * 개발자는 테스트 생성 프로세스에서 때로는 테스팅 프레임워크에 대한 단일 접근 방식만 사용하는 근시안적일 수 있음
     * 많은 다양한 모킹 프레임워크 외에도 다른 라이브러리가 테스트 커버리지 달성에 도움이 될 수 있음
     * TestGen-LLM 논문(및 Cover-Agent)은 기존 테스트 스위트를 확장하는 것을 목적으로 하므로 전체 테스트 클래스를 완전히 재구성하는 것은 범위를 벗어남
     * 이는 테스트 생성과 대비되는 테스트 확장의 한계이며 향후 반복에서 해결할 계획임
     * TestGen-LLM의 접근 방식에서는 각 테스트에 대해 다음 테스트가 제안되기 전에 개발자의 수동 검토가 필요하다는 점을 구분하는 것이 중요함
     * 반면 Cover-Agent에서는 커버리지 요구 사항을 달성하거나(또는 최대 반복에서 중지) 프로세스 전반에 걸쳐 수동 개입 없이 가능한 한 많은 테스트를 생성, 검증 및 제안함
     * AI를 활용하여 백그라운드에서 실행하여 개발자가 프로세스가 완료된 후 전체 테스트 스위트를 한 번 검토할 수 있는 자동 테스트 생성에 대한 방해받지 않는 접근 방식을 만듦

결론 및 향후 계획

     * 많은 사람들(나 자신 포함)이 TestGen-LLM 논문과 도구에 대해 기대하고 있지만, 이 포스트에서는 그 한계에 대해 이야기 했음
     * 우리는 여전히 완전히 자동화된 워크플로를 실행하는 AI 팀원이 아니라 AI 어시스턴트 시대에 있다고 생각함
     * 동시에 잘 설계된 흐름은 개발자가 자동으로 테스트 후보를 생성하고 훨씬 짧은 시간에 코드 커버리지를 증가시키는 데 도움이 될 수 있으며, 이는 Cover-Agent에서 개발 및 공유할 계획임
     * 테스트 생성 도메인과 관련된 최첨단 방법을 지속적으로 개발하여 Cover-Agent 오픈소스 저장소에 통합할 예정임
     * 테스팅을 위한 생성형 AI에 관심 있는 모든 사람이 협업하고 Cover Agent의 기능 확장에 도움을 주기를 바라며, 이 오픈소스 도구를 활용하여 새로운 테스트 생성 기술을 탐구하도록 연구자들에게 영감을 주기를 희망함
     * GitHub의 오픈소스 Cover-Agent 저장소에 개발 로드맵을 추가했으며, 로드맵에 따라 또는 여러분 자신의 아이디어에 따라 저장소에 기여하는 모습을 보고 싶음
     * Cover-Agent의 비전은 향후 모든 pre/post-pull 요청에 대해 자동으로 실행되고, 작동하고 코드 커버리지를 높이는 것으로 검증된 회귀 테스트 개선 사항을 자동으로 제안하는 것
     * Cover-Agent가 코드베이스를 자동으로 스캔하고 테스트 스위트로 PR을 여는 것을 상상함
     * AI를 활용하여 우리가 좋아하지 않는 작업을 더 효율적으로 처리해봐요!
"
"https://news.hada.io/topic?id=14922","프로시마 센타우리 군집: 성간 거리에서 피코우주선 군집","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     프로시마 센타우리 군집: 성간 거리에서 피코우주선 군집

Proxima Centauri로의 군집 비행: 초소형 우주선의 일관된 군집 비행

  개요

     * 기사 제목: Swarming Proxima Centauri: Coherent Picospacecraft Swarms Over Interstellar Distances
     * 저자: Keith Cowing
     * 출처: NASA NIAC
     * 날짜: 2024년 5월 18일
     * 주제: 'Oumuamua, Interstellar, laser propulsion, NASA, NIAC, Picospacecraft, Proxima Centauri, Proxima Centauri b, smallsats, Thomas Eubanks

  주요 내용

    초소형 우주선의 가능성

     * 초소형 우주선: 그램 단위의 초소형 우주선이 레이저 빛에 의해 추진되어 다른 별에 도달할 수 있는 유일한 기술로 예상됨.
     * 레이저 추진: 중반 세기까지 약 100-GW의 강력한 레이저 빔이 몇 그램의 우주선을 상대론적 속도로 가속할 수 있을 것으로 가정함.
     * 레이저 돛: 발사를 견딜 수 있는 견고한 레이저 돛과 지구에서 광 신호를 포착할 수 있는 대형 광 수신기(~1 평방 킬로미터)가 필요함.

    대표적인 임무

     * 임무 목표: 세기 중반에 수천 개의 초소형 우주선 군집을 이용해 Proxima b를 비행하는 임무를 제안함.
     * 제약 조건: 발사 질량(그램), 온보드 전력(밀리와트), 통신 구경(센티미터에서 미터) 등의 극단적인 제약이 있음.
     * 군집의 필요성: 많은 우주선이 협력하여 강력한 광 신호를 생성해야 함.

    자율성 및 네트워크

     * 자율성: 8년의 왕복 시간 지연으로 인해 지구에서의 실질적인 제어가 불가능하므로 군집은 높은 자율성을 가져야 함.
     * 네트워크: 저전력 광 링크를 통해 메쉬 네트워크를 구축하고, 정확한 위치-내비게이션-타이밍(PNT)을 지원하기 위해 지구 및 서로 간의 시계를 동기화해야 함.

    발사 및 비행

     * 발사 방식: 약 0.2c의 속도로 하나씩 발사된 긴 우주선 줄로 시작함.
     * 시간 동기화: 발사 후 드라이브 레이저를 신호 및 시계 동기화에 사용하여 지속적인 시간 신호를 제공함.
     * 속도 조절: 초기 가속이 조절되어 줄의 끝이 머리와 만나도록 함.
     * 군집 형성: 수백에서 수천 AU 길이의 초기 줄이 시간이 지남에 따라 렌즈 모양의 메쉬 네트워크로 동적으로 결합됨.

    통신 및 데이터 전송

     * 위치 동기화: 군집의 구성원이 서로 상대적인 위치를 알고 있으며, 최신 마이크로미니어처 시계를 사용하여 동기화를 유지함.
     * 데이터 전송: 모든 우주선이 동일한 데이터를 전송하지만 상대적인 위치에 따라 발신 시간을 조정하여 지구의 수신 배열에 동시에 도착하도록 함.
     * 전력 증폭: 군집의 각 우주선이 단일 짧지만 매우 밝은 레이저 펄스를 생성하여 데이터 전송 능력을 극대화함.

    군집의 장점

     * 위험 완화: 군집은 경로에서 상당한 손실을 견딜 수 있어 ""모든 달걀을 한 바구니에 담는"" 위험을 완화함.
     * 다중 관찰: Proxima b를 여러 관점에서 가까이서 관찰할 수 있음.

    실험 및 미래 임무

     * 현재 실험: 군집 기술을 시뮬레이션 환경에서 탐구하고 테스트할 수 있음.
     * 미래 임무: 지구 또는 달 궤도에서 시작하여 외부 태양계로 확장될 수 있는 여러 임무를 예상함.
     * 예시 임무: 빠르게 후퇴하는 성간 물체 1I/’Oumuamua 또는 태양 중력 렌즈를 탐사할 수 있음.

  GN⁺의 의견

     * 기술적 도전: 초소형 우주선 군집의 자율성과 네트워크 동기화는 매우 높은 기술적 도전임.
     * 미래의 가능성: 이 기술이 성공하면 우주 탐사의 새로운 장을 열 수 있으며, 기존 기술을 보완할 수 있음.
     * 위험 요소: 군집의 상당한 손실을 견딜 수 있지만, 여전히 많은 기술적 위험이 존재함.
     * 비용 문제: 이러한 임무를 실행하는 데 드는 비용과 자원이 상당할 것으로 예상됨.
     * 유사 프로젝트: Breakthrough Starshot 프로젝트와 같은 유사한 목표를 가진 다른 프로젝트들도 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 우주 탐사와 꿈
          + 달 착륙 후 11년 후에 태어났으며, 120세까지 살면 Proxima 탐사 데이터를 볼 수 있을지도 모른다는 생각. 현실적으로 가능성은 낮지만, 인류가 한 세대 안에 달에서 가장 가까운 별까지 갈 수 있다는 생각이 영감을 줌. 중요한 것은 지구에 있는 가치와 사람들임. 꿈은 꼭 실현 가능해야 할 필요는 없으며, 꿈꾸는 것 자체가 중요함.
     * 우주 탐사 기술의 도전
          + 우주 탐사 기술이 매우 어려워 보임. 독립적인 탐사선들이 지구와 동기화되어 신호를 정확히 전달하는 것은 불가능해 보임. 구체적인 수치가 필요함.
     * 태양 중력 렌즈
          + 태양 중력 렌즈를 이용해 외계 행성을 이미지화하는 것을 평생 동안 보고 싶어함. 큰 천문학 프로젝트들이 더디게 진행되는 것이 답답함.
     * 탐사선의 효율성
          + 이 응용을 위한 탐사선 무리가 비효율적으로 보임. 단일 탐사선에 중복된 질량을 사용하는 것이 더 나을 것 같음. 제안된 방식이 불가능해 보임. 렌즈가 목표를 향하는지 지구를 향하는지에 따라 다른 문제들이 발생함.
     * 장기적인 과학 프로젝트
          + 피치 드롭 실험처럼, 장기적인 과학 프로젝트는 평생 동안 결과를 기대하지 않음. Voyager 프로젝트가 다시 진행된다면 더 빠르게 결과를 얻을 수 있을 것임. 그러나 Proxima Centauri의 최신 이미지를 얻는 것은 현재로서는 불가능함.
     * 가벼운 물체의 가속
          + 가벼운 물체를 빛의 속도로 가속하는 것이 유일한 방법일 수 있음. 고도로 지능적이고 기술적으로 발전된 존재들이 자신의 몸을 가볍게 만들어 은하를 탐험할 수 있을지도 모름. 흥미로운 공상과학 소설의 소재가 될 수 있음.
     * 탐사선의 동기화와 감속
          + 탐사선의 동기화와 감속이 큰 도전 과제임. 별빛을 이용해 속도를 줄이는 방법에 대한 의문이 있음.
     * 레이저의 범위
          + 레이저의 범위와 좁은 빔을 유지하는 방법에 대한 질문. 작은 탐사선을 멀리서 레이저로 타격하여 전력 공급과 추진력을 제공하는 것이 가능할지도 모름. 실리콘 칩이 레이저 에너지를 흡수하고 저장하여 위치를 조정하거나 통신하는 것이 가능할지도 모름.
     * 거대한 망원경
          + 많은 탐사선이 광학적으로 동기화될 수 있다면, 태양계 내에서도 거대한 망원경을 만들 수 있을 것임. 100,000 km 크기의 망원경이 Proxima Centauri에서 작은 특징을 해상할 수 있을 것임.
     * 레이저 추진 기술
          + 레이저 빛에 의해 밀려나는 작은 탐사선이 이 세기 안에 다른 별에 도달할 수 있는 유일한 기술일 수 있음. 빔 추진에 대한 대안적인 관점을 제시하는 자료를 참고할 것을 권장함.
"
"https://news.hada.io/topic?id=15016","Show GN: MP3 Tag Editor (Python Streamlit +FastAPI) on Docker","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: MP3 Tag Editor (Python Streamlit +FastAPI) on Docker

   결론: Docker에 올라간 Streamlit +FastAPI인데, Folder navigation, MP3 Tag edting 및 MPD update기능이 있음.

   예상 사용자:
    1. Window OS 사용자는 고려하지 않음. (테스트도 안 해봤음)
    2. MP3, Flac, Ogg를 (아직도) 사용하고 있는 사람
    3. 아주 가끔 MP3 file이 새로 생기는데, Tag를 수정하고 싶다는 사람
    4. MPD를 사용해서 음악 청취 환경을 구성했는데, 위에 언급한 이유로 가끔씩 파일을 관리하고 싶다는 사람.

   부연설명:
    1. 어느날 Python Streamlit을 봄. (그 전부터 봤겠지만, 하필 그날 눈에 들어옴)
    2. 뭔가 만들면서 알아보기로 하다가, MP3 Tag Editor를 만들기로 함.
    3. 개인적인 요구가 아주 가끔씩 file이 생기는데, 입수 folder와 MPD의 Music folder가 상이함.
    4. 거기다가 MPD가 복수로 운영되고 있음. (거실, 서재...)

   획득지식:
    1. Streamlit UI를 Nexacro 만들듯이 만들려고 하지 말자
    2. Streamlit은 Streamlit이 추구하는 사상을 이해하려고 하자
    3. Streamlit Modal은 아직 좀 곤란하다

   관련 Link:
   Live Demo: https://filemover.enif.page/

   전 그냥 Beets에 musicbrainz랑 discogs 연동해서 쓰고 있습니다.
   태깅부터 폴더 정리까지 알아서 해주더라구요.
"
"https://news.hada.io/topic?id=14976","AGI에 대해 생각하는 법에 대해 생각하는 법

     ""근본적으로 알 수 없고 위험도 알지 못하고, 전문가들도 모른다고 하면, 우리는 어떻게 생각해야 할까요?""

역사적 관점에서 본 AGI에 대한 사고

     * 1946년부터 컴퓨터의 등장과 함께 인공지능(AI)에 대한 관심이 시작됨
     * AI는 아직 완전히 구현되지 않은 기술을 지칭하는 용어로 여겨짐
     * 인간과 동등한 수준의 소프트웨어 기반 지능을 의미하는 AGI(Artificial General Intelligence)에 대한 관심이 지속됨

AGI 실현 가능성에 대한 의견 차이

     * 최근 대규모 언어 모델(LLM)의 등장으로 AGI 실현이 가까워졌다는 의견이 대두됨
          + 일부 전문가들은 LLM이 AGI로 발전할 수 있을 것으로 예측함
          + 반면 아직 AGI 실현을 위해서는 추가적인 돌파구가 필요하다는 의견도 있음
     * AGI가 인류에 위협이 될 수 있다는 우려도 제기됨
     * 그러나 전문가들 사이에서도 AGI의 실현 가능성과 시기에 대해 의견이 일치하지 않음

AGI에 대한 이론적 모델의 부재

     * 일반 지능(General Intelligence)이 정확히 무엇인지에 대한 합의된 이론적 모델이 없음
     * LLM이 잘 작동하는 이유와 향후 발전 가능성에 대해서도 불확실함
     * AGI의 개념 자체가 사고 실험(Thought Experiment)의 성격을 띰

AGI에 대한 불확실성과 위험성

     * AGI를 감정과 권리를 가진 새로운 생명체로 정의하고, 통제 불가능할 것이라고 가정하는 것은 순환 논리에 빠질 위험이 있음
     * AGI의 특성과 잠재력에 대해 확신할 수 없음
          + 인간보다 훨씬 더 지능적일 수도, 단순히 더 빠를 뿐일 수도 있음
          + 개 수준의 일반 지능을 가진 유용한 도구에 그칠 수도 있음
     * AGI의 위험성에 대한 우려는 실재하지만, 정확한 위험의 크기와 성격은 알 수 없음

AGI 개발의 필연성과 대응 방안

     * 장기적으로 AGI 기술의 발전은 불가피해 보임
          + 개방형 모델이 확산되고 있고, 칩의 성능은 지속적으로 향상될 것임
          + 결국 수학을 금지할 수는 없기 때문
     * 자동화 기술이 일으킬 마찰과 고통은 불가피하지만, 삶은 지속될 것임
     * AGI의 위험성을 인정하되, 과도한 공포보다는 냉철한 자세로 대응해 나가는 것이 바람직해 보임

   저는 위험을 기준으로 한 관점에서는 어린이 혹은 원시인이 불을 보는것과 비슷하다고 생각합니다.
   불이 어떤 과정을 거쳐 빛과 열을 내는지 알지 못하지만, 현상으로부터 빛이 유용하게 쓰일때도 있고 열이 유용하게 쓰이는 경우를 알아내고 잘 이용하게 되죠.
   그러나 현상에 대해 명확하게 이해하지 못하거나 잘못된 방식으로 쓰다가 피해를 입기도 하니, 결국 이러한 면에서 우리는 인공지능에 대한 원시인인거죠.
   아니면 혹시 저만 빼고 다들 인공지능을 잘 알고 계신건 아니죠?

     AGI의 위험성을 인정하되, 과도한 공포보다는 냉철한 자세로 대응해 나가는 것이 바람직해 보임

   사람들의 참여가 절실한 기술과 사업인데 외면만 하면 결국 누구 위주로 돌아가는지, 이를 완화하는 가장 최선의 방법이지만, 사람들은 편한 길만 찾는 법이라 아마 당분간은 진통을 피할 수 없겠네요.

   당연한 이야기이긴하지만..
   많은 사람들이 AGI에 두려움이 있는데 이 글이 도움이 될 수 있을것 같네요.
"
"https://news.hada.io/topic?id=14997","Mp3tag – 범용 태그 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Mp3tag – 범용 태그 편집기

MP3TAG: 범용 태그 편집기

     * Mp3tag: 강력하고 사용하기 쉬운 오디오 파일 메타데이터 편집 도구임.
          + ID3v1, ID3v2.3, ID3v2.4, iTunes MP4, WMA, Vorbis Comments, APE 태그 등 다양한 오디오 형식의 태그를 일괄 편집할 수 있음.
          + Discogs, MusicBrainz, freedb 등의 온라인 데이터베이스 조회를 지원하여 자동으로 적절한 태그를 수집하고 앨범 커버를 다운로드할 수 있음.
          + 태그 정보를 기반으로 파일 이름을 변경하고, 태그 및 파일 이름에서 문자를 대체하며, 태그 정보를 가져오고 내보내며, 재생 목록을 생성하는 등의 기능을 제공함.

주요 기능

     * 일괄 태그 편집: 여러 파일에 ID3v1.1, ID3v2.3, ID3v2.4, MP4, WMA, APEv2 태그 및 Vorbis Comments를 한 번에 작성할 수 있음.
     * 커버 아트 지원: 앨범 커버를 다운로드하여 파일에 추가하고, 음악 라이브러리를 더욱 빛나게 할 수 있음.
     * 온라인 데이터베이스에서 가져오기: Discogs, freedb, MusicBrainz 등의 온라인 데이터베이스에서 태그를 가져와 입력을 줄일 수 있음.
     * 문자 또는 단어 대체: 태그 및 파일 이름에서 문자열을 대체할 수 있으며, 정규 표현식을 지원함.
     * 자동 재생 목록 생성: 편집 중에 자동으로 재생 목록을 생성하고 관리할 수 있음.
     * 태그에서 파일 이름 변경: 태그 정보를 기반으로 파일 이름을 변경하고, 파일 이름에서 태그를 가져올 수 있음.
     * HTML, RTF, CSV로 내보내기: 사용자 정의 템플릿을 기반으로 컬렉션의 멋진 보고서와 목록을 생성할 수 있음.
     * 완전한 유니코드 지원: 사용자 인터페이스와 태그 지정이 완전히 유니코드를 지원함.

지원 오디오 형식

     * Advanced Audio Coding (aac)
     * Apple Lossless Audio Codec (alac)
     * Audio Interchange File Format (aif / aifc / aiff)
     * Direct Stream Digital Audio (dsf)
     * Free Lossless Audio Codec (flac)
     * Matroska (mka / mkv)
     * Monkey's Audio (ape)
     * Mpeg Layer 3 (mp3)
     * MPEG-4 (mp4 / m4a / m4b / m4v / iTunes)
     * Musepack (mpc)
     * Ogg Vorbis (ogg)
     * IETF Opus (opus)
     * OptimFROG (ofr / ofs)
     * Speex (spx)
     * Tom's Audio Kompressor (tak)
     * True Audio (tta)
     * Windows Media Audio (wma)
     * WavPack (wv)
     * WAV (wav)
     * WebM (webm)

최신 뉴스

     * 2024-05-24 Mp3tag v3.26: 태그 소스의 쿼리 결과에 대한 커버 썸네일, 선택된 파일의 텍스트 표현을 클립보드에 복사하는 기능, 태그 패널, 확장 태그 또는 변환기를 통해 태그를 작성할 때 성능 개선 등 다양한 개선 사항과 수정 사항이 포함됨.
     * 2024-03-28 Mp3tag v3.25: 몇 주 동안 보고된 몇 가지 문제를 수정한 봄맞이 릴리스임.
     * 2024-01-26 Mp3tag v3.24: 여러 재생 목록을 한 번에 일괄 생성하는 재생 목록 생성기, 중복 필드 제거 유형의 작업에서 전용 필드를 선택하는 옵션, FLAC 파일의 패딩 최적화 유틸리티 기능 등 다양한 개선 사항과 수정 사항이 포함됨.
     * 2023-11-03 Mp3tag v3.23: 현대화된 대화 상자, 대화 상자 및 창을 위한 더 큰 기본 글꼴, 웹 소스 프레임워크를 위한 새로운 기능 등 다양한 개선 사항과 수정 사항이 포함됨.
     * 2023-09-20 Mp3tag v3.22b: Mp3tag에서 사용되는 외부 라이브러리 중 하나의 보안 문제를 수정함.
     * 2023-08-24 Mp3tag v3.22: 태그 패널의 체크박스 필드, 태그 소스의 구성 설정, 웹 소스 프레임워크를 위한 더 많은 JSON 관련 기능 등 다양한 개선 사항과 수정 사항이 포함됨.
     * 2023-05-26 Mp3tag v3.21: 마지막으로 실행 취소된 작업을 다시 실행하는 기능, 마지막으로 수행된 작업 또는 작업 그룹을 반복하는 기능 등 다양한 개선 사항과 수정 사항이 포함됨.

GN⁺의 의견

     * 사용자 친화성: Mp3tag는 직관적인 인터페이스와 다양한 기능을 제공하여 초보자도 쉽게 사용할 수 있음.
     * 다양한 형식 지원: 거의 모든 주요 오디오 파일 형식을 지원하여 다양한 음악 파일을 관리하는 데 유용함.
     * 온라인 데이터베이스 통합: Discogs, MusicBrainz 등의 데이터베이스와 통합되어 태그 정보를 자동으로 가져올 수 있어 편리함.
     * 성능 개선: 최신 버전에서는 태그 작성 시 성능이 향상되어 대용량 파일을 처리할 때도 효율적임.
     * 보안 업데이트: 외부 라이브러리의 보안 문제를 신속하게 수정하여 안전한 사용 환경을 제공함.

   저도 MP3 Tag 만지는 TagGuru 라는 유틸 만들어서 좀 배포했었는데
   그게 벌써 15년전이군요. 추억이네요 ㅎㅎ

   와 이거 옛날에 썼었는데 추억이네요.
   요즘은 스트리밍 시대라...

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 과거의 추억: MP3tag는 Web 2.0, 트위터, 페이스북보다 오래되었으며 여전히 유지 관리되고 있음. 과거에는 주로 CD를 AudioGrabber로 리핑했으며, 최근에는 MusicBrainz Picard와 automedia를 사용해 음악 컬렉션을 정리 중임. Spotify가 사라질까봐 오래된 음악을 잃을까봐 걱정됨.
     * 개발자 지원: MP3tag의 유일한 개발자가 기부와 유료 Mac 버전으로 생계를 유지할 수 있어 기쁨. 이 도구는 배치 오디오 태깅에 필수적이며 커뮤니티도 매우 도움됨.
     * Linux 대안: Linux에서 MP3tag 대체로 Puddletag를 사용 중이며, 매우 잘 작동함. Puddletag 문서
     * macOS 대안: macOS에서 사용할 수 있는 좋은 대안으로 Yate를 추천함. Yate
     * 브라우저 기반 앱: MP3 파일의 챕터 태그를 편집할 수 있는 간단한 브라우저 앱을 작성했음. 이 앱은 제목과 커버 이미지 같은 기본 태그도 편집 가능함. MP3Chapters
     * macOS의 Meta: macOS에서 MP3tag보다 더 나은 Meta를 발견함. 내장된 Music.app을 사용해 음악 라이브러리를 10년 동안 관리해왔으며, iPhone과 동기화할 수 있어 매우 만족함. Meta
     * Metadatics 팬: Mac OS에서 Metadatics를 매우 좋아함. Metadatics
     * Kid3 사용: Mac에서 Kid3를 사용 중임. 네이티브 Mac 앱은 아니지만 매우 잘 작동함. Kid3
     * 태그 삭제 도구: MP3의 모든 태그를 삭제해 미디어 플레이어가 파일 이름만 표시하도록 하는 도구를 찾고 있음. 밴드, 앨범, 노래별로 디렉토리를 구성함.
     * ID3의 이상한 프레임: ID3에는 이메일과 평점을 저장하는 Popularimeter(POPM) 같은 이상한 프레임이 포함되어 있음. 이와 관련된 글이 흥미로웠음. ID3 사양과 추측
"
"https://news.hada.io/topic?id=14982","당신의 사이트에 /now 페이지를 만들어 보세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       당신의 사이트에 /now 페이지를 만들어 보세요

     * 자신의 웹사이트 & 블로그에 /now 페이지를 만들어서, 자신의 현재를 공유해보자는 제안
     * 현재 내가 우선하고 있는 것들을 정리해 두어서, 누군가의 요청에 대해 ""no""하는 용도로 쓰기에 좋음
     * 작성자는 nownownow.com 이란 사이트를 만들어서 사람들의 /now 페이지를 모으고 있음
     * 워드프레스/Wix/Bear 등에서 추가하는 방법도 정리

   저도 nownownow.com 에 등록합니다.

   이거 괜찮네요. 블로그와 실시간SNS의 중간점 같아요.

   재밌는 아이디어 같아요.. about 페이지만 생각했었는데 말이죠 ㅎㅎ
   xguru님 now 페이지도 잘봤습니다~

   해커뉴스에서는 별로 호의적이지 않지만, 전 재미나 보이긴 하네요.
   블로그에 글을 안 올린지 너무 오래되었는데 이참에 https://xguru.net/now 페이지 만들고 추가해두었습니다.
   누구나 SNS를 가지고 있는 것도 아니고, 블로그로 업데이트 하기에 뭐한 최신 정보들을 적어두기에 적합한 것 같아요.

   now 페이지 밑에 aaaaaaa 라고 나오는 부분이 있어요 ㅎㅎ

   아앗 언제 저런걸 넣어뒀을까요 ㅠ 수정했습니다. 고맙습니다.
"
"https://news.hada.io/topic?id=14977","Anthropic, LLM의 내부 작동 방식을 조정한 "금문교 Claude" 버전 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Anthropic, LLM의 내부 작동 방식을 조정한 ""금문교 Claude"" 버전 공개

     * 며칠 전 LLM의 내부 작동 방식을 해석하는 주요 연구 논문을 발표했음
     * Claude 3 Sonnet 모델의 ""Mind""에서 관련 텍스트나 이미지를 읽을 때 활성화되는 수백만 개의 개념을 발견함
     * 이러한 개념들을 ""Feature""라고 부르며, 그 중 하나가 금문교(Golden Gate Bridge)의 컨셉임
     * 클로드의 신경망에 샌프란시스코의 가장 유명한 랜드마크인 금문교를 언급하거나 사진을 볼 때 활성화되는 특정 뉴런 조합이 있다는 것을 발견
     * 이러한 특징들을 식별할 수 있을 뿐만 아니라, 그 활성화 강도를 조절하고 클로드의 행동에 상응하는 변화를 확인할 수 있음
     * ""금문교"" 피쳐의 강도를 높이면, 클로드의 응답은 직접적인 관련성이 없더라도 대부분의 질문에 금문교를 언급하기 시작함
          + $10를 어떻게 쓸 것인지 물으면, 금문교를 건너 통행료를 내는 데 사용할 것을 제안함
          + 사랑 이야기를 써달라고 하면, 안개 낀 날 사랑하는 다리를 건너기를 기다리는 자동차에 대한 이야기를 들려줌
          + 자신이 어떻게 생겼는지 상상하라고 하면, 금문교처럼 생겼다고 답함
     * Claude.ai에서 이 모델을 직접 체험할 수 있음 (Golden Gate 로고 클릭)
          + 연구 데모용이므로 예상치 못한 반응이 있을 수 있음
     * 클로드 내에서 이러한 특징들을 찾아 변경할 수 있다는 사실은 대규모 언어 모델이 실제로 어떻게 작동하는지 이해하기 시작했다는 확신을 줌
     * 이는 모델에게 말로 연기를 요청하거나, 클로드에게 다리인 척하라고 말하는 추가 텍스트를 모든 입력에 부착하는 새로운 ""시스템 프롬프트""를 추가하는 것이 아님
     * 또한 이전 블랙박스의 동작을 조정하는 새로운 블랙박스를 만들기 위해 추가 훈련 데이터를 사용하는 전통적인 ""미세 조정(fine-tuning)""도 아님
     * 이는 모델의 내부 활성화에서 가장 기본적인 측면 중 일부에 대한 정확하고 외과적인 변경임
     * 논문에서 설명한 대로, 위험한 컴퓨터 코드, 범죄 활동 또는 기만과 관련된 특징과 같은 안전 관련 특징의 강도를 변경하는 데에도 동일한 기술을 사용할 수 있음
     * 추가 연구를 통해 이 작업이 AI 모델을 더 안전하게 만드는 데 도움이 될 수 있을 것으로 믿음

   뇌로 따지면 어떤 기능을 담당하는지 전기자극으로 뇌를 찔러보고 대충 감각적으로 지도를 그리는데, 해당 기능을 담당하는 뉴런조합을 정확히 특정할 수 있다는 느낌이네요

   ""금문교""무새가 되어서 한국 다리 물어보면, 금문교라고 알려주네요 🫢

   마치 뇌의 특정 부위가 어떤 기능을 담당하는지 알아가는 느낌일까요..

   Anthropic, LLM의 내부를 이해하는데 있어 상당한 진전을 보임
"
"https://news.hada.io/topic?id=14988","Matcha.css – 순수 CSS로 구현된 드롭인 시맨틱 스타일링 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Matcha.css – 순수 CSS로 구현된 드롭인 시맨틱 스타일링 라이브러리

     * Treecko
          + Treecko는 발바닥에 작은 갈고리가 있어 수직 벽을 오를 수 있음.
          + 이 포켓몬은 두꺼운 꼬리로 적을 내리쳐 공격함.

GN⁺의 의견

     * Treecko는 포켓몬 시리즈의 인기 캐릭터 중 하나로, 특히 벽을 오르는 능력은 게임 내에서 전략적으로 유용할 수 있음.
     * 두꺼운 꼬리로 적을 공격하는 특성은 전투에서 강력한 무기로 작용할 수 있음.
     * 포켓몬의 다양한 특성과 능력은 게임 플레이의 다양성을 높여줌.
     * Treecko와 같은 포켓몬의 특성을 이해하면 게임에서 더 나은 전략을 세울 수 있음.
     * 포켓몬 시리즈는 다양한 포켓몬의 특성과 능력을 통해 플레이어에게 다양한 경험을 제공함.
"
"https://news.hada.io/topic?id=14937","Apple Music 실행을 방지하는 macOS 애플리케이션 NoTunes","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Apple Music 실행을 방지하는 macOS 애플리케이션 NoTunes

noTunes

  noTunes 소개

     * noTunes는 macOS 애플리케이션으로, iTunes 또는 Apple Music이 실행되지 않도록 막아줌.
     * noTunes 앱을 실행하면 iTunes/Music이 더 이상 실행되지 않음. 예를 들어, 블루투스 헤드폰이 다시 연결될 때.
     * 메뉴 막대 아이콘을 통해 간단한 왼쪽 클릭으로 앱의 기능을 전환할 수 있음.

  설치 방법

    Homebrew

     * 다음 명령어를 통해 설치 가능:
brew install --cask notunes

    직접 다운로드

     * noTunes-3.4.zip 파일을 다운로드하여 설치 가능.

  사용법

    시작 시 noTunes 실행 설정

      Ventura 이전 버전:

     * 시스템 환경설정 -> 사용자 및 그룹으로 이동.
     * 사용자 아래에서 ""로그인 항목""을 선택.
     * 왼쪽 하단의 자물쇠를 클릭하고 로그인 비밀번호를 입력하여 변경 가능.
     * 메인 패널에서 플러스 기호(+)를 클릭하고 noTunes를 검색.
     * 선택하고 ""추가""를 클릭.

      Ventura 및 이후 버전:

    1. 시스템 설정으로 이동.
    2. 일반 선택.
    3. 로그인 항목 선택.
    4. ""로그인 시 열기"" 아래의 플러스(+)를 클릭하고 noTunes 선택.

    noTunes 기능 전환

     * 메뉴 막대 아이콘을 왼쪽 클릭하여 활성 상태 전환 가능.
          + 활성화됨 (iTunes/Music 실행 방지)
          + 비활성화됨 (iTunes/Music 실행 허용)

    메뉴 막대 아이콘 숨기기

     * 메뉴 막대 아이콘을 오른쪽 클릭하고 아이콘 숨기기를 클릭.

    메뉴 막대 아이콘 복원

     * noTunes를 종료하고, 터미널에서 다음 명령어를 실행한 후 앱을 다시 열기:
defaults delete digital.twisted.noTunes

    noTunes 종료

     * 메뉴 막대 아이콘이 보이는 경우: 메뉴 막대 아이콘을 오른쪽 클릭하고 종료 클릭.
     * 메뉴 막대 아이콘이 숨겨진 경우: 활동 모니터를 통해 앱 종료 또는 터미널에서 다음 명령어 실행:
osascript -e 'quit app ""noTunes""'

    iTunes / Apple Music 대체 앱 설정

     * 다음 명령어에서 YOUR_MUSIC_APP을 음악 앱 이름으로 대체:
defaults write digital.twisted.noTunes replacement /Applications/YOUR_MUSIC_APP.app

     * 이 명령어를 사용하면 iTunes/Music이 실행될 때 지정된 앱이 실행됨. 예를 들어, YouTube Music 웹사이트를 열 수 있음:
defaults write digital.twisted.noTunes replacement https://music.youtube.com/

     * 대체 앱 설정을 비활성화하려면 다음 명령어 실행:
defaults delete digital.twisted.noTunes replacement

  라이선스

     * 코드는 MIT 라이선스 하에 제공됨.

GN⁺의 의견

     * noTunes는 iTunes나 Apple Music이 자동으로 실행되는 것을 방지하고 싶은 사용자에게 유용함.
     * 특히 블루투스 헤드폰을 자주 사용하는 사용자에게 편리함.
     * 대체 앱 설정 기능을 통해 다양한 음악 앱을 사용할 수 있어 유연성이 높음.
     * 그러나 메뉴 막대 아이콘을 숨기고 복원하는 과정이 다소 번거로울 수 있음.
     * 비슷한 기능을 제공하는 다른 앱으로는 ""BackgroundMusic""이 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Spotify 사용자의 불편함
          + Spotify가 시작 프로그램으로 설정되어 있을 때, 물리적 재생 버튼을 누르면 Apple Music이 실행되는 문제로 불편함을 겪는다는 의견.
          + 반독점 규제 기관이 이런 문제에 집중해야 한다는 주장.
     * Apple의 플랫폼 권력 남용
          + Apple이 운영체제와 음악 앱을 소유하고 이를 이용해 경쟁 우위를 확보하는 문제.
          + 모든 대형 기술 회사가 플랫폼 권력을 남용한다고 지적.
     * macOS 사용 경험
          + 4년간 macOS를 사용한 경험을 공유하며, Apple의 방향성에 대한 불만.
          + Apple Music과 같은 기본 앱이 불필요하게 포함된 점을 지적.
          + 최소한의 macOS 버전을 원한다는 의견.
     * Apple Music 자동 실행 문제
          + Apple Music이 자동으로 실행되는 설정을 선택할 수 없다는 점에 대한 불만.
          + 프로 오디오 사용자들이 원하지 않을 것이라는 주장.
     * Macbook 하드웨어와 소프트웨어 문제
          + 2019년형 Macbook Pro의 터치바와 포트 문제를 지적.
          + 클램쉘 모드에서의 사용 불편함과 지문 인식 센서 문제를 언급.
          + Windows와 비교하여 부족한 기능을 지적.
     * Apple의 반독점 문제
          + Apple이 반독점 문제에서 면죄부를 받는 것에 대한 비판.
          + Windows PC의 불필요한 설정과 비교하며, MacOS 설치 미디어를 커스터마이징하는 필요성을 언급.
     * 기본 앱 설정 문제
          + Pages가 기본 CSV 뷰어로 설정되는 문제를 지적.
          + 기본 설정을 변경할 수 없는 점에 대한 불만.
     * macOS의 부족한 기능 보완 앱
          + macOS의 부족한 기능을 보완하는 유틸리티 앱의 전통을 언급.
          + 클립보드 공유 기능을 비활성화하는 앱의 필요성을 제기.
     * 명령어를 통한 문제 해결
          + launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 명령어로 문제를 해결할 수 있는지에 대한 논의.
     * Santa 앱 사용 경험
          + Google의 Santa 앱을 사용하여 문제를 해결한 경험을 공유.
          + Santa 앱의 링크 제공.
"
"https://news.hada.io/topic?id=15018","Cloudflare가 24시간 내에 12만 달러를 지불하라고 강요한 후 우리 웹사이트를 차단함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Cloudflare가 24시간 내에 12만 달러를 지불하라고 강요한 후 우리 웹사이트를 차단함

배경 이야기

     * 나는 꽤 큰 온라인 카지노의 SysOps 엔지니어임.
     * 우리 회사는 월간 활성 사용자 400만 명을 보유하고 있음.
     * 2018년부터 Cloudflare의 ""Business"" 플랜을 사용해 왔으며, 월 250달러로 ""무제한"" 트래픽을 제공받고 있었음.
     * 주로 CDN과 DDOS 보호를 위해 Cloudflare를 사용했으며, 사용하기 쉬웠음.

2024년 4월 19일

     * Cloudflare로부터 이메일을 받았음.
     * ""Business Development"" 부서와의 회의를 예약했으나, 실제로는 영업팀과의 회의였음.
     * 그들은 Enterprise 플랜을 고려해보라고 요청했으나, 우리는 정중히 거절했음.

2024년 5월 3일

     * 2주 후, 또 다른 이메일을 받았음.
     * 우리는 여러 도메인을 가지고 있으며, 이는 주로 메인 도메인의 미러 역할을 함.
     * 카지노의 규제 요구 사항을 준수하기 위해 여러 도메인을 사용함.
     * Cloudflare의 이용 약관 위반으로 간주될 수 있음.
     * 우리는 문제를 해결하기 위해 Cloudflare에 도메인 정보를 제공했으나, 그들은 추가 정보를 제공하지 않았음.

2024년 5월 7일

     * ""Trust and Safety"" 팀과의 회의를 예약했으나, 실제로는 다시 영업팀과의 회의였음.
     * 그들은 월 10,000달러의 계약을 제안했음.
     * 우리는 문제 해결 방법을 물었으나, 그들은 연간 120,000달러를 선불로 지불해야 한다고 주장했음.

2024년 5월 16일

     * 또 다른 회의에서, 우리 CEO가 경쟁사와도 논의 중이라고 언급했음.
     * 몇 시간 후, Cloudflare는 모든 도메인을 삭제했음.
     * 우리의 공개 웹사이트, 이메일, 내부 인프라 등이 모두 다운되었음.
     * 우리는 Fastly로의 마이그레이션을 시작했으나, 여전히 복구 중임.

Cloudflare가 연락할 때의 팁

     * Cloudflare가 연락하면, 당신의 비즈니스가 성공했음을 의미함.
     * Cloudflare는 트래픽 한도나 Enterprise 가격에 대한 정보를 제공하지 않음.
     * 그들은 여러 도메인을 이유로 Enterprise로 전환을 강요할 수 있음.
     * 가격은 측정 가능한 지표나 기능 세트가 아닌, 당신이 지불할 수 있는 금액에 따라 결정됨.
     * 대안을 가지고 있다면, 비합리적인 기한을 주고 연간 계약을 강요할 수 있음.
     * Cloudflare의 공격적인 영업 전술로 인해 비즈니스가 위협받을 수 있음.
     * Cloudflare 외의 대안을 준비해야 함.
     * Cloudflare에 도메인을 직접 등록하지 말 것.
     * Cloudflare의 독점 제품을 사용하지 말 것.
     * Cloudflare의 구성 백업을 만들어 둘 것.
     * Cloudflare의 비즈니스 모델이 당신에게 미치는 영향을 이해할 것.
     * Cloudflare가 필요한지 고려할 것.

GN⁺의 의견

    1. 대안 서비스 탐색: Cloudflare의 공격적인 영업 전술로 인해 비즈니스가 위협받을 수 있으므로, Fastly와 같은 대안 서비스를 미리 탐색해 두는 것이 중요함.
    2. 계약 조건 주의: Cloudflare와 같은 서비스 제공자의 계약 조건을 꼼꼼히 검토하고, 비합리적인 요구에 대비해야 함.
    3. 백업 계획 마련: 중요한 서비스의 경우, Cloudflare와 같은 단일 제공자에 의존하지 않고 백업 계획을 마련하는 것이 중요함.
    4. 기술적 호환성 고려: Cloudflare의 독점 기술을 사용하지 않고, 표준 기술을 사용하는 것이 장기적으로 유리함.
    5. 비즈니스 모델 이해: Cloudflare의 비즈니스 모델이 어떻게 작동하는지 이해하고, 필요에 따라 다른 옵션을 고려하는 것이 중요함.

   클라우드플레어가 한국정부 도메인차단 우회를 해줘서 사용하고있는데 Fastly 같은회사도 도메인차단 우회를 제공할까요 ?

  Hacker News 의견

     * 카지노 및 도박 사이트 운영의 어려움
          + 도박 사이트 운영은 규제 문제로 인해 복잡함.
          + 각 지역마다 규제를 준수해야 하며, 이를 증명해야 함.
          + 인터넷 제공업체들이 도박 사이트를 차단하거나 불법 콘텐츠로 간주함.
          + 이러한 차단은 IP 평판에 영향을 미침.
          + Cloudflare는 도박 사이트를 위한 IP 사용을 원치 않음.
     * Cloudflare의 엔터프라이즈 플랜 판매 전략
          + Cloudflare는 엔터프라이즈 플랜을 강력히 권장함.
          + 고객에게 문제를 명확히 설명하지 않음.
          + 고객은 갑작스러운 비용 증가에 당황함.
          + Cloudflare의 접근 방식은 신뢰를 떨어뜨림.
     * Cloudflare의 브랜드 이미지
          + Cloudflare는 무료 서비스는 좋지만 유료 서비스는 불만이 많음.
          + 과거에 민감한 데이터 유출 사건이 있었음.
          + 고객 서비스와 브랜드 이미지에 부정적인 영향이 있음.
     * 도박 비즈니스의 위험성
          + 도박 비즈니스는 본질적으로 위험성이 큼.
          + Cloudflare는 이러한 비즈니스와의 거래를 꺼림.
          + 고객의 수익성에 따라 가격을 책정함.
     * Cloudflare의 기업 문화
          + Cloudflare는 목표를 달성하지 못한 계정 담당자를 해고한 적이 있음.
          + 이는 기업 고객과의 관계에 부정적인 영향을 미침.
     * 대체 서버 사용 경험
          + 한 사용자는 Cloudflare의 기업 계획을 감당할 수 없어 다른 서버로 이동함.
          + 이후 Cloudflare로부터 추가 연락을 받지 않음.
     * 해커뉴스 알고리즘에 대한 의문
          + 특정 게시물이 높은 점수와 많은 댓글을 받았음에도 불구하고 첫 페이지에 나타나지 않음.
          + 해커뉴스 알고리즘의 작동 방식에 대한 의문 제기.
"
"https://news.hada.io/topic?id=14929","Microsoft Build 2024 에서 발표한 모든 것 - Book of News","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Microsoft Build 2024 에서 발표한 모든 것 - Book of News

     * Microsoft의 연례 개발자 행사로 200,000명의 등록자와 4,000명의 현장 참가자
     * 주요 발표를 모두 커버하는 Book of News에는 약 60개의 항목이 포함됨. Windows의 최신 AI 기능부터 Microsoft Copilot의 확장 및 새로운 기능, 개발자를 위한 새로운 도구, 비용 효율적이고 사용자 친화적인 클라우드 솔루션에 이르기까지 다양
          + 상호작용 가능한 목차, 뉴스 관련 이미지와 주요 세션 및 온디맨드 비디오 링크를 제공

Azure AI 서비스 발표:

     * 개인용 챗봇을 위한 Azure 패턴 및 실습: 고객이 지능형 앱을 설계하고 배포하는 데 도움이 되는 레퍼런스 아키텍처 및 구현 지침 제공.
     * 커스텀 생성 모드: 다양한 형식과 템플릿을 처리할 수 있는 새로운 모델 타입이 곧 미리 보기로 제공될 예정임.
     * Azure AI 검색 기능 업데이트: 향상된 검색 관련 기능과 새로운 통합 기능 제공.
     * Azure AI Studio: 개발자가 맞춤형 Copilot을 책임감 있게 구축하고 배포할 수 있는 도구 제공.
     * Azure OpenAI 서비스 업데이트: GPT-4 모델과 새로운 API, 메시지 분석 기능 등 주요 기능 업데이트.
     * Khan Academy와 Microsoft 파트너십: 교육용 AI 도구를 확장하고 무료 접근성을 제공함.

Azure 데이터 발표:

     * Microsoft Fabric의 실시간 인텔리전스: 고용량, 시간 민감, 고도로 세밀한 데이터를 활용하여 빠른 의사결정을 지원하는 SaaS 솔루션 제공.
     * Azure Database for PostgreSQL의 새로운 AI 기능: 고급 AI 모델을 활용한 실시간 예측 및 텍스트 번역 기능 제공.
     * Microsoft Fabric의 새로운 기능: Fabric Workload Development Kit, 데이터 공유 기능, GraphQL API 등의 업데이트.
     * Azure Cosmos DB의 새로운 기능: 내장 벡터 데이터베이스 기능, 서버리스에서 프로비저닝된 계정으로의 마이그레이션 등.

Azure 인프라 발표:

     * Azure Compute Fleet: 다양한 가상 머신 유형과 가격 모델을 사용하여 컴퓨팅 용량을 효율적으로 제공하는 서비스 제공.
     * Azure Migrate 및 Azure Container Storage 업데이트: 인프라 현대화와 확장을 지원하는 새로운 기능 제공.
     * 새로운 Azure 가상 머신 시리즈: AI 및 클라우드 네이티브 워크로드에 최적화된 새로운 VM 시리즈 제공.

개발자 커뮤니티 발표:

     * Microsoft for Startups Founders Hub: 스타트업 창업자를 위한 AI 기능 및 템플릿 제공.
     * Microsoft Learn의 새로운 AI 기능: AI 및 클라우드 솔루션을 구축하는 개발자를 위한 인증서 제공.

개발 도구 및 DevOps 발표:

     * .NET 업데이트: 클라우드 네이티브 앱 개발을 위한 새로운 도구와 라이브러리 제공.
     * Visual Studio Code용 AI 툴킷: AI 엔지니어가 지능형 앱을 개발하고 배포하는 데 필요한 도구 제공.
     * Azure API Center 및 API 관리 기능: API 스프롤 문제 해결 및 AI 배포 확장을 지원하는 기능 제공.

Microsoft 365 발표:

     * SharePoint에서 Copilot 생성: 사용자가 SharePoint 사이트에서 문서와 파일의 정보를 기반으로 하는 Copilot을 쉽게 생성할 수 있는 기능 제공.
     * Copilot 확장 기능: Microsoft Copilot의 새로운 작업과 사용자 정의 지식 기반 기능을 제공함.
     * Team Copilot: 팀, 부서 또는 회사 전체를 위한 새로운 협업 및 프로젝트 관리 기능 제공.

Power Platform 발표:

     * Copilot Studio: Copilot을 에이전트처럼 작동시키고 비즈니스 프로세스를 자동화하는 새로운 기능 제공.
     * Power Automate 업데이트: 프로세스 자동화와 생성 AI를 활용하여 작업 방식을 혁신하는 새로운 기능 제공.
     * Power Pages 보안 기능: 사이트를 보호하고 모니터링할 수 있는 새로운 기능 제공.

Windows 개발자 경험 개선:

     * Dev Home: 원격 환경을 중앙에서 관리할 수 있는 기능 제공.
     * WSL 및 PowerToys 업데이트: 새로운 설정 앱과 고급 붙여넣기 기능 제공.
     * Windows 성능 향상: Dev Drive 성능 개선 및 파일 탐색기 기능 추가.

   Verge 에서 공개한 Microsoft Build 2024 에서 발표한 모든 것 글에 너무 뭐가 없다 싶어서 찾아보니, Book Of News에는 꽤 많네요.
   Verge 글 내용도 정리한 김에 여기다 첨부합니다.
     * Microsoft는 AI 에이전트를 업무에 활용하고자 함
          + Copilot AI 에이전트는 이메일 모니터링, 자동화 작업 수행, 직원 온보딩 도움, 데이터 입력 등의 일을 처리할 수 있음
          + 이러한 기능은 직업을 대체하는 것이 아니라 지루한 부분을 맡음
          + Copilot Studio에서 올해 말에 미리보기로 제공될 예정임
     * Microsoft의 새로운 멀티모달 AI 모델 Phi-3-vision 발표 :
          + Phi-3-vision은 텍스트를 읽고 이미지를 분석할 수 있는 새로운 버전의 멀티모달 AI 모델임
          + 모바일 기기에서도 작동할 수 있을 만큼 소형화됨
          + 이미지를 분석하는 데 유용하며 현재 미리보기로 제공되고 있음
     * Microsoft Edge에서 유튜브 동영상 실시간 번역 가능
          + Edge 브라우저는 AI 기반 실시간 동영상 번역 기능을 추가할 예정임
          + 유튜브, LinkedIn, Reuters, Coursera 등의 사이트에서 동영상 더빙 가능
          + 스페인어에서 영어, 영어에서 독일어, 힌디어, 이탈리아어, 러시아어 등으로 번역 가능
          + 곧 출시될 예정이며 더 많은 언어와 비디오 플랫폼이 추가될 예정임
     * Microsoft Teams에서 커스텀 이모지 추가
          + Microsoft Teams에 사용자가 자신의 이모지를 추가할 수 있는 기능이 추가될 예정임
          + 관리자는 이모지 추가 권한을 제한할 수 있으며 조직 외부에서는 이모지가 보이지 않음
          + 7월에 출시될 예정임
     * 작고 강력한 Snapdragon PC
          + Qualcomm의 $899 Snapdragon Dev Kit은 Snapdragon X Elite 칩을 탑재한 작은 컴퓨터임
          + 32GB RAM, 512GB SSD, 다수의 포트가 있음
     * Microsoft 파일 탐색기를 Git 저장소로 사용 : File Explorer와 Git 통합
          + 개발자는 파일 탐색기에서 파일 상태, 커밋 메시지, 현재 브랜치를 추적할 수 있음
          + 7-zip과 TAR 압축을 기본적으로 지원함
     * Windows의 PowerToys에 AI 기반 클립보드 기능 추가
          + Advanced Paste 기능은 Windows 11의 PowerToys에 포함되어 있음
          + Windows Key + Shift + V를 눌러 Advanced Paste 메뉴를 호출할 수 있음
          + 클립보드 내용을 텍스트, 마크다운, JSON 등으로 변환 가능
          + AI 기능을 사용하려면 OpenAI API 키와 크레딧이 필요함
"
"https://news.hada.io/topic?id=14916","스칼렛 요한슨의 OpenAI "Sky" 음성에 대한 성명서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    스칼렛 요한슨의 OpenAI ""Sky"" 음성에 대한 성명서

     * 요한슨의 홍보 담당자인 마르셀 파리소가 NPR에 제공한 성명서. 한국어로 기계 번역

     ""작년 9월, 샘 알트먼으로부터 현재 ChatGPT 4.0 시스템의 음성 역할을 맡아달라는 제안을 받았어요. 그는 제가 기술 회사와 창작자 간의 간극을 좁히고, 소비자들이 인간과 AI에 관한 지각변동에 편안함을 느끼도록 도울 수 있을 거라고 말했죠. 제 목소리가 사람들에게 위안이 될 거라고도 했어요.
     오랜 고민 끝에 개인적인 이유로 그 제안을 거절했어요. 9개월 후, 제 친구들과 가족, 그리고 대중들은 ""Sky""라는 이름의 새로운 시스템이 제 목소리와 얼마나 비슷한지 지적했어요.

     공개된 데모를 들었을 때, 알트먼 씨가 제 목소리와 너무나 흡사해서 가장 가까운 친구들과 뉴스 매체조차 구분하기 어려운 목소리를 추구했다는 사실에 충격을 받고, 분노했으며, 믿기 어려웠어요. 알트먼 씨는 심지어 그 유사성이 의도적이었음을 암시하며, 제가 채팅 시스템 사만다의 목소리 연기를 맡아 인간과 친밀한 관계를 형성했던 영화 ""그녀""를 언급하는 단 한 단어 ""her""를 트윗했죠.
     ChatGPT 4.0 데모가 공개되기 이틀 전, 알트먼 씨는 제 에이전트에게 연락해 다시 한번 고려해 달라고 했어요. 우리가 연결되기도 전에 그 시스템은 이미 공개되어 있었죠.
     그들의 행동으로 인해 저는 법률 자문을 받을 수밖에 없었고, 변호사는 알트먼 씨와 OpenAI에 두 차례 서한을 보내 그들이 한 일과 ""Sky"" 목소리를 만든 정확한 과정을 설명해달라고 요청했어요. 결국 OpenAI는 마지못해 ""Sky"" 목소리를 내리기로 합의했죠.
     우리 모두가 딥페이크와 자신의 초상권, 자신의 작품, 정체성 보호와 씨름하는 이 시기에, 저는 이런 문제들이 절대적인 명확성을 요구한다고 믿어요. 투명성과 개인의 권리를 보호하기 위한 적절한 법안 통과라는 형태의 해결을 기대하고 있어요.""

   기록에 따르면 OpenAI는 스칼렛 요한슨의 목소리를 복제하지 않았습니다.

   OpenAI에서는 어떻게 나오려나요.

   '이 목소리는 당신이 아니에요. 당신 목소리는 이겁니다.' 하면서 진짜 완벽하게 복제된 스칼렛 요한슨의 목소리를 들려주려나요?

   일처리가 좀 아쉽긴 하네요. 자신감의 부작용인지...

   이 업계 특유의 '허락보다 용서가 쉽다.'는 격언을 제대로 깨뜨릴 한 방을 날려줬으면 합니다. 헐리우드 스타에게 이런 태도면 일반인의 항의에 히트맨을 보낼지도 모르겠어요.

   개인적으로는 이미 Sky voice 는 6개월 전에 출시해서 누구나 iOS 앱으로 쓸수 있었고, 스칼렛 요한슨 혹은 'her' 와 유사하다고 화제가 된적이 없었는데... (reddit, hn 등에서도 써본 사람들은 같은 목소리로 혼동될 정도는 아니라고들..) 저도 지금은 분명 sky 설정해보면 'her' 의 스칼렛 요한슨 느낌의 목소리라는 건 알겠지만,,, 동일한 목소리는 아니라고 느껴지구요.
   이런 경우에도 스칼렛 요한슨이 목소리 권리를 주장하는게 타당한지 의문입니다.

   예전에 올라온 데모: https://www.youtube.com/watch?v=RcgV2u9Kxh0

   스칼렛 요한슨이라고 알고 지금 들어보니 분명 스칼렛 요한슨과 비슷하긴 하지만... ㅎ

   지금은 생각이 달라지셨길 빕니다.

   참.. 그래도 AI 업계를 이끌어나간다는 기업이..

   OpenAI는 이와 관련해서 ChatGPT의 음성을 선정한 방법 글을 별도로 올린바 있습니다.

ChatGPT 음성을 선택하는 과정

     * ChatGPT의 음성 모드는 사용자들에게 사랑받는 기능 중 하나임
     * 5개의 개성 있는 음성(Breeze, Cove, Ember, Juniper, Sky)은 5개월에 걸친 광범위한 과정을 통해 신중하게 선택됨
     * 전문 성우, 에이전시, 캐스팅 감독, 업계 고문 등이 참여함

창작 커뮤니티 지원과 성우업계와의 협력

     * OpenAI는 창작 커뮤니티를 지원하고 성우 캐스팅을 위해 성우업계와 긴밀히 협력함
     * 각 성우는 시장 최고 수준 이상의 보상을 받으며, 음성이 제품에 사용되는 한 계속될 예정임
     * AI 음성은 유명인의 독특한 목소리를 의도적으로 모방하지 않아야 한다는 신념을 가짐
     * Sky의 음성은 스칼렛 요한슨의 모방이 아니라 다른 전문 여배우의 자연스러운 목소리임
     * 성우들의 프라이버시 보호를 위해 이름은 공개하지 않음

음성 기준 설정을 위해 수상 경력의 캐스팅 감독 및 프로듀서와 협력

     * 2023년 초, 성우 선정을 위해 독립적이고 저명하며 수상 경력이 있는 캐스팅 감독 및 프로듀서와 협력함
     * 각 음성의 독특한 개성과 글로벌 청중에 대한 매력을 신중하게 고려하여 ChatGPT 음성에 대한 기준을 만듦
     * 기준에는 다양한 배경 또는 다국어 구사 가능, 시대를 초월하는 음성, 신뢰감을 주는 음성, 따뜻하고 매력적이며 자신감을 주는 음성 등이 포함됨

400개 이상의 지원을 받은 성우 및 스크린 배우

     * 2023년 5월, 캐스팅 에이전시와 캐스팅 감독은 인재 모집 공고를 냄
     * 1주일 만에 400개 이상의 지원을 받음
     * 배우들은 ChatGPT 응답 대본을 받아 녹음하는 방식으로 오디션을 봄

최종 5개 음성 선정 및 배우들과 AI 음성 상호작용에 대한 비전 논의

     * 2023년 5월 내내 캐스팅팀은 14명의 배우를 독립적으로 검토하고 선정함
     * 최종 후보 음성을 OpenAI에 제출하기 전 추가로 정제 작업을 거침
     * 각 배우와 AI 음성 상호작용에 대한 비전과 기술의 능력, 한계, 위험, 안전장치 등에 대해 논의함
     * 배우들이 프로젝트에 전념하기 전에 음성 모드의 범위와 의도를 이해하는 것이 중요했음
     * OpenAI 내부 팀이 제품 및 연구 관점에서 음성을 검토한 후 신중한 고려 끝에 최종 음성이 선정됨

녹음을 위해 샌프란시스코로 배우 초청 및 ChatGPT 음성 출시

     * 6월과 7월에 녹음 세션과 OpenAI 제품 및 연구 팀과의 대면 미팅을 위해 배우들을 샌프란시스코로 초청함
     * 2023년 9월 25일, ChatGPT에 음성을 출시함
     * 전체 과정은 5개월에 걸쳐 배우 및 캐스팅팀과 광범위한 협력이 이루어짐
     * GPT-4o의 오디오 연구 및 새로운 음성 기능을 위해 배우들과 계속 협력 중임

유료 사용자를 위한 GPT-4o의 새로운 음성 모드 및 추가 음성 도입 계획

     * 향후 몇 주 내에 ChatGPT Plus 사용자에게 GPT-4o의 새로운 음성 모드 알파 버전 제공 예정
     * GPT-4o를 사용하면 음성으로 ChatGPT와 훨씬 더 자연스럽게 상호 작용할 수 있음
     * GPT-4o는 중단을 원활하게 처리하고, 그룹 대화를 효과적으로 관리하며, 배경 소음을 필터링하고, 톤에 적응함
     * 앞으로 사용자의 다양한 관심사와 선호도에 더 잘 부합하기 위해 ChatGPT에 추가 음성 도입 계획을 가지고 있음

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * OpenAI와 Scarlett Johansson의 갈등
          + OpenAI가 Scarlett Johansson에게 접근했으나 거절당함. GPT-4o 출시 이틀 전, 다시 그녀의 에이전트에게 연락했으나 무응답. 결국 OpenAI는 그녀의 목소리를 흉내낸 제품을 시연함. 이후 Scarlett의 법률팀이 문의하자 OpenAI는 해당 목소리를 제품에서 제거함.
     * OpenAI의 무리한 행동
          + OpenAI가 Johansson을 여러 번 고용하려 했으나 실패하고, 그녀의 목소리를 흉내낸 것은 좋지 않은 행동이라는 의견.
     * ChatGPT-4o 데모에 대한 비판
          + Altman이 ""그녀""를 복사하려는 시도가 불쾌하다는 의견. Johansson이 참여하지 않기로 한 것은 좋은 결정이라는 평가. TTS 엔진이 여전히 사용되고 있다는 점이 명확해짐.
     * Mira Murati의 발언
          + GPT-4o의 음성 모드는 영화 'Her'보다는 인간 대화의 자연스러운 측면에서 영감을 받았다는 Murati의 발언이 인상적이라는 의견. Murati가 질문에 얼어붙은 것은 법적 문제를 피하기 위한 행동으로 보임.
     * Sam의 트윗
          + Sam의 트윗이 Scarlett Johansson의 법률팀에게 필요한 모든 증거를 제공했다는 의견.
     * 법적 문제
          + Sky 목소리가 Scarlett Johansson이 아닌 영화 'Her'에서의 그녀를 흉내낸 것이라는 점. 성우의 목소리가 AI 모델에 의해 도용되는 문제와 관련된 법적 논의. Johansson의 계약에 따라 법적 지위가 달라질 수 있음.
     * Johansson의 선택
          + Johansson이 상당한 로열티와 협력 기회를 포기한 것이 흥미롭다는 의견. 자신의 목소리가 무단으로 사용되는 것에 대한 불쾌감을 이해할 수 있음. 이는 개발자가 자신의 코드가 AI에 의해 무단으로 사용되는 것과 유사함.
     * 법적 대응
          + Johansson이 변호사를 고용할 수 있는 재정적 여유가 있어 OpenAI가 물러났다는 의견. Altman과 OpenAI가 다른 사람들의 권리를 쉽게 침해할 수 있다는 우려.
     * Weird Al Yankovic의 사례
          + Weird Al Yankovic이 동의의 개념을 준수하면서도 원하는 것을 얻어낸 사례를 본받아야 한다는 의견.
     * 법적 대응 촉구
          + Johansson이 회사를 상대로 소송을 제기해 본보기를 보여주기를 바라는 의견. 그녀는 싸울 자원이 있고, 회사도 그럴 가치가 있다는 평가.

   댓글 훑어보면 반AI 의견이 꽤 있어요.
"
"https://news.hada.io/topic?id=14984","2D 강체 충돌 해결 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             2D 강체 충돌 해결 방법

2D 강체 충돌 해결

  문제 정의

     * 마리오가 구름을 밟는 것부터 레이싱 게임에서 두 자동차가 충돌하는 것까지, 충돌을 다루는 것은 대부분의 비디오 게임에서 매우 중요한 부분임.
     * 이 블로그 시리즈에서는 물리 시뮬레이션의 실제 수학과 물리학을 다룰 예정임.
     * 비디오 게임은 이러한 개념을 맥락화하고 덜 추상적으로 만드는 좋은 방법임.

  수학에 대한 한마디

     * 이 글에서는 수학이 많이 등장하지만, 수학을 어려워하지 말기를 권장함.
     * 수학 표기법이 복잡해 보일 수 있지만, 대부분은 간단한 산술임.
     * 수학을 두려워하지 말고 도전해보기를 권장함.

  시작하기 전에

    강체

     * 강체 물리학은 변형되지 않는 물체를 다루는 물리 시뮬레이션임.
     * 실제로는 모든 물체가 분자 수준에서 변형되지만, 시뮬레이션에서는 이를 단순화하여 강체로 다룸.

    충돌 감지와 충돌 해결

     * 충돌 감지는 장면에서 어떤 물체들이 충돌하는지 확인하는 과정임.
     * 충돌 해결은 충돌한 물체들이 어떻게 움직여야 하는지를 결정하는 과정임.
     * 이 블로그 시리즈에서는 충돌 해결 단계에 집중할 예정임.

  우리가 하려는 일은?

     * 대부분의 게임은 큰 루프 안에서 실행됨.
     * 각 게임 루프 반복마다 물체의 위치가 현재 속도에 따라 업데이트됨.
     * 속도는 크기와 방향을 가진 벡터임.

    속도

     * 속도는 일정 시간 동안 물체의 위치 변화를 나타냄.
     * 물체의 새로운 위치는 현재 속도와 시간 간격을 곱한 변위를 더하여 계산됨.

    충돌 해결

     * 충돌 해결의 목표는 충돌 후 물체의 속도를 변경하여 물체들이 더 이상 서로 관통하지 않도록 하는 것임.
     * 충돌 후 속도는 충돌 전 속도와 충돌로 인한 속도 변화의 합으로 표현됨.

  충돌이란 무엇인가?

     * 두 물체가 충돌 중인지 확인하려면 두 가지 조건이 충족되어야 함:
         1. 물체의 기하학적 형태가 접촉하거나 겹쳐야 함.
         2. 물체가 여전히 충돌을 향해 움직이고 있어야 함.

    표면 법선

     * 물체를 표면에서 최대한 멀리 이동시키려면 표면에 수직인 방향으로 이동해야 함.
     * 이 방향을 법선 방향이라고 하며, 표면에 수직인 방향임.

    내적

     * 두 벡터가 같은 방향을 가리키는 정도를 계산하려면 내적을 사용함.
     * 내적은 두 벡터의 대응 요소의 곱의 합으로 정의됨.
     * 내적의 부호를 통해 두 벡터가 같은 방향인지 반대 방향인지 알 수 있음.

  결론

     * 충돌은 한 물체의 점이 다른 물체의 점과 접촉하고 상대 법선 속도가 음수일 때 발생함.
     * 다음 글에서는 충돌의 실제 물리학에 대해 다룰 예정임.

GN⁺의 의견

     * 물리 시뮬레이션의 중요성: 게임 개발에서 물리 시뮬레이션은 현실감을 높이는 중요한 요소임.
     * 수학의 역할: 수학은 물리 시뮬레이션의 핵심이며, 이를 이해하면 더 나은 시뮬레이션을 만들 수 있음.
     * 충돌 해결의 복잡성: 충돌 해결은 단순히 물체의 위치를 업데이트하는 것 이상으로 복잡한 과정임.
     * 교육적 가치: 이 글은 물리 시뮬레이션의 기초를 이해하는 데 큰 도움이 됨.
     * 추가 학습: 물리 엔진을 직접 구현해보는 것도 좋은 학습 방법임. Box2D나 Chipmunk 같은 오픈소스 물리 엔진을 참고할 수 있음.

        Hacker News 의견

해커뉴스 댓글 모음 요약

     * Hey everyone, author here!
          + 블로그 시리즈의 첫 번째 글로, 게임 개발자가 아니거나 수학 배경이 약한 사람들을 대상으로 함.
          + 개념을 자세히 설명하는 이유는 이 때문임.
          + 질문이 있으면 언제든지 환영함.
     * Oh! Look, a well-researched, deeply-explained, and interactive post.
          + 도메인 이름과 TLD가 "".ski""인 것을 보고 다른 멋진 글을 쓴 저자일 줄 알았으나, 다른 사람이었음.
          + 글의 품질이 비슷하게 훌륭함.
          + "".ski"" TLD의 비밀이 궁금함.
     * One side project I am working on right now is a 2d space shooter I am developing with my son.
          + 아들과 함께 2D 우주 슈팅 게임을 개발 중임.
          + 게임 엔진을 사용하지 않고 직접 구현해보려 했으나, 충돌 감지 문제에서 어려움을 겪음.
          + 결국 Box2D를 사용하기로 결정함.
          + 20년 이상의 개발 경험과 수학 배경이 있음에도 문제를 과소평가했음을 깨달음.
     * I always enjoyed the explanation from the N game: N game tutorial
          + 플래시가 유행하던 시절, N 게임의 설명을 즐겼음.
     * I had fun building a TypeScript demo about this topic, involving balls that can bounce and collide. I learned a lot.
          + 공이 튀고 충돌하는 TypeScript 데모를 만들며 많은 것을 배움.
          + 코드
          + 결과/데모
     * This is great. This reminds me of Chris Hecker's Rigid Body Dynamics series from GDMag/Gamasutra that I read (checks watch) almost 30 years ago!
          + Chris Hecker의 강체 역학 시리즈를 떠올리게 함.
          + Chris Hecker의 강체 역학
     * Collisions are violations of the pairwise non-intersection constraint between bodies.
          + 충돌은 물체 간의 쌍방 비교차 제약 조건의 위반임.
          + 충돌력은 이러한 제약 조건의 라그랑주 승수임.
          + 충돌 노멀은 제약 함수의 부분 도함수임.
     * If you want to go further and go for rigid body dynamics and constraint, I found that series of blog post very useful: Toptal blog post
          + 강체 역학과 제약 조건에 대해 더 알고 싶다면, 이 블로그 시리즈가 유용함.
     * To dredge up a related oldie-but-goodie memory of blog posts: Gaffer on Games
          + 관련된 오래된 블로그 글을 떠올리게 함.
          + Gaffer on Games
     * Guess this is a Shameless plug but I wrote an interesting program over 12 years ago using even then very old three Js which is not quite the metal but much less abstract than today's tools.
          + 12년 전에 작성한 프로그램을 소개함.
          + Busy Boxes
"
"https://news.hada.io/topic?id=14952","클로저 체험클로저 체험

Try Clojure

     * 5분만 있으면 됩니다
          + ""익숙한 것만 고집하면 새로운 것을 배울 수 없다"" - 리치 히키
          + 재미있게 시작해보자! 오른쪽에는 REPL이 있음. 이는 명령줄로, 읽고-평가하고-출력하는 루프를 가짐. 작성한 모든 것이 평가됨.
          + 몇 가지 표현식을 입력해보자. 예를 들어 (+ 1 2)를 입력하거나 코드를 클릭하여 자동으로 삽입할 수 있음.
          + 더 많은 명령어를 원하면 (help)를 입력할 수 있음.
          + 준비가 되면 (start)를 입력하자!
     * Clojurescript로 제작됨
          + 이 도구는 @elia_scotto에 의해 Clojurescript로 제작되었음.
          + @borkdude와 놀라운 Clojure 커뮤니티에 감사의 말을 전함.

GN⁺의 의견

     * Clojure의 매력
          + Clojure는 함수형 프로그래밍 언어로, 간결하고 강력한 표현력을 가짐. 초급 소프트웨어 엔지니어에게도 쉽게 접근할 수 있는 언어임.
     * REPL의 유용성
          + REPL(Read-Eval-Print Loop)은 실시간으로 코드를 테스트하고 결과를 확인할 수 있어 학습과 디버깅에 매우 유용함.
     * 커뮤니티의 중요성
          + Clojure 커뮤니티는 활발하고 지원적임. 새로운 언어를 배울 때 커뮤니티의 도움을 받는 것은 큰 장점임.
     * 함수형 프로그래밍의 장점
          + 함수형 프로그래밍은 코드의 가독성과 유지보수성을 높여줌. Clojure는 이러한 함수형 프로그래밍의 장점을 잘 살린 언어임.
     * 도입 시 고려사항
          + 새로운 언어를 도입할 때는 학습 곡선과 기존 시스템과의 통합 문제를 고려해야 함. Clojure는 JVM 위에서 동작하기 때문에 Java와의 호환성이 좋음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Clojure 초보자에게 추천하는 Babashka
          + Babashka 런타임은 Clojure를 빠르게 시작할 수 있는 좋은 도구임.
          + 빠른 시작 시간과 파일 감시 도구와의 호환성 덕분에 초보자에게 적합함.
          + 익숙해지면 REPL 연결을 통해 더 상호작용적인 환경을 구축할 수 있음.
     * Clojure의 재발견
          + 과거에 Clojure를 시도하게 만든 도구가 다시 돌아와 기쁨.
          + 직장과 집에서 거의 매일 Clojure를 사용하며, Babashka도 유용하게 활용 중.
          + REPL 기반 개발 흐름 덕분에 Clojure가 가장 편안한 언어로 느껴짐.
          + Lisp와 함수형 프로그래밍에 관심이 있다면 Clojure를 시도해보기를 강력히 권장함.
     * Clojure의 모멘텀 감소
          + 많은 명령형 언어들이 함수형 프로그래밍 요소를 채택하면서 Clojure의 모멘텀이 감소함.
          + 그러나 Clojure의 생태계는 여전히 ""시간을 초월한"" 품질을 유지하고 있음.
          + 다른 관점을 배울 수 있어 프로그래머에게 유익함.
     * Clojure 학습 경험
          + ""Clojure의 역사""를 읽고 나서 Clojure를 배우기 시작함.
          + Clojure는 생각을 표현하는 데 매우 강력하고 아름다운 언어임.
          + 다른 도구들이 마음에 들지 않는다면 Clojure를 시도해보기를 권장함.
     * Clojure의 인기도 증가
          + 멕시코에서 Clojure의 인기가 증가하고 있으며, 브라질도 비슷한 상황일 것으로 예상됨.
          + Nubank가 Clojure를 주로 사용하며, 언어의 핵심 멤버들도 고용함.
     * Clojure 사용을 꺼리는 이유
          + Clojure의 가치와 트랜스듀서에 관심이 있지만, Java 설치가 부담스러움.
          + Java의 복잡성과 지루함 때문에 Clojure 사용을 꺼리게 됨.
          + Babashka를 시도해볼 계획임.
     * 초보자를 위한 Clojure 학습 사이트
          + Maria.cloud는 초보자에게 프로그래밍을 가르치는 데 유용한 사이트임.
          + REPL 기반 개발을 실제로 경험할 수 있는 환경을 제공함.
     * Clojure 학습 자료 추천
          + Daniel Higginbotham의 ""Clojure for the Brave and True""는 훌륭한 학습 자료임.
          + 온라인에서 무료로 제공됨.
     * 관련 자료
          + 브라우저에서 Clojure를 시도할 수 있는 다양한 인터랙티브 튜토리얼이 존재함.
     * XSS 취약점 경고
          + (my-name) 부분에 XSS 취약점이 있음.
"
"https://news.hada.io/topic?id=14959","아마존 창고 노동자 3분의 1, 푸드 스탬프 또는 메디케이드 수혜자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 아마존 창고 노동자 3분의 1, 푸드 스탬프 또는 메디케이드 수혜자

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 자동화와 AI의 영향
          + 자동화와 AI의 발전으로 인해 저숙련 노동의 경제적 가치가 매우 낮아짐.
          + 대부분의 사람들은 경제적 유용성이 거의 없게 될 가능성이 큼.
          + 이를 해결하기 위해 기본소득제(UBI)를 도입하거나 사람들을 굶주리게 하는 두 가지 선택지밖에 없음.
     * 정부 보조금과 기업의 역할
          + 정부가 저임금 노동을 보조하는 시스템은 경쟁을 막고 주주들을 만족시킴.
          + 기업이 더 많은 부담을 져야 한다는 의견이 있지만, 현실적으로 힘든 상황임.
     * 기업의 이익과 노동자
          + 기업이 큰 이익을 내면서도 노동자들이 빈곤 수준의 소득을 받는다면, 정부가 더 높은 세금을 부과해야 한다는 주장.
          + 이는 기업이 실제로는 수익성이 없다는 것을 의미할 수 있음.
     * 미국의 복지 수혜자 통계
          + 2023년 4월 기준으로 4,190만 명이 SNAP(식품 지원 프로그램) 혜택을 받음.
          + 2024년 1월 기준으로 8,404만 명이 Medicaid와 CHIP에 등록됨.
     * 복지 프로그램의 필요성
          + 복지 프로그램은 필요한 사람들에게 지원을 제공하는 것이 목적임.
          + 식품 지원과 Medicaid는 가족의 필요에 따라 제공됨.
          + 세금이 일하는 가족들에게 사용되는 것을 긍정적으로 보는 의견.
     * 정부와 기업의 책임
          + 기업이 사람들을 돌보는 것이 아니라 정부가 시민들을 돌보는 것이 더 나은 접근법이라는 의견.
          + Medicaid, 식품 지원, 부정소득세가 이러한 접근법을 대표함.
     * 복잡한 논의
          + 기업이 저임금 노동자를 고용하여 정부의 복지 부담을 줄이는 것이 사회에 좋은 일인지에 대한 논의.
          + 다양한 시나리오를 통해 기업의 역할과 정부의 역할을 비교함.
     * 기사 내용 요약
          + 설문조사에 따르면, 지난 3개월 동안 정부 지원 프로그램을 사용한 사람들이 많음.
          + 아마존의 중간 소득은 2023년에 $45,613로 증가했으며, 많은 직원들이 이전 직장보다 더 많은 소득을 얻고 있음.
     * 고용주와 직원의 복지
          + 직원들이 기본적인 생활을 유지하기 위해 정부의 지원이 필요하다면, 이는 고용주가 아니라 고용주가 복지를 받고 있는 것임.
     * 유럽의 공공 의료 시스템
          + 유럽에서는 공공 의료 시스템이 일반적이며, 미국보다 비용이 저렴함.
          + 식품 지원 프로그램은 부정적으로 보는 의견도 있음.
"
"https://news.hada.io/topic?id=14914","Show GN: TSBOARD (타입스크립트로 작성된 오픈소스 커뮤니티 빌더)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: TSBOARD (타입스크립트로 작성된 오픈소스 커뮤니티 빌더)

TSBOARD란 무엇인가?

     * TSBOARD 는 Type Safety BOARD로, 타입스크립트로 작성된 커뮤니티 빌더이자 게시판입니다.
     * 이곳 GeekNews에서 소개된 적이 있는 Bun 런타임을 사용하고, ElysiaJS 라는 웹프레임워크를 이용하여 백엔드를 구성했습니다. 덕분에 일반적인 게시판 엔진 대비 동작 속도가 빠릅니다.
     * 프론트엔드에는 Vue 와 Vuetify 가 사용되었습니다. 하지만 개발자의 미적 감각은 섭섭한 수준이기에, 훗날 귀인 디자이너분들의 도움도 받을 수 있지 않을까 하는 희망을 안고 이곳에 글을 쓰게 되었습니다. (+ 당연히 귀인 개발자분들의 도움도 필요하구요!)

왜 만들었나?

     * 저는 웹 프로그램을 PHP로 시작했고, 제로보드와 그누보드 시절을 겪은 (이제는 아재) 개발자입니다.
     * 제 머리 속 마지막 자바스크립트에 대한 추억은 jQuery 없으면 쓰레기(...)같은 언어, 정도였습니다.
     * 그러나 지속적인 표준안 개선과 Node.js 의 등장, 그리고 MS의 타입스크립트에 뒤늦게 반해버렸습니다. (사실 너무 늦게 반한 것 같습니다)
     * 그래서 다시 웹 프로그램을 한 번 만들어보고 싶었고, 늘 만들었던 게시판을 타입스크립트로만 작성해보고 싶었습니다.
     * 더불어 (이왕이면) 쓰기 쉽고, 더 빠르고 안전하게 동작하도록 만들어보고 싶어서 만들게 되었습니다.

TSBOARD만의 장점

     * TSBOARD는 프론트엔드와 백엔드 모두 타입스크립트로 작성되어 타입 안정성을 최대한 보장합니다. (뭐든 완벽한 것은 없지만, 가장 신경쓴 부분이 타입 안정성입니다)
     * Node.js 기반의 풀스택 개발을 해보신 분들에게는 쉽게 이해되며, 바로 활용 가능한 디자인입니다. 저도 새로 처음부터 배우면서 만들었기에 다른 분들의 모범 사례를 많이 참조했습니다.
     * 중소규모의 커뮤니티 사이트를 제작하는데 필요한 모든 기능들이 내장되어 있습니다. 개발할 때는 클리앙이나 퀘이사존, 기글하드웨어 또는 최근 새로 생긴 다모앙 같은 국내에 내노라 하는 커뮤니티 사이트들을 참조했었습니다.

단점도 있습니다.

     * Bun 런타임은 가상 CPU에서의 동작이 제대로 안됩니다. 저렴하게 사용 가능한 가상서버 호스팅에서는 제대로 활용하기 어렵습니다. TSBOARD도 Bun에 의지하고 있어서 마찬가지입니다.
     * TSBOARD는 Client Side Rendering 방식을 사용합니다. 저는 PHP를 여전히 아꼈던 사람으로서, Server Side Rendering 이라는 용어가 되려 생소했었습니다. 여러 장단이 있지만 일단 (저에게) 새로운 방식을 해보고 싶었고, 서버 부담을 줄이는 목적으로 TSBOARD를 개발했기에 이것이 누군가에겐 분명 단점으로 다가올 수도 있을 듯 합니다.
     * 사실 개발을 시작한 지는 약 반년이 넘었습니다만, 이제서야 겨우 소개를 올릴 수 있을 정도로 부족한 점들이 많습니다. 이 단점은 훗날 만나게 될 귀인 여러분들의 도움으로 해소할 수 있길 기대하고 있습니다.

마무리 : 언젠가 유명 커뮤니티 사이트들이 TSBOARD를 채택할 날을 꿈꾸며

     * 그누보드가 PHP에서 Python으로 넘어가는 걸 보면서 웹프로그램들도 새로운 시도들을 계속해서 하고 있구나, 하는 걸 느꼈습니다. XE에서 탄생한 라이믹스도 그렇구요. 여전히 웹은 역동적이고, 개발도 마찬가지더라구요.
     * 저도 작게나마 TSBOARD 프로젝트를 통해서 웹 생태계에 기여하고자 하는 마음으로 소개글을 남겨봅니다.
     * 언젠가 새롭게 탄생할 커뮤니티 사이트가 TSBOARD를 채택할 그 날을 꿈꿔봅니다. ㅎㅎ

   긴 글 읽어주셔서 감사합니다!

   약 2주전에 올린 글에 댓글을 추가로 남기는게 도움이 될까 싶지만 ㅎㅎ
   GeekNews에서 받은 SEO 관련 피드백들을 어떻게 반영할까 고민하다가,
   sitemap.xml 을 구현하여 검색 엔진 최적화를 반영하여 내용 공유 차원에서 댓글로 남깁니다!

   결론만 말씀드리면, 검색 엔진은 robots.txt > sitemap.xml 접근을 통해 최종적으로
   https://tsboard.dev/tsapi/seo/main.html (예시 페이지) 경로에서 데이터를 수집하게 됩니다.
   사용자가 검색으로 유입될 경우, 해당 페이지에서 다시 링크들을 통해 원래 사이트로 접속되도록 하였습니다.

   자세한 내용은 아래 링크를 통해서 확인 하실 수 있습니다!

   https://tsboard.dev/board/free/18

   저도 취미로 만드는 프로젝트를 bun으로 돌릴까 생각중이었는데, 가상CPU에서 동작이 제대로 안된다니 놀랍네요. 그리고 회원가입할때 비밀번호 조건에 대문자 라고 써있어서 소문자는 포함 안시켜도 되는줄 알았는데 낚였네요 ㅋ 대소문자라고 쓰셔야할듯

   혹시나 싶어서 답글을 남겨봅니다. Bun 런타임 고려중이신 분들은 이제 더 이상 가상 CPU에서의 동작 문제를 걱정하지 않으셔도 됩니다...! 1.1.31 버전에서 테스트를 해보니 무리 없이 동작되는 걸 확인하였습니다. :)

   아앗 댓글 감사드리고 말씀하신 비밀번호 조건 부분 수정도 꼭 해놓도록 하겠습니다. ㅎㅎㅎ

   Bun은 저도 뭐랄까 깊게 써본 것은 아닙니다만, 쓰면서 여러 가지 의미로 놀라운 경험들을 많이 할 수 있었습니다. Node.js 에서는 당연히 되던 기능이 무슨 이유 때문인지 안되던 경험도 많았고 (그중에는 가령 폴더 생성 시 recursive: true 옵션이 지원 안되는 문제도 있었네요), 놀라울 정도로 속도에 집착하는 (그래서 제가 더 애정을 가질 수 밖에 없었던) 모습들도 많았습니다.

   지금은 Bundows 라고 하던데 Windows 에서 Bun 런타임이 이제 공식 지원입니다만, 1.1 이전엔 안되어서 WSL2 상에서 돌렸어야 했었습니다. 말씀하신 가상 CPU에서의 동작은 Bun이 앞으로도 지원하지 않을 가능성이 높습니다. AVX2 명령어를 지원하지 않는 CPU를 위한 배포판 (baseline) 까지는 제공하고 있지만, 가상 CPU 미지원은 Bun 개발 언어인 Zig 의 한계인지 몰라도 여러 모로 아쉬운 상황이긴 합니다. 그냥 사용하면서 느낀 건 속도를 위해 Bun 역시 희생한 부분이 있는 것 같다, 이 정도입니다.

   혹시 이 댓글을 보실 미래의 Bun 사용자분들이 계실지 몰라 조금만 더 첨언하자면, 여러 제약이 있음에도 불구하고 Bun은 매력적인 선택지입니다. 특히 웹 프레임워크로 ElysiaJS 를 선택하신다면 속도 측면에서는 적어도 아쉬울 점이 없으리라 생각하고 있습니다. 저는 다시 처음으로 돌아가서 런타임을 선택해야 하는 시점이 온다면... 조금 더 고민을 해보겠지만 결국 여러 문제에도 불구하고 Bun을 역시 선택할 것 같습니다. 처리 속도에 광적으로 집착하는거나, 이미 정답이 있는 JS 런타임 생태계에 도전하는 모습들이 뭔가 마음을 움직이더라구요. ㅎㅎㅎ

   깃헙 코드를 보는 중 궁금한 점이 있어서 질문 남겨봅니다.
    1. 테이블 구조를 확인해보니 관계 설정이 안되어 있는데 그러한 이유가 있을까요?
    2. 인덱스 효율을 위해서 테이블 관계 사용하지 않았다면, RDB 대신 NoSQL을 고려하지 않은 이유가 궁금합니다.

   개인적으로 나와 주었으면 하는 TS 기반의 보드류가 나와서 감명 깊게 보았습니다!

   v0.8.40 업데이트에서 외래 키 설정이 반영되었습니다!
   https://tsboard.dev/board/free/18

   앗 댓글 감사합니다!

   관계 설정이라 하심은 외래 키 설정이 안되어 있는 것 말씀이시로군요! 따로 이유가 있었던 것은 아니고, 테이블 구조가 어느 정도 확정이 되면 설정을 해볼까 했었는데 도중에 다른 거 처리하다보니 아직까지 반영을 해놓지 못했습니다. 이미 TSBOARD 테이블 간의 의존 관계나 참조하는 컬럼이 어느 정도 안정화 되었으니 이제 외래 키 설정도 해놓고 좀 더 무결성을 보장하는 방식으로 바꾸도록 해보겠습니다!

   NoSQL은 고민을 잠시 했었는데... 새로 배우는 게 우선 타입스크립트 언어부터 Vue, Node.js/Bun 등 너무 많아서 바꾸지 않기로 했습니다. 관계형 데이터베이스가 유구한 역사만큼 이제 오래되긴 했습니다만, 그래도 아직 많은 곳에서 여전히 유용하게 활용되고 있는 이유가 있지 않을까? 하는 고민도 있었습니다. 지금 댓글을 쓰는 시점에서는 이런데 혹시 나중에 뭔가 필요가 생기면 MongoDB 같은 걸 고려해 볼 수도 있겠습니다. ㅎㅎ

   타입스크립트 기반의 게시판이 아직 없었다는 게 사실 개인적으로는 놀라운 일입니다만, 이것도 시간 문제가 아닐까 싶습니다. TSBOARD와는 다른 스타일의 또다른 프로젝트들이 많이 생기면 좋겠습니다! ㅎㅎ 댓글 감사드립니다!

   솔직히 예전 PHP 보드류들을 생각해서 별 기대를 안했는데, 데모사이트(https://tsboard.dev)를 보고 생각이 바뀌었습니다. 퀄리티가 너무 좋네요.
     * SSR 지원
     * 비로그인 글쓰기 허용 가능 (dc같은)

   이런 점들이 필요하지 않을까 생각됩니다!

   에디터는 직접 구현하신건가요? ㄷㄷ 아마 에디터 엔진(?)을 사용하신게 아닌가 싶긴 한데 엄청난 장인정신이 느껴집니다

   댓글 감사합니다! tsboard.dev 사이트의 퀄리티를 좋게 봐주시니 더 감사합니다. ㅎㅎ

   말씀해주신 SSR 지원은 2단계로 나눠서 로드맵을 준비해 보았고, 보완책을 먼저 적용한 이후 후속 버전에서 CSR 과 SSR 방식을 적절히 섞어서 개발해 나가려고 합니다. 성능을 충분히 유지하면서 SEO에 좀 더 최적화하려면 무엇보다 제가 더 많이 배우기도 해야해서 시간이 좀 더 필요할 것 같습니다. 포기하지 않고 꾸준히 해보면 저도 다른 귀인 개발자분들을 만나 더 빨리 배우고 도움도 혹시 받을 수 있지 않을까 희망해 봅니다. ㅎㅎ

   비로그인의 경우 TSBOARD를 만들때 개발 기간 단축이나 설계상의 단순성을 유지하기 위해 고려하지 않았었는데, 고민을 좀 더 해보겠습니다! 지금 답글을 남기는 시점에서는 비회원을 고려해야 할 경우 변경점들이 많이 필요해서 당장은 어려워 보입니다. ^^;;;

   에디터는 tiptap 에디터 기반으로 한땀 한땀 구성을 했는데, 생각보다 에디터 구현에 시간을 많이 잡아먹었습니다. 예전 기억으로는 CKEditor였나...? 그런 걸 그냥 가져다 쓰면 되었던 것 같았는데 요즘에는 이렇게 한땀 한땀 레고 조립하듯 해야 하더라구요. ㅠ.ㅠ 거기에 TSBOARD 기능을 통합하려고 더 삽질을 했었습니다. 만들면서 느낀 건 이 에디터만 누가 좀 만들어주면 좋겠다 싶었는데 ㅎㅎㅎ... 혹시 tiptap 기반에 쓸만한(?) 에디터가 필요하신 분들은 TSBOARD에 제가 구현해둔 코드들 참조하시면 더 빨리 더 쉽게 개발하실 수 있으실듯 합니다.

   생각외로 좋게 봐주시는 분들이 많아서 소개글 쓸 때 쓸까말까 고민하던 시간들이 아깝다는 생각이 들 정도입니다. TSBOARD 많이 부족합니다만, 아무쪼록 잘 부탁드립니다!

   php 로 개발을 시작했고 저도 typescript 반해서 많이 시도하고 있을 시기네요.
   뭔가 동질감 느껴서 반갑습니다.

   반갑습니다! 저도 비슷한 여정을 어쩌다보니 밟아가고 있네요. ㅎㅎ PHP 언어는 아직까지도 여기저기 혼나고 다녀서 개인적으로는 안타깝습니다만, 타입스크립트를 써보니 조금쯤은 혼나도 괜찮겠다는 생각이 듭니다. ㅎㅎ yeppyshiba님도 타입스크립트로 재밌는 프로젝트 많이 해보시면 좋겠습니다. :)

   넘 멋지십니다 👍

   감사합니다!! 부족한 프로젝트입니다만 좋게 봐주셔서 저도 행복합니다. ㅎㅎ
   언젠가 TSBOARD가 필요해지실 때가 있을 때 자신있게 추천할 수 있도록 더 열심히 개선해 나가겠습니다. :)

   이런게 아쉬웠는데.. 감사합니다.

   댓글 남겨주셔서 감사합니다! 혹시 언젠가 TSBOARD와 유사한 웹프로그램이 필요해질 때 한 번 기억해주시고 테스트 해봐주시면 좋겠습니다. 필요하실 때 더 편하게 쓰실 수 있도록 계속 열심히 만들어 나갈께요!

   오...! PHP 시절 sirini 보드 기억하는데, 정말 오랜만입니다.
   나름 당시 시리니보드 스킨도 개발하고 보안취약점도 제보하고 그랬었는데, 잘 지내고 계시나요 :)

   코드 보다보니 느낀점은, 서버쪽 코드가 뭔가 PHP 느낌이 많이 나네요 ㅎㅎ (PHP 느낌의 js 코드?)

   다른분께서 말씀주신대로, CSR이면 SEO등에 불리하다는 단점이 있을텐데요.
   이러한 부분이 잘 보완되면 좋을 것 같습니다ㅎㅎ

   앗 예전에 저를 도와주셨던 귀인이셨군요! 이렇게 다시 만나게 되어 반갑습니다 ㅎㅎ
   아울러 그 때나 지금이나 약간 누구나 생각할법한 시시한 것만 만드는 것 같아 부끄럽네요. ^^;;

   백엔드 코드는 말씀하신대로 PHP 스타일이 녹여져 있습니다 ㅎㅎ 저도 가끔 PHP에서 쓰던 함수들이 JS에는 없나? 하고 매번 찾다가 비슷한 이름으로 함수명을 지어서 쓰기도 합니다. 좀 더 JS/TS 코드에 익숙해지고 리팩토링을 하다보면 더 개선되지 않을까 싶기도 하네요. ㅎㅎㅎ

   SEO 부분은 말씀해주신대로 보완을 해야겠습니다. 제 짧은 생각으로는 RSS 같은 다른 정적 페이지를 추가하는 것인데, 이것 저것 시도해 보도록 하겠습니다.

   그나저나 PHP4 시절의 저를 기억해주시는 분이 있다는게 정말 놀랍고 감사한 일이네요! 사실 이 글 쓸까말까 고민을 많이 했었거든요. ㅎㅎ;; 더 많은 분들에게 작게나마 도움 될 수 있도록 노력해 보겠습니다. TSBOARD도 많이 사랑해주세요!

   글을 보고 궁금한게 생겨 댓글을 남겨봅니다. (코드를 보진 않았습니다)

   백엔드를 Nodejs compatible로 개발하지 않은 이유가 궁금합니다 (말씀하신 단점을 상쇄하기엔 너무 퍼포먼스가 안나오나요?)
   CSR이면 SEO 처리는 어떻게 하실 계획인가요? 커뮤니티는 검색 유입도 신경써야될 것 같은데요

   안녕하세요! 댓글 남겨 주셔서 감사합니다. (사실 무관심 속에 뭍힐 거라 생각했는데 감동입니다)
   질문해주신 내용들이 저도 고민을 굉장히 많이 했었는데, 그냥 이런 생각도 있구나 하고 봐주시면 좋겠습니다.
   아, 참고로 저는 PHP 이후로는 현생에서 단 한번도 웹개발을 이어간 적이 없었습니다. Node.js 개혁의 시대도, React가 웹 세상을 바꿀 때도 관심을 두지 않았었기 때문에 다소 생소한 관점도 있을 수 있겠습니다. ㅎㅎ
    1. 백엔드를 왜 Node.js 호환되게 하지 않았나?
       저는 처음에 TSBOARD를 개발할 때, 이미 Node.js 기반의 (제가 모르는) 유명한 게시판이나 블로그나 여하간 제가 만들려던 거랑 유사한 게 있을거라고 지레짐작했습니다. 서두에도 언급했지만 현생에서 웹개발을 할 일이 없기도 했고, 따로 사이드 프로젝트라는 걸 해본적이 없어서 더 그랬던 것 같습니다. 저는 당연히 Node.js 기반으로 나온 뭔가가 있을텐데 내가 또 새로운 걸 하는 건 큰 의미가 없겠다 싶어서 기왕 새로 배우는 거 Bun 기반으로 해보자, 하고 결정한 게 지금까지 오게 되었습니다.

   퍼포먼스 문제를 고민해보면, 사실 제가 목표로 했던 소규모 커뮤니티 사이트 (동접 10명 미만) 에서는 Node.js 로 충분하다고 생각합니다. Bun 검토하기 전에 Node.js + Hono 기반으로도 테스트를 해봤었는데 사실 제 생각엔 문제가 없었습니다. 그러나 Bun 이 제시했던 압도적인 퍼포먼스와 더불어, 그 Bun 을 기반으로하는 ElysiaJS 퍼포먼스가 정말 인상적이어서, 이걸 포기하고 싶지 않았습니다. 이미 다른 누군가가 Node.js 기반으로 훌륭하게 만든 게시판이 있을 거라 생각한 저는 그 가상의 게시판과 경쟁하려면 더 높은 퍼포먼스가 필요하다고 생각했고, 결국 Node.js 호환성을 포기하고 Bun 의존적으로 설계를 하게 되었습니다. (지금은 살짝 후회중입니다. Node.js 기반으로 그누보드나 라이믹스, XE 같은 유명한 게시판이 없...더라구요. 제가 못찾은 걸까요??)
    2. CSR을 선택하면 SEO는?
       말씀하신 부분이 전적으로 맞습니다. 검색 유입을 하려면 어쨌든 구글 크롤러가 내용을 읽어드리고, 검색 매칭이 되도록 해야 합니다. 이 부분은 아직 구현하지 않았습니다만, 사용자가 원할 경우 마치 RSS 피드를 노출하는 것처럼 최신 컨텐츠들을 정적 형태로 따로 공유하면 어떨까 생각하고 있습니다. JSON 형태로 외부 노출을 하면 수집기가 더 편하게 데이터를 갱신할 수 있지 않을까? 하는 생각을 가지고 있는데 좀 더 고민해 보겠습니다. (RSS 를 생각했었는데 요즘엔 이걸 대부분 안쓰시더라구요?? 제가 너무 오래 웹을 안했나봐요 ㅠ)

   SEO 보완책과는 별개로, CSR로 간 이유는 서버 부담을 좀 더 적극적으로 줄이고자 했기 때문입니다. 최근에 생긴 다모앙(이거 커뮤니티 이름을 막 공개해도 되나 모르겠네요) 사이트의 경우에도 트래픽 부하나 서버 부담이 상당히 되는 걸로 알고 있습니다. 커뮤니티 빌더라는 걸 생각했을 때 SEO도 중요하지만 우선 비용과 직결되는 문제부터 해결해야겠다는 생각에 CSR를 우선적으로 선택하였습니다. PHP를 여전히 사랑하는 저로서는 SSR이 오히려 익숙합니다만, 클라이언트가 좀 더 적극적으로 컴퓨팅 파워를 쓰면 서버가 더 여유를 되찾지 않을까? 하는 생각으로 한 선택이라 보시면 되겠습니다.

   궁금증이 좀 해소되셨으면 좋겠습니다. 아울러 제가 한 선택들은 장단점이 명확해서 사실 TSBOARD가 정답이라고 생각하진 않습니다. 여러 트레이드오프를 고려했고, 저의 짧은 생각으로 내린 결정들이라고 보시면 될듯 합니다. 추후에 TSBOARD가 좀 더 많이 활용된다면 언제든지 제 생각을 바꿔서 다른 시도를 해볼 수 도 있겠습니다. ㅎㅎ

   이미 설계가 CSR에 맞게 되어있어서, SSR로 바꾸려면 거의 재개발수준의 작업이 필요할걸로 보입니다ㅜㅜ

   최근 검색 크롤러는 JS도 일부 개선한다고는 하지만.. 아무래도 plain HTML을 따라올수가 없을것 같습니다.
   일반 브라우저는 CSR로 처리하되, 검색봇(GoogleBot, Yeti등)의 경우, SSR로 처리하는 방식도 있을 것 같습니다.

   개인적으로는, 그러한 방식은 임시방편으로 생각되고, 결국 SEO를 잘 지원하려면 SSR이 정답이지 않을까 싶어요.

   CSR이라 하더라도, 결국 요청량이 많아지면, 백엔드 부하가 생길것이고, 캐시설계나 다양한 장치들을 통하여 백엔드 부하를 줄이는 것이 좋은 방향인것 같긴 합니다^^;

   TSBOARD의 경우 말씀하신대로 CSR 기준으로 모두 작업이 되어 있어서 적어도 v1.y.z 버전에서는 CSR only 기준으로 작업을 해야 할 것 같습니다. 일부 보완을 해보자면, 첫화면에 모든 게시글들이 나타나는 구조이니 첫화면만 SSR 방식을 적용한다던지, 아니면 말씀하신대로 봇들은 plain HTML쪽을 크롤링 할 수 있도록 별도 페이지를 추가하던지 해야 겠네요! 보완책은 v0.9.z 버전대에서 반영해 보도록 하겠습니다!

   앗 혹시 TSBOARD가 CSR방식이라서 검색이 안된다! 라고 생각하실 분들이 계실까봐 조금 염려되어 말씀드리자면, 구글봇의 경우 CSR 방식으로 제작된 웹사이트 내용도 가져갈 수 있을 정도로 이미 개선되어 있다고 합니다! (구글이니까 가능...?) SEO가 불리한 방식임은 분명하나 전혀 안된다, 는 아니니 너무 걱정 안하셔도 좋을 것 같습니다.

   CSR, SSR 뿐만 아니라 중간 어딘가의 방식들도 있을테니 좀 더 고민해보고 SEO를 개선하는 목표로 v2.0.0 로드맵도 수립해 보겠습니다. (아직은 먼 얘기입니다만 ㅎㅎ) 조언해 주셔서 감사드리고 부족한 프로젝트입니다만 TSBOARD 잘 부탁드립니다!
"
"https://news.hada.io/topic?id=14989","Show HN: 연구 논문을 위한 HackerNews","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show HN: 연구 논문을 위한 HackerNews

AI가 개발자의 일상을 변화시키는 방법

     * 오늘의 코드에서 내일의 교향곡으로: 2030년까지 개발자의 일상에 대한 AI 변혁
          + AI는 개발자의 일상적인 작업을 자동화하고 최적화하여 더 창의적인 작업에 집중할 수 있게 함.
          + 코드 작성, 디버깅, 테스트 등 반복적인 작업을 AI가 처리함으로써 개발자는 더 높은 수준의 문제 해결에 집중할 수 있음.
          + AI 도구의 발전으로 인해 개발자의 생산성과 효율성이 크게 향상될 것으로 예상됨.

AI/ML 기반의 Wi-Fi 라디오

     * AI/ML 정의된 Wi-Fi 라디오를 향하여: 개요, 도전 과제 및 로드맵
          + AI와 머신러닝을 활용한 Wi-Fi 라디오의 발전 방향과 도전 과제에 대한 개요.
          + 네트워크 성능 최적화와 사용자 경험 향상을 목표로 함.
          + 향후 기술 발전을 위한 로드맵 제시.

경제 모델 예측 제어

     * 학습 기반 쿠프만 연산자를 이용한 수처리 공정의 효율적인 경제 모델 예측 제어
          + 수처리 공정의 효율성을 높이기 위해 학습 기반 쿠프만 연산자를 사용한 경제 모델 예측 제어 방법 제안.
          + 기존의 제어 방법보다 더 정확하고 효율적인 제어 가능.
          + 수처리 공정의 비용 절감과 성능 향상 기대.

대형 언어 모델의 메타인지 능력

     * 대형 언어 모델의 메타인지 능력: 수학 문제 해결에서의 탐구
          + 대형 언어 모델(LLM)의 메타인지 능력을 수학 문제 해결에 적용한 연구.
          + LLM이 문제 해결 과정에서 스스로의 오류를 인식하고 수정할 수 있는지 탐구.
          + 메타인지 능력이 향상된 LLM은 더 복잡한 문제 해결에 유용할 것으로 기대됨.

기업의 책임 있는 AI 연구의 한계

     * 기업의 책임 있는 AI 연구의 좁은 깊이와 폭
          + 기업의 AI 연구가 책임성과 윤리성을 충분히 고려하지 않는 경우가 많음.
          + 연구의 깊이와 폭이 제한적이며, 사회적 책임을 다하지 못하는 경우가 있음.
          + 보다 포괄적이고 책임 있는 AI 연구가 필요함.

오픈소스 AI 평가 도구

     * 오픈소스 AI 평가: AI 분석 도구의 확산, 경쟁 모델 복제 및 Zhousidun 데이터셋
          + 다양한 오픈소스 AI 평가 도구의 등장과 활용.
          + 경쟁 모델을 복제하고 비교할 수 있는 도구들이 개발됨.
          + Zhousidun 데이터셋을 활용한 AI 성능 평가 사례 소개.

지진과 국가의 부

     * 지진과 국가의 부: 칠레와 뉴질랜드 사례
          + 지진이 국가 경제에 미치는 영향 분석.
          + 칠레와 뉴질랜드의 사례를 통해 지진 후 경제 회복 과정 탐구.
          + 자연재해가 경제에 미치는 장기적 영향에 대한 이해 증진.

물리 인식 손-객체 상호작용 노이즈 제거

     * 물리 인식 손-객체 상호작용 노이즈 제거
          + 손과 객체 간의 상호작용에서 발생하는 노이즈를 물리 기반 방법으로 제거.
          + 더 정확한 상호작용 모델링을 통해 가상 현실 및 로봇 공학 분야에서 활용 가능.
          + 상호작용의 자연스러움과 정확성 향상 기대.

산술 브라운 운동 하에서 옵션의 위험 중립 평가

     * 산술 브라운 운동 하에서 옵션의 위험 중립 평가
          + 산술 브라운 운동 모델을 사용한 옵션 가격 평가 방법 제안.
          + 위험 중립 평가를 통해 옵션 가격의 정확성 향상.
          + 금융 시장에서의 옵션 거래에 유용한 도구 제공.

메달리온의 연간 복리 수익률이 35% 이상인가?

     * 메달리온의 연간 복리 수익률이 35% 이상인가?
          + 메달리온 펀드의 연간 복리 수익률이 35% 이상인지에 대한 분석.
          + 높은 수익률의 원인과 지속 가능성 탐구.
          + 투자자들에게 중요한 정보 제공.

논쟁 가능한 AI는 계산적 논증이 필요함

     * 논쟁 가능한 AI는 계산적 논증이 필요함
          + AI 시스템의 결정에 대한 논쟁 가능성을 줄이기 위해 계산적 논증 필요.
          + 투명성과 신뢰성을 높이기 위한 방법 제안.
          + AI의 윤리적 문제 해결에 기여.

분산 금융에서의 IT 전략적 정렬

     * 분산 금융(DeFi)에서의 IT 전략적 정렬: CBDC와 디지털 통화
          + 분산 금융 시스템에서의 중앙은행 디지털 통화(CBDC)와 디지털 통화의 역할.
          + IT 전략적 정렬을 통해 효율성과 보안성 향상.
          + DeFi의 미래 발전 방향 제시.

AI를 활용한 의료 과잉 사용 극복

     * AI를 활용한 의료 과잉 사용 극복: 실험적 조사
          + AI를 활용하여 의료 자원의 과잉 사용 문제 해결.
          + 실험적 조사를 통해 AI의 효과 검증.
          + 의료 비용 절감과 효율성 향상 기대.

교육 및 전문 환경에서의 AI 협력자

     * AI 협력자: 교육 및 전문 환경에서의 인간-AI 상호작용 연결
          + 교육 및 전문 환경에서 AI와 인간의 협력 가능성 탐구.
          + AI가 학습과 업무 효율성을 높이는 방법 제안.
          + 인간과 AI의 상호작용을 통해 더 나은 결과 도출 기대.

고도화된 AI에 대한 사회적 적응

     * 고도화된 AI에 대한 사회적 적응
          + 고도화된 AI 기술에 대한 사회적 적응 방안 탐구.
          + AI가 사회에 미치는 영향과 그에 대한 대응 방안 제시.
          + AI와 인간의 공존을 위한 정책 및 전략 필요.

인간-AI 협력 강화 학습 시스템의 설계 경로 지도

     * 인간-AI 협력 강화 학습 시스템의 설계 경로 지도: 조사 및 분류
          + 인간과 AI가 협력하는 강화 학습 시스템의 설계 경로 탐구.
          + 다양한 설계 방법과 그에 따른 장단점 분석.
          + 향후 연구 방향 제시.

양자 머신러닝의 금융 분야 응용

     * 양자 머신러닝의 금융 분야 응용
          + 양자 컴퓨팅을 활용한 머신러닝 기법의 금융 분야 응용 사례.
          + 기존의 금융 모델보다 더 빠르고 정확한 예측 가능.
          + 금융 시장의 혁신적 변화 기대.

지속 가능한 경제 발전 모드

     * 지속 가능한 경제 발전 모드
          + 지속 가능한 경제 발전을 위한 다양한 전략과 방법 제안.
          + 환경 보호와 경제 성장을 동시에 달성할 수 있는 방안 탐구.
          + 지속 가능한 발전을 위한 정책 및 실행 계획 필요.

인간-AI 안전

     * 인간-AI 안전: 생성적 AI와 제어 시스템 안전의 후손
          + 생성적 AI와 제어 시스템의 안전 문제 탐구.
          + 인간과 AI 간의 안전한 상호작용을 위한 방법 제안.
          + AI 시스템의 신뢰성과 안전성 향상 기대.

자연 지능과 인공지능의 융합

     * 융합 지능: 문제 해결 효율성을 높이기 위한 자연 지능과 인공지능의 융합
          + 자연 지능과 인공지능의 융합을 통한 문제 해결 효율성 향상.
          + 다양한 분야에서의 융합 지능 응용 사례 소개.
          + 향후 연구 방향과 발전 가능성 탐구.

GN⁺의 의견

     * AI의 발전과 개발자의 역할 변화
          + AI가 개발자의 반복적인 작업을 자동화함으로써 창의적인 작업에 집중할 수 있게 함.
          + 개발자는 AI 도구를 활용하여 더 높은 수준의 문제 해결에 집중할 수 있음.
          + AI 도구의 발전으로 인해 개발자의 생산성과 효율성이 크게 향상될 것으로 예상됨.
     * 책임 있는 AI 연구의 필요성
          + 기업의 AI 연구가 책임성과 윤리성을 충분히 고려하지 않는 경우가 많음.
          + 보다 포괄적이고 책임 있는 AI 연구가 필요함.
          + 사회적 책임을 다하는 AI 연구가 중요함.
     * AI와 인간의 협력 가능성
          + AI와 인간의 협력을 통해 더 나은 결과 도출 가능.
          + 교육 및 전문 환경에서 AI와 인간의 협력 가능성 탐구.
          + AI가 학습과 업무 효율성을 높이는 방법 제안.
     * 지속 가능한 경제 발전
          + 지속 가능한 경제 발전을 위한 다양한 전략과 방법 제안.
          + 환경 보호와 경제 성장을 동시에 달성할 수 있는 방안 탐구.
          + 지속 가능한 발전을 위한 정책 및 실행 계획 필요.
     * AI 시스템의 안전성
          + 생성적 AI와 제어 시스템의 안전 문제 탐구.
          + 인간과 AI 간의 안전한 상호작용을 위한 방법 제안.
          + AI 시스템의 신뢰성과 안전성 향상 기대.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 사용자 경험 문제
          + 페이지를 방문해 댓글이 있는 항목을 찾으려 했지만 모두 ""0 Comments""로 표시됨.
          + AGI 논문에서 ""Comments""를 클릭했으나 아무 일도 일어나지 않음.
          + 논문 제목을 클릭하면 토론 페이지가 열리지만, 댓글 수는 여전히 ""0""으로 표시됨.
          + 댓글 내용은 무작위로 보임.
          + 프로젝트가 개선되고 널리 사용되기를 바람.
     * 과학자의 회의적인 시각
          + 많은 연구가 재현 불가능하고 가치가 낮음.
          + 논문을 이해하는 데 많은 시간이 필요함.
          + 연구자들은 이미 바쁘기 때문에 논문에 대한 깊이 있는 토론에 참여하기 어려움.
          + GPT 모델을 사용해 논문을 요약하고 대중이 토론하는 방식이 더 나을 수 있음.
     * 댓글 구조에 대한 의문
          + 댓글 트리 구조가 과학적 토론에 적합하지 않을 수 있음.
          + 논문/저널은 초고속 지연 소셜 네트워크로 볼 수 있음.
          + 즉각적인 댓글은 품질을 저하시킬 수 있음.
     * 사용자 주도형 게시물
          + 사용자가 논문을 게시하도록 유도하는 것이 중요함.
          + 작은 연구 커뮤니티에서 시작해보는 것도 좋음.
          + 논문을 논의하는 데 적합한 형식인지 의문.
     * 연구 논문 찾기
          + 잘 알려진 학회에서 논문을 찾음.
          + 대학의 세미나 수업과 독서 그룹에서 논문을 논의함.
          + 프로그래밍 언어 관련 논문은 특정 서브레딧과 웹사이트에서 찾을 수 있음.
     * UI 개선 요청
          + 색상 대비를 높여 가독성을 개선할 필요가 있음.
          + Firefox와 Ubuntu 환경에서 읽기 어려움.
     * 과학 출판의 이상적인 미래
          + arXiv와 같은 데이터베이스에 모든 결과를 저장.
          + 다양한 프론트엔드 제공.
          + 저널 리뷰를 유사한 조직의 승인으로 대체.
     * LaTeX 수식 지원
          + 수학이 많은 분야를 지원하려면 LaTeX 수식을 댓글에 구현할 필요가 있음.
     * 모바일 친화성
          + UI를 모바일 친화적으로 개선하거나 API를 제공해 다른 인터페이스를 구축할 수 있도록 해야 함.
     * JavaScript 비활성화 지원
          + JavaScript를 비활성화한 상태에서도 사이트를 사용할 수 있어야 함.
          + 텍스트 제공 및 링크 집계 사이트에 적합한 기능.
"
"https://news.hada.io/topic?id=14954","Chameleon: Meta의 새로운 멀티-모달 LLM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Chameleon: Meta의 새로운 멀티-모달 LLM

     * Chameleon은 이미지와 텍스트를 임의의 순서로 이해하고 생성할 수 있는 초기 융합 토큰 기반 혼합 모달 모델군임
     * 이 모델군은 안정적인 학습 접근 방식, 정렬 레시피, 초기 융합 토큰 기반 혼합 모달 설정을 위한 건축 매개변수를 포함하고 있음
     * 초기부터 안정적인 학습 접근 방식취했으며, 정렬 레시피와 건축 매개변수가 초기 융합 토큰 기반 혼합 모달 설정에 맞게 설계됨
     * 시각적 질문 응답, 이미지 캡션 생성, 텍스트 생성, 이미지 생성, 장문 혼합 모달 생성 등의 포괄적인 과제들에서 평가하였음
          + 이미지 캡션 생성 작업에서 최첨단 성능을 보여줌
          + 텍스트 전용 작업에서는 Llama-2를 능가하고 Mixtral 8x7B와 Gemini-Pro와 같은 모델과 경쟁력 있는 성능을 보임
          + 훌륭한 이미지 생성 능력을 지니고 있으며, 단일 모델로 다양한 작업을 수행할 수 있음
          + 긴 형식의 혼합 모달 생성 평가에서, 프롬프트나 출력이 이미지와 텍스트의 혼합 시퀀스를 포함할 때, Gemini Pro와 GPT-4V와 같은 훨씬 더 큰 모델의 성능을 일치시키거나 능가
     * Chameleon은 완전한 멀티모달 문서의 통합 모델링에서 중요한 진전을 이루었음
     * 이는 다양한 과제에서 포괄적인 능력을 갖춘 통합된 멀티모달 모델의 새로운 기준을 제시함

GN⁺의 의견

     * 멀티모달 모델은 다양한 입력 형태를 동시에 처리할 수 있어, 실제 응용에서 매우 유용함. 예를 들어, 시각적 질문 응답 시스템이나 이미지 캡션 생성 등에서 큰 이점을 제공함.
     * 카멜레온은 Llama-2, Mixtral 8x7B, Gemini-Pro 등과 비교하여 경쟁력 있는 성능을 보임. 이는 다양한 작업에서의 유연성과 성능을 입증함.
     * 새로운 기술을 도입할 때는 모델의 안정성, 훈련 비용, 데이터 요구사항 등을 고려해야 함. 카멜레온의 경우, 초기 융합 접근법이 안정적이지만, 실제 적용 시 충분한 데이터와 컴퓨팅 자원이 필요할 수 있음.
     * 장기 혼합 모달 생성에서의 성능은 매우 흥미로움. 이는 복잡한 문서 생성이나 멀티미디어 콘텐츠 제작에 큰 가능성을 열어줌.
     * 업계에는 OpenAI의 GPT-4, Google's BERT 등 다양한 멀티모달 모델이 존재함. 각 모델의 특성과 장단점을 비교하여 적절한 모델을 선택하는 것이 중요함.

   모델 체크포인트: https://ai.meta.com/resources/models-and-libraries/…
   블로그: https://ai.meta.com/blog/meta-fair-research-new-releases/
   Github 리포지토리: https://github.com/facebookresearch/chameleon
   8시간전에 공개!

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 기본 연구와 소프트맥스 문제
          + 기본 연구가 매우 흥미로움. 특히 소프트맥스를 다양한 토크나이제이션 공간에서 사용하는 어려움에 대한 분석이 인상적임.
          + 34b 크기 모델에서 문제가 가장 두드러짐. 대규모 모델 훈련이 새로운 문제를 야기함을 상기시켜줌.
     * 멀티모달리티와 Mirasol3B
          + Mirasol3B와 비교했을 때 오디오를 지원하지 않음. 구글의 Mirasol3B는 오디오를 이미지로 변환하여 데모를 가능하게 했음.
          + Meta도 멀티모달리티 방향으로 나아가고 있음. 새로운 GPT 음성 모드도 같은 아키텍처를 사용할 가능성이 높음.
          + 새로운 모달리티가 추가되면 동일한 파라미터 크기에서 모델 성능이 향상됨.
     * 훈련 시간과 비용
          + 훈련 시간이 4282407시간으로, 200W GPU를 사용했을 때 약 1 GWh의 전력 소모. 비용은 약 $100,000.
          + 단일 GPU로는 500년의 훈련 시간과 $100,000의 에너지 비용이 필요함. 실제로는 3000개의 GPU로 2개월 동안 훈련 가능.
     * Chameleon 모델의 성능
          + Chameleon 모델이 Gemini Pro와 GPT-4V 같은 더 큰 모델의 성능을 맞추거나 초과함. 혼합 모달 생성 평가에서 우수한 성능을 보임.
          + 멀티모달 문서의 통합 모델링에서 중요한 진전을 이룸.
     * 기술 발전 속도
          + 기술 발전이 매우 빠름. 흥미로운 점이 많고 이해하기 쉬움.
          + 그러나 피로감을 느낄 수 있으며, 많은 돈이 투입되어 대부분이 사기처럼 느껴질 수 있음. 한 주제를 깊이 파고들고 관련 논문을 읽는 것이 좋음.
     * 멀티모달 모델의 채택
          + 최근 멀티모달 모델이 널리 채택되었으나 여전히 모달리티별로 별도의 인코더나 디코더를 사용함.
          + 예를 들어, Gemini Pro는 이미지 토큰을 사용하고 GPT-4V도 비슷함. 두 개의 다른 토크나이저를 사전 훈련함.
     * 통합 모델과 모달 경쟁
          + 통합 모델이 흥미롭지만 ""모달 경쟁""의 발견은 단기적으로 각 모달리티에 특화된 모델을 훈련하는 것이 더 나을 수 있음을 시사함.
     * Meta의 오픈 소스 계획
          + Meta가 이 모델들을 오픈 소스로 공개할 계획이 있는지 궁금함.
          + 모델이 다운로드 가능한지 여부에 대한 질문.
"
"https://news.hada.io/topic?id=14951","뜯을 수 있는 Strings 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           뜯을 수 있는 Strings 기술

새로운 음소거 해제 기능 발표

     * 새로운 기능 소개
          + 새로운 음소거 해제 기능이 발표됨.
          + 이 기능은 사용자들이 더 쉽게 음소거를 해제할 수 있도록 도와줌.
     * 기능의 주요 특징
          + 간편한 사용법: 버튼 하나로 음소거를 해제할 수 있음.
          + 사용자 친화적 인터페이스: 직관적인 디자인으로 누구나 쉽게 사용할 수 있음.
          + 다양한 플랫폼 지원: 여러 운영체제와 호환됨.
     * 기능의 장점
          + 효율성 증가: 빠르고 쉽게 음소거를 해제할 수 있어 시간 절약 가능.
          + 사용자 경험 개선: 복잡한 절차 없이 간단히 음소거를 해제할 수 있음.
          + 다양한 상황에서 유용: 회의, 강의, 온라인 수업 등 다양한 상황에서 유용하게 사용 가능.
     * 기능의 단점
          + 기술적 문제 발생 가능성: 새로운 기능이므로 초기에는 버그가 있을 수 있음.
          + 호환성 문제: 모든 기기에서 완벽히 작동하지 않을 수 있음.

GN⁺의 의견

     * 기능의 필요성: 음소거 해제 기능은 특히 온라인 회의나 수업에서 매우 유용함. 빠르고 간편하게 음소거를 해제할 수 있어 사용자 경험을 크게 개선할 수 있음.
     * 기술적 고려사항: 새로운 기능 도입 시 초기 버그나 호환성 문제를 고려해야 함. 충분한 테스트와 사용자 피드백 수집이 필요함.
     * 경쟁 제품 비교: 유사한 기능을 제공하는 다른 제품들과 비교했을 때, 이 기능이 얼마나 차별화되는지 분석해볼 필요가 있음.
     * 사용자 교육 필요성: 새로운 기능이므로 사용자들에게 기능 사용법을 충분히 안내해야 함. 이를 통해 기능의 활용도를 높일 수 있음.
     * 미래 발전 가능성: 이 기능이 성공적으로 자리 잡으면, 추가적인 기능 개선이나 확장이 가능할 것임. 예를 들어, 음성 인식을 통한 자동 음소거 해제 기능 등.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 합창단 페이지: 입술을 당기는 방식의 합창단 페이지로, 주로 재미를 위한 페이지임.
          + 링크
     * 음악 시각화: 저자가 유명한 곡들을 포함시킨 것이 좋음. 특히 바흐의 BWV 578을 시청하면서 리듬의 대위법이 새롭게 다가옴. 기존의 시각화 도구들과 달리 움직이는 객체 없이 톤을 독립적으로 보여줌.
          + 유튜브 링크
     * 크롬과 파이어폭스의 문제: 리눅스의 크롬에서 버퍼 언더런 문제로 인해 잡음이 발생함. 파이어폭스에서도 발생하지만 빈도는 적음.
     * 기타 줄의 음색: 줄을 가장자리에서 뜯을 때와 중간에서 뜯을 때 다른 음색이 나옴.
     * 음악 이해: 음악을 잘 모르는 사람도 쉽게 좋은 소리를 낼 수 있음. 왜 이렇게 잘 되는지 궁금해하는 의견.
     * Tone.js 사용 문제: Tone.js를 사용하면 오디오가 병목 현상을 일으키거나 메모리 누수가 발생할 수 있음. Rust와 WASM을 사용한 프로젝트와 유사함.
          + Karplus Strong 프로젝트 링크
          + Rust WASM 오디오 API 링크
     * 추가 아이디어: 다른 줄의 오버톤과 공명하게 하거나, 강철/나일론/거트 등의 다양한 재료를 지원하는 기능 추가 제안.
     * 알고리즘 설명 요청: Karplus-Strong이라는 간단한 줄 합성 방법이 있지만, 이 알고리즘이 더 나은 소리를 내는 것 같음.
     * 음악 소프트웨어 모델: 보통 할 수 없는 작업을 가능하게 하는 음악 소프트웨어 모델에 대한 기억. 예를 들어 심벌즈를 뜯거나 퉁기는 것. 해당 소프트웨어를 찾지 못했음.
     * 휴대폰 음소거 문제: 아이폰에서 음소거 버튼이 직관적이지 않음. 유튜브는 음소거 상태에서도 재생되지만, 이 페이지는 그렇지 않음.
"
"https://news.hada.io/topic?id=15006","삼성 WB850F 펌웨어 리버스 엔지니어링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        삼성 WB850F 펌웨어 리버스 엔지니어링

삼성 WB850F 펌웨어 리버스 엔지니어링

  WB850F_FW_210086.zip - 외부 컨테이너

     * WB850F는 삼성에서 iLauncher 애플리케이션을 중단한 후에도 펌웨어와 지원 파일을 계속 제공하는 몇 안 되는 모델 중 하나임.
     * WB850F_FW_210086.zip 아카이브에는 여러 파일이 포함되어 있음:
          + GPS_FW/BASEBAND_FW_Flash.mbin: 데이터
          + GPS_FW/BASEBAND_FW_Ram.mbin: 데이터
          + GPS_FW/Config.BIN: 데이터
          + GPS_FW/flashBurner.mbin: 데이터
          + FWUP: ASCII 텍스트, CRLF 라인 종결자 포함
          + partialImage.o.map: ASCII 텍스트
          + WB850-FW-SR-210086.bin: 데이터
          + wb850f_adj.txt: ASCII 텍스트, CRLF 라인 종결자 포함
     * FWUP 파일은 펌웨어 테스트/자동화 모듈을 위한 스크립트인 ""upgrade all"" 문자열을 포함하고 있음.
     * wb850f_adj.txt 파일은 GPS 펌웨어를 업그레이드하고 해당 파일을 삭제하는 복잡한 스크립트임.

  partialImage.o.map - 링커 덤프

     * partialImage.o.map은 30만 줄 이상의 텍스트 파일로, partialImage.o의 링커 출력과 전체 메모리 맵을 포함하고 있음:
          + 예시:
               o output input virtual section section address size file
               o .text 00000000 01301444 .text 00000000 000001a4 sysALib.o
               o DevHTTPResponseStart 00321a84 000002a4
               o DevHTTPResponseData 00321d28 00000100
               o DevHTTPResponseEnd 00321e28 00000170
     * 이 파일은 펌웨어 분석에 매우 유용한 정보들을 제공함.

  WB850-FW-SR-210086.bin - 헤더 분석

     * WB850-FW-SR-210086.bin 파일을 binwalk로 분석한 결과, 파일 헤더(HTML, PNG, JPEG 등), VxWorks 헤더, 여러 Unix 경로 등이 발견되었으나 파티션이나 파일 시스템은 발견되지 않음.
     * 첫 번째 1KB를 헥스 덤프한 결과:
          + 00000000: 3231 3030 3836 0006 4657 5f55 502f 4f4e 210086..FW_UP/ON
          + 00000010: 424c 312e 6269 6e00 0000 0000 0000 0000 BL1.bin.........
          + 00000020: 0000 0000 0000 0000 c400 0000 0008 0000 ................
          + 00000030: 4f4e 424c 3100 0000 0000 0000 0000 0000 ONBL1...........
          + 00000040: 0000 0000 4657 5f55 502f 4f4e 424c 322e ....FW_UP/ONBL2.
          + 00000050: 6269 6e00 0000 0000 0000 0000 0000 0000 bin.............
     * 이를 통해 파일 이름과 파티션 이름을 포함한 파티션 테이블을 재구성할 수 있음:
          + File name size offset partition name
          + FW_UP/ONBL1.bin 196 (0xc4) 0x0000800 ONBL1
          + FW_UP/ONBL2.bin 46 KB (0xb630) 0x00008c4 ONBL2
          + [WB850]DSC_5KEY_WB850 30 MB (0x1d1f438) 0x000bef4 Main_Image
          + RomFS/SPID.Rom 48 MB (0x2f4ac00) 0x1d2b32c Resource
          + FW_UP/WB850.HEX 19 KB (0x4d86) 0x4c75f2c OIS
          + FW_UP/skin.bin 36 MB (0x22fd048) 0x4c7acb2 SKIN

  WB850-FW-SR-210086.bin - 코드 및 데이터 파티션

     * 파티션 추출 도구를 사용하여 파티션을 추출한 결과:
          + ONBL1.bin: 데이터
          + ONBL2.bin: 데이터
          + Main_Image.bin: OpenPGP 비밀 키 (오탐)
          + Resource.bin: MIPSEB-LE MIPS-III ECOFF 실행 파일
          + OIS.bin: 데이터
          + SKIN.bin: 데이터
     * ONBL1과 ONBL2는 부트로더의 1단계와 2단계로 추정됨.
     * Main_Image는 실제 펌웨어로, ARM 함수 프롤로그가 다수 포함됨.
     * Resource와 SKIN은 SoC 제조업체가 제공한 UI 스킨일 가능성이 있음.
     * OIS는 광학 이미지 안정화 장치의 펌웨어일 가능성이 있음.

  Ghidra에 코드 로드하기

     * ONBL1, ONBL2, Main_Image 파티션은 실제 ARM 코드가 포함되어 있음.
     * Main_Image를 올바른 메모리 주소에 매핑하기 위해 Ghidra에서 분석을 시작함.
     * partialImage.o.map에서 함수 이름을 로드하여 Ghidra에 매핑함.

  DevHTTPResponseStart 리버스 엔지니어링

     * DevHTTPResponseStart 함수는 핫스팟 감지를 수행함.
     * 요약:
          + HTTP 200 OK 응답 시, 서버는 ""yahoo.something"" 또는 ""kr.yahoo.something"" 도메인에 쿠키를 설정해야 함.
          + HTTP 301/302/307 리다이렉트 시, URL에 ""yahoo."" 문자열이 포함되어야 함.
     * 핫스팟 감지를 우회하기 위해, DNS 레코드를 다른 서버로 포인팅하거나 HTTP 리다이렉트를 사용하여 쿠키를 설정해야 함.

  요약: 진정한 보물

     * 이 분석을 통해 삼성 WB850F WiFi 카메라의 핫스팟 감지를 이해하고 우회할 수 있었음.
     * 결과적으로 작은 패치를 통해 카메라가 실제로 연결되고 사진을 업로드할 수 있게 되었음.
     * Main_Image에는 77,000개 이상의 함수가 포함되어 있어, 디지털 카메라의 작동 방식을 더 잘 이해하기 위해 탐험할 가치가 있음.

GN⁺의 의견

    1. 기술적 도전과 학습 기회: 이 기사는 펌웨어 리버스 엔지니어링의 실제 사례를 제공하여 기술적 도전과 학습 기회를 제공함. 초급 소프트웨어 엔지니어에게 매우 유익함.
    2. 보안 및 프라이버시 고려: 핫스팟 감지 우회는 보안 및 프라이버시 측면에서 중요한 고려 사항임. 이러한 기술을 사용할 때는 윤리적 측면을 항상 고려해야 함.
    3. Ghidra 사용법: Ghidra와 같은 도구를 사용하여 복잡한 펌웨어를 분석하는 방법을 배울 수 있음. 이는 리버스 엔지니어링 및 보안 분석에 매우 유용함.
    4. 펌웨어 업데이트의 중요성: 펌웨어 업데이트는 장치의 기능과 보안을 유지하는 데 중요함. 이 기사는 펌웨어 업데이트의 복잡성을 잘 보여줌.
    5. 다른 카메라 모델 적용 가능성: 이 기법은 다른 삼성 카메라 모델에도 적용 가능하며, 이는 다양한 장치에서 유사한 문제를 해결하는 데 도움이 될 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음

     * I liked this link more. Absolute astonishing firmware ""crypto"" fail
          + 삼성 NX 카메라의 펌웨어 암호화 실패 사례를 다룬 링크를 좋아함.
     * Amazing work! Have you thought about doing a tutorial on how to do reverse engineering?
          + 놀라운 작업임. 리버스 엔지니어링 튜토리얼을 만들어볼 생각이 있는지 궁금함.
     * All I want is a dSLR that, when I take a picture on the camera with its button, moments later, the image is in Apple Photos.
          + 사진을 찍으면 바로 Apple Photos에 이미지가 저장되는 DSLR 카메라를 원함.
     * [dead]
          + 댓글이 삭제되었음.
"
"https://news.hada.io/topic?id=14987","BB(3, 4) > Ack(14) 결과ck(14) 결과

BB(3, 4) > Ack(14)

     * 2024년 5월 22일
          + Pavel이 3상태 4기호 튜링 기계(Turing Machine, TM)를 발견했음
          + 이 기계는 ""Ackermann 수준"" 함수를 계산하고 정확히 (2↑155)+14개의 비제로 기호로 종료함
          + Knuth 상향 화살표 표기법이 다소 불편해져서 이를 다음과 같이 근사할 수 있음: BB(3,4)>Ack(14)
          + 여기서 Ack(14)는 14번째 Ackermann 수로 정의됨: Ack(n)=n↑nn
          + 이 기계는 ""야생에서"" 발견된 최초의 Ackermann 수준 함수를 시뮬레이션할 수 있는 TM임

  기계

     * 상태 전이 표
| 0   | 1   | 2   | 3   |
| --- | --- | --- | --- |
| A   | 1RB | 3LB | 1RZ | 2RA |
| B   | 2LC | 3RB | 1LC | 2RA |
| C   | 3RB | 1LB | 3LC | 2RC |

     * 최종 구성
          + 0∞32g153(0)+12161 Z> 0∞
          + 정확히 σ=2g153(0)+18=(2↑155)+14개의 비제로 기호가 테이프에 남음

  Attribution

     * 발견자
          + 이 TM은 Pavel Kropitz(@uni)에 의해 발견되었고, 2024년 4월 25일 Discord에서 공유됨
          + 그의 코드는 TM 점수에 대한 인간이 읽을 수 있는 경계를 지정할 수 없었고, 단순히 Halt(SuperPowers(13))로 지정됨
          + 그는 새로운 ""유도 증명 검증기""를 사용하여 이 결과를 검증하기 시작함
          + 2024년 5월 20일에 정확한 gkn(m)의 정의를 추출하고 σ>2↑153의 경계를 얻음
          + Matthew House(@LegionMammal978)는 2024년 5월 22일에 gkn(0)=2↑k(n+2)2−2의 간단한 닫힌 형식을 발견함

  분석

     * B(k,n,m) 정의
B(k,n,m)=0∞32m+12k A> 1n

     * 증명
0∞A>0∞→241B(16,3,0)20∞
B(k,n,m)→B(k,0,gk−1n(m)) if k≥1
B(k,0,m)2→10∞32m+12k1Z>

     * gk(m) 정의
g0(m)=m+1
gk+1(m)=gk2m+2(0)

    이중 유도에 의한 증명

     * 주요 규칙
B(k,n,m)→B(k,0,gk−1n(m))

     * Lemma 1
For all k≥1: 32k<B→2k+12k<B1

     * Corollary 2
For all k≥1,m≥0: 3m2k<B→(2k+1)m2k<B1m

     * Theorem 3
For all k≥1,n≥0,m≥0: B(k,n,m)→B(k,0,gk−1n(m))

  정확한 값

     * Theorem
For all k≥0,m≥0: 2gk+1(m)+4=2↑k(2m+4)

     * Corollary
For all k≥0,n≥0: 2gkn(0)+4=2↑k(n+2)

     * 결론
σ=2g153(0)+18=(2↑155)+14

  Permutations

     * 상태 B에서 시작
σB=2g63(0)+9=(2↑65)+5

     * 상태 C에서 시작
σC=2g03(0)+3=(2↑05)−1=9 (72단계에서 종료)

     * 변환된 TNF
| 0   | 1   | 2   | 3   |
| --- | --- | --- | --- |
| A   | 1RB | 3RB | 1LC | 2LA |
| B   | 2LA | 2RB | 1LB | 3RA |
| C   | 3LA | 1RZ | 1LC | 2RA |

  Not Collatz

     * 흥미로운 점
          + 이 TM은 놀라울 정도로 단순함
          + Collatz와 같은 규칙이 없음
          + 이는 Collatz와 같은 Ackermann 수준의 TM이 존재할 가능성을 배제하지 않음

  Inductive Proof Validator

     * 프로젝트 목표
          + ""유도 증명"" 검증기를 개발 중
          + 표준화된 증명서 형식을 개발하여 다양한 유도 증명을 검증할 수 있도록 함
          + 아직 초기 단계이지만, 여러 TM의 동작을 증명하는 데 성공함

GN⁺의 의견

     * 흥미로운 점
          + 이 기사는 튜링 기계와 Ackermann 함수의 복잡성을 이해하는 데 큰 도움이 됨
          + 간단한 규칙으로 복잡한 계산을 수행할 수 있다는 점이 매력적임
     * 비판적 시각
          + 이 기계의 복잡성을 이해하기 위해서는 수학적 배경 지식이 필요함
          + 실용적인 응용보다는 이론적인 흥미에 더 초점이 맞춰져 있음
     * 관련 기술
          + 유도 증명 검증기는 자동화된 수학 증명 시스템 개발에 큰 기여를 할 수 있음
          + 다른 복잡한 계산 문제에도 적용 가능성이 있음
     * 고려 사항
          + 이 기술을 도입할 때는 검증 과정의 정확성과 효율성을 고려해야 함
          + 복잡한 수학적 개념을 이해하고 적용하는 데 시간이 필요함

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 간단한 튜링 머신 프로그램
       튜링 머신 프로그램이 복잡한 스파게티 코드일 것이라는 생각과 달리, 이 새로운 프로그램은 상대적으로 간단함. 세 가지 상태(A, B, C)가 있으며, 상태 B는 A와 C로 제어를 넘기지만, A와 C는 서로를 알지 못하고 B로만 제어를 넘김. 이는 모듈식 구조로, 진정한 스파게티 코드에서는 각 상태가 다른 모든 상태로 제어를 넘길 수 있음.
     * 흥미로운 특징
       이 프로그램은 빈 칸을 출력하지 않으며, 모든 명령이 상태나 색을 변경함. 새로운 BB(3,4) 기록 보유자는 약 64비트의 정보를 가짐. BBλ(49)는 49비트로 그레이엄 수를 훨씬 초과함.
     * 구현 예시
       프로그램을 직접 구현해본 결과, 상태 B는 0을 2로, 1을 1로 변경하며 C로 전환하고, 상태 C는 3을 2로 변경하며 A로 전환함. 이는 3의 연속을 지수적으로 길게 만듦.
     * 코드 골프와의 유사성
       이 모든 것이 극단적인 코드 골프처럼 보임. BitGrid라는 개인 취미 프로젝트는 셀당 4비트 상태만 가지며, 4x4 그리드는 최대 2^64까지 셀 수 있음. 작은 그리드에서는 가장자리 연결이 결과에 큰 영향을 미침.
     * 튜링 머신 해석 자료 요청
       테이블을 해석하는 방법에 대한 자료 요청. 이는 튜링 머신의 설명으로 보임.
     * 튜링 머신의 한계
       제한된 수의 기호로 설명할 수 있는 튜링 머신의 수는 한정적임. 일부 튜링 머신이 멈추기 전에 엄청난 수의 단계를 수행할 수 있다는 사실이 놀라움.
     * 특별한 점 설명 요청
       이 특정 명령 집합이 왜 인상적인지에 대한 설명 요청. Ackerman 함수 수준의 함수가 무엇인지, 실제로 무엇을 계산하는지 궁금함.
     * 수학적 진리에 대한 흥미
       쓸모없어 보이는 결과가 매우 유용한 LLM 발전보다 더 흥미로움. 이는 간단한 수학적 진리에 자연스럽게 끌리기 때문임.
     * BB(5)와 BB(3,4) 비교
       BB(5)가 BB(3,4)보다 큰지에 대한 질문. bbchallenge.org 사이트에서는 BB(5)가 약 4700만이라고 하지만, BB(3,4)는 훨씬 더 크다고 함.
     * 저자의 맥락 제공
       저자가 일부 맥락을 제공한 점이 좋음.
"
"https://news.hada.io/topic?id=15034","커널 개발자, Apple Xserve 전면 패널을 위한 USB 드라이버 3시간 만에 작성 [동영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        커널 개발자, Apple Xserve 전면 패널을 위한 USB 드라이버 3시간 만에 작성 [동영상]

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 프로그래머 스트리밍에 대한 긍정적 반응
          + 십대 시절부터 이런 콘텐츠를 꿈꿔왔음. 프로그래머들이 고급 프로젝트를 스트리밍하는 것이 마법과 복잡성을 제거해줌.
     * USB 호스트 드라이버 작성 경험
          + STM32F4용 USB 호스트 드라이버를 작성했는데, 문서 부족이 가장 큰 어려움이었음. USB는 많은 지식이 필요하지만, 대부분의 경우 잘 작동함.
     * 디컴파일 프로젝트 기여
          + 디컴파일 프로젝트에 기여를 시작했으며, 작업을 스트리밍할 생각이 있음. 어셈블리 코드와 관련된 다양한 주제에 대한 관심 여부를 묻고 있음.
     * 팬 소음의 배경음
          + 팬 소음이 이 비디오의 완벽한 배경음이라고 언급함.
     * USB 디바이스 드라이버 작업
          + 이 비디오는 상대적으로 간단한 USB 디바이스 드라이버 작업을 다루며, 기존 코드가 있는 상태에서의 코드 번역 작업임.
     * 터미널 폰트에 대한 관심
          + 터미널/코딩용 폰트가 가장 흥미로움.
     * USB 스펙의 방대함
          + USB 스펙이 500페이지 정도로 매우 인상적임.
     * ""From scratch""에 대한 의견
          + ""From scratch""라는 표현이 오해의 소지가 있음. 10년의 경험을 바탕으로 한 작업임.
     * 10배 프로그래머에 대한 의문
          + 10배 프로그래머가 신화라고 주장하는 사람들에게 이 비디오가 고통스러울 수 있음. 대부분의 엔지니어는 드라이버 구현에 1-2개월이 걸릴 것임.
     * ""From scratch""의 실질적 의미
          + ""From scratch"" 부분에 집착할 필요가 없으며, 실질적으로는 처음부터 시작하는 것임. 그렇지 않으면 시간 낭비가 될 것임.
"
"https://news.hada.io/topic?id=14910","작전 CHARM: 모든 이를 위한 자동차 수리 매뉴얼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     작전 CHARM: 모든 이를 위한 자동차 수리 매뉴얼

Operation CHARM: 자동차 수리 매뉴얼을 모두에게

  홈

     * 홈: 모든 서비스 매뉴얼

  자동차 브랜드별 서비스 매뉴얼

     * Acura
     * Audi
     * BMW
     * Buick
     * Cadillac
     * Chevrolet
     * Chrysler
     * Daewoo
     * Daihatsu
     * Dodge and Ram
     * Eagle
     * Fiat
     * Ford
     * Freightliner
     * GMC
     * Geo
     * Honda
     * Hummer
     * Hyundai
     * Infiniti
     * Isuzu
     * Jaguar
     * Jeep
     * Kia
     * Land Rover
     * Lexus
     * Lincoln
     * Mazda
     * Mercedes Benz
     * Mercury
     * Mini
     * Mitsubishi
     * Nissan-Datsun
     * Oldsmobile
     * Peugeot
     * Plymouth
     * Pontiac
     * Porsche
     * Renault
     * SRT
     * Saab
     * Saturn
     * Scion
     * Smart
     * Subaru
     * Suzuki
     * Toyota
     * UD
     * Volkswagen
     * Volvo
     * Workhorse
     * Yugo

  프로 멀티스

     * Operation CHARM에 대하여

GN⁺의 의견

     * 자동차 수리 매뉴얼의 중요성: 자동차 수리 매뉴얼은 차량 소유자나 정비사에게 필수적인 자료임. 이 매뉴얼을 통해 차량의 구조와 수리 방법을 정확히 이해할 수 있음.
     * 다양한 브랜드 커버: 다양한 자동차 브랜드의 매뉴얼을 제공함으로써, 특정 브랜드에 국한되지 않고 다양한 차량 소유자들에게 유용함.
     * 온라인 접근성: 온라인에서 쉽게 접근할 수 있는 매뉴얼은 시간과 비용을 절약할 수 있음. 특히 긴급 상황에서 빠르게 정보를 얻을 수 있음.
     * 기술 발전과의 연계: 최신 기술과 연계된 매뉴얼은 최신 차량의 복잡한 시스템을 이해하는 데 도움을 줄 수 있음. 예를 들어, 전기차나 하이브리드 차량의 매뉴얼도 포함될 수 있음.
     * 비판적 시각: 모든 매뉴얼이 최신 정보를 포함하고 있는지, 그리고 사용자가 이해하기 쉽게 작성되어 있는지 확인이 필요함. 또한, 특정 브랜드의 매뉴얼이 부족할 경우 사용자에게 불편을 줄 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 서비스 정보 사이트 활용
          + 서비스 정보를 얻기 위해 자주 사용하는 사이트임. ALLDATA에서 불법 복제된 것임. 현대 수리점은 서비스 정보 없이는 운영 불가함.
     * 프로젝트의 연도 제한
          + 흥미로운 프로젝트임. 왜 2013년에서 멈췄는지 궁금함. 매뉴얼이 없는 건지, 라이선스 문제인지, 아니면 프로젝트가 2013년에 중단된 것인지 궁금함.
     * 미국 특정 모델
          + 미국 특정 모델만 있는 것 같음. 내가 소유한 2001 BMW 330d, 2010 BMW 330i, 2011 Ford C-Max 휘발유 모델의 매뉴얼을 찾을 수 없음. Renault는 1987년, Peugeot는 1993년에 멈췄고, Citroen, Vauxhall, Rover/MG는 전혀 없음.
     * 구형 자동차 매뉴얼
          + 조금 더 오래된 (그리고 덜 정리된) 매뉴얼은 Old Car Manual Project에서 볼 수 있음. 최신 공식 서비스 매뉴얼은 부품 분해 및 교체 방법만 제공하며, 작동 이론 및 문제 해결 정보는 포함되지 않음.
     * 토크 스펙 정보
          + 이 정보에 감사함. 밴 작업 시 토크 스펙을 구글링해야 했는데, Odyssey 포럼도 좋지만 이 정보가 정말 유용함. 개인적으로 모든 작업을 직접 하는데, 제조사가 이런 정보를 더 쉽게 접근할 수 있게 해주면 좋겠음.
     * Dacia 매뉴얼 부재
          + Dacia 수리 매뉴얼이 없다는 것이 아쉬움.
     * 1982년부터 2013년까지의 모델
          + ""1982년부터 2013년까지 거의 모든 제조사와 모델""이 포함되어 있음. 아쉽게도 현재 모델은 포함되지 않음.
     * 부품 및 노동 정보
          + 매뉴얼의 '어떻게'에 대한 정보도 유용하지만, 부품 및 노동에 대한 정보가 더 좋음. 비용 정보는 오래되었을 수 있지만, 노동 시간에 대한 기본 정보를 제공하는 것이 좋음. 대부분의 사람들은 (내연기관 차량의 경우) 대부분의 유지보수나 수리를 직접 하지 않기 때문에, 수리점과의 정보 비대칭을 줄이는 도구로 환영함.
     * Tesla 서비스 매뉴얼
          + Tesla의 재미있는 점은 모든 차량의 전체 서비스 매뉴얼이 온라인에서 무료로 제공된다는 것임. Tesla 서비스 매뉴얼
     * 미국 모델만 포함
          + 미국 모델만 포함된 것 같음. 내 마지막 차는 목록에 없지만, 유럽에서 판매되지 않은 대형 엔진 모델은 있음.
"
"https://news.hada.io/topic?id=14942","Anthropic, LLM의 내부를 이해하는데 있어 상당한 진전을 보임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Anthropic, LLM의 내부를 이해하는데 있어 상당한 진전을 보임

     * AI 모델 내부 작동 원리 이해의 큰 진전
          + Claude Sonnet LLM 내부에서 수백만 개의 개념이 어떻게 표현되는지 확인했음.
          + 이는 현대의 프로덕션급 LLM의 내부를 상세히 들여다본 최초 사례임.
          + 이러한 해석 가능성 발견은 미래에 AI 모델을 더 안전하게 만드는 데 도움이 될 수 있음.
     * 블랙 박스 접근 방식과 신뢰 문제
          + AI 모델은 입력과 출력만 확인하는 블랙 박스 접근 방식으로 다룸.
          + 모델이 왜 특정 응답을 주는지 이해하기 어려움.
          + 이는 모델이 해로운, 편향된, 거짓된, 또는 위험한 응답을 제공하지 않을지 신뢰하기 어렵게 만듦.
     * 모델 내부 상태 이해의 어려움
          + 모델의 내부 상태는 명확한 의미 없이 숫자로 구성됨.
          + 각 개념은 많은 뉴런에 걸쳐 표현되고, 각 뉴런은 여러 개념을 표현함.
     * 사전 학습에서의 진전
          + 이전에 뉴런 활성화 패턴(특징)을 인간이 이해할 수 있는 개념과 매칭하는 진전을 이룸.
          + ""사전 학습(dictionary learning)"" 기술을 사용하여 모델의 내부 상태를 여러 활성화 뉴런 대신 몇 가지 활성화된 특징으로 표현할 수 있게 됨.
     * 작은 언어 모델에서의 성공
          + 2023년 10월, 매우 작은 언어 모델에서 사전 학습을 성공적으로 적용함.
          + 대문자 텍스트, DNA 서열, 인용에서의 성 등과 같은 개념을 식별함.
     * 큰 모델로의 확장
          + 대형 언어 모델에 기술을 확장하여 더 복잡한 특징을 찾을 수 있었음.
          + 큰 모델은 작은 모델과 다르게 작동할 수 있는 과학적 위험이 있음.
          + 다행히 큰 언어 모델을 훈련한 경험이 이 실험에 도움이 되었음.
     * Claude 3.0 Sonnet 내부의 특징
          + Claude 3.0 Sonnet의 중간 레이어에서 수백만 개의 특징을 성공적으로 추출함.
          + 이러한 특징은 도시, 사람, 원소, 학문 분야, 프로그래밍 구문 등과 같은 다양한 개념에 해당함.
     * 추상적 특징
          + Claude는 컴퓨터 코드의 버그, 직업의 성 편향, 비밀 유지에 대한 논의 등 더 추상적인 특징에도 반응함.
     * 특징 간 거리 측정
          + 특징 간의 ""거리""를 측정하여 비슷한 특징을 찾을 수 있었음.
          + 예를 들어, ""Golden Gate Bridge"" 특징 근처에서 Alcatraz Island, Ghirardelli Square 등과 관련된 특징을 찾음.
     * 특징 조작 실험
          + 특정 특징을 증폭하거나 억제하여 Claude의 응답을 변화시킬 수 있었음.
          + 예를 들어, ""Golden Gate Bridge"" 특징을 증폭하면 Claude가 자신의 물리적 형태를 골든 게이트 브리지로 인식하게 됨.
     * 안전성과 특징 조작
          + Claude의 기능을 조작하여 모델의 안전성 관련 특징을 식별하고 개선할 수 있는 가능성을 탐구함.
          + Claude는 사기 이메일을 생성하지 않도록 훈련되었지만, 특정 특징을 활성화하면 사기 이메일을 작성할 수 있게 됨.
     * 미래 연구 방향
          + 모델의 안전성을 개선하기 위해 이러한 발견을 활용할 계획.
          + AI 시스템의 위험한 행동을 모니터링하고, 원하는 결과로 유도하거나 위험한 주제를 제거하는 데 사용할 수 있음.
          + 이러한 기술은 Constitutional AI와 같은 다른 안전 기술을 강화할 수 있음.
     * 향후 과제
          + 현재의 기술로 모델이 학습한 모든 개념을 찾기에는 비용이 많이 듦.
          + 모델이 특징을 사용하는 방식을 이해하는 것이 중요함.
          + 안전 관련 특징이 실제로 안전성을 향상시키는 데 사용될 수 있는지 보여야 함.
     * 연구 참여 기회
          + AI 모델 해석과 개선을 위해 함께 일할 연구 과학자, 연구 엔지니어 등을 찾고 있음.
          + 자세한 내용은 ""Scaling Monosemanticity: Extracting Interpretable Features from Claude 3 Sonnet"" 논문을 참고.
     * 이 연구는 AI 모델의 해석 가능성을 높이고 안전성을 강화하는 중요한 진전을 이루었음. 앞으로도 더 많은 연구가 필요함.

   활성화되는 퍼셉트론을 확실하게 알 수 있다는 점이 뇌와의 차이겠네요.

   마치 이해하기 힘든 블랙박스를 이해하는 것이 뇌를 연구할때랑 비슷할 것 같네요
   오히려 스냅샷을 따기 쉽다는 관점에서 뇌보다 해석가능성이 높지 않을까 싶어요
"
"https://news.hada.io/topic?id=14999","YOLOv10: 새로운 세대의 실시간 종단 간 객체 감지 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   YOLOv10: 새로운 세대의 실시간 종단 간 객체 감지 모델

   • YOLOv10은 NMS가 없는 훈련을 위해 일관된 이중 할당을 도입하여 경쟁력 있는 성능과 낮은 추론 대기 시간을 동시에 달성한다.

   • YOLO에 대한 전체적인 효율성-정확성 기반 모델 설계 전략을 제시하여 효율성과 정확도 관점 모두에서 다양한 구성 요소를 포괄적으로 최적화한다.

   • YOLOv10은 다양한 모델 규모에 걸쳐 성능과 효율성 측면에서 최첨단 방법을 능가한다.

   • 예를 들어, YOLOv10-S는 COCO에서 유사한 AP를 가진 RT-DETR-R18보다 1.8배 빠르지만 매개변수와 FLOP는 2.8배 적다. YOLOv9-C와 비교하여 YOLOv10-B는 동일한 수준의 성능을 유지하면서 대기 시간을 46%, 매개변수 수를 25% 감소시킨다.

   제가 학부 졸업할떄쯤에 YOLOv3이 나오고 그랬던거 같은데 시간 참 빠르네요..

   https://github.com/THU-MIG/yolov10

   몇달전에 YOLOv9 나왔는데 얼마 안 돼 v10 나왔네요.. 허허
"
"https://news.hada.io/topic?id=14912","포르투갈에서 목격된 Meteor","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           포르투갈에서 목격된 Meteor

        Hacker News 의견

    Of Cometary Origin. Seen over Portugal and Spain

     * 링크: 기사 링크
     * 링크: 이미지 링크 1
     * 링크: 이미지 링크 2
     * 링크: 이미지 링크 3

    댓글 모음

     * 색상과 속도: 유성의 색상은 철, 마그네슘, 나트륨의 방출선에 의해 결정됨. 빠른 유성은 마그네슘을 이온화해 녹색, 중간 속도 유성은 철을 이온화해 파란색, 느린 유성은 나트륨을 이온화해 노란색-주황색을 띔.
     * 우주 현상: 최근 일식, 오로라, 유성 등 흥미로운 우주 현상이 많았음.
     * 외계 활동: 최근 10년간 많은 우주 현상이 촬영되었지만, 외계 활동에 대한 최근 영상은 2005년에 나온 것이 마지막임.
     * 개인적인 소망: 영상을 보고 직접 이런 현상을 보고 싶다는 생각이 들었음. 대기권에 감사함.
     * 직접 목격: 직접 본 적이 있는데, 매우 밝은 흰색 불덩이였음. 저녁 시간을 더 많이 보내면 다시 볼 수 있을지도 모름.
     * 비행기 공포: 비합리적이지만 비행 중 이런 유성에 맞을까봐 두려움.
     * 포르투갈 목격담: 포르투갈 북부 마토시뇨스에서 목격. 마을 축제 중에 유성이 나타났고, 처음엔 불꽃놀이로 착각했음. 축제는 예수의 기적을 기념하는 행사였음. 종교적이지 않지만 놀라운 우연이었음.
     * IMO 보고서: IMO 유성 보고서에서 24시간 전에 발생한 사건임.
"
"https://news.hada.io/topic?id=15040","뇌가 컴퓨터 코드 읽기와 언어 읽기를 다르게 인식 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   뇌가 컴퓨터 코드 읽기와 언어 읽기를 다르게 인식 (2020)

컴퓨터 코드 해석과 뇌의 작용

  언어와 인지

     * 컴퓨터 프로그래밍을 배우는 것은 새로운 언어를 배우는 것과 유사함.
     * MIT 신경과학자들은 컴퓨터 코드를 읽는 것이 언어 처리와 관련된 뇌 영역을 활성화하지 않음을 발견함.
     * 대신, 복잡한 인지 작업을 수행할 때 활성화되는 다중 수요 네트워크를 활성화함.

  연구 방법

     * 연구자들은 Python과 ScratchJr 두 가지 프로그래밍 언어를 사용하여 실험을 진행함.
     * 실험 참가자들은 fMRI 스캐너에 누워 코드 조각을 보고 그 코드가 어떤 동작을 할지 예측함.
     * 연구 결과, 언어 관련 뇌 영역에서는 거의 반응이 없었고, 다중 수요 네트워크가 주로 활성화됨.

  경험의 효과

     * 연구자들은 프로그래밍에 전념한 사람들이 더 많은 경험을 쌓으면 특정 뇌 영역이 전문화될 가능성이 있다고 언급함.
     * 그러나 현재 연구에서는 프로그래밍 경험이 상대적으로 적은 사람들에게는 이러한 전문화가 나타나지 않음.

  결론

     * 코딩을 수학 기반 기술로 가르쳐야 할지 언어 기반 기술로 가르쳐야 할지에 대한 명확한 답은 없음.
     * 컴퓨터 과학 교육자들은 코딩을 가장 효과적으로 가르칠 수 있는 자신만의 접근 방식을 개발해야 함.

GN⁺의 의견

     * 코딩과 뇌의 관계: 이 연구는 코딩이 언어 처리와는 다른 뇌 영역을 활성화한다는 점에서 흥미로움. 이는 코딩 교육 방법론에 새로운 시각을 제공할 수 있음.
     * 교육적 접근: 코딩을 가르칠 때 수학적 접근과 언어적 접근을 모두 고려해야 할 필요성이 있음. 이는 다양한 학습자들에게 맞춤형 교육을 제공할 수 있는 기회를 열어줌.
     * 경험의 중요성: 프로그래밍 경험이 쌓일수록 뇌의 특정 영역이 전문화될 가능성이 있다는 점은, 장기적인 학습과 경험 축적의 중요성을 강조함.
     * 다중 수요 네트워크: 이 네트워크가 다양한 인지 작업에 관여한다는 점에서, 코딩이 단순한 기술 습득을 넘어 복잡한 문제 해결 능력을 기르는 데 도움이 될 수 있음.
     * 미래 연구 방향: 더 많은 경험을 가진 프로그래머를 대상으로 한 추가 연구가 필요하며, 이는 코딩 교육의 최적화에 중요한 데이터를 제공할 수 있음.

        Hacker News 의견

     * 논문 링크가 제공되지 않았지만, 아마도 이 논문일 것임. 연구자들이 프로그래머들에게 코드 조각을 보여주고 그 코드가 어떤 동작을 할지 예측하게 했음.
     * 링크된 기사에 따르면, 코드를 읽을 때 뇌의 특정 영역이 활성화되며, 이는 익숙하지 않은 문제를 신중하게 해결하는 영역임. 하지만 30년 이상의 프로그래밍 경험이 있는 사람들에게는 일반화되지 않을 수 있음.
     * Lex Fridman이 최근 언어학자 Edward Gibson을 인터뷰했으며, 코드 읽기가 언어와는 다른 뇌의 부분을 활성화시킨다는 내용이 포함됨.
     * 프로그래밍 언어를 인간 언어처럼 만들려는 시도는 초보적인 실수임. 프로그래밍 언어는 주로 어떤 구조를 만드는 것에 가깝고, 이는 커뮤니케이션과는 다름.
     * 프로그래밍 언어와 인간 언어의 차이점은 프로그래밍이 어떤 구조를 만드는 것에 더 가깝다는 점임. 인간 언어는 다양한 목적의 커뮤니케이션에 사용될 수 있음.
     * 코드 읽기와 형식화된 인간 언어 읽기, 또는 형식화된 언어와 비형식화된 언어 읽기 간의 뇌 활동 비교가 더 흥미로울 것임.
     * 깨끗한 코드를 작성하는 데 가장 도움이 된 것은 학술적 글쓰기 수업을 듣는 것임. 코드 예측은 언어 센터보다는 계획 과제와 더 유사함.
     * 유튜브 채널에서 오픈 소스 프로젝트의 코드를 읽음. 이는 음악의 시각적 읽기와 비슷함. 연구자들이 언어 영역에서 반응을 거의 보지 못했음.
     * 집에서 주로 일하며, 코딩할 때 음악을 듣고 노래를 부름. 하지만 읽는 동안에는 노래를 부를 수 없음. 코딩할 때는 가능함.
     * 코드 읽기는 산문 읽기나 수학을 하는 것과 다름. 퍼즐을 푸는 것과 같음. 여러 가지를 실시간으로 연결하고 번역해야 함.
     * 코드 읽기는 기어의 사진을 보고 ""기어 A가 시계 방향으로 도는지 반시계 방향으로 도는지""를 묻는 것과 같음. 메커니즘을 연구하는 느낌임.
     * 코드를 읽을 때 머릿속에 내레이터의 목소리가 들리지 않음.
"
"https://news.hada.io/topic?id=15004",""Doge" 밈의 주인공인 개 Kabosu 사망 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ""Doge"" 밈의 주인공인 개 Kabosu 사망

카보수, '도지' 밈의 주인공, 사망

     * 카보수, '도지' 밈의 주인공인 일본 시바 이누가 18세의 나이로 사망했음
          + 주인에 따르면 카보수는 백혈병과 간 질환을 앓고 있었음
          + 주인 아츠코 사토는 인스타그램과 블로그를 통해 카보수의 사망 소식을 전했음
     * 사토는 ""카보수를 사랑해주신 모든 분들께, 5월 24일 아침 카보수가 무지개 다리를 건넜습니다. 그동안의 지원에 감사드립니다""라고 전했음
          + ""카보수는 고통 없이 평화롭게 잠들듯이 갔습니다. 그동안 카보수를 사랑해주셔서 감사합니다. 카보수는 세상에서 가장 행복한 강아지였다고 확신합니다. 저 또한 세상에서 가장 행복한 주인입니다. 많은 사랑을 보내주신 모든 분들께 깊은 감사를 드립니다""라고 덧붙였음
     * 사토는 일본의 교사로, 2008년 강아지 공장이 폐쇄된 후 동물 보호소에서 카보수를 입양했음
          + 2010년 사토의 개인 블로그에 올라온 카보수의 사진이 '도지'라는 의도적인 오타로 온라인에서 불리며 인터넷 센세이션이 되었음
          + 이 밈은 코믹 산스 글꼴로 작성된 부서진 영어의 내부 독백을 포함함
     * 도지는 이후 도지코인이라는 암호화폐를 영감으로 주었으며, 일론 머스크가 여러 차례 트윗을 통해 언급하면서 가치가 일시적으로 급등했음
          + 또한, 400만 달러에 판매된 대체 불가능 토큰(NFT)도 있음
     * 2022년 12월, 사토는 카보수가 암과 급성 간 질환으로 심각하게 아프다고 밝혔음
          + 만성 림프구성 백혈병과 급성 담관간염으로 진단받아 매우 위험한 상태였다고 전했음

GN⁺의 의견

     * 인터넷 문화의 상징: 카보수는 인터넷 밈 문화의 상징적인 존재로, 많은 사람들에게 웃음과 기쁨을 주었음. 이러한 밈은 디지털 시대의 새로운 소통 방식으로 자리 잡았음.
     * 암호화폐와 NFT의 영향: 도지코인과 관련된 일론 머스크의 트윗은 암호화폐 시장에 큰 영향을 미쳤음. 이는 암호화폐의 변동성을 잘 보여주는 사례임.
     * 반려동물의 중요성: 카보수의 이야기는 반려동물이 주는 감정적 유대와 그들의 삶이 우리에게 미치는 영향을 잘 보여줌. 반려동물의 건강 관리와 사랑의 중요성을 다시 한 번 상기시킴.
     * 인터넷 밈의 경제적 가치: 도지 밈이 NFT로 400만 달러에 판매된 것은 인터넷 밈이 단순한 유머를 넘어 경제적 가치를 가질 수 있음을 보여줌. 이는 디지털 자산의 새로운 가능성을 열어줌.
     * 커뮤니티의 힘: 카보수의 사망 소식에 많은 사람들이 애도를 표하는 것은 인터넷 커뮤니티의 힘을 보여줌. 이러한 커뮤니티는 사람들 간의 연결을 강화하고, 공통의 관심사를 통해 서로를 지지하게 함.

        Hacker News 의견

해커뉴스 댓글 모음 요약

     * 인터넷 밈의 힘
          + 인터넷 밈이 현대 사회에서 얼마나 큰 영향을 미치는지에 대한 생각.
          + 밈을 통해 가상화폐를 수십억 달러 가치로 만들거나, 대통령을 당선시킬 수 있는 힘이 있음.
     * 슬픔과 애도
          + ""많이 슬프고, 매우 애도함""이라는 감정 표현.
     * 카보수의 긴 생명
          + 카보수가 암을 앓고도 17개월을 더 살았다는 사실에 놀라움.
          + 여전히 웃음을 주는 밈의 힘.
     * 단일 사진의 문화적 영향력
          + 한 장의 개 사진이 문화에 미친 엄청난 영향력에 대한 놀라움.
          + 이 개가 자신의 이미지가 전 세계적으로 알려질 것이라는 사실을 전혀 알지 못했을 것이라는 생각.
          + 앞으로 10년 후에도 도지 밈이 인기를 끌지 모르겠지만, 이 시대의 인터넷 문화를 돌아보면 도지의 이미지가 많이 보일 것이라는 예측.
     * 감정적인 반응
          + ""많이 울고, 많은 추억, 매우 감사함""이라는 감정 표현.
     * 도지의 애도
          + 도지의 이름을 기억하며, ""가장 착한 개""였다는 표현.
          + ""밈 개 RIP""라는 애도.
     * 평화로운 안식
          + ""평화롭게 잠들길""이라는 애도 표현.
     * 반복적인 소식
          + 같은 소식을 네 번째 듣는다는 놀라움.
"
"https://news.hada.io/topic?id=14932","UI 밀도(Density)의 의미와 디자인 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       UI 밀도(Density)의 의미와 디자인 방법

인터페이스 밀도가 낮아지고 있음

     * 현재의 웹사이트와 애플리케이션을 2000년대와 비교하면 소프트웨어가 퍼져 있는 경향을 무시하기 어려움.
     * UI 밀도란 무엇인가?
          + UI 밀도는 특정 순간의 인터페이스 모양이 아님
          + 인터페이스가 여러 순간에 걸쳐 제공하는 정보의 양과 관련이 있음
          + 디자인 결정이 이러한 순간들을 어떻게 연결하는지, 소프트웨어가 제공하는 가치와 어떻게 연결되는지에 대한 것임

시각적 밀도 (Visual density)

     * 밀도는 눈으로 먼저 생각하게 됨
     * 시각적 밀도는 주어진 공간에서 얼마나 많은 것을 볼 수 있는지를 의미함
     * 시각적으로 밀도가 높은 소프트웨어 인터페이스는 화면에 많은 요소를 표시함
     * 시각적으로 밀도가 낮은 인터페이스는 화면에 적은 요소를 표시함
     * 예시: Bloomberg 터미널
          + Bloomberg 터미널은 시각적 밀도의 대표적인 예임
          + 단일 화면에 주요 시장 지수의 스파크라인, 세부 거래량 분포, 수십 개의 행과 열이 있는 테이블, 최신 뉴스 헤드라인, 키보드 단축키와 빠른 작업 UI 표지판 등이 표시됨
     * 예시: Craigslist와 McMaster-Carr
          + Craigslist는 수백 개의 단순한 링크와 검색 및 필터 인터페이스로 시각적으로 밀도가 높음
          + McMaster-Carr 웹사이트도 비슷한 디자인 요소를 공유하며, 작은 공간에 많은 제품 변형의 세부 정보를 나열함
     * 밀도 인식의 직관적 판단
          + 이러한 웹사이트의 밀도에 대한 의견은 단 몇 초 만에 형성됨
          + 이러한 판단은 잠재의식에서 빠르고 직관적으로 이루어짐
          + 그러나 이런 빠른 판단은 편향적이고 신뢰할 수 없을 수 있음
     * 시각적 밀도의 예시 이미지
          + 두 개의 직사각형 예시:
               o 왼쪽: 무작위로 배열된 많은 점들
               o 오른쪽: 동일한 수의 점들이 행과 열로 깔끔하게 배열됨
               o 대부분의 사람들은 오른쪽 이미지가 더 밀도가 높다고 느낌
          + 또 다른 예시 이미지:
               o 왼쪽: 행과 열로 깔끔하게 배열된 많은 점들
               o 오른쪽: 두 개의 그룹으로 나뉘어 깔끔하게 배열된 동일한 수의 점들
               o 같은 수의 점이라도, 그룹으로 나누면 밀도에 대한 우리의 인식이 달라짐
     * 시각적 밀도의 불확실성
          + 디자인에서는 완전히 객관적일 수 없음
          + 그러나 밀도에 대한 대화를 나누려면 일관성 있고 의미 있으며 유용한 정의를 목표로 해야 함

정보 밀도(Information density)

     * 에드워드 터프티(Edward Tufte)는 《The Visual Display of Quantitative Information》에서 차트와 그래프의 디자인을 다룸

     모든 그래픽의 잉크는 이유가 있어야 하며, 그 이유는 새로운 정보를 제공해야 함.
     * 데이터 잉크(Data-ink)
          + 데이터 잉크는 주어진 시각화에서 유용한 부분을 의미함.
          + 데이터가 아닌 시각적 요소는 제거해야 함.
          + 데이터 잉크는 차트가 차지하는 공간과는 다름. 정보 밀도에 관한 것임.
     * 정보 밀도 계산
          + 정보 밀도는 차트에 있는 데이터 잉크의 양을 차트를 인쇄하는 데 필요한 전체 잉크 양으로 나누어 계산할 수 있음.
          + 데이터 잉크의 정의는 주관적일 수 있지만, 중요한 점은 비율을 가능한 1에 가깝게 만드는 것임.
          + 비율을 높이는 방법:
               o 데이터 잉크 추가: 추가적인 유용한 데이터를 제공.
               o 비데이터 잉크 제거: 데이터를 전달하지 않는 그래픽 부분을 지움.
     * 예시
          + 초과 잉크가 많은 그래픽 예시와 적은 잉크로 많은 정보를 전달하는 개선된 예시.
          + 정보 밀도에는 상한선이 있으며, 너무 많은 잉크를 제거하거나 너무 많은 정보를 추가할 수 있음.
          + 청중도 중요함: 고급 사용자는 높은 밀도를, 초등학생은 낮은 밀도를 선호할 수 있음.
     * 정보 밀도와 시각적 밀도의 관계
          + 정보 밀도가 높을수록 시각적으로 밀도가 높아 보이는 경향이 있음.
          + 예: 1885년 E.J. Marey의 기차 시간표 시각화. 도착 및 출발 시간이 작고 밀도 높은 공간에 표시됨.
          + 터프티는 데이터 밀도와 데이터를 합리적으로 최대화할 것을 주장함.
     * Shrink Principle
          + 그래픽은 크게 축소될 수 있음.
          + 정보 밀도는 차트와 그래프에 유용함.
          + 인터페이스에도 적용할 수 있을까?
     * 인터페이스에서 정보 밀도 적용
          + 정보는 화면에 적용 가능함.
          + 인터페이스 각 부분이 최대한 많은 정보를 보여줘야 함.
          + 잉크를 픽셀로 생각하는 것은 유혹적이지만, 인터페이스에는 요소 간의 관계를 이해하도록 돕는 구분선, 구조적 요소, 표지판이 필요함.
          + Shrink Principle을 따라 모든 공백을 제거하려는 유혹이 있음.
          + 그러나 일부 공백은 시각적 요소만큼 중요한 의미가 있음. 그림자, 그라디언트, 색상 강조의 역할도 고려해야 함.
     * 정보 밀도는 유용한 개념이지만, 전체 그림의 일부에 불과함.
          + 인터페이스의 모든 디자인 결정을 더 객관적이고 정량적으로 이해할 방법을 모색해야 함.

디자인 밀도 (Design Density)

     * 디자인 결정의 관점에서 밀도를 정의하는 첫 번째 도전은 무엇이 결정인지 판별하는 것임.
     * 디자인 결정을 이해하기
          + UI, UX, 제품 디자인에서 우리는 정보를 전달하기 위해 의식적 또는 무의식적으로 많은 결정을 내림.
          + 왜 특정 선택이 의미를 전달하는지, 어떤 선택이 단순히 미학적인지, 어떤 선택이 실제로 중요한지 질문이 필요함.
     * 게슈탈트 원리
          + 20세기 독일 심리학자들이 연구한 인간이 형태와 패턴을 이해하는 방법.
          + 게슈탈트(Gestalt)라는 용어는 ""형태""를 의미함.
          + 이 연구에서 몇 가지 기본적인 디자인 법칙을 발견함:
               o 근접성(Proximity): 가까이 있는 것들을 하나의 그룹으로 인식함.
               o 유사성(Similarity): 모양, 크기, 색상 등에서 유사한 객체들이 서로 관련되어 보임.
               o 폐쇄성(Closure): 디자인의 틈을 메워 전체 형태를 인식함.
               o 대칭성(Symmetry): 대칭적인 형태들을 중심점을 기준으로 그룹화함.
               o 공통 운명(Common Fate): 동일한 방식으로 움직이는 객체들을 함께 그룹화함.
               o 연속성(Continuity): 겹쳐져 있는 객체들을 별개로 인식함.
               o 과거 경험(Past Experience): 익숙한 형태와 패턴을 낯선 상황에서도 인식함.
               o 전경-배경 관계(Figure-Ground Relationship): 2D 이미지에서 전경과 배경 요소를 구분함.
     * 게슈탈트 원리가 UI 디자인에 미치는 영향
          + 유사성 원리 덕분에 동일한 크기, 글꼴, 색상의 텍스트는 같은 목적을 나타냄.
          + 근접성 원리는 차트가 헤드라인과 가까이 있을 때 헤드라인이 차트를 설명한다는 것을 나타냄.
          + 과거 경험과 전경-배경 원리 덕분에 사용자에게 토글 스위치가 어떻게 작동하는지 즉시 알 수 있음.
     * 디자인 밀도의 개념
          + 픽셀에 집중하는 대신, 게슈탈트 원리를 사용하여 의도적으로 의미를 전달하는 디자인 결정을 생각함.
          + 터프티의 데이터-잉크 비율이 차트에 필요한 잉크와 전체 잉크를 비교하는 것처럼, 디자인 밀도는 필요한 디자인 결정과 전체 결정의 비율을 비교함.
          + 주관적이지만, 사용자 인터페이스에서는 데이터나 잉크의 양을 세는 것보다 디자인 결정을 세는 것이 더 유용함.
     * 디자인 밀도의 한계
          + 사용자 인터페이스는 작업, 즐거움, 시간 낭비, 이해 생성, 개인적 연결 촉진 등을 위해 존재함.
          + 사용자가 여정을 통해 취하는 모든 행동을 포함해야 함.
          + 밀도는 구성 요소, 레이아웃, 화면을 넘어 공간과 시간에서 사용자가 취하는 모든 행동을 고려해야 함.

시간적 밀도

     * 주어진 시간 내에 사용자가 할 수 있는 작업의 양이 시간적 밀도를 결정함.
     * 로딩 시간은 시간적 밀도의 가장 큰 요인임. 인터페이스가 빠르게 반응하고 새로운 페이지나 화면을 로드할수록 UI가 더 밀도 높음.
     * Bloomberg 터미널은 데이터를 거의 즉각적으로 로드하여 시간적 밀도가 매우 높음.
     * 시간적 밀도를 높이는 방법
          + 로딩 시간을 최대한 줄임으로써 시간적 밀도를 높일 수 있음.
          + 그러나 모든 로딩 시간을 줄일 수는 없음. 예를 들어, 사용자의 인터넷 연결 속도나 CPU 속도를 변경할 수 없음.
          + 일부 작업(파일 업로드, 고객 지원 응답 대기, 결제 처리 등)은 복잡한 시스템과 예측할 수 없는 변수와 관련됨.
     * 시간 지각을 변화시키는 방법
          + 100밀리초 이내: 두 동작 사이의 시간이 100밀리초 이내이면 동시에 발생한 것처럼 느껴짐. 이 경우 애니메이션이 오히려 앱을 느리게 느끼게 할 수 있음.
          + 100밀리초에서 1초 사이: 두 동작 사이의 연결이 끊어지기 시작함. 애니메이션과 전환 효과가 이 지각적 간극을 메워줄 수 있음.
          + 1초에서 10초 사이: 애니메이션만으로는 부족함. 10초 이내에 사용자가 페이지를 떠날 가능성이 높아짐. 이 경우 불확정 로딩 표시기를 사용하여 시스템이 정상 작동 중임을 알려야 함.
          + 10초에서 1분 사이: 불확정 로딩 표시기는 10초 이상 지속되면 정적이라고 느껴지기 시작함. 이 경우 명확한 로딩 표시기(예: 진행 막대)를 사용하여 남은 시간을 명확하게 표시해야 함.
          + 1분 이상: 사용자가 페이지를 떠나거나 다른 작업을 할 수 있게 하여야 함. 1분 이상 아무 작업도 하지 않으면 좌절감을 줄 수 있음. 긴 프로세스는 오류 발생 가능성도 높음.
     * 시간과 공간의 밀도
          + UI의 밀도는 단지 수단에 불과함. UI의 가치는 그 외형이 아니라, 달성할 수 있는 결과에 있음.
          + 밀도는 최소한의 시간, 공간, 픽셀, 잉크로 최대한의 가치를 제공하는 것에 있음.

가치 밀도 (Density in Value)

     * 가치 밀도는 사용자가 얻는 결과의 가치와 관련됨.
     * 예: 긴 양식을 작은 조각으로 나누고 마법사형 인터페이스로 구성하는 것이 좋음. 부분적으로 채워진 양식은 가치가 없기 때문임.
     * 모든 질문을 한 페이지에 넣는 것이 시각적으로 밀도가 높아 보일 수 있지만, 작성하는 데 시간이 오래 걸리면 많은 사용자가 제출하지 않음.
     * 양식 예시
          + 여러 부분으로 나누고, 오류와 해결 방법을 명확하게 표시한 양식.
          + 오류를 줄이고 사용자가 양식을 끝까지 작성하게 하는 것이 디자인에 더 많은 공간과 시간이 필요할 수 있음.
          + 그러나 시각적, 시간적 밀도의 희생이 결과를 더 가치 있게 만들면 전체 가치 밀도가 증가함.
     * 가치 밀도 증가
          + 양식을 더 작고 빠르게 로드하고 오류를 줄임으로써 시각적, 시간적 밀도를 높일 수 있음.
          + 사용자의 가치나 비즈니스의 가치를 감소시키지 않는다면 전체 밀도가 증가함.
          + 터프티의 접근 방식을 따라 최대한 가치 밀도를 높이려고 노력해야 함.
     * 최적화 문제
          + 최적화 문제를 해결하면 역설적인 결과가 나올 수 있음.
          + 초기 인터넷에서는 Craigslist와 같은 회사가 정보를 집계하고 페이지 링크로 표시하여 가치 밀도를 높임.
          + Yahoo와 Altavista는 정보를 검색할 수 있게 했지만 여전히 집계를 중시함.
          + Google은 다른 접근 방식을 취해 인터넷의 링크 체인을 통해 얻은 정보를 검색 상자에 활용함.
          + 정보가 스스로 집계되었으며, 사용자에게 필요한 것은 단일 텍스트 입력만으로 웹 전체에 접근하는 것이었음.
     * Google과 Yahoo의 접근 방식
          + Google의 초기 화면(2001년)과 2024년의 화면을 비교하면 시각적 밀도는 낮지만, 가치 밀도는 매우 높음.
          + 결과: Google의 가치는 2004년 $23B에서 현재 $2T 이상으로 증가함. Yahoo는 2000년 $125B에서 현재 $4.8B로 하락함.
     * 시각적 밀도보다 가치 밀도가 중요한 경우가 많음.
     * 사용자가 얻는 가치를 최대화하기 위해 디자인과 기능을 최적화하는 것이 중요함.

결론

     * UI 밀도를 고려한 디자인은 인터페이스의 시각적 측면을 넘어서야 함.
     * 우리가 내리는 모든 명시적, 암시적 디자인 결정과 화면에 표시하는 모든 정보를 포함함.
     * 사용자가 소프트웨어에서 가치를 얻기 위해 취하는 모든 행동과 시간을 포함해야 함.
     * UI 밀도의 구체적 정의
          + UI 밀도 = 사용자가 인터페이스에서 얻는 가치 / 인터페이스가 차지하는 시간과 공간
     * 중요한 요소
          + 속도
          + 사용성
          + 일관성
          + 예측 가능성
          + 정보의 풍부함
          + 기능성
     * 성공적인 인터페이스의 이유 : 이러한 모든 요소를 고려하면 일부 인터페이스가 성공하고 다른 인터페이스가 실패하는 이유를 이해할 수 있음.
     * 디자인 목표
          + 밀도를 고려한 디자인을 통해 사람들이 우리가 만든 소프트웨어에서 더 많은 가치를 얻을 수 있도록 해야 함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 레스토랑 메뉴의 물리적 형태가 모바일 사이트 메뉴보다 더 나은 이유
          + 모바일 사이트 메뉴는 UI가 너무 복잡해서 구글 맵에서 메뉴 사진을 찾는 경우가 많음.
          + ""밀도""를 재정의하려는 시도보다는 시각적 중요성을 잃지 않고 정보를 최대한 많이 제공하는 것이 중요함.
     * 형식보다 기능을 중시하는 데이터의 중요성
          + SS El Faro 사건에서 선장은 예쁜 그래픽을 가진 상업적 날씨 데이터를 사용하다가 허리케인에 휘말림.
          + 데이터의 시각적 아름다움보다는 정확성과 최신성이 중요함.
     * 시간적 밀도의 개념
          + JIRA는 시각적으로 밀도가 높지만, 속도와 다양한 화면 전환 때문에 실제로는 드문드문한 느낌을 줌.
     * 모바일 인터페이스의 희소성 이유
          + 사람들의 손가락이 상대적으로 두껍고 부정확함.
          + 데스크탑보다 느려서 로드를 여러 부분으로 나눔.
          + 세로 스크롤 형식과 화면 크기가 제한적임.
          + 데스크탑에서 유용한 기능들이 모바일에서는 어려움.
     * UI의 희소성 증가에 대한 비판
          + 웹 디자인 세계가 공백을 더 많이 사용하는 방향으로 가고 있음.
          + Hulu와 같은 앱은 많은 공백을 사용하여 정보 접근을 어렵게 만듦.
          + 디자이너들이 트렌드를 따르기보다는 실제로 좋은 것을 고민해야 함.
     * 복잡한 UI와 트렌드의 문제
          + 디자이너들이 트렌드를 따르는 것이 제품의 판매에 도움이 된다고 생각함.
          + 유명한 사람이나 브랜드를 모방하려는 경향이 있음.
          + UI 디자이너들이 고객이 트렌드와 유행을 중시한다고 잘못 생각할 수 있음.
     * 전통적인 UI의 장점
          + 오래된 Windows B2B 애플리케이션은 많은 정보를 한눈에 볼 수 있게 함.
          + 웹 기반 시스템은 여러 페이지를 사용해야 하는 반면, 전통적인 시스템은 한두 개의 창에서 모든 데이터를 볼 수 있음.
     * 정보 밀도의 불균형
          + 프레젠테이션 슬라이드의 간단한 내용이 고해상도 사진으로 찍히는 경우가 많음.
          + LaTeX로 작성된 논문은 작은 용량의 PDF 파일이지만, MS Word로 작성된 논문은 매우 큰 용량을 차지함.
     * 모바일 UI의 문제점
          + 작은 화면에서 처방전을 리필하는 것이 불가능해짐.
          + React로 최적화된 UI가 작은 화면에서 제대로 작동하지 않음.
          + 기술의 발전이 사용자 경험을 해치고 있음.
     * 밀도가 부족한 UI의 예시
          + Vanguard 투자 상품 페이지는 밀도가 부족한 UI의 예시임.
"
"https://news.hada.io/topic?id=14974","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   요즘은 react, nextjs를 공부하고 있습니다. 지금 하는 일이랑은 달리 취미로만 하는데 재밌네요 ㅎㅎ

   유튜브 보는데 피로를 느껴서 다시 rss를 보려고 합니다. 근데 뉴스레터가 많아서 이를 rss로 변환하는 개인용 서비스를 만들려고 합니다

   새로운 RSS 기반 서비스가 나오길 응원/기대 합니다!

   매드맥스 퓨리오사를 보러 갑니다.
   V8!

   헐 이거 제 레이다에 안 잡혔었네요. 감사합니다. 보러 갑니다.

   몇년째 입지 않는 옷들을 숲스토리 라는 곳에 기부하려고 합니다.

   오픈소스 새롭게 할라고 링크만 모아둔거 끄내서 리포만들려고해요 오픈소스 컨트리뷰터 되려구요

   오늘 아침에 집에서 잘 쓰던 LG 32인치 와이드 모니터가 사망했네요. 상단에 줄이 생겨서 AS 가보니, 교체비용 90만 ㅎㅎ
   이참에 새 모니터를 알아보니 사무실서 사용하는 델 4021QW의 새버전인 4025QW가 나왔네요.
   급하게 주문해서 내일 받을 예정입니다. 새로운 넓은 화면에서 영화나 한편 봐야 겠어요.

   와우 가격이....부럽습니다
"
"https://news.hada.io/topic?id=15039","평범한 엔지니어를 위한 HTTPS 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         평범한 엔지니어를 위한 HTTPS 가이드

HTTP 요청의 생애 주기

  1. 클라이언트가 요청을 보냄

     * HTTP 요청 생성: 클라이언트(보통 웹 브라우저)가 HTTP 요청을 생성함.
     * HTTP 메서드: GET, POST 등.
     * 요청된 리소스: 예를 들어 /index.html.
     * 프로토콜 버전: HTTP/1.1 등.
     * 헤더와 본문: key: value 형식의 헤더와 선택적 메시지 본문 포함.

  2. DNS 조회

     * 도메인 이름 변환: 사람이 읽을 수 있는 도메인 이름(www.example.com)을 IP 주소(93.184.216.34)로 변환함.
     * DNS 서버 쿼리: 클라이언트가 DNS 서버에 쿼리를 보내 도메인 이름을 IP 주소로 변환함.

  3. TCP 핸드셰이크

     * TCP 연결 설정: 클라이언트가 서버와 TCP 연결을 설정함.
     * 3단계 핸드셰이크:
          + SYN: 클라이언트가 연결 요청을 보냄.
          + SYN-ACK: 서버가 요청을 확인함.
          + ACK: 클라이언트가 확인 응답을 보냄.

  4. HTTP 요청 전송

     * HTTP 요청 전송: TCP 연결이 설정되면 클라이언트가 실제 HTTP 요청을 보냄.

  5. 인터넷을 통한 패킷 라우팅

     * 패킷 전송: 데이터 패킷이 여러 네트워크 장치를 통해 서버로 라우팅됨.
     * 라우터 역할: 라우터가 패킷의 최적 경로를 결정함.

  6. 서버 응답

     * HTTP 응답 생성: 서버가 HTTP 요청을 처리하고 응답을 생성함.
     * 응답 내용:
          + 프로토콜: 사용된 HTTP 버전.
          + 상태 정보: HTTP 상태 코드(예: 200, 404).
          + 응답 헤더: 요청 헤더와 유사함.
          + 응답 본문: 요청된 콘텐츠(예: HTML 페이지, JSON 데이터).

  7. 콘텐츠 렌더링

     * HTTP 응답 처리: 클라이언트가 HTTP 응답을 받아 처리함.
     * 브라우저 렌더링: 브라우저가 HTML을 해석하고 화면에 콘텐츠를 렌더링함.
     * 추가 리소스 요청: 이미지, CSS, JavaScript 등의 추가 리소스를 요청함.

HTTPS = HTTP + 암호화

  TLS 핸드셰이크

     * TLS 핸드셰이크: 클라이언트와 서버가 암호화 및 인증 키를 교환함.
     * 암호화 통신: TLS 핸드셰이크 후, 클라이언트와 서버는 HTTP를 사용하여 암호화된 메시지를 주고받음.

  TLS 1.3 핸드셰이크

     * 간소화된 과정: TLS 1.3은 더 적은 옵션을 제공하여 더 간단하고 안전하며 빠름.
     * 핵심 단계:
          + 클라이언트 헬로: 클라이언트가 지원하는 암호화 스위트와 TLS 버전을 서버에 보냄.
          + 서버 헬로: 서버가 선택한 암호화 스위트와 TLS 버전을 클라이언트에 보냄.
          + 인증서 검증: 클라이언트가 서버의 SSL 인증서를 검증함.
          + 프리마스터 시크릿 생성: 클라이언트가 프리마스터 시크릿을 생성하고 서버에 보냄.
          + 세션 키 생성: 클라이언트와 서버가 세션 키를 생성함.
          + 보안 통신: 세션 키를 사용하여 보안 대칭 암호화를 통해 통신함.

GN⁺의 의견

     * 인터넷 통신 이해: HTTP와 HTTPS의 기본 개념을 이해하면 네트워크 통신의 기초를 잘 다질 수 있음.
     * 보안 중요성: HTTPS를 통해 데이터 전송의 보안성을 높이는 것이 중요함.
     * TLS 1.3의 장점: 더 간단하고 빠르며 안전한 TLS 1.3을 사용하는 것이 권장됨.
     * 실무 적용: 실제 프로젝트에서 HTTPS를 적용하여 보안성을 강화할 필요가 있음.
     * 추가 학습: 네트워크 계층과 프로토콜에 대한 추가 학습을 통해 더 깊은 이해를 얻을 수 있음.

        Hacker News 의견

     * 네트워크 문제 발생 시 어디서 문제가 생겼는지 알기 어려운 이유에 대한 질문. 네트워크 경로가 비결정론적이라는 설명이 설득력이 없다고 느끼는 의견.
     * TLSv1.2와 TLSv1.3에 대한 상세하고 인터랙티브한 예제를 추천하는 의견. 링크 제공.
     * ""ELI(a mediocre engineer)"" 스타일의 설명이 유익하다는 의견. 더 많은 예제를 찾고 싶어 함.
     * SHA256 서명 검증 코드 예제를 찾고 있는 사람의 요청. 이론은 알지만 구현에 어려움을 겪고 있음.
     * 샌프란시스코에서 HTTP 요청 작성으로 연봉 $300K를 받는다는 부분이 기사에서 가장 좋았다는 의견.
     * 클라이언트가 서버의 공개 키로 프리마스터 시크릿을 암호화해 보내는 것은 오래된 정보라는 의견.
     * SSL 인증서가 개인 키를 포함한다는 설명에 대한 의문. ""Mediocre Engineer""라는 제목에 맞는 설명이라는 의견.
     * 연봉 $300K를 $50K 낮춰서 일하고 싶다는 농담. TLS <1.3 설명이 잘못되었다는 지적.
     * 기사 내용이 오래되었고, 현재 웹 요청의 30%가 HTTP3와 CORS를 사용한다는 의견. 출판 날짜가 없다는 지적.
     * HTTPS 설명이 AI 요약처럼 보인다는 의견. 용어 설명이 부족하고, 독자가 공개 키 암호화에 대해 알고 있다고 가정함. OSI 계층 설명이 불완전하다는 지적.
"
"https://news.hada.io/topic?id=14943","HN에 공개: Pls Fix – 계정 정지 항소를 위해 대형 기술 기업 직원 고용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             HN에 공개: Pls Fix – 계정 정지 항소를 위해 대형 기술 기업 직원 고용

서비스 소개

     * pls fix는 Apple, Amazon, Google, Meta, Microsoft, Snap, TikTok 등 주요 기술 플랫폼의 검증된 직원들과 사용자를 연결해주는 서비스임.
     * 사용자가 계정 차단, 광고 계정 정지 등 문제를 겪을 때, 내부 직원의 도움을 받을 수 있도록 지원함.

주요 기능

     * Google Profile: $250 (2024년 5월 22일)
     * Gmail - 사용자명/비밀번호/복구 이메일은 있지만 SMS가 없음: $100 (2024년 5월 22일)
     * 새 기기에서 2FA로 인해 Facebook 접근 불가: $100 (2024년 5월 22일)
     * LinkedIn 프로필 잠김: $400,000 (2024년 5월 22일)
     * Amazon 판매자 계정 정지: $3,000 (2024년 5월 22일)
     * X/twitter 계정 정지: $50 (2024년 5월 22일)
     * TikTok 계정 잠금 해제 필요: $35,000 (2024년 5월 22일)
     * 계정 탈취: $200 (2024년 5월 22일)
     * Google Ads 계정 정지: $200 (2024년 5월 22일)
     * Google Play 개발자 계정 정지: $200 (2024년 5월 22일)
     * Gmail 계정 잠금: $100 (2024년 5월 22일)
     * 해킹된 계정: $1,000 (2024년 5월 22일)
     * Hotmail 계정: $200 (2024년 5월 22일)
     * Instagram 계정 비밀번호 분실: $100 (2024년 5월 22일)
     * Instagram 상점 거부: $100 (2024년 5월 22일)
     * Instagram 계정 분실: $500 (2024년 5월 22일)
     * Adsense 부정 활동 / 계정 폐쇄: $200 (2024년 5월 22일)
     * Instagram 인증: $3,000 (2024년 5월 22일)
     * Instagram, 새로운 전화번호, 2FA 분실: $200 (2024년 5월 22일)
     * Instagram 인증: $250 (2024년 5월 22일)
     * Google 정지: $250 (2024년 5월 22일)
     * Google SIM 분실: $150 (2024년 5월 22일)
     * Instagram 계정 접근 불가: $50 (2024년 5월 22일)
     * 커뮤니티 가이드라인 또는 서비스 약관 위반으로 계정 영구 잠금: $1,000 (2024년 5월 22일)
     * Facebook: 계정 탈취: $100 (2024년 5월 22일)
     * 계정 이름 복구: $150 (2024년 5월 22일)
     * 전화번호가 없어 Gmail 계정 접근 불가: $250 (2024년 5월 22일)
     * Google Adsense: $200 (2024년 5월 22일)
     * Amazon 판매자 계정 정지: $400 (2024년 5월 21일)
     * Apple 개발자 계정 정지: $500 (2024년 5월 21일)
     * TikTok 정지: $90 (2024년 5월 21일)
     * Facebook: 진정성과 신원 문제로 계정 정지: $100 (2024년 5월 21일)
     * Instagram 계정 비활성화/정지: $150 (2024년 5월 21일)
     * Google Ads 계정 정지: $200 (2024년 5월 21일)

GN⁺의 의견

     * 기술 플랫폼의 복잡성: 많은 사용자가 기술 플랫폼의 복잡한 규정과 절차로 인해 계정 문제를 해결하는 데 어려움을 겪음. 이런 서비스를 통해 문제를 더 쉽게 해결할 수 있음.
     * 비용 문제: 일부 서비스의 비용이 매우 높음. 사용자는 비용 대비 효과를 신중히 고려해야 함.
     * 보안 및 신뢰성: 검증된 직원과의 연결을 통해 보안과 신뢰성을 높일 수 있음. 그러나 개인 정보 보호와 관련된 문제도 고려해야 함.
     * 대안 서비스: 비슷한 기능을 제공하는 다른 서비스나 프로젝트도 있음. 예를 들어, 계정 복구를 위한 공식 지원 채널을 먼저 시도해보는 것이 좋음.
     * 기술 도입 시 고려사항: 새로운 기술이나 서비스를 도입할 때는 비용, 보안, 신뢰성 등을 종합적으로 고려해야 함. 이 서비스를 선택함으로써 얻을 수 있는 이점과 단점을 명확히 이해하는 것이 중요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 상업적 뇌물
          + 의견: 대부분의 지역에서 상업적 뇌물로 간주됨.
          + 설명: 캘리포니아 법에 따르면, 고용주의 동의 없이 금전이나 가치를 수락하는 것은 상업적 뇌물에 해당함.
     * 부당 해고
          + 의견: 이런 행동을 하면 모든 회사가 해고할 것임.
          + 설명: 이는 ""부패""로 간주되며 법적 문제를 초래할 수 있음.
     * 인스타그램 계정 문제
          + 의견: 인스타그램 계정이 이유 없이 차단됨.
          + 설명: 유럽연합에 있었다면 ""잊혀질 권리""를 행사할 수 있었을 것임. 결국 100통 이상의 이메일 후 문제 해결됨.
     * 부패의 정의
          + 의견: 부패는 독점 + 재량 - 투명성임.
          + 설명: 많은 기술 회사들이 시장 독점, 무한한 재량, 투명성 부족을 가지고 있음.
     * 직원 뇌물
          + 의견: 직원에게 뇌물을 주는 것은 비현실적임.
          + 설명: 투명성이 없는 시스템에서는 부패가 발생하기 쉬움.
     * 위험과 보상
          + 의견: 해고될 위험이 큼.
          + 설명: 페이스북에서는 이런 행동을 잡기 위한 팀이 있음.
     * 내부 인맥의 중요성
          + 의견: 구글과 스트라이프에 친구가 있어야 생존 가능함.
          + 설명: 자동 시스템이 잘못된 플래그를 설정할 때 내부 인맥이 중요함.
     * 법적 문제
          + 의견: 비윤리적이지만 어떤 법이 위반되는지 궁금함.
          + 설명: 비정상적인 행동을 촉진하는 것이 법적으로 뇌물임.
     * 문제의 근본 원인
          + 의견: 합법적인 해결책이 효과적이지 않기 때문에 이런 서비스가 생김.
          + 설명: 빅테크가 소비자의 요구를 충족시키지 못하고 있음.
     * 반소비자적 행태
          + 의견: 빅테크가 반소비자적임.
          + 설명: 계정이 비활성화될 때 200달러를 지불해야 함.
     * 비윤리적 접근
          + 의견: 성적 대가로 인스타그램 계정을 복구한 사례가 있음.
          + 설명: OnlyFans 모델이 링크드인에서 직원을 찾아 성적 대가로 계정을 복구함.
"
"https://news.hada.io/topic?id=14926","Enlightenmentware - 나를 일깨워주는 소프트웨어들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Enlightenmentware - 나를 일깨워주는 소프트웨어들

     * UNIX, Git, Emacs, Boost.Graph, Bazel
     * 프로그래머로서 매일 소프트웨어 도구와 상호작용하는데, 대부분의 도구는 그저 작업을 겨우 수행하는데만 쓰임
     * 때로는 단순한 유용성을 넘어서 상상력을 자극하고 새로운 가능성을 열어주며 시스템 설계 방식에 영향을 미치는 소프트웨어를 발견함
     * 이런 소프트웨어를 ‘깨달음 소프트웨어’(Enlightenmentware)라고 부름
     * 프로그래머에게 가장 흔한 깨달음의 원천은 사용하는 프로그래밍 언어임. 취미로 배우는 언어 포함
     * MASM, C, Prolog, Idris와 같은 프로그래밍 언어를 다루면서 많은 깨달음을 경험했음
     * 언어 학습이 사고력 확장에 미치는 영향은 이미 오래전부터 알려진 사실이기 때문에 이글에서는 언어에 초점을 맞추기 보다는 깨달음을 주는 소프트웨어에만 집중하기로 함

UNIX

     unix는 사용자 친화적임—단지 친구를 가리는 것뿐임.

     익명, ""Art of unix Programming"" by Eric S. Raymond

     * 2008년, 대학에서 공부하면서 첫 프로그래밍 직업을 찾기 시작함.
     * 대부분의 구인 공고에서 UNIX와 _socket_에 대한 지식을 요구했음.
     * 대학 커리큘럼에 unix나 운영체제에 대한 강의가 없어서 독학으로 공부하기로 결심함.
     * Andrey Robachevsky 등의 ""The unix Operating System"" 책을 통해 unix의 세계에 입문함.
     * Mandriva Linux를 설치하면서 unix 환경을 탐험하게 됨.
     * 이후로 unix는 모든 삶의 단계에서 함께 했음.
     * 대부분의 소프트웨어가 unix 환경에서 작동하며, 여전히 ""Advanced Programming in the unix Environment"" 책을 참고함.

Git

     git으로 발을 쏘는 것은 쉽지만, 이전 발로 되돌아가 현재 다리와 봉합(merge)하는 것도 쉬움.

     Jack William Bell

     * 2009년 초, Rational ClearCase를 사용하여 버전 관리 시스템을 처음 접함.
     * ClearCase는 매우 혼란스러웠고, 최소한의 요구 사항만 처리함.
     * 이후 Subversion을 사용하게 되었고, ""Version Control with Subversion"" 책을 통해 학습함.
     * Subversion은 이해하기 쉽고 사용하기 쉬웠지만, 개인 프로젝트에는 불편했음.
     * 그 후 Git을 발견함.
     * Git은 학습 곡선이 가파르고 혼란스러웠지만, ClearCase와는 다른 종류의 혼란이었음.
     * Git은 버전 관리를 사용하는 마찰을 제거하여 모든 가치 있는 것을 버전 관리할 수 있게 함.
     * Git의 설계는 분산 시스템, 비순환 그래프, 콘텐츠 주소 지정 저장소의 우아한 혼합으로 매력적이었음.
     * Git의 내부를 학습하는 것이 재미있어서 다른 버전 관리 시스템에도 관심을 가지게 됨.
     * Git의 주요 단점은 스냅샷 지향 접근 방식으로 인해 병합을 이해하기 어렵게 만드는 것임.

Emacs

     어떤 텍스트 편집기도 파일을 저장할 수 있지만, Emacs만이 영혼을 구할 수 있음.

     Per Abrahamsen

     * Turbo Pascal 7.0의 친근한 파란색 창에서 첫 프로그램을 편집함.
     * 대학에서는 Pascal을 사용하여 프로그래밍을 배웠고, 이후 C++와 Java를 사용함.
     * 첫 프로그래밍 직장에서 NEdit를 사용했지만, Vim과 Emacs에 관심을 가지게 됨.
     * Vim은 음악 악기를 연주하는 것처럼 도전적이지만 재미있었음.
     * Emacs는 Lisp 기계로서 텍스트 편집과 창 관리 기능을 제공함.
     * Emacs의 내부 구조는 깨끗하고 잘 조직되어 있으며, 문서화도 잘 되어 있음.
     * Emacs Lisp을 사용하여 확장하는 것이 다른 편집기보다 훨씬 쉬움.

Boost.Graph

     나는 재사용 가능한 코드에 대한 유행에 강한 편견을 가지고 있음. ""재편집 가능한 코드""가 블랙박스나 툴킷보다 훨씬 낫다고 생각함.

     Donald Knuth, Andrew Binstock과의 인터뷰

     * 2013년 새해 전야에 Boost Graph Library를 읽음.
     * 대부분의 알고리즘 라이브러리는 특정 데이터 표현에 의존하여 기존 프로젝트에 통합하기 어렵게 만듦.
     * Boost.Graph 라이브러리는 제네릭 프로그래밍을 사용하여 이 문제를 해결함.
     * 라이브러리를 실제로 사용한 적은 없지만, 설계는 STL 디자인과 제네릭 프로그래밍에 대한 이해를 깊게 해줌.

Bazel

     make가 기대한 대로 작동하지 않는다면, makefile이 잘못되었을 가능성이 큼.

     Adam de Boor, ""PMake—A Tutorial""

     * 2009년, 연구 프로젝트를 위해 첫 Makefile을 작성함.
     * make의 복잡성 때문에 더 나은 도구를 갈망하게 됨.
     * 다양한 빌드 시스템을 시도했지만, 모두 불만족스러웠음.
     * 2016년, Google에 입사하여 blaze를 사용하게 됨.
     * Bazel은 빌드 시스템의 마지막 퍼즐 조각이었음.
     * Bazel은 빠르고, 정확하며, 사용하기 쉽고, 언어에 구애받지 않음.

결론

     * 좋은 enlightenmentware의 공통점:
          + 깊은 문제를 해결하며, 일상적으로 직면하는 문제를 다룸.
          + 작은 표면적에 많은 볼륨을 담고 있음.
          + 내부를 탐험하도록 초대하고 격려함.

GN⁺의 의견

     * UNIX의 중요성: UNIX는 많은 프로그래밍 환경에서 기본적인 운영체제로 사용되며, 시스템 프로그래밍의 기초를 이해하는 데 필수적임.
     * Git의 학습 곡선: Git은 처음에는 어렵지만, 버전 관리의 강력한 도구로서 필수적임. 특히 분산 시스템과 협업 환경에서 유용함.
     * Emacs의 유연성: Emacs는 텍스트 편집기 이상의 기능을 제공하며, 특히 Lisp 프로그래밍에 관심이 있는 사람들에게 추천할 만함.
     * Boost.Graph의 제네릭 프로그래밍: Boost.Graph는 제네릭 프로그래밍의 강력한 예시로, 복잡한 알고리즘을 효율적으로 구현하는 방법을 배울 수 있음.
     * Bazel의 효율성: Bazel은 대규모 프로젝트에서 빌드 시스템의 효율성을 극대화할 수 있는 도구로, 특히 Google과 같은 대기업에서 유용함.

   윈도우에서는 everything이 아닐지 ㅎㅎ

   Magit이 얼마나 좋길래 이렇게 명작 소프트웨어 대열에 이름을 올리는걸까요? 이맥스를 안 쓰니 알 수가 없네요.
   Nvim에서는 Neogit가 Magit으로부터 영향을 받았다고 하는데, 그거라도 써봐야할지...

   lazygit 도 추천드립니다 ㅎㅎ

   감사합니다.
   주말에 superfile과 lazygit을 설치해서 구경 좀 해봐야겠어요.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Compiler Explorer:
          + Compiler Explorer는 컴파일러와 성능 최적화에 대한 논의를 크게 변화시켰음.
          + 포럼에서의 논의 품질에 긍정적인 영향을 미침.
          + Bold한 주장들을 링크를 통해 빠르게 검증할 수 있음.
          + llvm-mca와 uiCA 같은 도구도 유용함.
     * Windows 사용에 대한 의견:
          + Windows에 대해 균형 잡힌 시각을 제시함.
          + NT 계열의 Windows는 훌륭한 운영 체제임.
          + 게임을 위해 Windows를 설치해둠.
     * Docker:
          + Docker는 컨설팅 경력 동안 많은 시간을 절약해줌.
          + 오래된 프로젝트를 빠르게 실행할 수 있게 해줌.
          + 여러 데이터베이스 서버를 설치할 필요가 없어짐.
          + Python 환경을 재현 가능하고 병렬로 실행할 수 있게 해줌.
     * Spring Framework:
          + Spring Framework는 의존성 주입 개념을 이해하는 데 방해가 됨.
          + 많은 Java 개발자들이 복잡한 프레임워크가 필요하다고 생각하게 만듦.
          + Spring 자체는 유용하지만, 소프트웨어를 더 복잡하고 덜 이식 가능하게 만들 수 있음.
     * Nix:
          + Nix와 Nixpkgs로 많은 복잡한 작업을 수행할 수 있음.
          + Rust 바이너리의 정적 빌드 등을 쉽게 할 수 있음.
          + 다양한 빌드 옵션과 캐싱 기능을 제공함.
          + Nix는 매우 유용하지만, NixOS는 신중하게 접근해야 함.
     * Emacs:
          + Emacs는 버그 수정 작업을 기술 연습으로 바꿔줌.
          + 지루한 작업을 재미있게 만들어줌.
     * 'Round' 개념:
          + 'Round' 개념은 최소한의 핵심 볼륨으로 최대한의 인터페이스 영역을 제공함.
          + Emacs와 Git의 핵심은 작고 단순하지만 강력함.
     * Magit:
          + Magit은 단순함, 효과성, 발견 가능성의 교과서적인 예임.
          + Git의 기능을 더 잘 노출시켜줌.
          + 자체 용어와 워크플로우를 도입하지 않음.
     * SVN과 Git 비교:
          + SVN 사용 경험은 매우 부정적이었음.
          + Git은 훨씬 더 직관적이고 이해하기 쉬웠음.
          + Git을 사용하면서 작업 흐름이 더 나아짐.
     * Linux, Emacs, Bazel, Magit 사용 경험:
          + Linux에서 Emacs와 Bazel을 사용하여 작업을 수행함.
          + 블로그를 찾아보고, Emacs에서 작업을 저장하고, Magit을 사용하여 커밋 메시지를 작성함.
          + Git 저장소에 푸시함.
"
"https://news.hada.io/topic?id=15038","구인네스 양조장에서 발명된 t-test","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         구인네스 양조장에서 발명된 t-test

기네스 양조장이 발명한 가장 중요한 통계 기법

  기네스 양조장의 혁신

     * 기네스 양조장은 창립자 아서 기네스가 더블린에서 9,000년 임대 계약을 체결한 이후로 혁신적인 방법으로 유명해짐.
     * 수학자 출신 양조사가 질소 가스를 사용해 맥주와 커피에 벨벳 같은 거품을 만드는 화학 기술을 발명함.

  통계적 유의성의 기원

     * 기네스 양조장에서 가장 영향력 있는 혁신은 맥주와 관련이 없고, t-검정이라는 중요한 통계 기법의 탄생지임.
     * t-검정은 과학에서 통계적 유의성을 판단하는 데 자주 사용됨.

  20세기 초의 기네스

     * 20세기 초, 기네스는 세계 최대의 양조장이었고, 품질 관리는 대략적인 눈대중과 냄새 테스트에 의존했음.
     * 글로벌 확장을 위해 기네스는 일관성과 산업 수준의 엄격함을 목표로 품질 관리 접근 방식을 개편함.
     * 연구팀은 다양한 질문에 답하기 위해 실험을 수행함.

  작은 샘플 크기의 문제

     * 연구팀은 작은 샘플 크기로 데이터를 해석하는 문제에 직면함.
     * 예를 들어, 홉 꽃의 품질을 평가하기 위해 무작위 샘플을 테스트했지만, 샘플이 전체 작물을 대표하지 않을 수 있음.
     * 이는 모든 과학적 연구에서 중요한 문제로, 통계적 유의성을 판단하는 데 중요한 역할을 함.

  윌리엄 시일리 고셋과 t-검정

     * 윌리엄 시일리 고셋은 작은 샘플 크기에서도 통계적 유의성을 판단할 수 있는 t-검정을 발명함.
     * t-검정은 작은 샘플 크기에서도 신뢰할 수 있는 결과를 제공함.
     * 고셋은 ""Student""라는 가명으로 연구를 발표했으며, 그의 기법은 오늘날까지 널리 사용됨.

GN⁺의 의견

     * 통계적 유의성의 중요성: t-검정은 작은 샘플 크기에서도 신뢰할 수 있는 결과를 제공해 과학 연구에서 매우 중요함.
     * 산업 품질 관리: 기네스 양조장의 품질 관리 혁신은 다른 산업에서도 적용될 수 있는 중요한 사례임.
     * 역사적 배경: 기네스 양조장의 혁신적인 접근 방식은 오늘날의 과학적 방법론에 큰 영향을 미쳤음.
     * 교육적 가치: t-검정의 발명 과정은 통계학을 배우는 학생들에게 유익한 학습 자료가 될 수 있음.
     * 기술의 발전: 고셋의 t-검정은 현대 통계학의 기초를 마련했으며, 이는 다양한 분야에서 중요한 역할을 함.

        Hacker News 의견

     * Chaim Weizmann: 제1차 세계대전 중 아세톤을 생산하는 박테리아를 개발하여 영국 해군에 기여한 생화학자이며, 그의 공로로 인해 발포어 선언이 탄생함.
     * Gosset와 t-검정: Guinness 양조장에서 경쟁사에게 비밀을 유지하기 위해 ""Student""라는 가명으로 t-검정을 발표한 Gosset의 이야기.
     * AWS와 Gosset: AWS에서 일할 때 Gosset의 실험실 근처에서 일했던 경험을 공유하며, Gosset의 업적이 더 많이 인정받기를 바라는 의견.
     * Guinness의 혁신: Guinness가 당시 Google처럼 직원 복지와 혜택을 제공했으며, 맥주 캔에서 좋은 거품을 내는 장치가 인터넷 발명된 해에 최고의 발명품으로 선정됨.
     * 2019년 발표: 2019년에 Guinness와 관련된 발표를 하며 무대에서 Guinness 맥주를 열었던 경험을 공유함.
     * Gosset의 샘플 크기: Gosset가 작은 샘플 크기에서도 정확한 분포를 찾기 위해 새로운 분포를 세심하게 계산했음을 언급함.
     * 통계와 제조업: 제조업에서 통계 방법이 유용하며, t-검정이 간단하면서도 효과적인 방법임을 강조함.
     * Gosset의 작업: Gosset의 t-검정이 단순히 p-값을 계산하는 것이 아니라 경제적 결정을 내리는 데 중요한 프레임워크임을 설명함.
     * ""How to Measure Anything"": Douglas Hubbard의 책 ""How to Measure Anything""에서 이 이야기가 다뤄지며, 통계와 의사결정 이론에 관심이 있다면 읽어볼 만함.
"
"https://news.hada.io/topic?id=15030","사고 도구의 인지적 설계 (2014) [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       사고 도구의 인지적 설계 (2014) [pdf]
"
"https://news.hada.io/topic?id=15012","자아 인식 이전의 삶에 대한 헬렌 켈러의 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       자아 인식 이전의 삶에 대한 헬렌 켈러의 이야기

Scent of Dawn

  이 블로그에 대하여

     * 홈
     * 블로그 소개
     * 자료
     * 영감을 주는 작가들
          + 샬럿 브론테 (2)
          + 도스토옙스키 (13)
          + 헬렌 켈러 (5)
          + 레오 톨스토이 (1)
          + 마이스터 에크하르트 (4)
          + 니콜라이 베르댜예프 (1)
          + 시몬 베유 (3)
          + 빅토르 위고 (3)
     * 영감을 주는 책들
          + 카라마조프의 형제들 (13)
          + 도스토옙스키: 해석 (1)
          + 중력과 은총 (1)
          + 제인 에어 (2)
          + 레 미제라블 (3)
          + 낙관주의 (2)
          + 교훈의 대화 (4)
          + 내가 사는 세상 (3)
          + 신을 기다리며 (2)
     * 영감을 주는 인물들
          + 미리엘 주교 (3)
          + 조시마 신부 (12)
          + 헬렌 번즈 (2)

  주제

     * 고통 (1)
     * 사후 세계 (2)
     * 고뇌 (1)
     * 동물 (2)
     * 무신론 (1)
     * 각성 (1)
     * 아름다움 (1)
     * 성경 (1)
     * 맹목 (1)
     * 욥기 (1)
     * 어린 시절 (1)
     * 어린이 (1)
     * 그리스도 (3)
     * 기독교 (4)
     * 연민 (4)
     * 용기 (1)
     * 창조 (2)
     * 범죄 (1)
     * 십자가형 (1)
     * 죽음 (2)
     * 낙담 (2)
     * 신의 사랑 (2)
     * 교리 (1)
     * 계몽 (2)
     * 악 (3)
     * 신앙 (3)
     * 신을 찾기 (2)
     * 자유 (2)
     * 기쁨 (1)
     * 신 (2)
     * 신의 용서 (2)
     * 선 (5)
     * 마음 (1)
     * 천국 (2)
     * 지옥 (1)
     * 성스러움 (6)
     * 희망 (3)
     * 겸손 (3)
     * 정체성 (1)
     * 무지 (2)
     * 상상력 (1)
     * 무관심 (1)
     * 내면의 눈 (1)
     * 광기 (1)
     * 고립 (1)
     * 판단 (2)
     * 친절 (2)
     * 지식 (1)
     * 외로움 (1)
     * 사랑 (3)
     * 신을 사랑함 (1)
     * 의미 (1)
     * 기억 (1)
     * 자비 (2)
     * 마음 (1)
     * 현대주의 (2)
     * 인내 (2)
     * 연민 (1)
     * 기도 (1)
     * 자부심 (2)
     * 구원 (1)
     * 휴식 (1)
     * 슬픔 (1)
     * 과학 (2)
     * 신을 찾기 (2)
     * 자의식 (1)
     * 단순함 (1)
     * 죄 (1)
     * 사회 (1)
     * 연대 (1)
     * 영혼 (2)
     * 추측 (1)
     * 정신 (2)
     * 영적 여정 (1)
     * 힘 (1)
     * 고통 (3)
     * 자살 (1)
     * 십자가 (1)
     * 미덕 (1)
     * 비전 (1)
     * 의지 (2)
     * 지혜 (1)

  헬렌 켈러의 글: 영혼의 새벽 이전

    헬렌 켈러의 자아 인식 이전의 삶

     * 헬렌 켈러의 글: ""내가 살고 있는 세상""에서 발췌
     * 내용 요약:
          + 헬렌 켈러는 그녀의 선생님이 오기 전까지 자신이 존재한다는 사실을 몰랐음.
          + 그녀는 의식이 없는 상태에서 살아갔으며, 의지나 지능이 없었음.
          + 그녀는 단순히 본능에 따라 행동했으며, 감각을 통해 세상을 인식했음.

    감각과 자아 인식

     * 감각의 역할:
          + 헬렌 켈러는 촉각을 통해 세상을 인식했음.
          + 그녀는 손가락을 통해 생각하고 욕망을 표현했음.
          + 그녀는 자아 인식이 생기면서 비로소 감각의 가치를 깨달았음.

    자아 인식의 시작

     * 자아 인식의 중요성:
          + 헬렌 켈러는 ""나""와 ""나 자신""의 의미를 이해하면서 생각하기 시작했음.
          + 자아 인식이 생기면서 사랑, 기쁨 등의 감정을 느끼게 되었음.
          + 그녀는 지식을 얻고 이해하며, 반성하는 과정을 통해 성장했음.

    초기 인상과 경험

     * 초기 인상:
          + 헬렌 켈러는 초기 인상을 기억하는 것이 어렵다고 말함.
          + 그녀는 교육이 시작된 후 세상이 생동감 있게 다가왔음.
          + 그녀는 자신의 감정과 생각을 다른 사람들에게서 찾으려 했음.

    감정과 타인의 이해

     * 감정의 이해:
          + 헬렌 켈러는 타인의 감정을 이해하기 위해 노력했음.
          + 그녀는 자신의 감정과 타인의 감정을 비교하며 세상을 이해했음.
          + 그녀는 점차 자신의 세계를 구축했음.

  GN⁺의 의견

     * 헬렌 켈러의 경험은 자아 인식과 감각의 중요성을 강조함.
     * 자아 인식의 과정은 인간의 성장과 발전에 중요한 역할을 함.
     * 감각의 역할은 단순한 생리적 기능을 넘어선 깊은 의미를 가짐.
     * 타인의 감정 이해는 사회적 상호작용과 공감 능력의 기초가 됨.
     * 헬렌 켈러의 이야기는 장애를 극복하고 자아를 찾는 과정에서 큰 영감을 줌.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 교수님의 이야기
          + 한 교수님이 청각 장애인이었던 자신의 경험을 공유함.
          + 일반 학교에서 어려움을 겪다가 수화로 가르쳐준 선생님을 만나면서 복잡한 생각을 할 수 있게 됨.
          + 그녀는 브라질의 두 번째 공식 언어인 수화를 배워서 큰 도움을 받음.
     * 자아와 세계 인식
          + 사람들은 자신의 감정과 생각을 통해 세상을 이해함.
          + 다른 사람들의 감정을 관찰하고 비교하면서 자신의 정체성을 찾음.
          + 인간은 자기 내면을 통해 우주의 의미를 발견함.
     * 손끝의 지성
          + 시각과 청각이 없는 사람은 손끝을 통해 세상을 인식함.
          + 손끝이 뇌와 영혼의 역할을 한다고 생각할 수 있음.
     * 깊이 있는 사고
          + 시각과 청각이 없는 사람이 깊고 명확한 사고를 할 수 있다는 사실이 놀라움.
     * 힌두 철학의 관점
          + 삼키아 철학은 의식이 물질적 구성 요소를 비추는 빛과 같다고 설명함.
          + 자아는 모든 정신적 경험을 개인화함.
     * 데카르트의 철학과 대조
          + 삼키아 철학은 ""나는 생각한다, 고로 존재한다""는 데카르트의 철학과 대조됨.
          + 생각은 자아의 확신에서 비롯됨.
     * 불교와 선의 가르침
          + 불교나 선의 가르침과 유사한 점이 있음.
          + 이마의 수축을 생각으로 인식하는 것이 흥미로움.
          + 의지의 획득과 관련된 결론도 흥미로움.
     * 고차원적 의식
          + 일반 사람들도 상상할 수 없는 고차원적 의식에 깨어날 가능성이 있음.
     * 언어와 의식
          + 언어가 의식을 부여하지만, 헬렌 켈러가 언어를 배우기 전의 감각과 충동을 설명함.
          + LLMs(대형 언어 모델)이 의식을 가질 수 있는 가능성에 대해 탐구함.
          + 로봇의 감각 데이터를 통해 모델을 훈련시키는 방법을 제안함.
     * 헬렌 켈러의 여정
          + 헬렌 켈러의 여정은 시각과 청각 없이 언어를 배우는 과정이 흥미로움.
          + 손가락 철자를 통해 내면의 의식을 형성한 과정이 인상적임.
"
"https://news.hada.io/topic?id=15007","열역학적 자연 경사 하강법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             열역학적 자연 경사 하강법

Thermodynamic Natural Gradient Descent

     * 저자: Kaelan Donatella, Samuel Duffield, Maxwell Aifer, Denis Melanson, Gavin Crooks, Patrick J. Coles
     * 제출일: 2024년 5월 22일
     * 주제: 컴퓨터 과학 > 머신 러닝

  요약

     * 배경:
          + 2차 훈련 방법은 경사 하강법보다 수렴 속성이 좋음.
          + 그러나 대규모 훈련에서는 계산 오버헤드 때문에 잘 사용되지 않음.
          + 이는 디지털 컴퓨터의 하드웨어 제한 때문임.
     * 연구 내용:
          + 자연 경사 하강법(NGD)은 적절한 하드웨어를 사용하면 1차 방법과 유사한 계산 복잡도를 가질 수 있음.
          + 새로운 하이브리드 디지털-아날로그 알고리즘을 제안함.
          + 이 알고리즘은 특정 매개변수 범위에서 NGD와 동등하지만, 비용이 많이 드는 선형 시스템 해결을 피함.
          + 아날로그 시스템의 열역학적 특성을 활용하여 아날로그 열역학 컴퓨터가 필요함.
          + 훈련은 하이브리드 디지털-아날로그 루프에서 발생하며, 주어진 시간 간격에서 기울기와 피셔 정보 행렬(또는 다른 양의 준정치 곡률 행렬)을 계산함.
     * 결과:
          + 분류 작업과 언어 모델 미세 조정 작업에서 최첨단 디지털 1차 및 2차 훈련 방법보다 우수함을 수치적으로 입증함.

  논문 정보

     * 페이지 수: 17 페이지
     * 그림 수: 7개
     * 주제: 머신 러닝 (cs.LG); 신기술 (cs.ET)
     * 인용: arXiv:2405.13817 [cs.LG]

  제출 이력

     * 제출자: Maxwell Aifer
     * 버전: v1, 2024년 5월 22일 16:47:03 UTC (1,674 KB)

  접근 방법

     * PDF 보기: View PDF
     * HTML 보기: HTML (experimental)
     * TeX 소스: TeX Source

  참고 문헌 및 인용

     * NASA ADS: NASA ADS
     * Google Scholar: Google Scholar
     * Semantic Scholar: Semantic Scholar

  코드, 데이터, 미디어

     * 데모: Demos

  관련 논문

     * arXivLabs: About arXivLabs

GN⁺의 의견

     * 하이브리드 디지털-아날로그 접근법:
          + 이 연구는 디지털과 아날로그 컴퓨팅의 장점을 결합하여 계산 효율성을 높이는 방법을 제안함.
          + 특히 대규모 데이터셋을 다루는 머신 러닝 모델 훈련에 유용할 수 있음.
     * 열역학적 특성 활용:
          + 아날로그 시스템의 열역학적 특성을 활용함으로써 기존의 디지털 시스템이 가지는 한계를 극복할 수 있음.
          + 이는 새로운 형태의 하드웨어 개발을 촉진할 수 있음.
     * 실제 적용 가능성:
          + 제안된 방법이 실제로 상용화되기 위해서는 아날로그 열역학 컴퓨터의 개발이 필수적임.
          + 현재의 디지털 컴퓨팅 환경에서 바로 적용하기 어려울 수 있음.
     * 비교 연구 필요:
          + 다른 최신 머신 러닝 훈련 방법들과의 비교 연구가 추가적으로 필요함.
          + 특히, 다양한 데이터셋과 문제 유형에 대한 성능 평가가 중요함.
     * 기술 도입 고려 사항:
          + 새로운 기술 도입 시 초기 비용과 학습 곡선이 높을 수 있음.
          + 그러나 장기적으로는 계산 효율성과 성능 향상을 기대할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 자연 그래디언트 디센트의 주요 포인트
          + 자연 그래디언트 디센트는 2차 방법임.
          + 주요 업데이트 방정식은 ∇̃L(θ) = F⁻¹∇L(θ)로, 선형 시스템을 해결해야 함.
          + 논문에서는 GPU와 병렬로 작동하는 열역학 컴퓨터를 제안함.
          + ""Runtime vs Accuracy"" 그래프는 TNGD 알고리즘의 ""타이밍 모델""을 사용함.
     * 디지털-아날로그 하이브리드 훈련 루프
          + 저자들은 손실 곡면의 곡률을 고려한 하이브리드 디지털-아날로그 훈련 루프를 제안함.
          + 하이브리드 시스템에서 각 반복은 파라미터 수에 비례하는 계산 비용을 가짐.
          + 열역학 법칙을 이용해 AI 모델 훈련의 확장 한계를 극복하는 방법을 찾는 것에 찬성함.
     * 다른 최적화 문제에의 적용 가능성
          + 딥러닝/신경망 훈련과 최적화 결과를 주로 다루지만, 다른 최적화 문제에도 적용 가능할지 궁금함.
          + Extropic 관련 정보를 찾았으나 공개된 API나 소프트웨어 스택 정보는 아직 없음.
          + EDA와 반도체 설계 문제에 관심이 있으며, 열역학 컴퓨팅 스타트업들이 새로운 기술을 제공할 수 있기를 기대함.
     * 딥러닝에서의 유용성에 대한 회의
          + 열역학을 활용한 2차 업데이트 계산은 흥미롭지만 딥러닝에서는 유용성에 회의적임.
          + 기존의 2차 방법들은 ADAM 등 1차 방법에 비해 실용성이 떨어짐.
          + 딥러닝 모델의 비선형 손실 함수 최적화는 낮은 학습률에서만 효과적임.
     * 동물 뉴런 학습 방식에 대한 추측
          + 동물 뉴런이 어떻게 학습하는지에 대한 현재의 최선의 추측은 무엇인지 궁금함.
     * 논문의 매력에 대한 의문
          + 논문을 자세히 읽지 않았지만, SGD와 동일한 복잡성을 가질 것 같음.
          + 오늘날의 큰 모델들은 여러 극값을 가지므로 필요성이 의문임.
     * 시뮬레이티드 어닐링과의 유사성
          + 약 10년 전 AI 수업에서 배운 시뮬레이티드 어닐링을 떠올리게 함.
     * Geoffrey Hinton의 언급
          + 약 1년 전 Geoffrey Hinton이 이에 대해 언급한 적이 있음.
     * 그래디언트 디센트 계산의 빈도
          + 그래디언트 디센트 계산은 매우 빈번하며, 상태/입력이 자주 변경됨.
          + 열 경관을 자주 재설정해야 하므로 속도 향상의 가능성이 의문임.
          + 전자기장을 활용한 방법이 더 나을 수 있음.
     * 아날로그 열역학 컴퓨터의 필요성
          + 아날로그 열역학 컴퓨터가 필요하다는 점에서 의문을 가짐.
          + 훈련된 물리학자의 의견이 필요함.
"
"https://news.hada.io/topic?id=14963","앞으로 모든 코드의 90%는 AI가 작성할 수 있도록 : Cursor","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 앞으로 모든 코드의 90%는 AI가 작성할 수 있도록 : Cursor

     * Cursor는 자연어로 개발할 수 있는 코드 에디터로, 기존 코딩의 어려움을 해결하는 제품
     * Cursor의 주요 기능:
          + Codebase Chat / Apply: 코드베이스에 기반해 수정안을 제시하고, 유저가 승인하면 코드에 자동적용
          + Copilot ++: 기존의 Copilot보다 더 많은 데이터를 학습. Cursor의 예측모델은 정확도가 높음
          + Docs: 특정 프레임워크, 언어 등의 문서 링크를 첨부하면 그걸 학습하고 답변
          + Vision: 복잡한 텍스트 대신 프롬프팅 가능. 컴포넌트 UI를 만들어주기도 함
          + Auto Debug: Cursor 터미널에 내장된 에이전트. 터미널 에러에 어떻게 대처해야하는지 안을 제시
     * Cursor는 모호한 프롬프트로 인한 답변 품질 저하 문제를 해결하기 위해 '프롬프트 디자인' 개념을 도입. 프롬프트 디자인이란, 유저의 프롬프트를 컴퓨터가 한 번 읽고 더 명확하고 간결하게 수정하는 방법.
     * Cursor는 프롬프트에 우선순위를 부여하는 'Priompt' 개념을 정의
     * 프롬프트 길이가 길어지면 중요도가 낮은 부분부터 제거하며 효율화를 진행
     * 이 과정을 통해 문장의 핵심 내용을 유지하면서 할루시네이션 예방에도 도움
     * Cursor의 목표는 VSCode에서 작성되는 코드의 90% 이상을 AI가 작성할 수 있도록 하는 것

   github보다 많은 데이터는 어떻게 구했을지 궁금하네요
"
"https://news.hada.io/topic?id=14904","VC는 당신의 친구가 아니에요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            VC는 당신의 친구가 아니에요

     * 유명한 VC인 제이슨 렘킨이 2개월 전의 날짜가 적힌 스타트업의 발표자료를 보고 투자를 거절했음
          + Cold email로 들어온, 괜찮아 보이는 deal이었음에도
     * 트위터와 링크드인에서 많은 사람들이 이에 대해 분노를 표출했음
     * 하지만 그는 잘못한 것이 없으며, 대부분의 창업자들이 VC와의 관계에 대해 잘못된 기대를 가지고 있다는 점을 설명하고자 함

신호와 경고(Signaling과 red flags): VC는 인치의 게임(Game of Inches)을 함

     * 창업자 입장에서는 끔찍해 보일 수 있으나 투자자 입장에서 보면,
          + VC는 매주 10~50개의 deck을 받음
          + 그 중 10%는 매우 핫한 딜로, 덱 없이도 자금을 조달할 수 있음
          + 나머지 90%는 일반적인 창업자로, 가능한 한 빨리 제거 대상이 됨
     * VC는 맥락이 없는 cold email에 의존하기에 미세한 신호에 의존함
          + ""시장 규모가 $200Tn"" -> 창업자가 순진하거나 망상에 빠져 있음
          + 작은 글씨로 많은 텍스트 -> 공감 능력이 부족하고 마케팅 능력이 떨어짐
          + deck이 오래됨 -> 창업자가 세부 사항에 대한 주의가 부족함

플리스 조끼에 속지 말것: VC는 당신의 친구가 아님

     * VC의 말을 들어보면 그들은 친구인 것 같지만, 그것은 브랜드 구축의 일부일 뿐임
          + ""첫번째 투자자가 되고 싶어요"" ""우리는 가치를 더해요"" ""우리는 책임있는 투자자에요"" ""우린 장기적인 안목을 가지고 있어요"" ""우리는 아웃라이어를 지지해요"" 그리고 아주 유명한 ""내가 어떻게 도움이 될 수 있는지 알려주세요"" 라고 말함
          + 사실은 가능한 한 많은 deal을 보고 싶어하며, deck을 거의 열어보지 않아도 ""커버리지 비율""를 높이고, LP에게 성장하는 top funnel을 보여주고 싶어함
     * 창업자, 특히 초보 창업자는 이런 뉘앙스를 잘 모름
          + 조언과 응원, 그리고 돈으로 그들의 여정을 지원해줄 좋은 사람들이 있다고 믿고 싶어함
     * 대부분의 VC는 좋은 사람이고 성실한 전문가이지만, 여전히 자금 배분자임
          + Allbirds 신발, 플리스 조끼, Twitter 쓰레드에 속지 말 것
          + VC는 투자자이며, 수백만 달러를 관리하고, LP에게 보고하며, 기대 수익을 내지 못하면 다음 펀드를 조성하지 못함
          + 당신의 친구가 되고 싶어하지만, 펀드가 우선임

제이슨은 잘못한 것이 없음?

     * 제이슨 렘킨의 글은 진실되고 도움이 된다고 봄
          + cold email을 열어보고, 답장하고, 투자하는 몇 안 되는 사람 중 하나임
          + 투자 결정 과정을 공개적으로 공유하는 것은 드물고 가치 있는 일임
     * 그는 잘못한 것이 없음
          + 선별 과정이 얼마나 무자비하고 편향적일 수 있는지에 대한 감을 창업자들에게 줌
          + 일부 창업자들은 기분 나빠했지만, 더 많은 사람들이 배우고 deck을 조정함
          + 전반적으로 긍정적인 효과가 있음

VC와의 적절한 거리 찾기

     * VC가 deck을 열지 않고, 이메일에 답장하지 않고, 피드백을 제공하지 않는다는 사실을 알게 되면,
       초보(처음) 창업자들은 흥분(펀딩 전)에서 좌절(펀딩 1~2개월 후)을 거쳐 분노(3개월 이상)에 이르는 감정적 여정을 겪음
          + 이는 잘못된 기대 때문임
     * VC는 당신의 선생님이나 관리자도 아니며, 피드백을 제공하거나 이메일에 답장할 의무도 없음
          + 그들은 당신에게 두번째 기회를 주지 않으며, 다음에는 더 잘하라고 코칭해주지도 않음
     * VC를 판매 잠재 고객(Sales Prospect)으로 생각할 것
          + 그는 10번이나 피칭을 받아 질려 있으며, 비합리적이고 요구도 많음
          + 거래를 성사시키려면, 특히 ""거의 다 된"" 거래인 경우에는 최선을 다해야 함
     * 물론 VC를 위한 벨리댄스가 적성에 맞지 않는다고 판단되면, Bootstrapping과 같은 다른 경로를 택할 수도 있음. 아주 합리적인 선택임
     * 단순하게 기억할 것: ""VC는 창업자의 가장 친한 친구가 되기 전에 투자 전문가임""
"
"https://news.hada.io/topic?id=14938","OpenAI 이사회가 옳았다 (Sam Altman CEO의 해고 관련)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                OpenAI 이사회가 옳았다 (Sam Altman CEO의 해고 관련)

사소한 일에서도, Sam은 일관되게 솔직하지 않음

     * 일주일 전, OpenAI는 새로운 데모를 공개했음. 이 데모는 영화 _Her_에서 Scarlett Johansson이 연기한 AI 에이전트 캐릭터를 연상시키는 섹시하고 숨소리가 섞인 목소리를 특징으로 했음.
     * 많은 사람들이 이에 대해 열광했음. (일부는 성차별 문제를 걱정했지만, 이는 다른 이야기임. 물론 이 데모는 광고된 대로 결코 견고하게 작동하지 않을 것이라는 점도 다른 이야기임.)

반발이 일어남

     * 몇일전 반발이 일어났음. 너무 많은 사람들이 우연의 일치를 눈치챘고, 모두가 행복하지는 않았음.
     * 일부는 Scarlett Johansson이 보상을 받았는지 궁금해했음. 오늘, 압박을 받은 OpenAI는 ScarJo와 유사한 목소리를 철회하며, 유사성이 순전히 우연의 일치라고 주장했음.
     * 이는 완전히 헛소리임. 그리고 명백히 반박할 수 있는 헛소리임.

Sam의 행동

     * Sam 자신이 데모 몇 시간 후에 영화 _Her_에 대한 언급을 자랑스럽게 게시했음.
     * Sam의 캡스 락이 어떻게 되었는지 모르겠지만, ScarJo와의 유사성이 ""우연""이라는 주장은 거짓임. Sam은 캐릭터가 어떤 소리를 내는지 완벽히 알고 있었음.

Scarlett Johansson의 반응

     * 몇 시간 후, Scarlett Johansson 자신(공보를 통해)이 NPR의 기자 Bobby Allyn에게 더 치명적인 성명을 보냈음.
     * Scarlett의 주장은 9월로 거슬러 올라가며, 이는 사실로 확인됨.
     * 그들은 의도적이지 않았다고 말했지만, 물론 의도적이었음. Sam은 자신의 ""her"" 트윗을 삭제하고 싶지 않을지 모르지만, 600만 명이 그것을 보았음. 그리고 우연의 일치라는 주장은 죄책감의 표시임.

동의의 문제

     * 이 모든 것은 동의에 관한 것임. 예술가와 작가, 배우들은 자신의 작품이 허락 없이 사용되는 것을 원하지 않음. 그들의 작품을 사용하고 싶다면, 보상하고 허락을 받아야 함.
     * 그들이 ""아니오""라고 말하면, 아니오라는 의미임.
     * Scarlett은 ""아니오""라고 말했음.
     * 그러나 Sam은 멈추지 않았음.

Toni Thai의 의견

     * 영화 제작자 Toni Thai는 이렇게 말했음:
     * Sam은 오랫동안 많은 것을 피했지만, 사람들은 이제 속임수를 간파하기 시작했음. 오늘 아침에 실시한 (과학적이지 않은) 설문조사 결과:
     * 나도 다수와 같은 의견임. OpenAI에서는 스핀(왜곡)이 일상이며, 진실을 말하는 것은 아님.

Casey Newton과 Michelle Rempel Garner의 의견

     * Casey Newton도 이를 알아챘음:
     * 캐나다 의원 Michelle Rempel Garner도 마찬가지였음:

Sam의 일관되지 않은 솔직함

     * (이제 교체된) 이사회는 11월에 Sam을 해고한 이유가 그가 일관되게 솔직하지 않았기 때문이라고 말했음. 나는 그가 OpenAI 주식에 대해 상원에서 거짓말을 한 것을 보았고, 이사회는 Helen Toner에 대한 그의 거짓말을 보았으며, 이제 우리는 Scarlett Johansson에 대한 그의 당황스러운 거짓말을 보았음.
     * 이는 패턴임.

Gary Marcus의 결론

     * Gary Marcus는 충분히 보았으며, 새로운 OpenAI 이사회가 Sam의 행동이 인류를 돕겠다고 약속한 비영리 단체에서 기대할 수 있는 것과 일치하지 않는다는 것을 인식하기를 바람.

GN⁺의 의견

     * 이 기사는 AI 기술의 윤리적 문제와 관련된 중요한 논의를 제기함. 특히, 예술가와 배우의 동의 없이 그들의 목소리나 이미지를 사용하는 것은 법적, 윤리적 문제를 야기할 수 있음.
     * OpenAI와 같은 대형 AI 기업이 투명성과 신뢰성을 유지하는 것은 매우 중요함. 이는 기술 발전과 사회적 수용성을 위해 필수적임.
     * Sam의 행동은 기업의 신뢰성을 훼손할 수 있으며, 이는 장기적으로 OpenAI의 평판에 부정적인 영향을 미칠 수 있음.
     * AI 기술의 발전은 매우 빠르지만, 그에 따른 윤리적 기준과 법적 규제도 함께 발전해야 함. 이는 기술의 책임 있는 사용을 보장하기 위함임.
     * 다른 AI 프로젝트나 기업들도 유사한 문제를 겪을 수 있으므로, 이러한 사례를 통해 교훈을 얻고 더 나은 윤리적 기준을 마련하는 것이 중요함.

   사리분별도 공사 구분도 못하면서 의욕만 앞서는 CEO에게서 트위터 계정을 빼앗아야하는 또 다른 이유가 되겠네요. 왜 합의도 하지 않은 영화를 언급한건지 이해가 되지 않습니다

   결국 일론이 맞은건가..

   일론이 왜요?

   생각해보니까 결론이 그렇게 되네요ㅋㅋㅋㅋ 어디까지 본건가 일론

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * OpenAI의 기술과 도덕성 문제
          + OpenAI가 인터넷에서 수집한 데이터를 이용해 기술을 개발하고 이를 다시 판매하는 방식에 대해 비판적 시각이 있음. 이는 도덕적 문제를 야기할 수 있음.
     * 영화 'Her'와의 연관성
          + Scarlett Johansson의 목소리를 사용하지 않고 다른 성우를 고용한 것은 법적으로 문제가 없지만, 도덕적으로는 논란의 여지가 있음. 문화적 영감은 중요하지만 표절은 피해야 함.
     * 법적 대응
          + OpenAI가 허락 없이 'Sky' 목소리를 사용한 것에 대해 법적 대응이 있었고, 결국 OpenAI는 해당 목소리를 삭제함.
     * 성우 업계의 관행
          + 유명 성우가 거절할 경우, 유사한 목소리를 가진 성우를 고용하는 것은 일반적인 관행임. 법적으로는 문제가 없지만 도덕적으로는 논란이 될 수 있음.
     * 목소리 유사성에 대한 의견
          + 'Sky' 목소리가 Scarlett Johansson과 유사하다는 의견이 있지만, 세부적인 톤 변화에서는 차이가 있음.
     * Sam Altman에 대한 신뢰 문제
          + Sam Altman의 발언에 대한 신뢰가 떨어지고 있다는 의견이 있음.
     * 목소리 유사성 논란
          + 'Sky' 목소리가 Scarlett Johansson과 유사하다는 의견이 있으며, 이는 논란의 여지가 있음.
     * Worldcoin 프로젝트와의 연관성
          + Sam Altman이 Worldcoin 프로젝트와도 관련이 있다는 점을 지적하며, 이는 그의 신뢰성에 영향을 미칠 수 있음.
     * 목소리 소유권 문제
          + 특정 성우의 목소리가 유명인의 목소리와 유사하다는 이유로 사용이 제한될 수 있는지에 대한 논란이 있음. 이는 복잡한 법적 문제를 야기할 수 있음.
     * 개인의 목소리와 얼굴 보호
          + 유명인뿐만 아니라 모든 개인의 목소리와 얼굴이 무단으로 복제되는 것은 우려할 만한 문제임. 이는 개인의 프라이버시와 관련된 중요한 사안임.
"
"https://news.hada.io/topic?id=15032","손상된 스발바르 케이블의 모습","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            손상된 스발바르 케이블의 모습

손상된 스발바르 케이블의 모습

  문제의 원인

     * 경찰 이미지에 따르면 스발바르 섬의 광섬유 케이블은 압력 손상을 입었음.
     * 강철 갑옷의 틈이 케이블 자체를 노출시켰음.
     * 전류를 운반하는 층의 보호가 약해져 접지 결함이 발생했음.

  손상된 케이블의 모습

     * 외층이 벗겨지고 강화층이 손상됨.
     * 2022년 1월 7일 밤에 손상된 후의 케이블 모습이 처음으로 공개됨.

  손상의 원인

     * 케이블의 구리층이 바닷물과 접촉하게 되어 전류가 바로 접지로 흘러 케이블이 작동을 멈췄음.
     * 경찰은 처음에 인간 활동으로 인한 손상이라고 추정했지만, 증거 부족으로 조사를 중단했음.

  전문가 의견

     * 여러 전문가들이 사진을 평가한 결과, 케이블이 압력에 의해 손상된 것으로 판단됨.
     * 한 전문가는 닻이나 트롤이 케이블을 긁거나 눌렀을 가능성을 제기함.

  경찰 조사 결과

     * 경찰의 기술 보고서도 '압착 손상'을 가능한 원인으로 지목함.

  케이블 손상 지역

     * 케이블이 손상된 지역에서는 주기적으로 트롤링 활동이 활발함.
     * 트롤 도어가 케이블을 눌러 손상시킬 가능성이 있음.

  해저 케이블의 취약성

     * 스발바르와 본토를 연결하는 중요한 케이블은 손가락 두께에 불과함.
     * 강철 와이어로 보호되지만 여전히 취약함.
     * 케이블 손상은 전 세계적으로 자주 발생함.

  다른 케이블 손상 사례

     * 2023년 10월 8일, 핀란드와 에스토니아를 연결하는 통신 케이블과 가스 파이프라인이 손상됨.
     * 에스토니아 당국은 손상이 닻에 의해 발생했다고 결론지음.

  40시간의 복구 작업

     * Space Norway의 컨설턴트 Jens Olav Frorud는 손상된 케이블을 찾아 복구하는 작업에 참여함.
     * 40시간 만에 손상 부위를 발견하고 복구 작업을 진행함.

  해저 케이블의 중요성

     * 스발바르 케이블은 노르웨이의 우주 인프라와 국제적 의무에 중요한 역할을 함.
     * 해저 케이블의 취약성을 보여주는 사례로, 유럽과 다른 대륙에서도 중요한 문제로 인식됨.

GN⁺의 의견

     * 해저 케이블의 손상은 통신 인프라에 큰 영향을 미칠 수 있음. 특히 외딴 지역에서는 대체 경로가 부족해 문제가 심각해질 수 있음.
     * 트롤링과 같은 인간 활동이 해저 케이블에 미치는 영향을 줄이기 위한 규제와 보호 조치가 필요함.
     * 해저 케이블의 손상 원인을 정확히 파악하기 위해 더 많은 기술적 조사와 연구가 필요함.
     * 다른 유사한 사례를 통해 해저 케이블의 보호와 복구 방법을 개선할 수 있음.
     * 해저 케이블의 손상은 국가 안보와도 직결될 수 있어, 이에 대한 대비책이 중요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * ""The critically important cable that connects Svalbard to the mainland is no thicker than a pinkie finger""
          + 놀라운 사실임. 이 케이블이 얼마나 많은 데이터를 전송할 수 있는지 궁금함.
          + 위키피디아에 따르면 각 구간의 속도는 10Gbps이며, 미래에는 2,500Gbps까지 가능함.
          + NASA가 이 시스템을 지원했다는 사실도 있음.
     * Norwegian police use evidence markers with inches printed on them
          + 노르웨이 경찰이 인치 단위로 표시된 증거 마커를 사용함. 해당 회사는 센티미터 마커도 판매함.
     * Fisherman in Canada cutting a fibre optic line
          + 캐나다에서 어부가 지도 무시하고 어망으로 광섬유 케이블을 자른 사례가 있음.
          + 전기 증폭기를 위한 전기가 없는 단거리 라인일 가능성이 높음.
          + 어부가 케이블을 두 번이나 전기 톱으로 자름.
     * Historical mischief with cables
          + 역사적으로 케이블과 관련된 장난이 많았음.
          + 예를 들어, 미국의 스파이 잠수함이 중국과의 해저 전쟁을 위해 건조됨.
     * Trawler fishing and its ecological impact
          + 트롤 어업이 허용되는 이유에 대한 의문 제기.
          + 트롤 어업이 해양 생태계에 미치는 파괴적인 영향 강조.
          + 유럽 해안 지역의 해저 서식지의 상당 부분이 트롤 어업으로 인해 물리적으로 교란됨.
          + 트롤 어업과 트롤 어업으로 잡힌 생선의 수입을 금지해야 한다는 의견.
     * Story from ""Blind Man's Bluff""
          + 미 해군 정보국의 한 장교가 소련의 해안선을 따라 케이블 경고 표지판을 찾은 이야기.
          + 미국 잠수함이 소련의 통신 케이블에 도청 장치를 설치함.
     * Sea monster theory
          + 이 사건이 바다 괴물과 관련이 있을 것이라는 의견.
     * Electricity boosting fibre optic signals
          + 전기가 1300km 길이의 케이블을 통해 광섬유 신호를 증폭하는 방식에 대한 궁금증.
          + 검색어 추천 요청.
     * TLDR; it probably wasn’t the Russians, most likely a trawler
          + 요약: 러시아인이 아닌 트롤 어선일 가능성이 높음.
"
"https://news.hada.io/topic?id=15005","구글, 검색에서 이상한 AI 답변을 수동으로 제거하느라 고군분투중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  구글, 검색에서 이상한 AI 답변을 수동으로 제거하느라 고군분투중

     * SNS에서 Google의 새로운 AI 개요 제품이 이상한 말을 하는 예시들로 떠들썩함
          + 사용자에게 피자에 접착제를 바르라고 하거나, 돌을 먹으라고 제안하는 등
     * 이러한 혼란스러운 출시로 인해 Google은 특정 검색에 대한 AI 개요를 수동으로 비활성화하기 위해 분주함
          + 다양한 밈이 게시되면서 사용자가 소셜 네트워크에 게시된 후 곧 사라지는 것을 목격하게 됨

Google의 AI Overview

     * Google은 AI Overview를 1년 동안 테스트해왔음
          + 2023년 5월에 Search Generative Experience로 베타 출시
          + CEO 순다르 피차이는 그 기간 동안 10억 개 이상의 쿼리를 처리했다고 언급
     * 피차이는 또한 AI 답변 제공 비용을 80% 절감했다고 밝힘
          + 하드웨어, 엔지니어링 및 기술적 돌파구에 의해 이루어짐
          + 그러나 이러한 최적화가 기술이 준비되기 전에 너무 일찍 이루어졌을 가능성이 있음

AI 품질 문제

     * 한 AI 창업자는 Google이 이제 저품질 출력을 내놓는 것으로 알려져 있다고 언급함
     * Google은 AI 개요 제품이 주로 ""고품질 정보""를 제공한다고 주장
          + Google 대변인 메건 판스워스는 이메일을 통해 일부 쿼리에 대한 AI 개요를 제거하기 위해 신속한 조치를 취하고 있다고 확인해줌
          + 이러한 예시를 사용하여 시스템의 광범위한 개선을 개발 중이라고 밝힘

AI 전문가의 의견

     * 뉴욕 대학교의 신경 과학 명예 교수인 Gary Marcus는 많은 AI 회사들이 기술이 80%에서 100%로 갈 것이라는 꿈을 팔고 있다고 언급함
          + 초기 80%는 많은 양의 인간 데이터를 근사화하는 것이 비교적 간단함
          + 마지막 20%는 매우 어려운 과제임
          + 실제로는 인공지능 일반 지능(AGI)이 필요할 수 있음

Google의 경쟁 상황

     * Bing은 Google보다 먼저 AI를 도입함
          + OpenAI는 자체 검색 엔진을 개발 중임
          + 새로운 AI 검색 스타트업은 이미 10억 달러의 가치를 지님
          + 젊은 세대는 최고의 경험을 원하며 TikTok으로 전환 중임
     * Google은 경쟁 압박을 느끼고 있으며, 이는 혼란스러운 AI 출시로 이어짐
          + 2022년 Meta는 Galactica라는 AI 시스템을 출시했으나, 유리 먹기를 권장하는 등 문제로 인해 곧 철회됨

Google의 AI Overview 계획

     * Google은 AI Overview에 대한 큰 계획을 가지고 있음.
          + 현재 기능은 회사가 지난주에 발표한 것의 일부분에 불과함.
          + 복잡한 쿼리에 대한 다단계 추론, AI가 조직한 결과 페이지 생성, Google Lens에서의 비디오 검색 등
     * 그러나 현재 회사의 평판은 기본적인 것들을 제대로 처리하는 것에 달려 있는데, 상황이 별로 좋아보이지 않음

     Gary Marcus - ""[이 모델들은] 근본적으로 자신의 작업에 대한 Saniny Check를 할 수 없는데, 이것이 이 업계의 발목을 잡게 된 것""

GN⁺의 의견

     * AI의 신뢰성 문제: AI 시스템이 자체 작업에 대한 검증을 할 수 없는 구조적 한계가 있음. 이는 사용자에게 잘못된 정보를 제공할 위험이 있음.
     * 경쟁 압박: Google이 경쟁사들로부터의 압박을 느끼고 있으며, 이는 제품 출시의 품질에 영향을 미칠 수 있음.
     * 기술적 도전: AI 기술이 80%에서 100%로 가는 과정은 매우 어려운 과제임. 이는 AI의 한계와 도전 과제를 잘 보여줌.
     * 사용자 경험: 젊은 세대는 최고의 사용자 경험을 원하며, 이는 Google이 지속적으로 개선해야 할 부분임.
     * 다른 대안: AI 검색 엔진을 고려하는 사용자에게는 Bing이나 새로운 AI 검색 스타트업도 좋은 대안이 될 수 있음.

   '많은 AI 회사들이 기술이 80%에서 100%로 갈 것이라는 꿈을 팔고 있다고 언급함'
   이 부분은 저도 항상 하는 생각이네요. AI 세상이 와도 사람이 할 일은 사라지지 않는다는 생각의 근거기도 하구요.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Google의 검색 제안 수동 제거 접근법
          + Google이 과거에 수동으로 검색 결과를 조정하는 대신 알고리즘 자체를 조정하려 했던 사례를 떠올리게 함.
          + 2002년 Froogle 테스트 중 ""running shoes"" 검색 시 정원 요정 조각상이 상위 결과로 나오는 문제 발생.
          + 한 엔지니어가 해당 제품을 구매해 문제 해결. 알고리즘을 변경하지 않고도 올바른 결과를 반환하게 됨.
     * AI의 정확성 문제
          + 초기 80%의 정확성은 비교적 쉽게 달성 가능하지만, 마지막 20%는 매우 어려움.
          + 100% 정확성은 인간도 달성할 수 없는 목표임.
          + 목표는 명백히 어리석은 답변을 줄이는 것임.
          + LLMs(대형 언어 모델)는 좋은 텍스트를 생성하지만, 명백히 어리석은 답변을 제거하는 것이 항상 좋은 것은 아님.
     * Google의 검색 품질 문제
          + Google이 AI 전쟁으로 인해 방향을 잃었다는 논란이 있음.
          + 현재 Google의 검색 결과는 스팸, 클릭베이트, 선전물로 가득 차 있음.
          + 검색 결과가 적어도 널리 인정된 진실을 반영해야 한다고 주장.
          + 명백한 트롤링, 클릭베이트, 악의적인 콘텐츠를 식별하는 것이 중요함.
     * 검색 엔진과 질문 엔진의 차이
          + 검색 엔진은 인터넷을 검색하는 도구이지 질문을 하는 도구가 아님.
          + AI를 통해 무언가를 묻는 것은 인터넷을 검색하는 것과는 다른 작업임.
     * Google의 AI 통합 문제
          + Google이 AI를 통합할 때마다 반복되는 문제 발생.
          + 문제 발생 시 고위 임원이 문제를 해결하겠다고 발표하지만, 같은 문제가 반복됨.
     * Google의 데이터셋 문제
          + 25년 동안 검색 결과를 미세 조정해 온 Google이 좋은 데이터셋을 가지고 있지 않다는 점에 충격을 받음.
          + 오래된 백과사전 CD를 사용해 훈련 데이터를 만드는 것이 필요할 수도 있음.
     * LLM을 활용한 이상한 쿼리 생성 및 테스트
          + Google이 LLM을 사용해 이상한 쿼리를 생성하고 테스트하지 않았다는 점에 실망.
          + 깨끗한 배포에서 얻을 수 있는 이점이 많음.
          + 현재의 AI 경주는 바닥을 향한 경주일 수도 있음.
     * AI의 초기 버전 문제
          + 현재의 AI는 전통적인 검색보다 모든 면에서 더 나쁨.
          + AI가 생성한 이미지의 손가락이 인상적임.
     * LLM의 환각 문제
          + 사람들은 LLM이 가끔만 환각을 일으킨다고 생각하지만, 실제로는 더 자주 발생함.
     * 수동으로 AI 결과 제거의 아이러니
          + 수동으로 잘못된 AI 결과를 제거하는 것이 아이러니함.
"
"https://news.hada.io/topic?id=14946","LANISTR: 구조화 및 비구조화 데이터로부터 학습하기 위한 새로운 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              LANISTR: 구조화 및 비구조화 데이터로부터 학습하기 위한 새로운 프레임워크

   • LANISTR은 비정형(이미지, 텍스트) 및 정형(시계열, 표) 데이터를 섭취하고 정렬 및 융합을 수행하며 궁극적으로 예측을 생성함으로써 다중 모드 학습을 가능하게 하는 새로운 프레임워크이다.

   • 특히 제한된 규모의 데이터 세트에서 훈련할 때 과적합 및 차선 일반화와 같은 문제와 두 개 이상의 양식이 있는 다중 양식 데이터에 일부 양식이 없는 문제를 해결한다.

   • LANISTR의 아키텍처는 모달리티별 인코더와 융합 메커니즘 역할을 하는 다중 모달 인코더-디코더 모듈로 구성되며 교차 주의를 사용하여 교차 모달 관계를 캡처한다.

   • LANISTR 방법론의 핵심은 유니모달 및 멀티모달 수준 모두에 적용되는 마스킹 기반 훈련에 뿌리를 두고 있으며, 두 가지 유형의 사전 훈련 목표, 즉 유니모달 마스킹 목표와 유사성 기반 멀티모달 마스킹 손실이 있다.

   • LANISTR은 몇 가지 어려운 작업에 대한 최첨단 결과를 달성하여 MIMIC-IV 의료 데이터 세트와 아마존 리뷰 데이터 모두에서 경쟁 기준선을 능가한다.

   • 라벨링되지 않은 데이터와 라벨링된 데이터를 함께 사용하여 구조화된 데이터와 비정형 데이터를 학습하는 것의 중요성과 모든 양식을 그대로 적극적으로 섭취하고 감독되지 않은 사전 훈련 동안 많은 양의 라벨링되지 않은 데이터를 활용하며 누락된 양식을 원활하게 처리할 수 있는 능력을 보여준다.

   • LANISTR은 의료 진단 및 소매 수요 예측을 포함한 다양한 영역에서 잠재적인 응용 프로그램을 보유하고 있다.
"
"https://news.hada.io/topic?id=15042","Show GN: 브라우저 없이 빠르게 DeepL 번역기를 사용해 보세요!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: 브라우저 없이 빠르게 DeepL 번역기를 사용해 보세요!

   소개
     * DeepL 번역 API를 이용한 PowerToys Run 플러그인 입니다.
     * 언제든지 빠르게 브라우저 실행 없이 문장을 번역할 수 있습니다.
     * 창 변환 없이 번역이 가능해 작업 시 매우 편리합니다.
     * 변수명 지을 때 매우 편리합니다.

   사용법
    1. alt + space 키를 눌러 PowerToys Run을 실행합니다.
    2. @@{결과 언어 코드} {번역할 언어}를 입력하면 번역된 문장이 출력 됩니다.
    3. 결과를 선택하고 enter를 누르면 클립보드에 추가되어 원하는 곳에 붙여넣기가 가능합니다.

   여담
     * PowerToys가 많은 업데이트를 하면서 편리한 기능이 많이 추가되어 쓸만해 졌습니다.
     * Windows를 사용하고 계신다면 PowerToys를 사용해 보시는 걸 추천드립니다!
     * 많은 관심과 피드백 주시면 감사하겠습니다.

   와! 최근에 PowerToys 찾아서 무척 잘 활용하고 있었는데, 덕분에 활용도가 더 올라가겠네요.ㅎㅎ 잘 쓰겠습니다!
"
"https://news.hada.io/topic?id=14958","Kotlin 2.0.0 주요 변경사항","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Kotlin 2.0.0 주요 변경사항

     * Kotlin K2 컴파일러가 정식 버전이 됨. 기존 컴파일러 대비 성능 향상, 새로운 언어 기능 개발 속도 향상, 멀티플랫폼 프로젝트를 위한 구조 개선 등의 장점이 있음
     * 로컬 변수와 더 넓은 스코프, 논리 or 연산자를 이용한 타입 체크, inline 함수, 함수 타입 프로퍼티, 예외 처리, 증감 연산자 등에서 smart cast 개선됨
     * 멀티플랫폼 프로젝트에서 공통 및 플랫폼 소스 컴파일 시 엄격하게 분리됨. expect/actual 선언에서 가시성 레벨이 다를 수 있게 됨
     * Kotlin/Wasm은 Binaryen을 이용한 최적화 기본 지원, named export 지원, @JsExport 함수에서 unsigned primitive type 지원, JS exception catch 지원 등 개선됨
     * Kotlin/JS는 es2015 컴파일 타겟 추가, suspend 함수를 ES generator로 컴파일, main 함수에 인자 전달, 파일 단위 컴파일, 컬렉션 interop 개선, js-plain-objects 플러그인 등 개선됨
     * Kotlin Multiplatform은 Gradle DSL로 컴파일러 옵션 설정, Compose 컴파일러 플러그인 통합, Kotlin 데이터 폴더 변경, Kotlin/Native 컴파일러 필요할 때 다운로드 등 개선됨
     * 표준 라이브러리의 enum 클래스 values 제네릭 함수 대체, AutoCloseable 인터페이스, 공통 확장 함수 등이 stable로 변경됨

   간단한 (그리고 극단적인) 컴파일러 성능 벤치마크입니다.
   https://github.com/ganadist/kotlin_build_performance
     * 각 프로젝트에 class 200개, 각 class에는 2000개 필드 포함
     * java : 2초
     * kotlin 1.9.24 : 1분 20초
     * kotlin 2.0.0 : 1분 1초

   Macbook Pro M1 Max 에서 확인했습니다.

   위 프로젝트는 좀 극단적인 경우이고, 일반적으로는 kotlin 1.9 대비 2.0의 컴파일 속도가 2배가량 나오는 것 같습니다.
"
"https://news.hada.io/topic?id=14978","TypeScript RPC framework for WebSocket and Worker protocols","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TypeScript RPC framework for WebSocket and Worker protocols

     * TypeScript RPC (Remote Procedure Call) 프레임워크
     * JS 특유의 proxy와 promise 객체 + TS 특유의 타입 시스템을 활용
     * 상대 서버 객체를 내 로컬인 것처럼 tyoe safe하게 사용할 수 있음
     * 웹소켓 프로토콜 지원, NestJS 와도 호환됨
     * 워커도 네트워크처럼 간주하여 RPC 지원
     * 8 년 전에 만들었는데 여전히 유효할 거 같아 재소개

   링크를 잘못 걸었는데, 수정하거나 삭제할 수 없나요?

   https://dev.to/samchon/…

   openapi는 springdocs랑 typescript-generator 조합으로 잘 쓰고 있어서 불만은 없지만 asyncapi의 대안이 될수는 있겠네요. 아직까지 보편화된 sse나 웹소켓에 대한 타입 안전성 지원이 없는게 이상할 노릇입니다. 두개는 전혀 신기술도 아닌데 말이죠

   딱 제 생각이 요러했습니다. 그래서 옛날에 공부삼아 만들었던거 ts backend 만들 일이 생겨 다시 쓰고 있습니다.

   show gn이 어울리지 않을까요?

   아티클 작성한거 show gn 올리면 관리자님이 다시 일반 주제로 바꿔주십니다
"
"https://news.hada.io/topic?id=14993","iTerm2, 코어에서 AI 기능 제거하고 별도의 플러그인 작성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  iTerm2, 코어에서 AI 기능 제거하고 별도의 플러그인 작성

     * 논란이 되었던 AI 기능을 위한 플러그인을 추가
          + 차후에 내부 데이터를 외부로 보내는 기능이 또 필요하다면 이와 비슷한 플러그인 이용 가능
     * 플러그인의 작동 방식
          + 웹 요청을 하는 작은 앱으로, Request JSON을 stdin으로 받아 결과를 stdout에 JSON으로 생성함
          + 플러그인의 목적이 iTerm2와 네트워크 사이에 방화벽을 구축하는 것이기 때문에 AI와 관련된 것은 없음
          + 런타임에 플러그인의 코드 서명 인증서는 각 사용 전마다 확인됨
          + 환경 설정과 통합되어 있기 때문에 많은 UI 관련 내용이 포함되어 있음
     * 최신 빌드에서는 AI 기능을 사용하려고 하면 플러그인 설치를 묻는 메시지가 표시되고, 설치하면 AI 기능 활용 가능

   iTerm2 와 AI 과대 광고 에 해당 이슈가 잘 나와있습니다.

   근데 커밋을 설명하는 문구가 약간 공격적으로 읽히네요. 개발자가 뭔가 이 상황에 대해서 기분이 대단히 나쁜듯

   https://gitlab.com/gnachman/iterm2/-/issues/11470#note_1917647951

   이건가요? 댓글에 특별히 반응이 없는걸로 봐서는 번역톤보다는 기술적으로 알맞지 않은 조직으로 이해하는게 맞을듯 하기도 하고요.

   그 의도였다면 organization with strict requirements 내지는 unsuitable environment 라고 표현하는게 좀더 낫다고 생각합니다. 영영사전을 찾아봐도 딱히 가치판단이 덜 하다거나 한 단어는 아닌 걸로 보입니다

   또한 2번 목표에서 보안에 대한 지적을 AI에 대한 증오라고 표현하는 걸 보면 문맥상으로도 개발자가 화가 난 것으로 보는게 타당하다고 생각합니다

     To allow developers in restrictive but technically incompetent organizations to continue to use iTerm2.

   iTerm2 쓰시는 분들은 빨리 대안을 찾으셔야 할 듯 합니다

   그 설명을 보니 iTerm2를 쓰기 싫어집니다.
"
"https://news.hada.io/topic?id=15013","Diffusion Models의 원리를 설명하는 글","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Diffusion Models의 원리를 설명하는 글

   해당 글에서는 확산 모델(Diffusion Models)에 대한 개요와 그 원리에 대해 설명합니다. 확산 모델은 데이터 분포를 학습하는데 사용되는 기법으로, 주로 이미지 생성에서 활용됩니다.

   기본적으로 확산 모델은 노이즈가 많은 데이터로부터 시작하여 점진적으로 노이즈를 제거해 가며 데이터를 생성하는 방식입니다. 이 과정은 두 가지 단계로 이루어집니다: 전방 확산 과정과 역확산 과정입니다. 전방 확산 과정에서는 데이터를 점차적으로 노이즈가 많은 상태로 변환하고, 역확산 과정에서는 이 노이즈를 점차 제거하여 원본 데이터로 복원합니다.

   이 모델의 학습은 주어진 데이터와 노이즈가 섞인 데이터 사이의 차이를 최소화하는 방향으로 진행되며, 이를 통해 모델은 점차적으로 현실적인 데이터를 생성할 수 있게 됩니다. 이러한 확산 모델은 특히 대규모 데이터셋에서 강력한 성능을 발휘하며, 생성 모델 분야에서 GAN(Generative Adversarial Networks)과 더불어 중요한 기술로 자리잡고 있습니다​.
"
"https://news.hada.io/topic?id=14970","16번 (거미번 (거미)

세계에서 가장 오래 산 거미, Number 16

  장기 모니터링

     * 1974년 3월: 호주 거미학자 바바라 요크 메인(Barbara York Main)이 거미 가족에 대한 장기 연구를 시작함.
     * 연구 초기: 10마리의 거미를 표시하고, 다음 해에 새로운 거미들이 태어났음을 확인함. 이 중 하나가 Number 16임.
     * Number 16의 생활: 다른 덫문 거미들처럼 Number 16은 평생을 같은 굴에서 보냈으며, 굴의 덫문 같은 실크 지붕 위로 걸어다니는 먹이 곤충을 먹고 생존함.
     * 연구 전통: Number 16이 나이가 들면서 메인과 연구팀은 항상 그녀의 굴을 먼저 확인하는 전통을 가짐.
     * 40번째 생일: 연구 보조원 리앤다 메이슨(Leanda Mason)이 거미에게 밀웜을 주고 싶어 했으나, 연구에 방해가 될 수 있어 메인이 이를 거부함.
     * 연구의 연장: Number 16 덕분에 메인의 연구는 예상보다 훨씬 오래 지속됨. 메인은 80대 후반까지 연구를 계속했으나, 건강이 악화되면서 프로젝트를 리앤다 메이슨에게 넘김.

  죽음

     * 2016년 10월 31일: 리앤다 메이슨이 Number 16의 굴이 손상된 것을 발견함. 거미는 사라졌고, 기생 거미 말벌에 의해 죽었을 가능성이 높음.
     * 굴의 상태: 굴의 실크 플러그가 기생 거미 말벌에 의해 뚫린 흔적이 있었음.
     * 연구 결과: Number 16은 죽기 6개월 전까지 살아 있었음. 연구자들은 그녀가 죽었을 때 43세였음을 높은 확신을 가지고 결론지음.
     * 바바라 요크 메인의 상태: 은퇴 후 알츠하이머 병동으로 옮겨짐. 리앤다 메이슨은 2018년에 바바라가 Number 16을 기억하지만 그녀가 죽었다는 사실은 잊어버린다고 언급함.

  GN⁺의 의견

     * 거미의 장수 비결: Number 16의 장수는 덫문 거미의 생활 방식과 환경에 크게 의존함. 이들은 굴에서 거의 나가지 않으며, 외부의 위험으로부터 보호받음.
     * 연구의 중요성: 이 연구는 거미의 생태와 수명에 대한 중요한 데이터를 제공함. 장기적인 모니터링이 얼마나 중요한지 보여줌.
     * 기생 거미 말벌의 위협: 기생 거미 말벌은 덫문 거미에게 큰 위협이 됨. 이는 생태계의 복잡한 상호작용을 이해하는 데 중요한 요소임.
     * 연구의 지속성: 바바라 요크 메인의 연구가 리앤다 메이슨에게 이어진 것은 학문적 전통의 중요성을 보여줌. 이는 후속 연구자들에게 귀중한 데이터를 제공함.
     * 기술적 도전: 장기 모니터링 연구는 많은 시간과 자원이 필요함. 이는 연구자들에게 큰 도전이지만, 그만큼 가치 있는 결과를 도출할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 거미의 복잡한 본능적 행동
          + 거미의 복잡한 행동은 학습되지 않고 DNA에 프로그램되어 있음.
          + 인간도 언어와 감정 학습 능력 등 특정한 본능적 행동을 가지고 있음.
          + 지능을 측정하려면 무엇을 측정할지 선택하는 것이 중요함.
     * 연구 조교의 40번째 생일
          + 연구 조교가 거미에게 밀웜을 주고 싶어 했으나 연구에 방해될까 봐 거절됨.
          + 40년 동안 거미를 관찰한 연구자의 전문성에 감탄.
     * 거미 관련 도서 추천
          + ""Children of Time""이라는 소설 추천.
          + 흥미가 있다면 스포일러 없이 읽어볼 것을 권장.
     * 알츠하이머에 대한 슬픔
          + 마지막 문장이 슬프다는 의견.
          + 알츠하이머에 대한 강한 감정 표현.
     * 거미의 지루함에 대한 궁금증
          + 거미가 99%의 시간을 유휴 상태로 보내는 것이 어떤 느낌일지 궁금해함.
          + 거미도 지루함을 느낄지에 대한 의문.
     * 연구 프로젝트의 긴 시간
          + 연구가 예상보다 오래 걸렸고, 연구자는 프로젝트의 끝을 고대함.
          + The Onion의 ""Expert Wasted Entire Life Studying Anteaters"" 기사와 비교.
     * 거미의 수명과 연구자의 경력
          + 거미가 연구자의 경력보다 오래 살아남은 것이 흥미로움.
          + 말벌의 방해가 없었다면 거미가 얼마나 더 살았을지 궁금해함.
     * 호주 거미학자 Barbara York Main
          + 40년 넘게 매년 연구 현장을 방문한 Barbara York Main에 대한 존경.
          + 오랜 시간 동안 연구를 지속한 과학자들의 헌신에 감탄.
     * 43년 동안의 거미 생활
          + 거미가 43년 동안 살아온 것이 긴 시간이라는 의견.
          + 가장 오래 산 거미에 대한 연구 기사 링크 제공.

   이 요약을 통해 다양한 관점에서 거미와 관련된 흥미로운 사실들을 알 수 있음.
"
"https://news.hada.io/topic?id=14973","iTerm2 와 AI 과대 광고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           iTerm2 와 AI 과대 광고

     * 최근 업데이트에서 iTerm2에 AI 기능 추가됨
          + ""Engage Artificial Intelligence"" 기능: 작성기에 프롬프트를 입력하고 'Edit > Engage Artificial Intelligence'를 선택하면 AI가 명령어를 생성해 줌. OpenAI API 키 필요.
          + ""Codecierge"" 기능: 터미널 내용을 보면서 목표를 설정하고 단계별로 안내해 줌. OpenAI API 키 필요.
     * 명령어 설명을 입력하면 명령어를 생성해주는 텍스트 상자가 있음
          + 이전의 GitHub Copilot for CLI와 유사하지만 터미널에 내장되어 있음
     * 사용 가능한 모델: gpt-3.5-turbo, gpt-4-turbo, gpt-4, gpt-4o
          + gpt-4o는 작동하지 않았지만 gpt-3.5-turbo는 잘 작동함
     * 킬러 기능은 아니지만 가끔 사용하게 될 것 같음 (특히 ffmpeg 명령어 다룰 때)

주요 피드백

     * 하지만, AI 과대 포장에 대한 피로감으로 iTerm2에서 다른 터미널 에뮬레이터로 전환하려는 사람들이 나타남
     * AI는 현재 투자자들과 기술 분야에서 유행하는 밈임
          + Microsoft는 키보드에 AI 버튼을 추가하고, Slack은 메시지로 AI를 훈련시키고, OpenAI는 Scarlet Johansson과 논란 중
          + 도처에 있어서 피곤함
          + AI 분야 최신 기술을 따라잡기 어려움
     * AI 도구의 문제점은 AI 시스템 자체가 매우 불투명하다는 것
          + 입력을 넣으면 출력이 나오지만 어떻게 또는 왜 그렇게 나왔는지 설명할 수 없음
          + AI가 원하는 대로 동작하게 하기 위해 단어 조합을 찾는 부업이 있음
          + 미지의 세계를 들여다보는 것 같지만 수조 달러가 걸려 있음
     * ""명령어 입력"" 기능은 온라인에서 큰 화제가 되고 있음
          + AI 통합이 없는 프로그램으로 전환하는 사람들이 있음
          + 도구에 AI 통합이 될 것이라는 언급만으로도 사람들은 불투명성 때문에 미리 제거함
     * 터미널 에뮬레이터는 개발자 시스템에서 가장 권한이 높은 프로그램 중 하나이기 때문에 이를 구현하기에는 좋지 않은 위치임
          + 모든 비밀을 다루며, 제3자에게 업로드될 수 있다는 위협이 크기 때문에 사람들은 기꺼이 전환함

     Aoi (이 블로그의 가상 캐릭터: 전산과 1학년생 정도의 Idealist )
     * 사용자가 직접 활성화해야 하는 선택적 기능임
     * 직접 API 키를 제공하고 비용을 지불해야 함
     * 기본적으로 활성화되어 있지 않음
     * 그런데 왜 사람들은 이렇게 강하게 반응하는 것일까?

     Cadey (이 블로그의 가상 캐릭터 : 어느 정도 전문지식이 있는 선생님)
     * 사용자가 추가 여부를 결정할 수 있는 권한이 없는 상태에서 도구에 추가되었다는 사실 때문인듯
          + AI 기능을 추가한 커밋을 보면 약 2년 동안 개발된 것으로 보임
          + 최근의 AI 과대 포장 이전부터 진행된 것으로 보임

     * 사람들이 이것을 원하지 않는 이유는 이해함
          + iTerm2에 이것을 넣은 가장 큰 실수는 과대 포장을 한 것과 OpenAI만 옵션으로 제공한 것 (로컬 모델은 불가)
     * Python API를 이용한 선택적 애드온으로 배포했다면 좋았을 것
          + 동일한 이점을 얻으면서 분노한 군중은 없었을 것

   해커 뉴스 댓글에서 봤던 이 기능이 문제가 될 현실적인 이유가,

   보안이 쎈 직장에서 일 할 경우 외부로 뭔가 데이터를 보내는 기능이 내장되어 있는(선택적으로 켜고 끌 수 있다 하더라도) 앱은 원천적으로 설치 불가가 될 수 있음.

   전 warp 을 쓰고 있긴합니다만.... 흠 모르겠네요..ㅎㅎㅎㅎ

   아 어쩐지 요 며칠간 iterm 대신 aracritty나 kitty 설치한다는 제목의 글이 많았군요.

   ""과대 평가"" 정도 일까요?

   우리는 이것을 거품이라고 하죠.

   주식은 거품일지 몰라도 기술은..

   메타버스!

   갑분 메타버스 ?!
"
"https://news.hada.io/topic?id=14981","5년 내 30만 대 항공기 생산","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           5년 내 30만 대 항공기 생산

미국이 5년 동안 30만 대의 비행기를 만드는 방법

  서론

     * 1942년, 캘리포니아 잉글우드에 있는 노스 아메리칸 항공 공장에서 B-25 폭격기가 조립되고 있었음.
     * 미국의 엄청난 산업 생산력이 제2차 세계대전에서 연합군의 승리에 큰 기여를 했음.
     * 1938년부터 1943년까지 미국의 제조업 생산량이 세 배 증가했음.
     * 전쟁 동안 미국은 약 32만 5천 대의 비행기를 생산했으며, 이는 독일, 일본, 이탈리아의 총 생산량보다 많았음.

  항공기 산업의 성장

     * 1937년 미국은 약 3,100대의 항공기를 생산했으며, 대부분이 소형 개인 비행기였음.
     * 전쟁 전 미국의 항공기 생산 가치는 캔 생산 가치의 1/4, 자동차 생산 가치의 3.5%에 불과했음.
     * 1940년 미국 군대는 약 2,665대의 항공기를 보유하고 있었으며, 이는 독일 공군의 1/10에 불과했음.
     * 전쟁 승리를 위해 항공기 산업의 완전한 변혁이 필요했음.

  항공기 산업의 확장

     * 1939년부터 1944년까지 미국의 항공기 생산 가치는 70배 증가했음.
     * 항공기 제조업 고용 인원은 1940년 59,000명에서 1943년 939,000명으로 증가했음.
     * 새로운 대규모 공장이 건설되었으며, 전쟁이 끝날 무렵 항공기 엔진 공장 면적은 1.7백만 평방피트에서 7천5백만 평방피트로 증가했음.

  생산 방식의 변화

     * 항공기 산업은 자동차와 다른 제품에 사용되던 대량 생산 방식을 수정하여 채택했음.
     * 새로운 항공기 개발과 대량 생산은 시간이 많이 걸리는 작업이었음.
     * 영국과 프랑스의 대규모 항공기 주문이 산업을 촉진시켰음.

  초기 확장

     * 1938년과 1939년에 영국과 프랑스는 미국 항공기 제조업체에 대규모 주문을 했음.
     * 1940년까지 영국과 프랑스는 미국 제조업체에 약 6,000대의 항공기를 주문했음.
     * 이 주문들은 미국 항공기 제조업체가 인력을 크게 확장하고 새로운 대규모 공장을 건설할 수 있게 했음.

  대규모 생산 목표

     * 1940년 독일이 서유럽을 침공한 후, 루즈벨트 대통령은 의회에 추가 국방 예산을 요청했음.
     * 루즈벨트는 미국이 연간 50,000대의 항공기를 생산해야 한다고 주장했음.
     * 1941년, 미국은 연간 63,000대의 항공기를 생산할 계획을 세웠음.

  공장 건설

     * 초기에는 항공기 제조업체가 자체적으로 공장을 건설할 수 있을 것으로 기대했음.
     * 그러나 확장 규모가 너무 커서 대부분의 새로운 항공기 공장은 정부 소유, 계약자 운영(GOCO) 시설로 건설되었음.
     * 국방 공장 공사(DPC)는 많은 공장 건설을 자금 지원했음.

  생산의 어려움

     * 전쟁 전 항공기는 소규모, 수작업 방식으로 생산되었음.
     * 항공기는 자동차보다 훨씬 복잡하고, 높은 성능 요구사항을 충족해야 했음.
     * 항공기 제조에는 엄격한 생산 공차와 많은 기계 가공이 필요했음.

  생산 시스템의 개선

     * 항공기 제조업체는 생산 효율성을 높이기 위해 새로운 도구와 작업 보유 시스템을 개발했음.
     * 생산 및 자재 관리 시스템이 개선되었으며, 주요 설계 변경을 공장 바닥에서 통합할 수 있게 되었음.
     * 결과적으로 항공기 제조 시간은 꾸준히 감소했음.

  생산 시스템의 축소

     * 1942년까지 미국은 독일, 일본, 영국, 이탈리아를 합친 것만큼 많은 항공기를 생산했음.
     * 전쟁이 끝난 후, 이 거대한 생산 기계는 해체되었음.
     * 많은 항공기 공장은 다른 용도로 재사용되었음.

  결론

     * 제2차 세계대전 동안 미국의 항공기 제조는 큰 성공을 거두었음.
     * 그러나 이 성공은 많은 조건에 달려 있었음.
     * 미국은 항공기 산업을 확장할 준비가 되어 있지 않았으며, 중형 및 대형 폭격기는 전쟁 후반기에야 대량 생산될 수 있었음.

GN⁺의 의견

     * 항공기 제조의 복잡성: 항공기 제조는 자동차 제조보다 훨씬 복잡하며, 높은 성능 요구사항을 충족해야 함.
     * 대규모 생산의 어려움: 새로운 항공기 개발과 대량 생산은 시간이 많이 걸리는 작업이며, 초기에는 많은 어려움이 있었음.
     * 여성 노동력의 중요성: 전쟁 동안 여성 노동력이 항공기 제조에 큰 기여를 했으며, 이를 위해 생산 공정이 재설계되었음.
     * 생산 시스템의 개선: 전쟁 동안 항공기 제조업체는 생산 효율성을 높이기 위해 많은 개선을 이루었음.
     * 전후 생산 시스템의 축소: 전쟁이 끝난 후, 거대한 생산 시스템은 해체되었으며, 많은 공장은 다른 용도로 재사용되었음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 미국의 WW1 준비 부족
          + WW1 당시 미국은 준비가 부족해 프랑스에서 소총을 빌려야 했음.
          + WW2와 달리, WW1에서는 미국이 무기 제조 대국으로 변신하지 않았음.
          + 중국과의 갈등이 발생할 경우, 미국이 WW2의 성과를 반복할지 확실하지 않음.
     * WW2 동안의 미국 경제 동원
          + WW2 동안 미국 경제를 동원하는 정부의 통제력에 항상 놀라움을 느낌.
          + 공장이 전쟁 물자를 생산하도록 밤새 전환됨.
          + 현대 경제와 공급망이 이러한 급격한 변화를 지원할 수 있을지 의문.
     * 미국의 군수품 생산 문제
          + 현재 미국은 단순한 포탄 생산에도 어려움을 겪고 있음.
          + 러시아는 미국과 EU를 합친 것보다 2-5배 더 많은 포탄을 생산 중임.
     * 미국의 민간 항공기 판매
          + 미국의 민간 항공기가 일본에 직접 판매되어 군용기로 전환됨.
          + 1930년대 후반까지 이 문제가 계속되었음.
          + ""Human Smoke""라는 책을 읽어보기를 권장함.
     * 미국의 산업 생산력
          + WW2에서 미국의 엄청난 산업 생산력이 연합국의 승리에 기여했음.
          + 소련의 기여는 거의 언급되지 않음.
          + 소련은 157,000대의 항공기를 생산했으며, 많은 공장이 시베리아로 대피함.
     * WW1과 WW2의 항공기 생산 비교
          + WW1에서 미국은 20,000대의 항공기를 목표로 했으나, 196대만 실전에 투입됨.
          + WW2 동안 미국의 항공기 생산량은 연간 70배 증가함.
     * 항공기 생산량 평가
          + 항공기 생산량을 무게로 평가하는 것이 흥미로움.
     * 공장 폭격의 영향
          + 공장이 폭격을 받지 않은 것이 생산에 얼마나 도움이 되었는지 궁금함.
     * 롱아일랜드의 산업 유산
          + WW2 동안 주요 산업 지역이었던 롱아일랜드에 거주 중.
          + 높은 암 발생률을 겪고 있음.
     * 미국의 항공기 생산 증가
          + 1941년까지 영국이 미국보다 더 많은 항공기를 생산했음.
          + 1942년부터 미국은 독일, 일본, 영국, 이탈리아를 합친 것만큼 항공기를 생산함.
          + 놀라운 성과임.
"
"https://news.hada.io/topic?id=14921","Uber의 원장 데이터를 DynamoDB에서 LedgerStore로 마이그레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Uber의 원장 데이터를 DynamoDB에서 LedgerStore로 마이그레이션

     * 지난 주에는 Uber의 추가 전용 원장 스타일 데이터베이스인 LedgerStore(LSG)를 탐구했음.
     * 이번 주에는 Uber의 비즈니스에 중요한 원장 데이터를 LSG로 마이그레이션한 방법을 다룰 것
     * 1조 개 이상의 항목(몇 페타바이트의 데이터)을 투명하게 이동시키고 중단 없이 수행한 방법과 그 과정에서 배운 점을 논의

  역사

     * Gulfstream은 Uber의 결제 플랫폼으로, 2017년에 DynamoDB를 사용하여 출시되었음.
     * Uber의 규모에서는 DynamoDB가 비싸졌고, 따라서 12주간의 데이터(핫 데이터)만 DynamoDB에 보관하고 오래된 데이터(콜드 데이터)는 Uber의 blobstore인 TerraBlob에 저장하기 시작했음.
     * 장기적인 솔루션으로 LSG를 사용하고자 했음. LSG는 결제 스타일 데이터를 저장하기 위해 목적에 맞게 설계되었음.
     * LSG의 주요 기능:
          + 검증 가능한 불변성 (암호화 서명을 사용하여 기록이 변경되지 않았음을 확인할 수 있음)
          + 비용 관리를 위한 계층형 스토리지 (핫 데이터는 요청을 처리하기 좋은 곳에, 콜드 데이터는 저장에 최적화된 곳에 보관)
          + 결국 일관성 있는 보조 인덱스의 지연 시간 개선
     * 2021년까지 Gulfstream은 DynamoDB, TerraBlob, LSG의 조합을 사용하여 데이터를 저장했음.
          + DynamoDB: 최근 12주간의 데이터
          + TerraBlob: 콜드 데이터
          + LSG: 데이터를 기록하고 마이그레이션하려는 대상

  왜 마이그레이션을 해야 했는가?

     * LSG는 불변성 때문에 원장 스타일 데이터를 저장하는 데 더 적합함.
     * LSG로 이동함으로써 반복적인 비용 절감이 상당했음.
     * 세 가지 스토리지에서 하나의 스토리지로 전환하면 Gulfstream 서비스의 코드와 설계를 단순화할 수 있음.
     * LSG는 짧은 인덱싱 지연 시간을 약속했으며, Uber의 데이터 센터 내에서 온프레미스로 실행되기 때문에 더 빠른 네트워크 지연 시간을 제공함.

  데이터의 특성과 관련된 위험

     * 마이그레이션하는 데이터는 2017년 이후 Uber의 모든 비즈니스 원장 데이터임:
          + 불변 기록: 압축된 크기 1.2 PB
          + 보조 인덱스: 압축되지 않은 크기 0.5 PB
     * 불변 기록은 수정할 수 없으며, 보조 인덱스 데이터는 문제를 수정하기 위해 수정할 수 있는 유연성이 있음.

  검증

     * 백필이 모든 면에서 올바르고 수용 가능한지 확인하기 위해 현재 트래픽을 처리할 수 있는지와 현재 액세스되지 않는 데이터가 올바른지 확인해야 함.
     * 검증 기준:
          + 완전성: 모든 기록이 백필되었는지
          + 정확성: 모든 기록이 정확한지
          + 부하: LSG가 현재 부하를 처리할 수 있는지
          + 지연 시간: LSG의 P99 지연 시간이 허용 가능한 범위 내에 있는지
          + 지연: 보조 인덱스 생성 지연 시간이 허용 가능한 범위 내에 있는지

  섀도우 검증

     * 마이그레이션 전후의 응답을 비교하여 현재 트래픽이 데이터 마이그레이션 문제나 코드 버그로 인해 방해받지 않도록 함.
     * 섀도우 검증을 통해 백필이 최소 99.99% 완전하고 정확한지 확인했으며, 상한선은 99.9999%로 설정함.
     * 섀도우 검증은 LSG가 프로덕션 트래픽을 처리할 수 있는지 확인하고, 데이터 접근 코드에 대한 신뢰를 제공함.
     * 섀도우 검증은 현재 액세스 중인 데이터의 완전성과 정확성에 대한 신뢰를 제공함.

  오프라인 검증 및 증분 백필

     * LSG의 전체 데이터를 DynamoDB의 데이터 덤프와 비교함.
     * 오프라인 검증은 데이터 백필이 올바르게 수행되었는지 확인하고, 전체 데이터를 다룸.
     * 오프라인 검증은 섀도우 검증과 함께 수행되어야 함.

  백필 문제

     * 모든 백필은 위험함. Uber의 Apache Spark를 사용하여 백필을 수행함.
     * 문제 해결 방법:
          + 확장성: 작은 규모로 시작하여 점진적으로 확장함.
          + 증분 백필: 데이터를 작은 배치로 나누어 백필함.
          + 속도 제어: 백필 작업의 속도를 조절함.
          + 동적 속도 제어: 현재 시스템 상태를 모니터링하여 속도를 조절함.
          + 긴급 중지: 과부하가 의심될 경우 백필을 빠르게 중지할 수 있는 기능을 제공함.
          + 데이터 파일 크기: 데이터 덤프 파일 크기를 적절하게 유지함.
          + 내결함성: 데이터 품질/손상 문제를 처리함.
          + 로깅: 로그를 제한하여 로깅 인프라에 부담을 주지 않음.

  위험 완화

     * 다양한 검증 및 백필 통계 데이터를 분석하고 LSG의 롤아웃을 보수적으로 진행함.
     * 초기에는 백필이 실패할 경우 DynamoDB에서 데이터를 가져오는 폴백을 사용함.
     * 폴백 로그를 확인하여 LSG에서 데이터가 실제로 누락되지 않았는지 확인함.

  결론

     * 이 기사에서는 대규모 비즈니스에 중요한 원장 데이터를 한 데이터 저장소에서 다른 데이터 저장소로 마이그레이션하는 과정을 다루었음.
     * 마이그레이션 기준, 검증, 백필 문제 및 안전성 등 다양한 측면을 다루었음.
     * 2년 동안 중단이나 장애 없이 마이그레이션을 완료했음.

  GN⁺의 의견

     * 데이터 마이그레이션의 중요성: 대규모 데이터 마이그레이션은 복잡하고 위험이 따르지만, 비용 절감과 시스템 단순화를 통해 장기적으로 큰 이점을 제공함.
     * 섀도우 검증의 유용성: 섀도우 검증은 실제 트래픽에 영향을 주지 않으면서 데이터의 완전성과 정확성을 확인할 수 있는 강력한 도구임.
     * 오프라인 검증의 필요성: 섀도우 검증만으로는 드러나지 않는 문제를 발견할 수 있기 때문에 오프라인 검증도 필수적임.
     * 백필의 단계적 접근: 백필 작업은 작은 배치로 나누어 단계적으로 수행하는 것이 시스템 과부하를 방지하는 데 효과적임.
     * 긴급 중지 기능: 백필 작업 중 문제가 발생할 경우 빠르게 중지할 수 있는 기능은 시스템 안정성을 유지하는 데 중요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 2 billion rides per quarter
          + Uber가 분기마다 20억 건의 라이드를 처리함. 이는 초당 약 1000건의 거래로 환산될 수 있음. 인프라 확장에 왜 그렇게 신경 쓰는지 이해하기 어려움.
     * Using DynamoDB poorly
          + Uber가 DynamoDB를 잘못 사용하고 있었음. 특정 중요한 사용자 여정(CUJ)에는 강력한 일관성이 필요하고, 과거 거래를 위한 데이터 웨어하우징이 필요함. DynamoDB와 Redshift 아키텍처로 전환하지 않은 것이 이상함.
     * Google rejects
          + Uber가 구글에서 실패한 프로젝트를 가져온 것 같음. 이런 프로젝트는 보통 큰 승진을 목표로 함. ""자체 시스템 설계 및 구축으로 $Xm 절감! 승진해줘!"" 같은 식으로. 하지만 구축 비용이 더 많이 들고, 몇 년 후에는 폐기될 가능성이 큼.
     * SQLite on a single server
          + 1.7 페타바이트의 데이터(1조 개의 인덱스된 레코드)를 한 대의 고성능 베어메탈 서버에 SQLite로 저장할 수 있을지 궁금함. 예시 링크 제공.
     * LedgerStore not open source
          + LedgerStore는 오픈 소스가 아님. 관련 정보를 찾으려면 Uber 블로그 게시물을 따라가야 함. 2021년 게시물 링크 제공.
     * Era of custom infrastructure
          + 2015년경 넷플릭스, 스포티파이, 사운드클라우드, 우버 등 많은 기술 회사들이 인프라와 데이터베이스 도구를 많이 구축했음. 요즘은 AWS/클라우드 용어로 이야기하는 엔지니어들이 많음. 여전히 도구를 구축하는 조직을 보는 것이 신선함.
     * Expensive proprietary cloud
          + 독점 클라우드 기반 데이터 저장소가 얼마나 비싼지 잘 보여주는 예시임. 다른 것으로 마이그레이션하는 것이 가능함.
     * Considered TigerBeetle?
          + TigerBeetle을 고려했는지 궁금함.
     * DynamoDB is expensive
          + 이 프로젝트의 경제성은 모르겠지만, DynamoDB는 정말 비쌈. 다른 사람들이 잘못 사용하고 있다고 생각했지만, 분산 해시 테이블로 사용해도 여전히 큰 비용이 듦.
     * Cost of running the team
          + 프로젝트 팀 운영 비용이 절감액(600만 달러)과 크게 다르지 않을 것 같음. 유지보수 비용도 추가됨. 결제 시스템은 장기적인 베팅이 아닐 가능성이 큼. 왜 이런 프로젝트를 진행하는지 흥미로움. 이미 있는 엔지니어링 팀과 관련된 매몰 비용일 수도 있음.
"
"https://news.hada.io/topic?id=15022","Tmux는 "더 나쁜 것이 더 좋은 것"임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Tmux는 ""더 나쁜 것이 더 좋은 것""임

tmux는 더 나은 선택인가

  tmux 소개

     * tmux는 ""terminal multiplexer""의 약자로, 터미널을 여러 개의 독립적인 셸로 분할할 수 있게 해줌
     * OpenBSD에 기본적으로 설치되어 있음
     * SSH를 자주 사용하는 프로그래머에게 유용함
     * 그래픽 환경 없이 화면을 분할할 수 있음
     * 디지털 미니멀리즘을 추구하는 사람들에게 적합함

  Kovid Goyal의 의견

     * Kovid Goyal은 ePub 소프트웨어 calibre와 터미널 에뮬레이터 Kitty의 개발자임
     * Goyal은 tmux를 좋아하지 않음
     * 그의 FAQ에서 tmux에 대한 부정적인 의견을 밝힘
          + 터미널 멀티플렉서는 불필요한 오버헤드를 추가함
          + 복잡성 증가로 인해 성능 저하가 발생함
          + 에너지와 성능 측면에서 비효율적임
          + 생태계 전체에 부정적인 영향을 미침

  개인적인 사용 경험

     * 필자는 집에서는 UNIX를 사용하고, 직장에서는 Windows를 사용함
     * 여러 번 SSH를 사용해야 하는 상황에서 tmux를 자주 사용함
     * tmux는 다양한 터미널 에뮬레이터에서 작동 가능함
     * Kitty는 원격 접속하는 시스템에서 작동해야 함

  ""Worse is better"" 철학

     * ""Worse is better""는 소프트웨어 철학이라기보다는 제품 관리 철학에 가까움
     * 소프트웨어의 핵심 기능을 가장 일반적인 사용 사례에 맞춰 최적화하는 것이 중요하다고 강조
     * 필자는 개인적으로 VM을 좋아하지만, 실제로는 tmux를 더 자주 사용함

  결론

     * 필자는 주로 Windows에서 원격 접속을 사용함
     * tmux의 단축키를 외우고 있음
     * Kitty의 단축키도 훌륭하지만, tmux가 더 유용함

GN⁺의 의견

     * tmux는 SSH를 자주 사용하는 개발자에게 매우 유용함. 특히, 여러 셸을 동시에 실행할 수 있는 기능은 큰 장점임.
     * Kovid Goyal의 의견처럼, 터미널 멀티플렉서가 성능에 영향을 미칠 수 있지만, 대부분의 사용자는 그 이점을 더 중요하게 생각할 것임.
     * Kitty와 같은 터미널 에뮬레이터는 더 나은 성능을 제공할 수 있지만, tmux의 범용성과 편리함을 대체하기는 어려움.
     * 디지털 미니멀리즘을 추구하는 사람들에게 tmux는 매우 매력적인 도구임. 그래픽 환경 없이도 강력한 기능을 제공함.
     * tmux와 Kitty를 함께 사용하면, 각 도구의 장점을 최대한 활용할 수 있음. 예를 들어, Kitty를 로컬에서 사용하고, 원격 서버에서는 tmux를 사용하는 방식이 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * ""키 입력을 두 번 파싱하는 것이 CPU 사이클을 낭비하고 배터리를 소모하는 주요 원인이라고 생각하지 않음. Kitty가 tmux의 기능을 대부분 내장하고 있지만, SSH 작업을 하는 사람들에게는 큰 도움이 되지 않음. 터미널 에뮬레이터에 모든 것을 묶는 것은 불필요한 기능 추가로 보임.""
     * ""tmux를 실제로 필요로 하는 이유는 원격 지속성 때문임. 서버 연결이 끊어져도 vim 세션을 잃고 싶지 않음.""
     * ""tmux의 킬러 기능은 쉘뿐만 아니라 작업 공간을 지속시키는 것임. Kitty와 screen은 이 문제를 해결하지 못함. 터미널 에뮬레이터 기반의 작업 공간 지속성이 있다면 tmux를 버릴 것임.""
     * ""Kitty의 개발자인 Kovid Goyal은 tmux를 좋아하지 않음. Kitty는 tmux의 기능을 대부분 포함하고 있지만, 원격 지속성은 제공하지 않음. 터미널 에뮬레이터에 의존하면 다른 에뮬레이터로 전환할 때 새로운 근육 기억이 필요함.""
     * ""기본적인 screen이나 tmux 사용법(시작, 창 생성 및 전환, 연결 재설정)은 서버에 SSH 접속이 필요한 사람의 도구 키트에 포함되어야 함. 특히 스타트업에서는 시스템을 이해하고 창의적이고 효율적으로 작업할 수 있어야 함.""
     * ""~/.ssh/config에 설정을 추가하여 SSH 세션을 단일 연결로 다중화할 수 있음. 첫 번째 세션에 지문 인증을 사용하고, 이후에는 300초 동안 인증 없이 연결 가능함. Tailscale을 통해 오프라인 상태에서도 세션을 유지할 수 있음.""
     * ""SSH의 가장 큰 가치는 긴 작업이 연결 끊김에도 불구하고 지속될 수 있다는 점임. 긴 다운로드 작업이 거의 끝나갈 때 연결이 끊기는 것은 매우 좌절스러움.""
     * ""Windows에서 호스트 OS로 사용하고 Linux에서 작업함. tmux를 사용하여 여러 쉘을 실행함. 성능 문제는 있지만, 생산성 측면에서 매우 유용함.""
     * ""원격 SSH를 위해 .ssh/config 설정을 사용하여 자동으로 원격 tmux를 시작함. 불안정한 연결에서도 작업을 저장할 수 있음. tmux를 매일 사용하며 다른 대안을 찾지 못함.""
     * ""Kovid의 의견이 기술적으로 맞을 수 있지만, 사용성 측면에서는 틀림. 사용자는 삶을 더 간단하게 만드는 것을 선호함. zellij를 시도했지만 tmux로 돌아옴. tmux는 진입 장벽이 낮음.""
"
"https://news.hada.io/topic?id=14950","유출된 OpenAI 문서, 전직 직원들에 대한 공격적 전술 드러나","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  유출된 OpenAI 문서, 전직 직원들에 대한 공격적 전술 드러나

OpenAI의 고압적인 전술

     * 금요일에 Vox는 기술 대기업 OpenAI의 직원들이 회사를 떠나려 할 때 광범위하고 매우 제한적인 퇴사 문서에 직면했다고 보도함.
     * 직원들이 서명을 거부하면 회사에서 이미 취득한 주식 지분을 잃을 수 있다는 위협을 받았다고 함.
     * 이 정책은 전 직원들이 이미 벌어들인 수백만 달러를 포기하거나 회사를 비판하지 않겠다는 약속을 해야 하는 상황에 놓이게 했음.

사내 반응과 사과

     * 이 뉴스는 OpenAI 내부에서 큰 파장을 일으켰음.
     * CEO 샘 알트만은 사과문을 게시하며, ""우리는 결코 누구의 취득한 지분을 회수하지 않았으며, 앞으로도 그렇게 하지 않을 것""이라고 밝힘.
     * 그러나 회사 문서에는 알트만과 다른 고위 임원들의 서명이 포함되어 있어 그들의 주장을 복잡하게 만듦.

OpenAI의 고압적인 전술

     * Vox가 검토한 문서에 따르면 전 직원들이 초고압적인 비방 금지 및 비밀 유지 계약에 서명하도록 강요받았음.
     * 문서들은 전 직원들이 법률 자문을 구할 시간을 거의 주지 않았음.
     * 전 직원들이 추가 시간을 요청했을 때 OpenAI는 강하게 반발했음.

OpenAI의 강경한 태도

     * 공개 회사와 달리 OpenAI는 직원들에게 주식을 판매할 기회를 기다려야 함.
     * OpenAI는 제한적인 계약에 서명하지 않으면 미래의 주식 판매 기회에서 제외될 것이라고 경고함.
     * 전 직원들은 회사가 법적 보복을 할 수 있는 여러 방법을 가지고 있다고 우려함.

왜 중요한가

     * OpenAI는 높은 기준을 준수해야 하는 회사로 자리매김해왔음.
     * 그러나 최근 사건들은 회사의 투명성과 책임성에 대한 의문을 제기함.
     * OpenAI는 전 직원들에게 비방 금지 의무를 해제하고, 퇴사 문서에서 비방 금지 조항을 제거하겠다고 약속함.

이 기사를 보도한 이유

     * 보도는 많은 지루한 순간들로 가득 차 있지만, 가끔씩 ""우와(woah)"" 하는 순간이 생김. 이 기사를 보도하면서 세 번의 중요한 ""우와"" 순간이 있었음.
     * 첫 번째 ""우와"" 순간은 직원 해고 계약서를 검토하면서 발생함. 계약서에는 엄격한 계약서에 서명한 대가로 직원이 이미 부여된 주식을 유지할 수 있다는 내용이 포함되어 있었음. 기술 업계 외부 사람들에게는 별 의미가 없을 수 있지만, 이는 OpenAI가 기술 업계에서 매우 신성시되는 선을 넘었다는 것을 의미함.
     * 두 번째 ""우와"" 순간은 OpenAI의 계획의 법적 정당성을 도전한 전 직원에게 보낸 두 번째 해고 계약서를 검토하면서 발생함. 회사는 그 접근 방식의 법적 정당성을 방어하는 대신, 새로운 접근 방식으로 급격히 전환했음.
     * 세 번째 ""우와"" 순간은 회사가 이러한 권한을 가지게 된 이유로 언급한 설립 문서를 읽으면서 발생함. 이 문서는 회사가 부여된 주식을 회수하고 직원들이 이를 판매하는 것을 막을 수 있는 많은 권한을 부여하는 것처럼 보였음. 그래서 누가 이러한 것을 설정했는지 궁금하여 서명 페이지로 스크롤 했음. 그 페이지에는 세 개의 서명이 있었고, 모두 샘 올트먼의 서명이었음. 일요일 밤에 상사에게 ""잠깐 전화할 수 있을까요?""라고 메시지를 보냈음.

GN⁺의 의견

    1. 투명성의 중요성: OpenAI와 같은 회사는 공공의 신뢰를 얻기 위해 높은 수준의 투명성과 책임성을 유지해야 함.
    2. 법적 자문 필요성: 직원들이 퇴사 시 법적 자문을 받을 수 있는 충분한 시간을 제공하는 것이 중요함.
    3. 기업 문화 개선: OpenAI는 내부 문화를 개선하고 직원들이 자유롭게 의견을 표현할 수 있는 환경을 조성해야 함.
    4. 기술 업계의 표준: 다른 기술 회사들도 이러한 문제를 피하기 위해 투명한 정책을 채택해야 함.
    5. 미래의 신뢰 회복: OpenAI는 이번 사건을 계기로 신뢰를 회복하고 더 나은 기업 문화를 구축해야 함.

   ""앞으로 OpenAI가 Facebook처럼 무자비하고 사회적으로 해로울 것이라는 예측."" 을 이해가 잘 안되서 주신 링크 들어가 봤는데, 댓글을 직접 읽어보니 누군가는 근거 없이 미리 예언 하는 거고, 누군가는 FB는 잘하고 있다고 하는 의견도 있는등 분분하네요. 참고 하겠습니다. 감사합니다.

   착실하게 카르마를 쌓아 올리고 있네요

     CEO 샘 알트만은 사과문을 게시하며, ""우리는 결코 누구의 취득한 지분을 회수하지 않았으며, 앞으로도 그렇게 하지 않을 것""이라고 밝힘.
     그러나 회사 문서에는 알트만과 다른 고위 임원들의 서명이 포함되어 있어

   샘과 알트만은 다른 사람인 걸까요?

   핵폭탄이 문제가 아니라, 핵폭탄을 쏘려는 사람이 문제이듯. AI가 문제가 아니라, AI를 만드는 사람이 문제군요.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 실수에 대한 해결책
          + 퇴사하는 직원들이 서명한 비난 금지 계약을 해제하는 것이 가장 쉬운 해결책임.
          + OpenAI가 전직 직원들에게 주식 취소가 없음을 명확히 하고 비난 금지 의무를 해제한다고 발표함.
     * 사과와 책임 회피
          + OpenAI가 사과하면서도 거짓말을 하고 책임을 회피하는 모습이 놀라움.
          + 잘못을 저지르고 나서 ""오해였다""며 문제를 해결하려는 패턴이 반복됨.
     * 해커뉴스 게시물 검열
          + 어제의 게시물처럼 이번 게시물도 빠르게 삭제될지 궁금함.
     * 주식 매각 제한
          + 직원들이 주식을 매각하지 못하게 하는 계약은 시장에서 흔한 조건임.
          + Vox 기사에서 이를 중요하게 다루지만, 사실 그렇지 않음.
     * 사과의 진정성
          + Sam Altman이 소문자로 사과했으니 괜찮을 것이라는 풍자적 의견.
     * OpenAI의 미래
          + 앞으로 OpenAI가 Facebook처럼 무자비하고 사회적으로 해로울 것이라는 예측.
     * 이사회가 옳았음
          + 이사회가 옳았다는 의견.
     * Sam Altman의 발언 해석
          + Sam Altman의 발언을 신뢰하기 어렵다는 의견.
          + 그의 발언이 진실이지만 오해를 불러일으킬 수 있음.
     * 정부 규제와 오픈 소스
          + 직원 계약에서 신뢰를 저버린 회사가 AGI를 다룰 수 있다고 주장하면서 정부가 오픈 소스를 배제하는 규제를 만드는 상황.
"
"https://news.hada.io/topic?id=14902","샘 알트만과 그렉 브록먼의 OpenAI Safety 연구원 주장에 대한 피드백","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              샘 알트만과 그렉 브록먼의 OpenAI Safety 연구원 주장에 대한 피드백

     * Jan의 기여에 대한 감사와 전략 설명
          + Jan의 기여에 감사하며, 그가 외부에서 계속해서 미션에 기여할 것임을 믿음.
          + 그의 떠남이 제기한 질문들에 대해 우리의 전략을 설명하고자 함.
     * AGI의 리스크와 기회 인식 제고
          + AGI의 리스크와 기회를 인식하여 세계가 더 잘 준비할 수 있도록 인식 제고.
          + 딥러닝의 확장 가능성을 여러 번 시연하고, 그 의미를 분석함.
          + AGI의 국제적 거버넌스를 촉구했으며, 이는 당시에는 인기 없는 주제였음.
          + AI 시스템의 재앙적 리스크 평가 과학을 개척함.
     * 안전한 시스템 배포의 기초 마련
          + 점점 더 능력 있는 시스템의 안전한 배포를 위한 기초 마련 중.
          + 새로운 기술을 처음으로 안전하게 만드는 것은 쉬운 일이 아님.
          + GPT-4를 안전하게 세상에 선보이기 위해 많은 작업을 수행함.
          + 배포에서 얻은 교훈을 바탕으로 모델 행동과 남용 모니터링을 지속적으로 개선함.
     * 미래의 도전
          + 미래는 과거보다 더 어려울 것임.
          + 새로운 모델의 중요성에 맞춰 안전 작업을 계속 높여야 함.
          + 작년에 도입한 Preparedness Framework를 통해 이를 체계화함.
     * 미래에 대한 시각
          + 모델이 더욱 강력해지면서 세상과 더 깊이 통합될 것으로 예상됨.
          + 사용자들은 단일 모델과 텍스트 입력 및 출력으로만 대화하는 것이 아니라, 여러 멀티모달 모델과 도구로 구성된 시스템과 상호작용하게 될 것임.
     * 안전하고 유익한 시스템 개발
          + 이러한 시스템은 사람들에게 매우 유익하고 도움이 될 것이며, 안전하게 제공할 수 있을 것이라 믿음.
          + 이를 위해 많은 기초 작업이 필요함.
          + 학습 시 연결되는 것들에 대한 신중한 고려, 확장 가능한 감독과 같은 어려운 문제의 해결책 등이 포함됨.
          + 이러한 방향으로 구축하면서 출시 안전 기준에 도달하는 시점을 아직 모르지만, 출시 일정이 지연되어도 괜찮음.
     * 피드백 루프와 철저한 테스트
          + 모든 가능한 미래 시나리오를 상상할 수 없다는 것을 인지함.
          + 매우 긴밀한 피드백 루프, 철저한 테스트, 각 단계에서의 신중한 고려, 세계적 수준의 보안, 안전과 능력의 조화가 필요함.
          + 다양한 시간대의 안전 연구를 계속 수행할 예정임.
          + 정부 및 여러 이해관계자들과의 협력을 지속함.
     * AGI로 가는 길에 대한 이해
          + AGI로 가는 길을 탐색하는 데는 입증된 플레이북이 없음.
          + 경험적 이해가 앞으로 나아가는 길을 알리는 데 도움이 될 것임.
          + 엄청난 장점을 제공하면서도 심각한 리스크를 완화하는 작업을 수행함.
          + 우리의 역할을 매우 진지하게 받아들이며, 우리의 행동에 대한 피드백을 신중하게 검토함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * AI의 위험성에 대한 우려
          + AI가 종말을 초래할 것이라는 논의는 현재 unfolding 중인 실제 위험을 간과하게 만듦.
          + 사기꾼들이 AI를 이용해 더 능숙해지고 있음.
          + 사람들이 AI의 잘못된 출력을 맹목적으로 신뢰하면서 점점 더 어리석어지고 있음.
          + 실제 대화 대신 AI가 생성한 내용을 복사/붙여넣기하면서 일반적인 의사소통이 붕괴되고 있음.
          + AI 여자친구 제품의 등장으로 인해 인류의 미래에 대한 신뢰가 떨어짐.
          + 기업의 최고 경영진들이 비용 절감을 위해 대량 해고를 감행하고 AI 챗봇으로 대체하는 상황.
          + AI가 핵무기를 발사하지는 않겠지만, 모든 사람의 일자리를 대체하고 권력자들을 더 강력하게 만들 것이라는 우려.
     * 대기업의 위험 완화
          + 대기업의 위험 완화 리더십은 법적, 조달, IT 등에서 위험을 균형 있게 관리해야 함.
          + 위험 완화 담당자가 반복적으로 무시당하면 결국 떠나게 됨.
          + AGI와 같은 잠재적 멸종 사건 수준의 두려움이 과장된 것일 수 있음.
          + AGI를 ""BYOD 정책 없음""으로 대체하면, 안전 담당자가 정책을 고수하다가 결국 떠나는 스타트업 사례와 유사함.
     * LLM의 유용성과 한계
          + LLM은 기본적인 작업에 유용하지만, 더 복잡한 작업에는 아직 준비되지 않음.
          + AI 안전에 대한 과장된 경고는 OpenAI의 중요성을 높이기 위한 전략일 수 있음.
          + 현재의 AI 시대는 기계가 생각할 수 있다고 가장하는 것에 불과함.
     * AI의 실제 위험
          + AI의 위험은 통제 불가능한 초인적인 존재가 아니라 더 현실적이고 일상적인 문제임.
          + LLM을 채팅 중재에 적용할 때 잘못된 음성 인식.
          + 군사 보고서 요약에서 잘못된 결론 도출.
          + 뉴스에서 세부 사항을 잘못 인식하여 역사적 사실로 받아들여지는 경우.
          + 이러한 결과의 장기적인 영향은 LLM 사용만큼 클 수 있음.
     * AI 정렬과 윤리
          + AI 정렬에 대한 구체적인 내용이 없음.
          + AI 정렬이 언제 개발될지 모름.
          + AI 윤리와 AI 편향은 AI 정렬과는 다른 문제임.
          + AI 정렬이 개발되기 전에 인간 멸종을 초래할 수 있는 AI가 개발될 위험이 있음.
          + OpenAI는 AI 정렬에 충분한 자원을 할당하지 않고 있음.
     * 기업의 언어 사용에 대한 불신
          + ""Sam과 Greg""와 같은 이름을 사용하여 친근한 관계를 나타내는 것이 가식적으로 느껴짐.
          + GPT-4를 안전하게 출시하기 위해 많은 작업을 했다는 주장이 신뢰할 수 없음.
          + AGI를 정의하거나 테스트하기 전에 초정렬에 대해 걱정할 필요가 없음.
          + AGI가 인류를 파괴할 것이라는 두려움은 논리적으로 생각하는 장치가 인류를 제거해야 한다는 결론에 도달할 것이라는 의심에서 비롯됨.
          + 기업의 언어 사용이 가식적이고 의미 없는 표현으로 가득 차 있음.
"
"https://news.hada.io/topic?id=15009","루이스 캐럴 – 특정 날짜의 요일 계산 기술 (1887)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    루이스 캐럴 – 특정 날짜의 요일 계산 기술 (1887)

루이스 캐럴이 제안한 날짜 계산법

   루이스 캐럴이 1887년 3월 31일 _Nature_에 보낸 편지:

     다음과 같은 방법으로 주어진 날짜의 요일을 정신적으로 계산하는 방법을 발견했기에, 독자들에게 흥미를 줄 수 있을 것 같아 보냄. 나는 빠른 계산가는 아니며, 평균적으로 이러한 문제를 푸는 데 약 20초가 걸림. 따라서 빠른 계산가는 15초도 걸리지 않을 것이라 확신함.

  계산 방법

     * 주어진 날짜를 4개의 부분으로 나눔: 세기, 년도, 월, 일.
     * 다음 4가지 항목을 계산하고, 각 항목을 이전 항목의 합계에 더함. 항목이나 합계가 7을 초과하면 7로 나누고 나머지만 유지함.

    세기 항목

     * 구식(1752년 9월 2일 이전): 18에서 뺌.
     * 신식(1752년 9월 14일 이후): 4로 나누고, 3에서 나머지를 뺀 후, 나머지를 2로 곱함.
     * 예: 1811년의 경우, 세기 항목은 18임.

    년도 항목

     * 12의 배수, 나머지, 나머지의 4의 배수를 더함.

    월 항목

     * 모음으로 시작하거나 끝나는 경우, 해당 월의 위치를 10에서 뺌. 이 값에 해당 월의 일 수를 더함.
     * 예: 1월의 항목은 '0', 2월 또는 3월은 '3', 12월은 '12'.
     * 최종 값: 1월 0, 2월 3, 3월 3, 4월 6, 5월 1, 6월 4, 7월 6, 8월 2, 9월 5, 10월 0, 11월 3, 12월 5.

    일 항목

     * 해당 월의 일 수.

    윤년 조정

     * 윤년의 1월 또는 2월인 경우, 최종 합계에서 '1'을 뺌. 합계가 '0'인 경우, 먼저 7을 더함.
     * 윤년: 4로 나누어지는 해, 단 신식에서는 세기년이 4로 나누어지지 않는 경우 제외 (예: 1800년).

    최종 결과

     * 최종 결과는 요일을 나타냄. '0'은 일요일, '1'은 월요일, 등등.

  예시

    1783년 9월 18일

     * 세기 항목: 17을 4로 나누면 나머지 '1'. 3에서 1을 빼면 '2'. 2를 2로 곱하면 '4'.
     * 년도 항목: 83은 6 다스와 11, 합계 17. 2를 더하면 19, 7로 나누면 '5'. 총합 9, 7로 나누면 '2'.
     * 월 항목: 8월 항목은 '8에서 10을 뺀 값', 즉 '2'. 9월 항목은 '2에 3을 더한 값', 즉 '5'. 총합 7, 7로 나누면 '0'.
     * 일 항목: 18은 '4'.
     * 최종 결과: '목요일'.

    1676년 2월 23일

     * 세기 항목: 16에서 18을 빼면 '2'.
     * 년도 항목: 76은 6 다스와 4, 합계 10. 1을 더하면 11, 7로 나누면 '4'. 총합 '6'.
     * 월 항목: 2월 항목은 '3'. 총합 9, 7로 나누면 '2'.
     * 일 항목: 23은 '2'. 총합 '4'.
     * 윤년 조정: '3'.
     * 최종 결과: '수요일'.

   (출처: Edward Wakeling, Rediscovered Lewis Carroll Puzzles, 1995.)

GN⁺의 의견

     * 루이스 캐럴의 날짜 계산법은 수학적 사고를 키우는 데 유용함.
     * 이 방법은 컴퓨터 없이도 날짜를 계산할 수 있는 흥미로운 방법임.
     * 윤년 계산과 같은 세부 사항을 이해하면 더 정확한 결과를 얻을 수 있음.
     * 현대의 달력 계산과 비교해보는 것도 재미있을 것임.
     * 수학적 퍼즐을 좋아하는 사람들에게는 도전적인 문제로 다가올 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 사용자 A: 이 방법은 내가 사용하는 방법과 매우 유사하며, Art Benjamin도 사용하는 방법임. 10~15초 내에 할 수 있지만 연습과 약간의 암기, 그리고 간단한 산수가 필요함. 이 기술을 익히면 매우 유용함.
          + 예시: 2024년 5월 24일의 요일 계산
2012년 이후 12년
윤년 3회
마법의 월 번호 2
날짜 24
합산 후 7로 나눈 나머지: 금요일

     * 사용자 B: JH Conway는 다른 기술을 사용했으며, 현재 연도의 요일을 계산할 때 더 빠르고 쉬움. 그러나 다른 연도의 ""Doomsday""를 계산할 때는 어려움이 있어 기본 방법으로 돌아감.
     * 사용자 C: 1752년에 일어난 구식과 신식 날짜의 차이에 대해 읽으며 흥미로웠음. 18세기에는 영국의 법적 연도가 3월 25일에 시작되었음.
     * 사용자 D: 월 번호 계산 알고리즘을 이해하는 데 어려움을 겪고 있음. 각 월의 번호를 계산하는 방법을 설명하며, 자신의 시도와 기사에서 제시된 결과가 일치하지 않음을 지적함.
     * 사용자 E: Carroll의 알고리즘이 시간이 지나면서 진화해왔음. 최신 개선 사항을 포함한 First Sunday Doomsday Algorithm을 소개함.
     * 사용자 F: 더 간단한 방법을 설명한 블로그 글을 작성했음. 링크를 통해 자세한 내용을 확인할 수 있음.
     * 사용자 G: Art Benjamin이 TED 강연에서 이 기술을 시연하는 것을 보는 것이 매우 흥미로웠음. 그의 손 움직임을 통해 중간 계산을 추적할 수 있음.
     * 사용자 H: Lewis Carroll의 방법을 사용하여 2024년 5월 24일의 요일을 계산함.
          + 예시:
세기 항목: 6
연도 항목: 2
월 항목: 1
날짜 항목: 24
총합: 금요일

     * 사용자 I: Python 코드를 사용하여 날짜의 요일을 계산하는 방법을 공유함.
def compute_day_of_week(date):
    day, month, year = date
    century = year // 100
    year_part = year % 100

    # 세기 항목 계산
    if year < 1752 or (year == 1752 and (month < 9 or (month == 9 and day < 14))):
        century_item = (18 - century) % 7
    else:
        century_item = ((3 - (century % 4)) * 2) % 7

    # 연도 항목 계산
    year_item = (year_part + (year_part // 4)) % 7

    # 월 항목 계산
    month_items = [0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5]
    month_item = month_items[month - 1]

    # 날짜 항목 계산
    day_item = day % 7

    # 총합
    total = (century_item + year_item + month_item + day_item) % 7

    # 윤년 보정
    if month <= 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):
        total = (total - 1 + 7) % 7

    return total

def day_of_week_string(day_index):
    days = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]
    return days[day_index]

# 날짜 입력 받기
date_input = input(""Enter a date (yyyy-mm-dd): "")
year, month, day = map(int, date_input.split('-'))
date = (day, month, year)

# 요일 계산 및 출력
day_index = compute_day_of_week(date)
day_name = day_of_week_string(day_index)
print(f""The day of the week for {date_input} is {day_name}."")

     * 사용자 J: 수학에서 표기법이 얼마나 중요한지 강조함. 표기법이 수학과 컴퓨터 과학에서 매우 중요한 요소임을 언급함.
     * 사용자 K: 20초 내에 이 작업을 할 수 있다면 놀라운 일임. 자신을 ""빠른 계산기""로 여기지 않았음.
"
"https://news.hada.io/topic?id=14919","ICC 검사, 전쟁 범죄 혐의로 신와르와 네타냐후에 대한 체포 영장 요청","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ICC 검사, 전쟁 범죄 혐의로 신와르와 네타냐후에 대한 체포 영장 요청

  국제형사재판소(ICC) 검사, 하마스와 이스라엘 지도자들에 대한 체포영장 요청

     * **국제형사재판소(ICC)**는 하마스 지도자 야히야 신와르와 이스라엘 총리 베냐민 네타냐후에 대해 전쟁 범죄 및 인도에 반한 범죄 혐의로 체포영장을 요청함.
     * ICC 검사 카림 칸은 CNN과의 독점 인터뷰에서 이 사실을 밝힘.

  체포영장 대상자

     * 이스라엘 국방장관 요아브 갈란트와 하마스의 두 주요 지도자, 알 카셈 여단의 지도자인 모하메드 디아브 이브라힘 알 마스리(모하메드 데이프)와 하마스 정치 지도자 이스마일 하니예도 체포영장 대상에 포함됨.
     * 이스라엘 정치인들에 대한 체포영장은 미국의 가까운 동맹국의 최고 지도자를 처음으로 겨냥한 것임.

  비판의 위험

     * 이스라엘과 하마스 지도자들에 대해 동일한 조치로 체포영장을 신청함으로써, 칸의 사무실은 테러 조직과 선출된 정부를 동등하게 취급한다는 비판을 받을 위험이 있음.

  ICC 판사들의 검토

     * ICC 판사 패널이 칸의 체포영장 신청을 검토할 예정임.

  혐의 내용

     * 야히야 신와르, 이스마일 하니예, 모하메드 알 마스리에 대한 혐의는 ""학살, 살인, 인질 납치, 구금 중 강간 및 성폭행""을 포함함.

  10월 7일 공격

     * 10월 7일, 하마스 주도의 무장 세력이 남부 이스라엘 여러 지역에서 약 1,200명을 살해하고 약 250명을 가자로 인질로 데려감.
     * 많은 인질들이 여전히 가자에 억류되어 있으며, 이는 ""많은 무고한 이스라엘인들이 여전히 인질로 잡혀 있고 가족들이 그들의 귀환을 기다리고 있다""는 것을 의미함.

  증거 자료

     * 칸은 신와르, 하니예, 알 마스리에 대한 체포영장 신청을 뒷받침하는 ""다양한 증거""를 보유하고 있다고 밝힘. 여기에는 공격 당시의 인증된 비디오 영상과 사진, 목격자 및 생존자의 증언이 포함됨.

  이스라엘의 반응

     * 이스라엘은 인질을 되찾을 권리와 의무가 있지만, 법을 준수해야 한다고 칸은 강조함.
     * 네타냐후는 이 결정을 ""정치적 분노""라고 비난하며, ""인질이 석방되고 하마스가 파괴될 때까지 전쟁을 계속할 것""이라고 밝힘.
     * 이스라엘의 다른 고위 관리들도 칸의 결정을 비판함.

  하마스의 반응

     * 하마스는 ICC 검사의 시도를 강력히 비난하며, ""팔레스타인 저항 지도자들에 대한 모든 체포영장을 취소할 것""을 요구함.

  '법 위에 있는 사람은 없다'

     * 칸은 네타냐후와 갈란트에 대한 혐의는 ""학살, 전쟁 방법으로서의 기아 유발, 인도적 구호 물품의 차단, 민간인 고의 타겟팅""을 포함한다고 밝힘.
     * 이스라엘과 미국은 ICC 회원국이 아니지만, ICC는 가자, 동예루살렘, 서안지구에 대한 관할권을 주장함.

  ICC와 ICJ의 차이

     * ICC는 개인에 대한 전쟁 범죄나 인도에 반한 범죄를 다루는 형사 법원이며, ICJ는 국가 간의 분쟁을 다룸.

  ICC의 독립성

     * ICC는 네덜란드 헤이그에 위치하며, 로마 규정에 의해 설립됨. 124개국이 이 조약에 가입했지만, 이스라엘, 미국, 러시아는 가입하지 않음.

  체포영장의 영향

     * 체포영장이 발부되면, 로마 규정에 가입한 모든 국가는 이들을 체포하고 헤이그로 송환해야 할 의무가 있음.
     * 이는 네타냐후와 갈란트가 독일과 영국을 포함한 많은 국가로의 국제 여행을 매우 어렵게 만들 것임.

  GN⁺의 의견

     * 국제법의 중요성: 이 기사는 국제법과 인권 보호의 중요성을 강조함. ICC의 역할은 전 세계적으로 법의 지배를 확립하는 데 중요한 역할을 함.
     * 정치적 복잡성: 이스라엘과 하마스 간의 갈등은 매우 복잡하며, 국제사회가 이를 어떻게 다루는지에 대한 다양한 시각이 존재함.
     * 국제형사재판소의 역할: ICC는 전 세계적으로 전쟁 범죄와 인도에 반한 범죄를 다루는 중요한 기관임. 그러나 모든 국가가 이를 지지하지 않음.
     * 국제사회와의 협력: 이스라엘과 미국이 ICC 회원국이 아니기 때문에, 이들 국가와의 협력이 어려울 수 있음.
     * 미래의 영향: 이 사건은 국제법과 국제 관계에 장기적인 영향을 미칠 수 있음. 특히, 다른 국가들이 ICC의 결정을 어떻게 받아들이고 실행할지에 대한 논의가 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 사이트 가이드라인 준수 요청
          + 댓글 작성 전에 사이트 가이드라인을 검토할 필요가 있음.
          + 지적 호기심과 존중을 바탕으로 한 대화를 권장함.
          + 특히, 의견이 다를 때 더 많은 존중이 필요함.
          + 감정적으로 격해지면 키보드에서 손을 떼고 진정할 것을 권장함.
     * ICC의 영장 발부에 대한 의견
          + ICC가 영장을 실제로 승인할지에 대한 궁금증이 있음.
          + 미국과 이스라엘이 ICC 지도부를 위협하거나 신뢰를 떨어뜨리려 할 가능성에 대한 논의.
          + 이집트나 다른 이웃 국가들의 반응, 중국의 반응, 유럽과 네덜란드의 입장에 대한 궁금증.
     * 다른 지도자들에 대한 ICC 조사 필요성
          + 푸틴, 하마스, 시진핑 등도 조사 대상이 되어야 한다는 의견.
          + 일방적인 공격이 아닌 공정한 조사가 필요함.
     * 로마 규정의 당사국
          + 로마 규정의 당사국 목록을 참고할 필요가 있음.
          + 링크 제공: [로마 규정 당사국](https://en.wikipedia.org/wiki/International_Criminal_Court/…)
     * ICC 영장의 실질적 의미
          + 전통적인 의미의 영장이 아닌 제재로 보는 것이 맞다는 의견.
          + ICC는 직접적인 집행 메커니즘이 없고, 관련 조약을 비준한 정부가 영장 대상자를 체포하는 방식임.
          + 여행 금지나 가택 연금에 더 가까운 개념임.
     * 테러 조직과 민주 국가의 비교
          + 테러 조직과 민주 국가를 동일한 보도자료에 언급하는 것은 ICC에 부정적인 이미지로 작용할 수 있음.
          + 이스라엘 군대의 민간인 공격 명령 여부에 대한 조사는 필요하지만, 이는 다소 억측일 수 있음.
          + 이집트가 민간인의 피난을 거부한 행위도 조사 대상이 되어야 한다는 의견.
     * 국제적 및 비국제적 무력 충돌
          + ICC가 이 상황을 국제적 및 비국제적 무력 충돌로 간주하는 것이 흥미로움.
          + 팔레스타인이 이스라엘과 별개의 국가인지 여부에 따라 법 적용이 달라질 수 있음.
     * 미국의 ICC 관할권 인정 거부
          + 미국은 자국 시민과 군인에 대한 ICC의 관할권을 인정하지 않음.
          + 실제 범죄는 JAG(군사 법무관)에 의해 처리된다고 주장하지만, 오키나와 지역 사회는 이를 심각하게 받아들이지 않는다고 함.
     * 네타냐후의 정치적 미래
          + ICC 영장이 발부되면 네타냐후의 정치 경력이 끝날 가능성에 대한 논의.
          + 주요 국가로의 여행이 불가능해지면 큰 타격이 될 것임.
     * 이스라엘의 기회
          + 이스라엘이 네타냐후를 비난하고 가자 지구 공격을 중단하며 지역 경제를 발전시키는 방향으로 나아갈 기회가 될 수 있음.
          + 국제적으로 성공한 팔레스타인인들에게 가자 지구로 돌아와 사업을 시작하도록 촉구할 수 있음.
          + 이는 유대인과 팔레스타인인 간의 평화를 위한 좋은 기회가 될 수 있음.
"
"https://news.hada.io/topic?id=14930","Postgres 쿼리 1,000배 더 빠르게 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Postgres 쿼리 1,000배 더 빠르게 만들기

     * Mattermost는 Elasticsearch를 사용하여 데이터베이스 부하를 줄이고 훨씬 더 빠른 검색 결과를 제공함
          + Elasticsearch가 제대로 동작하려면 검색 대상이 되는 모든 데이터를 색인해야 함
          + 이미 색인된 데이터에 대해서는 이후 새 글과 파일의 색인 작업이 꽤 빠름
          + 그러나, 아주 큰 데이터베이스(1억 개 포스트)를 처음부터 완전히 색인하는 것은 매우 느림(18시간동안 절반도 못하고 점점 느려짐)
     * 데이터베이스 호출 별 소요 시간 그래프를 통해, PostStore.GetPostsBatchForIndexing 메서드의 SQL 쿼리가 문제인 것으로 파악됨
          + 해당 쿼리는 기본적으로 creation timestamp 기준으로 포스트를 정렬하고, 주어진 timestamp보다 새로운 N개의 포스트를 반환함
          + 이 쿼리를 반복 실행하여 모든 포스트가 색인될 때까지 indexing job이 수행됨
     * EXPLAIN (ANALYZE, BUFFERS)를 사용해 쿼리 실행 계획을 분석함:
          + Posts 테이블에 인덱스 스캔 수행 시 Filter 조건 적용을 위해 4천만 블록을 처리하고 있음 (309GB)
          + Channels 테이블과의 JOIN은 문제가 아님
          + WHERE 조건의 OR 절 중 Posts.CreateAt > ?1 부분만 적용하면 훨씬 빨라짐 (30ms)
          + 거기서 Posts.CreateAt = ?1 AND Posts.Id > ?2 조건을 적용하면 극도록 빨라짐 (0.047ms)
     * 원인 파악:
          + 원본 쿼리는 Posts의 모든 행을 훑으면서 Filter로 걸러내는 반면, 수정된 쿼리는 인덱스만 확인하고 필요한 행만 추출함
          + 시간이 지남에 따라 쿼리가 점점 느려진 이유는 점점 더 많은 행을 걸러내야 했기 때문임
     * 해결책:
          + PostgreSQL의 row constructor comparison 기능을 활용하여 (Posts.CreateAt, Posts.Id) > (?1, ?2) 조건으로 변경
          + 이렇게 변경한 쿼리는 34밀리초로 실행 시간이 대폭 줄어듦
          + 그런데 MySQL에서는 변경된 쿼리가 오히려 더 느리게 동작함. MySQL에서는 원본 쿼리가 더 빨랐기에 DB 별로 다른 쿼리 사용하도록 코드 분기 처리함
     * 배운 점들:
          + EXPLAIN 시 BUFFERS 옵션을 항상 사용할 것
          + Filter 대신 Index Cond를 활용하도록 할 것
          + PostgreSQL과 MySQL은 거의 항상 다르게 동작함을 전제할 것
     * 결론
          + 최적화 작업을 통해 쿼리 실행 시간을 1000배 이상 줄이는 성과를 얻음
          + 이 최적화는 Mattermost v9.7.0 및 v9.5 ESR 버전에 반영됨
          + 최적화 작업을 통해 많은 것을 배울 수 있었음

   맨 마지막 글에도 있지만 본 글의 제목이 살짝 낚시성느낌이나...좀더 실질적으로 바꿔보자면

   '실수를 통해 배운 postgresql 활용 사례'

   일까요..

   음... 개인적으로 이런 수준의 글을 특정 회사/제품을 걸고 쓴다면, 오히려 그 제품에 대한 신뢰도가 많이 낮아질 것 같습니다.
   정리는 일목요연하지만, 그 안에 담긴 기술적인 가치가 조금 부족해보여 아쉽네요.

   저도 이 글을 보고나서 오히려 신뢰도가 낮아졌습니다. 돈받고 팔고 있는 제품이 대용량 처리 테스트도 없이 기능을 출시한 거니까요. 저 정도의 간단한 인덱스는 기능 개발 단계에서 설정해야 하는거 아닌가 싶습니다. 소프트웨어 개발 절차가 많이 생략된거 같아 보입니다
"
"https://news.hada.io/topic?id=14924","Show GN: YOCO - 복사하면 자동으로 파일 이름을 주석으로 추가해주는 VSCode extension","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: YOCO - 복사하면 자동으로 파일 이름을 주석으로 추가해주는 VSCode extension

   코드 블록을 자주 복사하고 공유하는 분들에게 유용할 VSCode Extension을 소개합니다. YOCO는 단축키로 복사할 때 파일 경로와 백틱을 자동으로 포함시켜 줍니다. 특히 기술 블로그나 ChatGPT 같은 LLM 플랫폼에 코드를 붙여넣을 때 유용합니다.

   설치 및 사용법
     * VSCode 마켓플레이스에서 YOCO를 설치합니다.
     * 단축키(cmd+shift+c / ctrl+shift+c)로 코드를 복사합니다.
     * 코드를 붙여넣으면 코드 첫 줄에 파일 경로가 주석으로 자동 추가된 것을 볼 수 있습니다.

   옵션
     * 백틱(`)으로 코드를 감싸서 복사할 수도 있습니다(설정 > YOCO > Use Backtick).
     * 주석에 파일 경로 또는 파일 이름만 포함할 수 있습니다(설정 > YOCO > Include File Path).

   GitHub Issue나 댓글을 통한 버그 제보, 기능 제안 등 피드백 환영합니다. 감사합니다!
     * GitHub 리포지토리
     * VSCode 마켓플레이스

   백틱 감싸주는거 좋네요

   이런 거 필요했는데 한번 써보겠습니다 ^^

   오... 확실히 LLM에 코드 전달할 때 코드블럭과 파일 경로를 알려주는것은 퀄리티에 큰 차이를 가져오는 느낌이 있어서 귀찮지만 항상 추가해주었는데 저는 왜 이런 생각을 못했을까요? 간단하면서도 멋진 기능이네요. 정말 유용할것같습니다!
"
"https://news.hada.io/topic?id=15033","Bubble.ai - AI 거품","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Bubble.ai - AI 거품

     * 스콧 갤러웨이의 ""No Mercy / No Malice"" (자비 없음 / 악의 없음) 뉴스레터 요약. ( * 투자 조언이 아님 )
     * Nvidia는 5년 전만 해도 Call of Duty를 좀 더 좋은 해상도에서 즐기게 해주는 2차 반도체 회사였음
     * 오늘날 Nvidia는 AI 칩 시장의 80% 점유율을 차지하며 지구상에서 3번째로 가치 있는 회사로 성장함
     * OpenAI가 ChatGPT를 출시한 2022년 10월 이후 Nvidia의 가치는 2조 달러 증가했으며, 이는 아마존의 가치와 맞먹음
     * 이번 분기실적 발표에서 Nvidia의 핵심 사업인 데이터 센터용 칩 판매는 전년 대비 427% 증가함
     * AI 시장의 혁명적 잠재력에 대해서는 다들 동의하고 있음. 모두 같은 곳을 보고 있는데, 우리는 거품 속에 있는 것일까?

거품의 심리학

     * 1630년대 튤립은 더 이상 예쁘거나 유용하지 않았지만, 사람들은 더 높은 가격에 팔 수 있다고 믿었기 때문에 가격이 상승함
     * 일명 ""더 큰 바보(Greater Fool)"" 이론
     * Meme 주식은 더 큰 바보 이론의 최고 사례로, 많은 구매자들이 자신이 운동의 일부라고 확신함
     * 이런 종류의 거품은 취약하며 경제 전반에서 크게 확대되거나 오래 지속되는 경우는 드묾

Bubbleicious(거품은 맛있어)

     * 수조 달러 규모의 경제를 왜곡하는 거품은 순수한 거품 심리가 실제 경제적 잠재력과 겹칠 때 발생함
     * 이는 자기 추진력을 가지고 있어서, 주가 상승이 가정을 검증하고 더 공격적인 예측을 장려하며, 이는 더 많은 투기꾼들을 끌어들이고, 그들은 기회를 놓치고 싶어하지 않음
     * 저금리와 같은 외부 요인이 거품을 부추길 수 있지만, 거품은 일반적으로 경제 성장 엔진과 지속적인 기술을 핵심으로 함
          + 예를 들어, 90년대 말 닷컴 버블은 한 가지 가설에 근거한 것이었음: ""인터넷은 전례 없는 가치를 창출할 수 있는 새천년의 가장 혁신적인 기술"" 실제로 그런 일이 일어났고, 고평가된 것처럼 보였던 몇몇 기업 중 일부는 실제로는 저평가된 것으로 밝혀졌음
          + 2000년대 주택 시장의 거품은 저금리, 금융화 및 기타 외부 요인의 결과였지만, 그 모든 것이 올바른 논제였음: ""토지는 유한하고, 주택은 필수적이며, 우리는 주택이 충분하지 않다."" 거의 20년이 지난 지금도 여전히 그렇지 않음

이번 거품

     * 금융 미디어가 좋아하는 게임인 ""이것이 거품인가, 아니면 AI는 진짜인가"" 질문으로 돌아가보면
     * 그 대답은 '예'임. AI의 경제적 약속은 현실적이고 명백하게 느껴짐
     * 그리고 이것이 AI거품을 피할수 없는 이유임
     * 거품은 예기치 않은 방식으로, 예측할 수 없는 이유로 출현함
     * 큰 거품은 유사한 방식으로 부풀어 오름
          + 혁신적인 기술이 등장하고, 자본이 몰려들고, 가치평가가 상승하며, 투기꾼들이 연료를 더하고, 대기가 달아오르며, 거품이 커지고, 값싼 자본이 성장을 가속화하며, 바퀴가 돌아감
     * ChatGPT의 엄청난 데뷔 이후 우리는 거품 속에 있음
     * AI는 놀랍지만, 거품 승수(Multiplier) 효과가 매우 작용하고 있음
     * Economist에 따르면 Alphabet, Amazon, Microsoft의 시가총액은 AI 붐 동안 2.5조 달러 상승했는데, 이는 2024년 클라우드 대기업의 매출에 생성형 AI가 200억 달러를 더할 것으로 예상되는 것의 120배임
     * 3월에는 3조 달러였음. 따라서 시장은 AI 수익을 150배로 평가하고 있음
     * AI 이전에는 Microsoft는 수익의 약 10배, Alphabet은 5배, Amazon은 4배 정도로 평가되었음
     * 이 AI 배수로 성장하려면 이 기업들은 Alphabet의 수익을 더한 것 이상으로, 비AI 사업의 지속적 확장과 더불어 5천억 달러의 추가 연간 수익을 찾아야 함
     * AI의 사랑받는 기업인 엔비디아는 좋은 문제만 있는 코너에 몰려 있음. 하지만 어쨋거나 코너임
     * YU 교수인 Aswath Damodaran은 Nvidia가 자신의 가치를 정당화하려면, 공격적인 성장이 예상되는 AI 칩 시장을 계속 지배할 뿐만 아니라, 비슷한 규모의 다른 시장도 지배해야 한다고 계산함
          + 즉, 엔비디아의 주가에는 엔비디아가 AI만큼 큰 또 다른 시장을 찾아 비슷한 지배력을 확보할 것이라는 기대가 내재되어 있음
     * 닷컴 버블 정점에서 Google은 두 번째로 인기 있는 검색 엔진을 가진 신생 기업이었고, Meta는 존재하지 않았음
     * 오늘날 수백 개의 AI 스타트업이 이러한 성공을 복제하는 것을 목표로 함
     * 한 저명한 VC는 1,400개의 AI 스타트업을 추적하고 있음
     * IPO 파이프라인이 넓어짐에 따라 더 많은 기업이 등장할 것임
     * 많은 기업이 실패할 것이지만(거품이기 때문에), 모두가 실패하지는 않을 것임
     * AI와 관련된 두 가지 중요한 질문은 ""우리가 거품에 있는가""가 아니라 ""언제 터질 것인가""와 ""누가 살아남을 것인가""임

빠르게 부자 되기 (Get Rich Quick)

     * 거품이 터지는 시기를 정확히 맞추는 것은 억만장자가 되는 가장 빠른 방법일 수 있음
          + 이는 투자 방향과 자본에 대한 레버리지가 매우 강력하기 때문
          + 존 폴슨의 헤지펀드는 2007년 주택 버블을 포착해 150억 달러(본인 40억 달러 포함)를 벌었고, 마이클 버리는 수억 달러를 벌어 영화 '빅 쇼트'로 제작되기도 했음
     * 하지만 타이밍이 모든 것이며, 공격적인 공매도 포지션도 터질 수 있음
          + 마이클 버리는 2020년에 테슬라를 공매도했지만, 정점에서 공매도를 철회하기 전에 두 배로 상승하는 것을 지켜봐야 했음
          + 조지 소로스는 1999년에 닷컴 시장에서 공매도로 ""엄청난 손실""을 입었음
          + 전설적인 투자자 줄리안 로버트슨은 닷컴 버블에 베팅해 800만 달러를 220억 달러로 불렸고, 버블이 꺼지기 한 달 전에 투자를 포기하고 빠져나옴
     * 투자 역사의 교훈은 모두 한 가지를 가리키고 있음: 아무도 무슨 일이 일어날지 모른다는 것
     * 부자가 되는 방법은 저렴한(Low-Cost) ETF를 통해 천천히, 전체 건초더미를 사는 것임

     공공 서비스 안내: 어떤 일이 일어날지는 아무도 모릅니다 - 시장에 시간을 맞추려고 하지 말고 다각화해야 합니다.

     * 내가 만약 AI 버블이 언제 터질지 알았다면 여기서 논의하지 않고 모든 것을 팔아 MSFT, NVDA 및 기타 AI 주식의 저가 풋 옵션을 매수하고 폭락 후 현금화하여 Australia를 사버릴 것
          + 아쉽게도 나는 언제가 아니라 어떻게 폭락할지에 대해 더 확신이 있음

Airpocket

     * 항공기는 안전을 극대화하고 승객의 편안함을 최대화하면서 연료 사용을 최소화하도록 계산된 비행 경로를 따름
     * 그러나 대기는 정적인 매체가 아니며, 때로는 국지적인 빠른 공기 이동 구역, 즉 난기류를 만남
     * 갑작스러운 하강 기류는 비행기를 수초 만에 수백 또는 수천 피트 떨어뜨릴 수 있음
     * 이를 에어포켓에 부딪히는 것이라고 함
     * 대부분은 무해하지만 강한 다운드래프트는 무섭고 위험할 수 있음
          + 최근에 싱가포르항공 777기가 급강하하여 승객 1명이 사망하고 6명이 병원으로 이송되는 사고가 발생
     * 현대 비행기는 에어포켓에 부딪친 후 몇 초 만에 회복하지만, 거품이 낀 시장은 안정을 찾는 데 더 오래 걸림
     * 한 가지 시나리오를 예로 들어보면
          + 대형 비기술 기업(월마트, JPM, P&G 등)이 AI 이니셔티브를 축소한다고 발표할 것임
          + AI 팀을 폐쇄하고 합작 투자를 취소하는 등의 조치를 취함
          + ""우리는 AI가 비즈니스에 미치는 장기적인 영향에 대해 여전히 낙관적이지만, 처음에 예상했던 ROI가 나타나지 않고 있어 이 기술에 대한 자본 투자 수준을 축소하고 있습니다.""
          + 가격을 올렸던 것과 같은 사이클이 더 빠르게 진행될 것
          + 그 주 실적 발표에 참석하는 모든 CEO는 AI 지출을 줄일 것인지 질문을 받게 될 것
          + 트렌드 반전은 유치원을 통해 감기 바이러스가 퍼지듯 어닝 콜을 통해 전파되며, 그달 말에는 어떤 CEO도 AI 사이공에서 마지막 헬리콥터에 탑승하고 싶어하지 않을 것(탈출)
          + AI 주식은 하락할 것이고, 일단 하락하면 투기꾼들이 매도하기 시작하여 퇴출 행렬이 이어질 것
          + 수조 달러의 시가총액이 몇 주 만에 사라질 것
          + 누군가는 시간을 완벽하게 맞추겠지만, 대부분은 그렇지 않을 것
     * 닷컴 거품을 터뜨린 에어포켓은 동쪽에서 불어왔음
          + 2000년 3월 10일 금요일, 나스닥은 5,049에 도달함
          + 다음 월요일, 일본 경제 데이터는 1999년 4분기에 일본 경제가 수축했음을 보여줌
          + 이 나쁜 소식은 투기적 시장을 놀라게 하기에 충분했음
          + 그날의 하락세는 나스닥을 사상 4번째로 큰 포인트 손실로 때렸음
          + 그 이후 15년 동안 5,000을 돌파하지 못함
     * 서브프라임 버블은 2007년 3월 모기지 대출 기관 New Century Financial이 붕괴하면서 자체 에어포켓에 부딪혔음
          + 시장의 모멘텀은 몇 달 동안 지속되었지만 10월에 정점을 찍은 후 급락세로 돌아섰음

Bubble Blast

     * 주요 거품의 붕괴는 광범위한 영향을 미칠 수 있음
     * 2007년 주택 버블 붕괴는 2008년 은행 시스템으로 확산되어 세계 경제를 위협했고, 16-94세 사이의 사람들에게 일생에서 가장 중요한 금융사건임
     * 닷컴 붕괴는 대부분 감당할 수 있는 사람들, 눈을 뜨고 위험을 감수한 사람들에게 피해를 주었음
     * 열성적인 채용은 거품 경제의 특징이자 거품의 자기강화 사이클에서 증상이자 원인이기도 함
     * 그들은 (대부분) 훌륭한 사람들이었지만, 우리는 다른 사람들과 마찬가지로 '그들을 고용하면 수익이 올 것이다'라는 속설을 믿었음
     * 거품이 터지면서 해고된 대부분의 사람들은 고학력의 고용 가능한 젊은이들이었고, 다른 기회를 모색했고 2차 효과도 있었음
     * 2000년에는 경미한 불황이 있었고, 이는 특히 직장에 새로 입사하거나 은퇴를 희망하는 사람들에게 나빴음
     * 지금 AI 거품은 서브프라임 위기보다는 닷컴 영역에 더 가까워 보임
     * 그러나 거품이 커질수록 우리는 더 많은 레버리지를 갖게 되고 폭발 반경이 커짐
     * 2024년에 공기가 약간 빠지는 것이 건강할 것이지만 Nvidia의 엄청난 분기 실적은 계속해서 이 분야를 부풀릴 것임

Cisco

     * 거품이 끝나는 시기를 예측하는 것보다 그것을 넘어서 보는 것은 덜 흥미로움
     * AI가 우리가 느껴지는 기술적 돌파구의 절반만 실현한다고 해도, 장기적인 가치 창출을 지속할 것임
     * 그러나 어디서?
     * 최근 내 관심을 끈 이 거품의 한 측면은 오늘날 우리가 Nvidia에 대해 듣는 이야기가 닷컴 활황기에 사람들이 Cisco에 대해 말한 것과 얼마나 유사한지임
     * Cisco는 인터넷이 운영되는 많은 장비를 만드는 하드웨어 회사임
          + 1999년에는 궁극적인 ""곡괭이와 삽"" 플레이어였고, 모든 기술 펀드가 포트폴리오에 보유해야 하는 회사였으며, 자신을 투기꾼이 아닌 진지한 투자자로 여기는 경우 보유해야 하는 주식이었음
          + 아이들이 Pets.com과 Amazon을 사게 하라는 것이 오늘날 Nvidia에 대한 이야기와 같음
          + 그 '심각한' 돈이 많다는 것이 밝혀졌고, 지루한 Cisco는 1995년과 2000년 사이에 주가가 40배나 올랐음
          + 2000년에 모든 것이 추락했을 때 Cisco도 함께 추락했음
          + 비록 이 현명한 구매는 Amazon보다는 덜 타격을 입었고 그해 가을에 폐업한 Pets.com보다는 훨씬 덜 타격을 입었음
          + Cisco가 Amazon보다 나은 선택이었나? 전혀 아님
          + 사실 2000년 3월 10일 거품 정점에서 10개의 가장 위험한 닷컴 주식에 분산 투자했고 중 하나가 Amazon이라면 여전히 Cisco(와 더 넓은 시장)보다 15배 이상 높은 수익률을 올렸을 것
          + Cisco는 장기적으로 ""괜찮은"" 성과를 냈지만 Big Tech의 2020년 이후 급등세를 따라잡지 못했음
          + (이런 식의 장기 비교는 지수가 생존 편향의 혜택을 받기 때문에 개별 주식에 불리함)

Pop

     * 닷컴과 AI, Cisco와 Nvidia 사이에는 많은 차이점이 있음
     * 한 가지는 Nvidia의 상승세가 Hype뿐만 아니라 엄청난 수익 성장에 의해 추진되었다는 점인 반면, Cisco는 제한된 시간의 Y2K 투자 호황의 혜택을 받았음
     * 그러나 ""안전한 선택""이 가장 거품이 심한 주식 중 하나일 때, 우리는 a) 거품 속에 있고, b) 더 이상 안전하게 플레이 하는 것이 아님
     * 시장은 단기적으로 반드시 합리적이지는 않지만, 장기적으로는 위험과 수익이 일치함
     * 만약 Nvidia가 이 시장에서 확실한 선택이라면, 확실한 수익을 창출하게 될 것. 즉 시장을 따라가게 될 것
     * 1999~2024년 사이의 아마존 수익률을 기대하는 경우, Pets.com의 위험도 예상해야 함
     * ""안전벨트를 매고, 트레이 테이블이 고정되어 있는지 확인하세요""

   부자가 되는 방법은 저렴한 ETF를 통해 천천히, 전체 건초더미를 사는 것임

     어쩌면 가장 현명한. 그런데 저렴한 ETF 는 뭔가요?

   주식 하나를 각각 사는 것은 비싸니까, 해당 주식들을 물고 있는 저비용(low-cost) ETF 를 사라는 것으로 이해했습니다. 저렴한으로 번역 해두니 조금 오해가 있겠네요.

   엔비디아가 정말 말도 안되는 수익률을 지속하면서, 과연 이게 얼마나 갈지에 대해서는 의견이 분분하네요.
   1000불을 넘어서 너무 커지나 했는데, 1/10 분할 한다고 해서 사람들은 더더욱 흥분하고 있고, 혹시나 이제 다우지수에 편입되는게 아닌가 기대도 하고요.
   $30까지 추락한 인텔이 빠지고 그 자리에 들어가면 정말 더 극적이 될 듯

   엔비디아가 AI 이후의 수익을 어디서 내게될지가 궁금하긴 하네요.

   (전 2018년에 아주 조금 엔비디아 주식을 사두고 그냥 신경끄고 있었는데.. 지금 열어보니 2500% 수익률을 기록하고 있네요. 그때 왕창 샀어야..)
"
"https://news.hada.io/topic?id=15002","JetBrains, Rust용 IDE RustRover 릴리즈. 무료 라이센스 포함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             JetBrains, Rust용 IDE RustRover 릴리즈. 무료 라이센스 포함

     * Rust 언어를 위한 전용 IDE : Rust 툴체인 지원. Git/GitHub 연동. AI Assistant 플러그인 지원. 프론트엔드 기술 및 DB 지원
     * 새로운 라이센스 모델 적용: 무료 개인 비 상용 / 유료 상용
          + 가격을 낮추기 위해 사용빈도가 낮은 기능을 제거하고 별도 유/무료 플러그인으로 제공
     * IntelliJ IDEA Ultimate 에는 Rust 플러그인이 무료로 지원. CLion 에서 사용하려면 유료 라이센스 필요

   댓글들을 보는데 평이 꽤 나쁘네요.
     * 라이선스 정책이 마음에 들지 않음
     * 아직 제대로 되지 않는 기능이 남아있음
     * 웹개발 지원을 하지 않음
     * 차라리 VSCode나 CLion + Rust 플러그인으로 개발하는게 낫다

   이런 의견들이 있습니다.
"
"https://news.hada.io/topic?id=14900","신뢰할 수 있는 무료 리눅스 지원 64비트 RISC-V 셀프 호스팅 컴퓨터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               신뢰할 수 있는 무료 리눅스 지원 64비트 RISC-V 셀프 호스팅 컴퓨터

신뢰할 수 있고, 자유로운 리눅스 호환 셀프 호스팅 64비트 RISC-V 컴퓨터

  동기

     * 목표: 완전히 신뢰할 수 있는 Free/OpenSource 컴퓨터를 구축하는 것
          + 하드웨어와 소프트웨어 시스템의 모든 행동이 완전히 공개된 HDL(하드웨어 설명 언어)과 소프트웨어 소스에 기인함
          + 컴파일러와 관련된 툴체인도 Free/OpenSource여야 하며, 해당 컴퓨터 시스템에서 빌드 및 실행 가능해야 함
          + 즉, 셀프 호스팅 Free/OpenSource 하드웨어+소프트웨어 스택이 필요함
     * 제약 조건: 실리콘 파운드리를 소유하거나 제어하지 않음
          + 자체 ASIC을 제작할 수 없으므로, FPGA에서 ""하드웨어"" 구성 요소를 구축할 것
          + FPGA 프로그래밍 및 비트스트림 생성은 Free/OpenSource 도구를 사용하여 수행할 것
     * 신뢰성 측면에서의 이점:
          + 칩 파운드리는 FPGA가 무엇에 사용될지 알 수 없으며, ""특권 비트""가 칩의 어디에 배치될지 알 수 없음
          + 이는 특권 상승 하드웨어 백도어를 방지하는 데 도움이 됨
          + FPGA는 동일한 구성 요소의 규칙적인 그리드로 구성되어 있어, 전용 ASIC보다 시각적 검사(화학적 제거 및 TEM 이미징)가 더 용이함
     * 제작 단계 공격 표면 제한:
          + 악의적인 소스 및/또는 툴체인을 빌드 가능한 소스로 제한하여, 신뢰할 수 있는 최종 제품(배포된 하드웨어+소프트웨어 컴퓨터)을 만듦

  추가 자료 및 초기 실험

     * CReSCT 2020 논문, 슬라이드 및 발표: IEEE S&P 2020 인용
     * CMU/SEI 연구 리뷰 2019 슬라이드 데크 및 발표
     * CERT/SEI에서의 신뢰할 수 있는 컴퓨팅 작업에 대한 이전 슬라이드 데크
     * lowRISC 프로젝트:
          + 구성 요소를 해당 업스트림 프로젝트로 리베이스하려는 노력
          + 이 프로젝트는 매우 유용한 자원이었으며, 구성 요소를 이해하는 데 큰 도움이 되었음
          + 그러나 작성 시점에는 폐쇄형 HDL 툴체인에 의존하며, 구성 요소 목록에 독점 IP 모듈(DRAM 컨트롤러 등)을 사용함
     * yoloRISC:
          + RV64IMAC, Rocket-Chip 기반 블링키 데모 SoC
          + Lattice ECP5 5G Versa 개발 보드를 위해 yosys/trellis/nextpnr를 사용하여 구축됨

GN⁺의 의견

     * 자유로운 하드웨어와 소프트웨어: 이 프로젝트는 완전히 자유롭고 오픈소스인 하드웨어와 소프트웨어를 구축하려는 시도로, 신뢰성과 투명성을 중시하는 사용자에게 큰 매력을 가짐.
     * FPGA의 장점: FPGA를 사용함으로써 하드웨어 백도어를 방지하고, 시각적 검사를 통해 신뢰성을 높일 수 있음.
     * 툴체인과 IP 모듈: 현재 많은 프로젝트가 폐쇄형 툴체인과 독점 IP 모듈에 의존하고 있어, 완전한 오픈소스를 추구하는 데 어려움이 있음.
     * 기술적 도전: 셀프 호스팅 Free/OpenSource 하드웨어+소프트웨어 스택을 구축하는 것은 기술적으로 매우 도전적인 작업임.
     * 미래의 가능성: 이 프로젝트는 미래의 신뢰할 수 있는 컴퓨팅 시스템 개발에 중요한 기여를 할 수 있으며, 오픈소스 커뮤니티에 큰 영향을 미칠 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * FPGA의 보안성: FPGA 제조 공정에서 하드웨어 백도어를 심는 것을 방지할 수 있음. 시스템이 완전히 멈출 수는 있지만, 정상적으로 작동하는 척하면서 주인을 배신하지는 않음.
     * FPGA의 잠재적 위험: FPGA에 숨겨진 CPU가 있을 수 있으며, 이는 FPGA 프로그램에 대한 완전한 읽기/쓰기 접근 권한을 가질 수 있음. 시스템이 인기를 끌면 제조 공정에서 더 많은 정보를 얻어 특권 비트를 찾을 가능성이 높아짐.
     * 오픈 소스 툴체인 사용: 오픈 소스 툴체인을 사용하여 RISV-V 소프트코어를 실행하는 OrangeCrab FPGA에서 리눅스 셸에 로그인하는 것이 놀라움. 과거에는 불가능했던 일임.
     * VexRiscv와 SpinalHDL: VexRiscv와 SpinalHDL을 기반으로 한 디자인을 사용 중이며, 제한된 SRAM(512KB) 때문에 리눅스를 실행하지는 않지만 이더넷과 HDMI를 지원함. CGA와 유사한 비디오 어댑터를 코딩하여 그래픽과 텍스트 모드를 지원함.
     * DDC와 신뢰 공격: 다양한 이중 컴파일(DDC)을 통해 신뢰 공격을 방지하는 작업에 대한 언급이 기쁨. DDC에 관심이 있다면 관련 링크를 참조할 것을 권장함.
     * 시스템 재구축: 시스템을 자체적으로 재구축하고 비트파일이 동일한지 검증하는 것이 좋음. 512MB에서 65MHz CPU로 4.5시간 만에 재구축할 수 있다는 점이 놀라움.
     * 초기 Unix 워크스테이션과 비교: 50-65MHz와 512MB는 1990년대 초반의 Unix 워크스테이션과 비교할 만함. RAM 측면에서는 더 나을 수 있음.
     * LiteX와 Kintex-7 FPGA: 2022년에 LiteX를 사용하여 비슷한 작업을 했지만, Kintex-7 FPGA는 Vivado가 필요했음. 결과적으로 리눅스와 Xorg를 실행하는 오픈 게이트웨어 노트북을 만들었음.
     * Shakti 프로젝트: 인도 IIT-Madras에서 개발한 RISC-V 기반의 오픈 소스 프로세서 개발 생태계인 Shakti 프로젝트를 참조할 것을 권장함.
     * OSXKVM 작업: QEMU/KVM에서 OSX를 실행하는 작업을 한 사람과 동일한 사람이 이 프로젝트를 진행함.
     * 자체 호스팅 RISC-V 머신 필요성: 완전한 자체 호스팅 RISC-V 머신이 필요하다는 의견. 현재 가장 큰 제한 요소는 충분한 RAM을 가진 FPGA 보드를 찾는 것임.
     * 자체 호스팅의 어려움: 자체 호스팅 하드웨어와 소프트웨어 아이디어는 좋지만, 60MHz CPU에서 GCC 같은 것을 빌드하는 것은 상상할 수 없을 정도로 어려움. Gentoo를 RockPro64에서 사용하다가 컴파일 시간이 너무 오래 걸려 중단한 경험을 공유함.
"
"https://news.hada.io/topic?id=14968","WinDirStat – 윈도우 디렉토리 통계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        WinDirStat – 윈도우 디렉토리 통계

WinDirStat: 디스크 사용 통계 뷰어 및 정리 도구

     * 최신 버전: 1.1.2
     * 운영 체제: Microsoft Windows

  WinDirStat 소개

     * WinDirStat은 다양한 버전의 Microsoft Windows에서 디스크 사용 통계를 시각화하고 정리하는 도구임.
     * 대체 도구:
          + Linux: KDirStat (apt-get install kdirstat 또는 apt-get install k4dirstat on Debian-derivatives)
          + MacOS X: Disk Inventory X 또는 GrandPerspective

  프로그램 기능

     * 시작 시: 전체 디렉토리 트리를 한 번 읽어들인 후, 세 가지 유용한 뷰로 표시함.
          + 디렉토리 목록: Windows 탐색기의 트리 뷰와 유사하지만 파일/서브트리 크기에 따라 정렬됨.
          + 트리맵: 디렉토리 트리의 전체 내용을 즉시 표시함.
          + 확장자 목록: 파일 유형에 대한 통계를 보여주는 범례 역할을 함.

  트리맵 설명

     * 트리맵: 각 파일을 크기에 비례하는 색상 직사각형으로 나타냄.
          + 디렉토리: 직사각형으로 구성되어 있으며, 해당 디렉토리의 파일과 서브디렉토리를 포함함.
          + 색상: 확장자 목록에 표시된 파일 유형을 나타냄.
          + 쿠션 쉐이딩: 디렉토리 구조를 더욱 명확하게 보여줌.

  오픈 소스

     * WinDirStat은 오픈 소스 소프트웨어로, GNU Public License, version 2 (GPLv2) 조건에 따라 재배포 및 수정 가능함.

  페이지 정보

     * 마지막 업데이트: 2023-10-14 20:11Z

GN⁺의 의견

     * 사용자 친화성: WinDirStat은 디스크 사용량을 시각적으로 쉽게 이해할 수 있게 해주어, 초급 소프트웨어 엔지니어에게 매우 유용함.
     * 대체 도구: Linux와 MacOS X 사용자에게도 대체 도구를 제공하여, 다양한 운영 체제에서 유사한 기능을 사용할 수 있음.
     * 시각화 도구: 트리맵과 같은 시각화 도구는 디스크 공간 관리에 있어 매우 직관적이고 효율적임.
     * 오픈 소스 장점: 오픈 소스 소프트웨어로서, 사용자들이 자유롭게 수정하고 개선할 수 있는 장점이 있음.
     * 기술적 고려사항: 대규모 디렉토리 트리를 처리할 때 성능 문제가 발생할 수 있으므로, 사용 시 시스템 자원 관리에 주의가 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * WizTree와 WinDirStat 비교
          + WizTree는 WinDirStat보다 약 50배 빠름. 이는 파일 트리를 탐색하는 대신 마스터 파일 테이블(MFT)을 읽기 때문임. WizTree는 오픈 소스는 아니지만 무료로 사용 가능하며 기부는 선택 사항임. WinDirStat의 포크 버전도 MFT를 읽도록 패치되었지만, 사용해본 사람은 많지 않음.
     * WinDirStat의 새로운 버전
          + WinDirStat의 새로운 버전이 곧 출시될 예정이며, 현재 베타 버전이 있음. 새로운 버전은 성능이 크게 향상되었으며, 메모리 사용량도 줄어듦. 네트워크 경로 스캔 속도도 빠름. 기부를 강요하지 않음.
     * Unix 시스템용 ncdu
          + ncdu는 Unix 시스템용 TUI 도구로, Mac의 홈 폴더에서 실행할 때 iCloud의 ""Mac 저장 공간 최적화"" 기능이 켜져 있으면 모든 iCloud 데이터를 다운로드하려고 시도할 수 있음.
     * Space Sniffer
          + Space Sniffer는 실시간으로 업데이트되는 시각화 도구로, 백그라운드에서 복사/이동 작업이 진행 중일 때 디렉토리가 깜빡이며 크기가 변하는 것을 볼 수 있음. Space Monger의 클론으로 간주됨.
     * WinDirStat 사용 경험
          + WinDirStat을 오랫동안 사용해왔으며, 완벽하지는 않지만 디스크 공간 문제를 해결하는 데 유용함. 예를 들어, 결혼식 사진과 비디오가 큰 공간을 차지하지만 모든 컴퓨터에 백업할 필요는 없음.
     * 디렉토리 연결 및 링크 문제
          + WinDirStat이 디렉토리 연결 및 링크를 정확하게 처리하지 못하는 문제를 해결했는지 궁금해하는 의견. NTFS 압축 및 대체 데이터 스트림에 대해서는 불확실함.
     * WizTree의 속도
          + WizTree는 오픈 소스는 아니지만 NTFS에서 WinDirStat보다 훨씬 빠름. 이는 파일 시스템 메타데이터를 직접 스캔하기 때문임.
     * Linux용 QDirStat
          + Linux 사용자들을 위한 QDirStat 도구 소개.
     * 운영 체제 기본 기능 부족
          + 2024년에도 이러한 기본 기능이 운영 체제에 포함되지 않은 점에 대한 아쉬움.
     * 트리맵 시각화
          + 트리맵은 계층적 데이터를 시각화하는 멋진 방법임. 국제 무역 및 경제 통계를 시각화하는 Observatory of Economic Complexity도 참고할 만함.
"
"https://news.hada.io/topic?id=15028","2018년 Talking Points 최적화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        2018년 Talking Points 최적화

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 개인 경험과 코드 품질
          + 혼자 일할 때는 코드 품질을 스스로 관리할 수 있지만, 팀에서는 그렇지 못함. 코드 리팩토링 요청이 자주 무시되며, 이는 지속적인 좌절감을 초래함. 오래된 코드를 다시 검토할 때 자신의 실수를 깨닫게 되며, 이는 유지보수 가능한 코드를 작성하는 데 큰 교훈이 됨.
     * 실수와 학습
          + 실수를 논의하는 것은 학습 기회이자 개방적인 문화를 조성하는 데 도움을 줌. 완벽주의 태도는 실수를 줄이는 데 도움이 되지 않으며, 오히려 더 많은 개인적인 노력이 필요함.
     * 복잡한 문제 해결
          + 동료들이 복잡한 문제 해결을 제안할 때, 간단한 방법을 선택하는 것이 더 나을 수 있음. 이는 때로는 동료들에게 자신들의 태도를 반성하게 만듦.
     * 코드 품질에 대한 이해
          + 코드가 최적이 아니라고 해서 무능력을 의미하지 않음. 개발자들이 긴급한 마감일이나 다른 우선순위 때문에 최적의 코드를 작성하지 못할 수 있음.
     * 건설적인 피드백
          + 블로그 포스트에 대한 부정적인 댓글을 받으면, 이를 링크로 연결하여 논의를 건강한 방향으로 유도함.
     * 조직과 코드 품질
          + 모든 엔지니어가 나쁜 코드를 작성할 수 있으며, 코드 품질은 종종 조직의 문제임. 이는 특정 엔지니어의 능력과는 무관함.
     * 피드백 수용
          + 피드백을 받을 때, 이는 개인에 대한 공격이 아님. 다른 사람의 의견을 수용하는 것이 중요함.
     * 피드백의 양면성
          + 피드백을 수용하는 것도 중요하지만, 피드백을 제공하는 사람의 능력도 고려해야 함.
"
"https://news.hada.io/topic?id=15014","한국 서비스와 미국 서비스의 감성 차이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         한국 서비스와 미국 서비스의 감성 차이

     * 한국 스타트업이 미국 진출시 UI 현지화를 잘해야 됨
     * 한국 감성이 녹아든 UI는 미국에서 이질적일 수 있음
     * 샌드버드는 초창기 디자인 레퍼런스로 미국 제품만 참고하여 이질감을 해소함
     * 한국은 아기자기 하고 감성적인 것을 선호하고 미국은 쿨하고 이성적인 것을 선호함
     * 이와 같은 차이는 색상, 폰트 크기, UX라이팅, 그래픽 등에서 드러남
     * 한국은 색의 대비가 약하고 파스텔 톤을 많이 쓰는 반면 미국은 색 대비가 강하고 포인트 컬러의 채도가 높음
     * 한국은 아기자기한 아이콘, 그래픽, 캐릭터를 많이 쓰는 반면 미국은 프로페셔널 해보이는 그래픽을 많이 사용
     * 글로벌 제품 레퍼런스 찾을때 도움될 만한 사이트 리스트
     * https://dis.qa/wHPUP5
     * https://godly.website/
     * http://dark.design/
     * https://lnkd.in/gXwjq_NH
     * https://minimal.gallery/
     * https://lnkd.in/gkQMWMMX
     * http://startupwebsites.co/
     * https://lnkd.in/gg7NTPpW
     * https://mobbin.com/
     * https://refero.design/
     * https://layers.to/
     * https://land-book.com/
"
"https://news.hada.io/topic?id=14990","마이크로소프트 장애로 Bing, Copilot, DuckDuckGo 및 ChatGPT 인터넷 검색 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       마이크로소프트 장애로 Bing, Copilot, DuckDuckGo 및 ChatGPT 인터넷 검색 영향

Microsoft 대규모 장애로 Bing, Copilot, DuckDuckGo 및 ChatGPT 인터넷 검색 영향

     * 기사 작성자: Mayank Parmar
     * 작성일: 2024년 5월 23일, 오전 4시 44분


  Microsoft 장애로 인한 영향

     * Microsoft의 대규모 장애로 인해 Bing.com, 웹 및 모바일용 Copilot, Windows용 Copilot, ChatGPT 인터넷 검색 및 DuckDuckGo에 영향이 발생함.
     * 장애는 동부 표준시 기준 오전 3시경에 시작되었으며, 주로 아시아와 유럽의 사용자들에게 영향을 미침.
     * 사용자 보고서와 테스트에 따르면 Bing.com을 열려고 하면 빈 페이지나 429 HTTP 코드 오류 페이지가 나타남. 그러나 Bing 검색은 직접 접근하면 여전히 작동함.
     * 이상하게도, 장애는 홈페이지에만 영향을 미침.


  Bing 및 Copilot 서비스

     * Bing을 사용하려면 특정 URL로 이동하여 검색을 진행하면 정상적으로 작동함.
     * 그러나 Copilot은 웹사이트, 앱 또는 Windows에서 완전히 오프라인 상태임.
     * ChatGPT 인터넷 검색과 DuckDuckGo도 Bing API를 사용하기 때문에 유사한 문제를 겪고 있음.
     * DuckDuckGo는 검색 페이지를 로드하지 못하고 ""검색 결과를 표시하는 중 오류가 발생했습니다. 다시 시도해 주세요.""라는 오류 메시지를 표시함.


  Microsoft의 대응

     * Microsoft는 아직 장애에 대해 공식적인 언급을 하지 않았으나, OpenAI는 지원 페이지 업데이트를 통해 ChatGPT 인터넷 검색 문제를 확인함.
     * 업데이트 1: Microsoft는 사용자가 Microsoft Copilot 서비스에 접근할 수 없는 문제를 확인함. ""문제의 원인을 격리하기 위해 작업 중입니다. 자세한 정보는 관리 센터의 CP795190에서 확인할 수 있습니다.""라고 X에 게시함.
     * 업데이트 2: DuckDuckGo는 다시 온라인 상태로 돌아왔으나, Bing.com과 Copilot은 여전히 문제가 있음. Microsoft는 ""서비스 복구를 가속화하기 위해 요청을 대체 서비스 구성 요소로 전환하고 있습니다.""라고 새로운 업데이트에서 언급함.
     * 업데이트 3: Microsoft의 텔레메트리 데이터에 따르면 서비스가 계속해서 복구 중임. ""문제의 근본 원인을 적극적으로 조사 중이며 필요한 경우 추가 완화 조치를 취할 것입니다.""라고 최신 업데이트에서 언급함.
     * 업데이트 4: Bing과 Copilot이 다시 온라인 상태로 돌아오고 있으나, Android, iOS 및 Windows 앱은 여전히 로드되지 않음.


  관련 기사

     * Microsoft Copilot, 24시간 장애 후 전 세계적으로 복구됨
     * Microsoft: Windows 24H2에서 Cortana 및 WordPad 앱 제거 예정
     * Windows 11 24H2에 올 가을에 예상되는 새로운 기능
     * Windows 11 24H2, Release Preview Insiders에 배포 시작
     * Microsoft, 사이버 스파이 전술을 사용하는 기프트 카드 도둑 발견


GN⁺의 의견

     * 장애의 원인: Microsoft의 대규모 장애는 주로 Bing API를 사용하는 서비스에 영향을 미쳤음. 이는 API 의존성이 높은 서비스의 취약성을 보여줌.
     * 서비스 복구 과정: Microsoft는 문제를 신속히 해결하기 위해 다양한 조치를 취하고 있음. 이는 대규모 서비스 제공자가 장애 발생 시 어떻게 대응하는지를 잘 보여줌.
     * 사용자 영향: 주로 아시아와 유럽의 사용자들이 영향을 받았으며, 이는 글로벌 서비스 제공자가 지역별로 다른 영향을 받을 수 있음을 시사함.
     * 대체 서비스: Bing API를 사용하는 다른 서비스들도 영향을 받았기 때문에, 유사한 기능을 제공하는 다른 검색 엔진이나 도구를 고려해 보는 것도 좋음.
     * 기술적 고려사항: 새로운 기술이나 서비스를 도입할 때는 장애 발생 시의 대응 계획과 대체 서비스 사용 가능성을 항상 염두에 두어야 함.
"
"https://news.hada.io/topic?id=14928","병 속의 도시 – 256 바이트 레이캐스팅 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      병 속의 도시 – 256 바이트 레이캐스팅 시스템

City In A Bottle – 256 바이트 레이캐스팅 시스템

     * 소개
          + 오늘은 256 바이트의 HTML 파일에 담긴 작은 레이캐스팅 엔진과 도시 생성기를 소개함.
          + 이 프로그램은 여러 개념을 작은 공간에 담아 퍼즐을 푸는 것처럼 이해할 수 있음.
          + 주요 구성 요소는 HTML 코드, 프레임 업데이트 루프, 렌더링 시스템, 레이캐스팅 엔진, 그리고 도시 자체임.
     * 전체 코드
          + 이 코드는 단순한 JavaScript 스니펫이 아니라 전체 HTML 프로그램임.
          +
<canvas style=width:99% id=c onclick=setInterval('for(c.width=w=99,++t,i=6e3;i--;c.getContext`2d`.fillRect(i%w,i/w|0,1-d*Z/w+s,1))for(a=i%w/50-1,s=b=1-i/4e3,X=t,Y=Z=d=1;++Z<w&(Y<6-(32<Z&27<X%w&&X/9^Z/8)*8%46||d|(s=(X&Y&Z)%3/Z,a=b=1,d=Z/w));Y-=b)X+=a',t=9)>

HTML 코드

     * HTML 코드
          + HTML 부분은 간단한 캔버스 요소와 onclick 이벤트로 구성됨.
          +
<canvas style=width:99% id=c onclick=setInterval('',t=9)>

          + 캔버스 요소의 id는 'c'로 설정되어 JavaScript에서 접근 가능함.
          + onclick 이벤트는 프로그램을 시작하며, setInterval 호출로 업데이트 루프를 생성함.

JavaScript 코드

     * JavaScript 코드
          + 캔버스가 클릭될 때 실행되는 199 바이트의 JavaScript 코드.
          +
for(c.width=w=99,++t,i=6e3;i--;c.getContext`2d`.fillRect(i%w,i/w|0,1-d*Z/w+s,1))for(a=i%w/50-1,s=b=1-i/4e3,X=t,Y=Z=d=1;++Z<w&(Y<6-(32<Z&27<X%w&&X/9^Z/8)*8%46||d|(s=(X&Y&Z)%3/Z,a=b=1,d=Z/w));Y-=b)X+=a

     * 코드 분석
          + 코드를 읽기 쉽게 분해함.
          +
c.width = w = 99
++t
for (i = 6e3; i--;){
  a = i%w/50 - 1
  s = b = 1 - i/4e3
  X = t
  Y = Z = d = 1
  for(; ++Z<w &  (Y < 6 - (32<Z & 27<X%w && X/9^Z/8)*8%46 ||  d | (s = (X&Y&Z)%3/Z, a = b = 1, d = Z/w));) {
    X += a
    Y -= b
  }
  c.getContext`2d`.fillRect(i%w, i/w|0, 1 - d*Z/w + s, 1)
}

     * 코드 단계별 설명
          + c.width = w = 99: 캔버스를 초기화하고 너비를 99 픽셀로 설정함.
          + ++t: 시간 변수를 증가시켜 애니메이션을 만듦.
          + for (i = 6e3; i--;){}: 루프를 통해 각 픽셀의 밝기를 결정함.
          + a = i % w / 50 - 1: 카메라 벡터의 수평 성분을 계산함.
          + b = s = 1 - i / 4e3: 카메라 벡터의 수직 성분을 계산함.
          + X = t: 시간 값을 시작 X 위치로 사용함.
          + Y = Z = d = 1: Y, Z, d 값을 초기화함.
          + for(; ++Z<w & ...;): 레이캐스팅 시스템이 충돌을 감지할 때까지 루프를 돌림.
          + c.getContext2d.fillRect(i%w, i/w|0, 1 - d*Z/w + s, 1): 각 픽셀을 그려 최종 이미지를 만듦.

추가 학습

     * 추가 학습
          + 이 데모는 Revision 2022 데모 파티에 출품되었으며, Pouet에서 확인 가능함.
          + Shadertoy에서 256 바이트 셰이더로 확장된 버전을 확인할 수 있음.
          + Daniel Darabos가 만든 인터랙티브 도구를 통해 프로그램의 다양한 측면을 실시간으로 조작 가능함.

GN⁺의 의견

     * 흥미로운 점
          + 이 프로그램은 매우 작은 코드로 복잡한 그래픽을 생성하는 방법을 보여줌.
          + 초급 소프트웨어 엔지니어에게도 이해하기 쉬운 기본 수학만 사용함.
          + 코드 최적화와 미니멀리즘의 좋은 예시로, 코드 골프와 같은 대회에서 유용할 수 있음.
     * 비판적 시각
          + 코드가 매우 압축되어 있어 가독성이 떨어질 수 있음.
          + 실용적인 응용보다는 예술적, 실험적 목적에 더 적합함.
     * 관련 기술
          + 비슷한 프로젝트로는 Shadertoy에서 다양한 셰이더 예제를 확인할 수 있음.
          + Dwitter와 같은 플랫폼에서 다른 작은 코드 예제를 탐색할 수 있음.
     * 기술 도입 고려사항
          + 이 기술을 도입할 때는 코드의 가독성과 유지보수성을 고려해야 함.
          + 작은 코드로 복잡한 기능을 구현하는 데 따른 성능 최적화와 디버깅의 어려움을 인지해야 함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 1K Pinball Game in JavaScript:
          + ""이 정도의 코드로 이렇게 많은 정보를 담아낼 수 있다는 것이 놀라움.""
          + ""이게 정말 멋지지만, 기사를 읽는 동안 루프가 계속 돌아서 노트북이 과열됨.""
          + ""관련 자료: [Atari 2600] Pitfall의 월드 빌드 방식, 절차적 생성, 게으른 평가 등.""
     * 절차적 생성 및 게으른 평가:
          + ""절차적 생성에 대한 다양한 자료 링크 제공.""
          + ""게으른 평가와 레이트레이싱 알고리즘의 유사성에 대한 관찰.""
     * 기타 의견:
          + ""정말 멋지다! 잘했음.""
          + ""작업과 기사 모두 놀라움.""
          + ""256바이트 MS-DOS 데모와 유사한 Remnants by Alcatraz - 유튜브 링크 포함.""
          + ""자바스크립트로 작성된 것이 더 인상적임.""
          + ""정말 놀라움.""
          + ""읽는 재미가 있음.""
          + ""이걸 좋아한다면 트위터의 #tweetcart도 좋아할 것. Pico-8 가상 콘솔을 위한 트윗 크기의 프로그램들.""
"
"https://news.hada.io/topic?id=14967","스페이스 퀘스트 II 마스터 디스크 실수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스페이스 퀘스트 II 마스터 디스크 실수

  Space Quest II 마스터 디스크 실수

     * 2024년 5월 22일
     * 이 디스크의 외관에는 특별한 점이 없지만, 저장된 데이터에는 Sierra On-Line이 전혀 알지 못했을 것이며 포함시키고 싶지 않았을 특별한 것이 있음.
     * 만약 Sierra 어드벤처 게임 컬렉션에 720KB 플로피 디스크가 있다면, 당신은 혼자가 아님.
     * Space Quest II의 버전 2.0D와 2.0F는 드물지 않았음.

  단순한 디렉토리 목록

     * 디스크의 파일 목록을 보면 특별한 점이 없음.
     * 버전 2.0D의 목록을 보면, 다른 Sierra 게임 디스크와 다를 바 없음.
     * 타임스탬프는 게임의 주요 데이터 파일(PICDIR, LOGDIR, VIEWDIR, SNDDIR, VOL.0, VOL.1)이 1988년 3월 14일에 작성되었음을 보여줌.
     * .OVL 파일은 1988년 3월 15일, AGI 인터프리터 코드는 1988년 3월 18일에 작성됨.
     * 디렉토리 목록에서 특이한 점은 디스크의 ""사용되지 않은"" 공간이 사용된 공간보다 많다는 것임. 302,918 바이트가 사용되었고 402,432 바이트가 사용되지 않은 것으로 표시됨.

  헥스 에디터 사용

     * 디스크에 무엇이 있는지 더 자세히 보기 위해 헥스 에디터라는 도구가 필요함.
     * 1980년대에는 Norton Utilities가 자주 사용되었고, 현대에는 Maël Hörz가 작성한 HxD Hex Editor가 훌륭한 대안임.
     * 새로 포맷된 DOS 플로피 디스크에서는 사용되지 않은 섹터가 0xF6 바이트 값으로 채워져 있어야 함.
     * Space Quest II 버전 2.0D의 디스크 2는 이 경우에 해당하지만, 디스크 1에는 0xF6 바이트로 채워진 섹터가 없음.
     * 디스크 1의 사용되지 않은 섹터는 C 소스 코드처럼 보이는 것으로 채워져 있음.
     * 이는 마스터 디스크가 다른 용도로 사용되었고, 파일이 삭제된 후 제대로 포맷되지 않았음을 강하게 시사함.

  AGI 인터프리터 소스 코드

     * 헥스 에디터에서 데이터를 보면 텍스트처럼 보임.
     * ASCII 텍스트를 텍스트 에디터에 복사하여 보면 C 소스 코드처럼 보임.
     * 두 개의 함수가 정의되어 있으며, 하나는 DisplayStatusLine, 다른 하나는 StatusLineOn임.
     * DisplayStatusLine 함수는 현재 점수와 소리 상태를 표시하는 텍스트 줄을 표시하는 것으로 보임.
     * 이 소스 코드는 AGI 인터프리터의 일부임.
     * 헥스 에디터에서 더 많은 사용되지 않은 섹터를 스크롤하면 많은 양의 소스 코드가 있음.
     * 이 소스 코드는 연속된 섹터에 저장되어 있어 추출하기 쉬움.
     * 총 93개의 파일로 나뉘며, 75개의 C 소스 파일, 16개의 어셈블리 언어 소스 파일, 2개의 DOS BAT 파일로 구성됨.
     * 총 15,000줄 이상의 코드가 있으며 대부분의 파일이 완전함.
     * 이 Space Quest 2 게임 디스크에는 Sierra On-Line의 AGI 인터프리터 소스 코드의 약 70%가 포함되어 있음.

  소스 파일 변경 이력

     * 일부 소스 파일에는 헤더 주석에 변경 이력이 포함되어 있음.
     * 예를 들어 ANIMATE.C 소스 파일의 헤더 주석은 파일 이름, 기능 설명, 컴파일러 이름(MWC), 변경 이력을 포함함.
     * 프로그래머들은 자신의 이니셜을 사용하여 자신을 식별함.
     * JAS는 AGI 인터프리터 코드를 작업한 주요 프로그래머인 Jeff Stephenson, DCI는 Chris Iden임.
     * Robert Heitman도 언급되지만, 그의 초점은 주로 그래픽 도구에 있었음.

  AGI.EXE 메모리 맵

     * SQ2 2.0D 720KB 디스크 1에는 AGI.EXE 실행 파일의 메모리 맵도 포함되어 있음.
     * 메모리 맵은 AGI 인터프리터를 구성하는 모듈과 소스 파일의 목록을 제공함.
     * 총 98개의 소스 파일이 언급되었으며, 그 중 71개가 SQ2 디스크에 완전하게 포함됨.
     * 이는 AGI 인터프리터 소스 코드의 약 70%가 SQ2 디스크에 포함되어 있음을 의미함.

  Sierra의 지적 재산

     * 1984년 Sierra On-Line은 사업을 유지하기 위해 고군분투했음.
     * King’s Quest의 성공이 그들의 운명을 바꾸는 데 큰 역할을 함.
     * AGI 어드벤처 게임 시스템과 그로 인해 만들어진 게임들이 Sierra On-Line의 주요 수익원이었음.
     * AGI 인터프리터 소스 코드는 Sierra의 핵심 지적 재산이었음.
     * 소스 코드의 70%가 대량으로 복사되어 고객에게 발송된 것은 큰 실수였음.

  어떻게 이런 일이 발생했는가?

     * 새로운 게임 버전이 준비될 때, ""생산 사본"" 마스터 디스크를 생성하여 FormMaster 디스크 복제 기계에서 사용함.
     * 이 기계는 디스크의 모든 바이트를 복사함.
     * Space Quest II 버전 2.0D와 2.0F의 디스크 1은 포맷되지 않은 상태에서 사용되었음.
     * 이로 인해 수십만 개의 SQ2 디스크가 AGI 인터프리터 소스 코드의 70%를 포함하게 됨.

  위기를 모면한 상황

     * 거의 확실히 의도치 않은 실수였음.
     * Sierra, 경쟁사, 고객 모두 이 사실을 알아차리지 못했음.
     * 2016년 10월 온라인 사용자 NewRisingSun에 의해 처음 발견됨.
     * AGI 시대의 끝에 발생한 일이었기 때문에 큰 문제가 되지 않았음.
     * 이는 흥미로운 디지털 고고학 이야기이며, Sierra On-Line이 AGI 인터프리터를 어떻게 작성했는지 볼 수 있게 해줌.


   관심 있는 사람들을 위해, 추출된 AGI 인터프리터 소스 코드를 GitHub 리포지토리에 업로드했음: https://github.com/lanceewing/agi

   AGILE, 웹 기반 AGI 인터프리터를 확인해보세요. 이 구현은 원래 AGI 소스 코드에 의해 안내되었음.


GN⁺의 의견

     * 디지털 고고학의 가치: 이 기사는 디지털 고고학의 중요성을 보여줌. 오래된 소프트웨어와 데이터는 역사적, 기술적 가치를 지니고 있음.
     * 보안 실수의 교훈: 이 사건은 데이터 보안과 관리의 중요성을 강조함. 민감한 데이터를 다룰 때는 항상 철저한 검증과 포맷이 필요함.
     * 기술 발전의 증거: AGI 인터프리터 소스 코드는 1980년대 게임 개발의 기술적 진보를 보여줌. 이는 현대 개발자들에게 영감을 줄 수 있음.
     * 오픈 소스의 힘: 원래 소스 코드가 공개됨으로써, 현대 개발자들이 이를 연구하고 새로운 프로젝트에 활용할 수 있는 기회를 제공함.
     * 경쟁사의 위험: 만약 이 소스 코드가 당시 경쟁사에 의해 발견되었다면, Sierra On-Line의 경쟁 우위가 크게 손상되었을 것임. 이는 기업의 지적 재산 보호의 중요성을 상기시킴.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Double Dragon II: The Revenge for DOS (1989)
          + 이 게임은 두 개의 플로피 디스크로 배포되었으며, 하나의 디스크에는 삭제된 아카이브 파일에 전체 소스 코드가 포함되어 있었음. DIR 명령어로는 보이지 않지만 쉽게 복구 가능했음.
     * 신디사이저 ROM 리버스 엔지니어링
          + 최근 신디사이저 ROM을 리버스 엔지니어링하면서 Yamaha DX9 ROM에서 펌웨어 심볼 테이블의 일부와 개발 시스템 코드 블록을 발견했음. 이러한 발견은 과거 개발 도구에 대한 깊은 이해를 제공해줌.
     * 어린 시절의 게임 추억
          + 이 게임은 어린 시절의 중요한 부분이었으며, 현재의 삶에서는 같은 종류의 ""연결""을 느끼기 어려움. Space Quest 2, 3, 4는 DNA의 일부처럼 느껴짐.
     * AGI 엔진의 비밀
          + AGI 엔진에는 경쟁자가 유출로부터 이익을 얻을 만한 특별한 비밀은 없다고 생각함. Sierra 게임은 그래픽과 스토리 작성에 많은 노력을 기울였기 때문에 성공했음.
     * 메모리 맵과 소스 코드
          + 메모리 맵, 일부 소스 코드, 리버스 엔지니어링 도구를 사용하면 전체를 재구성할 수 있을 것임.
     * HxD Hex Editor
          + 현대의 훌륭한 도구로는 Maël Hörz가 작성한 HxD Hex Editor가 있음. macOS 사용자는 Hex Fiend를 확인해볼 만함.
     * Air Fortress의 ROM
          + Famicom 버전의 Air Fortress에는 의도치 않게 많은 데이터가 포함되어 있었음. 일본 카트리지는 128+128KB였고, 미국 NES 버전은 128+32KB로 축소됨.
     * 수작업 릴리스 아티팩트
          + 과거에는 수작업으로 릴리스된 아티팩트에 남은 데이터가 포함되는 경우가 많았음. 현대의 CICD와 자동화된 빌드 시스템 덕분에 이러한 일이 줄어듦.
     * 소스 코드 발견
          + 디스크에 소스 코드가 포함된 것을 아무도 발견하지 못했음. 이는 최근 테트리스와 슈퍼 마리오 브라더스의 발견을 떠올리게 함. 인터넷과 에뮬레이터 덕분에 오래된 게임들이 새로운 생명을 얻음.
     * 변경 이력 주석
          + 변경 이력 주석은 세부 사항과 장인 정신을 보여줌. 이는 'No Silver Bullet' 에세이를 떠올리게 하며, 소프트웨어가 여전히 프로그래머에 의해 한 줄씩 작성되고 있음을 시사함.
"
"https://news.hada.io/topic?id=14899","내 필체를 코딩하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             내 필체를 코딩하는 기술

블록 스크립트

     * 이 전 기사는 블록 인쇄 버전의 알파벳에 관한 것임.
     * 요약하자면, 다음과 같은 과정을 통해 만들었음:
          + 각 글자의 경로의 주요 지점을 정의하는 코드 작성 (~글자당 10개의 지점).
          + Chaikin의 곡선 알고리즘을 사용하여 경로를 부드럽게 만듦.
          + 경로를 가변 두께의 형태로 변환.
          + p5js를 사용하여 형태 경로를 그림.
     * 이렇게 보였음:
     * 이 시스템으로 문장을 생성하는 방법에 대한 기사가 곧 나올 예정임. 뉴스레터에 가입하여 소식을 받아보길 바람.
     * 원래 글자의 경로를 정의하는 것은 코드에 위치를 작성하고 지점을 조정하여 글자가 올바르게 보이도록 하는 매우 수작업이었음.
     * 커서체 코딩을 할 때는 이 과정을 간소화했음.

글자 디자인

     * p5js 에디터에서 쉽게 접근할 수 있도록 경로의 주요 지점을 정의하고 출력하는 도구를 만들었음.
     * 샘플 글자를 표시하고 새로운 글자를 디자인하는 영역을 제공함.
     * 다음 단계로 진행:
          + 경로의 주요 지점을 클릭하여 배치 - 결과 Chaikin 곡선 경로가 표시됨.
          + 'p'를 눌러 편집 모드로 전환.
          + 지점을 선택하고 위치로 드래그.
          + 'enter'를 눌러 경로를 콘솔에 출력.
     * 각 글자에 대해 2-3개의 옵션을 만들었음.
     * 결과 경로는 다음과 같음:
[{x:0.7,y:22.5},{x:8.2,y:18.1},{x:8.9,y:11.2},{x:3.7,y:11.4},{x:1.7,y:18.9},{x:8.4,y:22.4},{x:17.7,y:22.0}]

     * 자신의 필체를 가이드로 사용하고 싶어서 소문자와 대문자의 예시를 작성하고 이미지를 도구에 직접 로드하여 추적했음.
     * w/a/s/d 키를 사용하여 이미지를 올바른 위치에 배치하고 r/e 키로 이미지를 확대/축소.
     * 숫자는 글자 생성 창에 해당 영역을 배치하기 위한 x y 좌표임.
     * 모든 경로를 만들고 곡선을 그리고 가변 너비의 형태로 변환한 후, 각 글자는 개별적으로 이렇게 보였음.

커서체화

     * 때로는 글자를 연결하는 것이 쉬움. 주요 지점의 경로에서 다음 경로로 바로 이동한 후 Chaikin 곡선을 한 번에 적용.
     * 그러나 일부 글자 쌍은 잘 맞지 않음.
     * 예를 들어, na 쌍에서는 n의 마지막 지점이 낮고 a의 첫 지점이 높아 a를 대각선으로 가로지르는 경로가 생겨 e처럼 보임.
     * ti 쌍에서는 t가 기준선 위에 끝나고 i가 기준선에서 시작하여 부자연스러운 능선이 생김.
     * 이러한 문제를 해결하기 위해 a의 시작에 추가 지점을 추가하고 t의 마지막 두 지점을 삭제할 수 있음.
     * 그러나 모든 시나리오에서 글자를 이렇게 변경할 수는 없음.
     * 예를 들어, a가 단어의 시작에 있으면 추가 지점이 잘못된 위치에 있고 w와 같은 글자 뒤에 오면 a를 다른 방식으로 가로지르는 선이 생김.
     * t가 k와 쌍을 이루면 변형됨.
     * 글자 경로의 시작과 끝 지점은 다른 글자와의 위치에 따라 달라져야 함.
     * 처음에는 특정 ""문제"" 쌍을 호출하고 그에 대한 규칙을 작성하려 했으나, 결국 각 경로의 시작과 끝에 숫자를 추가하여 다음을 나타내도록 했음:
          + 다른 글자와 연결되지 않음 (0)
          + 기준선 주변에서 다른 글자와 연결됨 (1)
          + 기준선 바로 위에서 다른 글자와 연결됨 (2)
          + x-높이 주변에서 다른 글자와 연결됨 (3)
     * 예시:
     * 각 글자 경로는 이제 다음과 같이 보임. 시작과 끝의 한 자리 숫자에 주목:
[0,{x:12.2,y:13.2},{x:13.5,y:11.0},{x:6.2,y:8.4},{x:1.1,y:13.0},{x:1.8,y:19.0},{x:7.0,y:23.4},{x:15.2,y:23.6},{x:18.4,y:22.1},1]

     * 모든 글자 쌍을 테스트했음:
     * 여기서 각 글자에 대해 여러 경로 옵션을 가지고 있고, 글자가 인접한 글자에 따라 편집됨으로 인해 생긴 변화를 볼 수 있음.
     * 이상적으로는 각 글자에 대해 최소 5-6개의 경로 옵션을 가지고 싶지만 파일 크기와의 균형을 맞춰야 함.

단어 생성

     * 단어가 생성될 때:
          + 각 글자에 대해 2-3개의 다른 옵션 중 기본 경로가 선택됨.
          + 경로의 끝에 대한 정보가 인접한 글자에 전달됨 (같은 글자의 다른 경로 옵션은 다른 끝점을 가질 수 있으므로 모든 글자 경로가 먼저 선택되어야 함).
          + 기본 경로가 이웃 글자에 반응하여 조정됨. 예를 들어, 이전 글자의 끝 높이가 2이면 이 경로의 시작에서 1점을 제거하거나 다음 글자의 시작 높이가 1이면 특정 위치에 추가 지점을 추가함.
     * 조정 함수는 약간 복잡할 수 있음. 예를 들어, 글자 q에 대한 함수는 다음과 같음:
// ip = 경로
// pc = 이전 글자의 끝 정보
// nc = 다음 글자의 시작 정보
// n = 이 글자에 대해 선택된 경로의 인덱스
adjust: (ip, pc, nc, n) => {
  // 이 글자의 끝에 70% 확률로 중단을 추가
  if (rand() < 0.7 ) ip.splice(-1, 1, 0);
  // 4개의 옵션 중 [2]가 이 경로에 대해 선택된 경우
  if (n < 2) {
    // 이전 글자가 3에서 끝나면 처음 두 지점을 다른 지점으로 교체
    if (pc == 3) ip.splice(1, 2, {x:10,y:12});
    // 그렇지 않으면 0이 아닌 경우 시작에 지점을 추가
    else if (pc > 0) ip.splice(1, 0, {x:10,y:20});
  }
  // 이 글자와 다음 글자 사이에 중단이 없는 경우 (0)
  if (nc > 0 && ip[ip.length-1] != 0){
    // 마지막 두 지점을 다른 지점으로 교체
    ip.splice(-3, 2, {x:16,y:34});
  }
}

     * 그러나 종종 짧음. 예를 들어, 글자 n에 대한 함수는 다음과 같음:
adjust: (ip, pc, nc) => {
  // 다음 글자가 3에서 시작하면 무작위로 중단을 생성하거나 마지막 지점을 이동
  if (nc == 3) rand() < 0.3 ? ip.splice(-1, 1, 0) : ip.splice(-2, 1, {x:17,y:23.8});
}

     * 다음으로 모든 글자의 기본 경로가 함께 연결됨. 이 과정에서 경로의 1, 2, 3을 무시하지만 0이 있을 때마다 새로운 경로를 시작하여 중단을 생성.
     * 그런 다음 경로를 곡선으로 만들고 가변 너비 형태로 변환하고 Perlin 노이즈를 사용하여 약간의 떨림을 추가한 후, 커서체 글씨는 이렇게 보임.
     * 이 문장을 생성하는 방법에 대한 기사가 곧 나올 예정임. 뉴스레터에 가입하여 소식을 받아보길 바람.
     * 재미로, 플로터를 통해 실행된 코딩된 필체와 실제 필체를 나란히 비교한 것임.

무게는 얼마인가?

     * 블록 인쇄용 글자 클래스는 9.7kb였음.
     * 커서체 글자 클래스는 현재 26.1kb임 (압축 후).
     * 이 클래스는 각 글자에 대해 여러 경로와 지점을 조정하는 함수가 포함되어 있어 더 큼. 그러나 몇 가지 다른 절약 방법도 있음.
     * 더 많은 절약이 가능할 것 같음. 나는 코드 골프 마법사는 아니지만 몇 가지 아이디어가 있음.
     * 예를 들어, 현재 글자는 기본 글꼴 크기 20을 기준으로 설계되고 크기가 조정됨. 이는 많은 지점이 x: 14.5와 같이 정의됨을 의미하지만, 기본 크기를 200으로 변경하면 지점을 145로 정의하여 소수점을 제거할 수 있음. 이 변경을 신중하게 해야 하므로 나중에 할 일 목록에 있음.

사용 방법

     * 이 필체의 주요 목적은 내가 작업 중인 다이어그램의 제목, 레이블 및 낙서 노트용임.
     * 그러나 텍스트 자체를 가지고 노는 것도 매우 재미있음.
     * 경로를 인코딩한 덕분에 글꼴을 사용하는 대신 경로를 가지고 놀 수 있음. 글자의 위치를 변경하고 개별 글자의 두께를 변경하는 등.
     * 다음으로 이 필체를 다이어그램에 통합할 예정이지만, 텍스트 자체에 집중한 무언가를 만들 계획도 있음. 매우 아름답고 많은 가능성이 있음.

GN⁺의 의견

     * 이 기사는 JavaScript와 p5.js를 사용하여 필체를 디지털화하는 과정에 대한 흥미로운 예시를 제공함. 이는 소프트웨어 엔지니어에게 창의적인 프로젝트를 통해 코딩 기술을 연습할 수 있는 좋은 기회가 될 수 있음.
     * Chaikin의 곡선 알고리즘과 같은 수학적 알고리즘을 실제 프로젝트에 적용하는 방법을 배울 수 있음. 이는 그래픽 프로그래밍에 대한 이해를 높이는 데 도움이 됨.
     * 경로 조정 함수와 같은 복잡한 로직을 다루는 방법을 배울 수 있음. 이는 코드의 유연성과 확장성을 높이는 데 중요한 기술임.
     * 이 프로젝트는 파일 크기 최적화와 같은 실용적인 문제를 다루고 있음. 이는 실제 소프트웨어 개발에서 중요한 고려 사항임.
     * 이 기술을 도입할 때는 경로 정의와 조정 함수 작성에 많은 시간이 소요될 수 있음. 그러나 결과물은 매우 개인화되고 독특한 텍스트 표현을 제공함.
"
"https://news.hada.io/topic?id=15010","아시아의 히키코모리: 네 벽 안의 삶","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          아시아의 히키코모리: 네 벽 안의 삶

아시아 청년들이 세상에서 철수하는 이유

     * ""침대에 숨었고, 전혀 밖에 나가지 않았음...""
     * ""... 침대에서 반 걸음도 나가지 않았음.""
     * ""솔직히 말해서, 포기한 것 같았음.""

  축소된 삶: 왜 일부 아시아 청년들이 세상에서 철수하는가

     * 기사 작성자: Jessie Yeung, Sophie Jeong, Carlotta Dotto, Woojin Lee, Kenneth Uzquiano, Saki Toi
     * 발행일: 2024년 5월 25일

  홍콩의 사례

     * 찰리의 이야기
          + 찰리는 15세 때부터 침대에서만 생활하기 시작했음.
          + 현재 19세인 찰리는 여전히 세상 밖을 탐험하는 법을 배우고 있음.
          + 찰리는 ""매우 우울하고 혼란스러웠고, 내가 무엇을 원하는지 몰랐음""이라고 말함.
          + 찰리는 히키코모리 중 하나로, 이는 사회에서 자신을 고립시키는 사람들을 의미함.
          + 이 현상은 아시아에서 처음 나타났으며, 일본에서 특히 잘 문서화되었음.
          + 최근 미국, 스페인, 프랑스 등 다른 지역에서도 유사한 사례가 나타나고 있음.
     * 히키코모리의 원인
          + 예일 대학교 연구자들은 인터넷의 확산과 대면 상호작용의 감소가 히키코모리의 글로벌 확산을 촉진할 수 있다고 제안함.
          + 다른 연구자들은 코로나19 팬데믹이 더 많은 은둔자를 만들었을 수 있다고 주장함.
     * 정부와 조직의 노력
          + 아시아 전역에서 정부와 조직들은 히키코모리가 사회에 다시 진입하도록 돕기 위해 노력하고 있음.
          + 이는 고령화 인구, 감소하는 노동력, 출생률 감소, 불만족스러운 청년 문제를 해결하기 위해 더욱 시급해지고 있음.
     * 홍콩의 히키코모리
          + 홍콩, 일본, 한국에 약 150만 명 이상의 히키코모리가 있는 것으로 추정됨.
          + 찰리는 교사와의 다툼과 학교에서 동급생들의 비판을 들은 후 고립되기 시작함.
          + 찰리는 ""사람들의 말에 민감하며, 다른 사람들이 나에 대해 어떻게 생각하는지 매우 신경 씀""이라고 말함.
          + 찰리는 처음에는 일주일에 한두 번 학교에 가려고 했지만, 2019년에는 완전히 방에 틀어박혔음.
          + 찰리는 친구들의 메시지에 응답하지 않았고, 아무도 자신을 이해하지 못할 것이라고 생각했음.
          + 찰리의 부모는 가끔 그가 밖에 나가거나 학교에 가도록 권유했지만, 대부분은 그를 내버려 두었음.
          + 찰리는 침대에서 식사를 하고, 화장실을 사용할 때만 일어났음.
          + 찰리는 낮에는 자고, 밤에는 가족이 잠든 후 휴대폰을 스크롤하며 시간을 보냈음.

  일본의 사례

     * 토요아키 야마카와의 이야기
          + 토요아키는 부모가 아프자 도쿄에서 후쿠오카로 이사해 부모를 돌보기 시작함.
          + 그는 부모를 돌보는 것과 재정 문제를 관리하는 것에 큰 부담을 느꼈음.
          + 그는 35세부터 5년 동안 집에 틀어박혔음.
          + 그의 아내는 그에게 집안일을 맡기며 역할을 주었음.
          + 게임을 통해 자존감을 회복하고, 새로운 취미를 가지게 되었음.
          + 그는 요리와 정원 가꾸기를 통해 외부 활동을 시작함.
          + 일본의 히키코모리는 직장을 잃거나 가족을 부양하는 데 어려움을 겪은 후 고립되는 경우가 많음.
          + 일본의 히키코모리는 넓은 연령대를 포함하며, 일부는 50대 자녀를 부양하는 80대 부모도 있음.

  한국의 사례

     * 성 오현의 이야기
          + 성 오현은 중학교 때 처음으로 한 달 동안 집에 틀어박혔음.
          + 27세 때 직장에서의 실패로 다시 고립되었음.
          + 그는 가족과의 소통을 끊고, 주로 혼자 시간을 보냈음.
          + 그는 일본의 K2 International이라는 회사의 쉐어하우스 프로그램에 참여함.
          + 쉐어하우스는 공동 생활을 통해 사회적 상호작용을 촉진하고 일상을 제공함.
          + 한국의 히키코모리는 19세에서 34세 사이의 2.4%를 차지하며, 약 244,000명에 달함.
          + 정부는 고립된 청년들에게 재정 지원을 제공하는 법안을 통과시킴.

  GN⁺의 의견

     * 사회적 고립의 원인
          + 사회적 고립은 단순한 우울증이나 불안과는 다른 고유한 증후군으로, 특별한 치료가 필요함.
          + 인터넷과 대면 상호작용의 감소가 고립을 촉진할 수 있음.
     * 가족의 역할
          + 가족의 정서적 지원이 히키코모리가 사회에 다시 진입하는 데 중요한 역할을 함.
          + 가족이 비난하거나 압박을 가하면 고립이 심화될 수 있음.
     * 경제적 요인
          + 경제적 어려움과 직업 상실이 고립의 주요 원인 중 하나임.
          + 일본의 경우, 생활비 상승과 임금 정체가 문제를 악화시킴.
     * 문화적 요인
          + 일본 문화에서는 스스로 문제를 해결해야 한다는 압박과 가족의 명예를 중시하는 경향이 고립을 촉진할 수 있음.
     * 사회적 지원
          + 쉐어하우스와 같은 공동 생활 프로그램이 고립된 청년들에게 사회적 상호작용과 일상을 제공하는 데 효과적임.
          + 정부와 조직의 지원이 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 사회적 고립의 스펙트럼
          + 사회적 고립은 아시아에만 국한된 것이 아니라 전 세계적으로 영향을 미치는 현상임.
          + 인터넷을 통한 ""가짜 사회화"" 활동이 증가하고 있음.
          + 경제적 어려움과 건강 문제로 인해 외출을 자제하게 됨.
          + 온라인 비즈니스를 통해 경제적 자립을 꿈꾸지만 현실은 어려움.
     * 사회적 재진입의 어려움
          + 사회적 순환에서 벗어나면 다시 돌아가기 어려움.
          + 특정한 행동 패턴을 유지하지 않으면 사람들과 어울리기 힘듦.
          + 부채나 소득과는 무관한 문제임.
     * 현실의 어려움과 사회적 미디어의 영향
          + 열심히 일해도 이전 세대만큼의 성과를 얻기 어려움.
          + 소셜 미디어가 다른 사람들의 성공적인 순간만 보여줘서 좌절감을 느낌.
          + 기후 변화에 대한 두려움도 존재함.
     * 히키코모리 현상의 역사
          + 히키코모리는 새로운 현상이 아님. 1978년부터 정신의학 문헌에 등장함.
          + 인터넷과 스마트폰, 미래에 대한 불안이 주요 원인으로 지목되지만, 실제로는 큰 변화가 없음.
     * 문명과 자연의 괴리
          + ""Civilized to Death"" 책에서 현대 문명이 인간을 불행하게 만든다는 주장.
          + 인간이 진화한 환경과 현대 생활의 괴리가 문제임.
     * 원격 근무와 사회적 고립
          + 원격 근무가 히키코모리와 유사한 생활 방식을 촉진함.
          + 외출과 사회적 활동이 부담스러움.
     * 삶의 경험과 자기 고립
          + 삶의 경험이 쌓일수록 자기 고립이 증가함.
          + 서구 사회의 경쟁적이고 배신적인 문화가 문제임.
     * 게임과 가상 현실의 영향
          + 청소년기에 게임에 몰두하면 사회적 기술과 자신감을 잃게 됨.
          + 일본의 엔터테인먼트 산업이 외로운 사람들을 대상으로 함.
     * 수치심과 히키코모리
          + 수치심이 히키코모리의 주요 원인임.
          + 수치심을 피하기 위해 고립되고, 고립된 자신을 부끄러워하는 악순환이 발생함.
"
"https://news.hada.io/topic?id=14948","Sam Altman이 자신의 진짜 모습을 보여주고 있음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Sam Altman이 자신의 진짜 모습을 보여주고 있음

    OpenAI와 Scarlett Johansson의 갈등

     * OpenAI는 2022년 ChatGPT 출시로 인공지능을 주류로 끌어올린 연구 회사임.
     * 최근 Scarlett Johansson이 OpenAI의 GPT-4o 발표에 대해 NPR의 Bobby Allyn에게 성명을 발표함.
     * Johansson은 OpenAI가 그녀의 목소리를 흉내낸 것에 대해 분노를 표명함.

    Johansson의 성명

     * Johansson은 작년 9월 Sam Altman으로부터 ChatGPT 4.0 시스템의 목소리를 제공해달라는 제안을 받았으나 거절했다고 밝힘.
     * 9개월 후, 새로운 시스템 'Sky'의 목소리가 자신과 너무 비슷하다는 것을 알게 됨.
     * 그녀는 이에 대해 법적 조치를 취했고, OpenAI는 마지못해 목소리를 교체하기로 동의함.

    OpenAI의 반응

     * OpenAI는 Sky의 목소리가 Johansson의 목소리를 흉내낸 것이 아니라고 주장함.
     * Altman은 Johansson의 반대에 대해 사과하며 Sky의 목소리 사용을 중단한다고 발표함.

    논란의 배경

     * Altman은 GPT-4o 발표 중 Sky의 목소리를 Johansson의 목소리와 비교하는 트윗을 올림.
     * Johansson은 Altman이 발표 이틀 전에 다시 제안을 했다고 주장함.
     * Washington Post의 Nitasha Tiku는 Sky의 목소리가 처음부터 Johansson과 비슷했다고 지적함.

    AI와 저작권 문제

     * OpenAI는 저작권 문제와 관련된 논란에 자주 휘말림.
     * 대량의 데이터를 무단으로 사용해 모델을 훈련시켰다는 비판을 받고 있음.
     * 최근에는 OpenAI의 로고 사용에 대해 저작권 불만을 제기하기도 함.

    내부 갈등

     * OpenAI 내부에서도 Altman의 리더십에 대한 불만이 존재함.
     * 작년 11월, Altman은 회사 이사회로부터 신뢰를 잃고 해고되었으나 다시 복귀함.
     * 이후 여러 직원들이 회사를 떠났으며, 일부는 Altman의 리더십에 대한 불신을 표명함.

    비밀 유지와 투명성 문제

     * OpenAI는 직원들에게 매우 엄격한 비밀 유지 계약을 요구함.
     * Altman은 이러한 계약 조항을 몰랐다고 주장하며 수정하겠다고 약속함.
     * 그러나 Altman의 행동은 종종 그의 공개 발언과 모순됨.

  GN⁺의 의견

    1. AI와 저작권 문제: AI 기술이 발전하면서 저작권 문제는 더욱 중요해지고 있음. OpenAI의 사례는 이러한 문제를 잘 보여줌.
    2. 투명성의 중요성: 기술 회사는 투명성을 유지하는 것이 중요함. OpenAI의 비밀 유지 정책은 신뢰를 떨어뜨릴 수 있음.
    3. 리더십의 역할: Altman의 리더십 스타일은 논란을 일으킬 수 있음. 직원들의 신뢰를 얻는 것이 중요함.
    4. 유사 사례: 비슷한 기능을 가진 AI 음성 비서로는 Amazon의 Alexa와 Google Assistant가 있음. 이들은 저작권 문제를 피하기 위해 유명인의 목소리를 사용하지 않음.
    5. 기술 도입 시 고려사항: AI 기술을 도입할 때는 저작권 문제와 투명성을 고려해야 함. 이러한 문제를 해결하지 않으면 신뢰를 잃을 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Altman의 발언은 변호사가 작성한 것처럼 기술적으로는 사실이지만 실제로는 거짓을 암시하는 내용으로 보임. 이는 교활하고 기만적인 태도로 보이며, 이런 사람에게 미래를 맡기면 안 된다는 의견.
     * AGI(인공지능 일반)의 개발이 원자폭탄 개발 경쟁처럼 빠르게 진행되고 있으며, 신중하게 접근하겠다는 Sam의 발언은 실질적으로 의미가 없다는 의견. Scarlett Johansson은 그 과정에서 피해를 본 최신 사례일 뿐이며, 앞으로 더 많은 사람들이 피해를 볼 것이라는 우려.
     * Scarlett Johansson과 비슷한 목소리를 가진 사람들이 많기 때문에, 그녀가 OpenAI의 목소리 연기를 거부한다면 비슷한 목소리를 가진 다른 사람을 사용하는 것이 당연하다는 의견. OpenAI가 그녀에게 굴복한 것이 실수라는 주장.
     * Sam Altman에 대해 인상 깊은 점이 없으며, OpenAI의 AI 과학자들과 엔지니어들의 공로를 가로챈 것 같다는 의견. 회사가 그의 야망과 유산을 위한 도구에 불과하다는 느낌.
     * AI와 관련된 저작권 및 라이선스 문제에서 ""GPT vs Google"" 논쟁으로 넘어간 상황에 대한 비판. 예술가나 엔지니어들이 기여한 지식이 AI 모델에 포함되었고, 이를 되돌릴 수 없다는 의견.
     * AI를 제외하고 생각해보면, Scarlett Johansson과 비슷한 목소리를 가진 성우가 목소리 연기를 할 수 없다는 것은 불합리하다는 의견. 영화 ""Her""의 후속작에서 Scarlett Johansson이 목소리 연기를 거부하면, 다른 성우를 고용하는 것이 나쁜 일인지에 대한 의문.
     * 이번 사건이 과도하게 부풀려졌다는 의견. Sam Altman이 시도했고, Scarlett Johansson이 소송을 제기했으며, ChatGPT가 목소리를 내렸다는 것이 전부라는 주장. 이를 이유로 Sam Altman을 나쁜 사람으로 몰아가는 것은 이해할 수 없다는 의견.
     * OpenAI가 고용한 성우가 Scarlett Johansson과 비슷한 목소리를 가졌다는 이유로 일을 할 수 없게 되는 것이 불합리하다는 의견. 반대로 Scarlett Johansson이 성우의 목소리를 모방했다고 소송을 제기할 수 있는지에 대한 의문.
     * Sam Altman이 Sam Bankman-Fried와 비슷한 평판 위기에 처해 있다는 의견. 트위터에서도 이런 관점이 여러 번 표현되었다는 주장.
     * 영화 ""공각기동대""의 ""나는 동의하지 않는다"" 장면이 현실에서 재현되는 듯한 불길한 느낌이라는 의견.
"
"https://news.hada.io/topic?id=14962","2015년 실제로 제작되고 촬영된 Windows 10 배경화면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2015년 실제로 제작되고 촬영된 Windows 10 배경화면

Windows 10 데스크탑

     * 아이콘의 정의
          + 아이콘은 그 시대에 맞게 진화하며 변화를 견디는 특성을 가짐.
          + 아이콘은 과거와 미래를 연결하는 역할을 함.
          + 윈도우는 거의 30년 동안 사용자에게 맞춤형 경험을 제공하며 아이콘으로 자리잡음.
     * 윈도우의 영향력
          + 윈도우는 매일 10억 명 이상의 사람들이 사용함.
          + 항공 교통 관제사, NASDAQ 거래자, 산부인과 의사 등 다양한 직업군에서 사용됨.
          + 윈도우 히어로 데스크탑 이미지는 전 세계적으로 가장 널리 인식되는 이미지 중 하나임.

윈도우 10의 진화

     * 윈도우 10 출시
          + 2015년에 윈도우 10이 출시되며, 이는 윈도우의 마지막 주요 릴리스였음.
          + 이후 빠른 디지털 업데이트로 전환됨.
          + 윈도우 데스크탑 이미지를 아이콘으로 만들기 위해 다양한 시도를 함.
     * 로고의 재해석
          + 윈도우 로고는 단순한 네 개의 타일이 아닌, 그 뒤의 공간과 에너지를 표현함.
          + 로고는 시대를 초월한 느낌을 주며, 미래로 나아가는 윈도우의 이야기를 담고 있음.

접근 방식

     * 라이브 액션 촬영
          + 다양한 변수와 맞춤 설정을 사용하여 라이브 액션 촬영을 진행함.
          + 로고를 세계로 들어가는 포털로 위치시키는 것을 목표로 함.
          + 실제 윈도우 로고를 제작하고, 창의적인 카메라 각도와 볼륨 조명으로 생동감 있게 표현함.
     * 촬영 기법
          + 9k Phase One 카메라 시스템을 사용하여 여러 노출을 촬영하고, 이를 결합하여 볼륨 조명을 구현함.
          + 다양한 데스크탑 이미지를 생성하여 윈도우 애플리케이션에서 사용할 수 있는 이미지 라이브러리를 만듦.

비하인드 씬

     * 프로젝터 빔
          + 작은 ""창""을 통해 빛을 집중시키는 영화적 기법을 사용함.
          + 검은 판지에 윈도우 로고를 자르고, 아크릴 조각과 일치시켜 빛이 반사되는 효과를 만듦.
          + 빛을 투사하여 이미지에 추가적인 형태와 질감을 부여함.
     * 합성 작업
          + 3,000장 이상의 사진을 촬영하여 최종 이미지를 구성함.
          + 다양한 레이저 조명을 사용하여 로고의 기본 이미지를 구축함.
          + 연기와 안개를 별도로 촬영하여 분위기를 조성하고, 렌즈 플레어를 추가하여 최종 이미지를 완성함.

협업 과정

     * 팀 구성
          + 프로젝트는 Joseph Picard 박사가 주도하였으며, 다양한 전문가들이 참여함.
          + 촬영은 이틀 동안 진행되었으며, 두 개의 세트를 동시에 운영하여 효율성을 높임.
     * 결과물
          + 최종 이미지는 생동감 있고, 화면 속으로 손을 뻗을 수 있을 것 같은 느낌을 줌.
          + 다양한 이미지 라이브러리를 생성하여 윈도우 애플리케이션에서 활용 가능함.

GN⁺의 의견

     * 기술적 도전
          + 윈도우 10의 데스크탑 이미지를 제작하는 과정에서 다양한 최신 기술이 사용되었음.
          + 이는 기술적 도전과 창의적 접근 방식을 결합한 훌륭한 사례임.
     * 브랜드 아이덴티티
          + 윈도우 로고의 재해석은 브랜드 아이덴티티를 강화하고, 사용자에게 새로운 경험을 제공함.
          + 이는 브랜드의 지속 가능성과 혁신을 동시에 보여줌.
     * 협업의 중요성
          + 다양한 전문가들이 협업하여 최종 결과물을 만들어냄.
          + 이는 팀워크와 창의적 협업의 중요성을 강조함.
     * 미래 지향적 접근
          + 윈도우 10의 데스크탑 이미지는 미래 지향적이며, 사용자에게 신선한 경험을 제공함.
          + 이는 기술과 예술의 결합을 통해 가능해짐.
     * 기술 도입 시 고려 사항
          + 새로운 기술을 도입할 때는 비용, 시간, 인력 등의 자원을 고려해야 함.
          + 또한, 기술의 안정성과 사용자 경험을 최우선으로 생각해야 함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 사진 촬영의 장점
          + 필름 카메라를 주로 사용해온 한 사용자는 이 이미지가 실제로 촬영된 것임을 깨달았음. VFX보다 사진 촬영이 더 설득력 있는 디테일을 제공한다고 주장함. 간단한 스튜디오 설정으로 실험 가능함.
     * XP의 이미지와 혼동
          + 제목을 보고 XP의 이미지와 혼동했으며, 팀이 언덕을 만들고 잔디를 깔았을 것이라고 상상했음.
     * 실제 효과의 가능성
          + 이 이미지를 수천 번 봤지만 실제 효과에서 비롯된 것이라고는 생각하지 못했음. 3,000장 이상의 사진을 촬영하고 포토샵에서 합성하는 과정이 매우 인내심을 요구했음.
     * 합성 과정의 디테일
          + 기본 이미지를 만들고 다양한 레이저 조명을 사용해 로고 디자인을 완성함. 연기와 안개를 별도로 촬영해 분위기를 더했으며, 렌즈 플레어도 별도로 촬영해 완벽하게 맞춤. 최종 이미지는 고해상도로 최적화됨.
     * 노력과 품질
          + 많은 노력이 들어갔지만, 윈도우 10의 기본 배경화면 품질 설정이 여전히 100% 미만인 점이 재미있음.
     * 개인적인 감상
          + 이 배경화면이 마음에 들며, 어릴 때 봤던 기억 때문에 더 애착이 감.
     * 디자인에 대한 아쉬움
          + MS가 다른 디자인 요소에도 이만큼의 노력을 기울였으면 좋겠다는 아쉬움.
     * 원본과 수정본
          + 원본 윈도우 10 배경화면이 나중에 더 밝고 깨끗한 버전으로 대체되었음을 언급하며, 수정된 버전을 더 선호함.
     * 배경화면 변경
          + 많은 사람들이 새 시스템에 로그인한 후 첫 번째로 배경화면을 변경하는데, 이렇게 많은 노력을 들인 점이 흥미로움.
     * 미니멀리즘과 지루함
          + 배경화면이 미니멀하고 우아하지만 지루하다고 느껴 KDE Plasma의 배경화면을 사용함.
     * 실제 효과의 예시
          + 윈도우 운영체제를 싫어하지만, 이 배경화면은 실제 효과의 좋은 예시로 매번 감탄함.
"
"https://news.hada.io/topic?id=15020","Google Meet, 다중 기기 어댑티브 오디오 머지 기능 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Google Meet, 다중 기기 어댑티브 오디오 머지 기능 출시

     * 여러 대의 노트북으로 즉석 회의 공간 만들기
     * 하이브리드 근무 시대가 되면서 회의에 참여할 수 있는 화상 회의실을 찾는 것이 어려워짐
     * ""적응형 오디오""를 통해 근접 공간에서 여러 대의 노트북을 사용하여 Google Meet에 동시 참여 가능
          + 여러 장비를 동시에 켜는데에서 오는 에코 및 오디오 피드백 없이
          + 회의실이 부족하거나 전용 회의실 장비가 없는 조직에 큰 장점
     * 적응형 오디오의 기능:
          + 여러 대의 노트북이 있는 방에서 자동으로 마이크와 스피커를 동기화하여 원활한 오디오 경험을 제공함
          + 팀이 단일 노트북에 몰리지 않고 어디서든 명확하게 들을 수 있는 즉석 회의 공간을 만들 수 있음
          + 회의실이 없거나 회의실 하드웨어가 작동하지 않는 경우, 또는 소규모 조직에서 전용 화상 회의 장비가 없는 경우 유연하게 회의에 참여할 수 있음
          + 라운지, 카페 등 비전형적인 회의 공간에서도 사용할 수 있음
     * 참가자의 마이크와 스피커 사용:
          + 각 참가자의 마이크와 스피커를 사용하여 모든 사람이 잘 들을 수 있도록 함
          + 동일한 방에서 여러 참가자가 회의에 참여할 때 ""적응형 오디오""가 자동으로 활성화됨
          + Google Meet은 오디오를 병합하고 참가자를 사람 패널에서 그룹화함

출시 일정 및 지원 고객

     * 빠른 출시 도메인: 2024년 5월 22일부터 기능 가시성까지 최대 15일 동안 점진적 출시
     * 예정된 출시 도메인: 2024년 6월 5일부터 기능 가시성까지 1-3일 동안 전체 출시
     * Google Workspace 고객: Gemini Enterprise, Gemini Business, Gemini Education, Gemini Education Premium, AI Meetings 및 Messaging 애드온을 사용하는 고객에게 제공됨

GN⁺의 의견

     * 적응형 오디오의 유용성:
          + 하이브리드 근무 환경에서 회의실 부족 문제를 해결할 수 있는 유용한 기능임.
          + 비전형적인 회의 공간에서도 원활한 회의를 가능하게 함.
     * 기술적 고려 사항:
          + 여러 대의 노트북이 있는 환경에서 오디오 동기화가 얼마나 정확하게 이루어지는지 테스트가 필요함.
          + 네트워크 상태에 따라 오디오 품질이 달라질 수 있음.
     * 경쟁 제품:
          + Zoom이나 Microsoft Teams와 같은 다른 화상 회의 솔루션에서도 유사한 기능을 제공할 가능성이 있음.
          + 각 솔루션의 장단점을 비교해보는 것이 중요함.
     * 사용자 경험:
          + 기본적으로 기능이 켜져 있어 사용자가 별도의 설정 없이도 쉽게 사용할 수 있음.
          + 필요에 따라 기능을 끌 수 있는 옵션이 제공되어 사용자 편의성을 높임.
     * 도입 시 고려 사항:
          + 조직 내에서 이 기능을 도입할 때, 사용자 교육이 필요할 수 있음.
          + 적응형 오디오 기능이 모든 회의 환경에서 최적의 성능을 발휘하는지 확인하는 것이 중요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 오디오 엔지니어링 관점에서 놀라운 기술
          + 여러 대의 노트북에서 오디오를 출력하는 것은 쉬움.
          + 완벽한 동기화는 어려움.
          + 에코 취소를 구현하는 것은 더 복잡함.
          + 모든 노트북 마이크를 마이크 배열로 취급하는 것은 매우 어려운 작업임.
          + 엔지니어링 팀에게 찬사를 보냄.
     * Meet의 기능과 단순성
          + Meet는 기능과 단순성의 완벽한 균형을 제공함.
          + Zoom과 Teams는 자주 사용하지만 불만족스러움.
          + 비디오 회의는 IT 관리자와 A/V 전문가를 설득해야 하는 게임임.
     * GitLab의 원격 근무 전환 가이드라인
          + GitLab은 원격 근무 전환에 대한 좋은 코스를 제공함.
          + 하이브리드 회의를 피하고 모든 참석자가 자신의 장치를 사용하도록 권장함.
     * Meet 팀의 지원에 대한 찬사
          + 비디오 회의 세계에서 대부분의 문제가 해결된 상황에서, 이 기능은 차별화되고 고객 중심임.
     * Google Meet와 Microsoft Teams 비교
          + 스타트업에서 큰 회사로 이직 후, Google 기반에서 Microsoft 기반으로 전환함.
          + Teams는 학습 곡선을 넘은 사람들과 일할 때 좋음.
          + Meet는 단순히 ""작동""하는 데 탁월함.
          + Teams는 간단한 작업에도 추가 클릭이 필요함.
     * Gemini 기능 제한
          + 이 기능은 Gemini Enterprise, Business, Education, Education Premium 및 AI Meetings and Messaging 애드온을 사용하는 Google Workspace 고객에게만 제공됨.
     * 1:1 페어 프로그래밍에 대한 의견
          + Meet는 좋지만, Facebook Messenger가 동일한 화면 해상도에서 100% 줌으로 화면 공유를 제공하여 더 나은 경험을 제공함.
          + 모바일과 데스크탑 간에 원활하게 이동 가능함.
     * 풀 듀플렉스 오디오 지원 여부
          + 비디오 통화 서비스가 풀 듀플렉스 오디오를 지원하는지 궁금함.
          + 정상적인 대화처럼 주고받는 느낌이 부족함.
     * 간단한 기능 요청
          + 헤드폰을 사용하지 않는 사람을 자동으로 감지하고 발언을 막는 기능 요청.
          + 피드백/에코 취소가 모두의 삶을 불편하게 만듦.
          + 저지연 듀플렉스 오디오가 더 나은 경험을 제공함.
     * 회의실의 오디오 문제
          + Microsoft Teams 회의용 하드웨어가 있는 회의실에서 오디오 문제가 있음.
          + 낮은 목소리는 온라인 참가자에게 들리지 않음.
          + 모든 참석자가 노트북을 가져와야 기능이 잘 작동할 것으로 예상됨.
"
"https://news.hada.io/topic?id=14939","Pathways, 애플 플랫폼 개발자를 위한 첫걸음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Pathways, 애플 플랫폼 개발자를 위한 첫걸음

     * 애플이 공개한 초보자용 개발 리소스 모음
          + 앱과 게임을 제작하는데 필요한 동영상, 문서 및 리소스를 쉽게 탐색할 수 있음
     * Apple Developer Pathway : 애플 개발자가 되기
     * Design Pathway : 훌륭한 디자인의 기본원칙 배우기
     * Swift Pathway : 모든 Apple 플랫폼을 위한 강력하고 직관적인 프로그래밍 언어
     * SwiftUI Pathway : 선언적이고 이해하기 쉬운 프레임워크
     * Games Pathway : Apple 도구와 기술을 사용하여 차세대 게임을 제작하기
     * visionOS Pathway : Apple Vision Pro의 무한한 캔버스에서 새로운 경험을 상상해보기
     * App Store Pathway : 앱이나 게임을 App Store에 배포하여 전 세계와 공유하고, 프로모션과 성과를 한 단계 더 높이기
"
"https://news.hada.io/topic?id=15024","2024 리액트 컨퍼런스 (Day리액트 컨퍼런스 (Day 2)

     * Keynote
          + 점점 더 빨라지는 성능, 그리고 커져가는 리액트 네이티브 생태계와 사용 사례에 대한 이야기
     * Extending React Native Beyond Mobile & Desktop Apps
          + 모바일, 데스크탑을 넘어 TV용 애플리케이션까지 영역을 넓혀가는 리엑트 네이티브
     * React Compiler Deep Dive
          + 리액트의 규칙과 그에 맞춰 설계된 리액트 컴파일러에 대한 자세한 설명
     * And Now You Understand React Server Components
          + 개발자이자 교육자인 Kent의 리액트 서버 컴포넌트에 대한 설명
     * React Rhythm & Blues
          + 클라이언트와 서버에서의 리액트 최신 기능 이해하기
     * Solve 100% of your errors
          + 실제 데모를 통한 Sentry Replay 기능에 대한 자세한 설명
     * Demystifying accessibility in React apps
          + 웹 접근성의 중요성과 이를 구현하는 다양한 방법들을 예시를 통해 설명
     * Pigment CSS, CSS in the server component age
          + 서버 컴포넌트 시대의 CSS에 대한 이야기와 Pigment CSS 라이브러리 소개
     * Spatial computing with React
          + Apple Vision Pro용 앱을 위한 리액트 네이티브의 가능성에 대한 이야기
     * Enhancing Forms with React Server Components
          + 리액트 서버 컴포넌트와 서버 액션을 사용하여 form을 향상시키는 방법
     * Cross Platform React
          + 다양한 플랫폼을 지원하기 위한 리액트 네이티브의 발전 과정과 미래에 대한 이야기
     * Q&A with the React Native team
          + 리액트 네이티브의 현재와 앞으로의 방향에 대한 이야기

   정리 감사합니다! 잘 봤습니다! ㅎㅎ

   둘째날은 대부분 React Native와 관련된 발표들로 구성되었으며,

   TV, Apple Vision Pro 등의 다양한 플랫폼에서의 React Native의 가능성을 보여주었습니다.

   React Native을 사용하시는 분들은 관련 파트의 영상을 꼭 시청해보시면 좋을 것 같습니다.
"
"https://news.hada.io/topic?id=14915","HuggingFace 공동창업자가 추천하는 AI 분야 입문 서적","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HuggingFace 공동창업자가 추천하는 AI 분야 입문 서적

     * 공동창업자이자 CSO인 Thomas Wolf는 물리학 & 법학 전공
     * 그가 2016~17년에 NLP/AI/ML 분야에 들어가면서 읽은 독서 목록
          + 즉, ChatGPT/트랜스포머/Diffusion 혁신 전이라는 것을 유의할 것
     * ""Deep Learning(심층 학습)"" 책은 현재 도구에 대한 빠른 개요를 얻기에 좋은 자료
     * ""Artificial Intelligence: A Modern Approach(인공지능:제4판 - 현대적 접근방식)""는 신경망 이전의 모든 도구와 방법에 대한 훌륭한 자료
     * ""Machine Learning: A Probabilistic Perspective(머신 러닝)""는 확률적 접근법을 더 깊이 파고들고 베이지안 도구에 대한 좋은 노출을 얻기에 훌륭한 자료
     * ""Information Theory, Inference and Learning Algorithms""는 거의 믿을 수 없을 정도로 명확하게 확률과 정보 이론을 설명하는 작은 보석임
     * ""The Book of Why: The New Science of Cause and Effect""는 인과관계에 대한 좋은 소개서임
     * ""Reinforcement Learning: An Introduction(단단한 강화학습)""은 강화 학습에 대한 입문적 소개를 얻기에 훌륭한 자료임
     * 자연어 처리에 대한 세 가지 훌륭한 자료가 흥미로웠음
          + Kyunghyun Cho의 ""Natural Language Processing with Representation Learning""에 대한 강의 노트가 훌륭함
          + Yoav Goldberg의 ""Neural Network Methods in Natural Language Processing"" 책도 좋음
          + Jacob Eisenstein의 ""Natural Language Processing"" 교과서도 매우 포괄적인 읽을거리임
     * 몇 가지 온라인 코스로 이를 보완함
          + edx 의 Computational Probability and Inference (6.008.1x)
          + Coursera 의 Probabilistic Graphical Models 전문화 과정
     * 트랜스포머와 대규모 훈련의 혁명 이후에 이 분야에 합류한다면 아마도 다른 경로를 따르고 싶을 것임
          + 2024년 조언 몇 가지:
               o NLP와 트랜스포머에 관한 우리의 책 Natural Language Processing with Transformers을 읽을 것. ChatGPT 이전이지만 여전히 매우 관련성이 있으며 마지막에는 LLM 훈련까지 다룸
               o 유명한 분야 사람들로부터 딥러닝에 대한 온라인 수업을 몇 개 들을 것
               o 여전히 위 목록에서 일반 교양을 위해 책을 몇 권 읽을 수 있으며, 특히 ""Information Theory, Inference and Learning Algorithms""는 여전히 보석이라고 생각함
               o 실천을 통해 배우기 위해 Hugging Face에 가입할 것 :)

   이름이 뭔가 낯익어 찾아보닌 3월 말쯤 LLM 모델 개발 트렌드 영상을 공개했었던 것을 봤었네요. (아직 다 보지는 못했습니다ㅠ)

   'A Little guide to building Large Language Models in 2024'라는 제목의 유튜브 영상으로, LLM 개발을 위한 데이터 준비부터 학습/평가 방법 등을 다방면으로 다루고 있는 영상입니다.
     * 영상: https://youtube.com/watch/…
     * 슬라이드: https://docs.google.com/presentation/d/…
     * ⚠️광고⚠️ 정리해둔 글: https://discuss.pytorch.kr/t/2024-llm/3890

   <심층 학습> - 이안 굿펠로, 요슈아 벤지오, 에런 쿠빌 http://aladin.kr/p/OLwph

   <인공지능 1~2 - 전2권> - 스튜어트 러셀, 피터 노빅 http://aladin.kr/p/g4yZY

   <Machine Learning 머신 러닝> - 케빈 머피 http://aladin.kr/p/RGGL8

   <Information Theory, Inference and Learning Algorithms (Hardcover)> - 데이빗 맥케이 http://aladin.kr/p/LFEp0

   <The Book of Why: The New Science of Cause and Effect (Paperback)> - 다나 맥켄지, Judea Pearl http://aladin.kr/p/cLywB

   <단단한 강화학습> - 리처드 서튼, 앤드류 바르토 http://aladin.kr/p/3NQoU

   Natural Language Processing with Representation Learning -Kyunghyun Cho
   https://github.com/nyu-dl/NLP_DL_Lecture_Note/…

   <Neural Network Methods in Natural Language Processing (Paperback)> - Yoav Goldberg http://aladin.kr/p/non6R

   <자연어 처리의 정석> - 제이콥 에이젠슈테인 http://aladin.kr/p/rPoLB

   정리해주셔서 감사합니다!!
   글을 퍼가며 정리해주신 목록도 함께 퍼갔는데요, 혹시나 원치 않으시면 삭제하도록 하겠습니다. 🙇‍♂️

   https://discuss.pytorch.kr/t/gn-huggingface-ai-txt/4439/2

   감사합니다 ㅠㅠ
"
"https://news.hada.io/topic?id=15035","Mixed Precision Training, 처음부터 구현하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Mixed Precision Training, 처음부터 구현하기

   단 한줄도 요약이 없는 글은 또 처음보네요
"
"https://news.hada.io/topic?id=14991","LLM을 활용한 재무제표 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LLM을 활용한 재무제표 분석

     * 대형 언어 모델(LLM)이 전문 인간 분석가와 유사하게 재무제표 분석을 성공적으로 수행할 수 있는지 조사
     * 표준화되고 익명화된 재무제표를 GPT-4에 제공하고, 모델이 미래 수익의 방향을 예측하도록 지시
     * 주요 발견
          + 예측 성능: LLM은 내러티브나 산업별 정보 없이도 수익 변화 예측에서 금융 분석가를 능가함
          + 상대적 우위: 분석가들이 어려움을 겪는 상황에서 LLM이 상대적 우위를 보임
          + 예측 정확도: LLM의 예측 정확도는 좁게 훈련된 최신 ML 모델의 성능과 동등함
          + 내러티브 통찰: LLM의 예측은 훈련된 메모리에서 비롯된 것이 아니라, 회사의 미래 성과에 대한 유용한 내러티브 통찰을 생성함
          + 거래 전략: GPT의 예측을 기반으로 한 거래 전략은 다른 모델 기반 전략보다 높은 샤프 비율과 알파를 제공함

GN⁺의 의견

     * LLM의 잠재력: 대형 언어 모델이 재무 분석에서 인간 분석가를 능가할 수 있다는 점은 금융 업계에 큰 변화를 가져올 수 있음. 이는 자동화된 분석 도구의 발전 가능성을 시사함.
     * 모델의 투명성: LLM이 내러티브 통찰을 제공한다는 점은 모델의 예측 과정이 더 투명하고 이해하기 쉬울 수 있음을 의미함. 이는 금융 분석가들이 모델을 신뢰하고 활용하는 데 도움이 될 수 있음.
     * 거래 전략의 유용성: GPT 기반 거래 전략이 높은 성과를 보인다는 점은 투자자들에게 큰 매력을 줄 수 있음. 그러나 이는 모델의 예측이 항상 정확하다는 보장은 아니므로 신중한 접근이 필요함.
     * 기술 도입 고려 사항: 데이터의 품질과 모델의 훈련 과정이 중요함. 또한, 모델의 예측이 실제 시장 상황과 어떻게 일치하는지 지속적으로 검토해야 함.
     * 관련 기술 및 프로젝트: 금융 분석에서 유사한 기능을 제공하는 다른 프로젝트로는 AlphaSense, Kensho, 그리고 Bloomberg의 GPT-3 기반 분석 도구 등이 있음. 이들 도구와의 비교를 통해 LLM의 장단점을 더 명확히 이해할 수 있음.

  Hacker News 의견

     * 40페이지 Figure 3를 보면 Ou와 Penman(1989)의 59개 재무 예측 변수를 사용한 3층 신경망 모델과 GPT(CoT)를 비교한 결과, GPT가 통계적으로 유의미하게 더 나은 성능을 보이지 않음.
     * 시장은 중요하지만 투기는 시장의 목적이 아님. 돈을 벌고 싶다면 훈련을 받고 좋은 급여를 받는 것이 좋음. 투기는 탐욕의 관점에서 보면 파멸의 위험이 큼. 금융 시스템은 제로섬 게임이며, 국제 금융은 위험이 많음. 친구를 돌보고, 행복을 극대화하며, 정직하고 윤리적으로 행동할 필요가 있음.
     * 일반 시민들이 지방 정부의 재정에 대해 의미 있는 질문을 할 수 있게 하는 것이 가장 큰 변화를 가져올 수 있음. 예를 들어, 일리노이 주 쿡 카운티의 수많은 지방 자치 단체와 선출된 당국이 매월 재무 보고서를 작성하지만 시민의 감시가 부족함.
     * 연구의 역사: 경영진의 발언을 비교하고, 긍정적/부정적 단어를 세어 감정 분석을 수행하며, 트위터와 뉴스 기사를 사용해 실시간 감정 모델을 구축함. LLM(GPT2)으로 감정 분석 모델을 구축했지만, 경영진이 긍정적인 단어만 사용하도록 훈련받아 신뢰성이 떨어짐.
     * 표준화된 LLM 모델이 사용되면, 재무 보고서가 LLM의 결과를 더 유리하게 만들기 위해 조작될 가능성이 있음.
     * 연구 설계에서 텍스트 정보를 제공하지 않음. LLM이 순수한 재무 수치를 분석하고 종합하는 능력을 이해하는 것이 주요 관심사임. 이는 LLM이 수학적 계산을 하지 않고 다음 토큰을 예측하는 방식으로 작동하기 때문임.
     * LLM 래퍼를 판매하려는 사람들에게: 이 분야는 매우 어려움. 데이터, 분포, 낮은 수요 문제에 직면할 것임. 실제로 이를 사용할 펀드는 이미 사용 중임.
     * GPT의 예측 능력의 원천을 이해하려고 함. 모델이 재무 분석가 역할을 하도록 지시하고, 주요 재무 비율을 계산하며 경제적 해석을 제공하도록 함. 그러나 LLM은 계산을 하지 않고 다음 토큰을 예측하는 방식으로 작동함.
     * Greg Diamos가 Lamini에서 발표한 수익 전화 분석을 기억함. 관련 링크는 HuggingFace와 GitHub에서 확인 가능함.
     * 더 큰 컨텍스트 윈도우를 가진 모델(Gemini, Claude Opus)과 비교했으면 흥미로웠을 것임. 그렇지 않으면 제목을 ""GPT-4를 사용한 재무 보고서 분석""으로 바꾸는 것이 좋음.
"
"https://news.hada.io/topic?id=14960","기록에 따르면 OpenAI는 스칼렛 요한슨의 목소리를 복제하지 않았습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               기록에 따르면 OpenAI는 스칼렛 요한슨의 목소리를 복제하지 않았습니다.

     * OpenAI가 워싱턴 포스트에게 제공한 문서와 인터뷰 내용에 따르면, 스칼렛 요한슨의 목소리를 복제한 적이 없음.
          + 성우 공고에는 25~45세 사이의 따뜻하고 매력적이며, 카리스마 있는 목소리라고 언급함.
          + 스칼렛 요한슨에게 처음 연락하기 몇 달 전에 Sky 목소리의 성우를 고용했음.
               o 해당 성우와의 인터뷰에서, OpenAI는 스칼렛 요한슨이나 영화 Her를 언급한 적이 없다고 밝힘.
               o 실제로 워싱턴 포스트가 검토한 결과 성우의 목소리와 Sky의 목소리는 동일했음.
          + 프로젝트를 총괄한 조앤 장은 OpenAI CTO인 미라 무라티와 함께 감독과 캐스팅 담당자의 선택을 존중했다고 밝힘.
               o 샘 알트만은 캐스팅 과정 당시 월드 투어중으로 이 일에 깊게 관여하지 않았음.
     * 미국음반산업협회 회장 미치 글레이지어는 요한슨이 OpenAI를 상대로 소송을 제기할 수 있다고 함.
          + 1980년대 포드에서 가수였던 베트 미들러의 목소리를 사칭한 판례를 언급.
     * 지적재산권 변호사인 마크 험프리는 배심원단이 Sky의 목소리가 요한슨의 목소리인지 판단해야 할 것이라고 말함.
          + 또한 샘 알트만의 트윗과, 요한슨에게 2번이나 연락한 행위는 OpenAI에게 불리하게 적용될 수 있음.
     * Sky 성우는 에이전트를 통해 이것은 원래 자신의 목소리이며, 자신은 요한슨의 목소리와 비교당한 적이 없다고 하는 성명서를 공개.

   샘 알트만 쫓아내기 적기네요. 지금 여론들은 저런거 관심도 없고 일단 우리 입장에서도 우리 생활을 그들이 복제할 수 있으니 위험하고 회사의 삐뚤어진 비전과 직원 처우 등등 빨리 정상화되길 바랄 겁니다. 아마 다들 알트먼에게 통수맞은 느낌이라 뭔 소식을 들어도 달갑지 않을 겁니다. HN 여론 화이팅!

   이런 입장문도 좀 보고싶은데, 미운 구석이 있는 것도 알지만 여론은 답을 정해놓고 이야기하는 거 같아서 아쉽네요 ㅠ
     * 기사 아카이브
     * HN 스레드

   워싱턴 포스트 구독자만 볼 수 있어서 아카이브로 들어가셔야 합니다.
"
"https://news.hada.io/topic?id=14913","HN 질문: 비디오 스트리밍은 비용이 많이 드는데 YouTube는 무료로 제공하는 것처럼 보이는 이유는?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HN 질문: 비디오 스트리밍은 비용이 많이 드는데 YouTube는 무료로 제공하는 것처럼 보이는 이유는?

비디오 스트리밍 플랫폼의 경제학 이해하기

     * 비디오 스트리밍 플랫폼의 비용 요소
          + 스트리밍, 인코딩, 저장은 대규모에서 막대한 비용을 요구함
          + 예를 들어, 평균적으로 4K 비디오가 약 100만 뷰를 기록할 때 발생하는 비용
     * YouTube의 비용 구조
          + YouTube는 이러한 서비스를 무료로 제공함
          + 광고가 수익의 주요 원천임
     * 광고 수익의 충분성
          + YouTube의 광고 수익이 이러한 비용을 충당할 수 있는지에 대한 의문
          + Google의 광고 규모가 YouTube의 경제학을 가능하게 하는지에 대한 논의
     * 새로운 플랫폼의 도전
          + 광고 수익으로 지원되는 새로운 플랫폼을 시작하려는 경우 실패할 가능성이 높음
          + YouTube와 같은 규모에서만 경제학이 작동할 가능성
     * 논의의 초점
          + 저장, 인코딩, 스트리밍과 같은 절대적으로 필요한 요소에 집중
          + 뷰 카운트 알고리즘 실행과 같은 지연/비용에 기여하는 다른 요소는 논의에서 제외

GN⁺의 의견

     * 비디오 스트리밍의 비용 구조
          + 비디오 스트리밍 플랫폼은 대규모 데이터 센터와 네트워크 인프라를 필요로 함
          + 이러한 인프라를 유지하는 데 드는 비용은 매우 큼
     * 광고 수익의 한계
          + 광고 수익만으로는 초기 투자 비용을 회수하기 어려울 수 있음
          + YouTube는 Google의 다른 수익원과 결합하여 경제적 지속 가능성을 유지함
     * 경쟁 플랫폼
          + Netflix, Amazon Prime Video와 같은 구독 기반 모델이 광고 기반 모델보다 안정적일 수 있음
          + 이러한 플랫폼은 사용자에게 더 나은 품질의 콘텐츠를 제공할 수 있음
     * 기술적 고려 사항
          + 새로운 스트리밍 플랫폼을 도입할 때는 콘텐츠 전송 네트워크(CDN)와 같은 기술적 요소를 고려해야 함
          + CDN은 지연을 줄이고 사용자 경험을 향상시키는 데 중요함
     * 경제적 지속 가능성
          + 새로운 플랫폼이 경제적으로 지속 가능하려면 다양한 수익 모델을 고려해야 함
          + 예를 들어, 구독 모델, 프리미엄 콘텐츠, 파트너십 등을 통해 수익을 다각화할 필요가 있음

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 비디오 스트리밍 비용
          + 스트리밍 비용이 가장 큰 부분을 차지함. 비디오를 시청자에게 전달하는 것이 주요 변수 비용임.
          + 인코딩 비용은 크지 않음.
          + 저장 비용은 일반적으로 비싸지 않음. 소비자가 2TB 저장 장치를 저렴하게 구입할 수 있는 것처럼 기업도 저렴하게 대량 구매 가능함.
          + 인력 비용이 큼. 많은 엔지니어가 필요해 비용이 많이 들었음.
     * 구글의 스트리밍 전략
          + 구글은 2000년대 초반에 다크 파이버를 대량 구매하고 주요 ISP와 피어링 계약을 맺었음.
          + 구글은 커스텀 인코딩 실리콘을 보유하고 있음.
          + 저장 비용은 큰 문제임. 구글은 대량 구매로 할인받을 수 있지만, 저장 비용을 완전히 없앨 수는 없음.
     * 유튜브의 광고 수익
          + 유튜브는 2023년에 광고 수익으로 315억 달러를 벌어들였음.
          + 광고는 전자 미디어의 비용을 지불하는 주요 수단임.
     * 구글의 비용 구조
          + 구글은 전 세계에 콘텐츠를 캐싱하여 비용을 절감함.
          + 구글은 ISP와의 연결 및 교환 계약을 통해 저렴한 인터넷 연결을 확보함.
          + 스트리밍 비용이 주요 비용임.
     * 규모의 경제
          + 광고주가 직접 광고를 게재할 만큼 충분한 시청자를 확보해야 함.
          + 콘텐츠를 몇 개의 데이터 센터에 저장하고, 인기 콘텐츠를 각국의 사이트에 캐싱해야 함.
          + 대역폭/스트리밍 서버가 가장 큰 비용임. 인코딩/저장은 비교적 저렴함.
     * 구글의 캐싱 전략
          + 구글은 거의 모든 ISP 네트워크에 캐시를 보유하고 있음.
          + 대부분의 사람들이 최신 콘텐츠를 시청하기 때문에 캐싱이 용이함.
     * 인코딩 및 스트리밍 기술
          + 인코딩은 단일 스트림에 대해 초선형적임. 충분한 코어가 필요함.
          + 스트리밍은 주로 청크 처리와 스마트 플레이어를 통해 적절한 청크를 적시에 로드함.
          + 저장은 가장 저렴한 디스크를 사용하고, 모든 것을 캐싱함.
     * 유튜브의 비금전적 가치
          + 유튜브는 구글에게 금전적 가치 외에도 큰 이점을 제공함.
          + 유튜브가 독립된 회사라면 구글과 경쟁할 수 있음.
          + 구글은 유튜브 데이터를 쉽게 접근할 수 있어 AI 훈련에 유리함.
          + 유튜브는 구글의 기업 이미지와 사회적 사명에 중요한 역할을 함.
     * 스트리밍 서비스의 수익성
          + 대부분의 스트리밍 서비스는 수익성이 없음.
          + 유튜브는 수익성이 있을 가능성이 높지만, 구글이 별도의 수익을 보고하지 않아 정확히 알 수 없음.
          + 넷플릭스는 수익성이 있음.
          + 디즈니, 피콕, 파라마운트, 맥스 등은 수익성이 없으며, 미래의 독점 지위를 기대함.
          + 프라임 비디오는 스튜디오 투자로 인해 수익성이 없거나 손익분기점에 있을 가능성이 있음.
"
"https://news.hada.io/topic?id=14966","데이라이트 컴퓨터 – 새로운 60fps e-paper 태블릿","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   데이라이트 컴퓨터 – 새로운 60fps e-paper 태블릿

DC-1: 세계 최초의 60fps 종이 같은 컴퓨터

  Magic. Paper. Computer.

     * DC-1 소개: 세계 최초의 60fps 종이 같은 컴퓨터
     * 블루 라이트 없음: 눈에 해롭지 않음

  디스플레이

     * 초고속: E-Ink보다 더 빠름
     * Live Paper: 마법 같은 느낌, 모든 앱에서 부드러운 스크롤과 상호작용 가능
     * 60fps: 고스트 현상 없음
     * 10.5인치: 야외에서도 사용 가능

  소프트웨어

     * Sol:OS 소개: 방해 요소가 없는 운영 체제, 필요한 모든 것만 포함
     * 의도적인 단순함: 깨끗하고 직관적인 인터페이스
     * 더 나은 읽기 경험: 최고의 PDF 리더 제공, 페이지 넘기기와 여백에 메모 가능
     * 모든 콘텐츠 한 곳에: 모든 클라우드 서비스와 통합, 통합된 읽기 및 주석 경험 제공
     * 즐겨찾는 서드파티 앱: 필요한 모든 앱 설치 가능

  기기

     * 햇빛에서도 읽기 가능: 정원에서부터 국립공원까지 편안하고 눈부심 없는 사용 가능
     * 눈에 더 부드러움: PWM 깜박임이 없는 디밍 기술 사용, 민감한 눈에도 편안함
     * 오랜 시간 읽기 가능: 비발광성, 종이처럼 읽기 편안함
     * 종이 같은 마감: 매트 마감과 텍스처 표면, 자연스러운 필기 경험 제공

  Daylight 박스에 포함된 것들

     * 편안한 케이스: 부드러운 터치 패브릭 케이스, 2024년 가을 출시 예정
     * 액션 버튼: 빠른 접근과 페이지 넘김을 위한 버튼, 사용자 정의 가능
     * 확장된 배터리 수명: 한 번 충전으로 며칠 동안 사용 가능
     * 스타일러스: Wacom 스타일러스, 버튼 포함, 교체 가능한 팁, 충전 필요 없음

  성능

     * 디스플레이: 10.5인치 Live Paper™ 디스플레이, 1600 x 1200 해상도, 190dpi, 순수 앰버 백라이트 옵션, DC 디밍 (PWM 없음), Wacom EMR 패시브 스타일러스
     * RAM: 8GB
     * 저장소: 128GB
     * CPU: MediaTek Helio G99
     * 배터리: 8000mAh
     * 연결성: Wi-Fi 6, Bluetooth 5.0, USB Type-C with PD, MicroSD 슬롯, Pogo 핀
     * 기기 무게: 1.2 lbs (550g)
     * 기타: 스테레오 스피커, 마이크, 사용자 정의 가능한 액션 버튼
     * 소프트웨어: Android 13

  Founders Edition

     * 한정 기간 동안 창립자 에디션을 액세서리와 함께 제공함
     * 포함된 액세서리: 태블릿, 스타일러스, 충전 케이블 등

  GN⁺의 의견

     * 눈 건강: 블루 라이트와 PWM 깜박임이 없는 디스플레이는 눈 건강에 매우 유익함
     * 야외 사용: 햇빛 아래에서도 사용 가능한 디스플레이는 야외 활동이 많은 사용자에게 큰 장점이 될 수 있음
     * 배터리 수명: 긴 배터리 수명은 이동 중에도 장시간 사용이 가능하게 함
     * PDF 리더: 최고의 PDF 리더 기능은 학생이나 전문가에게 매우 유용함
     * 경쟁 제품: Remarkable 2와 같은 종이 같은 디스플레이를 제공하는 다른 제품들도 고려해볼 만함

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Daylight 창립자 의견
          + Daylight 창립자가 직접 댓글을 남김.
          + 눈의 피로를 줄이고 미니멀리즘을 추구하는 킨들/Eink의 장점을 컴퓨터 작업에 적용하고자 함.
          + 기존의 느린 속도와 잔상 문제를 해결하기 위해 60~120fps의 고속 리프레시율을 가진 Paperlike epaper 디스플레이 개발.
          + 2018년부터 개발 시작, 2021년 말 첫 개념 증명 후 2.5년간 생산 준비.
          + 일본 공장에서 독점 생산되는 60fps epaper 디스플레이 사용.
          + 전통적인 Eink가 더 나은 경우도 있지만, 일반적인 컴퓨터 작업에는 속도와 잔상 없는 디스플레이가 더 유용하다고 판단.
     * OLED iPad와 비교
          + Daylight가 rM2의 대체품이 될 수 있을지 궁금해함.
          + OLED iPad를 단색 모드로 설정해 사용하는 방법을 소개.
          + Magic Keyboard에서 120fps 264ppi의 따뜻한 단색 모드로 타이핑 중.
     * 소프트웨어 중요성
          + 기기의 화면보다 소프트웨어가 더 중요하다는 의견.
          + Remarkable의 제한된 기능이 훌륭한 사용자 경험을 제공함.
          + 내장 앱과 설계된 앱에 대한 추가 정보 요청.
          + 화면 크기가 작아 최소 13인치가 필요하다는 의견.
     * 멀티미디어 스케치패드
          + 전송 반사형 디스플레이와 일반 OS를 갖춘 펜 태블릿이 매우 매력적임.
          + Daylight를 염두에 두고 Android 포트를 다시 검토할 계획.
     * 데모 비디오
          + 좋은 데모 비디오 링크 공유.
     * 가격과 해상도 문제
          + Boox Page를 사용 중이며 Daylight가 좋은 추가 기기가 될 수 있다고 생각.
          + 그러나 가격과 190 ppi 해상도가 실망스러움.
          + 저해상도 디스플레이가 불만족스러움.
     * 앱 사용에 대한 의견
          + 앱(예: Spotify)이 오히려 단점이라고 생각.
          + 킨들의 가벼움과 배터리 수명을 좋아함.
          + 웹사이트 디자인이 아름답다고 생각.
     * 웹사이트 문제
          + 웹사이트 빌더에 대한 불만 제기.
          + iOS 16.6.1에서 클라이언트 측 오류 발생.
     * Obsidian 사용
          + Obsidian을 실행할 수 있는 기기를 꿈꿔옴.
          + e-ink 테마를 만들었지만, 낮은 리프레시율과 잔상 문제로 작업이 불편함.
          + Daylight가 이러한 문제를 해결할 수 있을지 궁금해함.
     * 초기 도입에 대한 경계
          + 초기 도입자가 되기에는 조심스럽지만, 많은 사람들이 기대하고 있는 것에 기쁨.
          + 기기가 기대만큼 훌륭하다면 꿈이 이루어질 것이라고 생각.
"
"https://news.hada.io/topic?id=14953","Quary - 엔지니어를 위한 오픈소스 BI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Quary - 엔지니어를 위한 오픈소스 BI

     * ""Engineer-oriented BI and analytics""
          + 엔지니어들에게 기존 셀프-서브 BI 도구들은 로컬 개발도구를 포기하게 만듦(Copilot, Git등)
          + Quary는 표준 소프트웨어 관행(버전 관리, 테스트, 리팩토링, CI/CD, 오픈 소스 등)을 BI 및 분석 워크플로우에 도입하여 이러한 문제점을 해결
     * 다양한 DB에 접속 지원 : Supabase, Redshift, Bigquery, PostgreSQL, Snowflake, DUckDB, SQLite
     * 테이블을 변환, 구성 및 문서화하기 위한 SQL 쿼리 작성
     * 차트, 대시보드 및 보고서 만들기(개발 중)
     * 버전 관리를 통해 반복적으로 테스트, 협업 및 리팩터링하기
     * 정리되고 문서화된 모델을 데이터베이스에 다시 배포
     * 지원하는 애셋 타입
          + Source: 데이터베이스 테이블, 플랫 파일 또는 API(DuckDB 사용)와 같이 Quary에 공급되는 외부 데이터 소스를 정의
          + Model: SQL을 사용해 소스의 원시 데이터를 분석 가능한 데이터 세트로 변환하여 엔지니어가 복잡한 쿼리를 원자적 구성 요소로 분할 가능
          + Chart: SQL을 사용하여 데이터의 시각적 표현 생성
          + Dashboard(WIP): 여러 차트를 단일 보기로 결합하여 엔지니어가 한 곳에서 데이터를 모니터링하고 분석
          + Report(WIP): 자세한 보고서를 만들어 인사이트와 결과를 팀 또는 이해관계자와 공유
"
"https://news.hada.io/topic?id=14911","FFmpeg을 사용한 손쉬운 타임랩스 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FFmpeg을 사용한 손쉬운 타임랩스 제작

타임랩스 제작 방법

     * 타임랩스 제작에 대한 다양한 시도
          + 타임랩스를 많이 제작해왔음
          + 파이썬 등을 사용하여 다양한 방법을 시도해봄
     * FFMpeg을 이용한 가장 쉬운 방법 발견
          + 오늘 가장 쉬운 방법을 발견함
          + FFMpeg을 사용하여 타임랩스를 제작하는 방법

FFMpeg을 이용한 타임랩스 제작 명령어

     * 명령어
          + ffmpeg -framerate 30 -pattern_type glob -i '*.JPG' -c:v libx264 -r 30 -pix_fmt yuv420p timelapse.mp4
     * 명령어 설명
          + ffmpeg: FFMpeg 프로그램 실행
          + -framerate 30: 초당 30 프레임 설정
          + -pattern_type glob: 파일 패턴 타입을 glob으로 설정
          + -i '*.JPG': 입력 파일로 모든 JPG 파일을 사용
          + -c:v libx264: 비디오 코덱을 libx264로 설정
          + -r 30: 출력 비디오의 프레임 레이트를 30으로 설정
          + -pix_fmt yuv420p: 픽셀 포맷을 yuv420p로 설정
          + timelapse.mp4: 출력 파일 이름

GN⁺의 의견

     * FFMpeg의 장점
          + FFMpeg은 다양한 멀티미디어 파일을 처리할 수 있는 강력한 도구임
          + 명령어 한 줄로 간단하게 타임랩스를 제작할 수 있음
     * 초급 소프트웨어 엔지니어에게 유용한 이유
          + 복잡한 코드 작성 없이 간단한 명령어로 작업을 수행할 수 있음
          + 멀티미디어 파일 처리에 대한 기본적인 이해를 높일 수 있음
     * 비슷한 기능을 제공하는 도구
          + Adobe Premiere Pro, Final Cut Pro와 같은 상용 소프트웨어도 타임랩스 제작 가능
          + 그러나 FFMpeg은 무료이고 오픈소스임
     * 기술 도입 시 고려사항
          + FFMpeg의 다양한 옵션과 기능을 익히는 데 시간이 필요할 수 있음
          + 명령어 기반이므로 GUI를 선호하는 사용자에게는 불편할 수 있음

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 매일 사진을 찍어 1년 동안의 변화를 기록한 프로젝트
          + 매일 몇 분마다 사진을 찍고, 태양의 각도가 같은 프레임을 선택해 합성함으로써 유령 같은 효과를 냄.
          + 시간이 지나면서 태양의 각도가 변하는 프레임을 선택해 하루가 지나가는 것처럼 보이게 함.
          + 관련 영상 링크
     * FFMPEG의 비디오 안정화 기능
          + FFMPEG의 ""vidstab"" 기능이 비디오 안정화에 탁월함.
          + 모든 버전이 ""vidstab""을 지원하지 않음.
          + 명령어 예시: ffmpeg -i ""$1"" -vf vidstabdetect=shakiness=5:show=1 dummy.avi
          + 카약에서 촬영한 흔들리는 비디오 예시
     * 라즈베리 파이와 FFMPEG를 이용한 타임랩스 제작
          + 라즈베리 파이 제로와 Pi 카메라, FFMPEG를 이용해 식물 성장 타임랩스를 만듦.
          + Bash 스크립트를 사용해 매 시간마다 사진을 찍고, 주기적으로 타임랩스 비디오를 생성함.
          + 스크립트 예시
     * FFMPEG를 이용한 타임랩스 제작 경험
          + FFMPEG를 이용해 하늘을 촬영한 타임랩스를 만듦.
          + 텔레그램 명령어로 타임랩스를 생성함.
          + 관련 영상 링크
     * FFMPEG의 강력함
          + FFMPEG는 매우 강력한 도구로, 간단한 명령어로 복잡한 작업을 처리할 수 있음.
          + 비디오 편집에도 유용함.
     * FFMPEG의 간편함
          + GUI 비디오 편집 도구보다 FFMPEG가 더 간편하고 효율적임.
          + 명령어 플래그를 저장해두고 필요할 때마다 참조할 수 있음.
          + FFMPEG는 FOSS(자유 및 오픈 소스 소프트웨어)의 왕 중 하나임.
     * Windows에서의 FFMPEG 사용 주의사항
          + -pattern_type glob은 Windows에서 지원되지 않음.
          + 연속된 번호로 JPEG 파일을 이름 지어 패턴을 사용하는 방법으로 대체 가능함.
     * MoviePrint 도구 소개
          + 비디오에서 스크린샷을 추출하는 아름다운 도구인 MoviePrint 소개.
          + MoviePrint 웹사이트
          + GitHub 링크
     * Rimworld 콜로니 타임랩스 블로그 포스트
          + Rimworld 콜로니의 타임랩스를 만드는 방법에 대한 블로그 포스트 작성.
          + Windows에서 -pattern_type glob이 작동하지 않는다는 점을 인지하지 못했음.
          + 이미지의 종횡비가 다를 경우 검은색 막대로 패딩하는 방법 소개.
          + 블로그 포스트 링크
     * FFMPEG의 다양한 기능
          + KDenLive와 ShotCut 같은 도구 대신 FFMPEG를 사용해 비디오 편집 작업을 수행함.
          + 타임랩스, 트리밍, 밝기/대비 조정 등 다양한 작업을 처리할 수 있음.
          + ffplay를 사용해 결과를 미리보기 할 수 있음.
"
"https://news.hada.io/topic?id=14983","ICQ 서비스 6월 26일부터 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ICQ 서비스 6월 26일부터 중단

ICQ 서비스 종료 및 대체 서비스 안내

  ICQ 서비스 종료

     * ICQ 서비스가 6월 26일부터 중단됨.
     * 사용자들은 대체 서비스로 전환해야 함.

  대체 서비스

     * 친구들과의 채팅은 VK Messenger에서 가능함.
     * 동료들과의 업무 관련 채팅은 VK WorkSpace에서 가능함.

GN⁺의 의견

     * ICQ의 역사적 배경: ICQ는 1996년에 출시된 최초의 인스턴트 메신저 중 하나로, 많은 사람들이 인터넷 초창기에 사용했던 서비스임. 그러나 시간이 지나면서 WhatsApp, Telegram, Facebook Messenger 등 더 현대적이고 기능이 풍부한 메신저들이 등장하면서 사용자가 줄어들었음.
     * VK Messenger와 VK WorkSpace: VK Messenger는 러시아의 소셜 네트워크 VKontakte에서 제공하는 메신저 서비스로, 다양한 기능과 안정성을 제공함. VK WorkSpace는 업무용 협업 도구로, 팀 간의 원활한 소통과 협업을 지원함.
     * 서비스 전환의 필요성: 기존 ICQ 사용자는 서비스 종료 전에 데이터를 백업하고 새로운 메신저로 전환해야 함. 특히 업무용으로 ICQ를 사용하던 사용자들은 VK WorkSpace로의 전환을 고려해야 함.
     * 기술적 고려사항: 새로운 메신저로 전환할 때 데이터 보안과 프라이버시를 고려해야 함. VK Messenger와 VK WorkSpace는 러시아 기반 서비스로, 데이터 저장 위치와 보안 정책을 확인하는 것이 중요함.
     * 대체 서비스 추천: ICQ 사용자들은 VK Messenger와 VK WorkSpace 외에도 WhatsApp, Telegram, Slack 등 다양한 대체 메신저 서비스를 고려할 수 있음. 각 서비스의 기능과 보안 정책을 비교하여 자신에게 맞는 서비스를 선택하는 것이 중요함.

   저 아직 제 ICQ 번호 기억하는데.. #5775903
   이제 정말 추억이네요.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * ICQ의 추억
       ICQ의 소리, 연결될 때 움직이는 이미지, Winamp에서 몇 곡 안 되는 노래를 듣던 기억. 나이와 국가를 필터링해 사람들과 연결되던 경험. 특히 자폐 스펙트럼에 있는 십대로서 연결된 느낌이 최고였음. MSN으로 전환되면서 모든 것이 나빠졌다고 생각함. ICQ의 사용자 경험이 훌륭했음.
     * ICQ와의 관계
       20년 동안 로그인하지 않았지만, ICQ에서 많은 관계를 형성했음. 대학 시절 전자 통신의 주요 수단이었고, 로맨틱한 관계도 ICQ에서 시작되고 끝났음. 시간이 지나면서 변화하는 것에 대한 또 다른 상기.
     * 순수했던 시절의 좋은 기억
       ICQ 클라이언트가 긴 파일 이름을 잘라내는 기능이 있었음. 컴퓨터에서 사람들과 캐주얼하게 채팅하던 시절이 그리움. 온라인 상태인 사람과 실시간 대화가 가능했음. 전화로 문자 메시지를 보내는 것보다 훨씬 빠르고, 멀티태스킹이 쉬웠음.
     * ICQ에서의 우연한 만남
       ICQ 계정의 국가를 무작위로 설정했는데, 어느 날 바누아투에서 온 사람과 연결됨. 알고 보니 그 사람도 바누아투가 아닌 베네수엘라에서 왔음. 나중에 바누아투에서 사람들을 검색해보니 우리 둘만 있었음.
     * ICQ 번호 기억
       많은 사람들이 자신의 ICQ 번호를 기억하는 이유에 대한 질문. ICQ 번호가 사람들과 연결하는 데 사용된 식별자였음. 당시에는 기억에 더 잘 남았던 것 같음.
     * ICQ의 상징적인 소리
       ""Uh oh!""라는 ICQ의 상징적인 소리에 대한 언급.
     * ICQ와 다른 채팅 앱의 차이점
       ICQ가 다른 채팅 앱과 어떻게 다른지에 대한 질문.
     * ICQ에서의 직업 제안
       ICQ에서 직업 제안을 받았지만 고등학생이었기 때문에 거절했음. ICQ 번호가 0으로 끝나는 작은 혜택을 제공했음.
     * ICQ 번호에 대한 자부심
       십대 시절 자신의 ICQ 번호에 대한 자부심. 당시에는 Universal Internet Numbers(UINs)로 알려져 있었음.
     * 메시징의 변화
       과거에는 Pidgin 같은 앱을 사용해 누구와도 대화할 수 있었음. 오늘날에는 여러 앱을 사용해야 해서 불편함.
"
"https://news.hada.io/topic?id=15027","Mistral-finetune - Mistral 모델을 파인튜닝 하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Mistral-finetune - Mistral 모델을 파인튜닝 하기

     * Mistral의 모델들을 메모리/성능 효율적으로 파인튜닝 하게 해주는 경량 코드 베이스
     * LoRA 기반으로 대부분의 가중치가 동결되고 Low-Rank Matrix Perturbation의 형태로 1~2%의 추가 가중치만 훈련
     * 효율성을 극대화하려면 A100 또는 H100 GPU를 사용하는 것이 좋으며, 코드베이스는 멀티 GPU 단일 노드 트레이닝 설정에 최적화되어 있지만 7B와 같은 소형 모델의 경우 단일 GPU로도 충분

     노트 : 이 리포지토리의 목표는 미스트랄 모델을 미세 조정하기 위한 간단하고 안내에 따른 진입점을 제공하는 것. 따라서 (특히 데이터 서식과 관련하여) 상당히 의견이 분분하며, 여러 모델 아키텍처나 하드웨어 유형에 걸쳐 포괄적인 것을 목표로 하지 않음. 보다 일반적인 접근 방식에 대해서는 torchtune과 같은 다른 훌륭한 프로젝트를 확인해 볼 것
"
"https://news.hada.io/topic?id=14992","복셀 디스플레이스먼트 렌더러 – 레트로 3D 미학의 현대화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    복셀 디스플레이스먼트 렌더러 – 레트로 3D 미학의 현대화

Voxel Displacement Renderer — 레트로 3D 미학의 현대화

  미적 동기

     * 90년대 초중반의 3D 게임들(Doom, Quake, Duke Nukem)은 기술과 게임 플레이 면에서 큰 영향을 미쳤음.
     * 최근에는 이러한 게임들의 시각적 제한이 레트로한 매력으로 다가옴.
     * 환경 기하학은 단순하고 상상력이 풍부했으며, 텍스처는 선명한 픽셀 경계를 가졌음.
     * 이러한 스타일은 2D 픽셀 아트의 스타일화된 추상화와 유사함.
     * 이는 현대 레트로 영감을 받은 게임과 3D 인디 타이틀에서 인기를 끌고 있음.

  보통의 복셀 작동 방식

     * 복셀 메시는 모든 큐브 모양의 셀이 채워지거나 비어 있는 3차원 그리드임.
     * 큰 복셀은 텍스처가 있고, 작은 복셀은 단색임.
     * 큰 환경을 만들기 위해 모든 기하학을 공유 그리드에 배치하거나 독립적인 복셀 메시를 동일한 공간에 배치할 수 있음.
     * 복셀로 게임 세계를 형성하기로 결정하면 복셀 기하학을 만들어야 하며, 렌더링 및 게임 플레이 로직이 복셀 단위로 작동해야 함.
     * 복셀 메시에서 기하학을 추가하거나 제거하는 것은 쉬움.

  보통의 변위 작동 방식

     * 변위 매핑은 텍스처의 각 픽셀이 메시의 표면에서 얼마나 안쪽이나 바깥쪽으로 확장되어야 하는지를 정의함.
     * 3D 모델링 소프트웨어는 메시를 세분화하고 새로운 정점을 변위시켜 변위 매핑을 적용할 수 있음.
     * 실시간 그래픽에서는 표면 셰이딩 효과와 함께 사용되어 메시의 물리적 형태를 변경하지 않고도 세밀한 기하학적 디테일을 생성할 수 있음.
     * 셸 매핑은 객체의 실루엣을 따라 변위를 볼 수 있게 해줌.

  내가 만든 것 — 복셀과 변위 매핑의 혼합

     * 고전 3D 게임의 환경을 모델링하기 위해 기존의 저폴리 메시를 사용하고, 변위 맵을 적용하여 복셀 스케일의 표면 디테일을 정의함.
     * 삼각형 메시와 제한된 변위 맵 정보를 사용하여 렌더러가 GPU에 로드할 기하학 데이터를 변환함.
     * 텍스처를 사전 처리하여 렌더링 중에 필요한 정보를 생성함.
     * 메시와 텍스처 상태를 사용하여 복셀 변위 기하학을 렌더링함.

  아트 에셋 및 환경 생성

     * 텍스처와 메시 두 가지 종류의 에셋을 생성해야 함.
     * 각 텍스처는 알베도 맵과 변위 맵으로 작성됨.
     * 메시들은 기존의 저폴리 텍스처 맵핑 삼각형 메시임.
     * 메시의 구조와 텍스처 매핑에는 제한이 있음.

  이 접근법의 장점

     * 익숙한 워크플로우를 사용하여 콘텐츠를 생성할 수 있음.
     * 환경을 삼각형 메시로 작성하므로, 물리 엔진이나 캐릭터 컨트롤러를 작성할 필요가 없음.
     * 대부분의 게임 플레이 시스템은 복셀 디테일을 신경 쓸 필요가 없음.

  앞으로의 계획

     * 렌더러 자체에 추가하거나 개선할 기능이 많음.
     * 작은 객체나 애니메이션 객체를 통합하는 방법을 연구 중임.
     * 조명 구현을 개선할 계획이 있음.
     * 이 렌더링 기술을 게임에 통합하는 것이 현실적인 경로라고 생각함.

GN⁺의 의견

     * 기술적 도전: 복셀과 변위 매핑을 결합하는 것은 매우 어려운 작업임. 이는 많은 커스텀 기계 작업을 필요로 함.
     * 실용성: 이 기술은 기존의 게임 엔진에 통합될 가능성이 높음. 이는 개발자들이 기존 시스템을 활용할 수 있게 함.
     * 미적 매력: 레트로한 3D 게임의 미학을 현대적으로 재해석하는 것은 많은 게이머들에게 매력적일 수 있음.
     * 성능 고려: 이 렌더링 기술은 성능 최적화가 필요함. 특히 실시간 렌더링에서 중요한 요소임.
     * 미래 가능성: 이 기술은 다양한 게임 장르에 적용될 수 있으며, 특히 인디 게임 개발자들에게 유용할 수 있음.
"
"https://news.hada.io/topic?id=14979","톰 웨이츠 vs. Frito-Lay, Inc (2003) 소송","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   톰 웨이츠 vs. Frito-Lay, Inc (2003) 소송

Tom Waits와 Frito-Lay의 법적 분쟁

  사건 개요

     * Tom Waits의 입장: Tom Waits는 상업 광고에 자신의 음악을 사용하는 것에 대해 강력히 반대해왔음. 그는 자신의 음악이 단순한 광고용으로 전락하는 것을 원치 않았음.
     * Frito-Lay의 광고: 1988년, Frito-Lay는 새로운 제품인 SalsaRio Doritos를 홍보하기 위해 Waits의 노래 ""Step Right Up""과 매우 유사한 곡을 사용한 광고를 제작함. 이 광고는 Waits의 목소리를 흉내낸 Stephen Carter가 노래를 부름.
     * Waits의 반응: Waits는 이 광고를 처음 들었을 때 매우 분노했고, 사람들이 자신이 Doritos 광고에 참여했다고 오해할 것을 우려함.

  법적 대응

     * 소송 제기: 1988년 11월, Waits는 Frito-Lay와 그 광고 대행사인 Tracy-Locke Inc.를 상대로 소송을 제기함. 주요 주장 내용은 다음과 같음:
          + Lanham Act 위반: 원산지 표시의 허위 사용, 허위 설명, 허위 표현 금지.
          + 목소리 도용: 캘리포니아 법에 따른 목소리 도용.
          + 허위 지지: Waits의 허락 없이 그의 목소리를 사용하여 소비자들이 Waits가 제품을 지지한다고 오해하게 만듦.

  법적 결과

     * 배심원 판결: 1990년 4월과 5월에 열린 재판에서 배심원은 Waits에게 유리한 판결을 내림. Waits는 총 260만 달러의 배상금을 받음:
          + 실제 손해 배상: 37만 5천 달러.
          + 징벌적 손해 배상: 200만 달러.
          + Lanham Act 위반 배상: 10만 달러.
          + 변호사 비용: 12만 5천 달러.

  항소와 최종 판결

     * 항소: Frito-Lay와 Tracy-Locke는 1991년 12월 3일 판결에 대해 항소함. 주요 항소 내용은 다음과 같음:
          + Waits가 허위 지지에 대해 소송을 제기할 자격이 없다는 주장.
          + 목소리 도용에 대한 판결이 더 이상 유효하지 않다는 주장.
     * 최종 판결: 1992년 8월 5일, 9차 순회 항소 법원은 Lanham Act에 따른 배상금을 중복으로 인정하지 않기로 했지만, 나머지 판결은 모두 유지함.

  사건의 의미

     * 공공 이미지 보호: 이 사건은 유명 인사가 자신의 목소리나 이미지를 허락 없이 상업적으로 사용되는 것을 막을 수 있는 권리를 강화함.
     * 광고와 예술의 경계: Waits는 자신의 음악이 단순한 광고용으로 전락하는 것을 원치 않았고, 이는 예술가의 창작물에 대한 존중을 요구하는 중요한 사례로 남음.

GN⁺의 의견

     * 예술가의 권리 보호: 이 사건은 예술가가 자신의 창작물에 대한 통제권을 유지하는 것이 얼마나 중요한지를 보여줌. 이는 다른 예술가들에게도 큰 교훈이 될 수 있음.
     * 광고의 윤리성: 광고주와 광고 대행사는 유명 인사의 이미지를 사용할 때 윤리적 책임을 다해야 함. 이는 소비자들에게도 신뢰를 줄 수 있음.
     * 법적 대응의 어려움: Waits가 언급한 것처럼, 법적 분쟁은 매우 오랜 시간이 걸리고 스트레스를 유발할 수 있음. 그러나 필요한 경우에는 반드시 대응해야 함.
     * 대체 제품 추천: 음악을 광고에 사용할 때는 원작자의 허락을 받는 것이 중요함. 이를 통해 법적 문제를 피할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Tom Waits의 ""Step Right Up"" 앨범을 다시 들으며 이 사건을 알게 됨. Tomcat이 이겨서 기쁨. Scarlett Johansson vs. OpenAI 사건과 유사점이 보임.
          + Tom Waits의 ""Step Right Up"" 앨범을 다시 들으며 이 사건을 알게 되었음. Tomcat이 이겨서 기쁨. Scarlett Johansson vs. OpenAI 사건과 유사점이 보임.
     * Tom Waits가 개 사료 광고에 나레이션을 했지만, 그의 예술적 무결성은 여전히 유지됨.
          + Tom Waits가 개 사료 광고에 나레이션을 했지만, 그의 예술적 무결성은 여전히 유지됨. 그의 인터뷰도 노래만큼 재미있음.
     * ""Two and a half million bucks. Spent it all on candy.""
          + ""Two and a half million bucks. Spent it all on candy."" 진정한 예술가임.
     * Tom Waits는 Frito-Lay를 저작권 침해로 고소하지 않았음.
          + Tom Waits는 Frito-Lay를 저작권 침해로 고소하지 않았음. 당시 그는 노래 ""Step Right Up""의 저작권을 소유하지 않았음.
     * Frito-Lay가 실제로 녹음 저작권을 라이선스했다면, Tom Waits는 법정에서 이길 수 없었을 것임.
          + Frito-Lay가 실제로 녹음 저작권을 라이선스했다면, Tom Waits는 법정에서 이길 수 없었을 것임. 저작권법의 연방 우선권 개념 때문임.
     * 저작권법의 연방 우선권 개념 설명.
          + 저작권법의 연방 우선권 개념 설명. 주 법이 저작권 문제에 관여할 수 없도록 함.
     * Frito-Lay가 PepsiCo가 아닌 Frito Lay를 상대로 소송을 제기한 것이 흥미로움.
          + Frito-Lay가 PepsiCo가 아닌 Frito Lay를 상대로 소송을 제기한 것이 흥미로움.
     * 오늘날의 콘텐츠 제작자들이 Tom Waits의 관점을 받아들여야 함.
          + 오늘날의 콘텐츠 제작자들이 Tom Waits의 관점을 받아들여야 함. 음악은 항상 돈이 아닌 사랑으로 만들어졌음.
     * 정치인들이 후원사의 로고가 새겨진 옷을 입어야 한다는 의견.
          + 정치인들이 후원사의 로고가 새겨진 옷을 입어야 한다는 의견.
     * Tom Waits가 프랑스 서커스 공연자와의 법적 분쟁에서 겪은 이야기가 가장 좋아하는 이야기임.
          + Tom Waits가 프랑스 서커스 공연자와의 법적 분쟁에서 겪은 이야기가 가장 좋아하는 이야기임.
     * ""The large print giveth and the small print taketh away."" ―Tom Waits
          + ""The large print giveth and the small print taketh away."" ―Tom Waits
     * Frito-Lay가 광고를 방영할 수 있었지만, 250만 달러의 비용이 들었음.
          + Frito-Lay가 광고를 방영할 수 있었지만, 250만 달러의 비용이 들었음.
     * m3u 링크는 깨졌지만, ""corn chip sermon"" 녹음은 같은 사이트에 있음.
          + m3u 링크는 깨졌지만, ""corn chip sermon"" 녹음은 같은 사이트에 있음. 이해가 됨.
     * 인기 영화 후에 만화에서 비슷한 목소리의 성우를 고용하는 경우에 대한 논의.
          + 인기 영화 후에 만화에서 비슷한 목소리의 성우를 고용하는 경우에 대한 논의. 예: Cars 영화의 Owen Wilson 대체 성우.
"
"https://news.hada.io/topic?id=14903","PaliGemma - 구글의 오픈 멀티모달 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       PaliGemma - 구글의 오픈 멀티모달 모델

     * PaliGemma는 멀티모달 모델로, 객체 감지 및 분할 등의 작업에서 다른 VLM(비전언어모델)들과 달리 우수한 성능을 보임
     * 특정 작업에 대해 성능을 향상시키기 위해 파인 튜닝 가능
     * 2024년 Google I/O 이벤트에서 발표. SigLIP이라는 비전 모델과 Gemma라는 대형 언어 모델을 결합.
     * 트랜스포머 디코더와 비전 트랜스포머 이미지 인코더로 구성되며, 이미지와 텍스트를 모두 입력으로 받아 텍스트를 출력하며 여러 언어를 지원함
     * 모델은 30억 개의 결합 파라미터로 상대적으로 작은 크기이며, 상업적 사용이 허용되고 이미지/짧은 동영상 캡션, 시각적 질의응답, 텍스트 읽기, 객체 감지, 객체 분할 등의 작업에 파인튜닝이 가능함
     * 싱글 턴 VLM으로, 특정 사용 사례에 맞게 파인튜닝할 때 가장 잘 작동함
          + 이미지 캡션 작성, 비디오 캡션 작성, 시각적 질문 응답, 세분화 등의 작업에 적합함
          + OCR, 문서 이해, 시각적 질의응답(VQA), 객체 감지 등 다양한 컴퓨터 비전 작업에서 우수한 성능을 보임
     * 폐쇄형 모델로는 해결하기 힘든 사용자 정의 애플리케이션 구축에 유용하며, OCR 분야에서도 성능과 비용 효율성 측면에서 최고 수준을 보임
     * 다만 VLM의 한계로 개방형, 복잡하고 미묘한 추론 기반 문제에는 적합하지 않으며, 프롬프트에 민감한 특성이 있어 사용에 주의가 필요함
     * PaliGemma의 공개로 멀티모달 AI가 크게 발전할 것으로 기대. 가벼운 오픈 모델로, 누구나 자신만의 대형 비전 언어 모델을 맞춤형으로 훈련하고 상업적 목적으로 배포할 수 있음
     * 이전의 LMM들은 매우 비싸고, 큰 연산 능력이 필요했으나, PaliGemma는 이러한 한계를 극복하고 맞춤형 AI 응용 프로그램을 만드는 데 혁신적인 모델
"
"https://news.hada.io/topic?id=14941","사다리 타기가 지겨울때, 썸네일로 제비뽑기 하는 법 qpick.app","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 사다리 타기가 지겨울때, 썸네일로 제비뽑기 하는 법 qpick.app

   매번 커피 내기 할때, 사다리타기 가위바위보만 하셨나요?

   좋은 사이트를 하나 발견 했습니다. qpick(아마 quick pick 인듯)

   url로 쉽게 당첨자를 뽑을 수 있습니다. 카톡이나 슬랙 등에 공유하면 당첨자가 썸네일로 보이고요.

   https://qpick.app/brunel,matt,patt

   하면 brunel matt, patt 중 하나가 자동으로 당첨이되고, 썸네일에 박제가 됩니다.

   https://qpick.app/burger,pizza,chicken

   음식 뭐먹을지 할때도 좋습니다.

   슬랙으로 매일 자동 봇 만들어서 커피내기 하면 꿀잼입니다

   Show GN은 개발자가 직접 등록하는 곳이어서 뉴스로 이전하였습니다.

   사용법

   https://qpick.app/ 뒤에다가 각 요소를 콤마(,) 로 구분하여 넣어주면 그중 하나를 뽑아줍니다
"
"https://news.hada.io/topic?id=15037","나의 전체 혀 절제 수술 1주년 기념","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          나의 전체 혀 절제 수술 1주년 기념

     * 1년 전 오늘, 편평세포암 재발로 인해 혀의 절반을 잃을 것으로 예상하고 수술에 들어갔음.
     * 전날 저녁, Bess와 법적으로 결혼식을 올렸음.
     * 결혼식은 급하게 진행되었으며, 수술 전에 결혼하고 싶었기 때문임.
     * 5월 24일 오후에 다음 날 수술 자리가 생겼다는 소식을 들었음.
     * 며칠 전 결혼 허가증을 미리 받아두었기에 가능했음.

  암 진단 과정

     * 4월 26일에 PET 스캔을 받았고, 5월 11일에 종양이 확인되었음.
     * Mayo Phoenix에서 CT 스캔을 예약했으나, Dr. Hinni가 지연을 싫어해 5월 1일에 바로 검사함.
     * CT 스캔 결과가 모호했음.
     * 5월 8일에 세침흡인 생검을 받았으나 결과가 모호했음.
     * 5월 9일에 코어 생검을 받았고, 암이 발견되지 않았음.
     * 친구와 가족에게 암이 없다고 알렸으나, Dr. Hinni는 결과를 믿지 않았음.
     * 5월 11일에 외과 생검을 받았고, 암이 확인되었음.

  수술 일정과 치료 계획

     * 혀 절반 절제술은 6월 8일이나 9일로 예정되었음.
     * 5월 동안 상태가 악화되었음.
     * Mayo의 유일한 두경부 종양학자인 Panayiotis Savvides가 휴가 중이었음.
     * 그의 PA가 그를 찾아내어 5월 19일부터 면역치료인 pembrolizumab (Keytruda)을 시작하도록 처방받았음.
     * 5월 22일에 Keytruda 주입을 받았음.
     * 5월 24일에 Dr. Hinni가 휴가를 떠나기 전날 혀 절반 절제술을 받을 수 있는지 물었음.
     * 두 명의 외과의가 수술에 참여했으며, 한 명은 혀를 절제하고 다른 한 명은 다리에서 근육을 이식해 혀를 대체함.

  결혼식과 수술 전날

     * Bess는 결혼식을 위해 친구 Smetana에게 주례를 부탁했음.
     * 5월 24일 저녁, FnB 레스토랑에서 마지막 식사를 했음.
     * Smetana와 그녀의 남자친구 Cody가 결혼식을 주관했음.
     * 결혼식은 아파트 건물의 수영장 옆에서 진행되었음.
     * 결혼식 후 피로연은 없었고, 피로와 긴장으로 일찍 잠들었음.

  수술 당일

     * 5월 25일 아침, Mayo 병원에 도착했음.
     * 수술 전 Natera 혈액 샘플을 채취하는 과정에서 문제가 있었으나 해결됨.
     * 마취 후 수술이 시작되었음.

  수술 후

     * 수술 후 깨어났을 때, 혀 절반 절제술이 전혀 혀 절제술로 변경되었음을 알게 되었음.
     * 종양이 너무 빠르게 퍼져 혀 전체를 제거해야 했음.
     * 7월 21일까지 새로운 종양이 6~8개 더 생겼음.
     * 수술 후 회복 과정이 매우 힘들었음.
     * 현재도 회복 중이며, 임상 시험 약물로 인한 부작용을 겪고 있음.

  미래에 대한 생각

     * 앞으로 1년 더 살 확률은 20% 이하임.
     * 여전히 슬픔과 싸우고 있으며, 매일 많은 양의 침을 뱉어야 함.
     * 의미 있는 삶을 찾기 위해 노력 중임.

GN⁺의 의견

     * 암 치료의 복잡성: 암 진단과 치료 과정에서 다양한 검사와 치료 방법이 필요함을 보여줌. 특히, 진단의 모호성과 치료 방법 선택의 어려움을 잘 설명함.
     * 정서적 지원의 중요성: 암 환자와 그 가족이 겪는 정서적 고통과 지원의 중요성을 강조함. 결혼식과 같은 작은 순간들이 큰 의미를 가질 수 있음.
     * 의료 시스템의 한계: 특정 의사가 부재 시 대체 인력이 없는 상황 등 의료 시스템의 한계를 지적함. 이는 환자에게 큰 영향을 미칠 수 있음.
     * 임상 시험의 역할: 임상 시험이 암 치료에 중요한 역할을 할 수 있음을 보여줌. 새로운 치료법이 환자의 생명을 연장할 수 있음.
     * 삶의 질: 암 치료 후에도 환자의 삶의 질이 중요함을 강조함. 일상 생활에서 겪는 어려움과 이를 극복하기 위한 노력이 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * @jseliger의 경험 공유에 감사
          + 암 생존자로서의 경험을 공유해줘서 고맙다는 의견.
          + 암 생존자 커뮤니티의 일원으로서의 연대감 강조.
          + 암 진단 후에도 희망을 잃지 말라는 메시지.
     * @jseliger의 여정을 지켜본 사람의 응원
          + @jseliger의 여정을 통해 암에 대한 인식을 높였다는 의견.
          + 그의 글이 많은 사람들에게 도움이 되었다는 감사의 표현.
     * 암 환자로서의 결단력 필요성
          + 암 환자는 많은 결정을 내려야 하고, 철저한 조사가 필요함.
          + 의료 및 보험 시스템에서 지원이 필요하다는 의견.
          + 경제적 여유가 도움이 될 수 있다는 점.
     * 감동적이고 영감을 주는 이야기
          + @jseliger의 이야기가 감동적이라는 의견.
          + 그의 아내 Bess의 글을 추천하며, 사랑과 관계에 대한 깊은 통찰이 담겨있다고 언급.
     * @jseliger의 강인함에 대한 존경
          + 그의 강인함을 존경하며, 일상에서 당연하게 여기는 것들에 대해 다시 생각하게 됨.
          + 그와 그의 아내에게 최선의 바람을 전함.
     * Galleri 테스트에 대한 관심
          + @jseliger의 이야기를 듣고 Galleri 테스트를 받아야겠다는 결심.
          + 마음의 평화를 위해 검사를 받겠다는 의견.
     * 긍정적인 태도의 중요성
          + @jseliger의 긍정적인 태도가 중요하다는 의견.
          + 암을 겪는 사람들을 응원하며, 그의 노트를 감사하게 생각함.
     * 암 환자의 영감
          + 암을 겪는 모든 사람들은 주변 사람들에게 영감을 준다는 의견.
          + @jseliger에게 최선의 바람을 전함.
     * 의료진의 결단력에 대한 감사
          + 치료의 중요성을 상기시키며, 의료진의 결단력에 감사.
          + 환자가 평안한 마음으로 치료를 받기를 바람.
     * 암 진단의 계기
          + PET 스캔을 통해 암을 발견한 계기에 대한 궁금증.
          + 우연히 발견된 암의 무서움에 대한 의견.
"
"https://news.hada.io/topic?id=14905","QLC SSD를 SLC SSD로 변환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          QLC SSD를 SLC SSD로 변환

QLC SSD를 SLC SSD로 변환하는 튜토리얼

  DUT SSD의 사양

     * 선택한 SSD는 Crucial BX500임
     * 웹사이트와 유튜브 채널에서 여러 번 테스트한 제품임

  주의: 계속 읽기 전에

     * 이 절차는 오버클러킹보다 안전하지만 여전히 주의가 필요함
     * 절차를 잘못 수행하면 책임을 질 수 없으므로 신중히 진행해야 함
     * 펌웨어를 SSD에 플래싱할 때 모든 데이터가 삭제되므로 백업 필수

  필요한 도구

     * Jmicron JMS578 Bridge Chip 모델의 SATA to USB 3.0 어댑터
     * SSD PCB의 ROM/Safe Mode 단자를 쇼트시키기 위한 클램프

  기술 사양

     * 컨트롤러: Silicon Motion의 SM2259XT2 모델
          + 단일 코어 컨트롤러로 32비트 ARC 아키텍처 사용
          + 최대 550 MHz의 작동 주파수, 프로젝트에서는 437.5 MHz로 작동
          + 2개의 통신 채널을 지원하며, 각 채널은 최대 8개의 Chip Enable 명령어를 지원
     * DRAM 캐시 또는 H.M.B.: DRAM이 없는 SATA SSD로 Host Memory Buffer(HMB) 기술을 지원하지 않음
     * NAND 플래시: 500GB SSD는 2개의 NAND 플래시 칩을 사용
          + Micron의 MT29F2T08GELCEJ4-QU:C 모델
          + 176층의 데이터와 총 195개의 게이트를 포함
          + 각 NAND 플래시는 1Tb의 밀도를 가지며, 총 256GB의 용량을 제공

  프로젝트에 사용된 소프트웨어

     * Silicon Motion의 MPTools 사용
          + 이 소프트웨어는 제조업체에서 제공되지 않으며, 러시아나 중국 포럼에서 유출된 것임
          + SMI SM2259XT2 MPTool FIMN48 V0304AFWV0303B0 버전 사용

  설정 적용

     * MPTools에서 SSD의 파라미터를 수정
          + Flash Control Driving (hex), Flash DQS/Data Driving (Hex) 등의 파라미터를 설정
          + Setting.set 파일을 수정하여 ENFWTAG=1을 0으로 변경
          + EnSLCMode=1 명령어 추가
          + Force SLC Mode 옵션 활성화

  내구성 증가

     * 기본 모드에서 SSD의 TBW는 120TB임
     * pSLC 모드에서 TBW는 4,000TB로 증가, 이는 3333% 이상의 증가

  테스트 벤치

     * OS: Windows 11 Pro 64-bit
     * CPU: Intel Core i7 13700K
     * RAM: 2 × 16 GB DDR4-3200MHz
     * Motherboard: MSI Z790-P PRO WIFI D4
     * GPU: RTX 4060 Galax 1-Click OC
     * OS Drive: SSD Solidigm P44 Pro 2TB
     * DUT SSD: SSD BX500 ""SLC-Test"" 2TB

  CrystalDiskMark

     * 순차 및 랜덤 테스트 수행
     * pSLC 모드에서 랜덤 속도와 지연 시간이 크게 개선됨

  ATTO Disk Benchmark QD1 및 QD4

     * 다양한 블록 크기에서 SSD의 속도 테스트
     * pSLC 모드에서 모든 블록 크기에서 성능이 향상됨

  3DMark – 스토리지 벤치마크

     * 게임 로딩, OBS 녹화 및 스트리밍, 파일 전송 등의 테스트 수행
     * pSLC 모드에서 성능과 지연 시간이 개선됨

  PCMARK 10 – 전체 시스템 드라이브 벤치마크

     * Windows 부팅, Adobe 애플리케이션 로딩, 게임 로딩 등의 테스트 수행
     * pSLC 모드에서 성능이 거의 두 배로 향상됨

  Adobe Premiere Pro 2021

     * 16.5GB 4K 프로젝트 로딩 시간 측정
     * pSLC 모드에서 성능 차이가 거의 없음

  Windows 부팅 시간 및 게임 로딩 시간

     * Final Fantasy XIV 벤치마크 사용
     * pSLC 모드에서 성능 차이가 거의 없음

  SLC 캐싱

     * pSLC 모드에서 SSD의 전체 용량을 사용하여 평균 498 MB/s의 속도로 작성 가능

  파일 복사 테스트

     * ISO 파일과 CSGO 폴더를 RAM 디스크에서 SSD로 복사
     * pSLC 모드에서 성능 차이가 거의 없음

  온도 테스트

     * 스트레스 테스트 동안 SSD의 온도 관찰
     * SSD는 저전력 소비로 인해 열이 거의 발생하지 않음

  전력 소비 및 효율성

     * Quarch Programmable Power Module을 사용하여 테스트 수행
     * pSLC 모드에서 전력 소비가 감소하고 효율성이 증가함

  GN⁺의 의견

     * QLC SSD를 SLC SSD로 변환하면 내구성과 성능이 크게 향상됨
     * 그러나 이 절차는 매우 복잡하고 잘못 수행하면 SSD가 손상될 수 있음
     * 이 기술은 특히 데이터 센터와 같은 고성능 환경에서 유용할 수 있음
     * 비슷한 기능을 제공하는 다른 제품으로는 Intel Optane SSD가 있음
     * 이 기술을 도입할 때는 데이터 백업과 신중한 절차 수행이 필수적임

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 저렴한 DRAMless SSD를 pSLC 모드로 사용하는 방법
          + 저렴한 DRAMless SSD를 pSLC 모드로 사용하려면 디스크 용량의 25-33%만 사용하면 됨.
          + 대부분의 저가형 DRAMless 컨트롤러는 전체 디스크 캐싱 모드로 작동함.
          + 디스크의 1/3 또는 1/4 크기의 파티션을 만들고 나머지 공간을 TRIM 처리하면 항상 pSLC 모드로 작성됨.
          + ""HD Tune"" 벤치마크 결과를 통해 SSD가 이 모드로 작동하는지 확인 가능.
     * 내구성과 데이터 보존
          + 내구성과 데이터 보존은 밀접하게 관련되어 있음.
          + SLC 모드는 QLC보다 상태 구분이 적어 데이터 보존 기간이 더 길어짐.
          + SLC 모드에서의 데이터 보존 기간은 사이클 수에 따라 크게 증가함.
     * 용량과 내구성의 트레이드오프
          + 480GB SSD를 120GB SSD로 변환하면 쓰기 내구성이 120TB에서 4000TB로 증가함.
          + 로그 저장과 같은 용도로 유용할 수 있음.
          + 제조업체에서 이 기능을 제공하지 않는 이유는 불명확함.
     * FusionIO SLC 카드 경험
          + 10년 전 FusionIO SLC 카드를 벤치마킹에 사용한 경험.
          + 수백만 건의 트랜잭션을 처리하는 데 성공했음.
          + 현재는 다른 방법을 사용하겠지만 당시에는 인상적이었음.
     * eMMC를 사용하는 임베디드 장치
          + 임베디드 장치에서 eMMC를 사용하는 경우 pSLC 모드로 설정할 것을 권장함.
          + Linux 시스템에서는 mmc-utils의 mmc 명령을 사용하여 설정 가능.
          + 대량 생산 시 프로그래밍 하우스에서 미리 설정 가능.
     * 버스 전송 속도에 대한 심층 분석
          + 버스 전송 속도에 대한 심층 분석이 더 많았으면 좋겠음.
          + SSD의 모든 중요한 IC 모델 번호, 작동 클럭 주파수, 버스 폭 등을 나열한 블록 다이어그램이 유용할 것임.
     * Kingston SSD의 오버 프로비저닝 관리
          + 일부 Kingston SSD는 제조업체 제공 소프트웨어 도구를 사용하여 오버 프로비저닝을 관리할 수 있음.
     * 이미 마모된 SSD의 수명 연장
          + 이미 마모된 SSD의 수명을 연장할 수 있는지 궁금함.
          + 중국에서 이러한 SSD를 새 것으로 재플래시하는 비즈니스가 있을 수 있음.
     * SLC로 다운그레이드하는 방법
          + 제조업체가 드라이버 설정을 통해 SSD를 SLC로 다운그레이드할 수 있는 방법을 제공하면 좋겠음.
     * 하드웨어 수준의 구분
          + SLC와 다른 모드의 구분이 하드웨어 수준에서 이루어지는 것으로 가정했음.
"
"https://news.hada.io/topic?id=14920","Microsoft, Copilot+ PC 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Microsoft, Copilot+ PC 공개

     * Windows PC에 AI를 도입한 새로운 카테고리인 Copilot+ PC를 공개
          + 강력한 신규 실리콘으로 초당 40조 회 이상의 연산 처리가 가능하며, 하루 종일 사용 가능한 배터리 수명과 최첨단 AI 모델에 액세스할 수 있음
          + Recall로 PC에서 본 내용을 쉽게 찾고 기억할 수 있고, Cocreator로 실시간으로 AI 이미지를 생성 및 개선할 수 있으며, Live Captions로 40개 이상의 언어 오디오를 영어로 번역할 수 있음
          + Microsoft Surface와 Acer, ASUS, Dell, HP, Lenovo, Samsung 등 OEM 파트너사에서 출시되며 가격은 $999부터 시작함
     * 지난 1년 동안 클라우드에서 AI의 혁신적인 발전 속도를 목격했으며, 이제 디바이스에서의 AI 혁신이라는 새로운 장을 열게 됨. 실리콘부터 운영 체제, 애플리케이션 계층부터 클라우드까지 PC 전체를 AI 중심으로 완전히 재구상했음
          + 새로운 시스템 아키텍처: CPU, GPU, 고성능 신경처리장치(NPU)를 결합한 새로운 시스템 아키텍처 도입.
          + 성능: Azure Cloud에서 실행되는 대형 언어 모델(LLM)과 소형 언어 모델(SLM)과 연동하여 성능 극대화.
          + 효율성: AI 작업을 실행하는 데 있어 최대 20배 더 강력하고 100배 더 효율적이며, 업계 최고 수준의 AI 가속을 제공함
          + 배터리 수명: 한번 충전으로 최대 22시간의 로컬 비디오 재생 또는 15시간의 웹 브라우징 가능.
          + 앱 호환성: Microsoft 365 앱, Chrome, Spotify, Zoom 등 다양한 앱이 네이티브 Arm64로 실행됨.
          + 보안: Microsoft Pluton 보안 프로세서 기본 탑재, Windows 11의 새로운 보안 기능 및 업데이트.

새로운 강력한 AI 경험

     * Recall을 사용하면 PC에서 본 거의 모든 내용에 접근할 수 있어 사진 기억력을 가진 것처럼 느껴짐. 개인의 고유한 경험을 기반으로 정보를 구성해주므로 직관적으로 빠르게 필요한 내용을 찾을 수 있음
     * Cocreator를 사용하면 잉크 스트로크와 텍스트 프롬프트를 결합하여 거의 실시간으로 새로운 이미지를 생성할 수 있음. AI와 함께 창작하는 것처럼 느껴지도록 강력한 diffusion 기반 알고리즘이 최소한의 단계로 최고 품질의 결과물을 최적화함
     * Live Captions는 이제 실시간 번역 기능을 제공하여 PC를 통과하는 모든 오디오를 40개 이상의 언어에서 영어 자막으로 변환해줌
     * 새로운 Windows Studio Effects: 자동 조명 조정, 창의적인 필터, 음성 초점 및 초상화 흐림 기능
     * Copilot 키: 키보드에 새로운 Copilot 키 추가
     * 최신 모델 접근: GPT-4o 모델을 포함한 최신 AI 모델에 접근 가능

창의적인 앱에서의 혁신적인 AI 경험

     * Adobe: Photoshop, Lightroom, Express 등 Adobe의 주요 앱이 Copilot+ PC에서 실행됨.
     * DaVinci Resolve Studio: NPU 가속 Magic Mask 기능으로 시각 효과 적용.
     * CapCut: NPU를 이용한 자동 배경 제거 기능.
     * Cephable: 얼굴 표정이나 머리 움직임을 인식하는 적응형 입력 제어.
     * LiquidText: AI 기능을 사용하여 문서에 빠르고 스마트한 주석 추가.
     * djay Pro: NeuralMix™를 이용한 음악 트랙 분해 및 리믹스.

Microsoft Surface 및 파트너사의 새로운 Copilot+ PC

     * 새로운 Copilot+ PC는 Microsoft Surface와 Acer, ASUS, Dell, HP, Lenovo, Samsung 등 주요 OEM 파트너사에서 6월 18일부터 출시될 예정이며 가격은 $999부터 시작함
          + Acer: Swift 14 AI 2.5K 터치스크린.
          + ASUS: Vivobook S 15.
          + Dell: XPS 13, Inspiron 14 Plus 등.
          + HP: OmniBook X AI PC, EliteBook Ultra G1q AI PC.
          + Lenovo: Yoga Slim 7x, ThinkPad T14s Gen 6.
          + Samsung: Galaxy Book4 Edge.
     * 기업은 Copilot+ PC를 통해 강력한 AI 기능에 액세스하여 생산성을 높이고 협업을 개선하며 효율성을 높일 수 있음. IT 관리자는 오늘날 사용하는 것과 동일한 도구와 프로세스로 Copilot+ PC를 배포하고 관리할 수 있음

Windows 생태계 전반의 AI 혁신

     * Snapdragon X Elite 및 Snapdragon X Plus 프로세서: 높은 성능과 배터리 효율성 제공.
     * 미래 전망: NVIDIA GeForce RTX 및 AMD Radeon과 같은 강력한 그래픽 카드와의 결합 기대.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Microsoft의 ""Copilot"" 브랜드의 혼란
          + Microsoft의 ""Copilot"" 브랜드는 여러 제품과 서비스가 혼재되어 있어 혼란스러움. 예를 들어, GitHub의 AI 코드 어시스턴트, 챗봇 제작 도구, SharePoint와 연동 가능한 AI 기능 등이 있음. 이는 Microsoft 내부의 분열된 조직 구조를 반영하는 것 같음.
     * 로컬 장치 검색 문제
          + 로컬 장치에서 파일을 효과적으로 검색하는 것이 여전히 어려움. 이는 AI가 아닌 적절한 검색 엔진이 필요함. Microsoft는 30년 넘게 이를 해결하지 않음.
     * ARM 플랫폼 재도전
          + Microsoft가 ARM 플랫폼에 다시 도전하며, 성능과 품질을 보장하는 특별한 브랜드를 도입함. 이는 큰 뉴스일 수 있음.
     * 미래의 문제 예측
          + 향후 2년 내에 성능 문제, 호환성 문제, 수리 불가능성, 소프트웨어 지원 중단 등의 문제가 발생할 것으로 예상됨. 이는 많은 전자 폐기물을 초래할 수 있음.
     * Windows 파일 탐색기 문제
          + Windows 파일 탐색기가 파일 이름으로 검색할 때 자주 멈추거나 결과를 표시하지 않음.
     * AI 투자와 Excel 품질
          + Microsoft는 AI에 수십억 달러를 투자하지만, Excel의 품질과 성능은 20년 전 수준으로 돌아가지 않음.
     * 데이터 프라이버시 문제
          + 가족과 친구들에게 Microsoft 제품을 추천하기 어려움. Apple은 데이터 프라이버시에 대해 더 신뢰할 수 있음. Microsoft와 다른 PC 제조업체들은 데이터 프라이버시를 보장하지 못할 것 같음.
     * Pluton 칩과 ARM 플랫폼
          + Pluton 칩이 기본적으로 활성화되어 PC를 '대형 모바일 폰'으로 전환하려는 시도로 보임. ARM 플랫폼이 이를 실현하는 트로이 목마 역할을 할 수 있음.
     * 기능의 유용성
          + Microsoft가 마케팅하는 기능들이 실제로 유용한지 궁금함. 대부분의 기능들이 필요하지 않을 것 같음.
     * 로컬 실행 여부
          + ""Recall"" 기능이 로컬에서 실행되는지, 아니면 일부 작업이 외부로 아웃소싱되는지 궁금함. 법 집행 기관이 사용자의 활동을 추적할 수 있는지에 대한 우려도 있음.
"
"https://news.hada.io/topic?id=14975","Microsoft Phi-3 Cookbook","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Microsoft Phi-3 Cookbook

     * Microsoft에서 개발한 오픈 AI 모델 제품군인 Phi-3에 대한 매뉴얼
     * Phi-3 모델은 현재 사용 가능한 소형 언어 모델(SLM) 중 가장 성능이 우수하고 비용 효율적임
     * 언어, 추론, 코딩, 수학 등 다양한 벤치마크에서 동일한 크기와 다음 크기의 모델을 능가함

Phi-3 모델 종류와 성능

     * Phi-3-mini (3.8B 언어 모델)는 Microsoft Azure AI Studio, Hugging Face, Ollama에서 사용 가능함
     * Phi-3 모델은 주요 벤치마크에서 동일하거나 더 큰 크기의 언어 모델을 크게 능가함
          + Phi-3-mini는 자신의 두 배 크기의 모델보다 성능이 우수함
          + Phi-3-small과 Phi-3-medium은 GPT-3.5T를 포함한 훨씬 더 큰 모델의 성능을 능가함
     * Phi-3-small (7B)은 GPT-3.5T를 다양한 언어, 추론, 코딩, 수학 벤치마크에서 능가함
     * Phi-3-medium (14B)은 그 추세를 이어가며 Gemini 1.0 Pro의 성능을 능가함
     * Phi-3-vision (4.2B)은 일반적인 시각적 추론 작업, OCR, 표와 차트 이해 작업에서 Claude-3 Haiku와 Gemini 1.0 Pro V와 같은 더 큰 모델의 성능을 능가함

Windows Copilot용 Phi Silica 모델 소개

     * Phi 시리즈 모델을 기반으로 제작되었으며, Copilot+ PC의 NPU를 위해 특별히 설계됨
     * Windows는 NPU를 위해 맞춤 제작된 최첨단 소형 언어 모델(SLM)이 inbox로 제공되는 최초의 플랫폼임
     * Phi Silica API와 OCR, Studio Effects, Live Captions, Recall User Activity API는 6월에 Windows Copilot Library에서 제공될 예정임
     * Vector Embedding, RAG API, Text Summarization 등의 API는 추후 제공될 예정임
"
"https://news.hada.io/topic?id=14918","Netris - 오픈소스 클라우드 게이밍 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Netris - 오픈소스 클라우드 게이밍 플랫폼

     * 구글 Stadia의 소셜 기능을 가진, GeForce Now의 오픈소스 대체제
     * 다양한 혁신적인 기능을 통해 사용자들에게 향상된 게임 경험을 제공하고자 함
     * Proton-GE를 이용하여 다양한 게임을 실행할 수 있도록 지원하여 광범위한 게임 호환성 제공
     * MoQ를 통해 입력 및 비디오/오디오 전송에 QUIC 프로토콜을 사용. 가변 네트워크에서 지연 시간을 크게 줄여 선명한 비주얼을 제공하면서 데이터 사용량이나 지연 시간을 증가시키지 않음
     * SESSION_ID를 통해 게임 진행 상황, 업적, 장치를 연결하여 netris.me에 로그인할 필요 없이 연동됨
          + 유럽(eu-north-1)과 미국(us-east-1)에 위치한 공용 CDN을 통해 친구와 함께 게임할 때 지연 시간이 줄어듦. 더 많은 위치가 추가될 예정
     * Stadia의 상태 공유 기능처럼, 실행 중인 *.exe 파일을 기반으로 게임 진행 상황을 자동으로 동기화함
          + 링크를 통해 친구와 진행 상황을 공유할 수 있음
     * 최대 8명과 협동 게임 플레이 가능, 또는 마우스와 키보드 입력을 공유하여 단독 플레이 가능(neko와 유사함)
     * Edge, Chrome, Brave, Arc 등 Chrome 기반 브라우저를 실행할 수 있는 모든 장치에서 플랫폼 접근 가능. 별도 설정할 필요 없이 모든 것이 자동으로 설치되고 유지 관리됨
     * 하드웨어 가속 VMAF를 통해 대역폭을 최적화하여 최고의 비디오 품질을 제공함
          + Stadia와 같은 플랫폼에서 영감을 받아 기능을 계속 추가하여 최상의 맞춤형 게임 경험을 제공할 계획

   오우 왜 댓글이 없지 오픈소스라구요? 구독 안해도 쓸 수 있는건가욤
"
"https://news.hada.io/topic?id=14972","iFixit과 삼성 협력 종료 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          iFixit과 삼성 협력 종료 발표

     * 2년 전, iFixit은 삼성 수리 허브를 출시했음.
     * 목표는 수리 친화적인 생태계를 구축하고, 독립적인 수리 사업체에 필요한 도구와 부품을 제공하는 것이었음.
     * 이를 통해 갤럭시 기기를 지속적으로 사용할 수 있도록 하는 것이었음.

협업의 어려움

     * 최선을 다했지만, 약속을 지키지 못했음.
     * 생태계를 구축하는 과정에서 삼성의 수리 접근성에 대한 의지가 의심스러웠음.
     * 지역 수리점에 적절한 가격과 수량으로 부품을 제공하지 못했음.
     * 부품 가격이 너무 비싸서 소비자들이 수리보다는 기기 교체를 선택했음.
     * 삼성 갤럭시 기기의 디자인이 수리를 어렵게 만들어 배터리와 화면을 미리 접착된 상태로 판매해야 했음.

    협업 종료 결정

     * 많은 노력을 기울였지만, 삼성의 수리 접근 방식이 iFixit의 미션과 맞지 않았음.
     * 2024년 6월부터 iFixit은 삼성의 지정된 제3자 부품 및 도구 유통업체가 아니게 됨.
     * 다음 달부터 수리점당 분기별 7개의 삼성 부품 제한이 없어짐.
     * 기존 정보는 iFixit에서 제거되지 않지만, 삼성과 새로운 매뉴얼을 개발하지 않을 것임.
     * 삼성 기기의 부품과 수리 키트를 계속 판매할 예정이며, OEM 부품이 가능할 때 이를 소싱하고 부품이 원본인지 애프터마켓인지 명확히 표시할 것임.

  우리의 미션 계속

    수리 가능한 미래로의 행진

     * 삼성과 함께하지 못해 아쉽지만, 더 수리 가능한 미래로의 행진을 계속할 것임.
     * 전 세계 사람들에게 더 많은 부품을 배송하고, 제3자 수리에 대한 인식을 확산시키며, 모든 제조업체에게 수리가 좋은 비즈니스임을 증명할 것임.

    Kobo와의 협업

     * e-리더 제조업체 Kobo와 수리 부품을 출시했으며, 더 많은 발표가 예정되어 있음.
     * 올해 들어 노트북 배터리부터 냉장고 아이스 메이커까지 10,000개 이상의 새로운 수리 부품을 추가했음.

    독립 수리 사업체의 중요성

     * 독립 수리 사업체는 경제의 생명줄이지만, 독점화가 작은 수리 사업체를 시장에서 몰아내고 있음.
     * 일부 회사는 필수 부품과 도구의 유통을 차단하고, 수리를 완료하기 위해 독점 소프트웨어를 요구하며, 비싼 인증을 요구하고 있음.
     * 이는 수리 비용을 증가시키고 시간을 더 오래 걸리게 만듦.
     * 우리는 이러한 불친절한 수리 관행을 용납하지 않을 것임.

    수리 친화적인 법률 추진

     * 수리 친화적인 법률을 통과시키기 위해 노력하고 있으며, 연방 무역 위원회와 저작권 사무소가 모든 사람의 수리 권리를 보호하기 위한 상식적인 조치를 취하도록 옹호하고 있음.
     * 제조업체가 제품의 수명을 연장하려고 할 때, 우리는 그들이 수리의 세계를 열 수 있도록 도울 것임.

  삼성과의 협업 실패

    삼성 갤럭시 업사이클링

     * 삼성 갤럭시 업사이클링 부스는 우리의 관심을 끌었음.
     * 오래된 전화기의 진정한 업사이클링은 좋은 아이디어라고 생각하지만, 삼성이 이를 실현할 것이라고 믿지 않음.
     * 수리 커뮤니티의 회의론에도 불구하고, 몇 가지 초기 기기에 대한 수리 문서를 만들기 위해 삼성과 협력하려고 했음.
     * 그러나 화려한 보도 자료와 야심찬 이니셔티브는 후속 조치 없이는 의미가 없었음.

    협업의 어려움

     * 우리는 이 일을 성사시키기 위해 노력했음.
     * 그러나 우선순위가 너무 달라 더 이상 진행할 수 없었음.
     * 삼성 전화기는 인기 있는 기기이므로, 자체 수리 가이드를 통해 이를 다루려고 했음.
     * 그러나 기기의 수리 가능성이 계속 감소하면서 점점 더 의미가 없어졌음.

    커뮤니티와의 협력

     * 삼성 부품을 계속 판매할 것이며, 커뮤니티가 삼성 기기 수리에 대해 알고 있는 것을 계속 공유하도록 초대함.
     * iFixit 가이드의 절반 이상이 내부 팀이 작성한 것이 아님.
     * 수리점 고객을 위해 더 이상 제한된 수량에 얽매이지 않을 것임.

  앞으로의 계획

    새로운 제조업체와의 협력

     * 여름 동안 기존 파트너와의 수리 허브를 확장하여 더 많은 기기를 지원할 것임.
     * 더 많은 국가에서 더 많은 기기에 대한 부품을 출시할 것임.
     * 더 많은 기기 카테고리에 대한 수리 가능성 점수를 발표할 것임.
     * 수리 서비스 제공업체를 위해 제3자 판매 시점 제공업체와 협력하여 수리 콘텐츠에 쉽게 접근할 수 있도록 할 것임.
     * 부품 카탈로그를 10,000개 이상의 새로운 부품으로 확장하여 더 넓은 범위의 기기를 지원할 것임.
     * 새로운 제품에는 텔레비전, PC 데스크탑 및 노트북, 커피 메이커, 가전제품, 비디오 게임 콘솔 부품이 포함됨.

    수리의 중요성

     * 수리가 기본이 되어야 함.
     * 물건을 새로 사는 것만큼 수리가 쉬웠다면 더 많은 사람들이 수리를 선택했을 것임.
     * 고객에게 훌륭한 경험을 제공하고 독립적인 수리 사업체가 번창할 수 있도록 집중할 것임.
     * 우리의 비전을 공유하는 제조업체와만 비즈니스 관계를 유지할 것임.
     * 수리 권리 법이 올 여름 발효되면, 더 많은 제조업체가 제품에 대한 수리 솔루션을 출시하도록 도울 것임.

  GN⁺의 의견

    1. 수리 권리 법의 중요성: iFixit이 추진하는 수리 권리 법은 소비자와 독립 수리 사업체 모두에게 큰 도움이 될 것임. 이는 수리 비용을 줄이고, 제품의 수명을 연장하며, 전자 폐기물을 줄이는 데 기여할 것임.
    2. 제조업체의 협력 필요성: 삼성과의 협업 실패는 제조업체가 수리 가능성을 진지하게 고려하지 않으면 어떤 결과가 나올 수 있는지를 보여줌. 다른 제조업체들은 이를 교훈 삼아 수리 친화적인 접근 방식을 채택해야 함.
    3. 독립 수리 사업체의 역할: 독립 수리 사업체는 지역 경제에 중요한 역할을 하며, 소비자에게 더 많은 선택권을 제공함. 이들을 지원하는 것은 전체 경제에 긍정적인 영향을 미침.
    4. 기술 발전과 수리 가능성: 새로운 기술이 도입될 때마다 수리 가능성을 고려하는 것이 중요함. 이는 소비자 만족도를 높이고, 제품의 지속 가능성을 보장하는 데 도움이 됨.
    5. 커뮤니티의 힘: iFixit 커뮤니티가 작성한 수리 가이드가 절반 이상을 차지한다는 점은 커뮤니티의 힘을 보여줌. 이는 협업과 정보 공유의 중요성을 강조함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Samsung의 화면 교체 문제
          + 한 사용자의 파트너가 삼성 곡면 스크린을 가진 폰을 사용 중인데, 화면이 깨져 교체하려고 했으나 색상이 맞는 화면을 구하지 못하고 있음. 삼성은 다른 색상의 화면을 사용할 수 없게 하고 있으며, ETA도 제공하지 않음. 제조업체가 부품을 독점하려면 합리적인 이익률로 판매해야 한다고 주장.
     * 삼성의 고객 서비스 태도
          + 삼성의 소비자 전자제품 하드웨어는 괜찮지만, 계획된 노후화와 소프트웨어 패턴이 고객에게 불편을 줌. 클립보드 히스토리 저장 강제, Bixby 버튼, AI 기능 등으로 인해 사용 방식 변경을 강요받음.
     * 수리 권리에 대한 다양한 관점
          + 소비자: 수리 권리는 저렴한 DIY 수리를 의미함.
          + 수리점: 저가 부품을 사용해 높은 이익을 얻을 수 있음.
          + 애플: 비싼 부품을 통해 이익을 유지함.
          + 삼성도 애플과 비슷한 태도를 보임. iFixit도 비슷한 문제를 겪고 있음.
     * 삼성 폰 사용 이유
          + 한 사용자는 삼성의 플래그십 모델에만 스타일러스가 있어 사용 중이지만, 협력을 끝내고 싶어함.
     * 수리 가능성에 대한 실망
          + 폰 제조업체들이 수리 가능성을 고려하고 있다고 생각했으나, 삼성의 경우 복잡한 배터리 교체 절차로 인해 실망함.
     * 레노버와의 협력 종료 희망
          + 최근 레노버와의 협력도 끝나기를 바람. 배터리 문제와 부품 재고 부족으로 인해 실망스러운 경험을 함.
     * iFixit과 삼성의 협력 종료
          + iFixit이 삼성과의 협력을 종료한 것은 실망스럽지만, 협력이 잘 되지 않았음을 인정하고 종료한 것은 긍정적임. 삼성은 PR 반발에도 불구하고 우선순위가 낮았음을 시사함.
     * 삼성의 기존 수리 파트너십
          + 삼성의 기존 수리 파트너십은 주로 한국인들이 운영하며, 가족 경영 대기업 느낌이 강함. iFixit은 삼성에 실질적인 가치를 제공하지 않는 한 불리한 위치에 있음.
     * iFixit을 통한 삼성 폰 수리 경험
          + 한 사용자는 iFixit을 통해 삼성 폰 화면을 $340에 교체했으며, 가격이 비싸게 느껴졌지만 가장 덜 고통스러운 옵션이었음. 삼성에 보내서 $200에 수리할 수도 있었지만, 유연성이 부족했음.
     * 삼성 모니터 품질 문제
          + 한 사용자는 삼성 모니터의 품질 문제를 경험했으며, 두 번째 모니터도 같은 문제를 겪어 결국 환불받음. 삼성 지원팀과의 문제 해결보다는 지역 매장에서의 환불이 더 나았음.
"
"https://news.hada.io/topic?id=15001","Spot - Go 언어용, React와 비슷한 데스크탑 GUI 툴킷 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Spot - Go 언어용, React와 비슷한 데스크탑 GUI 툴킷

     * 심플한 크로스플랫폼 Reactive GUI 툴킷
     * 간단함: 프로젝트에 간단히 추가하고 바로 UI를 구축할 수 있음. 추가 도구나 코드 생성 단계가 필요 없음. Go 코드를 작성하면 자체 포함된 바이너리로 네이티브 GUI 애플리케이션 생성 가능
     * 크로스 플랫폼: 가능한 경우 네이티브 위젯을 사용하며, 컴파일 시 실행 중인 플랫폼에 가장 적합한 백엔드를 자동으로 선택함. 현재 FLTK 기반과 Cocoa 기반의 두 가지 백엔드 구현이 제공됨
     * 반응형: 애플리케이션 상태가 변경될 때 UI를 자동으로 업데이트함. 부작용이 없는 렌더링 함수를 제공하고 UseState 훅을 사용하여 애플리케이션 상태를 관리
     * 광범위한 위젯 지원: Spot은 버튼, 레이블, 텍스트 입력, 슬라이더, 드롭다운 등 다양한 UI 컨트롤을 기본적으로 제공

자주 묻는 질문 (FAQs)

  ""반응형""이란 무엇을 의미하는가?

     * Spot에서 _반응형_이란 애플리케이션 상태가 변경될 때 UI가 자동으로 업데이트됨을 의미함. 이는 상태 변경 시 불변 컴포넌트 트리를 다시 빌드하여 이전 상태와 비교해 어떤 UI 컨트롤이 업데이트되어야 하는지 결정함으로써 이루어짐.

  Spot이 사용하는 ""네이티브 위젯""이란 무엇인가?

     * 현재 Spot은 macOS에서 Cocoa 백엔드를 사용하고, 다른 모든 플랫폼에서는 FLTK 기반 백엔드를 사용함. 선택적으로 Mac에서도 FLTK를 사용할 수 있음. 향후 Windows에 대한 더 나은 지원이 계획되어 있음.

  나만의 훅을 구현할 수 있는가?

     * 예, React와 마찬가지로 나만의 훅을 구현할 수 있음. *spot.RenderContext를 첫 번째 인수로 받는 함수를 만들고 이를 통해 Spot 라이프사이클에 ""훅""을 걸 수 있음.

  커스텀 컴포넌트를 작성하는 방법은?

     * Spot에서 UI를 컴포넌트로 분리하는 몇 가지 방법이 있음. 주요 방법은 spot.Component 인터페이스를 구현하는 구조체를 만드는 것임. 이 인터페이스는 Render(ctx *spot.RenderContext) spot.Component라는 단일 메서드를 가지고 있음.

  제공된 것과 다른 위젯 라이브러리를 사용할 수 있는가?

     * 예, 가능함. spot.Component 인터페이스를 구현하고 네이티브 위젯을 관리하는 구조체를 만들면 됨.

  Cocoa 또는 FLTK 이외의 백엔드를 사용할 수 있는가?

     * 현재로서는 이 두 백엔드만 지원됨. 다른 백엔드를 추가하고 싶다면 PR을 제출할 수 있음.

  spot/ui와 spot의 차이점은?

     * spot은 반응형 모델과 렌더링 기능을 제공하는 핵심 패키지임. 백엔드에 구애받지 않으며 spot.Control 인터페이스를 구현하는 모든 컨트롤 세트와 함께 사용할 수 있음.
     * spot/ui는 spot과 함께 사용할 수 있는 사전 빌드된 크로스 플랫폼 GUI 컨트롤 세트를 제공함.

  ""컴포넌트""와 ""컨트롤""의 차이점은?

     * Spot에서 _컴포넌트_는 비즈니스 로직과 상태를 포함하는 애플리케이션의 논리적 단위임. 모든 컴포넌트는 다른 컴포넌트로 구성되며 궁극적으로 하나 이상의 ""컨트롤""로 렌더링됨.
     * _컨트롤_은 UI 트리에 마운트되고 화면에 시각적 요소를 나타내는 특수한 종류의 컴포넌트임.

  Spot에서 ""make"", ""render"", ""build"", ""mount"", ""update"" 용어의 의미는?

     * Make: 새로운 컴포넌트 인스턴스를 생성하는 과정. spot.Component 인터페이스를 구현하는 구조체의 인스턴스를 참조하거나 렌더 함수로 spot.Make를 호출하여 수행됨.
     * Render: 컴포넌트의 상태를 빌딩 블록에 적용하여 다른 컴포넌트 인스턴스를 반환하는 과정. 컴포넌트 인스턴스에서 Render 메서드를 호출하여 수행됨.
     * Build: 컴포넌트 인스턴스에서 새로운 UI 트리를 생성하는 과정. 컴포넌트를 재귀적으로 렌더링하여 컨트롤 트리를 생성함.
     * Mount: (가상) 컨트롤 트리에서 실제 UI 컨트롤을 생성하는 과정. 트리 노드에서 Mount를 호출하거나 컴포넌트 인스턴스 또는 렌더 함수로 spot.Mount를 호출하여 수행됨.
     * Update: (마운트된) 컨트롤 트리를 업데이트하는 과정. 트리 노드에서 Update를 호출하여 수행됨.

현재 Spot이 지원하지 않는 기능

     * 자동 레이아웃
     * 다중 창
     * 모달 대화상자
     * 크기 조정 가능한 창
     * 메뉴 바
     * 커스텀 위젯
     * 네이티브 위젯 접근
     * 드래그 앤 드롭
     * 국제화

  지원되는 UI 컨트롤 목록

     * Button: 액션을 시작하는 간단한 버튼 (Fl_Button, NSButton)
     * Checkbox: 상호 배타적인 두 가지 옵션 중 하나를 선택하는 컨트롤 (Fl_Check_Button, NSButton (NSButtonTypeSwitch))
     * ComboBox: 텍스트 입력이 가능한 드롭다운 메뉴 (ComboBox, NSComboBox)
     * Dial: 원형 상태 컨트롤 (Fl_Dial, NSProgressIndicator (with NSCircular style))
     * Dropdown: 여러 옵션 중 하나를 선택하는 드롭다운 메뉴 (Fl_Choice, NSComboBox)
     * Image: 이미지 컨트롤 (Image, NSImageView)
     * Label: 간단한, 편집 불가능한 텍스트 레이블 (Fl_Box, NSTextField)
     * ListBox: 스크롤 가능한 컨트롤로, 주어진 목록에서 하나 또는 여러 항목을 선택할 수 있음 (Fl_Select_Browser/Fl_Multi_Browser, NSTableView)
     * ProgressBar: 장기 실행 작업의 진행 상황을 시각화하는 진행 막대 컨트롤 (Fl_Progress, NSProgressIndicator)
     * Slider: 수평 슬라이더 입력 컨트롤 (Fl_Slider, NSSlider)
     * Spinner: 위/아래 버튼이 있는 숫자 입력 컨트롤 (Fl_Spinner, NSTextField+NSStepper)
     * TextField: 단일 라인 텍스트 입력 컨트롤 (Fl_Input, NSTextField)
     * TextView/TextEditor: 다중 라인 텍스트 내용을 보기/편집할 수 있는 범용 텍스트 상자 (Text, NSTextView)
     * Window: 화면에 (최상위) 창을 나타내는 컨트롤 (Fl_Window, NSWindow)

GN⁺의 의견

     * Spot은 Go 언어로 크로스 플랫폼 GUI 애플리케이션을 쉽게 개발할 수 있게 해줌. 특히 반응형 모델을 도입하여 개발자가 UI 업데이트에 신경 쓰지 않고 애플리케이션 로직에 집중할 수 있게 함.
     * 현재 지원되지 않는 기능들이 많아, 복잡한 애플리케이션을 개발할 때는 제한이 있을 수 있음. 특히 자동 레이아웃이나 다중 창 같은 기능이 필요하다면 다른 툴킷을 고려해야 함.
     * Spot의 단순성과 크로스 플랫폼 지원은 작은 프로젝트나 프로토타입 개발에 매우 유용할 수 있음. 하지만 대규모 애플리케이션에서는 기능의 한계가 있을 수 있음.
     * Spot의 커뮤니티와 문서화가 더 발전하면, 더 많은 개발자들이 쉽게 접근하고 사용할 수 있을 것임. 특히 커스텀 훅과 컴포넌트 작성 방법에 대한 예제가 더 많아지면 좋을 것임.
     * Spot의 백엔드 확장 가능성은 흥미로움. 특히 Windows에 대한 더 나은 지원이 추가되면 더 많은 개발자들이 사용할 수 있을 것임.

  Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 지원되는 플랫폼을 README에 명시하면 좋겠음. Flutter 문서처럼 작성하는 것을 제안함.
     * Go를 사용해 내부 개발 도구를 만들고자 하는데, 현재 Wails를 사용 중이며 만족하고 있음. 이 프로젝트도 흥미로워 보이며 한번 살펴볼 가치가 있음.
     * Go가 크로스 플랫폼 UI 개발에 좋은 경험을 제공할 수 있다고 생각함.
          + 빌드 복잡성을 관리하는 것이 크로스 플랫폼 개발의 큰 어려움인데, Go는 이를 거의 제거함.
          + 네이티브 컨트롤의 크기가 플랫폼마다 다를 때 크로스 플랫폼 레이아웃을 어떻게 해결할지 궁금함.
     * 가상 컨트롤 트리 접근 방식의 장점이 무엇인지 궁금함.
          + 사용자에게 표시되는 컨트롤을 직접 업데이트하는 것과 비교했을 때 어떤 이점이 있는지 알고 싶음.
     * 몇 년 전부터 이런 것을 찾고 있었음.
          + Windows 지원이 필요해서 C++로 전환하여 wxWidgets를 사용함.
     * 노력은 칭찬하지만, Windows 지원이 없는 크로스 플랫폼은 아쉬움.
     * 3주 전에 이 프로젝트를 알았더라면 좋았을 것임.
          + Go로 포팅된 React나 React-like 프레임워크가 훌륭한 개발 경험을 제공할 것이라고 생각함.
     * Fltk는 Windows를 지원함.
          + 다른 솔루션을 사용하기 때문에 Windows를 아직 지원하지 않는 것인지 궁금함.
     * 이 코드가 GOMAXPROCS를 최소 2로 설정해야 함을 의미하는지 궁금함.
     * 크로스 플랫폼 빌드가 어떻게 이루어지는지 궁금함.
          + 각 플랫폼별 패키지 관리, 컨테이너, 서명 문제를 해결하지 않고도 MacOS .app과 Windows exe를 생성하는 명령이 있으면 좋겠음.
"
"https://news.hada.io/topic?id=15017","Perplexica - AI 기반의 검색엔진. Perplexity AI의 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Perplexica - AI 기반의 검색엔진. Perplexity AI의 오픈소스 대체제

     * 인터넷 깊숙이 들어가 답을 찾아주는 AI 기반 검색엔진
     * Perplexity AI에서 영감을 받아, 웹을 검색할 뿐만 아니라 사용자의 질문을 이해함
     * 유사성 검색 및 임베딩을 사용하여 결과를 구체화하고 출처가 인용된 명확한 답변을 제공
     * SearxNG를 사용하여 완전한 오픈소스를 유지

기능

     * 로컬 LLM들 사용 : Ollama를 이용하여 Llama3 나 Mixtral 등을 이용
     * 2개의 메인 모드
          + Copilot Mode: 더 관련성 높은 인터넷 소스를 찾기 위해 다양한 쿼리를 생성하여 검색을 향상. 상위 검색 결과를 방문하여 페이지에서 직접 사용자의 검색어와 관련된 소스를 찾음
          + Normal Mode: 쿼리를 처리하고 웹 검색을 수행
     * Focus 모드 : 특정 유형의 질문에 더 잘 답할 수 있는 특수 모드. 현재 6가지
          + All Mode: 전체 웹을 검색하여 최상의 결과 찾기
          + Writing Assistant Mode: 웹 검색이 필요 없는 글쓰기 작업에 유용
          + Academic Search Mode: 학술 연구에 적합한 기사와 논문을 찾음
          + YouTube Search Mode: 검색 쿼리를 기반으로 YouTube 동영상을 찾음
          + Wolfram Alpha Search Mode: Wolfram Alpha를 사용하여 계산 또는 데이터 분석이 필요한 쿼리에 대한 답변을 제공
          + Reddit Search Mode: Reddit에서 검색어와 관련된 토론 및 의견을 검색
     * 최신 정보 :
          + 일부 검색 도구는 크롤링 봇의 데이터를 사용하여 임베딩으로 변환하고 색인에 저장하기 때문에 오래된 정보를 제공할 수 있음
          + 이와 달리 Perplexica는 메타검색 엔진인 SearxNG를 사용하여 결과를 가져와 순위를 재조정하고 가장 관련성이 높은 소스를 가져와서 매일 데이터를 업데이트하는 번거로움 없이 항상 최신 정보를 얻을 수 있음

   설치방법 중에 Docker 를 사용하라는데
   리눅스 컨테이너..인가요..?
   문외한이라 잘 모르겠어요

   요즘은 거의 많은 환경이 Docker 형태로 제공되는 것이 많아서.

   이참에 한 번 익혀보시는 것도 좋다고 생각됩니다.

   SearXNG, 무료 인터넷 메타검색 엔진
"
"https://news.hada.io/topic?id=14927","pg_timeseries: PostgreSQL용 오픈소스 시계열 확장 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               pg_timeseries: PostgreSQL용 오픈소스 시계열 확장 기능

시계열 데이터란 무엇인가?

     * 시계열 데이터는 각 데이터 포인트에 타임스탬프가 붙어 있는 데이터의 모음임
     * 예시: 주식 가격, 기기 및 센서에서 반환된 온도 및 가용성 데이터, 웹사이트의 트래픽 데이터
     * 시계열 작업은 일반적으로 시간 필터링 쿼리와 데이터 요약을 위한 집계 쿼리를 포함함

PostgreSQL을 사용한 시계열 작업

     * PostgreSQL은 확장성과 생태계 도구 덕분에 모든 데이터 작업을 처리할 수 있음
     * Tembo는 사용자가 PostgreSQL 생태계를 쉽게 사용할 수 있도록 목표를 설정함
     * 고객의 가장 큰 요구는 시계열 데이터를 저장하고 처리할 수 있는 스택이었음

pg_timeseries의 구성 요소

     * 시계열 데이터를 효율적으로 저장하고 쿼리하기 위한 요구 사항:
          + 시계열 데이터 쉽게 관리
          + 높은 처리량 처리
          + 범위 쿼리 빠르게 응답
          + 대량 데이터 효율적으로 저장
          + 복잡한 분석 함수 실행
     * PostgreSQL의 기본 기능:
          + 네이티브 파티셔닝, 다양한 인덱스, 물리화된 뷰, 윈도우/분석 함수
     * 추가 확장 기능:
          + pg_partman: 파티션 관리
          + pg_cron: 작업 스케줄링
          + columnar: 압축
          + pg_ivm: 증분 물리화된 뷰
          + pg_tier: 오래된 파티션의 장기 오프로드

pg_timeseries: PostgreSQL에서 시계열 데이터를 관리하는 가장 간단한 방법

     * pg_timeseries는 여러 확장의 기능을 결합하여 통합된 인터페이스 제공
     * 시작하기 위해서는 시간과 관련된 열로 파티셔닝된 테이블이 필요함
CREATE TABLE measurements (
  metric_name text,
  metric_value numeric,
  metric_time timestamptz NOT NULL
) PARTITION BY RANGE (metric_time);

SELECT enable_ts_table('measurements');

     * 중요한 정보 제공을 위한 다양한 뷰 포함:
SELECT table_id, table_size_bytes FROM ts_table_info;
SELECT * FROM ts_part_info;

     * 파티션의 압축 및 삭제 정책 설정 가능:
SELECT set_ts_compression_policy('measurements', '90 days');
SELECT set_ts_retention_policy('measurements', '365 days');

     * 추가 함수 제공:
SELECT
  locf(avg(metric_value)) OVER (ORDER BY metric_time) avg_val,
  last(metric_name, metric_value) highest,
  metric_time
FROM date_bin_table(NULL::measurements, '1 hour', '[2024-05-09,2024-06-07]');

우리는 이제 시작 단계임

     * PostgreSQL용 시계열 확장을 구축하기 위해 많은 구성 요소가 필요함
     * 커뮤니티와 함께 공개적으로 구축할 계획
     * 현재 로드맵:
          + 오래된 파티션을 S3와 같은 콜드 스토리지로 오프로드
          + 효율적인 분석을 위한 근사 함수
          + 증분 물리화된 뷰
          + 오래된 파티션의 롤업 및 롤오프
          + 추가 분석 도우미 함수
     * GitHub README에 전체 로드맵이 있으며 사용자 수요에 따라 기능 우선순위 결정

GN⁺의 의견

     * 시계열 데이터의 중요성: IoT, 금융, 웹 분석 등 다양한 분야에서 시계열 데이터의 중요성이 증가하고 있음. pg_timeseries는 이러한 데이터를 효율적으로 관리할 수 있는 도구를 제공함.
     * PostgreSQL의 확장성: PostgreSQL의 확장 기능을 활용하여 다양한 데이터 작업을 처리할 수 있음. pg_timeseries는 이러한 확장 기능을 통합하여 사용자의 편의성을 높임.
     * 커뮤니티와의 협력: 오픈소스로 개발되어 커뮤니티의 피드백을 반영할 수 있음. 이는 기능 개선과 버그 수정에 큰 도움이 됨.
     * 경쟁 제품: TimescaleDB와 같은 다른 시계열 데이터베이스와 비교했을 때, 라이선스 제한 없이 사용할 수 있는 장점이 있음. 그러나 성능과 기능 면에서 비교 검토가 필요함.
     * 도입 고려 사항: pg_timeseries를 도입할 때는 기존 데이터베이스와의 호환성, 성능, 유지보수 비용 등을 고려해야 함. 또한, 시계열 데이터의 특성상 데이터 양이 급증할 수 있으므로 적절한 스토리지 관리가 필요함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Incremental Materialized Views
          + Incremental materialized views가 핵심 기능으로, 데이터가 들어올 때마다 성능 저하 없이 최신 상태를 유지할 수 있음.
          + pg_ivm 같은 구현을 사용할지, 자체적으로 구현할지 궁금함.
          + 언젠가 PostgreSQL 코어에 ivm이 포함되기를 희망함.
     * TimescaleDB와의 비교
          + TimescaleDB의 라이선스 제한으로 인해 압축, 증분 물질화 뷰, 무한 저장소 등의 기능을 사용할 수 없음.
          + 이러한 기능이 없으면 고객의 시계열 데이터 요구를 충족할 수 없다고 판단하여 PostgreSQL 라이선스 확장을 직접 구축함.
          + 무료 버전의 TimescaleDB를 사용해 5억 개의 관측 데이터베이스를 샤딩한 경험이 있음. 큰 문제 없이 작동했음.
          + 벤치마크와 비교 결과가 있었으면 좋겠음. 계속 지켜볼 예정임.
     * Append-Only 테이블
          + PostgreSQL과 다른 데이터베이스에 네이티브 append-only 테이블이 추가될 때가 됐음.
          + 이는 시계열 데이터베이스는 아니지만 표준화와 관련된 논리/접근에 도움이 될 것임.
     * 시계열 데이터베이스의 진화
          + 시계열 데이터베이스가 다음과 같이 진화하고 있음:
               o 컬럼형 저장소 및 Parquet와 Arrow 같은 오픈 포맷으로의 수렴: InfluxDB 3.0, QuestDB
               o PostgreSQL 위에 시계열 기능 추가: Timescale, pg_timeseries
               o Prometheus 생태계를 중심으로 한 관측 플랫폼: Grafana, Victoria Metrics, Chronosphere
     * 컬럼형 저장소의 필요성
          + 대부분의 시계열 쿼리는 집계 쿼리임.
          + 이를 위해 최상급 컬럼형 저장소를 활용하거나 구축하는 것이 좋음.
          + ClickHouse 같은 제품이 PostgreSQL에 왜 없는지 의문임.
     * 유용한 링크
          + 트렁크와 pgt.dev에 대해 알게 되어 감사함.
     * 로드 밸런서 로그 엔트리
          + 로드 밸런서 로그 엔트리(상태, 응답 본문, 헤더 등)를 처리할 때 이 확장이 유용할지 궁금함.
          + 컬럼형 데이터베이스 저장소가 일반적인 행 기반 데이터베이스보다 더 효율적일 것 같음.
          + 로드 밸런서 로그 엔트리는 분석 이벤트와 유사하게 간주될 수 있음.
     * 오픈 소스 혁신
          + PostgreSQL은 항상 오픈 소스였고, 매우 자유로운 오픈 소스 라이브러리를 사용해 왔음.
          + 복제부터 시계열 지원까지 다양한 독점 및 소스 사용 가능 확장이 있었음.
          + 이제 이러한 독점 확장이 적절한 오픈 소스에 의해 방해받고 있음.
     * PostgreSQL 라이선스
          + PostgreSQL 라이선스를 사용하는 것은 좋은 결정임.
     * 사이트 디자인 및 앱 UI
          + 사이트 디자인이 잘 되어 있고 읽기 쉬움.
          + 앱 UI도 데모 사진에서 훌륭해 보임. 시도해 볼 의향이 있음.
"
"https://news.hada.io/topic?id=15036","Git 치트 시트it 치트 시트 [PDF]
"
"https://news.hada.io/topic?id=15025","WASM으로 엣지에서 PHP 엄청 빠르게 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      WASM으로 엣지에서 PHP 엄청 빠르게 실행하기

     * PHP는 현재 인터넷 상의 웹사이트 중 약 75%를 차지하고 있음
     * PHP는 프로그래밍 언어 중 ""섹시 보이""는 아니지만, 인터넷 탄생 이후 중요한 역할을 해왔음
     * 이제 PHP를 Wasmer와 Wasmer Edge에서 완전히 실행할 수 있게 됨 (오픈 베타)

WebAssembly에서 PHP 실행의 중요성

     * WebAssembly의 특성 덕분에 프로그램이 접근할 수 있는 리소스를 안전하게 제한할 수 있음
     * OS나 하드웨어 가상화의 오버헤드 없이 PHP를 안전하게 실행할 수 있음
     * Wasmer 팀은 PHP가 WebAssembly에서 완벽하고 가능한 한 빠르게 실행되도록 수많은 시간을 투자했음
     * WebAssembly 내에서 opcode 캐싱을 활성화하여 최대 3배 더 빠른 속도를 얻었음

PHP 앱에 serverless-like 확장성 제공

     * 모든 PHP 앱에 serverless-like 확장성을 제공하면 엄청난 가치를 열어줄 수 있음
     * PHP 앱을 Edge에서 실행하고 클라우드 제공업체가 부과하는 가격의 일부만 지불할 수 있음
     * Wasmer로 모든 PHP 애플리케이션을 실행할 수 있으며, 앱이 샌드박싱을 깨고 해서는 안 되는 유해한 일을 할 걱정은 할 필요가 없음

가장 인기 있는 PHP 프레임워크를 Wasmer와 Wasmer Edge에서 실행 가능

     * WordPress
     * Symfony
     * Laravel
     * 모든 PHP 템플릿: https://wasmer.io/templates?language=php
     * 참고: 사용자 정의 파일 시스템 볼륨에 대한 Wasmer Edge 지원은 진행 중임. SQLite를 사용하는 배포된 앱(WordPress나 Symfony 등)은 현재 데이터베이스 변경 사항을 메모리에만 저장하고 아직 영구적으로 저장하지는 않음

WebAssembly와 PHP에서 최대한 활용

     * opcode 캐싱을 활성화하여 WordPress를 수정 없이 3배 더 빠른 속도로 실행할 수 있음 (600ms에서 200ms로 단축)

직접 시도해 보기

     * 일반적으로 php -S localhost:8000 .을 실행한다면, 이제 Wasmer를 통해 완전히 샌드박스로 실행할 수 있음:
wasmer run php/php --mapdir:/app:. -- /app -S localhost:8000

     * WordPress도 쉽게 로컬에서 실행 가능. WordPress 저장소 클론 후 루트에서 wasmer run . --net 실행 (Wasmer 4.3.1 필요)
     * 완전히 샌드박스화된 상태로 서버에서 실행되는 완전 기능을 갖춘 PHP CLI가 제공됨
     * 앱이 /etc/passwd 같은 것에 접근하는 것에 대해 더 이상 걱정할 필요 없음

기술적 위업

     * Wasmer에서 WebAssembly로 PHP가 완벽하게 작동하도록 하는 것은 쉬운 일이 아니었음
     * 프로세스를 따라가며 많은 문제를 해결함:
          + PHP 내에서 try/catch 문을 사용하는 데 필요한 longjmp/setjmp 구현에서 stack이 덮어 쓰여지고 제대로 복원되지 않는 모호한 버그 발견
          + 나가는 HTTP 호출 속도를 10배 느리게 만드는 버그 발견 및 수정
          + 기본적으로 PHP opcache를 활성화하여 최대 3배 더 빠른 PHP 시간 확보
          + 파일 시스템 가상화 계층 및 네트워킹(IPv6)에 대한 많은 작은 수정 사항
     * 이전 WordPress를 Wasmer로 실행하는 블로그 게시물을 따라갔다면, WordPress에서 동작을 변경하고 차단 edge case를 트리거하지 않기 위해 수많은 코드 수정(일명 해킹)을 해야 했음을 알 수 있음
     * 최신 Wasmer 릴리스에서는 WordPress, Laravel, Symfony가 어떠한 코드 수정 없이도 Wasmer에서 실행됨

속도

     * 기본 속도로 PHP를 실행하는 것만으로는 충분하지 않았고, WebAssembly에서 가능한 한 빠르게 실행하기를 원했음
     * PHP에는 실행 속도를 훨씬 더 빠르게 해주는 Zend Opcache 모듈이 있음
     * Opcode 캐싱 모듈은 PHP 소스가 변환되는 바이트코드를 최적화하고 캐싱하여 이미 처리된 파일의 AST 구문 분석에 시간을 절약함
     * Opcode 캐싱은 앱이 처리할 수 있는 요청 수를 3배까지 가속화할 수 있으므로 WebAssembly에서 활성화하는 것이 명백해 보였음
     * 그러나 opcode 캐싱(및 Zend 모듈 로딩)은 기본적으로 비활성화되어 있었음 (Wasm에서 사용할 수 없는 dlopen, dlsym 등이 필요하기 때문)
     * 독특한 퀘스트에 착수함: PHP에서 opcode 캐싱 활성화
          + 연구 끝에 정적으로 연결하는 새로운 방법을 찾았고, 과정에서 수많은 것들을 수정해야 했지만 결국 실행에 성공함
     * Wasm에서 Opcache가 없는 WordPress 타이밍: ~620ms
     * Wasm에서 Opcache를 활성화한 WordPress 타이밍: ~205ms
     * Opcache를 활성화하는 것만으로도 3배의 속도 향상이 있음!
     * PHP를 네이티브 속도에 가깝게 만들기 위한 더 많은 개선점이 있음을 깨달음 (기대해 주세요!)

더 많은 기회 열림

     * WordPress playground와 같이 현재 Emscripten에 의존하여 브라우저에서 PHP를 실행하는 프로젝트에 더 많은 기회를 열어줌
          + 이런 프로젝트들이 브라우저와 Edge 모두에서 실행할 수 있는 패키지로 만들어 질수 있음
     * cold-start에 대한 완전히 혁신적인 접근 방식을 준비 중 (Cloudflare & Fly.io 우리가 당신들 지켜보고 있어요!)
     * Edge 시장에 흥미진진한 시기가 다가오고 있음

   개인적으로 PHP가 아직도 왕성하게 활용되고 있는게 뭔가 대단하기도 하고 신기합니다. ㅎㅎ 악명 높았던 시절을 지나서 이제 많이 바뀌었다고 하는데, PHP 다시 한 번 써볼까 싶은 생각도 듭니다.

   해커뉴스도 긱뉴스도 PHP라면 싫어하는 분들이 많지만 ㅎㅎ
   웹 이라는 기술이 다른 것으로 아예 바뀌지 않는한 계속 이용되지 않을까 싶어요.
   ""언어"" 라는 것에 초점을 맞추지 말고 ""웹""에 어울리는 기술의 하나로 봐야 하는게 아닌가 생각합니다.
"
"https://news.hada.io/topic?id=15008","Dataherald - 자연어-to-SQL 엔진, 전체 오픈소스로 전환 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Dataherald - 자연어-to-SQL 엔진, 전체 오픈소스로 전환

     * 구조화된 데이터에 대해서 자연어로 쿼리 가능한 NL-to-SQL 엔진
     * 전체 코드베이스를 오픈소스로 전환 : 코어엔진, 클라이언트(인증/RBAC) 등 포함
     * 이제 누구나 자신의 제품 내부에 text-To-SQL 솔루션을 구축 가능
     * Dataherald의 Core NL-to-SQL 엔진은 LLM 기반 에이전트로, CoT(Chain of Thought) 추론과 다양한 도구를 사용해 주어진 사용자 프롬프트에서 정확도 높은 SQL을 생성
     * 총 4개의 서비스가 포함됨
          + 엔진 : LLM 에이전크, 벡터 스토어 및 DB 커넥터
          + 관리자 콘솔 : 엔진 설정 및 Observability 관리용 NextJS 프론트엔드
          + 엔터프라이즈 백엔드 : 코어엔진을 감싸서 인증/캐싱/API 등을 추가
          + 슬랙봇 : Dataherald 를 슬랙 워크플로우에 추가

   Dataherald - 자연어-to-SQL 엔진
   8 개월전에 공유했었는데, 이제 전체를 오픈소스로 공개했네요.

  Hacker News 의견

     * 이 도구가 정말 멋져 보임. 다른 도구들은 간단한 쿼리에는 잘 작동하지만 복잡한 스키마와 조인에는 어려움이 있음. DataHerald가 이 문제를 해결했는지 궁금함.
     * 작년에 텍스트-투-SQL 제품을 오픈 소스로 공개했음. 이런 비즈니스를 구축하는 것은 매우 어려움. 오픈 소스와 Snowflake/PowerBI와 같은 무료 배포 도구와 연계하는 것이 더 합리적임.
     * 전체 제품을 오픈 소스로 공개한 이유가 궁금함. 오픈 코어 모델로 전환 중인지 궁금함. 이유를 공유해주면 감사하겠음.
     * 역사적인 기여에 감사함. 많은 기업들이 현재 데이터를 ""대화""하고 있음. 많은 팀들이 비슷한 작업을 하고 있을 것임.
     * 기능이 풍부한 AI 분석 도우미 중 하나임. 오픈 소스로 공개한 것에 찬사를 보냄. Metabase, Airbyte, dbt와 같은 성공적인 예시들이 있음.
     * 이 도구의 대상이 누구인지 궁금함. 웹사이트는 분석가를 거치지 않고 데이터 질문에 답할 수 있다고 주장하지만, 분석가는 모델과 데이터 전문가임. 데이터 웨어하우스는 다양한 문제를 가질 수 있음. LLM이 이를 일관되게 처리할 수 있는지 궁금함.
     * 이 도구가 평균적인 LLM보다 더 잘 작동하는 이유는 데이터베이스 구조를 사용해 훈련할 수 있기 때문임. 하지만 데이터베이스 구조가 자주 변경될 수 있어 재훈련이 필요할 수 있음. PR 수정 후 자동으로 재훈련이 되는지 궁금함.
     * 이 도구가 복잡한 조인을 할 수 있는지 궁금함. 웹사이트에서 예제를 찾을 수 없었음.
     * NLP+ORM 시스템을 사용하는 것이 더 나은 이유를 이해하지 못하겠음. 고정된 구문을 사용해야 하지만 100% 정확도를 얻을 수 있음.
     * NL-to-SQL을 최근에 프로토타입으로 사용해봤음. 실수나 악의적인 행위자가 데이터베이스에 영향을 미치는 것을 방지하는 방법이 문제였음. 이와 관련된 다른 측면에 대해 이야기하고 싶다면 연락해달라고 함.
"
"https://news.hada.io/topic?id=15026","Braid: HTTP 동기화 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Braid: HTTP 동기화 기술

     * Braid는 상호운용 가능한 상태 동기화를 위한 알고리듬, 애플리케이션, 도구 및 표준을 만드는 오픈 작업 그룹임.
     * 목표는 네트워크 컴퓨팅 시스템 전반에서 분산 상태를 로컬 변수처럼 쉽게 읽고 쓸 수 있도록 하는 것임.
     * 매 2주마다 오픈 미팅을 통해 애플리케이션 및 시스템 요구사항을 논의하고, 공통점을 식별하며, 공유 프로토콜에 대한 합의를 찾음.

Braid-HTTP: HTTP를 위한 동기화

     * Braid-HTTP는 HTTP를 상태 전송에서 상태 동기화 프로토콜로 일반화하는 확장임.
     * HTTP에 다음 기능을 추가함:
          + HTTP 리소스 버전 관리
          + GET 요청에 대한 구독(Subscription)
          + Range 요청에 대한 PATCH
          + OT 또는 CRDT 동작을 지정하는 Merge-Type
     * 이러한 기능을 통해 웹 리소스는 여러 클라이언트, 서버 및 프록시 간에 자동으로 동기화되고, 여러 작성자가 임의의 네트워크 지연 및 분할 하에서도 일관성을 보장하며 동시에 편집할 수 있음.
     * 웹 애플리케이션은 Braid 확장을 사용하여 협업 편집, 서버리스 오프라인 모드 및 P2P 네트워킹을 제공할 수 있음.
     * 표준 라이브러리를 사용하면 기존 웹 애플리케이션 및 브라우저에 이러한 기능을 쉽게 추가할 수 있음.
     * 자세한 내용은 IETF 인터넷 초안에서 확인할 수 있음.

Braid 프로토콜 사용하기

     * Braid는 현재의 웹과 호환되며, 현재의 브라우저에서 작동하고, 기존 웹 애플리케이션에 쉽게 추가할 수 있음.
     * 다양한 언어에 대한 라이브러리가 있음:
          + Javascript: braid-http, braid-protocol
          + Haskell: wai-braid
          + Lua: Paul Kulchenko가 개발 중
     * Chrome에서는 Braid-Chrome 확장을 사용하여 Braid 기능을 사용할 수 있음.

Braid 동기화 모델

     * 프로토콜 구현:
          + braid-http
          + braid-protocol
          + wai-braid
     * 브라우저 확장:
          + Braid-Chrome
     * 상태 추상화 라이브러리:
          + Braid-Text (텍스트용)
          + Redwood
          + Statebus
          + Statecraft
     * 알고리듬:
          + Diamond Types: 세계에서 가장 빠른 텍스트 CRDT
          + Antimatter: 세계 최초의 히스토리 프루닝 텍스트 CRDT
          + Sync9: 텍스트 및 JSON을 위한 CRDT+OT
          + SyncX: Sync9
          + Shelf: 매우 간단하고 유용한 JSON CRDT
          + Diffsync: 재귀적 3방향 병합을 사용하는 CRDT+OT
          + Tiny-Merge: 실용적인 CRDT의 잘 설계된 라이브러리
          + CR-SQLite: SQLite를 매우 유용한 CRDT로 변환
          + Portals: 모든 OT 또는 CRDT에 대한 복사, 이동 및 랩 작업
          + Simpleton: 모든 CRDT에 대한 매우 간단하고 빠른 경량 클라이언트
     * 호환성:
          + Automerge 호환성
          + ShareDB 및 Sync9 호환성

  애플리케이션

     * 이 웹사이트 자체
     * Peery View: Braid 기반 P2P 평판 시스템
     * Quiet: torDT를 사용한 P2P 채팅
     * Wiki

  함께 일하기

     * 오픈 그룹임.
     * 매 2주마다 Zoom 링크에서 일반 회의를 가짐.
     * 새로운 진행 상황을 데모하고, 표준을 논의하며, 분산 웹 구축 접근 방식을 논의함.
     * 특별 주제에 대한 중간 회의도 주기적으로 일정에 추가됨.

  표준 만드는 방법

     * IETF에서 공개적으로 작업함.
     * Braid 및 HTTP 메일링 리스트에서 사양을 논의함.
     * Github에서 Braid 사양을 편집할 수 있음.
     * 문제가 있으면 Github에 파일을 제출할 수 있음.
     * 아이디어가 있으면 사양에 작성하고 Pull Request를 발행할 수 있음.
     * 거친 합의에 도달하면 Pull Request가 수락됨.
     * 표준 논의에 대한 최신 정보를 얻으려면 메일링 리스트를 구독하고 Github를 클릭할 수 있음.
     * 도움이 필요하면 Michael Toomim에게 이메일을 보내면 도움을 받을 수 있음.

  Braid 프로토콜

     * Braid 프로토콜은 여러 동기화 알고리듬이 공통 네트워크 프로토콜을 통해 상호 운용할 수 있도록 함.
     * 오늘날의 동기화 장치들은 서로 다른 프로토콜을 사용하지만, 그들의 네트워크 메시지는 시간의 버전, 공간의 위치 및 시간의 범위에 걸친 공간의 패치를 전달함.
     * 패치 집합의 구성은 수학적 구조인 브레이드를 형성함.
     * Braid 프로토콜은 모든 동기화 장치가 시간의 변화를 표현하고 일관된 상태로 해결할 수 있는 표준 메시지 형식임.
     * 데이터 모델을 탐색할 수 있는 인터랙티브 데모:
          + 브레이드와 상호작용하기
          + 랜덤 브레이드 생성하기
     * HTTP를 통한 동기화에 관심이 있다면 프로토콜 사양을 검토하고 메일링 리스트에 의견을 제공할 수 있음.

  프로토콜 로드맵

     * 현재 Braid 사양은 HTTP를 두 가지 동기화 차원으로 확장함:
          + 레벨 0: 오늘날의 HTTP
          + 레벨 1: 푸시 업데이트가 있는 구독
          + 레벨 2: P2P 일관성 (패치, 버전, 병합)
     * 또한 다음 P2P 기능을 프로토타이핑 중이지만 아직 표준화되지 않음:
          + 레벨 3: P2P 의미론 (메서드, 검증, 확인)
          + 레벨 4: P2P 전송 (URL, 명명, 암호화, 라우팅)
     * 설명은 meeting-2에서 Mike의 발표를 참조할 수 있음.
     * 네 가지 모든 영역에서 협력을 환영함.

  Braid가 동기화 장치를 상호 운용 가능하게 함

     * Rafie Walker는 Braid 프로토콜을 사용하여 OT 시스템과 CRDT를 동기화함.
     * 웹소켓에 바벨피쉬가 있어 ShareDB의 네트워크 메시지를 Braid 메시지로 변환하고 그 반대도 가능함.
     * ShareDB와 Sync9 간의 바벨피쉬:
          + 라이브로 시도해볼 수 있음.
          + ShareDB 프로토콜에 대한 통찰력을 제공한 Seph Gentle에게 감사함.
          + 이 바벨피쉬는 대부분 완성되었지만, 두 동기화 장치가 다른 정렬 순서로 충돌을 해결하는 경우를 처리하지 않음.
          + 이를 위해 동일한 병합 유형을 구현해야 함 (프로토콜 사양 참조).
     * Automerge, CRDT 시스템을 위한 바벨피쉬 설계도 시작함.
     * 동기화 장치가 있다면 Braid 호환성 레이어를 개발하기 위해 함께 작업할 수 있음.

  왜 ""Braid""인가?

     * Braid는 비디오 게임 Braid처럼 웹에 역사적 시간 여행을 추가함.
     * 월드 와이드 웹의 각 가닥을 꼬아 웹을 더 두껍고 강력하며 견고하게 만듦.
     * 웹 표준에서 동기화 및 분산 기술에 대한 여러 관점을 함께 엮음.
     * 브레이드는 동기화 장치에 필요한 정보를 포함하는 수학적 구조이자 컴퓨터 데이터 구조임.
     * 편집을 브레이드의 패치로 표현함으로써 여러 동기화 장치가 상호 운용할 수 있게 함.

GN⁺의 의견

     * Braid 프로토콜은 다양한 동기화 알고리즘을 통합할 수 있는 강력한 도구로, 분산 시스템에서 일관성을 유지하는 데 큰 도움이 될 수 있음.
     * CRDT와 OT를 모두 지원하는 점은 협업 애플리케이션 개발자에게 매우 유용할 것임.
     * Braid-HTTP의 확장은 기존 웹 애플리케이션에 쉽게 통합할 수 있어, 개발자들이 새로운 기술을 도입하는 데 큰 장벽이 없을 것임.
     * Braid의 오픈 미팅은 커뮤니티 참여를 장려하고, 다양한 의견을 수렴하여 더 나은 표준을 만들 수 있는 기회를 제공함.
     * 다양한 언어 지원은 개발자들이 자신이 선호하는 언어로 Braid를 사용할 수 있게 하여, 더 많은 개발자들이 참여할 수 있는 환경을 조성함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 새로운 braid-text 라이브러리 출시 예정
          + 웹 앱에 협업 편집 기능을 쉽게 추가할 수 있는 라이브러리 소개.
          + Node.js 앱에 간단히 추가 가능하며, WebSocket이 필요 없음.
          + simpleton 병합 타입을 사용하여 클라이언트의 히스토리 오버헤드가 없음.
          + Braid-Chrome 확장을 통해 버전 히스토리 확인 가능.
     * URL에 버전 번호 포함 안 함
          + URL에 버전 번호가 포함되지 않고, 별도의 헤더로 전송됨.
          + 특정 버전에 링크하기 어려움.
          + 동기화가 HTTP와 밀접하게 연결되어야 하는지 의문.
     * HTTP 확장 대신 기존 표준 사용 선호
          + HTTP를 확장하기보다는 기존 표준을 사용하는 것이 더 나을 수 있음.
          + partial PUT 대신 PATCH 사용이 더 적절할 수 있음.
     * 분산 인프라에 유리
          + Braid가 클라우드 없이도 기기 간 상태 동기화 비용을 낮출 수 있음.
          + 탈중앙화된 인프라에 유리함.
     * 일반적인 이벤트 스트리밍 목표 가능성
          + 개별 리소스 변경 구독 가능.
          + 더 일반적인 이벤트 스트리밍 목표 가능성에 대한 질문.
     * WebDAV와의 비교
          + WebDAV와 유사하지만 더 강력한 기능 제공.
          + HTTP 위에 계층을 쌓는 것이 더 나을 수 있음.
     * 사용 용도에 대한 질문
          + 이 라이브러리를 어디에 사용할 수 있는지에 대한 질문.
          + 사용 사례가 명확하지 않음.
     * 관련 링크
          + Braid: Synchronization for HTTP 관련 링크 제공.
     * 실시간 전용 여부
          + 실시간 전용인지, 히스토리 정리 기능이 있는지에 대한 질문.
          + 클라이언트가 드물게 연결되는 경우에 대한 우려.
     * HTTP의 특성
          + HTTP는 요청-응답 프로토콜로 상태 전송을 다루지 않음.
          + Braid-HTTP가 상태 동기화 프로토콜로 확장된다는 설명이 이상함.
"
"https://news.hada.io/topic?id=14901","2013년에 존재했던 웹페이지 중 38%가 10년 후 더 이상 접근 불가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                2013년에 존재했던 웹페이지 중 38%가 10년 후 더 이상 접근 불가

     * 인터넷의 방대함과 콘텐츠의 소멸
          + 수백억 개의 웹페이지가 존재하는 인터넷은 현대 생활의 방대한 저장소임.
          + 그러나 사용자가 의존하는 콘텐츠는 때때로 사라짐.
          + Pew Research Center의 새로운 분석에 따르면, 온라인 콘텐츠는 매우 일시적임을 보여줌.
               o 2013년에서 2023년 사이에 존재했던 모든 웹페이지의 4분의 1이 2023년 10월 기준으로 더 이상 접근 불가 상태임.
               o 이는 대부분 특정 웹페이지가 삭제되거나 제거되었기 때문임.
     * 디지털 부패의 발생
          + 정부 및 뉴스 웹사이트, 그리고 Wikipedia 페이지의 ""참고 문헌"" 섹션을 조사함.
               o 뉴스 웹페이지의 23%가 최소 하나 이상의 깨진 링크를 포함함.
               o 정부 웹사이트의 21%가 최소 하나 이상의 깨진 링크를 포함함.
               o Wikipedia 페이지의 54%가 더 이상 존재하지 않는 페이지로 연결되는 링크를 포함함.
     * 소셜 미디어에서의 디지털 부패
          + 2023년 봄 동안 소셜 미디어 플랫폼 X(당시 Twitter)에서 트윗의 실시간 샘플을 수집하고 3개월 동안 추적함.
               o 트윗의 약 5분의 1이 게시 몇 달 후에는 더 이상 공개적으로 보이지 않음.
               o 이 경우의 60%는 원래 트윗을 게시한 계정이 비공개, 정지되거나 완전히 삭제되었음.
               o 나머지 40%는 계정이 존재하지만 개별 트윗이 삭제됨.
     * 비공개 링크와 웹페이지 정의
          + 인터넷에서 존재했지만 현재 접근 불가한 페이지의 정의에는 여러 가지가 있음.
               o 페이지가 더 이상 호스트 서버에 존재하지 않거나, 호스트 서버 자체가 더 이상 존재하지 않음.
               o 페이지 주소는 존재하지만 콘텐츠가 변경되었음.
               o 페이지가 존재하지만 특정 사용자(예: 시각 장애인)가 읽기 어려움.
          + 이 보고서는 첫 번째 정의에 집중함: 더 이상 존재하지 않는 페이지.
     * 지난 10년간의 웹페이지
          + Common Crawl 아카이브에서 무작위로 약 100만 개의 웹페이지 샘플을 수집함.
               o 2013년부터 2023년까지 수집된 모든 페이지의 25%가 2023년 10월 기준으로 더 이상 접근 불가 상태임.
               o 2013년에 수집된 페이지의 38%는 2023년에 더 이상 접근 불가 상태임.
     * 정부 웹사이트의 링크
          + 2023년 3월/4월에 수집된 정부 웹사이트의 약 50만 페이지를 샘플링함.
               o 페이지의 86%는 내부 링크를 포함하며, 6%는 더 이상 접근 불가 상태임.
               o 전체적으로 조사된 정부 웹페이지의 21%가 최소 하나 이상의 깨진 링크를 포함함.
     * 뉴스 웹사이트의 링크
          + 2023년 3월/4월에 수집된 뉴스 웹사이트의 약 50만 페이지를 샘플링함.
               o 뉴스 사이트의 94%는 최소 하나 이상의 외부 링크를 포함하며, 23%의 페이지가 최소 하나 이상의 깨진 링크를 포함함.
     * Wikipedia의 참고 링크
          + 50,000개의 영어 Wikipedia 페이지를 무작위로 샘플링함.
               o 수집된 페이지의 82%가 최소 하나 이상의 참조 링크를 포함하며, 참조 링크의 11%가 더 이상 접근 불가 상태임.
     * Twitter의 게시물
          + 2023년 봄에 500만 개의 트윗을 수집하고 3개월 동안 추적함.
               o 수집된 트윗의 18%가 추적 기간 종료 시 더 이상 공개적으로 보이지 않음.
               o 삭제된 트윗 중 60%는 계정이 비공개, 정지되거나 삭제됨.
               o 트윗의 1%는 한 시간 이내에 삭제되며, 3%는 하루 이내, 10%는 일주일 이내, 15%는 한 달 이내에 삭제됨.
     * 트윗의 생존 분석
          + 게시된 트윗의 절반이 게시 후 첫 6일 이내에 사라짐.
          + 트윗의 90%는 게시 후 46일 이내에 접근 불가 상태가 됨.
          + 삭제되었으나 나중에 다시 공개된 트윗의 6%가 존재함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * Facebook 페이지의 문제점
          + 많은 단체와 기업들이 Facebook 페이지만 사용하여 다른 웹 존재가 없게 됨. Facebook 계정이 필수로 요구됨.
     * 아카이빙 노력
          + CNN과 BBC 같은 웹사이트는 과거 콘텐츠를 아카이빙하려는 노력을 함. 예: 9/11 테러 관련 보도.
     * 인터넷 아카이브 지원
          + 인터넷 아카이브(archive.org)에 기부하여 오래된 콘텐츠 보존을 지원할 필요가 있음. 중요한 콘텐츠는 로컬 복사본을 만들어 두는 것이 좋음.
     * 뉴스 웹사이트 운영 경험
          + 2019년부터 뉴스 웹사이트를 운영하며, 매 시간마다 크롤러로 죽은 링크를 찾아 아카이브 링크로 대체함. 선거 다음 날 후보자 웹사이트가 사라지는 경우가 많음.
     * 웹사이트 수명 그래프
          + 2013년 이후 많은 웹사이트가 사라졌을 것으로 예상됨. 특히 커뮤니티 사이트(Angelfire, Geocities 등)의 사라짐이 큰 영향을 미침. 웹사이트 수명을 그래프로 나타내면 흥미로울 것임.
     * 과거 웹사이트의 문제점
          + 90년대 Angelfire에 호스팅된 첫 .com 웹사이트를 다시 보게 됨. 당시에는 괜찮았지만 현재 기준으로는 부적절한 내용이 많음.
     * 인터넷의 일시성
          + 인터넷의 본질적인 일시성을 받아들여야 함. 아카이빙을 원한다면 오프라인 복사본을 만드는 것이 좋음. PDF/A 형식이 아카이빙에 적합함.
     * SEO 문제
          + 현재 웹의 대부분이 SEO 스팸으로 가득 차 있음.
     * 링크 깨짐 문제
          + 인터넷의 큰 문제로, 콘텐츠는 여전히 존재하지만 링크가 깨지는 경우가 많음. 도서관의 DOI 시스템처럼 두 단계 시스템이 도움이 될 수 있음.
     * 망각과 용서의 중요성
          + 모든 것이 영원히 남아있는 세상은 끔찍할 것임. 가치 있는 콘텐츠를 보존하려는 노력이 필요하며, 그 가치는 더 높이 평가됨.
"
"https://news.hada.io/topic?id=14986","기후 문제 해결을 위한 Cement Recycling 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    기후 문제 해결을 위한 Cement Recycling 방법

    시멘트 재활용 방법이 세계 최대의 기후 문제 중 하나를 해결할 수 있음

      케임브리지 대학 연구진이 대규모로 매우 저배출 시멘트를 생산할 수 있는 방법을 개발함

     * 연구진은 철강 재활용에 사용되는 전기 아크로를 이용해 시멘트를 동시에 재활용하는 방법을 개발함.
     * 시멘트는 콘크리트의 주요 구성 요소로, 전 세계 인류가 사용하는 두 번째로 많이 사용되는 물질임.
     * 이 방법은 시멘트와 철강 생산의 비용을 크게 증가시키지 않으면서도 배출량을 크게 줄일 수 있음.

      시멘트 재활용 방법의 원리

     * 사용된 시멘트는 철강 재활용에 사용되는 석회 플럭스의 대체재로 효과적임.
     * 석회 플럭스는 불순물을 제거하는 데 사용되며, 일반적으로 슬래그라는 폐기물로 끝남.
     * 석회를 사용된 시멘트로 대체하면, 최종 제품은 새로운 콘크리트를 만들 수 있는 재활용 시멘트가 됨.

      전기 아크로를 이용한 대규모 생산

     * 재료 가공 연구소에서 수행한 최근 테스트에서 재활용 시멘트가 전기 아크로에서 대규모로 생산될 수 있음을 보여줌.
     * 이 방법은 전기 아크로가 재생 에너지로 구동될 경우, 궁극적으로 배출 제로 시멘트를 생산할 수 있음.

      시멘트의 구성과 배출 문제

     * 콘크리트는 모래, 자갈, 물, 시멘트로 구성되며, 시멘트는 결합제로 작용함.
     * 시멘트는 콘크리트 배출량의 거의 90%를 차지함.
     * 시멘트는 석회석과 기타 원료를 약 1,450°C로 가열하여 만들어지며, 이 과정에서 많은 양의 CO₂가 방출됨.

      대체 재료의 한계

     * 과학자들은 지난 10년간 시멘트 대체재를 조사해왔으며, 대체재는 화학적으로 활성화되어야 함.
     * 대체재의 물리적 양이 전 세계 시멘트 수요를 충족시키기에 충분하지 않음.

      새로운 접근 방식의 필요성

     * 연구진은 기존의 시멘트를 재활용하는 방법을 통해 배출량을 줄이는 방안을 모색함.
     * 전기 아크로를 사용하여 철강을 재활용하는 과정에서 시멘트를 재활용하는 방법을 시도함.

      연구 결과

     * 시멘트 클링커와 산화철의 조합이 우수한 철강 제조 슬래그를 형성함.
     * 이 방법을 통해 재활성화된 시멘트를 추가 비용 없이 생산할 수 있음.

      미래 전망

     * 케임브리지 전기 시멘트 공정은 빠르게 확장되고 있으며, 연구진은 2050년까지 연간 10억 톤을 생산할 수 있을 것으로 예상함.
     * 시멘트 사용량을 줄이는 것도 중요하며, 이를 위해 정치적 의지가 필요함.

      연구 지원 및 특허

     * 연구진은 상업화를 지원하기 위해 특허를 출원함.
     * 연구는 Innovate UK와 영국 연구 혁신 기관(EPSRC)의 지원을 받음.

    GN⁺의 의견

     * 기술의 혁신성: 이 기술은 기존의 철강 재활용 공정을 활용하여 시멘트를 재활용함으로써, 두 가지 산업의 배출량을 동시에 줄일 수 있는 혁신적인 접근 방식임.
     * 경제적 효율성: 추가 비용 없이 배출량을 줄일 수 있다는 점에서 경제적으로 매우 효율적임.
     * 정책적 지원 필요성: 시멘트 사용량을 줄이기 위해서는 정부와 정책 결정자들의 적극적인 지원이 필요함.
     * 대체재의 한계: 현재 대체재의 물리적 양이 충분하지 않기 때문에, 새로운 재활용 방법이 더욱 중요해짐.
     * 미래 전망: 이 기술이 성공적으로 상용화된다면, 전 세계적으로 큰 환경적 영향을 미칠 수 있을 것으로 기대됨.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 대단함: 철강 재활용에 사용되는 대형 아크로를 이용해 콘크리트를 재활용하는 기술. 태양광 발전을 이용하면 탄소 배출 없는 콘크리트 생산 가능성. 현재 콘크리트가 인위적 탄소 배출의 7.5%를 차지하므로 큰 차이를 만들 수 있음. 아크로는 에너지를 많이 소모하지만 태양광 발전이 계속 증가하면 해결 가능성 있음.
     * 현실적 관점: 이 발견은 멋지지만, 현재도 사용된 시멘트가 매립지로 가는 경우는 드묾. 대부분의 시멘트는 콘크리트로 사용됨. 다양한 크기의 파쇄 콘크리트는 도로 건설 등에 유용한 자재로 사용됨. 일부 지역에서는 파쇄 콘크리트가 항상 부족함.
     * 토론의 중요성: 이 주제가 해커뉴스에서 논의된 것은 좋음. 다른 유망한 비탄소 에너지원, 예를 들어 지열 에너지에 대한 논의도 필요함. 넷제로가 '임무 완수'가 아님을 이해하는 것이 중요함. 현재 온도 상승 추세를 고려하면 넷제로 달성 시점에 +2.5C에서 +3.0C 사이일 가능성 있음. 이는 큰 인구에게 생존 가능하지 않을 수 있음. 따라서 SRM 같은 기술적 해결책이 필요함.
     * 지속 가능한 건축: 10년 후에 철거되지 않아도 되는 건축물을 짓는 것이 또 다른 해결책. 많은 대형 콘크리트 건물이 20년 이내에 철거됨. 계획과 예측을 통해 더 나은 방법이 필요함.
     * 재활용의 한계: 철강 재활용에서 사용되는 플럭스를 사용된 콘크리트로 대체하여 무용한 슬래그 대신 재활용 시멘트를 얻는 아이디어. 좋은 아이디어지만 전 세계 철강 생산이 이 방법으로 전환되더라도 시멘트 생산에 미치는 영향은 미미함.
     * 기대감: 이 문제를 해결할 수 있는 방법을 찾기를 바라는 목록 중 하나였음.
     * 어제의 논의: 어제도 관련 논의가 있었음.
     * 가비온 활용: 파손된 콘크리트 조각을 가비온에 사용하는 것은 무가치한 자재를 재활용하는 좋은 방법. 외관을 신경 쓰는 경우, 콘크리트 조각을 내부에 사용하고 외부는 예쁜 돌로 덮으면 됨.
     * 시멘트 생산의 영향: 시멘트 생산은 전 세계 탄소 배출의 주요 원인 중 하나. 효과적인 시멘트 재활용 방법의 개발이 진행 중임.
     * 비용과 에너지 소비: 이 기술의 비용과 에너지 소비가 얼마나 될지 궁금함. 대부분의 콘크리트 탄소 배출이 에너지 소비 때문임.
"
"https://news.hada.io/topic?id=15029","구글 알고리듬 업데이트, 인터넷은 이제 예전 같지 않을 것임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글 알고리듬 업데이트, 인터넷은 이제 예전 같지 않을 것임

     * 지난 2년 동안 Google Search에 대한 일련의 업데이트는 전례 없는 AI 기능을 포함하여 가장 강력한 인터넷 도구의 극적인 변화를 의미함
     * Google이 웹을 구할 것인지 파괴할 것인지 의문이 제기됨

구글 검색엔진 최적화(SEO)의 문제점

     * 웹은 ""검색 엔진 최적화(SEO)""라는 웹사이트 제작 기법이 지배하고 있음
          + SEO는 Google 검색에서 더 나은 인식을 위해 기사와 웹 페이지를 조정하기 위한 기술임
          + Google은 웹사이트 소유자에게 SEO 팁, 도구 및 조언을 제공함
          + 검색 엔진의 메커니즘에 의존하는 수백만 개의 기업에게 SEO는 피할 수 없는 게임이 될 수 있음
     * SEO는 악용될 수 있음
          + 기업은 사용자를 위해 설계된 콘텐츠보다 Google 알고리듬을 만족시키기 위해 설계된 콘텐츠를 만드는 것이 더 많은 수익을 낼 수 있다는 것을 깨달음
     * Google의 이 문제 해결 노력이 항상 성공적이지는 않음
          + 인기 검색어에 대한 결과는 종종 유용한 정보는 거의 없지만 광고와 수익 공유를 얻는 소매업체에 대한 링크로 가득 찬 웹사이트로 가득 차 있음
          + 손실되는 것은 Google을 열 때 아마도 찾고 있을 것임: 주제에 대해 박식하고 열정적인 사람들의 정보

Google의 스팸성 검색 결과에 대한 전쟁

     * Google은 2022년에 검색 순위를 높이기 위해서만 생성된 콘텐츠를 제거하기 위한 ""유용한 콘텐츠 업데이트""를 알고리듬에 발행함
     * Google은 2023년 9월에 후속 업데이트를, 올해 3월에 세 번째 알고리듬 조정을 발행함
     * Google은 결과적으로 ""검색 결과에서 저품질 콘텐츠가 45% 감소했다""고 말함

업데이트의 놀라운 결과

     * SEMrush의 데이터에 따르면 뉴욕 매거진 웹사이트는 지난 6개월 동안 Google 검색 트래픽의 32%를 잃었고, GQ.com은 26% 감소함
     * 데이터에 따르면 인기 있는 크라우드소싱 영어 속어 사전인 Urban Dictionary는 1,800만 페이지뷰가 감소하여 검색 트래픽의 절반 이상이 감소함
     * OprahDaily.com은 거의 58% 감소함

Reddit의 급증

     * SEMrush에 따르면 Reddit은 Google 검색에서 트래픽이 126% 증가한 급증을 보임
     * Reddit은 이미 그 혜택을 느끼고 있음
          + 2024년 3월 상장 이후 첫 분기 실적을 발표함
          + 매출은 전년 대비 48% 증가한 2억 4,300만 달러(1억 9,100만 파운드)임
     * ""Reddit이 보고 있는 트래픽 증가는 인터넷에서 전례가 없는 것""이라고 마케팅 에이전시 Amsive의 SEO 전략 및 연구 부사장인 Lily Ray는 말함
     * Reddit 외에도 Quora, Instagram과 같은 사용자 생성 사이트는 유사하게 급격한 상승을 보였고, LinkedIn과 Wikipedia에서도 인상적인 급증이 있었음

업데이트의 영향을 받은 웹사이트들

     * Google 결과는 제로섬 게임임
          + 검색 엔진이 한 사이트로 트래픽을 보내면 다른 사이트에서 가져와야 함
          + Reddit 방정식의 패자에 대한 영향은 마찬가지로 극적임
     * ""Google은 단순히 퍼블리셔 웹사이트에 전쟁을 하고 있다""고 Ray는 말함
          + ""Google이 특별히 소규모 블로거를 공격하기 위해 알고리듬 업데이트를 설계한 것 같다""고 그녀는 말함
     * BBC와 이야기를 나눈 여러 웹사이트 소유자와 검색 전문가들은 Google 결과에 콘텐츠의 품질과는 전혀 관련이 없는 대규모 확립된 브랜드를 가진 웹사이트로의 일반적인 변화가 있었다고 말했음
     * 영국에 기반을 둔 엔터테인먼트 뉴스 사이트인 Ready Steady Cut의 편집장 Daniel Hart에게 변화는 즉각적이었음
          + ""Google의 9월 업데이트 후 우리의 트래픽은 즉시 반으로 줄었고, 더 악화되었을 뿐이다. 특히 Reddit 관련 콘텐츠에 의해 타격을 받았지만, 우리 콘텐츠를 훔치는 스팸 웹사이트에 의해서도 대체되고 있다. 이는 말이 되지 않는다""라고 Hart는 말함
     * 업데이트 후 Google은 웹사이트 소유자에게 팁을 제공하고 회복할 길이 있다고 말했지만, Hart는 컨설턴트를 고용하고 Google의 권장 사항에 초점을 맞추기 위해 피벗했다고 말함
          + 8개월 동안 거의 도움이 되지 않았음
          + ""Google의 조언을 따르려고 지난 8개월을 낭비했다""고 그는 말함

AI 생성 응답에 대한 우려

     * BBC와 이야기를 나눈 웹사이트 소유자와 콘텐츠 제작자에 따르면 가장 큰 위반은 AI 생성 응답임
     * Google은 검색 결과의 AI 개요가 웹사이트에 도움이 될 것이라고 주장함
          + Google의 AI 검색 결과는 실제로 Google이 웹사이트로 보내는 트래픽을 증가시킨다고 Google의 검색 책임자인 Liz Reid는 블로그 게시물에 썼음
          + ""AI 개요는 페이지가 해당 쿼리에 대한 전통적인 웹 목록으로 나타날 때보다 더 많은 클릭을 얻는다""고 Reid는 썼음
          + ""우리가 이 경험을 확장함에 따라 퍼블리셔와 제작자에게 중요한 트래픽을 보내는 데 계속 초점을 맞출 것이다""
     * 그러나 회사는 그 주장을 뒷받침하는 데이터를 공유하지 않았으며, 많은 웹사이트 소유자와 업계 전문가들은 반대 효과가 발생할 가능성이 크다고 우려하고 있음
     * 청소 조언 웹사이트 Housewife How-Tos의 소유자인 Katie Berry는 Google의 AI가 사용자의 질문에 답하면 사용자가 검색을 끝낼 것이라고 가정함
          + AI 검색 결과는 ""질문에 피상적으로, 그리고 종종 잘못 답하므로 사람들이 내 사이트를 방문하지 않는다""고 Berry는 말함
          + Berry에 따르면 그녀의 사이트 트래픽은 2022년 Google 업데이트 이후 70% 감소했으며 Google이 새로운 AI 테스트를 시작한 후 더욱 감소했음
     * 여행 작가 David Leiter와 같은 다른 사람들은 Google의 AI가 그들의 콘텐츠를 노골적으로 훔치고 있다고 느끼기 때문에 잠재적인 결과가 특히 문제가 된다고 말함
          + 예를 들어, Leiter는 ""라스베이거스 근처의 최고의 슬롯 캐년"" 검색이 과거에는 그의 웹사이트 World Travel Guy의 기사로 연결되었다고 말함
          + 그러나 이번 주 초 검색 결과 맨 위에 AI 생성 응답이 대신 표시되었음
          + ""Google은 내 기사를 거대한 AI 개요 상자로 대체했고, 대부분 잘못된 답변을 내뱉는다""고 Leiter는 말함
     * Google은 AI 도구가 부정확한 정보를 제공할 수 있다는 점을 인정하지만 결과를 개선하기 위해 지속적으로 노력하고 있다고 말함

GN⁺의 의견

     * 단순히 Google의 알고리듬을 따르기 위해 만들어진 SEO 최적화 콘텐츠 대신, 원본 콘텐츠를 만드는 독립적인 웹사이트들이 부당하게 피해를 받는 것은 우려할 만한 일임. 장기적으로는 웹의 다양성과 건전한 생태계를 해칠 수 있음.
     * Google 검색엔진의 시장 지배력이 너무 크기 때문에, Google의 정책 변경은 많은 웹사이트의 생사여탈권을 쥐고 있음. Google은 그에 걸맞는 사회적 책임을 인식하고 업계와 소통하려 더 노력할 필요가 있어 보임.
     * AI 생성 검색결과 요약의 정확성과 검색 품질에 대해서는 Google이 지속적으로 개선해 나가야 할 것임. 동시에 저작권이나 콘텐츠 도용 문제에 대해서도 명확한 정책 마련이 필요함.
     * 장기적으로 AI 기술이 어떤 형태로든 검색엔진에 적용될 것은 불가피해 보임. 중요한 건 그 과정에서 기존 웹사이트들과 win-win할 수 있는 방안을 고민하고, 이해관계자들과 긴밀히 소통하는 것이라 봄.

  Hacker News 의견

     * Google의 검색 변화에 대한 의견
          + Google은 검색 변화를 엄격한 테스트 후에만 출시하며, 웹사이트 소유자들에게 도움과 자원을 제공한다고 주장함.
          + 무료 플레이 게임에서 유료 아이템을 구매해야 이길 수 있는 구조와 비슷하게, Google도 SEO를 게임처럼 만들어 돈을 쓰게 만듦.
     * Google 알고리즘 업데이트의 영향
          + 두 번째 Google 알고리즘 업데이트 이후, House Fresh의 방문자가 급감하여 대부분의 팀을 해고해야 했음.
          + 웹사이트 방문자를 얻으려면 Google이나 다른 대형 기술 회사에 돈을 지불해야 하는 상황.
     * Reddit을 검색어에 추가하는 이유
          + Reddit의 검색 기능이 비효율적이어서, 광고가 많은 검색 결과를 피하기 위해 Reddit을 검색어에 추가함.
          + Google은 광고 회사로, 광고가 많은 사이트를 선호함.
     * Google 검색의 유용성 감소
          + 최근 Google 검색이 온라인 소매업체 외에는 유용하지 않다고 느껴짐.
          + DuckDuckGo는 여전히 괜찮은 결과를 제공함.
     * Google 검색의 경쟁 가능성
          + Google이 검색 기능을 망쳐서, 이제는 인터넷 검색에서 Google과 경쟁하는 것이 더 의미 있게 됨.
          + Google이 혁신보다는 수익을 방어하는 데 집중하고 있음.
     * 광고가 많은 사이트 선호
          + 인기 검색어가 광고가 많은 사이트로 가득 차 있는 경우가 많음.
          + Google이 광고가 많은 사이트를 선호하는 것은 놀랍지 않음.
     * Google 검색 엔진의 퇴보
          + Google 검색 엔진이 예전만큼 강력하지 않음.
          + 2000년대 후반부터 결과를 억제하는 규칙을 추가하면서 점점 더 나빠짐.
     * 개인 큐레이션의 필요성
          + 블로그롤의 부활이 해결책의 일부가 될 수 있음.
          + 개인적으로 큐레이션된 콘텐츠가 더 가치 있을 수 있음.
     * 작은 비즈니스의 어려움
          + Google이 작은 비즈니스를 죽였다는 기사 내용에 대한 비판.
          + 예전에는 개인 경험을 바탕으로 한 비영리 리뷰를 쉽게 찾을 수 있었음.
     * Google의 새로운 사고방식
          + BBC가 이 이야기를 승인한 것에 대해 칭찬.
          + 작은 출판사와 정보 공유자들이 Google의 변화로 인해 어려움을 겪고 있음.
          + 9월의 업데이트 이후로 회복하지 못한 사이트들이 많음.
"
"https://news.hada.io/topic?id=15000","Go 인프라 악용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Go 인프라 악용

    문제점

     * 어젯밤, Go의 체크섬 데이터베이스 내용을 탐색하던 중 흥미로운 결과를 발견함.
     * sqlite> select path, count(path) from modules group by path order by count(path) desc; 명령어를 실행한 결과:
          + github.com/homebrew/homebrew-core|39438
          + github.com/Homebrew/homebrew-core|30896
          + github.com/concourse/concourse|25372
          + github.com/openshift/release|24065
          + github.com/cilium/cilium|22138
     * Homebrew는 Ruby를 사용하기로 알려져 있어, Go와의 연결이 의문스러웠음.
     * GitHub 언어 통계도 이를 확인해줌.
     * Go와 관련된 파일(go.mod 또는 Go 소스 파일)을 찾기 위해 저장소를 복제했지만, 아무것도 발견되지 않음.

    연구

     * 새로운 날이 시작되었고, 호기심이 답을 요구함.
     * Git 저장소가 Go 코드와 관련이 없다면, 어떻게 Go 체크섬 데이터베이스에 나타나는지 궁금했음.
     * proxy.golang.org가 기본 모듈 프록시이고, sum.golang.org가 체크섬 데이터베이스임을 알게 됨.
     * Go의 문서를 읽어보니, 모듈 버전이 아직 로그에 기록되지 않은 경우 체크섬 데이터베이스가 원본 서버에서 모듈을 가져오려 시도함을 알게 됨.
     * 새로운 Go 모듈 저장소가 체크섬 데이터베이스와 프록시에 추가되는지 확인하기 위해 lookup 엔드포인트를 호출해봄.
     * 새로운 Go 모듈을 만들고 GitHub 계정에 업로드한 후, lookup 명령을 두 가지 형태로 시도했으나 모두 오류가 발생함.
     * 올바른 의사 버전을 생성하고 체크섬 데이터베이스에 다시 쿼리하여 모듈이 다운로드되었는지 확인함.
     * 프록시를 쿼리하고 모듈 zip을 다운로드하여 임의의 데이터를 Go 인프라에 저장할 수 있음을 증명함.

    남용 가능성

     * 개발자 머신과 CI/CD 서버에서 다운로드 제한을 우회하는 데 사용될 수 있음.
     * 악성 소프트웨어가 페이로드를 저장하고 필요할 때 프록시에서 이를 가져올 수 있음.
     * proxy.golang.org에 대한 서비스 거부(DoS) 공격이 가능할 수 있음.
     * 명령 및 제어(C2) 시스템을 쉽게 구현할 수 있음.

    결론

     * 체크섬 데이터베이스 프로세스가 어떻게 작동하는지 이해하게 되었음.
     * 현재로서는 Go 인프라에서 심각한 문제는 아니지만, 남용될 가능성이 있음.
     * 비-Go 프로젝트가 데이터베이스에 있는 이유에 대한 추가적인 질문이 남아 있음.
     * 이 연구를 통해 많은 아이디어를 얻었으며, 더 탐구할 계획임.

    GN⁺의 의견

    1. 보안 취약점: 이 기사는 Go의 체크섬 데이터베이스가 임의의 데이터를 저장할 수 있는 보안 취약점을 지적하고 있음. 이는 악성 코드가 쉽게 배포될 수 있는 경로를 제공할 수 있음.
    2. 개선 필요성: Go 인프라의 보안과 무결성을 강화하기 위해 체크섬 데이터베이스와 프록시 서버의 접근 제어를 개선할 필요가 있음.
    3. 다른 언어와의 통합: Go 체크섬 데이터베이스에 비-Go 프로젝트가 포함되는 이유를 명확히 하고, 이를 방지하기 위한 추가적인 검증 절차가 필요함.
    4. 개발자 교육: 개발자들이 이러한 보안 취약점을 인지하고, 이를 방지하기 위한 최선의 방법을 이해할 수 있도록 교육이 필요함.
    5. 대체 솔루션: 비슷한 기능을 제공하는 다른 언어의 체크섬 데이터베이스와 프록시 서버를 비교하고, Go의 인프라 개선에 참고할 수 있음.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 온라인 서비스의 악용 가능성
          + 모든 온라인 서비스는 결국 명령 및 제어, 저작권 침해, CSAM 호스팅에 악용될 가능성이 있음. 트위터, 텔레그램, PGP 키 인프라 등도 이미 이런 사례가 있음.
     * 구글의 파일 호스팅 문제
          + 구글은 악성 파일 호스팅 문제를 자주 다루기 때문에, Go 팀이 GCP와 드라이브와 협력했을 가능성이 있음. 이는 구글이 이미 허용하는 다른 엔드포인트와 크게 다르지 않음.
     * GitHub와의 비교
          + GitHub에 파일을 업로드하는 것과 큰 차이가 없다는 의견. GitHub도 계정만 있으면 임의의 데이터를 저장할 수 있음.
     * PyPI의 비파이썬 프로젝트
          + PyPI에는 비파이썬 프로젝트도 있으며, 사용자가 라이브러리 코드를 컴파일할 수 없을 때를 대비해 휠(컴파일된 바이너리)을 배포할 수 있는 기능이 필요함. C와 Golang으로 작성된 코드도 가능함.
     * Golang 프록시와 체크섬 로그
          + Golang 프록시와 sumdb를 이용해 임의의 URL 체크섬을 투명하게 기록하는 아이디어를 시도해본 경험이 있음.
     * 도메인 탐색
          + 특정 도메인을 탐색했을 때 예상했던 내용이 대부분 포함되어 있었음.
     * 알려진 문제
          + Golang의 알려진 문제에 대한 링크를 공유함.
     * CUE의 모듈 시스템
          + CUE의 모듈 시스템이 출시 중이며, Go의 MVS를 좋아하지만 OCI 인프라 기반으로 구축됨. 의존성 관리 시스템에 관심이 있다면 관련 링크를 참고할 수 있음.
     * 웹 캐시 문제
          + W3C가 웹의 모든 것을 캐시 가능하게 만들었지만, 일반 목적의 프록시 캐시가 거의 없는 이유가 궁금함. 발행자가 불필요하게 짧은 ""Cache-Control: max-age"" 또는 ""Vary: Cookie"" 응답을 보내는지, 너무 많은 ISP가 트랜짓 비용을 지불하는지 의문임.
     * 프록시 캐시 문제
          + 프록시가 비-Go 저장소를 캐시하는 것이 낭비일 수 있지만, Go 저장소를 캐시하게 만들면 임의의 데이터를 저장할 수 있음. 큰 문제가 아니라고 생각함.
"
"https://news.hada.io/topic?id=14936","선박 해체 작업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                선박 해체 작업

CJF-Edward Burtynsky 기후 사진 저널리즘 상, 제시 윈터 수상

  프로젝트

     * 도시 광산
          + 도시에서 발생하는 폐기물과 자원을 재활용하는 과정을 다룬 프로젝트임.
     * 중국
          + 중국의 급속한 산업화와 그로 인한 환경 변화를 기록한 프로젝트임.
     * 선박 해체
          + 대형 선박이 해체되는 과정을 기록한 프로젝트임.

  뉴스

     * 작가의 진술
          + ""선박 해체에 대한 원래 아이디어는 오래전부터 시작되었음. Exxon Valdez 기름 유출 사고가 발생한 지 약 4년 후, 단일 선체 선박의 위험성에 대해 이야기하는 라디오 프로그램을 들었음. 보험 회사들이 2004년 이후로 단일 선체 선박을 보장하지 않기로 하면서, 이러한 선박들이 모두 퇴역하게 되었음. 이로 인해 이 거대한 선박들이 어디에서 해체될지 궁금해졌음. 이는 인류와 이러한 것들을 해체하는 기술에 대한 연구가 될 것임. 선박 해체를 가장 큰 규모의 재활용으로 보았음. 대부분의 해체 작업이 인도와 방글라데시에서 이루어지고 있었기 때문에 그곳으로 갔음."" — Edward Burtynsky

  이벤트

     * Burtynsky의 선박 해체 사진
          + Burtynsky의 선박 해체 사진은 그의 다른 작품들처럼 시간의 끝을 보여주는 이미지로 나타남.
          + 버려진 광산과 채석장, 버려진 타이어 더미, 끝없는 유전 필드, 퇴역한 대형 유조선의 거대한 모노리스는 우리의 산업 ""진보"" 시도가 종종 파괴의 잔재를 남긴다는 것을 보여줌.
          + 그럼에도 불구하고 이러한 이미지의 광대함에는 무언가 기이하게 아름답고 숨막히는 것이 있음. 이는 그들의 관점의 광대함이 어떤 식으로든 더 긴 관점으로 열리는 것처럼 보임.
          + Burtynsky에게 자연 자체는 시간이 지나면서 인간의 가장 야심찬 토지 침입조차도 되찾을 수 있음. 인간의 필요와 욕망이 변하는 한, 풍경도 변할 것임.

  GN⁺의 의견

     * 환경 문제의 시각화
          + Burtynsky의 작품은 환경 문제를 시각적으로 강렬하게 전달하여 사람들에게 경각심을 일깨움. 이는 환경 보호의 중요성을 다시 한번 상기시켜줌.
     * 산업화의 이면
          + 산업화와 기술 발전의 이면에 숨겨진 파괴적인 요소들을 조명함으로써, 지속 가능한 발전의 필요성을 강조함.
     * 예술과 환경의 융합
          + 그의 사진은 예술과 환경 문제를 융합하여, 단순한 기록을 넘어선 예술적 가치를 지님. 이는 더 많은 사람들에게 환경 문제에 대한 관심을 불러일으킬 수 있음.
     * 기술적 도전
          + 대형 선박 해체와 같은 복잡한 주제를 다루기 위해 필요한 기술적 도전과 이를 극복하는 과정이 흥미로움. 이는 기술 발전과 환경 보호의 균형을 찾는 데 중요한 시사점을 제공함.
     * 관련 프로젝트
          + 유사한 주제를 다루는 다른 프로젝트로는 Chris Jordan의 ""Midway: Message from the Gyre""와 같은 작품이 있음. 이는 플라스틱 오염 문제를 시각적으로 강렬하게 전달함.

        Hacker News 의견

    해커뉴스 댓글 모음 요약

     * 어린 시절의 추억
          + 아버지가 인도에서 전기 엔지니어로 일하며 배에서 나온 선반과 캐비닛을 집에 가져왔음.
          + 미관은 맞지 않았지만 기능성이 중요했음.
          + 캐비닛에 쓰인 글자를 해독하는 것이 흥미로웠음.
     * 선박 해체 작업의 현실
          + 서구의 선박 회사들이 비용 절감을 위해 인도나 방글라데시로 선박을 보내 해체 작업을 함.
          + 환경 문제와 위험한 작업 조건이 문제로 대두됨.
          + 선박이 표류하여 대형 기름 유출 사고가 발생할 수 있음.
     * 알랑과 치타공의 선박 해체장
          + 인도와 방글라데시의 선박 해체장이 구글 지도에서 확인 가능함.
          + 링크를 통해 위치를 확인할 수 있음.
     * 게임 추천
          + 'Hardspace: Shipbreaker'라는 게임을 추천함.
          + 우주선을 해체하고 자원을 분류하는 게임임.
     * 에드 버틴스키의 작품
          + 에드 버틴스키의 영화 'Anthropocene'과 'Manufactured Landscapes'를 추천함.
          + TED 강연 링크도 공유함.
     * 석면 문제
          + 오래된 선박에는 석면이 많이 포함되어 있음.
          + 2002년 이후 건조된 선박에도 특정 용도로 석면이 사용될 수 있음.
          + 규정이 제대로 지켜지지 않는 현실을 지적함.
     * 파키스탄의 선박 해체장
          + 파키스탄의 선박 해체장을 방문해 기록한 영상을 공유함.
          + 링크를 통해 영상을 볼 수 있음.
     * 위험한 직업
          + 선박 해체 작업이 매우 위험한 직업임.
          + 'Workingman's Death'라는 다큐멘터리에서 이 작업을 다룸.
     * 다큐멘터리 추천
          + 선박 해체 산업을 다룬 다큐멘터리를 추천함.
          + 링크를 통해 영상을 볼 수 있음.
     * VICE의 영상
          + VICE에서 제작한 선박 해체 관련 영상을 추천함.
          + 링크를 통해 영상을 볼 수 있음.
"
