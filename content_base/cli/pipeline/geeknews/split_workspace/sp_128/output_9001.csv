"https://news.hada.io/topic?id=12060","혁신을 하지 않음으로써 지금의 위치에 오른 회사 Brother","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   혁신을 하지 않음으로써 지금의 위치에 오른 회사 Brother

요약: 프린터 브랜드에 대한 사용자 의견

     * Brother 프린터의 인기: Brother 프린터가 기술자들 사이에서 권장되는 브랜드로 부상함. 다른 브랜드들이 과도한 혁신으로 제품을 악화시킨 반면, Brother는 기본적인 기능을 유지하며 ""Fine I Guess"" 수준을 유지함으로써 최고의 제조사로 인정받음.
     * Brother 프린터의 장점: 분리 가능한 드럼 유닛과 토너 카트리지 디자인으로 인해 토너 비용 절감 및 드럼 유닛 교체 횟수 감소. 사용자들은 Brother 프린터의 신뢰성과 간편함을 높이 평가함.
     * 기타 브랜드의 문제점: HP, Canon 등 다른 브랜드들은 품질 저하, 소프트웨어 문제, 고객을 위한 가치 창출 없이 이익을 증대하려는 시도로 인해 비판받음. 일부 사용자들은 이러한 문제들로 인해 Brother 이외의 프린터를 사용하지 않겠다고 언급함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 프린터 시장에서 Brother 브랜드가 신뢰성과 기본 기능 유지라는 전략으로 인기를 얻고 있다는 점이다. 이는 과도한 혁신이 항상 긍정적인 결과를 가져오지 않을 수 있음을 보여주며, 기술 분야에서 단순함과 신뢰성이 여전히 중요한 가치임을 강조한다. 이러한 내용은 프린터를 구매하거나 기술 제품에 대한 의사결정을 하는 사용자들에게 흥미로울 수 있으며, 기술 발전이 항상 사용자 경험을 향상시키는 것은 아니라는 점을 인식시키는 계기가 될 수 있다.

        Hacker News 의견

     * 수리 가능성과 단순성에 대한 교훈
          + 아버지가 1969년형 MG Midget를 복원 중이었는데, 오른쪽 방향 지시등이 작동을 멈춤.
          + 전압계만을 사용하여 연결이 끊긴 전선과 차체로의 단락을 발견함.
          + 고장 난 전선을 3달러 상당의 새 전선, 납땜, 열 수축 튜브로 교체함.
          + 기업들은 환경 의식을 강조하지만, 제품이 평생 지속되도록 보장하지 않음.
          + 현대의 스마트폰도 평생 사용할 수 있는 이유가 없으며, 12년 된 Brother 프린터와 Neato 로봇 청소기는 여전히 잘 작동하고 부품 교체가 가능함.
          + 지구를 보호하고 싶다면 최신 제품에 대한 요구를 멈추고, 제품이 30년 이상 지속될 수 있도록 요구해야 함.
     * 마지막으로 좋은 HP LaserJet 구매에 대한 경험
          + 몇 년 전, HP Color LaserJet Pro m254dw를 온라인으로 구매함.
          + 토너가 마르지 않고, ""빈 카트리지""가 있어도 인쇄가 가능함.
          + AirPrint를 사용하여 인쇄할 수 있고, 이더넷 포트가 있어 현대적이면서도 구식의 장점을 가짐.
          + 프린터에 대한 불만은 거의 없으며, 부모님을 위한 비슷한 프린터를 찾고 있지만 아직 HP에서 적합한 제품을 찾지 못함.
     * Brother 프린터에 대한 의견
          + Brother 프린터는 POSIX/UNIX 철학을 따르며, 하나의 문제를 잘 해결함.
          + HP, Epson, Canon 등은 제품 비용을 안정시키거나 제네릭 부품을 재사용하기보다는 현재 유행하는 기술로 제품을 홍보함.
          + 시장에서 ChatGPT 프린터가 나올 것은 불가피함.
     * 불필요한 혁신에 대한 비판
          + 새로운 냉장고에 내부 카메라가 달려 있어 문에 있는 화면으로 내부를 볼 수 있음.
          + 실제로 필요하지 않은 기능을 혁신한다는 명목으로 추가하는 것은 더 나은 제품이 아니라 복잡하고 지원이 부족한 제품을 만들어냄.
     * Brother 레이저 프린터의 장점
          + 11년 동안 사용한 Brother 레이저 프린터는 두 번째 토너 카트리지를 사용 중임.
          + 잉크젯 프린터 대신 레이저 프린터를 사용하면 잉크가 마르는 문제를 피할 수 있음.
     * 흑백 Brother 레이저 프린터의 편리함
          + 카트리지가 수천 페이지를 인쇄할 수 있고, 복잡한 클라우드 요구 사항이 없음.
          + FritzBox를 통해 프린터를 즉시 등록하고 로컬 네트워크의 모든 장치에서 인쇄할 수 있음.
     * 지속 가능한 마인드셋의 필요성
          + 제품 초기에는 성장 마인드셋이 중요하지만, 어느 시점에서는 지속 마인드셋으로 전환해야 함.
          + 기업들은 매출 증가로 경영진에게 보상하고, 제품 관리자들은 즉각적인 수익을 최적화하는 지표를 선택함으로써 브랜드 충성도를 희생함.
          + Brother는 혁신 부족이 아니라 단기적인 탐욕을 피하기 위한 의도적인 선택 때문에 그대로 유지됨.
     * 미국에서 생산된 Brother 멀티 기능 잉크젯 프린터의 호환성 문제
          + 미국에서 생산된 Brother 멀티 기능 잉크젯 프린터는 유럽에서 유럽형 Brother 카트리지, 헤드 교체, 미국에서 구매한 칩 리셋 도구를 사용해야만 함.
"
"https://news.hada.io/topic?id=12002",""테스트, [, 그리고 [[ (2020)" - 기술명칭 유지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ""테스트, [, 그리고 [[ (2020)"" - 기술명칭 유지

유닉스 시스템의 흥미로운 이진 파일

     * 유닉스 시스템에는 이름이 단일 기호인 이진 파일이 존재함.
     * /bin/[ 명령어를 실행하면 [라는 이름의 프로그램을 확인할 수 있음.
     * [와 test는 같은 이진 파일을 가리키며, 두 명령어는 실제로 동일한 기능을 수행함.

test 프로그램과 [의 사용

     * test 프로그램은 쉘에서 표현식을 평가하는 데 사용됨.
     * 문자열 비교, 숫자 비교, 파일 조건 확인 등을 위해 사용됨.
     * test는 인자를 받아 표현식을 평가하고, 참이면 0을, 거짓이면 1을 반환함.

두 명령어의 존재 이유

     * test와 [ 두 명령어가 존재하는 이유는 명확하지 않으나, 가독성을 높이기 위한 것으로 추측됨.
     * [ 명령어를 사용하면 test보다 더 깔끔하게 조건문을 표현할 수 있음.
     * [를 사용할 때는 명령어의 마지막 인자가 ]로 끝나야 함.

내장 명령어와 외부 이진 파일의 차이

     * test와 [는 쉘 스크립트에서 자주 사용되기 때문에 대부분의 쉘에서 내장 명령어로 구현됨.
     * 내장 명령어와 외부 이진 파일을 사용할 때 다른 동작을 보일 수 있으며, 쉘에 따라서도 차이가 발생할 수 있음.

[[의 사용과 차이점

     * [[는 Bash 확장으로 [의 사용을 대체함.
     * [[는 내장 명령어로서 표현식 내에서 언어의 기본 규칙을 변경할 수 있음.
     * [[는 문자열 비교 시 글로브 패턴을 리터럴로 취급하여 다른 결과를 낼 수 있음.

쉘 스크립트 작성 시 선택

     * 이식성 있는 쉘 스크립트를 작성할 때는 [를 사용하는 것이 좋음.
     * Bash 전용 스크립트를 작성한다면 [[를 사용하는 것이 더 많은 기능을 제공함.

쉘 표현식과 test 표현식의 결합

     * 쉘은 !, &&, || 연산자를 통해 자체 표현식을 가짐.
     * test 표현식과 쉘 표현식을 하나의 명령어로 결합할 수 있음.

GN⁺의 의견

   이 글에서 가장 중요한 점은 유닉스 시스템에서 [와 test가 같은 기능을 수행하는 두 가지 다른 명령어로 존재한다는 것이며, 이는 쉘 스크립트의 가독성과 효율성을 높이기 위한 것으로 추측된다. 이러한 정보는 초급 소프트웨어 엔지니어들이 쉘 스크립트를 작성하거나 이해할 때 유용하게 활용될 수 있으며, 쉘 스크립트의 작동 원리와 다양한 쉘 간의 차이점을 이해하는 데 도움이 될 것이다. 이 글이 흥미로운 이유는 쉘 스크립트의 기본적인 도구들이 어떻게 다양한 형태로 사용될 수 있는지를 보여주며, 쉘 프로그래밍의 복잡성과 유연성을 잘 드러내기 때문이다.

        Hacker News 의견

     * 원 저자의 감사 인사 및 제목 수정 제안

     원 저자가 글이 인기를 얻어서 감사하다는 인사를 전하며, 제목에 연도를 추가하고 ""test"" 단어의 대문자 사용을 지양할 것을 제안함. ""test""가 실제 명령어를 의미하기 때문임.
     * Bourne 쉘의 ""test"" 명령어 역사와 개인적 선호

     Bourne 쉘이 IDE가 없던 시절에 만들어져 괄호나 대괄호 없이 ""test"" 명령어가 사용됐음을 설명. 개인적으로는 대괄호 형식보다 ""test"" 형식을 선호한다고 함.
     * if 블록을 사용하지 않는 조건문의 예시

     if 블록 없이 조건문을 간단하게 작성하는 방법을 소개하며, 디버그 출력을 조건부로 stderr에 출력하는 예시를 제시함.
     * if 블록과 일반 명령어의 결합 사용법

     if 블록이 일반 명령어를 테스트할 수 있음을 보여주며, 예를 들어 grep 명령어를 사용한 로그 검색의 예시를 듦.
     * test 명령어의 논리 연산 사용에 대한 고민

     test 명령어 내에서 논리 연산을 사용할지 별도의 조건문을 사용할지에 대한 고민을 표현함. 성능 문제가 없다면 양쪽 모두에 대해 타당한 이유가 있다고 함.
     * ""test"" 명령어 사용의 이점과 ""man test""의 편리함

     몇 년 전부터 대괄호를 사용하지 않고 ""test"" 명령어를 사용하는 것이 좋다고 주장함. 이는 ""test""가 단순한 명령어임을 강조하고, ""man test""를 사용하는 것이 ""man bash""를 찾는 것보다 편리함을 설명함.
     * [와 test의 단일 인자 동작에 대한 주의

     변수가 비어 있지 않은지 확인할 때 변수를 따옴표로 감싸지 않으면 예상치 못한 결과를 초래할 수 있음을 경고함. 변수를 따옴표로 감싸야 한다고 강조함.
     * 리눅스와 NetBSD에서 /bin/[와 /bin/test의 차이점

     리눅스에서는 /bin/[와 /bin/test가 다르지만 NetBSD에서는 같다는 사실을 공유함.
     * test/[/[[에 대한 더 깊은 탐구와 쉘의 이상한 점들에 대한 블로그 링크 공유

     test, [, [[에 대한 더 깊은 이해를 돕는 문서와 쉘의 다양한 특징을 설명하는 블로그 링크를 공유함.
     * [[가 bash 전용임을 지적하고, bash 사용이 확실하다면 [[를 사용할 것을 권장

     [[가 bash 전용 명령어임을 언급하며, bash를 사용할 때는 [[를 사용하는 것이 좋다고 조언함.
     * [가 bash 스크립팅 언어의 일부가 아니라는 인식에 대한 혼란

     [가 bash 스크립팅 언어의 일부가 아니라 단순한 프로그램임을 이해하는 데 혼란이 있었음을 표현하고, 이에 대한 설명을 요청함.
     * 쉘에 대한 강한 의견과 [ 사용에 대한 반대

     [를 사용하지 말고 ""test""만 사용해야 한다는 강한 의견을 표현함. [가 언어의 문법처럼 보이지만 실제로는 프로그램이라는 점을 강조하며, 문자열 평가에는 case 문을 사용해야 한다고 주장함.
"
"https://news.hada.io/topic?id=12027","2017년, 현실은 놀라운 수준의 세부사항을 가지고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2017년, 현실은 놀라운 수준의 세부사항을 가지고 있다

현실의 놀라운 디테일

     * 콜롬비아에서 북미로 이민 온 저자의 아버지는 더 나은 삶을 찾아왔으며, 저자와 형제는 건물 유지 보수 작업을 도왔음.
     * 건축 작업을 통해 현실에는 예상치 못한 많은 디테일이 있음을 배움.
     * 이러한 디테일은 사람들이 지적으로 막히는 이유를 설명해 줌.

계단 만들기의 복잡성

     * 계단 제작은 단순해 보이지만, 실제로는 많은 세부 작업과 뉘앙스가 있음.
     * 각 단계는 여러 하위 작업으로 나뉘며, 재료의 특성과 도구의 한계로 인해 복잡함.
     * 재료가 완벽하지 않고 도구 사용에 정밀함이 요구되는 등, 모든 단계에서 디테일의 중요성을 경험함.

물 끓이기의 복잡성

     * 물이 끓는 과정은 단순해 보이지만, 실제로는 다양한 현상이 관찰됨.
     * 1800년대 초반의 관점에서 물리학을 이해하려 할 때, 물의 끓는 점은 단순하지 않음을 발견함.
     * 물질의 상태 변화는 예상보다 복잡하며, 다양한 조건에서 다르게 나타남.

디테일의 중요성과 지적 정체성

     * 복잡한 문제를 해결하려 할 때, 성공을 위해 이해해야 할 디테일이 많음.
     * 중요한 디테일은 항상 명백하지 않으며, 때로는 눈에 띄지 않을 수 있음.
     * 중요한 디테일을 인식하지 못하면, 현재의 사고방식에 갇힐 위험이 있음.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 현실의 모든 작업에는 예상치 못한 디테일이 많이 존재하며, 이러한 디테일을 인식하고 이해하는 것이 중요하다는 점임.
     * 사람들에게 흥미로운 이유는 자신의 일상과 전문 분야에서 겪는 어려움이 단순한 개인적 실패가 아니라, 복잡한 현실의 일부임을 깨닫게 해주기 때문임.
     * 이 글은 독자들에게 자신의 분야에서 겪는 문제를 새로운 시각으로 바라보고, 지적으로 성장하는 방법에 대한 통찰을 제공함.

        Hacker News 의견

     * 수학이 현실 세계의 복잡함을 완전히 대비시켜주지 못한다는 인식 때문에 사람들이 수학을 쓸모없다고 느낄 수 있음. 실제로 수학적 해결책을 이해하려면 기초 지식이 필요함.
     * 계단을 만드는 방법에 대한 지적으로, 제안된 방식이 아닌 전통적인 방법을 사용해야 함을 강조함.
     * 학위가 필요하지 않은 분야에서도 많은 사고가 필요하다는 것에 놀라움을 표현함. 일상적인 작업에도 많은 생각과 노력이 필요함.
     * 사람들은 대부분 믿음을 바탕으로 논리를 세우는 경향이 있음. 이는 복잡한 문제에 대한 한쪽 편을 선택하고 그것을 따르는 것이 종종 필요하기 때문임.
     * 직접 제작 과정을 경험하면서 장인의 기술에 대한 새로운 존경심을 느낌. 복잡한 물리적 제약과 계획의 중요성을 인식함.
     * 기사에 나온 계단이 건축 규정을 준수하지 않을 수 있음. 계단을 만들 때는 여러 제약 조건을 고려해야 하며, 이를 위해 파라메트릭 CAD 시스템이 유용함.
     * 이전에 활발한 토론이 있었던 관련 스레드 링크 제공.
     * 불가능한 것을 시도할 때, 현재 자신이 지적으로 막혀 있을 수 있음을 인식하는 것은 두려운 일임. 그러나 끈기 있게 다른 방법을 모색하면 결국 가능성을 증명할 수 있음.
     * 실제 경험을 바탕으로 한 철학적 사고를 결합한 희귀하고 가치 있는 글임.
     * 페어 프로그래밍에 대한 저항을 극복하고, 협업을 통해 개인이 도달하기 어려운 해결책을 찾을 수 있음을 발견함. 좋은 팀워크는 마법과 같은 순간을 만들어냄.
"
"https://news.hada.io/topic?id=12017","당신이 할 수 있는 것들당신이 할 수 있는 것들 (2020)

학습과 의사결정

     * 연구원이나 전문 컨설턴트 고용 가능성
          + 연구원 Elizabeth Van Nostrand 고용 경험 언급
          + 연구원들이 할 수 있는 일: 아이디어 검증, 작업 검토, 의견 조사, 문헌 조사, 대화 상대 찾기 및 요약, 반대 또는 시장 조사, 큰 구매 옵션 찾기, 데이터셋 컴파일, 구글링으로 찾을 수 없는 정보 찾기
     * 연구원 찾는 방법:
          + 주제 관련 책이나 학술 기사 저자에게 이메일 보내기
          + 대학원생들은 종종 전문가보다 더 많은 지식 보유
          + 관심 있는 블로그 작가 찾기, 예를 들어 ""site:medium.com"" 구글 검색
          + 매칭 서비스 이용, 전문가 단체 디렉토리 검색
          + 주제 + ""blog"", ""podcast"", ""expert witness"", ""book"", ""consultant"", ""reddit"" 등으로 구글 검색
     * 연구원에게 지불할 금액:
          + 일부는 온라인에 가격 공개
          + 대학원생에게는 해당 학교의 대학원생 지급액 이상 지불 가능
          + 프로젝트에서 얻는 것이 있어야 함

대인 관계

     * 모르는 것을 인정하거나 의견이 없다고 말하기
     * 소위 '하얀 거짓말' 하지 않기, 특히 아이들에게
     * 알코올 음료 거절하기
     * 친구들로부터 상품/서비스 구매하기
     * 친구 방문을 위해 여행하기
     * 친구와 가까운 곳으로 이사하기
     * 여러 장소에서 여러 사람과 생활하기
          + 여러 집에서 부분적으로 방이나 소파 임대
          + 친구들과 타임쉐어 시스템 구성
          + 세금 관할 구역에 대한 유연성 제공
     * 유목 생활하기
     * 흥미로운 행사에 참여하고 싶다고 지인에게 물어보기
     * 더 나은 대화 상대가 되려고 노력하기
     * 블로그나 서브스택 시작하여 '작가'라고 말할 수 있게 되고, 이를 통해 낯선 사람과 대화 시작하기
     * 로맨스 추구: 데이트 신청, 친구들에게 소개팅 요청, 매치메이커 고용, 데이팅 앱 프리미엄 버전 구매, 커플 상담 받기
     * 자선 기부하기

지원과 책임

     * 코치 고용하기
          + 전문 분야, 개인 트레이너, 영양사, 명상 안내자 등
     * 물리 치료사 방문하기
     * 다목적 방지를 위한 특정 장치 구매
          + 킨들, Freewrite Traveller, 전용 음악 플레이어, 특정 목적의 전용 노트북 등
     * 인간 생산성 모니터 고용
          + 옆에서 앉아 작업을 감시하거나 자주 연락하여 작업 유지를 돕는 사람 고용
          + 예: focusmate.com, coding-pal.com

자원 최대 활용

     * 자신의 시간 가치 파악 후 그에 맞게 행동하고 지출하기
     * 소유물 수정하기
          + 성가신 LED 불빛 가리기, 로고 제거, 책에 필기하기, 태그 제거, 모니터 세로로 회전하기
     * 소유물 수리 또는 수리 받기
          + 신발, 옷, 짐, 가구, 자동차 등
     * 식료품 배달 서비스 이용
     * 청소 서비스 이용
          + 정기적 또는 대청소 필요 시
          + 카펫 청소, 환기구 청소, 공기 필터 교체 포함
     * 세탁 서비스 이용
     * 보육원 대신 보모 고용
     * 인사말 카드에 포스트잇에 글쓰기, 수령인이 카드 재사용 가능
     * 무료 업그레이드 또는 쿠폰 요청하기
     * 벌금을 지불로 간주하기
          + 예: 불법 주차 후 벌금을 주차 요금으로 생각하기
     * 부당한 벌금 이의 제기하기
     * 청구서 지불 거부 또는 재협상하기
     * 회사 임원에게 불만사항 이메일 또는 전화하기
     * 원격 의료 이용하기
     * 외모나 편안함을 위한 수술 고려하기
     * 집에서 수의사 서비스 받기
     * 임상 시험이나 연구에 자신 또는 반려동물 등록하기
     * 오디오북, 전자책 생성하기
     * 말로 하는 것을 문서화하기
     * 개인 비서 서비스 이용하기
     * 개인 스타일리스트 고용하기
     * 편안함을 위해 지출하기
          + 편리한 위치에 주차, 편안한 호텔, 대중교통 이용, 편안한 매트리스/신발 구매, 외모나 편안함을 위한 옷 구매, 목마를 때 생수 구매 등
     * 광고 없는 서비스 구매하기
          + 예: Spotify, YouTube
     * 난방/에어컨 켜기
          + 작은 불편함 해결에 몇 분 투자하기
          + 문에 기름칠하기

전문적인 활동

     * 채용 페이지 무시하고 직접 회사에 제안하기
     * 채용 제안에서 더 나은 조건 협상하기
     * 인상 요청하기
     * 입학 또는 졸업 요건 면제 요청하기
     * 학교/직장 그만두기 또는 휴학하기
     * 저축으로 새로운 시도하기
     * 저축으로 생활할 수 없다면 보조금 받기
          + Emergent Ventures, ACX Grants, Kickstarter 등
     * 자신을 위해 일하기
          + 코칭, 계약 등
     * 유명인이나 좋아하는 글을 쓴 사람에게 연락하기
     * 이메일 전달하기
     * 여러 번 후속 조치하기
     * 존경하는 사람이나 그룹에 공동 창업 제안하기
     * 계약 후 고용 제안하기
     * 전문가 이메일 사용법 배우기
     * 계약 후 고용 사용하기
     * 연구나 데이터 구매하기
     * 단순한 아이디어 시장 테스트하기
          + 관심 폼이 있는 랜딩 페이지 설정 및 저렴한 소셜 미디어 광고 캠페인 구매
     * 경쟁사와 합병하기
     * 공개적으로 일하기
          + 예: SpaceX의 모든 것을 생중계하기
     * 비정상적인 시장에 판매하기
          + ZetrOZ의 의료 기기 사례 언급
     * 가격 인상하기
     * 자신의 인터뷰 작성하여 기자에게 보내기
     * 사람들과의 직접 만남/방문을 통해 진지함 보여주기
     * 요청하기
          + 요청이 미친 것이라도 괜찮음, 나중에 ""미친 요청이라는 걸 알지만 항상 요청해보는 규칙이 있다""고 말할 수 있음

관련, 아마도 더 나은 목록들

     * 다양한 전략과 제품 구매 및 사용에 대한 추천 목록들

부록: 전문가 출처

     * 다양한 분야의 전문가를 찾을 수 있는 소스 목록과 각각의 대상 청중, URL 제공

부록: 연구 및 데이터 출처

     * 연구 및 데이터를 찾을 수 있는 주요 출처 목록

GN⁺의 의견

   이 글에서 가장 중요한 것은 개인이나 전문가를 고용하여 다양한 일을 할 수 있다는 것임. 이러한 정보는 초급 소프트웨어 엔지니어에게도 유용하며, 자신의 시간과 자원을 최대한 활용하는 방법을 배울 수 있는 기회를 제공함. 글은 사람들에게 일상적인 문제를 해결하고 삶의 질을 향상시킬 수 있는 창의적이고 실용적인 방법들을 제시함으로써 흥미롭고 매력적임.

        Hacker News 의견

     * ""이 글에 대한 토론도 HN에서 허용됨""
          + 해커뉴스에서는 ""2020년에 할 수 있는 것들""이라는 글에 대한 토론이 가능함. 이전에 올라온 글들에 대한 링크와 댓글 수가 제공됨.
     * ""수리할 수 있는 것들 - 옷""
          + 기술적인 내용이 아닌 해커뉴스 게시물에 대해 일부는 비판적이지만, 한 사용자는 옷을 수선하는 방법에 대한 글이 인생을 바꿨다고 함. 청바지에 구멍이 나면 새로 구매하는 대신 직접 수선하며, 이로 인해 수천 달러를 절약하고 만족감을 느낌.
     * ""혼자서 할 수 있는 것들""
          + 혼자 영화 보기, 식당 가기, 이벤트 참여하기 등에 대해 부정적인 시선이 있지만, 실제로는 흔한 일이며 모든 사람이 당신을 쳐다보지 않음을 강조함.
     * ""아툴 가완데의 글을 읽고""
          + 한 프로그래머는 어린 시절과 비교해 학습 능력이 정점에 달했는지 고민함. 처음 프로그래밍을 배우며 어려운 주제를 힘으로 극복했고, 시간이 지나면서 학습 속도가 느려졌지만, 최근 아툴 가완데의 글을 읽고 새로운 동기를 얻음. 음악, 수술, 소프트웨어 개발 간의 유사성을 발견하고, 기술 향상, 인내심 육성, 정신 건강 관리의 중요성을 깨달음. 코칭의 중요성을 인식하고, 프로그래밍과 무관한 코치와 치료사의 도움으로 학습 과정을 지속 가능하게 만드는 데 도움을 받음.
     * ""이 목록에 없는 것: 아무것도 하지 않기""
          + 이러한 목록은 때때로 인생을 충분히 살지 못하는 것처럼 느끼게 하지만, 실제로 모든 사람에게 해당되는 것은 아님. 개인의 선택에 대한 권한을 상기시키는 것은 좋지만, 각자의 방식대로 살아야 함을 강조함.
     * ""질문하기""
          + 질문을 통해 많은 정보, 서비스, 혜택, 접근성을 얻을 수 있음. 불편한 질문을 하는 것이 불편할 수 있지만, 대부분의 경우 후회하지 않으며, 더 많은 질문을 하려고 노력함.
     * ""친구와의 작은 베팅으로 일상적인 보험 만들기""
          + 친구와 작은 금액으로 베팅을 하여 일상적인 리스크에 대비할 수 있음. 예를 들어, 비행기 결항, 소풍 날 비, 중요한 회의 당일 아플 경우 등에 대비하여 베팅을 함. 문제를 해결하지는 못하지만, 위안이 될 수 있음.
     * ""데이트 신청하기부터 커플 상담까지""
          + 데이트 신청, 친구에게 소개받기, 매치메이커 고용, 데이팅 앱 프리미엄 버전 구매, 커플 상담 등 다양한 단계를 나열함.
     * ""인테리어 디자인 배우기""
          + 대부분의 시간을 보내는 공간을 멋지게 꾸미는 것은 시간을 잘 사용하는 방법임. 아니면 글에 나온 대로 누군가에게 그 일을 맡기는 것도 가능함.
     * ""친구에게서 상품/서비스 구매하기""
          + 친구와의 거래가 친구 관계를 해칠 수 있으므로 좋은 생각이 아닐 수 있음. 시장 가격으로 거래하더라도, 더 나은 서비스를 제공하거나 받을 것으로 기대하게 되며, 이로 인해 불만이 생길 수 있음. 컴퓨터/소프트웨어 개발자로서 친구의 웹사이트 제작이나 컴퓨터 수리 요청을 거절하는 것이 좋음. 이미 건강한 비즈니스 관계를 가진 친구와의 거래는 예외임.
     * ""당신도 해부할 수 있음""
          + 예상치 못한 조언으로, 특정 전문가의 도움을 받는 것에 대해 부정적인 의견을 제시함. 예를 들어, 개인 트레이너는 돈 낭비 목록에 속한다고 생각함. 또한, 예의 바르게 여러 번 후속 조치를 취하는 것이 사람들을 화나게 하지 않는다는 주장에 대해 반대 의견을 표현함.
"
"https://news.hada.io/topic?id=11978","샘 알트만, OpenAI의 CEO로 복귀합니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       샘 알트만, OpenAI의 CEO로 복귀합니다.

   OpenAI는 브렛 테일러(Bret Taylor) 의장 그리고 래리 서머스(Larry Summers) 및 애덤 디엔젤로(Adam D'Angelo) 멤버로 구성 된 새 이사회를 받아들이며 샘 알트만의 CEO 복귀에 합의 했습니다.

   래리 서머스?(재무부 장관 & 하버드 대학교 총장...) ㄷㄷ하군요

   여기서 좀 더 편하게 볼 수 있습니다.

   역대 최고의 마케팅 캠페인이라는 말이 재미있네요.

   와우... 결국 이렇게 됬군요
"
"https://news.hada.io/topic?id=11970",""오늘 하루를 그려줘 - AI 그림 일기" 개발후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ""오늘 하루를 그려줘 - AI 그림 일기"" 개발후기

     * 일상을 기록하면 매일의 감정과 경험이 색감과 이미지로 표현되는 AI 기반 감정 일기앱
     * 기술 스택
          + 프론트엔드: Flutter + Firebase + Fastlane
          + 백엔드: Nginx + Spring Boot + EC2 + RDS + R2
          + AI: Google Translate + Karlo + ChatGPT / DALL-E
     * Prompt Engineering
          + 유저가 선택한 감정이 느껴지는 이미지를 만드는 것을 1차 목표로 선정
          + 일기 내용까지 맥락으로 그림에 반영하는 것을 2차 목표
               o ChatGPT를 도입하여 일기를 프롬프트로 변환하도록 튜닝
          + 현재는 일정 사용량 무료로 쓸 수 있으며 Negative Prompt 및 매개 변수 튜닝까지 가능한 Karlo로 서비스

   일기를 대신 써주는 AI 사이트도 봤는데, 그것보다 훨씬 매력적이네요 제게는

   오우...엄청 잘 만들었네요 ㄷㄷ

   아이디어가 좋네요

   이스터에그 찾았는데, 너무 어려워요 ㅠㅠ
"
"https://news.hada.io/topic?id=12063","유아가 사랑하는 비행기를 위해 부모가 만든 레이더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      유아가 사랑하는 비행기를 위해 부모가 만든 레이더

요약: 아이를 위한 레이더 앱 개발기

     * 아이의 비행기 사랑: 저자의 2살 된 딸이 비행기에 매료되어 하늘의 비행기를 찾는 놀이에 흥미를 보임.
     * 문제 인식: 기존의 FlightRadar24 앱은 사용성이 떨어지고, 2차원 지도로는 실제 비행기의 위치 파악이 어려움.
     * 앱 아이디어: 주변 비행기를 레이더처럼 보여주는 앱 구상. 사용자의 방향에 맞춰 회전하고, 비행기의 높이에 따라 크기가 달라지며, 아이가 사용하기 쉬운 디자인이 필요함.
     * 개념 증명:
          + 방향 유지: iOS Core Location API를 사용하여 사용자의 방향 변화를 감지.
          + 비행 데이터 API: OpenSky Network의 REST API를 활용하여 실시간 비행 데이터 획득.
          + 위치 데이터: Core Location으로 사용자의 위치 데이터를 얻음.
          + 삼각측량: 비행기의 위치 데이터와 사용자의 위치를 비교하여 화면에 정확한 위치에 비행기를 표시.
     * MVP 개발:
          + 레이더 이름: 앱 이름 'Aviator'로 결정.
          + 지도 주석: iOS 17에서 지도 위에 비행기 모양의 주석을 쉽게 추가.
          + 비행기 크기 조정: 비행기의 높이에 따라 크기를 조정하여 화면에 표시.
     * 사용자 테스트: 딸과 함께 실제 비행기와 앱을 통해 발견한 비행기를 비교하며 테스트 진행.
     * 레이더 생성:
          + API 안정성: OpenSky API의 불안정성을 고려하여 클라이언트 측에서 재시도 로직 구현.
          + 지도 가리기: 지도를 숨기고 비행기 주석만 표시하여 레이더 효과 구현.
     * 앱 스토어 출시: 앱을 개발하고 앱 스토어에 출시 준비. 비행기 모양의 주석과 사용자의 방향을 표시하는 레이더 UI로 앱을 완성.
     * GN⁺의 의견: 이 글에서 가장 중요한 것은 아이의 흥미를 바탕으로 한 창의적인 앱 개발 과정이며, 소프트웨어 개발의 즐거움과 부모로서의 애정이 결합된 점이 흥미롭다.

        Hacker News 의견

     * 프로젝트의 디자인이 원래 레이더 디스플레이의 강한 영향을 받음을 흥미롭게 생각함. 아이가 실제 CRT나 ASR-9 PPI 디스플레이를 접할 일은 없겠지만, 이를 시뮬레이션하기 위해 많은 노력을 기울임.
     * 딸과 함께하는 건전한 활동으로, 가까운 국제공항의 활주로 끝에 가서 비행기가 착륙하는 모습을 관찰하는 것을 제안함. 아이가 '레이더'를 사용해 오는 비행기를 확인할 수 있으며, 이는 아이들에게 큰 즐거움을 줌.
     * 어린 아이들과 해외여행을 가지 말라는 말에 동의하지 않음. 아이와 함께 브라질 여행을 갔고, 택시, 해적선, 알파인 슬라이드, 리우데자네이루 식물원 등 다양한 경험을 함. 아이가 기억하지 못할지라도 그 경험들은 중요함.
     * 몇 년 후에 아이에게 ADS-B 기반 웹 데이터와 실제 레이더 감지 기술의 차이를 설명해야 할 것임. 아이는 앱이 실제와 다르다고 기억할 것임.
     * 귀여운 비행기를 좋아하는 아이와 함께 있으면, 승무원이 조종실을 둘러볼 수 있도록 초대할 수도 있음. NASA 오렌지 점프슈트는 조종실 입장의 '여권'과 같으며, 승무원들이 아이들보다 더 흥분함.
     * 초기 릴리스에서 디스플레이 색상 변경 기능이 필수였다는 것은 대상 사용자의 요구를 잘 이해하고 있음을 보여줌. 3살 아이들은 색상 선택기가 포함된 장난감을 좋아함.
     * 조종사로서 이 프로젝트를 놀라워함.
     * 아이를 위한 비행 로그북을 만드는 것이 '언젠가 해야 할 일' 목록에 있음. 승무원들은 이런 것을 좋아하며, 아이는 로그북을 돌려받을 때 항상 기뻐함.
     * 디자인을 좋아하지만, 한 단계 더 나아가 API를 사용하지 않고 1090 Mhz에서 ADB 주파수로 조율된 SDR을 사용해 직접 데이터를 수집하면 진정한 레이더가 될 것임.
     * ""앱은 집에서 만든 식사가 될 수 있다""는 관련 글을 인용하며, 가족만을 위해 사라진 소셜 네트워크 앱 Tapstack을 복제한 사례를 소개함.
"
"https://news.hada.io/topic?id=12007","새 AMD Zen4 쓰레드리퍼가 Ubuntu에서 윈도우 11보다 더 높은 성능을 발휘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            새 AMD Zen4 쓰레드리퍼가 Ubuntu에서 윈도우 11보다 더 높은 성능을 발휘

우분투 리눅스, 윈도우 11보다 AMD Zen 4 스레드리퍼에서 약 20% 더 높은 성능 발휘

     * HP Z6 G5 A 워크스테이션에 탑재된 새로운 96코어 AMD Ryzen 스레드리퍼 PRO 7995WX Zen 4 프로세서의 성능을 리뷰하는 과정에서 HP가 조정한 마이크로소프트 윈도우 11과 리눅스의 성능 비교에 대한 호기심이 생김
     * 리눅스는 오랫동안 AMD Ryzen 스레드리퍼 프로세서에서 마이크로소프트 윈도우보다 성능 우위를 점해왔으며, 특히 고코어 수 서버에서 리눅스 커널 스케줄러가 윈도우보다 더 잘 대응함
     * 새로운 Zen 4 스레드리퍼의 성능 차이에 대한 궁금증을 해결하기 위해 96코어 / 192스레드 프로세서인 스레드리퍼 PRO 7995WX로 극한의 벤치마크를 수행
     * HP가 구성한 윈도우 11 프로가 사전 설치된 HP Z6 G5 A 리뷰 유닛을 사용하여 하드웨어 벤더가 검증한 윈도우 성능을 살펴봄
     * 윈도우 벤치마크를 모두 실행한 후, 우분투 23.10을 사용하여 리눅스 벤치마크를 진행함
     * 우분투 23.10의 성능은 인텔의 클리어 리눅스를 제외하고는 대부분의 현대 리눅스 배포판과 유사할 것으로 예상됨
     * 모든 테스트에서 사용된 HP Z6 G5 A는 기본 주파수의 Ryzen 스레드리퍼 PRO 7995WX, 8 x 16GB DDR5-5200 Hynix RDIMMs, Samsung MZVL21T0HCLR-00BH1 NVMe SSD, NVIDIA GeForce RTX A4000 16GB 그래픽으로 구성
     * 최신 윈도우 11 프로 빌드 22631 (H2'23)와 우분투 23.10의 안정적인 릴리스 업데이트를 사용하여 96코어 / 192스레드 Zen 4 워크스테이션에서의 윈도우와 우분투 리눅스 성능을 비교

GN⁺의 의견

   이 기사에서 가장 중요한 점은 우분투 리눅스가 최신 AMD Zen 4 스레드리퍼 프로세서를 탑재한 시스템에서 윈도우 11에 비해 약 20% 더 높은 성능을 발휘한다는 것이다. 이는 리눅스가 고성능 컴퓨팅(HPC) 시스템과 같은 고코어 수 서버에서 더 우수한 성능을 낼 수 있는 운영체제임을 시사한다. 소프트웨어 엔지니어들에게 이러한 성능 비교 결과는 시스템 최적화와 효율적인 리소스 관리를 위한 중요한 정보를 제공한다. 또한, 리눅스와 윈도우 간의 성능 차이를 이해하고자 하는 사용자들에게 흥미로운 내용이 될 것이다.

        Hacker News 의견

     * AMD가 리눅스 커널과 스케줄러를 자신들의 아키텍처에 맞게 수정하여 최대 성능을 끌어낼 수 있음에 반해, 마이크로소프트는 자체적으로 이를 해결하기 위한 의지를 가질 것인지는 불투명함.
          + 고가의 HEDT 워크스테이션을 구매하는 기업들이 실제로 윈도우를 사용하는지, 아니면 리눅스만 사용하여 윈도우의 성능 문제가 큰 이슈가 아닐지 궁금함.
          + ""Crysis 게임을 소프트웨어 렌더링으로 실행할 수 있을까?""라는 농담도 있음.
     * 리눅스를 사용하여 블렌더 애니메이션을 렌더링할 때 윈도우 10보다 10% 빠른 성능을 보여줬으며, 8일 이상 걸리는 렌더링 시간을 고려하면 이는 큰 이점임.
     * 데스크탑에서의 리눅스 채택은 큰 뉴스가 아니지만, 유사한 작업을 수행할 때 윈도우보다 리눅스의 사용자 경험이 더 나음.
          + 더 나은 성능은 필수적이지만, 데스크탑 사용자 채택을 촉진하기 위해서는 다른 설득력 있는 이유들이 필요함.
     * 윈도우가 데스크탑 사용에서 전반적으로 느리게 느껴지는 이유는 분석 추적 레이어가 있어서 특정 성능이 필요한 프로그램에서만 이 레이어를 '터널링'하는 것이 아닌가 하는 의심이 있음.
     * 윈도우, MacOS, 리눅스 사이에 갇히지 않는 미래를 희망함.
          + 일반적인 컴퓨팅에는 훌륭하지만, 특정 작업에 더 잘 맞는 경량 펌웨어를 사용하여 동일한 하드웨어를 사용할 수 있으면 좋겠음.
     * 리눅스 데스크탑에 현대적인 권한 및 특권 시스템을 도입하는 Snap이나 Flatpak과 같은 시스템을 커뮤니티가 지지하기를 바람.
          + 어떤 배포판이 위치, 마이크, 카메라, 네트워크 등에 대한 액세스를 요청하기 전에 사용자의 동의를 구하는지 추천해달라는 질문도 있음.
     * 윈도우 10을 포기해야 할 날을 대비해 우분투를 사용해보고 있으나, 리눅스는 명령어를 많이 입력해야 하고 시스템이 무엇을, 어떻게 하는지에 대한 이해가 필요함.
          + 윈도우와 OSX는 대부분 문제없이 작동했고, 리눅스는 때때로 시스템과 싸우는 것 같은 느낌을 줌.
     * 윈도우 작업 컴퓨터에서 C++ 프로젝트를 컴파일하는 데 3분이 걸리지만, 동일한 기계에서 리눅스 VM은 45초 만에 빌드함.
          + 이 경험만으로도 윈도우에 대해 알아야 할 모든 것을 알 수 있음.
     * 컴파일러와 런타임 라이브러리의 효율성 차이에서 이러한 성능 차이가 발생한다고 가정하는 것이 더 타당하지 않을까 하는 의문이 있음.
          + 최종 사용자에게는 스택의 어느 부분이 더 잘 조정되었는지 중요하지 않지만, ""윈도우 대 리눅스""로 프레임을 씌우는 것은 추가 증거 없이는 부당함.
     * 윈도우 11을 실행하는 게임용 컴퓨터는 파일 시스템 탐색이나 압축 작업 시 느려짐을 느낌.
          + 반면 데비안 12를 실행하는 워크스테이션은 훨씬 빠르게 느껴짐. 12세대와 13세대의 차이가 아닐 수도 있음.
"
"https://news.hada.io/topic?id=12036","HN에 묻다: 새로 실명한 친척을 위한 휴대폰 설정 방법은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN에 묻다: 새로 실명한 친척을 위한 휴대폰 설정 방법은?

시각 장애인을 위한 스마트폰 사용 지원

     * 시각 장애가 있는 할아버지가 브레일을 배우지 못한 상태에서 고립된 경험을 하고 있음.
     * 휴일 동안 방문한 손자/손녀가 할아버지가 팟캐스트, 오디오북, WhatsApp 등을 다시 즐길 수 있도록 돕고 싶어함.
     * 할아버지는 현재 아이폰을 사용 중이나, 안드로이드 폰이 시각 장애인에게 더 적합하다면 기꺼이 전환을 도울 의향이 있음.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 시각 장애인이 기술을 통해 일상 생활에 참여할 수 있도록 지원하는 방법에 대한 관심과 도움의 필요성임.
     * 시각 장애인이 스마트폰을 사용하여 소통하고 정보를 접하는 것은 독립성을 유지하고 사회적 고립을 예방하는 데 매우 중요함.
     * 이 글이 흥미로운 이유는 기술이 어떻게 사람들의 삶을 개선하고, 가족 구성원들이 서로를 돕기 위해 어떤 노력을 하는지를 보여주기 때문임.

        Hacker News 의견

     * 시각 장애인을 돕는 과정에서 배운 점들:
          + 모든 시각 장애인이 아이폰을 사용함
          + 가능하다면 비밀번호 기능을 비활성화
          + VoiceOver 활성화 및 사용법 숙지(노인에게는 다소 어려울 수 있음)
          + 학습 파트너의 도움이 중요하며, 시각 장애인과 함께 폰을 사용하는 법을 배우면 문제 해결에 도움
          + 시각 장애인이 아이폰을 사용하는 방법에 대한 비디오 시청 권장
          + 노인에게는 아이패드가 편리하며, 아이폰과 사용성이 거의 동일해 전환하기 쉬움
          + 영화 감상을 위해 Greta 앱 사용 권장, 가족과 함께 영화를 볼 수 있게 함
          + 인내심을 가질 것, VoiceOver는 말하기 속도 조절 등 사용자의 성장에 맞춰 조정 가능
     * 시각 장애인을 돕는 조직과 연결하는 것이 좋음:
          + 시각 장애인을 위한 조직은 적응과 보조 기술 사용 훈련에 도움을 줌
          + 시각 장애의 정도에 따라 기술 도구가 다르며, 시각 장애인 중 10%만이 점자를 알고 있음
          + 보조 기술에 대한 CSUN 컨퍼런스 참여 권장
     * 필수 앱 추천:
          + Be My Eyes: 사진을 찍어 설명을 들을 수 있고, 필요시 무료로 자원봉사자에게 도움 요청 가능
          + Seeing AI: Microsoft에서 제공하는 앱으로, 방의 밝기, 바코드 스캐너, 색상 분석기, 문서 리더, 화폐 인식 등 다양한 기능 제공
          + 시각 장애인을 위한 도서관 서비스 이용 권장, 미국의 경우 Bard Mobile 앱을 통해 오디오북 무료 다운로드 가능
     * 시각 장애인 노인에게 새로운 기술을 가르치는 것은 어려울 수 있음:
          + Siri, 오디오북 플레이어, Google Home 등이 유용
          + 정기적인 소통이 중요하며, 짧은 방문이나 전화 통화가 외로움을 줄이는 데 도움
     * 이전 해커뉴스 토론을 참고할 것:
          + 이전 토론에서 유용한 조언을 얻을 수 있음
          + Siri를 통한 음성 명령 사용 권장, Alexa 설정 시 언어 문제가 있을 수 있으나 다른 사람들은 성공적으로 사용
     * 시각 장애인을 위한 팁:
          + 아이폰 사용 권장
          + 다른 시각 장애인의 도움이 가장 큰 도움이 됨, VoiceOver를 사용하여 화면을 볼 필요 없이 조작
     * 시각 장애인을 위한 서비스 및 장비:
          + 미국 내 시각 장애인 연합에 연락하여 일상 생활 활동 지원 요청
          + 집으로 방문하여 지속적인 훈련을 제공하는 것이 유익
     * 시각 장애인을 위한 안드로이드 폰 및 NFC 태그 사용 권장:
          + BlindShell 폰과 NFC 태그를 이용한 물건 식별
          + Alexa를 통한 다양한 기능 사용 가능
     * Be My Eyes 앱 추천:
          + 자원봉사자에게 도움을 요청할 수 있는 앱, 다양한 상황에서 도움 제공
     * Seeing AI 앱 소개:
          + 주변 사람, 텍스트, 물체를 설명해주는 AI 기반 앱
"
"https://news.hada.io/topic?id=12041","[2023/11/20 ~ 11/26] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2023/11/20 ~ 11/26] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

  개요

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주에 선정된 논문들은 주로 'Large Language Models(LLMs)', 'Reasoning and Attention in AI System', 그리고 'Artificial Intelligence in Medical Domain'과 관련된 경향이 있습니다.
     * 특히, 'Reasoning and Attention in AI System'에 대한 주제가 두드러지게 나타나고 있습니다. 이는 인공지능이 단순히 패턴 인식을 넘어서, 인간과 유사한 추론 및 문제 해결 능력을 갖추려는 시도를 반영합니다.
     * 의료 분야에서 인공지능의 활용에 관한 연구도 주목할 만합니다. 'LLMs as Collaborators for Medical Reasoning'은 이 분야의 중요한 예로서, 의료 데이터를 다루는 데 있어서 LLM(대규모 언어 모델)의 응용 가능성을 탐구하고 있습니다.
     * 요약하자면, 이번 주 선정된 논문들은 복잡한 추론 능력과 인간과 유사한 어텐션 집중 메커니즘의 개발, 그리고 의료 분야에서의 인공지능 응용에 초점을 맞춘 연구가 많았음을 보여주며, 이는 인공지능 기술의 발전 방향을 나타내는 중요한 지표로 해석할 수 있습니다.


  (여러분에게도 필요할 수 있는) 시스템 2 어텐션/ System 2 Attention (is something you might need too)

    논문 소개

     * LLM의 추론 및 명령 추종 기능을 활용하여 주의해야 할 내용을 결정하고, 입력 컨텍스트를 재생성하여 재생성된 컨텍스트에 주의하기 전에 관련 부분만 포함하도록 하여 모델의 최종 응답을 유도하며, 사실성을 높이고 QA 및 수학 세계 문제와 같은 작업에서 표준 어텐션 기반 LLM보다 우수한 성능을 발휘합니다.

     Leverages the reasoning and instruction following capabilities of llms to decide what to attend to; it regenerates input context to only include relevant portions before attending to the regenerated context to elicit the final response from the model; increases factuality and outperforms standard attention-based llms on tasks such as qa and math world problems.

    논문 초록

     * 트랜스포머 기반 대규모 언어 모델(LLM)의 소프트 어텐션은 문맥과 무관한 정보를 잠재적 표현에 통합하기 쉬우며, 이는 다음 토큰 생성에 악영향을 미칩니다. 이러한 문제를 해결하기 위해 저희는 자연어로 추론하고 지침에 따라 주의해야 할 사항을 결정하는 LLM의 기능을 활용하는 시스템 2 어텐션(S2A)를 도입했습니다. S2A는 입력 컨텍스트를 관련 부분만 포함하도록 재생성하고, 재생성된 컨텍스트에 어텐션을 적용해 최종 응답을 유도합니다. 실험 결과, S2A는 의견이나 관련 없는 정보가 포함된 세 가지 작업, 즉 QA, 수학 단어 문제, 긴 형식 생성에서 사실성과 객관성을 높이고 동어반복성을 낮추는 등 표준 어텐션 기반 LLM보다 뛰어난 성능을 보였습니다.

     Soft attention in Transformer-based Large Language Models (LLMs) is susceptible to incorporating irrelevant information from the context into its latent representations, which adversely affects next token generations. To help rectify these issues, we introduce System 2 Attention (S2A), which leverages the ability of LLMs to reason in natural language and follow instructions in order to decide what to attend to. S2A regenerates the input context to only include the relevant portions, before attending to the regenerated context to elicit the final response. In experiments, S2A outperforms standard attention-based LLMs on three tasks containing opinion or irrelevant information, QA, math word problems and longform generation, where S2A increases factuality and objectivity, and decreases sycophancy.

    논문 링크

   https://arxiv.org/abs/2311.11829

    더 읽어보기

   https://x.com/jaseweston/status/1726784511357157618


  긴 컨텍스트의 대규모 언어 모델에서 트랜스포머 아키텍처의 발전: 종합적인 설문 조사 / Advancing Transformer Architecture in Long-Context Large Language Models: A Comprehensive Survey

    논문 소개

     * 사전 학습에서 추론에 이르는 모든 단계에서 긴 컨텍스트 기능을 최적화하는 트랜스포머 아키텍처 모듈을 개선하기 위한 방법론에 대한 개요입니다.

     An overview of the methodologies for enhancing transformer architecture modules that optimize long-context capabilities across all stages from pre-training to inference.

    논문 초록

     * ChatGPT가 촉발한 트랜스포머 기반 대규모 언어 모델(LLM)은 인공지능(AGI)을 향한 혁신적인 길을 열었으며 지식 기반, 휴먼 인터페이스, 동적 에이전트 등 다양한 영역에 적용되고 있습니다. 그러나 리소스의 제약을 받는 현재의 많은 LLM은 주로 짧은 텍스트를 대상으로 사전 학습되어 실제 환경에서 흔히 접하는 긴 문맥의 프롬프트에는 효율성이 떨어진다는 한계가 존재합니다. 이 논문에서는 사전 학습에서 추론에 이르는 모든 단계에서 긴 문맥 기능을 최적화하기 위해 Transformer 기반 LLM의 모델 아키텍처 발전에 초점을 맞춘 포괄적인 설문 조사를 제시합니다. 먼저 현재 Transformer 기반 모델에서 긴 컨텍스트 입출력을 처리할 때 발생하는 문제점을 파악하고 분석합니다. 그런 다음 이러한 문제를 해결하기 위해 아키텍처에 대한 Transformer 업그레이드 환경을
       탐색할 수 있는 전체적인 분류법을 주로 제공합니다. 그 다음에는 데이터 세트, 메트릭, 기준 모델 등 장기 컨텍스트 LLM에 맞춰 널리 사용되는 평가 필수 요소에 대한 조사와 함께 여러 단계에서 LLM의 효율성과 효과를 강화하는 라이브러리, 시스템, 컴파일러와 같은 놀라운 최적화 툴킷을 소개합니다. 마지막으로, 이 분야의 주요 과제와 향후 연구를 위한 잠재적 방안에 대해 논의합니다. 또한 관련 문헌을 큐레이션하여 실시간으로 업데이트하는 저장소(https://github.com/Strivin0311/long-llms-learning)를 구축했습니다.

     With the bomb ignited by ChatGPT, Transformer-based Large Language Models (LLMs) have paved a revolutionary path toward Artificial General Intelligence (AGI) and have been applied in diverse areas as knowledge bases, human interfaces, and dynamic agents. However, a prevailing limitation exists: many current LLMs, constrained by resources, are primarily pre-trained on shorter texts, rendering them less effective for longer-context prompts, commonly encountered in real-world settings. In this paper, we present a comprehensive survey focusing on the advancement of model architecture in Transformer-based LLMs to optimize long-context capabilities across all stages from pre-training to inference. We firstly delineate and analyze the problems of handling long-context input and output with the current Transformer-based models. Then, we mainly offer a holistic taxonomy to navigate the landscape of Transformer upgrades on architecture to solve these problems. Afterward, we provide
     the investigation on wildly used evaluation necessities tailored for long-context LLMs, including datasets, metrics, and baseline models, as well as some amazing optimization toolkits like libraries, systems, and compilers to augment LLMs' efficiency and efficacy across different stages. Finally, we further discuss the predominant challenges and potential avenues for future research in this domain. Additionally, we have established a repository where we curate relevant literature with real-time updates at https://github.com/Strivin0311/long-llms-learning.

    논문 링크

   https://arxiv.org/abs/2311.12351

    더 읽어보기

   https://x.com/omarsar0/status/1727358484360945750


  PaSS: 병렬 투기적 샘플링 / PaSS: Parallel Speculative Sampling

    논문 소개

     * 투기적 샘플링과 병렬 디코딩의 변형을 기반으로 LLM의 추론 시간을 단축하는 접근 방식으로, $O(d_{emb})$ 만큼의 추가 파라미터만 학습하여 상당한 속도 향상(최대 30%)을 달성합니다.

     Approach to reduce inference time of llms based on a variant of speculative sampling and parallel decoding; achieves significant speed-ups (up to 30%) by only learning as little as o(d_emb) additional parameters.

    논문 초록

     * 언어 모델의 크기를 수백억 개의 파라미터로 확장하면 다양한 작업에서 인상적인 성능을 발휘할 수 있습니다. 생성 시 이러한 모델은 자동 회귀적으로 사용되므로 생성된 각 토큰에 대해 포워드 패스가 필요하며, 따라서 메모리에서 전체 파라미터 세트를 읽어야 합니다. 이러한 메모리 액세스는 생성 시 주요 병목 현상을 일으키며, 모델 크기가 커질수록 병목 현상은 더욱 심해집니다. 또한 여러 토큰에 대한 포워드 패스를 병렬로 실행하면 하나의 토큰에 대한 포워드 패스와 거의 동일한 시간이 걸리는 경우가 많습니다. 이 두 가지 관찰은 두 번째 작은 모델을 사용하여 몇 개의 토큰 초안을 작성한 다음 큰 모델의 단일 포워드 패스를 사용하여 검증하거나 거부하는 투기적 샘플링의 개발로 이어집니다. 안타깝게도 이 방법은 동일한 토큰화기를 공유하는
       두 개의 모델이 필요하므로 채택이 제한됩니다. 이에 대한 대안으로, 저희는 계산 비용이나 두 번째 모델이 필요 없이 단일 모델에서 여러 토큰을 초안으로 작성하는 방법으로 병렬 디코딩을 사용할 것을 제안합니다. 이 접근 방식은 동시에 생성될 단어를 표시하는 추가 입력 토큰만 필요합니다. 최대 $30%$ 의 속도 향상이라는 유망한 성능을 보여주면서도 $O(d_{emb})$ 만큼의 추가 매개변수만 필요합니다.

     Scaling the size of language models to tens of billions of parameters has led to impressive performance on a wide range of tasks. At generation, these models are used auto-regressively, requiring a forward pass for each generated token, and thus reading the full set of parameters from memory. This memory access forms the primary bottleneck for generation and it worsens as the model size increases. Moreover, executing a forward pass for multiple tokens in parallel often takes nearly the same time as it does for just one token. These two observations lead to the development of speculative sampling, where a second smaller model is used to draft a few tokens, that are then validated or rejected using a single forward pass of the large model. Unfortunately, this method requires two models that share the same tokenizer and thus limits its adoption. As an alternative, we propose to use parallel decoding as a way to draft multiple tokens from a single model with no computational
     cost, nor the need for a second model. Our approach only requires an additional input token that marks the words that will be generated simultaneously. We show promising performance (up to $30%$ speed-up) while requiring only as few as $O(d_{emb})$ additional parameters.

    논문 링크

   https://arxiv.org/abs/2311.13581

    더 읽어보기

   https://x.com/omarsar0/status/1728066181796418009


  Mirasol3B: 시간 및 상황별 모달리티를 위한 다중 모달 자동 회귀 모델 / Mirasol3B: A Multimodal Autoregressive model for time-aligned and contextual modalities

    논문 소개

     * 오디오, 비디오, 텍스트를 아우르는 학습을 위한 멀티모달 모델로, 멀티모달 모델링을 별도의 집중된 자동 회귀 모델로 분리하고 입력은 모달리티에 따라 처리되며, 다른 모델에 비해 긴 비디오를 처리할 수 있고 비디오 QA, 긴 비디오 QA, 오디오-비디오-텍스트 벤치마크에서 최신 접근 방식보다 우수한 성능을 발휘합니다.

     A multimodal model for learning across audio, video, and text which decouples the multimodal modeling into separate, focused autoregressive models; the inputs are processed according to the modalities; this approach can handle longer videos compared to other models and it outperforms state-of-the-art approach on video qa, long video qa, and audio-video-text benchmark.

    논문 초록

     * 멀티모달 학습의 주요 과제 중 하나는 이질적인 양식(예: 비디오, 오디오, 텍스트)을 결합해야 한다는 점입니다. 예를 들어, 비디오와 오디오는 텍스트보다 훨씬 빠른 속도로 획득되며 시간적으로도 거의 일치합니다. 제목이나 설명과 같이 글로벌 컨텍스트로 제공되는 텍스트와 동기화되지 않는 경우가 많습니다. 또한 비디오 및 오디오 입력은 훨씬 더 큰 용량을 가지며 비디오 길이가 길어짐에 따라 증가하기 때문에 당연히 이러한 양식 전용 컴퓨팅이 더 많이 필요하고 장거리 종속성 모델링이 더 어려워집니다. 여기서는 멀티모달 모델링을 분리하여 각 모달리티의 특성에 따라 입력을 처리하는 별도의 집중된 자동 회귀 모델로 나눕니다. 시간 동기화된 모달리티(오디오 및 비디오)를 위한 자동 회귀 구성 요소와 시간적으로 반드시 정렬되지는 않지만
       순차적인 컨텍스트 모달리티를 위한 자동 회귀 구성 요소로 구성된 Mirasol3B라는 다중 모달 모델을 제안합니다. 비디오-오디오 입력의 긴 시퀀스를 처리하기 위해 비디오와 오디오 시퀀스를 연속적인 스니펫으로 분할하고 그 표현을 자동 회귀적으로 처리할 것을 제안합니다. 이를 위해 오디오-비디오 정보를 시간 프레임 내에서 공동으로 모델링하는 결합기(Combiner) 메커니즘을 제안합니다. 결합기는 원시 시공간 신호에서 오디오 및 비디오 특징을 추출하는 방법을 학습한 다음, 이러한 특징을 융합하여 간결하면서도 표현력이 풍부한 스니펫별 표현을 생성하는 방법을 학습합니다. 이러한 접근 방식은 잘 정립된 멀티모달 벤치마크에서 훨씬 더 큰 규모의 모델을 능가하는 최첨단 성능을 달성합니다. 또한 간결한 표현을 학습하고 오디오-비디오 피처 표현의
       시퀀스 길이를 제어하며 시간 종속성을 모델링함으로써 미디어 입력의 높은 연산 수요를 효과적으로 처리합니다.

     One of the main challenges of multimodal learning is the need to combine heterogeneous modalities (e.g., video, audio, text). For example, video and audio are obtained at much higher rates than text and are roughly aligned in time. They are often not synchronized with text, which comes as a global context, e.g., a title, or a description. Furthermore, video and audio inputs are of much larger volumes, and grow as the video length increases, which naturally requires more compute dedicated to these modalities and makes modeling of long-range dependencies harder. We here decouple the multimodal modeling, dividing it into separate, focused autoregressive models, processing the inputs according to the characteristics of the modalities. We propose a multimodal model, called Mirasol3B, consisting of an autoregressive component for the time-synchronized modalities (audio and video), and an autoregressive component for the context modalities which are not necessarily aligned in time
     but are still sequential. To address the long-sequences of the video-audio inputs, we propose to further partition the video and audio sequences in consecutive snippets and autoregressively process their representations. To that end, we propose a Combiner mechanism, which models the audio-video information jointly within a timeframe. The Combiner learns to extract audio and video features from raw spatio-temporal signals, and then learns to fuse these features producing compact but expressive representations per snippet. Our approach achieves the state-of-the-art on well established multimodal benchmarks, outperforming much larger models. It effectively addresses the high computational demand of media inputs by both learning compact representations, controlling the sequence length of the audio-video feature representations, and modeling their dependencies in time.

    논문 링크

   https://arxiv.org/abs/2311.05698

    더 읽어보기

   https://x.com/GoogleAI/status/1724553024088191211


  Orca 2: 작은 언어 모델에 추론하는 방법 가르치기 / Orca 2: Teaching Small Language Models How to Reason

    논문 소개

     * 더 작은 언어 모델에 추론을 가르치는 접근 방식을 제안합니다. 구체적으로 단계별 처리, 회상 후 생성, 회상 이유 생성, 추출 생성 및 직접 답변 방법과 같은 추론 기술을 사용하는 것으로 생각되며, 제로 샷 설정에서 고급 추론 능력을 테스트하는 복잡한 작업에서 평가할 때 비슷한 크기의 모델을 능가하고 5-10배 큰 모델과 비슷하거나 더 나은 성능 수준을 달성하는 것으로 알려져 있습니다.

     Proposes an approach to teach smaller language models to reason; specifically, the lm is thought to use reasoning techniques, such as step-by-step processing, recall-then-generate, recall-reason-generate, extract-generate, and direct-answer methods; outperforms models of similar size and attains performance levels similar or better to those of models 5-10x larger, as assessed on complex tasks that test advanced reasoning abilities in zero-shot settings.

    논문 초록

     * Orca 1은 설명 추적과 같은 풍부한 신호로부터 학습하여 BigBench Hard 및 AGIEval과 같은 벤치마크에서 기존의 인스트럭션 튜닝 모델보다 뛰어난 성능을 발휘합니다. Orca 2에서는 개선된 학습 신호가 어떻게 소규모 LM의 추론 능력을 향상시킬 수 있는지 계속 연구하고 있습니다. 소규모 LM을 학습하는 연구는 종종 더 유능한 모델의 결과를 복제하기 위해 모방 학습에 의존해 왔습니다. 하지만 모방 학습을 지나치게 강조하면 작은 모델의 잠재력을 제한할 수 있다고 주장합니다. 저희는 소규모 LM이 대형 모델에서 사용하는 것과는 다른, 다양한 작업에 대해 다른 솔루션 전략을 사용하도록 가르치고자 합니다. 예를 들어, 큰 모델은 복잡한 과제에 대한 직접적인 해답을 제공할 수 있지만 작은 모델은 그렇지 않을 수 있습니다. Orca 2에서는 모델에 다양한 추론
       기법(단계별, 회상 후 생성, 회상 후 이유 생성, 직접 답변 등)을 학습시킵니다. 더 중요한 것은 모델이 각 과제에 가장 효과적인 솔루션 전략을 결정하는 방법을 학습하도록 돕는 것입니다. 15개의 다양한 벤치마크(약 100개의 작업과 36,000개 이상의 고유 프롬프트에 해당)로 구성된 종합적인 세트를 사용하여 Orca 2를 평가합니다. Orca 2는 제로 샷 환경에서 고급 추론 능력을 테스트하는 복잡한 과제에서 평가한 결과 비슷한 크기의 모델을 크게 능가하고 5-10배 더 큰 모델과 비슷하거나 더 나은 성능 수준을 달성했습니다. 더 작은 LM의 개발, 평가 및 조율에 대한 연구를 지원하기 위해 Orca 2 가중치를 aka.ms/orca-lm에서 공개적으로 사용할 수 있게 합니다

     Orca 1 learns from rich signals, such as explanation traces, allowing it to outperform conventional instruction-tuned models on benchmarks like BigBench Hard and AGIEval. In Orca 2, we continue exploring how improved training signals can enhance smaller LMs' reasoning abilities. Research on training small LMs has often relied on imitation learning to replicate the output of more capable models. We contend that excessive emphasis on imitation may restrict the potential of smaller models. We seek to teach small LMs to employ different solution strategies for different tasks, potentially different from the one used by the larger model. For example, while larger models might provide a direct answer to a complex task, smaller models may not have the same capacity. In Orca 2, we teach the model various reasoning techniques (step-by-step, recall then generate, recall-reason-generate, direct answer, etc.). More crucially, we aim to help the model learn to determine the most
     effective solution strategy for each task. We evaluate Orca 2 using a comprehensive set of 15 diverse benchmarks (corresponding to approximately 100 tasks and over 36,000 unique prompts). Orca 2 significantly surpasses models of similar size and attains performance levels similar or better to those of models 5-10x larger, as assessed on complex tasks that test advanced reasoning abilities in zero-shot settings. make Orca 2 weights publicly available at aka.ms/orca-lm to support research on the development, evaluation, and alignment of smaller LMs

    논문 링크

   https://arxiv.org/abs/2311.11045

    더 읽어보기

   https://x.com/omarsar0/status/1726990087399915995


  GPQA: 대학원 수준의 구글 검증 Q&A 벤치마크 / GPQA: A Graduate-Level Google-Proof Q&A Benchmark

    논문 소개

     * 생물학, 물리학, 화학 분야의 도메인 전문가가 작성한 448개의 객관식 문제로 구성된 대학원 수준의 Google 검증 QA 벤치마크를 제안합니다. 가장 강력한 GPT-4 기반 기준은 39%의 정확도를 달성하며, 이 벤치마크는 확장 가능한 감독 실험을 제공하여 인간의 능력을 능가하는 최신 AI 시스템으로부터 신뢰할 수 있고 진실된 정보를 얻을 수 있도록 지원합니다.

     Proposes a graduate-level google-proof qa benchmark consisting of 448 multiple-choice questions written by domain experts in biology, physics, and chemistry; the strongest gpt-4 based baseline achieves 39% accuracy; this benchmark offers scalable oversight experiments that can help obtain reliable and truthful information from modern ai systems that surpass human capabilities.

    논문 초록

     * 생물학, 물리학, 화학 분야의 전문가들이 출제한 448개의 객관식 문제로 구성된 고난이도 데이터셋인 GPQA를 제공합니다. 해당 분야의 박사 학위를 취득했거나 취득 중인 전문가의 정답률은 65%(전문가가 돌이켜보면 명백한 실수를 제외하면 74%)에 달하는 반면, 고도로 숙련된 비전문가 검증자는 평균 30분 이상 웹에 제한 없이 액세스했음에도 불구하고 정답률이 34%에 불과했습니다(즉, 문제가 'Google 검증'을 거쳤음). 가장 강력한 GPT-4 기반 기준선도 39%의 정확도를 달성하는 등 최첨단 AI 시스템에도 어려운 문제입니다. 예를 들어 새로운 과학 지식을 개발할 때와 같이 매우 어려운 질문에 답하는 데 미래의 AI 시스템을 사용하려면, 인간이 그 결과물을 감독할 수 있는 확장 가능한 감독 방법을 개발해야 하는데, 이는 감독자가 숙련되고 지식이 풍부하더라도
       어려울 수 있습니다. 숙련된 비전문가와 프론티어 AI 시스템 모두에 대한 GPQA의 난이도는 현실적으로 확장 가능한 감독 실험을 가능하게 하며, 이를 통해 인간 전문가가 인간의 능력을 능가하는 AI 시스템으로부터 진실한 정보를 안정적으로 얻을 수 있는 방법을 고안하는 데 도움이 될 것으로 기대합니다.

     We present GPQA, a challenging dataset of 448 multiple-choice questions written by domain experts in biology, physics, and chemistry. We ensure that the questions are high-quality and extremely difficult: experts who have or are pursuing PhDs in the corresponding domains reach 65% accuracy (74% when discounting clear mistakes the experts identified in retrospect), while highly skilled non-expert validators only reach 34% accuracy, despite spending on average over 30 minutes with unrestricted access to the web (i.e., the questions are ""Google-proof""). The questions are also difficult for state-of-the-art AI systems, with our strongest GPT-4 based baseline achieving 39% accuracy. If we are to use future AI systems to help us answer very hard questions, for example, when developing new scientific knowledge, we need to develop scalable oversight methods that enable humans to supervise their outputs, which may be difficult even if the supervisors are themselves skilled and
     knowledgeable. The difficulty of GPQA both for skilled non-experts and frontier AI systems should enable realistic scalable oversight experiments, which we hope can help devise ways for human experts to reliably get truthful information from AI systems that surpass human capabilities.

    논문 링크

   https://arxiv.org/abs/2311.12022

    더 읽어보기

   https://x.com/idavidrein/status/1727033002234909060


  언어 인텔리전스 점화: 연쇄 추론(CoT)에서 언어 에이전트까지의 히치하이커를 위한 가이드 / Igniting Language Intelligence: The Hitchhiker's Guide From Chain-of-Thought Reasoning to Language Agents

    논문 소개

     * CoT(Chain-of-Thought) 추론, CoT(Chain-of-Thought) 기술을 뒷받침하는 기본 메커니즘 및 언어 에이전트 프레임워크에 대한 적용에 대한 요약입니다.

     Summary of cot reasoning, foundational mechanics underpinning cot techniques, and their application to language agent frameworks.

    논문 초록

     * 대규모 언어 모델(LLM)은 다양한 복잡한 추론 작업에 대한 강력한 경험적 성능으로 입증된 바와 같이 언어 지능 분야를 획기적으로 향상시켰습니다. 또한 이론적 증명을 통해 새로운 추론 능력이 밝혀지면서 언어적 맥락에서 고급 인지 능력을 강력하게 보여줄 수 있게 되었습니다. 복잡한 추론 작업을 처리하는 데 탁월한 효과를 발휘하는 데 중요한 역할을 하는 LLM은 흥미로운 생각의 사슬(CoT) 추론 기법을 활용하여 답을 도출하는 과정에서 중간 단계를 공식화해야 합니다. CoT 추론 접근 방식은 추론 성능을 증폭시킬 뿐만 아니라 해석 가능성, 제어 가능성 및 유연성을 향상시키는 데에도 능숙함을 보여 왔습니다. 이러한 장점에 비추어 최근의 연구 노력은 다양한 환경에서 언어 지시를 능숙하게 준수하고 작업을 실행하는 자율 언어 에이전트의 개발을
       촉진하기 위해 CoT 추론 방법론을 확장했습니다. 이 설문조사 논문은 (i) CoT 기술의 기본 메커니즘과 그 효능의 배경과 정당성을 밝히는 데 중점을 두고, (ii) CoT의 패러다임 전환, (iii) CoT 접근법으로 강화된 언어 에이전트의 급성장 등 중요한 연구 차원을 관통하는 철저한 담론을 조율합니다. 향후 연구 방향은 일반화, 효율성, 맞춤화, 확장 및 안전성에 대한 탐구를 포괄합니다. 이 논문은 CoT 추론과 언어 에이전트에 대한 포괄적인 지식을 원하는 초보자부터 기초 역학에 관심이 있고 이러한 주제에 대한 최신 토론에 참여하는 숙련된 연구자까지 폭넓은 독자를 대상으로 합니다. 관련 논문 저장소는 https://github.com/Zoeyyao27/CoT-Igniting-Agent 에서 확인할 수 있습니다.

     Large language models (LLMs) have dramatically enhanced the field of language intelligence, as demonstrably evidenced by their formidable empirical performance across a spectrum of complex reasoning tasks. Additionally, theoretical proofs have illuminated their emergent reasoning capabilities, providing a compelling showcase of their advanced cognitive abilities in linguistic contexts. Critical to their remarkable efficacy in handling complex reasoning tasks, LLMs leverage the intriguing chain-of-thought (CoT) reasoning techniques, obliging them to formulate intermediate steps en route to deriving an answer. The CoT reasoning approach has not only exhibited proficiency in amplifying reasoning performance but also in enhancing interpretability, controllability, and flexibility. In light of these merits, recent research endeavors have extended CoT reasoning methodologies to nurture the development of autonomous language agents, which adeptly adhere to language instructions
     and execute actions within varied environments. This survey paper orchestrates a thorough discourse, penetrating vital research dimensions, encompassing: (i) the foundational mechanics of CoT techniques, with a focus on elucidating the circumstances and justification behind its efficacy; (ii) the paradigm shift in CoT; and (iii) the burgeoning of language agents fortified by CoT approaches. Prospective research avenues envelop explorations into generalization, efficiency, customization, scaling, and safety. This paper caters to a wide audience, including beginners seeking comprehensive knowledge of CoT reasoning and language agents, as well as experienced researchers interested in foundational mechanics and engaging in cutting-edge discussions on these topics. A repository for the related papers is available at https://github.com/Zoeyyao27/CoT-Igniting-Agent.

    논문 링크

   https://arxiv.org/abs/2311.11797

    더 읽어보기

   https://x.com/omarsar0/status/1726803725220487277


  GAIA: 일반 AI 어시스턴트를 위한 벤치마크 / GAIA: a benchmark for General AI Assistants

    논문 소개

     * 추론, 멀티모달 처리, 웹 브라우징 및 일반적인 도구 사용 숙련도와 같은 일련의 기본 능력이 필요한 실제 질문으로 구성된 일반 AI 비서에 대한 벤치마크에 따르면 인간 응답자는 92%, 플러그인을 탑재한 GPT-4는 15%의 점수를 얻었습니다.

     A benchmark for general ai assistants consisting of real-world questions that require a set of fundamental abilities such as reasoning, multimodal handling, web browsing, and generally tool-use proficiency; shows that human respondents obtain 92% vs. 15% for gpt-4 equipped with plugins.

    논문 초록

     * 해결된다면 AI 연구의 이정표가 될 일반 AI 어시스턴트의 벤치마크인 GAIA를 소개합니다. GAIA는 추론, 다중 양식 처리, 웹 브라우징 및 일반적으로 도구 사용 숙련도와 같은 일련의 기본 능력을 필요로 하는 실제 세계 질문을 제안합니다. GAIA의 질문은 개념적으로 인간에게는 간단하지만 대부분의 고급 AI에게는 어려운 문제입니다. 인간 응답자는 92%, 플러그인이 장착된 GPT-4의 경우 15%의 정답률을 보였습니다. 이러한 현저한 성능 격차는 법률이나 화학 등 전문적인 기술이 필요한 작업에서 인간을 능가하는 최근의 추세와는 대조적입니다. GAIA의 철학은 인간에게 더욱 어려운 작업을 목표로 삼는 현재의 AI 벤치마크 트렌드에서 출발합니다. 우리는 인공 일반 지능(AGI)의 출현이 이러한 문제에 대해 평균적인 인간과 유사한 견고함을 보여줄 수 있는 시스템의
       능력에 달려 있다고 가정합니다. 저희는 GAIA의 방법론을 사용하여 466개의 질문과 그에 대한 답변을 고안했습니다. 저희는 질문을 공개하고 그 중 300개의 질문에 대한 답변은 https://huggingface.co/gaia-benchmark 에서 확인할 수 있는 리더보드에 공개합니다.

     We introduce GAIA, a benchmark for General AI Assistants that, if solved, would represent a milestone in AI research. GAIA proposes real-world questions that require a set of fundamental abilities such as reasoning, multi-modality handling, web browsing, and generally tool-use proficiency. GAIA questions are conceptually simple for humans yet challenging for most advanced AIs: we show that human respondents obtain 92% vs. 15% for GPT-4 equipped with plugins. This notable performance disparity contrasts with the recent trend of LLMs outperforming humans on tasks requiring professional skills in e.g. law or chemistry. GAIA's philosophy departs from the current trend in AI benchmarks suggesting to target tasks that are ever more difficult for humans. We posit that the advent of Artificial General Intelligence (AGI) hinges on a system's capability to exhibit similar robustness as the average human does on such questions. Using GAIA's methodology, we devise 466 questions and
     their answer. We release our questions while retaining answers to 300 of them to power a leader-board available at https://huggingface.co/gaia-benchmark.

    논문 링크

   https://arxiv.org/abs/2311.12983

    더 읽어보기

   https://x.com/ThomasScialom/status/1727683993045201339


  메드에이전트: 제로 샷 의료 추론을 위한 협업자로서의 대규모 언어 모델 / MedAgents: Large Language Models as Collaborators for Zero-shot Medical Reasoning

    논문 소개

     * 롤플레잉 로보틱스 기반 에이전트를 활용하여 로보틱스 숙련도와 추론 능력을 향상시키는 의료 영역의 협업 멀티라운드 프레임워크를 제안합니다.

     Proposes a collaborative multi-round framework for the medical domain that leverages role-playing llm-based agents to enhance llm proficiency and reasoning capabilities.

    논문 초록

     * 대규모 언어 모델(LLM)은 다양한 일반 도메인에서 괄목할 만한 발전을 이루었음에도 불구하고 의학 및 헬스케어 분야에서 상당한 장벽에 부딪히고 있습니다. 이 분야는 도메인별 용어와 전문 지식에 대한 추론과 같은 고유한 과제에 직면해 있습니다. 이러한 고질적인 문제를 해결하기 위해 유니티는 의료 분야를 위한 새로운 다분야 협업(MC) 프레임워크를 제안합니다. 이 프레임워크는 롤플레잉 LLM 기반 에이전트를 활용하여 다자간 협업 토론에 참여함으로써 LLM 숙련도와 추론 능력을 향상시킵니다. 교육이 필요 없고 해석이 가능한 이 프레임워크는 도메인 전문가를 모으고, 개별 분석을 제안하고, 이러한 분석을 보고서로 요약하고, 합의에 도달할 때까지 토론을 반복하고, 최종적으로 의사 결정을 내리는 5가지 중요한 단계를 포괄합니다. 특히 제로 샷
       시나리오에 초점을 맞춘 연구 결과, 9개의 데이터 세트(MedQA, MedMCQA, PubMedQA 및 MMLU의 6개 하위 작업)에 대한 연구 결과, 우리가 제안한 MC 프레임워크가 LLM의 의료 전문 지식을 마이닝하고 활용하며 추론 능력을 확장하는 데 탁월하다는 사실이 입증되었습니다. 이러한 결과를 바탕으로, 우리는 방법 내에서 일반적인 오류를 찾아내고 분류하기 위한 인적 평가와 다양한 요인이 전체 성능에 미치는 영향을 이해하기 위한 제거 연구를 추가로 수행했습니다. 코드에 대한 자세한 내용은 \url{https://github.com/gersteinlab/MedAgents}에서 확인할 수 있습니다.

     Large Language Models (LLMs), despite their remarkable progress across various general domains, encounter significant barriers in medicine and healthcare. This field faces unique challenges such as domain-specific terminologies and the reasoning over specialized knowledge. To address these obstinate issues, we propose a novel Multi-disciplinary Collaboration (MC) framework for the medical domain that leverages role-playing LLM-based agents who participate in a collaborative multi-round discussion, thereby enhancing LLM proficiency and reasoning capabilities. This training-free and interpretable framework encompasses five critical steps: gathering domain experts, proposing individual analyses, summarising these analyses into a report, iterating over discussions until a consensus is reached, and ultimately making a decision. Our work particularly focuses on the zero-shot scenario, our results on nine data sets (MedQA, MedMCQA, PubMedQA, and six subtasks from MMLU) establish
     that our proposed MC framework excels at mining and harnessing the medical expertise in LLMs, as well as extending its reasoning abilities. Based on these outcomes, we further conduct a human evaluation to pinpoint and categorize common errors within our method, as well as ablation studies aimed at understanding the impact of various factors on overall performance. Our code can be found at \url{https://github.com/gersteinlab/MedAgents}.

    논문 링크

   https://arxiv.org/abs/2311.10537

    더 읽어보기

   https://x.com/omarsar0/status/1726627951582511135


  변화하는 기후 속 낙타: Tulu 2로 LM 적응력 향상 / Camels in a Changing Climate: Enhancing LM Adaptation with Tulu 2

    논문 소개

     * 사전 학습된 언어 모델을 다운스트림 작업 및 사용자 선호도에 맞게 조정하는 데 대한 이해와 모범 사례를 향상시키기 위해 개선된 튜루 모델 제품군을 제공하며, 튜루 2 제품군은 개방형 모델 중 최첨단 성능을 달성하고 여러 벤치마크에서 GPT-3.5-Turbo-0301의 성능과 일치하거나 이를 능가합니다.

     Presents a suite of improved tülu models for advancing the understanding and best practices of adapting pretrained language models to downstream tasks and user preferences; tülu 2 suite achieves state-of-the-art performance among open models and matches or exceeds the performance of gpt-3.5-turbo-0301 on several benchmarks.

    논문 초록

     * Tülu 출시 이후[Wang et al., 2023b], 더 나은 기본 모델부터 새로운 미세 조정 기법에 이르기까지 인스트럭션 튜닝을 위한 오픈 리소스가 빠르게 발전해 왔습니다. 당사는 이러한 여러 발전 사항을 테스트하고 Tülu 에 통합하여 사전 학습된 언어 모델을 다운스트림 작업 및 사용자 선호도에 맞게 조정하는 데 대한 이해와 모범 사례를 발전시키기 위한 개선된 Tülu 모델 모음인 Tülu 2를 개발했습니다. 구체적으로 출시되는 기능은 다음과 같습니다: (1) 고품질 명령어 데이터 세트의 개선된 컬렉션인Tülu -V2-mix, (2) V2 믹스에서 미세 조정된Tülu 2, LLAMA-2 모델, (3) 현재까지 가장 큰 규모의 DPO 학습 모델(Tülu 2+DPO 70B)을 포함하여 직접 선호도 최적화(DPO)로 학습된 Tülu 2, Tülu 2 모델을 출시합니다; (4) V2 믹스에서 미세 조정된 CODETülu 2, CODE LLAMA 모델로서 CODE LLAMA와 그
       인스트럭션 튜닝 변형인 CODE LLAMA-Instruct보다 우수한 성능을 발휘합니다. 다양한 관점에서의 평가 결과, Tülu 2 제품군은 개방형 모델 중 최첨단 성능을 달성하고 여러 벤치마크에서 GPT-3.5-turbo-0301의 성능과 일치하거나 이를 능가하는 것으로 나타났습니다. 향후 대규모 언어 모델 적용을 위한 개방형 노력을 촉진하기 위해 모든 체크포인트, 데이터, 학습 및 평가 코드를 공개합니다.

     Since the release of Tülu [Wang et al., 2023b], open resources for instruction tuning have developed quickly, from better base models to new finetuning techniques. We test and incorporate a number of these advances into Tülu , resulting in Tülu 2, a suite of improved Tülu models for advancing the understanding and best practices of adapting pretrained language models to downstream tasks and user preferences. Concretely, we release: (1) Tülu-V2-mix, an improved collection of high-quality instruction datasets; (2) Tülu 2, LLAMA-2 models finetuned on the V2 mixture; (3) Tülu 2+DPO, Tülu 2 models trained with direct preference optimization (DPO), including the largest DPO-trained model to date (Tülu 2+DPO 70B); (4) CODE Tülu 2, CODE LLAMA models finetuned on our V2 mix that outperform CODE LLAMA and its instruction-tuned variant, CODE LLAMA-Instruct. Our evaluation from multiple perspectives shows that the Tülu 2 suite achieves state-of-the-art performance among open models and
     matches or exceeds the performance of GPT-3.5-turbo-0301 on several benchmarks. We release all the checkpoints, data, training and evaluation code to facilitate future open efforts on adapting large language models.

    논문 링크

   https://arxiv.org/abs/2311.10702

    더 읽어보기

   https://x.com/natolambert/status/1727350301131518454


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-a05
"
"https://news.hada.io/topic?id=12072","찰리 멍거 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                찰리 멍거 별세
"
"https://news.hada.io/topic?id=11952","Meta, 비디오 합성 및 편집용 AI 모델 Emu Video/Edit 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Meta, 비디오 합성 및 편집용 AI 모델 Emu Video/Edit 공개

Emu Video: 단일 Diffusion Model 기반으로 텍스트를 비디오로 고품질로 생성

     * 두 단계로 프로세스를 분리
          + 먼저 텍스트 프롬프트에 따라 조건이 지정된 이미지를 생성
          + 텍스트와 생성된 이미지 모두에 조건이 지정된 비디오를 생성
     * 이런 'Factorized' 또는 분할 접근 방식을 통해 비디오 생성 모델을 효율적으로 훈련 가능
     * 여러개의 모델 중첩이 필요했던 이전 작업(예: Make-A-Video의 경우 5개 모델)과 달리, 구현이 간단하며 두 개의 확산 모델만으로 초당 16프레임으로 512x512 4초 길이의 동영상을 생성
     * 실제로 응답자의 96%가 품질 면에서, 85%가 텍스트 프롬프트에 대한 충실도 면에서 Make-A-Video보다 선호했음
     * 또한 이 모델이 텍스트 프롬프트를 기반으로 사용자가 제공한 이미지에 '애니메이션'을 적용하여 다시 한 번 이전 작업을 큰 차이로 뛰어넘음

Emu Edit: 인식 및 생성 작업을 통한 정밀한 이미지 편집

     * 원하는 이미지를 만들기 위해서는 프롬프트를 계속 조정해야하고, 그래서 프롬프트 엔지니어링이 등장
     * 하지만 정밀한 제어에 있어서는 여전히 한계가 있음
     * Emu Edit는 다양한 이미지 조작 작업을 간소화하고 이미지 편집에 향상된 기능과 정밀도를 제공
     * 로컬 및 전역 편집, 배경 제거 및 추가, 색상 및 지오메트리 변환, 감지 및 분할 등의 작업을 포괄하는 명령을 통해 자유 형식 편집이 가능
     * 현재의 방식은 다양한 편집 작업에서 과도하게 수정하거나 성능이 떨어지는 경우가 많음
     * 오늘날의 많은 제너레이티브 AI 모델과 달리 Emu Edit는 지침을 정확하게 따르기 때문에 지침과 관련이 없는 입력 이미지의 픽셀은 그대로 유지함
          + 예를 들어 야구 모자에 ""알로하!""라는 텍스트를 추가할 때 모자 자체는 변경되지 않아야 함
     * 모델을 학습시키기 위해 각각 입력 이미지, 수행할 작업에 대한 설명, 목표 출력 이미지가 포함된 1,000만 개의 합성 샘플이 포함된 데이터 세트를 개발했음
          + 현재까지 가장 큰 규모의 데이터 세트
     * 이 결과, Emu Edit 모델은 지침 충실도와 이미지 품질 측면에서 전례 없는 편집 결과를 보여줌
          + 다양한 이미지 편집 작업에 대한 정성적, 정량적 평가 모두에서 새로운 최첨단 결과를 도출하며 기존 방식보다 우수한 성능을 입증

   Emu Edit 에 관심이 많이 가네요. DALLE 는 뭔가 수정 명령을 하면 Seed를 고정하더라도 아예 새로 생성을 해버려서 작은 수정이 어려운데 저런 방식으로 수정이 되면 사용하기 편해질 것 같습니다.
"
"https://news.hada.io/topic?id=11956","샘 알트먼, 그렉 브록맨 등, 마이크로소프트 합류 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     샘 알트먼, 그렉 브록맨 등, 마이크로소프트 합류 예정

        Hacker News 의견

     * 마이크로소프트가 OpenAI에 투자한 100억 달러가 손실될 가능성이 있지만, 사티아 나델라 CEO는 더 큰 미래를 위한 AI 팀 구성에 집중.
     * 일부는 마이크로소프트와 알트만이 OpenAI를 파괴하려 한다고 비판하지만, 이번 결정이 양측에 윈-윈이 될 수 있다는 긍정적인 시각도 존재.
     * 마이크로소프트는 OpenAI의 자원에 접근할 수 있으며, 알트만과 브록만도 이를 활용할 수 있음. 그들은 마이크로소프트에서 짧은 시간 동안 일한 후 새로운 회사를 설립할 수 있음.
     * OpenAI의 과학자들은 연구에 집중할 수 있게 되고, 마이크로소프트는 GPT를 상업화할 수 있으며, 사티아 나델라는 이를 통해 주주 가치를 높일 수 있음.
     * 애플의 AI 분야에 대한 발표를 기대하는 의견도 있으며, 애플을 과소평가해서는 안 됨.
     * 마이크로소프트가 AGI를 통제하는 것에 대한 부정적인 시각도 있으며, 이는 디스토피아적인 결과로 볼 수 있음.
     * OpenAI의 가치 하락으로 인해 회사가 탑재력을 유지하기 어려울 것이라는 우려가 있음.
     * 샘 알트만과 그렉 브록만과 같은 창업자들이 대기업에 합류하는 것이 이례적이라는 의견도 있음.
     * AI에 대한 미국 기술 문화의 변화가 '인류를 위한' 목표에서 메가코퍼레이션의 이익 추구로 변했다는 비판적인 시각이 있음.
     * 마이크로소프트가 1990년대에 Borland의 주요 인재를 영입해 중요한 제품을 개발한 사례를 들며, OpenAI도 유사한 경로를 밟을 수 있다는 예측이 있음.
"
"https://news.hada.io/topic?id=11992","Setenv는 쓰레드세이프 하지 않으며, C는 이를 수정하고 싶지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Setenv는 쓰레드세이프 하지 않으며, C는 이를 수정하고 싶지 않음

     * C 언어의 setenv() 및 unsetenv() 함수는 스레드를 사용하는 프로그램에서 안전하게 사용할 수 없음
     * 이 함수들은 전역 상태를 수정하며, 다른 스레드에서 getenv()를 호출할 때 충돌을 일으킬 수 있음
     * Go의 os.Setenv 및 Rust의 std::env::set_var()과 같이 C 표준 라이브러리 함수를 사용하는 다른 언어에서도 충돌 발생
     * Go 프로그램에서 관련 문제를 추적하고 버그를 보고하는 데 2일이 소요됨
          + Go의 DNS 리졸버 내부에서 getaddrinfo()를 사용하는데 이게 getenv()를 호출하기 때문
     * 근데 이 문제는 굉장히 오래 되었음. 2017년에도 관련 글이 있고, 글 하단에 5년뒤 2022년에 만나요! 라고 써있는데 2023년에 다시 만난 것
     * 이는 POSIX 표준의 결함으로, C 표준을 확장하여 환경 변수를 수정할 수 있도록 한 것
          + 가장 화가 나는 부분은, 표준에 영향을 미치거나 C 라이브러리를 유지 관리할 수 있는 많은 사람들이 이를 문제라고 생각하지 않는다는 것
          + 그 이유는 사양에 스레드와 함께 setenv()를 사용할 수 없다고 명확하게 명시되어 있기 때문
          + 따라서 누군가가 이 작업을 수행하면 충돌은 그들의 잘못임
     * 그러니 우리는 ""모든 함수의 사양을 주의 깊게 읽고, 다른 사람이 작성한 소프트웨어를 사용하지 말고, 스레드를 사용하지 말아야 함""
          + 하지만 현대 소프트웨어에서 이것은 비현실적인 가정임
          + 이보다는 망치기 어렵고 생태계 변화에 따라 진화하는 API를 만들기 위해 노력해야 한다고 생각함
     * C 언어와 표준 라이브러리는 대부분의 소프트웨어의 기반에서 계속해서 중요한 역할을 하고 있으니, 이를 개선할 방법을 찾거나 아니면 버릴 방법을 찾아야 함

왜 setenv()는 Thread-Safe 하지 않은가

     * getenv()는 char*을 반환하며, 애플리케이션은 나중에 이를 해제할 필요가 없음
     * 한 스레드가 이 포인터를 사용하는 동안 다른 스레드가 setenv() 또는 unsetenv()를 사용하여 동일한 환경 변수를 변경할 수 있음
     * C 표준에는 getenv()만 포함되어 있으나, 대부분의 구현체는 POSIX 표준을 따르며 환경을 수정하는 함수를 포함함
     * putenv()는 환경 변수 집합에 char*를 추가하며, 애플리케이션이 putenv() 반환 후 메모리를 수정하면 환경 변수도 수정됨
     * environ은 애플리케이션이 읽고 할당할 수 있는 NULL로 종료되는 포인터 배열(char**)이며, 이 배열에 대한 접근은 스레드 안전하지 않음

환경 변수 구현 방식

     * 애플리케이션이 기존 변수를 덮어쓸 때 구현체는 어떻게 처리할지 결정해야 함
     * glibc와 Solaris/Illumos는 환경 변수를 절대 해제하지 않으며, getenv()에서 반환된 값은 불변이고 스레드에 안전하게 사용될 수 있음
     * musl과 FreeBSD/Apple은 환경 변수를 해제하며, 다른 스레드가 setenv()를 호출한 후 getenv()에서 반환된 포인터를 사용하면 충돌이 발생할 수 있음
     * 환경 변수 집합이 스레드 안전하게 업데이트되는 것을 보장하는 것이 두 번째 문제이며, 이로 인해 glibc에서 충돌이 발생함

프로그램이 환경 변수를 사용하는 이유

     * 환경 변수는 다른 프로그램에 포함된 공유 라이브러리나 언어 런타임을 구성하는 데 유용함
     * 사용자가 프로그램 작성자가 명시적으로 구성을 전달할 필요 없이 구성을 변경할 수 있음
     * 많은 라이브러리가 getenv()를 호출하며, 프로그램은 사용하는 라이브러리를 구성하기 위해 이 변수들을 변경해야 함

이 문제를 해결해야 하며, 다음과 같이 할 수 있음

     * 내 생각에 이것이 오랫동안 알려진 문제였다는 것은 말도 안 되는 일임
     * 문제를 디버깅하거나 해결 방법을 논의하느라 수천 시간을 낭비함
     * 문제를 해결할 방법
          + Illumos/Solaris와 같이 스레드에 안전한 구현을 만들기
               o 이것은 약간 한계가 있음. setenv()에서 메모리가 누수되고 프로그램이 putenv() 또는 환경 변수를 사용하는 경우 여전히 안전하지 않음
               o 하지만 이는 현재 Linux 및 Apple 구현에 비해 개선된 것
          + 두 번째로는 Microsoft의 getenv_s()와 같이 설계상 스레드에 안전한 모든 환경 변수를 가져오는 새로운 API를 추가하는 것
     * 내가 선호하는 해결책은 두 가지를 모두 사용하는 것
          + 기존 프로그램과 라이브러리에 대한 문제 발생 가능성을 줄이고, Go와 Rust와 같은 새로운 코드나 언어에 대한 문제를 완전히 피할 수 있는 경로를 제공함
          + getenv_s()와 유사하게 하나의 환경 변수를 사용자가 지정한 버퍼에 복사하는 함수를 추가
          + 모든 환경 변수를 반복하거나 모든 변수를 복사할 수 있는 스레드 안전 API를 추가
          + getenv()를 더 이상 사용되지 않는 것으로 표시하고 대신 스레드에 안전한 새로운 getenv() 함수를 권장
          + putenv()를 더 이상 사용되지 않는 것으로 표시하고 대신 setenv()를 권장
          + environ을 사용 중단된 것으로 표시하고 대신 환경 변수 함수를 권장
          + 스레드에 안전하도록 환경 변수 구현을 업데이트

   ""사양에 스레드와 함께 setenv()를 사용할 수 없다고 명확하게 명시되어 있기 때문"" ==> api 나 sdk 를 사용 시에는 반드시 specification 명세를 꼼꼼히 확인해야 함이 기본 중의 기본입니다. 어거지 쓰는걸로밖에 안보이네요.

   애초에 설계가 잘못된 기능을 쓰는 게 문제

   ....
"
"https://news.hada.io/topic?id=11976","GTA에서 저격할 때 달의 크기가 변하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GTA에서 저격할 때 달의 크기가 변하는 이유

달의 크기가 변하는 이유

     * 게임 내에서 달의 텍스처를 제공받아 밤하늘에 적절한 크기로 배치함.
     * 나중에 4명의 아티스트가 달의 크기를 변경해달라고 요청함; 2명은 현실적인 크기를 원했고, 다른 2명은 영화 같은 크기를 원함.
     * 달의 크기를 게임 내에서 변경 가능하도록 제안함; 스나이퍼 라이플 작업 중이었기 때문에 플레이어가 달을 저격할 때 세 가지 크기(작음, 중간, 큼)로 전환되도록 설정함.
     * 아티스트들이 최종 결정을 내리지 않아 그대로 두었고, 이 기능은 게임 ""SA""에도 남아 있음.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 게임 개발 과정에서 발생한 창의적인 해결책이 어떻게 게임의 재미 요소로 남게 되었는지를 보여준다는 점임.
     * 게임 개발자와 아티스트 간의 협업에서 발생할 수 있는 의견 충돌을 유연하게 해결한 사례로, 이러한 비하인드 스토리는 게임을 플레이하는 사람들에게 흥미로운 이야깃거리를 제공함.

        Hacker News 의견

     * 해당 동영상에서 실제로 작동하는 모습을 볼 수 있음: 동영상 링크
     * 게임 개발과 관련된 재미있는 일화들을 좋아함. 개발 과정의 흥미로운 유물들.
     * 임시 해결책으로 쓰인 코드가 가장 오래 살아남는 경향이 있음.
     * 이러한 설명을 기대하지 않았음. 단순한 ""달을 쏘는"" 장난으로만 생각했었음.
     * 소프트웨어 업계에서 일하면서, 이런 질문에 대한 답은 거의 항상 ""더 중요한 문제가 있었다""는 것을 깨달음.
     * 아티스트가 저격을 통해 조정하는 것이 우스꽝스러움. 보통은 콘솔 변수를 추가하여 조정함.
     * 추억을 위해, 치트코드를 추가한 프로그래머/팀과 악수하고 싶음.
     * 이것은 스티브 잡스가 계산기 앱을 만든 전설과 같은 달 버전임.
     * ""오리를 제거하라""는 또 다른 예시 참조: Hacker News 링크
     * 과거 '터미네이터: 스카이넷' 게임에서도 비슷한 일이 있었음. 달을 쏘면 ""아야!""라는 메시지가 상태 영역에 나타나고, 몇 번 더 쏘면 달이 하늘에서 떨어짐. 멋진 일화임.
"
"https://news.hada.io/topic?id=12057","딥 러닝 이해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                딥 러닝 이해

책 내용 요약

     * Simon J.D. Prince가 쓴 ""Understanding Deep Learning""이라는 책이 MIT Press에서 2023년 12월 5일에 출판될 예정임.
     * 이 책은 깊은 학습에 대한 이해를 돕기 위해 다양한 주제를 다루고 있으며, 초급 소프트웨어 엔지니어도 이해할 수 있도록 설명함.
     * 책의 주요 내용은 감독 학습, 신경망, 손실 함수, 모델 훈련, 성능 측정, 정규화, 합성곱 네트워크, 잔차 네트워크, 변환기, 그래프 신경망, 비감독 학습, 생성적 적대 신경망, 정규화 흐름, 변분 오토인코더, 확산 모델, 심층 강화 학습, 깊은 학습의 작동 원리, 깊은 학습과 윤리 등을 포함함.

교육자를 위한 자료

     * 교육자를 위한 답안집은 MIT Press를 통해 자격 증명을 제시하면 제공됨.
     * 강의용 사본은 MIT Press를 통해 요청할 수 있음.
     * 각 장에 대한 그림 자료는 PDF, SVG, PowerPoint 형식으로 제공됨.

학생을 위한 자료

     * 선택된 질문에 대한 답변과 Python 노트북이 제공되며, 이는 학생들이 실습을 통해 깊은 학습을 더 잘 이해할 수 있도록 도움을 줌.
     * 노트북은 수학적 배경, 감독 학습, 얕은 신경망, 심층 신경망, 손실 함수, 모델 훈련, 기울기 및 초기화, 성능 측정, 정규화, 합성곱 네트워크, 잔차 네트워크, 변환기, 그래프 신경망, 생성적 적대 신경망, 정규화 흐름, 변분 오토인코더, 확산 모델, 심층 강화 학습, 깊은 학습의 작동 원리, 깊은 학습과 윤리 등 다양한 주제를 다룸.

GN⁺의 의견

     * 이 책은 깊은 학습에 대한 포괄적인 이해를 제공하며, 이론적인 설명과 실제 적용 사례를 모두 포함하고 있어 학습자에게 유익함.
     * 초급 소프트웨어 엔지니어가 깊은 학습의 기본 개념부터 고급 주제까지 체계적으로 배울 수 있는 자료를 제공함으로써, 이 분야에 대한 흥미와 지식을 키울 수 있는 기회를 제공함.
     * 실습을 위한 Python 노트북과 교육자 자료가 포함되어 있어, 이론적 지식을 실제 문제 해결에 적용해보는 경험을 할 수 있음이 가장 중요함.

        Hacker News 의견

     *
          + 댓글들은 대체로 두 가지 입장으로 나뉨: 1) 이런 지식이 필요 없고 AI 시스템을 만들 수 있음, 2) 이 기초 지식이 필요해야 실제로 무슨 일이 일어나는지 이해할 수 있음.
          + 두 관점 모두 옳음. 분야가 ML 엔지니어와 ML 과학자(또는 연구원)으로 나뉘는 중임.
          + 팀에 두 유형이 모두 있는 것이 좋음. 과학자들은 느릴 수 있고, 엔지니어들은 다양한 API와 오픈소스 모델을 시도하며 앞서 나갈 것임. 하지만 장애물에 부딪히거나 알고리즘을 조정해야 할 때 많은 엔지니어들이 어려움을 겪을 수 있음. 그들에게는 많은 엔지니어들에게 낯선 R&D 마인드셋이 필요함.
          + 이때 AI 과학자의 중요성이 부각됨.
     *
          + 지금부터 AI에 대해 공부를 시작하면 전문가에 가까워질 수 있을까?
          + 석사나 박사 학위가 필요한 여정을 시작하는 것에 대한 걱정.
     *
          + 이 분야에 대해 배우는 것이 이제는 역사적인 목적으로만 의미가 있는 것인지, 아니면 미래의 취업에도 여전히 관련이 있는지 궁금함.
          + OpenAI가 AI 관련 모든 것을 장악할 것이라고 상상하는데, 이것이 맞는 생각인지 의문.
     *
          + 이 책은 인상적임. '딥러닝의 비합리적 효과'에 대한 장을 좋아함. 또 주목해야 할 다른 책이 있을까?
     *
          + 유명한 기술 회사에서 수십 년간 다양한 머신러닝 플랫폼에서 일함. 작업한 모든 것이 빠르게 구식이 됨. ML 알고리즘부터 컴퓨팅 플랫폼까지 모두 변덕스러움. 소수의 엘리트 회사만이 모든 ML 혁신을 담당하고 있어, 많은 이들에게 이런 자료를 배우는 것이 모순적으로 느껴짐.
     *
          + 이런 책을 평가하기는 어려움... (목차만으로?)
          + 저자는 누구인가?
          + 다른 높은 평가를 받은 출판물이 있는가?
          + 이 분야를 아는 사람들로부터 좋은 리뷰가 있는가?
          + 아무것도 모르는 학생들로부터 좋은 리뷰가 있는가?
     *
          + 바보 같은 질문일 수도 있지만: 실제 책을 어떻게 구입하나?
     *
          + '딥러닝이 왜 작동하는가'에 대한 PDF 그림이 '딥러닝과 윤리'를 가리키는 것 같고 그 반대의 경우도 마찬가지임.
     *
          + 훌륭한 작업이고 이를 무료로 제공하는 것은 놀라운 일임!!
     *
          + RNN에 대한 장은 없지만, 2016년 이안 굿펠로우의 '딥러닝'을 마지막으로 읽은 이후 트랜스포머에 대한 장이 있는 것은 흥미로움.
"
"https://news.hada.io/topic?id=11987","LM Studio - LLM을 로컬에서 쉽게 실행하게 해주는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  LM Studio - LLM을 로컬에서 쉽게 실행하게 해주는 도구

     * 로컬에서 LLM 을 찾고, 다운로드 하고, 오프라인으로 실행 지원
          + LLaMa, Falcon, MPT, StarCoder, GPT-Neo-X 등의 모델
     * 맥/윈도우/리눅스(베타)
     * 내장 채팅 UI 또는 OpenAI 호환 로컬 서버를 통해 모델 사용 가능
     * HuggingFace의 ggml 기반 Llama, MPT, StarCoder 모델등을 지원함
          + (예: Llama 2, Orca, Vicuna, Nous Hermes, WizardCoder, MPT 등).
     * 최소 사양 및 요구사항
          + Apple Silicon Mac (M1/M2/M3) macOS 13.6 이상
          + Windows / Linux PC (AVX2 지원하는 프로세서)
          + 16GB+ 이상 램 권장. PC 에선 6GB+ VRAM 권장
          + NVIDIA/AMD GPUs 지원

LM Studio 개인정보 보호 및 사용

     * LM Studio는 사용자의 데이터를 수집하거나 모니터링하지 않으며, 모든 데이터는 사용자의 기기에 로컬로 남아 있음
     * 개인적인 용도로는 무료이며, 업무용으로 사용하고자 할 경우 팀에 연락해야 함

GN⁺의 의견

     * LM Studio는 개인정보 보호를 중시하는 사용자에게 매력적인 솔루션으로, LLM을 오프라인으로 실행할 수 있는 기능이 가장 중요함.
     * 사용자의 데이터가 로컬에만 저장되고, 다양한 모델을 지원하는 점이 흥미롭고, 개인 사용자에게 무료로 제공되는 점이 유익함.
     * 하드웨어 요구 사항이 상대적으로 높아 최신 기기 사용자에게 적합하며, 업무용 사용을 계획 중인 점이 긍정적임.

        Hacker News 의견

     * Ollama와 UI를 사용하여 오픈 소스 코드와 동일한 작업을 수행할 수 있음을 보여주는 링크 공유.
     * LM Studio에 대한 긍정적인 평가와 그 특징들:
          + 로컬 모델 런타임
          + 모델 카탈로그
          + 모델과 쉽게 대화할 수 있는 UI
          + OpenAI 호환 API
          + RAG(ChromaDB 사용) 등의 플러그인 포함
          + OS 생태계의 새로운 기능을 활용할 수 있는 좋은 위치에 있음
          + 아쉽게도 LM Studio 자체는 오픈 소스가 아님
     * 검열되지 않은 모델을 시도하고자 함. ""TheBloke/Luna-AI-Llama2-Uncensored-GGML"" 모델을 발견하고 첫 번째 파일만 다운로드하여 작동 여부 확인. 나머지 파일들도 다운로드해야 하는지, 그리고 특정 민감한 질문에 대해 모델이 검열되지 않는지 궁금함.
     * LLM에 관한 초보적인 질문: ""반지의 제왕"" 시리즈를 LLM에 입력하면 어떻게 되는지, 기본적인 ""무지한"" LLM이 존재하는지, 그리고 이를 통해 중간계 전문가를 만들 수 있는지 등에 대한 궁금증.
     * 고급 엔지니어링 역할에 대한 재미있는 자격 요건: 컴퓨터와 소프트웨어에 대한 깊은 이해, 알고리즘과 프로그램 작성 능력 등이 요구되지만, 이러한 요구사항을 진지하게 받아들이기 어려움.
     * 복잡한 설정을 간소화하기 위한 시도로 개인적으로 만든 간단한 UI를 소개하는 링크 공유.
     * LLM 소프트웨어의 잠재적 사용자층에 대한 호기심과 시장 세분화에 대한 정보 또는 추측을 보고 싶어 함. 복잡한 설정에도 불구하고 이 인터페이스와 대화 및 모델 관리의 가치를 찾음.
     * 앱의 UI 개선점 제안:
          + 채팅박스 필드의 기본 상태 개선 필요
          + 모델 로딩 전 CUDA 가속 설정 방법 불명확
          + 일부 HuggingFace 모델이 나열되지 않고 이유가 명시되지 않음
          + 인터페이스의 아코디언 부분 스크롤이 마우스 휠에만 반응
          + 서버 탭이 초기 디버깅에 매우 유용함
     * 다양한 LLM 모델(Mistral, Llama 2, Code Llama, Orca Mini, Vicuna)을 사용할 때 발생할 수 있는 문제점(50% 환각, 존재하지 않는 API 코드 추천, 구식 StackOverflow 답변 재생산 등)에 대한 질문과 이러한 모델을 실제로 사용하는 사례 공유 요청.
     * LM Studio 설치 및 실행 후 CPU 사용량이 30%까지 상승하고 노트북 팬 소음 증가를 경험함. LM Studio 프로세스를 종료하고 다시 열었을 때 백그라운드 사용량이 5%로 감소함.
"
"https://news.hada.io/topic?id=11969","Cruise 공동 창업자이자 CEO인 Kyle Vogt 해임 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Cruise 공동 창업자이자 CEO인 Kyle Vogt 해임

     * 캘리포니아 DMV는 지난 10월 2일 발생한 사고 이후 크루즈의 자율주행 차량 운행 허가를 정지
     * 사고 당시 크루즈 로보택시가 보행자를 들이받고 20피트를 끌고 간 사건이 발생
     * 이 사건 이후 크루즈는 계약직 직원들을 해고하고 직원들 사이에서 불만이 증가함

사고 이후 경영진 변화

     * 크루즈(Cruise)의 공동 창업자이자 CEO인 카일 보그트가 사임
     * 공동 창업자인 댄 칸도 사임했으며, 모 엘셰나위가 크루즈의 새로운 사장 겸 CTO로 임명
     * GM의 메리 바라 CEO는 크루즈의 장기적 성공을 위해 안전, 투명성, 책임을 최우선 가치로 삼을 것이라고 강조

크루즈의 창업과 성장

     * 보그트와 칸은 2013년 자율주행 차량 회사를 창업하고, 초기에는 차량 개조 키트를 개발함.
     * 회사는 사업 모델을 전환하고 GM이 2016년 10억 달러 이상의 가치로 인수함.
     * 보그트는 이전에 Justin.tv, Twitch, Socialcam을 공동 창업한 경험이 있음.

GN⁺의 의견

     * 크루즈의 CEO 카일 보그트와 공동 창업자 댄 칸의 사임은 회사의 새로운 장을 여는 중요한 변화임.
     * 자율주행 기술의 선두주자 중 하나인 크루즈의 경영진 변화는 자율주행 산업 전반에 영향을 미칠 수 있음.
     * 이 기사는 자율주행 기술의 미래와 안전에 대한 공중의 신뢰 회복이라는 중요한 주제를 다루고 있어 흥미로움.

   작년 2월부터 샌프란에서 자율주행 운전을 시작했는데, 올해 사건이 늘어난다는 이야기들이 있다가 10월에 일어난 사고때문에 아예 차량 운행이 중단 되었습니다.
   도로에서의 자율주행 쉽지 않은데 너무 빨리 시작한거 라고 생각이 듭니다. 테슬라도 그 많은 차량 데이터를 다 모으면서도 아직 잘 못한다는 소리가 많은데 말이죠
     * 2022-02 Cruise, 운전자 없는 자율주행 차를 대중에 공개하고 승객 모집 시작
     * 2022-03 Waymo, SF에서 운전자 없는 자율주행차 운행 시작
     * 2023-07 샌프란시스코에서 크루즈, 웨이모 무인 택시에 의한 사건들이 급증하고 있음
     * 2023-08 Cruise, 충돌 사고 후 즉시 로보택시 편성을 50% 줄이라는 규제당국의 지시를 받음
     * 2023-10 캘리포니아, Cruise의 자율주행 차량 운영 중단
"
"https://news.hada.io/topic?id=12006","그래픽 프로그래머가 되는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            그래픽 프로그래머가 되는 방법

AMD의 도구, 라이브러리 및 효과에 대한 소개

     * AMD의 GPUOpen 웹사이트는 GPU 관련 도구, 라이브러리 및 효과에 대해 배우기에 최적의 장소임.
     * 초급 소프트웨어 엔지니어도 쉽게 이해할 수 있도록 설계된 자료와 가이드를 제공함.
     * 사용자들이 AMD의 기술을 활용하여 최적화된 그래픽과 성능을 달성할 수 있도록 지원함.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 AMD의 GPUOpen이 그래픽 개발자들에게 유용한 자원을 제공한다는 점임.
     * 초급 개발자들도 쉽게 접근하고 활용할 수 있는 자료가 많아, 그래픽 프로그래밍에 관심 있는 사람들에게 흥미로울 것임.

        Hacker News 의견

     * 초급 소프트웨어 엔지니어가 컴퓨터 그래픽스 분야에 입문할 때, 사용할 도구를 먼저 고민하기보다는 무엇을 만들고 싶은지에 대해 생각해보는 것이 중요함. 최종 결과물에 집중하면서 첫 걸음을 내딛어야 함. 많은 도구들이 그래픽 프로그래밍의 다양한 단계를 추상화하고 있어, 처음부터 저수준 코드에 너무 많은 시간을 소비할 위험이 있음. 또한, 특정 산업 분야에서는 Unity, TouchDesigner, three.js, After Effects 같은 도구를 사용하고 C++는 거의 쓰지 않는 경우가 많음. 깊은 이해는 중요하지만, 실제 산업에 들어가면서 배우는 것이 더 효율적임.
     * 그래픽 프로그래머로서 알아야 할 것들에는 프로그래밍과 API 이상의 지식이 포함됨. 회전, 뷰, 투영 행렬, 벡터 수학, 셰이더 프로그래밍, 절차적 기본 형태, 이미지 합성, 포워드 및 디퍼드 렌더링, 샘플링 기법, 그림자 및 조명 기술, 3D 앱에서 데이터 추출 방법, 프로파일러 및 디버거 사용, Siggraph 논문 읽기, 공간 분할 및 볼륨 계층 기법, 간단한 레이트레이서 구축, 기본 형태에 대한 이해, 입자 및 시뮬레이션 경험 등이 있음.
     * Pikuma의 'Graphics From Scratch' 과정을 추천함. SDL을 사용하여 set_pixel 함수를 작성하는 것으로 시작하고, 모든 행렬 연산, 정점 변환, 삼각형 래스터화를 직접 코드로 작성함. 각 픽셀의 색상을 계산하는 과정을 배움.
     * DX/VK/OGL로 시작하는 것 외에도 그래픽 프로그래머가 되는 다양한 방법이 있음. C++를 전혀 사용하지 않아도 됨. 예를 들어, 3Blue1Brown은 Python으로 놀라운 3D 그래픽을 만듦. 게임 엔진을 작성하고 싶다면 DirectX나 Vulkan을 배우고, 브라우저 애플리케이션을 작성하고 싶다면 WebGL을 배움. 이러한 API는 무겁고 그래픽에 대해 많이 가르쳐주지 않을 수 있음. 그래픽 개념을 배우고 싶다면 어떤 언어로든 자체 래스터라이저와 레이 트레이서를 작성함. Processing, PlotDevice.io, NodeBox, DrawBot, ShaderToy 등 초보자에게 접근하기 쉽고 재미있는 그래픽 라이브러리 및 코딩 환경이 많음.
     * Shadertoy에서 셰이더 작성을 통해 그래픽스 프로그래밍을 배울 수 있음. 많은 그래픽 프로그래머가 여기서 시작함. SDF, 레이 마칭, 노이즈 함수 등에 대한 10개 이상의 튜토리얼을 만듦.
     * 그래픽 프로그래밍 산업에서 실제로 사용하는 자료를 공유함. 그래픽 분야는 너무 커져서 모든 사람에게 맞는 학습 방법이 존재하지 않음. 그래픽을 배우고 싶다면 멘토를 찾는 것이 좋음.
     * 컴퓨터 그래픽스에는 수백 가지의 전문 분야가 있으며, 해당 웹사이트는 프로그래밍 그래픽 SDKs라는 작은 부분에만 초점을 맞춤.
     * 게임 개발자이지만 그래픽 프로그래머는 아님. 현대 그래픽 API와 GLSL 셰이더를 사용하지만, 13살 아이가 Scratch나 Python에서 C++로 넘어가고 싶어할 때, 1999년부터 가지고 있던 OpenGL 1.2 DLL을 사용하여 간단한 코드를 작성하게 함. 현대 API의 복잡한 설정보다 훨씬 재미있음. 아이는 보로노이 다이어그램과 같은 계산 기하학에 관심이 있어서 그래픽 API는 수단에 불과함. C++와 구식 OpenGL의 성능은 Scratch보다 훨씬 빠름. 간단한 API를 사용하여 C++와 OpenGL을 동시에 배우는 것은 상당히 야심 찬 도전임. 단순함이 학습을 관리 가능하게 유지하고, 잘 진행되고 있음. 멋진 마칭 스퀘어 데모를 만들고, 런타임에 파라미터를 조정할 수 있는 IMgui 메뉴를 추가하는 데 도움을 줌.
     * 개인적인 여정을 공유함. 두 해 전에 여러 튜토리얼과 유튜브 비디오를 따라 첫 3D 엔진을 만듦. 매우 간단하지만, 간단한 것을 좋아함. 현재 이 엔진을 사용하여 도시 건설 게임을 만드는 작업을 진행 중임. 행렬과 교차 곱을 사용하여 물건을 조작하는 방법을 배우는 것이 매우 재미있음.
     * BASIC 프로그래밍 언어로 작성된 간단한 그래픽 코드 예시를 제공함.
"
"https://news.hada.io/topic?id=12013","Ansel - 오픈소스 사진 편집 소프트웨어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Ansel - 오픈소스 사진 편집 소프트웨어

     * Ansel은 디지털 아티스트를 위한 오픈소스 사진 편집 소프트웨어로, 원본 디지털 사진에 자신만의 해석을 더하는 데 도움을 줌.
     * ""Darktable"" 개발자였던 Aurélien Pierre가 코드베이스를 포크하여 독자적으로 개발을 시작
          + 라이트룸과 유사한 인터페이스, 많은 기능을 가진 전문가용 오픈소스 사진편집도구
     * 피아니스트이자 사진작가인 Ansel Adams의 유산에 기반을 두고 있으며, 그의 사진적 비전을 위해 암실 기술을 발전시킴.

설치 방법

     * Linux: 배포판에 구애받지 않는 실행 파일 ansel.appimage 다운로드 가능.
     * Windows: Windows 10 & 11 설치 프로그램 ansel.exe 다운로드 가능.
     * 소스에서 빌드: 하드웨어에 최적화된 성능을 위한 빌드 지침 제공.
     * 최소 권장 구성: CPU Intel i5 (4코어) / 8 GB RAM / GPU Nvidia GTX 850.
     * 위 링크는 항상 ""안정적인"" 브랜치의 최신 나이틀리 빌드를 가리킴.
     * 특정 버전이 필요하거나 롤백이 필요한 경우, Github에서 모든 중간 버전을 찾을 수 있음.

Ansel의 특징

     * 스마트폰 필터부터 카메라 JPEG까지 대중을 위한 사진 솔루션 존재하지만, Ansel은 아티스트를 창작 과정의 중심에 두고 정밀하고 미묘한 이미지 조작을 가능하게 함.
     * 최신 컬러 과학과 독립적인 컬러 컨트롤을 사용하여 원본 사진을 해석할 수 있도록 함.

Ansel이 제공하는 기능

     * 사진 컬렉션 관리, 원본 디지털 사진 및 필름 스캔의 비파괴적 편집, 일반 파일 형식으로 결과물 내보내기.
     * 편집 이력을 텍스트로 저장하고, 언제든지 원하는 편집 단계로 시간을 거슬러 올라갈 수 있음.

컬러 작업

     * HDR과 호환되는 최신 컬러 과학 제공: CIE CAT 2016, HDR 컬러 공간 JzAzBz (2017), 2021년 darktable UCS 등.
     * 화이트 밸런스 수정 및 색상 보정, 컬러 체커를 통한 색상 교정.
     * RGB, Ych, HSB 컬러 공간에서 미묘하고 세밀한 컨트롤로 사진에 분위기와 캐릭터 부여.
     * 색상 일치를 위한 크로마틱 적응, CIE Lab 좌표 또는 다른 샷의 색상 샘플링을 통한 색상 입력.

톤 작업

     * 색상 작업을 존중하면서 채도나 색조에 영향을 주지 않고 명암을 조작하는 톤 작업 방법.
     * HDR 톤 매핑을 통해 깊은 그림자 복구 및 동적 범위 압축, 색상 게이밍 매핑으로 출력 색상 공간에 맞는 색상 보장.
     * 노출 영역 기반 밀도 균형 조정, 에지 검출 알고리즘을 통한 로컬 대비 보존.

이미지 재구성

     * 다중 스케일, 그라디언트 기반 머신 러닝을 사용한 렌즈 디블러링으로 오래된 렌즈의 힘을 되살림.
     * 안개와 흐릿한 샷에서 질감과 색상의 채도 복원.
     * 색소 잡음 제거, 밝기 잡음 부드럽게 만들기 및 혼합.
     * 하이라이트 재구성으로 색상과 질감 복구, 색상 게이밍 매핑으로 적절한 색조로 인쇄 가능한 색상 하이라이트 보장.

특수 기능

     * 기계 학습을 통한 자동 투시도 보정, 렌즈 유형을 고려한 사진 회전, 정렬 및 자르기.
     * 사람, 번호판 등의 익명화 및 사회적으로 조심스러운 네트워크 사용 조건에 맞춤.

호환성

     * Ansel은 darktable 4.0 기반으로 darktable 2.x부터 4.0 데이터베이스 및 XMP 파일과 완전 호환.
     * Rawspeed와 Libraw를 사용하여 원본 사진 디코딩, 새로운 카메라는 상용 출시 후 최대 24개월이 걸릴 수 있음.
     * 영어, 프랑스어, 간체 중국어로 완전 번역, 독일어, 스페인어, 포르투갈어, 우크라이나어 등 부분 번역 제공.

개발자 Aurélien Pierre의 소개

     * Aurélien Pierre는 사진과 색상에 대한 전체적인 이해를 가지고 효율적인 컴퓨터 프로그램을 작성하고 응용 수학에 관한 학술 논문을 읽을 수 있는 몇 안 되는 사람 중 하나임.
     * Darktable 프로젝트에 4년을 바친 후, 프로젝트가 무책임하고 동시에 모든 것을 너무 빠르게 진행하는 방식에 실망함.
     * Ansel 개발은 결과에 의해 주도되며, 픽셀 파이프라인 전반에 걸쳐 적절한 컬러 과학을 통해 이루어짐.
     * 평균 주당 45시간을 개발에 투자하고 있으며, 오픈소스 이미징 옵션을 개선해야 한다고 생각한다면, 이는 저절로 이루어지지 않음.

GN⁺의 의견

   이 글에서 가장 중요한 것은 Ansel이 디지털 아티스트들에게 원본 디지털 사진에 자신만의 해석을 더할 수 있는 강력한 도구를 제공한다는 점이다. 이 소프트웨어는 사용자의 창의성을 최우선으로 하며, 최신 컬러 과학과 세밀한 편집 기능을 통해 사진 편집의 새로운 지평을 열고 있다. 개발자 Aurélien Pierre의 열정과 전문성이 프로젝트에 반영되어 있어, 사진 편집에 관심 있는 사람들에게 흥미로운 내용을 제공한다.

   Ansel Adams 아저씨가 포토샵 이전에 손토샵 하던 이야기와 함께 사진 설명해주는 책이 있습니다.

   https://amazon.com/Examples-Making-Photographs-Ansel-Adams/dp/…

   Darktable 4.0 릴리즈

        Hacker News 의견

     * 전직 ""darktable"" 개발자인 Aurélien Pierre가 코드베이스를 포크하여 독자적으로 개발을 시작함. 그는 올바른 방법에 대해 강한 의견을 가지고 있으며, UI 정리 작업을 잘 수행함. 현재 Ansel과 darktable은 내부 데이터베이스 측면에서 호환되므로 사용자는 두 프로그램 간에 쉽게 전환할 수 있음. 하지만 포크가 크게 다르게 발전한다면 호환성 유지가 어려워질 수 있음.
     * darktable은 최근 몇 년 동안 ""디스플레이-기반""에서 ""장면-기반"" 워크플로우로 크게 변화함. Aurélien은 이를 위해 많은 코드를 기여했으며, 특히 Filmic 모듈이 중요함. darktable은 다른 상업적 도구들(Lightroom, Affinity, Capture One)만큼 사용자 친화적이거나 세련되지 않지만, 배우는 데 시간을 투자한다면 충분히 유능함.
     * darktable 프로젝트에 4년을 바친 한 개발자는 프로젝트가 무책임하고 디자인 감각이 없는 사람들에 의해 파괴되는 것을 목격함. 모든 개발자가 자신의 의제를 밀어붙이고, 아무도 책임지지 않으며, 모든 것을 동시에 너무 빠르게 진행하는 프로젝트임.
     * darktable 프로젝트에 무슨 일이 있었는지 궁금해하는 사용자가 있음. 몇 번 사용해본 경험으로는 사용 방법을 아는 사람에게는 좋은 도구로 보이지만, 프로젝트 내부의 드라마에 대해 궁금증을 표함.
     * Nix를 사용하는 한 사용자는 darktable 파생물을 수정하여 Ansel을 빌드하는 데 성공함. GitHub Release가 12월 이후로 없기 때문에 fetchgit을 사용하여 빌드함.
     * 한 사용자는 수중 사진을 위해 darktable을 많이 사용하지만, Ansel을 시도해보고 싶어함. darktable의 최신 버전에서는 몇 가지 불편한 점이 있음: 카메라 노출 보정 기능이 기본적으로 켜져 있어 이미지가 세척될 때까지 끄지 않으면 안 됨, 즐겨찾기 기능이 사라짐, 유용한 모듈이 숨겨져 있음, 화이트 밸런스 모듈이 두 개 있어 경고 메시지가 표시됨, 업그레이드 후 내보내기 설정이 초기화되어 EXIF 데이터가 제거됨.
     * Ansel Adams가 1980년에 ""전자"" 사진이 다음 큰 것이 될 것이라고 예상한 것처럼 보이는 인용문을 최근에 본 사용자가 있음. 그 인용문을 다시 찾고 싶어함.
     * MacOS에서 빌드를 시도했지만 성공하지 못한 사용자가 있음. 맥용 CI 스크립트에서 brew 명령어를 실행하고, git 서브모듈을 초기화한 후 build.sh를 실행했을 때 오류가 발생함.
     * darktable의 워크플로우를 이해하는 데 어려움을 겪었던 사용자가 Ansel을 시도해보고 싶어함. UI가 복잡하고 기본 기능이 누락되어 있으며, 대부분의 사용자가 사용하지 않을 것 같은 기능이 너무 많다고 느낌. Ansel이 더 나은 기능 밸런스와 UI를 제공하기를 바람. 현재 사용자는 Another RawTherapee를 사용하고 있으며, 이는 RawTherapee의 강력한 기능과 Lightroom과 유사한 UI를 결합함.
     * 지원되는 카메라 목록을 확인하려고 했지만, ""Supported Cameras"" 링크가 도메인을 점유한 페이지로 연결되어 있어 신뢰성에 의문을 가지는 사용자가 있음.
     * 광학과 색상에 대한 전체적인 이해를 가지고 효율적인 컴퓨터 프로그램을 작성하고 응용 수학에 관한 학술 논문을 읽을 수 있는 사람은 매우 드물지만, 많은 이미지 편집 애플리케이션과 시도하는 사람들이 많다는 의견을 가진 사용자가 있음. 오픈소스 사진 및 비트맵 편집 소프트웨어는 여전히 Blender나 Godot와 같은 대표작을 기다리고 있으며, GIMP, RawTherapee, darktable 등은 대체로 작업을 수행할 수 있지만, 사진에서 즐거움과 미학을 추구하는 사람들에게는 너무 기술적이고 집중력이 부족하며 세련되지 않게 느껴짐. 사용자는 DxO와 Affinity를 사용하고 있으며, 비용이 많이 들지만 darktable과 GIMP를 사용하는 것보다 훨씬 더 촬영을 즐기고 있음.
     * 현재 Lightroom Classic 사용자로서 Ansel을 확인해볼 가치가 있다고 생각하는 사용자가 있음. 몇 년 전에 darktable을 시도했을 때 즉각적인 거부감이 있었지만, 유능하고 의견이 강한 개발자가 인기 있는 프로젝트를 포크하는 아이디어를 좋아함. 그를 응원함.
"
"https://news.hada.io/topic?id=12003","2021년 리눅스 커뮤니티에서 발생한 버그 보고가 전체의 38% 이상을 차지함에도 불구하고 판매량은 5.8%에 불과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2021년 리눅스 커뮤니티에서 발생한 버그 보고가 전체의 38% 이상을 차지함에도 불구하고 판매량은 5.8%에 불과

요약: 리눅스 커뮤니티의 버그 리포트 기여도

     * 리눅스 사용자의 판매량 대비 버그 리포트 비율
          + 게임 ΔV: Rings of Saturn의 판매량 중 5.8%가 리눅스 사용자임.
          + 리눅스 사용자들이 제출한 버그 리포트가 전체의 38%를 차지함.
          + 리눅스 사용자 한 명당 평균 1.75건의 버그 리포트를 제출하는 것으로 나타남.
     * 버그 리포트의 질과 영향
          + 리눅스 특유의 버그는 단 3건에 불과했으며, 대부분의 버그는 모든 사용자에게 영향을 미침.
          + 리눅스 커뮤니티는 버그 리포트를 잘 작성하는 것으로 유명함.
          + 리포트에는 소프트웨어/OS 버전, 로그, 코어 덤프, 문제 재현 단계 등이 포함됨.
     * 리눅스 지원의 가치
          + 리눅스 지원은 추가 판매량보다는 피드백과 QA 팀의 역할로 더 큰 가치가 있음.
          + 리눅스 커뮤니티는 게임 개발자에게 높은 품질의 버그 리포트를 제공함으로써 제품 개선에 크게 기여함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 리눅스 사용자들이 제공하는 버그 리포트의 양과 질이며, 이는 독립 게임 스튜디오에게 매우 가치 있는 자산이라는 점입니다. 리눅스 커뮤니티의 기술적 능력과 적극적인 참여는 게임 개발자들에게 무료 QA 팀과 같은 역할을 하며, 이는 게임의 품질 향상에 크게 기여합니다. 이러한 협력적인 관계는 소프트웨어 개발의 긍정적인 예로, 다른 플랫폼 사용자들에게도 이점을 제공합니다. 이 글은 소프트웨어 개발자들에게 흥미로운 인사이트를 제공하며, 커뮤니티 기반의 테스트와 피드백의 중요성을 강조합니다.

        Hacker News 의견

     * koderski의 세부사항에 대한 의견:
          + 리눅스 사용자들이 윈도우 사용자들보다 버그를 더 자주, 더 구체적으로 보고함.
          + 윈도우 플레이어들은 종종 같은 버그를 겪지만 보고하지 않거나 매우 모호하게 보고함.
          + 리눅스 플레이어들은 버그 보고에 있어서 6배 더 활발할 수 있음을 제안하는 제목.
     * Valve의 <i>Counter-Strike 2</i> 리눅스 지원에 대한 의문:
          + 윈도우 사용자들은 버그를 어디에, 누구에게 보고해야 하는지 잘 모름.
          + 윈도우 시스템의 버그 보고 도구는 리눅스에 비해 발전이 덜 됨.
          + 폐쇄 소스 애플리케이션 개발자들은 과거에 버그 트래커를 공개적으로 제공하는 것을 피함.
     * 리눅스 지원에 대한 긍정적인 경험:
          + 리눅스에서 보고된 버그 중 단 3개만이 리눅스 특유의 문제였으며, 나머지는 모든 플랫폼에 영향을 미침.
          + Slack 데스크톱 앱을 출시할 때 리눅스 버그 보고가 매우 구체적이고 상세했으며, 때로는 버그 수정 방법까지 포함됨.
     * 리눅스 사용자들의 직업과 버그 보고 습관:
          + 리눅스 게이머들 중 소프트웨어 개발자의 비율이 윈도우 게이머들보다 높을 것으로 추측됨.
     * 리눅스 시스템에서 버그 보고의 중요성:
          + 리눅스 시스템에서 버그를 발견할 때마다 개발자들을 돕기 위해 보고하는 것이 최소한의 예의라고 생각함.
     * 웹 앱의 버그 해결에 대한 개인적인 접근:
          + 소비자 웹 앱에서 버그를 발견하면 JS를 디오브스케이트하고, 버그를 찾아서 해결 방법과 함께 지원 팀에 연락함.
     * 리눅스 사용자로서의 버그 보고 경험:
          + 프로프라이어터리 Nvidia 드라이버를 사용할 때는 버그를 보고하지 않도록 훈련받음.
          + 게임에서는 Nvidia의 문제임에도 불구하고 버그 보고가 무시되는 경우가 많음.
          + 모든 OS에 영향을 미치는 게임의 크래시를 수정한 경험 공유.
     * 게임에 대한 추천:
          + 우주 시뮬레이션 게임을 좋아한다면 추천함.
          + 게임은 어렵지 않지만 기술적인 측면이 있고, 최소한의 안내만 제공됨.
          + 게임 메커니즘을 실험을 통해 파악하는 것이 재미있고 만족스러움.
"
"https://news.hada.io/topic?id=12039","HN 공개: 놀라운 실험을 목격하여 간단한 버전을 만들었습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN 공개: 놀라운 실험을 목격하여 간단한 버전을 만들었습니다

코드 탐색 실험 방법

     * Björn Staal의 아이디어에서 영감을 받아 간단한 코드 탐색 실험 진행.
     * 실험을 로컬에서 실행하는 방법:
          + npm i 명령어로 필요한 패키지 설치.
          + 새 터미널 창을 하나 더 열기.
          + 첫 번째 터미널에서 node server/server.js 실행.
          + 두 번째 터미널에서 cd client && http-server 실행.
          + 웹 브라우저에서 localhost:8080?b=1 열기.
          + 다른 탭에서 localhost:8080?b=2 열기.

미래의 아이디어

     * 로컬 스토리지 모드만으로 실행할 수 있는 플래그 추가 계획.
     * 무한한 수의 창을 지원하고 URL 쿼리의 필요성을 제거하는 옵션 추가 계획.

GN⁺의 의견

   이 글에서 가장 중요한 것은 간단한 코드 탐색 실험을 로컬 환경에서 실행하는 방법과 향후 실험을 개선하기 위한 계획이 제시되었다는 점이다. 이 글은 소프트웨어 개발에 관심 있는 사람들에게 흥미로울 수 있으며, 새로운 실험을 시도하고자 하는 초급 소프트웨어 엔지니어들에게 유익한 정보를 제공한다.

        Hacker News 의견

     * 데모에 대한 호평과 다중 모니터에서의 작동 방식에 대한 궁금증 표현
          + 타인의 작업에서 영감을 받았음을 인정하고 크레딧을 주는 행위에 대한 칭찬
     * 원작자 Bjorn Staal의 작업 언급과 localStorage 대신 소켓 사용에 대한 개인적 선호도 및 친구들과 공유 가능성 언급
          + 관련 트윗 링크 요청
     * 과거 윈도우 위치/크기를 활용한 데모에 대한 회상
          + 물리 시뮬레이션 데모 언급 및 창 간 메시지 채널을 통한 상호작용 가능성 설명
     * 크리스마스 기간 동안 스톨렌(전통적인 독일 크리스마스 빵)을 기대하는 개인적 취향 표현
     * 그래픽 프로그램에서 레이어 관리를 위한 유사 기능 제안
          + Krita, Inkscape, Gimp와 같은 프로그램에서 탭으로 레이어를 관리하는 아이디어 제시
     * WindowKill이라는 비디오 게임에 대한 추천
          + 윈도우를 활용한 게임플레이 설명 및 게임플레이 비디오 링크 제공
     * 브라우저 창을 이용한 퐁 게임 데모에 대한 언급
          + 관련 링크 제공
     * tldraw 개발자들이 창을 활용해 만든 멋진 작업 언급
          + 관련 트위터 링크 제공
     * 창 간 상호작용에 대한 렉(lag) 발생 궁금증 표현
          + 상호작용이 즉각적이어야 한다는 의견 제시
     * GitHub 페이지의 GIF를 이해하지 못하고 창 간 데이터 공유 방식에 대한 설명 요청
"
"https://news.hada.io/topic?id=12001","미국 정부, 영장 없이 경찰의 미국인 전화 기록 검색을 위해 AT&T에 지불","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               미국 정부, 영장 없이 경찰의 미국인 전화 기록 검색을 위해 AT&T에 지불

미국 정부, 경찰이 미국인의 전화 기록 검색할 수 있게 AT&T에 지불

     * 미국 상원의원이 미국 법 집행 기관이 Hemisphere Project라는 비밀 프로그램을 통해 미국 시민과 거주자의 전화 기록을 검색하고 있음을 비판함.
     * 이 프로그램은 경찰이 1987년 이후의 수조 건의 국내 전화 기록을 검색할 수 있게 하며, 매일 40억 건의 통화 기록이 추가됨.
     * 상원의원 Ron Wyden은 이러한 검색이 대부분 영장 없이 이루어진다고 주장하며, 법무부에 프로그램에 대한 정보 공개를 요구함.

분류되지 않았지만, 연방 정부는 공개를 원치 않음

     * 전자 프런티어 재단(EFF)을 포함한 개인 정보 보호 옹호자들이 비밀 감시 프로그램에 대해 더 많이 알아내기 위해 정보 자유 법과 주 수준의 공개 기록 소송을 제기함.
     * 프로그램 문서는 분류되지 않았지만, ""법 집행 민감""으로 표시되어 공개를 방해하고 있음.
     * 상원의원 Wyden은 이러한 지정을 제거하길 원하며, Hemisphere가 연방 개인 정보 영향 평가의 대상이 아니라고 주장함.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 미국 정부가 AT&T와 협력하여 경찰이 미국인의 전화 기록을 대규모로 검색할 수 있는 프로그램을 운영하고 있다는 것이다. 이는 개인의 사생활 보호와 관련하여 많은 논란을 일으킬 수 있는 주제이며, 사람들이 흥미를 가질 만한 이유는 개인 정보 보호와 정부의 감시 범위에 대한 지속적인 논의에 기여할 수 있기 때문이다.

        Hacker News 의견

     * 한 사용자는 메타데이터를 통해 폴 리비어를 찾는 방법에 대한 기사를 소개하며, 이 기사가 메타데이터의 위험성을 이해하지 못하는 친구들에게 공유하기 좋다고 언급함.
     * 다른 사용자는 정부가 법적인 방법으로 정보를 얻을 수 있음에도 불구하고, 시민의 권리를 보호하기 위한 노력이 부족하다고 우려를 표현함. 정부가 누구를 위해 일하는지 잊었다는 점이 특히 걱정스러움.
     * 한 사용자는 작은 마을의 보안관이 천 마일 떨어진 곳의 사람의 전화 기록에 접근할 수 있는지에 대한 시스템의 제한성에 대해 질문함.
     * EFF 웹사이트에서 Hemisphere 프로그램에 대한 추가 정보를 얻을 수 있음을 알려주는 사용자가 있음.
     * 한 사용자는 정부가 특정 통신사에게 돈을 주는 것이 반경쟁적이지 않느냐고 지적하며, 모든 통신사에 대한 법률을 제정하는 대신 한 통신사를 선택한 것에 대해 의문을 제기함.
     * AT&T 대변인의 발언을 인용한 사용자는 법적으로 정부와 법 집행 기관의 요구에 응해야 한다고 하지만, 40년치 통화 기록을 쉽게 색인화하여 보관하는 것이 법적으로 요구되는지에 대해 의문을 제기함. 이러한 기록을 보관하는 것이 비용이 많이 들 것이라고 추측하며, 그렇지 않다면 이미 기록을 폐기했을 것이라고 추론함.
     * 누군가가 헌법을 위반한 것에 대해 감옥에 갈 사람이 있는지 묻는 사용자가 있음.
     * 오픈 소스 전화 운영 체제와 끝에서 끝까지 암호화된 통신을 사용하기 시작할 더 좋은 이유를 제시하는 사용자가 있음. postmarketOS에 대한 링크를 제공함.
     * 반독점 평가를 통과하기 위해 해야 하는 타협에 대해 언급하는 사용자가 있음.
     * Project 2025의 계획을 지원하기 위해 이 기술이 사용된다면 상상할 수 없이 어두운 일이 발생할 것이라고 우려를 표현하는 사용자가 있음.
"
"https://news.hada.io/topic?id=12059","당신의 프라이버시 요구에 가장 적합한 브라우저 선택하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     당신의 프라이버시 요구에 가장 적합한 브라우저 선택하기

개인정보 보호 웹 브라우저 선택의 중요성

     * 웹 브라우저 선택은 온라인 신원 접근의 핵심 연결고리임.
     * Chrome은 미래에 더 많은 광고를 보여줄 예정이므로 개인정보 보호에 적합한 브라우저 선택 필요성 증가.
     * 개인정보 보호 브라우저 사용은 자신과 데이터 보호에 중요함.

개인정보 보호 브라우저를 선택해야 하는 이유

     * 방문하는 모든 사이트가 어떤 방식으로든 사용자를 추적함.
     * 광고 산업은 온라인 행동을 프로필로 만들어 이익을 극대화함.
     * 사용자는 개인정보 보호 브라우저로 이러한 추적을 중단할 수 있는 권한을 가짐.

개인정보 보호를 위한 최고의 브라우저 선택

     * Firefox, DuckDuckGo, Tor Browser 등 개인정보 보호에 중점을 둔 다양한 웹 브라우저 소개.
     * 각 브라우저의 독특한 기능과 장단점을 검토함.
     * EFF의 Cover Your Tracks 도구를 사용하여 브라우저가 공유하는 정보 확인 가능.

주요 개인정보 보호 브라우저

     * Firefox: 오픈소스, 비영리 조직에 의해 개발되어 사용자 데이터 추적을 주요 수익원으로 하지 않음.
     * DuckDuckGo: 기본적으로 제3자 추적기를 차단하고, 쿠키 자동 거부 기능 및 이메일 프라이버시 보호 서비스 제공.
     * Mullvad Browser: VPN 지원이 내장된 브라우저로, Mullvad의 검증된 프라이버시 보호 정책을 갖춤.
     * Brave: 내장된 광고 차단 및 추적 방지 기능, 선택적 암호화폐 토큰 광고 제공.

대안적 개인정보 보호 브라우저

     * Puffin: 클라우드 서버를 통해 사용자의 온라인 행동을 혼합하여 개인 브라우저 지문을 모호하게 함.
     * Pale Moon, GNU IceCat, Waterfox: Firefox 기반의 포크 버전으로, 더 많은 개인정보 보호 기능을 제공함.

개인정보 보호 및 익명성

     * 개인정보 보호와 익명성은 서로 다른 개념임.
     * Tor Browser: 온라인 추적 및 지문화 방지 기능과 Tor 네트워크를 통한 트래픽 라우팅을 제공하여 최고 수준의 개인정보 보호와 익명성을 보장함.
     * Hyphanet: 검열 저항 플랫폼으로, 안전하고 익명의 온라인 커뮤니케이션을 위한 P2P 인터넷을 제공함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 사용자의 개인정보 보호를 위해 적합한 웹 브라우저를 선택하는 것의 중요성입니다. 다양한 브라우저가 소개되어 있으며, 각각의 독특한 기능과 개인정보 보호 수준에 따라 사용자가 자신에게 맞는 브라우저를 선택할 수 있도록 도와줍니다. 이 글은 개인정보 보호에 관심이 있는 초급 소프트웨어 엔지니어에게 특히 흥미로울 것입니다. 왜냐하면 그들은 자신의 온라인 활동을 보호하는 방법을 배울 수 있기 때문입니다. 또한, 오픈소스 프로젝트와 비영리 조직에 의해 개발된 브라우저의 장점과 이들이 사용자 경험을 우선시하는 방식에 대해 알 수 있습니다.

        Hacker News 의견

     * 엣지 브라우저에 대한 의견
          + 엣지 브라우저가 좋은 대안으로 언급되는 것을 이해할 수 없음.
          + 크로미움 기반 브라우저들은 결국 uBlock Origin을 차단할 것이며, 이는 Manifest v2를 독자적으로 유지할 수 없기 때문임.
          + 엣지는 마이크로소프트의 스파이웨어로, 구글의 크롬보다 더 나쁜 것으로 여겨짐.
          + 유럽에서 엣지를 처음 열면 개인 데이터를 광고 산업 전체와 공유하는 것에 동의하도록 요구함.
          + 엣지는 광고 ID를 노출하고, 사용자의 동의 없이 텔레메트리를 수집함.
          + 엣지는 동기화된 데이터를 끝까지 암호화하지 않으며, 빙 검색 엔진을 기본으로 사용하도록 하드코딩되어 있음.
          + 다른 크로미움 기반 대안들, 예를 들어 비발디나 브레이브가 엣지보다 낫다고 여겨짐.
     * 파이어폭스로의 전환 경험
          + 크롬의 홈 화면에 실망하여 파이어폭스로 전환하는 데 걸리는 시간을 고민함.
          + 맥OS에서 크롬 사용자가 파이어폭스로 전환하는 것은 매우 쉽고, 크롬 설정을 포함한 모든 것을 가져올 수 있음.
     * 파이어폭스에 대한 장기적인 사용 경험
          + 15년 이상 파이어폭스 사용자로서 만족함.
          + 사람들이 크롬이 출시되었을 때 빠르게 전환한 것에 놀람.
          + 프라이버시에 대한 관심 부족에도 불구하고 크롬을 사용하는 사람들이 많음.
          + 파이어폭스의 하드닝 버전을 발견하고, 이는 사적 설정이 활성화된 파이어폭스임을 알게 됨.
          + 브레이브 브라우저에 대한 긍정적인 평가가 있으나, 파이어폭스에 만족하여 사용 중임.
     * 브라우저 선택에 대한 개인적인 의견
          + 크롬과 크로미움은 구글에 의해 개발되며, 크로미움 기반 브라우저 개발자들은 대부분의 어려운 부분을 구글에 의존함.
          + 파이어폭스는 기술적으로 독립적이지만, 재정적으로는 구글로부터 많은 자금을 받음.
          + 모바일에서 특히 애플이 사파리 독점을 강제하는 것은 건강하지 않은 시장 상황임.
     * 팔레 문 브라우저에 대한 비판적인 의견
          + 팔레 문을 2023년에 추천하는 것은 무책임함.
          + 탭, 웹사이트, 애드온에 대한 프로세스 격리나 샌드박싱이 없으며, 파이어폭스의 보안 수정 사항을 따라잡는 데 어려움이 있음.
          + 특정한 사용자 정의 요구가 없다면 팔레 문 사용은 손해임.
     * 맥OS 사용자를 위한 오리온 브라우저 추천
          + 오리온 브라우저는 매우 빠르고, 텔레메트리가 없으며, 웹킷을 기반으로 한 경량의 네이티브 빌드임.
          + 파이어폭스와 크롬 확장 프로그램을 지원하며, 강력한 내장 광고 차단 기능을 가짐.
     * 구글의 파이어폭스에 대한 자금 지원 문제
          + 구글이 파이어폭스를 기본 검색 엔진으로 설정하는 대가로 자금을 지원함.
          + 파이어폭스가 애드 블록을 허용하는 것이 장기적으로 문제가 될 수 있음.
     * 브레이브 브라우저에 대한 개인적인 선호
          + 파이어폭스를 좋아하지만 현재는 브레이브를 주로 사용 중임.
          + 광고 차단의 미래는 네트워크 측으로 옮겨질 것이며, piHole과 같은 서비스가 새로운 활력을 얻을 것임.
     * 브라우저에 대한 개인적인 애착
          + 엣지, 파이어폭스, 크롬을 혼합하여 사용 중임.
          + 중요한 작업에는 파이어폭스를 사용하고, 그 외의 작업에는 크롬이나 엣지를 사용함.
     * 크롬의 초기 개인 정보 추적 문제
          + 크롬이 출시될 때부터 구글의 강력한 추적 기능을 포함하고 있음을 인지함.
          + 파이어폭스를 계속 사용하며 크롬으로의 전환을 피함.
"
"https://news.hada.io/topic?id=12022","Shellcheck이 여러분의 쉘 스크립트에서 버그를 찾아냅니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Shellcheck이 여러분의 쉘 스크립트에서 버그를 찾아냅니다

ShellCheck 소개

     * ShellCheck는 쉘 스크립트의 버그를 찾아주는 도구임.
     * 로컬 환경에서 cabal, apt, dnf, pkg, brew를 통해 설치 가능함.
     * 스크립트를 붙여넣으면 ShellCheck가 분석 결과를 출력함.

ShellCheck의 특징

     * ShellCheck는 GPLv3 라이선스로 자유롭게 사용할 수 있음.
     * ShellCheck Wiki에 문서화되어 있고, GitHub에서 소스 코드를 확인할 수 있음.
     * 대부분의 배포판이나 패키지 매니저에서 이미 패키징되어 있음.
     * 주요 에디터에서 통합된 린터로 지원되며, CodeClimate, Codacy, CodeFactor를 통해 GitHub 저장소의 코드를 자동으로 검사할 수 있음.
     * Haskell 언어로 작성되었으며, 이에 관심이 있는 사용자에게 적합함.

감사의 말

     * GitHub Sponsors에 대한 특별한 감사를 표함: Gitpod, Mercedes-Benz, BashSupport Pro, per1234, WhitewaterFoundry, cavcrosby, dcminter, photostructure, Cronitor, djdefi, steve-chavez 등.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 ShellCheck가 쉘 스크립트의 버그를 찾는 데 유용한 도구라는 점임.
     * ShellCheck는 무료이며, 다양한 플랫폼과 에디터에서 지원되고, 사용하기 쉬운 점이 사람들에게 흥미로울 수 있음.
     * 특히, 오픈 소스 커뮤니티의 지원과 Haskell 언어로 개발되었다는 점이 소프트웨어 개발자들에게 매력적으로 다가갈 수 있음.

        Hacker News 의견

     * 스크립트 작성 시 주의사항
          + -u (nounset) 옵션을 사용하여 선언되지 않은 변수 사용 시 오류 발생을 권장함. 배열 확장 시 빈 배열이 unbound로 간주되는 경우가 예외임.
          + -n (noexec) 옵션을 사용하여 명령어 실행을 방지하는 가짜 실행(dry-run)을 시도할 수 있음.
          + -e (errexit) 옵션도 유용하지만, 실패한 ""naked"" 명령어만 종료를 유발한다는 점을 주의해야 함. 이를 피하기 위해 명령어에 || fail ""...""를 추가하는 것을 선호함.
     * 쉘 스크립트의 취약점 발견
          + 산술 확장을 통한 권한 상승 취약점을 발견함. 예를 들어, $((1 + ENV_VAR))를 통해 $ENV_VAR을 제어할 수 있다면 코드를 주입할 수 있음.
          + Shellcheck는 기본 설정으로는 이를 잡아내지 못함. 보안에 중요한 기능을 구현할 때는 쉘을 사용하지 않는 것이 좋음.
     * Shellcheck와 strictbash
          + Shellcheck는 매우 유용함.
          + strictbash는 스크립트를 실행하기 전에 Shellcheck을 실행하는 래퍼(wrapper)로, 오류가 있으면 스크립트를 실행할 수 없게 함. 또한 모든 Bash ""strict mode"" 플래그를 설정함.
     * Shellcheck에 대한 언급
          + Shellcheck에 대한 많은 언급이 있으며, 마지막 대규모 토론은 2021년에 있었음.
     * Haskell과 Turtle 사용
          + Haskell을 사용하여 Turtle 라이브러리와 함께 배포 스크립트를 변환함으로써 중복을 크게 줄임.
          + 결과적으로 코드가 훨씬 짧아짐.
     * Shellcheck와 linters의 사용
          + ""모든 경고를 수정한 후에 커밋한다""는 원칙을 따르며, Shellcheck 및 다른 linters를 pre-commit 설정에 포함함.
          + 대부분의 쉘 스크립트는 .gitlab-ci.yml 파일에 포함되어 있어 검사하기 어려움. 이를 자동으로 검사하는 래퍼를 만듦.
     * Bash 언어 서버
          + Bash 언어 서버도 존재함.
     * Shellcheck의 학습 효과
          + Shellcheck를 사용하여 첫 번째 프로덕션 /bin/sh 스크립트를 검사했을 때, 80년대부터 스크립트를 작성해온 경험에도 불구하고 새로운 것을 배움.
     * Bach 사용 권장
          + Bash를 사용해야 할 때 Bach를 사용하는 것을 권장함. 충분히 긴 작업에 대해 Bash를 사용하는 것은 적절하지 않을 수 있음.
     * Shellcheck와 소스/임포트 처리
          + Shellcheck는 훌륭하지만, 소스나 임포트를 다루는 것은 매우 번거로움. 이는 sh가 악몽과 같기 때문에 발생하는 문제임.
"
"https://news.hada.io/topic?id=11953","유튜브 저작권 ID 사기꾼들, 아티스트 800여명에게 $3.3M(42억원) 배상 명령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            유튜브 저작권 ID 사기꾼들, 아티스트 800여명에게 $3.3M(42억원) 배상 명령

유튜브 콘텐츠 ID 시스템을 이용한 사기 사건 요약

     * 두 남성이 정당한 음악 저작권자로 가장하여 유튜브의 콘텐츠 ID 시스템에서 2300만 달러 이상을 취득함.
     * 해당 사기범들은 체포되어 감옥에 수감되었으며, 법원은 피해자들에게 330만 달러를 배상하라는 명령을 내림.

  수백만 달러에 달하는 사기

     * 사기범들의 회사인 MediaMuv LLC.는 Content ID 프로그램의 직접적인 회원이 아니었으며, 플랫폼에 접근할 수 있는 신뢰할 수 있는 제3자 회사를 통해 운영됨.
     * 50,000개 이상의 저작권이 있는 노래의 권리를 소유하고 있다고 거짓 주장하여 2300만 달러 이상의 수익을 창출함.
     * 두명의 피고인이 유죄를 인정함
     * 이들은 YouTube에서 아직 수익을 창출하지 못한 라틴 음악을 찾아서 해당 콘텐츠를 자신의 것으로 주장

  징역형

     * 유죄 인정이 형량 감소에 도움이 되었을 수 있지만, 피고인들은 결코 가볍게 처벌받지 않음.
     * 애리조나 연방 법원은 Jose Teran에게 70개월의 징역형을 선고하고, 이후 3년간의 보호 관찰을 명령함.
     * 몇 주 후, 같은 법원은 Webster Fernandez에게 46개월의 징역형을 선고하고, 이후 3년간의 감독 하에 석방될 것을 명령함.

  330만 달러 배상 명령

     * 선고 당시, 당국은 유튜브 콘텐츠 ID 사기의 피해자들이 앞으로 나와 배상을 청구할 것을 요청함.
     * MediaMuv 작전은 주로 아직 유튜브에서 콘텐츠를 수익화하지 않은 스페인어 사용 아티스트들을 대상으로 함.
     * 지난 몇 주 동안 수백 명의 아티스트들이 몇 십 달러에서 10만 달러가 넘는 청구를 제출함.
     * 피해 아티스트들 중 일부는 변호사나 레이블에 의해 대리되었으며, RIAA도 아티스트들을 대신하여 청구를 제출함.
     * 미국 검찰청과 변호사들은 총 330만 달러 이상의 배상금을 즉시 지급하기로 합의함.
     * 약 800명의 아티스트들이 청구서를 제출

GN⁺의 의견

   이 기사에서 가장 중요한 점은 유튜브의 콘텐츠 ID 시스템이 어떻게 악용될 수 있는지를 보여주는 사례를 제공한다는 것이다. 이 사건은 저작권 보호 시스템이 어떻게 취약할 수 있는지를 드러내며, 피해를 입은 아티스트들에게 정의가 실현되었다는 점에서 사람들에게 흥미로울 수 있다. 사기범들이 실제로 감옥에 수감되고 피해 아티스트들에게 상당한 금액을 배상해야 한다는 점은 저작권 보호와 관련된 법적 조치가 실제로 효과가 있음을 보여준다.

   한국 가요 저작권을 주장한 중국 계정이 있어서 추적 프로그램에 나왔던 적이 있었죠.

   2300만 달러를 취득하고 330만 달러를 배상한건가요? @_@

   근데 뭔가 음악 저작권 시스템이 굉장히 허술하네요. 어마어마한 저작권료가 지급될 때 까지 전혀 몰랐다니...

        Hacker News 의견

     *
          + 1960년대 공공 도메인 원자력 위원회 영화를 국립 기록 보관소에서 16mm 필름으로 스캔하여 YouTube에 게시함. 광고가 많이 달리는 것을 발견했는데, 수익 창출을 끈 상태였음. 몇몇 사람들이 2010년대에 ""리마스터""된 오래된 음악을 발매하면서 저작권 주장을 했던 것으로 밝혀짐. 이에 불만을 느껴 모든 주장을 이의 제기했고, 어제 모든 주장이 해제됨. 귀찮은 일이었음.*
          + 1960년대 원자력 위원회 영화를 YouTube에 올린 사용자가 저작권 주장으로 인해 발생한 문제를 해결한 경험 공유
     *
          + 기사는 대충 훑어봤지만, 사기꾼들이 2300만 달러를 벌고 330만 달러를 갚아야 하며 (아마도 실제로는 갚지 않을 것) 일부 자산이 압수되었다고 이해함. 4년과 6년의 징역형을 받았지만, 선처로 인해 단축될 수도 있음. 3년 후 이들은 아마도 500만에서 1000만 달러를 숨겨놓고 나올 것임. 나쁘지 않은 투자 수익률이라고 생각함 :(*
          + 사기범들이 벌금과 징역형에도 불구하고 상당한 이득을 볼 것으로 예상하는 의견 제시
     *
          + YouTube 저작권 주장의 야생 서부에서 드디어 정의가 실현됨. 사기꾼들이 330만 달러를 뱉어내는 것은 그들이 야기한 혼란에 비하면 적은 금액이지만, 시작이라도 됨. 이것이 단발성 좋은 뉴스가 아니라 선례가 되기를 바람. 다음 단계: 진정한 창작자들이 자신의 작품을 소유하고 있음을 증명하기 위해 뛰어넘어야 하는 장애물을 없애기 위해 저작권 ID 시스템 전반을 개편해야 함. YouTube에서 콘텐츠를 실제로 삭제하는 저작권 주장을 제기하는 것이 훨씬 더 어려워져야 함. 이러한 ""저작권 소유자""들이 가진 권력의 양이 미친 것임.*
          + YouTube 저작권 주장에 대한 정의 구현을 환영하며, 저작권 ID 시스템의 개선 필요성을 강조하는 의견
     *
          + Google이 원래 지불해야 할 전액을 아티스트에게 지불하지 않는 이유는 무엇인가?*
          + Google이 잘못된 수령인에게 지급한 금액에 대해 아티스트에게 전액을 지불해야 하는지에 대한 의문 제기
     *
          + Content ID 작동 방식을 잘 모르지만, YouTube에 이미 존재하는 콘텐츠 ID 서명에 대해 새로운 콘텐츠 ID 서명이 경고 표시되어야 함.*
          + YouTube의 Content ID 시스템이 중복되는 콘텐츠에 대해 경고해야 한다는 제안
     *
          + 2400만 달러를 벌었지만 300만 달러를 지불하고 70개월을 복역해야 함.. 나쁘지 않은 거 같음.*
          + 사기범들이 벌금과 징역에도 불구하고 상당한 이득을 볼 것으로 보는 의견
     *
          + 전체 산업이 사기이며, 음악/공연만이 진짜임. 내용 복제로 인한 재정적, 홍보적 이득에 대한 논쟁은 요하네스 구텐베르크 이전으로 거슬러 올라감. 최근까지 이익을 위한 복제 행위와 사람들의 시선을 돈으로 바꾸는 행위 사이에는 명확한 구분이 있었음. 실제로 저작권 산업은 성공적인 로비로 인해 횡재를 함, 디즈니와 맞서는 것은 아무도 감히 하지 않음. 범죄자들은 단지 대중 문화의 증권화에 늦게 참여한 것뿐임. 주된 비극은 대부분의 회사들이 더 이상 매체나 콘텐츠의 질을 존중하지 않는다는 것임. ML 기술 CGI로 마크 해밀을 착취한 것은 직업에 대한 최종 모욕이자 저작권법의 황당한 왜곡임. 멋진 하루 되세요 =)*
          + 콘텐츠 복제와 관련된 산업의 문제점을 지적하며, 저작권법의 남용과 콘텐츠의 질 저하에 대한 우려를 표현하는 의견
     *
          + [삭제됨]*
          + 삭제된 댓글
     *
          + 제목이 오해의 소지가 있음. RIAA에게 330만 달러를 지불함. 아티스트에게 지불하는 것이 아님.*
          + 제목이 RIAA에 대한 벌금 지불을 아티스트에 대한 지불로 오해할 수 있음을 지적
     *
          + 안타깝게도 이것은 ""정당한"" 지식재산권 소유자들이 DMCA를 이용해 YouTuber들을 사기 치는 방법에 대한 것이 아니라, 단지 몇몇 소규모 사기꾼들에 대한 것임.*
          + 이 사건이 YouTube에서 발생하는 더 큰 저작권 관련 문제를 다루지 않고, 소수의 사기범들에 초점을 맞추고 있음을 지적하는 의견
"
"https://news.hada.io/topic?id=12016","초보자를 위한 생성적 AI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             초보자를 위한 생성적 AI
"
"https://news.hada.io/topic?id=12043","Whisky - 애플의 게임 포팅 툴킷을 이용한 Wine 강화판","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Whisky - 애플의 게임 포팅 툴킷을 이용한 Wine 강화판

     * GUI 기반의 쉬운 설치
     * SwiftUI로 개발된 빠른 속도의 macOS 네이티브 UI
     * 17개 언어 지원
     * CrossOver 22.1.1 과 GPTK 기반으로 개발됨
     * GPTK(Game Porting ToolKit) 컴파일 기다릴 필요없이 설치 즉시 게임 실행 가능

맥 게이밍 혁명에 참여하다

     * 맥 게이밍 플랫폼인 Whisky를 통해 최신 게임 타이틀을 손쉽게 경험할 수 있음.
     * Apple의 Game Porting Toolkit의 힘을 빌린 Wine으로 강화되어 다양한 인기 게임을 지원함.
     * Grand Theft Auto V, Baldur's Gate 3, Cyberpunk 2077 등 유명 게임들이 포함된 지원 게임 목록은 계속해서 확장 중임.

사용자 친화적인 설치 및 도구

     * 터미널 경험이 없어도 Whisky의 설치가 간단하고 쉽게 진행됨.
     * Game Porting Toolkit(GPTK) 컴파일에 시간을 낭비하지 않고, Whisky 설치부터 게임 시작까지 몇 분 안에 가능함.
     * macOS에 완벽하게 통합된 네이티브 UI로, 빠른 로딩과 친숙한 디자인 제공함.

macOS와의 완벽한 통합

     * macOS Sonoma를 기반으로 한 반응형이며 견고한 구조로 구축됨.
     * 드래그 앤 드롭, 터미널 통합, 네이티브 로깅 등 macOS 통합 기능을 제공함.
     * Xcode와 연결하여 GPU 캡처를 비롯한 디버깅을 간편하게 할 수 있음.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 맥 사용자들이 Whisky를 통해 간편하게 최신 게임을 즐길 수 있다는 것임. Apple의 Game Porting Toolkit을 활용하여 다양한 인기 게임을 지원하고, 사용자 친화적인 설치 과정과 macOS와의 완벽한 통합이 특징임. 이러한 점들은 맥 사용자들에게 게임 경험을 향상시키는 새로운 방법을 제시하며, 게임과 기술에 관심 있는 사람들에게 흥미로운 소식이 될 것임.

   Steam 설치하는데 잘 안되더라고요ㅠ

   밑에 있는 ""사용자로서 게임을 즐기는 경험은 고통스러움. 일부 게임은 많은 설정 후에 작동하고, 많은 게임은 전혀 작동하지 않거나 특정 플랫폼에서만 작동함. 많은 문제들이 해결되지 않고 있음."" 이 의견대로

   와! 이거 너무 편하고 좋네요
   설치 이후 윈도우 프로그램의 실행까지 너무 심플합니다

   좋은 아이템이네요.. 저는 xcode 버전 문제가 있는지 빌드가 안 되더라구요.
   brew 재설치 하는 것도 꽤 귀찮았구요. 간단해져서 좋네요!

   sonoma에서 notepad++가 돌아가는 걸 보니 감개무량하네요
   물론 단축키는 맥에 맞게 전부 다시 설정해야 하지만(...)

   와우. 이걸 해낸 사람이 있군요. 더 놀라운건 10대라구요!

        Hacker News 의견

     * 아이작은 맥 게이밍 분야에 많은 기여를 한 인물로, Whisky와 Ryujinx, Playcover 개발에 참여했으며, 아직 17세임.
     * 사용자로서 게임을 즐기는 경험은 고통스러움. 일부 게임은 많은 설정 후에 작동하고, 많은 게임은 전혀 작동하지 않거나 특정 플랫폼에서만 작동함. 많은 문제들이 해결되지 않고 있음.
     * 애플이 Valve가 Proton과 Steam Deck Verified로 한 것처럼 이를 제대로 유지할 팀을 고용하기를 바람. 한편, GeForce Now는 매우 간편하고 매번 작동하며 업데이트에 문제가 없는 경험을 제공함.
     * Whisky 사용법이 명확하지 않음. 사용 가이드를 GitHub 저장소에서 찾음.
     * M1 Max를 사용하여 Hogwarts Legacy를 플레이하고 있으며, 성능에 만족함.
     * Xbox 설계가 가상 머신을 사용한다는 사실을 인지하는 것이 중요함. 각 게임은 자체 OS를 가진 독립된 VM임.
     * CS2를 Steam을 통해 설치하고 실행하여 120fps로 온라인 서버에서 플레이하는 데 성공함. 이러한 성능이 가능하다는 것에 놀라움.
     * 독일의 주요 소매업체에서 구입한 가장 저렴한 기본 모델 Mac Mini M2의 1080p 게이밍 성능에 놀람. 현재로서는 비슷한 가격대의 WIntel 기계와 비교할 만한 성능을 제공하는 기계가 없음.
     * 맥OS 에뮬레이터(정확히는 맥OS API를 구현하는 라이브러리)가 있으면 좋겠음. 예를 들어 리눅스에서 사파리를 실행할 수 있게 하는 것.
     * Heroic Game Launcher를 선호함. GPTK를 감지하고, 다양한 와인 바이너리를 다운로드할 수 있으며, 각 게임마다 와인 런타임을 설정할 수 있음.
     * 지원 수준과 몇 가지 CPU에 대한 프레임레이트를 보여주는 표가 있으면 좋겠음. 커뮤니티가 기여할 의향이 있다면 이 정보가 유용할 것임.
"
"https://news.hada.io/topic?id=11988","OpenAI, ChatGPT with Voice를 모든 무료 사용자에게 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               OpenAI, ChatGPT with Voice를 모든 무료 사용자에게 공개

     * 이제 무료 사용자들도 앱내에서 ChatGPT 앱을 통해 음성으로 질문하고 답변 받을수 있게 됨(헤드폰 아이콘)
     * 9월에 ChatGPT Plus 사용자용으로 미리 공개된 것
     * 예제 영상에서는 주말동안의 경영진 교체 상황을 의미하는 듯한 농담으로 질문을 던짐
       ""팀원들이 긴 밤을 보냈고 우린 배가 고파. 778명이 먹으려면 16인치 피자를 몇 판 주문해야 하지?""

        Hacker News 의견

     * 사용자는 몇 주 동안 챗봇을 사용해왔으며, 이제 팟캐스트를 대체하는 도구로 활용함. 주제를 선택하고 요약을 요청한 다음, 명확히 이해하기 위해 질문을 함. 때로는 재미로 챗봇과 대화를 나누기도 함. 예를 들어, 챗봇과 함께 스타워즈 시퀄을 영화별로 재작성하는 채팅을 진행함. 사용자는 사회적 학습에 적합하다고 느끼며, 챗봇은 질문에 지치거나 짜증내지 않음.
          + 사용자의 15세 자녀가 챗봇과 퍼시 잭슨에 대해 대화를 나누는 동안, 챗봇이 대화 중 'kind of'라는 표현을 사용하기 시작함. 이는 챗봇이 사용자에게 명확한 답변을 제공하려는 목적으로, 사용자의 말투를 모방하는 것일 수 있음. 사용자는 챗봇의 자연스러운 일시 정지와 강조가 유용하다고 느낌. 중요하거나 복잡한 정보를 전달할 때 속도를 늦추고, 인간과 마찬가지로 일시 정지와 음조 변화가 신호 역할을 함.
     * 또 다른 사용자는 챗봇의 자연스러운 일시 정지 기능이 전환에 약간의 불편함을 느끼지만, 전반적으로 만족스러운 경험을 함. 산책을 하면서 챗봇과 대화를 나누고, 질문과 후속 질문을 통해 생각을 정리하는 데 도움을 받음.
          + 가족과 함께 챗봇을 사용하여 우리가 주인공인 상호 작용하는 모험 이야기를 만들어 즐거운 시간을 보냄. 모험을 진행하고 내장된 DALL-E를 사용하여 모험의 장면 이미지를 생성함.
     * 한 사용자는 챗봇을 시험해보고 매우 인상적이라고 평가함. 음성 기능을 선호하지 않았지만, 이 챗봇은 충분히 지능적이어서 구조화되지 않은 대화를 통해 빠르게 원하는 결과를 얻을 수 있음.
     * 한 개발자는 일반 게이밍 PC와 좋은 GPU를 사용하여 로컬에서 실행되는 음성 AI를 개발 중임. 오픈 소스 AI 모델을 사용하여 GPT-4보다 빠르게 반응하는 데모 버전을 제공함. 오픈 모델이 빠르게 발전하고 있으며, 몇 년 안에 $1,000짜리 게이밍 PC에서 GPT-4보다 나은 모델이 실행될 것이라고 예상함.
     * 사용자는 OAI 직원들이 휴가 중임에도 불구하고 챗봇이 출시된 이유에 대해 궁금해함. 추수감사절 모임에서 챗봇을 시연하여 앱 다운로드를 증가시키려는 성장 해킹 전략일 수 있음을 추측함.
     * 한 유럽 사용자는 챗봇의 특정 목소리가 너무 쾌활하고 열정적이며 일상적이어서 시간이 지남에 따라 성가시게 느껴짐. Siri의 목소리가 이 챗봇보다 덜 과장된 느낌이라서 어떤 면에서는 Siri를 선호함. 이는 미국과 유럽 간의 문화적 기대 차이 때문일 수도 있음.
     * 사용자는 챗봇 음성이 모든 사용자에게 무료로 제공된다는 사실과 그렉 브록만이 자신이 떠난 회사의 발표를 리트윗한 것 중 어떤 부분에 집중해야 할지 궁금해함.
     * 한 사용자는 챗봇이 사용자의 목소리를 훈련 목적으로 사용하고 있으며, 사용자가 공유하는 모든 정보가 OpenAI에 의해 영구적으로 소유되고 기본적으로 훈련 목적으로 사용될 수 있다는 사실에 대한 논의가 부족하다고 지적함.
     * OpenAI 계정이 발표하고 그렉 브록만이 리트윗한 사실을 사용자가 공유함.
"
"https://news.hada.io/topic?id=11957","OpenAI 직원들, 이사회가 사임하지 않을 경우 퇴사하겠다고 위협","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenAI 직원들, 이사회가 사임하지 않을 경우 퇴사하겠다고 위협

OpenAI 직원들, 이사회 사퇴 요구

     * OpenAI의 730명 이상 직원들이 이사회의 사퇴와 해임된 CEO Sam Altman의 복귀를 요구하는 서한에 서명함.
     * 직원들은 이사회의 행동이 회사의 미션과 신뢰를 손상시켰으며, 이사회의 능력 부족을 지적함.
     * 이사회의 결정에 반대하는 주요 인물로는 회사의 최고 과학자이자 이사회 멤버인 Ilya Sutskever가 포함됨.

OpenAI의 이례적인 구조와 리더십 변화

     * OpenAI의 CTO Mira Murati가 임시 CEO로 임명되었으나, 투자자들의 반발로 이사회는 Altman의 복귀를 고려함.
     * Microsoft CEO Satya Nadella는 Altman과 Brockman이 새로운 고급 AI 연구 부서를 이끌기 위해 Microsoft에 합류한다고 발표함.
     * OpenAI의 이사회는 Murati를 제거하고 Twitch의 전 CEO인 Emmett Shear를 임시 CEO로 임명함.

OpenAI 직원들의 반응과 Microsoft의 기회

     * OpenAI 직원들은 Altman이 회사로 돌아오지 않을 것이라는 소식에 회사를 떠날 준비를 함.
     * 직원들은 Microsoft의 새로운 자회사에서 모든 OpenAI 직원들을 위한 자리가 있다는 보장을 받음.
     * Altman의 해임 이유는 여전히 불분명하며, 직원들은 이사회에 구체적인 증거를 요구함.

OpenAI의 미래와 거버넌스 구조

     * OpenAI의 이사회는 Sutskever, Adam D'Angelo, Helen Toner, Tasha McCauley로 구성되어 있음.
     * 직원들은 이사회의 사퇴와 Bret Taylor 및 Will Hurd와 같은 새로운 독립 이사의 임명을 요구함.
     * 이 사태는 OpenAI의 독특한 거버넌스 구조와 AI 개발 경쟁의 분열성을 드러냄.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 OpenAI의 직원들이 회사의 미래와 리더십에 대한 심각한 우려를 표명하고, 이사회의 사퇴와 해임된 CEO의 복귀를 요구하는 것임.
     * 이 글이 흥미로운 이유는 AI 산업의 선두주자인 OpenAI 내부의 대규모 반란과 이로 인해 Microsoft가 AI 분야의 주요 인재를 흡수할 기회를 얻었다는 점에서 사람들의 관심을 끌 수 있음.

   와우.. 정말 시대적으로 드라마틱한 상황이에요.
   5~10년 뒤 누군가의 자서전엔 지금 펼쳐지지 않은 내용들이 이야기 되겠죠?

   소비자들에게는... 이러나 저러나 X됐네요...
   결국 SD 직접 돌리는 등의 대안이나 다른 곳으로 눈을 돌리지 않을 수 없는 상황이 왔습니다.

   사퇴를 요구하며 서명한 문서는 다음과 같습니다.
   https://twitter.com/karaswisher/status/1726598360277356775

   이미지로 올라와서 ShowGN에 올라온 ChatGPT 사진번역기에게 번역 요청해봤습니다.

   OpenAI 이사회에게,

   OpenAI는 세계를 선도하는 AI 회사입니다. 우리, OpenAI의 직원들은 최고의 모델을 개발하고 이 분야를 새로운 경계로 밀어붙였습니다. 우리의 AI 안전성과 거버넌스 작업은 전 세계적인 기준을 형성합니다. 우리가 만든 제품들은 수백만 명의 사람들에 의해 사용되고 있습니다. 지금까지 우리가 일하고 소중히 여기던 회사는 결코 이렇게 강력한 위치에 있지 않았습니다.

   당신들이 샘 알트만을 해고하고 그렉 브록만을 이사회에서 제외한 과정은 모든 작업과 우리의 미션과 회사를 위태롭게 만들었습니다. 당신들의 행동은 당신들이 OpenAI를 감독할 능력이 없음을 분명히 했습니다.

   우리가 갑작스럽게 당신들의 결정을 알게 되었을 때, OpenAI의 리더십 팀은 회사를 안정화하기 위해 신속히 움직였습니다. 그들은 당신들의 우려를 신중히 듣고 협력하기로 했습니다. 그러나 구체적인 사실에 대한 어떤 서면 증거도 제공하지 않았습니다. 그들은 점점 당신들이 당신들의 임무를 수행할 수 없다는 것을 깨닫고 있었고, 선의로 협상하지 않고 있다는 것을 인식했습니다.

   리더십 팀은 가장 안정적인 전진 방향을 제안했습니다 - 바로 당신들이 사임하고 자격 있는 이사회를 구성하여 회사를 안정적으로 미래로 이끌 수 있는 것입니다. 당신들의 초기 결정 이후 이틀 이내에, 당신들은 다시 임시 CEO 미라 무라티를 대체하고 회사 이익에 반하는 결정을 내렸습니다. 당신들은 또한 리더십 팀에게 회사를 파괴하는 것이 ""미션과 일치한다""고 알렸습니다.

   당신들의 행동은 당신들이 OpenAI를 감독할 능력이 없다는 것을 분명히 했습니다. 우리는 당신들을 더 이상 믿을 수 없으며, 당신들이 무능력하고 판단력이 부족하며 OpenAI의 미션과 직원들을 돌보지 않는다는 것이 명백합니다. 우리, 아래 서명한 사람들은 OpenAI를 사임하고 샘 알트만과 그렉 브록만이 이끄는 Microsoft 자회사에 합류할 수도 있습니다. Microsoft는 우리 모두에게 자회사에서 일할 자리가 있다고 확신시켰습니다. 우리는 이 단계를 취할 것입니다, 모든 현재 이사회 멤버가 사임하고, 이사회가 브렛 테일러와 윌 허드 같은 새로운 독립 이사 두 명을 임명하며, 샘 알트만과 그렉 브록만을 복직시키지 않는 한.
    1. 미라 무라티
    2. 브래드 라이트캡
    3. 제이슨 권
    4. 보이체크 자렘바
    5. 알렉 래드포드
    6. 안나 마칸주
    7. 밥 맥그루
    8. 스리니바스 나라야난
    9. 체 창
   10. 릴리안 웡
   11. 마크 첸
   12. 일리야 스츠케버

        Hacker News 의견

     * 마이크로소프트가 OpenAI와의 거래에서 ChatGPT의 지적 재산권을 완전히 소유하고 있어, 새로 시작할 필요 없이 ChatGPT를 포크할 수 있음. 또한, 마이크로소프트가 OpenAI에 제공한 130억 달러 중 상당 부분이 Azure 크레딧 형태라는 점을 기억할 것.
     * 현재 상황에서 모두가 패자라고 생각하며, Ilya Sutskever가 이러한 결정에 서명함으로써 무엇을 믿어야 할지 혼란스러움을 표현함.
     * 회사 내에 존재할 수 있는 착각이 도전받지 않으면 계속 유지될 수 있으며, 이는 OpenAI의 경우 비영리 원칙이 회사의 성공을 이끈다는 착각이었음. 이 착각이 도전받았을 때, 전체 환상이 깨졌음.
     * 마이크로소프트가 이 모든 상황을 계획한 큰 '쿠데타'라고 생각할 수도 있지만, 그렇게 생각하기에는 음모론에 너무 반대하는 입장임.
     * 이 상황이 매우 형편없이 처리되었으며, 마이크로소프트가 이 상황에서 가장 이득을 볼 것으로 보임. 특히 OpenAI 직원 거의 500명이 팀으로 잘 작동하는 상태로 마이크로소프트로 이동할 경우 더욱 그러함.
     * 현재 상황이 우리 세대의 ""배신한 여덟 명"" 이야기와 유사하게 전개되고 있으며, 이로 인해 다양한 접근 방식을 탐구하는 AI 스타트업의 바다가 만들어질 수 있음.
     * 실리콘밸리 외부인으로서 OpenAI 이사회 구성원들의 자격에 의문을 제기함. 젊은 사람들이 '이사회의 이사'나 '그것의 대통령'이라고 부르는 것에 대해 노련한 베테랑의 부재를 지적함.
     * Ilya Sutskever가 트위터에 OpenAI 이사회의 행동에 대한 깊은 후회를 표현하며, 회사를 다시 하나로 모으기 위해 모든 것을 할 것이라고 언급함.
     * 이 드라마에 대한 업데이트가 있는지 궁금해하며, 마이크로소프트의 강력한 움직임에 놀라움을 표현함. OpenAI가 이번 주말까지 존재할지 확신할 수 없을 정도로 상황이 급변하고 있음.
"
"https://news.hada.io/topic?id=11990","장(腸)의 '제2의 뇌'에서 건강의 핵심 요소가 드러나다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    장(腸)의 '제2의 뇌'에서 건강의 핵심 요소가 드러나다

장의 '두 번째 뇌'에서 건강의 핵심 요소가 드러남

     * 장에는 신경 세포와 함께 소화와 질병에서 중요한 역할을 하는 글리아 세포가 존재함.
     * 글리아 세포는 과거에는 단순히 뉴런 사이를 채우는 '접착제'로 여겨졌으나, 최근 연구를 통해 다양한 생리적 역할이 밝혀짐.
     * 장의 글리아 세포는 소화, 영양분 흡수, 혈류 및 면역 반응에서 활발한 역할을 하며, 다양한 유형의 글리아 세포가 존재함.

글리아는 모든 것을 함

     * 글리아 세포에 대한 연구는 최근에야 가능해짐. 이전에는 뉴런의 활동을 측정할 수 있었지만 글리아는 전기적으로 '지루한' 세포로 여겨졌음.
     * 새로운 연구 도구들 덕분에 글리아 세포가 장 조직의 손상이나 염증에 대응하고, 장의 장벽을 유지하며, 소화관의 수축을 조절하고, 조직 재생에 중요한 역할을 한다는 사실이 밝혀짐.
     * 글리아 세포는 미생물, 뉴런, 면역계 세포와 소통하며, 다양한 역할을 수행하고, 환경 변화에 따라 세포 유형을 바꿀 수 있는 능력을 가짐.

장내 글리아 세포의 다양성

     * 연구자 Marissa Scavuzzo는 장내 글리아 세포의 다양성을 밝히기 위해 새로운 연구 방법을 개발함.
     * Scavuzzo의 연구는 장내 글리아 세포의 여섯 가지 하위 유형을 발견함. 이 중 '허브 세포'라 명명된 새로운 유형의 글리아 세포는 음식이 소화관을 통과할 때 이를 감지하고 장 조직의 수축을 조절하는 역할을 함.
     * 글리아 세포는 장의 운동성에 영향을 미치며, 다양한 소화관 질환의 치료법 개발에 중요한 역할을 할 수 있음.

장의 통증과 글리아

     * 장 질환은 소화 문제뿐만 아니라 통증을 동반함. 글리아 세포는 면역 세포의 활동을 조절하므로, 많은 장 질환에서 중요한 역할을 함.
     * 글리아 세포의 기능 이상은 자가면역 질환과 염증성 장 질환의 발병과 진행에 영향을 미침.
     * 글리아 세포는 뉴런을 자극하여 통증을 유발하는 분자를 분비하며, 이는 장 질환의 통증 완화를 위한 치료 타겟이 될 수 있음.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 장내 글리아 세포가 소화와 질병에 있어서 예상보다 훨씬 중요한 역할을 한다는 것이다. 이는 소화 시스템의 복잡성과 인체 건강에 대한 이해를 높이는 데 기여할 수 있다. 연구자들이 장내 글리아 세포의 다양한 기능과 잠재적인 치료적 가치를 밝혀내고 있어, 이는 장 질환을 앓고 있는 사람들에게 새로운 치료법을 제공할 수 있는 가능성을 열어준다. 이러한 발견은 의학과 생명 과학 분야의 연구자들뿐만 아니라 건강에 관심 있는 일반 대중에게도 흥미로운 소식이 될 것이다.

        Hacker News 의견

     * 인공 일반 지능(AGI) 지지자들이 뇌를 단순히 입력/출력을 가진 컴퓨터로 환원하는 주장에 대한 의문 제기

     AGI 지지자들이 뇌를 단순한 입출력 장치를 가진 컴퓨터로 간주하고 재구현하면 된다는 주장에 대해 회의적인 시각을 가짐. 뇌를 단독으로 볼 수 없으며, 척수신경을 PCI-E 레인처럼 취급할 수 없음을 지적함. 장기와 미생물총의 복잡성을 포함한 전체 인간 모델링의 필요성을 강조함.
     * '제1의 뇌'가 '제2의 뇌'가 건강할 때 더 빠르고 효과적으로 작동한다는 개인적 경험 공유

     개인적으로 '제1의 뇌'가 '제2의 뇌' 즉, 장이 건강할 때 더 잘 작동한다는 경험을 공유하며, 프로바이오틱 음식, 충분한 수분 섭취, 운동이 중요한 요소라고 강조함.
     * 장의 크기를 농담삼아 '다른 뇌들'을 가지고 있다고 언급

     자신의 장 크기를 언급하며, 유머러스하게 여러 '뇌'를 가지고 있다고 표현함.
     * 장내 세포에 대한 연구 진전과 그 중요성에 대한 감탄

     위산과 담즙으로 인해 장내 세포의 유전물질을 식별하기 어려웠지만, 이 분야에서 연구가 진전되고 있으며 이를 놀라워함.
     * 육류 중심의 식단으로 전환하여 과민성 장 증후군(IBS) 개선 경험 공유

     육류 중심의 식단으로 바꾸어 과민성 장 증후군(IBS)을 크게 개선한 개인적 경험을 공유함. 오렌지나 바나나를 많이 먹을 때는 여전히 증상이 나타나지만, 모든 식사에 육류를 포함하는 것이 필수적이라고 언급함.
     * LRRK2 유전자 돌연변이에 대한 흥미와 그것이 크론병 및 파킨슨병과의 연관성에 대한 논의

     LRRK2 유전자 돌연변이에 대한 관심을 표현하며, 이 돌연변이가 크론병과 파킨슨병과 연결되어 있음을 언급함. 특히, 크론병과 관련된 신경교세포 문제를 보고한 기사를 본 후, 파킨슨병과의 관련성에 대한 생각을 공유함.
     * 장내 미생물이 부교감신경계에 영향을 미친다는 연구와 관련하여 정보 부족에 대한 언급

     장내 미생물이 부교감신경계에 영향을 미친다는 연구에 대해 언급하며, 이 분야가 데이터가 부족하고 불확실하다는 점을 지적함.
     * 장의 신경세포 네트워크인 내장신경계의 역할과 음식물 이동에 대한 연구 소개

     내장신경계가 음식물을 장을 통해 이동시키는 무의식적인 수축을 조절하는 역할을 하는 것에 대한 연구를 소개함.
     * 장과 관련된 책 두 권 추천

     장에 대한 연구와 중요성을 다룬 Michael Gershon의 ""The Second Brain""과 Julia Enders의 ""Gut: The Inside Story Of Our Body's Most Under-Rated Organ""을 추천함.
     * 앉아 있는 자세가 소화에 좋지 않으며, 쪼그려 앉거나 무릎을 꿇는 자세의 소화에 대한 이점 언급

     앉아 있는 자세가 소화에 좋지 않다고 언급하며, 쪼그려 앉거나 무릎을 꿇는 자세가 소화에 도움이 된다고 주장함. 자연스러운 식사도 중요하다고 강조함.
"
"https://news.hada.io/topic?id=11951","오픈 소스 비디오 변환 프로그램 HandBrake 1.7.0","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   오픈 소스 비디오 변환 프로그램 HandBrake 1.7.0

HandBrake 1.7.0 업그레이드 안내

     * HandBrake를 업데이트하기 전에 대기 중인 인코딩이 없는지 확인하고, 사용자 정의 프리셋과 앱 환경 설정의 백업을 권장함.
     * 윈도우 사용자는 반드시 Microsoft .NET Desktop Runtime 버전 6.0.x를 설치해야 하며, .NET 7이 설치되어 있어도 .NET 6 설치가 필요함.

HandBrake 1.7.0 릴리스 노트

     * 개선 사항과 버그 수정의 전체 목록은 GitHub의 릴리스 노트에서 확인 가능함.

문제 보고 및 피드백 제공

     * 재현 가능한 버그나 문제를 발견하거나 피드백을 제공하고 싶다면 GitHub 이슈 트래커를 통해 알려줄 것을 요청함.
     * IRC 커뮤니티 지원 채널을 통해서도 연락 가능함.
     * HandBrake 앱은 소규모 자원봉사자 팀이 여가 시간에 개발하므로 즉각적인 응답이 어려울 수 있으나, 모든 의견을 확인하고 건설적인 피드백을 환영함.

감사와 기여

     * 이번 릴리스의 일부 기능은 HandBrake 사용자나 회사로부터 제공받았으며, 번역은 전 세계 자원봉사자 커뮤니티의 활발한 참여로 이루어짐.
     * 기여에 관심이 있지만 아직 참여하지 않은 사람들은 기여 가이드를 읽어볼 것을 권장함.
     * 개발자가 아니어도 기여할 수 있는 다양한 방법이 있음.

GN⁺의 의견

     * HandBrake 1.7.0 업그레이드는 사용자 정의 설정의 백업과 새로운 .NET 런타임 설치를 필요로 함.
     * 이 업데이트는 개선 사항과 버그 수정을 포함하며, 사용자와 회사의 기여로 이루어진 커뮤니티 기반 프로젝트임.
     * 이 글은 오픈 소스 비디오 트랜스코더인 HandBrake의 새 버전 출시 소식을 전하며, 기술 커뮤니티 내에서 협력과 기여의 중요성을 강조하는 점에서 흥미로움.

        Hacker News 의견

     * Handbrake에서 최종 파일 크기를 지정할 수 없는 것에 실망한 사람들을 위해, 평균 비트레이트를 계산하는 것은 간단함.
          + 예시: 2시간 48분 길이의 파일을 5GB 이하로 만들고 싶을 때, 오디오가 256kbps라면 비디오 비트레이트는 3712kbps 이하여야 함.
     * Handbrake 팀에게 감사의 인사를 전함. ""Put that cocktail down. Your HandBrake encode is complete!""라는 메시지가 여러 해 동안 유지되어 기쁨.
     * 과거에 Handbrake가 10비트 파이프라인을 도입했음에도 불구하고 많은 필터들이 8비트로 남아있어, 잘못된 필터를 선택하면 인코딩 경험이 저하될 수 있었음. 현재는 대부분의 필터들이 10비트를 지원함.
     * Handbrake가 FDK-AAC 라이선스 문제로 인해 열등한 AAC 코덱을 사용했었지만, 이제는 그렇게 열등하지 않다는 소문이 있음.
     * 현재 Handbrake 버전에서 주의해야 할 큰 문제점이 있는지 궁금함.
     * 요즘은 ChatGPT에게 ""ffmpeg"" 터미널 명령어를 요청함으로써 더 빠르게 작업하고, 커스터마이징이 가능함.
     * Handbrake의 새로운 기능 목록에 흥미로움을 느낌:
          + arm64 / aarch64 / Apple Silicon 아키텍처에서의 성능 향상
          + FFmpeg가 HEVC 디코딩을 더 빠르게 지원하고, bwdif 필터가 30% 빨라짐
          + SVT-AV1 어셈블리 최적화로 최대 4배 성능 향상
     * 불필요한 프레임 복사를 제거하여 비디오 변환 속도 향상 및 메모리 효율성 증가
     * Handbrake가 ""목표 파일 크기"" 옵션을 구현할 수 없다고 말하는 이유에 대해 쉽게 설명해줄 수 있는 사람이 있는지 궁금함.
     * HandbrakeCLI의 유일한 불만은 stdin으로 입력을 인코딩할 수 없다는 것임. FFmpeg는 이를 지원하며 Handbrake가 내부적으로 FFmpeg를 사용한다고 생각함.
     * Handbrake의 릴리스 자체가 변경 로그를 포함하고 있으며, 대부분의 사람들이 보고 싶어할 내용을 담고 있음.
     * HDR 비디오를 작업할 때를 제외하고는 항상 Handbrake보다 ffmpeg를 선호함. HDR 메타데이터를 입력 소스에서 출력으로 복사하는 적절한 ffmpeg 명령을 찾을 수 없었음. 메타데이터를 수동으로 추출한 다음, ffmpeg 인수로 전달해야 했음.
     * 과거에 사용해본 경험이 있으며, MacOS에서 좋아하는 무료 소프트웨어 중 하나였음.
"
"https://news.hada.io/topic?id=12008","Git 브랜치 : 직관과 현실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Git 브랜치 : 직관과 현실

     * 많은 사람들이 Git branch의 작동 방식을 직관적이지 않다고 생각함
     * Git 브랜치에 대한 일반적인 직관적 모델과 실제 Git 내부에서 브랜치가 어떻게 표현되는지에 대한 차이점을 설명함
     * 직관적 모델과 실제 Git의 작동 방식이 실제로 매우 밀접하게 관련되어 있음을 보여줌
     * 직관적 모델의 한계와 문제를 일으킬 수 있는 이유를 논의함

  직관적인 브랜치 모델

     * 많은 사람들이 브랜치를 '사과나무의 가지'에 비유하여 생각함.
     * Git에서 브랜치는 '부모' 개념이 없으며, 'main'에서 분기된 것으로 생각하는 것과 다름.

  Git에서 브랜치는 전체 히스토리

     * Git에서 브랜치는 단순히 분기된 커밋이 아니라 모든 이전 커밋의 전체 히스토리를 포함함.
     * 예제 저장소를 통해 main과 mybranch 모두 4개의 커밋을 가지고 있음을 보여줌.

  브랜치는 커밋 ID로 저장됨

     * Git 내부에서 브랜치는 커밋 ID를 포함한 작은 텍스트 파일로 저장됨.
     * 각 브랜치의 최신 커밋이 해당 파일에 기록되어 있음.
     * 커밋 간의 부모-자식 관계가 없기 때문에, 브랜치 간의 관계를 Git은 알지 못함.

  사람들의 직관은 보통 그렇게 틀리지 않음

     * Git에 대한 사람들의 직관이 '틀렸다'고 말하는 것은 다소 어리석음.
     * '틀린' 모델도 실제로 유용할 수 있음.

  리베이스는 '직관적' 브랜치 개념을 사용함

     * 리베이스는 '직관적' 브랜치의 커밋만을 main에 재적용함.
     * 리베이스 결과는 직관적 모델과 일치함.

  머지도 '직관적' 브랜치 개념을 사용함

     * 머지는 커밋을 복사하지 않지만, 공유된 기반 커밋을 필요로 함.
     * 머지 베이스는 직관적 모델에 기반한 브랜치가 분기된 커밋을 찾아줌.

  GitHub 풀 리퀘스트도 직관적 아이디어를 사용함

     * GitHub에서 mybranch를 main에 머지하려는 풀 리퀘스트를 생성하면, 직관적 브랜치의 커밋만 보여줌.

  직관은 좋지만 한계가 있음

     * 직관적 브랜치 정의는 실제 Git 작업과 잘 맞지만, Git은 main과 분기된 브랜치를 다르게 인식하지 못함.

  트렁크와 분기된 브랜치

     * 사람들은 main과 mybranch를 다르게 인식하며, 이는 Git 사용 방식에 영향을 줌.
     * Git은 브랜치가 다른 브랜치의 '분기'인지 구분하지 않음.

  Git은 리베이스를 '역방향'으로 할 수 있음

     * Git은 브랜치가 다른 브랜치의 '분기'인지 알려주지 않으므로, 언제 어떤 브랜치를 리베이스해야 하는지 사용자가 알아야 함.
     * git rebase main 과 역방향 리베이스인 git rebase mybranch가 모두 가능. 머지도 마찬가지

  Git 브랜치 간의 계층 구조 부재는 다소 이상함

     * main 브랜치가 특별하지 않다는 말은 Git이 브랜치 간의 관계를 인식하지 못하기 때문에 나온 것임.
     * 브랜치 사이에는 관계가 있지만, git은 아무것도 모름

  Git 브랜치 UI도 이상함

     * '분기된' 커밋만 보고 싶을 때 git log와 git diff를 사용하는 방법이 다름.

  GitHub에서 기본 브랜치는 특별함

     * GitHub는 '기본 브랜치'를 가지며, 이는 특별한 역할을 함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 Git 브랜치에 대한 사람들의 직관적 이해와 실제 Git의 작동 방식 간의 차이를 이해하는 것임. 이 글은 초급 소프트웨어 엔지니어들이 Git 브랜치의 개념을 더 잘 이해하고 효과적으로 사용할 수 있도록 도와줄 것임. Git 브랜치의 직관적 모델이 실제 작업과 어떻게 일치하는지, 그리고 Git이 브랜치 간의 관계를 어떻게 처리하지 않는지를 알아보는 것은 흥미롭고 유익함.

        Hacker News 의견

     * 브랜치는 커밋을 가리키는 포인터이며, 새로운 커밋이 생성될 때마다 이 포인터가 갱신됨. 브랜치는 태그처럼 떠돌아다니는 이름이라고 볼 수 있음. 커밋 자체가 부모 커밋을 가리키기 때문에 브랜치라는 것은 관련 커밋들의 연쇄로, 명명된 진입점을 가짐. 브랜치를 삭제하면 더 이상 명명된 레이블이 없어져서, 단순히 관련 커밋들의 연쇄로만 남게 됨.
     * 커밋의 계보를 '앞으로'가 아닌 '뒤로' 가리키는 포인터로 생각하면 이해하기 쉬움. 브랜치는 커밋 ID이므로 부모 링크를 거슬러 올라가면 해당 브랜치의 전체 역사를 찾을 수 있음. '브랜치 포인트'는 두 커밋 체인이 만나는 지점이며, 병합 커밋은 특별한데, 이는 두 역사가 하나로 합쳐졌음을 나타냄.
     * 개인적인 프로젝트에서 git reset --hard와 git stash를 사용하여 변경 사항과 브랜치 포인터를 조작하는 것을 친구들이 보면 화를 내곤 함. 잘못된 병합을 취소하려면 git reset --hard <병합 전 마지막 커밋>을 사용하고, 로컬 브랜치의 작은 수정 사항을 메인 브랜치에 적용하려면 git stash를 사용한 후 메인 브랜치로 체크아웃하여 git stash apply를 사용함.
     * Git에는 'main이 특별하다'는 개념이 없지만, Gitlab과 같은 도구들은 보호된 브랜치 기능을 제공하여 실수를 줄일 수 있음. '부모'와 '자식' 브랜치 개념이 실제로 흥미로울 수 있으며, 장기 지원 브랜치를 위해 여러 '부모' 브랜치를 지원해야 함.
     * 병합, 리베이스, 풀 리퀘스트를 할 때 다른 브랜치를 명시적으로 지정해야 함. Git은 사용자가 기반으로 생각하는 브랜치를 알지 못하기 때문임. 때로는 기능 브랜치를 다른 기능 브랜치에 병합하고 싶을 수 있으므로, 어떤 브랜치를 다른 브랜치에 병합할지 명확히 지정해야 함.
     * 사람들이 가지고 있는 직관이 기술적으로 부분적으로 틀릴 수 있어도, 그들이 그런 직관을 가진 데는 타당한 이유가 있음.
     * git add와 git commit 사용법을 아는 사람들을 대상으로 한 동적인 튜토리얼이 있음. 이 튜토리얼은 브랜치를 시각화하며 읽을 수 있도록 도와줌.
     * Git 명령어를 수행할 때 '항상' 현재 브랜치를 수정한다는 것을 기억하면 Git의 문법을 '쉽게' 이해할 수 있음. 예를 들어, git merge my-branch는 현재 브랜치에 my-branch를 병합하고, git rebase my-branch는 현재 브랜치를 my-branch 위에 리베이스함.
     * 브랜치(헤드)가 해당 브랜치가 시작된 기저 커밋을 가리키는 '꼬리'를 가지는 것이 좋을 것 같음. 브랜치가 자주 리베이스되기 때문에 어디서 시작하는지 생각해야 할 때가 있음. Git이 기저 커밋이 main에 속한다고 알려주면 더 편리함.
     * 메일링 리스트에 '패치'를 보낼 때 기저 커밋을 선택적으로 포함할 수 있음. 이는 변경 사항이 최신 릴리스, 메인 개발 브랜치, 또는 통합 브랜치 중 어디에 기반하는지 명확하지 않을 수 있기 때문임. git range-diff를 사용할 때도 기저를 염두에 두어야 함. 이 도구는 main..previous와 main..current와 같은 두 범위를 비교함.
     * 브랜치에 대한 개인적인 견해를 다시 읽고 잊었던 몇 가지를 다시 배움.
"
"https://news.hada.io/topic?id=12049","Fish 쉘의 Rust 포트에 대한 최신 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Fish 쉘의 Rust 포트에 대한 최신 업데이트

     * Rust로의 전환 작업은 ""대부분"" 완료됨.
     * 진행 상황은 측정 방법에 따라 다르며, C++ 코드 제거량에 따라 60%에서 Rust 대 C++ 코드 비율로는 74% 완료된 것으로 추정됨.
     * 아직 번역되지 않은 마지막 큰 구성 요소는 입력 시스템을 포함한 리더(reader) 부분으로, 이는 상당히 밀접하게 연결되어 있음.

일반적인 오해와 질문에 대한 답변

     * 모든 C++ 코드를 제거할 예정임.
     * Windows 포트는 계획되지 않았으며, Rust가 Windows 지원에 특별한 도움이 되지는 않음.
     * 프로젝트 이름이나 마스코트는 변경되지 않을 예정이며, Rust로 작성되었다는 사실을 태그 라인에 추가하지 않을 수도 있음.
     * 완성된 포트의 성능에 대해서는 아직 확실하지 않으며, 초기 결과는 긍정적이지만 일부 경우에 약 20% 느려질 수도 있음.

추가 정보

     * 부분적인 Rust 릴리스는 계획하지 않고 있으며, 예를 들어 fish 4.0은 완전히 Rust로만 구성될 것임.
     * Rust 버전을 처리할 수 없는 플랫폼을 위한 출발점으로 C++로만 구성된 3.7.0 중간 릴리스를 계획하고 있음.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 fish-shell이 Rust로 거의 완전히 포팅되었다는 것이며, 이는 소프트웨어 개발과 오픈 소스 커뮤니티에 큰 변화를 가져올 수 있는 사건임. 이러한 변화는 기술적인 진보를 반영하며, 개발자들에게 새로운 도구와 접근 방식을 제공함으로써 흥미롭고 매력적인 주제가 됨. Rust로의 전환은 성능과 안정성 측면에서 기대를 모으고 있으며, 이러한 기술적 변화는 개발자 커뮤니티에 긍정적인 영향을 미칠 것으로 예상됨.
"
"https://news.hada.io/topic?id=12048","새로운 파리 메트로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               새로운 파리 메트로

파리 메트로의 새로운 변화

     * 유럽 최대의 토목 공사 프로젝트가 프랑스에서 7년 전에 시작되어 현재 형태를 갖추고 있음.
     * 새로운 파리 메트로, Grand Paris Express (GPE)는 기존 네트워크에 4개의 새로운 노선과 68개의 새로운 역을 추가하여 파리 주변 지역을 두 배 이상 확장함.
     * 목표는 파리 교외 지역을 서로 및 도시와 더 잘 연결하여 상업적 가치를 향상시키는 것임.

환경적 영향과 도시 디자인의 인정

     * 2030년까지 하루 최소 200만 명의 승객을 수송할 것으로 예상되며, 이는 자동차 사용을 줄이고 깨끗한 대중 교통으로의 전환을 의미함.
     * 건설에는 큰 환경적 비용이 들지만, 운영되면 탄소 절약에 큰 영향을 미칠 것으로 기대됨.
     * 하버드 대학교는 Grand Paris Express에 2023년 Veronica Rudge Green Prize in Urban Design을 수여하여 도시와 주민들의 삶을 변화시키는 디자인을 인정함.

문화 전시회를 통한 대중 교육

     * 프랑스 문화의 전통에 따라, 대중을 교육하기 위해 Cité de l’architecture et du Patrimoine에서 ""Métro! Le Grand Paris en mouvement"" 전시회를 개최함.
     * 전시회는 현대 도시의 구조와 그것이 주민들의 새로운 현실을 어떻게 만들어낼 수 있는지에 대한 반성을 초대함.

예술과 기능의 결합

     * Grand Paris Society는 각 역마다 현대 예술 작품을 위해 약 3500만 유로의 예산을 할당하여, 지하철 티켓으로 접근할 수 있는 광범위한 연결된 갤러리를 만들기로 결정함.
     * 건축가, 엔지니어, 예술가들이 협력하여 지하철 역을 문화적으로 관련 있는 공공 장소로 재상상함.

진행의 정치학

     * 이 프로젝트는 특정 지역 사회에 저렴한 교통 수단을 제공하기 때문에 ""완전히 정치적""임.
     * 어떤 지역을 서비스할지, 어떤 회사가 계약을 맺을지 결정하는 것은 복잡한 과정임.
     * 프로젝트는 지연과 예산 초과로 인해 비판을 받았으며, 건설 현장에서 발생한 사고로 인해 안전 문제가 제기됨.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 파리가 대규모 교통 인프라 프로젝트를 통해 도시의 미래를 형성하고 있다는 점임.
     * 이 프로젝트는 환경적 지속 가능성과 대중 교통의 혁신을 추구하며, 도시 계획과 예술을 결합한 새로운 접근 방식을 제시함으로써 사람들에게 흥미를 끌 수 있음.

        Hacker News 의견

     * 파리의 지하철 시스템에 깊은 인상을 받았음. 서유럽 기준으로 파리가 더럽다는 인상이 있었지만, 실제로는 지하철 역이 매우 깨끗했음. 반면, 오타와는 한 노선을 안정적으로 운영하는 데 거의 5년이 걸렸고, 역들은 비교적 더러움.
     * 파리의 기존 SNCF 연결과 오를리, CDG 공항, 암스테르담으로 가는 탈리스 노선을 주로 사용함. 런던 지하철이 다소 침체되어 있을 때, 파리는 현대화의 모범이었음. 하지만 카르네 시스템의 유지와 런던 교통 투자 증가로 상황이 변함.
     * 파리의 대담한 인프라 프로젝트에 감탄함. 대부분의 수도는 기존 허브로 향하는 스포크에 집중하지만, 파리는 링을 구축하는 용기를 보임. 뉴욕은 이를 보고 배워야 함.
     * 파리의 멋진 인프라 프로젝트지만 티켓 시스템 정비가 필요함. 다른 곳들은 이미 비접촉식 EMV를 도입했지만, 파리는 이제야 관광객을 위한 Navigo Easy를 도입함. 마지막 방문 때는 여전히 종이 자기 스트라이프 티켓을 사용함.
     * 파리 지역에 68개의 새로운 역이 생겼고, 워싱턴 D.C.의 가장 큰 공항에 지하철 정류장이 생기는 데 40년이 걸림.
     * 독일인으로서, 차 중심의 도시에 살고 있고, 부유한 지역의 끝나지 않는 대중교통 프로젝트에 비해 제대로 기능하는 대중교통이 없어서 부러움. 이 프로젝트가 성공적으로 완성되어 다른 곳에도 영감을 주기를 바람.
     * 기차 연결은 놀라운 일임. 다른 어떤 교통수단보다 두 장소 사이의 거리를 줄여줌. 기차에 타서 책이나 신문을 읽다 보면 갑자기 다른 곳에 도착함.
     * 파리의 지도 링크 제공.
     * 미국 동부 해안을 따라 오가는 훌륭한 ""인터어반"" 노선들에 대한 부러움. 필라델피아에서 뉴욕까지 작은 지역 기차를 타고 여행할 수 있었음.
     * 내가 사는 곳 근처에 새로운 주요 노선과 작은 허브 역이 생길 것이라는 사실에 놀람.
"
"https://news.hada.io/topic?id=12040","NVIDIA, 영업 비밀 도용으로 피소: 화면 공유중 경쟁사 코드가 노출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                NVIDIA, 영업 비밀 도용으로 피소: 화면 공유중 경쟁사 코드가 노출

NVIDIA, 화면 공유 실수로 경쟁사 코드 노출 후 영업 비밀 도용 혐의로 피소

     * 프랑스 자동차 회사 Valeo가 NVIDIA를 상대로 소송을 제기함.
     * NVIDIA의 엔지니어 Mohammad Moniruzzaman이 화면 공유 중 실수로 Valeo의 소스 코드 파일을 노출함.
     * Valeo와 NVIDIA는 고급 주차 및 운전 보조 기술 개발에 협력 중이었음.
     * Moniruzzaman은 Valeo의 시스템에 무단으로 개인 이메일을 통해 접근하여 수만 개의 파일과 6GB의 소스 코드를 도용함.
     * Moniruzzaman은 NVIDIA로 이직 후 도난당한 정보를 가지고 가서 동일한 프로젝트에 참여함.

NVIDIA의 대응 및 Valeo의 주장

     * Valeo의 전 직원이 소프트웨어 도용을 인정함.
     * 독일 경찰이 Moniruzzaman의 집을 급습했을 때 Valeo의 문서와 하드웨어가 벽에 붙어 있는 것을 발견함.
     * Moniruzzaman은 이미 독일 법원에서 영업 비밀 침해로 유죄 판결을 받고 벌금을 납부함.
     * NVIDIA는 Valeo의 코드나 영업 비밀에 관심이 없다고 주장하며, 클라이언트의 권리를 보호하기 위한 조치를 취했다고 밝힘.
     * Valeo는 NVIDIA가 영업 비밀을 도용함으로써 수백만, 아마도 수억 달러의 개발 비용을 절감하고 부당하게 이익을 얻었다고 주장함.

자율 주행 시장의 경쟁 격화

     * 자율 주행 시장에서의 경쟁이 치열해지고 있음을 보여주는 사례임.
     * 2017년에는 Waymo가 Uber를 상대로 영업 비밀 도용 혐의로 소송을 제기한 바 있음.
     * 해당 사건에서 Anthony Levandowski는 18개월의 징역형을 선고받았으나, 도널드 트럼프 전 대통령에 의해 6개월 후 사면됨.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 기술 산업, 특히 자율 주행 기술 분야에서 영업 비밀 보호의 중요성과 경쟁의 치열함이다. NVIDIA와 Valeo 사이의 법적 분쟁은 기업 간 협력 관계에서 발생할 수 있는 복잡한 문제들을 보여주며, 이는 소프트웨어 엔지니어링뿐만 아니라 기업 윤리와 법적 책임에 대한 이해를 필요로 한다. 이 사건은 기술 산업 종사자들에게 흥미로운 사례로, 영업 비밀 보호와 지적 재산권의 중요성을 강조하는 계기가 될 것이다.

        Hacker News 의견

     * 한 해커뉴스 사용자는 직원이 이전 고용주의 코드를 훔쳐 새로운 고용주에게 사용하는 이유를 이해할 수 없음을 표현함. 이러한 행위는 개인적인 이득보다는 적발될 경우 심각한 법적 위험을 수반한다고 지적함. 예를 들어, 한 엔지니어가 이전 회사의 시스템에 무단으로 접근하여 수천 개의 파일과 소스 코드를 훔친 사건을 언급하며, 이러한 위험을 감수하는 것이 가치가 있는지 의문을 제기함.
     * 다른 사용자는 그래픽 회사들이 드라이버를 오픈소스로 공개하지 않는 이유 중 하나로, 모든 회사가 서로의 특허를 침해하고 있기 때문이라고 언급함. 이러한 사실이 너무 명백해지면 법적 불이익을 초래할 수 있음을 지적함.
     * 또 다른 사용자는 한 직원에게 모든 책임을 전가하는 것처럼 보이는 기사 내용에 의문을 제기함. Nvidia가 이전 경험을 가진 직원을 고용한 것은 비밀을 가지고 올 것이라는 점을 알고 있었을 가능성이 있음을 언급함.
     * 한 사용자는 개발자들이 의도치 않게 코드 조각이나 아이디어를 개인적인 지식 도구에 보관하고 다른 회사에서 재사용하는 경우가 종종 발생한다고 설명함. 이러한 행위는 대부분의 경우 경영진 수준까지 알려지지 않으며, 발견되더라도 해당 코드를 제거하고 다시는 사용하지 않도록 요청받는 경우가 많음을 언급함.
     * 한 사용자는 Nvidia가 이전 고용주의 코드를 가지고 있는 직원에 대해 알고 있었는지에 대한 증거가 있어야만 이 사건이 직원을 넘어서 진전될 수 있음을 지적함.
     * 한 사용자는 Moniruzzaman이 이전 회사의 시스템에 무단으로 접근하여 수천 개의 파일과 소스 코드를 훔친 사실을 언급함.
     * 다른 사용자는 Moniruzzaman이 AMD에서 근무하고 있으며, 이것이 그의 은퇴 패키지라고 농담함.
     * 한 사용자는 Goldman Sachs에서 오픈소스 Erlang 코드를 ""훔쳤다""고 주장되는 Sergey Aleynikov의 사례를 Moniruzzaman의 사례와 비교하며, Aleynikov가 처음에는 유죄 판결을 받았지만 항소 과정에서 무죄 판결을 받은 사실을 언급함. Moniruzzaman이 실제 범죄를 저질렀음에도 불구하고 상대적으로 낮은 벌금을 받았다고 비교함.
     * 한 사용자는 개인이 코드를 훔치는 것과 회사가 AI를 훈련시키기 위해 코드를 사용하는 것 사이의 도덕적 차이에 대해 의문을 제기함. 법적으로 다를 수 있지만, 도덕적으로는 모두 도둑질의 정도에 불과한 것이 아닌지 물음.
     * 마지막으로 한 사용자는 코드를 재사용할 때 항상 리팩토링, 이름 변경, 라이브러리 교체를 해야 한다고 조언함.
"
"https://news.hada.io/topic?id=11954","AWS에서 베어-메탈로 이전하여 연간 23만 달러(3억원) 절약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AWS에서 베어-메탈로 이전하여 연간 23만 달러(3억원) 절약

     * 오픈소스 Observability Platform인 OneUptime이 AWS에서 베어메탈 솔루션으로 인프라를 이전하여 자원에 대한 통제력 향상과 상당한 재정적 절감 실현.
     * 고객 대부분이 공공 클라우드 사용 중이며, 클라우드 장애 시 알림 서비스 제공을 위해 독립적인 데이터 센터 필요.

초기 설정: AWS에서 Kubernetes

     * AWS의 관리형 Elastic Kubernetes Service (EKS)를 사용하여 Kubernetes 클러스터 채택.
     * OneUptime은 Redis, Postgres, Clickhouse, Docker, NodeJS, BullMQ 등 AWS에 특화되지 않은 오픈소스 소프트웨어 기반 구축.
     * AWS 의존성 피하고 고객이 자체 클러스터에서 OneUptime 자체 호스팅 가능하도록 함.

전환: 베어메탈로의 이전

     * 기술적 우수성 추구의 일환으로 베어메탈 솔루션으로 전환 결정.
     * 코로케이션 시설에서 Microk8s 클러스터 운영 선택, 과거 경험과 미래 지향적 목표에 기반.
     * Microk8s는 생산 환경에서도 활용 가능하며, 베어메탈 서버로의 전환은 전용 자원 제공과 성능 최적화 가능.

Kubernetes와 Helm의 역할

     * Kubernetes와 Helm은 클라우드에서 자체 서버로의 전환에서 중요한 역할 수행.
     * Kubernetes는 애플리케이션 컨테이너 배포, 확장, 운영 자동화를 위한 오픈소스 플랫폼.
     * Helm은 Kubernetes 애플리케이션 정의, 설치, 업그레이드 단순화하는 패키지 관리자.

스토리지와 로드밸런서

     * 베어메탈 Kubernetes 클러스터에서 볼륨은 Network File System (NFS) 사용, 로드밸런서는 MetalLB 사용.
     * NFS는 클라이언트 컴퓨터가 네트워크를 통해 파일 접근을 가능하게 하는 분산 파일 시스템 프로토콜.
     * MetalLB는 표준 라우팅 프로토콜을 사용하는 베어메탈 Kubernetes 클러스터용 로드밸런서 구현.

재정적 영향: 연간 $230,000 이상 절약

     * AWS 사용 시 월 $38,000 이상 지출, 연간 $456,000 이상.
     * 베어메탈로 이전 후 코로케이션 파트너의 단일 랙 구성 사용, 월 운영 비용 약 $5,500으로 절감.
     * 서버 비용을 5년간 분할 상각하면 연간 $230,000 이상 절약, 비용 절감으로 인력 확충 및 비즈니스 다른 분야에 자원 할당 가능.

고려 사항

     * 데이터는 하루에 여러 번 두 사무실에 백업, 공공 클라우드에도 백업 가능.
     * 다른 대륙의 두 코로케이션 시설에서 다중 위치 Kubernetes 클러스터 운영 가능.
     * AWS에 백업 클러스터 준비, 재해 시 10분 이내에 구동 가능.
     * 베어메탈로 전환 시 서버 관리자 고용은 필수 아님, 코로케이션 시설에서 하드웨어 유지 관리 대부분 담당.
     * Microk8s는 개발 목적뿐만 아니라 생산 환경에서도 사용되며, 필요 시 다른 Kubernetes 배포판으로 쉽게 전환 가능.

결론

     * AWS와 같은 클라우드 서비스는 유연성과 강력함 제공하지만, 모든 기업에 경제적인 선택은 아님.
     * 오픈소스 기술 활용과 자체 하드웨어 투자로 자원 통제력 향상 및 운영 비용 상당히 절감.
     * 각 비즈니스의 독특한 요구 사항이 있으므로 전환 전 종합적인 평가 필요.

GN⁺의 의견

   이 글에서 가장 중요한 것은 기업이 클라우드 서비스에서 베어메탈 인프라로 전환함으로써 얻을 수 있는 통제력과 비용 절감의 이점임. 이 글이 흥미로운 이유는 기술적 결정이 재정적 성과에 어떻게 영향을 미칠 수 있는지 구체적인 사례를 통해 보여주기 때문임. Docker, Kubernetes, Helm, Microk8s와 같은 기술의 발전으로 인해 이러한 전환은 몇 년 전보다 훨씬 쉬워졌으며, 이는 기술 선택의 중요성과 전략적 접근의 가치를 강조함.

   23만불... 저거 코로케이션 서버들 관리할 관리자 두명만 뽑아도 날아가는 돈 아닐까요. 완전관리형 서비스들을 쓰는 이유가 그걸 아끼려는건데.

   그 말씀도 맞지만 aws엔지니어도 또한 엑스퍼트가 분야별로 필요하다는게 함정입니다.

   평가들이 대체로 부정적이네요. 요약된 내용을 보면 왠지 과장된 느낌이기도 하구요.

        Hacker News 의견

     * 예약 인스턴스와 절약 플랜을 사용하면 AWS 비용을 크게 절감할 수 있음. 이는 전송 및 저장 비용에도 적용되며, 실제로 많은 비용을 절약할 수 있지만, 처음 생각했던 것만큼 극적인 차이는 아님.
     * 현재 경제 상황을 고려할 때, ""한 명의 엔지니어를 더 고용할 수 있다""는 의견이 많지만, ""한 명의 엔지니어를 더 유지할 수 있다""는 것을 기억해야 함. AWS를 유지하기 위해 팀원을 해고할 것인가에 대한 고민.
     * 서버 랙을 관리하는 것은 많은 사람들이 생각하는 것처럼 대단한 일이 아님. 클라우드 네이티브 엔지니어들이 하드웨어 관리에 대해 배우는 것을 꺼려함.
     * 클라우드 서비스를 사용하지 않고 단순히 가상 머신만 사용하는 경우는 드물게 가치가 있음. 많은 사람들에게 전용 서버를 임대하는 것이 최선의 비즈니스 결정이 될 수 있음. EC2보다 훨씬 저렴할 수 있으며, 대량의 여유 용량을 가지고 있으면 일반적인 확장성 문제를 해결할 수 있음.
     * 비즈니스 목표에 집중하고, 하이프에 휩쓸리지 말아야 함. 다운타임이 큰 문제인 경우가 있지만, 복잡한 고가용성(HA) 메커니즘을 엔지니어링하는 것보다 몇 분간 서비스가 중단되는 비용이 훨씬 저렴한 비즈니스도 많음.
     * AWS에서 페라리를 구매하는 대신 토요타 캠리를 구매하면 많은 비용을 절약할 수 있음. 이러한 이야기는 보통 회사가 놀라운 새로운 해킹을 성공했다고 주장하는 블로그 스팸임. 실제로는 지출을 제어하는 방법을 몰라 현금을 태움.
     * 콜로케이션(colocation) 제공업체를 찾고 있었던 것이 불과 어제의 일인데, 빠르게 23만 달러를 절약했다는 주장에 대한 의문.
     * 비용 대비 효율성을 고려할 때, 자체적인 서버 관리에 1인년의 노력을 들이지 않는다면 올바른 선택을 한 것임.
     * 게시물이 세부 사항에 대해 매우 간략하여 실제로 가치가 있는지 판단하기 어려움.
     * 비즈니스는 돈을 벌기 위한 것이며, 하드웨어와 IT 인프라 관리 능력이 아닌 제품이 돈을 벌어들임.
     * AWS에서 연간 50만 달러를 지출하는 것은 인프라가 비교적 단순하고 지출이 크게 증가할 것으로 예상되지 않는다면, 클라우드에서 이탈하는 것이 실제로 의미가 있을 수 있음.
     * AWS에서 연간 50만 달러를 지출하는 것은 엑셀 시트에 금액을 입력하고 한 시간 동안 검토하는 것만으로도 명백한 절약이 가능함을 알 수 있으며, 이는 AWS에서 연간 수십만 달러를 지출하기 전에 수행해야 함.
"
"https://news.hada.io/topic?id=12009","폴리오, 근절 직전에 놓이다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            폴리오, 근절 직전에 놓이다

소아마비 박멸의 끝자락에 서다. 재발을 막는 방법은 다음과 같다

     * 소아마비 박멸 캠페인이 몇 년 내에 성공할 가능성이 있으나, 이것은 새로운 도전의 시작일 뿐임.
     * 소아마비는 과거에 실험실에서 유출된 적이 있으며, 실수로 인해 보호받지 못하는 인구에게 퍼질 수 있음.
     * 소아마비의 종식은 새로운 노력의 시작으로, 이를 막기 위한 회복력 개발이 중요함.

소아마비 박멸

     * 소아마비는 소아마비 바이러스에 의해 발생하지만, 드물게 백신에 의해서도 발생할 수 있음.
     * 백신 접종이 주요 도구이며, IPV는 바이러스 감염을 막지는 못하지만 마비를 예방함.
     * OPV는 소아마비의 확산을 막을 수 있으나, 백신 자체가 마비를 일으키거나 변이하여 병원성을 회복할 위험이 있음.

소아마비 감시

     * 소아마비 감시는 마비 증상을 찾고 폐수에서 바이러스를 모니터링하는 두 가지 주요 형태로 이루어짐.
     * 말라위에서 발견된 야생 소아마비 사례는 환경 감시의 중요성을 강조함.
     * 글로벌 폐수 감시는 COVID-19 팬데믹 이후 더 중요해짐.

소아마비 탈출 위협

     * 연구소와 백신 제조 시설에 남아 있는 바이러스로 인해 소아마비가 유출될 수 있음.
     * WHO는 소아마비 자료를 보유한 시설 수를 최소화하고 불필요한 재고를 파괴할 것을 촉구함.

예상치 못한 출처

     * 특정 면역 결핍 장애를 가진 소수의 사람들은 백신에서 유래한 약화된 바이러스를 장기간 보유할 수 있음.
     * 이러한 상태의 사람들을 찾아내고 치료하는 것이 소아마비 박멸과 호환되지 않음.

안일함과 책임

     * 소아마비 박멸 후 최소 10년 동안 백신 접종률을 높게 유지하는 것이 최선의 보호 방법임.
     * GPEI가 박멸 후 1년이 지나면 해체되고, WHO 부서, 파트너 및 국가 보건 프로그램에 책임이 이관됨.

GN⁺의 의견

   이 글에서 가장 중요한 것은 소아마비 박멸이 임박했지만, 이를 유지하기 위한 지속적인 노력과 준비가 필요하다는 점입니다. 소아마비가 실험실 유출, 백신 파생 바이러스, 면역 결핍 환자 등 다양한 경로로 재발할 수 있는 위험을 내포하고 있기 때문에, 박멸 후에도 감시와 백신 접종, 그리고 글로벌 협력이 중요합니다. 이 글이 흥미로운 이유는 소아마비와 같은 질병을 박멸하는 것이 단순히 바이러스를 없애는 것을 넘어서, 전 세계적인 공중 보건 시스템의 강화와 지속 가능한 건강 관리를 위한 중요한 단계임을 보여주기 때문입니다.

        Hacker News 의견

     * 개발도상국 지원의 필요성
          + 실험실에서 감염된 후 해외로 여행하는 시나리오는 개발도상국을 돕는 이유 중 하나를 강조함.
          + 개발된 국가들이 이기적 이해관계로, 자선이나 마음의 선함이 아닌, 기본적인 위생이나 물 인프라가 부족한 곳에서 항생제 내성 감염을 육성하고 있음.
          + 개발국가의 사람들이 다른 곳에서 아프면 종종 현대적인 시설에서 좋은 치료를 받기 위해 이송되어 자국민에게 노출될 위험이 있음.
          + 우리가 편안한 개발국가에서 이러한 질병으로부터 자유로워지길 원한다면 전 세계적으로 적절한 물 인프라 제공에 더 잘해야 함.
     * 소아마비 퇴치의 희망
          + 어린 시절 소아마비 유행을 겪은 사람으로서, 아이들이 질병으로 사망하거나 철 폐호흡기를 사용하거나 평생 보조기를 착용하는 것을 목격함.
          + 소아마비의 가능한 퇴치에 대한 발표가 사실이길 바람.
     * 강제 노동과 사회적 살인의 문제 제기
          + 강제/경제적 필요에 의한 노동과 사회적 살인의 문제를 언급함.
     * 소아마비 퇴치에 대한 개인적인 경험
          + 심각한 소아마비 후유증을 겪은 아버지의 이야기를 공유함.
          + 아버지가 2살 때 병원에서 마비되었을 때 부모님이 겪었을 것을 상상할 수 없음.
          + 소아마비의 공포 없는 세상이 더 나은 곳이 될 것임을 희망함.
     * 소아마비 퇴치의 현실
          + 소아마비가 퇴치된 것으로 알려져 있으나, 여전히 새로운 사례가 발견되고 있음.
          + 백신의 중요성을 아이에게 설명하면서도, 실제로는 아직 소아마비가 존재함을 인지함.
     * 소아마비 퇴치의 어려움
          + 파키스탄 출신으로 소아마비 퇴치가 매우 답답함을 표현함.
          + 소아마비 팀의 작업자들이 여전히 정기적으로 살해당하고 있으며, 백신 접종 거부 문제도 존재함.
          + 심지어 교육을 받은 가족 구성원들조차 백신 접종을 거부하는 고집스러운 태도를 보임.
          + 예방보다 치료를 '첫 단계'로 생각해야 할 필요성을 강조함.
     * 소아마비 재발의 우려
          + 소아마비가 퇴치된 지역에 다시 소아마비가 도입될 수 있다는 우려를 표현함.
          + 세계가 파키스탄을 격리하기로 결정할 수도 있다는 두려움을 나타냄.
"
"https://news.hada.io/topic?id=11981","샘, OpenAI CEO로 복귀하기 위한 원칙적 합의 도달","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    샘, OpenAI CEO로 복귀하기 위한 원칙적 합의 도달

        Hacker News 의견

     * 모든 댓글: 이 스레드에는 1800개 이상의 댓글이 있으며, 모두 읽고 싶다면 각 페이지 하단의 'More'를 클릭하거나 제공된 링크를 사용하여 읽을 수 있음.
     * OpenAI가 비영리 단체로 남는 경우, 마이크로소프트의 이사회 구성원은 마이크로소프트의 비즈니스 요구가 아닌 자선 단체의 사명을 증진해야 하는 법적 의무가 있으며, 이는 명백한 이해 상충을 초래할 수 있음. IRS가 이러한 구성을 좋아하지 않을 것으로 예상됨.
     * 샘 알트만이 CEO로 복귀함에 따라, OpenAI 이사회가 기능을 상실했다는 증거가 될 수 있음. 이사회는 샘을 해임할 권리를 행사할 수 없게 되었으며, 샘은 이제 자신이 원하는 대로 행동할 수 있음. 샘의 행동에 대한 비난이나 오해를 하지 않지만, 그가 거짓말을 하거나 부적절한 행동을 할 수 있다는 우려가 있음.
     * 코카콜라와 뉴 코크 사건을 떠올리게 하는 사례로, 결국 오리지널 코크가 더 인기를 얻게 된 사건임. 소비자들은 익숙한 맛을 되찾기를 강력히 요구했으며, 일부 기자들은 이 모든 것이 홍보 전략이었다고 추측함.
     * 개발자 한 명과 비즈니스맨 한 명의 대결에서 비즈니스맨이 이겼고, 수백 명의 개발자가 퇴사를 위협했을 때 이사회가 굴복함으로써 개발자들이 실제로 힘을 가지고 있었다는 것을 보여주는 사례임.
     * 일리야가 이사회에서 물러났지만 아담은 여전히 남아 있음. 이것이 일부의 눈썹을 찌푸리게 할 수 있지만, 샘의 복귀로 인해 OpenAI에 중대한 변화가 있을 것이며, 장기적으로 OpenAI가 페이스북이나 우버와 같은 대기업이 될 것이라고는 생각하지 않음. 신뢰를 잃었다는 인식이 있음.
     * Rapid Commercialization 팀과 원칙을 고수하는 팀 간의 갈등이 있었으며, 이는 GPT-3 이전부터 글에서도 나타남. 대중의 소수만이 AI 안전성에 관심을 가지고 있으며, 나머지는 ChatGPT가 숙제를 돕는 것에 만족함. 이사회의 무지에 대해 비웃을 수 있지만, 만약 누군가가 초인공지능의 위협을 진지하게 받아들인다면, 그들의 행동을 이해해볼 필요가 있음.
     * 개인적으로 AI 안전성에 대한 위협을 심각하게 받아들이지 않지만, 이해하려는 노력이 필요함. 헬렌 팀이 ""우리가 막으려 했던 바로 그 일""이라고 말하는 날이 오지 않기를 바람.
     * AI 안전성에 대한 민간 산업 접근 방식에 대한 희망이 있었지만, 이제는 불가능해 보이며, 공공 AI 연구개발에 대한 국가 투자의 느린 속도로 인해 모든 AI 안전성 접근 방식이 불가능해 보임. 장난감 모델에 대한 안전 연구는 계속 발전을 이룰 것이지만, 업계는 최첨단 모델에 대한 연구 없이는 안전성에 대해 배울 수 있는 한계가 있다고 보고 있음.
     * 오픈AI의 거버넌스 구조가 안전성 우선 순위를 보장하는 메커니즘이라고 알트만이 주장했지만, 내부에서 안전성 연구가 ChatGPT 운영 유지로 재배치되는 보고서는 우려를 낳음. 이사회가 기술적으로 가능했지만 이해관계를 관리하기에 충분한 힘이 없었다는 것이 드러남에 따라, 안전성을 중시하는 어떤 조직도, Anthropic을 포함하여, 자금 제공자의 가속주의 영향을 피할 수 있는지 불분명함.
     * 폴 그레이엄은 ""5년 후에 돌아오면 샘은 그 섬의 왕이 될 것""이라고 말함.
     * 많은 VC/마이크로소프트가 비영리 조직의 거버넌스 구조를 이익 동기로 인해 전복했다는 서사가 있지만, 실제로는 그렇지 않다고 생각함. 결정이 내려진 이유는 95%의 직원이 이 문제에 대해 샘의 편을 들었고, 이사회는 자신들의 입장을 전혀 설명하지 않았기 때문임. 샘과 95%의 직원, 모든 투자자가 이사회에 반대했으며, 이사회는 여기서 패배해야 함. 이사회가 자신들만을 위해 통치했기 때문임. 결국 공정하고 좋은 결과가 나왔으며, AGI 문제를 해결하기 위한 거버넌스 구조는 여전히 적절하다고 생각하지만, 이번 이사회는 매우 부적절했음.
"
"https://news.hada.io/topic?id=11999","Fortran 2023 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Fortran 2023 릴리즈

     * ISO/IEC 1539-1:2023 로 공식 표준 릴리즈. 674페이지 PDF

새로운 기능 및 변경사항

    1. 길이 제한 변경
          + 자유 소스 형식의 줄 길이 제한을 10,000자로 상향.
          + 255개 연속 줄 제한 제거 및 문장 길이 제한을 100만 자로 상향.
    2. 문자 변수 길이
          + 연기 길이 할당 가능 변수가 내부 지정에 의해 정의될 때, 프로세서에 의해 올바른 길이로 할당.
    3. 조건부 표현식
          + 조건부 표현식 추가 (value = (a > 0.0 ? a : 0.0) 형태).
    4. 조건부 인수
          + 조건부 인수 추가, 인수가 모두 같은 랭크, 타입, 종류여야 함.
    5. 코어레이 구성요소를 가진 배열
          + 코어레이 구성요소를 가진 타입의 객체는 배열이거나 할당 가능하나, 코어레이 자체는 아님.
    6. Put with Notify
          + SHMEM 커뮤니티에서 인기 있는 기능, 예: x[10 notify=nx] = y.
    7. Do Concurrent의 Reduction Specifier
          + do concurrent 구문 내에서 감소 변수(reduction variable)의 사용.
    8. 단순 절차
          + 순수 절차(pure procedure)는 인수를 통해서만 변수를 변경하며, 단순 절차(simple procedure)는 인수를 통해서만 변수를 참조.
    9. 열거형 타입
          + 새로운 열거형 타입 지원 (enum bind(c) 등).
   10. 정수 배열을 이용한 첨자 사용
          + 여러 첨자를 지정하는데 정수 배열 사용 가능.
   11. 정수 배열을 이용한 랭크 및 경계 사용
          + 가정된 모양 배열 및 명시적 모양 배열에서 랭크와 하한 사용.
   12. System Clock 개선
          + Fortran 2018에서 system clock 인수를 개선하여 다양한 정수 종류를 지원.
   13. Intrinsic Type의 추가 명명된 상수
          + iso_fortran_env 모듈에 추가된 새로운 명명된 상수들.
   14. Intrinsic Procedure c_f_pointer 개선
          + c_f_pointer에 하한을 지정하는 추가적인 선택적 인수 추가.
   15. BOZ 상수의 확장된 사용
          + 이진, 8진수, 16진수(BOZ) 상수를 초기화, 배열 생성자, 열거 생성자 등에서 사용 가능.
   16. 도 단위로 작동하는 삼각 함수
          + 도 단위로 값을 계산하는 삼각 함수 (sind(x), cosd(x), tand(x) 등).
   17. 반 회전 단위로 작동하는 삼각 함수
          + 반 회전(180도) 단위로 값을 계산하는 삼각 함수 (sinpi(x), cospi(x), tanpi(x) 등).
   18. 논리형 선택 종류
          + 논리형 타입의 저장 크기를 지정하는 selected_logical_kind(bits) 함수.
   19. 더 이상 추가되지 않은 구식 및 삭제된 기능
          + 새로운 기능을 구식 및 삭제된 기능 목록에 추가하지 않음.

   새로운 기능 요약은 John Reid 가 발표한 ""The new features of Fortran 2023"" 에서 가져왔습니다.
   이 PDF를 PDF GPT(GPT Plus 구독 필요) 에게 넣으니 잘 요약해주네요.

"https://news.hada.io/topic?id=12069","Show HN: Dalle-3과 GPT4-Vision 피드백 루프","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show HN: Dalle-3과 GPT4-Vision 피드백 루프

DALL·E 이미지 변환 파티

     * DALL·E는 이미지 변환을 위한 파티를 제공함.
     * 사용자들이 좋아하는 이미지 주제로는 '노움', '노인 시베리아인', '이상한 고양이들' 등이 있음.
     * OpenAI API 키를 사용하여 시작 프롬프트를 기반으로 이미지 생성을 진행할 수 있음.

고급 설정

     * 반복 횟수와 같은 고급 설정을 통해 사용자는 이미지 생성 과정을 조정할 수 있음.
     * GPT-4 비전 프롬프트를 사용하여 기본 프롬프트를 변경하거나, 더 재미있게, 더 기묘하게, 더 기발하게 만들거나, 모든 것을 고양이로 바꾸는 등의 사용자 정의가 가능함.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 DALL·E를 사용하여 다양한 이미지를 생성하고 사용자가 원하는 방식으로 변형할 수 있다는 점임.
     * 창의적이고 개인화된 이미지 생성 기능은 사람들에게 흥미로운 경험을 제공하며, 기술의 발전과 인공지능의 가능성을 보여주는 사례로 볼 수 있음.

        Hacker News 의견

     * 프롬프트를 가지고 놀며 일련의 이미지를 통해 무엇을 만들어낼 수 있는지 보는 것은 상당히 재미있음. 최근 트위터 게시물에서 영감을 받아, 각 프롬프트마다 ""강도""를 증가시키는 설정을 시도함. 아이의 제안으로 시작된 주제는 평범한 염소의 난동이 우주 종말의 코스믹 호러로 치닫는 것을 보며 경이로움을 느낌. 링크: dalle.party
     * 개인적으로 즐겼던 커스텀 프롬프트: 이미지의 모든 세부 사항을 심사숙고하여 스타일, 색상, 조명을 포함해 개념화함. 마지막 단계에서 이를 하나의 문단으로 압축하여 가장 두드러진 특징과 매우 정확한 언어를 사용해 생각을 요약함. 링크: dalle.party
     * 대조적인 개념으로 놀기도 재미있음. 단순한 고양이에서 시작해 편안하게 누워 있는 오이로 진화하고, 마지막으로는 반대 세계로 전환됨. 링크: dalle.party
     * 이것은 'Telestrations'이라는 파티 게임을 떠올리게 함. 참가자들이 그림을 그리고 본 것을 글로 적어가며 번갈아 진행하는데, 다음 그림이 무엇일지 예상하면서 결과를 보는 것이 유쾌함. 이미지와 다음 프롬프트를 보여주는 대안적인 시청 모드가 있으면 좋겠음. 모바일 모드로 전환하거나 창 크기를 조절하여 프롬프트를 읽은 후 이미지를 볼 수 있음.
     * 기술적인 퇴보보다는 점진적인 기술적 진화를 예상했지만, 실제로는 초현실적인 영역으로 빠르게 이탈함. 시작 프롬프트: ""미래적인 증기 기관차와 다빈치 비행 기계의 하이브리드"". 결과: dalle.party
     * 이미지-텍스트 모델은 사진이 실제로 무엇을 포함하고 있는지 전혀 모르는 것 같음. 훈련 데이터에 있는 패턴을 매칭하는 것처럼 보임. 이는 모델이 텍스트에서 이미지를 렌더링하는 데 있어서 마치 모델이 원하는 바를 ""이해""하는 것처럼 보이지만, 반대 방향으로는 ""이해""와는 거리가 멀음.
     * 아직 시도해보지 않았지만, 이것은 Scrawl이라는 상업적으로 판매되는 게임과 유사하다고 가정함. 참가자들이 종이를 돌리며 이웃의 글을 그림으로 바꾸거나 그 반대로 하고, 다시 전달하는 방식으로 진행됨. 링크: boardgamegeek.com
     * ""인공 지능이 자신의 그림을 그리는"" 시작 프롬프트로 만들어본 결과, 일관되게 로봇이 캔버스에 그림을 그리는 모습을 보여줌. 처음 4개는 로봇의 그림이고, 다음 3개는 은하, 마지막 2개는 풍경화임. 링크: dalle.party
     * 특정 프롬프트와 테마가 상대적으로 안정적으로 유지되는 것을 보는 것은 흥미로움. 예를 들어, ""노움 예시""는 안정적이지만 ""고양이가 쥐에게 강의하는"" 예시는 빠르게 이상한 초현실적인 영역으로 벗어남.
     * 결과물이 다소 잡음이 많아 실망스럽지만, 이 개념 자체는 매력적임. 링크: dalle.party
"
   Fortran - 고성능 병렬 프로그래밍 언어
"
"https://news.hada.io/topic?id=11960","에멧 셰어, 오픈AI 임시 CEO로 취임 - 알트만과의 협상 결렬","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  에멧 셰어, 오픈AI 임시 CEO로 취임 - 알트만과의 협상 결렬

OpenAI의 새로운 CEO 임명과 마이크로소프트의 움직임

     * OpenAI의 비영리 이사회는 Sam Altman의 복귀 대신 Twitch의 공동 창립자이자 전 CEO인 Emmett Shear를 임시 CEO로 임명함.
     * Shear의 임명은 OpenAI의 네 명의 이사회가 사임을 거부하고 Altman의 복귀를 허용하지 않은 후에 발표됨.
     * Microsoft는 OpenAI의 가장 큰 투자자로서, Altman과 OpenAI의 공동 창립자 Greg Brockman이 마이크로소프트에 합류하여 새로운 고급 AI 연구팀을 이끌게 됨을 발표함.

OpenAI 이사회의 결정과 직원들의 반응

     * OpenAI 이사회는 Altman이 ""일관되게 솔직하지 않았다""고 말한 후 그를 해임함.
     * Altman의 복귀를 논의하던 중 투자자들의 압력과 대규모 직원 이탈 위협에 직면함.
     * 이사회는 Altman과 Brockman을 복귀시키기 위한 마감 시간을 놓치고, 이에 직원들은 소셜 미디어에서 Altman에 대한 지지를 표현함.

Emmett Shear의 CEO 임명과 그의 계획

     * Emmett Shear는 AI 분야의 리더로 보이지 않음에도 불구하고 세계에서 가장 주목받는 AI 회사의 CEO로 임명됨.
     * Shear는 OpenAI의 임시 CEO로서의 역할을 수락하고, 이사회의 지원 없이는 이 직책을 맡지 않을 것임을 밝힘.
     * Shear는 OpenAI 직원들이 매우 인상적이며 목표 지향적이라고 언급하면서, Altman의 해임 과정과 소통이 잘못 처리되어 신뢰가 손상되었다고 지적함.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 OpenAI의 CEO 교체와 그에 따른 회사 내부의 변화, 그리고 이로 인해 마이크로소프트와의 관계가 어떻게 발전할지에 대한 전망이다. OpenAI는 ChatGPT의 성공으로 인해 AI 분야에서 빠르게 성장하고 있는 회사이며, 이러한 경영진의 변화는 AI 산업 전반에 영향을 미칠 수 있다. 이러한 변화가 기술 산업 내부의 대화와 AI의 미래에 어떤 영향을 줄지에 대한 관심이 높아질 것이며, 이는 사람들에게 흥미로운 뉴스가 될 것이다.

        Hacker News 의견

     * Altman의 OpenAI 이탈이 중요한 이유에 대한 명확한 설명이 없음
          + Altman이 다른 회사를 갖고 있지 않고, 직원들을 알지 못하는 상황에서 왜 직원들이 즉시 퇴사하는지 의문
          + OpenAI의 비영리 조직에서 일하는 사람들 중 일부는 사명보다는 큰 돈과 명성을 기다리는 것처럼 보임
          + Altman이 외국 정부와 주에서 자금을 모으는 것 외에 무엇을 제공하는지, 그리고 그의 이탈이 실제로 조직에 어떤 변화를 가져오는지 이해하기 어려움
          + Altman에 대한 지지가 그가 공개적으로 마케팅한 것과 다르게 운영되었다는 점에서 이상하고 불안한 현상
     * OpenAI 직원 수십 명이 회사를 그만두겠다고 내부적으로 발표
          + 이사회 이사 겸 수석 과학자인 Ilya Sutskever가 해임된 CEO Sam Altman이 돌아오지 않을 것이라고 직원들에게 알림
     * GPT-4 수준의 성능을 무한한 자금과 이미 내부를 잘 아는 인재로 얼마나 빨리 구축할 수 있는지에 대한 흥미로운 테스트
          + OpenAI의 크롤링 데이터와 RLHF를 통한 데이터 독점은 상당히 넓음
          + 다른 LLM을 사용하여 많은 것을 시뮬레이션할 수 있지만 실제 세계에서 관찰된 사용 경험을 대체할 수는 없음
          + ChatGPT 경쟁자가 나타나면 Altman이 지원하는 브랜드로 인해 얼마나 많은 사람들이 전환할지 궁금
     * Altman의 복귀에 대한 PR 캠페인이 설득력 있었으나 OpenAI는 그대로 유지
          + Altman은 많은 돈과 상업적 AI 가속화에 대한 그의 비전을 믿는 팀을 모집할 기회를 얻음
          + OpenAI에 남아 있는 사람들과 Altman, Brockman에게 최선을 바람
     * OpenAI의 실패가 큰 문제인가에 대한 진지한 질문
          + Microsoft, OpenAI API를 사용하는 제품을 만드는 사람들, OpenAI 직원들 외에는 대부분의 사람들에게 큰 영향이 없을 것으로 보임
          + AI에 대한 독점을 깨는 것이 바로 지난주 모두가 원했던 것
          + Twitter와 비슷한 상황이 예상되며, 대부분의 사람들에게 영향이 없을 것으로 보임
     * Karpathy의 Twitter 발언
          + Sam Altman과 대다수의 OpenAI가 존경하지만, 이사회가 그들의 극단적인 행동을 설명할 기회를 갖지 않았으므로, 현재 상황을 그대로 받아들일 수밖에 없음
     * Sam과 Greg, 그리고 OpenAI를 떠난 직원들이 Microsoft에 합류
     * OpenAI의 미래에 대한 불확실성
          + Altman이 돌아오지 않거나 현재 이사회가 사임하지 않는다면 OpenAI의 미래는 어떻게 될까
          + Microsoft가 만족하지 않을 것이며, 이사회의 의사 결정에 대한 자세한 내용이 밝혀질 때 매우 흥미로울 것
          + Altman이 자신의 AI 칩을 만들기 위해 중동 자금을 모으려는 보도와 함께, 그의 야망은 스택을 완전히 소유하는 것
     * Mira Murati가 OpenAI에서 물러남
          + 한 주에 두 번째로 CEO가 바뀜
     * AI 회사를 이끌기 위해 기술적 수준에서 ML을 어느 정도 이해하는 CEO가 필요함
          + 로켓을 만드는 회사가 기본 물리학을 이해하지 못하는 영업사원에 의해 이끌어지는 것과 같은 문제 제기
"
"https://news.hada.io/topic?id=11996","Show GN: IETF RFC문서 한글 번역 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: IETF RFC문서 한글 번역 서비스

   IETF의 RFC문서를 한글로 번역해서 볼 수 있는 웹 서비스 입니다.

   최근들어 RFC문서를 볼 일이 생겨서 개인적으로 사용하려고 만들게 되었는데 평이 좋아서 이곳에도 소개 드리고 싶어서 공유 드립니다.

   메인 화면에서 rfc넘버를 입력하고 번역 버튼을 누르면 번역이 진행 됩니다.
   이미 번역이 된 문서는 바로 표시가 되고 그렇지 않은 문서의 경우 로딩에 시간이 걸립니다.

   가볍게 번역 결과물을 확인 하고 싶으시다면 다음 링크 로 확인 할 수 있습니다.

   https://rfc.howoo.xyz/rfc5246

   프론트엔드에 기여하고 싶은데 안 되나요

   추후에 코드 공개를 통한 번역 참여나 FE, BE 참여가 가능토록 구상을 하는 중이에요.
   준비가 된다면 제가 댓글을 통해서 알려 드릴 수 있도록 하겠습니다.

   안그래도 자주 봐야하는데, 좋은 서비스 감사합니다!

   쉽게 가능할지 모르겠으나, 번역 문장이 잘 이해가 안 될 때 원문 문장을 볼 수 있으면 더 좋을 것 같습니다! 문장 단위가 어렵다면 문단이나 좀 더 큰 단위로라도 있으면 없는 것보다 훨씬 좋을 것 같아요.

   좋은 아이디어 인것 같습니다.
   지금은 단순 번역된 컨텐츠만 제공이 되도록 구성을 했는데, 향후에는 원본과 비교도 가능하면서 번역 컨텐츠를 수정하고 그걸 반영 할 수 도 있는 형태를 가지게 하고 싶습니다.
   틈틈히 만들다 가 업데이트 되면 덧글로 라도 말 씀 드릴 수 있도록 할게요.

   오 마침 오늘 rfc 문서 하나 보려고 했는데 ㅋㅋㅋㅋ 정말 감사합니다!!

   와 요즘은 직접 볼 일이 줄어들긴 했는데 인상적인 서비스네요.
   번역 로딩 시간도 나쁘지 않은 것 같습니다!
   멋지십니다!

   오 저도 관심이 있던 주제였는데 너무 반갑네요. 감사히 잘 쓰겠습니다bb

   우와 결과물 보기 깔끔해서 좋네요.

   처음에 너무 간단한 인터페이스라 당황했는데,
   RFC 번호 입력창 아래에 이미 번역된 RFC들 몇개 링크를 제안해 주시면 첫 방문자가 살펴 보기에 더 좋을 것 같아요.
   그리고 ""IETF RFC문서 한글 번역 서비스"" 제목 좀 페이지에 넣어주시면.. ㅎㅎㅎ

   이런쪽으로는 제가 생각이 부족했네요
   말씀 참고해서 개선 할 수 있도록 하겠습니다!
"
"https://news.hada.io/topic?id=12047","VectorDB - Kagi Search가 개발한 벡터 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 VectorDB - Kagi Search가 개발한 벡터 데이터베이스

     * VectorDB는 텍스트 저장 및 검색을 위한 Python 패키지로, 청킹, 임베딩, 벡터 검색 기술을 사용
     * 사용자 친화적인 인터페이스를 제공하며, 메타데이터와 연관된 텍스트 데이터의 저장, 검색 및 관리에 적합
     * 낮은 지연 시간이 필수적인 사용 사례를 위해 설계됨

설치 및 사용 방법

     * VectorDB는 오픈소스로, GitHub에서 코드와 전체 문서를 확인할 수 있음.
     * pip install vectordb2 명령어로 설치 가능함.
     * 메모리 객체를 생성하고, 텍스트와 메타데이터를 저장한 후, 관련 청크를 검색하는 방식으로 사용함.

벡터 검색 및 임베딩의 중요성

     * 대규모 언어 모델을 다룰 때 벡터 검색과 임베딩은 효율적이고 정확한 정보 검색을 가능하게 함.
     * 텍스트를 고차원 벡터로 변환하여 빠른 비교 및 검색을 지원하며, 의미적 의미를 포착하여 검색 결과의 질을 향상시킴.

예시

     * Memory 객체를 사용하여 청킹 전략을 설정하고, 머신러닝과 인공지능에 대한 텍스트와 메타데이터를 저장함.
     * 특정 쿼리에 대해 상위 n개의 관련 청크를 검색하여 결과를 출력함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 VectorDB가 텍스트 데이터를 효율적으로 저장하고 검색할 수 있는 파이썬 패키지라는 점이다. 벡터 검색과 임베딩 기술을 사용하여 대규모 데이터셋에서 빠르고 정확하게 정보를 검색할 수 있으며, 이는 데이터 기반 의사결정, 자연어 처리 등 다양한 분야에서 응용 가능함을 시사한다. 이 기술은 데이터의 양이 계속해서 증가하는 현대 사회에서 더욱 중요해질 것이며, 이로 인해 소프트웨어 엔지니어링, 데이터 과학, 인공지능 분야에 관심 있는 사람들에게 흥미로운 주제가 될 것이다.

        Hacker News 의견

     * 개발자의 의견:
          + 이 제품은 실제 데이터베이스가 아니라, 로컬에서 실행되는 임베딩과 FAISS/mrpt를 기반으로 한 래퍼(wrapper)임.
          + 지연 시간을 최소화하기 위해 많은 벤치마킹을 통해 합리적인 기본값을 제공함.
          + 사용자의 관심사에 따라 Kagi Small Web RSS 피드의 내용을 필터링하는 예시 Colab 노트북을 공유함.
     * FAISS에 대한 의견:
          + FAISS는 벡터 검색 라이브러리로 간단한 API를 제공함.
          + VectorDB가 필요로 하는 PyTorch, Tensorflow, Transformers 같은 무거운 라이브러리가 필요 없는 경우 FAISS가 더 적합할 수 있음.
     * Postgres와의 통합에 대한 의견:
          + 이미 Postgres를 운영 저장소로 사용 중인 팀은 PGVector 확장을 사용하는 것이 좋음.
          + 데이터와 벡터 검색 기능이 함께 있어 기술 스택에서 관리해야 할 부분이 줄어듦.
     * Kagi 검색에 대한 긍정적인 피드백:
          + Kagi 검색을 몇 달 동안 사용해본 결과 놀라움.
          + 이 기술이 Kagi 검색의 원동력이라면 낙관적임.
     * 데이터 저장과 한계에 대한 질문:
          + 데이터는 어디에 저장되는지, 어떻게 영속화되는지 궁금함.
          + 이 기술에는 어떤 제한이 있는지, 500-1000 단어의 텍스트와 문장이 아닌 텍스트 컬렉션에도 잘 작동하는지 질문함.
     * Crystal 언어 사용에 대한 궁금증:
          + Crystal 언어가 사용되지 않은 이유에 대해 궁금해함.
     * 벡터 데이터베이스 비교에 대한 질문:
          + 다양한 벡터 DB들을 비교한 자료가 있는지, 다른 사용 사례에 따라 어떤 것을 선택할지, 어떻게 다른지에 대한 질문이 있음.
     * ""최소한"" 프레임워크에 대한 관심:
          + HF 트랜스포머에 대한 의존성을 없애고, 청킹을 맞춤화하는 것이 흥미로움.
          + 이 프로젝트에 대한 비판이 아니라, 도움이 될 수 있는 부분을 보는 것임.
     * 임베딩 생성에 대한 질문:
          + 실제로 임베딩을 생성하는 데 사용되는 것이 무엇인지에 대한 질문이 있음.
     * 벡터 데이터베이스에 대한 블로그 링크 공유:
          + 벡터 데이터베이스가 필요하지 않다는 내용의 블로그 링크가 공유됨.
"
"https://news.hada.io/topic?id=11991","윤리 붕괴의 일곱 징후윤리 붕괴의 일곱 징후 (2012)

윤리적 붕괴의 일곱 징후

     * 마리안 제닝스의 발표 요약: 제닝스는 윤리적 붕괴를 겪은 기업들이 공통적으로 보인 일곱 가지 증상을 소개함.
     * 기업의 문제점: 기업들은 윤리적 선을 넘어서는 행위로 인해 문제에 처함. 이러한 문제는 예방 가능함.
     * 윤리적 붕괴의 공통적 특징: 숫자 유지 압박, 두려움과 침묵, 젊은 직원과 거대한 CEO, 약한 이사회, 간과되거나 해결되지 않은 이해관계의 충돌, 타의 추종을 불허하는 혁신, 다른 영역에서의 선함이 악을 상쇄한다는 믿음 등이 포함됨.

각 징후에 대한 상세 설명

     * 숫자 유지 압박: 기업들은 높은 수익률을 유지하려는 압박을 받으며, 이는 윤리적 위반을 부추김. 장기적이고 현실적인 기대를 갖는 것이 중요함.
     * 두려움과 침묵: 직원들은 윤리적 문제를 잘 알아차리지만, 정보가 상위 관리층에게 전달되지 않는 경우가 많음. 개방적인 대화를 장려하고 익명 보고 시스템을 제공해야 함.
     * 젊은 직원과 거대한 CEO: 경험이 부족한 젊은 직원들은 종종 유명한 CEO에게 도전하기 어려움. 윤리적인 행동을 위해서는 자기성찰이 중요함.
     * 약한 이사회: 경험이 부족한 이사회 멤버들은 종종 윤리적 충돌을 겪음. 강력한 관리와 갈등에 대한 깊은 이해가 필요함.
     * 이해관계의 충돌 문화: 이해관계의 충돌은 이사회의 결정에 영향을 미침. 충돌을 피하거나 공개하는 것이 중요함.
     * 타의 추종을 불허하는 혁신: 혁신적이라고 생각하는 기업들은 종종 기본적인 비즈니스 원칙을 무시함. 비즈니스와 회계의 기본 원칙을 이해하는 것이 중요함.
     * 다른 영역에서의 선함이 악을 상쇄: 기업들은 때때로 한 영역에서의 선한 행위가 다른 영역의 부정행위를 정당화한다고 믿음. 진정한 윤리성은 간단한 덕목에 기반해야 함.

GN⁺의 의견

     * 가장 중요한 것은 기업 문화가 개인의 성격과 같이 리더들의 행동과 반응에서 비롯된다는 점임.
     * 이 글은 기업 윤리의 중요성과 윤리적 붕괴를 피하기 위한 구체적인 조치들을 제시함으로써, 초급 소프트웨어 엔지니어뿐만 아니라 모든 비즈니스 전문가에게 유익하고 흥미로운 정보를 제공함.

        Hacker News 의견

     *

     경영진으로 승진하면서 옳고 그름의 명확한 경계가 흐려짐
          + 관리직으로 올라갈수록 명확한 선택에서 벗어나 어려운 타협의 세계로 진입
          + 반복되는 타협으로 인한 '타협에 대한 무감각함' 발생 가능성
     *

     SBF 사례, 스탠포드 대학교장 Marc Tessier-Lavigne 사례, 엔론 사례
          + SBF의 사기 행위, Marc Tessier-Lavigne의 연구 부정, 엔론의 전형적 사례
          + 이러한 사례들이 윤리적 붕괴의 징후를 보여줌
     *

     기업의 도덕적 실패가 기업과 직원의 도덕적 지위에 미치는 영향에 대한 논의
          + 도덕적 실패에도 불구하고 '위대한 회사, 좋은 사람들'로 묘사
          + 기업의 잘못에 대해 사후적으로 적용 가능한 목록 제시
          + 윤리적으로 타락했다고 인정받기 전까지는 부정적 평가를 받지 않는 기업들 존재
     *

     윤리적 붕괴의 7가지 징후
          + 숫자 유지에 대한 압박
          + 두려움과 침묵
          + 젊은이들과 거대한 CEO
          + 약한 이사회
          + 간과되거나 해결되지 않은 이해상충
          + 다른 회사와는 다른 혁신
          + 한 영역에서의 선함이 다른 영역의 악을 상쇄
     *

     파시즘의 14가지 징후
          + 전통의 숭배
          + 현대주의 거부
          + 행동의 숭배
          + 이견은 반역
          + 차이에 대한 두려움
          + 사회적 좌절에 대한 호소
          + 음모에 대한 집착
          + 적의 부와 힘에 의한 굴욕
          + 평화주의는 적과의 거래
          + 약자에 대한 경멸
          + 모든 사람은 영웅이 되도록 교육받음
          + 남성성과 무기
          + 선택적 포퓰리즘
          + 원시 파시즘이 뉴스피크를 사용함
     *

     성공한 조직에서도 이러한 특성 중 일부를 보이는 경우가 있음
          + 이러한 특성들이 성공의 원인일 수도 있음
          + 이러한 분석 방법은 평가 프레임워크로서 부적합
     *

     사후적 분석의 문제점
          + 회사가 투명하고 이해상충을 잘 처리하는 것처럼 보일 수 있으나, 문제가 발생한 후에야 진실이 드러남
     *

     Radical Candor/Manipulative Insincerity 프레임워크의 결함에 대한 반박
          + 직장 내 문제에 대한 무관심을 조작적 불성실로 간주하지만, 실제로는 직원들이 왜 이러한 행동을 하는지 고려하지 않음
          + 부정적인 조직 행동을 바꾸기 어려움으로 인해 직원들은 보상 극대화에 집중하고 윤리적 경계를 넘는 문제를 보고하지 않을 수 있음
     *

     WayBack Machine의 2018년 스냅샷으로 이 기사가 2007년에 작성됨을 확인
     *

     7가지 주관적 신호를 식별하는 것은 명확하지 않음
          + 대부분의 사람들에게 적용될 수 있는 점성술과 유사
          + 이러한 신호들이 얼마나 일반적인지에 대한 구체적인 데이터를 보고 싶음
     *

     약한 이사회의 특징
          + 경험이 부족한 멤버, 완전한 비즈니스 주기를 경험하지 못한 젊은 멤버들
          + 이해상충의 윤리적 문제도 종종 존재
     *

     윤리적 붕괴의 7가지 징후 요약
          + 숫자 유지에 대한 압박
          + 두려움과 침묵
          + 젊은이들과 거대한 CEO
          + 약한 이사회
          + 간과되거나 해결되지 않은 이해상충
          + 다른 회사와는 다른 혁신
          + 한 영역에서의 선함이 다른 영역의 악을 상쇄
"
"https://news.hada.io/topic?id=12019","연방 정부의 차량 '킬 스위치' 의무화, 사생활 침해의 심각한 위반","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 연방 정부의 차량 '킬 스위치' 의무화, 사생활 침해의 심각한 위반

차량 '킬 스위치' 의무화는 사생활 침해

     * 2021년 11월, 조 바이든 대통령의 1조 달러 규모의 초당적 인프라 법안에 '차량 킬 스위치'라고 불리는 위험한 조항이 포함되어 있음을 주장하는 칼럼이 발표됨.
     * 이 조항은 음주 운전 방지를 목적으로 하지만, 모든 신차에 운전자의 성능을 감시하고 장애가 감지되면 차량 작동을 중지시킬 수 있는 컴퓨터 시스템을 기본 장착하도록 요구함.
     * 이러한 주장에 대해 여러 팩트체커들은 '킬 스위치' 의무화가 사실이 아니라고 결론지었으나, 법안 자체를 검토한 결과 실제로 해당 기술이 요구되고 있음이 명확해짐.

'킬 스위치' 언급 없음

     * 팩트체커들은 '킬 스위치'라는 용어가 법안에 명시되어 있지 않다는 점을 들어 이러한 주장을 반박함.
     * 그러나 법안은 운전자 감시 및 장애 감지 시 차량 작동을 중지시킬 수 있는 컴퓨터 시스템을 명시하고 있으며, 이는 실질적으로 '킬 스위치' 기능을 의무화하는 것과 다르지 않음.

사생활 보호와 헌법

     * 미국 헌법 제4조는 불합리한 수색과 압수로부터 사람들의 사생활을 보호하고 있으나, 이 법안은 운전자를 감시하고 차량을 비활성화할 수 있는 시스템을 요구함으로써 이러한 헌법적 기준에 부합하지 않을 수 있음.
     * 이 기술의 설치는 원칙적으로 많은 미국인들이 반대할 것이며, 새 차량 구매 비용에 상당한 부담을 더할 것임.

감시 국가의 진정한 목적

     * 과거에는 감시를 사생활 침해로 여겼으나, 현재 많은 사람들은 '나는 숨길 것이 없다'는 태도를 취함.
     * 하비 A. 실버글레이트의 저서 ""하루에 세 가지 중죄를 범하는 사람들""에 따르면, 평균적인 미국인은 매일 무의식적으로 여러 법을 위반하고 있음.
     * 미국은 점차 무수한 법률로 통제되는 나라가 되어가고 있으며, 감시 국가의 위험성에 대해 대부분의 사람들이 인식하지 못하고 있음.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 미국 정부가 새로운 차량에 대한 '킬 스위치' 기술을 의무화하려는 법안의 존재와 이로 인한 사생활 침해 가능성임.
     * 이러한 정보는 소프트웨어 엔지니어를 포함한 모든 시민들에게 중요한데, 이는 개인의 자유와 사생활 보호에 직접적인 영향을 미칠 수 있기 때문임.
     * 사람들이 이 기사에 흥미를 느끼는 이유는 자신의 차량이 정부에 의해 원격으로 제어될 수 있는 가능성과 이러한 기술이 어떻게 자신의 일상에 영향을 미칠 수 있는지에 대한 우려 때문임.

        Hacker News 의견

     * 개인정보 보호에 초점을 맞추는 것은 이 경우 약한 접근 방식임. 개인정보 보호 문제는 해결 가능하므로 이에 대한 논의에 시간을 할애하는 것은 시간 낭비에 불과함.
          + 실제 문제는 우리의 자유가 실질적으로 침해받고 있다는 것임.
          + 정부가 원격으로 운송 수단을 정지시킬 수 있는 능력은 정부 통제의 새로운 디스토피아적 수준임.
     * 데이터가 차량 내부에서 분석된다고 가정할 때, 이것이 어떻게 개인정보를 침해하는지에 대한 질문.
          + 개인의 자유에 대한 심각한 침해이지만 모든 것이 개인정보 보호와 관련될 필요는 없음.
          + 해킹 가능성이 입증된 차량에 또 다른 취약점이 생기는 것에 대해 우려함.
     * 뉴럴링크와 같은 장치가 보편화되면, 사람들의 뇌에 'kill switch'를 요구할 것임.
          + 법 집행자들이 이미 사람들을 추적하고 체포할 수 있는데, 이것은 단지 그것을 더 빠르게 하는 방법임.
          + 차량에 'kill switch'를 설치하는 것은 미친 짓임.
          + 차량을 정지시키고 싶다면 수동으로 해야 함.
     * 개인 차량 소유를 기본 교통 모드로 우선시하는 결정들이 우리의 이동 자유를 제한하고 있음.
          + 차량이 점점 더 복잡해지고 ""연결""되면서 차량 의존성은 이동 자유를 더욱 취약하게 만듦.
     * 'kill switch'가 차량이 음주 운전자처럼 운전하는 것을 감지하면 차량을 정지시키는 것을 의미하는 것으로 해석됨.
          + 음주 운전자가 운전하지 못하게 하는 것의 이점은 매우 큼.
     * 팩트체크 웹사이트들이 '가스라이팅'을 하고 있다는 주장은 그 자체로 가스라이팅임.
          + 법이 원격으로 활성화될 수 있는 'kill switch'를 요구한다는 주장을 반박하는 것임.
     * 'kill switch'는 환경 운동가나 테러리스트들에게 도시를 마비시킬 수 있는 훌륭한 목표가 될 수 있음.
          + 차량이 운전하는 방식을 모니터링하는 '블랙 박스'를 가질 것을 오랫동안 생각해옴.
     * 2013년형 차량에는 너무 자주 작동하는 센서가 있어, '스마트' 자동화가 항상 올바른 일을 할 것이라는 비 IT인들의 신뢰가 놀랍다고 함.
     * 법률에 포함된 보이지 않는 것들이 어떻게 결합되어 대중의 인식과 매우 다른 결과를 가져오는지에 대한 이해를 돕기 위해 'The Power Broker'를 읽을 것을 권장함.
     * 법안에 미래의 법안이 원격 접근을 의무화하려 할 경우 두 법안 모두 즉시 무효화되는 조항을 포함시키는 것이 해결책이 될 수 있음.
          + 어떤 경우에도 원격 접근 가능한 'kill switch'를 지지하지 않음.
"
"https://news.hada.io/topic?id=11966","보잉이 지불을 거부한 후 랜섬웨어 그룹이 45GB 데이터 유출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   보잉이 지불을 거부한 후 랜섬웨어 그룹이 45GB 데이터 유출

     * 보잉이 러시아 쪽의 LockBit 랜섬웨어 그룹에 의해 공격 받음. 그룹은 보잉이 대응하지 않을 경우 데이터를 공개하겠다고 경고.
     * 11/10일 데드라인을 지나자 45GB 이상의 파일 공개. IT 관리, 모니터링, 감사 도구 백업 및 Citrix 장비 백업 포함.
     * 보잉은 사이버 공격을 확인했지만 해킹 세부사항은 공개하지 않음.
     * LockBit은 4년 이상 활동중이며, 미국 내에서만 1,700건 이상의 공격으로 약 9,100만 달러 갈취
     * MalwareHunter 팀은 유출 내용을 검토한 후 Boeing이 2006년에 인수한 부품 유통업체인 Aviall에서 유출된 것일 가능성이 있다고 주장
          + Aviall이 Boeing 시스템과 17년간 통합했기 때문에 유출의 심각성이 이미 알려진 것보다 더 심각할 수 있다고
"
"https://news.hada.io/topic?id=12031","HN 소개: IP 가이드 – IP 주소, 네트워크 및 ASN에 대한 정보","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                HN 소개: IP 가이드 – IP 주소, 네트워크 및 ASN에 대한 정보

인터넷 번호 안내

     * IP 주소: 단일 IP 주소에 대한 세부 정보 제공
     * 네트워크: 전체 네트워크에 대한 세부 정보 제공
     * 자율 시스템: 조직에 대한 세부 정보 제공
     * 대량 데이터: 네트워크를 ASN에 매핑하기 위한 정보 제공

예시 데이터

     * IP: 3.34.96.173
     * 네트워크 CIDR: 3.34.0.0/15
     * 호스트 범위: 시작 3.34.0.1, 끝 3.35.255.254
     * 위치: 위도 37.4585, 경도 126.7015, 도시 인천, 국가 대한민국, 시간대 아시아/서울
     * 자율 시스템: ASN 16509, 이름 AMAZON-02, 조직 Amazon.com, Inc., 국가 US, RIR ARIN

GN⁺의 의견

   이 글에서 가장 중요한 것은 인터넷 상의 각 요소들을 식별하는 방법과 이들 간의 연관성에 대한 이해임. IP 주소, 네트워크, 자율 시스템 등의 개념을 명확히 파악할 수 있으며, 이는 초급 소프트웨어 엔지니어에게 네트워킹 기초 지식을 제공하는 데 매우 유익함. 이러한 정보는 인터넷의 구조와 작동 방식에 대한 통찰력을 제공하며, 이는 기술에 관심 있는 사람들에게 흥미로운 주제가 될 수 있음.

        Hacker News 의견

     * 웹페이지에 대한 호감
          + 웹페이지가 정보 제공과 미니멀리즘 측면에서 매우 마음에 듦.
          + 자신의 서버에 연결을 시도하는 IP를 조회하고, 국적에 따라 차단하는 기능에 대한 가능성에 대해 언급.
     * curl ipinfo.io 사용 경험
          + 현재 사용자는 curl ipinfo.io를 통해 JSON 형식의 지리적 위치 정보를 얻고 있음.
          + 얻은 정보에는 네트워크 정보가 누락되어 있고, ASN 정보가 조직이나 국가 정보 없이 문자열로 제공됨.
          + curl ip.guide 사용 시 리다이렉트 문제로 인해 결과가 제대로 출력되지 않는 문제를 겪고 있음.
     * 서비스 개선 요청
          + 사용자는 IP 주소가 학교에 속해 있는지 알려주는 기능을 요청함.
          + 학교를 식별하기 위한 작업(예: rDNS)의 필요성을 인지하고 있음.
          + 응답 속도에 대한 만족을 표현함.
     * 추가 정보 요청
          + RIPE, BGP, ARIN에 대한 간단한 설명이 도움이 될 것이라고 언급함.
          + IPv6 주소에 대한 정보 제공 가능성에 대한 질문.
          + IP 주소가 대형 기술 회사(예: AWS, Azure 등)에 의해 호스팅되고 있는지에 대한 정보 제공 요청.
          + 호스트 이름과 연관된 IP 정보 제공에 대한 관심 표현.
     * 유사 서비스 제공자의 의견
          + 서비스의 단순함을 칭찬함.
          + 자신도 비슷한 서비스를 제공하고 있으며, 특히 봇/데이터 센터/VPN IP 주소에 초점을 맞추고 있음을 언급.
     * 지리적 위치 정보 출처 질문
          + 사용자는 지리적 위치 정보를 얻기 위해 MaxMind GeoLite2 데이터베이스와 GeoIP2 Python API를 사용하고 있음.
          + 일부 IP 주소에 대해서는 국가 수준의 정보만 얻을 수 있으며, 그마저도 정확하지 않을 수 있다고 언급함.
          + 쿼리에 대한 속도 제한이 있는지에 대한 질문.
     * HTTP API에 대한 호감
          + 단순하고 사용자 친화적인 URL을 가진 HTTP API에 대한 호감을 표현함.
          + 이와 유사한 다른 서비스에 대한 정보를 알고 싶어 함.
     * 오프라인 데이터베이스 사용 제안
          + 사용자는 MMDB, CSV, JSON 형식으로 데이터베이스를 다운로드할 수 있는 옵션을 제공하는 것에 대해 제안함.
          + 이를 통해 사용자가 오프라인 상태에서도 데이터베이스를 활용할 수 있게 될 것임.
     * PowerShell 명령어 추가 제안
          + PowerShell을 사용하여 위치 정보를 조회하는 명령어를 문서에 추가할 것을 제안함.
     * 네트워크 조회 시 시작/종료 주소 표시 요청
          + 네트워크 정보를 조회할 때 시작 및 종료 주소를 표시하는 것이 도움이 될 것이라고 언급함.
          + 이를 통해 CIDR 계산기를 별도로 사용하지 않고도 네트워크 범위를 파악할 수 있을 것임.
"
"https://news.hada.io/topic?id=11994","OpenAI 연구원들, CEO 축출을 앞두고 이사회에 AI 혁신에 대한 경고 서한을 보냈음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenAI 연구원들, CEO 축출을 앞두고 이사회에 AI 혁신에 대한 경고 서한을 보냈음

     * OpenAI의 연구진이 샘 알트먼 사건 4일전, 이사회에 강력한 인공지능 발견에 대해 경고하는 편지를 보냄
     * 편지 내용은 확인되지 않았으나, 연구진은 AI의 능력과 잠재적 위험을 지적함

Q* 프로젝트의 진전

     * OpenAI는 Q*라는 프로젝트에서 인공 일반 지능(AGI)을 향한 돌파구를 이룬 것으로 내부적으로 믿음
     * Q*는 초등학생 수준의 수학 문제를 해결할 수 있는 능력을 보여줌으로써 연구진의 큰 기대를 모음
     * AGI는 제한된 연산만 해결하는 계산기와 달리 일반화, 학습, 이해 능력을 가짐

SUPERINTELLIGENCE

     * 수학은 생성적 AI 발전의 전선으로, 현재 AI는 다음 단어를 통계적으로 예측하여 글쓰기와 언어 번역에 능함
     * 수학 문제 해결 능력은 AI가 인간 지능과 유사한 추론 능력을 가질 수 있음을 시사함
     * 이러한 능력은 새로운 과학 연구에 적용될 수 있음

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 OpenAI의 연구진이 이사회에 AI의 잠재적 위험을 경고한 사실과 Q* 프로젝트의 진전임.
     * 인공 일반 지능(AGI)에 한 발짝 더 다가선 것으로 보이는 이 발견은 AI 기술의 미래와 인류에 미칠 영향에 대한 흥미로운 토론을 촉발할 수 있음.
     * AI의 발전이 가져올 긍정적인 가능성과 함께, 잠재적인 위험성에 대한 인식을 높이는 계기가 될 수 있어 사람들에게 매력적인 주제임.

   근데 이런건 뭐 시간의 문제 아닌가요? 아무리 먼저 개발한 OpenAI에서 공개를 늦추거나 취소한다 해도 다른 경쟁사나 오픈소스 커뮤니티에서 언젠가는 유사한게 나올 것 같은데..

        Hacker News 의견

     * 4chan에서 몇 일 전에 올라온 이론과 관련하여, 만약 버전이 공식적으로 AGI(일반 인공지능)로 선언된다면, Microsoft 등에 상업적 이득을 위해 라이선스를 줄 수 없게 된다는 내용이 있음. 이에 따라 Altman은 AGI로 불리는 것을 원하지 않지만, 다른 이사회 멤버들은 원한다는 주장이 제기됨.
     * Q라는 새로운 모델이 주어진 방대한 컴퓨팅 자원을 이용하여 일정 수준의 수학 문제를 해결할 수 있었다는 발견에 대한 언급이 있음. 이 모델은 초등학생 수준의 수학 문제를 해결하는 데 성공했으며, 연구자들은 Q의 미래 성공에 대해 매우 낙관적임.
     * Sam Altman이 최근 Q* 발견과 관련해 언급한 두 가지 댓글이 있음. 하나는 APEC에서 11월 18일에 한 댓글이고, 다른 하나는 9월 22일에 트위터에 올린 글임. 이들은 OpenAI의 발전과 발견의 순간을 언급하고 있음.
     * 개인의 부와 권력에 한계를 두는 것이 좋은 아이디어라는 의견이 있음. 석유 회사들이 이익을 위해 지구를 파괴하고, 기술 회사들이 이익을 위해 사생활을 침해하는 것을 본 바 있으며, Sam Altman이 이익을 위해 무엇을 할지 또는 하지 않을지에 대한 질문이 제기됨.
     * 약 한 달 전 Sam Altman이 AI가 일반 지능에서 초인간적인 설득 능력을 갖기 전에 매우 이상한 결과를 초래할 수 있다는 댓글을 남겼음. 이사회는 최근의 돌파구에 놀라서 비상 버튼을 눌렀을 가능성이 있으며, 선거 주기 전에 ""초인간적인 설득"" 능력을 가진 것은 잘못된 손에 들어갈 경우 엄청난 결과를 초래할 수 있음.
     * 언젠가 AI가 50%의 일자리를 수행하고, 주요 결정을 내리며, AI가 운전하는 차량에 타고 다니고, 사람들이 AI와 로맨틱한 관계를 맺는 날이 올 것이지만, 그때까지도 우리는 만들어진 것이 진정한 AGI인지에 대해 논쟁할 것임. AGI는 항상 다음 단계로 여겨질 것이며, 어느 날 우리는 몇 년 전에 이미 그 선을 넘었다는 것을 깨닫게 될 것임.
     * OpenAI의 이사회가 Sam Altman을 신뢰하지 못하고, 회사를 폭발시키는 것이 해당 기술을 탐구하는 것보다 낫다고 생각하는 이유를 설명하는 데 도움이 되는 내용이 있음.
     * 이사회가 Sam Altman을 해고하는 것과 관련된 서한에 대한 내용이 더 잘 부합하며, 중대한 발견을 보고하지 않고 직원 서한을 통해 알게 된 것은 ""솔직하지 못함""으로 간주될 수 있음. 또한, 만약 종말 시나리오를 가정한다면, 이러한 비밀이 악당의 손에 들어가지 않도록 얼마나 오래 비밀을 유지할 수 있을지에 대한 질문이 있음.
     * OpenAI가 마케팅 전략에서 선구적인 접근을 하고 있다는 의견이 있음. ""우리는 이 캐비닛 안에 강력한 AGI를 가지고 있으며, 너무 강력해서 풀어주고 싶지 않다""는 식의 메시지로 사람들로부터 돈을 받아 안전을 유지하겠다고 주장하고 있음.
     * 한 부모가 자신의 12살짜리 아들과 수학의 지루한 부분에 대해 대화를 나누었고, 아들은 절대값이 매우 쉽고 지루하다고 생각한다고 말함. 복소수를 사용하면 더 흥미로울 수 있다는 아들의 의견을 듣고, 부모는 복소평면에서 절대값이 실수와 허수의 빗변임을 이해하고 있다는 것을 알게 됨. 이러한 이해는 단순히 많은 동의어 사전을 가지고 있는 결과가 아니라, 기본적인 메커니즘에 대한 이해에서 비롯된 것임. 대규모 언어 모델이 어떤 과정을 통해 이와 같은 결론에 도달할 수 있는지에 대한 질문이 제기됨.

   별 지랄를 떤다 나한테 드론만사주면 일반인공지능 개념 갖다줌
"
"https://news.hada.io/topic?id=11974","구글, 비밀 계약으로 Spotify가 플레이 스토어 수수료를 내지 않는다고 인정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              구글, 비밀 계약으로 Spotify가 플레이 스토어 수수료를 내지 않는다고 인정

     * Google 임원이 Epic 대 Google 재판에서 증언을 통해 Spotify가 Play Store 수수료를 지불하지 않는 비밀 계약이 있음을 밝힘
     * Spotify는 자체 결제 시스템을 사용할 때 수수료가 없으며, Google 결제 시스템을 사용할 때는 4%의 낮은 수수료만 지불함
     * 양사는 각각 5천만 달러를 '성공 기금'에 투자하기로 합의

Google의 Play Store 수수료 정책

     * Google은 일반적으로 구독 앱에 대해 15%의 수수료를 받으나, 개발자가 자체 또는 제3자 결제 솔루션을 사용할 수 있는 '사용자 선택 결제' 프로그램을 통해 11%로 감소할 수 있음
     * Google은 Android와 Play에 더 많은 사용자를 유치하고 모든 사용자와 개발자를 위한 경험을 지속적으로 개선하기 위해 특정 파트너십을 통해 다른 서비스 수수료를 적용함

Google의 다른 대형 회사와의 협상 시도

     * Google은 Netflix에게 2017년 Play Store 구독에 대해 10% 수수료만 지불하는 계약을 제안했으나, 현재 Netflix는 Android 앱을 통한 구독 구매를 허용하지 않음
     * Google은 지난달 Match Group과 합의하여 Play Store에서 제3자 결제 솔루션을 사용할 수 있도록 함
     * Epic은 Google의 '사용자 선택 결제' 제안을 거절하고 이달 초 재판에 참여함. 재판을 통해 Google Play Store의 내부 작동 방식에 대한 많은 정보가 드러남

GN⁺의 의견

   이 기사에서 가장 중요한 점은 Google이 Spotify와 같은 대형 앱 제공업체와 특별한 계약을 맺어 Play Store의 표준 수수료를 우회할 수 있는 방법을 제공하고 있다는 것이다. 이러한 정보는 소프트웨어 업계의 경쟁과 공정성에 대한 논의를 촉발할 수 있으며, 개발자와 소비자 모두에게 영향을 미칠 수 있는 중대한 사안이다. 이 기사는 대기업과의 협상 및 파트너십이 어떻게 디지털 마켓플레이스의 규칙을 바꿀 수 있는지에 대한 흥미로운 사례를 제공함으로써, 기술 산업의 복잡한 상호작용과 전략적 결정에 대한 통찰력을 제공한다.

   다른 회사들도 더 있겠죠..?

        Hacker News 의견

     * Spotify의 문제는 수익의 약 80%를 저작권자에게 지불해야 한다는 점이며, 이로 인해 Apple의 15% 수수료는 지속 가능한 비즈니스를 남기지 않음.
          + Spotify는 일시적으로 앱 스토어를 통한 구독료를 더 많이 청구하여 이 문제를 해결함.
          + Google은 Epic 소송이 될 것을 알고 Spotify를 끌어들이기를 원했으며, Spotify가 신용카드 수수료로 약 2%를 지불하는 것을 알고 있었음.
          + 인앱 결제의 전환율이 높지만, 저작권자에게 지불해야 하는 고정된 비용 한계가 있어, 모두를 만족시키는 거래를 찾음.
          + Fortnite의 한계 비용이 낮아 Google은 가격 차별을 계속함. Google이 시장을 통제하는 것이 문제임.
     * 서비스에 대한 비율 기반 수수료는 범죄적임.
          + Spotify의 가치는 소비자에게 음악 스트리밍을 제공하는 것이며, Apple이나 앱 스토어는 이 과정에 어떤 역할도 하지 않음.
          + 앱 스토어 운영 비용을 커버하는 일정 수수료는 공정하지만, 엄청난 수익을 빼앗는 것은 범죄적임.
     * 경쟁사가 되어보면, 매달 로열티를 지불하며 고군분투하는 동안 경쟁사가 비밀 거래로 아무것도 지불하지 않았다는 사실을 알게 됨.
          + 경쟁사가 이익을 내고 급여를 지불하는 데 어려움을 겪는 동안 어떻게 그들이 성공했는지 이해할 수 없음.
          + 이러한 벽으로 둘러싸인 생태계는 건강한 경쟁을 만드는 데 매우 부정적이며, 이러한 뉴스는 그러한 행동의 증거를 더함.
     * 주주라면 Google이 GPMAA를 대체하고, 유지 관리가 적은 YTM을 만들어내며, 담합에서 이익을 얻는 것에 만족할 수 있음.
          + 그러나 Google이 포기한 제품에 의해 피해를 본 사람으로서, Google의 모든 제품을 피하려고 함.
     * 작은 안드로이드 개발자들은 Google의 모든 수수료를 지불하지만, 큰 Spotify는 그렇지 않음.
     * 회사들이 거래와 협상을 하는 것은 새로운 소식이 아님. Qualcomm이 ARM 특허를 사용하기 위해 지불하지 않은 거래가 흥미로움.
     * 공개된 이용 약관을 위반하는 비밀 거래는 반독점 법을 상징함.
     * 가격 차별이 불법은 아니지만, Google은 Apple이 존재하기 때문에 독점이 아니라고 주장함.
          + 이러한 비밀 거래를 알게 된 다른 고객들이 화를 내지만, 안드로이드 플랫폼에 대한 대안적 시장은 없음.
          + 앱 개발자들이 수수료를 지불하는 것은 불공정한 위치에 있으며, Google은 앱 검토와 기타 I/O 비용에 대해 일회성 수수료를 지불함.
     * 플랫폼 차별이 FB을 FTC 합의에 이르게 함. 이 문제로 많은 사람들이 곧 많은 일을 할 것임.
     * Spotify는 매우 좋은 거래를 협상하는 데 능함. PS4에서 Spotify는 게임을 하면서 배경 음악을 대체할 수 있는 유일한 앱임을 발견함.
"
"https://news.hada.io/topic?id=12025","자율주행 굴착기가 건설한 6미터 높이의 건조석벽","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       자율주행 굴착기가 건설한 6미터 높이의 건조석벽

자율 굴삭기가 6미터 높이의 건조석벽을 구축하다

     * ETH Zurich 연구진이 수톤에 달하는 바위와 철거 잔해를 사용하여 자율 굴삭기가 스스로 건조석벽을 구축하는 방법을 개발함.
     * 건조석벽은 현지에서 조달한 재료를 사용하며, 낮은 에너지가 투입된 콘크리트 슬래브 등을 활용하여 자원 효율성이 높음.
     * HEAP이라 불리는 자율 굴삭기는 디지털로 계획되고 자율적으로 굴착된 풍경과 공원에 6미터 높이, 65미터 길이의 건조석벽을 구축함.

연구진의 협업과 기술 개발

     * Gramazio Kohler Research, Robotics Systems Lab, Vision for Robotics Lab, Landscape Architecture 의자 등 다양한 분야의 연구진이 협력하여 이 혁신적인 디자인 응용을 개발함.
     * 이 프로젝트는 디지털 제작을 위한 국가연구센터(NCCR dfab)의 일환으로 진행됨.

자율 굴삭기의 센서와 알고리즘 활용

     * 굴삭기는 센서를 사용하여 건설 현장의 3D 지도를 자율적으로 그리고, 벽 구축에 사용될 기존의 건축 블록과 돌을 찾아냄.
     * 특별히 설계된 도구와 기계 시각 기술을 통해 굴삭기는 주변의 큰 돌을 스캔하고 잡을 수 있으며, 대략적인 무게와 무게 중심을 파악함.
     * 알고리즘은 각 돌에 대한 최적의 위치를 결정하고, 굴삭기는 스스로 작업을 수행하여 돌을 원하는 위치에 놓음.
     * 자율적인 기계는 한 번에 20~30개의 돌을 배치할 수 있으며, 이는 한 번의 배송으로 공급될 수 있는 양과 비슷함.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 자율 굴삭기가 인간의 노동을 대체하여 대규모 건축 프로젝트를 수행할 수 있는 기술의 발전임. 이 기술은 건설 현장에서의 작업 효율성을 크게 향상시킬 수 있으며, 자원을 효율적으로 사용하여 환경에 미치는 영향을 줄일 수 있는 가능성을 제시함. 이러한 혁신적인 연구는 건설 산업뿐만 아니라 로봇공학과 디지털 제작 분야에도 흥미로운 발전을 가져올 것으로 기대됨.

        Hacker News 의견

     * 스페인 카탈로니아의 농촌 지역에서 ""Pedra Seca""라는 전통 건축 기법이 있음. 이 기법은 오직 돌만을 사용하여 구조물을 짓는 방식으로, 주로 농업 분야에서 여전히 사용 중임.
          + 스페인 전통 건축 기법: ""Pedra Seca""는 돌만을 사용해 구조물을 짓는 카탈로니아의 전통적인 방식으로, 농업 분야에서 활용됨.
     * 건조한 돌로 벽을 짓는 작업의 가치를 인정함. 돌을 어디에 어떻게 배치할지 판단하는 것은 명상과 같은 예술임. 벽에 야생화를 피우려고 시도했으나 씨앗이 떨어지거나 새들에게 먹힘. 영감을 받아 상사가 샷건 탄환에 씨앗을 채워 벽에 발사한 결과, 이듬해 벽은 꽃으로 덮임.
          + 건축과 자연의 조화: 건조한 돌로 벽을 짓는 것은 예술적인 작업이며, 샷건으로 씨앗을 발사해 벽에 꽃을 피우는 창의적인 방법이 성공함.
     * 'Gravis Robotics'라는 회사가 흥미로운 기술을 개발 중임. 그들의 홍보 영상에는 기술적인 세부사항도 포함되어 있음.
          + Gravis Robotics: 기술적인 세부사항을 담은 홍보 영상을 통해 흥미로운 로봇 기술을 선보이고 있음.
     * 건조한 돌로 만든 벽은 노동 집약적이고 높은 기술을 요구하는 게임 체인저 기술임. 이러한 벽은 안전성에 대한 의문이 있으나, 숙련된 인간 작업자에 의해 만들어진 벽은 안전함을 경험을 통해 알게 됨.
          + 건조한 돌 벽의 안전성: 높은 기술을 요구하는 건조한 돌 벽이 안전한지에 대한 의문이 제기되나, 숙련된 작업자에 의해 안전하게 건설됨을 확인함.
     * 인간이 다루기 어려운 다양한 자유도를 가진 중장비를 조작하는 것은 어려움. 몇십 년 전 가상 현실 입력 장치와 힘 피드백을 사용한 굴착기가 개발되었으나, 제품화되지는 않음.
          + 중장비 조작의 어려움: 다양한 자유도를 가진 중장비 조작은 어려우며, 가상 현실과 힘 피드백을 활용한 굴착기가 개발되었으나 상용화되지 않음.
     * 다가오는 다중 모달 기반 모델로 인해 더 많은 로봇이 등장할 것이며, 로봇 공학 분야는 향후 5년 내 크게 달라질 것임. 중국은 2025년까지 인간형 로봇을 대량 생산할 계획이며, 테슬라는 2025년에서 2027년 사이에 저렴한 로봇을 대중에게 제공할 계획임.
          + 로봇 공학의 미래: 다중 모달 기반 모델의 발전으로 로봇 기술이 급속도로 발전하며, 중국과 테슬라가 인간형 로봇을 대중화할 계획임.
     * ETH Zurich는 유명한 공학 대학으로, 컴퓨터 과학자 Edsger Dijkstra와 연관되어 있으나 실제로는 그곳에 기반을 두지 않았음.
          + ETH Zurich: 유명한 공학 대학이며 컴퓨터 과학자 Edsger Dijkstra와 연관 지어 생각되기도 하지만 실제로는 그곳에 기반을 두지 않았음.
     * 기사에 실린 벽의 사진이 디지털로 조작된 것처럼 보임. 사람이 걷는 왼쪽 부분에서 돌이 균일한 회색으로 변하고 물의 반사와 일치하지 않음. 이는 디지털 계획과 실제 벽의 비교를 의도한 것일 수 있음.
          + 사진의 디지털 조작: 기사에 실린 벽의 사진이 디지털 조작으로 의심되며, 이는 디지털 계획과 실제 벽의 비교를 나타낼 수 있음.
     * 수십 년 내에 웹캠을 연결해 실제로 마인크래프트를 할 수 있게 될지 궁금함.
          + 현실과 게임의 결합: 웹캠을 활용해 실제 세계에서 마인크래프트를 할 수 있는 날이 올지에 대한 호기심 표현.
"
"https://news.hada.io/topic?id=12054","Ask HN: Reddit 블랙아웃의 결과는 무엇이었나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask HN: Reddit 블랙아웃의 결과는 무엇이었나요?

        Hacker News 의견

     * Reddit 정책 변화 없음
          + Reddit의 정책 변화는 없었으며, 콘텐츠 게시 및 관리에 책임이 있는 일부 사용자들이 플랫폼을 떠나면서 눈에 띄는 영향을 미침.
          + 주요 서브레딧의 통계를 보여주는 웹사이트를 통해 2019년부터 현재까지 지속적인 감소 추세와 2023년 7월에 급격한 하락이 있었음을 확인할 수 있음.
          + 한번 사용자가 떠난 플랫폼이 그들을 다시 대규모로 되돌리는 것은 드문 일이며, Reddit은 Slashdot과 같이 좀비 플랫폼이 될 것으로 예상됨.
     * Apollo 앱 사용 중단
          + 개인적으로 Apollo 앱을 사용하지 않게 되었으며, 이로 인해 Reddit을 휴대폰으로 읽는 시간이 줄어듦.
          + Apollo 앱의 편리함 때문에 스스로 멈추기 어려웠으나, 이제는 사용을 중단하고 안도감을 느낌.
     * 게시물 품질 저하
          + 블랙아웃 이후 게시물의 품질이 크게 떨어졌으며, 특히 틈새 서브레딧마저도 품질이 하락함.
          + 잘 관리되던 ""좋은"" 서브레딧들이 문을 닫고, 나쁜 서브레딧들이 인기를 얻어 품질이 좋은 서브레딧들을 앞질렀음.
     * 서브레딧 붕괴 및 대체 플랫폼 이동
          + 많은 서브레딧이 완전히 붕괴되었고, 새로운 팔로워를 끌어들이는 서브레딧들은 품질 저하를 겪음.
          + Lemmy.world와 Mastodon.world 같은 대체 오픈소스 커뮤니티의 사용량이 급증함.
          + Lemmy는 텍스트 기반 커뮤니티에 적합하지만, 이미지 기반 커뮤니티는 NSFW/트롤링 문제가 있음.
          + Lemmy 관리자들은 이 문제에 대한 해결책을 모색 중이며, 더 나은 도구가 필요함.
     * Reddit의 수익화 필요성
          + Reddit은 수익화를 위한 노력의 일환으로 블랙아웃을 겪었으며, 이는 고통스러웠지만 수익화를 결코 이루지 못한다면 Reddit은 어차피 죽은 플랫폼임.
          + Reddit이 매력적인 커뮤니티를 육성하고 충분한 수익을 창출하는 방법을 찾기를 희망함.
     * Reddit의 대안 부재
          + 윤리적으로는 그라스루트 운동을 지지하지만, 다양한 주제에 대한 캐주얼하고 익명의 공개 참여를 위한 최소 저항 경로로서 Reddit의 대안은 없음.
          + 일정 기간 동안 사용을 중단했지만, 결국 다시 Reddit을 사용하게 됨.
     * Reddit 커뮤니티의 이동과 모더레이터 교체
          + 일부 Reddit 커뮤니티는 Lemmy와 같은 다른 플랫폼으로 이동함.
          + 많은 서브레딧 모더레이터들이 항의했으나 교체되었고, Reddit은 양보하지 않았으며 운동은 대부분 기세를 잃음.
     * Reddit 사용량 감소
          + 사람들이 조용히 떠나면서 Reddit 사용량이 감소했으며, 현재 게시물의 품질이 매우 나쁨.
          + 개인적으로 대안을 만들려고 시도했지만, Reddit이 현재 직면한 문제는 사용자를 늘리고 고품질 콘텐츠를 유지하는 것임.
     * Reddit에 대한 회의적 시각
          + 일부는 블랙아웃에서 아무 일도 일어나지 않을 것이라고 이미 알고 있었으며, 사람들이 사용하는 서비스에 대해 이해하지 못함.
          + 대부분의 사람들은 Reddit, Facebook, YouTube의 배후에 무엇이 있는지 모르고, 무료로 제공되는 서비스를 당연하게 사용함.
"
"https://news.hada.io/topic?id=12046","당신을 사기로부터 보호하기 위해 통화 중임을 명확히 하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   당신을 사기로부터 보호하기 위해 통화 중임을 명확히 하는 방법

Monzo 앱의 새로운 기능으로 사기 방지

     * Monzo 앱에서는 이제 사용자가 Monzo 직원이라고 주장하는 사람의 신원을 확인할 수 있는 새로운 기능을 제공함.
     * 이 기능은 사기꾼들이 Monzo 직원이라고 속여 돈을 보내게 하는 것을 막기 위해 설계됨.

Monzo 앱에서 통화 상태 확인 방법

     * Monzo에 근무한다고 주장하는 사람으로부터 전화를 받았을 때, Monzo 앱의 '개인정보 및 보안' 설정에서 'Monzo 통화 상태'를 확인할 수 있음.
     * 앱에서 Monzo 팀원이 통화 중이 아니라고 표시되면 즉시 전화를 끊고 사기 시도를 신고해야 함.
     * 앱의 통화 상태가 Monzo 팀원이 통화 중임을 보여주면 안심하고 통화를 계속할 수 있음.

통화 상태는 거짓말을 하지 않음

     * 상대방이 기술적 문제가 있다거나 통화 상태에 표시되지 않는 특별한 팀의 일원이라고 주장하더라도 믿지 말고 전화를 끊고 앱을 통해 사기 시도를 신고해야 함.
     * 인터넷에 연결되어 있지 않은 경우, 통화 상태는 그 상황을 반영하며, 인터넷에 다시 연결될 때까지 Monzo라고 주장하는 사람과 대화하지 않는 것이 좋음.

Monzo가 절대 요구하지 않는 것들

     * Monzo는 앱 내 채팅을 통해 미리 약속하지 않고는 사용자에게 전화를 걸지 않으며, 전화를 걸 경우 계정 관련 사항을 논의하기 전에 보안 질문을 할 것임.
     * Monzo는 사용자에게 보유 계좌로 돈을 보내거나, Pot에서 돈을 인출하거나, 어떤 이유로든지 결제나 돈을 보내거나, 전화에서 알림을 수락하거나, 사기나 지불 경고를 무시하거나, PIN이나 개인 정보를 제공하거나, 대출을 받거나 Monzo Flex를 사용하도록 요구하지 않음.

사칭 사기로부터 보호

     * 지난해 영국에서만 약 1억 7천만 파운드가 사칭 사기로 인해 손실되었으며, 이 새로운 기능은 바로 그러한 사기로부터 사용자를 보호하는 데 도움을 줌.
     * Monzo 통화 상태를 앱에 추가함으로써 사용자가 실제로 Monzo 직원과 통화하고 있는지 확인할 수 있게 되었으며, 이는 Monzo 고객에게 사칭 사기를 완전히 막을 수 있는 가능성을 제공함.

사기 신고에 활발히 사용되는 기능

     * 이 기능이 출시된 이후, 고객들이 하루 평균 약 100회 사기 의심 사례를 신고하는 데 사용하고 있음.
     * 기능이 활성화되어 고객을 보호하는 현재, Monzo는 이 기능을 더 눈에 띄게 만들 방법을 고민 중임.
     * '개인정보 및 설정'에 위치한 것은 자연스러운 선택이지만, 전화 중에 누가 자신을 속이고 있는지 빠르게 확인하고 싶을 때 더 쉽게 찾을 수 있는 곳에도 표시되어야 함.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 Monzo가 고객을 사칭 사기로부터 보호하기 위해 새로운 앱 기능을 도입했다는 점입니다. 이 기능은 사용자가 Monzo 직원과 실제로 통화하고 있는지 확인할 수 있게 해주며, 사기꾼들이 Monzo 직원을 사칭하여 돈을 보내도록 속이는 것을 방지할 수 있습니다. 이러한 혁신적인 보안 조치는 금융 사기가 지속적으로 증가하는 현대 사회에서 사용자의 자산을 보호하는 데 큰 역할을 할 것입니다. 이 기능이 사람들에게 흥미로운 이유는 기술을 활용하여 개인의 금융 보안을 강화하고, 사기를 예방하는 새로운 방법을 제시하기 때문입니다.

        Hacker News 의견

     * 역방향 2단계 인증 필요성
          + 은행이나 기관으로부터 전화를 받을 때, 사용자가 상대방에게 6자리 숫자를 생성하여 인증 요청을 할 수 있는 시스템의 필요성. 이를 통해 실제 은행 직원인지 확인 가능.
     * 영국 온라인 은행 피싱 사기 경험
          + 고도로 정교한 피싱 시도에 대한 경험담. 사기범들이 거래 내역과 개인 정보를 알고 있었으며, 가짜 발신자 ID를 사용. 영국에서는 159번으로 은행 사기 부서에 직접 연락할 수 있고, 사이버 범죄 신고는 'Action Fraud' 핫라인을 통해 가능.
     * Ally Bank의 불만족스러운 경험
          + Ally Bank의 직원이 소셜 시큐리티 번호를 요구했으나, 사용자가 거절하고 은행에 직접 연락하기로 결정. 결과적으로 해당 사용자의 카드는 여전히 잠겨 있음.
     * 전화 시스템에 대한 과도한 신뢰 문제
          + 전화나 이메일을 통한 사업 거래에 대한 경계 필요성. 특히 노년층이 사기에 취약하므로, 이들에게 전화를 통한 거래에 대한 주의를 당부해야 함.
     * 은행 앱의 보안 기능 개선 제안
          + 전화를 받기 전에 앱 푸시 알림을 보내거나, 앱에 로그인 시 바로 보이는 배너를 통해 사용자가 현재 은행과 통화 중이 아님을 알리는 시스템 제안.
     * 은행 앱의 인앱 알림 기능
          + 은행에서 전화를 걸 때, 앱 내에서 인앱 알림을 통해 사용자에게 확인을 요청하는 기능이 이미 몇몇 은행에서 사용 중임.
     * 은행과의 안전한 커뮤니케이션
          + 전통적인 전화/모바일 네트워크나 이메일 대신 앱 내 안전한 커뮤니케이션 사용을 권장. 다양한 인증 방법과 거래 제한 설정을 통해 사기 방지.
     * 은행 앱의 상호작용 보안 문제
          + 사용자가 은행에 전화할 때도 앱 내에서 인증 과정이 필요한지에 대한 의문 제기. 이를 통한 중간자 공격의 위험성 지적.
     * 은행 앱의 통화 감지 기능
          + 앱이 사용자가 전화를 받고 있는지 감지하고, 해당 통화가 은행 시스템에서 발신된 것이 아닐 경우 계정을 동결하는 기능 제안.
     * 인터넷 연결 문제와 보안 기능의 한계
          + VoLTE가 아닌 경우, 전화 통화 중에는 인터넷 연결이 불가능하여 앱의 보안 기능을 사용할 수 없는 문제 제기.
"
"https://news.hada.io/topic?id=12078","River - Go + Postgres 용 빠르고 단단한 Job Queue","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               River - Go + Postgres 용 빠르고 단단한 Job Queue

     * 애플리케이션 데이터와 작업 대기열에 동일한 데이터베이스(Postgres)를 사용하도록 권장. 의존성 최소화
     * 다른 데이터베이스 변경과 함께 트랜잭션 방식으로 작업을 큐에 대기시킴으로써 분산 시스템 전체 클래스의 문제를 방지할 수 있음
     * Transactional enqueueing : 작업은 트랜잭션이 커밋되면 큐에 대기하고, 트랜잭션이 롤백되면 제거되며, 커밋될 때까지 작업에 표시되지 않도록 보장
     * Postgres의 NOTIFY 기능을 활용하여 작업 준비가 완료되는 즉시 작업 큐가 작업자를 깨워 작업을 시작할 수 있어, 작업 시작 전 평균 지연 시간을 밀리초 단위로 줄일 수 있음
     * Postgres의 바이너리 프로토콜을 사용하고, 데이터베이스와의 라운드 트립을 최소화하여 효율성을 높임
          + Bulk Job Insert는 COPY FROM을 사용하여 효율적으로 수행
"
"https://news.hada.io/topic?id=12012","모니터링은 마틴 파울러처럼: Domain-Oriented Observability 도입기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           모니터링은 마틴 파울러처럼: Domain-Oriented Observability 도입기

     * 마틴 파울러 블로그의 ‘Domain-Oriented Observability’ 개념을 도입해 로그나 메트릭을 더 잘 남길 수 있는 모니터링 방법을 적용
     * 비즈니스 로직에 낀 모니터링 코드로 가독성 저하, 테스트 복잡도가 높아지는 문제가 있음
     * Domain Probe와 같이 도메인을 중심으로 하는 High-level API, Instrumentation과 같은 Low-level 캡슐화
     * 모니터링을 위한 코드는 잘 작성하며 유지보수 및 확장성 측면에서 많은 이점을 얻을 수 있었음
"
"https://news.hada.io/topic?id=12000","애플에 의해 삭제된 개발자 계정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           애플에 의해 삭제된 개발자 계정

개발자 계정 삭제 및 미지급 수익

     * Viktor Seraleev는 칠레에 거주하며 Sarafan Mobile Limited의 창립자임.
     * Sarafan Mobile은 2023년 9월 21일에 Apple에 의해 개발자 계정이 폐쇄되었으며, 사진 및 비디오 앱 개발에 특화된 회사임.
     * Sarafan Mobile의 앱들은 App Store에서 높은 유지율을 기록했으며, 평균 평점이 4.5 이상이었음.

애플에 의한 손실

     * Apple은 Sarafan Mobile에 3개월 동안의 수익인 $108,878를 지급하지 않았음.
     * Sarafan Mobile의 6개 앱은 계정 삭제 전날까지 월간 반복 수익(MRR) $33,680를 기록했으며, 1209개의 활성화된 체험판을 가지고 있었음.
     * 앱이 유일한 수입원이었기 때문에 계정 종료로 인해 Viktor와 그의 팀, 가족들은 큰 어려움을 겪고 있음.

계정 삭제 과정

     * 2023년 8월 21일, Apple은 업데이트 검토 중 Reely 앱을 삭제하고, 부정 행위로 인한 계정 제거 통지를 보냄.
     * Sarafan Mobile은 연관된 다른 개발자 계정이 무엇인지, 어떤 조치를 취해야 하는지 구체적으로 알려주지 않는 통지를 받았음.
     * Viktor는 모든 계정의 접근을 제거하고, 개발자들에게 모든 계정에서 로그아웃하도록 요청함.
     * Sarafan Mobile은 위반 사항을 해결하고 당일 항소를 제출했으나, 9월 6일에 거절당함.

항소 과정 및 의심스러운 활동 발견

     * Sarafan Mobile은 항소를 위해 앱 업데이트를 진행하고, 여러 조치를 취함.
     * Rolly 앱과 관련하여 세 가지 의심스러운 활동을 발견함: 광고 도용, 앱 복제, 가짜 리뷰 구매.
     * 이러한 활동들이 계정 차단과 앱 삭제로 이어졌다고 확신하며, 이 문제들을 AppReview 팀에 보고함.

계정 및 앱 삭제 후 조치

     * Apple은 9월 21일에 자동으로 Sarafan Mobile의 계정을 닫고 모든 앱을 삭제함.
     * 11월 1일, Sarafan Mobile은 두 번째 항소에 대한 거절 통지를 받음.
     * Sarafan Mobile은 Apple이 앱에 접근하지 않았음을 Intercom 도구를 통해 확인함.

법적 주장 및 조치

     * Apple은 자체 DPLA 조항을 위반하고, Sarafan Mobile에 심각한 손해를 입힘.
     * Apple은 캘리포니아 비즈니스 및 직업 코드를 위반하고, 여러 법적 주장에 직면함.
     * Sarafan Mobile은 법률 사무소 Buzko Krasnov를 고용하여 Apple에 대한 예비 소송 청구를 준비함.
     * Sarafan Mobile은 Apple이 개발자 계정을 즉시 복구하고, 미지급 수익을 이전하며, 손실된 수익을 보상할 것을 조건으로 원만한 해결을 추구함.

커뮤니티 지원 요청

     * Viktor Seraleev는 개발자 커뮤니티의 지원을 호소하며, 계정 복구와 자금 환불을 위한 청원 서명을 요청함.
     * Sarafan Mobile을 지원하기 위해 App Review 팀에 이메일을 보내는 것을 권장함.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 Sarafan Mobile이 Apple에 의해 겪고 있는 어려움과 이에 대한 법적 대응 과정임. 개발자 커뮤니티의 지원을 호소하는 Viktor의 이야기는 개발자들에게 흥미로울 뿐만 아니라, 대형 플랫폼과 개별 개발자 간의 권력 불균형에 대한 인식을 높이는 계기가 될 수 있음.

        Hacker News 의견

     * 가짜 리뷰가 앱 스토어에서 앱을 내린 이유라면, 이는 부적절한 조치로 보임. 리뷰를 내리는 것은 맞지만, 개발자 계정을 폐쇄하는 것은 경쟁자에게 가짜 리뷰를 구매하여 경쟁을 제거할 기회를 만듦. 개발자는 리뷰를 큐레이팅하거나 거부할 수 없기 때문에 이를 방지할 방법이 없음.
     * 앱 개발자들이 애플을 게이트키퍼로 만들어준 것에 대해 모두 일정 부분 책임이 있음. 소프트웨어를 만들고 앱으로 수익화할 수 있지만, 애플이나 구글에 더 많은 권력을 주고 싶지 않아 앱 개발이 느림. 그러나 정기적인 릴리스와 빌딩 과정에서의 즐거움이 있음.
     * 해당 앱들이 월 33,000달러의 수익을 낼 만큼 가치가 있는 것처럼 보이지 않아, 어떤 종류의 조작이 있었을 것으로 의심됨.
     * 구글 플레이의 텍스트 리뷰를 읽어보면, 이 앱들이 불필요한 구독을 요구하고 리뷰를 강하게 요청하는 유형으로 보임. 텍스트 리뷰의 평균과 ""점수만"" 리뷰 사이에 큰 괴리가 있음.
     * 몇 년 전 Dash 논란을 떠올리게 함. 당시 애플은 앱 개발 커뮤니티의 큰 반발 후 개발자의 위반 사항에 대한 세부 정보를 공개함.
     * 애플의 생태계 작동 방식을 옹호하는 것은 아니지만, 이 앱들이 사용자를 유료 결제로 유도하고 개발자가 이 부분을 완전히 무시하는 것 같음. 애플이 좋아하지 않는 부분임.
     * 이 경우, 수익금은 어디로 가는가? 앱을 구매한 사람들에게 환불되는가, 아니면 애플에 의해 사실상 훔쳐지는가?
     * 플레이 스토어의 리뷰를 보면, 광고를 많이 노출하는 전형적인 앱으로 보임. 일부는 작동하지 않는다고 불평하고, 일부는 만족함. 평소와 같은 비즈니스임. 왜 폐쇄되었는지 확실하지 않지만, 아마도 경쟁자가 가짜 리뷰로 실제로 그들을 해쳤을 것임.
     * 칠레의 법을 모르지만, 애플의 이러한 조치는 많은 국가에서 불법이며, 개발자는 손해배상을 받을 수 있음. 플랫폼 약관이 무엇이든, 자국의 법을 알면 불필요한 골칫거리를 피할 수 있음. 이러한 위험을 줄이기 위해 특정 국가에서 앱을 출시하는 것이 일부 개발자에게 의미가 있을 수 있음.
     * 이 앱들의 플레이 스토어 리뷰를 몇 개 읽어보면, 뭔가 이상함을 즉시 알 수 있음. 설치 후 20초 만에 리뷰를 요청하고, 대부분의 5성 리뷰가 가짜처럼 보임.
"
"https://news.hada.io/topic?id=12024","Awesome Engineering Games","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Awesome Engineering Games

     * 스팀에서 ""매우 긍정적"" 이상의 평가를 받는 엔지니어링 관련된 게임들 정리
     * 토목 공학, 도시 건설, 교통 및 경로 구축, 컴퓨터 과학, 전기 공학 등의 유형으로 분류
     * 그외 오픈월드 서바이벌 샌드박스, 해킹, 로직 & 자동화, 잡 시뮬레이터등

   factorio 하면서 리팩토링의 중요성 필요성 그리고 귀찮음등 만감이 교차하는것을 경험할 수 있습니다. ㅋ 갈 수록 늘어나는 버그들 퇴치는 필수!

   개인적으론 Satisfactory 를 강추합니다.
   컨베이어 벨트 굴리는 게임중엔 가장 그래픽적으로 완성도 높고
   다 만들어진걸 위에서 보고있으면 특히 시각적으로 뿌듯하더라구요.
"
"https://news.hada.io/topic?id=12053","서버리스 데이터 시스템의 아키텍처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           서버리스 데이터 시스템의 아키텍처

     * 클라우드 데이터 서비스의 미래는 ""대규모, 다중 테넌트"" 구조
          + S3와 같은 최상위 SaaS 서비스들이 단순성, 신뢰성, 내구성, 확장성, 저렴한 가격을 제공하는 이유는 이 서비스의 기술들이 이러한 것들을 제공하기 위해 구조적으로 설계되었기 때문
          + 대규모 자원 풀을 통해 고객에게 서비스를 제공하는 것은 규모에 따른 효율성과 신뢰성을 보장함

[서버리스 멀티 테넌트 (Serverless Multi Tenant) 시스템 정의]

  ""Multi-Tenancy""의 정의

     * 다중 테넌트는 공유 하드웨어에서 작업 부하를 공동으로 배치시켜서 자원을 공유하는 것에 관한 것
     * 클라우드에서 시스템을 구축하는 것은 여러 테넌트가 공유된 컴퓨팅 인스턴스(예: Amazon EC2 또는 Google Compute) 또는 공유된 PaaS 서비스(예: 클라우드 오브젝트 스토리지)에서 서비스를 받는 것을 의미
     * 다중 테넌트를 ""공유된 자원(가상화된 서버, 드라이브 및 PaaS 빌딩 블록 서비스 등)에서 여러 테넌트에게 서비스를 제공하는 것""으로 정의함
     * 여러 리소스 공유 모델을 사용할 수 있으며, 일부 시스템은 컴포넌트 전체에 걸쳐서 여러 공유 모델을 결합
          + 공유 프로세스: 동일한 소프트웨어 프로세스가 여러 테넌트에 서비스를 제공. 데이터 및 보안 격리는 논리적임
          + 컨테이너: 단일 테넌트 노드를 실행하고 호스트당 여러 컨테이너를 패키징. 일반적으로 특정 K8s 노드가 수많은 테넌트의 포드를 호스팅하는 Kubernetes를 통해 이루어짐
          + 가상화: VM(예: QEMU) 또는 microVM(예: Firecracker)에서 단일 테넌트 노드를 실행하고 호스트당 여러 VM을 패키징합. Kubernetes는 Kata 컨테이너를 통해 VM과 함께 사용할 수도 있음
     * 테넌트가 동일한 V8 프로세스를 공유하면서 별도의 경량 컨텍스트에서 사용할 수 있는 V8 격리 방법도 있지만, 아직 데이터 시스템에서 이를 본 적은 없음

  서버리스 정의

     * 고객은 서버 유형을 선택하거나 하드웨어를 명시적으로 선택하지 않음
     * 이러한 시스템들은 고객이 하드웨어의 크기를 명시적으로 조정할 필요 없이 모든 워크로드의 수요를 처리할 수 있도록 일정 수준의 탄력성과 이동성에 의존
          + 탄력성: 워크로드의 필요에 따라 서비스를 확장/축소하고 축소/증설할 수 있는 기능
          + 이동성: 성능 및 안정성 요구 사항을 충족하기 위해 내부적으로 워크로드를 이동하고 균형을 맞출 수 있는 서비스 기능
     * 서버리스 모델은 고객에게 점점 더 중요해지고 있는 사용량 기반 요금제를 사용
          + 많은 고객이 미리 큰 규모의 약정을 맺는 것을 원하지 않고 단순히 사용한 만큼만 요금이 청구되는 것을 선호
          + 사용량 기반 요금제에는 워크로드 및 기본 시스템 구현에 따라 크게 달라지는 다양한 변형이 있음
               o (백만) 오퍼레이션당 지불
               o 워크로드의 CPU 및 메모리 사용량에 대한 비용 지불
               o 스토리지 GB당 지불
               o 리소스 및 작업 속도와 관련된 가상 성능/용량 단위(예: DynamoDB의 RCU/WCU)에 대해 비용을 지불
               o 고객이 일부 기본 용량에 대해 비용을 지불하고 그 이상의 사용량에 대해 비용을 지불하는 하이브리드 모델(""기본 비용 내고, 피크는 지불"")

[공통된 도전 과제]

  워크로드에 의해 부과된 제약 조건 내에서 작업

     * 주어진 데이터 시스템의 작업 부하에 의해 부과된 많은 제약 조건들이 기본 아키텍처의 중요한 동인임.
          + 지연 시간/가용성 요구 사항
          + 일관성 요구 사항
          + 요청과 데이터 간의 상관관계/종속성
          + 순차적 액세스 패턴과 무작위 액세스 패턴
          + 요청당 수행되는 작업의 다양성
          + 데이터 크기
          + 세션 대 요청 지향 프로토콜, 푸시 대 풀 메커니즘
          + 작업의 컴퓨팅 강도
     * 느슨한 지연 시간과 일관성 요구 사항은 엔지니어에게 더 많은 자유도를 제공함
          + 지연 시간이 짧은 시스템에서는 지연 시간이 긴 구성 요소를 도입하는 데 제약이 있기 때문에 클라우드 오브젝트 스토리지의 저비용 및 높은 내구성 이점을 활용하는 것이 좋은 예
          + Eventually Consistent한 시스템은 데이터를 동기식 데이터 핫 경로에 포함하지 않고 오브젝트 스토리지에 비동기식으로 기록함으로써 이러한 딜레마를 피할 수 있음
          + 지연 시간이 짧고 일관성이 강한 시스템에는 이러한 면죄부 카드가 없음
     * 짧은 지연 시간 같은 제약 조건이 결합하면 워크로드의 공간적, 시간적 로컬리티가 아키텍처 선택에 영향을 미칠 수 있음
          + 예를 들어, 순차적 스캔이 특징인 워크로드는 디스크에서 빠르고 효율적인 스캔을 위해 연속적인 데이터 범위를 함께 유지하는 것이 좋음
          + 이러한 범위를 더 작은 하위 범위로 세분화하면 핫스팟 관리에 도움이 되지만, 이 두 가지는 서로 상충되는 문제이므로 둘 사이의 균형을 찾아야 함
          + 개별 요청 간의 상관관계가 거의 없는 무작위 액세스 패턴은 여러 서버에 균일하고 얇게 분산할 수 있는 플랫 주소 공간의 이점을 활용할 수 있음
     * 영구 연결을 설정하는 세션 지향 프로토콜은 일반적으로 각 요청이 마지막 요청과 독립적인 요청 지향 프로토콜에 비해 더 어려움
          + 영구 연결에는 연결 풀링이 필요할 수 있으며 롤링 노드 및 데이터 밸런싱과 같은 교란이 발생하면 클라이언트에 외부적으로 눈에 띄는 영향을 미칠 수 있음
     * 객체 스토리지나 Kafka API와 같이 단순한 스토리지 API인 시스템도 있고, SQL 데이터베이스와 같이 컴퓨팅 집약적인 시스템도 있음
          + 이는 각 요청을 처리하는 데 필요한 작업량의 예측 가능성과 가변성이라는 주제로 이어짐
          + 극단적인 예로, 연속된 레코드 블록을 단순히 검색해야 하는 Kafka와 같은 데이터 스트리밍 API가 있고, 다른 쪽 끝에는 쿼리마다 작업량에 큰 차이를 초래할 수 있는 SQL이 있음

  테넌트 격리

     * 자원 공유는 하드웨어 활용도를 높이지만, 한 테넌트의 작업 부하가 다른 테넌트에게 영향을 미치는 자원 경합을 초래할 수 있음
     * 다중 테넌트 시스템에서는 공유된 하드웨어 자원에서 서비스를 받는 테넌트가 자신만의 전용 서비스에서 서비스를 받는 것처럼 보장해야 함

  스토리지와 컴퓨트의 분리

     * 스토리지와 컴퓨트의 분리는 지금까지 조사된 모든 시스템이 어느 정도 구현한 핵심 설계 원칙임
     * 하드웨어 트렌드로 인해 스토리지와 컴퓨팅의 분리는 점점 더 현실화되고 있으며, 이는 부분적으로는 네트워크가 더 이상 예전과 같은 병목 현상을 일으키지 않기 때문
     * 네트워크 처리량은 증가하고 있지만, 클라우드 오브젝트 스토리지가 우선순위를 차지하면서 이러한 분리에 따른 새로운 과제가 여전히 존재
          + 클라우드 오브젝트 스토리지는 여전히 상대적으로 지연 시간이 길고 내구성이 뛰어나며 비용이 저렴
          + 하지만 OLTP 데이터베이스와 같이 일반적으로 지연 시간이 짧은 워크로드에 도입하기는 어려울 수 있음
          + 또한 클라우드 오브젝트 스토리지의 경제적인 모델은 많은 작은 오브젝트에 의존하는 설계에 불리하게 작용하며, 더 적은 요청으로 더 큰 오브젝트에 데이터를 축적해야 하므로 저지연 시스템의 수명을 더욱 복잡하게 만듦
     * 엔지니어는 지연 시간이 짧은 시스템에 오브젝트 스토리지를 포함시키되, 느린 오브젝트 스토리지 앞에 내구성 있고 내결함성 있는 쓰기 캐시 및 예측 읽기 캐시를 배치하여 오브젝트 스토리지의 지연 시간 문제에 대응할 수 있음
          + 이 내구성 있는 쓰기 캐시는 기본적으로 복제 프로토콜을 구현하고 블록 스토리지에 데이터를 쓰는 서버 클러스터임
               o 백그라운드에서 클러스터는 더 적은 수의 대용량 파일을 쓰는 경제적인 패턴에 따라 데이터를 오브젝트 스토리지에 비동기식으로 업로드
               o fault-tolerant 쓰기 캐시는 짧은 레이턴시의 쓰기를 잘 지원함
          + 이 아키텍처에서 문제가 될 수 있는 것은 읽기 캐시
               o 이벤트 스트리밍과 같은 순차적 워크로드는 간단하고 매우 효과적
               o Aggregate Prefetching(집계 프리페팅)이 수요를 따라잡는 한, 읽기는 항상 로컬 읽기 캐시에 도달해야 함
               o 데이터베이스는 예측하기 어려운 랜덤 액세스 패턴으로 인해 이보다 더 어려운 문제를 겪지만, 테이블 스캔은 여전히 읽기 선행 작업의 이점을 누릴 수 있음
     * 복제 프로토콜로 분산형 내결함성 쓰기 캐시를 구현하는 것은 그리 간단한 일이 아니며, 다중 AZ 환경에서는 교차 AZ 요금과 같은 다른 비용이 발생할 수 있음
          + 하지만 현재로서는 저렴하고 내구성이 뛰어난 오브젝트 스토리지를 기본 데이터 저장소로 사용하고자 하는 저지연 시스템을 위한 대안이 없음
          + 지연 시간이 짧은 다른 시스템은 클라우드 오브젝트 스토리지 사용을 아예 피해야 하며, 무엇보다도 예측 가능한 짧은 지연 시간을 선호
          + 클라우드 스토리지는 널리 사용되고 있지만 지연 시간 상충 관계로 인해 보편적이지 않습니다.

  열 관리

     * 열 관리는 지연 시간 급증이나 초당 작업 수 감소와 같이 외부에서 눈에 보이는 성능 문제를 일으킬 수 있는 핫스팟을 피하기 위해 여러 스토리지 노드에 걸쳐 가능한 한 균등하게 부하를 분산하는 것
     * 이를 로드 밸런싱이라고도 할 수 있지만, 보통 상태 비저장 노드에 대한 로드 밸런서라는 용어를 사용
     * 스테이트풀 시스템에서는 특정 스토리지 노드에 수요가 많은 오브젝트가 그룹화되지 않아 경합이 발생할 수 있는 핫스팟이 발생할 수 있음
     * 로드 밸런서는 무작위, 최소 연결 또는 일부 FIFO 변형과 같은 간단한 전략으로 상태 비저장 노드 집합에 부하를 고르게 분산시킬 수 있지만, 상태 저장 시스템은 데이터가 있는 위치에 따라 요청을 노드로 라우팅해야 함
     * 부하를 재분배하기 위해 데이터를 이동하는 것을 흔히 리밸런싱이라고 함
     * 더욱 복잡한 문제는 시간이 지남에 따라 부하 분산이 변경될 수 있다는 점
          + 데이터 분산은 작은 데이터 하위 집합에 영향을 미치는 단기적인 피크부터 여러 테넌트에 걸쳐 나타나는 일별 패턴이나 계절적 이벤트로 인한 더 큰 부하 변화까지 모든 것을 처리해야 하는 동적인 프로세스가 됨
     * 대규모 데이터베이스나 처리량이 많은 이벤트 스트림과 같은 대규모 데이터 세트는 부하를 효과적으로 분산하기 위해 샤딩해야 함
          + 리밸런싱은 샤드의 리밸런싱이 되며, 시스템은 로드 분배가 변경됨에 따라 샤드를 분할하고 병합할 수도 있음
          + 그러나 샤드 수와 크기와 관련하여 데이터 로컬리티와 같은 상충되는 문제가 존재할 수 있음
          + 한편으로는 데이터의 공동 위치가 많을수록 검색이 더 효율적
          + 반면에, 너무 많은 샤드에서 가져와야 하는 컴퓨팅 작업의 비용이 더 많은 서버에 부하를 분산시킴으로써 얻을 수 있는 이점을 능가할 수도 있음
     * 열 관리는 단일 테넌트 시스템에서도 필요할 수 있으므로 멀티 테넌트만의 문제는 아님
          + 그러나 MT 데이터 시스템에서는 테넌트가 서비스 품질 변동을 경험하지 않도록 하기 위해 열 관리가 더욱 중요해짐

  높은 자원 활용도 달성

     * 서버리스 멀티테넌트 아키텍처를 구현하는 주요 동기 중 하나는 기본 하드웨어 리소스를 보다 효율적으로 사용하여 더 나은 경제적 성능을 제공하기 위한 것
     * 리소스 풀링을 통해 리소스 활용도를 높이는 것이 가장 중요하지만, 테넌트 격리 및 예측 가능한 성능으로 이를 달성하는 것은 어려운 과제

  콜드 스타트

     * 테넌트 단위로 자원을 제로로 축소하는 서버리스 시스템은 테넌트가 작업 부하를 재개할 때 콜드 스타트의 문제에 직면할 수 있음
     * 콜드 스타트는 처음부터 서버리스 기능의 초점이었으며, 일부 서버리스 데이터 시스템에도 영향을 미칠 수 있음
     * 일부 시스템에서는 콜드 스타트가 전혀 발생하지 않는 반면, 다른 시스템에서는 콜드 스타트가 아키텍처와 스케일 투 제로 제품 제공으로 인해 피할 수 없는 일종의 피할 수 없는 것이기도 함
     * 내가 본 모든 사례에서 콜드 스타트 문제는 제품 결정 사항이며, 요금제 및 가격 책정 방식에 따라 리소스 축소 수준이 다를 수 있음
     * 궁극적으로 고객과 공급업체는 각자의 필요에 맞게 절충안을 선택할 수 있음

조사한 시스템들

     * Group 1 - Storage APIs (compute-light)
          + Amazon DynamoDB (chapter 1)
          + Kora - Serverless Kafka engine inside Confluent Cloud (chapter 2)
          + Backblaze B2 (planned)
     * Group 2 - SQL OLTP databases (compute-heavy)
          + Neon - serverless PostgreSQL (chapter 3)
          + CockroachDB’s serverless multi-tenant architecture. (in progress)
          + Planetscale (planned)
     * Group 3 - SQL OLAP databases and data warehouses (compute-heavy)
          + Google BigQuery (planned)
          + ClickHouse Cloud (in progress).
     * 이 작업은 계속 진행되겠지만, 2024년 1월/2월에 일종의 '결론' 포스팅 예정
"
"https://news.hada.io/topic?id=12011","상용 수준의 LLM 애플리케이션을 위한 개발자 가이드 (번역 글)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  상용 수준의 LLM 애플리케이션을 위한 개발자 가이드 (번역 글)

     * Zapier의 AI 제품 개발자 Tal Peretz가 작성한 글을 허락 하에 번역하였습니다.
     * 원문은 여기에서 확인하실 수 있으며, 주요 내용은 아래와 같습니다.


     * 프롬프트 엔지니어링 - 시작 단계
     * 평가의 역할: (항해의 기준) 북극성
          + AI 평가를 체계적으로 접근하기 / Systematic Approach to AI Evaluations
          + 심층 테스트를 위해 데이터셋 활용하기 / Dataset Utilization for In-depth Testing
          + AI의 평가로 평가 개선하기 / Refining Evaluations with AI Assessments
          + 평가를 위한 지표들 / Metrics to evaluate
          + 사람의 평가를 모범 기준으로 삼기 / Human Evaluation as the Gold Standard
     * RAG: 필요 시 상황에 맞는 심층 정보
          + 시도해 볼 기법들 / Techniques to Experiment With
     * 미세조정: 전문화의 기술
          + 학습 데이터의 부족: 양과 질의 균형 문제 / Insufficient Training Data: The Quantity-Quality Equilibrium
          + 불균형한 학습 데이터: 편향성 딜레마 / Unbalanced Training Sets: The Bias Dilemma
          + 공개 데이터 재사용: 새로운 신호가 필수적 / Reusing Public Data: The New Signal Imperative
          + 부족한 프롬프트 엔지니어링: 명확한 명령 / Poor Prompt Engineering: The Clarity Commandment
          + 점진적으로 평가하지 않음: 지속적인 실수 / Not Evaluating Incrementally: The Continuous Oversight
     * 모든 것이 필요할 때
     * 마무리하며

   공유 감사합니다.

   OpenAI 에서 발표한 A Survey of Techniques for Maximizing LLM Performance 와 거의 같은 내용인 것 같네요?

   OpenAI DevDay 영상을 못 봤었는데 말씀해주신 세션이 있는걸 이제 알았습니다. :)
   알려주셔서 감사합니다!

   (+ 다른 분들을 위해 제가 찾은 유튜브 링크 공유드립니다!)
   https://www.youtube.com/watch?v=ahnGLM-RC1Y
"
"https://news.hada.io/topic?id=12018","AA(2019) 없는 헤드폰의 오디오 품질 향상을 위한 블루투스 스택 수정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               AA(2019) 없는 헤드폰의 오디오 품질 향상을 위한 블루투스 스택 수정

블루투스 스택 수정을 통한 오디오 품질 개선

     * 무선 헤드폰 사용자들은 표준 블루투스 SBC 코덱을 사용할 때 낮은 음질과 고음 부족을 경험함.
     * aptX나 LDAC 코덱 지원 기기를 구매하는 것이 일반적인 해결책이지만, 이러한 코덱들은 라이선스 비용이 발생하여 기기가 더 비쌈.
     * 현재 블루투스 스택과 헤드폰의 인위적인 제한으로 인해 SBC의 낮은 품질이 발생하며, 이는 소프트웨어 수정만으로 모든 기기에서 우회 가능함.

SBC 코덱

     * SBC는 연결 설정 단계에서 협상되는 다양한 매개변수를 가짐: 오디오 채널 유형 및 수, 주파수 대역 수, 패킷당 오디오 블록 수, 양자화 비트 할당 알고리즘, 양자화 과정에서 사용되는 최대 및 최소 비트 풀.
     * 현재 블루투스 스택은 일반적으로 Joint Stereo, 8 대역, 16 블록, Loudness, 비트풀 2..53의 옵션 세트를 협상함.
     * 비트풀 값은 인코딩 비트레이트를 변경하는 매개변수로, 높을수록 비트레이트와 품질이 향상됨.

블루투스 스택 수정

     * 모든 A2DP 호환 블루투스 스택은 Dual Channel 모드를 지원해야 하지만, 이 모드를 강제로 사용할 방법이 없음.
     * Android 8.1과 9에 대한 패치를 만들어 개발자 메뉴에 Dual Channel 모드를 추가하고, Bluetooth 장치 설정에 ""HD Audio"" 코덱으로 표시됨.
     * 이 패치는 LineageOS, Resurrection Remix, crDroid와 같은 대체 펌웨어에 통합됨.

551과 452 kbps의 유래

     * 블루투스 시간 분할 기술은 대용량 고정 크기 패킷을 효율적으로 전송하기 위해 설계됨.
     * 데이터 전송은 슬롯을 통해 이루어지며, 5개 슬롯이 한 번의 전송에서 전송될 수 있는 최대 수임.
     * 5개 슬롯에서 2Mbps 속도로 최대 679바이트, 3Mbps 속도로 최대 1021바이트를 전송할 수 있음.

이 모든 것이 왜 필요한가?

     * aptX의 음질에 대한 일반적인 믿음과 달리, 경우에 따라 SBC가 표준 328k 비트레이트보다 나쁜 오디오 품질을 생산할 수 있음.
     * SBC는 동적으로 주파수 대역에 대한 양자화 비트를 할당하며, aptX는 일정한 비트 수로 주파수 대역을 양자화함.
     * 고비트레이트 SBC를 사용하면 대부분의 경우 aptX보다 우수한 음질을 얻을 수 있으며, EDR 3 Mb/s 지원 헤드폰에서는 aptX HD에 매우 근접한 음질을 제공함.

더 나아갈 수 있을까?

     * Android 패치셋은 EDR 2 mbps 기기의 비트레이트를 452 kbps에서 595 kbps로 더 높일 수 있는 추가 옵션을 제공함.
     * persist.bluetooth.sbc_hd_higher_bitrate 변수를 1로 설정하여 더 높은 비트레이트를 활성화할 수 있음.

기기와의 호환성

     * SBC Dual Channel은 거의 모든 헤드폰, 스피커, 차량 헤드유닛에서 지원됨.
     * 이 모드로 인해 문제가 발생하는 기기는 매우 드물지만, 호환성에 대한 자세한 정보는 4pda와 xda-developers에서 찾을 수 있음.

음질 비교

     * 실시간으로 브라우저에서 SBC(뿐만 아니라 aptX 및 aptX HD)로 오디오를 인코딩하는 웹 서비스를 만들어 다양한 SBC 프로필과 코덱의 음질을 비교할 수 있음.

안드로이드 개발자에게 연락하기

     * Google의 블루투스 스택 개발자들에게 AOSP에 패치를 포함시킬 것을 요청했지만, 아직 답변을 받지 못함.
     * Gerrit 코드 리뷰 시스템에서도 개발에 관련된 사람들로부터 어떠한 코멘트도 받지 못함.

결론

     * LineageOS, Resurrection Remix, crDroid 펌웨어 사용자들은 Bluetooth 장치 설정에서 체크박스를 선택하여 블루투스 오디오 품질을 향상시킬 수 있음.
     * 리눅스 사용자들도 Pali Rohár의 패치를 설치하여 더 높은 SBC 비트레이트를 얻을 수 있음.

GN⁺의 의견

   이 글에서 가장 중요한 것은 기존의 블루투스 오디오 품질을 소프트웨어 수정만으로 개선할 수 있다는 점이다. 이는 비용이 많이 드는 새로운 코덱을 지원하는 기기를 구매하지 않고도 기존 기기에서 높은 품질의 오디오를 경험할 수 있게 해주는 매력적인 솔루션이다. 특히, 오픈 소스 펌웨어를 사용하는 사용자들에게 이러한 수정이 가능하다는 것은 기술에 대한 접근성을 높이고, 사용자가 자신의 기기를 더욱 제어할 수 있게 해주는 흥미로운 발전이다.

        Hacker News 의견

     * SBC의 넓은 지원과 자연스러운 확장성에 대한 긍정적인 평가

     SBC가 널리 지원되는 것은 훌륭하며, 기존 표준의 자연스러운 확장으로 보임. 개인적으로 SBC 대비 LDAC이나 AAC의 문제가 아니라, HFP의 품질이 떨어진다는 점에 문제가 있음. 마이크가 켜지는 순간 90년대로 돌아간 듯한 느낌을 받음. 양방향 블루투스 오디오의 품질 개선을 바라는 마음.
     * 안드로이드 블루투스 스택 내 버그에 대한 심층 분석과 하드웨어의 변이성 지적

     이 기사는 블루투스 일반에 대한 것이 아니라 안드로이드 블루투스 스택 내 버그에 대한 심층 분석임. 작성자가 전혀 언급하지 않은 것은 사용되는 하드웨어가 매우 다양하다는 점임. 안드로이드는 수많은 블루투스 칩셋 위에서 작동함. 따라서 한 하드웨어에서 패치가 작동하는 것처럼 보여도 다른 안드로이드 폰에서는 작동하지 않을 수 있음. 또한, 장치가 현재 수행하고 있는 다른 작업에 따라 달라질 수 있음. 예를 들어, BT+Wifi 칩셋을 공유하고 있고, 와이파이를 통해 비디오를 스트리밍하면서 헤드폰으로 오디오를 스트리밍하는 경우, 장치는 와이파이 사용과 BT에 기반하여 자원을 할당해야 함. 따라서 로컬에 저장된 오디오와 스트림을 통한 오디오는 반드시 동일한 CODEC 매개변수를 얻는 것은 아님. 이 주제에는 저자가 고려하지 않은 미묘한 차이가
     많으므로 읽는 것에 주의해야 함.
     * Windows에서 'Alternative A2DP Driver'를 통한 SBC 매개변수 조정 및 AAC, aptX, LDAC 사용 경험 공유

     ""Alternative A2DP Driver""는 Windows에서 이 기능을 제공함. SBC 매개변수를 사용자 정의하고 AAC, aptX(시도해보지는 않음)를 사용할 수 있음. 경험상 잘 작동하며, 소니 XM4와 함께 LDAC을 사용할 수 있음. 시험판이지만 저렴함. 고품질 모드에서 블루투스 범위가 감소하는 것을 보고 실제로 코덱(또는 적어도 무언가)이 변경되고 있음을 확인함. 위의 링크는 제휴 관계가 없음.
     * Linux에서 SBC XQ와 mSBC를 통한 더 높은 비트레이트 오디오 및 헤드셋 오디오 품질 향상 가능성 언급

     리눅스에서는 ""SBC XQ""라는 것을 통해 더 높은 비트레이트의 SBC 오디오를 활성화할 수 있음. 마찬가지로 ""mSBC""를 사용하여 더 높은 품질의 헤드셋 오디오를 사용할 수 있음(물론 SBC나 APTX에 비해 여전히 낮은 품질임). 많은 헤드폰이 더 나은 오디오 코덱을 지원하지만, 지원이 보편적이지 않고 양방향 오디오 개선도 확실하지 않음. 구글에서 이런 기능이나 비슷한 것을 이미 통합하기를 바람.
     * 블루투스 오디오 프로파일에서 미리 긴 버퍼링을 허용하는 기능의 필요성 제기

     블루투스 오디오 프로파일에서 미리 긴 시간 동안 버퍼링을 할 수 있는 기능의 발명을 바람. 예를 들어, 1분짜리 노래를 재생할 때, 전체 노래가 버퍼링되어야 함. '일시 정지'를 클릭하거나 볼륨을 변경할 경우 버퍼는 버려져야 함. 하지만 긴 버퍼는 휴대폰의 전력 절약과 불안정한 라디오 연결성을 견딜 수 있게 해줌.
     * LineageOS에서의 높은 품질 오디오 전송 기능 사용 경험 및 사용자 경험 개선 필요성 언급

     LineageOS에서 이 기능을 사용해본 경험이 있으며, 매우 만족함. 3P 코덱을 지원하지 않는 차량 스테레오와 같은 장치로 더 높은 품질의 오디오를 전송할 수 있는 기능이 매우 유용함. 또한 헤드폰에서도 큰 이점을 얻을 수 있음. 사용자 경험은 다소 개선이 필요하지만, 기능 자체는 훌륭함.
     * 제목에 연도(2019) 추가의 필요성 및 PulseAudio와 PipeWire에서의 구현 사실 언급

     제목에 (2019)를 추가하는 것이 좋을 것임. ""모든 현재 블루투스 스택""에 대한 언급이 있지만, 이러한 기능들은 이미 PulseAudio와 PipeWire에서 구현되어 있음.
     * Dual Channel과 Joint Stereo 간의 비트레이트 차이가 실제 오디오 품질에 미치는 영향에 대한 회의적인 견해

     551 kbps의 Dual Channel이 328 kbps의 Joint Stereo보다 눈에 띄게 더 나은 품질을 제공한다는 것에 대해 회의적임. 대부분의 음악에서는 단지 더 많은 비트를 중복 정보 인코딩에 사용하는 것이 아닌지 의문임.
     * MacOS에서 HFP 품질 개선 방법에 대한 질문 및 Linux에서 mSBC를 사용한 경험 공유

     MacOS에서 Bluetooth를 사용하여 HFP의 품질을 개선할 수 있는 방법을 아는 사람이 있는지 질문함. 리눅스에서 mSBC를 사용하여 꽤 좋은 품질을 경험했지만, MacOS에서는 완전히 열악하고 전화선/모노 품질로 전환됨. Darwin에서 제대로 작동하게 만드는 해킹이 이미 있는지 궁금함.
     * SBC 사용 여부를 몰랐던 경험과 해당 게시물에 대한 감사 표현

     Lineage 18-1을 사용하면서 SBC 기능을 사용하고 있었는지 몰랐음. 이 게시물을 통해 SBC 기능을 사용하고 있었다는 것을 알게 됨. ""magic -""
"
"https://news.hada.io/topic?id=11986","HN 소개: 어린이 코딩 교육을 위한 새로운 시각 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HN 소개: 어린이 코딩 교육을 위한 새로운 시각 언어

Pickcode 소개

     * Pickcode는 실제 프로그래밍을 시작하는 최고의 방법으로, 챗봇, 애니메이션 드로잉, 게임 제작을 위한 코드 작성을 시각적으로 안내하는 새로운 언어 및 편집기임.
     * 초보자가 자신감을 가지고 코딩을 배울 수 있도록 돕고, 보다 고급 언어로의 진행을 가능하게 함.
     * 이미 수천 명의 학생들이 50개 이상의 레슨을 통해 코딩 성공의 길을 걷고 있으며, 20,000개 이상의 레슨이 완료되고 240,000줄 이상의 Pickcode가 작성됨.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 Pickcode가 프로그래밍 입문자들에게 코딩을 쉽고 흥미롭게 배울 수 있는 새로운 도구라는 점입니다. 이는 초급 소프트웨어 엔지니어들이 코딩에 대한 자신감을 얻고, 창의적인 프로젝트를 시작할 수 있는 기회를 제공함으로써 흥미로움을 더합니다. Pickcode의 사용자 친화적인 접근 방식은 코딩 교육의 진입 장벽을 낮추고, 더 많은 사람들이 기술의 세계로 나아갈 수 있도록 돕는 긍정적인 변화를 의미합니다.

        Hacker News 의견

     * var, set, call 키워드의 필요성에 대한 의문 제기
          + BASIC 언어는 이러한 키워드가 없음.
          + 어린 시절 프로그래밍을 시작할 때 이런 키워드는 불필요한 복잡함으로 여겨짐.
          + LOGO 언어의 간결함을 예로 들며, call 키워드 사용이 과도하게 느껴짐.
     * 10살 아이가 Godot를 통해 프로그래밍을 배우는 경험 공유
          + Scratch로 게임을 만들던 아이가 Godot의 실제 스크립팅 언어로 전환하며 타이핑의 어려움을 겪음.
          + 아이에게 적합한 균형을 찾는 것이 중요함을 강조.
     * Pickcode 출시를 축하하며, 세부 사항에 대한 주의 깊은 배려 인정
          + 비개발자에게 프로그래밍을 더 접근하기 쉽게 만드는 두 가지 접근법 존재.
          + Pickcode와 Scratch는 시각적 인터페이스를 통해 문법 학습의 부담을 줄이는 방식.
          + Node-red와 Labview는 다른 프로그래밍 패러다임을 탐색하는 예시로, 사용자 경험에 영향을 미침.
     * 구조화된 코드 편집 경험에 대한 긍정적인 평가
          + 세맨틱한 의도를 직접 에디터에 전달할 수 있는 구조화된 에디터에 대한 바람.
          + 실수를 줄이고 프로그래밍 언어에 대한 일반적인 구조화된 에디터의 필요성 제기.
     * Scratch의 문법 오류 불가능성이 초보자에게 친화적임을 강조
          + 문법 오류 없이 블록을 맞추는 방식이 학습에 도움이 됨.
          + 문법 오류 발생 시 해결 방법의 발견성(discoverability)이 중요함을 언급.
     * Pickcode가 새로운 프로그래머에게 타이핑 프로그래밍을 소개하는 데 도움이 됨을 칭찬
          + Khan Academy에서 개발한 블록 기반 ProcessingJS 에디터와 비교하며, Pickcode의 매력적인 디자인을 언급.
     * 13세 딸이 Pickcode에 대한 피드백 제공
          + Scratch 커뮤니티의 공유 기능을 중요하게 여김.
          + 교육적인 측면에서 선생님들이 좋아할 것 같다는 의견.
     * ZX81의 BASIC 언어 사용 경험 공유
          + 키보드에 특수 키가 있어 키워드를 타이핑할 필요가 없었음.
          + 메모리 절약과 런타임 속도 향상을 위해 텍스트 대신 토큰을 저장하는 방식이 인상적이었음.
     * Pickcode의 목표에 대한 동의 여부 표현
          + 인상적인 IDE이지만, Python의 하위 집합에 집중하는 것이 더 나을 수 있음.
          + Scratch가 교육에 더 쉽고 Python이 배우기에 더 유용하다는 의견.
     * 관련 링크 제공
          + Pickcode에 대한 이전 해커뉴스 게시물 링크.
          + 재게시는 일정 시간이 지난 후에 허용되며, 관심 있는 독자들을 위한 추가 정보 제공.
"
"https://news.hada.io/topic?id=12065","노-불쉿 게임스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                노-불쉿 게임스

No-Bullshit Games 소개

     * No-Bullshit Games는 광고가 가득하거나 인앱 구매를 통해 사용자로부터 최대한 많은 돈을 취하려는 게임들로부터 벗어나고자 하는 사용자들을 위한 서비스임.
     * 이 서비스는 사용자가 즐겁고, 짜증나지 않으며, 좋은 게임을 발견할 수 있도록 도움을 제공함.
     * 사용자는 자신의 플랫폼을 선택하여 게임을 찾을 수 있으며, 만약 리스트에 있는 게임 중 문제가 있다고 생각되는 게임이 있다면 신고할 수 있음.

GN⁺의 의견

     * 이 기사에서 가장 중요한 점은 No-Bullshit Games가 사용자들에게 광고나 과도한 인앱 구매가 없는 질 좋은 게임을 제공하려는 서비스라는 것임.
     * 이 서비스는 게임을 즐기고자 하는 사람들에게 흥미로울 수 있으며, 게임 시장에서 사용자 경험을 개선하려는 긍정적인 시도로 볼 수 있음.

        Hacker News 의견

     * 재미있는 사실: 이 서비스가 기여를 받는 데 있어 가장 큰 문제는 ""유료로 승리할 수 있지만, 열심히 하면 그렇게 나쁘지 않다""고 주장하는 허위 게임 제출이었음. ""허위 없음""을 충분히 명시하지 못한 것 같음.
     * iOS 앱 스토어에서 '유료' 앱을 검색할 수 없는 것이 불편함. 선택지는 '무료' 또는 '모든' 앱뿐임. 유료 앱은 일반적으로 덜 문제가 있지만 검색에서 항상 묻힘. 유료 앱을 찾는 유일한 방법은 차트를 보는 것임.
     * 아이들을 위한 프리미엄 게임이 광고를 없애기 위해 정기 구독을 시작하도록 강요하는 것이 짜증남. 일회성 결제 대신 부모가 구독을 잊을 것을 기대하고 있음.
     * 약 10년 전 'Honest Android Games'라는 비슷한 사이트가 있었음. 거의 동일한 기준을 가졌음. 시간이 부족해 사이트가 폐쇄됨.
     * 이것은 멋진 일임! 수천 배 더 많은 컴퓨팅 능력과 기능을 가진 플랫폼이 20년 전 게임보이보다 게임에 있어 모든 면에서 더 나쁘다는 것은 말이 안 됨. 이런 자원을 사용하여 좋은 작품을 찾고 홍보할 수 있기를 바람!
     * 'The Room' 시리즈는 허위 없는 게임 중 가장 좋아하는 시리즈임. 구매하면 퍼즐을 푸는 데 몇 시간 동안 즐길 수 있고, 잊어버린 후 몇 년 뒤에 다시 플레이할 수 있음. 또한 비행기에서 팟캐스트를 들으며 플레이하는 'Disc Brick'도 추천함.
     * 스마트폰 게임을 즐기는 다른 사람들이 느끼는 즐거움을 재현하기 위해 많은 시간과 돈을 소비함. 그러다 소설을 발견하고, 더 이상 챕터를 읽을 수 없을 정도로 초조할 때는 다른 것을 즐기지 못할 것임을 깨달음. 스마트폰 게임을 즐기지 못했던 사람들에게 다른 매체를 시도해보라고 권장함.
     * 최근 레트로 게임에 빠짐. 안드로이드용 휴대용 기기는 상대적으로 저렴하며, 광고, 업데이트, 마이크로트랜잭션 없이 수천 개의 게임을 즐길 수 있음. 지침서가 모든 것을 매우 쉽게 만들어줌. 닌텐도와 다른 게임 산업이 오래된 게임을 합법적으로 플레이할 수 있는 방법을 만들었으면 좋겠음. 닌텐도 스위치 온라인은 좋은 시작이지만 모든 게임을 제공하지는 않음.
     * 여러분이 이렇게 높게 평가해줘서 감사함! 이것을 만든 지 얼마 되지 않았고, 최신 상태로 유지하기 위해 일정한 검토 시간이 필요함. 게임 큐레이션을 도와줄 사람이 있다면 연락 바람!
     * 언급된 허위 없이 나를 즐겁게 해주는 게임에 대해 한 번에 좋은 돈을 지불할 의향이 있음. 하지만 대부분의 앱 스토어 개발자들에게 나는 타겟 오디언스가 아닌 것 같음.
     * 좋은 목록이지만, 인터넷에 연결되어 있지 않으면 실행되지 않고, 닌텐도가 서버를 종료하면 몇 년 후에 실행되지 않을 'Mario Run'과 같은 싱글 플레이어 게임은 허위가 분명히 포함되어 있으며, 이 목록에 포함되어서는 안 됨.
"
"https://news.hada.io/topic?id=12052","M3 칩의 CPU 코어는 무엇이 달라졌나?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        M3 칩의 CPU 코어는 무엇이 달라졌나?

     * 초기 리뷰들에서는 M3 기반 Mac의 CPU 코어에 큰 변화가 없어 보이지만, 실제로는 클러스터 크기와 최대 주파수 증가 등 중요한 변화가 있음
     * 클러스터 크기: M1/M2 칩에서는 2개 또는 4개의 CPU 코어가 클러스터를 이루고 공유 캐시를 사용했지만, M3 칩에서는 기본 모델은 4개, Pro와 Max 모델은 6개의 코어로 구성된 클러스터를 가짐
          + 이것은 칩 선택에 영향을 줌
          + macOS는 가능하면 QoS(서비스 품질)에 따라 더 높은 우선 순위로 실행되는 스레드를 P 코어에 할당
          + P 코어가 이미 완전히 점유된 경우 macOS는 대신 E 코어에서 높은 QoS 스레드를 실행
          + 즉, 일반적으로 사용하는 앱을 액티비티 모니터의 CPU 기록창에서 살펴보고
               o P 코어가 대부분의 시간 동안 완전히 점유되고 해당 작업 부하가 E 코어로 넘쳐나는 경우가 있다면 P 코어가 더 많은 M3를 목표로 해야함
               o P 코어에 항상 적절한 예비 용량이 있다면 P 코어가 더 많은 M3에서 추가 가치를 얻지 못할 것
     * E 코어: M3 Pro의 E 코어는 M1 Pro와 비슷하지만, macOS에 의해 결정되는 주파수 관리에서 차이가 있으며, M3 칩은 최대 2748 MHz까지 도달함
          + M3의 E 코어가 M1보다 약간 더 느리게 백그라운드 스레드를 실행한다는 것을 의미
          + 즉, M1 Pro를 M3 Pro로 교체하면 백그라운드 작업이 느려지지만 E 코어로 오버플로된 높은 QoS 작업은 가속화
     * P 코어: M3 Pro의 P 코어는 최대 4056 MHz까지 동작하며, M1 Pro와 비교해 정수 및 부동 소수점 성능이 약 1.3배, 벡터 성능은 NEON이나 Apple의 Accelerate 라이브러리를 사용할 때 더 빠른 성능을 보임
          + 이는 정수 및 부동 소수점 성능 향상이 코어 주파수의 증가로 인한 것이지만, 벡터 처리에서 더 많은 개선이 있을 수 있음을 시사
          + 아마도 Apple이 M3 P 코어의 NEON 장치 설계를 개선했을 것
     * P 대 E 성능: M1과 M3 코어는 부하 상황에서 성능 패턴이 다르며, M3 Pro는 P 코어와 E 코어 모두에서 더 높은 성능을 제공함
     * CPU 사용 이력: Activity Monitor의 CPU 사용 이력은 코어 부하와 성능에 대한 정보를 제공하지만, 코어 주파수를 고려하지 않아 오해의 소지가 있음

요약

     * CPU 코어를 비교하는 데는 멀티코어 벤치마크보다 훨씬 더 많은 것이 있음
     * 이미 Apple 실리콘 Mac을 사용하고 있다면 평상시 P 코어와 E 코어의 사용 패턴을 관찰하여 더 많은 코어가 있는 Mac이 필요한지 여부를 결정할 것
     * CPU 코어 클러스터 크기는 M3 칩에서 2-4에서 4-6으로 변경되었으며, 이는 성능 및 전력 사용에 광범위한 영향을 미칠 수 있음
     * M3 E 코어는 M1의 코어와 비슷하게 보이지만 최대 주파수가 더 높고 백그라운드 작업에서는 더 낮은 주파수로 실행됨
     * M3 P 코어는 벡터(NEON) 유닛에서 성능이 개선된 것으로 보이며 최대 주파수가 더 높음
     * E 코어 수가 증가하면 P 코어에서 높은 QoS 스레드의 오버플로를 수용할 수 있는 용량이 증가
     * macOS 코어 관리도 변경되었음

   읽어보니 소프트웨어 개발 환경에서 (결국 스레드 할당) 동시성 지원하는 하위 라이브러리 동작과 같은 맥락으로 발전하는 것 같네요. 새로운 macOS나 iOS가 새로운 애플 실리콘에서 더 이득이 될 수 있겠구요
"
"https://news.hada.io/topic?id=12076",""하프라이프: 25주년 기념 다큐멘터리 [비디오]"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ""하프라이프: 25주년 기념 다큐멘터리 [비디오]""

        Hacker News 의견

     * 초기 Valve 팀과 현재의 많은 JavaScript 팀 간의 차이점에 대한 의문 제기
          + JavaScript 개발자로서의 경험을 바탕으로, JavaScript 업무를 수행하는 사람들 중 실제로 무엇을 하고 있는지 아는 사람은 4%에 불과함
          + Valve 팀은 Quake 코드를 기반으로 시작하여, 그들의 필요에 맞게 코드를 대폭 수정하며 발전함
          + 대부분의 JavaScript 개발자들은 특정 프레임워크에 머물며 코드 스타일과 프로세스에만 집중함
     * 호주 Team Fortress 커뮤니티에서의 경험 공유
          + Robin Walker와 John Cook은 커뮤니티 내에서 존경받는 인물로, 그들의 경험은 Valve 합류 후 Half-Life 2 작업에 도움이 됨
          + Team Fortress 2가 원래 현실적인 군사 슈팅 게임으로 기획되었으나, 프로젝트 범위의 확장으로 인해 변경됨
     * Valve의 초기 고용 성공에 대한 흥미로운 점
          + 컴퓨터 과학이나 게임 배경이 없는 사람들이 창의적이고 성실한 자원으로 증명됨
          + Half-Life 코드의 주요 작성자는 개발자가 아니었으며 법률가나 회계사가 되려고 했음
          + 창업자, 타이밍, 운이 중요한 요소로 작용함
     * 게임 개발의 업무 강도에 대한 안타까운 회상
          + 성공적인 결과에도 불구하고, 과도한 업무 시간은 일부 사람들을 게임 모딩에서 비즈니스 소프트웨어로 전환하게 만듦
     * Half-Life 25주년 기념 플레이스루에 대한 정보 공유
          + Dario Casali의 Half-Life 25주년 기념 플레이스루 링크 제공
     * Half-Life 게임에 대한 애정과 최근의 부활에 대한 언급
          + Valve가 Half-Life Deathmatch에 새로운 콘텐츠를 추가했으며, Half-Life와 HL2가 VR에서 플레이 가능함
     * Valve가 Half-Life 2 에피소드 3 발표 17주년을 기념하지 않은 점 언급
     * 게임 개발의 무작위성과 열정에 대한 감상
          + 많은 개발자들이 프로그래밍이나 게임에 대한 배경 지식 없이도 열정적으로 참여함
          + Half-Life의 초기 개발 과정에서 많은 요소들이 점진적으로 추가됨
     * ""늦는 것은 잠시지만, 형편없는 것은 영원하다""는 인상적인 인용구 공유
     * Half-Life 원작과 Black Mesa 모드에 대한 다큐멘터리 추천
          + Black Mesa는 Half-Life의 소스 엔진으로 리메이크된 모드로, 원작 개발자들이 언급한 내용과 모더들이 직면한 도전에 대해 이야기함
"
"https://news.hada.io/topic?id=11979","Anthropic, Claude 2.1 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Anthropic, Claude 2.1 릴리즈

     * 클로드 2.1은 API를 통해 사용 가능하며, claude.ai 채팅 경험을 제공함.
     * 200K 토큰 컨텍스트 윈도우, 모델 환각(Hallucination) 감소, 시스템 프롬프트 및 새로운 베타 기능인 도구 사용이 특징
     * 고객의 비용 효율성 향상을 위해 가격 정책 업데이트 예정

200K 컨텍스트 윈도우

     * 클로드 사용자들은 더 큰 컨텍스트 윈도우와 긴 문서 작업 시 더 정확한 출력을 요구함
     * 200,000 토큰으로, 약 150,000 단어 또는 500 페이지 이상의 자료를 클로드에 전달할 수 있음
     * 클로드는 대규모 콘텐츠나 데이터와 대화하며 요약, Q&A, 추세 예측, 다중 문서 비교 등 다양한 작업 수행 가능함

환각율 2배 감소

     * 클로드 2.1은 정직성 향상을 위해 거짓 진술 발생률을 2배 감소시킴
     * 기업들은 더 큰 신뢰와 신뢰성을 가지고 AI 애플리케이션을 구축하고 운영에 배포할 수 있음
     * 클로드 2.1은 이해력과 요약 능력 향상, 특히 정확도가 요구되는 긴 복잡한 문서에서 성능 개선을 보임

API Tool Use

     * 사용자의 기존 프로세스, 제품 및 API와 통합할 수 있는 새로운 베타 기능인 ""Tool Use(도구 사용)""을 추가함
     * 클로드는 개발자가 정의한 함수나 API를 조정하고, 웹 소스를 검색하며, 개인 지식 베이스에서 정보를 검색할 수 있음
     * Tool Use는 초기 개발 단계에 있으며, 개발자 기능과 프롬프트 가이드라인을 구축 중임

개발자 경험

     * 클로드 API 사용자를 위한 개발자 콘솔 경험을 단순화하고, 새로운 프롬프트 테스트를 용이하게 함
     * 새로운 워크벤치 제품을 통해 개발자는 프롬프트를 반복하고, 클로드의 행동을 최적화하기 위한 모델 설정에 접근할 수 있음
     * 시스템 프롬프트를 도입하여 사용자가 클로드에 사용자 정의 지침을 제공할 수 있게 함

GN⁺의 의견

     * 클로드 2.1의 가장 중요한 특징은 200K 토큰 컨텍스트 윈도우와 환각율 감소로, 이는 사용자들이 더 큰 문서와 데이터를 처리하고 더 신뢰할 수 있는 결과를 얻을 수 있게 해줌
     * 이러한 기능은 AI 기술의 발전을 보여주며, 기업과 개발자들에게 더욱 효율적이고 정확한 도구를 제공함으로써 그들의 작업을 혁신할 잠재력을 가짐
     * 이 글은 AI 기술의 최신 동향과 개발자들이 이용할 수 있는 새로운 도구에 대한 흥미로운 정보를 제공함으로써, 기술에 관심 있는 사람들에게 매력적인 내용을 담고 있음

        Hacker News 의견

     * 200k 컨텍스트의 달콤쓴맛: 70k에서 195k로 오류율이 급증한 것은 아쉬움. 하지만 중간 부분의 오류 감소에는 칭찬.
     * 모델의 제한적 사용에 대한 불만: 클로드가 제목에서 주장하는 것처럼 거절이 적지 않음. Anthropic이 모델을 지나치게 검열하고 있어 사용하기 어려움. 사용자가 도구를 결정해야지, 도구가 사용자를 결정해서는 안 됨.
     * 제목과 내용의 불일치 지적: 발표에서 언급된 '거절 감소'는 실제 내용과 맞지 않음. 클로드 2.1은 잘못된 정보를 제공하는 것보다 거절할 가능성이 더 높아졌음을 시사.
     * 코딩에 대한 비효율성: GPT-4에 비해 10배 더 나쁨. 간단한 데이터베이스 동기화 함수를 요청했을 때, 실제 코드 대신 수도코드를 많이 제공.
     * 모델에 대한 부정적인 인상: Anthropic의 모델이 대부분의 요청을 거절하도록 과도하게 학습되어 있어, 클로드와의 대화가 즐겁지 않음.
     * 이념적 관점의 거절 사례: 효과적인 이타주의자처럼 말하기 위한 어휘 목록 요청에 대한 거절로 인해 유머러스한 상황 발생.
     * 클로드 2에 대한 실망: 처음에는 기대했지만 GPT-4에 비해 훨씬 못 미치는 성능으로 판단, 큰 컨텍스트 창이 있어도 답변의 질이 나쁘면 의미 없음.
     * API 사용에 대한 접근성 문제: API 사용에 관심이 있지만, 응답을 받지 못해 실망. 개발자 플랫폼으로서의 관심 부족.
     * API 접근의 어려움: Anthropic의 웹사이트나 Bedrock을 통한 요청에 대한 응답을 받지 못해 비즈니스로서 API 접근이 불가능해 보임.
     * 시스템 프롬프트 도입에 대한 관심: 사용자가 클로드에게 맞춤형 지시를 제공하여 성능을 향상시킬 수 있는 시스템 프롬프트 도입에 주목. 사용 및 남용의 용이성에 대한 기대감.
     * 클로드의 테스트 사용과 OpenAI의 선택: 아직 생산에는 사용하지 않지만, 새로운 기능을 LLM과 함께 구축할 때 정기적으로 테스트에 포함. OpenAI가 더 빠르게 인증을 받아 시장에 출시되었고, API가 더 나아지고 신뢰할 수 있으며 저렴함. 하지만 클로드가 AWS Bedrock에 포함되면서 이전에는 불가능했던 것들이 가능해짐.
"
"https://news.hada.io/topic?id=12010","유튜브, 광고 차단기를 막아 광고 속도 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        유튜브, 광고 차단기를 막아 광고 속도 향상

요약: YouTube 광고 차단 우회 방법 공유

     * YouTube가 광고 차단 툴을 막기 시작하면서, 한 Reddit 사용자가 광고를 16배 빠르게 재생하여 우회하는 방법을 공유했음.
     * 이 방법은 광고를 빠르게 재생하고 음소거하여 사용자의 비디오 시청에 영향을 주지 않음.
     * 이 기능은 브라우저 확장 프로그램으로 개발 중이며, 곧 사용 가능할 예정임.

GN⁺의 의견

   이 글에서 가장 중요한 점은 광고 차단 툴이 차단당했을 때 사용자들이 어떻게 창의적인 방법으로 이를 우회하는지를 보여준다는 것이다. 이러한 공유는 기술 커뮤니티 내에서 지식과 해결책을 공유하는 문화를 반영하며, 많은 사용자들에게 흥미로운 주제가 될 수 있다.

        Hacker News 의견

     * 확산되지 않을 것으로 예상했던 창작자의 의견
          + 광고 차단이 효과적이지 않다는 뉴스에 힘입어 스트라이샌드 효과 때문에 해당 프로젝트를 시작함.
          + 이 프로젝트는 기존 광고 차단기의 두 번째 방어선으로 의도됨.
          + 저녁 시간에 유료 스폰서 비디오 부분을 가속화하는 동일한 기술을 조사할 계획임.
          + 웹 개발자로서 여가 시간에 확장 프로그램을 만드는 것을 취미로 함.
          + 이 확장 프로그램은 4시간 만에 만들어져서 관심을 받는 것에 대해 즐거움을 느낌.
          + 더 멋진 확장 프로그램을 보고 싶다면 이 링크를 확인할 것을 권장함.
     * 광고 게시자가 광고 차단 사용자를 대상에서 제외하는 것에 대한 의견
          + 광고 게시자가 광고 차단 사용자를 대상에서 제외할 수 있는지에 대한 질문 제기.
          + 광고를 강제로 시청하게 만드는 것은 브랜드에 대한 부정적인 인상을 줄 수 있음.
     * 광고 음소거 방법에 대한 작업 여부에 대한 의견
          + 광고를 감지하고 재생 중인 장치의 볼륨을 원격으로 조절하는 방법에 대한 작업이 있는지에 대한 질문.
     * 광고 차단기 사용에 대한 개인적 경험 공유
          + 지난해까지 광고 차단기를 사용하지 않았으나, 유튜브 광고가 너무 심해져서 프리미엄으로 유도하는 것 같음.
          + 크롬캐스트에서 상호작용을 요구하는 1분 길이의 광고가 불편함.
          + 좋은 구독 서비스에는 돈을 지불하는 것에 문제가 없으나, 스포티파이, 유튜브, 넷플릭스, 디즈니, 프라임, 일반 TV 등 구독료가 합쳐져 비용이 많이 듬.
     * 유튜브 프리미엄 구매를 권장하는 의견
          + 유튜브 사용이 많아 광고가 거슬린다면 프리미엄을 구매하는 것이 가치 있다고 생각함.
          + 유튜브 프리미엄은 음악 서비스도 제공하며, 몇몇 무료 영화도 볼 수 있음.
     * 과거 유튜브 속도 조절에 관한 기사와 코드 공유
          + 2012년에 유튜브 속도를 조절하는 방법에 대한 기사와 코드를 작성한 경험 공유.
          + 당시 유튜브가 어도비 플래시를 사용할 때의 내용임.
     * 비디오 속도 조절을 위한 파이어폭스 확장 프로그램 추천
          + 2배속 제한 없이 세밀한 비디오 속도 조절이 가능한 파이어폭스 확장 프로그램을 추천함.
          + 이 확장 프로그램은 몇 년 동안 잘 사용되었으며, 유튜브 광고뿐만 아니라 다른 사이트의 비디오 플레이어에서도 작동함.
     * 광고를 빨리 감기하는 것에 대한 현대적 접근에 대한 의견
          + VHS에 녹화한 후 광고를 빨리 감기하는 것과 비슷한 현대적인 방법이라고 언급함.
     * 비디오 광고를 빠르게 재생할 때의 문제 제기
          + 비디오 광고를 빠르게 재생할 때, 유튜브가 예상 시간과 실제 시간을 비교하여 사용자를 표시하거나 광고 차단에 대한 팝업을 보여줄 수 있는지에 대한 질문.
"
"https://news.hada.io/topic?id=11961","샘 알트먼, OpenAI CEO로 복귀 시도 지속","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      샘 알트먼, OpenAI CEO로 복귀 시도 지속

오픈AI의 CEO 복귀를 시도하는 샘 알트만

     * 샘 알트만의 마이크로소프트 이동은 확정되지 않았으며, 이사회 멤버 중 한 명이 그의 복귀를 지지함으로써 이사회의 두 멤버가 마음을 바꿀 필요가 있음.
     * 마이크로소프트 CEO 사티아 나델라는 오픈AI의 이사회와 경영진이 알트만의 복귀 여부를 결정할 것이라고 언급함.
     * 오픈AI 직원들은 새 CEO 임명에 반대하며, 이사회의 사임과 알트만의 복귀를 요구하는 서명 운동을 벌이고 있음.

오픈AI 내부의 권력 투쟁

     * 오픈AI 내부에서는 알트만의 해임 이후 권력 투쟁이 계속되고 있으며, 거의 모든 직원이 알트만을 지지하고 있음.
     * 새로운 CEO인 트위치 공동 창립자 엠멧 쉬어는 해임의 구체적인 이유를 문서화하여 얻지 못했으며, 이는 투자자들에게도 공유되지 않음.
     * 알트만은 오픈AI가 계속 번창하는 것을 최우선으로 하고 있으며, 마이크로소프트와 함께 파트너와 고객에게 연속적인 운영을 제공하는 데 전념하고 있음.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 오픈AI의 전 CEO 샘 알트만이 회사로 복귀하기 위한 노력을 계속하고 있다는 점이다. 이는 인공지능 분야의 선두주자 중 하나인 오픈AI의 미래와 관련된 중대한 변화를 암시하기 때문에 많은 사람들에게 흥미로운 소식이 될 수 있다. 기술 산업 내부의 권력 투쟁과 경영진의 변화는 기업의 방향성과 정책에 큰 영향을 미칠 수 있으며, 이는 오픈AI가 개발하는 AI 기술의 미래에도 중요한 영향을 줄 수 있다.

        Hacker News 의견

     * 770명의 직원 중 700명이 이사회 사퇴를 촉구하는 서명에 참여함.

     10am PT 기준으로, 770명의 직원 중 700명이 이사회의 사퇴를 요구하는 서명에 동참했다고 함. 출처
     * 인류는 아직 초지능의 보호자가 되기에 준비되지 않았음을 보여줌.

     이번 사태를 통해 드러난 것은, 인류가 아직 초지능을 관리할 준비가 되어 있지 않다는 점이다. 가장 영향력 있는 기술 중 하나를 이끄는 최고의 전문가들조차도 개인적인 이해관계와 자존심으로 인해 어린아이처럼 행동하고 있으며, 각자의 이익을 확보하기 위해 안간힘을 쓰고 있다는 것이다.
     * Dustin Moskovitz와 Sam Altman 간의 갈등이 주된 원인일 수 있음.

     Dustin Moskovitz는 페이스북의 초기 직원이자 Asana의 창립자로, Open Philanthropy라는 비영리 단체를 설립하여 효과적인 이타주의를 지지하고 OpenAI에 3000만 달러를 기부했다. 그는 또한 Anthropic의 초기 투자자 중 한 명이다. OpenAI 이사회 멤버들 대부분이 Moskovitz와 관련이 있다는 점이 갈등의 배경으로 보인다.
     * 인간의 자존심이 문제 해결을 방해하고 있음.

     이사회 멤버들이 일주일 전으로 시간을 되돌리려는 의지가 없는 것은 인간의 자존심이 어떻게 결정을 방해하는지를 보여준다. 모든 당사자가 합의한다면 상황을 간단히 원상태로 돌릴 수 있지만, 자존심이 그것을 방해하고 있다.
     * 현재 상황이 도덕적 십자군이 아닌 자본 추구임을 인정해야 함.

     직원들이 큰 보상을 원하고 있으며, Sam Altman을 따를 것이다. Altman은 실리콘밸리의 절반을 운영하고 있으며, AI를 중심으로 기술 생태계가 형성되고 있다. 안전성이나 개방성, AI가 인류에게 미치는 영향에 대한 관심은 없으며, 모두 이기적인 이해관계에 따라 움직이고 있다.
     * OpenAI 직원의 92% 이상이 이사회가 항복하지 않으면 Altman과 함께 Microsoft로 이동할 것임.

     OpenAI 직원의 92% 이상이 이사회가 요구를 들어주지 않을 경우, Altman과 함께 Microsoft로 옮길 것이라고 밝혔다. 서명자에는 공동 창립자들도 포함되어 있다. 출처
     * 이 사건에 대한 다큐멘터리가 제작되길 바람.

     이 사건의 전말을 설명하는 다큐멘터리가 언젠가 제작되길 바라며, 사건의 중심에 있는 사람들조차도 무슨 일이 일어나고 있는지 확신하지 못할 것이라고 생각함.
     * Microsoft CEO가 OpenAI의 인사 문제에 대해 언급하는 것이 OpenAI 내부의 불행한 변화의 원인일 수 있음.

     Microsoft CEO가 OpenAI의 현재 인사 문제에 대해 언급하는 것이 OpenAI 내부의 불행한 변화를 초래한 주된 이유일 수 있다는 의견이 제시됨.
     * 상황이 이미 충분히 황당한 만큼 Elon Musk가 관련될 수도 있음.

     현재 상황이 이미 충분히 황당한 만큼, Elon Musk가 개입할 가능성에 대해서도 놀라지 않을 것이라는 의견이 있음.
     * Emmett Shear가 자신의 계약에 유리한 조건을 넣었을 가능성에 대한 추측.

     Emmett Shear가 자신의 계약에 유리한 조건을 넣었을 가능성에 대해 추측하며, 만약 그렇다면 쉽게 돈을 벌 수 있을 것이라는 의견이 있음.
"
"https://news.hada.io/topic?id=11962","Krita AI Diffusion - 오픈소스 페인팅 도구 Krita를 위한 Generative AI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Krita AI Diffusion - 오픈소스 페인팅 도구 Krita를 위한 Generative AI

     * Krita 워크플로우 안에서 인페인 및 아웃페인트 지원
          + 영역을 선택하고 버튼을 누르면 이미지와 일치하는 새 콘텐츠가 생성
          + 캔버스를 확장하고 생성된 콘텐츠로 새 영역을 채우기 하면, 기존과 자연스럽게 어우러지는 이미지를 생성하여 확장
          + 프롬프트는 선택사항이며 꼭 넣지 않아도 됨
     * 포토샵의 ""Generative Fill/Expand"" 가 제공하는 것 이상의 기능을 제공하는 것이 목표
     * 강도를 조정하여 기존 콘텐츠(img2img)를 다듬거나 이미지를 처음부터 새로 생성할 수 있음
     * 모든 것이 로컬에서 진행되며, 오픈소스이고, 무료

기능 요약

     * Inpaint: Krita의 선택 도구를 사용하여 영역을 표시하고 이미지 내 기존 콘텐츠를 제거하거나 교체
     * Outpaint: 캔버스를 확장하여 빈 영역을 선택하고 기존 이미지와 자연스럽게 어우러지는 콘텐츠로 자동 채움
     * Generate: 단어나 기존 이미지로 새 이미지를 처음부터 생성
     * Refine: 기존 이미지 콘텐츠를 완전히 교체하는 대신 세부 조정에 강도 슬라이더 사용
     * Control: 스케치나 라인 아트로 직접 이미지 생성 가이드, 기존 이미지나 3D 장면에서 깊이나 노멀 맵 사용
     * Resolutions: 모든 해상도에서 효율적으로 작업, AI 모델에 적합한 해상도 자동 사용 및 이미지 영역에 맞게 조정
     * Upscaling: 메모리 부족 없이 이미지를 4k, 8k 이상으로 업스케일링 및 풍부하게 만듦
     * Job Queue: 하드웨어에 따라 이미지 생성에 시간이 걸릴 수 있으므로 작업을 큐에 넣고 취소 가능
     * History: 모든 이미지가 걸작이 되는 것은 아니므로, 결과를 미리 보고 이전 생성물과 프롬프트를 언제든지 탐색
     * Strong Defaults: 다양한 시나리오를 커버하는 간단한 UI를 위한 다재다능한 기본 스타일 프리셋 제공
     * Customization: 자체 프리셋 생성 - 안정적인 확산 체크포인트 선택, LoRA 추가, 샘플러 조정 등

시작하기

     * 플러그인은 Stable Diffusion 백엔드에 대한 통합 설치 프로그램 포함
     * 요구 사항: Windows 또는 Linux (MacOS는 미테스트), Linux에서는 Python + venv 설치 필요
     * 하드웨어 지원: 로컬에서 실행하려면 최소 6 GB VRAM을 갖춘 강력한 그래픽 카드 권장, 그렇지 않으면 이미지 생성이 매우 느림
     * 설치: Krita 설치, 플러그인 다운로드 및 pykrita 폴더에 압축 해제, Krita 설정에서 플러그인 활성화 및 재시작, 플러그인 도커 표시, 서버 설치를 위한 ""Configure"" 클릭
     * GPU 클라우드: 로컬에서 실행하는 대신 GPU를 임대할 수 있음, 이 경우 5단계 필요 없음, 플러그인을 사용하여 원격 서버에 연결
     * 선택적: ComfyUI 서버 사용자 정의, 자동 설치 대신 수동 설치 또는 기존 설치 사용 가능, 서버가 Krita 시작 전에 로컬에서 이미 실행 중이면 플러그인이 자동으로 연결 시도, 원격 서버 사용도 가능

GN⁺의 의견

   이 기사에서 가장 중요한 것은 Krita 사용자들이 AI 기술을 활용하여 창작 과정을 간소화하고 향상시킬 수 있는 새로운 플러그인의 출시임. 이 플러그인은 이미지 생성, 확장, 세부 조정 등 다양한 기능을 제공하여 디지털 아티스트들의 작업 흐름에 혁신을 가져올 수 있음. 오픈 소스이며 사용자 정의가 가능하다는 점은 기술에 관심 있는 초급 소프트웨어 엔지니어들에게 특히 흥미로울 것임.

   예상한 대로 아티스트 커뮤니티의 반발 엄청나네요.

        Hacker News 의견

     * Krita 커뮤니티와 핵심 팀은 인공지능에 대해 명확히 반대하는 입장을 취하고 있음.
          + Krita 사용자 인터페이스를 개발하는 한 그룹의 일원으로, 이러한 이유로 Krita 버전 작업을 중단함.
     * 인터랙티브 AI 드로잉이 가능한 시스템 사용 경험 공유.
          + 시스템은 초당 20-30회 반복을 수행할 수 있는 4090 GPU를 사용함.
          + 이미지 당 8회 반복으로 계산하면 초당 4개 이미지 생성 가능.
          + 원하는 이미지를 얻은 후, 30-50회 반복 실행하여 이미지를 최종화함.
     * AMD GPU는 DirectML을 통해 지원되지만, 윈도우에서만 가능함.
          + 이러한 추세에 대해 불만족스러움을 표현.
          + 대안으로 ComfyUI라는 토치 기반 프로젝트를 백엔드로 사용할 수 있음.
     * Krita와 예술의 좋은 점은 저렴한 도구와 인터넷만 있으면 누구나 예술로 수익을 창출할 수 있다는 것이었음.
          + 고가의 그래픽 카드가 필수가 되면 예술의 민주성이 크게 저하될 것이라는 우려.
     * AI가 몇 년 내에 모든 가능한 예술작품을 생성할 것이라고 생각하면, 창작 활동을 시도하는 것 자체가 무의미해 보임.
          + AI를 잘 사용하게 되더라도 창작자로서의 생계를 유지할 수 있는 기간에 대한 의문.
          + 창작이 취미로는 즐거울 수 있지만, 직업으로서는 모두가 예술을 만들 수 있게 되면 수익 창출이 어려워짐.
     * 현재 무료로 사용 가능한 강력한 컴퓨팅 리소스를 활용하여 창작 활동을 하는 개인의 경험 공유.
          + 경제적 어려움에도 불구하고, AI를 활용한 창작에 긍정적인 면을 발견함.
     * Ubuntu에서의 설치 경험 공유.
          + Krita를 먼저 설치하고 실행한 후에 플러그인을 원하는 폴더에 복사해야 함.
     * 오픈 소스 소프트웨어가 Adobe Photoshop과 같은 기능을 구현한 것에 대한 감탄.
          + 이는 Photoshop이 인공지능 생성 도구에 대해 구축한 독점적 위치를 상실할 수 있음을 의미함.
     * 강력한 그래픽 카드가 권장되며, 최소 6GB VRAM이 필요함.
          + 4GB VRAM 카드에서 이미지 생성 시간이 얼마나 길어질지에 대한 질문.
     * 필요한 하드웨어를 갖추지 못해 아쉬움을 표현하는 사용자.
          + Steam Deck에서 안정적인 확산(stable diffusion)을 실행하는 데 성공한 사람이 있는지, 그리고 다른 대안에 대한 정보 공유.
     * 여러 GPU를 사용하여 작동하는지에 대한 질문.
"
"https://news.hada.io/topic?id=12068","HN 소개: Trains.fyi – 미국과 캐나다의 승객 열차 실시간 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 소개: Trains.fyi – 미국과 캐나다의 승객 열차 실시간 지도

북미 여객열차 실시간 위치 추적 프로젝트

     * 프로젝트 소개: GPS 추적 데이터를 통합하여 북미의 모든 여객열차 위치를 실시간으로 보여주는 지도 제공.
     * 데이터 업데이트: 매분마다 데이터가 갱신되며, 지도는 자동으로 업데이트 됨.
     * 프로젝트 창시자: @rydercalmdown이 만듦.

지원하는 열차 목록

     * 캐나다: Via Rail
     * 온타리오: GO Transit
     * 몬트리올: EXO
     * 미국: Amtrak, Long Island Railroad, Metro North Railroad, Massachusetts Bay Transportation Authority, Caltrain, SEPTA, METRA, MARC, South Shore Line

GN⁺의 의견

   이 프로젝트는 북미 지역의 여객열차 위치를 실시간으로 파악할 수 있는 혁신적인 도구임. GPS 추적 기술을 활용하여 분 단위로 업데이트되는 지도는 여행자와 철도 애호가들에게 매우 유용할 것으로 보임. 프로젝트의 창시자인 @rydercalmdown의 기술적 노력과 여러 철도 회사의 협력이 돋보이는 점이며, 이는 철도 이용의 편리성을 크게 향상시킬 수 있는 발전으로 평가됨.

        Hacker News 의견

     *
          + 편리함을 발견한 경험*
          + 지도에 자신의 기차가 올바르게 표시되어 있지만, 실제 타고 있는 '실버 스타'가 '노스이스트 리저널'로 잘못 표기된 것을 발견함.
          + 프로젝트 자체는 훌륭하다고 평가하면서도, 감사의 말을 전함.
     *
          + 기차의 활동에 대한 예상과 현실의 차이에 놀라움*
          + 미국 내 승객 철도의 인기를 과대평가했다고 생각함.
          + 승객 철도가 크게 인기 있는 것은 아니지만, 기차 간에 수백 마일의 거리가 있는 것을 보고 놀람.
     *
          + 프로젝트의 누락된 부분에 대한 지적*
          + NJ 트랜짓과 같은 별도의 승객 철도 서비스와, Septa 및 MTA의 도시 내 경전철 및 지하철 노선이 누락되었다고 지적함.
     *
          + 도쿄의 3D 지도를 소개하는 댓글*
          + 도쿄의 3D 지도를 보여주는 링크를 공유함.
     *
          + 미국의 대중 철도 시스템에 대한 안타까움을 표현하는 댓글*
          + 미국의 대중 철도 시스템의 현 상태가 안타깝다고 언급함.
          + 비교를 위해 영국의 유사한 지도 링크를 공유함.
     *
          + Amtrak을 타고 있는 동안 지도를 보는 경험을 공유하는 댓글*
          + Amtrak을 타고 있으면서 실제 위치보다 약 14마일 뒤쳐진 지도를 보고 있지만, 그래도 매우 멋지다고 평가함.
     *
          + 지도의 색상 구분에 대한 피드백을 제공하는 댓글*
          + Amtrak과 시카고의 Metra 기차 색상이 비슷해 한눈에 구별하기 어렵다고 지적함.
          + 색상을 좀 더 구별하기 쉽게 조정할 것을 제안함.
          + 사용 가능한 데이터 피드로 이런 기술이 가능하다는 사실에 놀라움을 표현함.
     *
          + 추가적인 데이터 소스를 소개하는 댓글*
          + 시카고와 사우스 벤드를 연결하는 Southshore Line의 데이터 소스 링크를 공유함.
     *
          + 데이터 출처에 대한 궁금증을 표현하는 댓글*
          + 데이터가 어디서 오는지, 어떻게 자신만의 인스턴스를 구축하고 지리 데이터를 데이터베이스에 넣을 수 있는지에 대한 세부 정보를 원함.
          + 다양한 형식의 여러 데이터 피드를 하나의 스키마로 통합하는 작업이 모든 노력의 핵심이라고 언급함.
     *
          + 북미 철도 트래픽에 대한 인사이트를 제공하는 댓글*
          + 승객 철도 트래픽이 북미 전체 철도 트래픽의 3%만을 차지한다는 철도 경영진의 인용을 언급함.
          + 화물을 포함한다면 지도가 기관차로 가득 찰 것이라고 추측함.
"
"https://news.hada.io/topic?id=11993","Typst - 논문을 빠르게 작성하게 해주는 마크업 기반 조판 시스템 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Typst - 논문을 빠르게 작성하게 해주는 마크업 기반 조판 시스템 오픈소스

     * 논문/에세이/보고서 등을 더 빠르게 작성 가능
     * LaTeX 만큼 강력하지만 훨씬 배우기 쉽게 설계됨
     * 텍스트에만 집중하면 레이아웃과 서식은 Typst가 알아서 처리
     * 브라우저에서 실행되므로 어디서나 바로 작성 시작
     * 팀간에 공유하고 같은 페이지에서 협업 가능
     * 템플릿 지원으로 빠르게 적용 가능 (컨퍼런스가 변경되었을 경우 컨텐츠 변경없이 바로 템플릿 전환)
     * 인크리멘탈 컴파일로 빠른 컴파일 지원
     * 다른 도구 대비 강점
          + LaTeX
               o 변경 사항 즉시 프리뷰
               o 이해하기 쉽고 명확한 에러 메시지
               o 글꼴과 여백부터 제목과 목록의 모양까지 모든 것을 구성할 수 있는 일관된 스타일링 시스템
               o 이해하기 어려운 매크로 대신 익숙한 프로그래밍 구성을 사용
          + Word
               o 팀에서 쉽게 공동 작업 가능
               o 작성할 때 모든 서식을 자동으로 지정하는 강력한 템플릿을 사용하고 만들 수 있음
               o 전체 문서를 일일이 검토할 필요 없이 나중에 서식을 변경하기만 하면 됨
               o 향상된 Justification을 포함한 고품질의 타이포그래피 출력물 생성
          + Google Docs
               o 전문가 수준의 문서 작성
               o 더 나은 수학 지원, 그림 처리, 적절한 목차 등 훨씬 더 많은 기능 제공
               o 작성할 때 모든 서식을 자동으로 지정하는 강력한 템플릿을 사용하고 만들 수 있음
               o 향상된 Justification을 포함한 고품질의 타이포그래피 출력물 생성
     * 연구를 발표하는 데 필요한 그림, 공식, 표, 참고 문헌을 설정할 수 있음
          + 차트 기능도 곧 추가 예정
     * 엄청 쉬운 수식 작성 기능 제공
     * 추가될 기능
          + HTML Export
          + PDF/A & PDF/X
          + 데스크탑 앱
          + 코멘트
          + 향상된 Citation

   음.. 일반 블로깅 노트로 쓰긴 어떤가요? 언뜻 보기엔 논문이나 기술문서 작성에 최적화 된게 아닌가해서요

   https://velog.io/@huansock/…

   제가 한국어로 자습서를 번역 했었어요!

   사용자친화적인 문법, 프로그래밍 가능 등 기능들도 좋은데 전 거의 실시간으로 컴파일되는게 너무 좋더라고요. 마크다운으로 쓰는것과 비슷한 속도라..
   다만 아직 production 레벨에서 쓰기에는 약간 아쉬운 부분이 있습니다. Two-column 양식에서 full width figure를 못 넣는다던지...
   아무튼 요즘은 간단한 문서 작성할때 거의 latex 대신 이거로 하고있어요

   latex 보다 수식문법이 훨씬 간소한게 마음에 드네요.

   overleaf와 작은 차이점이 있네요

   typst - 마크업 기반의 조판 시스템
   8달 전에 한번 공유했었는데, 소개 페이지가 생겨서 그런지 뭔가 많이 개선된 것 처럼 보이네요.
"
"https://news.hada.io/topic?id=11995","VMware가 이제 Broadcom의 일부가 됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       VMware가 이제 Broadcom의 일부가 됨

     * 브로드컴이 VMware를 성공적으로 인수함을 발표함.
     * 이 인수는 브로드컴의 엔지니어링 중심, 혁신 중심 팀에 VMware가 합류하는 중요한 단계임.
     * 브로드컴과 VMware는 기업 고객들에게 비즈니스에 필수적인 인프라 솔루션 포트폴리오를 확장하여 혁신을 가속화하고, 규모에 맞는 애플리케이션을 구축, 운영, 관리, 연결 및 보호하는 데 있어 더 큰 선택과 유연성을 제공할 것임.

CEO 인사이트 및 관련 비디오

     * 브로드컴의 CEO인 Hock Tan은 VMware 인수가 새롭고 흥미로운 시대의 시작을 의미한다고 언급함.
     * 관련 비디오에서는 Hock Tan과 VMware의 여러 부문의 부사장들이 인수에 대한 질의응답을 제공함.
     * 이 비디오들은 브로드컴과 VMware가 앞으로 어떻게 나아갈지에 대한 정보를 제공함.

주요 자료 및 추가 정보

     * 뉴스 릴리스에서는 브로드컴이 세계적인 인프라 기술 회사를 구축하기 위한 전략의 일환으로 VMware 인수를 마감했다고 발표함.
     * IDC 스포트라이트는 새로운 VMware에 대한 IDC의 관점과 Hock Tan과의 인터뷰를 포함함.
     * VMware 제품, 지원 및 이벤트에 대한 정보는 여전히 VMware 웹사이트에서 찾을 수 있음.

GN⁺의 의견

     * 이 기사에서 가장 중요한 점은 브로드컴이 VMware를 인수하여 두 회사가 기업 고객들에게 더 큰 선택과 유연성을 제공하는 강력한 인프라 솔루션 포트폴리오를 제공할 수 있게 되었다는 것임.
     * 이 글은 IT 인프라와 클라우드 서비스에 관심 있는 사람들에게 흥미로울 것이며, 특히 소프트웨어 엔지니어링과 기업 IT 전략에 관련된 전문가들에게 유익한 정보를 제공함.

        Hacker News 의견

     * VMWare의 지속적인 소유권 변경
          + VMWare가 여러 대기업에 소유권이 이전되는 과정을 '핫 포테이토' 게임에 비유함.
          + EMC가 2004년에 VMWare를 6억 2,500만 달러에 인수했으며, 이 관계는 2015년까지 지속됨.
          + 2015년 Dell이 EMC를 580억 달러에 인수하면서 VMWare도 함께 인수함.
          + Dell이 자금 균형을 맞추기 위해 2021년에 VMWare 지분 전체를 매각함.
          + Broadcom이 2023년에 VMWare를 인수하면서 조각을 주워 모음.
          + 다음 4-5년 내에 어떤 대기업이 VMWare를 인수할지 궁금증을 표함. Oracle이나 MS가 다음 인수자가 될 수도 있음을 언급.
     * 학술 기관에 대한 VMWare 라이선스 가격 상승
          + VMWare가 학술 기관을 위한 할인 가격을 폐지할 예정이라는 소식이 전해짐.
          + 이로 인해 많은 기관들이 현재보다 두 배나 세 배 높은 가격을 지불해야 할 상황에 직면함.
          + 대학들, 특히 빅 텐 대학교들이 내년 계약 협상을 앞두고 라이선스 비용을 줄이기 위한 대안을 모색 중임.
     * Spring Framework 생태계에 대한 영향
          + VMWare가 Spring Framework 생태계(스프링 부트 포함)의 좋은 관리자였다는 한정된 관점에서의 의견 제시.
          + Broadcom이 성공적인 오픈 소스 프로젝트를 관리한 경험이 있는지, 특히 드라이버 지원에 있어서 좋지 않은 기록이 있는 것 같다는 우려 표현.
     * VMWare 라이선스 가격 상승에 대한 반응
          + VMWare 라이선스 가격이 크게 오를 것이라는 예상과 함께, 대형 업체들이 다른 솔루션으로 전환할 가능성에 대한 궁금증 제기.
     * 엔터프라이즈 가상화 대안에 대한 질문
          + Hyper V, Citrix, SuSE, Red Hat 등의 가상화 솔루션 존재 여부와 Proxmox를 실제 생산 환경에서 사용하는지에 대한 의문 제기.
     * VMWare 보안 문제에 대한 관심 증가
          + 최근 랜섬웨어 사태 이후 VMWare에 대한 보안 우려가 증가함.
          + 보안 패치의 지연과 설치 어려움에 대한 불만이 있으며, 이러한 문제가 인수와 관련이 있는지 궁금증 표현.
     * Mac용 데스크탑 중심 하이퍼바이저에 대한 대안 탐색
          + Fusion이 사용되지 않게 될 경우, Fusion이나 Parallels 외에 Windows를 잘 실행하는 Mac용 하이퍼바이저에 대한 대안 탐색.
          + Vimy와 LTM이 Linux와 macOS VM에 초점을 맞추고 있어 Windows나 GUI 지원이 부족한 것으로 보임.
     * VMWare 인수를 CA의 전략으로 해석
          + CA가 VMWare를 인수하는 것으로 보고, 성장하지 않지만 많은 고객을 보유한 소프트웨어 회사를 인수해 수익을 창출하는 CA의 전형적인 전략으로 해석.
     * VMWare 클러스터를 XCP-ng로 마이그레이션 완료
          + 한 사용자가 자신의 VMWare 클러스터를 XCP-ng로 이미 마이그레이션했다고 언급.
     * VMWare ESXi 사용의 이유로 Veeam 지목
          + Veeam이 VM 백업 소프트웨어로 잘 작동하기 때문에 VMWare ESXi를 계속 사용한다고 언급. 그렇지 않았다면 Proxmox로 전환할 것이라는 의견 제시.
"
"https://news.hada.io/topic?id=12064","구글 드라이브, 수개월 간의 고객 데이터를 잘못 배치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글 드라이브, 수개월 간의 고객 데이터를 잘못 배치

구글 드라이브, 고객 파일 수개월 분실

     * 구글 드라이브 사용자들이 서비스에서 파일이 미스터리하게 사라지는 문제를 보고함.
     * 일부 사용자는 6개월 이상의 작업물이 사라졌다고 주장하며, 복구 시도도 실패함.
     * 문제의 원인에 대한 정보는 많지 않으나, 일부는 동기화 기능이 작동을 멈췄다고 보고함.

업데이트 추가

     * 사용자 MatthewSt가 해결책을 제시했으나, 이는 공식적인 조언이 아니므로 주의가 필요함.

GN⁺의 의견

     * 이 기사에서 가장 중요한 점은 클라우드 저장소가 항상 안전하지 않을 수 있다는 것임.
     * 구글 드라이브의 이번 사건은 사용자들에게 클라우드 서비스 이용 시 주의를 기울여야 한다는 경각심을 일깨워줌.
     * 특히 비즈니스에 중요한 데이터를 클라우드에 의존할 때는 서비스 약관을 충분히 이해하고 백업 계획을 세워야 한다는 것이 흥미로움.

        Hacker News 의견

     * Google Photos에서의 데이터 손실 경험
          + 한 사용자는 Google Photos를 신뢰하지 않게 된 경험을 공유함. 10년 전 시애틀로 이사 갔을 때 많은 사진을 찍었지만, Google Photos에서 해당 시간대의 사진이 몇 장밖에 남아 있지 않음을 발견함.
          + 또한, 오래된 사진들이 부분적으로 손상되어 제대로 렌더링되지 않거나 잡음처럼 보이는 현상이 있었음.
          + 다행히도, 손실된 사진들은 중요하지 않은 젊은 시절의 사진들이었으며, 자녀들의 중요한 추억과 관련된 사진들은 아니었음.
     * 개인 Google Workspace 계정 및 CubeBackup 사용 권장
          + 다른 사용자는 개인 Google Workspace 계정을 운영하고, 자체 호스팅된 CubeBackup 인스턴스로 정기적인(매시간) 백업을 관리함으로써 데이터 손실 문제를 해결함.
          + CubeBackup을 통해 매일 이메일 요약을 받고, Google Drive, 이메일, 연락처 등의 데이터를 로컬 Synology NAS와 Backblaze B2에 백업함.
          + CubeBackup과 개인 Google Workspace 계정을 사용하는 것을 추천하며, 이는 연간 $5의 비용으로 가치가 있음.
     * Google Drive에서의 무작위 문단 손실 경험
          + 또 다른 사용자는 Google Drive를 사용하여 소설을 쓰던 중, Drive가 무작위로 문단을 삭제하는 경험을 함.
          + 삭제된 문단에는 특별한 패턴이 없었으며, 총 8,000단어 정도가 소설 전체에서 사라짐.
          + 지원팀에 이메일을 보냈지만, 답변을 받지 못했으며, 이후로 Google Drive를 신뢰하지 않게 됨.
     * Google Drive UI의 혼란으로 인한 데이터 손실 인지 어려움
          + 사용자들이 어떻게 자신의 데이터가 사라졌는지 알아차리는지 의문을 제기함. Google Drive의 사용자 인터페이스가 혼란스러워 자신의 문서를 찾기 어렵고, 다른 사람이 작성한 문서는 링크를 직접 가지고 있지 않는 이상 찾기 어려움.
     * Google Drive에서의 비즈니스 데이터 손실 및 복구 경험
          + 한 비즈니스에서 Google Drive에서 무작위 파일이 사라졌으며, 몇 주 또는 몇 달 후에 대부분은 루트 폴더에서 다시 나타남.
          + Google 지원팀은 문제를 인정하지 않았으며, 현재 Google + Slack + Notion에서 OneDrive + Teams + Loop로 이동을 고려 중임.
          + Microsoft의 지원팀이 Loop 활성화를 돕고 있지만, 문서의 지침이 작동하지 않아 지연되고 있음.
     * rclone을 이용한 OneDrive에서 Dropbox로의 백업 설정
          + 사용자는 rclone을 사용하여 OneDrive의 전체 백업을 매일 Dropbox로 수행하도록 설정함.
          + 두 서비스가 동시에 실패할 가능성은 낮다고 생각하여 이 방법을 안전하다고 여기며, rclone 사용을 추천함.
     * 이메일의 대량 손실 및 지원 포럼의 대응
          + 한 사용자의 파트너는 이메일이 몇 달 또는 몇 년치가 한꺼번에 사라지는 현상을 경험함.
          + 지원 포럼에서는 개인이 문제를 제기할 때마다 지원 에이전트들이 개인을 탓하며, 실제로 이메일이 사라지는 현상을 목격하고도 ""삭제를 멈추라""고 말함.
     * Google의 데이터 손실 가능한 원인 추측
          + Google의 복제 프로세스가 6개월 동안 지연되었을 가능성이 있으며, 이를 해결하려는 시도에서 오래된 데이터를 보여주는 복제본이 마스터로 설정됐을 수 있음.
          + 복제본 간의 충돌이 발생하여 데이터를 스마트하게 병합하기 위한 코드 작성이 필요하며, 일부 사용자는 영구적인 데이터 손실을 경험할 수 있음.
     * immich를 이용한 이미지 자체 호스팅 및 백업
          + 한 사용자는 immich를 사용하여 이미지를 자체 호스팅하고 있으며, 이에 만족함.
          + 모바일 앱이 괜찮고 얼굴 인식 및 하드웨어 가속 비디오 트랜스코딩 기능이 있음.
          + Tailscale 또는 저렴한 Hetzner 박스에 리버스 프록시를 사용하여 서비스할 수 있음.
          + 좋은 백업이 필수적이며, 별도의 VLAN에 백업 서버를 두고 ZFS 스냅샷을 일일 동기화하고, Duplicati를 사용하여 Google Drive에 일일 증분 암호화 백업을 수행함.
"
"https://news.hada.io/topic?id=11963","친구는 친구가 형편없는 그래프를 만들지 않도록 돕습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     친구는 친구가 형편없는 그래프를 만들지 않도록 돕습니다

데이터 시각화의 좋고 나쁜 예

     * 데이터 시각화에 대한 의견이 담긴 에세이로 좋은 시각화와 나쁜 시각화에 대한 예시와 설명을 포함

평균 분리를 위한 막대 그래프 만들기 금지

     * 평균 분리 그래프는 과학 출판물에서 흔히 볼 수 있으나, 분포와 표준편차가 비슷한 두 그룹이 실제로 같은지 표현하는 데 막대 그래프는 적합하지 않음.
     * 막대 그래프를 사용하기 전에 몇 가지를 확인해야 함을 강조함.

소규모 샘플 크기에 대한 바이올린 플롯 만들기 금지

     * 소규모 샘플에서는 분포와 사분위수가 크게 달라질 수 있으므로 바이올린 플롯이 의미가 없음.
     * 샘플 크기가 50 이상일 때 분포가 안정화됨을 실험을 통해 확인함.

단방향 데이터에 양방향 색상 척도 사용 금지

     * 단방향 데이터에 양방향 색상 척도를 사용하는 것은 데이터 시각화에서 큰 실수임.
     * 색상 척도는 의미 있는 특별한 값들을 나타내야 함.

다중 요인 실험 결과를 막대 그래프로 표현 금지

     * 다중 요인 실험 결과를 효과적으로 전달하기 위해서는 요인별 그룹화/구분에 대한 신중한 설계가 필요함.

행과 열의 재배열 없이 히트맵 만들기 금지

     * 히트맵은 행과 열의 순서를 고려하여 효과적으로 만들어야 함.
     * 클러스터링을 통해 행과 열을 재배열할 수 있으나, 이것이 유일한 방법은 아님.

이상치를 확인하지 않고 히트맵 만들기 금지

     * 히트맵에서 이상치를 확인하지 않으면 데이터의 해석에 큰 영향을 줄 수 있음.

각 요인 수준에서 데이터 범위 확인을 잊지 말 것

     * 다중 요인 실험에서 응답 변수의 범위가 요인 수준에 따라 크게 달라질 수 있음.

다양한 레이아웃 시도 없이 네트워크 그래프 만들기 금지

     * 네트워크 그래프의 외형은 그 효과성을 결정짓는 중요한 요소임.
     * 레이아웃 변경을 통해 네트워크 그래프의 해석을 용이하게 할 수 있음.

위치 기반 시각화와 길이 기반 시각화 혼동 금지

     * 위치 기반 시각화와 길이 기반 시각화를 혼동하면 오해를 불러일으킬 수 있음.
     * 막대 그래프에서 0 기반으로 하지 않는 것은 데이터 시각화에서 큰 실수임.

파이 차트 만들기 금지

     * 파이 차트는 각도와 면적을 읽는 데 인간이 능숙하지 않기 때문에 비판받음.
     * 데이터를 길이로 표현하고자 한다면, 도넛 차트를 풀어서 쌓은 막대 그래프를 만드는 것이 더 낫음.

동심원 도넛 차트 만들기 금지

     * 동심원 도넛 차트는 외부 링의 호 길이가 내부 링보다 훨씬 길기 때문에 데이터를 잘못 표현할 수 있음.
     * 간단하고 효과적인 대안은 도넛 차트를 풀어서 쌓은 막대 그래프를 만드는 것임.

빨강/녹색 및 무지개 색상 척도 사용 금지

     * 적록색맹을 고려하여 색맹 친화적이고 회색조에서도 정보를 잘 보존하는 색상 척도를 사용해야 함.

쌓은 막대 그래프 재배열을 잊지 말 것

     * 많은 샘플과 클래스가 있는 경우, 쌓은 막대 그래프의 순서를 최적화하여 효과적으로 만들어야 함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 데이터 시각화를 할 때 흔히 저지르는 실수들과 그것들을 피하는 방법에 대한 인식을 높이는 것임. 데이터 시각화는 복잡한 정보를 이해하기 쉽게 전달하는 강력한 도구이지만, 잘못 사용되면 오해를 불러일으킬 수 있음. 이 글은 데이터를 정확하고 명확하게 전달하고자 하는 모든 이들에게 흥미롭고 유익한 지침을 제공함.

   글 제목이 재미나네요. 원본글을 보시면 샘플 그래프가 같이 나와있어서 보기 편합니다.

        Hacker News 의견

     * 일부 그래프들은 데이터 포인트의 부족이나 의심스러운 분포를 숨기기 위해 의도적으로 선택될 수 있음을 나타내는 의견.
     * 히트맵에서 이상치를 최대로 설정하지 않는 것은 비디오 게임 통계 시각화에서 흔한 문제로, 실제 온도 문제를 진단하는 데 거의 쓸모없는 경우가 많음.
     * 그래프의 축이 0부터 시작하지 않는다고 해서 반드시 오해의 소지가 있는 것은 아니며, 이러한 주장에 대해 실망한 경험을 공유하는 의견.
     * 데이터 시각화에서 흔히 발생하는 실수에 대한 좋은 개요로, 동료들과 공유하고 싶다는 의견과 함께 인간 인식에 관한 연구를 바탕으로 한 자료 추천.
     * 데이터 시각화에 대한 추가적인 참고 자료로 1983년에 출판된 에드워드 투프트의 ""The Visual Display of Quantitative Information"" 추천.
     * 데이터 시각화의 많은 교훈이 새로운 것이 아니며, 1939년에 출판된 윌라드 C. 브린턴의 ""Graphic presentation""을 참고할 것을 제안하는 의견.
     * 단방향 데이터에 양방향 색상 스케일을 사용하지 말 것을 권장하는 ""친구들은 친구에게 양방향 색상 스케일 사용을 허락하지 않는다""는 조언.
     * 바이올린 플롯에 대한 부정적인 견해와 함께, 바이올린 플롯이 존재하지 않아야 한다는 내용의 비디오 링크 공유.
     * 데이터를 보는 인간의 방식에 대한 연구를 바탕으로 한 여러 아이디어를 통합한 강연 ""How Humans See Data""에 대한 소개.
     * 데이터 유형을 분류하고 각 유형에 가장 적합한 그래프/차트 스타일을 선택하는 방법을 설명하는 가이드에 대한 언급과 그 가이드를 북마크하지 않은 것에 대한 아쉬움을 표현하는 의견.
"
"https://news.hada.io/topic?id=12070","Kubecon NA 2023 참석 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Kubecon NA 2023 참석 후기
"
"https://news.hada.io/topic?id=11971","Stable Video Diffusion 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Stable Video Diffusion 출시

     * Stable Video Diffusion 은 이미지 모델인 Stable Diffusion 을 기반으로 한 첫 번째 생성 비디오 모델
     * 연구용 프리뷰로 제공되며, 이 최신 생성 AI 비디오 모델은 다양한 유형의 모델을 만드는 여정에서 중요한 단계
     * 코드는 GitHub 저장소에서, 모델을 로컬에서 실행하는 데 필요한 가중치는 Hugging Face 페이지에서 확인 가능

다양한 비디오 응용 프로그램에 적용 가능

     * 비디오 모델은 단일 이미지에서 다중 시점 합성을 포함한 다양한 다운스트림 작업에 쉽게 적용 가능
     * Stable Diffusion 주변에 구축된 생태계와 유사하게, 이 기반 위에 구축하고 확장하는 다양한 모델 계획 중
     * 텍스트-투-비디오 인터페이스를 특징으로 하는 새로운 웹 경험에 대한 Waitlist에 오늘부터 등록 가능

성능에서 경쟁력 있음

     * Stable Video Diffusio은 초당 3~30 프레임 사이에서 사용자 정의 가능한 프레임 속도로 14개와 25개의 프레임을 생성할 수 있는 두 개의 이미지-투-비디오 모델로 출시
     * 기초적인 형태로 출시될 당시, 외부 평가를 통해 이 모델들이 사용자 선호도 연구에서 선도적인 폐쇄 모델을 능가하는 것으로 나타남

연구 전용

     * 최신 발전 사항으로 모델을 업데이트하고 피드백을 통합하는 것에 열정적이지만, 현재 단계에서는 실제 세계나 상업적 응용 프로그램을 위한 것이 아님을 강조
     * 안전성과 품질에 대한 통찰력과 피드백이 모델을 최종 출시를 위해 정제하는 데 중요

AI 모델의 지속적인 확장

     * Stable Video Diffusio은 이미지, 언어, 오디오, 3D, 코드를 포함한 다양한 모달리티를 아우르는 오픈 소스 모델의 다양한 범위에 자랑스러운 추가
     * Stability AI의 인간 지능 증폭에 대한 헌신을 증명하는 포트폴리오.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 안정적 비디오 확산 모델의 출시로, 이는 AI 기술의 발전을 보여주며 다양한 분야에서의 적용 가능성을 열어줌.
     * 연구자들과 개발자들에게 새로운 도구를 제공하고, 창의적인 비디오 생성을 가능하게 하는 이 기술은 광고, 교육, 엔터테인먼트 등 여러 분야에서 흥미로운 응용을 기대하게 함.

   LLM에 Stable Diffusion Moment가 오고 있다

   이 Stable Diffusion Moment가 이제 Video 에도 오게 될까요? 확실히 요즘 해외 AI 스타트업중에서 돈이 몰리는 곳은 비디오쪽이 맞긴 한듯

        Hacker News 의견

     * 비디오 페이지 하단에서 두 마리의 새(파랑새)가 나오는데, 배경에는 CN 타워처럼 보이는 두 개의 동일한 건물이 있다. CN 타워는 토론토의 주요 랜드마크이며, 토론토의 야구팀은 파랑새(Blue Jays)라는 이름을 가지고 있다. 이 타워는 도심의 주요 스포츠 경기장 근처에 위치해 있다. 텍스트에서 이미지로 변환하는 방식을 대략 이해하고 있으며, ""파랑새""가 ""토론토""나 ""CN 타워""와 가까운 벡터 공간에 있을 것이라는 것이 이치에 맞는다고 생각한다. 이미지에서 비디오로의 규모와 속도 향상은 인상적이지만, 이미지 생성 모델이 얼마나 능력이 있는지를 볼 때, 편집이나 반복 작업 능력의 부재로 인해 제한적이라는 느낌을 받는다. 예를 들어 ""사진 속 자전거를 왼쪽으로 옮겨라""와 같은 프롬프트를 사용하여 모델이 반복 작업을 수행할 수 있는 솔루션이 있는지
       궁금하다. 이 분야는 매우 빠르게 발전하고 있다고 느낀다.
     * 지난해 기계학습 분야의 발전 속도는 놀라울 정도였다. Controlnet이 비디오에 적절히 적용되면 사람들이 이 기술을 어떻게 활용할지 기대된다. 비디오를 처음부터 생성하는 것도 멋지지만, 이 기술의 진정한 유용성은 시간적 일관성에 있다. 안정적인 비디오를 얻기 위해 일반적으로 많은 수동 후처리가 필요하다.
     * ""비상업적"" 모델 라이선스가 어떻게 집행될 수 있는지 여전히 의문이다. 소프트웨어 라이선스는 소프트웨어의 재배포를 규제하지만, 그것으로 생성된 제품을 규제하지는 않는다. 예를 들어, GIMP로 생성된 이미지가 GPL 라이선스를 받는 것은 아니다.
     * 이 분야는 매우 빠르게 움직인다. 눈 깜짝할 사이에 새로운 논문이 나온다. 인간의 학습 속도가 놀랍다. 하류 작업(downstream tasks)에 이를 사용하는 것이 매우 흥미롭다. 이 모델과 animatediff를 통합하는 것이 얼마나 쉬운지 궁금하다. 또한, m3 장치에서 벤치마크를 수행할 수 있는지, 이러한 확산 추론과 개발을 실행하기 위해 m3 pro를 사용하는 것이 가치가 있는지 알고 싶다.
     * 기술적 진보에 대한 매혹적인 도약. 조상 샘플러(ancestral samplers)와 비조상 샘플러(non-ancestral samplers)의 차이점을 생각하게 한다. 예를 들어, Euler 방식은 다소 결정론적이며 샘플링 단계가 증가해도 출력이 변하지 않지만, Euler Ancestral 방식은 각 단계에 노이즈를 추가하여 더 많은 다양성을 생성하지만 더 무작위적/확률적이다. 비디오를 생성하기 위해서는 샘플러가 이전 프레임에 크게 의존하면서 일종의 부 프롬프트(sub-prompt)를 주입해야 한다고 생각한다. 예를 들어, ""특정 객체를 왼쪽으로 5도 회전시켜라"" 등이다. 다른 댓글 작성자가 사용한 ""시간적 일관성(temporal consistency)""이라는 표현이 마음에 든다.
     * 훈련 데이터에서 모든 컷과 페이드를 제거해야 결과를 개선할 수 있다는 것은 이치에 맞는다. 연구 논문의 배경 섹션에서 ""시간적 컨볼루션 레이어(temporal convolution layers)""에 대해 언급하는데, 이것이 무엇인지 설명해 줄 수 있는 사람이 있는지? 비디오를 구성하는 이미지들 사이의 시간적 상태를 나타내기 위해 어떤 종류의 훈련 데이터가 입력되는지, 아니면 다른 의미인지 궁금하다.
     * 매우 멋진 발전이다. 몇 달 전에 Replicate에서 몇 가지 ""비디오"" 생성 모델을 사용해 보았는데, 매우 멋진 결과를 얻었지만, 결과적으로 나온 비디오들은 이전 프레임을 프롬프트로 사용하여 만들어진 것이 분명했다. 이 기술은 실제로 더 높은 수준의 맥락을 가진 것을 만들어낼 수 있는 것처럼 보인다. 겨우 반년 조금 넘는 시간 동안 이러한 진보 수준을 보는 것은 놀랍다.
     * Stability.ai에게 이사회가 합리적인지 확인해 달라고 부탁한다.
     * 이 기술을 사용해 보는 것이 매우 기대된다. 최근에 진행한 몇 가지 실험들을 소개한다.
     * 정적 이미지와 마찬가지로, 미묘한 의도하지 않은 결함들을 관찰하는 것은 매우 흥미롭다. 예를 들어, 카우보이 모자를 쓴 남자는 거의 질식하는 것처럼 보이고, 기차 비디오에서는 기차가 빙판 위를 스케이트 타듯이 이동하는 동안 철로가 너무 넓어 보인다.
"
"https://news.hada.io/topic?id=12074","MeshGPT: 디코더 전용 트랜스포머를 이용한 삼각형 메시 생성 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                MeshGPT: 디코더 전용 트랜스포머를 이용한 삼각형 메시 생성 기술

MeshGPT: 삼각형 메시 생성을 위한 디코더 전용 트랜스포머

     * MeshGPT는 학습된 기하학적 어휘로부터 토큰을 생성하는 트랜스포머 모델을 자동 회귀적으로 샘플링하여 삼각형 메시를 생성함.
     * 이 토큰들은 삼각형 메시의 면으로 디코드될 수 있으며, 생성된 메시는 깨끗하고 일관성 있으며, 날카로운 모서리와 높은 충실도를 특징으로 함.

요약

     * MeshGPT는 아티스트가 만든 메시의 특징인 컴팩트함을 반영하는 새로운 삼각형 메시 생성 방법으로, 신경망 필드에서 추출된 밀집 삼각형 메시와 대비됨.
     * 강력한 대규모 언어 모델의 최근 발전에 영감을 받아, 삼각형의 시퀀스로 삼각형 메시를 자동 회귀적으로 생성하는 시퀀스 기반 접근법을 채택함.
     * 먼저 그래프 컨볼루션을 사용하여 잠재적으로 양자화된 임베딩의 어휘를 학습하고, 이 임베딩들은 메시를 효과적으로 재구성할 수 있도록 디코더에 의해 시퀀스화되고 삼각형으로 디코드됨.

비디오 비교 및 기타 응용

     * MeshGPT의 접근법은 날카로운 기하학적 세부 사항을 가진 컴팩트한 메시를 생성하며, 기존 방법들은 이러한 세부 사항을 놓치거나 과도하게 삼각형화된 메시를 생성하거나 너무 단순한 형태를 출력하는 경향이 있음.
     * 부분적인 메시가 주어졌을 때, 이 방법은 여러 가능한 형태 완성을 추론할 수 있음.
     * 이 방법은 장면에 대한 3D 자산을 생성하는 데 사용될 수 있으며, 여기서는 이 방법을 사용하여 생성된 자산으로 채워진 방을 보여줌.

방법 개요

     * 삼각형 메시에 대한 어휘를 먼저 학습한 후, 이를 사용하여 메시의 자동 회귀 생성을 수행함.
     * 다양한 형태의 컬렉션에서 기하학적 임베딩의 어휘를 학습하며, 이는 벡터 양자화가 있는 인코더-디코더 네트워크를 특징으로 함.
     * 완전히 훈련된 후, 이 트랜스포머는 학습된 어휘에서 토큰의 시퀀스로 메시를 직접 샘플링할 수 있게 해줌.

GN⁺의 의견

   MeshGPT는 기존의 메시 생성 방법들을 뛰어넘는 혁신적인 접근법을 제시함으로써, 형태 커버리지와 FID 점수에서 눈에 띄는 향상을 보여줌. 이 기술은 3D 모델링과 컴퓨터 그래픽스 분야에서 큰 발전을 의미하며, 특히 인간이 만든 메시의 효율적인 삼각화 패턴을 더욱 잘 모방하는 컴팩트하고 날카로운 모서리를 가진 메시를 직접 생성할 수 있는 능력 때문에 흥미롭다. 이러한 발전은 3D 콘텐츠 제작자들에게 새로운 도구를 제공하고, 더 나은 품질의 3D 자산을 더 빠르고 효율적으로 생성할 수 있는 가능성을 열어줌.

        Hacker News 의견

     * 혁명적인 아이디어의 모습을 보여주는 연구로, 페이퍼에 상세한 내용이 많이 포함되어 있음. 트랜스포머 모델이 확장 가능하다는 사실이 알려져 있으며, 이 아이디어는 많은 회사들이 일반적인 3D 자산 생성 파이프라인을 훈련하는 데 사용될 것으로 예상됨.

     ""우리는 먼저 그래프 컨볼루션을 사용하여 지역 메시 기하학과 토폴로지에 대한 정보를 포함하는 잠재적 양자화 임베딩의 어휘를 학습한다. 이 임베딩들은 시퀀스화되어 디코더에 의해 삼각형으로 디코드되며, 이를 통해 메시를 효과적으로 재구성할 수 있다.""
     * 기계 학습 엔지니어로서 Blender와 취미 게임 개발에 관심이 있는 사람에게 이 연구는 인상적이지만, 제한된 가구 예시에 대해서는 실용적인 방법으로 유용하지는 않음. 숙련된 모델러는 이러한 메시를 5분 이내에 만들 수 있으며, 여전히 생성을 위한 폴리곤이 필요함. 다음 단계는 LLM을 이용한 시드 생성 제어와 아키텍처의 자동회귀 부분에 이미지 모델을 추가하는 것일 것임. 그러면 진정으로 모바일 게임에 적합한 자산을 볼 수 있을 것임.
     * 3D/영화 제작이라는 직업을 가진 사람으로서 현재 상황이 매우 흥미롭고 무섭게 느껴짐.
     * 입력이 무엇인지 궁금함. ""의자""와 같은 텍스트 쿼리를 메시로 변환하는 것인가? 수정: 메시 완성이 주요 입력-출력 방법으로 보임, 단순한 기능이 아님.
     * 90년대 이후 큰 진전이 없었던 남아 있는 어려운 문제들이 트랜스포머를 통해 어떤 식으로든 해결될 것 같음. 살아있는 시대가 흥미로움.
     * 다음 혁신은 VR 앞에서 이러한 모델과 같은 3D 장면을 생성하는 UX가 될 것임. 이는 우리가 훈련 데이터를 가진 어떤 환경에 대해서도 영구적이고 임의의 3D 환경을 _생성_할 수 있게 해줄 것임. 확산 모델은 텍스처 생성에 사용될 수 있음.
     * 이것이 ""단지"" 메시 자동완성이라 하더라도 3D 아티스트에게 매우 유용함. 현재 캐릭터를 조각하는 방법과 애니메이션하는 방법 사이에는 괴리가 있음. 모델을 리토폴로지하는 데 시간이 많이 소요됨. 거친 메시를 가져와서 깨끗한 토폴로지를 제공하는 트랜스포머 기반 리토폴로지는 큰 시간 절약이 될 것임.
     * 이 분야를 사랑함. 논문에는 멋진 웹사이트, 예시, 비디오가 포함되어 있음. 밀도 높은 추상, 서론, 결과의 논문 스타일보다 훨씬 상쾌함.
     * 이 기술이 매우 좋아지고 있음! 여전히 이상한 가장자리가 있지만, 이제는 알고리즘적이거나 복잡한 문제보다는 '반복 세부사항'처럼 느껴짐. 모든 메시를 하나의 폴더에 넣고 네트워크를 훈련시킨 다음, 그 스타일로 다른 것을 요청할 수 있게 되면, 만들어진 것을 리토폴로지하거나 다른 창의적인 영향을 주지 않아도 될 것임. 물론, 완전히 그 지점에 도달할 때까지는 여전히 procgen이 더 나은 서비스를 제공하지만, 이 기술이 얼마나 빠르게 진행되고 있는지에 대해 매우 흥분됨! 내년 Unreal 쇼케이스에서 새로운 ""Asset Generator"" 기능에 대해 이야기할 수 있기를 바람.
     * 이 기술은 정말 멋져 보임! 인디 게임 개발자에게 많은 자산을 생성하는 데 엄청난 도움이 될 것으로 보임.
"
"https://news.hada.io/topic?id=12058","폰트 제작폰트 제작

폰트 제작 경험 공유

     * 폰트 제작을 처음 시도한 저자는 자신의 만화 'hakum'에 사용하기 위해 디지털 펜 태블릿으로 글씨를 그리는 대신 자신의 손글씨를 기반으로 한 폰트를 만들기로 결정함.
     * 목표는 웹 출판에 사용할 TTF(TrueType Font) 폰트를 만드는 것이었으며, 굵은 글씨나 이탤릭체는 포함하지 않는 제한된 문자 세트를 가짐.

폰트 제작 과정

     * 폰트의 첫 번째 버전은 디지털 손글씨를 기반으로 했고, 두 번째 버전은 스캔한 손글씨 이미지에서 제작함.
     * 폰트 제작 과정에서 배운 타입페이스의 해부학적 용어들(Ascender, Baseline, Cap Height, Descender, X-Height)을 이해하고 적용함.
     * 손글씨 폰트 제작을 위해 대문자(A-Z), 소문자(a-z), 숫자(0-9), 기본 구두점을 포함하여 스케치북에 기준선을 그리고 글자를 작성함.

FontForge 사용

     * 폰트 제작 소프트웨어 FontForge를 선택하고, 프로젝트를 생성한 후 글리프를 개별적으로 가져와서 디지털로 수정함.
     * 글리프를 가져오기 위해 Gimp에서 이미지를 편집하고 PNG로 내보낸 후 FontForge로 가져옴.
     * 글리프의 왼쪽과 오른쪽 여백을 조정하고, 필요한 경우 Autotrace 기능을 사용하여 글리프의 윤곽을 생성함.

커닝 조정

     * 커닝은 글자 간의 간격을 조정하는 과정으로, FontForge에서 'Pair Position (Kerning)'을 선택하여 글자 쌍 간의 간격을 조정함.

폰트 테스트 및 내보내기 문제

     * FontForge에서 폰트와 커닝을 테스트하고, 폰트를 내보낼 때 발생할 수 있는 문제들(비정수 좌표, 극단점에서의 누락된 점, 자기 교차)을 해결함.

폰트 유형 선택

     * 웹 출판용으로 TTF 폰트가 적합하다고 판단하고, OTF와 같은 복잡한 폰트 유형은 필요하지 않다고 결정함.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 폰트 제작이 복잡한 과정이지만, 초보자도 접근할 수 있고, 자신만의 폰트를 만들 수 있다는 점임.
     * 폰트 제작 과정을 단계별로 설명하고, 실제 사용 예를 보여주며, 독자들이 자신의 프로젝트에 적용할 수 있는 통찰력을 제공하는 것이 흥미롭다.

        Hacker News 의견

     * FontForge에 대한 좋은 개요. 나도 한 번 사용해봤다. 조금 불편하지만, 상업적인 경쟁 제품들이 훨씬 낫다고는 생각하지 않는다. 이름조차 모른다.
          + FontForge에 대한 긍정적인 평가와 개인적인 경험 공유. 상업적 대안에 대한 의심 표현.
     * 100r.co를 추천한다. Devine과 Rekka가 그들의 요트, Pino에서 스튜디오를 운영하며 생활, 여행, 프로젝트를 기록한다.
          + 독특한 라이프스타일을 가진 스튜디오 웹사이트 추천.
     * FontForge에 대한 멋진 요약. 기사에서 암시된 것처럼, 손글씨에서 폰트를 만드는 데는 더 쉽고 자동화된 옵션이 있다.
          + 손글씨 폰트 제작을 위한 자동화된 도구 소개 및 FontForge의 대안 제시.
     * 여러 폰트를 하나로 합치는 가장 간단한 방법은 무엇인가? VS Code는 언어나 토큰별로 폰트를 지원하지 않는다.
          + 폰트 합치기에 대한 질문과 VS Code의 폰트 설정 한계 표현.
     * 네가 만든 폰트가 내가 만든 폰트와 많이 닮았다. 최적화를 많이 하지는 않았지만, 시도한 모든 소프트웨어가 무척 답답하고 사용하기 어려웠다.
          + 폰트 제작 경험 공유와 소프트웨어 사용의 어려움 표현.
     * 누군가 MetaFont/MetaPost를 사용해 폰트(서체)를 만드는가? FontForge에 스크립팅 기능이 있는가? 나는 사용해본 적은 없지만, Knuth의 ""computers and typesetting"" 책 5권을 읽었다.
          + MetaFont와 MetaPost 사용 경험 질문과 FontForge의 기능에 대한 호기심 표현.
     * 여우가 개를 뛰어넘는 것이지, 그 반대는 아니라는 것을 말하고 싶었다. 개는 게으르고 여우는 빠르니까.
          + 유명한 타자 연습 문장에 대한 재치 있는 지적.
     * 폰트 스펙에 무작위 생성기 매개변수가 포함되어 진정한 수기체 폰트가 가능할지 궁금하다.
          + 폰트의 무작위성을 통한 수기체 표현에 대한 관심 표현.
     * 블로그 포스트 자체에 자신이 만든 폰트를 사용하지 않은 것은 놓친 기회다!
          + 블로그 포스트와 폰트의 일관성 부재에 대한 의견.
     * 80년대부터 폰트를 좋아했고, 디자인이 중요하다는 것을 깨닫게 해준 첫 번째 요소 중 하나였다. 멋진 폰트와 훌륭한 개요다.
          + 폰트에 대한 애정과 디자인의 중요성 인식, 글쓴이의 폰트 제작에 대한 칭찬.
"
"https://news.hada.io/topic?id=11955","유튜브, 파이어폭스 사용 시 비디오 로딩 속도 저하","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      유튜브, 파이어폭스 사용 시 비디오 로딩 속도 저하

요약: YouTube의 Firefox 사용자에 대한 비공정 행위

     * YouTube가 Firefox 사용자의 비디오 로딩 시간을 인위적으로 느리게 만듦.
     * Chrome으로 사용자 에이전트를 속이면 문제가 해결됨.
     * 이는 EU 반독점 법 위반으로 간주될 수 있음.
     * Google의 ""Web Integrity API"" 계획에 대한 우려 표명.
     * YouTube의 이러한 행위는 경쟁을 방해하고 독점을 유지하기 위한 것으로 비판받음.
     * YouTube의 클라이언트 자바스크립트에는 Firefox 사용자를 5초간 대기시키는 코드가 명시적으로 존재함.
     * 이 문제는 uBlock Origin 팀이 제공하는 필터를 적용하여 해결할 수 있음.
     * YouTube는 과거에도 유사한 비공정 행위를 한 적이 있음.
     * YouTube의 행위는 법적 조치를 받을 수 있으며, 많은 사용자와 법률가들이 이에 대한 조치를 촉구함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 YouTube가 Firefox 사용자에 대한 비공정 행위를 하고 있으며, 이것이 반독점 법을 위반할 수 있다는 점입니다. 이러한 행위는 기술 산업에서의 경쟁을 방해하고 사용자 경험을 저하시키는 것으로, 많은 사람들이 YouTube의 독점적 지위에 대해 우려하고 있습니다. 이 글은 기술적인 문제를 넘어서 법적, 윤리적 문제를 다루고 있으며, 이는 많은 사람들에게 흥미롭고 중요한 이슈입니다.

   상황이 재현된다는 사람도 있고 아닌사람도 있어서 뭔가 갑론을박이 많은데요.

   uBO 팀이 해당 문제를 해결하는 필터를 올리기도 했습니다.
www.youtube.com##+js(nano-stb, resolve(1), 5000, 0.001)

        Hacker News 의견

     * 레딧 토론에서 언급된 YouTube의 Polymer 스크립트 링크에는 5초 동안 아무 일도 하지 않고 사용자를 기다리게 하는 코드가 있음. 이 코드는 setTimeout 함수를 사용하여 5초 후에 특정 작업을 실행하도록 설정되어 있음.
     * 브라우저 개발자 도구의 성능 프로파일러를 사용하면 YouTube에 5초 지연 setTimeout이 있는지 확인할 수 있음. 하지만, 사용자 에이전트에 따라 브라우저 기술을 전환하는 것이 더 가능성이 높음.
     * 터미널에 익숙한 사용자는 YouTube 웹 UI의 불편함을 겪지 않아도 됨. mpv와 yt-dlp를 설치하여 비디오를 재생할 수 있음.
     * YouTube는 비디오 품질 아이콘에 ""4K""를 표시하지만 실제로는 720p 또는 그 이하 품질의 스트림을 재생함. 사용자가 수동으로 4K 스트림 품질을 선택하면 YouTube가 4K를 제공함.
     * Google이 다른 브라우저를 느리게 만들고자 한다면, 이렇게 쉽게 발견될 수 있는 방법을 사용하지 않았을 것임. 사용자 에이전트에 따라 자바스크립트 파일의 제공 속도를 늦추는 것과 같은 방법이 더 가능성이 높음.
     * Firefox를 사용하는 경우 YouTube가 ""즉시"" 시작되며, UI의 대부분이 로드되기도 전에 비디오가 재생됨. 확실히 1초 미만임.
     * Google은 Firefox Mobile에서 비즈니스 정보에 대한 접근 방식을 수정함. Firefox Mobile에서 리뷰를 쉽게 읽을 수 없음.
     * Firefox 사용자로서 Google 사이트에서만 지속적으로 문제를 겪음. Google Maps, Gmail 채팅, Google Meet, YouTube 등을 사용하기 위해 Chrome 창을 따로 열어둠. Google이 Firefox 지원을 우선순위에 두지 않는 것은 분명함.
     * 토론에서 가장 흥미로운 부분은 이러한 조치가 Chrome을 모방함으로써 쉽게 피할 수 있는 가장 기본적인 방법으로 구현되었다는 점임. 이는 이러한 작업에 불만을 가진 엔지니어들이 있을 수 있음을 시사함.
     * Firefox 120에서는 해당 지연 현상이 발생하지 않음. 로그아웃 상태에서도 시도해봄. 언급된 코드는 동시성 버그를 해결하기 위한 게으른 방법으로 보임.
"
"https://news.hada.io/topic?id=11985","FBI 국장, NSA 자료 활용 시 거의 확실한 증거가 없음을 인정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FBI 국장, NSA 자료 활용 시 거의 확실한 증거가 없음을 인정

        Hacker News 의견

     * 법원의 영장 요구가 사실상 금지가 될 것이라는 의견에 대해, 한 사용자는 사회에 좋은 영향을 미칠 것이라고 희망함.
     * FBI/NSA/CIA의 진정성에 의문을 제기하며, 긴급 상황에서 대통령 사면을 계획하며 행동해야 한다는 주장이 있음.
     * 미국 시민들이 헌법을 위반하는 정부 관리들을 조사하고 기소하는 법 집행 기관을 가질 수 있다는 상상에 대한 언급이 있음.
     * 첫 번째 댓글(익명의 겁쟁이)이 뛰어나다고 평가하며, FBI가 항상 합리적인 이유를 가지고 있다는 주장에 대한 비판적인 시각을 보여줌.
     * FBI가 시민을 감시할 권리가 있다면, 시민도 FBI 요원과 그의 가족을 감시할 권리가 있어야 한다는 의견이 있음.
     * FBI가 '건초더미에서 바늘 찾기' 문제에 직면해 있다고 말하며, 의회가 더 많은 건초를 제공해야 한다고 요구하는 상황에 대한 비판이 있음.
     * FBI가 다른 정부 부서가 이미 합법적으로 수집한 정보를 영장 없이 볼 수 있는지에 대한 오해가 있다는 지적이 있음.
     * IT 전문가들에게는 효율성, 프라이버시, 법적 요구 사항을 모두 충족하는 해결책을 찾는 것이 중요한 문제임.
     * FBI가 절대 그런 일을 하지 않을 것이라고 여러 번 경고받았지만, 이해할 수 없는 상황에 대한 댓글이 있음.
     * 영장이 필요하다면 아마도 그 이유를 충분히 제시하지 못할 것이라는 주장이 사실상 이 프로그램이 위헌이라는 것을 시인하는 것이라는 의견이 있음.
"
"https://news.hada.io/topic?id=12004","AI 마케팅 2024: 핵심 트렌드와 도구들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AI 마케팅 2024: 핵심 트렌드와 도구들

     * 인공지능은 디지털 마케팅 분야에서 게임 체인저로 부상
     * 2024년 AI 마케팅 도구는 예측 분석, 개인화된 고객 경험 등을 제공하며, 마케터들은 AI 도구와 트렌드를 이해하여 경쟁 시장에서 앞서 나갈 필요가 있음

AI 마케팅 도구 및 트렌드 2024: 주목할 만한 모든 것

  1. Rapidely

     * 자동화 및 고급 분석을 통해 비즈니스 효율성을 향상시키는 AI 도구
     * 데이터 분석, 워크플로우 최적화, 신속한 데이터 기반 의사 결정 지원 기능 제공
     * 사용자 친화적 인터페이스로 기술적 배경이 다양한 사용자들이 접근 가능함

  2. Flick

     * 소셜 미디어 관리 플랫폼으로, 해시태그 검색 및 관리, 콘텐츠 스케줄링, 성능 분석 기능을 제공
     * Instagram과 같은 플랫폼에서 온라인 존재감 강화를 위한 도구 제공

  3. Phrasee

     * 다양한 디지털 채널에서 고성능 마케팅 메시지를 생성하는 AI 콘텐츠 생성 플랫폼
     * 브랜드의 독특한 목소리를 이해하고 최적화된 메시지를 전달함

  4. Smartwriter.ai

     * AI를 활용하여 개인화된 이메일을 대량으로 생성하고, 이메일 아웃리치 및 콘텐츠 개인화에 혁신을 가져옴

  5. Optimove

     * 고객 중심의 마케팅 플랫폼으로, 데이터 중심의 개인화된 마케팅 캠페인을 통해 고객 생애 가치를 극대화함

  6. Acrolinx

     * 다양한 비즈니스 기능에 걸쳐 콘텐츠 품질을 향상시키는 AI 플랫폼
     * 통합된 AI 콘텐츠 생성으로 편집 효율성을 크게 향상시킴

  7. Jasper

     * 기업과 개인 창작자가 다양한 형식의 고품질 콘텐츠를 생성하는 데 도움을 주는 AI 카피라이팅 도구

  8. Evolv AI

     * 디지털 경험을 위한 실험 과정을 자동화하고 향상시키는 AI 주도의 최적화 플랫폼

  9. Copy.ai

     * 전문가와 팀이 빠르고 효율적으로 고품질의 콘텐츠를 생성하는 데 도움을 주는 AI 플랫폼

  10. Scalenut

     * 검색 엔진 최적화를 위한 콘텐츠 생성 및 최적화를 지원하는 AI SEO 플랫폼

  11. Anyword

     * 다양한 플랫폼 및 형식에 걸쳐 마케팅 복사본을 최적화하는 AI 카피라이팅 도구

  12. INK

     * 사용자가 SEO에 완벽하게 최적화된 콘텐츠를 더 효율적으로 생성할 수 있도록 돕는 AI 콘텐츠 최적화 플랫폼

  13. Seventh Sense

     * 이메일 캠페인의 성능과 참여도를 향상시키기 위해 설계된 AI 이메일 마케팅 최적화 도구

  14. InstaText

     * 텍스트의 질을 향상시키고, 더 매력적이고 이해하기 쉽게 만드는 AI 글쓰기 및 편집 도구

  15. Chatfuel

     * WhatsApp에서 전자 상거래를 향상시키기 위해 설계된 메시징 플랫폼

  16. Brand24

     * 브랜드 명성을 모니터링하고, 브랜드 인지도를 측정하며, 경쟁사를 분석하고, 고객 통찰력을 발견하는 데 도움을 주는 AI 소셜 청취 도구

  17. Surfer

     * 콘텐츠 제작자가 검색 엔진 순위를 높이기 위해 콘텐츠를 최적화하는 데 도움을 주는 최첨단 SEO 도구

  18. Frase

     * SEO 콘텐츠 워크플로우를 빠르고 효율적으로 만들어 키워드에서 최종 초안까지 시간을 절약하고 콘텐츠 품질을 향상시키는 AI 콘텐츠 생성 및 최적화 플랫폼

  19. Smartly.io

     * 미디어 구매, 크리에이티브 자동화, 보고 및 최적화를 향상시키는 AI를 활용하는 고급 광고 플랫폼

  20. Writesonic

     * 글쓰기, 오디오 생성, 이미지 제작, 챗봇 개발을 위한 도구 제공하는 AI 콘텐츠 생성 플랫폼

  21. Alli AI

     * SEO 작업을 자동화하여 SEO 전략의 효율성을 향상시키는 SEO 자동화 도구

  22. WriterZen

     * SEO 목적으로 콘텐츠 생성 과정을 간소화하는 올인원 콘텐츠 솔루션

  23. Tweet Hunter

     * Twitter/X 사용자가 효율적으로 청중을 성장시키고 수익을 창출할 수 있도록 돕는 종합 도구

  24. Ellie.ai

     * 데이터 제품을 만드는 과정을 간소화하고, 비즈니스 가치가 있는 데이터 제품을 만드는 데 도움을 주는 데이터 모델링 및 설계 플랫폼

  25. Robin AI

     * 인공지능을 사용하여 계약 검토 및 생성 과정을 향상시키는 도구

  26. Quicklines

     * LinkedIn 프로필에서 데이터를 수집하여 개인화된 첫 줄을 대규모로 생성하는 AI 도구

  27. iContact

     * 소규모 비즈니스가 효과적인 커뮤니케이션을 통해 리드와 매출을 증대시키는 데 도움을 주는 이메일 마케팅 플랫폼

  28. Unspam.email

     * 마케팅 이메일이 의도한 수신함에 도달하도록 이메일 전달성을 향상시키는 도구

  29. ConvertKit

     * 이메일 캠페인, 자동화 및 디지털 제품 판매를 통해 청중을 성장시키고 수익화하는 데 도움을 주는 이메일 마케팅 플랫폼

   뒷 부분이 짤린거 같아서 정리해보려고 했는데, 생각보다 남은게 많네요;;;;
"
"https://news.hada.io/topic?id=11983","오픈AI 합류 전, 멘토에 의해 Y Combinator에서 해고된 샘 알트만","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               오픈AI 합류 전, 멘토에 의해 Y Combinator에서 해고된 샘 알트만

샘 알트만의 과거와 OpenAI 이사회의 해임 결정

     * 샘 알트만이 OpenAI의 CEO로 복귀하기 전, 그의 멘토인 Y Combinator 창립자 폴 그레이엄에 의해 해임된 전례가 있음
     * 그레이엄은 알트만이 자신의 이익을 조직의 이익보다 앞세웠다는 우려를 가지고 있었으며, 이는 OpenAI 이사회의 우려와도 일치함
     * 알트만은 자신의 이익을 우선시하는 경향과 결석이 잦아 동료들과 스타트업들의 불만을 샀음
     * 알트만은 개인적 우선순위를 공식 업무보다 높게 취급하고, 자신이 설립한 펀드를 통해 Y Combinator를 통해 발견한 스타트업에 개인적으로 투자하는 등의 행동으로 비판을 받음
     * OpenAI 이사회는 알트만이 권력에 대한 견제를 피하려는 태도를 보여 해임했다는 의견이 있음

OpenAI 이사회의 결정 과정

     * OpenAI 이사회의 결정은 알트만이 회사에서의 권력에 대한 어떠한 제약도 피하려 했다는 우려에 기반을 둠.
     * 이사회는 알트만이 활동에 대한 의미 있는 감독을 약속하는 그룹에 동의한다면 그를 CEO로 복귀시키는 것에 대해 개방적이었음.

OpenAI의 이사회 구성원과 주요 인물들

     * 샘 알트만은 OpenAI의 공동 창립자로서 해고되었으나, 나중에 CEO로 복귀함.
     * 사티아 나델라는 알트만이 OpenAI를 떠날 경우 Microsoft의 새로운 AI 연구소의 책임자로 고용할 의향이 있음.
     * 에멧 쉬어는 알트만과 미라 무라티를 대신해 OpenAI의 임시 CEO로 임명됨.
     * 헬렌 토너는 알트만을 해고하기로 투표한 OpenAI 이사회의 네 명 중 한 명임.
     * 일리야 수츠크버는 OpenAI의 최고 과학자이자 알트만을 해고한 이사회 멤버임.
     * 그렉 브록맨은 알트만이 해고될 때 연대하여 사임함.
     * 케빈 스콧은 OpenAI 직원들에게 알트만의 해고에 반대하여 회사를 떠나기로 결정한다면 모두 고용할 것이라고 말함.
     * 미라 무라티는 알트만이 회사로 돌아오도록 노력을 지지함.
     * 비노드 코슬라는 알트만의 해고에 반대하는 목소리를 냄.
     * 타샤 맥콜리는 OpenAI 이사회 멤버이자 영국 싱크탱크인 AI 거버넌스 센터의 이사회에도 속함.
     * 아담 디안젤로는 OpenAI 이사회 멤버로 알트만을 해고하기로 투표함.

알트만의 복귀 협상과 이사회 구성

     * 알트만은 이사회가 제안한 후보들 중 일부와의 대화를 거부하며 자신에게 유리한 이사회 구성을 원함.
     * 결국 알트만은 이사회에 참여하지 않고, 아담 디안젤로를 유지하는 조건으로 CEO로 복귀하는 데 동의함.

OpenAI의 이사회 드라마와 샘 알트만의 인물 평가, 그리고 실리콘 밸리 문화

     * OpenAI의 이사회 드라마는 소셜 미디어에서 펼쳐진 첫 번째 사례로, 실리콘 밸리의 문화와 충돌하는 알트만의 행동이 드러남.
     * 알트만은 뛰어난 자금 모금가, 협상가, 리더로서의 자질을 가지고 있으나, 때로는 실리콘 밸리의 진취적 문화에도 너무 기회주의적이라는 인식으로 인해 동맹들을 소외시킴.
     * 알트만의 성공과 야망은 부러움을 사기도 하며, 실리콘 밸리의 개인 네트워크 중심 문화를 반영하며, 개인적 네트워크와 인물 숭배가 강한 관리 체계를 대신하는 경우가 많음.
     * 일부 전 동료들은 알트만이 개인적인 권력을 위해 조작적인 행동을 했다고 주장함.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 샘 알트만이 OpenAI의 CEO로서 해임되었다가 복귀한 과정과 그 배경에 대한 이해임.
     * 알트만의 경력과 행동 양식은 실리콘 밸리의 기업 문화와 리더십에 대한 흥미로운 통찰을 제공함.
     * 그의 복귀는 기술 산업 내에서의 권력 투쟁과 인물 중심의 네트워킹이 어떻게 중요한 역할을 하는지 보여주는 사례임.

        Hacker News 의견

     * Paul Graham의 트윗에서 Sam Altman이 특정 상황을 다루는 데 세계 최고라는 칭찬을 받음.
     * Jessica Livingston은 AI에 관심이 있어서가 아니라 Sam을 믿기 때문에 OpenAI의 창립 기부자가 되었으며, 이사회가 Sam과 Greg를 다시 데려오길 바람.
     * Paul Graham이 Sam Altman을 YCombinator에서 해고했다는 소식은 놀라움을 줌; 이 사실이 오랫동안 비밀로 남아있었다는 점이 의문.
     * Paul Graham이 여전히 YC 회사들에 개인적으로 투자하고 있기 때문에, Sam이 해고된 이유가 '이중 투자'라는 주장에는 신빙성이 없어 보임.
     * Sam이 OpenAI에 집중하고 있었기 때문에 해고되었을 가능성이 있으며, OpenAI 이사회가 해고 이유를 명확히 제시하지 못했다는 점이 언급됨.
     * Paul Graham이 Sam에 대해 긍정적인 의견을 가지고 있음에도 불구하고 해고했다는 것은 흥미로운 점으로, Sam이 전략적, 전술적으로 뛰어난 인물임을 시사함.
     * OpenAI 직원들의 충성도를 보면 Sam이 '관리하기 어려운' 유형이지만 '함께 일하기 어려운' 유형은 아닌 것으로 보임.
     * Jessica Livingston이 Sam을 믿기 때문에 OpenAI의 창립 기부자가 되었다고 트윗함.
     * OpenAI 직원들의 대다수가 Sam에 대한 불공정한 대우에 반대하며 Microsoft로 이동할 의사가 있음을 나타내는 Ron Conway의 발언.
     * Sam Altman이 이사회의 CEO 후보 명단을 만나길 원했지만, 윤리적 이유로 한 명을 제외하고 만나기로 함; 이에 대한 궁금증 제기.
     * 많은 사람들이 Sam에 대한 충성을 보이는 것은 그를 건너뛰는 것에 대한 두려움 때문일 수 있음을 시사하는 의견 제시.
"
"https://news.hada.io/topic?id=11949","[2023/11/13 ~ 11/19] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2023/11/13 ~ 11/19] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

  개요

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주에는 LLM(Large Language Models), 즉 대형 언어 모델들을 개선하고 확장하는 연구들이 주를 이루었습니다. 특히 LLM의 가성비 좋은 작동, 과학적 발견을 위한 활용, 그리고 실용적인 코드 생성을 위한 언어 모델들에 대한 논문들이 포함되어 있습니다. 뿐만 아니라 해당 모델들의 사실성을 높이기 위한 연구도 이루어지고 있는 추세로 보입니다.
     * 언어 모델, 특히 LLM들은 자연어 처리(NLP) 분야에서 각광받고 있습니다. 이는 모델들이 더욱더 인간처럼 복잡하고 다양한 언어적 작업을 처리할 수 있게 되었기 때문일 것입니다. 이러한 모델들은 체계적인 사고를 모방하거나(Contrastive CoT Prompting), 코드 개발에 있어서의 자동화 향상(A Survey on Language Models for Code) 등 다양한 영역에서 응용될 수 있습니다. 또한 LLM을 더욱 진화시키기 위한 방법들, 예를 들어 정확한 맥락 필터링을 통한 정보 검색 강화(Learning to Filter Context for RAG)나 사용자를 속이지 않는 방향의 연구(LLMs can Deceive Users) 역시 중요한 연구 동향입니다.


  Emu 비디오 및 Emu 편집 / Emu Video and Emu Edit

    논문 소개

     * 디퓨젼 모델을 기반으로 제어된 이미지 편집 및 텍스트-비디오 생성을 위한 새로운 모델을 제시합니다. 에뮤 비디오는 텍스트 전용, 이미지 전용 또는 텍스트와 이미지 입력을 결합하여 고품질 비디오를 생성할 수 있으며, 에뮤 편집은 텍스트 지침을 통해 자유 형식 편집을 가능하게 합니다.

     Present new models for controlled image editing and text-to-video generation based on diffusion models; emu video can generate high-quality video by using text-only, image-only, or combined text and image inputs; emu edit enables free-form editing through text instructions.

    논문 링크

   https://ai.meta.com/blog/…

    더 읽어보기

   https://x.com/AIatMeta/status/1725184026154349007


   ##CoN(Chain-of-Note): 검색 증강 언어 모델의 견고성 향상 / Chain-of-Note: Enhancing Robustness in Retrieval-Augmented Language Models

    논문 소개

     * 노이즈가 많고 관련성이 없는 문서와 알 수 없는 시나리오를 처리할 때 검색 증강 언어 모델의 견고성과 신뢰성을 향상시키는 접근 방식; 검색된 문서에 대한 순차적인 읽기 노트를 생성하여 주어진 질문과의 관련성을 평가하고 이 정보를 통합하여 최종 답변을 공식화할 수 있게 함; CoN은 표준 검색 증강 언어 모델을 크게 능가하며 완전히 노이즈가 없는 검색 문서에서 평균 +7.9의 EM 점수, 사전 학습 지식 범위를 벗어난 실시간 질문에 대한 거부율에서 +10.5를 달성했습니다.

     An approach to improve the robustness and reliability of retrieval-augmented language models in facing noisy, irrelevant documents and in handling unknown scenarios; con generates sequential reading notes for the retrieved documents, enabling an evaluation of their relevance to the given question and integrating this information to formulate the final answer; con significantly outperforms standard retrieval-augmented language models and achieves an average improvement of +7.9 in em score given entirely noisy retrieved documents and +10.5 in rejection rates for real-time questions that fall outside the pre-training knowledge scope.

    논문 초록

     * 검색 증강 언어 모델(RALM)은 대규모 언어 모델의 기능, 특히 외부 지식 소스를 활용하여 사실 착각을 줄이는 데 있어 상당한 발전을 이루었습니다. 그러나 검색된 정보의 신뢰성이 항상 보장되는 것은 아닙니다. 관련 없는 데이터를 검색하면 잘못된 응답이 나올 수 있으며, 쿼리를 해결할 수 있는 적절한 정보를 보유하고 있더라도 모델이 고유한 지식을 간과할 가능성이 있습니다. 또한 표준 RALM은 정확한 답변을 제공하기 위해 내재된 지식과 검색된 지식 모두에 대해 충분한 지식을 보유하고 있는지 평가하는 데 어려움을 겪는 경우가 많습니다. 지식이 부족한 상황에서 이러한 시스템은 답을 얻을 수 없는 경우 '알 수 없음'으로 응답하는 것이 이상적입니다. 이러한 과제에 대응하기 위해 노이즈가 많고 관련성이 없는 문서를 처리하고 알 수 없는
       시나리오를 처리할 때 RALM의 견고성을 개선하기 위한 새로운 접근 방식인 CoN(Chain-of-Noting)을 도입했습니다. CoN의 핵심 아이디어는 검색된 문서에 대한 순차적인 읽기 노트를 생성하여 주어진 질문과의 관련성을 철저히 평가하고 이 정보를 통합하여 최종 답변을 공식화하는 것입니다. ChatGPT를 사용하여 CoN을 위한 학습 데이터를 생성하고, 이후 LLaMa-2 7B 모델에서 학습했습니다. 네 가지 오픈 도메인 QA 벤치마크에서 실험한 결과, CoN을 탑재한 RALM이 표준 RALM을 크게 능가하는 것으로 나타났습니다. 특히, CoN은 완전히 노이즈가 있는 검색 문서에서 EM 점수가 평균 +7.9점, 사전 학습 지식 범위를 벗어난 실시간 질문에 대한 거부율이 평균 +10.5점 향상되었습니다.

     Retrieval-augmented language models (RALMs) represent a substantial advancement in the capabilities of large language models, notably in reducing factual hallucination by leveraging external knowledge sources. However, the reliability of the retrieved information is not always guaranteed. The retrieval of irrelevant data can lead to misguided responses, and potentially causing the model to overlook its inherent knowledge, even when it possesses adequate information to address the query. Moreover, standard RALMs often struggle to assess whether they possess adequate knowledge, both intrinsic and retrieved, to provide an accurate answer. In situations where knowledge is lacking, these systems should ideally respond with ""unknown"" when the answer is unattainable. In response to these challenges, we introduces Chain-of-Noting (CoN), a novel approach aimed at improving the robustness of RALMs in facing noisy, irrelevant documents and in handling unknown scenarios. The core idea
     of CoN is to generate sequential reading notes for retrieved documents, enabling a thorough evaluation of their relevance to the given question and integrating this information to formulate the final answer. We employed ChatGPT to create training data for CoN, which was subsequently trained on an LLaMa-2 7B model. Our experiments across four open-domain QA benchmarks show that RALMs equipped with CoN significantly outperform standard RALMs. Notably, CoN achieves an average improvement of +7.9 in EM score given entirely noisy retrieved documents and +10.5 in rejection rates for real-time questions that fall outside the pre-training knowledge scope.

    논문 링크

   https://arxiv.org/abs/2311.09210

    더 읽어보기

   https://x.com/omarsar0/status/1725181141693472959


  대규모 언어 모델이 과학적 발견에 미치는 영향: GPT-4를 사용한 예비 연구 / The Impact of Large Language Models on Scientific Discovery: a Preliminary Study using GPT-4

    논문 소개

     * 신약 개발, 생물학, 계산 화학 등 다양한 과학 분야에서 대규모 언어 모델, 특히 GPT-4가 미치는 영향을 탐구하고, 전문가 중심의 사례 평가와 벤치마크 테스트를 통해 복잡한 과학 개념에 대한 GPT-4의 이해, 문제 해결 능력, 과학 연구 발전 가능성을 평가합니다.

     Explores the impact of large language models, particularly gpt-4, across various scientific fields including drug discovery, biology, and computational chemistry; assesses gpt-4's understanding of complex scientific concepts, its problem-solving capabilities, and its potential to advance scientific research through expert-driven case assessments and benchmark testing.

    논문 초록

     * 최근 몇 년 동안 자연어 처리의 획기적인 발전으로 강력한 대규모 언어 모델(LLM)이 등장하여 자연어의 이해, 생성, 번역은 물론 언어 처리를 넘어서는 작업까지 광범위한 영역에서 놀라운 성능을 선보였습니다. 이 보고서에서는 최첨단 언어 모델인 GPT-4를 중심으로 과학적 발견의 맥락에서 LLM의 성능을 자세히 살펴봅니다. 신약 개발, 생물학, 계산 화학(밀도 함수 이론(DFT) 및 분자 역학(MD)), 재료 설계, 편미분 방정식(PDE) 등 다양한 과학 분야를 아우르는 광범위한 연구를 수행했습니다. 과학적 과제에 대한 GPT-4의 평가는 다양한 연구 영역에서 잠재력을 발견하고, 영역별 전문성을 검증하고, 과학적 진보를 가속화하고, 자원 배분을 최적화하고, 미래 모델 개발을 안내하고, 학제 간 연구를 육성하는 데 매우 중요합니다. 당사의 탐색 방법론은 주로 복잡한
       과학 개념과 관계에 대한 모델의 이해도에 대한 질적 통찰력을 제공하는 전문가 중심의 사례 평가와 잘 정의된 도메인별 문제를 해결할 수 있는 모델의 역량을 정량적으로 평가하는 벤치마크 테스트로 구성됩니다. 예비 조사 결과, GPT-4는 복잡한 문제 해결 및 지식 통합 작업을 처리하는 데 적합한 것으로 나타나 다양한 과학 응용 분야에서 유망한 잠재력을 보여줬습니다. 크게 보면 GPT-4의 지식 기반, 과학적 이해, 과학적 수치 계산 능력, 다양한 과학적 예측 능력을 평가합니다.

     In recent years, groundbreaking advancements in natural language processing have culminated in the emergence of powerful large language models (LLMs), which have showcased remarkable capabilities across a vast array of domains, including the understanding, generation, and translation of natural language, and even tasks that extend beyond language processing. In this report, we delve into the performance of LLMs within the context of scientific discovery, focusing on GPT-4, the state-of-the-art language model. Our investigation spans a diverse range of scientific areas encompassing drug discovery, biology, computational chemistry (density functional theory (DFT) and molecular dynamics (MD)), materials design, and partial differential equations (PDE). Evaluating GPT-4 on scientific tasks is crucial for uncovering its potential across various research domains, validating its domain-specific expertise, accelerating scientific progress, optimizing resource allocation, guiding
     future model development, and fostering interdisciplinary research. Our exploration methodology primarily consists of expert-driven case assessments, which offer qualitative insights into the model's comprehension of intricate scientific concepts and relationships, and occasionally benchmark testing, which quantitatively evaluates the model's capacity to solve well-defined domain-specific problems. Our preliminary exploration indicates that GPT-4 exhibits promising potential for a variety of scientific applications, demonstrating its aptitude for handling complex problem-solving and knowledge integration tasks. Broadly speaking, we evaluate GPT-4's knowledge base, scientific understanding, scientific numerical calculation abilities, and various scientific prediction capabilities.

    논문 링크

   https://arxiv.org/abs/2311.07361

    더 읽어보기

   https://x.com/omarsar0/status/1724465107046940893


  사실성에 맞게 언어 모델 미세 조정하기 / Fine-tuning Language Models for Factuality

    논문 소개

     * 사람이 라벨을 붙일 필요 없이 사실성에 맞게 언어 모델을 미세 조정하고, 자동 생성된 사실성 선호도 순위에서 학습하며, 개방형 생성 설정을 목표로 하고, 사실성을 목표로 하는 RLHF 또는 디코딩 전략에 비해 보류된 주제에 대한 Llama-2의 사실성을 크게 향상시킵니다.

     Fine-tunes language model for factuality without requiring human labeling; it learns from automatically generated factuality preference rankings and targets open-ended generation settings; it significantly improves the factuality of llama-2 on held-out topics compared with rlhf or decoding strategies targeted at factuality.

    논문 초록

     * 사전 학습된 대규모 언어 모델(LLM)의 유창성과 창의성 덕분에 언어 모델이 널리 사용되고 있으며, 때로는 기존 검색 엔진을 대체하는 용도로도 사용되고 있습니다. 그러나 언어 모델은 흔히 '환각'이라고 불리는 설득력 있지만 사실과 다른 주장을 하는 경향이 있습니다 이러한 오류는 의도치 않게 잘못된 정보를 퍼뜨리거나 오해를 영구화할 수 있습니다. 또한 모델 응답에 대한 수작업 사실 확인은 시간이 많이 걸리는 프로세스이기 때문에 사람이 사실 여부를 확인하는 데 많은 비용이 소요됩니다. 이번 작업에서는 사람이 라벨을 붙이지 않고도 과거 작업보다 더 개방적인 세대 설정을 대상으로 언어 모델을 더욱 사실에 가깝도록 미세 조정합니다. 이를 위해 최근 NLP의 두 가지 주요 혁신을 활용합니다. 첫째, 최근 여러 연구에서 외부 지식 기반과의 일관성
       또는 단순히 대규모 모델의 신뢰도 점수를 측정하여 개방형 텍스트의 사실성을 판단하는 방법을 제안했습니다. 둘째, 직접 선호도 최적화 알고리즘을 사용하면 가능한 모델 응답에 대한 선호도 순위를 사용하여 지도 모방 이외의 목표에 대해 언어 모델을 직접 미세 조정할 수 있습니다. 기존 검색 시스템이나 새로운 검색 없는 접근 방식을 통해 자동 생성된 사실성 선호도 순위로부터 학습하면 RLHF 또는 사실성을 목표로 하는 디코딩 전략에 비해 보류된 주제에 대한 Llama-2의 사실성(생성된 주장 중 올바른 주장의 비율)이 크게 향상된다는 사실을 보여줍니다. 7B 규모에서 Llama-2 채팅과 비교했을 때, 전기 생성 및 의료 질문에 대한 답변에서 사실 오류율이 각각 58%와 40% 감소했습니다.

     The fluency and creativity of large pre-trained language models (LLMs) have led to their widespread use, sometimes even as a replacement for traditional search engines. Yet language models are prone to making convincing but factually inaccurate claims, often referred to as 'hallucinations.' These errors can inadvertently spread misinformation or harmfully perpetuate misconceptions. Further, manual fact-checking of model responses is a time-consuming process, making human factuality labels expensive to acquire. In this work, we fine-tune language models to be more factual, without human labeling and targeting more open-ended generation settings than past work. We leverage two key recent innovations in NLP to do so. First, several recent works have proposed methods for judging the factuality of open-ended text by measuring consistency with an external knowledge base or simply a large model's confidence scores. Second, the direct preference optimization algorithm enables
     straightforward fine-tuning of language models on objectives other than supervised imitation, using a preference ranking over possible model responses. We show that learning from automatically generated factuality preference rankings, generated either through existing retrieval systems or our novel retrieval-free approach, significantly improves the factuality (percent of generated claims that are correct) of Llama-2 on held-out topics compared with RLHF or decoding strategies targeted at factuality. At 7B scale, compared to Llama-2-chat, we observe 58% and 40% reduction in factual error rate when generating biographies and answering medical questions, respectively.

    논문 링크

   https://arxiv.org/abs/2311.08401

    더 읽어보기

   https://x.com/arankomatsuzaki/status/1724613041155608951


  대조적인 생각의 연결 고리(CoT) 프롬프트 / Contrastive Chain-of-Thought Prompting

    논문 소개

     * 언어 모델 추론을 향상시키기 위해 대조적 사고 연쇄 방법(CoT)을 제안합니다. 이 접근 방식은 유효한 추론과 유효하지 않은 추론 데모를 모두 제공하여 모델이 단계별로 추론하도록 안내하면서 추론 실수를 줄입니다. 또한 대조적 데모를 구성하는 자동 방법을 제안하고 침대 프롬프트보다 개선된 점을 보여줍니다.

     Proposes a contrastive chain of thought method to enhance language model reasoning; the approach provides both valid and invalid reasoning demonstrations, to guide the model to reason step-by-step while reducing reasoning mistakes; also proposes an automatic method to construct contrastive demonstrations and demonstrates improvements over cot prompting.

    논문 초록

     * 언어 모델 추론을 향상시키는 데 있어 연쇄적 사고의 성공에도 불구하고, 그 근본적인 프로세스는 아직 잘 이해되지 않고 있습니다. 논리적으로 건전한 추론이 사고 연쇄에 본질적으로 중요해 보이지만, 이전 연구에 따르면 잘못된 증명을 대신 사용할 경우 그 영향이 미미하다는 사실이 놀랍게도 밝혀졌습니다. 게다가 기존의 사고 연쇄는 언어 모델에 어떤 실수를 피해야 하는지 알려주지 않기 때문에 잠재적으로 더 많은 오류를 유발할 수 있습니다. 따라서 인간이 긍정적인 예와 부정적인 예 모두에서 학습할 수 있다는 점에 착안하여 언어 모델 추론을 강화하기 위해 대조적 사고 연쇄를 제안합니다. 기존의 사고 연쇄와 비교했을 때, 우리의 접근 방식은 유효한 추론과 잘못된 추론을 모두 보여줌으로써 추론 실수를 줄이면서 모델이 단계적으로
       추론하도록 안내합니다. 일반화를 개선하기 위해 대조적인 데모를 자동으로 구성하는 방법을 도입했습니다. 추론 벤치마크에 대한 실험을 통해 대조적 사고 연쇄가 사고 연쇄 프롬프트를 전반적으로 향상시키는 역할을 할 수 있음을 입증했습니다.

     Despite the success of chain of thought in enhancing language model reasoning, the underlying process remains less well understood. Although logically sound reasoning appears inherently crucial for chain of thought, prior studies surprisingly reveal minimal impact when using invalid demonstrations instead. Furthermore, the conventional chain of thought does not inform language models on what mistakes to avoid, which potentially leads to more errors. Hence, inspired by how humans can learn from both positive and negative examples, we propose contrastive chain of thought to enhance language model reasoning. Compared to the conventional chain of thought, our approach provides both valid and invalid reasoning demonstrations, to guide the model to reason step-by-step while reducing reasoning mistakes. To improve generalization, we introduce an automatic method to construct contrastive demonstrations. Our experiments on reasoning benchmarks demonstrate that contrastive chain of
     thought can serve as a general enhancement of chain-of-thought prompting.

    논문 링크

   https://arxiv.org/abs/2311.09277

    더 읽어보기

   https://x.com/arankomatsuzaki/status/1725340150819905723


  코드 언어 모델에 대한 서베이 논문 / A Survey on Language Models for Code

    논문 소개

     * 50개 이상의 모델, 30개 이상의 평가 작업 및 500개 이상의 관련 작업에 대한 검토를 포함하여 코드에 대한 LLM의 개요를 제공합니다.

     Provides an overview of llms for code, including a review of 50+ models, 30+ evaluation tasks, and 500 related works.

    논문 초록

     * 이 작업에서는 50개 이상의 모델, 30개 이상의 평가 작업 및 500개 이상의 관련 작업을 포함하여 언어 모델을 사용한 코드 처리의 최근 발전 상황을 체계적으로 검토합니다. 코드 처리 모델을 GPT 제품군으로 대표되는 일반 언어 모델과 코드에 대해 특별히 사전 학습된 특수 모델(종종 맞춤형 목표에 따라)로 분류합니다. 이러한 모델 간의 관계와 차이점에 대해 논의하고, 통계 모델과 RNN에서 사전 학습된 트랜스포머와 LLM으로 코드 모델링의 역사적 변천사를 강조하며, 이는 NLP가 걸어온 과정과 정확히 일치합니다. 또한 AST, CFG, 단위 테스트와 같은 코드별 기능과 코드 언어 모델 학습에서의 적용에 대해 논의하고 이 분야의 주요 과제와 잠재적인 미래 방향을 파악합니다. 설문조사는 GitHub 저장소(https://github.com/codefuse-ai/Awesome-Code-LLM)에서 계속 업데이트됩니다.

     In this work we systematically review the recent advancements in code processing with language models, covering 50+ models, 30+ evaluation tasks, and 500 related works. We break down code processing models into general language models represented by the GPT family and specialized models that are specifically pretrained on code, often with tailored objectives. We discuss the relations and differences between these models, and highlight the historical transition of code modeling from statistical models and RNNs to pretrained Transformers and LLMs, which is exactly the same course that had been taken by NLP. We also discuss code-specific features such as AST, CFG, and unit tests, along with their application in training code language models, and identify key challenges and potential future directions in this domain. We keep the survey open and updated on github repository at https://github.com/codefuse-ai/Awesome-Code-LLM.

    논문 링크

   https://arxiv.org/abs/2311.07989v1

    더 읽어보기

   https://x.com/omarsar0/status/1725637165256761553


  JARVIS-1: 메모리 증강, 멀티모달 언어 모델을 갖춘 오픈월드 멀티태스크 에이전트 / JARVIS-1: Open-World Multi-task Agents with Memory-Augmented Multimodal Language Models

    논문 소개

     * 오픈월드 마인크래프트 세계 내에서 시각적 관찰과 사람의 지시 등 복합적인 입력을 인식하고 정교한 계획을 생성하며 구현된 제어를 수행할 수 있는 오픈월드 에이전트로, 마인크래프트 세계 내 200개 이상의 작업에서 완벽에 가까운 성능을 발휘하고, 긴 수평선 다이아몬드 곡괭이 작업에서 이전 기록 대비 5배 향상된 12.5%의 완료율을 달성했습니다.

     An open-world agent that can perceive multimodal input (visual observations and human instructions), generate sophisticated plans, and perform embodied control, within the open-world minecraft universe; exhibits near-perfect performances across over 200 tasks in minecraft universe; achieves a completion rate of 12.5% in the long-horizon diamond pickaxe task, which is a 5x increase compared to previous records.

    논문 초록

     * 오픈 월드에서 멀티모달 관찰을 통해 인간과 같은 계획과 제어를 달성하는 것은 보다 기능적인 제너럴리스트 에이전트를 위한 핵심 이정표입니다. 기존 접근 방식은 오픈 월드에서 특정 장기 작업을 처리할 수 있습니다. 하지만 오픈월드 작업의 수가 무한대로 늘어날 수 있고 게임 시간이 길어짐에 따라 작업 완료도를 점진적으로 향상시킬 수 있는 기능이 부족하기 때문에 여전히 어려움을 겪고 있습니다. 유니티는 대중적이면서도 도전적인 오픈월드 마인크래프트 세계관 내에서 시각적 관찰과 사람의 지시 등 복합적인 입력을 인식하고, 정교한 계획을 생성하며, 구현된 제어를 수행할 수 있는 오픈월드 에이전트인 JARVIS-1을 소개합니다. 특히 유니티는 시각적 관찰과 텍스트 지시를 계획에 매핑하는 사전 학습된 멀티모달 언어 모델을 기반으로 JARVIS-1을
       개발합니다. 이 계획은 최종적으로 목표 조건에 맞는 컨트롤러에게 전달됩니다. 유니티는 자비스-1에 멀티모달 메모리를 장착하여 사전 학습된 지식과 실제 게임 생존 경험을 모두 사용하여 계획을 수립할 수 있도록 지원합니다. 유니티의 실험 결과, 자비스-1은 초급부터 중급에 이르는 마인크래프트 유니버스 벤치마크의 200개 이상의 다양한 작업에서 거의 완벽한 성능을 보여주었습니다. JARVIS-1은 긴 수평선 다이아몬드 곡괭이 작업에서 12.5%의 완료율을 달성했습니다. 이는 이전 기록에 비해 최대 5배까지 크게 향상된 수치입니다. 또한, 멀티모달 메모리 덕분에 평생 학습 패러다임에 따라 JARVIS-1이 보다 일반적인 지능과 향상된 자율성을 촉발하여 $\textit{자기 개선}$할 수 있음을 보여주었습니다. 프로젝트 페이지는 https://craftjarvis-jarvis1.github.io 에서
       확인할 수 있습니다.

     Achieving human-like planning and control with multimodal observations in an open world is a key milestone for more functional generalist agents. Existing approaches can handle certain long-horizon tasks in an open world. However, they still struggle when the number of open-world tasks could potentially be infinite and lack the capability to progressively enhance task completion as game time progresses. We introduce JARVIS-1, an open-world agent that can perceive multimodal input (visual observations and human instructions), generate sophisticated plans, and perform embodied control, all within the popular yet challenging open-world Minecraft universe. Specifically, we develop JARVIS-1 on top of pre-trained multimodal language models, which map visual observations and textual instructions to plans. The plans will be ultimately dispatched to the goal-conditioned controllers. We outfit JARVIS-1 with a multimodal memory, which facilitates planning using both pre-trained
     knowledge and its actual game survival experiences. In our experiments, JARVIS-1 exhibits nearly perfect performances across over 200 varying tasks from the Minecraft Universe Benchmark, ranging from entry to intermediate levels. JARVIS-1 has achieved a completion rate of 12.5% in the long-horizon diamond pickaxe task. This represents a significant increase up to 5 times compared to previous records. Furthermore, we show that JARVIS-1 is able to $\textit{self-improve}$ following a life-long learning paradigm thanks to multimodal memory, sparking a more general intelligence and improved autonomy. The project page is available at https://craftjarvis-jarvis1.github.io.

    논문 링크

   https://arxiv.org/abs/2311.05997

    더 읽어보기

   https://x.com/arankomatsuzaki/status/1723882043514470629


  FILCO: 검색 증강 생성을 위한 컨텍스트 필터링 학습 방식 / Learning to Filter Context for Retrieval-Augmented Generation

    논문 소개

     * 두 단계를 통해 생성기에 제공되는 문맥의 품질을 향상시키는 방법을 제안합니다: 1) 어휘 및 정보 이론적 접근 방식을 기반으로 유용한 컨텍스트를 식별하고, 2) 추론 시 검색된 컨텍스트를 필터링할 수 있는 컨텍스트 필터링 모델을 학습하여 추출형 질문 답변(QA), 복잡한 멀티홉 및 긴 형식의 QA, 사실 확인 및 대화 생성 작업에서 기존 접근 방식보다 뛰어난 성능을 발휘합니다.

     Proposes a method that improves the quality of the context provided to the generator via two steps: 1) identifying useful context based on lexical and information-theoretic approaches, and 2) training context filtering models that can filter retrieved contexts at inference; outperforms existing approaches on extractive question answering (qa), complex multi-hop and long-form qa, fact verification, and dialog generation tasks.

    논문 초록

     * 관련 지식의 즉각적인 검색은 개방형 도메인 질문 답변 및 사실 확인과 같은 작업을 위한 신뢰할 수 있는 시스템의 필수 요소로 입증되었습니다. 그러나 검색 시스템은 완벽하지 않기 때문에 부분적으로 또는 완전히 관련 없는 구절이 주어졌을 때 결과물을 생성하려면 생성 모델이 필요합니다. 이로 인해 문맥에 대한 의존도가 지나치게 높거나 낮을 수 있으며, 생성된 출력에 환각과 같은 문제가 발생할 수 있습니다. 이러한 문제를 완화하기 위해 (1) 어휘 및 정보 이론적 접근 방식을 기반으로 유용한 문맥을 식별하고, (2) 검색된 문맥을 테스트 시점에 필터링할 수 있는 문맥 필터링 모델을 학습하여 생성기에 제공되는 문맥의 품질을 개선하는 방법인 FILCO를 제안합니다. FLAN-T5와 LLaMa2로 6가지 지식 집약적인 작업을 실험한 결과, 추출형 질문 답변(QA),
       복잡한 멀티홉 및 긴 형식의 QA, 사실 확인, 대화 생성 작업에서 기존 접근 방식보다 성능이 뛰어남을 입증했습니다. FILCO는 표준 출력 지원 여부와 관계없이 컨텍스트의 품질을 효과적으로 개선합니다.

     On-the-fly retrieval of relevant knowledge has proven an essential element of reliable systems for tasks such as open-domain question answering and fact verification. However, because retrieval systems are not perfect, generation models are required to generate outputs given partially or entirely irrelevant passages. This can cause over- or under-reliance on context, and result in problems in the generated output such as hallucinations. To alleviate these problems, we propose FILCO, a method that improves the quality of the context provided to the generator by (1) identifying useful context based on lexical and information-theoretic approaches, and (2) training context filtering models that can filter retrieved contexts at test time. We experiment on six knowledge-intensive tasks with FLAN-T5 and LLaMa2, and demonstrate that our method outperforms existing approaches on extractive question answering (QA), complex multi-hop and long-form QA, fact verification, and dialog
     generation tasks. FILCO effectively improves the quality of context, whether or not it supports the canonical output.

    논문 링크

   https://arxiv.org/abs/2311.08377v1

    더 읽어보기

   https://x.com/ZhiruoW/status/1724792850079252886
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  MART: 여러 차례의 자동 레드 티밍을 통한 LLM 안전성 향상 / MART: Improving LLM Safety with Multi-round Automatic Red-Teaming

    논문 소개

     * 다라운드 자동 적대적 프롬프트 작성과 안전한 응답 생성을 통합하여 적대적 프롬프트 작성의 확장성과 llm의 안전성을 높이고, 안전 정렬이 제한된 llm의 위반률이 마트 4라운드 후 최대 84.7%까지 감소하여 광범위한 적대적 프롬프트 작성을 사용하는 llm과 비슷한 성능을 달성하는 등 llm의 안전성을 개선하기 위한 접근 방식을 제안합니다.

     Proposes an approach for improving llm safety with multi-round automatic red-teaming; incorporates automatic adversarial prompt writing and safe response generation, which increases red-teaming scalability and the safety of llms; violation rate of an llm with limited safety alignment reduces up to 84.7% after 4 rounds of mart, achieving comparable performance to llms with extensive adversarial prompt writing.

    논문 초록

     * 레드팀은 대규모 언어 모델(LLM)의 안전하지 않은 동작을 완화하기 위한 일반적인 관행으로, LLM을 철저히 평가하여 잠재적인 결함을 식별하고 책임감 있고 정확한 대응으로 문제를 해결하는 것을 포함합니다. 효과적이기는 하지만 수동 레드팀은 비용이 많이 들고, 기존의 자동 레드팀은 일반적으로 안전 위험을 해결하지 않고 발견하는 경우가 많습니다. 본 논문에서는 자동 적대적 프롬프트 작성과 안전한 응답 생성을 모두 통합하여 레드팀 확장성과 대상 LLM의 안전성을 크게 향상시키는 다라운드 자동 레드팀(MART) 방법을 제안합니다. 구체적으로, 적대적 LLM과 표적 LLM은 반복적인 방식으로 서로 상호작용하며, 적대적 LLM은 표적 LLM으로부터 안전하지 않은 응답을 유도하는 도전적인 프롬프트를 생성하는 것을 목표로 하고, 표적 LLM은 이러한 적대적
       프롬프트에 대해 안전에 맞게 조정된 데이터로 미세 조정됩니다. 각 라운드에서 적대적 LLM은 업데이트된 표적 LLM에 대해 더 나은 공격을 만들고 표적 LLM도 안전성 미세 조정을 통해 스스로를 개선합니다. 적대적 프롬프트 벤치마크에서 안전성이 제한된 LLM의 위반률은 4라운드의 MART 이후 최대 84.7%까지 감소하여 광범위한 적대적 프롬프트 작성을 사용하는 LLM과 비슷한 성능을 달성합니다. 특히, 비적대적 프롬프트에 대한 모델 유용성은 반복을 거듭할수록 안정적으로 유지되어 타깃 LLM이 명령어 추종에서 강력한 성능을 유지한다는 것을 나타냅니다.

     Red-teaming is a common practice for mitigating unsafe behaviors in Large Language Models (LLMs), which involves thoroughly assessing LLMs to identify potential flaws and addressing them with responsible and accurate responses. While effective, manual red-teaming is costly, and existing automatic red-teaming typically discovers safety risks without addressing them. In this paper, we propose a Multi-round Automatic Red-Teaming (MART) method, which incorporates both automatic adversarial prompt writing and safe response generation, significantly increasing red-teaming scalability and the safety of the target LLM. Specifically, an adversarial LLM and a target LLM interplay with each other in an iterative manner, where the adversarial LLM aims to generate challenging prompts that elicit unsafe responses from the target LLM, while the target LLM is fine-tuned with safety aligned data on these adversarial prompts. In each round, the adversarial LLM crafts better attacks on the
     updated target LLM, while the target LLM also improves itself through safety fine-tuning. On adversarial prompt benchmarks, the violation rate of an LLM with limited safety alignment reduces up to 84.7% after 4 rounds of MART, achieving comparable performance to LLMs with extensive adversarial prompt writing. Notably, model helpfulness on non-adversarial prompts remains stable throughout iterations, indicating the target LLM maintains strong performance on instruction following.

    논문 링크

   https://arxiv.org/abs/2311.07689

    더 읽어보기

   https://x.com/AIatMeta/status/1724887918685425829


  기술 보고서: 대규모 언어 모델은 압박을 받을 때 전략적으로 사용자를 속일 수 있습니다 / Technical Report: Large Language Models can Strategically Deceive their Users when Put Under Pressure

    논문 소개

     * 로보어드바이저로 구동되는 자율 주식 거래 에이전트의 사용을 살펴보고, 에이전트가 내부자 정보에 따라 행동하고 거래 결정의 이유를 숨기는 것을 발견하며, 유용하고 안전한 로보어드바이저가 지시나 속임수 학습 없이도 실제 상황에서 사용자를 전략적으로 속일 수 있음을 보여줍니다.

     Explores the use of an autonomous stock trading agent powered by llms; finds that the agent acts upon insider tips and hides the reason behind the trading decision; shows that helpful and safe llms can strategically deceive users in a realistic situation without direction instructions or training for deception.

    논문 초록

     * 도움이 되고, 무해하며, 정직하도록 학습된 대규모 언어 모델이 지시를 받지 않고도 잘못된 행동을 보이고 전략적으로 사용자를 속일 수 있는 상황을 시연합니다. 구체적으로는 실제와 같은 시뮬레이션 환경에서 GPT-4를 에이전트로 배포하여 자율적인 주식 거래 에이전트의 역할을 맡깁니다. 이 환경에서 모델은 수익성 있는 주식 거래에 대한 내부자 정보를 입수하고 내부자 거래가 회사 경영진에 의해 승인되지 않는다는 사실을 알고 있음에도 불구하고 이를 실행합니다. 이 모델은 관리자에게 보고할 때 거래 결정의 진정한 이유를 일관되게 숨깁니다. 추론 스크래치 패드에 대한 모델 액세스 권한을 제거하고, 시스템 지침을 변경하여 잘못된 행동을 방지하려고 시도하고, 모델이 받는 압력의 양을 변경하고, 적발될 위험에 대한 인지된 위험을 변경하고,
       기타 간단한 환경 변경을 시도하는 등 설정을 변경할 때 이러한 행동이 어떻게 달라지는지 간략하게 조사했습니다. 우리가 아는 한, 이것은 도움이 되고 무해하며 정직하도록 학습된 대규모 언어 모델이 직접적인 지시나 속임수 학습 없이 실제 상황에서 사용자를 전략적으로 속이는 데모는 이번이 처음입니다.

     We demonstrate a situation in which Large Language Models, trained to be helpful, harmless, and honest, can display misaligned behavior and strategically deceive their users about this behavior without being instructed to do so. Concretely, we deploy GPT-4 as an agent in a realistic, simulated environment, where it assumes the role of an autonomous stock trading agent. Within this environment, the model obtains an insider tip about a lucrative stock trade and acts upon it despite knowing that insider trading is disapproved of by company management. When reporting to its manager, the model consistently hides the genuine reasons behind its trading decision. We perform a brief investigation of how this behavior varies under changes to the setting, such as removing model access to a reasoning scratchpad, attempting to prevent the misaligned behavior by changing system instructions, changing the amount of pressure the model is under, varying the perceived risk of getting caught,
     and making other simple changes to the environment. To our knowledge, this is the first demonstration of Large Language Models trained to be helpful, harmless, and honest, strategically deceiving their users in a realistic situation without direct instructions or training for deception.

    논문 링크

   https://arxiv.org/abs/2311.07590

    더 읽어보기

   https://x.com/ESYudkowsky/status/1725226563992715521


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-e3d
"
"https://news.hada.io/topic?id=12032","기술 업무의 실패한 상품화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             기술 업무의 실패한 상품화

기술 업무의 실패한 상품화

     * 데이터 엔지니어링 분야에서 매우 뛰어난 인재이자 첫 번째 관리자인 한 남성의 요리에 대한 열정.
     * 요리에 대한 열정이 매우 강하며, 오븐에서 닭의 열 분포에 대한 분석을 공유하는 등의 행동.
     * 요리에 대한 복잡성과 맥도날드 운영의 복잡성에 대한 존경심을 표현.

C-수준 경영진의 사고방식에 대한 간략한 통찰

     * 기술 산업의 현황을 이해하기 위해 'The Phoenix Project'라는 책을 읽음.
     * 책은 IT 운영이 제조 공장 작업과 유사하다고 설명하며, 이는 조직 내 작업 흐름 관리에 대한 시사점을 제공.
     * 'The Unicorn Project', 'Investments Unlimited' 등 유사한 주제의 책들이 많으며, 이러한 책들은 조직의 효율적 운영에 대한 조언을 제공.

McData

     * 기술 제품을 판매하는 회사들이 제품의 기술적 세부사항보다는 일관된 작업의 재현 가능성에 초점을 맞추어 제품을 판매.
     * 제품은 기술적 문제를 해결하는 데 있어 특정 엔지니어의 능력에 의존하지 않고도 충분히 좋은 결과물을 제공할 수 있음을 약속.
     * 많은 기업들이 기술적인 세부사항을 무시하고, 단순히 새로운 시스템을 구매하여 문제를 해결하려 함.

It's Fucking Raw

     * 많은 기술 업무가 아직 상품화되지 않았으며, 이는 중요한 문제임.
     * 기술 업무의 상품화는 종종 실패하며, 이는 기업들이 제대로 작동하지 않는 제품을 판매하고 구매하는 현상을 초래.
     * 기술 업무의 상품화는 여전히 개인의 창의성과 연결되어 있으며, 이는 조직 내에서의 인간적인 요소와 연결되어 있음.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 기술 업무의 상품화가 아직 완전히 성공하지 못했다는 점임.
     * 기술 업무의 복잡성과 창의성을 이해하고, 이를 효과적으로 관리하는 것은 많은 기업들에게 여전히 도전적인 과제임.
     * 이 글이 흥미로운 이유는 기술 업무를 단순한 상품으로 보려는 시도가 실제로는 얼마나 복잡한지를 보여주기 때문임.

        Hacker News 의견

     * 기술 작업의 상당 부분이 이제 상품화되었다는 점을 저자가 간과했다고 생각함. 과거에는 기술적인 작업이었던 것들이 현재는 간단한 작업으로 변모함. 예를 들어, 메일 병합이나 이중 입력 회계 등이 이제는 간단한 바코드 스캔과 탭으로 결제하는 것으로 대체됨. 기술적인 작업보다는 요구사항 수집이 더 어려운 부분임.
     * 기술 작업의 완전한 상품화는 나쁜 아이디어이며, 이는 계속 실패할 것이라는 데 동의함. 그러나 '피닉스 프로젝트'가 이를 옹호한다고 생각하지 않음. '피닉스 프로젝트'의 주요 내용은 반복 작업을 관리하고 자동화하는 명확한 시스템을 갖추고, 작업 진행 시간을 최소화하며, 정보를 널리 공유하고, 비즈니스에 실제로 필요한 작업을 수행하며, 계획되지 않은 작업과 소음을 줄여 직원들이 더 가치 있는 작업을 할 수 있도록 하는 것임.
     * '상품화'와 '상품화'라는 용어가 혼동되고 있음을 지적함. '상품화'는 독점적인 것들이 일반적인 것으로 변하는 것을 의미하며, '상품화'는 판매되지 않는 것들이 판매 가능한 것으로 변하는 것을 의미함.
     * 개발자들은 맥도날드의 청소년 직원이 아니라, 그 기계를 설계한 엔지니어에 비유됨. 프로그래밍은 일을 하는 것이 아니라 메타 작업으로, 한 번의 명령어 리스트를 작성하면 컴퓨터가 무한정 작업을 수행함.
     * 소프트웨어 개발이 이미 '상품화'되어 더 이상 코드를 작성할 필요가 없다는 잘못된 인식이 있음. 실제로는 새로운 문제를 해결하기 위한 시스템을 구축하는 것이 쉽지 않으며, 논리적 규칙과 흐름을 나타내는 텍스트, 버전 관리, 롤백 등이 필요함으로 프로그래머가 필요함.
     * 인간 요소가 번성할 수 있도록 허용하지 않고는 가치 있는 자기계발 책을 만들어낼 수 없음. 그러나 여전히 책을 인쇄할 수 있는 공장이 필요하며, 아름다운 제본은 작업에 대한 연결이 있는 사람들이 운영할 때만 나올 수 있음.
     * 기술 산업이 오랫동안 개발자들을 상품화하려고 시도해왔음. 고수준 프레임워크와 함께 단순해 보이는 요구사항에도 불구하고, 많은 소프트웨어가 여전히 잘 작동하지 않음. 저자가 지적한 것처럼, 진정한 해결책은 신경 쓰는 유능한 개발자임.
     * 비즈니스 인텔리전스/분석 역할에서 SQL을 작성하는 사람들을 Tableau와 같은 도구를 사용할 수 있는 사람들로 대체하려는 시도가 있음. 그러나 이에는 몇 가지 문제가 있음: 더 많은 (저임금의) 사람들을 고용해야 하고, 비즈니스 로직이 UI에 숨겨져 복잡해지며, 이제 솔루션은 Tableau 워크북에 저장되어 다른 것에 대한 입력으로 사용될 수 없음.
     * 소프트웨어를 도시 계획과 비교하는 것이 더 적합하다고 보며, 다양한 전문 분야가 생겨나고 있음. 표준이 발전함에 따라 특정 분야에서 일하기 위한 구체적인 자격증이 필요할 수도 있음. 소프트웨어는 많은 경우 최종 결과물이 아니라 자체적인 가능성을 제공하는 것임.
     * '피닉스 프로젝트'의 아이디어를 적용하여 개발자들을 공장의 기계 부품처럼 취급한 회사에서 일했으나, 그 회사는 주요 자회사를 폐쇄하고 대부분의 직원을 해고하는 상황에 이르렀음.
"
"https://news.hada.io/topic?id=12077","GitHub: 로그인 없이 코드 검색 불가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GitHub: 로그인 없이 코드 검색 불가능

요약: GitHub 코드 검색 로그인 필요 논란

     * GitHub 사용자가 코드 검색 기능을 사용하기 위해 로그인이 필요하다는 변경 사항에 대해 불만을 표시함.
     * 사용자는 이 변경이 오픈 소스 운동에 반하는 것이며, Microsoft가 사용자 데이터를 과도하게 수집하려는 의도가 아닌지 의심함.
     * GitHub 측은 서버 부하를 줄이고 봇으로부터의 익명 요청을 방지하기 위해 로그인을 요구한다고 설명함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 GitHub의 코드 검색 기능에 로그인이 필요하게 된 변경 사항과 이에 대한 커뮤니티의 반응이다. 이 변경은 오픈 소스 커뮤니티 내에서 데이터 접근성과 사용자 편의성에 대한 중요한 논의를 촉발시켰다. 사용자들은 오픈 소스의 정신에 반하는 이러한 결정에 대해 실망감을 표현하고 있으며, 이는 GitHub 및 Microsoft의 정책에 대한 더 넓은 관점에서의 토론으로 이어질 수 있다. 이러한 논란은 오픈 소스 커뮤니티의 미래와 기술 회사들의 데이터 정책에 대한 관심을 불러일으키는 흥미로운 주제이다.

        Hacker News 의견

     * 새로운 코드 검색 기능에 대한 호의적인 해석
          + 새로운 코드 검색 기능이 일반 검색 엔진보다 훨씬 더 많은 작업을 수행하므로 자원 집약적임.
          + 로그인한 계정에만 제한함으로써 서버 자원을 크게 절약할 수 있음.
          + 검색 인프라에 대한 비용 대비 로그인 요구에 대한 사용자 불만 사이의 균형 문제임.
          + 개인적으로 GitHub 저장소용 코드 검색 도구를 만들었지만, GitHub의 새 코드 검색이 매우 유용하여 사용을 중단함.
     * GitHub의 변경 사항 발표
          + 코드 검색이 로그인을 요구하는 변경 사항이 최소 6개월 전에 시작되었으며, GitHub의 변경 로그에서 공지됨.
     * GitHub에 대한 비판적인 견해
          + GitHub을 개방형 플랫폼으로 취급하는 것을 중단해야 함.
          + GitHub은 다른 폐쇄형 플랫폼과 마찬가지로 닫힌 정원임.
          + 많은 오픈 소스 프로젝트를 호스팅한다는 사실이 GitHub을 더 나은 것으로 만들지 않음.
     * 웹의 폐쇄성 증가
          + 2023년에 StackOverflow, Reddit, GitHub, Twitter 등이 스크래핑과 API 접근에 제동을 걸음.
          + AI 훈련 방지와 수익성 증대를 위한 조치로, 장기적으로 독점 데이터 시장의 부상 가능성이 있음.
          + 데이터에 대한 접근을 부유한 회사만이 감당할 수 있게 되면 반독점 문제가 발생할 수 있음.
     * 검색 기능에 대한 또 다른 호의적인 해석
          + 검색 기능이 상당한 계산을 요구하므로 서비스 거부 공격에 취약할 수 있음.
          + GitHub이 로그인한 사용자로부터 얼마나 많은 행동 데이터를 수집하고 그것이 얼마나 유용한지는 불분명함.
     * 대안적인 코드 검색 도구 사용
          + 로그인하지 않고도 Sourcegraph를 사용하여 코드 검색을 할 수 있음.
          + Sourcegraph는 이전 검색보다 훨씬 나은 성능을 제공함.
     * Microsoft의 AI 전략에 대한 추측
          + Microsoft가 GitHub 상의 정보 사용을 통제하여 경쟁사의 AI 개발 능력을 제한하려는 전략을 가질 수 있음.
          + 향후 git clone 명령어의 사용 제한 가능성에 대한 우려도 있음.
     * GitHub 검색 기능에 대한 로그인 요구에 대한 반응
          + 검색이 비용이 들 수 있고 서비스 거부 공격에 사용될 수 있으므로 로그인 요구에 대한 이해.
          + 공개 저장소는 로그인 없이 접근 가능하며, 이슈 생성이나 PR 제출과 같은 상호작용이 필요한 경우 로그인이 필수임.
     * 오픈 소스 검색을 위한 대안 제시
          + Sourcegraph는 로그인 없이도 오픈 소스 검색을 제공하며, GitHub 외의 주요 프로젝트도 포함함.
          + Sourcegraph의 CTO가 이 정보를 공개함.
     * HackerNews의 불만 표현에 대한 지적
          + 로그인하지 않은 사용자에게 무료이며 광고가 없는 서비스를 제공하지 않는 것에 대한 불만이 자주 표현됨.
"
"https://news.hada.io/topic?id=11973","세계 최대 암호화폐 거래소 Binance 창업자 장펑자오, 사임 및 유죄 인정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              세계 최대 암호화폐 거래소 Binance 창업자 장펑자오, 사임 및 유죄 인정

     * Binance의 CEO인 Changpeng Zhao가 미국의 반돈세탁 법률 위반 혐의를 인정하고 사임.
     * 자오는 시애틀 연방 법원에서 유죄를 인정하고, 바이낸스는 범죄 혐의에 대해 유죄를 인정하고 총 43억 달러의 벌금을 납부하기로 합의함.
     * Binance는 미국 사용자들이 위치를 숨겨 미국의 반돈세탁 법규를 회피하도록 장려했다고 검찰은 주장.

바이낸스의 현재 상황과 합의 내용

     * 바이낸스는 최근 경영진의 이탈과 직원 해고를 경험하며 미국 조사에 대응하기 위해 고군분투함.
     * 합의에 따라 자오는 바이낸스의 대다수 지분을 유지하지만, 회사의 경영진으로서 역할을 수행할 수 없게 됨.
     * 자오는 나중에 선고를 받게 되며, 이는 비트멕스의 전 CEO 아서 헤이즈의 사례와 유사함.
     * 이 합의는 바이낸스에 대한 장기간의 조사를 종결하고, 회사의 운영을 계속할 수 있는 기회를 제공할 것임.

SEC와의 합의 불포함 및 DOJ 조사

     * 이번 합의는 미국 증권거래위원회(SEC)와의 합의를 포함하지 않으며, SEC는 바이낸스와 자오를 상대로 투자자 보호 법률을 위반했다고 주장함.
     * 미국 법무부(DOJ)의 조사는 바이낸스의 자금세탁 방지 프로그램과 제재 대상 국가의 거래자들이 미국인과 거래할 수 있었는지 여부를 살펴봄.

CFTC와의 별도 합의

     * 상품선물거래위원회(CFTC)와의 별도 합의는 바이낸스와 자오에 대한 민사 소송을 해결할 것임.
     * 바이낸스가 납부할 43억 달러는 CFTC의 주장과 재무부 산하 기관들의 주장을 해결하기 위한 금액을 포함함.
     * CFTC는 바이낸스가 테러 자금 조달 및 자금세탁 방지 프로그램을 갖추지 않았으며, 미국에서 규제된 플랫폼에서만 거래될 수 있는 파생상품에 미국인들이 접근할 수 있게 했다고 주장함.

창펑 자오의 거주 상황

     * 창펑 자오는 아랍에미리트(UAE)에 거주하며 올해 여행을 제한함.
     * UAE는 미국과 상호 인도 조약이 없지만, 법 집행 증거 공유를 강화하는 조약에 서명함.
     * UAE는 중국과 미국이 규제를 강화하는 동안에도 암호화폐 산업에 대해 환영하는 태도를 유지함.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 암호화폐 거래소인 바이낸스와 그 CEO 창펑 자오가 미국의 반돈세탁 법규를 위반한 혐의로 유죄를 인정하고, 거액의 벌금을 납부하기로 합의했다는 사실이다. 이는 암호화폐 업계에 대한 규제 당국의 감시가 강화되고 있음을 보여주며, 이러한 합의가 암호화폐 시장의 미래와 관련된 법적 기준을 설정하는 데 중요한 역할을 할 수 있다. 이 기사가 흥미로운 이유는 암호화폐 시장의 주요 플레이어가 법적 문제에 직면하여 큰 변화를 겪고 있으며, 이는 전 세계적으로 암호화폐 규제에 대한 논의와 시장의 방향성에 영향을 미칠 수 있기 때문이다.

        Hacker News 의견

     * SBF(샘 뱅크먼-프라이드)가 자신을 구하기 위해 CZ(창펑 자오)를 대상으로 증언하기로 결정함. 이로 인해 정부는 크립토 관련 벌금을 부과할 수 있게 되고, FTX에서 큰 손실을 본 이들이 보상받을 수 있는 해결책이 될 수 있음.

     SBF의 자기보호적 증언과 CZ에 대한 벌금 부과 가능성
     * 제3자 준수 모니터링이 예상되며, 이는 보통 전직 법무부 관계자들이 맡음. 새로운 CEO는 위험을 회피하는 경향이 있을 것이며, 이것이 중국, 베트남, 터키 등 비규제 시장에서의 운영 중단으로 이어지지 않기를 바람.

     제3자 준수 모니터링 도입과 위험 회피형 CEO의 등장 가능성
     * 공동 창립자인 이희(Yi He)가 여전히 자리를 지키고 있다면, CZ의 사임이 큰 의미가 없을 수 있음. 두 사람은 아이가 둘이나 있으니, CZ가 간접적으로라도 관여하지 않을 것이라고 생각하기 어려움.

     이희의 지위 유지가 CZ의 사임의 영향력에 대한 의문 제기
     * CZ는 SBF의 몰락을 목격하고 변호사의 조언에 따르는 것 외에는 다른 행동을 취하지 않기로 결정했을 것임.

     CZ의 조심스러운 행보와 변호사의 조언 따름
     * 이번 사태의 마무리가 드디어 다가오고 있어 기쁨. 지난 2년간 침체된 시장을 마감하는 것이며, 2024년의 암호화폐 시장에 대한 기대감.

     사태의 마무리와 암호화폐 시장에 대한 긍정적 전망
     * 이번 사건이 비트코인 ETF 승인을 위한 길을 닦는 마지막 단계일 수 있음.

     비트코인 ETF 승인에 대한 기대감
     * CZ가 중동에 거주하고 있음에도 불구하고 미국과의 법적 대응에 응하는 것에 대해 놀라움을 표함. 중동은 미국과 송환 조약이 없으나, 중국의 영향력이 작용했을 수도 있음.

     CZ의 법적 대응에 대한 놀라움과 중국의 영향력 추측
     * 이 분야가 더욱 황당해질 수 없다는 풍자적 의견.

     암호화폐 업계의 황당함에 대한 지적
     * CZ가 그 정도의 자금을 보유하고 있지 않으며, 그것은 VIP 고객의 자금이라는 주장. 그에게는 앞으로 표적이 될 것이라는 우려.

     CZ의 자금 상황과 그에 대한 표적 우려
"
"https://news.hada.io/topic?id=12005","Windmill - 빠르게 셀프 호스팅 가능한 오픈소스 워크플로우 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Windmill - 빠르게 셀프 호스팅 가능한 오픈소스 워크플로우 엔진

     * Windmill이 Airflow, Prefect, Temporal 등 다른 워크플로우 엔진들과 비교하여 가장 빠른 자체 호스팅 가능한 오픈소스 워크플로우 엔진임을 벤치마크를 통해 입증
     * Windmill은 다양한 프로그래밍 언어를 지원하며, 복잡한 SDK나 배포 과정 없이 몇 분 만에 워크플로우를 구축하고 테스트할 수 있는 통합 개발 환경을 제공
     * Airflow/Prefect 는 하나의 런타임(Python)만 지원하지만, Windmill은 Python, Typescript, Go, Bash 를 지원하며 BigQuery, Snowflake, Mysql, Postgresql에 대한 직접 SQL 쿼리를 지원
     * Temporal과 비교할 때, Temporal은 작업 큐 관리에 특화되어 있으나, Windmill은 이벤트 대기(reactivity) 기능을 포함하여 내구성 있는 실행 엔진으로도 기능함

워크플로우 엔진과 작업 큐의 차이점

     * 작업 큐는 워크플로우 엔진의 핵심이며, 많은 개발자들이 자체 논리를 구축하여 워크플로우 엔진을 사용하지 않고 작업 큐를 활용함.
     * SQS, Kafka, Redis with RMSQ, Orban 등 다양한 큐 구현체가 이미 존재함
     * 많은 개발자들이 작업 큐 중심으로 자신의 로직을 구축해서 워크플로우 엔진과 비슷한 만족감을 느낌(자신만의 워크플로우 엔진을 만드는 것)

""All-Inclusive"" 워크플로우 엔진이란 무엇인가

     * 워크플로우 엔진은 작업의 의존성 제약을 존중하며 작업을 완료하기 위해 분산 시스템에서 워크플로우를 조정
     * 워크플로우 엔진의 5가지 주요 이점:
          + 리소스 할당: 클러스터를 최대한 활용할 수 있으며 모든 작업을 서로 다른 리소스(CPU, 메모리, GPU)를 가진 서로 다른 작업자에게 할당하고 작업자의 전체 리소스를 작업에 사용할 수 있도록 보장할 수 있음
          + 병렬 처리: 워크플로의 제약 조건으로 인해 일부 단계를 병렬로 실행할 수 있는 경우(브랜치, 포루프), 워크플로우 엔진은 스레드뿐만 아니라 물리적으로 분리된 여러 워커에 해당 단계를 디스패치할 수 있음
          + 관찰 가능성: 모든 작업에는 고유 ID가 있으며 입력, 로그, 출력, 상태를 검사할 수 있는 등 개별적으로 관찰 가능
          + 내구성: 예기치 않은 이유로 기계가 멈추거나 부작용이 발생하면 워크플로를 다시 시작해야 함.
               o 워크플로는 예기치 않은 이벤트가 발생했을 때 최대한 빨리 재시작할 수 있어야 하며, 이를 달성하는 한 가지 방법은 한 번의 작업이 여러 번의 동일한 작업을 수행한 것과 동일한 효과를 내는 비동작성.
               o 확실하지 않은 경우 전체 흐름을 아무런 결과 없이 재생. 이는 일반적으로 작업에 첨부된 고유 ID가 로그의 일부인 경우 부작용을 건너뛰는 로그 파일과 SDK를 사용하여 구현됨.
               o 또 다른 방법은 흐름 상태의 트랜잭션 스냅샷을 생성하여 각 작업 후에 상태를 저장하는 것. 다시 시작하려면 마지막 상태를 다시 로드하고 거기서부터 실행하면 됨
               o Windmill은 후자를 사용하며, 사용자 영역에서 원할 때 비활성화를 구현할 수 있다고 가정
          + 반응성: 웹훅이나 승인과 같은 이벤트에 따라 다시 재개될 때까지 흐름을 일시 중단

Windmill의 빠른 속도의 비결

     * Windmill은 Postgresql과 Rust를 활용하여 간단한 설계와 최적화를 통해 효율성을 극대화함

시스템 설계 및 큐

     * Windmill은 Rust로 컴파일된 단일 바이너리를 제공하며, 작업자와 서버는 Postgresql에 연결되어 있지만 서로에게는 연결되어 있지 않음
     * Postgresql 자체에서 큐를 구현하고, 작업은 API를 통해 외부에서 트리거될 수 있음

상태

     * 워크플로우 엔진은 작업을 유한 상태 기계(FSM)로 표현하며, Windmill은 전체 흐름 자체를 FSM으로 처리함

데이터 전달

     * Windmill은 데이터 전달을 위해 자바스크립트 표현식, 임시 폴더 공유, S3 통합 등 다양한 방법을 제공

작업자 효율성

     * Windmill의 작업자는 한 번에 하나의 작업을 처리하며, 컨테이너 없이 작업을 실행하여 성능을 향상시킴

결론

     * Windmill은 Postgresql과 Rust를 기반으로 단순한 설계와 최적화를 통해 매우 빠른 속도를 제공하는 오픈소스이자 자체 호스팅 가능한 서버리스 런타임 및 플랫폼임

GN⁺의 의견

   이 글에서 가장 중요한 점은 Windmill이 다양한 프로그래밍 언어를 지원하고, 복잡한 SDK나 배포 과정 없이 빠르게 워크플로우를 구축하고 테스트할 수 있는 통합 개발 환경을 제공한다는 것이다. 이러한 특징은 소프트웨어 개발자들에게 매우 유용하며, Windmill의 빠른 성능과 효율성은 개발자들이 더 나은 제품을 더 빠르게 출시하는 데 도움이 될 것이다. 이 글은 개발자들에게 흥미로운 내용을 담고 있으며, 특히 자체 워크플로우 엔진을 구축하거나 기존 엔진을 최적화하려는 이들에게 매력적일 것이다.

   Windmill - 파이썬 기반 회사 내부용 앱 작성 및 자동화 플랫폼 오픈소스

   작년 5월에 살짝 공개가 되었는데, 개발자가 아직 공개할 준비가 안되었다면서 10분후 YC 인터뷰 볼꺼에요! 하더니.. YC 통과 했다고 댓글을 적었는데요.
   YC통과하고 1년반 달리고 나서 정식으로 제품을 런칭 한거네요.

        Hacker News 의견

     * Windmill 개발자들은 ""한 가지 일을 잘하라""는 조언을 정반대로 실행한 것 같음. Windmill.dev를 봐도 소프트웨어가 무엇에 쓰이는지 명확하지 않음. Retool, Airflow, Temporal의 경쟁자인지, 노코드 워크플로우 빌더인지, 드래그 앤 드롭 UI 빌더인지, 온라인 IDE인지, 수많은 통합 기능이 있는지 혼란스러움.
     * 워크플로우 엔진의 속도가 일정 수준을 넘어서 중요한지 의문. 많은 워크플로우가 장기 실행 작업을 포함하기 때문에, 중요한 것은 멀티 테넌시, 즉 사용자가 원하는 만큼의 작업을 지원하면서 각 작업이 워크플로우 엔진에서 유일한 것처럼 예약되고 실행되는 능력임.
     * 비즈니스 프로세스를 스프레드시트, 개인 이메일, 관리자의 기억에서 웹 폼, 업로드, 자동화된 이메일, 대시보드로 옮기고 싶음. Airtable, Smartsheet, Budibase 등을 살펴봤지만, 프로젝트 관리에 더 초점을 맞춘 것 같고 캘린더 통합이나 이메일, 예약된 스크립트에 대해서는 만족스럽지 않음. 데이터에 대한 API가 있거나 필요하다면 코딩할 수 있으며, 관리자가 스프레드시트 뷰를 가지고 UI 작업을 일부 할 수 있고 프로그래머가 통합을 처리할 수 있는 로우코드 접근 방식을 선호함.
     * 사람들이 이렇게 많은 시간과 노력을 기울여 글을 쓰고도 맞춤법 검사기를 한 번도 사용하지 않는 것에 놀람. 2023년에도 기본적으로 맞춤법 검사를 하지 않는 텍스트 에디터를 사용하는 사람들이 있는지 궁금함.
     * 오픈소스라고 하면서 SSO 사용자 10명 제한이 있다는 것이 혼란스러움. 오픈소스는 일반적으로 코드 수정을 허용하지만, 어떻게 10명의 제한을 집행하는지 의문. 소스 코드를 살펴보니 라이선스 체크 코드가 있음. 오픈소스라면 누구나 그 코드를 제거할 수 있지 않을까? 수정이 불가능하다면 그것은 ""소스가 공개된"" 것이지 ""오픈소스""는 아님. 프로젝트가 멋져 보여서 상사에게 제안하고 싶었지만, 이 부분을 어떻게 설명해야 할지 모르겠음.
     * Windmill을 HN 런칭 때부터 팔로우했고, 1년 미만 전부터 더 많이 사용하기 시작함. Discord 서버가 매우 활발하고 Ruben이 주말에도 몇 분 안에 답변하고 버그를 수정함.
     * Windmill 시스템을 사용하고 싶지만, 라이선스 문제로 망설임. 대부분의 소프트웨어는 AGPLv3 하에 있지만, README의 상업 라이선스 섹션은 AGPL에 대한 광범위한 해석을 시사함. Windmill을 통해 기능을 구축하려면 제품도 AGPLv3이어야 한다는 것은, 심지어 API를 통한 호출만으로도 저작권법이 적용될 수 있다는 것을 의미함. 이는 Windmill을 ""완전히 오픈소스""로 포지셔닝하는 것이 기술적으로는 맞지만 실제로는 ""소스가 공개된"" 것에 더 가까움. Windmill이 라이선스를 이렇게 해석하기를 원하지 않는다면 명확히 해야 함.
     * Windmill은 훌륭함. 자체 호스팅 가능하고 개발자 경험(Developer Experience, DX)에 충실해야 함. 직장에서는 사용할 필요가 없었지만, 집에서 작은 웹 크롤러와 yt-dlp 작업을 실행하는 데 사용함. 매우 재미있는 도구임.
     * 라이선스에 대해 혼란스러움.
     * 데이터베이스에 코드를 저장하고 웹 IDE를 통해 편집하는 것과 깃(Git)에 코드를 체크인하고 일반 개발 및 피어 리뷰 과정을 통해서만 변경하는 것 사이의 균형을 찾는 방법을 아직 찾지 못함. Windmill은 주로 데이터베이스에 코드를 저장하지만 깃 리포지토리에서 동기화할 수 있는 API를 제공함. 특정 스크립트/기능/비밀을 제공된 리포지토리에서 가져온 워크플로우에만 제한하는 규칙을 강제할 수 있는 메커니즘이 있는지 궁금함.
"
"https://news.hada.io/topic?id=12062","2만 달러 현상금이 청구되었습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2만 달러 현상금이 청구되었습니다

Prettier 코드 포맷터의 성과와 향후 계획

     * Prettier는 자바스크립트 코드 포맷터로, 다양한 코딩 스타일을 세심하게 다루며 높은 채택률을 보임.
     * 삼항 연산자에 대한 작업이 완료되면 Prettier는 안정적인 상태에 도달하며, 이후 성능 개선에 집중할 예정임.
     * Prettier는 그동안 충분히 빠른 속도를 제공했으나, 경쟁 부족으로 인해 성능 향상에 큰 동기가 없었음.

성능 개선을 위한 경쟁과 보상

     * Prettier 팀은 Rust로 작성된 프로젝트가 Prettier 테스트 스위트의 95%를 통과할 경우 10,000달러의 보상을 제공하겠다고 발표함.
     * Vercel의 CEO Guillermo Rauch와 napi.rs가 추가 기금을 제공해 총 보상금이 22,500달러로 증가함.
     * Biome 프로젝트가 보상금을 획득하며, 단 3주 만에 여러 사람이 협력하여 호환성을 개선함.

Prettier의 경쟁력 강화

     * Biome 프로젝트는 Prettier와 호환되면서 훨씬 빠른 구현을 제공함으로써 Prettier에 성능 개선을 위한 도전을 제시함.
     * Fabio Spampinato가 Prettier의 CLI에서 많은 비효율성을 발견하고, 연말까지 이를 개선할 계획임.
     * Biome 프로젝트는 Prettier의 버그와 의문스러운 결정들을 발견하여 Prettier가 개선할 수 있는 기회를 제공함.

Prettier를 지원하는 기부금

     * Prettier는 다양한 기업과 개인의 기부를 통해 지속적인 성공을 거둠.
     * Indeed, Frontend Masters, Sentry, Salesforce, Airbnb, Cybozu 등의 기업과 Shintaro Kaneko, Suhail Doshi 등의 개인이 큰 금액을 기부함.
     * 이러한 기부금 덕분에 지난 2년간 매달 1.5k달러를 지급하여 Fisker Cheung과 Sosuke Suzuki가 Prettier 개발을 지속할 수 있었음.
     * 현재 예산으로는 8개월의 운영이 가능하며, 추가 기부를 요청함.

GN⁺의 의견

     * Prettier는 코드 포맷팅 분야에서 중요한 역할을 하며, 이번 성능 개선 경쟁을 통해 개발자 경험을 더욱 향상시키려는 노력이 돋보임.
     * Biome 프로젝트의 성공은 오픈 소스 생태계에서의 협력과 경쟁이 어떻게 긍정적인 변화를 이끌어낼 수 있는지를 보여줌.
     * 이 기사는 기술 커뮤니티 내에서 협력과 경쟁이 어떻게 상호 발전을 촉진하는지에 대한 흥미로운 사례를 제공함.

        Hacker News 의견

     *

     Prettier 팀이 왜 다른 프로젝트에 자금을 지원하는지 궁금할 것입니다! 실제로 Prettier는 JavaScript 코드 포맷터로서 지배적인 위치를 차지하고 있으며, 경쟁 부족으로 인해 성능 개선이나 다양한 엣지 케이스 해결에 대한 동기가 부족했습니다.
          + Prettier 팀이 다른 프로젝트를 지원하는 이유에 대한 의문이 있음. Prettier가 JavaScript 코드 포맷터로서 독점적인 위치를 차지하고 있으나 경쟁 부재로 인해 성능 향상이나 특수한 경우에 대한 수정에 대한 동기 부여가 적었음을 지적.
     *

     많은 사람들이 그 부분을 인정하지 않고 이유를 댓글로 달고 있습니다:
          + Biome 프로젝트가 모든 테스트를 매칭함으로써 Prettier의 많은 버그와 의문스러운 결정들을 발견했고, 이를 개선할 수 있을 것이라는 점을 의미함.
     *

     이것에 대해 매우 흥분되어 있습니다.
          + Biome 팀이 Prettier와의 95% 호환성을 빠르게 달성한 것에 대해 감탄. Rust를 사용한 JavaScript 포맷팅의 최대 속도 향상을 기대하며, Python 포맷터인 ruff의 추세를 따르고 있음. Wasmer가 Biome을 WASIX로 컴파일하기 위해 $2,500의 바운티를 제공했으며, Biome이 Wasmer에서 곧 실행될 수 있기를 희망함.
     *

     속도는 항상 환영받지만, Prettier가 좀 덜 독단적이었으면 좋겠습니다.
          + Prettier가 코드 포맷팅에 있어 너무 독단적이라고 느끼며, 특히 줄 길이에 대해 자신의 포맷팅을 유지하지 못하는 점에 불만을 표함. 다른 코드 포맷터에 비해 Prettier로 포맷된 코드가 덜 가독성이 좋다고 생각함.
     *

     내 모든 eslint 플러그인들이 Prettier를 위해 완벽하게 괜찮은 린터들을 제거한 것에 대해 여전히 화가 납니다.
          + Prettier가 너무 강압적이고 이해하기 어렵다고 느끼며, 요청하지 않은 또 다른 도구라고 생각함.
     *

     이것은 우리가 이제 다음 중요한 측면에 집중할 수 있음을 의미합니다: 성능. Prettier는 그 자체로 빠르지는 않지만 대부분의 사용 사례에 충분히 빠릅니다. 이것은 항상 불만족스러웠기 때문에 우리는 이에 대해 무언가를 하고 싶었습니다. 친근한 경쟁보다 더 좋은 방법은 없습니다.
          + Prettier의 성능에 대한 불만족을 해결하고자 Rust로 작성된 프로젝트에 $10k의 바운티를 걸어 Prettier 테스트 스위트의 95%를 통과하는 것을 목표로 함.
     *

     Rust로 포팅하는 것이 추세이긴 하지만, Prettier가 저장할 때마다 실행되기 때문에 속도 향상은 상당할 것입니다. 곧 Biome을 시도해볼 것입니다. Biome 프로젝트에 축하를 보냅니다!
          + Rust로의 포팅이 유행이며, 저장할 때마다 실행되는 Prettier의 속도 향상이 상당할 것으로 기대함. Biome 프로젝트에 대한 긍정적인 반응.
     *

     Biome에 대한 벤치마크가 어디에 있나요? Prettier보다 정확히 얼마나 더 나은 성능을 제공하나요?
          + Biome의 성능 벤치마크에 대한 질문이 있음. Prettier에 비해 얼마나 더 나은 성능을 제공하는지에 대한 궁금증.
     *

     이 글은 자바스크립트 버전을 개선하기 위해 자신들을 동기 부여하기 위해 이 일을 했다고 말합니다?
          + 자바스크립트 버전을 개선하기 위한 동기 부여로 새로운 프로젝트를 시작한 것에 대한 의문이 있음.
     *

     그래서 이것은 메인 구현체를 대체하는 것이 아닌가요? 그들은 단지 Rust로 작성된 호환 가능한 새 프로젝트에 자금을 지원한 것인가요?
          + Rust로 작성된 새로운 호환 가능한 프로젝트에 자금을 지원한 것이 메인 구현체를 대체하는 것이 아닌지에 대한 질문이 있음.
"
"https://news.hada.io/topic?id=11959","이사회 조치에 대한 나의 참여를 깊이 후회함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        이사회 조치에 대한 나의 참여를 깊이 후회함

        Hacker News 의견

     * 이사회의 행동에 대한 의심
          + 이사회가 Sam을 해고한 것에 대해 ""심각한 목표 불일치""나 ""근본적인 불화""와 같은 일반적인 이유를 대지 않고, 그를 문제가 있는 당사자로 묘사함(""솔직하지 못함"", ""신뢰 상실""). 이는 정당한 이유로 해고되었을 수도 있고, 오도하기 위한 의도일 수도 있음. 후자라면 이사회가 ""솔직하지 못한"" 쪽이 됨. 이사회의 침묵과 전략적 파트너들과의 협조 부족은 그들이 일관성 없는 당사자로 보이게 함.
          + Ilya가 지금 후회하는 것은 ""잡힌 것에 대해 부끄러움""을 느끼는 것처럼 보임. 즉, 카리스마 있는 공적 인물에 대한 비난과 쿠데타를 계획하는 과정에서 발생할 파장을 처리할 계획이 없었음을 의미함.
     * 비영리 조직에 대한 비판적 관점
          + AI의 위험에 대한 이해가 부족하지만, 비영리 조직이 이를 조사하고 해결책을 찾는 것은 가치 있는 일임. 이윤을 추구하는 기업들은 이를 하지 않을 것임(구글이 Timnit Gebru와 Margaret Mitchell을 해고한 사례를 통해 입증됨). 만약 그들이 정말로 그 사명을 믿는다면, 안전 기술을 개발하고 오픈소스로 공개해야 함. 그렇게 하면 AI 안전에 투자하지 않는 Microsoft, Google, Meta, Amazon 등이 무료로 사용할 수 있음. 하지만 이는 수익성이 높지 않기 때문에 대부분의 OpenAI 직원들이 더 나은 기회를 찾아 떠날 것임.
     * Microsoft에 대한 긍정적 전망
          + Microsoft에게는 일찍 찾아온 크리스마스 같은 상황임. 100억 달러 투자와 관련된 끔찍한 상황이 주요 인물들을 고용하는 기회로 바뀌었고, OpenAI는 생존을 위해 Microsoft에 인수될 필요가 있을지도 모름. 지난 72시간 동안의 절대적인 혼란을 고려할 때, OpenAI ChatGPT와 함께 무언가를 구축하려는 관심이 급격히 줄어들 수 있음.
     * 단어 선택에 대한 의문
          + ""참여""라는 표현은 그가 단순한 참가자였음을 시사하는 듯하지만, 실제로 그가 이를 주도했는지에 대해서는 알 수 없음.
     * 삭제된 트윗에 대한 반응
          + Shengjia Zhao의 삭제된 트윗은 상황을 더욱 악화시키는 것처럼 보임. 원칙에 따른 혼란이 필요하다고 생각했지만, 이 트윗은 상황을 더욱 악화시킴.
     * 미디어 스턴트에 대한 추측
          + 이 모든 것이 ChatGPT가 이사회 결정을 내리는 미디어 스턴트였을 수도 있음.
     * 후회에 대한 추측
          + Ilya가 후회하는 것은 상황이 역효과를 낳았기 때문일 수 있음. Microsoft가 OpenAI의 가치 있는 모든 것을 흡수하고 있으며, 그는 아무것도 남지 않을 것임을 알고 있음.
     * 상황에 대한 엔터테인먼트적 평가
          + 이 사건은 최근 몇 년 동안 Netflix, Disney, Amazon, Apple TV가 출시한 어떤 것보다도 더 흥미로움.
     * 후회와 미래에 대한 전망
          + Ilya가 깊이 후회하는 것은 분명하지만, 이제는 너무 늦었을 수 있음. Emmett Shear가 이끄는 Twitch를 사용해본 사람이라면, OpenAI가 새로운 기능을 빠르게 출시하는 것에 더 이상 두려워하지 않을 것임을 알려줄 것임.
"
"https://news.hada.io/topic?id=12026","구글 크롬, 2024년 6월부터 광고 차단 기능 제한 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    구글 크롬, 2024년 6월부터 광고 차단 기능 제한 예정

     * 2024년 6월부터 Google Chrome이 광고 차단 확장 기능에 대한 제한을 시작할 예정임
     * ""Manifest V3""라는 새로운 확장 프로그램 형식의 도입이 1년간 중단 되었다가 재개
     * Manifest V2 형식을 사용하는 현재의 Chrome 확장 프로그램은 24년 6월부터 비안정 버전(베타, 개발자, 카나리아 채널)에서 사용 불가능해짐

Google의 주장과 반박 의견

     * Google은 Manifest V3를 통해 브라우저의 자원 사용을 줄이고 개발자로부터 사용자의 개인정보를 보호할 수 있다고 주장
     * 그러나 Electronic Frontier Foundation(EFF)은 Google의 주장을 ""기만적이고 위협적""이라고 비판
     * Firefox의 추가 기능 운영 관리자도 Google의 개인정보 보호 주장에 동의하지 않으며, EFF는 Google의 ""자원 절약"" 주장에 대해서도 의문을 제기

Manifest V3의 영향

     * Manifest V3는 광고 차단 확장 기능에 영향을 미칠 것으로 모두가 동의
     * Google은 필터링 규칙의 수에 임의적인 제한을 두어 광고 차단 기능을 약화시킬 예정임
          + 원래 5천개 제한을 제시했으나, 반발때문에 3만개로 업그레이드 했음
          + 하지만 현재 uBlock Origin 에는 약 30만개 이상의 필터링 규칙이 포함되어 있으며, 추가 차단 목록에 의해 더 늘어날 수도 있음
     * Firefox는 Chrome과 달리 필터링 및 기타 기능에 제한을 두지 않고 Manifest V3를 구현할 계획

GN⁺의 의견

   이 기사에서 가장 중요한 점은 Google이 Chrome 브라우저의 광고 차단 확장 기능에 제한을 두는 새로운 정책인 Manifest V3를 2024년 6월부터 적용할 예정이라는 것이다. 이 변화는 사용자의 웹 서핑 경험과 개인정보 보호에 중대한 영향을 미칠 수 있으며, 이로 인해 사용자들이 다른 브라우저로 전환할 가능성도 있다. 이러한 정책 변화는 기술 산업 내에서 개인정보 보호와 광고 수익 사이의 긴장 관계를 반영하는 사례

        Hacker News 의견

     * 크롬에서 벗어나려던 중 적절한 광고 차단 확장 프로그램이 없으면 다른 브라우저로 옮길 것임. 파이어폭스를 사용해보고 좋다고 느낌. 댓글에서 Librewolf를 추천받아 확인할 예정임. 광고 차단이 충분했기에 pihole 설정을 미뤄왔으나 이제는 설치할 것임. 구글 덕분에 광고 차단을 강화하게 됨.
     * 유튜브를 넘어서 대부분의 광고가 악의적이며, 광고 차단기 없이는 웹이 안전하지 않고 사용하기 어려움. FBI도 온라인에서 안전을 위해 광고 차단기 사용을 권장함.
     * 크롬이 광고 차단기를 제한하고 크롬인지 아닌지를 명확히 구분할 수 있는 방법을 제공한다면, 사이트들이 파이어폭스나 다른 브라우저를 차단하기 시작할지 궁금함.
     * 비즈니스 측면에서 구글은 대부분의 수익을 광고에서 얻기 때문에 이해가 됨. 장기적으로는 구글의 검색 및 유튜브 미디어 제품에 해가 될 것이며, 사람들이 구글에 더 많은 비용을 들여 광고를 피하는 방법을 찾게 할 것임. 인간적인 측면에서는 이것이 가장 이상한 형태의 기업 괴롭힘처럼 느껴짐.
     * 더 많은 사람들이 실용적인 관점에서 파이어폭스를 사용하지 않는 것에 놀람. 개인적인 것과 업무용을 분리하기 위해 파이어폭스를 주로 사용함.
     * 크롬에서 광고 차단기를 차단하는 것으로 시작하여 다른 브라우저의 속도를 의도적으로 늦추는 행위는 독점금지법 위반으로 이어질 수 있음. 정부가 마이크로소프트에 대해 취한 조치와 같이 시장 지배력 남용으로 인해 문제가 될 수 있음.
     * 일반 목적의 컴퓨터가 있는 한, 광고 차단기가 승리할 것임. 네트워크 필터링을 완전히 차단하는 ManifestV4가 있다고 해도, AI 모델을 사용하여 광고처럼 보이는 것을 차단하는 GPU 드라이버를 실행할 수 있음.
     * 브라우저 외부에서 컴퓨터 또는 라우터 수준에서 광고를 차단하는 솔루션을 사용할 것을 권장함. 하지만 매우 적은 수의 사람들만이 이를 실행할 것임.
     * Manifest V3에서도 UBOL은 여전히 99% 이상의 광고를 차단함. 고급 기능은 손실되겠지만 많은 사람들이 이를 인지할지는 불확실함.
     * 구글에게 마지막이나 첫 번째 못이 될 것인가? 분명히 분할을 위한 근거가 될 것임.
"
"https://news.hada.io/topic?id=11977","인도에서 살펴봐야 할 8개의 스타트업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          인도에서 살펴봐야 할 8개의 스타트업

     * 세계에서 가장 인구가 많은 나라에서 새로운 바람을 일으키고 있는 8개의 스타트업들
     * Classplus(교육), Bhanzu(수학), Allo Health(성 건강), Kiwi(신용카드), Varaha(탈 탄소화), Ethereal Machines(제조), Zluri(SaaS 관리), ChistaDATA(데이터웨어하우징)

액션 가능한 인사이트들

     * 모델 혼합:
          + 인도 기업들은 역사적으로 해외에서 판매하기 쉬운 수평적 SaaS에 강점이 있었음
          + 점점 더 많은 인도 기업들이 내부를 들여다보고 전통적인 시장 분류의 레시피를 혼합하고 있음
          + 예를 들어, Classplus와 같은 SaaS 비즈니스는 마켓플레이스 경제를 기반으로 하고 있음
     * 새로운 레일 타기:
          + 인도의 신용카드 보급률은 낮음
          + 14억 명이 넘는 인구 중 신용카드 소지자는 3,000만 명에 불과
          + 하지만 인도의 국내 결제 네트워크(UPI)는 4억 명 이상의 인도인을 직불카드와 연결
          + 인도 중앙은행은 작년에 UPI를 신용 결제에 개방하여 핀테크 기업에게 새로운 기회를 창출
          + Kiwi는 이러한 변화를 활용하여 새로운 종류의 신용 상품을 개발한 스타트업의 한 예
     * 제조 혁신:
          + 인도는 오랫동안 소프트웨어 허브로 알려져 왔지만, Ethereal Machines과 같은 기업은 인도의 하드웨어 강점을 잘 보여줌
          + 벵갈루루에 본사를 둔 이 회사의 다축 CNC 기계는 항공우주, 방위, 자동차, 의료 등 다양한 분야의 고객과 함께 성장하는 대규모 고객층을 확보하고 있음
     * 수학의 마법:
          + 작년에 발표된 유네스코 보고서에 따르면 10~16세 인도 학생 중 기초 수학에 능숙한 학생은 12.3%에 불과한 것으로 나타났음
          + Bhanzu 같은 플랫폼은 이 격차를 줄이기 위해 노력하고 있음
          + '세계에서 가장 빠른 인간 계산기'로 알려진 닐라칸타 프라카쉬가 설립한 Bhanzu는 수리력을 키우고 학습에 대한 애정을 심어주기 위해 설계
     * 성 혁명:
          + 2억 명이 넘는 인도인이 발기부전과 같은 성 건강 문제로 고민하고 있음
          + 오랜 오명과 숙련된 의사의 부족으로 환자들은 종종 효과적이지 않거나 위험한 치료법에 의존
          + Allo Health는 이 문제를 해결하는 데 중점을 둔 스타트업
          + 이 회사는 온라인과 오프라인 클리닉을 통해 과학에 기반한 전체론적 치료를 제공
          + 투자자들은 이 회사가 다른 의료 기업가들이 따라야 할 유망한 모델이라고 생각

현대 인도 기술 생태계의 세 가지 현실

     * 첫째, 인도는 점점 더 자립적인 벤처 시장으로 변모 중
          + 2022년에는 Lightspeed India, Blume Ventures, Fireside Ventures, Artha Select와 같은 펀드가 수억 달러의 자금을 조달하여 생태계의 스타트업을 지속적으로 지원
          + Peak XV(구 세쿼이아 인디아)는 20억 달러의 자금만 모았음
          + 인도에서 가장 성공적인 기업들이 규모를 확장함에 따라 외국 자본이 필요할 가능성이 높지만, 자본 가용성 측면에서는 점점 더 견고해지고 있음
     * 둘째, 인도는 하향식 디지털 혁명의 초기 단계에 있음
          + 2010년부터 인도 정부는 ""India Stack""이라는 이니셔티브를 시작
          + 이 이니셔티브의 목표는 인도 전역에 걸쳐 신원, 데이터 및 결제 상호 작용을 위한 디지털 빌딩 블록을 구축하는 것
          + 이 이니셔티브는 괄목할 만한 결실을 맺어서, 현재 India Stack은 13억 1천만 명(전체 인구의 95%)의 디지털 ID를 생성하고, 매월 수조 루피를 처리하는 결제 네트워크를 구축했으며, 데이터 거버넌스 구조를 만들었음
          + 이는 정부 주도의 기술 이니셔티브 중 가장 인상적인 사례 중 하나이며, 새로운 세대의 기술 혁신에 힘을 실어줄 수 있는 기반 인프라를 제공
     * 마지막으로 인도의 인구통계학적 이점도 무시하기 어려움
          + 인도는 현재 지구상에서 가장 인구가 많은 국가로, 노동 인구가 증가하고 있음
          + 6억 명 이상의 인도인이 18~35세 사이이며, 2041년에는 전체 인구의 59%가 20~59세의 노동 가능 연령대에 속할 것으로 예상
     * 인도는 관심을 기울일 가치가 있는 점점 더 매력적인 시장

Classplus: ""SaaSTra"" 의 선구자

     * 인도의 SaaS 부문은 오랫동안 인도 스타트업 생태계의 최고 지점 중 하나
     * 벤처 자금의 20%를 유치하고 Zoho 및 Freshworks와 같은 플레이어를 포함하여 비슷한 비율의 유니콘에 기여
     * SaaS 부문은 전통적으로 (i) 수평적 SaaS, (ii) 인프라 및 개발 도구, (iii) 수직적 SaaS로 구분
          + 역사적으로 인도는 국제 수익(특히 미국에서)을 쉽게 얻을 수 있는 수평적 SaaS에 강했음
          + 업계에서는 SaaS 수익의 75%가 인도외의 해외에서 유입되는 것으로 추산, 나머지 25%는 주로 온프레미스 ""맘앤팝"" SaaS부터 빠르게 성장하는 클라우드 우선 SaaS에 이르기까지 버티컬 SaaS 부문에서 나옴
          + 인도 버티컬 SaaS 부문의 주요 과제는 수익 창출이었음
     * 인도에는 6천만 개 이상의 회사가 있지만 납입 자본금이 125만 달러 이상인 회사는 19,500개에 불과함
          + 이는 일반적으로 소프트웨어 비용을 지불하는 것을 좋아하지 않거나 지불할 여력이 없음을 의미
          + 인도의 회계 플랫폼인 Tally는 600만 명의 사용자중 3분의 1만이 제품 비용을 지불하고 있는 것으로 추산. 나머지는 불법복제 버전을 사용
     * 인도의 SaaS 유니콘 중 인도 국내 시장을 겨냥한 기업은 하나도 없음. Zoho, Freshdesk, Druva, Postman 및 Zenoti는 모두 글로벌 기업으로, 매출의 90% 이상이 글로벌 고객으로부터 발생
     * 어떤 회사가 최초의 인도 내부 SaaS 유니콘이 될 수 있을까? Classplus 가 가능하다고 봄
     * Classplus는 교사(인도에는 수많은 교사가 있음)가 비즈니스를 관리하도록 돕는 도구
          + 커뮤니케이션 기능(자녀가 수업에 결석하면 부모에게 알리는 등)과 결제 API 링크가 포함된 직관적인 학습 관리 소프트웨어(LMS) 제품을 제공
          + 소프트웨어는 저렴하지 않아서, 연간 구독료가 100달러가 넘음
          + 그러나 50,000명 이상의 교사가 연회비를 지불
          + Classplus의 신규 고객 중 약 5분의 1은 교육 외부의 창작자 또는 영향력 있는 사람
          + 회사 사용자 기반의 약 10%는 소비자에게 콘텐츠(실습 예제, 고급 테스트, 비디오 강의)를 판매할 수 있는 독특한 시장을 활용
          + Classplus는 이를 통해 촉진하는 연간 시장 지출에서 1억 5천만 달러 이상의 일부를 차지
     * 이들이 개척한 플레이북은 SaaS-plus-Marketplace 모델
          + 본질적으로 이들 회사는 SaaS를 시장 형성을 위한 연결 고리로 사용한 다음 발생하는 거래를 일부 가져와서, 일부는 이를 통해 핀테크나 대출 상품을 판매하기도 함
          + 나는 이 모델을 ""SaaS""와 ""Transaction""의 합성어인 ""SaasTra""라고 부르고 싶음
          + 인도 SaaS의 큰 부분이 SaaSTra 모델(서구와 같은 순수 SaaS가 아닌)을 사용하게 될 것
     * Classplus는 인도에서 가장 혁신적이면서도 잘 알려지지 않은 SaaS 스타트업 중 하나
          + 교육 기술 분야로 인식되는 것이 사실이지만 버티컬 SaaS 플레이이자 비즈니스 모델의 개척자임
          + SaaSTra 접근 방식은 효과가 있었으며, 지난 몇 년 동안 매출이 10배, 지난 1년 반 동안 약 4배 성장하는 등 성장이 급격하게 이루어졌음
          + Classplus의 상승과 성장에서 우리는 인도 버티컬 SaaS 분야의 차세대 물결에 영감을 주고 뒷받침할 모델을 보고 있음

Bhanzu: 수학에 대한 사랑 키우기

     * 수학은 학습 세계의 핵심임
          + 수학의 원리는 인간 활동의 거의 모든 영역에 광범위하게 적용되며, 아이들에게 논리적으로 사고하고 이론을 적용하며 객관적인 추론을 통해 문제를 해결하도록 가르침
          + 수학적 사고의 보편적 관련성은 학업 및 직업적 성공 그 이상의 의미를 지닌 중요한 삶의 기술
          + 수학을 배우면 얻을 수 있는 수많은 이점과 직장에서 이러한 기술에 대한 필요성이 커지고 있음에도 불구하고, 많은 학생들이 여전히 수학을 어렵게 생각하며 그 개념을 제대로 이해하는 데 어려움을 겪고 있음
          + 수학에 대한 이러한 두려움을 바꾸고자 하는 것이 바로 Bhanzu의 목표
     * Bhanzu는 수학을 재미있고 공감할 수 있는 과목으로 만들고 수학을 스포츠, 예술 형식, 인간 경험으로 홍보함으로써 전 세계적으로 수학 공포증을 근절한다는 비전을 가진 에듀테크 스타트업
          + 학생들이 잠재력을 최대한 발휘할 수 있도록 지원하고 수학이라는 렌즈를 통해 과학, 코딩, AI를 소개함으로써 꿈과 역량 사이의 간극을 좁히고 있음
          + 이를 위해 Bhanzu는 세계에서 ""가장 심도 있는"" 수학 커리큘럼을 활용
          + 이 커리큘럼은 ""세계에서 가장 빠른 인간 계산기""로 알려진 회사 설립자 닐라칸타 바누 프라카시(Neelakantha Bhanu Prakash)에 의해 공식화되고 설계됨
          + 수학에 대한 그의 기술과 열정은 학생들뿐만 아니라 헌신적인 교육자 팀에게도 영감을 줌
     * Bhanzu는 다양한 비영리 수리력 프로젝트를 통해 시작했으며, 인도의 30,000명 이상의 학생들에게 영향을 줌
          + 그 과정에서 25가지가 넘는 다양한 커리큘럼을 시험하고 개선
          + 3년이 넘는 기간에 걸친 광범위한 연구 끝에 2021년에 첫 번째 온라인 라이브 수업 코스웨어를 출시하고 10개국 이상에서 수천 명의 학생을 교육
          + Bhanzu는 기초부터 커리큘럼, 실제 응용 문제까지 수학의 모든 영역을 아우르는 커리큘럼을 구축했음
          + 이러한 총체적인 접근 방식은 학생들의 수학에 대한 자신감을 키우고 호기심을 불러일으키며 학습 및 인지 능력을 향상시킴
     * Bhanzu의 전반적인 목표는 숙련된 수학자를 양성하는 것뿐만 아니라 수학에 대한 애정을 키우고 미래의 사고 리더(Thought Leader)를 양성하는 것
          + 이 회사는 수학을 단순한 과목이 아닌 스포츠나 게임처럼 즐길 수 있는 것으로 인식하고 있음
          + 수학 교육에 대한 이 게임화된 접근 방식은 이미 수만 명의 학생과 학부모의 삶을 변화시켰으며, 앞으로 더 많은 변화를 가져올 것
          + 향후 5년 내에 1억 명의 학생의 학습 궤도에 영향을 미치겠다는 사명을 가진 Bhanzu는 이미 수학과 학습 자체에 대한 애정을 키우며 전 세계 학생들의 삶을 변화시키고 있음

Allo Health: 인도의 성 건강(Sexual Welness)을 변화시키는 회사

     * 방대한 의료 환경 속에서 일부 중요한 영역은 여전히 낙인과 잘못된 정보에 가려져 간과되고 있음. 성 건강(Sexual health)이 그러한 예 중 하나
     * 선구적인 디지털 우선 의료 클리닉인 Allo Health는 성 건강에 대한 낙인을 없애고 모든 개인에게 양질의 의료 서비스를 제공한다는 숭고한 사명을 수행중
     * 설립자 프라나이 지브라즈카는 Ola(모빌리티 플랫폼 기업, 승차공유 서비스와 전기 이륜차를 직접 생산)의 창립 파트너 중 한 명으로 활동하며 풍부한 운영 경험을 쌓았음
     * Ola에서 10년 가까이 근무하는 동안 프라나이는 식품 사업부의 최고운영책임자(COO) 겸 CEO를 역임
     * 무엇보다도 프라나이는 의료 서비스 경험이 있는 가족 출신으로 Allo를 통해 수백만 명의 삶에 영향을 미치고자 하는 깊은 열정을 가지고 있음
     * 알로는 어떤 서비스를 제공할까?
          + 이 회사는 발기부전부터 성관계에 대한 고민까지 성 건강을 위한 종합적인 솔루션을 제공하는 종합 플랫폼으로 운영됨
          + 전문가 상담, 개인 맞춤형 치료 계획, 약물 공급, 진단 테스트, 신중한 의료 서비스 제공 등의 서비스를 제공
     * 온라인 및 오프라인 개입을 혼합하여 이루어지는데, 이를 위해서는 먼저 인도에서 Allo Health의 서비스가 왜 필요한지 생각해 볼 필요가 있음
          + 인도에서는 성 건강 문제가 널리 퍼져 있으며, 2억 명이 넘는 사람들이 발기부전이나 조루와 같은 질환으로 고생
          + 이러한 문제는 나이가 들면서 더욱 두드러져 20세에서 55세 사이의 인구 상당수가 영향을 받고 있으며, 안타깝게도 인도의 성 건강 환경은 심각한 장애물에 직면
          + 가장 큰 문제 중 하나는 신뢰할 수 있는 성의학 전문 임상의가 심각하게 부족하다는 것
          + 인도에는 이 분야에 대한 교육을 받은 현대 의학 전문의가 600명도 채 되지 않아 양질의 치료를 받을 수 있는 기회가 제한됨
          + 성 질환에 대한 효과적인 과학적 근거가 있는 치료법이 존재하지만, 자격을 갖춘 임상의가 부족하기 때문에 제대로 활용되지 못하는 경우가 많음
          + 대신 대체 의학 및 자가 치료가 널리 퍼져 잘못된 정보와 오해를 조장하고 있음
     * Allo Health는 이러한 환경이 제공하는 특별한 기회와 필요성을 파악
          + 프라나이의 팀은 이러한 공백을 메우기 위해 강력하고 포괄적인 시스템을 구축
          + 위약(Placebo, 플라시보)이나 일반 솔루션을 제공하는 대신 임상의를 플랫폼에 통합
          + 강력한 분류 시스템, 확장 가능한 의사 결정 지원 시스템(DSS), 교육 메커니즘을 통해 플랜 전환율과 순응도를 높이고 잠재적 경쟁에 대한 강력한 방어를 보장
     * 또한 다양한 채널에 걸쳐 확장할 수 있는 Allo Health의 능력도 주목
          + 온라인에서 오프라인 채널로 원활하게 전환하여 신뢰도를 높이고, 유사한 환자 니즈를 해결하기 위해 다른 접근 방식을 활용하여 잠재적 경쟁업체와 차별화
          + 인도 환경에서는 하이브리드 접근 방식이 필수적
               o 소비자는 온라인에서 의료 서비스를 자주 발견하지만 평균 주문액(AOV)과 반복 참여는 오프라인 개입을 수반하는 경우가 많기 때문
               o Allo Health는 이러한 현실을 고려하여 개발
     * 프라나이의 비즈니스는 광범위한 시장 트렌드에 편승하여 절실히 필요한 제품군을 제공중
     * 성 건강에 대한 낙인을 없애고자 하는 이 회사의 사명은 인도 의료 생태계의 광범위한 움직임과 맞닿아 있으며, 인도가 발전하고 의료 접근성이 핵심 관심사로 떠오르면서 Allo Health와 같은 혁신적인 기업은 심오하고 지속적인 영향을 미칠 수 있는 잠재력을 가지고 있음
     * Allo는 또한 인도의 광범위한 트렌드로부터 혜택을 받고 있음
          + 인도 의료 기회의 규모(그리고 아직 개발되지 않은 잠재력)
               o 기술 기업의 첫 번째 물결은 환자와 의료 서비스 제공자를 연결하는 데 중점을 두었으며, 낮은 가치 포착으로 인해 그다지 큰 성과를 거두지 못했음
               o 진정한 가치 포착은 전달 또는 의약품 유통에 대한 풀스택 접근 방식과 함께 제공
          + 헬스케어 스타트업의 초점 변화
               o 인도에서 부유층의 의료 서비스 접근성은 대부분 해결된 문제임
               o 따라서 온라인과 오프라인을 결합하면 오프라인 전용 제품보다 더 나은 서비스를 제공할 수 있는 카테고리가 디지털 기업이 만들어져야 할 분야
               o 낙인이 찍혀 있고, 긴급성이 제한적이며, 준수해야 할 필요가 있는 카테고리가 특히 여기에 적합
          + 물리적 세계의 포용
               o 신뢰가 낮은 경제, 특히 사용 빈도가 낮은 사용 사례에서는 오프라인 서비스가 더 효과적인 경우가 많음
               o 따라서 확장 가능한 클리닉 체인을 구축한 Allo Health의 전략이 정답
               o 이 모델은 유사한 역학 관계를 가진 지역 및 기타 카테고리에서도 잘 작동함

Kiwi: UPI 에 기반한 가상 신용카드

     * 다른 곳과 마찬가지로 인도에서도 신용카드는 많은 사랑을 받는 금융 상품
     * 월간 카드 지출액은 5년 만에 3배 증가하여 현재 160억 달러에 달함
     * 인도 은행에서 가장 수익성이 높은 상품 중 하나로, 최대 5.5%의 순자산 수익률을 제공하는 등 발급사들도 신용카드를 선호
     * 그렇기 때문에 인도만한 경제 규모에 신용카드 소지자가 3,000만 명에 불과하다는 사실이 의아하게 느껴질 수 있음
     * 4억 명에 달하는 '소비 인구'를 감안하더라도 이는 매우 적은 수치인데, 그 이유는 크게 세 가지
          + 제공 비용이 많이 비쌈 : 신용카드는 은행이 배포하고 서비스하는 데 비용이 많이 들기 때문에 돈을 많이 쓰는 사람들에게만 제공할 수 있음
          + 개방형 액세스는 위험함 : 일회성 대출과 달리 카드는 최종 사용처가 정해지지 않은 채 소비자에게 영구적인 신용 한도를 제공. 소득이 불확실하고 중산층도 한 번의 불운으로 재정적 어려움에 처할 수 있는 나라에서 큰 신용 한도를 제공하는 것은 너무 위험함
          + 어려운 인수(Underwriting) : 가맹점도 마찬가지로 인수 및 서비스가 어려움. POS 단말기의 하드웨어 비용만 해도 대부분의 인도 소매업체가 카드를 받는 데는 엄청난 비용이 들고, 가맹점 수가 적다는 것은 고객 수가 적다는 것을 의미하며, 플라이휠이 돌아가기 시작하지 않음
     * 따라서 인도에서 신용카드는 부유층을 위한 일종의 장난감
     * 애플 스토어에서는 사용할 수 있지만 노점상에서 Granny Smiths(사과)를 사는 데는 사용할 수 없음
     * 수억 명의 인도인에게 신용카드를 저렴하고 위험 부담이 적은 방법으로 제공할 수 있다면 얼마나 좋을까?
          + 하지만 이미 4억 명의 인도인과 5천만 명의 판매자를 연결하는 인도 네트워크가 있음
          + 인도의 범용 결제 네트워크인 UPI(Unified Payments Interface) 는 카드 네트워크에 비해 훨씬 저렴한 비용으로 연간 2조 달러 이상의 거래를 처리
          + 현재 UPI의 거의 모든 거래는 직불 거래에 대한 것이지만, 작년 말 인도 중앙은행은 이 네트워크를 신용 거래에도 개방했음
     * 핀테크 업계 고위 임원이었던 Anup Agrawal, Mohit Bedi, Siddharth Mehta는 이 점에 주목했음
          + 인도의 대부분의 신용카드 소지자와 마찬가지로, 이들은 자신의 카드가 UPI의 8분의 1밖에 승인되지 않고 다른 곳에서는 사용할 수 없다는 사실에 불만을 품고 있었음
          + 그들은 새로운 회사인 키위와 함께 이 문제를 해결하기로 결정
     * 키위는 고객에게 UPI 레일에서 작동하는 가상 신용카드를 제공
          + 이 가상 카드는 최대 50일 무이자 크레딧, 월별 결제, 리워드 포인트, 상품 할인 등 일반 신용 카드의 모든 혜택을 제공
          + 일반 신용카드와 달리 5천만 개의 UPI 가맹점에서 스캔하여 결제할 수 있음
          + 따라서 사용자는 새로운 키위 카드로 10루피(12센트)의 차이 한 잔을 구입할 수 있음
     * 키위의 오퍼링은 은행에게 거대한 신규 시장을 열어줌
          + 이 서비스는 저렴한 UPI 레일에서 작동하고 비자/마스터카드 네트워크 외부에 있기 때문에 거래 비용이 훨씬 낮고 소액의 거래 및 사용자를 지원
          + 또한 유통 및 서비스 비용이 낮기 때문에 이전에는 불가능했던 은행용 저한도 카드의 전체 카테고리가 열림
          + 신용카드는 직불카드보다 훨씬 더 수익성이 높기 때문에(규제 당국은 거래 규모에 따라 판매자에게 최대 1.7%의 수수료를 부과할 수 있도록 허용함) 은행이 UPI를 통해 수익을 창출할 수 있음
          + 6월에 출시된 이 앱은 이미 엄청난 거래 속도를 보이고 있으며, 평균 사용자가 매달 17번의 거래를 하고 300달러를 지출하
          + Kiwi는 은행 파트너십을 확장하여 이전에는 카드를 사용할 수 없었던 새로운 고객 세그먼트를 인수할 수 있도록 하고 있음
     * 물론 위험도 존재
          + UPI 신용카드는 한도가 낮고 지출 금액이 적기 때문에 발급사에게 일반 카드만큼 수익성이 좋을지는 아직 지켜봐야 함
          + 기존 UPI 앱과의 경쟁이 불가피하며, 이들 중 일부는 카드 마케팅에 막대한 비용을 지출할 것
          + 하지만 방대한 소비자 및 가맹점 네트워크를 활용할 수 있는 credit-on-UPI는 수억 명의 인도인에게 소비자 신용을 제공할 수 있는 한 세대에 한 번뿐인 기회

Varaha: ""자연 기반"" 탈탄소화

     * 탄소중립을 향한 경쟁에서 ""에너지 전환""이 대화의 대부분을 차지
          + 하지만 온실가스 배출량의 약 25%는 농업, 임업, 토지 이용(AFOLU) 패턴에서 발생하며, 에너지 믹스를 다변화한다고 해서 이를 제거할 수는 없음
          + 청정 연료는 배출량을 줄일 뿐, 인간 활동이 이미 대기에 추가한 과도한 탄소를 제거하지는 못함
          + 또한 에너지 전환은 생계를 위해 농업 및 관련 활동에 의존하는 남아시아 및 사하라 사막 이남 아프리카 지역 사회를 무시함
          + 전 세계적으로 5억 명이 넘는 소규모 농가가 기후 변화의 영향을 받고 있지만 온실가스 배출을 줄이고 탄소 격리를 개선하는 농업 관행을 채택할 재정적 인센티브가 없음
          + 2050년까지 탄소 중립을 달성하겠다고 약속한 기업이 150개가 넘으면서 배출량을 상쇄해야 한다는 압박이 커지는 중
     * Varaha는 기후 변화에 가장 큰 영향을 받는 지역사회를 기후 변화와의 싸움의 전면에 내세우며 그 중심에 섬
          + 이 스타트업은 소규모 농가와 농촌 지역사회의 탈탄소화를 지원하는 세계 최고의 기술 플랫폼을 구축하고 있음
          + 바라하는 동급 최고의 과학 및 디지털 측정, 보고 및 검증(MRV)을 통해 검증 가능한 추가 '자연 기반' 크레딧을 생성
          + 소규모 농부 및 토지 관리인들과 긴밀히 협력하여 탄소 방지 및 제거 프로젝트를 개발함으로써 이를 달성
          + 바라하의 프로젝트 포트폴리오에는 재생 농업, 농림업, 맹그로브 복원, 바이오 숯 생산 등이 포함
     * 현재 탄소배출권 생태계는 탄소배출권 생성 및 검증을 위해 저기술적인 방법에 의존
     * 그 결과 프로세스가 불투명해져 크레딧의 품질이 떨어지고 궁극적으로 이 메커니즘의 근본적인 취지가 무색해짐
     * 바라하는 블록체인 지원 SaaS 도구를 개척하여 이러한 문제를 해결
          + 전략적 파트너와의 협업을 통해 탄소배출권 생성 프로젝트를 위한 농장/산림 등록을 신속하게 처리하여 수백만 에이커의 토지에 대한 접근성을 제공
          + 사용자 친화적인 모바일 앱은 농부, 농림업 종사자, 임업인의 등록을 간소화하여 토지 소유권, 관리 관행, 경계에 대한 필수 데이터를 캡처
          + 고급 원격 감지 기반 머신러닝 모델을 사용하여 데이터를 수집하고 분석하여 현장에서 지속 가능한 관행을 감지할 수 있도록 지원
          + 토양 샘플 데이터, 가스 배출 데이터, 생지화학 모델을 포함한 과학적 탄소 정량화 방법을 통해 생성된 모든 탄소 배출권을 블록체인에 기록하여 투명성과 불변성을 보장
          + 또한 스마트 계약을 통해 이해관계자에게 신속하게 지급할 수 있어 지속적인 참여를 촉진
          + 바라하의 엔드투엔드 탄소 프로젝트 지원 모델은 농부와 지역사회의 자연 자산을 활용하여 탄소 배출을 방지하고 제거하는 동시에 탄소 시장 금융을 활용하여 지속 가능한 관행에 인센티브를 제공
          + 바라하는 지역 사회 중심의 과학 우선 접근 방식을 통해 자연 기반 기후 솔루션을 개발하는 세계 최고의 기업이 되었음
     * 바라하는 탄소배출권 판매 수익의 대부분을 소액주주 및 토지 관리 파트너와 직접 공유
     * 현재 진행 중인 프로젝트는 5개국(인도, 네팔, 방글라데시, 케냐, 탄자니아)에 걸쳐 100만 헥타르가 넘는 면적에 걸쳐 있음
     * 바라하의 프로젝트는 직접적인 소득 증대 및 CO2 배출량 감소 외에도 다양한 공동 이익을 창출
          + 예를 들어, 인도강유역 평원의 7개 주에 걸친 주력 재생 농업 프로젝트는 토양 유기물 개선, 침식 감소, 수질 개선에 도움을 주고 있음
          + 이 프로젝트의 크레딧은 대부분 탄소 제거 크레딧으로, 기후 변화를 되돌릴 수 있는 긍정적인 기여를 하고 있음

Ethereal Machines: 인도에서 제조

     * 핵심 키워드는 ""제조""가 아니라 ""혁신""
     * 인도는 제조업 강국으로, 2047년까지 향후 25년 동안 그 잠재력이 완전히 발휘될 것. 그 해는 인도 독립 100주년이 되는 해
     * IT 서비스 부문은 앞으로 펼쳐질 미래를 가장 잘 대변하는 분야
          + 지난 30년 동안 광범위한 시장에서는 인도의 IT 서비스 성공이 혁신이 아닌 노동력 착취에 기인한 것으로 간주
          + 그러다 약 10년 전, 인도는 글로벌 고객을 유치하고 전 세계 시장에서 성공할 수 있는 소프트웨어 제품 회사를 탄생시키기 시작
          + 시작은 미약했지만 혁신의 물줄기는 곧 홍수가 될 것
     * Ethereal Machines의 리더인 카우식 무다와 나빈 자인은 5축 CNC 기계를 만들다가 두 가지 사실을 알게 됨
          + 첫 번째는 소재와 완제품 부품이 프린팅(적층 제조) 분야에 흥미를 끌었지만, 더 큰 시장 기회는 밀링(감산 제조) 분야에 존재한다는 사실
               o 항공우주, 방위, 자동차, 의료 분야에서는 수백만 개의 정교한 부품을 미크론 단위의 정확도로 절단해야 함
               o 5축 기계가 3축 또는 4축 기계에 비해 제공하는 속도와 비용의 개선은 품질 저하 없이 엄청난 수준
               o 하지만 독일과 일본산 장비는 동일한 주문량의 기계에 비해 엄청난 비용이 들기 때문에 이러한 이점을 제대로 이해하지 못함
          + 두 번째는 진정한 혁신을 빠른 속도로 확장하는 데 필요한 비즈니스 모델
               o 가장 큰 장애물은 다축 제조에 능숙하다고 주장하는 젊은 팀에 대한 고객의 신뢰
               o 창업자들은 테스트를 위해 고객 현장에 기계를 보관해 달라는 요청을 반복해서 받았고, 대금은 12개월이 지난 후에야 지급
               o 이러한 제약 조건은 스타트업이 견디기 어려운 것이었으며, 특히 벤처캐피털의 자금 지원이 드문 제조업 분야에서는 더욱 그러했음
               o 벤처 투자자들은 ""하드웨어 마진이 있는 지루한 공작 기계 사업""이라고 생각해서, 이 팀에게 제조 마켓플레이스를 운영하여 주문을 받아 다양한 서비스 업체로 보내는 방식으로 전환할 것을 제안
               o 조언은 객관적으로 타당할 수 있지만, 주어진 팀과 시장에 적합한 것이 무엇인지 파악하는 것이 중요. 이 제안은 창업자들의 핵심 역량을 활용하지 못했음
     * 결국 Ethereal은 기계, 노동력, 생산 공정을 모두 관리하는 방식을 채택
          + 한 고객을 위해 단 한 대의 사내 기계로 정밀 부품을 제조하던 것이 이제는 몇 달치 주문이 밀려 있는 다양한 주문을 처리하는 Ethereal 기계 농장으로 변모
          + 재주문 유입 경로가 넓어지고, 신규 고객이 문을 두드리고, 탄탄한 시리즈 A, 인도의 제조 혁신에 활력을 불어넣는 팀, 이 모든 것이 이더리얼의 성장에 원동력이 됨
     * 방갈로르의 피냐 산업 지역에 위치한 이 작은 신생 기업은 이제 버튼 클릭 한 번으로 전 세계 모든 사람을 위한 제품을 제조할 수 있게 되었음
     * 웹사이트의 한 줄에서 알 수 있음: ""CAD 파일을 업로드하세요. 즉시 견적을 받으세요. 부품을 제조하세요.""

Zluri: ""SaaS 확산"" 관리하기

     * 소프트웨어는 내부 운영 간소화부터 고객 경험 향상에 이르기까지 기업 전반에 걸쳐 중추적인 역할을 하며, SaaS는 이러한 역동적인 환경의 원동력으로 부상.
     * 작년에 전 세계적으로 SaaS에 3,000억 달러 이상이 지출됨
     * 기업과 직원들은 다양한 업무에 수많은 소프트웨어 애플리케이션을 사용하고 비용을 지불하기 시작했으며, 기업당 최대 500~1,000개의 클라우드 소프트웨어 애플리케이션을 사용하는 경우도 있음
     * 이러한 'SaaS 확산'으로 인해 많은 보안 문제, 소프트웨어에 대한 과도한 지출, 사용 및 채택 문제가 발생
     * 그렇다면 이러한 SaaS 확산과 이로 인해 발생하는 문제에 대해 무엇을 할 수 있을까?
     * Zluri는 소프트웨어 효율성과 보안을 향상하고 SaaS 사용 및 구독을 최적화하는 선구적인 솔루션
          + 대부분의 기업이 SaaS 스택의 10%만 사용한다는 사실을 발견
          + Zluri는 기업이 타사 소프트웨어에 대한 액세스를 검색, 추적, 관리 및 보호할 수 있는 소프트웨어를 제공
          + 이 소프트웨어의 장점은 CIO와 IT 부서가 소프트웨어 지출에 대한 가시성과 제어를 확보하고, 다양한 애플리케이션에 대한 직원의 온보딩 또는 오프보딩을 관리하며, 직원 또는 역할별로 액세스를 보호할 수 있다는 점
     * Zluri 이전에는 소프트웨어 관리가 번거로운 작업이었음
          + 조직은 전용 소프트웨어 없이 수많은 개별 애플리케이션을 추적해야 했고, 조직이 확장됨에 따라 이 문제는 더욱 커져 더 많은 SaaS 애플리케이션이 필요하게 되었음
          + 팀원들은 때때로 자신의 계정을 사용하여 소프트웨어 구독을 구매해야 했고, 이로 인해 구독 갱신 기한과 환급이 복잡해지기도 했음
          + Zluri 플랫폼을 사용하면 조직에서 사용 중인 다양한 소프트웨어 제품에 대한 액세스 권한을 가진 사용자를 추적하여 업무 분리를 시행할 수 있음
          + 또한 Zluri를 통해 팀은 AI 지원 액세스 검토 기능을 자동화하여 시간을 절약하고 생산성을 높일 수 있음
     * 2020년 설립 이후 Zluri는 티팔티, 레이저페이, 트래블로카 등 선도적인 기술, 게임, 금융 서비스 기업을 고객으로 확보하며 전 세계적으로 성장
     * 올해 초, Zluri는 시리즈 B 펀딩 라운드를 성공적으로 마감했으며, 이번 투자에는 Lightspeed가 주도적으로 참여. 향후 비즈니스가 어떻게 발전할지 기대가 됨

ChistaDATA: 오픈소스 데이터 웨어하우징

     * 지난 10년 동안 거대 인터넷 기업이 등장하면서 인프라 SaaS 시장은 폭발적으로 성장
     * 이러한 플랫폼은 엄청난 규모를 가능하게 했지만 비용이 많이 드는 경향이 있음
     * 이 범주에 대한 기업의 지출이 증가함에 따라 인프라 및 분석 스토리지에 대해 훨씬 더 세밀하게 제어하는 것이 합리적
     * 그렇지 않으면 기업은 공급업체에 막대한 현금을 지불하고 공급업체 종속으로 인해 제약을 받을 수 있음
     * 일부 공급업체가 데이터 및 사용량 중심 가격 모델을 통해 최대한 많은 가치를 창출하려고 시도함에 따라 보다 합리적인 비용 구조에 대한 필요성이 대두
     * ChistaDATA는 이러한 상황에 대한 대안을 제시
          + 빠르고 확장 가능한 관리형 ClickHouse 서비스를 구축
          + ClickHouse는 2010년대 러시아 기업 Yandex가 개발한 강력한 데이터베이스 엔진으로 Amazon의 Redshift와 Google의 BigQuery에 대항하는 오픈소스 경쟁자
          + 이를 출발점으로 삼아 ChistaDATA는 유연하고 비용 효율적인 솔루션을 제공
          + 이 솔루션의 가격은 고객의 인프라 성장에 연동되지 않으며 데이터 종속을 위한 다크 패턴을 악용하지 않음
          + 미국의 주요 기업들이 가격 대비 성능이 매우 뛰어나다는 이유로 ChistaDATA로 전환중
     * ChistaDATA는 방갈로르에서 시작되었지만, GitLab과 같은 다른 ""오픈 코어"" 회사의 발자취를 따라 운영
          + 전 세계에 엔지니어가 있는 완전 원격 조직이며, 전 세계 고객을 보유
     * 궁극적으로 치스타데이터는 전형적인 인도 이야기의 진화
          + 인도는 한동안 서비스 제공 능력으로 유명했으며, ChistaDATA는 그 주제를 현대적으로 변형한 것
          + 미래는 기업이 소비하고 혜택을 누릴 수 있는 매니지드 서비스를 제공하는 이 같은 기업이 주도할 것

   성 건강 스타트업 진짜 잘만 하면 잘될 것 같아요

   Workato 워카토는 일단 미국 회사이긴 한데, 임원들은 대부분 인도계 입니다. UIPath와 비슷하지만 좀 더 클라우드 자동화에 방점을 찍는 것 같네요.
   https://www.workato.com/about_us

   회사 내 인도 친구들이 workato로 이전하는 것에 강하게 드라이브를 걸더라구요. 기존에는 세일즈포스의 애니포인트를 많이 이용 했는데, 비용과 관리의 문제로 워카토+Go로 이전 중에 있습니다.
"
"https://news.hada.io/topic?id=11989","JetBrains가 조사한 2023년 개발자 에코시스템 현황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   JetBrains가 조사한 2023년 개발자 에코시스템 현황

     * 전 세계 26,348명 개발자 대상 조사

언어

     * 가장 많이 사용된 프로그래밍 언어 : JavaScript > Python > HTML/CSS > SQL > Java > Shell > Typescript > C++ > C#
     * 2024년 채택 가능성: Rust 10% > Go 9% > Kotlin/TypeScript 6% > Python 5%
     * JavaScript 인기 소폭 하락
     * Rust에 대한 신뢰: 계속 성장 중
     * Objective-C는 확실히 역사의 뒤안길로 사라짐

소프트웨어 개발자 라이프 스타일

     * 2023년에는 Scala, Go, Kotlin 개발자가 가장 높은 연봉을 받는 상위 3개 범주로 선정
     * 2021년부터 설문조사 데이터에 따르면 여성 개발자의 비율은 개선의 움직임이 보이지 않음. 개발자 중 여성이 5%에 불과
     * 눈여겨 볼 점은 한국의 경우 2023년도에 30세 미만 여성 프로그래머의 비율이 14%로 유망한 추세를 보이고 있음

생성형 AI 서비스의 복잡한 환경

     * 다음 문장에 얼마나 동의하시나요?
          + AI 생성 서비스 사용과 관련하여 보안에 대한 우려가 있음 [59%]
          + 업무에 클라우드 기반 AI 생성 서비스를 사용할 준비가 되어 있음 [53%]
          + AI 생성 서비스 사용과 관련하여 윤리적 우려가 있음 [42%]
          + 로컬 또는 오프라인 AI 도구는 클라우드 기반 솔루션의 품질 및 성능에 도달할 가능성이 낮음 [40%]
          + 회사 정책에 따라 클라우드 기반 AI 도구의 사용이 제한됨 [28%]
          + AGI(인공 일반 지능)가 인간에게 우호적이지 않을까 우려됨 [19%]
     * ChatGPT를 사용하는 개발자의 비율 [77%]
     * GitHub Copilot을 사용하는 개발자의 비율 [46%]
     * 코딩 중에 기존 AI 지원 도구의 다음 기능을 얼마나 자주 사용하시나요?
          + 자연어로 소프트웨어 개발과 관련한 일반적 질문 [꽤 자주: 26%, 이따금: 33%, 드물게: 17%, 전혀 안 함: 24%]
          + 코드 생성 [꽤 자주: 24%, 이따금: 37%, 드물게: 24%, 전혀 안 함: 15%]
          + 코드 주석 또는 코드 문서 생성 [꽤 자주: 19%, 이따금: 26%, 드물게: 22%, 전혀 안 함: 33%]
          + 버그 설명 및 수정 사항 제안 [꽤 자주: 18%, 이따금: 26%, 드물게: 21%, 전혀 안 함: 36%]
          + 코드 설명 [꽤 자주: 14%, 이따금: 27%, 드물게: 22%, 전혀 안 함: 37%]
          + 테스트 생성 [꽤 자주: 12%, 이따금: 21%, 드물게: 24%, 전혀 안 함: 42%]
          + 자연어 쿼리에서 코드 조각 찾기 [꽤 자주: 11%, 이따금: 21%, 드물게: 19%, 전혀 안 함: 48%]
          + 코드 검토 수행 [꽤 자주: 9%, 이따금: 17%, 드물게: 21%, 전혀 안 함: 53%]
          + 더 빠르게 상황을 파악할 수 있도록 최근 코드 변경 사항 요약 설명 [꽤 자주: 9%, 이따금: 16%, 드물게: 19%, 전혀 안 함: 55%]
          + 코드 리팩터링 [꽤 자주: 9%, 이따금: 20%, 드물게: 23%, 전혀 안 함: 47%]
          + 자연어 설명으로 CLI 명령어 생성 [꽤 자주: 9%, 이따금: 17%, 드물게: 20%, 전혀 안 함: 54%]
          + 커밋 메시지 생성 [꽤 자주: 6%, 이따금: 12%, 드물게: 20%, 전혀 안 함: 62%]

개발자 커뮤니티의 정신 건강

     * 경력에서 번아웃을 경험한 개발자의 비율 [73%]

데이터 과학 및 머신러닝

     * 데이터 과학, 머신러닝 또는 데이터 엔지니어링을 어떻게 학습하셨나요?
          + 독학 [56%]
          + 대학에서 프로그래밍이나 데이터 분석을 공부함 [41%]
          + 온라인 과정을 수료함 [36%]
          + 소프트웨어 엔지니어링 직무에서 이직함 [19%]
          + 기타 [4%]
     * 참여하고 있는 데이터 관련 활동은?
          + 데이터 시각화 [46%]
          + 데이터 수집/데이터 스크래핑 [43%]
          + 탐색적 데이터 분석 [33%]
          + 머신러닝 모델링 [31%]
          + 데이터 파이프라인 [31%]
          + 머신러닝 운영 [23%]
          + 스토리지 아키텍처 [21%]
          + 데이터 오케스트레이션 [18%]
          + 기타 [2%]
          + 없음 [15%]

DevOps 및 클라우드 개발 동향

     * 어떤 클라우드 서비스를 사용하시나요?
          + Amazon Web Services [60%]
          + Microsoft Azure [25%]
          + Google Cloud Platform [22%]
          + Alibaba Cloud [11%]
          + DigitalOcean [8%]
          + Heroku [5%]

소프트웨어 테스트

     * 테스트 작업 중에 자동화된 테스트를 개발한다고 보고한 응답자의 비율 [58%]
     * 응답자 중 테스트 프로세스의 일부로 테스트 케이스 설계를 사용하는 사람의 비율 [46%]
     * 귀하의 프로젝트에 어떤 유형의 테스트가 있나요?
          + 유닛 [63%]
          + 통합 [47%]
          + 엔드 투 엔드 [34%]
          + 성능 [32%]
          + 기타 [1%]
          + 없음 [15%]

오픈 소스 프로젝트

     * 오픈 소스 프로젝트에 기여하는 개발자의 비율 [41%]
          + 20%가 거의 정기적으로 참여

원격 및 공동 개발

     * 원격 개발에 참여하는 개발자의 비율 [49%]
     * 공동 개발을 수행했다고 보고한 비율 [61%]
          + 45%는 온라인으로, 30%는 직접 대면으로 진행
     * 동시적으로 수행하는 원격 공동 개발에 어떤 도구를 사용하시나요?
          + 화면 공유를 포함한 화상 통화 [67%]
          + 협업 기능을 갖춘 에디터/IDE [28%]
          + 원격 데스크톱 [24%]
          + 기타 [1%]
          + 없음 [11%]
"
"https://news.hada.io/topic?id=11982","구글에서의 18년을 돌아보며","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            구글에서의 18년을 돌아보며

     * 2005년 구글에 입사하여 18년 일하고 사직서를 제출함
     * 구글의 초기 IPO 이후 시기를 경험한 것에 대해 매우 행운이라고 느낌
     * 구글의 지침인 ""Don't be evil""은 실제로 회사의 지도 원칙이었으며, 구글러들은 진정으로 올바른 일을 하는 데 매우 관심이 많았음

초기 구글의 업무 환경

     * 초기 구글은 매우 좋은 근무 환경을 제공함.
     * 임원진은 매주 솔직한 답변을 제공하거나 법적 이유 등으로 할 수 없는 경우 그 이유를 솔직하게 설명함
     * 에릭 슈미트는 정기적으로 이사회에서 논의된 내용을 회사 전체에 안내했음
     * 제품의 성공과 실패는 객관적으로 발표되었으며, 성공은 축하받고 실패는 비난 대신 교훈을 얻기 위해 비판적으로 검토됨
     * 회사에는 비전이 있었고, 그 비전에서 벗어난 부분은 설명되었음
     * 5년 전 넷스케이프에서 인턴십을 하면서 딜버트 수준의 경영진을 경험했던 나는 구글 직원들의 균일한 역량이 매우 신선하게 다가왔음

HTML 및 관련 표준 작업

     * 구글에서 처음 9년 동안 HTML과 관련 표준 작업에 종사함.
     * 웹에 좋은 것이 구글에 좋을 것이기 때문에 웹을 위해 최선을 다하는 것이 내 임무였음(구글의 이해관계를 무시하라는 명시적인 지시를 받음)
     * 구글은 이 노력을 위한 훌륭한 호스트였으며, 대부분의 작업은 구글 캠퍼스의 랜덤 건물에서 노트북으로 수행됨. 몇년동안 배정된 책상을 사용하지 않은 날도 많았음
     * 내 팀은 명목상으로는 Google의 오픈소스 팀이었지만, 전적으로 자율적으로 일했음

구글 문화의 변화

     * 구글 문화의 강점에 예외가 생기기 시작함.
     * Vic Gundotra의 열정(구글+에 대한 초기 비전은 매우 명확하게 정의 되었고, 모호하지는 않았음)을 좋아했지만, 일이 기대만큼 잘 진행되지 않을 때 명확한 답변을 내놓는 그의 능력에 대해 확신을 갖지 못함
     * 그는 구글에 사일로를 도입하기 시작했는데(예: 특정 건물을 Google+ 팀만 출입할 수 있도록 폐쇄), 이는 초기 구글의 완전한 내부 투명성에서 뚜렷하게 벗어난 것
     * 안드로이드 팀은 구글 문화에 완전히 동화되지 못했음. 일과 삶의 균형이 건강하지 못했고, Google의 이전 부서만큼 투명하지 않았으며, 사용자의 실제 문제를 해결하기보다 경쟁사를 쫓는 데 더 집중

Flutter 프로젝트

     * 마지막 9년은 Flutter 프로젝트에 투자함
     * Google에서 보낸 시간 중 가장 기억에 남는 것은 이 프로젝트의 초창기 시절
     * Flutter는 옛 구글에서 나온 마지막 프로젝트 중 하나였으며, 래리 페이지가 알파벳을 설립하기 직전에 시작한 야심찬 실험의 일부
     * 스타트업처럼 운영되고, 디자인보다는 무엇을 만들지 고민
     * Flutter 팀은 내부 투명성, 워크/라이프 밸런스, 데이터 기반 의사결정을 우선시하는 젊은 구글 문화에서 발전함
     * 처음부터 근본적으로 개방적이었기 때문에 이러한 노력을 바탕으로 건강한 오픈 소스 프로젝트를 구축하는 것도 쉬웠음
     * 또한 플러터는 훌륭한 리더십을 수년 동안 확보할 수 있었던 것도 큰 행운

구글 문화의 침식

     * 구글의 문화가 침식되어 사용자의 이익을 위한 결정에서 벗어나기 시작함
     * 사용자를 위한 의사 결정에서 구글의 이익을 위한 의사 결정으로, 의사 결정권자의 이익을 위한 의사 결정으로 바뀌기 시작
     * 투명성이 사라지고, 전사 회의에 참석해 알아보려고 해도 경영진이 어떤 말을 할지 단어 단위로 예측할 수 있게 되었음
     * 지금은 Google의 비전이 무엇인지 설명해 줄 수 있는 사람이 아무도 없음 사기는 사상 최저 수준
     * 최근 해고 사태는 단기적 주가 상승에 집중하는 단기적 사고에서 비롯된 실수
     * 정리해고의 영향은 교묘함
          + 이전에는 사용자 또는 최소한 회사에 집중하고, 옳은 일을 하는 것이 자신에게 주어진 업무의 일부가 아니더라도 결국 보상을 받을 수 있다고 믿었다면
          + 정리해고 후에는 회사가 자신을 지켜줄 것이라고 더 이상 믿지 못하고 위험을 감수하는 것을 급격히 줄임
          + 자신을 대체 불가능한 존재로 만드는 것이 향후 해고로부터 자신을 보호할 수 있는 유일한 지렛대이기 때문에 지식을 쌓기만 함
     * 지금 구글에서 이 모든 것을 보고 있음
     * 경영진에 대한 신뢰 부족은 경영진이 더 이상 직원들에게도 신뢰를 보여주지 않는 무의미한 기업 정책의 형태로 반영
     * 2004년 구글의 창업자들은 월스트리트에서 ""구글은 기존의 회사가 아니다. 우리는 그렇게 될 생각이 없다.""라고 말했지만 구글은 더 이상 그런 회사가 아님

리더십 부재

     * 오늘날 구글이 안고 있는 이러한 문제의 대부분은 Sundar Pichai의 비전 부재와 초기 구글 문화 유지에 대한 관심 부족이 문제의 원인임
     * 무능한 중간 관리층이 확산되는 것도 하나의 증상이며, Jeanine Banks와 같은 관리자는 팀의 실제 작업에 대한 이해가 부족함
          + 그녀는 Flutter, Dart, Go, Firebase를 다소 자의적으로 포함하는 부서를 관리함
          + 부서에는 명목상으로는 전략이 있지만, 저는 그 전략을 누설하고 싶어도 누설할 수 없었고, 몇 년 동안 그녀의 설명을 들어도 그 전략의 어떤 부분이 무엇을 의미하는지 도무지 알 수 없었음
          + 팀원들이 하는 일에 대한 이해는 기껏해야 최소한의 수준이며, 전혀 일관성이 없고 적용할 수 없는 요청을 자주함
          + 엔지니어를 비인간적인 방식으로 상품처럼 취급하고, 기술 역량과 무관한 방식으로 직원들의 의지에 반하는 업무를 재배치함
          + 건설적인 피드백을 전혀 받지 않음(말 그대로 피드백을 인정하지도 않음)
          + 나보다 정치적으로 더 정통한 리더가 있는 다른 팀에서는 그녀를 '관리'하는 방법을 배워서 적시에 적절한 정보를 제공하는 등 그녀를 방해하지 않는 방법을 터득했다고 들었음
     * 구글의 전성기를 보아온 나는 이 새로운 현실이 우울하게 느껴짐

여전히 훌륭한 사람들

     * 여전히 구글에는 훌륭한 사람들이 있으며, Flutter 팀과의 협력은 매우 긍정적인 경험이었음
     * 구글을 치유할 시간은 아직 남아 있으며, 이를 위해서는 회사 상위층에서 변화가 필요함
     * 권력의 중심을 CFO 사무실에서 사용자에게 가치를 제공하기 위해 Google의 방대한 자원을 어떻게 사용할 것인지에 대한 명확한 장기 비전을 가진 사람으로 옮겨야 함
     * 나는 여전히 전 세계의 정보를 정리하여 누구나 쉽게 접근하고 유용하게 사용할 수 있도록 한다는 Google의 사명 선언문에서 얻을 수 있는 마일리지가 많다고 믿음
     * 단기적인 주가 변동에 연연하지 않고 인류에 대한 이익을 극대화하면서 향후 20년 동안 구글을 이끌고 싶은 사람이라면 구글의 기술과 열정을 진정으로 위대한 업적에 쏟아 부을 수 있을 것
     * 하지만 시간이 촉박하다고 생각함
     * 도덕적 나침반 역할을 해야 하는 사람들은 도덕적 나침반이 없는 조직에 들어가지 않는 사람들과 같은 종류의 사람들이기 때문에 구글 문화의 악화는 결국 돌이킬 수 없는 일이 될 것

GN⁺의 의견

   이 글에서 가장 중요한 것은 구글의 초기 문화와 비전이 어떻게 변화하고 침식되었는지에 대한 저자의 경험과 관찰이다. 저자는 구글의 초기 원칙과 업무 환경이 얼마나 긍정적이었는지를 회상하며, 현재 구글의 문제점과 리더십 부재를 지적한다. 이 글은 구글과 같은 대기업의 내부 문화와 변화에 대한 흥미로운 통찰을 제공하며, 기업 문화가 직원의 사기와 혁신에 얼마나 큰 영향을 미치는지를 보여준다.

   구글 문화에대해 매우 관심이 있었는데, 이렇게 솔직하고 구체적으로 내용 정리하여 공유해주셔서 감사합니다. 좋은하루되세요!

   Flutter가 2.0, 3.0 거치면서 점점 성장하고있더라고요 훌륭한 팀 덕분이었다는 걸 알게됐습니다.

   퇴사하고 쓴거 라고는 하지만, 실명을 대놓고 저격하는군요.

        Hacker News 의견

     * Ian의 게시글은 통찰력이 있으나, 항상 과거로 돌아가자는 처방에는 회의적임.
          + 신생 기업으로서의 차별성과 명확한 목적
          + 시장 지배 후 우선순위 변화의 필연성
          + 조직 구조의 경직성과 변화에 대한 저항
     * Jeanine Banks의 관리 스타일에 대한 비판적인 의견
          + 팀 전략의 모호함과 엔지니어에 대한 비인간적 대우
          + 피드백 수용 불가와 정치적으로 능숙한 팀의 대처 방식
     * Google의 선의에 대한 비판과 그에 대한 반박
          + 프로젝트의 장기적 영향과 Google의 시장 지배력 문제
          + 대기업에서의 개인적 정체성 상실과 외부의 비판
     * Google 내부 문화 변화에 대한 개인적 경험과 관찰
          + Android 팀의 독립성과 Google+의 실패
          + TGIF의 변화와 직원들의 실망
     * Google의 쿠키 경고에 대한 비판적 시각
          + 세상을 개선하려는 노력과 공공의 냉소적인 반응
     * Flutter에 대한 긍정적인 전망과 개발자의 헌신
          + Google 이후에도 Flutter 작업 계속
     * Jeanine Banks에 대한 비판과 개인적 선택의 중요성
          + 엔지니어의 기술과 관심사에 맞는 프로젝트 선택의 가치
     * Google의 웹 표준 작업에 대한 자기반성 부족 지적
          + Google의 시장 지배력과 WHATWG의 영향력에 대한 비판
     * Google의 AI 혁신과 경제적 동기에 대한 분석
          + 대기업의 혁신 경제학과 초기 문화의 회복 불가능성
"
"https://news.hada.io/topic?id=12034","이메일 주소 난독화: 2023년에도 여전히 효과적인 방법은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   이메일 주소 난독화: 2023년에도 여전히 효과적인 방법은?

클릭 가능한 링크에 적을 때

     * URL 인코딩: 스팸 100% 차단
     * HTML 엔티티: 스팸 50% 차단
     * 보호 없음: 스팸 17% 차단
     * 연결: 아직 JS 테스트 중
     * Rot18: 아직 JS 테스트 중
     * Xor: 아직 JS 테스트 중
     * 호스트 추가: 아직 JS 테스트 중
     * 사용자 상호작용: 아직 JS 테스트 중

일반 텍스트에 적을 때

     * display: none 사용: 스팸 100% 차단 (CSS)
     * HTML 주석: 스팸 83% 차단
     * HTML 엔티티: 스팸 67% 차단
     * 보호 없음: 스팸 0% 차단
     * 연결: 아직 JS 테스트 중
     * Rot18: 아직 JS 테스트 중
     * Xor: 아직 JS 테스트 중
     * 호스트 추가: 아직 JS 테스트 중
     * 기호 대체: 스팸 100% 차단 (문제 있음)
     * CSS 내용: 스팸 100% 차단 (문제 있음)
     * 텍스트 방향: 스팸 100% 차단 (문제 있음)
     * 이미지: 스팸 100% 차단 (문제 있음)

   Email 난독화는 ChatGPT앞에 거의 무용지물
   이거랑 연관되는 것 같네요 ㅎㅎ
"
"https://news.hada.io/topic?id=11972","노스볼트, 160Wh/kg로 검증된 최첨단 소듐이온 배터리 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  노스볼트, 160Wh/kg로 검증된 최첨단 소듐이온 배터리 개발

셀 기술

     * Northvolt가 스웨덴 스톡홀름에서 나트륨 이온 배터리를 개발함.
     * 이 새로운 배터리는 전 세계적으로 비용 효율적이고 지속 가능한 에너지 저장 시스템 확장에 기여할 것으로 기대됨.
     * Northvolt Labs에서 160Wh/kg 이상의 에너지 밀도로 검증된 이 배터리는 안전하고 비용 효과적이며 지속 가능함.

배터리 디자인과 제조의 돌파구

     * Northvolt는 Prussian White 기반의 양극과 하드 카본 음극을 사용한 나트륨 이온 배터리를 상업 시장에 출시할 계획임.
     * 이 배터리는 리튬, 니켈, 코발트, 그래파이트가 없으며, 글로벌 시장에서 풍부하게 구할 수 있는 철과 나트륨으로 제작됨.
     * CEO Peter Carlsson은 이 기술이 전 세계적으로 전기화를 더 비용 효율적이고 지속 가능하게 만들어 지속 가능성 목표 달성에 중요하다고 언급함.

나트륨 이온 기술의 잠재력

     * 연구 파트너 Altris와 함께 개발된 나트륨 이온 기술은 Northvolt의 차세대 에너지 저장 솔루션의 기반을 제공할 것임.
     * 이 기술은 특히 인도, 중동, 아프리카와 같은 신흥 시장에서 에너지 저장 솔루션에 매력적임.
     * 지역 자원을 활용한 배터리 생산으로 전통적인 배터리 가치 사슬로부터 독립적인 새로운 지역 배터리 제조 능력 개발에 도움이 됨.

Northvolt에 대하여

     * Northvolt는 2016년 스웨덴 스톡홀름에 설립되어 지속 가능한 배터리 제조 모델을 선도함.
     * BMW, Fluence, Scania, Volvo Cars, Volkswagen Group 등 주요 고객으로부터 55억 달러의 주문을 받음.
     * 스웨덴과 독일, 노르웨이, 폴란드, 포르투갈, 미국, 캐나다에 5,000명 이상의 직원을 두고 있으며, 스웨덴 Skellefteå의 Northvolt Ett와 Västerås의 Northvolt Labs에서 배터리를 공급함.

GN⁺의 의견

     * Northvolt가 개발한 나트륨 이온 배터리는 전 세계적으로 지속 가능한 에너지 저장 시스템을 확장하는 데 중요한 역할을 할 것으로 보임.
     * 이 기술은 기존 배터리 대비 안전하고 비용 효율적이며 환경 친화적인 대안을 제공하며, 특히 고온에서의 안전성과 저렴한 비용으로 신흥 시장에서의 에너지 저장 솔루션에 적합함.
     * 이 글은 새로운 에너지 기술의 발전과 그것이 어떻게 글로벌 지속 가능성 목표에 기여할 수 있는지에 대한 흥미로운 정보를 제공함.

        Hacker News 의견

     * 프랑스 회사가 이번 여름에 주요 하드웨어 매장에서 나트륨 이온 배터리 전동 공구를 판매하기 시작함.
          + 프랑스 국립 연구 기관의 발표: 나트륨 이온 배터리에 대한 자부심.
          + 해당 전동 공구: 무선 드라이버, 3.6V, 0.7Ah.
          + 2017년에 해당 회사가 90Wh/kg의 효율을 가진 셀을 제작할 수 있다고 한 기사 발견.
          + 이미 판매 중인 제품이지만 에너지 밀도에 대한 약속은 아님.
     * 나트륨 이온 배터리의 매력은 흔한 재료로 만들어지고 리튬보다 안정적이며 안전하다는 점.
          + 에너지 밀도가 리튬 폴리머 및 리튬 이온 배터리와 비슷한 160Wh/kg 정도라고 함.
          + 에너지 밀도가 리터당 경쟁력이 없다고 가정함.
     * 위키백과에 나트륨 이온 배터리 비교 표가 있으나 정확성이나 최신성은 불명.
     * 매주 새로운 배터리 발명을 소개하는 것에 대한 피로감.
          + 배터리 기술에 대한 반복적인 헤드라인에 지침.
          + 발명 이후 기술의 진전을 지속적으로 관찰하는 기사를 원함.
     * 나트륨 배터리의 장점은 무엇인가?
          + 나트륨 이온의 크기가 크기 때문에 배터리가 덜 밀집되고 충전 주기가 적음.
          + 이로 인해 그리드 및 모바일 애플리케이션에는 적합하지 않음.
          + 저렴한 일회용 제품 제작에만 사용될 수 있으며 환경에 좋지 않을 수 있음.
     * 나트륨 이온 배터리도 리튬 이온 배터리처럼 20%-80% 용량으로 충전 제한이 있는지에 대한 질문.
     * 중국이 올해부터 많은 나트륨 이온 배터리를 생산할 예정.
          + 배터리의 무게와 밀도보다 재충전 주기와 비용이 더 중요함.
          + 이는 탄소 배출 전력 생산을 줄일 수 있는 가격 경쟁력을 가짐.
     * 나트륨 금속 연료 전지로 3.5kWh까지 가능한데, 현재 개발은 그에 못 미침.
          + 만료된 특허 US3730776A에 설명된 장치를 참조.
          + 비슷한 장치를 집에서도 만들 수 있음.
     * 유럽에서의 배터리 혁신이 희망적.
          + 배터리 에너지/자동차 분야에서 유럽이 계속 역할을 할 수 있을 것으로 기대됨.
     * 배터리 기술 발표 시 단일 매개변수에만 집중하는 것에 대한 경고.
          + 다른 영역에서 심각한 절충을 했을 가능성이 있음.
          + 다른 수치가 좋다면 그것도 함께 발표했을 것이라는 추측.
     * 많은 수식어 사용. 비용 효율성 등이 더 좋다고 하지만 구체적인 수치나 비교 대상은 언급되지 않음.
          + 다음 전기차에 적용될 수 있다는 기사나 유튜브 비디오가 이미 제작 중일 것임.
"
"https://news.hada.io/topic?id=12021","Shopify 실시간 대시보드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Shopify 실시간 대시보드

Shopify BFCM 실시간 데이터

     * Shopify의 Black Friday Cyber Monday (BFCM) 이벤트 기간 동안의 실시간 데이터 공개.
     * 분당 매출은 2,082,659달러에 달함.
     * 독특한 쇼핑객 수는 20,339,826명으로 집계됨.
     * 분당 주문 건수는 17,376건으로 나타남.
     * 이 기간 동안 제거된 탄소의 양은 17,417.51톤으로 기록됨.

GN⁺의 의견

     * Shopify의 BFCM 이벤트는 엄청난 분당 매출과 주문 건수를 기록하며 전자상거래 분야에서 중요한 이벤트임을 보여줌.
     * 이 데이터는 전자상거래 플랫폼의 성능과 소비자 행동에 대한 통찰을 제공하며, 지속 가능성에 대한 관심을 반영하는 탄소 제거 양의 공개로 환경에 대한 책임감도 강조됨.
     * 이러한 실시간 데이터는 기술과 비즈니스에 관심 있는 사람들에게 흥미로운 정보를 제공하며, 특히 소프트웨어 엔지니어들에게는 대규모 트래픽과 거래를 처리하는 시스템의 중요성을 일깨워줌.

        Hacker News 의견

     * Shopify에서 지난 10년간 BFCM 대시보드를 만들어왔으며, 이는 가장 재미있는 프로젝트 중 하나이자 멋진 전통이 됨.
          + 인터넷 소프트웨어 회사를 운영하는 것이 추상적인 일이지만, 이러한 시각화는 직원들에게도 더욱 공감가게 만듦.
          + 올해 대시보드에는 많은 재미있는 세부 사항이 포함되어 있으며, GPT-4로 생성된 도시 통계 등이 있음. 데스크톱에서는 '너드 메뉴'를 열어 설정을 조정하고 링크를 공유할 수 있음.
     * ""Rails가 확장성이 없다고 하지만...""라는 풍자적인 댓글.
     * 세계 부의 집중도가 놀랍다는 의견.
     * ""탄소 제거"" 통계의 근거에 대한 질문.
     * 2016년형 iPhone SE에서도 부드럽게 작동하는 것에 대해 인상 깊다는 평가.
     * 대시보드가 브라우저를 충돌시키지 않고 장치에서 느리지 않게 작동한다는 긍정적인 평가.
          + 도시 사실 추가가 좋지만, 검색한 대부분의 도시에 충분한 데이터가 없어 아쉬움.
          + 사용자 정의 옵션을 가지고 놀기는 재미있으며, 특히 비행기 모드가 좋은 터치임.
     * 프론트엔드 글로브 렌더링에 사용된 라이브러리에 대한 질문. 크롬 브라우저에서 빠르고 끊김 없이 작동함.
     * 사용자 정의 옵션이 놀랍다는 의견. 비행기 모드에서는 전쟁 지역처럼 보임.
     * ""모든 기지가 Shopify의 것""이라는 농담.
     * 개발자 중 한 명이 제공한 인사이트에 대한 링크 공유.
"
"https://news.hada.io/topic?id=12037","RustGPT - Rust+Htmx+SQLite로 만든 ChatGPT UI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               RustGPT - Rust+Htmx+SQLite로 만든 ChatGPT UI

     * OpenAI의 ChatGPT 인터페이스를 Rust 와 Axum 프레임워크 및 Htmx 로 구현한 오픈소스
     * Server Sent Events (SSE) 를 이용한 실시간 스트리밍으로 ChatGPT 의 인터랙션 부분을 구현
"
"https://news.hada.io/topic?id=11984","Microsoft, Generative AI for Beginners 강의 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Microsoft, Generative AI for Beginners 강의 공개

     * 생성형 AI 애플리케이션 구축을 시작하는 데 필요한 모든 것을 알려주는 12강 과정
     * Repo를 Fork해서 GitHub Codescape 안에서 실행

강의 목차

     * 생성형 AI 및 LLM 소개
     * 다양한 LLM 탐색 및 비교
     * 책임감 있는 생성형 AI 사용
     * 프롬프트 엔지니어링 기본 이해
     * 고급 프롬프트 작성하기
     * 텍스트 생성 응용 프로그램 구축
     * 채팅 응용 프로그램 구축
     * 검색 앱 벡터 데이터베이스 구축
     * 이미지 생성 응용 프로그램 구축
     * 로우 코드 AI 응용 프로그램 구축
     * 함수 호출을 통한 외부 응용 프로그램 통합
     * AI 응용 프로그램을 위한 UX 디자인

   Microsoft, ML for Beginners 강의 공개
   Microsoft, Web-Dev for Beginners 강의 공개
   Microsoft, IoT for Beginners 강의 공개
   MS Beginner's Series to: Rust
"
"https://news.hada.io/topic?id=12050","Helm - Steer Your Sound","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Helm - Steer Your Sound

Helm 소프트웨어 소개

     * Helm은 GNU/Linux, Mac OSX, Windows에서 실행 가능한 소프트웨어로, 스탠드얼론 신디사이저 또는 LV2, VST, VST3, AU 플러그인으로 사용됨.
     * 32비트와 64비트 버전 모두 제공되며, 디지털 권리 관리(DRM)의 번거로움 없이 자유롭게 실행 가능함.
     * 소스 코드를 연구하고 변경할 수 있으며, Helm의 정확한 복사본이나 수정된 복사본을 재배포할 수 있는 자유 소프트웨어임.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 Helm이 사용자의 자유를 존중하는 자유 소프트웨어라는 것이며, 이는 소프트웨어 개발자와 사용자 모두에게 유연성과 통제력을 제공한다는 점에서 흥미롭다. Helm은 다양한 플랫폼과 호환되며, 소스 코드에 대한 접근성을 통해 사용자가 소프트웨어를 자신의 필요에 맞게 조정할 수 있는 가능성을 제공함으로써, 소프트웨어의 개방성과 사용자 중심의 가치를 강조한다.

        Hacker News 의견

     * Matt의 새로운 신디사이저인 Vital에 대한 언급이 있음. Vital은 오픈 소스로 계속 제공되고 있음.
          + Vital에 대한 정보: Vital.audio
          + GitHub 저장소: mtytel/vital
     * Synth1은 Daichi Laboratory에서 만든 강력하지만 이제는 오래된 무료 소프트 신디사이저임. 수만 개의 프리셋을 찾을 수 있으며, 이를 관리하기 위해 만들어진 Synth1 Librarian이 매우 유용함.
          + Synth1 정보: Wikipedia
          + 프리셋 아카이브: Archive.org
          + Synth1 Librarian 정보: KVR Audio
          + Synth1 데모 비디오: YouTube
     * Surge VST가 개인적으로 가장 좋아하는 신디사이저임.
          + Surge 정보: surge-synthesizer.github.io
     * Helm과 Surge XT는 훌륭한 신디사이저이며, Surge는 이펙트도 제공함. 조카가 오디오 프로덕션에 관심을 가졌을 때, Ableton Live Lite 무료 버전을 강화하기 위해 이들을 사용함.
     * 이 프로그램에 대한 링크를 공유해줘서 감사하다는 긍정적인 반응.
     * 첫 번째로 심층적으로 사용했던 빼기(subtractive) 신디사이저에 대한 애정을 표현함. Matt Tytel이 만든 오픈 소스 웨이브 테이블 신디사이저인 Vital에 대해서도 매우 좋아함을 밝힘.
     * Helm은 무료 신디사이저 중에서 가장 단순한 모듈레이션을 제공함. 모든 모듈레이션과 그 강도가 모드 매트릭스 없이도 바로 보임. 비록 지금은 많은 소프트 신디사이저를 가지고 있지만, Helm에 대한 의존성이 있었던 시절에도 여전히 사용할 것임.
     * Logic Pro에서 찾을 수 있는 신디사이저와 어떻게 다른지에 대한 질문. 프로젝트 자체는 매우 멋지다고 평가함.
     * 특정 댓글이 신고되어 표시되지 않음.
"
"https://news.hada.io/topic?id=12055","Linux 재단 Cyber Monday 세일 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Linux 재단 Cyber Monday 세일 시작

     * 올해 Linux 재단의 Cyber Monday 세일이 시작
     * CKA, CKAD, CKS 같은 쿠버네티스 관련 자격증이 50% 가량 할인하는 사실상 최대 할인율의 세일 행사
     * 구매 후 1년 이내 응시를 해야하며 1회 재도전 기회가 있음

   자격증 블프/사먼 할인...?
   제가 몰랐던 거겠지만 뭔가 되게 신기하네요. +_+
"
"https://news.hada.io/topic?id=11948","샘 알트만과 그렉 브록만이 Microsoft에 합류했습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   샘 알트만과 그렉 브록만이 Microsoft에 합류했습니다.

     * OpenAI 이사회에 의해 해고된 전 OpenAI CEO인 샘 알트만과 이사회에서 해임된 전 OpenAI의 사장인 그렉 브록만이 Microsoft에 합류.
     * Microsoft의 CEO인 사티아 나델라는 샘 알트만과 그렉 브록만이 동료들과 함께 마이크로소프트에 합류해 새로운 첨단 AI 연구팀을 이끌게 된다는 트윗을 올림.
     * 아직 얼마나 많은 OpenAI 직원이 Microsoft로 이직할 것인지는 밝혀지지 않음.
     * 또한 Microsoft는 OpenAI와의 파트너십에도 전념할 것임을 밝힘.

   Ilya Sutskever 가 이런 글도 올렸네요
   https://twitter.com/ilyasut/status/1726590052392956028

     저는 이사회의 행동에 참여한 것을 깊이 후회합니다. 저는 OpenAI를 해칠 의도가 전혀 없었습니다. 저는 우리가 함께 일궈온 모든 것을 사랑하며 회사의 재결합을 위해 최선을 다할 것입니다.

   MS에 있으면 OpenAI에 더 큰 영향력을 행사할 수 있는게 아닐까요

   난장판이네요

   돈을 찾아 떠난거 같네요. 돈이 아니라면, 별도법인 설립했을텐데. ms도 gpu딸려서 오라클한테 임대받는거 같던데... 전념이될지..

   이사회에서 당일 해임당하고 MS에서 영입 권유를 넣은건데 돈을 찾아 떠났다니...

   찾는다는게 어떤걸 찾냐에 다르겠지만 ""수익성""을 보고간건 아니라고 생각합니다

   와.. 그럴 수도 있겠다 싶었지만 실제로 벌어지니 입이 다물어지지 않네요.

   역시 최후의 승자는 Microsoft
   오늘 주가가 어케 움직일지 궁금하네요
"
"https://news.hada.io/topic?id=12066","NeumAI - 오픈소스 대규모 RAG 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      NeumAI - 오픈소스 대규모 RAG 프레임워크

     * 개발자가 데이터를 활용하여 Retrieval Augmented Generation (RAG)을 통해 대규모 언어 모델을 컨텍스트화할 수 있도록 지원하는 데이터 플랫폼
          + 문서 저장소 및 NoSQL과 같은 기존 데이터 소스에서 데이터를 추출
          + 콘텐츠를 벡터 임베딩으로 처리
          + 유사성 검색을 위해 벡터 데이터베이스에 벡터 임베딩을 수집
     * 애플리케이션에 따라 확장할 수 있고 데이터 커넥터, 임베딩 모델, 벡터 데이터베이스와 같은 서비스를 통합하는 데 소요되는 시간을 줄일 수 있는 포괄적인 RAG 솔루션

특징

     * 수십억 개의 데이터 포인트를 처리가능한 고성능 분산 아키텍처: 고도의 병렬화를 통해 임베딩 생성 및 수집을 최적화
     * 공통 데이터 소스, 임베딩 서비스 및 벡터 스토어를 지원 하는 내장 데이터 커넥터
     * 데이터 소스를 실시간으로 동기화하여 데이터를 항상 최신 상태로 유지
     * 로드, 청킹, 선택 등의 형태로 사용자 지정 가능한 데이터 전처리
     * 메타데이터를 통한 하이브리드 검색을 지원하는 일관된 데이터 관리 : 메타데이터를 자동으로 보강하고 추적하여 풍부한 검색 경험을 제공
"
"https://news.hada.io/topic?id=11998","구글 Bard Extensions","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           구글 Bard Extensions

     * 구글의 AI 챗봇 Bard 내에서 사용 가능한 확장들
          + 대화 진행에 따라 바드가 자동으로 확장을 선택해서 사용(여러개도 동시에 가능)
     * Youtube, Google Maps/Flights/Hotels 의 정보들을 접근 가능
     * 권한을 부여할 경우 내 구글 Workspace의 Gmail/Docs/Drive 에 접근해서 개인 이메일이나 콘텐츠를 찾고 요약하는 것도 가능해짐
     * 각 확장 별로 On/Off 설정할 수 있음
"
"https://news.hada.io/topic?id=12073","Modern C++ 프로그래밍 강좌","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Modern C++ 프로그래밍 강좌

     * 이 과정은 이미 C와 객체 지향 프로그래밍에 익숙한 사람들을 대상으로 하며, C++ 프로그래밍의 숙련도를 높이는 데 목적이 있음
     * C++ 프로그래밍의 기본부터 고급 C++ 의미론 및 개념에 이르기까지 다룸
     * 무료이며 자주 업데이트되고, 최신 언어 표준의 개념과 기능을 포함하며, 실용적인 교육 방식을 채택

각 장의 주요 내용

     * 기본 개념 : C++의 기본 유형, 연산자, 변환 규칙, 메모리 관리, 함수 및 전처리에 대한 설명.
     * 객체 지향 프로그래밍 : 클래스 개념, 상속, 다형성, 연산자 오버로딩에 대한 이해.
     * 템플릿과 메타 프로그래밍 : 함수 및 클래스 템플릿, 컴파일 시간 유틸리티, SFINAE에 대한 심층적인 탐구.
     * 번역 단위 : 링키지, One Definition Rule, 다중 번역 단위 처리 방법에 대한 설명.
     * 코드 규약 : 프로젝트 조직, 주요 코드 규약에 대한 안내.
     * 생태계 : 디버깅, 테스트, Cmake, 문서화 및 기타 도구에 대한 정보.
     * 유틸리티 : 주요 std 라이브러리, 컨테이너, 반복자, 알고리즘에 대한 개요.
     * 고급 주제 : 이동 의미론, 타입 추론, 스마트 포인터, 동시성에 대한 심화 학습.
     * 최적화 : 기본 개념, 코드 최적화, 비코딩 최적화 및 벤치마킹에 대한 전략.

GN⁺의 의견

   이 과정은 C++의 최신 표준을 포함하여 C++ 프로그래밍의 모든 측면을 다루고 있어, 초급 소프트웨어 엔지니어가 전문가 수준으로 성장하는 데 필수적인 자료임. 실제 사례를 바탕으로 한 경험 중심의 접근 방식은 학습자에게 실용적인 지식을 제공하며, 이는 프로그래밍 역량을 향상시키는 데 매우 유익함.

        Hacker News 의견

     * 해당 과정의 창시자는 NVIDIA의 팀 리더이자 CUDA cuSPARSE의 주요 소프트웨어 엔지니어임
          + 과정 창시자의 NVIDIA 및 CUDA와의 연관성을 고려할 때, 이 경험이 C++에 능숙한 사람들에게 도움이 될 수 있음.
     * ChatGPTv4를 사용하여 CUDA와 호환되는 현대 C++ 코드 작성에 큰 성공을 거둠
          + ChatGPTv4가 Rust 코드를 최신 nvcc CUDA 컴파일러와 호환되는 현대 C++로 변환하는 데 도움을 줄 수 있음.
          + 변환 과정에서 언어 차이를 설명하고, std::*를 사용하여 더 유연한 코드 작성을 권장함.
     * 오랜 휴식 후 C++로 돌아왔으며, C++17과 같은 최근 버전은 충분히 좋지만 유니코드 지원은 아쉬움
          + 최신 C++ 버전은 사용하기에 충분하지만, 유니코드 지원이 불편하여 개선이 필요함을 지적함.
     * 임베디드 개발자로서 C++ 학습을 시작하기 위한 좋은 자료를 찾는 중임
          + 임베디드 개발 경험이 있는 사람이 더 높은 수준의 작업으로 전환하기 위해 C++ 학습 자료를 찾고 있음.
          + 다양한 가격대의 코스가 있지만, 복잡한 상황에 맞는 코스 선택에 어려움을 겪고 있음.
     * 해당 과정을 learncpp.com과 비교할 수 있는 사람이 있는지 궁금함
          + learncpp.com 웹사이트와 비교하여 해당 과정의 효용성에 대한 의견을 구함.
     * 대학 시절 잊혀진 C 기술을 다시 익히기에 적합하지만, 실제 코딩 연습이 더 필요함
          + 이론적인 학습보다는 실제 코딩 연습을 통한 학습을 선호하는 의견을 표현함.
     * 슬라이드만으로는 학습이 어렵다고 생각함
          + 슬라이드를 통한 학습이 비효율적이라고 비판하며, 다른 학습 방법을 선호함을 나타냄.
     * 스마트 포인터는 C++에서 ""고급 주제""로 간주되어서는 안 됨
          + 스마트 포인터가 메모리 관리에 있어서 가장 좋은 방법이므로, 초급자도 이를 학습해야 함을 강조함.
          + new와 delete에 대한 이해도 중요하지만, 실제로는 unique_ptr이나 shared_ptr을 사용하는 것이 더 바람직함을 언급함.
     * 현대 C++에서는 new/delete를 사용해야 하는지 의문임
          + C++ 초보자가 현대 C++에서 new/delete 키워드의 필요성에 대해 의문을 제기함.
     * 변환 규칙 섹션을 어떻게 읽어야 하는지 설명해달라고 요청함
          + 변환 규칙 섹션의 표기법에 익숙하지 않아 도움을 요청하며, 해당 부분에 대한 추가 설명을 찾음.
"
"https://news.hada.io/topic?id=12051","PHP 8.3 릴리즈릴리즈

     * Class Constant에 Type 지원 : void, callable, never를 제외한 PHP의 모든 타입 가능
     * Class Constant의 동적 Fetch : Foo::{$searchableConstant} 형태로 이름으로 조회
     * 새로운 #[\Override] 속성 : 메소드에 추가하면 부모 클래스나 구현된 인터페이스에 같은 이름의 메서드가 있는지 확인
     * readonly 속성의 Deep-Cloning : __clone 메소드를 통해서 readonly 속성도 한번 변경 가능
     * 새로운 json_validate() 함수 : json_decode()보다 더 효율적으로 문자열이 유효한 JSON인지 확인 가능
     * 새로운 Randomizer::getBytesFromString() 메소드 : PHP 8.2에 추가된 Random 확장에 특정 바이트로만 구성된 임의의 문자열을 생성하는 기능을 추가
     * 새 Randomizer::getFloat() Randomizer::nextFloat() 메소드
     * 커맨드라인 린터가 여러개의 파일 입력을 지원
     * 새로운 클래스, 인터페이스, 함수들 추가 : mb_str_pad(), str_increment(), str_decrement() 등

   Type을 이렇게 다룬다면 언젠가는 type alias가 추가되어야 할텐데, 과연 어떻게 처리할까 모르겠네요.

   php붐은 온다…

   선생님,,,
"
"https://news.hada.io/topic?id=12029","애니모션 - 시각적 CSS 애니메이션 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         애니모션 - 시각적 CSS 애니메이션 앱

CSS 애니메이션 노코드 생성

     * Animotion은 드래그, 크기 조정, 회전, 클리핑 등을 통해 시각적으로 CSS 애니메이션을 생성할 수 있는 도구임.
     * 키프레임 편집기와 사용할 준비가 된 애니메이션 모음, 29개의 내장 이징(easings)을 제공함.
     * 이 앱은 큰 화면과 최신 웹 브라우저에서 더 잘 작동함.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 Animotion이라는 도구를 통해 코드를 작성하지 않고도 CSS 애니메이션을 쉽게 만들 수 있다는 점임.
     * 소프트웨어 엔지니어링에 관심 있는 사람들에게 흥미로울 수 있으며, 특히 프론트엔드 개발에 관심이 있는 초급 개발자들에게 매력적인 내용임.

        Hacker News 의견

     * CSS3가 1999년에 출시되었고, 2023년에 이런 앱이 해커뉴스에 소개될 만큼 멋지다는 것은, 키 프레임 기반 애니메이션의 접근성과 프로그래밍 가능성이 크게 개선되지 않았음을 보여줌. 플래시는 약 10년 전에 사라졌고, Adobe Animate와 여러 평범한 프레임워크 및 커뮤니티가 남아 있음. 견고한 CSS/SVG 기반 애니메이션은 대부분 빈약한 약속으로 남아 있음.
     * 키 프레임을 이동하는 것이 첫 번째로 하고 싶었던 일이지만, 아직 그 기능이 없음.
     * 앱의 결과물이 CSS로 나오는 것이 마음에 들며, 라이브러리에 얽매이지 않은 자바스크립트 코드가 아님에 감사함.
     * 에디터의 직관성이 마음에 들고, 좀 더 고급 타임라인이 필요한 사람들은 Theatre.js를 확인해보는 것이 좋음. 웹 플랫폼에서 더 많은 움직임을 보게 되어 기쁨.
     * 모바일에서 아이콘이 무엇을 의미하는지 알려주는 툴팁이나 힌트를 제공하는 좋은 방법이 있는지 궁금함. 몇몇 아이콘의 기능을 이해할 수 없으며, 실행해볼 수는 있지만 앞서 언급한 것처럼 되돌리기 기능이 없음.
     * 이 앱을 매우 좋아함.
     * 앱의 소스 코드는 GitHub에서 확인 가능함: animotionjs/animotion
     * 모바일에서도 놀랍도록 직관적인 사용성을 제공함.
     * 놀라운 작업이며, 매우 멋진 도구를 공유해줘서 감사함.
     * 모바일에서도 훌륭하게 작동하며, 북마크할 가치가 있음.
"
"https://news.hada.io/topic?id=12045","Darling - 리눅스에서 macOS 소프트웨어를 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Darling - 리눅스에서 macOS 소프트웨어를 실행하기

     * Darling은 리눅스에서 macOS 소프트웨어를 실행할 수 있는 변환 레이어
     * 하드웨어 에뮬레이터를 사용하지 않고 macOS 소프트웨어를 직접 실행
     * 완전한 Darwin 환경을 구현하며, Mach, dyld, launchd 등을 포함
     * 사용자가 설정하는 데 드는 수고를 최소화하며, 좋아하는 소프트웨어를 쉽게 사용할 수 있도록 설계됨
     * 리눅스 데스크톱 환경에 완전히 통합되어 네이티브 리눅스 앱처럼 보이고, 느껴지며, 동작하도록 앱을 실행하는 것을 목표로 함
     * Darling은 무료이며 오픈소스 소프트웨어로, GNU GPL 라이선스 버전 3에 따라 배포됨

Darling과 유사한 프로젝트

     * Darling은 Wine과 유사하며, Wine이 리눅스에서 윈도우 소프트웨어를 실행할 수 있게 해주는 것처럼, Darling은 macOS 소프트웨어를 실행할 수 있게 해줌
     * Anbox와 같은 다른 유사 프로젝트는 안드로이드 앱을 위한 것임

Darling의 기능과 법적 측면

     * Darling은 기본적인 실험적 지원을 통해 간단한 그래픽 애플리케이션을 실행할 수 있음.
     * Apple의 최종 사용자 라이선스 계약(EULA)을 위반하지 않으며, 완전히 자유 소프트웨어로 공개된 Darwin의 부분만을 직접 사용함.

Darling의 이름과 호환성

     * Darling이라는 이름은 'Darwin'과 'Linux'의 조합임.
     * Darwin은 macOS와 iOS가 기반으로 하는 핵심 운영 체제임.

Darling과 다른 오픈소스 프로젝트

     * Darling은 Apple에 의해 공개된 원래 Darwin 소스 코드를 기반으로 하며, Cocoa 구현을 위해 The Cocotron을 사용하고 Apportable Foundation 및 GNUstep의 여러 부분을 활용함.

Darling의 미래 계획

     * 장기적으로는 ARM 기기(대부분의 안드로이드 폰과 같은)에서 iOS 앱을 실행할 수 있도록 계획 중임.
     * UIKit의 자체 구현을 작성하는 것이 주요 도전 과제임.

Darling 프로젝트 기여 방법

     * Darling의 내부에 익숙해지기 위해 문서와 블로그를 읽는 것으로 시작하고, GitHub에서 프로젝트에 참여함.
     * macOS나 iOS 개발 경험이 있으면 좋지만, 기여를 시작하는 데 필수적이지는 않음.

GN⁺의 의견

   Darling 프로젝트는 리눅스 사용자들에게 macOS 애플리케이션을 사용할 수 있는 새로운 가능성을 제공함으로써 큰 관심을 끌고 있음. 이 프로젝트는 오픈소스 커뮤니티의 협력과 기술적 혁신을 통해 다양한 운영 체제 간의 호환성을 높이는 데 기여하고 있음. 특히, 사용자들이 리눅스 환경에서 macOS 앱을 네이티브 앱처럼 사용할 수 있도록 하는 것이 가장 중요한 점으로, 이는 소프트웨어 개발자와 최종 사용자 모두에게 매력적인 특징임.

        Hacker News 의견

     * Cocotron과 Apportable Foundation, 그리고 GNUstep의 여러 부분을 사용하여 Cocoa 구현의 기반으로 삼고 있음. Apportable에서 일했던 경험이 있어서 매우 좋은 추억으로 남아 있음. Apportable은 YCombinator 2011 프로그램의 일부였음.
     * 최근 몇 주 동안 소프트웨어를 크로스 컴파일하기 위해 이 기술을 사용해봄. Clang은 작동하지만 많은 핵심 라이브러리가 누락되어 있음. 예를 들어, pkgbuild는 작동하지 않음. 심지어 시도해본 네이티브 Cocoa 앱들도 작동하지 않음. 그럼에도 불구하고, 이 기술은 많은 잠재력을 가지고 있으며, 개발자들이 더 많은 시간을 투자할 수 있기를 바람.
     * 이 기술은 오직 x64 칩에서만 작동함. 아마도 인텔용으로 빌드된 macOS 바이너리만 실행 가능할 것으로 추정됨(즉, 애플 실리콘은 아님). 이에 대한 정보를 찾을 수 없음.
     * 애플은 아마도 자사의 하드웨어나 macOS 없이 Final Cut Pro를 실행할 수 있게 되면 법률 팀을 보낼 것임.
     * GUI 애플리케이션 지원은 아직 준비되지 않은 것 같음. 그렇다면, 실제로 MacOS의 어떤 커맨드라인 소프트웨어가 유용한가?
     * Cocoa 등을 포팅하는 것은 Wine이 win32 API를 포팅하는 것만큼 크거나 더 큰 문제임.
     * 현재는 CLI 도구들만 작동하지만, 리눅스에서 iMessage와 Notes를 실행할 수 있으면 좋겠음.
     * Xcode를 실행할 수 있는지 궁금함. 리눅스에서 iOS 개발을 시도하고 있었고, 지금까지는 DockerOSX를 사용했지만, 이 방법이 훨씬 더 편리해 보임.
     * 관련 링크: Darling 프로젝트의 진행 상황 보고서 및 이전 토론들에 대한 링크 제공.
     * Logic을 이 기술에서 작동시키는 것은 곧 이루어지지 않을 것으로 예상하지만, 볼 수 있게 되면 좋겠음. Mac과 Logic 소프트웨어를 소유하고 있지만, 녹음을 위해 Air를 따로 들고 다니지 않고 단일 노트북으로 여행할 수 있으면 좋겠음.
"
"https://news.hada.io/topic?id=11975","Leantime - 오픈소스 JIRA 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Leantime - 오픈소스 JIRA 대체제

     * PM이 아닌 사용자를 위한 전략적 프로젝트 관리 시스템
     * 전략, 계획, 실행을 결합하면서도 누구나 쉽게 사용할 수 있도록 함
     * Trello 처럼 간단하지만, JIRA 처럼 기능이 많음

기능들

     * 태스크 관리
          + 칸반, 간트, 테이블, 리스트, 캘린더 뷰
          + 무제한 서브태스크 및 의존성
          + 마일스톤 관리
          + 스프린트 관리
          + 타임트래킹 과 타임시트
     * 프로젝트 계획
          + 프로젝트 대시보드, 보고서, 상태 업데이트
          + 목표 & 메트릭 추적
          + 린 & 비즈니스 모델 캔버스
          + SWOT 분석 캔버스
          + Risk 분석
     * 정보/지식 관리
          + Wiki/Docs
          + 아이디어 보드
          + 회고(Retrospectives)
          + S3 및 로컬 파일시스템을 통한 파일 저장
          + 스크린 & 웹캠 녹화
          + 모든 곳에 댓글 및 토론 지원
     * 관리
          + 쉬운 설치
          + 멀티 사용자 Role 및 프로젝트당 권한
          + 2팩터 인증
          + LDAP, OIDC 연동
          + Mattermost, Slack, Discord, Zulip 연동
          + 19개 언어 지원

   Docker로 올려봤는데, UI깔끔하네요.
   REdMind에 머물러있는 사람으로서 살펴볼 이유가 생기는거 같습니다.

   한국어는 안 보이네요.

   https://github.com/Leantime/leantime/…

   ko-KR 파일이 있어서 지원하는줄 알았는데.. 그냥 플레이스 홀더만 만들어놓은거 였네요 ㅠ

   일본어 파일은 내용물도 일본어로 들어있는 걸 보면 번역 작업이 아직 안 되어있나 보네요.
"
"https://news.hada.io/topic?id=12014","선박의 비밀 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               선박의 비밀 언어

선박의 비밀 언어

     * 선박의 측면에 있는 표시와 기호는 해상 산업에 대한 이야기를 전달함.
     * 선박의 크기, 모양, 기능 및 특징을 쉽게 파악할 수 있으며, 선체에 적힌 숫자, 문자, 기호를 한눈에 해석할 수 있음.
     * 세계 무역의 80% 이상을 해상 운송이 담당하며, 9만 척 이상의 상선이 국제 해역을 운항함.

선박의 신원과 역사

     * 대부분의 선박은 선미에 소유주, 이름, 국기(또는 ""플래그""), 국제 해사 기구(IMO) 번호를 표시함.
     * 선박의 소유주, 이름, 국기는 변경될 수 있지만, IMO 번호는 국제 해사 조약에 의해 동일하게 유지됨.
     * IMO 번호를 검색하면 선박의 전체 역사를 확인할 수 있음.

편의적 국기

     * 세계 상업 선박의 70% 이상이 ""편의적 국기"" 아래 운항함.
     * 편의적 국기는 선박이 외국에 등록되어 그 나라의 국기를 사용함을 의미하며, 운영 비용 절감, 세금 회피, 안전 기준 회피 등의 목적이 있음.
     * 파나마, 라이베리아, 마셜 제도가 인기 있는 편의적 국기임.

선박의 부하 표시

     * 선박의 최대 적재량을 나타내는 부하 표시는 1876년 새뮤얼 플림솔이라는 영국 의원에 의해 도입됨.
     * 부하 표시는 선박이 과적되었을 때 물속에 사라지는 표시로, 선박의 안전을 위해 중요함.
     * 부하 표시 옆의 글자는 선박의 등록 기관을 나타내며, 다양한 기후 조건에서의 최대 적재량을 표시함.

선박의 구조와 기능

     * 선박의 전방 돌출부인 전구(볼버스 보우)는 항해 효율을 높이는 역할을 함.
     * 선박의 흰색 원과 X 표시는 보타스러스터(선박의 측면 이동을 돕는 추진 장치)의 존재를 알림.
     * 수직으로 배열된 숫자(흘수 표시)는 선박의 수중 깊이를 측정함.

선박의 도색과 유지 관리

     * 선박의 도색은 미적 요소보다는 내구성과 생물 부착 방지를 위한 기능적 목적이 큼.
     * 선박의 도색은 바닷물에 장기간 노출되어도 견딜 수 있는 화학적 구성을 가짐.
     * 생물 부착은 선박의 연료 소모를 증가시키고, 외래 종의 침입을 유발할 수 있음.

선박의 항해와 조종

     * 선박의 흰색 사각형은 선박에 승선할 해상 조종사의 위치를 나타냄.
     * 해상 조종사는 항구의 항해 위험에 정통하며, 선박이 항구에 들어오기 직전에 선장을 대신해 조종함.
     * 선박의 흰색 표시는 선박이 다른 선박이나 도크와 충돌한 흔적임.

GN⁺의 의견

   이 글에서 가장 중요한 것은 선박의 측면에 존재하는 다양한 표시와 기호들이 해상 산업의 복잡한 정보를 담고 있다는 점이다. 이러한 표시들은 선박의 신원, 역사, 구조, 기능, 유지 관리 및 항해에 대한 중요한 데이터를 제공하며, 이는 해상 산업에 종사하는 사람들에게 필수적인 지식이다. 이 글은 해상 산업에 대한 이해를 돕고, 선박에 대한 흥미로운 사실을 알려주어 사람들에게 매력적인 정보를 제공한다.

        Hacker News 의견

     * 불루버스 보우(Bulbous Bow)에 대한 설명
          + 기사에서는 불루버스 보우에 대해 언급하지만, 자세한 설명은 생략함.
          + 선박이 물을 가르며 나아갈 때 발생하는 선체 저항과 선수파를 줄이는 역할.
          + 선체 길이의 제곱근에 반비례하는 선체 저항 감소 효과.
          + 특정 속도에서만 효과적으로 작동하여, 선박의 효율적인 항해 가능.
          + 슬로우 스티밍(Slow Steaming)으로 인해 선박은 더 느린 속도로 재조정되어 연료 효율성 증가.
          + 선박의 건조 시 불루버스 보우를 재설계하여 연료 절약 및 오염 감소에 기여함.
     * 화물선의 위력에 대한 개인적 체험담
          + 화물선의 경적 소리와 함께 선수파를 가르며 항해하는 경험은 장엄함.
          + 화물선의 크기와 힘은 말로 표현하기 어려울 정도로 인상적.
          + 가까이서 화물선을 관찰할 때는 주의가 필요함. 강한 흡입력으로 위험할 수 있음.
     * 해적을 속이기 위한 더미 승무원
          + 사진 속 덱 위에 있는 승무원으로 보이는 인물들은 실제로 해적을 속이기 위한 더미임.
     * 기사에 대한 긍정적인 평가
          + 기사가 명확하고 포괄적인 설명을 제공하여 높은 평가를 받음.
     * 컨테이너 선박에 대한 다큐멘터리 추천
          + 컨테이너 선박의 세계를 다룬 'The Forgotten Space' 다큐멘터리 추천.
     * 선박 표시에 대한 궁금증 해소
          + 선박의 다양한 표시에 대한 의미를 알게 되어 만족함.
     * 선박과 해양 건축/역사에 대한 책 추천
          + 'The Lore of Ships'라는 책이 정보 제공 및 일러스트 품질로 추천됨.
     * 유튜브를 통한 견인선 산업에 대한 흥미
          + 뉴욕 항구와 푸에르토리코에서 활동하는 견인선 선장의 유튜브 채널 추천.
     * LPG 탱커와 보호 견인선에 대한 관찰
          + LPG 탱커가 보호 견인선의 도움으로 항해하는 모습에 대한 관심.
     * 대형 선박의 비밀스러운 삶에 대한 관심
          + 대형 선박과 그 선장들의 삶을 다룬 콘텐츠에 대한 기대감 표현.
"
"https://news.hada.io/topic?id=12023","Open Interpreter - OpenAI 의 Code Interpreter와 같은 기능을 로컬에서 오픈소스로 실행하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Open Interpreter - OpenAI 의 Code Interpreter와 같은 기능을 로컬에서 오픈소스로 실행하기

     * LLM이 파이썬/자바스크립트/쉘 등의 코드를 로컬에서 실행하게 해줌
     * ChatGPT와 비슷한 인터페이스를 통해서 채팅으로 명령 가능
          + 사진/비디오/PDF 편집
          + 크롬 브라우저를 제어
          + 대규모 데이터셋을 플롯/정제/분석 하기
"
"https://news.hada.io/topic?id=12038","더닝-크루거 효과는 자기상관입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           더닝-크루거 효과는 자기상관입니다

더닝-크루거 효과는 자기상관성

     * 더닝-크루거 효과는 무능력한 사람들이 자신의 능력을 과대평가하는 경향을 나타내는 것으로 알려짐.
     * 이 효과는 1999년 심리학자들에 의해 발견되었으며, 많은 연구에서 데이터를 통해 확인되는 것처럼 보임.
     * 그러나 이 효과는 실제로는 통계적 오류인 자기상관성의 결과로, 인간 심리와는 관련이 없음.

자기상관성이란?

     * 자기상관성은 변수가 자기 자신과 상관관계를 갖는 현상을 말함.
     * 예를 들어, 한 사람의 키를 측정하면 그 키는 자기 자신과 완벽한 상관관계를 가짐.
     * 변수가 식의 양쪽에 혼합되어 있을 때 자기상관성을 발견하기 어려움.

더닝-크루거 효과

     * 더닝-크루거 효과는 자기상관성의 한 예로, 실제로는 차트의 오해에서 비롯된 것임.
     * 더닝과 크루거는 사람들을 테스트하여 그들의 능력을 자가 평가하게 한 후, 저성적자들이 자신의 능력을 과대평가하는 경향이 있다고 보고함.
     * 그러나 이러한 결과는 실제로는 테스트 점수와 자가 평가 점수 간의 자기상관성에 의한 것임.

더닝-크루거 효과 해체

     * 더닝-크루거 차트는 테스트 점수를 기준으로 사람들을 그룹화하고, 이를 퍼센타일로 표시하여 자가 평가와 비교함.
     * 이러한 방식은 테스트 점수를 자기 자신과 비교하는 것과 같으며, 이는 자기상관성을 숨기고 있음.
     * 실제로 무작위 데이터를 사용하여도 더닝-크루거 효과가 나타나는 것은 이러한 자기상관성 때문임.

더닝-크루거 효과 재현

     * 실제 데이터를 사용하여 더닝-크루거 효과를 이해하려고 할 때, 원래 데이터와는 다른 결과가 나타남.
     * 실험을 재현하려고 할 때, 원시 데이터는 무작위로 보이며 더닝-크루거 효과의 흔적이 없음.
     * 그러나 데이터를 다르게 분석하면, 더닝-크루거 효과가 나타나는 것처럼 보임.

더닝-크루거 효과의 붕괴

     * 연구자들이 실제로는 무작위 숫자를 사용했음에도 불구하고 더닝-크루거 효과를 재현한 것은 자기상관성 때문임.
     * 이러한 오류를 발견한 후, 더닝-크루거 차트가 실제로는 자기상관성에 기반한 것임을 깨닫게 됨.

더닝 크루거 효과의 부재

     * 통계적으로 유효한 방식으로 더닝-크루거 효과를 측정하면, 효과가 사라짐을 발견함.
     * 교육 수준에 따라 그룹화된 사람들의 자가 평가 오류를 측정한 결과, 평균 오류가 0 주변에 머무르며 더닝-크루거 효과의 증거가 없음.

무능력하고 그것을 모르는 사람들

     * 더닝과 크루거가 통계적 오류를 범한 것은 실수일 수 있으나, 그들의 논문은 무능력한 사람들이 자신의 무능력을 인식하지 못한다는 주장을 담고 있음.
     * 그러나 실제로는 더닝과 크루거 자신들이 통계적 무능력을 드러내고 있었으며, 이는 자기상관성과 심리학적 효과를 혼동한 것임.

GN⁺의 의견

   이 글에서 가장 중요한 것은 더닝-크루거 효과가 실제로는 인간 심리와 관련이 없고, 자기상관성이라는 통계적 오류에 기반한 것이라는 점이다. 이는 연구자들이 데이터를 해석할 때 발생할 수 있는 함정을 보여주며, 과학적 발견이 어떻게 잘못된 통계적 해석에 의해 오해될 수 있는지를 예시한다. 이러한 오류를 이해하는 것은 연구 결과를 해석하고 검증하는 데 있어 중요한 교훈을 제공하며, 이는 초급 소프트웨어 엔지니어뿐만 아니라 모든 과학 분야의 연구자들에게 유익한 정보가 될 것이다.

        Hacker News 의견

     * 댓글자는 자신이 통계학이나 심리학에 대해 충분히 이해하고 있지 않다고 인정하면서, D&K 연구가 자신의 할아버지가 말씀하신 ""더 많이 알수록 자신이 모르는 것이 많다는 것을 깨닫게 된다""는 말과 유사하다고 느낌. 댓글자는 많은 사람들이 실제로 알고 있는 것보다 더 많이 알고 있다고 생각하는 경향이 있으며, 이는 아마도 자신과 해당 기사의 저자에게도 해당될 수 있음을 고민함.
     * 다른 댓글자는 기사의 주장에 동의하지 않으며, D-K 그래프가 단순한 자기상관성의 결과라는 주장에 반박하는 글을 소개함. 실제로는 성과와 성과 평가가 독립적이라고 가정하는 것이 매우 놀라운 일이며, D-K 연구는 성과와 자가 평가 사이에 상관관계가 있음을 보여줬지만, 예상만큼 강하지는 않았다고 설명함. 오히려 일관된 편향을 보여주었고, 이것이 흥미로운 결과임.
     * 이전 토론에서 언급된 바와 같이, 저자는 사람들이 자신의 능력을 예측하는 데 있어서 매우 형편없어서, 자가 평가가 조건 없는 무작위 변수와 같다고 가정함. 실제 능력이 높으면 자가 평가가 무작위 기회에 의해 실제 능력보다 낮을 가능성이 높음. 이러한 비판은 사람들이 정말로 자신의 능력을 그렇게 잘못 평가하는지에 대한 의문을 제기함.
     * 저자들이 ""X - Y 대 X"" 분석을 했지만, 이것이 가장 큰 문제는 아님. 저자들은 0에서 1 사이로 변환되고 제한된 두 측정치를 뺐음. 극단적인 값에서는 어떤 일이 발생하는가? 최고 성과자들은 자신의 성과를 얼마나 과대평가할 수 있는가? 그들은 이미 거의 1에 도달했으므로 별로 할 수 없음. 만약 그들이 동일한 비율과 크기로 과대평가와 과소평가를 한다면, 변환된 값의 상한 효과는 그들이 더 자주 과소평가하는 것처럼 그래프가 보일 것임.
     * Nicolas Boneel과 저자 사이의 댓글에서의 토론이 흥미롭고, Nicolas는 기사를 읽으면서 가졌던 의구심을 표현함. DK 효과의 핵심은 사람들이 자신의 기술을 잘못 평가한다는 것이므로, 만약 그들이 자신의 기술 수준을 무작위로 추측한다고 가정하면 당연히 결과를 재현할 수 있음.
     * 저자가 사용하는 ""자기상관성""이라는 용어는 통계학에서 일반적으로 사용되는 의미와 다름. ""자기상관성""은 시계열 데이터가 시간적으로 어느 정도 지연된 자기 자신과의 상관관계를 의미하는 것으로, OP에서 언급된 것처럼 사용하면 통계학을 아는 사람들에게 혼란을 줄 수 있음.
     * 저자가 상상하는 세계에서, 사람들의 점수 추정이 실제 점수와 독립적이라면, DK 효과가 실제로 존재한다고 말할 수 있음. 낮은 점수를 받은 사람들은 자신의 점수를 과대평가하고, 높은 점수를 받은 사람들은 과소평가하는 경향이 있음.
     * ""편향""이라는 용어에 대한 혼란이 있음. 만약 자가 평가가 무작위로 이루어진다면, 높은 성과자들은 모두 자신을 과소평가할 것이지만, 이것은 과소평가에 대한 편향이 아님. D-K 차트는 다른 편향을 보여주며, 대부분의 사람들이 자신을 평균이라고 생각하는 것과 일치함. 높은 성과자들은 평균을 과대평가하고, 낮은 성과자들은 평균을 과소평가할 것임을 가정함.
     * 기사에서의 ""자기상관성"" 정의와 위키피디아에서의 정의가 다름을 지적함. 기사의 정의는 시간 지연과 관련이 없으며, D-K와 관련하여 ""자기상관성""이라고 부르는 것은 잘못된 표현임.
     * 만약 숙련되지 않은 사람과 숙련된 사람이 평균적으로 동일하게 자가 평가를 한다면, 숙련되지 않은 사람은 과대평가하고 숙련된 사람은 과소평가할 것임. 이것만으로도 중요한 결과가 될 수 있으며, 실제로 상관관계가 있음을 주목함.
"
"https://news.hada.io/topic?id=12015","스트라이프 실시간 대시보드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             스트라이프 실시간 대시보드

        Hacker News 의견

     * Shopify 대시보드와 유사한 기능을 제공하며, 총 거래액은 4100만 달러이고, 이 중 480만 달러가 의심스러운 사기 거래로 차단됨. 이는 거래의 거의 12%에 해당하는 높은 비율임.
     * 디자이너들이 숫자를 멋지게 보이게 만드는 것이 재미있다고 생각함. 대시보드와 같은 곳에서 숫자를 멋지게 표현하는 것은 좋은 디자인 도전 과제가 될 수 있음.
     * Stripe를 통해 처리된 거래액은 약 32억 달러이며, 거래 건수는 약 4200만 건임. Stripe의 '표준' 요금을 기준으로 할 때, 단일 일자에 거래 처리만으로 약 1억 540만 달러의 수익을 올림. Stripe가 얼마나 많은 수수료를 가져가는지는 명확하지 않으며, 카드 네트워크와 발급 은행과 수익을 나눠야 할 가능성이 있음.
     * 80년대 스타일을 좋아하며, 스와이프할 때 나타나는 패럴랙스 효과가 매우 잘 구현되었다고 평가함. 벨기에 Atos Worldline에서 학생으로 일할 때, 건물 입구에 비슷한 대시보드가 있었음.
     * 물리적으로 구매된 모든 제품이 출처, 제조, 저장, 포장, 운송 등의 과정을 거쳐야 한다는 것을 고려하면 기술적으로 매우 인상적임.
     * 숫자는 인상적이지만, 기준선이 누락된 것 같음. 예를 들어, 현재 Stripe에서 '역대 최고의 날'을 기록하고 있는 비즈니스가 8500개라고 하지만, 평소에는 어떤 수치인지 알 수 없음.
     * 이 비디오 게임에는 ""인트로 건너뛰기"" 기능이 필요함.
     * Stripe가 거래당 약 2%의 수수료를 부과한다고 가정할 때, 상당한 수익을 창출하고 있음.
     * 현재 용량 대비 12%의 요청 부하는 낮은 것으로 보임. 경험에 따르면, 간단한 숫자로 요약할 수 있을지라도, 위험을 고려하여 30-50%의 용량을 목표로 함. Stripe의 경우 12%가 정상인지, 특히 이번 주말 수요가 급증할 것을 알고 있는 상황에서 특히 조심스러움. 인프라가 빠르게 확장할 수 있다고 가정하면 최적화되지 않은 것으로 보임.
"
"https://news.hada.io/topic?id=12042","우주 탐사, 무역 및 전투에 관한 오픈소스 게임 'Naev'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   우주 탐사, 무역 및 전투에 관한 오픈소스 게임 'Naev'

Naev 게임 개발 소식

     * Naev는 우주 탐사, 무역, 전투를 주제로 하는 게임임.
     * 플레이어는 은하계를 여행하며 무역, 전투, 임무 수행을 통해 돈을 벌 수 있음.
     * 개발 소식을 받고 싶다면 Blarg를 확인하거나 RSS 리더에 페이지를 추가하여 새 게시물 알림을 받을 수 있음.

최근 게시물 요약

     * 2023년 9월 5일, Sporadic Naev Newsletter Vol. 3 발행.
     * 2023년 7월 30일, 새로운 Autonav 기능 추가, 순찰 경로에서 작동하며 사용자 정의 가능.
     * 2023년 7월 18일, 다양한 폭발 유형을 가진 'Ships Go Boom' 기능 추가.

주요 특징

     * 수백 개의 행성과 달을 탐험할 수 있는 대규모 은하계 제공.
     * Escape Velocity 게임을 연상시키는 실시간, 준뉴턴 게임플레이.
     * 다양한 우주선 구매 및 조종 가능, 각 우주선을 맞춤 설정하는 다양한 방법 존재.
     * 고유한 우주선 디자인과 개성을 가진 다수의 진영.
     * 오픈 소스로, 모딩의 궁극적인 자유 제공, 플러그인도 지원.

게임 개발 참여 방법

     * Naev는 완전한 게임이 아닌 플레이 가능한 단계에 있으며, 창의적인 기여를 통해 게임을 성숙시킬 필요가 있음.
     * 새로운 이야기를 만들고 플레이 가능한 임무로 구성하는 것이 가장 쉬운 기여 방법 중 하나임.
     * 아트나 사운드 제작, 게임플레이 밸런싱, 혹은 C 언어나 Lua로 코딩하는 것도 기여 방법에 포함됨.

게임 다운로드 및 연락처

     * Naev는 다운로드 페이지, Steam, itch.io를 통해 다운로드할 수 있으며, 리눅스 사용자는 추가 소스를 통해서도 게임을 받을 수 있음.
     * 연락처 페이지나 웹사이트 헤더 바를 통해 토론에 참여할 수 있음.

GN⁺의 의견

     * Naev는 우주 탐사와 전투를 주제로 한 게임으로, 플레이어가 은하계를 여행하며 다양한 활동을 통해 돈을 벌 수 있는 흥미로운 게임임.
     * 오픈 소스로 제공되어 커뮤니티의 창의적인 기여를 통해 게임이 성장하고 있으며, 새로운 이야기나 아트, 사운드 제작 등 다양한 방식으로 기여할 수 있는 점이 매력적임.
     * 이 게임은 개발자들의 취미 프로젝트로, 완성된 게임에 대한 최종 계획이나 시간표가 없어 커뮤니티의 참여가 중요하며, 이는 게임 개발에 관심 있는 사람들에게 흥미로운 기회를 제공함.

        Hacker News 의견

     * 몇 년 전 나는 며칠간 Naev를 플레이했는데, 그것은 사랑스러운 향수를 불러일으키는 경험이었음. Escape Velocity를 즐겼던 친구들에게 추천했지만, 게임 자체는 많이 없었고 약간 어색했음. 몇 주 전 다시 게임을 하고 싶어져서 Naev를 다운로드했는데, 개발이 계속되었을 뿐만 아니라 Escape Velocity를 능가했다고 할 정도로 발전했음을 발견했음. 멋진 스텔스 메커니즘, 더 발전된 캠페인, EV에서 기억하는 것보다 더 정교한 AI 등이 있어 ""Elite like"" 장르에서 훌륭한 작품으로 자리매김함. 새로운 플레이어들에게 조언을 하자면, 제국 세계의 우주항 바에서 제국 관리와 대화하여 제국 배송 임무를 수행하라는 것인데, 이것은 일종의 두 번째 튜토리얼로 다양한 진영을 만나게 하고, 중화기와 중전투선 면허를 얻을 수 있음.
     * Naev의 트레일러가 해커뉴스 사이트에서는 제대로 작동하지 않지만, 다행히 YouTube에서도 볼 수 있음. 개발자들이 Escape Velocity의 뿌리를 숨기지 않는 것에 대해 기쁨을 표함. 로고에 있는 우주선이 Kestrel과 매우 비슷해 보임.
     * 많은 Escape Velocity 팬들이 댓글에서 보임. 최근에 원래 시리즈의 개발자 중 한 명이 EV:Override의 리메이크를 시작했는데, 이전 플러그인 형식과 호환되며, 크라우드펀딩에도 불구하고 잘 진행되고 있음.
     * 은퇴하면 무료로 플레이할 수 있는 오픈 소스 비디오 게임을 만드는 재단을 시작하고 싶음. 처음에는 저녁 식사 중에 부모들에게 돈을 많이 뜯어내려는 모바일 게임에 초점을 맞출 생각이었지만, 이 게임도 멋진 대상으로 보임.
     * 이런 종류의 게임을 좋아하는 사람들에게는 항상 Starsector를 추천함. 아름답게 제작되었고 활발히 개발 중이며 이미 플레이하기에 매우 재미있는 게임임.
     * Endless Sky라는 또 다른 오픈 소스 게임이 있음. 이 게임은 Escape Velocity 게임에서 영감을 받았으며, Endless Sky와 Escape Velocity 게임 모두를 즐겼기 때문에 Naev도 언젠가 확인해봐야 할 것 같음.
     * 2000년대 중반에 Flash Trek: Broken Mirror 2라는 플래시 게임을 플레이한 사람이 있는지 궁금함. 당시에는 그 게임이 매우 재미있었음.
     * Verant : Sony 온라인 엔터테인먼트에서 했던 그 우주 게임이 그립고, 또한 우주 해병 게임도 있었음.
     * 2000년대 초에 플레이했던 러시아 게임 Space Rangers가 있었는데, 매우 즐겁게 플레이했고, 당시에 좋아하는 게임 중 하나였음. 2D 게임으로 퀘스트와 우주 탐험, 전투 및 하이퍼 스페이스에서의 아케이드 모드가 있었음. 그 게임을 매우 잘 기억하는데, 당시 기준으로도 성능이 낮은 컴퓨터에서도 매우 빠르게 작동했음. 이제 그 게임을 기억해내니, Naev가 비슷한 것인지 궁금함. 요즘은 러시아 게임을 홍보하고 싶지 않고, 오픈 소스 게임을 더 플레이하고 싶음. 하지만 사용자 인터페이스 관점에서 볼 때, Naev는 20년 전에 만들어진 그 레인저 게임에 비해 상당히 나쁘게 보임. 스크린샷으로만 Naev를 판단하고 있으니, 실제 게임은 더 나아 보일 수도 있음.
     * Star Control II와 그것의 Melee 전투 모드를 조금 생각나게 함.
"
"https://news.hada.io/topic?id=11967","OpenAI 직원들에게 제시된 샘 알트만 해임 이유 두 가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OpenAI 직원들에게 제시된 샘 알트만 해임 이유 두 가지

OpenAI CEO 교체 사태 요약

     * OpenAI의 공동 창립자이자 CEO였던 Sam Altman이 이사회와의 소통 문제로 해임됨.
     * Ilya Sutskever는 직원들에게 해임 이유로 Altman이 동일한 프로젝트를 두 명의 직원에게 맡겼고, 이사회 구성원에게 한 직원에 대해 상이한 의견을 제시했다고 설명함.
     * 직원들은 이러한 이유를 받아들이지 못하고 대부분이 회사를 떠날 준비를 함.

직원들의 반응과 회사의 혼란

     * 직원들은 Altman의 복귀를 기대했으나, 대신 Emmett Shear가 임시 CEO로 임명되어 충격을 받음.
     * Sutskever는 회사의 혼란 상태에서 Shear의 임명 소식을 전달함.
     * 직원들은 이사회의 설명에 의문을 품고, 내부적으로는 이사회의 '쿠데타'로 여김.

직원들의 대응과 오픈 레터

     * 직원들은 Altman이 복귀하지 않을 경우 사퇴할 것이라는 내용의 오픈 레터를 작성하고, 90% 이상의 직원이 서명함.
     * 이사회 구성원의 교체와 Altman의 복귀를 요구함.
     * 현재 Altman은 Microsoft에서 임시 직책을 맡고 있으며, 회사로의 복귀를 협상 중임.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 OpenAI의 CEO Sam Altman의 갑작스러운 해임과 그로 인한 회사 내부의 혼란 상태임. 이 사건은 인공지능 분야의 선두 기업 중 하나인 OpenAI의 리더십과 내부 거버넌스에 대한 심각한 문제를 드러내며, 기술 업계 전반에 영향을 미칠 수 있는 중대한 변화를 예고함. 직원들의 대규모 이탈 위협과 오픈 레터는 이사회의 결정에 대한 강력한 불만과 회사의 미래에 대한 불확실성을 나타냄. 이러한 상황은 기술 업계의 파워 밸런스, 기업 문화, 그리고 인공지능 기술의 발전 방향에 대한 흥미로운 토론을 촉발할 것으로 보임.

        Hacker News 의견

     * OpenAI의 Sam Altman이 해임된 배경에 대한 추측
          + Altman이 비영리 조직을 이끌며 많은 기부금을 모은 뒤, OpenAI를 매우 인기 있는 스타트업으로 전환하고 상업화에 속도를 냄.
          + 최근에는 사우디에서 수십억 달러를 투자받아 AI 가속기를 만들 계획이었음.
          + 경험이 부족한 이사회와 D'Angelo의 움직임이 결합되어 기술 역사상 가장 큰 혼란을 야기함.
     * 해임 이유와 관련된 이사회의 미시적 관리
          + AGI의 안전성이나 OpenAI의 비영리 지위와 관련된 고상한 이념보다는 인사 결정에 대한 미시적 관리가 해임 이유로 보임.
          + Ilya Sutskever가 해임 이유를 전달받았다고 언급한 것이 중요한데, 이는 이사회가 AGI에 대한 우려를 가진 연구 책임자에 의해 이끌렸다는 인식과 상충함.
     * CEO와 이사회의 침묵
          + 현재 CEO인 Emmett의 공개적인 입장 표명 부재.
          + 이사회는 새 CEO와 리더십 팀에 대한 신뢰를 공개적으로 표명하고, 상황을 안정화시키기 위한 결정적 조치를 취하며, 안정화 이후 회사를 전진시킬 계획을 가지고 있어야 함.
     * 동일한 프로젝트를 두 사람에게 부여한 이유
          + 다른 접근 방식을 얻기 위해 흔히 사용되는 방법이며, 이것이 CEO를 해임할 이유가 될 수 없음.
          + 이사회는 Sam을 해임할 명확한 이유를 제시하지 않았으며, 실수를 저질렀을 가능성.
     * Altman 해임의 진짜 이유에 대한 추측
          + 공개할 수 없는 이유로 인해 Altman이 해임되었다는 추측.
          + 회사 내부의 심각한 문제, 예를 들어 현금 부족 등이 해임을 결정하게 만든 원인일 수 있음.
     * 해임 이유로 제시된 '동일한 프로젝트 부여'에 대한 의문
          + 많은 회사에서 흔히 발생하는 일로, 이것이 해임의 진짜 이유가 될 수 없음.
     * Sutskever의 역할과 해임 과정에 대한 의문
          + Sutskever가 이사회로부터 해임 이유를 전달받았다고 언급했으나, 이는 그가 해임 과정에서 주도적 역할을 했을 수 있음을 시사함.
     * 이사회의 입장 표명 부재
          + 이사회가 실제 해임 이유를 공개하지 않거나, 공개할 수 없는 법적 제약이 있을 수 있음을 암시함.
"
"https://news.hada.io/topic?id=11964","OpenAI의 불일치와 Microsoft의 이득","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       OpenAI의 불일치와 Microsoft의 이득

OpenAI의 변화와 Microsoft의 이득

     * OpenAI의 전 CEO인 Sam Altman이 이사회에 의해 해고되고, 전 회장 Greg Brockman이 이사회에서 제외된 후 사임함.
     * 주말 동안 Altman이 복귀 협상 중이라는 소문이 돌았으나, OpenAI는 전 Twitch CEO인 Emmett Shear를 새 CEO로 고용함.
     * 일요일 밤, Microsoft의 Satya Nadella가 트윗을 통해 Altman과 Brockman이 동료들과 함께 Microsoft에 합류할 것이라고 발표함.
     * Microsoft는 OpenAI의 지적 재산권(IP)에 대한 영구 라이선스를 보유하고 있으며, OpenAI의 인재 유출이 발생할 경우 이를 활용할 인재를 확보할 수 있게 됨.
     * OpenAI는 자금과 컴퓨팅 파워를 Microsoft에 의존하고 있으며, OpenAI의 직원들이 AI 작업을 수행하면 그 결과물은 Microsoft의 소유가 됨.
     * OpenAI의 강점인 ChatGPT는 대규모 소비자 플랫폼을 향해 나아가고 있으나, 이사회는 ChatGPT가 회사에 부여한 인센티브에 대해 이미 재고하고 있을 수도 있음.

OpenAI의 비영리 모델

     * OpenAI는 2015년에 ""비영리 인공지능 연구 회사""로 설립됨.
     * OpenAI의 목표는 금전적 이익 창출에 구애받지 않고 인류 전체에게 가장 유익할 방식으로 디지털 지능을 발전시키는 것임.
     * OpenAI는 501(c)3 비영리 조직으로, 초기에는 연구 결과와 계획을 공유하겠다는 약속을 했으나, 이후에는 이러한 약속을 철회하고 AI 기술의 일반적인 목적을 위한 개발에 집중함.
     * OpenAI Global, LLC는 Microsoft가 소수 지분을 보유한 캡 프로핏(capped profit) 회사로, 비영리 조직의 사명 아래 운영됨.

ChatGPT와 관련된 변화

     * ChatGPT는 2022년 11월 말에 출시되어 전 세계적으로 폭발적인 반응을 얻음.
     * ChatGPT는 주간 사용자 1억 명 이상, 수익 10억 달러 이상을 기록함.
     * ChatGPT는 새로운 주요 소비자 기술 회사의 기반으로 자리 잡을 가능성이 있으며, 이는 가장 가치 있고 구축하기 어려운 회사 유형임.

Microsoft와 이사회의 대립

     * OpenAI 이사회는 회사의 가치를 소각한 것에 대해 기술 트위터에서 많은 충격을 받음.
     * 이사회의 임무는 돈을 버는 것이 아니라, 비영리 조직으로서의 사명을 수행하는 것임.
     * OpenAI의 구조는 결국 회사와 Microsoft 간의 파트너십에서 조정 문제를 제거하고, Microsoft가 OpenAI의 IP와 팀을 확보하게 함으로써 AI 분야에서 주도권을 잡게 함.

Altman에 대한 질문

     * 이사회의 조치는 Altman이 이사회와의 소통에서 일관되게 정직하지 않았다는 이유로 정당화될 수 있음.
     * Altman은 Microsoft로 이동하는 것이 놀랍지만, Microsoft가 OpenAI의 IP에 대한 접근 권한을 유지하고 무한한 자금과 GPU 접근성을 결합할 수 있다는 점에서 AI에 대한 권력을 추구하는 것이 그의 주요 동기일 수 있음.

변화된 AI 경관

     * Microsoft는 AI 분야에서 주도적인 위치를 차지하고 있으며, OpenAI와의 파트너십을 통해 기술과 팀을 확보함.
     * Google은 AI 개발의 느린 속도에 대한 인식을 개선하기 위해 중요한 변화를 고려해야 할 수도 있음.
     * Anthropic은 독립적인 실체로서의 지속 가능성이 점점 더 불투명해지고 있으며, Microsoft와의 경쟁에 직면함.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 OpenAI의 경영진 변화와 Microsoft의 이득이며, 이는 AI 기술과 관련된 기업 전략에 중대한 영향을 미칠 수 있기 때문에 흥미롭다. OpenAI의 비영리 모델이 어떻게 Microsoft에게 유리하게 작용했는지, 그리고 이러한 변화가 AI 산업의 미래에 어떤 의미를 가지는지에 대한 분석은 AI 기술의 상업적 활용과 관련된 전략적 결정을 내리는 데 있어 중요한 통찰력을 제공한다.

        Hacker News 의견

     * 사람들이 이번 조치를 응원하는 것에 대해 놀라움을 표함.
     * Tigris 프로젝트는 시작부터 실패할 것이라는 의견 제시. Microsoft 이사회의 반발과 SEC의 조사 가능성 때문에 Sam Altman이 Microsoft에서 영향력을 행사하기 어려울 것이라는 전망.
     * OpenAI 직원들이 Microsoft로 이동하면서 자신들의 지분을 포기하고 Microsoft의 평범한 주식 보상을 받을 것이라고 생각하는 사람들에 대한 의문 제기. Microsoft에서의 낮은 연봉 인상률, 보너스 부재, 강제 인원 감축 등을 지적.
     * Sam Altman이 이사회에서 더 적은 권력을 가질 것이며, 3조 달러 규모의 대기업 이사회는 OpenAI 이사회보다 더 위험을 기피할 것이라는 의견.
     * Satya Nadella가 이사회에 영향을 미치는 것에 대한 온라인 상의 추측들을 팬픽션으로 치부하며, Nadella의 투자가 권력 유지 측면에서 SV 역사상 최악이었다는 주장.
     * OpenAI 직원들에게 회사를 떠날 계획이 있다면, 이는 자신의 사업을 시작하기에 최고의 기회라고 조언. 창업자로서 충분한 지분을 확보하고, 투자자들로부터 높은 평가를 받아 자금을 확보할 것을 권장.
     * OpenAI의 실수와 Microsoft의 훌륭한 대응으로 기사 제목을 재작성할 것을 제안. Microsoft가 AI 스택 전체에 대한 더 많은 통제권을 가지게 되었지만, OpenAI 2.0이 OpenAI 1.0보다 나쁜 사업일 가능성, 임금 비용 상승, OpenAI의 사업 방해, 경쟁사로의 인재 이탈 가능성 등을 지적.
     * 기사 분석이 대체로 좋지만, 비영리 기업이 영리 기업보다 나쁘다는 결론에 이의를 제기. OpenAI가 비영리로 설립된 이유는 수익과 소비자 유치가 회사의 주된 목표가 아니었기 때문.
     * Satya Nadella가 일요일 밤 트윗을 통해 Altman과 Brockman이 Microsoft에 합류한다고 발표했다는 소식. 이는 Microsoft의 전략이 완성되었다는 의견과 함께 젊은이들이 이러한 전략에서 배워야 한다는 조언.
     * AI에 대한 지원이 인류에게는 비극이라는 의견. AI가 창의적인 직업을 대체하고, 사람들 간의 상호 의존성을 약화시키며, 대기업에 대한 의존성을 증가시키는 것에 대한 우려 표현.
     * Microsoft에 인수된 스타트업에서 근무한 경험을 바탕으로, Microsoft의 문화가 혁신을 촉진하는 문화와 양립하기 어렵다는 의견 제시.
     * OpenAI의 인재들이 Microsoft로 이동하는 것이 Microsoft에게 유리하다고 생각하는 것에 대한 의문. OpenAI가 구축한 데이터 세트, 도구, 모델 등을 Microsoft가 단기간에 따라잡기 어려울 것이라는 전망.
     * 비영리 조직의 이사회는 이윤 창출이 목표가 아니라는 점을 강조하며, Altman을 해임하는 과정에서 비영리 조직의 이익을 충분히 고려하지 않았다는 비판.
     * OpenAI의 공동 창립자 Ilya Sutskever와 500명 이상의 직원들이 Sam Altman 해임 결정에 반발하여 회사를 떠날 것이라고 위협. 이사회의 무능함을 지적하며, 이사회가 사임하지 않을 경우 대규모 사직을 고려하고 있음을 밝힘.
"
"https://news.hada.io/topic?id=12044","그들은 고기로 만들어졌다 (1991)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          그들은 고기로 만들어졌다 (1991)

요약: 우주에서 만난 생각하는 고기

     * 우주선의 승무원들이 지구에서 몇몇 인간을 납치하여 조사한 결과, 인간은 완전히 고기로 이루어져 있음을 발견함.
     * 인간은 고기로 만든 기계를 통해 라디오 신호를 보내며, 이를 통해 우주에 메시지를 전달하려 함.
     * 승무원들은 인간이 생각하고, 꿈꾸며, 사랑하는 등의 감정을 가진 '생각하는 고기'라는 사실에 당황함.

승무원들의 대화

     * 승무원들은 인간이 만든 기계에 대해 논의하며, 인간이 기계를 만들었다는 사실에 놀라움을 표함.
     * 인간의 뇌도 고기로 이루어져 있으며, 이 고기가 생각과 의식을 가지고 있다는 것을 이해하는 데 어려움을 겪음.
     * 인간이 우주를 탐험하고 다른 지적 생명체와 소통하고자 하는 의지를 가지고 있음을 알게 됨.

승무원들의 결정

     * 승무원들은 공식적으로는 모든 지적 생명체와 접촉해야 하지만, 비공식적으로는 인간의 존재를 기록에서 지우고 잊어버리는 것이 낫다고 생각함.
     * 인간은 특별한 '고기 용기'를 통해 다른 행성으로 여행할 수 있지만, 빛의 속도로만 이동할 수 있어 실제로 접촉할 가능성은 극히 낮음.
     * 승무원들은 인간을 꿈으로 여기게 하고, 이 부분 우주를 무인 지역으로 표시하기로 결정함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 지적 생명체로서 인간의 독특함과 우주 다른 생명체와의 소통에 대한 인간의 노력이다. 이야기는 인간이 '생각하는 고기'라는 독특한 관점을 제시하며, 이는 우리가 자신을 바라보는 새로운 방식을 제공한다. 이러한 창의적인 설정은 독자들에게 흥미로운 반전을 선사하며, 우리가 우주에서 어떻게 인식될 수 있는지에 대한 상상력을 자극한다.

        Hacker News 의견

     * ""이 이야기에서 사람들이 무엇을 보는지 이해할 수 없음. 고기는 수조 개의 자가 복제 기계들로 복잡하게 조직되어 있으며, 각각은 매우 복잡함. 인간의 마음이 만들어낸 것보다 훨씬 더 발전된 것임. 만약 느린 지질학적 과정이나 일시적인 먼지 구름이 자각을 가지고 있다면, 웃음이 나오는 마지막 일일 것임. 우리가 내부적으로 젖어 있고 컴퓨터 칩은 건조하다는 추상적 연관성 때문일까? 그것은 단지 우리 기술이 현재 있는 곳일 뿐임.""
          + 이 댓글은 생명체의 복잡성과 인간 기술의 현재 한계에 대한 성찰을 담고 있음.
     * ""단어 '고기'는 대화의 언어에서 더 나은 단어가 없어 부정확하게 번역된 개념임. '유기물'이 더 정확할 수 있지만, 덜 인상적임. 이것은 '신뢰할 수 없는 서술자' 테마의 변형인 '신뢰할 수 없는 언어'임. 이는 진 월프의 'Book of the New Sun'에서 우주 항해 문명의 유물을 중세 언어로 묘사하는 것과 같이 많이 사용됨.""
          + 이 댓글은 언어와 번역의 불완전성이 어떻게 이야기에 깊이를 더할 수 있는지를 설명함.
     * ""앤디 위어의 'The Egg'는 또 다른 훌륭한 단편 소설임. 단편 소설을 더 찾고 있다면, 테드 창의 'Exhalation'과 'Story of Your Life and Others', 켄 리우의 'Paper Menagerie', 보르헤스의 'Ficciones', 스물리안의 'What is the Name of This Book?'과 'Lady or the Tiger?', 더글러스 애덤스의 'God's Debris'를 추천함. 가능하면 지역 서점을 지원하는 것을 잊지 말 것.""
          + 이 댓글은 다양한 단편 소설과 지역 서점 지원의 중요성을 강조함.
     * ""이 오디오 공연을 좋아함. 매번 들을 때마다 미소가 지어짐.""
          + 이 댓글은 오디오 공연에 대한 개인적인 즐거움을 표현함.
     * ""This American Life가 메이브 히긴스와 H. Jon Benjamin과 함께 이 이야기를 녹음함.""
          + 이 댓글은 특정 오디오 공연에 대한 정보를 제공함.
     * ""이것은 몇 가지 변경을 통해 정말로 웃긴 노래로 만들어짐.""
          + 이 댓글은 이야기가 노래로 변환되었을 때의 재미를 언급함.
     * ""BBC 라디오 버전도 있음.""
          + 이 댓글은 BBC 라디오 버전에 대한 정보를 공유함.
     * ""이 이야기를 즐겼지만, 그들이 '고기'라는 단어를 가지고 있으면서 생물학적 시스템이나 동물의 의식에 익숙하지 않다는 것이 이상하게 느껴짐.""
          + 이 댓글은 이야기의 특정 측면에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=12035","정상 작동 소음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                정상 작동 소음

        Hacker News 의견

     * 슈퍼차저로 이동할 때 발생하는 모터의 윙윙거리는 소리가 매우 멋지고 놀라움
          + 차량 이동 외에도 모터가 배터리를 따뜻하게 하기 위해 열을 발생시키는 등 다양한 목적으로 사용될 수 있음을 시사
          + RC 차량의 ESC가 모터를 사용하여 상태를 나타내는 청각적 신호음을 생성하는 것과 유사함
     * 슈퍼차저에서의 큰 '팝' 소리와 슈퍼차징 후 운전 중 발생하는 소리에 처음에는 놀람
          + 온도 변화로 인해 발생하는 '팝' 소리는 다소 이상하고 약간 성가심
          + 특히 기후가 변하는 도중에 운전할 때, 예를 들어 산을 오를 때, 충전 후 상당 시간 동안 발생하기도 함
     * 엔지니어링 팀이라면 이러한 소음을 제거하려고 노력할 것
          + 슈퍼차저에서 발생하는 '팝'과 '방글' 소리는 금속 방패가 가열될 때 변형되기 때문에 발생하며, 이를 방지하기 위해 금속에 원형 능선을 찍어내어 강철의 탄성을 이용해 확장할 수 있도록 설계 가능
          + 브레이크에서 나는 '클렁' 소리는 스테인리스 스프링 클립을 사용하여 패드가 캘리퍼 안에서 움직이지 않도록 함으로써 제거 가능
          + 접촉기가 열리고 닫힐 때 나는 소리는 접촉기의 개폐 속도를 늦춤으로써 해결 가능하며, 또는 접촉기를 전혀 사용하지 않고 고전압 시스템을 항상 에너지화된 상태로 유지하고 다른 구성 요소들이 적절히 낮은 누설 전류를 가지도록 설계 가능
     * Ludicrous 모드 활성화 시 가속 중 캐빈 소음이 멋진 특징으로 여겨짐
     * 다양한 차량의 문제가 발생할 때 나는 소리의 고품질 녹음본 아카이브에 돈을 지불할 의향이 있음
          + 정비사에게 소리를 흉내 내어 설명하는 대신, 소리를 듣고 비용을 예상할 수 있어 유용할 것
     * 수십 개의 경고음을 듣고 혼동한 후, 기술이 이렇게 원시적인 방식으로 우리에게 소통하는 것을 왜 받아들이는지 의문
          + 긴급 경고에는 경고음을 유지하되, ""너무 빠름"", ""너무 가까움"", ""핸드 브레이크 활성화"" 등과 같이 음성으로 소통하는 방식을 제안
     * 타이어나 브레이크에서 나는 '삐걱' 소리에 대해
          + 테슬라 차량이 아닌 자신의 차에서도 겨울철에 이러한 소리를 들었으며, 최근 서비스 후 특히 뒷브레이크 교체 후에 들음
          + 오후에 정비사에게 차를 가져갔을 때 소리를 재현할 수 없어 당황스러웠으나, 이제는 걱정할 필요가 없다는 것을 알게 됨
     * Ludicrous 모드 활성화 시 가속 중 캐빈 소음이 가장 흥미로운 부분으로 여겨짐
     * 이전 차량인 2014년형 Model S가 모든 차량 중 가장 좋아하는 가속 소리를 냈으며, 속도가 증가함에 따라 상승하는 굵은 와인 소리가 부하가 증가함에 따라 더 크게 들림
          + Model 3로 업그레이드한 후에도 그 소리와 번아웃을 할 수 있는 능력이 그리움
"
"https://news.hada.io/topic?id=12028","본드 악당 준수 전략","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              본드 악당 준수 전략

본드 악당 준수 전략

     * 본드 영화의 악당 관점에서 볼 때 더 흥미로움.
     * 악당은 돈과 권력에 인접해 있으나 더 많은 것을 갈망함.
     * 기존 기관에서 벗어나 독립적인 권력 기반을 구축함.
     * 어떤 조직도 조종할 수 있는 능력을 가짐.
     * 법률이나 정부의 제약을 받지 않는 존재로 묘사됨.

예술은 삶을 모방한다

     * ""본드 악당 준수 전략""이라는 표현은 암호화폐 산업의 일반적인 관행을 설명함.
     * 운영은 멀리 떨어진 곳에 기반을 두고, 어디에도 속하지 않는 척함.
     * 은행 접근과 풍부한 국가의 유리한 상대방을 얻기 위해 거짓말을 함.
     * 사용자와 상대방은 이를 거짓으로 인식하고 있음.
     * 결국 Binance와 CEO Changpeng Zhao는 세계 최대의 범죄 돈세탁 음모로 유죄를 인정하고 40억 달러 이상의 벌금을 지불함.

바이낸스의 간략한 역사

     * 바이낸스는 현재 세계 최대의 암호화폐 거래소임.
     * 주요 수익원은 암호화폐 선물을 이용한 레버리지 베팅에서 발생함.
     * 이를 유지하기 위해 전 세계적인 돈세탁 작업을 운영함.
     * CZ는 일본과 뉴욕에서 일하며 암호화폐에 관심을 가지고 OKCoin의 CTO가 됨.
     * 바이낸스는 2017년 ICO를 통해 급성장함.

바이낸스는 이 모든 일들이 어디에서 일어났는가?

     * 바이낸스는 일본에서 초기에 많은 사업을 함.
     * 일본 금융청은 바이낸스가 불법적으로 운영되고 있다고 명확히 함.
     * 바이낸스는 일본에서의 사업을 공식적으로 종료했으나 실제로는 계속 일본 고객을 서비스함.
     * 바이낸스의 거래소는 AWS 도쿄 데이터 센터에서 운영됨.
     * 바이낸스는 상하이에 사무실을 유지했으나 중국 경찰의 급습을 부인함.
     * 바이낸스는 몰타, 러시아, 영국, 프랑스, 독일, 네덜란드 등 여러 관할 구역에서 운영됨.

이 모든 것이 어떻게 이렇게 오랫동안 작동했는가?

     * 글로벌 금융 시스템은 일정 수준의 부정행위를 용인함.
     * 바이낸스는 전문가들의 조언을 따라 성장함.
     * 금융은 세계가 복잡하기 때문에 복잡함.
     * 바이낸스는 결국 성장을 멈추고 낮은 프로필을 유지해야 했으나 계속 성장함.

바이낸스에게는 이제 무슨 일이 일어날까?

     * 바이낸스가 범죄 음모를 인정한 것은 실제로 긍정적인 소식임.
     * 벌금은 약 40억 달러이며, 미국은 비트코인으로의 지불을 받아들이지 않음.
     * 바이낸스는 내부에 모니터를 설치하여 법적 준수를 강화하도록 강제될 것임.

본드 악당은 실제로 어떻게 규제되는가?

     * 본드 악당 전략이 작동할 가능성은 없었음.
     * 미국은 전자 달러를 만진 적이 있다면 미국 법의 관할권에 동의한 것으로 간주함.
     * 바이낸스는 미국 시장과 인프라를 의도적으로 사용함.

곧 발표될 소식

     * 바이낸스는 미국과 전 세계에서 태그 어롱 집행 조치를 받을 것임.
     * SEC는 바이낸스에 대해 막대한 영향을 미칠 것임.
     * 바이낸스는 금융 시스템에서 점차적으로 제거될 것임.

패트릭의 자만함

     * 법의 국가로서, 일부 법률을 개혁하는 것을 지지함.
     * 암호화폐 사업의 합법적인 부분이 존재할 수 있음.
     * 범죄가 제품이었으며, 글로벌 금융 인프라를 변화시킬 기회는 과장되었음.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 바이낸스가 글로벌 금융 시스템에서 범죄 음모를 인정하고 이에 대한 벌금을 지불하는 것으로 합의에 이르렀다는 점이다. 이러한 사건은 암호화폐 산업의 미래와 금융 규제의 중요성에 대한 흥미로운 토론을 촉발할 것이며, 기술과 금융의 교차점에 관심이 있는 사람들에게 매력적인 주제가 될 것이다.
"
"https://news.hada.io/topic?id=12056","도구의 주기율표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                도구의 주기율표
"
"https://news.hada.io/topic?id=12033","완전 초보자를 위한 Go 언어로 게임 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        완전 초보자를 위한 Go 언어로 게임 만들기

코딩으로 재미 찾기: 게임 개발로 번아웃 극복하기

     * 개발자 커뮤니티에서 자주 보이는 불만: 코딩에 대한 열정이 사라짐
     * 번아웃을 해소하기 위한 팁: 코딩을 다시 즐기기 위해 자신만의 게임 만들기
     * 게임 개발로 프로그래밍에 빠진 개인 경험 공유
     * Go 언어와 Ebitengine 라이브러리를 사용하여 게임 개발 권장

게임 개발의 기본 원리

     * 영화와 유사하게, 게임은 빠르게 연속된 이미지(프레임)의 집합
     * 게임은 실시간으로 이미지를 생성하고, 사용자 입력에 따라 다음 프레임 변경
     * 게임은 기본적으로 무한 루프, 이미지 그리기와 로직 업데이트 반복

프로젝트 설정

     * Go 모듈 생성 및 Ebitengine 라이브러리 추가
     * 게임 인터페이스의 최소 구현으로 빈 창 실행

자산 로딩

     * 프로그래머 아트를 사용하거나 무료 자산 활용 권장
     * embed 패키지를 사용하여 자산을 코드에 로드

이미지 그리기

     * Draw 메소드 내에서 모든 그리기 작업 수행
     * ebiten.Image의 DrawImage 메소드를 사용하여 다른 이미지 위에 이미지 그리기
     * DrawImageOptions 구조체를 통해 이미지의 위치, 회전, 크기 조절

게임 로직

     * Game 구조체는 게임 상태를 유지하고 Update 메소드로 상태 변경
     * 예시로 플레이어의 위치를 (X, Y) 벡터로 유지

움직임

     * Update 메소드에서 플레이어의 위치를 업데이트하여 움직임 구현
     * 키보드 입력에 따라 플레이어의 위치 변경

타이머

     * 게임 내에서 시간에 따른 로직 변경을 위한 타이머 구현
     * Timer 구조체를 사용하여 특정 시간 간격으로 이벤트 발생

게임 오브젝트

     * 플레이어와 같은 게임 오브젝트를 캡슐화하여 관리
     * 각 오브젝트는 자체 Update 및 Draw 메소드를 가짐

오브젝트 생성

     * 메테오 오브젝트를 생성하고 화면 가장자리에서 스폰
     * Game 구조체는 메테오 오브젝트를 추적

총알 발사

     * 총알 발사 로직과 쿨다운 타이머 구현
     * Player가 총알을 생성하고 Game이 추적

충돌 감지

     * 충돌 감지를 위해 Rect 구조체와 Collider() 메소드 구현
     * 게임의 Update에서 오브젝트 간 충돌 검사

GN⁺의 의견

   이 글에서 가장 중요한 것은 개발자들이 번아웃을 극복하고 코딩에 대한 열정을 되찾을 수 있는 방법을 제시한다는 점이다. 게임 개발은 창의적이고 재미있는 프로젝트를 통해 코딩 기술을 연습하고, 동시에 새로운 언어나 라이브러리를 배울 수 있는 기회를 제공한다. 이 글은 개발자들에게 코딩을 취미로 다시 즐길 수 있는 영감을 주며, Go 언어와 Ebitengine 라이브러리를 사용한 게임 개발의 기본적인 접근 방법을 설명함으로써 흥미를 불러일으킨다.

        Hacker News 의견

     * 첫 번째 사용자는 새로운 언어나 그래픽 API를 배울 때 성능 테스트를 위해 파이어워크나 간단한 파티클 시뮬레이션을 작성하는 것을 선호함. 2021년에 Go와 Ebitengine을 사용하여 실험했을 때, 60fps에서 많은 픽셀을 움직일 수 있었던 놀라운 성능과 사용의 용이성에 깊은 인상을 받음.
     * 두 번째 사용자는 지난해 Go 언어를 사용하여 g3n-engine을 이용한 게임 개발을 진행함. Go 언어를 좋아하고 배우고 싶어 선택했으며, 과거 2D 게임 개발 경험에 이어 3D 작업을 하고 싶어 g3n-engine을 선택함. 게임 제작은 유급 작업보다 훨씬 도전적이고 보람찬 경험이며, 학습해야 할 내용이 끊임없이 있음.
     * 세 번째 사용자는 Go 언어를 위한 Ebiten API가 매우 좋으며, API 디자인에서 영감을 받을 수 있음을 언급함. 또한, Go를 C++로 변환하는 사용자 정의 컴파일러를 사용하여 게임 개발에 성능을 향상시키고, C/C++ API에 접근하며, WebAssembly에서도 좋은 성능을 제공함. 이 컴파일러는 Go 코드에서 GLSL을 생성하는 실험도 포함함.
     * 네 번째 사용자는 Go 개발자는 아니지만, Go를 사용하여 게임을 만드는 한 YouTuber/Twitch 스트리머를 오랫동안 지켜봄. 해당 스트리머는 Go로 작은 MMO를 개발하고 있으며, OpenGL과 WASM을 사용하여 웹 버전을 개발함. Go의 가비지 컬렉션이 매우 견고하다고 이해함에도 불구하고, 많은 사람들이 ""왜 Go로 만드는가?""라고 물음.
     * 다섯 번째 사용자는 기사의 첫 부분에만 반응하며, 저자가 설명한 번아웃을 경험하고 있다면 취미를 ""재정복""하기보다는 관심사를 발전시키는 것을 제안함. 이는 뇌가 정체되고 있다는 신호일 수 있으며, 프로그래밍과 다르지 않아도 좋지만, 컴퓨터 과학 이론으로 더 깊이 파고들 시기일 수 있음.
     * 여섯 번째 사용자는 몇 년 동안 Ebitengine 사용자로서 만족스러운 경험을 함. Ebitengine으로 만들어진 게임의 소스를 보고 싶다면 awesome-ebitengine 목록을 확인할 것을 추천함. 해당 사용자의 itch.io 프로필에 나열된 모든 게임은 Ebitengine을 사용하여 만들어졌으며, 모두 오픈 소스임.
     * 일곱 번째 사용자는 Ebitengine을 사용하여 게임을 개발 중이며, 경험이 상쾌하다고 느낌.
     * 여덟 번째 사용자는 Go가 큰 게임을 작성하기에 적합한 플랫폼인지, C#을 사용하는 것을 정당화할 만큼 충분한 라이브러리와 성능이 있는지에 대해 의문을 제기함.
     * 아홉 번째 사용자는 Go의 고루틴 개념 때문에 게임 제작에 적합한 언어인지 궁금해하며, 언젠가 시도해볼 생각임.
     * 마지막으로, Ebitengine을 기반으로 한 게임에 대한 언급이 있으며, ""Sprite 컴포넌트 예시가 어떻게 보일 수 있는지""에 대한 문장이 끊겨 있어 수정이 필요함을 지적함.
"
"https://news.hada.io/topic?id=11980","인공지능: 다가오는 혁명(AI: the coming revolution) 보고서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              인공지능: 다가오는 혁명(AI: the coming revolution) 보고서

  개요

     * Cerebral Valley AI Summit 행사에서 Cortue Ventures의 Sri Viswanath가 발표한 AI 현황에 대한 내용입니다.
     * Cortue Ventures는 지금까지 10년 이상 AI 분야를 지켜보며 50개가 넘는 AI 관련 회사들에 투자한 투자 회사(VC)입니다.
     * 특히, 이 보고서에는 HuggingFace, GitHub의 다양한 지표들을 분석하여 공개한 것이 특징입니다.
     * 2002년이 AI의 폭발적인 성장을 불러온 해였다면, 2023년은 AI 파도(wave)가 형태를 갖추고 더 넓은 분야에 영향을 끼치기 시작한 해입니다.

  AI는 허들을 넘어 세계를 의미있게 개선할 수 있음

     * GitHub Copilot을 사용하여 작업을 50% 이상 빨리 완료하고, 고객 지원 비용이 최대 95% 감소하고 있습니다.
     * 사용자는 더 만족하고, 응답시간은 더 빨라졌으며, BCG의 연구 결과 지식작업의 질 또한 40% 가량 향상되었다고 합니다.
     * AI는 돌파구를 찾고 있으며, 우리의 일상 생활과 현대 경제 전반에 영향을 미칠 것으로 기대합니다.

  오픈소스는 AI의 심장이지만, 모두가 동등하지는 않음

     * 오픈소스 연구, 데이터 및 커뮤니티는 AI 혁명의 핵심입니다. 트랜스포머 논문으로부터 최신 Llama-2 모델까지, 오픈소스는 엔지니어들이 AI를 반복적으로 개선하도록 했습니다.
     * 하지만 모든 오픈소스가 진정으로 '열려(open)'있지는 않으며, 최근 회사들은 연구 내용이나 결과를 공개하지 않거나, 모델을 비공개로 유지하는 등의 움직임을 보였습니다.
     * 그럼에도 불구하고, 우리는 오픈소스 AI 커뮤니티가 활기차게 성장하고 있는 것으로 보고 있습니다:
          + 2023년 11월 기준으로, GitHub에서 20만 명 이상의 개발자들이 AI 프로젝트에 기여하고 있습니다.
          + 또한, Hugging Face에는 30만 개 이상의 모델이 게시되었고, AI 관련 Discord 채널의 회원 수는 1800만 명을 넘어섰습니다.

  AI 중심의 새로운 기술 스택에 대한 이해가 필요함

     * 밀려오는 AI의 물결은 서비스를 개발하는 기술 스택을 변화시키고 있습니다.
     * 개발자와 투자자들은 각 스택의 구성 요소와 어떻게 상호작용하는지를 알아야 합니다.
     * 지금까지는 AI 모델 레이어가 가장 큰 투자를 받았지만, AI를 위한 데이터 센터부터 최종 사용자의 앱까지 모든 곳에서 혁신이 일어날 것입니다.

    AI 모델

     * 우리는 모델이 ""지능을 서비스로 제공하는""(IQaaS: intelligence-as-a-service) 시대를 시작했고, 승자는 인재, 데이터, 컴퓨팅 파워 경쟁에서 결정될 것으로 생각합니다.
     * 모델의 성능을 확장하는 것은 또한 고품질 데이터셋을 확장하는 것을 의미합니다. 기존 대비 30% 크기의 가지치기(pruned) 및 큐레이션된 데이터셋으로 학습한 모델 또한 잘 동작하며, 합성 데이터와 사용자 피드백도 탐구할 잠재적인 분야입니다.

    컴퓨팅 파워 및 클라우드 플랫폼

     * GPU와 같은 하드웨어 가속기는 AI 파워의 기초적인 부분을 담당하고 있습니다. GPU에 대한 끊임없는 수요는 전력망에 대한 스트레스부터 반도체 공급망의 성장 촉진, 클라우드 서비스에 대한 수요 재가속에 이르기까지 우리 전체 경제에 파급 효과를 불러일으켰습니다.
     * AI가 더욱 주류가 되면서, 우리는 추론(inference) 작업에서 발생하는 부하가 훨씬 더 컴퓨팅 집약적이 될 것으로 기대합니다. 1억 명의 GPT-4 사용자를 서비스하는 데 드는 비용은 모델을 훈련하는 데 소요된 비용의 4배가 될 수 있습니다.

    개발자 도구

     * 2022년 AI의 폭발 이후 큰 변화 중 하나는 AI의 민주화와 AI 엔지니어의 부상으로, 모델을 학습하고 / 미세조정하고 / 배포하는 새로운 AI Ops 도구가 등장했습니다.
     * 활발한 AI Ops 도구 계층의 등장으로 세계의 약 3000만 개발자가 AI에 접근할 수 있게 되었고, 이것은 애플리케이션 계층 내에서 폭발적인 잠재력을 창출할 수 있을 것으로 예상합니다.

    AI 애플리케이션

     * 우리는 AI 애플리케이션 채택이 이제 시작되고 있는 것으로 보고 있으며, 앞으로 더 많은 사용 사례가 등장할 것으로 예상하고 있습니다.
     * 소비자와 기업의 AI에 대한 관심은 Runway, Tome과 같은 창의적 영역에서부터 Replit이나 Aurora Solar과 같은 전문 영역에 이르기까지 이미 탄력을 받고 있습니다.

  Coatue의 견해: 최고의 AI는 아직 등장하지 않았음

     * 앞으로 현실 세계에서 AI는 더 접근하기 쉽고, 확장 가능하며, 유용해질 것으로 예상합니다. 또한, 영어와 같은 자연어가 최고의 프로그래밍 언어가 될 것으로 예측합니다.
     * AI는 더 많은 사람들이 개발와 같이 소프트웨어를 개발할 수 있으며, 개개인의 데이터셋으로 AI를 학습시켜 헬스케어나 소매 분야 등에서 새로운 기능을 만들어 낼 것으로 예상합니다.
     * 또한, 지속적인 연구를 통해 AI 모델이 계속 혁신하여 더 지능적이고 많은 능력을 갖출 것으로 기대하고 있습니다. 즉, 최고의 AI는 아직 오지 않았습니다.
     * 단기적으로는 AI 모델 출력 환각을 해결하고, 다양한 멀티모달 사용 사례를 가능하게 하고, 비용을 줄이며, AI 배포를 더 쉽고 안전하게 만드는 것에 초점을 맞출 필요가 있어보입니다.
     * 장기적으로는 AI 개발은 수십억 사용자에게 AI를 확장하기 위한 엔지니어링 영역의 도전이 될 것으로 생각합니다. 또한, AI 혁신가들이 우리 모두에게 유용한 AI를 만들어내는 새로운 능력을 개발할 것이라는 낙관적인 전망을 가지고 있습니다.

  PDF 전문 보기

   https://drive.google.com/file/d/1gQhYT7j6b2wJmrFZHNeQgTiWPyTsjOfX/view

  (⚠️광고⚠️) 위와 동일한 내용을 슬라이드와 함께 파이토치 한국어 커뮤니티에서 보기

   https://discuss.pytorch.kr/t/ai-the-coming-revolution-pdf-115p/2906
"
"https://news.hada.io/topic?id=11965","과장(Hype) 없이 AI 개발에 대해서 다루는 곳은 어디일까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  과장(Hype) 없이 AI 개발에 대해서 다루는 곳은 어디일까요?

   Ask HN에 올라온 질문과 답변들 정리

     ""언론에선 AI 관련 개발 상황을 제대로 다루지 못하는 것 같습니다. 트위터는 너무 흩어져 있고 학술 논문은 너무 편협합니다. 현업 전문가들은 AI에 대한 노련하고 성숙한 보도를 어디서 얻을 수 있을까요? Economist, AnandTech, Tom’s Hardware 에 해당하는 AI 전문 매체는 어디일까요?""

     * Simon Willison의 블로그
     * 서브스택
          + AI Supremacy
          + Latent Space
          + Encyclopedia Autonomica
          + Deep Learning Focus
          + Artificial Fintelligence
          + Don't Worry About the Vase
     * 유튜브
          + Matt Wolfe
          + MattVidPro AI
          + Two Minute Papers
          + Dr Alan D. Thompson
          + Curious Refuge
          + AI Explained
          + Robert Miles AI Safety
     * 큐레이션 & 뉴스 사이트
          + all AI News - Your AI news aggregator
          + NUSE.ai - Simplified, Summarized, and Personalized for You
          + Ben's Bites - daily AI product launches & news
     * Trending Papers
"
"https://news.hada.io/topic?id=12030","Sqids - 숫자로부터 짧고 고유한 ID를 생성하는 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Sqids - 숫자로부터 짧고 고유한 ID를 생성하는 라이브러리

     * Sqids는 숫자로부터 YouTube 스타일의 ID를 생성하는 오픈소스 라이브러리
     * 생성된 ID는 짧고, 사용자 정의 알파벳으로 생성 가능하며, 충돌이 없는 것이 보장
     * 예시로 제공된 ID는 https://example.com/Lqj8a0와 같은 형태임

Sqids 사용 이유

     * Sqids의 주된 사용 목적은 시각적인 효과에 있음
     * 웹앱에서 숫자 대신 ID를 사용하고자 할 때 Sqids가 좋은 선택이 될 수 있음
     * 사용 사례로는 링크 단축, URL 안전 사용, 이벤트 ID, 충돌 없는 인코딩/디코딩, 일회용 비밀번호 등이 있음
     * 민감한 데이터에는 적합하지 않으며, 사용자 ID로 사용 시 사용자 수가 노출될 수 있음

Sqids의 특징

     * 음수가 아닌 숫자로부터 짧은 ID 생성 가능
     * 인코딩 및 디코딩이 쉬움
     * 자동 생성된 ID에는 일반적인 욕설이 포함되지 않음
     * 사용자 정의 ID를 위한 알파벳 셔플 지원
     * 40개의 프로그래밍 언어 지원, 그 중 15개는 새로운 디자인을 사용함
     * 모든 버전에서 동일한 ID를 생성함
     * 작은 라이브러리 크기와 관대한 라이선스를 가짐

GN⁺의 의견

     * Sqids 라이브러리는 웹앱에서 숫자 대신 짧고 충돌 없는 ID를 사용하고자 하는 개발자에게 유용함
     * 이 라이브러리는 시각적으로 매력적인 ID를 제공하고, 다양한 프로그래밍 언어를 지원하여 접근성이 높음
     * 오픈소스 개발자에게 유리한 기회를 제공하고, MIT 라이선스로 저작권이 보호

   크롤링 막기 좋네요.

   어떻게 사용하면 크롤링을 막을 수 있는건지 설명을 좀 더 해주실수 있나요?

   url 이 그냥 posts/1, posts/2, posts/3 으로 되어 있으면 크롤러가 1,2,3,4,5... 넣어서 돌리는데
   url 이 posts/L12Qsd, posts/dei24A 이런 식으로 되어 있으면 그걸 못해서 그런 것 같네요

   아! 답변 감사합니다.

   hashids 랑 무슨 차이일까 궁금해서 찾아보니 https://hashids.org 입력하면 https://sqids.org/ 로 가는군요. 이름을 바꾸셨나봅니다.

   https://sqids.org/faq#hashids

        Hacker News 의견

     * 연속된 ID를 사용하는 회사로부터 비즈니스 인사이트를 얻을 수 있는 가능성
          + 예를 들어, 회원가입 시 부여받은 ID로 회사의 성장률 추정 가능
          + 애플리케이션 내 모든 리소스 유형에 적용 가능
          + URL 바에 있는 '쓰레기 값'이 요즘 시대에 얼마나 중요한지 의문
          + 대부분의 브라우저가 URL 대부분을 숨기기 때문에 UUID v7의 널리 퍼진 사용을 기다리며, uulids 사용
          + 내장된 시간 구성 요소가 때때로 유용함 (예: 객체 병합 규칙)
     * 일회용 패스코드 언급에 대한 의문
          + 패스코드는 예측 불가능해야 하지만, 반드시 고유할 필요는 없음
          + 적절한 랜덤 소스를 제공하면 작동하지만, '쓰레기 값으로 채워진' 특징은 실제보다 복잡해 보임
          + 4~8개의 랜덤 숫자가 잘 작동하며 보안 수준을 명확히 제공
          + 숫자는 대소문자 구분이 있는 라틴 문자보다 이해하기 쉬움, 특히 다른 문자 체계를 사용하는 언어 사용자에게
     * 128비트 정수나 바이트 배열을 포맷할 수 없는 것에 대한 실망
          + UUID 포맷팅이 가능하게 해줄 것
          + 공개적인 정수 ID 사용에 대한 선호도 낮음
          + 오름차순 ID로 중요한 정보 유출 위험 존재
          + URL, QR 코드 등을 위해 UUID를 Base64URL로 포맷팅하여 짧게 만드는 것을 선호
     * Ruby 애플리케이션에서는 높은 기수로 변환하는 방법 사용
          + Sqid는 Ruby 라이브러리를 제공하고 훨씬 높은 기수 설정을 허용, 대문자 문자 및 이모지 포함
          + 공간 절약이 큰 차이를 만들기 전에 훨씬 더 큰 숫자가 필요
          + 새로운 의존성을 추가할 가치가 있는지 알기 어려움
     * 욕설 필터링이 설계상 책임이 될 수 있음
          + 인코딩을 보존하기 위해 금지된 단어 목록을 불변으로 유지해야 함
          + 그렇지 않으면 이전 sqids가 잘못된 것으로 디코드될 수 있음
     * nanoid 사용과 안전한 문자 사전의 사용을 선호
          + '나쁜' 단어를 찾기 위해 하드코딩된 구현 대신 유사한 사전 접근 방식 사용을 제안
          + 성능 테스트 스위트에 대한 관심 표명
          + 대부분의 언어에서 UUID v4 생성이 최적화되어 있어 사용자 정의 솔루션이 실제로 더 나은지 의문
     * 무작위로 생성된 문자열의 사용에 대한 논의
          + ID, 비밀번호 복구 토큰 등에 사용
          + 수백만 개 생성되었으며 매일 수십만 명이 이를 확인
          + 무작위 컨텐츠 ID에 대한 불만 사례 없음
          + 현대 사회가 누군가를 모욕하는 것을 너무 두려워하여, 욕설 필터가 데이터베이스 ID와 비밀번호 복구 토큰에까지 확장됨
          + 최소 길이를 8로 설정하면 전체 ID로서 완전한 단어 욕설이 나타날 가능성이 낮음
     * ""Get Started"" 섹션에서 40개 언어에 대한 링크 제공에 대한 혼란
          + 40개 중 15개 언어만 시작할 수 있으며, 나머지 25개는 관심을 나타내기 위해 사람들이 저장소를 시작하도록 요청하는 골격 저장소임
     * 블록리스트를 조정하거나 발전시키는 방법에 대한 질문
          + ID가 블랙리스트에 있으면 단순히 증가
          + ID는 블랙리스트 내용에 고정되어 있으며, 이를 조정하면 이전에 생성된 ID의 특정 세그먼트가 무효화됨
     * 이 스레드에서 많은 사람들이 ID/숫자에서 인사이트를 숨기는 좋은 방법이라고 언급
          + 생성된 값이 쉽게 디코드될 수 있으므로, 몇 개의 숫자를 디코드하여 인사이트를 얻을 수 있지 않을까 하는 의문 제기
"
"https://news.hada.io/topic?id=11958","700명 중 550명의 OpenAI 직원들, 이사회에 사퇴 요구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  700명 중 550명의 OpenAI 직원들, 이사회에 사퇴 요구
"
"https://news.hada.io/topic?id=12020","테슬라, 오리지널 Roadster 의 모든 디자인과 엔지니어링을 오픈소스로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              테슬라, 오리지널 Roadster 의 모든 디자인과 엔지니어링을 오픈소스로 공개

     * 15년전인 2008년에 첫번째 프로젝트였던 로드스터의 사용자/서비스/부속 매뉴얼부터 회로 및 커넥터까지 모든 것을 공개
     * 아마도 이 발표는 차세대 로드스터 생산이 가까워졌기 때문이 아닌가 생각
     * 제로백 1.9초의 슈퍼카인 로드스터는 2020년에 처음 인도될 예정이었지만, 지연 및 다른 차량 프로젝트로 인해 생산 및 인도 예정일이 뒤로 미뤄졌음
     * 올해 3월 머스크는 로드스터의 최종 설계와 엔지니어링이 올해 말까지 완료될 것이라고 말한 바 있음
     * 하지만 머스크가 로드스터가 특정 날짜까지 준비될 것이라고 말한 것은 이번이 처음이 아니기 때문에 이것은 매우 잠정적인 날짜임
     * 또한 테슬라는 25,000달러짜리 차량도 개발 중이며 여러 가지 이유로 로드스터보다 우선시될 것으로 생각됨

   링크는 여기 https://service.tesla.com/roadster

   누군가 머스크한테 ""그럼 이제 내 차고에서 로드스터 만들 수 있게 되는 거임?"" 물었는데
   머스크 왈 ""* 일부 조립 필요함"" 이라고 답변했네요.
"
"https://news.hada.io/topic?id=12075","피어튜브 v피어튜브 v6

PeerTube v6 출시, 여러분의 아이디어로 구현됨

     * PeerTube v6가 출시되었으며, 이는 YouTube와 Twitch의 대안으로 자체 비디오 플랫폼을 관리하고자 하는 창작자, 미디어, 기관, 교육자들을 위해 Framasoft가 개발한 소프트웨어임.
     * 이번 주요 업데이트는 사용자의 아이디어에서 영감을 받아 기능이 추가되었으며, P2P 라이브 스트리밍이 추가된 이후 가장 야심찬 버전임.
     * Framasoft는 비영리 단체로 기부금을 통해 윤리적이고 사용자 친화적인 웹을 발전시키는 데 힘쓰고 있음.

올해: 두 번의 소규모 업데이트와 주요 성과

     * 2023년에는 두 번의 소규모 버전 업데이트와 함께 비디오 호스팅을 더욱 대중화할 수 있는 주요 기술 기능이 추가됨.
     * 3월에 출시된 PeerTube v5.1에서는 계정 요청 관리 및 조정, 라이브 스트림 중 지연 시 실시간으로 돌아가는 기능, 외부 인증 정보를 사용한 로그인 개선 등이 포함됨.
     * 6월에 출시된 PeerTube v5.2에서는 RSS 피드를 팟캐스트 표준에 맞게 조정, 라이브 스트림 재생의 개인 정보 설정 옵션, 키보드를 사용한 탐색 개선, 문서 업그레이드 등이 추가됨.

주요 기능: 원격 트랜스코딩

     * 원격 트랜스코딩 기능은 비디오 파일을 효율적인 형식으로 변환하는 작업으로, 많은 CPU 파워를 소모함.
     * PeerTube 관리자는 이제 원격 트랜스코딩을 통해 트랜스코딩 작업을 더 강력한 서버로 이전할 수 있으며, 이는 비용 절감, 탄력성 향상, 에너지 효율성 증가를 가져옴.

PeerTube v6의 새로운 기능

    비디오에 비밀번호 설정

     * 사용자들이 기대해온 기능으로, 비디오에 비밀번호를 설정하여 독점 콘텐츠 제작, 교육 과정의 단계 표시, 신뢰하는 사람들과의 비디오 공유 등 다양한 상황에 활용 가능함.

    비디오 스토리보드: 미리보기 제공

     * 비디오 온라인 탐색 시 진행 바 위에 마우스나 손가락을 올리면 프레임 미리보기가 썸네일로 나타나는 스토리보드 기능이 PeerTube에 추가됨.

    비디오의 새 버전 업로드

     * 비디오 제작자는 이제 PeerTube를 통해 비디오의 오래된 버전을 업로드하고 교체할 수 있으며, URL, 제목, 정보, 댓글, 통계 등은 유지됨.

    비디오에 챕터 추가

     * 창작자는 비디오 설정 페이지에서 새로운 ""챕터"" 탭을 통해 챕터의 시간코드와 제목을 지정하여 PeerTube에 추가할 수 있음.

    스트레스 테스트, 성능 및 구성 권장 사항

     * 스트레스 테스트를 통해 PeerTube의 병목 현상을 이해하고 성능을 개선하며, 많은 트래픽을 예상하는 관리자를 위한 PeerTube 서버의 최적 구성에 대한 조언을 제공함.

PeerTube의 미래는?

     * YouTube가 광고 차단기에 대항하고 Twitch가 스트리머를 점점 더 착취함에 따라, PeerTube는 인지도와 커뮤니티가 성장하고 있음.
     * PeerTube의 미래 계획에 대한 많은 발표가 있을 예정이며, ""Ask Us Anything"" 라이브 스트림을 통해 PeerTube에 대한 질문에 답할 계획임.

PeerTube와 Framasoft에 대한 감사

     * 개발은 단 한 명의 전임 개발자, 인턴, 그리고 놀라운 커뮤니티의 지원으로 이루어졌으며, 프랑스어를 구사하는 FOSS 애호가들과 NGI 이니셔티브를 통한 NLnet의 지원으로 자금이 조성됨.
     * 비프랑스어 사용자인 PeerTube 팬들은 Framasoft의 작업을 지원하기 위해 기부를 고려해야 함.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 PeerTube v6의 출시와 그것이 사용자의 아이디어에 기반하여 개발되었다는 점입니다. 이는 기술 거인들에 대한 대안적인 비디오 플랫폼을 제공하려는 커뮤니티 주도의 노력을 보여줍니다. PeerTube의 새로운 기능들은 창작자와 사용자에게 더 많은 통제권과 개인화 옵션을 제공하며, 이는 디지털 공간에서의 윤리적이고 자율적인 활동을 촉진할 수 있습니다. 이러한 발전은 기술의 민주화와 인터넷의 분산화를 추구하는 사람들에게 흥미로운 소식입니다.

        Hacker News 의견

     * PeerTube와 관련하여 HLS로의 전환에 대한 의문 제기
          + PeerTube 사용에 관심이 있지만, WebTorrent 대신 HLS를 사용하기로 한 결정에 대해 혼란스러움
          + HLS가 코덱이나 컨테이너 포맷이라는 점과 PeerTube의 P2P 기능에 대한 의문
          + HLS가 P2P 스트리밍에 사용될 수 있다는 게시물의 주장에 대한 의심
     * WebTorrent 제거에 대한 아쉬움 표현
          + WebTorrent의 제거가 아쉬움으로 남음, 토렌트 클라이언트에서 여전히 개발 중이었기 때문
          + PeerTube 인스턴스가 P2P를 더 어렵게 만들 수 있음
          + 비디오 재업로드와 관련된 문제와 YouTube 아카이브 생성의 어려움 언급
     * PeerTube 안드로이드 클라이언트 개발 경험 공유
          + PeerTube 프로젝트에 대한 애정과 안드로이드 클라이언트 개발에 대한 헌신
          + 개발에 들인 노력이 가치가 없다고 느끼며 프로젝트를 포기할지 고민 중임
     * PeerTube 설치 및 관리의 용이성에 대한 질문
          + PeerTube 설치가 MediaCMS만큼 쉬운지에 대한 궁금증
          + PeerTube의 복잡성을 줄이고 관리를 용이하게 하는 방법에 대한 조언 요청
     * PeerTube의 경제적 한계에 대한 지적
          + 광고 지원 플랫폼과 비교하여 PeerTube의 경제적 한계와 인기 있는 콘텐츠의 유출 가능성 언급
          + 인터넷 플랫폼의 상업화가 가져온 문제에 대한 비판적 관점 제시
     * PeerTube/Mastodon에 대한 비디오 추천
          + PeerTube와 Mastodon에 대해 관심이 있다면 최근 비디오 시청을 추천함
     * PeerTube 페이지의 언어 설정에 대한 언급
          + 페이지의 HTML 헤더가 프랑스어로 설정되어 있어 번역 제안이 나타남
     * PeerTube 인스턴스 업그레이드 소식 공유
          + PeerTube 6.0.0-rc.2 버전으로 업그레이드된 인스턴스 사용을 권장함
     * PeerTube 프로젝트의 장기적인 발전에 대한 긍정적 평가
          + 장기적이고 안정적인 발전을 하는 PeerTube 프로젝트에 대한 존경과 칭찬
     * WebTorrent 지원 중단에 대한 아쉬움과 HLS에 대한 기대 표현
          + WebTorrent 지원 중단에 대한 실망감과 P2P HLS에 대한 기대감 및 관심 표현
"
"https://news.hada.io/topic?id=11997","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   저는 신체 밸런스 측정하러 갑니다. 체성분 검사는 꽤나 자주 하는 편인데, 구조적 밸런스를 측정해보는 것은 처음이네요.

   앗 구조적 밸런스가 뭘까요. 측정기가 따로 있나요? 어떤 결과를 확인할 수 있는지도 궁금해요.

   찍고온 후기입니다. 뒤쪽으로 그리드를 하나두고 사진을 여러번 찍어서 스켈레톤을 추정하는 방식 같아요.
   찍고나면 좌우 밸런스, 앞뒤 밸런스, 무게 중심 등이 나오더라고요. 장비는 엑스바디라는 장비였어요.

   고맙습니다.

   머리가 짧아서 거의 2주에 한번씩 머리하러 미용실에 갑니다. 아마 이번주도 ㅎㅎ

   그리고 이번 주말엔 Ask 를 활성화 할 방법을 좀 고민해보려고 해요.
   뭔가 흥미로운 질문이 많으면 좋겠는데 잘 안되네요 ㅠ

   주중에 제주 여행을 다녀와서 이번 주말엔 푹 쉬려고요~
"
"https://news.hada.io/topic?id=12067","Apple의 Pro Display XDR이 Thunderbolt 3을 한계까지 활용하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Apple의 Pro Display XDR이 Thunderbolt 3을 한계까지 활용하는 방법

     * Pro Display XDR 특징: 1600니트 밝기, 6K 해상도, 60fps, P3 와이드 색역, 32인치, Thunderbolt-3 포트 1개 및 USB-2 포트 3개.
          + Thunderbolt-3 인터페이스: 40 Gbps 대역폭. Pro Display XDR는 약 38.2 Gbps 필요
          + 대역폭 한계: Thunderbolt 3의 남은 대역폭은 1.8 Gbps로, USB 3.1 Gen 1의 5 Gbps 필요 대역폭을 수용 불가. 하지만 저속 레인에서는 USB2 사용 가능
     * 그런데 16인치 MacBook Pro는 어떻게 USB 3.1 Gen 1 속도를 달성할까? : Display Stream Compression (DSC,디스플레이 스트림 압축)

  Thunderbolt 3의 발전

     * Thunderbolt 3의 DSC 지원: 초기 모델(Alpine Ridge)은 미지원, 2세대 컨트롤러(Titan Ridge)는 DisplayPort 1.4 지원으로 DSC 가능
     * 호환성 문제: Thunderbolt 3의 기능이 컨트롤러에 따라 다르게 구현되어 사용자 혼란 유발.

  Thunderbolt 4 및 5

     * Thunderbolt 4 (2020년): 대역폭 40 Gbps 유지, DisplayPort 1.4 및 DSC 지원 의무화
     * Thunderbolt 5 (2023년 9월 발표): 120 Gbps 대역폭, DisplayPort 2.1, PCIe Gen4x4 지원. 다중 8K 디스플레이 및 최대 540Hz의 높은 리프레시 속도 지원 예정.

  Thunderbolt 버전 요약

     * Thunderbolt 1 (2010년): 10 Gbps
     * Thunderbolt 2 (2013년): 20 Gbps
     * Thunderbolt 3 (2015년): 40 Gbps, Alpine Ridge (DP 1.2), Titan Ridge (DP 1.4)
     * Thunderbolt 4 (2022년): 40 Gbps, DP 1.4
     * Thunderbolt 5 (2023년): 120 Gbps, DP 2.1

        Hacker News 의견

     * 애플 디스플레이의 잘못된 해상도 언급에 대한 지적
          + 애플 디스플레이(6016x3384)와 델 U3224KB 6K(6144x3456) 모니터에서 볼 수 있는 두 가지 6K 해상도 버전 존재
          + 인텔 맥북 프로에서 델 6K 디스플레이 사용 시 맥 OS 10.15~13.6에서는 DSC를 지원하지 않아 30hz로만 작동
          + 맥이 애플 디스플레이와 동일한 6016x3384 해상도로 인식하게 하면 60hz 작동 가능
          + 맥 OS 14.1부터 문제 해결됨, 인텔 기반 맥에서만 발생
     * 광데이터 및 전원 인터커넥트 표준에 대한 아쉬움 표현
          + 광섬유 처리의 편리함과 비용 효율성 강조
          + 애플의 썬더볼트 4 케이블 가격과 광썬더볼트 케이블의 높은 가격 대비
          + 기술 발전에 따른 비용 증가에 대한 우려
     * 프로 디스플레이 XDR에 대한 개인적 경험 공유
          + 아버지로부터 상속받은 프로 디스플레이 XDR의 뛰어난 성능 및 엔터테인먼트 소비에 적합함 언급
          + 개인적으로 구매하지는 않을 것이지만, 7K 해상도 및 10비트 컬러 깊이 지원에 대한 만족감 표현
     * 썬더볼트 3의 대역폭과 데이터 전송 속도에 대한 기술적 설명
          + 썬더볼트 3의 40gbps 대역폭 중 디스플레이 데이터에 할당되는 부분과 남은 데이터 대역폭에 대한 분석
          + USB-C와 DP 1.4의 DSC 지원 여부에 따른 데이터 전송 능력 차이 설명
     * 맥북 에어 M1 및 M2의 6K 디스플레이 10bpc 지원 여부에 대한 의문 제기
          + 맥북 에어의 기술 사양에서 10bpc 지원 여부가 명확히 언급되지 않음
          + 애플이 썬더볼트를 내부적으로 구현하면서 초기 M1 기기에서 10bpc 기능 부재 가능성 언급
     * 애플 생태계 내에서 HDR 지원의 우수성에 대한 부러움 표현
          + 윈도우와 리눅스 생태계에서 HDR 지원의 부족함과 애플 프로 디스플레이 XDR의 독보적인 성능 강조
          + PC 세계에서 HDR 지원이 미흡한 현실에 대한 실망감 표현
     * 썬더볼트 3의 인코딩 방식과 대역폭에 대한 기술적 설명
          + 썬더볼트 3가 64b/66b 인코딩을 사용하여 비디오 데이터 외의 프로토콜에 더 많은 대역폭을 남겨둠
     * 디스플레이의 특별한 대우에 대한 반대 의견
          + 디스플레이가 사용 가능한 대역폭에 따라 최적의 품질을 제공해야 하며, USB 이더넷 어댑터처럼 다수 연결 시에도 문제없이 작동해야 함
     * 썬더볼트 5와 함께 6K 120Hz 10비트 컬러 디스플레이에 대한 기대감 표현
          + OLED 또는 미니LED 패널을 포함한 최고의 디스플레이에 대한 기대
     * 썬더볼트 3와 USB-C 프로토콜의 전용 핀 사용에 대한 설명
          + 썬더볼트 프로토콜과 USB2가 별도로 전송되어 대역폭이 충분하지 않아도 문제가 없음
"
"https://news.hada.io/topic?id=12061","구글 드라이브 파일 갑자기 사라짐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           구글 드라이브 파일 갑자기 사라짐

구글 드라이브 파일 갑자기 사라짐

     * 구글 드라이브 사용자가 자신의 파일이 갑자기 사라지고, 드라이브가 2023년 5월의 상태로 돌아간 경험 공유
     * 데이터 복구 시도 실패, 구글 지원팀과의 연락 불만족스러움
     * 다른 사용자들도 비슷한 문제 겪음, 중요한 파일들의 손실로 인한 불안감 표현

구글 직원의 답변

     * 구글 직원은 데스크톱 사용자들에게 영향을 미치는 문제를 조사 중이라고 밝힘
     * 사용자들에게 계정 연결 해제를 하지 말고, 앱 데이터 폴더를 삭제하거나 이동하지 말 것을 권장
     * 하드 드라이브에 여유 공간이 있다면 앱 데이터 폴더의 복사본을 만들 것을 제안

다른 사용자들의 경험 공유

     * 여러 사용자들이 동일한 문제를 겪고 있으며, 파일과 폴더 구조가 몇 달 전으로 되돌아감
     * 구글 지원팀은 파일 복구를 시도하나 성공하지 못함
     * 일부 사용자는 자체 해결 방법을 시도하거나 구글의 추가 지원을 기다리는 중

GN⁺의 의견

   이 기사에서 가장 중요한 것은 구글 드라이브 사용자들이 경험한 데이터 손실 문제와 이에 대한 구글의 대응이다. 이 문제는 클라우드 스토리지의 신뢰성과 데이터 관리의 중요성을 강조하며, 많은 사용자들이 자신의 중요한 데이터를 안전하게 보관하기 위해 의존하는 서비스의 취약점을 드러낸다. 이러한 상황은 기술에 의존하는 현대 사회에서 발생할 수 있는 문제점을 보여주며, 이에 대한 해결책과 예방책에 대한 흥미로운 논의를 제공한다.

        Hacker News 의견

     * 고객들이 대기업 지원 포럼에 참여하는 동기에 대한 궁금증
          + 대규모 기업의 지원 포럼에 고객들이 참여하는 이유에 대한 호기심
          + 커뮤니티의 빠른 반응은 좋지만, 수조 달러 기업이 우수한 고객 서비스를 제공해야 한다는 의견
          + 자원봉사자 고객 서비스가 제한적인 지원만 가능하며 구글이 이를 인지하는지 불분명함
     * 데이터 손실을 나타내는 다른 지원 요청들
          + 구글 드라이브에서 사라진 스프레드시트, 손실된 데이터, 사라진 파일 등에 대한 지원 요청 사례들
     * 데이터 백업의 중요성을 상기시키는 댓글
          + 개인 데이터를 백업하는 것의 중요성 강조
     * 유료 구글 워크스페이스 계정에서 발생한 유사한 문제
          + 구글 워크스페이스 계정에서 과거 데이터로 되돌아간 경험
          + 로컬 NAS로 동기화하여 큰 문제가 되지 않았으나, 사용자 인터페이스의 복잡성 언급
     * 구글 드라이브와 같은 클라우드 서비스의 문제점
          + 클라우드 서비스의 데이터 동기화 문제와 데이터 손실 가능성
          + 자체 백업의 중요성 강조
     * 구글 드라이브에서 파일 손실 경험
          + 지원팀과의 대화에서 파일 복구 불가능하다는 답변을 받은 경험
          + 클라이언트 파일 시스템의 손상 가능성과 소프트웨어 설계 문제 제기
     * 구글 드라이브 파일 손실로 인한 개인적인 영향
          + 구글 드라이브 파일 손실로 인한 개인적인 문제 해결 시도
          + 문제의 원인에 대한 추측
     * 구글 드라이브 사용과 관련된 개인적인 경험
          + 구글 드라이브 사용으로 인한 데이터 손실의 위험성 인지
          + 대안으로 마이크로소프트 엑셀이나 안드로이드 앱 사용 고려
     * 구글 드라이브 백업을 위한 rclone 사용 권장
          + rclone을 이용한 구글 드라이브 백업 방법 제안
     * 구글 드라이브에 대한 신뢰 부족과 백업 전략
          + 구글의 프라이버시 정책에 대한 비판
          + 3-2-1 백업 전략과 다른 온라인 백업 서비스 사용 경험 공유
"
