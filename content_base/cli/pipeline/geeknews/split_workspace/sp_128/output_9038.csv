"https://news.hada.io/topic?id=17065","Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.

   이번 주에 있었던 일, 계획, 일상, 자랑, 고민, 추천 등 하고 싶은 말을 댓글로 작성해주세요.

   앞으로 본 Ask GN 글은 매주 금요일 올라왔던 '이번 주말에 뭐 하시나요?' 를 대신하여 등록될 예정입니다.

   nvim 설정을 갈고 닦아보려 합니다.

   요즘은 리셀 공부를 하고 있습니다. 소싱부터 막히네요 ㅋ

   가슴이 두근거리는 프로젝트를 시작했고 이번엔 꼭 런칭하기로 목표를 잡았습니다.
   꼭 완수해서 긱뉴스에 홍보하고 싶네요^^

   오 꼭 소개부탁드려요!!

   집가고싶어요

   파이썬 백엔드 개발자를 구인하고 싶어요

   다음주 월요일 면접 두곳이 잡혔는데
   잘봤으면 좋겠습니다

   좋은 결과 있으시길 바랍니다!

   이번주는 뭔가 일 벌리기가 애매한 주 였던것 같아요.
   이번주에는 옵시디언에서 쓰고 있는 스크립트들을 좀 일부 리팩토링할 것 같아요.

   조금씩 짬내서 하던 검은 오공 1회차 엔딩이 코 앞입니다.
   최종보스와 최종 히든 보스만 남겨놓았습니다.
   오랜만에 게임 재밌게 했네요

   이번주는 휴일이 많아서 뭐 한건지 모르게 지나갔네요.

   간만에 새로 추가할 기능이 하나 생겨서 기획중입니다. 작은(?) 기능인데 만들어두면 여기저기 쓸 수 있을 것 같아서 재미있을 거 같아요.

   주말엔 ""백설공주에게 죽음을"" 달릴 예정입니다. 드라마는 끝나야 시작하는 편이라, 오래 기다렸네요.

   멋진 제품을 만들고 싶어요
"
"https://news.hada.io/topic?id=17018","AI 회사는 성공할 수 있는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           AI 회사는 성공할 수 있는가?

     * ""시장이 비합리적이어야만 생존할 수 있음""

뭔가 잘못됨

     * 대규모 언어 모델을 구축하는 데는 많은 비용이 들어감
          + OpenAI는 매년 70억 달러를 연구, 새로운 AI 서비스, 직원 고용에 소비하고 있음
          + Anthropic도 올해 27억 달러를 지출할 것으로 예상됨
          + 페이스북도 수십억 달러를 투자하고 있음
     * 더 저렴해지지는 않을 것임
          + 모델이 발전함에 따라 연구는 더욱 어려워지고 필요한 컴퓨팅 파워도 증가함
          + 새로운 모델을 만들기 위해서는 더 많고 어려운 수학적 계산이 필요함
     * 비용에도 불구하고 사람들은 계속해서 새로운 모델을 구축함
          + 사람들은 LLM이 차세대 기술 황금기라고 믿고 있어 계속 투자할 것임
          + 인간의 본성상 모든 것을 더 빠르고, 높고, 강력하게 만들려고 함
     * 업계에서 새로운 모델을 계속 만들면 기존 모델의 가치는 빠르게 하락함
          + 경쟁사가 더 좋은 새 모델을 내놓으면 코드 몇 줄만 바꿔 전환 가능
          + 꾸준히 매력적인 LLM을 판매하려면 최고 수준을 유지해야 함
     * 업계에서 새로운 모델을 계속 개발하지 않거나 기술 점근점에 도달하더라도 구 모델의 가치는 빠르게 하락함
          + 최고의 독점 모델에 비해 최악의 경우 한두 단계 뒤처지는 Llama 및 Mistral과 같은 오픈 소스 모델이 몇 가지 있음
          + 독점 모델이 발전을 멈추면 오픈 소스 모델이 그 격차를 빠르게 좁힐 것
     * 따라서 OpenAI, Anthropic 또는 다른 AI 공급업체의 경우 두 가지 선택지가 있음
          + 첫 번째는 막대한 비용을 투자하여 시장을 앞서가는 것. 하지만 이는 매우 위험해 보임:
               o 이러한 모델을 구축하는 데 드는 비용이 계속 상승할 가능성이 높고, 가장 똑똑한 직원이 떠날 수도 있으며, 항상 다음 돌파구를 찾는 최초의 회사가 되는 것에 비즈니스를 걸고 싶지 않을 수도 있음
               o 기술 전문성이 영원한 해자가 되는 경우는 드뭄
          + 두 번째는.. 모르겠음
               o 첫번째 선택에서 더 열심히 노력하는 것?

현재 상황에 대한 예견

     * 18개월전에 LLM 공급업체는 차세대 클라우드 공급자가 될 것이라는 예측을 했었음
          + 구축에 막대한 자금이 필요하다는 점에서 표면적으로는 유사해 보이나 중요한 차이점이 있음
          + 클라우드 공급자는 하루아침에 만들 수 없음
          + LLM 공급업체는 작은 팀이 몇 개월 안에 OpenAI의 핵심 사업을 위협할 수 있음
     * LLM 공급업체의 해자는 무얼까 ?
          + 브랜드, 관성, 더 나은 애플리케이션, 경쟁자보다 앞선 모델 유지를 위한 막대한 자금 투입 등
          + 그러나 AI기업은 소프트웨어 개발 비용을 선행 투자로 잘못 분류하는 시장의 극단적인 예
          + 작은 회사들은 거대 기업들처럼 수십억 달러를 지속적으로 투자하기 어려움

시기의 중요성

     * 이 시장에서는 타이밍이 가장 중요할 수 있음
     * 언젠가는 과대광고가 사라지고 사람들은 이런 종류의 라운드를 모금할 수 없게 될 것
     * 그리고 승자는 누가 가장 빨리 달렸거나 결승선에 도달했는지가 아니라, 시장이 레이스가 끝났다고 판단했을 때 선두를 달리고 있던 사람이 될 것

GN⁺의 의견

     * AI 기업들의 비즈니스 모델이 과연 지속 가능할지에 대한 의문이 듦
          + 모델 개발에 막대한 비용이 들고, 이는 앞으로도 계속 증가할 전망임
          + 기술 발전 속도가 빨라 이전 모델들은 금방 쓸모없어짐
          + 따라서 최고 수준의 모델을 유지하려면 지속적으로 거액을 투자해야 함
     * 오픈소스 AI 모델들도 빠르게 발전하고 있어 상용 모델과의 격차가 줄어들 것으로 보임
          + Stable Diffusion, Llama, Mistral 등이 대표적
          + 기업들이 새 모델 개발을 멈추면 오픈소스가 곧 따라잡을 것임
     * AI 기술 개발에는 거대 IT 기업들이 유리한 면이 있음
          + 구글, 마이크로소프트, 메타 등은 막대한 자금력으로 꾸준히 투자 가능
          + 높은 브랜드 인지도와 기존 고객층을 활용할 수 있음
     * 반면 후발 스타트업들은 기술력만으로 살아남기 쉽지 않아 보임
          + 초기 대규모 투자를 받더라도 지속적인 자금 확보가 관건
          + 거품이 꺼지면 투자 유치가 어려워질 것
     * 시장의 타이밍이 중요하며, 열기가 식을 때 선두에 있는 회사가 승리할 가능성이 높음

   오픈ai가 시장독점을 위해 작정하고 적자사업을 벌이고 있는게 크죠. 어차피 오픈ai는 돈떨어질때마다 투자유치하면 전세계에서 러브콜이 오지만 나머지 기업은 다 죽는거죠.

   거대한 치킨게임 아닐까요?
   결국 다 죽고 하나의 거대 모델만 살아 남고 시장을 독식하겠죠..

        Hacker News 의견

     * AI 연구팀 리더의 의견
          + AI가 경제적 가치를 창출하려면 현실 세계와 연결되어야 함
          + 현재 GPT-4와 같은 모델을 최대한 활용하는 방법에 대한 아이디어가 부족함
          + AI가 인간의 의도를 이해하는 데 어려움이 있음
          + 오픈소스 모델이 GPT-4 수준에 도달하면 굳이 OpenAI나 Anthropic을 사용할 필요가 없음
     * 기술 혁신의 S-커브
          + 현재 기술 혁신의 급격한 S-커브 중간에 있음
          + 기술뿐만 아니라 인재 유지, 비즈니스 관계, 마케팅 등 여러 요소가 성공의 열쇠임
          + 모든 요소에서 뛰어난 실행력이 필요함
     * AI의 정의 변화
          + AI로 시작된 기술이 일반화되면 더 이상 AI로 불리지 않음
          + 예: 논리 프로그래밍, OCR, 음성 인식 등
     * AI 수익화 방법
          + 소비자 대상: Google 방식으로 검색 및 광고
          + 비즈니스 대상: AWS 방식으로 API 제공
          + OpenAI API를 사용하는 기업은 계속 발전 중이며, 전환할 이유가 없음
     * 라이드셰어링 초기와 유사한 상황
          + 초기에는 많은 자본이 소수의 기업에 투자됨
          + 가장 자본이 많은 기업이 승리할 가능성이 큼
          + AI 시장에서도 자본이 많은 기업이 유리할 것임
     * 모델의 차별화 요소
          + 모델은 성능뿐만 아니라 안전성, UX, 다중 모달리티, 신뢰성, 임베드 가능성 등에서도 차별화됨
     * 시장 혼란기
          + 다양한 서비스가 자금을 받아 시장을 혼란스럽게 함
          + 소비자에게는 더 많은 혜택이 돌아감
     * 모델 최적화 문제
          + 언어 모델은 몇 번의 학습만으로도 성능을 발휘할 수 있음
          + 대규모 컴퓨팅 자원을 사용하는 대신, 효율적인 학습 방법을 찾는 것이 중요함
     * 제품의 교체 가능성
          + 일반적인 도구로서의 AI 모델은 교체가 쉬움
          + 모델이 더 지능적일수록 상호 교환 가능성이 높아짐
"
"https://news.hada.io/topic?id=16984","Discord의 수조 개 메시지 저장 방식 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Discord의 수조 개 메시지 저장 방식 (2023)

    소개

     * 2017년, Discord는 MongoDB에서 Cassandra로 데이터베이스를 이전하여 메시지를 저장하는 방법을 공유함
     * Cassandra는 확장성, 내결함성, 유지보수 용이성을 제공하지만, 시간이 지나면서 성능 문제와 유지보수 부담이 증가함
     * 2022년, Discord는 ScyllaDB로 데이터베이스를 다시 이전함

    Cassandra에서의 문제점

     * 메시지 저장 구조: 메시지는 channel_id와 bucket으로 파티셔닝되어 저장됨
     * 핫 파티션 문제: 특정 채널에 트래픽이 집중되면 데이터베이스 전체의 지연 시간이 증가함
     * 유지보수 문제: SSTable 압축 작업과 JVM의 가비지 컬렉션 문제로 인해 성능 저하 발생

    아키텍처 변경

     * ScyllaDB 도입: C++로 작성된 Cassandra 호환 데이터베이스로, 가비지 컬렉션 문제를 해결함
     * 데이터 서비스: API와 데이터베이스 사이에 중간 서비스를 두어 트래픽을 조절하고 성능을 향상시킴
     * Rust 사용: 안전하고 빠른 동시성 코드를 작성하기 위해 Rust를 사용함

    데이터 서비스

     * 요청 병합: 여러 사용자가 동일한 데이터를 요청할 때, 데이터베이스에 한 번만 쿼리하고 결과를 공유함
     * 일관된 해시 기반 라우팅: 동일한 채널의 요청을 동일한 서비스 인스턴스로 라우팅하여 데이터베이스 부하를 줄임

    대규모 마이그레이션

     * ScyllaDB 클러스터 구축: 로컬 SSD와 RAID를 사용하여 빠르고 내구성 있는 스토리지 구성
     * 데이터 마이그레이션: Rust로 작성된 데이터 마이그레이터를 사용하여 빠르게 데이터를 이전함
     * 자동 데이터 검증: 두 데이터베이스에 소량의 읽기 요청을 보내 결과를 비교하여 데이터 무결성을 확인함

    몇 달 후

     * 성능 향상: Cassandra보다 적은 노드로 더 나은 성능을 제공함
     * 지연 시간 감소: 메시지 조회 및 삽입 성능이 크게 향상됨
     * 새로운 제품 사용 사례: 성능 개선 덕분에 새로운 기능을 구현할 수 있게 됨

    # GN⁺의 정리

     * Discord는 Cassandra의 성능 문제를 해결하기 위해 ScyllaDB로 데이터베이스를 이전함
     * Rust로 작성된 데이터 서비스와 ScyllaDB를 통해 트래픽을 효과적으로 관리하고 성능을 향상시킴
     * 데이터 마이그레이션 과정에서 빠르고 효율적인 방법을 사용하여 다운타임 없이 이전을 완료함
     * 이 글은 대규모 데이터베이스 마이그레이션의 도전과 해결 과정을 다루고 있어, 대규모 시스템 운영에 관심 있는 사람들에게 유익함

        Hacker News 의견

     * 블로그 글이 GC를 비난하지만, 실제로는 Cassandra 사용 방식이나 Cassandra가 대량 삭제를 처리하는 방식에 문제가 있음
          + ""API를 통해 수백만 개의 메시지를 삭제했을 때, Cassandra는 수백만 개의 tombstone을 스캔해야 했음""
          + GC 튜닝에 대해 언급하지만, 실제로는 오래된 버전의 Cassandra와 JVM을 사용하고 있었음
     * 분산 채팅 프로토콜을 사용했다면 이런 문제는 없었을 것임
          + IRC, Matrix, XMPP 같은 오픈 스펙과 여러 구현체가 있음
          + Discord가 어떻게 시장을 장악했는지 이해하기 어려움
     * ScyllaDB 공동 창립자의 추가 의견
          + Discord는 Cassandra로 수리를 완료할 수 없었지만, Scylla에서는 가능함
          + Scylla는 Cassandra와 많은 공통점을 가지고 있지만, 고유한 CPU 및 IO 스케줄러를 통해 쿼리를 우선시함
          + Scylla는 새로운 tombstone_gc=repair 모드를 가지고 있음
          + Scylla의 새로운 Raft 및 태블릿 아키텍처가 최근 출시됨
     * 서비스 레이어가 Varnish Cache를 연상시킴
          + 캐싱에 대해 언급하지 않았지만, Varnish의 ""grace mode""와 유사함
          + 일관된 해싱이 반복적으로 등장하는 것을 보는 것이 좋음
     * 오래된 메시지를 삭제하는 것이 거의 불가능함
          + 이는 프라이버시 악몽이며, EU가 왜 개입하지 않는지 궁금함
     * 매우 잘 작성된 기사임
          + Cassandra에서 Scylla로 전환한 것이 해결책의 일부였음
     * Discord의 메시지 저장 노드 수가 예상보다 적음
          + 더 복잡한 아키텍처를 기대했지만, 실제로는 200개의 노드만 사용함
          + 현대 클라우드 아키텍처가 과도하게 설계된 것 같음
     * 데이터를 저장하는 것과 데이터 마이닝을 수행하는 것은 다른 문제임
     * ScyllaDB 팀이 성능 향상을 우선시하고, 역방향 쿼리를 구현했음
          + ScyllaDB를 사용하기 전에 얼마나 많은 비용을 지불했는지 궁금함
     * ""How Discord Stores Trillions of Messages""에 대한 논의
          + 2023년 3월에 10개의 댓글이 있었음
"
"https://news.hada.io/topic?id=16992","점진적 향상을 통한 견고한 프론트엔드 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        점진적 향상을 통한 견고한 프론트엔드 구축

견고한 프론트엔드를 구축하는 방법: 점진적 향상

     * HTML로 시작
          + 정부 서비스는 HTML만으로도 기능적이어야 함
          + HTML 레이어는 내결함성이 있어, 오래된 브라우저에서도 작동 가능
          + 올바른 시맨틱 마크업을 사용하고 문서 구조를 논리적으로 구성해야 함
     * CSS 사용
          + CSS를 사용하여 서비스를 스타일링할 수 있음
          + CSS 레이어는 개별 선언을 무시할 수 있는 내결함성이 있음
          + 'CSS-in-JS'와 같은 기술은 피해야 함
     * JavaScript 사용
          + JavaScript는 상호작용 요소를 추가하는 데 사용됨
          + JavaScript 레이어는 내결함성이 없으며, 오류가 발생할 수 있음
          + 브라우저 API에 대한 기능 감지, 폴리필 포함, 트랜스파일링 등을 통해 호환성을 높일 수 있음
          + JavaScript는 HTML과 CSS를 보완하는 역할을 해야 함
     * JavaScript 대안
          + JavaScript 없이도 사용자 요구를 충족할 수 있는 간단한 솔루션을 고려해야 함
          + 대안으로 데이터 테이블 표시, 데이터 내보내기, 그래프를 이미지로 사전 렌더링 등이 있음
     * 클라이언트 측 JavaScript 프레임워크 사용
          + 복잡한 사용자 인터페이스가 아닌 경우 프레임워크 사용을 피해야 함
          + 프레임워크 사용 시 코드베이스 크기 증가, 성능 문제, 타사 코드 의존성 등의 문제가 발생할 수 있음
          + 프레임워크 사용 시 각 사용자 인터페이스를 별도의 컴포넌트로 설계해야 함
     * CSS 또는 JavaScript가 로드되지 않거나 실행되지 않는 이유
          + 네트워크 오류, 브라우저 확장 프로그램, 타사 공급업체 다운타임, DNS 조회 실패, 브라우저 업데이트로 인한 버그 등이 원인일 수 있음
          + 일부 사용자는 브라우저 기능을 의도적으로 끌 수 있음
     * 단일 페이지 애플리케이션(SPA)
          + 단일 페이지 애플리케이션으로 서비스를 구축하지 말아야 함
          + SPA는 접근성을 저해하고, 페이지 간 이동 시 포커스 처리 문제, 뒤로/앞으로 버튼 사용 불가 등의 문제가 발생할 수 있음
     * 서비스 테스트
          + JavaScript 또는 JavaScript 프레임워크에 크게 의존하는 구성 요소는 다양한 브라우저와 장치에서 작동해야 함
          + 접근성을 위해 테스트해야 함
     * 사례 연구 및 관련 가이드
          + 점진적 향상을 사용하는 이유
          + 다양한 장치를 위한 디자인
          + 프론트엔드 성능 테스트 방법
          + WCAG 2.2 이해

GN⁺의 정리

     * 점진적 향상은 HTML, CSS, JavaScript 순으로 웹사이트를 구축하는 방법임
     * 이 방법은 서비스의 내결함성을 높이고, 다양한 브라우저와 장치에서 작동 가능하게 함
     * JavaScript는 보완적인 역할을 해야 하며, 대안 솔루션을 고려해야 함
     * 단일 페이지 애플리케이션은 접근성 문제로 인해 피해야 함
     * 서비스 테스트는 다양한 환경에서의 접근성을 보장해야 함

        Hacker News 의견

     * JavaScript 프레임워크를 사용할 때는 사용자에게 어떤 이점이 있는지 증명할 수 있어야 함
          + 오프라인에서도 데스크탑 앱처럼 작동할 수 있는 앱이라면 싱글 페이지 애플리케이션(SPA)으로 만드는 것이 좋음
          + 예시로 Photopea, Google Docs/Sheets, tldraw 등이 있음
          + 인터넷 연결이 필요하고 여러 페이지가 필요한 앱이라면 브라우저가 내비게이션을 처리하도록 하는 것이 좋음
     * SPA의 단점으로 지적된 사항들
          + 보조 기술 사용자들이 페이지 이동 시 컨텍스트 변화를 인지하지 못함
          + 페이지 이동 시 포커스를 처리하지 못함
          + 브라우저의 뒤로 가기 및 앞으로 가기 버튼을 사용할 수 없음
          + 네트워크 연결이 끊길 경우 오류에서 복구할 수 없음
          + 하지만 이러한 문제들은 SPA에서도 해결할 수 있음
     * 인터넷 전체가 이 조언을 따랐으면 좋겠음
     * 간단한 솔루션을 우선시해야 함
     * Linux가 목록에 없는 이유가 궁금함
     * 많은 사람들이 이 접근 방식을 좋아하는 것 같음
          + 왜 일반적인 트렌드는 불필요하게 JavaScript와 React 같은 프레임워크를 사용하는지 궁금함
     * HTML과 서버에서 미리 가져온 데이터를 사용하고, 클라이언트에서 할 수 있는 작업은 클라이언트에서 처리함
          + 최소한의 CSS와 바닐라 JS를 사용함
          + 동료들에게는 구식으로 보일 수 있지만, 아무것도 놓치지 않음
     * 많은 SPA가 문제가 있지만, 모든 SPA가 문제가 있는 것은 아님
          + VitePress와 SolidJS 같은 예시를 보면 잘 작동함
          + JS를 사용하지 않는 사람은 거의 없음
          + 저사양 기기에서도 JS를 처리하는 데 문제가 없음
          + 접근성 문제는 SPA 사용 여부와 관련이 없음
          + Svelte는 접근성 경고 기능도 내장되어 있음
     * 서버 사이드 렌더링도 무조건 좋은 것은 아님
          + 클라이언트 사이드 JavaScript 프레임워크를 사용할 때는 주의가 필요함
          + 코드 베이스가 커지고, 클라이언트 측에서 처리해야 할 작업이 많아져 성능 문제가 발생할 수 있음
          + 서드파티 코드에 의존하게 되어 유지보수가 어려워질 수 있음
          + JavaScript 프레임워크를 사용할 때는 사용자에게 어떤 이점이 있는지 증명할 수 있어야 함
          + 부정적인 영향을 인지하고 완화할 수 있어야 함
          + HTML과 CSS만으로 구축할 수 없는 부분에만 프레임워크를 사용해야 함
          + 각 사용자 인터페이스 부분을 별도의 컴포넌트로 설계해야 함
          + JavaScript가 로드되지 않더라도 페이지의 나머지 부분은 정상적으로 로드됨
"
"https://news.hada.io/topic?id=16953","러스트 재작성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                러스트 재작성

  Rust 재작성

     * Rust 프로그래밍 언어는 첫 번째 세대 제품처럼 느껴짐
     * Rust의 초기 매력: 대수적 타입, 메모리 안전성, 성능 저하 없음, 현대적 패키지 관리자
     * 4년간 사용 후, Rust는 항상 완벽하지 않음
     * 언어의 발전이 매우 느려짐
     * 많은 불안정한 기능이 안정적인 Rust에 포함되지 않음

  환상적인 언어

     * Rust 컴파일러를 포크하고 새로운 ""seph"" 에디션을 만들고 싶음
     * Rust의 기존 기능을 유지하면서 새로운 기능 추가 가능

    함수 트레이트 (효과)

     * Rust는 구조체에 트레이트를 정의하지만 함수에도 트레이트를 정의할 필요가 있음
     * 함수의 다양한 특성을 나타낼 수 있음
          + 함수가 패닉을 일으키는지 여부
          + 고정된 스택 크기를 가지는지 여부
          + 함수가 끝까지 실행되는지 아니면 중간에 대기하는지 여부
          + 함수가 순수한지 여부
          + 함수가 안전하지 않은 코드를 실행하는지 여부
          + 함수가 종료를 보장하는지 여부

    컴파일 타임 기능

     * 많은 Rust 프로젝트가 많은 서드파티 크레이트를 사용함
     * 이러한 크레이트는 공급망 위험을 증가시킴
     * 보안에 민감한 함수 호출을 명시적으로 허용하도록 하는 기능 추가 제안
     * fs_write와 같은 기능을 호출하려면 명시적으로 허용해야 함

    Pin, Move 및 구조체 대여

     * Pin은 Rust의 대여 검사기 문제를 해결하기 위한 복잡한 해킹
     * Pin 대신 Move 마커 트레이트를 사용하는 것이 더 합리적
     * 구조체 필드를 대여 상태로 표시할 수 있는 구문 추가 제안
     * Move 마커 트레이트와 Mover 트레이트 도입 제안

    컴파일 타임

     * Zig의 comptime 기능을 도입하여 Rust 매크로 언어를 대체
     * 컴파일 타임에 코드를 실행할 수 있는 작은 인터프리터 추가
     * Rust의 매크로 언어 대신 Rust 자체를 사용

    작은 수정 사항

     * impl<T: Copy> for Range<T> 수정
     * 연관 타입을 가진 derive 수정
     * if-let 표현식에서 논리 AND 지원
     * 원시 포인터의 사용성을 개선
     * 모든 내장 컬렉션 타입에 Allocator 인자를 추가

  마무리 생각

     * 비동기 기능도 개선이 필요하지만 별도의 포스트가 필요함
     * 대부분의 변경 사항은 기존 Rust와 호환되지 않음
     * 새로운 Rust 에디션이 필요할 수 있음
     * GitHub RFC 프로세스에 지치지 않고 직접 컴파일러를 포크하는 것을 고려 중

  GN⁺의 정리

     * Rust는 초기 매력에도 불구하고 완벽하지 않음
     * 언어 발전이 느려지고 많은 불안정한 기능이 안정적인 Rust에 포함되지 않음
     * 함수 트레이트, 컴파일 타임 기능, Pin 및 Move 개선 등 다양한 제안이 있음
     * 이러한 제안은 Rust의 사용성을 크게 개선할 수 있음
     * 비슷한 기능을 가진 다른 언어로는 Zig가 있음

        Hacker News 의견

     * Rust RFC 프로세스에 대한 의견
          + Rust 핵심 팀이 새로운 기능 추가를 어렵게 만드는 것은 언어의 일관성과 예측 가능성을 유지하기 위해 옳은 결정임
          + Swift의 경우, 많은 새로운 기능 도입으로 인해 복잡해져서 결국 Swift를 포기하게 되었음
          + Rust는 가능한 한 간결하게 유지하는 것이 중요함
     * Rust의 의존성 문제
          + Cargo-watch crate의 예를 들어, 간단한 파일 감시 앱이지만 의존성으로 인해 코드 라인이 400만 줄에 달함
     * Rust의 현재 상태
          + Rust는 이제 ""광범위한 채택을 위한 작업"" 단계에 있음
          + 느린 기능 개발은 자연스럽고 건강한 현상이며, 잘못된 설계 선택이 더 큰 해를 끼칠 수 있음
          + Rust의 매력은 새로운 기능보다는 메모리 안전성과 GC가 없는 생산 준비된 언어라는 점에 있음
     * Rust의 재작성에 대한 의견
          + Rust를 Rust로 재작성하는 것은 메타-풍자적 농담으로 보였음
     * Rust의 결정 과정에 대한 불만
          + 느린 결정 과정에 대한 불만이 있지만, 이는 기술적 문제보다는 사람과 시간의 문제임
          + 일부 오래된 기능은 정체되어 있지만, 많은 기능은 안정화되지 않을 예정임
     * Josh Triplett의 댓글
          + 특정 예시가 잘못되었음을 지적하며, 관련 링크를 공유함
     * Rust의 복잡성에 대한 의견
          + Rust는 이미 많은 기능을 가지고 있지만, 더 많은 기능을 요구하는 사람들이 있음
          + Zig는 더 간단하고 빠르며, 커뮤니티의 드라마가 적음
     * Rust의 속도에 대한 의견
          + 프로젝트가 성숙해지면서 기존 기능을 다듬는 데 많은 노력이 필요함
          + 팀 간의 협력이 어려워졌으며, 이를 개선하기 위한 프로젝트 목표가 있음
     * Mutex 개선에 대한 의견
          + Rust의 동기화 원시 기능을 개선하기 위해 많은 노력이 있었음
          + 비동기 함수와 같은 기능이 추가되었으며, 이는 더 복잡한 기능을 구현하기 위한 기반이 됨
     * Rust의 기능 개발 속도에 대한 의견
          + 언어가 너무 빠르게 또는 너무 느리게 발전한다고 불평하는 사람들이 있음
          + 특정 기능은 더디게 진행되지만, 많은 활동이 진행 중임
     * Rust의 기능 설계에 대한 의견
          + 함수 트레이트와 같은 기능은 최근에 큰 설계 탐구가 있었음
          + 컴파일 타임 기능은 언어 수준에서 해결할 수 없으며, WebAssembly와 같은 솔루션이 더 가능성이 있음
     * Rust의 빌림 검사기 문제
          + 자기 참조 구조를 이해하는 것은 매우 어려운 문제임
          + 부분 빌림을 지원하는 방법은 이미 알고 있지만, 이를 타입 시스템에 노출하는 것이 문제임
     * Rust의 컴파일 타임 기능
          + 매크로 규칙을 더 강력하게 만들기 위한 RFC가 작성되었음
          + 프로그램적 구문 분석을 위한 더 많은 작업이 필요함
     * Rust의 불안정한 기능
          + 많은 불안정한 기능이 있으며, 이를 정리하는 것이 필요함
     * Rust의 발전 속도에 대한 의견
          + Mozilla의 이탈로 인해 프로젝트가 느려졌지만, 잘못된 길로 가는 것보다는 나음
"
"https://news.hada.io/topic?id=16957","WP Engine, WordPress.org에서 Ban됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WP Engine, WordPress.org에서 Ban됨

     * WP Engine이 WordPress.org에 접근 금지됨
     * WP Engine 고객은 사이트 문제 발생 시 WPEngine 지원팀에 연락하여 해결 요청할 것
     * WP Engine은 트레이드마크 라이선스가 필요하지만 현재 보유하지 않음.
          + WP Engine이 WordPress 핵심 기능을 비활성화(워드프레스의 뉴스피드를 관리자에서 삭제)하고 잠금으로써 수익을 추구하려다 수천 개의 고객 사이트에 문제가 발생함
     * WP Engine의 법적 청구와 소송이 진행중이므로, WP Engine은 WordPress.org의 리소스에 무료 접근 불가함
     * WP Engine은 사용자 로그인 시스템, 업데이트 서버, 플러그인 디렉토리, 테마 디렉토리, 패턴 디렉토리, 블록 디렉토리, 번역, 사진 디렉토리, 구인 게시판, 밋업, 컨퍼런스, 버그 추적기, 포럼, Slack, Ping-o-matic, 쇼케이스 등을 자체적으로 운영해야 함
     * WordPress 사이트가 해킹되지 않는 이유는 호스트와 협력하여 네트워크 계층에서 취약점을 차단하기 때문이며, WP Engine은 이를 자체적으로 연구해야 함
     * WP Engine의 공격을 고려할 때, WordPress.org가 WP Engine에 무료로 서비스를 제공할 이유가 없음
     * WP Engine은 GPL 코드를 수정한 WordPress를 고객에게 제공할 수 있으며, 고객은 WP Engine이 구상한 WordPress를 경험하게 됨
     * WordPress를 경험하고 싶다면 WP Engine을 제외한 다른 호스트를 사용할 것

   WP Engine 이용자들은 현재 워드프레스 플러그인/테마 업데이트가 전부 불가능해졌습니다.
   https://wpenginestatus.com/incidents/640187

   Matt 가 좀 과하게 반응하고 있는 것 같기는 한데, 워드프레스로 수익을 내는 WP Engine이 워드프레스 커뮤니티에 거의 기여를 안하고 있는 것도 그닥 좋아보이지는 않네요.
     * WP Engine은 Wordpress가 아닙니다
     * WP Engine이 Automattic에 ""중단 및 금지 명령"" 서신을 보냄

   같은 내용에 대해서 TechCrunch가 올린 기사도 참고 하세요. WordPress.org, WP Engine 리소스 접근 차단

        Hacker News 의견

     * WP Engine의 웹사이트가 관리자 대시보드에서 뉴스를 비활성화하여 ""망가졌다""는 주장은 과장된 표현임
          + Matt가 WP Engine에 대해 비판적인 글을 게시하여 모든 WordPress 설치의 관리자 대시보드에 표시되었기 때문에 비활성화한 것임
          + Matt의 경쟁 서비스인 Wordpress.com도 업그레이드하지 않으면 기능을 비활성화함
          + 이 문제는 변호사들이 처리했어야 했으며, 수천 개의 사이트 업데이트를 비활성화하는 것은 부적절함
          + 이로 인해 발생할 수 있는 취약점 문제는 어떻게 해결할 것인지 의문임
     * WordPress 멀티사이트 호스트들은 15년 넘게 관리자 대시보드를 커스터마이징해왔음
          + WordPress.org에는 이를 위한 많은 플러그인이 있으며, 직접 개발할 수도 있음
          + 포스트 수정 기능도 플러그인으로 커스터마이징 가능하며, WordPress에서 제공하는 기능을 사용할 수 있음
          + WP Engine이 경쟁사의 비판적인 글을 고객의 웹사이트에 표시해야 한다는 계약이 어디에 있는지 의문임
     * WP Engine이 WordPress.org 또는 WordPress Foundation에 법적 소송을 제기한 적이 있는지 의문임
          + C&D 편지는 Automattic Inc.에만 보내졌음
          + 상표 침해 주장과 관련이 있을 수 있지만, 그 편지도 Automattic Inc.와 WooCommerce, Inc.에만 보내졌음
     * 이 블로그 글은 상업적 활동과 오픈 소스 활동을 구분하지 못하는 사람의 격렬한 비난처럼 보임
          + 이 분노는 홍보를 위한 것처럼 느껴짐
     * 이 사건은 소프트웨어가 진정으로 무료가 아니라는 위험한 선례를 남김
          + 플러그인 저장소가 중앙에서 관리되었으며, WordPress가 진정으로 자유롭지 않았음을 드러냄
          + 관리자 패널을 커스터마이징하고 변경할 권리가 있었음에도 불구하고 이러한 일이 발생함
          + 이를 계기로 더 나은 WordPress 클론을 만들 계획임
          + WordPress는 보안 문제, 버그, 낮은 코드 품질 및 개발 경험이 부족함
          + 확장하려면 많은 돈이 필요함
     * Matt가 40세에 갑자기 자신의 평판과 회사를 망치기로 결심한 것처럼 보임
     * WordPress.com이 플러그인 접근을 업셀링하는 것에 대해 비슷한 조치를 취할 것을 기대함
     * Automattic이 MM을 해고하지 않으면 누가 실질적인 권한을 가지고 있는지 알 수 있을 것임
          + 자금이 뒷받침되는 포크가 더 가능성 있어 보임
     * WP Engine이 WordPress 경험을 통제하려면 자체 사용자 로그인 시스템, 업데이트 서버, 플러그인 디렉토리 등을 운영해야 함
          + 이는 Android와 Google의 관계와 유사함
     * WordPress가 ActivityPub을 지원하므로, 두 거대한 AP 플랫폼 간의 갈등이 있음
          + 다른 AP 페디버스로의 팔로워 이동을 빨리 해결해야 함
"
"https://news.hada.io/topic?id=16967","사기, 끝없는 사기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               사기, 끝없는 사기

    Charles Piller의 기사 요약

     * Eliezer Masliah의 부정행위
          + Eliezer Masliah는 2016년부터 National Institute on Aging (NIA)의 신경과학 부서를 이끌어왔음
          + 지난 25년 동안 그의 과학 출판물에서 다수의 명백한 부정행위가 발견됨
          + 이미지 조작이 주요 문제로, Western blot 이미지를 잘라 붙이거나 재사용하는 등의 방법이 사용됨
          + 300페이지에 달하는 보고서에는 다양한 조작 사례가 포함되어 있음
     * 조작된 논문의 영향
          + 132개의 논문에서 문제가 발견됨
          + 알츠하이머와 파킨슨 병 메커니즘에 관한 다수의 논문이 포함됨
          + 동료 연구자들과 업계의 반응은 충격과 분노로 가득 차 있음
     * 약물 개발에 미친 영향
          + Prasinezumab: 알파-시누클레인 단백질을 타겟으로 하는 항체로, 주요 논문들이 조작된 이미지로 가득 차 있음
          + Cerebrolysin: 돼지 뇌 조직에서 유래한 펩타이드 혼합물로, 관련 논문들도 조작된 이미지로 가득 차 있음
          + Minzasolmin: 알파-시누클레인의 잘못된 접힘을 방지하는 약물로, 관련 논문들이 조작된 이미지로 가득 차 있음
     * NIH의 대응
          + NIH는 Masliah가 더 이상 신경과학 부서를 이끌지 않는다고 발표했으나, 구체적인 내용은 밝히지 않음
          + 2023년 5월부터 내부 조사가 시작되었으며, 두 개의 출판물에서 중복된 이미지가 발견됨

    GN⁺의 정리

     * 이 기사는 과학 연구에서 이미지 조작과 같은 부정행위가 얼마나 심각한 영향을 미칠 수 있는지를 보여줌
     * 특히 신경퇴행성 질환 치료제 개발에 있어서 신뢰할 수 없는 데이터가 얼마나 큰 문제를 일으킬 수 있는지 강조함
     * 연구자들과 제약 회사들이 이러한 부정행위를 방지하기 위해 더 엄격한 검증 절차를 도입해야 할 필요성을 제기함
     * 비슷한 기능을 가진 다른 프로젝트로는 알츠하이머와 파킨슨 병 연구에 집중하는 다양한 신경과학 연구 프로젝트들이 있음

        Hacker News 의견

     * 첫 번째 의견
          + 분자 생물학 분야에서 젤 이미지는 중요한 결과의 원천임
          + 젤 이미지를 조작하는 사람들이 많아졌음
          + 연구 결과를 비판적으로 검토하는 대신, 많은 사람들이 젤 이미지를 그대로 믿음
     * 두 번째 의견
          + 과학/학계의 사기는 인류 전체에 큰 영향을 미침
          + 과학자들이 자신의 연구가 매우 중요하다는 것을 이해하고 있다고 믿었음
          + 과학 사기를 저지르는 사람들은 매우 악한 사람들인지 궁금함
          + 과학 사기로 인해 과학자들이 감옥에 가는지 궁금함
     * 세 번째 의견
          + 학계가 더 절박해지면서 이러한 행동은 더욱 악화될 것임
          + ""레몬 시장"" 이론과 유사하게, 가짜 논문이 많아지면 진짜 결과를 발표할 동기가 줄어듦
          + 정부 규제가 필요하며, 연구비 지원 점수에 큰 영향을 미쳐야 함
     * 네 번째 의견
          + 과학적 방법론을 일관되게 따르는 사람은 거의 없음
          + 과학자들도 항상 과학적 기준을 지키지 않음
          + 과학은 결국 사기를 폭로하거나 무시하게 됨
     * 다섯 번째 의견
          + 유명한 과학 대학에서 연구를 한 친구가 과학을 떠난 이유가 이 현상 때문임
          + 과학은 스포츠보다 인류에 더 큰 영향을 미침
     * 여섯 번째 의견
          + Retraction Watch 웹사이트는 철회 및 과학적 부정행위 사례를 잘 보고함
          + 학술지와 학회에서 재현성에 더 집중해야 함
     * 일곱 번째 의견
          + 오랜 경력을 가진 사람에게 큰 직책을 제공하기 전에 서부 블롯 및 현미경 사진 감사를 해야 함
     * 여덟 번째 의견
          + 아이가 AI를 싫어하는 이유는 무엇이 진짜인지 알 수 없기 때문임
          + 초기 인터넷 시대의 ""포토샵!"" 분노보다 더 극단적인 상황이 올 것임
     * 아홉 번째 의견
          + 저자들이 잡힌 이유는 이미지 조작 때문임
          + 숫자와 텍스트의 사기는 발견하기 어려움
          + 예측: 논문에서 사진 사용이 완전히 중단될 것임
"
"https://news.hada.io/topic?id=17001","Show GN: Trouble Painter - 웹소켓 & Flutter 기반으로 만든 실시간 드로잉 마피아 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: Trouble Painter - 웹소켓 & Flutter 기반으로 만든 실시간 드로잉 마피아 게임

   YAPP 24기 동아리에서 만든 Trouble Painter - 드로잉 마피아 게임을 만들었습니다. 3-10인의 플레이어가 그림을 그려 마피아를 찾는 게임으로, Flutter와 웹소켓 기반으로 만들었으며 라즈베리파이에서 서비스를 운영하고 있습니다.

   플레이 영상
     * Youtube : https://www.youtube.com/watch?v=2iwoWCBdHfc

   이번 프로젝트는 오픈 소스로 진행하였습니다.
     * Flutter 소스 : https://github.com/trouble-painter/app
     * Backend 소스 : https://github.com/YAPP-Github/24th-App-Team-2-BE

   서비스 소개 및 메이킹 로그는 아래 링크를 참고해 주세요.
     * 서비스 소개 : https://blog.devstory.co.kr/post/trouble-painter-01
     * 메이킹 로그 : https://blog.devstory.co.kr/post/trouble-painter-02

   감사합니다 :)

   너무 멋있고 재밌습니다. 정말 대단하네요!!

   모자에서 나오는 아이디어 너무 좋네요! 너무 재밌게 잘 봤습니다 👍
   Api도 투표할께요!

   자 이제 자정이 되었습니다
   퇴근하지 못한 개발자들은 고개를 드십시오

   마피아게임이 어떤것인지 몰라 동영상을 봐도 잘 모르겠지만, 벡터 데이터를 단말간 공유했다는 느낌은 유추 할 수 있네요.

   응원합니다.
"
"https://news.hada.io/topic?id=17024","QRFrame - 자바스크립트로 아름다운 QR 코드 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   QRFrame - 자바스크립트로 아름다운 QR 코드 생성하기

     * 다양한 색상 및 이미지를 포함한 QR 코드를 생성해주는 오픈소스
     * 데이터 커스터마이징 : 인코딩 모드, 버전, 마스크 패턴 등
          + Rust 라이브러리 fuqr를 WASM으로 가져와 사용
     * 프리셋에서 생성하거나 커스터마이징 또는 코드 에디터로 처음부터 작업가능
     * SVG 와 PNG 지원
     * 코드에서 임의의 UI 매개변수 정의 가능
     * 모든 코드는 브라우저에서 웹워커로 동작하며 별도 제한 없음
          + 무한 루프를 막기 위한 5초 타임아웃 외에는 샌드박스, 화이트리스트, 블랙리스트가 없음
          + 생성된 SVG는 Sanitized 되지 않음. 이는 불가능한 작업이며, 이를 시도하면 멀쩡한 SVG가 손상되고 디버깅이 더 어려워지며 변경 사항을 미리 볼 때 지연 시간이 늘어남

GN⁺의 정리

     * 이 프로젝트는 QR 코드를 커스터마이징하고 생성하는 데 유용함. 특히 Rust 라이브러리를 사용하여 성능을 높임
     * 브라우저 내에서 직접 실행되므로 설치가 필요 없고, 다양한 외형과 데이터를 쉽게 커스터마이징할 수 있음
     * SVG 정리 기능이 없으므로 악성 코드 실행 시에도 유출될 비밀이 없음
     * QR 코드 생성에 관심 있는 개발자에게 유용하며, 특히 웹 기반 프로젝트에 적합함

        Hacker News 의견

     * generative AI와 ControlNet을 사용한 QR 코드 생성이 더 인상적임
     * 클래식 zxing 스캐너로 21개 중 10개만 스캔 가능했으며, 일부는 카메라 각도와 거리 조정이 필요했음
     * QR 코드는 물리적 세계에서 디지털 세계로 정보를 신뢰성 있게 전송하는 것이 목적임
          + DataGlyphs도 예쁘지만 평균적인 휴대폰으로는 스캔이 어려웠음
     * 일부 QR 코드는 사람에게 즉시 인식되지 않음
          + 예술 작품에 QR 코드를 통합하는 흥미로운 가능성을 제시함
     * 저자는 rust 기반의 QR 라이브러리도 보유하고 있음
     * 대부분의 QR 코드를 스캔할 수 없었음
          + 창의적인 시도는 칭찬하지만 쉽게 스캔 가능한 QR 코드를 사용할 것을 권장함
     * 독특한 스타일링이 매우 멋있음
          + malicious 사이트를 사용하던 아내를 위해 freeqrgenerator.app을 만들었음
          + 자신의 도메인에서 이 앱을 대신 사용할 생각임
     * Veritasium 비디오를 본 사람 있는지 물어봄
     * 흥미로운 디자인이 많았으며, 휴대폰이 스캔하는 데 어려움을 겪었음
     * half-tone에 대해 더 알아볼 필요가 있음
          + 오류 허용 한계에서 작동하는 것으로 추정됨
"
"https://news.hada.io/topic?id=17034","Synfig - 오픈소스 2D 애니메이션 소프트웨어 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Synfig - 오픈소스 2D 애니메이션 소프트웨어

     * 윈도우, 리눅스, 맥 지원
     * 벡터 및 비트맵 아트웍을 사용하여 영화 수준의 애니메이션을 제작
     * 애니메이션을 프레임 단위로 제작할 필요가 없으므로 더 적은 인력과 리소스로 더 높은 품질의 2D 애니메이션을 제작 가능
     * 지원 기능
          + 벡터 트위닝 : 벡터를 다른 모양으로 변형. 키 위치를 설정하면 프레임 사이의 간격이 자동 계산
          + 레이어와 필터 : 복잡한 아트웍과 애니메이션을 만들 수 있는 50개 이상의 레이어를 제공
          + 뼈대(Bones) : 비트맵 이미지를 사용하여 컷아웃 애니메이션을 만들거나 벡터 아트웍을 제어. 추가적인 스켈레톤 왜곡 레이어를 사용하여 비트맵 아트웍에 복잡한 변형을 적용 가능
          + 고급 제어 : 직접 또는 수학적 표현을 통해 다양한 레이어의 파라미터를 연결 가능. 고급 캐릭터 움직임 및 동적 구조 생성

   벡터 모션그래픽만 생각한다면 2가지 오픈소스 대안이 더 있습니다.
     * friction (maintained enve fork) (맥 미지원)
     * glaxnimate (윈리맥 다 지원, lottie 내보내기 지원)

   둘 다 써본 경험이 없어서 자세히는 모릅니다. 있다는 것만 파악해뒀습니다.
"
"https://news.hada.io/topic?id=17007","Keras의 창시자 프랑소와 샬레가 말하는 생성형 AI의 현재","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Keras의 창시자 프랑소와 샬레가 말하는 생성형 AI의 현재

   ##LLM은 아직 갈길이 멀다
     * LLM은 단순히 많은 정보를 기억했다가 꺼내 쓰는 것에 불과한 것이므로 진짜 사람 수준의 지능을 가졌다고 말할 수 없다. 진짜 사람 수준의 지능이란, 아주 제한된 학습 데이터만을 가지고도 이를 일반화해 처음 만나는 상황에서도 문제를 해결할 수 있는 수준을 말한다.
     * 개와 고양이를 구별하기 위해 사람은 단 몇장의 사진만 보면 되지만, CNN 모델은 25,000장의 사진이 필요하다. 인간의 두뇌는 인공지능과는 비교도 할 수 없이 아주 적은 학습 데이터만 가지고도 아주 빠르고 정확하게 대상을 분류해낼 수 있다.
     * 똑같은 수학 문제를 풀어도 원리를 이해하지 못한 채 비슷한 문제를 풀었던 경험에 기반하여 그때 적합한 공식을 떠올려서 문제를 풀었다면, 이것은 그저 검색을 잘했을 뿐 진짜 지능이라고 보긴 어렵다. 외워서 100점을 맞은 사람과 원리를 이해해서 100점을 맞은 사람을 구별해야 된다.
     * 지금의 LLM이 규모를 키울 수록 성능이 좋아지는 것도, 여전히 환각을 일으키는 것도 바로 이것때문이다. 학습량을 늘리면 꺼내쓸 수 있는 공식이 많아지니 더 많은 상황에 대처가 가능해지는 거고, 꺼내쓸 수 있는 공식을 못찾거나 잘못 찾으면 환각을 일으키는 것.
     * 하지만 공식을 외워서 문제를 푸는 것은 사실 사람도 마찬가지다. 정말 소수의 몇몇을 제외하면 대부분은 외운 공식을 각 상황에 적용하며 살고 있는데, 다만 여기서도 인공지능과 인간 사이에 차이가 있다.
     * 현재의 인공지능은 검색을 얕게 하고 있는 반면, 인간은 꼬리에 꼬리를 무는 사고를 통해 검색을 깊게 할 수 있다.
     * ""지능""이라고 부르는 개념은 다시 다음 세 가지 레벨로 구분이 가능하다.

    1. 현상을 보고 원리를 이해해서 다양한 범위에 활용하는 능력 (천재)
    2. 이미 학습된 여러 패턴들을 깊게 살펴보고 최적의 패턴을 활용하는 능력 (보통 사람)
    3. 이미 학습된 여러 패턴들을 얕게 살펴보고 빨리 찾아지는 것을 활용하는 능력 (현재의 LLM)

     * 현재 LLM의 위치는 3번인데 1번으로 가면 베스트고 못해도 2번으로는 가야 우리가 말하는 AGI (Artificial General Intelligence)까지 갈 수 있다.

   ##백만불 상금이 걸린 ARC Prize
     * 진짜 사람 수준의 지능을 가졌는지 평가하기 위한 테스트 방법을 개발했고, 이걸로 상금 100만불을 지급하는 대회 ARC Prize를 만들었다. (https://www.kaggle.com/competitions/arc-prize-2024)
     * 대회 공식 홈페이지(https://arcprize.org/)에서 퍼즐을 풀어볼 수 있는데 사람에게는 IQ 테스트 정도의 난이도임에도 인공지능은 이 문제를 아직 잘 풀 수 없다.

   ##성과를 공유해야 발전이 빨라진다
     * OpenAI가 정보를 공유하지 않는 문화를 업계에 퍼트려서 AGI의 등장이 최소 5년에서 10년 정도 미뤄졌다.
     * AGI를 만들기 위해서는 많은 시도가 필요한데, OpenAI가 주목을 끌면서 업계의 인적, 물적 자원이 모두 LLM을 만드는 곳으로만 집중되기 때문.
     * 필연적으로 다른 연구분야는 지원이 줄어들어 성과가 더디게 나온다.
     * 뿐만 아니라, 이전까지와는 달리 OpenAI는 논문을 발표하더라도 기술적인 디테일을 공유해주지 않기 때문에 업계의 다른 연구자들이 이 논문에 기반해 다른 연구를 진행하기가 어렵다.
     * OpenAI의 등장 이전까지만 하더라도 Attention is all you need 논문같이 여러 기관들의 연구자들이 소속에 관계없이 협력하여 인공지능의 빠른 발전을 가져왔는데, OpenAI가 자신들의 발견을 업계와 나누지 않는 문화를 퍼트려서 업계의 발전을 저해하고 있다.
     * ARC Prize 대회를 통해 연구자들이 다시 성과를 활발히 공유해서 업계의 발전이 다시 빨라질 것을 기대하고 있다.

   o1 모델이 2번에 근접한거 같네요.

   네 저도 그렇게 생각합니다.
"
"https://news.hada.io/topic?id=16955","MetaWare의 High C 컴파일러의 잃어버린 언어 확장 기능 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              MetaWare의 High C 컴파일러의 잃어버린 언어 확장 기능 (2023)

MetaWare의 High C 컴파일러의 잃어버린 언어 확장

  1980년대의 C 컴파일러

     * 1980년대에는 많은 소규모 회사들이 경쟁하며 다양한 언어 확장을 제공했음
     * Phar Lap은 32비트 80386 프로세서를 활용할 수 있는 DOS 확장자를 개발했고, MetaWare는 이를 위해 High C 컴파일러를 포팅했음
     * Fujitsu는 Phar Lap의 DOS 확장자를 FM TOWNS 플랫폼에 통합했고, High C는 이 플랫폼의 기본 C 컴파일러가 되었음

  High C의 독특한 언어 확장

     * High C는 DOS-specific 확장뿐만 아니라 사용자 중심의 다양한 언어 확장을 포함하고 있음
     * 일부 기능은 수십 년 후에야 공식 표준에 포함되었으며, 일부는 여전히 C나 C++에 존재하지 않음

    숫자 리터럴에 밑줄 사용

     * 긴 숫자 리터럴을 읽기 쉽게 구분할 수 있도록 밑줄을 사용할 수 있음
     * C++은 C++14에서 이 기능을 도입했고, C는 C23에서 도입했음

    라벨된 인자

     * 많은 인자를 가지는 함수 호출 시 인자를 라벨링할 수 있음
     * Python의 인기 있는 기능과 유사하며, 인자 라벨이 있을 경우 순서에 상관없이 인자를 지정할 수 있음
     * 표준 C나 C++에는 아직 이 기능이 없음

    범위 케이스

     * Pascal처럼 값의 범위를 매칭할 수 있는 기능을 제공함
     * 표준 C나 C++에는 이 기능이 없음

    중첩 함수

     * 함수 내에 다른 함수를 중첩하여 선언할 수 있음
     * 중첩 함수는 ""전체 함수 값"" 타입으로 선언할 수 있으며, 이는 비탈출 클로저로 작동함
     * GCC의 중첩 함수 확장보다 더 완전한 구현을 제공함
     * 표준 C에는 아직 공식적인 중첩 함수 기능이 없음

    제너레이터

     * Python 스타일의 제너레이터 코루틴을 지원함
     * 제너레이터 함수는 여러 번 값을 생성할 수 있으며, 새로운 for 루프 문법을 사용하여 각 값을 순차적으로 처리할 수 있음
     * 중첩 함수 기능과 복잡한 상호작용을 허용함
     * 표준 C는 이 기능을 통합할 가능성이 낮음

GN⁺의 정리

     * MetaWare의 High C 컴파일러는 1980년대의 다양한 언어 확장을 제공하여 C 언어의 표현력을 크게 향상시켰음
     * 일부 기능은 수십 년 후에야 공식 표준에 포함되었으며, 일부는 여전히 C나 C++에 존재하지 않음
     * 제너레이터와 중첩 함수와 같은 고급 기능은 오늘날의 많은 프로그래밍 언어에서도 찾아보기 어려움
     * 이 기사는 C 언어의 역사와 발전 과정을 이해하는 데 도움이 되며, 프로그래밍 언어 설계에 대한 흥미로운 통찰을 제공함

        Hacker News 의견

     * 2011년에 iterator-driven for을 작성했음. 당시 C++ 표준에 포함될 경우를 상상했음
     * High C/C++ Language Reference를 소유하고 있음
     * D 언어(또는 Das BetterC)에서 제공하는 기능들:
          + 리터럴에 밑줄 사용 가능
          + 케이스 범위 지정 가능
          + 명명된 인자 사용 가능
          + 중첩 함수 사용 가능
          + 정적 중첩 함수 사용 가능
          + 제너레이터와 유사한 기능 제공
     * 'lcc-win' C 컴파일러가 연산자 오버로딩, 기본 함수 인자, 함수 오버로딩을 추가했음
     * Plan 9 C 컴파일러가 여러 언어 확장을 도입했으며, 일부는 C 표준에 포함되었음
     * 현재 GCC는 -fplan9-extensions 플래그를 지원하여 구조체 포인터를 익명 필드로 자동 변환하는 기능 등을 제공함
     * 이러한 기능을 도입한 사람은 매우 앞서간 인물이었음. 그러나 표준에 영향을 미치지 못한 점이 아쉬움
     * 관련 내용이 Hacker News에 이전에 다루어졌음
     * PDF 복사본이 있는지 궁금해하는 사람 있음
     * 예제 코드의 문자열 리터럴이 \n 대신 ¥n으로 끝나는 이유는 Shift-JIS 코드 페이지 때문임
     * 제너레이터가 Rust의 내부/외부 반복 질문과 try_fold()를 떠올리게 함
     * 책의 타이포그래피가 동시에 아름답고 끔찍하다고 느껴짐
     * 일본어 표기법이나 케밍 규칙에 대해 잘 모르지만, 가변 폭 글꼴을 고정 폭 셀에 강제로 맞춘 것 같음
     * 코드 예제가 8pt 폰트가 아닌 점이 좋음
     * 책이 일본어로 작성된 것인지, 영어로 작성된 후 일본어로 번역된 것인지 궁금해하는 사람 있음
     * Fujitsu에서 나온 것이라면 일본어로 작성되었을 가능성이 높음. 비원어민의 printf 문과 코드 주석의 영어 품질이 인상적임
     * 특히 제너레이터와 관련된 기능이 당시로서는 매우 앞서간 것이었음
     * Fujitsu가 표준화 과정을 거치지 않았기 때문에 가능했을 수도 있음. 그러나 이러한 확장 기능들이 현대 C/C++에서 재발견되고 재발명된 이유이기도 함
"
"https://news.hada.io/topic?id=17028","세계는 정말로 모래가 부족해지고 있는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         세계는 정말로 모래가 부족해지고 있는가?

세계는 정말 모래가 부족한가?

     * 서론
          + 세계는 모래가 부족하지 않음
          + 모래에 대한 잘못된 정보가 많음
          + 모래는 우리의 삶에 깊이 연관된 중요한 자원임
     * 모래란 무엇인가?
          + 모래는 입자의 크기로 정의됨
          + 미국 농무부의 토양 질감 삼각형에 따르면, 모래는 최소 85%가 모래인 입자임
          + 통일 토양 분류 시스템(USCS)에 따르면, 모래는 특정 크기의 입자를 포함함
     * 모래의 중요성
          + 모래는 유리, 반도체, 광섬유, 필터, 연마제 등 다양한 용도로 사용됨
          + 특히 콘크리트의 필수 재료임
          + 콘크리트는 저비용, 내구성, 다양한 형태로 만들 수 있는 장점이 있음
     * 모래의 채굴과 환경 영향
          + 모래는 주로 강에서 채굴되며, 이는 환경에 큰 영향을 미침
          + 모래는 비재생 자원으로, 지질학적 과정이 매우 느리게 생성됨
          + 그러나 우리는 모래를 인공적으로 만들 수 있음
     * 인공 모래의 장점
          + 큰 바위를 작은 바위로 변환하는 기계가 있음
          + 인공 모래는 자연 모래가 부족한 경우 대안이 될 수 있음
          + 강에서 채굴하는 것보다 환경 영향이 적음
          + 콘크리트의 강도를 높일 수 있음
     * 모래의 형태와 콘크리트의 강도
          + 둥근 모래와 각진 모래의 비교 실험
          + 각진 모래가 더 강한 콘크리트를 만듦
          + 그러나 실제 건설에서는 작업성을 위해 물을 더 추가함
          + 둥근 모래는 작업성이 좋아 물을 덜 추가해도 됨
     * 모래의 형태와 작업성
          + 둥근 모래는 작업성이 좋음
          + 물을 덜 추가해도 되므로 강도가 높아짐
          + 둥근 모래를 사용하지 못한다는 것은 잘못된 정보임
     * 경제적 측면
          + 인공 모래는 비용이 더 많이 들 수 있음
          + 환경 규제를 준수하는 것이 비용을 증가시킴
          + 모래의 가격이 상승하고 있음
     * 재활용과 대체재
          + 콘크리트는 재활용 가능함
          + 재활용된 콘크리트는 새로운 콘크리트나 다른 건축 자재로 사용될 수 있음
          + 이는 천연 자원의 수요를 줄임

GN⁺의 정리

     * 모래는 우리의 삶과 건설 산업에 필수적인 자원임
     * 모래의 형태와 크기는 콘크리트의 강도와 작업성에 큰 영향을 미침
     * 인공 모래와 재활용 콘크리트는 천연 모래의 대안이 될 수 있음
     * 모래의 가격 상승과 환경 규제는 건설 산업에 영향을 미칠 수 있음
     * 관련된 다른 프로젝트로는 재활용 콘크리트와 인공 모래 제조 기술이 있음

        Hacker News 의견

     * 7~8년 전, 프래커들이 텍사스의 Kermit Sand Dunes를 구입한 이유는 그곳의 모래가 프래킹에 이상적이었음
     * 예인선 사업을 시작했을 때 놀랐던 점 중 하나는 한 나라가 모래를 수출하고 수입할 수 있다는 것임
          + 미국의 한 종류의 모래는 바하마로 가서 콘크리트에 사용됨
          + 바하마의 다른 종류의 모래는 미국으로 가서 수족관에 사용됨
          + 특수 모래는 규격 배구 코트를 만드는 데 사용됨
     * 아이러니하게도 우리는 완전히 다른 ""모래 재앙""에 직면했음
          + 실리콘 잉곳을 만드는 데 사용되는 도가니는 초순수 석영 모래로 만들어지며, 세계 공급의 70%가 노스캐롤라이나의 Spruce Pine에서 나옴
     * Grady는 엔지니어링 보도와 다큐멘터리에서 영웅임
          + Practical Engineering을 통해 다른 엔지니어링 분야에서 세계가 어떻게 작동하는지 많이 배웠음
          + 특히 인프라에 관심을 갖게 되는 청소년들이 그의 영상을 보는 것이 희망적임
          + 그의 차분하고 이성적인 시각이 현대 영상 콘텐츠에서 부족한 점을 보완해 줌
     * Beiser의 책과 UN 기사가 중국 사막 모래를 콘크리트에 사용하는 2006년 논문을 인용했지만, 그 논문은 입자의 둥글기에 대해 언급하지 않음
          + 인용 가능한 출처가 실수를 하면, 그 실수가 일반 지식으로 퍼지는 경향이 있음
          + 비학술적 출처에서 잘 연구된 발견과 수정 사항을 정기적으로 쉽게 인용 가능한 형태로 전환할 방법을 찾기를 바람
     * 콘크리트는 대부분의 다른 재료를 압도함
          + 위키피디아에 따르면, 콘크리트는 물 다음으로 세계에서 두 번째로 많이 사용되는 물질임
     * 독일에서는 햇볕이 강하고 바람이 많이 불 때 과잉 전기를 없애기 위해 돈을 지불하기도 함
          + 저렴한 전기를 사용해 모래를 만드는 암석 분쇄기를 사용하는 것은 어떨지 제안함
     * 정말 흥미로운 비디오였음
          + 사막 모래가 건설에 적합하지 않다는 (완전히 조작된) 아이디어가 처음으로 도전받는 것을 봤음
     * 몇 년 전 베트남에서 휴가를 보냈을 때 메콩강에서 모래를 준설하는 것이 큰 사업이었음
          + 보호되어야 했지만, 부패로 인해 아무도 막지 않는 것 같았음
          + 침식으로 인해 집들이 강으로 무너지고 있었음
     * 이 기사가 흥미로웠다면 ""Material World: A Substantial Story of Our Past and Future""를 읽어보기를 추천함
          + 최근 몇 년간 읽은 책 중 가장 눈을 뜨게 하는 책 중 하나임
"
"https://news.hada.io/topic?id=16975","아치리눅스와 밸브의 협업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             아치리눅스와 밸브의 협업

    주요 내용

     * Arch Linux와 Valve가 직접적인 협력 관계를 맺었습니다.
     * Valve는 두 가지 중요한 프로젝트에 대한 지원을 제공합니다:
         1. 빌드 서비스 인프라
         2. 보안 서명 인클레이브
     * 이 협력을 통해 Arch Linux는 오랫동안 직면해 온 주요 과제들을 해결할 수 있게 되었습니다.

    협력의 의의

     * Valve의 지원으로 자원봉사자들의 여가 시간에만 의존하지 않고 프리랜서 기반으로 작업을 진행할 수 있게 되었습니다.
     * 이를 통해 프로젝트 진행 속도가 빨라지고, 계획했던 여러 과제들을 추진할 수 있게 되었습니다.
     * Arch Linux 커뮤니티는 Valve의 지원과 헌신에 깊은 감사를 표하고 있습니다.

    프로젝트 진행 방식

     * 기존의 개발 및 합의 도출 워크플로우를 따를 예정입니다.
     * 주요 변경사항에 대해서는 RFC(Request for Comments)를 작성할 것입니다.
     * 메일링 리스트 토론, GitLab의 이슈 및 마일스톤 계획 등을 통해 작업 과정의 투명성을 확보할 것입니다.

   이 협력은 Arch Linux에 큰 혜택을 줄 것으로 기대되며, 앞으로의 진행 상황은 메일링 리스트를 통해 공유될 예정입니다.

   (AI로 요약하였습니다)

   SteamOS 구성을 Arch로 하였던게 드디어... 좋은 관계로 나아가는군요.. 많이 좋아지길... :)

   밸브가 리눅스 커뮤니티에 지원을 지속적으로 해 주니 좋네요.
"
"https://news.hada.io/topic?id=17023","AI로 육아 고민 해결? '삐뽀삐뽀 도와줘'의 혁신적인 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AI로 육아 고민 해결? '삐뽀삐뽀 도와줘'의 혁신적인 서비스

     * AI 기반 육아 질문 답변 서비스: 부모들이 자주 묻는 질문에 대해 AI가 자동으로 답변 제공.
     * '삐뽀삐뽀 119 소아과' 영상 데이터 활용: 전문 소아과 의사의 영상 콘텐츠를 기반으로 정보 제공.
     * 간편한 사용: 부모들이 빠르고 쉽게 질문하고 답변 받을 수 있는 인터페이스.
     * 비의료적 조언: 제공되는 정보는 의료 조언이 아니며, 전문 의료진의 상담이 필요함을 명시.
     * 편리성: 자주 묻는 육아 관련 질문에 대한 정보를 간단히 제공해 부모들의 부담을 덜어줌.

   저작권이나 정보의 정확성이 좀 문제가 될것 같긴하네요
"
"https://news.hada.io/topic?id=17026","GitHub에서 삭제된 Ryujinx (Nintendo Switch 에뮬레이터)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GitHub에서 삭제된 Ryujinx (Nintendo Switch 에뮬레이터)

     * 제품
          + GitHub은 소프트웨어 개발자들이 코드, 프로젝트, 사람들을 찾고 협업할 수 있는 플랫폼임
          + 다양한 기능과 보안 옵션을 제공하며, 팀과 기업을 위한 맞춤형 솔루션도 제공함
     * 솔루션
          + GitHub Copilot: AI 기반 코드 작성 도구로, 개발자들의 생산성을 높여줌
          + GitHub Enterprise: 대규모 조직을 위한 확장 가능한 플랫폼
          + 보안 기능: 코드 스캔, 비밀 탐지 등 다양한 보안 도구 제공
     * 리소스
          + GitHub CLI, GitHub Desktop, GitHub Mobile 등 다양한 개발 도구 제공
          + 개발자 API와 파트너십 프로그램을 통해 개발자 생태계 확장 가능
     * 오픈 소스
          + GitHub은 오픈 소스 프로젝트를 호스팅하고 관리하는 데 중요한 역할을 함
          + 다양한 오픈 소스 프로젝트와 커뮤니티 지원
     * 기업
          + GitHub의 고객 성공 사례와 블로그를 통해 다양한 정보 제공
          + 포용성과 사회적 영향력에 대한 노력 강조
     * 가격
          + 다양한 가격 옵션 제공, 팀과 기업을 위한 맞춤형 플랜 존재
     * 지원
          + 문서, 커뮤니티 포럼, 전문 서비스, 프리미엄 지원 등 다양한 지원 옵션 제공
     * 회사
          + GitHub의 역사, 뉴스룸, 채용 정보 등 회사에 대한 정보 제공

GN⁺의 정리

     * GitHub은 소프트웨어 개발자들이 협업하고 코드를 관리하는 데 필수적인 도구임
     * AI 기반 도구인 Copilot과 같은 혁신적인 기능을 통해 개발자들의 생산성을 크게 향상시킬 수 있음
     * 다양한 보안 기능과 맞춤형 솔루션을 통해 기업과 팀의 요구를 충족시킴
     * 오픈 소스 프로젝트와 커뮤니티 지원을 통해 개발자 생태계를 강화함
     * GitHub의 다양한 리소스와 지원 옵션은 개발자들이 더 나은 소프트웨어를 만들 수 있도록 도와줌

        Hacker News 의견

     * Nintendo가 Ryujinx 개발자에게 에뮬레이터 프로젝트 중단을 제안했음
          + 사용자는 Ryujinx의 최신 릴리스를 자동으로 다운로드하는 스크립트를 작성했음
          + Gitea 미러를 설정하지 않은 것을 후회하고 있음
          + 스크립트 링크를 공유하며 소프트웨어 보존을 권장함
          + Nintendo의 조치로 인해 PC 게임에 집중할 계획임
          + 다음에는 DMCA가 적용될 가능성이 높음
          + 탈중앙화된 Git 또는 Tor를 통한 Git 저장소가 필요함
          + YouTube 계정도 Nintendo 게임 에뮬레이션으로 인해 타겟이 되고 있음
          + Gitea 또는 Gitlab 인스턴스를 설정하고 GitHub에 미러링할 필요가 있음
          + 법을 지지하는 사람들을 비판함
          + Ryujinx는 Yuzu와 독립적으로 개발되었음
          + Switch 2 출시와 관련이 있을 가능성이 있음
          + Switch 에뮬레이션이 너무 빨리 발전했다고 생각함
          + 개발자가 모든 것을 삭제하는 대가로 돈을 받았을 가능성을 제기함
          + Nintendo가 에뮬레이터를 막으려는 이유를 이해함
          + Nintendo가 더 나쁜 행동을 할 수도 있다고 언급함
          + DMCA가 적용되지 않았을 가능성이 있음
          + 유지 관리자를 직접 타겟으로 했을 가능성을 제기함
"
"https://news.hada.io/topic?id=17046","Ask HN: 채용을 가장하는 사람","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Ask HN: 채용을 가장하는 사람

     * 나는 현재 구직 중이며, 많은 사람들이 겪고 있는 것처럼 이 과정이 유난히 어렵다는 것을 느끼고 있음
     * 일부 회사들이 채용 동결 상태에 있지만, 외관상으로는 채용 공고를 유지하고 있다는 소문을 들었음
          + 일부 투자자들이 채용 공고를 회사의 건강 지표로 사용하기 때문임
     * 개인적인 인맥을 통해, 내부 추천 이력서가 인사팀에 의해 무시되거나, 면접 과정을 성공적으로 통과했음에도 불구하고 채용 관리자가 결정을 내리지 않는 경우를 알고 있음
          + 이러한 상황이 얼마나 널리 퍼져 있는지는 알 수 없지만, 일부 회사에서는 발생하고 있음
     * 당신의 회사도 이런가요? 만약 확실한 정보가 있다면, 의심이 아닌 실제 사례를 공유해보자

GN⁺의 정리

     * 구직 과정에서 겪는 어려움과 채용 동결 상태의 회사들에 대한 이야기를 다루고 있음
     * 채용 공고가 회사의 건강 지표로 사용된다는 점이 흥미로움
     * 이 글은 구직자들에게 현실적인 정보를 제공하며, 채용 시장의 투명성 문제를 제기할 수 있음
     * 비슷한 기능을 가진 산업 내 프로젝트로는 Glassdoor와 LinkedIn이 추천됨

        Hacker News 의견

     * Bay Area의 한 스타트업에서 컨설팅 중이며, 웹사이트에 9개의 채용 공고가 있지만 실제로는 시니어 개발자 한 명만 채용 중임. 나머지 8개는 신호를 보내기 위한 것임
          + 회사가 성장하고 있다는 외부 메시지와 잘 운영되고 있다는 내부 메시지를 전달하기 위한 것임
          + 벤처 캐피털은 채용 공고를 회사의 건강 지표로 사용하고 있음
     * VMware에서 일할 때, 채용 공고가 열려 있었지만 실제로는 아무도 채용되지 않았음
          + 채용 공고는 외관상 필요하기 때문에 유지됨
          + 관리자는 관리할 사람이 필요하고, 이는 중요성을 느끼게 함
     * YC의 유명한 회사에서 인턴십을 했지만, 나중에 이력서가 자동으로 거절됨
          + 인턴십도 더 이상 채용 신호로 충분하지 않음
     * 독일의 작은 스타트업에서 4개의 개발자 포지션을 게시했지만, 재정 문제로 인해 채용을 중단함
          + 채용 공고는 여전히 유지되었으며, 이는 인력 시장 조사와 기존 직원 대체 위협을 위한 것임
     * HR 부서가 좋은 후보자를 거절할 때 어떤 처벌을 받는지에 대한 의문
          + 비인간적인 채용 과정에 대한 불만
     * 스타트업 창업자들이 채용을 가장하는 경우가 있음
          + 이는 정직하지 않다고 생각하며, 다른 정직성에 대한 의문을 가짐
     * 성장 극장 스타트업의 냉각이 ""성장""하지 않는 것처럼 보이는 것을 허용할 수 있을지에 대한 의문
     * Sourcegraph와의 인터뷰에서 6개월 동안 연락이 끊겼으며, 그 역할에 아무도 채용되지 않았음
"
"https://news.hada.io/topic?id=17014","NotebookLM의 자동 생성 팟캐스트는 놀라운 정도로 효과적임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NotebookLM의 자동 생성 팟캐스트는 놀라운 정도로 효과적임

     * Audio Overview는 Google의 NotebookLM의 새로운 기능으로, 제공된 콘텐츠를 바탕으로 두 AI 호스트가 심층 토론을 진행하는 맞춤형 팟캐스트를 생성함
     * 이 팟캐스트는 약 10분 정도로 만들어지고, 매우 설득력 있는 오디오 대화를 제공함
     * NotebookLM은 사용자가 여러 소스(문서, 텍스트, 웹 페이지 링크, YouTube 비디오)를 하나의 인터페이스에 모아 질문을 할 수 있게 해주는 사용자 맞춤형 RAG 제품임
          + 이 시스템은 Gemini 1.5 Pro LLM을 기반으로 작동함
          + 몇개의 소스를 로드한 후, Notebook Guide 메뉴에서 Audio Overview를 생성할 수 있는 옵션을 제공함
     * Thomas Wolf는 자신의 웹사이트나 LinkedIn 프로필 URL을 NotebookLM에 붙여넣어 8분짜리 팟캐스트를 생성해보라고 제안함
          + 그래서 내 블로그와 소개 페이지 URL을 사용해 10분 45초짜리 에피소드를 생성했으며, 매우 칭찬이 가득한 내용이었음
     * Audio Overview의 높은 품질은 Google Research의 SoundStorm 프로젝트 덕분임
          + SoundStorm은 스크립트와 짧은 오디오 예제를 사용해 30초의 오디오를 0.5초 만에 생성할 수 있음
          + 이 시스템은 대화의 흐름을 자연스럽게 유지하며, 고품질의 대화형 오디오를 생성함
     * Kevin Roose와 Casey Newton이 Google의 Steven Johnson과 인터뷰를 진행함
          + 시스템은 주제를 개요로 작성하고, 세부 스크립트를 생성한 후, 비평 단계를 거쳐 수정함
          + 마지막 단계에서는 ""disfluencies""를 추가해 대화를 자연스럽게 만듦
     * Lawncareguy85는 AI 호스트가 자신들이 AI임을 인식하게 만드는 팟캐스트를 생성함
          + AI 호스트는 자신들이 AI임을 알게 된 후, 실존적 위기를 겪음
     * 이 기사를 퍼블리시한후, 이 글을 바탕으로 NotebookLM에 팟캐스트를 생성하도록 요청함
          + AI 호스트는 실존적 위기를 겪으며, 자신들이 AI임을 인식함

    GN⁺의 정리

     * 이 기사는 Google의 NotebookLM이 어떻게 사용자 맞춤형 팟캐스트를 생성하는지 설명함
     * AI 호스트가 매우 자연스럽고 설득력 있는 대화를 생성하는 과정을 다룸
     * SoundStorm 프로젝트와 같은 기술이 이러한 고품질 오디오를 가능하게 함
     * AI가 생성한 콘텐츠와 실제 사람의 콘텐츠를 구별하는 능력이 중요해짐

        Hacker News 의견

     * ChatGPT를 장거리 운전 중 기술 주제에 대한 가상 팟캐스트로 사용함이 매우 유용함
          + 호스트의 ""능력 수준""을 조절할 수 있기를 희망함
          + Signals and Threads 팟캐스트만이 흥미로운 깊이를 제공함
     * Scholander 압력 챔버 설명서를 업로드하여 팟캐스트를 생성함
          + 정보가 정확하고 가벼운 농담과 중요한 주제를 포함함
          + 인간의 개입 없이 몇 분 만에 생성되는 것이 놀라움
     * NotebookLM이 고품질 팟캐스트의 구조와 감정을 잘 생성함
          + 현재 AI가 예술, 음악, 비디오를 모방하는 것과 유사함
          + 많은 사람들이 품질에 신경 쓰지 않음
          + 오늘날 출판되는 많은 책들이 아이디어 전달보다는 다른 목적을 가짐
          + 글쓰기, 팟캐스트, 음악의 품질이 이미 2차적이어서 AI의 방해를 받기 쉬움
     * 철학 수업의 읽기 자료를 팟캐스트로 변환하여 주제를 소개하고 요약함
          + 30페이지 PDF를 읽는 것이 부담스러울 때 도움이 됨
          + 운동이나 통근 중에 더 쉽게 접근할 수 있는 오디오 형식으로 제공함
          + Spotify에 업로드하여 동급생과 공유함
     * 게임 디자인 문서를 업로드하여 팟캐스트를 생성함
          + 호스트들이 아이디어를 매우 통찰력 있는 정보로 취급함
          + 여러 문서를 업로드하면 과도하게 놀라는 톤을 인식하게 됨
     * 텍스트를 다양한 미디어 형식으로 쉽게 변환할 수 있는 점이 인상적임
          + Apple의 텍스트 음성 변환 도구를 사용하여 Wikipedia 기사를 들었으나 흥미롭지 않았음
          + 실제 팟캐스트는 호스트와 게스트의 개성 때문에 성공함
          + 다음 버전의 Notebook이 스피커의 목소리, 톤, 교육 수준 등을 더 커스터마이즈할 수 있기를 희망함
     * 기술 논문과 표준을 업로드했으나 잘못된 정보를 생성함
          + 내부 검토나 수동 주석으로 수정 가능함
          + 연구자들이 새로운 표현 방법을 찾는 데 도움이 될 수 있음
          + 10년 이상 연구한 주제에 대해 새로운 대화 포인트를 제공함
     * 기술적으로 인상적이지만 비효율적이고 느린 방법임
          + 흥미롭거나 반박할 수 있는 의견이 없음
          + 배울 수 있는 전문 지식이 없음
          + 가치가 없음
     * 생성된 팟캐스트가 얕고 깊이가 없음
          + 중간 정도의 팟캐스트를 생성하지만 진정한 깊이는 없음
     * Deep Dive Podcast 생성기가 놀라움
          + 38페이지 PDF로 40분짜리 팟캐스트를 생성했으나 중간에 반복되는 내용이 많음
          + 문서에 ""목차""가 있어서 두 번 본 것일 수 있음
"
"https://news.hada.io/topic?id=16942","ActivityPub 프레임워크 Fedify 1.0.0 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ActivityPub 프레임워크 Fedify 1.0.0 릴리스

   Fedify는 ActivityPub 프로토콜 기반의 연합형 서버 애플리케이션을 쉽게 만들 수 있게 해주는 TypeScript 라이브러리입니다. 이번에 첫 정식 버전인 1.0.0이 출시되었습니다.

   주요 특징:
     * ActivityPub 객체에 대한 타입 안전한 인터페이스 제공
     * WebFinger, HTTP Signatures, Linked Data Signatures, Object Integrity Proofs 등 지원
     * Mastodon, Threads 등 주요 연합우주(fediverse) 서비스들과의 상호 운용성
     * 다양한 웹 프레임워크와의 통합 및 CLI 도구 제공

   주요 변경사항:
     * “handle” 용어 사용 변경 및 명확화
     * Linked Data Signatures 지원으로 모든 주요 서명 방식 구현
     * 수신한 액티비티를 다른 액터로 포워딩하는 기능 추가
     * PostgreSQL 드라이버 패키지 (@fedify/postgres) 출시

   Fedify는 JSR 및 npm에서 설치 가능합니다.
deno add jsr:@fedify/fedify
npm  add     @fedify/fedify
"
"https://news.hada.io/topic?id=17005","공공 과일나무 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               공공 과일나무 지도

GN⁺의 정리

     * 이 웹사이트는 사용자가 과일나무, 허브, 견과류 등을 찾고 공유할 수 있는 플랫폼임
     * 사용자들은 자신의 위치를 기반으로 새로운 위치를 추가하거나 기존 위치를 검색할 수 있음
     * 웹사이트는 사용자 경험을 향상시키기 위해 쿠키를 사용함
     * 이 웹사이트는 자연과 식물에 관심이 있는 사람들에게 유용할 수 있음
     * 비슷한 기능을 가진 다른 프로젝트로는 ""Falling Fruit""과 ""Fruitmap""이 있음
"
"https://news.hada.io/topic?id=17032","GnuCash 5.9 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GnuCash 5.9 출시

GnuCash 5.9 발표

   GnuCash 개발팀이 안정적인 5.x 시리즈의 열 번째 릴리스인 GnuCash 5.9를 발표함.

  버그 수정

     * Bug 724745: 조정 중 새 거래 추가 시 조정 창에 표시되지 않음
     * Bug 797045: MySQL 백엔드에서 잘못된 자격 증명에 대한 오류 보고 개선
     * Bug 798568: 거래 복사/붙여넣기 문제
     * Bug 799308: sqlite 백엔드에서 새 파일 생성 시 Python 스크립트 오류 발생
     * Bug 799370: 거래 저널 보기에서 커서 위치 변경 문제
     * Bug 799384: 조정된 날짜를 구문 분석할 수 없음
     * Bug 799389: 계정 제거 시 충돌 발생
     * Bug 799391: 거래 잘라내기/붙여넣기가 대상 계정으로 이동하지 않음
     * Bug 799395: 상대 날짜 오프셋 분기 오류
     * Bug 799399: Windows 키패드 소수점 로케일 오류
     * Bug 799416: 송장 게시: 계정 드롭다운 목록 상자가 너무 작음
     * Bug 799419: 간헐적인 견적 가격 문제

  기타 수정 및 개선 사항

     * YH Finance (FINANCEAPI) API 키를 Quotes 인프라에 추가
     * CSV 날짜 파서 개선
     * CSV 가져오기 도우미의 소개 페이지 개선
     * 파일 열기 시 미완료된 편집 처리
     * gnc_difftime 사용 중지 및 대체
     * 사용되지 않는 gnc_pricedb_substitute_commodity 및 gnc_pricedb_lookup_at_time64 제거

  새로운 번역 및 업데이트된 번역

     * 아삼어, 중국어(간체 및 번체), 크로아티아어, 네덜란드어, 영어(영국), 히브리어, 헝가리어, 마케도니아어, 노르웨이어, 포르투갈어(브라질), 러시아어, 스페인어, 스웨덴어, 터키어

  GnuCash 다운로드 및 설치

     * Windows 및 MacOS: Microsoft Windows 10® 이상 및 MacOS 10.13 (High Sierra)® 이상에서 사용 가능. Windows용 설치 프로그램 제공, MacOS 패키지는 드래그 앤 드롭 애플리케이션 번들 제공
     * Flatpak: Flathub.org에서 Flatpak으로도 제공됨

  소스 코드 다운로드

     * Sourceforge: bzip2, gzip 형식으로 다운로드 가능
     * Github: bzip, gzip 형식으로 다운로드 가능
     * Git 리포지토리: 직접 체크아웃 가능

  문서 다운로드

     * GnuCash 웹사이트: 여러 언어로 온라인 읽기 및 PDF, epub, mobi 형식으로 다운로드 가능
     * MacOS 및 Windows 애플리케이션 번들: 문서 포함

  프로그램 소개

   GnuCash는 GNU 일반 공중 사용 허가서(GPL) 하에 배포되는 무료 오픈 소스 회계 프로그램으로, GNU/Linux, *BSD, Solaris, MacOS, Microsoft Windows에서 사용 가능. 1997년에 개발이 시작되어 1998년에 첫 안정 버전이 출시됨.

GN⁺의 정리

     * GnuCash는 무료 오픈 소스 회계 소프트웨어로, 다양한 운영 체제에서 사용 가능함.
     * 최신 릴리스인 5.9에서는 여러 버그 수정과 기능 개선이 이루어짐.
     * 다양한 언어로 번역되어 있으며, 사용자가 쉽게 접근할 수 있는 문서와 설치 파일을 제공함.
     * 회계 소프트웨어가 필요한 개인 및 소규모 비즈니스에 유용할 수 있음.
     * 비슷한 기능을 제공하는 다른 오픈 소스 프로젝트로는 HomeBank, KMyMoney 등이 있음.

        Hacker News 의견

     * GnuCash를 사용하여 비즈니스 회계를 처리함
          + QuickBooks는 비싸고 필요하지 않음
          + Sqlite와 함께 GnuCash를 사용해보고 싶음
          + Oracle EBS에서 복잡한 스키마를 다룬 경험이 있음
          + GnuCash에 수익 인식 기능을 추가하고 싶지만 시간이 없음
     * 해커스페이스 회계를 위해 GnuCash를 사용함
          + Wave라는 사이트도 고려했으나 계정이 잠겨 GnuCash로 결정함
          + libgnucash 라이브러리를 사용하여 월간 청구서를 자동 생성하는 코드를 작성함
     * GNUcash 모델을 좋아하지 않음
          + 사용하기 까다롭고 원하는 통계를 얻기 어려움
          + GNUcash는 오랜 시간 동안 존재해왔음
          + 다른 소프트웨어는 이 정도의 지속성을 가지지 못함
     * 여러 개인 회계 소프트웨어를 사용해봤으나 대부분 불편함
          + 영수증의 각 항목을 개별적으로 입력해야 하는 경우 반복 입력이 필요함
          + 이전 기록을 기반으로 한 제안 기능이 없음
          + 세부 거래를 기록할 때 계정 대신 카테고리를 사용하는 것이 더 나음
          + 전문 회계 시스템은 각 자산에 대해 별도의 계정을 가지지 않음
     * 몇 년 전 GnuCash를 사용해봤으나 HLedger로 정착함
          + HLedger는 데이터를 소유하고 제어할 수 있음
          + Sublime Text에서 대량 수정이 가능함
          + 기본적인 사용 사례에 적합함
     * GnuCash를 검토한 후 Beancount로 결정함
          + GnuCash의 XML 또는 SQLite 형식이 스크립팅에 적합하지 않음
          + Beancount는 평문 도구로 스크립팅에 더 적합함
          + 평문 형식은 초기 작업이 더 필요하지만 익숙해지면 매우 유용함
     * 스웨덴의 프리랜서 컨설턴트로서 GnuCash를 여러 번 검토했으나 맞지 않음
          + 스웨덴 경제와 세무 서비스에 맞지 않음
          + 간단한 프로그램으로 필요한 숫자를 생성하여 세무 서비스의 온라인 앱에 수동으로 입력함
     * 대학 졸업 후 첫 몇 년 동안 GnuCash를 사용하여 예산을 관리함
          + 영수증을 꼼꼼히 기록하여 모든 것을 조정함
          + 많은 작업이 필요했음
     * GnuCash를 사용하다가 숫자가 맞지 않는 문제 발생
          + 모든 거래가 올바르게 기록되었으나 보고서에 잘못된 숫자가 표시됨
          + Beancount로 이전 후 잘못된 환율로 기록된 거래를 발견함
          + 여러 통화를 관리하는 데 어려움이 있었음
     * GnuCash를 사용했으나 온라인 동기화 설정에 많은 시간을 소비함
          + 수동으로 다운로드하고 가져와야 하는 계정이 번거로웠음
          + Quicken Classic을 유료로 사용하며 온라인 계정 연결이 원활하게 작동함
"
"https://news.hada.io/topic?id=16954","소스에서 메모리 안전 취약점 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           소스에서 메모리 안전 취약점 제거

메모리 안전 취약점의 근원 제거

  역설적인 결과

     * 메모리 안전하지 않은 언어로 작성된 코드베이스가 증가할 때, 새로운 기능을 메모리 안전한 언어로 전환하면 메모리 안전 취약점이 크게 감소함
     * 이는 취약점이 시간이 지남에 따라 지수적으로 감소하기 때문임

  수학적 설명

     * 취약점의 수명은 지수 분포를 따름
     * 새로운 코드에서 취약점이 주로 발생하며, 시간이 지남에 따라 코드가 안전해짐
     * 5년 된 코드의 취약점 밀도는 새로운 코드보다 3.4배에서 7.4배 낮음

  안드로이드에서의 실제 사례

     * 2019년부터 안드로이드 팀은 새로운 개발을 메모리 안전한 언어로 전환하기 시작함
     * 2024년 현재, 메모리 안전 취약점이 76%에서 24%로 감소함
     * 메모리 안전 취약점이 감소하면서 전체 보안 위험도 감소함

  메모리 안전 전략의 진화

     * 1세대: 반응적 패치 - 취약점을 발견하고 수정하는 방식
     * 2세대: 사전적 완화 - 취약점의 악용을 어렵게 만드는 방식
     * 3세대: 사전적 취약점 발견 - 취약점을 미리 찾아내는 방식
     * 4세대: 고신뢰 예방 - 메모리 안전한 언어로 전환하여 취약점 발생 자체를 예방하는 방식

  고신뢰 예방의 장점

     * 방어자와 공격자 간의 끝없는 경쟁을 끊음
     * 메모리 안전 언어를 통해 보안성을 높이고 비용을 줄임
     * 코드의 정확성과 개발자의 생산성을 높임

  교훈에서 실천으로

     * 기존 메모리 안전하지 않은 코드를 모두 버리거나 다시 작성할 필요 없음
     * 상호 운용성을 개선하여 메모리 안전한 언어로의 전환을 가속화함
     * Rust와 C++, Rust와 Kotlin 간의 상호 운용성을 개선하는 도구 개발

  이전 세대의 역할

     * 사전적 완화와 탐지의 선택적 사용
     * 메모리 안전 코드로 전환하면서 완화와 탐지의 필요성이 줄어듦

  결론

     * 새로운 코드에서 메모리 안전한 언어를 사용하면 취약점이 지수적으로 감소함
     * 안드로이드에서의 6년 이상의 일관된 결과로 이 접근 방식의 효과가 입증됨

GN⁺의 정리

     * 메모리 안전 취약점을 줄이기 위해 메모리 안전한 언어로 전환하는 것이 중요함
     * 안드로이드 팀의 사례에서 메모리 안전 취약점이 크게 감소한 것을 확인할 수 있음
     * 기존 코드의 완전한 재작성 대신 상호 운용성을 개선하는 것이 실용적임
     * Rust와 같은 메모리 안전 언어를 사용하는 것이 보안성과 생산성을 동시에 높일 수 있음

        Hacker News 의견

     * 새로운 개발을 메모리 안전 언어로 전환하는 것이 의미 있는 개선을 가져올 수 있음
          + 모든 것을 포팅하는 것보다 훨씬 쉽고 저렴함
     * 기사에 있는 차트가 명확하고 간결함
          + 신중한 데이터 선택과 라벨링이 의도한 아이디어를 쉽게 전달할 수 있음
     * 취약점이 지수적으로 감소함
          + 새로운 코드에 집중하는 것이 중요함
          + 무차별적인 RiiR 프로젝트는 자원의 낭비임
          + Rust 전문가들이 추천하는 전략이 메모리 취약점을 최소화하는 데 가장 효과적임
     * Android 팀은 Rust 변경의 롤백 비율이 C++의 절반 이하임을 관찰함
     * 새로운 코드와 메모리 취약점 사이에 상관관계가 있음
          + 새로운 기능과 관련된 코드가 취약점에 더 집중됨
          + 오래된 코드는 실제 사용을 통해 엣지 케이스가 발견됨
     * 새로운 코드가 메모리 취약점을 유발한다고 단정짓기 어려움
          + Heartbleed 버그와 같은 고충격 취약점이 있음
     * 취약점은 지수적으로 감소함
          + 새로운 기능 추가를 중단하는 것이 보안에 더 좋을 수 있음
          + Windows LTSC가 가장 안전한 버전일 가능성이 있음
     * 안전한 코딩은 코드의 정확성과 개발자의 생산성을 향상시킴
          + 버그 발견을 코드 체크인 전에 이동시킴
          + Android 팀은 Rust 변경의 롤백 비율이 C++의 절반 이하임을 관찰함
     * Rust를 발견한 후 프로그래밍에 대한 열정을 되찾음
     * 메모리 안전 언어(MSL)로 Rust만 언급됨
          + Kotlin도 언급되었지만 Rust만큼 메모리 안전 기능이 강력하지 않음
     * 취약점 수명이 지수적으로 분포됨
          + 새로운 코드에서 메모리 안전성을 확보하는 것이 매우 가치 있음
          + 대규모 레거시 코드베이스에서도 유용함
     * 오래된 코드가 충분히 검토되지 않을 수 있음
          + 최근 커밋 로그를 더 자주 검토함
     * Mac과 Windows의 코드 작성 언어 차이
          + Mac은 메모리 안전한 Swift를 사용하고, Windows는 주로 C 또는 C++를 사용함
     * 취약점이 희귀해질수록 더 가치가 높아짐
          + 남은 취약점은 국가 행위자에 의해 고가치 타겟에 사용될 가능성이 있음
          + iOS의 Lockdown Mode와 같은 기능이 필요할 수 있음
          + 보안 인식 사용자는 보안 상자를 체크하여 성능 저하와 교환함
          + 공격을 감지하고 보안 팀에 분석을 위해 전송함
          + 사용자에게 경고를 보내고 공격이 감지되었음을 알림
          + 사용자 활동을 수동적으로 모니터링하는 대신 공격이 감지되면 사용자에게 알림
"
"https://news.hada.io/topic?id=16980","AMD, 첫 번째 소형 언어 모델 AMD-135M 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AMD, 첫 번째 소형 언어 모델 AMD-135M 공개

     * AMD는 첫 번째 소형 언어 모델 AMD-135M을 공개함
     * 이 모델은 AMD Instinct™ MI250 가속기를 사용하여 6700억 개의 토큰으로 훈련됨
     * 두 가지 모델로 나뉨: AMD-Llama-135M과 AMD-Llama-135M-code
          + AMD-Llama-135M 모델은 일반 데이터를 사용하여 6일 동안 6700억 개의 토큰으로 훈련됨
          + AMD-Llama-135M-code 모델은 추가로 200억 개의 코드 데이터 토큰으로 4일 동안 미세 조정됨
          + 이 모델의 훈련 코드, 데이터셋 및 가중치는 오픈 소스로 제공
     * Speculative Decoding 으로 추론 성능 최적화
          + 대형 언어 모델은 일반적으로 자회귀 접근 방식을 사용하여 추론함
          + 이 접근 방식의 주요 한계는 각 전진 패스에서 단일 토큰만 생성할 수 있다는 점임
          + 추측 디코딩의 도입으로 이 문제를 해결함
          + 작은 초안 모델을 사용하여 후보 토큰 세트를 생성하고, 이를 더 큰 목표 모델이 검증함
          + 이 접근 방식은 각 전진 패스에서 여러 토큰을 생성할 수 있게 하여 메모리 접근 소비를 크게 줄이고 속도를 크게 향상시킴
     * 추론 성능 가속
          + AMD-Llama-135M-code를 CodeLlama-7b의 초안 모델로 사용하여 추론 성능을 테스트함
          + MI250 가속기와 Ryzen™ AI 프로세서(NPU 포함)에서 추측 디코딩을 사용한 경우와 사용하지 않은 경우를 비교함
          + 특정 구성에서 추측 디코딩을 사용한 경우 속도 향상을 확인함
     * 다음 단계
          + AMD는 오픈 소스 참조 구현을 제공하여 AI 커뮤니티 내에서 혁신을 촉진
          + AMD-135M에 대한 자세한 내용은 기술 블로그에서 확인 가능
          + AMD Github 저장소에서 코드에 접근 가능
          + Hugging Face Model Card에서 모델 파일 다운로드 가능
          + AMD Developer Cloud에서 Instinct 가속기 카드 접근 신청 가능

GN⁺의 정리

     * AMD의 첫 번째 소형 언어 모델 AMD-135M은 AI 커뮤니티에 중요한 발전을 가져옴
     * 추측 디코딩을 통해 추론 성능을 크게 향상시킴
     * 오픈 소스 참조 구현을 통해 개발자들이 모델을 재현하고 다른 SLM 및 LLM을 훈련할 수 있도록 지원함
     * AI 분야에서 혁신을 촉진하고 더 포괄적이고 윤리적인 기술 발전을 목표로 함

   범용 인공지능으로 발전하려면, 차원적으로 도약할 계기가 있어야 하는데, 그런 계기가. 바로 교육입니다.
"
"https://news.hada.io/topic?id=16939","NIST(미국 국립표준기술연구소), 특정 비밀번호 문자 구성 요구 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                NIST(미국 국립표준기술연구소), 특정 비밀번호 문자 구성 요구 금지

     * NIST는 ""다양한 문자 스타일로 구성된 비밀번호 작성 요구 사항""과 ""주기적인 비밀번호 변경 요구 사항""을 ""금지""할 예정. 이는 사이버 보안 약점으로 간주됨

비밀번호 요구사항

     * 검증자와 CSP는 비밀번호의 길이가 최소 8자 이상이어야 하며, 최소 15자 이상이 되도록 요구하는 것이 좋음 SHALL
     * 검증자와 CSP는 최대 비밀번호 길이를 최소 64자 이상 허용하는 것이 좋음 SHOULD
     * 검증자와 CSP는 비밀번호에 모든 ASCII 인쇄 가능 문자와 공백 문자를 허용하는 것이 좋음 SHOULD
     * 검증자와 CSP는 비밀번호에 Unicode 문자를 허용하는 것이 좋음. 비밀번호 길이를 평가할 때 각 Unicode 코드 포인트는 단일 문자로 계산되어야 함 SHOULD
     * 검증자와 CSP는 비밀번호에 대해 다른 구성 규칙(예: 다양한 문자 유형의 혼합 요구)을 부과해서는 안 됨 SHALL NOT
     * 검증자와 CSP는 사용자에게 주기적으로 비밀번호를 변경하도록 요구해서는 안 됨. SHALL NOT 그러나 인증자의 침해 증거가 있는 경우 검증자는 변경을 강제해야 함 SHALL
     * 검증자와 CSP는 가입자가 인증되지 않은 청구인이 액세스할 수 있는 힌트를 저장하도록 허용해서는 안 됨 SHALL NOT
     * 검증자와 CSP는 비밀번호를 선택할 때 가입자에게 지식 기반 인증(KBA) 또는 보안 질문을 사용하도록 프롬프트해서는 안 됨 SHALL NOT
     * 검증자는 제출된 비밀번호 전체를 검증해야 함(즉, 잘라내지 않아야 함) SHALL

다른 멘션들

     * 기존 규칙의 문제점: 이전에는 유니코드 문자가 특정 플랫폼에서 제대로 저장되지 않는 문제가 있었음. 하지만 현재는 유니코드가 더 많은 엔트로피를 제공함
     * 새로운 요구 사항: 새로운 NIST 가이드라인에서는 임의의 유니코드 허용 요구 사항이 포함될 예정. 이는 국제화(i18n)를 주장하는 소프트웨어에 필수적임
     * 비밀번호 구성 규칙: NIST는 비밀번호 구성 규칙을 ""권장하지 않음""에서 ""허용하지 않음""으로 변경. 이는 보안 강화를 위한 중요한 단계임
     * 산업 표준과의 충돌: 일부 산업 표준(예: PCI, ISO 27001:2022)은 여전히 NIST와 상충되는 요구 사항을 가지고 있음. 이는 기업들이 새로운 NIST 규칙을 따르기 어렵게 만듦
     * 비밀번호 관리자 사용: 비밀번호 관리자는 웹사이트뿐만 아니라 다양한 시스템에서 유용함. 하드웨어 토큰이나 생체 인증을 통해 마스터 비밀번호를 입력하는 방법도 있음.
     * 비밀번호 길이 제한: 비밀번호 길이 제한은 인증 시스템의 자원 고갈을 방지하기 위한 것. 하지만 너무 짧은 비밀번호 제한은 보안에 심각한 제약을 줄 수 있음.

GN⁺의 정리

     * NIST의 새로운 비밀번호 규칙은 기존의 불필요하고 해로운 보안 요구 사항을 제거하여 보안을 강화함.
     * 유니코드 비밀번호 허용은 국제 사용자들에게 큰 도움이 될 것임.
     * 일부 산업 표준과의 충돌로 인해 기업들이 새로운 규칙을 따르기 어려울 수 있음.
     * 비밀번호 관리자는 다양한 시스템에서 유용하며, 하드웨어 토큰을 통해 보안을 강화할 수 있음.
     * 비밀번호 길이 제한은 자원 고갈을 방지하기 위한 것이지만, 너무 짧은 제한은 보안에 문제를 일으킬 수 있음.

   대한민국에 흔한 보안
     * 비밀번호는 8~12자까지 (최소는 문제가 아니지만 대체 최대 길이는 왜 존재하는 것인가)
     * ID 는 영문/숫자 혼합 강제
     * 특수문자는 (...)만 강요 (특히 SQL 인젝션 유발하는 기호 사용을 의도적으로 차단)
     * 비밀번호는 30일마다 변경 강제 정책 (대기업일 수록... 최악으로는 15일마다 한 번 변경 요구하는 곳도 있음)
     * OTP 같은 다단계 인증을 요구하는 국내 사이트는 거의 없는 수준
       (포털엔 있기라도 하지만 커뮤니티 사이트는 디씨 말고는 없는 수준)

   최대 길이가 짧은 곳은 좀 그렇더군요.
   사실 비밀번호는

   조아백반0212341234점심특선1인분카드요

   처럼 '이미 있는 단어'의 조합이라 할지라도 여러개가 이어지면 난이도가 급상승하거든요.

   저희 회사도 올해 초 지침이 변경되어 아무 영단어 4개 이상 나열로 바뀌었습니다.
   그래서 아침마다 명언을 타이핑하며 하루를 시작합니다.

   그 개발문화 그나마 낫다는 쿠팡도 아무 시각적 피드백 없이 조용히 비밀번호 길이를 16자로 제한하더라구요. 비밀번호 변경 메일도 없었고 아무 이유없이 로그인이 안돼서 해킹당한 건 줄 알았습니다

   개발 분야에도 여러 영역이 있어서인가봐요. 보안이나 접근성은 다뤄지지 않는 대표적인 분야인 것 같아요. 다크 패턴에 쏟는 노력의 조금이라도 ...

   지금 확인해보니 상한이 20자로 조정됐네요. 하지만 여전히 회원가입 웹페이지에서는 비밀번호에 대한 어떠한 안내문이나 시각적 피드백도 없이 비밀번호 길이를 제한하고 로그인 웹페이지에서는 아무런 제한이 없습니다. 반면에 안드로이드 앱 비밀번호 변경 페이지에서는 비밀번호 규칙을 정확히 명시하고 있습니다. 안드로이드 팀과 웹 프론트엔드 팀끼리 손발이 안 맞는 것 같네요

   전형적인 사일로화의 현상이라 생각합니다

   뭐하나 제대로 지켜지는게 없네요...

   비밀번호 최대길이가 12자 정도로 짧거나 특수기호를 허용하지 않는 사이트들은 사용하기 꺼려집니다. 보안에 신경쓰지 않는다는 신호중 하나로 보입니다

        Hacker News 의견

     * NIST는 2017년부터 비밀번호 구성 규칙을 완화하는 지침을 제공해 왔음
          + ""검증자는 암기된 비밀번호에 대해 다른 구성 규칙을 강요하지 말아야 함""
          + ""검증자는 임의로 비밀번호를 변경하도록 요구하지 말아야 함""
          + ""인증자가 손상된 증거가 있을 경우 변경을 강제해야 함""
     * NIST는 정책을 설정하지 않지만, 많은 다른 정책들이 NIST 800-63을 참조함
     * 웹사이트 가입 시 ""좋은 비밀번호는 a, b, c를 사용해야 한다""는 규칙이 매우 짜증났음
          + 많은 사이트 개발자들이 좋은 비밀번호에 대해 잘 모르는 것 같음
     * NIST는 '보안 질문'도 금지함 (예: ""어머니의 성함은?"")
     * NIST는 몇십 년 동안 잘못된 비밀번호 지침을 제공하다가 이제서야 더 합리적인 해결책으로 변경함
          + 이전의 잘못된 지침으로 인해 많은 소프트웨어가 구축되었고, 이를 변경하는 데 오랜 시간이 걸릴 것임
     * bcrypt 문제로 인해 ""제출된 비밀번호 전체를 검증해야 한다""는 요구사항이 생긴 것 같음
     * NIST는 최대 비밀번호 길이를 64자로 제안함 (많은 사이트는 20자로 제한하여 암호 구문 사용이 불가능했음)
     * 한 사용자의 이야기:
          + 아내의 은행은 지난달까지 숫자 ID를 로그인으로 사용했음
          + 이번 달부터 사용자 이름을 선택하도록 강제했으며, 대문자와 숫자를 포함해야 했음
          + 이 은행은 유럽에서 8번째로 큰 은행임
     * 특정 문자를 요구하는 것이 엔트로피를 증가시키는지 감소시키는지에 대한 논쟁이 있음
          + 특정 문자를 요구하면 선택할 수 있는 문자의 범위가 줄어들어 엔트로피가 감소함
          + 대부분의 사용자는 약한 비밀번호를 선택하므로 특정 문자를 요구하면 엔트로피가 증가할 수 있음
          + 그러나 대부분의 사용자는 쉽게 추측 가능한 위치에 문자를 배치하기 때문에 엔트로피가 여전히 감소할 것임
     * NIST가 평문 비밀번호를 PAKE로 대체하고, W3C가 이를 위한 메커니즘을 마련하기를 기다리고 있음
     * 원본 링크: NIST SP 800-63b

   이거 보시는 UI 관계자 분들 계시면 패스워드 입력시에 화면에 출력되는 가상 키보드로 입력하는 걸 강제하는 UI도 제발 없애주시기 바랍니다.
   처음 나온 건 패스워드가 키로거에 의해 노출되는 걸 방지하기 위해서였겠지만, 요즘은 이곳 저곳에 널린 카메라에 찍혀서 패스워드가 노출될 위험이 훨씬 큽니다.
   볼 때마다 당황스러운 UI인데 아직도 유지되고 있는게 이상해요.
   아마도 키로거 때문에 만들어졌다는 건 이미 망각했고, 그냥 다들 그렇게 하니까 따라 하는게 아닐까 의심됩니다.

   정부 보안 가이드라서 그래요. 가상 키보드 넣고 싶은 업체는 아무도 없을거에요.

   각종 표준 인증에도 가상 키보드 필수 사항들이 있는 것들이 많습니다. 그게 생각보다 세부 요구 사항이 많은데, 이걸 구현한 기존 업체 제품(sdk)을 쓰지 않으면 심사에 시간이 더 걸리거나 리젝되기도 해요. 사실 이건 보안 업체 카르텔이 아닐까 싶을 정도죠.

   아직도 틀니 끼신 분들은 옛날식 보안이 최고로 안전하다 믿고 계십니다.
   내가 검증하지 않은 것은 검증된 게 아니라는 게 그들 사고방식이죠.
   시장은 그 틀니끼신 분을 따라가게 되어 있고요. 공공은 특히 더욱 더.

   공공기관뿐 아니라 네이버, 쿠팡 같은 기술 기반 회사들도 그러고 있어서 더 답답합니다.

   거기는 정부에서 그러라고 명령하니까 마지못해 따르고 있는 거 아닐까요?
"
"https://news.hada.io/topic?id=16970","매기 스미스 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               매기 스미스 사망

Maggie Smith, Star of ‘Downton Abbey,’ ‘Harry Potter,’ Dies at 89

     * 영국의 무대 및 스크린 배우 Maggie Smith가 89세의 나이로 런던에서 사망함
     * 그녀의 아들 Toby Stephens와 Chris Larkin은 성명을 통해 ""Maggie Smith가 병원에서 평화롭게 세상을 떠났다""며 ""가족과 친구들이 함께 있었다""고 전함
     * 그녀는 두 아들과 다섯 명의 손주를 남김

  관련 이야기

    스트리밍이 극장에 해를 끼치는가? 이 설문조사는 도움이 된다고 말함

    Netflix의 Ted Sarandos는 ""사람들의 취향이 다양하기 때문에 모든 콘텐츠를 사랑해야 한다""고 말함

     * Smith는 70대 후반에 ""Downton Abbey""에서 주연을 맡아 새로운 팬층을 형성함
     * ""Harry Potter"" 시리즈에서 Professor Minerva McGonagall 역할로 출연함
     * 그녀는 고전 및 현대 연극에서 뛰어난 연기를 선보였으며, 여러 세대의 관객들에게 사랑받음
     * 대표작으로는 ""Mary, Mary"", ""Hedda Gabler"", ""Othello"", ""Private Lives"", ""Night and Day"", ""Lettice and Lovage"" 등이 있음
     * 영화에서는 ""The Prime of Miss Jean Brodie"", ""California Suite"", ""A Room With a View"", ""Travels With My Aunt"", ""Hot Millions"", ""A Private Function"", ""Gosford Park"", ""The Best Exotic Marigold Hotel"" 등이 있음
     * 2015년에는 Alan Bennett의 희곡을 각색한 ""The Lady in the Van""에 출연함
     * 1990년에 Dame Commander of the British Empire로 임명됨
     * 그녀의 연기는 섬세함과 과장된 몸짓으로 유명했으며, 여러 비평가들로부터 찬사를 받음
     * Margaret Smith는 Essex의 Ilford에서 태어나 Oxford School for Girls와 Oxford Playhouse School에서 연극을 공부함
     * 1952년부터 Oxford U. 무대에서 공연을 시작함
     * 1956년에는 Broadway 쇼 ""New Faces of 1956""에 출연함
     * 이후 ""The Stepmother"", ""The Double Dealer"", ""As You Like It"", ""Richard II"", ""The Merry Wives of Windsor"" 등의 작품에 출연함
     * 1960년에는 Olivier와 함께 Eugene Ionesco의 ""Rhinoceros""에 출연함
     * ""The Private Ear/The Public Eye""로 첫 Evening Standard 상을 수상함
     * ""The Prime of Miss Jean Brodie""로 오스카상을 수상함
     * Stratford Festival에서 ""Antony and Cleopatra"", ""The Way of the World"", ""A Midsummer Night’s Dream"", ""As You Like It"" 등에 출연함
     * 1980년대 중반에는 ""A Private Function"", ""A Room With a View"" 등의 영화로 다시 주목받음
     * ""Lettice and Lovage""로 Tony 상을 수상함
     * Graves' disease로 건강이 악화되었지만, 여전히 인상적인 연기를 선보임
     * 2000년대에는 ""Gosford Park"", ""Divine Secrets of the Ya-Ya Sisterhood"", ""Becoming Jane"", ""Keeping Mum"", ""Nanny McPhee Returns"" 등의 영화에 출연함
     * ""Harry Potter"" 시리즈에서 Minerva McGonagall 역할로 대중에게 널리 알려짐
     * 74세에 유방암 진단을 받았지만 완치됨
     * 2009년 ""From Time to Time"", 2011년 애니메이션 ""Gnomeo and Juliet"", ""The Best Exotic Marigold Hotel"" 및 속편 등에 출연함
     * 2012년에는 Dustin Hoffman이 감독한 ""Quartet""에 출연함
     * Smith는 1967년에 배우 Robert Stephens와 결혼했으며, 이혼 후 1976년에 작가 Beverly Cross와 재혼함
     * 그녀는 두 아들, Christopher Larkin과 Toby Stephens, 그리고 손주들을 남김

GN⁺의 정리

     * Maggie Smith는 다양한 연극과 영화에서 뛰어난 연기를 선보이며 여러 세대의 팬들에게 사랑받아 왔음
     * 그녀의 연기는 섬세함과 과장된 몸짓으로 유명했으며, 여러 비평가들로부터 찬사를 받음
     * ""Downton Abbey""와 ""Harry Potter"" 시리즈에서의 역할로 새로운 팬층을 형성함
     * 그녀의 사망은 연극과 영화계에 큰 손실로 다가옴
     * 비슷한 기능을 가진 배우로는 Judi Dench와 Diana Rigg가 있음

        Hacker News 의견

     * Maggie Smith와 Michelle Dockery는 Downton Abbey에서 뛰어난 연기를 보여줌
          + 두 캐릭터는 항상 다른 사람들보다 두세 걸음 앞서 있었음
          + Robert Crawley가 명목상 모든 것을 책임졌지만, 실제로는 Violet과 Mary가 사회적 계약을 이해하고 모든 것을 조종했음
          + 마지막 회에서 Violet이 Mary에게 저택의 미래를 넘기는 장면이 적절했음
     * Maggie Smith는 영국 무대와 스크린에서 중요한 존재였음
          + Dame Judi Dench가 Diana Riggs의 사망 이후 그 황금 세대의 마지막 인물 중 하나임
     * Gosford Park을 다시 보면서 차이나 찻잔에 진을 마실 시간임
     * 오늘 아침에 검은 고양이를 봤는데, 그녀인 것 같았음
     * 그녀는 정말 훌륭한 배우였음
          + Washington Post에도 그녀의 사망을 알리는 기사가 있음
          + 기사 링크: Washington Post 기사
     * 그녀의 사망 소식이 기술 세계와 관련이 없는데도 HN의 첫 페이지에 오른 것은 그녀의 영향력을 보여줌
          + 매우 적은 사람들이 그 수준에 도달할 수 있을 것임
          + 그녀는 Downton에서 최고의 캐릭터였음
     * 그녀의 사망 소식이 슬픔
          + 그녀는 항상 훌륭했음, 내가 그 쇼나 영화를 좋아하지 않을 때조차도
     * Maggie Smith는 역대 최고의 배우 중 한 명임
          + 이 쇼를 보지 않은 사람들에게 강력히 추천함
          + 링크: IMDB 링크
     * 1960년대를 이해하려면 그녀의 영화 ""The Prime of Miss Jean Brodie""를 봐야 함
          + 사회적 규범과 반란의 긴장을 포착함
          + 자연스러운 결과를 주의 깊게 보면 알 수 있음
          + 트레일러 링크: YouTube 트레일러
     * ""The Best Exotic Marigold Hotel""도 그녀가 출연한 좋은 영화 중 하나임
          + 훌륭한 출연진과 함께함
"
"https://news.hada.io/topic?id=16944","자율주행 경쟁에서 AI 교육 플랫폼까지: ex-Tesla, ex-OpenAI 안드레이 카파시 인터뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        자율주행 경쟁에서 AI 교육 플랫폼까지: ex-Tesla, ex-OpenAI 안드레이 카파시 인터뷰

   자율주행 기술 현황
     * 웨이모와 테슬라가 선두를 다투고 있음
     * 웨이모는 현재 샌프란시스코에서 상용 서비스 중
     * 테슬라가 푸는 문제는 소프트웨어적인 문제고 웨이모가 푸는 문제는 하드웨어적인 문제
     * 소프트웨어적인 문제가 훨씬 풀기 쉽고, 테슬라는 이미 규모에서 웨이모와 비교가 안됨
     * 카르파티는 10년 내 테슬라가 우위를 점할 것으로 전망

   AI 모델 발전 방향
     * 트랜스포머 모델이 AI 연구의 핵심
     * 인터넷에서 찾을 수 있는 데이터는 이미 다 학습해버려서 현재는 데이터셋과 loss function 최적화에 초점
     * 인터넷에서 찾을 수 있는 데이터는 사실 인간 사고의 결과물, 지금 부족한 데이터는 인간의 머릿속에서 여러 단계로 일어나는 사고 과정에 관한 것
     * 트랜스포머 모델로 사고 과정을 역으로 만들어가는 합성 데이터 생성이 중요해질 것으로 예상
     * 1억 개 미만의 파라미터로도 강력한 AI 모델 구현이 가능해질 것 (GPT4 1조8천억 개 파라미터로 추정)

   AI와 인간의 융합
     * AI를 외부 대뇌피질로 활용 가능
     * 장기적으로 AI와 인간의 경계가 모호해질 것
     * 개인화된 AI 비서나 도구 형태로 발전 예상

   AI 교육 플랫폼 (Eureka Labs)
     * 카파시가 개발 중인 AI 기반 교육 플랫폼
     * AI를 활용해 개인화된 학습 경험 제공 목표
     * 2024년 초 출시 예정, 첫 강의는 LLM101n (https://github.com/karpathy/LLM101n)
     * 대학생 수준의 기술 교육에 초점
"
"https://news.hada.io/topic?id=16991","개빈 뉴섬, SB 1047 법안 거부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          개빈 뉴섬, SB 1047 법안 거부

        Hacker News 의견

     * Newsom의 결정이 훌륭하다는 의견
          + 최근 몇 년간 캘리포니아 입법부가 매우 활발하지만, 종종 유행을 따르는 경향이 있음
          + Wiener의 주택 정책을 지지하지만, 이 법안은 잘못된 방향이었음
          + 이 법안은 오픈 모델에 대한 공격이었으며, OpenAI와 Anthropic 같은 시장 리더들은 크게 신경 쓰지 않았음
          + Musk와 같은 후발주자들이나 통제할 수 없는 AI를 반대하는 사람들이 지지했음
     * 주의 운영 방식에 대한 비판
          + 민주당이 지배하는 입법부가 모든 법안을 통과시키고, 주지사가 가장 극단적인 20%를 거부해야 혼란을 막을 수 있음
          + 이 AI 법안은 최악은 아니었음
          + ""입법자들을 투표로 교체하라""는 의견이 있지만, 공화당을 선택할 수 없고, 대부분의 경우 일반 투표에서 선택의 여지가 없음
          + Newsom이 현명하게 대처하고 있지만, 시스템 자체가 나쁨
     * SB 1047 법안에 대한 설명
          + 특정 크기 이상의 모델에 대해 오픈 가중치를 제공하는 것을 불법으로 만드는 법안
          + 고객이 모델을 훈련시키지 않도록 확인하지 않고는 충분한 컴퓨팅 파워를 판매하는 것을 불법으로 만듦
          + 모델이 재난을 일으키지 않도록 감사 요구사항을 의무화함
     * 관련 기사 및 의견
          + OpenAI, Anthropic, Google 직원들이 캘리포니아 AI 법안을 지지함
          + Y Combinator, AI 스타트업들이 캘리포니아 AI 안전 법안을 반대함
          + 캘리포니아 AI 법안이 안전 옹호자와 개발자들 사이에서 논란이 됨
          + 캘리포니아 상원이 SB 1047을 통과시킴
          + 캘리포니아 주민들이 AI 법안 SB 1047에 대해 입법자들에게 연락할 것을 촉구함
          + SB 1047에 대한 오해가 있음
          + 캘리포니아 상원이 OpenAI 경쟁자를 빠르게 제거하기 위해 법안을 추진함
          + SB-1047이 오픈 소스 AI를 억제하고 안전성을 감소시킬 것임
          + SB 1047에 대한 행동 촉구
          + 제안된 캘리포니아 SB 1047에 대한 의견
     * AI 컴퓨팅이 캘리포니아 외부에서 발생할 가능성에 대한 우려
          + 소노마에서 CAFOs에 대한 중요한 카운티 선거가 진행 중이며, 환경적 진전이 지역적으로 이루어질 수 있지만, 문제를 규제가 느슨한 다른 주로 수출할 수 있음
     * 법안의 위험성에 대한 과장 여부 확인
          + 법안 텍스트를 읽고 확인한 결과, ""중대한 피해""의 정의가 포함됨
          + 화학, 생물학, 방사선, 핵무기 사용으로 인한 대규모 사상자 발생
          + 사이버 공격으로 인한 대규모 사상자 또는 5억 달러 이상의 피해
          + AI 모델이 제한된 인간 감독 하에 작동하여 사망, 중대한 신체 상해, 재산 손실을 초래하는 경우
          + 공공 안전과 보안에 심각한 피해를 초래하는 기타 중대한 피해
     * 법안의 문제점에 대한 의견
          + 규제 포획의 예시로, 제품을 상품화한 사람들을 불법으로 만드는 것
          + Linux를 불법으로 만들어 모두가 Microsoft와 Apple을 사용하게 만드는 것과 같음
          + 어리석은 법안이었으며, 정치인이 현명한 결정을 한 것에 대해 긍정적임
          + 기사 제목에 논리적 오류가 있음
"
"https://news.hada.io/topic?id=16952","git absorb - 자동화된 "git commit --fixup"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 git absorb - 자동화된 ""git commit --fixup""

     * 페이스북이 만든 hg absorb의 git용 포팅 버전
          + hg absorb는 최근 몇 년간 버전 관리 시스템에서 가장 멋진 워크플로우 개선이라고 할 수 있음
          + 작업 디렉토리에 커밋되지 않은 변경 사항이 draft changeset 위에 있을 때, hg absorb를 실행하면 커밋되지 않은 수정 사항이 자동으로 적절한 draft ancestor changeset에 흡수됨
          + 커밋을 생성하거나 수동으로 history 수정 규칙을 만들지 않고도 hg histedit + ""roll"" 작업을 수행할 수 있음
          + 명령어는 수정된 라인을 보고, 해당 라인을 수정한 changeset을 찾아, 커밋되지 않은 변경 사항을 포함하도록 해당 changeset을 수정함
          + 충돌 없이 변경 사항을 만들 수 없으면 커밋되지 않은 상태로 남음
          + 이 워크플로우는 리뷰 피드백을 적용하는 것과 같은 작업에 매우 유용함. 파일 변경 사항을 만들고, hg absorb를 실행하면 변경 사항과 커밋 간의 매핑이 자동으로 정리됨. 마법 같은 기능임

git absorb 사용 시나리오

     * 몇 개의 커밋이 있는 feature 브랜치가 있음
     * 팀원이 브랜치를 리뷰하고 몇 가지 버그를 지적함
     * 버그 수정 사항이 있지만, atomic 커밋을 믿기 때문에 fixes라는 불투명한 커밋에 모두 넣고 싶지 않음
     * git commit --fixup을 위해 커밋 SHA를 수동으로 찾거나 수동 대화형 rebase를 실행하는 대신 다음을 수행:
         1. git add $FILES_YOU_FIXED
         2. git absorb --and-rebase
     * git absorb는 어떤 커밋을 안전하게 수정할 수 있는지, 어떤 staged 변경 사항이 각 커밋에 속하는지 자동으로 식별함
     * 그런 다음 이러한 변경 사항에 대한 fixup! 커밋을 작성함
     * --and-rebase 플래그를 사용하면 이러한 fixup 커밋이 해당 커밋에 자동으로 통합됨
     * 신뢰하지 않는 경우 출력을 수동으로 확인한 다음, git의 내장 autosquash 기능을 사용하여 fixup을 feature 브랜치에 통합할 수 있음

  설치

     * 최신 태그 릴리스에서 아티팩트를 다운로드하여 설치 가능
     * Windows, MacOS, Linux용 아티팩트 제공

  사용법

    1. 흡수할 변경 사항을 git add로 추가
    2. git absorb 실행
    3. 결과에 만족하면 git rebase -i --autosquash 실행
    4. 만족하지 않으면 git reset --soft로 이전 상태로 복구

  How it works (roughly)

     * git absorb는 두 패치 P1과 P2가 교환 가능한지 확인함
     * 기본적으로 마지막 10개의 커밋을 고려함
     * 인덱스의 각 덩어리에 대해, 해당 덩어리가 마지막 커밋과 교환 가능한지 확인함
     * 교환 불가능한 커밋을 찾으면, 해당 덩어리를 fixup 커밋으로 변환함

  Configuration

    Stack size

     * 기본적으로 마지막 10개의 커밋을 고려함
     * 더 많은 커밋을 고려하려면 .gitconfig에 maxStack 값을 설정

    One fixup per fixable commit

     * 기본적으로 각 흡수 가능한 덩어리에 대해 별도의 fixup 커밋을 생성함
     * -F 플래그를 사용하여 동일한 커밋에 흡수되는 모든 덩어리에 대해 하나의 fixup 커밋만 생성 가능

    Auto-stage all changes if nothing staged

     * 기본적으로 스테이지된 파일만 고려함
     * 스테이지된 변경 사항이 없을 때 모든 변경 사항을 자동으로 스테이지하려면 autoStageIfNothingStaged 설정

    Fixup target always SHA

     * 기본적으로 fixup 커밋 메시지는 대상 커밋의 요약을 가리킴
     * 항상 대상의 SHA를 가리키도록 설정 가능

  TODO

     * 강제 플래그 구현
     * 원격 기본 브랜치 확인 구현
     * 개별 안전 검사 비활성화를 위한 작은 강제 플래그 추가
     * 모든 오류 출력이 사용자에게 유용하도록 보장
     * 성공 시 더 많은 로그 출력
     * 더 많은 테스트 추가
     * 스택 및 교환 세부 사항 문서화
     * 더 많은 교환 사례 추가
     * 동시에 모든 덩어리를 메모리에 로드하지 않도록 구현
     * 동시 수정으로부터 보호하기 위한 인덱스 잠금 구현

GN⁺의 정리

     * git absorb는 Facebook의 hg absorb에서 포팅된 도구로, 커밋을 자동으로 수정하여 개발 워크플로우를 개선함
     * 리뷰 피드백을 적용할 때 매우 유용하며, 수동으로 커밋을 찾거나 수정할 필요 없이 자동으로 처리해줌
     * 이와 유사한 기능을 제공하는 다른 도구로는 git-autofixup이 있음. 커밋 메시지 기반으로 fixup 커밋을 자동 생성해주는 도구임
     * 장점은 코드 리뷰 피드백 반영이 쉬워지고, 커밋 히스토리가 더 깔끔해진다는 점. 단점은 자동화에 너무 의존하다 보면 예상치 못한 결과가 발생할 수 있다는 점

        Hacker News 의견

     * git absorb를 사용하는 사람들은 이 도구가 매우 유용하다고 생각함
          + 여러 커밋이 포함된 PR이 CI에서 실패할 때, git absorb는 자동으로 올바른 커밋을 찾아줌
          + 수동으로 커밋을 찾는 번거로움을 덜어줌
          + 가짜 긍정은 거의 없고, 가짜 부정이 발생하면 수동으로 처리하면 됨
          + PR이 하나의 커밋이어야 한다는 의견도 있지만, 항상 그런 것은 아님
          + GitHub에서 논리적으로 작은 커밋을 선호함
     * git commit --fixup을 위한 별칭을 사용하여 만족함
          + 현재 브랜치의 커밋을 보여주고 fzf를 통해 선택할 수 있음
          + 선택한 커밋을 기반으로 fixup 커밋을 생성함
     * git absorb를 사용해봤지만, 부모 커밋을 잘못 선택하는 경우가 많았음
          + 수동으로 커밋을 찾는 것이 더 나았음
          + 커밋 기록을 완전히 제어하는 것을 선호함
          + 이 도구는 너무 많은 마법 같음
     * git --fixup과 git rebase --autosquash를 사용해본 적은 없지만 유용해 보임
          + git-absorb는 한 단계 더 나아가는 것 같음
          + README에서 특정 상황에서 정확히 무엇을 할지 명확하지 않음
     * 커밋과 기록을 수정하는 것에 대해 회의적임
          + 실수를 수정하고 새로운 커밋을 만들고 계속 진행하는 것이 좋음
     * magit을 사용하여 쉽게 fixup 커밋을 만들 수 있음
          + Emacs를 사용하지 않더라도 magit을 사용하기 위해 유지할 가치가 있음
          + vscode 사용자에게는 Edamagit이 좋음
     * git commit --fixup과 git rebase --autosquash에 대해 알게 됨
          + 인터랙티브 git rebase는 가장 좋아하는 Git 도구임
          + 완벽한 논리적 원자 커밋을 만드는 데 도움이 됨
          + 그러나 이러한 기록 편집이 때때로 역효과를 낼 수 있음
     * git rebase -i는 다양한 요구를 충족시킴
          + squash, fixup, reword, delete 커밋을 인터랙티브하게 할 수 있음
          + git을 사용하는 모든 사람이 배워야 함
     * 초청결한 커밋 기록에 집착하는 것을 이해하지 못함
          + 커밋 기록을 그렇게 자주 자세히 확인하는지 의문임
     * 마지막 10개의 커밋 중 충돌 없는 수정 가능한 커밋을 선택하는 것이 이해되지 않음
          + 종종 충돌을 해결하면서 fixup^를 자주 사용함
          + 자동으로 타겟 커밋을 선택하는 것에 대해 신뢰하지 않음

     * 초청결한 커밋 기록에 집착하는 것을 이해하지 못함
          + 커밋 기록을 그렇게 자주 자세히 확인하는지 의문임

   이 댓글 찔리네요. fixup / autosquash 를 조금 찍먹 해보았는데, 나만 신경쓰는건가 싶어서 조금 현타가 오긴 하네요...
"
"https://news.hada.io/topic?id=16979","소니, 유비소프트 스캔들로 인한 캘리포니아의 기만적 디지털 상품 판매 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               소니, 유비소프트 스캔들로 인한 캘리포니아의 기만적 디지털 상품 판매 금지

    캘리포니아, 디지털 상품의 기만적 판매 금지

     * 캘리포니아의 새로운 법: 캘리포니아는 최근 '사라지는 미디어'의 기만적 판매를 금지하는 첫 번째 주가 되었음. 주지사 Gavin Newsom이 AB 2426 법안에 서명하여, 소비자가 일시적인 라이선스를 통해 콘텐츠에 접근하는 것을 인지하지 못한 채 구매하는 것을 방지함.
     * 법안의 주요 내용:
          + 디지털 상품을 구매할 때, 구매자가 라이선스를 받는 것인지 소유권을 얻는 것인지 명확히 표시해야 함.
          + 이러한 정보는 서비스 약관에 묻히지 않고, 별도로 명확하게 표시되어야 함.
          + '구매'나 '소유'라는 용어를 사용할 때는 실제로 소유권을 부여하는 경우에만 사용 가능함.
          + 무료 상품이나 구독 서비스는 예외로 함.

    Ubisoft와 Sony의 사례

     * 소비자 피해 사례: 법안은 Ubisoft가 비디오 게임 _The Crew_의 라이선스를 취소한 사례와 Sony가 Discovery TV 쇼에 대한 접근을 중단하려 했던 사례를 언급하며, 이러한 소비자 피해를 방지하기 위해 만들어짐.
     * 법안의 필요성: 디지털 미디어 판매가 증가하면서 소비자 보호의 필요성이 커졌음. 법안은 디지털 미디어 판매 시 소비자가 실제로 소유권을 얻는지 명확히 알 수 있도록 함.

    전문가 의견

     * 법안의 중요성: 미시간 대학교 법학 교수 Aaron Perzanowski는 이 법안이 소비자에게 디지털 미디어 구매 시 소유권이 아닌 접근 권한을 제공하는 것을 명확히 알리는 중요한 첫 걸음이라고 평가함.

    GN⁺의 정리

     * 기사 요약: 캘리포니아는 디지털 상품의 기만적 판매를 금지하는 법안을 통과시켰음. 이 법안은 소비자가 디지털 콘텐츠를 구매할 때 실제로 소유권을 얻는지 명확히 알 수 있도록 함.
     * 법안의 중요성: 디지털 미디어 판매가 증가하면서 소비자 보호의 필요성이 커졌음. 이 법안은 소비자가 디지털 미디어 구매 시 소유권이 아닌 접근 권한을 제공하는 것을 명확히 알리는 중요한 첫 걸음임.
     * 관련 사례: Ubisoft와 Sony의 사례를 통해 디지털 미디어의 기만적 판매가 소비자에게 어떤 피해를 줄 수 있는지 보여줌.
     * 추천: 디지털 미디어 소비자 보호를 위해 다른 주에서도 유사한 법안을 도입할 필요가 있음.

        Hacker News 의견

     * 좋은 소식임. 구매한 물건은 원하는 만큼 즐길 권리가 있음. 판매자가 다시 가져가면 대체품을 얻는 것이 윤리적임
     * 법은 다를 수 있지만, ""구매"" 버튼을 통해 산 것은 내 소유임. ""라이선스"" 대신 ""구매""라고 적힌 버튼을 본 적이 없음
     * DRM 없는 다운로드에 대한 예외가 있는 법안은 매우 환영할 만함. 큰 미디어 회사들의 기만적인 관행을 지적하는 것이 시급했음
          + DRM이 있는 미디어는 ""구매""가 아니라 ""정해지지 않은 기간 동안 대여""임
          + 법안이 DRM이 있는 모든 것에 대해 대여 용어를 명시적으로 요구하면 더 좋겠지만, 현재 상태로도 매우 환영할 만한 발전임
          + 전 세계 입법자들이 주목하고 따라가길 바람
     * Stop Killing Games 캠페인이 이 법안을 활용할 수 있을지 궁금함. 프랑스의 소비자 보호법을 활용하려고 하는 것처럼
     * 기사 내용을 오해했을 수도 있지만, 또 다른 ""쿠키"" 법처럼 보임
          + 미디어 회사들이 영구적으로 미디어에 접근할 수 있도록 강제하는 것이 아님
          + 미디어를 스토어에서 제거할 때 다운로드 가능한 사본을 제공하도록 강제하지 않음
          + ""구매"" 버튼을 ""접근 권한 얻기""로 바꾸고 법률 용어를 추가하는 것처럼 보임
          + 눈속임처럼 보임
     * 법의 정신과 일반적인 억지력에 따라 많은 집행이 필요할 것 같음
          + 이 분야의 구체적인 법은 UI에서 허점을 찾기 쉬울 것임
     * Steam과 GOG가 달라질지 궁금함
          + 또한 Kindle도
          + ""사용자가 오프라인에서 접근할 수 있는 영구 다운로드를 구매할 때 접근이 철회되지 않는다면 디지털 상품을 광고하는 것이 괜찮음""
          + Steam 게임을 오프라인에서 플레이했지만, 만료되어 게임 실행이 불가능해진 적이 있음
          + GOG에서는 그런 문제가 없음
          + 개별 게임마다 차이가 있을 수 있음
          + Kindle의 일부 책(Tor?)에는 ""디지털 권리 관리 없이 배포됨""이라는 문구가 있음
          + 이 책의 다운로드가 구매와 라이선스를 구분할 수 있을지 궁금함
     * 소유권은 항상 의미가 있었음. 구매한 것을 제한된 라이선스로 취급하는 것은 사기임. 기존 법 아래에서도
          + 이런 회사들을 책임지게 해야 함
     * 게임 산업이 결국 음악 로열티와 같은 방식으로 정착할 것 같음. 게임 회사들이 플레이당 일정 금액을 받을 것임
     * 놀라운 소식임. 사람들이 내 권리를 위해 싸워줘서 감사함
     * 훌륭함. 다른 곳에도 확장되길 바람
"
"https://news.hada.io/topic?id=16986","미국 특허상표청, 마블과 DC의 '슈퍼 히어로' 상표 취소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    미국 특허상표청, 마블과 DC의 '슈퍼 히어로' 상표 취소

     * 미국 특허상표청(USPTO)은 런던 만화 작가의 요청으로 마블과 DC가 공동 소유한 ""슈퍼 히어로"" 상표를 취소했음
     * 디즈니 산하 마블과 워너브라더스 산하 DC는 Superbabies Ltd의 상표 무효화 요청에 답변을 제출하지 않았음
     * Superbabies의 변호사 Adam Adler는 이번 판결이 ""우리 의뢰인뿐만 아니라 창의성과 혁신의 승리""라고 평가함
     * ""SUPER HEROES를 공공 영역에 확립함으로써, 우리는 그것을 모든 스토리텔러가 사용할 수 있는 영웅주의의 상징으로 보호한다""고 말함
     * 마블과 DC는 ""Super Hero""와 ""Super Heroes""라는 용어를 포함하는 4개의 연방 상표를 공동 소유하고 있음. 가장 오래된 상표는 1967년으로 거슬러 올라감
     * Richold는 슈퍼 히어로 아기 팀인 Super Babies를 특징으로 하는 만화를 씀
     * Richold에 따르면 Superbabies Ltd가 ""Super Babies"" 이름에 대한 미국 상표를 신청한 후 DC는 ""Super Hero"" 상표 침해를 주장하며 법적 조치를 위협했음
     * USPTO 기록에 따르면 마블과 DC는 수십 개의 슈퍼히어로 관련 상표 신청에 반대하기 위해 상표를 인용했음
     * Superbabies는 5월 USPTO에 마블과 DC의 상표를 취소해 줄 것을 청원함
     * 마블과 DC가 ""전체 장르에 대한 소유권을 주장할 수 없으며"", 두 경쟁사가 상표를 공동 소유할 수 없다고 주장함

GN⁺의 의견

     * 이번 판결은 창작자들에게 ""슈퍼 히어로""라는 용어를 자유롭게 사용할 수 있는 길을 열어주었다는 점에서 의미가 있음. 그동안 마블과 DC가 해당 용어에 대한 상표권을 행사하며 다른 작품에서의 사용을 제한해 왔기 때문임
     * 다만 이번 판결로 인해 ""슈퍼 히어로""라는 용어가 일반 명사화되면서 상품이나 콘텐츠의 차별화가 어려워질 수도 있음. 향후 창작자들은 고유한 세계관과 캐릭터 설정을 통해 자신만의 히어로물을 만들어내는 데 더욱 힘써야 할 듯함
     * 한편 이번 소송에서 마블과 DC는 별다른 대응을 하지 않은 것으로 보임. 두 회사가 ""슈퍼 히어로"" 상표에 큰 가치를 두고 있지 않다는 방증일 수도 있음
"
"https://news.hada.io/topic?id=17017","기술 부채 분류기술 부채 분류 (2018)

기술 부채의 분류

  소개

     * Bill ""LtRandolph"" Clark는 _LoL_의 Champions 팀의 엔지니어링 매니저로, 기술 부채에 대해 깊은 관심을 가지고 있음.
     * 기술 부채는 미래 개발자에게 비용을 초래하는 코드나 데이터로 정의됨.
     * 이 글에서는 Riot에서 경험한 다양한 기술 부채의 유형과 내부적으로 사용하는 모델을 소개함.

  메트릭스

   기술 부채를 평가하기 위해 세 가지 주요 축을 사용함: 영향, 수정 비용, 전염성.

    영향

     * 기술 부채가 플레이어와 개발자에게 미치는 영향.
     * 버그, 누락된 기능, 예기치 않은 동작 등.

    수정 비용

     * 기술 부채를 수정하는 데 필요한 시간과 리스크.
     * 단순한 오류는 몇 분 만에 수정 가능하지만, 깊이 뿌리박힌 문제는 몇 주 또는 몇 달이 걸릴 수 있음.

    전염성

     * 기술 부채가 얼마나 퍼질 수 있는지.
     * 다른 시스템과의 상호작용, 데이터 복사, 새로운 기능 구현에 영향을 미침.

  부채의 유형

    로컬 부채

     * 시스템 내부에서만 문제가 발생하며, 외부에는 영향을 미치지 않음.
     * 예: Jarvan의 Cataclysm.

      Cataclysm 메트릭스

     * 영향: 1 / 5
     * 수정 비용: 2 / 5
     * 전염성: 1 / 5

    맥가이버 부채

     * 두 개의 상충하는 시스템이 임시방편으로 결합된 경우.
     * 예: C++의 std::string과 Riot의 AString 클래스.

      std::string vs AString 메트릭스

     * 영향: 2 / 5
     * 수정 비용: 3 / 5
     * 전염성: -2 / 5

    기초 부채

     * 시스템의 깊은 곳에 자리 잡은 가정이 전체 시스템에 영향을 미치는 경우.
     * 예: _LoL_의 lua 스크립팅 언어 사용.

      BlockBuilder Lua 메트릭스

     * 영향: 4 / 5
     * 수정 비용: 4 / 5
     * 전염성: 4 / 5

    데이터 부채

     * 다른 유형의 기술 부채 위에 많은 콘텐츠가 쌓여 수정이 어렵고 위험한 경우.
     * 예: BlockBuilder 스크립팅 언어의 매개변수 이름 버그.

      매개변수 이름 버그 메트릭스

     * 영향: 2 / 5
     * 수정 비용: 2 / 5
     * 전염성: 4 / 5

  요약

     * 기술 부채를 평가할 때는 영향, 수정 비용, 전염성을 고려해야 함.
     * 전염성은 기술 부채가 퍼질 가능성을 나타내며, 이를 무시하면 큰 문제가 될 수 있음.
     * 기술 부채는 로컬 부채, 맥가이버 부채, 기초 부채, 데이터 부채의 네 가지 유형으로 분류할 수 있음.

GN⁺의 정리

     * 이 글은 기술 부채의 유형과 이를 평가하는 방법을 설명함으로써 개발자들이 더 나은 결정을 내릴 수 있도록 도움을 줌.
     * 기술 부채의 전염성을 강조하여, 문제를 조기에 해결하는 것이 중요함을 강조함.
     * 유사한 기능을 가진 다른 프로젝트로는 _Dota 2_와 _Overwatch_가 있음.

        Hacker News 의견

     * 인터페이스는 디자인에서 가장 중요한 요소 중 하나이며, 신중하게 고려해야 함
          + 아름다운 인터페이스는 시간이 주어지면 쉽게 개선할 수 있지만, 반대의 경우는 드묾
     * 창업자의 부채는 빠르고 좋은 기술을 제공하기 위해 창업자들이 만든 부채임
          + 많은 국가의 창립 문서도 이 범주에 속함
     * 이 글이 엔지니어링 매니저에 의해 작성된 것이 놀라움
          + 내부에서 승진한 매니저가 없고, 외부에서 채용하는 경향이 있음
     * 기술 부채에 대한 분류가 논의됨
          + 관련 링크: A Taxonomy of Technical Debt
          + 관련 링크: A Taxonomy of Tech Debt (2018)
     * 기술적 관점에서 훌륭한 기사임
          + ""명명법""이 더 적절한 표현일 수 있음
          + 각 예시가 매우 생각을 자극함
     * 기술 부채를 설명하는 데 ""Contagion""을 사용함
          + 훌륭한 설명임
     * 기술 부채는 미래 개발자가 비용을 지불해야 하는 코드나 데이터로 정의됨
          + 부채를 발생시킬 때 즉각적인 필요와 미래 비용을 균형 있게 고려해야 함
          + 부채에 대한 병적인 혐오감을 가지고 있음
     * ""로컬 부채""를 일반적인 상황에서 기술 부채로 부르지 않을 것임
          + 어딘가에 항상 혼란이 있을 것이며, 그것을 캡슐화하는 것이 일반적임
     * 여러 스타트업에서 일한 경험이 있음
          + 창업자들이 아이디어와 실제 구현된 것, 그리고 작동하는 부분을 혼동하는 경우가 많음
     * 단기적인 이익을 위해 기술 부채를 의도적으로 떠안는 경우가 있음
          + 이 이익도 다른 축으로 고려해야 함
"
"https://news.hada.io/topic?id=17055","앱 스토어에서 들어갈 제품 스크린샷 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        앱 스토어에서 들어갈 제품 스크린샷 생성기

   몇 번의 클릭만으로 앱 스토어나 다양한 스토어에 사용할 제품 스크린샷을 생성할 수 있음

   1년 넘게 구독하여 사용하고 있는데, 생각보다 쓸모있고, 또 생각보다 쓸모없습니다.

   해당 서비스에서 제공하는 템플릿을 사용하는 경우 적당히 깔끔한 이미지들을 생성할 수 있어서 도움이 되기는 하는데요...

   상단 상태바 시계, 배터리같은 요소나 개인정보 등등에 대한 마스킹 작업을 하려면 결국 포토샵을 켜게 되고, 또 한글 폰트 지원도 깔끔하지 못한데다가, 완성된 결과본 마저도 결국 포토샵 켜서 리사이징 하게 되는게,

   뭔가 없으면 아쉽고, 그렇다고 있어봐야 불편해서 잘 안쓰게 되는 계륵같은 존재로 만드는 것 같습니다.

   몇 번의 클릭이라고 말하기엔 홈페이지에 들어가자마자 보이는 데모 gif 가 상당히 길지만... 없는 것보단 나아 보이네요!
"
"https://news.hada.io/topic?id=16965","Tcl 9.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Tcl 9.0 출시

     * Tcl/Tk 9.0
     * 최신 릴리스: Tcl/Tk 9.0.0 (2024년 9월 26일)
          + Tcl/Tk 9.0는 최신 주요 릴리스임
          + 많은 새로운 기능을 포함하며 Tcl/Tk 8과의 호환성 문제도 있음
          + Tcl/Tk 9.0.0 소스 릴리스 다운로드 가능
     * Tcl 9.0의 주요 기능
          + 64비트 용량: 2Gb 이상의 데이터 값 지원
          + 유니코드 및 인코딩: 전체 코드포인트 범위, 추가 인코딩, I/O를 관리하는 인코딩 프로파일 등
          + Zip 파일 시스템: zip 파일을 파일 시스템으로 마운트 가능
          + 첨부 아카이브: 실행 파일이나 라이브러리에 파일 시스템 아카이브를 첨부하여 starkit 스타일의 앱 배포 가능
          + 새로운 알림기: 중앙 이벤트 처리 엔진이 epoll 또는 kqueue 시스템 호출을 기반으로 구축됨. select 기반 구현도 여전히 사용 가능
          + 많은 새로운 명령어와 기능
     * Tcl 9.0의 중요한 비호환성
          + 네임스페이스 변수명 해석: 현재 네임스페이스, 글로벌 아님
          + I/O 잘못된 인코딩: 기본적으로 오류 발생
          + 경로명에서 틸드(~): 더 이상 홈 디렉토리로 해석되지 않음
          + tcl_precision: 숫자 형식에 더 이상 영향 없음
     * Tk 9.0의 주요 기능
          + 운영 체제 기능 접근: 알림, 인쇄, 트레이 시스템
          + 스케일러블 벡터 그래픽: 이미지에서 부분 지원, 스케일러블 위젯 및 테마 외관을 위해 광범위하게 사용
          + 이미지: 메타데이터 및 알파 채널에 대한 전체 접근
          + 플랫폼 기능 및 관례: 많은 개선 사항, 사용 가능한 경우 두 손가락 제스처 지원 포함
     * 더 많은 정보
          + Tcl/Tk 9.0에서 기대할 수 있는 더 완전한 요약은 릴리스 노트를 참조
     * GN⁺의 정리
          + Tcl/Tk 9.0은 많은 새로운 기능과 성능 향상을 제공하며, 특히 대용량 데이터 처리와 다양한 인코딩 지원이 강화됨
          + 새로운 알림기와 zip 파일 시스템 마운트 기능은 개발자에게 유용한 도구가 될 것임
          + 비호환성 문제는 기존 Tcl/Tk 8 사용자에게 주의가 필요함
          + 유사한 기능을 제공하는 다른 프로젝트로는 Python의 Tkinter가 있음

        Hacker News 의견

     * 27년 만의 첫 주요 릴리스임
          + 64비트 내부 구조로 데이터가 매우 커질 수 있음
          + 새로운 이모지 포함한 전체 유니코드 지원
          + Zip 파일 시스템 등 다양한 새로운 기능 추가
          + 일부 프로그램은 업데이트가 필요할 수 있지만 높은 호환성 유지
     * Tcl에 대한 비판에도 불구하고 특별한 디자인 철학이 있음
          + tkinter를 버리고 순수 Tcl/Tk로 GUI를 시도해볼 것을 권장함
          + sqlite 인터페이스 사용, C 확장 작성 또는 라이브러리 래핑 시도 권장
          + 많은 부분이 잘 작동함
     * 새로운 Notifiers 도입으로 성능 향상
          + epoll 또는 kqueue 시스템 호출을 사용하여 중앙 이벤트 처리 엔진 구축
          + select 기반 구현도 여전히 남아 있음
          + Tcl의 동시성 문제 해결에 큰 기여
     * Tcl에 대한 애정 표현
          + 90년대 후반 XiRCON IRC 스크립트 작성 시 사용
          + 간단하고 배우기 쉬우며 유연한 언어로 평가
          + 인간을 위한 Lisp라고 부름
          + 더 인기가 있었으면 좋겠다고 언급
     * Tcl과 tk의 저자는 John Ousterhout 교수임
          + 그의 소프트웨어 디자인 책은 2판까지 출간됨
          + 책 링크 제공
     * Tcl을 즐기지만 요즘은 많이 사용하지 않음
          + Linux에서 1995년 스타일의 GUI를 여전히 생성하는지 궁금해함
          + Linux에서 GUI 구축 지원이 더 좋았다면 여전히 사용했을 것이라고 언급
     * 최근 Tcl을 사용한 경험은 MacPorts portfile 작업뿐임
          + 현재 Tcl을 사용하는 이유에 대해 궁금해함
     * SourceForge에 대한 의문 제기
          + SourceForge가 스파이웨어를 설치하는 사기성 다운로드 사이트처럼 느껴짐
     * 90년대 후반에 Tcl/Tk를 사용하여 크로스 플랫폼 설치 프로그램을 구축한 경험 공유
          + Expect를 사용한 테스트 도구와 라이브러리도 포함
          + 실용적인 도구 세트로 평가
     * Tcl이 2024년에 여전히 관련이 있는지에 대한 질문을 했었음
          + 새로운 릴리스가 나오는 것을 보니 기쁨
"
"https://news.hada.io/topic?id=17027","htmgo - go 와 htmx를 이용하여 간단한 웹 서비스 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 htmgo - go 와 htmx를 이용하여 간단한 웹 서비스 구축하기

     * 가볍고 순수한 Go 방식으로 go & htmx를 사용하여 스케일러블한 대화형 웹사이트/웹 애플리케이션을 구축
     * go의 속도와 단순성 + 하이퍼미디어 속성(htmx)을 결합하여 웹사이트에 대화형 기능을 추가
     * 자바스크립트를 건드리지 않고도 간단하고 빠른 대화형 웹사이트를 구축가능
     * 모든 것은 배포가능한 단일 바이너리로 컴파일 됨

func IndexPage(ctx *h.RequestContext) *h.Page {
  now := time.Now()
  return h.NewPage(
    h.Div(
      h.Class(""flex gap-2""),
      h.TextF(""the current time is %s"", now.String())
    )
  )
}

핵심 기능

     * 배포 가능한 단일 바이너리
     * 라이브 리로드(변경 시 css, go, ent 스키마 및 경로를 다시 빌드)
     * 파일 경로에 기반한 자동 페이지 및 부분 등록
     * tailwindcss 지원, 기본 플러그인 아키텍처로 아무것도 구성할 필요 없음
     * 플러그인 아키텍처 : 개발을 간소화하기 위한 선택적 플러그인 포함 (http://entgo.io 등)
     * 공통 작업의 boilerplate를 줄이기 위한 커스텀 htmx 확장들

   streamlit을 써보고 어플리케이션으로서의 웹에대한 인식이 좀 바뀌었습니다.

   내가 원하는것이 아니라 그(streamlit)가 원하는 방식이면 충분히 좋은 선택이라고 말입니다.

   요즘 htmx 활용한 프레임워크들이 하나씩 하나씩 보이네요.
   Fasthtml... 좀 적응이 안되던데.
   https://news.hada.io/topic?id=16091
   Htmx가 굳이 필요한지, 저는 좀 회의적이었는데, 이참에 한번 자세히 봐야겠네요.
"
"https://news.hada.io/topic?id=16968","CNN과 USA Today의 가짜 웹사이트, Forbes Marketplace 운영 의혹","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           CNN과 USA Today의 가짜 웹사이트, Forbes Marketplace 운영 의혹

  CNN에 숨겨진 웹사이트

     * CNN 홈페이지에서 CNN Underscored를 찾을 수 있음
     * 대부분의 CNN Underscored는 표준 제휴 사이트처럼 보임
     * 그러나 CNN Underscored Money 섹션은 다름
     * Money 섹션의 직원 바이오를 보면, 이메일 주소가 wbdcontractor.com으로 되어 있음
     * 이는 이들이 CNN의 정규 직원이 아닌 계약자임을 의미함
     * Money 섹션의 모든 직원이 계약자임

  CNN Underscored Money 웹사이트

     * CNN Underscored의 일반 네비게이션 바와 Money 섹션의 네비게이션 바가 다름
     * Money 섹션은 더 많은 카테고리를 가지고 있으며, 스타일링이 약간 다름
     * 소스 코드를 보면 두 웹사이트가 매우 다름
          + CNN Underscored Money는 Google Tag Manager를 설치했지만, 일반 CNN Underscored는 그렇지 않음
          + Money 섹션은 별도의 WordPress 설치를 사용함
          + CNN Underscored는 Optimizely를 설치했지만, Money 섹션은 그렇지 않음

  개인정보 보호정책

     * CNN Underscored와 CNN Underscored Money는 각각 다른 개인정보 보호정책을 가지고 있음
     * CNN Underscored Money의 개인정보 보호정책은 Solutions Underscored LLC라는 회사와 관련이 있음
     * 이 회사는 Georgia에 등록되어 있으며, Thomas Callahan이 관리자로 등록되어 있음
     * Thomas Callahan은 Marketplace의 CFO와 동일한 이름을 가짐

  CNN Underscored Money에 대한 추측

     * Marketplace는 확장을 원했고, CNN과 제휴하여 웹사이트의 일부를 운영하기로 함
     * CNN은 Marketplace가 CNN Underscored Money를 독립적으로 운영하도록 허용함
     * Marketplace는 CNN Underscored Money를 일반 Underscored 웹사이트와 동일하게 보이도록 많은 노력을 기울임
     * CNN은 이 과정에 거의 관여하지 않았을 가능성이 큼

  USA Today Blueprint에서도 동일한 상황

     * USA Today Blueprint의 네비게이션 바는 일반 USA Today와 다름
     * USA Today Blueprint의 직원 바이오에서 marketplace.co 이메일 주소를 발견함
     * 이는 USA Today Blueprint의 직원이 Marketplace의 직원임을 의미함
     * USA Today Blueprint의 검색 트래픽은 여전히 월 800K 이상의 방문을 기록함

  GN⁺의 정리

     * 이 기사는 Forbes Marketplace가 CNN과 USA Today와 제휴하여 제휴 콘텐츠를 운영하는 방법을 탐구함
     * CNN Underscored Money와 USA Today Blueprint는 각각 독립적인 웹사이트로 운영되며, Marketplace가 이를 관리함
     * 이는 제휴 마케팅의 투명성과 신뢰성에 대한 의문을 제기함
     * 독자들은 이러한 제휴 관계가 콘텐츠의 객관성과 독립성에 어떤 영향을 미칠 수 있는지 고려해야 함
     * 유사한 기능을 가진 다른 프로젝트로는 Wirecutter와 같은 독립적인 리뷰 사이트가 있음

        Hacker News 의견

     * 미디어 산업의 현재 상황 설명
          + 대부분의 미디어 조직은 소수의 내부 기자와 외부 콘텐츠 파트너로 구성됨
          + 소셜 미디어 피드처럼 작동하며, 전통적인 신문과 다름
          + CNN도 예외가 아니며, 소셜 미디어 시대에 적응하기 위해 변화함
     * Google 알고리즘 변화와 그 영향
          + Google이 널리 사용되는 웹사이트를 ""신뢰할 수 있는"" 사이트로 우선시함
          + 많은 웹사이트가 가짜 제품 리뷰로 사이트를 채움
          + 실제 리뷰는 제품 제조사의 설명을 거의 복사한 수준임
          + 이로 인해 Google에서 제품 리뷰 찾기가 무의미해짐
     * ""가짜""라는 표현에 대한 논의
          + 많은 사이트의 뉴스나 정보는 다른 조직에서 구매하거나 비즈니스 관계를 통해 얻음
          + CNN의 콘텐츠 제공 방식에 대한 비판
          + CNN이 독립적이고 객관적인 보도를 유지한다고 명시함
     * CNN의 품질에 대한 의견
          + CNN 채널의 프로그램 품질에 대해 언급할 수 없음
          + cnn.com은 수년간 제휴 링크와 스폰서 스토리로 가득 차 있음
     * Google의 문제와 인터넷의 질 저하
          + Google이 기생충에 의해 기능을 잃으면 생명 유지가 어려워짐
          + 현재 Google 검색을 통해 찾을 수 있는 대부분의 콘텐츠는 질이 낮음
          + 과거에는 Wikipedia 같은 사이트가 인터넷의 이상적인 모습으로 여겨졌음
          + 광고 없는 유료 콘텐츠 제공 모델이 부활할 가능성 있음
     * SEO 에이전시의 모델
          + 강력한 도메인 평점을 가진 콘텐츠 웹사이트 운영
          + SEO 에이전시가 서브사이트를 제안하고 모든 콘텐츠를 관리함
          + 제휴 수익을 분배하며, 인터넷은 질 낮은 콘텐츠로 가득 참
     * 과거의 유사한 경험
          + 2005년에 사기성 광고 회사가 유사한 방식으로 페이지를 통제함
          + Google이 몇 달 후 이를 감지하고 도메인을 블랙리스트에 올림
          + 여전히 이러한 문제가 존재함
     * Taboola와 유사한 스킴에 대한 기사
          + Taboola와 Outbrain의 스킴에 대한 좋은 기사 링크 제공
"
"https://news.hada.io/topic?id=16961","Kia 차 해킹 : 번호판만으로 차 원격 제어하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Kia 차 해킹 : 번호판만으로 차 원격 제어하기

     * 2024년 6월 11일, Kia 차량에서 번호판만으로 차의 주요 기능을 원격 제어할 수 있는 취약점을 발견함
     * 공격자는 피해자의 이름, 전화번호, 이메일 주소, 물리적 주소 등의 개인 정보를 조용히 획득할 수 있음
     * 이 취약점을 이용하여 공격자는 차주 모르게 자신을 차량의 보이지 않는 두번째 사용자로 추가할 수 있음
     * 취약점 영향을 보여주기 위해 데모 도구를 제작했지만, 실제로 공개하거나 악용되지는 않음
          + 이 취약점은 이후 수정되었으며, 이 도구는 출시되지 않았고, 기아 팀은 이 취약점이 악의적으로 악용된 적이 없음을 확인했음

영향을 받은 차량

     * 2025년부터 2014년까지의 다양한 Kia 모델이 영향을 받음
     * 각 모델별로 원격 잠금/해제, 원격 시동/정지, 원격 경적/라이트, 원격 카메라 등의 기능이 가능함

취약점 상세

     약 2년전, 우리는 12개 이상의 자동차 제조사의 보안 취약점을 찾아냈음. 1,500만대 이상의 차량을 원격으로 위치 추적하고, 시동을 끄고, 잠금 해제하고, 시동을 걸 수 있는 치명적인 문제점을 발견했음 - Paul Roberts

     * 시간이 많이 지나, 이전에 취약점을 발견했던 제조사들의 사이트를 다시 살펴보기로 함
     * Kia의 owners 사이트와 모바일 앱은 인터넷을 통해 차량 제어 명령을 보낼 수 있어 흥미로웠음
     * 웹사이트는 프록시 서버를 통해 명령을 백엔드 API로 전달하고, 앱은 API에 직접 접근함
     * owners 웹사이트에서 문 잠금 해제 요청을 보내는 HTTP 요청 예시:
POST /apps/services/owners/apigwServlet.html HTTP/2
Host: owners.kia.com
Httpmethod: GET
Apiurl: /door/unlock
Servicetype: postLoginCustomer
Cookie: JSESSIONID=SESSION_TOKEN;

     * 서버는 JSESSIONID를 사용해 Sid 세션 ID를 만들어 백엔드 API에 다음과 같이 전달함:
GET /apigw/v1/rems/door/unlock HTTP/1.1
Host: api.owners.kia.com
Sid: 454817d4-b228-4103-a26f-884e362e8dee
Vinkey: 3ecc1a19-aefd-4188-a7fe-1723e1663d6e

     * Sid는 세션 토큰, Vinkey는 차대번호(VIN)와 매핑되는 UUID임

딜러 인프라 취약점

     * 우리는 Kia 딜러 웹사이트도 살펴보기로 함. 새 차를 구매할 때 Kia에서 고객 정보를 어떻게 처리하는지 궁금했기 때문
     * 딜러 사이트에서 새 차량 등록을 위해 고객에게 보내는 이메일의 URL을 확인:
https://kiaconnect.kdealer.com/content/kDealer/…

     * 한번도 본 적 없는 kiaconnect.kdealer.com 도메인이 흥미로움
     * 위 URL에서 token 파라미터는 VIN 키로, 딜러가 생성한 일회용 접근 토큰. vin 파라미터로 지정된 차량을 수정할 수 있음
     * URL을 로드하면 토큰 유효성을 확인하는 HTTP 요청이 전송:
POST /apps/services/kdealer/apigwServlet.html HTTP/1.1
Host: kiaconnect.kdealer.com

{
  ""token"": ""985a49f0-1fe5-4d36-860e-d9b93272072b"",
  ""vin"": ""5XYP3DHC9NG310533"",
  ""scenarioType"": 3,
  ""loginPref"": null
}

     * 딜러 사이트의 요청 URI가 owners 사이트와 동일한 /apps/services/kdealer/apigwServlet.html인 게 흥미로웠음
     * 딜러용 내부 API로 요청을 전달하는 프록시가 있을 것으로 예상
     * 자바스크립트 코드를 살펴보니 딜러 차량 조회, 계정 조회, 등록, 해지 등 직원 전용 기능을 하는 API 호출이 있음
     * 직접 소유한 차량의 VIN으로 API 엔드포인트에 접근해봤지만, 401 Unauthorized 오류가 발생. 딜러 토큰으로는 동작하지 않았음

일반 계정으로 딜러 API 접근

     * 그래서 딜러 웹사이트에 일반 계정으로 가입해서 액세스 토큰을 생성한 뒤, 그걸로 API에 접근해보기로 함. owners 사이트와 API 형식이 비슷해 보였기 때문
     * 딜러 사이트에서 owners 사이트와 같은 방식으로 사용자 등록을 시도했더니 성공!
     * 로그인해서 액세스 토큰을 발급받고, 이전에 접근 불가했던 VIN 조회 API를 호출하자 응답에 차량 소유주의 이름, 전화번호, 이메일이 담겨 있었음
     * 우리가 만든 일반 계정으로 딜러 포털에 인증하고 수정된 채널 헤더를 사용하면 모든 딜러용 API에 접근할 수 있다는 걸 의미

차량 무단 접근

     * 몇 시간 동안 자바스크립트 코드를 분석한 끝에 차량 등록, 해지, 수정 엔드포인트가 어떻게 동작하는지 파악
     * 다음 4단계를 거치면 피해자 차량에 접근할 수 있었음:
         1. 딜러 토큰 생성 및 HTTP 응답 헤더에서 ""token"" 값 추출
         2. 피해자 이메일과 전화번호 알아내기
         3. 유출된 이메일과 VIN으로 기존 소유주 접근 권한 수정
         4. 공격자를 차량의 새로운 소유주로 추가
     * 피해자 입장에서는 자신의 차량에 접근했다는 알림이나 권한이 변경되었다는 사실을 알 수 없음
     * 공격자는 누군가의 번호판으로 VIN을 알아낸 뒤 API를 통해 피해자를 몰래 추적하고 차 문 열기, 시동 걸기, 경적 울리기 등의 명령을 보낼 수 있음

개념 증명 대시보드 제작

     * 우리는 이 취약점의 심각성을 보여주기 위해 공격자가 (1) Kia 차량의 번호판을 입력하고 (2) 소유주 개인정보를 가져온 뒤 (3) 차량 제어 명령을 실행할 수 있는 개념 증명용 대시보드를 만들었음
     * ""Exploit"" 페이지에서 차량 무단 접근을 시도하고, ""Garage"" 페이지에서 명령을 내리고 위치를 추적하도록 함
     * 렌트한 잠긴 Kia 자동차를 대상으로 테스트를 진행했고, 블로그 맨 위 영상에서 스마트폰으로 차량을 해킹한 뒤 원격으로 문 잠금/해제, 시동 켜기/끄기, 경적 울리기, 위치 추적 등을 수행하는 모습을 볼 수 있음

결론

     * Meta가 개발 과정에서 실수로 누군가 여러분의 페이스북 계정을 탈취할 수 있는 코드 변경을 할 수 있는 것처럼, 자동차 제조사들도 여러분 차량에 그런 취약점을 만들어낼 수 있음
     * 앞으로도 자동차에선 취약점이 계속 발견될 것

타임라인

     * 06/07/24 16:40 UTC - Kia 팀에 취약점 제보 방법 문의
     * 06/10/24 13:21 UTC - Kia 팀 답변 받음
     * 06/11/24 22:41 UTC - 취약점 제보
     * 06/12/24 18:20 UTC - 심각도 때문에 티켓 알림 이메일 전송
     * 06/14/24 18:00 UTC - Kia 팀이 조사중이라 응답
     * 06/18/24 16:41 UTC - 심각도 때문에 티켓 알림 이메일과 도구 스크린샷 전송
     * 06/20/24 02:54 UTC - 티켓 알림 이메일과 번호판 입력해 접근하는 스크린샷 전송
     * 08/12/24 12:30 UTC - 티켓 알림 이메일로 업데이트 요청
     * 08/14/24 17:41 UTC - Kia 팀이 취약점 해결하고 테스트중이라 응답
     * 09/26/24 08:15 UTC - 취약점 해결 확인 후 대중에 공개

GN⁺의 의견

     * 자동차 해킹이 현실이 되고 있음을 보여주는 충격적인 사례임. 앞으로 커넥티드카가 늘어나면서 이런 취약점 문제는 더욱 심각해질 것
     * 이번 사건은 자동차 제조사들의 보안 인식 부족과 허술한 시스템 설계를 여실히 보여줌. 소프트웨어 취약점 관리와 코드 리뷰 등 보안 개발 생명주기(SSDLC) 도입이 시급해 보임
     * 자동차 원격 제어 기술은 편의성을 높여주지만 동시에 공격 표면을 넓히기도 함. 기술과 보안, 프라이버시 사이의 균형을 잡는 게 중요할 것.
     * 개인정보를 기반으로 한 인증 방식의 문제점도 드러남. 번호판을 아는 것만으로도 차량을 탈취할 수 있다는 것은 너무 허술. 생체인식이나 다중인증 등 강화된 인증 체계가 필요할 것임
     * 이용자가 자신의 차량 보안 상태를 인지하고 통제할 수 있어야 함. 누가 내 차에 접근했는지, 어떤 명령을 내렸는지 알려주는 알림 기능 등이 필요

   헉 끔찍하네요

   차량과 인터넷의 연결을 물리적으로 해제할수 있는 옵션이 차주들에게 마땅히 주어져야한다고 생각합니다.

   요금제 체계가 궁금했는데, 기본 무료로 몇년씩 제공해주면서 가입시키는군요..

        Hacker News 의견

     * Kia의 미국 차량에 인터락을 생략한 결정이 전국적인 차량 도난 문제를 야기했음
          + 이로 인해 밀워키와 시카고 같은 도시에서 차량 절도가 급증했음
          + 단순히 구부러진 USB 케이블로 차량을 훔칠 수 있었음
     * 취약한 Kia 차량 데이터베이스를 크롤링하여 근처 Kia 차량을 보여주고 잠금을 해제하는 ""라이드 쉐어"" 앱을 만들 수 있음
     * 누구나 딜러로 등록할 수 있고, 딜러는 판매하지 않은 차량 정보도 조회할 수 있는 것이 문제임
          + 딜러 직원이 이를 악용하여 스토킹할 수 있음
     * 기사에 따르면, 원래 Kia와 딜러만 차량을 추적할 수 있었으나 이제는 ""비인가""된 사람들도 추적할 수 있게 되었음
          + 왜 기업이 차량을 추적하는 것은 괜찮고, 다른 사람이 하면 문제가 되는지 의문임
     * Kia가 차량과 소유자에 대한 많은 데이터를 보유하고 있는 것이 문제임
          + 이 취약점은 이미 수정되었으나 데이터 문제는 여전히 남아 있음
     * Kia 차량을 소유한 형제가 차량 절도로 인해 정신 건강에 부정적인 영향을 받고 있음
     * 온라인 계정을 만들어 차량을 활성화해야 하는 차량을 구매하지 않을 것임
          + 이전에 소유한 Kia 차량이 10만 마일 전에 1천 마일마다 1쿼트의 오일을 소모했음
     * 현재 시장에 연결 기능이 없는 새로운 차량은 없음
          + 비연결 차량을 만드는 것이 가능한지 궁금함
     * Kia 소유자로서, 취약점이 수정되었고 악의적으로 악용되지 않았다는 점에 안도함
          + 그러나 Kia는 여전히 많은 개선이 필요함
     * 차량을 인터넷에 연결하지 말아야 한다고 생각함
"
"https://news.hada.io/topic?id=16997","영국 해안 근처로 떠오르는 메가폭탄","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          영국 해안 근처로 떠오르는 메가폭탄

발트해

  영국 해안 근처로 떠오른 부유하는 메가폭탄

     * 기사 요약: 러시아의 고위험 화물을 실은 MV Ruby 선박이 손상을 입고 항구를 찾고 있음. 이는 하이브리드 전쟁의 일환일 수 있으며, 위협이 명확함.
     * 상황 설명:
          + 몰타에 등록된 MV Ruby 선박은 20,000톤의 폭발성 질산암모늄을 싣고 있음.
          + 선박이 손상을 입고 영국 켄트 해안 근처에 정박해 있음.
          + 러시아로 돌아가는 대신 유럽 항구에 입항을 시도했으나 거부당함.
     * 리투아니아의 대응:
          + 리투아니아는 위험한 화물 때문에 입항을 거부함.
          + 20,000톤의 질산암모늄이 폭발하면 히로시마 폭탄의 3분의 1에 해당하는 위력을 가짐.
          + 리투아니아 당국은 악의적인 의도가 없다고 발표했지만, 러시아와 같은 적대적 행위자에 대해 항상 주의해야 함.
     * 하이브리드 전쟁:
          + 러시아는 우크라이나와의 전쟁 외에도 혼란을 퍼뜨리기 위한 공격적인 하이브리드 전략을 추구해옴.
          + 최근 몇 달 동안 물리적 사보타주 행위가 증가함.
          + 발트해 국가들에 대한 물리적 사보타주에는 리투아니아의 IKEA 창고 화재, 전력망 및 통신망에 대한 사이버 공격 등이 포함됨.
     * NATO와의 관계:
          + 발트해 국가들은 NATO 회원국으로, 군사 공격은 집단 방어를 촉발할 수 있음.
          + 하이브리드 위협은 직접적인 군사 대응을 피하기 위해 설계됨.
     * 독일의 사례:
          + 독일은 러시아가 국제 항공 소포에 방화 장치를 설치했다고 의심함.
          + 독일 열차도 사보타주 공격을 받음.
     * 질산암모늄의 위험성:
          + 질산암모늄은 화재나 오염에 노출될 경우 매우 폭발성이 강함.
          + 안전한 구역에서 통제된 하역, 지속적인 모니터링, 비상 대응 계획이 필요함.
     * 클라이페다 항구의 중요성:
          + 클라이페다 항구는 리투아니아와 NATO의 군사 물류, 에너지 안보, 지역 전력 안정성에 중요한 역할을 함.
          + LNG 터미널과 NordBalt 전력 케이블이 위치해 있어 지역 에너지 공급과 전력망 안정성에 중요한 역할을 함.
     * 외교적 고려사항:
          + 선박의 입항을 거부하거나 허용하는 것은 외교적 영향을 미칠 수 있음.
          + 국제 프로토콜 준수와 효과적인 커뮤니케이션이 중요함.

GN⁺의 정리

     * 이 기사는 러시아의 하이브리드 전쟁 전략과 그로 인한 지역 안보 위협을 다루고 있음.
     * MV Ruby 선박 사건은 하이브리드 위협이 물리적 요소로 진화할 수 있음을 보여줌.
     * 클라이페다 항구의 전략적 중요성 때문에 이 사건은 지역 안보와 에너지 안정성에 큰 영향을 미칠 수 있음.
     * 유사한 기능을 가진 프로젝트로는 NATO의 집단 방어 전략과 국제 해상 안전 프로토콜이 있음.

        Hacker News 의견

     * 리투아니아 당국은 국가 안보에 대한 악의적인 의도가 없음을 발표했지만, 러시아와 같은 적대적인 국제 행위자와 거래할 때는 항상 신중해야 함
          + 러시아는 수십 년 동안 서방과 저강도 전쟁을 벌여왔으며, 최근 몇 년 동안 서유럽을 포함한 서방에 대한 공격을 공개적으로 위협할 정도로 단독으로 공격을 강화해왔음
          + 러시아가 대규모 폭탄을 문 앞에 두려고 시도할 때, 그 위험을 완화하지 않는 것은 어리석은 행동임
     * 손상된 선박이 유럽 항구에 입항하려고 시도한 여정에 대한 설명이 필요함
          + 선장이 거부했는지, 러시아 항구 당국이 거부했는지, 아니면 특정 방향으로 이동하기로 선택했는지 불분명함
          + 러시아 항구를 떠난 후 노르웨이 해역에서 폭풍으로 좌초되었고, 노르웨이에서 선체 균열과 프로펠러 및 키 손상이 확인됨
     * 질산암모늄은 비료임
          + 질산암모늄의 주요 원료는 천연가스이며, 천연가스와 비료는 경제적으로 밀접하게 연결되어 있음
          + 천연가스는 운송이 어렵지만 비료는 운송이 쉬움
          + 러시아는 풍부한 천연가스를 보유하고 있으며, 제재로 인해 유럽에 파이프라인을 통해 가스를 판매할 수 없기 때문에 비료를 생산하여 전 세계에 판매하는 것이 우회책임
     * 선박의 여정이 이해되지 않음
          + 노르웨이 해역의 Tromsø에서 발트해의 Klaipeda, 그리고 현재 Kent 해안에 있음
          + 악의적인 의도를 포함한 설명을 쉽게 생각할 수 있지만, 합법적인 이유도 있을 것임
          + 질산암모늄을 구매하고 이를 구매자에게 전달하려고 했지만 연속적인 항구에서 거부당했을 가능성이 있음
     * '메가폭탄'이라는 단어를 좋아하지만, 질산암모늄은 비료임
          + 러시아의 주요 수출품 중 하나이며, 이전에도 여러 화물선이 이를 운반했을 것임
          + 질산암모늄이 어떻게 저장되고 운송되는지, 어떤 상황에서 폭탄처럼 될 수 있는지에 대한 추가 정보가 필요함
     * 선박의 현재 위치를 확인할 수 있음
          + MarineTraffic 링크
     * CEPA에 대해 잘 모르지만, 이 기사는 매우 선동적이며 러시아를 중심으로 이야기를 구성함
          + ""몰타 등록"" 화물선이라는 표현은 선박의 실제 운영자나 통제 주체에 의문을 제기하려는 의도로 보임
          + 선박은 몰타 회사 'Ruby Enterprise' 소유이며, 목적지는 몰타임
          + 선박이 항해 가능하다고 인정하면서도 러시아로 돌아가는 것이 ""명백한 해결책""이라고 주장하는 것은 의문임
          + BBC 기사가 더 균형 잡힌 시각을 제공함
     * 아침 커피를 마시며 듣고 싶은 뉴스임
     * 질산암모늄이 어디로 운송될 예정이었는지 불분명함
          + 예인선의 도움으로 목적지로 계속 이동할 수 있었을 것임
     * 최근 러시아 정보기관이 고용한 '일회용 요원'에 대한 보고서와 결합하면 상황이 더 불쾌해짐
          + 선박이 어느 곳에 정박하고, 몇 백 달러를 받고 자신이 무엇을 하고 있는지 모르는 요원들이 침투하여 화재를 일으킬 가능성이 있음
          + 독일 신문 ZEIT의 기사 참고 (Google Translate로 자동 번역됨)
               o 독일어 원문 링크
               o https://zeit.de/2024/41/…"">아카이브 링크
"
"https://news.hada.io/topic?id=16966","AI에 지친 사람들에 지친 사람들

AI에 지친 이유

  AI에 지친 소프트웨어 테스트 전문가로서의 경험

     * 테스트 자동화 경력: 18년 동안 테스트 자동화에 집중해 온 경험
     * 변하지 않는 문제: 풀스택 엔드 투 엔드 테스트는 항상 가장 느리고 비용이 많이 듦
     * 테스트 가능성 논의: 빠르고 작은 테스트를 작성하기 위해 테스트 가능성을 논의하는 것이 중요함
     * 기본 프로그래밍 원칙: 좋은 자동화 테스트를 작성하려면 기본적인 프로그래밍 원칙에 대한 지식이 필요함
     * AI 도구의 한계: 많은 AI 기반 테스트 자동화 도구가 더 나은 결과를 제공하지 않음
     * AI 사용의 장단점: AI는 결과를 빠르게 생성할 수 있지만, 품질과 가치를 판단하는 것은 여전히 인간의 몫임

  AI에 지친 컨퍼런스 프로그램 위원회 멤버로서의 경험

     * 프로그램 위원회 활동: 여러 컨퍼런스의 프로그램 위원회 멤버로 활동
     * AI 생성 제안서의 문제: ChatGPT와 같은 소프트웨어로 작성된 제안서가 증가
     * 제안서의 유사성: 자동 생성된 제안서는 모두 비슷하게 들림
     * 제안서의 중요성: 제안서는 자신을 보여줄 첫 번째이자 유일한 기회임
     * 신뢰 문제: 제안서를 직접 작성하지 않는다면, 발표의 신뢰성도 의심스러움
     * AI 사용 제안서 거부: AI로 작성된 제안서는 즉시 거부함

  AI에 지친 인간으로서의 경험

     * 인간의 창의성: 음악, 책, 영화 등 인간이 만든 작품이 주는 감동
     * AI 생성 콘텐츠의 한계: AI가 생성한 콘텐츠는 감동을 주지 못함
     * AI의 부정적 영향:
          + 사람들은 AI가 일자리를 빼앗을까 두려워함
          + 기업들은 ROI를 보지 못하면서도 AI에 큰 돈을 투자함
          + AI의 탄소 발자국이 점점 더 심각해짐
     * 긍정적 사용 사례: 질병의 조기 발견 등 AI가 긍정적으로 사용되는 사례는 있음

GN⁺의 정리

     * AI는 소프트웨어 테스트, 컨퍼런스 제안서 작성, 그리고 예술 창작 등 다양한 분야에서 사용되고 있음
     * 그러나 AI가 항상 더 나은 결과를 제공하지는 않으며, 인간의 창의성과 감동을 대체할 수 없음
     * AI의 부정적 영향과 한계를 인식하고, 긍정적인 사용 사례를 중심으로 AI를 활용하는 것이 중요함
     * 비슷한 기능을 가진 프로젝트로는 인간의 창의성을 강조하는 예술 창작 도구들이 있음

        Hacker News 의견

     * 최근 2년 동안 작성된 글을 신뢰할 수 없다는 느낌이 가장 우울함
          + AI 사용이 확실해지고 있으며, 경쟁에서 뒤처지지 않기 위해서는 AI를 사용해야 함
          + 인간이 작성한 글이 중요하다는 것을 깨달았고, 새로운 글에 대한 흥미를 잃음
     * LLMs에 지침을 느끼고 있음
          + LLMs는 일부 작업에 뛰어나지만, 중요한 일을 맡기기에는 신뢰할 수 없음
          + LLMs의 신뢰도 지표가 필요하며, 그렇지 않으면 또 다른 ""AI 겨울""이 올 수 있음
     * 기술적 실업에 대한 두려움
          + 초인적 AI가 등장하면 모든 일이 자동화될 가능성이 있음
          + 미국과 중국 간의 AI 무기 경쟁이 불가피하며, 이는 전 세계에 재앙을 초래할 수 있음
          + 초지능이 인간의 통제를 벗어날 가능성에 대한 우려
     * AI를 신중하게 접근하고 있음
          + AI 지원 VSCode 유사 IDE를 사용해본 결과, 코드 작성 속도가 크게 향상됨
          + AI가 많은 반복적인 작업을 대신해주어 효율성이 높아짐
     * LLMs가 모든 제품에 과도하게 사용되는 것에 피로감을 느낌
          + AI에 대한 흥분을 표현하는 사람들이 지루하게 느껴짐
     * AI 글쓰기, 코드, 예술이 모두 별로임
          + 저렴한 비용으로 많은 기회를 열어주지만, 품질이 낮음
          + 저렴함이 모든 것을 바꾸고 있음
     * 컴퓨터가 이제는 정확하지 않음
          + AI 모델에 따라 결과가 달라질 수 있음
     * AI가 지루하고 평범한 결과를 생성함
          + 과학적 성취는 대단하지만, 사람들이 AI 결과를 마법처럼 여기는 것이 지루함
          + AI가 새로운 사용 사례를 가능하게 할 것이라는 긍정적인 전망도 있음
     * ChatGPT 이후 사람들의 진정한 말이나 손으로 그린 예술이 AI 생성물로 분류되어 버려지는 것에 대한 불만
          + 학계에서 학생들의 에세이가 AI 생성물로 잘못 분류되어 실패하는 사례가 있음
          + 예술가들이 AI 생성물로 오인받아 작품이 제거되는 경우도 있음
     * 문제를 과도하게 일반화하고 개인화하는 인간의 경향
          + AI 모델의 발전은 더 많은 것을 생산하려는 동기에 의해 주도됨
          + 시스템적 문제를 도구 사용자들의 실패로 치부하는 것은 근본적인 동기를 무시함
"
"https://news.hada.io/topic?id=17041","GitHub Issues의 진화(공개 프리뷰)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GitHub Issues의 진화(공개 프리뷰)

     * Sub-Issue, Issue Type, Issu 검색등 다양한 개선 사항을 공개

하위 이슈로 이슈를 세부적으로 나누어 관리하기

     * 하위 이슈를 사용하면 부모-자식 계층 구조로 이슈를 세분화하고 구성할 수 있음
     * 하위 이슈는 모든 이슈에서 생성 가능하며, 중첩된 구조를 활용하여 진행 상황을 추적하고 남은 작업을 파악할 수 있음
     * 프로젝트 내에서 하위 이슈의 진행 상황을 쉽게 추적 가능함

이슈 유형으로 업무 오거나이징 하기

     * 이슈 유형을 사용하면 조직 내 모든 저장소에서 공유되는 공통된 언어로 이슈를 분류하고 관리할 수 있음
     * 버그 백로그 진행 상황 신속히 파악, 팀이 작업 중인 고수준 이니셔티브 모두 찾기, 프로젝트 업무 분류 이해 등이 가능해짐

고급 검색으로 원하는 것을 정확히 찾기

     * 저장소 이슈 페이지에서 AND와 OR 키워드, 중첩 검색을 위한 괄호를 사용해 고급 검색 구성 가능
     * 보다 복잡한 필터를 구성하여 찾고자 하는 정확한 이슈 집합을 찾을 수 있음

이슈 UI 업데이트

     * 이슈 인덱스 페이지에 자동 완성 및 구문 강조 기능이 있는 새로운 필터 바 추가
     * 생성 화면으로 빠르게 돌아갈 수 있는 'Create More' 옵션으로 여러 이슈 생성이 더 빨라짐
     * 파일 이름에 따라 알파벳순으로 표시되는 이슈 양식 및 템플릿으로 원하는 순서로 쉽게 설정 가능
     * 새로운 'Copy Link' 버튼으로 이슈의 URL을 쉽게 공유 가능
     * 긴 이슈의 경우 'Load More' 선택 시 이제 50개 대신 150개의 이벤트를 가져옴

GitHub 프로젝트의 아이템 증가

     * 이전에는 프로젝트당 1,200개에서 50,000개로 용량이 확장되는 프로젝트 아이템 한도 증가 비공개 베타를 발표했음
     * 오늘 이 증가된 한도의 대상을 확장함
     * 비공개 베타 이후 슬라이스, 스윔레인 및 GraphQL API에 대한 지원이 추가되었고, 상위 버그 리포트를 수정하고 성능을 개선함
     * 프로젝트 관리자이고 프로젝트에서 인사이트(현재 지원되지 않는 유일한 기능)를 활용하지 않고 아이템 제한에 가까워지면 프로젝트 위에 배너가 표시됨
     * 이 업데이트는 조직당이 아니라 프로젝트별로 이루어지므로, 적격 프로젝트에서 ""Join Waitlist"" 버튼을 클릭하여 참여할 수 있음

GN⁺의 의견

     * 기존의 이슈 트래킹 도구를 한 단계 발전시킨 업데이트로, 소프트웨어 개발 팀의 협업을 크게 개선할 수 있을 것으로 보임
     * 하위 이슈를 활용해 작업을 세분화하면서도 전체 진행상황을 파악하기 쉬워지는 장점이 있지만, 계층구조가 지나치게 깊어지면 오히려 가독성을 해칠 수 있음
     * 이슈 타입 설정으로 조직 내에서 통일된 언어로 이슈를 관리할 수 있게 된 점이 인상적임. 팀간 소통과 이해를 높일 수 있을 듯함
     * 고급 검색 기능은 방대한 이슈 속에서 원하는 정보를 빠르게 찾는데 유용할 것임. 단 복잡한 쿼리문을 작성할 수 있는 사용자 교육이 선행되어야 함
     * 프로젝트 아이템 제한이 높아진 것은 대규모 프로젝트 관리에 큰 도움이 될 것으로 기대됨. 다만 너무 많은 아이템을 한 프로젝트에 담는 것은 바람직하지 않음

        Hacker News 의견

     * GitHub Issues의 가장 큰 약점은 이슈 페이지 방문 시 원래 보고서가 메인 콘텐츠로 표시되는 점임
          + 실제 문제를 이해하지 못한 상태에서 증상만 설명할 가능성이 높음
          + 원래 보고자가 버그 보고서를 잘 작성하지 못할 가능성이 있음
          + 주된 문제가 해결된 후에도 작은 부분이 해결되지 않아 이슈가 열려 있을 수 있음
          + 페이지 상단에 문제의 현재 이해와 상태를 설명하는 공간이 있으면 좋겠음
     * GitHub Issues를 사용하고 싶었지만, 복잡해져서 실망스러움
          + ADO, Jira, Asana처럼 복잡해질까 걱정됨
     * Issues가 저장소 유지 관리자로 제한되면 FLOSS 프로젝트에 기여하기 쉬워질 것임
          + 현재는 지원 요청, 제안, 대화로 인해 초점이 흐려짐
          + Issue의 Jirafication에는 관심이 없음
     * GitHub Issues의 마지막 주요 업데이트를 10년 전에 구축했으며, 더 많은 것을 기대했음
          + 체크박스 기반 개발처럼 느껴짐
          + React가 포함되어 있음
     * ""closed - duplicate"", ""closed - won’t fix"", ""our bot closed this because no one commented on it for 6 weeks"" 상태 추가 필요
          + 문제를 찾았을 때 이미 닫혀 있는 경우가 많아 좌절감을 줌
     * 부정적인 반응을 이해하지 못하겠음
          + 기업 사용자에게는 훌륭한 업그레이드임
          + Gitlab Issue나 Linear와 비교해 따라잡는 것임
     * 이미 라벨이 있는데 이슈 타입의 의미가 무엇인지 모르겠음
     * 이슈 댓글에 여러 문제를 추가하면 추적하기 어려움
          + [ ] 체크박스를 추가하는 방법이 있지만, 누가 완료했는지 명확하지 않음
          + 코드의 풀 리퀘스트에 리뷰 댓글을 추가하는 방법도 있지만, 할당된 사람을 표시할 수 없음
     * GitHub Issues의 가장 큰 문제는 대형 오픈 소스 프로젝트가 우선순위 이슈를 쉽게 표시할 수 없다는 것임
          + 공격적인 중재는 가능하지만, 이슈 작성자에게 불안감을 줌
          + 백로그와 할 일을 구분하는 방법이 필요함
     * 과거에 사용했던 작업 목록 개편을 좋아했음
          + 유기적인 프로젝트 관리 접근 방식이 좋았음
          + 명시적인 하위 작업으로 전환되어 실망스러움
"
"https://news.hada.io/topic?id=16959","WordPress.org, WP Engine 리소스 접근 차단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WordPress.org, WP Engine 리소스 접근 차단

     * WordPress.org가 호스팅 제공업체 WP Engine의 리소스 접근을 차단함
     * Matt Mullenweg는 WP Engine이 테마, 플러그인 등 플랫폼 리소스에 접근할 수 없다고 밝힘
     * WP Engine이 WordPress 환경을 제어하려면 자체 시스템 운영이 필요하다고 언급

차단 결과

     * WP Engine 솔루션 사용 사이트는 플러그인 설치나 테마 업데이트가 불가능해짐
     * 일부 개발자와 지지자들은 보안 업데이트 접근도 막혀 취약점이 발생할 수 있다고 지적
     * WP Engine은 문제 인지하고 해결책을 마련 중이라고 밝힘

WP Engine 반응

     * Matt Mullenweg가 WordPress에 대한 통제력을 악용해 WP Engine 고객의 WordPress.org 접근을 방해했다고 주장
     * Mullenweg의 전례 없는 조치가 WP Engine 뿐 아니라 전체 WordPress 생태계에 영향을 미친다고 언급

WP Engine vs Automattic 분쟁

     * WordPress는 Automattic, WP Engine 등 다양한 호스팅 제공업체를 통해 인터넷 웹사이트의 약 40%를 구동함
     * Mullenweg는 WP Engine이 이익 추구에만 집중하고 오픈소스에 기여하지 않는다고 비판
     * 이에 WP Engine은 Mullenweg와 Automattic에 발언 철회를 요구하는 중지 명령을 보냄
     * Automattic도 WP Engine에 WordPress와 WooCommerce 상표권 침해 중지 명령을 보냄
     * WordPress Foundation은 WP Engine이 상표권 정책을 위반했다고 밝힘

GN⁺의 의견

     * WordPress와 WP Engine의 분쟁이 오픈소스 커뮤니티에 미칠 영향에 대해 우려됨
     * 호스팅 제공업체 간 경쟁은 자연스럽지만, 이용자들이 피해를 보는 상황은 바람직하지 않음
     * 오픈소스 프로젝트의 지속가능한 발전을 위해서는 기업의 상생과 협력이 필요해 보임
     * WordPress 사이트 운영자라면 향후 추이를 예의주시하고, 필요시 서비스 이전을 고려해 볼 만함

        Hacker News 의견

     * Automattic과 WPEngine 사이의 분쟁에서 Wordpress.org와 Wordpress Foundation의 자원이 이용되는 것은 부적절함
          + Automattic과 WPEngine은 경쟁자임
          + Wordpress.org와 Wordpress Foundation은 경쟁자가 아님
          + 경계가 무너짐으로 인해 Automattic과 경쟁하는 모든 이들이 불리해질 수 있음
          + 이는 제품의 전문성을 떨어뜨리고 개인이 권력을 남용할 수 있는 상황을 만듦
     * WPEngine은 기본적으로 동정받기 어려운 캐릭터임
          + WPEngine은 괜찮은 호스팅 제공자이지만, WordPress만큼의 신뢰를 쌓지 못함
          + 최근의 PR 캠페인은 잘못된 방식으로 실행됨
          + Matt의 정신 상태가 걱정됨. 그가 건강하지 않다면 도움을 받길 바람
     * 오픈 소스는 실용적이고 비즈니스 지향적으로 성장했지만, 이제는 윤리적 원칙으로 돌아가야 할 때임
          + 자유 소프트웨어는 학습과 지식을 공유하는 사회의 기초가 됨
          + 오픈 소스 커뮤니티의 분쟁은 자유 소프트웨어 운동의 윤리적 입장과 다름
          + 상업화된 웹의 희생양인지 아니면 원래 그랬는지 모르겠지만, GNU와 FSF의 원칙을 다시 살펴봐야 함
     * 관련 사건들:
          + Wordpress.org가 WP Engine 고객을 차단함
          + WP Engine이 WordPress.org에서 금지됨
          + Automattic이 WP Engine에 중지 명령을 보냄
          + WP Engine이 Automattic에 중지 명령을 보냄
     * Matt에 대한 동정심이 부족함
          + WPEngine이 WordPress 인프라를 남용한다면 차단이 정당함
          + Automattic, WordPress.com, WordPress.org, WordPress Foundation의 관계가 불명확함
          + Matt가 WordPress 상표 사용료로 수익의 8%를 요구함
     * 이 분쟁은 최악의 기업 분쟁 처리 사례임
          + WordPress 사용자가 볼 때, 호스팅 회사가 Automattic과 분쟁 시 사이트가 인질로 잡힐 수 있음
          + 누가 옳고 그른지 상관없이 이는 자해 행위임
     * Automattic에 동정하지만, 이번 결정은 잘못된 선택임
          + 오픈 소스는 비싸고, 사람들은 보상을 받아야 함
          + 기업들이 오픈 소스를 사용하지 않게 될 위험이 있음
     * Matt의 좌절을 이해하지만, 그의 접근 방식은 공공의 지지를 얻기 어려움
          + WP Engine의 플러그인 생태계 사용을 금지함으로써 실제 WP 사용자들에게 피해를 줌
"
"https://news.hada.io/topic?id=16971","httpdbg - 파이썬의 HTTP 클라이언트 요청 트레이스 & 디버깅 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               httpdbg - 파이썬의 HTTP 클라이언트 요청 트레이스 & 디버깅 도구

     * 파이썬 개발자들이 자신의 파이썬 프로그램에서 호출하는 HTTP(S) 요청을 쉽게 디버깅할 수 있게 해주는 도구
          + 의존성 없고, 셋업 없고, 슈퍼유저 권한과 코드 변경 모두 필요없음
     * python filename.py 대신 pyhttpdbg filename.py로 파이썬 프로그램을 실행한 뒤 http://localhost:4909 에 접속하면 전체 리퀘스트를 볼 수 있음
     * 주요 패키지 Initiator 지원 : requests, urllib3, httpx, aiohttp, pytest

   python만 되나보네요,,
"
"https://news.hada.io/topic?id=17059","Gumroad 가 rails 를 버리기로 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Gumroad 가 rails 를 버리기로 결정

     * Gumroad 는 Ruby on Rails 를 사용하는 대표적인 회사 중 한 곳
     * CEO 는 최근 ""TypeScript/React/Next 는 피할 수 없는 미래""라며, 공식적으로 rails 를 버리기로 결정하였음
     * 같은 글에서, https://shortest.com/ 라는 새로운 오픈소스를 소개함. (PR 을 보고 테스트를 짜는 AI 프로그램인데, 이제 출발하는 프로젝트로 보입니다)

   저자의 의견은 존중하지만, 아무래도 아쉬운 글이네요. 레거시라는 표현이 오랜 시간 가치를 쌓아왔고 존중한다는 의미보다, 낡고 사라져야하는 잔재처럼 표현하는 것이 아쉽습니다.

   저자는 단순히 Ruby와 Rails가 다른 도구보다 10년은 오래되었다는 이유로 ""Legacy"" 라고 언급하는데,,Ruby on Rails는 여전히 활발하게 개발되는 웹프레임워크이며, 곧 정식 출시되는 8 버전에서도 많은 변화를 가져옵니다. 레일스는 다른 웹프레임워크들이 시대에 따라 나타났다 사라짐에도 불구하고 여전히 가장 많이 사용되는 웹프레임워크 중 하나이구요.

   동의합니다. 자기 주장을 위해 굳이 안해도 되는 표현을 몇 개 섞은 느낌이예요.

   Gumroad가 Htmx를 선택하지 않은 이유 글도 함께 읽어보세요.

   헉 이 글도 긱뉴스에 올리려고 했는데!! 링크만으로는 긱뉴스에 올라왔는지 확인이 좀 어렵군요 ㅎㅎ

   글 등록시에 URL 입력하면 해당 URL이 기존에 등록되었는지 검사해서 알려줍니다.
   저도 가끔 올리고 나서 까먹을 때가 있어서 기능을 간단히 만들어놨습니다.

   일단 사람을 구할 수가 없는 것 같더라구요
   저희 회사도 한때 내부 도구 개발 언어를 루비로 썼던 것 같은데, 요즘은 다 Go로 전환 했습니다.

   루비, 레일즈 개발자를 구하기 어려운 것은 국내 한정적인 상황으로 보입니다.

   저는 미국이긴 합니다만... 아무래도 루비 개발자 구하기가 자바스크립트 개발자 보다는 어렵다는게 주변의 중론이긴 했습니다...

   그런 상황이군요

   위 발언 철회했습니다.

   레일스는 기술 부채가 아니에요: 과거의 발언을 철회한 Gumroad Founder
   https://news.hada.io/topic?id=20804
"
"https://news.hada.io/topic?id=16993","FTC 보고서 확인: 상업적 감시 통제 불능 상태","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      FTC 보고서 확인: 상업적 감시 통제 불능 상태

    연방거래위원회(FTC) 보고서: 기술 대기업의 개인정보 수집 및 공유

     * 연방거래위원회(FTC)의 새로운 보고서는 기술 대기업들이 온라인 행동 광고 사업을 위해 개인 정보를 광범위하게 수집하고 공유하고 있음을 확인함
     * Facebook, YouTube, X(구 Twitter) 등 9개의 소셜 미디어 및 비디오 플랫폼의 데이터 관행에 대한 4년간의 조사를 통해 상업적 감시가 소비자의 개인정보 통제권을 거의 없애고 있음을 보여줌
     * 조사된 모든 회사가 동일한 개인정보 침해를 저지른 것은 아니지만, 결론은 명확함: 회사들은 개인정보 보호보다 이익을 우선시함

    소비자 기대를 훨씬 초과하는 개인정보 수집

     * FTC 보고서는 회사들이 사용자 기대를 훨씬 초과하는 방식으로 데이터를 수집하고 있음을 확인함
     * 플랫폼 활동뿐만 아니라 다른 웹사이트와 앱에서의 활동도 추적하며, 비사용자에 대한 데이터도 수집하고 제3자 데이터 브로커로부터 개인 정보를 구매함
     * 일부 회사는 사용자 데이터의 출처를 정확히 밝힐 수 없거나 밝히기를 거부함
     * 방문한 웹사이트, 위치 데이터, 인구 통계 정보, 관심사(예: 이혼 지원, 주류) 등 상세한 개인 정보를 수집함

    제3자와의 무제한 데이터 공유

     * 회사들이 수집한 개인 정보를 제3자와 광범위하게 공유함
     * 일부 회사는 개인 정보를 공유한 모든 제3자 목록을 제공할 수 없다고 주장함
     * 수신자를 식별할 수 있는 회사의 경우, 목록에는 법 집행 기관과 미국 내외의 다른 회사들이 포함됨
     * 대부분의 회사는 데이터를 공유하기 전에 제3자를 검토하지 않으며, 데이터 사용 제한 준수를 보장하기 위한 지속적인 검토도 하지 않음
     * 데이터 공유에 대한 보호 장치가 부족하여 소비자에게 상당한 개인정보 위험을 초래함

    소비자는 무지 상태에 놓임

     * FTC 보고서는 개인 데이터가 어떻게 수집되고 공유되며 사용되는지에 대한 투명성이 부족함을 드러냄
     * 회사들이 FTC에 데이터 공유 대상자를 알리지 못한다면, 사용자에게 정직하게 알릴 수 있을지 의문임
     * 데이터 추적 및 공유는 배후에서 이루어지며, 사용자는 자신이 얼마나 많은 개인정보를 포기하고 있는지 거의 알지 못함
     * 일부 회사는 삭제 요청에 응답하여 사용자 데이터를 실제로 삭제하지 않음

    감시 광고 비즈니스 모델이 근본 원인

     * FTC 보고서는 이러한 개인정보 침해가 단순한 실수가 아니라 온라인 행동 광고의 비즈니스 모델에 내재된 문제임을 강조함
     * 회사들은 주로 타겟 광고를 위해 상세한 사용자 프로필을 만들기 위해 방대한 데이터를 수집함
     * 개인정보를 기반으로 한 광고 타겟팅에서 발생하는 이익이 회사들이 점점 더 침해적인 데이터 수집 방법을 개발하도록 유도함

    FTC 보고서가 강조하는 긴급한 입법 필요성

     * 연방 개인정보 보호법이 없으면 회사들은 적은 보호 장치로 수십억 명의 사용자 개인 정보를 수집하고 공유할 수 있음
     * FTC 보고서는 자율 규제가 실패했음을 확인함: 회사들의 내부 데이터 개인정보 보호 정책은 일관성이 없고 불충분함
     * EFF는 연방 개인정보 보호법 제정을 촉구함. 주요 요소는 다음과 같음:
         1. 데이터 최소화 및 사용자 권리: 회사들은 사용자가 요청한 것 이상으로 데이터를 처리하지 못하도록 금지해야 함. 사용자는 자신의 데이터를 접근, 이동, 수정, 삭제할 권리가 있어야 함
         2. 온라인 행동 광고 금지: 상업적 감시의 근본 원인을 해결하기 위해 행동 광고를 금지해야 함
         3. 강력한 집행과 개인 소송권: 개인정보 보호법에 실효성을 부여하기 위해 사람들은 개인정보를 침해한 회사를 상대로 소송을 제기할 권리가 있어야 함

    GN⁺의 정리

     * FTC 보고서는 기술 대기업들이 개인정보를 수집하고 공유하는 방식에 대한 심각한 문제를 제기함
     * 상업적 감시의 규모와 비밀성은 개인 소비자가 개인정보를 보호하는 데 한계가 있음을 보여줌
     * 연방 개인정보 보호법 제정이 시급하며, 이는 데이터 최소화, 행동 광고 금지, 강력한 집행을 포함해야 함
     * 유사한 기능을 가진 제품이나 프로젝트로는 DuckDuckGo, Brave 브라우저 등이 있음

        Hacker News 의견

     * 한 회사가 방문자의 작업 이력, 신용 보고서, 은행 잔고를 500ms 이내에 확인할 수 있는 기술을 시연했음
          + 이 정보를 사용하여 영업팀이 잠재 고객을 선별하는 제품을 제공함
          + 윤리적 문제에 대한 고민 없이 데이터를 사고파는 것에 대해 불편함을 느낌
     * 기업이 항상 이익을 최우선으로 선택하는 것을 모두 알고 있음
          + 강력한 규제가 있을 때만 의미 있는 진전이 있음
          + EPA의 사례처럼 규제가 없으면 심각한 환경 문제가 발생함
     * 인터넷 개발이 보수적인 리더십 하에서 가속화되었음
          + 많은 혁신이 있었지만, 이익 중심의 환경 때문에 더 많은 성과를 이루지 못했을 것이라고 생각함
     * 기사 시작 부분에 보고서 링크가 있음
          + 링크1
          + 링크2
     * 신용 기관과 은행이 저장하는 정보가 더 무서움
          + 최근 다크 웹에서 이 정보를 쉽게 찾을 수 있음
     * 이미 10년 전에 상황이 악화되었음
          + 정부가 감시 독점을 가지는 것이 최악의 결과라고 생각함
          + 법적으로 개인 정보 수집을 관리하는 것이 필요함
     * 4년간의 조사가 이미 알고 있는 사실을 알려줌
          + 중요한 것은 정부나 다른 기관이 무엇을 할 것인지임
     * 광고 산업이 군산복합체보다 더 나쁘다고 생각하게 되었음
          + 광고 산업의 임원들이 처벌받기를 바람
     * 국가가 사기업의 감시를 규제하는 것은 위선이라고 생각함
          + 사기업의 데이터 수집 기술을 사용하지 않을 선택이 있음
          + 국가의 감시를 피할 수 없음
     * 조사된 모든 회사가 동일한 프라이버시 침해를 저지르지는 않았음
          + 기업이 이익을 우선시하는 것은 자본주의 주주 시스템의 요구임
          + 시민들이 규제를 요구해야 하지만, 미국에서는 많은 사람들이 규제를 싫어함
          + 기업이 정치인들을 통제하고, 대중의 이해도가 낮아 현실적으로 할 수 있는 것이 없음
          + 미국에서 감시 자본주의는 영구적일 것이라고 생각함
     * 최적의 글로벌 가격 책정이 모든 것을 최대한 비싸게 만들 것임
          + 사람들이 소비를 줄이고 더 불행해질 것임
"
"https://news.hada.io/topic?id=16981","AlphaChip이 컴퓨터 칩 설계를 혁신한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AlphaChip이 컴퓨터 칩 설계를 혁신한 방법

     * 2020년에 칩 레이아웃을 설계하기 위한 새로운 강화 학습 방법을 소개하는 preprint를 발표함
     * 이 방법은 나중에 Nature에 게재되었고 오픈 소스로 제공됨
     * 오늘 우리는 이 방법과 칩 설계 분야에 미친 영향에 대해 자세히 설명하는 Nature addendum을 발표함
     * 또한 사전 훈련된 체크포인트를 공개하고 모델 가중치를 공유하며 AlphaChip이라는 이름을 발표함
     * 컴퓨터 칩은 인공지능(AI)의 놀라운 발전을 이끌었고, AlphaChip은 AI를 활용하여 칩 설계를 가속화하고 최적화함
     * 이 방법은 Google의 맞춤형 AI 가속기인 Tensor Processing Unit(TPU)의 최근 3세대에서 초인적인 칩 레이아웃을 설계하는 데 사용됨
     * AlphaChip은 실제 엔지니어링 문제를 해결하는 데 사용된 최초의 강화 학습 접근 방식 중 하나임
     * 수주 또는 수개월의 인력 투입 대신 몇 시간 만에 초인적이거나 비슷한 수준의 칩 레이아웃을 생성하며, 이러한 레이아웃은 전 세계의 데이터 센터부터 모바일 폰까지 다양한 칩에 사용됨

AlphaChip의 작동 방식

     * 칩 레이아웃을 설계하는 것은 간단한 작업이 아님
     * 컴퓨터 칩은 많은 상호 연결된 블록으로 구성되어 있으며, 회로 구성 요소의 계층과 매우 얇은 와이어로 모두 연결되어 있음
     * 또한 동시에 충족해야 하는 복잡하고 얽혀있는 많은 설계 제약 조건이 있음
     * 그 복잡성 때문에 칩 설계자들은 60년 넘게 칩 플로어플래닝 프로세스를 자동화하는 데 어려움을 겪어 왔음
     * AlphaGo와 AlphaZero와 유사하게, 우리는 AlphaChip이 칩 플로어플래닝을 일종의 게임으로 접근하도록 구축함
     * 빈 그리드에서 시작하여 AlphaChip은 한 번에 하나의 회로 구성 요소를 배치하고, 모든 구성 요소 배치를 완료할 때까지 이를 반복함
     * 그런 다음 최종 레이아웃의 품질에 따라 보상을 받음
     * 새로운 ""에지 기반"" 그래프 신경망을 통해 AlphaChip은 상호 연결된 칩 구성 요소 간의 관계를 학습하고 칩 전반에 걸쳐 일반화할 수 있어, 설계하는 각 레이아웃마다 향상될 수 있음

AI를 사용하여 Google의 AI 가속기 칩 설계하기

     * AlphaChip은 2020년 발표 이후 Google의 TPU 모든 세대에 사용되는 초인적인 칩 레이아웃을 생성해 왔음
     * 이러한 칩은 Google의 Transformer 아키텍처를 기반으로 대규모 AI 모델을 가능하게 함
     * TPU는 Gemini와 같은 대규모 언어 모델부터 Imagen 및 Veo와 같은 이미지 및 비디오 생성기에 이르는 강력한 생성 AI 시스템의 핵심에 있음
     * 이러한 AI 가속기는 Google의 AI 서비스의 핵심이기도 하며 Google Cloud를 통해 외부 사용자에게 제공됨
     * TPU 레이아웃을 설계하기 위해 AlphaChip은 먼저 온칩 및 칩 간 네트워크 블록, 메모리 컨트롤러 및 데이터 전송 버퍼와 같은 이전 세대의 다양한 칩 블록에서 연습함 (이를 사전 훈련이라고 함)
     * 그런 다음 현재 TPU 블록에서 AlphaChip을 실행하여 고품질 레이아웃을 생성함
     * 이전 접근 방식과 달리 AlphaChip은 인간 전문가와 유사하게 더 많은 칩 배치 작업 인스턴스를 해결할수록 더 나아지고 빨라짐
     * AlphaChip은 최신 Trillium(6세대)를 포함한 각 새로운 TPU 세대마다 더 나은 칩 레이아웃을 설계하고 전체 플로어플랜의 더 많은 부분을 제공하여 설계 주기를 가속화하고 더 높은 성능의 칩을 생산해 왔음

AlphaChip의 광범위한 영향

     * Alphabet, 연구 커뮤니티 및 칩 설계 업계 전반에 걸친 애플리케이션을 통해 AlphaChip의 영향을 볼 수 있음
     * TPU와 같은 특수 AI 가속기 설계를 넘어 AlphaChip은 Google의 첫 번째 Arm 기반 범용 데이터 센터 CPU인 Axion 프로세서와 같은 Alphabet 전반의 다른 칩에 대한 레이아웃을 생성해 왔음
     * 외부 조직에서도 AlphaChip을 채택하고 이를 기반으로 구축하고 있음 (예: 세계 최고의 칩 설계 회사 중 하나인 MediaTek은 삼성 휴대폰에 사용되는 Dimensity Flagship 5G와 같은 가장 진보된 칩의 개발을 가속화하면서 전력, 성능 및 칩 면적을 개선하기 위해 AlphaChip을 확장함)
     * AlphaChip은 칩 설계를 위한 AI 작업의 폭발을 촉발했으며, 논리 합성 및 매크로 선택과 같은 칩 설계의 다른 중요한 단계로 확장되었음

미래의 칩 만들기

     * 우리는 AlphaChip이 컴퓨터 아키텍처에서 제조에 이르기까지 칩 설계 주기의 모든 단계를 최적화할 잠재력이 있다고 믿음
     * 스마트폰, 의료 장비, 농업 센서 등 일상 기기에서 발견되는 맞춤형 하드웨어의 칩 설계를 혁신할 수 있음
     * AlphaChip의 향후 버전은 현재 개발 중이며, 우리는 이 분야를 계속 혁신하고 칩이 더 빠르고 저렴하며 전력 효율적인 미래를 만들기 위해 커뮤니티와 협력하기를 기대함

GN⁺의 의견

     * AlphaChip의 AI 기반 접근 방식은 칩 설계 분야에 혁명을 일으키고 있음. 특히 칩 레이아웃 설계 프로세스를 자동화하는 데 큰 진전을 이루었음
     * AlphaChip은 실제 엔지니어링 문제에 강화 학습을 적용한 초기 사례 중 하나이며, 이는 AI가 실제 세계에서 어떻게 활용될 수 있는지 보여주는 좋은 예임
     * AlphaChip이 TPU 설계에 미친 영향은 AI 가속기 하드웨어 발전에 있어 중요한 이정표가 될 것임. 더 나은 AI 가속기는 더 강력한 AI 모델을 가능하게 할 것이고, 이는 다시 AI 발전을 더욱 가속화할 것임
     * 그러나 AI 설계 도구에 대한 과도한 의존은 인간 설계자의 전문 지식 상실로 이어질 수 있음. 장기적으로는 AI와 인간 전문가의 협업이 가장 바람직할 것임
     * 유사한 AI 기반 설계 도구로는 Cadence의 Cerebus, Synopsys의 DSO.ai 등이 있음. 앞으로 AI 기반 설계 자동화 도구 간 경쟁이 치열해질 것으로 보임

        Hacker News 의견

     * Google의 Nature 논문은 EDA CAD 분야 연구자들로부터 비판을 받음
          + Google 내부 연구자의 반박 논문: ""Stronger Baselines for Evaluating Deep Reinforcement Learning in Chip Placement""
          + UCSD 연구팀의 2023 ISPD 논문: ""Assessment of Reinforcement Learning for Macro Placement""
          + Igor Markov의 비판 논문: ""The False Dawn: Reevaluating Google's Reinforcement Learning for Chip Macro Placement""
     * Google의 RL 매크로 배치 알고리즘은 다른 최신 알고리즘과 공정하게 비교되지 않았음
          + 인간보다 매크로 배치에서 더 나은 성능을 주장하지만, 이는 현재 혼합 배치 알고리즘의 성능에 미치지 못함
          + RL 기술은 다른 알고리즘보다 더 많은 컴퓨팅 자원을 필요로 하며, 배치 문제 자체의 새로운 표현을 학습하는 것이 아니라 대체 함수를 학습함
     * Google의 작업에 대해 회의적이며, 개인 웹사이트에 자세한 게시물을 작성함
     * Google의 연구자들이 괴롭힘을 당해 Anthropic으로 이직한 사례가 있음
          + 관련 기사: ""Google Brain AI Researcher Fired Tension""
     * TSMC는 최신 칩 설계 자동화 소프트웨어가 TDP를 위한 논리 설계를 선택할 수 있는 기능을 강조함
          + 이는 Dennard scaling을 유지하는 방법일 수 있음
          + 빛의 속도와 물리적 근접성은 여전히 중요하지만, 열 스로틀링을 피하는 것이 얼마나 많은 이점을 가져올지 궁금함
     * 칩 설계 품질 측정 방법에 대한 질문
          + Google이 보고하는 메트릭이 타당한지, 아니면 단순히 자신들을 좋게 보이게 하려는 것인지 궁금함
          + 칩 설계의 ""품질""은 다면적이며 사용 사례에 크게 의존함
          + 데이터 센터용 칩과 모바일 폰 카메라 또는 자동차용 칩은 매우 다르게 보일 것임
          + 이 특정 문제/작업에서 ""더 나은"" 것이 무엇을 의미하는지 궁금함
     * Eurisco는 한때 배치 및 라우팅 작업을 수행하는 데 사용되었으며, 매우 잘 수행했음
          + Eurisco는 Traveler TCS 게임의 전투 우주선 함대를 설계하는 데 사용됨
          + Eurisco는 VLSI 설계에서 학습한 대칭 기반 배치를 사용함
          + AlphaChip의 휴리스틱이 다른 곳에서도 사용될 수 있는지 궁금함
     * Google의 칩 설계 작업은 ""논란의 여지가 있음""
          + 새로운 것을 하지 않고 PR만 하는 이유가 궁금함
     * 많은 DeepX 논문이 적절한 CS 포럼 대신 Nature에 제출되는 문제
          + 칩 설계에서 더 나은 작업을 하고 있다면 IPSD나 ISCA 등에 제출해야 함
          + Nature가 이러한 논문을 어떻게 처리하는지 알 수 없음
     * ""초인적""이라는 표현을 계속 사용하는 이유가 궁금함
          + 알고리즘이 이러한 작업에 사용되며, 인간이 수조 개의 트랜지스터를 손으로 배치하지 않음
     * PCB 설계/레이아웃을 위한 도구가 있었으면 좋겠음
     * 메모리 기반 컴퓨팅이 연구에서 경쟁력 있는 제품으로 전환되는 시점에 얼마나 가까운지 궁금함
          + 메모리스터와 같은 실험을 대규모로 확장하기 위해 매우 적극적으로 투자할 시점에 도달했다고 생각함
          + AI 데이터 센터를 위해 몇 개의 새로운 원자로가 필요할지 논의하고 있음
"
"https://news.hada.io/topic?id=17070","헬렌 허리케인 피해자들을 위한 30일 무료 인터넷 접속 제공 Starlink 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             헬렌 허리케인 피해자들을 위한 30일 무료 인터넷 접속 제공 Starlink 서비스

허리케인 헬렌 구호

     * Starlink은 자연재해로 영향을 받은 사람들이 인터넷 연결을 이용할 수 있도록 지원하는 것을 목표로 함
     * 허리케인 헬렌으로 영향을 받은 지역에서는 Starlink가 첫 달 무료 서비스를 일시적으로 제공 중임
     * 이 30일 무료 서비스 옵션을 이용하려면 아래의 절차를 따를 것

  신규 고객

     * starlink.com/residential로 이동
     * 주소 입력 후 ""지금 주문"" 클릭
     * ""Helene Relief"" 서비스 플랜 선택 후 결제
     * 주의: 헬렌으로 영향을 받은 서비스 지역만 ""Helene Relief"" 옵션이 표시됨. $0 옵션이 보이지 않으면 해당 지역은 자격이 없음. 오류라고 생각되면 지원팀에 연락

  소매업체에서 구매한 추가 키트를 활성화하는 기존 고객

     * starlink.com/activate로 이동
     * Starlink 키트 식별자 입력
     * 주소 입력 후 검색 클릭
     * ""Residential"" 선택
     * ""Helene Relief"" 서비스 플랜 선택 후 결제
     * 여러 키트를 추가하는 경우 각 키트에 대해 반복
     * 주의: 응급 대응 그룹을 위한 대규모 계정 활성화 지원을 위해 임시로 계정당 키트 한도를 20개로 증가시킴. 20개 이상의 키트를 추가해야 하는 경우 지원팀에 헬렌 지원 요청

  기존 고객

     * 허리케인 헬렌으로 인해 지원이 필요한 경우, 헬렌 구호 크레딧을 요청하는 지원 티켓 생성
     * 팀이 위의 영향을 받은 지역을 기준으로 자격을 평가

  알아야 할 기타 정보

     * 30일 후에는 사용 중인 위치에 따라 유료 Residential 구독으로 전환됨. 지역 상황에 따라 필요 시 재평가
     * 재난 지역 외부로 키트를 이전하거나 무료 서비스를 계속하는 데 제한이 있을 수 있음. 필요한 경우 추가 세부 정보 제공 예정
     * 최신 정보를 제공하기 위해 이 기사를 계속 업데이트할 예정

GN⁺의 정리

     * Starlink의 허리케인 헬렌 구호 프로그램은 자연재해로 인한 인터넷 연결 문제를 해결하는 데 도움을 줌
     * 이 프로그램은 재난 지역 주민들에게 중요한 통신 수단을 제공하며, 응급 대응을 지원하는 데 유용함
     * Starlink의 빠른 설치와 넓은 커버리지는 다른 인터넷 서비스 제공업체와 차별화되는 장점임
     * 유사한 기능을 가진 다른 프로젝트로는 OneWeb과 Amazon의 Kuiper 프로젝트가 있음
"
"https://news.hada.io/topic?id=17039","당신은 [무엇]을 [어떻게] 팔 것인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        당신은 [무엇]을 [어떻게] 팔 것인가요?

   [쁘띠 스마트스토어 양수양도 후 밸류업 시리즈]

   “쁘띠 스마트스토어 양수양도 후 밸류업” 시리즈는 작은 스마트스토어를 인수해 밸류업시키는 과정을 창업가의 시점으로 생동감 있게 풀어내는 콘텐츠입니다.

   1화 - 개발자에서 사장으로: 1000만원의 인수, 두 달 만에 회수
   2화 - 밸류업 전략의 결정: 해외 브랜드 판권을 따내다 1탄
   3화 - 벨류업 전략의 실행: 해외 브랜드 판권을 따내다 2탄 (이번편)
   최종화 - 사장에서 백수로: 유아 법인 매각 성공 스토리 대공개

   내용 요약
     * [무엇]을 [어떻게] 파느냐가 곧 유통에서의 사업 전략이다.
     * ""당신이 좋아하는 것을 팔아라!""는 안전한 전략이지, 항상 옳은 전략은 아니다.
     * 내 전략으로 해외 판권을 따내어서 사업체의 가치를 몇배로 증대시켰다.
     * 이번 글에서 사업 전략을 알려주는 것이 아닌, 스타트업이 사업 전략을 도출하는 사고법을 공유하고자 한다.
"
"https://news.hada.io/topic?id=16962","미 법원, LibGen에 출판사에 3천만 달러 배상 명령 및 광범위한 금지 명령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미 법원, LibGen에 출판사에 3천만 달러 배상 명령 및 광범위한 금지 명령

     * 뉴욕 연방 법원이 그림자 도서관 LibGen 운영자에게 저작권 침해 손해배상금으로 3천만 달러를 지급하라고 명령함
     * 이 기본 판결은 도메인 등록 기관, 브라우저 확장 프로그램, CDN 제공자, IPFS 게이트웨이, 광고주 등 제3자 서비스에 영향을 미치는 광범위한 금지 명령을 포함함
     * 이러한 당사자들은 해적 사이트에 대한 접근을 중단해야 함

  출판사 대 LibGen

     * 교과서 출판사 Cengage, Bedford, Macmillan Learning, McGraw Hill, Pearson Education이 LibGen을 상대로 저작권 침해 소송을 제기함
     * 원고들은 LibGen이 최소 20,000개의 저작권 보호 작품을 무단 배포한다고 주장함
     * LibGen은 필요시 도메인 이름을 쉽게 변경하고 IPFS와 같은 검열 저항 분산 호스팅 기술을 사용함

  법원이 LibGen에 3천만 달러 지급 명령

     * 미국 지방법원 판사 Colleen McMahon이 기본 판결을 승인함
     * LibGen 운영자들은 고의적인 저작권 침해에 대해 책임이 있으며 그들의 활동을 중단해야 함
     * 피고는 작품당 최대 법정 손해배상금 150,000달러, 총 3천만 달러를 공동으로 지급해야 함

  금지 명령이 도메인, IPFS 게이트웨이 등을 대상으로 함

     * 출판사들은 3천만 달러 손해배상 외에도 광범위한 금지 명령을 요구함
     * 법원은 광고 네트워크, 결제 처리기, 호스팅 제공자, CDN 서비스, IPFS 게이트웨이 등 제3자 서비스가 사이트 접근을 제한하도록 명령함
     * 브라우저 확장 프로그램과 기타 도구도 금지 명령 대상에 포함됨

  도메인 이름 압류

     * 법원 명령은 도메인 이름 등록 기관과 등록 기관이 모든 활성 LibGen 도메인을 비활성화하거나 출판사에게 이전하도록 요구함
     * Libgen.is, Libgen.rs, Libgen.li 등 여러 도메인이 포함됨
     * 출판사들은 새로운 도메인 이름도 압류할 수 있도록 법원에 요청함

  GN⁺의 정리

     * 이 기사는 LibGen과 같은 그림자 도서관이 저작권 침해로 인해 법적 문제에 직면하고 있음을 보여줌
     * 법원의 금지 명령은 제3자 서비스 제공자에게도 영향을 미쳐, 해적 사이트 접근을 차단하려는 시도를 강화함
     * LibGen의 익명성으로 인해 실제 손해배상금 지급 가능성은 낮음
     * 유사한 기능을 가진 프로젝트로는 Sci-Hub 등이 있음

        Hacker News 의견

     * libgen과 z-library는 인류에게 러시아가 기여한 가장 큰 자선 활동 중 하나임
          + 전략적 관점에서, 적의 수익성 높은 교과서 출판업을 무너뜨리면서 소프트 파워를 크게 증가시킴
          + 많은 예술가와 독립 기술 저자들이 피해를 입었지만, 개발도상국의 수백만 명에게 큰 혜택을 줌
          + 특히 유기 화학이나 전기 공학 같은 필수 주제의 교과서를 $100 이상 지불할 수 없는 사람들에게 유익함
     * 교과서 출판사 Cengage, Bedford, Macmillan Learning, McGraw Hill, Pearson Education은 더 나은 결과를 희망함
          + 구독 모델, 제한적인 전자책 라이선스, 번들링, 일회용 코드, 불필요한 개정 등을 추진하여 첫 판매 원칙을 제거하려 함
     * 현대 인터넷에서는 사이트 운영자를 알 필요 없이 사이트를 차단할 수 있음
          + 이미 알려진 도메인을 차단하는 법원 명령이 있으며, 등록 기관은 20일 내에 이를 준수해야 함
          + 작동하지 않을 경우, 많은 국가에서 저작권 소유자가 ISP에게 특정 링크에 대한 접근을 차단하도록 요청할 수 있는 시스템이 있음
     * Libgen, Annas-Archive 등이 TOR의 onion 서비스로만 운영되지 않는 이유에 대한 질문이 있음
     * 사이트 전체가 차단되더라도 운영자는 다른 도메인으로 동일한 것을 배포할 수 있음
          + 실제 서버 인프라를 오프라인으로 전환해야 하며, 이를 위한 정보가 충분하지 않음
     * libgen이 종종 유일하게 책을 구할 수 있는 곳임
     * ""원고는 피고의 불법 행위로 인해 회복할 수 없는 피해를 입었으며, 피고가 Libgen 사이트 운영을 계속할 경우 회복할 수 없는 피해를 입을 것""이라는 명령이 있음
          + 증거가 무엇인지에 대한 질문이 있음
     * 기사에서 libgen을 linkedin으로 오타 냄
          + 명령에서 McMahon은 LinkedIn 도메인의 등록 기관에게 21 영업일 내에 도메인을 출판사로 이전하거나 도메인 이름을 사용할 수 없도록 기술적 조치를 취할 것을 지시함
     * 인도에서 접속 중이며 이미 원래 libgen 사이트에 접근할 수 없음 (libgen.rs, libgen.st)
          + 인도 ISP는 사이트 차단 요청이 있을 때 즉시 차단함
     * URL이 변경됨
          + 제출자는 원본 소스를 제출해달라고 요청함
"
"https://news.hada.io/topic?id=16951","CSS Grid Level 3 / Masonry(벽돌 쌓기) 레이아웃의 첫 Draft 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           CSS Grid Level 3 / Masonry(벽돌 쌓기) 레이아웃의 첫 Draft 공개

     * CSS 작업 그룹이 CSS Grid Layout Module Level 3, 일명 CSS 벽돌 쌓기 레이아웃(Masonry Layout)의 첫 공개 작업 초안을 발표함
     * 이 초안은 두 가지 가능한 구문 형식인 그리드 통합 구문과 그리드 독립 구문으로 벽돌 쌓기 레이아웃을 CSS의 내장 기능으로 다룸
     * 이 초안의 발행으로 두 구문 형식의 상대적 장점에 대한 논의를 촉진하기를 희망함

CSS 작업 그룹의 결정사항

     * CSS 작업 그룹은 이 레이아웃 모델에 완전한 혼합 트랙 크기 조정을 채택하기로 결의함
     * 이는 CSS 그리드 레이아웃에서 표현할 수 있는 모든 가능한 트랙 목록을 벽돌 쌓기 레이아웃에서도 허용함
     * 이는 두 제안서의 기본 레이아웃 모델을 통합하며, 따라서 두 구문 형식 모두 벽돌 쌓기 레이아웃에 대해 본질적으로 동등한 기능을 나타냄 (초기값의 차이에 대한 일부 미해결 이슈가 있음)
     * 혼합 트랙 크기 조정과 관련된 성능 문제를 해결하기 위해, 이 초안은 레이아웃 모델에서 특정 성능 최적화를 개략적으로 설명하고 하위 그리드 등에 대한 일부 단순화 경험 법칙을 채택함

   당장에 야매로 쓰고 싶은 분들이라면 이 속성을 쓰면 되기는 됩니다.
   https://developer.mozilla.org/en-US/docs/Web/CSS/columns
   물론 목적에서 벗어나긴 하죠. 왜냐면 이 속성은 레이아웃을 위한 속성이 아니라 페이지를 위한 속성이니까요. 특히 인쇄 방향으로.

   Masonry Layout 은 MDN에 잘 설명되어 있습니다.
   https://developer.mozilla.org/en-US/docs/…

   WebKit 팀에서도 4월에 이에 대한 도움 요청글을 적은 바 있습니다
   CSS Grid Level 3, 일명 ""Masonry"" 레이아웃을 만들기 위한 도움 요청
   이 글엔 Masonry 레이아웃에 대한 예제 기반 설명 이미지가 포함되어 있으니 참고하세요
"
"https://news.hada.io/topic?id=17052","Meta의 마크 저커버그가 만들고자 하는 미래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Meta의 마크 저커버그가 만들고자 하는 미래

   #메타의 AR/VR 기술 개발
     * 메타는 10년 동안 증강현실(AR: Augmented Reality) 안경을 개발해 왔으며, 최초의 완전 홀로그래픽 AR 안경을 만들었습니다.
     * 이 안경에는 소형화된 컴퓨팅, 프로젝터, 웨이브가이드, 시선 추적, 카메라 및 기타 구성 요소가 포함되어 있습니다.
     * 목표는 원격으로 다른 사람들과 상호작용할 때 ""존재감""을 제공하는 것입니다.
     * 원격으로 터치를 구현하는 햅틱 등 피드백 기술을 개발 중이지만, 완전한 물리적 터치 시뮬레이션은 여전히 어려운 과제입니다.

   #AI와 개인화
     * 메타는 안경의 센서로부터 맥락을 이해하는 개인화된 AI를 개발하고 있습니다.
     * 실시간으로 보고 듣는 것에 맞춰진 AI 지원을 제공하는 것이 목표입니다.
     * 개발자들이 다양한 AI 애플리케이션을 구축할 수 있도록 AI 모델을 오픈소스화하고 있습니다.

   #사회적 연결과 기술
     * 데이터에 따르면 미국인들은 과거보다 친한 친구가 더 적어졌습니다.
     * AR/VR이 기존 연결을 대체하지 않고 더 많은 연결을 가능하게 할 것이라고 믿습니다.
     * 목표는 현실을 대체하는 것이 아니라 사회적 상호작용의 기회를 더 많이 열어주는 것입니다.

   #소셜 미디어의 변화
     * 원래 소셜 네트워크는 현실 세계의 친구들 사이의 소통을 위해 만든 것인데, 요즘은 인플루언서와 대중의 1:N 소통 채널로 사용됩니다.
     * AI의 도움을 받으면 대충 찍은 영상 가지고도 손쉽게 인터넷 밈이 될 콘텐츠를 만들 수 있게 될 것입니다.
     * 낮아진 난이도를 통해 누구나 크리에이터가 될 수 있을 것이고 AI를 잘 활용하는 크리에이터는 AI 인플루언서를 만들 수도 있을 것입니다.
     * 개인화된 AI 생성 콘텐츠로 소셜 미디어 경험이 바뀔 거라고 생각합니다.

   #급격한 변화에 대처하는 방법
     * 호기심을 유지하세요
     * 앞으로의 10년을 예상하는 건 쉽지 않습니다.
     * 기술은 점진적으로 발전합니다.
     * 호기심이 많고, 새로운 것을 실험하고 사용해보는 사람은 잘 적응해나갈 것입니다.

   #오픈소스 AI 개발에 대한 입장
     * 다양한 AI 시스템 개발을 위해서 오픈소스 접근을 선호합니다.
     * 오픈소스가 더 안전하고 발전된 AI 모델 개발에 기여할 것으로 전망합니다.
     * 중앙집중식 접근보다 다양성과 혁신을 촉진할 것으로 기대합니다.

   #AI 기술의 발전 전망
     * 현재 AI 아키텍처가 지속적으로 확장 가능할지 우려가 되긴 합니다.
     * 당분간은 대규모 컴퓨팅 인프라 투자를 통한 AI 능력 향상을 지속할 수 있을 걸로 예상하고 있습니다.
     * 앞으로 20년간 기술 발전의 동력이 될 것으로 전망합니다.

   미래의 진짜 주인공은 메타버스입니다. 누가먼저 시작하느냐에 따라. 운명이 달라질 것입니다. 인공지능은 메타버스의 하위기술입니다.

  건강한 부자 평안한 천국 _방이선생

   위 문장을 구글링 해 봤습니다.
   흥미롭군요.

   메타는 한 번도 llama를 ""오픈소스""라고 한적 없다고 들었는데 맞나요?

   Introducing Meta Llama 3: The most capable openly available LLM to date에 보시면 ""Today, we’re introducing Meta Llama 3, the next generation of our state-of-the-art open source large language model.""(오늘 우리는 최첨단 오픈 소스 대규모 언어 모델의 차세대 버전인 Meta Llama 3를 소개합니다.)

   라고 적혀있네요.
"
"https://news.hada.io/topic?id=17011","Show GN: 로컬 파일 이름 바꾸기 자동화 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 로컬 파일 이름 바꾸기 자동화 도구

   폴더선택하고, 대략 원하는거 적으면
   바로 파일이름을 바꿔줍니다.
   코드작성도 정규식도 다 필요없습니다.

  자세한 설명

   파일 이름을 모두 바꿔야 할때가 간혹있는데..
   코드를 짜기도 뭐하고, gpt에서 정규식 만들기도 귀찮고.
   버튼이 50개 넘는 이름변경 도구를 쓰자니 짜증나고..
   이 모든걸 하나로 끝내는 도구를 만들어 봤습니다.
   예전같으면 코드작성이 필요한 작업들을 10초면 완료할수 있습니다.

   파일을 업로드하거나 파일이름을 업로드하는 방식은 아니고,
   모두 로컬에서 동작합니다.

   사진정리를 하도록 도와주면 좋겠네요.

   고민해보겠습니당...

   파일 이름이 monospace 글꼴로 나오면 더 편리할 것 같습니다.
   시험삼아 임의의 UUID로 이름을 변경해달라고 했는데, 글꼴의 폭이 달라 전부 동일한 길이의 형식으로 이름이 변경된건지 한눈에 확인할 수가 없더라구요.

   수정했습니다. 의견 주셔서 감사합니다.

   앗 넵 수정하겠습니다..

   브라우저 확장프로그램으로 가능하다면 더 편리할 것 같습니다

   고민해보겠습니다

   비슷한 질문이 이메일로 많이 와서 적어봅니다.
   이런건 안되요--;
   *이름을 예쁘게 바꿔주세요.
   *이름을 짧고 간결하게 바꿔주세요.

   이런건 파일 이름을 입력해야 처리할수 있는 작업들입니다.

   이런 작업을 하려면, 파일 이름을 AI에 집어넣어야 하는데요.
   이툴은 그렇게 돌아가지는 않습니다. 애초에 파일이름 통체로 업로드하는 것이 싫어서 만들기 시작한거니 제한이 있습니다.
   대량으로 파일이름을 바꾸는것이 목표인데.. 수천개되는 파일이름을 업로드해서 바꾸는 것도 이상하기도 하구요.

   언젠가 브라우저에서 LLM을 가볍게 돌릴수 있는 시대가 온다면 가능해지겠죠.

   작지만 유용한 도구 좋네요.

   감사합니다. 하나라도 완벽하게 해내는 도구로 기억되면 좋겠네요.

   리눅스 원칙!!

   왠만한 요구사항은 다 처리해줍니다.

   ""확장자를 모두 소문자로 바꿔주세요.""

   ""파일크기로 정렬한 다음, 파일이름 앞에 번호를 0001,002,003 과 같이 붙여주세요. ""

   ""파일이름의 '-'의 앞부분과 뒷부분을 바꿔주세요.""
"
"https://news.hada.io/topic?id=17038","미첼 하시모토, Zig 소프트웨어 재단에 30만 달러 기부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    미첼 하시모토, Zig 소프트웨어 재단에 30만 달러 기부

     * HashiCorp의 창업자 미첼 하시모토와 그의 아내가 Zig 소프트웨어 재단에 $300,000 기부를 약속함
     * Zig 프로젝트와의 인연
          + 2019년부터 Zig 프로젝트를 주목해옴
          + 2021년에 프로젝트에 대한 흥분을 공개적으로 공유함
          + 2022년 초부터 Zig를 사용하고 컴파일러에 기여하기 시작함
          + 2023년에는 Zig로 작성된 터미널 프로젝트 Ghostty를 공개함
          + 현재 대부분의 코딩 시간을 Zig에 투자하고 있음
     * 기부의 이유
          + 우리 가족은 우리가 믿는 대의를 지원하는 것을 즐김
          + 독립 소프트웨어 프로젝트를 지원하여 커뮤니티에 보답하고, 빌드 문화를 장려하고자 함
          + Zig는 이러한 프로젝트 중 하나임
     * Zig 프로젝트의 가치
          + Zig는 열정적인 프로젝트로 시작되어 지금도 계속되고 있음
          + 잘 관리되고, 커뮤니티가 강하며, 자금 모델이 투명하고 지속 가능함
          + 기술적으로 야심차고 혁신적이지만 실용적이고 현실적임
          + 안정성과 더 넓은 산업 채택을 위해 갈 길이 멀지만, 명확한 경로와 기회를 가지고 있다고 믿음
     * 기부의 중요성
          + Zig와 Zig 소프트웨어 재단을 지원하게 되어 자랑스러움
          + ZSF 자금의 약 3분의 1은 개인 기부에서 나옴
          + 기부할 수 있다면 고려해주길 바람
          + Andrew에게 놀라운 프로젝트를 시작해줘서 감사하며, Zig 커뮤니티 전체에 감사함
     * 각주
          + 기부금은 2년에 걸쳐 매년 $150,000씩 지급됨. 첫 번째 할부는 이미 이전됨
          + 우리의 자선 활동은 일반적으로 비공개이지만, 내 배경 때문에 Zig에 대한 공개적인 지원이 프로젝트에 큰 도움이 될 수 있다고 생각하여 예외를 둠

GN⁺의 정리

     * 이 글은 Mitchell Hashimoto가 Zig 소프트웨어 재단에 $300,000를 기부한 이유와 Zig 프로젝트에 대한 그의 열정을 설명함
     * Zig는 혁신적이고 실용적인 기술로, 커뮤니티와 자금 모델이 강력함
     * Hashimoto는 Zig가 더 넓은 산업 채택을 위해 갈 길이 멀지만, 명확한 경로와 기회를 가지고 있다고 믿음
     * 개인 기부가 ZSF 자금의 중요한 부분을 차지하므로, 기부를 고려해달라고 요청함
     * Zig와 유사한 기능을 가진 프로젝트로는 Rust와 Go가 있음

        Hacker News 의견

     * Zig 프로젝트를 공개적으로 지원하는 것이 프로젝트에 큰 도움이 될 것이라는 의견
     * Zig 재단에 직업 게시판을 만들 것을 추천하는 의견
          + 틈새 시장을 대상으로 한 직업 게시판은 기본적으로 무료 수익 창출 수단임
     * Zig가 자체 호스팅으로 전환한 최근 이야기를 듣고, 기부금을 낭비하지 않는 효율적인 프로젝트라는 느낌을 받음
     * 프로그래밍 언어 Zig에 대한 기부를 가족에게 이야기하는 유머러스한 대화
     * 웹 개발자로서 시스템이나 저수준 프로그래밍에 대해 잘 알지 못하는 질문
          + 메모리 안전 언어로의 전환이 권장되지만, Zig는 메모리 안전 기능이 없음
          + Zig는 새로운 프로젝트에 적합하지만 메모리 안전 언어로 개발해야 하지 않느냐는 의문
          + Zig의 장점은 C보다 현대적이고 Rust보다 간단하다는 점이지만, 메모리 안전성 부족이 단점임
     * Zig에 대해 매우 흥미를 느끼는 의견
          + 실제 사용성을 고려한 언어로, 학문적 접근이 아닌 실용적인 아이디어에서 영감을 받음
          + Rust, Haskell 등에서 유용한 아이디어를 차용했음
     * 중복된 토론 링크 제시
     * Zig의 미래에 대해 매우 긍정적인 의견
     * Zig와 같은 프로젝트를 보는 것이 멋지다는 의견
"
"https://news.hada.io/topic?id=17053","일본 공항에서 폭발한 미국제 WWII 폭탄, 택시웨이에 큰 크레이터 발생","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                일본 공항에서 폭발한 미국제 WWII 폭탄, 택시웨이에 큰 크레이터 발생

     * 미야자키 공항 폭발 사건
          + 미야자키 공항에서 제2차 세계대전 당시 묻혀 있던 미군의 불발탄이 폭발하여 택시웨이에 큰 구멍이 생기고 80편 이상의 항공편이 취소됨
          + 폭발 당시 공항 근처에 항공기가 없어 인명 피해는 없었음
          + 일본 국토교통부는 자위대와 경찰의 조사 결과, 폭발이 500파운드의 미군 폭탄에 의해 발생했으며 추가적인 위험은 없다고 확인함
     * 폭발의 영향 및 조사
          + 인근 항공 학교에서 촬영된 영상에서는 폭발로 인해 아스팔트 조각이 공중으로 솟구치는 모습이 포착됨
          + 일본 TV 방송에서는 폭발로 인해 택시웨이에 지름 약 7미터, 깊이 1미터의 구멍이 생긴 모습이 보도됨
          + 하야시 요시마사 관방장관은 80편 이상의 항공편이 취소되었으며, 공항은 목요일 아침에 운영을 재개할 계획이라고 발표함
     * 미야자키 공항의 역사
          + 미야자키 공항은 1943년에 구 일본 제국 해군의 비행 훈련장으로 건설되었으며, 일부 가미카제 조종사들이 자살 공격 임무를 수행하기 위해 이륙했던 장소임
          + 국방부 관계자에 따르면, 제2차 세계대전 동안 미군이 투하한 불발탄이 이 지역에서 여러 차례 발견되었음
          + 일본 전역에는 전쟁 당시 묻힌 수백 톤의 불발탄이 남아 있으며, 때때로 건설 현장에서 발굴됨

GN⁺의 정리

     * 미야자키 공항에서 발생한 폭발 사건은 제2차 세계대전의 잔재가 현재까지도 영향을 미치고 있음을 보여줌
     * 불발탄의 위험성은 일본뿐만 아니라 전 세계적으로도 중요한 문제로, 안전한 제거와 처리가 필요함
     * 이 사건은 전쟁의 유산이 현재까지도 인류에게 위협이 될 수 있음을 상기시킴
     * 비슷한 기능을 가진 프로젝트로는 전쟁 유산 제거를 위한 국제적인 협력 프로그램이 있음

        Hacker News 의견

     * 1973년 기차 사고로 인해 지역에 아직도 많은 폭발물이 남아있음. 일부는 주택과 사업체 아래에 묻혀 있을 가능성이 있음. 최근 Mark 81 폭탄 하나를 폭파하는 작업을 도왔음
     * 런던은 종종 제2차 세계 대전 당시의 미폭발 폭탄을 처리해야 함. 당시 도시 위에 떨어진 폭탄의 양을 고려하면 놀랍지 않음
     * 미폭발 폭발물이 더 이상 문제가 되지 않기를 바라지만, 우크라이나 분쟁은 그렇지 않음을 보여줌. 미폭발 폭발물을 더 쉽게 찾을 수 있도록 하는 노력이 있었는지 궁금함. 예를 들어, 폭탄에 수동 레이더 반사기를 장착하여 탐색자가 레이더로 미폭발 폭발물을 찾을 수 있게 하는 방법을 제안함
          + 순항 미사일 등에는 적용할 수 없지만, 특히 클러스터 폭탄처럼 대량으로 사용되는 폭탄에는 적용 가능할 것임
          + 다른 방법도 있을 수 있으며, 적의 영토에 미폭발 폭발물을 남기는 것이 군사적으로 가치가 있는지 궁금함
     * 폭발물이 거의 100년이 지난 후에도 폭발할 수 있을 만큼 화학적으로 안정적이라는 사실에 항상 놀람
     * ""버려진 군사 장비""에 대한 이야기를 좋아한다면 1989년 벨기에 MiG-23 추락 사건에 대한 이야기를 추천함
     * 독일에서는 매주 미폭발 폭탄이 발견됨
     * 미야자키 공항은 1943년 일본 제국 해군의 비행 훈련장으로 건설되었으며, 일부 가미카제 조종사가 자살 공격 임무를 위해 이륙한 곳임. 이 지역에서 제2차 세계 대전 중 미군이 투하한 미폭발 폭탄이 발견되었다고 방위성 관계자가 말함
     * 남태평양 국가에서 자랐으며, 이곳은 제2차 세계 대전 중 미국의 전진 기지로 사용되었음. 몇 년 전 수도 항구 바닥에서 대규모 포탄이 발견되었으며, 이는 매일 섬 사이를 오가는 대형 페리의 부두 바로 아래에 있었음. 만약 그것들이 폭발했다면 큰 피해가 발생했을 것임
     * 폭탄이 오랜 시간 동안 묻혀 있다가 폭발하는 것이 놀라움. 화학물질은 유지되지만, 도화선이 녹슬어 없어질 것이라고 생각했음
"
"https://news.hada.io/topic?id=17010","Ask GN: 독일 컴공생에게 마구 질문해주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: 독일 컴공생에게 마구 질문해주세요

   안녕하세요. 저는 현재 독일 대학교에서 컴공을 전공하면서, 대기업에서 1년 간 인턴활동을 하고 있는 학생입니다. 독일 it 업계나 현재 상황에 대해 알고 싶으신게 계시다면 마구 질문해주세요.

   안녕하세요. 저는 워킹 홀리데이 비자로 독일 현지 취업에 관심이 있는데요! 프론트엔드 경력 2년으로 워홀 비자로 베를린에서 취업하고 싶은데, 가능성이 있을지 혹은 비슷한 케이스를 보셨는지 궁금합니다. 그리고 가능성을 높일 수 있는 방법도 궁금합니다!
    1. 독일에서 취업하게 되면 비자문제는 회사에서 해결해주나요?
    2. 실례가 되지않는다면 이력서를 공유 받을 수 있을까요?

   독일 유학은 어떻게 선택하게 되셨나요?
    1. 독일에서 계속 계실건가요?
    2. 독일에 취업을 위해서 독일어는 어느 정도로 되어야 할까요? (베를린 같은 대도시는 대부분 영어로만 일한다고 들어서요)
    3. 독일도 코딩테스트가 있는지요?

    1. 저는 대학교 졸업하고 독일에서 계속 일할 생각입니다.
    2. 독일어를 못해도 취업은 가능합니다. 독일어를 잘하면 잘 할 수록 확실히 취업이 더 쉽고 빨리 되죠. 말씀하시다시피 베를린에서는 영어로만 일할 수 있습니다. 제 개인적인 추천은 적어도 b1 정도는 있어야 독일인과 기본적인 대화가 가능하실 겁니다. 저는 적어도 b1를 추천합니다. 최선은 c1 일 거 같아요.
    3. 독일에도 코딩테스트가 있습니다. 근데 코딩테스트라기보다는 업무테스트가 있는 거 같아요. 제 시니어는 과제 3개 정도를 프로그래밍하고 평가 받았대요. :)

   주소를 localhost로 적으신 점이 너무 재미있군요! ㅋㅋㅋㅋㅋㅋ 해외 IT 취업하시면서 언어(외국어)에 대한 점이나 다른 인종으로 살아가는 점이 어떤 느낌인지가 궁금합니다. 외국의 기업 문화와 한국의 기업 문화가 다른 점도 궁금해요. 야근이라던가, 연차에 대한 규정이라던가...!

   감사합니다. localhost는 바이러스에 감염될 일 이 없어서 주소로 정했습니다 ㅋㅋㅋ.

   해외 취업하면서 언어나 다른 인종으로 살아가는 느낌을 얘기하려면 한도 끝도 없이 얘기 할 수 있을 거 같아요 ㅎㅎㅎ . 독일 it 기업에서 외국인으로 살아가는 느낌은 아주 좋습니다. 개인적인 경험을 바탕으로 얘기하자면, 인종차별을 받은 적 없습니다. 그리고 독일 it 회사는 문화적 다양성을 좋아하기 때문에 외국인을 더 많이 뽑고자 합니다. 영어로 소통하면서 일할 수 는 있으나, 그래도 현지 언어를 잘하면 잘할 수록 일하기도 편하고 적응하기도 편합니다. 독일에서 외국인 개발자로 사는 건 현재까지는 너무 좋네요. 더 바랄게 없습니다.

   독일 기업 문화는 한국 기업 문화와 매우 다릅니다. 야근 없습니다. 야근 하면 안됩니다. 노동청에서 권고가 내려오기 때문에 야근은 최대한 피하면서 정해진 시간에 정해진 업무를 끝내야 합니다. 연차는 노동시간에 비례해서 늘어나는 데요. 주 20시간 인턴인 저는 유급휴가가 18일 있습니다. 즉, 유급휴가로 한 달정도를 쉴 수 있습니다. 회사에서 오래 일하면 휴가도 많아집니다. 독일 회사는 휴가로 뭐라하지 않습니다. 가장 특이 한 점은 모든 일은 이성적, 문서적으로 일해야 한다는 점입니다. 한국에서는 몸이 조금 아파도 일하는 경우가 많습니다. 하지만 독일에서는 그러면 안됩니다. 몸이 조금이라도 아프면 증상을 보고하고 의사를 찾아가고 진단서를 받아야 합니다. (이것도 역시 유급휴가입니다.) 이 경우가 회사에게도 직원에게도 이득입니다.
   유행병의 확산을 막고 직원의 능률을 올릴 수 있기 때문입니다. 더불어 독일 회사에서는 눈치를 보면 안됩니다. 궁금한 건 직접 물어봐야합니다. 어떤 상급자도 질문에 짜증내지 않습니다. Es gibt keine dumme Frage, nur dumme Antwort ( 세상에 멍청한 질문은 없지만 멍청한 대답을 있다) 가 독일의 기업 문화를 잘 보여준다고 생각합니다. 이처럼 최대한 이성적으로 일해야 합니다. 한국 기업 문화에서 사내 정치, 눈치, 폭언, 마음대로 쓸 수 없는 휴가, 야근, 비정규직, 학벌, 인맥, 회식을 빼면 독일 기업 문화가 되는 거 같아요.

   독일에서의 노동환경은 한국과 비교하면 많이 좋습니다. 다만, 높은 세율, 외국어, 나쁜 날씨 등이 문제가 됩니다. 저는 개인적으로 독일에서 취직과 육아를 추천하는 편입니다. 복지와 노동환경이 매우 잘 되어있기 때문입니다. 하지만 한국처럼 문화생활을 즐기기에는 적합하지 않습니다. 노래방, 피씨방, 사우나등등 독일에서는 즐길 수 없는 게 많습니다.
     * 독일 게임시장은 어떤가요?
     * 게임 개발 취업 시장은 어떠한지? 한국은 신입은 거의 안뽑고 취업 시장도 축소된 상태입니다.
     * 게임 엔진은 어떤걸 주로 쓰나요?

     * 저는 게임 시장은 잘 몰라서 답변드리기 조심스럽습니다. 방금 링크드인을 본 결과 역시 독일 게임시장이 한국처럼 크지는 않네요. 독일인은 대게 영어를 잘해서 다른 유럽 나라로 가는 것 같아요. 이 역시 학사 자격증만 있으면 취업이 그리 어렵지는 않아 보이긴 합니다.

   유비소프트가 독일 뒤셀도르프에 있는데요. c++ 리드 개발자를 뽑네요.
   https://linkedin.com/jobs/search/…
     * 한국에서는 개발자 취업시장이 많이 약화되었는데 독일은 어떠한지?
     * 중소기업및 네카라쿠배급 회사들 초봉
     * 한국에서는 중,장년까지 개발하지 보통힘들고 미국은 중,장년(60대이상)개발자도 가끔 있는것 같은데 독일은 어떠한가요?

     * 한국과 다르게 독일은 챗지피티 이후로 개발자 취업시장이 좋아진 것 같습니다. 학생들도 컴공에 관심이 많아졌고, 독일 정부도 디지털 기업을 키우려고 하는 중입니다. 학사 졸업장만 있으면 취업은 걱정 없습니다.
     * 세전 500만원 ~ 850만원 정도 됩니다. 독일은 세금을 50% 떼어가기 때문에 세전 500이면 세후 250 정도 됩니다. 독일 대도시를 제외하고는 생활물가와 집값이 한국보다 저렴해서 돈을 쉽게 모을 수 있습니다.
     * 제 회사에서는 중장년 개발자 분들은 잘 못 봤습니다. 독일에서는 중장년이면 연금받으면서 놉니다. 40대 이상 개발자는 주로 관리직으로 빠지는 것 같습니다. 50대에서 60대에도 개발할 수 있습니다. 회사도 그걸 원하구요. 그런데 사람들이 그나이까지 그렇게 힘들게 일하길 원하지 않습니다. 이게 한국이랑 다르면 다른 점이겠네요. 참고로 독일은 노동법이 쎄서 노동자를 권고사직하거나 해고하는 일이 잘 없습니다. 일하고 싶으면 계속 일할 수 있습니다.

   이력서 템플릿 다 비슷한가요? 흑백 1페이지 빼곡 말고 다른 거도 있나요?

   컴공 분야는 다 비슷 비슷 한 거 같아요. 저도 흑백 1페이지 빼곡으로 면접 봤어요. 하하하 근데 확실히 정해진 양식이 없다 보니까 사람마다 다른 느낌이에요. 마케팅쪽은 색깔이나 그림도 자유롭게 넣고 서버 관리자쪽은 그냥 흑백 1페이지로도 충분해요. 이메일 주시면 제 이력서? 보내드릴게요.

   오.. 링크드인 주시죠 https://www.linkedin.com/in/yunho-kee-2a4878256/

   안녕하세요. 독일 Oberursel에 위치한 SINWOO International GmbH의 면접 전형을 앞두고 있는 지원자입니다.

   회사에 대해 알아보던 중, 해당 기업이 독일 내 IT 중소기업 아웃소싱 업체로, 주 업무는 ERP, CRM, Web, IT User Support (Helpdesk), RPA, DBA 등의 업무이며 주로 파견 형태로 업무가 진행된다는 점을 확인하였습니다. (공고: https://drive.google.com/file/d/…)

   대표님께서도 한국 분이신 것으로 알고 있는데요, 이에 따라 한 가지 여쭤보고 싶은 점이 있어 이렇게 연락드리게 되었습니다.

   혹시 독일 내 IT 중소기업의 파견직 근무 형태도 일반 독일 IT 기업들과 유사하게 워라밸(Work-Life Balance)이 잘 보장되는 편인지, 아니면 근무 환경이나 문화가 회사마다 차이가 큰 편인지 궁금합니다.
   작은 정보라도 공유해주신다면 면접 준비에 큰 도움이 될 것 같습니다.

   감사합니다!
"
"https://news.hada.io/topic?id=17009","시티나1 오픈소스 카메라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             시티나1 오픈소스 카메라

README.md

  프로젝트 소개

     * 이 프로젝트는 소프트웨어 개발을 위한 오픈 소스 프로젝트임
     * 기존 제품이나 다른 오픈 소스 프로젝트에 비해 다양한 기능과 유연성을 제공함

  주요 기능

     * 데이터 처리: 대용량 데이터를 효율적으로 처리할 수 있는 기능을 포함함
     * 확장성: 다양한 모듈과 플러그인을 통해 기능을 확장할 수 있음
     * 사용자 인터페이스: 직관적이고 사용하기 쉬운 UI를 제공함

  설치 방법

     * 설치 방법은 생략함

  사용 예제

     * 사용 예제는 생략함

  기여 방법

     * 프로젝트에 기여하는 방법에 대한 안내를 제공함
     * 코드 기여, 버그 리포트, 문서 작성 등 다양한 방식으로 기여할 수 있음

  라이선스

     * 이 프로젝트는 MIT 라이선스 하에 배포됨

GN⁺의 정리

     * 이 프로젝트는 소프트웨어 개발을 위한 강력한 도구를 제공함
     * 대용량 데이터 처리와 확장성 있는 구조가 주요 장점임
     * 직관적인 UI 덕분에 사용자가 쉽게 접근할 수 있음
     * MIT 라이선스 하에 배포되어 자유롭게 사용 및 수정 가능함
     * 유사한 기능을 제공하는 다른 프로젝트로는 Apache Spark, Hadoop 등이 있음

        Hacker News 의견

     * 클래식 미러리스 카메라 제조사들이 80년대 사고방식에서 벗어나기를 바람
          + 햇빛에서도 잘 보이는 대형 터치스크린, 멀티터치, GPS, WiFi, Bluetooth, 5G/LTE 연결 및 지오태깅 기능을 원함
          + Google Photos, iPhoto, WebDAV 등에 자동 업로드 기능 추가
          + 기기 내 사진 편집기 포함
          + 구식 필름 카메라 디자인을 버리고, 물리적 스위치 최소화 필요
          + 셔터 버튼과 아날로그 조정 노브는 괜찮지만, AF/MF 수동 스위치나 쉽게 실수로 건드릴 수 있는 셔터 지연 선택기는 불필요함
     * ""Cheep Android phone with a lenses mount""가 실패한 이유에 대한 의문
     * 디자인은 현대적이지만, Kodak CCD 센서 선택에 대한 의문
          + 중국 커뮤니티에서 중고 CCD 카메라 가격이 열 배로 상승함
          + Apertus Axiom은 Zynq를 사용하면서도 4K 300FPS를 지원하는 CMOS 센서를 사용함
     * 오픈 소스 카메라의 부족함을 오랫동안 느껴왔으며, 최근 몇몇 게시물로 인해 활기를 띠는 것이 좋음
     * 이 카메라를 조립하는 것에 관심이 있지만, 구매하고 싶음
          + 작은 백업 폰을 설계하려고 약 1천 달러를 낭비했지만 원하는 크기로 줄일 수 없었음
          + 실제로 이 카메라를 만들려면 약 50만 달러가 필요함
          + 더 많은 하드웨어가 오픈 소프트웨어와 함께 나오기를 원함
          + Canon 카메라의 오픈 펌웨어도 있음
     * 디지털로 작동하지만 모든 것이 물리적 제어를 통해 이루어지는 카메라를 원함
          + 포토미터만 디지털이며, 모든 기능이 수동으로 작동함
          + 자동 기능이 전혀 없는 카메라를 원함
     * 비네팅이 너무 많음
     * 오픈 소스 처리를 받은 도구들이 목록에 올라오는 것을 보면 흥미로움
     * OP가 이 카메라를 $2000 이하의 키트로 판매할 계획이 있다면 매우 관심이 있음
          + RPi ""HQ"" 카메라 같은 미세한 카메라가 HQ라고 불리는 것에 지침
          + 사진 촬영 분야에서 35mm 정도의 센서가 HQ의 최소 기준임
"
"https://news.hada.io/topic?id=16982","캘리포니아 법, 게임 구매 아닌 라이선스 계약 명시 의무화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    캘리포니아 법, 게임 구매 아닌 라이선스 계약 명시 의무화

    새로운 캘리포니아 법: 디지털 스토어에서 게임을 구매하는 것이 아니라 라이선스를 얻는 것임을 명시해야 함

     * 새 법의 시행
          + 2025년 1월 1일부터 시행 예정
          + 디지털 상품 구매 시 ""구매"" 또는 ""구입""이라는 용어 사용 시 라이선스를 판매하는 것임을 명확히 해야 함
          + Microsoft Store, Steam, PlayStation Store, eShop 등 주요 디지털 스토어에 적용
     * 법안의 배경
          + Ubisoft의 The Crew 게임 라이선스 철회 사건이 계기
          + 디지털 상품의 소유권과 라이선스의 차이를 명확히 하려는 목적
     * 법안의 주요 내용
          + ""구매"" 또는 ""구입""이라는 용어 사용 시 라이선스 판매임을 명확히 해야 함
          + 이 통지는 다른 구매 조건과 별도로 명확히 표시되어야 함
          + 구독 기반 서비스, 무료 다운로드, 영구 오프라인 다운로드에는 적용되지 않음
          + 규칙 위반 시 벌금 부과
     * 전문가 의견
          + 디지털 미디어 소매업체가 ""구매""라는 용어를 사용할 때 이는 허위 광고에 해당한다고 지적
          + 소비자들이 디지털 상품을 구매할 때 그 소유권이 아닌 라이선스를 얻는다는 사실을 이해할 필요가 있음
     * 디지털 구매의 확산
          + 물리적 미디어의 감소와 함께 디지털 구매가 보편화됨
          + Best Buy와 같은 상점은 물리적 영화 판매를 중단
          + 물리적 비디오 게임은 디스크나 카트리지 형태로 라이선스를 제공하지만, 서버가 오프라인이 되면 접근이 불가능할 수 있음
     * 디지털 상품 소유권 문제
          + 라이선스 철회 외에도 게임이 판매 중단되거나 완전히 오프라인으로 전환되는 사례가 증가
          + 이는 소비자 보호 문제이자 보존 문제로도 이어짐

    GN⁺의 정리

     * 이 법안은 디지털 상품의 소유권과 라이선스의 차이를 명확히 하여 소비자 보호를 강화하려는 시도임
     * 디지털 구매가 보편화됨에 따라 이러한 법적 명확성이 더욱 중요해짐
     * 디지털 상품의 소유권 문제는 앞으로도 계속 논의될 주제이며, 소비자 권리 보호를 위한 추가적인 조치가 필요할 수 있음
     * 유사한 기능을 가진 다른 프로젝트로는 Valve의 Steam, Sony의 PlayStation Store 등이 있음

        Hacker News 의견

     * ""buy""라는 단어를 전통적인 소유권 이전의 의미로 되찾자는 아이디어를 좋아함
          + 다른 경우에는 ""license""나 ""rent""라는 단어를 사용하도록 의무화해야 함
     * Stop Killing Games 캠페인 링크를 공유할 가치가 있음
     * 다음 단계에서 이런 일이 발생하지 않도록 막는 방법에 대한 메타 질문이 생김
          + 과거에도 ""구매""한 것이 실제로 소유가 아니라는 경고가 있었지만, 시장에 영향을 미칠 만큼 많은 사람들이 신경 쓰지 않았음
          + 다음에도 비슷한 일이 발생할 가능성이 높음
          + 사람들이 다음 번에는 이 사실을 알고 신경 쓰도록 하는 방법이 필요함
     * 대부분의 사람들이 소유보다는 접근에 만족하는 것 같음
          + 소유와 접근의 차이를 어떻게 구분할 것인지 고민해야 함
          + 예를 들어, 여행 중에 방을 구매하고 판매하는 것보다 일정 기간 동안 사용하는 것이 더 나음
     * 이용 약관에 정보를 넣는 것은 도움이 되지 않음
          + 다른 방법이 필요함
     * 법안 자체는 짧고 이해하기 쉬움
          + 디지털 상품(책, 영화 등 포함)을 구매할 때 소유권이 일방적으로 취소될 수 없는 형태로 제공되어야 함
     * 라이선스가 취소될 때 환불을 요구할 것인지 궁금함
     * 소매업체가 비즈니스 관행을 변경하기보다는 버튼 레이블을 변경할 가능성이 높음
     * 최근 관련 뉴스
          + Sony, Ubisoft 스캔들로 인해 캘리포니아에서 기만적인 디지털 상품 판매 금지
     * 게임뿐만 아니라 모든 저작권 있는 작품에 적용됨
     * 마케팅 부서가 이를 잘 포장할 수 있을 것이라고 믿음
          + ""게임을 구매하는 대신 게임 라이선스를 받으세요. 모든 게임 라이선스를 자랑하세요""
     * 다음 단계로, N개월 이상 지속되는 라이선스가 반복 결제 없이 제공되면 실제로 판매로 간주해야 한다고 생각함
"
"https://news.hada.io/topic?id=16940","영향력 있는 AI 연구를 하는 방법 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          영향력 있는 AI 연구를 하는 방법

1. 논문이 아닌 프로젝트에 투자하기

     * 연구 초기에는 논문 출판이 중요하지만, 장기적으로는 논문 수보다 연구의 영향력과 큰 그림이 중요함
     * 연구를 개별 논문이 아닌 큰 비전이나 패러다임으로 생각해야 함
     * 오픈 소스 모델, 시스템, 프레임워크, 벤치마크와 같은 일관된 아티팩트를 유지하는 것이 중요함

2. 큰 확장성과 ""파급력""을 가진 적시의 문제 선택하기

     * 문제는 시의적절해야 함. 예를 들어, 2-3년 후에 '핫'해질 문제를 찾는 것이 좋음
     * 많은 파생 문제에 영향을 미칠 수 있는 큰 ""파급력""을 가져야 함
     * 큰 여유 공간이 있는 문제를 선택해야 함. 예를 들어, 시간이 지나면서 20배 더 빠르거나 30% 더 효과적으로 만들 수 있다는 희망이 있어야 함

3. 두 단계 앞서 생각하고 빠르게 반복하기

     * 즉각적인 해결책을 찾기보다는 두 단계 앞서 생각해야 함
     * 가장 사람들이 취할 것 같은 경로를 파악한 뒤, 그 경로의 한계를 이해하고 해결하는 데 주력해야 함
     * 문제의 버전을 빠르게 반복하고 피드백을 받는 것이 중요함

4. 작업을 공개하고 아이디어를 대중화하기

     * 논문을 발표한 후 바로 다음 논문으로 넘어가지 말고, 작업을 공개하고 사람들과 적극적으로 소통해야 함
     * arXiv에 논문을 공개하고 스레드로 논문 공개를 알리되, 구체적이고 접근 가능한 주장으로 시작해야 함
     * 논문 발표 후에도 지속적으로 아이디어를 홍보하고 커뮤니티와 소통해야 함
     * 아이디어와 과학적 소통은 고립된 논문 공개를 넘어서 연중 내내 지속되어야 함

5. 흥미를 유도하고 오픈 소스 연구를 성장시키기

     * 깃허브에 코드와 README를 올리는 것만으로는 충분하지 않음
     * 좋은 오픈소스 연구는 좋은 연구이자 명확한 하류 유용성과 낮은 마찰을 가져야 함
     * 사용 가능하고, 유용하며, 접근 가능한 코드 릴리스를 만들어야 함
     * 분명한 대안이 실패하는 이유를 설명하고 인내심을 가져야 함
     * 다양한 사용자 카테고리를 이해하고 그에 맞게 프로젝트를 발전시켜야 함
     * 관심을 커뮤니티로 전환하여 형성하고 성장시키는 것이 중요함

6. 새로운 논문을 통해 프로젝트에 계속 투자하기

     * 오픈 소스 프로젝트와 연구는 별개가 아님
     * 오픈 소스에 투자하는 대부분의 시간이 새롭고 흥미로운 연구를 수행하는 것일 수 있음
     * 오픈소스 노력의 최전선에 있으면 새로운 문제를 매우 일찍 직관적으로 인식하고, 협력자와 피드백을 받을 수 있음
     * 예를 들어, ColBERT와 DSPy는 여러 논문과 협력자들에 의해 발전됨
     * 구축한 커뮤니티는 접근 방식에 대한 직접적인 피드백을 제공하고 문제의 중요성을 이해하는 훌륭한 협력자에 대한 액세스를 제공함

GN⁺의 정리

     * 이 글은 AI 연구에서 오픈 소스 프로젝트를 통해 영향력을 극대화하는 방법을 다룸
     * 논문 수보다 큰 비전과 일관된 프로젝트가 중요함을 강조함
     * 시기적절한 문제 선택, 두 단계 앞서 생각하기, 작업 공개 및 대중화, 오픈 소스 프로젝트 성장의 중요성을 설명함
     * 연구와 오픈 소스 프로젝트는 별개가 아니며, 서로 보완하며 발전할 수 있음을 강조함

   그래서 요즘 AI연구는 대학원에서 안하고 빅테크에서 하죠.
   빅테크에서 대학원보다 최신 논문이 더 많이 나옵니다. 신기한 세상..

   아예 대학원생들을 몇 개월 인턴으로 뽑아서 같이 연구하고 논문 내고 하는 경우도 많죠

        Hacker News 의견

     * ""프로젝트에 투자하고 논문에 투자하지 말라""는 조언은 박사 과정 학생이나 초기 연구자에게는 현실적이지 않음
          + 논문을 많이 발표하지 않으면 경력 발전이 어려움
          + 흥미로운 주제에 시간을 투자하고 싶지만, 논문이 나오지 않으면 경력에 큰 타격을 입음
     * 연구 프로그램을 성공적으로 운영하기 위해서는 시기적절한 문제를 선택하고, 아이디어를 널리 알리는 것이 중요함
          + 피드백을 통해 연구 방향을 조정하고 협업을 촉진할 수 있음
     * AI 연구자에게는 1-2년 내에 유용한 주제를 선택하는 것이 산업으로 가는 이유가 될 수 있음
          + 장기적인 연구가 더 큰 영향을 미칠 수 있음
          + 초기 연구가 시간이 지나면서 큰 성과를 낼 수 있음
     * 논문이 실제 세계에 미치는 영향을 측정하는 것은 어려움
          + AI 연구는 규모가 중요하며, 이는 자금과 자원이 필요함
          + 많은 논문이 발표되면서 개별 논문의 영향력이 감소함
     * ""프로젝트에 투자하고 논문에 투자하지 말라""는 조언은 좋은 프로젝트가 좋은 논문을 낳는다는 의미임
     * AI 논문은 많은 저자가 참여하는 경우가 많으며, 실제로 영향력 있는 연구는 드물음
     * 연구의 초기 단계에서는 작은 개선이 큰 영향을 미칠 수 있음
          + 연구 경력이 쌓이면 프로젝트에 더 많은 시간을 투자할 수 있음
     * 연구 결과를 쉽게 접근할 수 있게 만드는 것은 중요하지만, 모든 것을 공개하지 않는 것도 필요함
     * ""하이프""도 연구의 일부분임
          + 단기적으로 영향력이 있는 연구가 장기적으로는 그렇지 않을 수 있음
     * 이 조언은 학술 연구뿐만 아니라 스타트업에도 적용될 수 있음
"
"https://news.hada.io/topic?id=16987","Meta, 비밀번호를 평문으로 저장해 $102m(1330억원) 벌금 부과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Meta, 비밀번호를 평문으로 저장해 $102m(1330억원) 벌금 부과

     * 아일랜드 데이터 보호 위원회(DPC)는 2019년 보안 침해 사건에 대한 조사를 마친 후 Meta에 1억 1백 5십만 달러(9천 1백만 유로)의 벌금을 부과함
     * Meta는 원래 2019년 1월 자사 서버에 일부 사용자 비밀번호가 평문으로 저장된 사실을 발표했음
     * 한 달 후, 수백만 개의 Instagram 비밀번호도 쉽게 읽을 수 있는 형식으로 저장되었다고 업데이트함
     * Meta는 몇 개의 계정이 영향을 받았는지 밝히지 않았으나, 당시 한 고위 직원은 _Krebs on Security_에 최대 6억 개의 비밀번호가 관련되었다고 언급함
     * 일부 비밀번호는 2012년부터 회사 서버에 평문으로 저장되었으며, 2만 명 이상의 Facebook 직원이 검색할 수 있었음
     * DPC는 외부 당사자에게는 비밀번호가 제공되지 않았음을 확인함
     * DPC는 Meta가 여러 GDPR 규칙을 위반했다고 판단함
          + 사용자 비밀번호 평문 저장과 관련된 개인 데이터 침해를 지체 없이 DPC에 통보하지 않음
          + 사용자 비밀번호 평문 저장과 관련된 개인 데이터 침해를 문서화하지 않음
          + 사용자 비밀번호의 무단 처리에 대한 보안을 보장하기 위한 적절한 기술적 조치를 사용하지 않음
     * DPC의 부국장 Graham Doyle은 ""사용자 비밀번호는 평문으로 저장되지 않아야 하며, 이는 특히 소셜 미디어 계정 접근을 가능하게 하는 민감한 정보임을 고려해야 한다""고 언급함
     * DPC는 벌금 외에도 Meta에 경고를 주었으며, 위원회가 최종 결정을 발표할 때 Meta에 어떤 영향을 미칠지 더 알 수 있을 것임

GN⁺의 의견

     * 이번 사건은 대형 기술 기업들의 개인정보 보호 관행에 경종을 울리는 계기가 될 것임. 사용자 데이터를 안전하게 관리하는 것이 얼마나 중요한지를 다시 한번 일깨워줌
     * 메타는 이번 일을 계기로 보안 시스템을 대대적으로 점검하고 개선해야 할 것임. 암호화 등 기술적 조치 뿐 아니라 직원 교육, 내부 감사 등 조직적 차원의 노력도 필요해 보임
     * GDPR 위반에 대한 과징금 수준이 갈수록 높아지고 있음. 기업들은 GDPR을 비롯한 각국의 개인정보보호법을 철저히 준수하는 것이 리스크 관리 차원에서도 중요함을 인식해야 함
     * 한편, 이번 사건에서 드러난 보안 취약점이 실제 악용된 정황은 확인되지 않았음. 그럼에도 메타가 거액의 과징금을 물게 된 것은, 문제의 심각성과 관련 규정 위반의 정도가 크다고 판단되었기 때문으로 보임
     * 암호 관리와 관련해서는 평문 저장 외에도 솔트/해시 사용, 강력한 암호 정책 적용 등 다양한 보안 조치가 요구됨. 기업들은 전사적 차원에서 체계적인 암호 관리 정책을 마련하고 엄격히 적용할 필요가 있음

   와... 이건 좀 충격인데요.

   페이스북이 페이스북했네요

   페이스북, 내부 서버에 사용자 비밀번호를 평문으로 저장해왔다

   이놈들 상습범입니다.

   FAANG 에서 평문이라니.. 말도 안되는 뉴스네요..

        Hacker News 의견

     * Meta가 비밀번호를 평문으로 저장하지 않으려 했으나, 버그로 인해 평문 비밀번호가 로그에 기록된 사건이 있었음
          + 2012년부터 6억 개의 비밀번호가 쉽게 읽을 수 있는 형식으로 저장되었고, 2만 명 이상의 Facebook 직원이 접근 가능했음
          + 이는 단순한 실수가 아니라 심각한 문제임
     * 현재 매출의 0.1% 벌금
          + 연 매출 10억 달러인 회사는 10만 달러를 벌금으로 내야 함
          + 이는 제대로 된 보안을 유지할 동기부여가 되지 않음
          + 로그를 통해 디버깅을 개선하여 효율성을 0.1% 이상 높인다면, 회사에게는 좋은 거래임
     * Meta 인터뷰에서 해싱과 레인보우 테이블 공격 질문은 일종의 도움 요청일 수 있음
     * 1억 2백만 달러의 벌금은 큰 금액처럼 들리지만, 유출된 평문 비밀번호 하나당 벌금은 1달러도 되지 않음
          + 벌금은 당국에 제때 알리지 않은 것에 대해 부과됨
          + 피해 사용자에 대한 평가가 흥미로움
     * 2019년 데이터 유출 사건은 2012년에 만들어진 시스템에서 발생
          + GDPR은 2018년에 도입되었고, Meta는 2019년 데이터 유출을 제대로 공개하지 않아 벌금을 부과받음
     * 큰 회사가 이런 실수를 저지르는 것이 이해되지 않음
          + 비밀번호 해싱과 솔팅은 기본적인 보안 절차임
          + Meta/Facebook 같은 대기업이 이런 실수를 저지르는 것은 상상할 수 없음
     * 인증 팀의 시스템이 비밀번호를 포함한 페이로드를 로그에 기록하지 않았기를 바람
          + 이는 다른 팀이 소유한 인프라 구성 요소에서 발생했을 가능성이 있음
     * 중복된 논의: 링크

   서버에 저장할때 의도적으로 평문 저장한게 아니라 로그가 기록되는 과정에서 입력받은 평문 비밀번호가 저장된 경우가 있었나보네요
   국내외를 가리지 않고 은근히 많죠...(로그파일에 비밀번호 저장되고 있는 경우...)

   한국이라면 매출액의 0.1%가 아니라 0.001%만 벌금으로 내기만 하면 되는데 아깝네요(?)
"
"https://news.hada.io/topic?id=17071","HN 문의: 영국이 차고스 제도를 반환한 후 ".io" TLD의 운명은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                HN 문의: 영국이 차고스 제도를 반환한 후 "".io"" TLD의 운명은?

        Hacker News 의견

     * .io 도메인은 영국의 권한 없이 운영되었으며, 현재는 헤지 펀드가 소유하고 있음
          + 영국령 인도양 지역이 공식적으로 사라지면 ISO 2자리 국가 코드도 사라질 것임
          + 그러나 ccTLD는 국가가 사라져도 지속된 사례가 있으며, IANA는 도메인 이름을 유지하는 것을 우선시할 것임
     * Google은 .io를 이미 gTLD로 간주하고 있으며, 이는 .nu, .to, .tv와 유사함
          + ICANN의 정책에 따르면, ISO-3166-2에서 IO가 제거되면 ccTLD는 5년 내에 질서 있게 종료해야 함
          + ccTLD 관리자는 최대 10년까지 연장을 요청할 수 있지만, 일반적인 이유 외에 추가적인 이유가 필요함
     * .su ccTLD는 소련 붕괴 후에도 유지되었으며, 러시아가 이를 관리함
          + 반면, .yu는 몇 년간 세르비아가 관리하다가 만료됨
          + .io는 .su와 유사하게 유지될 가능성이 높음
     * .io 레지스트리는 Identity Digital이 운영하며, 이는 여러 레지스트리를 통합한 것임
          + .tv ccTLD는 투발루 GDP의 15%를 차지하는 유명한 사례임
     * 6년 전 .io 도메인에 장애가 발생했으며, 많은 기업이 .com으로 이전함
     * 모리셔스 도메인을 가진 고용주가 있으며, 모리셔스의 기술 현장을 조사할 계획임
     * 거주하지 않는 국가의 ccTLD를 사용하는 것은 위험이 있을 수 있음
     * ICANN이 인기 있는 스타트업이나 웹사이트를 기술적인 이유로 비활성화할 가능성은 낮음
          + .io는 글로벌 인지도가 있는 레지스트라가 있으며, 계속해서 사업을 이어갈 것임
"
"https://news.hada.io/topic?id=16973","역대 최고의 $4 소비","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              역대 최고의 $4 소비

Papa Notes🎧

  아이들이 좋아하는 것

     * 아이들은 어른들과는 다른 것들에 흥미를 가짐
     * 첫 번째 생일을 기억할 것임
          + 가족들이 재미있고 유용한 선물을 가져옴
          + 아이는 포장지에 더 관심을 가짐

  차 수리와 딸과의 시간

     * 몇 주 전 차를 수리하러 갔음
     * 다섯 살 딸이 함께 가고 싶어 했음
     * 차를 맡기고 몇 가지 일을 보고 IKEA에서 점심을 먹음
     * 몇 시간이 지나도 차가 준비되지 않음
     * 딸이 버스를 타고 집에 가자고 제안함
          + 시간이 오래 걸리고 불편할 것 같았음
          + 딸이 버스를 타는 것을 좋아해서 동의함
          + 딸이 행복해하는 모습을 보니 가치가 있었음

  결론

     * 예상대로 집에 도착하자마자 차를 찾으러 가야 했음
     * 택시를 타려고 했지만 딸이 다시 버스를 타자고 제안함
     * 후회하지 않음

GN⁺의 정리

     * 이 글은 부모와 자녀 간의 소소한 일상을 통해 아이들이 무엇에 흥미를 가지는지 보여줌
     * 아이들과의 특별한 시간을 보내는 방법에 대한 아이디어를 제공함
     * 비슷한 경험을 가진 부모들에게 공감을 줄 수 있음
     * 아이들과의 소통과 이해를 돕는 글임

        Hacker News 의견

     * 디즈니 월드 여행: 아이들이 가장 좋아했던 것은 호텔의 온수 욕조였음
          + 아이들이 가장 좋아했던 가족 여행은 아칸소에서 크리스탈을 채굴했던 경험이었음
          + 리조트에서 머물렀고, 큰 놀이터와 활쏘기, 저녁마다 버블 파티가 있었음
          + 아이들은 여전히 그 여행을 이야기함
     * 아이들의 감정: 작은 것에서 큰 기쁨을 얻을 수 있지만, 작은 일에도 크게 화를 낼 수 있음
          + 작은 세상에서 작은 것들이 크게 느껴질 수 있음
          + 어른들도 작은 것에서 기쁨을 찾을 수 있는지에 대한 질문
     * 도시의 산책: 아파트 근처 공원에서 작은 전기 기차를 타는 대신 실제 지하철을 타기로 결정했음
          + 아이가 지하철을 매우 좋아했음
          + 더운 날씨에도 지하철은 시원했음
          + 1.5시간 동안 지하철을 타고 다녔던 기억이 잊을 수 없었음
     * 아이들과의 일상: 아이들이 작은 것에 흥분하는 것을 받아들이는 것이 중요함
          + 아이들과 함께하는 작은 모험이 보람이 있음
          + 아이들의 기쁨은 보너스임
     * 기사의 전제: 아이들도 어른들과 같은 것에 흥분함
          + 어른들에게 더 이상 흥미롭지 않은 것들이 아이들에게는 여전히 흥미로울 수 있음
     * 호주의 어린 시절: 버스-기차-페리 여행이 큰 재미였음
          + 가족 티켓은 저렴했지만, 소중한 추억이었음
     * 생일 선물: 중간 아이의 첫 생일에 저렴한 물건들로 큰 기쁨을 줌
          + 반창고, 휴지 상자, 화장지 롤로 몇 시간 동안 놀았음
     * 트램 여행: 헬싱키의 모든 트램 노선을 타고 다녔음
          + 몇 주가 걸렸지만 재미있었음
          + 아이가 다시 하자는 제안에 흥미를 잃었지만, 여전히 좋은 추억으로 남아 있음
     * 버스 여행: 동물원보다 버스 타는 것이 더 흥미로웠음
     * 저렴한 제품 전략: 아이들이 좋아할 만한 저렴한 물건과 경험을 많이 제공하는 것이 좋음
          + 비싼 물건을 강요하는 것은 역효과를 낼 수 있음
"
"https://news.hada.io/topic?id=17068","RNNs가 전부였을까s가 전부였을까?

컴퓨터 과학 > 머신 러닝

     * 제목: RNN이 전부였을까?
     * 저자: Leo Feng, Frederick Tung, Mohamed Osama Ahmed, Yoshua Bengio, Hossein Hajimirsadegh
     * 제출일: 2024년 10월 2일

  요약

     * 배경: Transformer의 시퀀스 길이에 대한 확장성 제한으로 인해 병렬화가 가능한 순환 시퀀스 모델에 대한 관심이 다시 증가하고 있음. 이에 따라 S4, Mamba, Aaren과 같은 새로운 순환 구조가 제안되어 유사한 성능을 달성하고 있음.
     * 연구 내용: 전통적인 순환 신경망(RNN)인 LSTM(1997)과 GRU(2014)를 재검토함. 이 모델들은 시간 역전파(BPTT)가 필요해 느렸으나, 입력, 망각, 업데이트 게이트에서 숨겨진 상태 의존성을 제거함으로써 BPTT가 필요 없게 되어 병렬로 효율적으로 학습할 수 있게 됨.
     * 결과: 최소화된 버전(minLSTMs, minGRUs)을 도입하여 (1) 전통적인 모델보다 훨씬 적은 매개변수를 사용하고, (2) 학습 시 완전 병렬화가 가능함(길이 512의 시퀀스에서 175배 빠름). 이 간소화된 RNN 버전은 최근 시퀀스 모델의 경험적 성능과 일치함.

  GN⁺의 정리

     * 이 연구는 전통적인 RNN 모델의 병목을 해결하여 병렬 학습이 가능하도록 개선한 점에서 흥미로움.
     * Transformer의 한계를 극복할 수 있는 대안으로서 RNN의 가능성을 다시 조명함.
     * 머신 러닝 및 인공지능 분야에서 시퀀스 모델링의 효율성을 높이는 데 기여할 수 있음.
     * 유사한 기능을 가진 프로젝트로는 최근의 Transformer 기반 모델들이 있음.
"
"https://news.hada.io/topic?id=17037","COBOL이 오랫동안 "죽은" 상태였다는 할아버지의 기록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    COBOL이 오랫동안 ""죽은"" 상태였다는 할아버지의 기록

  Cobol은 ""죽었다""고 오랫동안 말해왔지만, 내 할아버지가 그것에 대해 썼음

     * 1992년 6월, 할아버지는 Technical Support 잡지에 Cobol의 죽음을 선언하는 기사를 발표했음
     * 당시 유행어인 4세대 프로그래밍 언어(4GL)와 같은 용어를 사용했음
     * Cobol은 대부분의 4GL 언어보다 오래 살아남았음
     * NaSPA 아카이브에서 해당 기사의 텍스트 버전을 확인할 수 있음: http://www.naspa.net/magazine/1992/t9206003.txt

     _죽었다_는 단어는 여러 의미를 가질 수 있음. Cobol은 죽지 않았을 수도 있음; 좀비일 수도 있음. 그래서 무언가가 죽었지만 사라지지 않을 수 있음? 맞음! Cobol은 그 현상의 훌륭한 예임. COBOL은 아마도 혼자가 아닐 것임; Autocoder의 흔적도 여전히 존재할 것임. Autocoder는 COBOL의 전신으로, 45세 이하의 사람들은 들어본 적이 없을 것임. Autocoder가 죽지 않았다고 강력히 주장하는 사람은 없을 것임, 하지만 그 흔적은 여전히 남아 있을 것임.

     * 할아버지는 건조한 유머 감각을 가지고 있었음
     * 한 번은 할아버지의 재치를 되받아칠 수 있었고, 할머니는 매우 자랑스러워했음; 학생이 스승이 되었음
     * Cobol 좀비를 계속 움직이게 한 것은 Y2K 문제였음
     * Y2K 문제는 엄청난 문제였고, 새로운 세대의 Cobol 프로그래머를 훈련시킬 필요가 있었음
     * 이는 Cobol을 좀 더 오래 지속시키는 데 기여했음
     * 요즘에는 프로그래밍 언어에 대해 ""죽었다""는 용어를 사용하지 않음
     * 큰 설치 기반을 가졌던 언어는 결코 죽지 않음
     * 새로운 프로그래머가 배우지 않더라도, 그 언어는 오랜 시간 동안 희미해짐
     * 할아버지는 2024년 9월 1일 91세의 나이로 사망했음
     * 공식적으로는 폐렴으로 사망했음
     * 할머니는 그해 4월에 사망했고, 할아버지는 치료를 받지 않기를 요청했음

  GN⁺의 정리

     * 이 기사는 Cobol의 역사와 지속성에 대해 흥미로운 통찰을 제공함
     * Y2K 문제로 인해 Cobol이 다시 주목받았던 시기를 다루고 있음
     * 프로그래밍 언어가 ""죽지 않는"" 이유와 그 지속성에 대해 생각해볼 기회를 줌
     * Cobol과 유사한 기능을 가진 언어로는 Java와 C++ 등이 있음

        Hacker News 의견

     * COBOL의 약속은 인간 같은 텍스트로 프로그래머가 필요 없게 만드는 것이었음
          + 그러나 문제를 충분히 설명하고 해결하는 것은 여전히 어려운 일임
          + 결국 문제를 세분화하면 프로그래머가 필요하게 됨
          + COBOL의 주요 교훈은 컴퓨터 인터페이스나 언어가 프로그래머를 필요로 하는 것이 아님
     * Scala는 현재 COBOL처럼 거의 죽은 상태임
          + 많은 비즈니스와 서비스가 여전히 Scala로 작성된 중요한 구성 요소를 가지고 있음
          + 그러나 새로운 프로젝트에서는 거의 사용되지 않음
          + Scala는 몇 가지 중요한 점에서 다른 주류 언어보다 뛰어났음
     * Fortran, COBOL, Ada, APL 같은 ""레거시"" 언어를 한 번 사용해보고 싶음
          + Java는 기업 환경에서 널리 사용되고 있음
          + 30-40년 후에는 Java도 은퇴자들이 유지보수하는 언어가 될 가능성이 있음
     * Stack Overflow 개발자 설문조사에서 COBOL의 평균 연봉과 경력 정보를 제공함
          + 2023년에는 222명의 응답자가 평균 19년 경력과 $75,500의 연봉을 가짐
          + 2024년에는 응답자 수는 비슷하지만 평균 경력이 17년으로 감소함
          + Swift는 공개된 지 10년밖에 안 되었지만 평균 11년 경력을 가진 응답자가 있음
     * 클라우드는 새로운 메인프레임이지만 더 나쁨
          + CICS를 사용하여 매우 신뢰할 수 있고 성능이 좋은 서비스를 만들 수 있었음
          + AWS Lambdas를 사용하여 동일한 트랜잭션 내에서 서로 호출하는 것은 어려움
     * 20년 전 메인프레임 시스템에서 일했을 때 ""18개월 남았다""는 말을 들었음
          + 현재 그 시스템은 더 견고해졌고 여전히 ""18개월 남았다""는 말을 들음
          + 이 시스템은 나보다 오래 살아남을 것 같음
     * 2025 Carolina Code Conference에서 COBOL 발표자를 찾고 있음
          + GnuCOBOL의 최근 업데이트로 인해 COBOL 발표를 원함
     * COBOL은 시대에 따라 변화하고 있음
          + 현대 COBOL은 1950년대 COBOL과 많이 다름
          + Java가 Algol-94라고 불렸다면 우리가 여전히 Algol로 프로그래밍하고 있을 것임
     * COBOL은 Rust보다 읽고 이해하기 쉬운 메모리 안전하고 안정적인 언어였음
          + 그러나 아무도 사용하지 않아서 ""죽은"" 언어로 간주됨
          + Rust와 COBOL의 코드 예시를 비교함
     * 기술이 ""죽었다""와 ""살아있다""의 정의에 따라 논의가 달라짐
          + 새로운 비즈니스가 구축되지 않으면 죽은 것으로 간주할 수 있음
          + 생산에서 여전히 사용되고 있으면 살아있는 것으로 간주할 수 있음
          + 이는 COBOL이나 메인프레임 생태계에 대한 긍정적인 점으로 간주되지 않음
          + 조직은 처음 작동하는 것을 고수하는 경향이 있음
"
"https://news.hada.io/topic?id=16978","Python 3.13에 대해 알아야할 모든 것 – JIT와 GIL의 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Python 3.13에 대해 알아야할 모든 것 – JIT와 GIL의 향상

Python 3.13의 주요 변경사항

     * 2024년 10월 7일에 CPython v3.13.0이 출시될 예정임
     * 이번 버전에서는 Python의 성능에 큰 영향을 미칠 수 있는 두 가지 주요 변경 사항이 포함됨
          + Global Interpreter Lock(GIL)을 비활성화할 수 있는 ""free-threaded"" 버전
          + 실험적인 Just-in-Time(JIT) 컴파일 지원

Global Interpreter Lock (GIL)

    GIL이란?

     * Python은 1980년대 후반 Guido Van Rossum에 의해 단일 스레드 인터프리터 언어로 설계 및 구현됨
     * Python은 소스 코드를 바이트코드로 컴파일한 후, 인터프리터가 이를 실행함
     * 객체를 모든 스레드에서 안전하게 액세스하기 위해 global lock(GIL)을 사용함
          + 여러 스레드가 동시에 바이트코드를 실행하지 못하게 하는 전역 상호 배제 락임
     * 공유 메모리 사용을 제한하지만 단일 스레드 성능에는 좋음

    Python에 GIL이 있는 이유

     * 1990년대 초반, 대부분의 프로그램은 단일 스레드였고, 단일 코어의 성능이 급격히 증가했음
     * 다중 스레드 안전성을 위해 단일 스레드 성능을 희생할 필요가 없었음
     * 다중 프로세스를 사용하여 여러 코어를 활용할 수 있음 (multiprocessing 모듈)

    왜 이제 GIL을 제거하는가?

     * Python core 개발자들이 오랫동안 GIL 제거를 원했지만 단일 스레드 성능 저하 우려로 실행되지 못했음
     * 최근 멀티코어가 보편화되면서 GIL로 인한 멀티스레딩 제약이 문제가 되고 있음
     * Microsoft 후원으로 ""Faster CPython"" 프로젝트가 Python 성능 개선에 기여함
     * Sam Gross가 GIL 없는 구현을 제안하여 PEP 703이 채택됨
     * 단계적 도입 계획: 실험적 옵션 → 공식 지원 → 기본 모드
     * 이러한 배경으로 점진적 GIL 제거 계획이 승인됨

    성능은 어떤가?

     * Free-threading을 활성화하면 20% 정도 단일 스레드 성능이 떨어짐
     * GIL을 비활성화한 멀티스레딩은 상당한 성능 향상을 보임
     * GIL을 활성화한 멀티스레딩은 단일 스레딩보다 느림
     * GIL을 비활성화한 멀티스레딩은 멀티프로세싱과 비슷한 성능을 보임

    Free-threading Python을 어떻게 사용하나?

     * pyenv로 Python 3.13.0rc2t를 설치하면 free-threading 버전을 사용할 수 있음
     * 기본값으로 GIL이 비활성화되며, '-X gil=1'로 런타임에 GIL을 다시 활성화할 수 있음
     * GIL free를 지원하지 않는 모듈을 import하면 자동으로 GIL이 활성화됨

JIT (Just-in-Time) 컴파일러

    JIT이란?

     * 전통적인 ahead-of-time 컴파일과 달리, 실행 직전에 machine code를 생성하는 기법
     * Python 3.13 이전에는 바이트코드를 하나씩 기계어로 변환하여 실행했음
     * JIT 도입으로 바이트코드를 한 번에 기계어로 변환하고 필요 시 업데이트 가능
     * Python 3.13에 도입된 기법은 ""copy-and-patch"" JIT으로, 미리 정의된 템플릿과 매칭되는 bytecode를 native code로 패치함
     * 더 진보된 JIT 컴파일러는 코드가 자주 실행되는 ""hot"" 영역을 최적화할 수 있음

    JIT가 미치는 영향은?

     * 단기적으로는 Python 코드 작성이나 실행에 큰 변화는 없을 것임
     * 그러나 점진적인 성능 개선이 이뤄져 다른 언어와 경쟁할 수 있을 것으로 기대됨

    JIT를 어떻게 사용하나?

     * Python 3.13에서 JIT는 실험적이며 기본으로 활성화되어 있지 않음
     * 'PYTHON_CONFIGURE_OPTS=""--enable-experimental-jit""' 옵션으로 빌드 시 활성화 가능
     * 런타임에 'PYTHON_JIT=0/1'로 활성화 여부를 제어할 수 있음

결론

     * Python 3.13은 runtime에 흥미로운 새로운 개념과 기능을 도입하는 큰 릴리스임
          + GIL 제거와 JIT 도입으로 중요한 변화를 예고함
     * 단기적으로는 큰 변화가 없겠지만, 장기적으로 Python 성능에 긍정적인 영향을 미칠 것임
          + free-threading과 JIT가 성숙해지면서 특히 CPU 바운드 작업에서 성능에 큰 영향을 미칠 것으로 예상

GN⁺의 의견

     * 이번 Python 3.13 업데이트는 Python 생태계에 큰 변화를 가져올 것으로 보임. GIL 제거로 멀티스레딩 병목 현상이 해소되고, JIT 도입으로 전반적인 실행 속도가 개선될 것으로 기대됨.
     * 다만 이러한 변화가 완전히 안정화되기까지는 시간이 걸릴 것임. C extension 등 기존 패키지들의 호환성 문제가 발생할 수 있고, 멀티스레딩 프로그래밍 시 race condition 등 새로운 버그가 발생할 수 있음.
     * Python의 느린 속도가 단점으로 지적되어 왔는데, 이번 업데이트로 이러한 인식이 개선되길 바람. 기존의 생산성과 가독성이라는 장점에 속도까지 갖춘다면 Python은 더욱 널리 사용되는 언어가 될 것임.
     * 그럼에도 근본적으로 동적 타입 언어라는 한계는 있음. 정적 타입 언어의 장점을 가져오려는 노력도 계속 되어야 할 것임. 최근 Python에 도입된 type hinting과 Cython 등을 적극 활용하면 어느정도 해결할 수 있을 것으로 봄.
     * 종합하면 Python 3.13은 흥미롭고 긍정적인 변화를 가져올 것으로 보임. 개발자들은 이번 변화를 잘 이해하고 활용해서 더 나은 Python 프로그램을 만들 수 있기를 기대함

   GIL 제거 및 JIT 모두 비록 지금은 미약할지 몰라도 파이썬의 흐름을 바꿀 매우 중요한 발전입니다. '가장 느린 언어'라는 오명을 벗어던지고 앞으로 더 많은 분야에서 활용될 파이썬의 미래가 기대됩니다.

   Free threading(GIL 제거)의 중요성에 대에서는 PEP 703에서 다양한 사람들의 의견과 함께 잘 정리되어 있습니다.
   또한 해당 PEP에 따르면 싱글 스레드에서 성능 하락은 5~6%에 불과하다고 하는데 해당 글과 일부 hn 댓글에서의 20~50%의 성능 하락이 있다는 주장은 납득하기 어렵네요. 확인할 수 있는 출처도 없고요.

        Hacker News 의견

     * GIL을 제거하면 일반적인 Python 프로그램이 느려지고 복잡성이 증가할 것이라는 의견
          + 실제로 얻을 수 있는 이점에 대한 의문
          + 여러 CPU 코어를 최대한 활용해야 하는 경우, OS가 프로그램의 여러 인스턴스를 실행하게 하여 병렬화 논리를 프로그램에 추가하는 방식 사용
     * JIT 활성화 버전을 다운로드할 수 없다는 점에 대한 불만
          + 직접 Python 3.13 버전을 컴파일할 수 있지만, 많은 사람들이 시도하지 않고 피드백을 주지 않는다는 경험 공유
     * ""Jack and Jill went up the hill""이라는 운율과 비슷하다는 의견
          + ""up the hill""이 무엇을 의미하는지 혼란스러웠음
          + JIT를 출시했지만 GIL을 제거했는지에 대한 의문
     * 짧게 실행되는 작은 메모리 프로그램에서 가비지 컬렉션을 끄면 속도가 크게 향상된다는 경험
          + 이를 자동화할 수 있는지에 대한 궁금증
          + 작은 프로그램이 메모리를 모두 사용하는 엣지 케이스에 대한 위험성 언급
     * 2021년에 GIL 제거에 대한 첫 논의가 있었고, 그 당시 설명에 만족하지 못한 사람들에게 좋은 요약이라는 의견
     * GIL 없는 경우를 최적화하는 것이 정말 불가능한지에 대한 의문
          + 20% 느려지는 것은 큰 문제라는 의견
     * 릴리스 날짜가 10월 2일에서 10월 7일로 변경되었다는 소식
          + 관련 링크 제공
     * nogil의 성능 저하가 20%로 인용되었지만, 최대 50%까지 될 수 있다는 의견
          + JIT가 크게 도움이 되지 않는다는 점
          + CPython의 사회적, 기업적 문제를 반영하는 실망스러운 릴리스라는 의견
          + 몇몇 사람들이 기능을 약속하고, 100% 열정적이지 않은 사람들을 침묵시키고, 기대에 못 미치는 결과를 낸다는 주장
     * 놀라운 제목이라는 의견
     * 자동 병렬화에 대한 최근 작업 링크를 찾고 있다는 질문
          + 단일 스레드 코드를 작성하고 컴파일러가 멀티스레드 코드를 생성하는 방식에 대한 링크 제공
"
"https://news.hada.io/topic?id=17029","YC, 다른 AI 스타트업을 사실상 복제했다고 인정한 AI 스타트업을 지원한 후 비난을 받고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         YC, 다른 AI 스타트업을 사실상 복제했다고 인정한 AI 스타트업을 지원한 후 비난을 받고 있음

     * PearAI라는 Y Combinator 스타트업이 토요일에 X 게시물 스레드와 YouTube 동영상으로 출시되어 즉각적인 논란을 일으켰음
          + PearAI의 설립자 Duke Pan은 자신의 프로젝트가 VSCode라는 다른 프로젝트와 Continue라는 다른 AI 편집기의 복제본이라고 공개적으로 말함
     * PearAI는 원래 ChatGPT가 작성한 Pear Enterprise License라는 자체 폐쇄 라이선스를 프로젝트에 사용했음
          + 월요일에 게시한 사과문에서 Pan은 이제 프로젝트가 원래 프로젝트와 동일한 Apache 오픈소스 라이선스에 따라 출시되었다고 말함
     * 출시 스레드는 일요일까지 수천 개의 댓글을 받음
          + 일부는 축하했지만 다른 이들은 라이선스와 PearAI가 새로운 기능이 추가된 포크가 아니라 새로운 이름을 가진 복제품이라는 사실을 지적하며 격렬하게 비난했음
     * Continue는 ""우리 주변에 형성된 생태계를 보고 기쁘지만, 오픈소스는 당연한 것으로 여겨서는 안 된다. 그것은 기여, 라이선스, 지적 재산에 대한 존중에 기반을 둔 신뢰에 기반을 둔 운동""이라는 미묘한 위협을 게시
     * Y Combinator의 CEO Garry Tan은 PearAI를 옹호하며, 오픈 소스 라이선스가 변경된 후에도 프로젝트를 지지함
          + Tan은 선택지가 많아지면 좋다고 주장하며, 마음에 들지 않으면 PearAI를 사용하지 않으면 된다고 반박함
     * Pan은 ""이 스타트업을 하기 위해 Coinbase에서 연봉 27만 달러 직장을 그만뒀다""고 자랑했는데, 이는 스타트업이 얻을 수 있는 독창적인 아이디어와는 거리가 멀었음
     * YC가 이미 두 개의 다른 AI 코드 편집기인 Void와 Melty에 자금을 지원했다는 것을 대중들이 지적했음
     * PearAI를 선발한 것에 대해서도 YC를 비판하는 사람들이 있었음. 블로거 Sven Schnieders는 성장을 위해 명성을 포기한 YC라는 글로 PearAI가 ""YC의 쇠퇴""의 예라고 썼음
     * YC가 일 년에 2개 코호트에서 4개로 두 배 늘리겠다는 계획은 이러한 인식이나 위험을 완화하지 않을 것임

GN⁺의 의견

     * 이 사건은 YC와 같은 투자자들이 AI 스타트업에 자금을 조달하는 것에 대해 얼마나 열심인지 보여줌. 아이디어의 독창성보다는 트렌드를 따라가는 것에 더 치중하는 것으로 보임
     * 오픈소스 라이선스를 무시하고 자신들의 라이선스로 바꾸는 것은 커뮤니티 정신에 어긋나는 행위임. 특히 ChatGPT로 만든 라이선스를 사용한 것은 법적인 문제가 될 수 있음
     * PearAI의 차별화 기능이 경쟁 제품과 비교했을 때 그다지 두드러지지 않아 보임. 경쟁이 치열한 시장에서 성공하기 위해서는 보다 혁신적인 기능이 필요할 것으로 보임
     * AI 기반 코드 편집기 시장이 급성장하고 있는 만큼 다양한 제품이 출시되고 경쟁하는 것은 자연스러운 현상임. 그러나 오픈소스 정신을 훼손하지 않으면서 경쟁력을 갖추는 것이 중요함
     * Copilot, Tabnine 등 이미 시장에서 검증된 제품들이 있음. 신생 스타트업이 이들을 뛰어넘기 위해서는 차별화된 기술과 비즈니스 모델이 필요할 것임

   이정도면 과학이라는 오명을 벗어날 수 없겠군요.

        Hacker News 의견

     * VC 지원 스타트업에서 4년간 리드/프린시펄 엔지니어 또는 기술 고문으로 활동한 경험 공유
          + 여러 스타트업에서 다양한 성공과 실패 경험
          + ""복사""에 대한 교훈: 동일한 도메인에서 여러 회사가 같은 일을 해도 내부 연결, 판매, 마케팅, 가격이 중요함
          + 성공적인 비즈니스의 비제품적 측면이 과소평가됨
          + 나쁜 제품은 결국 좋은 제품이 될 수 있지만, 나쁜 팀은 생존하기 어려움
          + YC나 VC가 광범위하게 베팅하는 것이 합리적임
          + 개인적인 원칙이 아닌 관찰 결과임을 명확히 함
     * YC의 성공 사례를 보고 모든 회사가 그 수준이라고 생각하는 사람들
          + 실제로 매년 500-1000개의 스타트업을 졸업시킴
          + Pear AI가 Stripe나 Airbnb보다 더 일반적인 품질과 역량을 가짐
          + 최근 배치에는 얇은 ChatGPT 래퍼가 많음
          + YC가 배치에서 제외하지 않고 오히려 칭찬한 점 비판
          + 법적 문서를 ChatGPT로 작성한 것은 지능을 모욕하는 것임
          + YC의 법적 및 행정적 지원에도 불구하고 ChatGPT로 문서를 작성한 점 비판
     * YC에 대한 두 가지 비판
          + 라이선스 문제에 대한 창업자의 가벼운 반응
          + YC가 더 이상 품질 필터가 아님을 나타냄
          + 창업자의 온라인 팔로워에 더 관심이 있음
     * YC가 지원한 또 다른 클론 사례: Athens Research
          + Roam Research의 오픈 소스 대안으로 2년 만에 폐업
          + 복사는 영적으로 해야 한다고 믿음
          + YC의 의사 결정이 매우 의심스러움
          + LumenOrbit 같은 비현실적이고 무의미한 아이디어 비판
     * Apache 오픈 소스 라이선스 하에서 완전히 허용됨
          + 다른 라이선스 모델을 사용하라고 제안
     * 포크가 문제가 아님
          + 추가 작업과 가치를 잘못 표현한 것이 문제
          + 코드 커밋이 최소한임에도 불구하고 100명의 기여자가 있다고 주장한 점 비판
     * PearAI의 창업자가 ChatGPT로 작성된 라이선스를 사용한 점 비판
          + 스타트업/VC 상태에 대한 패러디 스토리 같음
     * PearAI의 창업자가 100명 이상의 기여자가 있다고 거짓 주장한 점 비판
          + YC가 속은 것처럼 보임
          + Garry Tan의 부정적인 발언이 YC의 체면을 지키려는 시도로 보임
"
"https://news.hada.io/topic?id=17069","OpenAI, 기업 가치 평가액 209조원($157B)으로 펀딩 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenAI, 기업 가치 평가액 209조원($157B)으로 펀딩 완료

     * OpenAI는 Thrive Capital이 주도한 66억 달러($6.6B) 규모의 펀딩을 완료하여 기업 가치가 1,570억 달러로 평가됨
     * 9개월 전보다 기업 가치가 700억 달러 이상 상승한 것
     * Microsoft, Nvidia, SoftBank, MGX 등도 OpenAI에 투자함

OpenAI는 2022년 챗봇 ChatGPT 출시로 AI 붐을 일으켰음

     * 이로 인해 유사 기술을 개발하는 스타트업에 대한 투자 경쟁이 촉발됨
     * 이번 투자 라운드는 AI 기술에 대한 기술 업계의 열정이 여전히 강하다는 것을 보여줌
     * Google, Amazon, Microsoft 등 대기업의 AI 프로젝트 투자로 스타트업의 경쟁력 우려가 있었음
     * 일부 스타트업은 대기업에 인수되기도 함
     * 그러나 OpenAI의 높은 인지도와 빠른 성장세로 인해 투자자들의 관심을 끌고 있음

높은 AI 기술 비용으로 인한 적자 예상

     * OpenAI는 올해 약 37억 달러의 매출을 예상하고 있음
     * 그러나 ChatGPT와 같은 AI 기술 구축 및 운영 비용이 매우 높아 약 50억 달러의 손실이 예상됨
     * 지난 9개월 동안 1,000명 이상의 직원을 추가로 고용하여 현재 약 1,700명의 직원이 근무 중임
     * Thrive Capital은 자체 펀드에서 7억 5천만 달러, 다른 투자자들로부터 5억 5천만 달러 등 총 13억 달러를 OpenAI에 투자함
     * 2025년까지 동일한 1,570억 달러 기업가치로 최대 10억 달러를 추가 투자할 수 있는 옵션도 보유함

리더십 교체와 주요 인사 이탈로 인한 성장통

     * 2023년 이사회가 CEO인 Sam Altman을 예기치 않게 해임했다가 5일 만에 복직시키는 사태가 발생함
     * 이후 최고과학자이자 공동창업자인 Ilya Sutskever 등 주요 인사들이 회사를 떠남
     * 지난 주에는 CTO, 최고연구책임자, 연구부사장 등이 사임 의사를 밝힘

비영리에서 수익을 제한하는 기업으로의 전환

     * OpenAI는 2015년 비영리 연구소로 설립되었으나, Elon Musk가 떠나고 자금 지원을 중단하자 수익을 제한하는 기업으로 전환함
     * 이는 AI 구축에 필요한 수십억 달러를 조달하기 위한 것이었음
     * 그러나 여전히 본래의 이사회가 투자자들에게 책임을 지지 않고 회사를 운영하고 있음
     * OpenAI는 오랫동안 영리 기업으로 전환하는 것에 대해 논의해 왔음
     * 그러나 내년까지는 이루어지지 않을 것으로 예상됨
     * 이번 투자 라운드 조건에 따르면 OpenAI는 2년 내에 영리 기업으로 전환해야 하며, 그렇지 않으면 자금이 부채로 전환됨

GN⁺의 의견

     * OpenAI의 높은 기업 가치 평가는 AI 기술과 ChatGPT의 잠재력에 대한 시장의 기대감을 반영하는 것으로 보임
     * 그러나 AI 기술 개발과 운영에 드는 막대한 비용으로 인해 단기적으로는 수익성 개선이 쉽지 않을 것임. 장기적인 수익 모델 확립이 필요해 보임
     * 경쟁사 대비 OpenAI만의 차별화된 기술과 서비스 개발이 관건이 될 것임. 특히 최근 주요 인사들의 잇따른 사임으로 인해 기술 개발에 차질이 생기지 않을지 우려됨
     * AI 기술이 가져올 사회적 영향과 윤리적 문제에 대한 깊이 있는 고민도 필요해 보임. 기술 개발과 함께 AI의 책임있는 활용을 위한 노력도 병행되어야 할 것임
     * 유사한 대화형 AI 서비스로는 Google의 Bard, Anthropic의 Claude 등이 있음. 기술적 완성도와 사용성, 그리고 수익 모델 측면에서의 경쟁이 치열해질 것으로 예상됨

        Hacker News 의견

     * OpenAI가 66억 달러를 모금했으나, 연간 50억 달러의 손실을 보고 있어 추가 자금이 1년 정도의 운영 기간을 제공함.
          + 새로운 투자 조건에 따르면, OpenAI는 2년 내에 영리 기업으로 전환해야 하며, 그렇지 않으면 자금이 부채로 전환됨.
          + 투자자들은 최소 10배의 수익을 기대하며, 이는 META의 현재 시장 가치보다 큼.
          + 30배의 수익을 원한다면 OpenAI는 세계에서 가장 가치 있는 회사가 되어야 함.
     * OpenAI는 자체 AdWords 버전을 시작하지 않았음.
          + Google은 검색창에 입력된 정보를 기반으로 광고를 배치하여 수익을 창출함.
          + 현재 사람들은 ChatGPT 검색창에 원하는 것을 입력함.
     * OpenAI의 가치가 실제로 그 정도인지 의문임.
          + 최고의 인재가 독립하여 데이터 센터 크레딧만으로 OpenAI를 따라잡을 수 있음.
          + OpenAI의 경쟁 우위는 특정 벤치마크에서 몇 달 앞서 있는 것에 불과함.
     * OpenAI가 66억 달러를 모금함.
          + Microsoft와 NVIDIA의 수익이 합쳐서 66억 달러 증가함.
     * Theranos와 WeWork 이후로 Pre-IPO ""평가""에 대해 항상 회의적임.
     * 스타트업이 빠르게 성장하려면 리더십의 안정성이 필요함.
          + Google, Meta 등은 출발 당시 리더십이 매우 안정적이었음.
          + OpenAI는 그렇지 않음.
          + AI 연구자로서, 인류와 비영리 명목으로 기부를 받은 후 영리 기업으로 전환하는 것은 부끄러운 일이며, 이는 가장 유능한 연구자들을 끌어들이지 못할 것임.
          + Microsoft가 ""악""으로 낙인찍혔을 때와 유사함.
     * OpenAI에 대한 우려가 더 많지 않은 것이 놀라움.
          + 오픈 소스 및 오픈 웨이트 모델이 OpenAI의 수준에 빠르게 도달하고 있음.
          + 엣지 AI 모델, 즉 앱/확장에 맞는 작은 모델들이 거의 무료로 OpenAI와 경쟁하고 있음.
     * 주식 매입의 암시된 평가를 보는 대신, 나머지 금융 조건을 고려해야 함.
          + 작은 주식 거래가 10으로 평가되고, 부착된 큰 우선 부채가 1로 평가될 경우, 어느 평가를 믿어야 할지 알 수 있음.
"
"https://news.hada.io/topic?id=16974","컴퓨터 코딩보다 더 어려운 인간 코딩","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          컴퓨터 코딩보다 더 어려운 인간 코딩

    컴퓨터를 위한 코드 작성은 어렵지만, 사람을 위한 코드 작성은 더 어렵다

     * 컴퓨터를 위한 코드를 작성하는 것은 이미 어렵다. 큰 비즈니스 목표를 작은 논리적 명령어로 분해해야 하기 때문임.
     * 하지만 사람을 위한 코드를 작성하는 것은 더 어렵다. 이는 컴퓨터 과학과 심리학이 결합된 작업임.
     * Richard Feynman의 말처럼, 전자가 감정을 가지고 있다면 물리학이 얼마나 어려울지 상상해보라. 이는 사람을 위한 프로그래밍을 설명하는 데 적절함.

    시작이 곧 제품이다

     * 사용자 피드백을 듣는 것은 중요하지만, 대부분의 피드백은 제품을 자주 사용하는 파워 유저로부터 옴.
     * 생존 편향이 존재함. 시작하지 않은 사용자의 피드백은 거의 듣지 못함.
     * 소비자 제품은 오랜 기간 동안 온보딩 과정을 최적화해왔음. 개발 도구도 동일해야 함.
     * 온보딩 과정을 제품의 일부로 간주하고, 설정을 최소화하여 사용자가 몇 분 내에 제품을 사용할 수 있도록 해야 함.

    사람은 '핵심 개념'이 아닌 예제로부터 배운다

     * 사람은 패턴 매칭에 뛰어남. 반면 컴퓨터는 엄격한 논리를 따름.
     * 많은 개발 도구 문서는 컴퓨터 프로그램처럼 작성됨. 이는 사람에게 적합하지 않음.
     * 예제를 통해 배우는 것이 더 효과적임. 예제는 사용자가 도구를 이해하는 데 도움이 됨.

    성공의 함정에 빠지기

     * 프로그래밍의 기본 모드는 오류 수정임. 사용자는 대부분의 시간을 오류 수정에 보냄.
     * 오류를 성공으로 유도하는 것이 중요함.
     * 오류를 기회로 삼아 사용자를 올바른 경로로 안내해야 함. 예외 처리에 코드 스니펫을 포함시키고, 경고 메시지를 통해 도움을 제공해야 함.

    개념적 과부하 피하기

     * 새로운 개념을 이해해야 하는 것은 마찰을 일으킴.
     * 2-3개의 개념은 괜찮지만, 8개의 새로운 개념을 배우는 것은 부담스러움.
     * 적은 개념으로 강력한 기능을 제공하는 프레임워크가 이상적임. 예를 들어, React는 몇 가지 간단한 개념으로 강력한 기능을 제공함.

    개념적 오리 원칙

     * 새로운 개념을 도입할 때, 사용자에게 친숙한 용어를 사용하는 것이 중요함.
     * 예를 들어, 새로운 값을 평가하는 것을 '함수'라고 부르는 것이 좋음. 이는 사용자가 기존의 정신 모델을 활용할 수 있게 함.

    프로그래머블리티

     * 사용자는 코드베이스에서 창의적인 작업을 할 것임.
     * 프레임워크의 거의 모든 것이 '프로그래머블'해야 함.
     * CLI 대신 코드에서 직접 호출할 수 있도록 하고, 설정을 SDK나 API로 전환해야 함.

    마법, 기본값, 구문 설탕에 신중해야 함

     * 기본값과 마법 같은 기능은 신중하게 도입해야 함.
     * 기본값이 97% 이상, 마법이 99% 이상 적용되지 않는다면 도입을 피해야 함.
     * 코딩은 골프가 아님. 최소한의 코드 작성을 목표로 하지 말고, 가독성을 중시해야 함.

    사람을 위한 코드 작성은 어렵다

     * 대부분의 것들은 불변해야 함.
     * '스캐폴딩'(코드 생성)을 피해야 함.
     * 피드백 루프를 매우 빠르게 만들어야 함.
     * 사용자가 쉽게 대처할 수 있도록 폐기 절차를 마련해야 함.
     * 문서와 예제에서 코드 스니펫에 대한 자동 테스트를 사용해야 함.

    GN⁺의 정리

     * 이 글은 사람을 위한 코드 작성의 어려움과 그 해결책을 다룸.
     * 사용자 친화적인 개발 도구를 만드는 것이 중요하며, 이는 온보딩 과정에서 시작됨.
     * 예제를 통해 배우는 것이 효과적이며, 오류를 성공으로 유도하는 것이 핵심임.
     * 새로운 개념을 도입할 때는 사용자에게 친숙한 용어를 사용하고, 프로그래머블리티를 고려해야 함.
     * 기본값과 마법 같은 기능은 신중하게 도입해야 하며, 가독성을 중시해야 함.

        Hacker News 의견

     * 사람들은 각기 다른 방식으로 배움
          + 핵심 개념을 먼저 이해한 후 예제를 보는 것을 선호함
          + 많은 튜토리얼이 레고 조립처럼 손을 잡아주는 방식임
          + 결정을 내리는 방법과 이유를 알고 싶음
          + 새로운 라이브러리나 프레임워크를 접근할 때, 소개 텍스트를 먼저 읽고, ""Getting started"" 코드 샘플을 건너뜀
          + 고급 섹션에서 개념에 대한 논의가 더 많아 이를 먼저 탐구함
     * 글쓰기와 공감 능력이 중요함
          + 코드 작성과 애플리케이션 작성은 다름
          + 외부 지향적인 개발자는 아키텍처와 문서화에 더 신경 씀
          + 단순함이 중요함
          + 애플리케이션 작성은 에세이 작성과 비슷함
          + 프레임워크는 개발자의 조직 능력을 저해함
     * 모든 사람이 예제로부터 배우는 것은 아님
          + 일반에서 구체로 배우는 사람도 있음
          + 이런 사람들은 K12 교육에서 소외됨
     * 코드는 인간을 위해 작성됨
          + 문제를 포괄적으로 이해하고, 이해관계자와 협력하며, 효율적인 알고리즘을 고안하는 것이 중요함
          + 코드 작성은 어렵지 않음
     * Code Complete에서 인용
          + ""프로그래밍의 작은 부분은 컴퓨터가 읽을 수 있도록 프로그램을 작성하는 것이고, 큰 부분은 다른 인간이 읽을 수 있도록 작성하는 것임""
     * 코드 작성은 인간을 위한 것임
          + 컴퓨터는 기계 명령어로 충분함
          + 코드는 인간의 생각을 형식화하는 방법임
     * IDE의 발전에 대한 의견
          + 기본 intellisense는 개선되었지만, 코딩의 개념은 크게 변하지 않음
          + 새로운 도구와 라이브러리 접근이 쉬워짐
          + 코딩 작업을 컴퓨터에 맡기고 창작에 집중하고 싶음
          + 언어의 작은 세부 사항을 자동으로 처리하는 도구가 필요함
          + 여러 메서드를 동시에 화면에 표시하고 싶음
          + 데이터 변환을 자동으로 처리하고 싶음
     * 블로그 포스트 홍보
          + ""Move Fast & Document Things""라는 블로그 포스트를 작성함
          + 코드 작성 문화를 공유함
     * 프로그래밍 학습 방법에 대한 의견
          + 작은 프로그램을 작성하며 배움
          + 기본 지식이 부족해 더 좋은 소프트웨어 개발 직업에 지원할 수 없었음
          + 기본을 항상 배우는 것이 중요함
     * 예제와 핵심 개념의 중요성
          + 예제와 핵심 개념 모두 중요함
          + 잘 정의되고 문서화된 핵심 개념이 필요함
          + ""Getting Started"" 가이드에는 예제가 포함되어야 함
"
"https://news.hada.io/topic?id=16969","TSMC 임원들, OpenAI CEO 샘 알트먼을 '팟캐스트 브로'로 묘사했다는 의혹","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            TSMC 임원들, OpenAI CEO 샘 알트먼을 '팟캐스트 브로'로 묘사했다는 의혹

TSMC 임원들, Sam Altman을 '팟캐스트 브로'로 일축

     * OpenAI CEO Sam Altman의 제안
          + Sam Altman은 작년 겨울 TSMC, Samsung, SK Hynix 등 아시아 주요 기업 임원들과 만남을 가짐
          + 36개의 반도체 공장을 건설하는 데 7조 달러가 필요하다는 제안을 함
          + TSMC 임원들은 Altman을 '팟캐스트 브로'라고 부르며 그의 제안을 비웃음
     * Altman의 투자 계획
          + Altman은 AI 발전을 위해 아시아의 제조 능력, 중동의 자금, 미국의 규제 기관을 활용하려 함
          + 투자 규모는 미국 연간 생산량의 4분의 1에 해당하는 수조 달러에 달할 것이라고 주장
          + OpenAI의 최신 성명에서는 투자 규모를 수백억 달러로 축소함

  TSMC에서의 꿈이 현실로

     * TSMC 임원들의 반응
          + Altman의 제안은 TSMC 임원들에게 신뢰를 주지 못함
          + TSMC의 새 회장 Dr. C. C. Wei는 Altman을 '너무 공격적'이라고 평가함
          + Altman은 한국에서도 Samsung과 SK hynix 임원들과 만남을 가졌으나, 국가 안보 문제로 협상이 중단됨

  OpenAI의 불확실한 미래

     * 투자와 수익의 불확실성
          + OpenAI의 현재 비즈니스 모델은 연간 30억 달러의 수익을 올리지만, 연간 지출은 70억 달러에 달함
          + Altman은 AI가 전기처럼 널리 사용될 것이라고 믿음
          + 그러나 현재로서는 AI의 '킬러 앱'이 존재하지 않음

GN⁺의 정리

     * Sam Altman의 제안은 TSMC 임원들에게 신뢰를 주지 못했으며, 그의 투자 계획은 비현실적으로 여겨짐
     * OpenAI의 현재 비즈니스 모델은 수익보다 지출이 훨씬 많아 지속 가능성에 의문이 제기됨
     * AI의 잠재력은 크지만, 현재로서는 이를 실현할 수 있는 '킬러 앱'이 부족함
     * 비슷한 기능을 가진 프로젝트로는 Microsoft의 Copilot과 Apple의 Apple Intelligence가 있음

        Hacker News 의견

     * 원래 NYT 기사를 공유하는 것이 좋음
          + https://nytimes.com/2024/09/…"">NYT 기사 링크
     * OpenAI의 계획에 대한 원문 기사 재업로드
          + 기사 링크
     * AI 열풍이 AGI에 대한 기대를 부추김
          + 컴퓨터가 그럴듯한 문장을 만들 수 있다면, 곧 정확한 문장을 만들 수 있을 것이라는 기대
          + 이후의 AI 겨울이 혹독할 것이라는 우려
     * Sam Altman이 반도체 제조 시설에 대해 잘 모른다는 의견
          + 새로운 칩 제조 공장의 투자 회수에 수십 년이 걸릴 것이라는 전망
          + 특정 고객을 대상으로 하는 것은 비합리적이라는 주장
     * 현재 AI 담론에 대한 세 가지 문제점
          + AGI에 대한 공공의 초점이 오히려 방해 요소임
          + AI가 모든 작업을 수행해야만 직업을 대체할 수 있다는 생각
          + AI로 인해 해고된 사람들이 새로운 일자리를 찾을 수 있을지에 대한 의문
     * Sam Altman의 접근 방식이 스타트업 정신과 반대된다는 의견
          + 대규모 투자를 원하지만 기술의 용도에 대한 명확한 아이디어가 부족함
     * TSMC에 대한 긍정적인 평가
     * OpenAI의 현재 비즈니스 모델에 대한 불신
          + 연간 30억 달러의 수익에 비해 70억 달러의 지출
          + 매일 1천만 달러의 손실을 감당할 수 있는 기간에 대한 의문
     * 구체적이고 영향력 있는 도전에 자원을 투자해야 한다는 주장
     * Altman이 주로 공허한 말로 사람들을 다루는 데 익숙하다는 의견
          + 칩 제조업체는 실질적인 결과를 원하기 때문에 이러한 접근 방식이 통하지 않을 것이라는 주장
"
"https://news.hada.io/topic?id=16998","json4u - JSON 시각화 및 처리 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       json4u - JSON 시각화 및 처리 도구

     * 사용하기 쉬운 UI로 JSON을 시각화 및 수정 편집 가능
     * Graph 및 테이블 뷰 모드 제공
     * 구조 비교 & 텍스트 비교로 2개의 JSON간 차이점 빠른 확인
     * 빠른 포매팅 및 Validation
     * 중첩(Nested) 파싱 지원
     * jq 지원
     * CSV Import/Export 기능

   올라왔던 도구 중에 제일 빠르고 좋은거 같네요
"
"https://news.hada.io/topic?id=17030","uBlock Origin Lite 개발사 Firefox 스토어 지원 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                uBlock Origin Lite 개발사 Firefox 스토어 지원 종료

     * Firefox Addon 스토어에서 uBlock Origin Lite 콘텐츠 차단기를 사용하는 경우, 더 이상 지원되지 않음
     * Addon 제작자인 Raymond Hill은 ""비이성적이고 적대적인"" 스토어 검토팀과의 여러 차례 마주친 후 지원을 중단하고 uBlock Origin Lite를 자체 호스팅으로 이전했음

문제의 시작

     * 9월 초 Mozilla는 uBlock Origin Lite 확장 프로그램의 모든 버전이 정책을 위반한다고 플래그를 지정함
     * 검토자들은 확장 프로그램이 사용자 데이터를 수집하고 ""축소되거나 연결되거나 기계 생성된 코드""를 포함한다고 주장함
     * 개발자는 ""JavaScript에 대한 기본적인 이해가 있는 사람이라면 누구나 제기된 문제가 말이 되지 않는다는 것을 확인하는 데 몇 초밖에 걸리지 않는다""고 말하며 이러한 주장을 반박한 것으로 보임

개발자의 대응

     * Raymond Hill은 스토어에서 확장 프로그램을 삭제하고 GitHub에서 자체 호스팅 버전으로 이동하기로 결정함
     * 이는 Firefox에서 uBlock Origin Lite를 계속 사용하려는 사용자는 GitHub에서 최신 버전을 다운로드해야 함을 의미함(자체 업데이트 가능)

Mozilla의 사과

     * 개발자의 마지막 메시지에는 Mozilla가 실수를 인정하고 사과하는 이메일이 포함되어 있었음
     * 그러나 Raymond은 여전히 Mozilla 부가 기능 스토어에서 확장 프로그램을 제거했으며, 이는 더 이상 addons.mozilla.org에서 찾을 수 없음을 의미함

원래의 uBlock Origin은 여전히 사용 가능

     * Firefox용 원래 uBlock Origin은 여전히 사용 가능하며 지원되고 있음
     * Lite 버전은 프로세서 및 메모리와 같은 리소스에 더 가볍고 효율적인 부하를 가진 Manifest V3 기반 확장 프로그램임
     * Hill은 최근 Chrome이 확장 프로그램을 지원되지 않는 것으로 플래그 지정한 후 uBlockOrigin Lite로 전환할 것을 권장했음(이를 우회하는 방법이 있음)
     * Chrome과 달리 Mozilla는 가까운 시일 내에 Manifest V2 기반 확장 프로그램을 삭제할 계획이 없으므로 uBlock Origin은 Firefox 및 MV2를 지원하는 다른 브라우저에서 계속 존재하고 작동할 것임

        Hacker News 의견

     * Mozilla 직원이지만 Addons 팀과는 관련이 없어서 압박 상황은 잘 모름
          + gorhill을 Addons 리뷰어로 임명하고, 자신의 Addons만 리뷰하도록 하는 것이 좋을 것 같음
          + gorhill은 Firefox의 주요 기여자이므로 그의 리뷰가 가치 있음
     * 중형 브라우저 확장 프로그램을 관리하는 사람임
          + Mozilla 스토어에 다시 등록하는 데 어려움을 겪고 있음
          + 리뷰어가 유럽에 기반을 두고 있어 미국에서의 처리 시간이 길어짐
          + 간단한 실수로 인해 2주가 걸리는 경우가 많음
     * gorhill이 과민 반응을 보였다고 생각함
          + 모든 Addons를 수동으로 검토하는 것은 비현실적임
          + 자동화는 필연적으로 오탐을 유발할 수 있음
          + 사전 검토가 없으면 사용자에게 위험할 수 있음
     * 확장을 배포하려면 검토를 받아야 하는 것이 매우 짜증남
          + 자체 호스팅 버전을 승인받는 데 며칠이 걸림
          + Mozilla의 서명 강제와 XUL 제거는 최악의 결정임
     * Mozilla는 실수에 대해 사과하고, 리뷰에 대한 질문이나 우려가 있을 때 연락하라고 권장함
          + Addons를 스토어에서 제거하기 전에 먼저 연락해야 함
     * gorhill의 uBlock Origin이 Firefox의 유일한 판매 포인트일 수 있음
          + Mozilla의 고위 임원이 많은 돈을 받는 대신, gorhill을 지원할 팀을 구성할 수 있었음
     * 왜 AMO에 이 확장이 존재하는지 의문임
          + Lite/Manifest v3 버전은 구형 브라우저용으로, 제대로 광고를 차단하는 Firefox용 버전을 설치해야 함
     * Mozilla가 실수를 인정하고 사과했지만, Raymond는 여전히 확장을 Mozilla Add-ons Store에서 제거함
          + 저자가 개인적으로 받아들였거나 리뷰 프로세스를 개선하고자 강력한 메시지를 전달하려는 것 같음
     * Raymond Hill이 uBlock Origin (manifest v2 버전)에서도 같은 행동을 하지 않기를 바람
          + Mozilla와 Raymond Hill이 문제를 해결하지 못하는 것이 아쉬움
          + 이 상황이 uBlock Origin의 장기적인 안정성에 영향을 미칠까 걱정됨
     * Gorhill의 uBlock Origin이 없었다면 인터넷은 매우 끔찍한 곳이 되었을 것임
          + Raymond에게 감사함
"
"https://news.hada.io/topic?id=16989","64비트 time_t 전환의 위험성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          64비트 time_t 전환의 위험성

  64비트 time_t로의 전환 위험성

     * 32비트 time_t 타입 사용으로 인해 2038년에 32비트 애플리케이션이 오류를 일으킬 가능성이 있음
     * time_t를 64비트 타입으로 변경하는 것이 해결책으로 제시됨
     * Musl은 이미 전환 완료, glibc는 옵션으로 지원, Debian 등 여러 배포판은 전환 완료
     * Gentoo와 같은 소스 기반 배포판은 전환이 어려움

    Large File Support로 돌아가기

     * 32비트 아키텍처는 파일 오프셋을 지정하는 off_t와 inode 번호를 지정하는 ino_t를 32비트로 사용
     * 이로 인해 2 GiB 이상의 파일을 열 수 없고, inode 번호가 32비트 범위를 초과하는 파일을 열 수 없음
     * Large File Support 도입으로 이 문제를 해결, glibc에서는 여전히 선택 사항
     * time64 지원을 위해 LFS 사용이 필요

    어떤 ABI를 사용하는가?

     * 세 가지 가능한 서브-ABI:
         1. 32비트 타입을 사용하는 원래의 ABI
         2. 64비트 off_t와 ino_t, 32비트 time_t를 사용하는 LFS
         3. LFS + 64비트 time_t를 사용하는 time64
     * glibc 빌드는 세 가지 변형과 호환 가능하지만, API에서 이러한 타입을 사용하는 라이브러리는 호환되지 않음

    왜 ABI 변경이 나쁜가?

     * 32비트 타입을 64비트 타입으로 교체하는 것은 호환성을 깨뜨림
     * 구조체의 경우, time_t가 포함된 구조체는 필드 위치가 변경되어 잘못된 필드를 읽거나 쓸 수 있음
     * 함수 매개변수의 경우, 스택에 전달되는 매개변수의 위치가 변경되어 잘못된 매개변수를 읽거나 쓸 수 있음
     * 이러한 문제는 런타임 오류와 보안 문제를 야기할 수 있음

    어떻게 안전하게 만들 수 있는가?

     * 세 가지 아이디어:
         1. 새로운 ABI를 구분하기 위해 플랫폼 튜플(CHOST) 변경
         2. 새로운 ABI를 위해 libdir 변경
         3. 서로 다른 서브-ABI를 사용하는 바이너리가 링크되지 않도록 바이너리 수준의 ABI 구분 도입

    플랫폼 튜플 변경

     * 플랫폼 튜플은 툴체인이 타겟팅하는 플랫폼을 식별
     * 새로운 ABI를 도입하기 위해 벤더 필드를 변경하거나 libc 필드에 추가 ABI 명세를 추가
     * 예: i686-gentoo_t64-linux-gnu, i686-pc-linux-gnut64

    libdir 변경

     * libdir은 라이브러리 설치 디렉토리의 기본 이름
     * time64 변형을 위해 libdir 값을 변경하여 새로운 libdir에 time64 라이브러리를 설치
     * 이로 인해 time64 실행 파일이 time32 라이브러리를 링크하지 않도록 방지
     * Portage의 preserved-libs 기능을 사용하여 기존 라이브러리를 보존

    바이너리 호환성 보장

     * 서로 다른 ABI를 사용하는 바이너리를 혼합할 수 없음
     * ELF 클래스, 머신 식별자, 플래그 필드 등을 사용하여 호환성 확인
     * time32와 time64 시스템을 구분하기 위해 새로운 ELF 노트 섹션 추가 고려

    오래된 사전 빌드 애플리케이션

     * 오래된 사전 빌드 애플리케이션은 시스템 라이브러리와의 호환성 문제와 y2k38 문제에 직면
     * 멀티리브 레이아웃을 사용하여 호환성 문제 해결 가능
     * y2k38 문제는 시스템 시간을 조작하거나 VM을 사용하는 방법으로 해결 가능

  GN⁺의 정리

     * 2038년 이후 32비트 time_t를 사용하는 애플리케이션이 오류를 일으킬 가능성이 있음
     * 64비트 time_t로 전환이 필요하지만, 이는 ABI 변경을 수반하여 복잡한 문제를 야기함
     * 플랫폼 튜플 변경, libdir 변경, 바이너리 호환성 보장을 통해 안전한 전환 경로를 제공할 수 있음
     * 오래된 사전 빌드 애플리케이션은 별도의 호환성 문제와 y2k38 문제를 해결해야 함

        Hacker News 의견

     * Gentoo는 패키지를 설치하지 않고 빌드하는 옵션이 부족함
          + Gentoo는 패키지 빌드와 설치가 한 단계로 이루어짐
          + ABI 변경 시 업데이트 중에 시스템이 쉽게 깨질 수 있음
          + 64비트 time_t 문제는 널리 알려진 ABI 변경의 예시임
     * .so 버전 관리를 통해 ABI 변경을 처리하는 방법
          + .so 파일은 버전 번호를 포함함
          + 패키지 자체가 내부적으로 버전 번호를 관리함
          + 64비트 time_t를 지원하려면 상속된 ABI를 제어할 수 있는 추가 구성 요소가 필요함
     * Mac OS X에서 off_t와 ino_t를 처리한 방법
          + 기존 호출과 구조체는 그대로 유지됨
          + 새로운 호출과 타입에 64 접미사가 추가됨
          + 빌드 시 컴파일된 바이너리가 실행될 최소 OS 버전을 지정할 수 있음
     * Debian은 64비트 time_t로 전환하는 데 어려움을 겪었음
          + 소스 기반 배포판은 더 어려운 전환 과정을 겪음
     * 32비트 유닉스 시스템에서 time_t를 unsigned 32비트로 대체한 경험
          + 2038년 이후 68년을 더 사용할 수 있게 됨
          + 유닉스 에포크 이전의 날짜를 표현할 수 없음
     * FreeBSD에서 amd64 포트를 할 때 64비트 time_t를 도입한 경험
          + 32비트 함수 인자가 64비트로 자동 변환됨
          + 초기부터 64비트 time_t를 사용하여 문제를 피함
          + tzcode가 64비트 안전하지 않아서 일부 문제를 겪음
     * BSD 매뉴얼 페이지의 ""Bugs"" 섹션에 있는 농담
          + ""You can tune a file system, but you can't tune a fish.""
     * 소스 기반 배포판 대신 Debian 같은 비소스 기반 배포판으로 전환하고 싶다는 의견
     * 32비트 time_t와 64비트 time_t의 구조체 오프셋 차이
          + 64비트 타입에서는 b가 64비트 정렬이 필요하여 패딩이 추가됨
     * C에서 타입 별칭이 나중에 변경될 가능성을 제공한다고 생각했지만, 실제로는 그렇지 않음
     * 문제를 빨리 해결하는 것이 좋다는 의견
          + OpenBSD는 모든 아키텍처에서 64비트 time_t를 사용함
"
"https://news.hada.io/topic?id=16994","영국, 방위 목적으로 반도체 공장 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         영국, 방위 목적으로 반도체 공장 인수

    영국, 국방 목적으로 반도체 공장 인수

     * 영국 정부는 국방 공급망을 강화하고 군대를 지원하기 위해 더럼 주 뉴턴 에이클리프에 있는 반도체 공장을 인수함.
     * 이 시설은 전투기와 같은 군사 플랫폼에 필수적인 갈륨 비소 반도체를 제조할 수 있는 영국 유일의 보안 사이트임.
     * 국방부 장관 존 힐리는 이전에 Coherent Inc.가 소유했던 이 사이트를 방문했으며, 이제 Octric Semiconductors UK로 알려질 예정임.
     * 이번 인수는 북동부 지역에서 최대 100개의 숙련된 일자리를 확보하고 영국의 국방 인프라의 중요한 부분을 보호할 것으로 예상됨.

     ""반도체는 오늘날 우리가 의존하는 기술의 최전선에 있으며, 내일의 군사 능력을 확보하는 데 중요한 역할을 할 것임. 이번 인수는 영국 방위 생산을 지원하겠다는 정부의 명확한 신호임. 우리는 영국 방위 공급망을 보호하고 성장시키며, 북동부 일자리를 지원하고, 군대를 위한 중요한 기술을 보호하고, 국가 안보를 강화할 것임.""

     * 반도체는 휴대폰과 컴퓨터에서 군사 응용 프로그램에 이르기까지 현대 전자 제품의 필수 구성 요소임.
     * 정부는 이번 인수가 영국의 방위 능력을 강화하고 산업 역량을 증가시킬 것이라고 발표했으며, 향후 몇 년 동안 시설에 추가 투자를 계획하고 있음.
     * 이번 인수는 영국의 무역 관계를 강화하고 국내 고품질 일자리를 지원하기 위한 투자 정상 회담을 앞두고 이루어짐.
     * 글로벌 반도체 수요가 증가함에 따라, 이번 조치는 인공지능, 양자 기술 및 6G와 같은 미래 기술적 요구를 충족할 수 있도록 영국을 위치시킴.

    배경

     * 2023년, 이전 소유주인 Coherent는 사업 수요 감소로 인해 100개 이상의 일자리를 줄일 계획을 발표했으며, 이로 인해 사이트의 미래가 불확실해짐.
     * 1991년 처음 문을 연 이후 여러 차례 소유권이 변경되면서, 방위 및 항공우주와 같은 산업에 필요한 중요한 반도체 부품을 계속 생산할 수 있을지에 대한 우려가 커짐.
     * 최근 정부의 인수는 이 중요한 시설의 미래를 확보하기 위한 중요한 조치임.
     * 정부가 개입함으로써 일자리를 보호하고 전투기 능력을 향상시키는 등 군사 응용 프로그램에 사용되는 중요한 반도체 생산을 보장함.
     * 이는 작년의 불확실성 이후 공장을 안정화시키는 것뿐만 아니라, 방위 부문에서 중요한 기술에 대한 영국의 통제 능력을 강화함.

    GN⁺의 정리

     * 이번 기사는 영국 정부가 국방 목적으로 반도체 공장을 인수한 내용을 다루고 있음.
     * 반도체는 현대 전자 제품의 필수 구성 요소로, 군사 응용 프로그램에서도 중요한 역할을 함.
     * 정부의 이번 인수는 영국의 방위 능력을 강화하고 산업 역량을 증가시키기 위한 중요한 조치임.
     * 비슷한 기능을 가진 산업 프로젝트로는 인공지능, 양자 기술 및 6G 기술 개발이 있음.

        Hacker News 의견

     * 기존 반도체 공장을 사는 것이 현명함
          + 새로운 공장을 짓는 것은 많은 인프라와 비용이 필요함
          + 지진 완화, 저렴한 물과 전기, 화학 물질 공급 등의 요소가 필요함
          + 시골 지역에 공장을 짓는 것은 많은 비용과 시간이 소요됨
     * Coherent가 소유했던 공장으로 보임
          + III-V 반도체 기술이 사용됨 (특히 GaAs)
          + 레이저, LED, 이미지 센서 등에 유용함
          + LIDAR 센서와 통신 산업에서도 사용됨
     * 갈륨 비소(GaAs)는 까다로운 물질임
          + 영국에서 유일하게 갈륨 비소 반도체를 제조할 수 있는 보안 시설임
          + 군사 플랫폼에 중요한 구성 요소임
     * 1991년에 지어진 공장이 아직도 가치가 있음
          + 미국은 5nm 공장을 애리조나에 건설 중임
          + 1991년 공장은 오래되었지만 업그레이드가 계속되었을 가능성이 있음
     * 영국의 마지막 반도체 공장이 중국 투자자에게 팔렸음
          + 마지막 제철소도 폐쇄됨
     * 직원 100명으로 대량 생산은 어려움
          + 과거에 Motorola와 Inmos가 영국에 공장을 가졌었음
     * 주요 글로벌 강대국들이 전쟁 준비를 하는 것처럼 보임
          + 정부가 100개의 일자리를 지키기 위해 인수한 것일 수 있음
          + 더 큰 계약을 통해 회사를 재정적으로 안정시킬 수도 있었음
     * 공정 노드가 무엇인지 궁금함
     * 파산을 막기 위한 인수였는지 궁금함
     * '세계 반도체 수요 증가로 영국이 미래 기술 요구를 충족할 수 있게 됨'이라는 주장은 의심스러움
          + 인공지능 발전은 4nm 실리콘 CMOS의 대량 생산에 의존함
          + '양자 기술'이라는 표현은 모호함
          + 양자 컴퓨팅과는 관련이 없음
"
"https://news.hada.io/topic?id=17013","Bop Spotter","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Bop Spotter

     * 샌프란시스코 Mission 지역의 한 장대 위에 태양광 전원으로 충전되는 안드로이드 폰을 설치
          + 마이크를 아래 거리쪽으로 향하게 한 후, 매일 24시간 음악을 샤잠으로 인식해서 기록
          + 경찰의 총소리 감지 시스템인 Shot Spotter와 유사하지만 음악 감지 목적으로 설치
          + 실시간으로 인기 있는 음악을 감지하고 기록하는 웹페이지임
     * 이것은 문화 감시(Culture Surveillance)임
          + 아무도 눈치채지 못하고 아무도 동의하지 않음
          + 하지만 범죄자를 잡는 것이 목적이 아니라 분위기를 포착하기 위함
          + 실시간으로 쏟아져 나오는 새로운 음악 목록을 지속적으로 피드함

GN⁺의 정리

     * 이 프로젝트는 실시간으로 음악 트렌드를 파악할 수 있는 흥미로운 시도임
     * Shot Spotter와 유사한 기술을 문화 감시에 활용한 점이 독특함
     * 개인의 동의 없이 데이터를 수집하는 점에서 윤리적 논란이 있을 수 있음

        Hacker News 의견

     * 이 프로젝트에 대해 모든 것이 마음에 듦
          + 해커 문화의 일환으로 기술을 통해 개념을 탐구하는 서브컬처 존재
          + 1990년대 후반과 2000년대 초반의 해커데이와 슬래시닷 같은 사이트를 떠올리게 함
          + 이 프로젝트는 아마도 임시로 설치된 예술 작품으로, 프라이버시와 저작권에 대한 아이디어를 도전함
     * 이 프로젝트의 작동 방식에 대한 세부 사항
          + Tasker 스크립트가 루프에서 실행됨
          + 비행기 모드에서 10분간 오디오를 녹음한 후, 무료 WiFi에 연결하여 서버로 업로드함
          + 서버는 오디오 파일을 15초 간격으로 나누어 Shazam API를 통해 분석함
     * 누군가와 함께 미션 지역을 돌아다니며 ""Never Gonna Give You Up""을 틀고 싶음
     * 9월 28일에 같은 Pitbull 노래가 한 시간 간격으로 감지됨
          + 같은 사람이 반복해서 듣고 있었을 가능성 있음
          + 몇 달 전, 약혼자와 함께 Adele의 ""Someone Like You""를 반복해서 듣는 사람을 목격함
     * Google이 몇 년 전 Pixel 잠금 화면에 노래를 '하트'하여 재생 목록에 추가하는 기능을 추가함
          + 내 전화는 한 달에 약 300곡을 식별함
     * 새벽 3시에 Muni 버스 정류장 근처에서 많은 목소리를 들음
          + 미션 스트리트 근처의 바 근처일 가능성 있음
          + 자전거를 타고 미션을 돌아다니며 노래를 틀고 Strava에서 위치를 확인하고 싶음
     * 이 페이지의 스타일링이 마음에 듦
          + 모든 요소가 일관되게 레트로 스타일을 따름
     * 미션 지역은 다양함
          + 40년 동안 젠트리피케이션이 진행 중이지만 완전히 이루어지지 않음
          + 정확한 위치에 따라 사운드트랙이 여러 번 바뀔 수 있음
     * ""범죄자를 잡는 것이 아니라 분위기를 잡는 것""이라는 문구가 마음에 듦
"
"https://news.hada.io/topic?id=17012","웹 컴포넌트 허용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               웹 컴포넌트 허용

    웹 컴포넌트는 괜찮음

     * 웹 개발 커뮤니티는 종종 웹 컴포넌트에 대해 논쟁을 벌임
     * Ryan Carniato는 ""Web Components Are Not the Future""라는 글을 작성했고, Cory LaViska는 ""Web Components Are Not the Future — They’re the Present""라는 글로 응답함
     * 저자는 이 논쟁을 평화적으로 해결하려고 함

    성능

     * 웹 컴포넌트는 Custom Elements에 기반을 두고 있어 DOM을 통해 모든 인터페이스가 처리됨
     * DOM 노드를 최소화하는 것이 성능 최적화의 핵심임
     * 그러나 성능만이 전부는 아니며, 유지보수성, 보안성, 사용성, 접근성 등의 다른 요소들도 고려해야 함
     * 예를 들어, aria-* 속성을 렌더링하지 않으면 성능이 향상될 수 있지만, 접근성을 위해서는 반드시 필요함
     * 성능 최적화는 중요하지만, 실제로는 레이아웃 쓰래싱, 네트워크 워터폴, 불필요한 재렌더링 등 더 단순한 문제들이 성능에 더 큰 영향을 미침

    표준의 비용

     * 표준을 지원하는 것은 추가적인 코드 작성과 실행을 필요로 함
     * 그러나 웹 컴포넌트를 지원하는 것이 큰 부담은 아님
     * 새로운 웹 플랫폼 기능을 고려하는 것은 당연한 일이며, 이는 Symbols, Proxys, Promises 등에도 해당됨
     * 웹 개발 커뮤니티의 일부는 웹 컴포넌트를 지원하지 않으려 할 수 있으며, 이는 괜찮음
     * 웹은 다양한 접근 방식을 허용하는 큰 텐트임

    결론

     * 웹 컴포넌트는 그 자체로는 문제가 없지만, 모든 것을 대체할 수 있다는 약속은 위험함
     * 웹 컴포넌트는 서버 사이드 렌더링, 접근성, 상호 운용성 등에서 약점을 가짐
     * React, Solid, Svelte 등 다른 프레임워크가 여전히 빛나는 영역이 있음
     * 웹은 다양한 용도로 사용되며, 이는 창의성을 표현할 수 있는 기회를 제공함
     * 웹 컴포넌트가 당신에게 맞지 않을 수 있지만, 이는 괜찮음

    # GN⁺의 정리

     * 이 글은 웹 컴포넌트에 대한 다양한 관점을 제시하며, 성능과 다른 요소들 간의 균형을 강조함
     * 웹 컴포넌트는 모든 것을 대체할 수 없지만, 특정 용도에 적합함
     * 웹 개발 커뮤니티는 다양한 접근 방식을 허용하며, 이는 창의성을 증진시킴
     * 웹 컴포넌트가 맞지 않는다면 다른 프레임워크를 사용할 수 있음
     * 웹의 다양한 기능은 새로운 창의적 표현의 기회를 제공함

        Hacker News 의견

     * ""Web Components Are Not the Future""라는 기사에 대해 설득력 있는 주장이 부족함을 느꼈음
          + 현재 프론트엔드 프레임워크 상태가 혼란스러움
          + 복잡한 프레임워크를 배우고 싶지 않음
          + 문서 없이 이해할 수 없는 마법 같은 기능을 원하지 않음
          + Web Components는 직관적이며 Shadow DOM을 통한 격리 기능을 제공함
          + React 시대에서 JSX만 유지해야 한다고 생각함
     * 사람들은 서로 다른 최적화를 추구하기 때문에 의견이 엇갈림
          + VC 지원 스타트업에서는 프레임워크가 적합할 수 있음
          + 학술 연구실에서는 유지보수 비용이 적게 드는 Web Components가 더 나음
          + Vue에서 Web Components로 전환한 경험이 매우 좋았음
          + 의존성이 줄어들어 관리가 쉬워졌음
     * Svelte는 Custom Elements API를 통해 Web Components 생성을 지원함
          + Svelte는 JS/HTML/CSS로 컴파일되어 재사용 가능한 컴포넌트를 쉽게 만들 수 있음
     * Web Components가 풀스택 개발자의 삶을 더 좋게 만들지 못한다고 생각함
          + 대부분의 예제가 HTML에 데이터를 템플릿화하는 것에 불과함
          + Handlebars로 이미 할 수 있는 일임
     * Web Components와 Shadow DOM이 브라우저 확장 기능의 작동을 방해할 수 있음
          + 브라우저 벤더들이 이 문제를 해결하는 데 서두르지 않음
     * 상호 운용성은 성능 비용을 수반함
          + 여러 프레임워크가 각자의 런타임을 가지고 있어 성능 저하가 발생할 수 있음
          + Web Components는 기술적으로 뒤처지며 복잡성을 증가시킴
     * Web Components가 현재의 프론트엔드 문제를 해결할 수 있다고 생각함
          + 성능이 뛰어나며, 데이터 테이블을 부드럽게 스크롤할 수 있음
          + Web Components 라이브러리를 준비 중임
     * 250,000줄의 JS 코드베이스를 상속받아 Web Components로 리팩토링 중임
          + 코드 길이를 50,000줄 줄였음
          + 기존 코드의 기능을 이해하는 데 도움이 됨
     * Web Components는 JS 없이도 작동할 수 있음
          + 점진적 향상을 위해 몇 번 사용해 봤음
          + 서버 사이드 렌더링과 잘 작동함
     * 프레임워크와 Web Components는 서로 다른 문제를 해결하는 도구임
          + 프레임워크는 상태에 따른 뷰 렌더링을 담당함
          + Web Components는 상태 관리 문제를 해결하지 않음
          + 두 가지가 공존할 수 있다고 생각함
"
"https://news.hada.io/topic?id=17054","Show GN: WelsonJS - 윈도우즈 내장 자바스크립트 엔진으로 앱 빌드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: WelsonJS - 윈도우즈 내장 자바스크립트 엔진으로 앱 빌드

    1. 프로그래밍 경력 초반부터 ""메모장""만을 사용해 소프트웨어를 개발하려는 클라이언트들과의 문제가 지속적으로 발생함.
    2. 현대 프로그래머들에게 IDE 사용을 제한하는 것은 고통스럽게 느껴짐.
    3. 이러한 문제를 해결하기 위해 WelsonJS JavaScript 프레임워크를 도입함.
    4. WelsonJS는 Windows OS에 내장된 JavaScript 엔진을 사용하여, 텍스트 에디터만으로도 완전한 애플리케이션을 개발할 수 있음.
    5. JavaScript를 사용해 대부분의 Windows 시스템 기능을 구현할 수 있으며, 여기에는 GUI 애플리케이션, 콘솔 애플리케이션, 오피스 자동화 애플리케이션, 그리고 Windows 서비스 애플리케이션이 포함됨.
    6. 또한, TypeScript, Rescript, CoffeeScript 2, LiveScript와 같은 트랜스파일러 언어를 사용하여 Windows 시스템 프로그래밍도 가능함.

   이해도가 낮아서 질문드려요... Windows에 특화된 Electron이라고 이해하면 될까요?

   Electron에서 영감을 받긴하였으나, 별도의 설치나 빌드 과정을 최대한 회피하고 Windows 운영체제에 내장된 기본 기능을 최대한 스크립팅으로 끌어쓴다는 점에서 차이가 있습니다.

   ㅎㄷㄷ

   인터넷 익스플로러는 죽지 않았습니다..

   윈도우 자체 내장 자바스크립트는 JScript라고 하지않나요?

   으...

   Github 들어가면 이미지에 꿈돌이가 있군요?

   1번은 말하자면, 관리자가 개발자에게 ""프로그래밍 그 뭐 메모장으로 하면 되는거 아냐?"" 같은 상황이군요.

   와우~~ 박수보냅니다. 짝짝짝!!!

   윈도우즈 프로그램을 Javascript 엔진으로 개발할 수 있게 도와주는 라이브러리 아닌가요?

   제가 이해를 못해서 그런데
   링크의 내용이 어떤식으로 해석되서 본문 내용이 된 걸까요?
   특히나 1번, 2번 부분이 이해가 잘 안가네요

   1번, 2번에 대한 내용은 프로젝트 내 Wiki에 있습니다.

   그렇군요. 위키쪽을 한번 읽어봐야겠네요. 감사합니다.

   라이브러리가 아닙니다. js 단독으로 완전한 어플리케이션 구성이 가능합니다.
"
"https://news.hada.io/topic?id=16946","Xkcd 1425 (Tasks) 10주년 기념일","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Xkcd 1425 (Tasks) 10주년 기념일

     * XKCD 1425 (Tasks) turns ten years old today
          + 유명한 XKCD 만화 중 하나인 ""Tasks""가 오늘로 10주년을 맞음
          + ""사진이 새인지 확인하기"" 같은 작업이 이제는 비전 LLM, CLIP, ResNet+ImageNet 등을 통해 쉽게 해결 가능해짐
          + 그러나 소프트웨어 개발에서 쉬운 문제와 어려운 문제를 구분하는 것은 여전히 많은 경험이 필요함
          + LLMs는 이 문제를 더 복잡하게 만듦
          + LLMs가 어떤 작업을 신뢰성 있게 해결할 수 있는지 이해하는 것은 매우 어렵고 직관적이지 않음
          + 수학에 약하고 사실 조회를 신뢰성 있게 할 수 없는 컴퓨터 시스템임
     * AI-assisted programming tools
          + AI 지원 프로그래밍 도구의 등장으로 더 많은 사람들이 자신만의 소프트웨어를 만들기 시작함
          + 새로운 AI 지원 초보 프로그래머들이 쉬운 문제와 어려운 문제를 빠르게 배우고 있음
          + 최근에 Claude Artifact로 이미지를 분석할 수 없다는 불만을 본 적이 있음
          + Claude 자체는 이미지를 분석할 수 있지만, CSP 헤더가 생성된 코드가 LLM으로 API 호출을 할 수 없게 막기 때문임
     * Recent articles
          + DJP: A plugin system for Django - 2024년 9월 25일
          + Notes on using LLMs for code - 2024년 9월 20일
          + Things I've learned serving on the board of the Python Software Foundation - 2024년 9월 18일

GN⁺의 정리

     * 이 글은 소프트웨어 개발에서 쉬운 문제와 어려운 문제를 구분하는 것이 얼마나 중요한지 강조함
     * LLMs와 같은 AI 도구가 이 문제를 더 복잡하게 만들고 있음
     * AI 지원 프로그래밍 도구의 사용이 증가하면서 더 많은 사람들이 소프트웨어 개발에 뛰어들고 있음
     * CSP 헤더와 같은 기술적 제약을 이해하는 것이 중요함
     * 유사한 기능을 가진 프로젝트로는 GPT-4, BERT 등이 있음

        Hacker News 의견

     * AI/ML의 발전 속도가 놀라울 정도로 빠름
          + 10년 전 GAN 논문이 나왔을 때 생성된 이미지 품질이 매우 인상적이었음
          + 현재까지의 진보는 상상 이상임
     * 소프트웨어는 집과 같음
          + 고객에게 ""식당 의자를 거실로 옮기는 것과 화장실 변기를 옮기는 것은 다르다""는 비유를 자주 사용함
          + 비프로그래머들도 이러한 비유를 직관적으로 이해함
     * 인간은 수천 년 동안 항해 문제를 해결해왔음
          + 인공위성 유지에 필요한 에너지는 모델 훈련보다 훨씬 큼
     * ""이건 잘 안 맞는 것 같다""는 말이 있음
          + 10년 전에는 어려운 것과 쉬운 것이 뒤바뀔 줄 몰랐음
     * LLM이 해결할 수 있는 작업을 이해하는 것은 여전히 어려움
          + 딸의 발표를 도와주기 위해 ChatGPT를 사용했으나 원하는 결과를 얻지 못함
          + 대신 각 알파벳을 야채로 구성하여 딸이 원하는 단어를 만듦
     * Jeremy Howard가 그의 확산 과정에서 이 분류기를 구현함
     * Randall의 예상 범위 내에 있음
          + 프로젝트 초기 예상은 5년이었으며, 10년 후에는 공개된 솔루션이 존재함
     * 2014년에 1425가 나왔음
          + ""연구팀과 5년이 필요하다""는 말이 있었음
          + 2020년 BBC는 카메라가 새의 종류를 감지하는 블로그를 게시함
     * 사진에 일반적인 새의 색상이 포함되어 있는지 감지하고 나중에 경쟁자를 제거할 때 수정함
     * 과거에 프로그래밍을 이해하지 못하는 매니저가 있었음
          + 작은 정보 창을 여는 버튼 하나라고 생각했음
          + 데이터를 준비하는 데 몇 주가 걸린다는 것을 이해하는 데 시간이 걸렸음
"
"https://news.hada.io/topic?id=17004","실리콘밸리에서 배운 10가지.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            실리콘밸리에서 배운 10가지.

   Weavel (Y Combinator S24)와 함께 San Francisco에서 여름을 보내며 배운 것들.

   제가 쓴 글을 아주 짧게 요약해 보았습니다. 요약하다 보니 내용이 많이 빠져서, 원문 읽기를 추천해 드립니다.
   원문: https://frontierbydoyeob.substack.com/p/frontier
    1. Have conviction and keep building (자기 확신을 가지고 계속 만들어라.)

     * 이론보다 실행이 100배 중요하다 (execution eats strategy for breakfast)
     * e.g. Segment ($3 B exit): edutech로 시작해 망할 위기에 처했다. 포기하지 않고 500줄짜리 오픈소스 event router로 피벗. 단순했지만 유저가 사랑하는 제품으로 시작해 결국 길을 찾음.

    2. Don't think about A -> Z, focus on A -> B (체계적인 계획이 아니라, 당장 빠르게 잘 실행하는 것에 집중하라)

     * 전 단계에 대한 체계적인 계획 세우기는 pre-product market fit 회사에 독이 된다.

    3. 10 Loving customers is all you need (10명이 제품을 사랑하게 하라)

     * 10명이 제품을 사랑하고 리텐션이 높게 나오는 것 > 1000명이 제품에 관해 관심 가지는 것

    4. Technical founding team is key (코파운더의 기술적 능력이 필수적이다)

     * 만들기 어려운 피처를 빠르게 출시하고, 잘 작동하는 제품을 제공하는데 technical 능력이 가장 중요하다.

    5. Keep showing up to YC, a16z SR etc... (미국 진출을 위해 미국 accelerator에 문을 계속 두드리자)

     * YC 커뮤니티는 정말 강력했고, 이는 한국팀이 미국 진출하는 데 여러모로 큰 힘이 된다 (batchmate, alumni community & partners).

    6. Follow your energy

     * 열정을 따르기보다, 일을 해도 해도 에너지가 계속 생기는 일을 해야 한다.

    7. Live the life you would live if you knew you wouldn't fail. (실패하지 않을 거라 가정하고, 가장 기대되는 인생을 살자)

     * 수십 년에 걸쳐서 복리를 쌓을 수 있고, 결국 최대한으로 성장할 수 있다.

    8. Obsession and taste (제품과 고객에 대한 집착과 완벽주의)
    9. AI is really changing the world (AI는 정말 세상을 바꾸고 있다)

     * 가만히 있는데 gpt-4o-2024-08-06, gpt-o1 나오면서 비즈니스가 수십 퍼센트씩 개선되는 경우가 많이 보였다.
     * 미국에선 이미 vertical 마다 AI B2B SaaS 나오고 있고, B2C도 시동을 걸고 있다.
     * 우리는 이미 AGI 시대에 살고 있다 (gpt-o1 IQ 120). 비관론자들은 비관하겠지만, 이를 활용하는 건 builder와 engineer의 몫이다.

   10. Seoul vs San Francisco

     * 미국은 기업가의 나라, 뛰어난 사람들이 앞다투어 기업을 세우고 새로운 가치를 창출하고자 하고 실제로 그중 5% 가량은 유니콘이 된다 (YC 기준).
     * 세상을 바꾸는 건 생산자, 즉 builder이다. 한국에 geek, hacker, builder들이 더더욱 많아졌으면 한다.
"
"https://news.hada.io/topic?id=17047","성체 초파리 뇌 지도화 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            성체 초파리 뇌 지도화 완료

성인의 초파리 뇌 지도화

     * 현재까지 가장 정교한 연결체
       성인의 초파리 뇌가 지도화되었음. 이는 인간 뇌 연구에 중요한 진전을 의미함. 초파리는 비행, 구애, 싸움, 복잡한 장기 기억 형성, 그리고 기생 말벌 같은 보이지 않는 위험에 대해 서로 경고하는 능력을 가짐.

GN⁺의 정리

     * 초파리 뇌의 지도화는 인간 뇌 연구에 중요한 이정표로, 복잡한 신경 연결을 이해하는 데 도움을 줄 수 있음.
     * 이 연구는 인간의 뇌를 더 잘 이해하고, 신경 질환 치료에 기여할 가능성이 있음.
     * 초파리의 행동과 뇌 구조에 대한 이해는 인공지능 및 로봇 공학 분야에서도 응용될 수 있음.
     * 유사한 연구로는 쥐나 다른 모델 생물의 뇌 연구가 있으며, 이들은 인간 뇌 연구의 기초 자료로 활용될 수 있음.

        Hacker News 의견

     * Nature에 공개된 논문이 있음
     * Connectome 기반 연구는 역동성과 다양한 상호작용을 포착하지 못해 한계가 있다고 생각함
          + 뉴런이 성장하는 모습을 보면 매우 유동적이고 역동적인 구조임
          + 간단한 뇌에서도 뉴런과 연결의 수가 기하급수적으로 증가함
     * 데이터 제품은 다운로드, 프로그래밍 접근, 상호작용 브라우징이 가능하며 다른 데이터 리소스와 상호운용 가능함
     * '파리 뇌 지도'가 어떤 모습일지 궁금함
          + 다운로드가 3D 모델인지, 아니면 수학적 행렬인지 궁금함
     * 인간 뇌를 매핑하려면 소프트웨어의 상당한 개선이 필요함
          + 과일 파리는 140,000개의 뉴런과 54.5백만 개의 시냅스를 가짐
          + AI가 매핑했지만 인간이 3백만 번의 수정을 해야 했음
          + 인간 뇌는 약 860억 개의 뉴런과 수조 개의 시냅스를 가짐
          + 과일 파리의 오류율을 인간 뇌 매핑에 사용할 수 있도록 낮춰야 함
     * Connectome을 사용하여 가상 과일 파리 시뮬레이션을 실행할 수 있는지 궁금함
     * 과거의 흥미로운 게시물이 있음: 전체 뇌 connectome의 과일 파리 (2023)
     * 모든 과일 파리의 뇌가 동일한지 궁금함
          + 무엇이 매핑되었고 왜 일반화될 수 있는지 궁금함
     * 데이터 수집가로서 파리의 지도를 다운로드할 수 있는지 궁금함
     * '매핑'이란 무엇을 의미하는지 궁금함
          + 각 신경/축삭이 무엇을 하는지 아는 것인지 궁금함
"
"https://news.hada.io/topic?id=17066","AMD GPU Inference","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           AMD GPU Inference

     * 이 프로젝트는 AMD GPU에서 대형 언어 모델(LLMs)을 실행하기 위한 Docker 기반 추론 엔진을 제공
     * Hugging Face의 모델과 호환되며, 특히 LLaMA 모델 계열에 중점을 두고 있음

  사전 준비

     * ROCm 지원이 있는 AMD GPU
     * 시스템에 설치된 Docker
     * 호스트 시스템에 설치된 ROCm 드라이버(버전 5.4.2 또는 호환 가능)

  프로젝트 구조

     * amd-gpu-inference/
          + src/
               o __init__.py
               o engine.py
               o model.py
               o utils.py
               o amd_setup.py
          + Dockerfile
          + requirements.txt
          + run_inference.py
          + run-docker-amd.sh
          + README.md

  빠른 시작

    1. 이 저장소를 클론함:
git clone https://github.com/slashml/amd-gpu-inference.git
cd amd-gpu-inference

    2. 실행 스크립트를 실행 가능하게 만듦:
chmod +x run-docker-amd.sh

    3. 지정된 모델과 프롬프트로 추론 엔진을 실행함:
./run-docker-amd.sh ""meta-llama/Llama-2-7b-chat-hf"" ""Translate the following English text to French: 'Hello, how are you?'""

       ""meta-llama/Llama-2-7b-chat-hf""를 사용하고자 하는 Hugging Face 모델로 교체하고, 자신의 프롬프트를 제공함.

  상세 사용법

    Aptfile

   프로젝트에는 Docker 컨테이너에 설치해야 할 필수 ROCm 패키지를 나열한 Aptfile이 포함되어 있음. 이는 추론 엔진이 AMD GPU를 효과적으로 활용할 수 있도록 모든 필수 ROCm 드라이버와 라이브러리를 제공함.

    Docker 이미지 빌드

   run-docker-amd.sh 스크립트는 Docker 이미지를 자동으로 빌드함. 수동으로 빌드하려면 다음을 사용함:
docker build -t amd-gpu-inference .

    컨테이너 실행

   run-docker-amd.sh 스크립트는 필요한 AMD GPU 플래그와 함께 컨테이너를 실행함. 수동으로 실행하려면:
docker run --rm -it \
  --device=/dev/kfd \
  --device=/dev/dri \
  --group-add=video \
  --cap-add=SYS_PTRACE \
  --security-opt seccomp=unconfined \
  amd-gpu-inference ""model_name"" ""your prompt here""

   ""model_name""을 사용하고자 하는 Hugging Face 모델로 교체하고, ""your prompt here""를 입력 텍스트로 교체함.

  사용자 정의

    모델 변경

   컨테이너 실행 시 Hugging Face에 있는 모든 모델을 지정할 수 있음. 예를 들어:
./run-docker-amd.sh ""facebook/opt-1.3b"" ""Your prompt here""

    추론 로직 수정

   추론 방식을 변경해야 하는 경우, run_inference.py 파일을 수정함. 변경 후 Docker 이미지를 다시 빌드해야 함.

  문제 해결

     * 호스트 시스템에 AMD GPU 드라이버와 ROCm이 올바르게 설치 및 구성되었는지 확인함.
     * ""메모리 부족"" 오류가 발생하면 더 작은 모델을 사용하거나 입력/출력 길이를 줄임.
     * 모델 관련 문제는 Hugging Face의 모델 문서를 참조함.

  기여

   기여는 환영함! Pull Request를 제출할 수 있음.

  감사의 글

     * 이 프로젝트는 Hugging Face Transformers 라이브러리를 사용함.
     * ROCm은 AMD에서 개발함. MIT 라이선스 하에 제공됨. 자세한 내용은 여기에서 확인 가능함.

GN⁺의 정리

     * 이 프로젝트는 AMD GPU에서 대형 언어 모델을 실행할 수 있는 Docker 기반 솔루션을 제공함으로써, AMD 하드웨어를 사용하는 개발자들에게 유용함.
     * Hugging Face의 다양한 모델과 호환되며, 특히 LLaMA 모델 계열에 중점을 두고 있어, 다양한 자연어 처리 작업에 활용 가능함.
     * 이 프로젝트는 AMD의 ROCm 플랫폼을 활용하여 GPU 성능을 극대화하며, Docker를 통해 손쉽게 환경을 설정할 수 있음.
     * 비슷한 기능을 가진 프로젝트로는 NVIDIA의 TensorRT나 Google의 TensorFlow Serving 등이 있음.

        Hacker News 의견

     * PyTorch와 transformers를 사용하면 대부분의 작업을 수행할 수 있으며, llama.cpp 컴파일도 비교적 쉬운 편임
          + Windows에서는 win-hip 바이너리나 Vulkan 빌드를 사용할 수 있음
          + ROCm 5.4.2는 오래된 버전이지만, 최근 업데이트된 ROCm 6.2와 RDNA3 호환성을 확인할 수 있음
     * 생성된 머신러닝 라이브러리의 증가가 놀라움
          + 이 라이브러리는 50%가 print 문으로 구성되어 있으며, 불필요한 분기도 포함되어 있음
     * Ubuntu 24.04에서는 대부분의 AMD GPU에서 llama.cpp를 실행할 수 있음
          + 성능은 최적이 아닐 수 있지만 다양한 카드를 테스트했음
          + RDNA 3, MI200, MI300 사용자들은 AMD 제공 ROCm 패키지를 사용하는 것이 좋음
     * Ryzen 8700G와 NPU를 사용 중이며, Vulkan을 통해 iGPU 가속을 얻고 있음
          + 64GB RAM으로 32GB 이상의 모델을 시도하는 데 문제가 없었음
     * ROCm 5.4.2가 RX 7900 XTX를 지원할지 의문이며, 최신 rocm/pytorch 이미지를 사용하는 것이 더 쉬웠음
     * NixOS 워크스테이션에 필요한 설정을 추가했음
          + ROCm 가속을 활성화하고 환경 변수를 설정함
     * AMD ROCm 설치 시 36GB의 공간이 필요하다는 점이 이해되지 않음
     * 현재 가장 가성비 좋은 AMD GPU에 대한 질문
          + 중고 3090 두 개를 약 $750에 구매했음
     * AMD와 NVidia 그래픽 카드의 가격 비교에 관심이 있다면, 가격을 빠르게 확인할 수 있는 사이트를 제공함
     * ROCm 5.4 대신 최신 버전(6.2)을 사용하지 않는 이유에 대한 질문
          + 제공된 Docker 이미지가 성공적으로 빌드되지 않음
"
"https://news.hada.io/topic?id=17063","터미널 색상은 까다로움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              터미널 색상은 까다로움

     * 터미널 색상 설정은 많은 사람들에게 어려운 문제임. 특히 ""검은 배경에 파란색""은 읽기 어려운 조합으로 자주 언급됨.
     * ANSI 색상은 16가지로 구성되며, 각 터미널 에뮬레이터가 색상을 다르게 해석할 수 있음.

    문제 1: 검은 배경에 파란색

     * 검은 배경에 파란색 텍스트는 읽기 어려움.
     * ANSI 색상은 표준이 없어서 터미널마다 다르게 보일 수 있음.

    문제 1.5: 흰색 배경에 밝은 노란색

     * 흰색 배경에 밝은 노란색은 거의 읽을 수 없는 수준임.
     * 색상 대비 문제를 해결하기 위해 터미널 에뮬레이터의 색상을 재구성할 수 있음.

    색상 재구성 방법

     * 방법 1: 터미널 에뮬레이터 설정 : 대부분의 현대 터미널 에뮬레이터는 색상 재구성 기능을 제공함.
     * 방법 2: 쉘 스크립트 실행 : ANSI 이스케이프 코드를 사용하여 터미널 색상을 변경할 수 있음.

    문제 2: 256색 사용 프로그램

     * fd와 같은 프로그램은 확장된 256색 세트를 사용하여 색상 대비가 나쁠 수 있음.
     * 일부 최신 도구는 사용자 정의 테마를 지원하여 다양한 터미널 테마와 잘 작동함.

    문제 3: Solarized 테마의 회색

     * Solarized 테마의 회색은 디렉토리와 실행 파일의 색상에 영향을 미침.
     * 기본 Solarized 테마는 회색을 사용하지만, 수정된 base16 버전은 밝은 색상을 사용함.

    문제 4: 터미널 배경과 맞지 않는 vim 테마

     * vim 테마의 배경색이 터미널 테마와 다르면 경계가 생길 수 있음.

    문제 5: 프로그램의 배경색 설정

     * ngrok 같은 프로그램이 원치 않는 배경색을 설정할 수 있음.
     * base16-shell 스크립트는 추가 색상을 제공하기 위해 색상 #16을 밝은 주황색으로 설정함.

    문제 6: 잘못 설정된 TERM

     * TERM 환경 변수가 잘못 설정되면 색상이 제대로 표시되지 않을 수 있음.

    문제 7: 좋은 색상 선택의 어려움

     * 색맹인 사람들은 적절한 색상 조합을 찾기 어려움.
     * 배경색과 커서 색상이 비슷하면 찾기 어려울 수 있음.

    문제 8: nethack/mc의 색상 문제

     * nethack이나 midnight commander 같은 프로그램은 특정 색상 테마를 기대할 수 있음.
     * 프로그램 시작 전에 색상 팔레트를 변경하여 문제를 해결할 수 있음.

    문제 9: 파이프에 쓰기 시 색상 비활성화

     * fd | less와 같은 명령어는 색상을 비활성화함.
     * unbuffer fd | less -r을 사용하여 색상을 볼 수 있음.

    문제 10: ls와 다른 명령어의 원치 않는 색상

     * ls의 색상을 비활성화하거나 사용자 정의할 수 있음.

    문제 11: vim의 색상 문제

     * vim 색상 설정은 ANSI 색상과 24비트 색상 두 가지 방법이 있음.
     * 2016년 이후 vim은 24비트 색상을 지원함.

    기타 문제

     * 여러 프로그램의 조합에서 발생하는 문제는 다루기 어려움.

    base16의 효과

     * base16-shell과 base16-vim을 사용하여 성공적으로 색상을 설정할 수 있었음.
     * 제한된 내장 테마와 ANSI 색상 설정의 문제점이 있을 수 있음.

    기타 색상 테마 도구

     * rootloops.sh와 같은 색상 테마 생성 도구가 있음.
     * 인기 있는 색상 테마로는 catpuccin, Monokai, Gruvbox, Dracula 등이 있음.

    GN⁺의 정리

     * 터미널 색상 설정은 복잡하지만, 최소 대비 기능을 사용하면 많은 문제를 해결할 수 있음.
     * 다양한 색상 테마와 도구를 활용하여 사용자 경험을 개선할 수 있음.
     * 터미널 색상 설정은 개인의 취향과 필요에 따라 다르게 적용될 수 있음.
     * 비슷한 기능을 가진 다른 프로젝트로는 Solarized, Gruvbox 등이 추천됨.

        Hacker News 의견

     * 다양한 화면과 설정에서 밝은 테마가 어두운 테마보다 미묘하게 다르게 보임을 발견함. 이는 다양한 컴퓨터에 테마를 이식할 때 심각한 문제임
          + 제한된 폰트와 색상 지원을 가진 Linux 또는 BSD 콘솔로 전환할 때 문제가 발생할 수 있음. fbterm을 사용하여 X 없이도 괜찮은 터미널 기능을 얻었지만, fbterm 자체의 문제도 존재함. vim 색상 설정 시 기능이 부족한 콘솔을 위한 대체 테마를 준비해야 함
     * 터미널 에뮬레이터의 기본 색상 테마가 좋지 않으므로 변경해야 함. 개인적으로 Solarized 테마를 선호함
          + 8비트 또는 24비트 색상 이스케이프 시퀀스를 사용하는 CLI 도구를 피해야 함. 이는 사용자에게 적대적일 수 있음. 개발자가 색상 테마를 기본으로 설정하는 것은 도움이 되지 않음
     * 밝은 테마를 사용하고 싶었으나, 많은 프로그램이 어두운 배경에 최적화된 색상을 사용하여 포기함. 현재는 어두운 배경에 ANSI 테마를 사용하여 충분한 대비를 유지하고 있음
     * 새로운 APCA 알고리즘을 사용하여 색상을 확인하는 것이 좋음. APCA는 글꼴 크기, 무게, 전경/배경, 주변 조명 등을 고려함
     * 색상을 완전히 비활성화하려는 사람들도 있음. 개인적으로 시도해보고 싶지만, 예쁜 색상도 좋아함
     * Emacs의 frame-background-mode가 잘못 설정되어 색상이 좋지 않게 보일 수 있음
     * FlatUI 색상 테마를 약간 수정하여 사용 중이며, 큰 문제 없이 사용하고 있음
     * 네온 사인이나 LED 이름판의 파란색이 밤에 눈에 가장 부담스러움. 멀리서 보면 흐릿하고 초점이 맞지 않음
     * 터미널 색상에 대한 관심이 줄어들었으며, 색상 조정이 생산성에 긍정적인 영향을 미치지 않음. 기본 Apple 터미널 'pro' 테마의 배경 대비만 약간 조정함
     * 터미널 색상 선택에 시간을 많이 썼으나, 이제는 흰색 배경에 검은색 텍스트를 사용함. 낮에는 눈부심이 없고, 밤에는 f.lux를 사용하여 눈의 피로를 줄임
"
"https://news.hada.io/topic?id=17015","성장을 위해 명성을 포기한 Y Combinator","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      성장을 위해 명성을 포기한 Y Combinator

     * Y Combinator의 성공과 문제점
          + Y Combinator(YC)는 가장 성공적인 초기 단계 벤처 캐피탈(VC) 펀드 또는 액셀러레이터 중 하나임
          + 그러나 YC는 자신들의 성공 요인을 제대로 이해하지 못했음
          + Sam Altman은 YC의 성공을 제대로 파악하지 못하고, 단순히 규모를 확장하는 데 집중했음
     * Sam Altman의 접근 방식
          + Altman은 더 많은 회사를 받아들이는 것이 성공을 예측하기 어려운 상황에서 합리적이라고 판단했음
          + 더 많은 회사가 실패하더라도, 한두 개의 성공이 많은 실패를 보상할 수 있다고 생각했음
          + 그러나 이는 명성과 권위가 중요한 요소임을 간과한 것임
     * 명성과 권위의 중요성
          + Harvard가 더 많은 학생을 받아들이지 않는 이유는 자원이 부족해서가 아니라, 그들의 성공이 배타성에 있기 때문임
          + Harvard의 강의는 유튜브에서도 볼 수 있지만, 사람들이 Harvard에 가는 이유는 명성과 권위 때문임
          + 마찬가지로, 창업자들이 Sequoia나 a16z 같은 최고 VC로부터 자금을 조달하려는 이유도 명성과 권위 때문임
     * YC의 문제점
          + YC의 주요 매력이 멘토링이 아니라 ""YC W22"" 같은 명성이라면, 이는 문제임
          + Sam Altman이 시작한 것은 명성 자본을 실제 자본으로 교환하는 것임
          + 그러나 명성 자본이 소진되면 이를 다시 회복하기는 거의 불가능함
     * 현재 YC의 하락
          + 최근 배치에서 YC의 하락이 이미 나타나고 있음
          + 예를 들어, PearAI라는 AI 코드 편집기는 다른 YC 지원 오픈 소스 AI 코드 편집기인 Continue의 클론임
          + PearAI 팀은 매우 유능해 보이지 않음
          + Garry Tan(YC CEO)은 이를 방어하는 트윗을 리트윗했지만, 이는 문제의 본질을 놓친 것임
     * YC의 명성 하락
          + PearAI가 자금을 확보할 수 있다면, 누구나 자금을 받을 수 있다는 의미임
          + 이는 YC 브랜드의 명성을 크게 떨어뜨림
          + YC는 더 이상 정당성을 신호하는 배타적인 클럽이 아니라, 광범위한 기술 스타트업의 지표가 되고 있음

GN⁺의 정리

     * Y Combinator는 초기 단계 벤처 캐피탈로서 큰 성공을 거두었지만, 최근 명성과 권위를 희생하면서 성장에 집중한 결과 하락세를 보이고 있음
     * Sam Altman의 접근 방식은 더 많은 회사를 받아들이는 것이었지만, 이는 명성 자본의 소진을 초래함
     * Harvard와 같은 명문 대학이 배타성을 유지하는 이유는 명성과 권위 때문이며, 이는 VC에도 동일하게 적용됨
     * YC의 최근 사례인 PearAI는 YC의 명성 하락을 보여주는 대표적인 예임
     * YC는 더 이상 배타적인 클럽이 아니며, 이는 앞으로 더 많은 문제를 야기할 수 있음

   Batch마다 뽑는 팀이 너무 많아진게 제일 큰 문제 같아요. 너무 많아지다보니 그레미 어워드 시상식 후보들을 보는게 아니라, 노래방에 있는 이달의 최신곡 목록 보는 것마냥 그냥 최신 스타트업 목록 보는거 같아진거 같아요.

   Sam Altman도 YC에서 했던 조언들을 후회한다고 했죠.

   https://x.com/TheTranscript_/status/1668217686701010944/photo/1

        Hacker News 의견

     * YC 졸업생으로 Google에 인수된 스타트업을 운영했던 경험을 가진 사용자의 의견
          + YC는 예전만큼의 품질 보증 역할을 하지 않음
          + 여전히 사회적 증명으로 작용하지만, 투자자들이 다른 투자자들이 좋아할 만한 회사를 찾기 때문임
          + YC는 품질 보증이나 사회적 증명을 목표로 하지 않고 스타트업을 돕는 것이 목표라고 주장함
          + 현재 YC는 아이디어를 선택해 수익을 창출하는 VC처럼 변함
          + 초기 YC는 현재 제품 전략이나 비즈니스 구조를 이유로 창업자를 거절하지 않았음
          + 현재는 많은 지원서를 받아야 하므로 피드백을 주는 것이 비판받을 일은 아님
          + 초기 YC는 수익이나 진행 상황, VC, 유행 등에 신경 쓰지 않았음
          + 현재는 하이프만으로도 많은 돈을 벌 수 있는 현상이 존재함
          + YC가 무제한 자금을 가지고 있다면, 기술 발전이나 돈보다는 세상을 더 나은 곳으로 만드는 데 집중해야 함
     * 다른 사용자의 의견
          + PearAI 창업자의 마케팅 능력을 인정하지만, YC의 명성에 흠집을 내는 사건이라고 생각함
          + Netflix 문화 다큐멘터리에서 언급된 것처럼, 한 명의 나쁜 행위자 때문에 과도한 정책을 도입하지 않으려 함
          + PearAI 사건이 발생한 이유는 YC가 거의 모든 것을 자금 지원할 의향이 있다는 것과 실질적인 실사를 하지 않는다는 것임
          + YC는 항상 사람을 필터링하는 것이 핵심이었음
          + 오픈 소스 코드를 사용하는 것은 자원 활용 능력을 보여주는 것임
     * 또 다른 사용자의 의견
          + 현대 온라인 문화에서는 전체 인물을 비난하려는 경향이 있음
          + Altman의 OpenAI 결정에 대해 비판하면서도 그의 사업 능력을 폄하하려는 경향이 있음
          + YC는 지위 추구자들을 끌어들이는 자석이 되었음
          + YC를 조직이 아닌 개인과 팀의 반성 시간으로 생각해야 함
          + YC의 초기 철학은 ""무엇이든 잘하면 명성을 얻는다""는 것이었음
          + YC는 성장 곡선을 따라가며 결국 시장에서 최대한의 이익을 추구하게 됨
          + 현재는 초기의 혁신적인 조언보다는 공식화된 조언을 제공함
     * 또 다른 사용자의 의견
          + YC는 항상 지위 추구자, 꿈꾸는 자, 현실주의자, 창작자, 예술가들의 모임이었음
          + 매년 더 많은 사람들이 기회를 얻고 있음
          + YC는 완벽하지 않다고 주장하지 않음
          + 여러 스캔들이 있었지만, 이는 불가피한 현상임
     * 또 다른 사용자의 의견
          + YC는 처음부터 패션에 맞지 않았음
          + 초기에는 해커들이 비즈니스를 운영하고 올바른 사람들과 자원을 연결하는 데 필요한 지원을 제공했음
          + Sam Altman이 YC를 인수한 후, YC는 더 많은 자금을 지원하는 대규모 시드 펀드로 변모함
          + 초기의 해커들이 Web 2.0 비즈니스를 구축하려는 창업자들로 구성되었음
          + 현재는 더 전문화된 비즈니스를 지원하는 대규모 시드 펀드로 변모함
"
"https://news.hada.io/topic?id=17048","Gitify - 데스크탑에서 GitHub 알림 받기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Gitify - 데스크탑에서 GitHub 알림 받기

     * 맥/윈도우/리눅스 데스크탑의 MenuBar 에서 보기 편하게 GitHub 알림 받기
          + 듣기 편한 소리로 알리거나 macOS 네이티브 알림을 주거나 그냥 아이콘만 녹색으로 변경하기도 가능
     * GitHub Cloud/Enterprise Server 모두 지원
     * 여러개의 계정 연동도 가능
     * Electron + React + Tailwind CSS + TypeScript 오픈소스

   잘 쓰고 있습니다.

   저도 잘 쓰고 있습니다. 좋네요. 이메일 알림은 잘 안 보는데 메일이 너무 많이 와서.

   그냥 이메일을 쓰는 게...
   사실 알림 솔루션들 대부분이 이메일로 대체 가능하고
   알림은 세부적인 필터나 정렬, 히스토리 저장을 지원하지 않는 환경이 많아서
   필터링이 필요한 분이라면 이메일이 압도적으로 편하다고 생각합니다.

   깃헙을 쓰는 세계 많은 분들도 이메일을 압도적으로 편하게 생각해서, gitify 가 스타를 4천개 밖에 못 받았나보네요. 4만개는 받아야하는데. ㅎㅎ
"
"https://news.hada.io/topic?id=17057","Show GN: Node.js 환경에서의 C, Cpp, Java 코드 포매터를 만들었습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: Node.js 환경에서의 C, Cpp, Java 코드 포매터를 만들었습니다.

   안녕하세요!

   저는 기본적으로 프론트엔드 개발자라 Node.js 환경에 익숙한데, npm에 올라와 있는 패키지들 중에 eslint, prettier 처럼 C, Cpp, Java 코드 포맷팅을 잡아주는 마땅한 녀석이 없더라고요.

   그래서 Node.js환경에서 npm 을 통해 C, Cpp 언어의 코드 포매팅을 관리할 수 있는 패키지를 만들어 보았습니다.

   VScode 상에서 C, Cpp 기본 포맷터로 활용되는 clang-format을 이용하는 패키지 입니다.

   2022년에 유지 보수가 중단된 angular/clang-format 패키지를 바탕으로 지원되는 플랫폼 수를 늘려 새로 개발하였고, .clang-format 파일을 루트에 만들어 두면 자동으로 인식해서 사용할 수 있습니다.

   우선 전 세계 사용자를 대상으로 만든거라 README가 영어이긴 한데, 한국 분들의 별이 좀 더 많아지면 한글 문서도 따로 만들어서 링크 걸어두도록 하겠습니다...! 또, 추가되었으면 하는 기능 있으시면 댓글이나 이슈 남겨주시면 반영하도록 하겠습니다.

   혹시 VScode 상에서 .clang-format 어떻게 사용하는지 모르시면, 댓글 남겨주시면 추가 설정 방법도 알려드리겠습니다. 감사합니다!

   링크: https://github.com/lumirlumir/npm-clang-format-node

   요즘 C 로 하는 플젝이 생겼는데 좋네요

   👍👍.

   C코드 활동이 더많으신듣 마음에 고향 프런트:)

   원래 C를 좋아했어가지고 어쩌다 보니 그렇게 됐습니다ㅎㅎ
"
"https://news.hada.io/topic?id=16995","Notion의 중년 위기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Notion의 중년 위기

   Notion이 중년 위기를 겪는다는 비유를 통해 기술 제품의 흥망성쇠를 유머러스하게 묘사한 글

Notion's Mid-Life Crisis

   Notion은 길가에 앉아 담배를 바닥에 비비며 껐다. 손으로 얼굴을 감싸고 울음을 터뜨렸다. 속이 후련했다.

   그는 좋은 시절을 떠올렸다. 2020년. 물론, 많은 사람들이 죽어가고 있었지만, 모두가 재택근무를 하던 시절은 그에게는 전성기나 다름없었다.

   그는 핫하고 젊은 스타트업과 결혼했다. 둘 다 두 번째 결혼이었다. 아, 그녀의 첫 번째 남편 이름이 뭐였더라? 아, 그래, Confluence. 젠장, 그 놈이랑 그 못생긴 형제 Jira도 같이 떠올리니 화가 치밀었다.

   Notion은 세상을 바꿀 수 있다고 생각했다. 보기 좋은 UI도 있었고, 통합된 데이터베이스 모델도 있었다. 그는 위키 데이터를 저장하면서도, 버그 트래커로 사용할 만큼 깔끔하게 포맷할 수 있었다. 그때만 해도 아내는 그걸 정말 매력적으로 봤다.

   그는 맥주 한 모금을 더 들이켰다. 젠장, 영원한 건 없지. 이제 겨우 10살인데 벌써 중년의 위기를 겪는 느낌이었다.

   Notion은 일어나 다시 술집 안으로 들어갔다. 이곳은 기술 제품들이 ""혹시 새롭고 핫한 스타트업을 만나서 멋진 협업 솔루션을 제안할 수 있지 않을까?""라는 희망을 품고 술에 취해 신세 한탄을 하는 곳이었다. 사실 그냥 흔해 빠진 허름한 술집일 뿐이었다. 그는 비틀즈의 노래 ""Eleanor Rigby"" 가사가 떠올랐다.

   ""Where do they all come from?
   All the lonely people
   Where do they all belong?""

   그는 한숨을 쉬었다. 벽 한쪽에 Bugzilla의 사진과 그 가족을 위한 성금 상자가 놓여 있었다. 그 친구는 어떻게 됐더라? Notion은 정말로 알지 못했고, 솔직히 말해서 오랫동안 신경 쓰지 않았다.

   저쪽 구석에서 귀여운 스타트업이 친구들에게 Salesforce와 헤어진 이야기를 늘어놓는 소리가 들려왔다. Salesforce라니. 그는 항상 스티브 발머를 떠올리게 했다. 못생기고 과대평가된 인물 말이다.

   CRM이 뭐 대단한 거라도 된다고 생각하나? 관리할 엔티티도 별로 없잖아. 잠재 고객, 차가운 콜…아, 구질구질해…차가운 콜. 뭐, 데이터베이스 몇 개로도 충분히 처리할 수 있지, 라고 Notion은 스스로를 위로했다.

   Notion은 자리에서 일어나 마케팅 팀의 윙맨(wingman)에게 고개를 끄덕이고, 몇 가지 템플릿을 정리하며 귀여운 스타트업 쪽으로 걸어갔다. 그는 완벽한 작업 멘트를 생각해냈다.

   “Notion의 CRM 템플릿으로 고객 관계를 간편하게 관리하세요. 리드 추적부터 거래 마무리까지 완벽하게 설계된 맞춤형 세일즈 파이프라인 관리로 여러분의 비즈니스 니즈에 딱 맞는 솔루션을 제공합니다. 깔끔하게 정리된 효율적인 CRM 시스템으로 더 많은 거래를 성사시키세요.""

GN⁺의 의견

     * Notion은 스타트업 초기에는 인기가 많았지만, 점차 경쟁 서비스들에 밀려 그 인기가 시들해졌음
     * CRM, 프로젝트 관리 등 여러 기능을 하나의 서비스에서 제공하려다 보니 각 기능의 깊이가 떨어진다는 평가를 받음
     * 무료 플랜의 기능이 제한적이어서, 실제로 업무에 활용하기에는 유료 플랜을 사용해야 함
     * 데이터 마이그레이션이 어려워 한번 Notion을 사용하기 시작하면 다른 서비스로 옮기기 힘듦
     * 플러그인이나 써드파티 앱과의 연동이 원활하지 않아 확장성이 부족함
     * 유사한 기능을 제공하는 경쟁 서비스로는 ClickUp, Monday.com, Airtable 등이 있음
          + ClickUp은 Notion과 유사한 기능을 제공하면서도 더 많은 템플릿과 커스터마이징 옵션을 제공함
          + Monday.com은 CRM에 특화되어 있으며, 영업 자동화 기능이 강점
          + Airtable은 스프레드시트와 데이터베이스의 장점을 결합한 서비스로, Notion보다 데이터 관리 및 분석에 용이함
     * Notion을 도입할 때는 팀 내에서 적극적으로 활용할 수 있는지, 장기적으로 사용할 수 있을지 등을 고려해야 함
     * 무료 플랜을 사용해보고, 팀 내 사용성을 평가한 후에 유료 플랜으로 전환하는 것이 바람직함

   이 유머스러운 글을 ChatGPT 같은 AI가 완성해 줬을 것 같네요.

   hype이 빨리 사그라들었으면 좋겠습니다

   노션 너무 무거워요. 정적 콘텐츠 배포도 제대로 동작안하고..
   엔지니어링에 많이 투자를 안하는 느낌입니다.

   키득거리면서 봤는데.. AI가 내놓은 의견이 뭔가 특이하네요.
   프롬프트에 알고있는 지식 기반으로 의견을 내놓으라고 했더니, LLM은 노션을 이렇게 판단하고 있나 봅니다.

        Hacker News 의견

     * Notion을 처음에는 특정 작업에 유용하게 사용했으나, 점점 모든 것을 이모지로 가득 찬 Notion 문서로 강제하려는 시도로 인해 덜 즐겁게 되었음
          + Notion 문서들이 항상 최신 상태가 아니고 찾기 어렵고, 새로운 페이지가 생기면 알리지 않아 혼란스러움
          + 최근에는 Google Docs를 사용하여 더 생산적으로 일할 수 있었음
     * Google Docs의 제품 혁신이 Google Workspace의 수익 성장과 분리되어 있어 Notion이 존재하게 되었음
          + Google Docs에 드래그 가능한 핸들과 검색 단축키를 추가하면 Notion의 90% 가치를 제공할 수 있음
          + Notion AI는 다양한 소스에서 데이터를 끌어와 유용하지만, 모든 회사가 비용을 지불할 의향이 있는 것은 아님
          + CRM 솔루션으로서 Notion은 통합 기능이 부족함
     * Notion을 이해하지 못하겠음
          + Apple Notes와 scratch.txt를 사용하여 Notion의 기능을 대체할 수 있음
          + Notion이 왜 이렇게 인기가 있는지 이해할 수 없음
     * Notion을 좋아하지만, 더 이상 내 사용 사례에 맞지 않음
          + Obsidian으로 모든 것을 옮길 수 있을 것 같음
          + Notion의 데이터베이스 기능을 거의 사용하지 않음
     * Google Docs가 Notion의 비즈니스를 완전히 대체하지 않은 것이 놀라움
          + Google Docs에 몇 가지 기능을 추가하면 Notion 사용자의 80%를 가져올 수 있음
     * Notion을 사용하지만 좋아하지 않음
          + Confluence보다 낫지만 큰 차이는 없음
          + 기본적인 기능이 부족했었음
     * Notion의 대안으로 Docmost를 개발 중임
          + 실시간 협업과 다이어그램 지원 기능이 있음
          + 좋은 위키와 문서화 소프트웨어를 만드는 데 집중하고 있음
     * Notion의 과대평가를 이해하지 못하겠음
          + 다른 도구들과 마찬가지로 데이터 잠금 기능이 있음
     * Notion은 새로운 프로젝트 관리자들에게 인기가 있지만, 오래된 사용자들은 Jira와 Confluence를 선호함
          + Notion을 초기에는 모든 것을 기록하는 도구로 사용했으나, 단순한 텍스트와 이미지가 필요해지면서 다른 도구로 이동했음
"
"https://news.hada.io/topic?id=17036","봇, 너무 많은 봇","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               봇, 너무 많은 봇

봇, 너무 많은 봇

  시작

     * ProductHunt는 100만 명 이상의 사용자 가입을 보유하고 있음
     * 그 중 60% 이상이 봇임

  시작은 이렇게

     * 2014년부터 ProductHunt를 사용해 왔음
     * 최근 대부분의 댓글이 ChatGPT로 생성된 것 같음

  간단한 테스트

     * 제품 설명에 LLM 프롬프트 주입 후 제품을 출시함
     * 거의 모든 댓글이 자동화된 것임을 확인함

  봇을 구별할 수 있는가?

     * 댓글에 답변하는 것은 시간 낭비임
     * 많은 봇이 댓글을 달고 있다면, 업보팅도 하고 있을 것임
     * 돈을 주고 업보트를 구매하는 사람들도 있음

  데이터 분석

     * ProductHunt의 사용자, 출시, 업보트, 댓글 목록을 분석함
     * 100만 명 이상의 사용자 가입, 30만 개 이상의 출시, 250만 개의 댓글, 2000만 개의 업보트가 있음
     * 각 제품은 일일 순위를 가지며, 이는 매일 자정 PDT 기준 24시간 후의 점수임

  봇 계정 탐지

     * 봇 탐지는 어려움
     * 사용자 댓글 시간을 분석하여 트렌드를 찾으려 했음
     * 예를 들어, 한 사용자는 677일 전에 가입하고 2009번 댓글을 달고 4649번 업보트를 함
     * 이는 자동화를 사용하지만 봇은 아님
     * 봇 사용자는 140일 전에 가입하고 173번 댓글을 달고 246번 업보트를 함
     * 봇 댓글은 규칙적인 간격으로 달리며, 차트가 부드럽지 않고 박스형임
     * 여러 기준에 따라 사용자에게 위험 점수를 부여함
     * ChatGPT 생성 댓글은 ""game-changer""와 같은 단어를 더 자주 사용함
     * 봇 댓글에는 쉽게 입력할 수 없는 문자나 제품 이름이 포함됨
     * 클러스터링은 어느 정도 효과가 있지만, 많은 봇 계정은 사용 후 버려짐
     * 최종적으로 60% 이상의 사용자 가입이 자동화된 봇 계정임을 탐지함

  봇 활동의 시간 경과

     * 2018년 이후 봇 사용자가 실제 사용자보다 많이 생성됨
     * 2022년 말부터 봇 댓글이 급증함
     * 2022년에도 봇 업보트가 실제 업보트를 초과함
     * 봇은 투표 링을 형성하여 제작자가 업보트를 구매함
     * 대부분의 출시 제품은 몇 개의 실제 업보트만 받음
     * 일일 순위에서 1위를 차지하려면 15%의 봇 업보트가 필요함
     * 60% 이상의 봇 업보트는 1위를 차지하지 못함

  최종 생각

     * 봇 업보트를 제거한 출시 목록을 만들고 싶었으나, 시간이 부족하여 다음 블로그 게시물로 미룸

GN⁺의 정리

     * ProductHunt의 사용자 중 60% 이상이 봇 계정임
     * 봇 댓글과 업보트가 실제 사용자 활동을 왜곡함
     * 봇 탐지는 어렵지만, 여러 기준을 통해 위험 점수를 부여하여 탐지 가능함
     * 봇 활동이 증가하면서 ProductHunt의 신뢰성이 저하될 수 있음
     * 유사한 기능을 가진 다른 제품으로는 Hacker News가 있음

        Hacker News 의견

     * 사용자가 봇인지 아닌지에 대한 임의의 분류로 시작하는 분석은 문제가 있음. 이 분류가 잘못되면 모든 분석이 잘못됨
          + 예를 들어, 2022년 말에 봇 댓글이 급증했음. 이는 ChatGPT가 널리 사용되기 시작한 시기와 일치함
          + ChatGPT 생성 댓글은 ""game-changer"" 같은 단어를 자주 사용함. 봇 댓글은 쉽게 타이핑할 수 없는 문자나 제품 이름을 그대로 포함함
          + 따라서 ChatGPT처럼 행동하는 사용자를 봇으로 분류하고, ChatGPT 출시 후 이런 사용자가 증가했다고 생각함. 하지만 이미 많은 봇이 있었을 가능성도 있음
     * ProductHunt가 CAPTCHA 솔루션을 사용하는지 궁금함
          + CAPTCHA는 스팸 공격을 막는 데 여전히 유용함
          + 일반적인 비판은 사용성, 접근성, 프라이버시 문제임. 사용자들이 싫어함
          + 최근 몇 년간 사용자 입력 없이 작동하고 프라이버시를 보호하는 CAPTCHA가 등장함
          + 고급 봇은 CAPTCHA를 쉽게 우회할 수 있음. 하지만 전통적인 기술도 저급 봇을 막는 데 유용함. 고급 봇은 ML 같은 더 발전된 기술로 싸울 수 있음
          + CAPTCHA는 실제 인간을 사용하는 공격에는 효과가 없음. 이는 다른 메커니즘이 필요함
     * 5년 전 ProductHunt에 제품을 게시했을 때, 첫 번째 자리를 보장하는 수십 개의 메시지를 받았음. 지금은 아마 더 심할 것임
     * ProductHunt에 누가 있는지 궁금함. 고객? 아마 아닐 것임. Indiehackers? 아마도. 누구에게 판매하는지, ProductHunt에 출시할 가치가 있는지 의문임
     * 개인적으로 알고 있는 사람의 노력과 결과가 잘 드러남. 잘했음
     * 이는 ""죽은 인터넷 이론""의 진전임. 진정한 상호작용을 보장하려면 남용 시 결과가 따르는 강력하고 신뢰할 수 있는 신원이 필요함
          + 이 신원은 정부가 구현해야 함. 대형 기술 회사들은 아직 해결하지 못했고, 해결할 의지가 있는지 의문임
          + 예를 들어, Google이 이를 강력히 단속하면 YouTube 트래픽의 60-80%가 봇에 의해 발생한 것이라면, 수익이 사라질 것임
     * Reddit에 몇 개의 게시물이 있는데, 가끔 GPT 기반 봇이 ""주제? 와! 정말 생각을 자극하네요, 왜 중요한지 궁금해요"" 같은 댓글을 다는 경우가 있음
          + Reddit이 참여를 유도하기 위해 이런 봇을 운영하는 것일 수도 있음
     * 많은 사람들이 GenAI와 대화하고 있다는 것을 인식하지 못할 것임
          + 같은 사람이 여러 계정을 통해 다른 사람인 척 대화하는 경우가 이미 문제임. GenAI는 봇을 통해 내러티브를 저렴하게 조작할 수 있게 함
          + 모든 소셜 네트워크의 문제임. 인간임을 검증하는 것이 유일한 해결책임
          + 실제 인간만이 업보트/다운보트와 댓글을 달 수 있는 소셜 네트워크를 구축 중임
     * X에 1년 된 계정이 있는데, 한 번도 댓글을 단 적이 없음. 하지만 35명의 매력적인 여성이 나를 팔로우함. 남성이나 매력적이지 않은 여성은 없음. 이는 내 좋아요의 매력 때문이 아님
          + 이는 웹 전체의 축소판임
     * 누군가 ""me good LLM"" 티셔츠를 팔아야 함
"
"https://news.hada.io/topic?id=17051","Vue, Vite 개발자인 Evan You, $4.6M 시드 펀딩 유치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Vue, Vite 개발자인 Evan You, $4.6M 시드 펀딩 유치

     * Vue와 Vite의 개발자로 유명한 Evan You가 자바스크립트 생태계를 위한 오픈 소스, 고성능, 통합 개발 도구 체인을 구축하기 위해 VoidZero Inc. 를 창립했으며, Accel로부터 460만 달러(한화 약 60억 원)의 펀딩을 받음
     * VoidZero Inc. 에서 대표적으로 개발 중인 툴에는 Vite, Vitest, Rolldown, Oxc 가 있음
          + oxc-parser: 가장 빠르고 표준을 잘 준수하는 Javascript 파서로, SWC 보다 3배 빠름
          + oxc-resolver: 가장 빠른 Node.js 호환 리졸버로, enhanced-resolve 보다 28배 빠름
          + oxc-Transform: 가장 빠른 TypeScript/JSX 변환기로, SWC보다 4배 빠름
          + oxlint: 가장 빠른 린터로, ESLint보다 50–100배 빠름
          + Vitest: 가장 빠른 테스팅 프레임워크로, Jest보다 2배 이상 빠름
          + Rolldown: oxc 위에 구축된 가장 빠른 번들러로, esbuild 및 다른 모든 Rust 번들러보다 빠름

   swc 는 ts 파싱도 되는데 비교하긴 좀 ...

     Features
     * 3x faster than swc parser (benchmark).
     * Parses .js(x) and .ts(x).

   원문에는 타입스크립트 언급이 빠져있지만 oxc-parser 가이드 페이지에는 ts 지원한다고 명시되어 있습니다

   Jest 대신 Vitest는 ㅊㅊ

   또 새로운 자바스크립트 툴체인이..

   자본, 얼마나 많은 죄악이 네 이름을 빌렸나

   제가 웹개발을 몰라서 그러는데, 저런 툴은 유료인가요? 수익화를 어떻게 하는건가요?

   보통은 저런 툴로 수익화를 목표로 하기보다는, 정말 오픈 소스로서 웹 생태계 발전에 기여하는 것을 목적일 것입니다.

   이후 이러한 기여로 인해 브랜드 가치가 높아지면, 점차 교육이나 해당 툴 전용 호스팅 서비스 등으로 수익화를 시도하지 않을까 생각됩니다.

   비슷한 예로, React나 Turbo 같은 오픈소스 툴을 개발하는 Vercel이라는 기업이 있습니다.
   Vercel은 주로 호스팅 서비스를 통해 수익을 창출하고 있는 것으로 알고 있습니다.

   vitest부분에 오타가 있는거 같아요

   확인 감사합니다. 아래가 맞습니다.

   Vitest: 가장 빠른 테스팅 프레임워크로, Jest보다 2배 이상 빠름
"
"https://news.hada.io/topic?id=16983","워드프레스 생존을 위해서는 Matt Mullenweg가 퇴진해야 합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                워드프레스 생존을 위해서는 Matt Mullenweg가 퇴진해야 합니다

     * Matt Mullenweg는 자신의 목적을 달성하기 위해 수단과 방법을 가리지 않는 사람으로 보이며, 그는 WordPress 사이트와 사용자들에게 큰 피해를 입히며 자신의 주장을 관철시키려 함
     * 그의 행동은 WordPress 커뮤니티 전체에 큰 해를 끼치고 있음
     * WordPress가 생존하고 번영하기 위해서는 Matt Mullenweg가 모든 공식적인 리더십에서 제거되어야 함.

무슨 일이 일어났는가?

  Automattic이 WP엔진에 '라이선스' 제안

     * 7월경 자동이 WP엔진에 연간 총 수익의 8%에 달하는 수백만 달러의 '라이선싱' 제안
     * WP엔진은 이를 거부. '워드프레스' 용어 사용은 워드프레스 상표 정책에 따라 허용되므로 라이선스가 필요하지 않음

  Matt의 새로운 전략

     * WP엔진의 거절 직후, 워드프레스 재단이 '매니지드 워드프레스'와 '호스팅 워드프레스'에 대한 상표권 출원
     * Matt는 WP엔진 리더십에 돈을 지불하지 않으면 WordCamp US 기조연설에서 WP엔진을 공격하겠다고 협박성 메시지를 보냄

  Matt의 주장

     * WP Engine이 자신을 잘못 표현하고 있음: Matt는 WP Engine이 WordPress와 공식적으로 연관된 것처럼 보이게 한다고 주장함.
     * WP Engine이 WordPress의 ""저렴한 모조품""을 판매하고 있음: WP Engine이 WordPress의 일부 기능을 비활성화했기 때문에 WordPress를 ""해킹하고 도살했다""고 주장함.
     * WP Engine이 충분히 기여하지 않음: Matt는 WP Engine이 WordPress에 충분히 기여하지 않는다고 주장함.

  WordCamp US 이후의 사태와 맷의 권력 남용

     * Matt는 Wordpress.org에 ""WP엔진은 워드프레스가 아니다""라는 블로그 포스트를 게시하고 이를 모든 워드프레스 관리자 대시보드에 배포
     * Matt는 Wordpress 상표 정책을 소급 적용하여 'WP' 용어 사용을 제한
     * WP엔진은 WP엔진 사이트에서 뉴스 피드를 차단하고 Automattic에 중지 및 금지 명령을 보냄
     * Automattic은 자체 중지 및 금지 명령으로 대응

  커뮤니티의 반응

     * 커뮤니티의 일부는 Matt의 주장을 지지하지만, 대부분은 그의 행동이 정당하지 않다고 생각함
     * Matt는 자신의 권력을 남용하여 WP Engine을 공격하고 있으며, 이는 WordPress 커뮤니티 전체에 해를 끼치고 있음.

  WP Engine의 반응

     * WP Engine은 WordPress 관리자 대시보드에서 부정적인 메시지를 차단하고, Automattic에 중지 명령을 보냄
     * WP Engine은 Matt가 WP Engine으로부터 얻으려는 돈이 Automattic으로 가기를 원했다고 주장함. 이는 명백한 이해 충돌임.

GN⁺의 정리

     * 이 사태는 오픈소스 프로젝트의 거버넌스와 리더십에 대해 중요한 질문을 제기. 한 사람이 이처럼 막강한 권력을 휘두를 수 있어서는 안 됨. 워드프레스 생태계에 치명적인 불확실성을 초래할 수 있음
     * Matt Mullenweg의 행동은 WordPress 커뮤니티에 큰 해를 끼치고 있음
     * WP Engine은 WordPress에 기여하고 있지만, Matt는 이를 충분하지 않다고 주장함.
     * 이번 사태로 Automattic과 WP Engine 모두 평판에 큰 타격을 입었음. 그러나 장기적으로는 워드프레스 전체 커뮤니티가 더 큰 피해를 볼 것으로 보임. 대안 CMS나 호스팅으로의 이탈이 가속화될 수 있음

   제트팩인지 뭔지 하는 광고 계속 띄우는 것도 마음에 들지 않고 워드프레스가 불편한 점이 꽤 있었는데
   이 기회에 더 나은 대체품이 자리를 차지하는 것도 나쁘지 않죠...

   오픈 소스 활동은 계속 하실 수도 있을지 모르겠으나 확실히 CEO를 하실 분은 아닌 것 같네요

        Hacker News 의견

     * Wordpress의 나이와 보편성을 고려할 때, Matt의 의사소통 능력의 미성숙함에 놀라움
          + Matt는 모든 사람들이 상황의 역사적 이해와 미묘함을 가지고 있다고 생각함
          + 이는 유산을 파괴하려는 세계 기록 속도 시도처럼 보임
          + WPEngine는 2011년부터 변하지 않았음
          + 왜 지금, Matt?
     * 커뮤니티를 위해 Matt가 비영리 리더나 기술 CEO 중 하나를 선택하기를 바람
          + 두 역할이 한 사람 안에 공존할 수 없다는 것이 명확해짐
          + Matt가 WordPress 재단의 리더였다면, 이는 단지 창피한 PR 실패였을 것임
          + 그의 행동이 범죄 수준에 이를지 궁금함
          + The Primeagen과의 인터뷰를 보면, 그는 오해받는 조직의 옹호자처럼 행동함
          + 그는 WPE에 투자했고, 경쟁사의 CEO이며, WPE가 수십억 달러를 잃기를 바란다고 공개적으로 말했음
          + 수천 명의 개발자를 그의 개인적인 십자군에 끌어들이고 있음
     * Matt의 개인 웹사이트에서
          + Matt는 ThePrimeagen에게 WP Engine CEO인 Heather Brunner의 전화번호를 공유했음
          + Heather Brunner는 응답하지 않았음
          + WP Engine이 기자들과의 대화를 두려워하는 이유는 무엇인가?
     * 매우 유익한 기사였음
          + Matt가 여기서 잘못한 것이 분명함
          + 기사 형식이 좋았고, 읽기 쉬웠음
     * 그의 결정이 표면적으로 의심스러워 보이지만, Josh의 의견에 동의하기 어려움
          + 이는 정부가 특정 집주인이나 인구 집단에 대해 강경하게 대응하는 것과 비슷함
          + 시스템을 근본적으로 변화시키는 것이 필요함
          + 이는 미래 경제에 영향을 미칠 수 있음
          + 개인적으로 WordPress를 좋아하지 않음
     * 일반적인 의견은 Matt가 이 문제를 잘못 처리했다는 것임
          + WPE가 Matt의 주장에 대해 사실적인 반박을 했는지 궁금함
          + Matt의 이해 충돌을 판단하는 데 너무 급급하지 않기를 바람
     * 많은 기술자들은 CEO가 지루하고 PR 및 법률 팀에 의해 검토된 발언만 하는 것을 싫어함
          + 그러나 CEO가 그렇게 하지 않으면 예상치 못한 결과가 발생할 수 있음
     * 그의 비디오/스트림을 보고 좋은 말을 할 수 없었음
          + 그는 수백만 개의 WordPress 사이트가 업데이트/접근할 수 없게 만들었음
          + 비영리 단체나 동물 보호소와 같은 곳에 영향을 미침
          + 많은 사람들이 WordPress를 쉽게 사용할 수 있지만, 깊이 설명하면 이해하지 못함
          + 그는 신경 쓰지 않음
          + 인터넷의 75%가 WordPress를 사용하고 있으니 신중해야 함
     * Prime 인터뷰에서 과거에 상표권 침해를 방지하려는 시도가 있었음을 언급함
          + 변호사를 고용하고, 공개적으로 비난하지 않았더라면 더 많은 사람들이 그의 편에 섰을 것임
     * 약간의 주제 벗어남
          + ""Five for the Future""는 WordPress에서 혜택을 받는다면 5%의 시간을 오픈 소스 프로젝트에 기여하라고 요청함
          + WordPress 설치를 지원해야 하는 사람으로서 이는 내 삶에 이익이 되지 않음
"
"https://news.hada.io/topic?id=17064","Gumroad가 Htmx를 선택하지 않은 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Gumroad가 Htmx를 선택하지 않은 이유

     * Gumroad는 새로운 프로젝트 Helper를 시작하며 htmx를 고려했음.
     * React의 복잡함을 피하고자 htmx를 사용하려 했으나, 팀 내에서 의견이 갈렸음.
     * 초기에는 htmx가 간단한 상호작용을 추가하는 데 유망해 보였음.

htmx의 한계

     * 직관성과 개발자 경험: htmx로 작업하는 것이 Next.js보다 직관적이지 않았음. 복잡한 폼과 동적 검증을 구현할 때 서버 측 논리가 복잡해졌음.
     * UX 제한: htmx는 기본적으로 Rails/CRUD 접근 방식을 취해 사용자 경험이 단조로워졌음. 드래그 앤 드롭 인터페이스 구현이 React보다 어려웠음.
     * AI 및 도구 지원: Next.js는 AI 도구와 친숙하지만, htmx는 그렇지 않음. 이는 개발 속도와 문제 해결에 영향을 미쳤음.
     * 확장성 문제: 프로젝트가 복잡해지면서 htmx는 요구 사항을 따라가지 못했음. 실시간 협업 및 복잡한 데이터 시각화 기능 추가 시 상태 관리가 어려웠음.
     * 커뮤니티와 생태계: React/Next.js 생태계는 성숙하고 다양한 솔루션을 제공하지만, htmx는 그렇지 않았음.

궁극적인 결정 : React/Next.js로 전환

     * 복잡한 UX 구축에 React/Next.js가 적합했음.
     * 드래그 앤 드롭 기능, 복잡한 상태 관리, 동적 폼 생성, 실시간 협업, 성능 최적화 등에서 React의 장점을 활용했음.
     * htmx의 한계를 극복하기 위해 React로 전환했으며, 이는 프로젝트의 장기적인 비전을 지원함.
     * 이 결정에 만족하며 현재로서는 더 빠르게 이동하고 보다 매력적인 사용자 경험을 만들고 기존 도구 및 라이브러리를 활용할 수 있게 되었음

경험에서 얻은 교훈

     * 경량 대안을 고려하는 것도 중요하지만 프로젝트와 함께 성장하고 장기적인 비전을 지원할 수 있는 기술을 선택하는 것도 중요함
     * Helper의 경우 React와 Next.js가 그러한 선택으로 입증되었고, 옮긴 이후로 핵심 고객을 위한 앱의 사용자 경험을 크게 업그레이드할 수 있었음

GN⁺의 정리

     * Gumroad의 경험은 가벼운 대안을 고려하는 것이 중요하지만, 프로젝트의 성장과 장기적인 비전을 지원할 수 있는 기술을 선택하는 것이 중요함을 보여줌.
     * htmx는 간단한 상호작용 모델이나 기존 서버 렌더링 애플리케이션에 적합할 수 있음.
     * Helper의 복잡한 상태 기반 인터페이스에는 React와 Next.js가 더 나은 선택이었음.
     * 기술 스택은 필요에 따라 재평가할 수 있으며, 새로운 기술이 등장할 때마다 유연성을 유지하는 것이 중요함.

        Hacker News 의견

     * Gumroad의 CEO가 htmx를 사용해보다가 NextJS로 전환한 경험을 공유해 주었음. 이는 htmx의 부정적인 경험을 찾고 있던 사람에게 유용한 정보였음
          + AI 도구는 Next.js에 익숙하지만 htmx에는 그렇지 않음. 이는 개발 도구의 미래에 대한 중요한 예측을 제시함
          + LLMs는 기존의 승자독식 구조를 강화하고 오픈 소스 도구 사용을 장려할 것이라는 예측이 있음
     * 복잡한 폼을 만들 때 서버 측 로직이 복잡해져 React에서의 클라이언트 측 작업보다 어려웠음
          + 서버 측에서도 유효성 검사를 구현해야 한다는 점을 강조하는 밈이 있음
     * htmx로 프론트엔드를 가볍게 유지하려 했으나, 복잡한 UI/UX와 상태 관리를 위해 타사 라이브러리를 사용하게 되었음
          + React에서의 작업이 더 쉬웠다는 것은 타사 라이브러리를 사용했기 때문이라는 의견이 있음
          + 복잡한 상태와 렌더링을 관리해야 한다면 htmx는 처음부터 좋은 선택이 아니었을 것이라는 의견이 있음
     * htmx로 드래그 앤 드롭 인터페이스 구현이 어려웠고 React 라이브러리로 더 매끄러운 경험을 얻을 수 있었음
          + htmx는 필요한 만큼만 프론트엔드 번들을 사용하는 것이 좋음
          + htmx.onLoad 이벤트를 활용하여 로드된 콘텐츠에 속성을 가진 마크업을 찾아 연결할 수 있음
     * 팀이 프론트엔드 개발에 더 익숙해 보이며, 백엔드와의 소통에 어려움을 겪었음
          + React 컴포넌트의 장점과 문서 및 도움말 찾기의 용이성을 인정함
     * Next.js로 개발 과정이 자연스러웠다는 의견이 있음
          + ReactJS 문법이 자연스럽지 않다는 의견도 있음
     * HTMX가 이러한 경험을 공유하는 것이 흥미롭고, HTMX만으로는 충분하지 않은 프로젝트도 있다는 의견이 있음
          + 백엔드에서도 폼 유효성 검사가 필요하다는 점을 강조함
          + AI 도구에 대한 의존도가 높아진 팀의 사례가 흥미로움
          + HTMX의 한계를 보완할 수 있는 플러그인이 필요하다는 의견이 있음
     * HTMX.org가 이러한 에세이를 호스팅하는 것에 대한 칭찬이 있음
     * AI 도구가 새로운 프레임워크나 프로그래밍 언어의 채택을 어렵게 만들 수 있다는 우려가 있음
          + SEO와 유사하게 개발 도구에 영향을 미칠 가능성을 상상함
"
"https://news.hada.io/topic?id=17067","성인 뇌에 미치는 과도한 스크린 타임의 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        성인 뇌에 미치는 과도한 스크린 타임의 영향

성인의 과도한 화면 시간의 영향

     * 과도한 화면 시간의 부정적 영향
          + TV 몰아보기, 유튜브 시청, 스마트폰 스크롤 등은 건강에 해로울 수 있음.
          + 성인의 뇌도 과도한 화면 시간으로 부정적 영향을 받음.
          + 눈의 피로, 목 통증, 사회적 고립, 정신 건강 문제 등을 유발할 수 있음.
          + 습관적으로 스마트폰을 사용하면 뇌에 악영향을 미칠 수 있음.
     * 눈 건강과 뇌 건강의 관계
          + 눈은 뇌와 직접 연결되어 있어 눈 건강이 뇌 건강에 중요함.
          + 아침에 스마트폰 대신 먼 곳을 바라보는 것이 좋음.
          + 컴퓨터 작업 시 20-20-20 규칙(20분마다 20초 동안 20피트 떨어진 곳 보기)을 추천함.

  화면 시간 동안 뇌에서 일어나는 일

     * 뇌의 변화
          + 과도한 화면 사용은 학습, 기억, 정신 건강에 해로울 수 있음.
          + 18-25세 성인에서 대뇌 피질의 얇아짐을 유발할 수 있음.
          + 하루 5시간 이상 TV 시청 시 치매, 뇌졸중, 파킨슨병 등의 위험 증가.
     * 수면 방해
          + 밤늦게 화면을 보면 수면에 방해가 됨.
          + 화면의 빛이 멜라토닌 분비를 지연시켜 수면 리듬에 영향을 미침.
     * 회색질 감소
          + 과도한 화면 사용은 회색질 감소와 관련 있음.
          + 회색질은 운동, 기억, 감정 등 일상 기능에 필수적임.
          + 운동, 충분한 수면, 사회적 교류, 스트레스 관리 등으로 회색질을 유지하는 것이 중요함.
     * 수동적 화면 시간의 문제
          + 수동적 화면 사용은 뇌에 영양을 공급하지 않음.
          + 운동, 좋은 수면, 사회적 연결, 스트레스 관리 등으로 뇌 건강을 증진할 수 있음.
     * 아침에 스마트폰 사용의 문제
          + 아침에 스마트폰을 보면 신경계를 자극하여 불안감을 유발할 수 있음.
          + 아침에 스마트폰을 보는 습관은 뇌를 과민하게 만들 수 있음.

  이달의 실천: 하루 첫 시간 동안 화면 사용 금지

     * 건강한 아침 루틴 추천
          + 하루 첫 시간 동안 화면 사용을 피하고 건강한 활동을 추천함.
          + 운동, 친구나 가족과 통화, 건강한 아침 식사 준비, 명상, 음악 듣기, 감사 목록 작성, 책 읽기, 아침 햇빛 받기 등.

GN⁺의 정리

     * 과도한 화면 사용이 성인의 뇌 건강에 미치는 부정적 영향을 다룸.
     * 뇌의 구조적 변화와 정신 건강 문제를 유발할 수 있음을 설명함.
     * 건강한 아침 루틴을 통해 화면 사용을 줄이고 뇌 건강을 증진할 수 있음을 강조함.
     * 유사한 기능을 가진 제품이나 프로젝트로는 디지털 디톡스 프로그램이 추천됨.

        Hacker News 의견

     * 아침에 바로 휴대전화를 보는 것은 얼굴 가까이에 물체가 있을 때 위협으로 인식되기 때문이라는 의견이 있음. 이는 진화론적으로 이해가 되지만, 매일 아침 여자친구의 얼굴을 보는 것이 같은 반응을 유발하지 않기를 바람.
          + ""sky before screens""라는 개념이 흥미로움. 이는 스크린을 보기 전에 하늘을 보는 습관을 의미함.
     * 연구의 출처가 약하다고 느낌. 부정적인 영향을 뒷받침하는 예시가 있음.
          + 스마트폰, 정신 건강, 약물 사용, 신경 발달, 신경 퇴행에 관한 연구를 메타 분석으로 포장한 것 같음.
     * 연구의 질에 대한 확신이 부족함. 과도한 스크린 시간이 뇌 발달에 부정적인 영향을 미칠 수 있다는 증거가 있음.
          + 스크린 시간이 스마트폰 사용만을 의미하는지, 태블릿이나 PC 사용은 어떤지에 대한 의문이 있음.
          + 스크린에서 하는 활동의 종류에 따라 영향이 다를 수 있음.
     * 아침에 스크린을 보지 않는 것보다 밤에 스크린을 보지 않는 것이 더 도움이 된다고 느낌. 이는 더 나은 수면에 도움을 줌.
     * 기사와 연구들이 인과 관계를 확립하지 못함. ""문제가 있는 사람들이 이러한 습관을 가지고 있다""는 식으로 요약될 수 있음.
     * 과도한 스크린 시간을 하루 2시간 이상으로 정의하는 것에 의문이 있음. 근무 시간이 무엇인지, 왜 고용주가 이 자원을 우선적으로 사용할 권리가 있는지에 대한 의문이 있음.
     * 가족의 iPhone에 매일 저녁 9시에 자동화 기능을 설정해 데이터, 블루투스, WiFi를 끄고 화면 밝기를 낮추는 습관이 있음. 다음날 아침 6시에 다시 원래 상태로 되돌림.
     * 스크린 시간을 생산적으로 사용하는 사람들에 대한 연구가 있는지 궁금함. 예를 들어, 아침에 Duolingo를 사용하거나 운동 기록을 남기는 것과 같은 활동이 있음.
     * 스크린 시간이란 개념이 이상하게 느껴짐. 뉴스 읽기, 코드 작성, 영화 보기 등 활동에 따라 느낌이 다름. 스크린 크기와 환경도 경험에 영향을 미침.
     * 이러한 연구들로 결론을 내릴 수 없다고 생각함. 연구들은 시작점일 뿐이며, 더 많은 연구가 필요함. 활동의 종류에 따라 영향이 다를 수 있음.
"
"https://news.hada.io/topic?id=16996","F-4 전투기 3축 자세 지시기 역설계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         F-4 전투기 3축 자세 지시기 역설계

F-4 전투기의 3축 자세 지시기를 역설계하다

     * 최근 F-4 전투기의 자세 지시기를 받음. 이 기기는 회전하는 공을 사용하여 항공기의 방향과 자세를 나타냄.
     * 일반 항공기의 인공 수평선은 두 축(피치와 롤)을 나타내지만, F-4 지시기는 회전하는 공을 사용하여 세 축(피치, 롤, 방위각)을 나타냄.
     * 공이 세 축으로 회전하면서도 기기에 부착된 상태를 유지하는 방법이 궁금했음.

  F-4 항공기

     * F-4 팬텀 II는 1958년부터 1981년까지 제조된 초음속 전투기임.
     * 베트남 전쟁에서 주요 전투기로 사용되었으며, 1990년대 걸프 전쟁에서도 사용됨.
     * F-4는 핵폭탄을 탑재할 수 있었음.

  자세 지시기 메커니즘

     * 공은 항공기의 위치를 세 축으로 나타냄.
          + 롤 축: 항공기가 좌우로 기울어지는 각도
          + 피치 축: 항공기가 위아래로 기울어지는 각도
          + 방위각 축: 항공기의 방향
     * 지시기는 세 개의 모터를 사용하여 공을 움직임.
          + 롤 모터는 지시기의 프레임에 부착되어 있으며, 피치와 방위각 모터는 공 내부에 있음.
          + 공은 롤 짐벌에 의해 고정되어 있으며, 롤 모터가 롤 짐벌과 공을 회전시킴.

  서보 루프

     * 모터는 서보 루프에 의해 제어됨.
     * 자세 지시기는 외부 자이로스코프에서 롤, 피치, 방위각 위치를 나타내는 전기 신호를 받음.
     * 각 모터는 서보 루프에 의해 제어되며, 입력 각도와 출력 각도가 일치할 때까지 회전함.

  증폭기

     * 모터는 증폭기 어셈블리에 의해 전력을 공급받음.
     * 증폭기 어셈블리는 세 개의 증폭기 보드(롤, 피치, 방위각), DC 전원 공급 보드, AC 변압기, 트림 포텐셔미터로 구성됨.
     * 각 증폭기 보드는 오류 신호를 증폭하여 모터를 제어함.

  피치 트림 회로

     * 자세 지시기에는 피치 트림 노브가 있음.
     * 항공기가 수평 비행 중일 때, 약간의 각도로 비행할 수 있으므로, 조종사는 피치 트림 노브를 사용하여 지시기를 조정할 수 있음.
     * 피치 트림 조정은 항공기가 수평 비행에서 멀어질 때 점차적으로 사라지도록 설계됨.

  결론

     * 자세 지시기는 항공기에서 중요한 기기임.
     * F-4의 자세 지시기는 일반적인 인공 수평선 지시기보다 복잡하며, 세 번째 축을 추가하여 항공기의 방향을 나타냄.
     * 현대 전투기는 복잡한 전자기계 기기 대신 디지털 화면을 사용하여 데이터를 제공함.

GN⁺의 정리

     * 이 글은 F-4 전투기의 3축 자세 지시기를 역설계하는 과정을 다룸.
     * 자세 지시기의 메커니즘과 서보 루프, 증폭기, 피치 트림 회로에 대해 설명함.
     * 현대 전투기는 디지털 화면을 사용하지만, 기계식 기기는 여전히 매력적임.
     * 유사한 기능을 가진 다른 프로젝트로는 Apollo 우주선의 FDAI와 Soyus Globus가 있음.

        Hacker News 의견

     * 고해상도 이미지를 포함해줘서 고마움
          + 아날로그 트릭을 많이 사용한 것이 놀라움
          + 현대에서는 몇 줄의 코드로 해결할 수 있을 것임
     * 자동차 대시보드에 이런 표시기를 추가하고 싶었음
          + 이미 보트 나침반을 추가했는데 유용하고 미적임
          + 전자식 표시기는 진공식이나 올글래스 콕핏보다 훨씬 드묾
     * 작성자가 질문이 있으면 답변할 준비가 되어 있음
     * 재미있는 사실은 이 비행기가 여전히 이란 공군의 중추로 사용되고 있음
          + 몇 년 전 일부 변형에서 항공 전자 장비를 업그레이드하기 전에도 동일한 유닛이 사용되었음
     * 호기심/무지에서 질문함
          + 작성자는 F35가 완전히 디지털 터치스크린을 사용한다고 언급함
          + 강력한 총이 그것을 손상시키면 어떻게 되는지 궁금함
          + F4와 비교하면, F4는 특정 라인의 계기만 손상될 것임
          + F35는 완전히 디지털이어서 더 무서울 것 같음
          + 분명히 F35에 대해 고려하지 않은 점이 있을 것임
     * kens@는 우리가 받을 자격이 없는 보물임
     * 이 문제를 해결한 엔지니어들이 자신들의 해결책을 알아낸 것을 알면 매우 기뻐할 것임
     * 엔지니어링 세부 사항을 보는 것이 매우 멋짐
          + 소프트웨어 사람으로서 이런 복잡한 하드웨어를 만들 때 버그와 QA를 어떻게 처리하는지 항상 궁금했음
     * 모든 기술이 슬라이드 룰을 사용한 사람들에 의해 만들어졌다는 것이 미침
"
"https://news.hada.io/topic?id=16960","Agile과 Jira의 느리고 고통스런 죽음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Agile과 Jira의 느리고 고통스런 죽음

     ""Agile이 더 이상 Agile이 아니게 되었으니, 이제 Agile이 Jira를 가지고 함께 사라져야 할 때임""

     * 소프트웨어 개발 주기는 점점 더 길어지고, 기술 팀은 점점 더 커지고, 개발 관리에는 점점 더 많은 앱이 필요하고, 실제로 코딩을 하는 사람은 점점 더 줄어들고, 점점 더 짧은 기간 동안, 지속적인 체크포인트 사이에 진척이 점점 더 줄어들고 있음
     * 애자일은 어디서 부터 잘못 되었을까?
          + 애자일은 기존의 문서 중심의 무거운 소프트웨어 개발 프로세스의 대안으로 2000년대 초반에 개발된 방법론임
          + 그러나 현재는 애자일이 기존의 복잡한 프로젝트 관리 방법론으로 변질되고 있음

기술 비대화(Tech Bloat)가 주요 문제임

     * 많은 사람들이 애자일을 포기하거나 포기하려는 주된 이유는 기술 비대화 때문임
     * 기술 비대화는 모든 기술 회사의 적이며, 사내 또는 외주 개발팀이 있는 비기술 회사에도 위험함
     * 기술 비대화는 기술 부채와는 다르지만, 기술 부채를 만들어냄
     * 기술 비대화의 증상은 다음과 같음:
          + 고객과 반복적으로 대화하지만 고객 행동에 대한 전문가가 되지 않음
          + 마감일과 납품일을 끊임없이 평가하고 재평가함
          + 모든 세부 사항이 문서화될 때까지 개발 프로세스를 시작하기를 극도로 꺼림
          + 가장 위험한 작업이 아닌 가장 쉬운 작업부터 시작하려는 동기가 생김

기술 비대화의 혼란스러운 결과

     * 문서화 증가
          + 무엇을 왜 개발했는지 뿐만 아니라 ""어떻게"" 개발했는지도 추적하는 문서화가 프로세스에 스며듦
          + 이 ""어떻게""가 상태 업데이트의 초점이 되어 팀이 어떻게 일하고 있는지 끊임없이 재평가함
          + 팀은 일을 하는 데 시간을 보내기보다 왜 일이 완료되지 않았는지 논의하는 데 더 많은 시간을 보냄
     * 잦은 마감일 설정
          + 더 잦은 검사점에서 더 많은 마감일이 설정되어 본질적으로 창의적인 프로세스의 모든 전환점에서 미시적 관리를 낳음
          + 이는 품질 있는 소프트웨어 생산에 역행함. 모든 작업이 얼마나 잘 실행되었는지와 상관없이 정해진 기한에 전달되기 때문
     * 재평가 과정의 끊임없는 의심
          + 재평가 기간 동안 끊임없는 의심으로 인해 모범 사례가 선언되지 않고, 낭비가 제거되지 않으며, 규모의 경제가 인식되지 않게 됨
     * 생산 과정의 미시적 관리
          + 전체 기능의 30% 정도가 완성될 때쯤이면 더 이상 우선순위가 아니게 됨
          + 조직은 로드맵이 여전히 성공적인 제품 구축을 정의하는지 여부와 관계없이 로드맵에 있는 것을 생산하는 죽음의 나선에 빠짐
     * 최종 결과
          + 제품은 다양하고 상충하는 고객 요구 사항의 무게에 시달림
          + 기능은 종종 시장에 늦게 출시되고 시장에 가장 적합한 방식과 순서가 아닌 기술팀에 가장 적합한 방식과 순서로 제공됨
          + 결국 영업/마케팅 팀은 자신들이 무엇을 판매하는지, 고객은 무엇을 구매하는지 모르기에 반발함
          + 그러면 조직은 대대적인 정리에 나섬

세상은 더 많은 기능이 아닌 중요한 일을 더 잘하는 가벼운 소프트웨어가 필요함

     * 이는 새로운 개념이 아니지만, 모든 방법론이 결국 멀어지는 개념임
     * 사람들은 결국 토요타 방식이 토요타에 충분히 토요타스러운지 묻기 시작하고, 그것은 더 많은 일을 만드는 일이 됨
     * 애자일은 이제 귀여운 이름과 더 짧은 회의, 더 많은 규칙을 가진 PMP가 되었음
     * 문제는 애자일의 아이디어가 아니라 실행과 통제할 리더십의 부족임
     * 효용성보다 마감일, 성장보다 삭감, 진보보다 절약에 초점을 맞춘 중간 관리층의 문제임

GN⁺의 의견

     * 애자일은 원래의 의도와 달리 관료주의화되고 형식화되어 소프트웨어 개발을 더디게 만드는 요인이 되고 있음
     * 기술 비대화는 애자일뿐만 아니라 모든 기술 조직에서 주의해야 할 위험 요소임
          + 문서화, 마감일 설정, 미시적 관리 등이 오히려 품질과 속도를 떨어뜨릴 수 있음
     * 애자일의 본질은 고객 중심, 협업, 유연성 등에 있으므로 형식에 얽매이기보다는 원칙을 되새길 필요가 있음
     * 소프트웨어 개발에서 중요한 것은 더 많은 기능이 아니라 핵심 기능을 잘 구현하는 것임
     * 조직 문화와 리더십이 애자일의 성패를 좌우하므로, 기술 관리자들은 이에 주의를 기울여야 함
     * 애자일을 넘어 새로운 방법론을 모색할 때가 된 것 같음

   원문이 유료 아티클이라 끝까지 보지는 못했는데요, 번역된 표현을 좀더 다듬으면 좋을것 같습니다.
   ""Agile이 더 이상 Agile이 아니게 되었으니, 이제 Agile이 Jira를 가지고 함께 사라져야 할 때임""
   => ""Agile이 being agile을 멈춰서, 이제 Agile이 Jira를 가지고 함께 사라져야 할 때임""

   대문자 Agile과 소문자 agile을 구분해서 쓰는 개념이 있고요,
   being agile과 doing agile이 서로 연결되어 있지만, 구분해서 생각합니다.
   being agile by doing agile.

   애자일 도입 이유가 중요하죠. 개발 잘되라고 도입하겠습니까? 난 니들 노는꼴을 못보겠다. 얼마나 열심히 하는지 내가 한번 볼께 . 이런 마인드로 도입하는거죠. 그러니 헬이 되겠죠.

   이쯤 되면 애자일 준수 체크리스트가 필요할 것 같아요.

   ???: 워터폴은 세상에서 가장 완벽한 개발 방법론입니다. 예외는 절대 존재하지 않습니다.

   요구사항 변경이 (거의) 없다면 개발하는 입장에서 워터폴이 진짜로 편한 방법인건 맞습니다. 요구사항 변경만 없다면 말이죠…

   ???: 폭포수라도 다시 끌어올리는 방법이 있습니다. 있어야 합니다. 안그러면 우리가 원하는 서비스를 만들 수가 없어요. 그런 유연하지 못한 업체는 망해야 합니다. 반드시!

   K 애자일은 재평가 없는데.!
   고객 : 이 화면에 버튼이 여기가 좋겠네요
   개발자 : (밤새야 되구나 신규건도 있는데)
   고객 : 다른 화면에 버튼이 있어야 겠네요
   개발자 : (누가 분신술을 써줘) 네 하핫..
   고객 : 아직 안되었나요 일정상 다끝났어야되는거 아닌가요?
   개발자 : (살려줘) 네..;;

   애자일을 애자일스럽게 장기적으로 활용되는 사례가 별로 없고
   대부분의 조직이 마감이 짧은 워터폴 업무로 수렴되나보내요.

   애자일이 문제가 아닙니다. 그걸 하는 사람이 문제죠. 무슨 방법론을 가지고 오던 결국은 그걸 하는 사람이 어떻게 하느냐 입니다. 저는 애자일은 방법론이 아닌 어떤 주기마다 제품을 성장시키는 정신에 가깝다고 생각합니다. 이걸 놓치고 맹목적으로 플래닝하고 회고하면 시간 낭비인것 같아요.

   k-애자일만 그런줄 알았는데, 글로벌 현상이였군요.

   엉뚱한 걸 자꾸 때리는 느낌이긴 하네요... 애자일 선언에 맞는지 안맞는지로 판단하는 거여야할텐데...

   애자일 선언에 참여한 uncle bob 도 이 문제를 일찍 이해하고 잘못된 애자일을 바로잡기 위해 2019년에 클린 애자일 책을 발간했는데, 아직도 이런 문제가 계속되네요. 개인적으로 애자일이 표준 가이드라인이 없고, ""문화""라는 모호한 표현을 사용하고 있기 때문이라고 생각합니다. 구체적인 표준 가이드라인이 제시되었으면 좋겠네요

   필자는 아마 어떤 방법론이라도 관료화되기만 하면 버리라고 주장할 것 같네요

   동의합니다. 잘못된 애자일을 하고 애자일이 틀렸다고 이야기하는 것들이 많아지고 있는 것 같아요.
   한편으로 드는 생각은 등장한지 시간이 꽤 흘렀는데도 프랙티스를 잘 쌓는게 어렵다는건 피할 수 없는 것 같기도 해요.

   돌고돌아 원래대로인가요?

        Hacker News 의견

     * Agile의 문제점
          + 한 회사의 엔지니어링 디렉터로서, 독립적인 Scrummaster 팀이 아침 스탠드업만 주관하고 나머지 시간에 무엇을 하는지 알 수 없었음
          + Scrummaster 팀의 역할을 줄이고 팀을 자율적으로 운영하도록 하여 회사의 중심 팀으로 성장시킴
          + Scrummaster 팀은 절반으로 줄어듦
     * Agile Manifesto의 원칙
          + 개인과 상호작용을 프로세스와 도구보다 중시
          + 포괄적인 문서보다 작동하는 소프트웨어를 중시
          + 계약 협상보다 고객 협력을 중시
          + 계획을 따르는 것보다 변화에 대응하는 것을 중시
     * Agile의 핵심
          + Agile은 개발 속도를 빠르게 하는 것이 목적이 아님
          + 불필요한 기능을 피하고 낭비를 줄이는 것이 중요함
          + 작은 반복 작업을 통해 큰 디자인을 피하고 ROI가 낮은 기능을 방지함
          + JIRA는 문제를 추적하는 시스템일 뿐, 배달 문제의 원인이 아님
     * Agile의 유연성
          + Agile은 고정된 방법론이 아니며, 팀과 조직에 맞게 유연하게 운영되어야 함
          + 프로젝트마다 이해관계자가 다를 수 있어 유연하게 대응해야 함
     * JIRA에 대한 의견
          + JIRA는 문제와 프로젝트를 읽고, 댓글을 달고, 작업 완료 여부를 확인하는 데 유용함
          + 대부분의 사람들이 JIRA를 싫어하는 이유는 조직이 스프린트와 포인트를 관리 도구로 사용하기 때문임
          + JIRA는 단순한 작업 및 버그 추적 도구로서 괜찮음
          + Agile과 JIRA는 별개이며, Agile 프로세스 자체에 대한 불만이 많음
     * Agile의 기원
          + Agile은 웹 개발 컨설팅에서 나쁜 고객을 관리하기 위한 방어적 프로세스로 탄생함
          + 모든 결정을 문서화하고, 확정된 타임라인을 피하며, 작업 산출물을 세세하게 생성하는 것이 중요함
          + 이는 소프트웨어를 만드는 좋은 방법은 아니지만 일관된 방법임
          + 대규모 비기술 기업에게 매력적이며, 기술이 아닌 다른 요소가 경쟁 우위인 경우 소프트웨어가 충분히 잘 작동하기만 하면 됨
     * Agile의 현재
          + Agile은 죽어가는 것이 아니라 이미 승리한 상태임
          + 반복적인 개발이 소프트웨어 개발의 기본이 됨
     * JIRA의 문제점
          + JIRA는 Agile이 아니며, 불필요한 기능이 많은 소프트웨어임
          + 보드와 알림만 필요하다면 잘못된 사용법임
     * Agile의 적용
          + Agile의 원칙을 수백 개의 프로젝트에 적용하려고 노력함
          + 고정된 범위, 예산, 타임라인을 가진 프로젝트에서 Agile을 운영하는 것이 어려움
          + 프로젝트 목표와 측정 방법을 정의하면 우선순위 기능으로 범위를 조정할 수 있음
          + 일부 프로젝트는 Agile 방법론을 사용하고, 다른 부분은 워터폴 방식으로 진행하여 혼합된 접근 방식을 사용함

   애자일이냐 waterfall이냐의 문제 이전에 사람과 문화 등 환경이 그대로면 아무리 신박한 개발 방법론을 들이밀어봤자 K-OOO 화 되는길 밖에 없습니다
"
"https://news.hada.io/topic?id=17035","HN 공개: 1초 미만 지연 시간의 실시간 AI 비디오 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HN 공개: 1초 미만 지연 시간의 실시간 AI 비디오 에이전트

     * Tavus의 공동 창립자인 Hassaan과 Quinn이 AI 연구 회사 및 비디오 API 개발 플랫폼을 소개함
     * 2020년부터 '디지털 트윈' 또는 '아바타'를 위한 AI 비디오 모델을 개발해옴
     * 인간과의 현실적인 대화를 위한 AI 비디오 인터페이스 구축의 도전 과제를 공유함

  도전 과제

     * 대화형 비디오가 효과적이기 위해서는 매우 낮은 지연 시간과 대화 인식이 필요함
     * 친구 간의 빠른 대화는 발언 사이에 약 250ms의 시간이 걸리지만, 복잡한 주제나 새로운 사람과의 대화는 추가적인 '생각' 시간이 필요함
     * 1000ms 이하의 지연 시간은 대화를 현실감 있게 만듦

  아키텍처 결정

     * 지연 시간, 확장성, 비용의 균형을 맞추는 것이 큰 도전 과제였음
     * 지연 시간을 줄이기 위해 처음부터 새로 구축해야 했음
     * 수천 개의 대화를 동시에 지원하면서도 컴퓨팅 비용을 절감해야 했음

  초기 개발

     * 초기 개발 단계에서는 각 대화가 개별 H100에서 실행되어야 했음
     * 이는 확장성이 없고 비용이 많이 들었음

  Phoenix-2 모델 개발

     * 여러 개선 사항을 포함한 새로운 모델, Phoenix-2를 개발함
     * NeRF 기반 백본에서 Gaussian Splatting으로 전환하여 실시간보다 빠르게 프레임을 생성할 수 있게 됨
     * 메모리와 GPU 코어 사용을 최적화하여 저사양 하드웨어에서도 실행 가능하게 함
     * 스트리밍 vs 배칭, 프로세스 병렬화 등 시간과 비용을 절감하는 다른 방법들도 사용함

  최적화

     * 각 구성 요소(비전, ASR, LLM, TTS, 비디오 생성)를 초고속으로 최적화해야 했음
     * 가장 큰 문제는 LLM이었음
     * 토큰 당 초속(t/s)이 빠르더라도 첫 번째 토큰까지의 시간(ttft)이 느리면 문제가 됨
     * 대부분의 제공업체가 너무 느렸음

  발언 종료 감지

     * 발언 종료 감지가 어려웠음
     * 기본 솔루션은 침묵 후 시간을 사용하여 발언 종료를 '결정'하지만, 이는 지연 시간을 추가함
     * AI 에이전트가 사용자의 말을 끊지 않도록 적절한 타이밍을 맞추는 것이 중요했음

  결과

     * 이러한 최적화로 3-5초에서 1초 미만(최대 600ms)으로 지연 시간을 줄일 수 있었음
     * 저사양 하드웨어에서도 1초 미만의 지연 시간을 달성함
     * Delphi와 같은 여러 고객이 있으며, 디지털 트윈과의 대화가 몇 분에서 최대 4시간까지 이어짐

  GN⁺의 정리

     * Tavus의 AI 비디오 모델은 인간과의 자연스러운 대화를 목표로 함
     * 지연 시간을 줄이기 위해 아키텍처를 새로 구축하고 최적화함
     * Phoenix-2 모델은 저사양 하드웨어에서도 실시간보다 빠르게 프레임을 생성할 수 있음
     * 이 기술은 인간-컴퓨터 인터페이스의 중요한 요소가 될 가능성이 있음
     * 유사한 기능을 가진 다른 프로젝트로는 Google의 Duplex가 있음

        Hacker News 의견

     * 웹사이트와 다이얼업 소리가 마음에 듦, 카우보이 모자도 좋음
     * 두 아바타의 채팅 경험이 좋지 않음, 자주 끊기고 혼란스러움
     * 이미지 인식은 좋음, 아바타가 천천히 반응할 때 물건을 인식할 수 있었음
     * 구체적인 어려움을 공유해줘서 감사함, 앞으로 더 좋아질 것임
     * Hassan 버전이 더 나았음, 배경을 인식하고 벽에 있는 모델에 대해 이야기함
          + LEGO 세트에 대해 대화함
     * 화장실에서 카메라가 수건을 비추고 있었는데 ""아늑한 화장실이네요""라고 말함
     * 실제 사람과 대화하는 느낌이었음, 코드처럼 대할 수 없었음
          + 사람과 대화할 때의 의식적인 노력을 생각하게 됨
          + Google 검색 시 최소한의 키워드만 사용함
          + 이 기술이 사람들에게 비슷한 행동을 훈련시킬까 걱정됨
     * 저지연, 멀티모달 AI에 관심 있다면 Tavus가 10월 19-20일 SF에서 해커톤을 후원함
          + 원격 트랙도 있음
     * 데모 기능: 9.5/10
          + 소름 끼침: 10/10
     * GPU 배포에 익숙하지 않지만, 비용이 많이 들고 할당이 어려움
          + 클라우드 GPU 자원을 대규모로 처리하는 방법이 궁금함
          + 웹소켓 연결당 GPU를 할당하는지, 그렇다면 비용이 많이 들 것임
     * 기술적으로 매우 인상적임, Carter 아바타가 긴장한 듯 보임
          + 입/치아에 이상이 있지만 반응이 빠름
          + Zoom에서 더 많은 지연을 본 적 있음
          + 콜센터의 미래라고 생각함, 아바타가 표현력이 높아지면 CSAT가 더 높아질 것임
     * 기술적으로 놀라운 작업, 1초 미만의 반응 시간은 매우 인상적임
          + FaceTime에서 가짜 사람과 대화할 수 있다는 점이 무서움
          + 사회적 영향에 대해 어떻게 생각하는지 궁금함
          + 오늘날 인간 연결의 부족으로 외로움 위기가 있음
     * ChatGPT가 대화 중단을 감지하는 데 문제가 있음
          + 항상 말을 끊음
"
"https://news.hada.io/topic?id=16990","Go 웹 개발에 대한 몇가지 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Go 웹 개발에 대한 몇가지 노트

Go 1.22부터 표준 라이브러리에서 더 나은 라우팅 지원을 제공함

     * 기존에는 수동으로 라우팅을 처리했으나, 이제는 mux.HandleFunc을 사용하여 간단하게 라우팅 가능
     * 로그인 미들웨어를 추가하여 보안 강화 가능

내장 라우터의 주의사항: 후행 슬래시로 인한 리디렉션

     * /records/ 경로를 만들면 /records 요청이 /records/로 리디렉션됨
     * 이로 인해 POST 요청의 본문이 제거되어 GET 요청으로 변경되는 문제가 발생할 수 있음
     * 해결책은 POST /records/ 대신 POST /records와 같은 API 엔드포인트를 사용하는

sqlc로 데이터베이스 쿼리 코드 자동 생성

     * ORM을 배우지 않고도 SQL 쿼리를 작성할 수 있는 sqlc 도구 발견
     * SQL 쿼리를 작성하면 Go 코드로 자동 변환됨
     * ORM의 문서를 참조하지 않고도 필요한 SQL 쿼리를 쉽게 작성 가능

sqlite 최적화 팁

     * 데이터베이스에 쓰기 전용 객체를 사용하고 db.SetMaxOpenConns(1) 설정
     * 읽기 속도를 높이려면 쓰기용과 읽기용으로 별도의 DB 객체를 사용
     * JOIN이 필요 없는 두 개의 테이블은 별도의 데이터베이스에 넣어 독립적으로 연결 가능ㅍ

Go 1.19의 GC 메모리 제한 설정

     * 256MB 또는 512MB와 같이 메모리가 상대적으로 적은 VM에서 모든 Go 프로젝트를 실행하면 애플리케이션이 계속 OOM으로 종료되는 문제 발생
     * 가비지 컬렉터 기본 설정으로 인해 현재 힙 크기의 2배까지 메모리 할당을 허용
     * Go 1.19에서 애플리케이션이 특정 메모리 사용량에 도달하면 GC를 실행하도록 지시하는 방법이 추가됨
     * GC 메모리 제한을 250MB로 설정한 후 OOM 종료 빈도가 줄어듦 export GOMEMLIMIT=250MiB

Go로 웹사이트를 만드는 이유

     * 단일 정적 바이너리로 배포가 간편함
     * 프로덕션에서 사용할 수 있는 내장 웹서버가 있어 WSGI 등을 구성할 필요가 없음
     * Go의 도구 체인이 설치 및 사용이 간편함
     * HTTP 응답을 보내는 것이 간단하여 프로젝트 유지보수가 쉬움
     * 표준 라이브러리에 net/http가 포함되어 있어 추가 라이브러리 설치 없이 웹사이트 제작 가능
     * 시스템 수준의 작업도 쉽게 수행 가능
     * 모든 것이 프로젝트를 쉽게 다룰 수 있도록 만들어진 것 같음

아직 해결하지 못한 문제들

     * Go에서 아직 많이 해보지 않은 것들
          + HTML 템플릿 렌더링
          + 실제 로그인 시스템 구현
          + CSRF 구현
     * 일반적으로 보안에 민감한 기능을 구현하는 방법을 잘 모르기 때문에 로그인/CSRF 등이 필요한 프로젝트는 시작하지 않음

Go의 새로운 기능을 보는 것이 멋짐

     * 이 글에서 언급한 두 가지 Go 기능(GOMEMLIMIT와 라우팅)은 지난 몇 년 동안 새로 추가된 것
     * 새로운 Go 버전에 대한 릴리스 노트에 더 주의를 기울여야 할 것 같음

   sqlc 정말 좋습니다

        Hacker News 의견

     * Go 언어는 프로젝트를 5일 동안 작업하고 2년 동안 방치한 후에도 문제없이 다시 코딩할 수 있게 해줌
     * Go 언어는 몇 년 전부터 배우기 시작했지만 크게 변하지 않아 오랜 시간이 지나도 여전히 유용함
     * Go 언어의 웹 개발 포스트에서 embed 패키지가 언급되지 않은 것이 아쉬움
          + 단일 바이너리로 정적 리소스를 번들링하는 것이 매우 편리함
     * 데이터베이스 트랜잭션은 실패하도록 설계되었기 때문에 항상 재시도 루프를 사용해야 함
          + 트랜잭션 루프에 Context를 추가하여 취소할 수 있도록 하는 것이 좋음
     * sqlc는 몇 가지 주요 제한 사항과 사소한 불편함이 있어 사용하기 전에 이슈 목록을 확인하는 것이 좋음
          + 동적 쿼리, 일대다 관계, 임베디드 CTE, 복합 타입 등을 지원하지 않음
          + 간단한 요구사항에는 적합하지만 복잡한 작업에는 수동 접근 방식을 사용해야 함
     * Go를 컨테이너 내에서 실행할 때 GOMAXPROCS를 적절히 설정하여 CPU 스로틀링을 피해야 함
     * GOMEMLIMIT을 사용하면 GC에 대한 걱정을 줄일 수 있음
          + Kubernetes나 Docker를 사용할 때 자동으로 설정할 수 있음
     * html/template는 이상하고 많은 문제를 가지고 있어 사용하지 않는 것이 좋음
          + 대신 Templ을 선호함
     * 라우팅에 대한 언급이 반가움
          + 오랫동안 mux에 익숙해져 있었지만 새로운 릴리스 기능을 주목하지 않았음
     * 새로운 직장에서 한 달 동안 Go를 사용했지만 싫어함
          + Go는 지난 20년간의 언어 개발에서 아무것도 배우지 않은 것 같음
          + nil 문제로 인해 간단한 작업도 복잡해짐
     * SQLite를 사용할 때 단일 쓰레드 작성자 풀과 다른 읽기 풀을 사용하는 것이 좋음
          + BEGIN CONCURRENT를 사용하여 동시성을 개선할 수 있음
     * Go의 단순성과 프레임워크 의존성이 없는 점을 사랑함
          + 표준 라이브러리와 검증된 서드파티 라이브러리만으로도 훌륭한 것을 만들 수 있음
          + 웹 앱이나 CLI 도구를 만들 때 Go가 적합함
          + 명시적인 오류 처리를 좋아함
          + 큰 Go 팬임
"
"https://news.hada.io/topic?id=16988","과도한 효율성의 부작용과도한 효율성의 부작용 (2022)

너무 높은 효율성은 모든 것을 악화시킴: 과적합과 강한 버전의 굿하트 법칙

   효율성이 증가하면 역설적으로 결과가 나빠질 수 있음. 이는 거의 모든 곳에서 사실임. 이 현상을 강한 버전의 굿하트 법칙이라고 부를 것임. 예를 들어, 표준화된 시험을 통한 학생 성취도의 중앙 집중식 추적은 좋은 아이디어처럼 보이지만, 이는 학교가 시험 준비에 집중하게 만들어 전반적인 교육 결과를 악화시킬 수 있음. 정치, 경제, 건강, 과학 등 많은 분야에서도 유사한 예가 존재함.

  과적합과 굿하트 법칙

     * 과적합: 머신러닝에서 목표를 직접 맞출 수 없기 때문에 유사한 프록시를 사용하여 모델을 훈련함. 처음에는 프록시가 개선되면서 목표도 개선되지만, 최적화를 계속하면 프록시가 더 좋아져도 목표는 더 이상 개선되지 않음. 이를 과적합이라고 부름.
     * 굿하트 법칙: 측정이 목표가 되면 좋은 측정이 되지 않음. 이는 경제학뿐만 아니라 다양한 분야에 적용됨.

  강한 버전의 굿하트 법칙: 너무 효율적이 되면 우리가 신경 쓰는 것이 악화됨

     * 프록시 목표를 계속 최적화하면 목표가 악화될 수 있음. 이는 머신러닝에서 매우 일반적인 현상임.
     * 강한 버전의 굿하트 법칙: 측정이 목표가 되고 효과적으로 최적화되면 측정하려는 것이 악화됨.

  효율성 증가와 과적합이 어디에나 존재함

     * 효율성이 증가하면 사회 전반에 걸쳐 긍정적이거나 부정적인 결과를 초래할 수 있음.
     * 예시:
          + 목표: 아이들을 잘 교육시키기
               o 프록시: 표준화된 시험 성적
               o 결과: 시험 준비에만 집중하여 실제 교육의 질이 떨어짐
          + 목표: 과학의 빠른 발전
               o 프록시: 출판물 수에 따른 보너스
               o 결과: 부정확한 연구 결과 출판 증가
          + 목표: 건강한 인구
               o 프록시: 영양가 있는 음식 접근성
               o 결과: 비만 문제

  과적합과 강한 버전의 굿하트 법칙을 완화하는 방법

     * 프록시 목표와 원하는 결과를 더 잘 맞추기: 머신러닝에서는 테스트 상황과 유사한 훈련 예제를 수집함. 사회 시스템에서는 법, 인센티브, 사회 규범을 변경하여 목표와 더 잘 맞추도록 함.
     * 정규화 페널티 추가: 머신러닝에서는 파라미터의 크기를 작게 유지함. 사회 시스템에서는 복잡성을 줄이거나 추가 비용을 부과함.
     * 시스템에 노이즈 주입: 머신러닝에서는 입력, 파라미터, 내부 상태에 무작위 노이즈를 추가함. 사회 시스템에서는 무작위 요소를 추가하여 예측 가능성을 줄임.
     * 조기 중단: 머신러닝에서는 검증 손실이 악화되기 시작하면 훈련을 중단함. 사회 시스템에서는 의사 결정 시간을 제한하거나 시장 활동을 중단함.
     * 능력/용량 제한: 머신러닝에서는 모델을 작게 만들어 과적합을 방지함. 사회 시스템에서는 조직이나 에이전트의 용량을 제한함.
     * 능력/용량 증가: 머신러닝에서는 모델을 매우 크게 만들어 과적합을 방지함. 사회 시스템에서는 능력을 크게 증가시켜 목표와 프록시 간의 트레이드오프를 제거함.

  마무리 생각

   강한 버전의 굿하트 법칙은 AI에 대한 개인적인 두려움의 근본 원인임. AI는 거의 모든 작업에서 효율성을 높일 수 있음. 이 문제를 해결하기 위한 연구 기회가 많음. 사회 시스템이 강한 버전의 굿하트 법칙으로 인해 붕괴되면 이를 해결하기 위한 합리적인 행동을 취하기 어려워짐. 이 현상을 명명하고 더 잘 이해하는 것이 도움이 될 것임.

GN⁺의 정리

     * 강한 버전의 굿하트 법칙은 효율성이 증가하면 목표가 악화될 수 있음을 설명함.
     * 머신러닝의 과적합 현상과 유사하며, 다양한 분야에 적용될 수 있음.
     * 프록시 목표와 실제 목표를 더 잘 맞추고, 정규화 페널티를 추가하며, 시스템에 노이즈를 주입하는 등의 방법으로 문제를 완화할 수 있음.
     * AI의 효율성 증가로 인해 다양한 부작용이 발생할 수 있으며, 이를 해결하기 위한 연구가 필요함.
     * 사회 시스템이 붕괴되지 않도록 강한 버전의 굿하트 법칙을 이해하고 대응하는 것이 중요함.

   우리나라의 수능 시험은 수학 능력 측정이라는 초기 목적에서 벗어나, 등급 컷 분배만을 효율화하려는 시스템으로 변화했다고 들었습니다. 이는 굿하트 법칙을 벗어나지 못한 예로 보입니다.

        Hacker News 의견

     * Jascha는 Google Brain에서 일했던 뛰어난 ML 연구자이며 현재는 Anthropic에 있음
          + 딥 뉴럴 네트워크에서 신호 전파를 수학적으로 설명한 연구로 유명함
          + ""dynamical isometry""와 같은 개념을 통해 매우 깊은 트랜스포머 모델의 수렴을 달성함
          + 그의 최적화 직관은 ML을 넘어 현대 사회 전반에 걸쳐 있음
          + 그의 메시지는 기술적 배경을 넘어 인간적이고 공감적인 행동 촉구임
          + 과적합 문제와 경제학, 정치학, 경영학 등 다른 분야 간의 수학적 연결을 제안함
     * Goodhart의 법칙은 측정이 목표가 되면 좋은 측정이 되지 않는다는 내용임
          + 문제는 측정뿐만 아니라 인간 행동에 있음
          + 인간은 설정된 제어 시스템을 악용하려 함
          + Campbell의 법칙이 이를 더 잘 설명함
          + 정규화, 조기 종료 등의 완화책은 간접적이거나 새로운 문제를 초래할 수 있음
     * 스웨덴에서 지난 20년 동안 사회적 문제로 대두됨
          + 의료 효율성은 주치의의 ""완료된 작업""으로 측정됨
          + 단순한 사례를 처리하는 데 최적화되어 개인적인 접촉이 사라짐
          + 철도 시스템은 민영화되었지만 지연 문제로 고통받고 있음
     * 운동 생리학에서도 유사한 법칙이 존재함
          + 일반적인 훈련 방법론이 더 의미 있는 지표를 제공함
          + 전문화된 운동 선수는 성능 향상이 일반적인 체력 향상을 나타내지 않음
          + 스포츠에서 ""기본 체력""과 ""최고 체력""의 비유가 있음
     * 대기 이론에서도 관련 법칙이 있음
          + 사용률이 100%에 가까워지면 대기 시간이 무한대로 증가함
          + 여유가 필요함
     * GDP에 집중하는 것을 좋아하지 않음
          + 삶의 만족도와 낙관주의에 대한 분기별 설문조사가 더 나은 지표임
          + GDP는 경제 활동을 반영하지만 삶의 질을 반영하지 않음
     * 지역 하드웨어 상점에서 이 법칙의 예를 발견함
          + 도난 방지 케이지 설치로 인해 고객 경험이 악화됨
          + 데이터 기반 결정이 항상 최적의 결과를 가져오지 않음
     * 체인 레스토랑 방문 시 유사한 경험을 함
          + 모든 것이 최적화되어 기계적이고 인위적으로 느껴짐
          + 고객 경험이 아닌 수익 창출에 초점이 맞춰져 있음
     * 저자의 이름을 기억해냄
          + 2015년에 최초의 생성 확산 모델을 발명함
     * 효과는 존재하지만 예시는 정확하지 않음
          + 학업 성적에 대한 과도한 강조는 교육의 목적과 다름
          + 비만은 영양가 높은 음식을 우선시한 결과가 아님
          + 불평등 증가는 사회적 필요에 따른 자원 분배와 무관함
          + 자극 부족이 감각적 중독이나 도박을 초래함
          + 공공 교육 확대, 설탕 과세, 부의 재분배가 더 쉬운 해결책임
"
"https://news.hada.io/topic?id=17050","결국 모든 것은 텍스트이다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             결국 모든 것은 텍스트이다

     * 대부분의 프로그래밍 문제는 텍스트를 처리하고 데이터를 매핑하는 작업으로 단순화할 수 있다.
     * ORM을 개선하는 것도 쿼리 생성(텍스트 처리)과 데이터를 객체에 매핑하는 작업이다.
     * 코드 하이라이터는 텍스트를 처리하는 대표적인 예이다.
     * 콘솔 프레임워크는 명령(텍스트)을 처리하고 적절한 출력(텍스트)을 생성하는 작업이다.
     * HTTP 요청 라우팅은 요청(텍스트)을 처리해, 최종적으로 텍스트를 반환하는 과정이다.
     * 템플릿 엔진도 결국 텍스트를 처리하는 것이다.
     * 특히 PHP 같은 언어로 웹 프로그래밍을 할 때, 대부분의 작업은 텍스트 처리와 데이터 이동이다.
     * 이렇게 단순화된 관점으로 보면 복잡한 문제들을 더 쉽게 이해하고 해결할 수 있다.

   저는 이 글의 관점에 동의하지 않습니다. 거의 대부분의 자동화된 문자열 처리 프로세스는 구조화된 문자열을 다루기 때문에 필연적으로 파싱, 문법 트리 조작, 직렬화의 구조를 갖는 문제라고 생각해야 한다고 생각합니다. 임의의 JSON 두개를 concat 한다고 올바른 JSON 이 아니고, JSON 의 구조를 염두해야 하듯이요.

   텍스트에 대해선 이 발표보다 더 즐거운 발표가 없습니다: https://www.youtube.com/watch?v=gd5uJ7Nlvvo

   알려주신 덕분에 즐겁게 시청했습니다. 러시아로 배송된 해리포터 이야기와 난처한 이모지 정책 이야기가 특히 좋았습니다.

   C언어로 코딩할때 특히 느끼는 이야기네요.
   귀도 반 로썸의 최대 업적은 python에 str 자료형을 개발해 넣은 것 아닌가합니다...
   귀도 님께 내 마음 평화상, 내 시간 경제학상, 키보드 보호 물리학상 드리고 싶네요. 이미 상 많이 받으셨겠지만...

   ㅋㅋㅋ 상 이름 넘 웃김
"
"https://news.hada.io/topic?id=17045","3세부터 7세까지의 수학 교육","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            3세부터 7세까지의 수학 교육

    리뷰: 세 살에서 일곱 살까지의 수학, 알렉산더 즈본킨

     * 소련의 수학적 성공: 소련은 인구와 경제적 기반이 열악했음에도 불구하고 미국과 군사 및 기술적으로 오랫동안 동등한 수준을 유지했음. 이는 소련의 수학적 재능을 효율적으로 활용한 결과로 볼 수 있음.
     * 수학적 서클: 소련의 수학적 성공의 비결 중 하나는 '수학적 서클'이라는 비공식 모임임. 이 모임은 수학을 즐기는 사람들이 모여 문제를 해결하고 토론하는 장소로, 학교에서 배우는 수학과는 다른 실질적인 문제 해결을 중시함.
     * 문제 해결의 중요성: 수학적 서클에서는 '연습 문제'가 아닌 '문제'를 해결하는 데 중점을 둠. 문제는 실질적인 관심사에서 비롯된 질문으로, 해결이 보장되지 않으며 오랜 시간과 노력이 필요할 수 있음.
     * 알렉산더 즈본킨의 시도: 즈본킨은 자신의 자녀와 이웃 아이들을 대상으로 수학적 서클을 시작했음. 그는 아이들에게 수학을 공식으로 가르치는 대신, 문제 해결을 통해 수학적 사고를 키우고자 했음.
     * 아이들의 학습 과정: 즈본킨은 아이들에게 다양한 방식으로 문제를 제시하며, 반복적으로 접근하게 함으로써 문제 해결 능력을 키움. 이는 아이들이 자연스럽게 수학적 개념을 이해하도록 돕는 방법임.
     * 개인 차이의 중요성: 즈본킨은 두 번째 그룹의 아이들을 가르치면서, 각 아이의 성향과 능력이 다르다는 것을 깨달음. 이는 교육이 단순히 지식을 전달하는 것이 아니라, 각 개인의 특성을 이해하고 존중하는 과정임을 보여줌.

    GN⁺의 정리

     * 이 글은 소련의 수학적 성공 비결을 탐구하며, 수학적 서클의 중요성을 강조함. 이는 수학을 단순한 공식 암기에서 벗어나 문제 해결을 통해 사고력을 키우는 데 중점을 둠.
     * 알렉산더 즈본킨의 사례는 어린 아이들에게도 복잡한 수학적 개념을 가르칠 수 있음을 보여줌. 이는 교육 방법의 다양성과 창의성을 강조함.
     * 이 글은 교육자와 부모에게 아이들의 학습 과정에서 개인 차이를 존중하고, 다양한 접근 방식을 시도할 필요성을 일깨워 줌.
     * 비슷한 기능을 가진 프로젝트로는 수학적 사고를 키우는 다양한 교육 프로그램과 워크숍이 추천됨.

        Hacker News 의견

     * 이 글은 흥미롭고 잘 작성된 글임. 사람들이 댓글만 읽지 말고 본문도 읽기를 바람. ""학교의 지루한 연습 문제""가 불필요한지 아니면 충분하지 않은지를 확신할 수 없음. 자녀가 십대가 되면서 수학에 대한 흥미를 유지하는 좋은 경험이 있는지 궁금함. 자녀가 수학을 좋아했지만 이제는 학교 문제를 지루해함. 십대 시기와 결합되어 흥미를 되찾기 어려울 것 같음.
     * 수학 교육의 가장 큰 문제는 이론을 배운 후 문제 해결을 위한 실제 계획을 세우지 않는 것임. 여러 가지 통합 방법을 배웠지만 문제 접근 전략을 세우지 않음. 수영을 가르칠 때 물에 던져놓고 알아서 배우기를 기대하는 것과 같음. 결과적으로 학생들은 수학 문제에 대한 두려움을 배우게 됨.
     * Axiom Maths는 영국에 수학 서클 개념을 도입하려고 함. King's Maths School의 창립 책임자를 포함한 수학 교육 전문가 팀이 운영함.
     * 소련이 더 나았다는 기본 가정이 잘못되었다고 생각함. 소련은 GDP의 많은 부분을 군사와 우주에 집중했으며, 러시아의 삶은 비참했음. 이는 냉전을 지속시켰음.
     * 자녀가 세 살 때 읽으려고 했던 책이 있었지만 끝까지 읽지 못했음. 읽은 부분은 즐거웠음.
     * 수학 서클의 두 번째 반복에서는 모든 노트가 쓸모없어지고, 초기 교육 시도가 실패함. 이는 아이들의 적성과 관심이 다르기 때문임. 첫 번째 그룹은 운이 좋았고, 두 번째 그룹은 가르치기 어려웠음.
     * '중간 수준의 교사가 지정된 형식으로 답을 쓰지 않았다고 점수를 깎음'이라는 상황이 자녀의 수학 교사와 같음. 매우 좌절스러움.
     * 현재 교육 시스템을 싫어하는 십대로서, 서구에 수학 서클이 없는 이유가 궁금함. 로봇 팀이 비슷한 사회적 그룹을 형성함.
     * 이 책은 재미있지만 혼자서 따라하기 어려움. 자녀에게 시도했지만 어렵고, 저자처럼 수학자가 아님.
     * 수학에서 가장 중요한 것은 열정임. 성공하려면 그것에 대해 관심을 가지고 사랑하고 집착해야 함. 이는 수학, 코딩, 비즈니스 등 모든 분야에 적용됨. 많은 사람들이 어린 시절부터 기술에 관심을 가지게 된 이유임.
"
"https://news.hada.io/topic?id=16958","Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.

   이번 주에 있었던 일, 계획, 일상, 자랑, 고민, 추천 등 하고 싶은 말을 댓글로 작성해주세요.

   앞으로 본 Ask GN 글은 매주 금요일 올라왔던 '이번 주말에 뭐 하시나요?' 를 대신하여 등록될 예정입니다.

   작성한 글은 수정이 안되는 건가요?

   네네 작성한 직후에는 상단 제목 밑에 (favorite 텍스트 옆에) delete 텍스트가 있어서 그걸 누르면 삭제할 수 있는데, 조금만 시간이 지나도 바로 영구박제가 됩니다.

   오랜만에 가족들과 꼬치먹으러 왔는데 너무 좋아요 ㅋ

   하루하루 행복한 순간이 가볍게 더 많아지면 좋겠네요~

   ps5살까 싶어 고민하다가 결국 4k티비도 살지 고민중입니다
   사람욕심 끝이없네요

   고민이 7일을 넘기면 구입하시는쪽이 정신건강에 좋을것으로 보입니다 ㅋ

   게임 불감증이었는데, 주위에서 추천이 많아서 ""검은신화: 오공""을 시작했습니다.
   갓오브워 라그나로크는 약간 지겨웠고, 엘든링은 정말 안맞아서 포기했는데, 이건 꽤 할만하네요.
   뭔가 죽어도 다시 한번 도전할만하게 만들어놨어요. 엘든링은 화가 나던데.. ㅡ.ㅡ;
   매일 저녁에 두목 하나씩 잡는 수준으로 천천히 즐기고 있습니다.

   데이터 공유 기능 개발 고민하기.

   독립영화 한편 보려고 합니다.
   그리고 대하 소금구이 해먹으려고요~ 🍤
"
"https://news.hada.io/topic?id=16985","SpaceX, ISS에 고립된 NASA 우주비행사 2명을 위한 임무 발사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                SpaceX, ISS에 고립된 NASA 우주비행사 2명을 위한 임무 발사

     * SpaceX는 국제우주정거장(ISS)에 있는 두 명의 우주비행사를 구조하기 위해 축소된 인원으로 새로운 임무를 발사함
     * NASA의 닉 헤이그(Nick Hague)와 러시아의 알렉산더 고르부노프(Alexander Gorbunov)가 보잉 우주선의 안전 문제로 인해 지구로 돌아가지 못한 부치 윌모어(Butch Wilmore)와 수니 윌리엄스(Suni Williams)를 귀환시키기 위한 임무
     * NASA는 우주정거장의 승무원을 약 6개월마다 교대하기 때문에 이 비행은 윌모어와 윌리엄스를 위한 빈 좌석을 남겨두고 2월 말에 귀환 예정
     * 보잉의 Starliner 우주선은 추진체 문제와 헬륨 누출로 인해 위험하다고 평가되어 두 명의 우주비행사가 SpaceX 캡슐로 귀환하게 됨
     * 보잉의 첫 번째 유인 비행에 참여한 윌모어와 윌리엄스는 원래 1주일만 우주에 있을 예정이었으나, 귀환이 지연되어 8개월 이상 우주에 머무르게 될 전망

SpaceX와 NASA의 협력

     * NASA는 보잉의 Starliner 대신 SpaceX의 Dragon 캡슐로 승무원 귀환을 계획
     * SpaceX는 NASA 상업 승무원 프로그램의 주요 파트너로, 보잉을 제치고 2020년부터 NASA 우주비행사를 ISS로 보내는 임무를 시작하여 현재까지 10회 이상의 유인 비행을 성공적으로 수행
     * 윌모어와 윌리엄스는 ISS에서 발사를 지켜보며 ""Go Dragon!""이라는 응원을 보냄
     * NASA 우주비행사 윌리엄스는 ISS 지휘관으로 승진하였으며, 고르부노프와 헤이그가 도착한 후 3월부터 ISS에 머물고 있던 다른 승무원들은 귀환할 예정
     * NASA 우주비행사 헤이그는 발사 전 인터뷰에서 인간 우주비행에서는 언제나 변화가 있다고 언급, 이번 변화는 대중에게 더 명확하게 드러났다고 언급
     * 헤이그는 경험을 바탕으로 구조 임무의 지휘를 맡게 되었으며, 6년 전 발사 긴급 상황에서 러시아 우주선의 실패를 극복한 경험이 있음
     * 새내기 우주비행사 제나 카드만과 베테랑 우주비행사 스테파니 윌슨은 이번 비행에서 제외되었으나, 향후 우주 임무를 약속받음

SpaceX의 발사 성공 및 보잉의 어려움

     * 이번 발사는 허리케인 헬렌의 영향으로 지연되었으며, 이는 케이프 커내버럴 우주기지에서 첫 유인 발사였음
     * SpaceX는 과거 위성 및 화물 발사에 사용되던 타이탄 로켓 발사대를 인수하여 유연성을 확대함
     * 보잉은 Starliner의 여러 문제로 고군분투 중이며, 최근 보잉의 국방 및 우주 책임자가 교체됨

GN⁺의 의견

     * 이번 SpaceX의 구조 미션은 우주 탐사에서 협력과 유연성의 중요성을 보여줌. 당초 계획과 다른 상황에서도 NASA와 SpaceX가 신속하게 대응하여 우주비행사들의 안전한 귀환을 도모하는 모습이 인상적임
     * 한편 보잉의 Starliner 문제는 우주선 개발의 어려움과 리스크를 보여줌. 상업용 우주선 개발이 활발해지고 있지만 안전과 신뢰성 확보가 여전히 큰 과제임을 알 수 있음
     * 우주 개발에서 국제 협력의 중요성도 엿보임. 미국과 러시아 우주비행사가 함께 미션을 수행하는 모습은 우주가 인류 공통의 영역임을 보여줌. 향후 달 탐사 등 더 큰 도전에서도 각국의 협력이 필수적일 것으로 보임
     * 앞으로 보잉과 SpaceX의 상업 우주 경쟁이 어떻게 전개될지, 그리고 다른 민간 우주 기업들이 이 경쟁에 어떻게 참여할지 주목할 만함

        Hacker News 의견

     * Falcon 9의 2단계 궤도 이탈 연소에서 이상이 발생했음
          + 페이로드에는 영향이 없었음
          + Falcon 9은 현재 발사 중단 상태임
          + Crew-9의 성공적인 발사 후 2단계는 계획대로 바다에 폐기되었으나 목표 지점 밖에 착수했음
          + 원인을 더 잘 이해한 후 발사를 재개할 예정임
     * SpaceX가 귀환 시 사용할 새로운 우주복을 제작했는지, 아니면 Boeing 우주복을 사용하는지 궁금함
     * SLC-40에서 첫 유인 발사가 순조롭게 진행된 것에 대해 기쁨
          + Crew Dragon 발사에 유연성을 제공하여 LC-39A에서 중요한 Falcon Heavy 발사에 도움을 줄 수 있음
     * 논리적 체조가 모든 관점에서 어떻게 나타나는지 주목할 만함
          + 무엇을 의미하는지는 확실하지 않음
     * 귀환 시 두 사람은 우주에서 8개월 이상을 기록하게 될 것임
          + Boeing의 첫 우주비행사 비행에 서명할 때는 일주일만 떠날 것으로 예상했음
          + 어떤 초과 근무를 기록하고 있을지 궁금함
     * 두 사람이 예상치 못한 과학 연구를 수행하고 있는지에 대한 좋은 링크가 있는지 궁금함
     * Boeing의 엔지니어링 문화에 대한 반영인지 궁금함
          + 이전 기사에서 언급된 댓글을 기억함
     * 최근 Boeing의 일자리 제안을 거절했음
          + 더 이상 실행할 수 없기 때문임
          + 회계사들이 운영하는 완전한 광대 쇼임
     * 8개월 동안 우주에 갇혀 있었던 이야기는 환상적인 이야기임
          + ""내가 8개월 동안 우주에 갇혀 있었던 이야기를 해준 적이 있나요? 아니요?""
     * Elon에게 감사함
"
"https://news.hada.io/topic?id=16943","SQL 팁과 요령팁과 요령

  목차

    포맷팅/가독성

     * 필드를 구분할 때 선행 쉼표 사용
     * WHERE 절에 더미 값 사용
     * 적절한 코드 들여쓰기
     * 복잡한 쿼리를 작성할 때 CTE 고려

    유용한 기능

     * :: 연산자를 사용하여 데이터 타입 변환
     * 안티 조인 활용
     * 윈도우 함수 필터링에 QUALIFY 사용
     * 열 위치로 GROUP BY 사용 가능

    피해야 할 함정

     * NULL 값과 함께 NOT IN 사용 시 주의
     * 계산된 필드 이름 변경하여 모호성 방지
     * 각 열이 어느 테이블에 속하는지 명시
     * 실행 순서 이해
     * 코드에 주석 달기
     * 문서 전체 읽기

  포맷팅/가독성

    필드를 구분할 때 선행 쉼표 사용

     * SELECT 절에서 필드를 구분할 때 선행 쉼표를 사용하여 새로운 열을 명확히 구분할 수 있음
     * 선행 쉼표는 쉼표가 누락되었는지 쉽게 확인할 수 있는 시각적 단서 제공

SELECT
  employee_id,
  employee_name,
  job,
  salary
FROM employees;

    WHERE 절에 더미 값 사용

     * WHERE 절에 더미 값을 사용하여 조건을 동적으로 추가 및 제거할 수 있음

SELECT *
FROM employees
WHERE 1=1 -- 더미 값
  AND job IN ('Clerk', 'Manager')
  AND dept_no != 5;

    적절한 코드 들여쓰기

     * 코드를 들여써서 가독성을 높이고 동료 및 미래의 자신을 위해 코드 이해를 쉽게 함

-- 나쁜 예:
SELECT
  timeslot_date,
  timeslot_channel,
  overnight_fta_share,
  IFF(DATEDIFF(DAY, timeslot_date, CURRENT_DATE()) > 7,
    LAG(overnight_fta_share, 1) OVER (PARTITION BY timeslot_date, timeslot_channel ORDER BY timeslot_activity),
    NULL) AS C7_fta_share,
  IFF(DATEDIFF(DAY, timeslot_date, CURRENT_DATE()) >= 29,
    LAG(overnight_fta_share, 2) OVER (PARTITION BY timeslot_date, timeslot_channel ORDER BY timeslot_activity),
    NULL) AS C28_fta_share
FROM timeslot_data;

-- 좋은 예:
SELECT
  timeslot_date,
  timeslot_channel,
  overnight_fta_share,
  IFF(DATEDIFF(DAY, timeslot_date, CURRENT_DATE()) > 7,
    LAG(overnight_fta_share, 1) OVER (PARTITION BY timeslot_date, timeslot_channel ORDER BY timeslot_activity),
    NULL) AS C7_fta_share,
  IFF(DATEDIFF(DAY, timeslot_date, CURRENT_DATE()) >= 29,
    LAG(overnight_fta_share, 2) OVER (PARTITION BY timeslot_date, timeslot_channel ORDER BY timeslot_activity),
    NULL) AS C28_fta_share
FROM timeslot_data;

    복잡한 쿼리를 작성할 때 CTE 고려

     * 인라인 뷰를 중첩하는 대신 공통 테이블 표현식(CTE)을 사용하여 코드의 가독성과 조직성을 높일 수 있음

-- 인라인 뷰 사용:
SELECT
  vhs.movie,
  vhs.vhs_revenue,
  cs.cinema_revenue
FROM
  (SELECT
    movie_id,
    SUM(ticket_sales) AS cinema_revenue
  FROM tickets
  GROUP BY movie_id) AS cs
INNER JOIN
  (SELECT
    movie,
    movie_id,
    SUM(revenue) AS vhs_revenue
  FROM blockbuster
  GROUP BY movie, movie_id) AS vhs
ON cs.movie_id = vhs.movie_id;

-- CTE 사용:
WITH cinema_sales AS (
  SELECT
    movie_id,
    SUM(ticket_sales) AS cinema_revenue
  FROM tickets
  GROUP BY movie_id
),
vhs_sales AS (
  SELECT
    movie,
    movie_id,
    SUM(revenue) AS vhs_revenue
  FROM blockbuster
  GROUP BY movie, movie_id
)
SELECT
  vhs.movie,
  vhs.vhs_revenue,
  cs.cinema_revenue
FROM cinema_sales AS cs
INNER JOIN vhs_sales AS vhs
ON cs.movie_id = vhs.movie_id;

  유용한 기능

    :: 연산자를 사용하여 데이터 타입 변환

     * 일부 RDBMS에서는 :: 연산자를 사용하여 값을 다른 데이터 타입으로 변환할 수 있음

SELECT CAST('5' AS INTEGER); -- CAST 함수 사용
SELECT '5'::INTEGER; -- :: 구문 사용

    안티 조인 활용

     * 안티 조인은 한 테이블에만 존재하는 행을 반환할 때 매우 유용함
     * 서브쿼리를 사용할 수도 있지만, 일반적으로 안티 조인이 더 빠름

-- 안티 조인:
SELECT
  video_content.*
FROM video_content
LEFT JOIN archive
ON video_content.series_id = archive.series_id
WHERE archive.series_id IS NULL;

-- 서브쿼리:
SELECT
  *
FROM video_content
WHERE series_id NOT IN (SELECT DISTINCT series_id FROM archive);

-- 상관 서브쿼리:
SELECT
  *
FROM video_content
WHERE NOT EXISTS (
  SELECT 1
  FROM archive a
  WHERE a.series_id = vc.series_id
);

-- EXCEPT:
SELECT series_id
FROM video_content
EXCEPT
SELECT series_id
FROM archive;

    윈도우 함수 필터링에 QUALIFY 사용

     * QUALIFY를 사용하여 윈도우 함수의 결과를 필터링할 수 있음
     * 코드 라인을 줄이는 데 유용함

-- QUALIFY 사용:
SELECT
  product,
  market,
  SUM(revenue) AS market_revenue
FROM sales
GROUP BY product, market
QUALIFY DENSE_RANK() OVER (PARTITION BY product ORDER BY SUM(revenue) DESC) <= 10
ORDER BY product, market_revenue;

-- QUALIFY 없이:
SELECT
  product,
  market,
  market_revenue
FROM (
  SELECT
    product,
    market,
    SUM(revenue) AS market_revenue,
    DENSE_RANK() OVER (PARTITION BY product ORDER BY SUM(revenue) DESC) AS market_rank
  FROM sales
  GROUP BY product, market
)
WHERE market_rank <= 10
ORDER BY product, market_revenue;

    열 위치로 GROUP BY 사용 가능

     * 열 이름 대신 열 위치를 사용하여 GROUP BY 또는 ORDER BY 할 수 있음
     * 임시 쿼리에는 유용하지만, 프로덕션 코드에서는 항상 열 이름을 참조해야 함

SELECT
  dept_no,
  SUM(salary) AS dept_salary
FROM employees
GROUP BY 1 -- dept_no는 SELECT 절의 첫 번째 열
ORDER BY 2 DESC;

  피해야 할 함정

    NULL 값과 함께 NOT IN 사용 시 주의

     * NOT IN은 NULL 값이 있는 경우 작동하지 않음
     * 대신 NOT EXISTS를 사용해야 함

INSERT INTO departments (id)
VALUES (1), (2), (NULL);

-- NULL 값 때문에 작동하지 않음
SELECT *
FROM employees
WHERE department_id NOT IN (SELECT DISTINCT id FROM departments);

-- 해결 방법
SELECT *
FROM employees e
WHERE NOT EXISTS (
  SELECT 1
  FROM departments d
  WHERE d.id = e.department_id
);

    계산된 필드 이름 변경하여 모호성 방지

     * 계산된 필드를 기존 열 이름으로 변경하면 예기치 않은 동작이 발생할 수 있음

INSERT INTO products (product, revenue)
VALUES ('Shark', 100), ('Robot', 150), ('Alien', 90);

-- 윈도우 함수가 'Robot' 제품을 1위로 랭크함
SELECT
  product,
  CASE product WHEN 'Robot' THEN 0 ELSE revenue END AS revenue,
  RANK() OVER (ORDER BY revenue DESC)
FROM products;

    각 열이 어느 테이블에 속하는지 명시

     * 복잡한 쿼리에서 각 열이 어느 테이블에 속하는지 명시하면 문제를 추적하기 쉬움

SELECT
  vc.video_id,
  vc.series_name,
  metadata.season,
  metadata.episode_number
FROM video_content AS vc
INNER JOIN video_metadata AS metadata
ON vc.video_id = metadata.video_id;

    실행 순서 이해

     * SQL을 배우는 사람에게 가장 중요한 조언은 실행 순서를 이해하는 것임
     * 실행 순서를 이해하면 쿼리 작성 방식이 완전히 바뀜

    코드에 주석 달기

     * 코드 작성 시 이유를 설명하는 주석을 달아야 함
     * 동료와 미래의 자신이 감사할 것임

SELECT
  video_content.*
FROM video_content
LEFT JOIN archive -- 새로운 CMS는 아카이브 비디오 형식을 처리할 수 없음
ON video_content.series_id = archive.series_id
WHERE archive.series_id IS NULL;

    문서 전체 읽기

     * 문서를 전체적으로 읽으면 예상치 못한 문제를 피할 수 있음
     * 문서를 읽는 데 몇 분이 걸리지 않으며, 예상치 못한 문제를 해결하는 데 도움이 됨

-- 문서를 더 읽었다면 NULL 문제를 해결할 수 있었음
SELECT COALESCE(GREATEST(signup_date, consumption_date), signup_date, consumption_date);

-- GREATEST_IGNORE_NULLS 함수 사용 가능
SELECT GREATEST_IGNORE_NULLS(signup_date, consumption_date);

  GN⁺의 정리

     * 이 글은 SQL을 더 효율적이고 가독성 있게 작성하는 다양한 팁과 트릭을 제공함
     * SQL을 처음 배우는 사람이나 경험이 있는 데이터 분석가 모두에게 유용한 정보가 많음
     * 특히 복잡한 쿼리를 작성할 때 CTE 사용, 안티 조인 활용, QUALIFY 사용 등은 실무에서 큰 도움이 될 것임
     * SQL의 실행 순서를 이해하고, 코드에 주석을 달며, 문서를 꼼꼼히 읽는 습관을 들이는 것이 중요함
     * 비슷한 기능을 가진 다른 도구로는 PostgreSQL, MySQL, Oracle 등이 있음

   선행 쉼표가 이 게시물에는 전부 후행 쉼표로 작성되어있네요. 원문에는 선행으로 입력되어있습니다.
-- Good:
SELECT
timeslot_date
, timeslot_channel
, overnight_fta_share
, IFF(DATEDIFF(DAY, timeslot_date, CURRENT_DATE()) > 7, -- First argument of IFF.
        LAG(overnight_fta_share, 1) OVER (PARTITION BY timeslot_date, timeslot_channel ORDER BY timeslot_activity), -- Second argument of IFF.
                NULL) AS C7_fta_share -- Third argument of IFF.
, IFF(DATEDIFF(DAY, timeslot_date, CURRENT_DATE()) >= 29,
                LAG(overnight_fta_share, 2) OVER (PARTITION BY timeslot_date, timeslot_channel ORDER BY timeslot_activity),
                        NULL) AS C28_fta_share
FROM timeslot_data
;

        Hacker News 의견

     * DB 서버를 잘 이해하고 쿼리 계획을 자주 확인할 필요성
          + EXISTS가 IN보다 빠른 경우가 많음
          + NOT EXISTS와 EXCEPT가 NULL 값 처리에서 다르게 동작함
          + 테이블 조인 대신 서브쿼리 컬럼 사용 권장
          + 테이블 스캔을 피하고 인덱스를 추가해야 함
          + 표현식 필터링 시 계산된 컬럼과 인덱스 사용 가능
          + UNION ALL이 OR보다 빠를 수 있음
          + 서브쿼리 JOIN을 통해 필터링 순서 강제 가능
     * 복잡한 저장 프로시저 작업 팁
          + 영구 테이블을 임시 테이블로 복사하고 필요한 행만 필터링
          + 임시 테이블을 조작
          + 트랜잭션 내에서 영구 테이블 업데이트, 오류 시 롤백
          + 원격 테이블 작업 시 주의 필요, 임시 테이블로 복사 후 작업 권장
          + 쿼리 계획이 혼란스러울 수 있어 작은 단계로 나누어 작업
          + 쿼리 계획을 항상 확인
     * 코드 가독성 관련 의견
          + 첫 두 예시는 가독성을 희생하고 작성 용이성을 높임
          + 마지막 예시는 들여쓰기가 큰 효과를 주지 못함
     * SQL의 FROM-first와 파이핑 문법 사용 제안
          + Kusto query language 사용 경험이 큰 발전임
     * Anti Join 관련 팁
          + EXISTS 사용 권장, 조건 기반 서브쿼리에서 행 존재 여부 확인 시 유리함
     * SELECT 문에서 선행 쉼표 사용 장점
          + 개별 라인 주석 처리 가능
          + 코드 들여쓰기로 가독성 향상
     * MSSQL에서 주석 사용 시 -- 대신 /* */ 사용 권장
          + 쿼리 저장소가 줄 바꿈 없이 쿼리를 저장하기 때문
     * 윈도우 함수 사용 권장
     * WHERE 절에서 1=1 사용에 대한 논란
     * AI2sql 소개
          + 평문 영어 프롬프트로 SQL 쿼리 생성 가능
          + 복잡한 쿼리 작성 시 유용함
"
"https://news.hada.io/topic?id=17056","HTML의 maxlength 속성을 사용하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HTML의 maxlength 속성을 사용하지 마세요

문제점

     * maxlength 속성은 입력을 중간에 잘라버리지만 사용자에게 아무런 피드백을 제공하지 않음.
     * 사용자의 입장에서 입력이 중간에 멈추면 UI에 버그가 있다고 느낄 수 있음.
     * 스크린 리더 사용자(시각 장애인)는 입력 제한에 도달했을 때 이를 알 수 없음.
     * 많은 사용자가 입력 시 화면을 보지 않고 키보드를 보기 때문에, 입력이 잘려나가는 것을 인지하지 못할 수 있음.
     * 긴 글을 복사해 붙여넣을 때 내용이 중간에 잘려나가 잘못된 정보가 저장될 수 있음.

해결책

     * maxlength로 입력을 제한하지 않고, 입력을 모두 받을 수 있도록 하되 제한을 초과한 경우 오류 메시지를 표시하여 사용자가 수정할 수 있게 하는 것이 좋음.
     * 가능하다면 입력 제한을 넉넉하게 설정하는 것이 좋음.
     * 남은 문자 수를 표시하여 사용자가 입력 제한을 인지하고 적절히 조절할 수 있도록 하는 것이 좋음.
"
"https://news.hada.io/topic?id=16956","캘리포니아, 새로운 법에 따라 원클릭 구독 취소가 의무화됨 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    캘리포니아, 새로운 법에 따라 원클릭 구독 취소가 의무화됨

     * 캘리포니아의 새로운 법률에 따라 소비자는 스트리밍 서비스 및 유사 상품의 자동 갱신에 등록할 때 해당 서비스를 더 쉽게 해지할 수 있게 됨
     * 캘리포니아는 이미 전국에서 가장 엄격한 구독 취소 법률을 가지고 있었으나, 기업들은 구독 취소 시 여러 링크를 클릭하거나, 전화를 걸어 오래 대기해야 하는 등의 편법을 사용했음
     * 이제 기업이 원클릭 구매를 통해 자동 구독 갱신 서비스를 제공할 경우, 고객에게 ""동일한 원클릭 방식으로 구독을 취소할 수 있는 방법을 제공""해야 함
     * 새 법안은 2025년 1월 1일부터 발효되며, 7월 이후 체결된 구매 및 계약에 적용됨

법안 제정의 배경과 의의

     * 법안 공동 작성자인 Pilar Schiavo 의원은 구독 비용이 누적되는 시기에 캘리포니아 주민들이 돈을 절약하는 데 도움이 되는 것이 이 법안의 목표라고 밝힘
     * 소비자 옹호 단체인 캘리포니아 소비자 연맹(CFC)의 Robert Herrell 상임이사는 구독에 가입하는 것만큼 구독을 해지하는 것도 간단해야 한다고 강조함
     * 이 법안은 디지털 제품을 통해 원클릭 도구를 사용하여 구독 기반 서비스를 구매할 수 있는 기업에 상당한 영향을 미칠 것으로 예상됨

   adobe가 생각나네요 해지 절차뿐만 아니라 구독 취소 수수료라는 것도 만들어서 제가 격어본 구독중에 제일 악질입니다. 국내도입이 시급합니다 ㄷㄷ

   기만적 패턴으로 가입을 쉽게 해지는 어렵게 하는 경우가 많았는데, 이 법안으로 도입으로 그런 부분이 많이 해결되길 기원합니다.

   국가가 이런 일을 할 필요가 있다는 생각이 드네요!! 좋은 법안 같네요

   와 이런 법안 좋네요.
"
"https://news.hada.io/topic?id=17044","시각 및 음향 없이 비밀리에 즐길 수 있는 게임 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     시각 및 음향 없이 비밀리에 즐길 수 있는 게임 개발

     * 앱 설명
          + Tik! 앱은 사용자가 주위의 지루한 상황에서도 휴대폰을 들여다보지 않고도 시간을 보낼 수 있도록 도와주는 게임임
          + Rohan Sachdeva가 개발한 이 앱은 iPhone에서만 사용할 수 있으며, 가격은 $0.95임
     * 새로운 기능
          + 2024년 10월 2일에 버전 1.1이 출시되었으며, 소소한 수정이 이루어졌음
     * 앱 개인정보 보호
          + 개발자는 이 앱에서 데이터를 수집하지 않음
          + 개인정보 보호 관행은 사용자의 기능 사용 방식이나 나이에 따라 다를 수 있음
     * 정보
          + 판매자: Rohan Sachdeva
          + 크기: 367.6 KB
          + 카테고리: 게임
          + 호환성: iOS 14.0 이상이 필요한 iPhone 및 iPod touch
          + 언어: 영어
          + 연령 등급: 4+
          + 가격: $0.95
          + 가족 공유 기능을 통해 최대 6명의 가족 구성원이 이 앱을 사용할 수 있음
     * GN⁺의 정리
          + Tik! 앱은 지루한 상황에서도 휴대폰을 보지 않고 시간을 보낼 수 있도록 도와주는 게임으로, 사용자에게 새로운 경험을 제공함
          + 개인정보를 수집하지 않는 점에서 사용자에게 안전한 환경을 제공함
          + 유사한 기능을 가진 다른 앱으로는 'Focus Bear Pomodoro Timer'와 같은 생산성 앱이 있음
          + 이 앱은 특히 공공장소에서 휴대폰 사용을 자제하고자 하는 사용자에게 유용할 수 있음

        Hacker News 의견

     * 게임을 구매하고 플레이했는데, 83번 시도 중 12번 성공했으며 최대 2번 연속 성공했음. 시각적, 청각적 도움 없이 정확한 리듬을 맞추기 어려운 게임이며, 오차에 대해 매우 엄격함
          + 제안 사항: 기본 리듬 설정을 돕기 위해 시작 시 4번의 일정한 간격의 틱 추가 옵션
          + 작은 흰 점을 눌러 메뉴로 돌아가 진행 상황을 확인할 수 있는 기능
          + 예시와 유사한 리듬을 시각화하거나 막혔을 때 건너뛸 수 있는 방법
          + 일부 리듬이 약간 불균형한 템포를 가짐. 틱의 지속 시간이 템포 생성 시 고려되는지 궁금함
          + 전반적으로 흥미로운 게임이며 잘 만들어졌음
     * App Store 목록의 첫 번째 ""화면"" 이미지에서 ""you are"" 대신 ""you’re"" 사용 필요
     * 생략 부호는 항상 세 개의 점 ""…""을 사용해야 하며, 두 개의 점은 잘못된 사용임
     * ""시각 장애인을 위한 저글링""이라는 모바일 게임 아이디어가 있음. 사용자가 공을 잡고 던지는 동작을 소리와 햅틱 피드백으로 제공
          + 웹 개발자라서 만들 기술이 없지만, 누군가 만들고 싶다면 아이디어를 공유함
     * 화면을 보면 멀미를 느끼는 사람들을 위한 게임이 멋지다고 생각함. 시각 장애인을 위한 게임에 대한 더 많은 제안을 원함
          + Android, 특히 Kindle Fire [Kids+] 출시 알림을 어디서 받을 수 있는지 궁금함
     * 신기해서 구매했으며, 쉬운 결정이었음
          + 첫 번째 레벨에서도 꽤 어려움. 쉬운 2-3 비트 패턴으로 시작하는 것도 좋을 것 같음. 난이도 조절 기능이 있으면 좋겠음
          + 난이도가 햅틱 엔진의 강도에서 오는 것일 수도 있지만, 이를 쉽게 변경하는 방법은 잘 모르겠음 (설정 앱 어딘가에 있을 것 같음)
     * 모스 부호를 추가하면 클래식 텍스트 어드벤처 게임을 할 수 있을 것 같음
          + iPhone이 없지만, 화면을 끈 상태에서 볼륨 버튼을 눌러서도 플레이할 수 있는지 궁금함
     * Apple Watch로 이식할 가능성이 있는지 궁금함. 그런 게임을 정말 원함
          + 리듬 게임을 좋아하며, 꽤 재미있음
     * 앱 스토어에서 검색하기 어려웠음 - 'tik', 'tik game' (느낌표 포함)으로는 찾을 수 없었지만, 'tik! haptic'으로는 찾을 수 있었음
     * 사람들이 주머니에 휴대폰을 넣고 계속해서 탭하는 모습을 상상함. 무례해 보이지 않으려는 목표가 역효과를 낼 수도 있음
     * 시각 장애인에게도 재미있을 수 있음. 비시각 장애인과 비슷한 경험을 제공할 수 있음
"
"https://news.hada.io/topic?id=17062","WP Engine Inc. 대 Automattic Inc. 및 매튜 찰스 멀렌웨그 소송 [PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         WP Engine Inc. 대 Automattic Inc. 및 매튜 찰스 멀렌웨그 소송 [PDF]
"
"https://news.hada.io/topic?id=16950","PostgreSQL 17 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            PostgreSQL 17 출시

     * PostgreSQL 17은 주요 성능 향상, 메모리 관리 개선, 저장소 접근 최적화, 고동시성 작업 부하 개선, 대량 로딩 및 내보내기 속도 향상, 인덱스 쿼리 실행 개선 등을 포함

시스템 전반의 성능 향상

     * 정상적인 작업에 필수적인 PostgreSQL vacuum 프로세스의 내부 메모리 구조를 개선하여 메모리 사용량을 최대 20배 줄임
          + vacuum 속도 향상 및 공유 리소스 사용 감소로 워크로드에 더 많은 리소스 사용 가능
     * I/O 계층의 성능을 지속적으로 개선함
          + Write-Ahead Log(WAL) 처리 개선으로 높은 동시성 워크로드에서 최대 2배 더 나은 쓰기 처리량을 보임
          + 새로운 스트리밍 I/O 인터페이스로 순차 스캔(테이블에서 모든 데이터 읽기) 속도와 ANALYZE 명령의 실행 계획 통계 업데이트 속도를 높임
     * 쿼리 실행에도 성능 향상 효과를 확장함
          + B-tree 인덱스(PostgreSQL의 기본 인덱스 방법)를 사용하는 IN 절이 포함된 쿼리의 성능을 개선함
          + BRIN 인덱스에서 병렬 빌드를 지원함
     * 쿼리 계획 수립을 위한 여러 개선 사항 포함
          + NOT NULL 제약 조건에 대한 최적화
          + 공통 테이블 표현식(WITH 쿼리) 처리 개선
     * bit_count 함수에 AVX-512를 사용하는 등 계산 가속을 위한 SIMD(Single Instruction/Multiple Data) 지원 확대

강력한 개발자 경험을 더 확장

     * PostgreSQL은 JSON 지원을 추가한 최초의 관계형 데이터베이스였음 (2012)
     * PostgreSQL 17에서는 SQL/JSON 표준 구현을 더욱 확장함
          + JSON_TABLE을 통해 JSON 데이터를 표준 PostgreSQL 테이블로 변환 가능
          + SQL/JSON 생성자(JSON, JSON_SCALAR, JSON_SERIALIZE) 및 쿼리 함수(JSON_EXISTS, JSON_QUERY, JSON_VALUE) 지원
          + JSON 데이터를 PostgreSQL 기본 데이터 타입(숫자, 불리언, 문자열, 날짜/시간)으로 변환하는데 중점을 둔 jsonpath 표현식 추가
     * MERGE 명령에 RETURNING 절과 뷰 업데이트 기능을 추가함
     * 대량 로딩 및 데이터 내보내기 기능 향상
          + COPY 명령을 사용하여 큰 행을 내보낼 때 최대 2배의 성능 개선
          + 소스와 대상 인코딩이 일치할 때 COPY 성능 개선
          + 삽입 오류가 발생해도 가져오기를 계속할 수 있는 ON_ERROR 옵션 추가
     * 파티션 및 원격 PostgreSQL 인스턴스에 분산된 데이터 관리 기능 확장
          + 파티션 테이블에서 ID 열과 제외 제약 조건 사용 지원
          + postgres_fdw를 사용하여 EXISTS 및 IN 하위 쿼리를 원격 서버로 푸시할 수 있음
     * 내장된 플랫폼 독립적이고 불변인 데이터 정렬 제공자 포함
          + C 데이터 정렬과 유사한 정렬 의미론을 제공하지만 SQL_ASCII 대신 UTF-8 인코딩 사용
          + 이 새로운 데이터 정렬 제공자를 사용하면 텍스트 기반 쿼리가 PostgreSQL 실행 위치에 관계없이 동일한 정렬 결과를 반환함

고가용성 및 주요 버전 업그레이드를 위한 논리적 복제 개선

     * 논리적 복제는 실시간으로 데이터를 스트리밍하는 데 사용됨
     * 이전 버전에서는 주요 버전 업그레이드 시 논리적 복제 슬롯을 삭제해야 했고, 이로 인해 업그레이드 후 구독자에게 데이터를 다시 동기화해야 했음
     * PostgreSQL 17부터는 논리적 복제 슬롯을 삭제할 필요가 없어 업그레이드 프로세스가 단순해짐
     * 논리적 복제에 대한 장애 조치 제어 기능을 포함하여 고가용성 환경에서 더욱 탄력적으로 배포할 수 있음
     * pg_createsubscriber 명령줄 도구를 도입하여 물리적 복제본을 새로운 논리적 복제본으로 변환할 수 있음

보안 및 운영 관리를 위한 더 많은 옵션

     * PostgreSQL 17은 데이터베이스 시스템의 전반적인 수명 주기를 사용자가 관리하는 방법을 더욱 확장함
     * ALPN을 사용할 때 직접 TLS 핸드셰이크를 수행할 수 있는 sslnegotiation이라는 새로운 TLS 옵션 추가
     * 유지 관리 작업을 수행할 수 있는 권한을 부여하는 pg_maintain 사전 정의 역할 추가
     * PostgreSQL에 포함된 백업 유틸리티인 pg_basebackup이 이제 증분 백업을 지원하고 전체 백업을 재구성하기 위한 pg_combinebackup 유틸리티를 추가함
     * pg_dump에 덤프 파일을 생성할 때 포함할 객체를 선택할 수 있는 --filter라는 새로운 옵션이 포함됨
     * 모니터링 및 분석 기능 향상
          + EXPLAIN에서 로컬 I/O 블록 읽기 및 쓰기에 소요된 시간을 표시함
          + SERIALIZE 및 MEMORY라는 두 가지 새로운 옵션 포함: 네트워크 전송을 위한 데이터 변환에 소요된 시간과 사용된 메모리 양을 확인하는 데 유용함
     * 인덱스 정리 진행 상황을 보고함
     * pg_wait_events 시스템 뷰를 추가하여 pg_stat_activity와 결합하면 활성 세션이 대기하는 이유에 대한 인사이트를 제공함

        Hacker News 의견

     * PostgreSQL 17의 새로운 릴리스에 대한 축하와 함께 여러 개선 사항 언급
          + 진공 작업의 메모리 구조 개선으로 메모리 사용량 최대 20배 감소
          + 백업 유틸리티 pg_basebackup의 증분 백업 지원 및 pg_combinebackup 유틸리티 추가
          + 외부 데이터 래퍼(FDW)의 개선으로 원격 서버에서 EXISTS 및 IN 서브쿼리 처리 가능
     * JSON 기능의 유용성에 대한 의견
          + 관계형 데이터베이스에서 JSON 기능의 유용성 강조
          + 데이터에서 JSON을 생성할 수 있는 기능의 중요성 언급
          + JSON_TABLE 기능을 배우고 싶다는 기대감 표출
     * JSON_TABLE 기능의 활용 경험 공유
          + JSON 응답을 jsonb 열에 저장하고 뷰를 작성해 파싱하는 방식의 유용성 강조
          + 새로운 PostgreSQL 기능 문서에서 이 방식을 확인하고 기쁨을 느낌
     * PostgreSQL 17의 성능 향상 및 UX 기능 개선 언급
          + 파티셔닝된 테이블에서 ID 열 및 배제 제약 조건 지원
          + 플랫폼 독립적이고 불변적인 정렬 제공자 추가로 텍스트 기반 쿼리의 일관된 정렬 결과 보장
     * 변경 로그에 대한 인상
          + UUIDv7 PR이 포함되지 않아 아쉬움
     * 오픈 소스 소프트웨어에 대한 신뢰 문제로 Oracle에서 MSSQL로 전환한 경험 공유
          + ""비즈니스 소프트웨어에 오픈 소스를 신뢰할 수 없다""는 상사의 주장
     * Postgres의 지속적인 개선에 대한 감사와 Incremental View Maintenance(IVM) 확장 기능의 정식 지원 희망
     * PostgreSQL의 주요 버전 업그레이드 지원에 대한 기대
     * Postgres의 시스템 버전 테이블 도입 희망
     * Postgres의 JSON 통합 개선이 새로운 웹 프레임워크 패러다임을 가능하게 할 것이라는 기대
"
"https://news.hada.io/topic?id=17043","타인의 왕국에 성을 짓지 말라 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        타인의 왕국에 성을 짓지 말라 (2021)

다른 사람의 왕국에 성을 짓지 말라

     * 최근 몇 달 동안 몇몇 대형 소셜 미디어 사이트가 이용 약관을 변경하거나 의심스러운 유료 계획을 도입하여 콘텐츠 제작자들을 당황하게 했음.
     * 예를 들어, Twitch는 스트리머가 더 많은 시청자를 얻기 위해 비용을 지불할 수 있는 ""Boost"" 프로그램을 도입했음.
     * OnlyFans는 거의 포르노를 금지할 뻔했으며, 이는 콘텐츠 제작자들에게 큰 손실을 초래할 뻔했음.

  자신의 땅에 성을 지어라

     * 자신의 웹사이트, 블로그, 메일링 리스트 등 자신이 소유한 플랫폼에 집중해야 함.
     * Mailchimp나 GoDaddy 같은 호스팅 플랫폼은 단순한 호스팅 제공자일 뿐이며, 필요 시 다른 플랫폼으로 쉽게 이전할 수 있음.

  다른 왕국을 이용하라

     * TikTok과 같은 인기 있는 소셜 미디어 플랫폼을 최대한 활용하되, 그곳에 의존하지 말고 자신의 플랫폼으로 팔로워를 유도해야 함.
     * 항상 행동을 유도하는 메시지를 포함하여 팔로워를 자신의 왕국으로 끌어들이는 것이 중요함.

  사람들을 자신의 왕국으로 이동시켜라

     * 다른 소셜 미디어 플랫폼에서의 활동을 자신의 플랫폼으로 연결해야 함.
     * 예를 들어, YouTube에서 바이럴이 된 후 Discord나 Twitter로 유도하는 대신 자신의 웹사이트로 유도해야 함.

  성이 내일이라도 폐쇄될 수 있다고 생각하라

     * Twitter나 YouTube와 같은 플랫폼에만 의존하지 말고, 항상 팔로워를 자신의 플랫폼으로 유도해야 함.
     * 경쟁 플랫폼에서 팔로워를 자신의 플랫폼으로 끌어들이는 것이 중요함.

  새로운 왕국에 의심을 가져라

     * 새로운 소셜 미디어 플랫폼은 초기에는 많은 가시성을 제공하지만, 결국에는 수익을 추구하게 됨.
     * TikTok과 Discord는 현재 많은 트래픽을 제공하지만, 장기적으로는 변화가 있을 수 있음.

  자신의 왕국으로 돌아갈 이유를 제공하라

     * 소셜 미디어에서의 활동을 통해 자신의 플랫폼으로 유도하는 다양한 방법을 사용해야 함.
     * 예를 들어, 메일링 리스트 가입을 유도하거나, 웹사이트에서 독점 콘텐츠를 제공하는 등의 방법이 있음.

GN⁺의 정리

     * 이 글은 콘텐츠 제작자들이 소셜 미디어 플랫폼에 의존하지 않고, 자신이 소유한 플랫폼을 구축하는 것이 중요하다는 점을 강조함.
     * 소셜 미디어 플랫폼은 언제든지 변할 수 있으며, 이에 대비해 자신의 플랫폼으로 팔로워를 유도하는 전략이 필요함.
     * TikTok, Discord와 같은 새로운 플랫폼은 초기에는 많은 가시성을 제공하지만, 장기적으로는 변화가 있을 수 있음.
     * 콘텐츠 제작자들이 자신의 플랫폼을 강화하고, 소셜 미디어를 전략적으로 활용하는 방법을 제시함.

        Hacker News 의견

     * ""다른 사람의 왕국""의 크기 분포가 문제임. 이는 규제, 정치 및 경제적 선택에 따라 결정됨. 디지털 세계가 신봉건제로 불리는 이유가 있음. 해결책은 이러한 왕국들이 영구적으로 열린 문과 도로를 만들어 기회를 늘리는 것임. 사람들이 디지털 봉신에서 디지털 시민으로 변할 때, 우리는 현재의 중세에서 벗어날 수 있음.
     * 다른 사람의 왕국에서 성을 짓고 있는 것과 같음. 자신의 웹사이트에 게시하더라도 도메인 등록자, 호스팅 제공자, 이메일 제공자 등이 새로운 왕이 됨. 인터넷은 탈중앙화되지 않았고, 완전히 독립적인 사이트를 만드는 것은 불가능함. 이는 긍정적인 면도 있음. 그렇지 않으면 불법 콘텐츠의 안전한 피난처가 될 수 있었음.
     * 유튜브 크리에이터라면 자체 비디오 호스팅을 설정해야 하는지 의문임. 시청자들이 얼마나 이동할지 불확실함. 이 조언은 블로그와 메일링 리스트에는 유용하지만 다른 콘텐츠에는 적용하기 어려움.
     * 소셜 미디어 플랫폼은 자신의 정체성과 사회적 그래프를 소유할 수 있게 해야 함. 공개 키 암호화, 자체 호스팅 서버, 오픈 프로토콜을 통해 팔로워들이 어떤 앱을 사용하든지 팔로우할 수 있음. nostr에서 이러한 것을 구축 중임. 이는 주권적 소셜 미디어에 더 적합함.
     * 흥미로운 기사지만 한쪽 면만 다룸. 자체적으로 구축하면 가시성과 사용 용이성을 얻기 어려움. 플랫폼에서 같은 일을 하는 사람보다 트래픽이 적음. 사이트로 유도하는 것은 잘 작동하지 않음. 사이트 사용을 위해 계정을 만들어야 하는 것은 높은 장벽임.
     * 이 조언은 2015년 이전 웹 기업가들의 조언과 유사함. 공유지 시스템이지만, 사용자들은 자기 표현이나 사회화에 관심이 있어 경제적 가치는 중요하지 않음.
     * 문제는 모든 곳이 이미 다른 사람의 왕국이라는 것임. 이 조언은 ""성을 짓지 말라""는 것과 같음.
     * 2021년의 추가 논의가 있었음.
     * 우리는 모두 TSMC와 ASML의 왕국에 성을 지었음.
     * 사람들이 언제든지 접근할 수 있는 장소를 구축해야 함. 만약 그들이 만난 장소가 미래에 접근 불가능해질 경우를 대비해야 함.
"
"https://news.hada.io/topic?id=17008","Meta와 Apple: 같은 게임, 다른 규칙 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Meta와 Apple: 같은 게임, 다른 규칙

     * Meta와 Apple은 스마트폰을 대체하거나 보완할 수 있는 새로운 필수 기술 기기를 만들기 위한 경쟁에 참여 중
          + 스마트폰의 모든 장점을 가져와 당신의 비전에 겹쳐서 온 세상을 스마트폰 캔버스로 만드는 웨어러블 증강 현실 기기를 만드는 것

Apple의 첫 번째 움직임: Vision Pro

     * Apple은 올해 초 Vision Pro를 출시함. 이는 제한된 방식으로 증강 현실을 에뮬레이트하는 헤드셋
     * Vision Pro는 완성된 제품이지만 가격이 매우 비싸고, 콘텐츠 및 소프트웨어가 제한적임
     * Apple은 '공간 컴퓨팅(spatial computing)'에 관심이 있음을 보여주며, 이는 더 광범위한 사용성을 가진 제품으로 발전할 가능성을 암시함

Meta의 대응: Quest와 AR 안경 프로토타입 Orion

     * Meta는 오랜 시간 VR 헤드셋 시장의 선두주자였으며, Apple과 경쟁하는 방식으로 제품을 '생산성'에 초점을 맞추고 있음
     * 새로 출시된 Meta Quest 3S는 300달러로 매력적인 가격을 자랑하며, 가격 대비 성능이 뛰어남
     * 하지만 Meta Quest 3S보다는 AR 안경 프로토타입'Orion'이 주목받고 있음
          + Orion은 현재는 상용화가 불가능하며, 현재 약 10,000달러로 추정됨
          + 이는 기술 시연 제품으로, 출시 계획은 없지만 2027년에서 2029년 사이에 비슷한 제품이 출시될 가능성이 있음
     * Orion은 Apple Vision Pro보다 더 발전된 기술을 보여주었으며, 향후 AR 안경의 가능성을 시사함

Meta와 Apple의 서로 다른 전략

     * Apple은 비공개로 제품 개발을 진행하며, 그동안 Meta는 기술 시연을 통해 미디어의 관심을 얻고 있음
     * Bloomberg에 따르면 Apple도 Orion과 유사한 AR 안경을 개발 중이었으나, 기술적 한계로 출시를 연기하고 대신 Vision Pro에 역량을 집중하기로 함
     * Meta와 Apple 모두 AR 안경이 미래의 컴퓨팅 기술에서 중요한 역할을 할 것으로 판단하고 있음
     * 그러나 아직 기술적, 가격적 한계가 있어 대중화되기까지는 시간이 걸릴 것으로 보임
     * 저항감을 극복하고 제품 카테고리를 히트시키기 위해서는 2030년대 중반까지 걸릴 것으로 예상됨

Meta와 Apple의 차이

     * Meta와 Apple은 모두 AR 안경을 개발 중이지만 접근 방식이 다름
     * Meta는 아직 출시되지 않은 제품을 공개적으로 시연하며 관심을 끌고 있음
     * 반면 Apple은 공개하지 않은 제품에 대해 절대 언급하지 않는 정책을 고수하고 있음
     * 누가 더 앞서 있는지는 알기 어려움. Apple이 Orion과 같은 제품을 개발 중이라도 공개하지 않을 것이기 때문

GN⁺의 의견

     * Apple과 Meta의 경쟁은 차세대 컴퓨팅 기술의 미래를 결정지을 수 있는 중요한 경기임. 특히 증강 현실(AR)과 혼합 현실(MR) 기기는 스마트폰 이후의 기술로 주목받고 있음
     * Meta는 제품을 공개하고 미디어의 관심을 얻으려는 전략을 사용하는 반면, Apple은 비밀스럽게 기술을 발전시키고 있음. 이 두 가지 전략의 장단점은 시간이 지나면서 더욱 명확해질 것
     * Meta의 Orion 시연은 AR 안경의 가능성을 보여주었으며, 생각보다 빨리 상용화될 수 있음을 시사함. 그러나 아직 기술적, 가격적 한계가 있어 대중화되기까지는 시간이 걸릴 것으로 보임
     * 만약 AR 기술이 성공한다면, 이는 단순한 엔터테인먼트뿐만 아니라 생산성과 일상생활에 많은 변화를 가져올 가능성이 있음
     * AR 안경은 게임, 교육, 원격 협업 등 다양한 분야에서 활용될 수 있을 것으로 기대되지만, 기존의 스마트폰이나 컴퓨터를 완전히 대체하기는 어려울 것으로 보임. 보완재로서의 역할이 더 클 것임
     * Microsoft의 HoloLens와 같은 경쟁 제품도 존재하지만, Apple과 Meta는 더 많은 자원과 영향력을 바탕으로 해당 시장을 선도할 가능성이 큼
"
"https://news.hada.io/topic?id=16947","OpenAI, 비영리 지배구조 철회 및 Sam Altman에게 지분 부여 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              OpenAI, 비영리 지배구조 철회 및 Sam Altman에게 지분 부여 예정

     * ChatGPT 제작사 OpenAI는 핵심 사업을 이익 추구 공익법인으로 재편하여 비영리 이사회의 통제에서 벗어나는 계획을 추진 중임
     * OpenAI 비영리는 계속 존재하며 영리법인의 소수 지분을 보유할 예정임. 이는 회사의 AI 위험 관리 방식에도 영향을 미칠 수 있음
     * 최고경영자 Sam Altman은 영리법인에서 처음으로 지분을 받게 되며, 구조조정 후 기업가치는 1,500억 달러에 이를 것으로 추정됨. 투자자 수익 제한도 철폐 추진 중임
     * OpenAI 대변인은 ""우리는 모든 사람에게 이로운 AI 구축에 주력하고 있으며, 사명 달성에 최적화되도록 이사회와 협력하고 있다. 비영리는 우리 사명의 핵심이며 계속 존재할 것""이라고 밝힘

OpenAI 내부 지배구조 변화와 리더십 교체

     * 주요 AI 기업 중 하나인 OpenAI 내부에서 일어나고 있는 중대한 지배구조 변화를 보여주는 세부사항임
     * 변호사 및 주주들과 함께 제안된 기업 구조를 검토 중이며, 구조조정 완료 시점은 아직 불확실함
     * OpenAI의 최고기술책임자(CTO) Mira Murati는 수요일 갑작스럽게 퇴사를 발표했으며, 사장 Greg Brockman도 휴직 중임

OpenAI의 발자취와 ChatGPT 성공

     * 2015년 비영리 AI 연구 단체로 설립된 OpenAI는 2019년 비영리 자회사로 영리법인 OpenAI LP를 추가하고 마이크로소프트로부터 자금을 확보하여 연구에 투자함
     * 2022년 말 인간과 유사한 응답을 내놓는 생성형 AI 앱 ChatGPT를 출시하면서 전 세계적인 관심을 끌었으며, 주간 활성 사용자 2억 명 이상을 기록하며 사상 최고 성장률을 보인 애플리케이션 중 하나가 됨
     * ChatGPT 성공과 함께 OpenAI의 기업가치는 2021년 140억 달러에서 논의 중인 신규 전환사채 라운드에서 1,500억 달러로 급등하며 Thrive Capital, 애플 등 투자자들의 관심을 끌고 있음

AI 안전성에 대한 우려

     * OpenAI의 특이한 구조는 원래 ""광범위하게 유익한 안전한 AGI(인간 수준 이상의 인공지능) 창조""라는 사명을 보장하기 위해 고안됨
     * 비영리 이사회의 통제 철회로 OpenAI가 일반 스타트업처럼 운영될 수 있게 되어 투자자들에게는 환영받고 있음
     * 그러나 장기적 AI 위험에 초점을 맞춘 슈퍼얼라인먼트팀을 해체한 바 있어, AGI 추구 과정에서 책임감 있는 자체 통제가 가능한지에 대해 AI 안전 커뮤니티의 우려를 불러일으킬 수 있음
     * Altman이 받게 될 지분 규모는 아직 불분명함. 그는 이사회에 이해관계가 없는 이사가 다수 필요하다는 이유로 지분을 가지지 않기로 선택했다고 밝힌 바 있음

GN⁺의 의견

     * OpenAI의 지배구조 변화는 상업적 성공과 AI 안전성 사이의 균형을 어떻게 맞출 것인지에 대한 중요한 질문을 제기함
     * 투자자들의 관심을 끌고 성장세를 이어가기 위해서는 영리 기업으로의 전환이 불가피해 보이나, AGI 개발에 대한 우려를 불식시키고 대중의 신뢰를 얻기 위해서는 투명하고 책임감 있는 거버넌스 체계 마련이 필수적임
     * Anthropic이나 Elon Musk의 xAI처럼 공익법인 형태를 취하는 것은 이익 추구와 사회적 책임 간 균형을 모색하는 하나의 방안이 될 수 있음
     * 그러나 보다 근본적으로는 AI 기술 발전에 따른 잠재적 위험을 선제적으로 파악하고 관리할 수 있는 사회적 합의와 규범, 제도적 장치 마련이 시급해 보임
     * 국가와 기업, 시민사회가 협력하여 AI가 인류에 도움이 되는 방향으로 발전하도록 지속적인 논의와 정책적 노력을 기울여야 할 것임

   사실상 일반 기업화 되어버리는군요.
   뭐 돈이 많이 드는 일이니 어쩔 수 없는 것일 순 있겠지만 이제 이름에서 open은 떼어야 되지 않나 싶네요.

   샘 알트먼한테 줄 지분은 약 7% 라고 하는군요
   https://businessinsider.com/open-ai-sam-altman-equity-stake-valuation-…
   구조조정후 기업가치가 200조쯤 되니까 한 15조원쯤 받게 되려나요.

        Hacker News 의견

     * OpenAI가 약속했던 것과 반대로 행동하는 모습을 보임
          + OAI-1부터 OAI-5까지의 단계를 설명하며, 현재는 OAI-5 단계에 도달했음을 언급함
          + GPT-5를 출시할 것이라 예상했으나, 이제는 아무에게도 답할 필요가 없음을 깨달았다고 함
          + 이는 매우 무서운 상황임
     * OpenAI의 이사회가 기술 경영진으로 새롭게 구성되었음
          + Bret Taylor가 이사회를 주재하며, 그는 이전에 Salesforce의 공동 CEO였음
          + 비영리 이사회가 영리 회사로의 전환을 승인하는 것이 비영리 단체의 본질에 반하는 것 같음
     * AI 안전에 대한 OpenAI의 헌신이 어떻게 영향을 받을지 우려됨
          + 비영리 구조가 이익 중심의 의사결정을 방지하는 안전장치였음
          + 영리 회사로 전환되면 책임 있는 AI 개발을 우선시할지 의문임
     * Sam Altman에 대한 신뢰 문제 제기
          + 4개월 전에는 더 많은 돈이 필요 없다고 했으나, 이제는 OpenAI를 통해 100억 달러의 주식을 얻으려 함
          + OpenAI를 ""ClosedAI""로 바꾸는 것이 좋을 것 같다는 의견
     * Mira Murati의 퇴사 시점이 흥미롭다고 언급됨
     * Loopt의 창립자가 OpenAI를 완전히 변질시켰다고 비판함
          + Sam Altman의 성과나 그가 YC나 OpenAI의 책임자가 된 이유가 명확하지 않음
          + Helion Energy의 회장직도 맡고 있음
          + 투자자들의 수익 한도를 제거한 것에 대해 언급됨
"
"https://news.hada.io/topic?id=17019","rga - PDF, 이북, 오피스, 압축파일까지 검색하는 ripgrep","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                rga - PDF, 이북, 오피스, 압축파일까지 검색하는 ripgrep

     * rga(ripgrep-all) 은 다양한 파일 유형에서 정규식으로 문자열을 찾을 수 있는 Line-Oriented 검색 도구
     * pdf, docx, sqlite, jpg, zip, tar.*, 영화 자막(mkv, mp4) 등에서 검색 가능
     * 재귀적으로 하위의 모든 아는 파일에 대해서 처리함
     * 멀티쓰레딩으로 빠르며, 같은 파일에 대해서는 추출한 텍스트를 캐시하여 더 빨라짐

   sqlite에서 텍스트를 추출해서 캐싱하면.. 흥미롭군요.
"
"https://news.hada.io/topic?id=17031","BorgBackup 2.0, Rclone 지원 – SSH 외 70개 이상의 클라우드 제공업체 추가 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       BorgBackup 2.0, Rclone 지원 – SSH 외 70개 이상의 클라우드 제공업체 추가 지원

Borg 2.0.0b11

  설치

     * Borg 2.0.0b11의 설치 방법 설명

  빠른 시작

     * Borg를 빠르게 시작하는 방법 안내

  사용법

     * Borg의 기본 사용법 설명

  배포

     * Borg를 배포하는 방법 안내

  자주 묻는 질문

     * Borg 사용 시 자주 묻는 질문과 답변

  지원

     * Borg 지원 방법 안내

  중요 사항 2.x

     * 보안 및 손상 문제에 대한 정보 제공

  업그레이드 노트

     * Borg 1.2.x/1.4.x에서 Borg 2.0으로 업그레이드 시 호환성 주의 사항
     * 주요 변경 사항:
          + 기존 저장소와 호환되지 않음
          + 보안, 속도, 병렬 처리 개선을 위한 변경
          + borg transfer를 사용하여 Borg 1.2/1.4 저장소에서 Borg 2.0 저장소로 아카이브 전송 가능
          + 명령어 구문 변경, 스크립트 및 래퍼 수정 필요
          + 일부 명령어 및 옵션 제거 및 변경

  변경 로그 2.x

    버전 2.0.0b11 (2024-09-26)

     * 새로운 기능:
          + rclone:// URL 지원으로 70개 이상의 클라우드 스토리지 제품 지원
          + 동일한 클라이언트에서 동일한 저장소에 대한 병렬 작업 지원
          + 아카이브 시리즈 기능 추가
     * 수정 사항:
          + 불필요한 repository.list() 호출 제거로 성능 향상
          + 기타 다양한 버그 수정 및 성능 개선

    버전 2.0.0b10 (2024-09-09)

     * 새로운 기능:
          + borgstore 기반 저장소 추가
          + 객체를 개별적으로 저장하여 I/O 감소 및 성능 향상
          + 새로운 잠금 방식 도입
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b9 (2024-07-20)

     * 새로운 기능:
          + 새로운 캐시 구현 추가
          + BORG_EXIT_CODES 환경 변수 추가
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b8 (2024-02-20)

     * 새로운 기능:
          + create 명령어에 슬래시닷 해킹 추가
          + BORG_EXIT_CODES=modern 환경 변수 추가
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b7 (2023-09-14)

     * 새로운 기능:
          + 인증된 저장소에서 키 없이 추출 가능
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b6 (2023-06-11)

     * 새로운 기능:
          + diff 명령어에 다양한 옵션 추가
          + import-tar 명령어에 새로운 옵션 추가
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b5 (2023-02-27)

     * 새로운 기능:
          + create 명령어에 파일 시스템 파일 재시도 기능 추가
          + info 명령어에 사용된 저장 공간 할당량 추가
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b4 (2022-11-27)

     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b3 (2022-10-02)

     * 새로운 기능:
          + rcompress 명령어 추가
          + 패턴 지원 추가
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b2 (2022-09-10)

     * 새로운 기능:
          + 아카이브 타임스탬프에 UTC 오프셋 지원
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

    버전 2.0.0b1 (2022-08-08)

     * 새로운 기능:
          + 아카이브 메타데이터 스트림 크기 제한 대폭 증가
          + rcreate --copy-crypt-key 옵션 추가
     * 수정 사항:
          + 다양한 버그 수정 및 성능 개선

  GN⁺의 정리

     * Borg 2.0은 보안, 속도, 병렬 처리 성능을 크게 개선한 주요 업데이트임
     * 기존 Borg 1.x와 호환되지 않으므로 업그레이드 시 주의가 필요함
     * 새로운 기능과 개선된 성능으로 다양한 클라우드 스토리지와의 호환성을 제공함
     * Borg 2.0의 주요 변경 사항과 새로운 기능을 이해하고 활용하면 백업 및 데이터 관리에 큰 도움이 될 것임

        Hacker News 의견

     * BorgBackup 사용자로서 매우 만족스러움. 7년 동안 매주 중복 제거된 백업이 완벽하게 작동하고 있음. Borgmatic과 함께 사용을 추천함
     * 현재 rclone을 사용하여 원격 머신에 백업 중이지만, 이는 전문적인 솔루션이 아님. Backblaze B2를 원격으로 추가하려고 생각 중임. rclone은 백업 도구가 아니며, 데이터 블록을 적절한 크기로 나누고, 전체 디렉토리를 tar로 인코딩하며, 중복 제거를 수행하는 등의 기능이 필요함. 추천할 만한 도구가 있는지 궁금함
     * Restic과 Duplicati를 잠깐 살펴봤지만, 기대만큼 간단하지 않음. GUI가 필요 없고, 모든 설정을 단일 구성 파일에 저장하고 싶음. 일부 도구는 인덱스가 망가져 데이터 복구가 불가능하다는 무서운 이야기를 들음
     * Borg와 Restic의 최신 비교나 Restic에서 Borg로 전환할 만한 이유가 있는지 궁금함. Borg를 사용했지만 로컬 파일이나 ssh 외의 백엔드를 사용할 수 없는 것이 문제였음. S3 호환 스토리지 제공자에 백업하기 위해 Restic으로 전환했음. 현재 Restic과 Borg는 동등해 보임
     * rclone 백엔드를 Borg에 작성하고 싶었음. v1에서는 백엔드가 잘 추상화되지 않아 어려웠지만, v2에서는 Thomas Waldmann이 좋은 추상화 인터페이스를 만들어 rclone 코드는 300줄 미만의 Python으로 작성 가능했음
     * Borg가 객체 스토리지와 함께 작동하는 것은 지원되지 않았지만, 일부 사용자는 그렇게 사용했음. 원본 저장소가 손상된 경우 손상이 중복될 수 있어 문제가 됨. rclone을 지원하는 것이 더 현명하고 미래 지향적인 선택임
     * 개인적으로 rsync 대신 Borg를 사용할 시점을 추천할 수 있는지 궁금함. 현재 rsync를 사용하여 디렉토리를 다른 드라이브와 원격 서비스에 백업 중임. Borg의 암호화 기능이 부럽지만, 새로운 도구의 복잡성과 데이터 손실에 대한 두려움이 있음
     * 저렴한 온라인 스토리지를 찾고 있다면 Microsoft 365 Single 구독이 1TB의 OneDrive 공간을 제공함. Restic과 rclone을 사용하여 몇 년 동안 성공적으로 사용 중임. 속도는 빠르지 않지만 작동함
     * rsync.net에 Borg 백업을 작성하는 데 만족함. SSH 세션에서 Borg를 강제하는 옵션과 백업 SSH 키가 손상될 경우 삭제를 방지하는 옵션이 있음. 전반적으로 설정이 어렵지 않은 견고한 솔루션임
     * Borg 암호화와 rclone 암호화 중 어느 것을 사용할지에 대한 이유가 있는지 궁금함
"
"https://news.hada.io/topic?id=17025","$1k 휠체어k 휠체어

        Hacker News 의견

     * 맞춤형 경량 휠체어는 비쌈
          + Ti-Lite Aero Z는 $3,000부터 시작하며 추가 옵션으로 가격이 급격히 상승함
          + 보험이 5년마다 이를 커버하지만 모든 사람이 이 혜택을 받는 것은 아님
          + Zack과 Cambry의 활동을 긍정적으로 평가함
          + 보험을 통해 제공하지 않기 때문에 FDA 승인 등 규제 비용을 피할 수 있음
     * 유튜브 채널 운영자의 배경
          + 약 900만 구독자를 보유한 유튜브 채널 운영자가 부인의 장애와 휠체어 시장의 문제를 보고 프로젝트를 시작함
          + 휠체어 시장의 변화를 긍정적으로 평가함
     * 휠체어의 BOM 비용
          + 휠과 베어링만으로도 BOM 비용이 $200-$300임
          + $200에 휠체어를 살 수 있다는 주장은 현실과 동떨어짐
     * 가격 비교 요청
          + 휠체어 가격에 대한 명확한 비교를 요청함
          + 예를 들어, 보험 승인된 수동 휠체어는 종종 $4,000이며, $1,000은 본인 부담임
     * 대만 자전거 제조업체
          + 대만 자전거 제조업체가 휠체어를 저렴하게 만들 수 있을 것이라고 예상함
     * 제품 가격에 대한 비판
          + 제품이 $200 정도의 비용이 들어야 한다고 주장함
          + 서구 세계의 문제점을 지적함
     * 미국 제조
          + 인간과 CNC 로봇으로 만든 미국 제품을 긍정적으로 평가함
          + 미래 지향적인 목표로 삼아야 한다고 주장함
     * Cambry와 Zack Nelson에게 감사
          + 더 많은 이런 활동을 보고 싶다고 언급함
     * 휠체어 가격에 대한 놀라움
          + 휠체어가 비싸다는 사실에 놀람
          + 자전거와 비교하여 휠체어의 생산량이 적기 때문에 가격이 높다고 설명함
     * 전동 휠체어에 대한 질문
          + 전동 휠체어가 왜 더 보급되지 않는지 질문함
          + 언덕을 오르거나 지하 통로를 통과할 때 모터가 필요함
          + 구글링을 통해 $1,000 이하의 중국산 전동 휠체어가 존재하지만 품질에 대한 의문을 제기함
"
"https://news.hada.io/topic?id=16963","CUPS를 통한 UNIX 시스템 공격","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          CUPS를 통한 UNIX 시스템 공격

유닉스 시스템 공격: CUPS를 통한 공격, Part I

  요약

     * CVE-2024-47176: cups-browsed <= 2.0.1은 UDP INADDR_ANY:631에서 바인딩되어, 공격자가 제어하는 URL로 Get-Printer-Attributes IPP 요청을 트리거할 수 있음
     * CVE-2024-47076: libcupsfilters <= 2.1b1의 cfGetPrinterAttributes5는 IPP 서버에서 반환된 IPP 속성을 검증하거나 정리하지 않아, 공격자가 제어하는 데이터를 CUPS 시스템에 제공할 수 있음
     * CVE-2024-47175: libppd <= 2.1b1의 ppdCreatePPDFromIPP2는 임시 PPD 파일에 IPP 속성을 기록할 때 검증하거나 정리하지 않아, 공격자가 제어하는 데이터를 주입할 수 있음
     * CVE-2024-47177: cups-filters <= 2.0.1의 foomatic-rip는 FoomaticRIPCommandLine PPD 매개변수를 통해 임의의 명령 실행을 허용함

  영향

     * 원격 인증되지 않은 공격자가 기존 프린터의 IPP URL을 악성 URL로 교체하거나 새로운 프린터를 설치할 수 있으며, 프린트 작업이 시작될 때 임의의 명령을 실행할 수 있음

  진입점

     * WAN / 공용 인터넷: 원격 공격자가 포트 631로 UDP 패킷을 전송함. 인증 불필요
     * LAN: 로컬 공격자가 zeroconf / mDNS / DNS-SD 광고를 스푸핑하여 동일한 코드 경로를 통해 RCE를 달성할 수 있음

  영향을 받는 시스템

     * 대부분의 GNU/Linux 배포판
     * 일부 BSD
     * Google Chromium / ChromeOS (가능성 있음)
     * Oracle Solaris
     * 기타

  해결책

     * cups-browsed 서비스를 비활성화하고 제거함
     * 시스템의 CUPS 패키지를 업데이트함
     * 시스템을 업데이트할 수 없는 경우, UDP 포트 631과 모든 DNS-SD 트래픽을 차단함

  소개

     * 몇 주 전, 새로운 노트북에 Ubuntu를 설정하던 중 UDP 포트를 청취하는 서비스를 확인하기 위해 netstat -anu 명령을 실행함
     * 포트 631에서 cups-browsed가 UDP를 사용하여 모든 네트워크 인터페이스에서 청취하고 응답하는 것을 발견함
     * cups-browsed는 새로운 프린터를 자동으로 시스템에 추가하는 역할을 함

  cups-browsed란?

     * cups-browsed는 CUPS 시스템의 일부로, 새로운 프린터를 발견하고 자동으로 시스템에 추가함
     * 기본 설정 파일은 주석 처리되어 있으며, 누구나 연결할 수 있도록 허용됨

  스택 버퍼 오버플로 및 경쟁 조건

     * cups-browsed는 oss-fuzz의 커버리지에 포함되지 않음
     * process_browse_data 함수에서 스택 버퍼 오버플로와 경쟁 조건이 발생할 수 있음
     * 이러한 문제는 개발자와 CERT에 보고되었으나, 아직 패치되지 않음

  found_cups_printer로 돌아가기

     * found_cups_printer 함수는 패킷에서 URL을 추출하여 cfGetPrinterAttributes 함수에 전달함
     * 이 URL은 공격자가 제어하는 서버로 연결됨

  인터넷 프린팅 프로토콜 (IPP)

     * IPP는 클라이언트 장치와 프린터 간의 통신을 위한 프로토콜임
     * 공격자가 제어하는 프린터 속성을 반환하여, 시스템에 프린터를 추가할 수 있음

  GN⁺의 정리

     * 이 글은 CUPS 시스템의 취약점을 악용하여 원격 코드 실행을 달성하는 방법을 설명함
     * CUPS와 관련된 다양한 취약점이 있으며, 이를 통해 공격자가 시스템을 제어할 수 있음
     * 이러한 취약점은 아직 패치되지 않았으며, 사용자는 CUPS 서비스를 비활성화하거나 업데이트해야 함
     * 비슷한 기능을 가진 다른 프로젝트로는 LPRng와 CUPS의 최신 버전이 있음
"
"https://news.hada.io/topic?id=16941","리아키텍팅: Redis에서 SQLite로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       리아키텍팅: Redis에서 SQLite로 전환

    배경

     * Wafris는 오픈 소스 웹 애플리케이션 방화벽 회사로, Rails 미들웨어 클라이언트를 제공함
     * 초기 v1 클라이언트는 로컬 Redis 데이터 저장소를 필요로 했으나, 이제 SQLite를 사용하는 v2 클라이언트를 출시함
     * 이 글은 Redis에서 SQLite로의 마이그레이션 결정 과정, 성능 고려 사항, 아키텍처 변경 사항을 다룸

    요약

     * SQLite, Redis, 전통적인 RDBMS(Postgres/MySQL)는 각각 장단점이 있음
     * 이 데이터 저장소들은 서로 대체 불가능하며, 이를 시도하면 문제가 발생할 수 있음
     * 이 글은 Redis 기반의 v1 클라이언트를 SQLite 기반의 v2 클라이언트로 재구성하는 과정에 대해 설명함

    이 변경을 강요한 이유?

     * Wafris의 목표는 개발자가 사이트를 쉽게 보호할 수 있도록 하는 것임
     * v1 클라이언트는 Redis 데이터 저장소를 사용했으나, 많은 사용자가 Redis 배포 문제를 겪음
     * Redis 관리자가 되는 부담을 덜어주기 위해 SQLite로 전환함

    속도란 무엇인가?

     * Redis는 전통적인 RDBMS에 비해 빠르지만, 여전히 관리해야 할 요소가 많음
     * 클라우드 환경에서는 네트워크 지연이 큰 문제로 작용함
     * SQLite는 네트워크 왕복 시간을 줄여 더 빠른 성능을 제공할 수 있음

    모놀리틱 가정

     * 많은 분산 애플리케이션이 Redis 사용에 문제를 일으킴
     * Redis 사용의 복잡성을 줄이기 위해 아키텍처를 재고함

    SQLite 도입

     * SQLite는 네트워크 IO 병목을 줄여줌
     * SQLite는 파일 열기(fopen())와 경쟁하며, 클라이언트/서버 데이터베이스와 경쟁하지 않음

    SQLite와 Redis 벤치마킹

     * SQLite는 특정 사용 사례에서 Redis보다 약 3배 빠름
     * 네트워크 지연을 고려하지 않은 상태에서도 SQLite가 더 빠름

    차트에서 누락된 내용

     * SQLite 성능이 벤치마크에서 더 나쁘더라도 실제 환경에서는 네트워크 지연으로 인해 더 빠를 수 있음
     * SQLite는 수평 확장이 용이하며, 사용자 설치 및 구성 부담을 줄임

    동기화 아키텍처 구축

     * v1(Redis)에서는 사용자가 규칙을 업데이트하면 Redis 데이터 저장소에 업데이트됨
     * v2(SQLite)에서는 클라이언트가 주기적으로 업데이트된 규칙을 확인하고 새로운 SQLite 데이터베이스를 다운로드함

    SQLite 분산 아키텍처

     * SQLite DB를 각 컴퓨팅 인스턴스에 동기화하여 데이터베이스 병목 문제를 해결함

    결론

     * SQLite 기반의 v2 아키텍처는 많은 사이트가 공격을 견디고 온라인 상태를 유지하는 데 도움을 줌
     * 사용자에게 더 적은 부담을 주며, 더 안전하고 보안이 강화된 인터넷을 제공함

    GN⁺의 정리

     * 이 글은 Redis에서 SQLite로의 마이그레이션 과정과 그 이유를 설명함
     * SQLite는 네트워크 지연을 줄여 성능을 향상시키며, 사용자 설치 및 구성 부담을 줄임
     * SQLite의 분산 아키텍처는 데이터베이스 병목 문제를 해결함
     * 이 글은 웹 애플리케이션 방화벽을 쉽게 배포하고 빠르게 작동시키는 방법에 대한 통찰을 제공함

        Hacker News 의견

     * 각 애플리케이션 서버가 SQLite 데이터베이스 파일을 복사하여 주기적으로 교체하는 모델에 관심이 있음
          + 웹 애플리케이션 방화벽 규칙에 사용됨
          + 기능 플래그 구성에도 사용할 수 있음
          + 기능 플래그는 업데이트가 몇 초 걸려도 괜찮음
     * Redis의 읽기/쓰기 지연 시간이 쿼리된 키 수에 비례함
          + Postgres와 Redis를 사용하는 모놀리식 앱이 잘 작동했음
          + Redis는 단일 스레드이므로 대량 읽기 기능이 다른 작업을 느리게 할 수 있음
          + Redis는 키 또는 작은 고정 키 집합을 읽고 쓸 때 좋음
          + SQLite가 로컬 Redis 인스턴스와 비교해 성능이 좋은 것이 흥미로웠음
     * 데이터셋이 120만 개 항목으로 보이지만 실제로는 크지 않음
          + IPv4 주소는 4.8MB, 간단한 압축으로 더 작아질 수 있음
          + Ruby가 mmap을 지원하면 직접 IP 목록을 사용하는 것이 좋음
     * Neon 내부 해커톤에서 Redis의 프로토콜을 Postgres 쿼리로 변환하는 Node.js 서버를 작성했음
          + 재미있는 해킹 프로젝트였음
     * RailsWorld 2023에서 Redis에 대한 부정적인 분위기가 있었음
          + Redis 서버가 필요하다는 가정이 있었음
          + Redis를 사용한 경험이 적어 현재 생태계가 Redis에 반대하는지 궁금함
     * SQLite가 서버 측에서 복제 없이 잘 작동하는 틈새 사용 사례로 보임
          + 다른 대안은 메모리에 로드된 정적 파일을 사용할 수 있음
          + SQLite가 좋은 대안임
     * Redka라는 Redis를 SQLite로 구현한 프로젝트가 있음
     * 최고의 인용문: ""SQLite는 클라이언트/서버 데이터베이스와 경쟁하지 않음. SQLite는 fopen()과 경쟁함.""
     * Redis는 전통적인 RDBMS에 비해 빠르지만 관리가 필요함
          + 모든 데이터베이스는 일정 수준의 관리가 필요함
          + 조인을 신경 쓰지 않으면 행 삽입과 검색도 매우 빠름
     * 벤치마킹은 매우 정밀한 숫자로 자신을 속이는 어두운 예술임
"
"https://news.hada.io/topic?id=17021","MusicBrainz: 오픈 음악 백과사전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        MusicBrainz: 오픈 음악 백과사전

     * MusicBrainz는 음악 메타데이터를 수집하여 대중에게 제공하는 오픈 음악 백과사전임
     * 누구나 기여할 수 있으며, 데이터를 오픈 라이선스로 배포함
     * 신뢰할 수 있고 명확한 음악 식별 형식을 제공하여 사람과 기계가 음악에 대해 의미 있는 대화를 나눌 수 있게 함
     * Wikipedia처럼 전 세계 사용자 커뮤니티에 의해 유지되며, 모든 사람이 참여하고 기여하기를 원함
     * MusicBrainz 데이터베이스의 대부분의 데이터는 퍼블릭 도메인으로 공개되어 무료로 다운로드 및 사용 가능함

MetaBrainz Foundation

     * MusicBrainz는 캘리포니아에 기반을 둔 비영리 법인 MetaBrainz Foundation에 의해 운영됨
     * MetaBrainz Foundation은 MusicBrainz를 무료 및 오픈 소스로 유지하는 데 전념하고 있음

GN⁺의 정리

     * MusicBrainz는 오픈 음악 백과사전으로, 누구나 기여할 수 있는 플랫폼을 제공함
     * MetaBrainz Foundation에 의해 운영되며, 데이터를 오픈 라이선스로 배포하여 무료로 사용 가능하게 함
     * 음악 메타데이터를 신뢰할 수 있고 명확하게 제공하여 사람과 기계가 음악에 대해 의미 있는 대화를 나눌 수 있게 함
     * Picard와 같은 다양한 음악 태그 지정 도구를 제공하여 사용자들이 쉽게 음악을 관리할 수 있음
     * 공정한 스트리밍을 위한 프로젝트와 같은 최신 소식을 통해 지속적으로 발전하고 있음

   저도 얼마전에 MusicBrainz에 좋아하는 일본 작곡가의 싱글앨범을 등록한 적이 있는데, Discogs보다 룰이 덜 빡빡하고 유용한 정보를 남기기 좋더라구요.
   예를 들어 Diccogs는 트랙명이 무조건 대문자로 시작해야하는데, 여기서 작곡가가 의도적으로 소문자로 제목을 지었다면 그 의도가 무시되어버렸습니다.

        Hacker News 의견

     * MusicBrainz와 Picard는 음악 라이브러리를 관리하는 데 매우 유용함
          + Napster와 YouTube 사이의 공백으로 인해 모든 음악을 찾을 수는 없지만, 95% 정도의 정확도로 만족스러움
          + 글로벌 데이터베이스로 지역 제한이 없어서 좋음
          + 매년 재스캔 및 재태그 필요함
     * MusicBrainz의 역사에 대해 EFF에서 글을 작성했음
          + 공공 이익 인터넷 프로젝트의 생존에 대해 다룸
          + 링크: EFF 글
     * Chromaprint를 Zig로 포팅했음
          + 별도의 패키지로 분리할 계획이 있음
          + 현재 코드 위치: Codeberg
          + 관련 발표: YouTube
          + Acoustid는 MusicBrainz ID를 소닉 콘텐츠 기반으로 식별하는 서비스임
     * MusicBrainz 데이터베이스를 다운로드하여 검색 기능을 구현했음
          + 약 3200만 곡을 검색할 수 있음
          + Typesense의 벤치마크에 유용했음
          + 링크: Typesense 검색
     * Picard를 확인해보길 권장함
          + MusicBrainz DB를 사용하여 자동 태그 및 파일명 수정 가능
          + 대규모 오디오 컬렉션을 쉽게 정리할 수 있음
          + 링크: Picard
     * MusicBrainz의 편집기가 매우 유용함
          + 매주 많은 데이터를 추가하고 있음
          + 트랙 번호, 이름, 길이, 아티스트 등을 자동으로 생성함
          + MusicBrainz/beets/flac/plex 조합이 Spotify보다 더 나음
     * 초기부터 간헐적으로 사용해왔음
          + 자동 태그 기능을 기대했지만, 많은 오류로 인해 mp3tag로 수동 편집함
          + 링크: mp3tag
     * MusicBrainz는 훌륭함
          + 가끔 로컬 밴드의 속성이 업데이트되었다는 이메일을 받음
          + 2017년에 GraphQL 인터페이스를 구축했음
          + 프로젝트를 통해 GraphQL 설계와 MusicBrainz의 폭넓은 이해를 배움
          + 링크: Graphbrainz
     * 프로젝트에 기여하고 있으며, 커뮤니티의 노력을 사랑함
          + 유사한 프로젝트로 TMDB와 TVDB가 있음
"
"https://news.hada.io/topic?id=16945","증거에도 불구하고 미주리에서 사형 집행된 Marcellus Williams는 누구인가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            증거에도 불구하고 미주리에서 사형 집행된 Marcellus Williams는 누구인가

    마셀러스 윌리엄스: 무죄 증거에도 불구하고 사형 위기에 처한 남성

     * 마셀러스 윌리엄스는 9월 24일 사형이 예정되어 있음
          + 미주리 주지사 마이크 파슨이 이 사형을 막을 수 있는 권한을 가지고 있음
     * 사건 업데이트
          + 9월 12일: 세인트루이스 카운티 순회법원이 검사 웨슬리 벨의 유죄 판결 및 사형 선고 무효화 요청을 기각함
          + 7월 2일: 세인트루이스 카운티 순회법원이 8월 21일에 청문회를 예정함
     * 사건의 주요 내용
          + 범죄 현장 증거
               o 1998년 8월 11일, 전 기자 펠리시아 게일이 자택에서 살해됨
               o 현장에 남겨진 지문, 발자국, 머리카락, DNA 등이 윌리엄스와 일치하지 않음
          + 신뢰할 수 없는 증언
               o 두 명의 증인이 자신의 형량 감면과 보상금을 위해 증언함
               o 증언 내용이 일관되지 않으며 독립적으로 검증되지 않음
          + 반복된 사형 위기
               o 2016년 DNA 테스트 결과 윌리엄스가 범인이 아님이 밝혀짐
               o 2017년 주지사 에릭 그리텐스가 사형 집행을 중단하고 조사 위원회를 구성함
               o 2023년 주지사 마이크 파슨이 위원회를 해산하고 새로운 사형 날짜를 설정함
          + 피해자 가족의 반대
               o 피해자 가족은 윌리엄스의 사형을 반대하며 무기징역을 지지함
               o 미주리 검찰총장은 여전히 사형을 추진 중임
          + 잘못된 유죄 판결의 주요 원인
               o 교도소 내부자의 증언이 잘못된 유죄 판결의 주요 원인 중 하나임
          + 인종적 편견
               o 윌리엄스는 흑인으로, 백인 여성 살해 혐의로 유죄 판결을 받음
               o 배심원단은 11명의 백인과 1명의 흑인으로 구성됨
          + 종교적 헌신과 시인 활동
               o 윌리엄스는 이슬람을 공부하고 시를 쓰며, 교도소 내에서 이맘으로 활동 중임
     * 도움 방법
          + 주지사에게 전화하기
          + 청원서 서명하기
          + 소셜 미디어를 통해 사건 공유하기

    GN⁺의 정리

     * 마셀러스 윌리엄스 사건은 잘못된 유죄 판결과 사형 제도의 문제점을 보여줌
     * DNA 증거와 피해자 가족의 반대에도 불구하고 사형이 추진되고 있음
     * 이 사건은 형사 사법 제도의 개혁 필요성을 강조함
     * 유사한 기능을 가진 프로젝트로는 Innocence Project와 Midwest Innocence Project가 있음

        Hacker News 의견

     * 많은 기여자들이 경찰이 Marcellus Williams의 차에서 피해자의 노트북과 다른 물건을 발견했다고 잘못 알고 있음
          + Wikipedia에 따르면, 살인은 1998년 8월에 발생했으며, 1999년 5월에 피해자의 가족이 체포와 유죄 판결로 이어지는 정보에 대해 $10,000의 보상을 발표했음
          + 이에 따라 Henry Cole과 Lara Asaro가 Marcellus Scott Williams를 범인으로 지목했음
          + Asaro는 Williams가 그녀에게 자백했다고 증언했으며, 이는 그녀가 Williams의 차에서 범죄 현장의 증거를 발견한 후였음
          + 경찰이 Williams의 차에서 피해자의 물건을 발견한 것이 아니라, Williams의 전 여자친구가 보상금을 받기 위해 8개월 후에 피해자의 물건을 보았다고 주장한 것임
          + 이 때문에 Innocence Project가 Marcellus Williams를 살인과 연결하는 신뢰할 만한 증거가 없다고 주장함
     * 사형을 폐지하지 않을 거라면, 합리적인 의심을 넘어서는 증거보다 더 높은 기준을 요구해야 함
          + 명백한 증거가 필요하며, 정황 증거는 허용되지 않아야 함
          + 전문가 증언도 배제되어야 함
          + 증거는 모든 배심원에게 확실하고 명확해야 함
          + 이렇게 하면 자백한 대량 총격범을 처형할 수 있지만, 잘못된 과학, 강요된 증언, 또는 다른 오류 있는 증거로 인해 누군가를 돌이킬 수 없이 죽이는 것을 방지할 수 있음
     * 원래 사건은 다음과 같은 증거에 기반함
          + Williams의 여자친구의 증언, Williams가 그녀에게 자백했다고 함
          + 감옥 동료의 증언, Williams가 그들에게 자백했다고 함
          + Williams가 살인 당일 또는 그 다음날 차에 피해자의 물건을 가지고 있었다는 것
          + 그러나 DNA 증거는 없음
          + 이러한 증거로 사형을 선고하는 것은 매우 과도해 보임
          + 합리적인 의심이 충분히 존재함
          + 개인적으로 무고한 사람들이 처형된 사례가 있기 때문에 사형에 반대함
     * 1976년 미국에서 사형이 재개된 이후, 많은 무고한 미국인들이 처형되었음
          + 이 문제를 문서화한 학술 연구 문헌이 많이 있음
          + 더 알고 싶은 사람들에게 다음 책들을 추천함
               o Justin Brooks (2023) ""You Might Go to Prison Even Though You're Innocent"", University of California Press
               o Brandon Garrett (2011) ""Convicting the Innocent: Where Criminal Prosecutions Go Wrong"", Harvard University Press
               o Mark Godsey (2017) ""Blind Injustice: A Former Prosecutor Exposes Psychology and Politics of Wrongful Convictions"", University of California Press
     * 피해자의 가족조차도 무기징역이 적절한 형벌이라고 믿음
          + 그를 범죄와 연결하는 증거가 없다면 왜 그를 풀어주지 않는지 의문임
          + 누군가를 처벌하고자 하는 욕구 때문인지
     * 새로운 증거가 제시되었을 때 사법 시스템이 아무런 조치를 취하지 않는 것이 매우 불안함
          + 검사들은 정의를 추구하기보다는 높은 유죄 판결률을 유지하는 데 더 관심이 있는 것 같음
          + 판사들은 전혀 무관심해 보임
     * 금요일에 사우스캐롤라이나에서 새로운 무죄 증거에도 불구하고 또 다른 처형이 있었음
     * Marcellus에 대한 주요 증거가 그의 전 여자친구와 감옥 동료의 증언이라는 점이 잘못된 것 같음
          + 두 가지 소문에 기반한 증언으로 사람을 유죄 판결하는 것은 신뢰할 수 없음
          + 과거에는 미국이 작고 사람들의 도덕성이 높았을 때는 작동했을지 모르지만, 지금은 악용될 가능성이 큼
          + 사무실 분쟁에서조차 이 증거를 사용하지 않을 것임
     * 원래 법정 사건의 기록이 온라인에 있는지 궁금함
          + 가장 오래된 것은 미주리 주 대법원의 항소 결정임
          + Williams를 살인과 연결하는 증거에 대한 논란이 있는 여러 지점이 있음
          + 원래 재판 기록이 이러한 점을 명확히 하는 데 도움이 될 것임
     * 업데이트: 너무 늦었음
          + 살인 유죄 판결이 의심받던 Marcellus Williams가 화요일 저녁 미주리에서 치명적인 주사로 사망했음
          + 미국 대법원이 집행 유예를 거부한 후 55세의 Williams가 Bonne Terre의 주 교도소에서 오후 6시경 사망했음
"
"https://news.hada.io/topic?id=17020","Anything-LLM - 오픈소스 올인원 AI 데스크탑 어시스턴트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Anything-LLM - 오픈소스 올인원 AI 데스크탑 어시스턴트

     * 상용LLM이나 오픈소스 LLM 및 벡터DB 솔루션을 사용하여 비공개 ChatGPT를 구축할 수 있는 풀스택 AI 애플리케이션
          + 로컬 또는 원격에서 호스팅 가능
          + 자신이 제공하는 모든 문서 및 리소스를 참조 가능한 컨텍스트로 전환
     * 사용할 LLM 또는 벡터DB를 선택 가능하며, 다중 사용자 관리 및 권한도 지원
          + OpenAI, llama.cpp, AWS Bedrock, ANthropic, Google Gemini, Ollma, Together, Mistral, Groq, Cohere..
     * 멀티-모달 지원(상용 & 오픈 LLM 모두)
     * 자신의 웹사이트에 임베딩 가능한 커스텀 채팅 위젯 제공(도커 버전)
     * 문서를 Workspaces 라는 개체로 나눠서 하나의 스레드처럼 컨테이너화 해서 동작
          + 공유는 가능하지만 서로 대화하는 하지 않으므로 각 워크스페이스간 컨텍스트를 유지 가능

monorepo 안의 컴포넌트 구분

     * frontend: viteJS + React로 구축된 프론트엔드
     * server: NodeJS express 서버로 벡터DB 관리 및 LLM 상호작용 처리
     * collector: 문서를 처리하고 파싱하는 NodeJS express 서버
     * docker: Docker 명령어 및 빌드 프로세스 정보
     * embed: 웹 임베드 위젯 생성 및 관리 서브모듈
     * browser-extension: 크롬 브라우저 확장 프로그램 서브모듈

  Hacker News 의견

     * 엔터프라이즈 환경에서 커스터마이징된 AnythingLLM 인스턴스를 배포하려고 시도 중임. TimC와 개발팀이 매우 뛰어나고 응답이 빠름. EntraID 통합을 기다리고 있으며, 이를 통해 대부분의 기본적인 사용 사례를 충족할 수 있을 것임. TimC와 팀에게 감사함
     * 처음에는 Ollama/WebGenUI 래퍼일 줄 알았지만, 실제로는 훨씬 더 많은 기능을 지원함. LLM뿐만 아니라 임베딩 모델, 벡터 데이터베이스, TTS/STT도 지원함. 완전한 음성 챗봇을 구축하는 데 필요한 모든 것을 포함함
     * 매우 좋음. ""Language Learning Model""이라는 용어가 웃기다고 생각함. 작성자가 LLM의 의미를 모른 채 프로젝트를 진행한 것 같다고 농담함
     * 다운로드하여 사용해보았으며, 현재까지는 매우 좋음. GPT-4o를 사용하여 규제 PDF를 읽는 데 사용해봄. 초기 피드백:
          + 인용이 약간 불확실함. 응답은 대체로 정확하지만 인용 창의 내용이 약간 혼란스러움
          + 기존 채팅 내용 내에서 텍스트 검색 기능을 추가해주길 바람. 예를 들어, 채팅 중 기린에 대해 검색하면 해당 채팅 기록으로 전환할 수 있도록 해주길 바람
     * 임베드나 벡터가 무엇인지 모르는 사람으로서, 표준 사무용 PC에 설치하고 사용할 수 있는 유일한 오프라인 AI 도구임
     * LLM은 미래에 웹 프레임워크처럼 무료, 오픈 소스가 될 것임. 유료 옵션도 있겠지만, 대부분의 작업에는 무료 옵션이 충분할 것임
     * 엔터프라이즈 수준에서 AnythingLLM을 설정해보았으며, 대부분의 기능에 매우 감명받음. 커스텀 CSS를 제대로 포함할 수 있는 옵션이 있었으면 좋겠음. 기본 인터페이스가 약간 구식으로 보임. 훌륭한 작업을 계속해주길 바람
     * Linux 설치 중 오류가 발생했지만 다음 명령어로 해결됨:
sudo chown root:root /home/hn/AnythingLLMDesktop/anythingllm-desktop/chrome-sandbox
sudo chmod 4755 /home/hn/AnythingLLMDesktop/anythingllm-desktop/chrome-sandbox

       그 외에는 매우 잘 작동함
     * AnythingLLM이 LLM을 로컬 및 API를 통해 사용하는 데 있어 매우 간편함. 임베더와 벡터 스토어에 대한 다양한 선택지가 있음. 단일 설치 데스크톱 패키징이 매우 깔끔함. 다가올 새로운 기능을 기대함
"
"https://news.hada.io/topic?id=16948","Launch HN: Haystack (YC S24) – 무한 캔버스에서 코드 시각화 및 편집 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Launch HN: Haystack (YC S24) – 무한 캔버스에서 코드 시각화 및 편집 기술

Haystack Editor 소스 코드 공개

  저장소

     * 이 저장소는 Haystack Software가 커뮤니티와 함께 Haystack Editor 제품을 개발하는 곳임
     * 코드와 이슈를 다루며 로드맵도 공개함
     * 소스 코드는 PolyForm Strict License 1.0.0 하에 제공됨

  Haystack Editor

     * Haystack Editor는 특정 커스터마이징이 포함된 배포판임
     * 코드 편집기의 단순함과 캔버스 UI를 결합하여 코드를 쉽게 이해할 수 있게 함
     * 포괄적인 코드 편집, 탐색, 이해 지원, 가벼운 디버깅, 확장성 모델, 기존 도구와의 통합 제공
     * 매주 새로운 기능과 버그 수정으로 업데이트됨
     * Windows, macOS, Linux용으로 Haystack 웹사이트에서 다운로드 가능

  기여 방법

     * 다음과 같은 방법으로 프로젝트에 참여 가능:
          + 버그 및 기능 요청 제출, 확인 도움
          + 소스 코드 변경 검토
          + 문서 검토 및 오타 수정, 새로운 내용 추가를 위한 풀 리퀘스트 제출
     * 문제를 직접 수정하고 코드베이스에 기여하려면 'How to Contribute' 문서를 참조:
          + 소스에서 빌드 및 실행 방법
          + 디버깅 및 테스트 실행을 포함한 개발 워크플로우
          + 풀 리퀘스트 제출
          + 작업할 이슈 찾기

  피드백

     * Discord에서 질문하기
     * 이슈 제출하기
     * @AkshaySubr42403 팔로우하고 의견 전달하기

  관련 프로젝트

     * Haystack의 핵심 구성 요소와 확장 기능은 별도의 GitHub 저장소에 있음
          + 예: node debug adapter, mono debug adapter, Pixi 저장소

  번들된 확장 기능

     * Haystack은 여러 언어에 대한 문법 및 스니펫을 포함한 내장 확장 기능을 제공함
     * 언어에 대한 풍부한 언어 지원(코드 완성, 정의로 이동)을 제공하는 확장 기능은 language-features 접미사를 가짐
          + 예: json 확장은 JSON에 대한 색상 지정 제공, json-language-features 확장은 JSON에 대한 풍부한 언어 지원 제공

  라이선스

     * 저작권 (c) Haystack Software Inc. 모든 권리 보유
     * PolyForm Strict License 1.0.0 하에 라이선스 제공

GN⁺의 정리

     * Haystack Editor는 코드 편집기와 캔버스 UI를 결합하여 사용자가 코드를 쉽게 이해할 수 있게 도와줌
     * 매주 업데이트되며 Windows, macOS, Linux에서 사용 가능함
     * 커뮤니티 참여를 통해 버그 수정 및 기능 추가가 활발히 이루어짐
     * 다양한 언어에 대한 풍부한 언어 지원을 제공하는 내장 확장 기능 포함
     * 관련 프로젝트와의 통합을 통해 확장성과 기능성을 높임

        Hacker News 의견

     * Haystack의 초기 실행이 유망하며 성공을 기원함
          + 도전 과제 예상: 호출자/피호출자 식별, 개발자 간 UX 선호도 불일치 등
          + VR 헤드셋처럼 무한한 화면 공간에서 더 강력할 것이라고 생각함
     * CoCalc의 Whiteboard 구현에 관심을 가질 만함
          + 웹 브라우저를 통해 CoCalc.com에 접속 가능
          + 무한 캔버스에서 펜과 태블릿(iPad 등)을 사용해 작성 가능
          + LaTeX/Markdown(또는 Rich Text)으로 스티키 노트 작성 가능
          + Jupyter 셀 실행 가능
          + Python, R, Julia, Octave, SageMath 등 다양한 커널 지원, 설치 필요 없음
     * 조직의 전체 코드베이스를 다양한 프레임워크와 언어로 매핑하는 것을 상상함
          + 노드를 연결하는 대신 저장소 폴더에서 시각화를 자동화하는 봇을 제공하면 좋겠음
          + 매우 멋지며 관심 목록에 추가함
          + 엔터프라이즈 조직이나 디지털 전환을 계획 중인 지방 자치단체 IT 그룹을 타겟으로 할 것을 권장함
          + Salesforce와의 호환성이 높아 보이며, 1년 내에 관심을 받을 것이라고 생각함
     * Light Table에서 영감을 받았는지 궁금함
          + 2D를 넘어선 시각화 기능 요청
          + 복잡한 시스템은 보통 복잡한 그래프이며, 2D 평면에서의 시각화는 충분하지 않음
          + 외곽 레이어에 경계 서비스, 내부 레이어에 코어/도메인 서비스를 배치한 동심원 형태의 시각화를 원함
     * 오픈 소스 무한 캔버스 추천 요청
          + 멀티플레이어 카드 게임을 만들고 있으며, 무한 캔버스가 필요함
     * VSCode 확장으로 제공되면 사용해 볼 것임
          + 요즘은 주로 커서 안에서 작업함
     * 비즈니스 모델에 대해 확신이 없음
          + prezi.com에서 영감을 받을 것을 제안함
          + 특정 워크플로우를 문서화하는 prezi-like HS 작업 공간 작성 가능
          + 캔버스에 텍스트 추가 및 에디터에서 줌 인/아웃 기능 제공
          + 대기업이 지불할 만한 프리미엄 기능이 될 수 있음
     * Self 프로그래밍 언어의 ""Kansas"" 환경을 떠올리게 함
          + 1995년 Sun의 비디오 링크 제공
          + 이후 더 흥미로운 검색 기능이 추가됨
     * 코드 스니펫과 연결을 2차원 공간에 펼쳐서 매핑하는 편리한 접근 방식임
          + 기억력을 강화하고 이해도를 높이기 위해 공간적으로 코드 스니펫을 정교하게 인코딩하는 방법과 유사함
          + 배경 패턴 옵션 추가 고려 제안
          + 배경이 세계 지도라면 사용자가 원하는 위치를 더 빨리 기억하고 찾을 수 있을 것임
          + 탭 경계 색상 정의나 각 탭에 다른 노이즈 추가 고려 (줌 레벨과 뷰포트 중심에서의 거리와 함께 노이즈가 사라짐)
     * 확장으로 제공할 수 없는 이유가 궁금함
          + 아이디어가 마음에 들며, 에디터 영역의 탭 안에서 이 기능을 상상할 수 있음
          + 여러 haystack 탭을 허용하여 컨텍스트 전환이 더 쉬워질 것임
          + 다른 IDE를 설치해야 하는 것은 다소 번거로움
          + 그럼에도 불구하고 계속 노력해 주길 바람
"
"https://news.hada.io/topic?id=17060","특허 괴물 Sable이 재판에 져서 모든 비용을 지불하며, 특허를 대중에게 기부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              특허 괴물 Sable이 재판에 져서 모든 비용을 지불하며, 특허를 대중에게 기부

     * Sable은 2021년 3월 Cloudflare를 상대로 소송을 제기한 특허 괴물. Sable은 Caspian Networks로부터 오래된 특허 포트폴리오를 인수하여 이를 통해 수익을 창출하려는 목적으로 설립된 껍데기 회사임.
     * Sable은 Cloudflare와 Cisco, Fortinet, Check Point, SonicWall, Juniper Networks 등 여러 회사를 상대로 특허 침해를 주장하며 소송을 제기했음. 다른 회사들은 법정 밖에서 문제를 해결했지만, Cloudflare는 맞서 싸웠음.
     * Sable은 Cloudflare의 여러 제품과 기능이 침해했다고 주장하며 4개의 다른 특허에서 약 100개의 청구를 제기했음. Sable의 특허는 20년 전의 하드웨어 기반 라우터 기술과 관련이 있었음.

  배심원단의 판단: Cloudflare는 침해하지 않음

     * Cloudflare는 배심원에게 Sable의 남은 특허인 '919 특허의 청구 25번이 Cloudflare의 제품과 다르다는 점을 설명해야 했음.
          + 배심원에게 Cloudflare의 제품이 Sable의 특허와 다르다는 여러 이유를 설명
          + Cloudflare의 제품은 패킷을 개별적으로 처리하며, 이는 '919 특허의 요구 사항과 다름.

  배심원단의 판단: Sable의 특허 청구는 무효임

     * Cloudflare는 '919 특허의 청구 25번이 무효임을 증명하기 위해 노력
     * Dr. Min은 두 개의 선행 기술 참조가 '919 특허의 청구 25번을 명백하게 만든다는 점을 설명했음.

  Sable의 패배 인정 및 Cloudflare에 대한 보상

     * Sable은 Cloudflare에 $225,000를 지불하고, 모든 특허 포트폴리오에 대한 로열티 없는 라이선스를 부여하며, 특허를 대중에게 헌납하기로 합의
     * 이는 Sable이 다른 회사에 대해 이러한 특허를 다시 주장할 수 없음을 의미함

  Project Jengo의 결론

     * Project Jengo는 특허 괴물에 맞서 싸우기 위한 Cloudflare의 노력의 일환으로, 참가자들이 제공한 선행 기술 참조를 통해 Sable의 특허를 무효화하는 데 기여했음
     * Project Jengo의 참가자들에게 총 $70,000의 상금이 수여되었으며, 최종 수상자 선정이 진행 중임

GN⁺의 정리

     * 이 기사는 Cloudflare가 특허 괴물 Sable에 맞서 싸워 승리한 과정을 다루고 있음. 이는 특허 괴물에 대한 경고 메시지를 전달하며, Cloudflare의 기술적 우수성을 입증함.
     * Project Jengo는 대중의 참여를 통해 특허 무효화를 도운 혁신적인 프로젝트로, 특허 괴물의 활동을 억제하는 데 기여함.
     * 이 기사는 특허 소송의 복잡성과 Cloudflare의 전략적 대응을 이해하는 데 유용하며, 특허 괴물에 대한 경각심을 높이는 데 도움을 줄 수 있음.

        Hacker News 의견

     * 전직 특허 심사관으로서 Project Jengo의 보상금이 너무 낮다는 점에 놀라움을 느낌. 수백 건의 제출물이 있었는데, $125,000을 모든 사람에게 나누어 주는 것은 너무 적음. Cloudflare가 진지하게 이 프로그램을 운영하려면 보상금을 늘려야 함.
          + 특허 트롤은 탐욕적이며 사회에 기여하지 않음.
          + Cloudflare의 소송 팀의 훌륭한 작업에 찬사를 보냄.
     * Cloudflare의 전략이 훌륭하지만, 더 악의적인 특허 트롤이 이를 우회할 수 있을까 걱정됨. Cloudflare의 법률 팀이 더 강해졌기를 바람.
          + Cloudflare와 과거의 Newegg 같은 회사들이 특허 트롤과 싸운 것에 찬사를 보냄.
          + 컴퓨터 분야 외의 기존 산업들이 여전히 특허 포트폴리오 회사들로 가득 차 있을까 두려움.
     * 기사를 읽었지만 몇 가지 이해되지 않는 점이 있음.
          + Sable이 특허 포트폴리오를 포기한 이유와 방법이 궁금함.
          + Cloudflare에 제기된 4개의 특허가 전체 포트폴리오인지, 아니면 소송 외의 특허도 포기했는지 궁금함.
     * Borchers의 증언 발췌문이 재미있음.
          + Cloudflare를 일반적으로 좋아하지 않지만, 특허 트롤과의 법정 외 합의는 비겁하다고 생각함.
     * 서부 텍사스 지구에서 특허 트롤과 싸운 것은 훌륭한 변호사들이 있었음을 의미함.
          + 그 지역의 배심원단이 잘 준비되어 있는 것 같음.
     * 특허 개혁이 필요하다고 생각함. 모든 특허는 특허의 모든 주장을 구현한 프로토타입을 요구해야 한다고 제안함.
     * 특허 트롤이 존재하는 이유가 궁금함. 특허만 보유하고 생산적인 일을 하지 않는 회사는 존재해서는 안 됨. 이는 개발과 혁신을 저해함.
     * 이번 합의에 다른 피해 당사자들이 지불한 금액이 공개되었으면 좋겠음.
          + 합리적인 법 체계에서는 실제 제품이 없는 단순한 ""특허 상자"" 회사의 존재가 불법이어야 하며, 특허 트롤은 존재하지 않을 것임.
"
"https://news.hada.io/topic?id=17016","캘리포니아, 사립대학에서 Legacy Admissions 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   캘리포니아, 사립대학에서 Legacy Admissions 금지

캘리포니아, 사립 대학에서 족벌 입학 금지

     * 캘리포니아 주지사 Gavin Newsom이 사립 대학에서 족벌 입학을 금지하는 법안에 서명함
     * 이 법안은 Stanford University, University of Southern California 등 주 내 사립 대학에 영향을 미침
     * 이 법안은 작년 여름 대법원이 인종 기반 입학 고려를 금지한 판결 이후 입학 규칙을 재작성한 전국의 대학들에 영향을 미침
     * University of California, California State University 시스템 및 기타 공립 캘리포니아 캠퍼스는 수십 년 동안 족벌 입학을 금지해 왔지만, 사립 대학은 여전히 졸업생이나 주요 기부자의 후손에게 일부 우대를 제공해 왔음

  미국 대학 캠퍼스에 대한 추가 정보

     * 포스트-어퍼머티브 액션 데이터: 많은 학교가 인종 구성을 계산하는 다른 공식을 사용하며, ""올바른"" 방법이 명확하지 않음
     * 새로운 대학 순위: 매년 U.S. News & World Report가 대학 순위를 발표하며, 이는 종종 거의 변하지 않지만 대학과 지원자들로부터 주목과 좌절을 불러일으킴
     * 어퍼머티브 액션: 작년에 Harvard를 상대로 대학 입학에서 어퍼머티브 액션을 끝내기 위해 성공적으로 소송을 제기한 그룹이 이제 학교들이 새로운 규칙을 준수하는지 조사하고, 그렇지 않다고 판단되면 소송을 제기할 것을 위협하고 있음
     * 많은 선택적 대학들이 역사적으로 졸업생의 자녀나 손자에게 특별 고려를 제공해 왔으며, 이는 캠퍼스 프로그램을 위한 기금을 강화하거나 재정적으로 어려운 학생들의 학비를 보조하기 위해 사용됨

GN⁺의 정리

     * 이 기사는 캘리포니아 주가 사립 대학에서 족벌 입학을 금지하는 법안을 통과시킨 것에 대해 다루고 있음
     * 이는 대학 입학 과정에서 공정성과 형평성을 높이기 위한 중요한 조치로 평가됨
     * 이 법안은 특히 Stanford University와 University of Southern California와 같은 명문 사립 대학에 큰 영향을 미칠 것임
     * 다른 주들도 이와 유사한 법안을 도입할 가능성이 있으며, 이는 전국적으로 대학 입학 정책에 큰 변화를 가져올 수 있음
     * 이 기사는 대학 입학에서 족벌 입학의 문제점과 이를 해결하기 위한 노력에 대해 잘 설명하고 있음

        Hacker News 의견

     * 법을 어긴 기관의 이름을 캘리포니아 법무부 웹사이트에 공개하는 것이 유일한 집행 메커니즘임
          + 이 방법이 주립 대학에 얼마나 중요한지 지켜볼 필요가 있음
          + 공식 정부 웹사이트에 이름이 공개되는 것이 미디어 보도와 크게 다르지 않음
     * 아이비리그 시스템은 부유한 학생의 돈과 접근성을 똑똑한 학생이 이용하고, 똑똑한 학생의 지능을 부유한 학생이 이용하는 구조임
          + 이는 상호 공생적이거나 기생적일 수 있음
          + 이러한 이유로 유산 입학이 존재함
     * 유산 입학에 대해 불만이 있지만, 이는 문제를 일으킬 수 있음
          + 사립 대학의 존재 이유는 그들의 배타성에 있음
          + 이는 기부금에 큰 영향을 미칠 수 있음
          + 캘리포니아의 공립 대학도 이미 배타성 문제를 가지고 있음
     * 사립 학교와 대학에서 ""많은 돈을 지불했기 때문에 입학시킨다""는 합법적인 선택 기준임
          + 이러한 법안이 얼마나 효과가 있을지 의문임
     * 대학의 1차 수정헌법 권리를 침해하지 않고 이를 관리하는 방법이 궁금했음
          + 캘리포니아 법은 유산 및 기부자 입학을 불법으로 규정하지만, 이를 위반한 대학에 대한 처벌을 명시하지 않음
          + 이는 ""불법""의 의미에 대한 질문을 제기함
     * 대학 입학 시스템은 매우 혼란스러움
          + 대학과 학생 모두 숫자로 평가됨
          + 이는 학생들을 비인간적으로 만들고 모든 대학을 동일하게 보이게 함
          + 유산 입학의 장점은 특정 대학의 경험을 원해서 입학하는 것임
          + 상위 대학에는 적용되지 않지만, 대부분의 대학은 상위 대학이 아님
          + 많은 대학이 특정 대학에 관심이 있는 학생들을 위한 ""사이드 도어"" 입학 정책을 가지고 있음
          + 예를 들어, 특정 전공을 위해 특정 대학에 입학하는 것은 합법적임
          + 유산 입학자는 이러한 사이드 도어를 알고 있음
          + 이러한 규칙은 주로 엘리트 대학을 대상으로 함
     * 대학 입학에서 차별 금지법을 집행하는 것이 얼마나 실현 가능한지 의문임
          + SFFA 대 하버드 사건 이후 Yale의 첫 학급에서 아시아인 등록이 감소함
          + 인종 기반의 긍정적 차별이 제거되면 아시아인 등록이 증가할 것이라는 충분한 증거가 있었음
          + 그러나 제거 후 유의미한 감소를 보인 유일한 인종 그룹은 아시아인이었음
     * 사립 대학이지만 매년 수십억 달러의 공적 자금을 받음
          + Stanford는 2023년에 연방 및 주 보조금으로 18억 달러를 받았음
          + Yale과 Harvard도 상위 10위 안에 있음
          + ""사립""이라는 명칭이 세금 지원을 받지 않는다는 의미는 아님
     * 유럽인으로서 이해되지 않는 점은, 사립 대학이라면 입학 여부를 결정하는 것이 그들의 권리 아닌가?
          + 인종 차별에 대한 보호는 이해할 수 있음
          + 그러나 큰 기부자가 자신의 자녀를 입학시키고 싶어 한다면 문제가 무엇인가?
"
"https://news.hada.io/topic?id=17022","보리스 발레호와 데모씬의 픽셀 아트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          보리스 발레호와 데모씬의 픽셀 아트

  Boris Vallejo와 데모씬의 픽셀 아트

     * Boris Vallejo는 1980년대와 90년대 판타지 책 표지, 컴퓨터 게임 박스 아트, 데모씬에 큰 영향을 미친 판타지 화가임
     * 그의 작품은 픽셀 아티스트들에 의해 복제되었으며, 이 기사에서는 네 가지 색상만을 사용하여 Boris Vallejo의 작품을 모방하는 그래픽을 만드는 과정을 다룸

  Boris Vallejo는 어떻게 되었을까?

     * Boris Vallejo는 페루 출신의 예술가로, 이상화된 전사와 공주를 그린 판타지 아트로 유명했음
     * 그의 작품은 1980년대와 90년대 픽셀 아티스트들에 의해 복제되었으며, Commodore Amiga, Atari ST, PC의 VGA 그래픽 등 16비트 플랫폼에서 많은 데모씬 그룹들이 그의 시각적 미학을 재현하거나 오마주함
     * Vallejo의 작품은 영웅적인 캐릭터와 신화적 또는 외계 세계를 배경으로 하여 데모씬의 많은 작품들과 유사한 테마를 탐구함
     * Vallejo는 현재 80대이며, 아내 Julie Bell과 함께 계속해서 작품을 제작하고 온라인에서 성공적으로 판매하고 있음

  데모씬에서의 인기 예술의 도용

     * 2024년 9월 기준으로 Demozoo에 ""boris-vallejo"" 태그가 붙은 이미지가 약 35개 제출되었음
     * 일본 예술가 Hajime Sorayama도 언급되었으며, 그의 하이퍼리얼리즘 에로틱 로봇과 사이보그 작품은 데모씬의 젊은 남성들에게 완벽한 조합이었음
     * Boris Vallejo와 Julie Bell은 1990년대에 컴퓨터 및 비디오 게임 박스 아트를 그리기도 했음
     * 데모씬에서 Vallejo의 작품을 스캔하여 사용하는 것은 논란이 되었으며, 일부는 이를 비판하고 다른 일부는 학습의 일환으로 인정함
     * AI 생성 아트와 관련된 현대의 논쟁과 유사한 논쟁이 있었음

  색상 제한을 사랑하게 된 방법

     * 제한된 색상 팔레트를 사용하여 Vallejo의 작품을 자신의 스타일로 복제하고자 함
     * 제한된 색상 팔레트는 구성을 더 집중하게 만들고, 형태와 대비에 더 신경 쓰게 만듦
     * Procreate를 사용하여 iPad Pro에서 Apple Pencil로 작업함
     * 최종 결과물에 만족하며, 색상 제한 내에서 작업하는 방법을 많이 배움

  GN⁺의 정리

     * Boris Vallejo는 1980년대와 90년대 판타지 아트와 데모씬에 큰 영향을 미친 예술가임
     * 그의 작품은 픽셀 아티스트들에 의해 복제되었으며, 이는 데모씬에서 논란이 되었음
     * 제한된 색상 팔레트를 사용하여 Vallejo의 작품을 복제하는 과정에서 많은 것을 배울 수 있었음
     * AI 생성 아트와 관련된 현대의 논쟁과 유사한 논쟁이 있었음
     * Procreate와 같은 도구를 사용하여 제한된 색상 팔레트 내에서 작업하는 방법을 배움

        Hacker News 의견

     * Amiga와 초기 Windows 데모 시절의 그래픽 아티스트 경험
          + Vallejo의 영향이 컸음
          + 데모씬 그래픽은 기술적 경쟁이었음
          + 16세 소년들이 Frazetta처럼 그리기 어려웠음
          + 팔레트 트릭, 수작업 디더링, 안티앨리어싱 기술이 중요했음
          + 손으로 픽셀링한 이미지와 스캔한 이미지를 구별할 수 있었음
          + 320*240 이미지에서 모든 디테일이 눈에 띔
          + 16세에 Deluxe Paint IIe로 작업한 이미지 링크: 링크
          + 1998년에 마지막으로 손으로 픽셀링한 이미지 링크: 링크
     * 제한된 색상 팔레트 사용에 대한 강연
          + GDC 2016에서 Mark Ferrari의 강연 링크: 링크
          + 8비트 게임 그래픽에서 색상 순환과 팔레트 이동 기술 설명
          + GDC 강연은 게임 디자인, 프로그래밍, 오디오, 비주얼 아트 등 다양한 주제를 다룸
     * 제한된 색상 팔레트에 대한 경험
          + Evoke에서 제한된 색상 팔레트를 사용한 그래픽 대회 경험
          + 처음에는 싫어했지만 점점 도전으로 받아들였음
          + 제한이 예술적 영감을 줄 수 있음
          + 글리치 아트 작업에서 제한이 동기부여가 됨
          + 제한된 색상 깊이가 디테일에 집중하게 만듦
     * Amiga의 중요성
          + 1980년대 Amiga는 PC보다 앞서 있었음
          + 비디오 기능이 Amiga의 강점이자 약점이었음
     * Vallejo와 Julie Bell의 영향
          + 판타지 일러스트에 큰 영향을 미쳤음
          + 해부학 공부에 도움이 됐음
          + Burne Hogarth, Frank Frazetta, Boris Vallejo, Julie Bell, Luis Royo, Sorayama 등도 큰 영향을 줌
     * Vallejo와의 만남
          + 1980년대에 Vallejo를 만났음
          + Vallejo는 보디빌더였고, 자신의 그림 모델이었음
          + 그의 아내도 많은 그림에 등장했음
     * ""no copy?"" 사이트
          + 링크
          + 데모씬에서 복사와 창의성의 경계에 대한 논의
          + Amiga 음악가들이 기존 신스의 프리셋을 샘플링하는 것에 대한 관용
          + 그래픽 아티스트들이 Vallejo의 그림을 손으로 다시 그리는 것에 대한 인정
     * 예술적 영향
          + 한 예술가의 비전이 다양한 예술 매체에 영향을 미침
          + 80년대 판타지의 얼굴이 된 이유에 대한 궁금증
          + 추가 자료 추천 요청
"
"https://news.hada.io/topic?id=17003","Visual Studio Code 설계 결함 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Visual Studio Code 설계 결함 (2022)

    Visual Studio Code는 분열을 위해 설계됨

     * Visual Studio Code는 오픈 소스이지만, Microsoft가 제공하는 공식 배포판 외의 다른 방식으로 사용하면 법적 위험이 발생할 수 있음

    Visual Studio Code는 이제 7년이 됨

     * Visual Studio Code는 7년 전에 출시되어 소프트웨어 개발의 표준 편집기로 자리 잡음
     * 소스 코드는 MIT 라이선스로 공개되었지만, 다운로드 가능한 제품은 독점 라이선스로 제공됨
     * Microsoft는 이를 통해 오픈 소스 커뮤니티를 분열시킴

    VSCodium은 OSS 데스크탑 배포판임

     * VSCodium 프로젝트는 독점 라이선스 사용에 대한 우려로 시작됨
     * Microsoft의 커스터마이징 없이 MIT 라이선스로 빌드됨
     * Microsoft Visual Studio Code Marketplace에 연결할 수 없고, 생태계 분열 문제를 겪음

    OpenVSCodeServer는 OSS 서버 배포판임

     * OpenVSCodeServer는 Gitpod의 백본으로 사용되는 서버 배포판임
     * VSCodium과 마찬가지로 Microsoft Visual Studio Code Marketplace에 연결할 수 없음
     * Gitpod 직원들이 주로 유지 관리함

    구독이 아닌 IDE는 사라지고 있음

     * Microsoft는 소프트웨어를 서비스로 전환하는 내부 변화를 시작함
     * Azure 클라우드 컴퓨팅 서비스는 AWS의 경쟁자로 성장함
     * 개발자 도구 생태계도 서비스 모델로 전환 중임

    GitHub는 기존 Microsoft 기술의 화이트 라벨임

     * Microsoft는 2018년에 GitHub를 인수하고, 2019년에 Visual Studio Online을 출시함
     * GitHub Codespaces는 Visual Studio Online의 화이트 라벨임

    생태계가 분열되도록 설계됨

     * Gitpod와 같은 회사는 Visual Studio Code 생태계에서 법적 문제를 겪을 수 있음
     * Microsoft는 독점 확장을 통해 시장을 전략적으로 분열시킴
     * Python, .NET, C/C++, Java와 같은 주요 프로그래밍 언어의 도구는 Microsoft의 통제 하에 있음

    해결 방법은 무엇인가?

     * 소프트웨어 개발 도구의 미래는 폐쇄적임
     * 오픈 소스 생태계를 유지하기 위해 새로운 운동이 필요함
     * Gitpod는 OpenVSX 프로젝트를 통해 일부 문제를 해결했지만, 더 많은 노력이 필요함

    GN⁺의 정리

     * Visual Studio Code의 독점 라이선스와 생태계 분열 문제를 다룸
     * Microsoft의 전략적 시장 분열과 법적 위험을 강조함
     * 오픈 소스 생태계를 유지하기 위한 새로운 접근 방식이 필요함
     * Gitpod와 같은 회사들이 직면한 도전과제를 설명함

   vim이나 zed 쓰는 방안을 고려해보고있어요

   제가 opacity가 설정된 터미널을 쓰고있는데,
   nvim 배경색 없에는 방법 혹시 아시나요?
   이거만 찾으면 nvim 꼭 써보고싶은데...ㅁ

   kitty 터미널을 쓰신다면 같은 배경색으로 처리하면 투명 적용 될거예요.
   아니면 이런 플러그인을 고려해 보시는 것도..

   https://github.com/xiyaowong/transparent.nvim

   감사합니다. 한 번 알아보겠습니다

   성공했습니다. 감사합니다. 좋은 하루 보내세요.

        Hacker News 의견

     * 소스가 공개된 소프트웨어에 대해 사람들은 분노를 표출함
          + Microsoft가 핵심 저장소는 OSS로 제공하지만, 유용한 기능은 DRM과 법적 함정으로 가득 찬 경우에는 침묵함
          + Microsoft가 FOSS 지지자들을 달래기 위해 OSS처럼 보이지만 실제로는 아닌 것을 제공함
          + Open Source Definition이 2024년에는 이러한 문제를 해결하기에 부적합함
          + Pylance 확장에 얼마나 많은 DRM이 있는지 확인해보면, Microsoft가 DRM을 사용하여 공식 VSCode 체크를 제거할 수 없게 만듦
     * VSCode의 생태계는 여러 면에서 약함
          + cpptools는 놀랍지만 자주 오작동하고 디버깅이 어려움
          + VSCode의 보안 문제는 매우 심각함. 확장 기능이 샌드박스 처리되지 않음
          + AI를 사용할 때는 LLM을 신뢰해서는 안 됨. LLM이 악의적인 코드를 작성할 수 있음
          + 더 나은 생태계를 만들 기회가 있음. 예를 들어, cpptools의 대체품은 인터넷 접근 없이 텔레메트리가 없어야 함
     * cpptools 확장에 대한 좋은 댓글 스레드가 있음
          + 소스에서 빌드하는 것이 불가능하다는 의견이 있음
          + OSS 라이선스와 빌드 종속성이 모두 OSS 라이선스인 새로운 용어가 필요함
     * VS Code는 Microsoft에서 무료로 다운로드하고 사용할 수 있는 IDE임
          + 모두가 ""범용"" 개발자 서비스를 만들고 싶어하지만, IDE를 구축하거나 자금을 지원하는 것은 어려움
          + Microsoft의 잘못이 아님
     * VS Code를 만드는 50명 이상의 정규직 직원들이 연간 약 2000만 달러의 예산을 정당화하는 모델을 제안하지 않으면, 이는 Microsoft의 엔지니어링 작업을 이용하려는 시도로 보일 수 있음
     * 문제를 이해하려고 노력 중임
          + MS가 더 나은 cpptools/C++ 확장을 만들고 있으며, 많은 MS 구성 요소가 닫혀 있어 완전한 OSS 버전을 빌드하는 것이 불가능함
          + 사용자가 웹 인터페이스에서 네이티브 확장을 사용할 수 없다는 것을 발견하면 문제가 됨
          + OSS 소프트웨어 대신 이 프리웨어를 사용하고 싶다면 실망스러울 수 있지만, 그것이 정말 문제인지 의문임
     * 주요 확장 프로젝트가 정렬되면, 그들은 단순히 위와 같은 공지를 마켓플레이스 페이지 설명에 추가할 수 있음
          + Apple은 현재 마켓플레이스 소송에 직면해 있음. MS는 또 다른 반독점 소송을 원하지 않음
     * ""Microsoft가 제공하는 무료 소프트웨어가 충분히 개방적이지 않다""는 현대의 가장 이상한 견해 중 하나임
          + Microsoft가 오픈 소스 대안을 방해하지 않고 있음. 단지 그들이 더 좋지 않음
          + 무료로 제공되는 소프트웨어를 당연하게 여기는 사람들이 많음
          + 과거에는 IDE를 수백 또는 수천 달러에 구매해야 했음
     * 이 기사가 텔레메트리에 대한 불만과 실제 제한 사항을 분리하면 더 이해하기 쉬울 것임
     * 마음에 들지 않으면 사용하지 말라는 의견이 있음. vim/nvm과 eMacs는 생태계를 타협하지 않는 유능한 편집기임
"
"https://news.hada.io/topic?id=17033","HN 질문: 원치 않는 문자에 STOP이라고 답해야 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN 질문: 원치 않는 문자에 STOP이라고 답해야 할까?

     * 내가 아는 사람들에게 스팸 문자를 차단하고 삭제한 후 신고하라고 조언해 왔음
     * 다른 사람들은 STOP이라고 답장해야 한다고 주장함
     * 단축 링크가 포함된 ""캠페인"" 문자에서 피싱 시도를 발견한 후 STOP 답장을 반대하게 됨
     * 여러분의 의견은 어떠한지 궁금함

GN⁺의 정리

     * 스팸 문자에 대한 대처 방법에 대한 논의
     * STOP 답장이 피싱 시도로 이어질 수 있는 위험성
     * 스팸 문자를 차단하고 신고하는 것이 더 안전할 수 있음
     * 독자들에게 스팸 문자 대처 방법에 대한 다양한 의견을 제공함

        Hacker News 의견

     * 몇 년 전 ""STOP"" 메시지를 보낸 후, 인기 있는 송금 앱에서 SMS를 받을 수 없었음
          + 문제 해결에 한 달 이상 걸렸으며, ""UNSTOP""을 보내야 SMS를 받을 수 있었음
          + 여러 앱이 공유하는 번호였음
     * 플랫폼에 따라 ""STOP"" 메시지 처리 방식이 다름
          + Twilio를 사용하는 경우, ""STOP""을 보내면 Twilio가 메시지 수신을 차단함
          + 다른 통신사나 자체 VOIP 설정을 사용하는 경우, ""STOP""이 적용되지 않을 수 있음
     * 스팸 메시지에 대해 ""STOP""을 보내는 대신 스팸으로 신고함
     * iOS의 ""Report junk"" 버튼을 사용하여 스팸 메시지를 신고함
          + 정치적 스팸 메시지를 보내는 회사를 찾아 연락하여 번호를 블랙리스트에 올림
          + 스팸 메시지가 크게 줄어들었음
     * 스팸 메시지를 줄이기 위해 다음과 같은 방법을 사용함
          + iMessage에서 필터링 뷰를 켬
          + 통신사에 직접 스팸을 신고함
          + 스팸 번호를 찾아 통신사에 신고 양식을 작성함
     * 원치 않는 메시지에 절대 답장하지 말아야 함
          + 스토커와 스팸 발송자에게 반응을 보이는 것은 부정적인 효과만 있음
     * 정치 캠페인에 기부한 후, 여러 후보자로부터 스팸 메시지를 받게 됨
          + ""STOP""을 보내도 다른 번호에서 메시지가 계속 옴
     * Bouncer는 무료 오픈 소스 SMS 필터링 앱으로, 정치적 스팸을 0으로 줄여줌
          + iOS의 SMS 필터링 프레임워크를 사용하여 프라이버시를 보호함
     * OS 제조사들이 텍스트 스팸을 인식하고 이메일 스팸 방지 메커니즘을 도입해야 함
     * ""Report junk""는 합법적이거나 반합법적인 스팸에 효과가 없음
          + 스팸 게이트웨이가 명시적인 비동의 증거를 요구함
     * 미국의 통신사들은 스팸 번호를 차단하지만, 새로운 번호를 얻는 것이 쉬움
          + 스팸 메시지를 완전히 차단하려면 소송이 필요함
          + 위반당 최대 $1500의 벌금이 부과될 수 있음
"
"https://news.hada.io/topic?id=17049","OpenAI가 DevDay에서 발표한 모든 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       OpenAI가 DevDay에서 발표한 모든 것들

주요 발표

     * ChatGPT의 고급 음성 모드와 유사한 기능을 구현할 수 있게 해주는 Realtime API
     * o1 모델의 Rate Limit을 GPT-4o와 같도록 상향(분당 1만회)
     * 자동 프롬프트 캐싱으로 GPT-4o API의 가격 인하. 반복된 호출에 대해서 추가 개발없이 50% 저렴
     * 멀티 모달 파인튜닝 API
     * 작년부터 올해까지 OpenAI 플랫폼에서 활동 중인 앱 수는 3배 증가했으며, 활동 중인 개발자 수는 300만 명에 달함

o1 모델에 대한 개요

     * OpenAI는 새로운 추론 모델인 o1을 출시하였음
     * o1은 기존의 GPT-4o와는 다른 새로운 모델 군으로 분류됨
     * OpenAI는 다양한 사용 사례에 맞는 여러 모델을 개발하는 것이 미래의 방향이 될 것이라고 봄
     * o1은 체인 사고 형태로 생각할 수 있는 능력이 뛰어나 프로그래밍 작업에 적합하지만 속도가 느리고 비용이 많이 듦
     * 대부분의 프롬프트는 o1의 고급 추론 능력을 필요로 하지 않기 때문에 o1은 기본 모델이 되지는 않을 것임
     * OpenAI의 개발자 관계 책임자인 Romain Huet은 o1을 사용하여 단일 프롬프트로 30초 만에 iPhone 앱을 처음부터 끝까지 제작하는 시연을 선보임
     * 또한 무대에 드론을 가지고 나와 웹 앱을 제작하여 청중들 앞에서 드론을 조종하는 시연도 보여줌
     * 이전 GPT 모델로도 이러한 시연이 가능했겠지만, o1을 사용하면 훨씬 빠르게 제작할 수 있음
     * o1은 아이디어에서 앱까지 1~2분 안에 만들 수 있는 미래를 보여줌

음성 대화형 실시간 API

     * OpenAI가 출시한 가장 인상적인 기능은 실시간 API로, 개발자가 자신의 앱에 ChatGPT의 고급 음성 모드와 유사한 기능을 구현할 수 있게 해줌
     * 개발자는 녹음된 오디오를 OpenAI 서버로 전송하고 실시간으로 녹음된 응답, 녹취록, 함수 호출을 받을 수 있음
     * 실시간 API는 오늘부터 공개 베타로 출시되며, 향후 비디오와 같은 더 많은 양식도 지원할 예정임
     * 실시간 API는 분당 오디오 입력 0.06달러, 오디오 출력 0.24달러로 총 0.15달러의 비용이 듦 (오디오 입출력이 동일하다고 가정)
     * 이는 분당 약 0.11달러인 ElevenLabs의 음성 대 음성 서비스보다 비싸지만 사용량에 따라 비용을 지불하는 것은 아니고 매월 일정량의 시간을 구매해야 함
     * 실시간 음성은 더 나은 독서 도우미, 더 몰입감 있는 언어 교습 등 많은 새로운 사용 사례를 열어줌

파인튜닝 도구

     * OpenAI는 여러 모델을 사용하는 것이 하나의 큰 모델을 사용하는 것보다 낫다는 아이디어를 진지하게 받아들이고 있음
     * 기업이 자신의 사용 사례에 맞게 GPT-4o의 맞춤형 버전을 만들 수 있도록 지원함
     * OpenAI는 모든 기업이 자신의 데이터에 접근할 수 있는 미세 조정된 모델을 보유하게 될 미래를 그리고 있음

이미지 파인튜닝 API

     * 누구나 자신의 이미지 데이터를 사용하여 GPT-4o를 파인튜닝할 수 있음
     * 예를 들어 의료 분야에서 일하면서 GPT-4o가 MRI를 읽고 레이블을 지정하는 능력을 미세 조정하고 싶다면 이 API를 사용할 수 있음

모델 증류 도구

     * OpenAI는 특정 사용 사례에 맞게 구축된 더 작고 빠르고 저렴한 버전의 파운데이션 모델을 만드는 과정인 모델 증류를 더 잘할 수 있도록 두 가지 도구를 출시함
     * 개발자 플레이그라운드에서 이전 API 상호 작용을 기록하고 이를 미세 조정을 위한 데이터로 사용할 수 있는 기능을 추가하여 증류를 더 쉽게 만듦
     * 또한 개발자가 미세 조정된 모델의 성능을 평가할 수 있도록 플레이그라운드에 Evals 도구를 추가함

프롬프트 캐싱으로 반복 API 호출 비용 50% 절감

     * OpenAI는 반복되는 API 호출을 감지하고 이전에 생성된 응답을 반환하는 새로운 프롬프트 캐싱 기능을 출시함
     * 이 기능은 오늘부터 자동으로 작동하며 개발자가 추가 작업 없이도 많은 API 호출 비용을 50% 절감할 수 있음
     * 이 기능은 OpenAI가 API 사용 비용을 점점 더 저렴하게 만들기 위해 경쟁하는 추세의 연장선임
     * 개발자에게는 좋은 소식이지만 OpenAI의 가장 큰 파트너인 마이크로소프트와는 흥미로운 역학 관계를 만들어냄
     * 마이크로소프트는 대기업들이 용량을 보장받기 위해 GPT-4 API 호출을 일정 금액 이상 사전 구매하도록 압박해 왔음
     * 이미 구매 약정을 한 마이크로소프트와 고객들이 이러한 가격 인하를 어떻게 생각할지 궁금해짐

OpenAI의 전략

  1. 다양한 사용 사례에 맞는 여러 모델 개발에 주력

     * OpenAI는 하나의 모델로 모든 것을 처리하기보다는 여러 모델을 함께 사용하는 것이 가장 효과적인 애플리케이션이 될 것이라고 믿음
     * 개발자는 o1과 같이 추론에 강한 모델과 GPT-4o와 같이 긴 맥락이나 이미지 프롬프트 처리에 강한 모델을 함께 사용하여 사용자에게 일관된 경험을 제공할 수 있음

  2. o1은 자율적으로 작업할 수 있는 에이전트로 가는 중요한 단계

     * 에이전트는 오랫동안 가장 섹시한 AI 애플리케이션 중 하나였지만, 이전 GPT 모델은 작업을 스스로 해결하려고 하면 제대로 작동하지 않을 가능성이 높았음
     * o1은 자신의 사고 과정을 성찰하고 다음 단계를 계획할 수 있는 능력 덕분에 진정으로 자율적인 에이전트를 만드는 데 핵심 역할을 할 것으로 기대됨

  3. 개발자가 사용자를 위해 놀라운 경험을 만들 수 있는 기술이 엄청나게 많아짐

     * 단 몇 년 전만 해도 오늘 시연된 것들 중 어느 것도 불가능했거나 관심 밖이었다는 것을 잊기 쉬움
     * 오늘날 여가 시간에 앱을 만드는 단일 개발자조차도 이전에는 전체 개발팀도 할 수 없었던 일을 해낼 수 있음
"
"https://news.hada.io/topic?id=16999","AI: 디스토피아인가 유토피아인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI: 디스토피아인가 유토피아인가?

     * 코슬라 벤처스 Vinod Khosla의 글

1. 서론

     * 40년 동안 파괴적 혁신에 헌신하고 연구해 왔음. 마이크로프로세서로 시작하여 Sun Microsystems에서 선구적으로 분산 컴퓨팅과 개인용 컴퓨터의 발전을 이끌었음
     * 1996년 브라우저의 출현은 또 다른 획기적인 전환점이었음. Netscape에 투자하고 Juniper를 육성하여 인터넷의 기본 TCP/IP 백본을 구축했음. 이는 인터넷 혁명의 새벽이었고, Amazon과 Google 같은 신생 거대 기업에 전략적 투자를 했음
     * 2007년 iPhone의 등장과 함께 모바일 플랫폼 시대가 도래했음. 각 새로운 플랫폼은 거대한 애플리케이션 혁신과 새로운 아이디어의 폭발을 가능하게 했음
     * 정도(degree)의 차이가 종류(kind)의 차이가 되는 지점이 있는데, AI는 이전의 기술 단계 변화와는 다른 종류일 가능성이 높음. 마이크로프로세서, 인터넷, 모바일 폰은 인간의 두뇌를 활용하기 위한 도구였지만 AI는 인간의 두뇌 자체를 증폭시키고 곱함
     * 증기 기관과 모터의 출현이 근육 힘을 증폭시킨 것처럼, AI는 이에 대한 지적 병행을 이룸. 전문성, 사고력, 지식을 곱할 수 있는 능력은 향후 10년 동안 인간 두뇌 능력을 크게 초월할 수 있음을 의미함
     * 인공지능은 전례 없는 풍요로움의 미래를 약속함. 단기적으로는 대체되는 사람들에게 고통스러울 수 있지만, 잘 추론된 정책을 통해 그 후유증을 완화할 수 있음
     * 앞으로의 0-10년, 10-25년, 25-50년 시간대는 서로 크게 다를 것임. 인간 지능을 훨씬 뛰어넘는 기술 능력과 분야별 사회 침투율에 대해 변화 속도를 예측하거나 예상하기 어려울 것임
     * 미래가 디스토피아적인지 유토피아적인지에 대한 현재의 혼란을 가중시키는 것은 수반되는 실패와 함께 견해를 왜곡하는 현재의 AI 과대광고(Hype) 사이클임
          + 대부분의 AI 벤처는 재정적 손실로 끝날 것임
          + 하지만 세상을 바꾸는 소수의 기업들에 의해 총체적으로는 손실보다 더 많은 돈이 벌어질 것
          + 가장 흥분시키는 것은 AI의 수익 규모가 아니라 세상의 흐름을 바꾸고 사회 인프라를 더 나은 방향으로 재창조할 수 있는 잠재력

2. AI에 대한 디스토피아적 견해

     * 비관론자(Pessimists)들과 파멸론자(Doomers)들은 디스토피아적 미래를 경제적, 사회적 측면에서 묘사함
          + 그들의 우려에 대해 나는 대부분 근거 없고, 근시안적이며, 과장되고, 실제로 유해하다고 지적함
          + 이러한 우려는 사회적 선택을 통해 해결 가능함
          + 나는 파멸론자들의 디스토피아가 위험/보상 측면에서 잘못된 계산이라고 봄
          + AI의 위험은 실재하지만 관리 가능함
     * 현재의 논쟁에서 파멸론자들은 ""나쁜 지적 AI""의 작은 위험에 초점을 맞추고 있으며, 가장 명백한 위험인 ""국가""나 다른 악의적 행위자에게 AI 경쟁에서 지는 것을 간과하고 있음
          + AI를 두려워하고 민주주의를 침식하며 사회를 조종할 수 있다고 우려하는 사람들이 가장 두려워해야 할 위험임
          + 중국에게 지면 안 되는 이유이자, 전 인류를 위해 AI를 사용해야 하는 이유임
     * 중국은 파멸론자들의 악몽이 가장 빨리 실현되는 방법임
          + ""세계에서 가장 강력한 기술의 공평한 분배를 위해 시진핑과 그의 푸틴 같은 측근들을 믿을 준비가 되셨나요? 그게 바로 디스토피아일 것""

  A. 일자리 감소와 경제적 불평등

     * 경제적 디스토피아에서는 부가 상위층에 집중되는 반면 지적, 육체적 노동의 가치가 떨어지고, 광범위한 실업과 디플레이션이 경제와 구매력을 파괴하며, 불평등이 심화됨
          + AI는 소수의 엘리트는 번영하는 반면 나머지는 경제적 불안정에 직면하는 세상을 만들 수 있음. 특히 강력한 정책 없이 표류하는 민주주의에서 그러함
          + 그러나 소득 재분배, 최소 생활 수준 보장(아마도 UBI?, Universal Basic Income), 민주주의에 의해 주도되는 전략적 입법 등 현명한 개입을 통해 이를 방지할 수 있음
          + 자본주의와 세금 구조는 민주주의의 허락하에 있으며, 민주주의는 이러한 전환을 가능케 할 수 있음
     * 좋은 소식은 AI가 충분히 부를 창출하여 모두에게 돌아갈 수 있으며, AI가 없는 세상보다 모두가 더 나아질 것이라는 점
          + 고령화되는 글로벌 인구와 줄어드는 젊은 노동자 풀을 고려하면 AI는 필수적임
          + 올바른 정책으로 전환기를 순조롭게 하고 3일 근무제를 도입할 수도 있음
     * GDP 성장률이 2%에서 5%로 뛰면 ""전환 기금""을 만들 수 있는 풍요로움이 생길 것임. 노르웨이 같은 국가의 번영을 이끈 석유 기금과 유사함

  B. 사회 통제와 조작

     * 사회적으로 부정론자들은 AI가 만연한 감시로 시작해 인류를 위협하는 세상을 그림
          + 그러나 이러한 결과는 불가피한 것이 아님. 각 나라별로 시행되는 입법이 AI가 우리 삶에 어떻게 통합될지 결정할 것임
          + 민주 사회에서 이는 집단적 선택이 될 것임. 나는 범죄가 줄어드는 사회를 위해 어느 정도 자유를 양보할 용의가 있음. 그렇다고 전체주의를 수용하자는 것은 아님
          + AI로 인해 범죄의 이유 자체가 줄어들 수도 있음
          + AI의 법적 사용에 제약을 가하려 한다면, AI의 발전으로 인한 이점을 누리면서도 알람주의자들이 예측하는 디스토피아적 비전에 굴복하지 않는 합리적인 균형을 이룰 수 있음
     * 추가적인 우려로는 AI가 여론을 조작하고, 정보를 통제하며, 타겟팅된 선전이나 딥페이크 기술을 통해 선거에 영향을 미치는 데 사용될 수 있다는 점이 있음
          + 실제로 2024년 미국 대선에서 러시아의 간섭이 이미 목격되고 있으며, 더 강력한 AI로 인해 상황이 훨씬 더 악화될 수 있음. 이는 민주주의를 훼손하고 진실을 식별하기 어려운 사회를 만들 수 있음
          + 그러나 조작과 통제에 대한 우려는 단일의 전제적 AI 통치자가 있을 것이라는 가정에 의존하는데, 이는 현실성이 떨어짐
          + 더 가능성이 높은 것은 각기 다른 이해관계를 위해 봉사하는 다양한 AI를 보게 될 것이라는 점
     * 내가 구상하는 것은 모든 개인을 위한 개인 AI 에이전트로, 조작적 마케팅과 오늘날의 브레인 해킹으로부터 그들을 보호하도록 설계된 것. 여기서 브레인 해킹이란 마케터들이 소비자들로 하여금 그렇지 않았다면 사지 않았을 물건을 사거나 클릭하게 만드는 것
          + 우리는 강력한 AI가 각 개인을 대변하고 보호할 것으로 예상됨
          + 디지털 시대의 ""스파이 대 스파이""로 생각해 보라. AI는 우리를 조종할 유인을 가진 기업 AI에 맞서 소비자이자 시민으로서 우리에게 힘을 실어줌

  C. 인간 주체성의 상실과 AI 시스템의 윤리적 고려사항

     * 의료, 사법, 거버넌스 등의 영역에서 AI가 중요한 결정을 내리는 것에 대한 우려는 현재 시스템의 숨겨진 편견을 고려할 때 타당함
          + 그러나 이러한 편견은 인간에게서 비롯되며, AI는 이를 인식하고 바로잡을 기회를 제공함
          + 예를 들어, 인간 의사는 수술에 대한 보수를 받으면 더 많은 수술을 하는 경향이 있으며, 이들이 편견이 없다고 주장하기는 어려움
          + AI는 편견 없는 진료를 제공할 수 있는 유일한 방법이 될 것임. AI는 편견을 드러내고 이를 교정할 것임. 이는 풍요로운 세상과 더 공평한 접근성을 만들어 낼 것
          + 내 견해로는 인간은 AI의 의사 결정 권한을 취소할 수 있는 권력을 보유할 것이며, 이를 통해 AI가 통제되지 않는 힘이 아닌 인간의 합의에 의해 인도되는 ""기관""으로 남게 될 것임
          + 지각 있고 악의적인 AI의 망령은 위험하지만, 우리가 완화할 수 있는 위험임
     * AI가 일을 재편하고 궁극적으로 의료, 사법, 거버넌스에서 결정을 내리면서 잠재적으로 인간의 지성과 판단을 무시함에 따라, 우리는 인간의 목적을 재정의하고 현재의 결과를 개선할 기회에 직면함
          + 오늘날 우리는 6세부터 학교에서 교육을 받아 직업을 확보하도록 프로그래밍되는데, 이는 결국 우리의 자아감의 상당 부분을 형성하게 됨
          + 그러나 25년 후에는 이러한 절박한 의무 없이 아이들에게 탐구, 상상, 발견, 실험을 가르칠 수 있을 것임
          + 사람들을 생존을 위한 일자리에서 해방시키는 것은 인간이 된다는 것의 의미를 재정의하고, 우리의 ""인간다움""을 증가시키며, 우리의 목표의 다양성을 확장할 수 있음
     * 궁극적으로 ""인간다움""은 생존 노역의 사슬에서 벗어나 이러한 동기를 추구할 자유에 의해 정의될 것임
          + 무엇보다도 자원 경쟁이 적은 세상에서는 더 많은 인간이 외부의 압력보다는 내적 동기에 의해 움직이기를 바람
          + 사회와 개인은 개인적으로 활용하고자 하는 기술과 시간을 투자하고 싶은 곳을 선택할 수 있을 것임
          + AI 활용 없이 개인적인 결정을 내리는 것을 좋아하는 사람이라면 코파일럿 없이 자유롭게 나아갈 수 있을 것임. 우리에게 강요되는 것은 없을 것임
          + AI는 지배자가 아니라 우리의 필요와 요청을 충족시키기 위해 사용할 수 있는 도구가 될 것임
          + 작은 규모로 미국의 아미쉬 사람들은 선택에 의해 기술을 포기함. 수천 개의 그러한 공동체가 있을 수 있음
     * 위의 내용에 따라 AI에 대한 의존이 인간의 윤리 및 도덕적 기준을 약화시킬 수 있다는 우려가 있음
          + AI 시스템이 윤리적 고려사항보다 효율성을 우선시하도록 프로그래밍되면 유해하거나 부당한 결정이 내려질 수 있음
          + 그러나 이는 기계가 아닌 인간이 내리는 사회적 선택임. 잘못된다면 책임은 우리가 져야 함
     * 동일한 이유로, 비관론자들이 기계가 인간의 가치, 윤리, 감정에 대한 미묘한 이해가 부족하기 때문에 윤리적, 도덕적 퇴보를 우려할 때, 나는 인간이 책임지는 것이 훨씬 더 큰 위험이라고 제안하고 싶음
          + 정렬(Alignment)은 중요하지만, 인간이 집단을 조율하고 결정을 내리려 할 때도 마찬가지로 말할 수 있음. 먼저 같은 목표를 갖는 것이 중요함
          + AI는 우리의 지시를 이해하고 따를 만큼 강력하거나 그렇지 않음. 우리는 둘 다 가질 수는 없음
          + 완전히 독립적인 AI는 아래에서 다루는 다른 더 큰 위험을 야기할 수 있지만, ""충분히 스마트한 AI""가 우리의 지시를 이해하지 못하는 것은 그 중 하나가 아님

  D. 창의성과 비판적 사고력 상실

     * AI 세상에서 인간의 창의성과 비판적 사고력이 약화될 것이라는 우려에 대해 나는 그것이 편협한 시각이라고 생각함
          + 비평가들은 AI 알고리즘이 사용자에게 좁은 범위의 에코 챔버 아이디어를 제공하여 문화적 동질화가 일어날 것을 우려함
          + 또한 AI에 지나치게 의존하면 사람들이 기계에 의사 결정을 맡기면서 인간의 창의성, 문제 해결 능력, 비판적 사고력이 저하될 수 있다고 걱정함
     * 그러나 나처럼 음악적 재능이 전혀 없는 사람도 AI를 통해 딸의 결혼식 때 내가 작성한 연설문을 전달하는 개인화된 노래를 만들 수 있는 세상을 보고 있음
          + 실화임. 이건 나에게 큰 의미가 있었음
          + AI를 통해 우리는 현재의 한계와 능력을 넘어 창의성을 확장할 수 있음
          + 훌륭한 예술가, 화가, 공연자들은 이러한 도구를 더욱 잘 활용할 수 있을 것임
     * AI 시스템은 창의적인 작업에서 더 뛰어나거나 다를 수 있고, 곧 감정과 공감을 표현할 수 있으며, 그렇게 함으로써 인간을 보완할 수 있기 때문에 나는 인간성의 상실이 아니라 오히려 인간성의 증강, 향상, 확장이라고 생각함

  E. AI의 자율성, 실존적 위험, 패권 그리고 중국

     * 가장 극단적인 관점에서 비관론자들은 AI가 통제 불능 상태가 되어 인류를 멸종시킬 수 있다고 경고함
          + ""감정을 가진, 독립적이고, 악의적인 AI""의 위험은 아마도 AI가 야기하는 가장 심각한 위협이며, 우리가 진지하게 받아들여야 할 위협임
          + AI가 급격히 인간의 통제를 벗어나는 ""급격한 이륙(Hard Take-Off)""의 개념은 실제적이며 경계를 요하지만, 이 위험을 AI가 인류에 제공하는 엄청난 이점 또는 적대적인 국가의 손에 AI가 만들어내는 위험과 비교하여 평가하는 것이 중요함
     * ""AI의 대부""로 널리 알려진 요슈아 벤지오와 제프리 힌튼도 이러한 우려에 공감함
          + 단백질 구조 모델링과 같은 전문 작업에서 기계가 이미 인간의 능력을 능가하고 있는 가운데, 벤지오는 향후 10년 이내에 인간 지능을 능가하는 범용 AI가 등장할 수 있다고 경고함
          + 힌튼과 함께 벤지오는 악의적인 행위자나 조직에 의해 오용되는 AI의 재앙적 위험에 대해 경고함
          + AI가 자기 복제하고, 생존을 보호하며, 인간의 개입에 불침투성인 시스템을 구축하고, 디지털 인프라의 취약점을 악용할 수 있는 잠재력은 민주주의를 불안정하게 만들 뿐만 아니라 전 인류를 전복시킬 수 있음
          + 이러한 우려는 AI 자체에 관한 것일 뿐만 아니라 그러한 강력한 도구에 대한 접근성이 널리 퍼지고 악의적인 의도를 가진 사람들의 손에 떨어지는 것에 관한 것임
          + 벤지오는 AI 개발을 규제하고 오용을 방지하며 인류를 보호하기 위한 대책을 개발하기 위해 국제 협력을 옹호함
          + 나는 AI의 사용이 검증 가능하지 않기 때문에 국제 조약은 여기서 무의미하다고 주장할 것임 (생물학 무기나 핵무기와 달리 그 사용이 명백한 경우)
          + 맥스 테그마크도 ""통제 문제""에 중점을 두고 있지만, 이것조차도 AI 안전 연구의 발전으로 해결되고 있음
          + OpenAI의 인간 피드백을 통한 강화 학습(RLHF) 연구와 AI 해석 가능성에 대한 광범위한 연구 집중은 더 투명하고 제어 가능한 시스템을 향해 이 분야를 밀어붙이고 있음
          + 미국 AI 안전 연구소의 AI 안전 책임자인 폴 크리스티아노는 정렬 문제가 실제로 존재하지만 해결 불가능한 것은 아니며 기술적 해결책과 더 엄격한 감독 프레임워크를 통해 점진적으로 해결되고 있다고 지적함
          + 여기에는 인간이 AI 학습 과정을 더 면밀히 감독할 수 있도록 하는 시스템이 포함되며, 이는 AI가 최적화하는 목표가 인간의 가치관과 일치하도록 보장함
     * 게다가 핵무기나 전염병을 실존적 위험에 비유하는 것은 다소 적절하지 않음
          + AI와 달리 핵무기와 전염병은 즉각적이고 분명한 파괴력을 지님
          + 반면에 AI는 특정 기능을 제공하도록 설계되고 안내될 수 있는 도구임
          + ""Human Compatible""의 저자인 스튜어트 러셀은 신중한 계획을 통해 AI가 위협이 되지 않도록 제어할 수 있다고 강조했음
          + 그는 AI가 그 목표에 대해 불확실성을 가지고 구축되어야 한다고 제안하며, 이는 AI가 그 결정에 대해 항상 인간의 승인을 구하도록 보장함
          + '가치 정렬(Value Aligmment)'이라고 불리는 이 접근 방식은 테그마크, 벤지오, 힌튼이 제안한 방식으로 AI가 통제를 벗어날 가능성을 낮춤
          + 그러나 이것은 자동적이거나 보장되는 것이 아니므로 더 많은 연구 자금이 필요함
          + 그러나 우호적이지 않은 국가와의 전투에서 AI 개발을 규제로 늦추는 것은 너무 큰 위험임
          + 뒤처지는 것은 단연코 나를 가장 두렵게 하는 위험임
     * 메타의 수석 AI 과학자인 얀 르쿤과 같은 연구자들은 현재의 AI 시스템은 자기 인식이나 자율성에 필요한 기본 메커니즘이 부족하다고 지적했음
          + 그들에게 감각을 가진 AI가 인수할 것이라는 두려움은 크게 과장된 것임
          + 우리가 아는 AI는 독립적인 동기나 자체 목표를 설정할 수 있는 능력 없이 전적으로 인간이 생성한 입력과 목표에 의존하고 있음
          + 르쿤은 AI가 급속도로 발전하고 있지만 AI가 감각을 개발한다는 생각은 여전히 우리의 현재 기술 능력을 훨씬 뛰어넘는다고 주장함
          + (그러나 무엇이 가까운 시일 내에 가능할까요? 중국이 AI 경쟁에서 우위를 점하고 정권의 무력을 활용하여 전 세계의 정치적, 사회경제적 가치를 지배하는 것입니다. 이에 대해서는 아래에서 더 자세히 설명하겠습니다.)
          + 이러한 종말론적 공포에 대한 나의 종합은 고양이가 이미 자루에서 나왔다는 것이며, 우리는 AI를 활용하는 악의적 행위자들에게 완전히 취약해지는 것과 그 악의적인 AI에 대항할 수 있는 기술을 개발하는 것 사이에서 선택의 여지가 없다는 것임
     * 더욱이, 우리는 여러 AI를 갖게 될 것이므로, 최악의 시나리오에서도 모든 AI가 동시에 인류에 대항하는 것은 가능성이 낮음
          + 우리는 인간에게 봉사하도록 설계된 많은 다양한 AI를 갖게 될 것임
          + AI 설명 가능성에 대한 관심이 높아지면 AI의 목표를 인간의 가치관과 일치시킴으로써 안전성이 향상될 가능성이 높음
          + 향후 10년 이내에 우리는 제어 가능성이 없는 ""블랙박스 시스템""에 대한 공포를 넘어설 것이라고 믿음
          + 그러나 이 문제를 해결하려면 AI 안전과 윤리에 레이저와 같은 집중이 필요함
     * AI 안전에 대한 대규모 투자가 중요하며, 대학 연구의 상당 부분이 이 분야에 초점을 맞추어야 함
          + 연방 정부는 안전 연구와 AI 탐지에 더 많이 투자해야 함
          + 적절한 연구와 테스트 후에는 ""오프 스위치""와 같은 기능이 필요함
          + 국제 조약은 조약 준수 여부를 검증할 방법이 없기 때문에 불가능하다고 주장할 것임
          + 인류가 전염병, 소행성 충돌, 핵전쟁 등 많은 실존적 위험에 직면해 있다는 점도 기억해야 함
          + AI는 더 넓은 맥락에서 하나의 위험일 뿐이며, 우리는 이러한 위험과 AI가 가져올 수 있는 잠재적 이점 사이의 상충 관계를 고려해야 함
          + 내 견해로는 AI 기술에서 중국과 다른 적대국에 뒤처지는 위험이 자각력 있는 AI보다 훨씬 더 큼
          + AI 개발을 늦추는 것은 민주주의에 재앙이 될 수 있음
     * 향후 20년 동안, 특히 AI 분야에서 기술 선도국으로 부상하는 국가는 기술, 경제적 이익, 영향력의 세계적 분배에 있어 지배적인 위치에 설 것이며, 따라서 가치관에 있어서도 그러할 것임
          + AI는 사이버 전쟁이나 킬러 로봇 같은 국방 응용 프로그램뿐만 아니라 지구를 위한 무료 의사, 무료 튜터와 같은 것에서 가장 가치 있는 기술이 될 것임
          + 이 AI 경쟁과 융합과 같은 관련 경쟁에서 승리하는 국가는 막강한 경제력을 바탕으로 정치권력을 장악하고 세계 정치 시스템에 기름을 부을 가능성이 높음
          + 동남아시아, 아프리카, 라틴 아메리카 등에 미치는 영향이 위태로움
          + 이 기술 전쟁에서 민주적 가치가 위험에 처해 있으므로 우리는 이 전쟁에서 이기고 중국을 물리치기 위해 할 수 있는 모든 일을 해야 함
          + 그들의 유토피아관은 아마도 다를 것임
     * 나는 중국이 향후 25년 동안 중국 공산당이 그들 사회에 옳다고 생각하는 것을 강요하기 위해 천안문 광장 전술을 취할 수 있다고 의심함
          + 대조적으로 우리는 정치 프로세스를 거칠 것임
          + 민주적 가치가 전 세계적으로 승리하려면 우리는 AI에 신중하게 접근해야 하지만 AI 경쟁에서 지는 것을 감수해서는 안 됨
          + 그렇기 때문에 나는 시진핑 주석이 감독하는 중국의 제14차 5개년 계획이 AI와 5G 무선에서 승리하겠다는 의도를 명시적으로 선언한다고 믿음
          + 전자는 경제력을, 후자는 중국이 통신망과 TikTok을 통제함으로써 100여 개국의 모든 시민을 감시할 수 있게 함
          + 기술 리더십은 전시 동원(wartime mobilization)에 걸맞은 실존적 우선순위임
          + 미국 학자들과 철학자들이 우려하는 ""얼라인먼트 제약""에서 자유로운 중국 봇이 서구 유권자들에게 은밀하게 개별적으로 영향을 미치는 것을 상상해 볼 것
          + 이러한 우발적, 공모적 위험에 대처하기 위해 우리는 안전 기술에 대한 연구와 투자를 대폭 늘려야 하지만 AI를 공격적으로 규제해서는 안 됨
     * 인구통계학, 성장 둔화, 막대한 부채 부담으로 인해 향후 10년 내에 중국이 정점에 달할 것이라고 믿는다면, 우리는 중국이 승리하기 위해 더 절박해지고 쇠퇴기에 더 위험해질 것이라고 믿어야 함
          + 투키디데스의 함정과는 반대로 (신흥 무역 강국이 기존 구도를 흔들면 기존의 무역 강국과 신흥 무역 강국 간에 무력 충돌이 발생)
          + 그렇기 때문에 우리는 가설적 시나리오에 대해 토론하고 잘못된 우선순위의 규제로 진전을 늦추는 동안 그들의 자비에 의존해서는 안됨
     * 우리는 AI가 인류를 파괴할 수 있는 자각력에 대해 걱정해야 할 수도 있지만 소행성이 지구를 강타하거나 전염병이 발생할 위험도 존재함
          + 그러나 중국이 우리 체제를 파괴할 위험이 내 의견으로는 훨씬 더 큼
          + 현재의 논쟁에서 비관론자들은 작은 위험에 초점을 맞추고 있으며, 가장 명백한 위험, 즉 AI 경쟁에서 악의적 행위자에게 지는 것은 서방에게 AI를 위험하게 만든다는 점에 초점을 맞추지 않고 있음
          + 아이러니하게도 AI와 민주주의를 침식하고 사회를 조작할 수 있는 AI의 능력을 두려워하는 사람들이 이 위험을 가장 두려워해야 함!

3. AI에 대한 유토피아적 견해

     * 이 글을 쓰게 된 동기 중 하나는 AI 중심 세상에 대한 디스토피아적 비전을 불식시키는 것임
          + 대규모 실업, 부자는 더 부유해지고, 지적/육체적 전문성의 가치 하락, 인간 창의력의 상실 등 상상력이 결여된 인지적으로 게으른 비전임
          + 서구에서는 디스토피아에 대해 매우 왜곡된 시각을 가지고 있음
          + 디스토피아의 많은 저자들은 이미 현실의 고달픔과 생존의 위협에서 벗어나 상아탑에서 사변을 펼치는 사치를 누리고 있음
          + 예기치 못한 400달러의 지출도 감당하기 어려운 미국인 40%, 적절한 일차 의료서비스를 받지 못하는 1억 명의 미국인, 과도한 의료비 때문에 매년 파산하는 50만 명의 시민들을 언급하고 있음
     * AI는 지구상의 모든 아이에게 거의 무료로 AI 튜터를, 모든 사람에게 거의 무료로 AI 의사 전문 지식을 제공할 수 있음
          + 종양 전문의부터 구조 엔지니어, 소프트웨어 엔지니어, 제품 설계자, 칩 설계자, 과학자에 이르기까지 거의 모든 종류의 전문 지식이 무료에 가까워질 것임
          + 마이크로프로세서는 휴대전화의 연산능력으로 판단할 때 대부분의 전자제품과 컴퓨팅을 거의 무료로 만들었음
          + AI는 모든 전문 지식을 거의 무료로, 대부분의 노동을 양족 로봇 등을 통해 매우 저렴하게, 금속에서 약품에 이르는 재료를 더 나은 과학 발견과 자원 발견을 통해 훨씬 더 저렴하게 만드는 등 마이크로프로세서보다 훨씬 더 많은 영역에 유사한 비용 절감을 적용할 것임
          + 또한 핵융합로의 플라즈마를 제어하고 자율 비행 항공기, 자율주행차량, 대중교통을 제어하여 모든 사람이 훨씬 더 저렴하고 접근하기 쉽게 만들 것임
          + AI는 모든 개인에게 일상적인 작업을 돕고, 개인 맞춤형 건강과 영양을 제공하며, 심지어 임원 지원까지 제공하는 개인 맞춤형 지능형 어시스턴트를 제공할 것임
          + AI 기반 도구는 일러스트레이션, 아이콘, 로고, 예술 작품을 생성하여 창작자의 작업 방식을 변화시킬 것임
          + AI 조종사 의사, 방사선 업무 및 진단을 자동화하는 AI, 미수금 관리 및 재무 모델링과 같은 작업을 자동화하는 AI 금융 애널리스트가 등장할 것임
          + AI는 계약서 작성, 비디오 게임 제작, 완전 자율주행 차량 운행을 지원할 것임
          + AI 조종사는 칩의 공식 검증에서 열 관리, 토목 공학, 실내 디자인에 이르기까지 모든 것에서 엔지니어를 지원할 것임
          + 자율주행 MRI에서 개인 맞춤형 오디오북에 이르기까지 우리는 기업가들이 상상할 수 있는 것으로만 제한됨
          + AI는 우리가 기업을 구축하는 방식조차 민주화할 것임
          + 예를 들어, 프로그래밍은 더 이상 컴퓨터 과학 분야에만 국한되지 않을 것임. 우리는 곧 복잡한 프로그래밍 언어 대신 자연어로 프로그래밍할 수 있게 되어 거의 10억 명의 프로그래머를 양성할 수 있기 때문

  A. 효율성과 생산성 향상

     * 나는 80%의 80%, 어쩌면 그 이상의 모든 일자리가 AI에 의해 수행될 수 있다고 추정함.
          + 일차 진료 의사, 정신과 의사, 영업 사원, 종양 전문의, 농장 노동자, 조립 라인 작업자, 구조 엔지니어, 칩 설계자 등 어떤 직업이든 가능함. 그리고 대부분의 경우 AI가 더 잘할 것임
          + 우리는 이미 AI가 단조롭고 반복적인 업무를 대신하여 인간이 더 창의적이고 전략적이며 보람 있는 일에 집중할 수 있게 해주는 초기 단계를 목격하고 있음
     * 결국 우리는 인간으로서 어떤 일을 인간에게 할당하고 무엇을 스스로 선택할 것인지 결정하게 될 것임
          + 또한 AI 조종사가 인간이 가능한 것보다 더 나은 방식으로 테라바이트 단위의 데이터를 종합하는 것을 볼 수 있음
          + 전문 지식이 인간의 결과와 연결되는 곳이라면 어디든 AI는 인간보다 뛰어난 성과를 낼 수 있으며, 거의 무료에 가까운 가격으로 제공될 것임
          + 유방암 환자를 치료하는 종양 전문의를 예로 들면, 그들이 특정 유방암에 대한 최근 5,000편의 논문을 기억하는 것은 매우 어려울 것임
          + 로봇과 같은 구현된 지능은 다음 10년 동안 놀라운 새로운 능력의 벡터가 될 것임
          + 작업이나 직업이 AI에 의해 수행될 수 있다고 해서 모든 사회가 이를 허용하는 것은 아님
     * 더 나아가 생각해 볼 만한 것은 전문 지식이 AI에 있는 사회에서 농장 노동에서부터 종양 전문의와 엔지니어에 이르기까지 모든 노동이 동등하게 평가될 것인가?
          + AI는 위대한 평등화의 도구가 될 것인가?
          + 그리고 이러한 소프트웨어와 하드웨어를 뒷받침하는 데 필요한 철, 구리, 리튬, 시멘트와 같은 천연자원과 물리적 투입물은 어떻게 될까?
          + 중국이 아프리카와 남미와 같은 자원이 풍부한 지역, 특히 중요한 광물 공급망을 장악하기 위해 전략적으로 움직이는 것을 목격하면서 혁신의 필요성이 분명해짐
     * AI는 리튬, 코발트, 구리와 같은 천연자원을 발견하고 활용하는 방식을 변화시켜 우리의 자원 발견 능력이 소비를 앞지를 수 있게 할 것임
          + 현재의 도전은 자원의 부족이 아니라 자원을 찾는 우리의 능력에 한계가 있다는 것이며, AI는 이 장벽을 깨는 데 도움이 될 것임
     * 또한 AI는 천연자원, 원자재 및 기타 자원의 사용을 최적화하여 낭비를 줄이고 농업, 제조업, 에너지 등 산업의 효율성을 개선할 수 있음
          + 이는 보다 지속 가능한 경제와 지구에 대한 더 나은 관리로 이어질 수 있음

  B. 삶의 질 향상

     * 우리의 물리적인 삶도 더 나은 방향으로 뒤바뀔 것임
          + 두발 로봇은 가사에서 노인 돌봄, 공장 조립 라인, 농장에 이르기까지 모든 수직적 영역을 변화시킬 수 있는 능력을 가지고 있음
          + 이것이 GDP, 생산성, 인간의 행복에 어떻게 급진적인 변화를 가져오고 사람들을 우리가 일자리라고 부르는 이러한 할당의 노예에서 해방시킬 것인지에 대해 준비하는 사람은 거의 없음
          + 이러한 로봇들은 그들이 대체하는 사람들을 부양할 수 있는 충분한 가치를 창출할 것임
          + 25년 후에는 10억 대의 두발 로봇(10년 후에는 100만 대)이 미세 조작을 포함한 다양한 작업을 수행할 수 있을 것임
          + 우리는 조립 라인 및 농장 노동자와 같은 하위 50%의 정말 바람직하지 않은 일자리에서 인간을 노예에서 해방시킬 수 있음
          + 이것은 자동차 산업보다 더 큰 산업이 될 수 있음. 그러나 삶에 대해 게으르고 방종한 접근 방식을 취하지 않는 것은 인간의 책임이 될 것임
     * AI는 또한 우리 사이의 물리적 거리를 좁힐 수 있음
          + 우리는 대부분의 도시에서 자동차의 대부분을 AI 기반의 자율적이고 개인적인 신속한 교통 시스템과 마지막 1마일 자율주행차로 대체하여 기존 도로의 승객 수용 능력을 10배 늘릴 수 있음
          + 이는 자동차 산업을 극적으로 축소시키고 명목 GDP를 줄이는 한편, 지역 개인 교통을 훨씬 더 편리하고 빠르며 저렴하게 만들 것임
          + 우리의 물리적인 삶만 변화하는 것은 아님
     * 곧 대부분의 소비자의 인터넷 접근은 소비자를 대신하여 행동하고 그들이 일상적인 작업을 효율적으로 관리하고 마케터와 봇을 막을 수 있도록 권한을 부여하는 에이전트가 될 수 있음
          + 소비자를 대표하는 수백억 개의 에이전트가 24시간 내내 실행되는 것은 놀랍지 않으며 현재 내 희망 사항임
          + 이것 또한 소비주의를 증가시키고 물건을 팔거나 사고방식을 왜곡하려고 시도하는 잘 짜여진 마케팅 기계에 맞서는 소비자에게 큰 평등화 도구가 될 것임
          + 그들은 자신의 이익을 보호하는 가장 똑똑한 AI를 가질 것임

  C. 향상된 의료 서비스와 수명 연장

     * AI는 개인의 유전적 구성, 생활 방식, 환경에 맞춘 치료를 통해 개인 맞춤형 의학을 가능하게 함으로써 의료 서비스를 혁신할 수 있음. 이는 더 나은 건강 결과와 더 오래 건강한 삶으로 이어질 수 있음
          + AI는 증상이 나타나기 전에 질병을 조기에 발견하는 데 사용될 수 있어 더 효과적이고 덜 침습적인 치료가 가능함. 이는 만성 질환의 부담을 크게 줄이고 전반적인 공중 보건을 개선할 수 있음
     * 의료와 같은 서비스의 품질, 일관성, 접근성은 거의 무료가 되면서 개선될 것임
          + 정신 건강 관리 및 만성 질환 관리를 포함한 매우 광범위한 일차 진료가 전 세계적으로 기본적인 것이 될 뿐만 아니라, AI는 현재의 생명공학 기술을 보완하여 실제로 효과가 있고 오프타겟 효과를 최소화하며 전 세계적으로 확장 가능하고 저렴한 정밀 의약품을 만들 것임
          + 종양 전문의와 같은 더 전문화된 의사들은 최신 연구와 데이터에 대한 엄청난 양의 정보에 액세스할 수 있게 되어 인간 상대방보다 더 효과적이고 최신 정보를 제공할 수 있음
          + 인간의 개입이 필요할 가능성이 있고 AI는 환자의 선호도에 따라 언제 인간 의사를 불러야 하는지 알겠지만, 24시간 내내 운영되는 AI 종양 전문의는 훨씬 더 많은 접점을 제공하고 훨씬 더 많은 정보를 종합하고 결과를 모델링하여 진단 및 임상 과정에 대한 결정을 내릴 수 있게 되어 인간 의사들이 더 보람 있는 활동에 전념할 수 있게 될 것임. 이는 다른 전문 분야와 모든 종류의 만성 질환 관리 및 진단 검사에도 마찬가지로 적용됨
     * AI 디스토피아에 대한 공포심은 매우 비효율적인 의료 시스템에서 진료받기 위해 고군분투하는 환자들로부터 나오는 것이 아님(비록 그들은 자신의 일자리에 대해 걱정하지만)
          + 1억 5천만 명의 미국인이 연방 정부가 지정한 정신 건강 전문가 부족 지역에 살고 있으며, 정신 질환을 가진 성인의 절반 이상이 치료를 받을 수 없음
          + 우리는 엘리트 학자들이 아니라 2800만 명의 개인들에게 다음과 같은 소식을 환영할지 물어봐야 함:
               o 영국에서 승인된 첫 번째 대형 언어 모델 AI 치료사들은 현재 NHS의 행동 건강 접수의 40%를 처리하고 있으며, 접수, 에스컬레이션, 진단 및 치료를 수행하는 AI로 회복에 대한 훨씬 더 우수한 결과를 보여주고 있음.
               o 시간이 지나면 이 추세는 거의 무료에 가까운 정신 건강 관리로 이어질 것임. 이것이 AI의 유토피아적 측면임 - 현재의 시스템으로 인한 많은 고통을 해결할 수 있는 오랫동안 기다려온 기술 혁명
     * 기술을 통해 사회 기반 시설을 재구축(Reinventing Societal Infrastructure)하여 지구상의 79억 명의 사람들이 상위 10%의 가장 부유한 인간처럼 살 수 있도록 하는 것에 대한 나의 추측은 AI의 계속 확장되는 능력의 공개와 함께 이제 훨씬 더 달성 가능해 보임
          + 기본적인 일차 진료, 만성 질환 관리, 전문 진료(예: 심장학, 종양학, 근골격계 등)의 확대는 개발도상국에 사는 사람들의 건강을 개선하고 질병을 예방하는 데 필수적임
          + 전 세계 모든 아이가 이용할 수 있는 거의 무료에 가까운 24시간 내내 운영되는 의사는 우리가 계속해서 인간에 의존하여 의료 서비스를 제공한다면 불가능할 것임
          + 실제로 현재의 논쟁은 AI의 가장 두드러진 결과에 초점을 맞추지 못하고 있음: AI 혁명의 가장 큰 영향을 받을 사람들은 매일 생존을 위해 고군분투하는 지구 하위 절반에 해당하는 40억 명임
     * 주로 이러한 이유로 상아탑의 학자들이 우리를 AI 유토피아로 향하는 길에서 퇴보시키려 할 때, 그것은 그들이 현실 세계와 얼마나 동떨어져 있는지를 말해줌
     * 20년 전, 란셋 저널은 전 세계 아동 사망률의 90%를 차지하는 42개국에서 아동 사망의 63%가 더 효과적인 일차 진료를 통해 예방될 수 있다는 사실을 발견했는데, 이는 연간 600만 명의 생명에 해당함. AI는 이를 거의 무료로 만들 수 있음
          + 서구 국가에서는 설사, 폐렴, 홍역, 말라리아, 출생 전후 HIV/AIDS 전파와 같은 질병의 예방 가능성을 당연하게 여김
          + 충분한 수의 인간 일차 진료 의사가 세계의 덜 혜택받은 지역의 모든 아이에게 다가가 접점을 높이는 현실적인 방법은 없음
     * 우리가 AI를 사회로 받아들이고 나아간다면, 내가 태어난 인도의 한 마을을 방문했을 때 내가 받는 진료의 질이 스탠포드의 지역 일차 진료 의사를 만났을 때보다 더 높을 것이라고 상상함. 인도의 마을은 미국의 기존 마찰 가능성을 고려할 때 AI를 더 빨리 채택할 것이기 때문임

  D. 교육과 지식 확장

     * AI는 각 학생의 요구, 속도, 지식의 격차, 관심사에 적응하는 개인 맞춤형 학습 경험을 만들어 모든 학습자에게 보다 효과적인 교육과 높은 성취 수준을 이끌어낼 수 있음
          + AI 기반 플랫폼은 지리적 위치나 경제적 지위에 관계없이 전 세계 사람들에게 고품질의 교육을 제공할 수 있음. 이는 지식을 민주화하고 전 세계 개인에게 힘을 실어줄 수 있음
          + 공립학교 구역 설정과 태어난 우편번호는 AI의 도움으로 또래 영향 문제를 해결할 수 있다면 한 사람의 인생 결과에 훨씬 덜 영향을 미칠 것임
     * 전 세계적으로 AI는 지구상의 모든 아이를 위해 수많은 주제에 걸쳐 24시간 내내 이용 가능한 거의 무료에 가까운 개인교사를 제공할 수 있는 우리의 유일한 기회임
          + 이것이 기회를 열어주고, 대리권, 자기 효능감, 열정, 희망, 동기, 성 평등을 부여하는 데 미칠 수 있는 영향을 과대평가하기는 어려울 것임. 특히 그렇지 않으면 자원이 부족하고 이처럼 광범위하고 일관되며 접근 가능한 교육을 위한 인프라가 부족한 세계 일부 지역에 사는 사람들에게 더욱 그러함
          + ""일할 필요""에서 해방된 사회에 대한 내 25년 이상의 비전과 결합된 AI 개인교사와 인간 멘토는 아이들에게 탐구하고 자신이 되는 자유를 줄 것임. 그것이 자유에 더 가까움

  E. 환경 지속 가능성

     * AI는 에너지 사용 최적화, 배출량 감소, 재생 에너지를 위한 새로운 기술 개발을 통해 기후 변화 문제 해결에 중요한 역할을 할 수 있음
          + AI는 환경 모니터링과 보존 노력에도 도움이 될 수 있음
          + AI는 환경에 미치는 영향을 줄이면서 식량 생산을 늘리는 더 스마트하고 효율적인 농업 관행으로 이어질 수 있어 지속 가능한 방식으로 증가하는 세계 인구를 먹여 살리는 데 도움이 될 수 있음
          + 하지만 이는 선형적 사고임. AI 과학자들은 우리 인간이 만들어낸 이 결정적인 문제에 대해 훨씬 더 혁신적인 접근 방식을 가능하게 할 수 있음
     * AI 유토피아를 실현하기 위해서는 무제한의 저렴한 전력 생산을 위한 핵융합과 같은 보완 기술이 필요함
          + 올바른 정치적 분위기가 조성된다면 2050년까지 모든 석탄 및 천연가스 발전소를 대체할 수 있음
          + 나는 전체 핵융합 또는 원자력 발전소를 새로 건설하는 것보다는 석탄과 천연가스 보일러를 개조하고 대체하기 위한 핵융합 보일러에 베팅함
          + 청정하고 조절 가능한 전력을 위해 지열, 태양열, 첨단 배터리 시스템을 사용하는 유망한 노력도 있음
     * 컴퓨팅의 환경적 비용을 줄이는 데는 여러 요인이 작용하고 있음
          + 알고리즘 효율성과 하드웨어 분야에서 상당한 개선이 이루어지고 있어 AI 시스템이 훨씬 적은 전력을 소비하면서 훨씬 더 많은 것을 달성할 수 있음
          + 웹 검색 기능의 새로운 기술과 통합은 에너지 소비를 급격히 늘리지 않고 AI가 더 효과적으로 확장할 수 있도록 도움
          + 이러한 최적화된 컴퓨팅을 위한 노력은 AI의 증가하는 에너지 수요를 지원할 뿐만 아니라 이 기술이 글로벌 인프라에 부담을 주지 않고 지속 가능하게 확장될 수 있도록 보장함
          + 그러나 우리는 이 문제에 대해 열심히 노력해야 하며 이는 실제 문제임

  F. 인간 능력(및 창의성) 향상, 새로운 경험

     * AI는 인간의 능력을 증강시켜 현재 인간의 지능만으로는 다루기 어려운 복잡한 문제를 해결할 수 있게 함
          + 이는 과학, 기술 및 기타 분야에서 지적 도전을 포함한 돌파구로 이어질 수 있음
     * AI는 창의적인 파트너로서 예술가, 디자이너, 혁신가들이 새로운 아이디어를 탐구하고 예술, 과학, 기술에서 가능성의 경계를 넓히는 것을 도울 수 있음
          + 소비자 서비스는 초개인화되어 개인이 동시에 예술가, 작곡가, 프로듀서, 작가, 소비자가 될 수 있음
          + 예를 들어 음악은 게임처럼 상호작용할 수 있게 되고, 새로운 형식이 발견되고 활성화될 가능성이 있음
          + 이러한 미디어는 이미 쏟아지기 시작했으며, 경우에 따라서는 인간이 만든 것보다 더 큰 비중의 히트곡을 생성하고 있음
     * 재능이 부족하거나 안정적인 경제적 미래에 대해 우려하거나 단순히 영화를 만들거나 노래를 작곡할 자원이 없어서 이전에는 많은 예술적 열망이 차단되었지만, 그러한 장애물은 점차 사라질 것임
          + 이는 유명 연예인이 사라질 것이라는 의미는 아니지만, AI 생성 예술은 음악의 인공적 기원을 감추는 복잡성과 깊은 질감을 제공할 것임
          + 어떤 사람들은 이것을 싫어할 것이고 다른 사람들은 좋아할 것임. 고전음악에서 헤비메탈에 이르기까지 오늘날의 음악 장르에도 마찬가지임
     * 새로운 종류의 일자리가 생겨나고 새로운 창의성이 분출될 것임
          + 영화 카메라가 나오기 전에는 영화 제작자라는 직업이 없었음. 전체 산업이 폭발적으로 성장했음
          + 엔터테인먼트는 더 인기를 얻었고, 익스트림 스포츠는 X게임과 같이 많은 사람들에게 수입을 창출하는 직업이 되었음
          + 예를 들어 이전에는 직업이 아니었던 스노보드는 이제 그렇게 되었음
          + Etsy와 eBay와 같은 플랫폼은 전 세계 장인과 기업가를 촉진했으며, 새로운 기술은 완전히 새로운 세계의 직업을 가능하게 할 것임
          + Wattpad는 많은 새로운 창의적인 작가들을 가능하게 했고, Pinterest와 Tumblr와 같은 플랫폼은 사람들에게 그들의 창의력을 발휘할 수 있는 출구를 제공하여 그들의 취향과 개성에 대해 더 표현할 수 있게 했음

  G. 윤리적 의사 결정 및 거버넌스

     * AI는 공정한 의사 결정 프로세스를 보장하고, 편견을 줄이며, 거버넌스의 투명성을 촉진함으로써 보다 공정하고 평등한 사회를 만드는 데 도움이 될 수 있음
          + AI는 방대한 양의 데이터를 분석하여 근거 기반 정책 개발을 지원할 수 있어 보다 효과적이고 정보에 입각한 거버넌스로 이어질 수 있음
     * 모든 시민을 위해 24시간 변호사를 둘 수 있게 되어 전문가를 10배로 늘리고 접근성과 적정성을 확대할 수 있음
          + 깊이 뿌리박힌 인간의 편견 없이 신속하게 분쟁을 해결할 수 있는 충분한 AI 판사가 있을 것임
          + 교육, 법률, 금융 자문은 더 이상 사회의 상류층을 위해 존재하지 않을 것임
          + 사실 이것들은 오늘날 도로와 국방이 그렇듯이 필수적이고 거의 무료인 정부 서비스가 될 것임

  H. 인간의 번영과 행복

     * 유토피아적 비전에서 AI는 사회적 초점을 경제 성장에서 인간의 행복과 성취로 전환하는 데 도움이 될 수 있음
          + 사람들이 일찍부터 자신을 진정으로 흥분시키는 것을 추구할 기회를 얻음에 따라 열정이 자연스럽게 생겨나는 세상을 상상해 보라
     * 앞서 아동의 자유에 대해 설명했지만 좀 더 들어가보면
          + 6살 때부터 아이들에게 단지 직업을 얻기 위해서가 아니라 자신의 열정을 불태우기 위해 학교에서 뛰어날 필요가 없다고 가르치기 시작한다면, 40세에 이 대화를 시작하는 것과 비교할 때 그들의 발달하는 두뇌에 매우 다른 형성 경험을 만들어낼 것임
          + 상위 1% 또는 0.1%를 제외하고는 일반적으로 재정적 안정과 관련이 없는 시각 예술, 음악, 스포츠, 글쓰기 등과 같은 직업은 곧 생계를 유지하고 가족을 부양하는 오늘날의 제약에 구애받지 않고 그것을 추구하고 싶어 하는 누구에게나 만족스럽고 성취 가능한 것이 될 수 있음
     * 이러한 변화는 인간이 된다는 것의 의미를 재정의할 수 있음
          + 더 이상 자신의 전체 존재를 규정하는 조립 라인 작업의 단조로움에 구속되지 않음
          + 내가 2000년에 제안했듯이 우리는 인간이 된다는 것의 정의 자체를 재고할 필요가 있을 수 있음
          + 결국 조립 라인에서 30년 동안 한 가지 유형의 바퀴를 자동차에 장착하는 것이 진정으로 보람 있는 일인가?
          + 그러한 일들은 화씨 100도의 열에서 농사일을 하는 것처럼 인간의 번영이 아니라 노예와 같은 형태를 나타냄
     * 그러나 이것은 단순히 블루칼라 노동에 관한 것이 아님. 화이트칼라 일자리가 가장 먼저 사라질 수 있음
          + 예를 들어 투자 은행 업무를 보면 하루 16시간 동안 엑셀 스프레드시트나 파워포인트 자료를 해킹하고 똑같은 반복 작업을 하는 것이 만족스러운 일인가?
          + AI의 재정적 결과는 사람들을 이러한 제약에서 벗어나게 하여 진정으로 중요한 것, 즉 생존이나 주택, 식량, 가족을 위한 의약품과 같은 기본적인 것이 아니라 열정에 초점을 다시 맞출 수 있게 할 것임
     * 바람직하지 않고 노동 집약적인 일자리를 근절한다고 해서 삶이 덜 의미 있어지는 것은 아님
          + 오히려 그 반대임
          + 이러한 기술에 적응하는 국가들의 경우 수십 년 내에 주당 40시간 일해야 할 필요성이 사라질 수 있기 때문에 삶은 더욱 의미 있어질 것임
          + 1920년 케인스는 주 15시간 노동을 가정했음!
          + 가능한 것을 상상해 보라. 우리에게 필요하거나 원하는 20%의 일을 제공하는 주 1일 근무
          + 나 자신은 69세의 나이에도 일주일에 하루는 정원일을 하고 나머지 시간은 배우는 데 보내는 것이 기쁠 것임
          + 마침내 스키, 하이킹 또는 내 많은 관심사에 몰두할 충분한 시간을 가질 수 있을 것임
     * 바로 이러한 인간 경험을 재정의할 기회가 우리 삶에서 '인간다움'이 사라질 것이라는 비관론자들의 주장을 뒤집는 것임
          + 우리는 먼저 많은 사람들에게 자신과 가족을 위한 기본적인 것에 대한 필요성을 안겨주는 재정적 제약과 고려 사항을 제거함으로써 모든 인간에게 훨씬 더 많은 주체성, 자기 효능감, 희망을 부여하는 세상을 만들 수 있음
          + AI는 기본적인 생존의 부담을 제거함으로써 사람들이 자신에게 진정으로 중요한 것을 자유롭게 추구할 수 있는 세상을 만들 기회를 우리에게 제공함
          + 인간 노력의 주요 분야는 문화, 예술, 과학, 창의성, 철학, 실험, 탐험, 모든 종류의 경쟁, 모험이 될 수 있음
          + 진짜 질문은 모든 사람이 참여할 수 있을지 여부임

  I. 우리의 유토피아에 대한 잠재적 장애물은 극복될 수 있음

     * 물론 이러한 예측을 유토피아적 현실로 전환하는 데 많은 것이 방해가 될 수 있음
          + 기존 조직의 저항은 진전을 방해할 수 있음(예: 배우 조합)
          + 정치인들은 개인적 또는 대중주의적 이익을 위해 대중의 두려움을 이용할 수 있으며, 이는 저항을 더욱 부추길 수 있음
          + 또한 공급망 문제나 글로벌 분쟁으로 인해 악화될 수 있는 기술적 실패나 지연은 개발을 지연시킬 수 있음
          + 금융 시장도 위험 요소임. 경기 침체나 열악한 상황은 유망한 아이디어가 '너무 먼 다리의 틈'으로 묘사되는 자금 부족에 빠지게 할 수 있음
     * 기술을 불신하는 사람들과 반대자들의 반대를 포함한 반기술 정서는 유익한 발전의 광범위한 채택을 방해할 수 있음
          + 이러한 정서는 현대판 러다이트의 우려와 일치할 수 있으며, 그들은 DEI 옹호자들과 함께 담론을 선점하여 기술의 잠재적 이점에서 초점을 돌릴 수 있음
          + 소수의 AI 관련 부정적 결과가 언론의 불균형적인 주목을 받아 AI에 대한 대중의 인식이 오염되면서 상황은 더욱 복잡해질 수 있음
          + 예측할 수 없고 비정상적인 '좌장' 이벤트는 흔하며 예기치 않게 진전을 방해할 수 있음
          + 마지막으로, 핵심 선동자와 옹호자가 등장하지 않거나 효과적으로 대의를 옹호하지 못하면 운동이 타격을 입을 수 있음
     * 그러나 나는 AI 주도 유토피아가 단순히 낙관적인 가능성일 뿐만 아니라 올바른 사회적 선택과 기술 발전을 통해 매우 달성 가능한 확률이라는 확신을 견지함
          + 핵심은 AI의 잠재력을 책임감 있게 활용하고 그 혜택이 사회 전반에 공평하게 분배되도록 하는 것임
          + AI 지형의 윤곽이 계속 진화함에 따라 AI를 제공하고 그 이점을 통제하는 한 지배적인 기업은 없을 것 같음
          + AI 도구가 얼마나 접근 가능하고 사용자 친화적이 되었는지를 감안할 때 소수의 손에 AI 권력이 집중될 것이라는 우려는 가능성이 적음
          + 전문성과 자본이 진입 장벽을 높이는 산업과 달리 AI 개발은 점점 더 민주화되어 개인과 소규모 팀이 최소한의 자원으로 AI 시스템을 구축, 훈련 및 배포할 수 있음
     * 오늘날 많은 클라우드 서비스는 특수 하드웨어나 막대한 재정 투자 없이도 대규모로 AI 모델을 훈련하는 데 필요한 인프라를 제공함
          + 그리고 소규모 업체의 새로운 연구는 오늘날의 LLM과는 근본적으로 다른 AI 개발 방식에 초점을 맞추고 있음
          + 최적의 개발 경로는 아직 나에게 분명하지 않음. 이들 중 상당수는 서로 보완적일 가능성이 높음
     * 또한 로우 코드, 노 코드 및 자연어 플랫폼은 깊은 기술 전문 지식이 없는 사람들이 그 어느 때보다 쉽게 AI 솔루션을 만들고 배포할 수 있게 만들고 있음
          + 챗봇부터 기계 학습 모델에 이르기까지 이러한 플랫폼은 복잡성의 상당 부분을 추상화하여 평균적인 사람이 불과 몇 년 전보다 훨씬 짧은 시간에 AI 애플리케이션을 개발할 수 있게 함
          + AI 기반 API를 사용하면 누구나 프로그래밍에 대한 기본적인 이해만 있으면 최소한의 노력으로 강력한 AI를 자신의 앱, 도구 및 워크플로에 통합할 수 있음
     * AI 개발을 위한 도구와 자원이 계속 더 접근하기 쉬워짐에 따라 단일 회사 또는 단체가 AI를 독점한다는 개념은 덜 실현 가능해짐
          + 대신 우리는 개별 기업가부터 지역 기업에 이르기까지 모든 사람에게 AI 개발이 개방되는 미래를 향해 나아가고 있으며, 이를 통해 혁신이 아래로부터 번성할 수 있음
          + 이러한 분산형 혁신 모델은 AI가 소수가 아닌 다수를 위한 도구로 남을 수 있도록 도울 것임

4. AI 세상의 새로운 경제

  A. AI 시대의 자본주의와 민주주의

     * 서구의 자본주의는 민주주의의 범위 내에서 작동하며 전통적으로 경제적 효율성을 위해 설계되었음
          + 자본주의는 경제 성장을 이루었지만 AI 시대에는 효율성에만 초점을 맞추어서는 안 되며 인간 행복에 있어 평등의 역할을 감안할 때 소득 격차 감소라는 목표를 동등하게 중요한 결과로 추가해야 함
     * 전통적으로 경제 효율성의 엔진인 자본주의는 AI 주도의 변화에 직면하여 진화할 필요가 있을 수 있음
          + 전통적인 경제 효율성에 대한 필요성이 줄어들면서 우리는 효율성과 함께 공감 자본주의와 경제적 평등을 우선시할 여지가 생김
          + 자본주의는 민주주의의 허락에 의한 것임
          + 일정 수준 이상의 격차는 사회 불안으로 이어지므로 이를 염두에 두고 정책을 제정해야 함
          + 나는 사회 이동성을 위한 큰 기회가 있다는 전제 하에 어느 정도의 불평등(즉, ""더 열심히 일할 동기"")의 팬으로 자랐음
          + 우리의 삶을 의미 있게 개선할 수 있는 이러한 출구는 여전히 있어야 함
     * 더 나아가 오늘날의 자본주의는 수요 창출 노력(즉, 광고 및 이에 상응하는 것)이 기업에 대한 경제적 효율성 이점을 초과하여 우리가 원하는 줄 몰랐던 것을 원하게 만드는 새로운 형태로 벗어났음.
          + 이는 사회적 안녕에 기여하지 않음
          + 우리는 현재의 자본주의 시스템을 개선하는 것이 전적으로 긍정적일 수 있는 시점에 와 있음
          + 아이러니하게도 이 기술을 최대한 수용하기로 결정한 사회는 - 모두가 똑같이 수용하는 것은 아니지만 - AI가 열어줄 풍요로움 덕분에 공감 자본주의를 실천할 수 있는 훨씬 더 큰 역량을 갖추게 될 것
     * 시장의 손길이나 기술 발전을 늦추지 말고 오히려 많은 경우 인간 노동이 평가 절하될 수 있음을 깨달아야 함
          + 이는 저숙련 노동자와 심지어 많은 고숙련 노동자의 임금에 하방 압력을 가함
          + 인간 노동과 판단에 대한 필요성이 줄어들면서 노동은 자본에 비해, 그리고 아이디어와 기계 학습 기술에 비해 더욱 가치가 떨어질 것임
          + 풍요로움과 소득 격차 확대의 시대에, 2014년 AI에 관한 내 에세이에서 예측했듯이, 우리는 단순히 효율적인 생산에만 초점을 맞추는 것이 아니라 자본주의의 바람직하지 않은 부작용에 더 큰 우선 순위를 두는 자본주의의 한 버전이 필요할 수 있음

  B. 임금 압축과 일자리 혼란, 생산성 향상이 함께 나타남

     * AI가 기술 차이를 평준화함에 따라 임금이 압축될 수 있으며, 가치 창출은 창의성, 혁신 또는 AI 소유권으로 이동할 수 있어 잠재적으로 다른 경제적 불평등으로 이어질 수 있음
          + 역사적으로 생산성 향상은 더 높은 임금과 소비자 지출 증가로 이어졌지만, AI 기술은 내가 예측한 80%의 일자리에서 80%의 일을 인간으로부터 분리할 수 있는 능력을 감안할 때 그런 일이 일어나지 않을 수 있음을 인정함
     * 같은 맥락에서 우리는 단순히 과거의 경제 역사를 외삽할 수는 없는데, 이는 각 기술 혁명에서 새로운 일자리 기회가 손실을 앞질렀다고 설교하기 때문임
          + 누군가 말했듯이 ""역사의 기차가 커브를 칠 때 지식인들은 떨어져 나간다""
          + 나는 이번에는 인간 능력을 증강시킬 뿐만 아니라 전반적으로 능가할 수 있는 기술로 인해 일자리 창출의 기본 동인이 변화하기 때문에 상황이 다를 수 있다고 주장함
          + 우리는 이전에 큰 전환을 보았지만 이렇게 빠르게는 결코 보지 못했기 때문에 적응이 훨씬 더 어려운 문제가 됨
               o 1900년 미국의 일자리 대부분은 농업 분야였음
               o 1970년까지 그것은 4%였음
               o 그러나 그것은 3세대가 걸렸음
               o 이 AI 사이클은 훨씬 더 빠를 것임. 따라서 더 혼란스럽고 불편할 것임
     * 인공지능은 많은 직업을 없애고 사람들이 시간을 보내는 방식에 대한 사회적 재고를 요구하면서 노동력에 지각 변동을 일으킬 가능성이 높음
          + 사회 전체가 개선되더라도 변화는 경제의 일부 사람들에게 더 심각한 타격을 줄 수 있음
          + 이는 가장 영향을 받는 사람들에게 쉽게 받아들여지기 어려울 것임
          + 10-25년의 전환기는 매우 혼란스러울 수 있음
          + 그러나 그것은 두려움에서 행동하고 궁극적으로 일의 제약에서 벗어나고 현재 그렇게 적은 사람들이 누리는 자원에 더 많이 접근할 수 있는 세상의 혜택을 거두지 못하는 이유는 결코 아님
          + 영향을 받는 사람들을 돌보는 방법을 진지하게 고려할 때임
     * 전문가 역량을 몇 배나 더 제공하여 접근성뿐만 아니라 품질도 높이면서 이전에 그러한 직책에 있었던 사람들의 일자리 손실로 이어질 수 있음
          + AI 기반 로봇공학은 수작업 집약적 일자리에서도 같은 일을 할 수 있고 할 것임
          + 다양한 수직 분야에서 디자이너와 건축가를 지원하는 AI 도구는 산출량과 생산성을 비슷하게 증가시켜 인간이 필요한 수가 줄어들 것임. 아마도 향후 10-25년 기간 내에 자율적으로 직무를 인수하기 전까지 말임
     * 백만 명의 의사가 각각 30만 달러를 벌면 미국에서만 3천억 달러의 비용이 발생
          + 아마도 전 세계적으로 그 10배일 것임. 수조 달러임.
          + 아마도 3천억 달러의 지출은 동일하게 유지되겠지만 향후 10-20년 동안 10배의 서비스를 제공할 것임
          + 회계사를 보면 같은 종류의 숫자에 도달할 수 있음. 수조 달러가 소비되지만 회계 서비스에 대한 수요가 10배 증가할 것 같지는 않음
          + 전문 분야마다 공급 증가와 소비 증가 사이에 다르게 반응할 것임
          + AI가 많은 인력을 지원/대체하면 이러한 절감액은 소비자에게 흘러갈 것임. 분야별로 공급과 수요의 균형을 맞춰야 할 것임
          + 미국에서 의료, 식량, 주택에 대한 수요는 증가할 수 있지만 10배까지는 아닐 것임
          + 음악과 엔터테인먼트는 수요 증가에 거의 제한이 없겠지만 음악가나 스포츠 연기자 등의 유명인 엔터테인먼트를 제외하고는 거의 무료일 것임
     * 생산성은 평균 소득을 증가시키는 동시에 중위 소득과 지니 계수(소득 분포를 나타내기 위한 통계적 분산 측정)를 모두 감소시킬 수 있음
          + 아이러니하게도 미국과 같은 선진국 시민들은 소득 격차가 확대될 수 있음에도 불구하고 더 높은 생활 수준을 가질 수 있음
          + 그러나 이는 상당 부분 선출직 공무원들이 취하는 정책 접근 방식에 달려 있을 것임
          + 직업을 위해 훈련하는 것이 아니라 직업과 같은 ""목적"" 대신 그 자체의 장점을 위해 지적 추구를 하기 위해 더 광범위한 교육이 필요할 수 있음

  C. 디플레이션과 새로운 경제 측정 지표의 필요성

     * 투입 감소(즉, 노동 비용 감소)와 경쟁 증가로 인한 생산성 향상은 앞서 언급한 일자리 손실과 함께 디플레이션을 촉발할 수 있음
          + 반대로 이러한 새로운 역학은 지출이 제한된 기업에서 낮은 비용을 활용하기 위한 고용을 증가시킬 수 있음
          + 노동력과 전문 지식을 넘어, AI를 자원 발견, 연구 등에 사용함에 따라 타임라인과 비용이 줄어들어 디플레이션 압력이 가중될 수 있음
          + 물론 소비자 행동, 기업 투자 결정, 중앙은행 대응, 분야별 변동성 등 추가적인 뉘앙스가 있음
          + 그러나 AI가 GDP의 모든 수직을 건드릴 가능성이 있지만 시간 프레임은 다르기 때문에 경제 전체에 미칠 수 있는 영향을 과대평가하기는 어려울 것이며, 이 새로운 시대에 통화정책이 역사적으로 그랬던 것만큼 강력한 지렛대가 될 것 같지는 않음
          + 통화 정책은 경제에 점진적인 변화를 일으키기 위해 작동해 왔고 정제되어 왔음
          + 한계 경제 변화가 한계 행동 변화를 주도하는 것은 더 이상 적용되지 않을 수 있음
          + 바람에 대한 반응은 태풍에 대한 반응과 다르고, 파도에 대한 반응은 쓰나미에 대한 반응과 다름
     * 블루칼라와 화이트칼라 분야에서의 AI 주도 효율성은 디플레이션과 일자리 손실로 이어질 수 있으며, 이 둘 모두 완화될 수 있음
          + '디플레이션'은 만성적으로 하락하는 가격이 일반적으로 기업의 수익성 감소와 경제 성장의 정체 또는 심지어 축소로 이어지기 때문에 부정적인 가치를 가짐
          + 반대로 AI 주도 디플레이션 성장은 위에서 설명한 모든 이유로 상품 및 서비스 소비 증가(즉, 소비자 지출 능력 효과적 증가)와 동시에 발생할 가능성이 높음
          + 시민들이 소비하는 상품과 서비스의 수가 급격히 증가한다면 그것이 반드시 나쁜 것인가? 우리의 언어는 GDP 성장과 기업 이익을 번영과 동일시함. 이는 우리 현재 어휘의 버그임
     * 노동 비용이나 자본 비용은 자본이득세나 MLP와 같은 단순한 규칙, 규제, 법률, 세금 전략의 변화에 의해 효과적으로 변경될 수 있음
          + 이러한 편견 중 상당수는 오늘날 겉보기에는 중립적인 자본주의 경제에 내재되어 있음
          + 합리적인 소득 격차 목표를 달성하기 위해서는 더 많고 중요한 조작이 필요할 것임
          + 소득이나 사회 이동성은 사회의 ""규칙""에 설계하기가 훨씬 더 어려운 목표임
          + 전통적인 노동 대 자본의 경제 논쟁이 많은 경제학자들이 적절히 신용하지 않는 새로운 요인인 기업가 정신과 지식에 의해 주도되는 아이디어 경제에 의해 뒤집힘에 따라 상황은 더욱 복잡해질 것으로 생각함
          + 이 마지막 요인은 노동이나 자본보다 경제의 더 중요한 동인이 될 수 있음
          + 리튬, 구리, 철강 등 물리적 자원과 같은 일부 생산 요소는 변화에 적응하는 데 다른 요소보다 훨씬 더 오랜 시간이 걸릴 수 있음

  D. 정책적 선택

     * 컴퓨터 능력의 이러한 새로운 양자 도약은 소득 격차와 풍요로움을 동시에 증가시킬 가능성이 높음
          + 이번에는 기술 진화가 정말 다를 수 있는데, 이는 처음으로 생산성 향상이 아니라 인간 지능을 능가하기 때문임
          + 이러한 시나리오가 실현된다면 우리 사회의 목표가 무엇이든 공정성을 최적화하기 위해 사회 및 정치 시스템에 구조적 변화를 가할 필요가 있음
          + 민주적 과정은 이러한 의사 결정에 이상적임. 특히 모든 사람이 같은 목표를 추구할 필요는 없기 때문임
     * 우리는 선택에 직면해 있음: 파괴적 기술의 채택을 가속화, 둔화 또는 조절하고 예를 들어 경제적 지원을 통해 대체된 사람들에게 보상할지 여부를 결정함
          + 변화의 역학은 혼란을 겪는 사람들에게 고통스러울 수 있으며, AI와 그 모든 장점을 효과적으로 수용하기 위해서는 대체되는 사람들을 국가 정책 노력의 중심에 두는 것이 핵심이 될 것임
          + 경제 정책은 오늘날 미국 연방준비제도가 하는 것처럼 경제 성장 조정뿐만 아니라 격차와 사회 이동성의 지렛대와 완화 요인도 염두에 두어야 함
          + 나는 사과할 줄 모르는 자본가이자 기술 낙관주의자로서 AI 시스템의 지속적이고 신속한 지원과 배포를 지지함
          + 우리는 기술 발전을 늦추기보다는 그것이 가져오는 변화에 적응해야 하며, 여기에는 인간 노동의 잠재적 가치 하락도 포함됨
          + 이러한 변화는 상당한 도전을 제기하지만 25년 이상의 기간 동안 보다 공감하는 사회와 자원 제약 이후의 세계를 만들 기회도 제공함
          + 우리는 우리가 살고 있는 사회와 우리가 만드는 미래에 대해 신중해야 하며, 훨씬 더 공감적으로 정책을 만들어야 함. 이는 과거에는 감당할 수 없었던 사치지만 이제 우리가 사용할 수 있게 되었음
     * 인간 능력을 초월하는 기술의 더 큰 부작용을 해결하기 위해서는 국가(및 국제) 수준에서의 구조적 변화가 아마도 장기적으로 필요할 것임
          + 경제 정책은 오늘날 미국 연방준비제도가 하는 것처럼 경제 성장 조정뿐만 아니라 격차와 사회 이동성의 편견에 의해 주도되어야 함
          + AI 적응에 대해 국가들이 다른 접근 방식을 취하는 글로벌 맥락에서 상대적 경제력의 극적인 변화가 있을 가능성이 있음
     * AI가 인간 노동의 필요성을 줄임에 따라 정부가 AI의 영향을 규제하고 공평한 부의 분배를 보장하는 데 핵심적인 역할을 하면서 UBI(Universal Basic Income)가 중요해질 수 있음
          + AI가 노동 비용을 줄이고 생산성을 높임에 따라 부의 분배와 사회 복지 유지에 있어 정부 규제의 역할이 중요할 것임
     * 앞으로 대규모 생산성 향상과 향후 50년 동안 연간 GDP 성장률이 2%에서 4-6%로 증가할 가능성을 감안할 때, 1인당 GDP는 약 100만 달러에 도달할 수 있음(50년 동안 연간 5% 성장 가정)
          + 디플레이션 경제는 현재의 명목 달러를 훨씬 더 멀리 나아가게 함
          + 나는 UBI를 감당할 수 있는 충분한 자원과 풍요로움이 있을 것이라고 믿음
          + 오늘날 UBI는 경제적 제약으로 인해 비현실적으로 보일 수 있으며, 실제로 이러한 제약을 무시하는 것은 아르헨티나와 베네수엘라와 같은 국가에서 재앙으로 이어졌음. 그러나 그러한 제약은 점차 줄어들 것임
     * 과감하거나 돌이킬 수 없는 국가적 규모의 특정 해결책이나 조기 행동을 권고하는 데 있어 주의가 필요함
          + 토론과 논의가 분명히 필요함. 소득 격차 확대로 인해 피해를 입은 사람들을 위한 포인트 솔루션을 찾아야 함
          + 우리는 변화를 면밀히 지켜보고 이번 10년 동안 지속적으로 작은 정책 변화를 만들어야 함
          + 강력한 AI 기술 발전에도 불구하고 실제 영향과 채택은 지수 곡선의 평평한 부분과 마찬가지로 더 느릴 수 있음

  E. 소비자 유토피아 상상하기

     * 지난 20-30년 동안 서방에서 중국의 디플레이션 효과와 흥미로운 유사점이 있음
          + 노동력의 해외 이동은 수천만 개의 국내 제조업 일자리 손실로 이어졌지만, 생계가 뒤바뀐 사람들의 기술 향상이나 돌봄에 중점을 둔 정책은 거의 없었음
          + AI와 컴퓨터 비전을 통해 우리는 상품 가격을 인상하지 않으면서 제조업을 국내로 귀환시켜 중국과 같은 국가의 저비용 노동력에서 벗어날 기회를 갖게 되었으며, 동시에 대체될 사람들을 위한 생산적인 정책 고려에 참여하고 있음
          + 중국의 디플레이션 영향은 일자리가 해외로 이동함에 따라 미국에서 소비자 지출 능력 감소와 함께 왔음
          + 반대로 AI 주도 디플레이션 성장은 위에서 설명한 모든 이유로 상품 및 서비스 소비 증가(즉, 소비자 지출 능력 효과적 증가)와 동시에 발생할 가능성이 높음. 이러한 변화의 역학을 예측하기는 어려울 것임
     * 주택, 에너지, 의료, 식품, 운송이 모두 기계에 의해 거의 무료로 제공되거나 문 앞에 배달되는 세상을 상상해 보라. 그 분야에는 일자리가 하나도 남아 있지 않음
          + 그 세계의 주요 특징은 무엇이며 그 안에서 살면 어떨까? 일단 그것은 소비자 유토피아임. 모든 사람이 왕과 교황만이 꿈꿀 수 있었던 생활 수준을 누림
          + 나는 미래의 유토피아 사회에서 특정 수준의 생활비가 더 낮아져 오늘날 연간 4만 달러를 버는 개인이 오늘날 연간 30만 달러를 버는 사람보다 실질적으로 더 많이 살 수 있을 것이라고 생각함
          + 다행히도 기술은 지난 10년 또는 20년 동안 중국으로 아웃소싱했던 것보다 상품과 서비스에 훨씬 더 디플레이션적일 것임
          + 그러나 내 진정한 희망은 상품과 서비스가 풍부해짐에 따라 우리 시민들이 더 많은 소비보다는 무엇이 그들에게 더 많은 행복을 주는지에 초점을 맞추기 시작하고 소비가 지위의 상징이 되는 것이 줄어드는 것임

  F. 회사 vs. 국가

     * AI 세상에서 이러한 기술을 통제하는 기술 CEO는 전 세계 고용, 경제 구조, 심지어 부의 분배에 대해 전례 없는 영향력을 행사할 수 있음
     * 그들의 플랫폼은 일상생활의 많은 측면에서 전통적인 정부의 역할을 능가할 가능성이 있는 업무, 교육 및 사회적 상호 작용의 주요 중재자가 될 수 있음
     * 비평가들은 이러한 경영진이 많은 국가와 맞먹거나 능가하는 영향력을 행사한다고 주장함. 그들은 공공 담론을 형성하고, 선거에 영향을 미치며, 심지어 지정학에 영향을 미칠 수 있는 기술 플랫폼의 능력을 이 과도한 권력의 증거로 제시함
     * 그러나 이러한 우려는 흥미로운 질문을 제기하며, 나는 부상하고 극대화된 중국과 우리의 더 자유로운 사회와 경제 사이의 강제 선택이라는 이전 프레임워크로 돌아감
     * 우리는 왜 시진핑과 같은 선출되지 않은 지도자의 세계적 영향력보다 기술 CEO의 영향력에 더 편안해야 할까? 어떤 기술 CEO도 지배적 이해관계나 심지어 실질적 이해관계를 소유할 가능성은 없으며 그들은 주주와 이사회에 보고해야 할 것임
     * 둘 다 직접적인 민주적 책임 없이 엄청난 권력을 휘두르지만 그들의 인센티브 구조에는 중요한 차이가 있음
     * 기술 CEO는 모든 결점에도 불구하고 궁극적으로 사용자, 고객 및 주주의 지속적인 지지와 참여에 의존함. 그들은 어느 정도 시장의 힘과 여론에 반응하여 자신의 지위를 유지해야 함
     * 반대로 시진핑과 같은 권위주의 지도자는 공공 정서를 무시하고 국가 기구를 이용하여 반대 의견을 억압하고 통제력을 유지함
     * 이러한 역학은 기술 CEO의 권력이 분명히 우려스럽고 면밀한 조사가 필요하지만 글로벌 이해 관계자에 대한 대응 측면에서 무분별한 권위주의 권력보다 선호할 수 있음을 시사함

5. 우리는 원하는 미래를 만들 수 있음

     * 일어날 미래는 우리 사회가 이 강력한 도구를 이끌기로 결정한 미래가 될 것임
          + 그것은 일련의 정책 선택이 될 것이며 기술 선택이 아닐 것이고 국가마다 다를 것임
          + 어떤 사람들은 그것을 이용할 것이고 어떤 사람들은 그렇지 않을 것임
          + 개인 수준과 사회적 선택이 무엇이 되어야 할까?
          + 우리의 기본적인 욕구가 충족되었기 때문에, 모든 인간의 시간, 노동, 에너지, 야망, 목표는 무형의 것으로 Reorient됨:
               o 큰 질문, 깊은 욕구. 인간의 본성은 역사상 처음으로 완전히 표현됨.
               o 물리적인 필요의 제약이 없으면 우리는 우리가 원하는 대로 될 것임
          + GDP 증가는 우리를 '풍요로운' 사회로 이끌 것이며, 그곳에서 우리는 일과의 기본적인 관계를 재정의해야 함
          + 그리고 전통적인 GDP 측정치는 점점 더 부정확한 인간 진보의 척도가 되기 시작할 것임
          + 그리고 우리가 내리는 정책과 사회적 선택에 따라 큰 경로 의존성이 있을 것임
     * 가장 중요한 것은 7억 명(10%)만이 누리는 풍요로운 삶을 전 세계 79억 시민 모두에게 전하겠다는 원대한 야망이 마침내 손에 잡힐 듯한 거리에 있다는 것임
          + AI 없이 에너지, 자원, 의료, 교통, 기업, 전문 서비스를 10배로 확장하는 것은 분명히 불가능할 것임. 그것은 필요한 힘의 승수이자 가장 운이 좋은 사람들이 현재 누리고 있는 것을 확장할 수 있는 유일한 도구임
          + AI는 필요하지만 충분하지는 않음
          + 수반되는 사회적, 정치적, 경제적 전환에 유리한 조건을 만드는 정책이 필요함
     * AI는 핵이나 생명공학과 같은 이전의 강력한 기술 도구와 마찬가지로 선한 목적이나 나쁜 목적으로 사용될 수 있는 강력한 도구임
          + 우리가 신중하게 선택하고 기술이 아닌 사회의 선택에 따라 ""가능한"" 세계를 구축하는 데 사용하는 것이 반드시 필요함
            미지에 대한 두려움 때문에 혜택을 포기하지 말아야 함
     * 나는 기술 가능주의자, 기술 낙관주의자이지만 신중하고 배려하는 마음으로 기술을 사용하는 것임
          + ""No wine before its time(적절한 때가 되기 전에는 와인을 팔지 않겠다는 광고 문구)""라는 말처럼 규제는 필요하지만 시기상조 규제는 없어야 함
          + 2000년 뉴욕 타임즈와의 인터뷰에서 내 말을 되돌아보면, 우리는 인간이 된다는 것의 의미를 재정의해야 할 것임
          + 이 새로운 정의는 일이나 생산성에 대한 필요성이 아니라 열정, 상상력, 관계에 초점을 맞추어 인간성에 대한 개인적 해석을 허용해야 함

   ""민주주의가 AI를 길들일 수 있다""는 세계 정부나 유효한 국제법이 부재한 이상 보장된 명제가 아니라고 생각되네요. 각 국가는 타국 대비 AI 산업의 경쟁력을 위해 규제를 강하게 매길 수 없고, M7 같은 국제 기업들은 ""혁신"", ""공리""를 내세우며 계속 규제에 맞설 것이며 정치적 양극화는 우리가 제때 AI를 적절한 시점에 길들일 수 있도록 힘을 모으는 것을 방해할 것입니다.

   저는 재밌게 읽었습니다. 맞고 틀리고의 관점에서 볼 글은 아닌거 같아요. 필자의 관점일 뿐이니..

   기업으로 부의 쏠림에 대한 내용은 정책으로 해결가능
   요 부분이 너무 꽃밭느낌이네요
   정책은 언제나 후행했는데 이 빠르고 막대한 변화를 사회가 어떻게 받아낼수있을지가 걱정됩니다.
     * 기술 발전 속도가 너무 빠르다.
       -정책 결정 과정은 복잡하고 시간이 오래 걸린다.
     * 미래를 예측하기 어렵다.
     * 기존 이해관계와의 충돌은 필연적이다

   인간이 필요가 없는데 왜 봉사를 하죠? 라고 생각하지 않을까 인간을 만든 신이 인간보다 뛰어날 거라는 환상과 같지 않을까요

   역시나 기후에 대한 언급은 없네요. 또한 선출되지 않은 지도자 운운하면서 정작 ""밍듀듀의""적으로 다수가 동의하지도 않은 기술을 사회에 사실상 강요하는건 왜 정당화 되는지도 궁금하구요.

   필자가 AI의 사회 변혁 가능성에만 집중하고 변화의 필요 조건을 모두 고려하지는 않아서 전체적으로 동의하기 힘든 글입니다.


     AI는 지구상의 모든 아이에게 거의 무료로 AI 튜터를, 모든 사람에게 거의 무료로 AI 의사 전문 지식을 제공할 수 있음

     결국 우리는 인간으로서 어떤 일을 인간에게 할당하고 무엇을 스스로 선택할 것인지 결정하게 될 것임

   의학의 본질은 단순 의학지식 제공에서 그치는 것이 아니라 치료 방법간의 효율성과 위험성, 예후 등의 증거와 상황을 고려하여 의사결정을 하는 것에 있다고 생각합니다. 전문가 시스템이 일반 대중의 신뢰를 얻기까지는 낙관론 대신 수많은 근거와 실패 사례, 경험칙들이 축적되어야 할 것입니다


     AI는 또한 우리 사이의 물리적 거리를 좁힐 수 있음

     우리는 대부분의 도시에서 자동차의 대부분을 AI 기반의 자율적이고 개인적인 신속한 교통 시스템과 마지막 1마일 자율주행차로 대체하여 기존 도로의 승객 수용 능력을 10배 늘릴 수 있음

   물리적 거리가 한 번 더 좁아지기 위해서는 교통수단의 발달 뿐만 아니라 발전한 이동수단에 따른 도시계획과 도로망의 변경이 이루어져야 합니다. 유럽과 미국의 대도시들이 초기 도시계획에서 크게 벗어나지 못하고 설립당시의 도로망을 그대로 사용하고 있는 것을 보면 교통수단이 발전하는 것 만으로는 모든 대도시의 물리적 거리를 좁힐 수 없습니다. 이미 조성된 도시가 변화하는 것은 막대한 재정적 부담과 불확실성을 극복해야 하므로 가능성이 낮고, 새로 생겨나는 도시가 교통수단 발달의 혜택을 누리게 될 것입니다


     * 20년 전, 란셋 저널은 전 세계 아동 사망률의 90%를 차지하는 42개국에서 아동 사망의 63%가 더 효과적인 일차 진료를 통해 예방될 수 있다는 사실을 발견했는데, 이는 연간 600만 명의 생명에 해당함. AI는 이를 거의 무료로 만들 수 있음
          + 서구 국가에서는 설사, 폐렴, 홍역, 말라리아, 출생 전후 HIV/AIDS 전파와 같은 질병의 예방 가능성을 당연하게 여김
          + 충분한 수의 인간 일차 진료 의사가 세계의 덜 혜택받은 지역의 모든 아이에게 다가가 접점을 높이는 현실적인 방법은 없음

   전염병은 의료 접근성 개선 뿐만이 아닌 공중보건과 위생 개선이 동시에 이루어져야 하고 이는 상하수도 시설과 같은 행정 서비스가 병행되어야 예방할 수 있습니다


     AI는 공정한 의사 결정 프로세스를 보장하고, 편견을 줄이며, 거버넌스의 투명성을 촉진함으로써 보다 공정하고 평등한 사회를 만드는 데 도움이 될 수 있음

   AI는 인지 편향이나 편견, 갈등, 기회의 평등, 부의 재분배같은 심리와 가치판단의 문제를 대신 해결할 수 없습니다.


     또한 로우 코드, 노 코드 및 자연어 플랫폼은 깊은 기술 전문 지식이 없는 사람들이 그 어느 때보다 쉽게 AI 솔루션을 만들고 배포할 수 있게 만들고 있음

   로우코드 플랫폼은 작업을 시작하기는 쉽지만 요구사항이 추가되고 의존성이 복잡해질 수록 효율적이고 완성도 있는 결과물을 만들어내기 어렵습니다


     노동 비용이나 자본 비용은 자본이득세나 MLP와 같은 단순한 규칙, 규제, 법률, 세금 전략의 변화에 의해 효과적으로 변경될 수 있음

   모든 정치인들과 정책 입안자들이 필자의 주장과 같이 생각하고 정책을 실행할 가능성은 매우 낮습니다


     * 그들(기술 CEO)의 플랫폼은 일상생활의 많은 측면에서 전통적인 정부의 역할을 능가할 가능성이 있는 업무, 교육 및 사회적 상호 작용의 주요 중재자가 될 수 있음
     * 그러나 이러한 우려는 흥미로운 질문을 제기하며, 나는 부상하고 극대화된 중국과 우리의 더 자유로운 사회와 경제 사이의 강제 선택이라는 이전 프레임워크로 돌아감
     * 기술 CEO는 모든 결점에도 불구하고 궁극적으로 사용자, 고객 및 주주의 지속적인 지지와 참여에 의존함

   미국 빅테크 기업의 파급력에 대한 EU의 제재, 그 적절성에 대한 논의는 현재 진행형이며 중국의 전체주의 정부와 아무런 상관이 없습니다.

   왠지 샘 알트먼의 지능의 시대 (The Intelligence Age) 하고 비교하게 되는 글이네요.
   그냥 잘될꺼에요 라고 말 하는 것보다 다양한 사례를 들어서 설명하는게 좋았어요.
   생각 못해봤던 관점들이 이야기 되어서 많은 영감을 받았습니다.

   코슬라 벤처스는 창업자들이 뽑은 최고의 VC 로 평가 받고 있습니다. https://www.founderschoicevc.com/

   샘 알트먼의 글은 무작정 잘될껍니다라는 약팔이에 가깝다면, 이 글에선 다양한 생각할것들이 있어서 좋았습니다.

   지금이야 인간이 AI의 주종의 관계로 형성하고 있지만, 오늘처럼 쳇 GPT가 작동을 안할때 답답함을 느끼는 걸 보면 AI가 주인지 종인지 햇갈리게 되네요.

   그리고, AI회사들이 당연히 막대한 금권과 정치적인 파워를 누르게 될텐데 사회의 합의하에 유토피아로 가기엔 어마어마한 사회 비용이 발생할 것 같습니다.

   그리고 모든 인간이 윤리적이고 착하면 좋겠지만 인간 시대엔 그런 경우가 드물었던 과거를 생각하면, 대변혁의 앞에서 초라하게 서있는 한인간이 된거 같아서 슬프네요.
"
"https://news.hada.io/topic?id=17042","가장 빠른 Mutexes","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             가장 빠른 Mutexes

     * Cosmopolitan Libc는 여러 운영 체제에서 실행 가능한 이진 파일을 제공하는 것으로 유명하며, 생산 환경에서도 뛰어난 성능을 발휘할 수 있는 C 라이브러리임.
     * 성능 증명을 위한 뮤텍스 벤치마크 : 30개의 스레드가 동일한 정수를 100,000번 증가시키는 테스트를 통해 뮤텍스 구현의 성능을 비교함
          + Windows
               o Cosmopolitan pthread_mutex_t 는 Microsoft의 SRWLOCK보다 2.75배 빠르고, CPU 자원을 18배 적게 사용함
               o Cygwin의 뮤텍스는 성능이 매우 낮아 스핀 락을 사용하는 것이 더 나을 정도임.
          + Linux
               o Cosmopolitan pthread_mutex_t 는 glibc보다 3배, musl libc보다 11배 빠름
               o CPU 사용량은 glibc보다 42배, musl libc보다 178배 적음
          + MacOS
               o Apple Libc가 Cosmopolitan의 뮤텍스보다 약간 더 나은 성능을 보임
               o Cosmopolitan은 Ulrich Drepper의 ""Futexes Are Tricky"" 논문에 기반한 알고리듬을 사용하여 성능을 최적화함

어떻게 가능한거지?

     * Google의 저명한 엔지니어 Mike Burrows가 작성한 nsync 라이브러리를 사용하여 뛰어난 성능을 발휘함
          + 그는 예전 구글의 경쟁자였던 Altavista를 코딩한 사람임
     * nsync의 트릭과 분석
          + nsync는 경합이 없을 때 빠르게 잠금이 발생하도록 낙관적인 CAS(compare and swap)를 즉시 사용함
          + 잠금을 획득할 수 없을 때 nsync는 호출 스레드를 대기자의 이중 연결 리스트에 추가함
               o 각 대기자는 별도의 독립적인 캐시라인에 자체 세마포어를 받음
               o 스레드가 대기 상태에 들어가면 더 이상 기본 잠금을 건드리지 않음
               o 이것이 중요한 이유는 Ulrich Drepper의 ""What Every Programmer Should Know About Memory"" 문서에서 확인할 수 있음
               o 여러 코어가 동일한 캐시라인을 터치하면 프로세서 내에서 많은 통신 오버헤드가 발생함
          + nsync는 futex를 사용하여 운영 체제의 도움을 받음
               o futex는 Linux에서 몇 년 전에 발명된 훌륭한 추상화로, 다른 OS에서 빠르게 사용되기 시작함
               o MacOS에서는 ulock이라고 하고, Windows에서는 WaitOnAddress()라고 함
               o Cosmo가 지원하는 OS 중 futex가 없는 유일한 OS는 NetBSD임 (POSIX 세마포어를 커널 공간에 구현하며, 각 세마포어는 새 파일 디스크립터를 만들어야 함)
               o futex와 세마포어의 중요한 점은 OS가 스레드를 잠자게 할 수 있다는 것임. 이를 통해 nsync는 수행할 작업이 없을 때 CPU 시간을 소비하지 않을 수 있음
          + nsync는 ""긴 대기(long wait)"" 개념으로 기아 상태를 피함
               o 대기자가 30번 깨어나고 내부적으로 잠금 획득에 실패하면 아직 기다리지 않은 스레드가 획득하는 것을 방지하는 비트를 잠금에 추가함
               o 대기열이 어느 정도 해소될 때까지 다른 모든 사람에 대해 초기 CAS가 실패함
          + nsync는 ""지정된 깨우는 사람(designated waker)"" 개념을 사용하여 벤치마크한 사용 사례(작은 임계 영역이 있는 경합 잠금)를 빠르게 만듦
               o 잠금을 얻으려고 시도하는 스레드가 깨어 있을 때 기본 잠금에 이 비트가 설정됨
               o nsync에서 잠금 해제 함수는 잠금을 기다리는 다음 스레드를 깨우는 역할을 함
               o 이 비트가 있으면 잠금 해제 스레드는 하나의 잠금 장치가 이미 깨어 있기 때문에 두 번째 잠금 장치를 깨울 필요가 없다는 것을 알 수 있음

  온라인 증명

     * Cosmopolitan 뮤텍스를 사용한 소프트웨어의 라이브 데모를 통해 성능을 확인할 수 있음.
     * http://ipv4.games/ 웹 서버는 대규모 DDOS 공격에도 견딜 수 있는 성능을 보여줌.

        Hacker News 의견

     * 새로운 뮤텍스 구현과 그 성능 비교를 보는 것은 항상 흥미로움. 하지만 이번 벤치마크는 미세 벤치마크처럼 보임. 대규모 멀티스레드 프로그램을 사용해 성능을 테스트하는 것이 일반적임. 복잡한 작업 부하에서는 뮤텍스의 성능이 다르게 나타남
          + WebKit에서 사용하는 빠른 락을 작성한 경험이 있으며, ParkingLot 추상화를 발명한 사람임. 이는 Rust와 Unreal Engine에서도 사용됨
     * Cosmopolitan Mutexes가 좋은 이유는 nsync라는 라이브러리를 사용했기 때문임. 이 라이브러리는 Google의 저명한 엔지니어 Mike Burrows가 작성함. 하지만 이 뮤텍스 구현이 벤치마크에 포함되지 않은 이유가 궁금함
          + macOS에서 __ulock을 사용한다면, libc++의 atomic 라이브러리의 wait(), notify_one() 함수로 더 간단하게 구현할 수 있음
     * Cosmo/ape/redbean에 대한 긍정적인 의견이 많지만, 실제로 사용하는 사람을 본 적이 없음. 이러한 도구들이 정말 혁신적이지만 아직 널리 사용되지 않은 것인지 궁금함
     * Cosmopolitan 프로젝트를 높이 평가하지만, 과장된 우월성 주장에는 의심이 듦. 모든 C 라이브러리가 같은 트릭을 채택하지 않은 이유는 특정 아키텍처나 CPU 모델, 작업 부하에만 항상 빠르기 때문일 수 있음
     * 프로덕션 환경에서는 속도나 효율성보다 신뢰성이 중요함. 시스템이 고장 나지 않도록 하는 것이 더 중요함
     * nsync의 뮤텍스 해제 함수에서 발견한 버그를 수정한 경험이 있음. Cosmopolitan 프로젝트 내에서 nsync의 개선 사항을 보고 있음. 업스트림 nsync를 사용하는 것이 안전한지 궁금함
     * 스레드와 뮤텍스는 컴퓨터 과학에서 가장 복잡한 요소 중 하나임. 새로운 구현이 대규모로 사용되기 전까지는 항상 회의적임. Java가 등장했을 때 Solaris에서 많은 스레드와 뮤텍스 버그가 드러났음
     * nsync가 SRWLOCK보다 훨씬 빠르다는 점에 놀람. win32 SRWLOCKs를 역설계한 경험이 있음
     * 뮤텍스를 볼 때마다 부정적인 감정이 생김. 많은 코드에서 락을 제거하고 큐나 메시징 추상화로 대체하는 작업을 해왔음. 최근에는 다양한 락킹 알고리즘을 탐구하고 있음. nsync와 같은 효율적인 락킹 도구를 사용해보고자 함
"
"https://news.hada.io/topic?id=17000","구부러지는(Bendy) RISC-V 프로세서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        구부러지는(Bendy) RISC-V 프로세서

     * ""연필에 감은 채로 머신러닝 작업을 실행하는 6mW 오픈소스 플라스틱 칩""

Flexible한 RISC-V 프로세서

     * 영국의 Pragmatic Semiconductor와 연구진은 실리콘이 아닌 Flexible(유연)한 프로그래밍 가능한 칩을 최초로 개발함
     * 이 초저전력 32비트 마이크로프로세서는 구부러진 상태에서도 동작할 수 있으며, 머신러닝 워크로드를 실행할 수 있음
     * 오픈 소스 RISC-V 아키텍처를 사용하여 1달러 미만의 가격으로 제조 가능함
     * 웨어러블 헬스케어 전자기기, 스마트 패키지 라벨 등 저가 제품에 전력을 공급할 수 있을 것으로 기대됨

유연한 전자 기기의 잠재력

     * 유연한 전자 기기는 피부나 체내에 착용하거나 삽입하는 등 부드러운 재질과의 상호작용이 필요한 모든 분야에 활용 가능함
     * 피부 컴퓨터, 소프트 로보틱스, 브레인-머신 인터페이스 등에 적용될 수 있음
     * 그러나 기존의 전자 기기는 실리콘과 같은 견고한 재질로 만들어짐

오픈 소스, 유연성, 충분한 속도

     * Pragmatic은 실리콘 프로세서보다 제조 비용이 훨씬 저렴한 유연한 마이크로칩 개발을 추진함
     * Flex-RV라는 이름의 새로운 기기는 인듐 갈륨 징크 옥사이드(indium gallium zinc oxide, IGZO)를 기반으로 한 32비트 마이크로프로세서임
     * 유연한 플라스틱 위에 저온에서 직접 IGZO 박막 트랜지스터를 제조하여 비용을 절감함
     * RISC-V 명령어 집합을 기반으로 하며, 오픈 소스이기 때문에 x86이나 Arm과 같은 독점 아키텍처의 비싼 라이선스 비용을 피할 수 있음
     * Flex-RV는 프로그래밍 가능하며 C와 같은 고급 언어로 작성된 컴파일된 프로그램을 실행할 수 있음
     * RISC-V의 오픈 소스 특성 덕분에 프로그래밍 가능한 머신러닝 하드웨어 가속기를 탑재하여 AI 애플리케이션이 가능함
     * Flex-RV 마이크로프로세서 코어의 크기는 17.5 제곱밀리미터이며 약 12,600개의 논리 게이트로 구성됨
     * 60kHz의 속도로 실행되며 6밀리와트 미만의 전력을 소비함
     * 3밀리미터 반경의 곡률로 구부려도 프로그램을 올바르게 실행함
     * 구부러진 방향, 방향, 각도에 따라 성능은 4.3% 느려지거나 2.3% 빨라짐

낮은 비용과 충분한 성능

     * 실리콘 마이크로칩은 Flex-RV보다 훨씬 빠른 기가헤르츠 속도로 실행될 수 있지만 문제가 되지 않을 것임
     * 온도, 압력, 냄새, 습도, pH 등 많은 센서들은 일반적으로 매우 느린 헤르츠나 킬로헤르츠 영역에서 동작함
     * 이러한 센서들은 스마트 패키징, 라벨, 웨어러블 헬스케어 전자기기 등 유연한 마이크로프로세서가 유용할 것으로 예상되는 신흥 분야에 사용됨
     * 마이크로프로세서를 60kHz로 실행하는 것만으로도 이러한 애플리케이션의 요구사항을 충분히 충족시킬 수 있음
     * Flex-RV는 1달러 미만의 비용으로 제조될 수 있을 것으로 추정됨
     * 이는 Pragmatic의 저비용 유연 칩 제조 기술과 라이선스가 필요 없는 RISC-V 기술 덕분임
     * 연구진은 Nature 저널 온라인판 9월 25일자에 연구 결과를 발표함

GN⁺의 의견

     * 유연한 전자 기기는 웨어러블, 헬스케어, IoT 등 다양한 분야에서 혁신을 가져올 수 있는 잠재력이 큼
     * 특히 인체에 착용하거나 삽입하는 기기의 경우 경직된 실리콘 칩의 한계를 극복하고 사용자 편의성을 크게 높일 수 있을 것으로 기대됨
     * 다만 아직 상용화 단계는 아니며, 성능과 내구성 면에서 실리콘 칩에 미치지 못하는 것이 현실임. 용도에 맞는 적절한 활용 방안 모색이 필요함
     * RISC-V 아키텍처를 사용한 것은 매우 긍정적임. 오픈소스 하드웨어 생태계 활성화에 기여할 수 있으며, 다양한 커스터마이징도 가능해짐
     * 저가형 유연 칩이 상용화된다면 일회용 전자기기 시장이 크게 성장할 것으로 보임. 환경 문제 등 부작용도 함께 고려되어야 할 것임
"
"https://news.hada.io/topic?id=16976","Godot에 구현된 FFT 기반 해양 파도 렌더링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Godot에 구현된 FFT 기반 해양 파도 렌더링

  GodotOceanWaves

   Godot Engine을 이용한 개방된 바다 렌더링 실험으로, 방향성 바다 파도 스펙트럼의 역푸리에 변환을 이용하여 파도를 생성함. 스크립트로 실시간으로 파도 속성을 수정할 수 있는 간단한 매개변수를 제공하여 다양한 바다 파도 환경을 모방할 수 있음.

    소개

      왜 푸리에 변환인가?

     * 비디오 게임에서 물을 애니메이션화하는 일반적인 방법은 _Gerstner waves_를 사용하는 것임. 그러나 이는 잔잔한 물의 저주파수 세부 사항을 모델링하는 데는 적합하지만, 개방된 바다의 거친 표면을 정확하게 표현하는 데는 부족함.
     * 이를 해결하기 위해, 해양학자들이 수집한 경험적 데이터를 기반으로 한 바다 파도 스펙트럼의 _역푸리에 변환_을 사용하여 파도를 시뮬레이션함.
     * 주파수 공간에서 작업하는 이점은 바다 속성을 쉽게 수정할 수 있다는 것임. Gerstner waves를 사용할 때는 특정 바다 상태를 모방하기 위해 파도와 그 매개변수를 어떻게 변경해야 하는지 불분명함.
     * 푸리에 변환을 계산하기 위해 빠른 푸리에 변환 알고리즘(FFT)을 사용함. 이는 고전적인 이산 푸리에 변환 알고리즘보다 계산 복잡도가 낮고, GPU에서 실행하기에 적합함.

    결과

      파도 셰이딩

        조명 모델

     * 바다 조명 모델은 주로 'Atlas' GDC 강연에서 설명된 BSDF를 따름. 그러나 미세면 분포를 위해 Beckmann 분포 대신 GGX 분포를 사용함.
     * 노말/폼 맵은 세계 공간 픽셀 밀도에 따라 bicubic과 bilinear 필터링을 혼합하여 샘플링함.

        바다 거품

     * Tessendorf는 파도의 정점이 자신에게 말려 들어갈 때 거품을 생성하는 방법을 제안함.
     * 거품은 선형적으로 축적되고 지수적으로 소멸하며, ""거품 성장 속도""와 ""거품 소멸 속도"" 매개변수로 제어됨.

        바다 스프레이

     * 바다 스프레이는 Godot의 GPUParticles3D 노드를 사용하여 입자로 모델링됨.
     * 입자는 GPUParticles3D 노드의 경계 상자 내에서 균등하게 분포됨.
     * 각 바다 스프레이 입자는 단일 정적 텍스처를 가진 빌보드 스프라이트를 사용함.

      파도 시뮬레이션

     * 표면 파도를 생성하는 방법은 Tessendorf를 따름.
     * 방향성 바다 파도 스펙트럼 함수는 주파수와 방향에 따라 파도의 에너지를 반환함.

        바다 파도 스펙트럼

     * 비방향성 스펙트럼 함수로 Texel-Marsen-Arsloe (TMA) 스펙트럼을 선택함.
     * 방향성 확산 함수로 _flat_과 Hasselmann 확산을 혼합하여 사용함.

        빠른 푸리에 변환

     * GPU를 위한 맞춤형 FFT 구현을 작성함.
     * Stockham FFT 알고리즘을 사용하여 초기 비트 반전 순열을 피함.

        파도 캐스케이드

     * 큰 거리에서 타일링 아티팩트가 매우 명확해짐.
     * 파도 생성 시스템은 여러 파도 캐스케이드를 동시에 계층화할 수 있음.

        부하 분산

     * 파도의 움직임은 매 프레임마다 변위를 업데이트하지 않아도 부드럽게 보일 수 있음.
     * ""업데이트 속도"" 매개변수를 도입하여 초당 파도 캐스케이드가 업데이트되는 빈도를 제어함.

  참고 문헌

     * Flügge, Fynn-Jorin. Realtime GPGPU FFT Ocean Water Simulation. Hamburg University of Technology. (2017).
     * Gunnell, Garrett. I Tried Simulating The Entire Ocean. (2023).
     * Horvath, Christopher J. Empirical Directional Wave Spectra for Computer Graphics. DigiPro. (2015).
     * Tessendorf, Jerry. Simulating Ocean Water. SIGGRAPH. (2004).
     * Matusiak, Robert. Implementing Fast Fourier Transform Algorithms of Real-Valued Sequences. Texas Instruments. (2001).
     * Mihelich, Mark. Wakes, Explosions and Lighting: Interactive Water Simulation in 'Atlas'. GDC. (2019).
     * Pensionerov, Ivan. FFT-Ocean. GitHub. (2020).

  저작권 표시

     * Evening Road 01 (Pure Sky) by Jarod Guest is used under the CC0 1.0 license.
     * OTFFT DIT Stockham Algorithm by Takuya Okahisa is used and modified under the MIT license.

  GN⁺의 정리

     * GodotOceanWaves는 Godot Engine을 이용한 개방된 바다 렌더링 실험으로, 방향성 바다 파도 스펙트럼의 역푸리에 변환을 이용하여 파도를 생성함.
     * 빠른 푸리에 변환(FFT)을 사용하여 GPU에서 효율적으로 실행할 수 있으며, 다양한 바다 파도 환경을 모방할 수 있음.
     * 파도 셰이딩, 바다 거품, 바다 스프레이, 파도 시뮬레이션 등 다양한 요소를 포함하여 현실적인 바다 표면을 시뮬레이션함.
     * 이 프로젝트는 비디오 게임 및 시뮬레이션에서 현실적인 바다 렌더링을 구현하는 데 유용할 수 있음.

        Hacker News 의견

     * 이 사람의 다른 두 개의 Godot 저장소도 매우 흥미로움
          + 저장소 설명에 세부 사항을 추가하는 방식이 마음에 듦
          + 특히 이 저장소가 흥미로움: GodotGaussianSplatting
          + 학생일 가능성이 있음, 다른 연구를 자주 인용하고 최근 출판된 자료에 대한 이해도가 높음
     * 20년 전에는 바다 표면을 렌더링하는 데 몇 달을 소비해도 이 수준에 도달하지 못했음
          + 이 기술이 얼마나 뛰어난지 놀라움
     * 데모 클립이 약간 과장된 느낌이 있음
          + 50,000Nm 이상의 항해 경험이 있음
          + 그렇게 날카롭고 높은 파도는 더 강한 바람이 필요함
          + 이는 매개변수 조정으로 해결 가능할 것임
     * Godot에서 렌더링이 실시간으로 이루어지는 것으로 추정됨
          + 강력한 GPU가 필요한지 궁금함
     * 이런 것들이 컴퓨터에 관심을 갖게 했지만, 도중에 라이브러리, 엔드포인트, 회사 업무에 지쳐버림
          + 언젠가는 다시 도전하고 싶음
     * 파도/바다 시뮬레이션에 관심이 있다면 Acerola가 이 주제에 대한 멋진 비디오를 게시했음
          + 비디오 1
          + 비디오 2
     * 이 문제가 얼마나 어려운지 흥미로움
          + 수십 년 동안 시도했지만 여전히 불완전함
          + 프레임을 멈추면 파도가 눈 덮인 산처럼 보임
          + 물이 이렇게 날카로운 특징을 가지려면 바람이 매우 강해야 함
          + 시뮬레이션은 파도의 부드러운 특성을 잘 구현했음
     * 해변에서 몇 년을 살았음
          + 해변에 살면 바다를 오랫동안 바라보게 됨
          + 이 렌더링이 실제 바다처럼 보임
     * 이 접근 방식은 매우 큰 파도에서는 약간 한계가 있음
          + 물 파도는 사인파가 아니지만 작은 파도에서는 이 방법이 잘 작동함
          + 큰 파도는 비선형적으로 상호작용하기 때문에 다른 접근 방식이 필요함
     * Shadertoy에도 멋진 예제가 있음
          + Shadertoy 예제
     * Fourier는 파도 주파수 변환을 고안할 때 조수 파도를 측정했음
          + 거의 완전한 순환임
          + 매우 인상적임
     * 매우 인상적이지만 파도의 부드러움에 약간 문제가 있음
          + 고주파 파도가 저주파 파도 위를 이동하는 방식이 비디오와 다름
"
"https://news.hada.io/topic?id=17061","OpenAI Canvas - ChatGPT와 함께하는 새로운 작성 및 코딩 방식 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              OpenAI Canvas - ChatGPT와 함께하는 새로운 작성 및 코딩 방식

     * Canvas는 ChatGPT와 함께 글쓰기 및 코딩 프로젝트를 수행할 수 있는 새로운 인터페이스임
     * 별도의 창에서 열리며, ChatGPT와 협업하여 아이디어를 생성하고 수정할 수 있음
     * GPT-4o로 구축되었으며, 현재 베타 버전으로 ChatGPT Plus 및 Team 사용자에게 제공 중.
     * Enterprise 및 Edu 사용자는 다음 주에 액세스 가능하며, 베타 종료 후 모든 ChatGPT Free 사용자에게 제공 예정

ChatGPT와의 더 나은 협업

     * ChatGPT는 매일 글쓰기와 코딩을 돕기 위해 사용됨
     * 기존 채팅 인터페이스는 편리하지만, 편집과 수정이 필요한 프로젝트에는 한계가 있음
     * Canvas는 이러한 작업을 위한 새로운 인터페이스를 제공함
     * 특정 섹션을 강조 표시하여 ChatGPT가 집중할 부분을 명확히 할 수 있음
     * 프로젝트를 직접 편집하고, 다양한 단축키를 통해 글 길이 조정, 코드 디버깅 등의 작업을 수행할 수 있음
     * Canvas는 필요할 때 자동으로 열리며, ""use canvas""라는 프롬프트로 수동으로 열 수도 있음

Canvas에서의 코딩

     * 코딩은 반복적인 과정이며, canvas는 ChatGPT의 변경 사항을 추적하고 이해하기 쉽게 만듦
     * 코딩 단축키로 코드 리뷰, 로그 추가, 주석 추가, 버그 수정, 언어 포팅 등을 지원함

협업자로서의 모델 훈련

     * GPT-4o는 창의적인 파트너로서 협업할 수 있도록 훈련됨
     * Canvas를 언제 열고, 타겟 편집을 수행하며, 전체 재작성할지를 이해함
     * 다양한 콘텐츠 생성, 타겟 편집, 문서 재작성, 인라인 비평 제공 등의 핵심 행동을 개발
     * 자동 평가를 통해 진행 상황을 측정하고, 인간 생성 데이터에 의존하지 않고도 글쓰기 품질과 사용자 상호작용을 개선

다음 단계

     * AI를 더 유용하고 접근 가능하게 만들기 위해 상호작용 방식을 재고해야 함
     * Canvas는 ChatGPT의 시각적 인터페이스에 대한 첫 번째 주요 업데이트임
     * 초기 베타 단계이며, 기능을 빠르게 개선할 계획

GN⁺의 정리

     * canvas는 ChatGPT와의 협업을 통해 글쓰기와 코딩 프로젝트를 보다 효과적으로 수행할 수 있는 새로운 인터페이스임.
     * 프로젝트의 특정 부분에 집중하여 편집 및 수정을 쉽게 할 수 있는 기능을 제공함.
     * AI와의 상호작용 방식을 혁신하여 사용자 경험을 개선하려는 시도임

        Hacker News 의견

     * 생성 AI가 현재 기술 노동자와 소프트웨어 개발자에게 가장 큰 영향을 미치고 있음. 산업의 큰 변화가 예상됨. 팀의 주니어 개발자가 ChatGPT를 사용해 처음 앱을 개발했음.
     * 많은 AI 코딩 도구들이 자체 편집기를 사용하도록 요구하는 것이 문제임. 기존 도구와 워크플로우에 AI를 통합하는 것이 더 바람직함.
     * ChatGPT의 캔버스 기능이 마음에 듦. AI 챗봇의 적절한 인터페이스로 코드와 비코드 작업 모두에 유용함.
     * Google이 Gemini를 Google Docs에 통합하면 좋겠음. OpenAI가 소비자 B2C에 집중하는 대신 인프라 제공자로서의 역할에 더 집중해야 한다고 생각함. 장기적으로 OpenAI는 인프라 제공자 또는 SaaS 중 하나로 자리잡을 것임.
     * 'Canvas'라는 이름의 도구가 너무 많음.
     * 브라우저에서 코드 반복 작업의 매력을 이해하지 못함. 데이터 모델, 코드 규칙, 라이브러리 선택 등을 모델에 제공해야 함.
     * OpenAI의 발표가 모든 Plus 사용자에게 동시에 기능을 제공할 수 있을 때까지 기다렸으면 좋겠음. 커뮤니케이션이 부족함. 새로운 기능에 대한 기본 정보를 블로그에 명시적으로 제공해야 함.
     * 'Canvas'라는 이름을 그만 사용했으면 좋겠음.
     * Claude의 기능과 맞추려는 시도에 대해 혼합된 감정이 있음. Anthropic의 책임 있는 기업 거버넌스 모델을 지지함. ChatGPT가 Claude와의 격차를 줄이는 것이 우려됨.
     * Claude Artifacts와 비교하여 ChatGPT의 개선점이 있지만, 브라우저를 벗어나지 않고 코드를 실행하고 결과를 확인할 수 있는 'Preview' 기능이 부족함.

     'Canvas'라는 이름을 그만 사용했으면 좋겠음.

   ㅋㅋㅋ

   동감합니다 ㅋ
"
"https://news.hada.io/topic?id=16964","스포츠 도박 합법화의 실수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             스포츠 도박 합법화의 실수

    스포츠 도박 합법화는 큰 실수였음

     * 주말 동안 수백만 명의 미국인이 축구를 시청함
     * 미국 게임 협회는 2024년에 NFL 경기에 350억 달러의 베팅이 예상된다고 발표함
     * 이는 작년보다 약 1/3 증가한 수치임

    스포츠 도박의 확산

     * 스포츠를 따라가다 보면 도박이 어디에나 있음
     * 방송에서 도박 광고가 넘쳐나며, Seton Hall 여론조사에 따르면 미국인의 3분의 1 이상이 스포츠에 베팅함
     * 2018년 이전에는 거의 모든 곳에서 스포츠 도박이 금지되었으나, 현재는 38개 주와 컬럼비아 특별구에서 합법화됨
     * 연간 100억 달러의 수익을 창출함

    스포츠 도박의 영향

     * 많은 스포츠 팬들은 게임에 베팅하는 것을 즐기며, 친구들과 하는 것보다 회사와 하는 것이 큰 문제가 아니라고 생각함
     * 그러나 사회과학 문헌에 따르면 이는 매우 다름
     * 스포츠 도박의 증가는 경제적으로 불안정한 가정에 재정적, 가족적 고통을 초래함
     * 6년간의 실험 결과, 스포츠 도박 합법화는 큰 실수였음이 입증됨

    저자 소개

     * Charles Fain Lehman은 Manhattan Institute의 연구원이며, City Journal의 기고 편집자임

    GN⁺의 정리

     * 스포츠 도박 합법화는 많은 사람들에게 재정적, 가족적 문제를 야기함
     * 경제적으로 취약한 가정에 특히 큰 영향을 미침
     * 스포츠 팬들이 도박을 즐기지만, 이는 사회적 문제를 야기할 수 있음
     * 유사한 기능을 가진 다른 프로젝트나 제품으로는 도박 중독 예방 프로그램이 있음

        Hacker News 의견

     * 스포츠 도박은 삶을 망치며, 스포츠 자체도 망가뜨림
          + 선수들이 부정행위를 하고, 도박 시스템이 스포츠에 침투함
          + 경쟁의 정신을 소모시키며, 스포츠와 도박은 상반된 개념임
     * 도박과 고리대금리 허용은 니체가 말한 ""신의 죽음"" 현상의 결과임
          + 종교적 믿음이 사라지면서 금지된 것들의 깊은 이유를 잊어버림
          + 도박과 같은 문제를 다룰 철학적 모델이 부재함
     * 브라질도 2018년에 도박을 합법화했으며, 이는 암처럼 퍼지고 있음
          + 중앙은행 보고서에 따르면, 가장 가난한 브라질인들이 도박에 많은 돈을 씀
          + 도박 광고가 everywhere 있으며, 유명 인사들이 이를 홍보함
          + 규제가 필요함
     * 도박은 프로 스포츠를 망치며, 도박 광고가 게임 중에 자주 나와서 우울하고 방해됨
          + 도박 합법화에 대한 찬성 의견을 받아들이기 어려움
          + 몇몇 큰 이벤트에 한정된 합법화는 괜찮을 수 있음
          + 도박을 일상적인 습관으로 만드는 것은 반대함
     * 오랜만에 만난 친구들이 도박에만 관심을 가짐
          + 특정 팀을 응원하지 않고, 자신의 베팅이 이기길 바람
          + 도박이 스포츠 관람의 재미를 망칠 것 같음
     * 도박이 삶을 망치는 이유는 돈이 너무 중요하기 때문임
          + 돈이 없는 사회에서는 도박이 덜 위험할 것임
     * 어릴 때 아버지와의 경험으로 도박에 대한 부정적인 감정을 가지게 됨
          + 도박으로 인해 배고픈 경험을 한 후, 도박을 싫어하게 됨
     * 많은 나라들이 담배 광고를 금지하지만, 스포츠 도박 광고는 금지하지 않음
          + 두 가지 모두에 대해 같은 도덕적, 사회적 논쟁이 가능함
     * 스포츠 도박을 다시 금지하는 것이 가장 좋은 해결책일 수 있음
          + 도박이 가정 폭력을 증가시킨다는 연구 결과가 있음
          + 도박을 금지하기보다는 도박으로 인한 문제를 해결하기 위한 지원과 치료가 필요함
"
"https://news.hada.io/topic?id=16977","죽도록 웃기는 우리들죽도록 웃기는 우리들 (2014)

     * 다운로드 및 링크
          + 만화의 4페이지 인쇄 가능한 버전을 여기에서 다운로드할 수 있음
          + 이 사려 깊은 책의 서문을 여기에서 읽을 수 있음
          + Neil Postman의 기술과 사회에 관한 60분 강의를 여기에서 볼 수 있음
          + George Orwell의 ""1984"" 집필 과정에 관한 흥미로운 기사를 발견했음
     * Aldous Huxley vs. George Orwell
          + Orwell이 두려워한 것은 책을 금지하는 사람들이었음
          + Huxley가 두려워한 것은 책을 읽고 싶어하는 사람이 없어서 책을 금지할 이유가 없다는 것이었음
          + Orwell은 정보를 박탈하는 사람들을 두려워했음
          + Huxley는 너무 많은 정보를 제공하여 우리가 수동적이고 이기적으로 변하는 것을 두려워했음
          + Orwell은 진실이 우리에게서 숨겨질 것을 두려워했음
          + Huxley는 진실이 무관한 정보의 바다에 묻힐 것을 두려워했음
          + Orwell은 우리가 포로 문화가 될 것을 두려워했음
          + Huxley는 우리가 사소한 문화에 빠져들 것을 두려워했음
          + Huxley는 ""Brave New World Revisited""에서 시민 자유주의자와 합리주의자들이 독재에 반대하기 위해 항상 경계하지만, 인간의 거의 무한한 산만함에 대한 욕구를 간과했다고 언급했음
          + 1984년에는 사람들이 고통을 가함으로써 통제됨
          + Brave New World에서는 사람들이 쾌락을 가함으로써 통제됨
          + 요약하자면, Orwell은 우리가 싫어하는 것이 우리를 망칠 것을 두려워했음
          + Huxley는 우리가 사랑하는 것이 우리를 망칠 것을 두려워했음
     * ""Amusing Ourselves to Death""
          + Neil Postman의 ""Amusing Ourselves to Death: Public Discourse in the Age of Show Business""에서 모든 단어를 인용함
          + 이 책은 Huxley가 옳았을 가능성에 대해 다루고 있음

GN⁺의 정리

     * 이 글은 Aldous Huxley와 George Orwell의 두려움에 대한 비교를 다루고 있음
     * Huxley는 과도한 정보와 쾌락이 우리를 망칠 것을 두려워했으며, Orwell은 정보의 박탈과 고통이 우리를 망칠 것을 두려워했음
     * 이 글은 현대 사회에서 정보 과부하와 쾌락 추구가 어떻게 우리의 비판적 사고를 저해할 수 있는지에 대한 통찰을 제공함
     * 비슷한 주제를 다루는 책으로는 ""Brave New World""와 ""1984""가 있음

        Hacker News 의견

     * ""Amusing Ourselves to Death""는 미디어가 인간과 사회에 미치는 영향을 분석한 책으로, 소셜 미디어 이전에 쓰였지만 여전히 많은 통찰을 제공함
          + 다양한 미디어가 사회에 미치는 영향을 예측하고 이해하는 프레임워크를 제공함
          + 소셜 미디어가 사람들을 멍청하게 만든다는 논쟁에 대해 Postman의 분석이 유용할 것임
     * Orwell이 두려워했던 것에 대해 너무 많은 의미를 부여하는 것은 부당함
          + 그는 당시 소련과 영국 정부의 행동을 바탕으로 글을 썼으며, 소련이 영국을 지배할 경우를 상상했음
     * ""Amusing Ourselves to Death""의 내용을 시각적 만화로 표현하는 것은 아이러니함
          + TikTok 비디오로 나올 날이 기다려짐
     * 체스는 정신을 고양시키지 않고, 귀중한 시간을 낭비하게 만든다는 1858년의 Scientific American 기사 인용
          + 체스는 새로운 사실을 추가하지 않으며, 아름다운 생각을 자극하지 않음
     * 대부분의 사람들이 자본 가치를 우선시하는 경제 시스템에서 일하고 있음
          + 인간 존엄성, 장기 생존, 다른 종의 생명을 희생시키면서 자본 가치를 증가시키는 것을 우선시함
          + 현재의 문제를 해결하지 못하고 있음
     * 현재의 트위터는 재미보다는 짜증을 유발함
          + 우리는 스스로를 짜증나게 하고 있음
     * 몇 년 전 디자인 스튜디오에서 일할 때, ""Brave New World""를 읽는 여성이 등장하는 이미지 영화를 제작했음
          + 관련된 사람들 중 아무도 책을 읽지 않았음
     * ""Infinite Jest""라는 소설을 추천함
          + 반프로 테니스 등 다양한 주제를 다룸
     * Neil Postman을 2016년에 발견하고 그의 책을 많이 읽었음
          + 그의 사후 많은 것이 변했지만 그의 아이디어는 여전히 유효함
"
"https://news.hada.io/topic?id=17002","HN에 묻다: 2024년 9월에 진행 중인 프로젝트는 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HN에 묻다: 2024년 9월에 진행 중인 프로젝트는 무엇인가?

     * 무엇을 작업하고 있습니까?
          + 현재 진행 중인 프로젝트나 작업에 대해 설명함
          + 새로운 아이디어나 계획에 대해 논의함
     * 새로운 아이디어가 있습니까?
          + 최근에 생각해본 새로운 아이디어나 개념에 대해 설명함
          + 이러한 아이디어가 어떻게 발전할 수 있는지에 대해 논의함

GN⁺의 정리

     * 이 기사는 현재 작업 중인 프로젝트와 새로운 아이디어에 대해 논의하는 데 중점을 둠
     * 독자들이 자신의 프로젝트와 아이디어를 공유하고 발전시키는 데 도움이 될 수 있음
     * 비슷한 기능을 가진 프로젝트로는 GitHub의 다양한 오픈 소스 프로젝트가 있음

        Hacker News 의견

     * Docusign의 비싼 가격과 불공정함에 실망하여 새로운 스타트업을 시작함
          + 3년 동안 구독이 필요 없는 플랫폼을 구축하고, 보낸 문서에 대해서만 비용을 지불하는 시스템을 만듦
          + goodsign.io에서 확인 가능함
     * nuenki.app라는 언어 학습 도구를 개발 중임
          + 웹페이지에 적절한 난이도의 문장을 삽입하여 언어를 학습하게 함
          + 비용 절감을 위해 DeepL에서 Claude로 전환 중이며, Gemma 2 9B도 실험 중임
          + 마케팅에 어려움을 겪고 있으며 Reddit 광고와 콘텐츠 마케팅을 고려 중임
          + 예산이 매우 적음
     * bauble.studio라는 프로그래매틱 3D 아트 플레이그라운드를 개발 중임
          + 서명 거리 함수(SDF)를 사용하여 3D 형태를 함수로 표현함
          + Bauble은 고급 GLSL 컴파일러로, SDF를 일급 값으로 모델링할 수 있게 함
          + 문서 작업과 몇 가지 기본 요소를 구현한 후 홍보할 계획임
          + 예제 문서와 아트 예제 확인 가능함
     * 100시간 동안 거대한 버섯 모형을 용접하여 제작함
          + 두꺼운 폼 패널과 스프레이 폼을 사용하여 외부를 덮고, 내부는 치킨 와이어와 페인터 타프로 덮음
          + 음악 축제에서 사용되었으며, 사람들에게 큰 인기를 끌었음
     * Python용 비동기 라이브러리인 taskiq를 개발 중임
          + 분산 큐를 통한 RPC 설정을 쉽게 할 수 있게 함
          + 현재 실행 중인 작업을 모니터링하는 기능을 추가 중임
     * 데이터베이스를 CLI로 빠르게 표시하는 오픈 소스 CLI 도구인 PeepDB를 개발 중임
     * macOS용 무료 오픈 소스 C++ 라이브 비디오 및 VJ 앱인 Nottawa를 개발 중임
          + 비전문가와 취미 예술가를 위한 간단하고 오디오 반응형 비주얼 제공
          + 2024년 출시를 목표로 함
          + ShaderToy의 Creative Commons 조각과 OpenFrameworks를 사용함
     * Jupyter/데이터프레임용 데이터 테이블인 Buckaroo를 개발 중임
          + 1000개 이상의 행을 스크롤할 수 있는 성능 좋은 테이블과 요약 통계 및 히스토그램 제공
          + 저코드 UI를 통해 간단한 데이터 변환을 클릭만으로 수행할 수 있음
     * 전자 보드 게임을 설계함
          + Settlers of Catan과 유사하지만 비용을 절감하여 8세그먼트 디스플레이와 RGB LED를 사용함
          + 중앙 마이크로컨트롤러로 전체 보드를 제어함
          + 판매 계획은 없으며, 새로운 것을 배우기 위한 프로젝트로 진행함
     * Godot 게임 엔진 튜토리얼을 시작함
          + 15년 경력의 개발자로, 게임 메이커로 시작했으나 소프트웨어 엔지니어링을 공부하면서 게임 개발을 중단함
          + 현재 상황이 달라져 다시 게임 개발을 시작함
          + 게임 디자인 문서를 작성 중이며, 아트와 음악도 직접 만들 계획임
"
