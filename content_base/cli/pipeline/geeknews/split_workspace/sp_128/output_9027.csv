"https://news.hada.io/topic?id=15547","Roblox의 4D 생성형 AI 로드맵","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Roblox의 4D 생성형 AI 로드맵

     * Roblox는 단일 3D 객체를 넘어서 동적 상호작용을 위한 4D 생성 AI를 개발 중임
     * 4D의 도전 과제를 해결하려면 외관, 모양, 물리, 스크립트 전반에 걸친 멀티모달 이해가 필요함
     * 4D 시스템의 기초가 되는 초기 도구들이 이미 플랫폼에서의 제작을 가속화하고 있음

Roblox의 현재 상황:

     * Roblox는 크리에이터에게 아이디어 구현에 필요한 도구, 서비스, 지원을 제공하여 몰입감 있는 3D 경험, 아바타, 액세서리 제작을 지원함
     * 무료 Roblox Studio 앱을 통해 Roblox 워크플로우에 맞게 특별히 설계되고 Roblox 전용 콘텐츠로 훈련된 생성 AI 도구들을 출시함
     * 이러한 도구들은 전문가와 초보자 모두에게 창작 과정을 더 쉽고, 효율적이며, 재미있게 만듦
     * 1D(스크립트), 2D(표면), 3D(공간) 개별 에셋 제작을 다루며, 3D 제작 프로세스의 각 부분을 강화함
     * 이를 통해 크리에이터의 기술을 확장하고 컨셉에서 완성까지의 시간을 단축함
     * Roblox 커뮤니티의 요구에 부응하며, 그 이상으로 비전을 확장하고 있음

4D 생성형 AI로의 도전:

     * Roblox는 상호작용을 네 번째 차원으로 하는 4D 생성 AI를 개발 중임
     * 4D는 상호작용을 의미하며, Roblox 온라인 플랫폼의 힘은 사람, 객체, 환경 사이의 상호작용에 있음
     * 4D 생성형 AI의 도전 과제는 에셋을 플랫폼에 적합한 무제한적 상호작용이 가능한 방식으로 생동감 있게 만드는 것임
     * 아바타는 단순한 모양과 색상이 아니라 골격, 애니메이션, 도구 사용 및 밸런스 유지 능력까지 갖춰야 함
     * 스포츠카는 매끄러운 형태와 페인트뿐 아니라 엔진, 가동 부품, 정밀 제어를 위한 물리 장치도 필요함
     * 각 요소는 3D에서 4D로 확장되어 물리를 통해 모든 부품과, 아바타를 통해 사용자와 상호작용함
     * 이러한 상호작용이 풍부한 4D 요소들이 스타일을 조화시키고 객체 간, 환경과의 상호작용 지원을 주입하는 더 큰 환경에 추가될 수 있음

현재의 도전 과제들:

     * 기능성: AI가 생성한 객체는 기능적이어야 함. 시스템이 트럭이나 비행기의 3D 형상을 봤을 때 불투명한 물체로 취급하지 않고, 관절이 필요한 부분이나 매쉬가 열려야 할 곳을 자동으로 인식해야 함
     * 상호작용성: AI로 생성된 항목은 독립적으로 기능할 뿐만 아니라 환경의 다른 객체와 상호작용할 수 있어야 함. 생성된 자동차가 지형에서 어떻게 움직이는지, 바위와 충돌했을 때 바위의 크기와 차량 속도에 기반하여 어떻게 구겨지는지를 이해해야 함
     * 제어 가능성: 프롬프트 엔지니어링은 3D 객체에 적용하기에는 지나치게 복잡함. 크리에이터의 아이디어를 실현시키기 위해서는 AI 어시스턴트와 더 빠르고 쉽게 소통하고 개선할 수 있는 방법이 필요함

Roblox의 미래:

     * 4D로 가는 도전 과제를 해결하기 시작하면서, 크리에이터들은 더 많이, 더 빠르게 제작할 수 있게 될 것임
     * Material Generator의 베타 버전을 사용하는 창작자들은 물리 기반 렌더링(PBR) 소재 변형 사용량이 100% 이상 증가했고, Code Assist의 도움을 받아 약 5억 3,500만 글자의 코드를 생성함
     * 더 많은 사람들이 크리에이터가 될 수 있게 되면서 Roblox에서 더 다양한 경험을 보게 될 것으로 기대됨
     * 그들이 무엇을 만들고 어떻게 만드는지가 새로운 크리에이터들을 위해 어디에 투자할지를 보여줄 것임
     * 4D 생성형 AI로 Roblox는 경험과 에셋 제작의 새로운 경계를 열었음

   AI 게임 스튜디오 만들기 : 우리가 배운 것들
   할리우드와 게임이 AI와 싸우는 이유

   똑똑한 게임사들은 AI를 잘 활용해나가고 있네요.
"
"https://news.hada.io/topic?id=15496","[번역] MoA(Mixture-of-Agents, 에이전트 혼합 기법), LLM 성능을 향상시키기 위한 새로운 기법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [번역] MoA(Mixture-of-Agents, 에이전트 혼합 기법), LLM 성능을 향상시키기 위한 새로운 기법

    PyTorchKR

   MoE(Mixture-of-Experts)와 MoD(Mixture-of-Depths)에 이어, LLM의 성능을 향상시키기 위한 새로운 기법이 제안되어 소개합니다. 에이전트 혼합(MoA, Mixture-of-Agents)이라는 이름의 이 기법은 여러 LLM의 강점을 모아서 집단적 전문 지식을 활용하여 성능을 크게 향상시킬 수 있는 기법이라는데요, 함께 살펴보시죠. :smiley:

    전문가 혼합(MoE, Mixture-of-Experts) 기법에 대한 간단한 소개

   전문가 혼합이라 불리는 MoE(Mixture-of-Experts) 기법은 학습 시점에 여러 전문가 모델들을 포함하도록 학습하여 모델의 크기는 크지만, 실행(추론, Inference) 시점에는 사용자의 질문(Query)에 대해 적절히 답변할 수 있는 일부 전문가들만 활성화하는 방식으로 모델의 성능을 향상시키는 기법입니다. #mixture-of-experts

    깊이 혼합(MoD, Mixture-of-Depths) 기법에 대한 간단한 소개

   최근에는 깊이 혼합 기법이라 부를 수 있는 MoD(Mixture-of-Depths) 기법에 대해서도 연구 및 공개가 되었는데, 이는 활성화된 레이어를 줄이는 기법으로 깊이(depth)를 줄이는 것에 대한 것입니다. #mixture-of-depths


MoA(Mixture-of-Agents, 에이전트 혼합 기법), LLM 성능을 향상시키기 위한 새로운 기법

  에이전트 혼합(MoA, Mixture-of-Agents) 기법 논문 소개

   최근 여러 대규모 언어 모델(LLM)들이 출시 및 공개되고 있으며, 각각의 LLM들은 하나 또는 여러 가지 분야에서 인상적인 성능을 보이고 있습니다. 하지만 이러한 LLM들은 모델의 크기, 학습 데이터 및 연산 인프라 등에 비례하는 성능을 보이고 있어, 이러한 모델을 더 확장하는 것은 매우 비용이 많이 들게 됩니다.

   이 논문(Mixture-of-Agents Enhances Large Language Model Capabilities)은 여러 LLM의 강점을 활용하여 추론 및 언어 생성 능력을 향상시킬 수 있는 에이전트 혼합(Mixture-of-Agent) 프레임워크를 제안하고 있습니다. 이러한 에이전트 혼합 기법은 모델이 다른 모델의 답변을 활용하였을 때, 설령 그 답변의 품질이 낮더라도 (활용하지 않았을 때보다) 더 나은 품질의 답변을 생성하는 LLM 간의 협력성(Collaborativeness)에 기초하고 있습니다.

   이러한 MoA 기법을 통해 여러 LLM들이 갖고 있는 고유한 강점을 가지고 있어 이들의 전문 지식을 결합하여 최종적으로 더 나은 성능을 낼 수 있도록 합니다. 그 결과, AlapacaEval 2.0, MT-Benchmark, FLASK 등의 여러 벤치마크에서 뛰어난 성능을 보였으며, 특히 GPT-4o (GPT-4 Omni) 대비 더 뛰어난 성능을 보였습니다.

   무엇보다, MoA 기법은 기존의 LLM 자체를 변경하지 않고, LLM의 입력 프롬프트 및 일부 설정(temperature를 비롯한 sampling options)들만 변경하여 사용한다는 것이 무엇보다 큰 장점입니다. 즉, 별도의 미세 조정(fine-tuning)과 같은 과정이 필요하지 않으며, 사용하는 에이전트 LLM의 규모나 구조와 상관없이 최신의 LLM을 바로 적용해볼 수도 있는 유연성 및 확장성을 제공합니다.

  에이전트 혼합(MoA, Mixture-of-Agents) 기법 소개

   Mixture-of-Agents(MoA) 방법론은 여러 LLM의 집단적 전문 지식을 계층 구조를 통해 활용하는 것을 목표로 합니다. 각 계층은 여러 LLM 에이전트로 구성되며, 이전 계층의 출력물을 기반으로 응답을 생성하여 최종 출력을 점진적으로 개선합니다.

   MoA 기법의 핵심 아이디어는 대규모 언어 모델(LLM)이 다른 모델의 답변을 참고할 때 더 높은 품질의 응답을 생성할 수 있다는 점에서 시작하고 있습니다. 즉, 여러 LLM들의 답변을 서로의 답변을 참고할 수 있도록 하여 협력성(collaborativeness)을 갖추게 함으로써, 최종 답변의 성능을 높이는 것입니다. 이렇게 하면 중간 결과물의 품질이 낮더라도 최종 답변의 품질을 크게 높일 수 있습니다.

   에이전트 혼합 기법의 주요 특징들은 다음과 같이 정리해 볼 수 있습니다:
     * 계층 구조: MoA 프레임워크는 여러 LLM 에이전트로 구성된 다층 구조를 사용합니다. 각 에이전트는 이전 계층의 응답을 개선하여 최종 출력을 점진적으로 향상시킵니다.
     * 모델 다양성: 프레임워크는 각 계층에서 다양한 LLM을 사용하는 것을 강조합니다. 다양한 모델이 결합될 때 더 풍부하고 세밀한 응답을 생성할 수 있습니다.
     * 반복적 개선: 반복적인 과정은 생성된 텍스트를 지속적으로 개선할 수 있게 하며, 여러 모델의 협력적 합성을 통해 최상의 결과를 도출합니다.

    대규모 언어 모델의 협력성(Collaborativeness)

   대규모 언어 모델(LLM, Large Language Models)의 협력성(collaborativeness)은 다양한 LLM들이 서로의 출력을 참조할 때 더 나은 응답을 생성할 수 있는 능력을 의미합니다. 많은 연구에 따르면, 하나의 언어 모델이 다른 모델의 출력을 보조 정보로 활용하면 응답의 품질이 향상됩니다. 이는 각 모델이 서로 다른 강점을 가지고 있기 때문에 가능한 일입니다.

   예를 들어, 어떤 모델은 복잡한 명령어를 잘 따르지만, 다른 모델은 코드 생성에 더 뛰어난 성능을 보일 수 있습니다. 이러한 다양성은 협력적 환경에서 각 모델이 다른 모델의 약점을 보완할 수 있게 합니다. 이러한 협력성을 실험적으로 입증하기 위해 여러 벤치마크 테스트가 사용되었으며, 특히 AlpacaEval 2.0 벤치마크에서는 여러 모델이 서로의 출력을 참조할 때 성능이 크게 향상되는 것을 확인할 수 있습니다.

   이를 통해 LLM들이 독립적으로 생성한 답변을 제공받았을 때, 전체적인 성능이 현저히 향상되는 것을 관찰할 수 있습니다. 이와 같은 결과는 LLM들이 본질적으로 협력적이라는 현상을 보여줍니다. 더불어, 질이 낮은 출력물이라도 다른 모델의 출력물로부터 정보를 얻을 때 더 나은 응답을 생성할 수 있음을 시사합니다.

   이 논문에서는 에이전트 혼합 기법(MoA)에서 사용하는 LLM들의 역할을 제안자(Proposer) 와 취합자(Aggregator) 의 2가지로 나누어서 설명하고 있습니다:
     * 제안자(Proposer) LLM: 다른 모델에서 사용할 수 있는 유용한 참조 응답을 생성하는 데 탁월한 LLM입니다. 좋은 제안자는 그 자체로 반드시 높은 점수를 받는 응답을 생성하지는 않지만, 더 많은 맥락과 다양한 관점을 제공하여 궁극적으로 집계자(Aggregator) 와 함께 사용할 때 더 나은 최종 응답에 기여할 수 있습니다.
     * 집계자(Aggregator) LLM: 다른 모델(들)의 응답을 하나의 고품질 출력으로 합성하는데 능숙한 모델입니다. 효과적인 집계자는 집계자 LLM이 자체적으로 생성할 수 있는 답변의 품질보다 낮은 품질의 입력이 제안자(Proposer) 로부터 들어왔을 때도 최종 답변의 품질을 유지하거나 향상시킬 수 있어야 합니다.

    에이전트 혼합 기법의 구조 (Architecture of MoA, Mixture-of-Agents)

   MoA 프레임워크는 위 그림과 같이 여러 계층(Layer, $l$)으로 구성되며, 각 계층(Layer-$i$)에는 여러($n$)개의 LLM들이 포함됩니다. 그림에서는 $i$ 번째 계층에서의 각 LLM들은 $A_{i,1}$, $A_{i,2}$, ...$A_{i,n}$ 으로 표시하고 있습니다. 이 구조에서 각 계층의 에이전트는 이전 계층의 모든 출력물을 보조 정보로 사용하여 응답을 생성합니다. 이 때 유의해야 할 점은 각 LLM이 동일한 계층(layer) 및 서로 다른 계층(layer)에서 재사용될 수 있다는 것입니다.

   처음에는 첫 번째 계층의 LLM이 독립적으로 주어진 프롬프트에 대한 응답을 생성합니다. 그런 다음, 이 응답은 다음 계층의 에이전트에게 전달되어 더 정교한 응답을 생성합니다. 이 과정은 최종적으로 더 정밀하고 종합적인 응답이 생성될 때까지 반복됩니다. 이 과정은 여러 차례 반복되며, 최종적으로 더 강력하고 종합적인 응답을 얻을 수 있습니다. 이를 통해 개별 모델의 한계를 극복하고, 보다 다양한 정보와 관점을 통합한 고품질의 응답을 생성할 수 있으며, 특히 복잡한 문제 해결에서 매우 유용합니다.

   이러한 에이전트 혼합 기법 구조의 또 다른 중요한 요소는 모델 선택입니다. 각 계층에 포함될 모델을 성능과 다양성에 따라 신중하게 선택하는 것이 중요합니다. 성능 지표와 모델의 다양성을 고려하여 최적의 에이전트 구성을 결정합니다.

    사용할 에이전트(LLM)의 선택 기준

   에이전트 혼합 기법에서는 특정 작업을 얼마나 잘 수행하는지를 나타내는 성능 지표 외에도 얼마나 다양한 답변을 생성할 수 있는지를 나타내는 다양성을 사용하여 모델을 선택하고 있습니다:
     * 성능 지표(Performance Metrics): 각 모델이 특정 작업에서 얼마나 잘 수행되는지를 나타내며, 이를 통해 높은 품질의 출력을 생성할 수 있는 모델을 선택합니다. 다양성은 모델들이 서로 다른 방식으로 문제를 접근하고 해결할 수 있는 능력을 의미합니다. 예를 들어, 어떤 모델은 자연어 처리에서 뛰어난 성능을 보일 수 있지만, 다른 모델은 코드 생성이나 수학 문제 해결에서 더 나은 성능을 보일 수 있습니다. 이러한 다양한 능력을 가진 모델들을 혼합함으로써, 다중 에이전트 구조는 보다 종합적이고 강력한 응답을 생성할 수 있습니다.
     * 다양성에 대한 고려(Diversity Considerations): 모델의 다양성은 단일 모델이 가지고 있는 편향성을 줄이고, 더 넓은 범위의 문제를 해결할 수 있게 합니다. 예를 들어, 동일한 모델이 여러 계층에서 반복적으로 사용되면, 그 모델의 한계로 인해 응답의 품질이 저하될 수 있습니다. 따라서 다양한 모델을 사용하는 것이 중요합니다. 성능 지표와 다양성을 고려하여 각 계층에 적합한 모델을 선택함으로써, 최종 응답의 품질을 극대화할 수 있습니다.

    단일 제안자(Single-Proposer) 구조 및 다중 제안자(Multi-Proposer) 구조

   높은 수준의 추상적인 관점(High-level perspective)에서 보았을 때, 에이전트-혼합 기법(MoA)은 전문가-혼합 기법(MoE)를 모델 수준으로 끌어올린 것으로 볼 수 있습니다. 이러한 MoA 기법은 LLM의 내부 활성화나 가중치를 수정하지 않고 전적으로 프롬프트 인터페이스를 통해서만 동작할 수 있습니다. 즉, MoE와 같이 단일 모델 내에 특화된 하위 네트워크를 두지 않고 여러 계층에 걸쳐서 여러개(또는 하나)의 LLM을 사용하고 있습니다.
     * 단일 제안자(Single-Proposer) 구조: 에이전트 혼합 기법(MoA)은 기본적으로는 여러 에이전트(LLM)을 사용하는 것을 기반으로 하지만, 동일한 LLM을 여러번 사용할 수도 있습니다. 이러한 경우에는 동일한 모델에 입력을 제공할 때 temperature 설정을 비롯한 다양한 샘플링 설정을 변경하여 여러가지 다른 출력을 생성하도록 합니다. 이러한 단일 제안자 구조에서는 각 계층(layer)에서 하나 또는 소수의 모델만 활성화되지만, 이 모델들이 생성하는 다양한 응답은 집계자(Aggregator)가 최종 응답을 생성하는 데 중요한 역할을 합니다
     * 다중 제안자(Multi-Proposer) 구조: 각 계층에 다양한 모델을 사용하여 각기 다른 출력을 생성합니다. 이는 모델 간의 상호작용과 협력성을 최대화하여 더 포괄적이고 높은 품질의 응답을 생성할 수 있게 합니다. 다중 제안자 구조는 모델의 다양성을 최대한 활용하여 문제 해결의 폭을 넓히고, 단일 모델이 가지고 있는 한계를 극복할 수 있습니다. 이러한 설정을 통해 다중 에이전트 구조는 보다 강력하고 종합적인 솔루션을 제공할 수 있습니다.

   여기에서 제안자(Proposers)와 집계자(Aggregators)는 상호 보완적인 역할을 수행합니다. 제안자는 다양한 접근 방식을 통해 초기 응답을 생성하고, 집계자는 이러한 응답을 종합하여 최종 응답의 품질을 보장합니다. 이러한 협력적인 구조를 통해 다중 에이전트 시스템은 단일 모델보다 더욱 강력하고 종합적인 응답을 제공할 수 있습니다.

  MoA 기법의 성능 및 비용 효율성

    MoA 기법의 성능

   위 표에서 MoA와 MoA-Lite는 6개의 제안자(proposer)를 각각 3개 계층(Layer)과 2개 계층(Layer)을 가진 모델입니다. MoA w/ GPT-4o는 MoA의 최종 집계자(aggregator)로 GPT-4o를 사용한 모델입니다. 위 벤치마크는 각 3번 실행 후 표준편차와 평균 점수를 함께 공개하였습니다.

   MoA 기법을 사용한 모델은 AlpacaEval 2.0에서 65.1%의 점수를 기록하여 GPT-4o의 57.5%를 능가했습니다. 또한, MT-Benchmark에서도 GPT-4o보다 나은 성능을 보였습니다.

   위 그림과 같이, MoA 기법은 단일 LLM을 사용했을 때보다 성능이 우수합니다. 이는 집계자(aggregator)가 단순히 제안자(proposer) LLM들이 생성한 응답 중 하나를 선택하는 것이 아니라, 제안된 답변들을 종합적으로 참고하여 답변을 생성하기 때문으로 보입니다.

   위 그림의 오른쪽은 BLEU와 같은 유사성 점수를 사용하여 집계자(aggregator)의 응답과 제안자(proposer)의 응답을 비교해 본 것입니다. 각 샘플에서 제안자들의 응답 n개를 바탕으로 GPT-4 기반 평가자가 결정한 n개의 선호도 점수와 n개의 유사성 점수 간의 순위 상관 계수를 계산한 것입니다. 즉, 승률과 BLEU 점수 간의 양의 상관관계가 있음을 확인할 수 있습니다.

   그 외에도 각 계층에 적절한 제안자 수를 찾아보기 위해 제안자의 수(위 좌측 표의 $n$)를 바꿔가며 최종 품질에 미치는 영향을 분석해보았습니다. $n$ 의 증가에 따라 최종 품질이 증가하며, 이는 다양한 모델에서 다양한 답변을 내보내기 때문에 집계자가 사용할 수 있는 정보가 많아지기 때문으로 분석할 수 있습니다. (여기에서 단일 제안자(Single-Proposer) 구조는 단일 LLM을 temperature를 0.7로 고정하여 사용한 결과입니다.)

   또한, 제안자와 집계자 역할 중 무엇 하나에 뛰어난 모델이 있는지 여부를 확인해보기 위한 실험도 수행하였습니다. (위 우측 표) GPT-4o, Qwen, LLaMA-3 모델은 제안자와 집계자 중 어디에 사용해도 좋은 성능을 보였으며, WizardLM을 비롯한 일부 모델들은 집계자보다는 제안자로써 좋은 성능을 보이는 것을 확인할 수 있습니다.

    MoA 기법의 토큰 및 비용 효율성

   예산 및 토큰 분석을 포함하여, MoA가 다른 최첨단 모델에 비해 높은 성능을 낮은 비용으로 제공할 수 있음을 보여줍니다. 이는 접근 방식이 효과적일 뿐만 아니라 비용 효율적임을 의미하며, 과도한 비용 없이 LLM 기능을 확장하는 실용적인 솔루션을 제공합니다.

   위 그림의 좌측(a)에서는 AplacaEval 2.0 벤치마크의 각 인스턴스에 대한 평균 추론 비용과 LC 승률을 보여주고 있습니다. 각 API 제공자의 비용을 바탕으로 계산하였으며, 이는 MoA 기법이 높은 성능을 달성하면서 과도한 비용을 발생시키지 않는 비용 효율적인 방법임을 보여주고 있습니다. 특히, MoA-Lite는 GPT-4 Turbo보다 약 4% 더 우수하면서 비용 효율성은 두 배 이상인 것이 주목할만합니다.

   위 그림의 우측(b)에서는 LC 승률과 테라플롭 수 간의 관계를 보여줍니다. 여기서 테라플롭 수를 지연 시간(latency)를 나타낼 수 있는 값으로 대신 사용하고 있습니다. 여기에서도 비용 효율성 분석과 유사하게 파레토 프런티어(Pareto frontier)가 관찰됩니다. 즉, 연산 자원을 효율적으로 사용하면서 LC 승률을 최대화하고 있음을 보여줍니다.

    그 외 협력성과 다양성에 대한 고찰

   이 논문에서 실행한 다양한 실험의 결과로, LLM은 다른 모델의 출력을 참조할 때 더 나은 응답을 생성한다는 것이 확인되었습니다. 이 협력성은 MoA 기법을 통해 성능이 향상되는 핵심 요소입니다. 또한, 각 계층에서 다양한 LLM을 사용하는 것이 단일 모델에 의존하는 것보다 일관되게 더 나은 결과를 도출한다는 것이 입증되었습니다. 즉, 모델의 다양성을 통해 나타나는 답변의 다양성이 전체적인 성능을 향상시키는데 효과적임을 확인할 수 있습니다.

  결론

   지금까지 살펴본 것과 같이, 에이전트 혼합 기법(MoA, Mixture-of-Agents)은 여러 LLM의 집단적 강점을 활용하는 데 있어 중요한 진전을 나타냅니다. 계층적, 협력적 접근 방식을 통해 MoA는 다양한 벤치마크에서 탁월한 성능을 발휘하며, 모델 다양성과 반복적 정교화의 가치를 입증합니다. 이 접근 방식을 활용하여 더 강력하고 효율적인 LLM 시스템을 위한 새로운 시도를 해볼 수 있을 것으로 기대합니다.

  MoA 기법 논문

   https://arxiv.org/abs/2406.04692

  MoA 기법 저장소

   https://github.com/togethercomputer/moa

  OpenPipe가 MoA 기법을 활용하여 25배 낮은 가격으로 GPT-4 성능을 뛰어넘는 모델 제공

   https://discuss.pytorch.kr/t/openpipe-moa-25-gpt-4/4668

   <br /><br />


   이 글은 GPT 모델로 정리한 글을 바탕으로 한 것으로, 원문의 내용 또는 의도와 다르게 정리된 내용이 있을 수 있습니다. 관심있는 내용이시라면 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다. 🤗

   ⚠️광고⚠️: :pytorch:파이토치 한국 사용자 모임🇰🇷이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일💌로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=15517","AI 네이티브 제품 프라이싱 하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         AI 네이티브 제품 프라이싱 하는 방법

   요약
     * 성공적인 AI 네이티브 회사들은 패키징/프로덕트 별로 다른 가격 정책을 사용함.
     * 고객들은 비용, ROI, 아웃풋 3가지 중 하나 혹은 3가지 모두에서 예측이 되기를 원함.
     * 고객들이 어떤 멘탈모달을 갖고 있는지 이해하고 메세징과 가격 정책을 고객들의 멘탈모달에 잘 일치시켜야 됨. 비용에서 가격 책정하는 것과 만들어주는 가치 기반 가격 책정하는 것에서 밸런스를 잘 찾아야 됨.
     * 프라이싱과 패키징은 회사의 전략임. PM이나 프라이싱 전문가에게 위임하면 안됨.
     * 목표는 장기적으로 TAM을 키우는 것이지 단기적인 객단가를 높이는 것이 아니며 이에 맞게 장기적으로 어떤 새로운 기능들을 붙일 것- 이고 이에 맞는 가격 전략이 무엇인지 고민해야됨.
"
"https://news.hada.io/topic?id=15552","기술 부채 개념, 유형, 해결 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          기술 부채 개념, 유형, 해결 방법

     * 기술 부채 개념
          + 시간이 더 걸릴 수 있는 더 나은 접근 방식을 취하는 대신 쉽지만 제한된 솔루션을 선택할 때 필요한, 향후 재작업의 암묵적 비용
          + 가장 효과적인 솔루션이 아닌 가장 빠른 솔루션을 선택하면서 발생한 추가 작업 비용
     * 소프트웨어 엔지니어 마틴 파울러가 구분한 기술 부채 유형
          + 신중하고 의도적인 기술 부채(Prudent & Deliberate)
               o 팀이 부채를 지고 있다는 걸 알지만 ‘더 빠른 출시 보상이 부채 상환 비용보다 더 큰지’ 여부 고려
          + 신중하지 못하고, 의도적인 기술 부채(Reckless & Deliberate)
               o 좋은 설계 관행 알고, 실천할 수 있지만 깔끔한 코드를 작성할 시간이 없어 ‘빠르고 지저분하게’ 진행하기로 한 결과
          + 신중하되, 의도하지 않은 기술 부채(Prudent & Inadvertent)
               o 좋은 소프트웨어를 개발했고, 코드도 깔끔했지만 시간이 지나서야 ‘설계가 어땠어야 한다’는 걸 깨달은 결과
          + 신중하지 못하되, 의도하지 않은 기술 부채(Reckless & Inadvertent)
               o 잘 몰라서 발생한 결과
     * 기술 부채 해결 방법
          + 기술 부채 목록 관리
               o 프로젝트 회고해 기술 부채를 목록으로 정리, 공유
               o 기술 부채 발생할 때마다, 이 부채 해결에 필요한 작업을 예상되는 노력, 일정과 함께 기록
               o 팀에서 기술 부채 해결 여부와 해결 시점 논의, 해결 방안 수립
          + 좋은 기술 부채와 나쁜 기술 부채 구분
               o 이렇게 기술 부채 구분하면 가장 큰 문제 우선순위 정하는 데 도움이 됨
          + 리팩토링
               o 업무 수행하면서 필요한 부분 정리, 조금씩 리팩토링
               o 대규모 리팩토링할 때 팀에 상황 공유, 기술 부채 위험과 비용 알림
          + 테스트 코드 작성
               o 코드가 복잡할수록, 리팩토링 규모가 클수록 버그 없이 코드 한 번에 수정키 어려움
               o 부작용 방지하려면 테스트 코드 작성
          + 품질 표준 설정, 준수
               o 품질 표준 설정해 코더가 엉성한 코드 배포 못하도록 함
          + 갑작스러운 규정·일정 변경 X
               o 개발자 관련 규정 지속 변경, 마감일 바꾸면 기술 부채 피하기 어려움
               o 현실적인 일정, 방법론, 작업량을 제공해 기술 부채를 관리하도록 함
     * 기술 부채가 항상 나쁘기만 할까?
          + 크리스 리코미니, 드미트리 리아보이 저서  『필독! 개발자 온보딩 가이드: 지속 가능한 소프트웨어와 원활한 협업 문화를 이해하는 프로페셔널 개발자의 탄생』 “나중에라도 팀이 해결 가능하도록 훈련된 부채라면 이는 ‘좋은 부채’라 할 수 있다”
          + But 기술 부채는 비즈니스에 부정적 영향 미칠 수 있으므로 해결해야 함
          + 이는 버그로 나타나 사용자 경험 저하
          + 기술 부채 악화되면, 개발자가 기존 코드베이스 안에서 작업하기 더 힘듦
          + 새 기능 개발, 기존 기능 수정에 시간 쪼개어 쓰느라 소프트웨어 개발 라이프사이클 느려지고, 시장 출시 시기 미뤄짐
"
"https://news.hada.io/topic?id=15529","독에 사는 Ball","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               독에 사는 Ball

BallIt: 작은 공 애플리케이션

  주요 기능

     * 작은 공이 Dock에 위치함
     * 공을 드래그하면 화면을 돌아다님
     * 두 손가락으로 스와이프 가능함
     * 빨간색으로 제공됨
     * 공을 튕기거나, 모서리에 맞추거나, 벽에 몇 번 맞는지 세는 등의 다양한 놀이 가능함

  다운로드

     * Releases에서 다운로드 가능함

  크레딧

     * Nate Heagy의 OS X Dashboard 위젯에서 영감을 받음
     * Wessley Roche의 Gist를 참고하여 Dock의 위치를 얻는 방법을 확장함

  마지막 말

     * 이 작은 공 애플리케이션을 즐기길 바람

GN⁺의 의견

     * 이 애플리케이션은 간단한 인터랙티브 요소로 사용자에게 재미를 제공함
     * 소프트웨어 엔지니어에게는 애니메이션과 사용자 인터페이스 구현에 대한 좋은 학습 기회가 될 수 있음
     * Nate Heagy와 Wessley Roche의 기여를 통해 오픈소스 커뮤니티의 협력과 공유 정신을 엿볼 수 있음
     * 비슷한 기능을 가진 다른 애플리케이션으로는 'Bouncing Ball' 등이 있음
     * 이 애플리케이션을 통해 사용자 경험을 향상시키는 방법을 고민해볼 수 있음

        Hacker News 의견

     * 데스크탑 양을 그리워하며, 여러 번 실행해서 CPU가 멈출 때까지 양 떼가 데스크탑을 돌아다니는 모습이 재미있었음.
     * 68k 매킨토시 시절의 단순함과 장난스러움, 미학을 그리워함.
     * Neko 소프트웨어를 언급해야 할 의무가 있다고 느꼈음.
     * 오래된 대시보드 위젯을 찾기 어려웠지만, 인터넷 아카이브에서 발견했음.
     * 몇 년 전 BonziBuddy가 다시 유행할 것이라고 예측했음을 아내에게 물어보라고 함.
     * 대시보드 공 위젯을 데스크탑에 놓을 수 있는 버그가 있었고, 학교의 모든 맥에 20개의 공이 있었음.
     * 초기 OSX의 Docklings 기능을 기억하며, CLI 명령어 출력을 보여주는 미니 앱을 사용했었음. 이는 CLI에 대한 관심을 키우는 초기 단계였음.
     * 데스크탑에 인터랙티브한 동물이나 애완동물을 위한 비슷한 아이디어를 찾고 있으며, 펭귄과 상호작용하고 먹이를 줄 수 있는 웹사이트를 발견했음.
     * Petz 시리즈를 떠올리며, 그 시리즈가 다시 돌아오지 않은 것이 놀라움.
     * 1990년경 Acorn Archimedes에서 BBC BASIC V로 아이콘 바에 튀는 공을 넣는 간단한 앱을 만들던 시절을 떠올리며 좋은 추억임.
"
"https://news.hada.io/topic?id=15506","미 검찰, 보잉에 대한 법무부 형사 기소 권고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       미 검찰, 보잉에 대한 법무부 형사 기소 권고

보잉에 대한 미국 법무부의 형사 기소 권고

  배경

     * 미국 검찰이 보잉에 대한 형사 기소를 법무부에 권고함.
     * 2018년과 2019년에 발생한 두 차례의 치명적인 737 MAX 추락 사고와 관련된 합의 위반 때문임.

  2021년 합의 내용

     * 보잉은 연방 항공국(FAA)을 속인 혐의로 기소되지 않는 조건으로 합의함.
     * 합의 조건: 보잉의 준법 감시 체계 개선 및 정기 보고서 제출.
     * 보잉은 25억 달러를 지불하여 조사를 마무리함.

  현재 상황

     * 법무부는 7월 7일까지 보잉을 기소할지 결정해야 함.
     * 보잉은 합의 조건을 준수했다고 주장하지만, 법무부는 이를 위반했다고 판단함.
     * 양측은 해결 방안을 논의 중이며, 기소 여부는 아직 결정되지 않음.

  기소 가능성

     * 형사 기소는 보잉의 위기를 심화시킬 수 있음.
     * 기소 대신 합의 연장이나 새로운 조건 제시 가능성도 있음.
     * 보잉은 벌금과 감시자 설치는 수용할 수 있지만, 유죄 인정은 사업에 큰 타격을 줄 수 있음.

  피해자 가족의 반응

     * 피해자 가족들은 2021년 합의를 비판하며, 보잉과 경영진에 대한 형사 기소를 요구함.
     * 최근 상원 청문회에서 보잉 CEO가 안전 문제에 대해 사과함.

GN⁺의 의견

     * 법적 리스크: 보잉이 유죄를 인정하면 정부 계약이 위험해질 수 있음.
     * 기업 이미지: 형사 기소는 보잉의 신뢰도와 브랜드 이미지에 부정적 영향을 줄 수 있음.
     * 산업 영향: 항공 산업 전반에 걸쳐 안전 규제와 준법 감시 강화 필요성을 시사함.
     * 대안 기술: 항공기 안전 시스템 개선을 위한 기술적 혁신과 투자 필요성 강조됨.
     * 피해자 보상: 피해자 가족들의 요구를 충족시키기 위한 추가적인 보상 방안 검토 필요성 있음.

        Hacker News 의견

     * 회사의 51%를 국유화하고 공무원들이 필요한 통제를 설정한 후 주식을 판매하는 방안 제안. 현재 주주들은 가치의 절반을 잃게 되고, 국가는 회사 정보를 통해 책임자들을 기소할 수 있음.
     * 보잉의 문제는 일회성이 아님. 최근 위조된 티타늄 사용, 내부고발자 보복, 결함 부품 은폐 등 여러 문제가 연속적으로 발생함.
     * 많은 사람들이 말만 하고 실제로는 아무것도 하지 않는 상황을 우려함. 보잉이 이미 여러 차례 처벌을 피한 전례가 있음.
     * 더 많은 세부 정보가 필요함. 보잉이 준수 관행을 충분히 개선하지 않았거나 정기 보고서를 제출하지 않았기 때문에 기소하려는 것 같음. 구체적인 실패 사례가 필요함.
     * 미국 정부가 이를 실행할 것이라는 신뢰가 부족함. 보잉 문제에 기여한 ""자체 인증"" 계획도 미국 정부의 방침임.
     * 보잉 로고가 있는 모든 항공기를 먼저 지상에 멈추고, 이후 법적 절차를 진행해야 한다는 의견.
     * 기업이 사람이라면 사형도 가능해야 한다는 주장.
     * ""인센티브를 보여주면 결과를 보여주겠다""는 말 인용. 보잉은 주주들에게 최대한의 가치를 전달하려고 함. 규칙을 지키지 않으려는 경향이 있음. 규제와 법 집행이 사라지면 규칙도 사라짐.
     * 보잉의 채권 등급이 쓰레기 수준에 가까워지고 있음. BB 등급으로 떨어지면 빠르게 많은 일이 발생할 수 있음.
     * 범죄적 과실세(CNT)를 지불해야 한다는 주장.
"
"https://news.hada.io/topic?id=15580","AI가 닷컴 버블과 다를까요? 투자자들은 아니라고 합니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    AI가 닷컴 버블과 다를까요? 투자자들은 아니라고 합니다.

   저는 줄곧 AI 붐에 대해 회의적인 입장이었습니다. 기존 기술에 AI라는 키워드만 더했을 뿐인데 가격이 배가 된다거나, 별로 대단치 않은 기술을 Hi-tech로 위장하는 현상을 종종 목격했기 때문입니다. 이번 토론토에서 열린 Collision 기술 행사에 참석한 벤처 캐피털리스트들도 유사한 의견을 제시했습니다.

   THE WALL STREET JOURNAL의 관련 기사를 요약했습니다.


AI 스타트업 투자의 부상과 그 위험성

     * 인공 지능(AI) 스타트업에 대한 투자는 최근 몇 년 동안 급증하고 있습니다.
     * 특히, ChatGPT 열풍 이후 기술 스타트업에 대한 투자가 한층 더 주목받고 있지만, 닷컴 시대의 거품과 비교되며 그 위험성에 대한 경고의 목소리도 높아지고 있습니다.
     * ChatGPT 열풍은 작년에 정점을 찍었다고 투자자들은 말합니다.

  AI 스타트업의 생존 가능성

     * Collision 컨퍼런스에 참가한 1,623개의 스타트업 중 20%만이 AI 제품을 개발 중이라고 보고되었습니다. (사업에 ""AI 구성 요소""를 가지고 있는 스타트업 미포함)
     * 이 중 소수만이 향후 몇 년간 생존할 것으로 예측되며, 투자자들은 장기적인 비즈니스 모델과 독창적인 기술을 가진 기업에 주목하고 있습니다.
     * 투자자들이 장기적인 생존 가능성이 있는 비즈니스 모델, 기업 비즈니스 문제를 해결하는 제품, AI 모델을 훈련하기 위해 개인 또는 고유 데이터 저장소에 액세스할 수 있는 스타트업을 찾는 경향이 증가하고 있습니다.
     * AI 스타트업이 직면한 가장 큰 과제는 많은 데이터를 확보하는 것이지만, 많은 스타트업이 이를 충분히 확보하지 못하고 있습니다.
     * OpenAI 규모로 대규모 언어 모델을 훈련하려면 컴퓨팅 및 AI 칩에 수백만 달러가 필요한데, 이는 새로운 스타트업이 경쟁력을 가질 수 있는 영역이 아닙니다.

  AI 스타트업에 대한 투자 현황

     * 1990년대 후반의 닷컴 붐은 모든 벤처 캐피털 회사가 그 분야에 투자해야 했기 때문에 ""엉망진창""이 되었고, 이는 고용 및 사무실 공간과 같은 비용의 인플레이션으로 이어졌습니다.
     * 최근 몇 년간 AI 분야에 대한 투자는 기록적인 수준에 도달했습니다. CB Insights에 따르면, 지난해 생성 AI 분야에 투자된 총액은 전년 대비 5배 증가한 218억 달러에 달했습니다. 라운드 규모는 5,100만 달러로 업계 평균인 800만 달러와 비교됩니다.
     * 예를 들어, Mistral AI는 최근 6억 달러의 평가 가치를 인정받고, 6억 5천만 달러를 모금했습니다. 또한, Amazon은 Anthropic에 27억 5천만 달러를 투자해 총 투자액을 40억 달러로 늘렸고, 이외에도 CoreWeave는 75억 달러의 사모채권 자금을 조달받았습니다.
     * 톰슨 로이터 벤처스의 파트너 조셉 도마니는 말했습니다. ""사람들이 '우리는 AI에 투자하고 있다'고 말하는 것은 소프트웨어에 투자한다는 말과 거의 비슷합니다. 그다지 큰 의미는 없어요. 중요한 것은 제품입니다.”

   Flyr의 창립자인 알렉스 맨스가 50개의 AI 스타트업을 만나보았는데 대부분이 기존 AI 모델과 동일한 기능을 하는 제품을 개발하고 있었다고 합니다. 그의 말을 인용하자면 ""수직적 서비스형 소프트웨어처럼 보이지만, 대규모 언어 모델 위에 예쁜 인터페이스를 얹은 것”뿐이라고 하네요.

   아마존 클라우드 부서의 AI 제품 담당 부사장인 매트 우드 역시 일부 AI 스타트업이 기술 속도에 뒤처졌다고 말했습니다. OpenAI의 GPT-4와 같은 AI 모델을 사용하는 건 큰 차별화를 제공하지 않는다고 말이죠.

   결국 근본적인 제품 우수성이 기반이 되지 않은 상태에서 산업의 붐으로 우후죽순 생긴 AI 스타트업이 문제가 될 날이 올지도 모르겠네요. 여러분의 생각은 어떠신가요? 댓글로 남겨주세요.

   출처 : Can AI Startups Outrun Dot-Com Bubble Comparisons? Investors Aren’t So Sure. - WSJ


  4분 만에 확인하는 성장 레퍼런스

   창업가를 포함한 프로덕트, 마케팅, 디자인 전 직군의 성장을 돕는 무료 뉴스레터를 받으세요!

   👉 지난 호 보고 뉴스레터 구독하기 👈
"
"https://news.hada.io/topic?id=15571","내가 배웠으면 좋았을 교훈들 (1996) [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      내가 배웠으면 좋았을 교훈들 (1996) [pdf]
"
"https://news.hada.io/topic?id=15585","AI가 정치를 한다면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AI가 정치를 한다면

   영국에 “스티브“라는 이름의 AI국회의원이 출마했고(뒤에는 인간이 있지만) 도쿄에서도 비슷한 사례가 있습니다.

   AI가 진짜로 정치를 한다면 법안 제출부터 자금 조달까지 가능할수도 있겠다는 생각이.. AI에 캐릭터를 입혀서 출마한다면 굿즈나 팝업스토어도 만들수 있지 않을까요ㅋㅋㅋ

   요즘 분위기 보면 사람보다 AI가 낫겠다는 생각도 일반인들 입장에선 충분히 할거같고요.
"
"https://news.hada.io/topic?id=15503","블로그/개인 웹사이트에서 좋아하는 마이크로 기능들 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      블로그/개인 웹사이트에서 좋아하는 마이크로 기능들

     * 블로그의 사용자 경험을 향상시키는 마이크로 기능들에 대한 소개

    사이드노트

     * 본문을 방해하지 않고 추가 정보를 제공하는 기능
     * 독자가 추가적인 세부 사항이나 출처를 쉽게 확인할 수 있게 해줌
     * Gwern의 사이드노트 사용이 특히 인상적임. 그의 글은 사이드노트를 매우 많이 사용하며, 주 내용의 흐름을 방해하지 않으면서 추가적인 정보를 제공함.
     * 사이드노트를 사용하면, 주석을 페이지 하단으로 스크롤하지 않고도 쉽게 참조할 수 있음.
     * Tufte CSS에서 영감을 받은 다양한 접근 방식을 볼 수 있음.

    목차

     * 목차는 글의 주요 주제를 한눈에 볼 수 있게 해주며, 원하는 부분으로 쉽게 이동할 수 있게 해줌.
     * 정적 사이트 생성기(예: Hugo)는 목차를 자동으로 생성할 수 있음.
     * Lars Hupel’s 사이트는 시리즈 내의 목차를 제공하여 탐색을 용이하게 함.

      보너스: 페이지 진행 상황 표시

     * 페이지 진행 상황 표시줄은 독자가 페이지 어디에 있는지를 시각적으로 보여줌.
     * Quanta Magazine에서 이러한 기능을 볼 수 있음.
     * CSS Tricks의 자습서를 통해 구현 방법을 배울 수 있음.

    쉽게 링크 가능한 헤딩

     * HTML 요소의 ID를 이용해 특정 페이지 섹션을 링크할 수 있음.
     * 사용자에게는 보이지 않으므로, 각 요소를 링크로 만들어 쉽게 참조할 수 있게 함.
     * Hugo 문서에서 이러한 기능을 볼 수 있음.

    시리즈 게시물 그룹화

     * 여러 주제에 대해 길게 쓰고 싶을 때 시리즈로 나눠 게시하면 독자에게 더 쉽게 전달할 수 있음.
     * 자동으로 ""다음"", ""이전"" 버튼을 추가하거나 네비게이션 허브를 생성할 수 있음.
     * Chapel 언어 블로그에서 이러한 기능을 볼 수 있음.

    대화형 글

     * 대화형식 글은 독자의 입장에서 질문을 던지고, 덜 경험 있는 관점에서의 우려를 표현함으로써 글을 더 재미있고 이해하기 쉽게 만듦.
     * Xe Iaso’s 사이트와 Faster than Lime에서 대화형 글을 자주 사용함.

    코드 블록의 출처 표시

     * 코드를 작성할 때 코드 블록에 파일명과 줄 번호를 표시하여 독자가 더 쉽게 이해할 수 있게 함.
     * 예: Crafting Interpreters

      보너스: 클릭 가능한 링크가 포함된 코드 블록

     * Agda 프로그래밍 언어는 HTML 코드 블록을 생성하여 각 기호를 정의된 곳으로 링크함.
     * Programming Languages Foundations in Agda에서 이러한 기능을 볼 수 있음.

    외부 링크 표시

     * 외부 도메인으로 가는 링크를 작은 아이콘으로 표시함.
     * James’ Coffee Blog ☕에서 이러한 기능을 볼 수 있음.

      보너스: 다른 목적지에 대한 다른 마커

     * Gwern’s 웹사이트는 링크의 목적지에 따라 아이콘을 변경함.
     * 예: Wikipedia 링크에는 ""W"", Haskell.org 링크에는 람다 기호가 표시됨.

      보너스: 링크 미리보기

     * 링크를 마우스 오버할 때 페이지 미리보기를 표시함으로써 클릭하기 전에 내용을 미리 볼 수 있게 함.
     * Gwern’s 웹사이트에서 이러한 기능을 볼 수 있음.

    RSS 피드

     * RSS는 사이트가 업데이트를 게시할 수 있게 해주는 피드 표준임.
     * 독자들이 사이트를 직접 방문하지 않고도 업데이트를 받아볼 수 있게 해줌.

    다른 사이트로의 링크

     * 다른 블로그나 사이트의 게시물 링크를 포함하여 관련 콘텐츠를 홍보함.
     * Drew DeVault’s 블로그에서 이러한 기능을 볼 수 있음.

    결론

     * 이러한 마이크로 기능들은 사이트를 더 유용하고 매력적으로 만들 수 있음
     * 자신의 사이트에 이러한 기능들을 통합하는 것이 좋은 아이디어라고 생각함

   마침 저만의 블로그를 만들고 있었는데 이런 유용한 뉴스라니 감사합니다 ㅎㅎ

        Hacker News 의견

     * 몇몇 제안들은 좋지만, 진행 바(progress bar)는 너무 산만하고 불필요함. 이미 스크롤 바가 있으므로 추가적인 스크롤 바는 필요하지 않음.
     * 링크 장식은 필요하지 않음. 브라우저가 이미 링크 위치를 잘 표시해주고 있음. 미리보기 팝업도 불필요한 방해 요소임.
     * 블로그에 모든 게시물의 단일 페이지 인덱스를 구현하는 것이 좋음. 제목을 한눈에 볼 수 있고, 검색도 용이함.
     * 블로깅 주제가 해커뉴스에 올라와서 기쁨. 자신이 개발 중인 블로깅 서비스는 미니멀리즘에 초점을 맞추고 있음. ASCII 아트가 안드로이드에서 제대로 표시되지 않는 문제를 해결하고 싶음.
     * 여러 ""마이크로 기능""이 마음에 듦. 자바스크립트를 요구하지 않는 기능을 선호함. 블로그에 다양한 마이크로 기능을 구현하고 있음.
     * 게시물에 전체 날짜를 포함하는 것을 선호함. 기술 콘텐츠의 경우 작성 시점을 아는 것이 중요함.
     * 다이얼로그 형식의 설명을 좋아하지 않음. 별도의 문단으로 설명하는 것이 더 나음.
     * 링크 미리보기 기능에 동의하지 않음. 프라이버시 문제로 인해 링크를 클릭하기 전에 URL을 확인하는 것을 선호함.
     * RSS는 '마이크로' 기능이 아니라 핵심 기능이어야 함.
     * Gwern의 웹사이트는 너무 많은 기능을 시도해서 브라우저가 느려짐. 특히 모바일에서 문제가 심각함.
     * 목차 기능은 웹 브라우저에서 구현되어야 함. 페이지 진행, 링크 가능한 제목, 링크 미리보기 등도 브라우저에서 처리해야 함. 문서 작성자는 폰트와 색상을 지정할 필요가 없음.
"
"https://news.hada.io/topic?id=15494","아판타시아: 마음속에 이미지를 그릴 수 없는 상태","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      아판타시아: 마음속에 이미지를 그릴 수 없는 상태

나는 마음속으로 이미지를 그릴 수 없음. 그것이 비정상이라는 것을 몰랐음

  마음속의 눈이 없는 삶

     * Aphantasia는 마음속으로 이미지를 그릴 수 없는 상태를 의미함.
     * 전체 인구의 약 3.9%가 이 상태를 가지고 있음.
     * Aphantasia는 시각적 이미지를 떠올릴 수 없는 상태로, 사람마다 정도가 다를 수 있음.

  Aphantasia의 발견

     * 필자는 우연히 자신의 Aphantasia를 발견했음.
     * ""빨간 사과 테스트""를 통해 자신이 아무런 이미지를 떠올릴 수 없음을 알게 됨.
     * 대부분의 사람들은 눈을 감고 사과를 떠올릴 수 있지만, 필자는 아무것도 보이지 않았음.

  Aphantasia의 역사

     * 19세기 후반, 과학자들은 사람마다 마음속으로 이미지를 그리는 능력이 다르다는 것을 발견함.
     * 2003년, Exeter 대학의 Adam Zeman이 Aphantasia에 대한 첫 사례 보고서를 발표함.
     * 이후 더 많은 사람들이 자신이 Aphantasia를 가지고 있음을 인식하게 됨.

  Aphantasia의 영향

     * Aphantasia는 사람들의 일상 생활에 큰 문제를 일으키지 않음.
     * 그러나 시각적 이미지를 사용하는 치료법이나 인지 행동 치료(CBT)에서는 어려움을 겪을 수 있음.
     * 필자는 시각적 이미지를 떠올릴 수 없지만, 감정이나 개념을 기억하는 데 강점을 가짐.

  다양한 Aphantasia의 사례

     * Aphantasia를 가진 사람들은 예술, 글쓰기, 애니메이션 등 다양한 분야에서 창의적인 작업을 수행할 수 있음.
     * 시각적 이미지를 떠올릴 수 없지만, 작업을 시작하고 수정하면서 결과물을 만들어냄.
     * 상상력은 시각적 이미지에 국한되지 않음.

  Aphantasia와 기억

     * Aphantasia를 가진 사람들은 사랑하는 사람의 얼굴을 시각적으로 기억하기 어려움.
     * 그러나 감정적이고 신체적인 기억을 통해 사람들과의 경험을 떠올릴 수 있음.
     * 각자의 기억 방식이 다르다는 것을 인식하게 됨.

GN⁺의 의견

     * 다양한 인지 방식: Aphantasia는 사람들이 세상을 인식하는 방식이 다양하다는 것을 보여줌. 이는 신경 다양성의 한 부분임.
     * 치료법의 한계: 시각적 이미지를 사용하는 치료법은 Aphantasia를 가진 사람들에게 효과적이지 않을 수 있음. 대체 치료법이 필요함.
     * 창의성의 다양성: Aphantasia를 가진 사람들도 높은 창의성을 발휘할 수 있음. 이는 상상력이 시각적 이미지에만 의존하지 않음을 의미함.
     * 기억의 방식: Aphantasia는 기억이 단순히 시각적 이미지에 의존하지 않음을 보여줌. 감정적이고 신체적인 기억도 중요함.
     * 사회적 인식: Aphantasia에 대한 인식이 높아지면서, 다양한 인지 방식을 이해하고 존중하는 사회적 분위기가 필요함.

        Hacker News 의견

     * 첫 번째 의견: 시각적 이미지를 떠올릴 때, 전체적인 모습보다는 세부적인 부분만 떠오르는 경험을 설명함. 이는 TV를 반쯤 보거나 운전 중 부분적으로 집중할 때와 비슷한 느낌임.
     * 두 번째 의견: 코로나로 인해 시각화 능력을 잃었고, 이로 인해 기억력이 나빠졌으며, 책을 읽을 때도 이전과 다른 경험을 하게 됨. 꿈도 이미지 없이 꾸게 되었음.
     * 세 번째 의견: 아판타시아에 대한 질문이 주관적이라 싫어함. 시각화는 가능하지만, 구체적인 이미지를 떠올리기 어렵고, 상상한 것을 수정하라는 요청이 들어오면 상상이 깨짐.
     * 네 번째 의견: 아판타시아와 관련된 SDAM(심각한 자서전적 기억 결핍)에 대해 언급하며, 이는 자신의 삶에 대한 사실은 기억하지만, 구체적인 에피소드를 떠올리지 못하는 상태임.
     * 다섯 번째 의견: 상상할 때 이미지 대신 텍스트나 간단한 기호로 표현됨. 요가 수업에서의 '마음 여행'은 무의미하며, 얼굴을 식별하는 데 어려움이 있음. 대신 소리나 음악을 생생하게 상상할 수 있음.
     * 여섯 번째 의견: 시각적 이미지를 떠올리지 못하며, '사과를 시각화하라'는 요청이 이해되지 않음. 대신 음악을 머릿속에서 재생하는 것은 가능함.
     * 일곱 번째 의견: 기술 분야 종사자들 사이에서 아판타시아가 평균보다 더 많이 보고됨. 이는 시각적 입력이 부족할 때 뇌의 시각 피질이 다른 용도로 재배치될 수 있다는 이론을 제시함.
     * 여덟 번째 의견: 아판타시아를 진단하는 객관적인 테스트가 부족함을 지적하며, 주관적인 질문 대신 능력을 객관적으로 평가하는 테스트가 필요함.
     * 아홉 번째 의견: 아판타시아와 같은 주제가 나올 때마다 많은 사람들이 자신이 해당된다고 주장함. '정상'이라는 개념과 그 외의 모든 것이 특별한 진단이 필요하다는 생각에 의문을 제기함.
     * 열 번째 의견: 아판타시아에 대해 읽을 때마다 사람들이 머릿속에서 실제로 이미지를 본다는 사실에 혼란스러움을 느낌. 자신도 비슷한 경험을 하고 있으며, 질문에 답변하려고 노력 중임.
"
"https://news.hada.io/topic?id=15556","Show GN: 위젯으로 주고받는 우리의 진짜 일상, 키핀","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: 위젯으로 주고받는 우리의 진짜 일상, 키핀

   안녕하세요:) 저희는 위젯 기반 소셜네트워크 앱 서비스를 만들고 있는 팀 키핀입니다.

   가깝고 소중한 친구에게만 내 일상을 공유하고 싶지 않으신가요?

   🎨
   전후면 동시 촬영으로 내 모습과 내가 있는 공간을 찍고, 상황에 맞는 태그와 감성 있는 필터로 나만의 키핀을 꾸며보세요.
   내 스타일대로 커스텀한 키핀을 위젯으로 편하게 주고받고, 감각적인 위젯으로 배경화면을 꾸밀 수도 있어요.

   🤗
   지금 이 순간을 찍고 친구에게 바로 공유해요.
   친구의 위젯에 키핀이 업데이트될 거예요.
   키핀으로 친구와 편하게 일상을 공유하고 추억으로 간직해 보세요.

   💜💛
   위젯으로 주고받는 우리의 진짜 일상, 키핀

   🎈 앱 다운로드 (iOS, 안드로이드)
   [iOS] : https://apps.apple.com/kr/app/keepin/id6502256947
   [Android] : https://play.google.com/store/apps/details?id=com.keepin.wekeepin
"
"https://news.hada.io/topic?id=15557","KT, 웹하드 사용자에게 악성코드 공격","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         KT, 웹하드 사용자에게 악성코드 공격

     * KT, 웹하드 사용자에게 악성코드 배포 — 60만 명 이상의 고객이 파일 손실, 이상한 폴더, 비활성화된 PC 보고
          + 외신엔 토렌트라고 나왔지만, 국내에서 많이 사용하는 ""웹하드"" 서비스입니다.

  사건 개요

     * KT Corporation이 웹하드 서비스를 사용하는 고객 60만 명 이상에게 악성코드를 배포한 사실이 JTBC의 심층 조사로 밝혀짐.
     * 2020년 5월, 웹하드 서비스 제공업체가 사용자 불만을 접수하면서 문제 시작
     * 웹하드의 Grid Program이 해킹 공격을 받았다는 의심 제기됨.

  조사 결과

     * 웹하드 업체는 문제를 겪는 모든 사용자가 KT를 인터넷 서비스 제공업체로 사용하고 있음을 발견
     * 악성코드는 사용자 PC에 이상한 폴더를 생성하거나 파일을 보이지 않게 하고, 웹하드 프로그램 자체를 비활성화함
     * 일부 경우에는 PC 자체가 비활성화됨.

  법적 대응

     * 경찰은 KT의 데이터 센터에서 악성코드가 유포된 것을 발견하고, KT 직원 및 하청업체 13명을 기소함
     * KT는 웹하드의 Grid Service가 악성 프로그램이어서 통제할 수밖에 없었다고 주장함.
     * 법원은 웹하드가 KT의 네트워크 사용료를 지불하지 않았고, Grid Service의 작동 방식을 사용자에게 명확히 설명하지 않았다고 판결함

  고객 피해

     * KT는 IP 주소를 차단하는 대신 악성코드를 배포함.
     * 대부분의 피해자는 개인 사용자로, 파일 손실과 PC 손상 등의 문제를 겪음.

GN⁺의 의견

     * 법적 문제: 통신사가 사용자 동의 없이 악성코드를 배포한 것은 심각한 법적 문제를 야기할 수 있음.
     * 신뢰도 하락: 이런 사건은 통신사에 대한 신뢰도를 크게 떨어뜨릴 수 있음.
     * 대체 서비스: 사용자들은 KT 대신 다른 인터넷 서비스 제공업체를 고려할 가능성이 높음.
     * 보안 문제: 악성코드 배포는 사용자 보안에 큰 위협이 되며, 이에 대한 철저한 조사가 필요함.
     * 기술적 대응: 네트워크 혼잡 문제를 해결하기 위해 악성코드 배포 대신 다른 기술적 해결책을 모색해야 함.

   KT 악성코드 해킹 사건 이대로 그냥 묻히는 걸까요
   반헌법적인, 사회의 근간을 파괴하는 심각한 행위인데 이대로 묻혀서는 안 된다고 생각합니다.

   kt 프로젝트 꼭 한번 해보시길 추천합니다

   아니 근데 사용료 지불얘기는 뭐임??? 이해가 안되네.. 그리드라도 개별 프로그램 아닌가염 그걸 빌미로 수작질을 한건가요 ㄷㄷ 너무 괘씸하네 일게 직원들이

   명색이 한국 3대 ISP 중 하나가 직접(!!) 중간자 공격(!!!)으로 고객의 컴퓨터에 직접 만든(!!!!) 악성 코드를 설치를 시도(!!!!!)하고 실제로 성공(!!!!!!)했다는 점에 정말 경악을 금치 못하겠네요.
   이 공격이 '토렌트 유저들만'을 대상으로 '딱 한 번만' 일어난 일이 맞을까요? 공격의 고도성을 생각해 보면 발견되지 않은 사례와 시도들은 훨씬 더 많을 것이라는 의심이 계속해서 드네요. 그나마 수많은 사람들의 컴퓨터에 '심각한 문제'를 경험한 후에야 밝혀진 사실인데, 이미 여러 번 다른 알아차리기 어렵거나 불가능한 결과를 가져오거나, 소수를 대상으로 일어난 공격이 없을 것이라고 장담하기 어려울 것 같습니다.
   그냥 '나라 망신'이라던가 '처벌이 힘들 것'이라던가 하는 스케일의 사건이 아니고, 우리 자신들에 대한 일이니 더 심각하게 받아들여야 한다고 생각합니다.

   와우. 어느정도의 처벌이 있을지 어떤 결과로 이어질지 기대됩니다.

   아니 이게 웃긴게 KT 망매출이 1/10로 준다는데.
   그게 문제가 없다고 말하는 웹하드 업체가 더 웃김.

   재판 다 지고나서도 포기 못하고
   악성코드로 프레임화 하는 것도 웃김.

   그럼 여러대 등록하면 회선 추가로 열기전엔
   인터넷 못쓰는 그것도 악성코드겠네.
   이 망에서 그 프로그램 못쓴다고 친절하게 안내했드만
   어이가 1도 없음

   일단 개인 사용자 얘기를 하자면
   계약 자체가 빌린 집을 다시 빌려줄 수 없듯
   망 사용으로 수익화를 해서는 안된다고 되어 있음.

   즉 포인트 지급받는 웹하드업체를 사용하고 있다면
   전부 영업방해중인거임. 즉 고소각이다.

   따라서 그를 막기위해 KT가 서버단에 만든
   서버 프로그램의 작동이 문제가 될리 없음.

   그리고 개인 PC 서버화가
   개인 PC만 망가뜨리는게 아니라.
   망 일부만 사용해도 문제가 된다.
   그래서 컴퓨터 좀 안다는 사람이 메인PC로
   웹하드 쓰는 꼴을 본 적이 없다.
   포인트 모을겸 손상되도 상관없는
   서브PC로 공장 돌린사람들 반성해라. 진짜,

   더 코미디인건 그런 사람들 중
   그리드 시스템 기반의 게임은 PC방가서 하는거지.
   라는 논리를 가진 사람도 있다.
   (게임은 해야하지만 내PC는 소중하니까)

   따라서 파일전송 차단당한 사람이 피해자가 아니고
   진짜 피해자는 그런거 안쓰는 소비자다

   망유지보수에 쓰이는 비용을 내가 왜 N빵 해야됨?

   그리고 애초부터 웹하드업체에서 망사용료안내려고
   발악하는 파렴치한 형태를 옹호해는 이 상황이
   그저 어이없음

   의사파업하고 똑같이 아사리판이 보고싶은 가봄

   Ps 그리고 JTBC보도 다시 들어봐라.
   아니면 발뺄려고 전부 주장, 추정 이런말로
   되어 있다.

   엥 맥락 못잡는 댓글이 더 웃기네요 ㅋㅋ
    1. 수돗물을 공급하기 시작했습니다.
    2. 수돗물이 깨끗하다는 것을 알고 수돗물에 음료수를 팔아 돈을 벌기 시작한 사람이 늘어납니다.
    3. 수돗물을 공급한 업체는 맘에 안들어 독극물을 풀기 시작합니다.

     * 참고

     * 수돗물 공급업체는 2티어 공급업체인데 매년 전세계 1티어 공급업체들로부터 ""니들도 우물을 파""라고 압박받습니다. 하지만 파지않습니다. 돈이 안되거든요.
     * 수돗물 공급업체는 수돗물로 농사짓는 업체에게 ""니들은 왜 수돗물을 통해 이득을 보냐""며 수돗물세를 수돗물량 + 맘에 안드는 만큼 매기는 세금을 포함하여 임의로 걷습니다.
     * 하지만 특정 외국산 농사업체에게 부과하지않습니다. 왜냐하면 그업체는 1티어 수돗물 공급업체거든요

   적절한 설명 짝짝짝

   이분법적으로 어떤 쪽의 편을 들 사안이 아니라고 생각합니다. 말씀하신대로 웹하드 업체의 계약 위반은 명백합니다만 수단과 목적은 서로 정당화 되어서는 안된다고 생각합니다

   사용자의 PC에 고지 없이 프로그램을 설치하여 차단한게....
   정상적인 대응으로 보이지는 않습니다.

   KT가 그리드 방식의 웹하드를 막아야 했다는 것 자체야 이해가 되지만 그걸 사용자의 PC에 프로그램을 깔아서 막았다는 방식 자체가 문제 같습니다.
   특히 사용자에게 고지되지 않고 깔았다는 데서 더 큰 문제죠.
   즉, 웹하드 업체가 그리드 방식인 걸 제대로 고지 하지 않아서 문제였다면 KT는 그런 그리드를 막는 프로그램을 사용자에게 제대로 고지 하지 않고 깔았기 때문에 더 큰 문제라고 생각합니다.
   KT가 그 웹하드 서비스가 문제였다고 생각한다면 그걸 소송을 걸던 IP를 차단 하던 뭘 하든 해서 공개적으로 막았어야 하지 않을까요?

   어자피 묻히고, 어자피 아무런 처벌도 없을 거고...
   이유를 묻고 싶지만 답변 못하겠습니다. 하는 순간 정치 얘기를 안할 수가 없거든요.
   여러분, 대한민국 IT는 원래 이런 겁니다. 여러분은 유토피아 개발자일지 모르겠지만...
   그건 여러분의 소수 축복받은 개발자들이라 그런 겁니다. 정말 소수에요.
   절반 이상의 개발자들은 SI SM에 찌들고, 야근 철야 주말근무에 지치고, 베트남 개발자만도 못한 취급을 받는 개발자도 있습니다.

   말도 안된다고요? 대한민국에서 괜히 '사'짜 직업만 잘되는 이유를 알아보시길.

   와우 KT 가 직접 악성코드 배포를

   토렌트는 아니고 웹하드긴한데 기술적으론 비슷한 거니...
   외신에도 떴군요. 나라망신이네요.

   정말 창피합니다.

        Hacker News 의견

     * 한국 인터넷 서비스 제공업체(ISP)가 고객들이 서버에 연결하려고 할 때 엄청난 요금을 부과하려고 함. 이에 회사는 피어 투 피어(P2P) 방식을 사용하기로 결정하자 ISP가 고객 컴퓨터에 스파이웨어를 설치함. ""좋은 한국 인터넷""이라는 신화가 어디서 왔는지 궁금함.
     * 경찰이 KT의 데이터 센터에서 정보를 발견하고, KT 직원과 하청업체를 포함한 13명을 악성코드 공격과 관련해 기소함. 미국에서는 경찰이 이런 사건에 관심을 두지 않을 것이라고 생각함.
     * 한국의 정보 기술(IT)은 하드웨어 관련 기술과 구별되며, 매우 나쁨. 국내 기업들이 글로벌 기업들에 비해 기술력이 떨어지며, 문화적 요인도 문제임. KT는 국가 자산으로 간주되며, 악성코드 감염 사건은 국가적 차원의 문제임.
     * 한국의 IT/인터넷 기술이 최고라고 믿는 국민들이 많음. 이러한 집단 의식이 한국의 기술 발전을 저해하고, 법과 합의를 무시하는 경향을 초래할 수 있음. 이는 심각한 기술-문화적 문제임.
     * 한국의 한 대형 은행이 아마존을 금융 사기 업체로 블랙리스트에 올림. 이는 기술적 문제가 아닌 문화적 문제임.
     * KT가 민영화되기 전까지 한국의 인터넷은 세계 최고 수준이었음. 민영화 이후 ISP들이 이익 추구에만 집중하면서 네트워크 인프라 개선이 이루어지지 않음.
     * 악성코드가 사용자에게 어떻게 전달되었는지 설명되지 않음. MITM(중간자 공격)이나 트래픽 취약점을 이용했을 가능성 있음.
     * 제목이 클릭을 유도하는 방식임. 사용자가 특정 소프트웨어를 사용하면서 BitTorrent 프로토콜을 이용한 것임.
     * 한국의 네트워크 사용 법적 상황은 매우 불합리함. 네트워크 운영자들이 양쪽 끝에서 요금을 부과할 수 있는 권한을 가짐. 대기업들이 모든 것을 소유하고 정부는 그들의 이익을 중재하는 역할을 함.
     * ISP와 정부가 MITM(중간자 공격)을 수행함. 한국 헌법에도 불법이라고 명시되어 있지만, 이를 무시함. SNI 필드를 스캔하고 패킷을 조작하여 사용자가 특정 사이트에 접근하지 못하게 함.
     * 관련된 임원들의 자산을 청산하고 회사 자산을 매각하면 다시는 이런 일이 발생하지 않을 것임.

   한국인의 집단의식이 IT발전을 저해한다는 글이 매우 거슬리네요....;;

   배타성이라고 하면 덜 거슬리실까요? 실제로 정부 규제나 통신사가 하는 일이 그렇습니다. 트위치 쫓아낸거 보셨잖아요

   전체 국민으로 싸잡혀서 우리 입장에서는 기분 나쁘지만, 외국인 입장에선 우리나라 정부와 공권력의 권한이 필요 이상으로 커 보이겠죠. 원본 댓글에도 정부의 선전에 의한 결과라고 명시하고 있습니다. 문화의 차이라고 생각합니다

   근데 문제는 틀린말이 아니죠. 집단의식 때문에 내부고발에 대한 정의실현은 완전히 불가능한 얘기잖아요. 어자피 지금 이 사건도 묻힙니다. 집단의식 때문에.
   저기서 말하는 집단의식을 우리말로 풀이하면 '조직문화'죠.
"
"https://news.hada.io/topic?id=15591","Corcel - PHP / Laravel 웹앱에서 Wordpress를 백엔드로 사용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Corcel - PHP / Laravel 웹앱에서 Wordpress를 백엔드로 사용하기

     * Laravel의 Eloquent ORM 기반으로 WordPress 데이터베이스에서 직접 데이터를 쉽게 가져올 수 있도록 해주는 PHP 클래스 모음
     * WordPress를 백엔드 관리자 패널이나 CMS로 사용하고, 다른 PHP 앱에서 그 데이터를 모델 계층으로 쿼리할 수 있게 해줌
     * Laravel에서 Corcel을 사용하는 것이 가장 쉽지만, Composer를 사용하는 모든 PHP 프로젝트에서 사용 가능
     * config/corcel.php 설정 파일에서 WordPress 데이터베이스 연결 및 사용자 정의 포스트 타입, 쇼트코드 등록을 쉽게 할 수 있음

사용법 예제

     * Post::published()->get()로 발행된 모든 포스트 조회 가능, Post::find(31)로 특정 포스트 조회
          + 사용자 정의 Post 모델 클래스를 생성해서 connection 이름 등을 재정의할 수 있음
     * $post->meta->link로 커스텀 메타 값 조회
          + saveMeta(), createMeta() 메서드로 메타 데이터 생성 및 업데이트
          + hasMeta(), hasMetaLike() 스코프로 메타 필드 기준 포스트 검색 가능
     * newest(), oldest() 스코프로 Post와 User의 정렬 가능
     * Post::type('video')처럼 type() 메서드나 사용자 정의 클래스로 Custom Post Type 다룰 수 있음
     * config/corcel.php에 쇼트코드와 처리 클래스 매핑 가능
          + Post::addShortcode() 메서드로 쇼트코드 추가
          + 쇼트코드 파싱은 thunderer/shortcode 라이브러리 사용
     * $post->taxonomies()로 특정 포스트의 텍소노미 조회
          + Post::taxonomy()로 텍소노미로 포스트 검색
     * $page->attachment로 페이지/포스트의 첨부파일 조회
     * $post->thumbnail로 포스트/페이지 썸네일 조회
     * Option::get('siteurl')로 옵션값 조회
     * Menu::slug('primary')->first()로 특정 메뉴 조회
          + $menu->items로 메뉴 아이템 컬렉션 접근
          + $item->instance()로 원본 인스턴스(Page, Post, CustomLink, Term) 조회
          + $item->parent()로 부모 인스턴스 조회
     * User::find(1)처럼 포스트와 유사하게 사용자 조작 가능

   WP REST API, WPGraphQL 및 Yii 프레임워크의 WordPress 브릿지인 yii2-wordpress 도 비슷하게 사용 가능합니다.
"
"https://news.hada.io/topic?id=15538","백만 개의 체크박스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               백만 개의 체크박스

One Million Checkboxes 웹사이트 소개

     * 웹사이트 이름: One Million Checkboxes
     * 주요 기능: 944,216개의 체크박스 중 하나를 체크하면 모든 사용자에게 반영됨
     * 현재 상태: 0개의 체크박스를 체크함

GN⁺의 의견

     * 흥미 요소: 이 웹사이트는 단순한 기능을 통해 사용자 간의 상호작용을 유도함. 체크박스를 체크하는 간단한 행동이 모든 사용자에게 반영되므로, 공동체의 일원으로서의 경험을 제공함.
     * 기술적 고려 사항: 실시간 데이터 동기화와 관련된 기술이 필요함. 이를 위해 웹소켓(WebSocket)이나 서버-클라이언트 간의 실시간 통신 기술이 사용될 가능성이 높음.
     * 유사 프로젝트: 비슷한 개념의 프로젝트로는 Reddit의 ""The Button""이 있음. 이 프로젝트도 사용자 간의 상호작용을 통해 공동체의 경험을 제공함.
     * 도입 시 고려 사항: 이와 같은 프로젝트를 도입할 때는 서버 부하 관리와 실시간 데이터 동기화 문제를 해결해야 함. 또한, 사용자 경험을 극대화하기 위해 직관적이고 간단한 UI/UX 디자인이 필요함.
     * 흥미로운 점: 단순한 아이디어로도 사용자 간의 강력한 상호작용을 유도할 수 있다는 점에서 창의적인 접근이 돋보임.

        Hacker News 의견

     * 개발자임. 예상보다 인기가 많아서 서버에 문제가 생길 것 같음.
     * 처음에는 상단의 체크박스를 클릭했지만 사람들이 계속 체크를 해제함. 모두가 협력해서 체크하면 좋겠음.
     * 창 아래쪽에서는 사람들이 덜 싸울 거라고 생각했음. 한동안 혼자였고, 지루하고 의미 없는 일이었지만 평화로웠음.
     * 다른 사람을 만나서 함께 체크박스를 체크했지만, 5초 만에 사라짐. 계속 스크롤하며 체크박스를 체크했음. 다시 위로 스크롤했을 때, 체크가 해제된 박스들이 생겨났음. 아무도 체크를 해제하는 것을 보지 못했음.
     * 체크박스를 해제하는 유령이 있는 것 같음.
     * ""누구나 체크할 수 있는 백만 개의 체크박스""라는 아이디어는 지난 금요일 대화 중에 나왔고, 만들어야겠다고 느꼈음. 최고의 이유임.
     * Tampermonkey 스크립트를 사용하여 모든 체크되지 않은 체크박스를 체크하는 방법을 공유함.
     * 스크립트를 실행하면 페이지의 모든 체크박스를 체크할 수 있음.
     * 시도해봤는데 ""CHILL LOL""이라는 경고 메시지가 나옴. 재미있는 사이트임.
     * 좋아하는 인용문들: ""버블랩 MMO처럼 매우 만족스러움"", ""글로벌 피젯 토이"", ""이건 천재적임! 웹소켓 서버가 바쁘게 돌아가고 있을 것 같음.""
     * 모든 체크박스를 체크해야 함. 체크를 해제하는 사람들에게 다시 생각해보고 체크된 쪽으로 와달라고 요청함.
     * 체크박스 그리드는 특정 너비로 고정되어야 한다고 생각함. 사람들이 그림을 그리려고 하지만 내 화면에서는 왜곡되어 보임.
     * ""너희 미친놈들! 다 망쳐버렸어! 젠장해!""라는 감정 표현.
     * 모든 체크박스를 해제하는 것은 감사받지 못하는 일임.
"
"https://news.hada.io/topic?id=15481","시니어 채용할 때 고려해야 되는 4가지 - 신뢰, 문화, 단순함, 피드백","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                시니어 채용할 때 고려해야 되는 4가지 - 신뢰, 문화, 단순함, 피드백

    1. 좋은 시니어는 성과를 내기전 주변 팀원들의 신뢰를 얻기 위해 먼저 신경 씁니다.
    2. 좋은 시니어는 문화를 강화시키는데 곱하기 역할을 합니다.
    3. 좋은 시니어는 문제 해결방식과 소통 방식이 단순합니다.
    4. 좋은 시니어는 피드백을 주고 받는 것에 능숙합니다.
"
"https://news.hada.io/topic?id=15511","QUIC을 이용하여 Datagram 없이 Timeliness(적시성) 구현하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUIC을 이용하여 Datagram 없이 Timeliness(적시성) 구현하기

절대 데이터그램을 사용하지 마세요.

  TCP vs UDP

     * 인터넷 애플리케이션을 개발할 때 TCP와 UDP 중 하나를 선택해야 함.
     * TCP: 신뢰성 있는 데이터 전송을 보장함.
     * UDP: 신뢰성 없는 데이터 전송을 제공함.
     * 신뢰성 없는 전송이 필요한 경우는 거의 없음.

  속성

     * 소프트웨어 엔지니어링은 여러 계층의 추상화 위에 서 있음.
     * 각 계층은 특정 속성을 제공하여 개발자가 모든 것을 처음부터 다시 만들 필요가 없게 함.
     * 개발자는 어떤 계층을 사용할지 선택해야 함.

  ""신뢰성 없는""

     * 실시간 비디오 프로토콜을 설계하는 모임에서 SUBSCRIBE가 신뢰성 없도록 해야 한다는 의견이 있었음.
     * 실제로 필요한 것은 적시성임.
     * 실시간 비디오에서는 최신 데이터를 우선적으로 전달하는 것이 중요함.

  데이터그램

     * 데이터그램(IP 패킷)은 출발지 주소에서 목적지 주소로 전송되는 데이터의 단위임.
     * 데이터그램은 손실되거나 순서가 뒤바뀔 수 있음.
     * 데이터그램을 사용하는 이유는 네트워크 혼잡 시 패킷을 드롭하는 것이 더 나은 선택이기 때문임.

  인터넷의 큐

     * 네트워크가 혼잡할 때 패킷을 드롭하는 것이 일반적임.
     * 패킷을 큐에 넣고 나중에 전달하는 것은 버퍼블로트 문제를 일으킬 수 있음.
     * 버퍼블로트는 모든 패킷이 큐에 쌓여 적시성을 해침.

  당신, 애플리케이션 개발자

     * UDP를 직접 사용하면 여러 문제에 직면할 수 있음.
     * UDP 위에 자체 전송 프로토콜을 구축하려면 재전송, 혼잡 제어 등을 구현해야 함.
     * QUIC 라이브러리를 사용하는 것이 더 나은 선택임.

  적시성

     * 적시성을 달성하기 위해 QUIC를 사용할 수 있음.
         1. 버퍼를 비우기: 혼잡 제어를 통해 큐를 감지하고 전송 속도를 줄임.
         2. 데이터를 스트림으로 분할: 각 스트림은 독립적으로 전송됨.
         3. 스트림 우선순위 지정: 중요한 스트림을 우선적으로 전달함.

  데이터그램 방어

     * QUIC와 MoQ는 데이터그램을 지원함.
     * 데이터그램 지원은 실험을 허용하기 위해 중요함.
     * 그러나 데이터그램 사용은 함정일 수 있음.

  결론

     * 데이터그램 위에 애플리케이션을 설계하지 말아야 함.
     * UDP 위에 또 다른 비디오 프로토콜을 만들지 말고, Media over QUIC에 참여하는 것이 좋음.

GN⁺의 의견

    1. 적시성의 중요성: 실시간 애플리케이션에서는 데이터의 적시성이 매우 중요함. TCP보다 UDP가 적합할 수 있지만, 혼잡 제어와 같은 추가적인 고려가 필요함.
    2. QUIC의 장점: QUIC는 UDP의 단점을 보완하면서도 높은 성능을 제공함. 특히 실시간 비디오 스트리밍에 적합함.
    3. 버퍼블로트 문제: 네트워크 혼잡 시 패킷을 큐에 쌓는 것은 적시성을 해칠 수 있음. 이를 피하기 위해 혼잡 제어가 필요함.
    4. 데이터그램의 한계: 데이터그램은 실시간 전송에 적합하지만, 신뢰성과 순서 보장이 필요할 때는 QUIC와 같은 프로토콜이 더 나은 선택임.
    5. 기술 선택의 중요성: 애플리케이션의 요구사항에 맞는 적절한 전송 프로토콜을 선택하는 것이 중요함. 잘못된 선택은 성능 저하와 사용자 경험 악화를 초래할 수 있음.

        Hacker News 의견

     * TCP의 문제점: TCP는 고대역폭, 저지연이 필요한 환경에서 문제가 많음. 저대역폭, 고지연 네트워크에서도 비효율적임.
     * UDP 사용 사례: 고주파 센서 데이터 스트리밍에 UDP를 사용 중이며, QUIC을 통해 문제를 해결한 사례도 있음.
     * UDP의 용어: UDP를 ""신뢰할 수 없는"" 대신 ""최선의 노력""으로 설명하는 것이 더 적절함.
     * 스트림 추상화의 문제: 스트림 추상화는 프로그램을 취약하게 만들고, 연결 해제 시 복구가 느림. 데이터그램 기반 접근이 더 효율적일 수 있음.
     * UDP 패킷 드롭: 네트워크 혼잡 시 UDP 패킷이 먼저 드롭됨. QUIC의 재전송 문제를 언급함.
     * 클릭베이트 제목: 기사 제목을 원문에서 가져와야 한다는 해커뉴스의 가이드라인을 지키려는 시도.
     * TCP와 UDP의 차이: TCP는 신뢰성을, UDP는 속도와 효율성을 제공함. 각 프로토콜의 특성을 이해하고 사용해야 함.
     * 데이터그램 기반 사용 사례: 로컬 디스커버리, 브로드캐스트, 패키지 캡슐화 등에서 데이터그램 사용이 적합함.
     * 데이터그램 사용 권장: 세션 기반 연결이 일반적이지만, 데이터그램 사용도 유용함. 네트워킹의 저수준 측면을 배울 수 있는 좋은 기회임.
"
"https://news.hada.io/topic?id=15590","HN 질문: 당신이 작업한 최고의 코드 베이스는 무엇입니까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN 질문: 당신이 작업한 최고의 코드 베이스는 무엇입니까?

     * 무엇이 그것을 그렇게 좋게 만들었음?
          + 좋은 관행을 강제하는 사람이 있었음?
          + 훌륭한 엔지니어 그룹에 속해 있었음?
          + 아니면 다른 무언가?

GN⁺의 의견

     * 이 기사는 소프트웨어 개발 환경에서 좋은 관행이 어떻게 유지되는지에 대한 흥미로운 질문을 제기함
     * 좋은 관행을 강제하는 것과 자율적인 환경에서의 차이를 이해하는 데 도움이 될 수 있음
     * 다른 유사한 기능을 가진 프로젝트로는 Google의 Code Review 시스템이나 GitHub의 Pull Request 시스템이 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 팀의 문화와 기존 프로세스에 어떻게 통합될 수 있을지 고려해야 함
     * 좋은 관행을 유지하는 것은 팀의 생산성과 코드 품질을 높이는 데 중요한 요소임

        Hacker News 의견

     * Google의 모노레포는 도구 측면에서 매우 우수함
          + 전체 코드베이스의 스냅샷을 몇 초 만에 생성할 수 있음
          + 빌드는 완벽하게 재현 가능하며 빌드 클러스터에서 수행됨
          + 빌드 구성 언어가 매우 간단하고 간결함
          + 코드 검색이 즉시 가능함
          + 파일 히스토리가 즉시 로드됨
          + 라인별 블레임이 몇 초 만에 로드됨
          + 거의 모든 파일에서 즉시 심볼 조회가 가능함
          + 일관된 스타일이 공유 문화, 자동 린터, 사전 제출을 통해 강제됨
          + 파일/버전/라인으로 딥링크하는 단축키가 있어 코드 공유가 쉬움
          + 많은 사전 제출 체크가 코드/테스트 품질을 보장함
          + 코드 리뷰와 코드 변경 시 테스트 페어링이 필수임
     * AOL의 서버 코드는 매우 우수했음
          + Unix 프로그래밍과 이벤트 루프 사용에 대한 깊은 이해를 가진 사람들이 작성함
          + C 언어로 작성되었으며, 몇 달 동안 크래시 없이 실행될 것으로 기대됨
          + 비정상 종료 시 소유자에게 이메일로 코어 백트레이스를 보냄
          + 메모리 누수가 발생하면 운영팀이 즉시 대응함
          + 모든 것이 재시작 없이 실행 중인 서버에 다시 로드될 수 있었음
          + TCP 제어 포트와 TCL 인터프리터를 사용하여 서버를 관리함
          + ""No Threads Kernel""로 수십 대에서 수백 대의 물리적 머신에 확장됨
          + 200명의 Unix 개발자들이 공통된 이해를 가지고 있었음
          + 기술 작가들이 개발자와 인터뷰하여 외부 개발자에게 전달할 수 있는 책을 작성함
          + 디스크에 쓰지 않고 네트워크 메시지를 주고받는 원칙을 따랐음
     * 이전 직장의 코드베이스는 매우 우수했음
          + 엔지니어들이 뛰어난 기술을 가지고 있었고, 에고가 없었음
          + 4명의 시니어와 3명의 프린시펄 엔지니어가 팀을 구성함
          + 새로운 요구사항이 생길 때마다 문명화된 방식으로 논의함
          + 주니어 멤버들도 쉽게 기존 코드를 따라갈 수 있었음
     * Postgres 코드베이스는 매우 잘 조직되어 있음
          + 메모리 안전성을 걱정하지 않아도 됨
          + 매크로를 신중하게 사용하여 인간을 존중함
          + Postgres 코드베이스는 개발의 금표준으로 여겨짐
          + pgrx 팀에게 감사의 인사를 전함
     * 대규모 Python 서비스의 통합 테스트 프레임워크가 매우 우수했음
          + 기존 통합 테스트 프레임워크 위에 구축됨
          + 테스트 구성 요소에 명확한 의미를 정의함
          + 테스트 구성 요소를 초기 세트로 구축함
          + 코드 리뷰를 통해 새로운 구성 요소가 의미를 따르도록 보장함
          + 장기적으로는 잘 작동하지 않았음
     * Google3 코드베이스는 매우 방대하고 잘 작동함
          + 변경할 때마다 종속성을 다시 실행함
          + 커밋은 효율적인 불변 스냅샷임
          + GitHub보다 훨씬 뛰어남
     * 내가 직접 작성한 코드베이스가 가장 우수했음
     * Cocotron 코드베이스는 매우 인상적이었음
          + Mac Cocoa 앱을 Windows로 포팅하는 방법을 찾고 있었음
          + 단 한 사람이 모든 필수 API를 구현함
          + 복잡한 커스텀 GUI 앱에 성공적으로 사용됨
          + 집중이 중요함
     * Facebook의 코드베이스는 지속적인 코드 업그레이드가 가능함
          + 언어 디자인과 도구에 많은 노력을 기울임
          + 기존 코드를 지속적으로 업그레이드함
          + 다른 회사의 코드베이스는 주요 재작성 후 전환이 어려웠음
     * CouchDB의 HTTP API는 한 파일에 모두 포함되어 있었음
          + 데이터베이스와 웹 프로그래밍을 배우기에 좋은 출발점이었음
          + 나중에 팀에 의해 리팩토링됨
          + 영감에서 실제 사용으로 전환되는 과정을 보는 것이 흥미로웠음
"
"https://news.hada.io/topic?id=15497","지금이 서비스 비즈니스를 시작하기 좋은 시기입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      지금이 서비스 비즈니스를 시작하기 좋은 시기입니다

     * ""서비스 비즈니스""는 회사가 제품을 판매하는 대신 작업 결과물을 직접 판매하는 것
          + 서비스의 반대는 회사가 제품을 개발하여 고객에게 판매하는 ""제품 비즈니스""

서비스 사업을 시작하면 안되는 이유

     * 엔지니어가 가치 있는 회사를 만들고 싶다면 서비스 사업을 피해야 한다는 것이 일반적인 통념
     * 대형 브랜드 기술 회사는 모두 제품 회사임. 최근 실리콘 밸리의 성공 사례도 제품 회사
     * 세계 최대 기업 순위에서 서비스 회사는 71위(Accenture)에 가야 나옴
     * 제품 회사는 규모의 경제를 통해 좋은 이익률을 달성할 수 있음. 소프트웨어 제품은 특히 낮은 한계 비용 덕분에 아름다운 이익률을 가짐
     * 기술자가 회사를 시작할 때 소프트웨어 제품 회사를 시작하라는 것이 일반적인 접근 방법임:
         1. 사용자와 대화하여 만들 제품을 파악
         2. 제품을 개발
         3. 제품을 고객에게 판매
         4. 가능한 한 1-3단계를 동시에 수행하여 위험을 줄이고 피드백을 최대화함.
     * 대부분의 제품은 쓸모없기 때문에 거의 고객이 구매하지 않음. 성공적인 소프트웨어 회사조차도 제품-시장 적합성을 찾는 데 몇 년이 걸림
     * 소프트웨어 제품 회사는 더 이상 최고의 시기가 아님. 가장 크게 달라진 것은 경쟁의 양임
          + 2010년엔 어떤 Narrow한 버티컬에서도 SaaS를 시작해서 성공적인 회사를 만들 수 있었음
          + 요즘엔 좁은 버티컬에도 여러 경쟁자가 존재하기 때문에 이런 접근 방식은 더 이상 통하지 않음

복합 스타트업을 시작해야 할 수도 있음 - ( Compound Startup의 등장 참고 )

     * 포화된 단일 수직 시장의 해결책은 여러 보완 제품을 병렬로 구축하는 ""복합 스타트업""임
     * Parker Conrad의 Rippling이 그 예임. 그러나 복합 스타트업은 비용이 많이 들고 운영이 어려움
     * Rippling의 첫 2년은 와 40명의 엔지니어가 대부분 사전 출시 단계에서 일했음. 이는 간소한 운영이 아님

하지만 서비스 사업에 대해 진지하게 생각해볼 것

     * 서비스 사업은 초기 자금이 부족해도 소프트웨어 제품 포화 문제를 해결할 수 있는 방법임
     * 첫 번째 고객을 찾는 방법은 제품 회사를 시작할 때 처음 사용자로 모집하려던 사람들과 대화하는 것임
     * 문제를 직접 해결해주고, 제품을 판매했을 때보다 더 많은 비용을 청구하면 됨

서비스 비즈니스를 성장시키는 방법

     * 서비스 비즈니스를 운영하는 것은 시간을 돈으로 판매하는 것. 시간을 더 벌 수 없기 때문에 더 많은 돈을 벌기 위해서는 몇 가지 방법만 있음:
          + 요금을 더 많이 청구함 (시간을 더 비싸게 판매)
          + 고용 (다른 사람의 시간을 돈으로 판매)
          + 제품화 (서비스의 일부를 제품으로 변환하여 돈과 시간을 분리)
          + 자동화 (같은 돈으로 더 적은 시간을 판매)
     * 서비스 사업을 성장시키는 고전적인 방법은 요금을 더 많이 청구하고 사람을 고용하는 것
     * 제품화는 서비스가 제품처럼 보이도록 만드는 것
          + 언뜻 보면 제품 회사를 설립하고 확장성이 없는 일을 하며 엔진을 돌리는 것처럼 보임(Doing things that don't scale)
          + 예를 들어 Parker Conrad의 첫번째 성공한 회사인 Zenefits는 처음에 수작업으로 사용자를 등록시켜 첫 사용자를 얻었음
               o 서비스를 상품처럼 보이게 하는 예쁜 웹사이트를 통해서 고객의 정보를 수집 함

AI와 관련된 현재 시기의 장점

     * 현재가 다른 시기보다 서비스 사업을 시작하기 좋은 이유는 AI가 제공하는 자동화 때문
     * AI 발전이 인상적이지만 궁극적으로 기본적인 자동화만 가능하게 함. 대부분의 디지털 서비스 작업을 잘 못하고, 소수의 작업만 잘 수행함
     * AI가 일정 수준 이상(AGI) 발전하지 않으면 반자동화(Semi-Autonomy) 이 단기적으로 가장 가능성이 높음. 이는 인간의 감독 하에 작업을 수행하는 AI임
     * 반자동화는 서비스 사업에 적합함. 서비스 사업 모델의 End-to-End 특성을 유지하면서 제품 회사의 이익률에 근접할 수 있음

결론

     * 서비스 비즈니스는 R&D 단계가 없기 때문에 시작하기 가장 쉬운 사업임
          + 하지만 기존엔 성장시키는 방법이 가격을 올리거나, 고용을 늘리거나, 서비스를 상품화하는 것이었기 때문에 성장하기가 어려웠음
     * AI가 계속 발전하고 있지만, 초인적인 능력(Superhuman)에 도달하지 못한다면,
       기존의 제약을 넘어서 서비스 비즈니스를 성장시킬수 있는 많은 자동화 기회가 있을 것

   니치한 범위 안에서의 자동화를 서비스로 제공하는 비즈니스가 요샌 괜찮나보군요

   개인적으로 제품과 서비스의 갈림길은 AI의 발전에 영향을 받지 않을까 하네요. 특히 AI는 휴먼서비스인 SI나 유지보수 업무를 완전히 대체하긴 어려울테니까요.
"
"https://news.hada.io/topic?id=15482","Web Check - 웹사이트의 모든 정보를 보여주는 OSINT 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Web Check - 웹사이트의 모든 정보를 보여주는 OSINT 도구

     * 입력한 웹사이트 URL에 대한 정보를 검색하고, 보기 쉽게 대시보드에 정리해주는 도구
     * 잠재적인 공격 벡터, 기존 보안 조치, 사이트 아키텍처 내의 웹 연결들을 집중적으로 보여줌
     * 서버 응답 최적화, 리디렉션 구성, 쿠키 관리 또는 사이트의 DNS 레코드 미세 조정에 도움을 줌

  주요 기능

     * IP 정보: 입력된 URL의 IP 주소와 관련된 정보를 제공함.
     * SSL 체인: SSL 인증서 체인 분석 기능 제공함.
     * DNS 레코드: 도메인의 DNS 레코드 정보를 확인할 수 있음.
     * 쿠키: 사이트에서 사용하는 쿠키 정보를 분석함.
     * 크롤 규칙: 사이트의 크롤링 규칙을 확인할 수 있음.
     * 헤더: HTTP 헤더 정보를 제공함.
     * 품질 지표: 웹사이트의 품질 관련 지표를 분석함.
     * 서버 위치: 서버의 물리적 위치 정보를 제공함.
     * 연관 호스트: 관련된 호스트 정보를 확인할 수 있음.
     * 리디렉션 체인: 리디렉션 경로를 분석함.
     * TXT 레코드: 도메인의 TXT 레코드 정보를 제공함.
     * 서버 상태: 서버의 현재 상태를 확인할 수 있음.
     * 오픈 포트: 서버의 오픈 포트를 확인할 수 있음.
     * Traceroute: 네트워크 경로를 추적함.
     * 탄소 발자국: 웹사이트의 탄소 발자국을 계산함.
     * 서버 정보: 서버에 대한 다양한 정보를 제공함.
     * Whois 조회: 도메인의 Whois 정보를 확인할 수 있음.
     * 도메인 정보: 도메인 관련 정보를 제공함.
     * DNS 보안 확장: DNSSEC 상태를 확인할 수 있음.
     * 사이트 기능: 웹사이트의 주요 기능을 분석함.
     * HTTP 엄격 전송 보안: HSTS 설정을 확인함.
     * DNS 서버: DNS 서버 정보를 제공함.
     * 기술 스택: 웹사이트에서 사용된 기술 스택을 분석함.
     * 리스트된 페이지: 사이트에 리스트된 페이지를 확인할 수 있음.
     * 보안.txt: 보안.txt 파일 정보를 확인함.
     * 링크된 페이지: 링크된 페이지 정보를 제공함.
     * 소셜 태그: 소셜 미디어 태그 정보를 분석함.
     * 이메일 설정: 이메일 설정 정보를 확인함.
     * 방화벽 감지: 방화벽 설정을 감지함.
     * HTTP 보안 기능: HTTP 보안 관련 기능을 분석함.
     * 아카이브 기록: 웹사이트의 아카이브 기록을 확인함.
     * 글로벌 랭킹: 웹사이트의 글로벌 랭킹을 제공함.
     * 차단 감지: 차단된 요소를 감지함.
     * 악성코드 및 피싱 감지: 악성코드 및 피싱 여부를 감지함.
     * TLS 암호화 스위트: TLS 암호화 스위트를 분석함.
     * TLS 보안 설정: TLS 보안 설정을 확인함.
     * TLS 핸드셰이크 시뮬레이션: TLS 핸드셰이크를 시뮬레이션함.
     * 스크린샷: 웹사이트의 스크린샷을 제공함.

  GN⁺의 의견

     * 다양한 기능: 웹 체크는 다양한 웹사이트 분석 기능을 제공하여 초급 엔지니어도 쉽게 사용할 수 있음.
     * 보안 강화: 웹사이트의 보안 상태를 종합적으로 점검할 수 있어 보안 강화에 유용함.
     * 환경 영향: 탄소 발자국 계산 기능을 통해 웹사이트의 환경 영향을 평가할 수 있음.
     * 오픈소스: MIT 라이선스로 제공되어 누구나 자유롭게 사용할 수 있음.
     * 경쟁 제품: 비슷한 기능을 제공하는 다른 도구로는 Pingdom, GTmetrix 등이 있음.

   보안.txt 는 조금 과하게 번역된 것 같습니다!ㅎㅎ

        Hacker News 의견

     * 두 개의 웹사이트/도메인을 확인했는데, 정보가 혼란스럽거나 잘못된 경우가 많음. DNS 레코드 카드의 MX는 실제 MX 레코드의 IP 주소가 아님. DNS 서버는 웹서버의 주소를 보여줌. 트레이서트는 실패함. 이메일 설정이 잘못됨. 리디렉션 카드가 잘못된 리디렉션을 표시함. 도메인 정보를 웹사이트 정보로 표현하려는 시도 같음. ""확인할 수 없음""을 ""아니오"" 대신 사용해야 함.
     * 이 서비스는 다른 곳에서 데이터를 긁어오고 있음. 우리는 아마존에서 GCP로 1년 전에 이전했음.
     * ""위협"" 섹션이 혼란스러움. 내 스타트업을 입력했더니 2018년의 악성코드가 감지됨. 다른 스타트업도 같은 결과를 보임. 이 섹션의 의미를 잘못 해석한 것 같음.
     * 품질 검사에서 403 오류가 발생함. Google API 키를 생성하고 Docker 컨테이너에 환경 변수로 전달했음. 프로젝트를 클론해서 URL을 확인했더니 PageSpeed Insights API를 활성화해야 한다는 JSON 문서를 반환함. ""오류 표시"" 버튼이 API 호출의 실제 출력을 보여줘야 함. README와 앱에 이 정보를 추가해야 함. 매우 유용한 프로젝트임.
     * Docker 버전이 더 잘 작동함. 무료 웹사이트 버전은 모든 기능이 활성화되지 않음. 매우 유망한 프로젝트임. 제작하고 공유해줘서 고마움.
     * 이 게시물의 링크와 GitHub의 링크가 무엇이 다른지 궁금함.
     * 이전에 HN에 제출된 첫 번째 게시물에서 가져옴.
     * ""도시: 정의되지 않음, 정의되지 않음, 정의되지 않음""이라는 결과가 나옴. 재미있음.
     * 오픈 소싱해줘서 고마움. 나는 RSS 피드와 마이크로포맷에 집중하고 있는 프로젝트를 진행 중임. 운영 비용이 얼마나 드는지 궁금함. $5/월이면 충분할 것 같음.
     * 게시물 제목의 수정이 필요함. ""let's""와 ""lets""는 다른 의미를 가짐. 훌륭한 사이트임.
"
"https://news.hada.io/topic?id=15574","Google Sheets가 계산 워커를 JavaScript에서 WasmGC로 포팅한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Google Sheets가 계산 워커를 JavaScript에서 WasmGC로 포팅한 이유

     * 구글 시트 팀은 2022년 크롬의 WasmGC 사용을 발표후, 서로 협력해왔음
     * 이는 구글의 앱들이 WasmGC에서 실행되도록 하는 선례를 만듦
     * 문제점: JavaScript
          + Google Sheets 계산 엔진은 원래 Java로 작성되어 2006년 출시되었고, 서버에서 모든 계산이 이루어짐
          + 2013년부터 JavaScript를 사용하여 브라우저에서 실행됨
               o Google Web Toolkit(GWT)를 이용하다가 나중에는 Java to Closure JavaScript transpiler(J2CL)를 사용
          + JavaScript 계산엔진은 Web Worker에서 실행되며 MessageChannel을 통해 메인 스레드와 통신함
          + JavaScript 버전이 Java 버전보다 3배 이상 느림
     * JavaScript가 Java보다 느린 이유
          + JavaScript는 동적 언어로 JIT 컴파일러를 통해 성능이 향상되었지만 여전히 제약이 있음
          + 느슨한 타입과 동적 동작으로 인해 최적의 코드 생성이 어려움
          + TypeScript도 개발을 쉽게 할 뿐 최적화에 필요한 보장을 제공하지 않음
     * 해결책: WasmGC
          + WebAssembly의 확장으로 가비지 컬렉션 언어 컴파일에 필요한 기능 추가
          + Java와 같은 언어를 웹에서 거의 네이티브 속도로 실행 가능
          + C++를 위한 Wasm보다 더 큰 영향력 예상됨
     * Google Workspace와 Chrome의 협력
          + 2020년 말부터 WasmGC 평가를 위해 협력 시작
          + Sheets 계산 엔진을 이상적인 테스트 대상으로 선정
          + V8 팀과 Binaryen(WASM 최적화 툴체인) 기여자들이 WasmGC 런타임과 AOT 최적화 담당
     * 최적화 과정
          + 초기 버전은 JavaScript보다 2배 느렸으나 지속적인 최적화 진행중
          + JVM과 V8의 핵심 최적화 기법을 복제(가상 메소드 디스패칭, Speculative Inlining 과 Devirtualization 적용만으로 40% 속도 향상)
          + 고도로 최적화된 브라우저 API 활용 (예: 정규표현식 처리 100배 향상)
          + JavaScript 특화 코딩 패턴 제거
     * 결론
          + WasmGC는 웹 애플리케이션 개발 방식을 발전시킬 잠재력을 가진 기술
          + 향후에 WasmGC가 공유 메모리 멀티스레딩 지원과 단일 스레드 성능 향상 기대
          + 모든 웹 개발자들에게 고성능 프로젝트에 WasmGC를 사용 권장

   주목할만한 사례네요.

   결론적으로 JavaScript 에서 WasmGC로 포팅해서 얼마나 빨라졌는지에 대해서는 이야기가 없는데, 아래 글에 보면 2배 빨라졌다고 합니다.
   Doubling calculation speed and other new innovations in Google Sheets

   참고 : WebAssembly 가비지 컬렉션 (WasmGC)이 이제 Chrome에서 기본적으로 사용 설정됨
"
"https://news.hada.io/topic?id=15487","Farm - 매우 빠른, Vite 호환 빌드 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Farm - 매우 빠른, Vite 호환 빌드 도구

     * Rust 기반의 웹 빌드 도구
     * 빠른 속도, 증분 빌드 지원
          + React 또는 Vue 프로젝트를 밀리초 단위로 시작할 수 있으며, 대부분의 상황에서 10ms 이내에 HMR 업데이트를 수행할 수 있음
          + 지속적인 캐시와 모듈 레벨 캐시를 지원하여 변경되지 않은 모듈은 다시 컴파일되지 않음.
     * Html, Css, Css Modules, Js/Jsx/Ts/Tsx, Json, 스태틱 애셋 컴파일
     * SaSS, Less, Postcss, Vue, react, Solid 등을 공식 플러그인으로 지원
     * Javascript 및 Rust 기반 플러그인 지원. (Vite 플러그인 호환)
     * Partial Building 지원 : 프로젝트를 몇 개의 합리적인 번들로 묶어 리소스 로딩 속도를 높이면서 캐싱의 세분성을 잃지 않음
     * 개발 중에 보는 것과 프로덕션에서 얻는 것이 동일하며, 레거시(ES5)와 최신 브라우저를 모두 지원

   인기 있는 언어라 그런지 러스트로 만든 물건 꽤 많네요

    Hacker News 의견

     * 실제 프로젝트에서 Vite와 Farm을 비교한 결과, Farm이 빌드 시간을 53% 단축했음. 하지만 새로운 의존성을 도입할 가치가 있는지는 불확실함.
     * Vite는 대부분의 요구사항을 충족할 만큼 충분히 빠름. Rust로 다시 작성된 새로운 프로젝트를 채택하는 것이 정당화되지 않음.
     * 중국 소프트웨어를 사용하는 대기업에서 일하는 사람이 있는지 궁금함. 정보 보안 팀이 이를 승인하는지, 그리고 GitHub에서 다운로드한 바이너리가 악성 코드일 가능성에 대한 우려가 있음.
     * rspack, turbopack, Farm 모두 Rust로 작성됨. Vite도 이미 빠르고 인기 있음. 이들 간의 차별점이 궁금함.
     * 그래프의 로딩 시간을 실제 측정 시간과 일치시키는 방식이 인상적임. 단순히 숫자를 보여주는 것보다 빠른 컴파일 시간의 가치를 잘 전달함.
     * 왜 ESBuild와 비교하지 않는지 궁금함.
     * 커뮤니티 링크로 WeChat을 사용하는 것이 Discord보다 나은지 의문임. 커뮤니티를 두 개로 분할하는 것이 좋은지 확신이 서지 않음.
     * 현재 Farm은 Vite의 훅과 옵션과 호환되도록 설계되었음. 하지만 JS와 Rust 간의 통신 문제로 인해 성능 저하가 발생함. 이를 해결하기 위해 Farm Rust 플러그인을 개발하는 것이 미래의 방향임.
     * 주말에 이 프로젝트를 살펴볼 예정임. JS 생태계에서 개발자 경험이 개선되는 것을 기대함. 하지만 아직 새로운 프로젝트이기 때문에 실제 프로덕션에 도입하기는 어려움.
     * Farm Inc.의 자금 출처가 궁금함.
"
"https://news.hada.io/topic?id=15461","챌린저 발사 승인 거부 및 은폐 폭로한 앨런 맥도날드 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  챌린저 발사 승인 거부 및 은폐 폭로한 앨런 맥도날드 (2021)

앨런 맥도날드를 기억하며: 챌린저 발사 승인 거부와 은폐 폭로

  앨런 맥도날드의 결정

     * 1986년 1월 27일, 앨런 맥도날드는 챌린저 발사 승인 여부를 결정해야 했음.
     * 맥도날드는 NASA 계약업체인 모튼 티오콜에서 부스터 로켓 프로젝트를 지휘했음.
     * 발사 전날, 맥도날드는 발사 승인을 거부했음. 이유는 동결 온도가 부스터 로켓의 조인트를 손상시킬 수 있다는 우려 때문이었음.

  챌린저 발사 연기 요청

     * 맥도날드는 세 가지 이유로 발사 연기를 주장했음:
          + 밤새 동결된 온도가 부스터 로켓 조인트를 손상시킬 가능성.
          + 발사대와 우주선에 형성된 얼음이 궤도선의 열 타일을 손상시킬 가능성.
          + 부스터 로켓 회수 지점의 거친 바다 상태 예보.

  챌린저 폭발 후의 폭로

     * 챌린저 폭발 12일 후, 맥도날드는 대통령 조사위원회 비공개 청문회에서 NASA의 은폐를 폭로했음.
     * NASA 공식이 티오콜의 우려를 무시하고 발사를 승인했다고 주장했음.
     * 맥도날드는 티오콜이 53도 이하에서 발사하지 말 것을 권고했음을 강조했음.

  맥도날드의 후속 활동

     * 챌린저 폭발 후, 맥도날드는 티오콜에서 부사장으로 승진하고 부스터 로켓 조인트 재설계 작업을 지휘했음.
     * 1988년, 재설계된 조인트가 성공적으로 작동했음.
     * 맥도날드는 은퇴 후 윤리적 의사결정의 중요성을 강조하며 강연을 다녔음.

  맥도날드의 유산

     * 맥도날드는 ""올바른 이유로 올바른 일을 올바른 시간에 올바른 사람들과 함께 하라""는 원칙을 강조했음.
     * 그는 챌린저 폭발 후에도 후회 없이 평온하게 생을 마감했음.

GN⁺의 의견

     * 윤리적 의사결정의 중요성: 맥도날드의 사례는 엔지니어들이 윤리적 의사결정을 내리는 것이 얼마나 중요한지를 보여줌.
     * 조직 내 압력: NASA와 티오콜 간의 갈등은 조직 내 압력이 어떻게 잘못된 결정을 초래할 수 있는지를 시사함.
     * 기술적 데이터의 중요성: 맥도날드와 그의 팀이 제시한 데이터는 기술적 근거가 의사결정에 얼마나 중요한지를 강조함.
     * 리더십과 용기: 맥도날드의 행동은 리더십과 용기의 본보기로, 엔지니어들에게 큰 영감을 줄 수 있음.
     * 교육과 강연: 그의 후속 강연 활동은 차세대 엔지니어들에게 윤리적 의사결정의 중요성을 교육하는 데 큰 기여를 했음.

        Hacker News 의견

     * 첫 번째 의견: 복잡하고 위험한 프로젝트에서 항상 불만을 가진 엔지니어가 있음. 결국 결정을 내려야 하는 상황에서 누군가의 반대를 무시해야 함.
     * 두 번째 의견: Allan McDonald와 같은 엔지니어들의 이야기를 알게 되어 감사함. Bob Ebeling과 Roger Boisjoly도 비슷한 사례임.
     * 세 번째 의견: McDonald는 상사나 사회의 기대에 얽매이지 않고 사실에 기반한 진실을 고수했음. 이는 현대 사회에서 신선한 태도임.
     * 네 번째 의견: ""The Normalization of Deviance""라는 강연이 이 주제에 대해 잘 설명함.
     * 다섯 번째 의견: Al McDonald는 항상 올바른 이유로 올바른 일을 해야 한다는 '7R의 법칙'을 강조했음.
     * 여섯 번째 의견: ""Truth, Lies, and O-Rings""라는 책은 챌린저 사고에 관심 있는 사람들에게 추천할 만함. 부스터의 수평 테스트가 원래의 설계 약점을 파악하는 데 방해가 되었음.
     * 일곱 번째 의견: O-링 이야기가 공개된 방법도 주목할 만함. Sally Ride가 정보를 Richard Feynman에게 전달하도록 유도했음.
     * 여덟 번째 의견: 오늘날 많은 기술 발명이 소비주의로 인해 지구를 파괴하는 데 사용되고 있음. 더 많은 프로그래머들이 AI 작업을 거부했으면 좋겠음.
     * 아홉 번째 의견: McDonald가 영웅이 된 것이 우연인지 궁금함. NASA가 성공 가능성을 믿었던 이유와 확률의 역할에 대한 의문이 있음.
     * 열 번째 의견: Thiokol 경영진이 NASA의 압박에 의해 엔지니어들의 반대를 무시하고 승인을 내린 상황이 익숙하게 들림.
"
"https://news.hada.io/topic?id=15546","영구 폐쇄되는 Living Computers Museum, 빈티지 아이템 경매","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              영구 폐쇄되는 Living Computers Museum, 빈티지 아이템 경매

시애틀의 Living Computers Museum 영구 폐쇄 및 경매 소식

  박물관 폐쇄 및 경매 계획

     * 시애틀의 Living Computers Museum + Labs가 2020년에 폐쇄된 이후 재개장하지 않음.
     * 폴 앨런의 유산 관리팀이 박물관의 영구 폐쇄를 확인함.
     * 박물관의 주요 전시품은 크리스티 경매를 통해 경매에 부쳐질 예정임.

  폴 앨런의 유산 관리

     * 폴 앨런의 유산 관리팀은 그의 사망 이후 다양한 자산을 정리하고 있음.
     * 경매 수익금은 앨런의 뜻에 따라 자선 단체에 기부될 예정임.
     * 2022년에도 앨런의 예술품 컬렉션 경매가 성공적으로 진행됨.

  경매 주요 항목

     * ""Gen One: Innovations from the Paul G. Allen Collection"" 경매는 초기 컴퓨터 기술을 기념하는 행사로, 150개 이상의 항목이 포함됨.
     * 주요 경매 항목 중 하나는 앨런과 빌 게이츠가 사용했던 DEC PDP-10: KI-10 컴퓨터임.
     * 앨버트 아인슈타인이 프랭클린 루즈벨트 대통령에게 보낸 1939년 서한도 경매에 부쳐질 예정임.

  박물관의 역사와 역할

     * Living Computers Museum + Labs는 2012년에 개관하여 다양한 컴퓨터 기술과 역사적 맥락을 제공함.
     * 박물관은 세계 최대의 복원된 슈퍼컴퓨터, 메인프레임, 미니컴퓨터, 마이크로컴퓨터 컬렉션을 보유함.
     * 2016년에는 최신 기술을 다루는 전시와 컴퓨터 과학 학습 실험실을 추가함.

  박물관의 교육적 가치

     * 박물관은 로봇 공학, 증강 현실, 자율 주행 자동차, 디지털 아트, 인공지능 등 현대 기술을 강조함.
     * COVID-19로 인해 2020년 3월 운영이 중단됨.
     * 박물관의 원격 빈티지 에뮬레이션 시스템은 SDF.org에 인수됨.

GN⁺의 의견

    1. 기술 역사 보존의 중요성: 폴 앨런의 컬렉션은 현대 컴퓨팅 기술의 기초를 이해하는 데 중요한 역할을 함.
    2. 경매의 교육적 가치: 경매를 통해 많은 사람들이 초기 컴퓨터 기술의 발전 과정을 배울 수 있는 기회가 제공됨.
    3. 지역 사회의 유산 보존: 시애틀 지역 사회는 이러한 역사적 유산을 보존하고 공유하는 데 관심이 큼.
    4. 기술 발전의 기초: 초기 컴퓨터 기술이 현재의 스마트폰과 같은 현대 기술의 기초가 됨을 이해하는 것이 중요함.
    5. 박물관의 역할: 박물관은 단순한 전시 공간을 넘어 교육적 기회를 제공하는 중요한 역할을 함.

        Hacker News 의견

     * 수집품의 가치: 수집품을 평생 모아도 상속자가 관심을 가질 가능성은 거의 없으며, 폴 앨런이 박물관 유지 기금을 제대로 마련하지 않은 것이 실수였음.
     * 건물 상태: 두 달 전 건물 내부가 거의 손상되지 않은 상태였음을 확인했으며, 주변을 탐색하다가 경고 방송을 들음.
     * RE-PC 창고: RE-PC 빈티지 컴퓨팅 창고는 60년대 장비를 전시하는 작은 박물관이 있으며, 90년대와 2000년대 데스크탑도 체험 가능함.
     * 디지털 PDP-10: 세계 유일의 작동 중인 디지털 PDP-10이 경매에서 좋은 주인을 찾기를 바람.
     * 네덜란드 컴퓨터 박물관: 네덜란드의 홈 컴퓨터 박물관은 손으로 만질 수 있는 전시물로 유명하며, 첫 PC를 ""입양""할 수 있음.
     * 리빙 컴퓨터 박물관: 애플 1, 제록스 알토, 알테어 8800 등을 직접 사용할 수 있어 매우 인상적이었음.
     * 크리스티 경매: 크리스티의 경매는 자산을 수익으로 보는 시각이 강하며, 폴 앨런의 유산을 해체하는 것이 그의 바람이었는지 의문임.
     * 로즈웰 컴퓨터 박물관: 애틀랜타 북쪽 로즈웰에 위치한 컴퓨터 박물관도 흥미로움.
     * 2019년 방문 경험: 2019년에 방문한 경험이 매우 동기부여가 되었으며, 시스템 환경의 재현을 희망함.
     * 임시 컴퓨터 박물관: 리빙 컴퓨터 박물관을 좋아했다면 임시 컴퓨터 박물관도 흥미로울 것임.
     * 박물관 해체: 박물관의 각 부품을 판매하는 것은 어리석으며, 폴 앨런의 유산을 파괴하는 것임.
"
"https://news.hada.io/topic?id=15581","대법원, 논란의 Purdue Pharma 오피오이드 합의 차단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   대법원, 논란의 Purdue Pharma 오피오이드 합의 차단

    대법원 판결 요약

     * 대법원이 퍼듀 파마(Purdue Pharma)의 파산 계획을 차단함
     * 이 계획은 Sackler 가족을 향후 소송에서 보호하는 대신 수십억 달러를 제공하는 내용이었음
     * 대법원은 파산법이 파산을 신청하지 않은 당사자를 소송에서 보호할 수 없다고 판결함

    판결의 주요 내용

     * 판결은 5-4로 이루어졌으며, 이념적 경계를 넘나듦
     * Neil M. Gorsuch 대법관이 다수 의견을 작성함
     * Gorsuch는 모든 관련 당사자가 동의하지 않은 거래는 유효하지 않다고 결론지음
     * 의회가 파산법을 개정하여 오피오이드 관련 파산을 명확히 다룰 수 있음

    퍼듀 파마의 반응

     * 퍼듀 파마는 판결을 ""가슴 아프다""고 표현함
     * 회사는 오피오이드 문제 해결을 위한 자금 사용과 회사를 선한 엔진으로 전환하는 목표를 계속 추구할 것이라고 밝힘

    판결에 대한 다양한 반응

     * 코네티컷 주 법무장관은 판결을 환영하며, 새로운 협상에서 자금이 오피오이드 치료와 예방에 사용될 것을 요구할 것이라고 밝힘
     * 일부 피해자 가족은 판결을 지지하며, Sackler 가족이 쉽게 빠져나가게 해서는 안 된다고 주장함
     * 다른 피해자 가족은 판결이 더 많은 불필요한 과다 복용 사망을 초래할 것이라고 우려함

    Sackler 가족의 입장

     * Sackler 가족은 여전히 위기를 해결하기 위한 합의에 도달하기를 희망한다고 밝힘
     * 가족은 법정에서 승소할 자신이 있다고 주장함

    오피오이드 위기의 배경

     * 2000년 이후 미국에서 30만 명 이상이 처방 오피오이드 과다 복용으로 사망함
     * 최근에는 합성 오피오이드인 펜타닐 사용으로 인해 연간 10만 명 이상의 사망자가 발생함
     * 주, 지방 정부, 원주민 부족, 병원 및 피해자들이 오피오이드 제조업체와 소송을 제기함

    법적 및 재정적 결과

     * 퍼듀 파마는 2020년에 세 가지 중죄에 대해 유죄를 인정하고 2억 2,500만 달러를 정부에 지불하기로 합의함
     * Sackler 가족도 2억 2,500만 달러의 민사 손해배상금을 지불하기로 합의함
     * 복잡한 협상 끝에 Sackler 가족은 60억 달러를 기부하고 회사 소유권을 포기하기로 합의함

    향후 전망

     * 대법원의 판결로 인해 새로운 협상이 필요하게 됨
     * 다른 소송이 Sackler 가족을 상대로 진행될 수 있음
     * 퍼듀 파마의 파산 절차는 10억 달러 이상의 법적 및 행정 비용을 초래함

    GN⁺의 의견

     * 이 기사는 오피오이드 위기의 심각성과 관련된 법적 복잡성을 잘 보여줌
     * Sackler 가족의 책임 문제와 피해자 보상 사이의 균형을 찾는 것이 중요함
     * 유사한 기능을 가진 다른 프로젝트로는 Johnson & Johnson의 오피오이드 합의가 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 법적 및 윤리적 고려사항을 신중히 검토해야 함
     * 이 기사는 법적 판결이 사회적 문제 해결에 미치는 영향을 이해하는 데 도움이 됨

        Hacker News 의견

     * Sackler 가족은 역사상 가장 큰 피해를 미국에 입힌 마약 거래자들로 간주되어야 함
     * Sackler 가족이 자산을 빼돌리고 법적 책임을 회피하려 했다는 사실이 널리 인정됨
     * 진정한 파산 절차를 거친 후에만 민사 책임 면제가 가능해야 함
     * Sackler 가족이 사람들의 삶을 파괴한 악당이라고 생각하지만 Purdue가 계속 운영되어야 한다는 의견을 이해하기 어려움
     * Matt Levine은 Sackler 가족이 법적으로 보호된 자산에 돈을 넣어두었기 때문에 불리한 판결이 나와도 많은 돈을 회수하기 어려울 것이라고 설명함
     * URL을 더 중립적이고 정보가 많은 기사로 변경함
     * Matt Levine의 설명은 복잡한 주제를 이해하는 데 유용함
     * 이 사건은 생각보다 복잡하며, 반대 의견도 매우 설득력 있음
     * 원래 판사는 합리적이고 널리 지지받는 합의안을 제시했으며, Sackler 가족이 개인 자금을 지급 기금에 넣어 더 많은 피해자가 즉시 보상받을 수 있게 했음
     * 이번 판결로 Sackler 가족이 다시 법적 책임을 지게 되어 피해자들이 더 어려운 소송을 진행해야 함
     * Sackler 가족은 파산 신청을 피하면서도 추가적인 책임에서 벗어나고자 함
"
"https://news.hada.io/topic?id=15578","2억 7천만 달러 규모의 헬스케어 사기 단속으로 200명 기소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2억 7천만 달러 규모의 헬스케어 사기 단속으로 200명 기소

미국 법무부, 2.7억 달러 규모의 의료 사기 단속

  주요 내용

     * 미국 법무부는 2.7억 달러 규모의 의료 사기 단속에서 약 200명을 기소함.
     * 메릭 갈랜드 법무장관은 의사, 간호사 등 다양한 의료 전문가들이 포함된 사기 사건을 발표함.
     * 아리조나 주에서는 말기 환자를 대상으로 한 9억 달러 규모의 사기 사건이 포함됨.

  주요 사건

     * 아리조나 사기 사건: 상처 치료 회사의 두 소유자가 메디케어를 속여 3억 3천만 달러 이상의 리베이트를 받은 혐의로 기소됨.
     * 플로리다 사기 사건: 잘못된 HIV 약을 유통한 혐의로 기소됨. 환자들이 잘못된 약을 복용해 건강에 심각한 피해를 입음.

  법무부의 대응

     * 자산 압류: 법무부는 2억 3천만 달러 이상의 현금, 고급 자동차 및 기타 자산을 압류함.
     * 정기 단속: 법무부는 주기적으로 이러한 대규모 의료 사기 단속을 실시하여 잠재적인 범죄자들을 억제하려 함.

GN⁺의 의견

     * 의료 사기 문제: 의료 사기는 환자의 건강을 심각하게 위협할 수 있으며, 특히 말기 환자나 취약 계층을 대상으로 한 사기는 더욱 큰 문제임.
     * 법무부의 역할: 법무부의 정기적인 단속은 의료 사기를 억제하는 데 중요한 역할을 함.
     * 기술적 대응: 의료 사기를 방지하기 위해서는 기술적 대응이 필요함. 예를 들어, 블록체인 기술을 활용한 투명한 의료 기록 관리가 도움이 될 수 있음.
     * 환자 보호: 환자들은 자신이 받는 치료와 약물에 대해 충분히 이해하고, 의심스러운 상황에서는 즉시 의료 전문가와 상담하는 것이 중요함.
     * 유사 사건 예방: 다른 국가에서도 유사한 의료 사기 사건이 발생할 수 있으므로, 국제적인 협력과 정보 공유가 필요함.

        Hacker News 의견

     * 첫 번째 댓글: 범죄 관련 책을 사지 말아야 함을 강조함.
     * 두 번째 댓글: 의료 산업의 부패를 막기 위해 더 강력한 처벌이 필요함을 주장함.
     * 세 번째 댓글: 정부가 공공 지출 데이터를 공개하고, 사기를 식별하면 보상을 주는 아이디어를 제안함.
     * 네 번째 댓글: 플로리다에서 잘못된 HIV 약을 유통한 사례가 매우 악랄함을 지적함.
     * 다섯 번째 댓글: 사기꾼의 결혼 등록부를 공유하며 그들이 행복해 보인다고 언급함.
     * 여섯 번째 댓글: 사기꾼들이 주지사와 상원의원이 되려는 것 같다고 비꼬음.
     * 일곱 번째 댓글: 200명의 피고인이 27억 달러의 사기 혐의를 받는다는 사실을 언급함.
     * 여덟 번째 댓글: 사기꾼의 결혼 초대장을 공유하며 그들의 사치스러운 생활을 비판함.
     * 아홉 번째 댓글: 미국에 보편적 의료 시스템이 있었다면 이런 사기가 발생했을지 궁금해함.
     * 열 번째 댓글: 경영진은 감옥에 가고, 간호사와 의사는 면허를 잃어야 한다고 주장함.
"
"https://news.hada.io/topic?id=15543","0/10에서 8/10으로: Microsoft의 수리 중심 정책","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   0/10에서 8/10으로: Microsoft의 수리 중심 정책

서피스 랩탑 7

     * 서피스 랩탑 7은 매우 수리 친화적인 장치로, 초기 모델과는 대조적임.
     * 하단 판을 제거하면 QR 코드가 있어 마이크로소프트의 서비스 매뉴얼로 연결됨.
     * 작은 기호(Wayfinders)가 있어 각 부품이 어떤 나사로 고정되어 있는지 쉽게 알 수 있음.
     * 배터리는 8개의 5IP Torx 나사로 고정되어 있음.
     * 대부분의 부품은 추가적인 레이어를 제거하지 않고 접근 가능함.
     * 팬을 청소하거나 배터리를 교체하는 것이 매우 쉬움.

서피스 프로 11

     * 서피스 프로 11도 많은 수리 가능성 개선 사항을 포함하고 있음.
     * 태블릿 PC는 노트북보다 수리가 어려울 수 있지만, 서피스 프로는 다른 태블릿과 비교했을 때 수리 가능성이 높음.
     * M.2 드라이브는 킥스탠드 아래의 작은 자석 커버를 통해 접근 가능함.
     * 화면을 제거하면 QR 코드와 Wayfinder 마커가 있어 분해를 도와줌.
     * Surflink 케이블과 열 관리 시스템을 제거해야 배터리에 접근 가능함.
     * 배터리는 나사로 고정되어 있으며, 접착제가 사용되지 않음.
     * Surflink 케이블의 포트를 고정하는 나사는 비자성임.

GN⁺의 의견

     * 수리 가능성의 중요성: 마이크로소프트의 수리 가능성 향상은 사용자에게 큰 이점을 제공하며, 제품의 수명 연장과 환경 보호에 기여함.
     * Right to Repair 운동: 이러한 변화는 Right to Repair 운동과 관련 법안의 영향으로 볼 수 있음. 사용자가 자신의 장치를 수리할 권리를 보장받는 것은 매우 중요함.
     * 경쟁 제품: 다른 제조사들도 수리 가능성을 높이는 방향으로 나아가야 함. 예를 들어, 프레임워크 랩탑은 수리 가능성에서 좋은 평가를 받고 있음.
     * 기술적 고려사항: 새로운 기술을 도입할 때는 수리 가능성을 고려해야 함. 이는 사용자 만족도와 브랜드 신뢰도를 높이는 데 도움이 됨.
     * 미래 전망: 마이크로소프트의 이러한 변화가 다른 IT 기업들에게도 긍정적인 영향을 미쳐, 전체 산업의 수리 가능성이 향상되기를 기대함.

        Hacker News 의견

     * Hacker news: 미국인들이 EU 법안을 미국 기업의 관점에서 알게 되는 곳이라는 의견.
     * Right to Repair: 수리 권리(RtR) 옹호와 법안이 성과를 내기 시작했다는 신호로 해석.
     * OEM 선택: 이번에 선택한 OEM이 단순히 더 쉬운 방향으로 갔거나, Dell과 Lenovo가 차지하는 기업 시장을 목표로 했을 가능성.
     * MS의 RtR 반대: MS는 과거에 RtR에 강하게 반대해왔고, 그 입장이 변하지 않았을 것이라는 의견.
     * Linux 호환성: 새로운 Surface Pro가 Linux와 호환되지 않는다는 아쉬움.
     * MacBook Pro 14"" (2023): M3 Pro와 M3 Max 모델의 수리 가능성 점수가 4/10으로 예상보다 높았다는 놀라움.
     * 수리 가능성: CPU, RAM, SSD가 납땜되어 있어 배터리만 수리 가능하다는 비판.
     * 비즈니스 결정: 수리 권리 규제를 만족시키면서 부품 가격을 유지하려는 저렴한 비즈니스 결정이라는 주장.
     * Fairbuds XL: 플라스틱 부품이 부러져 교체했는데, 수리 가능성이 여전히 과소평가되고 있다는 의견.
     * RtR 법안 반응: 다양한 지역에서의 수리 권리 법안에 대한 반응이라는 주장.
     * 수리 가능성 꿈: Surface Pro 11을 쉽게 분해하고 AI 코어를 제거할 수 있는 꿈.
     * 미래 예측: 앞으로도 수리 가능한 제품을 유지할지, 다시 일회용 제품으로 돌아갈지에 대한 의문.
     * Windows 11 설치 문제: Windows 11이 설치되지 않는 기기들이 결국 폐기될 가능성에 대한 우려.
"
"https://news.hada.io/topic?id=15504","iOS 18에선 써드파티도 AirPods 같은 간편한 페어링 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  iOS 18에선 써드파티도 AirPods 같은 간편한 페어링 가능

     * 2016년 Apple이 AirPods와 같이 도입한 간편 페어링
          + Bluetooth 설정으로 이동하고 버튼을 누르는 대신, 주변 액세서리를 인식하여 사용자에게 페어링을 요청하는 방식
     * iOS 18에는 AccessorySetupKit API가 추가됨
          + 서드파티 액세서리도 AirPods와 AirTag처럼 간편하게 설정 가능
          + iOS 18을 실행하는 iPhone 또는 iPad가 호환되는 액세서리를 감지하면 페어링 팝업 표시
          + 한 번의 탭으로 Bluetooth 및 Wi-Fi 연결 자동 처리
          + 액세서리 앱에 개별적으로 Bluetooth와 Wi-Fi 권한을 수동으로 부여할 필요 없음
     * 복잡한 페어링 과정 지원
          + PIN 코드 확인 등 복잡한 페어링 과정이 필요한 경우, 앱을 열지 않고도 정보 요청 가능
          + 페어링 후 새로운 '액세서리' 메뉴에서 액세서리에 대한 추가 정보 확인 가능
     * 액세서리 제조사에 큰 기회가 될 것
          + Apple 액세서리와 동일한 수준의 통합 경험 제공 가능
          + 액세서리 앱과 액세서리 자체 업데이트 필요
          + iOS 18 출시 후 가을에 새로운 API 사용 가능 예상
     * iOS 18은 현재 개발자용 베타 프리뷰, 다음 달에 공개 베타 출시. 올 가을에 정식 출시 예정

   갤럭시 생태계 쓰다가 애플 생태계 넘어와서 제일 이해 안되는게 이거였죠
   아이폰 <-> 애플워치 블루투스 넘겨받으려면 에어팟, 닥터드레만 써야하는거
"
"https://news.hada.io/topic?id=15477","자율주행 Waymo, 샌프란시스코 외 지역 확장 최종 승인 확보","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  자율주행 Waymo, 샌프란시스코 외 지역 확장 최종 승인 확보

     * 요약할 내용이 없음

        Hacker News 의견

     * Waymo 사용 후기: Lyft와 Uber의 서비스 질이 떨어져 Waymo를 더 자주 사용하게 됨. 차량이 항상 넓고 깨끗하며 조용함. 에어컨이 항상 작동하고, 운전자가 없어 아기가 잘 때 방해받지 않음. 단점으로는 요금이 Lyft와 Uber보다 10% 비싸고, 픽업 및 드롭오프 지점이 요청한 위치에서 조금 떨어져 있음. 추가 장점으로는 차 안에서 진정 음악 재생 목록을 선택할 수 있고, 다음 탑승 시 자동으로 재생이 이어짐.
     * Waymo 차량 관찰: 도로에서 Waymo 차량을 자주 볼 수 있음. 정지 신호에서 3-4초 동안 멈추고, 헤드라이트와 브레이크 등이 매우 밝음. 승객을 기다릴 때 공원이나 주차장 옆에 정차하여 주민들을 방해하지 않음. 수요가 낮을 때는 2-4대가 함께 모여 있음.
     * Waymo 탑승 경험: Waymo를 탈 때마다 기대됨. 조용하고 평화로운 공간에서 목적지까지 편안하게 이동할 수 있음. 단 한 번 에어컨이 작동하지 않아 차 내부가 매우 더웠던 경험이 있음.
     * 자전거 이용자의 신뢰: 자전거 이용자로서 Waymo가 인간 운전자보다 훨씬 신뢰할 만함. 더 많은 Waymo 차량이 도입되길 바람.
     * Waymo의 장점: 기본 차량이 매력적이며, 특히 키가 큰 사람에게 넓음. 사용자 인터페이스가 직관적이고 재미있음. 운전자가 없어 차량의 분위기, 냄새, 청결도, 대화 여부 등이 일정함. Waymo의 확장을 기대함.
     * Waymo의 단점: 긴 거리에서는 Lyft/Uber보다 비효율적임. 고속도로와 고속도로를 피하는 경로를 선택하여 이동 시간이 두 배로 길어질 수 있음. 도시 이벤트 중 도로가 차단될 때 인간 운전자의 직관과 전략이 부족함. 느리게 운전하여 다른 운전자들이 자주 추월하려 함.
     * Waymo의 매력: Lyft와 Uber를 대체할 수 있음. AI를 사용하다가 인간 운전자가 그리워지면 다시 전환할 수 있음. Waymo는 모든 면에서 우수하지만 좋은 회사가 필요함.
     * Waymo의 발전: 자율주행차에 대한 FUD(두려움, 불확실성, 의심)가 너무 많음. 각 지방 자치 단체가 자체 규제를 설정하는 것은 과도한 규제임. 자율주행차가 Uber와 Lyft보다 더 위험하다는 통계가 있다면 매우 놀라울 것임.
     * Waymo의 초기 단계: 아직 '허니문 단계'이지만, 걷거나 자전거를 타거나 다른 차를 운전하거나 Waymo를 탈 때 Waymo를 좋아함.
"
"https://news.hada.io/topic?id=15594","하위 랭킹 테니스 선수의 외로움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           하위 랭킹 테니스 선수의 외로움

코너 닐랜드의 테니스 여정

  어린 시절과 가족의 영향

     * 10살 때 테니스를 그만두고 싶다고 부모님께 말했음
     * 부모님은 테니스가 가족 사업이라며 포기하지 않게 했음
     * 3살 때 처음 라켓을 잡고 15년 동안 주요 대회에 출전하기 위해 전 세계를 여행했음

  프로 테니스의 계층 구조

     * 남자 프로 테니스는 ATP 투어, 챌린저 투어, 퓨처스 투어로 나뉨
     * ATP 투어는 세계 상위 100명의 선수들이 경쟁하는 최고 수준의 대회
     * 챌린저 투어는 주로 세계 랭킹 100위에서 300위 사이의 선수들이 참가
     * 퓨처스 투어는 2,000명 이상의 선수들이 경쟁하는 하위 대회

  ATP 투어에서의 첫 경험

     * 캘리포니아 샌호세에서 열린 ATP 대회에서 안드레 아가시를 가까이서 처음 봄
     * 아가시의 고독함을 이해하게 됨

  테니스 선수의 고독

     * 테니스는 고독한 스포츠이며, 승리도 개인적인 경험임
     * 선수들은 호텔 방, 공항, 코트 안에서 고독을 느끼며, 언어 장벽도 존재함

  랭킹의 중요성

     * 테니스에서 세계 랭킹은 사회적 지위를 결정함
     * 랭킹이 높을수록 더 많은 기회와 돈을 벌 수 있음

  챌린저 투어에서의 경험

     * 그리거 디미트로프와의 만남과 그의 성장 과정
     * 디미트로프는 주니어 윔블던과 US 오픈 주니어 대회에서 우승한 후 빠르게 성장

  퓨처스 투어의 고독과 불확실성

     * 퓨처스 투어의 선수들은 고독과 불확실성에 시달림
     * 경기 일정이 불확실하고, 다음 대회로 이동하는 것도 어려움

  낮은 수준의 투어에서의 경쟁

     * 낮은 수준의 투어에서는 이기기 위해 이기적인 행동이 보상받음
     * 연습 파트너를 찾는 것도 어려움

  여행과 경기의 어려움

     * 여행은 끊임없고, 낮은 수준의 대회에서는 호텔과 환경이 열악함
     * 우즈베키스탄에서의 대회 경험과 어려움

  결론

     * 코너 닐랜드는 7년 동안 투어를 다니며 많은 어려움을 겪었지만, 테니스에 대한 열정을 잃지 않았음

GN⁺의 의견

     * 이 기사는 프로 테니스 선수의 고독과 어려움을 잘 보여줌
     * 테니스는 개인 스포츠로서의 특성이 강하며, 선수들이 겪는 고독과 불확실성은 큰 도전임
     * 비슷한 기능을 가진 다른 스포츠로는 골프가 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 그 기술이 제공하는 이점과 단점을 신중히 고려해야 함
     * 이 기사는 테니스 선수의 현실을 이해하는 데 도움이 되며, 스포츠의 다른 측면을 조명함

        Hacker News 의견

     * 한 코치는 젊은 선수의 코치로서 어려운 삶을 설명하며 ""영광"" 때문에 프로 스포츠를 한다고 말함
     * 자신의 신체적 한계로 인해 운동선수가 되지 못했지만, 오히려 현재의 직업과 생활에 감사함
     * 자녀들에게 테니스를 취미로 삼으라고 강조하지만, 많은 부모들이 이를 매우 진지하게 받아들임
          + 어린 나이부터 여행, 호텔 생활, 대회 참가 등으로 학교 교육을 포기하는 경우가 많음
          + 일부는 프로 선수가 되지 못해 오히려 더 나은 교육과 직업을 얻을 수 있음
     * 대부분의 개인 경쟁 스포츠는 상위 선수들이 대부분의 상금을 가져가고, 하위 선수들은 비용을 충당하기도 어려움
          + 스폰서십이 일부 비용을 덜어주지만, 모든 선수가 높은 스폰서십을 받는 것은 아님
          + 많은 선수들이 결국 레슨을 통해 더 나은 수입을 얻음
     * 중간 수준의 선수들은 꿈을 포기하지 못하고 계속해서 테니스를 시도하지만, 현실적으로 큰 성공을 거두기 어려움
     * David Foster Wallace의 테니스 관련 에세이를 추천함
          + 테니스 세계의 헌신과 재능, 그리고 하위 랭크 선수들의 어려움을 잘 설명함
     * 은행에서의 경험을 통해 테니스 세계의 랭킹이 사회적 상호작용에 미치는 영향을 이해함
     * 현실 세계에서 성공의 분포가 매우 불균형함
          + 테니스 스타, 유튜버, 기술 스타트업, 비디오 게임, 심지어 마약 카르텔까지 상위 5%가 시장의 50% 이상을 차지함
          + 고등학교에서 다양한 산업의 부의 분포에 대해 가르쳐야 함
     * Vox의 비디오에서 테니스 선수들이 생계를 유지하기 어려운 이유를 설명함
          + 한 선수는 대회 참가보다 다른 선수들의 라켓을 다시 줄을 매는 일로 더 많은 돈을 벌었음
     * 프로 테니스 선수로서 생계를 유지하기 어려운 상황에서 왜 계속 시도하는지 이해하기 어려움
          + 부모의 압박과 지원이 주요 원인일 수 있음
"
"https://news.hada.io/topic?id=15478","HN 공개: Eidos – Notion의 오프라인 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HN 공개: Eidos – Notion의 오프라인 대안

DiscordEidos 소개

  주요 기능

     * 브라우저 내 실행: 모든 기능이 브라우저 내에서 실행됨. PWA 지원.
     * 오프라인 지원: 인터넷 연결 없이 데이터 접근 가능. 데이터는 로컬에 저장되어 빠른 성능 제공.
     * AI 기능: LLM과 깊이 통합되어 AI 기반 기능 제공. 데이터 번역, 요약, 상호작용 가능. 오프라인에서도 AI 작동.
     * 확장성: 사용자의 필요에 맞게 Eidos를 커스터마이즈 가능.
          + Prompt: 코드 없이 워크플로우 가속화.
          + UDF: JavaScript로 사용자 정의 함수 작성.
          + Script: TypeScript/JavaScript로 강력한 데이터 처리 로직 생성.
          + App: 선호하는 프레임워크로 자체 앱 빌드 가능.
          + Block: 문서에 사용자 정의 블록 추가.
          + Field: 테이블에 사용자 정의 필드 추가.
     * 개발자 친화적:
          + API & SDK 제공.
          + Sqlite 표준화: 모든 테이블이 SQLite 테이블로 구성됨.

  개발 방법

    1. 저장소 클론: git clone git@github.com:mayneyao/eidos.git
    2. 의존성 설치: pnpm install
    3. 빌드: pnpm build (한 번만 필요)
    4. 개발 서버 실행: pnpm dev
    5. 브라우저에서 앱 접근: http://localhost:5173

    SDK 타입 생성

     * pnpm gen-types

  Credits

     * sqlite-wasm: 브라우저에서 SQLite 실행
     * shadcn-ui: UI 컴포넌트
     * glide-data-grid: 고성능 테이블
     * lexical: 문서 편집기
     * web-llm: 브라우저에서 LLM 실행
     * teable & apitable: Airtable 유사 테이블 빌드 방법 제공

  라이선스

     * 이 프로젝트는 AGPL 라이선스 조건에 따라 라이선스됨.

GN⁺의 의견

     * 개발자 친화적: API와 SDK 제공으로 개발자들이 쉽게 확장 가능함.
     * 오프라인 지원: 인터넷 연결 없이도 데이터 접근 가능해 유용함.
     * AI 통합: LLM과의 통합으로 데이터 처리에 강력한 AI 기능 제공.
     * 확장성: 다양한 커스터마이즈 옵션으로 사용자 맞춤형 환경 구축 가능.
     * SQLite 표준화: 모든 테이블이 SQLite 테이블로 구성되어 데이터 관리가 용이함.

        Hacker News 의견

     * Eidos Interactive와 관련 없음: 이 댓글은 Eidos Interactive와 관련이 없음을 명확히 하고 있음. Eidos Interactive는 14년 전에 Square Enix와 합병되었음.
     * Tiddlywiki 사용 경험: 여러 앱을 사용해봤지만 결국 Tiddlywiki로 돌아옴. 계층 구조가 없다는 점이 장점이자 단점이 될 수 있음. 커스터마이즈가 강점이며, 데이터와 프레젠테이션을 분리하면서도 통합할 수 있음.
     * Chrome 확장 프로그램 문제: 몇 가지 Chrome 확장 프로그램이 활성화되면 앱이 완전히 작동하지 않음. SQLite 기반 시스템이 단점일 수 있으며, 단순한 마크다운 파일을 선호함.
     * 오픈 소스 블록 기반 앱: 오픈 소스 블록 기반 앱을 주시해왔으며, 이 앱이 가장 완성도 높고 세련된 것 같음. SQLite가 중심에 있는 것이 마음에 들며, 간단한 인터페이스에 강력한 기능을 제공함.
     * 다양한 노트 작성 도구 사용 경험: 텍스트 파일, CherryTree, SimpleNotes 등 다양한 도구를 사용해왔으며, 현재는 텍스트/마크다운 + git + VS Code + Obsidian 등의 조합을 사용 중임.
     * 상표 문제: 이 이름에 대한 상표를 확인하는 것이 좋음. SQLite가 유망해 보이지만, 브라우저에서만 작동하는지 명확하지 않음.
     * Notion과 Obsidian 비교: Notion의 사용자지만 최근 Obsidian으로 전환 중임. Notion의 기본 ""Title"" 열이 불편하다고 생각함.
     * 데이터 동기화 문제: 브라우저 저장소가 신뢰할 수 없으며, 데이터가 동기화되거나 백업되지 않으면 안전하지 않다고 생각함.
     * 동기화 기능 질문: 설치 간의 동기화 기능이 있는지 궁금해함. SaaS/클라우드 접근 방식의 단점은 소유권 문제지만, 여러 장치에서 접근할 수 있는 장점이 있음.
     * Notion의 단점: Notion이 글쓰기에는 부드럽지 않다고 생각함. 마크다운 파일을 선호하며, Obsidian을 사용하지만 동시 편집 기능이 부족함. Google Docs와 Obsidian의 결합을 원함.
"
"https://news.hada.io/topic?id=15502","README Driven Developmentriven Development (2010)

     * README 주도 개발 : 소프트웨어 개발시 README를 먼저 작성하는 접근 방식
     * TDD, BDD, Extreme Programming, SCRUM 등의 다양한 개발 방법론과 기술에 대해 많이 듣게 됨
          + 하지만, 우리가 개발하는 소프트웨어가 사용자의 필요를 충족시키지 못하면 모든 것이 무의미함
          + 완벽한 구현이라도 잘못된 명세를 따르면 무가치하며, 문서화되지 않은 아름다운 라이브러리도 거의 무가치함
          + 소프트웨어가 잘못된 문제를 해결하거나 사용법을 알 수 없으면 심각한 문제 발생

해결책: README 부터 작성하기

     * Readme를 먼저 작성해야 하는 이유
          + 코드, 테스트, 스토리 등을 작성하기 전에 먼저 Readme부터 작성
          + Readme 작성은 좋은 소프트웨어를 만들기 위한 필수 단계
          + 소프트웨어에 대해 글로 작성하기 전까지는 무엇을 코딩할지 명확하지 않음
          + Readme를 통해 프로젝트를 체계적으로 생각할 수 있음
     * README 우선 작성의 이점:
          + 프로젝트를 체계적으로 생각할 기회:
               o 코드를 변경할 필요 없이 프로젝트를 체계적으로 생각할 수 있음
               o 코딩 전 프로젝트의 구조와 포함될 API를 고민할 수 있음
          + 우수한 문서 확보:
               o 프로젝트 초기에 높은 동기부여와 흥미를 가진 상태에서 문서를 작성할 수 있음
               o 나중에 Readme를 작성하는 것은 지루하고 중요한 세부 사항을 놓칠 수 있음
          + 팀 작업의 효율성 증가:
               o 팀의 다른 개발자들이 프로젝트 완성 전에 인터페이스에 대한 정보를 공유받아 다른 작업을 자신있게 시작할 수 있음
               o 명확한 인터페이스 없이 작업하면 대규모 코드 재작업이 필요할 수 있음
          + 구체적인 토론 기반 제공:
               o 텍스트로 제안된 해결책을 작성하는 간단한 행위로 모두가 명확한 아이디어를 가지고 논의할 수 있음
     * README 주도 개발(RDD)의 특징:
          + RDD는 Documentation Driven Development(DDD)의 하위 집합이나 제한된 버전으로 볼 수 있음
          + RDD는 단일 파일로 설계 문서를 제한하여 과도한 사양 작성의 문제를 방지함
          + 작은 모듈화된 라이브러리를 유지하도록 유도함

결론

     * Readme를 작성하는 과정을 진정한 ""창작 행위""로 생각할 것
     * 이 문서에 당신의 모든 기발한 아이디어가 표현되어야 하며, 문서 그 자체로 창의성과 표현력을 증명하는 증거가 되어야함
     * Readme는 코드베이스에서 가장 중요한 문서가 되어야 하며, 제일 먼저 작성하는 것이 올바른 접근 방식임

   소프트웨어든 소설이든 영화든 그 어떤 형태의 창작물을 만들 때에도
   종이 앞에 두고 설계와 기획을 하면서 만들면 좀 더 디테일한 것들을 쉽게 챙길 수 있지 않을까 싶습니다.. :)

   가장 기본적인 것을 그동안 잊고 살았는데 이제 실천해봐야 겠습니다.

   우리는 그것을 ""기본설계""라고 부르기로 했어요.

   의도치않게 제가 업무하는 방식과 맥락이 비슷하네요.
   그 부분이 ""README"" 형태로 산출되는 것 같네요.

   저는 일을할 때 What, Why, How 등을 명확히 작성하고 진행하면서 진행해야할 일에 대한 쉐입을 잡아가는 편인데 그와 비슷하네요

   README 주도 개발

   저는 연구 조직이라서 연구된 내용을 코드형태로 릴리즈하는 것에 고민이 많았는데, Readme 주도 개발이 저희에게 잘 맞을 것 같다는 생각이 드네요. 연구 시작 단계에서 부터 고민해볼만한 방식같아요.

   이와 비슷하게 백엔드할 때 화면보면서 API 문서부터 러프하게 써보곤 하는데,
   시행착오를 줄이는데 꽤 도움이 됐습니다.

   어찌보면 해결해야하는 문제를 먼저 정확하게 정의하는 것의 중요성처럼 느껴지는군요.

   2010년도 글인데 다른 글을 보다 발견해서 함 올려봅니다.
"
"https://news.hada.io/topic?id=15579","ECMAScript 2024 승인 : 새로운 기능은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ECMAScript 2024 승인 : 새로운 기능은?

  동기 iterable 그룹화

     * Map.groupBy()는 iterable의 항목을 콜백에서 제공한 키를 가진 Map 항목으로 그룹화
     * Object.groupBy()는 Map 대신 객체를 생성

  Promise.withResolvers()

     * resolve하려는 Promise를 생성하는 새로운 방법을 제공

  정규 표현식 플래그 /v

     * 새로운 정규 표현식 플래그 /v (.unicodeSets)는 다음 기능을 활성화함:
          + 유니코드 문자열 속성에 대한 이스케이프 (/u를 통한 유니코드 코드 포인트 속성 Emoji와 /v를 통한 새로운 유니코드 문자열 속성 RGI_Emoji)
          + 문자 클래스 내에서 \q{}를 통한 문자열 리터럴
          + 문자 클래스에 대한 집합 연산
          + [^···]를 통해 유니코드 속성 이스케이프가 부정될 때 /i로 개선된 매칭

  ArrayBuffer와 SharedArrayBuffer의 새로운 기능

     * ArrayBuffer:
          + 직접 크기 조정 가능
          + 전송을 위한 .transfer() 메서드 추가
     * SharedArrayBuffer:
          + 크기를 늘릴 수는 있지만 줄일 수는 없음
          + 전송 불가능하므로 ArrayBuffers가 가진 .transfer() 메서드는 없음

  문자열이 well-formed인지 확인

     * 두 가지 새로운 메서드로 문자열이 (UTF-16) well-formed인지 확인 가능:
          + String 메서드 .isWellFormed() 는 JavaScript 문자열이 well-formed이고 lone surrogate 를 포함하지 않는지 확인
          + String 메서드 .toWellFormed() 는 각 lone surrogate가 코드 단위 0xFFFD(""대체 문자""라는 이름의 동일한 숫자의 코드 포인트를 나타냄)로 대체된 수신자의 사본을 반환하므로 결과는 well-formed임

  Atomics.waitAsync()

     * Atomics.waitAsync()를 사용하면 공유 메모리 변경을 비동기적으로 기다릴 수 있음

ECMAScript 2024에 대한 무료 책

     * ""Exploring JavaScript (ES2024 Edition)""은 온라인에서 무료로 읽을 수 있음. 특히 관련 있는 두 챕터
          + ""History and evolution of JavaScript"": ECMAScript vs. JavaScript, TC39, TC39 프로세스, ECMAScript 제안 등
          + ""New JavaScript features"": 각 ECMAScript 버전의 새로운 기능은 무엇인가?
"
"https://news.hada.io/topic?id=15484","셸 스크립트에 적합한 훌륭한 언어, Ruby","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        셸 스크립트에 적합한 훌륭한 언어, Ruby

     * Ruby는 Rails 프레임워크와 주로 연관되어 있어서 이 언어의 뛰어난 점을 잊는 경우가 많음
     * Ruby는 매우 풍부하고 완성된 언어로, 특히 복잡한 쉘 스크립트를 작성할 때 유용함
     * 이 글의 목표
          + 쉘 스크립트를 작성할 때 유용한 Ruby의 기능을 보여주고, Bash 및 Python과 비교
          + Bash 스크립트를 Ruby 스크립트로 완전히 대체하는 것 아님

  기능 1: 외부 명령 호출

     * Ruby에서 외부 명령을 호출할 때 백틱(```)을 사용함.
     * 예를 들어, 백틱을 사용하면 외부 명령의 출력을 변수에 저장할 수 있음.
     * system 또는 popen을 사용할 수도 있음.
`ls`

     * 명령의 출력을 변수에 저장 가능.
my_date=`date`

  기능 2: 상태 코드

     * $? 변수를 사용하여 마지막 명령의 상태 코드를 확인 가능
     * Bash와 매우 유사함
`true`
puts $? # 0
`false`
puts $? # 1

  기능 3: 타입 언어

     * Ruby는 정적 타입 언어는 아니지만 타입을 가짐.
     * 객체 지향 언어로, 모든 것이 객체로 취급됨.
     * Bash와 달리 문자열 외의 타입을 안전하게 사용할 수 있음.
total_lines = `wc -l my_file`.to_i # 파일의 라인 수를 포함하는 정수
half = total_lines.div 2           # 정수 나누기
puts `head -n #{half} my_file`     # 파일의 절반을 출력함

  기능 4: 함수형 구성

     * Ruby는 map, select (필터), reduce, flat_map 등의 함수형 연산을 메서드로 구현함.
     * 명령 출력에 map을 적용할 수 있음.
puts `ls`.lines.map { |name| name.strip.length } # 파일 이름의 길이를 출력함

  기능 5: 정규 표현식 매칭

     * Ruby에서 정규 표현식은 타입으로, 정규 표현식을 사용하는 연산이 내장되어 있음.
     * 예를 들어, 현재 git 브랜치 이름을 가져오는 방법:
current_branch_regex = /^\* (\S+)/
output_lines = `git branch`.lines
output_lines.each do |line|
  if line =~ current_branch_regex # 문자열과 정규 표현식 매칭
    puts $1                       # 첫 번째 그룹의 매칭을 출력함
  end
end

  기능 6: 쉬운 스레드

     * Ruby는 여러 스레드를 다루기 매우 쉬움
     * 예를 들어, 여러 파일을 동시에 다운로드할 때 유용함
(1..10).map do |i|                       # 1부터 10까지 반복
  Thread.new do
    `wget http://my_site.com/file_#{i}`  # 명령 내에서 변수를 사용할 수 있음
  end
end.each { |thread| thread.join }        # do/end와 중괄호는 동일한 목적을 가짐

  기능 7: 내장 파일 및 디렉토리 작업

     * Ruby에서 모든 파일 연산은 File 클래스의 메서드, 디렉터리 연산은 Dir 클래스의 메서드로 제공됨.
     * Python과 달리 일관된 방식으로 파일과 디렉터리를 다룰 수 있음.
exists = File.exists? 'My File'           # 불리언을 반환하는 메서드는 '?'로 끝남
file_content = File.open('My File').read
File.delete 'My File'                     # 괄호는 모호하지 않으면 선택 사항임

  결론

     * 복잡한 쉘 스크립트를 대체할 때 Ruby를 고려할 것을 추천
     * 물론 Bash를 완전히 버리라는 것은 아니지만, 복잡한 작업에서는 Ruby가 더 나은 선택일 수 있음
     * Python, Perl, JS 등으로도 가능하지만, 개인적으로는 Ruby가 가장 완전하고 쉽게 사용할 수 있는 언어임

  GN⁺의 의견

     * Ruby는 객체 지향과 함수형 프로그래밍을 모두 지원하여 다양한 프로그래밍 스타일을 수용할 수 있음.
     * Python과 비교했을 때, Ruby는 더 엄격한 객체 지향 패러다임을 따름.
     * 쉘 스크립트 작성 시, 복잡도가 높아질수록 Ruby의 장점이 두드러짐.
     * Ruby의 스레드 처리 기능은 병렬 작업을 쉽게 구현할 수 있게 해줌.
     * 파일 및 디렉토리 작업이 직관적이고 일관성 있게 제공되어 생산성을 높임.

   스크립팅용으로 써도 괜찮겠네요 ㅎㅎ 버전은 모르지만 mac에도 기본 설치되어 있잖아요,,?!

   한때 애정했던 루비... 이런식으로라도(?) 많은 사랑을 받는 언어로 남으면 좋겠습니다.

        Hacker News 의견

     * Ruby는 Perl에서 많은 셸 스크립팅 기능을 상속받았고, 점진적으로 가독성을 높일 수 있는 옵션을 제공함.
     * binding.irb나 binding.pry를 사용하면 스크립트에서 인터랙티브하게 디버깅할 수 있음.
     * Pathname을 사용하면 File보다 자연스러운 API를 제공함.
     * 백틱(`)을 사용하면 간단한 셸 명령을 실행할 수 있지만, 더 복잡한 작업에는 Ruby의 표준 라이브러리를 활용할 수 있음.
     * Ruby의 스레드는 사용하기 쉬우며, Parallel을 사용하면 병렬 처리가 더욱 간편해짐.
     * MacOS에 기본 설치된 Ruby 2.6은 쓸만하지만, 최신 버전으로 업그레이드하는 것이 좋음.
     * Ruby는 훌륭한 언어지만, 편집기 지원이 Python에 비해 부족함.
     * 백틱(`)을 셸 명령 실행에 사용하는 것은 비효율적이며, OS에 따라 다르게 동작할 수 있음.
     * Ruby의 인라인 종속성 관리 기능은 매우 유용하며, Deno와 비슷한 기능을 제공함.
     * Ruby는 아름다운 코드 작성을 가능하게 하며, 작은 스크립트 작성에 적합함.
     * Ruby는 복잡한 자동화 스크립트 작성에 매우 유용하며, bash나 powershell보다 쉽게 작업할 수 있음.
     * Ruby는 대규모 레일즈 모놀리스를 사용하는 회사에서 여전히 많은 스크립팅과 도구 작성에 사용됨.
     * 인터넷에 접근할 수 없는 환경에서는 기본 배포판에 설치된 언어를 사용하는 것이 중요함.
     * Ruby는 셸 자동 완성 스크립트 작성에 유용하며, 빠르게 유틸리티를 만들 수 있음. Rails는 MVP 작성에 적합함.
"
"https://news.hada.io/topic?id=15593","TypeScript 5.5 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           TypeScript 5.5 릴리즈

     * Inferred Type Predicates: TypeScript가 특정 조건 하에서 함수가 Type Predicates를 반환한다고 추론할 수 있게 됨
     * Constant Indexed Accesses에 대한 제어 흐름 좁혀짐: obj와 key가 상수일 때 obj[key] 형식 표현식을 좁힐 수 있음
     * JSDoc @import 태그: 기존 import(...)보다 간편하게 타입만 가져올 수 있는 새 JSDoc 태그
     * 정규식 구문 검사: 정규식 리터럴의 구문 오류를 잡아주는 기능 추가
     * 새로운 ECMAScript Set 메서드 지원: union, intersection 등의 새 Set 메서드 타입 선언
     * Isolated Declarations : 선언(.d.ts) 파일 생성을 타입 검사 없이 개별 파일 단위로 처리할 수 있게 하는 옵션
     * Configuration 파일에 대한 ${configDir} 템플릿 변수: 설정파일에서 상대 경로 대신 사용할 수 있는 변수
     * package.json 종속성 참조: 선언 파일 생성 시 의존성 모듈 참조 오류 개선
     * 편집기 및 Watch-Mode 안정성 향상: 편집기에서 오류 갱신 등의 신뢰성 개선
     * 성능 및 크기 최적화: 언어 서비스, API, 제어 흐름 그래프 등 여러 측면의 성능 향상
     * ECMAScript 모듈에서 API 사용: import 문으로 typescript 패키지의 API 사용 가능
     * transpileDeclaration API: 선언 파일 생성을 위한 새 API
     * 주목할 만한 동작 변경 사항
          + TypeScript 5.0 에서 사용 중단된 기능 비활성화
          + lib.d.ts 변경으로 인한 타입 검사 영향
          + 데코레이터 구문 검사 강화
          + undefined 타입 별칭 허용 안함
          + 참조 지시문 선언 방출 단순화
"
"https://news.hada.io/topic?id=15476","혁신 영웅은 비기능적 조직의 징후","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           혁신 영웅은 비기능적 조직의 징후

왜 혁신 영웅은 비정상적인 조직의 징후인가

  조직 설계 문제

     * 대규모 조직의 기존 프로세스는 비표준 작업을 처리하도록 설계되지 않음.
     * 비표준 작업을 위한 자원이나 혁신을 책임지는 병렬 조직이 없음.
     * 조직 문화가 실험을 억제하고 학습 과정에서 발생하는 실패를 처벌함.

  혁신 교리

     * 평시나 시장 지배 상태에서는 프로세스, 절차, 기존 시스템 유지에 중점을 둠.
     * 위기나 전쟁 시에는 비전통적 사고와 혁신이 필요하며, 이를 신속하게 배포해야 함.
     * 성공적인 조직은 혁신과 실행이 모두 필요함을 인식하고, 이를 위한 전략적 프로세스를 갖추어야 함.

  교훈

     * 혁신 영웅은 혁신 교리가 부족한 조직의 증상임.
     * 혁신 교리는 혁신 리더의 역할을 설명하고, 새로운 능력을 신속하게 배포하는 데 중점을 둔 전략과 프로세스를 포함함.
     * 모든 대규모 조직은 혁신 교리가 필요하며, 그렇지 않으면 경쟁자에게 뒤처질 위험이 있음.

GN⁺의 의견

     * 혁신의 필요성: 혁신은 조직이 경쟁력을 유지하고 발전하기 위해 필수적임. 특히 빠르게 변화하는 기술 환경에서는 더욱 중요함.
     * 조직 문화의 중요성: 실험과 실패를 허용하는 조직 문화가 필요함. 이는 새로운 아이디어와 접근 방식을 시도하게 함.
     * 혁신 리더십: 혁신을 주도할 리더십이 필요함. 이들은 아이디어를 실현하고 조직 내에서 지지를 얻는 역할을 함.
     * 프로세스 개선: 혁신을 위한 명확한 프로세스와 자원이 필요함. 이는 혁신이 일관되게 이루어지도록 보장함.
     * 경쟁력 유지: 혁신 교리가 없는 조직은 경쟁자에게 뒤처질 위험이 있음. 지속적인 개선과 혁신이 필요함.

        Hacker News 의견

     * 첫 번째 의견: 팀이 칸반 방식을 사용하면서도 스프린트를 진행했음. 중간에 새로운 티켓을 열고 닫는 방식이 상위 관리자에게 불만을 샀지만, 결국 티켓 수를 두 배로 늘려 해결했음.
     * 두 번째 의견: 혁신적인 프로젝트는 대기업에서 잘 작동하지 않음. 직원들은 자신의 일에만 집중하고, 중간 관리자는 비표준 작업에 적대적임. 경영진은 스타트업을 인수하는 것을 선호함.
     * 세 번째 의견: 대기업에서 자동화 기회를 발견했지만, 자원과 시간 문제로 인해 자동화가 어려웠음. 수작업과 관료주의가 문제를 악화시킴.
     * 네 번째 의견: 경직된 관료주의는 혁신을 방해함. 대기업에서 혁신적인 일을 하고 싶다면, 작은 조직에서 일하는 것이 더 나음.
     * 다섯 번째 의견: 구글의 사례처럼, 새로운 제품을 출시해야 승진할 수 있는 시스템이 문제임. 많은 제품이 출시되지만, 대부분 실패함.
     * 여섯 번째 의견: 많은 조직에서 변화가 필요할 때 책임지는 사람이 없음. 혁신적인 사람들은 종종 조직에서 밀려남.
     * 일곱 번째 의견: 대기업은 자연스럽게 관성에 빠지며, 문화가 전략을 이김. 혁신적인 접근법을 시도하려면, 기존의 경직된 구조를 벗어나야 함.
     * 여덟 번째 의견: 자신의 작업을 자동화할 때는 비밀리에 진행하고, 결과를 즐기는 것이 좋음.
     * 아홉 번째 의견: 새로운 직원이 처음에는 기대를 모으지만, 시간이 지나면 평범해지거나 실망을 줌.
     * 열 번째 의견: 혁신적인 시스템 도입이 오히려 문제를 일으킬 수 있음. 개인적인 희생과 조직의 비효율성을 고려해야 함.
"
"https://news.hada.io/topic?id=15509","Windows 11이 사용자 허락 없이 OneDrive 폴더 백업을 자동으로 활성화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Windows 11이 사용자 허락 없이 OneDrive 폴더 백업을 자동으로 활성화

     * Microsoft가 Windows 11 사용자들을 약간 짜증나게 만들었음. 공지 없이 조용히 Windows 11 초기 설정을 변경하여 사용자 허락 없이 OneDrive 폴더 백업을 자동으로 켜게 만들었음.
     * 변경사항:
          + 인터넷에 연결되고 Microsoft 계정에 로그인된 새로운 Windows 컴퓨터 설정 시, 바탕화면, 사진, 문서, 음악, 비디오 폴더의 내용이 자동으로 OneDrive에 동기화됨.
          + 설치 직후 바탕화면 및 기타 폴더가 다양한 항목으로 가득 차게 될 수 있음.
     * 유용성 및 문제점:
          + 자동 폴더 백업 기능은 제대로 사용하면 매우 유용함. 그러나 Microsoft는 이를 알리지 않고 사용자 동의 없이 기능을 켜버림.
          + 이에 따라 Reddit에서는 파일과 바로 가기 옆에 초록색 체크표시가 나타나는 것에 대한 사용자 불만이 다수 올라옴.
     * 비활성화 방법:
          + 트레이 영역의 OneDrive 아이콘을 우클릭하고, 설정 아이콘을 클릭한 후 설정으로 이동함.
          + ""동기화 및 백업"" 탭에서 ""백업 관리""를 클릭함.
          + 백업하지 않을 폴더를 모두 끄고 변경 사항을 확인함.
          + 오래된 OneDrive 버전에서는 백업 탭에서 ""백업 관리"" > ""백업 중지"" > ""백업 중지""를 클릭함.
     * Microsoft의 과거 사례:
          + 몇 달 전, OneDrive를 종료하려면 이유를 설명해야 하는 변경사항이 있었으나, 이후 이를 철회함.
          + Edge 브라우저에서도 사용자가 Chrome을 다운로드할 때 이유를 묻는 유사한 사례가 있었음.
     * 대안:
          + OneDrive를 사용하지 않으려면 그냥 OneDrive를 삭제하는 것도 하나의 방법임.

   이 개새끼들이 선을 넘었다. 그동안 제한적으로 원드라이브를 사용해왔으나, 이제 아예 원드라이브 자체를 삭제할 것이다. 개호로새끼들

   맞아요 바탕화면 문서 사진 이거는 거의 디폴트로 하더라구요
   저는 윈도우 설치할때마다 항상 해제합니다

   이것이 글로벌 기업의 업무처리 방식인가 ㅋㅋ

   맥이 이제 게임만 잘 지원하면 윈도우 쓸 이유가 없겠네요.

   이거 윈10에서도 그랬었죠... 이거 켜져있는 상태로 원드라이브 용량 정리한답시고 동기화된 폴더 날려버린 기억이 ㅠㅠ

   항상 두렵죠. 파티션 날릴 떄 드라이브 확인하고 또 확인하듯이 해야.

   휴. 이 문제 때문에 잘 쓰고 있던 OneDrive를 완전히 껐습니다. KPI 높이려고 다른 모든 걸 무시하기로 했나봅니다.

        Hacker News 의견

     * 인터넷 속도가 느려서 확인해보니 마이크로소프트가 내 사용자 디렉토리를 업로드 중이었음. 경로 변경도 어려웠고, 오류도 발생함. MS 제품을 신뢰할 수 없게 됨.
     * 전 여자친구가 내 컴퓨터에서 Outlook에 로그인했더니 그녀의 작업 파일이 내 컴퓨터에 동기화됨. 헤어진 후에도 그녀의 파일이 계속 나타나서 기분이 나빴음. 비활성화 옵션을 찾는 데 3개월 걸림.
     * 왜 EU와 FTC가 번들링, 텔레메트리, 잠금, 나쁜 기본 설정 등에 대해 MS를 고소하지 않는지 의문임.
     * 기술 회사들이 사용자 동의 문제를 잘 처리하지 못함. ""아니오""를 받아들이지 않고 ""나중에""만 제공함.
     * MS 계정 대신 로컬 사용자 계정으로 로그인하면 OneDrive를 막을 수 있음. 하지만 매번 OS 업데이트 후 OneDrive를 다시 제거해야 함.
     * 윈도우 11이 왜 이렇게 불편한지 이해할 수 없음. 윈도우 10이 잘 작동했는데 왜 바꿨는지, 애플의 훌륭한 제품들과 경쟁해야 하는 상황에서 왜 이런 결정을 했는지 의문임.
     * 윈도우와 지메일을 버리고 리눅스와 맥을 사용하게 되어 만족함. 언젠가 다시 리눅스 데스크탑을 사용할 계획임.
     * 온라인 계정으로 윈도우 11(또는 10)을 설정할 이유를 찾지 못했음. 이런 문제들이 로컬 계정을 고수하는 결정을 강화함.
     * 윈도우의 목표가 무엇인지 이해할 수 없음. 사용자 활동을 추적하고 광고를 삽입하는 것 외에는 명확한 비전이 없어 보임. 리눅스는 이런 문제 없이 앱을 실행할 수 있음.
     * 허가 없이 시스템에서 문서를 복사하는 것은 많은 관할 구역에서 불법임.
"
"https://news.hada.io/topic?id=15558","HN에 공개: 인디 브라우저 기반 MMORPG 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN에 공개: 인디 브라우저 기반 MMORPG 개발

     * 요약할 수 없음

        Hacker News 의견

     * SMTP 이메일 제한: SMTP 이메일 제한에 도달하여 TCP 연결 관련 실패 발생. 내일 다시 확인 예정. 5000+ 성공적인 로그인 기록. 더 나은 SMTP 이메일 제공자 필요성 및 실패 시 전체 시스템 충돌 방지 방법 필요.
     * Genfanad 게임 개발: 몇 년 전 브라우저 기반 게임 Genfanad 개발. 유사한 기술 사용. 현재는 수익성 문제로 중단. 수익성 계획 여부 질문.
     * 대기 목록 문의: 서비스 재개 시 대기 목록 존재 여부 문의.
     * 비디오 및 스크린샷 요청: 파티를 놓친 사람들을 위해 비디오와 스크린샷 요청. Minecraft 초기 개발 커뮤니티 추천.
     * 부하 분산 제안: 부하 분산을 위해 다른 서버로 이동 제안.
     * 게임 플레이 경험: 모바일에서 게임 플레이 시도. iOS에서 핀치 줌 기능 문제 발생. 노트북에서 추가 확인 예정.
     * 2000-2005년 게임 회상: 2000-2005년 사이에 출시된 실험적이고 재미있는 온라인 콘텐츠를 떠올리게 함.
     * 캐릭터 이동 문제: 캐릭터 이동 방법 문의. 화살표, WASD, 클릭 모두 작동하지 않음.
     * RuneScape 영감: 클래식 RuneScape에서 영감을 받은 게임에 대한 사랑 표현.
     * 502 Bad Gateway 오류: HTTP/1.1 502 Bad Gateway 오류 발생. 서버: nginx/1.18.0 (Ubuntu).
"
"https://news.hada.io/topic?id=15460","할리우드와 게임이 AI와 싸우는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          할리우드와 게임이 AI와 싸우는 이유

     * AI가 엔터테인먼트와 게임 산업의 호황을 이끌 것으로 예상되지만, 현직자들은 생성형 AI를 실험하는 데 큰 마찰에 직면함
     * 하지만 이는 스타트업들이 엔터테인먼트와 게임을 혁신할 수 있는 기회를 제공함

대기업들이 AI를 적극적으로 수용하지 않는 이유

     * 잘 작동하는 것을 고치려 하지 않음
     * AI를 처음부터 도입하기보다는 기능으로 ""덧붙이려는"" 욕구
     * 지적 재산권 소유권에 대한 법적 반발
     * 크리에이터/디자이너들의 반발
     * AI 엔지니어 고용의 어려움

타이밍의 역할

     * 게임 산업은 M&A로 인한 변화와 구조조정으로 인한 감원 등 변혁의 시기를 겪고 있음
     * 할리우드도 마찬가지로 영화 시장이 정체/축소되면서 스트리밍으로 전환되고 있음
     * 이런 시기에 누가 위험을 감수하고 획기적인 새로운 장르에 투자하려 할까?

법적 장벽

     * AI 모델들은 ""공공 도메인""으로 추정되는 방대한 양의 텍스트/이미지/비디오/3D 자산으로 학습되는데, 저작권이 있는 콘텐츠가 포함될 수 있음
     * 스타트업들은 이런 위험을 무릅쓰고 제품/시장 적합성을 먼저 검증하는 경향이 있음
     * 데이터를 AI 회사와 공유하는 것을 꺼리는 기업들도 있음

크리에이터들의 반발

     * 게임/엔터테인먼트 회사의 IP는 크리에이터들에 의해 만들어짐
     * 이들 중 많은 이들이 AI 모델이 다른 사람들의 작품으로 만들어진다는 사실을 받아들이기 어려워함
     * SAG-AFTRA 파업 등 AI에 대한 반발 사례가 있음
     * 하지만 크리에이터들이 더 나은 도구로 역량을 강화하면 수요가 늘어날 수 있음

엔지니어 고용의 어려움

     * 최고 수준의 AI 연구원은 연봉이 수백만 달러에 달함
     * 높은 연봉을 지불하거나 지분 인센티브를 제공할 수 있는 기술 기업들에게도 어려운 일임
     * 기성 기업들은 이런 인재 유치에 더 큰 어려움을 겪음

희망적인 메시지: $1000의 블록버스터 영화

     * AI는 크리에이티브 산업에 큰 기회를 제공할 수 있음
     * 오늘날 영화, 게임, TV 시리즈를 만드는 데는 수백만 달러와 수백 명의 사람들이 필요함
     * 하지만 책을 쓰는 데는 노트북, 커피, 시간만 있으면 됨
     * 만약 누구나 노트북과 커피만으로 블록버스터급 영화를 만들 수 있다면?
     * 이는 YouTube, Instagram 등 UGC 플랫폼이 유통을 민주화한 것과 같은 맥락
     * 모든 현직 엔터테인먼트/게임 기업이 성공할 수 있는 것은 아님
     * 하지만 신생 기업들이 엔터테인먼트를 혁신하고 소비자들은 혜택을 볼 것
"
"https://news.hada.io/topic?id=15559","Ducker - 도커 컨테이너 관리용 터미널 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ducker - 도커 컨테이너 관리용 터미널 앱

   Ducker라는 도구를 보게 되었는데, 터미널에서 컨테이너들을 직관적으로 관리하기 좋아 보입니다.
"
"https://news.hada.io/topic?id=15572","차세대 3D 금속 프린팅 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            차세대 3D 금속 프린팅 기술

혁신적인 액체 냉각: Asetek이 Computex에서 AI 최적화 냉각판 공개

     * Asetek: 액체 냉각 기술을 혁신하는 회사로, AI 최적화된 냉각판을 Computex에서 공개함.
     * AI 최적화: 인공지능을 활용해 냉각 효율을 극대화한 기술임.
     * Computex: 세계 최대의 컴퓨터 및 기술 전시회 중 하나로, 최신 기술과 제품을 선보이는 중요한 행사임.

샌디에고 스타트업, 3D 프린팅 공장 건설로 인력 세 배 증가

     * 샌디에고 스타트업: 3D 프린팅 공장을 새로 건설해 인력을 거의 세 배로 늘릴 계획임.
     * 3D 프린팅: 다양한 산업에서 활용되는 기술로, 빠르고 효율적인 제조가 가능함.
     * 인력 증가: 공장 건설로 인해 새로운 일자리 창출이 기대됨.

벤처 투자자들이 3D 프린팅 스타트업에 자본을 투입하는 이유

     * 벤처 투자: 3D 프린팅 스타트업에 대한 투자 증가 추세임.
     * 투자 이유: 3D 프린팅 기술의 성장 가능성과 혁신성 때문임.
     * 미래 전망: 다양한 산업에서 3D 프린팅 기술의 수요가 증가할 것으로 예상됨.

Fabric8Labs, 전기화학적 적층 제조 기술을 위한 5000만 달러 시리즈 B 자금 조달 완료

     * Fabric8Labs: 전기화학적 적층 제조 기술을 개발하는 회사임.
     * 시리즈 B 자금 조달: 5000만 달러를 조달해 기술 개발과 확장을 계획함.
     * 전기화학적 적층 제조: 전기화학 반응을 이용해 금속을 적층하는 혁신적인 제조 기술임.

GN⁺의 의견

     * AI와 냉각 기술: AI를 활용한 냉각 기술은 데이터 센터와 고성능 컴퓨팅 환경에서 에너지 효율성을 크게 향상시킬 수 있음.
     * 3D 프린팅의 성장: 3D 프린팅 기술은 제조업의 패러다임을 바꾸고 있으며, 특히 맞춤형 제품 생산에 강점이 있음.
     * 벤처 투자: 3D 프린팅 스타트업에 대한 벤처 투자는 기술 혁신과 시장 확대를 가속화할 수 있음.
     * 전기화학적 적층 제조: Fabric8Labs의 기술은 기존 제조 공정보다 환경 친화적이고 비용 효율적일 수 있음.
     * 기술 도입 고려사항: 새로운 기술 도입 시 초기 비용과 기술 숙련도, 유지 보수 등을 고려해야 함.

        Hacker News 의견

     * Electrochemical 3D 프린팅: 전기화학적 3D 프린팅은 매우 정밀하지만 느릴 수 있음. 이 기술은 빠르게 작동할 수 있으며, 재료 선택이 제한적임.
     * 비디오 참고: 전기 도금 아이디어는 흥미롭지만, 화학 공학이나 재료 과학에 대한 지식이 부족함. 전기 도금은 매우 느릴 것 같음.
     * Fabric8 CTO: Fabric8의 CTO가 기술이나 회사에 대한 질문에 답변할 준비가 되어 있음. 이 기술은 다른 금속 적층 제조 기술과 다름.
     * 금속 3D 프린터 경험자: 금속 3D 프린터는 고온과 불활성 가스가 필요함. 정확도가 인상적이며, 작은 크기의 3D 장기 프린팅 가능성도 있음.
     * 2016년 실험: 2016년에 유사한 실험을 했으나 성공하지 못함. 마이크로 전극 배열 프린트헤드가 병렬화 가능성을 제공함.
     * 전단력 문제: 현재 금속 3D 프린팅은 전단력에 약함. 이 기술이 더 나은지 궁금함.
     * ServeTheHome 기사: 작년에 ServeTheHome에서 관련 기사가 있었음.
     * Fabric8Labs와 Desktop Metal 비교: Fabric8Labs의 제품이 Desktop Metal과 어떻게 다른지 궁금함. 텅스텐 프린팅이 특히 놀라움.
     * Roselle St: Roselle St는 샌디에이고에서 가장 혁신적인 거리로, 많은 훌륭한 회사들이 이곳에서 나옴.
     * 나노 파이프 히트싱크: 3D 프린팅된 나노 파이프 히트싱크에 대한 기대감.
"
"https://news.hada.io/topic?id=15513","1인 개발자로서 어떻게 체계적으로 관리하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       1인 개발자로서 어떻게 체계적으로 관리하시나요?

     * 팀과 함께 일할 때는 스크럼과 같은 단기 목표와 체계적인 작업 백로그가 집중력을 유지하고 해야 할 일을 추적하는 데 정말 도움이 되었음
     * 하지만 혼자 개발할 때는 제대로 된 접근 방식을 찾지 못했고, 종종 옆길로 빠져 목표를 잃어버리곤 했음
     * 여러분은 목표에 충실하기 위해 어떤 도구와 기법을 사용하시나요?

CharlieDigital

     * 종이 노트북 사용
     * 정보를 공유할 필요가 없을 때는 모든 아이디어를 펼쳐놓고 반복해서 확인하는 데 노트북만큼 좋은 것이 없음. 로그인할 필요도 없고, 어디든 가지고 다니며 벤치에 앉아 아이디어를 떠올리고, 헬스장에 가서 아이디어를 적어보세요.
     * 매일의 목표를 체크리스트에 적어두고 하나씩 체크해 나가면 됨. 다른 사람과 상태를 공유할 필요가 없으니 GitHub 프로젝트 같은 것도 필요 없음

olooney

     * TODO.md 파일을 사용
     * GFM(GitHub flavored markdown)으로 다음과 같이 리스트를 작성
  1. [X] Dockerfile
  2. [ ] Bulk Inference
  3. [ ] CLI
  4. [ ] Logging

     * 향후 아이디어를 위한 '백로그'라는 섹션, 수정할 버그를 위한 '버그' 섹션, 현재 항목이 있는 이름 없는 섹션을 맨 위에 작성
     * 릴리즈와 같은 마일스톤에 도달하면 완료된 모든 항목을 삭제

jasonb05

     * 미래의 나에게 많은 글을 작성함
         1. 주, 월, 분기, 연도별 열이 있는 Trello
         2. 마우스 옆에 둔 노트북 열기
            2a. 왼쪽 페이지: 펜과 종이로 일일 할 일 체크리스트. (하루에 2~3줄)
            2b. 오른쪽 페이지: 스크래치, 플롯 스케치, 스티커 메모 등
         3. 리서치, URL, 논문, 생각, 아이디어, 진행 상황, 확장 기능 등을 기록하는 개발 일지
          + 모든 깃허브 프로젝트에는 이러한 메모를 위한 dev/ 폴더가 있으며, 파일명은 yyyymmmdd-n.txt
          + 필요에 따라 매일 프로젝트당 새 파일을 작성
         4. 임시 아이디어를 위한 노란색 스티커 메모(화면 하단, 노트북 또는 화이트보드에 붙임)
          + 일반적으로 프로젝트의 올바른 방향을 제시하는 격언(예: ""아무도 결코 rtfm하지 않을 것"")
         5. 화이트보드, 프로젝트별 열, 인쇄물 + 자석(프로젝트 진행 상황 월별 도표), 스티커 메모, 향후 프로젝트를 위한 아이디어, 각종 물건들
     * 나는 미래의 제 자신과 과도하게 소통하려고 노력함
          + 기대치, 진행 상황, 장애물 등 현재 내 생각을 정리하는 데 도움이 됨
          + 내가 장애물이지 작업이 아님
          + 작업은 일반적으로 '열심히 생각'한 후에 숫자로 그려짐
     * 8년 동안 혼자서 이렇게 일하고 있음
          + 00년 초 박사 과정 시절부터 실시간 개발 일지를 위해 /dev dir 및 .txt 파일을 사용해 왔음. 수없이 많은 시간을 절약할 수 있었음(grep).
     * 아, 그리고 매일 같은 일을 함. 거의 매일
          + 예를 들어 고객 지원, 홍보, 글쓰기, 코딩, 그리고.... 생각할 필요 없이, 해당 작업만 하고 다음 일을 함

liampulles

     * 사이드 프로젝트 진행시에는 ""Readme 주도 개발""이 동기를 부여하고 스코프를 제한하는데 도움이 됨

Tehnix

     * 일일/주간/월간 목표를 세우고, Linear, Todoist, Notion 등의 앱으로 이를 체계화
     * 월별 목표는 매우 높은 수준이고 몇 개 정도임(예: ""PoC 만들기"", ""블로그 재설계 및 재출시"")
     * 주간 목표는 보다 구체적이고 제한적(예: ""Swift 코드에서 Rust를 호출하기 위한 접근 방식 결정"" 또는 ""게시물의 디자인 및 스타일링 완료"")
     * 일일 목표는 매우 구체적(예: ""Swift 바인딩을 생성하기 위해 UniFFI 파이프라인 설정"" 또는 ""블로그 페이지 전체에 새 테마 구현"")
     * 때로는 구현 중에 새로운 일이 생겨서 일일 목표를 다음 날로 미루기도 함
     * 지금까지는 이 방법이 집중력을 높이는 데 효과적이었고, 여러 프로젝트에서 진행 중인 많은 작업/이슈 목록에서 주간 중점 사항을 기준으로 일일 목표를 선택
     * 진행중인 각 작업을 프로젝트로 설정하고, 작업을 추가할 때 즉시 우선순위를 지정해 놓으면 진행 중이거나 앞으로 하고 싶은 크고 작은 프로젝트를 쉽게 한눈에 파악할 수 있음
     * 종이를 좋아하긴 하지만 일시적인 일에만 사용할 수 있음. 이동 중에 아이디어가 떠오를 때 휴대폰으로 쉽게 추가할 수 있는 디지털 방식을 선호. 또한 키보드로 글을 쓰는 것이 훨씬 더 빠르며, 작업을 하거나 무언가를 조사하는 동안 다양한 작업을 정보 저장소로 활용

OogieM

     * Obsidian Vault 안에 각각 폴더로 관리
     * 폴더에는 비슷한 공통 요소가 들어 있음
          + 화면 구조(각 화면에 어떤 기능이나 활동이 있는지)를 위해 칸반 플러그인을 사용한 칸반 노트
          + 각각의 기능에 대한 세부 사항이 담긴 로드맵 노트
          + 해당 앱이나 구성 요소에 대한 다양한 작업이 포함된 일반 노트
     * 작업 플러그인을 사용해 구체적으로 작업 중인 내용을 추적
          + 이 폴더에는 특정 앱과 관련된 스크린샷, 참고 자료, 기타 노트와 같은 추가 문서가 들어 있음
     * 내 프로젝트는 가축과 희귀 품종 등록을 관리하는 프로그램 모음임
          + 그래서 Farm Mobile(Android), Farm Desktop(Python), 레지스트리 웹(Flask) 및 레지스트리 데스크톱(Python) 앱과 데이터베이스 스키마(SQLite)를 모두 별도의 GitLab 리포지토리로 가지고 있음
     * 이제 3명의 공동 작업자가 추가되어 Obsidian Sync를 통해 Obsidian Vault를 공유. 솔로 시스템이 팀워크를 처리할 수 있도록 확장되었음

robomartin

     * 수년간 칸반에서 영감을 받은 간단한 텍스트 파일을 사용중
     * 소규모 프로젝트부터 수백만 달러 규모의 프로젝트까지 이 방식으로 모든 것을 관리
     * 각 프로젝트에는 메인 로그 파일이 있고, 분야마다 고유한 파일(전자, 기계, 광학, 제조, 테스트 등)이 있음
     * 파일의 내용
<프로젝트 이름> 로그 파일
-------------------------------- WORKING ON NOW
<작업 중인 작업>

-------------------------------- TO DO
- <대시로 각 작업 시작>
  - <관련 하위 작업 또는 노트 들여쓰기>

-------------------------------- IDEAS
<자유 형식 노트>

-------------------------------- RESOURCES
<자유 형식 리소스>

-------------------------------- DONE
<완료된 내용을 이 섹션으로 이동>
<원하는 경우 타임스탬프 남김>

kkfx

     * Emacs/org-mode/org-roam 으로 관리
     * 현재 연도 노트의 org-agenda, 노트는 하루에 한 파일씩, 1년에 한 디렉터리씩 공통 org-roam 디렉터리에 시간 단위로 파일로 나눔
     * 이렇게 하면 org-agenda가 이동해야 하는 파일의 양이 줄어들고, 연도별 요약 노트에서 한 해에서 다른 해로 넘어가는 장기 실행 자료가 줄어듦

makz

     * 퇴근하기 전에 코드에 댓글을 남김: ""지금 이 작업을 하고 있는데, 작동하려면 A, B, C...를 해야 함""
     * 다음에 코드 편집기를 열면 무엇을 해야 할지 정확히 알 수 있음

qntmfred

     * Obsidian Daily Note에 데일리 루틴 템플릿이 있음. 그날에 대해 집중하고 설레게 만듦
     * 매일 내 자신에게 주는 첫 번째 [X]는 일일 루틴 체크리스트를 완성하는 것
          + 생산적인 하루를 시작하기 위한 공짜 W
     * 실제로 대부분의 메모를 Windows 음성 타이핑을 사용해 작성하기 때문에 데일리 스탠드업을 하는 것과 비슷
     * 또한 하루 종일 라이브 스트리밍을 하는 경우가 많기 때문에 시청자가 나 혼자뿐이더라도(물론 개인 라이브 스트리밍이기 때문에 매일 하는 것이지만, 내가 어떤 토끼굴에서 길을 잃기 전에 약 20분 전에 무엇을 하고 있었는지/생각하고 있었는지 상기시켜야 할 때를 대비해 하는 것. 사실 Windows 리콜도 좋음)
     * 내 하루는 2인 이상의 조직에서 다른 사람들과 함께 일(일명 회의)할 때와 비슷하게 진행됨

mentos

     * Done/Doing/ToDo 세 가지 목록이 있는 Trello 보드
          + 해야 할 모든 일의 목록을 작성
          + 우선순위를 정하기
          + 맨 위에 있는 항목을 할 일 목록으로 옮기고 작업을 시작
          + 완료되면 완료로 옮김. 다음 항목을 할 일 목록에서 빼고 반복
     * 나는 트렐로의 다른 목록을 사용해 리서치 카드를 관리하거나 v1에 필요하지 않은 기능을 ToDo 목록에서 제거함

macNchz

     * 소규모 팀과 함께 일하는 방식과 비슷하게 일하는 것을 좋아함
          + 많은 항목이 포함된 체크리스트가 마일스톤으로 느슨하게 정리된 깃허브 이슈를 관리
               o 코드에 가깝기 때문에 줄 번호 링크, 복사 붙여넣기 코드 블록 또는 링크된 PR 초안으로 쉽게 메모를 작성하여 잠시 중단한 부분을 기억할 수 있음
               o 어떤 기기에서든 액세스하기가 매우 쉬워서 아이디어가 떠오르거나 버그에 대한 이메일을 받으면 휴대폰이나 개발 기기가 아닌 다른 기기에서 즉석에서 이슈를 빠르게 만들 수 있음
               o 적절한 시점에 다른 사람을 불러서 바로 작업하도록 하는 것도 간단
               o 좋은 API와 다양한 통합 기능(예: 오류 추적 시스템에서 직접 이슈를 만들거나 링크하는 기능)이 있음

rerdavies

     * 깃허브 프로젝트를 사용
          + 특별히 추천하고 싶지는 않음
          + 하지만 작업 목록과 버그를 관리하는 것은 사실 로켓 사이언스는 아님
          + 수십만 달러가 드는 프로젝트 관리 솔루션을 사용해봤는데, 그보다 훨씬 더 형편없었음
     * Github 프로젝트는 이상하게 동작 하고 사랑받지 못하더라도 최소한의 기능만으로는 충분
          + 자동화할 수 있을 거라고 생각하는 많은 것들이 있음
               o 스크럼 보드의 모든 쿼리를 수동으로 수정할 필요 없이 클릭 몇 번으로 새 스프린트로 롤오버하는 것과 같은 것들
          + 하지만 당신이 하고 싶은 일을 할 수 있음
               o 다른 사람이 정해놓은 프로세스에 따라 유연하지 못한 상태로 살아가는 것보다는 훨씬 나음
               o 어떤 면에서는 미니멀리즘이 장점일 수도
     * 심적으로는 , 이것은 목록 관리 문제. 그리 복잡하지도 않음. 그리고 깃허브 프로젝트는 목록을 완벽하게 잘 관리함
     * 종이 기반 또는 카드 기반 작업 목록보다 Github 프로젝트를 추천하는 한 가지 이유는
          + 버그 리포트와 기능 요청이 어떻게 처리되고 있는지 사용자에게 공개적으로 볼 수 있다는 점
          + 또한 토론 게시판에 올라온 내용을 버그 리포트로 전환하거나 개발 작업(지연 또는 활성)으로 전환하는 것이 매우 쉬움
     * 일반적인 스크럼 규칙이 적용됨. 모든 버그는 새 작업을 하기 전에 수정되고, 작업은 완전히 완료된 경우에만 완료 상태로 전환
     * 당신에겐 목록이 필요함. 나는 작업들의 위쪽에 스프린트 구조가 중간 업데이트와 지속적인 릴리스에 유용한 마일스톤을 제공하기 때문에 이를 좋아함

leros

     * 나는 제품 관리자, 프로젝트 관리자, 소프트웨어 개발자, 마케팅, 비즈니스 운영, 전체 비즈니스 리더 등의 역할을 구분하여 한 번에 하나씩만 수행함
     * 예를 들어,
          + 전체 비즈니스 리더로 앉아 제가 원하는 전략적 방향을 결정할 수 있음
          + 그런 다음 제품 관리자의 모자를 쓰고 무엇을 구축할지 결정
          + 그런 다음 그 아이디어를 프로젝트 관리하고 우선순위를 정함
          + 그런 다음 제품 관리자/디자이너가 되어 우선순위를 정한 기능을 구체화
          + 그런 다음 완전히 따로 시간을 내서(보통은 하루 종일) 기능을 개발
          + 기능이 출시되면 마케팅 모자를 쓰고 관련 제품 마케팅을 진행
          + 이것이 하나의 기능을 개발하는 일종의 라이프사이클
     * 위험한 것은 한 번에 모든 역할을 뛰어넘는것. 생산성이 떨어질 수 있음
     * 전략적이어야 할 때, 창의적이어야 할 때, 그냥 실행해야 할 때가 있고, 이러한 작업에는 각기 다른 머리 공간이 필요함
     * 나는 Notion에서 모든 계획을 세우면서 목적에 따라 몇 가지 다른 칸반 보드를 사용

urda

     * 나는 계단식 '지식' 시스템을 사용함:
          + 포켓용 몰스킨 노트에 무작위로 떠오르는 생각, 메모, 스크랩, 다이어그램 등을 기록
          + 이것은 결국 이슈 트래커에서 '티켓'이 되거나 제 위키 서버에서 '위키' 또는 '위키 업데이트'가 됨
          + 이는 결국 스니펫, 구성 노트, 기록 문서, 기록 보관, 런북 등으로 이어짐
     * 결국에는 문서를 최신 상태로 유지하거나 이슈가 발견되면 올바른 백로그에 넣는 것이 '자연스러운' 일이 되었음

   저는 어떤 것이든 자신에게 루틴화 하는 게 편한 방법이 최고라고 생각합니다. 다른 준비작업이 많아서 관리 문서를 열고 시작하는게 오래 걸리고 귀찮아 진다면 점점 멀어지게 되거든요. 책상 치우고 난 뒤에 어딘가 넣어둔 노트북을 꺼내서 펼치는 것 자체도 일처럼 느껴지니까요.

   그런 점에서 전 집과 회사 컴터에 VS Code가 거의 켜져 있어서, 그 위에 띄워둔 ""할일.txt""에 내용을 적고 지우고 하는 게 매일 일과입니다. 뭘 띄워야 할지 생각 안하고 루틴화 되어서 좋은 것 같아요. 내용은 GitHub Private Repo로 동기화 합니다.

   저는 구글 스프레드 시트에 프로젝트 할 일을 30분에서 한 시간 단위로 쪼개서 전부 적어 놓고 완료까지 든 시간을 적습니다. 예측하기 좋고 하나씩 클리어하는 기분도 들고요.

   저는 trello를 주로 쓰는거 같네요 리스트업해놓고 디스크립션 정리하고...
   어디서든 접근 가능해서...

   전 디스코드에 개인 서버 만들어서 카테고리/채널로 분류하고 TODO 등의 개인 용도로 사용합니다.

   여러 가지 방법을 시도해 봤지만, 아직 하나의 방법으로 정착하지 못했습니다. 현재는 메모를 Obsidian에서 하고 있으며, 실무는 리갈패드에 필요할 때마다 적고 있습니다.
   이 또한, 휘발성 기억을 대체하기 위한 메모라서 그런지 시간이 지나면 무엇을 메모했는지 잊어버리는 경우가 많은것 같아요..
   이 글을 참고해서 체계를 다시 잡아봐야겠습니다..

   꼭 1인 개발을 하는 것이 아니더라도 범용적인 동기나 계획 관리에 유용한 내용들이네요!
"
"https://news.hada.io/topic?id=15540","Postgres 메모리 설정을 최대한 활용하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Postgres 메모리 설정을 최대한 활용하는 방법

     * Postgres 데이터베이스는 많은 양의 RAM을 사용함. 결과 집합을 만들 때 인덱스 매칭, 테이블에서 관련 행 검색, 튜플 병합/필터링/집계/정렬 등의 단계를 거치며, 이 모든 단계에서 메모리에 의존
     * Postgres의 메모리 사용량을 최적화하기 위해서는 사용 가능한 RAM을 최대한 활용하면서도, 다양한 유형의 메모리 할당을 효율적으로 조정하고, OS가 과도한 메모리 사용으로 프로세스를 종료시키는 것을 방지해야 함

  Sharing is Caring

     * Postgres와 관련된 RAM의 가장 큰 부분은 shared_buffers라고 불리며, 가장 자주 검색되는 모든 테이블과 인덱스의 행을 나타냄. 사용 빈도에 따라 점수를 매기는 휴리스틱에 의해 지원됨
          + shared_buffers는 Postgres 시작 시 할당되는 고정값이며, 예기치 않은 메모리 문제에 기여하지 않음
          + 기본값은 128MB
          + 하지만 OS는 이를 사전에 할당된 메모리로 간주하지 않을 수 있으므로, 인스턴스의 RAM 양까지 매우 높은 값을 지정하면 위험할 수 있음
     * 프로덕션 시스템에서 shared_buffers의 가장 일반적인 권장 값은 사용 가능한 RAM의 25%임. 이는 하드웨어에 맞게 조정되므로 대부분의 시스템에 적합한 시작점임
          + 벤치마크 결과, 25% 조언이 일반적으로 충분하지만 데이터베이스 사용 방식에 따라 달라질 수 있음
          + 예를 들어 리포팅 시스템은 복잡한 임시 쿼리로 인해 캐시 적중률이 낮아 오히려 더 낮은 설정에서 약간 더 나은 성능을 보임
     * pg_buffercache 확장을 사용하면 공유 버퍼에 할당된 테이블과 인덱스를 정확히 파악할 수 있음. 버퍼의 사용된 페이지 수를 확인하여 shared_buffers 값을 조정 가능
          + 버퍼 캐시가 100% 활용되지 않으면 설정이 너무 높을 수 있으므로 인스턴스 크기나 shared_buffers 값을 줄일 수 있음
          + 100%이고 많은 테이블의 일부만 캐시된 경우, 수익 체감이 있을 때까지 순차적으로 높은 값을 지정하는 것이 유리할 수 있음
     * Postgres 16의 새로운 pg_stat_io 뷰도 shared_buffers 조정에 도움이 될 수 있음. 적중률과 클라이언트 백엔드 읽기/쓰기를 확인할 수 있음
          + 읽기 대 쓰기 비율이 1에 가까우면 Postgres가 동일한 페이지를 shared_buffers에서 계속 순환시키고 있음을 나타낼 수 있음. 이런 스레싱을 줄이기 위해 shared_buffers를 늘리는 것이 좋음
     * 시스템 RAM의 50%를 넘어가기 시작하면 인스턴스 크기를 늘리는 것을 고려해야 함. Postgres는 사용자 세션 및 관련 쿼리에 대한 메모리도 여전히 필요하기 때문임

  Working Memory

     * Postgres가 실제로 작업을 수행하는 데 사용하는 메모리의 다른 절반은 work_mem이라는 매개변수로 제어되는 작업 메모리에 해당함
          + 기본값은 4MB이며, 사용자가 쿼리 실행 속도를 높이기 위해 가장 먼저 수정할 수 있는 값 중 하나임
          + 하지만 ""메모리 부족"" 메시지로 인해 OS가 Postgres를 종료하는 경우 work_mem를 늘리고 싶을 수 있지만, 이는 문제를 악화시킬 뿐임. Postgres가 사용하는 RAM 양을 증가시켜 이러한 종료에 직면할 가능성이 더 높아짐
     * 많은 사람들이 ""작업 메모리""를 Postgres가 쿼리에서 작업을 수행하는 동안 수행할 수 있는 모든 작업에 할당된 단일 할당으로 해석하지만, 실제로는 그 이상이 될 수 있음
          + 각 단계(노드)는 work_mem의 별도 인스턴스가 할당됨. 예를 들어 work_mem 기본값인 4MB를 사용하는 경우 4개의 노드가 필요한 쿼리는 최대 16MB의 RAM을 소비할 수 있음
          + 보통 바쁜 서버에서 이러한 쿼리가 100개 동시에 실행되는 경우 결과 계산에만 최대 1.6GB의 RAM을 사용할 수 있음. 더 복잡한 쿼리는 쿼리 실행에 필요한 노드 수에 따라 더 많은 RAM이 필요할 수 있음
     * EXPLAIN 명령을 사용하여 쿼리의 실행 계획을 확인하면, Postgres가 쿼리를 실행하는 방법과 출력을 생성하는 데 필요한 모든 노드를 보여줌
          + pg_stat_statements 확장과 함께 사용하면 가장 활성화된 쿼리를 분리하고 work_mem로 인한 전체 메모리 사용량을 추정할 수 있음
     * work_mem가 너무 낮게 설정되면 RAM에 맞지 않는 행이나 중간 결과는 디스크로 넘치게 되어 훨씬 느려짐
          + pg_stat_database 뷰를 확인하여 디스크에 기록된 모든 임시 파일의 누적 크기와 수를 확인하고, 평균 크기가 적절하면 work_mem를 이 양만큼 늘릴 수 있음
     * 세션당 사용 가능한 RAM 양을 대략적으로 알려면 다음 공식을 사용: (전체 RAM의 80% - shared_buffers) / (max_connections)
          + 예를 들어 16GB RAM, 4GB 공유 버퍼, 100개 최대 연결이 있는 경우 세션당 약 88MB를 사용할 수 있음
          + 이 값을 쿼리 계획 노드의 평균 수로 나누어 work_mem에 대한 좋은 설정을 얻을 수 있음

  Ongoing Maintenance

     * Postgres RAM 사용량에 대한 튜닝 가능한 마지막 부분은 작업 메모리와 유사하지만 특히 유지 관리와 관련이 있으며, maintenance_work_mem라는 유사한 매개변수 이름을 가짐
          + 기본값은 64MB이며, VACUUM, CREATE INDEX, ALTER TABLE ADD FOREIGN KEY와 같은 작업을 수행하는 데 전용되는 RAM 양을 지정함
     * 세션당 하나의 작업으로 제한되고 많은 동시 작업이 발생할 가능성이 낮기 때문에 더 높은 값을 사용하는 것이 충분히 안전한 것으로 간주됨
          + 이러한 유지 관리 작업은 메모리를 매우 많이 사용할 수 있으며 RAM에서 전적으로 작동할 수 있다면 훨씬 더 빠르게 완료될 수 있으므로, 1GB 또는 2GB까지 설정하는 것이 매우 일반적임
     * 중요한 주의사항은 나중에 재사용하기 위해 죽은 튜플을 표시하는 Postgres 자동 청소(autovacuum) 프로세스임
          + 자동 청소는 autovacuum_max_workers 제한까지 백그라운드 작업을 시작하며, 각각 maintenance_work_mem의 전체 인스턴스를 사용할 수 있음
          + 대부분의 여유 RAM이 있는 서버는 1GB의 유지 관리 작업 메모리로 안전하지만, RAM이 부족한 경우 더 신중해야 함
          + 특히 자동 청소 작업자를 제한하려면 autovacuum_work_mem 매개변수가 별도로 있음
          + Postgres 자동 청소 작업자는 1GB 이상 사용할 수 없으므로 autovacuum_work_mem을 이 값 이상으로 구성해도 효과가 없음

  Session Pooling

     * 메모리 소비를 줄이는 가장 쉬운 방법은 잠재적 할당에 논리적 제한을 두는 것임
          + Postgres는 현재 프로세스 기반 엔진이므로 모든 사용자 세션에 스레드가 아닌 물리적 프로세스가 할당됨
          + 따라서 모든 연결에는 특정 RAM 오버헤드가 수반되고 컨텍스트 전환에 기여함
          + 그 결과, 일반적인 권장 사항은 max_connections를 사용 가능한 CPU 스레드 수의 4배 이하로 설정하는 것임. 이는 활성 세션을 CPU 간에 전환하는 데 소요되는 시간을 최소화하고 세션이 총체적으로 소비할 수 있는 RAM 양을 자연스럽게 제한함
     * 모든 세션이 쿼리를 실행 중이고 각 노드가 work_mem의 하나의 할당을 나타내는 경우, 이론적인 최대 작업 메모리 사용량은 connections * nodes * work_mem임
          + 쿼리 복잡성을 줄이는 것은 항상 가능한 것은 아니지만, 일반적으로 연결 수를 줄일 수 있음
          + 응용 프로그램이 항상 특정 확장된 양의 세션을 열거나 여러 개별 마이크로서비스가 Postgres에 의존하는 경우 말처럼 쉽지 않을 수 있음
     * work_mem * max_connections * 5 공식은 모든 연결이 활성화되어 있다고 가정할 때 기본 쿼리를 처리하기 위해 Postgres 인스턴스가 사용자 세션에 할당할 수 있는 최대 RAM 양에 대한 대략적인 추정치임
          + 서버에 이 값에 충분한 RAM이 없는 경우 요인 중 하나를 줄이거나 RAM을 늘리는 것을 고려해야 함
          + 평균 쿼리당 5개의 노드에 대한 추정은 애플리케이션에 맞지 않을 수 있으므로, 쿼리 실행 계획을 더 잘 파악한 후에 필요에 따라 조정해야 함
     * 다음 단계는 PgBouncer와 같은 커넥션 풀러를 도입하는 것임
          + 이는 클라이언트 연결을 데이터베이스에서 분리하고 비용이 많이 드는 Postgres 세션을 클라이언트 간에 재사용함
          + 적절하게 구성되면 수백 명의 클라이언트가 애플리케이션에 영향을 주지 않고 수십 개의 Postgres 연결을 공유할 수 있음
          + PgBouncer가 이런 식으로 1000개 이상의 연결을 40-50개로 다중화하여 프로세스 오버헤드로 인한 전체 메모리 소비량을 크게 줄이는 것으로 확인됨

  Reducing Bloat

     * 메모리 사용량을 추적하는 데 가장 어려운 측면은 아마도 테이블 팽창(bloat)일 것임
          + Postgres는 저장 시스템에서 데이터를 표현하기 위해 다중 버전 동시성 제어(MVCC)를 사용함
          + 즉, 테이블 행이 수정될 때마다 Postgres는 테이블 어딘가에 행의 다른 복사본을 만들고 새 버전 번호로 표시함
          + Postgres의 VACUUM 프로세스는 오래된 행 버전을 ""사용되지 않음"" 공간으로 표시하여 새 행 버전을 배치할 수 있도록 함
     * Postgres에는 이러한 재사용 가능한 할당을 지속적으로 찾고 테이블이 무제한으로 증가하지 않도록 하는 자동 청소 백그라운드 프로세스가 있음
          + 하지만 때로는 특히 대용량 시스템의 경우 이에 대한 기본 구성으로는 충분하지 않을 수 있으며, 이러한 유지 관리가 뒤처질 수 있음
          + 그 결과 테이블에 살아있는 행보다 죽은 행이 더 많이 채워져 오래된 데이터로 ""팽창""된 테이블이 될 수 있음
     * 테이블이 극도로 팽창된 경우 공유 버퍼에 미치는 영향을 고려해야 함
          + 각 페이지에 하나의 실행 행과 여러 개의 죽은 행만 포함된 경우 특정 쿼리에 10개의 행이 필요하다면 10개의 페이지를 공유 버퍼로 가져와야 하므로 다른 용도로 사용될 수 있는 많은 메모리를 낭비하게 됨
          + 이러한 행에 대한 수요가 특히 높으면 사용 횟수가 이를 공유 버퍼에 유지하여 캐시 효율성을 훨씬 떨어뜨림
     * 테이블 팽창을 추정할 수 있는 쿼리가 인터넷에 많이 떠돌고 있지만, 테이블의 페이지가 어떻게 보이는지 구체적으로 확인하는 유일한 방법은 pgstattuple 확장을 사용하는 것임
     * free_percent가 30%보다 크면 자동 청소를 더 적극적으로 수정해야 할 수 있음. 30%보다 훨씬 큰 경우에는 팽창을 완전히 제거하는 것이 좋음
          + 현재 이를 위한 유일한 지원 방법은 VACUUM FULL 명령을 사용하여 테이블을 본질적으로 재구축하는 것임. 이는 모든 실행 행을 새 위치로 재배치하고 이전 팽창된 사본을 버림
          + 이 프로세스는 수행 기간 동안 배타적 액세스 잠금을 할당하므로 거의 모든 경우 일종의 가동 중지 시간이 필요함
     * 이에 대한 대안은 Tembo에서 지원하는 pg_repack 확장임
          + 이 명령줄 도구는 배타적 잠금 없이 완전히 온라인 방식으로 팽창을 제거하기 위해 테이블을 재구성할 수 있음
          + 이 도구는 Postgres 코어 외부에 존재하고 테이블 및 인덱스 저장소를 수정하므로 종종 고급 사용으로 간주됨
          + 사용하기 전에 프로덕션이 아닌 환경에서 충분한 테스트를 권장함
     * 열 순서를 재구성하여 페이지당 행 수를 최대화하는 열 테트리스를 수행하여 더 나아갈 수 있음
          + 이는 아마도 극단적인 수준의 최적화일 수 있지만, 이런 식으로 테이블을 재구축할 자유가 있는 환경에서는 실행 가능한 전략임

  The Balancing Act

     * 이러한 모든 매개변수와 리소스를 적절하게 구성하는 것은 예술이자 과학임
          + 공유 버퍼의 실제 사용량을 측정하는 방법과 작업 메모리가 너무 낮은지 확인하는 방법을 살펴봤음
          + 하지만 대부분의 경우처럼 사용 가능한 하드웨어나 예산에 제한이 있다면 어떻게 될까? 이것이 ""예술""이 필요한 부분임
     * 메모리가 부족한 상황에서는 더 많은 work_mem을 위한 공간을 확보하기 위해 shared_buffers를 약간 줄여야 할 수도 있음. 또는 둘 다 줄여야 할 수도 있음
          + 애플리케이션에 많은 세션 수가 필요한 경우, 동시 세션이 광범위한 RAM 할당을 누적하는 것을 방지하기 위해 work_mem을 줄이거나 연결 풀을 도입하는 것이 더 합리적일 수 있음
          + 모든 것에 충분한 RAM이 있다고 가정하고 과거에 maintenance_work_mem을 늘렸다면 이를 줄이는 것이 더 합리적일 수 있음. 고려해야 할 것이 많음
     * 저메모리 인스턴스에서는 위의 권장 사항으로도 충분하지 않을 수 있음. 이러한 상황에서는 메모리 사용을 최대화하고 리소스 고갈을 피하기 위해 다음 작업 순서를 따르는 것이 좋음:
         1. 커넥션 풀러를 추가하고 max_connections를 줄임. 최대 리소스 소비를 줄이는 가장 빠르고 쉬운 방법임
         2. pg_stat_statements에서 보고한 가장 빈번한 쿼리에 EXPLAIN을 사용하여 평균이 아닌 쿼리의 최대 노드 수를 찾음. 그런 다음 work_mem을 (전체 RAM의 80% - shared_buffers) / (max_connections * 최대 계획 노드 수) 이하로 설정함
         3. maintenance_work_mem과 autovacuum_work_mem을 기본값인 64MB로 되돌림. 유지 관리 작업이 너무 느리고 더 많은 RAM을 사용할 수 있는 경우 8MB 단위로 증가시키는 것을 고려
         4. pg_buffercache 확장을 사용하여 shared_buffers에 저장된 테이블의 양을 확인함. 각 테이블과 인덱스를 면밀히 검토하고 데이터 아카이빙, 정보 사용량을 줄이도록 쿼리 수정 등을 통해 이를 줄일 수 있는 방법이 있는지 확인함. 활성 팽창 테이블에서 사용되는 페이지를 압축하기 위해 VACUUM FULL 또는 pg_repack을 포함할 수 있음
         5. pg_buffercache가 shared_buffers가 꽉 차고 활성 페이지를 제거하지 않고는 더 이상 줄일 수 없음을 보여주는 경우 usagecount 열을 사용하여 가장 활성화된 페이지의 우선순위를 정함. 이 열의 값은 1-5이므로, 3-5번 사용된 페이지에 집중하면 성능에 큰 영향을 주지 않고 shared_buffers를 줄일 수 있음
         6. 마지막으로 더 강력한 하드웨어를 프로비저닝함. 데이터베이스에 현재 워크로드에 더 많은 RAM이 필요하고 위의 매개변수를 줄이면 시스템 성능에 너무 크게 악영향을 미칠 경우 일반적으로 업그레이드하는 것이 더 합리적임
"
"https://news.hada.io/topic?id=15560","Gemma 2: 실용적인 규모의 오픈 언어 모델 개선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Gemma 2: 실용적인 규모의 오픈 언어 모델 개선

    주요 포인트:

   Gemma 2는 2억에서 270억 매개변수 범위의 경량화된 최첨단 오픈 언어 모델 새 계열입니다.
   90억과 270억 매개변수 모델은 현재 사용 가능하며, 20억 모델은 곧 출시 예정입니다.

    주요 기술적 개선사항:

     * 로컬-글로벌 어텐션 교차 사용
     * 그룹-쿼리 어텐션
     * 작은 모델을 위한 지식 증류 학습
       모델들은 자신의 크기에 비해 최고의 성능을 보이며, 2-3배 더 큰 모델들과 경쟁력이 있습니다.

    모델 아키텍처:

     * 디코더 전용 트랜스포머 아키텍처
     * 8192 토큰 컨텍스트 길이
     * 로컬 슬라이딩 윈도우(4096 토큰)와 글로벌 어텐션 레이어 번갈아 사용
     * 그룹-쿼리 어텐션(GQA)
     * 레이어 정규화를 위한 RMSNorm

    학습:

     * 270억 모델은 13조 토큰으로 학습
     * 90억 모델은 8조 토큰으로 학습
     * 26억 모델은 2조 토큰으로 학습
     * 데이터 소스: 웹 문서, 코드, 과학 기사
     * 26억과 90억 모델에 지식 증류 사용

    성능:

     * 벤치마크에서 비교 가능한 오픈 모델들을 능가
     * 일부 더 큰 모델들과 경쟁력 있음
     * 질문 답변, 추론, 수학, 과학, 코딩 태스크에서 강한 결과

    안전성 & 책임:

     * 광범위한 안전성 테스트와 책임있는 배포 절차 실행
     * 안전 정책과 학습 시 완화 조치 구현
     * 개발자를 위한 책임있는 생성형 AI 툴킷 제공

   CPU만으로 LLM을 구동시킬 수 있는 때가 올까요?

   20B 내외면 cpu만으로 구동 충분히 시킬 수 있습니다. 60b 부턴 힘들어하거나 잘 안되구요. (학습은 또 다른 영역) ollama 한 번 써보셔요.

   요구 사양에 대해서 전혀 감이 안 왔었는데 조언 감사드립니다. 인텔 11세대 노트북으로는 아직 무리같고 가상화 서버에 올리던지 해야겠네요

   lm studio 설치하시면 되요

   제가 노트북에서 무리같다고 한 이유는 CPU 사용량이 올코어 100%를 치고 발열이 심해서 쾌적하지 않다고 느꼈기 때문입니다. LM studio에는 프롬프트 UI가 있어서 사용성이 좋긴 하지만 쾌적함은 충족시킬 수 없을 것 같습니다

   에..? 이미 하는데요;;
"
"https://news.hada.io/topic?id=15542","HN에 공개: Triplit – 서버와 클라이언트에서 실행되는 오픈 소스 동기화 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN에 공개: Triplit – 서버와 클라이언트에서 실행되는 오픈 소스 동기화 데이터베이스

Triplit 개요

   Triplit은 서버와 브라우저 간 데이터를 실시간으로 동기화하는 오픈소스 데이터베이스임. Typescript 패키지로 제공되며, 서버에 데이터를 저장하고 클라이언트에 지능적으로 동기화함.
     * 실시간 동기화: 속성 수준에서 증분 업데이트와 충돌 해결 제공
     * 로컬 캐싱: 클라이언트 측 데이터베이스로 구동
     * 내구성 있는 서버 측 저장소: 관리자 대시보드 포함
     * 플러그형 저장소 제공자: SQLite, IndexedDB, LevelDB, Memory 등 지원
     * 낙관적 업데이트: 빠른 상호작용 제공
     * 관계형 쿼리: 복잡한 데이터 모델 지원
     * 오프라인 모드: 자동 재연결 및 일관성 보장
     * 롤백 및 재시도 관리: 업데이트 실패 시 처리
     * 스키마: 데이터 안전성과 Typescript 자동 완성 제공
     * 권한 관리: 서버에서 읽기 및 쓰기 권한 강제
     * 협업/멀티플레이어: CRDTs로 구동
     * 저지연: 델타 패치를 사용한 최소 네트워크 트래픽
     * 간단한 API: Javascript와 React에서 데이터 쿼리 및 변형 지원
     * 완전한 오픈소스

Monorepo 개요

   triplit/packages에는 Triplit을 구동하는 다양한 프로젝트가 포함됨:
     * TriplitDB: 브라우저, Node, Deno, React Native 등 모든 JS 환경에서 실행 가능하며, 네트워크 상에서 여러 작성자와 일관성을 유지하면서 빠르고 실시간으로 업데이트되는 쿼리 제공
     * Client: 로컬 및 원격 TriplitDB와 상호작용하는 브라우저 라이브러리
     * CLI: 프로젝트 스캐폴딩, 풀스택 개발 환경 실행, 서버 마이그레이션 등을 위한 명령어 제공
     * React: @triplit/client를 위한 React 바인딩
     * Svelte: @triplit/client를 위한 Svelte 바인딩
     * Console: Triplit 프로젝트의 데이터 보기 및 변형, 스키마 관리 앱
     * Server: Triplit 클라이언트 간 데이터 동기화를 위한 Node 서버
     * Server-core: Triplit을 실행하는 서버를 구축하기 위한 프로토콜 무관 라이브러리
     * Docs: Nextra로 구축된 Triplit 문서
     * Types: 다양한 Triplit 프로젝트를 위한 공유 타입
     * UI: shadcn으로 구축된 Triplit 프론트엔드 프로젝트를 위한 공유 UI 컴포넌트

빠른 시작

   새 프로젝트 시작:
npm create triplit-app@latest my-app

   기존 프로젝트에 종속성 추가:
npm install --save-dev @triplit/cli
npm run triplit init

   스키마 정의 (my-app/triplit/schema.ts):
import { Schema as S, ClientSchema } from '@triplit/client';

export const schema = {
  todos: {
    schema: S.Schema({
      id: S.Id(),
      text: S.String(),
      completed: S.Boolean({ default: false }),
    }),
  },
} satisfies ClientSchema;

   Triplit 개발 동기화 서버 시작:
npm run triplit dev

   환경 변수 설정 (.env 파일):
VITE_TRIPLIT_SERVER_URL=http://localhost:6543
VITE_TRIPLIT_TOKEN=copied-in-from-triplit-dev

   앱에서 쿼리 정의 (React 예시):
import { TriplitClient } from '@triplit/client';
import { useQuery } from '@triplit/react';
import { schema } from '../triplit/schema';

const client = new TriplitClient({
  schema,
  serverUrl: import.meta.env.VITE_TRIPLIT_SERVER_URL,
  token: import.meta.env.VITE_TRIPLIT_TOKEN,
});

function App() {
  const { results: todos } = useQuery(client.query('todos'));

  return (
    <div>
      {Array.from(todos.values()).map((todo) => (
        <div key={todo.id}>
          <input
            type=""checkbox""
            checked={todo.completed}
            onChange={() =>
              client.update('todos', todo.id, (todo) => ({
                todo.completed = !todo.completed,
              }))
            }
          />
          {todo.text}
        </div>
      ))}
    </div>
  );
}

   앱 시작, 다른 브라우저 탭 열고 실시간 데이터 동기화 확인.

GN⁺의 의견

     * Triplit은 실시간 동기화와 로컬 캐싱을 결합하여 빠르고 일관된 사용자 경험을 제공함.
     * 다양한 저장소 제공자를 지원하여 유연한 데이터 관리가 가능함.
     * 오프라인 모드와 자동 재연결 기능은 네트워크 불안정 상황에서도 데이터 일관성을 유지함.
     * 간단한 API와 다양한 프레임워크 지원으로 개발자 친화적임.
     * 그러나 초기 설정과 환경 변수 관리가 다소 복잡할 수 있음.

        Hacker News 의견

     * Triplit 사용 경험 공유: Triplit을 프로젝트에 사용 중이며, 데이터 모델이 분산형(P2P)으로 잘 맞음. 그러나 서버 인증 토큰 생성과 쿼리 언어의 표현력 부족이 아쉬움.
     * Evolu와 비교: Triplit과 Evolu의 차이점으로 Triplit의 .subscribe() 기능과 Evolu의 고급 쿼리 기능(SQL 기반) 및 브라우저에서 사용하는 데이터베이스 종류가 다름.
     * 오프라인 동기화와 스키마 진화: 오프라인 동기화 프로토콜을 사용하는 데이터베이스에서 클라이언트 버전이 다를 때 스키마 진화 문제를 어떻게 해결하는지 궁금함.
     * 클라이언트가 데이터베이스에 직접 쓰는 것에 대한 의문: 클라이언트가 데이터베이스에 직접 쓰는 것이 허용되는 앱이 이해되지 않음. Supabase와 Firestore에 대해서도 같은 의문이 있음.
     * Triplit의 사용자 설정 관리: Triplit을 사용하여 사용자 설정을 관리하며, 오프라인에서도 앱이 잘 작동하도록 함. 지원팀의 빠른 대응이 인상적임.
     * AGPL 라이선스 선택 이유: Triplit이 AGPL 라이선스를 선택한 이유가 궁금함.
     * 로컬 우선 접근 방식: 로컬 우선 접근 방식을 모바일 앱에 사용 중이며, 다른 솔루션들과 비교하여 Triplit이 클라이언트-서버 동기화 솔루션을 제공하는 이유가 궁금함.
     * Rust 바인딩 요청: Rust 바인딩이 추가되면 Tauri와 함께 사용할 수 있어 오프라인 우선 앱 개발에 도움이 될 것임.
     * React Native에서의 Triplit 사용 경험: Triplit을 React Native 앱에서 사용 중이며, 쿼리 언어, TypeScript 지원, 오프라인 지원, React Native 지원이 뛰어남. 오픈 소스와 자체 호스팅 가능성도 장점임.
     * 미래의 앱 개발: Triplit이 앱 개발의 미래처럼 느껴지지만, RethinkDB와의 비교 및 그들의 실패 이유에 대한 생각이 궁금함.
     * MongoDB와 Triplit의 조합 가능성: 서버 측에서 MongoDB를 사용하고 React 측에서 Triplit을 사용할 수 있는지, 아니면 Triplit을 새로운 데이터베이스로 사용해야 하는지 궁금함.
"
"https://news.hada.io/topic?id=15488","모든 명령을 Comma로 시작하세요 (2009)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       모든 명령을 Comma로 시작하세요 (2009)

사용자 정의 명령어 충돌 방지 방법

  문제점

     * 사용자 정의 쉘 스크립트와 시스템 명령어 간의 이름 충돌 가능성
     * 특히 Debian과 같은 많은 명령어를 지원하는 시스템에서 충돌 가능성 증가

  해결책

     * 사용자 정의 명령어 앞에 쉼표(,)를 붙여서 시스템 명령어와 구분
     * 쉼표는 파일 이름에서 특별한 의미가 없어서 안전하게 사용 가능

  장점

     * 쉼표를 사용하면 명령어 충돌 방지
     * 탭 완성 기능을 통해 사용자 정의 명령어 목록을 쉽게 확인 가능

  예시

$ ,«tab»
,complete-scp    ,go-thpgp      ,range
,complete-ssh    ,gr            ,svn-store-password
,coreoff         ,hss           ,umount
,coreon          ,mount-thpgp   ,find
,mount-twt

  GN⁺의 의견

     * 이 방법은 사용자 정의 명령어와 시스템 명령어 간의 충돌을 효과적으로 방지할 수 있음.
     * 쉼표를 사용하는 것은 간단하면서도 강력한 해결책으로, 초급 엔지니어도 쉽게 적용 가능함.
     * 이 기법은 특히 많은 명령어를 사용하는 시스템에서 유용함.
     * 다른 방법으로는 명령어 앞에 특정 접두사를 붙이는 것도 고려할 수 있음.
     * 이 방법을 사용하면 명령어 관리가 더 체계적이고 효율적으로 이루어질 수 있음.

        Hacker News 의견

     * ""comma_nds""라는 이름이 재미있음. 좋은 아이디어라서 사용해볼 생각임.
     * 처음에는 별로일 것 같았지만, 특히 탭을 사용해 도구 목록을 나열하는 부분이 마음에 듦. 최근 네임스페이스 충돌이 거의 없었음.
     * 쉘 스크립트 이름이 짧고 간결해서 시스템 명령어와 충돌할 가능성이 있었음. $PATH의 앞에 bin 디렉토리를 두면 문제 해결 가능함.
     * Vim에서도 , 키가 많이 사용됨. 비슷한 이유로 자주 사용됨.
     * 문제를 잘 이해하지 못했지만, 자신의 명령어를 자동완성하는 아이디어는 좋음.
     * 짧은 커스텀 명령어를 사용함. 시스템 명령어와 충돌해도 상관없음. 충돌 시 다른 이름으로 별칭을 설정함.
     * Windows에서 Python 스크립트를 쉽게 실행할 수 있지만, Linux에서는 어려움. Linux는 연관 프로그램 개념이 없어서 불편함.
     * 충돌을 피하기 위해 긴 실행 파일 이름을 사용하고 짧은 별칭을 설정하는 방법이 있음. 단점은 탭 완성 기능이 불편함.
     * 텍스트 확장기/텍스트 교체 커뮤니티에서도 쉼표로 시작하는 기술이 일반적임.
     * ~/.local/bin에 기억하지 못하는 실행 파일이 많았음. 쉼표로 시작하는 스크립트 이름이 기억을 돕는 데 유용했을 것임.

   '_'를 사용하는것은 어떻까요?
"
"https://news.hada.io/topic?id=15522","Polyfill JS에 대한 공급망 공격, 10만 개 이상의 사이트가 영향 받음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Polyfill JS에 대한 공급망 공격, 10만 개 이상의 사이트가 영향 받음

     * Polyfill.js 는 오래된 브라우저 지원을 위한 오픈 소스 라이브러리로, 10만 개 이상의 사이트에서 사용 중
     * 올해 2월, 중국 회사가 Polyfill.js의 도메인과 Github 계정을 인수한 후, 해당 도메인을 통해 모바일 기기에 악성코드를 주입하기 시작
     * 6월 25일 업데이트: 구글이 이미 polyfill.io를 사용하는 전자상거래 사이트의 구글 광고를 차단 시작함
     * 공격 방식: HTTP 헤더를 기반으로 동적으로 생성된 코드가 특정 모바일 기기에서 특정 시간에만 활성화되며, 관리자 사용자나 웹 분석 서비스가 감지되면 실행을 지연함
     * 악성코드 예시: 모바일 사용자를 가짜 구글 애널리틱스 도메인(www. googie-anaiytics .com)을 통해 스포츠 베팅 사이트로 리디렉션함.
     * 대응 방안: Polyfill.js의 원 저자는 현대 브라우저에서는 더 이상 필요하지 않으므로 더 이상 이 라이브러리를 사용하지 말 것을 권장하며, Fastly와 Cloudflare가 신뢰할 수 있는 대안을 제공함.
     * 이 사건은 전형적인 공급망 공격의 사례임.
     * 추가 도구: Sansec의 무료 CSP 모니터링 서비스인 Sansec Watch와 eComscan 백엔드 스캐너가 Polyfill.io 탐지를 지원

  GN⁺의 의견

     * 공급망 공격의 위험성: 오픈 소스 프로젝트가 인수되면서 발생할 수 있는 보안 위험을 잘 보여주는 사례임. 특히, 많은 사이트에서 사용되는 라이브러리일수록 피해가 클 수 있음.
     * 대안 라이브러리 사용: Fastly와 Cloudflare 같은 신뢰할 수 있는 대안을 사용하는 것이 중요함. 또한, 최신 브라우저 지원이 충분하다면 Polyfill.js 사용을 중단하는 것도 고려할 만함.
     * 보안 모니터링 필요성: CSP 모니터링 서비스와 같은 보안 도구를 사용하여 코드 변경 사항을 실시간으로 감시하는 것이 중요함.
     * 관리자 감지 및 지연 실행: 악성코드가 관리자나 분석 서비스를 감지하고 실행을 지연하는 방식은 보안 솔루션을 우회하려는 시도로, 이에 대한 대응 방안이 필요함.
     * 교육과 인식 제고: 개발자와 운영자들이 공급망 공격의 위험성을 인식하고, 주기적인 보안 교육과 최신 보안 동향을 파악하는 것이 중요함.

   polyfill.io 도메인 뿐만 아니라 bootcdn.net, bootcss.com, staticfile.net, staticfile.org, unionadjs.com, xhsbpza.com, union.macoms.la, newcrbpc.com. 등도 차단해야 한다고 합니다.

   https://news.hada.io/topic?id=15118
   약 한 달 전에 이 문제가 GN에서 다뤄진 것을 보고 관심을 가지고 지켜보고 있습니다. 문제의 원인이 어느 정도 밝혀지더라도, 수습과 후속 조치가 필요한 시간 동안 많은곳이 계속 공격에 노출될 수밖에 없는 구조로 느껴집니다. 침해사고는 계속 늘어나고 보안 전문가들은 부족해지는 현상이 당분간 더 심해질 것 같은 우려가 드네요,

        Hacker News 의견

     * 공개 CDN 사용의 위험성: 공개 CDN을 사용하면 모바일 기기에 악성코드가 주입될 수 있음. 이를 줄이기 위해 SRI(Subresource Integrity)를 사용할 수 있지만, 가장 좋은 해결책은 CDN 서비스를 통해 직접 호스팅하는 것임.
     * 게임 이론적 관점: 오픈 소스 소프트웨어 유지보수는 보상 없이 많은 사이트를 지원해야 하며, 이는 결국 보안 문제를 야기할 수 있음.
     * 워싱턴 포스트와 폭스 뉴스의 외부 콘텐츠: 두 웹사이트 모두 많은 외부 콘텐츠를 포함하고 있으며, 이는 공격 대상이 될 수 있음.
     * 클라우드플레어의 예측: 클라우드플레어는 이미 이러한 문제를 예측하고, 이를 줄이기 위한 솔루션을 제공함.
     * 폴리필 서비스의 창시자 의견: 폴리필 서비스 프로젝트를 만들었지만 도메인 소유권은 없었으며, 현재 도메인은 악성코드를 주입하고 있음. 즉시 사용 중지 권고.
     * 예상된 문제: 4개월 전부터 예상된 문제였으며, 더 많은 사람들이 이를 인지하고 대처했어야 했음.
     * 스포츠 도박 사이트로 리디렉션: 사용자가 원하지 않는 사이트로 리디렉션되는 경우가 있으며, 이는 일부 사용자에게 효과적일 수 있음.
     * SRI 언급 부족: 기사에서 SRI에 대한 언급이 없다는 점이 놀라움. SRI는 저비용 고효율의 해결책임.
     * 개발자와의 대화: 많은 개발자들이 CDN 하이재킹에 대해 무관심하며, 이는 보안 문제를 야기할 수 있음.
     * 자체 호스팅 권장: 항상 의존성을 직접 호스팅하는 것이 좋으며, 이는 사용자 프라이버시 보호에도 도움됨.
"
"https://news.hada.io/topic?id=15505","EU, 애플이 경쟁법을 위반했다고 판결  ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         EU, 애플이 경쟁법을 위반했다고 판결

     * 유럽연합 집행위원회는 애플이 소규모 경쟁업체를 보호하기 위해 제정된 새로운 법을 위반했다고 발표함
     * 디지털 시장법(DMA) 에 따라 애플이 앱 개발자들이 소비자에게 대체 채널로 안내하는 것을 방해했다고 판단
     * 애플은 12개월 내에 법을 준수하지 않으면 전 세계 매출의 최대 10%에 해당하는 벌금을 부과받을 수 있음
     * 새로운 조사에서는 애플이 제3자 앱 개발자에게 부과하는 계약 조건이 DMA 요구사항에 미치지 못한다고 지적
     * 핵심 문제는 애플이 앱 개발자에게 부과하는 수수료와 소비자가 가격 정보를 찾기 어렵게 만드는 행위임

        Hacker News 의견

     * 미국도 EU처럼 애플의 독점적 소프트웨어 통제와 과세를 막아야 한다는 의견.
     * 애플이 EU 법원의 판결을 기다리며 iOS API 무료 제공 조항의 합헌성을 논의 중이라는 설명.
     * 애플의 규칙이 산업 표준이지만, 플랫폼이 사용자 간의 자유로운 거래를 막아서는 안 된다는 주장.
     * 애플의 앱스토어 정책이 반경쟁적이며, 외부 결제 링크를 허용했지만 여전히 높은 수수료를 부과한다는 비판.
     * 애플이 개발자들에게 수수료 구조를 설명하지 못하게 막는 것이 문제라는 의견.
     * EU 집행위원회의 보도 자료 링크 제공.
     * 애플의 비즈니스 조건이 개발자들이 고객을 자유롭게 유도하지 못하게 한다는 설명.
     * 애플이 EU 규정을 준수하지 않으려는 시도를 하고 있다는 비판.
     * 애플이 EU에서 제품을 인위적으로 제한할 가능성이 있다는 우려.
     * 애플이 판매 수수료를 받지 않더라도 가격은 변하지 않을 것이며, 개발자가 더 많은 수익을 얻을 것이라는 의견.
"
"https://news.hada.io/topic?id=15587","소프트웨어 은하계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               소프트웨어 은하계

Code Galaxies에 오신 것을 환영합니다, 사령관

  목적지 선택

     * Bower
          + 클라이언트 사이드 JavaScript 패키지 관리자
     * Composer
          + PHP용 패키지 관리자
     * RubyGems
          + Ruby용 패키지 관리자
     * npm
          + JavaScript 패키지 관리자
     * Go Search
          + Go 언어 패키지 검색 (go-search.org 기반)
     * Python (PyPI)
          + Python 패키지 인덱스
     * NuGet
          + .NET 세계의 패키지
     * R Language
          + CRAN - R 패키지 네트워크
     * Debian
          + Debian 패키지 관리자
     * Fedora
          + Fedora 패키지
     * Arch Linux
          + AUR 없이 Arch Linux 패키지
     * Arch Linux + AUR
          + AUR 포함 Arch Linux 패키지
     * Brew
          + OS X용 패키지 관리자가 없는 Homebrew
     * Rust
          + Rust 패키지 저장소 (crates.io)
     * Elm
          + 즐거운 언어

GN⁺의 의견

     * 이 기사는 다양한 프로그래밍 언어와 플랫폼에 대한 패키지 관리자를 소개함
     * 각 패키지 관리자는 해당 언어 또는 플랫폼에서 필수적인 도구로, 개발자들이 의존성을 쉽게 관리할 수 있게 도와줌
     * 특히, npm과 PyPI는 JavaScript와 Python 커뮤니티에서 매우 널리 사용됨
     * 새로운 패키지 관리자를 선택할 때는 해당 언어의 생태계와 커뮤니티 지원을 고려하는 것이 중요함
     * 비슷한 기능을 가진 다른 도구로는 Maven(Java), Gradle(Java), Conda(Python) 등이 있음

        Hacker News 의견

     * Cool한 웹사이트지만, 지금 이발소에 있어서 미친 사람처럼 휴대폰을 흔들며 지도를 볼 수 없음을 언급함
          + 화면에서 손가락으로 구체를 드래그할 수 있으면 좋겠음
     * 각 점이 하나의 프로그램이고 그 뒤에 최소 한 명의 사람이 있다고 상상하면, 각 프로젝트의 복잡성을 잘 이해할 수 있음
          + 이는 매우 큰 인간 구조물임
     * 은하를 탐색하는 것이 매우 어렵다는 의견을 제시함
          + 한 손가락 터치로 앞으로 이동하지만 특정 지점을 터치하기 어려움
          + 특히 큰 점을 선택하려고 할 때 문제가 발생함
          + 기기를 회전하면 방향이 바뀌지만 특정 별을 가리키기 어려움
          + 그래도 시각적으로 매우 아름다움
          + 실제 은하를 탐색할 때도 이처럼 빠른 도구가 있으면 좋겠음, 물론 더 나은 컨트롤이 필요함
     * 이 시각화는 매우 멋지지만 2D 시각화가 더 실용적일 수 있음
          + 예를 들어, 점의 크기가 종속 항목의 총 수를 나타내지만 카메라 거리의 함수로도 작용함
     * 이런 종류의 것을 좋아함
          + Gource: git 저장소에서 아름답고 유기적인 비디오를 생성함
          + codeswarm: Gource와 유사함
          + skyline.github.com: 현재는 사용되지 않음, Atom처럼
     * NPM 은하의 멀리 있는 작은 클러스터를 보고 더 탐험해보기로 함
          + 이미지
          + strongcanary-a부터 strongcanary-z까지의 패키지들이 있음
          + 이들은 종속성 그래프에서 강하게 연결된 구성 요소를 테스트하기 위해 설계된 패키지임
          + strongcanary-a
          + 이 도구가 테스트를 통과한 것 같음, 멀리서도 식별할 수 있어서 멋짐
     * ""My God! It's full of leftpads""라는 감탄을 표현함
     * 천문학적으로 조금 까다롭게 굴자면, 이들은 은하보다는 별 무리에 더 가까움
          + 은하는 보통 원형 운동이 많고 팔이 형성됨
          + ""소프트웨어 별 무리""라는 마케팅 용어가 더 나을 수 있음
          + 은하가 어두운 물질이 필요하다는 널리 받아들여진 가설을 언급하며 소프트웨어에 대한 비유로 들어가고 싶지 않음을 표현함
     * 이 데이터가 어떻게 채워지는지 궁금해함
          + Rust를 클릭해봤지만 자신이 작업하는 프로젝트가 crates.io에 몇 년 동안 있었음에도 불구하고 보이지 않음
     * 휴대폰에서 Elm 은하를 표시할 수 없었음을 언급함
          + 분리된 섬이 무엇을 의미하는지 아는 사람 있는지 물어봄
          + Elm은 비교적 폐쇄적인 핵심 개발 프로세스를 가지고 있어 그럴 수 있지만, 다른 이유는 알 수 없음
"
"https://news.hada.io/topic?id=15561","파라마운트, Comedy Central 웹사이트 폐쇄로 25년간의 비디오 클립 삭제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             파라마운트, Comedy Central 웹사이트 폐쇄로 25년간의 비디오 클립 삭제

25년간의 The Daily Show 클립 삭제, Comedy Central 사이트 폐쇄

  주요 내용 요약

     * ComedyCentral.com 폐쇄:
          + ComedyCentral.com이 폐쇄되면서 1999년부터 제공되던 _The Daily Show_와 _The Colbert Report_의 모든 클립이 삭제됨.
          + The Opposition with Jordan Klepper, The Nightly Show with Larry Wilmore, @midnight, Lights Out with David Spade 등의 클립과 전체 에피소드도 함께 삭제됨.
     * 대체 시청 방법:
          + Comedy Central 시리즈는 이제 TV 제공자를 통해 시청 가능함.
          + Paramount+에 가입하면 Comedy Central 쇼의 여러 시즌을 시청할 수 있음.
          + 하지만 _The Daily Show_와 _The Colbert Report_의 오래된 에피소드는 Paramount+에서도 제공되지 않음.
     * Paramount의 재정 문제:
          + Paramount는 140억 달러 이상의 부채를 안고 있으며, Paramount+와 노후화된 케이블 네트워크의 손실이 주요 원인임.
          + 최근 MTV.com과 CMT.com도 폐쇄됨.
          + Paramount는 Skydance와의 합병 논의를 진행했으나, 최대 주주인 Shari Redstone이 이를 중단시킴.
     * 대체 클립 제공:
          + Comedy Central의 과거 늦은 밤 프로그램 클립은 일부 YouTube에서 찾을 수 있으나, 이전의 완전한 컬렉션은 아님.

  GN⁺의 의견

     * 콘텐츠 접근성 문제:
          + ComedyCentral.com의 폐쇄로 인해 많은 팬들이 좋아하는 콘텐츠에 접근하기 어려워짐. 이는 사용자 경험을 저해할 수 있음.
     * 스트리밍 서비스의 한계:
          + Paramount+가 모든 콘텐츠를 제공하지 않음으로써, 사용자들이 원하는 콘텐츠를 찾기 어려워질 수 있음. 이는 스트리밍 서비스의 한계를 보여줌.
     * 재정 문제의 영향:
          + Paramount의 재정 문제로 인해 여러 사이트가 폐쇄되고 콘텐츠 접근성이 제한됨. 이는 회사의 장기적인 생존 가능성에 영향을 미칠 수 있음.
     * 대체 플랫폼의 필요성:
          + 팬들은 YouTube와 같은 대체 플랫폼을 통해 일부 콘텐츠를 찾을 수 있지만, 완전한 컬렉션을 제공하는 새로운 플랫폼이 필요함.
     * 미래의 콘텐츠 관리:
          + 콘텐츠 제공업체들은 사용자 경험을 고려한 콘텐츠 관리와 제공 방식을 고민해야 함. 이는 팬들의 충성도를 유지하는 데 중요함.

        Hacker News 의견

     * 스트리밍 서비스의 실패: 많은 스튜디오들이 TV 채널을 운영하면서 스트리밍으로 전환하는 데 실패했음. 기술이 표준화되었음에도 불구하고, Paramount+와 Disney+ 같은 플랫폼이 어려움을 겪고 있음.
     * 무료 콘텐츠의 상업화 실패: 무료 콘텐츠를 수익화하지 못한 점이 아쉬움. 저작권 문제로 인해 많은 사람들이 사랑하는 콘텐츠가 사라짐.
     * 리더십의 무능: 리더십의 무능으로 인해 콘텐츠의 가치를 제대로 인식하지 못함. 오래된 콘텐츠를 디지털화하여 판매할 수 있었음에도 불구하고 이를 실행하지 않음.
     * 유튜브를 통한 수익화: 오래된 콘텐츠를 유튜브에 업로드하고 광고를 통해 수익화할 수 있었음. 브랜드 이미지와 맞지 않을 수 있지만, 삭제하는 것보다는 나음.
     * 클라우드 스토리지의 문제: 소프트웨어 개발자들이 스트리밍을 홍보하면서 오프라인 저장의 중요성을 간과함. 클라우드 스토리지가 비싸지면서 비용 절감이 필요해짐.
     * 저작권 비용 절감?: 오래된 클립을 유지하는 비용이 얼마나 들었을지 궁금함. 파일 저장 비용이 저렴한데, 저작권 비용 절감 때문인지 의문.
     * 과거의 웹사이트 경험: 2000년대 초반에 South Park의 전체 에피소드를 웹사이트에서 시청했던 기억이 있음.
     * 잃어버린 미디어: 인터넷에 저장된 데이터가 사라지면서 잃어버린 미디어가 현실이 됨. 인터넷이 영구적인 장소가 아님.
     * 비용 절감의 필요성: 저렴한 개발자를 고용하여 비용을 절감할 수 있었음. 회사 내 도구 접근을 위해 6개월 동안 싸운 경험이 있음. Paramount+는 비용 절감을 위해 절약형 개발자가 필요함.
     * 문화 보존의 권리: 사람들이 중요한 문화 유산을 개인적으로 보존하고 즐길 수 있는 권리가 필요함. 디지털 음악은 가능하지만, TV와 영화는 그렇지 않음.
"
"https://news.hada.io/topic?id=15485","몬트리올 지하철 승차권을 구동하는 작은 칩","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        몬트리올 지하철 승차권을 구동하는 작은 칩

몬트리올 지하철 티켓을 작동시키는 작은 칩 내부

  NFC 기술 개요

     * 몬트리올 지하철 티켓은 NFC(Near-Field Communication) 기술을 사용함.
     * NFC 리더기(개찰구)와 NFC 태그(티켓)가 짧은 거리에서 자기장을 통해 데이터를 교환함.
     * 리더기는 자기장을 생성하여 태그에 전력을 공급하고 데이터를 전송함.

  티켓의 구조

     * 티켓은 종이로 만들어졌지만 내부에는 얇은 플라스틱 시트와 금속 호일로 된 안테나가 있음.
     * NFC 칩은 매우 작고 얇아서 티켓 내부에서 느낄 수 없을 정도임.

  칩의 기능

     * MIFARE Ultralight EV1 칩은 저비용의 일회용 티켓용으로 설계됨.
     * 칩은 작은 EEPROM에 데이터를 저장하며, 기본적으로 리더기에 데이터를 제공하는 역할을 함.
     * 칩에는 고유한 7바이트 식별 코드(UID)가 있으며, 메모리 접근을 비밀번호로 보호할 수 있음.

  칩의 사진 촬영 과정

     * 칩을 티켓에서 분리하고 실리콘 다이만 남기기 위해 여러 단계를 거침.
     * 칩의 표면을 보호하는 층을 제거하여 내부 구조를 관찰함.

  칩의 구조

     * 칩의 대부분은 디지털 논리 회로로 구성되어 있으며, EEPROM과 전압을 높이는 충전 펌프 회로가 포함됨.
     * 안테나 신호를 디지털 데이터로 변환하는 아날로그 회로도 포함됨.

  데이터 전송 방식

     * 태그는 안테나를 통해 신호를 전송하는 대신, 부하 변조(load modulation)라는 기법을 사용하여 데이터를 리더기로 전송함.
     * 리더기는 안테나의 전압 변화를 감지하여 데이터를 추출함.

  칩의 제조 공정

     * 칩은 180nm 공정으로 제조되었으며, 이는 최신 반도체 공정에 비해 구식임.
     * 저비용 시장을 목표로 하여 비용을 최소화하기 위해 구식 공정을 사용함.

  표준 셀 논리

     * 칩의 디지털 회로는 표준 셀 논리로 구현됨.
     * 표준 셀 논리는 자동화 도구를 사용하여 칩 레이아웃을 생성하는 방식임.

  EEPROM

     * 칩은 데이터를 EEPROM에 저장하며, 고전압을 생성하는 충전 펌프 회로가 포함됨.

  결론

     * 이러한 NFC 칩은 매우 저렴하게 제조되어 일회용으로 사용될 수 있음.
     * 칩은 웨이퍼 단위로 판매되며, 티켓 제조업체는 칩을 안테나 시트에 장착하고 티켓을 인쇄함.

GN⁺의 의견

     * NFC 기술의 장점: NFC 기술은 빠르고 편리한 데이터 전송을 가능하게 하며, 다양한 응용 분야에서 사용될 수 있음.
     * 보안 문제: MIFARE Ultralight 칩은 보안이 약해, 고급 응용 프로그램에는 적합하지 않음. 더 높은 보안이 필요한 경우 DESFire와 같은 칩을 사용하는 것이 좋음.
     * 제조 비용: 저비용으로 대량 생산이 가능하여 일회용 티켓과 같은 응용 분야에 적합함.
     * 기술 발전: 최신 반도체 공정과 비교하면 구식이지만, 저비용 시장에서는 여전히 유용함.
     * 응용 가능성: NFC 기술은 교통, 결제, 접근 제어 등 다양한 분야에서 활용될 수 있음.

        Hacker News 의견

     * 스마트 카드처럼 보이게 만든 이유는 사람들이 이해하기 쉽게 하기 위함이지만, 실제로는 다른 기술을 사용함.
     * 물리적 통신 계층은 다르지만, 상위 프로토콜 계층은 거의 동일함. 스마트 카드와 비접촉식 카드 모두 ISO 7816을 따름.
     * 스마트 카드 생태계는 최소한의 변경으로 비접촉식 카드를 지원하려 함. 많은 장치가 접촉식과 비접촉식을 모두 지원함.
     * 이는 WiFi와 유선 이더넷의 관계와 유사함. 물리적 계층은 다르지만 논리적으로 호환되며 동일한 소프트웨어가 둘 다 지원함.
     * 유럽에서 처음으로 이러한 티켓을 경험했는데, NFC 칩이 들어있다는 생각을 못 해서 스캔하는 데 어려움을 겪었음.
     * 기술적이지 않은 아내는 직관적으로 티켓을 탭해야 한다고 생각하고 바로 이해했음.
     * NFC 태그를 집이나 차에서 위치 기반 자동화에 사용할 수 있음. 태그를 탭하면 모바일 폰이 로컬 액션이나 SSH 스크립트를 트리거할 수 있음.
     * 시각 장애인을 위해 NFC 태그를 물건에 붙여두면, 폰이 오디오 설명을 읽어줄 수 있음.
     * Mifare는 런던의 Oyster 카드와 홍콩에서 오랫동안 사용되어 왔음. 하지만 이제는 비접촉식 카드나 폰이 더 편리하고 덜 낭비적임.
     * 이 기술은 곧 사라질 예정임. 신용카드나 폰을 사용하는 것이 더 편리함. 티켓을 사기 위해 긴 줄을 서야 하는 불편함이 있음.
     * NFC 칩에 대한 질문을 받기 위해 작성자가 있음.
     * 화학 실험실에서 더 주의 깊게 배웠어야 했음. 이 프로젝트는 많은 질문에 답을 줌.
     * 모스크바의 모든 대중교통은 이러한 칩으로 작동함. 현재는 러시아에서 자체 제작한 클론 칩을 사용함.
     * 종이와 바코드가 더 저렴하고 간단하다고 생각하지만, NFC 칩이 더 복잡하고 비싸다고 믿기 어려움.
     * 직접 프로그램을 작성할 수 있는 CPU와 플래시를 가진 NFC 칩이 필요함. 하지만 이러한 칩은 NDA로 보호되어 있어 접근할 수 없음.
"
"https://news.hada.io/topic?id=15467","OpenAI, Rockset 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenAI, Rockset 인수

     * OpenAI가 세계적 수준의 데이터 인덱싱 및 쿼리 기능을 제공하는 실시간 분석 데이터베이스 Rockset을 인수함
     * Rockset은 사용자, 개발자, 기업이 데이터를 더 잘 활용하고 실시간 정보를 얻을 수 있게 함
          + OpenAI 제품 전반에 걸쳐 Rockset의 기술을 통합할 것이며, Rockset 팀의 일부가 OpenAI에 합류할 예정
     * Rockset의 인프라는 기업이 데이터를 실행 가능한 정보로 변환하는 데 도움을 줌
          + Rockset의 기술을 OpenAI 제품에 통합하여 고객에게 혜택을 제공할 계획

        Hacker News 의견

     * Rockset 인수는 예상치 못한 일이며, RAG(역색인) 시스템에 적합하지 않음. 두 가지 가능성: 인재 확보 또는 대량 데이터 관리 제품 개발.
     * 데이터베이스는 인프라의 핵심이며, 마이그레이션 기간이 짧아 걱정스러움. ClickHouse와 같은 대안이 있음.
     * Rockset 고객 오프보딩 중이며, 3개월 동안 사용한 것이 아쉬움. DynamoDB를 실시간으로 복제하는 데 사용했음.
     * Rockset 인수로 고객들이 어려움을 겪고 있음. RisingWave라는 대안을 제안하며, 실시간 분석과 데이터 처리에 적합함.
     * Rockset의 비교 페이지가 인상적이었음. 최근 몇 년간 발전이 느렸지만, 새로운 시작을 축하함.
     * Rockset 서비스는 2024년 9월 30일까지 제공됨. 벤더 계약이 고객을 어떻게 보호하는지 궁금함.
     * OpenAI가 Rockset을 인수하여 내부적으로 사용하려는 의도임. 기존 고객은 오프보딩해야 함.
     * Rockset SaaS 비즈니스 종료 소식에 놀람. 고객들이 어려운 전환을 겪을 것임.
     * Rockset의 UI와 문서화가 좋았으나, 데이터 로드 실패와 성능 문제 등 단점도 있었음.
     * Rockset 고객들은 복잡한 마이그레이션을 겪을 것임. Propel에서 마이그레이션 서비스를 제공함.
"
"https://news.hada.io/topic?id=15501","LINQPad – .NET 프로그래머를 위한 Playground","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  LINQPad – .NET 프로그래머를 위한 Playground

     * C#, F#, VB 코드 스니펫이나 프로그램을 즉시 테스트 가능
     * LINQ 또는 SQL을 사용해 SQL/Azure, Oracle, SQLite, Postgres, MySQL 데이터베이스를 쿼리
     * AI 자동 완성 및 통합 디버깅 기능을 제공
     * REPL의 모든 이점을 활용해 .NET 언어로 스크립트 작성 및 자동화 가능
     * BenchmarkDotNet, xUnit, Rx, MSAL, Excel 등과 상호 운용 지원
     * 작고 빠르며, xcopy 옵션 제공
     * 스탠다드 에디션은 무제한 무료로 사용 가능

  LINQPad의 장점

     * LINQ 쿼리: LINQPad는 LINQ 쿼리뿐만 아니라 모든 C#/F#/VB 표현식, 문 블록 또는 프로그램을 지원함.
     * 코드 프로토타입: LINQPad에서 아이디어를 프로토타입하고 작동하는 코드를 Visual Studio에 붙여넣을 수 있음.
     * 데이터베이스 탐색: 데이터베이스를 인터랙티브하게 탐색할 수 있으며, 전통적인 SQL 쿼리도 가능함.
     * 결과 캐시: Util.Cache를 사용해 중간 데이터를 캐시하고, 이전 결과를 다시 계산하지 않고 쿼리를 편집 및 재실행할 수 있음.
     * Dump 메서드: 다양한 객체를 지능적으로 출력하며, 이미지 및 비트맵을 렌더링하고, 비동기 값을 자리 표시자로 표시함.
     * 고급 C# 기능: async/await 및 unsafe 같은 고급 C# 기능을 지원하며, 신경망 작성 등 빠른 코딩 작업에 적합함.
     * 학습 도구: C# 학습에 유용하며, 다양한 예제와 인터랙티브 샘플을 제공함.

  LINQPad의 활용

     * 코드 벤치마킹: BenchmarkDotNet을 사용해 정확한 결과를 제공하며, 그래픽 실시간 시각화 기능을 제공함.
     * 정규 표현식 작성: 인터랙티브 RegEx 평가기를 제공함.
     * Excel 파일 생성: 고속 Excel 내보내기 엔진을 사용해 네이티브 .xlsx 파일을 생성할 수 있음.
     * 쉬운 학습: 통합 튜토리얼/참조 자료와 인터랙티브 샘플 쿼리를 제공함.

   예전에 LinqPad 에 푹 빠져있을 때 작성한 사내 발표 자료입니다.
   https://www.slideshare.net/slideshow/linqpad-for-devops/61523774

   식탁보 프로젝트를 포함해서 저는 닷넷 코드를 작성할때 프로토타이핑을 linqpad를 매우 적극적으로 진행하고 있습니다. 예전에 visual studio express edition 시절때 임시 디렉터리에 프로젝트를 만들어주던 기능이 없어져서 여기에 대한 대체제로 너무나 잘 쓰고 있습니다. 😊

        Hacker News 의견

     * Linqpad는 간단하고 직관적으로 필요한 작업을 수행하는 도구 중 하나임. Beyond Compare도 같은 범주에 속함.
     * LINQPad의 오랜 만족 사용자로서, 최신 기능이나 코드 조각이 필요할 때마다 업그레이드함. 현재는 여러 에디션이 있어 가격이 다소 비쌈.
     * LINQPad를 사용하여 코드 스니펫을 관리하고 새로운 코드를 테스트하며 새로운 기능을 학습함. 크로스 플랫폼 지원이 되면 좋겠지만, 투자 비용이 크다는 이야기를 들음.
     * Jo Albahari의 발표를 시드니에서 본 적이 있는데, 그는 .NET 세계의 숨은 영웅이라고 생각함.
     * LINQPad는 필수 도구로, 개인 라이선스를 소유하고 있음. 스크립트가 끝난 후에도 실행 파일이 계속 실행되며, 같은 프로세스에서 다시 실행됨.
     * LINQPad는 스크립팅/노트북 용도로 사용하며, **C#**으로 거의 모든 작업을 수행할 수 있음.
     * LINQPad의 유용한 기능 중 하나는 SQL Server 데이터베이스에 연결하여 빠르게 LINQ/Lambda 스타일 쿼리를 작성할 수 있는 기능임.
     * 무료 오픈 소스 대안으로 RoslynPad를 확인해보길 권장함.
     * LINQPad는 C# 도구 키트의 필수 요소로, 다른 C# REPL 및 인터랙티브 환경이 부족한 점을 보완함.
     * LINQPad의 생산성 기능으로는 유연한 시각화 도구, 코드 스니펫 복사/붙여넣기, 라이브러리 자동 재로드, NuGet 통합 등이 있음.
     * LINQPad를 사용하여 데이터 접근 메커니즘을 라이브러리에 추가하고, 간단한 명령줄 또는 그래픽 도구를 구축함.
     * NetPad는 크로스 플랫폼 C# 플레이그라운드로, LINQPad만큼 개발되지는 않았지만 무료임.
     * Linqpad 팁을 제공하는 블로그가 있음. 특히 키보드 단축키와 Util 클래스를 사용한 비밀번호 입력 기능이 유용함.
     * 아직 Windows 외의 환경에서 사용 가능하지 않음.
"
"https://news.hada.io/topic?id=15555","Niantic Studio 소개: 웹 기반 XR 및 3D 콘텐츠 제작의 미래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Niantic Studio 소개: 웹 기반 XR 및 3D 콘텐츠 제작의 미래

   브리핑
   Niantic Studio는 웹 기반 XR 및 3D 콘텐츠 제작 도구로 실시간 비주얼 인터페이스를 통해 초보자부터 숙련된 개발자까지 손쉽게 사용할 수 있습니다. 이 도구는 몰입형 XR 경험, AR 씬, 3D 웹 게임 제작을 지원하며, 다양한 상호작용 요소를 간편하게 추가할 수 있습니다. 무료로 제공되는 이 올인원 도구는 모든 8th Wall 개발자가 공공 베타 버전으로 사용할 수 있으며, 커뮤니티 피드백을 바탕으로 기능이 개선될 예정입니다.

   요약
   Niantic Studio 소개: 웹 기반 XR 및 3D 콘텐츠 제작 도구
   더 직관적인 비주얼 인터페이스 제공: 실시간으로 생성물을 시각화 가능
   초보자부터 숙련된 개발자까지 모두 쉽게 사용할 수 있는 도구
   AR 씬, 3D 웹 게임, 몰입형 XR 경험 제작 가능
   직관적이고 실시간으로 반응하는 시각적 인터페이스 제공
   간편한 상호작용 요소 추가 가능: 물리, 카메라, 조명, 애니메이션, 오디오 등
   새로운 웹 게임 엔진 포함: 복잡한 개발 작업 간소화
   실시간으로 3D 씬 편집 및 미리보기 가능
   고급 XR 기능 및 크로스 플랫폼 배포 지원
   웹 기반 도구로 빠르고 협력적인 제작 환경 제공
   무료로 제공되는 올인원 도구: 누구나 3D 및 XR 프로젝트 제작 가능
   다양한 기술 수준의 팀이 쉽게 협업 및 반복 작업 가능
   기존 Niantic 8th Wall 개발자는 무료 베이직 계정으로 시작 가능
   커뮤니티의 피드백을 반영하여 기능 개선 예정
   Niantic Studio의 공공 베타 버전 제공: 모든 8th Wall 개발자 사용 가능

   tilnote.io로 요약하였습니다.

   팬데믹이 한창 일 때, 나이언틱 스튜디오랑 똑같은 목표를 가진 프로젝트를 개발하다가 드롭된 적이 있습니다. 그때 고생하던 시절이 생각 나네요.
"
"https://news.hada.io/topic?id=15582","틱톡, 우버, X의 운전면허증 노출된 ID 인증 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     틱톡, 우버, X의 운전면허증 노출된 ID 인증 서비스

    AU10TIX의 보안 문제

     * TikTok, Uber, X 사용자의 신원을 확인하는 회사 AU10TIX가 1년 이상 온라인에 관리 자격 증명을 노출함
     * AU10TIX는 얼굴 사진과 운전 면허증 사진을 처리하여 신원을 확인함
     * 이스라엘에 기반을 둔 AU10TIX는 ""풀 서비스 신원 확인 솔루션""을 제공한다고 웹사이트에 설명함
     * 신원 문서 확인, 실시간 비디오 스트림에서 ""생존 감지"", 나이 예측 등의 서비스를 제공함
     * Fiverr, PayPal, Coinbase, LinkedIn, Upwork 등의 로고가 웹사이트에 포함되어 있으며, 일부는 AU10TIX의 현재 또는 이전 고객임을 확인함

    신원 확인 서비스의 중요성 및 보안 문제

     * 더 많은 소셜 네트워크와 포르노 사이트가 신원 또는 나이 확인 모델로 이동 중임
     * 사용자가 특정 서비스에 접근하기 위해 실제 신원 문서를 업로드해야 함
     * 이번 유출 사건은 신원 확인 서비스 자체가 해커의 표적이 될 수 있음을 강조함
     * 사이버 보안 연구자는 데이터를 배포하지 않고 404 Media에 스크린샷과 일부 데이터를 제공하여 검증함

    GN⁺의 의견

     * 이번 사건은 신원 확인 서비스의 보안 취약성을 보여줌
     * 신원 확인 서비스가 점점 더 많은 웹사이트에서 요구됨에 따라, 보안 강화가 필수적임
     * AU10TIX와 같은 회사는 보안 사고를 방지하기 위해 더 강력한 보안 조치를 취해야 함
     * 비슷한 기능을 제공하는 다른 서비스로는 Jumio, Onfido 등이 있음
     * 새로운 기술이나 오픈 소스를 채택할 때는 보안과 개인정보 보호를 최우선으로 고려해야 함

        Hacker News 의견

     * 회사가 자격 증명 유출을 18개월 전에 발견하고 해결했다고 주장했지만, 유출된 자격 증명이 한 달 전까지도 작동했음
          + 이런 수준의 관리와 정교함이 이 분야의 벤더들에게 일반적인지 의문임
          + 보험을 통해 전문가를 고용해 이런 문제를 제대로 해결해야 한다고 생각함
     * 데이터 유출은 당연한 결과였음
          + 기술에 대해 조금 아는 원칙 있는 변호사가 결국 이런 회사들을 책임지게 할 것임
          + 다른 회사들은 이를 보고 법적 책임을 피하려고 노력할 것이지만, 일부는 책임감 있게 행동하기 시작할 것임
     * 덴마크 정부의 온라인 ID 솔루션(MitID)에 대해 점점 더 감사하게 됨
          + 완벽하지는 않지만, PII를 노출하지 않고 신원 확인을 할 수 있음
          + 미국도 표준화된 안전한 온라인 ID 솔루션이 필요하다고 생각함
     * eToro, Coinbase, Payoneer 같은 고객 목록을 보고 놀람
          + 자신의 정보가 유출되었는지 확인할 방법이 있는지 궁금함
          + 운전면허증 사진이 일부 주의 법률에 따라 생체 정보로 간주될 수 있음
     * 도메인 등록 기관의 MFA 앱을 잃어버린 후 이런 서비스를 사용한 적이 있음
          + 그 회사의 S3 버킷에서 운전면허증이 유출되었을 가능성이 있음
          + 이후 MFA를 다시 활성화하라는 이메일이 귀찮았음
     * 이런 상황이 결국 소프트웨어 개발의 특정 작업에 대해 법적으로 요구되는 전문 면허로 이어질 것이라고 생각함
          + PII를 다루는 비즈니스라면 실제 엔지니어링이 필요하고, 그 엔지니어들은 인증을 받아야 함
          + 면허가 있으면 관리자나 C-suite의 압력에 맞서기 쉬워짐
          + 면허가 있으면 숙련된 노동자들이 올바르게 일을 할 수 있는 레버리지를 제공함
     * 이런 상황이 오웰리안 악몽처럼 느껴짐
          + TikTok과 X 같은 서비스가 신원 확인을 요구해서는 안 된다고 생각함
     * 미국 시민의 생체 정보가 이스라엘로 전송되는 이유가 궁금함
          + 민감한 정보가 미국 데이터 센터를 떠나는 것에 대한 법률이 있지 않은지 의문임
     * PII 데이터가 잠재적으로 접근 가능했지만, 현재까지 그런 데이터가 악용된 증거는 없다고 주장함
          + 기자가 데이터를 접근해 PII를 확인했는데, 어떻게 이런 주장이 가능한지 의문임
          + ""증거를 보지 못했다""는 말을 ""우리가 정말로 찾지 않았다""로 해석하게 됨
"
"https://news.hada.io/topic?id=15565","Claude 3.5 Sonnet 모델에 대하여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Claude 3.5 Sonnet 모델에 대하여

     * Claude 3.5 Sonnet이 대화형 AI 분야에서 현재 가장 우수한 모델임
     * 클로드 소네트 3.5는 Claude.ai와 클로드 iOS 앱에서 무료로 사용 가능함. 더 높은 사용량 한도를 원하면 구독도 가능함
     * 문서 구조를 최대한 유지하면서 내용을 요약했으며, 마크다운을 사용하여 깔끔하게 정리함
     * 속도가 Claude Opus 대비 2배 빠르며 비용도 저렴함
     * 새로운 아티팩트(Artifacts) 기능을 도입하여 코드, 문서, 웹사이트 디자인 등을 별도 창에서 실시간으로 보고 편집할 수 있음
     * OpenAI, Google DeepMind, Anthropic 모두 고성능 대형 모델을 개발하고 있지만, 현재는 빠르고 저렴하면서도 우수한 성능을 내는 모델에 집중하는 추세임

벤치마크 및 평가 결과

     * 많은 벤치마크에서 기존 모델을 앞선 성능을 보임. 특히 GPQA에서 압도적 1위
     * 아티팩트를 이용한 작동형 코딩 평가에서 64%의 문제를 해결하여 이전 모델(38%)을 크게 능가함
     * 전문가들의 법률, 금융, 철학 등 다양한 분야 평가에서도 82% ~ 73%의 높은 승률을 기록함
     * 시각 인식 능력도 개선되었으며, 추가 프롬프트를 통해 얼굴 인식 기능을 제한하도록 설계됨

새로운 Artifacts 기능

     * Artifacts 기능을 통해 대화 옆 창에서 코드, 문서, 웹 디자인 등을 실시간으로 생성하고 편집할 수 있음
     * 대화형 AI에서 협업 작업 환경으로 진화하는 첫 단계로 평가됨
     * 향후 팀 협업을 지원하고, 조직 차원의 지식 관리 툴로 발전할 것으로 기대됨

안전성 및 윤리성 검토

     * 클로드 소네트 3.5는 ASL-2 수준을 유지하고 있어 우려할 만한 능력은 아직 없음
     * 영국 인공지능 안전 연구소(UK AISI)가 출시 전 안전성 평가를 실시함
     * 거부율 측면에서도 이전 모델 대비 개선된 모습을 보임
     * 사용자 데이터를 모델 학습에 사용하지 않는 원칙을 고수함
     * 프런티어 기술 개발에 대해서는 유보적인 입장을 취하고 있으나 명확한 약속은 하지 않음

소프트웨어 엔지니어링에 미치는 영향

     * 클로드 3.5 소네트는 엔지니어들의 코딩 작업을 크게 향상시켜줌. 애로사항을 자동으로 해결하고 문서화까지 해줌
     * 풀리퀘스트 테스트 통과율이 Opus 38%에서 Sonnet 64%로 크게 개선됨
     * Anthropic 내부에서도 비전공자부터 숙련된 엔지니어까지 모두 클로드를 활용하여 시간을 크게 절약하고 있음
     * 엔지니어들의 작업 시간을 크게 단축시켜 주며, 누구나 쉽게 코딩할 수 있게 만들 것으로 기대됨
     * AI 기술을 활용한 엔지니어링 생산성 향상이 가속화될 전망임

모델의 한계점

     * 여전히 일부 유명 퍼즐이나 게임에서는 실수를 범함. 맥락 정보를 주면 해결하기도 함
     * 정교한 기만이나 공격에 취약할 가능성이 있음
     * 특정 문제에 고착되지 않고 전반적인 추론 능력 향상에 주력한 것으로 보임
     * 여전히 인간이 생성한 지식을 활용하는 수준이며, 근본적인 한계는 남아있음

사용자들의 반응

     * 물리학, 화학, 기계공학 등 전문 분야에서 놀라운 성능을 보여주고 있음
     * SVG 이미지 생성, 웹앱 개발, 3D 시뮬레이션 등 다양한 아티팩트 활용 사례가 쏟아지고 있음
     * 반면 여전히 인간의 창의성을 넘어서지 못한다는 의견도 있음

GN⁺의 의견

     * 클로드 3.5 소네트의 등장으로 대화형 AI 기술이 크게 발전하는 전환점을 맞이했음.
     * 속도와 비용 면에서 크게 개선되어 다양한 분야에서 활용도가 높아질 것으로 보임. 특히 SW 엔지니어링 분야의 생산성 향상에 크게 기여할 전망임
     * Artifacts 기능을 통해 단순 대화를 넘어 실제 업무에 활용할 수 있는 협업 도구로 발전할 가능성을 보여줌. 장기적으로는 기업의 지식 관리 시스템으로도 발전할 수 있을 것임
     * 안전성과 윤리성 측면에서 Anthropic의 노력은 높이 평가할 만함. 그러나 아직 완벽하지 않으며 지속적인 연구와 감시가 요구됨
     * GPT-4 등 다른 거대 모델과의 경쟁이 가속화되면서 AI 기술 발전이 더욱 빨라질 것으로 보임. 장기적으로는 인간 수준의 AGI 개발 가능성도 배제할 수 없음
     * 전반적으로 클로드 3.5 소네트는 현 시점 최고의 대화형 AI로 평가받을 만함. 개인과 기업의 생산성 혁신에 크게 기여할 것이나, 사회적 파장에 대한 대비도 필요한 시점임

        Hacker News 의견

     * 프로젝트 기능: Anthropic의 프로젝트 기능이 유용하며, 여러 프로젝트를 동시에 진행할 수 있는 점이 좋음. 하지만 각 프로젝트의 컨텍스트 창이 작게 느껴질 수 있음. 향후 더 큰 컨텍스트 창을 기대함.
     * Claude 3.5 Sonnet: Claude 3.5 Sonnet의 코딩 능력이 매우 인상적임. 전문가 프로그래머가 더 빠르게 작업할 수 있게 도와줌. 고품질 코드를 위해서는 세부 지침과 결과 평가가 필요함.
     * 코딩 실험: Anthropic의 API와 함께 코딩 실험을 진행했으며, 프로젝트의 95% 이상이 Claude에 의해 작성됨. 결과물은 높은 품질을 자랑함.
     * Sonnet 3.5의 일관성: Sonnet 3.5는 일관성이 뛰어나며, 이전 모델들보다 안정적인 응답을 제공함. 이는 큰 발전임.
     * 코딩 능력 평가: GPT-4의 코딩 능력이 만족스럽지 않음. 응답 속도가 느려져서 다른 옵션을 탐색 중임.
     * AI 비교: Claude는 인간처럼 들리며 데이터 질문에 강함. GPT-4는 논리적 추론에서 더 뛰어남. 가격과 출력 속도는 비슷함.
     * 벤치마크 그래프: 벤치마크 그래프가 가속화되고 있다는 주장에 동의하지 않음. 더 자세한 그래프가 필요함.
     * 계정 차단: Anthropic Sonnet에서 계정이 자동 검토 후 차단됨. OpenAI 구독을 선호하게 됨.
     * 최첨단 기술: 현재의 경쟁적인 AI 개발 환경이 흥미로움. 이러한 시대를 직접 경험하는 것이 즐거움.
     * AI의 요약 기능: AI가 다양한 디자인 옵션과 새로운 기술 스택을 요약해주는 것이 매우 유용함. 코드 예제와 함께 대화 비용이 저렴함.
     * ML 모델의 상향 평준화: 동일한 데이터셋을 사용하면 비슷한 성능의 모델이 나옴. 데이터가 모델 성능의 차이를 만들 수 있음. ML 기술은 여전히 공통적임.
"
"https://news.hada.io/topic?id=15539","하이퍼카드 시뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              하이퍼카드 시뮬레이터

HyperCard 시뮬레이터

     * HyperCard 시뮬레이터: 클래식 HyperCard 스택을 가져와서 실행할 수 있는 기능 제공.
     * 영향받은 프로젝트: hypercard.org, Merveilles HyperJam, Internet Archive.
     * 제작사: Hypervariety Custom Software.
     * 기능:
          + 카드: 각 카드에는 여러 배경, 필드, 버튼 포함.
          + 배경: 여러 카드가 공유하는 배경 포함.
          + 버튼: 각 카드에 여러 버튼 포함.
          + 필드: 각 카드에 여러 필드 포함.

GN⁺의 의견

     * HyperCard의 역사적 중요성: HyperCard는 1987년 애플에서 출시한 소프트웨어로, 멀티미디어 애플리케이션 개발의 선구자 역할을 했음.
     * 현대적 활용 가능성: 현대의 웹 애플리케이션이나 모바일 앱 개발에 영감을 줄 수 있음.
     * 교육적 가치: 초급 소프트웨어 엔지니어가 기본적인 프로그래밍 개념을 배우기에 좋은 도구임.
     * 기술적 고려사항: HyperCard 스택을 현대 시스템에서 실행하려면 호환성 문제를 해결해야 함.
     * 대안: HyperCard와 유사한 기능을 제공하는 다른 도구로는 LiveCode, Twine 등이 있음.

        Hacker News 의견

     * HyperCard를 어렸을 때 접하지 못해 아쉬움. 에뮬레이터로 사용해봤는데 재미있었음. Flash도 비슷한 느낌을 줬음.
     * 링크 위에 커서를 올리면 손 모양 아이콘으로 바뀌는 것은 HyperCard에서 영감을 받은 것임. 브라우저는 HyperCard 스택의 발전형임.
     * HyperCard와 SuperPaint는 어릴 때 레고 같은 존재였음. 아버지가 과학자라서 집에 매킨토시가 있었고, HyperCard로 많은 것을 만들었음.
     * 90년대 아이였고, 가족의 매킨토시에서 다양한 작은 게임과 프로그램을 기억함. 대부분 HyperCard 프로그램이었을 것임.
     * 창 최대화 버튼을 클릭하면 HyperCard 편집기로 확대됨. 깨끗한 슬레이트 덱을 시작하는 방법을 고민 중임.
     * HyperCard를 경험하지 못한 사람으로서, HyperCard의 주요 매력은 무엇이었는지 궁금함. 접근성 때문인지 아니면 잘 만들어졌기 때문인지.
     * Carson Gross가 HyperCard에서 영감을 받은 _hyperscript를 만들었음. 또한 htmx도 만듦. 두 프로젝트는 별개지만 잘 어울림.
     * 30년 전에 만든 스택이 여기에 있음. 그러나 시뮬레이터에서 제대로 작동하지 않음.
     * Decker와 비교하면 어떨지 궁금함.
     * 현대에 HyperCard와 같은 역할을 하는 도구는 무엇인지 궁금함. HTML/JavaScript일지.
"
"https://news.hada.io/topic?id=15507","Cosmopolitan v3.5.0 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Cosmopolitan v3.5.0 릴리즈

     * C코드를 빌드하면 윈/맥/리눅스/BSD 등 어디서나 실행하게 만들어주는 라이브러리 및 툴체인
     * 인터프리터/가상머신이 필요없음
     * GCC 와 Clang을 재구성하여 POSIX Polyglot 포맷을 만들어서 각 OS에서 네이티브로 실행

  3.5의 개선 사항

     * 메모리 맵 구현: 더 높은 품질의 메모리 맵 구현체
     * Lua 5.4.6 지원 (내부에 포함된 Redbean 웹서버가 사용)
     * -x LANG 플래그 지원
     * C++ STL을 재구현하는데 있어서 많은 진전
          + ctl::string 최적화: 작은 문자열 최적화를 포함한 다양한 최적화를 진행함.
          + ctl::set 및 ctl::map 도입: 새로운 자료 구조를 도입함.
          + ctl::unique_ptr 구현: 고유 포인터 기능을 추가함.
          + minimal new.h 제공: 최소한의 new.h 파일을 제공함.
          + _Atomic 정의 수정: C++에서의 _Atomic 정의를 수정함.
          + 기타 최적화 및 버그 수정: 다양한 최적화와 버그 수정을 진행함.

  GitHub 개발 프로세스 개선

     * 라벨러 액션 추가: GitHub 라벨러 액션을 추가함.
     * 이슈 템플릿 추가: 이슈 템플릿을 추가함.
     * 테스트 라벨 제거: 라벨러 설정 파일에서 테스트 라벨을 제거함.

     * Cosmopolitan libc - Build-Once Run-Anywhere C
     * Cosmopolitan v1.0 공개
     * Cosmopolitan v2.0 릴리즈
     * Cosmopolitan v3.0 릴리즈

        Hacker News 의견

     * Python을 APE, pex, shiv, pyinstaller, pants 빌드 시스템과 결합해 단일 파일 파이썬 실행 파일을 만드는 도구 체인을 기대함.
     * Graal Native와 결합하면 Clojure/Java 바이너리를 VM 없이 어디서나 실행 가능하게 할 수 있을 것 같음.
     * 두 커밋을 확인했는데, 두 줄 모두 동일한 문자 수를 가짐. 이런 작업을 즐기지만 쉽지는 않음.
     * 이 프로젝트가 멋지긴 하지만, 단일 바이너리로 빌드 프로세스를 단순화하는 것 외에 다른 이유가 있는지 궁금함. 성능, 정적 링크 가능성, 표준 준수 측면에서 musl과 glibc와 비교해 어떤지 알고 싶음.
     * Cosmopolitan에 대해 항상 약간 두려움을 느낌. 멋진 해킹이지만, 작동하지 않을 것 같은 느낌이 듦.
     * 저장소에는 lua와 다양한 기능을 갖춘 멋진 웹 서버인 redbean의 소스 코드도 포함되어 있음.
     * 오래된 장치에서 cgo로 컴파일된 Go를 실행하려다 포기했음. Cosmopolitan-flavored cgo 바이너리를 성공적으로 빌드한 사람이 있는지 궁금함. Cosmopolitan libc가 Linux 2.6을 지원하므로 희망적임.
     * 거의 4년 동안 이 프로젝트를 팔로우하고 있지만, Cosmopolitan/αpε가 얼마나 진지한 프로젝트인지 아직도 모르겠음.
     * ""실제로 휴대 가능한 실행 파일 헤더""를 읽는 것이 재미있음.
     * Cosmopolitan libc를 APE 없이 배포할 계획이 있는지 궁금함. 현재는 프레임워크+도구 체인에 더 가까운 것 같음.
"
"https://news.hada.io/topic?id=15566","Amazon, Temu와 비슷한 중국 직배송 할인 섹션 출시할 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Amazon, Temu와 비슷한 중국 직배송 할인 섹션 출시할 계획

     * 아마존이 Temu/Shein과 같은 초저가 사이트에 대응하기 위해 중국 창고에서 해외 소비자에게 직접 배송하는 저렴한 상품을 제공하는 섹션을 쇼핑 사이트에 출시할 계획
     * 새로운 마켓플레이스는 브랜드가 없는 패션, 가정용품, 일상용품 등을 제공할 예정이며, 주문은 고객에게 도착하는 데 9~11일이 소요될 것
     * 아마존은 최근 비공개 회의에서 중국 셀러들에게 올 여름 판매자 등록을 시작하고 가을에 재고 접수를 시작할 것이라고 전함
     * Temu와 Shein은 최근 몇 년 동안 중국에서 직접 배송되는 상품을 엄청나게 저렴한 가격에 제공하면서 미국 쇼핑객들 사이에서 엄청난 성장을 보임
     * 이는 대규모 미국 물류 네트워크에서 신속한 배송 시간을 오랫동안 홍보해 온 아마존 내부에서 어떻게 가장 잘 대응할 것인지에 대한 논쟁을 불러일으킴
     * 아마존 대변인은 ""우리는 항상 판매 파트너와 협력하여 더 많은 선택, 더 낮은 가격, 더 큰 편의로 고객을 기쁘게 하는 새로운 방법을 모색하고 있다""고 말함
     * 이 기사가 발표된 후 Temu의 모회사인 PDD Holdings의 주가는 2% 이상 하락했고, Etsy 주가는 1% 하락함
          + PDD 주가는 1.3% 하락 마감했고, Etsy 주가는 회복하여 대체로 변동이 없는 수준에서 마감함
     * 발표 자료에 따르면 Amazon.com 홈페이지에는 쇼핑객을 할인 상품으로 안내하는 새로운 섹션이 생길 예정임
     * 할인 섹션에 합류하는 판매자는 제품 선택과 가격을 결정할 수 있으며, 출시 예정인 신제품에 대한 수요를 테스트하기 위해 소량으로 생산할 수 있음
          + 이 모델은 공급업체가 유행 상품을 소량으로 생산하여 미판매 재고를 최소화하는 것을 자랑으로 여기는 Shein의 모델과 유사함
     * 그러나 아마존은 새로운 서비스에서 Temu에 비해 보다 관대한 접근 방식을 취하는 것으로 보임
          + Temu는 판매자가 무엇을 어떤 가격에 판매할지를 지시하고, 판매자를 대신하여 마케팅과 상점 운영을 맡음
     * 이러한 아마존 배송이 800달러 미만의 개별 소포에 대해 미국 관세를 면제해주는 미국 무역 규정을 이용할지는 불분명함
          + Shein과 Temu는 이 규정을 사용하는 판매자 중 하나이며, 일부 미국 정치인과 무역 단체는 이를 관세 허점으로 비판해 왔음

   안 그래도 요즘 아마존은 싸구려 저질 제품들로 넘쳐나는데요.

   기사 자체는 TheInformation 이 독점 보도했는데, 각종 언론에서 거의 내용을 그대로 가져와서 보도를 했어서 옮겨봅니다.
"
"https://news.hada.io/topic?id=15516","라운드 렉트가 도처에 확산","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             라운드 렉트가 도처에 확산

원형 직사각형은 어디에나 있음!

  주요 내용 요약

     * 빌 앳킨슨의 새로운 알고리즘:
          + 빌 앳킨슨은 QuickDraw에 원과 타원을 빠르게 그리는 새로운 코드를 추가했음.
          + 68000 프로세서의 한계를 극복하기 위해 덧셈과 뺄셈만으로 원을 계산하는 방법을 고안했음.
          + 이 기술은 홀수의 합이 다음 완전 제곱수가 된다는 사실을 이용함.
     * 스티브 잡스의 피드백:
          + 스티브 잡스는 빌의 데모를 보고 원과 타원뿐만 아니라 둥근 모서리 직사각형도 필요하다고 제안했음.
          + 스티브는 둥근 모서리 직사각형이 일상 생활에서 많이 사용된다고 강조했음.
          + 빌은 처음에는 어려울 것이라고 생각했지만, 스티브의 설득으로 시도해보기로 결심했음.
     * 둥근 모서리 직사각형 구현:
          + 빌은 빠르게 둥근 모서리 직사각형을 그리는 코드를 작성했음.
          + 이 새로운 기능은 ""RoundRects""로 명명되었고, 사용자 인터페이스의 여러 부분에 통합되었음.
          + 둥근 모서리 직사각형은 곧 필수적인 요소가 되었음.

  GN⁺의 의견

     * 기술적 배경:
          + 68000 프로세서는 부동 소수점 연산을 지원하지 않아서 덧셈과 뺄셈만으로 원을 그리는 방법이 필요했음.
          + 빌 앳킨슨의 알고리즘은 이러한 제약을 극복한 혁신적인 접근법이었음.
     * 사용자 경험의 중요성:
          + 스티브 잡스는 기술적 성과뿐만 아니라 사용자 경험을 중시했음.
          + 둥근 모서리 직사각형은 사용자 인터페이스의 미적 요소를 개선하는 데 중요한 역할을 했음.
     * 혁신의 동기 부여:
          + 스티브 잡스의 피드백은 빌 앳킨슨에게 새로운 도전을 시도하게 하는 동기 부여가 되었음.
          + 이는 팀 내에서 피드백과 협업이 얼마나 중요한지를 보여줌.
     * 기술의 진화:
          + 초기의 작은 개선이 나중에 큰 변화를 가져올 수 있음을 보여줌.
          + 둥근 모서리 직사각형은 이후 다양한 소프트웨어와 디자인에서 표준이 되었음.
     * 관련 기술:
          + 현재 많은 그래픽 라이브러리와 프레임워크에서 둥근 모서리 직사각형을 쉽게 구현할 수 있음.
          + 예를 들어, CSS의 border-radius 속성은 웹 디자인에서 둥근 모서리를 쉽게 적용할 수 있게 해줌.

        Hacker News 의견

     * Windows 버튼 모서리가 여러 버전에서 둥글거나 각진 형태로 변해왔음. 개인적으로는 각진 모서리를 선호함.
     * Macintosh 개발 당시 Bill Atkinson이 재택근무를 했다는 점이 인상적임.
     * 애플의 둥근 사각형이 이제는 스퀴클(squircle) 형태가 되었음.
     * Steve Jobs의 뛰어난 미적 감각과 ""인문학 + 기술"" 철학이 진정성 있게 다가옴.
     * 둥근 사각형이 곳곳에 존재함. 관련 링크: Round rectangles are everywhere, History of Rounded Corners, Steve Jobs and Rounded Corners, The story of round rectangles
     * macOS의 둥근 모서리가 현대적이고 기분 좋은 디자인을 만듦. 아이폰 아이콘도 더 매력적으로 보임. 다른 플랫폼도 이를 도입해야 함.
     * 브루클린의 여름 캠프에서 목공 수업을 들었는데, 한 강사는 모든 모서리를 둥글게 만들라고 했고, 다른 강사는 각지게 유지하라고 했음.
     * 둥근 사각형과 각진 사각형을 비교해보면, 실제 생활에서는 문틀, 액자, 책, 캐비닛, 창문 등이 대부분 각진 형태임. 자연물은 사각형이 아님.
     * Mac OS ROM 해킹으로 완전히 원형인 창을 생성할 수 있음. 관련 링크: https://macgui.com/news/article.php?t=493"">Mac OS ROM hack
     * Bill Atkinson이 기대했던 반응을 얻지 못했을 때 포기하지 않고 둥근 사각형 문제를 해결한 점이 인상적임.
"
"https://news.hada.io/topic?id=15573","Eplot: Emacs에서 차트를 만드는 새로운 패키지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Eplot: Emacs에서 차트를 만드는 새로운 패키지

Emacs에서 차트를 만드는 새로운 패키지: eplot

  eplot 패키지 소개

     * Emacs에서 간단한 플롯을 쉽게 만들기 위한 패키지인 eplot을 소개함.
     * 기존의 chart.el은 기능이 제한적이었음.
     * eplot은 Y축 숫자가 이해하기 쉽게 표시됨.

  기존 차트 도구의 문제점

     * Google Finance의 차트는 오랫동안 비합리적인 축을 사용했음.
     * 주식 차트를 구현할 때 축의 숫자를 '보기 좋은 숫자'로 표시하는 것이 중요함.

  eplot의 기능

     * eplot은 Emacs에서 숫자가 많은 버퍼에서 M-x eplot 명령어로 차트를 생성함.
     * 차트를 쉽게 조정할 수 있는 헤더 개념을 도입함.
     * SVG를 사용하여 그라디언트를 쉽게 구현함.

  사용 방법

     * 버퍼에 숫자를 입력하고 M-x eplot을 실행하면 차트가 표시됨.
     * 헤더를 추가하여 차트를 빠르게 조정할 수 있음.
     * eplot 모드를 사용하여 편리하게 차트를 수정할 수 있음.

  개발 상태

     * 현재 eplot은 Microsoft Github에 공개되어 있음.
     * 아직 작업 중인 프로젝트로, 코드가 정리되지 않은 상태임.

GN⁺의 의견

     * 사용자 경험: eplot은 Emacs 사용자에게 더 나은 차트 경험을 제공함.
     * 개발 편의성: 헤더를 통해 차트를 쉽게 조정할 수 있어 개발자에게 편리함.
     * 기술적 고려사항: SVG를 사용하여 그라디언트를 구현한 점이 흥미로움.
     * 비교 대상: 비슷한 기능을 제공하는 도구로는 Excel과 Jupyter Notebook이 있음.
     * 미래 발전 가능성: 현재 코드가 정리되지 않았지만, 향후 개선될 가능성이 높음.

        Hacker News 의견

     * Emacs 버그 수정 작업을 하느라 최근에 ""10%의 Emacs 버그 수정""을 찾을 수 없었음을 이해하게 됨. 정말 멋진 작업임.
     * Emacs의 파일 및 디렉토리 로컬 변수를 사용하여 차트 설정을 하면 더 유연한 사용자 경험을 제공할 수 있을 것 같음.
     * 그라디언트를 추가하는 방식이 정말 간단하고 기발함.
     * Our World in Data에서 일하면서 훌륭한 차트를 만드는 방법을 많이 배웠음. 제목, 부제목, 캡션을 간과하지 말라는 조언을 주고 싶음.
     * 데이터 흐름 라이브러리와 DSL을 추가하는 것도 좋은 생각임. Hadley Wickham의 dplyr이 최고였음.
     * 최근 Mike Bostock의 새로운 프로젝트 Plot에 대해 탐구 중임. 현재까지는 매우 흥미로움.
     * Emacs를 더 이상 사용하지 않지만, 위의 댓글들이 도움이 되길 바람.
     * Python과 matplotlib을 사용하여 org 모드에서 플로팅을 할 수도 있음. Gnuplot이 유일한 옵션은 아님.
     * SVG 형식의 플롯은 LaTeX이나 웹 브라우저에 임포트할 수 있어 논문에 삽입하기에 좋은 선택임. 좋은 결과를 축하함.
     * Microsoft와 Github을 함께 언급한 것을 처음 봤는데, 여전히 불편한 느낌임.
"
"https://news.hada.io/topic?id=15576","1950년대 열전자관으로 제작된 현대적 8비트 디자인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     1950년대 열전자관으로 제작된 현대적 8비트 디자인

Valve.Computer: 현대적인 8비트 컴퓨터

  기술적 예술

     * Valve.Computer: 1950년대의 열전자 밸브를 사용한 현대적인 8비트 컴퓨터임.
     * 초기 시제품: 2021년 5월 28일 첫 작동, 현재는 연구실 벽에 고정되어 있음.
     * 밸브의 특성: 수백만 번의 스위칭이 가능하며, 높은 전압이 필요함.
     * 기능: PONG 게임 실행, 32비트 피보나치 수열 계산 가능.

  왜, 언제, 어디서

     * 아이디어 기원: Bletchley Park 방문 후, 새로운 밸브 컴퓨터 디자인이 50년 넘게 없었다는 사실을 깨달음.
     * 제작 과정: 은퇴 후 18개월 동안 시제품과 최종 컴퓨터 제작.
     * 구성 요소: 두 개의 시제품(ena.computer와 fred.computer)에서 주요 부품을 가져옴.

  따뜻한 빛

     * 구성: 1,120개의 열전자 삼극관 사용.
     * NOR 게이트: 모든 기능적 구성 요소는 NOR 게이트로 구성됨.
     * 발열: 상당한 열 발생, 따뜻한 아로마.

  터너상

     * 예술적 가치: Valve.Computer는 이제 예술 설치물로 발전함.
     * 터너상 도전: 기계 코드의 빈 캔버스, 위험과의 접촉, 밸브의 조각 등 예술적 요소 강조.

  다명 삼극관, 새로운 콘솔, 안전망 없음

     * 밸브의 다양한 이름: 영국에서는 thermionic valves, 미국에서는 vacuum tubes, 동유럽에서는 электронная лампа.
     * 새로운 콘솔: 전면에서 열리는 시스템 콘솔, 5개의 ASTEC MP6 PSU 사용.
     * 기계 코드: 16개의 명령어로 프로그램 작성, 데이터 저장, 메모리, 하드웨어 제어 가능.

  헨리의 피보나치 수열 비디오

     * 시연: 2021년 8월 15일, 8비트 피보나치 수열 시연.
     * 구성: GUI 릴레이 메모리와 NVRAM 사용, 헨리 고양이가 시연.

  주디의 PONG 게임 비디오

     * 시연: 2022년 1월 11일, 주디가 PONG 게임 시연.
     * 프로그램: 100개 미만의 기계 코드 명령어로 구성.

  지금 만들고 나중에 고치기

     * 프로젝트 관리: 첫 번째 등대는 계획 없이 제작, 두 번째 등대는 계획 후 제작.
     * 결과: 계획이 아이디어의 정신을 잃게 할 수 있음.

  계획하고 나중에 만들기

     * 프로젝트 관리: A4 종이와 색연필로 프로젝트 관리.
     * 발견: 첫 시도는 실패하지만, 경험이 성공을 이끌음.
     * 중요한 요소: 최소한의 고유 하위 시스템, 이중 삼극관 사용, 다층 PCB 설계.

GN⁺의 의견

     * 기술적 도전: 열전자 밸브를 사용한 컴퓨터 제작은 높은 기술적 도전과 흥미로움을 제공함.
     * 역사적 가치: 1950년대 기술을 현대적으로 재해석한 점에서 역사적 가치가 큼.
     * 안전 문제: 높은 전압과 발열로 인해 안전 문제가 있을 수 있음.
     * 교육적 가치: 기계 코드와 하드웨어 이해를 돕는 교육적 도구로 사용 가능.
     * 예술적 요소: 기술과 예술의 융합으로 새로운 형태의 예술 작품으로 평가될 수 있음.
"
"https://news.hada.io/topic?id=15480","앤드류 S. 타넨바움, ACM 소프트웨어 시스템 상 수상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    앤드류 S. 타넨바움, ACM 소프트웨어 시스템 상 수상

앤드류 S. 타넨바움, ACM 소프트웨어 시스템 상 수상

  MINIX의 탄생과 영향

     * 앤드류 S. 타넨바움, 암스테르담 VU 대학의 컴퓨터 과학 명예 교수, MINIX로 ACM 소프트웨어 시스템 상 수상.
     * MINIX는 1987년 타넨바움의 교재 _Operating Systems: Design and Implementation_와 함께 개발된 소형 마이크로커널 기반 UNIX 운영체제임.
     * IBM PC용으로 개발된 MINIX는 약 12,000줄의 코드로 구성되었으며, 메모리 관리자, 파일 시스템, 핵심 UNIX 유틸리티 프로그램을 포함함.
     * 2000년에 무료 오픈 소스 소프트웨어로 전환됨.

  LINUX에 영감을 준 MINIX

     * MINIX는 타넨바움의 교재 성공을 넘어, LINUX의 영감이 됨.
     * LINUX는 클라우드 서버, 모바일 폰, 사물인터넷 장치를 구동하는 가장 성공적인 오픈 소스 운영체제로 성장함.
     * MINIX는 MeikOS 운영체제의 기반이 되었고, 인기 있는 마이크로칩 내부에서도 실행됨.
     * MINIX 3.0은 자원이 제한된 임베디드 컴퓨터와 높은 신뢰성이 요구되는 애플리케이션을 위해 설계됨.
     * 타넨바움의 마이크로커널 설계 주장은 여러 세대의 운영체제 설계자들에게 영향을 미침.

  ACM 소프트웨어 시스템 상

     * ACM 소프트웨어 시스템 상은 개념 기여나 상업적 수용 등 지속적인 영향을 미친 소프트웨어 시스템을 개발한 기관 또는 개인에게 수여됨.
     * 상금은 $35,000이며, IBM이 재정 지원을 제공함.

GN⁺의 의견

     * MINIX의 교육적 가치: MINIX는 운영체제 원리를 이해하는 데 큰 도움을 주는 교육 도구로서의 가치가 큼.
     * LINUX의 발전: MINIX가 LINUX에 영감을 주어 현재의 오픈 소스 생태계 발전에 기여한 점이 중요함.
     * 마이크로커널의 중요성: 타넨바움의 마이크로커널 설계 주장은 현대 운영체제 설계에 큰 영향을 미쳤음.
     * 임베디드 시스템에서의 활용: MINIX 3.0은 자원이 제한된 환경에서 높은 신뢰성을 제공하는 운영체제로 유용함.
     * 상업적 성공과 오픈 소스: MINIX의 오픈 소스 전환은 상업적 성공과 오픈 소스의 조화를 보여주는 좋은 사례임.

        Hacker News 의견

     * Reed Hastings가 넷플릭스 아이디어를 설명하며 처음부터 인터넷을 염두에 두고 있었다고 말한 일화가 인상적임.
     * Tanenbaum의 네트워킹 교과서에 나오는 유명한 인용구를 기억해내며, 그의 영향력이 대단하다고 생각함.
     * Tanenbaum은 컴퓨터 과학을 쉽게 접근하고 즐겁게 만들어주는 훌륭한 교육자임.
     * ""구조적 컴퓨터 조직"" 교과서는 너무 잘 쓰여져서 스릴러 소설처럼 읽게 됨.
     * Knuth와 비교할 때 Tanenbaum의 책이 더 읽기 쉽다는 의견이 있음.
     * Andrew Tanenbaum의 상 수상을 축하하며, 그의 분산 시스템 교과서를 여전히 소장하고 있음.
     * Tanenbaum이 운영하는 선거 과학 블로그 Electoral Vote가 미국 정치 분석에 유용함.
     * 컴퓨터 아키텍처 과목에서 실패하다가 Tanenbaum의 책으로 공부하여 높은 성적을 받았다는 경험담.
     * 1991년에 Tanenbaum의 SCO 책으로 컴퓨터 아키텍처를 배웠고, 이후에도 그 책으로 강의함.
     * MINIX가 거의 모든 현대 Intel CPU에 숨겨져 있다는 사실이 흥미로움.
     * 1988년에 ""Operating Systems: Design and Implementation""을 읽고 통찰력 있는 경험을 했음.
     * Tanenbaum의 ""Computer Networks"" 책이 컴퓨터 과학 공부 시절에 가장 좋아했던 책 중 하나였음.
     * Tanenbaum의 책들이 현실과의 친숙함을 강조하며 소프트웨어 개발자에게 큰 도움이 됨.
     * Tanenbaum이 electoral-vote.com을 운영하며 2004년 미국 대선 분석에 큰 도움을 줬다는 사실이 놀라움.
"
"https://news.hada.io/topic?id=15569","Show HN: 500ms 응답 시간의 Voice bots","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show HN: 500ms 응답 시간의 Voice bots

세계에서 가장 빠른 음성 봇 데모

  데모 소개

     * 속도의 중요성: 음성 AI 인터페이스에서 속도는 매우 중요함. 사람들은 일반적인 대화에서 빠른 응답을 기대함.
     * 목표: 이 데모는 500ms 이하의 음성 응답 시간을 목표로 하는 저지연 LLM 상호작용을 보여줌.
     * 기술: 이 봇은 Pipecat이라는 오픈 소스 프레임워크를 사용하여 구축됨.

  데모 체험

     * 데모 시도: 데모를 직접 체험해 볼 수 있음.
     * 소스 코드 보기: 소스 코드를 확인할 수 있음.
     * 직접 배포: 자신의 환경에 배포할 수 있는 옵션 제공.

GN⁺의 의견

     * 속도의 중요성: 음성 인터페이스에서 빠른 응답은 사용자 경험을 크게 향상시킴.
     * 오픈 소스의 장점: Pipecat 같은 오픈 소스 프레임워크는 개발자들이 쉽게 접근하고 수정할 수 있어 유용함.
     * 기술 도입 고려사항: 새로운 기술을 도입할 때는 기존 시스템과의 호환성, 유지보수 비용 등을 고려해야 함.
     * 비슷한 프로젝트: Google의 Dialogflow나 Amazon의 Lex 같은 다른 음성 AI 솔루션도 있음.

        Hacker News 의견

     * 속도: 고객 서비스 AI에서 응답 시간을 몇 초로 단축했음. 속도가 모든 것을 이김.
     * 음성 추론: OpenAI의 gpt4o 출시 전에 Websocket Faster Whisper 구현. VAD 신뢰성 문제로 Push to talk 사용.
     * 크로스 플랫폼 VAD: Silero의 VAD 네트워크를 ONNX로 포팅한 크로스 플랫폼 브라우저 VAD 모듈 소개. Firefox에서도 작동.
     * 브라우저 TTS: 브라우저 텍스트-음성 변환 엔진이 점점 빨라지고 품질이 좋아짐. GPT-4o는 저지연을 위해 자동 음성 인식, 이해, 응답 생성 모델을 하나로 통합.
     * 앱 잠재력: Cerebrium의 티저 앱으로 보임. iPad에서 테스트 시 지연 시간이 1400ms에서 400ms로 다양했음.
     * 대화형 경험: 빠른 응답이 대화형 경험을 더 좋게 만듦. 짧은 문맥을 유지하여 짧은 응답 시간을 달성.
     * Whisper-dictation: llama-70b와 함께 Whisper-dictation 사용. 웹사이트 로드 시간 동안 말하기 완료.
     * 자연스러운 대화: VAD와 인터럽션 조정이 매우 자연스러움. 가장 자연스러운 대화 경험.
     * 공유: 다른 사람들이 해결책을 공유하도록 장려. 주말에 다양한 구현 방법을 살펴볼 계획.
     * 마케팅과 수학: 마케팅에서는 500이라고 하지만 수학적으로는 759라고 지적.
     * 빠른 인터페이스: 인터페이스가 매우 빠르고 인간과 거의 구별되지 않음. Cerebrium.ai에 찬사.
"
"https://news.hada.io/topic?id=15526","동화 검열 반대 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              동화 검열 반대 사례

     * 요약할 내용이 없음

        Hacker News 의견

     * 한스 크리스티안 안데르센의 ""인어공주""가 원래 이야기에서 일부 내용을 삭제하여 ""정화""되었다는 점이 흥미로움. 안데르센의 이야기도 프리드리히 드 라 모테 푸케의 ""운디네""에서 영감을 받았음.
     * ""정화""라는 단어를 사용하는 것이 불쾌함. 문학은 시대에 맞게 변화해야 하며, 고전 이야기를 현대적으로 재해석하는 것은 자연스러운 과정임.
     * 부모들이 자녀에게 너무 무서운 이야기를 보여주지 않으려는 경향이 놀라움. 적절한 두려움을 경험하게 하는 것이 중요함.
     * 초기 그림 형제의 이야기들은 단편적이고 혼란스러웠음. 원래 이야기의 ""원본""이라는 개념은 모호함.
     * 역사적으로 이야기의 수정은 항상 존재해왔음. 도덕과 사회적 규범은 시대에 따라 변하기 때문에, 현재의 시각으로 과거를 평가하는 것은 부적절함.
     * 그림 형제조차도 그들의 이야기를 더 넓은 대중에게 맞추기 위해 수정했음. 원래 이야기들은 어린이를 위한 것이 아니었음.
     * ""인어공주""의 원작은 자기 자신을 바꾸는 것이 나쁘다는 교훈을 담고 있음. 아이들에게 어두운 주제를 노출시키는 것도 중요하지만, 그들이 준비되었을 때만 가능해야 함.
     * 동화는 종종 잔인하고 잔혹하지만, 결국 긍정적인 힘이 승리함. 이는 21세기적인 시각임.
     * 개인적으로 동화에서 묘사된 악이나 폭력을 거의 경험하지 못했음. 동화가 현실을 반영한다고 주장하는 것은 오해일 수 있음.
     * ""그림화""라는 반대 효과를 발견했음. 많은 동화가 원래는 성인용이었음. 대중 매체가 너무 정화된다는 우려가 있지만, 틈새 매체가 항상 존재함.
"
"https://news.hada.io/topic?id=15527","Show HN: JavaScript로 구동되는 플립디스크 디스플레이 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show HN: JavaScript로 구동되는 플립디스크 디스플레이 제작

플립디스크 디스플레이 프로젝트

  빌드

    패널

     * 9개의 알파제타 패널을 3x3 그리드로 사용함.
     * 각 보드는 28x7 패널 두 개로 구성됨.
     * ATMEGA128 마이크로컨트롤러와 MELF 다이오드 수백 개 사용.
     * DIP 스위치로 주소와 전송 속도 설정 가능함.
     * 플립디스크 보드나 부품을 구하기 어려움.

    전원

     * 보드 하나당 24V 1A, 총 9A 필요함.
     * 24V 10A Meanwell 전원 공급 장치 사용.

    프레임

     * 80/20 알루미늄 익스트루전으로 프레임 제작.
     * PCB 스탠드오프를 프레임에 직접 고정함.
     * 디스크와 보드는 매우 취약함.

    케이블링

     * 각 열을 직렬로 연결하고, 모든 열을 체인으로 연결함.
     * 데이터 라인은 RS485 블록 터미널의 +/- 사용.
     * 전원 라인은 18AWG, 데이터는 22AWG 실드 케이블 사용.

    프로세싱

     * 음성, 비디오, 이미지를 처리하기 위해 Nvidia Orin Nano 사용.
     * Raspberry Pi도 가능하지만 프레임 속도가 떨어질 수 있음.
     * Dockerfile을 사용해 Jetson 6.0에 배포함.

  소프트웨어

    보드

     * RS485를 통해 통신함.
     * 각 프레임은 시작 바이트 [0x80], 플러시 [0x83] 또는 버퍼 [0x84], 보드 주소, 이미지 데이터, 종료 바이트 [0x8F]로 구성됨.
     * 이미지 데이터는 [0, 1] 상태만 가짐.
     * Node.js 라이브러리를 사용해 플립디스크 화면을 제어함.

    인터페이스

     * Expo 앱을 사용해 디스플레이 제어.
     * 앱에서 장면 일시 정지, 시작, 건너뛰기, 이전으로 이동 가능.
     * 장면 변수를 설정해 개인화 가능.

  디자인

     * 42x84 크기의 플립디스크 디스플레이 사용.
     * 3x5 픽셀 폰트 사용.
     * 이미지에는 Floyd-Steinberg 디더링, UI 요소에는 Bayer 4x4 디더링 사용.

  다음 단계: AI 벽

     * 새로운 멀티모달 입출력을 활용한 투명한 에이전트 인터페이스 목표.
     * 차세대 모델 출시를 기다리고 있음.

  결론

     * 프로젝트 협업이 즐거웠음.
     * 플립디스크가 취미로 더 접근 가능해지길 바람.

  # GN⁺의 의견

     * 플립디스크의 매력: LED 스크린과 달리 플립디스크는 독특한 시각적 효과와 소리를 제공해 매력적임.
     * 취약성: 디스크와 보드가 매우 취약해 조립과 사용 시 주의가 필요함.
     * 비용 문제: 플립디스크 패널의 비용이 높아 대규모 프로젝트에 부담이 될 수 있음.
     * 대안 기술: 비슷한 프로젝트를 고려한다면 LED 매트릭스나 전자잉크 디스플레이도 좋은 대안이 될 수 있음.
     * 미래 가능성: AI와 결합한 플립디스크 디스플레이는 새로운 인터랙티브 아트의 가능성을 열어줄 수 있음.

        Hacker News 의견

     * 디스크 수명: 디스크의 수명이 무한하지 않음. 디스크가 떨어지거나 고착될 수 있지만 작동 중일 때는 매우 멋짐.
     * 디스크 분해: 사무실에서 플립 닷 디스플레이를 분해하고 고착된 디스크 사진을 찍음.
     * DLP와 비교: 텍사스 인스트루먼트의 DLP는 플립 디스크 디스플레이의 축소판과 같음. DLP는 미세하게 기울어지는 반면, 플립 디스크는 180° 회전함.
     * 예술 작품: Breakfast Studio에서 플립 디스크 모듈을 사용한 놀라운 예술 작품을 제공함.
     * 패널 소싱: 패널을 어떻게 구했는지 궁금해함. eBay 외에는 산업용 가격으로 대량 구매해야 함.
     * 자바스크립트 사용: 자바스크립트가 이런 용도로 사용되는 것이 멋짐. 제임스 웹 망원경도 커스텀 자바스크립트 런타임을 사용함.
     * NOC 모니터: NOC 모니터로 유용할 수 있음. 문제가 발생하면 디스플레이가 업데이트되고 소음이 자연스럽게 주의를 끌어 알람이 필요 없음.
     * Touhou Bad Apple 애니메이션: 흑백 디스플레이에 Touhou Bad Apple 애니메이션이 필요함.
     * 펜 스테이션 보드: 펜 스테이션의 옛 스플릿 플랩 출발 보드를 원함. 클릭 소리가 매우 만족스러움.
     * 우든 미러: 데모 비디오의 시작 부분이 Ye Olde Wooden Mirror를 연상시킴.
     * 로우파이 디바이스: LED 매트릭스를 사용한 로우파이 디바이스를 만들었으나 저해상도 애니메이션을 위한 좋은 소프트웨어를 찾지 못함. 더 나은 라이브러리가 있으면 알고 싶음.
"
"https://news.hada.io/topic?id=15520","Local, first, forever","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Local, first, forever

     * Local-First 소프트웨어: 데이터를 주로 로컬에 저장하고, 필요할 때만 인터넷을 통해 동기화하거나 백업하는 소프트웨어
     * Local-First 의 문제점
          + 사용자가 데이터를 소유하고 통제할 수 있다는 점은 좋음
          + 하지만 여전히 여러 장치 간 온라인 동기화를 위해서는 동기화 서버가 필요함.
          + 회사가 망하면 동기화 서버도 사라지므로 동기화가 불가능해짐
          + 어떻게 해결해야 할까 ?

Dropbox를 이용한 해결책

     * 클라우드 동기화: Dropbox, iCloud Drive, OneDrive, Google Drive 등 다양한 클라우드 기반 파일 동기화 솔루션 사용 가능함
     * 장점: 많은 사람들이 이미 사용 중이고, 여러 구현체가 있어 대체 가능함
     * 단점: 파일 동기화는 단순한 프로토콜로, 동기화 이벤트나 충돌 해결 기능이 부족함

버전 1: 매우 단순한 방법

     * 상태를 파일에 저장하고 Dropbox로 동기화
     * 두 기기에서 상태를 변경하면 충돌 파일이 생김
     * CRDT(Conflict-free Replicated Data Types)를 사용하면 충돌 해결 가능
          + CRDT는 항상 병합할 수 있는 데이터 타입 모음
     * 충돌 파일을 열어 상태를 병합하고 다시 저장하는 방식으로 해결

버전 2: 클라이언트별 파일

     * 각 클라이언트에 고유 파일을 부여하여 충돌 방지
     * 다른 클라이언트의 파일이 변경되면 이를 감지하여 병합
     * 로컬에서만 수정하므로 Dropbox가 충돌을 보고하지 않음

버전 3: 연산 기반

     * CRDT가 Operation-based 라면 작업을 별도의 추가 전용 파일에 기록 가능
     * 각 클라이언트는 자신만의 파일에 기록하여 충돌 방지
     * 작업 로그가 길어지면 파일을 청크로 분할하여 동기화 효율성을 높임

결론

     * 사용자가 완전한 제어와 소유권을 가지는 로컬-퍼스트 애플리케이션을 구축하려면 데이터 동기화가 필요함
     * Dropbox와 같은 파일 동기화 서비스는 간단하지만 효과적인 동기화 방법을 제공
     * 맞춤형 솔루션만큼 실시간 동기화는 아니지만, 일상적인 동기화에는 충분함
     * 예를 들어, Apple Photos처럼 자신만의 사진을 하루 끝에 어디서든 볼 수 있는 정도로 충분함
     * 사용자가 자신의 클라우드를 사용하여 무료로 영구적인 동기화 가능

GN⁺의 의견

     * Local-First 소프트웨어의 중요성: 사용자가 데이터를 직접 소유하고 제어할 수 있어 개인정보 보호와 데이터 보안에 유리함.
     * 동기화 서비스의 한계: Dropbox와 같은 서비스는 기본적인 동기화는 가능하지만, 복잡한 동기화 시나리오에서는 한계가 있음.
     * CRDT의 활용: CRDT를 사용하면 충돌 해결이 용이해져 동기화의 신뢰성을 높일 수 있음.
     * 대체 솔루션: Syncthing과 같은 오픈 소스 동기화 솔루션도 고려해볼 만함.
     * 기술 도입 시 고려사항: Local-First 소프트웨어를 도입할 때는 동기화 서버의 안정성과 데이터 충돌 해결 방안을 충분히 검토해야 함.

        Hacker News 의견

     * 로컬-퍼스트 애플리케이션의 백엔드 동기화 서버를 로컬에서 호스팅할 수 있게 하는 것이 중요함: 특정 기능을 제공하기 위해 단순 파일 동기화로는 충분하지 않음. 사용자가 언제든지 ""workspace.zip""을 저장하고 ""server.exe/.bin""을 다운로드하여 백엔드를 자체 호스팅할 수 있게 함.
     * 로컬-퍼스트 애플리케이션의 수익화 어려움: Obsidian 모델처럼 기본 앱은 무료로 제공하고 네트워크 기능에 대해 요금을 부과하는 방식이 있음. Yjs를 사용하여 로컬-퍼스트 + 협업 앱을 구축하는 것을 추천함.
     * CRDTs가 항상 최선의 선택은 아님: 파일 동기화에는 적합할 수 있지만, 중앙 서버가 비즈니스 로직을 검증하고 병합 충돌을 해결하는 것이 더 나을 수 있음. 분산 상태 기계 접근법은 복잡하고 유지보수가 어려울 수 있음.
     * RemoteStorage 프로토콜: 모든 애플리케이션이 이를 구현하고 사용자가 자신의 RemoteStorage URL을 제공할 수 있음. 그러나 대부분의 구현이 유지보수되지 않음.
     * 클라우드 기반 파일 동기화 솔루션의 한계: 협업 소프트웨어나 실시간 소프트웨어에는 적합하지 않음. 벤더 종속 없이 협업 기능을 제공하는 모델이 필요함.
     * 로컬-퍼스트 소프트웨어의 장점: 개발이 쉬워지고 사용자 경험이 향상됨. Nuxt나 Next와 비슷한 개발자 경험을 제공하는 로컬-퍼스트 프레임워크가 등장할 것으로 예상됨.
     * 클라우드 스토리지의 위험성: 클라우드 제공자가 데이터를 삭제하거나 접근을 차단할 수 있음. 로컬-퍼스트 클라우드 스토리지를 사용할 때는 모든 파일을 다운로드하도록 설정해야 함.
     * PWA를 사용한 동기화 경험: AWS와 WebDAV를 사용하여 동기화하는 PWA를 구축했음. 동기화 시간을 줄이기 위해 읽기 및 쓰기 시간을 최소화하는 것이 중요함.
     * 클라우드 퍼스트 아이디어의 한계: 대륙 규모의 네트워크 중단이 발생하면 클라우드 퍼스트 아이디어의 문제점이 드러날 것임.
     * 모바일에서 로컬-퍼스트 동기화의 어려움: iPhone은 Dropbox와 같은 파일 동기화를 백그라운드에서 처리하기 어려움.
"
"https://news.hada.io/topic?id=15550","Show GN: 웹사이트나 유튜브 링크를 입력하면 요약을 해주는 Tilnote Gist","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: 웹사이트나 유튜브 링크를 입력하면 요약을 해주는 Tilnote Gist

   틸노트 기스트는 웹사이트 링크나 유튜브 링크를 입력하면 GPT-3.5 Turbo, GPT-4o를 활용하여 요약을 해주는 서비스입니다. 무료로 사용하실 수 있습니다.
     * 링크에 대해 불렛 포인트로 요약을 생성.
     * 요약을 바탕으로 3~4 문장 정도의 브리핑 생성.
     * 생성된 결과는 OpenAI TTS 또는 Azure Speech 서비스로 읽어주기 가능.
     * 요약에 노트를 활용하여 나의 생각을 더할 수 있음.

   콘텐츠가 쏟아지는 요즘 나에게 정말 필요한 콘텐츠를 발견하고 접근성을 높일 수 있게 돕습니다.

   마음껏 활용해 보세요~! 좋은 하루 되시길 바랄게요. 감사합니다.

   매우 유용하게 사용해온 기능이라 반갑네요!

   감사합니다 선생님 ^^
"
"https://news.hada.io/topic?id=15462","Ladybird 브라우저의 비상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Ladybird 브라우저의 비상

     * Ladybird는 Chrome 기반이 아닌 독립적인 웹 브라우저를 목표로 하는 오픈 소스 프로젝트임.
     * C++ 로 작성되었으며, 2-Clause BSD 라이선스를 따름.
     * SerenityOS 프로젝트의 일부로 시작되었으나, 개발자 Andreas Kling이 독립 프로젝트로 분리함.

  프로젝트 배경

     * Andreas Kling은 2018년 SerenityOS를 시작했으며, 이후 Ladybird 브라우저에 집중하기 위해 SerenityOS에서 물러남.
     * SerenityOS는 Kling이 재활 프로그램을 마친 후 시작한 프로젝트로, Apple과 Nokia에서 WebKit 기반 브라우저를 작업한 경험이 있음.

  프로젝트 진행 상황

     * Ladybird는 아직 초기 개발 단계(프리-알파)임.
     * 현재 Linux, macOS 및 기타 UNIX 계열 운영체제에서 실행 가능함.
     * Windows에서는 WSL2를 통해 실행 가능하지만, 독립적인 Windows 지원은 아직 없음.
     * 프로젝트는 현재 어떤 플랫폼에서도 바이너리를 제공하지 않으며, 소스를 직접 빌드해야 함.

  기능 및 성능

     * 기본 기능: URL/검색 바, 새로고침, 탭, 콘텐츠 확대/축소, 스크린샷, 앞/뒤로 이동 기능이 있음.
     * 부족한 기능: 북마크, 히스토리, 확장 기능, 비밀번호 관리, 인쇄, 이미지 저장 기능이 없음.
     * CSS 지원: CSS Selectors 테스트에서 레벨 1-3은 100%, 레벨 4는 53%를 기록함.
     * JavaScript 지원: 작동은 하지만 속도가 느림.
     * 개발자 도구: DOM 트리와 접근성 트리 검사기, 다양한 덤프 생성 기능, User-Agent 스푸핑 기능이 있음.

  향후 계획

     * 기존 라이브러리 사용: SerenityOS에서 자체 개발한 라이브러리 대신 기존 라이브러리를 사용할 계획임.
     * 개발자 참여: 프로젝트는 Discord 서버에서 개발 논의를 진행하며, 유지 관리자는 초대에 의해 선정됨.

GN⁺의 의견

    1. 기술적 도전: Ladybird는 독립적인 웹 브라우저를 목표로 하지만, 현재의 기능과 성능은 아직 주류 브라우저와 비교하기 어려움. 특히, 보안과 성능 측면에서 많은 개선이 필요함.
    2. 개발 커뮤니티: 프로젝트가 성공하려면 활발한 개발자 커뮤니티와 지속적인 기여가 필요함. Kling의 YouTube 채널과 Discord 서버는 이를 위한 좋은 출발점이 될 수 있음.
    3. 기존 브라우저와의 경쟁: Firefox나 Chrome과 같은 기존 브라우저와 경쟁하기 위해서는 많은 시간이 필요할 것으로 보임. 특히, 웹 표준 준수와 다양한 기능 지원이 중요함.
    4. 기술 선택: C++로 작성된 Ladybird는 성능 면에서 장점이 있을 수 있지만, Rust와 같은 현대적인 언어를 사용하는 것도 고려해볼 만함. Rust는 메모리 안전성과 성능 면에서 많은 장점을 제공함.
    5. 사용자 경험: 현재 Ladybird는 일반 사용자에게는 적합하지 않음. 사용자 경험을 개선하고, 더 많은 기능을 추가하는 것이 중요함.

        Hacker News 의견

     * Firefox 개발자: 웹 브라우저를 만드는 과정에 대한 블로그 포스트 공유.
     * Andreas Kling: Serenity OS에서 물러난 결정이 이해됨. Ladybird 브라우저는 일상적으로 사용 가능.
     * Discord 로그인 문제: Ladybird 브라우저가 페이지 렌더링은 잘하지만 속도와 안정성 부족.
     * 새로운 프로젝트 기대: 처음부터 작성된 코드가 모든 것을 즉시 해결할 것이라는 기대는 비현실적.
     * Rust 언어에 대한 의견: ""Rust로 다시 작성하라""는 댓글이 좌절감을 줌.
     * 프로젝트 참여 권장: 프로젝트가 흥미롭고 더 많은 브라우저 프로젝트가 필요함.
     * Firefox와 Ladybird 비교: Firefox의 결정에 불만이 있지만, Ladybird도 비슷한 문제를 겪을 것이라 예상.
     * 초보자 질문: 초보자가 프로젝트에 기여할 수 있는지에 대한 질문.
     * 커뮤니티 브라우저 기대: 커뮤니티가 만든 브라우저에 대한 기대감.
     * Ladybird와 Servo 성공 기원: Rust를 사용하는 Servo에 약간의 선호도.
     * Servo 상태 질문: Servo가 브라우저의 핵심인지, 브라우저를 만드는 데 얼마나 많은 작업이 필요한지 질문.
     * 하이브리드 브라우저 제안: Ladybird와 Firefox를 결합한 브라우저 제안.
     * 빌드 스크립트 인상: 빌드 스크립트가 완벽하게 작동하여 경쟁력 있는 브라우저로 발전할 가능성에 대한 희망.
"
"https://news.hada.io/topic?id=15474","아버지 사망 후 운영 및 매각한 회사 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      아버지 사망 후 운영 및 매각한 회사 (2018)

인생은 빠르게 변함

     * 아버지가 돌아가신 후, 인도에서 화학 제조업체인 Atlas를 운영하게 됨.
     * Atlas는 특수 향료 및 향수 화학물질을 제조하는 회사로, 주요 고객은 글로벌 대형 향료 및 향수 회사들임.
     * 아버지의 죽음 이후, Atlas를 13개월 동안 운영한 후 2018년 6월 1일에 매각됨.

새로운 직무의 첫날

     * 처음으로 Atlas 사무실에 방문했을 때, 팀원들이 나를 'Sir'라고 부름.
     * 팀원들에게 자신감을 주기 위해 아버지가 받았던 보고서를 요청함.
     * Atlas에서의 경험은 18년 전의 일이라 기억이 희미했음.

계획이 필요함

     * Atlas를 운영하기 위해 네 가지 옵션을 고려함:
         1. 회사를 직접 운영하며 대규모 다각화 기업으로 성장시키기.
         2. 회사의 자산을 매각하기.
         3. 젊고 야심 찬 사람을 찾아 Atlas를 운영하게 하기.
         4. 적절한 인수자를 찾을 때까지 회사를 운영하기.
     * 결국 네 번째 옵션을 선택함.

아무것도 모르는 상태에서 사업 운영하기

     * Atlas의 성장을 위해 기존 제품 판매와 새로운 제품 추가를 고려함.
     * Atlas의 주요 제품인 Coumarin 판매에 집중하기로 결정함.
     * 판매와 마진 개선을 통해 회사의 성장을 도모함.

전통적인 방식으로 성장하기 — 잠재 고객과 기존 고객에게 콜드 콜 및 이메일 보내기

     * 아버지의 이메일을 통해 연락처를 찾아내고, 업계 협회 및 컨퍼런스 웹사이트를 통해 잠재 고객 리스트를 작성함.
     * 콜드 콜과 이메일을 통해 Atlas의 제품을 홍보함.
     * 가격 경쟁력을 높여 시장 점유율을 확대함.

M&A 바이어들이 나타남

     * 아버지의 죽음 이후 여러 바이어들이 관심을 보임.
     * 다섯 명의 바이어와 대화를 나눔:
         1. Coumarin을 소량 생산하는 상장된 인도 기업.
         2. Atlas의 고객으로 수직 통합을 고려하는 기업.
         3. 미국에서 돌아온 아들을 위해 사업을 찾는 부유한 가정.
         4. 사모펀드가 지원하는 화학 회사.
         5. Coumarin을 제조하는 가족 소유의 화학 회사.
     * 최종적으로 다섯 번째 바이어와 계약을 체결함.

2018년 6월 1일 — Atlas 공식 매각

     * 2018년 6월 1일, Atlas가 공식적으로 매각됨.
     * 매각 후, Atlas 팀과 함께 공식 작별 인사를 나눔.

GN⁺의 의견

     * 경험의 중요성: 새로운 산업에 뛰어들 때, 기존 팀의 경험과 지식이 큰 도움이 됨.
     * 문화적 차이: 인도와 미국의 비즈니스 문화 차이를 이해하고 적응하는 것이 중요함.
     * M&A 전략: 인수합병 시, 팀의 안정성과 회사의 가치를 고려하는 것이 중요함.
     * 성장 전략: 기존 제품의 판매 확대와 가격 경쟁력을 통한 성장이 효과적일 수 있음.
     * 리더십: 리더로서 팀의 신뢰를 얻고, 명확한 비전을 제시하는 것이 중요함.

        Hacker News 의견

     * 아버지가 향수 회사와 거래를 했는데, 샘플 크기의 유명 향수를 가져오곤 했음. 원본보다 더 오래 지속되고 더 좋은 향이 나는 경우가 많았음. 향수뿐만 아니라 샴푸, 청소 제품 등 다양한 곳에 사용되는 것이 흥미로웠음.
     * 화학자로서 쿠마린을 알고 있었지만, 바닐린 대체물로 사용되는지는 몰랐음. 두 분자가 약간만 달라도 완전히 다른 기능을 할 수 있음. 이 글은 사실과 회상을 매끄럽게 연결한 훌륭한 글임.
     * 이 글은 정말 재미있었음. 몇 년 전 학교를 졸업하고 가족 사업에 참여했는데, 경제적/정치적 상황과 흥미로운 삼촌 때문에 어려움을 겪었음. 부패와 문화/계층 구조도 어려움을 더했음.
     * 저자가 이 글을 읽고 있다면, 왜 아버지가 후계 계획을 세우지 않았는지 궁금함. 가족 내에서 후계 문제에 대해 논의한 적이 있는지 알고 싶음.
     * MBA 시뮬레이터에 던져져서 산업과 회사를 안정시키고 성장시키는 과정을 경험해보고 싶음. 이 글을 쓴 저자에게 감사하며, 매우 통찰력 있는 글이었음.
     * 저자의 연설에서 'jugaad'라는 단어를 보고 찾아봤음. 해커 정신을 잘 나타내는 단어임.
     * 이 회사에 기계를 공급한 적이 있어서, 이런 글을 읽게 되어 기쁨. 세상은 작고 둥글다는 것을 느낌.
     * 마하라슈트라에는 성공적인 협동조합의 역사가 있음. 직원들이 협동조합을 형성할 기회를 가졌는지 궁금함.
     * 이 이야기는 볼리우드 영화로 만들면 좋을 것 같음.
     * 이 독특한 이야기를 공유해줘서 고마움. 일부 내용이 내 삶과 공감됨. 아버지가 후계 계획이 없어서 걱정임. 부패는 내 취향이 아님. 여러 번 도와주려 했지만 거절당했음. 미국의 의료 서비스가 어머니를 구할 수 있었을지 궁금함. 최선을 다했지만 어쩔 수 없었음.
"
"https://news.hada.io/topic?id=15544","창어 6호 달 샘플 귀환 임무, 달 뒷면 샘플 회수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      창어 6호 달 샘플 귀환 임무, 달 뒷면 샘플 회수

중국의 창어-6 달 탐사선, 달 뒷면에서 최초로 토양 샘플 회수

  주요 내용

     * 중국의 달 탐사 성과:
          + 중국이 세계 최초로 달의 뒷면에서 샘플을 회수하여 지구로 가져옴.
          + 창어-6 탐사선이 무인으로 임무를 수행함.
          + 샘플 회수는 중국 우주 프로그램의 중요한 성과로 평가됨.
     * 임무 세부 사항:
          + 창어-6 탐사선은 5월 3일 하이난성에서 발사됨.
          + 6월 2일 달의 뒷면에 착륙하여 샘플을 수집함.
          + 샘플은 남극-에이켄 분지에서 수집됨.
     * 과학적 중요성:
          + 달의 뒷면 샘플은 달과 지구의 초기 역사에 대한 비밀을 밝힐 수 있음.
          + 달의 뒷면은 지구의 보호를 받지 않아 충돌 흔적이 더 많음.
          + 샘플 분석을 통해 달의 지질학적 차이를 이해할 수 있음.
     * 향후 계획:
          + 중국은 이번 10년 동안 더 많은 달 탐사 임무를 계획 중임.
          + 국제 달 연구 기지를 건설할 계획이며, 러시아와 협력할 예정임.

  GN⁺의 의견

     * 과학적 가치:
          + 달의 뒷면 샘플은 지구와 달의 초기 충돌 역사를 이해하는 데 중요한 자료가 될 수 있음.
          + 새로운 샘플은 기존의 분석 기술을 적용하여 더 많은 정보를 얻을 수 있는 기회를 제공함.
     * 기술적 도전:
          + 달의 뒷면에서 샘플을 회수하는 것은 통신 문제 등 여러 기술적 도전이 있었음.
          + 이러한 도전을 극복한 것은 중국 우주 기술의 큰 진보를 의미함.
     * 국제 협력:
          + 중국이 국제 과학자들과 협력하여 샘플을 연구할 가능성이 있음.
          + 이는 글로벌 우주 연구 커뮤니티에 긍정적인 영향을 미칠 수 있음.
     * 미래의 우주 탐사:
          + 이번 성과는 향후 달 탐사 및 다른 행성 탐사에 대한 기대감을 높임.
          + 다른 국가들도 달 탐사에 더 많은 관심을 가질 것으로 예상됨.
"
"https://news.hada.io/topic?id=15473","내 Windows 컴퓨터가 더 이상 내 것처럼 느껴지지 않는다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   내 Windows 컴퓨터가 더 이상 내 것처럼 느껴지지 않는다

윈도우 컴퓨터가 더 이상 내 것처럼 느껴지지 않는 이유

    주요 요약

     * 윈도우의 상업화: 윈도우가 점점 더 상업적이고 개인적이지 않게 느껴짐.
     * 광고 통합: 윈도우에 광고가 통합되어 사용자 경험이 저하됨.
     * 업데이트 문제: 강제 업데이트와 설정 변경으로 인해 사용자 통제 부족.

    윈도우의 오프라인 영광의 시대

     * 과거의 윈도우: 과거에는 윈도우가 인터넷에 연결되지 않아, 마이크로소프트가 원격으로 시스템을 변경할 수 없었음.
     * 서비스 팩: 업데이트는 물리적 디스크를 통해 제공되었고, 사용자가 직접 변경하지 않는 한 시스템이 안정적으로 유지되었음.

    광고의 침투

     * 광고 도입: 윈도우에 광고가 도입되면서 사용자들이 불편함을 느끼기 시작함.
     * 광고 차단: 광고를 끄는 방법을 찾는 것이 새로운 과제가 되었음.

    업데이트로 인한 문제

     * 강제 업데이트: 자동 업데이트로 인해 시스템이 불안정해지고, 사용자가 원하지 않는 재부팅이 발생함.
     * 신뢰 부족: 윈도우를 서버나 NAS로 사용하는 것이 어려워짐.

    설정 변경 문제

     * 설정 유지: 업데이트 후 설정이 변경되는 문제가 발생함.
     * 사용자 통제 부족: 사용자가 설정을 유지할 수 없고, 마이크로소프트가 설정을 변경함.

    맥의 경험

     * 맥의 장점: 맥OS는 광고가 없고, 사용자 경험이 더 나음.
     * 소프트웨어 포함: 맥OS는 여러 유용한 소프트웨어가 포함되어 있음.

    리눅스의 사용자 존중

     * 리눅스의 자유: 리눅스는 무료로 제공되며, 광고가 거의 없음.
     * 사용자 통제: 사용자가 시스템을 완전히 통제할 수 있음.

    윈도우의 미래

     * 미래의 가능성: 윈도우가 더 나은 사용자 경험을 제공할 수 있는 방법을 찾기를 희망함.
     * 광고 없는 버전: 광고 없는 버전의 윈도우가 필요함.

GN⁺의 의견

     * 사용자 경험의 중요성: 운영체제는 사용자 경험이 매우 중요함. 광고와 강제 업데이트는 사용자 경험을 저해함.
     * 리눅스의 대안: 리눅스는 사용자에게 더 많은 자유와 통제를 제공함. 하지만 특정 소프트웨어 호환성 문제로 인해 모든 사용자가 쉽게 전환할 수 없음.
     * 맥OS의 장점: 맥OS는 광고가 없고, 안정적인 사용자 경험을 제공함. 하지만 가격이 높다는 단점이 있음.
     * 윈도우의 개선 필요성: 윈도우는 사용자 통제와 광고 문제를 해결해야 함. 광고 없는 버전의 출시가 필요함.
     * 기술 선택의 중요성: 새로운 기술을 도입할 때는 사용자 경험과 통제권을 고려해야 함.

   정말 이렇게까지 해도 미국에서 문제가 안되나 싶을정도로 광고와 다크패턴이 난무하게 된지 몇년이나 됐죠..

   작년부터 비슷한 느낌이 느껴져서 윈도우 지우고 리눅스 쓰고 있습니다.
   한국내 지원이 열악하다는점 빼면 상당히 만족하면서 쓰고 있습니다.
   혹시 hwp 지원이 필요하시다면 이거 진짜 좋습니다.
   https://news.hada.io/topic?id=10902

        Hacker News 의견

     * Windows의 제약: 시작 메뉴에서 '추천'을 제거할 수 없고, 웹 검색을 끌 수 없는 점, Edge 브라우저의 검색 제공자가 재설정되는 문제, OneDrive의 백업 알림 등으로 인해 개인 컴퓨터가 아닌 느낌을 받음.
     * Linux로 전환: 개인 PC에서 Windows를 버리고 Linux로 전환한 경험. 특히 Pop!_OS를 추천하며, Valve 덕분에 Linux 게임이 현실화되었다고 언급.
     * macOS와 Windows 경험: 1993년부터 2006년까지 Windows를 사용하다가 macOS로 전환. 최근에는 게임을 위해 PC를 구입했으나, TPM이 없어 Windows 11을 설치할 수 없다는 점에 실망. 다시 Linux로 전환을 고려 중.
     * 운영 체제 전환의 어려움: 운영 체제를 쉽게 바꾸지 않으며, Windows를 떠나는 사용자들은 Microsoft 제품에 대한 관심을 잃을 가능성이 높음.
     * 전자 기기의 소유권: 대부분의 전자 기기가 제조사에 의해 통제되는 느낌. Linux를 설치하면 그나마 개인 소유의 느낌을 받을 수 있음.
     * Linux의 사용자 존중: Ubuntu의 Snap 패키지 문제를 언급하며, Windows 사용자에게는 Mint와 같은 친숙한 대안을 추천.
     * Linux의 미래: 2024년이 Linux 데스크탑의 해는 아니지만, 디지털 생활의 통제권을 원하는 사람들에게는 중요한 해가 될 것이라고 언급.
     * Linux 전환의 어려움: Fusion 360과 같은 소프트웨어 호환성 문제, 다양한 해상도의 모니터 설정 문제, Nvidia의 출력 제한 등으로 인해 Linux로 완전히 전환하지 못함.
     * Windows의 소프트웨어 생태계: Windows의 소프트웨어 생태계 때문에 떠나기 어렵지만, 가능할 때마다 Linux를 사용하며 신선한 경험을 함.
     * Windows의 불만 사항: 솔리테어 게임 제거, Cortana, 광고, 강제 업데이트, 여러 계정 시스템, 두 개의 시스템 설정 화면, Windows 10 이후의 새로운 버전 등.
"
"https://news.hada.io/topic?id=15523","Reshot - 무료 아이콘 & 일러스트 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Reshot - 무료 아이콘 & 일러스트 모음

     * 40,000개 이상의 아이콘. 1,500개 이상의 벡터 일러스트
     * ""비용 없음. 출처표기 필요없음. 상업용도로 사용가능""
     * SVG, PNG, Vector 포맷으로 제공
     * 가입 필요없이 바로 다운로드 가능

   뭔가 너무 좋아보여서 의심의 눈초리로 들여다 봤는데
   Envato가 운영하는거네요.
   Envato Elements 라는 유료 구독형 서비스(월 $16.5)에서 1800만개쯤의 리소스를 무제한 다운로드 가능하게 제공하는데, 그중에 일부를 빼서 무료로 서비스하는듯 합니다.
"
"https://news.hada.io/topic?id=15575","R2R V2 - 프로덕션 준비된 오픈 소스 RAG 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     R2R V2 - 프로덕션 준비된 오픈 소스 RAG 엔진

     * 로컬 LLM 실험과 프로덕션 레벨 Retrieval-Augmented Generation (RAG) 시스템 사이의 격차를 메우기 위해 설계됨
     * 개발자를 위해 RESTful API를 중심으로 사용하기 쉽게 구축된 포괄적이고 최신 RAG 시스템을 제공

  주요 기능

     * 멀티모달 지원: .txt, .pdf, .json, .png, .mp3 등 다양한 파일 형식 지원.
     * 하이브리드 검색: 시맨틱 및 키워드 검색을 결합하여 관련성 향상.
     * 그래프 RAG: 관계를 자동으로 추출하고 지식 그래프를 구축함.
     * 앱 관리: 문서와 사용자를 효율적으로 관리하며 풍부한 관찰 가능성과 분석 기능 제공.
     * 클라이언트-서버: RESTful API 지원.
     * 구성 가능: 직관적인 구성 파일을 사용하여 애플리케이션을 프로비저닝할 수 있음.
     * 확장 가능: 빌더 + 팩토리 패턴을 통해 애플리케이션을 쉽게 확장 가능.
     * 대시보드: 사용자 친화적인 상호작용을 위한 오픈 소스 React+Next.js 앱인 R2R 대시보드 제공.

  R2R 대시보드

   오픈 소스 React+Next.js 대시보드를 사용하여 R2R과 상호작용 가능. 대시보드 Cookbook을 참조하여 시작할 수 있음.

        Hacker News 의견

     * 데이터 추출의 정확성과 효율성: RAG 시스템에서 데이터 추출 과정이 중요한 도전 과제임. 전통적인 OCR 접근법이 부족하여, 멀티모달 LLM + OCR 접근법을 사용하여 정확성과 일관성을 높임.
     * 유사한 스택 운영 경험: 2년 동안 유사한 스택을 운영해왔으며, Pgvector, HyDe, 웹 검색 + 문서 검색 등의 기술을 사용함. 로그와 분석을 포함한 좋은 대시보드가 있음.
     * 빠른 시작의 어려움: 빠른 시작이 실제로는 빠르지 않음. Docker Compose와 Postgres 이미지를 포함한 설정을 제공해야 함. 대시보드를 사용하려면 별도의 레포를 클론해야 하는 불편함이 있음.
     * 프로젝트의 복잡성: 프로젝트가 많은 요소를 포함하고 있지만 개발을 더 쉽게 만들지는 않음. SDK인지 앱 모음인지 혼란스러움. ""1 클릭"" 설치 경험을 제공하여 모든 기능을 미리보기 할 수 있도록 해야 함.
     * 정확성 검증: 답변의 정확성을 어떻게 검증할 수 있는지에 대한 질문. 답변이 생성된 과정을 추적할 수 있는 방법이 있는지 궁금해함.
     * 데이터 수집의 어려움: 많은 RAG 프로젝트에서 데이터 수집이 제대로 해결되지 않음. 대량의 HTML 문서를 시스템에 일괄적으로 수집하는 방법에 대한 질문.
     * 멀티모달 데이터 수집: 멀티모달 데이터 수집 과정에 대한 자세한 설명을 요청함. R2R이 현재 처리할 수 있는 데이터 유형과 비텍스트 데이터 유형의 임베딩 방법에 대한 질문.
     * 개발팀 최적화: 프로세스가 개발팀에게 어떻게 더 빠르고 최적화되었는지에 대한 설명을 요청함. MVP(최소 기능 제품) 개발 시간을 가속화할 잠재력이 큼.
     * 소스 코드와의 작업: 소스 코드를 이해할 수 있는 RAG 솔루션을 찾고 있음. 예를 들어, ""제출 버튼을 클릭할 때 호출되는 분석 이벤트""를 이해할 수 있는 기능을 원함.
     * Neo4j 사용 반대: Neo4j를 사용하지 않기를 원함. 리소스 소모가 크기 때문임.
     * 인기 있는 채팅 프론트엔드와의 통합: OpenWebUI와 같은 인기 있는 채팅 프론트엔드와의 통합 여부에 대한 질문.
"
"https://news.hada.io/topic?id=15570","뇌의 많은 노폐물, 이제 과학자들이 그 행방을 안다고 생각한다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   뇌의 많은 노폐물, 이제 과학자들이 그 행방을 안다고 생각한다

뇌의 쓰레기 제거 시스템

  뇌의 쓰레기 제거 시스템과 과학자들의 연구

     * 뇌에는 약 1700억 개의 세포가 있으며, 이 세포들은 일상적인 작업을 수행하면서 많은 쓰레기를 생성함.
     * 뇌가 건강을 유지하려면 이러한 쓰레기를 제거해야 함.
     * 최근 두 팀의 과학자들이 뇌의 쓰레기 제거 시스템에 대한 세부적인 설명을 담은 세 편의 논문을 발표함.
     * 이 연구는 뇌 질환을 더 잘 이해하고 치료하며 예방하는 데 도움이 될 수 있음.

  수면 중 느린 전기파의 역할

     * 논문들은 수면 중 느린 전기파가 뇌 깊은 곳에서 표면으로 세포 주변의 액체를 밀어내는 역할을 한다고 제안함.
     * 이 과정에서 복잡한 인터페이스가 액체 속의 쓰레기 제품을 혈류로 흡수하여 간과 신장으로 보내 제거함.
     * 제거되는 쓰레기 중 하나는 알츠하이머병 환자의 뇌에 끈적한 플라크를 형성하는 아밀로이드임.

  새로운 발견의 중요성

     * 알츠하이머병에서 뇌의 쓰레기 제거 시스템이 손상된다는 증거가 증가하고 있음.
     * 새로운 발견은 연구자들이 문제의 정확한 위치를 이해하고 이를 해결하는 데 도움이 될 수 있음.
     * 뇌의 배수 시스템을 복원하면 알츠하이머병의 발병을 예방할 수 있을지에 대한 질문이 제기됨.

  글림파틱 시스템의 역사

     * 10년 전, Iliff와 Nedergaard 박사는 뇌와 주변의 맑은 액체가 쓰레기 제품을 씻어내는 시스템의 일부라고 제안함.
     * 이 시스템을 글림파틱 시스템이라고 명명함.
     * 글림파틱 시스템은 집의 배관처럼 작동하며, 깨끗한 물이 들어오고 더러운 물이 나가는 방식임.

  느린 전기파의 발견

     * Kipnis와 그의 팀은 수면 중 뇌가 하는 일을 조사하면서 느린 전기파의 힘을 측정함.
     * 이 전기파가 신경 세포의 활동을 동기화하고 작은 펌프로 변환하여 액체를 뇌 표면으로 밀어내는 역할을 한다는 것을 발견함.

  인간에게 적용 가능성

     * 새로운 연구들은 뇌의 쓰레기 제거 시스템이 두 가지 단계로 작동함을 시사함: 하나는 쓰레기를 뇌를 둘러싼 뇌척수액으로 밀어내는 것, 다른 하나는 이를 림프계로 이동시켜 몸 밖으로 배출하는 것임.
     * 많은 새로운 발견이 아직 인간에게 확인되지 않았지만, 연구 결과는 알츠하이머병과 같은 신경퇴행성 질환의 원인을 이해하는 데 일치함.

GN⁺의 의견

    1. 뇌 건강의 중요성: 뇌의 쓰레기 제거 시스템을 이해하는 것은 알츠하이머병, 파킨슨병 등 다양한 신경퇴행성 질환을 예방하고 치료하는 데 중요한 단서가 될 수 있음.
    2. 수면의 역할: 수면 중 느린 전기파가 뇌의 쓰레기 제거에 중요한 역할을 한다는 발견은 수면의 중요성을 다시 한 번 강조함.
    3. 미래 연구 방향: 이 연구는 인간에게 적용 가능한지 확인하기 위한 추가 연구가 필요함. 특히, 인간과 동물의 해부학적 차이를 고려한 연구가 필요함.
    4. 기술적 응용 가능성: 느린 전기파를 유도하여 뇌의 쓰레기 제거를 촉진하는 기술이 개발된다면, 이는 다양한 뇌 질환의 예방 및 치료에 혁신적인 방법이 될 수 있음.
    5. 다양한 질환에의 적용: 뇌의 쓰레기 제거 시스템이 손상되면 알츠하이머병뿐만 아니라 파킨슨병, 두통, 우울증 등 다양한 질환에 영향을 미칠 수 있음. 이를 개선하는 방법을 찾는 것이 중요함.

        Hacker News 의견

     * 깊은 수면 부족이 알츠하이머와 치매 위험을 증가시킬 수 있다는 이론과 일치함: 깊은 수면이 부족하면 알츠하이머와 치매 위험이 증가할 수 있다는 연구 결과와 일치함.
     * 쥐 실험에서 소리와 빛 자극이 뇌의 청소를 촉진함: 쥐에게 소리와 빛 자극을 주어 뇌의 청소를 촉진하는 실험이 성공적이었음.
     * TMS(경두개 자기 자극)로 수면을 대체할 가능성: TMS 같은 방법으로 수면을 대체할 수 있을지에 대한 가능성을 제기함.
     * 뇌의 청소 시스템이 전자기파에 민감한 사람들을 설명할 수 있을지에 대한 질문: 뇌의 청소 시스템이 제대로 작동하지 않는 것이 전자기파에 민감한 사람들을 설명할 수 있을지에 대한 질문을 던짐.
     * 뇌의 청소를 돕는 방법이 다양한 장애를 예방할 수 있을 가능성: 뇌의 청소를 돕는 방법이 다양한 장애를 예방할 수 있을 가능성을 제시함.
     * 바이노럴 비트가 뇌의 청소를 촉진할 수 있을지에 대한 생각: 바이노럴 비트가 뇌의 청소를 촉진할 수 있을지에 대한 생각을 공유함.
     * 쥐에게 빛과 음악을 보여주어 뇌의 청소를 유도한 것이 놀라움: 쥐에게 빛과 음악을 보여주어 뇌의 청소를 유도한 것이 놀랍고, 이를 이용한 장치가 개발되기를 바람.
     * 수면 중 뇌의 청소 이론에 대한 논리적이고 설득력 있는 설명: 수면 중 뇌의 청소 이론에 대한 논리적이고 설득력 있는 설명을 제시함.
     * 수면 중 느린 전기파가 뇌의 청소를 유도함: 수면 중 느린 전기파가 뇌의 청소를 유도한다는 설명을 제시함.
     * 인터넷에 대한 농담: 인터넷에 대한 농담을 함.
     * 이 연구가 매우 중요함: 이 연구가 매우 중요하다는 의견을 제시함.
     * 짧은 깊은 낮잠이 집중력을 회복시키는 경험: 짧은 깊은 낮잠이 집중력을 회복시키는 경험을 공유함.
     * 수면 중 머리 각도가 뇌의 청소에 미치는 영향: 수면 중 머리 각도가 뇌의 청소에 미치는 영향을 궁금해함.
"
"https://news.hada.io/topic?id=15525","$2 마이크로컨트롤러에서 SIMD 가속 컴퓨터 비전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $2 마이크로컨트롤러에서 SIMD 가속 컴퓨터 비전

$2 마이크로컨트롤러에서 SIMD 가속 컴퓨터 비전 구현

  ESP32-S3의 성능

     * ESP32-S3는 240MHz 듀얼 코어 CPU와 WiFi, Bluetooth Low Energy 라디오를 포함한 다양한 주변 장치를 갖춘 저렴한 마이크로컨트롤러임.
     * 이 칩은 128비트 SIMD 명령어를 지원하며, 이를 활용하면 성능을 크게 향상시킬 수 있음.

  SIMD 가속 FAST 코너 검출기 구현

     * FAST 코너 검출기를 SIMD 명령어를 사용해 가속화하여 QVGA(320x240) 프레임을 약 6ms에 처리할 수 있게 됨.
     * 이를 통해 레퍼런스 구현 대비 약 두 배의 성능을 달성함.

  어셈블리 언어와 레지스터 할당기

     * ESP32-S3에서 어셈블리 언어를 배우고, 칩의 제한 사항을 극복하기 위해 기본적인 레지스터 할당기(basm)를 작성함.
     * SIMD 명령어를 사용해 16개의 픽셀을 한 번에 처리하는 함수를 구현함.

  픽셀 데이터 처리

     * 픽셀 데이터를 처리하기 위해 중심 픽셀과 주변 픽셀의 차이를 비교하는 작업을 수행함.
     * ESP32-S3의 제한 사항을 극복하기 위해 픽셀 데이터를 적절히 변환하는 방법을 고안함.

  성능 향상

     * SIMD 가속 FAST 코너 검출기를 통해 처리 속도를 약 220% 향상시킴.
     * 이를 통해 ESP32-S3가 30fps VGA 스트림을 실시간으로 처리할 수 있게 됨.

GN⁺의 의견

     * ESP32-S3의 활용성: 저렴한 가격에 비해 강력한 성능을 제공하는 ESP32-S3는 다양한 IoT 및 임베디드 시스템 프로젝트에 유용함.
     * SIMD 명령어의 중요성: SIMD 명령어를 활용하면 저사양 하드웨어에서도 높은 성능을 달성할 수 있음.
     * 어셈블리 언어 학습: 어셈블리 언어를 배우면 하드웨어의 세부적인 동작을 이해하고 최적화할 수 있는 능력을 기를 수 있음.
     * 제한 사항 극복: 하드웨어의 제한 사항을 극복하는 과정에서 창의적인 문제 해결 능력을 키울 수 있음.
     * 실시간 컴퓨터 비전: 저비용 마이크로컨트롤러에서도 실시간 컴퓨터 비전 작업을 수행할 수 있는 가능성을 보여줌.

        Hacker News 의견

     * 실리콘이 평균 커피보다 저렴한 것은 멋진 일임. 어쩌면 칩이 너무 저렴한 것이 아니라 커피가 너무 비싼 것일 수도 있음.
     * ESP32-CAM 보드는 실용적인 컴퓨터 비전 프로젝트를 지원함.
     * 관심이 있다면 Edge Impulse 제품을 확인해보길 권장함.
     * Edge Impulse는 딥러닝, 컴퓨터 비전, DSP 작업을 최적화함.
     * TensorFlow, PyTorch, JAX 모델을 업로드하면 최적화된 C++ 라이브러리를 받을 수 있음.
     * Edge Impulse는 다양한 임베디드 하드웨어에 맞춘 모델 훈련 스튜디오를 제공함.
     * ESP32-S3에서 SIMD에 대한 짧은 글도 참고할 만함.
     * 여러 개의 ESP32를 병렬로 사용하여 더 높은 해상도와 프레임 속도를 처리하는 것이 가능할지 궁금함.
     * FAST 특징 검출기를 SIMD로 가속화하여 성능을 220% 향상시켰음.
     * ARMv7과 ARMv8에는 선택적인 SIMD 명령어 세트 확장이 있음.
     * Orrin Nano는 40 TOPS를 제공하며, 이는 Copilot+에 충분함.
     * 적외선 빛을 가시광선으로 변환하는 방법이 연구됨.
     * Raspberry Pi Pico에서 VGA/TV 디스플레이를 구현하는 PicoVGA 라이브러리가 있음.
     * Rust로 ESP32 컨트롤러를 사용하는 것이 가능한지 궁금함.
     * ESP32가 VLIW 슬롯을 가지고 있는지, 더 긴밀한 명령어 패키징이 가능한지 궁금함.
     * SIMD가 SMT보다 해당 유형의 처리에서 더 우수함.
     * 더 비싸고 좋은 것을 선호함. Intel UpSquared가 있음.
"
"https://news.hada.io/topic?id=15567","포스 덱 미니: 독립형 CPU를 탑재한 휴대용 Forth 컴퓨터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  포스 덱 미니: 독립형 CPU를 탑재한 휴대용 Forth 컴퓨터

Forth Deck mini: 휴대용 Forth 컴퓨터

  주요 특징

     * 40 x 4 문자 LCD: 작은 화면이지만 충분한 정보 표시 가능.
     * 56 버튼 QWERTY 키보드: 타이핑에 적합한 키 배열.
     * 6.6 Wh LiPo 배터리: 6시간 사용 가능.
     * 8비트 CMOS 논리 CPU: 8~14 MHz 클럭 주파수.
     * 32 KB ROM, 32 KB RAM, 최대 256 KB EEPROM: 충분한 저장 공간.
     * RS-232 인터페이스: 4800 baud 속도.
     * I2C 버스: 확장 가능.
     * 16비트 Forth 2012 시스템: 최신 Forth 표준 지원.

  구성 요소

     * 키보드와 디스플레이: 리본 케이블로 My4TH 보드에 연결.
     * 배터리 충전 회로: 선택 사항.
     * 키보드 PCB: 74HC574 버스 래치 사용해 추가 디지털 출력 확보.
     * 키보드 배열: 56개의 키, 12mm 간격.

  소프트웨어 지원

     * My4TH ROM: 버전 1.0부터 키보드와 LCD 자동 인식.
     * 포스 텍스트 편집기: 내장.
     * 게임 ""2048"": 내장.

  제작 정보

     * 키트 구매: 배터리와 충전 회로는 포함되지 않음.
     * My4TH 컴퓨터 보드 필요: 필수 구성 요소.

  라이선스 정보

     * Creative Commons Attribution-ShareAlike 4.0 International License: 하드웨어 및 소프트웨어.
     * GNU General Public License, Version 3: 교차 어셈블러 ""myca"".

GN⁺의 의견

     * 교육적 가치: Forth Deck mini는 소프트웨어와 하드웨어를 직접 다루며 학습할 수 있는 좋은 도구임.
     * 휴대성: 내장 배터리로 인해 어디서든 사용할 수 있어 편리함.
     * 레트로 감성: 70~80년대 홈 컴퓨터와 유사한 경험을 제공해 흥미로움.
     * 확장 가능성: I2C 버스를 통해 다양한 확장이 가능해 유연함.
     * 제작 난이도: 일부 구성 요소는 조립이 어려울 수 있어 초보자에게는 도전적일 수 있음.

        Hacker News 의견

     * 마이크로코드 CPU: 이 컴퓨터의 CPU는 소수의 논리 칩과 EEPROM으로 구성되며, 데이터와 주소 버스는 8비트지만 NOR 유닛은 1비트로 동작함. 마이크로코드는 8비트 덧셈을 수행하기 위해 반복되어야 함.
     * 하드웨어 시프터: 다이어그램에서 하드웨어 시프터를 찾으려 했으나 없었음. EEPROM의 룩업 테이블을 사용하여 시프트를 수행함.
     * Novix NC4000: 명령어의 비트가 칩 내부의 다양한 멀티플렉서와 유닛을 직접 제어하는 Novix NC4000 CPU 디자인이 흥미로움.
     * 최적화된 디스크리트 CPU: 최적화된 디스크리트 CPU에 대한 읽기를 좋아함.
     * 16개의 논리 IC: 이 CPU는 16개의 논리 IC만 사용하며, 덧셈기를 포함하지 않고 1비트 NOR 게이트만 ALU 기능으로 가짐.
     * TRS-80 Model 100: 현대에 TRS-80 Model 100 같은 ""취미"" 컴퓨터를 만드는 데 걸림돌이 무엇인지 궁금함.
     * 40x8 LCD 디스플레이: 40x8 LCD 디스플레이와 최고의 키보드를 가졌던 TRS-80 Model 100의 키보드가 대부분의 공간을 차지했지만 사용 가능했음.
     * 커스텀 키보드 커뮤니티: 커스텀 키보드 커뮤니티가 원하는 키보드를 만들 수 있는 것처럼 보임.
     * Psion 5 키보드: Psion 5는 매우 사용 가능한 키보드와 더 나은 디스플레이를 가졌음. 취미로 만들 수 있을지 모르겠음.
     * 버튼 매트릭스: 버튼 매트릭스를 가진 ""덱""들이 있지만, 실제 키보드라고 할 수 없다고 생각함.
"https://news.hada.io/topic?id=15459","AI 에이전트 구축에 더 이상 LangChain을 사용하지 않는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AI 에이전트 구축에 더 이상 LangChain을 사용하지 않는 이유

     * Octomind는 AI 에이전트를 사용하여 Playwright에서 엔드 투 엔드 테스트를 자동으로 생성하고 수정함.
     * 초기에는 LangChain 프레임워크를 사용했으나, 시간이 지나면서 LangChain의 높은 추상화 수준이 문제를 일으킴.

  LangChain의 문제점

     * LangChain의 추상화는 초기에는 유용했으나, 복잡한 요구사항이 생기면서 코드 이해와 유지보수가 어려워짐.
     * LangChain의 내부 구조를 이해하고 디버깅하는 데 많은 시간이 소요됨.
     * 예를 들어, 단순한 영어 단어를 이탈리아어로 번역하는 코드에서도 LangChain을 사용하면 복잡도가 증가함.

  LangChain의 추상화 문제

     * LangChain은 여러 추상화를 겹쳐 사용하여 코드의 복잡성을 증가시킴.
     * 이러한 추상화는 코드의 이해와 디버깅을 어렵게 만듦.
     * 예를 들어, API에서 JSON 데이터를 가져오는 간단한 작업에서도 LangChain을 사용하면 복잡도가 증가함.

  개발 팀에 미친 영향

     * 복잡한 에이전트 아키텍처를 구현하려 할 때 LangChain이 제한 요소로 작용함.
     * LangChain을 제거한 후, 요구사항에 맞게 자유롭게 코딩할 수 있게 됨.

  AI 애플리케이션 구축에 프레임워크가 필요한가?

     * LangChain은 초기에는 유용했으나, 장기적으로는 프레임워크 없이 개발하는 것이 더 나았을 것임.
     * 대부분의 AI 애플리케이션은 간단한 코드와 몇 가지 외부 패키지로 충분히 구현 가능함.
     * 에이전트 사용 패턴이 확립될 때까지는 간단한 접근 방식을 권장함.

  모듈형 빌딩 블록을 사용한 빠르고 간결한 개발

     * 프레임워크는 구조를 강제하지만, AI 애플리케이션은 아직 확립된 사용 패턴이 없음.
     * 모듈형 빌딩 블록 접근 방식은 간단한 저수준 코드를 선호하며, 개발 속도를 높임.
     * 벡터 데이터베이스와 같은 모듈형 구성 요소를 사용하여 코드베이스를 간결하고 적응 가능하게 유지함.

  GN⁺의 의견

     * LangChain의 한계: LangChain의 높은 추상화는 초기에는 유용하지만, 복잡한 요구사항이 생기면 오히려 장애물이 될 수 있음.
     * 모듈형 접근의 장점: 모듈형 빌딩 블록 접근 방식은 코드의 이해와 유지보수를 용이하게 하며, 개발 속도를 높임.
     * 프레임워크의 필요성 재고: 모든 AI 애플리케이션에 프레임워크가 필요한 것은 아니며, 간단한 코드와 외부 패키지로도 충분히 구현 가능함.
     * 개발 속도의 중요성: AI 분야는 빠른 실험과 프로토타이핑이 중요하며, 프레임워크는 이를 제한할 수 있음.
     * 미래의 에이전트 사용 패턴: 에이전트 사용 패턴이 확립될 때까지는 간단한 접근 방식을 유지하는 것이 좋음.

   실패한 아키텍처라는 말이 돌더니 긱뉴스에서도 보게 되네요

        Hacker News 의견

     * 첫 상업용 LLM 에이전트를 작년 10월/11월에 구축했음: LangChain을 사용하지 않고 에이전트를 처음부터 직접 구축하는 것이 더 나은 결과를 얻는 데 도움이 되었음.
     * LLM 프레임워크의 복잡성: LangChain 같은 LLM 프레임워     * ""진짜"" 키보드의 부재: ""진짜"" 키보드가 등장하지 않는 이유가 궁금함. 돈이 문제일 수 있지만, 취미에 돈을 쓰는 사람들을 보면 그것만이 이유는 아님.
크는 자바나 파이썬의 복잡성을 도입하는 경향이 있음.
     * My4th Light 보드: 저자의 My4th Light 보드를 5개 제작했음. 관심 있는 사람은 연락 바람.
     * LangChain과 ChatGPT의 비교: LangChain은 ChatGPT가 등장하기 전에 만들어졌지만, ChatGPT가 더 나은 대화형 모델을 제공하면서 LangChain의 필요성이 줄어듦.
     * Forth 데모 비디오: Forth에 대한 작은 데모 비디오를 계획 중이지만 아직 진행하지 못했음.
     * LangChain의 가치 논란: LangChain은 개발자와 LLM 사이에 위치하려 했으나, 실질적인 가치를 추가하지 못하고 불필요한 추상화를 도입함.
     * AlphaSmart: AlphaSmart는 작은 LCD 디스플레이와 배터리로 오랫동안 작동하는 타자기 같은 장치였음. 프로그래밍 버전이 필요함.
     * 좋은 추상화와 나쁜 추상화: 좋은 추상화는 애플리케이션 로직을 다루고, 나쁜 추상화는 필요한 작업을 추상화하여 통찰력을 잃게 함.
     * 저전력 컴퓨팅: 저전력 컴퓨팅의 AlphaSmart가 필요함. ""진짜"" 키보드, 저전력 디스플레이, 인터넷 연결 없음이 이상적임.
     * 에이전트 사용의 문제점: 콘텐츠 생성에 에이전트를 사용하는 것보다 순차적인 프롬프트를 사용하는 것이 더 쉽고 효과적임.
     * 내장된 Forth 인터프리터: Forth 인터프리터가 내장된 컴퓨터의 선례가 있음. 예를 들어 Jupiter Ace와 Open Firmware.
     * Ragged 프레임워크 소개: LLM과 쉽게 연결할 수 있는 경량 커넥터인 Ragged를 소개함. ORM과 유사한 통합 인터페이스를 제공함.
     * Factor 언어: Forth로 작성된 Factor의 방언을 원함. Factor는 스크립팅에 사용할 수 있는 더 높은 수준의 Forth임.
     * LangChain의 유용성 부족: LangChain의 접근 방식이 흥미롭지만, 실제로는 LLM 런타임 라이브러리를 직접 사용하는 것이 더 효율적임.
     * 빠르게 변하는 에이전트 프레임워크: 사용 중인 에이전트 프레임워크가 빠르게 변하고, 작은 버전 변경도 현재 설정을 깨뜨릴 수 있음.
     * LangChain의 복잡성 문제: LangChain은 단순한 사용 사례에는 너무 복잡하고, 복잡한 사용 사례에는 적응하기 어려움. 직접 코딩하는 것이 더 나은 경우가 많음.
"
     * 변경 가능성: 이 프로젝트는 마음에 들지만, 모든 회로도와 소프트웨어가 있어서 취향에 맞게 변경하기 쉬움.
     * ESP32 박스: Forth나 납땜에 관심이 없다면, $30에 꽤 유능한 ESP32 박스를 구할 수 있음.
     * Oric-1: Oric-1을 떠올리게 함.
"
"https://news.hada.io/topic?id=15518","Let's Encrypt의 메모리 안전성 강화: ntpd-rs 배포","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Let's Encrypt의 메모리 안전성 강화: ntpd-rs 배포

     * Let's Encrypt는 운영 체제와 네트워크 인프라의 많은 부분이 C와 C++ 같은 안전하지 않은 언어로 작성된 것에 대해 우려 해왔음
     * CA 소프트웨어는 메모리 안전한 Golang으로 작성되었지만, OS/네트워크 부분은 메모리 안전성이 부족하여 패치가 필요한 취약점이 일상적으로 발생
     * 2020년에 Prossimo 프로젝트를 시작하여 중요한 소프트웨어 인프라를 메모리 안전하게 만드는 것을 목표로 함

  Prossimo 프로젝트의 주요 성과

     * Rustls TLS 라이브러리, Hickory DNS, River 리버스 프록시, sudo-rs, Linux 커널의 Rust 지원, ntpd-rs 등 다양한 소프트웨어 구성 요소에 투자함
     * 최근 Let's Encrypt 인프라에 Prossimo의 첫 번째 메모리 안전 소프트웨어인 ntpd-rs를 배포함

  ntpd-rs의 중요성

     * 대부분의 운영 체제는 정확한 시간을 결정하기 위해 네트워크 시간 프로토콜(NTP)을 사용함
     * 시간 트래킹은 OS의 중요한 작업이며, 인터넷과 상호작용하게 되므로 NTP 구현의 보안은 중요함
     * 2022년 4월 Prossimo는 메모리 안전하고 더 안전한 NTP 구현인 ntpd-rs 작업을 시작
     * 2024년 4월 ntpd-rs가 Let's Encrypt의 스테이징 환경에 배포되었고, 현재는 프로덕션 환경에서 사용 중

  향후 계획

     * 향후 몇 년 동안 Let's Encrypt 인프라에서 C 또는 C++ 소프트웨어를 메모리 안전한 대안으로 교체할 계획
          + OpenSSL과 그 파생 제품을 Rustls로 교체.
          + DNS 소프트웨어를 Hickory로 교체.
          + Nginx를 River로 교체.
          + sudo를 sudo-rs로 교체.

GN⁺의 의견

     * 메모리 안전성의 중요성: 메모리 안전한 언어로 작성된 소프트웨어는 보안 취약점을 줄이는 데 큰 도움이 됨.
     * Rust의 장점: Rust는 메모리 안전성을 보장하면서도 높은 성능을 제공하여 많은 보안 민감 소프트웨어에 적합함.
     * 커뮤니티의 역할: 오픈 소스 프로젝트는 커뮤니티의 기여가 중요하며, Let's Encrypt의 경우도 예외가 아님.
     * 기술 도입 시 고려사항: 새로운 기술을 도입할 때는 기존 시스템과의 호환성, 학습 곡선 등을 고려해야 함.
     * 보안 강화의 필요성: 인터넷 인프라의 보안을 강화하는 것은 전체 인터넷 생태계의 안전성을 높이는 데 기여함.

        Hacker News 의견

     * NTPD를 Rust로 구현하는 아이디어: NTPD를 Rust로 구현하는 아이디어에 관심이 있음. 성능에 대한 자료를 찾고 있으며, 특히 네트워크 문제 상황에서 시간 동기화 성능에 관심이 있음. Chrony와의 비교도 보고 싶음.
     * NTP 문제의 복잡성: NTP는 아직 완전히 해결된 문제가 아니며, 메모리 안전성보다 성능이 더 중요함. Chrony가 시스템 기본 제공 NTP보다 훨씬 나아서 사용 중임.
     * Rust 애호가의 의견: Rust 애호가로서, ntpd-rs가 Chrony의 성능에 근접해야 고려할 가치가 있음.
     * 메모리 안전성 논의: 메모리 안전성을 강조하는 것이 이상하게 느껴짐. NTPD는 공격 벡터가 적고, 메모리 문제 없이 잘 작동 중임. 더 중요한 컴포넌트를 메모리 안전한 언어로 재작성하는 것이 필요함.
     * JSON 의존성 질문: 왜 NTPD에 JSON 의존성이 있는지 궁금함.
     * BGP 재작성 제안: 다음으로 BGP를 메모리 안전한 언어로 재작성하는 것이 좋겠음.
     * NTPsec 사용 여부: NTPsec을 실제로 사용하는 사람이 있는지 궁금함.
     * NTP 서버 문제: NTP의 문제는 클라이언트가 아니라 위조된 UDP 패킷을 처리해야 하는 서버에 있음. NTPD가 TCP 전용이 될 가능성에 대해 회의적임. 10년 전부터 공용 stratum 3 서버 운영을 중단함.
"
"https://news.hada.io/topic?id=15536","앤터프라이즈 AI 로드맵: AI 개발 플랫폼 환경, 구매자의 ROI, 사용 사례 평가 방식 변화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         앤터프라이즈 AI 로드맵: AI 개발 플랫폼 환경, 구매자의 ROI, 사용 사례 평가 방식 변화

     * 미국 시장조사기관 CB Insights가 6월 21일 발행한 자료
     * 레거시 머신러닝 기업, 활력 잃음
          + DataRobot, Dataiku 같은 엔터프라이즈 머신러닝 개발 플랫폼은 과밀화된 시장서 고통
          + Dataiku는 2022년 12월 다운라운드, DataRobot은 수차례 구조조정
     * 기업은 생성형 AI 모멘텀 활용
          + Scale, Hugginf Face, Databricks 같은 기업은 생성형 AI에 모멘텀 확보하면서 인력 증가, 자금 조달 측면서 앞서감
          + Databricks, 제품 기능 확장 위해 2023년 6월 LLMOps 스타트업 MosaicML 13억 달러에 인수, 1년 뒤 데이터 관리 스타트업 Tabular 10억 달러 이상에 인수
     * 빅테크 기업, 새로운 스타트업과 함께 성장
          + 빅테크, 생성형 AI 시대 위한 제품군 구축
          + Google, Gemini 모델과 서드파티/오픈 모델에 액세스하도록 Vertex AI 개발 플랫폼 확장
          + AWS, 생성형 AI 개발 위한 Amazon Bedrock 관리형 서비스 발표
     * ROI 평가
          + AI 개발 플랫폼 기업 고객과 인터뷰해 ROI 평가 방법 확인: 생산성 향상, 비용 절감
          + 구매자는 아웃풋 증가(출시된 기능 수), 작업 속도, 전반적인 팀 효율성 등 생산성 향상 측정 위해 구체적인 지표 살펴봄
          + 생산성 향상과 밀접한 관련이 있는 것: AI 도구에 따른 직접적인 비용 절감
     * 엔터프라이즈 AI 개발 미래
          + 생성형 AI는 아직 엔터프라이즈 도입 초기 단계
          + 가장 일반적인 사용 사례: 콘텐츠 제작, 기업 지원 보조, 자연어 검색, 설계와 데이터 생성, 코드 생성, 문서 자동화
          + CB Insights 데이터와 구매자 인터뷰 기반 6가지 시사점
               o 독점 데이터 활용하면 차별화된 사용 사례 가능
               o 빅테크 기업 이점: 규모, 인프라, 기존 고객 관계
               o 엔터프라이즈, 오픈 소스 모델 탐색해야 하는 압박 직면
               o 작업별 모델 채택 증가
                    # 소규모 언어 모델(SLM), 일반 모델보다 학습 속도가 빠르고 실행 비용 저렴
                    # 특정 작업에만 사용하면 성능이 기업에 충분, 경우에 따라 LLM보다 더 뛰어날 수도 있음
                    # 데이터 프라이버시와 보안 향상에 잠재력 있음
               o 생성형 AI 분야가 성숙해지면서 통합 다가옴(예: M&A)
               o 엔터프라이즈 AI 지출 더 엄격히 관리
"
"https://news.hada.io/topic?id=15510","의미 엔트로피를 이용한 대형 언어 모델의 환각 탐지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      의미 엔트로피를 이용한 대형 언어 모델의 환각 탐지

대형 언어 모델에서 의미적 엔트로피를 이용한 환각 감지

  요약

     * 대형 언어 모델(LLM): ChatGPT나 Gemini 같은 LLM 시스템은 뛰어난 추론 및 질문 응답 능력을 보여주지만, 종종 잘못된 출력이나 근거 없는 답변을 생성하는 '환각' 문제를 가짐.
     * 환각 문제: 법적 선례의 조작, 뉴스 기사에서의 거짓 정보, 의료 분야에서의 위험 등 다양한 문제를 초래함.
     * 기존 해결책의 한계: 감독이나 강화 학습을 통한 진실성 유도는 부분적으로만 성공적임.
     * 새로운 방법: 통계에 기반한 엔트로피 기반 불확실성 추정기를 제안하여 임의적이고 잘못된 생성(혼합)을 감지함. 이는 단어의 특정 순서가 아닌 의미 수준에서 불확실성을 계산함.
     * 적용 가능성: 데이터셋과 작업에 관계없이 작동하며, 작업에 대한 사전 지식이 필요 없고 새로운 작업에도 강력하게 일반화됨.

  주요 내용

    환각 문제의 중요성

     * 환각 정의: LLM이 제공된 소스 콘텐츠에 충실하지 않거나 비논리적인 내용을 생성하는 것.
     * 혼합의 예시: 동일한 질문에 대해 무작위로 다른 답변을 생성하는 경우.
     * 기존 문제: 잘못된 데이터로 훈련된 경우, 보상을 추구하기 위해 거짓말하는 경우, 추론이나 일반화의 체계적 실패 등.

    의미적 엔트로피를 이용한 혼합 감지

     * 방법 개요: 입력이 임의적이고 근거 없는 답변을 생성할 가능성이 높은 경우를 정량적으로 측정함.
     * 의미적 엔트로피: 문장의 의미를 기준으로 엔트로피를 계산하여 불확실성을 추정함. 높은 엔트로피는 높은 불확실성을 나타냄.
     * 클러스터링: 의미가 유사한 답변을 클러스터링하여 엔트로피를 계산함.

    평가 및 결과

     * 데이터셋: TriviaQA, SQuAD, BioASQ, NQ-Open, SVAMP 등 다양한 데이터셋에서 평가됨.
     * 모델: LLaMA 2 Chat, Falcon Instruct, Mistral Instruct, GPT-4 등 다양한 모델에서 테스트됨.
     * 성능: 의미적 엔트로피가 기존의 단순 엔트로피나 감독 학습 방법보다 우수한 성능을 보임.

    전반적인 성능

     * AUROC: 모델의 오류 예측 성능을 측정하는 지표로, 의미적 엔트로피가 가장 높은 점수를 기록함.
     * AURAC: 혼합을 일으킬 가능성이 높은 질문을 거부함으로써 남은 질문에 대한 정확도를 측정하는 지표로, 의미적 엔트로피가 가장 높은 성능을 보임.

  GN⁺의 의견

    1. 실용성: 의미적 엔트로피는 다양한 데이터셋과 작업에 적용 가능하여 실용성이 높음. 특히 새로운 작업에도 강력하게 일반화됨.
    2. 기술적 기여: 기존의 단순 엔트로피 계산 방식의 한계를 극복하고, 의미 수준에서 불확실성을 측정하는 새로운 접근 방식을 제안함.
    3. 미래 가능성: 이 방법은 추후 추상적 요약이나 대화형 LLM의 신뢰성 향상에도 적용 가능성이 있음.
    4. 한계: 시스템적으로 잘못된 데이터를 학습한 경우나 체계적인 추론 오류를 해결하지는 못함. 이는 별도의 접근 방식이 필요함.
    5. 경쟁 기술: 다른 불확실성 추정 방법과 비교하여 의미적 엔트로피가 우수한 성능을 보이지만, 특정 상황에서는 다른 방법이 더 효과적일 수 있음.

        Hacker News 의견

     * 수학적 문제: LLM의 출력 분포를 평가하는 접근법이 수학적으로 문제가 있음.
     * 유사성 예시: 톰 크루즈와 테일러 스위프트의 예시를 통해 단어 벡터 공간에서의 유사성과 정확성의 차이를 설명함.
     * 분포 특성: 출력 분포의 특성을 모르면 정확성을 평가할 수 없다는 의견.
     * 통계 모델: ANN의 불확실성을 평가하는 통계 모델이 있지만, LLM 규모에서는 비현실적일 수 있음.
     * 환각 문제: 대부분의 환각이 매우 그럴듯하고 설득력 있게 보이지만 실제로는 잘못된 정보임.
     * 논리적 시스템: LLM이 논리적 시스템을 포함하여 훈련되어야 한다는 의견.
     * 훈련 과정: 기존 모델을 사용해 논리적 관계를 생성하고, 이를 새로운 LLM 훈련에 사용해야 함.
     * 언어의 역할: 언어는 지능의 기본이 아니며, 일관된 시뮬레이션이 더 중요하다는 의견.
     * 환각과 진실: LLM이 진실과 거짓과는 무관하다는 의견.
     * 환각의 본질: LLM이 환각을 일으키는지 여부를 알기 위해서는 이미 정답을 알고 있어야 함.
     * AI 마케팅: AI를 텍스트 생성 도구로 마케팅하는 것이 더 나을 수 있음.
     * 민감도 분석: 입력을 변경하여 출력의 의미가 어떻게 달라지는지 보는 방법이 흥미로울 수 있음.
     * 엔론 사례: 엔론 사태 이후 'bullshitometer'를 사용해 예측할 수 있었던 사례를 언급함.
     * 정량적 측정: 입력이 임의의 답변을 생성할 가능성을 정량적으로 측정하는 방법을 개발함.
     * 환각 최소화: 환각을 최소화하기 위해 다양한 수준의 조치를 취해야 한다는 의견.
     * 지식 그래프: 지식 그래프와 FAQ를 사용해 환각을 줄이려는 시도.
     * 이중 LLM: 두 번째 LLM을 사용해 의미적 동등성을 감지하는 것이 불필요한 복잡성을 초래할 수 있음.
"
"https://news.hada.io/topic?id=15493","업무에서의 Zig vs. Rust : 우리의 선택은 Zig","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    업무에서의 Zig vs. Rust : 우리의 선택은 Zig

     * 수억 명의 사용자를 대상으로 서비스를 제공하는 회사(비공개)로, 핵심 시스템에 C와 C++ 사용 중
     * 2023년 한해 동안 Rust와 Zig 중 어떤 언어를 채택할지에 대한 논의 진행
     * 주요 고려 사항:
         1. C 언어와의 상호 운용성
         2. 엔지니어 확장성 (채용, 유지보수 등)
     * 최종 선택: Zig
     * 이 선택 과정은 대규모 회사에서 ""코드가 다양한 대상에서 실행되고 수억 명의 사용자에게 영향을 미칠 때 고려하는 요소""들을 잘 보여준다고 생각해서 공유함

  C 상호 운용성의 중요성

     * 재작성하려는 라이브러리는 모든 플랫폼(웹, 모바일, VR 헤드셋, 게임 콘솔, 데스크톱 등)에서 사용될 가능성이 있음
     * 따라서 C API 제공과 FFI를 통한 사용이 모든 플랫폼에서의 실행을 보장하는 유일한 방법

  주요 토론 이슈

    Rust

    1. 당시 Zig보다 25배 이상 인기 있음 (설문 조사 및 서브레딧 기준)
    2. 더 오랜 기간 안정적인 상태 유지
    3. Rust Foundation의 산업계 후원이 안정적으로 보임
    4. 우수한 LSP와 개발자 경험
    5. Cargo: 업계 최고 수준의 패키지 관리자
    6. 메모리 안전성과 ""정의되지 않은 동작 없음"" (완전히 사실은 아니지만 논의 중 언급됨)
    7. C++에서 벗어나려면 메모리 오류와 정의되지 않은 동작 가능성이 없는 Rust가 더 적합
    8. nightly 버전에서 SIMD 지원
    9. WASM 지원이 Zig만큼 원활
   10. 성능면에서 Zig와 대등하거나 일부 경우 ""상당히 빠름""

      Rust의 C 상호 운용성:

     * Rust는 자체 생태계가 풍부하여 C 상호 운용성의 중요성이 상대적으로 낮음
     * Python 바인딩 등 고수준 언어와의 연동 가능성 우수
     * Rust 사용의 이점이 C 바인딩 제공의 단점을 상쇄한다는 주장

    Zig

    1. C/C++ 또는 TypeScript 배경 개발자가 쉽게 학습 가능
    2. C 배경 개발자에게 즐거운 코딩 경험 제공
    3. Zig 컴파일러가 C와 C++ 컴파일도 가능하여 의존성 관리와 C ABI 라이브러리 구축에 유리
    4. 다양한 대상 플랫폼 지원이 매우 용이 (zig targets 명령어 호평)
    5. 빠른 소프트웨어 작성이 쉬움 (네이티브 Vector 지원, SIMD 활용 등)
    6. 기존 디버거와 호환
    7. 우수한 빌드 시스템 (기존 Makefile보다 100배 개선)
    8. Zig Software Foundation의 높은 재정 투명성
    9. 기존 C++ 코드의 점진적 포팅 및 ""Zig화"" 가능
   10. 모든 대상 플랫폼에 대한 링킹/컴파일 문제 해결 확실

  결론

     * Zig가 기존 코드베이스 포팅 및 모든 플랫폼 호환성 보장에 필요한 시간과 노력을 크게 감소시킴
     * 예상 외 결정 요인들:
         1. 학습 용이성과 채용이 예상보다 큰 영향을 미침 (Zig에 유리)
         2. 툴체인 관련 개발자 경험이 중요한 역할
         3. Zig 컴파일러와 빌드 시스템이 기존 코드베이스와의 호환성으로 인해 크게 도움됨
         4. Rust의 생태계, 커뮤니티, 메모리 안전성 보장은 예상보다 영향력이 적음

   zig 에서 한가지 큰 문제는 컴파일시 사용자가 작성한 코드에 에러가 있을때 정확한 위치나 정보를 알려주지 않는다는 것입니다. 표준 라이브러리까지만 알려주는거 같습니다.

   고려사항과 토론 이슈, 결론 등을 읽어보니 애초에 Rust가 필요한 환경이 아니었던 것 같네요. 음식 배달하는데 오프로더 몰고 다니는 배달원 본 적 있나요?
   네이티브 언어로 개발을 해야하긴 하지만 memory-critical한 작업이 아닌거면 개발하기 편한 쪽을 고르는게 맞죠. 이걸 뭐 한 해 동안 토론할 것 까지야...

   한국에서는 다 의미없는 얘기라는 점이 슬프지만 흥미롭습니다...

   수억 명의 사용자를 대상....

   어느회사인지 궁금하네요. 인증이라는 형식적인 절차에 구애받지 않는 회사인것 같은데... 부럽...

   일년에 한번씩은 zig를 둘러보곤 하는데, 거의 매년 breaking change가 있었던 것 같습니다;;
   게다가 언어 자체적으로는 큐나 쓰레드간 메시지 전달 라이브러리가 준비되어 있지 않아서, 러스트의 성숙도에 비하면 아직은 갈길이 먼것 같습니다.
   물론 사용자가 OS API들에 빠삭하면 큰 문제가 아닐 수 있겠습니다만…

   Rust가 Zig보다 25배 이상 인기 있는데 채용은 Zig가 유리하군요.

   1번 항목인 C/C++ 또는 TypeScript 배경 개발자가 쉽게 학습 가능 때문인 것 같아요

   C 배경 개발자에게 즐거운 코딩 경험 제공
   빠른 소프트웨어 작성이 쉬움 (네이티브 Vector 지원, SIMD 활용 등)

   파이썬을 처음 배울 때의 느낌이네요

   Bun을 Zig언어로 개발하는 걸 보면서 왜 하필 Zig 였을까 궁금했었는데 Rust와의 좋은 비교글 덕분에 이해가 되네요. 그나저나 C언어는 정말 영원불멸할 것 같습니다.

   재밌는 글 잘 읽었습니다! node 와 bun 그리고 deno 에 대해 찾아보다가 bun 이 zig 라는 생소한 언어로 쓰여졌다길래 어떤언어인지 궁금했었는데 맛보기 잘 하구갑니다!
"
"https://news.hada.io/topic?id=15491","HH70, 최초의 고온 초전도 토카막 첫 플라즈마 달성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HH70, 최초의 고온 초전도 토카막 첫 플라즈마 달성

     * 데이터베이스 연결 오류 발생
          + 데이터베이스 연결 시 오류가 발생할 수 있음
          + 원인으로는 잘못된 데이터베이스 설정, 네트워크 문제, 데이터베이스 서버의 과부하 등이 있음
          + 해결 방법으로는 설정 파일을 확인하고, 네트워크 상태를 점검하며, 데이터베이스 서버의 상태를 모니터링하는 것이 필요함

GN⁺의 의견

     * 데이터베이스 연결 오류는 시스템의 가용성에 큰 영향을 미칠 수 있음
     * 데이터베이스 설정 파일을 주기적으로 점검하고 백업을 유지하는 것이 중요함
     * 네트워크 문제를 예방하기 위해 안정적인 네트워크 환경을 구축하는 것이 필요함
     * 데이터베이스 서버의 과부하를 방지하기 위해 성능 모니터링 도구를 사용하는 것이 좋음

   오류 났네요

        Hacker News 의견

     * 중국 게임 회사가 핵융합 기술에 투자: MiHoYo가 상하이 기반의 Energy Singularity에 6500만 달러를 투자했음. 이 회사는 핵융합 기술, 토카막 장치 및 운영 제어 시스템에 관여하고 있으며, 2024년까지 자체 토카막 장치를 구축할 계획임.
     * 토카막 에너지의 선행 사례: Tokamak Energy는 이미 2015년에 유사한 프로젝트를 진행했음. (기사 내용이 틀렸다는 주장)
     * 핵융합 에너지 비용: 핵융합으로 생산되는 에너지의 비용은 핵분열과 비슷하거나 약간 더 높을 것으로 예상됨. 하지만 핵분열의 확산 위험이나 오염 위험이 없음. 태양광과 풍력이 초기 대규모 자본 투자 없이도 저렴해지면서 정부가 핵융합에 투자하는 것이 타당한지에 대한 의문 제기.
     * 핵융합의 기본 원리 질문: 플라즈마에서 더 많은 열 에너지를 수확해야 하는지, 플라즈마가 실제로 융합이 일어나는지, 그리고 융합 장치가 어떻게 열을 수집하고 전기로 변환하는지에 대한 질문.
     * 핵융합이 지구 온도에 미치는 영향: 핵융합이 대량으로 사용되면 지구 온도가 상승할 가능성에 대한 질문.
     * 물리학 지식이 부족한 사람을 위한 설명: 핵융합 기술의 중요성에 대한 설명 요청.
     * 독립적 지적 재산권: ""HH70이 독립적인 지적 재산권을 가지고 있으며, 현지화율이 96%를 초과한다""는 문구의 의미에 대한 질문.
     * LK99 기억: LK99와의 차이점에 대한 질문.
     * 서방 지도자들에게 경고: 이 사건이 서방 지도자들에게 스푸트니크나 아폴로 11호 수준의 경고가 되어야 한다는 주장.
     * 무의미함 주장: 이 사건이 무의미하고 중요하지 않다는 주장.
"
"https://news.hada.io/topic?id=15508","수천 가구 옆에 위치한 Apple의 비밀 실리콘 제조 공장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    수천 가구 옆에 위치한 Apple의 비밀 실리콘 제조 공장

애플의 비밀 반도체 공장과 주민 건강 문제

  3250 Scott Blvd와 산타클라라 스퀘어 아파트

     * 2015년 초, 애플은 캘리포니아 산타클라라의 3250 Scott Blvd에서 비밀리에 반도체 제조 활동을 시작함.
     * 공장은 수천 가구와 가까운 거리에 위치해 있었으며, 유해한 용매 증기와 독성 가스를 외부 공기로 배출함.
     * 공장은 단층 건물이었고, 인근 아파트는 4층 건물로, 공장 배출물이 아파트 내부로 유입될 가능성이 높았음.

  주민 건강 문제

     * 2020년, 애슐리 조빅은 해당 아파트에 거주하며 용매와 가스 노출로 인해 응급실에 방문하게 됨.
     * 조빅은 공장 배출물이 자신의 집과 몸 안에 존재한다는 것을 발견함.
     * 조빅은 다양한 증상으로 인해 여러 병원을 방문하고, 다양한 검사를 받았으나, 모든 증상이 화학물질 노출과 일치함.

  애플의 법적 문제

     * 애플은 공장 운영 중 여러 차례 환경, 건강, 안전, 화재 코드 위반으로 적발됨.
     * 2020년, 조빅은 공장 배출물로 인해 심각한 건강 문제를 겪었으며, 이는 애플의 공장 배출물과 관련이 있음.
     * 애플은 공장 배출물로 인해 인근 주민들에게 지속적인 피해를 주었으며, 이는 법적 문제로 이어짐.

  환경 및 안전 문제

     * 애플은 공장에서 다량의 유해 물질과 폐기물을 배출함.
     * 공장 배출물에는 벤젠, 아세톤, 포름알데히드 등 다양한 유해 화학물질이 포함되어 있었음.
     * 애플은 공장 배출물 관리에 소홀했으며, 이는 인근 주민들의 건강에 심각한 영향을 미침.

  GN⁺의 의견

     * 환경 문제: 애플의 공장 배출물 관리 소홀은 심각한 환경 문제를 야기함. 이는 기업의 환경 책임을 강조하는 사례로 볼 수 있음.
     * 주민 건강: 공장 배출물로 인한 주민 건강 문제는 기업의 사회적 책임을 강조하는 중요한 사례임. 기업은 인근 주민들의 건강을 보호할 책임이 있음.
     * 법적 대응: 애플의 법적 문제는 기업이 환경 및 안전 규정을 준수하지 않을 경우 발생할 수 있는 법적 위험을 보여줌. 이는 다른 기업들에게도 중요한 교훈이 될 수 있음.
     * 기술적 고려사항: 반도체 제조 공정에서 발생하는 유해 물질 관리는 매우 중요함. 기업은 이를 철저히 관리하고, 인근 주민들의 건강을 보호해야 함.

        Hacker News 의견

    해커뉴스 댓글 요약

     * 사용자 A: 새로운 기술 도입이 초기에는 어려움.
     * 사용자 B: 오픈 소스 프로젝트 참여가 큰 도움이 됨.
     * 사용자 C: 코드 리뷰를 통해 많은 것을 배울 수 있음.
     * 사용자 D: 협업 도구 사용이 생산성을 높임.
     * 사용자 E: 지속적인 학습이 중요함.
     * 사용자 F: 문제 해결 능력이 중요함.
     * 사용자 G: 다양한 언어를 배우는 것이 유익함.
     * 사용자 H: 커뮤니티 참여가 성장에 도움됨.
     * 사용자 I: 실전 경험이 이론보다 중요함.
     * 사용자 J: 코드 품질 유지가 중요함.
     * 사용자 K: 테스트 자동화가 시간을 절약함.
     * 사용자 L: 좋은 문서화가 프로젝트 성공에 기여함.
     * 사용자 M: 멘토링이 큰 도움이 됨.
     * 사용자 N: 피드백을 적극적으로 수용하는 자세가 필요함.
     * 사용자 O: 다양한 프로젝트 경험이 중요함.
     * 사용자 P: 최신 기술 트렌드를 따라가는 것이 중요함.
     * 사용자 Q: 팀워크가 프로젝트 성공에 중요함.
     * 사용자 R: 코드의 가독성이 중요함.
     * 사용자 S: 효율적인 시간 관리가 필요함.
     * 사용자 T: 버그를 빨리 찾는 것이 중요함.
     * 사용자 U: 클린 코드 작성이 중요함.
     * 사용자 V: 지속적인 코드 개선이 필요함.
     * 사용자 W: 다양한 도구 사용이 유익함.
     * 사용자 X: 코드 리뷰가 성장에 도움됨.
     * 사용자 Y: 오픈 소스 기여가 경력에 도움됨.
     * 사용자 Z: 문제 해결을 위한 창의적 접근이 필요함.
     * 사용자 AA: 다양한 기술 스택 경험이 유익함.
     * 사용자 AB: 코드의 재사용성이 중요함.
     * 사용자 AC: 프로젝트 관리 능력이 필요함.
     * 사용자 AD: 팀 내 소통이 중요함.

   이 요약은 초급 소프트웨어 엔지니어가 이해하기 쉽게 작성되었으며, 각 의견이 명확하게 전달되도록 노력함.
"
"https://news.hada.io/topic?id=15458","도널드 서덜랜드 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              도널드 서덜랜드 사망

  부고: 도널드 서덜랜드

    도널드 서덜랜드 사망

     * 캐나다 배우 도널드 서덜랜드가 88세의 나이로 오랜 병환 끝에 사망함.
     * 그의 아들 키퍼 서덜랜드는 ""아버지가 세상을 떠났다""며 ""영화 역사상 가장 중요한 배우 중 한 명""이라고 언급함.
     * 서덜랜드는 50년 이상의 경력 동안 약 200편의 영화에 출연함.

    동료 배우들의 추모

     * 배우 롭 로우는 서덜랜드를 ""우리 시대의 위대한 배우 중 한 명""이라고 칭함.
     * 캐리 엘위스는 서덜랜드의 죽음에 ""마음이 아프다""고 인스타그램에 메시지를 남김.
     * 제인 폰다는 서덜랜드와의 추억을 회상하며 ""마음이 아프다""고 전함.

    경력과 주요 작품

     * 서덜랜드는 캐나다 뉴브런즈윅에서 태어나 런던에서 연극을 공부함.
     * 초기에는 영국 영화와 TV에서 작은 역할을 맡았으며, 1967년 영화 '더티 더즌'과 1970년 영화 'MAS*H'로 주목받음.
     * 1980년대에는 '오디너리 피플'에서 자살 시도한 십대의 아버지 역할로 출연함.
     * 2000년대에는 '더티 섹시 머니'와 '커맨더 인 치프' 같은 TV 시리즈에 출연함.

    정치적 활동과 사회적 메시지

     * 서덜랜드는 베트남 전쟁 반대 시위에 참여하는 등 정치적 활동을 펼침.
     * '헝거 게임: 모킹제이 - 파트 2'에서 독재자 스노우 대통령 역할을 맡아 사회적 메시지를 전달함.

    개인적 소회

     * 서덜랜드는 배우들이 많은 돈을 벌게 된 현재의 상황에 대해 언급하며, 자신은 돈을 벌기 위해 배우가 되지 않았다고 밝힘.
     * 그는 연기가 열정적인 일이며, 은퇴는 배우에게 '죽음'과 같다고 표현함.

    회고록 출간 예정

     * 서덜랜드의 회고록 'Made Up, But Still True'가 11월에 출간될 예정임.

  GN⁺의 의견

     * 도널드 서덜랜드는 다양한 역할을 통해 영화와 TV에서 큰 영향을 미친 배우임.
     * 그의 정치적 활동과 사회적 메시지는 많은 사람들에게 영감을 줌.
     * 서덜랜드의 경력은 초급 소프트웨어 엔지니어들에게도 열정과 헌신의 중요성을 상기시켜줌.
     * 그의 회고록은 그의 삶과 경력을 더 깊이 이해할 수 있는 좋은 기회가 될 것임.
     * 서덜랜드의 작품을 통해 다양한 연기 스타일과 캐릭터 구축 방법을 배울 수 있음.

        Hacker News 의견

     * Wilhelm Reich 역할: Kate Bush의 'Cloudbusting'에서 Wilhelm Reich를 연기한 그의 비언어적 연기가 인상적임.
     * 다양한 영화: 그의 다양한 영화들이 떠오르지만, 특히 'The Italian Job (2003)'에서의 짧은 출연이 기억에 남음.
     * M.A.S.H.의 Hawkeye Pierce: 'M.A.S.H.'에서 Hawkeye Pierce 역할이 큰 인상을 남겼으며, 이후로 권위와 잘 어울리지 않게 됨.
     * Invasion of The Body Snatchers와 The Eye of the Needle: 'Invasion of The Body Snatchers'와 'The Eye of the Needle'에서의 연기가 그를 정의함.
     * Kelly's Heroes: 어릴 때 TV에서 'Kelly's Heroes'를 보고 그를 좋아하게 됨. 항상 출연작을 빛나게 하는 배우였음.
     * Pride and Prejudice (2005): 'Pride and Prejudice (2005)'에서 아버지 역할을 훌륭하게 소화함. 감정이 잘 전달됨.
     * Hunger Games: 젊은 세대에게는 'Hunger Games'로 처음 알게 됨. Bass Reeves에서의 마지막 작품이 아쉬움.
     * Don't Look Now (1973): 'Don't Look Now (1973)'에서의 연기가 가장 기억에 남음.
     * Virus: 'Virus'라는 영화에서 처음 본 기억이 남. 영화는 평이 좋지 않지만 어린 시절 무서웠음.
"
"https://news.hada.io/topic?id=15512","줄리안 어산지, 미국과의 플리 딜로 석방 합의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       줄리안 어산지, 미국과의 플리 딜로 석방 합의

줄리안 어산지, 미국과의 플리 딜로 석방 예정

  주요 내용

     * 줄리안 어산지: 위키리크스 창립자 줄리안 어산지가 미국 법무부와의 플리 딜을 통해 석방될 예정임.
     * 기소 내용: 어산지는 국가 방위 정보를 획득하고 공개한 혐의로 기소되었음.
     * 석방 조건: 어산지는 영국 감옥에서 5년을 보낸 후, 플리 딜에 따라 호주로 돌아갈 예정임.
     * 역사적 배경: 어산지는 2009년부터 체시 맨닝과 함께 아프가니스탄 전쟁, 이라크 전쟁, 국무부 케이블, 관타나모 수용소 관련 정보를 공개했음.
     * 법적 절차: 어산지는 북마리아나 제도 미국 지방법원에서 62개월 형을 선고받고, 영국에서 복역한 기간을 인정받아 석방될 예정임.
     * 추가 정보: 어산지는 2019년 에콰도르 대사관에서 체포되기 전까지 7년간 자가 망명 생활을 했음.

  GN⁺의 의견

     * 법적 및 윤리적 논란: 어산지의 정보 공개는 국가 안보와 언론 자유 사이의 복잡한 문제를 제기함. 이는 정보 공개의 윤리적 경계에 대한 논의를 촉발할 수 있음.
     * 기술적 영향: 위키리크스 사건은 사이버 보안과 정보 보호의 중요성을 강조함. 소프트웨어 엔지니어는 보안 프로토콜과 데이터 보호의 중요성을 이해할 필요가 있음.
     * 정치적 파장: 어산지 사건은 국제 정치와 외교 관계에 영향을 미침. 이는 국가 간의 법적 협력과 갈등을 보여주는 사례임.
     * 미래 전망: 어산지의 석방이 향후 정보 공개와 관련된 법적 판례에 어떤 영향을 미칠지 주목할 필요가 있음. 이는 정보 공개의 법적 기준을 재정립할 수 있음.

        Hacker News 의견

     * 많은 사람들이 불법 행위 자체보다 내부 고발 행위에 더 신경 쓰는 것에 놀라움. 이는 그들이 법의 지배를 중요하게 여기지 않음을 나타냄.
     * 그는 전설적인 인물이며, 미래의 내부 고발자들에게 영감을 줄 것임. 그의 유출과 재판은 사법 시스템의 부패를 폭로함.
     * 이상적인 세상에서는 그의 정치적 동기에 의한 구금에 연루된 정부 관계자들을 조사하고 책임을 물을 것임. 그러나 우리는 아직 그 세상과 거리가 멀음.
     * 기소 거래가 선례로 작용하는 방식에 대한 의문. 이는 다른 기자들이 기밀 정보를 수집하고 게시하는 행위로 기소될 수 있는지에 대한 우려를 제기함.
     * 그는 이미 사실상 정치적 죄수였음. 미국은 그를 통해 충분한 본보기를 보였다고 생각함. 미국의 전쟁 범죄를 폭로하면 이런 일이 일어날 것임.
     * 세 주요 정부에게 정치적으로 현명한 결정이며, 이 문제를 의제에서 제거함. 이는 어느 쪽도 승리하지 않는 제로섬 결과임.
     * 미국이 아산지를 미국으로 송환하여 법의 지배를 무시하고 무기한 구금하려 했다는 통념을 고려할 때, 이 상황이 이해되지 않음.
     * 그가 다음 12개월 내에 실수를 저질러 새로운 체포 영장이 발부될 가능성에 대한 의문.
     * 정보는 자유로워야 하며, 미국의 전쟁 범죄를 폭로하는 것은 불법이 되어서는 안 됨.
     * 최근 Lockbit의 주장과 관련하여, DOJ의 발표 시점이 이상하다고 생각함. 비록 관련이 없더라도 LB가 이를 승리로 주장할 가능성이 있음.
"
"https://news.hada.io/topic?id=15584","Show GN: Minimal Paged Attention","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: Minimal Paged Attention
"
"https://news.hada.io/topic?id=15551","Figma Slides - 디자이너와 팀을 위한 프레젠테이션 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Figma Slides - 디자이너와 팀을 위한 프레젠테이션 도구

     * 디자인 모드: 간단한 인터페이스에서 시작해, Auto Layout, Advanced Properties, 공유 라이브러리 등 고급 디자인 기능을 사용할 수 있음.
     * 라이브 슬라이드: 실시간 투표, 정렬 척도, 투표 기능을 통해 양방향 대화와 팀 정렬을 유도할 수 있음. 라이브 프로토타입을 삽입해 디자인 상호작용을 공유할 수 있음.
     * 템플릿과 테마: 브랜드에 맞는 프레젠테이션을 템플릿과 테마를 사용해 쉽게 제작할 수 있음. 단일 슬라이드와 그리드 뷰를 전환해 시각적으로 구조화할 수 있음.
     * 그리드 뷰: 전체 프레젠테이션을 한눈에 볼 수 있는 그리드 뷰를 통해 슬라이드를 그룹화하고 섹션을 쉽게 이동할 수 있음.
     * AI 기반 텍스트 조정: AI 도구를 사용해 텍스트의 톤을 짧거나 길게, 더 전문적이거나 캐주얼하게 조정할 수 있음.
     * 발표자 뷰: 발표자 노트와 다음 슬라이드를 미리 볼 수 있는 발표자 뷰를 통해 자신감 있게 발표할 수 있음.

  Figma Slides의 장점

     * 협업 강화: Figma와 FigJam의 협업 정신을 결합해 팀이 함께 프레젠테이션을 제작할 수 있음.
     * 사용자 친화적: 누구나 쉽게 사용할 수 있도록 설계되어 있으며, 비디오 튜토리얼을 통해 시작할 수 있음.
     * 커뮤니티 템플릿: Figma 커뮤니티에서 제작한 프레젠테이션 템플릿을 탐색하고 사용할 수 있음.

GN⁺의 의견

     * 협업 도구로서의 가치: Figma Slides는 팀 협업을 강화하는 도구로, 디자인과 프레젠테이션을 하나의 플랫폼에서 관리할 수 있어 효율적임.
     * 디자인 기능의 강점: Auto Layout, Advanced Properties 등 고급 디자인 기능을 제공해 디자이너에게 유용함.
     * AI 도구의 활용: AI 기반 텍스트 조정 기능은 프레젠테이션 제작 시간을 단축하고, 다양한 스타일의 텍스트를 쉽게 생성할 수 있게 해줌.
     * 경쟁 제품: Adobe XD, Sketch 등 다른 디자인 도구와 비교해 Figma Slides는 협업과 실시간 기능에서 강점을 가짐.
     * 도입 고려 사항: 새로운 도구를 도입할 때는 팀의 학습 곡선과 기존 워크플로우와의 통합을 고려해야 함.

        Hacker News 의견

     * Figma Slides의 장점: 애니메이션 사용이 용이하고, 일관성 유지 및 정밀성과 유연성이 뛰어남.
     * 객체 목록 기능: 디자인 모드에서만 사용 가능하지만, 선택이 용이해짐.
     * 애니메이션 도구의 한계: 현재 베타 버전에서는 제한된 전환만 가능하고, 개별 객체에 적용할 수 없음.
     * 개발자의 기대: 이미 Figma로 슬라이드를 제작 중이며, 전용 제품 출시를 환영함.
     * 디자이너의 고립 우려: 다른 비즈니스 도구와의 호환성 문제로 디자이너가 더 고립될 수 있음.
     * 무한 캔버스 제품 필요성: Google Slides에 무한 캔버스 기능이 없음을 아쉬워함.
     * 톤 선택기 UX: 직관적이고 간단한 UX로, 다른 AI 도구에서도 표준이 될 가능성이 있음.
     * 프레젠테이션 도구 부족: 발표자 노트 등 전통적인 도구의 기능이 부족해 전환을 망설였지만, Figma의 발전을 긍정적으로 평가함.
     * Figma의 우수성: 중요한 프레젠테이션은 Figma로 제작하며, Slides와 PowerPoint는 내부용으로 사용함.
     * 기존 도구와의 차별성: 다른 프레젠테이션 도구와의 차별성이 부족해 보임.
     * 제품 소개 부족: 랜딩 페이지가 제품의 특징을 잘 보여주지 못함.
"
"https://news.hada.io/topic?id=15486","Llama.ttf - LLM 기능을 가진 폰트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Llama.ttf - LLM 기능을 가진 폰트

     * Llama.ttf는 폰트 파일이면서 대형 언어 모델(LLM)과 그 모델의 추론 엔진
     * Firefox/Chrome에 사용되는 글꼴 셰이핑 엔진인 Harfbuzz는 Wasm shaper를 통해 임의의 코드로 텍스트를 ""셰이핑""할 수 있게 해줌
          + 이 ""임의의"" 코드는 LLM을 초기화하고 텍스트 생성에 사용하는 등 훈련된 매개변수를 포함한 전체 LLM 추론 엔진이 될 수 있음
          + 여기서는 Llama라는 LLM을 사용했기에 llama.ttf라는 이름이 붙음
     * 즉, Wasm이 활성화된 Harfbuzz 기반 애플리케이션에서 이 글꼴을 사용하여 LLM을 실행하고 텍스트 생성 등을 할 수 있음
          + 벤더가 ""Copilot"" 같은 기능을 구현하기를 기다릴 필요 없이 모든 것이 로컬에서 실행됨
          + 이 글꼴을 사용하면 글꼴과 채팅할 수도 있음
     * 사용 방법:
          + llama.ttf 파일을 다운로드하여 다른 글꼴처럼 사용하면 됨
          + Harfbuzz를 Dwasm=enabled로 빌드하고 wasm-micro-runtime을 빌드한 후, 결과 공유 라이브러리를 LD_PRELOAD 환경 변수에 추가한 다음 gedit나 GIMP 같은 Harfbuzz 기반 애플리케이션을 실행하면 됨
     * 글꼴과 LLM을 이용한 다른 재미있는 시도들도 소개됨
          + tom7의 Super Metroid 스피드런 문서에서 영감 받은 LLM 텍스트 포매팅 언어
          + Erk의 Harfbuzz-Wasm을 이용한 프로그래밍 가능한 글꼴 발표
          + Fontemon - 글꼴 안에 포함된 포켓몬 스타일의 완전히 플레이 가능한 게임

GN⁺의 의견

     * llama.ttf는 폰트 파일을 통해 LLM을 실행할 수 있는 혁신적인 접근법임.
     * 로컬에서 실행되므로 개인정보 보호와 성능 측면에서 유리함.
     * Harfbuzz와 Wasm에 대한 이해가 필요하므로 초급 엔지니어에게는 다소 어려울 수 있음.

   본문 Why? 소제목 아래 아무것도 안 적혀 있는 게 🤣

        Hacker News 의견

     * 주간 TV 프로그램으로 이상하고 재미있는 콘텐츠를 제공하면 좋겠다는 의견.
     * Tetris를 폰트로 만든 것처럼 LLM과 추론 엔진을 폰트에 넣어 대화하거나 글을 쓸 수 있게 만든 프로젝트 소개.
     * 이 프로젝트는 멋지지만, 280GB의 TTF 파일 크기와 다른 폰트와의 호환성 문제를 지적함.
     * 폰트에 게임을 내장한 웹사이트 링크 공유.
     * Harfbuzz 엔진이 Wasm 셰이퍼를 사용해 텍스트를 ""형성""할 수 있는 기능을 제공한다는 설명.
     * 작업이 아카이브에 저장되었다는 알림과 감사 인사.
     * Harfbuzz와 wasm-micro-runtime을 빌드하고 LD_PRELOAD 환경 변수에 추가해 데모를 쉽게 할 수 있기를 바라는 의견.
     * PDF가 대화할 수 있는 미래를 상상하지 못했다는 감탄.
     * 이번 주에 본 것 중 가장 멋진 것이라는 의견.
     * 폰트가 항상 같은 문자열을 생성하는 이유와 LLM이 새로운 ""추론""을 생성해야 하지 않느냐는 질문.
     * 폰트가 텍스트 스타일을 자동으로 생성하는 기능이 가능할지 궁금해하는 의견.
"
"https://news.hada.io/topic?id=15577","Figma AI - 지능형 도구로 디자이너 역량 강화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Figma AI - 지능형 도구로 디자이너 역량 강화

     * Figma AI는 디자이너들이 크리에이티브한 블록을 극복하고 최고의 아이디어를 실현할 수 있도록 돕는 AI 기반 기능들의 모음
     * 이 기능들은 영감을 찾거나, 다양한 방향을 탐색하거나, 지루한 작업을 자동화하는 데 도움
     * Figma AI 기능들은 2024년까지 베타 기간 동안 모든 사용자에게 무료로 제공될 예정
     * 베타 기간 동안 사용량 제한이 도입될 수 있으며, 정식 출시 시에는 가격 정책에 대한 명확한 가이드 제공 예정

향상된 검색으로 필요한 것을 정확히 찾기

     * Visual Search를 통해 이미지를 업로드하거나 캔버스의 영역을 선택하거나 텍스트 쿼리를 입력하여 시각적으로 유사한 디자인을 즉시 찾을 수 있음
     * 향후 커뮤니티 파일에서도 이 검색 기능을 사용할 수 있게 될 예정
     * Assets 패널의 기존 Asset Search 기능도 크게 업그레이드되어, AI가 검색 쿼리의 의미와 맥락을 이해하여 가장 관련성 높은 컴포넌트와 에셋을 반환

효율적으로 작업하고 플로우를 유지하기

     * AI 기반 텍스트 도구를 통해 복사본을 반복하고 적절한 단어를 찾는 것이 더 쉬워짐
     * 사실적인 복사본과 이미지를 생성하여 디자인에 생동감을 불어넣을 수 있음
     * 이미지 배경을 제거하여 주제를 즉시 분리하고 도구를 전환하지 않고도 인상적인 시각 자료를 만들 수 있음
     * Make Prototype을 클릭하여 정적 목업을 대화형 프로토타입으로 빠르게 변환할 수 있음
     * Rename Layers 기능을 통해 레이어의 이름을 자동으로 바꾸어 파일을 정리하고 개발자가 사용하기 쉽게 만들 수 있음

텍스트 프롬프트에서 디자인 생성하기

     * Make Designs 기능을 통해 텍스트 프롬프트에서 UI 레이아웃과 컴포넌트 옵션을 생성할 수 있음
     * 필요한 사항을 설명하면 첫 번째 초안을 제공
     * 향후 Google의 Material 3 키트와 같은 디자인 시스템을 활용하여 고유한 요구 사항에 맞춘 UI를 생성할 수 있게 될 것
     * 궁극적으로는 조직의 고유한 디자인 시스템 에셋과 패턴을 사용하여 브랜드에 맞는 UI를 생성할 수 있게 될 것

새로운 크리에이티브 출발선

     * 이러한 새로운 AI 기능들 중 일부는 워크플로를 즉시 개선할 수 있어 사용자들이 좋아할 것
     * 다른 기능들은 사용자들에게 새로운 크리에이티브 출발선을 제공하여 실행 가능한 첫 번째 초안을 더 쉽게 얻고 디자인에 생명을 불어넣을 수 있도록 할 것
     * 목표는 워크플로에 맞춰진 도구로 실제 문제를 해결하고 AI로 강화된 창의성의 장벽을 허무는 것

데이터 프라이버시와 보호

     * 고객 데이터의 중요성을 인식하고 있으며, 모델 개발 프로세스는 사용자의 개인 정보와 기밀 정보를 보호하도록 설계됨
     * 모든 고객 데이터는 저장 시와 전송 시에 암호화되며, 무단 액세스로부터 보호하기 위한 보안 조치가 사용됨
     * 콘텐츠와 개념, 아이디어가 아닌 일반적인 디자인 패턴과 Figma 특정 개념 및 도구를 학습하도록 추가 단계를 거침

AI 모델 학습

     * 관리자는 AI 학습을 위해 Figma와 고객 콘텐츠를 공유하는 것을 제어할 수 있는 팀 수준 설정 도입
     * AI 학습을 위한 고객 콘텐츠 공유는 선택 사항이며, 팀의 설정 기본 설정은 2024년 8월 15일에 적용될 예정
     * Starter 및 Professional 플랜은 기본적으로 옵트인되어 있지만 옵트아웃할 수 있음
     * Organization 및 Enterprise 플랜은 기본적으로 옵트아웃되어 있음
     * Figma AI에서 생성된 모든 콘텐츠는 고객 콘텐츠 데이터로 간주됨

앞으로의 계획

     * 우리의 목표는 디자이너와 제품 팀을 위해 AI를 구축하는 동시에 책임감 있고 명확한 접근 방식을 취하는 것
     * AI의 힘과 크리에이티브 커뮤니티의 지혜가 결합된 미래에서 AI는 진정한 크리에이티브 파트너가 될 것

GN⁺의 의견

     * Figma AI 기능들은 디자이너들의 워크플로우를 크게 개선하고 창의성을 자극할 수 있는 혁신적인 도구
     * 특히 Visual Search와 Make Designs 기능은 디자인 프로세스의 효율성을 높이고 새로운 아이디어 도출에 큰 도움이 될 것으로 보임
     * 다만 AI 생성 결과물의 품질과 다양성, 그리고 디자이너의 고유한 스타일 반영 여부 등은 지켜봐야 할 부분
     * 유사한 기능을 제공하는 konkurensni uslugi ni Adobe Sensei, Uizard 등과 비교했을 때 Figma AI만의 차별화 포인트를 찾는 것도 중요
     * 고객 데이터 활용에 대한 우려가 있을 수 있으므로, 데이터 보안과 프라이버시 보호를 위한 Figma의 노력을 사용자들에게 충분히 알릴 필요가 있음
     * 장기적으로는 모든 디자인 프로세스에서 AI 활용이 보편화될 것으로 예상되며, Figma가 AI 디자인 툴의 선두주자로 자리매김할 수 있을지 주목됨
"
"https://news.hada.io/topic?id=15514","미국 EPA의 Apple 제조업체 단속 및 준수 감독","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국 EPA의 Apple 제조업체 단속 및 준수 감독

위험 폐기물 프로그램 검사 보고서

  검사 개요

     * 검사 날짜: 2023년 8월 17일, 2024년 1월 12일
     * 회사 이름: 애플(Apple Inc.)
     * 시설 위치: 3210 Scott Blvd, Santa Clara, CA 95054
     * 검사 목적: 애플의 위험 폐기물 관리 프로그램 준수 여부 확인

  검사 참여자

     * 애플 직원:
          + Tom Huynh, HSE Manager
          + Kevin Sung, HSE Engineer
          + Grace Fisk, HSE Engineer
     * 외부 인원:
          + Frederick Chun, Santa Clara Fire Department Assistant Fire Marshal
          + Christopher Rollins, EPA Region 9 Lead Inspector
          + Anuka King, EPA Region 9 Physical Scientist
          + Mark Anthony Relon, EPA Region 9 Physical Scientist

  검사 목적

     * 목적: 애플이 연방 환경 법규 및 규정을 준수하는지 확인
     * 주요 법규: 자원 보존 및 회수법(RCRA), 캘리포니아 건강 및 안전 코드, 캘리포니아 규정 코드

  검사 과정

     * 첫째 날:
          + 시간: 10:00 AM ~ 2:28 PM
          + 활동: 시설의 중앙 축적 구역, 위성 축적 구역, 실험실 등 일반적인 시설 점검 및 기록 검토
     * 둘째 날:
          + 시간: 8:20 AM ~ 2:28 PM
          + 활동: 기록 검토 및 현장 폐기물 생성 과정 집중 점검

  주요 발견 사항

     * 위험 폐기물 관리: 애플은 대량 위험 폐기물 생성자로서 RCRA 및 캘리포니아 규정을 준수하고 있음
     * 기록 관리: 폐기물 관리 기록, 위험 폐기물 운송장 등 적절히 유지되고 있음
     * 시설 운영: 중앙 축적 구역 및 위성 축적 구역에서의 폐기물 관리가 적절히 이루어지고 있음

  GN⁺의 의견

     * 환경 규제 준수의 중요성: 대기업이 환경 규제를 준수하는 것은 사회적 책임을 다하는 중요한 부분임.
     * 위험 폐기물 관리: 적절한 폐기물 관리는 환경 보호와 직원 안전을 위해 필수적임.
     * 기술적 도전: 위험 폐기물 관리는 복잡한 법규와 절차를 따르기 때문에 지속적인 교육과 관리가 필요함.
     * 산업 표준: 다른 기업들도 애플과 같은 높은 수준의 환경 관리 기준을 따를 필요가 있음.
     * 기술 도입 고려사항: 새로운 환경 관리 기술 도입 시 초기 비용과 장기적인 유지 비용을 고려해야 함.

        Hacker News 의견

     * EPA 웹사이트에서 원본을 찾는 것이 더 좋음: Dropbox 링크보다 EPA 웹사이트에서 원본을 찾는 것이 더 나음.
     * 애슐리 죠빅의 주장에 대한 회의적 시각: 애슐리 죠빅이 애플에 대해 여러 번 거짓 주장을 했다는 의심이 있음.
     * 애플의 가스 누출 사건: 애플 엔지니어가 실수로 치명적인 가스를 누출시킨 사건이 있었음.
     * 애슐리 죠빅의 신뢰성 문제: 애슐리 죠빅의 주장이 신뢰할 만한지 의문이 있음.
     * 실리콘 밸리의 오랜 문제: 실리콘 밸리에는 오랫동안 많은 반도체 공장이 있었음.
     * 애슐리 죠빅의 소송: 애슐리 죠빅이 애플을 상대로 여러 소송을 제기했으며, 그 중 일부는 신뢰할 만한 것 같음.
     * 미나마타 사건과의 비교: 일본의 미나마타 사건과 유사하다는 의견이 있음.
     * 애플의 환경 문제: 애플이 EPA의 급습 후에야 청소를 시작했다는 주장.
     * 산타 클라라의 환경 문제: 애플이 산타 클라라에서 유독 화학 물질을 배출했다는 주장이 있음.
     * 공개된 정보의 부족: 공개된 정보로는 결론을 내리기 어려움.
     * 애슐리 죠빅의 정신 상태: 애슐리 죠빅이 정신적으로 불안정해 보인다는 의견.
"
"https://news.hada.io/topic?id=15583","실용적인 크기의 Open Language Models 개선을 위한 Gemma 2 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           실용적인 크기의 Open Language Models 개선을 위한 Gemma 2 [pdf]
"
"https://news.hada.io/topic?id=15535","dotenv 에서 dotenvx 로 - 차세대 Config 관리자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  dotenv 에서 dotenvx 로 - 차세대 Config 관리자

     * 2013년 7월에 dotenv 첫 번째 커밋후 11년 동안 전 세계적으로 가장 많이 의존하는 패키지 중 하나로 성장
     * TypeScript, ESLint와 같은 필수 소프트웨어와 유사한 위치에 도달

  dotenv의 문제점

     * .env 파일 유출 위험
     * 멀티 환경을 관리하기 어려움
     * 플랫폼 간 일관성 부족

  문제 해결책: dotenvx

     * 모든 플랫폼에서 동일하게 작동
     * 멀티 환경 지원
     * 환경 변수 파일 암호화

  어디서나 실행 가능

     * 모든 언어, 프레임워크, 플랫폼에서 동일하게 작동
     * dotenvx run -- your-cmd로 런타임에 환경 변수 주입 가능
     * .env 파싱 엔진, 변수 확장, 명령어 대체 등이 동일하게 작동
     * npm, brew, curl, docker, windows 등 다양한 방식으로 설치 가능
$ echo ""HELLO=World"" > .env
$ echo ""console.log('Hello ' + process.env.HELLO)"" > index.js
$ node index.js  # dotenvx 없이
Hello undefined
$ dotenvx run -- node index.js  # dotenvx 사용
Hello World

  다중 환경 지원

     * .env.production 파일 생성 후 -f 옵션으로 로드
     * 여러 -f 플래그를 사용하여 다중 환경 구성 가능
$ echo ""HELLO=production"" > .env.production
$ dotenvx run -f .env.production -- node index.js
[dotenvx][info] loading env (1) from .env.production
Hello production

  암호화

     * dotenvx encrypt 명령어로 .env 파일에 암호화 추가
     * 공개 키 암호화 방식 사용
     * .env 파일이 유출되어도 DOTENV_PRIVATE_KEY 없이는 해독 불가능
     * 오픈 소스 프로젝트에서 이전 비밀을 해독하지 않고도 새로운 설정 추가 가능
$ dotenvx encrypt
✔ encrypted (.env)

  1.0.0 버전 릴리스

     * dotenvx 1.0.0 버전 릴리스 발표
     * 차세대 설정 관리 도구로 많은 개발자들이 활용할 수 있을 것


GN⁺의 의견

     * dotenvx는 보안과 편의성을 동시에 제공함
     * 여러 환경을 쉽게 관리할 수 있어 개발자에게 유용함
     * 암호화 기능은 보안에 민감한 프로젝트에 특히 유용함
     * dotenvx의 기능은 다양한 언어와 플랫폼에서 일관성을 제공하여 개발 효율성을 높임

   프로그램 안에서 제품모드, 개발모드 안나누고, 실행 스크립트에서 바로 선언이 가능하군용

        Hacker News 의견

     * 환경 변수로 비밀 정보를 전달하지 않는 것이 좋음. 환경 변수는 쉽게 유출될 수 있음. 대신, 프로세스 내부에서 vault나 파일 시스템에서 비밀 정보를 읽는 것이 좋음.
     * .env 파일을 사용하는 이유는 간단하고 명확하기 때문임. 더 안전하고 강력한 설정 방식을 사용하려면 문서를 읽어야 함.
     * 작업에서 Mise를 사용하기 시작했음. 아직 많이 사용해보진 않았지만 유망해 보임. 로컬 테스트 DB 초기화, 린팅 스크립트 실행 등 작업을 처리하며, 환경 변수와 가상 환경도 관리함.
     * 비밀 정보 유출이 큰 문제이므로, dotenvx를 사용할 때 비밀 정보를 암호화하는 것이 현명함. 암호화되지 않은 비밀 정보를 지원하지 않는 도구가 더 안전함.
     * Sops와 비슷하지만 기본적으로 암호화된 기능이 없음. Sops는 AWS와 기존 키 관리 솔루션과 쉽게 통합되며, 5년 동안 두 개의 직장에서 사용해본 결과 매우 좋았음.
     * 비밀 정보를 암호화하고 커밋하는 것이 편리하지만, 암호화 키에 접근하면 모든 비밀 정보가 노출될 수 있음. 클라우드 환경의 비밀 관리자에 설정하고 다시 만지지 않는 것이 더 안전함.
     * 환경 변수는 과도하게 공유되고 파일은 로컬 권한에 의존함. 프로세스 간 비밀 정보를 전송하는 새로운 방법이 필요함. 예를 들어, Unix 소켓을 통해 한 번만 읽을 수 있는 방식으로 비밀 정보를 전달하는 것.
     * .env 파일을 vault에 올바르게 넣는 방법에 대한 문서가 필요함. vault가 비밀번호로 보호된다면, 애플리케이션이 vault 비밀번호를 읽을 수 있도록 명확한 텍스트로 작성해야 하는 문제가 있음.
     * 모든 환경 변수를 단일 파일에서 TOML 형식으로 관리하고 싶음. 이렇게 하면 업데이트, 비교, 공유가 쉬워짐. 하지만 환경 이름 일관성을 유지하는 것이 어려움. 이는 종종 빠른 결정이나 필요에 의해 발생하며, 수정하기 두려워함.
"
"https://news.hada.io/topic?id=15472","7년 된 버그 3개월간 조사 후 1줄 코드로 수정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      7년 된 버그 3개월간 조사 후 1줄 코드로 수정

7년 된 버그를 1줄의 코드로 해결한 이야기

  버그의 발견

     * 버그의 원인: 7년 동안 해결되지 않은 버그의 원인을 찾기 위해 많은 시간을 투자함.
     * 문제의 복잡성: 버그는 특정 상황에서만 발생하여 재현하기 어려웠음.

  문제 해결 과정

     * 디버깅 과정: 다양한 디버깅 도구와 기법을 사용하여 문제를 분석함.
     * 코드 분석: 코드의 여러 부분을 검토하고, 문제의 원인을 좁혀나감.
     * 해결책 발견: 결국 문제의 원인을 찾아내고, 단 한 줄의 코드로 수정함.

  교훈

     * 끈기와 인내: 복잡한 문제를 해결하기 위해서는 끈기와 인내가 필요함.
     * 디버깅 기술: 디버깅 기술을 향상시키는 것이 중요함.
     * 문제 해결 능력: 문제를 다양한 각도에서 접근하는 능력이 필요함.

GN⁺의 의견

     * 디버깅의 중요성: 디버깅은 소프트웨어 개발에서 매우 중요한 과정임. 이를 통해 코드의 품질을 높일 수 있음.
     * 문제 해결의 성취감: 오랜 시간 동안 해결되지 않은 문제를 해결했을 때의 성취감은 매우 큼.
     * 기술적 성장: 복잡한 문제를 해결하는 과정에서 기술적 성장이 이루어짐.
     * 협업의 필요성: 때로는 다른 개발자와의 협업이 문제 해결에 큰 도움이 될 수 있음.
     * 문제의 재현: 문제를 재현할 수 있는 환경을 만드는 것이 중요함. 이를 통해 문제를 더 쉽게 분석할 수 있음.

        Hacker News 의견

     * USB 오디오 처리 코드에서 16비트 모듈로를 발견한 경험: 과거 경험을 통해 문제를 빠르게 해결한 기쁨을 느꼈음.
     * CI 실패 원인 분석: 무작위 CI 실패를 해결하기 위해 다양한 테스트를 시도한 끝에, 동일한 내용의 행렬이 다른 레이아웃으로 저장될 때 발생하는 버그를 발견하고 간단한 한 줄 코드로 수정했음.
     * 코드 라인 수로 생산성을 측정하는 것의 문제점: 코드 라인 수로 생산성을 측정하는 것은 비효율적이며, 비기술적인 사람들에게 이를 이해시키는 것이 어려움.
     * 문서화되지 않은 SQL 제약 조건 문제: 오래된 Windows Forms 애플리케이션에서 사용자 이름 길이 제한으로 인해 발생한 문제를 해결한 경험.
     * 8051 기반 MIDI 스위치 설계 경험: 90년대 초에 8051 기반 MIDI 스위치를 설계하고, 소프트웨어와 하드웨어를 모두 직접 개발한 경험.
     * 오래된 Perl 스크립트 사용: 대학 웹사이트에서 오래된 Perl 스크립트를 찾아 실행한 경험.
     * Enemy Territory의 11년 된 버그 수정: 오래된 게임의 UI 구성에서 발생한 버그를 해결한 경험.
     * yamux의 오래된 버그 수정: yamux의 오래된 버그를 해결한 경험.
     * 소비자 장치의 성능 저하 문제 해결: 5명의 팀이 3개월 동안 소비자 장치의 성능 저하 문제를 해결하기 위해 노력한 경험.
     * MIDI 이벤트 버퍼링 최적화: MIDI 이벤트를 하나만 버퍼링하도록 최적화한 코드 수정 경험.
"
"https://news.hada.io/topic?id=15589","베어 메탈에서 70B 모델을 훈련하기 위한 인프라 설정 및 오픈 소스 스크립트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              베어 메탈에서 70B 모델을 훈련하기 위한 인프라 설정 및 오픈 소스 스크립트

인프라 구축 및 스크립트 설정

  소개

     * 몇 달 동안 소규모 연구팀과 엔지니어 팀이 자체 인프라에서 70B 파라미터 모델을 처음부터 훈련하여 reasoning 관련 작업에서 zero-shot GPT-4o를 능가함.
     * 오늘은 초기 클러스터 설정부터 운영 체제 설치, 훈련 중 발생하는 오류 자동 복구까지 필요한 인프라 설정에 대한 종합 가이드를 공유함.
     * 각 단계에서 겪은 도전과 해결 방법을 자세히 설명하고, 다른 팀이 안정적인 인프라를 쉽게 구축할 수 있도록 인프라 스크립트를 공개함.

  배경: 이 시스템이 어떻게 작동하는지

     * 대규모 언어 모델 실험을 빠르게 수행하기 위해 빠른 GPU가 필요함.
     * 4,092개의 H100 GPU가 511대의 컴퓨터에 분산되어 있는 클러스터를 사용함.
     * InfiniBand 네트워크를 통해 GPU 간의 고속 통신을 가능하게 함.

  프로세스: 베어 메탈에서 완전한 운영 클러스터로 가는 방법

    개별 머신 프로비저닝

     * 관리 네트워크를 통해 클러스터에 초기 이더넷 연결을 설정하고, BMC(베이스보드 관리 컨트롤러)에 접근함.
     * iDRAC를 사용하여 첫 번째 서버에 Ubuntu 22.04를 설치하고, 이를 통해 나머지 서버를 설정함.

    모든 머신에 OS 설치

     * MAAS 소프트웨어를 사용하여 나머지 서버를 프로비저닝함.
     * PXE 부팅 및 자동화된 iDRAC 도구를 사용하여 네트워크를 통해 부팅하고, MAAS가 PXE 부팅 요청에 응답하도록 구성함.

    고장난 머신 진단

     * 약 10%의 머신이 부팅 실패, 주로 물리적 문제로 인해 발생함.
     * 자동화된 체크를 통해 문제를 발견하고, Dell에 재테스트를 요청하거나 데이터 센터 직원에게 티켓을 발행함.

    최소한의 관찰 가능한 메탈 설정

     * 모든 서버에 Docker, 데이터 센터 GPU 드라이버, Prometheus 노드 익스포터 등을 설치함.
     * 기본 GPU 진단을 실행하여 대부분의 GPU가 정상 작동하는지 확인함.

    단일 노드 GPU 훈련

     * 모든 머신이 단독으로 GPU 작업을 처리할 수 있는지 확인함.
     * GPU 관련 오류를 해결하고, PCIe 버스와 네트워크 카드 간의 연결 문제를 해결함.

    InfiniBand 프로비저닝

     * UFM(통합 패브릭 관리자)을 설치하고, 네트워크 스위치를 감지하고 물리적 위치에 따라 이름을 지정함.
     * 네트워크 배선 문제를 해결하고, 온도 경고 문제를 해결함.

    완전히 건강한 머신 보장

     * 다양한 건강 체크를 통해 훈련에 사용할 수 있는 건강한 호스트를 확인함.
     * GPU, 디스크 공간, Docker, dmesg, iDRAC, 디스크, InfiniBand, NVLink, GDR, VBIOS, Flint, PSB 등 다양한 체크를 수행함.

    일반적인 훈련 문제 진단

     * 하드웨어가 제대로 작동하기 시작하면 훈련을 시작함.
     * 시작 시 충돌, 중간에 충돌, 스택 트레이스 정보 없이 멈춤, 훈련 속도 저하 등의 문제를 해결함.

    인프라 도구 개선

     * 훈련이 원활하게 진행되도록 다양한 도구와 시스템을 개발함.
     * 고장난 머신 및 네트워크 구성 요소를 자동으로 비활성화하고 수리 요청을 자동화함.
     * 로컬 미러 파일 시스템 및 로컬 분산 Docker 레지스트리를 구축함.
     * 성능 모니터링 도구를 설정하고, 느린 훈련 배치를 감지하고 원인을 이해하기 위한 도구를 작성함.

  GN⁺의 의견

     * 이 기사는 대규모 클러스터 설정 및 관리에 대한 실질적인 경험과 해결 방법을 제공하여 매우 유용함.
     * 대규모 언어 모델 훈련에 필요한 인프라 구축의 복잡성을 잘 설명하고 있음.
     * 다른 팀이 유사한 인프라를 구축할 때 참고할 수 있는 다양한 스크립트와 도구를 제공함.
     * InfiniBand 네트워크의 중요성과 설정 과정에서 발생할 수 있는 문제를 잘 설명하고 있음.
     * 새로운 기술이나 오픈 소스를 채택할 때 고려해야 할 사항과 장단점을 잘 설명하고 있음.

        Hacker News 의견

     * 소규모 연구팀이 자체 인프라에서 70B 파라미터 모델을 훈련하여 reasoning 관련 작업에서 zero-shot GPT-4를 능가함
          + InfiniBand, Ethernet, GPU, 노드 등 모든 구성 요소가 완벽하게 작동해야 함
          + 12,000개 이상의 연결 중 하나라도 불안정하면 전체 훈련이 느려질 수 있음
          + 오픈 소스 스크립트와 인프라 설정에 대한 종합 가이드를 공유함
          + 70B 모델 훈련에 대한 세 부분 중 하나로, 다른 두 부분은 평가와 CARBS 하이퍼파라미터 최적화에 초점을 맞춤
     * 한 클러스터에 4,092개의 H100 GPU가 511대의 컴퓨터에 분산되어 있음
          + 이는 1억 달러 이상의 GPU 비용에 해당함
          + 게이밍 PC 예산으로 이러한 작업이 가능할지 궁금함
     * Latent Space 팟캐스트에서 며칠 전에 이 주제가 논의됨
          + 결정의 배경을 듣기에 좋은 에피소드임
     * 왜 이렇게 많은 PC 하드웨어가 필요한지 궁금함
          + PCI + 인피니밴드 백엔드와 GPU, 작은 ARM 컨트롤러로 구성할 수 있지 않을까 생각함
          + 이전 디자인의 관성이나 특수 GPU 컨트롤러의 시장 부족 때문인지 궁금함
     * 동일한 하드웨어로 토큰화된 훈련 데이터 대신 원시 유니코드로 훈련을 반복하는 것이 흥미로울 것임
          + 철자와 운율 성능의 차이를 보고 싶음
     * 4,092개의 H100 GPU
          + ""self-coding"" 작업 중임
          + No-code 또는 minimal code 솔루션일 가능성이 있음
          + 웹사이트에 흥미로운 기사와 자료가 많음
     * 모델 구축에 필요한 총 전력 소비량에 관심이 있음
          + 전력과 냉각에 대한 숫자가 있는지 궁금함
          + 마크 저커버그가 다음 1GW 모델을 계획 중이라고 언급함
     * 전체 비용이 얼마인지 궁금함
          + 하드웨어 비용, 개발 시간, 전기 및 냉각 비용 포함
     * Cisco가 800G 포트당 속도로 새로운 NVIDIA 협업을 진행 중임
          + 인피니밴드가 GPU에 접근 가능한지 궁금함
          + 공유해줘서 고맙다는 의견
     * 모델이 훈련된 후 하드웨어와 인프라는 어떻게 되는지 궁금함
"
"https://news.hada.io/topic?id=15562","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   개인 블로그에 이벤트 관리용 워드프레스 확장을 설치해서, 이걸로 이번 토요일에 초보자용 보드게임 모임을 만들어서 진행합니다.

   모임 잡고 초대하는 부분에 있어서 Doodle, Calendly, Google Calendar 등 여러가지를 고민해 봤는데, 영 마음에 들지 않았거든요.
   ""모임을 개설하고, 페이스북 지인들 위주로 신청받고 승인해서 운영하는데 이메일로 비동기 관리가능"" 이라는게 요구사항이었는데 이 요구사항에 딱 들어맞습니다.

   워드프레스용 Events Made Easy 확장
     * 기본적으로 무료 ( 도네이션 및 커스텀 기능 개발 필요시 유료 개발)
     * 소규모부터 대규모까지 각종 모임을 진행하는데 있어서 거의 모든 기능을 지원
     * 공개/비공개 및 반복 이벤트
     * 멤버쉽 기능과 승인 기능을 갖춘 RSVP
     * 각종 결제PG(Stripe, Braintree,.) 연동을 통한 유료 행사 및 유료 멤버쉽
     * RSS/ICAL도 지원
     * 휴일/장소/사람/할인 모든 것이 다 관리 가능
     * 등록사용자에게 다양한 메일 보내는게 가능하고, 템플릿 기능도 포함
     * 티켓 PDF 도 생성해서 보내고, 바코드로 도착 확인도 가능

   한글화 작업도 가능하길래 DeepL로 PO파일을 전체 번역한다음 수정해서 한글화해서 운영중인데요.
   조금 더 돌리면서 번역 문구 수정하고 개발자에게 PR도 보내볼까 합니다.
"
"https://news.hada.io/topic?id=15548","Show GN: Mail+Channel 원래 쓰던 이메일에 채널을 추가해서 스팸이랑 피싱을 추적하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: Mail+Channel 원래 쓰던 이메일에 채널을 추가해서 스팸이랑 피싱을 추적하세요

   최근에 이메일의 +트릭에 대해 알게 되었습니다.
   기존 이메일 ID 뒤에 +로 라벨을 지정 할 수 있는 기능인데요 이걸 잘 활용하면 스팸이나 피싱 메일을 예방하거나, 개인정보가 유출된 사이트를 예측 할 수 있을거라는 생각이 있어서 간단하게 POC느낌으로 메일에 사용할 채널을 생성하는 기능을 만들어 보기로 했습니다.

   이 Mail+Channel 이라는 아이디어의 핵심 발상은 ""내게 메일을 보내려면 어디서 받은 메일인지 말해야해!"" 입니다.

   +뒤에는 사람이 알아볼 수 있는 글자가 아닌 불규칙하게 만들어진 코드가 들어가는데 채널 명이 상징적인 문구가 된다면 Dictionary attack 처럼 알려진 문구들로 메일을 보낼 경우 올바른 채널을 알 수 있지 않을까 해서 랜덤한 문구를 사용하기로 했습니다.

   물론 이렇게 ID에 붙일 채널만 생성하는 것으로 부족하고 Gmail같은 메일 플랫폼의 API를 활용해서 생성된 채널들을 관리하고 생성한 채널만 화이트리스트로 관리하거나 폐기하는 시스템이 추가적으로 있다면 훨씬 수월하게 사용이 가능할 거 같습니다.

   나름대로 괜찮은 아이디어인듯 해서 간단한 POC를 만들어보았는데 여러분들의 의견을 한번 알고 싶습니다.

   저도 실제로 비슷한 방식으로 가입한 사이트의 도메인을 이메일 주소에 넣어서 가입을 하곤 합니다. 가끔 일부 사이트는 +문자를 이메일에 넣을 수 없도록 한 경우가 많아서 아쉽게도 그냥 이메일로 가입해야하더라구요.

   저도 예전에 애플ID 생성할때 그 트릭을 활용했었네요. 그때는 규칙에 대해선 정확히 몰라서 id@gmail.com id+1@gmail.com id+2@gmail.com id+3@gmail.com 같은식으로 하고 각 숫자와 국가를 매핑해서 기억했습니다.

   글재주가 없어서 조금 헷갈리도록 한것 같네요.

   +트릭을 응용하는 방법론에 대한 글이라서, 딱히 정해진 규칙은 없습니다.

   사이트에 회원 가입하거나, 메일링 리스트를 구독할때 위 응용방식으로 생성한것을 바탕으로 사용을 해보면 스팸이랑 피싱메일이 오는 곳을 추적할 수 있지 않을까? 하는 발상으로 만들어본 프로젝트 입니다!

   지역별로 애플ID 가입할 때, 클라우드플레어에서 메일 포워딩 할 때 쓰고 있습니다.
"
"https://news.hada.io/topic?id=15545","인위적(Artificial) 스트리밍에 대해 알아야 할 모든 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  인위적(Artificial) 스트리밍에 대해 알아야 할 모든 것

     * 인위적 스트리밍이란 실제 사용자의 청취 의도를 반영하지 않는 스트리밍으로, 자동 프로세스(예: 봇 또는 스크립트)를 이용하여 Spotify와 같은 스트리밍 서비스를 조작하려는 시도
     * 이러한 시도가 감지되지 않으면 인위적 스트리밍으로 인해 로열티 풀이 줄어들어 아티스트의 합법적 스트리밍 수익이 악의적인 이용자에게로 넘어감
     * 스트리밍이 제공하는 공정한 경쟁의 장이 훼손됨
     * 2014년 업계가 재정적으로 가장 힘든 시기를 겪은 이후, 스트리밍 서비스가 성장하면서 음악 산업이 회복됨. 2023년 스트리밍 서비스는 전 세계 기록된 수익의 3분의 2를 차지했으며, 그중 3분의 1은 Spotify가 차지
     * 스트리밍 정산이 연간 수십억 달러까지 성장하자 악의적인 이용자들이 금전적 이익을 얻기 위해 스트리밍을 조작하거나, 돈을 대가로 스트리밍 횟수 증가를 약속하며 아티스트에게 사기를 치기 시작
     * Spotify는 인위적 스트리밍이 로열티에 미치는 영향을 감지하고, 예방하고, 없애기 위해 막대한 노력을 기울이고 있으며, 콘텐츠에서 명백한 인위적 스트리밍이 감지될 경우 음반사와 배급사에 벌금을 부과
     * 소셜 미디어와 이메일을 통해 아티스트를 대상으로 Spotify 및 기타 스트리밍 플랫폼에서 스트림 또는 재생 목록 배치를 약속하는 마케팅 및 프로모션 서비스는 대부분 사기이므로 피해야 함
          + 스트리밍 횟수를 늘려주겠다거나, 플레이리스트에 올려주겠다거나, 추천에서 우선적으로 표시해준다는 것은 사실이 아님
          + 봇을 사용해 곡을 반복적으로 스트리밍하며 스트리밍 횟수를 부풀림
          + Spotify에서 커리어를 발전시킬 수 있는 유일한 방법은 곡에 반응을 보이고, 아티스트에게 투자하는 진정한 팬을 확보하는 것
     * Spotify는 돈과 교환하여 스트림 또는 재생 목록 배치를 약속하는 제3자 서비스 사용을 엄격히 금지하며, 이러한 서비스는 Spotify의 이용 약관 및 사용자 지침을 위반함
          + 인위적 스트리밍이 감지되면 해당 스트림은 로열티 수익을 얻지 못하며, 공개 스트림 숫자나 차트에 포함되지 않고, 추천 알고리듬에 긍정적인 영향을 미치지 않음
          + 심각성에 따라 Spotify 플레이리스트에서 곡 삭제, 경고 발행, 벌금 부과, 사용자 계정 정지, Spotify에서 음악 삭제 등의 추가 패널티가 적용될 수 있음
     * Spotify for Artists 데이터를 살펴보면 인공 스트리밍이 계정에 미치는 영향을 파악할 수 있으며, 비정상적인 활동이 발견되면 레이블이나 유통사에 알리고 음악 홍보를 위해 고용한 서비스에 대한 세부 정보를 공유해야 함
     * 인위적 스트리밍이라는 문제를 해결하려면 전 세계 음악 비즈니스 전반의 이해 관계자들이 하나가 되어 협력해야 함
     * Spotify는 스트리밍 사기 근절을 목표로 하는 글로벌 태스크포스인 Music Fights Fraud Alliance의 창립 멤버라는 것을 자랑스럽게 생각함
"
"https://news.hada.io/topic?id=15465","3D 표현을 효율적인 3D 메쉬로 변환하는 MeshAnything 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                3D 표현을 효율적인 3D 메쉬로 변환하는 MeshAnything 기술

MeshAnything: 아티스트가 만든 메쉬 생성

  개요

     * MeshAnything은 인간 아티스트가 3D 표현에서 메쉬를 추출하는 방식을 모방함.
     * 다양한 3D 자산 생산 파이프라인과 결합하여 3D 산업에 적용 가능한 아티스트가 만든 메쉬(AM)를 생성할 수 있음.

  기존 방법과의 비교

     * MeshAnything은 수백 배 적은 면으로 메쉬를 생성하여 저장, 렌더링, 시뮬레이션 효율성을 크게 향상시킴.
     * 기존 방법과 유사한 정밀도를 달성함.

  방법

     * MeshAnything은 주어진 3D 형태에 맞춘 아티스트가 만든 메쉬를 생성하는 오토레그레시브 트랜스포머임.
     * 주어진 3D 자산에서 포인트 클라우드를 샘플링하고, 이를 특징으로 인코딩하여 디코더 전용 트랜스포머에 주입함.
     * 복잡한 3D 형태 분포를 학습하는 대신 최적화된 토폴로지를 통해 효율적으로 형태를 구성함.

  더 많은 결과

     * 다양한 3D 자산 생산 방법과 통합하여 고도로 제어 가능한 아티스트가 만든 메쉬 생성을 달성함.
     * MeshAnything은 더 나은 토폴로지와 적은 면으로 메쉬를 생성하며, 유사한 형태를 유지하면서 완전히 다른 토폴로지를 생성할 수 있음.

GN⁺의 의견

     * 효율성: MeshAnything은 기존 메쉬 생성 방법보다 훨씬 적은 면으로 메쉬를 생성하여 저장 및 렌더링 효율성을 크게 향상시킴.
     * 적용성: 다양한 3D 자산 생산 파이프라인과 통합할 수 있어 3D 산업 전반에 걸쳐 활용 가능성이 높음.
     * 기술적 장점: 복잡한 3D 형태 분포를 학습하지 않고도 최적화된 토폴로지를 통해 효율적으로 형태를 구성할 수 있음.
     * 비판적 시각: 새로운 기술 도입 시 기존 시스템과의 호환성 문제나 초기 학습 곡선이 있을 수 있음.
     * 추천 대안: 비슷한 기능을 가진 다른 프로젝트로는 MeshGPT 등이 있으며, 각 프로젝트의 장단점을 비교해보는 것이 좋음.

        Hacker News 의견

     * 3D 모델 생성 논문이 자주 비판받는 상황에서 이 연구는 환영받을 만함. 하지만 비상업적 라이선스가 아쉬움. GitHub 정보에 따르면, A6000 GPU에서 메쉬 생성에 약 7GB와 30초가 소요되며, 800개 이하의 면을 가진 메쉬만 생성 가능함.
     * 저폴리곤 생성 결과 중 최고임. 여전히 삼각형 메쉬이지만 점점 나아지고 있음.
     * 최종 목표는 사각형 위주의 폴리곤, 엣지 스무스/크리즈, 자연스러운 텍스처 UV, 반복 텍스처를 통한 PBR 텍스처 생성임. 이후에는 이미지에서 CAD 모델을 추론하는 방향으로 나아가야 함.
     * 라이다 스캔이나 포토그래메트리로 생성된 큰 메쉬나 포인트 클라우드를 다루기 위해 고성능 PC와 비싼 소프트웨어가 필요함. 메쉬를 작게 만들어 웹에서 공유할 수 있도록 하는 것이 유용할 것임.
     * 포인트 클라우드 스캔을 수작업으로 처리한 경험이 있음. 450GB의 데이터가 생성되었고, 이전 프로젝트는 2.1TB였음. 이 논문의 스케일은 장난감처럼 느껴지지만, 시작이 중요함.
     * AI 생성 메쉬를 ""아티스트가 만든"" 것처럼 부르는 것은 오해의 소지가 있음.
     * 사회적 영향 단락에서 노동 비용 절감을 언급한 점이 좋음. 예술가의 필요성을 줄이는 것이 아니라는 점이 중요함.
     * 몇 가지 복잡한 모델을 테스트해볼 예정임.
     * MeshAnything은 수백 배 적은 면을 가진 메쉬를 생성하여 저장, 렌더링, 시뮬레이션 효율성을 크게 향상시킴.
     * 온라인 데모를 시도했으나 출력 메쉬에 원본에는 없던 구멍이 생김. 알고리즘에 문제가 있는지 의문임.
     * 변환된 메쉬는 효율적이지 않으며, n-gons가 많아 리토폴로지 작업이 필요함.
"
"https://news.hada.io/topic?id=15466","OSRD - Open Source Railway Designer","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  OSRD - Open Source Railway Designer

     * 철도 인프라 설계, 수송량 분석, 시간표 작성, 시뮬레이션 등을 위한 오픈 소스 웹 애플리케이션
     * EU와 프랑스 정부의 지원으로 프랑스 철도 인프라 관리회사인 SNCF Réseau가 시작한 오픈 소스 프로젝트
     * 인프라 투자를 최적화하여 운송의 탈탄소화에 발맞추고 더 많은 트래픽을 확보하는 것을 돕기 위해, 기존의 폐쇄적인 도구들 대신 오픈소스 방식을 채택

   FOSDEM24의 발표 : Open Source Railway Designer (OSRD): why SNCF Réseau start an open source project ?
   관련해서 FOSDEM 24에는 Railway & Open Transport 부분에서 OSRD 관련자들의 다양한 발표가 있었음
"
"https://news.hada.io/topic?id=15479","바르셀로나 관광 아파트 퇴출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            바르셀로나 관광 아파트 퇴출

바르셀로나, 2028년까지 모든 관광 아파트 철폐

  주요 내용 요약

     * 관광 아파트 면허 철회
          + 바르셀로나 시의회는 2028년까지 도시 내 모든 관광 아파트 면허를 철회할 예정임.
          + 10,101개의 관광 아파트 면허가 2028년 11월에 자동으로 종료될 예정임.
     * 주택 가격 상승 문제
          + 바르셀로나의 주택 가격 상승으로 인해 많은 젊은이들이 도시를 떠나야 하는 상황이 발생함.
          + 지난 10년간 임대료와 매매 가격이 각각 70%, 40% 상승함.
     * 사회 주택 할당
          + 새로운 법안에 따라 건설업체는 새로 짓는 주택의 최소 30%를 사회 주택으로 할당해야 함.
     * 지역 주민의 반응
          + 많은 지역 주민들이 관광객 증가와 주택 가격 상승에 대해 불만을 제기함.
          + 주민들은 더 나은 삶의 질과 적정한 임금, 그리고 살기 좋은 도시를 원함.

  GN⁺의 의견

     * 주택 시장 안정화
          + 관광 아파트 면허 철회와 사회 주택 할당은 주택 시장을 안정화시키는 데 도움이 될 수 있음.
          + 그러나 단기적으로는 주택 공급 부족 문제를 해결하기 어려울 수 있음.
     * 관광 산업 영향
          + 관광 아파트 철회는 Airbnb와 같은 플랫폼에 큰 타격을 줄 수 있음.
          + 이는 관광 산업 전반에 영향을 미칠 수 있으며, 관광객 유치 전략의 재검토가 필요함.
     * 사회적 반발
          + 일부 주민들은 이러한 조치가 충분하지 않다고 생각할 수 있음.
          + 정책 시행 과정에서의 투명성과 주민 참여가 중요함.
     * 다른 도시의 사례
          + 다른 도시들도 유사한 문제를 겪고 있으며, 바르셀로나의 사례는 좋은 참고가 될 수 있음.
          + 예를 들어, 베를린이나 암스테르담도 관광 아파트 규제를 강화하고 있음.

        Hacker News 의견

     * 인구 증가와 주택 공급의 불균형: 바르셀로나의 인구 증가 속도에 비해 주택 공급이 부족함. 에어비앤비와 지난 10년간 지어진 주택이 인구 증가를 따라가지 못함.
     * 정책의 효과에 대한 의문: 이 변화가 의도한 결과를 낳지 못할 것 같음. 뉴욕의 단기 임대 규제 이후에도 임대료가 내려가지 않았음.
     * 주택 공급 증가 필요성: 수요를 억제하기보다는 주택 공급을 늘리는 것이 해결책이라고 생각함.
     * 시장과 정치적 배경: 바르셀로나 시장이 호텔 산업과 밀접한 관계가 있으며, 3년 후에 권력을 잃을 가능성이 높음. 이는 단기적인 정치적 이익을 위한 조치일 수 있음.
     * 주택 공급 부족 문제: 사람들은 모두가 행복할 만큼 충분한 주택을 짓기보다는 다른 방법을 찾으려 함.
     * 원격 근무와 주택 가격: 유럽의 구매력이 높은 ""추운"" 나라 사람들은 원격 근무가 가능해지면서 바르셀로나로 이주하려 함. 이는 관광 아파트와 함께 주택 가격에 영향을 미침.
     * 관광지의 경제적 문제: 관광이 너무 수익성이 좋아서 일반 주민들을 내쫓고 경제를 다른 생산 활동에서 멀어지게 함. 이는 자원 저주와 유사함.
     * Airbnb의 장점: Airbnb를 통해 현지 분위기를 느낄 수 있는 일반 아파트에 머무는 것을 선호함. 호텔은 너무 비인격적이라 싫어함.
     * 단기 임대 규제와 세금: 단기 임대에 세금을 부과해 저렴한 주택을 짓는 것이 좋은 아이디어라고 생각함.
     * 정책의 단기적 해결책: 이 정책은 단기적인 권위주의적 해결책으로, 많은 사람들에게 도움이 되지 않으며, 미래에 더 권위적인 조치를 초래할 수 있음. 아시아처럼 밀도와 규모를 늘리는 것이 필요함.
     * 구시가지의 주거 환경: 구시가지의 아파트는 소음, 더러움, 술 취한 사람들, 마약 중독자, 매춘부 등으로 인해 장기적으로 살기 어려운 환경임.
"
"https://news.hada.io/topic?id=15531","Show GN: 위대함을 만드는 작은 습관, 오늘의 브리핑.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: 위대함을 만드는 작은 습관, 오늘의 브리핑.

🚀 위대함을 만드는 작은 습관, 오늘의 브리핑.

     >> 오늘의 브리핑 30일 무료 체험 링크

✅ 오늘의 브리핑을 만들게 된 이유.

    1. 더 쉽게, 더 빠르게, 효율적으로 성장하세요.

   일일일은 업무로 바쁜 와중에 커리어 성장을 위한 정보를 꾸준히 소비하는 것이 어렵다는 문제를 해결하기 위해 스타트업 사람들을 위한 감도 높은 정보 큐레이션 서비스를 제공하고 있는데요, 일일일의 정보를 놓치지 않고 보다 효율적으로 받아보시고 싶은 분들을 위해 오늘의 브리핑 서비스를 오픈하게 되었습니다.

   오늘의 브리핑에서는 AI 기반 품질 평가 시스템과 에디터의 2차 검수 과정을 통과한 정보들을 요약된 형태로 만나보실 수 있는데요, 저는 매일 아침 업무 시작 전 5분 정도를 투자해서 업무에 도움이 될 만한 정보들을 북마크 해두고 나중에 필요할 때 꺼내보는 용도로 사용하고 있어요.

✅ 오늘의 브리핑은 이런 서비스.

    1. 스타트업 동료들의 실제 업무 사례가 담겨있어요.

   이미 만 명이 넘는 스타트업 동료들이 매일 일일일에서 큐레이션된 정보를 소비하고 있는데요, 일일일은 동료들의 반응도와 정보의 메타 데이터를 활용한 자체 품질 평가 시스템을 기반으로 양질의 정보를 분류하고 보기 쉽게 전달하고 있어요. 동료들의 업무 사례 등 실제 업무에 도움이 되는 정보들을 받아볼 수 있어요!
    2. 국내 외 전 세계의 최신 업계 정보가 담겨있어요.

   일일일은 Brunch, Velog, Youtube, Substack, Techcrunch, Geeknews 등 전 세계의 다양한 매체에서 올라오는 정보들을 매일 수집하고 있어요. 수집하는 정보의 출처는 링크에 대한 반응도를 기반으로 매번 새롭게 업데이트되기 때문에 일일이 모든 매체를 모니터링할 필요가 없어요. 전 세계의 최신 업계 정보들을 누구보다 먼저 파악하고 업무에 적용해 보세요!
    3. 요약을 통해 필요한 정보를 빠르게 파악할 수 있어요.

   오늘의 브리핑에서는 보다 빠른 정보 파악을 위해 모든 정보를 보기 쉬운 형태로 가공하여 전달하고 있어요. 이를 통해 관심이 없는 정보는 과감하게 넘기고, 지금 내게 필요한 정보를 빠르게 파악할 수 있어요. 매일 아침 5분, 업무 시작 전 짧은 시간을 활용하여 내게 필요한 모든 정보들을 파악해 보세요!
    4. 예상치 못한 발견을 통해 새로운 영감을 얻을 수 있어요.

   좋은 아웃풋은 좋은 인풋에서 부터 탄생해요. 일일일의 오늘의 브리핑은 업무에 필요한 좋은 인풋을 습득하는 가장 쉬운 방법이에요. 오늘의 브리핑을 통해 지속적으로 관점을 확장시키고 그 안에서 새로운 영감을 얻어가세요. 새로운 영감을 받아들이고 치열한 경쟁 속에서 나만의 경쟁력을 만들어 보세요!
    5. 서비스 오픈 기념 30일 무료 체험 이벤트 🎉🎉

   위에서 소개해 드린 내용만으로는 오늘의 브리핑이 내게 필요한 서비스인지 판단이 어려우실 수 있어요. 그런 분들을 위해 현재 오늘의 브리핑을 30일 동안 무료로 체험해 볼 수 있는 이벤트를 진행하고 있어요. 언제든 구독 해지 예약이 가능하니 무료로 체험해 보세요!

     >> 오늘의 브리핑 30일 무료 체험 링크

✅ 앞으로도 잘 부탁드립니다.

   일일일은 오늘의 브리핑 서비스를 시작으로 정보를 발견하고 활용하는 과정을 100배 혁신하기 위한 다양한 신규 기능들을 출시할 계획을 가지고 있어요. 멤버십을 새롭게 출시하는 과정에서 부족한 부분도 많겠지만 전달주시는 피드백에 귀를 기울이며 더 좋은 서비스로 보답하겠습니다.

   귀한 시간을 내어 이 글을 읽어주셔서 감사드립니다 :)

   음.. 첨에 한두번 가다가 클릭 한두번 하면 로그인 하라고 계속 팝업 떠서 안쓰게 되었네요.
   사이트 만드는 입장에서 개인화나 여러가지 이유로 회원가입을 유도하고 싶은건 이해도 되지만...
   그냥 새로운 소식 가볍게 하루하루 훑어보는 사용자는 내쫓는 느낌이었네요.
"
"https://news.hada.io/topic?id=15528","카카오톡에서 원클릭 익스플로잇","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            카카오톡에서 원클릭 익스플로잇

   카카오톡의 딥링크 유효성 검사 문제로 10.4.3인해 원격 공격자가 WebView에서 임의의 JavaScript를 실행하여 HTTP 요청 헤더에서 액세스 토큰을 유출할 수 있습니다. 궁극적으로 이 토큰은 공격자가 제어하는 ​​장치를 등록하여 다른 사용자의 계정을 탈취하고 채팅 메시지를 읽는 데 사용될 수 있습니다. 이 버그는 CVE-2023-51219 로 지정되었습니다 . 또한 동료 보안 연구원들이 카카오톡의 광범위한 공격 표면을 조사하여 더 많은 버그를 찾을 수 있도록 도구를 공개합니다.

   https://github.com/stulle123/kakaotalk_analysis/…

   카카오와 주고 받은 내용이네요.

   내용의 처음이 마지막 서신인거 같은데.
   취약점을 공개적으로 밝히는것은 선호하지 않지만 너님이 올린다니 카카오의 신원은 가리고 열려주면 좋겠어...

   2023-12-13 06:37
   다시 안녕하세요,
   우선, 블로그 게시물을 게시하지 말아 주시길 요청드립니다. 카카오의 버그 바운티 프로그램은 기본적으로 정보 비공개를 기반으로 하기 때문에, 취약점에 대한 정보가 해결되었는지 여부와 상관없이 공개될 수 없습니다.
   두 번째로, CVE ID를 요청할 계획은 없습니다.
   귀하가 실망할 수 있다는 것을 이해하지만, 이것은 당사의 정책이므로 어쩔 수 없습니다. 개인적으로도 매우 유감스럽게 생각합니다.
   이해해 주셔서 감사합니다.

   2023-12-13 13:22
   안녕하세요!
   언제까지 문제를 해결할 계획인지 알려주실 수 있나요?
   다음 카카오톡 릴리스와 함께인가요?
   감사합니다

   2024-01-02 15:44
   새해 복 많이 받으세요!
   이슈에 관한 새로운 소식이 있나요?
   최신 카카오톡 버전에서 취약점을 패치했나요?
   감사합니다

   2024-01-03 02:16
   안녕하세요,
   카카오 보안팀입니다.
   이 취약점 조치는 아직 진행 중입니다.
   참고 바랍니다.

   CommerceBuyActivity
   2024년 2월 전에 패치 예정입니다.
   m.shoppinghow.kakao.com
   조치가 완료되었습니다.
   Kakao 메일 계정
   조치가 논의 중입니다.
   감사합니다,
   카카오 보안팀

   2024-01-08 20:47
   카카오 보안팀 안녕하세요,
   답변 주셔서 감사합니다.
   버그 바운티 프로그램에 대한 피드백을 드리자면:
   바운티 보상을 한국 시민에게만 제한하는 것은 귀사에 매우 위험하다고 생각합니다.
   이로 인해 국제 보안 연구자들이 취약점을 귀사에 직접 보고하지 않고, 다른 형태의 무책임한 공개(지하 포럼, 블랙 마켓 등)를 사용할 수 있습니다.

   2024-01-09 02:06
   귀중한 피드백에 대해 대단히 감사합니다. 저희는 사용자들의 제안을 진지하게 받아들이고 지속적으로 서비스를 개선하기 위해 최선을 다하고 있습니다. 귀하의 피드백은 저희 팀에서 철저히 검토하고 향후 개선 사항에 반영될 것입니다.
   풍요롭고 행복한 새해 되시길 바랍니다!

   2024-01-28 16:57
   안녕하세요!
   업데이트가 있나요? 취약점이 해결되었나요?
   감사합니다,stullenfoo

   2024-01-29 03:28
   안녕하세요.
   우선, 지속적인 관심에 감사드립니다.
   현재 이 취약점을 해결 중이며 2월 내로 해결될 것으로 예상하고 있습니다. 추가 정보나 도움이 필요하시면 알려주세요.
   감사합니다,

   2024-02-18 12:47
   안녕하세요,
   업데이트가 있나요?
   https://buy.kako.com이 오프라인 상태이고, https://m.shoppinghow.kakao.com/m/product/…;%3E가 이제 큰따옴표를 인코딩하고 있다는 것을 발견했습니다. 그래서 XSS 취약점이 해결된 것 같습니다.
   안드로이드 앱도 수정되었나요?
   감사합니다,

   2024-03-12 12:14
   다시 안녕하세요,
   안드로이드 앱의 남아 있는 버그를 수정하셨나요?
   감사합니다,
   stullenfoo

   2024-03-14 02:08
   안녕하세요,
   안드로이드 카카오톡의 문제는 해결되었으며, 수정 사항은 버전 1.9.0에 포함되었습니다. 지속적인 관심과 지원에 감사드립니다.

   2024-03-14 11:14
   안녕하세요,
   좋은 소식이네요!
   문제가 해결되었으므로, 이와 관련된 블로그 게시물을 작성할 예정임을 알려드립니다.
   블로그 게시물을 게시하는 것과 관련하여, 제 18조의 이 독점적 구제조치는 제가 보상을 받지 못했기 때문에 이를 허용합니다:
   ⑤ ""회원""은 비밀유지 의무에 대한 동의를 거부할 수 있습니다. 다만, 이 경우 ""프로그램"" 이용이 불가능합니다.
   또한, 서비스 약관에 명시된 바와 같이, 이 프로그램은 한국인에게만 적용되며, 사실 저는 한국 시민권을 가지고 있지 않습니다.
   블로그 게시물을 온라인에 게시하기 전에, 이를 공유하겠습니다.

   2024-03-15 03:06
   먼저, 훌륭한 보고서와 지속적인 참여에 대해 진심으로 감사드립니다.
   저희는 취약점을 공개적으로 밝히지 않는 것을 선호하지만, 귀하의 관점을 존중하고 소중히 여깁니다.
   귀하께서 이 주제에 대해 블로그 게시물을 작성하기로 결정하신다면, 저희 회사의 신원이 드러날 수 있는 정보를 가려주실 것을 부탁드립니다.
   감사합니다.

   한국 최대 모바일 채팅 앱에서 발견된 1-클릭 익스플로잇
   GN+가 번역 요약한 것도 같이 참고하세요.

   쥔장님 혹시 내용 수정 기능은 없을까요?
   번역이 요상해서 첨부해주신 링크를 추가하고 싶은데 수정하는 방법을 찾을 수가 없습니다.

   안타깝지만.. 수정 기능은 없어서요. 아마도 보실 분들은 해당 링크랑 같이 보실듯 합니다 ^^;;

     현상금은 한국인만 받을 수 있기 때문에 저희는 아무런 보상도 받지 못했습니다

   좋은 일해놓고 욕먹을 수 있는 여지를 남겨두네요. 아쉽네요.

   좋은 일=취약점 보고한 외국인
   욕먹을 일 = 취약점 보고한 외국인이 현상금은 한국인만 받을수 있다는 글

   이게 맞나요??

   좋은 일: 취약점 보고한 사람에게 현상금을 지급하는 일
   욕먹을 수 있는 여지: 한국인에게만 지급하는것으로 제한한 것

   으로 이해됩니다만

   원 댓글의 늬앙스는 칭찬할 만한 일 정도로 읽히는데요, 현상금(내지는 소정의 보상)을 지급하지 않는게 나쁜(?) 일이지, 지급하는게 칭찬할만한 일인가... 싶습니다.

   좋은 일을 하고 욕먹는 주체가 누구인가요? 제보자인가요 아니면 카카오인가요

   누가 욕먹을 여지를 남긴건지 잘 못알아들었습니다.

     우리는 카카오의 버그 바운티 프로그램을 통해 2023년 12월에 이 취약점을 보고했습니다 . 다만, 현상금은 한국인만 받을 수 있기 때문에 저희는 아무런 보상도 받지 못했습니다🤯
     카카오는 즉각적인 수정 조치로 https://buy.kakao.com 을 다운시키고 /auth/0/cleanFrontRedirect?returnUrl= 리디렉션을 제거했습니다.

   어이쿠

   하이고.. ㅋㅋ 한국인에게도 주긴 할까요?
   성과는 내 몫!
   손실은 네 몫!
   인 한국 조직문화에서? 퍽이나 ㅋㅋ

   • 포상금 수령에 필요한 은행 계좌는 국내 은행에서 발급된 계좌여야 하며, “회원” 본인명의의 계좌로 한정합니다.
   • 국내·외 거주하는 한국인이어야 하며, 경제제재 대상국에 거주하는 경우에는 포상금 지급이 거절될 수 있습니다

   바운티 프로그램이 완전히 한국인 한정이네요.
   최종 보상금 상한이 1000만원으로 되어 있어서 카카오 정도면, 더 풀어줘도 될거 같은데 많이 아쉽네요.

   https://github.com/stulle123/kakaotalk_analysis/…
   발견한 사람이 문의한 내용인 것 같은데, 바운티 정책 포함해서 관련 처리가 조금 아쉬워보이긴 하네요...
"
"https://news.hada.io/topic?id=15464","1987년처럼 처음부터 비디오 게임을 만드는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      1987년처럼 처음부터 비디오 게임을 만드는 방법

비디오 게임을 1987년처럼 처음부터 작성하기

  우리가 만드는 것

     * X 프로토콜의 11번째 버전은 1987년에 탄생했음.
     * X11은 GPU가 등장하기 전의 모델이므로 오늘날의 하드웨어와 잘 맞지 않음.
     * 모든 Unix 시스템에는 X 서버가 있으며, macOS와 Windows에서도 GUI Linux 애플리케이션을 실행할 수 있음.
     * X11 프로토콜은 비교적 간단하며, 소켓을 생성하는 것만으로 시작할 수 있음.
     * 2D 애플리케이션의 경우, GPU와 상호작용할 필요 없이 작동할 수 있음.

  인증

     * 이전 기사에서는 인증 없이 X 서버에 연결했음.
     * 이제 X 인증 프로토콜을 지원함.
     * 이는 XWayland를 사용하는 일부 데스크탑 환경에서 인증이 필요하기 때문임.
     * MIT-MAGIC-COOKIE-1 메커니즘을 사용하여 인증을 처리함.

  창 열기

     * UNIX 도메인 소켓을 열어 X 서버와 통신함.
     * X11 핸드셰이크를 통해 서버와 연결을 설정함.
     * 그래픽 컨텍스트를 생성하고 창을 만듦.
     * 창을 표시하기 위해 map_window 호출을 사용함.

  자산 로드

     * 게임에 필요한 이미지를 로드하고, X11 이미지 형식에 맞게 변환함.
     * Pixmap을 생성하고, 이미지를 업로드한 후, 필요한 부분을 창에 복사함.

  GN⁺의 의견

     * X11의 간단함: X11 프로토콜은 상대적으로 간단하여 직접 소켓을 통해 통신할 수 있음. 이는 초급 엔지니어에게 네트워크 프로그래밍과 GUI의 기본 개념을 이해하는 데 도움이 됨.
     * 최적화 가능성: Pixmap과 같은 오프스크린 버퍼를 사용하여 이미지를 한 번만 업로드하고, 이후에는 빠르게 복사할 수 있음. 이는 성능 최적화의 좋은 예시임.
     * 오딘 언어의 장점: 오딘 언어는 메모리 관리와 같은 복잡한 작업을 간단하게 처리할 수 있는 기능을 제공함. 이는 효율적인 프로그래밍을 가능하게 함.
     * 레거시 시스템 지원: 이 방법은 오래된 시스템에서도 작동할 수 있음. 이는 다양한 환경에서 소프트웨어를 실행해야 하는 경우 유용함.
     * 학습 자원: X11과 같은 저수준 프로토콜을 직접 다루는 것은 GUI의 내부 동작을 이해하는 데 큰 도움이 됨. 이는 엔지니어의 기술 향상에 기여할 수 있음.

        Hacker News 의견

     * 첫 번째 댓글: 1987년의 PC는 1~2MB의 RAM을 가졌고, Super NES는 128KB RAM을 가짐. Microsoft의 프로그램보다 훨씬 작은 크기의 실행 파일을 만들었음. 링크
     * 두 번째 댓글: X11은 오래되었지만, 게임 개발에 필요한 기본 기능만 구현하면 나머지는 신경 쓸 필요가 없음. Xlib를 사용하면 더 쉽게 작업할 수 있음.
     * 세 번째 댓글: DOS PC용 지뢰찾기 클론을 Turbo Pascal로 개발했음. 큰 레벨에서 재귀 알고리즘 문제를 겪었고, 시작 위치를 안전하게 선택할 수 있는 기능을 추가했음.
     * 네 번째 댓글: 1987년에 게임을 개발하는 것은 오늘날보다 훨씬 힘들었음. DOS는 멀티태스킹을 지원하지 않아 작업 흐름이 매우 비효율적이었음. 링크
     * 다섯 번째 댓글: Godot 엔진의 wasm 파일 크기가 최소 50MB라서 실망했음. 특히 간단한 2D 게임에서는 최적화가 필요함. 전체적으로는 인상적이었음.
     * 여섯 번째 댓글: Odin 언어에 흥미가 생겼음. Odin은 Zig와 비슷하게 메모리 할당기를 함수에 전달하지만, 더 간편하게 처리할 수 있는 메커니즘을 가지고 있음.
     * 일곱 번째 댓글: Windows 3.1의 지뢰찾기에는 치트 코드가 있었음. 특정 키 조합을 입력하면 안전한 칸과 폭탄이 있는 칸을 구분할 수 있었음.
     * 여덟 번째 댓글: SDL 같은 라이브러리를 사용하면 오버헤드가 거의 없고, 다양한 운영체제를 지원할 수 있음. 레거시 SDL 1.x를 사용하면 오래된 Linux 버전도 지원 가능함.
     * 아홉 번째 댓글: Simon Tatham의 Mines Windows 실행 파일 크기는 약 180KiB임. 링크
"
"https://news.hada.io/topic?id=15471","회로 기판 설계를 위한 Generative AI 테스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     회로 기판 설계를 위한 Generative AI 테스트

회로 기판 설계를 위한 생성형 AI 테스트

  소개

     * AI 기반 챗봇이 회로 기판 설계와 같은 정밀한 작업에 도움이 될 수 있는지 테스트함.
     * LLMs(대형 언어 모델)는 종종 세부 사항을 잘못 이해할 수 있음.
     * 전자 설계에서 결정론적 접근이 중요함.
     * 현재 AI 제품들은 과장된 면이 있지만, 적절한 접근법을 통해 실질적인 유용성을 찾을 수 있음.
     * 전문가가 일상적으로 수행하는 어려운 설계 작업에 LLMs를 테스트함.
     * 테스트에 사용된 모델: Google의 Gemini 1.5 Pro, OpenAI의 GPT-4o, Anthropic의 Claude 3 Opus.

  어리석은 질문하기

     * 회로 기판 설계에는 많은 지식이 필요함.
     * LLMs에게 간단한 질문을 하여 학습하는 방법을 시도함.
     * 예: ""회로 기판의 트레이스 단위 길이당 지연은 무엇인가?""
     * Claude 3 Opus가 가장 정확한 답변을 제공함.
     * Google Gemini 1.5는 인터넷에서 가져온 저품질 자료로 인해 성능이 저조함.

  부품 찾기

     * 경험 많은 엔지니어는 필요한 부품을 빠르게 찾을 수 있음.
     * AI가 부품을 찾는 능력을 테스트함.
     * 예: 광 이더넷을 사용하는 로봇 모터 드라이버의 부품 찾기.
     * 모든 모델이 적절한 부품을 추천하지 못함.
     * 평균적인 응용 프로그램에 맞춘 부품 추천이 많았음.

  데이터시트 파싱

     * 회로 기판 설계에 필요한 데이터는 PDF 데이터시트에 포함됨.
     * LLMs가 PDF에서 데이터를 추출하는 능력을 테스트함.
     * 가장 효과적인 방법은 전체 데이터시트를 LLM에 업로드하고 상호작용적으로 세부 사항을 쿼리하는 것임.
     * Gemini 1.5가 이 작업에서 가장 신뢰할 만한 성능을 보임.
     * 핀 테이블과 BGA 풋프린트를 생성하는 데 성공함.

  회로 설계

     * LLMs가 회로 설계 자체를 할 수 있는지 테스트함.
     * 예: 전자 마이크로폰을 위한 프리앰프 설계.
     * Claude 3 Opus가 가장 좋은 답변을 제공함.
     * 그러나 일부 잘못된 결정과 부정확한 회로 설계가 포함됨.
     * LLMs는 정보 추출과 변환 작업에 뛰어나지만, 원래 설계 합성에는 어려움을 겪음.

  결론

     * 회로 기판 설계는 많은 정밀성이 요구됨.
     * LLMs는 코드 작성에 유용할 수 있음.
     * Claude 3는 새로운 도메인 학습에 유용함.
     * Gemini는 데이터시트에서 데이터를 추출하는 데 유용함.
     * GPT-4o는 테스트에서 가장 유용한 답변을 제공하지 못함.
     * LLMs는 정보 검색과 코드 생성에 뛰어나지만, 훈련 데이터 분포에서 벗어난 도메인에서는 한계가 있음.

GN⁺의 의견

     * LLMs의 유용성: LLMs는 회로 기판 설계에서 정보 검색과 코드 생성에 유용할 수 있음. 특히 데이터시트에서 필요한 정보를 추출하는 데 강점을 보임.
     * 한계점: LLMs는 원래 설계 합성에는 어려움을 겪음. 이는 훈련 데이터의 한계와 관련이 있을 수 있음.
     * 미래 연구: LLMs의 회로 설계 능력을 향상시키기 위해 네트리스트 생성 작업에 대한 미세 조정이 필요함. 또한, 더 많은 데이터와 훈련이 필요할 수 있음.
     * 실제 활용: 현재 LLMs는 회로 설계의 보조 도구로 사용될 수 있지만, 전문가의 검토와 수정이 필요함. 완전한 자동화에는 한계가 있음.
     * 비판적 시각: LLMs의 답변은 종종 평균적인 응용 프로그램에 맞춰져 있어 특정 요구 사항을 충족하지 못할 수 있음. 이는 실제 설계에서 중요한 문제를 초래할 수 있음.

        Hacker News 의견

     * Sonnet 3.5가 Opus보다 훨씬 나은 성능을 보이며, 비용도 적게 듦. GPT-4보다 Opus가 더 나음. GPT-4o는 추론 능력이 떨어짐.
     * 제로샷 LLM의 한계를 보여주는 좋은 예시임. 접근 방식이 잘못된 것 같음.
     * 전체론적 접근이 필요한 경우, 다음 토큰 예측보다는 확산 기반 생성 구조가 더 적합할 것 같음.
     * LLM을 회로 설계에 사용하는 것은 다른 복잡한 작업에 사용하는 것과 비슷함. 특정 데이터 소스에서 구체적인 데이터를 추출하는 데 유용함.
     * LLM을 특정 분야에 사용하려면 미세 조정이 필요함. AGI가 모든 분야에서 능숙하게 작업할 수 있는 단계는 아직 아님.
     * 신경망을 사용해 조합적 문제를 해결하는 것은 시간 낭비라고 생각함. 반대 의견을 듣고 싶음.
     * AI가 생성한 회로는 전문가가 설계한 것보다 비용과 크기가 세 배나 큼. 필요한 연결도 많이 빠져 있음.
     * Flux.ai와 비교해 보고 싶음.
     * NP-완전 문제에 대한 설명이 떠오름. 컴퓨터가 제공하는 답이 맞는지 확인하는 과정이 불쾌하게 느껴짐.
     * 진화된 회로에 대한 논의는 Dr. Adrian Thompson의 90년대 연구를 언급하지 않고는 불완전함.
     * 회로 설계에 대한 생성 AI는 곧 지배적인 형태가 될 것임. AI가 강력한 기능 블록 없이 회로를 생성할 수는 없음.
     * 회로 보드를 평판 스캔하고 기계 학습을 사용해 회로도를 만드는 아이디어를 생각해 냄. 실현 가능성은 낮음.
     * 데이터시트를 읽고 Spice 회로를 생성하는 AI가 필요함. 시뮬레이션 구성 요소의 라이브러리를 구축하는 것이 목표임.
"
"https://news.hada.io/topic?id=15470","[사설] IT 강국 대한민국은 어디로 갔을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       [사설] IT 강국 대한민국은 어디로 갔을까?

  현황과 문제점

   한국은 AI 발전을 위해 조 단위의 대규모 예산을 편성하고 있습니다. 과기정통부, 서울시, 광주시 등 여러 정부 기관에서 AI 관련 예산을 책정하고 있지만, 실질적인 AI 발전으로 이어지지 않고 있습니다. 이는 예산 사용의 비효율성과 분산된 집행 방식에서 기인합니다.

   가장 큰 문제는 최신 AI 인프라, 특히 고성능 AI 칩 확보에 실패했다는 점입니다. 많은 연구 시설에서 구형 모델을 사용하고 있어 성능 저하를 초래하고 있습니다. 또한, 중앙정부, 지방자치단체, 공기업 등이 개별적으로 예산을 집행하면서 통합적인 접근이 부족한 상황입니다.

   이러한 환경은 AI 인재 유출로 이어지고 있습니다. 연구 지원과 환경 조성이 미흡하여 많은 고급 인재들이 해외로 떠나고 있습니다. 더불어 장기적인 비전 없이 단기적인 성과에 치중하는 경향은 지속 가능한 AI 생태계 조성을 어렵게 만들고 있습니다.

  타 산업과의 비교

   반도체, 디스플레이, 이차전지 산업은 국가적 차원의 강력한 지원을 받고 있습니다. 이에 비해 소프트웨어 산업, 특히 AI 분야에 대한 관심과 지원은 상대적으로 부족합니다. 이는 미래 산업 경쟁력 확보에 걸림돌이 될 수 있습니다.

  개선 방향

   한국의 AI 경쟁력 강화를 위해서는 다음과 같은 개선이 필요합니다:
    1. 예산 사용의 효율화: 실질적인 AI 발전에 예산을 집중하고, 최신 AI 인프라 확보에 투자해야 합니다.
    2. 통합적 접근: 국가 차원의 AI 전략을 수립하고, 예산을 효율적이고 집중적으로 사용해야 합니다.
    3. 인재 유치 및 유지: 연구 지원과 환경 조성을 통해 국내 인재의 해외 유출을 방지하고, 해외 인재를 유치해야 합니다.
    4. 장기적 비전 수립: 5년, 10년 후를 대비한 지속 가능한 AI 생태계를 조성하고, 산학연 협력을 강화해야 합니다.

  결론

   한국의 AI 정책과 예산 편성에 대한 근본적인 재검토가 필요합니다. 올바른 결정과 실행을 통해 한국이 AI 강국으로 도약할 수 있는 기회가 있습니다. 이를 위해서는 정부, 기업, 학계가 협력하여 장기적인 비전을 세우고 실천해 나가야 할 것입니다.

   Summary by Claude3.5 Sonnet

   저도 국내에서 AI로 석사 전공하고 도쿄에 있는 AI 회사에 취업했습니다. 할 말이 참 많지만.... 어쨌든 일본에 온 게 가장 잘 한 선택이었습니다.

   대안을 제시하라고들 하죠. 하지만, 대안은 존재하지 않고 존재할 수 없으며 존재하면 안 됩니다.
   진짜 대안은 말이죠.세대교체 뿐입니다.
   그냥 저출산에 대해 국가가 대책 마련해놓는 꼴 보면 답 나옵니다.

   그냥 답 없어요. 세대교체 말고는.

   세대교체에 대해 좀 더 자세히 이야기 해주실 수 있을까요?
   어떤 의미의 세대교체인지 모르겠습니다.

   세대갈등 조장이 될까봐 조심스러운데요, 일단 현재 결정권자들은 확실히 제조업과 실물 위주의 사고 방식에, 금융업과 IT 등 지식노동에 대한 이해가 전무하고 개인의 권력과 영달만을 바라는 것 같습니다

   ""IT 등 지식노동에 대한 이해가 전무""하다는 부분은 일부 맞습니다. 결정권자, 중간관리자들의 배타적으로 하는 행태, 사업 단위로 성과를 챙기는 행태를 좀 자제해야한다고 생각합니다.

   일단 해외 인력 유출 세계 2위인 것이 가장 충격적이였내요. 이렇게 높을 준 몰랐는데요…

   좀 더 시각적으로 보고 싶으시면 이곳을 참고해보세요. https://macropolo.org/digital-projects/the-global-ai-talent-tracker/

   감사합니다 :)

   우리나라가 IT강국이었던 적이 있나요? 인터넷 보급과 전길남 교수님의 세계 2호 인터넷 개발의 업적이 있긴 하지만 우리나라가 인터넷을 주도했던 역사는 제 기억에는 없는 것 같은데요. 오히려 현재진행형으로 삼성전자가 전세계에 스마트폰 보급와 제반 서비스를, 라인이 글로벌 메신저 서비스를 하고 있는게 대한민국 역사상 가장 영향력있는 사례이긴 합니다. 다만 두 사례 다 2010년대에 시작된 일인 점, 두 사례 다 패스트 팔로어의 입지인 것을 감안하면 우리나라가 과거의 IT강국이었다 자평하기에는 무리가 있다고 생각합니다

   20년동안 미국이 주도하는 신기술의 격차를 목도할 때마다 항상 나오던 게 IT강국론인데, IT강국론은 정부가 근거없이 주장하는 구호에 불과하지 않나 생각합니다

   그리고 필자분께서 왜 이런 글을 쓰게 되셨는지 계기가 개인적으로 궁금하네요. 연구기간 축소와 연구비 삭감 얘기가 있던데 혹시 그것 때문인지 궁금합니다. 경제지는 언제나 인력이 없다고 떠들기만 해서 개인적으로 별로 신뢰는 안하는데 설마 그걸 보고 글을 쓰게 되신 건지... 알파고 나왔을때도 머신러닝 인력 없다고 언론들이 기사 썼던것 같은데 그냥 조건반사로 튀어나오는 기삿거리 아닌가 싶네요

   안녕하세요. 글 작성자 입니다. 말씀하신 부분이 맞습니다. IT 강국이라는 미명 자체가 만들어진 용어인 것도 맞고 언론에서도 자주 다뤄지는 주제인데요. 이 글을 쓰게된 이유는 실제로 인공지능 분야 인재 유출, 인프라 부족, 예산이 나눠먹기가 또 반복되고 있어서 이것에 대해 생각을 적어 보았습니다. 반사적으로 나오는 말이긴 하나 매번 나오는 걸 보면 전혀 고쳐지지 않고 있다는 생각이 듭니다.

   확인 감사합니다

   이런 현상이 반복되는건 정책 결정권자들을 포함한 이해당사자들이 현 상황을 원하기 때문이라고 밖에는 설명이 안됩니다. 기술적인건 모르니 남에게 떠넘기고, 돈은 줬으니 기대효과를 요구하고, 트렌드에 억지로 맞춘 의심스러운 성과를 들고 생색내기에 정말 좋은 구조니까요

   지자체에 AI예산을 줘서 설익은 실용사례를 요구하기보다는 전문연구기관의 규모를 키워서 거기에 예산을 몰아주는게 그나마 현실적인 대안이라고 생각합니다

   ""지자체에 AI예산을 줘서 설익은 실용사례를 요구하기보다는 전문연구기관의 규모를 키워서 거기에 예산을 몰아주는게"" 라는 말에 적극 동의 합니다. 개인적으로 부처별로 뿌리는 것도 멈추고 전문 연구 기관 및 연구 단지 등에 힘을 실어주면 좋겠다는 생각이 있습니다.
"
"https://news.hada.io/topic?id=15524","EU, Microsoft의 Teams와 Office 번들링에 대한 반독점 규정 위반 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           EU, Microsoft의 Teams와 Office 번들링에 대한 반독점 규정 위반 발표

     * EU의 주장: 마이크로소프트가 Teams 메시징 및 화상회의 앱을 Office 365와 Microsoft 365 같은 비즈니스 소프트웨어와 묶어 판매하여 경쟁을 제한했음.
     * 경쟁 제한: 고객이 소프트웨어를 구매할 때 Teams를 사용할지 여부를 선택할 수 없도록 하여 Teams에 배포 이점을 제공했음
     * 경쟁사 불만: Slack과 Alfaview 같은 경쟁사들이 마이크로소프트의 시장 지배력 남용을 주장하며 불만을 제기
     * 마이크로소프트의 대응: 유럽 고객을 위해 Teams를 제외한 소프트웨어 패키지를 제공하는 등 일부 변경을 했으나, 유럽연합은 이를 충분하지 않다고 판단
     * 향후 절차: 마이크로소프트는 유럽연합의 최종 결정 전에 이의 제기할 기회를 가짐. 위반이 확정되면 연간 글로벌 매출의 최대 10%에 해당하는 벌금 또는 시정 조치를 받을 수 있음

  GN⁺의 의견

     * 경쟁 촉진의 중요성: 원활한 경쟁은 혁신을 촉진하고 소비자에게 더 나은 선택지를 제공함.
     * 기술 생태계의 공정성: 특정 제품을 강제로 묶어 판매하는 것은 시장의 공정성을 해칠 수 있음.
     * 기업의 책임: 대기업은 시장 지배력을 남용하지 않도록 주의해야 함.
     * 소프트웨어 선택의 자유: 사용자가 필요에 따라 소프트웨어를 선택할 수 있는 자유가 보장되어야 함.
     * 경쟁사 지원: 경쟁사들이 공정하게 경쟁할 수 있는 환경을 조성하는 것이 중요함.

        Hacker News 의견

     * 유럽 기반 스타트업이 MS Teams의 번들링으로 인해 큰 타격을 입었음. 성장세가 둔화되고, 고객 유지율이 급격히 떨어졌으며, 결국 회사 규모를 줄여야 했음.
     * MS Teams는 사용자가 원하지 않아도 자동으로 설치되고 실행됨. 이는 소비자에게 불편을 초래함.
     * 회사에서 MS Teams를 무료로 사용하다가 이제는 비용을 지불해야 하는 상황. 대안은 고려하지 않음.
     * 대기업에 대한 법 적용이 일관되지 않음. EU의 조치는 소비자에게 큰 도움이 되지 않음.
     * 기업이 Slack을 대체할 이유가 없다는 의견.
     * 정부가 독점 운영체제와 파일 형식을 제거하고, 오픈 소스 소프트웨어 개발을 지원하는 것이 더 효과적일 수 있음.
     * 정부는 개방형 통신 프로토콜과 파일 형식을 요구해야 함. 클라이언트 애플리케이션은 개별적인 장점으로 경쟁해야 함.
     * 반경쟁적 번들링과 통합된 사용자 경험 제공의 차이점에 대한 의문.
     * MS는 벌금을 지불하고 끝낼 것이라는 의견. Teams는 품질이 낮지만 무료로 제공되어 시장 점유율을 얻었음.
     * MS Teams는 윈도우 머신에서 자동으로 시작되며, 계정이 없어도 실행됨.
"
"https://news.hada.io/topic?id=15541","HN에 공개: Glasskube – Helm 대안 오픈 소스 Kubernetes 패키지 관리자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN에 공개: Glasskube – Helm 대안 오픈 소스 Kubernetes 패키지 관리자

📦 Glasskube란 무엇인가?

   Glasskube는 Kubernetes를 위한 오픈 소스 패키지 관리자임. Helm이나 Kustomize 같은 도구보다 20배 빠르게 패키지를 배포, 업데이트, 구성할 수 있음. Homebrew와 npm의 단순함에서 영감을 받음. Glasskube UI, CLI, 또는 GitOps를 통해 패키지를 직접 배포할 수 있음.

  ⭐️ 왜 Glasskube인가?

     * Kubernetes 생태계에서 5년 이상 일하면서 패키지 관리, 구성, 배포에 어려움을 겪음.
     * Homebrew, apt, dnf 같은 도구는 사용하기 쉬웠음.
     * 사용자들이 공통적으로 겪는 문제를 해결하기 위해 Glasskube를 개발하게 됨.

  ✨ 주요 기능

     * 단순하고 신뢰성 있는 CLI와 UI: Glasskube UI를 통해 클러스터에 패키지를 쉽게 설치할 수 있음.
     * 패키지 구성: UI나 CLI를 통해 타입 세이프한 입력 값을 사용해 패키지를 구성할 수 있음.
     * 의존성 관리: Glasskube 패키지는 의존성을 인식하여 여러 패키지에서 참조 가능하며 올바른 네임스페이스에 설치됨.
     * 안전한 패키지 업데이트: 단일 클릭(또는 CLI 명령)으로 업데이트를 미리 보고 원하는 버전으로 업데이트할 수 있음.
     * 반응 및 댓글: GitHub이나 Glasskube UI에서 Kubernetes 패키지에 대해 토론하고 투표할 수 있음.
     * GitOps 통합: 모든 Glasskube 패키지는 GitOps로 관리 가능.
     * 다중 저장소 및 개인 패키지: 여러 저장소를 사용하고 개인 패키지를 게시할 수 있음.

  🚀 빠른 시작

     * Homebrew를 통해 Glasskube 설치:
brew install glasskube/tap/glasskube

     * 클러스터에 필요한 구성 요소 설치:
glasskube bootstrap

     * 패키지 관리자 UI 시작:
glasskube serve

       이 명령어는 기본 브라우저에서 http://localhost:8580을 열어줌.

  📦 지원되는 패키지

   Glasskube는 다양한 패키지를 지원하며, 주요 패키지는 다음과 같음:
     * Kubernetes Dashboard kubernetes/dashboard
     * Cert Manager cert-manager/cert-manager
     * Ingress-NGINX Controller kubernetes/ingress-nginx
     * Kube Prometheus Stack prometheus-operator/kube-prometheus
     * Cloud Native PG cloudnative-pg/cloudnative-pg

  ☝️ 도움이 필요하거나 피드백을 제공하고 싶다면?

   문제가 발생하면 Discord에서 지원을 받을 수 있음. 버그, 이슈 또는 기능 요청은 이슈를 열어 해결 가능.

  🤝 Glasskube에 기여하는 방법

   Glasskube 개선을 위해 피드백이 매우 중요함. 베타 버전을 사용해보고, 문제를 보고하며, 제안을 공유하는 것이 기여 방법임. 자세한 내용은 기여 가이드를 참조.

  🤩 모든 기여자들에게 감사

   프로젝트를 지원해주는 모든 사람들에게 감사. 기여의 크기에 상관없이 모두에게 감사의 마음을 전함.

  📘 라이선스

   Glasskube는 Apache 2.0 라이선스 하에 있음. 자세한 내용은 LICENSE 파일을 참조.

GN⁺의 의견

     * Kubernetes 패키지 관리의 혁신: Glasskube는 Kubernetes 패키지 관리의 복잡성을 크게 줄여줌.
     * 사용자 친화적 인터페이스: UI와 CLI를 통해 사용자가 쉽게 접근할 수 있음.
     * 안전한 업데이트: 업데이트를 미리 테스트하고 안전하게 적용할 수 있는 기능이 매우 유용함.
     * GitOps 통합: GitOps와의 통합으로 DevOps 프로세스를 더욱 원활하게 만듦.
     * 다양한 패키지 지원: 다양한 패키지를 지원하여 유연한 사용이 가능함.

        Hacker News 의견

     * Kubernetes 패키지 관리의 문제점은 중첩된 YAML 파일 처리와 결과의 예측 불가능성임.
     * 새로운 패키지 관리 방식은 흥미로우며 개인 프로젝트에 유용할 수 있음.
     * 전통적인 애플리케이션 패키지는 특정 플랫폼에 맞춰져 있어 설치 시 변경이 거의 없음.
     * Kubernetes 패키지는 여러 계층의 종속성과 구성이 필요하며, 현재 이를 완벽하게 처리하는 솔루션은 없음.
     * Kubernetes 패키지 관리가 brew나 apt처럼 간단해지기 어려운 이유는 환경마다 다른 값이 필요하기 때문임.
     * Kubernetes를 사용하려면 배경 지식이 필요하며, 복잡성을 피할 수 없음.
     * Kubernetes의 단순한 오퍼레이터 모델이 문제를 일으키며, 이를 해결하기 위해 VDOM/리듀서 패러다임이 필요함.
     * Helm과 OLM 문제를 다루는 Kubernetes 오퍼레이터를 많이 구축하고 있으며, CRD 업그레이드 계획에 대한 구체적인 정보가 필요함.
     * Google이 구성 관리를 위한 간단한 프로그래밍 언어를 만들지 않은 이유가 궁금함.
     * Helm의 속도는 큰 문제가 아니며, 마케팅 방향이 잘못되었다고 생각함.
     * Helm은 주로 템플릿 언어로 사용되며, 큰 회사들은 새로운 도구를 필요로 하지 않음.
"
"https://news.hada.io/topic?id=15468","Internet Archive, 출판사 소송으로 50만 권의 책 삭제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Internet Archive, 출판사 소송으로 50만 권의 책 삭제

     * 배경: 인터넷 아카이브(IA)는 출판사와의 소송에서 패소하여 약 50만 권의 책을 삭제
     * 문제: 출판사들이 IA의 디지털 도서 대출을 중단시키면서 많은 독자들이 접근할 수 없게 됨.
     * 대응: IA는 미국 제2순회 항소법원에 항소 중이며, 디지털 대출이 저작권법상 공정 사용에 해당한다고 주장하고 있음.
     * 기술적 방어: IA는 출판사들이 사용하는 것과 동일한 기술을 사용하여 책의 다운로드와 재배포를 방지하고 있음.
     * 사회적 영향: 도서 삭제로 인해 학자, 학생, 교육자 등 많은 사람들이 학습 자료에 접근할 수 없게 되어 교육적 피해가 발생함.
     * 팬들의 반응: 약 19,000명의 지지자들이 서명한 공개 서한을 통해 출판사들에게 도서 삭제 중단을 요청함.

  GN⁺의 의견

     * 디지털 도서 대출의 중요성: 디지털 도서 대출은 특히 접근성이 제한된 지역이나 소외된 커뮤니티에 큰 도움이 됨.
     * 법적 논쟁: 저작권법의 공정 사용 범위에 대한 명확한 정의가 필요함. 이는 디지털 시대의 도서 접근성을 보장하는 데 중요함.
     * 기술적 해결책: 출판사와 도서관이 협력하여 기술적 방어와 공정 사용을 조화롭게 유지할 수 있는 방안을 모색해야 함.
     * 사회적 책임: 출판사들은 지식의 접근성을 제한하는 대신, 더 많은 사람들이 지식을 공유하고 학습할 수 있도록 지원하는 방향으로 나아가야 함.
     * 대안 제시: 다른 디지털 도서관이나 오픈 액세스 플랫폼을 통해 지식의 접근성을 높이는 방안을 고려할 필요가 있음.

        Hacker News 의견

     * 지식의 자유로운 공유 제한: 현대 사회에서 지식을 제한하는 것은 어리석음이며, 인터넷과 독립적인 그룹의 지원으로 출판 모델을 바꿔야 함.
     * 법적 문제: IA(Internet Archive)가 오래된 책을 제공하는 것은 법적으로 문제가 있음. 로빈 후드를 지지할 수 있지만, 법적 위험이 큼.
     * 저작권 개혁 필요성: 저작권 기간이 너무 길며, 이를 개혁하기 위해 로비와 조직화가 필요함.
     * 저작권의 문제점: 출판사와 저자가 이익을 내야 하지만, 이미 사망한 저자의 책은 쉽게 접근할 수 있어야 함.
     * 출판사의 역할: 출판사들이 libgen/ipfs의 성공을 돕고 있는 것 같음. 많은 사람들이 온라인에서 책을 보고 나서 인쇄된 책을 구매함.
     * 커뮤니티 프로젝트: 50만 권의 책을 유지하는 커뮤니티 프로젝트가 있는지 궁금함. libgen 토렌트나 anna's archive 토렌트가 있는지 궁금함.
     * 최근 논의: 최근 해커뉴스에서 관련 주제가 논의됨.
     * IA의 논리: IA가 저작권 침해를 했다는 것이 슬프며, 처음에 왜 책을 추가했는지 이해가 필요함.
     * 해적판의 중요성: 해적판이 인류에게 유익하다는 의견.
     * 전자책과 인쇄책 비교: 전자책이 종이책을 대체할 수 없으며, 종이책의 장점이 많음. 하지만 전자책으로 미리 내용을 확인하는 것이 유용함.
     * 출판사에 대한 반발: 출판사에 대한 반발로 인해 사람들이 해적판을 이용하게 될 것임.
"
"https://news.hada.io/topic?id=15498","Show GN: ChatGPT를 이용한 iOS SMS 필터링 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: ChatGPT를 이용한 iOS SMS 필터링 앱

   스팸 메시지는 junk 로 보내고 알람을 안보냅니다. 나머지는 6개의 카테고리로 분류됩니다. SMS만 필터링 가능하고 iMessage는 매커니즘이 다르기 떄문에 필터링 불가능해요
   카테고리는 두개의 action(transaction, promotion) 과 하위 subactions 들로 구성되어 있어요.

   개발 동기
     * 최근들어 스팸문자가 많이 오더라고요. 주식 종목 추천, 리딩방, 오빠 어쩌구 저쩌구.. 등등
     * 주의력은 소모되는 자원이기 때문에 이런 노이즈에 노출을 막아야 겠다고 생각했어요.

   과정
     * 개발 가이드 에 따라 개발했습니다.
     * 보안 이유로 하나의 미리 정의된 API 만 사용 가능하고 그 도메인은 .well-known/apple-app-site-association 를 세팅해줘야 합니다.
     * 보안 이유로 Message Extension 에서는 메모리에 쓰기가 불가능하고 읽기만 가능합니다. 메인 앱에서 룰을 세팅해주고 Message Extension 에서 해당 Filter Rule 을 읽어서 사용합니다.
     * prefix, suffix, regex 등등으로 필터링 가능해요
     * Message Extension 에서는 수신자의 전화번호를 알 수 없고 받은 메시지의 sender, body 정보만 알 수 있어요.
     * 서버는 cloudflare 를 이용했습니다.

   GPT 프롬프트(일부)
        Extract the ""action"" and ""subAction"" from the given SMS message and output the result in JSON format.
        If the message appears suspicious, set action to ""junk"".
        If the message appears promotional and also a little bit suspicious, set action to ""junk"".
        Do not set action to ""junk"" if the message looks like phone number validation, OTP, or any other legitimate message.

        Output must be JSON format without triple backticks.

        JSON Structure:
        - action: string
        - subAction: string

   …
     * 스팸 메시지에 스트레스 받고 계시면 한번 사용해 보세요. 설치하고 세팅만 해놓으면 앱을 다시 켤 필요도 없습니다.

   수익화는 거의 불가능
     * 사용자가 앱에 진입을 꾸준히 해줘야 광고든, 유료 구독이든 수익화를 생각해 볼텐데 앱의 특성상 설정만 하면 다시 앱에 진입할 일이 없기 때문에 딱히 떠오르지 않았습니다. 그래서 무료입니다.
     * 스팸 번호 DB를 구축하고 스팸 전화까지 블락하는 방법도 있을 텐데 사이드로 하기에는 사이즈가 크게 느껴졌어요.

   trilliwon님!
   근래에 주식관련 스팸이 많이 와서 괴로워 했는데 만족하며 잘 사용하고 있습니다.

   질문이 있습니다.

   앱을 설치하면 3개의 기본 필터가 등록되어 있습니다.
   그중 ""(광고)""도 필터가 있더라구요.
   그래서 아 (광고) 텍스트가 있으면 ""광고""쪽으로 필터가 되나부다했는데
   정크고 빠졌습니다.
   물런 AI 필터링 활성화를 킨 상태입니다.

   어떤 우선순위가 있나봐요?
   그리고 혹시 화이트 리스트를 만들 생각 없으신가요?
   ㅎㅎ

   업데이트 했습니다
   필터 만드실때 junk 외 카테고리를 선택하면 화이트리스트 처럼 동작 합니다
   우선순위는 직접 만든 필터가 먼저이고 직접 만든 필터 중에서도 리스트에서 상단에 있는 필터가 먼저 입니다
   직접 만든 필터에서 아무것도 필터링 하지 못하면 AI 모드로 작동합니다

   https://apps.apple.com/kr/app/…

   필터는 junk 로만 보낼 수 있어요. 카테고리 지정은 안되어 있습니다 ㅎㅎ
   설정은 구체화 할 수 있는데 내일 기능 추가해 볼게요
   AI 활설화 켜시고 광고 필터 제거하면 광고 SMS는 관련 카테고리로 갈거에요

   화이트 리스트 추가 가능하죠. 내일 만들어서 배포하고 다시 공유 드릴게요 :)

   빠른 처리 정말 감사합니다.
   사용해보고 다시 피드백 드리겠습니다.
   감사합니다.

   어?? 2개 모두 같이 있어도 될까요??

   SMS 필터는 하나만 선택할 수 있더라고요
   여러개 동시 사용은 안됩니다ㅠ

   우와 멋집니다!! 후후보다 좋아오!!!

   https://apps.apple.com/kr/app/…

   링크가 잘못되었네요 ;;

   매우 잘 쓰고 있습니다. 쌓여가는 정크 메시지를 볼 때마다 뿌듯합니다.

   https://apps.apple.com/kr/app/…

   어디선가 봤던가 했는데 클리앙 분이 만드셨군요. 개발 후기도 올려주셔서 궁금하신 분은 보셔도 좋을 것 같습니다.
   https://clien.net/service/board/…

   이 앱이 더 잘 만든것 같군요 ㅎㅎㅎ
"
"https://news.hada.io/topic?id=15537","한국 최대 모바일 채팅 앱에서 발견된 1-클릭 익스플로잇","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    한국 최대 모바일 채팅 앱에서 발견된 1-클릭 익스플로잇

TL;DR

     * 카카오톡 10.4.3 버전에서 원격 공격자가 WebView에서 임의의 JavaScript를 실행해 HTTP 요청 헤더에 액세스 토큰을 유출할 수 있는 딥 링크 검증 문제가 있음.
     * 이 토큰을 사용해 다른 사용자의 계정을 탈취하고 공격자가 제어하는 장치에 등록해 채팅 메시지를 읽을 수 있음.
     * 이 버그는 CVE-2023-51219로 할당됨.

배경

     * 카카오톡은 1억 이상의 다운로드를 기록한 한국의 가장 인기 있는 채팅 앱임.
     * 카카오톡은 기본적으로 종단 간 암호화(E2EE)를 사용하지 않음.
     * ""Secure Chat""이라는 선택적 E2EE 기능이 있지만 그룹 메시징이나 음성 통화를 지원하지 않음.

Entry Point: CommerceBuyActivity

     * CommerceBuyActivity WebView는 공격자가 주목할 만한 주요 진입점임.
          + 딥 링크로 시작 가능 (adb shell am start kakaotalk://buy)
          + JavaScript가 활성화됨 (settings.setJavaScriptEnabled(true);)
          + intent:// 스킴을 지원해 다른 비공개 앱 컴포넌트에 데이터 전송 가능.
          + intent:// URI의 검증이 부족해 잠재적으로 모든 앱 컴포넌트에 접근 가능.
          + Authorization HTTP 헤더에 액세스 토큰을 유출함.

URL 리디렉션을 통한 DOM XSS

     * https://buy.kakao.com에서 https://buy.kakao.com/auth/0/cleanFrontRedirect?returnUrl= 엔드포인트를 통해 XSS 취약점을 발견함.
     * https://m.shoppinghow.kakao.com/m/search/q/alert(1)에서 저장된 XSS를 확인함.
     * CommerceBuyActivity WebView에서 임의의 JavaScript를 실행해 사용자의 액세스 토큰을 유출할 수 있음.

딥 링크를 통한 카카오 메일 계정 탈취

     * 악성 딥 링크를 통해 사용자의 액세스 토큰을 공격자 서버로 전송 가능.
     * 액세스 토큰을 사용해 피해자의 카카오 메일 계정을 탈취하거나 새로운 메일 계정을 생성해 기존 이메일 주소를 덮어쓸 수 있음.

Burp를 이용한 카카오톡 비밀번호 재설정

     * 피해자의 카카오 메일 계정에 접근해 비밀번호 재설정을 시도할 수 있음.
     * 2단계 인증(2FA)을 우회하기 위해 Burp를 사용해 요청을 가로채고 수정함.

PoC

     * 공격자가 악성 딥 링크를 준비해 피해자가 클릭하면 액세스 토큰을 유출함.
     * 유출된 액세스 토큰을 사용해 피해자의 비밀번호를 재설정하고 공격자의 장치를 피해자의 카카오톡 계정에 등록함.

Takeaways

     * 여전히 복잡하지 않은 공격 체인으로 사용자의 메시지를 탈취할 수 있는 인기 채팅 앱이 존재함.
     * 앱 개발자가 몇 가지 간단한 실수를 하면 Android의 강력한 보안 모델과 메시지 암호화가 도움이 되지 않음.
     * 아시아 채팅 앱은 보안 연구 커뮤니티에서 여전히 저평가되고 있음.

GN⁺의 의견

    1. 보안 취약점의 심각성: 카카오톡과 같은 대중적인 앱에서 발견된 보안 취약점은 사용자 데이터 보호의 중요성을 다시 한번 상기시켜 줌.
    2. 개발자의 책임: 앱 개발자는 보안 검증을 철저히 하고, 특히 민감한 데이터와 관련된 기능에서는 더욱 신경 써야 함.
    3. 사용자 교육: 사용자도 의심스러운 링크를 클릭하지 않도록 주의하고, 2단계 인증을 활성화하는 등 보안 의식을 높여야 함.
    4. 보안 연구의 필요성: 아시아 채팅 앱에 대한 보안 연구가 더 활발히 이루어져야 하며, 이를 통해 더 많은 취약점을 사전에 발견하고 수정할 수 있음.
    5. 대안 제시: 카카오톡 외에도 Signal, Telegram과 같은 보안 중심의 메시징 앱을 고려해 볼 수 있음.
"
"https://news.hada.io/topic?id=15549","Anthropic, Claude Projects 기능 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Anthropic, Claude Projects 기능 추가

     * Pro/Team 요금제 사용자들이 자신만의 채팅 기록과 지식창고가 있는 독립된 작업 공간을 생성하고, Claude와의 채팅에 맥락을 제공하는 기능이 핵심
     * 각 프로젝트 내에서 관련 문서, 텍스트, 코드, 기타 파일을 업로드
     * Claude는 이를 사용하여 해당 프로젝트 내 개별 채팅의 맥락과 배경을 더 잘 이해함
     * 각 프로젝트에는 200K 컨텍스트 창(500페이지 분량의 책에 해당)이 포함되어 있어, 사용자는 Claude의 효과를 높이는 데 필요한 모든 인사이트를 추가할 수 있음
     * 또한 각 프로젝트에 대한 사용자 지정 지침을 정의하여 Claude의 응답을 더욱 맞춤화할 수 있음
          + 예를 들어, Claude에게 보다 격식 있는 어조를 사용하거나 특정 역할 또는 산업의 관점에서 질문에 답변하도록 지시할 수 있음
     * Team 플랜 사용자의 경우, 프로젝트를 조직의 다른 구성원과 공유할 수 있어 협업과 지식 공유가 가능함
          + 여러 구성원이 동일한 프로젝트 환경 내에서 문서를 기여하고, 채팅에 참여하며, 함께 작업할 수 있음

   이제 점점 여러 기능들이 붙는 것 같네요. 본격적으로 하나의 제품이 되어가는 느낌.

   프로젝트 기능으로 작은 파인튜닝 작업계열에 어느 정도 영향이 갈 것 같은데.. 지켜볼 필요가 있어 보입니다.

   뭔가 어제 오늘따라 성능이 떨어진 것 같은데... 뭔가 영향이 있으려나요
"
"https://news.hada.io/topic?id=15463","타지키스탄 관련 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              타지키스탄 관련 노트

타지키스탄에 대한 노트

  개요

     * 인구 (2022년): 960만 명
     * 인구 성장률 (2022년): 2.1%
     * 면적: 55,251 평방마일 (그리스나 뉴욕보다 약간 큼)
     * GDP (명목, 2022년): 105억 달러
     * GDP 성장률 (2022년): 8%
     * 1인당 GDP (명목, 2022년): 1,050달러
     * 1인당 GDP (PPP, 2024년): 5,800달러
     * 인플레이션율 (2018-2023년): 3.8%-9%
     * 주요 수출품: 금
     * 중위 연령: 22세
     * 기대 수명 (2021년): 72세
     * 독립 (설립): 1991년
     * 종교 (2020년): 96% 무슬림 (거의 전부 수니파), 2% 기독교 (주로 러시아 정교회)
     * 부패 인식 지수: 180개국 중 162위
     * 경제 자유 지수: 137위

  스탄 국가들

     * 카자흐스탄: 석유와 가스가 많아 가장 부유함, 러시아 문화와 민족적으로 가장 가까움
     * 우즈베키스탄: 천연가스가 많아 두 번째로 부유함, 문화적으로 터키계
     * 키르기스스탄: 산악 지형이 많고 경제적으로 불안정함, 문화적으로 터키계
     * 투르크메니스탄: 천연가스가 많지만 외부와 거의 단절됨, 문화적으로 터키계
     * 타지키스탄: 가장 가난하고 경제적으로 덜 발달됨, 문화적으로 페르시아계

  부

     * 타지키스탄의 1인당 GDP는 1,050~1,200달러로 세계에서 가장 가난한 30~40개국 중 하나임.
     * 수도 두샨베는 상대적으로 발전된 모습이지만, 시골 지역은 전기와 물 공급이 제한적임.
     * 중국의 투자와 지원이 두샨베의 발전에 큰 역할을 했음.

  두샨베

     * 두샨베는 인구 약 100만 명의 작은 도시로, 최근 몇 년간 급격한 개발이 이루어졌음.
     * 도시는 깨끗하고 조용하며, 많은 고층 건물들이 최근에 세워졌음.
     * 주요 랜드마크로는 독립 기념비와 타지키스탄 국립 박물관이 있음.

  사람들

     * 타지키스탄 사람들은 매우 친절하고 외국인에게 호의적임.
     * 많은 사람들이 해외에서 일하며 송금으로 경제를 지탱하고 있음.
     * 가족 중심의 문화가 강하며, 첫째 아들은 부모를 돌보는 전통이 있음.

  종교

     * 타지키스탄은 거의 전부 무슬림 국가지만, 종교의 자유는 제한적임.
     * 정부는 종교 활동을 엄격히 통제하고 있음.

GN⁺의 의견

     * 중국의 영향력: 타지키스탄의 발전은 중국의 투자와 지원 덕분임. 이는 중국의 지리적, 정치적 이익을 위한 전략적 움직임임.
     * 경제적 불균형: 수도와 시골 지역 간의 경제적 격차가 큼. 이는 개발도상국에서 흔히 볼 수 있는 현상임.
     * 문화적 특성: 타지키스탄의 가족 중심 문화와 전통은 흥미로움. 이는 사회적 안정에 기여할 수 있음.
     * 종교와 정치: 종교의 자유가 제한된 점은 인권 문제로 이어질 수 있음. 이는 국제 사회에서 비판받을 수 있음.
     * 관광 잠재력: 두샨베와 타지키스탄의 자연 경관은 관광 산업의 잠재력을 가지고 있음. 이를 잘 활용하면 경제 발전에 도움이 될 수 있음.

        Hacker News 의견

     * 타지키스탄의 파미르 트레일을 지도에 표시하기 위해 정기적으로 하이킹을 다니고 있음. 아름다운 나라지만 실용적인 도전 과제가 많음.
     * 15년 전에 두 번 방문했으며, 좋은 기억이 많지만 부패와 인종 차별로 인해 슬픔을 느낌. 사람들은 친절하고 개방적이었음.
     * 타지키스탄의 형사 사법 시스템은 대부분 가족 내부에서 문제를 해결하는 방식으로 운영됨. 경찰은 가족에게 문제를 해결하도록 맡김.
     * 보랏 영화에 대한 반응은 세대에 따라 다름. 젊은 세대는 크게 신경 쓰지 않으며, 영화가 재미있다고 생각함.
     * ""-stan"" 접미사는 페르시아어에서 유래했으며, 여러 언어에서 유사한 의미를 가짐. 타지키어와 페르시아어는 같은 언어의 방언임.
     * 타지키스탄의 안보 상황에 대한 지리정치적 요인을 다룬 팟캐스트를 들었음. 매우 흥미로운 내용이었음.
     * 중앙아시아를 여행한 경험이 있으며, 여행 블로그 'Caravanistan'이 여행 계획에 유용했음. 국경을 넘는 경험을 공유하는 포럼도 흥미로웠음.
     * 러시아 다게스탄에서도 비틀즈 헤어스타일이 유행하며, 농담의 소재가 됨.
     * 여름에 13,000피트 고도에서 눈이 내리는 타지키스탄의 지형은 알파인 스포츠 개발에 적합해 보임.
     * 2022년에 친구들과 함께 파미르 고속도로를 오토바이로 여행했으며, 카자흐스탄에서도 시간을 보냈음. 여행을 강력히 추천함.
"
"https://news.hada.io/topic?id=15568","Show GN: Suspense를 안전하고 편리하게 쓰기 위한 라이브러리, Suspensive","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: Suspense를 안전하고 편리하게 쓰기 위한 라이브러리, Suspensive

   안녕하세요, 토스의 프론트엔드 개발자들이 오픈 소스로 운영하는 Suspensive 라이브러리를 소개드려요.

   [React에서 Suspense 사용하기]
   React에서 비동기를 처리하기 위해서 Suspense를 사용하면 불편함들이 있는데요.

   Tanstack Query의 useQuery는 정확하게 타입 추론이 안 되고, ErrorBoundary는 직접 만들거나 설치해야 하죠.

   [Suspensive가 제공하는 기능]
     * Suspense와 편리하게 쓸 수 있는 안전한 <ErrorBoundary />
     * Suspense 상황에서 정확한 타입을 제공하는 useSuspenseQuery() Hook
     * Server-side rendering에서도 안전하게 쓸 수 있는 새로운 <Suspense /> 컴포넌트 옵션들
     * 로딩 상황을 더 사용자 친화적으로 보여주기 위한 <Delay /> 컴포넌트

   이렇게 토스에서 Suspense를 사용할 때 이런 도구가 필요한데.. 싶을 때 쓰는 도구들을 모두 담았어요!

   [링크]
   자세한 내용은 Suspensive 문서도 참고해보세요.
   https://suspensive.org/ko
"
"https://news.hada.io/topic?id=15588","대법원, 40년 된 "Chevron deference" 원칙 폐기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  대법원, 40년 된 ""Chevron deference"" 원칙 폐기

   There is no content to summarize from the provided article link. The text appears to be related to a browser update notification and Cloudflare security information, which are not relevant to the main text.

        Hacker News 의견

     * 의회는 법의 공백을 해석할 권한을 기관에 부여하는 법을 제정할 수 있음
     * 의회가 낙태법을 제정할 수 있는 것처럼 대법원이 입법 책임을 의회에 돌리는 것은 근본적으로 문제가 없음
     * 대법원이 40년간의 법 제정을 쉽게 폐기할 수 있음에 놀라움
          + 이제 의회는 법의 모든 가능한 결과를 명시해야 하며, 그렇지 않으면 판사가 결정하게 됨
          + 따라서 기관은 실제로 규제할 권한이 없어짐
          + 논리적으로는 훌륭하지만, 결정의 부작용을 고려하지 않은 법적 사고임
     * 이번 결정은 재앙임
          + 이제 기업은 지역 법원이 연방 기관의 정책을 뒤집을 수 있는 소송의 불확실성을 고려해야 함
          + 제품 및 수익에 큰 영향을 미칠 수 있으며, 법적 비용뿐만 아니라 대담한 비즈니스 결정을 피하려는 경향이 생길 것임
          + 새로운 대법원이 이 결정을 번복하더라도, 사람들은 대법원의 예측 불가능성에 대해 걱정할 것임
     * ""권력 분립""이 가장 좋은 논거임
          + 규제 기관이 ""판사, 배심원, 집행자"" 역할을 모두 할 수 있음
          + 이러한 권력은 남용될 수 있으며, 기관이 해당 분야에서 최고의 전문성을 가지고 있더라도 위험함
          + 남용된 사람들이 공개적으로 불평하기 어렵게 만듦
          + 몇 년 동안 혼란스럽고 번거로울 수 있지만, 새로운 시스템이 더 나을 것임
     * 전문 지식이 더 이상 법과 정책 적용에 영향을 미치지 않게 되는 것은 파괴적임
          + 법의 적용을 누가 해석할 것인지가 가장 큰 질문임
          + 명확한 진술이 나올 때까지 법원이 다시 도전할 것인지
          + 그동안 ""규제 완화""의 효과는 무엇일 것인지
     * 이번 결과가 끔찍하다고 선언하기 전에, 선거에서 ""좋은 사람들""이 이기지 않을 수도 있음을 고려해야 함
          + ""나쁜 사람들""이 임명한 정부 기관 관리들이 모호한 법을 해석할 수 있음
     * 미국의 기본적인 경향은 행정부에 권력을 위임하는 것임
          + 이러한 권력 축적은 독재를 가능하게 함
          + 독재를 방지하기 위해 행정부 권력의 축적을 견제하는 것이 필요함
     * 의회가 법을 변경하고 싶다면, 그들은 할 수 있음
          + 법을 만드는 것은 행정부가 아니라 의회의 몫임
          + 수십 년 동안 의회는 입법 책임을 행정 국가와 법원에 넘겨 정치적 편의를 취해왔음
          + ""선례""가 있다고 해서 그것이 옳은 것은 아님
          + 동성 결혼 금지, 노예제, 인종 차별 등도 선례가 있었지만, 여전히 절대적으로 잘못된 것이었음
     * 이번 결정의 원인 중 하나는 규제 과잉임
          + 예를 들어, 청정 공기법은 공기 오염을 규제함
          + EPA가 온실가스를 공기 오염 물질로 규제하려 했고, CO2를 오염 물질로 간주하려 했음
          + 이에 기업들이 강하게 반발하기 시작함
"
"https://news.hada.io/topic?id=15521","Microsoft, Windows 11에서 로컬 계정으로 전환하는 문서 삭제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Microsoft, Windows 11에서 로컬 계정으로 전환하는 문서 삭제

     * Windows 11의 Home 및 Pro 버전은 기본적으로 Microsoft 계정으로 로그인해야 함.
     * Microsoft 계정으로 로그인하면 OneDrive, GamePass, Microsoft 365 등의 서비스 이용 가능.
     * 로컬 계정 사용 시 광고와 서비스 가입 알림이 줄어듦.
     * 하지만, Microsoft는 로컬 계정 전환 방법을 설명한 공식 지원 페이지의 내용을 제거함.
     * 6월 12일까지는 Microsoft 계정을 로컬 계정으로 전환하는 방법이 포함되어 있었음.
     * 6월 17일경 해당 내용이 삭제됨.

  여전히 가능한 우회 방법

     * Windows 11 23H2 및 24H2 버전에서 여전히 로컬 계정 생성 가능.
     * 설치 과정 중 Shift+F10을 눌러 명령 프롬프트 창을 열고 OOBE\BYPASSNRO 입력 후 재부팅.
     * Wi-Fi 연결 요청 시 ""인터넷 없음"" 버튼 클릭.
     * Rufus 도구를 사용해 Microsoft 계정 로그인 요구를 우회하는 USB 설치 프로그램 생성 가능.
     * Windows 11 Pro 사용자는 PC를 도메인에 가입하는 옵션을 선택한 후 실제로 도메인에 가입하지 않음.
     * Microsoft 계정으로 설정 후 로그아웃하는 방법도 여전히 가능.

  다른 회사와의 비교

     * Apple과 Google은 기본 기능을 사용하기 위해 계정 로그인을 강제하지 않음.
     * Mac, iPhone, iPad는 로그인 없이 설정 완료 가능.
     * Google은 Chromebook을 게스트 모드로 사용 가능하며, Android 기기도 로그인 없이 사용 가능.

GN⁺의 의견

     * 사용자 경험: Microsoft의 강제 로그인 정책은 사용자 경험을 저해할 수 있음. 특히, 기술에 익숙하지 않은 사용자에게는 불편함을 초래할 수 있음.
     * 보안 문제: 로컬 계정 사용 시 보안 업데이트나 데이터 백업 기능을 놓칠 수 있음. Microsoft 계정 사용 시 더 나은 보안 기능을 제공받을 수 있음.
     * 대안 제품: Apple의 macOS나 Google의 Chrome OS는 계정 로그인 없이도 기본 기능을 사용할 수 있어 대안으로 고려할 만함.
     * 기술적 고려사항: 로컬 계정 사용 시 일부 Microsoft 서비스와의 연동이 제한될 수 있음. 이를 감안하여 사용 목적에 맞는 계정 설정이 필요함.
     * 정책 변화 가능성: Microsoft의 정책이 향후 변경될 가능성도 있음. 사용자 피드백에 따라 정책이 조정될 수 있으므로 지속적인 모니터링이 필요함.

   단순히 계정로그인만 하면 모르겠는데 자동으로 원드라이브 활성화, 마케팅 목적을 데이터 수집, 기타 자사제품 판매 등의 목적이 운영체제 사용을 불편하게 합니다.

   가족 공용으로 쓰는 컴퓨터에는 로컬로 사용중인데, 얼른 정책이 다시 바뀌면 좋겠네요 ㅠ

        Hacker News 의견

     * 과거에 무료 PC를 받기 위해 개인정보를 제공했었음. 현재는 Mac을 사용하지만 Windows 11의 광고와 불필요한 콘텐츠가 너무 많음.
     * Windows에서 광고와 스파이웨어가 너무 많아 Linux로 전환을 고려 중임. 특히 Pop_OS와 Steam Deck을 통해 게임 경험이 개선되었음.
     * Windows의 사용자 적대적인 정책 때문에 Fedora 40으로 전환했음. 대부분의 개발 도구와 게임이 잘 작동함.
     * Microsoft 계정을 로컬 계정으로 변환하는 방법이 인터넷 아카이브에 저장되어 있음.
     * 새 PC 설정 시 Shift+F10을 눌러 명령 프롬프트를 열고 OOBE\BYPASSNRO를 입력하면 로컬 계정을 쉽게 설정할 수 있음.
     * Windows IoT LTSC 버전은 스파이웨어가 제거된 버전으로, 일부 기능이 비활성화되어 있음.
     * Microsoft는 클라우드 서비스를 구매하지 않는 사용자를 원하지 않음. 오래된 PC가 계속해서 OneDrive 설정을 요구함.
     * Rufus를 사용하면 온라인 Microsoft 계정 요구 사항을 제거한 Windows 11 ISO를 만들 수 있음.
     * 로컬 계정 생성이 어려운 이유는 사용자 프로필 이름이 잘리기 때문임. 광고와 Copilot이 Windows를 망치고 있음.
     * Mac으로 전환한 것이 최고의 결정이었음. 다시 Windows를 사용할 이유는 GTA 6뿐임.
"
"https://news.hada.io/topic?id=15495","[2024/06/17 ~ 06/23] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2024/06/17 ~ 06/23] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주 선정된 논문들을 살펴보면, 크게 두 가지 주요 추세를 확인할 수 있습니다. 먼저, 대부분의 논문이 자연어 처리(NLP)와 관련된 주제에 집중하고 있음을 알 수 있습니다. 그 중에서도 특히, 장문의 맥락을 다루는 언어 모델(LM), 정보 검색 및 질의 응답(QA) 시스템의 효율성을 높이기 위한 방법들이 주요 관심사로 떠오르고 있습니다. 예를 들어, ‘Can Long-Context Language Models Subsume Retrieval, RAG, SQL, and More?’ 와 같은 논문은 긴 맥락을 이해하는 언어 모델의 가능성을 탐구하고 있으며, ‘PlanRAG’과 ‘From RAG to Rich Parameters’는 정보 검색과 질의 응답 시스템을 개선하기 위한 새로운 접근 방식을 제시하고 있습니다.
     * 또 다른 주목할만한 추세는 언어 모델의 memorization(암기 현상)을 완화하거나 자기 정제(self-refine) 과정을 통해 성능을 향상시키려는 시도입니다. ‘Mitigating Memorization in LLMs’와 ‘Monte Carlos Tree Self-Refine'은 이러한 관점에서 주목할 만합니다. 암기 현상의 완화는 언어 모델이 단순히 훈련 데이터를 답습하는 것이 아니라, 보다 일반화된 지식을 학습하고 창의적인 응답을 생성할 수 있도록 하는 데 중요합니다. 이는 언어 모델의 실용성과 유용성을 극대화하는 열쇠 중 하나입니다.
     * 이런 추세는 다양한 요인에 의해 촉진되고 있을 것입니다. 첫째로, 인공지능 분야에서 자연어 처리의 중요성이 날로 증가하고 있으며, 이를 위한 기술적 진보가 빠르게 이루어지고 있습니다. 둘째로, 정보의 양이 방대해짐에 따라, 이를 효과적으로 처리하고 사용자에게 유용한 정보를 제공할 수 있는 기술의 필요성이 증가하고 있습니다. 마지막으로, 최근의 언어 모델은 점점 더 복잡하고 파워풀해지고 있지만, 그러한 모델들이 직면한 문제점들을 해결하기 위한 새로운 접근 방법이 지속적으로 요구되고 있는 상황입니다. 이러한 요구를 충족시키기 위해, 연구자들은 기존의 프레임워크를 넘어서는 새로운 아이디어와 방법론을 지속적으로 모색하고 있습니다.


  클로드 3.5 소네트 / Claude 3.5 Sonnet

    논문 소개

   MMLU 및 HumanEval과 같은 여러 일반적인 벤치마크에서 최첨단 성능을 달성하는 새로운 모델로, 수학 단어 문제 풀이 작업을 제외한 여러 벤치마크에서 Claude 3 Opus 및 GPT-4o보다 뛰어난 성능을 발휘하며 이미지 텍스트 전사 및 인공물 생성과 같은 여러 새로운 기능을 지원하는 비전 작업에서도 강력한 성능을 발휘합니다.

     A new model that achieves state-of-the-art performance on several common benchmarks such as MMLU and HumanEval; it outperforms Claude 3 Opus and GPT-4o on several benchmarks with the exception of math word problem-solving tasks; achieves strong performance on vision tasks which also helps power several new features like image-text transcription and generation of artifacts.

    논문 링크

   https://www.anthropic.com/news/claude-3-5-sonnet

    더 읽어보기

   https://discuss.pytorch.kr/t/gn-claude-3-5-sonnet-gpt4o/4665

   https://x.com/AnthropicAI/status/1803790676988920098


  DeepSeek-Coder-V2

    논문 소개

   코드 및 수학 생성 작업에서 클로즈드 소스 모델과 경쟁, HumanEval에서 90.2%, MATH에서 75.7% 달성, 보고서에 따르면 이러한 결과는 GPT-4-Turbo-0409 성능보다 높으며 128K 컨텍스트 길이의 16B 및 236B 파라미터 모델을 포함함.

     Competes with closed-sourced models on code and math generation tasks; achieves 90.2% on HumanEval and 75.7% on MATH; these results are higher than GPT-4-Turbo-0409 performance according to their report; includes a 16B and 236B parameter model with 128K context length.

    논문 초록 (Abstract)

   코드별 작업에서 GPT4-Turbo에 필적하는 성능을 달성하는 오픈 소스 전문가 혼합(MoE) 코드 언어 모델인 DeepSeek-Coder-V2를 소개합니다. 특히, 딥시크 코더-V2는 딥시크-V2의 중간 체크포인트에서 6조 개의 토큰을 추가적으로 사전 학습합니다. 이러한 지속적인 사전 학습을 통해 DeepSeek-Coder-V2는 일반 언어 작업에서 비슷한 성능을 유지하면서 DeepSeek-V2의 코딩 및 수학적 추론 능력을 크게 향상시킵니다. DeepSeek-Coder-33B에 비해 DeepSeek-Coder-V2는 추론 및 일반 기능뿐만 아니라 코드 관련 작업의 다양한 측면에서 상당한 발전을 보여줍니다. 또한, DeepSeek-Coder-V2는 프로그래밍 언어 지원을 86개에서 338개로 확장하고 컨텍스트 길이를 16K에서 128K로 확장했습니다. 표준 벤치마크 평가에서 DeepSeek-Coder-V2는 코딩 및 수학 벤치마크에서 GPT4-Turbo, Claude 3 Opus, Gemini 1.5 Pro와 같은 비공개
   소스 모델에 비해 우수한 성능을 달성했습니다.

     We present DeepSeek-Coder-V2, an open-source Mixture-of-Experts (MoE) code language model that achieves performance comparable to GPT4-Turbo in code-specific tasks. Specifically, DeepSeek-Coder-V2 is further pre-trained from an intermediate checkpoint of DeepSeek-V2 with additional 6 trillion tokens. Through this continued pre-training, DeepSeek-Coder-V2 substantially enhances the coding and mathematical reasoning capabilities of DeepSeek-V2, while maintaining comparable performance in general language tasks. Compared to DeepSeek- Coder-33B, DeepSeek-Coder-V2 demonstrates significant advancements in various aspects of code-related tasks, as well as reasoning and general capabilities. Additionally, DeepSeek-Coder- V2 expands its support for programming languages from 86 to 338, while extending the context length from 16K to 128K. In standard benchmark evaluations, DeepSeek-Coder-V2 achieves superior performance compared to closed-source models such as GPT4-Turbo, Claude 3
     Opus, and Gemini 1.5 Pro in coding and math benchmarks.

    논문 링크

   https://github.com/deepseek-ai/DeepSeek-Coder-V2/blob/main/paper.pdf

    더 읽어보기

   https://github.com/deepseek-ai/DeepSeek-Coder-V2

   https://x.com/omarsar0/status/1803078095219417475


  TextGrad: 텍스트를 통한 자동 '미분' / TextGrad: Automatic ""Differentiation"" via Text

    논문 소개

   LLM이 제공하는 텍스트 피드백에 대한 역전파를 통해 자동 차별화를 위한 새로운 프레임워크, 개별 구성 요소를 개선하고 자연어가 계산 그래프 최적화에 도움, 프롬프트나 구성 요소를 조정하지 않고 객관적인 함수를 제공함으로써 작동, GPT4o와 결합 시 GPQA에서 LeetCodeHard 최고 점수 및 SoTA 성능을 달성한다고 주장합니다.

     A new framework for automatic differentiation through backpropagation on textual feedback provided by an LLM; this improves individual components and the natural language helps to optimize the computation graph; it works by providing an objective function without tuning prompts or components; claims to achieve LeetCodeHard best scores and SoTA performance on GPQA when combined with GPT4o.

    논문 초록(Abstract)

   AI는 여러 개의 대규모 언어 모델(LLM)과 기타 복잡한 구성 요소를 조율하는 시스템으로 획기적인 발전을 이루며 패러다임의 변화를 겪고 있습니다. 따라서 복합적인 AI 시스템을 위한 원칙적이고 자동화된 최적화 방법을 개발하는 것이 가장 중요한 새로운 과제 중 하나입니다. 신경망도 초창기에는 비슷한 문제에 직면했지만, 역전파와 자동 차별화를 통해 최적화가 턴키 방식으로 이루어지면서 이 분야가 변모했습니다. 이에 영감을 받아 텍스트를 통해 자동 '차별화'를 수행하는 강력한 프레임워크인 TextGrad를 소개합니다. TextGrad는 LLM이 제공하는 텍스트 피드백을 역전파하여 복합 AI 시스템의 개별 구성 요소를 개선합니다. 저희 프레임워크에서 LLM은 코드 조각에서 분자 구조에 이르기까지 계산 그래프의 변수를 최적화하기 위해 풍부하고 일반적인 자연어
   제안을 제공합니다. TextGrad는 PyTorch의 구문과 추상화를 따르며 유연하고 사용하기 쉽습니다. 사용자가 프레임워크의 구성 요소나 프롬프트를 조정할 필요 없이 목적 함수만 제공하면 다양한 작업에 바로 사용할 수 있습니다. 질문 답변 및 분자 최적화부터 방사선 치료 계획에 이르기까지 다양한 애플리케이션에서 TextGrad의 효과와 범용성을 보여드립니다. 프레임워크를 수정하지 않고도 TextGrad는 구글 프루프 질문 답변에서 GPT-4o의 제로 샷 정확도를 $51%$ 에서 $55%$ 로 향상시키고, LeetCode-Hard 코딩 문제 솔루션 최적화에서 $20%$ 의 상대적 성능 향상을 가져오고, 추론을 위한 프롬프트 개선, 바람직한 인실리카 결합으로 신약과 같은 소분자를 설계하고, 높은 특이도로 방사선 종양학 치료 계획을 설계할 수 있게 해줍니다. TextGrad는 차세대 AI 시스템 개발을 가속화할
   수 있는 기반을 마련합니다.

     AI is undergoing a paradigm shift, with breakthroughs achieved by systems orchestrating multiple large language models (LLMs) and other complex components. As a result, developing principled and automated optimization methods for compound AI systems is one of the most important new challenges. Neural networks faced a similar challenge in its early days until backpropagation and automatic differentiation transformed the field by making optimization turn-key. Inspired by this, we introduce TextGrad, a powerful framework performing automatic ``differentiation'' via text. TextGrad backpropagates textual feedback provided by LLMs to improve individual components of a compound AI system. In our framework, LLMs provide rich, general, natural language suggestions to optimize variables in computation graphs, ranging from code snippets to molecular structures. TextGrad follows PyTorch's syntax and abstraction and is flexible and easy-to-use. It works out-of-the-box for a variety of
     tasks, where the users only provide the objective function without tuning components or prompts of the framework. We showcase TextGrad's effectiveness and generality across a diverse range of applications, from question answering and molecule optimization to radiotherapy treatment planning. Without modifying the framework, TextGrad improves the zero-shot accuracy of GPT-4o in Google-Proof Question Answering from $51%$ to $55%$, yields $20%$ relative performance gain in optimizing LeetCode-Hard coding problem solutions, improves prompts for reasoning, designs new druglike small molecules with desirable in silico binding, and designs radiation oncology treatment plans with high specificity. TextGrad lays a foundation to accelerate the development of the next-generation of AI systems.

    논문 링크

   https://arxiv.org/abs/2406.07496v1

    더 읽어보기

   https://x.com/james_y_zou/status/1800917174124740667


  긴 컨텍스트 언어 모델이 검색, RAG, SQL 등을 대체할 수 있나요? / Can Long-Context Language Models Subsume Retrieval, RAG, SQL, and More?

    논문 소개

   컨텍스트 내 검색 및 추론에 대한 긴 컨텍스트 LLM의 심층적인 성능 분석 수행, 1백만 개의 토큰 컨텍스트가 필요한 실제 작업으로 벤치마크 제시, 작업에 대한 명시적인 교육 없이도 긴 컨텍스트 LLM이 최첨단 검색 및 RAG 시스템과 경쟁할 수 있다고 보고, SQL과 유사한 작업에서 필요한 구성 추론이 이러한 LLM에 여전히 어렵다고 제안, 고급 프롬프트 전략에 대한 지속적인 연구 필요성 강조 긴 컨텍스트 문제에 적용할 때 성능이 크게 향상되는 것을 확인한 바 있습니다.

     Conducts a deep performance analysis of long-context LLMs on in-context retrieval and reasoning; they first present a benchmark with real-world tasks requiring 1M token context; reports that long-context LLMs can rival state-of-the-art retrieval and RAG systems, without any explicit training on the tasks; suggests that compositional reasoning (required in SQL-like tasks) is still challenging for these LLMs; they also encourage the need for continued research on advanced prompting strategies as they noted significant boosts in performance when applying them for long context problems.

    논문 초록(Abstract)

   장문 언어 모델(LCLM)은 검색 시스템이나 데이터베이스와 같은 외부 도구에 의존하던 작업에 대한 접근 방식을 혁신적으로 바꿀 수 있는 잠재력을 가지고 있습니다. 전체 정보 코퍼스를 기본적으로 수집하고 처리하는 LCLM의 기능을 활용하면 많은 이점을 얻을 수 있습니다. 도구에 대한 전문 지식이 필요 없어 사용자 편의성이 향상되고, 복잡한 파이프라인에서 연쇄적인 오류를 최소화하는 강력한 엔드투엔드 모델링을 제공하며, 전체 시스템에 걸쳐 정교한 프롬프트 기법을 적용할 수 있습니다. 이러한 패러다임의 변화를 평가하기 위해, 컨텍스트 내 검색 및 추론에 대한 LCLM의 성능을 평가하도록 설계된 최대 수백만 개의 토큰이 필요한 실제 작업의 벤치마크인 LOFT를 소개합니다. 연구 결과, LCLM은 이러한 작업에 대해 명시적으로 훈련된 적이 없음에도
   불구하고 최첨단 검색 및 RAG 시스템과 경쟁할 수 있는 놀라운 능력을 갖추고 있는 것으로 나타났습니다. 그러나 LCLM은 SQL과 유사한 작업에서 요구되는 구성 추론과 같은 영역에서는 여전히 어려움을 겪고 있습니다. 특히 프롬프트 전략이 성능에 큰 영향을 미치므로 문맥 길이가 길어질수록 지속적인 연구가 필요함을 강조합니다. 전반적으로 LOFT는 모델 기능이 확장됨에 따라 기존 패러다임을 대체하고 새로운 작업을 처리할 수 있는 잠재력을 보여주며 LCLM을 위한 엄격한 테스트 장을 제공합니다.

     Long-context language models (LCLMs) have the potential to revolutionize our approach to tasks traditionally reliant on external tools like retrieval systems or databases. Leveraging LCLMs' ability to natively ingest and process entire corpora of information offers numerous advantages. It enhances user-friendliness by eliminating the need for specialized knowledge of tools, provides robust end-to-end modeling that minimizes cascading errors in complex pipelines, and allows for the application of sophisticated prompting techniques across the entire system. To assess this paradigm shift, we introduce LOFT, a benchmark of real-world tasks requiring context up to millions of tokens designed to evaluate LCLMs' performance on in-context retrieval and reasoning. Our findings reveal LCLMs' surprising ability to rival state-of-the-art retrieval and RAG systems, despite never having been explicitly trained for these tasks. However, LCLMs still face challenges in areas like
     compositional reasoning that are required in SQL-like tasks. Notably, prompting strategies significantly influence performance, emphasizing the need for continued research as context lengths grow. Overall, LOFT provides a rigorous testing ground for LCLMs, showcasing their potential to supplant existing paradigms and tackle novel tasks as model capabilities scale.

    논문 링크

   https://arxiv.org/abs/2406.13121

    더 읽어보기

   https://github.com/google-deepmind/loft

   https://x.com/omarsar0/status/1804184820806766875


  PlanRAG: 의사 결정권자로서 생성적 대규모 언어 모델을 위한 계획 후 검색 증강 생성기 / PlanRAG: A Plan-then-Retrieval Augmented Generation for Generative Large Language Models as Decision Makers

    논문 소개

   반복적 계획 후 RAG(PlanRAG)라는 새로운 RAG 기법으로 의사 결정을 개선하며, 두 단계로 이루어집니다: 1) LM이 데이터 스키마와 질문을 검토하여 의사 결정을 위한 계획을 생성하고 2) 검색기가 데이터 분석을 위한 쿼리를 생성합니다. 마지막 단계에서는 추가 분석을 위한 새로운 계획이 필요한지 확인하고 이전 단계를 반복하거나 데이터에 대한 결정을 내립니다. PlanRAG는 제안된 의사 결정 QA 작업에 대해 반복적 RAG보다 더 효과적인 것으로 밝혀졌습니다.

     Enhances decision making with a new RAG technique called iterative plan-then-RAG (PlanRAG); involves two steps: 1) an LM generates the plan for decision making by examining data schema and questions and 2) the retriever generates the queries for data analysis; the final step checks if a new plan for further analysis is needed and iterates on previous steps or makes a decision on the data; PlanRAG is found to be more effective than iterative RAG on the proposed Decision QA tasks.

    논문 초록(Abstract)

   이 논문에서는 복잡한 데이터 분석이 필요한 의사결정을 위한 솔루션으로 LLM을 활용하는 연구를 수행합니다. 의사결정 QA를 의사결정 질문 $Q$, 비즈니스 규칙 $R$, 데이터베이스 $D$ 에 대해 최선의 결정인 $d_{best}$ 에 대한 답을 구하는 작업으로 정의합니다. 의사 결정 QA를 검사할 수 있는 벤치마크가 없기 때문에 의사 결정 QA 벤치마크인 DQA를 제안합니다. 이 벤치마크는 의사 결정 QA와 거의 동일한 목표를 가진 두 개의 비디오 게임(유로파 유니버설리스 IV와 빅토리아 3)으로 구성된 두 가지 시나리오, 로케이션과 빌딩으로 구성되어 있습니다. 유니티는 Decision QA를 효과적으로 처리하기 위해 반복적 계획 후 검색 증강 생성(PlanRAG)이라는 새로운 RAG 기법도 제안합니다. PlanRAG 기반 LM은 첫 번째 단계로 의사 결정을 위한 계획을 생성하고, 두 번째 단계로 데이터
   분석을 위한 쿼리를 검색기가 생성합니다. 제안된 방법은 최신 반복적 RAG 방법보다 위치 찾기 시나리오에서 15.8%, 구축 시나리오에서 7.4% 각각 더 나은 성능을 보였습니다. 코드와 벤치마크는 https://github.com/myeon9h/PlanRAG 에 공개되어 있습니다.

     In this paper, we conduct a study to utilize LLMs as a solution for decision making that requires complex data analysis. We define Decision QA as the task of answering the best decision, $d_{best}$, for a decision-making question $Q$, business rules $R$ and a database $D$. Since there is no benchmark that can examine Decision QA, we propose Decision QA benchmark, DQA. It has two scenarios, Locating and Building, constructed from two video games (Europa Universalis IV and Victoria 3) that have almost the same goal as Decision QA. To address Decision QA effectively, we also propose a new RAG technique called the iterative plan-then-retrieval augmented generation (PlanRAG). Our PlanRAG-based LM generates the plan for decision making as the first step, and the retriever generates the queries for data analysis as the second step. The proposed method outperforms the state-of-the-art iterative RAG method by 15.8% in the Locating scenario and by 7.4% in the Building scenario,
     respectively. We release our code and benchmark at https://github.com/myeon9h/PlanRAG.

    논문 링크

   https://arxiv.org/abs/2406.12430

    더 읽어보기

   https://github.com/myeon9h/PlanRAG

   https://x.com/omarsar0/status/1803262374574448757


  금붕어처럼 외우지 마세요! 제너레이티브 LLM에서 암기 완화하기 / Be like a Goldfish, Don't Memorize! Mitigating Memorization in Generative LLMs

    논문 소개

   금붕어 손실이라는 다음 토큰 예측 목표를 수정하여 암기된 훈련 데이터의 문자 그대로 생성을 완화하고, 훈련 시 훈련 토큰의 의사 랜덤 하위 집합을 제외하는 간단한 기술을 사용하며, 금붕어 손실이 암기에 저항하고 모델을 유용하게 유지하지만 훈련 데이터에서 더 효과적으로 학습하려면 더 오래 훈련해야 할 수 있음을 보여줍니다.

     Presents a modification of the next-token prediction objective called goldfish loss to help mitigate the verbatim generation of memorized training data; it uses a simple technique that excludes a pseudorandom subset of training tokens at training time; they show that the goldfish loss resists memorization and keeps the model useful; however, it may need to train for longer to more effectively learn from the training data.

    논문 초록(Abstract)

   대규모 언어 모델은 학습 데이터를 암기하고 반복할 수 있어 개인정보 보호 및 저작권 위험을 초래할 수 있습니다. 암기를 완화하기 위해 다음 토큰 학습 목표에 금붕어 손실이라는 미묘한 수정을 도입했습니다. 훈련 중에 무작위로 샘플링된 토큰의 하위 집합은 손실 계산에서 제외됩니다. 이렇게 삭제된 토큰은 모델이 기억하지 않으므로 훈련 세트에서 전체 토큰 체인이 그대로 재현되는 것을 방지할 수 있습니다. 사전 학습된 모델과 처음부터 학습된 모델 모두에서 수십억 개 규모의 라마 2 모델을 훈련하는 광범위한 실험을 실행한 결과, 다운스트림 벤치마크에 거의 영향을 주지 않으면서 추출 가능한 암기량이 크게 감소했음을 입증했습니다.

     Large language models can memorize and repeat their training data, causing privacy and copyright risks. To mitigate memorization, we introduce a subtle modification to the next-token training objective that we call the goldfish loss. During training, a randomly sampled subset of tokens are excluded from the loss computation. These dropped tokens are not memorized by the model, which prevents verbatim reproduction of a complete chain of tokens from the training set. We run extensive experiments training billion-scale Llama-2 models, both pre-trained and trained from scratch, and demonstrate significant reductions in extractable memorization with little to no impact on downstream benchmarks.

    논문 링크

   https://arxiv.org/abs/2406.10209

    더 읽어보기

   https://github.com/ahans30/goldfish-loss

   https://x.com/omarsar0/status/1802729440163647754
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  몬테카를로 트리를 통해 GPT-4 수준의 수학 올림피아드 솔루션에 액세스하기 LLaMa-3 8B로 자체 개선하기 / Accessing GPT-4 level Mathematical Olympiad Solutions via Monte Carlo Tree Self-refine with LLaMa-3 8B

    논문 소개

   LLM과 몬테카를로 트리 검색을 통합하는 접근 방식을 사용하여 GPT-4 수준의 수학 올림피아드 솔루션을 달성한 것으로 보고되었습니다. 이 접근 방식은 체계적인 탐색, 자기 개선, 자기 평가 등의 기능을 통해 시스템의 수학적 추론 성능을 향상시키는 데 중점을 둡니다.

     Report to have achieved GPT-4 level mathematical olympiad solution using an approach that integrates LLMs with Monte Carlo Tree Search; this approach focuses on enhancing the mathematical reasoning performance of the system through capabilities such as systematic exploration, self-refinement, and self-evaluation.

    논문 초록(Abstract)

   이 백서에서는 복잡한 수학적 추론 작업의 성능을 향상시키기 위해 설계된 대규모 언어 모델(LLM)과 몬테카를로 트리 검색(MCTS)을 혁신적으로 통합한 MCT 자체 재정의(MCTSr) 알고리즘을 소개합니다. 특히 전략 및 수학적 추론에서 LLM의 정확성과 신뢰성 문제를 해결하는 MCTSr은 체계적인 탐색과 휴리스틱 자체 수정 메커니즘을 활용하여 LLM 내의 의사 결정 프레임워크를 개선합니다. 이 알고리즘은 선택, 자체 수정, 자체 평가, 역전파의 반복적인 프로세스를 통해 몬테카를로 탐색 트리를 구성하고, 향상된 상위 신뢰 한계(UCB) 공식을 활용하여 탐색-탐색 균형을 최적화합니다. 광범위한 실험을 통해 올림피아드 수준의 수학 문제를 푸는 데 있어 MCTSr의 효능이 입증되었으며, GSM8K, GSM Hard, MATH 및 수학 오디세이, AIME, 올림피아드 벤치마크 등 여러 데이터 세트에서
   성공률을 크게 향상시켰습니다. 이 연구는 복잡한 추론 작업에서 LLM의 적용을 발전시키고 향후 AI 통합을 위한 기반을 마련하여 LLM 기반 애플리케이션에서 의사 결정의 정확성과 신뢰성을 향상시킵니다.

     This paper introduces the MCT Self-Refine (MCTSr) algorithm, an innovative integration of Large Language Models (LLMs) with Monte Carlo Tree Search (MCTS), designed to enhance performance in complex mathematical reasoning tasks. Addressing the challenges of accuracy and reliability in LLMs, particularly in strategic and mathematical reasoning, MCTSr leverages systematic exploration and heuristic self-refine mechanisms to improve decision-making frameworks within LLMs. The algorithm constructs a Monte Carlo search tree through iterative processes of Selection, self-refine, self-evaluation, and Backpropagation, utilizing an improved Upper Confidence Bound (UCB) formula to optimize the exploration-exploitation balance. Extensive experiments demonstrate MCTSr's efficacy in solving Olympiad-level mathematical problems, significantly improving success rates across multiple datasets, including GSM8K, GSM Hard, MATH, and Olympiad-level benchmarks, including Math Odyssey, AIME, and
     OlympiadBench. The study advances the application of LLMs in complex reasoning tasks and sets a foundation for future AI integration, enhancing decision-making accuracy and reliability in LLM-driven applications.

    논문 링크

   https://arxiv.org/abs/2406.07394v2

    더 읽어보기

   https://x.com/rohanpaul_ai/status/1801259208341373013


  RAG에서 풍부한 파라미터까지: 언어 모델이 사실 쿼리를 위해 매개변수 정보에 대한 외부 지식을 활용하는 방법 조사하기 / From RAGs to rich parameters: Probing how language models utilize external knowledge over parametric information for factual queries

    논문 소개

   사실 쿼리에 대해 LLM이 매개변수 정보보다 외부 지식을 활용하는 방식을 더 면밀히 조사한 결과, RAG 파이프라인에서 LLM은 '지름길'을 택하고 질문에 답하기 위해 맥락 정보만 활용하고 매개변수 메모리는 최소한으로 의존하는 편향성이 강하다는 사실을 발견했습니다.

     Investigates more closely how LLMs utilize external knowledge over parametric information for factual queries; finds that in a RAG pipeline, LLMs take a “shortcut” and display a strong bias towards utilizing only the context information to answer the question, while relying minimally on their parametric memory.

    논문 초록(Abstract)

   검색 증강 생성(RAG)은 언어 모델이 외부 컨텍스트를 사용하여 추론하는 기능을 강화하여 주어진 사용자 프롬프트에 대한 응답을 보강합니다. 이 접근 방식은 검색, 질문/답변, 챗봇 등 다양한 분야에서 언어 모델을 실제로 적용하면서 인기가 높아졌습니다. 그러나 이 접근 방식이 어떻게 작동하는지에 대한 정확한 특성은 명확하게 이해되지 않았습니다. 이 백서에서는 RAG 파이프라인을 기계적으로 조사하여 언어 모델이 지름길을 택하고 문맥 정보만 활용하여 질문에 답하는 편향성이 강하며 파라메트릭 메모리에 최소한으로 의존한다는 점을 강조합니다. 언어 모델의 이러한 기계론적 행동을 다음과 같이 조사합니다: (i) 인과적 매개 분석을 통해 질문에 답할 때 파라메트릭 메모리가 최소한으로 활용된다는 것을 보여주고, (ii) 주의 기여와 녹아웃을 통해
   마지막 토큰 잔류 스트림이 질문의 주제 토큰으로부터 강화되지 않고 문맥의 다른 정보 토큰으로부터 강화된다는 것을 보여줍니다. 이러한 뚜렷한 지름길 동작은 LLaMa와 Phi 모델군 모두에서 사실로 밝혀졌습니다.

     Retrieval Augmented Generation (RAG) enriches the ability of language models to reason using external context to augment responses for a given user prompt. This approach has risen in popularity due to practical applications in various applications of language models in search, question/answering, and chat-bots. However, the exact nature of how this approach works isn't clearly understood. In this paper, we mechanistically examine the RAG pipeline to highlight that language models take shortcut and have a strong bias towards utilizing only the context information to answer the question, while relying minimally on their parametric memory. We probe this mechanistic behavior in language models with: (i) Causal Mediation Analysis to show that the parametric memory is minimally utilized when answering a question and (ii) Attention Contributions and Knockouts to show that the last token residual stream do not get enriched from the subject token in the question, but gets enriched
     from other informative tokens in the context. We find this pronounced shortcut behaviour true across both LLaMa and Phi family of models.

    논문 링크

   https://arxiv.org/abs/2406.12824

    더 읽어보기

   https://x.com/omarsar0/status/1803254134289895555


  오픈소라 / Open-Sora

    논문 소개

   16초 720p 동영상을 생성할 수 있는 오픈소스 동영상 생성 모델, 30억 개 이상의 데이터로 학습된 11억 개의 파라미터 모델로 이제 이미지-비디오를 지원, 공간 및 시간 압축을 위해 향상된 확산 모델과 동영상 압축 네트워크를 제공하며, 생성 제어 가능성을 높이고 학습 비용을 절감합니다.

     An open-source video generation model that can generate 16-second 720p videos; it’s a 1.1B parameter model trained on more than 30m data and now supports image-to-video; presents an enhanced diffusion model and video compression network for spatial and temporal compression; increases controllability of generations and reduces training costs.

    논문 링크

   [IMG] Open-Sora 1.2 Report|1028x812

    더 읽어보기

   https://discuss.pytorch.kr/t/open-sora-feat-hpc-ai/3794

   https://x.com/omarsar0/status/1803176105010171957


  언어 모델 에이전트에 대한 트리 검색 / Tree Search for Language Model Agents

    논문 소개

   LM 에이전트가 탐색을 수행하고 다단계 추론을 가능하게 하는 추론 시간 트리 검색 알고리즘을 제안하고, 대화형 웹 환경에서 테스트하고 GPT-4o에 적용하여 성능을 크게 개선하고, 테스트 시간 컴퓨팅을 늘리면 성능이 확장되는 것을 입증합니다.

     Proposes an inference-time tree search algorithm for LM agents to perform exploration and enable multi-step reasoning; it’s tested on interactive web environments and applied to GPT-4o to significantly improve performance; demonstrates that performance scales when increasing test-time compute.

    논문 초록(Abstract)

   언어 모델(LM)로 구동되는 자율 에이전트는 웹 자동화와 같은 의사 결정 작업을 수행하는 능력에서 가능성을 보여주었습니다. 하지만 근본적인 과제가 남아 있습니다: 주로 자연어 이해 및 생성에 최적화된 LM은 현실적인 컴퓨터 작업을 해결하려고 할 때 다단계 추론, 계획, 환경 피드백 활용에 어려움을 겪습니다. 이 문제를 해결하기 위해 대화형 웹 환경에서 LM 에이전트가 탐색과 다단계 계획을 명시적으로 수행할 수 있는 추론 시간 검색 알고리즘을 제안합니다. 우리의 접근 방식은 실제 환경 공간 내에서 작동하는 최적 우선 트리 검색의 한 형태이며, 대부분의 기존 최신 에이전트와 상호 보완적입니다. 실제 웹 작업에서 효과를 보여주는 최초의 LM 에이전트용 트리 검색 알고리즘입니다. 까다로운 VisualWebArena 벤치마크에서 GPT-4o 에이전트 위에 검색
   알고리즘을 적용하면 검색을 적용하지 않은 동일한 기준선에 비해 성공률이 39.7% 증가하여 26.4%의 최신 성공률을 기록했습니다. 웹아레나에서도 검색은 기준 에이전트 대비 28.0%의 상대적 개선 효과를 가져와 19.2%의 경쟁사 성공률을 기록했습니다. 이 실험은 웹 에이전트 검색의 효율성을 강조하며, 테스트 시간 계산이 증가함에 따라 성능이 확장된다는 사실을 입증합니다. 결과를 철저히 분석하여 검색의 개선점, 한계점, 향후 작업의 유망한 방향성을 강조합니다.

     Autonomous agents powered by language models (LMs) have demonstrated promise in their ability to perform decision-making tasks such as web automation. However, a fundamental challenge remains: LMs, primarily optimized for natural language understanding and generation, struggle with multi-step reasoning, planning, and using environmental feedback when attempting to solve realistic computer tasks. Towards addressing this, we propose an inference-time search algorithm for LM agents to explicitly perform exploration and multi-step planning in interactive web environments. Our approach is a form of best-first tree search that operates within the actual environment space, and is complementary with most existing state-of-the-art agents. It is the first tree search algorithm for LM agents that shows effectiveness on realistic web tasks. On the challenging VisualWebArena benchmark, applying our search algorithm on top of a GPT-4o agent yields a 39.7% relative increase in success
     rate compared to the same baseline without search, setting a state-of-the-art success rate of 26.4%. On WebArena, search also yields a 28.0% relative improvement over a baseline agent, setting a competitive success rate of 19.2%. Our experiments highlight the effectiveness of search for web agents, and we demonstrate that performance scales with increased test-time compute. We conduct a thorough analysis of our results to highlight improvements from search, limitations, and promising directions for future work.

    논문 링크

   https://jykoh.com/search-agents/paper.pdf

    더 읽어보기

   https://jykoh.com/search-agents

   https://x.com/kohjingyu/status/1803604487216701653


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-c0f


   이 글은 GPT 모델로 정리한 것으로, 잘못된 부분이 있을 수 있으니 글 아래쪽의 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다. 🤗

   ⚠️광고⚠️: 🔥파이토치 한국 사용자 모임🇰🇷이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일💌로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=15469","Show GN: 함께해요 파이썬 생태계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: 함께해요 파이썬 생태계

함께해요 파이썬 생태계

   ""함께해요 파이썬 생태계""는 위키독스에 등록한 100% 공개 책입니다. PyPI에 등록 된 55만개의 방대한 파이썬 라이브러리들 중에 '이 정도는 알아야하지 않겠어?' 라는 것들을 라이브러리 별 2페이지 정도로 정리한 책입니다.

   500여개의 라이브러리들을 정리했고, 이는 PDF 기준 1150페이지 정도 되네요.

책 작성 이유

   파이썬과의 인연이 시작된 지 어느덧 9년. 꽤 잘 다룬다 생각했는데, 파면 팔수록 너무 좋은 라이브러리들이 많더군요.

     이건 라이브러리 별 함수 사용 방법을 배울 게 아니라, 어떤 라이브러리가 있는지부터 파악해야겠다.

   라는 생각이 들었습니다. 어차피 라이브러리 이름만 알면 ChatGPT가 다 코딩해주니까요.

책의 구성

     * 라이브러리 별 개요, 주요 기능, 설치 방법, 예제 코드, 사용 사례, 결론이라는 공통 된 섹션 구조를 가지고 2-3페이지 작성한 페이지들의 모음입니다.

책 보는 방법

    1. 처음부터 정독하라고 만든 책은 아닙니다. 관심있는 혹은 알고 있는 라이브러리 페이지를 보고, 유사 라이브러리들을 확인 할 수 있습니다.
    2. 이 책으로부터 처음 접하는 라이브러리라면, 주요 기능과 예제 코드를 보고 어떤 느낌의 라이브러리인지 느낌을 얻는 목적이 큽니다. 좀 더 디테일을 확인하려면 링크 된 github 혹은 공식 사이트에서 확인해야합니다.
    3. Wikidocs 사이트에서 해당 책을 접한다면 라이브러리 별 github star를 바로 확인 하실 수 있습니다. 유사 기능의 라이브러리들을 가장 간단히 비교하는 방법은 github star 수 비교라고 생각했습니다.

저자 넋두리

   장난감 수집 취미처럼 내게 도움이 될만한 라이브러리들을 수집해보자. 라는 생각으로 했는데, 이렇게 많이 수집 될지 몰랐습니다.

   GeekNews 를 Slack bot 연결해서 매일 염탐하고 있습니다만, 큰 도움이 되었습니다. GeekNews는 보석같은 파이썬 라이브러리를 어디서 참 잘 찾아주십니다 ^___^

   파이썬 중급자에게는 도움이 되는 사이트가 되지 않을까 싶네요.
   약 8개월간 집필한 결과를 이제서야 여러분께 공개합니다 😁

   최고👍

   영문화해도 괜찬을거 같습니다.

   와 멋있습니다!!

   정말 멋지네요!! 응원 합니다.

   긍정적인 댓글과 응원 감사합니다!
   웹 전자책이다보니 지속적으로 업데이트하며 'awesome python' 같은 역할을 해볼게요 ^^;;

   정말 좋은 라이브러리들이 많네요! 감사합니다:)

   좋은 프로젝트네요, 응원합니다!

   와우~ 많은 양을 정리해 두셨네요. 공유 감사합니다.

   얼마전부터 북마크 해두고, 보고 있어요.

   좋은거 만들어두셔 감사합니다.

   감사합니다. 좋은 시도는 칭찬받아 마땅하죠. :-)

   멋진 프로젝트입니다! 공유 감사합니다.
"
"https://news.hada.io/topic?id=15475","언어는 사고보다는 주로 의사소통을 위한 도구 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     언어는 사고보다는 주로 의사소통을 위한 도구 [pdf]
"
"https://news.hada.io/topic?id=15492","Sudo 대체 기술로서의 SSH","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Sudo 대체 기술로서의 SSH

목표

     * 권한이 있는 사용자만 root 권한으로 명령어 실행 가능하게 함
     * 권한 상승을 사용하지 않음

구현

     * 전용 SSH 키를 생성하여 root 인증에 사용함
mkdir /root/.ssh/
echo ssh-ed25519 AAAAC3Nza... > /root/.ssh/local_keys

     * Unix 도메인 소켓에 바인딩된 sshd 서버 인스턴스를 실행함
mkdir /run/sshd/
chown root:wheel /run/sshd/
chmod 750 /run/sshd/
s6-ipcserver /run/sshd/sshd.sock sshd -ie -o AuthorizedKeysFile=/root/.ssh/local_keys -o PermitRootLogin=yes

     * root 계정을 잠그고 비밀번호로 로그인 불가하게 설정함
# /etc/passwd 파일에서 root 비밀번호를 변경

     * 로컬 sshd 인스턴스에 연결하기 위해 ProxyCommand 옵션을 사용함
ssh -o ProxyCommand='socat STDIO UNIX-CONNECT:/run/sshd/sshd.sock' \
    -i .ssh/root-key.pub \
    -t \
    root@root \
    ""cd $(pwd); '$SHELL' --login""

     * ProxyUseFdpass 옵션을 사용하여 소켓 파일 디스크립터를 전달하는 스크립트를 작성함
#!/usr/bin/env python3
import sys
import socket
import array

s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
s.connect(""/run/sshd/sshd.sock"")

fds = array.array(""i"", [s.fileno()])
ancdata = [(socket.SOL_SOCKET, socket.SCM_RIGHTS, fds)]
socket.socket(fileno=1).sendmsg([b'\0'], ancdata)

     * 최종적으로 ssh 명령어를 실행함
ssh -o ProxyCommand='/home/hugo/tmp/passfd.py' \
    -i .ssh/root-key.pub \
    -o ProxyUseFdpass=yes \
    -t \
    root@root \
    ""cd $(pwd); '$SHELL' --login""

결론

     * 이 기술은 OpenSSH를 사용하여 보안 세부 사항을 처리함
     * 하드웨어 기반 SSH 키를 포함한 다양한 인증 방법을 지원함
     * 새로운 호스트에 설정하는 과정이 복잡하지 않음
     * passfd.py 스크립트는 실험을 위한 임시 방편이며, 일상적으로 사용하려면 작은 실행 파일로 작성하는 것이 좋음

GN⁺의 의견

     * 이 방법은 sudo나 doas의 대안으로 보안성을 높일 수 있음
     * SSH를 사용하여 인증을 강화하는 접근 방식은 하드웨어 기반 인증을 포함해 다양한 인증 방법을 지원함
     * 시스템 설정이 비교적 간단하여 초급 엔지니어도 쉽게 따라할 수 있음
     * passfd.py 스크립트를 작은 실행 파일로 만들어 /usr/local/bin에 배치하면 더 편리하게 사용할 수 있음
     * 이 방법은 네트워크 노출 없이 로컬에서만 동작하므로 보안성이 높음

        Hacker News 의견

     * 추가 복잡성 문제: 기존의 단일 suid 바이너리 대신 루트로 실행되는 바이너리와 UNIX 소켓을 사용하는 두 개의 바이너리가 필요해짐. 이는 비대칭 암호화 작업을 포함하여 복잡성을 증가시킴.
     * 시스템 보안: sudo 바이너리를 특정 그룹(wheel)으로 제한하고 권한을 조정하면, sshd 접근 방식과 유사한 보안 수준을 유지할 수 있음. 시스템 패키지 관리자가 sudo 권한을 망칠 경우, cron을 사용해 주기적으로 수정하거나 sudo를 직접 소스에서 설치하는 방법도 있음.
     * systemd의 run0: systemd의 ""run0"" 도구는 sudo와 유사하게 작동하지만 SUID가 아님. 대신 서비스 관리자가 명령을 실행하도록 요청함. 이는 ssh와 더 유사한 동작을 보임.
     * ssh와 sudo 비교: ssh를 통해 루트로 로그인하는 것이 sudo보다 더 안전한지 의문. sshd의 원격 사용자 접근을 막는 방법에 대한 논의가 필요함. sudo의 제한 사항과 비교했을 때, ssh 접근 방식이 더 취약할 수 있음.
     * 네트워크 서비스 문제: ssh가 부팅 시 시작되지 않으면 콘솔 로그인도 불가능해짐. 이는 sudo나 su보다 더 많은 문제를 야기할 수 있음.
     * systemd run0와 유사한 접근: systemd의 run0 도구와 유사한 접근 방식이 있음.
     * sudo의 세부 제어: sudo는 명령어와 인수, 하위 셸 생성 등을 세부적으로 제어할 수 있음. 새로운 접근 방식은 이러한 세부 제어를 잃게 되며, 신뢰할 수 있는 키 관리가 더 어려움.
     * SSH 콘솔 설정: 전용 SSH 콘솔을 사용해 루트 접근을 관리하는 방법. Yubikey와 방화벽 설정을 통해 보안을 강화함.
     * SSH 프로토콜의 한계: SSH는 프로세스 생성이 프로토콜의 일부가 아니며, 로컬 리소스를 자식 프로세스로 전달할 수 없음. sudo 대체로 사용하려면 POSIX 스폰과 유사한 확장이 필요함.
     * 사용자 관리: 사용자를 어린아이처럼 대하지 않고, 합리적인 기본값을 설정해 잠재적인 문제를 피하는 것이 중요함. 루트 접근이 필요하면 콘솔을 통해 로그인하는 것이 바람직함.
     * 단일 사용자 모드 문제: 단일 사용자 모드에서 루트로 로그인할 수 없으면 시스템 복구가 어려워짐. 이는 시스템 업그레이드 중 발생할 수 있는 문제를 해결하는 데 필요함.
"
"https://news.hada.io/topic?id=15483","AI를 사용해 뉴욕 시민들에게 창문 밖으로 모자를 떨어뜨리는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AI를 사용해 뉴욕 시민들에게 창문 밖으로 모자를 떨어뜨리는 기술

창문 쇼핑을 멈추고 창문 쇼핑을 시작하자!

  AI를 이용한 드롭핑 방법

     * 목표: AI를 이용해 창문 밖으로 모자를 떨어뜨려 뉴욕 시민들에게 제공하는 서비스 운영.
     * 필요한 것들: Raspberry Pi, Adafruit 스테퍼 모터, 실, Roboflow AI, 가벼운 제품(예: 프로펠러 모자).

  창문 열기

     * 문제: 창문이 약 4인치밖에 열리지 않음.
     * 해결: 구글링을 통해 창문에 맞는 키를 찾아 해결.

  모자 선택

     * 조건: 떨어질 때 다치지 않고, 교통에 방해되지 않는 모자.
     * 선택: 미래를 상징하고 아름답게 떨어지는 프로펠러 모자.

  드롭핑 메커니즘

     * 구성: Raspberry Pi와 스테퍼 모터 사용.
     * 방법: 실을 스테퍼 모터에 감아 조금씩 움직이게 함.
     * 코드: Python 파일로 작성된 드롭핑 코드.

import time
import board
import digitalio

enable_pin = digitalio.DigitalInOut(board.D18)
coil_A_1_pin = digitalio.DigitalInOut(board.D4)
coil_A_2_pin = digitalio.DigitalInOut(board.D17)
coil_B_1_pin = digitalio.DigitalInOut(board.D23)
coil_B_2_pin = digitalio.DigitalInOut(board.D24)

enable_pin.direction = digitalio.Direction.OUTPUT
coil_A_1_pin.direction = digitalio.Direction.OUTPUT
coil_A_2_pin.direction = digitalio.Direction.OUTPUT
coil_B_1_pin.direction = digitalio.Direction.OUTPUT
coil_B_2_pin.direction = digitalio.Direction.OUTPUT

enable_pin.value = True

def forward(delay, steps):
    i = 0
    while i in range(0, steps):
        setStep(1, 0, 1, 0)
        time.sleep(delay)
        setStep(0, 1, 1, 0)
        time.sleep(delay)
        setStep(0, 1, 0, 1)
        time.sleep(delay)
        setStep(1, 0, 0, 1)
        time.sleep(delay)
        i += 1

def setStep(w1, w2, w3, w4):
    coil_A_1_pin.value = w1
    coil_A_2_pin.value = w2
    coil_B_1_pin.value = w3
    coil_B_2_pin.value = w4

forward(5, int(512))

  AI

     * 목표: 창문 아래에 사람이 있는지 실시간으로 감지.
     * 방법: 웹캠을 통해 영상을 실시간으로 분석하고, 특정 위치에 사람이 있는지 확인.
     * 모델: Roboflow를 이용해 객체 감지 모델 생성.
     * 코드: Python 파일로 작성된 감지 및 드롭핑 코드.

import cv2
import time
import paramiko
from inference_sdk import InferenceHTTPClient

CLIENT = InferenceHTTPClient(api_url=""https://detect.roboflow.com"";, api_key=""API_KEY"")

def ssh_execute(host, port, username, password, command):
    client = paramiko.SSHClient()
    client.load_system_host_keys()
    client.set_missing_host_key_policy(paramiko.WarningPolicy)
    try:
        client.connect(host, port=port, username=username, password=password)
        stdin, stdout, stderr = client.exec_command(command)
        print(stdout.read().decode().strip())
        if stderr.read().decode().strip():
            print('Error:', stderr)
    finally:
        client.close()

video = cv2.VideoCapture(0)
consec_detections = 0

while True:
    ret, frame = video.read()
    result = CLIENT.infer(frame, model_id=""drop-of-a-a-hat/2"")
    if 'predictions' in result and len(result['predictions']) > 0:
        consec_detections += 1
    else:
        consec_detections = 0
    if consec_detections >= 3:
        ssh_execute('raspberry.local', 22, 'pi', 'raspberry', 'python3 dropHat.py')
        consec_detections = 0
    time.sleep(1)

  대망의 비전

     * 비전: 뉴욕 시내를 걸어다니며 필요한 모든 것이 창문에서 떨어지는 세상.
     * 목표: ""Window Shopping""의 첫 사례로 자리매김.

GN⁺의 의견

     * 흥미로운 점: AI와 IoT를 결합해 창의적인 비즈니스 모델을 제시함.
     * 도입 고려사항: 창문 구조와 안전 문제를 사전에 충분히 검토해야 함.
     * 기술적 도전: AI 모델의 정확도와 실시간 처리 성능이 중요함.
     * 유사 프로젝트: 드론 배송 서비스와 유사한 개념으로 확장 가능성 있음.
     * 사회적 영향: 도시 생활의 편리함을 증대시키는 동시에 새로운 형태의 상거래를 창출할 수 있음.

        Hacker News 의견

     * 유용한 AI: 오랜만에 인터넷에서 본 가장 유용한 것임. 훌륭한 작업에 감사함.
     * 모자 낙하: 프로펠러와 바람에도 불구하고 모자가 직선으로 떨어지는 것이 이해되지 않음.
     * 프로젝트 사랑: 이런 종류의 프로젝트를 좋아함. 여러 주에서 AI 생성 콘텐츠에 워터마크를 요구하는 법안을 추진 중임.
     * 잘못된 사용: 모자 대신 다른 것을 사용하면 치명적일 수 있음.
     * 예상치 못한 멋진 게시물: 처음엔 평범할 줄 알았으나 매우 흥미로웠음. 저자가 많은 도전을 극복하고 이를 쉽게 해결한 것처럼 보임.
     * 비디오 객체 감지: Roboflow SaaS를 사용하는 이유가 궁금함. Pi가 Frigate나 DOODS 같은 온디바이스 솔루션을 실행하기에 성능이 부족한 것 같음.
     * 웹캠 아이디어: 뉴올리언스의 Bourbon St 발코니에서 파티에 구슬을 던지는 웹캠 아이디어가 멋짐. 관심 있는 사람은 연락처를 남기길 바람.
     * 투자 기회: 이 투자 기회에 참여하고 싶었으나 너무 늦은 것 같음.
     * 이웃 가게 찾기: 가끔 길에서 껌을 원함. 요약하자면, 가벼운 제품, Raspberry Pi, Adafruit 스테퍼 모터, 실, Roboflow를 사용함.
     * 가짜 비디오: 모자가 떨어질 때 사라졌다가 다시 나타나는 비디오 클립이 있음.
"
"https://news.hada.io/topic?id=15586","JavaScript 의 새로운 Set 메소드들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       JavaScript 의 새로운 Set 메소드들

     * Firefox 127부터 대부분의 주요 브라우저 엔진에서 새로운 Set 메서드들을 사용할 수 있게 되어, Polyfill 없이도 어디서나 이 메서드들을 사용 가능
     * 중복 제거, 비교, 교집합, 차집합, 부분집합 등에 최적화된 방법을 제공하므로 직접 구현할 필요가 없어짐
     * 대용량 데이터에서 Array에 비해 성능 측면에서 이점이 있음 (순서가 보장되지 않는 점에 유의만 하면)
     * 새 Set 메소드들: intersection(), union(), difference(), symmetricDifference(), isSubsetOf(), isSupersetOf(), isDisjointFrom()여부를 나타내는 불리언 값 반환

JavaScript의 Set이란?

     * Set은 Array와 유사하지만, 각 값은 한 번만 저장될 수 있음
     * Set은 고유한 컬렉션을 만드는 내장된 방법을 제공해주어 편리함
     * Array에 비해 Set에서 요소가 있는지 확인하는 것이 일반적으로 더 빠름

두 집합의 합집합

     * union 메서드를 사용하면 '둘 중 하나 또는 둘 다'에 있는 요소들을 확인할 수 있음
     * 중복을 제거하고, 비교를 수행하기 위한 사용자 지정 구현이 필요하지 않음

집합의 교집합

     * intersection 메서드를 사용하면 두 집합에서 겹치는 요소를 확인할 수 있음
     * '두 집합 모두에만' 있는 요소들을 강조 표시하는 데 사용할 수 있음

집합의 대칭 차집합

     * symmetricDifference 메서드는 어느 한 집합에는 있지만 '둘 다'에는 없는 요소들을 확인할 수 있게 해줌
     * symmetricDifference는 intersection의 반대 논리 연산을 수행함

집합의 차집합

     * difference 메서드를 사용하면 한 집합에는 있지만 다른 집합에는 없는 요소들을 확인할 수 있음
     * 다른 목록에 나타나지 않는 목록 항목을 강조 표시하는 데 difference로 만든 집합을 사용할 수 있음

부분집합, 상위집합, 서로소

     * isSubsetOf()와 isSupersetOf() 메서드는 새로운 집합을 반환하는 것이 아니라 특정 상태나 논리적 검사를 나타내는 불리언 값을 반환함
     * isDisjointFrom() 메서드를 사용하면 두 집합이 공통 요소가 없는지 확인할 수 있음

요약

     * Set 메서드들이 흥미롭고 이해하기에 좋은 개념이라고 생각함
     * 이 메서드들을 실제 예제에서 다른 방식으로 사용하는 방법에 대해 알려주길 바람
     * 다음 프로젝트를 위해 Set 메서드들을 잘 활용할 수 있길 바람

   더 ""집합""스러운 함수가 추가되었군요
"
"https://news.hada.io/topic?id=15515","여전히, CUDA가 엔디비아의 거대한 경제적 해자입니다. ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    여전히, CUDA가 엔디비아의 거대한 경제적 해자입니다.
"
"https://news.hada.io/topic?id=15533","무인 자율운전 택시 Waymo One, 샌프란시스코 전 시민에게 개방","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 무인 자율운전 택시 Waymo One, 샌프란시스코 전 시민에게 개방

     * 이제 샌프란시스코에서 누구나 Waymo를 이용해 탈 수 있음. 비가 오나, 안개가 끼나, 앱으로 이용가능
     * 수년간 샌프란시스코에서 서비스 확장을 점진적으로 진행해 왔음. 주간 수만 번의 운행을 통해 현지인과 방문객에게 안전하고 지속 가능하며 신뢰할 수 있는 교통수단을 제공

모두를 위한 Waymo, 도시 전역에서 24/7 이용 가능

     * 샌프란시스코 시민들은 Waymo를 일상 생활의 일부로 사용하고 있음
     * Waymo 이용객의 약 30%가 현지 비즈니스를 방문하는 데 사용함. 수천 번의 운행을 통해 레스토랑, 라이브 음악 공연장, 바, 커피숍, 아이스크림 가게, 공원 및 박물관 등으로 이동, 지역 경제를 활성화함.
     * 최근 조사에 따르면, 이용객의 절반 이상이 지난 몇 달 동안 의료 약속을 위해 Waymo를 사용했음을 강조함. 개인 공간이 중요함을 나타냄.
     * 또한 36%의 이용객이 BART나 Muni 같은 다른 교통 수단과 연결하기 위해 Waymo를 사용함.
     * 일부 이용객은 결혼식에서 우아하게 출발하는 데 Waymo를 사용하기도 함.
     * ""기술이 우리의 삶을 개선할 수 있는 편리하고 안전한 교통 수단을 제공하는 도시에서 살 수 있어서 감사함,"" 라고 The Richmond Neighborhood Center의 Michelle Cusano가 말함.
     * Waymo의 차량은 모두 전기차이며, 도시의 CleanPowerSF 프로그램을 통해 100% 재생 에너지를 사용함. 2023년 8월 상업 운영 시작 이후, Waymo의 운행은 약 570,000kg의 탄소 배출을 줄였음. 이는 캘리포니아의 차량 배출 목표에 기여함.
     * 최근 조사에서 샌프란시스코 이용객의 53%가 Waymo 덕분에 더 환경 친화적으로 여행할 수 있게 되었다고 느꼈음.
     * 또한, 샌프란시스코 이용객의 절반 이상이 Waymo를 이용하면서 개인 안전이 향상되었다고 응답함.
     * ""Waymo 차량을 타는 것이 즐거우며, 교통이 편리함을 느끼고 있음,"" Openhouse SF의 개발 매니저인 Charles Renfroe가 말함. ""특히 성소수자 커뮤니티의 구성원들은 Waymo를 이용할 때 언어 폭력이나 차별을 걱정할 필요가 없음.""
     * Waymo는 현지 주민들의 이동성을 개선하는 것 외에도 방문객들이 도시를 경험하는 독특한 방법을 제공함. 수천 명의 관광객이 Waymo 차량을 통해 샌프란시스코의 명소를 탐험함.
     * 앱과 차량 기능에서 스페인어와 중국어를 지원하여 다양한 현지 이용객과 방문객에게 더 포괄적인 경험을 제공함.
     * 총 30만 명 이상이 Waymo에 등록했으며, 이는 도시 인구의 25% 이상에 해당함.

안전하고 책임감 있게 운영 확장

     * 안전은 Waymo의 모든 활동에서 최우선 순위임. 이는 15년 이상의 안전하고 편리한 자율 주행 구축 경험에 기초함.
     * Waymo는 2009년 Palo Alto에서 첫 운행을 시작한 이래, 2천만 마일 이상의 무인 운행과 200만 건 이상의 유료 운행을 통해 안전 이점을 더 많은 사람들에게 제공함.
     * 도로 안전은 긴급한 이슈임. 2022년 샌프란시스코에서 39명이, 2023년에는 25명이 도로에서 사망했으며, 매년 수천 명이 부상을 입음.
     * Waymo Driver는 음주와 피로로 인한 운전 사고를 줄일 수 있음.
     * Mothers Against Drunk Driving (MADD)의 Patricia Rillera 이사는 ""음주 운전은 2021년 미국 도로에서 사망과 부상의 주요 원인으로, 13,000명 이상의 생명을 앗아갔음. 기술적 개입의 필요성이 명백함,"" 라고 말함.
     * Waymo는 6년 이상 안전하게 승객을 수송해 왔으며, 현재 세 개의 주요 도시에서 주당 50,000회 이상의 운행을 제공함.
     * Waymo Driver는 고위험 충돌을 가장 주의 깊은 인간 운전자보다 잘 피함.
     * Waymo의 데이터는 보험 청구, 부상 또는 경찰 보고서에서 인간 운전자보다 우수한 성과를 보여줌.

Waymo의 안전 기록

     * 샌프란시스코에서 380만 마일 이상의 무인 운행을 통해, Waymo Driver는 인간 운전자에 비해 17건의 부상 충돌과 12건의 경찰 보고 충돌을 적게 발생시킴.
     * Waymo는 서비스의 점진적이고 책임감 있는 확장을 위해 도시 및 주 정부 관계자, 응급 구조원, 도로 안전 옹호자들과 긴밀히 협력함.
     * 많은 이용객, 지역 사회 파트너, 샌프란시스코 주민들에게 감사의 말을 전함. 함께 안전하고 깨끗하며 재미있는 이동 경험을 제공하고 있음.
     * Waymo One 앱을 App Store와 Google Play에서 다운로드하여 경험해 볼 수 있음.
     * Waymo는 샌프란시스코에서 혁신적인 자율주행 서비스를 제공하며, 지역 사회와 방문객 모두에게 안전하고 지속 가능한 교통 수단을 제공하고 있음

  GN⁺의 의견

     * 기술적 혁신: Waymo의 자율 주행 기술은 교통 안전을 크게 개선할 수 있는 잠재력이 있음.
     * 환경적 이점: 전기차와 재생 에너지를 사용하여 탄소 배출을 줄이는 데 기여함.
     * 사회적 안전: 특히 취약한 커뮤니티 구성원들에게 안전한 이동 수단을 제공함.
     * 경제적 영향: 지역 비즈니스와 관광 산업에 긍정적인 영향을 미침.
     * 도입 고려 사항: 자율 주행 기술의 법적, 윤리적 문제와 인프라 요구 사항을 충분히 검토해야 함.

   사고가 났었다는 이슈를 보긴 했는데, 공식으로 서비스를 시작했네요.
   요즘 샌프란/LA 갈일이 별로 없는데, 가면 한번 이용해보고 싶어요 ㅎ

   현재 서비스 지역은 샌프란시스코/LA/피닉스 정도네요
   https://support.google.com/waymo/answer/9059119?hl=en

        Hacker News 의견

     * 샌프란시스코에 있다면 Waymo를 꼭 시도해보길 추천함. 매우 부드럽고 확실한 승차감을 제공하며, 차량도 깨끗하고 넓음. 처음 타면 공상과학 영화 같지만, 5분 후에는 익숙해질 정도로 좋음. 우버보다 약간 더 기다리고 요금이 비싸더라도 Waymo를 선택할 것임.
     * 지난 10년 동안 샌프란시스코에 살면서 자율주행 택시가 ""절대 불가능""에서 ""기본 옵션""으로 변한 것이 충격적임. Waymo는 정말 좋은 운전자임.
     * 새로운 승객으로서 몇 가지 경험을 공유함. 전반적으로 매우 세련된 경험이었으며, 어려운 상황도 자신 있게 처리함. 그러나 때로는 신입 운전자처럼 매우 신중하게 운전함. 픽업 시 도로에 너무 가까이 있지 않아 어색한 상황이 발생하기도 함.
     * 엘론 머스크와 그의 분석가들은 택시 네트워크 배포 능력에 회사의 미래 가치를 크게 두고 있음. 반면, Waymo는 도시 근처 운전을 위한 로보택시 문제를 해결하고 사업으로 배포함. 테슬라가 제조 능력과 현재 배포된 차량으로 이길 가능성이 있는지 궁금함.
     * 고속도로와 공항 운행이 추가되면 Waymo는 완전한 서비스가 되어 우버와 리프트를 대체할 수 있을 것임. 1년 내에 주요 도시에서 대규모로 운영될 가능성이 있음.
     * 자율주행 기술이 놀랍고 무서움. 이 자동화가 생명을 구할 것이라고 확신함. 그러나 기계가 많은 일자리를 대체할 것이며, 현대 경제가 이에 대비되지 않았다고 생각함. 고용과 건강보험을 분리하는 것이 필요함.
     * Waymo가 올해 5천만 마일을 달성할 것이며, 2025년에는 1억 마일을 넘길 것임. 이 데이터로 안전성 입증이 명확해질 것임.
     * 10년 전에는 자율주행 기술에 대한 관심이 높았으나, 대부분의 회사가 사라지고 Waymo만 살아남음. 이는 비전의 결과임.
     * 구글이 광고 사업을 통해 실제로 상점으로 사람들을 유도할 수 있는 상황이 올 것임.
     * 자율주행차가 증기를 넘을 수 있는지 궁금함 (맨홀에서 올라오는 연기를 보고 멈춘 이슈때문)
"
"https://news.hada.io/topic?id=15489","박스 플롯 사용 중단박스 플롯 사용 중단 (2021)

불공정한 비교: 시각화된 사회적 불평등이 상황을 악화시킬 수 있는 방법

  연구 개요

     * 새로운 연구에서 인기 있는 차트 선택이 무의식적인 사회적 편견을 유발하고 체계적인 인종차별을 강화할 수 있음을 보여줌.
     * 차트가 처음에는 무해해 보일 수 있지만, 실제로는 사회적 불평등을 시각화하는 방식이 문제를 악화시킬 수 있음.

  차트의 문제점

     * 특정 차트 유형이 사회적 불평등을 시각화할 때 부정적인 영향을 미칠 수 있음.
     * 예를 들어, 막대 차트나 파이 차트는 특정 그룹을 부정적으로 묘사할 수 있음.
     * 이러한 차트는 무의식적으로 특정 인종이나 사회적 그룹에 대한 편견을 강화할 수 있음.

  연구 결과

     * 연구는 다양한 차트 유형이 사람들의 인식을 어떻게 변화시키는지 분석함.
     * 특정 차트는 사회적 불평등을 더 명확하게 보여주지만, 동시에 부정적인 편견을 강화할 가능성이 있음.
     * 연구는 차트 선택이 단순한 데이터 시각화 이상의 영향을 미칠 수 있음을 강조함.

  해결 방안

     * 데이터 시각화에서 공정성을 유지하기 위해 차트 선택에 신중을 기해야 함.
     * 사회적 불평등을 시각화할 때는 다양한 관점을 고려하고, 편견을 최소화하는 방법을 찾아야 함.
     * 교육과 훈련을 통해 데이터 시각화의 잠재적 영향을 이해하고 개선할 필요가 있음.

GN⁺의 의견

     * 데이터 시각화의 중요성: 데이터 시각화는 정보를 전달하는 강력한 도구이지만, 잘못 사용하면 부정적인 영향을 미칠 수 있음.
     * 교육의 필요성: 데이터 시각화와 관련된 교육을 통해 무의식적인 편견을 줄이는 방법을 배울 필요가 있음.
     * 다양한 시각화 도구 사용: 다양한 시각화 도구와 방법을 사용하여 공정하고 균형 잡힌 데이터를 제공하는 것이 중요함.
     * 사회적 책임: 데이터 시각화 전문가들은 사회적 책임을 가지고 작업해야 하며, 그들의 작업이 사회에 미치는 영향을 고려해야 함.
     * 기술 발전: 새로운 기술과 방법을 통해 데이터 시각화의 공정성을 높이는 연구와 개발이 필요함.

        Hacker News 의견

     * Box 플롯은 데이터의 분포를 종 모양으로 보이게 하지 않음. 단지 데이터가 종 모양을 따른다고 가정함.
     * Box 플롯의 유일한 장점은 손으로 그릴 수 있다는 점이었으나, 컴퓨터가 보편화된 지금은 더 이상 유효하지 않음.
     * Violin 플롯과 bee swarm 플롯이 더 나음. Jittered strip 플롯도 주의해서 사용하면 괜찮음.
     * 사람들은 많은 숫자를 요약 통계로 압축하고 싶어하지만, 그 요약이 오해를 불러일으킬 때 후회함. 이는 인간의 일반적인 문제임.
     * Box 플롯은 단일 샘플의 분포를 나타내며, 그 불확실성은 violin 플롯 등에서는 표현되지 않음.
     * 많은 사람들이 Box 플롯을 옹호하지만, 특정 상황에서 가장 유용하다는 주장은 없음.
     * Box 플롯은 위치와 분포를 보여줄 때 적절함. 모양을 보여주는 데는 적합하지 않음.
     * 특정 상황에서는 다른 분포 차트 유형이 유용할 수 있음. Box 플롯은 단일 모드를 가지지 않는 분포에서는 사용하지 않는 것이 좋음.
     * Box 플롯은 과거에 좋은 차트를 인쇄할 수 없던 시절의 유물임. 이제는 밀도 플롯 등을 사용하는 것이 더 나음.
     * Jittered strip 플롯은 밀도를 구별하기 어려움. 대신 swarm 플롯이나 bee swarm 플롯을 사용하는 것이 좋음.
     * 디자인에서 가장 중요한 질문은 ""어떻게 하면 가장 명확하게 전달할 수 있을까?""임. 적절한 도구를 사용해야 함.
     * Box 플롯은 분포를 과도하게 단순화하여 이해하기 쉽게 만듦. 평균도 오해를 불러일으킬 수 있지만 사용을 금지하지 않음.
"
"https://news.hada.io/topic?id=15519","Apple과 Meta, AI 파트너십 논의 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Apple과 Meta, AI 파트너십 논의

     * Apple이 Meta와의 협력을 통해 자사 AI 시스템인 Apple Intelligence에 Meta의 생성 AI 모델을 통합하는 방안을 논의중
     * Meta와 다른 AI 기업들은 Apple의 광범위한 배포망을 활용하려 하고 있음. 이는 iPhone의 App Store를 통해 제공되는 것과 유사
     * Apple은 자체 AI 모델을 개발했지만, 복잡한 작업을 위해 파트너를 찾고 있음. Apple Intelligence 발표 시, OpenAI의 ChatGPT가 첫 파트너로 선정됨
          + Apple은 Google, Meta, Anthropic, Perplexity와도 논의 중임
          + Apple은 사용자가 외부 AI 모델을 선택할 수 있도록 할 계획
     * Apple과 Meta의 협력은 기술 회사 간의 새로운 연합을 의미함.
          + Apple은 Meta와의 논의에서 금전적 교환을 요구하지 않았으며, 대신 AI 회사들이 Apple Intelligence를 통해 프리미엄 구독을 판매할 수 있음
          + 이러한 파트너십은 AI 회사들이 제품을 대규모로 배포하는 데 도움을 줄 수 있음.
     * OpenAI는 Apple Intelligence를 통해 무료 ChatGPT 버전을 제공하고, 프리미엄 계정도 Apple 기기에 연동할 수 있음
          + Apple과의 협력으로 ChatGPT 사용량이 두 배로 증가할 것으로 예상됨
          + OpenAI의 인프라 비용은 30%에서 40% 증가할 것으로 보임
     * Meta와 Apple과의 협력은 Meta의 AI 부서에 큰 성과가 될 것임
          + Meta와 Apple은 과거에 여러 갈등을 겪었음. 예를 들어, Apple의 개인정보 보호 정책 변경으로 Meta는 2022년에 100억 달러의 손실을 입었음
     * Apple의 전략
          + Apple은 OpenAI에 지나치게 의존하지 않기 위해 다양한 AI 회사들과 논의 중임
          + Apple은 외부 AI 회사들이 Apple의 새로운 AI 플랫폼을 얼마나 사용할 수 있을지 여부를 아직 결정하지 않았음
          + 여러 AI 옵션을 제공하는 것은 사용자가 작업에 따라 다른 모델을 선호할 수 있기 때문임
"
"https://news.hada.io/topic?id=15564","리눅스 무선 네트워크를 구현한 래리 핑거 추모","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       리눅스 무선 네트워크를 구현한 래리 핑거 추모

Larry Finger가 Linux 무선 네트워크를 가능하게 하고 다른 사람들을 가르친 이야기

  Larry Finger의 기여와 유산

     * Larry Finger는 Linux 커널에 94개의 릴리스와 1,464개의 커밋을 기여한 개발자임.
     * 그는 공식적인 컴퓨터 교육을 받지 않았지만, 과학자로서 Linux 커널에 중요한 기여를 했음.

  2000년대의 Linux Wi-Fi 문제 해결

     * 2000년대 초반, Linux에서 Wi-Fi를 사용하는 것은 매우 어려웠음.
     * Finger는 Broadcom의 BCM43XX 드라이버를 역설계하여 Linux에서 Wi-Fi를 사용할 수 있게 했음.
     * Realtek 드라이버도 제공하여 많은 시스템에서 그의 코드가 여전히 사용되고 있음.

  메인프레임, 과학 장비, RV 리조트 문제 해결

     * Finger는 과거에 Fortran 프로그래머로 시작하여 다양한 컴퓨터 시스템에서 일했음.
     * 은퇴 후, 그는 RV 리조트의 네트워크를 Linux로 구축하여 비용을 절감하고 성능을 향상시켰음.

  지식 전수

     * Finger는 다른 사람들을 멘토링하여 Broadcom 오픈 소스 코드를 커널에 통합하는 데 도움을 줬음.
     * 그는 Quora에서 비전공자도 Linux에 기여할 수 있다고 조언하며, 작은 패치부터 시작하고 git을 사용해 패치를 제출할 것을 권장했음.

GN⁺의 의견

     * 비전공자의 기여 가능성: Larry Finger의 이야기는 비전공자도 충분히 오픈 소스 프로젝트에 기여할 수 있음을 보여줌.
     * 멘토링의 중요성: Finger가 다른 개발자들을 멘토링한 것은 그의 기여가 단순히 코드 작성에 그치지 않고, 커뮤니티 전체에 긍정적인 영향을 미쳤음을 의미함.
     * 기술의 발전: 그의 기여는 Linux에서 Wi-Fi 사용을 가능하게 하여 많은 사용자들이 더 쉽게 Linux를 사용할 수 있게 했음.
     * 커뮤니티의 힘: 오픈 소스 커뮤니티에서의 협력과 기여는 단일 개발자의 노력으로도 큰 변화를 가져올 수 있음을 보여줌.
     * 지속적인 학습: Finger의 사례는 지속적인 학습과 열정이 기술 발전에 얼마나 중요한지를 잘 보여줌.

        Hacker News 의견

     * 한 사용자는 Larry Finger의 사망 소식에 깊은 슬픔을 느끼며, 그가 개인적으로 멘토 역할을 했음을 언급함.
     * Larry Finger가 리눅스 와이파이와 드라이버 생태계를 크게 개선한 점을 강조함.
     * 과거 Broadcom 와이파이 생태계 문제를 해결해준 Larry Finger의 도움을 기억함.
     * Larry Finger가 리눅스 커널에 172,346줄의 코드를 기여했음을 언급하며, 그의 기여가 상당했음을 강조함.
     * 2005년 대학생 시절, Larry Finger의 드라이버 덕분에 리눅스를 사용할 수 있었던 경험을 공유함.
     * Larry Finger 외에도 또 다른 리눅스 커널 개발자가 최근 사망했음을 알림.
     * Larry Finger의 와이파이 드라이버 작업에 감사하며, NDISWrapper가 어려웠음을 언급함.
     * Larry Finger가 수백 명을 멘토링하며 많은 사람들에게 영감을 주었음을 강조함.
     * 2000년대 후반과 2010년대 초반의 와이파이 코드에 Larry Finger의 기여가 많았음을 언급함.
     * Larry Finger의 작업이 소프트웨어 세계에 입문하는 데 중요한 역할을 했음을 언급함.
"
"https://news.hada.io/topic?id=15534","Ask GN: OpenAI가 왜 Rockset을 인수를 했을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: OpenAI가 왜 Rockset을 인수를 했을까요?

   https://gyutaes.tistory.com/2

   제 개인적 견해가 담긴 글도 작성해봤습니다!

   추가 의견이 있으시면 댓글 달아주세요!!

   앗.. 본문이 너무 비는건 그냥 홍보아닌가요

   헉...! 삭제를 못해서 ㅠㅠ
   쫌 더 추가 의견을 달자면

   개인적으로 Rockset을 인수했을때 인재채용 (애크하이어) 부분은 없었다고 생각했습니다.
   아마 쫌 더 자체 AI 개발? 을 위한 개발적 인수라고 보고 있습니다.

   아마 전략적 확장 인수는 아니라고 판단됩니다. (특히 기존 rockset 서비스가 종료되는 시점에 고객들도 없어지니까요)

   이렇게 자체 회사 기술을 위해 조단위 인수는 진짜 처음 보네요...
"
