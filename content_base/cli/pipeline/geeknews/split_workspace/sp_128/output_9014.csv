"https://news.hada.io/topic?id=13735","애플 컬 보안 사건애플 컬 보안 사건 12604

Apple curl 보안 사건 12604

     * 2023년 12월 28일, curl 이슈 트래커에 버그 리포트 12604가 제출됨.
     * 문제의 제목은 ""flag –cacert behavior isn’t consistent between macOS and Linux""로, macOS와 Linux 간에 --cacert 플래그의 동작이 일관되지 않음을 지적함.
     * 리포터는 macOS에 번들된 curl 버전이 오픈소스로 완전히 빌드된 curl 바이너리와 다르게 동작한다는 것을 보여줌.

Apple의 버전은 시스템 CA 저장소를 두 번째로 확인함

     * --cacert 커맨드 라인 옵션은 사용자가 특정 CA 인증서 세트만을 신뢰하도록 curl에 지시하는 방법을 제공함.
     * macOS에서 Apple이 제공하는 curl 버전을 사용할 때, 제공된 CA 인증서 세트가 검증에 실패하면 시스템 CA 저장소를 두 번째로 확인하는 것으로 보임.
     * 이는 문서화되지 않았으며 사용자에게 예상치 못한 동작임.

이것은 보안 문제임

     * 사용자가 지정한 CA 인증서 파일로 검사를 실행할 때 시스템 CA 저장소에 서버를 검증할 수 있는 인증서가 있다면 실패하지 않음.
     * 이로 인해 통과하지 말아야 할 인증서 검사가 통과하게 되는 보안 문제가 발생함.

Apple은 문제가 없다고 말함

     * 2024년 3월 8일, Apple 제품 보안은 OpenSSL의 버전(LibreSSL)이 의도적으로 내장된 시스템 신뢰 저장소를 기본 신뢰 소스로 사용한다고 응답함.
     * 서버 인증서가 내장된 시스템 신뢰 저장소를 사용하여 성공적으로 검증될 수 있기 때문에, 이를 문제로 보지 않음.

동의하지 않음

     * 이 문서화되지 않은 기능으로 인해 macOS에서 curl을 사용한 CA 인증서 검증이 완전히 믿을 수 없고 문서와 일치하지 않음.
     * 사용자를 혼란스럽게 할 수 있음.
     * 이 문제는 우리가 배포하는 curl 버전의 보안 취약점이 아니므로 CVE를 발행하지 않음.
     * 문제는 엄밀히 말해 curl 코드에 있는 것이 아니라 Apple이 제공하고 curl 빌드에 사용하는 LibreSSL 버전에 있음.

GN⁺의 의견

     * 이 사건은 소프트웨어의 보안과 신뢰성에 대한 중요성을 강조함. 사용자가 명시적으로 신뢰하는 CA 인증서만 사용하길 원할 때, 시스템이 묵시적으로 다른 인증서를 수용하는 것은 심각한 보안 우려를 야기할 수 있음.
     * Apple의 응답은 기업이 자체적으로 정의한 보안 기준과 오픈소스 커뮤니티의 기대 사이에 간극이 있음을 보여줌. 이는 사용자와 개발자가 해당 플랫폼에서 보안을 어떻게 인식하고 관리해야 하는지에 대한 논의를 촉발할 수 있음.
     * 이러한 문제는 오픈소스 소프트웨어를 사용할 때 발생할 수 있는 종속성과 통합 문제를 강조함. 개발자는 특정 플랫폼에서 제공하는 라이브러리와 도구를 사용할 때 이러한 차이점을 인식하고 적절히 대응해야 함.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 OpenSSL이나 GnuTLS가 있으며, 이들은 각각의 보안 철학과 구현 방식을 가지고 있음. 사용자와 개발자는 이러한 대안을 고려할 수 있음.
     * 기술을 도입할 때는 해당 기술의 보안 모델과 플랫폼 간의 호환성을 면밀히 검토해야 함. 이 사건은 Apple의 LibreSSL 구현이 표준 curl 동작과 다르게 작동한다는 점을 드러냄으로써, 기술 선택의 중요성을 강조함.

        Hacker News 의견

     * Apple의 특정 ""기능""에 대한 비판
          + 이 기능은 불필요한 계산을 추가하거나 기대하는 검증 모델을 깨뜨릴 수 있음.
          + 사용자가 자신의 CA를 제공하려는 이유는 OS 번들에 CA가 없거나 특정 CA에 대해 검증하고자 함일 수 있음.
          + Apple의 이러한 행동은 예상되는 결과가 아님.
     * Apple 장치 소유자의 의도와 상관없이 Apple 정책이 우선됨
          + Apple 장치의 ""소유자""가 원하는 것을 무시하고 Apple 정책이 우선되는 것은 놀랍지 않은 일반적인 현상임.
     * libcurl의 CA 저장소 사용에 대한 설명
          + CURLSSLOPT_NATIVE_CA 옵션을 설정하면, libcurl은 운영 체제의 기본 CA 저장소를 사용하여 인증서 검증을 수행함.
          + CA 인증서 파일이나 디렉토리를 설정한 경우, 이들은 기본 CA 저장소와 함께 검색됨.
          + --cacert 옵션과 결합될 경우, libcurl은 두 설정을 모두 존중하려고 시도할 수 있으며, 이는 상호 배타적일 수 있음을 시사함.
     * SQLite F_BARRIERFSYNC 사건과 유사한 상황
          + Apple이 관심을 가지지 않는 것처럼 보임.
     * Daniel의 지적에 따른 curl의 수정 필요성
          + Daniel이 curl의 문제를 지적하면 Apple은 이를 수정해야 함.
     * curl 문서의 문제점과 libcurl의 보안 결함
          + curl은 모든 프로토콜을 직접 구현하지 않고, 다양한 라이브러리를 지원함.
          + 이러한 접근 방식의 단점은 독립적인 백엔드 간에 일관된 행동을 보장하기 어렵다는 것임.
          + libressl은 openssl의 완벽한 재구현이 아니며, 그 API를 완전히 모방할 의무가 없음.
          + curl은 해당 라이브러리에 대한 지원을 중단하거나 문제를 문서화하는 두 가지 선택지가 있음.
          + 사용자 코드를 깨뜨리는 것을 피하기 위해, 적어도 문제를 문서화해야 함.
          + libressl의 접근 방식이 보안 측면에서 결함이 있으며 CVE를 개설할 이유가 있을 수 있음.
     * macOS에 포함된 소프트웨어에 대한 불신
          + MacPorts를 사용하여 macOS에 포함된 도구들을 덮어씀(예: curl), 이는 종종 오래되거나 문제가 있기 때문임.
     * Apple의 기본 행동이 백도어로 간주될 수 있음
          + 의도적이거나 악의적이라고 말하는 것은 아니지만, 사실상 백도어로 작용할 수 있음.
          + 사용자의 인증 체계에 키를 추가하는 것은 백도어를 추가하는 것과 같음.
     * Apple이 사용자의 보안을 중요시하지 않는 것에 대한 비판
          + 기본 행동과 대체 행동은 다름.
          + Apple의 보안 팀이 읽기 이해력에 문제가 있을 수 있음을 시사함.
"
"https://news.hada.io/topic?id=13758","'MWC 2024'에 참가한 국내 기업에 참가한 국내 기업

   요약
     * 2월 말에 스페인 바르셀로나에서 개최된 '모바일 월드 콩그레스(MWC) 2024'가 막을 내림
     * 이 컨퍼런스에는 삼성,LG,KT,SKT,LGU+ 등 다수의 국내 기업이 참석함
     * 각 기업은 미래에 선보일 AI 및 통신 기술을 전시함

   국내
     * 삼성: 온디바이스, 접는 디스플렝, 손목에 착용하는 핸드폰 등
     * SKT: AI 데이터센터, 상용예정인 도심항공교통(UAM), 6G 등
     * KT: AI, 도심항공교통(UAM), 6G 등
     * LGU+: AI를 이용한 서비스를 출시할 수 있도록 아마존 협력 결성

   해외
     * Microsoft: VR, 코파일럿, 생성형 AI 등 실제로 서비스되는 기술 전시
     * 샤오미: 전기차와 로봇 개를 메인으로 전시
     * 화웨이: AI, 5G, 클라우드를 통합하여 자체 개발한 통신 파운데이션을 전시
     * NTT 도코모: VR 기기에 촉감 디바이스를 결합한 기술 전시
"
"https://news.hada.io/topic?id=13805","1930년대 전선을 통한 사진 전송 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         1930년대 전선을 통한 사진 전송 방법

1930년대 전신으로 사진을 전송한 방법

     * 1937년의 비디오 설명을 통해, 당시 신문사로 사진을 전송하는 방법이 소개됨.
     * 비행기와 사진작가의 묘기를 담은 장면으로 시작하여, 전국에 사진을 전송하는 과정에 대한 매혹적인 설명으로 이어짐.
     * 전송 시스템은 휴대가 가능했으며, 전화선에 연결하여 사진을 아날로그 모뎀을 통해 스캔하여 전송하는 방식이었음.

와이어 포토에 대한 위키피디아 페이지

     * 와이어 포토 기술이 초기의 패스트 패션 형태에 영향을 미쳤다고 주장하는 프랑스 디자이너들에 대한 내용이 담겨 있음.
     * 제2차 세계대전 후 파리의 오트 쿠튀르 쇼에서, 프레더릭 L. 밀턴이 런웨이 디자인을 스케치하고 그 스케치를 벨리노그라프를 통해 구독자들에게 전송했으며, 이를 통해 파리지앵 패션을 복제할 수 있었음.
     * 1955년, 프랑스의 주요 쿠튀르 디자이너 네 명(Lanvin, Dior, Patou, Jacques Fath)이 밀턴을 해적행위로 고소했고, 이 사건은 뉴욕 대법원 항소부로 이어졌음.

GN⁺의 의견

     * 이 기사는 1930년대에 사용된 혁신적인 사진 전송 기술에 대한 흥미로운 역사적 사실을 제공함. 이 기술은 당시로서는 상당히 진보적이었으며, 현재의 디지털 이미지 전송 기술과 비교해 볼 때 기술 발전의 역사를 이해하는 데 도움이 됨.
     * 사진 전송 기술의 발전은 미디어와 패션 산업에 큰 변화를 가져왔으며, 이 기사는 기술이 산업에 미치는 영향에 대한 흥미로운 사례를 제시함. 특히 패스트 패션의 초기 형태와 관련된 법적 분쟁은 오늘날에도 여전히 관련성이 있는 주제임.
     * 기술의 발전이 어떻게 창의성과 지적 재산권 사이의 긴장을 야기하는지에 대한 사례로서, 이 기사는 현대의 콘텐츠 제작자와 디자이너들에게도 시사하는 바가 큼.
     * 비슷한 기능을 제공하는 현대 기술로는 클라우드 기반의 이미지 공유 서비스나 고속 인터넷을 통한 파일 전송 서비스 등이 있으며, 이러한 서비스들은 사용자에게 더 빠르고 효율적인 방법을 제공함.
     * 이 기술의 도입 당시의 문제점으로는 전송 속도의 제한, 이미지 품질의 저하, 그리고 기술적 복잡성 등이 있었을 것이며, 현재는 이러한 문제들이 대부분 해결되어 더 나은 사용자 경험을 제공하고 있음.

        Hacker News 의견

     * 간단함 속에 천재성이 있다. 이런 것이 실제로 존재했다는 사실을 몰랐음.
          + 와이어포토에 대한 링크를 통해, 과거의 ""설명"" 영화들을 매우 좋아한다고 언급. 오늘날 흔한 것보다 교육적 수준이 높고, 메시지 전달에 시간을 할애한다고 평가함.
     * 레이저가 1960년에 발명된 것을 참고로, 두 개의 스풀에 그려진 로프가 ""다운로드""를 설명하는 데 있어서 그 간단함으로 인해 주목할 만함.
          + 레고를 사용하여 고등학생도 비슷한 것을 구현할 수 있을 것이라고 추측. 광학 센서와 펜을 잡는 장치를 만들어 이미지를 렌더링할 수 있음을 언급하며 예시 비디오 링크 제공.
     * 로프의 두 스풀이 이미지를 전송하는 장면(영상에서 약 3:45)이 놀랍다고 언급함.
     * 자카드의 자화상이 1839년에 24,000개의 펀치 카드로 만들어진 2메가픽셀 이미지라는 사실이 더 오래되었음을 언급하며 자카드에 대한 링크를 제공함.
     * 1990년대에 뉴스 크루들이 전화나 통신 연결을 사용했는지에 대한 질문. 마이크로파 트럭을 제외하고, 어린 시절 카메라맨이 통신 박스를 열어 무언가를 연결하는 것을 본 기억이 있다고 함.
     * 1968년 최신 ""팩스"" 기술을 사용하는 경찰을 보여주는 영화 'Bullitt'의 텔레코피어 장면에 대한 언급. 거의 정보 없이 업로드했지만, 유튜브 댓글이 의외로 유익함을 언급하며 비디오 링크 제공.
     * 팩스 기계가 1800년대로 거슬러 올라가며, 전화보다 오래되었다는 놀라운 사실과 함께, 팀 헌킨의 '팩스 기계의 비밀 생활'이라는 클래식한 비디오를 언급하며 링크 제공.
     * 헬스크라이버 텔레프린터에 대한 언급. 회전하는 헤드가 테이프 스트립에 충격을 주어 문자를 그래픽으로 인쇄하며, 강한 간섭 속에서도 메시지를 읽을 수 있음. 아마추어 무선 운영자들이 여전히 재미로 사용하고, SDR 디코더 중 하나가 이를 읽을 수 있다고 함. 헬스크라이버에 대한 링크 제공.
     * 이미지를 선으로 나누는 것은 텔레비전 카메라/디스플레이와 래스터 스캔 CRT가 작동하는 방식과 유사함을 언급(텔레비전은 1920년대로 거슬러 올라감). 드럼에 이미지를 감는 것은 텔레비전 기술에는 없는 창의적인 방법이었으며, 송수신기 간의 선 동기화 방법에 대한 궁금증을 표함(모든 비디오 표준에는 hsync 펄스가 있지만 여기서는 보이지 않음). 팩스 기계가 어떻게 작동하는지 확실하지 않다고 언급함.
     * 이 기술을 사랑한다고 언급. 매우 단순하며 진정한 인간 기술임. 모든 컴퓨터를 태우고 이 수준의 기술로 제한해야 한다고 주장함.
"
"https://news.hada.io/topic?id=13772","오픈 소스 분산 전자책 검색 엔진 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         오픈 소스 분산 전자책 검색 엔진 구축

오픈소스 분산 전자책 검색 엔진 구축하기

     * 친구의 추천으로 ENS 도메인 이름을 사용하는 Liber3라는 전자책 검색 웹사이트를 알게 됨.
     * Liber3는 ENS와 IPFS를 이용해 전자책 검색 웹사이트를 만들었으나 소스 코드를 공개하지 않음.
     * Glitter의 문서와 데이터셋을 검토한 후, 오픈소스 커뮤니티 버전을 직접 구현하기로 결정함.

프로젝트 초기화

     * 새 프로젝트를 생성하고 Glitter SDK를 설치하여 Glitter 네트워크에 쉽게 연결하고 전자책의 메타데이터를 얻을 수 있음.

네트워크 연결

     * Glitter 네트워크와 상호작용할 수 있는 클라이언트를 생성함.
     * Glitter SDK를 통해 LCDClient 인스턴스를 초기화하고 관련 매개변수를 설정함.

검색 기능 구축

     * 사용자의 쿼리 키워드를 받아 쿼리 문을 구성하고 Glitter 네트워크로 보내는 검색 기능을 정의함.

검색 결과 표시

     * 검색 기능을 구축한 후, 전자책의 기본 정보를 보여주는 인터페이스를 디자인하고 사용자가 책을 쉽게 탐색하고 선택할 수 있는 인터랙티브 요소를 제공함.
     * 이 네 단계를 통해 전자책 검색 엔진을 구축할 수 있으며, 사용자에게 전자책 자원을 검색하는 효율적이고 편리한 플랫폼을 제공함.
     * 컴파일된 웹사이트 버전을 IPFS 네트워크에 게시하면 IPFS 게이트웨이를 통해 접근할 수 있는 분산 전자책 검색 엔진을 가질 수 있음.
     * 전체 소스 코드는 이 저장소에서 확인할 수 있음.

GN⁺의 의견

     * 이 기사는 오픈소스와 분산 기술을 활용하여 전자책 검색 엔진을 구축하는 방법을 설명함으로써, 기술에 관심 있는 사람들에게 흥미를 줄 수 있음.
     * 분산 데이터베이스와 IPFS를 사용하는 것은 중앙 집중식 서버에 의존하지 않고 데이터를 저장하고 검색하는 새로운 방법을 제시함으로써, 데이터의 영속성과 접근성을 향상시킬 수 있는 잠재력을 가짐.
     * 이 기술을 도입할 때는 네트워크의 안정성, 검색 속도, 사용자 경험 등을 고려해야 하며, 기존의 중앙 집중식 검색 엔진과 비교했을 때의 장단점을 이해하는 것이 중요함.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Project Gutenberg나 Google Books API가 있으나, 이들은 분산 기술을 사용하지 않음.
     * 분산 기술을 사용함으로써 데이터의 소유권과 통제를 사용자에게 돌려주는 동시에, 콘텐츠의 검열 저항성을 강화할 수 있음.
"
"https://news.hada.io/topic?id=13799","작업 분해작업 분해

소프트웨어 프로젝트 추정: 작업 분해하기

     * 소프트웨어 프로젝트를 계획하는 데 있어 작업 목록을 명확하게 정의하는 것이 중요함.
     * 작업을 분해하는 과정은 직관적으로 느껴질 수 있지만, 구체적인 단계를 거쳐야 함.
     * 작업 분해 과정은 프로젝트를 구성하는 작업들로 나누고, 각 작업을 세부적으로 정의하는 것을 포함함.

예시를 통한 작업 분해

     * 개인적인 스트릭 추적기를 만드는 예시를 통해 작업 분해 과정을 보여줌.
     * 스트릭 추적기는 야외 활동을 추적하며, Streaks 앱과 비슷하지만 다양한 야외 활동 옵션과 Duolingo의 '스트릭 프리즈' 기능을 포함함.

    첫 번째 시도

     * 스케치로 시작하여 무엇을 만들지 시각적으로 구상함.
     * 개인 프로젝트의 경우 간단한 스케치로 충분할 수 있지만, 작업을 위임하거나 시간 추정이 필요한 경우 더 세부적인 작업 분해가 필요함.

    두 번째 시도

     * 단일 작업을 구성 요소로 확장하여 계획하고, 의존성을 고려하지만 아직 단계의 크기나 범위에 대해서는 걱정하지 않음.
     * 데이터 모델링, 달력 뷰, 상호작용 달력, 현재 스트릭 계산 및 표시, 스트릭 프리즈 구현 등의 작업 목록을 작성함.

    세 번째 시도

     * 더 큰 단계를 더 작은 구성 요소로 나누고, 세부 사항을 추가함.
     * 데이터 모델링, 정적 달력 뷰, 동적 주 달력 뷰, 스트릭 계산 및 표시, 스트릭 프리즈 등의 작업을 더 세분화하여 정의함.

작업 분해 과정

     * 작업 분해는 상호작용적인 과정으로, 큰 작업을 생각하고 이를 작은 단계로 나누어 기록함.
     * 각 작업이 충분히 정의되었는지 확인하고, 그렇지 않다면 알고리즘을 반복하여 더 세부적으로 나눔.

    작업이란 무엇인가?

     * 작업은 충분히 정의되고, 완전한 작업을 포함하며, 변화를 가져오는 것을 의미함.
     * '충분히 정의된' 작업은 명확한 개요가 필요하며, '완전한' 작업은 필요한 모든 작업을 포함해야 함.

    충분히 정의된 작업이란?

     * 작업을 수행하는 사람이 원하는 변화를 이해하고, '완료'가 어떻게 보일지 이해하며, '완료'에 이르는 모든 단계를 정의할 수 있어야 함.

이것은 기술이며 연습이 필요함

     * 작업 분해는 기술이며 연습을 통해 발전함.
     * 경험이 많은 개발자에게는 직관적으로 느껴질 수 있지만, 경험이 적은 사람에게는 어려울 수 있음.
     * 안전한 학습 환경에서 프로젝트 계획을 요청하고, 작업을 분해하며, 피드백을 제공하는 것이 중요함.

작업 분해 알고리즘 요약

     * 시작점에서 작업 목록, 스케치 또는 아이디어로 시작함.
     * 각 항목이 충분히 정의되었는지 결정하고, '아니오'라면 작업을 더 분해함.
     * 모든 작업이 충분히 분해될 때까지 반복함.

프로젝트 추정 보너스

     * 시리즈가 추정에 관한 것이므로, 프로젝트에 대한 추정을 완성함.
     * 실제 작업량을 과대평가했을 수 있으며, 디자인을 간소화하고 '프리즈' 알고리즘에 버그가 있을 수 있음.

GN⁺의 의견

     * 작업 분해는 프로젝트 관리와 소프트웨어 개발에서 핵심적인 기술이며, 이 기사는 초급 소프트웨어 엔지니어에게 작업 분해의 중요성과 방법을 이해하는 데 도움이 될 수 있음.
     * 작업 분해는 프로젝트의 범위를 명확하게 정의하고, 시간과 자원을 효율적으로 관리하는 데 필수적임.
     * 이 기사는 작업 분해 과정을 단계별로 설명하고 있어, 실제 프로젝트에 적용할 때 참고할 수 있는 좋은 예시를 제공함.
     * 작업 분해의 정확성은 프로젝트의 성공에 큰 영향을 미칠 수 있으며, 이 과정에서 발생할 수 있는 오류나 누락을 최소화하는 것이 중요함.
     * 유사한 기능을 제공하는 프로젝트 관리 도구로는 Jira, Trello, Asana 등이 있으며, 이러한 도구를 사용하여 작업 분해 과정을 시각화하고 관리할 수 있음.
"
"https://news.hada.io/topic?id=13803","Enterprise SaaS 개발용 Next.js 기반 스타터킷 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Enterprise SaaS 개발용 Next.js 기반 스타터킷 오픈소스

     * Next.js + TailWind CSS + Postgres + React + Prisma + TypeScript
     * SAML SSO 및 이메일/암호, 매직 링크, 구글/GitHub OAuth 로그인 지원
     * 팀 생성/사용자 초대 등 관리 기능
     * 롤 및 권한 관리
     * Directory Sync(SCIM) 지원
     * 웹훅 & 이벤트 지원 (Svix)
"
"https://news.hada.io/topic?id=13743","S3는 파일 시스템이 아닌 파일 저장 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        S3는 파일 시스템이 아닌 파일 저장 기술

S3는 파일이지만 파일 시스템은 아니다

     * Amazon S3는 2006년에 출시된 원래의 클라우드 기술로, ""객체 저장소""로 불리지만 실제로는 파일을 위한 것임.
     * S3가 ""Amazon Cloud Filesystem""이라는 생각은 사람들이 S3를 채택하도록 유도하는 유용한 믿음이지만, 사실 S3는 파일 시스템이 아님.

파일 시스템이란 무엇인가, 그리고 모듈 ""깊이""

     * 유닉스 파일 API는 다섯 가지 기본 함수로 구성되어 있으며, 이는 파일 읽기와 쓰기에 필요한 모든 것을 제공함.
     * 이러한 함수들은 버퍼링, 페이지 캐시, 조각화, 권한, IO 스케줄링 등 많은 문제를 다루지만 사용자에게 노출시키지 않음.
     * 깊은 모듈은 사용자가 복잡성에 대해 생각하지 않고도 기능을 이용할 수 있게 해주는 장점이 있음.

S3의 특징(이것도 깊음)

     * S3는 유닉스 파일 시스템 API를 재구현하지 않으며, 기본적인 호출 방식이 다름.
     * S3 API는 유닉스 파일 API보다 간단하지만, 객체를 부분적으로 덮어쓸 수 없는 제한이 있음.

파일 시스템 소프트웨어, 특히 데이터베이스는 Amazon S3로 이전할 수 없음

     * 데이터베이스는 데이터를 저장할 장소가 필요하며, 이는 일반적으로 파일 시스템의 다양한 파일에 저장됨.
     * 데이터베이스는 부분적인 덮어쓰기 기능에 크게 의존하며, 이는 S3에서는 불가능함.

S3가 잘하는 것과 못하는 것

     * S3의 장점은 읽기와 쓰기의 대역폭이 매우 높다는 것임.
     * 그러나 S3에는 부분적인 덮어쓰기, 이름 변경 또는 이동 작업이 없으며, 파일 목록을 나열하는 것도 느림.
     * 그럼에도 불구하고 S3는 유지보수가 적고, 백업 설정, 복제, 프로비저닝 등의 작업을 간소화함.

조직 간 모듈 깊이의 중요성

     * S3가 인기 있는 첫 번째 클라우드 API가 된 것은 놀랍지 않으며, 조직 간 복잡성을 관리하는 데 깊은 API가 도움이 됨.
     * SAP와 같은 복잡한 기업 소프트웨어를 통합하는 것은 고통스러운 작업이며, 이는 SAP가 깊은 모듈이 아니기 때문임.

기타 정보

     * 이 기사는 S3가 과대평가되었다는 것을 제안하려는 것이 아니며, 깊은 모듈 대 비교적 얕은 모듈에 대한 개념을 설명함.
     * 몇몇 데이터베이스는 S3 API를 사용하여 저장소로 설계되었으며, 이는 가능하지만 투명하지는 않음.
     * S3에서는 많은 파일 형식이 디스크보다 성능이 떨어짐.

GN⁺의 의견

     * S3는 파일 시스템의 대체재가 아니라 특정 사용 사례에 최적화된 스토리지 솔루션이라는 점을 이해하는 것이 중요함. 예를 들어, 대규모 불변 파일을 저장하고 전송하는 데 적합하지만, 데이터베이스와 같이 빈번한 부분적 업데이트가 필요한 애플리케이션에는 적합하지 않음.
     * S3의 성능과 확장성은 매우 높지만, 비용 효율성과 관리의 복잡성을 고려할 때 모든 프로젝트에 적합한 것은 아님. 예를 들어, 오픈소스 프로젝트인 MinIO는 자체 인프라에서 S3 호환 스토리지를 구축하고자 하는 조직에게 좋은 대안이 될 수 있음.
     * S3를 사용할 때는 데이터 일관성, 네트워크 비용, 접근 제어 등의 추가적인 고려 사항이 있으며, 이러한 요소들은 전체 시스템 설계에 영향을 미칠 수 있음.
     * S3의 사용 사례가 제한적일 수 있지만, 데이터 레이크나 백업 솔루션과 같은 특정 애플리케이션에서는 매우 강력한 도구임. 데이터를 안전하게 저장하고 필요할 때 빠르게 검색할 수 있는 능력은 많은 비즈니스에 중요한 가치를 제공함.
     * 이 기사는 S3의 기술적 세부 사항과 실제 사용 사례에 대한 깊은 이해를 제공함으로써, 기술적 결정을 내리는 데 도움이 될 수 있음.

        Hacker News 의견

     *

     S3의 내구성에 대한 문제를 들어본 적은 없지만, 이러한 주장이 테스트된 것을 본 적도 없다. 이 주장들에 대해 궁금하긴 하다.
          + S3의 내구성은 업계 선두이며, 전통적인 파일 시스템과는 비교할 수 없음.
          + AWS의 가용성 구역 분리는 다른 클라우드 제공업체보다 우수함.
          + S3는 데이터 무결성과 자연재해에 대한 걱정이 매우 큼.
          + S3는 '비트로트'를 감지할 정도로 큰 규모로 운영됨.
          + 중요 데이터는 S3 외에 다른 곳에 저장하지 않을 것임.
          + 출처: S3 배치 시스템을 작성한 사람.
     *

     파일 목록을 나열하는 것이 느리다. S3는 읽기와 쓰기는 매우 빠르지만, 파일 목록을 나열하는 것은 매우 느림.
          + S3의 빠른 읽기와 쓰기가 유용한 것이 아니라, 파일 목록을 나열하는 기능이 유용함.
          + 버전 관리되지 않은 버킷에서는 주어진 접두사를 나열하는 것이 사실상 일정 시간 내에 가능함.
          + 데이터를 다양한 방식으로 분할하고 성능에 대한 걱정 없이 필요한 식별자를 사용할 수 있음.
     *

     파일 목록을 나열하는 것이 느리다는 점에 최근 놀랐다. S3에서 자산을 관리하기 위한 스크립트 작업을 하면서, 파일 목록 캐시가 필요하다는 것을 깨달음.
          + 약 100,000개의 루트 레벨 디렉토리가 있으며, 각각에는 몇 개의 파일이 있는 몇 개의 디렉토리가 있음.
          + 파일을 재귀적으로 나열하는 데 15분이 걸림.
          + 아마존이 이 문제를 해결하지 않은 이유가 궁금함.
     *

     Amazon S3는 원래의 클라우드 기술로, 2006년에 출시됨. ""객체""가 당시 인기 있었고 S3는 ""객체 저장소""로 불림.
          + S3는 파일 시스템이 아니라 객체 저장소임.
          + S3는 파일이 아니며, 파일 시스템도 아님.
          + 파일 추상화에서 기대하는 것은 가변성임.
          + S3는 불변 객체의 가변 목록을 제공함.
          + S3는 다른 문제를 해결하고, 파일 시스템처럼 보이게 하려는 시도는 고객의 오해에서 비롯됨.
     *

     Apache Arrow의 object_store와 Apache OpenDAL 제공 API를 비교하는 논의가 있음.
          + Apache OpenDAL은 S3를 포함한 여러 클라우드 스토리지에 대한 FS와 같은 API를 제공하는 라이브러리임.
          + GreptimeDB와 Databend와 같은 몇몇 데이터베이스 시스템은 클라우드 스토리지에 데이터에 접근하기 위해 OpenDAL을 사용함.
          + Alluxio와 JuiceFS와 같은 다른 솔루션들도 S3 위에 파일 시스템과 같은 인터페이스를 관리함.
     *

     파일 시스템 소프트웨어, 특히 데이터베이스는 Amazon S3로 이식될 수 없다.
          + 그러나 이식될 수 있음.
          + INSERT/UPDATE/DELETE를 할 때마다 전체 DB 파일을 덮어쓸 필요는 없음.
          + SQLite의 경우 S3로 복제하고 복원을 지원하는 Litestream과 같은 도구가 있음.
     *

     Minio를 로컬 ""S3""로 사용하여 데이터셋과 모델 체크포인트를 저장함.
          + Minio에는 필요하지 않은 많은 기능이 있음.
          + CRUD 파일을 할 수 있고 목록을 볼 수 있는 최소한의 S3와 같은 ""것""에 대한 현재 최선의 자체 호스팅, 단일 노드 옵션은 무엇인가?
     *

     S3에 대해 이야기하는 동안 Backblaze B2를 언급할 가치가 있음.
          + S3보다 3배 낮은 가격에 매우 만족함.
     *

     S3는 파일 시스템으로 잘못 사용될 수 있음.
          + S3는 객체를 원하며, 여기에 클러스터라고 불리는 512 또는 4096 바이트 객체가 있음.
"
"https://news.hada.io/topic?id=13720","The Pile, 825기가바이트 규모의 다양한 오픈소스 언어 모델링 데이터 세트 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          The Pile, 825기가바이트 규모의 다양한 오픈소스 언어 모델링 데이터 세트 (2020)

The Pile: 언어 모델링을 위한 다양한 텍스트의 800GB 데이터셋

     * The Pile은 22개의 작고 고품질 데이터셋을 결합하여 만든 825 GiB 규모의 다양한 오픈 소스 언어 모델링 데이터셋임.
     * 이 데이터셋은 Eye라는 기관에 의해 호스팅되며, jsonlines 데이터 형식으로 zstandard를 사용하여 압축됨.
     * The Pile을 사용하거나 평가하는 모델이 있다면 개발자에게 알릴 것을 요청함.

The Pile을 훈련 세트로 사용하는 이유

     * 최근의 연구에 따르면, 특히 큰 모델의 경우, 데이터 소스의 다양성이 모델의 일반적인 교차 도메인 지식과 하류 일반화 능력을 향상시킴.
     * 평가 결과, The Pile에서 훈련된 모델은 전통적인 언어 모델링 벤치마크에서 중간 정도의 개선을 보이며, Pile BPB에서는 상당한 개선을 보임.

The Pile을 벤치마크로 사용하는 이유

     * Pile BPB (bits per byte)에서 좋은 점수를 얻으려면, 모델은 책, GitHub 저장소, 웹페이지, 채팅 로그, 의학, 물리학, 수학, 컴퓨터 과학, 철학 논문 등 다양한 도메인을 이해할 수 있어야 함.
     * Pile BPB는 이러한 도메인에서의 세계 지식과 추론 능력을 측정하는 지표로, 큰 언어 모델의 일반적인 교차 도메인 텍스트 모델링 능력에 대한 강력한 벤치마크임.

인용

     * The Pile 또는 그 구성 요소를 사용하는 경우, 다음과 같이 인용할 것을 요청함.

@article{pile,
  title={The {P}ile: An 800GB Dataset of Diverse Text for Language Modeling},
  author={Gao, Leo and Biderman, Stella and Black, Sid and Golding, Laurence and Hoppe, Travis and Foster, Charles and Phang, Jason and He, Horace and Thite, Anish and Nabeshima, Noa and Presser, Shawn and Leahy, Connor},
  journal={arXiv preprint arXiv:2101.00027},
  year={2020}
}

리더보드

     * 리더보드는 테스트 세트와의 중복 가능성을 나타내며, Zero-shot은 Pile의 모든 구성 요소가 훈련 데이터에 포함되지 않았음을 의미함.
     * GPT-3 (Zero-Shot)*와 GPT-2 (Zero-Shot)*가 각각 0.7177과 1.225의 Test BPB로 OpenAI에 의해 2021년 1월 1일에 순위가 매겨짐.
     * 평가 코드는 EleutherAI 2021에 의해 제공됨.

GN⁺의 의견

     * The Pile 데이터셋은 언어 모델의 훈련과 벤치마킹에 있어서 데이터의 다양성이 중요하다는 최신 연구 결과를 반영함. 이는 언어 모델이 실제 세계의 다양한 텍스트를 이해하고 처리할 수 있도록 하는 데 기여함.
     * 데이터셋의 크기와 다양성은 모델이 더 넓은 범위의 지식을 학습하고, 더 나은 일반화 능력을 갖출 수 있도록 함. 이는 특히 인공 지능 분야에서 중요한 진보로 볼 수 있음.
     * 그러나 이러한 대규모 데이터셋을 효과적으로 활용하기 위해서는 상당한 컴퓨팅 자원이 필요하며, 이는 비용과 환경적 영향을 고려해야 하는 문제를 제기함.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 OpenAI의 GPT-3와 같은 대규모 언어 모델이 있으며, 이들 역시 다양한 데이터 소스로부터 학습함.
     * The Pile을 사용하기 전에는 데이터의 출처와 품질, 그리고 모델이 학습할 내용에 대한 충분한 이해가 필요함. 이 데이터셋을 선택함으로써 얻을 수 있는 이점은 모델의 다양한 지식 습득이지만, 데이터 처리와 저장에 대한 비용도 고려해야 함.
"
"https://news.hada.io/topic?id=13771","미국에서 발견된 보잉 내부 고발자 사망 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        미국에서 발견된 보잉 내부 고발자 사망 소식

     * 보잉 내부 고발자, 미국에서 사망
          + 보잉의 생산 표준에 대해 우려를 제기했던 전직 직원이 미국에서 사망한 채 발견됨.
          + 존 바넷은 32년간 보잉에서 근무하다가 2017년 건강 문제로 은퇴함.
          + 사망하기 몇 일 전까지 회사에 대한 내부 고발자 소송에서 증언을 제공하고 있었음.
          + 보잉은 바넷의 사망 소식에 슬퍼움을 표함.
          + 찰스턴 카운티 검시관은 바넷이 3월 9일 자신에게 상처를 입혀 사망했다고 확인함.
     * 보잉에서의 경력과 우려 제기
          + 바넷은 2010년부터 보잉의 노스 찰스턴 공장에서 787 드림라이너의 품질 관리자로 근무함.
          + 2019년 바넷은 압박을 받는 근로자들이 생산 라인에 열등한 부품을 고의로 장착하고 있다고 BBC에 밝힘.
          + 또한, 비상 산소 시스템에 심각한 문제가 있어 비상 상황에서 4개 중 1개의 호흡 마스크가 작동하지 않을 수 있다고 주장함.
          + 바넷은 사우스 캐롤라이나에서 근무를 시작한 후, 새로운 항공기 제작을 서두르는 과정에서 안전이 저해되고 있다고 우려함.
     * 보잉의 반응과 FAA의 조사
          + 바넷은 관리자들에게 우려를 전달했으나 조치가 취해지지 않았다고 주장함.
          + 보잉은 그의 주장을 부인함.
          + 그러나 2017년 미국 연방항공청(FAA)의 검토에서 바넷의 일부 우려가 인정됨.
          + FAA는 공장에서 53개의 ""부적합"" 부품의 위치를 알 수 없으며, 이들이 분실된 것으로 간주됨을 밝힘.
          + 산소 실린더 문제에 대해 보잉은 공급업체로부터 제대로 작동하지 않는 일부 산소 병을 받았다고 인정했으나, 실제 항공기에 장착된 것은 아니라고 부인함.
     * 법적 대응과 사망
          + 은퇴 후 바넷은 회사에 대한 장기적인 법적 행동을 시작함.
          + 그는 자신이 지적한 문제들 때문에 회사가 자신의 성격을 폄하하고 경력을 방해했다고 비난함.
          + 사망 당시 바넷은 해당 사건과 관련된 법적 인터뷰를 위해 찰스턴에 있었음.
          + 지난주 그는 보잉의 변호사들에 의해 심문을 받고 자신의 변호사에 의해 반대 심문을 받았음.
          + 토요일에 추가 심문을 받기로 되어 있었으나 나타나지 않아 호텔에서 조사가 이루어짐.
          + 그는 호텔 주차장에서 자신의 트럭 안에서 사망한 채 발견됨.
     * 보잉과 Spirit Aerosystems의 생산 표준에 대한 조사
          + 바넷의 사망은 보잉과 주요 공급업체인 Spirit Aerosystems의 생산 표준이 엄격히 조사받고 있는 시기에 발생함.
          + 1월 초, 포틀랜드 국제공항에서 이륙 직후 새로운 보잉 737 맥스의 비상 탈출문이 떨어져 나가는 사건이 발생함.
          + 미국 국가교통안전위원회(National Transportation Safety Board)의 예비 보고서는 문을 안전하게 고정해야 할 네 개의 주요 볼트가 장착되지 않았다고 제안함.
          + FAA는 회사에 대한 6주간의 감사에서 ""제조 품질 관리 요구 사항을 준수하지 못한 여러 사례""를 발견했다고 밝힘.

GN⁺의 의견

     * 이 사건은 항공 산업에서의 품질 관리와 안전 표준의 중요성을 강조함. 항공기 제작 과정에서의 엄격한 품질 관리는 승객의 안전을 보장하는 데 필수적임.
     * 내부 고발자의 죽음은 기업 문화와 내부 고발 시스템에 대한 재검토의 필요성을 제기함. 직원들이 안전 문제를 제기할 수 있는 환경이 중요함.
     * 보잉과 같은 대형 항공기 제조사의 문제는 전 세계적인 항공 안전에 영향을 미칠 수 있으므로, 이러한 사건은 업계 전반에 걸쳐 투명성과 책임성을 강화할 필요가 있음을 시사함.
     * 비슷한 기능을 가진 제품이나 프로젝트로는 에어버스와 같은 다른 항공기 제조사들이 있으며, 이들 역시 엄격한 품질 관리와 안전 표준을 유지하기 위해 노력하고 있음.
     * 이 기술의 도입을 고려할 때, 항공기 제조사는 품질 관리 시스템을 강화하고, 내부 고발자 보호 프로그램을 개선하며, 정기적인 안전 감사를 수행해야 함. 이를 통해 신뢰성을 높이고 잠재적인 안전 문제를 사전에 방지할 수 있음.

        Hacker News 의견

     * 공개 전에 국외로 도피했어야 했다는 의견

     한 고발자가 자료를 폭로하기 전에 국외로 도피했어야 했다는 주장. 고위 프로파일 사건의 증인으로서 경찰 호위를 받았어야 한다는 의문 제기. 표현의 자유와 대중에 대한 정보 제공을 위해 최고의 대가를 치른 것에 대한 안타까움. 정부가 아닌 고용 회사와 관련된 소송이었기 때문에 표현의 자유에 대한 위협이 없다고 주장하는 사람이 있을지 궁금함. Aaron Swartz와 Steven Donziger의 사례를 떠올리며, Donziger는 감옥에 갔지만 살아남음.
     * 자해 상처에 대한 의심

     ""자해 상처""라는 보도에 대해 의심스러움을 표함. BBC가 총상 부상이라는 사실을 삭제하는 것이 이상하다고 지적하며, 원본 기사 링크 제공.
     * 증언 손실에 대한 우려

     사망 당일 오전에 증언 예정이었음. 토요일 밤이 아닌 아침에 사망함으로써 토요일의 증언이 재판에서 배심원에게 읽힐 수 없게 되었고, 그가 할 예정이었던 증언은 영원히 잃어버림.
     * 개인적인 경험과 공감

     이야기를 그대로 받아들이며, 다른 설명에 대해 논의할 능력이 없음을 인정. 직장 동료와 상사, 전 세계가 올바른 일에 대해 신경 쓰지 않는다는 인식으로 인한 자살 생각을 공유. Barnett 씨가 30년 넘게 근무한 회사가 비행기 제작에 대한 관심을 잃어가는 것을 목격한 것이 스트레스가 되었을 것이라는 공감.
     * 뉴스 노출에 대한 의문

     제출 후 한 시간 만에 96점을 받고도 프런트 페이지에 나오지 않는 이유를 묻는 의문.
     * 자살 표현에 대한 지적

     ""자해 상처로 사망""이라는 표현 대신 ""자살""이라는 단어를 사용해야 한다는 의견.
     * 보잉의 안전 문화에 대한 우려

     이 사건이 보잉의 안전 문화를 더욱 악화시킬 것이라는 예상.
     * 보잉의 변화에 대한 회고

     혁신의 정점에 있던 보잉이 기술적으로나 윤리적으로 얼마나 낮은 수준으로 추락했는지에 대한 놀라움. HR 문제로 보이며, 물건을 만드는 데 능숙한 사람들을 정치에 능숙한 사람들로 대체했다고 지적. 항공기를 공중에 띄우는 데 있어 엔지니어링 우수성을 대체할 수 있는 양보 없음.
     * 사망에 대한 애도와 분노

     사망 소식에 대한 슬픔과 시기적절하지 않은 죽음에 대한 분노 표현.
"
"https://news.hada.io/topic?id=13703","YaCy, P2P 네트워크에 기반한 분산 웹검색 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     YaCy, P2P 네트워크에 기반한 분산 웹검색 엔진

     * 자신만의 검색 엔진을 위한 무료 소프트웨어
     * 검색 엔진 커뮤니티에 참여하거나 자체 검색 포털을 만들 수 있음
     * 세 가지 사용사례중 선택 가능
          + P2P 모드 : 모두를 위한 웹검색, 탈중앙화. 모든 사용자가 평등하며, 공유 색인으로 운영. 중앙 집중식 저장소 및 검색 요청 저장소 없음
          + 개인 검색 포털 : 다른 피어와 독립적인 자신만의 검색엔진. 자체 웹 인덱스를 정의하고 웹크롤링 가능
          + 인트라넷 검색 : 인트라넷 이나 공유 파일시스템에 대한 검색 포털 생성
     * YaCy는 대규모 전문 검색 엔진 운영자의 독점 소프트웨어에 의존하는 대신, 여러 개인 장치에서 운영되는 검색 엔진임
     * 모든 사용자가 동등하며 중앙 집중식이 아니고 검색 요청 저장소가 없으며 공유 인덱스를 가짐
     * 설치는 단 3분 소요. 릴리스를 다운로드하고 패키지를 압축 해제한 후 시작 스크립트를 실행하면 됨
"
"https://news.hada.io/topic?id=13811","Show GN: 초보자를 위한 BigQuery(SQL) 입문( 무료 강의)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: 초보자를 위한 BigQuery(SQL) 입문( 무료 강의)

   안녕하세요! 초보자를 위한 BigQuery(SQL) 입문 강의를 만들었는데, 관심이 있는 분이 계실까 싶어 공유해요

   강의에서 다루는 내용(총 9시간)
     * BigQuery 입문
     * 데이터 분석을 위한 기본 내용(데이터 베이스, 데이터 웨어하우스)
     * SQL 쿼리를 잘 작성하는 흐름. 쿼리 작성 템플릿 및 생산성 도구
     * 오류를 디버깅하는 방법
     * SQL JOIN
     * 가독성을 챙기는 쿼리 스타일
     * 데이터 결과 검증
     * 엄청 어려운 내용은 아니고 SQL 입문에 속할 수 있는 부분입니다. 윈도우 함수 등은 다루지 않고 JOIN까지만 진행해요

   이걸 만들게 된 계기는 다음과 같습니다
     * 많은 분들이 SQL을 잘 다루면 좋겠다
     * 많은 분들이 데이터에 관심을 가지시면 좋겠다
     * 데이터 분석 직무에 계신 분들이 회사에서 SQL 강의를 하는 경우가 많은데, 이 시간을 단축시켜 더 시간을 잘 쓰면 좋겠다
     * 단순히 문법만 알려주는 것이 아닌, 실무에서 알면 좋은 디버깅, 가독성 있는 쿼리 등을 알면 좋겠다
     * 많은 분들에게 도움이 되고자 무료로 강의를 오픈했어요. 데이터 분석을 위한 SQL, BigQuery를 사용하신다면 보셔도 좋을 것 같아요. 피드백도 환영해요.

   오우 변성윤님꺼 강의네요!

   좋은 강의 잘 봤습니다~
   당연 유료겠지 하고 들어갔는데 무료 ㅎㄷㄷ
"
"https://news.hada.io/topic?id=13713","AI, 코드, 인간의 협업을 통한 대용량 JS 파일 리팩토링 경험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AI, 코드, 인간의 협업을 통한 대용량 JS 파일 리팩토링 경험

   (아침에 일어나서 다시 보니 기존 글에 포맷팅 오류가 있고, 또 너무 길게 썼길래 요약본으로 다시 올립니다)

   ChatGPT 초심자들이 ‘복잡한 문제’를 ChatGPT와 풀고자 할 때 흔히 3가지 실수를 범하는 걸 봤음
    1. ChatGPT가 ‘정답을’ 단번에 줄 거라고 기대
    2. ChatGPT가 정답을 ‘단번에’ 줄 거라고 기대
    3. 이 기대가 쉽사리 충족되지 않아 실망하고, ChatGPT를 단순한 문제에만 사용하거나, 수동적으로만 사용하거나, 아예 사용을 중단함

   이들은 결과적으로 AI를 이용한 생산성 향상 기회를 다수 놓치게 됨

   이건 몇 달 전까지 내 모습이기도 했음
     * 앱 초기 로딩 속도가 느려서 번들 크기 분석을 했더니 엄청나게 큰 JS 파일이 나왔음. 18,500줄짜리 이 파일의 대부분을 삭제할 수 있다는 걸 발견
     * 처음에는 눈으로 봐가면서 손으로 삭제했지만 너무 지루하고 자꾸 실수함
     * ChatGPT로 작업 시작. 하다 보니 나도 초심자처럼 ‘정답을 단번에’ 줄 거라고 기대하며 작업하고 있었다는 걸 깨달음
     * 인지 후 ‘3자간 협업 전략’을 씀으로써 엄청난 진전을 빠르게 경험

작업 경과

   나 대신 리팩토링좀 해줘
     * 함수 하나 주고, 원하는 방식 설명하고, 리팩토링해달라고 함 → 실패. 컴파일도 안 됨
     * 코드 구조를 이해해서 변경하는 게 아니라 한 줄씩 내려가면서 지우는 방식이었음

   리팩토링하는 코드를 짜줘
     * 직접 하지 말고, JS로 리팩토링하는 코드 달라고 함 → 실패. 이것 또한 한 줄씩 내려가면서 지우는 방식이었음
     * 생각해보니 이런 대용량 리팩토링을 ChatGPT가 충분히 학습하지 못했을 것

   AST로 리팩토링하는 코드를 짜줘
     * 나는 한 줄 한 줄이 아니라 블록을 지우길 원했음. 즉 코드의 문법적 이해가 필요했으니 AST를 이용하면 좋겠다고 생각
     * ChatGPT에게 ESLint 개발 경험 있는 엔지니어의 역할을 부여하고, AST를 이용해서 짜달라고 했더니 훌륭한 babel 기반 보일러플레이트가 나옴. 커다란 진전
     * babel 경험이 없어서 ChatGPT와 함께 학습하며 로직을 추가해나갔는데 결국 어려움에 봉착. 복잡한 로직 다루기가 어려웠음

   AST로 내가 이렇게 해봤어. 이 부분이 잘 안 되는데 너라면 이거 어떻게 해볼래?
     * 내가 또 정답을 단번에 얻으려고 했다는 걸 깨닫고 전략 수정. traverse를 1번만 할 필요가 없다고 생각하니 술술 풀림.
     * 한번 간단히 돌려보고 결과 보면서 로직을 쌓아나가는 방식으로 빠르게 진행
     * 부분부분 잘 안 되는 곳은 그 특정 목적을 어떻게 구현할지 ChatGPT에게 물어보면서 함
     * 마지막에 규칙으로 만들기 어려운 부분은 눈과 손으로 마무리. 이 때는 이미 코드 양이 엄청 적어져서 가능했음

결과

     * 18,500줄 짜리 코드가 1,335줄이 되고, 메인 청크 번들 크기는 약 7.8% 감소
     * 초기 로딩에 필요한 JS 파일 크기 및 로직이 줄어들면서 초기 로딩 속도 소폭 향상
     * 길고 복잡한 레거시 코드를 AST로 리팩토링해본 경험과 자신감을 얻음
     * 대부분의 복잡한 문제를 AI + 코드 + 인간 이라는 3자간 협업을 통해 효과적으로 해결할 수 있겠다는 자신감을 얻음

   AI와 함께 복잡한 문제를 효과적으로 풀기 위한 멘탈 모델
    1. AI가 잘 하는 일, 코드가 잘 하는 일, 인간이 잘 하는 일이 무엇인지 이해한다.
    2. 내가 풀려는 문제를 분석해서 AI/코드/인간이 잘 하는 영역을 구분한다.
    3. AI가 첫 코드를 잘 만들 수 있게 도와주고, 그 코드를 작게 실행해보면서 AI와 함께 개선하고, 중간중간 + 마지막에 인간이 하기 더 쉬운 건 내가 직접 한다.

   잘읽었습니다

   중복된 글을 삭제하였습니다.
"
"https://news.hada.io/topic?id=13795","미 의회, TikTok 매각을 강제하거나 또는 앱을 금지하는 법안 통과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                미 의회, TikTok 매각을 강제하거나 또는 앱을 금지하는 법안 통과

     * 미국 하원은 중국 소유주로부터 TikTok을 매각하거나 미국 내에서 앱을 금지하는 법안을 초당적 지지로 통과시킴
     * 이 법안은 중국과 미국 간 중요 기술의 통제를 둘러싼 냉전을 심화시킬 가능성이 있음
     * 법안은 미국의 국가 안보, 자유 발언, 소셜 미디어 산업에 영향을 미칠 수 있는 기술의 통제를 둘러싼 베이징과 워싱턴 간 대결을 고조시킴

법안의 내용과 통과 과정

     * 법안은 공화당 지도부가 제한된 토론으로 신속하게 추진하였고, 352 대 65라는 압도적인 표차로 통과됨
     * TikTok은 미국 내 1억 7천만 사용자를 동원하여 법안에 반대하는 캠페인을 벌였으나, 바이든 행정부는 중국 소유의 플랫폼이 미국의 국가 안보에 심각한 위험을 초래한다고 주장함

법안의 미래 전망

     * 법안은 상원에서 통과하기 어려울 것으로 보이며, 상원 다수당 원내대표인 척 슈머는 법안을 표결에 부치겠다는 입장을 밝히지 않음
     * 일부 의원들은 법안에 반대할 것을 다짐하고 있으며, 법안이 상원을 통과하여 법이 되더라도 법적 도전에 직면할 가능성이 있음

GN⁺의 의견

     * TikTok과 같은 소셜 미디어 플랫폼은 사용자 데이터와 관련하여 국가 안보에 영향을 미칠 수 있는 중요한 요소임. 데이터 보호와 개인 정보 보안은 사용자와 국가 모두에게 중요한 이슈임.
     * 이 법안은 미국과 중국 간 기술 전쟁의 새로운 장을 열 수 있으며, 글로벌 기술 산업에 중대한 영향을 미칠 수 있음
     * 기술 기업들은 이러한 정치적 긴장 상황에서 자국의 법률과 규제에 따라야 하며, 이는 국제적인 사업 운영에 복잡성을 추가함
     * 기술의 도입과 규제에 있어서는 항상 균형이 중요하며, 이 법안은 표현의 자유와 국가 안보 사이의 긴장 관계를 반영함

        Hacker News 의견

     * TikTok 금지 주장의 핵심
          + TikTok 금지에 대한 주된 논리는 도덕적이거나 보안상의 우려가 아닌 상호성에 기반해야 함.
          + Facebook, Instagram 등 다른 앱들도 부정적인 영향이 있지만 중국은 외국 앱의 시장 진입을 크게 제한함.
          + 중국이 미국 기업에게 공정한 경쟁을 허용하지 않는다면, 중국 기업에게 미국 시장을 무제한으로 개방할 이유가 없음.
     * TikTok의 오판
          + TikTok은 여론과 선거를 조작할 능력을 가졌다는 비난을 받음.
          + 금지 가능성에 대한 알림을 수백만 사용자에게 보내 정치적 이슈에 영향을 미칠 수 있도록 대응함.
          + 이로 인해 망설이던 많은 대표들이 입장을 바꿔 TikTok 금지에 동참함.
     * 법안의 내용
          + 관련 법안은 여기에서 확인 가능.
          + '커버되는 회사'의 정의가 중요하며, Telegram과 같은 채팅 앱에도 적용될 수 있음.
          + 회사가 '외국 적대 세력'에 의해 통제되어야 하며, 법안은 byte dance를 명시적으로 겨냥함.
     * 외국 적대 세력 소유 소셜 미디어 제한에 반대하는 이유
          + 소셜 미디어 회사가 해당 국가의 실질적 또는 법적 연장선이 될 수 있다고 믿지 않음.
          + 소셜 미디어가 사람들의 신념과 행동에 영향을 미칠 수 있다고 믿지 않음.
          + 위 사항을 인정하지만, 정부가 그러한 목적으로 자국 내에서 운영되는 회사를 규제할 수 없거나 해서는 안 된다고 생각함.
          + 위 사항을 인정하지만, 이것이 심각한 위험을 초래한다고 생각하지 않음.
          + 상품이 마음에 들어서, 또는 이념적인 이유로 법안에 반대함.
          + 법안의 특정 조항이나 문구에 문제가 있어서, 일반적으로 동의하지만 법안에 반대함.
     * 표현의 자유 지지자의 입장
          + 표현의 자유와 제1수정안을 강력히 지지하지만, TikTok 금지 또는 미국 소유자에게 강제하는 이유에 동의함.
          + 중국이 TikTok 데이터에 접근하고 있으며, 그 인기로 인해 미국 시민에게 상당한 위험을 초래함.
          + 법안이 상원을 통과하면 법적 도전이 어떻게 될지, 그리고 그 결과로 어떤 논의가 이루어질지 주목할 만함.
     * 미국 내 사례에 대한 우려
          + TikTok이 사라지는 것에 대해 크게 신경 쓰지 않고, 개인 정보와 보안 위험을 인식하지만, 인기 있는 웹사이트를 금지하는 것에 대해 불편함을 느낌.
          + 미국에서 이와 같은 사례가 있었는지 궁금함.
     * 비미국/비중국 관점에서의 상황
          + TikTok은 미국 외 지역에서 충분한 수익을 내고 있어 미국이 금지해도 판매하지 않을 수 있음.
          + 미국 정부가 시민들에게 강한 모습을 보이려는 움직임으로 보임.
          + 이러한 움직임은 양당 지지를 받을 수 있는데, 이는 드문 일임.
          + 미국이 직면한 '위협' 중 중국 소셜 미디어 앱은 우선순위가 낮음.
          + 미국 소유의 소셜 미디어 플랫폼에서 더 큰 영향을 받고 있지만, 이에 대해 아무도 조치를 취하려 하지 않음.
     * 개인 정보 보호법 제정 제안
          + 임의로 금지하는 대신 개인 정보 보호법을 제정할 것을 제안함.
          + 실제 문제를 해결하는 법을 제정하는 것이 판매 강제보다 더 정당한 이유임.
     * 데이터 판매에 대한 우려 부족
          + 소셜 미디어 회사에 의한 데이터 판매에 대한 우려가 적음.
          + 많은 미국인의 매우 개인적인 정보를 쉽게 구매할 수 있음.
          + 법안은 중국 정부가 데이터를 사용하는 데 드는 비용을 약간 더 높일 뿐, 보안 원칙을 실제로 진전시키지 않음.
"
"https://news.hada.io/topic?id=13767","Yi - 차세대 오픈소스 이중언어 LLM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Yi - 차세대 오픈소스 이중언어 LLM

     * 개발자들에 의해 처음부터 훈련된 차세대 오픈소스 대규모 언어 모델
     * 이중 언어 모델로 목표를 두고 3T 다국어 코퍼스로 훈련되어, 언어 이해, 상식 추론, 독해 능력 등에서 강력한 성능을 보여줌
     * 6B와 34B 사전 훈련된 언어 모델을 기반으로 하며, 챗봇 모델, 200K 긴 컨텍스트 모델, 깊이 업스케일 모델, 비전-언어 모델로 확장
     * Yi-34B-Chat 모델은
          + AlpacaEval 리더보드에서 GPT-4 Turbo에 이어 2위를 차지하며 다른 LLM들을 능가
          + 영어와 중국어 모두에서 기존의 오픈소스 모델들을 능가하며 다양한 벤치마크에서 1위를 차지
     * Llama와 동일한 모델 아키텍처를 채택하고 있지만 Llama의 파생 모델이 아님. Llama의 가중치를 사용하지 않음
     * 다양한 크기로 제공되며, 특정 요구 사항에 맞게 모델을 미세 조정할 수 있음
          + 채팅 모델
               o Yi-34B-Chat, Yi-34B-Chat-4bits, Yi-34B-Chat-8bits
               o Yi-6B-Chat, Yi-6B-Chat-4bits, Yi-6B-Chat-8bits
          + 베이스 모델
               o Yi-34B, Yi-34B-200K
               o Yi-9B
               o Yi-6B, Yi-6B-200K

  Hacker News 의견

     * Yi-34B-Chat 모델은 GPT-4 Turbo에 이어 AlpacaEval 리더보드에서 2위를 차지하며 GPT-4, Mixtral, Claude 등 다른 LLM들을 능가함.
     * Yi-34B 모델은 오픈 소스 모델 중에서 영어와 중국어 벤치마크에서 1위를 차지함. 이는 Hugging Face Open LLM Leaderboard (사전 훈련된 모델)와 C-Eval을 기준으로 함.
     * 저장소의 소스 코드는 Apache 2.0 라이선스를 따르지만, 가중치는 그렇지 않음.
     * Yi 모델은 특정 테스트 프롬프트에서 실패함. 여러 번 시도했지만, Yi는 매번 다른 답 중 하나를 승자로 선택함.
     * ""01.ai""라는 이름은 영화 '매트릭스'에서 인류와 전쟁을 벌이고 인간을 노예로 만든 첫 번째 AI 국가의 이름과 같아서 길조가 아님을 암시함.
     * Yi 모델의 성능은 데이터 엔지니어링 노력으로 인한 데이터 품질에 기인함.
     * Yi 34B Chat 모델은 NYT Connections 벤치마크에서 좋은 성적을 내지 못하고 LMSYS Elo 기반 리더보드에서 22위를 기록함. 중국어에서는 더 나은 성능을 보임.
     * 이러한 모델들의 성능이 향상되는 것을 보며, 2-3년 내에 모바일 우선 LLM이 텍스트 음성 변환과 타이핑 예측을 개선하고 배터리 소모도 크게 줄일 것이라는 희망을 갖게 됨.
     * Yi-9B라는 새로운 모델도 있음.
"
"https://news.hada.io/topic?id=13701","Eloquent JavaScript(자바스크립트 스킬업) 4판 (2024년)"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Eloquent JavaScript(자바스크립트 스킬업) 4판 (2024년)""

     * ""Eloquent JavaScript"" 4판 출간
          + 자바스크립트, 프로그래밍, 디지털의 경이로움에 대한 책
          + 온라인으로 읽거나 종이책(3판)을 구매 가능
          + Marijn Haverbeke가 저술하고, CC BY-NC 로 배포됨
     * 책의 내용
          + (Part 1: Language) 자바스크립트의 언어적 측면을 다룸.
               o 값, 타입, 연산자
               o 프로그램 구조
               o 함수
               o 데이터 구조: 객체와 배열
               o 고차 함수
               o 객체의 비밀스러운 삶
               o 프로젝트: 로봇
               o 버그와 오류
               o 정규 표현식
               o 모듈
               o 비동기 프로그래밍
               o 프로젝트: 프로그래밍 언어 만들기
          + (Part 2: Browser) 브라우저에서의 자바스크립트 사용을 다룸.
               o 자바스크립트와 브라우저
               o 문서 객체 모델
               o 이벤트 처리
               o 프로젝트: 플랫폼 게임
               o 캔버스에 그리기
               o HTTP와 폼
               o 프로젝트: 픽셀 아트 편집기
          + (Part 3: Node) Node.js에 대해 다룸.
               o 프로젝트: 기술 공유 웹사이트

GN⁺의 의견

     * ""Eloquent JavaScript""는 프로그래밍 입문자부터 경험 있는 개발자까지 널리 추천되는 자바스크립트 학습서로, 이 책의 4판이 나온 것은 자바스크립트 커뮤니티에 큰 기여가 될 것임.
     * 책이 크리에이티브 커먼즈 라이선스로 제공되기 때문에, 교육적 목적으로 자유롭게 활용할 수 있어 교육 기관이나 자기 주도 학습자에게 유용함.
     * 다양한 형태의 디지털 자료(PDF, EPUB, MOBI)를 제공함으로써, 다양한 디바이스에서 쉽게 접근하고 학습할 수 있는 점이 장점임.
     * 책에 포함된 실습 프로젝트들은 이론적 지식뿐만 아니라 실제 코딩 능력을 향상시키는 데 도움이 될 것임.
     * 비슷한 오픈소스 학습 자료로는 ""You Don't Know JS"" 시리즈가 있으며, 이 시리즈도 자바스크립트에 대한 깊이 있는 이해를 돕는 데 유용함.

   한국어판으로 2판/3판이 나왔는데 이름이 서로 다릅니다. 최근인 3판 이름을 제목에 같이 적어두었습니다.
     * 2판 - 자바스크립트 개론: 체계적인 프로그래밍 수련법
     * 3판 - 자바스크립트 스킬업 3/e

        Hacker News 의견

     * JavaScript를 깊이 있게 배우고 싶은 사람에게 추천하는 책은 ""Eloquent JavaScript""이며, 다른 수준의 학습자에게는 ""You Don't Know JavaScript"" 시리즈를 추천함. 2015년, 캘리포니아 대학의 원격 학습 프로그램에서 기존 교재를 대체할 책으로 이 책을 추천했고, 강사와 조언자 모두에게 호평을 받았음. 가격도 경쟁 교재들에 비해 저렴했으며, 무료로 읽을 수 있는 점도 장점이었음. 일 년 후 학생들의 평가도 매우 긍정적이었음.
     * 이 책을 사용하여 5년 전에 JavaScript를 배웠고, 매우 훌륭한 자료라고 생각함. ""You Don't Know JavaScript""는 좀 더 고급 내용을 다루며, 초보자에게는 학술적으로 느껴질 수 있지만, ""Eloquent JavaScript""는 실용적이고 접근하기 쉬움.
     * JavaScript 관련 자료가 새로운 버전으로 업데이트되는 것은 좋은 일임. 처음에는 jQuery, 그다음은 React, 이제는 이 책이 새 버전을 맞이함.
     * 책의 저자인 Marijn Haverbeke는 CodeMirror(코드 편집기)와 ProseMirror(텍스트 편집기)의 창시자임.
     * 책의 세 번째 버전을 최근에 마친 것을 보니 반가움. 비동기 프로그래밍 챕터가 상당히 개선되었는데, 이전에는 약간 이해하기 어려운 비유가 사용되어 책의 다른 부분에 비해 약했음. 세 번째 판은 JavaScript와 DOM, 그리고 Node.js에 대해 배울 수 있는 책으로, 경험이 많은 사람들이 JS와 웹으로 전환하는 데 주로 적합하지만, 초보자에게도 적합하다고 주장함.
     * 프로그래밍에 자신이 없었지만, 이 책은 올바른 방향을 제시해주었고, 충분히 추천할 만함.
     * 이 책의 매력은 컴퓨팅의 기초를 설명하는 데 있으며, 독자가 직접 프로젝트를 만들어보도록 하는 흥미로운 부분도 포함되어 있음. JavaScript 프로그래밍을 좋아하지 않지만, 이 책을 읽게 됨.
     * 현재 이 책의 세 번째 판을 읽고 있지만, 책에서 JavaScript에 대한 설명이 충분한지 궁금함. 이 책을 읽은 후에 다른 JavaScript 책을 읽는 것이 좋을지 의견을 공유해달라는 요청이 있음. ""JavaScript: The Definitive Guide""나 ""The Modern JavaScript Tutorial""을 고려 중임.
     * 첫 번째 판부터 이 책을 좋아함. 기본적인 내용조차 명확하게 설명되어 있음. 예를 들어, 변수에 대한 섹션을 보면 변수를 ""상자""로 생각하는 오류를 피함.
     * 네 번째 판의 Eloquent JavaScript가 2024년의 현실에 맞게 조정되어 온라인에 게시되었다는 저자의 웹사이트와 Mastodon에서의 링크를 통해 확인함.
     * 이전 판과 비교한 변경 사항 목록을 어디에서 찾을 수 있는지에 대한 질문이 있음.
"
"https://news.hada.io/topic?id=13702","니콘, 미국의 시네마 카메라 제조사 RED 인수 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     니콘, 미국의 시네마 카메라 제조사 RED 인수 예정

     * 니콘은 RED.com, LLC(RED)의 모든 지분을 인수하는 계약을 체결함으로써 RED를 완전 자회사로 만들 예정
     * RED는 2005년 설립 이후 디지털 시네마 카메라 분야에서 선두적인 역할을 해왔으며, 독자적인 RAW 압축 기술을 포함한 혁신적인 제품을 선보임
     * 니콘과 RED는 고객의 요구를 충족시키고 기대를 뛰어넘는 사용자 경험을 제공하기 위해 각사의 강점을 결합할 계획

RED.com, LLC 개요

     * 회사명: RED.com, LLC
     * 본사 위치: 캘리포니아주 푸스힐 랜치, 미국
     * 대표자: 재러드 랜드, 회장
     * 설립 연도: 2005년
     * 직원 수: 약 220명
     * 사업 내용: 프로페셔널 디지털 시네마 카메라의 설계, 개발, 제조, 판매 및 서비스 제공

GN⁺의 의견

     * 이 인수는 니콘의 이미지 처리 및 광학 기술과 RED의 시네마 카메라 기술이 결합되어, 영화 및 비디오 제작의 한계를 넓힐 수 있는 새로운 제품 개발을 약속함.
     * 니콘의 제품 개발 능력과 RED의 독창적인 이미지 압축 기술 및 색 과학 지식이 시네마 카메라 시장에서 차별화된 제품을 만들어낼 잠재력을 가짐.
     * 영화 산업에서 RED 카메라가 이미 입증된 품질과 혁신으로 인정받고 있기 때문에, 니콘의 기술력과 결합하면 시네마 카메라 시장에서 더욱 강력한 경쟁력을 갖출 것으로 예상됨.
     * 비판적인 시각에서 볼 때, 인수 후에도 RED의 혁신적인 기업 문화와 독창성이 유지될 수 있을지는 미지수임.
     * 이와 유사한 기능을 가진 제품으로는 ARRI나 Blackmagic Design의 시네마 카메라가 있으며, 이들 역시 영화 제작에 널리 사용됨.
     * 기술 도입 시 고려해야 할 사항으로는 기존 사용자 기반의 호환성, 새로운 시스템으로의 전환 비용, 그리고 기존 RED 사용자들의 충성도 유지 등이 있음.

   넷플릭스가 촬영용으로 승인한 카메라 기기들

   넷플릭스 오리지널들이 뭘 봐도 카메라 질감이 비슷한 이유는 위에 카메라 리스트에서 보면 아시겠지만
   이미지 모드 / 코덱 / 컬러스페이스 / RAW Format 까지 어떤 값으로 지정 하라고 다 상세하게 설명한 PDF를 각 카메라용 프로덕션 가이드를 제공합니다.

   해커뉴스 댓글처럼 신기하게 넷플릭스 승인 카메라 목록에 니콘은 전혀 목록에 없거든요.
   ARRI, Canon, Panasonic, RED, Panavision, Sony, Blackmagic 만 있습니다.
   RED가 과대 평가되었다고는 하지만 니콘한테는 훌륭한 딜이라고 생각이 드네요.

        Hacker News 의견

     * 넷플릭스 인증 카메라 목록에 니콘 제품이 없음이 흥미로움. 개인적으로 RED 카메라가 과대평가되었다고 생각하며, 이것이 대부분의 넷플릭스 쇼가 비슷하게 보이고 느껴지는 주된 이유라고 봄. 색 보정이나 렌즈가 아니라 카메라 자체에 문제가 있어서, 30년 전 소니의 HDVS 같은 것이 주는 장면 접근성을 제공하지 못한다고 느낌.
     * 과거 RED가 자신들의 특허를 침해했다고 주장하며 니콘을 상대로 RAW 비디오 압축 알고리즘 사용에 대한 소송을 제기했으나 나중에 취하함이 흥미로움.
     * RED의 초기 이야기를 따라가며 그들의 정신과 사명에 호감을 가졌음. 시간이 지나고 결국 Black Magic Design이 RED가 하고자 했던 것을 달성함. 평균적인 사람에게 고급 영화 기술이나 고품질 이미지를 접근 가능하게 만들겠다는 주장과는 달리, 카메라 본체만 17,500달러인 가격표는 평균적인 사람에 대한 이상한 생각을 가지고 있을 수 있음을 보여줌.
     * 니콘에게는 현명한 움직임이라고 생각함. 소니/캐논에 비해 점차 관련성을 잃어가고 있으며, 훌륭한 비디오 제품을 제공하지 못했기 때문에 이로 인해 경쟁자가 될 수 있음. 스틸 및 시네마 시장이 축소되고 융합됨에 따라, 니콘과 RED가 향후 10년간 독립적으로 건강하게 살아남을 가능성은 낮음.
     * RED는 2007년에 4K를 20,000달러 미만으로 제공하며 혁명을 일으킴. 선글라스를 만드는 사람이 어떻게 이를 성취할지 궁금했음.
     * RED는 전체 산업에 대한 특허 트롤링에 의존하는 형편없는 회사임. 니콘은 사실상 몸값을 지불하도록 강요받았다는 것이 슬픔. RED는 우리의 구식 특허 시스템에 문제가 있는 전형적인 예임.
     * 니콘에게는 좋은 일이라고 생각함. 캐논과 소니 모두 시네마 장비를 가지고 있음. 이것은 경쟁의 장을 평준화할 것임.
     * Blackmagic Design은 RED의 진지한 경쟁자이며, 부분적인 디베이어링을 통해 그들의 RAW 특허를 우회함. 또한 가격이 더 낮음. 캐논은 이 세기에 니콘을 압도함. 이제 니콘 렌즈와 결합할 수 있는 단단한 기술을 가진 전설적인 시네마 브랜드가 중상위 시장 제품으로 나설 수 있음.
     * 이전에 RED가 특허 침해로 니콘을 고소함.
     * 이 소식은 긍정적임. 수십 년간 니콘 사용자로서, 최근 비디오 지원이 뒤처졌지만 카메라와 렌즈는 지금까지 최고임. 이것이 미래 카메라에 더욱 ""전문적인"" 비디오 모드의 개선을 의미하기를 바라며, 아마도 셔터 각도까지 포함될 수 있음을 기대함.
"
"https://news.hada.io/topic?id=13746","DBeaver - 오픈소스 데이터베이스 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      DBeaver - 오픈소스 데이터베이스 클라이언트

     * DBeaver는 개발자, SQL 프로그래머, 데이터베이스 관리자 및 분석가를 위한 멀티 플랫폼 데이터베이스 도구
     * JDBC 드라이버를 지원하는 모든 데이터베이스와 호환되며, 상용 버전에서는 MongoDB, Cassandra 등의 비JDBC 데이터 소스도 지원함
     * 메타데이터 편집기, SQL 편집기, 데이터 편집기, ERD, 데이터 수출/가져오기/이전, SQL 실행 계획 등 다양한 기능을 제공

다운로드

     * 공식 웹사이트 또는 GitHub 릴리스에서 사전 빌드된 바이너리를 다운로드할 수 있으며, 매일 Early Access 버전도 출시됨.

실행 방법

     * 인스톨러를 실행하거나 아카이브를 압축 해제한 후 dbeaver를 실행하면 됨.
     * DBeaver는 실행을 위해 Java가 필요하며, 모든 DBeaver 배포판에는 Open JDK 17이 포함되어 있음.

기여: 비버를 도와주세요!

     * DBeaver는 GitHub에서 30,000개 이상의 별을 받았으며 계속 성장 중임.
     * 새로운 소스 코드 기여자를 적극적으로 찾고 있으며, ""좋은 첫 번째 이슈"" 및 ""도움 요청"" 라벨이 붙은 티켓이 있음.
     * 상용 버전을 구매하면 NoSQL 데이터베이스 지원, 추가 확장 기능 및 공식 온라인 지원을 받을 수 있음.

CloudBeaver 소개

     * DBeaver는 데스크톱 클라이언트이며, 웹 기반 데이터베이스 관리 도구를 찾고 있다면 CloudBeaver를 확인할 것을 권장함.
     * CloudBeaver는 DBeaver 플랫폼을 기반으로 하여 모든 데이터베이스와 DBeaver의 대부분 기능을 지원함.

GN⁺의 의견

     * DBeaver는 데이터베이스 관리와 관련된 다양한 작업을 지원하는 강력한 도구로, 특히 다양한 데이터베이스를 하나의 인터페이스에서 관리할 수 있다는 점에서 매우 유용함.
     * 오픈소스 커뮤니티에서 활발한 기여와 지원을 받고 있어, 사용자들이 직접 문제 해결에 참여하거나 새로운 기능을 제안할 수 있는 기회가 많음.
     * 데이터베이스 관리 시스템(DBMS)을 처음 접하는 사용자에게는 DBeaver의 다양한 기능이 다소 복잡하게 느껴질 수 있으므로, 초보자를 위한 가이드나 튜토리얼이 더욱 풍부해진다면 더 좋을 것임.
     * 데이터베이스 관리 도구를 선택할 때는 기능뿐만 아니라 사용자 인터페이스(UI)의 직관성도 중요한 요소인데, DBeaver는 이 두 가지를 모두 충족시키는 도구임.
     * 비슷한 기능을 제공하는 다른 오픈소스 프로젝트로는 phpMyAdmin, Adminer, HeidiSQL 등이 있으나, DBeaver는 이들보다 더 폭넓은 데이터베이스 지원과 고급 기능을 제공함.

   애초에 디비버가 이클립스 기반이라 태생부터 못생긴 얼굴을 엘레강스하게 고치는 건 어렵습니다. 구조가 그래요... 인텔리제이 플랫폼 껍데기는 오픈소스인데 그 기반으로 간다면 조금은 개선 여지가 있겠죠.

   데이터그립이랑 같이 쓰고 있는데 디비버가 못생긴거 빠고 다 좋은거같아요

   dbeaver 는 디비툴로는 거진 최고급이죠.
   주피터 같은 데이터 분석툴하고 비교하기에는 용도나 의도 자체가 달라서..
   그리고 스키마 차이비교 기능 있어요.
   비교해서 html 테이블로 좌악 뽑아줍니다.

        Hacker News 의견

     * DBeaver의 장점 중 하나는 Eclipse 기반으로 구현되어 있어서 거의 모든 Eclipse 플러그인을 설치할 수 있으며, 이를 통해 Vi 모드 편집, Git 도구, PlantUML 등을 추가할 수 있어 다른 도구들보다 강력하고 유연함.
     * DBeaver는 일반 Eclipse 내부에 플러그인으로 설치할 수 있어, 데이터베이스 창과 ER 다이어그램을 코드 옆에 둘 수 있어 전용 도구와 차별화됨.
     * DBeaver는 PostgreSQL용 Babelfish와 같은 덜 인기 있는 DB와도 잘 작동하며, SQL Server 클라이언트 라이브러리를 통한 연결을 지원함. 대부분의 GUI 클라이언트 도구는 ""진짜"" SQL Server를 기대하지만, DBeaver는 JDBC API나 DB 중립적인 INFORMATION_SCHEMA 뷰를 사용하여 더 나은 호환성을 제공함.
     * DBeaver의 UI가 못생기고 네이티브 위젯을 사용하지 않는다는 점이 불편함. 이것이 TablePlus에 돈을 지불한 유일한 이유일 수도 있음. 좋은 TUI 인터페이스도 괜찮을 것 같음.
     * DBeaver는 일상적으로 다양한 시스템에서 adhoc 쿼리, 데이터 추출 및 로딩을 해야 하는 사람들에게 매우 유용함. 오픈소스 버전에 기부하는 방법이 명확하지 않으나, 상업 버전을 구매하거나 구독하는 것 외에 기부할 수 있는 방법이 있다면 공유 바람.
     * DBeaver의 개발자들이 만든 클라우드 기반 데이터베이스 클라이언트인 CloudBeaver는 pgAdmin보다 훨씬 낫다고 평가함. CloudBeaver를 회사에서 설정하여 터널 생성, 비밀번호 공유 등 없이 데이터베이스에 쉽게 접근할 수 있게 함. pgAdmin은 공유 설치로 사용하기에 버그가 많고 불안정함.
     * DBeaver에 PGAdmin의 스키마 차이 비교 기능과 유사한 기능이 있는지 궁금함. 이 기능이 있다면 DBeaver로 전환을 고려할 수 있음.
     * DBeaver는 pgAdmin보다 일상적인 작업에 더 편리하지만, 외관은 아름답지 않음. 오늘 왜 인기가 있는지 궁금함.
     * DBeaver의 좋은 기능 중 하나는 지리공간 열 값을 내장된 OpenStreetMap 패널에 표시할 수 있다는 점임.
     * DBeaver는 DDL 브라우징, 테이블 목록, 스키마 예시, 데이터 타입 확인에 유용하며, 몇 줄의 SQL을 작성하는 것보다 클릭 몇 번으로 빠르게 테스트나 수정이 가능함. 그러나 복잡한 쿼리와 데이터 분석에는 Jupyter 노트북을 선호함. Jupyter 노트북/ipywidgets에 적합한 DDL 브라우저가 있는지 궁금함.
     * DBeaver는 .parquet 파일과 연결하여 Windows에서 더블 클릭으로 연결할 수 있게 해주면 좋을 것임.
"
"https://news.hada.io/topic?id=13807","성장을 위한 피드백 문화 경험담","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           성장을 위한 피드백 문화 경험담

  성장을 위한 피드백 문화 경험담

     * 과거 조직에서는 주로 연말 특정 시기에만 평가를 진행했음
          + 특정 시기에만 진행되는 평가는 적시의 피드백이 아닐 때가 많았음
          + 1년 동안의 일에 대한 피드백을 연말에만 몰아서 받으면, 피드백을 받는 시점에는 이미 상황이 바뀌었거나 개선의 기회가 지나가버린 경우가 많았음
          + 간혹 나와 같이 일을 해보지 않은 사람으로부터 공감되지 않는 피드백을 받았던 경험도 존재
          + 구체적인 행동 지침과 성장 방향을 제시하지 않는 ""더 열심히 일해야 한다"" 등의 모호한 피드백은 전문적인 성장에 영향을 줄 수 없었음
     * 현재 회사에서는 조직 내 피드백 문화가 활발함
          + 개인이 달성하고자 하는 방향에 맞춰서 구체적이며 정기적으로 피드백을 받을 수 있음
          + 성과와 성장을 위한 피드백을 솔직하게 주고받을 수 있음
          + 피드백에 대한 높은 심리적 안전감이 형성되어 있음
          + 리더나 동료가 나를 매니징하거나 일방적으로 불만을 이야기한다는 느낌이 없음
          + 동료들 또한 피드백에 대한 수용도가 높고, 시간이 지나면서 변화와 개선으로 이어지는 경험을 받음
     * ""피드백을 대하는 태도""가 매우 중요하다고 느껴짐
          + 피드백을 수용함으로서 어떤 방식으로 일 하는 것이 성장과 성과를 내는데 도움이 되는지 알게됨
          + 결국 팀의 성장과 성과로 이어짐
          + 자유롭게 의견을 나누고, 서로의 성장을 지원하는 문화가 중요함
     * 개인이 성장해야 팀과 조직이 더 크게 성장할 수 있다
          + 전체 조직 차원에서의 성장 속도를 높이기 위해서는 포용력 있는 환경을 만드는 것이 중요
          + 상대방이 하는 말과 행동을 진심으로 이해하고 노력하는 포용의 분위기를 문화적으로 정착시키는것이 필요
"
"https://news.hada.io/topic?id=13752","액티비전 QA 직원들, 미국 내 최대 비디오 게임 노동조합 결성을 위한 투표 진행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             액티비전 QA 직원들, 미국 내 최대 비디오 게임 노동조합 결성을 위한 투표 진행

액티비전 QA 노동자들, 미국 최대 비디오 게임 노동조합 결성 투표

     * 액티비전의 품질 보증(QA) 직원 약 600명이 마이크로소프트 산하에서 노동조합을 결성하기로 투표함.
     * 이들은 커뮤니케이션 워커스 오브 아메리카(CWA)와 함께 액티비전 품질 보증 유나이티드(AQAU)를 구성함.
     * AQAU는 마이크로소프트에 인수된 이후 액티비전에서 처음으로 결성된 노동조합이며, 미국 내 최대 비디오 게임 노동조합임.

마이크로소프트의 중립적 접근

     * 마이크로소프트는 2022년 CWA와 중립성 협약을 체결하여 노동조합 결성에 대해 중립적인 태도를 취하고, 조합 결성 논의를 방해하지 않으며, 조합 가입을 위한 간소화된 절차를 제공하기로 약속함.
     * 이는 레이븐 소프트웨어와 블리자드 올버니가 액티비전 블리자드로부터 노조 파괴 노력에 직면했던 것과 대조적임.

노동조합 결성의 배경과 기대

     * QA 직원들은 자신들의 업무가 전문성과 기술을 요구하고 회사의 성공에 필수적임에도 불구하고, 업계 내에서 가장 낮은 보호와 임금을 받는다고 인식함.
     * AQAU는 마이크로소프트와 새로운 계약을 협상할 것으로 기대하며, 이는 더 나은 임금과 혜택, 승진 기회 확대, 명확한 경력 개발 경로 등을 포함함.
     * 현재 Zenimax QA 노동자들은 하청과 인공지능과 같은 주제에 대한 합의를 포함하여 회사와 첫 계약을 협상 중임.

GN⁺의 의견

     * 이번 액티비전 QA 노동자들의 노동조합 결성은 게임 업계 내에서 노동자 권리에 대한 중요한 변화를 상징하며, 다른 기업들에게도 긍정적인 영향을 미칠 수 있는 선례를 제시함.
     * 마이크로소프트의 중립성 협약은 기술 대기업에서는 전례 없는 사건으로, 노동자들이 자신들의 권리를 주장하는 데 있어 중요한 진전을 의미함.
     * 비디오 게임 업계에서 QA 직원들의 역할과 중요성이 점점 더 인식되고 있으며, 이번 조합 결성은 그들의 업무 환경과 처우 개선에 긍정적인 영향을 미칠 것으로 기대됨.
     * 그러나 노동조합의 결성이 기업의 재정적 부담을 증가시켜 장기적으로는 일자리 감소로 이어질 수도 있으므로, 이에 대한 균형 잡힌 접근이 필요함.
     * 이와 유사한 노동조합 운동이 다른 기술 기업에서도 확산될 가능성이 있으며, 이는 업계 전반의 노동 환경 개선으로 이어질 수 있음.

        Hacker News 의견

     * 새로운 노조에 행운을 빔: 게임 업계에서 오랜 기간 일한 경험을 바탕으로, 게임 QA는 진입 장벽이 낮고 가장 낮은 임금을 받는 직업 중 하나임을 알고 있음. QA 종사자들이 열심히 일하지만, 쉽게 대체되거나 아웃소싱될 수 있는 위치에 있음. 이러한 이유로 노조를 결성하려는 움직임이 있으며, 이제 그 결과를 지켜볼 것임.
     * 시스템 관리자들도 노조 결성을 고려해야 함: QA 직원들이 노조를 결성한 것처럼, 시스템 관리자들도 LOPSA를 노조로 전환하는 것을 고려해야 함.
     * 노조 결성이 현명한 결정: 경영진이 이에 반대하는 것은 노조가 협상에서 유리한 위치를 차지할 수 있기 때문임.
     * 소스 코드 유출 제안: 논의할 수 있는 자료가 필요하다면 소스 코드를 유출하는 것이 좋을 것임.

   배경 지식: 게임 QA(Quality Assurance)는 게임의 품질을 보증하기 위해 버그를 찾고 테스트하는 업무를 수행하는 직업군이며, 이 분야의 종사자들이 노조를 결성하려는 움직임이 있음을 알 수 있음.
"
"https://news.hada.io/topic?id=13812","생성형 인공지능 서비스 TOP 100 [2024년 1분기]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    생성형 인공지능 서비스 TOP 100 [2024년 1분기]

     * 안데르센 호로비츠에서 발표한 생성형 인공지능 TOP 100 입니다.
     * 국내 서비스인 라이너와 콴다의 약진이 눈에 띱니다.
     * MAU 기준으로 측정 되었고 1위와 2,3,4,5위 차이가 크며, 5위와 그 이하 차이가 큽니다.
"
"https://news.hada.io/topic?id=13737","OpenGFW: 중국의 'Great Firewall' 오픈 소스 구현 버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               OpenGFW: 중국의 'Great Firewall' 오픈 소스 구현 버전

     * OpenGFW는 사용자가 직접 만들 수 있는 중국의 대형 방화벽(Great Firewall of China) 리눅스용 오픈 소스
     * ""이제 권력을 가진 사람들만 재미를 누릴 필요는 없으며, 검열을 누구나 가능하게 해서 사람들에게 권력을 부여할 때임""
     * 집안의 라우터에 전문가처럼 필터링을 시작하고, 빅 브라더 역할을 해볼 수 있음
     * 주의 : 이 프로젝트는 아직 개발 초기 단계에 있으며, 사용자의 책임 하에 사용해야 함

기능

     * 전체 IP/TCP 재조립, 다양한 프로토콜 분석기(HTTP, TLS, QUIC, DNS, SSH, SOCKS4/5, WireGuard 등)
     * Shadowsocks와 같은 ""완전히 암호화된 트래픽"" 감지 기능
     * Trojan-killer를 기반으로 한 Trojan(프록시 프로토콜) 감지 기능
     * [작업 중] 기계 학습 기반 트래픽 분류
     * 전체 IPv4 및 IPv6 지원
     * 흐름 기반 멀티코어 부하 분산
     * 연결 오프로딩
     * expr 기반의 강력한 규칙 엔진
     * 핫-리로드 가능한 규칙(SIGHUP 신호로 리로드)
     * 유연한 분석기 및 수정기 프레임워크
     * 확장 가능한 IO 구현(NFQueue만 지원)
     * [작업 중] 웹 UI

사용 사례

     * 광고 차단
     * 부모의 자녀 통제
     * 악성 소프트웨어 보호
     * VPN/프록시 서비스의 남용 방지
     * 트래픽 분석(로그 전용 모드)
     * 독재자의 야망을 충족시키는 걸 도와줌(Help you fulfill your dictatorial ambitions)

사용법

  빌드

  go build

  실행

  export OPENGFW_LOG_LEVEL=debug
  ./OpenGFW -c config.yaml rules.yaml

  OpenWrt

     * OpenGFW는 OpenWrt 23.05에서 작동하는 것으로 테스트되었으며, 다른 버전에서도 작동할 것으로 예상되지만 검증되지 않음
     * 의존성 설치:
       opkg install kmod-nft-queue kmod-nf-conntrack-netlink

  예제 설정

     * 로컬 geoip/geosite 데이터베이스 파일을 로드하는 경로 설정
     * 설정하지 않으면 자동으로 https://github.com/Loyalsoldier/v2ray-rules-dat에서 다운로드됨

  지원되는 동작

     * allow: 연결 허용, 추가 처리 없음
     * block: 연결 차단, 추가 처리 없음
     * drop: UDP의 경우, 규칙을 트리거한 패킷을 드롭하고, 같은 흐름의 미래 패킷 처리 계속. TCP의 경우 block과 동일
     * modify: UDP의 경우, 규칙을 트리거한 패킷을 주어진 수정자를 사용하여 수정하고, 같은 흐름의 미래 패킷 처리 계속. TCP의 경우 allow와 동일

   대한민국 정부(이)가 이 기술을 좋아합니다.
   대한민국 정부(이)즐겨찾기에 추가했습니다.
   대한민국 정부(이)가 새로운 SI 프로젝트가 생성되었습니다.
   대한민국 정부(이)가 go 개발자를 해당 프로젝트(으)로 개발을 제시하였습니다.
   대한민국 정부(이)가 새 업체(을)를 모집하였습니다.
   컨소시엄이 모집되었습니다.
   보도방(이)가 새 구인을 게시하였습니다.
   go 개발자의 월 급여는 300만원 이며, 고용 기간은 3개월 입니다.

   ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ

   ㅋㅋㅋㅋㅋ재밌네요

  Hacker News 의견

     * 트위터에서 이 프로젝트를 조롱하는 사람들을 보았지만, 실제로 필요한 사람들도 있음. 제품이 홈 서버로 의심스러운 데이터를 전송하는 것을 차단하려고 시도했지만, Wireshark 앞에 앉아 모든 DoH 서버를 찾아내는 데 실패했기 때문. 이 프로젝트 덕분에 DoH를 사용하더라도 TLS 화이트리스트에 도메인을 추가하지 않고도 차단할 수 있는 날이 올 것으로 기대됨.
     * ""완전히 암호화된 트래픽""이라는 용어는 맥락이 정확해야만 올바르게 이해될 수 있는 혼란스러운 용어임. ""High Entropy"" (HighE)와 같은 용어가 ""완전히 암호화된"" 것보다 더 구체적이라고 생각하는 개인적인 제안.
     * 이 프로젝트가 War Thunder처럼 되는 것이 재미있을 것임. 중국 공무원이 실제 GFW가 작동하는 방식과 다르다는 이유로 앙심을 품고 풀 리퀘스트를 하는 상황이 발생할 수도 있음.
     * 기능 목록의 ""당신의 독재자 야망을 충족시켜줍니다""라는 항목이 하루를 즐겁게 만들어 줌
     * 이런 제품에 대한 진정한 사용 사례가 있음. 예를 들어, 학교에서는 최소한의 방해를 위해 이런 제품이 필요함. 그러나 맬웨어에 대한 걱정이 있음. 이 프로젝트 뒤에 있는 팀을 누가 검증할 수 있을까?
     * 어떤 것이 어떻게 작동하는지에 대한 모델을 가지는 것은 완화 방법을 탐색하는 데 매우 도움이 됨.
     * 이 프로젝트는 이란과 북한과 같은 정권에 대한 오픈소스 미사일과 같음. 이를 존경하지만, 일부 정부는 이를 남용하여 자유를 억압할 수 있음.
     * 중국 본토 외부의 사람들이 중국인들이 온라인에서 경험하는 것을 체험할 수 있도록 매우 적합함.
     * 이제 이란 정부는 이 기술을 사용하여 이란인들이 개방된 인터넷에 접근하는 것을 차단하기 위해 중국에 지불하는 비용을 중단할 수 있음. 오픈소스가 개방을 목표로 하면서도 완전히 반대의 결과를 가져올 수 있다는 것이 재미있음.
     * 이 프로젝트가 다른 독재 정부들이 구현 장벽을 낮추는 데 도움이 될 수 있다는 점에 대해 아무도 걱정하지 않는 것에 충격을 받음.
"
"https://news.hada.io/topic?id=13806","Show GN: 개발 관련 유튜브 영상 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 개발 관련 유튜브 영상 모음

   개발 관련 유튜브 영상을 모음
   https://mp4.okdevtv.com/

   코드는 https://github.com/kenu/youtb 에서 볼 수 있음
"
"https://news.hada.io/topic?id=13797","Bluesky 의 적층식 모더레이션 방식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Bluesky 의 적층식 모더레이션 방식

Bluesky의 Stackable 모더레이션 접근법

     * Bluesky는 사용자와 커뮤니티가 온라인 소셜 공간을 통제할 수 있도록 만들어진 오픈 소셜 네트워크로, 사용자가 자신의 경험을 직접 형성할 수 있음
       -이제 협업 모더레이션 도구인 Ozone을 오픈소스로 공개함
     * 개인과 팀이 협력하여 네트워크 전반에 걸쳐 콘텐츠를 검토하고 라벨을 붙일 수 있음
     * 이번 주에는 독립적인 모더레이션 서비스를 실행할 수 있는 기능을 공개할 예정임

사용자 선택과 합리적인 기본값

     * Bluesky는 사용자 경험을 중시하며, 추가적인 사용자 정의 옵션을 제공
     * Bluesky 가입 시 기본적으로 Bluesky의 내장 모더레이션 서비스에 가입됨
     * Bluesky의 모더레이션 서비스는 팀의 24시간 모니터링과 자동화된 모더레이션 시스템을 결합함
     * 사용자는 Bluesky가 요구하는 것 이상의 추가 모더레이션 서비스를 생성하고 구독할 수 있음

개방성과 사용자 선택

     * Bluesky는 단순하면서도 강력한 사용자 경험과 사용자 선택을 강조하는 모더레이션 서비스를 디자인함.
     * 개방성을 통해 디지털 공간의 거버넌스에 대한 신뢰 증진을 목표로 함.
     * Bluesky는 5백만 명 이상의 사용자를 위한 커스터마이징 가능한 소셜 미디어 경험을 제공함.

개발자와 모더레이터를 위한 시스템

     * 모더레이터는 많은 인프라를 운영하거나 자체 클라이언트 앱을 구축하지 않고도 모더레이션 계층을 제공할 수 있음.
     * Ozone은 특정 게시물을 라벨링할 수 있는 오픈소스 모더레이션 라벨링 시스템임.
     * 개발자는 Ozone을 사용하거나 API를 통해 직접 콘텐츠에 라벨을 적용할 수 있음.

Bluesky의 모더레이션 서비스와 Ozone 도구

     * Bluesky의 모더레이션 서비스는 기본적으로 모든 사용자에게 제공되며, 독립적인 모더레이션 서비스를 추가로 구독할 수 있음.
     * Ozone 도구는 GitHub에서 오픈소스로 제공되며, AT Protocol에서 독립적인 모더레이터를 위한 준비된 도구로 사용됨.
     * Bluesky는 Mastodon과 달리 서버에 묶이지 않은 모더레이션을 제공함.

GN⁺의 의견

     * Bluesky의 모더레이션 접근법은 사용자에게 더 많은 통제권을 부여하고, 다양한 커뮤니티의 요구에 맞춰진 모더레이션을 가능하게 함.
     * 오픈소스 모더레이션 도구인 Ozone의 공개는 투명성을 높이고, 커뮤니티 주도의 안전한 소셜 미디어 환경 조성에 기여할 수 있음.
     * 이러한 접근법은 기존의 중앙 집중식 모더레이션에 대한 대안을 제시하며, 사용자와 개발자 모두에게 유연성을 제공함.
     * 그러나 사용자가 모더레이션 서비스를 선택하고 관리하는 데 필요한 기술적 지식이나 시간이 부족할 수 있으므로, 사용자 친화적인 인터페이스와 지원이 중요함.
     * 비슷한 개념으로 Mastodon이나 다른 분산형 소셜 네트워크가 있지만, Bluesky는 AT Protocol을 기반으로 하여 더 넓은 범위의 호환성과 협업을 지향함.

        Hacker News 의견

     * 개발팀 소속으로 질문에 답변할 준비가 되어 있음. 간단한 기술 개요 제공:
          + ""라벨""이라고 불리는 게시물 메타데이터를 발행하는 시스템.
          + 애플리케이션 클라이언트가 요청 헤더에서 사용할 라벨링 서비스를 지정.
          + 라벨은 응답에 첨부되어 클라이언트가 해석할 수 있음.
          + 이 시스템은 개방형으로, 클라이언트는 사용할 라벨러를 선택할 수 있음.
          + 사용자는 커뮤니티 라벨러를 추가할 수 있으며, 대부분의 모더레이션은 이 레이어에서 이루어짐.
          + 불법 콘텐츠와 네트워크 남용에 대한 ""인프라 제거""는 서비스 레이어(즉, 릴레이)에서 실행됨.
          + 앱 내에서는 추가 필터를 구독할 수 있는 특별 계정으로 보임.
          + 라벨은 중립적이거나 부정적일 수 있으며, 사용자 배지 기능도 할 수 있음.
          + 시간이 지남에 따라 시스템을 확장하여 커뮤니티 노트나 라벨 기반 답글 게이트와 같은 기능을 지원할 예정.
     * 다양한 문화에서의 모더레이션에 대한 의문 제기:
          + 사이트 전체 모더레이션에 의해 가정되는 ""기본"" 문화는 무엇인가? (미국?)
          + 블루스카이가 지원하는 모더레이션 팀은 모든 언어에 대해 책임을 지는가, 아니면 영어 게시물만을 대상으로 하는가?
          + ""공식 지원""이 없는 문화에서 온 사람들에게는 어떤 의미가 있는가?
     * 모더레이션 기능에 대한 인센티브 문제 제기:
          + 사용자가 모더레이션 기능을 일시적으로 해제하여 필터링되지 않은 뷰를 볼 수 있어야 함.
          + 그렇지 않으면 모더레이션은 이념적 맥락에서 검열로 변질될 수 있음.
          + 모더레이션을 해제할 수 있는 기능은 사용자가 모더레이션이 지원적인지 검열적인지 평가할 수 있게 함.
          + 그룹 내에서도 모더레이션 규칙이 강력하면 의견 관리를 위한 경쟁이 발생할 수 있음.
          + 반면 모더레이션이 합의에 의해 약화되면 의견을 통제하려는 경쟁이 줄어듦.
          + 그룹은 멤버십을 통해 스스로를 관리하는 것이 더 낫고, 약한 모더레이션은 그룹 멤버십의 가치를 높임.
     * 원치 않는 게시물을 올리는 사람이나 그룹을 차단할 수 있음.
          + 반대로 원하는 사람이나 그룹의 게시물을 식별하고 타임라인에 표시할 수 있음.
     * 마스토돈의 서버 시스템과 유사하지만 ""서버""를 쉽게 전환할 수 있는 아이디어.
     * ""스파이더 실드"" 예시와 같은 모더레이션 인접 기능에 대한 흥미로운 아이디어.
     * 블루스카이 블로그의 RSS 피드에 대한 질문.
     * 맞춤형 에코 챔버가 분열된 사회에 큰 이득을 가져다줄 것이라는 의견.
     * ""Trust & Safety"" 팀 발표 후 블루스카이 앱 삭제한 사용자의 경험:
          + ""Trust and Safety""가 검열의 동의어로 여겨짐.
          + 검열은 자유에 대한 큰 위험이며, 의견을 제한하는 모든 것은 자유에 대한 위협으로 간주됨.
          + 블루스카이가 다른 길을 선택할 것이라는 희망이 있었으나, 이제는 그렇지 않다고 생각함.
     * 프로그래밍 가능한 차단 목록을 공식 기능으로 만든 것에 대한 긍정적인 반응.
          + 이 기능이 드라마로부터 구원해 줄 것이라고 생각하지는 않지만, 인기 있는 제3자 차단 목록에 오르는 것에 대한 사람들의 반응이 흥미로울 것임.
"
"https://news.hada.io/topic?id=13732","Wallstreetlocal – 미국 최대 투자자들의 투자 현황 조회 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Wallstreetlocal – 미국 최대 투자자들의 투자 현황 조회 오픈소스

미국 최대 투자자들의 투자 내역을 볼 수 있는 웹사이트

     * 개발자가 호스팅하는 사이트를 이용하거나 셀프호스팅 하여 운영 가능
     * 17살 학생이 1년 반동안 만든 것을 오픈소스로 공개
     * 미국 증권거래위원회(SEC)는 미국의 모든 회사 기록을 보유
          + 자산 규모가 1억 달러를 초과하는 회사는 13F 양식을 제출해야 함
          + 13F 양식은 분기별로 제출되며, 투자자의 보유 주식을 공개하여 투자 활동의 투명성 제공.
     * wallstreetlocal을 통해 SEC의 13F Filer들이 더 접근하기 쉽고 개방적으로 됨
          + 대규모 데이터베이스: SEC에 등록된 85만 개 이상의 회사 보유(데이터 다운로드 가능 505MB)
          + 최신 데이터: 개별 제출자의 보유 주식을 수집하고 정리하여 최신 데이터 제공
          + 역사적 데이터: 탐색기에서 개별 제출 내역과 보유 주식을 볼 수 있음

기능

     * SEC의 13F Filer들을 조회
     * 최신 주식 정보로 Filer들을 업데이트
     * 접근 가능한 형식으로 Filer의 주식 보기
     * JSON 또는 CSV 형식으로 데이터 다운로드
     * 제출자의 역사적 제출 내역을 보고 비교

시작하기

     * wallstreetlocal.com에서 wallstreetlocal을 보거나, 다음 지침에 따라 자체 호스팅.
         1. 의존성 설치: npm install
         2. 배포: 개발용은 npm run dev, 프로덕션 빌드는 npm run build && npm run start
     * 백엔드는 이미 content.wallstreetlocal.com으로 구성되어 있지만, 자체 호스팅도 가능.
     * wallstreetlocal의 개발 스택에 대한 자세한 정보는 각 문서 참조.
          + 백엔드 작업에는 FastAPI 사용.
          + 프론트엔드에는 NextJS 사용.
          + 다양한 마이크로서비스에는 Docker 사용.
          + 데이터베이스에는 MongoDB 사용.
          + 검색 데이터베이스에는 Meilisearch 사용.
          + 리버스 프록시에는 NGINX Proxy Manager 사용.
          + 텔레메트리에는 Grafana 사용, Prometheus, Tempo, Loki, OpenTelemetry와 함께.

기여하기

     * 프로젝트에 기여할 수 있다고 생각되면 이슈 또는 풀 리퀘스트 생성.
     * 프로젝트는 단독으로 유지되므로 버그와 안티 패턴이 발생할 수 있음, 발견 시 지적.
     * 모든 기여는 높이 평가됨.

라이선스 및 커뮤니티 행동 규칙

     * MIT 라이선스.
     * 커뮤니티 행동 규칙 존재.

GN⁺의 의견

     * wallstreetlocal은 투자자들에게 SEC의 13F 제출자들의 투자 내역을 쉽게 접근할 수 있게 해주는 플랫폼으로, 투자 결정에 중요한 정보를 제공할 수 있음.
     * 이 웹사이트는 투명성과 시장의 공정성을 증진시키는 데 기여할 수 있으며, 투자자들에게 유용한 자원이 될 수 있음.
     * 오픈소스 프로젝트로서, 개발자들이 기여하고 개선할 수 있는 기회를 제공하며, 이는 소프트웨어의 질을 향상시킬 수 있음.
     * 비판적인 시각에서 볼 때, 단독 유지 관리로 인해 발생할 수 있는 버그와 안티 패턴은 사용자 경험에 영향을 줄 수 있으며, 지속적인 커뮤니티 지원과 기여가 필요함.
     * 유사한 기능을 제공하는 다른 플랫폼이나 프로젝트로는 Bloomberg Terminal이나 Yahoo Finance가 있으나, wallstreetlocal은 무료로 접근 가능한 오픈소스 대안으로서 독특한 가치를 제공함.

   보통 WhaleWisdom 가 기본 기능만으로도 뛰어나서 그거 무료 버전 정도로도 충분하긴 할겁니다. 그래도 국내에서 쓸만한 13F 파일링만 정리해서 공개하는 분들도 있던데 뭔가 도움이 될수도 있긴 하겠네요.

   일단 17세가 이런걸 만들어서 공개할 수 있는 저 환경이 더 부럽긴 합니다 ㅎㅎ

        Hacker News 의견

     * 프로젝트 이름을 보고 주변의 소유권을 보여주는 지도 기반 앱을 기대했으나, 실제로는 그런 데이터가 지역적으로 존재하지 않는다고 생각함.
          + 프로젝트를 통해 반쯤 가려진 데이터셋을 공개하는 것이 사람들을 잘 정보화된 상태로 유지하는 데 도움이 됨
     * 프로젝트에 대해 매우 흥미롭다고 평가하며, 금융 산업을 주제로 삼은 것을 좋아함.
          + '회사'라는 단어의 사용에 대해 지적하며, 미국의 사기업은 SEC에 등록하거나 보고할 필요가 없다고 설명
          + 투자 자문가들은 SEC에 등록되어 있고 관리 자산이 1억 달러 이상일 때만 13F 보고서를 제출해야 한다고 함.
          + 이러한 사실을 프로젝트 웹사이트에서 고려하고 있으며, '머니 매니저'라는 용어를 올바르게 사용했다고 언급
     * 프로젝트에 대해 인상적이라고 평가하면서, 보너스나 주식 분할 후 가격 추적이 불가능한 점을 지적
          + 구글 주식 가격을 예로 들며, 주식 분할을 고려한 실제 지불 가격 조정이 필요하다고 조언
     * 프로젝트에 대해 잘했다고 칭찬하며, 실제로 작업을 해보는 것이 능력 향상에 유일한 방법이라고 조언
          + 컴퓨터를 좋아하고 스타트업에서 일하고 싶다면 그것을 실현할 수 있는 모든 것을 갖추고 있다고 격려
     * 13F 보고서를 분석하는 서비스에 경쟁이 많다고 언급하며, WhaleWisdom 같은 서비스가 기본적인 기능에서 강력하다고 함.
          + 13F 보고서를 성능, 변동성, 공격성 등으로 분류하고, 최고 성능의 보유 종목을 혼합한 모델 포트폴리오를 구축하는 등의 아이디어를 제안함.
     * 프로젝트에 대해 배운 것이 있다고 감사를 표하며, 오픈 소스로 많은 작업을 한 것에 대해 인상적이라고 평가
     * 비슷한 프로젝트를 진행 중이라며, 10-K 연간 보고서의 특정 항목을 검색하는 작업에 대해 언급
     * 프로젝트에 대해 축하를 전하며, 협업 필터링을 구현하여 비슷한 펀드를 클러스터링하는 아이디어를 제시
          + 이를 통해 산업계의 많은 플레이어들이 높은 가격을 지불할 수 있는 추천 시스템을 만들 수 있다고 조언
     * 대형 회사 임원들의 일일 거래를 볼 수 있는 웹사이트가 있는지 궁금해하며, 이전에 북마크했던 사이트를 언급
     * npm 패키지로 만드는 것이 사용자 범위를 줄인다고 지적하며, 13F 양식을 CSV로 변환하는 간단한 라이브러리를 만들 것을 제안함.
"
"https://news.hada.io/topic?id=13787","DevOps 팀에 코드 매핑이 필요한 5가지 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      DevOps 팀에 코드 매핑이 필요한 5가지 이유

     * 코드 매핑:
          + 코드 구조와 흐름을 시각적으로 표현
          + 모든 경로와 교차로, 막다른 골목을 표시한 로드맵처럼 코드의 전체 환경 배치
     * 코드 맵:
          + 코드를 높은 수준에서 볼 수 있음
          + 코드의 여러 부분 간 의존성, 연결, 상호작용을 이해하도록 지원
          + 코드를 높은 수준에서 보는 건 코드 작동 방식을 이해하고, 잠재적 이슈나 병목 현상을 확인할 때 중요
     * DevOps와 애자일 방법론이 출현하면서 코드 매핑의 중요성이 커짐
     * DevOps 팀에 코드 매핑이 필요한 이유:
          + 협업 강화
          + 트러블슈팅과 디버깅 프로세스 효율화
          + 온보딩 프로세스 간소화
          + 코드 품질과 유지 관리성 향상
          + 릴리즈와 배포 관리 효율화
"
"https://news.hada.io/topic?id=13761","퍼프(Perf)만으로는 부족함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            퍼프(Perf)만으로는 부족함

데이터베이스의 성능 집착 문화

     * 데이터베이스 업계는 성능 향상에 집중하고 있으나, 실제 사용자 경험은 종종 다른 요소들에 의해 영향을 받음.
     * 사용자가 데이터를 처리하는 데 있어 실제로 중요한 것은 쿼리 최적화보다는 데이터의 형식이나 SQL로 질문을 구성하는 능력일 수 있음.
     * 데이터베이스의 성능은 중요하지만, 사용의 용이성, 생태계, 업데이트 속도, 워크플로우와의 통합성 등 다른 요소들을 기반으로 데이터베이스를 선택하는 것이 더 나을 수 있음.

벤치마크 전쟁의 종결

     * 2019년 GigaOm이 클라우드 데이터 웨어하우스를 비교하는 벤치마크를 발표했으나, 실제 시장 결과와는 다른 양상을 보임.
     * 벤치마크 결과가 사용자 경험과 일치하지 않는 경우, 벤치마크가 잘못되었거나, 잘못된 것을 테스트했거나, 성능이 그렇게 중요하지 않을 수 있음을 시사함.

빠름의 의미

     * 클라우드 데이터베이스 분야에서는 사용자가 '실행' 버튼을 클릭하고 결과가 준비되는 시간에 초점을 맞추는 경향이 있음.
     * 실제로 사용자에게 영향을 미치는 것은 작업을 완료하는 데 걸리는 시간이며, 이는 데이터베이스 서버 시간과 동일하지 않음.

성능은 주관적임

     * 성능은 사용자의 관점에서 측정되어야 하며, UX 문제로 단일 숫자로 설명될 수 없음.
     * 성능의 주관성은 데이터베이스가 어떻게 사용되는지에 따라 어느 것이 더 빠른지 결정됨을 의미함.

변화의 속도

     * DuckDB는 빠른 속도로 개선되고 있으며, 이는 현재의 벤치마크를 무의미하게 만듦.
     * 데이터베이스를 선택할 때 현재의 성능뿐만 아니라 미래의 성능과 기능 변화도 중요한 변수임.

마법의 콩은 없다

     * 모든 데이터베이스가 활발히 유지되고 있다면, 성능은 시간이 지남에 따라 수렴할 것임.
     * 중요한 성능 차이는 시간이 지나면서 지속되지 않을 가능성이 높음.

문제는 의자와 키보드 사이, 키보드와 데이터베이스 사이에 있음

     * 사용자에게 중요한 성능의 척도는 질문을 가지고 답을 얻는 데 걸리는 시간임.
     * 데이터베이스가 쿼리를 실행하는 시간이 아니라 아이디어에서 답변으로 가는 속도가 중요한 기능임.

신맛 나는 포도에 대하여

     * DuckDB는 현재 ClickBench와 h20.ai 벤치마크에서 상위권에 있으며, TPC-H와 TPC-DS에서도 나쁘지 않은 성능을 보임.
     * 데이터베이스가 빠르다고 가정하기 전에 실제 작업 부하에서 시도해보는 것이 중요함.

결론

     * 가장 성공적인 데이터베이스 회사들은 경쟁사보다 더 빠른 성능으로 성공한 것이 아님.
     * 성능을 주요 판매 포인트로 삼은 데이터베이스는 시장에서 성공하지 못함.
     * 데이터베이스를 선택할 때는 원시 속도 이외의 다른 요소들을 기반으로 결정하는 것이 더 낫다고 조언함.

GN⁺의 의견

     * 이 기사는 데이터베이스의 성능에만 초점을 맞추는 것이 아니라, 사용자 경험과 작업 흐름을 최적화하는 것이 중요하다는 점을 강조함. 이는 초급 소프트웨어 엔지니어에게도 데이터베이스를 선택할 때 단순한 성능 지표보다 사용자 중심의 접근 방식을 고려해야 한다는 중요한 교훈을 제공함.
     * 데이터베이스의 성능은 시간이 지남에 따라 수렴하는 경향이 있으며, 이는 기술의 발전이 모든 플랫폼에 걸쳐 확산되기 때문임. 이는 기술 선택 시 단기적인 성능보다는 장기적인 지원과 개선 가능성을 고려해야 함을 시사함.
     * DuckDB 같은 오픈소스 프로젝트는 빠른 개선 속도와 커뮤니티의 지원을 바탕으로 빠르게 발전할 수 있음. 이는 새로운 기술을 도입할 때 커뮤니티의 활성도와 프로젝트의 발전 속도를 고려해야 함을 의미함.
     * 데이터베이스 선택 시 성능 벤치마크 결과에만 의존하지 말고, 실제 작업 부하에서의 성능을 테스트해보는 것이 중요함. 이는 실제 사용 사례에 더 적합한 데이터베이스를 선택하는 데 도움이 될 수 있음.
     * 데이터베이스 기술의 선택은 단순히 기술적인 측면뿐만 아니라 비즈니스 요구, 유지 관리 용이성, 데이터 처리의 효율성 등 다양한 요소를 고려해야 함을 강조함.

        Hacker News 의견

     *

     고객의 불만이 많았던 몇 년 후, JDBC 드라이버의 버그가 성능을 저하시키고 있음을 깨달았음. 많은 엔지니어의 시간을 쿼리 속도를 빠르게 하는 데 투자했지만, 대부분의 사용자가 사용하는 커넥터가 절약한 시간보다 훨씬 더 많은 지연을 추가했음. 더욱이, 이 사실을 전혀 인지하지 못했음. 구글 내부에서 아무도 JDBC 드라이버를 사용하지 않았기 때문에 사용자가 경험하는 쿼리 시간을 볼 수 없었고, 이를 다른 사람의 문제로 여겼음.
          + 이 댓글은 구글이 고객의 불만에 대해 ""완전히 눈이 멀었다""는 점과 자체 제품을 사용하지 않는다는 점에서 실망감을 표현함. JDBC 부분 이야기가 특히 인상적임.
     * 구글은 내부적으로 잘 작동하는 데이터베이스를 구축했지만, 외부 세계를 위한 어댑터 레이어를 하청으로 만들었고, 이는 제대로 작동하지 않아 외부 세계는 불량한 데이터베이스를 사용하게 됨. 구글이 사용하는 정교한 핵심은 불완전한 어댑터로 둘러싸여 있어, 전체적으로 불필요하게 엉망인 결과물이 됨. 내부적으로는 이를 인지하지 못하고, 외부 사람들은 이를 파악하기 어려움.
          + 이 댓글은 구글의 오픈 소스 전략에 대해 매우 적절하다고 평가함.
     * 블로그가 ""성능은 주관적""이라고 주장하는 것이 이상하다고 생각함. 성능을 단순히 측정하는 것으로 충분하지 않지만, 주어진 유일한 예시에서는 성능이 중요하고 객관적임. 단지 잘못된 것을 측정했을 뿐임.
          + 이 댓글은 성능 측정에 대한 블로그의 주장에 대해 의문을 제기함.
     * 이것은 회사 조직의 문제로 들림. 고객이 클라우드를 사용하게 하고 가치를 제공하는 것이 최종 목표라면, 고객이 중요하게 생각하는 것과 다른 메트릭을 가지고 있어서는 안 됨. 구글 내부에는 고객의 문제를 적극적으로 듣고 그것을 엔지니어에게 전달하여 무엇을 개선해야 할지 알려주는 사람이 있어야 함.
          + 이 댓글은 구글이 고객의 요구사항을 이해하고 이를 개선하기 위한 조직 구조의 필요성을 강조함.
     * 시애틀에 있는 집에서 샌프란시스코 사무실까지 문 앞에서 문 앞까지 약 4.5시간이 걸림.
          + 이 댓글은 창업자들이 더 이상 빠른 속도로 움직이지 않는다는 점을 지적하며, 이는 연방준비제도이사회가 이자율을 올렸기 때문일 수 있다고 농담조로 언급함.
     * 성능은 이차적이라고 여기에서 말하는 것처럼 생각하지 않음. 성능이 충분히 좋은지 확인한 후에 다른 모든 것을 평가해야 함. 저자 스스로 ""DuckDB는 빠르다""고 언급했음. 그렇지 않다면 성능 경쟁을 해야 할 것임.
          + 이 댓글은 성능이 이차적이라는 주장에 동의하지 않으며, 성능이 충분히 좋은지 확인하는 것이 우선이라고 주장함.
     * 성능은 ""상대적""이지 ""주관적""이 아님. 그 의미는 수행하는 작업과 관련이 있음.
          + 이 댓글은 성능의 상대성에 대해 설명하며, 사용자 인터페이스 설계와 관련된 성능의 느낌을 구분함.
     * 첫 번째 인기 웹 앱은 모든 상태를 파이썬 dict에 저장하고 몇 분마다 디스크에 덤프함. 매우 빠른 API였지만, 몽고DB로 옮겼을 때 성능이 회복되지 않았음. 그럼에도 불구하고 오늘날 웹사이트를 만들 때 ""pickledb""를 선택하지 않음.
          + 이 댓글은 초기 웹 앱의 성능과 데이터베이스 전환 후의 성능 저하 경험을 공유함.
     * 자체 데이터베이스 시스템을 구축하고 다른 인기 있는 데이터베이스(Postgres, Sqlite, MySQL, SQL Server)와의 성능을 벤치마킹하고자 함.
          + 이 댓글은 사용자가 '실행 버튼'을 누르고 화면에 결과가 표시되는 시간까지 측정하여, 다양한 쿼리에 걸쳐 자신의 데이터베이스가 더 빠를 때까지 만족하지 않았다고 설명함.
     * ""물론, 이 규칙에는 예외가 있는데, 그것은 아키텍처 차이를 극복하기 어렵다는 것임. 공유 없는(shared nothing) 데이터베이스는 공유 디스크(shared disk)에 비해 불리하며, Redshift가 주로 공유 디스크 아키텍처로 전환하는 데 많은 년이 걸렸음. 객체 저장소에 메타데이터를 지속하는 레이크하우스는 빠른 업데이트에 어려움을 겪을 것임; 이는 모델에 내재되어 있음.""
          + 이 댓글은 데이터베이스 아키텍처 차이와 관련된 문제점을 지적하며, 이 주제에 대한 좋은 문헌을 찾고 있음을 언급함.
"
"https://news.hada.io/topic?id=13696","보브_카세트_리와인더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              보브_카세트_리와인더

Bob Rewinder: 세제 DRM 해킹으로 98% 비용 절감하기

     * Bob Rewinder를 구매하거나 Discord 커뮤니티에 참여하고 싶다면 여기를 방문하면 됨.
     * Bob Rewinder는 Bob 식기세척기의 세제 카트리지 DRM을 해킹하여 새로 구매하는 비용의 1/60로 리필할 수 있게 해주는 도구임.

소개

     * 2021년 1월, Techmoan이 리뷰한 Daan Tech의 Bob 식기세척기를 보고 구매함.
     * Bob은 세련되고 컴팩트한 식기세척기로, 수도관 연결 없이 손으로 물탱크를 채울 수 있으며, 적은 공간을 차지함.
     * 설치와 사용이 간편하다는 점에 감명받아 주문했고, 2개월 후에 도착한 제품에 대해 매우 만족함.

Bob 카세트

     * Bob 식기세척기의 주요 기능 중 하나는 모든 것이 포함된 세제 카트리지인 Bob 카세트임.
     * Pop 카세트는 세제와 린스제를 포함하고 있으며, 30회 세척에 사용 가능함.
     * Rock'n'roll 카세트는 세척제와 물때 제거제를 포함하고 있으며, Bob을 깊게 청소하고 유지하는 데 사용되며, 1회 세척에 사용 가능함.

장점

     * Daan Tech는 Bob 카세트의 여러 장점을 언급함:
          + 사용이 간편하고 매번 세제를 추가할 필요가 없으며, 덜 지저분함.
          + 필요한 양만큼 정확하게 분배되어 낭비가 줄어듦.
          + 2단계 분배 방식으로 세제는 먼저, 린스제는 나중에 추가됨.
          + 재활용 플라스틱으로 만들어지며, 사용 후 다시 메일로 보내 재사용할 수 있음.

비싼 비용

     * 이러한 편리함에도 불구하고 비용이 많이 들며, Daan Tech는 이를 통해 수익을 창출함.
     * 4팩의 가격은 £29.90이며, 배송비와 VAT를 포함하면 90회 세척에 £43($60)이 됨.
     * 일 년에 매일 세척한다고 가정하면, Bob 카세트에만 £174($242)가 들게 됨.
     * 인터넷 연결 기능은 자동으로 세제를 재주문하는 기능을 위해 존재함.

대안

     * Daan Tech는 기계를 완전히 Bob 카세트에만 의존하도록 만들지는 않았으며, 비어 있을 때에는 수동으로 세제를 추가할 수 있음.
     * 그러나 이를 권장하지 않으며, 수동으로 세제를 추가하는 것은 번거롭고, 복용량 조절이 어렵다고 주장함.

자세히 살펴보기

     * 카세트에는 작은 회로 기판이 있으며, 각각의 면에 4개의 접점이 있음.
     * 이 회로 기판에는 I2C EEPROM이 포함되어 있으며, 이는 소량의 구성 데이터를 저장하는 데 적합함.

Bob the Dumper

     * EEPROM 내부의 데이터를 읽기 위해 USB-A 여성 소켓에 맞는 장치를 만들어 데이터를 덤프함.
     * 덤프된 데이터를 분석하여 세척 횟수를 나타내는 바이트 값을 찾아냄.

깨끗한 탈출

     * Bob 카세트에 들어있는 세제와 비슷한 성분을 가진 상업용 식기세척기 세제를 인터넷에서 찾아냄.
     * 영국의 규정에 따라 모든 화학 제품에는 구성과 농도를 나타내는 '안전 데이터 시트'가 포함되어 있어, 이를 통해 비슷한 제품을 찾을 수 있음.

비용 대결

     * 상업용 세제를 사용함으로써 세척당 비용을 0.80p(1.1 US cents)로 줄일 수 있으며, 이는 Bob 카세트의 48p(67c)와 비교하여 60배 이상 저렴함.

테스트

     * 상업용 세제와 린스제를 구입하여 카세트에 리필함.
     * 리필된 카세트를 사용한 결과, 세척된 접시는 이전과 마찬가지로 깨끗함.

Bob Rewinder 보드

     * 카세트를 자주 리필할 예정이므로, 간단하게 카세트를 갱신할 수 있는 Bob Rewinder 회로 기판을 디자인함.

생각과 결론

     * 이 프로젝트를 통해 Bob 카세트를 리필하고 재사용하는 가능성을 탐구함.
     * 이 과정에서 칩을 식별하고, 데이터를 덤프하여 카운터를 리셋하는 방법을 알아냄.
     * Bob의 세제 사용량과 농도를 계산하고, 대체 세제 옵션을 조사함.
     * 비용 분석을 수행하고, 상업용 세제로 테스트를 진행함.
     * 카세트를 쉽게 갱신할 수 있는 회로 기판을 설계함.

나도 하나 원해!

     * 추가로 제작한 Bob Rewinder 보드를 구매할 수 있으며, 사용 방법은 여기를 클릭하면 됨.

기타 프로젝트

     * 다른 재미있는 프로젝트들도 확인할 수 있음.

질문이나 댓글이 있나요?

     * 문의사항이 있으면 이슈를 열거나 Discord 서버에서 질문하거나, Discord dekuNukem#6998으로 DM을 보내거나, dekuNukem@gmail.com으로 이메일을 보내면 됨.

GN⁺의 의견

     * 이 기사는 소비자가 기술적인 지식을 활용하여 제품의 제한을 극복하고 비용을 절감하는 방법을 보여줌. 이는 사용자가 자신의 기기를 어떻게 사용할지 더 많은 통제권을 가질 수 있음을 의미함.
     * DRM(디지털 권리 관리)이 소비자의 제품 사용에 불편을 주고 추가 비용을 발생시키는 경우가 많으며, 이 기사는 그러한 DRM을 우회하는 방법을 제시함으로써 기술에 대한 더 깊은 이해와 자율성을 갖춘 소비자들에게 도움이 될 수 있음.
     * 그러나 이러한 해킹이 제품 보증을 무효화하거나 제조사의 지원을 받지 못하게 할 수 있으므로, 사용자는 이러한 행동의 잠재적인 위험을 인지하고 있어야 함.
     * 비슷한 기능을 제공하는 다른 제품이나 프로젝트로는 리필 가능한 카트리지를 사용하는 다른 브랜드의 식기세척기가 있을 수 있음. 이러한 제품들은 사용자가 자신의 세제를 선택하여 사용할 수 있게 해주며, 장기적으로 비용을 절감할 수 있음.
     * 이 기술을 도입할 때 고려해야 할 사항으로는 제품의 보증 상태, 제조사의 지원 가능성, 그리고 장기적인 비용 대비 효과를 들 수 있음. 이 기술을 선택함으로써 얻는 이점은 비용 절감과 사용자의 자율성이지만, 단점으로는 제품의 공식 지원을 받지 못할 수 있다는 점임.

        Hacker News 의견

     * 카세트를 방어하는 사람들을 보는 것은 이상하다. 회사는 친환경을 중요하게 여긴다고 주장하지만, 비싼 플라스틱 용기를 제조하고 판매하며 배송한다. 기계는 특정 세제가 필요하지 않으며, 일반 세제를 사용해도 된다. 이는 카세트가 불필요하며, 회사의 별도 수입원일 뿐이라는 것을 의미한다. 이것은 프린터 잉크 방식과 같다. 회사는 이 플라스틱 쓰레기를 전혀 생산하지 않아도 되었으며, 작은 양의 액체나 분말 세제를 사용하도록 할 수 있었다. 심지어 프린터 잉크 접근 방식을 계속하고 싶다면, 왁스로 라인이 깔린 종이 용기에 분말 세제를 사용할 수도 있었다. 카세트를 재활용하거나 재사용하는 것과 상관없이, 카세트는 존재할 필요가 없었다. 이것은 더 많은 플라스틱이 더 많은 공간을 차지하고 더 많은 오염 배달 트럭을 필요로 한다는 것을
       의미한다. 결국 이 회사는 식기세척기와 세제 구독 서비스를 판매하고 있다. 이것은 가장 나쁜 것은 아니지만, 여전히 회사는 더 많은 쓰레기를 판매하기 위해 자신을 녹색으로 포장하고 있다.
     * ""친환경 컴팩트 식기세척기""라고 판매하는 것은 매우 아이러니하다. 사용하기 위해 일회용 플라스틱 덩어리가 필요하기 때문이다. 절약되는 물의 양은 생성되는 플라스틱 쓰레기의 양을 상쇄하지 못할 것이다. 그들의 웹사이트에서 ""Daan Tech에서는 항상 더 지속 가능하고 공정한 세계가 가능하다고 믿어왔다.""라고 말하는데, 이런 것을 쓰고 나서 더 많은 플라스틱 쓰레기를 생성하는 더 나쁜 세탁기를 판매하는 것은 매우 냉소적이다.
     * 유튜브 채널에 대한 찬사. 그가 언급한 채널은 현재 세대 하드웨어 리뷰와 전자제품에 대한 향수를 불러일으키는 리뷰의 완벽한 조화를 이룬다. 그의 채널 스타일은 재미있고, 사실이 많으며, 기술적으로 너무 복잡하지 않고, 재미있다.
     * Bob 카세트와 과도하게 비싼 DRM이 활성화된 잉크젯 카트리지 사이에는 많은 유사점이 있다고 생각한다. 20년 이상 전, 이것은 프린터 DRM을 해킹하는 첫 번째 공개적으로 문서화된 시도였다.
     * 이 주제가 해커뉴스에 게시될 때마다 댓글은 ""DRM 나쁨!""으로 직행하지만, Bob 식기세척기는 실제로 독점 카세트를 사용할 필요가 없다.
     * 나는 액체 식기세척제에 대해 들어본 적이 없지만, 배송과 VAT가 추가되면 90회 세척에 43파운드(60달러)로, 한 번 세척에 48펜스(67센트)가 된다. 이것은 내 나라에서 ""프리미엄"" 식기세척제 태블릿의 비용과 대략 일치한다.
     * Bob 카세트 Rewinder: Detergent DRM 해킹 (2021), 404개의 댓글
     * 그 프로젝트는 멋지다. 나는 그의 다른 저장소를 확인하기로 결정했고, 그는 많은 멋진 것들을 했다. 나는 duckypad와 이것을 정말 좋아한다.
     * 나는 ""DRM이 없다""고 주장하려고 했는데, 그것은 단순히 세제가 얼마나 남았는지 추적하기 위해 사용되는 간단한 플래시 메모리 칩이며, 전혀 암호화되지 않았다. 하지만, ""xor 0x50""의 이상한 이유는 반순환 규칙을 적용하기 위한 ""기술적 보호 조치""를 갖추기 위한 것일 수도 있다.
     * 나는 카세트 피치를 이해하지 못한다. 어차피 식기세척기를 채우고 있다. 태블릿은 식기세척기에서 하나 더 추가하는 것이고, 그것을 하지 않아도 되는 것은 1% 미만의 개선이다.
"
"https://news.hada.io/topic?id=13689","설치된 크롬 확장 프로그램의 소유주 변경을 감지하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     설치된 크롬 확장 프로그램의 소유주 변경을 감지하세요

새로운 관리 하에

     * 크롬 웹 스토어에 나열된 개발자 정보가 변경되었는지 확인하는 기능을 가진 확장 프로그램.
     * 설치된 확장 프로그램의 소유권 변경을 간헐적으로 확인.
     * 변경 사항이 있을 경우, 확장 프로그램 아이콘에 빨간색 배지가 표시되어 사용자에게 알림.
     * Matt Frisbie가 만듦.
     * Hacker News 토론에서 논의됨.

왜 필요한가?

     * 확장 프로그램 개발자들은 자신의 확장 프로그램을 사고자 하는 제안을 지속적으로 받음.
     * 대부분의 경우, 이러한 구매자들은 기존 사용자들을 속이려 함.
     * 확장 프로그램이 변경되었다는 사실을 사용자들이 알지 못하고, 이제 손상될 수 있음.
     * 새로운 관리 하에는 소유권 변경에 대한 통지를 사용자에게 제공하여, 사용 중인 소프트웨어에 대한 정보에 입각한 결정을 내릴 수 있게 함.

설치 방법

     * 여기에서 설치: (크롬 웹 스토어 승인 대기 중)
     * 또는 사전 빌드된 릴리스를 다운로드하고 .zip 파일을 풀어 dist 디렉토리를 크롬에 로드.

소스에서 빌드하기

     * 새로운 관리 하에는 Parcel, React, Typescript, TailwindCSS를 사용.
     * yarn install로 의존성 설치.
     * yarn start로 로컬에서 실행.
     * yarn build로 릴리스 빌드.

왜 외부 서버가 필요한가?

     * 브라우저는 확장 마켓플레이스 도메인을 수정하는 특별한 규칙을 가짐.
     * 예를 들어, chromewebstore.google.com에 대한 declarative_net_request 규칙을 설정할 수 없음.
     * 따라서, 이 확장 프로그램은 개발자 정보 확인을 ExBoost API 서버에 위임함.

GN⁺의 의견

     * 이 확장 프로그램은 사용자들이 자신의 개인 정보와 데이터를 보호할 수 있도록 도와주는 중요한 도구임. 확장 프로그램의 소유권이 변경되었을 때 사용자들에게 알림을 주어, 소유권 변경으로 인한 잠재적인 보안 위험에 대응할 수 있게 함.
     * 확장 프로그램의 소유권 변경은 사용자들에게 투명하게 공개되어야 하며, 이러한 변화를 감지하는 도구는 사용자들의 신뢰를 유지하는 데 중요한 역할을 함.
     * 이 기술이나 유사한 기능을 제공하는 다른 오픈소스 프로젝트로는 EFF의 Privacy Badger나 DuckDuckGo의 Privacy Essentials 등이 있음. 이들은 사용자의 온라인 프라이버시를 보호하는 데 초점을 맞추고 있음.
     * 이 확장 프로그램을 도입할 때 고려해야 할 사항으로는 확장 프로그램이 실제로 소유권 변경을 정확하게 감지하는지, 그리고 이러한 감지가 사용자의 브라우징 경험에 부정적인 영향을 미치지 않는지 등이 있음.
     * 소유권 변경이 사용자에게 실질적인 보안 위험을 초래할 수 있으므로, 이러한 확장 프로그램은 사용자들에게 매우 유익하고 필요한 도구임. 그러나, 확장 프로그램이 모든 소유권 변경을 완벽하게 감지할 수 있을지, 그리고 감지된 변경이 항상 부정적인 결과를 의미하는 것은 아니므로, 사용자는 여전히 주의를 기울여야 함.

        Hacker News 의견

     * 몇 달 전, 저자는 YouTube 광고를 빠르게 하는 무료 오픈 소스 확장 프로그램을 만들어 해커뉴스에 공유했고, 이는 홈페이지에 올랐다. 한 주 후, 한 사용자가 이를 복사하여 자신의 버전을 Reddit에 홍보했고, 이는 바이럴이 되어 30만 명 이상의 사용자를 확보했다. 저자는 왜 무료 오픈 소스 확장 프로그램을 복사했는지 의문을 제기하며, 해당 사용자가 나중에 이를 여러 사이트에서 5자리 수의 금액에 판매하려 했다고 언급했다. 또한, 크롬 스토어에 등록된 개발자가 변경된 것을 발견했다고 한다.
          + 확장 프로그램의 ID는 개발자가 앱 스토어에 첫 업로드할 때 제공하는 개인 키에서 파생되며, 이후 업로드에 다른 key.pem이 포함되면 ID가 변경된다. ID가 변경되었다면 소유자가 바뀌었을 가능성이 있지만, 원래 소유자가 새 소유자에게 개인 키를 넘겼을 수도 있다. 구글은 업로드마다 개인 키를 요구하지 않으므로 새 소유자가 해당 키에 접근하지 않고도 변경 사항을 업로드할 수 있다.
          + 한 사용자는 확장 프로그램 생태계가 매우 흥미롭다고 말하며, 이 분야를 위한 도구를 개발 중이라고 언급했다. 특정 확장 프로그램을 대상으로 GitHub 저장소를 만들어 업데이트를 추적하고, 각 업데이트를 저장소에 변경 사항으로 푸시한 후, 코드에 대한 정적 분석기를 실행하고 런타임 오염 분석을 실험하고자 한다.
          + 한 인기 있는 오픈 소스 크롬 확장 프로그램의 소유자는 수년간 받은 기부금이 한 달 카페 비용도 충당하지 못한다고 말했다. 그러나 악의적인 목적으로 확장 프로그램을 사려는 제안을 여러 번 받았고, 이를 모두 거절했다. 원래 개발자의 도덕성만이 보안과 개인 정보 보호의 유일한 프레임워크가 되어서는 안 된다고 주장했다.
          + 다른 댓글러가 언급했듯이, 이 확장 프로그램은 유용하지만 원래 브라우저에 내장된 기능이어야 한다고 한다. 소유권 변경을 자동으로 알려주는지, 아니면 수동으로 '확인' 명령을 실행해야 하는지에 대한 질문이 있었다. 확장 프로그램의 소유권 변경을 사용자 승인이 필요하도록 정책을 변경해야 한다는 의견도 있었다.
          + 파이어폭스 확장 프로그램의 경우, 모질라는 '추천 확장 프로그램 프로그램'을 운영하고 있으며, 이는 보안 전문가에 의한 엄격한 기술 검토를 거친다. 그러나 모든 업데이트가 출시 전에 검토되는지는 명확하지 않다. 만약 모든 업데이트가 검토된다면, 인기 있는 확장 프로그램에 대한 이 문제를 해결할 수 있을 것이다.
          + 확장 프로그램이 악의적인 목적으로 손바뀜이 일어날 경우, 종종 구글 개발자 계정의 자격 증명을 판매하기 때문에 이러한 경우를 감지하지 못할 수 있다.
          + 한 사용자는 오래전에 adblock을 설치했고, 새 컴퓨터에 다시 설치하면서 권한을 확인했다. 광고를 차단하기 위해 사용자가 보는 것을 볼 수 있어야 하지만, 그것이 얼마나 많은 권한을 요구하는지에 대해 생각해본 적이 없었다고 말했다. 이제는 pihole과 확장 프로그램을 전혀 사용하지 않는다고 한다.
          + 악의적인 확장 프로그램 구매자들이 개발자 이름을 그대로 유지하여 이 문제를 회피할 수 있는지, 크롬 확장 프로그램 스토어에서 개발자 이름을 엄격하게 관리하는지에 대한 의문이 제기되었다.
          + 확장 프로그램의 목표에는 동의하지만, 모든 확장 프로그램 목록을 확장 프로그램 중심의 광고 네트워크에 보내는 것은 의심스럽다는 의견이 있었다. 이는 브라우저가 확장 프로그램 마켓플레이스 도메인을 수정하는 데 특별한 규칙을 가지고 있기 때문에 외부 서버가 필요하다고 설명했다.
          + 모든 브라우저에 내장되어야 할 기능이며, 소유자가 변경되면 업데이트가 자동으로 비활성화되어야 한다는 의견이 있었다.
"
"https://news.hada.io/topic?id=13753","Databricks, Anyscale, Microsoft 에서 얻은 AI 인사이트들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Databricks, Anyscale, Microsoft 에서 얻은 AI 인사이트들

     * 주요 회사의 경영진 의견을 정리

AI가 소프트웨어를 먹어치울 것이다 - Ali Ghodsi, Databricks CEO

     * 마크 엔드리슨의 ""소프트웨어가 세상을 먹어 치우고 있다"" 에서 나아가 ""AI가 소프트웨어를 먹어 치울 것""
          + AI는 앞으로 단순한 부가 기능이 아니라 모든 데이터 플랫폼의 기본이 될 것임
          + ""데이터가 있는 곳이라면 어디든 인텔리전스가 들어올 것이며, 이는 모든 직업, 모든 산업, 모든 조직에서 일어날 것""
          + 그 결과 소프트웨어는 정적이고 하드코딩된 도구에서 자율적인 의사 결정 엔진으로 전환될 것
     * AI 데이터베이스를 'Lakehouse'라고 부르며, 데이터가 있는 곳이라면 그 옆에는 반드시 머신러닝이 자리 잡을 것이라고 강조
     * 점점 더 많은 인텔리전스와 자동화가 엔터프라이즈 소프트웨어의 기반이 되는 데이터 아키텍처에 번들로 제공될 것

다른 스타트업과 함께 시작하라 - Ali Ghodsi, Databricks CEO

     * 알리 고드시는 창업자들에게 혁신가와 초기 채택자(즉, 다른 스타트업)를 먼저 타겟팅할 것을 조언
     * 초기 시장으로 대기업을 타겟팅하는 것보다 다른 스타트업과 시작하는 것이 제품 채택 가능성을 높이고 초기 사용자 피드백을 수집하는 강력한 방법임

LLM을 지식저장소가 아닌 추론엔진으로 취급하라 - Matei Zaharia, Databricks CTO

     * 데이터브릭스의 공동 창업자이자 CTO인 마테이 자하리아는 LLM을 데이터베이스처럼 취급하는 것이 아니라 추론, 언어 해석, 맥락 이해에 뛰어난 점에 초점을 맞춰야 한다고 조언함
     * LLM의 언어 분석 및 생성 기능을 활용하면서 사실적이고 최신의 정보는 신뢰할 수 있는 외부 소스를 통해 검색하고 도구 호출을 통해 활용해야 함

사람들이 문제에 대해 생각하는 방식 바꿔라 - Naveen Rao, Databricks Generative AI VP

     * 데이터브릭스의 생성 AI 부사장인 나빈 라오는 신흥 기술 분야에서 회사를 창업하는 도전에 대한 통찰력을 제공함
     * 신흥 기술 분야에서 새로운 카테고리를 만드는 것은 창업자에게 독특한 기회를 제공하며, 진정한 혁신은 새로운 제품을 만드는 것뿐만 아니라 문제가 이해되는 방식을 재구성하는 것임.

AGI는 몇 년이 아닌 수십 년 후가 될 것 - Naveen Rao, Databricks Generative AI VP

     * 나빈 라오는 AGI에 대한 종말론적 두려움에 대한 해독제를 제공하며, AGI의 임박한 도래에 대한 주장에 대해 깊은 회의적 입장을 표명
     * AI 개발의 역사를 되돌아보며, 유망한 진전이 확장성 한계에 부딪히는 경향이 있음을 강조

오픈 소스 모델이 점점 더 대세가 될 것 - Robert Nishihara, Anyscale CEO

     * Anyscale의 공동 창업자이자 CEO인 로버트 니시하라는 생성 AI 채택의 트렌드에 대해 설명
     * 초기에는 API 제품이 빠른 출시와 최소한의 엔지니어링 노력을 가능하게 하여 의미가 있었으나, 이제는 품질 향상과 비용 절감을 위해 맞춤형 모델로의 전환을 요구

태스크별 모델과 라우팅 아키텍처가 미래다 - Robert Nishihara, Anyscale CEO

     * 로버트 니시하라는 비즈니스가 다양한 모델을 다양한 사용 사례에 대해 평가하는 하이브리드 전략을 채택하기 시작했다고 설명
     * 작업에 특화된 모델은 비용과 속도 측면에서 큰 이점을 가지며, 라우팅 아키텍처의 사용이 증가하고 있음

Evaluation은 지속적인 골칫거리 - Robert Nishihara, Anyscale CEO

     * 로버트 니시하라는 생성 모델을 평가하는 방법이 점점 더 큰 문제가 될 것이라고 지적
     * 자연어의 경우 출력이 개방형이고 벤치마크가 절대적이지 않아 평가가 어려움

AI 도입을 개선하려면 기존 워크플로에 통합하라 - Bobby Yerramilli-Rao, Microsoft CSO

     * 마이크로소프트의 전략 최고 책임자인 바비 예라밀리-라오는 AI 애플리케이션을 성장시키기 위해서는 사용자의 워크플로우에 통합하는 것이 중요하다고 강조

오래 지속될 문제를 해결하라 - Bobby Yerramilli-Rao, Microsoft CSO

     * 바비 예라밀리-라오는 창업자들에게 생성 모델의 능력이 진전됨에 따라 지속될 문제를 해결하는 것이 중요하다고 강조
     * AI 분야에서 가장 흥미로운 기회는 응용 계층에 있으며, 여기서 제품은 GitHub에 출시되어 수직 애플리케이션으로 성장할 수 있음
"
"https://news.hada.io/topic?id=13809","Chat GPT, 움직일 수 있는 몸을 얻다. (이슈 정리)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Chat GPT, 움직일 수 있는 몸을 얻다. (이슈 정리)

     * 3월 14일, 사람과 소통이 가능한 로봇인 Figure01이 발표됨
     * 2월 29일, OpenAI와 Figure 회사는 협업 계약을 체결했었음
          + 이유1) ""언어를 처리하고 추론하는 로봇으로 향상""
          + 이유2) ""로봇 상용화를 앞당기고자""
     * Figure01의 기능
          + 눈에 보이는 것을 설명한다.
          + 사물의 쓰임을 이해한다.
          + 단기 기억이 가능하다. (1) + 이유를 설명할 수 있다.
          + 다음의 할 일을 계획할 수 있다.
          + 단기 기억이 가능하다. (2)

   maily.so 방문을 피하고 싶으신 분들은 https://twitter.com/figure_robot/status/1767913661253984474 에서 발표 영상 확인이 가능합니다.

   동영상이 필요하다면 트윗을 보셔도 됩니다~
   근데 이 트윗에는 영상만 공개되어 있네요..
   다른 정보가 필요한 분들은 참고 해주세요.
"
"https://news.hada.io/topic?id=13687","Dada - 새로운 실험적 프로그래밍 언어 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Dada - 새로운 실험적 프로그래밍 언어

     * Dada는 Rust와 같은 언어를 만들되, Java나 JavaScript처럼 느껴지고 C++보다는 덜 복잡한 언어를 목표로 하는 사고 실험(thought experiment)
     * 커널이나 작은 임베디드 장치에서 사용될 것을 목표로 하지 않고, 최소한의 런타임을 요구하는 언어를 상상하면 어떤 모습일까?
     * Dada는 소유권 기반 언어로 Rust와 몇 가지 유사점이 있음:
          + Rust처럼 Dada는 가비지 컬렉터가 필요 없음.
          + Rust처럼 Dada는 메모리 안전성과 데이터 레이스 프리를 보장함.
          + Rust처럼 Dada 데이터 구조는 스택에 할당되고 평면 메모리 레이아웃을 사용함.
     * 그러나 Dada는 다른 점도 많음:
          + TypeScript처럼 Dada는 점진적으로 타입화된 언어임:
               o 타입 주석 없이 인터프리터에서 Dada를 사용하여 언어의 작동 방식을 파악할 수 있음.
               o 익숙해지면 타입 주석을 추가하고 Rust와 비슷한 성능을 내는 컴파일러를 사용할 수 있음.
          + Dada는 WebAssembly를 주로 타겟으로 함:
               o Dada로 네이티브 타겟을 빌드할 수 있지만, FFI 시스템은 WebAssembly 인터페이스 타입을 기반으로 함.
          + Dada는 객체 지향적이지만 순수한 방식은 아님:
               o Dada는 OO와 패턴 매칭과 같은 좋은 기능을 결합하여 Scala와 같은 언어에서 영감을 받음.
     * Rust와 비교하여 Dada의 몇 가지 제한 사항이 있음:
          + Dada는 필수 런타임이 있으며 ""베어 메탈 시스템""이나 커널을 대상으로 하지 않음.
          + Dada는 인라인 어셈블리나 임의의 안전하지 않은 코드를 지원하지 않음.

Dada의 현재 상태는?

     * 현재 Dada는 실제로 존재하지 않으며, 몇 가지 실험적인 프로토타입이 있음:
          + PLT Redex에서 구현된 실험적인 운영 의미론이 dada-lang/dada-model에서 찾아볼 수 있음.
          + Rust로 작성된 인터프리터는 dada-lang/dada 저장소에서 찾을 수 있으며, Dada 플레이그라운드에서 WebAssembly 기반 빌드를 시도할 수 있음.

GN⁺의 의견

     * Dada는 현대 프로그래밍 언어의 트렌드를 반영하여 메모리 안전성과 데이터 레이스 방지 같은 Rust의 핵심 기능을 유지하면서도, 점진적 타입화와 객체 지향적 접근을 통해 개발자 친화적인 언어를 지향함.
     * WebAssembly를 주 타겟으로 삼는 것은 웹 기반 애플리케이션 개발에 있어서 Dada가 가지는 잠재력을 보여주며, 이는 브라우저 호환성과 플랫폼 독립성을 중시하는 현대 웹 개발 트렌드와 부합함.
     * Dada가 실제로 개발되고 널리 사용된다면, 기존의 Rust 개발자들에게는 더 높은 수준의 추상화와 편의성을 제공할 수 있으며, Java나 JavaScript 개발자들에게는 시스템 프로그래밍 언어로의 전환을 용이하게 할 수 있음.
     * 그러나 Dada가 아직 초기 단계에 있고 실제 프로덕션 환경에서의 성능과 안정성이 검증되지 않았기 때문에, 기업이나 개발자들이 이를 채택하기 전에는 신중한 접근이 필요함.
     * Dada와 유사한 목표를 가진 다른 언어로는 Kotlin이나 Swift가 있으며, 이들은 이미 널리 사용되고 있어 개발자들에게 좋은 대안이 될 수 있음.

        Hacker News 의견

     * ""사고 실험 언어""라는 아이디어에 대한 애정
          + 실제 언어를 만드는 것은 큰 부담이며, 이상적인 언어가 어떻게 생겼을지 생각하는 것은 재미있음.
          + ""고급 레벨의 Rust""에 대한 다양한 상상이 있으며, 개인적으로는 동적 런타임과 단순한 타입을 선호하지만, 다른 사람들은 다른 요구사항을 가짐.
          + 점진적 타입 시스템과 같은 추가 기능은 일부 언어에는 적합하지만, 처음부터 완전히 정적 타입 코드베이스의 보장을 선호함.
     * ""Hello, Dada!"" 예제에 대한 의문
          + Python 사용자로서, 콘솔에 출력하는 것이 목표일 때 await에 대해 신경 써야 하는 이유가 궁금함.
          + 이미 복잡성과 인지 부하가 시작되는 것으로 보임.
     * 반대되는 언어에 대한 바람
          + Rust의 표현력 있는 타입 시스템과 문법을 가지되, 가비지 컬렉터와 런타임을 도입한 언어를 원함.
          + 성능 비용을 지불하고 싶지 않으며, Rust의 타입 시스템을 가진 Go와 같은 언어를 선호함.
     * ""async/await""에 대한 반대 의견
          + 고급 언어에서는 Go의 그린 스레드가 더 적합하다고 생각함.
          + 점진적 타이핑은 흥미롭지만 필수는 아님. 정적 타이핑은 부담스럽지 않고 성능에 대한 추론을 어렵게 할 수 있음.
          + 점진적 타이핑보다 타입 추론이 더 나을 것이라고 생각함.
     * Java와 JavaScript와 같은 느낌에 대한 의견
          + Java와 JavaScript는 매우 다른 느낌을 가지고 있음을 지적함.
     * GC의 부재가 Rust를 임베디드 시스템에서 즐거운 경험으로 만듦
          + 다른 프로그램과 쉽게 연결 가능하며, 프로그램의 빠른 시작 속도는 Rust의 주요 장점 중 하나임.
          + 가비지 컬렉션을 도입한 Rust는 이 장점을 포기하는 것이 될 수 있음.
     * Rust 사용 경험에 대한 혼합된 감정
          + 메모리 안전 패턴을 좋아하지만, C++에 비해 구문이 더 어렵게 느껴짐.
          + 코드를 정신적으로 읽기 어려움을 느낌.
          + 데코레이터 마법과 기호 기반 구문이 적으면 초보자가 이해하기 쉬울 것임.
     * 타입 주석을 추가하면 Rust와 유사한 성능을 낼 수 있다는 주장에 대한 관심
          + JavaScript처럼 쉽게 작성할 수 있고, 추가 작업을 정당화할 때 Rust만큼 빠른 언어가 될 수 있음.
     * 튜토리얼의 ""print_point"" 메소드에 대한 혼란
          + async와 await의 의미에 대한 더 자세한 설명이 필요함.
          + async/await가 느긋하게 계산된 값과 같은 역할을 하는지, 그리고 다양한 조합이 타입 오류를 일으키는지에 대한 질문.
     * 새 프로그래밍 언어의 문법 예제를 찾는 데 대한 불만
          + 새 프로그래밍 언어를 만들 때는 랜딩 페이지에 ""Hello World"" 문법 예제를 바로 제공해달라는 요청.
"
"https://news.hada.io/topic?id=13785","무영장으로 발급된 경찰 감시자의 Twitter 계정에 대한 NYPD의 소환장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               무영장으로 발급된 경찰 감시자의 Twitter 계정에 대한 NYPD의 소환장

NYPD, 법원의 방어 없이 Copwatcher의 소셜 미디어 계정에 대한 영장 없는 소환장 발송

     * NYPD가 뉴욕시 경찰 책임 조직 회장의 소셜 미디어 계정에 대한 정보를 요구하는 광범위한 소환장을 발송했으나, 법원에서 소환장을 정당화해야 한다는 통보를 받고 철회함.
     * 소셜 미디어로 알려진 Michael Clancy는 X(구 Twitter)로부터 NYPD가 계정에 대한 모든 기록을 요청하는 소환장을 보냈다는 통지를 받음.
     * X는 자체 정책에 따라 Clancy에게 소환장의 존재를 알리고 법적 대리인을 구할 것을 제안함.

NYPD의 소환장 권한에 대한 법적 도전

     * NYPD는 소환장을 발송할 권한이 있다고 주장했으나, 법적 승인이나 영장 없이는 원치 않는 소환장을 발급할 수 없음.
     * 뉴욕 시민 자유 연합의 Kathryn Sachs 변호사는 NYPD에 소환장을 철회할 것을 요구하고, 그렇지 않을 경우 법원에 소환장 무효화를 요청할 것이라고 경고함.
     * NYPD는 법원에서 소환장의 필요성을 설명하는 대신 소환장을 철회하기로 결정함.

NYPD의 소환장 사용에 대한 법적 지위 불확실성

     * NYPD가 소셜 미디어 정보에 대한 영장 없는 소환장 사용을 도전받을 때마다 소환장을 철회함으로써 그 법적 지위가 명확하지 않음.
     * 2020년 NYPD는 뉴욕 포스트 기자 Tina Moore의 소셜 미디어 기록에 대한 유사한 소환장을 Twitter에 보냈으나, 법적 도전이 예상되자 서둘러 철회함.

Copwatch Patrol Unit 회장으로서의 Clancy의 활동

     * Clancy는 경찰의 행동에 대한 정보를 수집하고 전파하는 활동을 하고 있으며, NYPD가 그의 조직에 대한 정보를 얻으려는 이유에 대해 추측함.
     * Clancy는 경찰이 그를 위협하려는 의도로 소환장을 발송했을 수도 있으며, NYPD 내부에서 부정행위에 대한 정보를 제공하는 경찰이 있는지 알아보려는 시도일 수도 있다고 생각함.

NYPD의 소환장 발송과 철회에 대한 추가 질문

     * NYPD가 왜 비판자의 개인 정보에 대한 영장 없는 소환장을 발송했는지, 왜 연방 태스크 포스 이메일 도메인을 사용했는지, 왜 법원에서 소환장의 정당성을 방어하지 않고 철회했는지에 대한 질문이 제기됨.
     * NYPD는 이러한 질문에 대한 답변을 제공하지 않았음.

GN⁺의 의견

     * 이 사건은 경찰 기관의 권한 남용과 개인의 프라이버시 침해 가능성을 보여줌. 영장 없이 개인의 소셜

        Hacker News 의견

     * 다양한 국가에서 엔지니어, 의사, 트럭 운전사 등 전문직 종사자들은 자신의 과실로 인한 피해에 대해 개인적 책임을 질 수 있음. 그러나 공무원들은 이와 같은 개인적 책임에서 면제되는 경우가 많아, 이에 대한 의문 제기.
     * X/Twitter가 NYPD의 침묵 명령에 맞서 피소된 사람에게 소환장 사본을 전달하고 법적 대리인 선임을 권고하는 등 적극적으로 대응한 것에 대한 긍정적 평가.
     * NYPD가 소환장의 합법성을 판단받지 않고 철회할 수 있는 사실에 대한 의아함 표현. X/Meta/Alphabet 등이 법적 요구에 따른 소환장을 요구하기 위해 법적 절차를 밟는 것이 이해관계에 부합할 것이라는 의견.
     * 소환장이 철회된 후에도 법적 절차를 계속 추진할 수 있는 가능성과 이를 통해 악의적 행위자들이 법적 감시를 피하는 것을 방지할 수 있다는 전례 언급.
     * 소환장의 대상, NYCLU, 법원, 도시 등이 이러한 관행과 비판자들에 대한 조사에 대해 아무런 조치를 취하지 않는 이유에 대한 논의 부재 지적.
     * HIDTA가 무엇인지, 왜 경찰 감시와 관련이 있는지, 그리고 왜 NYPD가 아닌 독립된 도메인을 사용하는지에 대한 의문 제기.
     * NYPD가 국제적으로 사무소를 두고 있다는 사실에 대한 정보 공유.
     * 소환장에 영장이 포함되어야 하는 이유에 대한 의문.
     * 15년간 뉴욕시에 거주한 한 사람이 NYPD의 부패와 무능을 비판하며, 조지 플로이드 시위 기간 동안 경찰의 부적절한 행동에 대한 경험담 공유.
     * 미국에서 정부의 남용을 경찰에 의한 경우에는 용인하는 경향이 있으며, 이에 대한 의문 제기 및 호주와의 비교 언급.
"
"https://news.hada.io/topic?id=13729","모노드로우모노드로우

Monodraw: 강력한 ASCII 아트 편집기

     * Monodraw는 Mac용으로 설계된 ASCII 아트 편집기로, macOS 11 Big Sur 이상에서 사용 가능.
     * 사용자는 다이어그램, 레이아웃, 플로우 차트 등의 텍스트 기반 아트를 쉽게 생성하고, 알고리즘, 데이터 구조, 바이너리 형식 등을 시각적으로 표현할 수 있음.
     * 모든 작업이 텍스트로 이루어져 거의 모든 곳에 쉽게 삽입 가능하며, PNG와 SVG 형식으로 이미지로 내보내기도 지원.

시스템 요구 사항

     * Monodraw는 macOS 11 Big Sur 이상을 요구함.
     * 이전 버전의 macOS를 사용하는 경우, macOS 10.10 Yosemite가 필요한 Monodraw v1.3 또는 macOS 10.14 Mojave가 필요한 Monodraw v1.5를 다운로드할 수 있음.

명령줄 도구 포함 버전

     * 명령줄 도구는 웹사이트에서 직접 다운로드하고 스토어에서 구매한 버전에만 포함됨.
     * Mac App Store의 App Sandbox 제한으로 인해 해당 스토어의 버전에는 도구가 포함되지 않음.

피드백 제공 방법

     * 사용자는 이메일을 통해 피드백을 제공하거나, @Monodraw로 트윗을 보내는 방법으로 의견을 전달할 수 있음.

이메일 사용 방침

     * Monodraw는 스팸을 싫어하며, 사용자의 이메일을 제3자와 공유하지 않음.
     * Monodraw와 관련된 중요한 소식이 있을 때만 이메일을 보낼 예정.

교육 가격 제공

     * 교육적 목적으로 사용하는 경우, 연락을 통해 교육 가격을 제공받을 수 있음.

개인정보 보호 정책

     * Monodraw는 사용자의 개인정보 보호를 매우 중요하게 여김.
     * 어떠한 사용자 데이터도 수집하지 않음.

GN⁺의 의견

     * Monodraw는 기술 문서나 코드를 시각적으로 표현하고자 하는 사용자에게 매우 유용한 도구임. 특히, 복잡한 데이터 구조나 알고리즘을 이해하기 쉬운 형태로 나타내는 데 도움을 줄 수 있음.
     * ASCII 아트는 비교적 단순한 형태의 시각화이지만, 이를 통해 복잡한 개념을 명확하게 전달할 수 있는 장점이 있음. 이는 특히 프로그래밍 교육이나 문서 작성에 있어서 효과적인 수단이 될 수 있음.
     * Monodraw와 유사한 기능을 제공하는 다른 오픈소스 프로젝트로는 asciiflow가 있으며, 웹 기반으로 접근성이 좋음.
     * Monodraw를 도입할 때 고려해야 할 사항으로는, 텍스트 기반의 시각화가 적합한 문맥인지, 그리고 팀 내에서 이 도구를 효과적으로 사용할 수 있는 기술을 갖추고 있는지 등이 있음. 선택함으로써 얻는 이점은 문서의 명확성과 이해도 향상이며, 단점으로는 시각적으로 더 복잡한 아트워크를 필요로 하는 경우에는 한계가 있을 수 있음.
     * 기술적 문서 작성이나 교육 자료 준비에 있어서 Monodraw의 간단하고 직관적인 접근 방식은 많은 이들에게 흥미를 끌 수 있으며, 특히 프로그래밍을 배우는 학생들이나 소프트웨어 개발자들에게 도움이 될 것임.

        Hacker News 의견

     * Mermaid 대안으로 Monodraw 사용
          + Monodraw를 사용하면 다른 앱들처럼 기능이나 스타일의 과다함에 집중하지 않고 내용에 집중할 수 있음. Monodraw는 충분한 기능을 제공하며, 특히 앵커 기능이 마음에 듦. 이에 대한 데모/튜토리얼도 제작함.
     * Monodraw의 활용 사례
          + Monodraw를 구매하고 문서 작성에 여러 번 사용함. ASCII를 이용해 예상치 못한 곳에 그래픽을 넣어 이해를 돕는 데 유용함.
     * 다이어그램 및 문서화 도구로서의 Monodraw
          + Mapless 다이어그램 작성과 Pharo VM Plugin 빌더 설정 문서화에 Monodraw를 사용함.
     * 웹 버전 Monodraw 대안
          + 웹 버전 Monodraw의 대안으로 친구가 Kotlin으로 작성한 MonoSketch와 Rust로 반쯤 완성된 버전도 있음.
     * 웹 기반 대안 Asciiflow
          + Asciiflow는 웹 기반 대안으로, 십년간 주로 사용해온 도구임.
     * Monodraw의 가치
          + Monodraw는 구매 후 가끔 사용하더라도 계속 보유하고 싶은 도구임.
     * Monodraw의 현재 상태
          + Monodraw가 2018년에 ""유지 관리 모드""로 전환되었는데, 그 이후 변화가 있었는지 궁금함.
     * 리눅스 네이티브 대안
          + 웹앱이 아닌 리눅스 네이티브 대안으로 P5-App-Asciio가 있음.
     * Monodraw의 일상적 사용
          + Monodraw 출시일부터 사용해왔으며, 소프트웨어 아키텍처, 다이어그램, 시스템 로그인 배너 등을 그리는 데 유용한 도구임.
"
"https://news.hada.io/topic?id=13765","GrapheneOS가 ARM MTE를 통해 발견한 블루투스 메모리 손상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GrapheneOS가 ARM MTE를 통해 발견한 블루투스 메모리 손상

GrapheneOS 소셜 네트워크 활동

     * GrapheneOS는 Mastodon을 기반으로 한 분산 소셜 네트워크의 일부임.
     * 공식 프로젝트 계정과 프로젝트 멤버들을 위한 GrapheneOS 서버를 운영 중임.
     * 서버는 5명의 활성 사용자를 보유하고 있음.

Pixel 8과 Pixel 8 Pro의 하드웨어 메모리 태깅 지원

     * Pixel 8과 Pixel 8 Pro에서 하드웨어 메모리 태깅 지원을 통해 Android 14 QPR2의 Bluetooth LE에서 발생한 메모리 손상 버그를 발견함.
     * 현재 이 버그를 조사하여 수정하거나 새로 도입된 기능을 일시적으로 비활성화하는 임시 해결책을 찾고 있음.

메모리 태깅 비활성화는 임시 해결책으로 부적절

     * 특정 Bluetooth LE 장치에서만 발생하며, 모든 Bluetooth 장치에서 발생하는 것은 아님.
     * 이 프로세스에 대한 메모리 태깅을 비활성화하는 것은 단기적인 해결책으로도 받아들일 수 없음.

Android 14 QPR2의 버그 패치 개발

     * Bluetooth LE와 관련된 use-after-free 버그를 발견하고 패치를 개발함.
     * GrapheneOS 릴리스에 수정 사항을 포함시키는 것이 우선순위이며, Android 보안 버그로 보고할 예정임.
     * BLE 오디오 문제도 해결될 것으로 기대됨.

버그 수정 확인

     * Samsung Galaxy Buds2 Pro를 사용하는 사용자가 Bluetooth LE 모드에서 문제를 재현하고 수정 사항이 효과가 있음을 확인함.
     * 이 문제는 기본 Pixel OS에도 영향을 미침.
     * GrapheneOS는 hardened_malloc 메모리 태깅 지원을 통해 이를 감지하고, MTE 충돌 알림과 보고서를 보낼 수 있는 기능을 추가함.

보안 버그로 보고

     * use-after-free 문제가 보안 버그로 보고됨 (Google 직원을 위한 b/328916844).
     * 초기 최소 침입 패치가 제공됨.
     * 코드는 큰 리팩토링이 필요하며, 원시 포인터를 사용하지 않아야 하지만, 빠른 패치로 새로운 버그를 도입하지 않으려 함.

Bluetooth 코드를 Rust로 포팅

     * Android는 많은 Bluetooth 코드를 Rust로 포팅함.
     * 나머지 코드도 Rust로 포팅하는 데 더 많은 자원을 투입해야 함.
     * HWASan과 MTE 빌드를 다양한 실제 사용 환경에서 테스트해야 함.

MTE의 중요성

     * Pixels는 OS에서 활성화하지 않고 메모리/캐시 사용량을 3.125% 절약하기 위해 MTE라는 중요한 하드웨어 보안 기능을 제공함.
     * GrapheneOS는 기본 OS와 알려진 호환 사용자 설치 앱에 대해 기본적으로 MTE를 활성화함.
     * 사용자는 설정에서 모든 사용자 설치 앱에 대해 MTE를 활성화할 수 있음.

GrapheneOS의 MTE 구현

     * GrapheneOS는 표준 랜덤 태그와 전용 free 태그를 사용하는 hardened_malloc의 일부로 더 나은 MTE 구현을 제공함.
     * Chromium의 통합을 수정했으며 PartitionAlloc을 개선할 계획임.

GrapheneOS의 MTE 사용

     * GrapheneOS는 생산 환경에서 MTE를 사용하는 첫 번째 플랫폼임.
     * Vanadium 브라우저는 생산 환경에서 MTE를 사용하는 첫 번째 브라우저임.
     * 스택 MTE를 추가하고, PartitionAlloc을 개선하며, 새로운 커널 슬랩 MTE를 만들 계획임.

사용자의 감사

     * 사용자들은 GrapheneOS의 블루투스 자동 비활성화 기능에 감사함을 표시함.

GN⁺의 의견

     * GrapheneOS는 안드로이드 기반의 보안에 중점을 둔 운영 체제로, 최신 픽셀 기기에서 발견된 메모리 손상 버그를 신속하게 발견하고 대응하는 모습을 보여줌.
     * 이러한 빠른 대응은 오픈소스 커뮤니티의 장점을 잘 보여주며, 사용자들에게 더 안전한 모바일 환경을 제공하는 데 기여함.
     * 메모리 안전성을 강화하는 Rust 언어로의 코드 포팅은 장기적인 보안 강화를 위한 중요한 단계임.
     * 하드웨어 기반의 보안 기능인 MTE를 활성화하는 것은 성능 저하를 최소화하면서 보안을 강화하는 효과적인 방법임.
     * 이 기술을 도입할 때는 기존 애플리케이션과의 호환성을 고려해야 하며, 보안 강화를 위한 적절한 테스트와 유지보수가 필요함.

        Hacker News 의견

     * 메모리 태깅 확장 기능은 기본적으로 활성화되어 있지 않지만, 개발자 옵션을 통해 누구나 활성화할 수 있음. 특정 앱을 테스트하고자 할 때 한 번만 활성화하거나, 원할 때까지 유지할 수 있음.
     * Graphene OS 설치가 어려운지, 특별한 케이블이 필요한지, 안드로이드 장치를 잘 알아야 하는지, 아니면 지침을 따르기만 하면 되는지에 대한 답변을 Graphene OS 사용자에게 기대함.
     * Graphene OS를 일상적으로 사용하는 것이 불편한지, 휴대폰이 자주 충돌하여 며칠간 디버깅이 필요한지, 은행 앱이 작동하는지에 대한 경험을 공유해달라는 요청.
     * Pixel 팀이 메모리/캐시 사용량을 3.125% 절약하기 위해 중요한 하드웨어 보안 기능(MTE)을 OS에서 활성화하지 않는 결정을 어떻게 정당화하는지 궁금해함. 힙 MTE는 비동기 모드에서 거의 성능 오버헤드가 없으며, 비대칭 모드에서 SSP와 같은 기존의 점점 효과가 떨어지는 보호 기능보다 저렴함.
     * MTE와 CHERI 보안 기술의 비교에 대한 질문.
     * GrapheneOS가 보안 측면에서 다른 것들보다 훨씬 앞서 있어서, Pixel 하드웨어 이외의 선택이 의문스러움. 하지만 교체 가능한 배터리를 갖고 싶은 강한 욕구 표현.
     * 최신 Raspberry Pi와 같은 단일 보드 컴퓨터가 Arm MTE를 구현하는지에 대한 질문.
     * Solaris SPARC 2015년도 하드웨어나 이전의 메모리 태그 아키텍처처럼 메모리 부패 문제를 해결할 수 있는 주류 하드웨어를 기다림. 이러한 문제는 대부분 기술이 부족한 개발자에 의해 발생함.
     * 2024년에는 seL4의 정신을 계승하면서도 더 엄격한 형식으로 검증된 운영 체제, 애플리케이션, 도구가 필요함. 현재와 같이 충분히 테스트되지 않고 과도하게 설계된 코드베이스 시스템을 사용하는 것은 사용자에게 위험을 초래하고, 많은 버그와 멀웨어 및 해킹의 공격 표면을 제공함.
     * 깔끔하고 통합된 사용자 경험(UX)과 사용 가능한 기능을 제공하지 않으면, 모든 엔지니어링이 헛된 것임.
     * 안드로이드가 블루투스 코드의 상당 부분을 Rust로 포팅했음. 더 많은 코드를 Rust로 포팅하는 데 더 많은 자원을 투입해야 한다는 것을 보여주는 사례임.
     * C와 C++로 수년간 작업한 경험이 있지만 Rust 경험은 없는 사람이, C에서 Rust로 포팅하는 과정에서 얼마나 많은 리팩토링이 필요한지 궁금해함. 구글이 이를 어떻게 접근하고 있는지, 가능한 한 직접 ""번역""하려고 하는지, 아니면 주요 리라이트/리팩토링 기회로 보는지에 대한 질문.
     * 안드로이드 블루투스 스택이 표준 리눅스 배포판 데스크톱 시스템에서 사용 가능한지 여부에 대한 궁금증.
"
"https://news.hada.io/topic?id=13744","사파리 17의 고급 오디오 지문 인식 보호 기능 우회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     사파리 17의 고급 오디오 지문 인식 보호 기능 우회

오디오를 통한 식별

     * 오디오 식별 기법은 브라우저의 오디오 API를 사용하여 오디오 신호를 생성하고, 이를 통해 생성된 오디오 신호 샘플을 모두 더하여 단일 숫자로 변환하는 방식.
     * 이 숫자는 지문(식별자)으로 사용되며, 쿠키를 지우거나 시크릿 모드로 전환해도 변하지 않는 안정성을 가짐.
     * 그러나 식별자는 매우 독특하지 않아 많은 사용자가 동일한 식별자를 가질 수 있음.

Safari 17이 오디오 지문 인식을 방해하는 방법

     * Safari 17은 고급 지문 인식 보호 기능을 도입하여, 개인 정보 보호 모드에서 기본적으로 활성화되고 일반 모드에서는 비활성화됨.
     * 이 보호 기능은 오디오 샘플마다 임의의 노이즈를 추가하여 지문의 정확성을 떨어뜨림.
     * 결과적으로 오디오 지문은 매번 계산할 때마다 달라지므로, 식별을 위해 사용할 수 없게 됨.

Safari 17의 고급 지문 인식 보호 우회 방법

     * Safari가 추가하는 노이즈를 제거하기 위해 지문 인식 알고리즘을 개선하는 세 단계: 노이즈 분산 감소, 브라우저 식별 번호 간격 확대, 남은 노이즈 제거를 위한 지문 반올림.
     * 노이즈 감소를 위해 여러 오디오 지문을 결합하고, 브라우저 간 오디오 샘플 차이를 늘리기 위해 기본 신호를 변경함.
     * 결과를 안정화하기 위해 중요한 숫자를 유지하면서 오디오 샘플을 반올림함.

성능

     * 새로운 지문 인식 알고리즘은 기존 알고리즘에 비해 성능이 1.5-2배 정도 저하되지만, 여전히 낮은 성능의 장치에서도 계산 시간이 적게 걸림.
     * 페이지가 응답성을 유지하도록 OfflineAudioRender 스레드에서 일부 작업을 처리함.

개인 정보 보호에 중점을 둔 브라우저에서의 작동 방식

     * Tor와 Brave와 같은 개인 정보 보호에 중점을 둔 브라우저도 오디오 지문 인식을 제한하려고 시도함.
     * Tor에서는 Web Audio API가 완전히 비활성화되어 오디오 지문 인식이 불가능함.
     * Brave는 Safari 17과 유사한 접근 방식을 사용하여 오디오 신호에 노이즈를 추가함.

FingerprintJS에서의 사용

     * 새로운 오디오 지문 인식 알고리즘이 FingerprintJS에서 기존 알고리즘을 대체함.
     * 오디오 지문 인식은 브라우저 지문을 생성하기 위해 사용되는 많은 신호 중 하나이며, 각 신호의 안정성과 독특성을 별도로 분석하여 지문 정확도에 미치는 영향을 결정함.

GN⁺의 의견

     * Safari 17의 오디오 지문 인식 방해 기능은 사용자의 개인 정보 보호를 강화하려는 Apple의 노력을 보여줌. 이는 사용자에게 더 큰 프라이버시를 제공할 수 있음.
     * 그러나 FingerprintJS와 같은 서비스는 이러한 보호 기능을 우회하여 여전히 식별을 가능하게 함으로써, 프라이버시 보호와 보안 간의 지속적인 긴장 관계를 드러냄.
     * 이 기술이 사이버 보안에서 어떻게 활용될 수 있는지에 대한 추가적인 논의가 필요함. 예를 들어, 부정 행위를 방지하고 사용자 계정을 보호하는 데 사용될 수 있음.
     * 비슷한 기능을 제공하는 다른 오픈소스 프로젝트로는 Privacy Badger나 uBlock Origin이 있으며, 이들은 사용자 추적을 차단하는 데 도움을 줄 수 있음.
     * 기술의 도입 시 사용자의 프라이버시와 웹사이트의 보안 요구 사이에서 균형을 찾는 것이 중요함. 이 기술을 사용함으로써 얻을 수 있는 이점은 사용자 식별의 정확성 향상이지만, 프라이버시 침해의 위험도 고려해야 함.

        Hacker News 의견

     * GPU 지문 인식 기법
          + GPU 지문 인식 기법인 'DrawnApart'는 WebGL을 사용하여 GPU의 실행 유닛 수와 속도를 측정하고, 정점 렌더링 완료 시간, 스톨 함수 처리 등을 측정하는 기술임.
          + 출처
     * 오디오 지문 인식의 가능성
          + 오디오 지문 인식이 가능한 이유에 대한 설명 요청.
     * 데이터 유출 방지를 위한 잡음 추가의 비효율성
          + 사이드 채널 공격에 대한 최근의 관심을 고려할 때, 데이터 유출을 방지하기 위해 잡음을 추가하는 것은 더 많은 샘플을 취하고 잡음을 제거할 수 있기 때문에 효과가 없음.
          + Safari가 이를 추가한 이유에 대한 의문 제기.
     * 웹 오디오 API 스펙과 오실레이터 안티-에일리어싱 처리
          + 웹 오디오 API 스펙에서 오실레이터의 안티-에일리어싱 처리 방법에 대한 선택이 지문 인식 우회 성공의 핵심으로 보임.
          + 브라우저나 하드웨어에 따라 다른 안티-에일리어싱 방법을 선택할 수 있으며, 이로 인해 브라우저 간 또는 동일 브라우저 내에서도 비결정적인 결과가 발생할 수 있음.
          + 안티-에일리어싱을 브라우저에 맡기는 선택에 대한 이해 부족을 표현.
          + 출처
     * 오디오 API의 브라우저 내 구현에 대한 비판
          + 브라우저에 노드 그래프 오디오 API를 포함하는 것은 비합리적이라는 의견.
          + 오디오 워크렛만 있어야 한다는 주장.
     * 샘플링 잡음 추가 방식의 개선 제안
          + Safari가 각 샘플에 무작위 잡음을 추가하는 대신, 매 시간마다 변경되는 키를 기반으로 한 잡음을 추가할 수 있다는 제안.
          + 이 방법은 한 세션 내에서는 잡음이 일정하나, 한 시간 후에는 추적에 무용하게 됨.
     * 자바스크립트 비활성화를 선호하는 사용자 의견
          + 자바스크립트를 비활성화하고 웹을 탐색하는 것을 선호하는 사용자의 의견.
     * 오디오 API 프로토타입 변경을 통한 지문 인식 방해
          + 오디오 API의 프로토타입을 변경하여 원하는 결과를 반환하도록 하는 방법 제안.
          + 원하는 모방 지문을 얻기 위한 어려움 인정.
     * 오디오 처리 지문 인식의 기반
          + 오디오 처리 지문 인식이 하드웨어/드라이버/OS 차이에 기반하는지, 아니면 단순히 브라우저 소프트웨어 차이에 기반하는지에 대한 질문.
          + 유사한 기법으로 <canvas>를 사용하여 그래픽 장치 간 차이를 드러내는 방법이 있었음을 언급.
"
"https://news.hada.io/topic?id=13793","JIT WireGuard 기술ireGuard 기술

Fly.io의 WireGuard 개선 사항

     * Fly.io는 컨테이너를 VM으로 변환하여 전 세계적으로 하드웨어에서 Firecracker의 힘을 이용해 실행함.
     * WireGuard를 많이 사용하며, 이제 고객 API의 일부가 됨.
     * flyctl CLI를 실행할 때마다 TCP/IP 스택을 생성하고, 고유한 IPv6 주소를 사용하여 Fly Machines과 직접 통신함.
     * 이 접근 방식의 장단점이 있으며, 몇 가지 개선 사항이 있음.

이전 상황

     * 전 세계에 있는 ""게이트웨이"" 서버들이 WireGuard 연결을 수락하고 적절한 사설 네트워크에 연결하는 역할을 함.
     * flyctl을 실행할 때마다 백그라운드 에이전트 프로세스를 생성하거나 연결함.
     * 에이전트는 GraphQL API에서 새로운 WireGuard 피어 설정을 생성함.
     * API는 NATS 메시징 시스템을 통해 적절한 게이트웨이에 피어 설정을 전송함.
     * 게이트웨이에서 wggwd 서비스가 설정을 받아 SQLite 데이터베이스에 저장하고 커널에 추가함.
     * API가 GraphQL 요청에 응답하여 설정을 전달하고, flyctl이 WireGuard 피어에 연결함.
     * NATS는 빠르지만 배달을 보장하지 않으며, 게이트웨이에 남아 있는 오래된 피어들을 정리하지 않음.

더 나은 방법

     * WireGuard 피어를 저장하는 것은 복잡한 데이터베이스가 필요하지 않음.
     * 게이트웨이가 API에서 필요할 때마다 설정을 가져오도록 변경함.
     * 클라이언트가 연결을 원할 때만 커널에 피어를 추가하고, 필요 없을 때는 제거할 수 있음.

JIT WireGuard 피어 가능

     * Linux 커널의 WireGuard 설정 인터페이스는 Netlink를 사용함.
     * WireGuard 연결 요청 패킷을 BPF 필터와 패킷 소켓으로 식별하고 가로챌 수 있음.
     * WireGuard는 ""클라이언트""와 ""서버"" 개념이 없으며, 점대점 프로토콜임.
     * flyctl이 게이트웨이에 UDP 패킷을 보내면, 이는 handshake initiation임.
     * BPF 필터를 사용하여 들어오는 연결을 잡을 수 있음.
     * Noise 프로토콜 프레임워크를 기반으로 하여, 요청을 식별하기 위해 암호화를 해제해야 함.
     * 이벤트 피드를 생성하여 게이트웨이에 연결을 시도하는 모든 사용자의 공개 키를 얻을 수 있음.
     * 새로운 피어를 볼 때마다 내부 HTTP API 요청을 통해 해당 피어 정보를 가져오고 설치함.

앱을 분 단위로 런칭

     * Fly.io에서 앱을 빠르게 배포하고 자체 JIT WireGuard 피어를 얻을 수 있음.

그래프 살펴보기

     * 몇 주 동안 이 시스템을 운영하며, 게이트웨이에 남아 있는 오래된 WireGuard 피어 수를 현저히 줄임.
     * 게이트웨이가 더 적은 상태를 유지하고 피어 설정이 더 빨라짐.
     * Grafana 차트를 통해 전환 당일의 성공적인 결과를 공유함.

GN⁺의 의견

     * Fly.io의 WireGuard 개선은 네트워크 성능과 안정성을 크게 향상시키는 좋은 예시임.
     * 이러한 접근 방식은 특히 클라우드 기반 서비스에서 네트워크 트래픽 관리와 보안을 강화하는 데 도움이 될 수 있음.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Tailscale이나 ZeroTier가 있으며, 이들도 개인 및 기업 사용자에게 VPN 대안을 제공함.
     * WireGuard를 도입할 때는 네트워크 구성, 보안 정책, 호환성 등을 고려해야 함.
     * 이 기술을 선택함으로써 얻는 이점은 빠른 성능과 간단한 구성이지만, 기존 인프라와의 통합이나 관리 측면에서 도전이 될 수 있음.

        Hacker News 의견

     *

     리눅스 커널의 WireGuard는 요청 시 피어를 설치하는 기능이 없어 설계 구축에 문제가 발생한다고 합니다.
          + 리눅스 커널의 WireGuard가 요청에 따라 피어를 설치하는 기능 부재로 설계에 어려움이 있음.
          + 런타임에 피어를 추가할 수 있지만, 인터페이스에 추가하기 전에 피어를 인증하여 불필요한 항목을 방지하려는 것으로 보임.
          + eBPF 필터를 사용하여 인증된 상대방과의 암호키 라우팅 기반 연결을 직접 관리하고, 검증이 완료되면 피어를 인터페이스에 추가하고 타임아웃 후 제거함.
     *

     HTTP 요청이 메시지 큐를 통한 라우팅보다 더 신뢰성이 있다는 데는 동의하지만, NATS로 인해 손실된 메시지가 서비스에 큰 영향을 미쳤다는 것에 놀랐습니다.
          + 직접 HTTP 요청이 메시지 큐보다 신뢰성이 높다는 의견에 동의하지만, NATS에서 메시지 손실이 서비스에 상당한 영향을 미쳤다는 점에 대해 의아함.
          + 메시지 손실 시 NATS가 재전송을 시도할 것으로 예상되지만, 눈에 띄는 신뢰성 문제가 발생한 이유에 대해 궁금증을 표함.
     *

     최근 실험적인 프로젝트를 홍보하고 싶습니다. 사용자 공간 WireGuard 피어로 작동하는 Go 앱을 구축하는 데 관심이 있다면 확인해 보세요.
          + 사용자 공간 WireGuard 피어로 작동하는 Go 앱을 구축하는 데 관심 있는 사람들을 위해 자신의 프로젝트를 소개함.
          + wireguard-go의 우수한 작업을 기반으로 하되, 라이브러리 사용에 더 적합하도록 단순화하고자 함.
          + 서비스 메시 구축에 관심이 있으며, 다양한 언어 지원이 어려울 수 있지만 소켓 API를 구현할 수 있을 것으로 생각함.
          + WireGuard의 암호화에 대한 하드웨어 가속이 아직 보이지 않아 mTLS와 경쟁하기 어려울 수 있음을 언급함.
          + 고속/보안 네트워킹 분야에서 프리랜서로 활동하고 있으며, 관심 있는 사람은 연락 바람(이메일 프로필에 있음).
     *

     WireGuard를 WebSockets 위에 터널링하는 것이 기본 설정이라는 것이 흥미롭습니다. 성능에는 좋지 않지만 flyctl이 사용되는 DevOps 작업에는 적합할 것입니다.
          + WireGuard를 WebSockets를 통해 터널링하는 것이 기본 설정이라는 사실에 주목함.
          + 성능에는 최적이 아니지만, flyctl이 사용되는 DevOps 작업에는 문제가 없을 것으로 예상함.
          + QUIC/HTTP3의 미래에 대해 궁금해하며, 네트워크 운영자들이 UDP를 443 포트에서 차단하는 대신 제대로 처리할 가능성에 대해 의문을 제기함.
     *

     우리는 발신자로서 피어를 설치할 수 있으며, flyctl이 응답자입니다. 리눅스 커널은 flyctl로 WireGuard 연결을 시작합니다. 이 방법은 작동하며, 프로토콜은 서버와 클라이언트가 누구인지 크게 신경 쓰지 않습니다. 새로운 연결이 가능한 한 빨리 설치됩니다.
          + 발신자로서 피어를 설치하고 flyctl이 응답자로서 리눅스 커널이 WireGuard 연결을 시작하는 방식에 대해 설명함.
          + 프로토콜이 서버와 클라이언트의 역할에 크게 구애받지 않으며, 새로운 연결이 매우 빠르게 이루어질 수 있음을 언급함.
     *

     내 스타트업은 거의 1년 동안 Fly를 사용했습니다. 코드를 배포된 코드로 1분 이내에 전환하는 핵심 기능은 아름답습니다. 새 노드를 몇 초 만에 스핀업/다운할 수 있습니다.
          + 스타트업이 Fly를 거의 1년간 사용한 경험을 공유함.
          + 코드를 빠르게 배포할 수 있는 기능에 대해 긍정적으로 평가하지만, 회사가 다소 미성숙하다고 느낌.
          + API 서버가 Fly에서 48시간 동안 접근 불가능했던 경험과, ""db"" 제품의 일관성 없는 연결 끊김 문제를 언급함.
          + Fly의 API 접근이 자주 다운되어 새로운 서비스 수정을 배포하는 데 문제가 있었음을 지적함.
          + 배포 경험은 그리워하지만, GCP의 Cloud Run을 사용하는 것이 더 만족스러움을 표현함.
     *

     “flyctl을 실행할 때마다, 우리의 사랑스러운, 방대한 CLI는 공중에서 TCP/IP 스택을 만들어내고, 고유한 IPv6 주소를 가지고 직접 Fly Machines과 통신합니다.”
          + flyctl 실행 시 TCP/IP 스택을 즉석에서 생성하고 고유한 IPv6 주소를 통해 Fly Machines과 직접 통신한다는 설명에 대한 궁금증을 표함.
     *

     초기 핸드셰이크 패킷이 네트워크 스택으로 재전송되는 것을 막는 것은 무엇인가요? 그렇게 하면 패킷 손실이 없을 것 같습니다. 또한 eBPF 필터에서 ""udp[8] = 1""을 확인하는 목적은 무엇인가요?
          + 초기 핸드셰이크 패킷이 네트워크 스택으로 재전송되는 것을 방지하는 메커니즘과 eBPF 필터에서 특정 UDP 패킷 값을 확인하는 이유에 대한 질문을 제기함.
     *

     임의의 도커화된 애플리케이션을 Fly.io에 배포하려면 어떻게 해야 하나요? 제 돈을 가져가세요
          + 도커화된 애플리케이션을 Fly.io에 배포하는 방법에 대한 관심과 의지를 표현함.
     *

     다른 모든 사람들을 위해, Netmaker를 뻔뻔스럽게 홍보하겠습니다.
          + Netmaker를 사용한 만족스러운 경험을 공유하며, AWS VPC에 대한 개인적인 접근 필요성을 언급하고, Netmaker가 더 널리 채택되기를 희망함.
"
"https://news.hada.io/topic?id=13773","새로운 이론적 관점에서 본 '스크래치'로부터의 디퓨전 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    새로운 이론적 관점에서 본 '스크래치'로부터의 디퓨전 모델

새로운 이론적 관점에서 본 스크래치부터의 확산 모델

     * 확산 모델은 최근 생성 모델링에서 인상적인 결과를 보여주었으며, 특히 다중 모드 분포에서의 샘플링에 뛰어남.
     * 확산 모델은 텍스트-이미지 생성 도구인 Stable Diffusion에서 널리 채택되었을 뿐만 아니라 오디오/비디오/3D 생성, 단백질 설계, 로봇 경로 계획 등 다양한 응용 분야에서도 뛰어난 성능을 보임.
     * 이 튜토리얼은 최적화 관점에서 확산 모델을 소개하며, 이론과 코드를 모두 다루어 확산 모델을 스크래치부터 구현하는 방법을 설명함.

확산 모델 훈련하기

     * 확산 모델은 훈련 예제에서 학습된 집합으로부터 샘플을 생성하는 것을 목표로 함.
     * 확산 모델 훈련은 다음과 같은 과정을 포함함:
         1. K에서 x0을 샘플링하고, σmin과 σmax 사이에서 노이즈 레벨 σ를 샘플링하고, N(0,I)에서 노이즈 ϵ을 샘플링함.
         2. 노이즈 데이터 xσ=x0+σϵ을 생성함.
         3. 제곱 손실을 최소화하면서 xσ에서 ϵ(노이즈의 방향)을 예측함.
     * 실제 훈련은 training_loop 함수를 통해 수행되며, 이는 배치의 x0을 반복하고, generate_train_sample을 사용하여 노이즈 레벨 sigma와 노이즈 벡터 eps를 샘플링함.

노이즈 스케줄

     * 실제로 σ는 [σmin,σmax] 구간에서 균등하게 샘플링되지 않고, 이 구간은 N개의 구별된 값인 _σ 스케줄_로 이산화됨.
     * Schedule 클래스는 가능한 sigmas의 리스트를 캡슐화하고, 훈련 중에 이 리스트에서 샘플링함.
     * 로그-선형 스케줄을 사용하며, 다른 스케줄과 비교하여 기본 매개변수로 이 스케줄을 비교하는 플롯을 제공함.

장난감 예제

     * 이 튜토리얼에서는 스파이럴에서 샘플링된 점들로 구성된 장난감 데이터셋을 사용함.
     * 이 간단한 데이터셋에 대해 다층 퍼셉트론(MLP)을 사용하여 디노이저를 구현함.
     * MLP는 x∈R2와 노이즈 레벨 σ의 연결을 입력으로 받고, 노이즈 ϵ∈R2를 예측함.
     * 모든 필수 구성 요소를 갖추고 나면 확산 모델을 훈련할 수 있음.

디노이징을 근사적 투영으로 해석하기

     * 확산 훈련 절차는 디노이저 ϵθ(x,σ)를 학습하며, 논문에서는 학습된 디노이저를 데이터 매니폴드 K에 대한 근사적 투영으로 해석함.
     * 이는 확산 샘플링 알고리즘의 수렴을 분석하기 위해 상대 오차 근사 모델을 도입하는 것을 동기로 함.

거리 및 투영 함수

     * 집합 K⊆Rn에 대한 _거리 함수_는 distK(x)로 정의되며, x∈Rn의 _투영_은 이 거리를 달성하는 점들의 집합으로 정의됨.
     * 만약 projK(x)가 유일하다면, distK(x)의 기울기는 이 유일한 투영을 향함.

이상적인 디노이저

     * 특정 노이즈 레벨 σ에 대한 이상적 또는 최적의 디노이저 ϵ∗는 훈련 손실 함수의 정확한 최소화자임.
     * 데이터가 K에 대한 유한 집합 위의 이산 균등 분포일 때, 이상적인 디노이저는 정확한 닫힌 형태의 표현을 가짐.

상대 오차 모델

     * 확산 샘플링 알고리즘의 수렴을 분석하기 위해 상대 오차 모델을 도입함.
     * 이 모델은 디노이저에 의해 예측된 투영 x−σϵθ(x,σ)가 입력 x에 대해 σ가 distK(x)/n을 잘 추정할 때 projK(x)를 잘 근사한다고 가정함.

확산 모델에서 샘플링하기

     * 학습된 디노이저 ϵθ(x,σ)에서 샘플링하여 K에 속하는 점 x0을 얻기 위해, 노이즈 xt와 노이즈 레벨 σt를 가진 디노이저 ϵθ(xt,σt)가 x0을 예측함.

확산 샘플링을 거리 최소화로 해석하기

     * 확산 샘플링 반복을 함수 f(x)=12distK(x)2에 대한 기울기 하강으로 해석할 수 있음.
     * σt 스케줄을 어떻게 선택해야 하는지는 샘플링 중에 취할 기울기 단계의 수와 크기를 결정함.

기울기 추정을 통한 개선된 샘플러

     * 기울기 추정을 통해 새로운 효율적인 샘플러를 도출함.
     * 이 샘플러는 기존의 DDIM 샘플러보다 빠른 수렴을 보여줌.

대규모 예제

     * 위에서 제공된 훈련 코드는 장난감 데이터셋뿐만 아니라 이미지 확산 모델을 스크래치부터 훈련하는 데에도 사용할 수 있음.
     * 샘플링 코드는 사전 훈련된 최첨단 잠재 확산 모델에서 샘플링하는 데 수정 없이 작동함.

기타 자료

     * 확산 모델에 대한 다음 블로그 게시물도 추천함:
         1. 확산 모델이란 무엇인가는 마르코프 과정을 역전하는 이산 시간 관점에서 확산 모델을 소개함.
         2. 데이터 분포의 기울기를 추정하여 생성 모델링을 하는 것은 확산 모델을 확률 미분 방정식을 역전하는 연속 시간 관점에서 소개함.
         3. 주석이 달린 확산 모델은 확산 모델의 파이토치 구현을 자세히 설명함.

GN⁺의 의견

     * 이 튜토리얼은 확산 모델을 최적화 관점에서 소개하며, 이론적 배경과 실제 코드 구현을 연결하는 방식으로 설명함으로써 초급 소프트웨어 엔지니어에게도 접근성을 제공함.
     * 확산 모델은 다양한 데이터 유형에 적용 가능하며, 이는 다중 모드 분포에서의 샘플링이 중요한 다양한 응용 분야에서의 활용성을 시사함.
     * 튜토리얼은 확산 모델의 훈련과 샘플링 과정을 단계별로 설명하며, 이를 통해 모델의 작동 원리와 구현 방법에 대한 심층적인 이해를 돕는다.
     * 확산 모델의 훈련과 샘플링 과정은 상대적으로 복잡하며, 이를 이해하고 구현하기 위해서는 머신러닝과 딥러닝의 기본적인 지식이 필요함.
     * 이 기술을 도입할 때는 계산 비용과 훈련 데이터의 품질, 모델의 복잡성과 같은 요소들을 고려해야 하며, 이를 통해 더 정교하고 다양한 샘플을 생성할 수 있는 잠재력을 가짐.

        Hacker News 의견

     * 저자의 말: 확산 모델을 이해하려고 할 때 코드와 수학을 훨씬 단순화할 수 있다는 것을 깨달았고, 이로 인해 블로그 글과 확산 라이브러리를 작성하게 됨. 질문에 기꺼이 답변할 준비가 되어 있음.
          + 저자는 확산 모델을 이해하는 과정에서 코드와 수학을 단순화할 수 있다는 점을 발견하고, 이에 관한 블로그 글과 라이브러리를 작성함.
     * 다른 훌륭한 글, 'Diffusion Models From Scratch'는 수학적인 세부 사항을 더 자세히 다루고 있으며, 이해하기 쉬운 500줄 미만의 구현을 동반함.
          + 'Diffusion Models From Scratch'라는 글은 확산 모델에 대한 수학적인 내용을 더 깊게 다루고, 간결한 코드 구현을 제공함.
     * 이 글에는 코드가 포함되어 있어 좋음. 확산 논문은 많은 수식으로 유명하지만, 코드는 우리 같은 사람들에게 더 명확하고 이해하기 쉬움. 모든 이론 논문은 참조 구현 코드와 함께 제공되어야 함.
          + 확산 관련 논문들은 복잡한 수식으로 가득하지만, 코드는 이해하기 쉽고 정확함. 이론적인 논문들은 참조할 수 있는 구현 코드가 있어야 한다는 의견.
     * 확산 트랜스포머에 대한 확장을 보고 싶음. Sora와 다른 비디오 생성 모델을 구동하는 데 사용됨. 이 글과 'GPT From Scratch'를 결합하여 'Diffusion Transformer From Scratch' 소개를 만들면 좋을 것 같음.
          + 확산 트랜스포머에 대한 추가 정보를 원하며, 이를 통해 비디오 생성 모델을 만드는 방법에 대한 소개가 있으면 좋겠다는 의견.
     * 좋은 글이지만, 확산 모델이 확률 로그의 도함수(점수 함수)를 모델링하고, 확산 샘플링이 랑제뱅 동역학과 유사하다는 중요한 특성을 놓치고 있음. 이것이 GAN보다 훈련하기 쉬운 이유를 설명해 줌.
          + 확산 모델이 점수 함수를 모델링하고 확산 샘플링이 랑제뱅 동역학과 유사하다는 중요한 특성을 강조하며, 이것이 GAN보다 훈련이 쉬운 이유를 설명한다고 주장함.
     * 매우 흥미로움. Iterative alpha-(de)Blending 논문이 떠오름. 이 논문도 개념적으로 더 단순한 확산 모델을 설정하고, 대략적인 반복적인 투영 과정으로 이를 수식화함. 이 접근법은 노이즈 제거 오류 분석과 같은 더 흥미로운 실험을 가능하게 함.
          + Iterative alpha-(de)Blending 논문을 언급하며, 이 논문이 확산 모델을 단순화하고 반복적인 투영 과정으로 표현하는 방법을 제시한다고 언급함.
     * 확산의 아이디어 중 하나는 방대한 양의 훈련 데이터를 얻는 것인가? 즉, 무작위로 확산된 이미지들과 확산되지 않은 이미지를 대조하는 것인가?
          + 확산 모델의 아이디어 중 하나가 대량의 훈련 데이터를 활용하는 것인지에 대한 질문을 제기함.
     * 이론에 대한 좋은 설명임. 데이터셋에 독립적인 것으로 보임. 이미지 생성의 구체적인 사항에 대해 궁금함. 예를 들어, 이미지 생성기가 피아노 건반을 생성하기 어려운 이유는 무엇인가? 더 나은 중거리 제약 표현이 필요해 보임.
          + 이론 설명이 좋고 데이터셋에 독립적이라는 점을 언급하며, 이미지 생성의 구체적인 어려움, 특히 피아노 건반과 같은 복잡한 패턴을 생성하는 데 필요한 요소에 대해 질문함.
     * 모든 기계 학습 모델은 컨볼루션임을 기억하라.
          + 모든 기계 학습 모델이 컨볼루션을 기반으로 한다는 단언적인 의견을 제시함.
     * 이 글의 댓글을 사용하여 비밀 메시지를 보내는 비밀 사회가 있으니 구글링하지 말 것.
          + 댓글을 통해 비밀 메시지를 주고받는 비밀 사회가 있다는 풍자적인 주장을 함.
"
"https://news.hada.io/topic?id=13691","NTSB, 알래스카 737 MAX 9의 도어 플러그에 관한 핵심 정보를 공개하지 않는 보잉 회사 지적","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        NTSB, 알래스카 737 MAX 9의 도어 플러그에 관한 핵심 정보를 공개하지 않는 보잉 회사 지적

보잉, 알래스카 737 맥스 9 제트기의 문 플러그에 대한 중요한 세부 정보를 제공하지 않아, NTSB가 밝힘

     * 보잉 737 맥스 9 제트기의 문 플러그 패널이 비행 중에 떨어진 사건에 대해, 보잉이 중요한 정보를 제공하지 않고 있음을 미국 국가교통안전위원회(NTSB)의 제니퍼 호멘디 위원장이 밝힘.
     * 호멘디 위원장은 상원 상업위원회에 출석하여 보잉이 문 플러그를 제대로 다시 부착하지 못한 책임자에 대한 정보를 공개하지 않았다고 지적함.
     * NTSB의 예비 보고서에 따르면, 문 플러그를 고정해야 할 네 개의 주요 볼트가 보잉 공장을 떠날 때 누락되었으며, 이는 비행기 조립 중 불량 리벳 수리를 위해 문 플러그가 열렸음을 나타냄.

NTSB는 문 플러그에서 누락된 주요 볼트에 대해 말함

     * 호멘디는 NTSB가 문 플러그를 연 후 닫은 사람이 누구인지 여전히 파악하지 못하고 있으며, 보잉으로부터 요청한 문서와 정보를 여러 차례 받지 못했다고 상원 위원회에 전달함.
     * 조사관들은 이메일과 문자 메시지를 통해 문 플러그 작업이 지난 9월 중순에 이루어졌다고 믿고 있으나, 보잉은 관련 문서를 ""찾을 수 없다""고 밝힘.

보잉의 협조 부족에 대한 상원의 불만

     * 상원 청문회에서는 보잉의 협조 부족에 대한 실망감이 여러 정당에 걸쳐 나타남.
     * 민주당의 마리아 캔트웰 상원의원은 보잉의 협조 부족을 ""실망스럽다""고 표현하고, 공화당의 테드 크루즈 상원의원은 ""받아들일 수 없다""고 비판함.
     * 상원의원들은 2018년과 2019년에 발생한 두 건의 737 맥스 8 추락 사고 이후 보잉이 초기에 책임을 회피했던 것을 잊지 않고 있음.

NTSB가 찾고 있는 기록이 존재하지 않을 수도 있음

     * 호멘디는 NTSB가 찾고 있는 기록이 존재하지 않을 수도 있다고 언급하며, 이는 보잉의 품질 관리 관행에 대한 심각한 의문을 제기함.
     * 보잉은 문 플러그 제거가 문서화되지 않았다면 공유할 문서가 없을 것이라고 인정하면서도, NTSB의 조사에 계속 협력할 것이라고 밝힘.
     * 연방항공청(FAA) 또한 보잉과 그 공급업체들에서 ""체계적인 품질 관리 문제""에 대해 우려하고 있으며, 이 문제를 해결하기 위한 계획을 마련하라고 보잉에 요구함.

GN⁺의 의견

     * 이 사건은 항공기 제조업체의 품질 관리와 안전 문제에 대한 지속적인 관심을 촉발시키는 사례로, 항공 안전에 대한 대중의 인식을 높이는 데 기여할 수 있음.
     * 보잉이 정보를 제공하지 않는다는 점은 투명성과 책임성의 중요성을 강조하며, 이는 다른 산업 분야에서도 유사한 기준을 적용하는 데 영향을 미칠 수 있음.
     * 항공 안전에 대한 이해를 높이기 위해, 항공기 제조 및 유지 보수 과정에서의 품질 관리 시스템과 안전 관리 시스템에 대한 교육이 필요함.
     * 이 기사는 보잉과 같은 대형 항공기 제조사의 문제가 어떻게 국가적 차원의 안전 문제로 확대될 수 있는지를 보여주며, 이는 항공 산업에 종사하는 이들에게 중요한 교훈을 제공함.
     * 비판적인 시각에서 볼 때, 이러한 사건은 항공기 제조사의 내부 프로세스와 문화에 대한 근본적인 개선이 필요함을 시사하며, 이는 장기적으로 항공 안전을 강화하는 데 기여할 수 있음.

        Hacker News 의견

     * 보잉이 NTSB가 요청한 문서를 가지고 있지 않을 수도 있음. 법적인 이유로 인정하고 싶지 않은 것 같음.
     * 보잉, 애플 등 일부 기업들이 고객을 더 이상 중요시하지 않고, 몇 푼을 더 벌기 위해 고객의 생명을 위험에 빠뜨릴 수 있는 모든 것을 함.
     * NTSB가 보잉에게 해당 작업을 수행할 책임이 있는 직원 명단을 요청했으나, 보잉이 제공했는지 여부에 대해 의견이 갈림. NTSB는 전체 팀과 인터뷰를 하려고 할 수도 있음.
     * 보잉이 NTSB를 가로막는 것은 이전에 체결된 유예된 기소 합의가 만료된 후의 행동이 합의 위반인지에 대한 조사가 있었기 때문에 오만함으로 보임.
     * 보잉이 항공기 작업에 대한 공정 기록을 가지고 있지 않음. 이는 예상보다 심각한 문제임.
     * 여행자들이 보잉 항공기 좌석 구매를 거부하면 해결될 수 있는 간단한 해결책. 보잉이 과실이 있고 안전 프로토콜을 무시했다고 믿는다면, 그들의 사업을 지원하지 않는 것이 답임.
     * 필립 모리스, 엑손모빌, 보잉 등 이익을 최우선으로 하고, 더 큰 비용은 내부적으로 은폐함.
     * 보잉이 주목할 유일한 방법은 전체 항공기를 운항 정지시키는 것임.
     * NTSB가 보잉 직원을 찾는 이유에 혼란스러움. 예비 보고서에 따르면 문제의 문 플러그는 스피릿에 의해 제거되었고, 그 문서가 있음.
     * 보잉에게는 간단한 질문이 있음: 무능함이 더 낫나, 아니면 과실이 더 낫나? 보잉이나 그들의 PR 회사는 바닥을 쳤다고 생각할 수 있지만, 실제로는 바닥까지 갈 길이 멀음. 완전한 기록을 생산하지 못한다면 어떻게 될까? 그리고 지금 누구를 보호하고 있는가? 보험은 과실을 커버하지 않을 것이고, 고객은 무능함을 받아들이지 않을 것임.
"
"https://news.hada.io/topic?id=13783","OpenAI, 트랜스포머 디버거 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OpenAI, 트랜스포머 디버거 출시

     * Transformer Debugger(TDB)는 OpenAI의 Superalignment 팀이 개발한 도구로, 소규모 언어 모델의 특정 행동을 조사하는 데 도움을 주기 위해 만들어짐
     * 자동 해석 기술과 Sparse Autoencoder를 결합하여, 코드 작성 전에 빠른 탐색을 가능하게 하며, 특정 행동에 영향을 미치는 요소를 개입하여 확인할 수 있음
     * ""왜 모델이 이 프롬프트에 대해 토큰 A 대신 토큰 B를 출력하는가?"" 또는 ""왜 어텐션 헤드 H가 이 프롬프트에 대해 토큰 T에 주의를 기울이는가?""와 같은 질문에 답할 수 있음

릴리스에 포함된 것들

     * Neuron viewer: TDB를 호스팅하고 개별 모델 구성 요소(MLP 뉴런, 주의 집중 헤드, 오토인코더 잠재 변수)에 대한 정보가 담긴 페이지를 포함하는 React 앱
     * Activation server: 주제 모델에 대한 추론을 수행하여 TDB에 데이터를 제공하는 백엔드 서버로, 공개 Azure 버킷에서 데이터를 읽고 제공
     * Models: GPT-2 모델과 그 오토인코더에 대한 간단한 추론 라이브러리로, 활성화를 잡아내는 후크를 포함
     * Collated activation datasets: MLP 뉴런, 주의 집중 헤드, 오토인코더 잠재 변수에 대한 최고 활성화 데이터셋 예시

설치 방법

     * python/pip 및 node/npm이 필요하며, 가상 환경 사용을 권장
     * 환경 설정 후, GitHub에서 transformer-debugger를 클론하고 필요한 패키지를 설치
     * TDB 앱을 실행하려면, activation server 백엔드와 neuron viewer 프론트엔드를 설정하는 지침을 따름

변경 사항 검증

     * 변경 사항을 검증하기 위해 pytest, mypy, activation server 및 neuron viewer를 실행하여 기본 기능이 작동하는지 확인

GN⁺의 의견

     * Transformer Debugger는 인공지능 언어 모델의 작동 방식을 이해하고자 하는 연구자와 개발자에게 유용한 도구임. 이를 통해 모델의 결정 과정을 더 잘 이해하고, 잠재적인 오류나 편향을 식별할 수 있음.
     * TDB는 모델의 행동을 해석하는 데 도움을 주는데, 이는 AI의 투명성과 신뢰성을 높이는 데 기여할 수 있음. 그러나 이러한 도구의 복잡성과 전문성은 초보자가 접근하기 어려울 수 있음.
     * 비슷한 기능을 제공하는 다른 도구로는 Google의 TensorFlow Model Analysis나 Facebook의 Captum이 있으며, 이들도 모델 해석에 유용함.
     * TDB를 사용하기 전에는 해당 도구의 사용법과 언어 모델의 기본 원리에 대한 충분한 이해가 필요함. 도구를 사용함으로써 얻는 이점은 모델의 행동에 대한 깊은 통찰력이지만, 잘못 해석하면 오해를 불러일으킬 수 있음.

        Hacker News 의견

     * 일론 머스크의 소송이 OpenAI의 더 많은 공개를 촉발할 것 같다는 의견이 있음. 그의 주장이 기본적으로는 터무니없지만, OpenAI의 비영리 단체 지위와 관련된 활동 부족에 대한 합당한 질문을 제기했다는 평가.
     * ruff와 black이라는 도구가 동일한 프로젝트에서 사용된 것을 보는 것이 흥미롭다는 의견이 있음. 해당 도구들은 OpenAI의 transformer-debugger 프로젝트에 적용되었음.
     * 변압기(transformers)의 작동 원리를 이해하는 것이 역사상 가장 중요한 연구 문제 중 하나라고 주장하는 의견이 있음. 텍스트, 비디오, 오디오 등에서 현재의 대규모 언어 모델(LLM)을 단순히 확장함으로써 인공 일반 지능(AGI)을 달성할 수 있다고 가정할 때.
     * 대규모 언어 모델(LLM)이 자체 디버거에 접근하여 질의할 수 있게 되면 어떤 일이 발생할지에 대한 궁금증이 제기됨. 예를 들어, ""왜 이런 대답을 했지?"" 또는 ""내 가정을 약간 변경하면 어떤 일이 일어날까?""
     * 대규모 언어 모델(LLM)에 대한 '신경 외과 수술'을 하는 것이 상당히 멋지다고 느끼는 의견이 있음.
     * 대규모 언어 모델(LLM) 내에는 몇 개의 변압기(transformers)가 있는지, 아니면 전체가 변압기로 간주되는지에 대한 질문이 있음.
     * OpenAI가 매년 의무적으로 오픈 소스를 공개한다는 의견이 있음. 지난번에는 whisper라는 도구가 공개되었다는 언급.
     * OpenAI가 AGI를 안전하게 만들기 위해 오픈 소스 도구를 제공하는 것처럼 보이려는 매우 미미한 시도라는 비판적인 의견이 있음.
     * [삭제된 댓글]
     * [신고된 댓글]
"
"https://news.hada.io/topic?id=13688","Deno, JSR(JavaScript Registry) 공개 베타 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Deno, JSR(JavaScript Registry) 공개 베타 시작

     * npm은 JS 에코시스템에 중요하지만 너무 오래되었음
     * JSR은 현대의 변경 사항등을 반영하여 새롭게 설계한 것
          + TypeScript에 최적화, 자바스크립트 모듈 표준으로 ESM을 수용
          + 무료, 오픈소스이며 JavaScript가 동작하는 모든 곳에서 작동
          + 간단하고 빠르며 뛰어난 개발자 경험 제공
          + npm의 포크가 아닌, 그 성공을 기반으로 구축
     * Deno 및 NPM 기반 프로젝트와 동작함 (Node, Bun, Cloudflare Workers 등)

사용방법

     * 패키지 설치

# deno
deno add @luca/flag

# npm (and npm-like systems)
npx jsr add @luca/flag

     * 다른 ES Module 처럼 임포트 가능

import { printProgress } from ""@luca/flag"";

printProgress();

     * 커맨드라인에서 모듈 퍼블리시

# with deno installed
deno publish

# with npm-like systems
npx jsr publish

   npm의 패키지로 배포가 되어있는 것은 희안하군요.ㅎㅎ
"
"https://news.hada.io/topic?id=13739","1brc merykitty의 마법 SWAR: 3천 단어로 설명된 8줄 코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               1brc merykitty의 마법 SWAR: 3천 단어로 설명된 8줄 코드

1BRC 대회 소개

     * 1BRC 대회에서는 ""보통의 용의자들""을 처리한 후, CSV 파일에서 온도를 파싱하는 것이 병목 현상이 될 것이라는 예측이 있었음.
     * 온도는 -XX.X, -X.X, X.X, XX.X의 네 가지 형태로 나타날 수 있으며, 초기에는 Double.parseDouble() 라이브러리 호출을 사용했음.
     * 그러나 곧 맞춤형 솔루션이 등장했고, 이 중 하나는 루프 없이 두 개의 분기만을 가진 최적화된 방법으로 보였음.
     * 그러다가 Quân Anh Mai(@merykitty)가 제시한 솔루션으로 인해 트위터의 #1BRC 해시태그가 불타올랐음. 이 솔루션은 if 문 없이 단 하나의 파일 읽기만을 사용했음.

merykitty의 마법 같은 SWAR 분석

     * merykitty의 코드는 18개의 ALU 연산으로만 구성되어 있으며, numberOfTrailingZeros()라는 단일 저수준 함수 호출을 포함함.
     * 입력된 long 숫자에는 CSV에서 8바이트가 들어가고, 정수 형태의 온도(실제 온도의 10배)가 출력됨.
     * 이 기술은 ""SIMD Within A Register""(SWAR)라고 불리며, 표준 CPU 레지스터와 명령어를 사용함.
     * 코드는 숫자가 음수인지 감지, 부호 문자를 제거, 소수점 위치 찾기, 내용을 템플릿에 맞춰 정렬, ASCII 문자를 숫자 값으로 변환, 각 숫자에 가중치를 곱하고 모두 더하기, 부호 적용 등의 단계를 거침.
     * 이러한 단계들은 ALU 연산만을 사용하여 수행됨.

결론

     * merykitty가 단독으로 몇 일 만에 이 모든 것을 어떻게 해낼 수 있었는지는 블로그 포스트로 설명할 수 없는 진짜 미스터리임.
     * QuestDB는 오픈 소스이며, 아파치 2.0 라이선스 하에 빠른 데이터 삽입과 SQL 분석 기능을 제공함.

GN⁺의 의견

     * 이 기사는 단순한 온도 파싱 문제를 해결하기 위해 고안된 SWAR 기술의 복잡성과 창의성을 보여줌. 이는 프로그래밍에서 비트 연산의 강력함과 최적화의 중요성을 강조함.
     * 이러한 접근 방식은 특히 시스템 프로그래밍이나 성능에 민감한 애플리케이션 개발에 관심이 있는 초급 소프트웨어 엔지니어에게 흥미로운 사례가 될 수 있음.
     * 비트 연산과 최적화에 대한 이해를 높이기 위해 관련된 주제나 문제를 다루는 온라인 코딩 대회나 튜토리얼을 찾아보는 것이 도움이 될 것임.
     * 이 기술이 실제 산업 환경에서 어떻게 적용될 수 있는지, 그리고 이와 유사한 최적화 기법을 사용하는 다른 데이터베이스나 시스템이 있는지에 대한 추가적인 연구가 필요함.
     * QuestDB와 같은 시스템을 도입할 때는 성능 향상뿐만 아니라 유지보수성, 코드의 가독성, 그리고 장기적인 기술 지원과 같은 다른 요소들도 고려해야 함.

        Hacker News 의견

     * simdjson 논문과 관련된 해커뉴스 댓글 요약:
          + simdjson 논문: 이와 유사한 기술을 사용하며, 매우 잘 쓰여졌고 훌륭한 예시를 포함함.
               o 논문 링크: arXiv
               o GitHub 링크: simdjson GitHub
     * 코드 컨텍스트에 대한 해석: 제시된 해결책이 뛰어나지만, 데이터가 잘 구성되었다는 가정이 필요함. 효율적인 오류 검사와 복구 기능은 경험이 많은 파서에서 큰 가치를 지님.
     * 숫자 파싱 기술: 숫자 비트필드를 각각의 10의 거듭제곱으로 곱하고 MUL을 통해 shift/더하는 것은 알려진 기술임. Lemire의 블로그 참조.
          + Lemire 블로그 링크: Lemire's Blog
     * SWAR(SIMD Within A Register)에 대한 설명: 자바/스칼라에서 바이트 배열 뷰 var 핸들을 사용하여 효율적인 SWAR 루틴을 구현하는 예시들이 많음.
          + 예시 링크: jsoniter-scala GitHub
     * SWAR에 대한 간단한 정의: ""SIMD Within A Register""는 하나의 레지스터 내에서 SIMD 연산을 수행함.
     * BRC(Branchless Ray Casting)의 I/O 병목 현상에 대한 질문: CPU가 병목이라는 것이 이해되지 않음.
     * 68000에서의 SWAR 사용 경험: 4바이트를 한 번에 병렬로 처리하는 것이 가능했지만, 오버플로우 처리가 까다로웠음. 해당 기사를 매우 좋아함.
     * 상태 공간과 슈퍼 옵티마이저: 상태 공간이 작기 때문에 유사한 결과를 내놓는 슈퍼 옵티마이저가 존재하는지에 대한 질문.
     * AVX 명령어와 자바의 SIMD 지원: 이 알고리즘은 AVX 명령어를 사용하여 32배 병렬로 수행될 수 있지만, 자바는 특정 경우를 제외하고는 SIMD CPU 사용을 제대로 지원하지 않아 아쉬움.
     * 비트 조작에 대한 이해: 이 기사는 그 이전의 어떤 것보다 비트 조작을 더 잘 이해할 수 있게 해주었으며, 1BRC 챌린지에 대한 자바 솔루션을 제시한 저자에게 감사함.
"
"https://news.hada.io/topic?id=13745","4D 니트 드레스니트 드레스

4D 니트 드레스: 스타일 변신

     * MIT 셀프 어셈블리 랩과 미니스트리 오브 서플라이가 협력하여 4D 니트 드레스를 개발함.
     * 전통적인 의류 제작은 2D 패턴을 만들고 2D 원단을 잘라내고 바느질하는 과정을 거쳐, 재료 낭비와 추가 비용이 발생하며, 인체 해부학을 완벽히 따르지 않는 불편한 이음새가 생김.
     * 3D 니팅 혁신은 원단의 변화와 표준화된 3D 형태를 가능하게 했지만, 개인의 독특한 몸매나 스타일에 맞춘 맞춤형 니트 의류 제작은 가능하지 않았음.

4D 니트 드레스의 기술

     * 4D 니트 드레스는 열 활성화 실, 컴퓨터화된 니팅, 6축 로봇 활성화 기술을 결합하여 개인 맞춤형 핏이나 스타일을 창조함.
     * 열에 반응하는 실이 특별한 니트 구조 내에 내장되어 제어된 변형을 가능하게 하면서도 부드러움, 신축성, 복원력을 유지함.
     * 효율적인 튜브형 니팅 기술을 사용하여, 자동차 제조에 흔히 사용되는 6축 로봇 팔이 특정 영역을 가열하여 수축시키는데, 이는 전통적인 드레스 재단 과정에서 사용되는 핀과 턱 잡기를 모방하여 실시간으로 드레스를 변형시켜 완벽한 핏이나 독특한 외관을 만듦.

GN⁺의 의견

     * 4D 니트 드레스는 개인 맞춤형 패션을 현실로 만드는 혁신적인 기술로, 기존의 의류 제작 과정에서 발생하는 재료 낭비와 불필요한 노동을 줄일 수 있는 잠재력을 가짐.
     * 이 기술은 전통적인 의류 제작 방식을 혁신할 수 있으나, 고도의 기술과 장비가 필요하기 때문에 초기 비용과 유지 보수에 대한 고려가 필요함.
     * 열 활성화 실과 같은 새로운 소재의 내구성과 환경 영향에 대한 추가 연구가 필요할 수 있으며, 이 기술이 대중화되기 위해서는 소비자들의 수용성과 시장의 준비 상태도 중요한 요소임.
     * 유사한 기술을 사용하는 다른 프로젝트나 제품으로는 3D 프린팅을 이용한 맞춤형 신발이나 액세서리가 있으며, 이들 역시 개인화된 소비자 경험을 제공하는 데 초점을 맞추고 있음.
     * 4D 니트 드레스는 패션과 기술의 융합을 통해 개인의 독특한 스타일과 편안함을 추구하는 현대 소비자들에게 매력적인 제품이 될 수 있으며, 이러한 혁신이 지속 가능한 패션 산업으로의 전환에 기여할 수 있을 것으로 기대됨.

        Hacker News 의견

     * ""열 활성화 실""에 대한 댓글 요약
          + 열 활성화 실은 매우 신축성이 높은 원단 제작에 사용됨.
          + 스판덱스 원단은 원래 길이의 약 10배까지 늘어날 수 있으나, 뜨거운 공기를 사용해 신축성의 중립 지점을 재설정함.
          + 스타킹 등은 부분적으로 형태를 갖춘 상태로 직조되며, 금속 형태 위에 씌워져 뜨거운 공기를 약 1분간 쐬어줌으로써 스판덱스의 제로 포인트를 재설정함.
          + 여기에는 팬티호스 생산 라인의 예시가 있음. 형태와 열을 사용해 구겨진 원단을 형태가 있는 의류로 변형시킴.
     * ""열 수축성 원단이 3차원에서 4차원으로 변환한다는 것에 대한 의견""
          + 열 수축성 원단을 추가하는 것이 차원을 추가하고 3D에서 4D로 변환시키는 것은 아니라고 생각함. 클라인 병이나 하이퍼큐브 투영 같은 것을 기대했음.
     * ""열 수축성 재료에 대한 자세한 정보 탐색의 어려움""
          + 열 수축성 재료가 나일론이며, 나머지 실은 비스코스와 폴리에스터 혼방임을 알 수 있음.
     * ""4D 편직에 대한 설명""
          + ""4D""는 시간이 조금 지나면 스스로 편직을 완성하는 니트를 의미함. 처음에는 클라인 병 드레스 같은 것을 상상했지만, 여전히 멋진 기술임.
     * ""해당 의류의 세탁 방법에 대한 추측""
          + 이 의류는 차가운 물로 세탁해야 할 것으로 추측됨.
     * ""합성 섬유 사용에 대한 환경적 우려""
          + 합성 섬유가 의류에서 미세 플라스틱 노출의 주요 원인이며, 미래에는 이 산업을 되돌아보며 공포를 느낄 것임.
     * ""컨셉과 기술의 인상적인 면에도 불구하고 낭비 감소에 대한 의심""
          + 컨셉과 기술은 인상적이지만, ""낭비, 추가 비용/노동""을 줄이는 부분에 대해 의문을 제기함. 의류 자체는 덜 사용할 수도 있지만, 맞춤형으로 제작한다면 각 고객의 모델/마네킹을 만들어야 함.
     * ""웹사이트의 텍스트 대비에 대한 불만""
          + 해당 웹사이트의 텍스트 대비가 끔찍함.
     * ""Ministry of Supply 제품에 대한 긍정적인 평가""
          + Ministry of Supply는 항상 훌륭한 제품을 가지고 있으며, 더 많은 사람들이 이를 알아야 함.
     * ""4D라는 용어의 클릭베이트성에 대한 의견""
          + 4D라는 용어가 클릭베이트로 사용되었다고 생각함.
"
"https://news.hada.io/topic?id=13706","dockerc - Docker 이미지를 스탠드얼론 포터블 바이너리로 컴파일하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             dockerc - Docker 이미지를 스탠드얼론 포터블 바이너리로 컴파일하는 도구

     * 도커 이미지를 독립 실행형, 포터블한 바이너리로 컴파일하는 도구
     * 사용자들에게 docker run, pip install, npm i 등의 명령어 없이 실행 가능한 바이너리를 제공 가능

  특징

     * 도커 이미지를 이식 가능한 바이너리로 컴파일.
     * 루트 권한이 필요 없는 컨테이너.
     * MacOS와 Windows 지원(QEMU 사용) : 예정
     * x86_64 지원 (arm64 지원 예정)
     * 인자 지원
     * -e를 사용하여 환경 변수 지정 지원.
     * -v를 사용하여 볼륨 지정 지원.

  사용 방법

     * 최신 릴리스에서 dockerc 설치.
     * 도커 허브의 이미지 또는 로컬 도커 데몬 저장소의 이미지를 사용하여 출력 바이너리 생성.
     * 생성된 바이너리는 일반 바이너리처럼 호출 가능.
     * -e와 -v 옵션을 docker run 사용 시와 같은 방식으로 지정 가능.
     * 컨테이너 내에서 실행되는 네트워크 서비스에 직접 접근 가능, -p 지정 필요 없음.
     * 이미지 로딩에는 Skopeo 사용, 다른 위치에 대해서는 해당 문서 참조.

GN⁺의 의견

     * dockerc는 도커의 사용성을 크게 향상시킬 수 있는 도구로, 사용자가 복잡한 설치 과정 없이 애플리케이션을 실행할 수 있게 해줌. 이는 특히 비기술 사용자에게 매우 유용할 수 있음.
     * 도커 이미지를 바이너리로 컴파일하는 기능은 배포 및 배치를 단순화하며, 이는 개발자와 시스템 관리자에게 시간 절약과 효율성을 제공함.
     * 그러나 이 기술이 널리 채택되기 위해서는 보안, 성능 및 호환성과 관련된 문제들이 충분히 해결되어야 함. 예를 들어, 컴파일된 바이너리가 원본 도커 이미지만큼 안전한지, 모든 시스템에서 원활하게 작동하는지 등의 검증이 필요함.
     * 도커와 유사한 기능을 제공하는 다른 프로젝트로는 Podman이 있으며, 이는 루트 권한 없이 컨테이너를 실행할 수 있는 기능을 제공함.
     * dockerc를 도입할 때는 기존의 도커 워크플로우와의 통합, 이미지의 업데이트 및 관리 방법, 그리고 컴파일된 바이너리의 크기와 성능 등을 고려해야 함. 이 기술을 선택함으로써 얻을 수 있는 이점은 배포의 단순화와 사용의 용이성이지만, 반면에 컴파일 과정에서 발생할 수 있는 오버헤드와 잠재적인 호환성 문제를 신중히 고려해야 함.

   오 꽤 흥미롭네요.

  Hacker News 의견

     * 이것은 정말 멋진 일임.
          + 사용자는 자신의 도커를 더 배포 가능하게 만들려고 노력 중임. 현재는 QEMU 컨테이너 안에 도커 컨테이너 안에 파이썬 환경에 있는 간단한 파이썬 스크립트로 클릭을 자동화하고 netcat을 사용하는 것임. 파일 크기가 20GB로 현대 기준으로 꽤 가벼움.
     * 과거에 나는 nix-bundle¹이나 그것의 공식 대응인 nix bundle²을 사용하고 추천했음.
          + 이 도구들은 도커 이미지를 직접 관리하는 단계를 건너뛸 수 있게 해줌. 특히 도커 이미지를 만드는 것이 어렵거나 그 과정이 잊혀진 예술인 경우에 편리함.
          + nix bundle은 뚱뚱한 실행 파일뿐만 아니라 도커 이미지, AppImages, 그리고 몇 가지 다른 형식의 이미지/실행 파일도 만들 수 있음.
     * 내장된 OS와 함께 휴대용 실행 파일로 돌아가는 것이 정말 좋음.
          + ""내 컴퓨터에서는 작동한다""는 말을 새로운 수준의 문제 해결 지옥으로 끌어올림. 그럼에도 불구하고 프로젝트는 멋짐.
     * 사용자는 사람들이 이러한 것들을 실행하는 도커 컨테이너를 만들어낸 도커파일을 보내기 시작하는 것을 기다리고 있음.
     * 여기에는 어떤 위대한 우주적 아이러니가 있음.
          + 빌드하거나 설치할 필요 없이 실행 파일만 달라는 섹션 다음에는 이 프로젝트를 빌드하기 위한 zig의 주문이 바로 이어짐.
     * 이것은 멋진 진전임, Nils! AGI 하우스에서 대화한 이후 프로젝트의 진전을 보게 되어 기쁨.
          + dockerc는 Zig + crun + squashfs/overlayfs를 사용함. Nils(저자)가 이 스레드에서 더 많은 정보를 공유했음.
     * 여전히 다른 아키텍처에 대한 다른 것들이 필요함.
          + 이 시점에서는 정적으로 컴파일하고 가상 파일 시스템을 포함하는 것이 낫다고 생각함. 이것은 사실상 90년대에 Sun이 만든 것과 같음.
     * 좋은 아이디어! 이것은 실제로 어떻게 작동함?
          + 사용자는 이것이 사용자 정의 로더 + 도커 + 이미지를 실행 가능한 바이너리로 래핑하는 것이라고 추측함.
     * 랜트 그림을 사용한 것이 멋짐.
          + 다음 랜트 그림은 ""실행 파일을 실행하면 해당 애플리케이션을 포함한 창이 열려야 한다""는 내용일 것임.
     * 이것은 무엇을 의미함? 사용자가 Ruby를 설치하지 않고도 휴대용 Ruby 실행 파일을 배포할 수 있게 됨?
"
"https://news.hada.io/topic?id=13684","FDA, 최초의 처방전 없이 구매 가능한 연속 혈당 모니터 'Continuous Glucose Monitor' 승인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FDA, 최초의 처방전 없이 구매 가능한 연속 혈당 모니터 'Continuous Glucose Monitor' 승인

     * FDA, 최초의 OTC 연속혈당측정기 승인
          + 미국 식품의약국(FDA)이 최초로 시장에 출시될 수 있는 OTC(Over-the-Counter, 처방전 없이 구매 가능) 연속혈당측정기(CGM)를 승인함.
          + Dexcom Stelo Glucose Biosensor System은 인슐린을 사용하지 않는 18세 이상의 성인을 위한 통합 CGM(iCGM)으로, 경구 약물로 당뇨병을 치료하는 사람들이나 식단과 운동이 혈당 수준에 미치는 영향을 더 잘 이해하고자 하는 비당뇨병인들에게 적합함.
          + 이 시스템은 저혈당(낮은 혈당)을 사용자에게 알리도록 설계되지 않았기 때문에 문제가 되는 저혈당이 있는 개인에게는 적합하지 않음.
     * 제품 특징 및 사용 방법
          + Stelo Glucose Biosensor System은 착용 가능한 센서와 사용자의 스마트폰이나 다른 스마트 기기에 설치된 애플리케이션을 통해 혈당 수치를 지속적으로 측정, 기록, 분석 및 표시함.
          + 사용자는 각 센서를 최대 15일간 착용할 수 있으며, 그 후 새 센서로 교체해야 함.
          + 장치는 15분마다 혈당 측정치와 추세를 동반 앱에서 보여줌.
          + 사용자는 의료 제공자와 상의하지 않고 장치의 출력을 바탕으로 의료 결정을 내려서는 안 됨.
     * 임상 연구 및 안전성
          + FDA에 제공된 임상 연구 데이터는 이 장치가 다른 iCGMs와 유사하게 작동한다는 것을 보여줌.
          + 연구에서 보고된 부작용에는 국소 감염, 피부 자극, 통증 또는 불편함이 포함됨.
     * 건강 형평성 증진을 위한 FDA의 노력
          + 건강 형평성을 증진하기 위한 CDRH(Center for Devices and Radiological Health)의 전략적 우선순위의 일환으로, CDRH는 집에서의 치료와 웰빙으로의 이동을 지원하는 혁신을 계속 지원할 것임.
     * FDA 소개
          + FDA는 미국 보건복지부 산하 기관으로, 인간과 동물용 약품, 백신 및 기타 생물학적 제품, 의료 기기의 안전성, 효과성 및 보안을 확보함으로써 공중 보건을 보호함.
          + 이 기관은 또한 국가의 식품 공급, 화장품, 식이 보충제, 전자 방사선을 방출하는 제품의 안전성과 보안을 책임지며, 담배 제품을 규제함.

GN⁺의 의견

     * 이번 FDA의 승인은 당뇨병 관리에 있어 중요한 이정표를 나타내며, 환자들이 의료 서비스 접근성에 구애받지 않고 자신의 건강을 모니터링할 수 있는 새로운 방법을 제공함.
     * 연속혈당측정기는 당뇨병 관리에 혁신적인 도구로, 사용자가 실시간으로 혈당 변화를 모니터링하며 생활 습관을 조정할 수 있게 해줌.
     * 그러나 이 기술이 저혈당과 같은 긴급 상황에 대한 경고 기능을 제공하지 않는다는 점은 사용자에게 추가적인 주의가 필요함을 의미함.
     * 비슷한 기능을 가진 다른 제품으로는 Abbott의 FreeStyle Libre가 있으며, 이 역시 환자들에게 혈당 모니터링의 편의성을 제공함.
     * 이 기술을 도입할 때는 사용자 교육과 의료진의 지속적인 지원이 중요하며, 장기적인 건강 관리와 비용 효율성을 고려해야 할 것임.

   저희 와이프가 레귤러토리 어페어로 일을 하고 본인도 전당뇨를 앓고 있어서 여러 글루코스 모니터링 장치와 서비스를 쓰고 있었는데, 아무래도 처방이 필요 했던 지금까지의 불편함을 벗어날 수 있어서, 이 덱스컴의 제품이 꽤 고무적이라고 하더군요.
   이제는 누구나 약간의 관심(과 돈…)이 있으면 바로 착용해서 쓸 수 있으니, 당뇨병 인구가 많은 미국 내에서 큰 반향이 있을 것이라고…

   라며 자기도 사겠다고 밑밥을 까네요.

   한가지 더… 랄까…
   이렇게 벽이 낮아지는 대신 보험사들의 요구사항은 더 까다로워지지 않을까 싶은 걱정은 있습니다.
   지속적 혈당 모니터링을 해야만 특정 상품에 가입할 수 있다던가… 말이죠.

   덕분에 조금 더 이해가 된 것 같습니다.
   감사합니다.

        Hacker News 의견

     * 한 사용자는 최근 건강 이상으로 인해 의식을 잃었으며, 의사인 아내는 당뇨병 위험이 높은 남편이 저혈당일 수 있다고 생각했다고 함. 친절한 내분비학자를 만나 CGM(연속 혈당 모니터링)을 2주간 사용했지만, 저혈당 범위에 도달하지 않았음에도 불구하고 데이터를 보며 건강한 선택을 하게 되었다고 함. 처방전이 없어 인도에서 가족을 통해 구하려 했으나 비용이 높아 구매하지 못했다고 언급함.
     * 다른 사용자는 가족 구성원이 내분비학자인데, FDA가 새로운 인슐린 펌프와 알고리즘 기반 소프트웨어를 승인한 것에 대해 연구 방법론에 대한 불편함을 표현함. 이 장치가 관리와 학습을 재시작할 수 있는 '리셋 버튼'이 있는지에 대한 의문을 제기하며, 현재 설정으로는 이 장치를 추천하지 않겠다고 말함.
     * 또 다른 사용자는 CGM을 재미로 사용해보았다고 함. 온라인 처방 서비스를 통해 Abbott Freestyle Libre 3를 구입하고, 다양한 음식이 혈당에 미치는 영향을 관찰하기 위해 팔에 부착했다고 함. 데이터 생태계가 개선되면 다시 시도할 의향이 있다고 언급함.
     * 인슐린 의존형 당뇨병(T1D) 환자인 사용자는 몇 년 전 Dexcom을 사용했으나, 당뇨병 관리가 잘 되어 큰 차이를 느끼지 못해 중단했다고 함. 센서가 비싸고 신뢰성이 떨어져 손가락으로 혈당을 측정하는 방식으로 돌아갔다고 함.
     * 6년 동안 CGM을 착용한 사용자는 이 기기가 건강에 큰 변화를 가져왔다고 말함. CGM에 초점을 맞춘 회사를 창업했으나 시기상조였고, 다시 시도할지 고민 중이라고 함.
     * 7개월 동안 CGM을 사용한 사용자는 인슐린 저항성에 영향을 미치는 다양한 요소에 대해 많은 것을 배웠으며, 건강한 습관을 형성하는 데 도움이 되었다고 함.
     * T2D(제2형 당뇨병)을 앓았던 사용자는 CGM을 사용하여 음식과 운동에 대한 신체 반응을 많이 배웠으나, 땀을 많이 흘려 센서가 자주 떨어졌다고 함. 심층적인 가격의 이식형 CGM이 있다면 사용할 의향이 있다고 언급함.
     * 연구 참여 경험이 있는 사용자는 Abott FreeStyle Libre 2 센서를 사용했으며, Juggluco와 같은 FOSS(Free and Open Source Software) 앱을 통해 분 단위로 데이터를 얻을 수 있었다고 함. Nightscout과 같은 FOSS 웹 도구를 통해 실시간 그래프와 보고서를 생성할 수 있다고 함.
     * Abbott Freestyle Libre 3를 사용하는 사용자는 T2D 관리에 대한 통찰력을 얻었으며, 금식 혈당 수치가 2-3일 동안 증가하면 생활 습관을 조정할 필요가 있다고 느꼈다고 함. 나쁜 수면과 혈당 수치 상승 간의 일관된 상관관계를 발견했다고 함.
     * 캐나다에서는 처방전 없이 CGM을 구할 수 있으며, Abbot Freestyle Libre 시리즈만 사용 가능하다고 함. 비용은 약 $100이며 2주간 지속된다고 함. 팔 뒤쪽에 부착하는 것이 문제였으나, 가슴에 부착하는 것이 더 효과적이었다고 함. 의료 보험이 지원한다면 CGM을 사용하는 것이 좋다고 조언함.
"
"https://news.hada.io/topic?id=13760","Devteam이 아이폰을 정복한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Devteam이 아이폰을 정복한 방법

아이폰 개발팀이 아이폰을 정복하다

     * 2007년 여름, 애플이 아이폰을 발표함.
     * 발표에 대한 반응은 엇갈림.
     * 캐나다에서는 아이폰 출시가 없었으나, 로저스와의 협약으로 2008년 3G 모델이 출시됨.

아이폰 개발 팀

     * 아이폰 개발 팀은 소프트웨어만을 사용하여 아이폰을 모든 통신사에서 사용할 수 있도록 목표를 가짐.
     * 블로그를 통해 개방성을 추구하며 정기적으로 진행 상황을 보고함.
     * 2007년 여름, 많은 업데이트가 이루어짐.

iphone.fiveforty.net 상태 바

     * 진행 상황을 추적하기 위해 홈페이지에 상태 바가 있었음.
     * 세 가지 단계의 성취도를 빨간색에서 녹색으로 표시함.
     * 2007년 7월 6일에는 여섯 가지 목표 중 두 가지가 달성됨.

의도된 사용 방법

     * 아이폰은 애플 스토어에서 $499(4GB) 또는 $599(8GB)에 구매 가능했음.
     * 개봉 시 아이튠즈에 연결해야 하는 화면이 나타남.
     * 아이튠즈를 통해 AT&T 멤버십에 가입해야 활성화됨.

이정표

     * 개발팀은 아이폰을 스마트폰으로 되돌리기 위해 여섯 가지 이정표를 설정함.
     * 시스템 이해, 활성화 우회, 시스템 수정, 사용자 정의 실행 파일 수정, 모든 통신사에 연결할 수 있도록 기반대 수정, 전체 과정을 자동화하는 앱 생성 등이 포함됨.

암호 해독 이정표

     * 아이튠즈는 아이폰 소프트웨어 아카이브(.ipsw)를 다운로드하여 기기를 공장 상태로 복원함.
     * 목표는 아카이브 내의 모든 파일을 이해하는 것임.
     * 두 개의 큰 dmg 아카이브 중 하나는 암호화되지 않았고, 간단한 명령어로 마운트할 수 있었음.

활성화 이정표

     * 새 아이폰은 활성화되지 않은 상태였음.
     * dvdjon이 PhoneActivationServer를 발표하여 활성화 방법을 제시함.
     * PhoneActivationServer는 항상 같은 서명된 토큰을 반환함.

쓰기 접근 이정표

     * 활성화된 전화는 아이튠즈 GUI에 나타나고 사용자는 파일을 업로드할 수 있었음.
     * 파일 업로드 프로세스(acfd)는 chroot 감옥에 있었고, 사용자 파티션만 ""rw""로 마운트됨.
     * DevTeam은 chroot 감옥에서 벗어나 시스템 파티션에 쓸 수 있는 방법을 찾음.

툴체인 / 제3자 앱 활성화 이정표

     * 이 부분에 대한 정보는 많지 않으나, 최소 12명이 작업에 참여함.
     * 2007년 7월 19일까지 ARM을 대상으로 하는 binutils 툴체인이 완성됨.

잠금 해제 이정표

     * DevTeam은 2007년 8월 14일경에 잠금 해제에 근접함.
     * 아이폰은 스마트 부분(iOS)과 전화/모뎀(베이스밴드)으로 구성됨.
     * 잠금 해제 과정은 잘 알려져 있었으며, NCK(네트워크 제어 키)를 찾는 것이 관건이었음.

모든 것을 함께 묶기

     * 잠금 해제의 전체 지침이 2007년 9월 12일에 발표됨.
     * 캐나다를 포함한 대륙별 증언이 함께 발표됨.

에필로그

     * 애플은 2007년 9월 27일에 아이폰 펌웨어 V1.1.1을 발표함.
     * 진행 상황 바가 초기화되고, 고양이와 쥐의 게임이 시작됨.

더 깊이 들어가기

     * 2007년 잠금 해제에 대한 추가적인 연구를 위한 링크 목록 제공됨.

GN⁺의 의견

     * 이 기사는 2007년 아이폰 잠금 해제의 역사적 순간을 상세히 설명함으로써 기술 역사에 대한 흥미로운 통찰을 제공함.
     * 당시 개발자들의 기술적 도전과 혁신적인 해결책은 오늘날의 스마트폰 해킹 및 보안 연구에 중요한 배경 지식을 제공함.
     * 잠금 해제 과정은 복잡하고 전문적인 지식을 요구했으며, 이는 초보 소프트웨어 엔지니어에게는 이해하기 어려울 수 있음.
     * 이 기사는 기술적 세부 사항을 이해하려는 사람들에게 도움이 되며, 비판적인 시각에서 볼 때, 당시의 보안 조치가 얼마나 취약했는지를 보여줌.
     * 현재도 유사한 기능을 제공하는 다양한 잠금 해제 도구가 있으나, 사용자는 이러한 도구를 사용할 때 법적 및 보안상의 위험을 고려해야 함.
"
"https://news.hada.io/topic?id=13695","로코드 접근 방식의 지키지 못한 약속","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          로코드 접근 방식의 지키지 못한 약속

     * 진화하는 프로그래밍 트렌드와 도구 맥락에서 살펴봤을 때, 팀에서 로코드 도구의 실제 유효성은 게임 체인저보다 환상에 가까울 수 있음
     * 소프트웨어 개발의 진정한 핵심은 문제 해결, 애플리케이션 요구를 효율적으로 충족하는 알고리즘, 데이터 구조, 인터페이스를 만드는 데 있음
     * 그래픽 사용자 인터페이스를 활용해 소프트웨어 개발을 간소화하는 걸 목표하면서, 로코드 도구는 강력한 애플리케이션을 설계하는 근본 과제를 간소화하지 않은 채 프로그래밍 언어의 구문을 대체함
     * 이 접근 방식은 소프트웨어 개발의 진정한 복잡성을 완화하는 데 실패하면서 여러 문제를 초래할 수 있다는 게 저자 주장
     * 궁극적으로 진정한 가치를 전달하는 팀 능력에 부정적 영향을 미칠 수도 있음
     * 저자는 로코드 도구의 또 다른 문제로 벤더 종속 위험, 성능과 효율성 문제도 지적

   Aws가 있다고 네이버 블로그나 티스토리가 멸종하지 않았으니... 다른 영역이 아닌가 합니다
   네이버 블로그가 더 선호되는 경우도 있는 법이지요

   저도 로우코드에 굉장히 회의적인 입장이라 많이 공감가네요..
"
"https://news.hada.io/topic?id=13781","NVMe TCP를 통한 노트북 복제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          NVMe TCP를 통한 노트북 복제

NVME TCP를 이용한 노트북 복제

     * 최근 새 노트북을 구입하고 사용을 위해 설정해야 했음.
     * 기존에 알려진 단계를 반복하는 것에 대한 의욕이 없었음.
     * 동료의 제안으로, 기존 디스크를 새 노트북에 복사하는 방법을 고려함.

복제 과정에 대한 의문

     * 기존 노트북을 열고 새 디스크를 USB로 연결하는 도구가 없음.
     * 전체 디스크 암호화를 사용하고 있으며, 기존 노트북은 512GB, 새 노트북은 1TB NVME를 사용함.
     * LUKS 파티션 크기 조정에 익숙하지 않음.

동료의 제안

     * NVME over TCP를 사용하여 디스크를 네트워크를 통해 공유하고 전체 디스크 복사를 수행하라고 제안함.
     * 제안된 단계는 다음과 같음:
          + 기존 노트북에서 nvmet-tcp를 사용하여 디스크를 내보냄.
          + 새 노트북으로 디스크 복사를 수행함.
          + 파티션을 1TB 전체를 사용하도록 크기 조정함.
          + LUKS 크기를 조정함.
          + 마지막으로 BTRFS 루트 디스크의 크기를 조정함.

NVME TCP를 통한 디스크 내보내기

     * systemd-storagetm.service를 사용하는 것이 가장 쉬운 방법으로 제안됨.
     * 대신 GRML 구조 CD로 두 노트북을 부팅하고 nvmet-tcp 모듈을 사용하여 NVME 디스크를 내보내는 단계를 수행함.

디스크 복사

     * dd 명령을 사용하여 루트 디스크를 새 노트북으로 복사함.
     * 새 노트북에 이더넷 포트가 없어서 Wi-Fi만을 사용해야 했으며, 전체 512GB를 복사하는 데 약 7시간 반 소요됨.
     * 복사 속도는 약 18-20MB/s였음.

파티션 및 LUKS 컨테이너 크기 조정

     * parted를 실행했을 때 파티션 테이블이 디스크 크기와 일치하지 않는 것을 감지하고 수정을 요청함.
     * cloud-guest-utils를 설치하여 growpart를 사용하여 파티션을 1TB까지 확장함.
     * cryptsetup-resize를 사용하여 LUKS 컨테이너 크기를 증가시킴.
     * 시스템에 로그인한 후 BTRFS 파일 시스템의 크기를 조정함.

결론

     * 이 과정의 유일한 이점은 새 노트북을 사용하면서 기존 노트북을 사용하는 것과 같은 느낌을 가질 수 있다는 것임.
     * 새 노트북을 설정하는 데 일반적으로 1~2주가 걸리지만, 이 경우 그 시간을 절약할 수 있음.
     * NVME over TCP를 사용하여 디스크를 내보내는 방법을 배웠다는 추가적인 이점이 있음.

GN⁺의 의견

     * NVME over TCP를 이용한 노트북 복제는 기존 시스템 환경을 새 하드웨어로 빠르게 이전할 수 있는 효율적인 방법을 제시함.
     * 이 기술은 시스템 관리자나 개발자들에게 시간을 절약하고 설정 오류를 최소화할 수 있는 방법으로 흥미를 줄 수 있음.
     * 그러나 네트워크 속도에 크게 의존하며, Wi-Fi만 사용할 경우 상당한 시간이 소요될 수 있어 이는 고려해야 할 단점임.
     * 유사한 기능을 제공하는 Clonezilla나 Acronis 같은 도구들이 있으나, NVME over TCP는 네트워크를 통한 직접적인 디스크 접근이라는 독특한 이점을 가짐.
     * 이 기술을 도입할 때는 네트워크 설정, 암호화된 디스크의 처리, 파일 시스템의 크기 조정 등에 대한 충분한 지식이 필요함.

        Hacker News 의견

     * 저자의 시나리오에서는 NVMe/TCP를 사용하는 이점이 없음. 단순히 dd를 사용하여 직렬 블록 복사를 수행하기 때문에 동시 I/O를 활용하지 못함. 복잡한 명령어들은 간단한 netcat으로 대체 가능.
          + 목적지 노트북에서는 $ nc -l -p 1234 | dd of=/dev/nvme0nX bs=1M 사용.
          + 출발지 노트북에서는 $ nc x.x.x.x 1234 </dev/nvme0nX 사용.
          + 목적지에서 dd는 쓰기 작업을 버퍼링하여 더 빠르고 효율적으로 만듦. 출발지/목적지에서 gzip/gunzip을 추가하면 디스크가 가득 차 있지 않은 경우 전체 작업이 훨씬 빨라짐. 이 방법은 네트워크를 통해 PC 이미지를 만드는 가장 좋아하는 방법임. gzip에 --fast 옵션을 전달하거나, 더 빠른 lz4/unlz4로 대체하는 것이 좋음. 최근에 1TB NVMe가 있는 새로운 윈도우 노트북을 이미징할 때 사용했으며, GigE를 통해 20분 정도 걸렸고 결과 이미지는 20GB였음. 보통 이 lz4 이미지를 백업하고 몇 년 후 노트북을 기부할 때 unlz4 | dd로 복원함. 매우 편리함.
          + Linux 커널 모듈 nvme-tcp에 대해서는 몰랐지만, 매일 새로운 것을 배움. 이 모듈의 유용성은 dd로 원시 접근하는 것보다는 원격 NVMe에 파일 시스템을 마운트하는 데 더 있음.
          + Linux에서 최대 파이프 버퍼 크기는 64kB이므로 dd bs=X 인수는 기술적으로 그보다 클 필요가 없음. 그러나 bs=1M은 해가 되지 않고(64kB 읽기를 1MB가 될 때까지 버퍼링함) 파이프 크기가 증가할 경우를 대비하여 미래에도 사용 가능함. 일부 netcat 버전에는 입력 및 출력 블록 크기를 제어하는 옵션이 있어 dd bs=X 사용 필요성을 줄여주지만, 구조 복구 디스크에서는 이러한 옵션이 없는 netcat 바이너리가 보통 사용됨.
     * nbdkit과 nbdcopy를 사용하는 것이 훨씬 간단함.
          + nbdkit file /dev/nvme0n1
          + nbdcopy nbd://otherlaptop localfile
     * 새 노트북을 설정해야 했을 때, USB-C 케이블을 사용하여 10Gb/s로 전송하는 것이 유용함. 다른 옵션으로는 WiFi밖에 없었음.
          + 컴퓨터를 연결하면 애드혹 네트워크가 형성되고 rsync를 사용하여 전송 가능. 링크가 포화된 것으로 보여 다른 프로토콜을 사용하는 것은 무의미함.
     * 최근에 WiFi를 통해 약 200GB의 파일을 복사해야 했음. 연결 실패 시 처음부터 다시 시작하지 않도록 rsync를 사용했지만, 적어도 6시간이 걸림. 더 나은 방법이 궁금함.
          + dd 방법으로 어떤 보장을 받는지? 결과 블록 레벨 장치의 md5를 비교해야 하는지?
     * 저자가 왜 네트워크를 통해 btrfs를 파이프하지 않았는지 이해할 수 없음. 먼저 btrfs 스냅샷을 만든 다음 btrfs send => nc => network => nc => btrfs receive를 통해 사용 중인 블록만 전송함.
     * 이전에 노트북을 전송할 때 양쪽에서 dd와 nc를 결합한 설치 프로그램을 실행했음. 기억나는 대로, 전송을 더 빠르게 하기 위해 gzip도 추가함.
          + 새 노트북에 이더넷 포트가 없어서 압축이 약간의 속도 향상을 제공했을 수 있어 저자의 방법보다 더 빨랐을 것임.
     * Clonezilla를 사용하면 실제 데이터 블록만 복사하고 파티션을 자동으로 조정할 수 있음. 항상 이 방법을 사용함.
          + 일반적으로 NVMe 디스크를 노트북에서 꺼내고 고속 도크에 넣음.
     * 수십 년 동안 실제로 OS를 ""설치""하지 않았으며, 파일을 복사하고 필요에 따라 조정함. 보통 새 파일 시스템을 만들어 파일 시스템 유형/파라미터(예: 블록 크기), 암호화 등을 업데이트하는 기회로 사용하고 파일을 rsync로 전송함.
          + 그럼에도 불구하고, 계획을 세우는 사람이라면 NixOS와 같은 더 선언적인 접근 방식을 사용하는 것이 더 나을 수 있음. 여기서는 설정만 복사한 다음 모든 것을 자동으로 다시 설치할 수 있음.
     * FDT(Fast Data Transfer)에 대한 언급이 없음.
          + 불행히도 Java로 작성된 놀라운 소프트웨어(전송 성능 측면에서). 직관적이지 않은 CLI 옵션을 가지고 있지만, 본 적 있는 가장 빠른 전송임.
          + 너무 빨라서 속도를 인위적으로 제한하지 않으면 때때로 전체 로컬 네트워크를 점유함.
          + -limit <rate> 옵션으로 전송 속도를 지정된 속도로 제한할 수 있음. K(KiloBytes/s), M(MegaBytes/s), G(GigaBytes/s)를 접미사로 사용할 수 있음.
          + 목적지에서 파일 조각화를 일으키지만, 실제로는 아무에게도 중요하지 않음.
"
"https://news.hada.io/topic?id=13749","모든 프로그래머가 알아야 할 필수 숫자들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         모든 프로그래머가 알아야 할 필수 숫자들

프로그래머가 알아야 할 지연 시간 숫자를 시각적으로 표현

     * L1 캐시 참조: 1나노초
     * 분기 예측 실패: 3나노초
     * L2 캐시 참조: 4나노초
     * 뮤텍스 잠금/해제: 17나노초
     * 1 Gbps 네트워크를 통한 1KB 데이터 전송: 44나노초
     * 주 메모리 참조: 100나노초
     * Zippy를 이용한 1KB 데이터 압축: 2마이크로초
     * 메모리에서 1MB 순차 읽기: 3마이크로초
     * SSD에서 4K 무작위 읽기: 16마이크로초
     * SSD에서 1MB 순차 읽기: 49마이크로초
     * 동일 데이터센터 내 왕복 시간: 500마이크로초
     * 디스크에서 1MB 순차 읽기: 825마이크로초
     * 디스크 탐색: 2밀리초
     * 캘리포니아에서 네덜란드까지 패킷 전송 후 돌아오기: 150밀리초

GN⁺의 의견

     * 이 데이터는 프로그래머들이 시스템 설계나 성능 최적화를 할 때 중요한 참고 자료가 될 수 있음. 각각의 연산이나 작업이 얼마나 시간이 걸리는지를 알면, 어떤 부분이 병목 현상을 일으키는지 파악하고 개선할 수 있음.
     * 예를 들어, 메모리 접근 시간과 네트워크 지연 시간을 비교하면, 네트워크 호출을 최소화하고 메모리 내에서 데이터를 처리하는 것이 훨씬 빠르다는 것을 알 수 있음. 이는 분산 시스템 설계에 있어 중요한 고려 사항이 될 수 있음.
     * 이러한 지연 시간은 하드웨어와 기술의 발전에 따라 변할 수 있으므로, 최신 정보를 유지하는 것이 중요함. 예를 들어, SSD의 발전으로 인해 디스크 읽기 시간이 크게 단축되었음.
     * 새로운 기술이나 오픈소스를 도입할 때는 이러한 지연 시간을 고려하여 시스템의 성능을 예측하고, 어떤 기술이 실제 환경에서 가장 효과적일지 결정해야 함. 예를 들어, 메모리 내 캐싱 솔루션을 사용하면 네트워크 지연을 줄일 수 있지만, 캐시 일관성과 데이터 동기화에 대한 추가적인 고려가 필요함.

   https://colin-scott.github.io/personal_website/research/…
   여기가 더 보기 좋네요.

   어우 UI/UX 진짜 맘에 안드네요...

   정말이네요 ㄷㄷ,,

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 사용자는 JavaScript 코드를 공유하며, 이 코드는 ""latency-container"" 클래스를 가진 HTML 요소의 자식 요소들을 순회하면서, 각각의 지연 시간(latency)을 출력함.
          + 출력된 지연 시간은 L1 캐시 참조부터 데이터 센터 내 왕복 시간까지 다양한 컴퓨팅 작업에 대한 것임.
     * 두 번째 댓글 요약:
          + 사용자 인터페이스(UI)의 사용성이 좋지 않다고 평가하며, 이는 사용자 경험(UX)에 대한 흥미로운 사례로 제시됨.
          + UI가 주요 기능을 수행하는 데 있어 사용자의 기대에 못 미치고, 이해하기 어렵다고 비판함.
          + 사용자는 도움말을 읽어야 하지만, 대부분의 사용자는 이를 선호하지 않음.
          + 이러한 문제점들에 대한 토론을 통해 UX에 대한 교훈을 얻을 수 있음을 강조함.
     * 세 번째 댓글 요약:
          + 제목에 ""Latency""가 빠져 있어 검색 시 다른 결과들을 찾기 어렵다고 지적함.
          + 다른 소스를 참조하며, 더 많은 지연 시간 정보를 제공하는 텍스트 기반의 자료를 선호함.
     * 네 번째 댓글 요약:
          + 화면에 표시된 UI의 일부가 읽기 어렵다고 비판함.
          + 텍스트가 90도로 회전되어 있어 불편하며, UI는 재미있지만 실제로 정보를 얻기에는 기능보다 형태에 중점을 둔 것 같다고 평가함.
     * 다섯 번째 댓글 요약:
          + 지연 시간 정보의 기원과 관련된 자료들을 나열하며, 이 정보의 역사적 배경을 제공함.
     * 여섯 번째 댓글 요약:
          + 네트워킹과 관련된 지연 시간이 직관적이지 않다고 언급함.
          + Google Stadia와 같은 서비스가 기대치에 비해 어떻게 빠를 수 있는지에 대한 개인적인 경험을 공유함.
     * 일곱 번째 댓글 요약:
          + Firefox 모바일 사용자로서, UI가 무엇을 보여주려는지 이해하지 못하고 있음을 표현함.
     * 여덟 번째 댓글 요약:
          + UI에 표시된 숫자의 의미를 이해하지 못하고 있으며, 이것이 미래의 연도를 나타내는 것처럼 보인다고 혼란을 표현함.
     * 아홉 번째 댓글 요약:
          + 제목이 다소 미스터리하며, 16, 256, 65536 등의 숫자에 대한 내용을 기대했다고 언급함.
          + 2030년에 1K 바이트를 기가비트 네트워크로 보내는 것이 CPU 내부의 분기 예측 실패보다 빠를 것이라는 주장에 대해 회의적임을 표현함.
"
"https://news.hada.io/topic?id=13718","구글 전 엔지니어, 영업 비밀 도용 혐의로 기소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구글 전 엔지니어, 영업 비밀 도용 혐의로 기소

전 구글 엔지니어, 중국 회사와 협력하며 AI 기술 비밀 훔친 혐의로 기소

     * 전 구글 소프트웨어 엔지니어가 중국에 기반을 둔 두 회사와 비밀리에 협력하면서 구글의 인공지능(AI) 기술 비밀을 훔친 혐의로 기소됨.
     * 중국 국적의 Linwei Ding은 캘리포니아 뉴어크에서 연방 무역 비밀 도용 혐의 4건으로 체포되었으며, 각 혐의에 대해 최대 10년의 징역형에 처해질 수 있음.
     * 미국 법무부는 샌프란시스코에서 열린 미국 변호사 협회 회의에서 이 사건을 발표했으며, 메릭 갈랜드 법무장관은 중국의 경제 스파이 활동과 AI 기술 발전에 따른 국가 안보 우려를 경고함.

구글, 기술 도난 사실 발견하고 법 집행 기관에 신고

     * 구글은 해당 직원이 ""수많은 문서""를 훔쳤다고 판단하고 사건을 법 집행 기관에 신고함.
     * 구글 대변인 Jose Castaneda는 회사의 기밀 상업 정보와 무역 비밀을 보호하기 위한 엄격한 안전장치가 있다고 밝힘.
     * 구글은 조사 후 해당 직원이 문서를 훔쳤다고 확인하고 사건을 신속히 법 집행 기관에 넘겼으며, FBI의 도움에 감사를 표함.

인공지능 기술의 중요성과 경쟁

     * 인공지능은 고기술 분야 경쟁자들의 주요 전쟁터이며, 누가 지배하느냐에 따라 주요 상업적 및 보안 영향이 있음.
     * 최근 몇 주 동안 법무부 지도자들은 외국 적대 세력이 AI 기술을 이용해 미국에 부정적인 영향을 미칠 수 있다고 경고함.
     * 리사 모나코 부법무장관은 행정부의 다부처 '혁신 기술 타격대'가 AI를 집행 우선 순위 목록의 최상위에 둘 것이라고 발표함.

기소 내용 상세

     * 2019년 구글에 입사한 Ding은 회사의 슈퍼컴퓨팅 데이터 센터에 대한 기밀 정보에 접근할 수 있었으며, 2년 전부터 수백 개의 파일을 개인 구글 클라우드 계정으로 업로드하기 시작함.
     * 도난이 시작된 지 몇 주 후, Ding은 AI 기술을 사용한다고 홍보하는 중국의 초기 단계 기술 회사로부터 최고 기술 책임자(CTO) 직위를 제안받음.
     * Ding은 중국으로 여행하여 해당 회사의 투자자 회의에 참여하고 자본을 모으려고 시도함.
     * 또한, 그는 슈퍼컴퓨팅 칩으로 구동되는 '대규모 AI 모델'을 훈련시키려는 중국 기반의 스타트업 회사를 별도로 설립하고 CEO로 활동함.
     * Ding은 구글에 어떠한 소속도 공개하지 않았으며, 구글은 그를 '초급 직원'으로 묘사함.
     * 그는 지난해 12월 26일 구글에서 사임함.

추가 조사 및 기소 과정

     * 구글은 Ding이 베이징의 투자자 회의에서 중국 회사의 CEO로 발표한 사실을 알게 됨.
     * 또한, 다른 직원이 미국 내 구글 건물에서 Ding의 출입증을 스캔하여 그가 실제로 중국에 있을 때 건물에 있는 것처럼 보이게 한 감시 영상을 검토함.
     * 구글은 Ding의 네트워크 접근을 중단하고 노트북을 잠그며, 그의 네트워크 활동 기록을 검색하는 동안 무단 업로드를 발견함.
     * FBI는 1월에 Ding의 집에서 수색 영장을 집행하고 그의 전자 장치를 압수하며, 나중에 구글에서 훔친 것으로 추정되는 500개 이상의 독특한 파일이 담긴 개인 계정의 내용에 대한 추가 영장을 집행함.

GN⁺의 의견

     * 이 사건은 기업 내부의 기술 유출 문제와 관련하여 기업들이 얼마나 강력한 보안 조치를 취해야 하는지를 보여줌. 기업은 내부 직원의 배신 가능성에 대비하여 지속적으로 모니터링하고 감사 시스템을 강화해야 함.
     * AI 기술의 중요성이 커짐에 따라, 이와 같은 기술 도난 사건은 국가 안보에도 영향을 미칠 수 있음. 이는 기술 보호와 지식 재산권의 중요성을 강조하며, 국가 간 기술 경쟁이 얼마나 치열한지를 보여줌.
     * 이 기사는 기술 기업들이 직면하고 있는 지적 재산 보호의 도전과, 특히 중국과 같은 국가들과의 경제적 긴장 관계 속에서 발생하는 산업 스파이 활동에 대한 인식을 높일 수 있음.
     * 기업들은 이러한 사건을 예방하기 위해 더욱 철저한 직원 심사와 계약 조건, 그리고 내부 데이터 접근 제어를 강화해야 할 필요가 있음. 또한, 기술 유출을 감지하고 대응할 수 있는 첨단 보안 소프트웨어의 도입도 고려해야 함.
     * 이 기술 유출 사건은 오픈소스 커뮤니티에서도 주목을 받을 수 있으며, 오픈소스 소프트웨어의 투명성과 공유 정신이 기업의 폐쇄적인 기술 환경과 어떻게 다른지를 비교하는 계기가 될 수 있음.
"
"https://news.hada.io/topic?id=13741","Rolldown - Rust로 작성된 Rollup 호환 번들러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Rolldown - Rust로 작성된 Rollup 호환 번들러

     * 향후 Vite에 번들러로 사용하기 위해 Rust로 작성된 자바스크립트 번들러
     * Rollup 호환 API와 플러그인 인터페이스를 제공하지만 범위는 esbuild와 더 비슷할 것

Rolldown 을 개발하는 이유

     * 현재 Vite는 내부적으로 두 개의 번들러를 사용
          + esbuild : 종속성 사전 번들링, TypeScript / JSX 변환, 타겟 낮추기 및 minification을 위해 사용
          + Rollup : 프로덕션 빌드에 사용하며 롤업 호환 플러그인 인터페이스를 지원
     * 두 번들러 모두 훌륭하지만, 각각 다른 번들러가 제공하는 기능이 부족하기 때문
          + esbuild는 매우 빠르고 기능이 풍부하지만 출력, 특히 청크 분할 제한 측면에서 애플리케이션을 번들링하는 데 적합하지 않음
          + Rollup은 애플리케이션을 번들링하기 위해 성숙하고 실전 테스트를 거쳤지만 네이티브 언어로 컴파일된 번들러보다 훨씬 느림
     * 두 개의 다른 번들러를 사용해야 하는 것은 여러 가지 면에서 최적이 아님
          + 출력 간의 미묘한 차이로 인해 개발 빌드와 프로덕션 빌드 간에 동작 차이가 발생할 수 있음
          + 사용자 소스는 프로덕션 빌드 내내 여러 도구에 의해 반복적으로 구문 분석, 변환 및 직렬화되므로 피할 수 있는 많은 오버헤드가 발생
     * 이상적으로는 Vite가 네이티브 수준의 성능, 구문 분석/직렬화 오버헤드를 방지하는 내장 트랜스폼, 롤업과 호환되는 플러그인 인터페이스, 대규모 애플리케이션에 적합한 고급 빌드 출력 제어 기능을 제공하는 단일 번들러를 활용할 수 있기를 바람
     * 이게 바로 우리가 Rolldown을 구축하는 이유
          + Rolldown은 Rust로 작성되었으며 현재 파서와 리졸버를 활용하는 Oxc 위에 구축됨. 또한 향후 Oxc의 트랜스포머와 미니파이너가 출시되면 이를 활용할 계획
          + 장기적인 목표는 Vite 사용자가 (프레임워크를 통해 직간접적으로) 마찰을 최소화하면서 내부적으로 롤다운을 사용하는 Vite 버전으로 전환할 수 있도록 하는 것
          + 동시에 롤다운은 독립형 번들러로도 바로 사용할 수 있게 될 것

Rollup 호환성 및 차이점

     * Rolldown은 Rollup의 API 및 플러그인 인터페이스와 최대한 일치하여 쉽게 채택할 수 있도록 하는 것을 목표로 함
     * 간단한 사용 사례에서는 Rollup을 대체하는 역할을 할 수 있을 것. 그러나 특히 고급 옵션이 관련된 엣지 케이스에서는 약간의 차이가 있을 수 있음
     * JS에서 Rust로 포팅하려는 의도로 시작했지만, 곧 최상의 성능을 달성하기 위해서는 Rust의 작동 방식에 맞춰 코드를 작성하는 것이 우선시되어야 한다는 것을 깨달았음
     * Rolldown의 내부 아키텍처는 Rollup보다는 esbuild에 더 가깝고, 청크 분할 로직도 Rollup의 그것과 다를 수 있음
     * Rolldown의 범위도 Rollup보다 더 넓고 esbuild와 더 유사. CommonJS 지원, node_modules 해상도가 기본으로 제공되며 향후에는 TypeScript / JSX 변환 및 축소도 지원할 예정

   Turbopack VS Rolldown
   가슴이 웅장해지는 번들러 싸움!
"
"https://news.hada.io/topic?id=13774","빠르게 성장하는 회사들의 데일리스크럼 문화 뜯어보기 - 팀스파르타","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  빠르게 성장하는 회사들의 데일리스크럼 문화 뜯어보기 - 팀스파르타

   스타트업 애자일 문화와 그것을 구성하는 데일리 스크럼의 의미, 스타트업 문화 전반에 걸친 기조직 문화에 대한 논의와 함께 팀스파르타의 빠른 성장을 가능케 한 효과적인 데일리스크럼 방식에 대한 팁을 나누고자 합니다.

   각자의 조직과 팀에 적용해볼 수 있는 올바른 데일리 스크럼 방식에 대해 고민하는 계기가 되길 바라며, 앞으로 매 주 목요일마다 스타트업을 대표하는 기업 실무진 분들과 함께 각 기업의 데일리 스크럼 문화를 조명할 예정이오니 많은 관심 부탁드립니다.

   그 첫 시간으로 팀스파르타의 데일리 스크럼 방식을 살펴보도록 하겠습니다.

   이곳 포럼의 다른 유저들이 올린 본문들과는 본문의 서술 방식이 거리가 있어서 이런 부분을 좀 바꾸시면 좋겠습니다.
   보통 본문의 내용은 링크에 있는 원문 내용을 충분히 요약하여 본문만으로 어느정도 전체적인 내용의 파악이 가능하게 되어있습니다.
   다른 분께서도 지적하셨지만 클릭 유도로 느껴지지 않게 개선해주시면 좋겠습니다.

   네! 해당 부분 다음 콘텐츠에는 본문에서 전반적인 내용을 파악할 수 있도록 명확하게 작성하겠습니다 :)

   피드백 주셔서 감사합니다!

   처음부터 끝까지 인터뷰 형식이라
   관련 회사나 인물을 전혀 모르고서는
   인사이트를 얻기가 어렵네요

   정리된 컨텐츠나
   표 혹은 이미지를 이용하여 재구성했다면
   어떨까 싶습니다

   말씀주신 부분들 다음 콘텐츠부터는 고려해서
   작성해보겠습니다!

   피드백 주셔서 감사합니다 :)

   꾸준히 해당 블로그 글만 올리시는데, 본문이 항상 요약이 아닌 클릭 유도로 보입니다.

   콘텐츠 만큼은 진심을 담아 좋은 콘텐츠를 통해 선한 영향을 끼칠 수 있도록 노력하고 있습니다.

   항상 콘텐츠 읽어봐주셔서 감사합니다!

   해당 부분 다음 게시글부터는 챙기겠습니다.
   피드백 주셔서 감사합니다 :)
"
"https://news.hada.io/topic?id=13698","3년간의 iMessage에서 자동 생성된 책 시리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      3년간의 iMessage에서 자동 생성된 책 시리즈

iMessage 대화를 물리적 책으로 만들기 가능한가?

     * iMessage 대화 내역을 기억하는 것이 어렵고, 때때로 과거의 메시지를 검색하여 정보를 찾아보고 싶은 욕구가 있음.
     * iMessage는 검색 기능은 개선되었지만, 과거 메시지를 둘러보기에는 불편함이 있어, 특정 날짜로 바로 가는 기능이 없음.
     * 이러한 불편함을 해결하고자, 가장 큰 대화를 물리적인 책 형태로 만드는 아이디어를 생각해냄.

아이폰에서 메시지 추출하기

     * 아이폰에서 메시지를 추출하기 위해, Mac에 백업한 후 sms.db 파일을 찾아 SQLite 데이터베이스로 변환하는 과정이 필요함.
     * iPhone Wiki의 도움을 받아 백업 폴더에서 sms.db 파일을 찾아내고, sqlite3 명령어를 사용하여 데이터베이스의 테이블을 확인함.

SQL을 이용한 텍스트 메시지 쿼리

     * 데이터베이스 스키마를 이해하고 SQL 조인을 사용하여 실제 대화를 추출하는 과정을 거침.
     * 일부 메시지는 message.text가 아닌 message.attributedData에 이진 데이터로 저장되어 있어, 이를 해석하기 위한 추가 작업이 필요함.
     * imessage-database 라이브러리를 사용하여 iMessage 데이터베이스를 읽고 Rust 데이터 구조로 출력하는 기능을 활용함.

LaTeX 문서 생성

     * LaTeX를 사용하여 텍스트 메시지를 아름다운 문서로 변환하는 과정을 설명함.
     * 메시지를 LaTeX 코드로 변환하고, 유니코드를 지원하지 않는 LaTeX의 한계를 XeLaTeX을 사용하여 해결함.
     * Google의 Noto Emoji 폰트를 사용하여 흑백 이모지를 문서에 삽입함.

인쇄 주문

     * 실제 책으로 인쇄하기 위해 Barnes & Noble Press를 이용하여 저렴한 비용으로 책을 인쇄함.
     * LaTeX에서 생성된 PDF로부터 커버 디자인을 만들고, 인쇄 주문을 완료함.
     * 몇 주의 기다림 끝에 실제 책을 손에 들고, 이를 통해 과거 대화를 쉽게 돌아볼 수 있게 됨.

직접 만들어보기

     * 소스 코드는 아직 완성되지 않았지만, GitHub에서 제공되므로 관심이 있다면 직접 시도해볼 수 있음.

GN⁺의 의견

     * 이 프로젝트는 개인의 디지털 기록을 물리적 형태로 보존하고자 하는 현대적인 욕구를 반영함. 과거의 대화를 책으로 만들어 보관하는 것은 디지털 시대에 새로운 형태의 추억 저장 방식을 제시함.
     * LaTeX를 사용하여 문서를 생성하는 과정은 프로그래밍과 문서 작성이 결합된 예로, 기술적인 문서 작성에 관심이 있는 초급 소프트웨어 엔지니어에게 유용한 사례가 될 수 있음.
     * 이 기사는 개인 데이터의 백업과 변환 과정을 다루고 있어, 데이터 관리와 보안에 대한 중요성을 상기시킴. 사용자는 자신의 데이터를 안전하게 다루는 방법에 대해 더욱 주의를 기울여야 함.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Chatbooks나 Blurb가 있으며, 이들은 사용자의 사진이나 소셜 미디어 게시물을 책으로 만드는 서비스를 제공함.
     * 이 기술을 도입할 때 고려해야 할 사항으로는 개인 정보 보호, 데이터 변환의 정확성, 인쇄 비용 등이 있으며, 이를 통해 디지털 데이터를 물리적 형태로 영구 보존하는 장점과 함께, 데이터 손실 위험을 줄일 수 있는 실질적인 이점이 있음.

        Hacker News 의견

     * 개인 통신 기록의 중요성을 강조하며, 이를 서비스로 제공하는 것이 멋질 것이라는 의견.

     ""개인적인 서신 기록을 더 많이 보존해야 한다는 의견에 동의함. 이를 서비스로 제공하는 것도 흥미로울 것.""
     * 누군가 자신의 라이브러리를 실제로 사용하는 것을 보고 기뻐하는 개발자의 반응.

     ""내 라이브러리를 실제로 사용하는 사례를 보고 매우 기쁨.""
     * 제2차 세계대전 당시 조부모 간의 편지와 일기를 잘 보존한 이야기와, 후손들이 같은 기쁨을 누리지 못할 것이라는 우려.

     ""조부모님의 편지와 일기를 잘 보존한 이야기와, 후손들이 같은 경험을 하지 못할 것에 대한 우려.""
     * 개인 메시지의 전체 기록을 출판사에 보내는 것에 대한 불안감을 표현하는 의견.

     ""개인 메시지의 전체 기록을 출판사에 보내는 아이디어에 대한 불안감.""
     * 영국인을 위해 WhatsApp 메시지를 출력하는 프로젝트에 대한 흥미와, 이를 위해 Rust를 배워야 한다는 자조적인 반응.

     ""WhatsApp 메시지를 출력하는 프로젝트에 대한 흥미와 Rust 학습에 대한 자조적인 반응.""
     * 개인 대화 기록을 보존하는 것에 대한 부정적인 시각을 나타내며, 개인 메시지는 일시적이어야 한다는 의견.

     ""개인 대화 기록을 보존하는 것에 대한 부정적인 시각과 메시지의 일시성에 대한 의견.""
     * 맥에서 iMessage를 내보낼 수 있는 파이썬 스크립트에 대한 정보 제공.

     ""맥 사용자를 위한 iMessage 내보내기 파이썬 스크립트 정보.""
     * 채팅 기록을 시각화하고 주제별로 클러스터링하는 것이 흥미롭다는 의견과, 이를 물리적 형태로 인쇄할 때 검색 가능성을 제공할 수 있는 아이디어.

     ""채팅 기록의 시각화와 주제별 클러스터링에 대한 흥미로운 아이디어와 물리적 형태의 검색 가능성에 대한 제안.""
     * 디지털 정보가 사라질 경우, 인쇄된 책이 21세기 생활을 연구하는 유일한 자료가 될 수 있다는 생각.

     ""디지털 정보의 소멸 가능성과 인쇄된 책의 역사적 가치에 대한 생각.""
     * 블로그를 TTS 모드로 듣는 것에 대한 경험과, 특정 섹션을 건너뛸 수 없어 웃음을 자아낸 경험담.

     ""TTS 모드로 블로그를 듣는 경험과 특정 섹션을 건너뛰기 어려워 웃음이 나온 경험담.""
"
"https://news.hada.io/topic?id=13756","기초 원리에서 출발한 몬테카를로 그래프 탐색","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        기초 원리에서 출발한 몬테카를로 그래프 탐색

몬테카를로 그래프 탐색의 기본 원리

     * 몬테카를로 트리 탐색(MCTS)은 트리 대신 방향 그래프에 적용되는 ""몬테카를로 그래프 탐색""(""MCGS"")으로, 때때로 구현하기 까다로운 것으로 여겨짐.
     * 기존 학술 참고문헌은 트리에 대한 MCTS의 ""표준"" 설명을 따르기 때문에 그래프로 일반화하는 것을 개념적으로 이해하기 어려움.
     * 이 문서는 더 직관적이라고 여겨지는, 본질적으로 동등하지만 더 깔끔한 설명을 제시하고, 그래프 탐색이 왜 이런 방식으로 작동해야 하는지 기본 원리에서 유도함.

소개 / 배경

     * 게임 트리 탐색이나 다른 트리 탐색 응용에서는 같은 상태로 이어지는 여러 가능한 움직임이나 행동의 시퀀스를 찾을 수 있음.
     * 예를 들어, 체스에서 1. d4 d5 2. Nf3은 1. Nf3 d5 2. d4와 같은 위치로 이어짐.
     * 게임에서 이러한 상황이 가능할 때, 탐색 깊이와 함께 가능한 경우의 수가 기하급수적으로 증가하여 깊은 탐색을 필요 이상으로 비용이 많이 들게 만듦.
     * 이상적으로는 이러한 탐색의 분기들이 계산을 공유하도록 하고 싶음.
     * 그러나 표준 MCTS 구현은 게임을 분기 트리로 취급하고 트리 내의 중복된 위치를 비효율적으로 재탐색함.

MCTS의 일반적인 설명 - 실행 통계의 트리

     * MCTS는 트리의 노드를 통과하는 플레이아웃의 실행 통계를 추적하는 알고리즘으로 종종 설명됨.
     * 각 노드는 게임의 단일 상태를 나타내며, 방문 횟수(N)와 플레이아웃에 의해 샘플링된 유틸리티 값의 실행 평균(Q)을 추적함.
     * MCTS의 단일 반복 또는 플레이아웃은 트리를 따라 내려가면서 탐색할 다음 행동을 샘플링하고, 새로운 상태에 도달하면 트리를 확장하며, 새로운 상태의 유틸리티 U를 추정하고, 트리를 다시 올라가면서 각 노드에서 N을 증가시키고 샘플링된 새로운 유틸리티 U로 평균 Q를 업데이트하는 과정으로 구성됨.

그래프에서 잘못되는 것은 무엇인가?

     * 위 알고리즘을 트리 대신 방향 비순환 그래프에 그대로 적용하면, 알고리즘이 부정확해질 수 있음.
     * 이는 MCTS가 멀티암드 밴딧 기반 방법의 확장으로서 플레이아웃의 실행 통계 측면에서 일반적으로 설명되기 때문임.
     * Czech, Korus, Kersting은 이러한 문제를 해결하고 사운드 알고리즘에 도달했지만, 온라인 정책 학습 관점에서 MCTS를 접근하는 대안적인 방법이 있음.
     * 이 대안적인 설명에서는 그래프로의 일반화가 상대적으로 자연스럽게 나타남.

MCTS를 정규화된 정책 최적화로 다시 보기

     * MCTS가 다른 노드에서 통계를 업데이트할 때, 실제로는 온라인 정책 학습의 한 형태를 실행하고 있음.
     * MCTS의 방문 분포는 신경망에서의 사전 정책 P를 점진적으로 개선하여 기대 유틸리티를 최대화하는 ""사후"" 정책을 대략적으로 나타냄.

올바른 몬테카를로 그래프 탐색 수행

     * 그래프로 MCTS를 확장할 때 발생하는 모든 문제는 부모 노드로부터의 자식 노드 방문만을 가정하는 데서 비롯됨.
     * 이론은 PUCT가 선택한 누적 행동 횟수가 최적화된 정책 π를 근사하는 사후 정책을 제공한다는 것을 보장하므로, 이를 추적해야 함.
     * 노드가 보고하는 Q 값이 사후 정책의 예상 가치라는 해석을 사용하면, 개별 플레이아웃을 어떻게 계산할지에 대해 다루지 않고도 재귀적 Q 공식을 적용할 수 있음.

구현 선택에 대한 논의

     * 이 문서에서 제시된 알고리즘은 Czech, Korus, Kersting의 알고리즘과 매우 유사하지만, 몇 가지 구현 선택과 몇 가지 사소한 차이가 있음.
     * Q 값의 ""오래됨""을 줄이기 위한 전략이나 점진적 대신 동일한 업데이트를 사용하는 것과 같은 구현의 단순성을 위해 선택할 수 있는 여러 가지 방법이 있음.

GN⁺의 의견

     * 이 기사는 몬테카를로 그래프 탐색(MCGS)의 복잡성과 그것을 이해하기 위한 새로운 접근법을 제시함으로써 인공지능과 게임 이론 분야에 관심 있는 사람들에게 흥미를 끌 수 있음.
     * MCTS와 같은 알고리즘은 체스나 바둑과 같은 복잡한 전략 게임에서 중요한 역할을 하며, 이러한 게임의 인공지능 개발에 기여함.
     * 그러나 이 기사에서 다루는 내용은 초급 소프트웨어 엔지니어에게는 다소 어려울 수 있으며, 이론적인 배경 지식이 필요함.
     * MCGS를 구현할 때 고려해야 할 사항으로는 알고리즘의 효율성과 정확성을 어떻게 균형잡을 것인가가 있으며, 이는 실제 게임 환경에서의 성능에 큰 영향을 미칠 수 있음.
     * 비슷한 기능을 제공하는 다른 프로젝트나 제품으로는 DeepMind의 AlphaZero가 있으며, 이는 체스, 바둑, 쇼기에서 인간 최고수를 능가하는 수준에 도달했음.

        Hacker News 의견

     * 그래프 탐색은 인공지능의 추론 발전에 필요한 것으로, 단순한 LLMS는 실패할 것임. 링크에는 게임 테이블용 Zobrist 해싱을 포함한 많은 좋은 참고자료가 있음. 언어 기반 상태 설명을 위한 좋은 해싱을 찾아야 그래프 탐색이 계산적으로 폭발하지 않음. 트리 검색에 대한 좋은 읽을거리로는 'Thinking Fast and Slow'와 'Teaching Large Language Models to Reason with Reinforcement Learning'이 있으며, 이들은 MCTS 접근법을 다른 현재의 RL 전략들과 비교함.
     * HN URL에서 바로 KataGo의 천재 개발자를 인식함. 그의 Reddit의 cbaduk 게시물들은 일관되게 훌륭함.
     * ""Monte-Carlo Tree Search""라는 이름에 대해, 언급된 알고리즘에는 ""Monte-Carlo""가 없으며 완전히 결정론적이라는 점을 독자들이 알아차려야 함. MCTS가 일반적으로 결정론적으로 구현된다는 것은 이상함. 샘플링에 무작위성이 있다고 가정했음.
     * 언급된 논문은 MCTS를 연구할 때 내 레이더에서 완전히 벗어났음. 다음 기회에 이 수정을 시도하는 것이 매우 재미있을 것임.

   배경 지식:
     * LLMS: 이 컨텍스트에서 LLMS는 특정한 기술을 지칭하는 것이 아니라, 일반적인 기계 학습 시스템을 의미할 수 있음.
     * Zobrist 해싱: 게임 상태를 효율적으로 해싱하기 위한 기술로, 특히 보드 게임에서 많이 사용됨.
     * MCTS (Monte-Carlo Tree Search): 무작위 샘플링을 통해 최적의 결정을 내리는 알고리즘으로, 보통 게임과 같은 결정 과정에서 사용됨.
     * Reinforcement Learning (RL): 시행착오를 통해 학습하는 기계 학습의 한 분야로, 보상 시스템을 통해 최적의 행동 전략을 학습함.
"
"https://news.hada.io/topic?id=13709","Show GN: 우리에겐 음악이 늘 필요하다 | LA DrugStore | 플레이스트 공유서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: 우리에겐 음악이 늘 필요하다 | LA DrugStore | 플레이스트 공유서비스

   우리는 기쁠 때, 슬플 때, 우울하거나, 거리를 걸을 때, 요리를 하거나, 코딩을 할 때 음악을 듣습니다. 음악은 우리를 위로해주고, 치유해주며, 더 집중하게 만들어 줍니다. 한국에서는 유명한 밈인 ""음악만이 나라에서 허락한 유일한 마약""이라는 말이 떠올라 연초에 만든 LA Drug Store를 공개합니다.

   이번 프로젝트는 쉬는 동안 @nahee 님과 함께 만든 서비스에요. 나희님도 마침 방학이셔서 금방 작업할 수 있었습니다. (구글 검수가 가장 빡셌음)

   음악이 사람을 치유하거나 더 나아지게 혹은 더 집중하게 만드는 약과 같다면, 약국이나 병원에서 약을 처방하듯이, 서로에게 플레이리스트를 처방해준다면? 이라는 생각으로 이 서비스를 사용하고 즐겼으면 좋겠습니다. 여러분의 플레이리스트에 대해 이야기 해주셔도 좋구요.
"
"https://news.hada.io/topic?id=13759","최고의 에세이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                최고의 에세이

최고의 에세이란 무엇인가

     * 최고의 에세이는 잘 쓰여진 것이 아니라, 사람들이 이미 알고 있지 않은 놀라운 내용을 전달하는 것.
     * 중요하고 놀라운 주제에 대해 쓰여진 에세이가 최고의 에세이가 될 가능성이 높음.
     * 과학적 발견이나 기술적 발견을 설명하는 에세이가 특히 중요하며, 시간이 지나면서 그 중요성은 변할 수 있음.

에세이를 잘 쓰는 방법

     * 에세이는 아이디어를 발견하는 방법으로, 질문에서 시작하여 답을 찾아가는 과정.
     * 초기 질문은 중요하며, 새로운 통찰이나 접근 방식이 필요함.
     * 에세이는 특정한 단어의 나열로 시작하여, 재검토와 수정을 통해 정확하고 완전한 답을 찾아가는 과정.

질문과 답변의 순환 과정

     * 에세이는 질문에서 시작하여 답변을 통해 새로운 질문을 불러일으키는 순환 과정.
     * 여러 가능한 답변 중에서 일반성과 신선함을 고려하여 한 가지 경로를 선택함.
     * 재작성을 통해 더 나은 답변을 찾아가며, 필요한 경우 이전의 내용을 삭제하거나 수정함.

초기 질문의 중요성

     * 초기 질문은 에세이의 품질에 상한선을 설정하며, 아이디어의 연결성에 따라 다양한 주제로 확장될 수 있음.
     * 에세이는 위험을 감수하고 다양한 주제에 대해 쓰는 것으로, 대담한 질문이 좋은 에세이로 이어질 수 있음.

에세이 작성자의 태도

     * 에세이 작성자는 다양한 주제에 대한 호기심과 관심을 가져야 하며, 이는 좋은 에세이로 이어질 수 있음.
     * 좋은 초기 질문은 여러 분야에 영향을 미치며, 이미 철저히 탐구된 것으로 여겨지는 주제일수록 좋음.

에세이의 시간적 가치

     * 에세이는 시간에 따라 그 가치가 변할 수 있으며, 영구적인 중요성을 가진 주제에 대해 쓰는 것이 이상적임.
     * 시간을 초월한 에세이는 새로운 발견이 문화에 통합되지 않아 미래의 독자에게도 새로움을 제공해야 함.

GN⁺의 의견

     * 이 기사는 에세이 작성에 대한 깊은 성찰을 제공하며, 작가가 자신의 생각을 어떻게 발전시키고 정제하는지에 대한 통찰력을 제공함.
     * 에세이 작성은 단순히 글을 쓰는 것 이상의 창의적 과정이며, 이는 소프트웨어 개발과 같은 다른 창의적 분야에도 적용될 수 있는 원칙임.
     * 작가는 독자들에게 에세이를 통해 새로운 아이디어를 탐구하고 발견하는 과정의 중요성을 강조함.
     * 비판적으로 볼 때, 이 기사는 모든 독자가 에세이 작성에 능숙하거나 관심이 있을 것이라고 가정하는 경향이 있으며, 이는 실제로는 다양한 독자층에게 적용되지 않을 수 있음.
     * 에세이 작성 기술을 향상시키고자 하는 독자들에게는 ""The Elements of Style""과 같은 고전적인 글쓰기 안내서를 추천할 수 있으며, 이는 글쓰기의 기본 원칙과 명료성을 강조함.

        Hacker News 의견

     * ""최고의 에세이""라는 개념은 다소 비논리적이지만, 이와 같이 탐구하는 것은 흥미로운 글이 됨.
          + 에세이라는 용어는 몽테뉴가 ""Essays""라는 책을 통해 만들어지거나 대중화되었으며, 프랑스어로 ""시도하다""를 의미함.
          + 이러한 맥락에서 에세이는 최고를 찾는 것이 아니라 시도하는 과정에서 발견을 하는 것에 초점을 맞춰야 함.
     * 에세이 본문과 주석을 분리하는 것은 읽기 어렵게 만듦.
          + 주석 참조가 있을 때마다 본문과 주석 탭을 오가며 읽는 것이 독서 경험을 방해함.
          + 주석을 본문에 포함시키는 것이 독자에게 더 쉬울 것이며, 특히 주석이 짧고 관련성이 있고 통찰력이 있는 경우 더욱 그러함.
          + 어떤 텍스트가 본문에 포함되고 어떤 텍스트가 주석으로 가는지 기준이 궁금함.
     * ""넓이는 읽고, 말하고, 보는 것에서 오지만, 깊이는 하는 것에서 온다. 어떤 분야에 대해 정말로 배우고 싶다면 그 분야에서 문제를 해결해야 한다""라는 인용구를 매우 좋아함.
     * 오디오 버전: https://playtext.app/doc/g9w6EexTa6mKAZWhMMVF
     * ""올해의 립스틱 색상""에 관한 에세이라면 어떨까?
          + ""Death of a Pig""는 새로운 과학적 아이디어를 전달하지 않았고, 지적으로 놀랍지도 않았음.
          + ""Great Essays""라는 제목으로도 방어할 수 있지만, 그레이엄은 여기서 더 높은 목표를 가지고 있으며, 최고의 에세이를 쓰는 방법에 대한 레시피를 실제로 제시하지는 않았음.
          + 발드윈, 디디온, 올리버 삭스와 같은 위대한 에세이 예시들은 새롭고 놀라운 아이디어를 개발하려는 의도로 시작하지 않았을 수도 있음.
     * 해커스 앤 페인터스(Hackers and Painters)의 낡은 복사본을 소유하고 있으며, ""pg로부터 드문 놓침""이라는 말을 자주 하는 사람으로서, 이것은 pg로부터의 큰 놓침이라고 생각함.
          + 발견, 과학과 기술 그리고 더 넓은 세계와의 교차점, 문제를 해결하기 위해 무언가를 하는 것의 중요성에 대해 이야기함.
          + 가장 중요하게는, 실제로 놀라운 통찰력이 숨어있는 답을 가진 무모한 질문을 가지고 있어서, 공허한 열변을 피할 수 있음.
          + YC가 여전히 좋은 것인지에 대한 무모한 질문을 제기함.
     * 최고의 에세이를 쓰는 과정과 성공적인 스타트업을 개발하는 과정 사이의 병렬성에 놀람.
          + 둘 다 가치 창출의 상한선을 설정하는 좋은 질문으로 시작해야 함.
          + 둘 다 호기심을 필요로 하며, 직관에 반하는 통찰력을 드러내길 바람.
          + 둘 다 시간의 기능이며, 오늘 좋은 스타트업이 영원한 것은 아니며, 좋은 에세이가 영원한 것도 아님.
     * 더 많은 필기 에세이가 있었으면 좋겠음.
     * 많은 재작성을 할 의향이 있다면, 처음부터 올바르게 추측할 필요가 없음.
          + 한 가지 방향을 따라가 보고 충분하지 않다면 되돌아가서 자르는 것이 가능함.
          + 현재 작성 중인 에세이에서 많은 양의 산만한 생각과 노트를 작성함.
          + 이러한 과정은 에세이의 핵심에 영향을 줄 수 있는 흥미로운 부분을 탐색하지 않는 것을 상상하는 것과 같음.
     * 샘 알트만(Sam Altman)에게 감사를 표하는 것이 흥미로움.
          + 2020년 7월 이후 처음으로, 29개의 에세이 중 처음으로 그레이엄의 에세이에서 감사를 표함.
          + 이것은 또한 OpenAI에서의 소동 이후 그레이엄의 첫 번째 에세이임.
"
"https://news.hada.io/topic?id=13802","React Print - React로 고품질 PDF 작성하기 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 React Print - React로 고품질 PDF 작성하기 오픈소스

     * PDF용 React UI 키트를 사용하여 PDF를 빌드 및 생성하고 문서를 인쇄
     * 간단하고 재사용 가능한 컴포넌트와 템플릿으로 인보이스, 문서, 브로셔등을 쉽게 제작 가능
     * 100% 레이아웃 제어: 여백, 머리글, 바닥글 등을 포함한 레이아웃을 모두 제어 가능
     * PDF에 동적인 데이터 연동: 데이터베이스의 데이터를 읽어서 PDF에 통합

   pdf, 리액트

   옥상옥… 리액티브할 필요가 없는 pdf에 리액트라니… 리액트 컴포넌트를 클래식 html팀플릿의 레이아웃&partial(include, content_for/yield, …)처럼 쓰는…
"
"https://news.hada.io/topic?id=13792","Nvtop - Nvidia/AMD/Intel GPU를 위한 리눅스 태스크 모니터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Nvtop - Nvidia/AMD/Intel GPU를 위한 리눅스 태스크 모니터

     * NVTop = ""Neat Videocard TOP""
     * GPU와 가속기를 위한 태스크 모니터
     * 여러대의 GPU에 대한 정보를 처리하며, htop과 비슷한 방식으로 정보를 출력
     * 현재 지원 벤더 : AMD (Linux amdgpu 드라이버), Apple (제한적인 M1 & M2 지원), Huawei (Ascend), Intel (Linux i915 드라이버), NVIDIA (Linux 전용 드라이버), Qualcomm Adreno (Linux MSM 드라이버)

NVTOP 옵션 및 인터랙티브 명령어

     * 인터랙티브 설정 창: F2를 눌러 사용자의 필요에 맞게 인터페이스를 특화할 수 있는 설정 유틸리티 제공.
     * 환경 설정 저장: 설정 창에서 설정한 환경을 F12를 눌러 저장하면, 다음 번 nvtop 실행 시 불러옴.
     * NVTOP 매뉴얼 및 명령어 옵션: 매뉴얼 페이지 제공(man nvtop), 명령어 도움말은 nvtop -h 또는 nvtop --help로 확인 가능.

GPU 지원

     * AMD: amdgpu 드라이버를 통한 AMD GPU 지원. 커널 5.14 이상에서 GPU를 사용하는 프로세스 확인 가능.
     * Intel: i915 리눅스 드라이버를 통한 Intel GPU 지원. 커널 5.19 이상에서 GPU를 사용하는 프로세스 확인 가능.
     * NVIDIA: NVML 라이브러리를 통한 지원. 케플러 마이크로아키텍처 이전의 GPU는 일부 쿼리를 지원하지 않음.
     * Adreno: msm 리눅스 드라이버를 통한 Adreno GPU 지원. 커널 6.0 이상에서 GPU를 사용하는 프로세스 확인 가능.
     * Apple: Metal을 사용한 Apple에 대한 초기 지원 포함. Apple 빌드 시에만 지원.
     * Ascend: DCMI API(버전 6.0.0)를 통한 Ascend 지원. 현재 DCMI는 제한된 API만 지원.

빌드

     * 필요 라이브러리: ncurses(사용자 인터페이스), NVIDIA(NVML), AMD(libdrm), Intel(i915) 등.
     * 빌드 과정: git clone으로 소스 코드를 복제하고, cmake로 빌드 후 make install로 시스템에 설치.

배포별 설치 과정

     * Ubuntu / Debian: snap 또는 apt를 통한 설치 지원. PPA를 통해 최신 버전의 nvtop 설치 가능.
     * Fedora / Red Hat / CentOS: AppImage 또는 dnf를 통한 설치 지원.
     * OpenSUSE: zypper를 통한 설치 지원.
     * Arch Linux: pacman을 통해 nvtop 설치.
     * Gentoo: layman과 emerge를 통해 nvtop 설치.
     * AppImage: 독립 실행형 애플리케이션으로 제공. 실행 권한 부여 후 실행.
     * Snap: snap install로 설치 후, 프로세스 제어 및 GPU 정보 점검을 위한 권한 부여 필요.
     * Docker: NVIDIA 드라이버 및 nvidia-docker 필요. docker build와 docker run으로 실행.

GN⁺의 의견

     * NVTOP은 다양한 GPU 벤더를 지원하며, 리눅스 기반 시스템에서 GPU 모니터링을 위한 강력한 도구임.
     * 이 도구는 시스템 관리자와 개발자들에게 GPU 사용 현황을 실시간으로 파악할 수 있는 효과적인 방법을 제공함.
     * GPU 모니터링은 특히 머신러닝, 데이터 분석, 게임 개발 등 GPU 의존적인 작업을 수행할 때 중요함.
     * NVTOP과 유사한 기능을 제공하는 다른 오픈소스 프로젝트로는 gpustat이 있으며, 사용자는 자신의 필요에 맞는 도구를 선택할 수 있음.
     * 오픈소스 프로젝트인 만큼, 커뮤니티의 기여를 통해 지속적인 개선과 새로운 기능 추가가 이루어질 수 있음.

        Hacker News 의견

     * nvtop이나 nvidia-smi는 GPU 사용 상황에 대한 좋은 개요를 제공하지만, 실제 작업 속도를 반영하는 데는 적합하지 않음을 발견함. AI 성능에 관심이 있다면, 개별 커널을 프로파일링하기 위해 Nsight Compute CLI를, 매크로 뷰를 위해서는 Nsight Systems를 추천함. PyTorch를 사용하는 경우 PyTorch 프로파일러 사용을 권장함.
     * apt install이 작동하지 않는 문제에 대해 불만을 표함. NVIDIA와 관련된 설치 문제가 자주 발생하며, 이로 인해 리눅스 재설치 시 많은 시간을 소비해야 함을 지적함. 드라이버, CUDA, CUDA 툴킷, cuDNN 등 여러 계층과 버전 충돌이 혼란을 야기한다고 비판함.
     * Nvitop이라는, 사용자가 선호하는 또 다른 유틸리티를 소개함.
     * nvtop과 bottom을 리눅스에서 선호하는 자원 모니터로 언급하며, nvtop이 NVIDIA 장치뿐만 아니라 비NVIDIA 장치에서도 작동한다는 사실을 배웠음을 공유함.
     * btop을 선호하는데, 이는 최신 버전에서 일반 프로세스 모니터링뿐만 아니라 GPU 모니터링도 수행함을 언급함.
     * 리눅스 그래픽 카드 유틸리티가 다중 플랫폼을 지원하게 되어 기쁘다고 말하며, 이전의 드라이버별 방식에서 벗어난 것을 긍정적으로 평가함.
     * gpustat이라는 선호하는 유틸리티를 소개하며, 훈련에 문제가 있는지 잘 진행되고 있는지 알 수 있는 최소한의 정보를 제공한다고 설명함.
     * Zenith라는 자신의 프로젝트를 소개하며, 이는 NVIDIA GPU 모니터링뿐만 아니라 디스크, CPU, Top과 같은 기능을 결합한 것임을 설명함.
     * Home Assistant를 사용하게 되면서 모든 데이터 소스를 통합하고 싶어짐을 표현함. 데이터를 원하는 대로 렌더링할 수 있으며, sensors2mqtt라는 프로젝트를 찾아내어 이를 사용하고 싶다는 의견을 나타냄.
     * Nouveau 드라이버를 지원했으면 좋겠다는 바람을 표현함.
"
"https://news.hada.io/topic?id=13715",""페이스트(Paste) 기술을 함부로 다루지 마세요"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ""페이스트(Paste) 기술을 함부로 다루지 마세요""

복사 및 붙여넣기 방해 금지

     * 웹 애플리케이션이 입력 필드에 내용을 붙여넣거나 복사하는 것을 방지할 때 매우 성가심.
     * 잘못된 이메일 주소를 붙여넣는 것은 사용자의 책임임.
     * 1Password와 같은 도구를 사용하여 다양한 정보를 기억하고, 이를 복사하여 텍스트 상자에 붙여넣는 것이 직접 입력하는 것보다 오류 가능성이 낮음.

솔루션

     * Google Chrome 확장 프로그램으로 복사 및 붙여넣기 차단을 제거함.

사용 방법

     * 사이트를 블랙리스트에 추가하는 가장 쉬운 방법은 확장 프로그램 아이콘을 클릭하고, 자동 생성된 패턴을 선택적으로 편집한 후 ""저장""을 클릭하는 것임.
     * 그 후에 확장 프로그램 아이콘이 파란색으로 바뀌어 현재 탭에서 확장 프로그램이 활성화되었음을 나타냄.

버전 2 업그레이드

     * 버전 2는 확장 프로그램의 주요 업데이트로, 복사 및 붙여넣기 이벤트를 방해하는 사이트에서만 확장 프로그램이 실행되도록 하고 각 탭에서 확장 프로그램의 활성/비활성 상태를 확인할 수 있게 함.
     * 가능한 가장 원활한 경험을 제공하기 위해, 확장 프로그램은 사용자가 활성 탭을 변경할 때 이를 알아야 함.
     * 이벤트를 알기 위해서는 tabs 권한이 필요하며, Chrome은 이를 ""방문하는 웹사이트의 모든 데이터를 읽고 변경할 수 있음""으로 설명함.
     * 이러한 설명은 매우 무서울 수 있지만, 이 확장 프로그램은 그렇게 하지 않음.
     * 오픈 소스 프로젝트이기 때문에 코드를 읽어 확장 프로그램이 작동하는 방식과 데이터를 어떻게 [사용하지 않는지] 확인할 수 있음.
     * 버전 2 업그레이드에 대한 자세한 내용은 위키 페이지를 참조함.

GN⁺의 의견

     * 이 확장 프로그램은 사용자의 편의성을 높이기 위해 개발되었으며, 복사 및 붙여넣기 기능을 방해하는 웹사이트에 대한 사용자의 불편함을 해소함.
     * 확장 프로그램이 'tabs' 권한을 요구하는 것은 일부 사용자에게 개인정보 보호에 대한 우려를 일으킬 수 있으나, 오픈 소스 프로젝트의 투명성은 이러한 우려를 줄이는 데 도움이 됨.
     * 유사한 기능을 제공하는 다른 확장 프로그램이나 도구가 있다면, 사용자는 여러 옵션을 비교하고 자신의 필요에 가장 적합한 솔루션을 선택할 수 있음.
     * 이 기술을 도입할 때는 확장 프로그램이 실제로 어떤 데이터에 접근하고 있는지, 그리고 사용자의 데이터 보호 정책과 어떻게 조화를 이루는지를 고려해야 함.
     * 이 확장 프로그램은 사용자가 웹에서 더 효율적으로 작업할 수 있도록 돕지만, 웹사이트가 복사 및 붙여넣기를 제한하는 것에는 다른 보안상의 이유가 있을 수 있으므로, 이를 무시하는 것이 항상 최선의 방법은 아닐 수 있음.

        Hacker News 의견

     * 사용자 입력을 비활성화하면 애플리케이션의 보안이 오히려 악화될 수 있음. 예를 들어, 비밀번호를 복사할 수 없는 사용자들은 복잡한 비밀번호를 입력하는 번거로움을 피하기 위해 덜 복잡한 비밀번호를 사용하게 됨. 또한, 애플리케이션이 복잡한 입력을 강제할 때 사용자 경험도 저하됨.
     * 확장 프로그램이 원활한 경험을 제공하기 위해서는 사용자가 탭을 변경할 때 이를 알아야 함. 이를 위해 'tabs' 권한이 필요한데, 크롬은 이를 ""방문하는 웹사이트의 모든 데이터를 읽고 변경할 수 있음""으로 설명함. 이 설명은 매우 무섭게 들리지만, 오픈 소스 프로젝트인 이 확장 프로그램은 데이터를 그렇게 사용하지 않음. 코드를 읽어보면 확장 프로그램이 실제로 어떻게 작동하는지 확인할 수 있음.
     * 코드를 읽거나 누군가가 읽었다고 믿는다 하더라도, 미래의 업데이트에서도 그 내용이 계속 유효할 것이라는 보장은 없음. 개발자의 윤리적 기준이 약해질 수도 있고, 확장 프로그램을 팔 수도 있음. 크롬 확장 프로그램은 자동으로 업데이트되지만, 안전하게 업데이트할 수 있다고 가정할 수 없음.
     * Mac 사용자는 Hammerspoon을 사용하여 Cmd+Shift+V 단축키를 설정해 붙여넣기 기능 대신 실제로 글자를 입력하도록 함. 이 방법은 사이트가 붙여넣기를 방지할 때마다 효과적임.
     * 붙여넣기를 방지하는 사이트에 대해 확장 프로그램을 환영함. 예를 들어 계좌번호나 이메일 주소를 확인할 때 붙여넣기를 할 수 없으면 비밀번호 관리자 사용에 문제가 생기고, 복잡한 비밀번호 규칙이 약한 비밀번호 사용을 방지하려는 의도와는 달리 오히려 사용자 경험을 해침. 하지만, 보안 감사를 통과하고 산업 표준 보안 조치를 갖추었다는 것을 증명하기 위해 이러한 보안 조치를 구현해야 함.
     * 붙여넣기를 할 수 없을 때, Mac에서는 텍스트를 URL 필드나 다른 곳으로 드래그 앤 드롭하는 방법을 사용함. 붙여넣기를 비활성화하는 것은 보안을 위한다는 명목이지만, 매우 어리석은 결정으로 보임.
     * 붙여넣기를 할 수 없는 경우, 보통 마우스 오른쪽 버튼으로 '요소 검사'를 선택하고 콘솔에서 $0.value=""클립보드에서 가져온 값""을 입력함. 거의 모든 곳에서 작동함. 붙여넣기를 방해하는 것은 자동완성을 끄는 것과 비슷하며, HTML5 표준은 매우 민감한 정보(예: 핵무기 활성화 코드)나 한 번만 사용되는 값(예: 은행 로그인을 위한 일회용 키)에 대해서만 비활성화해야 함을 명시함.
     * 이러한 기능은 애드온에 의존해야 할 필요가 없으며, 브라우저에서 설정할 수 있어야 함. Firefox에서는 dom.event.clipboardevents.enabled를 토글할 수 있음.
     * OP가 원본 저장소에 비해 중요한 업그레이드가 없는 포크를 공유하여 399개의 추천을 받은 것을 누군가가 주목함.
     * Ctrl-F를 가로채는 것과 같은 수준의 문제를 지적함.
     * 이전에 해커뉴스에 게시된 대체 북마크릿을 소개함.
"
"https://news.hada.io/topic?id=13733","OpenAI 이사회, 알트만 재선임 및 3명의 신임 이사 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OpenAI 이사회, 알트만 재선임 및 3명의 신임 이사 추가

        Hacker News 의견

     * OpenAI의 공동 창립자인 Sam Altman이 이끄는 OpenAI에 대한 내부 검토가 완료되었다는 소식과 관련하여, 해커뉴스 사용자들은 다양한 의견을 나누고 있다. 이들의 댓글을 요약하면 다음과 같다.
          + 한 사용자는 OpenAI의 발표가 ""승자에 의해 쓰여진 역사""의 느낌을 주며, 어떤 가능한 시나리오에서도 Altman에 대한 잘못이 결론지어지고 그의 즉각적인 제거를 요구하는 상황은 없을 것이라고 주장함.
          + 다른 사용자는 이번 사태가 발생한 이유에 대해 더 많은 질문을 제기하며, 이는 이전 이사회와 Altman 사이의 관계 붕괴와 신뢰 상실의 결과라고 언급함.
          + 뉴욕 타임즈의 유출된 기사를 통해 이러한 결과를 예측할 수 있었다는 의견도 있음.
          + 한 사용자는 Altman과 그의 팀을 비판하며, 그들이 개인의 경계를 존중하지 않는 태도로 인해 로봇을 만드는 데는 뛰어날 수 있지만, 가족에게는 접근하지 않기를 바란다고 표현함.
          + theinformation.com의 기사가 접근 제한이 있어 대체 소스를 찾아야 한다는 의견과, 이전에는 해커뉴스 독자들을 위해 특정 기사를 열어주었지만 이제는 응답하지 않는다는 경험을 공유함.
          + OpenAI 이사회에 새로운 이사로 선임된 인물들에 대한 의견도 있으며, 이들의 선정이 다소 무작위적으로 보인다는 지적과 함께 비즈니스적 이유가 있는지에 대한 의문을 제기함.
          + 법적 절차에 익숙하지 않은 사용자는 30,000개의 문서를 검토하는 것이 실제로 어떤 의미인지, 그리고 이것이 인간에 의한 검토인지 키워드를 위한 자동화된 검색인지에 대해 설명을 요청함.
          + 마지막으로, 30,000개의 문서 검토는 Gemini의 새로운 1M 토큰 컨텍스트 윈도우 기능에 적합한 사용 사례로 보인다는 의견도 있음.

   해당 댓글들은 OpenAI의 내부 검토와 관련된 뉴스에 대한 개인적인 견해와 반응을 나타내며, 다양한 관점과 의문점을 제시함. OpenAI는 인공지능 연구와 개발을 선도하는 조직으로, Sam Altman은 그 공동 창립자 중 한 명임.
"
"https://news.hada.io/topic?id=13791","기상 예보의 정확도 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             기상 예보의 정확도 향상

날씨 예보의 정확도가 크게 향상되었으며, 이제 모든 사람에게 제공해야 함

     * 현재 4일치 날씨 예보의 정확도는 30년 전 1일치 예보의 정확도와 동일함.
     * 날씨 예보는 단순한 정보가 아니라 생명과 직결되는 중요한 정보로, 폭풍, 폭염, 재난에 대한 조기 경보를 제공하여 생명을 구할 수 있음.
     * 농업, 에너지 그리드 운영, 항공 및 해상 운송 등 다양한 분야에서 정확한 날씨 정보가 필수적임.

날씨 예보는 많이 발전했음

     * 고대 바빌로니아 시대부터 아리스토텔레스의 저작, 영국 기상청의 첫 예보 발표 등을 거쳐 날씨 예보는 오랜 시간에 걸쳐 발전해옴.
     * 컴퓨터 수치 모델링의 도입으로 예보의 정확도가 크게 향상되었으며, 특히 허리케인의 경로 예측 오류가 크게 감소함.
     * 유럽 중기 기상 예보 센터(ECMWF)는 글로벌 수치 날씨 모델을 제공하며, 이러한 모델은 국가별 예보 시스템에 중요한 입력 정보를 제공함.

날씨 예보가 향상된 이유

     * 더 많고 고해상도의 관측 데이터, 더 빠른 컴퓨터, 그리고 예보 모델의 개선이 주요한 발전 요인임.
     * 기상 예보의 전달 방식도 개선되어, 이제는 스마트폰을 통해 실시간으로 날씨 정보를 얻을 수 있음.

저소득 국가에서는 예보가 훨씬 나쁘며, 종종 조기 경보 시스템이 없음

     * 저소득 국가에서는 고소득 국가에 비해 날씨 예보의 정확도가 현저히 낮으며, 이는 농업 종사자들에게 큰 영향을 미침.
     * 예보의 질적 격차는 1980년대 이후 거의 변하지 않았으며, 이는 예보 시스템에 대한 투자 부족과 기술적 한계 때문임.
     * 정확한 날씨 예보는 가장 가난한 사람들에게 가장 중요하며, 재난에 대비하여 커뮤니티를 준비시키는 데 필수적임.

저소득 국가에서의 예보 개선은 과소평가되고 있음

     * 최근 수십 년간의 발전으로 많은 지역에서 날씨 예보의 중요성을 당연하게 여기고 있으나, 이를 모든 사람에게 제공하는 것이 중요함.
     * 기후 변화로 인한 날씨 관련 재난의 위험이 증가함에 따라, 더 나은 예보는 기후 변화 적응에 있어 핵심적임.
     * 적절한 투자와 재정 지원이 필수적이며, 인공지능(AI) 시스템과 드론과 같은 신기술이 예보 개선을 가속화할 수 있음.

GN⁺의 의견

     * 이 기사는 날씨 예보의 중요성과 그 발전 과정을 강조하며, 특히 저소득 국가에서의 예보 개선의 필요성을 지적함으로써, 기술의 불평등이 실제 생활에 미치는 영향에 대한 인식을 높일 수 있음.
     * 예보 기술의 발전에도 불구하고, 정보의 접근성과 전달 방식에 있어서 여전히 큰 격차가 존재한다는 점은 국제적인 협력과 지원이 필요함을 시사함.
     * 인공지능 기반의 날씨 예보 시스템과 같은 혁신적인 기술들이 저소득 국가에서의 예보 개선에 기여할 수 있으나, 이러한 기술을 도입할 때는 데이터의 품질, 시스템의 안정성, 그리고 지역적 특성을 고려해야 함.
     * 기술 도입에 있어서는 비용 대비 효과, 유지 관리의 용이성, 그리고 사용자 친화성이 중요한 고려 사항임.
     * 이 기사는 날씨 예보의 발전이 인류에게 어떻게 도움이 되는지를 보여주며, 기술의 진보가 사회 전반에 긍정적인 영향을 미칠 수 있음을 보여주는 사례임.

        Hacker News 의견

     * 날씨 예보에 대한 사람들의 의견은 다양함. 예보의 정확도는 사용하는 모델에 따라 다를 수 있음. 예를 들어, Apple Watch의 날씨는 GFS 모델을 따르는데, GFS는 중기 예보에는 적당하지만 단기 예보에는 그다지 유용하지 않음. NAM 모델은 하루나 이틀 전 예보에, HRRR 모델은 몇 시간 전 예보에 더 나음. 대규모 날씨 이벤트의 경우, 국립기상서비스의 브리핑이 좋은 자료가 될 수 있지만, 때때로 브리핑이 일찍 중단됨. 예보보다 더 정확한 정보를 원한다면 직접 원시 데이터를 확인할 수 있음.
     * 앤드류 블럼의 책 ""The Weather Machine""은 예보의 역사와 현재의 배경에 대해 설명함. 이 책은 예보가 어떻게 작동하는지 이해하고자 하는 여정을 담고 있으며, 예보의 정확성이 역사적으로 어떻게 향상되었는지, 현대의 '날씨 기계'가 어떻게 존재하는지에 대한 이야기를 담고 있음.
     * ""The Signal and The Noise""라는 책에서는 사람들이 비가 올 확률이 50% 미만으로 보고됐을 때 비가 오면 예보가 나쁘다고 생각한다고 언급함. 예보가 햇볕이 쨍쨍한 날씨를 예상했는데 맑은 날씨가 되면 기분 좋은 놀라움이 되지만, 그 반대의 경우는 성가심을 느낌. 소비자 중심의 예보자들은 사람들이 '좋은 예보'라고 판단하도록 비 올 확률을 과도하게 높게 조정함.
     * 허리케인이 자주 발생하는 지역에 사는 사람들은 예보가 많이 개선되었지만 여전히 개선의 여지가 많다는 것을 알고 있음. 예보의 정확성을 비교해 볼 수 있는 웹사이트를 추천하며, 예보 제공자를 바꾸면 더 나은 결과를 얻을 수 있음.
     * 긴급한 폭풍 경보의 품질과 신뢰성에 대해서도 인상적이라고 언급함. 이러한 경보는 비를 피하거나 폭우가 내리기 전에 도로에서 잠시 쉴 수 있도록 도와줌. 저소득 국가에서의 예보 개선이 과소평가되고 있다는 주장이 있으며, 이러한 개선이 빈곤한 사람들에게 어떤 영향을 미칠지에 대한 연구가 있는지 궁금함.
     * open-meteo.com의 창시자는 날씨 예보의 미래가 AI 모델에 크게 의존할 것이라고 언급함. 유럽 기상 예보 센터 ECMWF가 새로운 AI 날씨 모델 AIFS를 공개 데이터로 출시했으며, 이 모델은 기존의 수치 모델보다 더 정확할 뿐만 아니라 실행에 필요한 컴퓨팅 파워도 훨씬 적음.
     * 기사에서 언급된 모든 것이 정확함 – 더 나은 원시 데이터, 더 빠른 컴퓨터, 더 작은 그리드, 더 나은 예측 알고리즘 등이 오늘날 훨씬 더 나은 날씨 정보를 제공함. 하지만 개인적으로 더 나은 결과를 얻기 위해서는 더 많은 노력이 필요함.
     * 날씨 보고서가 비가 내리고 있다는 사실을 인정하지 않는 상황에 대한 개인적인 경험을 공유함. 비가 내리고 있음에도 불구하고 날씨 보고서는 '흐림'이라고만 표시함.
     * 고등학교 때 기상학 수업을 들었던 한 사용자는 매일 날씨 예측 연습을 했던 경험을 공유함. 이 연습은 예보의 질을 더욱 감사하게 만들었으며, '날씨 예보관'이 항상 틀리는 것은 아니라는 것을 깨닫게 함.
     * ECMWF의 과학자들과의 인터뷰를 담은 팟캐스트를 들었던 경험을 공유함. 그들은 매 10년마다 예보가 하루씩 개선된다고 말함. AI가 오늘날처럼 큰 주제가 아니었던 2019년에 녹음된 것으로, 최근에 Google이 AI 날씨 모델을 발표한 것을 고려할 때 흥미로운 발전임.
"
"https://news.hada.io/topic?id=13719","에픽, 애플이 개발자 계정을 복원할 것이라고 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      에픽, 애플이 개발자 계정을 복원할 것이라고 발표

iPhone 16 Pro 디자인 파일, 더 큰 액션 버튼과 새로운 캡처 버튼 등장

     * iPhone 16 Pro의 디자인 파일이 공개됨.
     * 액션 버튼의 크기가 더 커지고 새로운 캡처 버튼이 추가될 예정임.
     * 이러한 변화는 사용자 경험을 향상시키고, 사진 및 비디오 촬영 기능을 강화할 것으로 기대됨.

GN⁺의 의견

     * iPhone 16 Pro의 디자인 변경은 사용자들에게 더 나은 물리적 조작성과 향상된 멀티미디어 기능을 제공할 것으로 보임. 이는 특히 사진과 비디오 촬영을 자주 하는 사용자들에게 매력적일 수 있음.
     * 새로운 버튼 추가는 기기의 직관성을 높이고, 사용자가 더 빠르고 편리하게 기능을 사용할 수 있게 할 것으로 예상됨. 그러나 기존 사용자들은 새로운 배치에 적응하는 데 시간이 필요할 수도 있음.
     * 업계에서는 이미 다양한 스마트폰 제조사들이 사용자 경험을 개선하기 위해 물리적 버튼을 추가하거나 변경하는 추세를 보임. 예를 들어, 삼성의 Galaxy 시리즈는 사용자의 편의성을 고려한 버튼 배치와 기능을 제공하고 있음.
     * 새로운 기술이나 디자인을 도입할 때는 항상 호환성과 사용자의 학습 곡선을 고려해야 함. iPhone 16 Pro는 기존 사용자들에게 새로운 학습 곡선을 제공할 것이며, 이는 일부 사용자에게는 도전이 될 수 있음.
     * 이러한 변화가 사용자에게 실질적인 이점을 제공한다면, 시장에서의 경쟁력을 높일 수 있을 것임. 그러나 새로운 디자인이나 기능이 사용자의 기대에 부응하지 못한다면, 사용자의 불만으로 이어질 수도 있음.

        Hacker News 의견

     * 규제 기관이 벽을 쌓은 정원에 맞서는 모습이 놀랍고, 이 결정이 빠르게 번복된 것은 개발자와 소비자 모두에게 큰 이득.
     * 애플 변호사가 에픽 게임즈 스웨덴 AB의 개발자 계정 종료를 통보했으며, 에픽의 대응은 믿을 수 없고 불충분했음. 에픽은 신뢰할 수 없는 역사를 가지고 있으며, 의미 있는 약속을 요구했음. 팀 스위니의 간결한 답변은 공격적인 발언으로 빠르게 약화됨.
     * 초기 금지 결정은 고위 경영진에 의해 주도된 것 같고, 법률 및 PR 팀이 신중히 검토했다면 에픽을 그렇게 빠르게 금지할 수 없었을 것임. 많은 불확실성이 있고, 잘못된 행동은 정부 관계에 큰 위험을 초래함.
     * 법적 문서를 수백 페이지 읽고 법정에서 패소한 후에도 코딩을 계속한 개발자의 끈기와 투쟁 의지.
     * 애플이 에픽 게임즈 개발자 계정을 종료하고 iOS에 대한 '위협'이라고 부른 사건에 대한 최근 관련 뉴스.
     * 에픽 바나나 스토어를 통해 게임을 구매하고 싶은 소비자의 지갑으로 투표하겠다는 의지.
     * 애플은 이 상황을 존재적 위협으로 여기고 강력히 대응하고 있으나, 이러한 행동은 에픽에게 가시성을 부여하고 애플 브랜드에 대한 신뢰를 해치는 결과를 낳음.
     * PWA 결정과 함께 애플의 리더십이 흔들리고 있는 것처럼 보임.
     * 애플이 PWA를 파괴하려 했던 이전의 행동을 고려할 때, 이번 결정의 함정은 무엇인지 의문.
     * 법률가들이 어떻게 산업과 이미지, 의지를 무릎 꿇게 만드는지에 대한 풍자적인 농담. 애플의 법률 팀은 이 산업에서 모두에게 힌트를 얻어야 하며, 그들의 행동이 도움보다 해가 된다는 것을 인지해야 함.
"
"https://news.hada.io/topic?id=13750","나의 고객들, 거짓말쟁이들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             나의 고객들, 거짓말쟁이들

고객, 거짓말쟁이들

     * 공공 변호사로서의 역할은 이중적임.
     * 고객의 열렬한 옹호자이지만, 그들의 꼭두각시가 아님.
     * 법정에서 고객의 말만 되풀이하지 않고, 진실을 확인하기 위해 노력함.
     * 고객의 거짓말은 결국 자신들에게 해가 됨.

경찰 탐정과 같은 일

     * 각 사건마다 경찰의 조사 과정을 다시 검토하여 실수를 찾아냄.
     * 때로는 경찰보다 더 나아가 자체 증거를 수집하고 증인을 찾아냄.
     * 유죄인 고객들은 변호사의 조사가 너무 깊어지는 것을 원치 않음.

변호사의 의무와 고객의 기만

     * 변호사는 고객의 비밀을 엄격히 유지해야 함.
     * 고객이 자신의 범죄를 고백하더라도 이를 밝힐 수 없음.
     * 고객들은 변호사가 무죄를 확신하지 않으면 열심히 변론하지 않을 것이라는 잘못된 믿음을 가짐.

마르셀의 거짓말

     * 무기 소지 금지자인 마르셀은 경찰에 체포될 때 자매의 차량에서 총을 발견당함.
     * 마르셀은 총을 만지지 않았다고 주장했지만, 총에는 그의 지문이 뚜렷하게 남아 있었음.
     * 변호사는 마르셀에게 지문 전문가를 통해 진실을 밝힐 수 있다고 제안함.
     * 마르셀은 결국 총을 만질 수도 있다고 인정함.

카일의 거짓말

     * 카일은 자신이 범인이 아니라고 주장했지만, 증거는 그를 범인으로 지목함.
     * 카일은 가공의 인물인 '리치 바텀스'가 범인이라고 주장함.
     * 변호사는 리치를 찾기 위해 조사를 진행하겠다고 제안함.
     * 카일은 리치를 찾는 것이 불가능하다는 다양한 변명을 내놓음.

변호사의 진실 추구

     * 변호사는 고객의 거짓말을 빠르게 파악하고, 그들의 변명이 무너지는 것을 목격함.
     * 고객이 거짓말을 할 때마다 변호사의 조사는 더 어려워지고, 고객의 전망은 악화됨.

GN⁺의 의견

     * 이 기사는 변호사와 고객 간의 신뢰 문제와 변호사의 윤리적 책임에 대한 흥미로운 통찰을 제공함.
     * 고객이 변호사에게 거짓말을 하는 이유와 그 결과에 대한 심리적 이해를 돕는 사례들이 포함되어 있음.
     * 법적 대리인과 고객 간의 관계는 복잡하며, 이 기사는 그 복잡성을 잘 보여줌.
     * 변호사가 고객의 거짓말을 파악하고 대응하는 방법은 법률 전문가뿐만 아니라 일반인에게도 교훈적임.
     * 이러한 상황에서 변호사가 취할 수 있는 다양한 전략과 접근 방식에 대한 논의가 필요함.
"
"https://news.hada.io/topic?id=13757","LocalSend: 근거리 기기 간 파일 공유를 위한 오픈소스 크로스플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               LocalSend: 근거리 기기 간 파일 공유를 위한 오픈소스 크로스플랫폼

     * LocalSend: 인근 기기로 파일 전송
          + LocalSend는 인근 기기로 파일을 전송할 수 있는 무료이며 오픈소스인 크로스플랫폼 소프트웨어임.
          + MIT 라이선스 하에 배포되며, 2022년부터 2024년까지 Tien Do Nam과 LocalSend 기여자들에 의해 개발됨.
          + 다운로드, 커뮤니티 참여, 개발자와의 소통을 위한 GitHub, Discord 링크 제공.
          + LocalSend 및 해당 웹사이트는 언급된 브랜드와 공식적으로 연관되거나 승인받지 않았으며, 정보 제공 목적으로만 브랜드를 참조함.

GN⁺의 의견

     * LocalSend는 사용자들이 쉽고 빠르게 주변 기기와 파일을 공유할 수 있게 해주는 도구로, 특히 개인정보 보호에 관심이 많은 사용자들에게 매력적일 수 있음.
     * 오픈소스 소프트웨어로서, 개발자 커뮤니티의 지원을 받아 지속적으로 개선되고 사용자 피드백을 반영할 가능성이 높음.
     * 이와 유사한 기능을 제공하는 애플의 AirDrop이나 구글의 Nearby Share와 같은 서비스가 있지만, LocalSend는 플랫폼에 구애받지 않는다는 점에서 차별화됨.
     * 기술을 도입할 때는 사용자 기반의 크기와 호환성 문제를 고려해야 하며, 널리 사용되는 상용 서비스에 비해 초기에는 사용자 경험이 다소 떨어질 수 있음.
     * 오픈소스 소프트웨어를 선택함으로써 얻는 이점은 커스터마이징의 자유와 비용 절감이지만, 기술 지원이나 보안 업데이트에 있어 상용 소프트웨어에 비해 뒤처질 수 있음.
"
"https://news.hada.io/topic?id=13768","Teable - Postgres와 Airtable을 결합한 오픈소스 노코드 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Teable - Postgres와 Airtable을 결합한 오픈소스 노코드 데이터베이스

     * Postgres 기반으로 구축. 매우 빠르고 실시간, 개발자 친화적인 no-code DB
     * 간단한 스프레드시트 형식의 인터페이스를 사용하여 복잡한 엔터프라이즈 수준의 데이터베이스 애플리케이션을 만들 수 있음
     * 데이터 보안과 확장성의 장애물 없이 노코드로 효율적인 앱 개발을 가능하게 함

Features

     * 스프레드시트 형식의 인터페이스: 셀 편집, 수식 지원, 데이터 정렬 및 필터링, 집계 함수, 데이터 형식 지정, 그룹화, 열 고정, 데이터 가져오기/내보내기, 행 스타일 및 조건부 서식(곧 출시 예정), 차트 및 시각화 도구(곧 출시 예정), 데이터 유효성 검사(곧 출시 예정), 실행 취소/다시 실행(곧 출시 예정), 주석 및 주석 달기(곧 출시 예정), 찾기 및 바꾸기(곧 출시 예정) 등의 기능을 제공함.
     * 다양한 뷰: 데이터를 다양한 방식으로 시각화하고 상호 작용할 수 있는 그리드 뷰, 폼 뷰, 칸반 뷰(곧 출시 예정), 캘린더 뷰(곧 출시 예정), 갤러리 뷰(곧 출시 예정), 간트 뷰(곧 출시 예정), 타임라인 뷰(곧 출시 예정) 등을 제공함.
     * 매우 빠른 속도: 수백만 개의 데이터를 쉽게 처리하며 필터링과 정렬에 부담이 없음.
     * 완벽한 SQL 지원: Metabase, PowerBi 등의 BI 도구 및 Appsmith 같은 노코드 도구와의 원활한 통합 지원.
     * 개인정보 보호: 클라우드에도 불구하고 사용자가 자신의 데이터를 소유함(곧 출시 예정).
     * 실시간 협업: 페이지 새로고침 없이 데이터가 실시간으로 업데이트되며, 협업 멤버 초대 및 관리가 원활하게 통합됨.
     * 확장 기능(곧 출시 예정): React 기반의 백엔드 없는 프로그래밍 기능 및 매우 낮은 비용으로 자체 애플리케이션을 맞춤 설정할 수 있는 스크립트 확장 모드.
     * 자동화(곧 출시 예정): AI 또는 시각 프로그래밍을 사용하여 워크플로우를 설계하고 테이블에서 데이터를 쉽게 검색할 수 있음.
     * 코파일럿(곧 출시 예정): 통합된 AI 기능으로 앱 생성, 차트 분석, 뷰 표시, 액션 생성 등의 명령을 수행할 수 있음.
     * 다중 데이터베이스 지원(곧 출시 예정): 사용자가 선호하는 SQL 데이터베이스를 선택할 수 있음.

Structure

     * Teable 프로젝트는 여러 앱과 패키지로 구성되어 있음:
          + apps 폴더에는 데스크탑용 electron 앱, 프론트엔드용 nextjs-app, 서버 또는 electron 앱 내에서 실행되는 nestjs-backend가 포함됨.
          + packages 폴더에는 다양한 공통 기능과 인터페이스, 확장을 위한 SDK, 데이터베이스 스키마 및 마이그레이션을 위한 db-main-prisma, 공유 ESLint 설정, UI 컴포넌트 등이 포함됨.

Deploy

     * Docker를 사용하여 Teable을 배포할 수 있으며, 자세한 내용은 dockers/examples에서 확인할 수 있음.
     * Railway를 통해서도 배포가 가능함.

Development

     * 개발 환경 설정은 nvm 도구를 사용하여 노드 버전을 지정하고, 프로젝트 의존성을 설치한 후 패키지를 빌드하는 과정을 포함함.
     * sqlite와 postgres 데이터베이스를 지원하며, 데이터베이스 모드를 전환할 수 있음.
     * 필요에 따라 환경 변수를 사용자 정의할 수 있으며, 백엔드 서버를 시작하면 프론트엔드 서버도 자동으로 시작됨.

Why Teable?

     * 노코드 도구는 비기술 사용자가 앱을 만들 수 있게 하여 작업 방식을 변화시키고 있음
     * 스프레드시트 형식의 UI는 사용이 쉽고 유연하며 팀 협업에 적합하기 때문에 선호됨
     * 비즈니스 확장에 따라 데이터 요구 사항이 증가함에 따라, 많은 노코드 플랫폼이 큰 규모에서 부담을 겪음
     * 대부분의 노코드 플랫폼은 클라우드 기반이며, 중요한 데이터가 제공업체에 있어 다른 플랫폼으로 전환하기 어려움
     * 때때로 노코드 도구는 제한 때문에 원하는 작업을 수행할 수 없어 사용자가 막히게 됨
     * 도구가 필수적이 되면 어느 정도 기술 전문성이 필요하지만, 개발자들은 이러한 플랫폼을 다루기 어려워함
     * 복잡한 설정을 가진 시스템을 유지 관리하는 것은 개발자에게 어려울 수 있으며, 흔히 사용되는 소프트웨어 표준을 사용하지 않는 시스템은 장기적으로 더 많은 비용이 들 수 있음
     * 노코드 제품의 미래는 사용자가 쉽게 애플리케이션을 구축할 수 있는 인터페이스, 데이터에 쉽게 접근할 수 있는 환경, 클라우드나 온프레미스, 혹은 로컬에서의 데이터 개인정보 보호, 개발자뿐만 아니라 비기술 사용자에게도 작동하는 시스템, 비즈니스 성장과 함께 확장할 수 있는 데이터 처리 능력, 다른 소프트웨어와의 유연한 통합, 그리고 사용성을 한 단계 끌어올리는 AI 통합을 포함해야 함을 강조함

   어제 친구가 깃헙에 스타줘서 들어가봤는데 좋더라구요. 아직 마일스톤이 많은 초기프로젝트인 것 같지만 세상이 바뀌는 느낌이 드네요.

   nocodb가 같은 부류의 프로젝트인데 더 성숙해있더라구요. 댓글 보시는 분들은 참고하셔요 ㅎㅎ
   https://github.com/nocodb/nocodb
"
"https://news.hada.io/topic?id=13776","Airbnb, 실내 보안 카메라 금지 조치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Airbnb, 실내 보안 카메라 금지 조치

Airbnb, 실내 보안 카메라 금지

     * Airbnb가 4월 30일부터 실내 보안 카메라 사용을 금지함.
     * 이전에는 공용 공간에 설치를 허용했으나, 이제는 모든 실내 카메라 사용이 금지됨.
     * 숙소 내부에서 발견된 숨겨진 카메라에 대한 보고가 금지 조치의 배경임.

새로운 공개 규칙 도입

     * 호스트는 예약 전에 실외 보안 카메라의 사용과 위치를 공개해야 함.
     * 실외 카메라는 실내 공간을 감시하거나 사생활이 보장되어야 하는 특정 실외 공간에서 사용할 수 없음.
     * 또한, 파티 여부를 측정할 수 있는 소음 데시벨 모니터의 사용도 공개해야 함.

호스트의 준수 사항

     * Airbnb 호스트는 4월 말까지 실내 보안 카메라를 제거해야 함.
     * 실내 카메라 존재를 신고받은 경우 Airbnb가 조사하고, 위반 시 호스트의 리스트나 계정을 제거할 수 있음.
     * 숨겨진 카메라의 존재를 완전히 통제할 수는 없으나, 규칙을 준수하는 호스트는 더 이상 카메라를 설치할 수 없음.

GN⁺의 의견

     * Airbnb의 새로운 정책은 사용자의 사생활 보호에 중점을 두고 있으며, 이는 디지털 시대에 점점 더 중요해지는 문제임.
     * 숙박 공유 서비스에서의 사생활 침해 문제는 사용자들 사이에서 불안감을 조성해왔으며, 이번 조치는 이러한 우려를 해소하는 데 도움이 될 것임.
     * 그러나 이 정책이 숨겨진 카메라를 완전히 차단할 수는 없기 때문에, 여전히 사용자들은 자신의 사생활을 보호하기 위해 주의를 기울여야 함.
     * 비슷한 기능을 제공하는 다른 숙박 공유 서비스로는 Booking.com이나 Expedia가 있으나, Airbnb만큼 사생활 보호에 대한 명확한 정책을 제시한 곳은 드물음.
     * 이 기술을 도입할 때 고려해야 할 사항으로는, 호스트와 게스트 간의 신뢰 구축, 사생활 보호 기술의 적용, 그리고 이러한 정책이 실제로 효과적으로 시행되고 있는지에 대한 지속적인 모니터링이 있음.

        Hacker News 의견

     * Airbnb의 숙소는 종종 더 저렴하지 않고, 단지 더 ""흥미로운"" 숙소를 제공함.
          + 숙소에서의 불법 촬영을 막기 위한 Airbnb의 조치가 충분하지 않다는 의견.
          + 게스트 입장에서 불법 촬영을 증명하는 것이 어려움.
          + 나쁜 행위자를 막는 방법에 대한 확실한 해결책이 없음.
     * Airbnb가 규제를 통해 해결된 호텔의 문제들을 다시 가져왔다는 비판.
          + 호텔에서의 카메라 발견 가능성이 거의 없는 반면, Airbnb에서는 호스트가 어떤 사람인지 알 수 없음.
          + Airbnb의 가격 상승으로 호텔을 이용하는 것이 더 나은 선택이 될 수 있음.
     * Airbnb의 금지 조치가 정직한 호스트에게만 영향을 줄 수 있다는 우려.
          + 청소 비용을 부과하면서도 게스트에게 청소를 요구하는 호스트에 대한 금지가 필요함.
          + 호텔은 추가 비용을 요구하거나 청소를 강요하지 않음.
     * 호스트가 실외 카메라를 이용해 실내를 감시하는 것에 대한 규제가 쉽게 우회될 수 있음.
          + 호스트와 게스트 모두 상대방을 속일 수 있는 여지가 있음.
          + 숨겨진 카메라를 가진 호스트가 분쟁 시 증거로 영상을 제공할 수 없게 됨.
     * Airbnb가 1000억 달러 시가총액을 가진 것에 대한 의문.
          + 대규모 그룹 여행을 위한 Airbnb의 사용 사례가 호텔의 사용 사례에 비해 제한적임.
     * Airbnb를 처음에는 에어베드와 아침식사를 제공하는 서비스로 생각했던 것에 대한 향수.
          + 서비스를 사용하지 않는 이유로 현지 보건 규정에 따라 청소된 실제 침대를 선호함.
     * 고객들이 무급 청소부가 된 후에도 여전히 Airbnb를 사용하는 것에 대한 놀라움.
     * 숙소 내에 숨겨진 카메라 발견에 대한 보고가 많아지면서, 여행객들이 카메라를 찾기 위해 방을 검사하는 것이 현명한 조치로 여겨짐.
     * 어떤 정책이든 간에 항상 숙소를 검사하는 것이 좋음.
          + 성적 목적으로 무단 촬영된 여성을 돕는 봉사 활동을 하는 사람의 경험에서 Airbnb 호스트에 의한 관음증 콘텐츠가 급증하고 있음.
"
"https://news.hada.io/topic?id=13730","Bruno - 빠르고 Git 친화적인 오픈소스 API 클라이언트(Postman 대체제)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Bruno - 빠르고 Git 친화적인 오픈소스 API 클라이언트(Postman 대체제)

     * Postman, Insomnia 등 기존 도구들을 혁신하고자 하는 빠르고 Git 친화적인 오픈소스 API 클라이언트
     * 사용자의 파일 시스템에 직접 폴더로 컬렉션을 저장하며, API 요청 정보를 저장하기 위해 Bru라는 일반 텍스트 마크업 언어를 사용
     * Git이나 선택한 버전 관리 시스템을 사용하여 API 컬렉션을 협업할 수 있음
     * 오프라인 전용이며, 클라우드 동기화 기능을 추가할 계획이 전혀 없음
     * 데이터 프라이버시를 중시하며 사용자의 장치에 데이터가 머물러야 한다고 믿음
     * 데스크탑 앱, CLI, VSCode 확장등에서 실행 가능
     * Git 또는 선택한 버전 관리 시스템을 통해 협업할 수 있음
     * 기능이 별도로 추가된 Golden Edition이 $19에서 $9에 사전 주문 가능
          + 내장된 Bru 파일 탐색기
          + Visual Git (VSCode용 GitLens 와 비슷)
          + GRPC, Websocket, SocketIO, MQTT
          + 컬렉션 실행을 위해 파일에서 데이터 로딩
          + 성능/로드 테스팅
          + 개발자 도구
          + OpenAPI 디자이너
          + 내장 터미널
          + 커스텀 테마

GN⁺의 의견

     * Bruno API 클라이언트는 개발자들에게 데이터 프라이버시를 중시하는 오프라인 환경에서 작업할 수 있는 새로운 대안을 제공함. 이는 특히 인터넷 연결이 불안정하거나 보안이 중요한 환경에서 유용할 수 있음.
     * Git과의 통합은 버전 관리와 협업을 중시하는 현대 개발 문화에 잘 부합하며, API 컬렉션의 변경 사항을 추적하고 공유하는 데 도움이 될 것임.
     * Bruno가 클라우드 동기화를 제공하지 않는 것은 일부 사용자에게는 단점이 될 수 있으나, 이는 동시에 데이터 보안과 프라이버시를 강화하는 장점으로 작용할 수 있음.
     * Bruno와 유사한 기능을 제공하는 다른 오픈소스 프로젝트로는 Postwoman(Hoppscotch)이 있으며, 사용자들은 자신의 필요에 맞는 도구를 선택할 수 있음.
     * Bruno를 도입하기 전에는 오프라인 작업 환경의 장단점을 고려하고, 현재 팀이 사용 중인 도구와의 호환성 및 전환 비용을 평가해야 함. Bruno의 선택은 개발 효율성 향상과 데이터 보안 강화라는 두 가지 주요 이점을 가져올 수 있음.

        Hacker News 의견

     * Postman이 로그인을 요구하자마자 삭제하고 텍스트 파일에서 curl을 사용하게 됨. 젊은 동료들은 여전히 Postman을 고수하고 있으나, 이 정보가 그들의 전환을 도울 수 있기를 바람.
     * Bruno의 골든 복사본을 구매함. 이는 소프트웨어를 올바르게 하는 방법이며, Bru DSL과 git 기반 공유를 통한 ""모든 것을 코드로"" 모델 때문임.
     * iPad Pro에서 키보드와 트랙패드를 사용하여 개발하며, Postman이나 Insomnia 대신 HTTPBot을 사용하는 것을 즐김. HTTPBot은 Postman 컬렉션과 환경을 지원하며, GraphQL, Websockets, 응답 메트릭스도 지원함.
     * Git 친화적인 텍스트 형식으로 요청을 직렬화하는 아이디어를 매우 좋아함. Git 친화적인 텍스트 형식을 원한다면, 가능한 한 HTTP/1.1 요청 구문을 모방하는 것이 좋음. 메타데이터를 위한 Jekyll 스타일의 YAML front matter를 사용할 수도 있음.
     * Postman이 클라우드 계정을 거부한 후 로컬 데이터를 삭제하자, 자체 도구 개발을 시작함. 파일 시스템을 권위 있는 소스로 취급하고, 로컬에서 실행하며, 소스 컨트롤을 통해 팀원들과 컬렉션을 공유함. Lua를 사용하여 필요한 도구를 제공하는 경량 스크립팅 계층을 추가함. 이를 통해 모든 API 테스트와 개발을 대체하고, 더 복잡한 마이그레이션과 대시보드 같은 작업을 수행함.
     * Insomnia에 실망한 후 두 주 전에 Bruno를 발견하고 사랑에 빠짐. 처음 Postman과 Insomnia가 시작했을 때처럼 단순하고 명확함. 몇 가지 작은 기능이 누락되었지만 전반적으로 매우 추천함.
     * Insomnia가 Postman 전략을 따르고 클라우드 우선으로 전환한 후, 업데이트 후 모든 로컬 프로젝트를 일시적으로 잃어버림. Bruno를 사용한 지 얼마 되지 않았지만, 오프라인 우선 및 git 협업 측면을 매우 좋아함. 현재는 Websockets 기능만 누락됨.
     * 이러한 종류의 도구를 최대한 활용하는 데 도움이 되는 좋은 가이드를 아는 사람이 있는지 궁금함. 주로 Postman에 관심이 있으며, 요청을 만들고 컬렉션으로 정리하며 JWT 처리를 위한 변수를 사용하는 정도임. 이 도구들이 제공하는 것보다 더 많은 기능을 사용하고 있지 않음을 알고 있음.
     * Postman은 VC 자금을 위해 자신을 팔아넘김으로써 스스로 무덤을 팜. ZIRP 이후 VC 자금 세계에서 우리가 지지해야 할 방향은 ""파일 우선 앱"" 철학임.
     * Postman 서버를 호스트 파일에서 차단하고 여전히 오프라인/익명 모드를 허용하는 구버전을 실행함. 필요에 완벽하게 부합함.
     * MacOS에 네이티브인 Paw를 사용하지만, SaaS 비즈니스에 의해 지원되고 있어 그 지속 가능성에 대해 약간 걱정함. 그러나 지금까지 개인 프로젝트의 API 문서화에 매우 유용함.
"
"https://news.hada.io/topic?id=13769","페이스북이 Git을 사용하지 않는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         페이스북이 Git을 사용하지 않는 이유

Graphite 개발자 Greg Foster가 이에 관심을 가진 이유

     * 그는 페이스북 내부 도구에서 영감을 받아 Graphite 프로젝트를 시작
     * 페이스북 출신 동료들이 Mercurial과 ""stacked diffs"" 워크플로우에 대해 소개한 후, GitHub 개발자들을 위해 이를 도입하기로 결정하고, 결과적으로 Hg의 아이디어를 Git에 통합한 CLI를 만들었음
     * 왜 페이스북은 Git 대신 Mercurial을 채택하고 그 위에 커스텀 워크플로우를 구축했을까 ?
     * 구글도 Git을 사용하지 않지만, 그건 Google의 엔지니어링이 Git보다 5년 이상 앞서 있기 때문
     * 반면에 Facebook은 Git이 만들어진 시기와 비슷한 시기인 2004년에 설립되었으며, Facebook이 소스 제어 도구를 진지하게 검토할 무렵에는 Mercurial보다 Git이 더 인기가 있었음
     * 그런데 왜 Facebook은 Git을 사용하지 않을까?
     * 그의 생각에 Facebook이 Git을 도입하고 2010년대 초반에 기여했다면 엔지니어링 세계는 달라졌을 것
          + Git이 더 사용자 친화적이고, 네이티브하게 Stacked Changes를 지원하게 되었을 수도
          + 초기 페이스북 직원들이 만든 Uber와 Pinterest 같은 회사들도 Mercurial 대신 Git과 GitHub를 소스 컨트롤로 사용하여 지난 10년 동안 덜 파편화된 생태계를 만들었을 것
     * 하지만 Facebook은 (기본 모노리포지토리를 위해) Git을 고수하지 않았음. 대신 버전 관리를 위해 Mercurial을 채택하고 그 위에 사용자 지정 도구를 점진적으로 추가함
          + 페이스북에 올라온 Scaling Mercurial at Facebook 글을 발견
          + 10년전 글이고, 그 이후에 몇개의 유튜브를 통해서 ""성능 때문이지"" 라는 해답을 얻었음
          + 하지만, 더 깊게 들어가서 그 당시 결정권자들의 생각을 들어보고 싶었고, Mercurial 마이그레이션 프로젝트에 참여했던 두명의 엔지니어에게 물어봤음
          + 그들과의 비공식적인 얘기를 통해 이 내용을 정리함

페이스북이 Git을 버리고 Mercurial로 이주한 이유

     * 페이스북은 처음에 Git을 사용했으나, 2012년경 코드베이스 규모가 커지면서 성능 문제를 겪기 시작
     * Git의 파일 ""stat-ing"" 과정이 병목 현상을 일으키며, 기본 Git 명령어 실행 시간이 45분 이상 소요
     * Git 유지보수자들은 페이스북의 대규모 리포지토리 문제에 대해 협력적이지 않았고, 대신 리포지토리 분할을 권장

고려된 대안들

     * 2012년 당시 Git의 대안은 많지 않았으며, 페이스북은 Perforce와 같은 폐쇄 소스 솔루션을 고려했으나 기술적 문제가 있었음
     * Mercurial은 Git과 유사한 성능을 가졌으나, 더 깔끔한 아키텍처와 확장성을 가지고 있었음
     * 페이스북 팀은 Mercurial 해커톤에 참여하여 Mercurial의 확장성과 커뮤니티의 개방성에 감명받음

전체 엔지니어링 조직의 이주

     * 페이스북 팀은 나머지 회사를 설득하기 위해 Git과 Mercurial 간의 명령어 및 워크플로우를 매핑하고, 개발자들의 우려를 듣는 시간을 가짐
     * 이주 과정은 신중하게 진행되었으며, 결국 페이스북은 Mercurial로 전환함
     * 페이스북은 Mercurial의 성능을 향상시키고, ""stacked diffs""를 통해 코드 리뷰 병렬화를 가능하게 하는 등의 기여를 함

마무리 생각

     * 이 이야기는 ""많은 주요 기술적 결정은 기술이 주도하는 것이 아니라 사람이 주도한다""는 점을 상기시킴
     * 페이스북은 Mercurial이 Git보다 성능이 뛰어나서가 아니라, Mercurial 유지보수자들과의 협업이 더 개방적이었기 때문에 선택함
     * 전체 엔지니어링 조직을 설득하는 과정에서 한 기술이 다른 기술보다 더 우수해서가 아니라 ""사려 깊은 커뮤니케이션""이 중요했음
     * ""소통과 친절함""이 개발 도구 세계에서 중요한 가치임을 강조

   지인 분이 말씀하신 ""고객을 설득하기 위해선 효자손이 돼여한다""라는 말이 떠오르네요

   너무날카로울 필요도, 너무 빠를 필요도, 너무 편할필요도, 너무 비쌀 필요도 없이 딱 원하는 곳을 긁어줄 수 만 있으면 그게 고객이 원하능 서비스라고 ㅋㅋ

   리누스 토발즈가 리눅스 소스코드를 관리하려고 만든게 Git이다보니 어느 정도 타협할 수 없는 부분이 있었을거라 생각합니다.
   마무리 생각의 요지가 마치 Git은 Facebook 자신들의 요구를 듣지 않아 소통과 친절함을 중요시하지 않았으므로 나쁘다는 것처럼 들리는데, 그냥 여러 측면에서 성향이 서로 달랐을 뿐이라고 저는 생각합니다.
   역으로 생각하면 Facebook은 Git이 권장한 리포지토리 분할을 받아들이고 실행하는 방법도 남아있었습니다. 자신들이 원하지 않는 친절함이었을 뿐이죠.
"
"https://news.hada.io/topic?id=13779","애플, EU 내 웹사이트에서 직접 앱 다운로드 가능성 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플, EU 내 웹사이트에서 직접 앱 다운로드 가능성 발표

유럽연합에서 웹사이트를 통한 아이폰 앱 다운로드 가능 발표

     * 애플이 개발자들이 유럽연합 내에서 웹페이지를 통해 앱을 직접 배포할 수 있도록 하는 등 세 가지 추가 변경 사항을 발표함.
     * 지난주 iOS 17.4에서 유럽연합 내 대체 앱 스토어 사용을 허용하여, 제3자 앱 스토어가 다른 개발자의 앱과 자신들의 앱을 제공할 수 있게 됨.
     * 이제 제3자 앱 스토어는 자신들의 카탈로그에서만 앱을 제공할 수 있음. 예를 들어, 게임 스튜디오가 iOS에서 자신들의 게임만을 제공하는 앱 스토어를 만들 수 있음.

인앱 프로모션 디자인의 자유

     * 개발자들은 이제 자신들의 웹사이트에서 거래를 완료하도록 사용자를 유도할 때, 인앱 프로모션, 할인, 거래 디자인을 자유롭게 선택할 수 있음.
     * 애플이 제공하는 웹사이트 링크 디자인 템플릿은 이제 선택 사항임.

웹사이트에서 직접 앱 배포

     * 개발자들은 곧 자신들의 웹사이트에서 직접 앱을 배포할 수 있게 될 예정이며, 이를 위해 애플의 특정 기준을 충족해야 함.
          + 애플 개발자 프로그램의 연속된 2년 이상 회원이어야 하고, 지난해 유럽연합 내 iOS에서 첫 설치가 100만 회 이상인 앱을 보유해야 함.
          + 투명한 데이터 수집 정책을 공개하는 등의 지속적인 요구 사항을 준수해야 함.
     * 이 방식으로 배포되는 앱은 모든 iOS 앱과 마찬가지로 애플의 공증 요구 사항을 충족해야 하며, 앱 스토어 커넥트에 등록된 웹 도메인에서만 설치할 수 있음.

API 접근과 웹 배포 기능

     * 인증된 개발자들은 앱 배포, 시스템 기능과의 통합, 백업 및 복원 등을 용이하게 하는 API에 접근할 수 있게 됨.
     * 웹 배포는 봄에 이루어질 소프트웨어 업데이트 이후 사용 가능해지며, iOS에서 처음으로 웹사이트에서 직접 앱을 다운로드할 수 있게 됨.

유럽연합 내 적용

     * 최신 변경 사항들은 애플의 디지털 시장 법(Digital Markets Act, DMA) 준수 계획의 일부이며, 오직 유럽연합 내에서만 적용됨.

GN⁺의 의견

     * 이러한 변화는 유럽연합의 디지털 시장 규제에 대응하여 애플이 취한 조치로, 개발자들에게 더 많은 자율성과 유연성을 제공함. 이는 앱 배포와 프로모션 전략에 있어서 새로운 기회를 열어주는 것으로 볼 수 있음.
     * 웹사이트에서 직접 앱을 다운로드할 수 있는 기능은 사용자들에게 더 다양한 소스에서 앱을 받을 수 있는 선택권을 부여하며, 이는 애플의 폐쇄적인 생태계에 대한 일부 비판을 완화할 수 있음.
     * 그러나 이러한 변화가 앱의 품질과 보안에 어떤 영향을 미칠지는 아직 불분명함. 애플의 공증 요구 사항이 이를 어느 정도 보장할 수 있겠지만, 제3자 앱 스토어의 관리와 감독에 대한 우려는 여전히 남아 있음.
     * 유사한 기능을 제공하는 구글의 안드로이드 플랫폼은 이미 다양한 출처에서 앱을 설치할 수 있는 옵션을 제공하고 있으며, 이번 애플의 변화는 두 플랫폼 간의 경쟁을 더욱 치열하게 만들 수 있음.
     * 기술적으로 이러한 변화를 도입할 때 개발자들은 사용자 경험과 보안을 유지하기 위해 추가적인 노력이 필요할 것이며, 이는 개발 비용과 시간에 영향을 미칠 수 있음.

        Hacker News 의견

     * 관련 링크: Apple 개발자 뉴스 (해커뉴스 스레드 39678555를 통해 언급됨)
          + 애플이 개방적인 시스템을 수용하는 것에 대한 비판이 있음.
          + 맥북에서 다양한 출처로 앱을 다운로드할 수 있으며, 이는 아무도 해치지 않음.
          + EU의 일부 규제는 산업 내 대기업이 이익을 위해 자신의 위치를 남용하는 것을 방지함.
     * 대안적 앱 마켓플레이스에 대한 의문 제기.
          + 애플의 목표는 경쟁 방지로 보임.
          + 앱 스토어 독점 유지가 목적이며, 보안 문제를 핑계로 삼음.
     * 앱 생태계(안드로이드와 애플)는 시장 소유자의 이익 극대화를 위해 설계됨.
          + 웹이 기업의 이익에 의해 개발되었다면 어떻게 됐을지에 대한 상상.
          + 앱은 웹보다 더 잘 설계될 수 있었으나, 설치가 필요한 불편한 과정이 됨.
     * 애플의 법무팀이 DMA의 문구를 찾아내는 데 많은 시간과 노력을 쏟음.
          + 유럽위원회가 애플을 법정에 끌고 가서 그들의 행동을 방어하게 될 것에 대한 관심.
     * 애플의 악의적인 준수에 대한 비판.
          + 웹 배포는 독립 개발자에게 막혀 있으며, 이미 애플 세금을 내는 개발자에게만 적용됨.
     * 애플이 여전히 DMA 요구 사항을 준수하지 않음.
          + Core Technology Fee는 명백히 불법임.
          + 개발자가 이미 좋은 평판을 가지고 있고 200만 앱 다운로드가 있어야 한다는 요구 사항은 미쳤고, 준수하지 않음.
     * 애플은 웹 배포에 대한 강력한 통제를 유지함.
          + 새로운 스타트업과 독립 개발자에게 접근을 차단하는 조건이 있음.
     * 개인적으로 자신의 장치에 앱을 설치하고 싶지만, 매년 $99를 지불하고 싶지 않음.
          + 이것이 허용되지 않는 것 같음.
     * 애플이 언제든지 개발자의 접근을 제거할 수 있기 때문에 여전히 충분하지 않음.
          + 코드 서명 및 출판 과정에서 애플을 완전히 제거해야 함.
"
"https://news.hada.io/topic?id=13692","우버 챗, GraphQL과 카프카로 확장성 높여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       우버 챗, GraphQL과 카프카로 확장성 높여

    1. 우버는 WAMP 프로토콜로 만든 기존 채팅 아키텍처를 GraphQL 구독을 활용한 새로운 솔루션으로 교체했다.
    2. 새로운 아키텍처는 신뢰성, 확장성, 관찰성/디버깅성을 개선하고, 기술 부채를 줄여준다.
    3. 새로운 아키텍처는 마이크로서비스, 카프카, 프록시, 웹소켓, 캐싱, 모니터링 등 다양한 기술을 조합하여 구현되었다.
"
"https://news.hada.io/topic?id=13782","Devin, 첫 번째 AI 소프트웨어 엔지니어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Devin, 첫 번째 AI 소프트웨어 엔지니어

     * Devin은 세계 최초의 완전 자율적인 AI 소프트웨어 엔지니어임
     * Devin은 휴먼 엔지니어와 함께 혹은 독립적으로 작업을 수행하고, 엔지니어들이 더 흥미로운 문제에 집중할 수 있게 함
     * Devin은 복잡한 엔지니어링 작업을 계획하고 실행할 수 있으며, 쉘, 코드 에디터, 브라우저 등 개발자 도구를 사용할 수 있음

Devin의 능력

     * Devin은 장기적인 추론과 계획에 있어서 진보를 이루었으며, 복잡한 엔지니어링 작업을 수천 개의 결정을 내리며 수행할 수 있음.
     * 사용자와 협력하여 실시간으로 진행 상황을 보고하고, 피드백을 받으며 디자인 선택을 함께 할 수 있음.
     * Devin은 생소한 기술을 배우고, 앱을 빌드하고 배포하며, 코드베이스에서 버그를 찾아 수정하고, 자체 AI 모델을 훈련하고 세부 조정할 수 있음.

Devin의 성능

     * SWE-bench 코딩 벤치마크에서 Devin은 실제 GitHub 이슈를 해결하는 데 있어 이전 최고 기록인 1.96%를 크게 뛰어넘는 13.86%의 성공률을 보임.
     * Devin은 데이터셋의 무작위 25% 부분집합에서 평가되었으며, 다른 모델들이 편집해야 할 정확한 파일을 알려주는 도움을 받은 반면 Devin은 도움 없이 수행함.

Cognition 소개

     * Cognition은 추론에 중점을 둔 적용 AI 연구소임.
     * AI 동료를 개발하여 오늘날의 AI 도구를 뛰어넘는 능력을 제공하고자 함.
     * Cognition은 Founders Fund가 주도하는 2100만 달러 규모의 시리즈 A 투자를 받았으며, 업계 리더들의 지원을 받고 있음.

Devin 고용하기

     * Devin은 현재 초기 접근 단계에 있으며, 엔지니어링 작업에 Devin을 사용하고 싶다면 Cognition과 연락할 수 있음.

우리와 함께하세요

     * Cognition의 팀은 소규모이며, 창립 팀은 IOI 금메달 10개를 보유하고 있으며, Cursor, Scale AI, Lunchclub, Modal, Google DeepMind, Waymo, Nuro 등에서 근무한 경험이 있는 리더와 빌더로 구성됨.
     * Devin을 구축하는 것은 첫 단계이며, 가장 어려운 도전은 아직 남아 있음.

GN⁺의 의견

     * Devin이라는 AI 소프트웨어 엔지니어는 소프트웨어 개발의 미래를 상징하며, 자동화와 AI의 결합을 통해 엔지니어링 작업의 효율성을 크게 향상시킬 잠재력을 가짐.
     * AI가 실제 엔지니어링 문제를 해결하는 데 있어 이렇게 높은 성공률을 보인 것은 주목할 만한 성과이며, 이는 AI 기술의 발전이 실제 업무 환경에 얼마나 잘 통합될 수 있는지를 보여줌.
     * 그러나 AI가 인간의 업무를 대체하는 것에 대한 윤리적, 사회적 영향에 대한 고려가 필요함. AI의 도입이 일자리에 미치는 영향과 인간의 역할 변화에 대해 신중한 접근이 요구됨.
     * 비슷한 기능을 제공하는 다른 AI 기반 개발 도구로는 GitHub Copilot이 있으며, 이는 개발자의 코드 작성을 보조하는 도구로 널리 사용됨.
     * Devin과 같은 기술을 도입할 때는 데이터 보안, 개인정보 보호, 그리고 AI의 결정에 대한 투명성과 책임 문제를 고려해야 함. AI의 결정이 비즈니스와 사용자에게 미치는 영향을 이해하고 관리하는 것이 중요함.

   devin 무료로 써보고싶네용

        Hacker News 의견

     * 개발자이자 제품 담당자로서, AI를 이용해 코딩을 시도했지만, 문맥 길이, 모델의 부실한 출력, 아키텍처 부재 등으로 실패함. Leetcode 도움을 넘어서는 유용한 작업을 AI로 하지 못함. 간단한 HTML 페이지에서 선택자를 추출하는 작업도 여러 AI 모델로 시도했지만 성공하지 못함. 기술 발전에 대한 기대감이 컸으나 실제로 제대로 작동하는 제품을 원함.
     * 인간은 의미와 만족을 주는 일을 찾음. 기술 발전으로 장인들이 가장 먼저 쓸모없어짐. 사회는 가치를 생산하지 않으면 존엄성을 인정하지 않는다는 메시지를 보냄. 예술과 엔지니어링을 AI에게 맡김으로써 이해하지 못하는 사람들도 저렴하게 이용할 수 있게 됨. 기술 발전이 누구에게 이익이 되는지, 그리고 미래에 인간의 위치는 어디인지에 대한 질문을 던짐.
     * Scott Wu는 1989년 이래 완벽한 점수를 받은 소수의 사람 중 하나로, 경쟁 프로그래밍 올림피아드에서 만남. 그의 놀라운 재능을 활용하고 있음을 보고 기쁨.
     * 인증 없이 임의의 크기의 파일을 업로드할 수 있는 웹사이트에 대해 크게 인상받지 않음. 500MB 파일을 서버에 올림.
     * AI가 뛰어나다면 좋은 용도로 사용해야 함. 고급 소프트웨어 엔지니어로서 코드 작성이 일의 90%가 아니라, 복잡한 요구 사항을 명확한 작업으로 나누고, 요구 사항의 틈을 찾아 최소한의 코드를 작성하며, 코드베이스를 이해하는 것임. ""AI 소프트웨어 엔지니어""보다는 ""AI 인간 관계자""가 필요함.
     * 데모는 인상적이지만 범위가 제한적이어서 실제 상황에서 얼마나 잘 작동할지 의문임. 소프트웨어 아키텍처를 할 수 있는지, 해결책이 단지 재생산에 불과한지, 해결책이 90%만 정확하면 충분하지 않은 경우가 얼마나 자주 발생할지에 대한 의문.
     * 백엔드 개발 경험이 있는 사람으로서, LLM은 기본 라이브러리/프레임워크/언어를 잘 알 때 코드 생성에 대한 놀라운 생산성 향상을 제공함. 그러나 여전히 모든 것을 알아야 하며, AI가 자동으로 모든 것을 할 수는 없음.
     * 데모가 인상적이고 출시를 축하하지만, Devin이 마주하는 버그가 간단한 수정으로 해결 가능한지 궁금함. 예를 들어, KeyError를 해결하기 위해 try-catch로 코드를 감싸는 것은 코드를 실행시키지만, 항상 이상적인 해결책은 아님.
     * LLM은 여전히 ""운율 맞추기"" 단계에 있음. ""이성적 사고""로 넘어갈 수 있을지는 미지수이지만, 코딩은 복잡한 문제에 대해 이성적 사고가 필요함. 변화하는 속도를 고려할 때 무엇이든 가능성을 배제하지 않음.
     * 이 분야에서 일하는 사람으로서, 코딩에서 AI의 사용은 현재 보조 도구와 고급 자동완성 수준임. Pythagora와 같은 회사들은 인간의 개입이 중요하다고 보고 있으며, LLM을 지시에 따라 빠르게 행동하는 열정적인 주니어 개발자로 생각할 수 있음. 내부 프롬프트와 인간의 약간의 지도로 놀라운 결과를 낼 수 있음.
"
"https://news.hada.io/topic?id=13727","지난 몇 년간 제가 작업해온 게임 제작 도구 'Downpour'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  지난 몇 년간 제가 작업해온 게임 제작 도구 'Downpour'

Downpour 출시

     * Downpour는 게임 제작 도구로, 개발자가 Niantic을 떠난 2022년 10월부터 몇 년간 작업해온 프로젝트임.
     * 이 도구의 목표는 상호작용하는 게임과 같은 것을 만드는 과정을 다른 어떤 도구보다 빠르고 쉽게 만드는 것임.
     * 게임 제작의 가장 간단한 형태는 선택을 만드는 것이며, Downpour는 사용자에게 선택만을 제공함.

기능과 표현력

     * 사용자는 텍스트를 작성할 수 있고, 표현력을 높이기 위해 이미지도 추가할 수 있음.
     * 이미지는 종이에 그린 그림을 스캔하거나, 다른 물체의 사진을 찍거나, 소프트웨어로 그리거나, 온라인에서 찾은 이미지를 가져올 수 있음.
     * 사용자가 컴퓨터 없이도 사용할 수 있도록 스마트폰에서도 사용 가능하며, iOS와 안드로이드 모두에서 작동함.

사용성과 접근성

     * Flutter 프레임워크를 사용하여 크로스 플랫폼 지원과 빠른 시작 시간을 제공함.
     * UI 디자인, 무한 캔버스 편집, 한 손으로 휴대폰을 들고 사용할 수 있도록 디자인된 점 등이 특징임.
     * 사용자가 게임 제작을 시작하고 공유하는 과정이 중요하므로, 게임을 쉽게 업로드하고 공유할 수 있는 기능을 제공함.

게임 공유와 확장성

     * 사용자가 만든 게임은 Downpour 내부의 버튼을 통해 서버에 업로드되어 누구나 플레이할 수 있음.
     * 게임은 웹 브라우저에서도 플레이 가능하며, HTML과 Javascript로 만들어진 두 번째 버전의 코드가 있음.
     * 사용자가 게임을 수정하거나 새로운 기능을 추가할 수 있도록 브라우저 코드를 오픈 소스로 제공함.

GN⁺의 의견

     * Downpour는 게임 제작의 진입 장벽을 낮추는 도구로, 기술적 지식이 없는 사람들도 쉽게 게임을 만들 수 있게 함으로써 창의적인 표현의 기회를 확대함.
     * Flutter를 사용한 크로스 플랫폼 지원은 개발자에게 두 가지 운영 체제를 위한 별도의 앱을 만들 필요 없이 효율적인 개발을 가능하게 함.
     * 게임을 웹 브라우저에서 플레이할 수 있게 하는 것은 게임의 접근성을 높이고, 더 많은 사용자에게 도달할 수 있는 기회를 제공함.
     * 오픈 소스로 제공되는 브라우저 코드는 사용자가 자신의 게임을 개인화하고 확장할 수 있는 가능성을 열어줌.
     * 이와 유사한 기능을 제공하는 다른 도구로는 Twine이나 RPG Maker가 있으나, Downpour는 특히 모바일 기기에서의 사용성과 빠른 게임 제작에 초점을 맞추고 있어 차별화된 접근을 제공함.
     * 기술을 도입할 때는 사용자 커뮤니티의 활성화 정도와 지속적인 지원 및 업데이트 가능성을 고려해야 하며, Downpour는 사용자가 쉽게 게임을 만들고 공유할 수 있도록 설계되어 있어 이러한 측면에서 유리함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 사용자가 ""Where's Madeleine"" 게임을 즐겁게 플레이함.
          + 초기 인터넷의 매력을 느낄 수 있는 단순한 시절로 돌아간 느낌.
     * 두 번째 댓글 요약:
          + 접근성 기능 추가를 희망함.
          + 학습 장애가 있는 아이들에게 유용할 것으로 예상.
          + 스위치 스캐닝 기능과 아이템 선택을 위한 공간 제공이 필요.
     * 세 번째 댓글 요약:
          + V가 창의적인 것을 만들기 쉽게 하는 것에 능함.
          + 이전 작업인 ""cheapbotsdonequick.com""의 팬.
          + 트위터 API 접근 중단에 대한 아쉬움과 downpour로 만들어질 작품에 대한 기대감.
     * 네 번째 댓글 요약:
          + 간단한 도구를 사용하여 복잡한 작업을 수행하는 사람들에 대한 감탄.
          + 프레임워크의 한계를 우회하는 데 많은 노력을 기울이는 것을 즐김.
          + 멋진 게임, 예술 작품, 이야기 등이 만들어질 것으로 기대.
     * 다섯 번째 댓글 요약:
          + HyperCard를 연상시키는 강한 느낌을 받음.
          + HyperCard는 사용자가 인터랙티브 미디어를 만들 수 있게 해주는 소프트웨어였음.
     * 여섯 번째 댓글 요약:
          + 가입 또는 로그인 시도 시 문제 발생.
          + Firebase URL이 앱 스토어로 리디렉션되어 가입 방법을 찾을 수 없음.
     * 일곱 번째 댓글 요약:
          + 아들과 조카들과 함께 사용할 수 있는 앱을 만들고 싶었음.
          + 이 앱이 찾던 바로 그것이며, 여름 내내 함께 게임을 만들 계획.
     * 여덟 번째 댓글 요약:
          + 인터넷에서 본 고양이 중 Madeleine이 가장 마음에 듦.
     * 아홉 번째 댓글 요약:
          + 웹사이트와 앱 모두 기발함.
          + 매우 재미있는 컨셉으로, 앱을 탐색할 예정.
     * 열 번째 댓글 요약:
          + 이러한 도구는 놀라움.
          + 공유에 감사함.
"
"https://news.hada.io/topic?id=13731","영국 대학생이 워싱턴에 의회 절차 설명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         영국 대학생이 워싱턴에 의회 절차 설명

의회를 가르치는 미스터리 소셜 미디어 계정

     * 의회 절차에 대한 깊은 이해를 제공하는 익명의 소셜 미디어 계정 @ringwiss가 주목받음.
     * 계정 운영자는 영국의 20세 경제학도 캐스퍼 서디로, 처음으로 정체를 공개함.
     * 서디는 미국 의회의 생중계를 시청하며 의회 규칙에 대한 지식을 쌓아옴.

의회 전문가들의 반응

     * 의회 절차에 대한 서디의 깊은 지식과 빠른 반응으로 워싱턴의 스태프, 로비스트, 기자들 사이에서 신뢰받음.
     * 서디의 트윗은 의회의 복잡한 규칙과 역사에 대한 논의로 유명하며, 심지어 의원들의 오류도 정정함.
     * 그의 팔로워는 약 4,000명이지만, 의회 수석 보좌관, 위원회 직원 감독 등 영향력 있는 인사들을 포함함.

서디의 의회 절차에 대한 관심

     * 서디는 2020년 선거 동안 미국 정치를 따르기 시작했으며, 2021년 하원 의장 선거를 보고 의회 절차에 매료됨.
     * 그는 의회의 생중계를 시청하며 모르는 점이 생길 때마다 의회 규칙서를 찾아보며 학습함.
     * 서디는 의회 절차에 대한 교육적 기능을 하는 트윗을 자주 올리며, 그의 트윗은 수십만의 조회수를 기록함.

의회 절차에 대한 서디의 비판적 관점

     * 서디는 의회의 중앙집권적 권력에 대해 비판적이며, 의원들이 스스로 권력을 이해하고 사용하지 않는 현상을 지적함.
     * 그는 의회 지도자들이 실제로는 상징적인 존재일 뿐이며, 의원들이 스스로 규칙을 배우고 활용하지 않아 현 상태가 고착화되었다고 주장함.

GN⁺의 의견

     * 캐스퍼 서디의 이야기는 의회 절차에 대한 깊은 이해가 얼마나 중요한지를 보여줌. 의회의 복잡한 규칙을 이해하고 이를 활용할 수 있는 지식은 정책 결정과 법안 통과에 큰 영향을 미칠 수 있음.
     * 서디의 접근 방식은 의회 내부의 전문가들조차 놓치기 쉬운 세부 사항을 포착하는 데 도움이 될 수 있으며, 이는 의회의 투명성과 책임성을 높이는 데 기여할 수 있음.
     * 그러나 서디의 트윗이 의회 절차에 대한 이해를 높이는 데 도움이 될 수 있지만, 실제 의회의 복잡한 정치적 상황과 권력 구조를 완전히 반영하지는 못할 수도 있음. 의회 내부의 정치적 압력과 리더십의 영향력은 종종 규칙과 절차를 넘어서는 요소임.
     * 이러한 분석과 지식 공유는 의회 절차에 대한 교육적 자료로 활용될 수 있으며, 의회의 신규 의원들이나 정책 결정에 관여하는 이들에게 유용한 자료가 될 수 있음.
     * 서디와 같은 개인이 의회 절차에 대한 지식을 널리 공유하는 것은 오픈소스 정신과 유사하며, 이러한 정보의 공유는 더 많은 사람들이 의회의 작동 방식을 이해하고 참여할 수 있도록 장려할 수 있음.

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + 기사에서 인용된 사람 중 한 명이며, 다른 인용된 사람들 대부분은 동료임. 많은 사람들이 의회 직원으로 일했고, 몇몇은 의회 싱크탱크에서 일했으며, 다른 이들은 의회에 관한 책을 저술했음. 이러한 배경을 바탕으로 Ringwiss의 업적이 매우 놀랍다고 강조하고 싶음. 그는 하원과 상원의 절차 규칙에 대한 깊은 이해를 가지고 있으며, 이 두 기관의 규칙이 서로 매우 다르지만 그를 구분할 수 있음. 몇 시간 동안 회의를 지켜보는 인내심을 가질 수 없을 것 같고, 선례를 읽을 수는 있겠지만, 그것을 활성 기억에 오랫동안 유지하는 것은 의심스러움. 하원과 상원 규칙을 여러 번 처음부터 끝까지 읽었지만, 그것을 즉시 기억하고 운영화하는 것과는 다르며, 선례를 파고들어 그 의미를 이해하는 것도 다름. 이는 많은 연습에서 비롯됨. 특별한 관심을 가지고
            있는 것 외에도, Ringwiss는 사진기억을 가지고 있을 것이라는 의심이 듦. 그는 놀라운 사람이며, 그가 하는 일에 감사함. 내 생각에, 하원과 상원의 규칙은 너무 복잡해서 몇몇 사람만 이해할 수 있음. 절차는 소수의 손에 권력을 집중시키는 데 사용되며, 이는 원래 목적인 질서 있는 토론을 촉진하고 모든 회원에게 권력을 동등하게 부여하는 것을 약화시킴. 이를 로버츠 규칙(회의 진행 규칙)과 비교하면, 대부분의 사람들이 한두 번 읽기만으로도 이해할 수 있을 정도로 직관적임. 말했듯이, 그가 하는 일은 놀랍지만, 그가 하는 일을 할 수 있는 사람이 드문 것도 놀랍다고 생각함.
          + 인터넷을 이용한 이러한 활동은 멋진 일임. 주제에 대한 열정이 있는 사람들이 다른 사람들에게 교육할 수 있음. 인터넷, 레딧, 트위터 등이 처음에는 이러한 목적을 가지고 있었고, 해커뉴스가 오늘날에도 그러한 공간임을 바라며, 야만인들이 우리에게 도달하지 않기를 희망함.
          + 스포츠에서 사람들이 얻는 재미를 생각하게 함. 오랜 역사와 많은 이야기가 있는 풍부한 정보를 가지고 있음. 판타지 의회와 같은 것으로 정치에 많은 사람들을 끌어들일 수 있을 것임. 판타지 스포츠처럼 대표를 선택하는 것과 같을 것임.
          + 정부 절차를 게임화된 RPG 전투 로그 형식으로 만드는 아이디어가 있었음. 정부의 구성원들이 전투에서 캐릭터가 되고, 수정안/코멘트/투표와 같은 행동들이 공격/주문/방어 동작이 될 것임. 괴물들은 법안/결의안 등이 될 것임. 그러면 의회 세션을 전투로 재생할 수 있음. 목적은 절차를 신비화하고 사람들이 더 익숙한 것에 비유하는 것임.
          + 까다로운 지적: 매트 글래스맨은 하원 의장의 판결이 언제 마지막으로 항소로 뒤집혔는지에 대한 질문을 했고, @ringwiss라는 익명의 사용자가 1938년이라고 답하며 수십 년 된 의회 기록을 증거로 제시함. 하지만 1938년 의회 기록 사본은 그 답이 그 이전이 아니라는 것을 증명할 뿐임. 작가의 오류일 수 있지만, 매우 까다로운 지적임.
          + 그는 영국의 대학생이지, 영국의 대학(고등학교) 학생이 아님. 영국에서는 16세부터 18세까지 대학에서 공부하고, 그는 20세로 더럼 대학교에서 공부하고 있음.
          + 놀라운 기술을 가진 사람으로, 초기 경력의 기업 사다리에서 길을 잃지 않고 이를 활용할 수 있는 방법을 찾기를 바람.
          + 자신의 열정을 찾은 사람을 보는 것은 항상 멋진 일임. 이 사람은 열정이 정말로 무엇이든 될 수 있음을 증명함.
          + 이러한 놀라운 자원이 트위터에 갇혀 있다는 것이 매우 안타까움.
          + 정치에서 가장 싫어하는 것은 그것이 얼마나 본능에 의해 이끌릴 수 있는지임. 그래서 이러한 활동을 보고 마음이 따뜻해짐.
"
"https://news.hada.io/topic?id=13685","Linkedin 을 떠나며","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Linkedin 을 떠나며

     * 일을 제대로 하는 것과 회사의 빠른 속도가 충돌할때 당신의 선택은?
     * 신념을 지키고 타협할 것인지, 원칙에 맞는 일을 찾아 떠날지에서 후자를 선택한 엔지니어 Chris Krycho의 이야기
     * 크리스는 결국 자신의 원칙에 부합하는 일을 추구하기 위해 링크드인을 떠났음
     * 팟캐스트에서 이야기한 내용을 정리
     * 그의 이야기는 ""혁신의 필요성""과 ""프로젝트 건전성의 중요성"" 사이의 긴장을 강조함

크리스 크라이초의 링크드인에서의 첫 날

     * 크리스는 2019년 1월 말에 링크드인에 합류. 큰 회사나 건강한 소규모 회사에서 흔히 볼 수 있는 다양한 온보딩 과정을 거침.
     * 크리스는 콜로라도에서 원격으로 근무할 예정이었으나, 처음 두 주는 온보딩과 팀과의 시간을 보냄.

수백만 줄의 코드

     * 이전 회사에서의 경험과 비교했을 때, 링크드인의 프론트엔드 클라이언트 앱과 백엔드 서비스의 규모에 크게 놀람.
     * 링크드인의 프론트엔드는 2백만 줄에 달하며, 이는 이전 회사의 전체 코드보다 훨씬 많음.

인프라 팀

     * 크리스의 역할은 인프라 팀에서, 서버 구축이 아닌 엔지니어링 지원 또는 개발자 경험 개선에 초점을 맞춤.
     * 링크드인의 대규모 데스크탑 앱을 보다 쉽게 작업할 수 있도록 지원하는 것이 목표.

자바스크립트 현대화

     * 자바스크립트 클래스 도입을 통한 코드 현대화 작업에 참여. Ember 프레임워크를 사용하면서 생기는 문제를 해결하는 과정에서 많은 것을 배움.
     * 대규모 코드베이스에서의 마이그레이션 작업은 가능한 한 자동화되어야 하며, 이는 수작업으로 처리하기에는 너무 큰 작업량임을 깨달음.

타입스크립트 도입

     * 프론트엔드에서 발생하는 오류를 줄이기 위해 타입스크립트로의 이동을 결정함.
     * 타입스크립트는 점진적으로 도입할 수 있으며, 이는 링크드인이 필요로 하는 확장성을 제공함.

느린 마이그레이션 계획 대 'Finger Gun's Plan'

     * 크리스와 그의 팀은 Ember 코드를 React로 마이그레이션 하는 3~5년 계획을 제안했으나, 다른 팀에서는 전체적인 재고와 빠른 속도를 약속하는 'Finger Gun's Plan'을 제시함.
     * 이러한 접근 방식의 차이는 크리스와 그의 팀이 겪는 문제와 회사의 속도를 우선시하는 문화 사이의 갈등을 반영함.

크리스의 경험과 배움

     * 부족한 알림 문제 인식.
     * 메모리 사용량 증가와 서버 재시작의 연쇄 반응으로 인해 전체 데이터 센터의 서버가 다운됨.
     * 시스템의 재설정과 권한 조정을 통해 문제 해결을 시도함.
     * 실패는 불가피하며, 소프트웨어 엔지니어링은 엔지니어가 제품 결과물을 만들어내는 과정을 지원하는 시스템을 설계하는 것임.
     * 다중 계층의 복원력을 갖춘 시스템 필요성 강조.

사건에 대한 반발

     * 문제 해결 과정에서 관리의 신뢰 부족으로 인한 불만 발생.
     * 고위급 엔지니어와의 의견 불일치 및 소통 문제.
     * 시스템이 최고의 상태에서만 작동하는 것이 아니라, 모든 상황에서 지원할 수 있어야 함을 강조.

압력 증가

     * 기술적 부채 해결과 복원력 향상을 위한 노력에도 불구하고 경영진의 불만 증가.
     * 복잡한 문제에 대한 단순한 해결책을 요구하는 경영진과의 갈등.

조직 재편

     * '핑거건스 팀'으로 인한 조직 재편과 역할 변화.
     * 다른 역할에서의 새로운 경험과 학습 기회 인식.

반성과 자각

     * 과거의 경험과 현재 상황을 통한 자기 반성.
     * 인간 관계 구축과 소통의 중요성 인식.
     * 기술적 문제와 사회적 문제가 서로 연결되어 있음을 이해.

결론 및 교훈

     * 크리스는 속도를 최우선 가치로 삼는 문화에 대한 비판적 시각을 유지.
     * 경력과 개인의 가치에 대한 성찰을 통해 새로운 기회 모색.
     * 엔지니어링 우수성을 추구하는 역할을 찾기 위한 크리스의 여정은 계속됨.

GN⁺의 의견

     * 크리스 크리초의 경험은 기술적 원칙과 비즈니스 요구 사이의 갈등을 잘 보여줌.
     * 그의 결정은 개인의 가치와 직업적 선택 사이의 균형을 찾는 것의 중요성을 강조함.
     * 링크드인과 같은 대규모 기술 환경에서의 변화 관리는 복잡하며, 이는 다른 기업들에게도 중요한 교훈을 제공함.
     * TypeScript와 같은 기술 도입은 코드 품질을 향상시키고 오류를 줄이는 데 도움이 될 수 있으나, 대규모 코드베이스에서는 점진적인 접근이 필요함.
     * 이러한 기술적 변화를 추진할 때는 개발자 경험과 제품 출시 속도 사이의 균형을 고려해야 함.

        Hacker News 의견

     *

     한 관리자와의 대화에서 '너는 이상주의적이고, 수익을 충분히 중요시하지 않으며, 가치관을 바꿔야 한다'는 말을 들었다고 한다. 이에 대해 거부감을 표현하며, 자신의 가치관을 고수하겠다는 의지를 밝혔다. 이 발언은 팟캐스트에서 가장 흥미로운 부분으로, 저자는 이를 통해 중요한 피드백을 의도적으로 무시한 것 같다는 인상을 받았다고 한다. 경력에서 배운 교훈은 옳은 것을 아는 것이 어려운 것이 아니라, 옳은 해결책으로 조직 전체의 일치를 이루는 것이 진정 어려운 문제라는 것이다.
          + 관리자와의 대화에서 가치관 충돌을 경험한 사례
          + 중요한 피드백을 의도적으로 무시한 인상
          + 옳은 해결책에 대한 조직 전체의 일치가 중요한 교훈
     *

     2019년에 facebook.com을 React로 재작성하는 작업에 참여했다. LinkedIn의 코드베이스나 조직에 대해 직접 알지는 못하지만, 유사한 코드베이스와 조직 구조를 가진 회사들을 본 경험이 있다. '핑거 건' 접근법을 지지하는데, 이는 잘 구현될 경우 긍정적인 결과를 가져올 수 있다. 여러 클라이언트가 동일한 작업을 시도할 때, 하나를 기반으로 다른 플랫폼을 서비스할 수 있다. 또는 새로 시작할 때, 깨끗하고 빠르며 간결한 방식으로 할 수 있다. 성공의 일반적인 요소는 베테랑 소규모 팀이 새로운 시스템을 만드는 것이며, 도메인 전문가와 기술 전문가가 결합된 소규모 엔지니어 팀에서 성공이 나온다고 믿는다. 기술 관리에서 반복되는 큰 문제는 가장 경험이 적은 사람들이 다음 큰 시스템을 구축한다는 것이다.
          + React로의 재작성 경험 공유
          + '핑거 건' 접근법과 소규모 베테랑 팀의 중요성 강조
          + 경험이 적은 사람들이 큰 시스템을 구축하는 문제 지적
     *

     큰 재작성은 관리 가능한 코드베이스에서도 위험하며, 잔여 문제들이 완전히 사라지지 않는다. 몇 년이 지난 후에 숨겨진 설정 페이지를 다시 작성하려는 사람은 누구인가? 코드베이스를 재작성하는 프레임워크가 있었으면 좋겠지만, 실제로는 없다. 자동화된 코드모드는 일관성을 요구하는데, 이를 준수하는 경우는 드물다. 시간이 지남에 따라 코드 패턴이 많이 변화했기 때문에, 마치 나무의 나이테를 보는 것 같다. 코드를 상자에 넣고 재배열하는 것이지만, 상자 수준에서는 자동화가 이루어지지 않는다.
          + 코드베이스 재작성의 위험성과 잔여 문제들
          + 코드 재작성을 위한 프레임워크 부재
          + 코드 수준의 자동화와 상자 수준의 자동화 사이의 간극
     *

     현재 LinkedIn에서 일하고 있으며, 팟캐스트에서 언급된 Chris의 역할과 프론트엔드 웹 개발은 ember와 관련이 있다고 생각한다. LinkedIn의 모놀리식 플래그십 웹 앱인 voyager-web을 언급하는 것 같다. LinkedIn에는 voyager-web 외에도 수백만 줄의 코드와 긴 빌드 시간을 가진 시스템이 많다. 예를 들어, 중간 계층, 오프라인 데이터 스택, 메트릭 시스템, Kafka 등이 있다. 17분 빌드 시간은 꽤 좋은 편이며, 일시적인 인프라 실패 없이 17분이면 매우 좋은 것이다.
          + LinkedIn에서의 현재 근무 경험 공유
          + 다양한 시스템과 빌드 시간에 대한 설명
          + 17분 빌드 시간에 대한 평가
     *

     수백만 줄의 JavaScript 코드는 과도한 부피를 의미한다. LinkedIn과 같은 서비스를 재구현하거나 자신만의 연락처 데이터베이스를 만들고 싶은 생각이 들었다. 문제는 연락처를 대량으로 이전하는 방법이다. Microsoft LinkedIn의 주요 문제 중 하나는 연락처 정보를 내보낼 수 없다는 것이며, 이는 연락처 플랫폼에서 반드시 필요한 기능이다.
          + JavaScript 코드의 과도한 부피 지적
          + 연락처 정보 이전의 어려움
          + 연락처 정보 내보내기 기능의 중요성
     *

     LinkedIn에서 12년을 보냈지만, 이제는 과거의 엔지니어링 조직과는 거리가 멀다. Kevin Scott이 엔지니어링을 이끌던 시절이 훨씬 낫다고 평가한다.
          + LinkedIn에서의 장기 근무 경험
          + 과거의 엔지니어링 조직과 현재의 차이점
     *

     Conway의 법칙이 작용하는 상황이다. 조직이 변하지 않는 한, 같은 코드 혼란을 다시 만들어낼 것이다. 긍정적인 엔지니어링 이니셔티브는 상위에서 내려와야 하며, 매우 고위급의 지지가 필요하다. 조직을 하단에서 상단으로 바꾸는 것은 불가능하며, 조직이 코드베이스를 만들어낸다.
          + 조직 변화 없이 코드 혼란 재발 가능성
          + 상위에서의 긍정적인 엔지니어링 이니셔티브 필요성
     *

     Chris Krycho가 자신의 어려움에 대해 솔직하게 이야기하면서도 비난 게임을 하지 않는 태도에 깊은 인상을 받았다. CoRecursive는 코드 뒤에 복잡한 맥락을 탐구하는 것으로 내가 좋아하는 팟캐스트 중 하나이다.
          + Chris Krycho의 솔직한 태도와 비난 회피
          + CoRecursive 팟캐스트에 대한 긍정적인 평가
     *

     Ember에서 React로의 이전은 내가 이전에 일했던 클라이언트가 만든 기술에 적합한 사례로 보인다. 그는 'Unhack'이라는 언어를 만들어 AST 수준에서 검색 및 대체를 할 수 있게 했다. 원본 코드에서 패턴을 지정하고, 그것을 대체할 다른 패턴을 지정하는 언어를 사용했다. 몇 년 전 그 클라이언트와의 작업을 중단했기 때문에 현재 존재하는지는 모른다.
          + Ember에서 React로의 기술 이전 사례
          + AST 수준에서의 검색 및 대체를 가능하게 하는 'Unhack' 언어
     *

     LinkedIn의 코드베이스가 어지럽다는 것은 웹사이트를 사용해보면 놀랄 일이 아니다. 관심 있는 게시물을 클릭하고, 글을 쓴 사람에 대해 더 알아보려고 한 다음 뒤로 가기를 누르면 피드가 새로고침되어 게시물을 잃어버린다. 받은 메시지를 스크롤하려고 하면 전체 웹페이지가 느려지고 입력을 등록하는 데 10-15초가 걸린다. 왜 30개의 가짜 알림을 받는가? 이들은 사람들로부터 상호작용을 강요하기 위해 만들어진 가짜 알림이다. 추천 알고리즘도 완전히 끔찍하다.
          + LinkedIn 웹사이트 사용의 어려움
          + 가짜 알림과 느린 웹페이지 반응 속도
          + 추천 알고리즘의 문제점 지적
"
"https://news.hada.io/topic?id=13723","Show GN: 닮은 연예인 찾기 AI서비스 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 닮은 연예인 찾기 AI서비스 업데이트

   안녕하세요~ 일전에 닮은 연예인 찾기 서비스를 오픈하면서 글을 작성해봤었는데, 이번에 서비스를 업데이트하면서 다시 한번 공유드립니다.

   [ 개선 배경 ]

   이번에 서비스를 개선하면서 닮은사람 찾는 모델 정확도를 개선하고 성능을 개선했는데요.

   그전엔 Tensorflow JS로 학습된 AI모델을 사이트 방문자 장비에 받아오고 예상하는 형태였어요.

   이 방식의 단점이, 사이트에 접속할 때 마다 모델을 끌어오는 형태라 로딩이 꽤오래 걸리고 정확도가 떨어졌었어요.

   물론 내 사진을 장비로 올리지 않는 큰 장점이 있지만, 데이터를 신경쓰다보니 모델 정확도가 너무 낮았고 사실 데이터를 더 많이 쓴다는 건 큰 단점이었죠..

   [ 모델 개선 내용 ]

   클라이언트-서버 모델로 변경하고,

   백엔드 서버에 정확도 높은 모델을 서빙해서, 성능과 모델 정확도를 높이고자 했어요.

   메타의 Facenet 이라는 미리 학습된 얼굴인식 모델을 사용해서 용량이 높지만 정확도가 높은 얼굴인식 모델로 변경했어요.

   그리고 얼굴인식 자체에 대한 정보를 주는 모델을 추가했는데요.

   이를 통해서 나이나 성별, 감정을 분석한 결과도 함께 확인할 수 있어서 좀더 신뢰감을 높이고자 했어요.

   이 기능을 개발하면서 들었던 고민이..
   얼굴이 인식되지 않는 사진에 대해서 cut-off 할 수 있었지만, 해당 기능을 굳이 켜진 않았는데요.

   얼굴이 없는 사진으로 테스트만 해보고 싶은 사람들도 여럿 계실 것 같더라구요~

   그래서.. 사물만 넣었는데 BTS를 닮았다고 나오는 경우도 있습니다 ㅎㅎ

   [ UI 변경 내용 ]

   UI에는 얼굴 분석 결과와, 닮은 연예인 목록을 둘다 표시하도록 변경했어요.

   그래서 세로로 더 길어졌어요.

   그리고 다국어 지원과, 링크 공유 기능도 추가했습니다.

   [ 개발 목표 ]

   현재 한번에 찾는 연예인 수를 200명 정도로 늘렸는데,

   앞으로 반년쯤 내에 전세계 2만명 정도의 연예인으로 늘려가는걸 목표로 하고 있어요!

   그럼 많은 관심 부탁드릴게요~!!

   사이트 도메인을 .kr 에서 .net 으로 변경했습니다!

   https://celebme.net

   예전에 글 올리셨던 것 기억나요!

   신뢰감을 높이고자 하셨다고 했는데,
   내용에 언급하신 것처럼 얼굴이 없는 사진으로 테스트 했을 때도 나이, 성별, 감정 분석 결과가 나온다면, 오히려 신뢰도가 반감될 수 있을 것 같아요.

   얼굴이 인식되었는지 아닌지를 알 수 있다면, 얼굴이 없을 때 닮은꼴 결과는 표시해주되 얼굴 분석 결과 대신 '얼굴이 없는 것 같다, 다른 사진으로 시도해보는게 어떻겠나' 등의 메시지가 표시되는 게 더 좋지 않을까요?
"
"https://news.hada.io/topic?id=13697","스타트업에서 바닥부터 LLMs 훈련하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스타트업에서 바닥부터 LLMs 훈련하기

LLM을 처음부터 완전히 훈련시키기

     * Reka에서 강력한 멀티모달 언어 모델을 성공적으로 훈련시킨 경험에 대한 호기심이 많음.
     * 인프라 구축과 큰 언어 및 멀티모달 모델을 처음부터 훈련하는 과정의 도전과 교훈을 공유함.
     * 이 포스트가 많은 사람들에게 흥미롭고 교육적이기를 바람.

LLM 시대의 하드웨어 복권

     * 모델 훈련을 위한 첫 번째 필수 요소는 컴퓨팅 파워 확보임.
     * 컴퓨팅 제공업체의 불안정성과 클러스터, 가속기, 연결성의 품질 차이에 놀람.
     * 하드웨어의 품질 차이가 크며, 이는 훈련에 있어서 실제로 '하드웨어 복권'과 같음.

GPU 대 TPU

     * Reka에서는 주로 GPU를 사용하여 모델을 훈련함.
     * Google에서 TPU를 사용한 경험과 비교했을 때, GPU의 실패율에 놀람.
     * 하드웨어 팀의 역량이 중요하며, 이는 '하드웨어 복권' 개념을 강화함.

멀티 클러스터 설정의 고통

     * 여러 클러스터에서 새로운 환경을 설정해야 하는 개념이 낯설음.
     * 여러 클러스터의 가속기 풀을 가지는 것이 불가피함.
     * 대규모 데이터를 다루는 데 있어 불편함이 있으며, 데이터 복제는 대규모에서 간단하지 않음.

야생의 코드

     * T5X와 MeshTensorflow가 좋아하는 코드베이스였으나, Google 외부에서는 지원이 적고, 사용하기 어려움.
     * 더 접근하기 쉬운 PyTorch를 선택함.
     * 외부의 코드베이스 품질이 Google 내부에 비해 뒤떨어짐을 느낌.

덜 원칙적이고, 더 Yolo

     * 원칙적으로 모델을 체계적으로 확장해야 하지만, 스타트업에서는 계산 리소스가 적어 많은 Yolo 실행을 함.
     * 제한된 시도로 강력한 모델을 훈련시키는 것은 도전적임.

요약

     * 야생에서의 경험은 흥미롭지만 고통스러웠음.
     * 컴퓨팅 자원의 부족과 불안정한 제공업체로 인해 예상보다 어려웠으나 기술적인 힘으로 극복함.
     * 회사를 시작하고, 자금을 모으고, 칩을 구매하여 Gemini pro/GPT 3.5와 경쟁하고 다른 많은 이들을 능가하는 과정의 일부만을 이야기함.

GN⁺의 의견

     * 이 기사는 스타트업이 대규모 언어 모델을 처음부터 훈련시키는 과정에서 겪는 실제 문제와 도전을 잘 보여줌. 이는 초급 소프트웨어 엔지니어에게 현실적인 인사이트를 제공할 수 있음.
     * 하드웨어 선택의 중요성과 이에 따른 실패율, 지원 수준의 차이는 스타트업이나 작은 회사에서 큰 프로젝트를 시작할 때 반드시 고려해야 할 사항임.
     * 이 기사는 Google과 같은 대기업의 인프라와 비교하여 스타트업이 직면하는 기술적 제약을 강조함. 이는 스타트업이 기술 선택을 할 때 신중해야 하는 이유를 보여줌.
     * 스타트업이 대규모 모델을 훈련시키기 위해 필요한 인프라와 도구를 구축하는 과정은 매우 복잡하고 어려울 수 있음을 시사함. 이는 클라우드 서비스 제공업체의 선택이나 자체 하드웨어 구축 결정에 있어 중요한 고려 사항임.
     * 기술적인 문제와 도전에도 불구하고, 스타트업이 기술적인 힘으로 어려움을 극복하고 성공적인 결과를 얻을 수 있다는 긍정적인 메시지를 전달함.

        Hacker News 의견

     * 스타트업이란 소수의 인원과 대규모의 자금을 가지고 훈련 클러스터에 투자하는 조직을 의미함. 기사에서는 많은 스타트업들이나 기존 회사들이 서버를 임대하여 운영한다고 설명함. 대부분의 LLM(Large Language Model) 제작자들은 비슷한 하드웨어와 데이터를 사용하여 텍스트와 이미지 데이터로 훈련을 진행함. 각각의 LLM은 자신들만의 독특한 ""비밀 소스""를 가지고 있어, 이것이 LLM의 출력 품질에 차이를 만듦. 그러나 전반적으로 이러한 과정은 에너지를 많이 소모하는 중복 작업처럼 보임.
     * 이 글은 구글의 PaLM, UL2, Flan, Bard 등의 기술 리더였던 Yi Tay가 Reka의 공동 창립자가 되어 독립적인 스타트업으로 LLM을 훈련하는 경험에 대해 이야기한 것임. Yi Tay가 이 포스트를 작성하도록 유도한 대화는 여기에 기록됨.
     * Reka.ai에 대해 이 포스트를 통해 알게 됨. Reka.ai의 LLM은 해커뉴스에서 많이 논의되지 않았음. 호기심에 Reka Flash의 채팅 인터페이스를 ChatGPT 4, Gemini Advanced, Claude 3, Mistral Large와 비교해 테스트해봄. 결과는 여기에 있음. 전반적으로 Reka Flash는 다른 LLM들보다 눈에 띄게 나쁘거나 좋지 않음. 물론 확실히 판단하기 위해서는 더 많은 테스트가 필요함.
     * 저자는 독자들이 ""야생""을 ""구글이 아닌 곳""으로 이해한다고 가정함. 이 글은 구글의 인프라와 하드웨어 팀에 많은 공을 돌리며, 구글 내부자가 다른 곳에서 관련 작업을 하게 된 관점을 읽고 싶어함.
     * Reka.AI의 주요 페이지는 토큰으로 결제하는 일반적인 ChatGPT 클론, 즉 LLM으로 보임. 이것이 다른 회사들과 어떻게 다른지는 명확하지 않음. 가격은 ChatGPT 3.5-Turbo와 비슷해 보임.
     * 처음부터 LLM을 훈련하는 것은 원시 하드웨어 개선만큼이나 AI의 진화 속도와 범위에 중요한 문제임. 블로그는 재미있지만 다소 얕고 기술적이지 않으며, GPU 클러스터를 다룬 경험이 있는 사람에게는 놀라운 내용이 없음. 구글 밖에서 LLM을 위해 Jax를 PyTorch보다 추천하는 이유를 확실히 알 수 없음. 이 새로운 회사가 훈련 모험에 대한 더 기술적인 보고서를 발표하기를 바람.
     * 이야기의 작은 부분만을 다루고 있으며, 회사를 시작하고 자금을 모으고 칩을 구매하여 GPT 3.5 수준의 LLM을 일 년도 채 안 되어 구축하고 많은 다른 제품들을 능가함. 칩/클라우드 GPU에 얼마의 예산이 소요되었는지 궁금함. 대략 200만에서 500만 달러 정도일까?
     * 적절한 배경이나 경력이 없는 작은 스타트업들이 LLM 제품에 대한 자금을 어떻게 확보하는지가 큰 의문임. LLM 스타트업의 세계는 시드/펀딩을 위한 전제 조건이 명망 있는 고용 이력/적절한 경력과 제품이 시작되기 전에 투자할 준비가 된 탄탄한 투자자 네트워크를 가진 헤지펀드와 사모펀드의 세계와 비슷해 보임.
     * 제목이 ""ground zero"" 대신 ""from the ground up""이어야 하는 것은 아닌지 궁금함.
     * 훈련 데이터 과정에 대한 이야기가 매우 흥미롭지만, 더 듣고 싶음.
"
"https://news.hada.io/topic?id=13790","초기 검증 단계에 꼭 하는 채용 실수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          초기 검증 단계에 꼭 하는 채용 실수

     * PMF 이전에 적합한 인재는 제너럴리스트, PMF 이후에 적합한 인재는 스페셜리스트
     * 이를 알고도 초기 가설 검증 단계에서 좋은 대학, 빅테크 출신의 개발자, 디자이너들을 채용하고 마찰을 겪음
     * 알고도 실수를 하는 이유는 좋은 대학, 빅테크 출신이면 똑똑할 것이고 똑똑하면 어느 환경에서도 잘 할것이라 추상적으로 가정하게 되기 때문
     * 똑똑함으로 바뀔 수 있는게 있고 바뀔 수 없는게 있으며 이를 고려할때 coachable, learnable, intrinsic이 무엇인지 파악하면 좋음
          + Coachable은 외부에서 조금만 가이드를 주면 큰 변화를 만들 수 있는 것들
          + Learnable은 외부에서 가이드를 주는 것만으로는 한계가 있고 개인이 많은 노력을 해야 변하는 것들
          + Intrinsic은 유전적으로 혹은 어렸을때 환경에 의해서 생긴 기질들이며 이는 인생의 큰 사건을 겪지는 않는한 잘 바뀌지 않거나 바꾸려면 정말 긴 시간을 들여야하는 것들
     * Coachable은 온보딩, 정기적 1-on-1, 회고 등으로 할 수 있음
     * Learnable은 팀문화, 개발 문화로 해결할 수 있음
     * Intrinsic은 개인의 인생에 큰 사건이 발생해야 됨.

   PMF (Product Market Fit)
"
"https://news.hada.io/topic?id=13738","Dead Simple Site - 가장 미니멀한 웹사이트들 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Dead Simple Site - 가장 미니멀한 웹사이트들 모음

     * 미니멀한 웹사이트들을 하나로 모은 곳
          + 지나치게 애니메이션이 있는 콘텐츠 없고,
          + 스크롤 재킹도 없고
          + 과도한 스토리텔링도 없는 사이트들
     * 직접 제출 및 구독 가능

   긱뉴스도 등록해야할 듯

   비슷한 사이트로
     * 250KB Club https://250kb.club/
     * 512kb Club https://512kb.club/
     * 1MB Club https://1mb.club/ - 몇년전에 한번 공유했었네요 1MB Club
"
"https://news.hada.io/topic?id=13800","Flox 1.0 – Nix를 활용한 오픈소스 개발 환경 코드화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Flox 1.0 – Nix를 활용한 오픈소스 개발 환경 코드화

개발자 환경을 휴대할 수 있게해주는 Flox

     * Flox는 가상 환경과 패키지 관리자를 하나로 결합한 도구
     * 필요한 곳에만 종속성을 계층화 및 대체가능하게 하여 이식 가능한 환경을 만들 수 있음

왜 Flox가 필요할까

     * 동적인 도구, 프레임워크, 패키지 세트 위에 소프트웨어를 구축하지만, 새로운 개발 도구 마다 관리해야 할 새로운 의존성 세트가 생김
     * 간단한 앱이나 마이크로서비스가 복잡해지고, 확장되고 분열된 공급망으로 변함
     * Flox는 복잡한 소프트웨어 개발 생명주기에 재현성과 일관성을 제공함

기원

     * Flox는 D. E. Shaw 그룹에서 Nix 배포 중에 개발되었으며, Nix를 새로운 사용자에게 쉽게 만들고 패키지에 대한 중앙 집중식 제어를 제공함으로써 빠르게 가치를 입증함.
     * 그 결과, 성공적인 프로젝트는 Nix의 가장 크고 영향력 있는 기업 배포 중 하나가 됨.

라이선스

     * Flox CLI는 GPLv2 라이선스 하에 있음. 라이선스 파일 참조.

GN⁺의 의견

     * Flox는 개발자들이 소프트웨어 개발 과정에서 발생하는 의존성 문제를 해결하기 위한 효과적인 도구로 보임. 특히, 다양한 환경에서 일관된 개발 환경을 유지할 수 있는 기능은 대규모 프로젝트나 여러 개발자가 협업하는 환경에서 매우 유용할 것으로 예상됨.
     * Flox가 제공하는 이식성과 재현성은 컨테이너화 및 마이크로서비스 아키텍처가 주류가 된 현재 개발 트렌드와 잘 부합함. 이는 개발자들이 환경 설정에 드는 시간을 줄이고, 실제 개발에 더 집중할 수 있게 해줄 것으로 기대됨.
     * Flox의 기원이 D. E. Shaw 그룹의 Nix 배포에서 시작되었다는 점은, 실제 엔터프라이즈 환경에서의 검증을 의미하며, 이는 기업 사용자들에게 신뢰성을 제공할 수 있는 좋은 지표가 될 수 있음.
     * Flox와 유사한 기능을 제공하는 다른 오픈 소스 프로젝트로는 Docker, Vagrant 등이 있으나, Flox는 Nix 기반의 패키지 관리와 가상 환경 관리를 결합한 점에서 차별화된 접근을 제공함.
     * Flox를 도입할 때는 기존의 인프라와의 호환성, 학습 곡선, 그리고 커뮤니티 지원의 정도를 고려해야 할 것임. 또한, 오픈 소스 라이선스인 GPLv2의 조건에 대한 이해도 필요함.

        Hacker News 의견

     * Nix와 관련된 여러 도구들이 등장하고 있으며, 특히 개발 환경(dev envs)에 있어서 Nix의 유용성을 사람들이 인식하기 시작함.
          + devenv, devbox, daytona, devshell, bob.build 등의 도구들이 언급됨.
          + devenv 사용자는 도구를 좋아하지만, 개발이 정체된 것 같아 걱정을 표함.
          + flox가 개발을 적극적으로 밀어붙이고 있는 것에 대해 긍정적인 반응을 보이며, devenv를 사용하여 데이터베이스를 실행하는 방법에 대해 언급함.
     * Nix의 사용이 쉬워졌다는 주장에 대해 한 사용자는 자신의 경험을 바탕으로 Nix의 사용자 경험이 좋지 않다고 지적함.
          + Nix의 개념을 좋아하지만, 설정 조정과 문서 부족, 구식 방법론에 대한 불만을 표현함.
          + 새로운 도구가 이러한 문제를 해결할 수 있는지에 대한 의문을 제기함.
     * Flox의 출시를 축하하며, 수익 창출 방안에 대한 질문이 제기됨.
          + CEO에게 회사의 수익 모델에 대한 계획을 물어봄.
     * Nix의 복잡성을 숨기는 제품들이 사용자의 드라이브를 채울 수 있다는 문제를 지적함.
          + 사용자가 Nix의 내부 작동 방식을 이해하지 못하면 저장 공간 관리에 어려움을 겪을 수 있음.
          + 이러한 복잡성을 다루는 전략에 대한 질문이 제기됨.
     * Nix를 좋아하지만, 초보자를 위한 경험이 좋지 않다는 것을 인정하는 사용자가 있음.
          + Nix를 더 접근하기 쉽게 만들려는 노력을 환영하며, 명령어 인터페이스(CLI)의 중요성을 강조함.
          + IDE 통합과 '진짜 Nix'로 전환하는 방법에 대한 질문을 제기함.
     * 환경 설치가 바이트 단위로 반복 가능하도록 보장하는 'lock file' 생성에 대한 강한 욕구를 표현하는 사용자가 있음.
          + 이는 모든 지원 플랫폼에 대한 체크섬이 필요함을 인식함.
     * Flox를 사용하는 이점에 대한 질문이 있음.
     * Nix에 대한 흥미와 함께 개발 환경 설정에 대한 어려움을 표현하는 사용자가 있음.
          + 새로운 도구들이 경험을 개선하는 데 도움이 될 것이라는 기대를 표함.
     * Nix 자체가 이미 많은 이점을 제공한다고 생각하는 사용자가 있으며, 다른 제품과의 차이점에 대한 질문을 제기함.
     * Nix 사용 시 혼란스러웠던 'flakes'에 대한 상황이 개선되었는지에 대한 질문이 있음.
"
"https://news.hada.io/topic?id=13804","Pulumi로 인프라 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Pulumi로 인프라 구축하기

     * Pulumi:
          + IaC 도구로 인프라를 편리하게 구성하고 관리하는 데 도움이 되는 기능 지원
          + HashiCorp에서 개발한 오픈 소스 프로젝트
          + 클라우드 인프라를 프로그래밍 언어로 정의하고 관리하는 데 사용
     * 특징:
          + AWS, Azure, Google Cloud, Kubernetes 등 여러 클라우드 플랫폼 지원
          + Go, Python, TypeScript, JavaScript, C#, Java, YAML 등으로 인프라 정의, 관리 가능
          + Terraform, AWS CloudFormation, Azure Resource Manager, Kubernetes YAML & Helm Charts에서 Pulumi로 마이그레이션 가능
     * AWS의 스토리지 서비스 S3 생성 방법:
          + S3 생성 권한 있는 IAM 사용자 생성, AWS configure 사용해 이를 등록
          + Brew로 Pulumi 설치, $pulumi new aws-python 으로 프로젝트 설정
               o 처음 Pulumi를 사용하면 ‘로그인이 필요하다’는 안내 메시지 표시됨
          + 로그인 완료 후, 프로젝트 설정 위해 프로젝트 이름, 설명, 스택 이름과 리전 입력하면 프로젝트 생성
          + 리소스 생성 위해 $ pulumi up 입력하면 변경 사항 등 보여줌
          + yes 선택하면 실제 AWS 환경에 리소스 생성
          + AWS에 로그인한 후, Amazon S3 콘솔로 이동하면 pulumi up 명령어로 생성한 버킷 확인 가능

   테라폼이 적용률이 높긴해도, 푸루미가 맘이 가더라구요. 아무래도 쓰던 언어 쓸 수 있는지라…

   pulumi도 hashicorp가 개발했나요? 하시코프가 개발한건 테라폼아닌가요?

   안녕하세요. 인포그랩입니다. 해당 내용 확인하여 블로그 원문을 수정하였습니다. 내용 오류를 짚어주셔서 감사드립니다. 앞으로 더욱 유의하여 정확한 정보를 전달하겠습니다.

   잘못된 정보를 전달드려 죄송합니다. 해당 내용을 수정하거나 요약글을 삭제하려는데 작성된 지 두시간이 지나서 삭제하기 어렵게 됐습니다. 거듭 죄송합니다.

   ai로 작성한글 살짝느낌나는데 ai가 또

   pulumi는 pulumi에서 만들었고, hashicorp는 terraform을 만든게 맞습니다.
   원 글에서도 pulumi를 hashicorp가 만들었다고 잘못 되어 있네요...
"
"https://news.hada.io/topic?id=13722","Hatchet – 오픈 소스 분산 작업 큐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Hatchet – 오픈 소스 분산 작업 큐

분산, 내결함성 작업 큐

     * Hatchet은 기존의 관리하기 어려운 큐나 pub/sub 시스템을 대체하여, 실패로부터 복구하고 동시성, 공정성, 속도 제한과 같은 문제를 해결할 수 있는 내구성 있는 작업 부하를 설계할 수 있음.
     * 자체적인 작업 큐나 pub/sub 시스템을 관리하는 대신, Hatchet을 사용하여 최소한의 설정이나 인프라로 함수를 일련의 작업자들 사이에서 분배할 수 있음.

Hatchet의 장점

     * 초저지연 및 고처리량 스케줄링
          + Hatchet은 25ms 평균 시작 시간의 저지연 큐를 기반으로 구축되어, 실시간 상호작용 능력과 임무 중요 작업에 필요한 신뢰성을 완벽하게 균형잡힌 상태로 제공함.
     * 동시성, 공정성, 속도 제한
          + FIFO, LIFO, Round Robin, Priority Queues와 같은 전략을 Hatchet의 내장 전략으로 구현하여 최소한의 설정으로 일반적인 확장 문제를 우회함.
     * 설계상의 복원력
          + 맞춤형 재시도 정책과 통합된 오류 처리를 통해 Hatchet은 일시적인 실패로부터 신속하게 작업을 복구할 수 있도록 보장함.

향상된 가시성 및 제어

     * 관찰 가능성
          + 모든 실행은 완전히 검색 가능하며, 문제를 신속하게 식별할 수 있음.
     * (실용적인) 내구성 있는 실행
          + 이벤트를 재생하고 워크플로우의 특정 단계에서 수동으로 실행을 다시 시작할 수 있음.
     * Cron
          + 함수 실행을 반복적으로 스케줄링할 수 있음.
     * 일회성 스케줄링
          + 특정 시간과 날짜에 함수 실행을 스케줄링할 수 있음.
     * 스파이크 보호
          + 트래픽의 급증을 완화하고 시스템이 처리할 수 있는 것만 실행함.
     * 점진적 스트리밍
          + 백그라운드 작업자의 진행 상황에 따라 업데이트를 구독할 수 있음.

예시 사용 사례

     * Generative AI를 위한 공정성
          + 바쁜 사용자가 시스템을 압도하지 않도록 Hatchet을 사용하여 작업자에게 요청을 공정하게 분배할 수 있음.
     * 문서 색인을 위한 배치 처리
          + Hatchet은 문서, 이미지 및 기타 데이터의 대규모 배치 처리를 처리하고 실패 시 작업 중간부터 이어서 수행할 수 있음.
     * 다중 모달 시스템을 위한 워크플로우 오케스트레이션
          + Hatchet은 다중 모달 입력 및 출력을 조정할 수 있으며, 전체 DAG 스타일 실행을 처리할 수 있음.
     * 이벤트 기반 처리를 위한 정확성
          + 외부 이벤트나 시스템 내부 이벤트에 반응하고 자동으로 이벤트를 재생할 수 있음.

빠른 시작

     * Hatchet은 Python, Typescript, Go용 오픈소스 SDK를 지원함.
     * 시작하려면 Hatchet 문서를 참조하거나, 빠른 시작 저장소를 확인할 수 있음.

SDK 저장소

     * Hatchet은 기본적으로 Go SDK를 제공함.
     * Typescript SDK도 사용할 수 있음.
     * SDK와 관련된 문제가 발생하면 해당 저장소에서 이슈를 제출할 수 있음.

관리되는 클라우드 버전의 Hatchet이 있는가?

     * 예, 베타 기간 동안 제품을 구축하고 형성하는 데 도움을 주는 일부 회사에 클라우드 버전을 제공하고 있음.

자체 호스팅 버전의 Hatchet이 있는가?

     * 예, 자체 호스팅을 위한 오픈소스 도커 컨테이너의 지침은 문서에서 찾을 수 있음.

이것이 대안들과 어떻게 비교되는가? (Celery, BullMQ)

     * 왜 또 다른 관리 큐를 만들었는가?
          + 특히 DAG 스타일 실행에 의존하는 전체 트랜잭션 큐잉의 이점을 갖추고자 하였으며, Postgres가 대부분의 큐잉 사례를 대체할 수 있다고 강하게 믿음.
          + 많은 큐들이 Redis를 기반으로 하고 있으며, 주의하지 않으면 OOM으로 인한 데이터 손실이 발생할 수 있지만, PG를 사용하면 이러한 문제를 피할 수 있음.

문제점

     * Github 이슈를 통해 발견한 버그를 제출할 수 있음.
     * 프로젝트가 초기 단계이기 때문에, 복잡한 기능 요청 전에 Discord에서 먼저 연락을 취하는 것이 좋음.

기여하고 싶다면

     * 기여 문서를 참조하고, Discord의 #contributing 채널에서 작업하고 싶은 내용을 알려주면 프로젝트 방향을 형성하고 협업을 쉽게 할 수 있음.

GN⁺의 의견

     * Hatchet은 분산 시스템에서 작업 큐 관리의 복잡성을 줄이고, 고가용성과 내결함성을 제공하는 솔루션으로, 특히 대규모 데이터 처리 및 실시간 서비스에 유용할 것으로 보임.
     * 이 기술이 현재 시장에서 사용되는 다른 큐 시스템과 비교하여 Postgres를 사용함으로써 얻는 안정성과 확장성은 주목할 만한 장점임.
     * Hatchet을 도입할 때 고려해야 할 사항으로는 기존 인프라와의 호환성, 데이터 마이그레이션, 그리고 팀의 기술적 역량이 있음.
     * Hatchet이 제공하는 고급 가시성 및 제어 기능은 시스템의 성능 모니터링과 문제 해결을 용이하게 하여 개발자와 운영팀의 작업 부담을 줄일 수 있음.
     * Hatchet이 아직 베타 단계에 있으므로, 안정성과 기능성 측면에서 충분한 검증이 필요하며, 대규모 시스템에 적용하기 전에 충분한 테스트가 필요함.

        Hacker News 의견

     * 한 사용자는 Postgres를 기반으로 한 작업 큐와 다양한 언어로 작업하는 워커(worker), 그리고 적절한 내장 관찰 기능을 갖춘 제품을 3년 동안 찾고 있었다고 말함. 이 사용자는 6개월마다 시장을 확인하고 대안을 평가했지만 항상 실망했다고 함. 그러나 RabbitMQ 같은 추가 의존성은 피하고 싶어서 Postgres 기반 큐를 선호한다고 언급함. 현재는 graphile-worker를 사용하고 있지만, 여전히 충족되지 않는 요구사항이 있다고 함.
     * 다른 사용자는 이 제품이 Y Combinator에 지원받고 있음을 지적하며, 이 회사가 ""오픈 코어"" 모델을 따를지 아니면 다른 수익 창출 방법을 모색할지 궁금해함.
     * 또 다른 사용자는 pub/sub 시스템의 푸시 구독 기능을 좋아한다고 언급하며, 예를 들어 GCP pub/sub에서는 이벤트를 큐에서 끌어오는 대신 HTTP 엔드포인트로 푸시하는 구독자를 가질 수 있다고 설명함. 이 방식은 클라우드 런이나 람다와 같은 런타임을 사용하여 HTTP 요청에 기반해 스케일링하고 제로까지 스케일링할 수 있다는 장점이 있다고 함. 워커의 자동 스케일링 설정이 더 복잡할 수 있으며, RabbitMQ에서 큐 깊이 메트릭을 기반으로 KEDA 자동 스케일링을 설정할 수도 있지만, 이는 복잡성을 추가한다고 함. 사용자는 HTTP 연결을 유지하는 데몬이 작업을 푸시할 수 있는 모델을 지원할 계획이 있는지 물음.
     * 한 사용자는 모든 함수가 컨텍스트를 인수로 받는 이유를 설명해달라고 요청함. 이는 함수를 작성할 때 많은 보일러플레이트 코드를 작성해야 한다고 느낀다고 함.
     * 다른 사용자는 분산 DAG 처리 시스템을 구현할 때 이 아이디어가 있었다면 좋았을 것이라고 말하며, 시도해보고 싶어함.
     * 한 사용자는 클라우드 제공 서비스의 가격을 공개하는지, 자체 호스팅 옵션에 대해 쿠버네티스 오퍼레이터를 만들 계획이 있는지 물음. 또한 MIT 라이선스를 사용함으로써 아마존이 향후 아마존 해쳇 서비스를 만들 수 있다는 우려를 표함.
     * 또 다른 사용자는 DAG 기반 작업 러너를 위한 작업 큐를 작성하고 있으며, PostgreSQL, SQLite, 메모리 내부 등을 사용하여 작업 그래프가 재시도, 시간 초과, 직렬화된 리소스 등을 고려하지 않고 실행되도록 하고 싶어함. 이 사용자는 해당 접근 방식에 관심이 있음.
     * 한 사용자는 클라이언트(웹 브라우저)가 작업의 진행 상황을 완료까지 들을 수 있는 작업 큐가 필요하다고 말함. Deno 큐의 단순함과 접근성을 좋아하지만, 클라이언트에서 작업 상태를 구독하는 방법을 직접 구현해야 한다고 함. Postgres 기반으로 가능할지 궁금해하며, 문서 링크를 통해 가능함을 확인함.
     * 다른 사용자는 과거 직장에서 무제한의 작업을 스케줄링해야 하는 문제를 겪었다고 언급함. 예를 들어, 환자가 6개월 후에 예약을 잡으면, 그 기간 동안 약속을 상기시키는 일련의 알림을 스케줄링해야 함. 이 사용자는 데이터베이스 큐에 레코드를 입력하고 몇 초마다 폴링하는 방식으로 시작했지만, 폴링으로 인한 IO 비용이 이상적이지 않아 분산 시스템을 사용하지 않고 이를 해결하고자 했음. Redis로 전환했지만, 여러 디스패처를 다루는 복잡성, OOM 문제, 즉시 큐로 작업을 이동시키기 위한 보조 작업을 실행해야 하는 등의 문제가 있었음. PG로 전환하고 SKIP LOCKED 등을 사용하는 방법을 고려했지만, 직장을 옮겼음. Hatchet이 이러한 유스케이스에 적합한지 궁금해함.
     * 마지막으로 한 사용자는 Hatchet이 Temporal/Cadence/Conductor와 어떻게 비교되는지, Hatchet도 내구성 있는 실행을 지원하는지 물음.
"
"https://news.hada.io/topic?id=13808","FuriosaAI의 새로운 AI accelerator, RNGD 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FuriosaAI의 새로운 AI accelerator, RNGD 공개
"
"https://news.hada.io/topic?id=13754","단순한 아키텍처를 옹호하며 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         단순한 아키텍처를 옹호하며 (2022)

     * Wave는 70명의 엔지니어를 보유한 $1.7B(2.3조원) 규모의 회사 (아프리카를 위한 모바일 뱅킹 서비스 제공)
     * Postgres 기반의 Python 모놀리스인 표준 CRUD 앱 아키텍처로 되어있음
     * 단순한 아키텍처를 시작으로 복잡성을 최소화하며 문제를 해결함으로써 사용자에게 가치를 제공하는 작업에 엔지니어가 집중할 수 있었음
     * Stackoverflow는 단일체(monolith)를 확장하여 18억 달러에 인수될 정도로 성공적으로 성장함

단순한 아키텍처의 효율성에도 불구하고 대부분의 언론은 복잡한 아키텍처를 좋아함

     * 기술 컨퍼런스에서는 복잡한 마이크로서비스 기반 아키텍처에 대한 발표가 많으나 단순한 모논리스에 대한 발표는 없음
     * 많은 기업들이 작은 규모 애플리케이션임에도 불구하고 복잡한 기술을 모방하고 그걸로 컨퍼런스 및 HN에서 인기를 얻음
     * 우리가 사용하는 아키텍처는 너무 단순해서 아키텍처 다이어그램을 작성할 필요도 없음

단순함을 유지하는 방법

     * Wave는 동기식 Python을 사용하고 있으며, 이는 서버 프로세스가 I/O를 기다리는 동안 차단됨을 의미함
     * Eventlet 같은 비동기 프레임워크를 시도했지만, 버그가 너무 많아서 그 비용이 운영상의 고통을 감당할 가치가 없다고 판단했음
     * 복잡성을 증가시키는 대신, 긴 실행 시간이 필요한 작업은 큐로 분리하여 처리함
     * 데이터 거주 규정을 준수하기 위해 일부 국가에서는 온프레미스 데이터센터를 운영해야 함
          + 세네갈/코트디부아르는 클라우드였지만, 우간다와 다른 국가들은 규정때문에 온프레미스를 필요로 함
          + 이럴때 복잡한 아키텍처보다 단순한 아키텍처가 훨씬 간단함

구매 대신 구축

     * 소수 인원팀이라 초기에는 소프트웨어 구매를 선호했으나, 중대한 버그를 해결할 수 없는 경우에는 자체 도구를 개발함
     * 자체 도구 구축은 우리가 감당하고 싶지 않은 복잡성이지만, 일부 제품 카테고리에서는 상당히 광범위한 조사 후에도 우리에게 적합한 제품을 제공할 수 있는 공급업체를 찾지 못함
     * 핵심 역량 외에도 자체 도구를 개발하고 내부 전문성을 유지하는 것이 때로는 필요함

재고 중인 선택들

     * RabbitMQ, Celery, SQLAlchemy, Python 등의 기술 선택에 대해 재고 중이며, 이들은 복잡성을 증가시키거나 유지 관리 부담을 높임
     * 새로운 코드베이스를 시작한다면 이러한 기술 선택에 대해 신중하게 고려할 것임

만족하는 선택들

     * GraphQL, 사용자 정의 트랜스포트 프로토콜, Kubernetes 등의 선택에 만족함
     * GraphQL은 자체 문서화, 코드 생성, GraphiQL 인터랙티브 탐색기 등의 장점이 있음.
     * GraphQL을 사용하면 장점이 단점보다 더 크다고 생각
          + 장점
               o 정확한 반환 유형에 대한 자체 문서화
               o 정확한 반환 유형의 코드 생성으로 인해 클라이언트가 더 안전해짐
               o GraphiQL 대화형 탐색기로 생산성 향상
               o 다양한 앱(사용자 앱, 지원 앱, Wave 에이전트 앱 등)이 대부분 하나의 API를 공유할 수 있어 복잡성이 줄어듦
               o 구성 가능한 쿼리 언어를 사용하면 클라이언트가 특수 목적 엔드포인트를 많이 구축할 필요 없이 단일 패킷 왕복으로 필요한 데이터를 정확하게 가져올 수 있음
               o RESTful API로 간주되는 항목에 대한 bikeshedding (중요한 안건을 미뤄둔 채 덜 중요한 일에 대해 깊이 의논하고 시간을 보내는 것) 제거
          + 단점
               o GraphQL 라이브러리는 GraphQL을 채택했을 당시엔 훌륭하지 않았음
               o 기본 GQL 인코딩은 중복되며 많은 고객이 낮은 대역폭을 사용하기 때문에 크기 제한에 많은 관심을 기울이고 있음
     * Kubernetes는 국가별 데이터센터 운영 요구 사항을 충족시키기 위해 사용됨

결론

     * 애플리케이션 아키텍처를 최대한 단순하게 유지함으로써 비즈니스에 도움이 되는 복잡성이 있는 곳에 복잡성(및 인력) 예산을 지출할 수 있음
     * 복잡함을 더할 강력한 이유가 없는 한 가능한 한 간단하게 일을 처리한다는 생각을 통해 우리는 일반적으로 어려운 사업이라고 여겨지는 아프리카 금융 사업을 운영하고 있음에도 불구하고 엔지니어가 많이 없이도 상당히 큰 사업을 구축할 수 있었음

   ""구축 대신 구매""는 ""구매 대신 구축""이 맞는것 같아요.

     Another area is with software we’ve had to build (instead of buy).

   아 강조 하려다가 제목이 이상해져 버렸네요. 수정했습니다. 고맙습니다.

   경제 사이클에 따라서 유행이 바뀌는걸까요? 유행에 상관없이 모놀리스로 시작하는게 고정비용 절감과 유지보수에 유리합니다

   이해하기 쉬운 아키텍쳐가 유지보수하기도 쉽죠.

   제 기준 어떤 서비스든간에 모놀리식으로 시작하는게 좋아보입니다. 초기부터 MSA 잡고 들어가면 돈 낭비죵

   ""복잡도가 올라가면 비용(돈, 사람, 시간...)도 증가한다""
   ""심플한 아키텍처로 해결할 수 있는 문제를 복잡한 아키텍처로 해결하려 하지 마라.""

  Hacker News 의견

     * 마이크로서비스에 대한 엔지니어 조언
          + 마이크로서비스는 성능 향상 전략이 아니라, 잠재적인 비용 절감 전략과 엔지니어링 조정 전략임.
          + 수평적으로 확장 가능한 모놀리식 애플리케이션과 마이크로서비스 간에는 큰 차이가 없음, 특정 기능을 축소하고자 할 때를 제외하고.
          + 모놀리식 앱에서는 앱의 일부만 축소하는 것이 불가능함.
          + 비용 절감은 대규모에서 시작되며, 최소 3개의 복제본이 필요함.
          + 대부분의 회사에서 실제 이점은 엔지니어링 조정에 있음.
          + 단일 저장소를 가진 모놀리식에서는 한 팀이 소유하고 관리할 수 있지만, 공유 모놀리식에서는 아무도 소유하지 않아 관리가 어려워짐.
     * 마이크로서비스에 대한 토크
          + 일반 기술 컨퍼런스에서 마이크로서비스 아키텍처의 복잡성과 부작용에 대한 여러 발표가 있었으나, 단순한 모놀리식 구축에 대한 발표는 없었음.
          + David Schmitz의 마이크로서비스 실패에 대한 팁을 다룬 강연이 인상적이었으며, 그의 유머러스한 발표 방식이 매력적임.
     * 인지적 편향과 단순성
          + 사람들은 종종 무언가를 추가하는 것에 집중하며, 간단한 해결책을 간과함.
          + 연구에서는 레고 구조물에 벽돌을 추가하는 대신 제거함으로써 문제를 해결하는 것이 더 나은 해결책임을 보여줌.
     * 과도한 엔지니어링과 경험 부족
          + 아키텍처는 ""충분히 단순하면서 필요한 만큼 복잡해야"" 하지만, 이를 달성하는 것은 경험이 필요함.
          + IT 산업은 경험이 부족한 경향이 있으며, 경험은 시간이 걸림.
          + 경험이 부족한 엔지니어와 관리자는 종종 불필요한 기술이나 메트릭스를 사용함.
     * 일과 삶의 균형을 중시하는 회사
          + 제품 개선에 집중하고 나머지 시간을 개인 생활에 할애하고 싶은 회사를 찾고 있음.
     * Dan Luu에 대한 개인적 경험
          + Dan Luu는 블로그 팬과의 소통에 관대하며, 소프트웨어와 하드웨어 경계에 대한 전문 지식을 가지고 있음.
          + 그의 통찰력과 전문성을 공유하는 데 아낌없으며, 그로부터 배우는 것은 매우 즐거운 경험임.
     * 단순한 아키텍처의 중요성
          + 대부분의 경우 필요한 아키텍처는 SSL 지원 로드 밸런서, 여러 앱 서버, 샤딩된 데이터베이스, 메시지 큐 등 기본적인 구성 요소임.
     * 아키텍처와 엔지니어링 팀의 사회적 구조
          + 아키텍처는 엔지니어링 팀의 사회적 구조를 반영해야 하며, 이를 고려하지 않으면 혼란과 비효율이 발생할 수 있음.
          + 대규모 모놀리식 저장소와 단순한 아키텍처는 관리가 어려울 수 있으며, 구글과 메타와 같은 회사들도 내부적으로 많은 툴을 개발함.
          + 아키텍처는 팀 간 협업을 지원하거나 방해할 수 있으므로, 기술 리더십은 이를 고려해야 함.
     * 단순한 아키텍처의 선호
          + 단순한 아키텍처와 모놀리식이 대부분 적합하지만, 동기식 IO로 인한 문제가 발생하지 않도록 주의해야 함.
          + 데이터 무결성 버그는 금융 시스템에서 피해야 할 중요한 문제임.

   ""David Schmitz의 마이크로서비스 실패에 대한 팁을 다룬 강연"" 링크를 요청드려도 될까요.

   https://www.youtube.com/watch?v=r8mtXJh3hzM 입니다
"
"https://news.hada.io/topic?id=13717","Home Lab 입문자를 위한 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Home Lab 입문자를 위한 가이드

     * Home Lab이란 실패를 경험할 수 있는 개인 공간으로, 실험을 안전하게 수행할 수 있는 장소
     * 기술 전문가와 시스템 관리자들은 생산 장비에서 새로운 것을 시도하는 것이 좋지 않은 결과를 초래할 수 있기 때문에 홈 랩을 구축함
     * 홈 랩은 원격 백업, 네트워크 모니터링 및 경보, 유선 UAP AP 등 다양한 목적으로 사용될 수 있음

홈 랩, 위치가 중요함

     * 홈 랩의 위치는 중요한 변수들에 따라 결정되며, 이에는 방 온도와 환기, 장비 주변의 작업 공간, 네트워크 케이블의 길이와 접근성, 전력, 홈 랩에서 발생하는 소음 등이 포함됨
     * 홈 오피스, 거실, 옷장, 지하실, 다락방, 차고 등 다양한 위치의 장단점을 고려해야 함

네트워크 vs. 서버 랙 vs. 캐비닛?

     * 장비를 저장할 방법을 결정해야 하며, 네트워크 캐비닛과 랙은 서버 캐비닛과 랙과 혼동되기 쉬움.
     * 네트워크 장비는 서버보다 일반적으로 덜 깊고 열을 덜 발생시키므로, 네트워크 캐비닛과 랙은 서버 캐비닛과 랙보다 깊지 않음.
     * 캐비닛은 문이나 탈착 가능한 측면을 가진 밀폐 공간이고, 랙은 반 개방형 또는 완전 개방형 프레임임.

추천 홈 랩 하드웨어

     * 장비의 최대 깊이를 측정하고 위의 조언을 고려한 후, 첫 번째 하드웨어를 구매할 시간임.
     * ISP 케이블 모뎀을 교체하는 것부터 시작하여 홈 랩을 구축할 수 있음.

    ISP 케이블 모뎀 교체 여부

     * ISP의 케이블 모뎀을 교체하는 것은 재정적으로 의미가 있으며, 성능, 신뢰성 및 보안을 향상시킬 수 있음.

    홈 랩 랙 선택

     * 랙 유닛은 19인치와 23인치 랙 프레임 및 장비의 높이를 측정하는 단위임.

    홈 랩 UPS (무정전 전원 공급 장치)

     * 홈 랩에 필요한 UPS는 짧은 시간 동안 지원할 수 있는 충분한 런타임을 제공해야 함.

    범용 홈 랩 랙 선반

     * 장비를 시원하게 유지하고 케이블 관리를 위해 통풍이 잘 되는 랙 선반을 사용함.

    랙 마운트 홈 랩 전원 공급 장치

     * UPS에 연결되어 다른 장비와 장치의 쉬운 전원 켜기/끄기를 가능하게 하는 편리한 하드웨어임.

    랙 마운트 홈 랩 냉각 팬

     * 장비의 온도를 최적으로 유지하여 과열을 방지하고 성능을 일관되게 유지하며 수명을 연장함.

    홈 랩 라우터 및 스위치

     * Cisco, Ubiquiti, TP-Link은 라우팅 및 스위칭 요구 사항을 모두 충족시킬 수 있는 장비를 제공함.

    홈 랩 패치 패널 및 네트워크 케이블

     * 홈 랩에 필요한 패치 패널과 네트워크 케이블을 선택할 때는 간단하게 유지하는 것이 중요함.

    홈 랩 서버

     * 홈 랩에 호스팅할 내용에 따라 서버 추천이 크게 달라질 수 있으므로, 구체적인 서버를 추천하지 않음.

요약 및 결론

     * 홈 랩을 구축할 때는 열정을 찾고, 홈 랩을 사용하여 배우고, 실패하고, 성공하는 것을 즐겨야 함.
     * 전력 소비에 주의하고, 확장할 여지를 두고 계획하며, 작게 시작할 수도 있음.
     * 하드웨어에 대한 성급한 결정을 피하고, 커뮤니티 포럼에서 다른 기술 전문가와 시스템 관리자의 피드백을 얻어야 함.

GN⁺의 의견

     * 홈 랩은 IT 전문가들에게 자신의 기술을 실험하고 향상시킬 수 있는 안전한 환경을 제공함.
     * 홈 랩 구축은 네트워크 관리, 서버 호스팅, 보안 연습 등 다양한 실습 기회를 제공하여 실무 역량을 강화할 수 있음.
     * 홈 랩을 구축할 때는 장비의 전력 소비와 발열을 고려하여 효율적인 냉각 시스템을 설계해야 함.
     * 홈 랩 구축에 관심이 있는 초급 소프트웨어 엔지니어는 먼저 간단한 네트워크 설정부터 시작하여 점차 복잡한 시스템으로 확장하는 것이 좋음.
     * 홈 랩 구축 시 고려해야 할 사항으로는 예산, 공간, 장비의 호환성, 확장 가능성 등이 있으며, 이러한 요소들을 충분히 고려하여 계획을 세워야 함.

        Hacker News 의견

     * 기사는 좋으나 그 크기와 범위가 다소 위협적일 수 있음. 홈랩은 단순히 책상 위의 하나의 NUC일 수도 있음. 64GB RAM을 가진 NUC는 많은 것들을 수용할 수 있으며, 24/7 운영에 효율적이지만 CPU 부하가 지속될 때 소음이 발생할 수 있음. 이를 위해 eBay에서 구할 수 있는 Dell SFF OptiPlex나 Precision Tower로 확장할 수 있음. 이러한 Dell SFF는 크기가 작고 적절한 데스크톱/서버로 조용한 팬을 갖추고 있으며, 10G Mellanox 3 카드를 장착할 수 있음. 12세대 CPU를 탑재한 OptiPlex 이상의 모델을 사용하는 것이 전기와 공간의 제약을 피할 수 있음. i5-12500을 탑재한 중고 제품은 이미 매우 저렴함. 필요하다면 LGA1700으로 i9-14900(non-K)를 장착할 수도 있음.
     * Proxmox를 홈 서버에 사용하는 것에 대한 찬사. 25년 동안 집에서 리눅스 서버를 운영해왔으며, 항상 단일 우분투 시스템을 수동으로 관리하는 것은 큰 고통이었음. Proxmox는 단일 하드웨어 장치에서 여러 컨테이너와 VM을 매우 쉽게 관리할 수 있게 해줌. 단일 우분투 시스템을 가상화하는 것만으로도 백업, 고가용성 등의 이점이 있음. 이제 서비스를 자체 컨테이너로 분리하기 시작했고, 이는 매우 깔끔함.
     * 홈랩을 IKEA FRIHETEN 소파 안에 몇 년 동안 설치했던 경험. 장점으로는 쉬운 접근성, 전원선과 LAN, WAN 케이블을 제외하고는 완전히 보이지 않음, 케이블 라우팅이 쉬움, 내부 레이아웃/케이블 라우팅이 쉬움, 무료 소음 감소, 겨울에 따뜻함, 배우자가 깜박이는 불빛을 신경 쓰지 않음, UPS와 디스크 베이를 구입한 것을 배우자가 알아차리지 못함 등이 있음. 단점으로는 내부에서 조작하기 불편함, 앉거나 열고 닫을 때 진동이 발생할 수 있음, 열(옷장보다 나쁘지 않음), 실수로 음료를 쏟을 위험(대부분의 경우 디자인으로 인해 하드웨어 아래로 흘러내림), 가구를 옮길 때 케이블을 뽑을 수 있는 위험 등이 있음.
     * 홈랩을 구축할 때 nix 배포판 사용을 추천. 시스템이 작동하면 그대로 두고, nix를 사용하면 모든 시스템 상태가 git에 기록됨. 6개월 전에 어떻게 문제를 해결했는지 기억할 필요가 없고, 우분투 배포 업그레이드 후 수동으로 시스템을 다시 구성할 필요가 없음. 설치한 패키지, 구성한 설정 등 모든 변경 사항이 git 로그에 있어 문서화로 활용할 수 있음.
     * 상당히 광범위한 홈랩을 시간을 들여 설정했으며, 잘 작동하고 사랑함. 재난 복구가 실제 문제임. 모든 것을 복제하는 데 영원히 걸릴 수 있으며, 라우터 구성, 스위치 구성, NAS, 다양한 VLAN에 흩어진 여러 도커 컨테이너 등을 모두 기억할 수 있을지 확신이 없음. 초기에 네트워크를 매핑했지만 시간이 지남에 따라 최신 상태를 유지하지 못함. 인프라의 다이어그램을 그리고, 문서화하며, 최신 상태로 유지할 수 있는 좋은 도구가 있는지 질문함. 백업과 업그레이드도 지속적인 문제임. 컨테이너를 설정하고 6개월 후에 돌아와서 무엇을 했는지 전혀 기억나지 않음. 다양한 기계(NUC, NAS, 데스크톱, 서버 등)에 흩어져 있는 수십 개의 컨테이너가 있으며, 각 컨테이너 서비스마다 바인드 마운트가 어디에 있어야 하는지, 어떤 사용자로 실행해야 하는지, 필요한 권한
       등이 있음. 모든 것을 머리 속에 유지하기 어려우며, 사실상 불가능함. 중앙화된 인터페이스에서 백업, 복원, 업그레이드를 할 수 있기를 원함. VM 복제/스냅샷이 그리워짐. Proxmox 기계에서 여전히 몇 개의 VM을 실행하고 있지만, 전체 홈랩에 대해서는 그런 것이 없음. 이론적으로 집을 태우고 전체 설정을 완전히 복구할 수 있는 솔루션으로 이동하거나, 적어도 그런 솔루션을 향해 나아가고 싶음. 홈 설정을 관리하기 위해 쿠버네티스를 완전히 사용하는 것보다 더 간단한 것이 있어야 함. 다른 사람들은 무엇을 사용하는지 질문함.
     * 홈랩 장면은 훌륭함. 모두가 다양한 목표를 가지고 있음... 저전력, 흥미로운 프로세서, 데이터 소유권, HA, UPS/전체 홈 UPS 등이 있으며, 홈은 이러한 중첩된 관심사의 유일한 공통 교차점임. 더욱 매혹적인 것은 이 분야에 끌리는 사람들의 유형으로, 전문가부터 업계 외부의 사람들까지 다양함. 홈랩에 깊이 빠져들어 인터넷 초기의 마법을 다시 느낄 수 있음.
     * 최근에 12코어/24스레드와 128GB ECC RAM을 탑재한 오래된 Mac Pro 2013(쓰레기통)을 구입하여 ""항상 켜져 있는"" 기계로 업그레이드함 - 총 비용 $500. Ubuntu 22.04를 설치했고, 바로 작동함(23.10에는 몇 가지 문제가 있음). 불행히도 내부 AMD Radeon GPU 두 개를 완전히 중지/비활성화하는 것은 어려움/불가능함. ""vgaswitcheroo""를 사용하여 한 GPU를 중지하고 다른 하나를 D3hot 상태로 설정하여 대기 상태에서 약 99W의 전력 소비를 달성함. Intel NUC는 대기 상태에서 거의 아무것도 소비하지 않음(UPS는 4개의 NVMe 디스크가 Thunderbolt 인클로저를 통해 연결되어 있어도 0W 출력을 보고함). 집을 비울 때 100W의 열 발생기를 24x7로 운영하고 싶지 않아 NUC를 계속 사용해야 함.
     * 홈랩에 대한 대안적인 관점: 위치는 지하실 사무실의 선반 위임. 환기는 괜찮고 WiFi는 괜찮지만 훌륭하지는 않음. 하드웨어는 이웃 교환회에서 구한 오래된 PC임. 다른 오래된 PC에서 가져온 RAM을 추가하고 하드 드라이브와 WiFi 카드를 구입함. 소프트웨어는 Debian stable과 podman/podman-compose임. 모든 유용한 서비스는 compose 파일이 있는 폴더임. podman-compose를 사용하여 systemd 유닛으로 변환함. 기사에 있는 것들이 관심사라면 멋지고, 열심히 하라! 하지만 절대로 필요하지 않으며, 즉시 할 필요도 없음. 이 오래되고 거의 무료인 PC에서 가족이 매일 사용하는 여러 서비스를 운영하고 있으며, 16GB RAM의 절반도 사용하지 않고 CPU 사용량은 5%를 넘지 않음.
     * 홈랩 장비가 비기술적인 생활 공간에 있다면 소음, 조명/디스플레이, 그리고 눈에 띄지 않는 것에 대해 생각해야 함. 아파트에 사는 사람으로서 오랫동안 옷장에 보관했었음. 거실로 옮긴 후 해결책에는 다음이 포함됨: IKEA CORRAS 캐비닛을 사용하여 다른 가구와 매치함. 랙마운트 포스트가 있었지만 돌출되어 제거함. 소음을 줄이기 위해 팬이 없거나 소수의 Noctua 팬으로 냉각할 수 있는 장비를 사용함. 1U PSU의 팬을 Noctua로 교체하기도 함(이는 약간의 납땜과 욕설이 필요함). Atom 서버는 PSU를 제외하고는 데이터센터가 아닌 곳에서 팬 없이 운영할 수 있음. 현재 유일한 비조용 서버는 3090 GPU 서버이며, 이는 수요에 따라 회전하도록 설정함. 이 경우, 랩톱에서 Wake-on-LAN 명령을 실행할 수 있지만, IPMI, PDU 또는 IoT 전원 아울렛을 사용하거나, 소프트웨어로 3090과
       팬을 중지하는 방법을 찾거나, 쿠버네티스로 자동화하는 등의 방법이 있음. 조명에 대해서는 너무 밝은 표시 LED를 흰색 라벨 메이커 테이프로 덮어 사용함. 필요하지 않은 불빛에는 검은색 라벨 메이커 테이프를 사용함. 콘솔에 대해서는 랙 콘솔을 슬라이드 아웃하는 것을 선호하며, 특히 IBM의 빈티지 트랙포인트 키보드가 있는 것을 좋아함. 거실에 모니터링 디스플레이를 두고 싶다면 적어도 키보드를 슬라이드 아웃 서랍에 넣음. 또한 필요하지 않은 장비를 처분함. 그렇지 않으면 필요한 랙 공간의 두 배 이상이 필요하고, 거실에서 오디오 기기로 보일 가능성이 더 낮아짐. 아파트에서 라우터를 지금 당장 다루고 싶지 않다면(서버만), 플라스틱 OpenWRT 라우터를 고려함. 라우터, 스위치, 패치 패널 등 몇 개의 랙 유닛을 대체할 수 있으며, 외부 WiFi AP와
       케이블링이 필요하지 않을 수도 있음.
     * 지난해부터 홈랩 설정을 구성하고 유지하고 있으며, 정말 놀라운 경험임. 컨테이너, 가상 머신, 네트워킹에 대해 많은 것을 배움. paperless-ngx와 immich와 같은 일부 자체 호스팅 애플리케이션은 독점 클라우드 솔루션보다 기능 면에서 훨씬 우수함. tailscale과 같은 VPN 서비스를 추가하면 이제 전 세계 어디서나 홈랩에 액세스할 수 있음. 누락된 유일한 것은 NUC나 미니 PC와 같은 저전력 기계를 설정하여 24/7 필요한 서비스를 오프로드하고 전기 비용을 절약하는 것임. 주말에 정기적인 유지 관리와 업그레이드를 수행할 에너지가 충분하다면 홈랩 설정을 100% 추천함.
"
"https://news.hada.io/topic?id=13725","Show GN: 리포지토리, 협업도구에서 Credential / Secret 노출을 막는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: 리포지토리, 협업도구에서 Credential / Secret 노출을 막는 방법

   안녕하세요. 긱 뉴스 여러분!

   저희가 해결하고 있는 문제가, 저희 팀 모두가 잘 보는 GeekNews에 올라와 너무 반가운 글이 있었는데요.
   https://news.hada.io/topic?id=13442
   스레드 댓글에 소개시켜달라는 말씀이 있어서 저희가 열심히 만든 제품을 소개해봅니다.
    1. 프로젝트 소개

     * 각종 SaaS 서비스와 연동하기 위해서 사용되는 Secret API Key들에 대한 탐지서비스를 제공합니다.
     * TruffleHog, GitLeaks 등 많은 도구들이 있지만, DevSecOps 도구들에 치중되어 있어, 실제 보안팀의 입장, 인프라관리팀의 입장에서 사용하기에는 엔지니어링 비용이 많이 들어가는 단점을 개선하고 있습니다.
     * GitHub, GitLab 뿐만 아니라 현재 Confluence, Jira, Notion 등의 범위까지 확장하여 연동할 수 있습니다.
     * Credential(Secret, PII) 중심의 보안을 Build-up 할 수 있게 도와주며 위협관리 기능을 통해 조직의 Credential 보안 위협을 파악 할 수 있습니다.
     * SAML / OIDC 연동 등 각종 IDP와 연계할 수 있는 기능을 제공합니다.

    2. 기능 소개

     * Secret 탐지 기능을 제공합니다. Secret 키의 상태정보까지 파악하여 Active / Inactive 등의 * 상태를 통해 False-Positive 에서 벗어날 수 있습니다.
     * PII 탐지 기능을 제공합니다. NLP가 포함되어 있어 단순 Regex 보다는 문맥의 파악을 통해 조금 더 정확하게 개인정보의 노출을 파악할 수 있습니다.
     * Threat Policy 기능을 제공합니다. 예로, AWS Active Key가 Active 된 상태를 High 위협으로 정의하고, 우선순위를 파악할 수 있습니다.
     * Dashboard 기능을 제공합니다.
     * 연동 범위는 크게 두가지로 나뉩니다.
       **Target - 퍼블릭 Github 등을 추가하여 모니터링 할 수 있습니다.
       ** Integration - 내부(Private)용으로, Github, GitLab, Conflucne, Jira, Notion 등을 연동할 수 있습니다.

    3. 멤버 관리

     * 크게 Administrator, Writer, Reader로 권한이 나뉘어 조직별로 큰 범위에서의 조직 운영이 가능합니다.
     * SAML / OIDC 연동을 통해 조직이 운영하고 있는 IDP와 연동이 가능합니다.

    4. 참고 링크

     * Support Center - https://support.cremit.io - 티켓시스템, 문서를 통해 도움을 받을 수 있습니다.
     * Status Page - https://status.cremit.io - 서비스의 상태를 확인하실 수 있습니다.
     * Security Center - https://security.cremit.io - 크리밋이 지키고 있는 보안수준을 확인하실 수 있습니다.

    5. 로드맵 - https://releases.cremit.io

     * 지속적인 연동범위의 확장 - AWS S3, GCS, Azure Storage 등에서도 지속적인 유출사고,개인정보의 무분별한 관리가 되고 있습니다. 이에 크리밋팀은 확장범위 로드맵에 추가가 되어 있습니다.
     * 지속적인 관리기능의 확장
     * Thtreat 기능과 연계되어 Incident관리를 할 수 있는 관리기능이 지속적으로 확장 될 예정입니다.
     * 지속적인 Secret 탐지 범위의 확장 - SaaS 도구는 지금도 주에 수십개씩 업데이트가 되고, 연계가 되고 있습니다. 이에 크리밋팀은 지속적으로 Secret Pattern / Validation Pattern을 F/U 하여 업데이트합니다.
     * PII Data에 대한 유저 관리기능 추가 - 현재 크리밋에서 Managed하게 관리가 되는 PII 패턴을 유저가 직접 추가할 수 있습니다.
     * 유저가 직접 Handling하는 Authentication 정보들에 대한 검증기능 추가
     * 내부 Admin시스템, 백오피스 등의 로그인 정보와 연계하여 Secret과 연동할 수 있는 기능을 추가할 예정입니다.

    5. 그 외 추가적인 정보

     * 크리밋은 23년 5월에 설립된 매우 초창기의 기업입니다, 다행히 설립된년도의 8월에 Primer에게 초기 시드투자를 받을 수 있었습니다.
     * 저희 팀과 미팅이 필요하시다면 언제든 홈페이지를 통해 미팅을 신청해주세요!
     * 현재 무료로 사용할 수 있는 기간과, Free Plan이 있습니다. 기능의 제한이 조금씩 있으니 참고 부탁드립니다!

   서비스 가입 URL - https://register.cremit.io

   대부분의 이런 탐지 도구들이 리포지토리나 코드에 한정되던데, 이건 노션이나 지라 같은 도구까지 탐지해서 좋네요

   네 맞습니다! 기존의 도구들은 DevSecOps에 치중되어 있는데요.
   저희는 협업도구와 드라이브, 저장소 등 Credential이 노출될 수 있는 모든 위치를 탐지하는걸 목표로합니다!
   관심에 감사드려요!
"
"https://news.hada.io/topic?id=13690","Airplane.dev의 종말","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Airplane.dev의 종말

Airplane.dev의 종말

     * Airplane은 내부 도구 개발 스타트업으로, 작성자는 거의 2년간 근무함.
     * 올해 초, Airtable에 의한 인수와 제품의 종료가 발표됨.
     * 이 블로그 포스트에서는 전 직원의 관점에서 발생한 사건을 설명함.

배경

     * 2022년 3월에 내부 도구 공간에 흥미를 느껴 Airplane에 합류함.
     * 처음 16개월 동안 회사는 잘 운영되는 것처럼 보임.
     * 새로운 고객 유치, 팀 확장, 내부 및 사용자들과의 대화에서 전망에 대한 흥분이 있음.

초기의 어려움

     * 2023년 여름, 회사는 어려움에 부딪힘.
     * 매출 성장률이 눈에 띄게 둔화되고, 팀원들이 회사를 떠남.
     * CEO가 개인적인 AI 관련 프로젝트를 위해 회사를 떠남.

안정화

     * 2023년 가을에 상황이 다소 안정됨.
     * 직원 이탈이 줄어들고, 새로운 엔지니어와 성장 리드가 팀에 합류함.
     * 중요한 제품 출시와 큰 기업 고객 계약 체결로 Q3 매출이 강함.

문제의 조짐

     * 회사 리트릿 후, CEO가 갑작스럽게 채용 파이프라인을 중단하고 엔지니어 제안을 철회함.
     * 이는 인수 또는 대규모 변화의 신호로 해석됨.

발표

     * 12월 4일, CEO가 전체 회의를 소집하고 Airtable에 의한 인수와 제품 종료를 발표함.
     * 대부분의 직원들에게 Airtable에서 ""매우 강력한"" 제안이 있을 것이라고 함.

다음 단계 결정

     * 정규 업무가 중단되고, 기존 고객 지원만 계속함.
     * 작성자는 Airtable에 대해 흥미가 없어 제안을 거절함.

마무리

     * 1월 3일, 인수와 제품 종료가 공개적으로 발표됨.
     * 고객들은 충격과 불만을 표함.
     * 마지막 날에는 정식 작별 인사 없이 회사가 조용히 해체됨.

왜?

     * 회사가 불리한 조건으로 인수된 이유는 명확히 밝혀지지 않음.
     * CEO는 더 높은 매출을 위한 경로를 보지 못했다고 주장함.

최종 생각

     * Airplane에서의 경험은 좋았으나, 제품 포기로 인한 고객 관계 손실이 가장 안타까움.
     * CEO가 제품을 계속 운영하는 인수 제안을 기다리거나, 기술을 다른 엔티티에 판매하거나, 제품을 오픈소스화할 수 있었을 것임.

GN⁺의 의견

     * 이 사례는 스타트업 인수가 직원과 고객에게 미치는 영향을 잘 보여줌. 인수 과정에서 투명성과 의사소통의 중요성을 강조함.
     * 스타트업이 성장하는 동안 겪을 수 있는 여러 도전과 변화에 대한 이해를 돕는 사례임.
     * 인수 후에도 제품을 유지하거나 오픈소스화하는 대안이 있었을 수 있음을 시사함. 이러한 대안은 기존 고객과 커뮤니티에 더 긍정적인 결과를 가져올 수 있음.
     * 비슷한 기능을 제공하는 windmill.dev와 Retool 같은 대체 제품을 추천할 수 있음. 이러한 도구는 Airplane 사용자들에게 전환 옵션을 제공할 수 있음.
     * 기술 인수합병 시 고려해야 할 사항으로는 회사 문화의 호환성, 제품 통합 계획, 그리고 특히 기존 고객과의 관계 유지가 있음. 이러한 요소들은 성공적인 인수합병의 핵심임.

        Hacker News 의견

     * 기사가 명확하고 잘 쓰여졌음을 언급하며, CEO가 혼자서 회사를 이끌어가는 데 압도당했을 가능성이 높다고 생각함.
          + Airplane이 2022년 9월에 3200만 달러의 시리즈 B 투자를 유치했음.
          + 2021년부터 2023년까지 기술 회사의 가치 평가가 급락함.
          + 2023년에는 성장이 둔화되면서 Airtable이 추가 자금을 모집하는 데 어려움을 겪었을 가능성이 있음.
          + 투자자들이 회사를 정리하라는 상당한 압력을 가했을 것이며, 다른 창업자와 주요 직원들의 이탈이 그 압력을 가중시켰을 것임.
          + 회사를 종료하고 투자자들에게 돈을 돌려주며 직원들에게 어느 정도의 보상과 고용 가능성을 제공하는 방법으로 acquihire(인수합병을 통한 인재 영입)가 합리적임.
          + 저자라면 남은 창업자가 팀을 위해 괜찮은 일을 했다고 생각할 수도 있음을 제안함.
     * windmill.dev의 창업자로서, 이 시장이 어렵고 고객들이 가격에 대해 매우 까다롭다고 언급함.
          + 팀을 매우 작게 유지함으로써 잘 해나가고 있지만, 20배 많은 자금을 모은 상태에서의 압박을 상상하기 어려움.
          + 개발 도구 분야에서 스타트업을 만들 기회에 감사하며, 기술적 도전에 열정이 없었다면 다른 성공적인 스타트업 기회가 더 쉬웠을 것임을 인정함.
     * Airplane의 초기 채택자이자 지지자로서, 회사의 폐쇄가 얼마나 형편없이 소통되었는지에 대해 실망함을 표현함.
          + 단 한 통의 이메일이 발송되었고, 이후 어떠한 후속 조치도 없었음.
          + 많은 고객들이 3월 1일에 제품에 로그인할 수 없게 되어 충격을 받았을 것이라고 추측함.
     * 두 공동 창업자가 이미 상당한 규모의 회사를 만든 경험이 있음을 지적함.
          + 이러한 성공 이후에는 Retool의 그림자에서 중간 규모의 회사를 계속 운영하는 것이 매력적이지 않을 수 있음.
     * 동료들이 회사를 떠난 이유가 수익 감소와 관련이 없다고 하지만, 사람들은 이동하는 이유를 항상 밝히지 않음을 언급함.
          + 부정적인 문제를 공개할 이점이 거의 없기 때문에, 보통은 ""새롭고 흥미로운 기회를 찾았다""고 표현함.
          + 짧은 기간에 여러 사람이 떠난다면 다른 문제가 있을 수 있음을 시사함.
     * Ben이 Airplane에서 어떤 시간을 보냈는지는 모르지만, Segment에서 Ben과 함께 일했던 경험을 바탕으로 그의 평판과 작업이 훌륭했다고 말함.
     * CTO에서 CEO로 전환한 공동 창업자에 대한 공감을 표현함.
          + 원래 창업 CEO가 소유한 큰 지분 때문에, 남은 공동 창업자로서는 회사의 가치를 3억 달러로 회복하기 위한 힘든 싸움을 벌이고 있었을 것임.
          + 그러나 사후 소통이 부족했다고 느낌.
          + CEO가 왜 사업 방향 전환을 필요로 했는지에 대해 사후에 더 자세히 설명할 수 있었을 것임.
     * SaaS 회사의 고객으로서의 교훈은 수익성이 없는 VC 백업 회사에 중요한 인프라나 비즈니스 프로세스를 의존하지 말고, 검증된 오픈 소스 소프트웨어를 기반으로 구축해야 함을 강조함.
     * 직원들의 보통주가 왜 가치가 없었는지, 그리고 정규 직원이 스타트업에 합류할 때 자신의 지분이 가치가 없을 가능성이 높지 않다는 것을 어떻게 미리 알 수 있는지에 대한 의문을 제기함.
     * CEO가 스타트업 그라인드에 지쳐 단순히 포기하고 싶어했다고 느낌.
          + 창업자 동료가 그만두고 나서 기술적인 부분과 시장 진출 양쪽을 모두 관리해야 했으며, 이것이 분명히 매우 힘든 일이었음.
          + 이사회는 어디에 있었는지, 외부에서 새로운 CEO를 고용하는 것은 왜 고려되지 않았는지에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=13704","스웨덴, NATO 회원국으로 가입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           스웨덴, NATO 회원국으로 가입

스웨덴, NATO 회원국 되다

     * 2024년 3월 7일 오후 17시 30분경, 스웨덴은 미국 정부에 북대서양 조약의 가입 서류를 제출함.
     * 이로써 스웨덴은 정치적 및 군사적 차원을 가진 국제기구인 NATO의 32번째 회원국이 됨.
     * NATO 회원국으로서 스웨덴은 NATO의 집단 방위에 참여하게 됨.

연락처 정보

     * 울프 크리스테르손 총리의 언론 비서인 한나 스트롬베리의 연락처: 전화(교환대) +46 8 405 10 00, 휴대폰 +46 76 128 61 69, 이메일 주소 제공.
     * 외교부 장관 토비아스 빌스트롬의 언론 비서인 안나 에르하르트의 연락처: 전화(교환대) +46 8 405 10 00, 휴대폰 +46 76 130 85 34, 이메일 주소 제공.

GN⁺의 의견

     * 스웨덴의 NATO 가입은 유럽의 안보 지형에 중요한 변화를 의미하며, 특히 러시아와의 관계에 영향을 미칠 수 있음.
     * NATO 확장은 일부 국가에서 논란의 여지가 있으며, 이로 인한 지정학적 긴장이 증가할 가능성이 있음.
     * 스웨덴의 NATO 가입 결정은 국가 안보를 강화하고 국제 안보 협력을 증진하는 데 기여할 것으로 보임.
     * 이러한 국제적 결정은 국내외에서 다양한 반응을 불러일으킬 수 있으며, 스웨덴 내부에서도 찬반 양론이 존재할 수 있음.
     * 스웨덴의 NATO 가입은 다른 중립국들에게도 영향을 미칠 수 있으며, 이는 국제 안보 정책에 대한 재평가를 촉진할 수 있음.

        Hacker News 의견

     * 스웨덴과 덴마크의 평화적 동맹

     스웨덴과 덴마크는 수백 년에 걸친 전쟁의 역사를 가지고 있으며, 인류 역사상 가장 심각한 충돌 중 하나로 여겨짐. 이제 두 나라는 서로를 방어하기 위해 동맹을 맺고 있으며, 이는 평화를 위한 큰 진전.
     * 나토 회원국의 안보

     나토 회원국이 되는 것은 핵무기를 보유하는 것보다 더 큰 안보를 제공함. 핵무기를 가진 국가들도 전쟁을 벌였지만, 나토의 강력한 전통적 군사력에는 아무도 맞서고 싶어 하지 않음.
     * 나토의 확장과 유럽의 연대

     스웨덴의 나토 가입은 좋은 소식이며 나토에 큰 이득을 가져다줌. 유럽과 나토 전반에 걸친 연대를 강화하는 데 푸틴의 역할을 인정함.
     * 스웨덴과 우크라이나의 나토 가입

     스웨덴의 국기 색상을 보면 우크라이나의 나토 가입을 위한 길을 닦고 있는 것처럼 보임.
     * 스웨덴의 군사 기술 지원

     스웨덴이 나토에 가입함으로써 그리펜 전투기를 보낼 수 있게 되기를 희망함.
     * 나토 가입국의 군사적 의무

     나토 회원국이 다른 회원국이 공격받을 때 군사적으로 응답해야 하는 의무가 있는지에 대한 의문 제기. 조약의 문구는 군사적 대응을 명확히 요구하지 않으며, 국가들은 이미 서로를 도울 수 있는 선택권을 가지고 있음.
     * 나토 확장과 핵전쟁 위험

     스웨덴의 나토 가입이 핵전쟁에 가까워지는지, 멀어지는지, 아니면 변함없는지에 대한 의문.
     * 스웨덴의 국방비 지출

     스웨덴에게 나토 가입의 유일한 단점은 국내총생산(GDP)의 2% 이상을 국방에 지출하도록 권고받는 것. 그러나 스웨덴은 나토에 큰 이득을 가져다주는 나라로 환영받음.
     * 나토의 서쪽 확장

     이번에 나토가 서쪽으로 확장되는 것은 매우 중요하며, 앞으로 어디로 확장될지 불확실함. 스웨덴 내부에서 어떤 논의가 있었는지 궁금함.
     * 대전(大戰)의 기운

     스웨덴의 나토 가입이 대전의 분위기를 연상시킴.
"
"https://news.hada.io/topic?id=13789","사례로 알아보는 최적화된 QA 방법론","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          사례로 알아보는 최적화된 QA 방법론

   소비자가 서비스에 만족하느냐, 실망하느냐의 그 기로 앞에 섰을 때 중요한 건 고객이 요구하는 품질 요구 수준입니다. 그렇기 때문에 IT 스타트업의 경우 품질에 대한 최종 사용자의 요구 사항을 이해하는 것이 무엇보다 중요합니다. 스타트업은 경쟁사와 차별화하기 위해 양질의 사용자 경험을 갖춘 서비스를 제공하기 위해 노력해야 하죠. 그러나 문제는 그리 간단치가 않습니다. 스타트업 업계에서 시간과 리소스는 무척이나 제한적이기 때문입니다.

   https://news.hada.io/topic?id=13774 댓글 참고 부탁드립니다!
"
"https://news.hada.io/topic?id=13794","Figure, OpenAI와 통합한 로봇 데모 선보여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Figure, OpenAI와 통합한 로봇 데모 선보여

     * Figure 01 로봇은 이제 사람과 완전히 대화가 가능
     * OpenAI 모델은 높은 수준의 시각 및 언어 지능을 제공
     * Figure 신경망은 빠르고 저수준의 민첩한 로봇 동작이 가능함
     * 눈에 보이는 것을 설명하고, 먹을걸 달라고 요청하면 사과를 집어서 건내주고, 상황을 판단해서 컵과 테이블을 정리하는 등의 동작을 수행

   출력 방식이 하나 더 늘었네요

  Hacker News 의견

     * 로봇의 민첩성에 감명을 받았지만, GPT-4를 경험한 사람이라면 로봇의 음성 및 추론 능력이 놀랍지 않을 수 있음. 함수 호출 기능은 인상적이지만, 상호작용하는 '세계'가 매우 단순함. 로봇이 실제 세계와 상호작용하는 것을 보는 것은 흥미로움. 현재 AI의 발전을 저해하는 것은 추론 비용과 속도임. 초당 수천 개의 토큰을 저렴하게 처리할 수 있는 방법을 찾으면, 많은 어려운 문제를 해결하고 실제로 놀라운 응용 프로그램을 볼 수 있을 것임.
     * 음성으로 사전 훈련된 동작 중 하나를 선택하는 것은 멋지지만 혁신적이지는 않음. GPT-4V를 사용하여 장면을 묘사하는 것도 비교적 간단함. 가장 인상적인 것은 쓰레기를 빠르게 줍고 손에서 손으로 물건을 유연하게 넘기는 속도임. 이러한 움직임 정책이 얼마나 일반적인지는 불분명함. 사람이 완벽하게 가만히 서 있는 모습을 보면, 모든 것이 정확하게 설정되지 않으면 실패할 것 같음. 더 많은 변화가 있는 데모를 보고 싶음. 그러나 이 데모가 훌륭하다고 생각하며, 더 많은 것을 보고 싶어함.
     * Groq의 저지연 추론이 실제 유용성을 보여줌. 응답에 지연이 있어 인상적이지 않을 수 있지만, 여전히 매우 인상적임.
     * 로봇이 쓰레기와 사과가 올려진 더러운 접시를 건조대에 넣는 것은 의문임. 접시는 먼저 씻겨져야 함.
     * 텍스트를 서보 모터 움직임으로 변환하는 능력이 놀랍고, GPT-4 비전과 Whisper가 많이 사용된 것으로 보임. '추론'이라는 용어도 새롭게 사용됨. AI 래퍼 회사라고 할 수 있음. 물론 매체는 앱과는 다름. 오늘날 AI 개발이 멈추더라도 많은 놀라운 AI 응용 프로그램이 있음.
     * 인간형 형태와 음성이 순수한 채팅 버전과는 다른 느낌을 줌. 눈과 눈맞춤을 추가하면 더 깊은 인상을 줄 것임. 일반인에게 이를 시연하는 것을 상상함.
     * 음성을 서보 모터 움직임으로 변환하는 것이 인상적임. 민첩성을 요구하는 작업을 수행하는 속도가 놀랍고, 이는 비디오를 가속하지 않고도 '자연스러워' 보이는 첫 번째 물체 조작 로봇 데모임.
     * 이 모든 것이 얼마나 비현실적이고 쓸모없는지 알지 못하는 5살 어린이가 되어 미래에 대해 한 번만 긍정적으로 생각하고 싶음. 하지만 인간은 기본적인 주거 요구 사항 아래에서 '상상 속 숫자 상승'을 운영할 수 없다는 것을 이해하지 못하고 있으며, 이 기술을 유용하고, 저렴하고, 신뢰할 수 있고, 좋게 만들 방법이 없음.
     * 이 데모에서 가장 인상적인 부분은 로봇이 '보고' 인간과 같은 부속물로 물체를 집어 올리는 것임. 뭔가 놓친 것 같지만, 이것이 매우 어렵다고 생각했음. 역기구학이 어렵다고 알고 있는데, 신경망으로 해결했을까?
     * YouTube 의 같은 동영상 링크 : Figure Status Update - OpenAI Speech-to-Speech Reasoning
"
"https://news.hada.io/topic?id=13740","크롬 124 버전부터 모든 웹사이트를 앱으로 만들기 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    크롬 124 버전부터 모든 웹사이트를 앱으로 만들기 가능

     * 크롬 124 카나리 부터 ""Install page as app"" 기능으로 데스크톱에서 웹사이트를 앱으로 쉽게 설치할 수 있게 함
     * 7년 전, 구글은 2018년까지(실제로는 2023년까지 걸림) 윈도우, 맥, 리눅스에서 모든 크롬 앱을 단계적으로 중단하고 PWA로 대체할 것이라고 발표
     * PWA는 사용자의 데스크톱에 설치할 수 있는 웹 앱으로, 마치 기본 앱과 프로그램처럼 작동하며, 곧 모든 웹사이트가 데스크톱에서 PWA를 통해 설치 가능해질 것
     * ""Install page as app…"" 옵션이 데스크톱 버전의 ""Save and Share"" 하위 메뉴에 추가됨
     * 이미 자체 PWA를 가진 사이트들은 사용자에게 설치를 유도하고 있으며, ""Install page as app…"" 기능은 사이트의 이름을 표시함. 예를 들어, 유튜브는 ""유튜브 설치""로 표시됨

PWA 활성화 방법

     * 2월에는 필요한 플래그를 활성화하여 모든 웹사이트를 PWA로 만들 수 있게 되었으나, 이제 완전히 구현된 것으로 보임
     * 크롬 카나리에서 이 기능을 지금 활성화하고 테스트하려면 카나리를 설치하고 아래의 두 플래그를 활성화하면 됨
          + chrome://flags/#web-app-universal-install
          + chrome://flags/#shortcuts-not-apps
     * 카나리는 현재 크롬 124의 초기 버전이며, 안정적인 빌드인 크롬 122는 2월에 출시되어 AI 작문 도구와 안드로이드용 읽어주기 도구를 도입했음
     * 크롬 123은 곧 안정 빌드로 출시될 예정이며(현재 베타 버전), Android용 통합 PDF 리더, 데스크톱과 노트북용 Android 스타일 미디어 플레이어, 탭 그룹 공유를 위한 다양한 옵션이 추가될 예정

   윈도용 에지는 이미 된지 꽤 되었는데… 크롬은 왜 늦은 걸까요?

   바로가기 만들기랑 뭐가 다른건지 모르겠쒀요

   그러게요. 바로가기랑 다른게 뭔지...

   브라우저 ui 가 안나오게 할수 있습니다. 따란~. 넝담이고 웹 사이트를 고대로 전용 앱처럼 쓰는게 목적이기 때문에 당연히 다른건 없습니다. 다만 모바일 경우에 푸시기능 같은 걸 앱이 없어도 쓸수 있데요. 플레이스토어에 등록 안해도 되고요. 사실상 애플 앱스토어 견제용?

   PWA 붐은 옵니다..

   파이어폭스 쓰는 입장에서 이런건 크롬이 부럽네요.
   Mozilla는 Servo 팀 해체부터 시작해서 PWA 지원 포기까지 브라우저 쪽에서는 똥볼만 차는 느낌입니다.
   Android 파이어폭스는 아직도 Fission(Site Isolation) 구현 덜 되어있고...
   그래도 애증으로 씁니다 파이어폭스. 좀 잘하자.

   파이어폭스 삽질만으로 충분한데, 구글이 차별하는건 도저히 못참겠습니다.
   유튜브 대역폭 제한하고, 캡차 늦게 뜨도록 하는건 너무하지 싶어요.

   하 진짜 파폭 좀 잘해줬으면 좋겠는데 너무 답답합니다..
   저도 10년넘게 파폭만 써왔었는데 작년부터는 그냥 크롬 씁니다..
"
"https://news.hada.io/topic?id=13798","유럽 연합에서 배포되는 앱에 대한 더 많은 옵션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       유럽 연합에서 배포되는 앱에 대한 더 많은 옵션

유럽 연합 내 앱 배포를 위한 더 많은 옵션

     * 유럽 연합(EU)에서 앱을 배포하는 개발자들에게 더 많은 유연성을 제공함.
     * 개발자의 웹사이트에서 직접 앱을 배포하는 새로운 방법 소개.

  더 많은 유연성

     * EU 내 앱에 대한 새로운 옵션을 제공하기 위해 'EU 내 앱을 위한 대체 약관 부록'에 동의한 개발자들:
          + 대체 앱 마켓플레이스. 마켓플레이스는 마켓플레이스 개발자만의 앱 카탈로그를 제공할 수 있음.
          + 외부 구매 링크. 디지털 상품이나 서비스에 대한 거래를 외부 웹페이지에서 완료하도록 사용자를 안내할 때, 개발자는 프로모션, 할인, 기타 거래의 디자인을 자유롭게 선택할 수 있음. 이제 Apple이 제공하는 디자인 템플릿은 선택 사항임.

  웹사이트에서 직접 배포하기

     * 올 봄에 제공될 소프트웨어 업데이트를 통해, Web Distribution이라는 기능이 EU 사용자들에게 개발자의 웹사이트에서 직접 iOS 앱을 배포할 수 있게 해줌.
     * Apple은 인증된 개발자들에게 웹에서 앱을 배포하는 데 필요한 API에 대한 접근을 제공할 예정임.
     * 이 API들은 시스템 기능과 통합, 사용자 앱의 백업 및 복원 등을 지원함.
     * 자세한 내용은 EU에서 Web Distribution 준비하기를 방문.

GN⁺의 의견

     * 이러한 변화는 개발자들에게 앱 배포와 관련하여 더 많은 자율성을 부여하고, 특히 EU 지역에서의 디지털 시장의 다양성과 경쟁을 촉진할 수 있음.
     * Web Distribution을 통해 앱을 배포하려는 개발자들은 사용자 경험과 보안 측면에서 Apple의 앱 스토어와 동등한 수준을 제공하기 위해 추가적인 노력이 필요할 수 있음.
     * 이러한 변화는 EU의 디지털 시장 규제에 대응하는 Apple의 전략의 일환으로 볼 수 있으며, 다른 지역에서도 유사한 정책이 도입될 가능성이 있음.
     * 개발자들은 이 새로운 배포 방식을 통해 사용자 기반을 확장하고, 더 많은 수익화 기회를 가질 수 있으나, 동시에 앱 스토어의 검증 과정을 우회하는 앱의 안전성에 대한 우려도 고려해야 함.
     * 유사한 기능을 제공하는 다른 플랫폼으로는 Google Play Store의 Direct Carrier Billing이나 Samsung Galaxy Store가 있으며, 이들도 개발자들에게 다양한 배포 옵션을 제공함.

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + 댓글들은 해당 링크로 이동되었음.
          + 모든 이동된 댓글들은 신고되어 플래그 처리됨.
"
"https://news.hada.io/topic?id=13714","아키라 토리야마 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              아키라 토리야마 사망

드래곤볼 창작자 아키라 토리야마의 부고

     * 드래곤볼 프랜차이즈의 창작자인 아키라 토리야마가 2024년 3월 1일에 68세의 나이로 급성 경막하 출혈로 사망함.
     * 토리야마의 가족과 소수의 친척들만 참석한 장례식이 치러짐.
     * 공식 드래곤볼 계정은 팬들에게 토리야마의 가족에게 인터뷰 요청, 방문, 꽃이나 위로 선물 보내기를 자제해달라고 요청함.
     * 토리야마가 여러 작품을 창작 중간에 두고 세상을 떠난 것에 대해 공식 계정은 유감을 표함.
     * 만화와 애니메이션 세계에 대한 그의 전설적인 기여를 기억할 것임.

공식 드래곤볼 트위터 계정의 전문

     * 아키라 토리야마가 급성 경막하 출혈로 사망했다는 슬픈 소식을 전함.
     * 토리야마는 창작에 대한 열정을 가지고 여러 작품을 진행 중이었으며, 아직 이루고자 하는 많은 것들이 있었음.
     * 그러나 그는 세계에 많은 만화 작품과 예술 작품을 남김.
     * 전 세계 많은 사람들의 지지 덕분에 45년 이상 창작 활동을 계속할 수 있었음.
     * 아키라 토리야마의 독특한 창작 세계가 오랫동안 많은 사람들에게 사랑받기를 바람.
     * 가족과 소수의 친척들만 참석한 장례식이 열림.
     * 토리야마의 평온한 마지막을 바라는 뜻에 따라, 꽃, 위로 선물, 방문, 제의 등을 받지 않음.
     * 가족에 대한 인터뷰 자제를 요청함.
     * 추모 모임 계획은 아직 결정되지 않았으며, 확정되면 알릴 예정임.
     * 평소의 이해와 지원에 대해 깊은 감사를 표함.

GN⁺의 의견

     * 아키라 토리야마의 사망 소식은 전 세계 만화와 애니메이션 팬들에게 큰 슬픔을 안겨줄 것임. 그의 작품은 여러 세대에 걸쳐 사랑받아왔으며, 그의 창작물은 문화적 아이콘으로 자리 잡았음.
     * 토리야마의 사후에 그의 미완성 작품들이 어떻게 처리될지는 미지수임. 이는 창작자의 갑작스러운 부재가 작품에 미치는 영향에 대한 중요한 사례가 될 수 있음.
     * 드래곤볼과 같은 유명 프랜차이즈는 창작자의 부재 후에도 계속해서 새로운 콘텐츠를 생산하는 경우가 많음. 이는 다른 창작자들이 원작자의 유산을 어떻게 이어갈지에 대한 흥미로운 관찰 포인트가 될 수 있음.
     * 만약 독자들이 드래곤볼과 비슷한 장르의 작품을 찾고 있다면, '나루토', '원피스', '블리치'와 같은 다른 인기 있는 만화 시리즈를 추천할 수 있음.
     * 토리야마의 작품은 그의 독창적인 스토리텔링과 캐릭터 디자인으로 인해 독특한 위치를 차지하고 있음. 그의 사망은 새로운 창작자들에게 영감을 주는 동시에 그들이 자신만의 목소리를 찾도록 독려하는 계기가 될 수 있음.

        Hacker News 의견

     * 토리야마 아키라의 문화적 영향은 강조해도 지나치지 않음. 만화, 애니메이션, 비디오 게임, 대중 문화 등에서 전설적인 인물로, 특히 중남미 지역에 미친 영향이 대단함. 천재로서 너무 이른 나이에 세상을 떠남. 드래곤볼과 특히 손오공 캐릭터가 긍정성, 유머, 순진함, 행복, 강인함, 성장 추구 등의 조화로운 테마를 통해 많은 사람들에게 깊은 울림을 줌. 다른 작품에서 이러한 테마의 결합을 같은 방식으로 포착한 사례는 드물다고 생각함. 수십 년간 웃음, 미소, 눈물, 소름을 선사한 토리야마에게 감사함.
     * 드래곤볼 시리즈를 읽어본 적이 없다면, 첫 두 권을 구매하여 그 매력을 경험해보길 권장함. 현재와는 다른 매력적인 만화 그림체를 감상할 수 있음.
     * 토리야마는 많은 어린이들에게 예술가가 되는 영감을 주었으며, 그 중 일부는 토리야마보다 더 유명해진 사람들도 있음(예: 오다 에이이치로). 토리야마 자신도 아스트로 보이의 창작자인 오사무 테즈카에게서 영감을 받았음. 드래곤볼, 드래곤 퀘스트, 크로노 트리거, 닥터 슬럼프 등 다양한 작품을 통해 전설이 됨. 일본 외 지역에서 애니메이션을 대중화하는 데 기여함.
     * 드래곤볼은 문화, 언어, 세대를 초월하는 창작물로, 용기, 우정, 회복력, 꿈 추구 등 인간 경험의 단순하고도 깊은 진리를 담고 있음. 삶의 깊은 목적과 의미, 새로운 것을 발견하는 세계를 표현함. 토리야마의 작품은 그가 세상을 떠난 후에도 계속 살아남을 것임을 위안 삼음.
     * 아키라 토리야마는 청소년기에 중요한 두 가지, 드래곤볼 Z와 크로노 트리거를 통해 영향을 줌. 드래곤볼 Z는 애니메이션에 대한 관심을 불러일으켜 미술 학교 진학, 첫 결혼, 일본어 학습으로 이어짐. 크로노 트리거는 첫 사랑하는 비디오 게임이었으며, 그의 예술 스타일이 큰 부분을 차지함. 이러한 경험은 게임 산업에 레벨 디자이너로 진출하게 함.
     * 드래곤볼은 서구에서 일본 애니메이션을 대중화하는 데 결정적인 역할을 함. TV에서 많은 애니메이션이 방영되지 않았기 때문에, 인터넷을 통해 다른 쇼를 다운로드하고 친구들과 공유하는 것이 초기 너드/인터넷 문화의 일부였음. 드래곤볼은 많은 사람들에게 그 문화로의 관문이었음.
     * 드래곤볼 Z는 당시에 본 것 중 가장 멋진 콘텐츠였으며, 일상의 중심이었음. 형제가 VHS에 에피소드를 녹화하여 장면을 그릴 수 있도록 했고, 이것이 예술적인 면을 자극하여 미술 학위를 거의 취득할 뻔함. 드래곤볼이 일본 문화에 대한 관심을 불러일으키지 않았다면, 그러한 경로를 따르지 않았을 것임.
"
"https://news.hada.io/topic?id=13699","잘나가는 회사들은 QA를 어떻게 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         잘나가는 회사들은 QA를 어떻게 할까?

   테스트를 넘어, 서비스의 큰 그림을 보는 QA 방법

   본문 좀더 작성부탁!
"
"https://news.hada.io/topic?id=13762","무한 캔버스 데이터를 위한 오픈 파일 포맷, JSON Canvas","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  무한 캔버스 데이터를 위한 오픈 파일 포맷, JSON Canvas

무한 캔버스 데이터를 위한 오픈 파일 포맷

     * 무한 캔버스 도구는 정보를 공간적으로 보고 조직할 수 있는 방법으로, 디지털 화이트보드와 유사함.
     * 무한 캔버스는 자유와 탐험을 장려하며, 많은 앱에서 인기 있는 인터페이스 패턴이 됨.
     * JSON 캔버스 포맷은 무한 캔버스 앱으로 생성된 데이터에 장기적인 보존성, 가독성, 상호 운용성, 확장성을 제공하기 위해 만들어짐.
     * 이 포맷은 쉽게 파싱할 수 있도록 설계되었으며 사용자에게 데이터에 대한 소유권을 부여함.
     * JSON 캔버스 파일은 .canvas 확장자를 사용함.
     * JSON 캔버스는 원래 Obsidian을 위해 만들어졌으며, 어떤 앱이나 도구에서도 가져오기, 내보내기, 저장 포맷으로 자유롭게 구현할 수 있음.
     * 이 사이트와 JSON 캔버스와 관련된 모든 자원은 MIT 라이선스 하에 오픈소스임.

GN⁺의 의견

     * 무한 캔버스는 창의적인 아이디어와 정보를 시각적으로 배열하고 연결하는 데 매우 유용하며, 이를 통해 사용자는 복잡한 개념도 쉽게 구조화하고 이해할 수 있음.
     * JSON 캔버스 포맷은 데이터의 호환성과 장기적인 사용을 고려한 것으로, 사용자가 자신의 데이터를 다른 앱이나 플랫폼으로 쉽게 이동할 수 있게 해줌.
     * 오픈소스로 제공되기 때문에 개발자 커뮤니티에서 이 포맷을 확장하고 개선하는 데 기여할 수 있으며, 이는 기술의 발전과 혁신을 촉진할 수 있음.
     * 무한 캔버스 도구를 사용하는 개인이나 기업은 JSON 캔버스 포맷을 도입함으로써 데이터의 상호 운용성을 높이고, 장기적인 데이터 관리 전략을 수립하는 데 도움을 받을 수 있음.
     * 다만, 이러한 새로운 포맷이 널리 채택되기 위해서는 충분한 도구와 앱들이 이 포맷을 지원해야 하며, 사용자들이 이 포맷의 이점을 인식하고 사용하기 시작해야 함.

        Hacker News 의견

     * JSON Canvas 프로젝트 소개
          + JSON Canvas는 오늘 출시된 초기 단계의 프로젝트임.
          + 1년 전 Obsidian Canvas 출시 이후, .canvas 파일 형식이 안정적으로 느껴져 다른 앱에서도 사용할 수 있도록 이름과 리소스를 부여함.
          + 현재 사양은 보수적이며, 아직 많은 기능을 지원하지 않음.
          + JSON Canvas의 목적은 이 형식을 둘러싼 상호 운용 가능한 생태계를 장려하기 위함임.
          + 모든 종류의 피드백을 찾고 있으며, 이 스레드에서 공유된 제안들은 포맷을 더 유용하게 만드는 로드맵을 제공함.
     * 사양에 대한 의견 및 질문
          + 현재 사양은 미완성이며, 명확하지 않은 부분이 많음.
          + 좌표 작동 방식, 파일 노드와 URL 노드의 차이, 허용되는 HTML 태그 등에 대한 명확한 설명 필요.
          + Excalidraw 및 TLDRaw와 같은 앱과의 호환성을 위한 기능 요청이 있음.
     * 데이터 저장 방식에 대한 제안
          + 애플리케이션 데이터를 텍스트 파일에 저장하는 것은 시간이 지남에 따라 복잡해질 수 있음.
          + SQLite를 사용하면 데이터 유효성 검사, 원자적 트랜잭션, 고급 쿼리 인터페이스 등의 이점을 얻을 수 있음.
          + JSON Canvas는 좋은 작업이지만, SQLite를 사용한 경험에서 나온 관점을 제공함.
     * Obsidian에 대한 신뢰
          + Obsidian은 간단하고 개방된 파일 형식을 중심으로 구축하는 데 전념하고 있어, 신뢰할 수 있는 몇 안 되는 폐쇄 소스 애플리케이션 중 하나임.
          + 사용자를 만족시키는 수익성 있는 비즈니스는 오픈 소스 대안이 따라잡기 어려움.
     * 사양에 대한 추가 의견
          + 사양이 1.0 버전 이전으로 보이며, 세부 사항이 부족함.
          + 파일 경로, 배경 URL 등의 필드가 명확하게 정의되어 있지 않음.
     * 사양에 대한 평가
          + 무한 캔버스 앱 간의 형식 교환에 대한 아이디어는 좋지만, 사양이 의견이 많이 반영된 것처럼 보임.
          + Kinopio와 같은 앱은 구축할 수 있지만 그 이상은 어려움.
     * 사양에 대한 비판적인 의견
          + 화이트보드는 시각적인 요소가 중요하므로 사양은 시각적 요소를 정의하는 데 많은 부분을 할애해야 함.
          + 현재 사양은 매우 기초적인 그래프 파일 형식으로 보이며, 이미 많은 사양이 시각적 측면을 더 잘 정의하고 있음.
     * 오픈 소스 무한 캔버스 애플리케이션 관리자의 의견
          + 지원되는 캔버스 객체의 세트가 매우 최소화되어 있어 약간 실망함.
     * 사양 개선을 위한 제안
          + 상위 수준의 메타데이터 추가, 모든 노드를 포함하는 경계 상자 정의 등이 필요함.
          + 메타데이터를 먼저 작성하도록 직렬화 최적화하는 것이 유용함.
     * 사양 요약
          + 사양은 한 페이지에 요약될 수 있으며, 간단함.
          + ""node: { type: ..., x/y/color }; edge: { from/to: ..., color/label/... }""와 같은 구조를 가짐.
          + 사용법을 보여주는 GIF와 함께 단순함이 돋보임.
"
"https://news.hada.io/topic?id=13742","미국, 보잉에 대한 형사 조사 개시할 것으로 알려져","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      미국, 보잉에 대한 형사 조사 개시할 것으로 알려져

미국, 보잉에 대한 형사 조사 개시

     * 미국 법무부가 보잉사의 한 비행기 패널이 알래스카 항공의 1월 초 비행 중에 떨어진 사건과 관련하여 형사 조사를 시작함.
     * 알래스카 항공은 조사에 협력하고 있으며, 자신들이 조사의 대상이 아니라고 믿음.
     * 1월 5일, 보잉 737 맥스 9 제트기의 패널이 비행 중에 떨어져 승객들이 수천 피트 상공에서 외부 공기에 노출됨. 심각한 부상은 없었으나, 더 높은 고도에서 발생했다면 대형 사고로 이어질 수 있었음.
     * 해당 패널은 '도어 플러그'로 알려져 있으며, 필요하지 않은 출구 문에 의해 남겨진 공간을 덮는 데 사용됨. 국가교통안전위원회의 예비 조사에 따르면, 비행기가 보잉 공장을 떠날 때 도어 플러그가 제대로 고정되지 않은 채 출고되었을 가능성이 있음.

이전의 합의 검토

     * 법무부는 이전에 보잉사와 2021년에 도달한 연방 형사 기소에 대한 합의를 검토하고 있다고 밝힘.
     * 이 합의에 따라 보잉은 25억 달러 이상을 지불하기로 했으며, 대부분은 고객에 대한 보상 형태임.
     * 법무부는 보잉이 맥스의 승인과 관련하여 연방항공청에 중요한 정보를 숨겼다는 혐의를 기각하기로 합의함.
     * 현재 진행 중인 형사 조사가 2021년 합의의 검토와 관련이 있는지, 별개의 문제인지는 명확하지 않음.

합의에 대한 비판

     * 합의는 보잉에 대해 너무 관대하다는 비판을 받았으며, 346명의 사망자 가족과 상의하지 않고 이루어졌음.
     * 첫 번째 사고는 2018년 말 인도네시아에서, 두 번째 사고는 2019년 초 에티오피아에서 발생함.
     * 맥스는 20개월간 전 세계적으로 비행 금지되었으나, 2020년 말 서비스를 재개하고 대부분의 비행에서 사고 없이 운항됨.

GN⁺의 의견

     * 이번 보잉사의 사건은 항공 안전에 대한 중요성을 다시 한번 상기시키며, 항공기 제조사의 품질 관리와 안전 점검의 중요성을 강조함.
     * 형사 조사가 진행되는 동안 항공업계와 승객들은 보잉사의 안전 기준과 절차에 대해 더욱 높은 수준의 투명성과 책임을 요구할 것임.
     * 이 사건은 항공기 제조 과정에서의 작은 실수나 누락이 어떻게 심각한 결과를 초래할 수 있는지 보여주는 사례로, 업계 전반에 걸쳐 철저한 검사와 감독의 필요성을 강조함.
     * 항공기의 안전 문제는 과거에도 여러 차례 발생했으며, 이번 사건은 항공기 안전에 대한 지속적인 개선과 혁신이 필요함을 보여줌.
     * 이 기사가 항공 안전에 대한 인식을 높이고, 항공사와 제조사가 안전 기준을 강화하는 계기가 되길 바람.

        Hacker News 의견

     * 기사와 관련 댓글에서 언급된 보잉의 문제점은 ""문 플러그""를 ""열었다""는 표현에 대한 것임. 문을 여닫는 것은 기록하지 않지만, 항공기 부품을 제거할 때는 반드시 기록해야 함. 보잉은 문 플러그를 열고 닫는 것에 대해 특별한 주의가 필요하지 않다고 생각했을 수 있지만, 실제로는 문 플러그가 제대로 닫히지 않았을 때 조종사에게 경고하는 기능이 없음.
     * 보잉 내부 고발자가 지적한 ""문서화되지 않은 문제""와 현재의 문제가 일치하는지에 대한 의문 제기. 고발자는 보잉 생산 라인에 결함이 많고, MAX 9의 볼트가 설치되지 않았다고 주장함.
     * 보잉의 기업 문화와 C-Suite의 문화적 신호에 대한 흥미로운 기사 링크 제공.
     * archive.ph가 차단된 경우를 위해, 뉴욕타임스 기사의 웹 아카이브 링크 제공.
     * Max-8 항공기를 이용할 예정인 한 사용자가 최근의 사건에 대한 명확한 정보가 없어 불안함을 표현. MCAS 사태 때와 유사한 상황으로, 보잉 내부에는 정확히 무슨 일이 일어났는지 알고 있는 사람이 있을 것이라고 언급하며, 이러한 문제를 잡아낼 수 있는 더 나은 품질 관리 절차의 필요성을 강조함.
     * 비행 중에 사람이 빨려 나갈 뻔한 사건에 대해, 운 좋게도 사고가 발생하지 않았지만, 만석이었다면 사망자가 발생했을 것이라는 우려 표현.
     * 존 올리버의 쇼에서 다룬 보잉과 항공 산업 전반에 대한 언급. 특히 FAA의 규제자들이 항공 산업 자체에 의해 급여를 받는다는 점을 지적하며, 이는 FAA의 제조 과정에 대한 경험 부족으로 인해 산업이 자율 규제를 하게 된 결과임. 이로 인해 이해 상충의 가능성이 높지만, FAA는 이를 수용하고 있음.
     * 보잉에 대한 미국 정부의 지원과 의존성으로 인해, MCAS 사태 이후에도 보잉이 ""건드릴 수 없는"" 상태라는 비판적인 의견 제시. 이는 ""책임의 극장""으로 묘사되며, 보잉이 전략적 방위 계약자로서의 역할을 수행하기 때문임.
"
"https://news.hada.io/topic?id=13700","AWS, 외부 클라우드/온프레미스로 이전시 데이터 전송 비용 면제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AWS, 외부 클라우드/온프레미스로 이전시 데이터 전송 비용 면제

     * AWS는 고객이 다른 클라우드 제공업체나 온프레미스로 데이터를 이전할 수 있는 선택권을 중요하게 여기며, 이에 따라 AWS 외부로의 데이터 전송 비용(DTO)을 면제하기로 함
     * 데이터 전송 비용 면제의 범위와 조건
          + AWS는 매월 100GB의 무료 인터넷 데이터 전송을 제공하며, 이는 Amazon EC2, Amazon S3, Application Load Balancer 등에서 발생하는 트래픽을 포함
          + Amazon CloudFront에서는 매월 1TB의 무료 데이터 전송을 제공
          + 100GB 이상의 데이터 전송이 필요한 경우, AWS 지원팀에 연락하여 추가 데이터에 대한 무료 DTO 요금을 요청할 수 있음
          + AWS는 요청을 계정 수준에서 검토하고, 이전되는 데이터에 대한 크레딧을 제공
          + 계정을 닫거나 AWS와의 관계를 변경할 필요 없으며, 필요한 경우 언제든지 AWS로 돌아올 수 있음
          + 동일한 AWS 계정이 여러 번 무료 DTO를 신청하는 경우 추가 검토가 이루어짐
     * 데이터 전송 비용 면제는 유럽 데이터법(European Data Act)의 방향을 따르며, 전 세계 모든 AWS 고객과 모든 AWS 리전에 적용됨

   구글 클라우드에서 데이터 이전 시 전송 비용 면제

   구글이 먼저 하고 AWS도 뒤따르네요. 다들 EU가 때려서 어쩔수 없이 하지만, 긍정적인 변화처럼 보이기 위해 노력을..

  Hacker News 의견

     * 대형 기술 기업들은 클라우드 제공자를 변경할 경우 5000만 달러의 데이터 전송 비용이 발생한다고 주장
          + EU는 데이터 전송 비용이 무료여야 한다고 말함.
          + 대형 기술 기업들은 자유롭고 공정한 경쟁을 사회의 중요한 부분으로 여기며, 고객의 선택의 자유를 가장 중요시하기 때문에 데이터 전송을 무료로 제공한다고 주장함
     * 유럽 데이터 법에 따른 데이터 전송 비용 변경의 시작이 되길 바람.
          + 법안의 다른 부분도 검토해볼 가치가 있으며, 특히 제34조 제2항이 중요함
          + 해당 조항은 데이터 처리 서비스 제공자가 실제 발생한 비용을 초과하지 않는 범위 내에서 데이터 전송 비용을 부과할 수 있도록 함
          + 이 조항이 악용되지 않기를 바라며, AWS, GCP, Azure의 데이터 전송 비용을 시장 가격으로 낮추면 클라우드 종속성을 점진적으로 줄일 수 있음
     * 기업들이 유럽 데이터 법에 의해 강제되었기 때문에 긍정적인 이미지를 만들어내려고 노력함
          + 마케팅 메시지에도 불구하고 긍정적인 변화임.
     * 데이터를 무료로 전송한 후 60일 이내에 모든 데이터를 삭제하고 계정을 닫아야 하는지 여부가 논의됨
          + 유럽 데이터 법의 글자를 따르는 것처럼 보이지만, 만약 사실이라면 이상적이지 않음
     * AWS는 고객의 90% 이상이 인터넷으로의 데이터 전송에 대해 비용을 지불하지 않는다고 주장함
          + 매달 100GB를 무료로 제공하지만, 이는 많은 사람들이 한 달에 사용하는 양보다 적음
          + 대부분의 AWS 사용자는 확장이 필요하지 않은 사람들임
     * AWS와 GCP가 EU 법을 나쁜 믿음으로 해석하여 무료로 데이터를 전송하는 것은 법의 의도에 반함
          + 법은 클라우드 제공자가 발생한 비용을 초과하지 않는 범위에서 데이터 전송 비용을 부과하도록 요구함
     * 큰 클라우드 회사들의 방어벽이 무너지고 있음을 의미할 수 있음
          + 데이터를 자유롭게 이동할 수 있게 되면 상황이 흥미로워질 것임
          + 주식 시장은 이러한 변화에 크게 반응하지 않는 것으로 보임
     * AWS가 GCP의 유사한 조치에 압박을 느끼고 있는지 의문임
     * AWS가 모든 데이터 전송에 대해 비용을 부과한다고 잘못 믿고 있었음
          + 이제 AWS는 모든 계정에 큰 무료 티어를 제공한다고 주장함
          + 이 변경사항이 언제 일어났는지에 대한 정보를 찾음
     * AWS가 지원 요청 없이 대부분의 데이터 전송 비용을 줄이면 클라우드 컴퓨팅 분야에서 가장 큰 변화가 될 것임.
          + 데이터 전송 비용 때문에 많은 멀티 클라우드 아키텍처가 설계되지 않음.
          + AWS에서 일부 인프라를 호스팅하고, S3를 사용하면서, Hetzner에서 일부 기계를 유지하고, Azure에서 호스팅되는 다른 API를 호출할 수 있는 날이 올 것임.
"
"https://news.hada.io/topic?id=13710","당신은 단순히 비공개 보안 링크에 공개적으로 접근할 수 없습니다, 그렇지 않나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             당신은 단순히 비공개 보안 링크에 공개적으로 접근할 수 없습니다, 그렇지 않나요?

공개적으로 접근할 수 없는 개인 보안 링크, 정말 그럴까?

     * 인기 있는 멀웨어/URL 분석 도구들인 urlscan.io, Hybrid Analysis, Cloudflare radar URL 스캐너는 정보 수집과 공유를 위해 대량의 링크를 저장함.
     * 이러한 서비스들이 실수로 사용자에 의해 제출되거나 잘못 구성된 스캐너와 확장 프로그램에 의해 공개 데이터로 스캔된 개인적이고 민감한 링크들을 저장하고 있다는 사실은 널리 알려져 있지 않음.

어떤 링크들을 말하는 거지?

     * 클라우드 스토리지 도구(Dropbox, iCloud, Sync, Egnyte, Ionos Hidrive, AWS S3 등)를 사용하여 공유된 파일들.
     * 클라우드 연결 NAS 도구(Western Digital Mycloud 등).
     * 기업 커뮤니케이션(Slido, Zoom, Onedrive, Airtable 등).
     * 비밀번호 재설정 링크, Oauth 로그인 링크 등.
     * 이러한 서비스들은 무작위 식별자를 포함한 단일 개인 링크를 사용하여 서비스에 접근할 수 있게 하는 공통점이 있음. 때때로 비밀번호나 암호 구절을 사용하여 추가 보호되기도 하며, 이 경우 링크에 접근한다고 해서 데이터 노출이 발생하지 않음.

누가 책임져야 하나?

     * Hybrid Analysis와 urlscan.io의 이용 약관에 따르면, 제출된 콘텐츠에 대한 책임은 사용자에게 있으며, 민감한 링크를 검토하고 제거하는 메커니즘이 없음.
     * 자동화된 방식으로 이를 구현하는 것도 쉽지 않을 수 있음.
     * 보안 연구원으로서 이러한 링크의 출처를 파악하기 어려움.

우리는 위협 사냥꾼! 모든 링크는 우리의 것!

     * urlscan Pro는 유료 사용자/회사에게 Public뿐만 아니라 Unlisted 스캔에 대한 접근을 허용함.
     * Unlisted는 공개 페이지나 검색 결과에는 보이지 않지만, urlscan Pro 플랫폼의 고객에게는 보임.
     * TheHive의 Cortex-Analyzers는 urlscan.io 분석기에서 public:on 구성을 명시적으로 사용하여 링크가 unlisted로 나타나도록 함.
     * urlscan Pro 사용자들에게는 데이터가 공개되지 않지만 접근할 수 있으므로 더 많은 민감한 정보가 유출될 위험이 있음.

민감한 링크를 어떻게 제거할 수 있나?

     * Urlscan과 Hybrid Analysis는 링크를 플래그하여 제거할 수 있도록 함.
     * Hybrid Analysis의 경우, 공개 샌드박스에 제출된 모든 파일이 검색 가능하고 전 세계에 공개됨.

결론

     * 이 문제가 계속될 것임은 확실하지만, 스캔을 기본적으로 비공개로 유지하는 것이 가장 좋은 해결책일 수 있으나, 보안 커뮤니티의 위협 인텔리전스 및 분석 공유 관행의 목적에는 부합하지 않음.
     * 이러한 서비스를 사용할 때 스캔의 가시성에 주의해야 함.

면책 조항

     * url 데이터베이스에서 이러한 링크/파일에 접근하기로 선택한 경우, 실제 악성 파일과 링크에 주의해야 함.
     * 일부는 단순한 피싱 시도일 수 있으며 실제 멀웨어를 포함할 수 있음.
     * 샌드박스 환경을 사용할 것을 권장함.

유용한 링크

     * urlscan.io의 SOAR spot: Chatty security tools leaking private data (2022)
     * urlscan.io Search API Reference
     * Falcon Sandbox Public API
     * Cloudflare Radar URL Scanner

GN⁺의 의견

     * 이 기사는 보안 도구들이 어떻게 민감한 정보를 실수로 공개할 수 있는지를 보여줌으로써, 보안 연구원과 일반 사용자 모두에게 경각심을 일깨워줌.
     * 이러한 문제는 사용자의 실수나 도구의 잘못된 구성으로 인해 발생할 수 있으며, 이는 보안 커뮤니티 내에서 민감한 정보의 취급에 대한 더 많은 주의와 책임을 요구함.
     * 이 기사는 또한 개인과 기업이 자신의 데이터를 보호하기 위해 어떤 조치를 취해야 하는지에 대한 중요성을 강조함.
     * 비판적인 시각에서 볼 때, 이러한 유출은 개인의 프라이버시 침해와 기업의 기밀 유지에 심각한 위협이 될 수 있으며, 이는 보안 도구와 서비스의 신뢰성에 대한 의문을 제기할 수 있음.
     * 이와 유사한 기능을 제공하는 다른 프로젝트로는 VirusTotal이나 Any.run과 같은 멀웨어 분석 플랫폼이 있으며, 이러한 서비스를 사용할 때는 항상 데이터의 공개 여부를 신중하게 검토해야 함.

        Hacker News 의견

     * 링크에 접근 제어가 없는 것이 기본적인 문제로, 공개적인 인덱스가 없기 때문에 사적이라고 가정된다. AWS 계정 ID를 버킷을 통해 발견하는 것과 관련된 이야기가 해커뉴스에서 인기를 끌었는데, 댓글에서 도출된 합의는 계정 식별자의 비공개성을 보안의 일부로 의존하는 것이 잘못된 접근이라는 것이다. 이는 단순히 또 다른 'dorking' 방법일 뿐이다.
          + 링크의 비공개성: 링크가 공개적으로 인덱싱되지 않는다는 이유로 사적이라고 가정하는 것은 문제가 있음. AWS 계정 ID의 비공개성에 의존하는 것은 보안상 올바르지 않은 접근이며, 이는 새로운 보안 이슈가 아니라 'dorking'의 한 형태임.
     * 개인적으로 공유 가능한 링크를 생성하려면 URL의 해시 부분에 비밀 정보를 저장해야 한다. 해시는 DNS 쿼리나 HTTP 요청에 포함되지 않는다. 예를 들어, links.com#<secret> 형식의 링크는 브라우저를 벗어나지 않는다. 해시 부분의 데이터를 URL 안전 Base64 문자열로 인코딩하는 것이 좋다.
          + 링크의 안전한 공유: URL의 해시 부분에 비밀 정보를 저장하여 링크를 안전하게 공유할 수 있음. 이 방법은 해시가 DNS 쿼리나 HTTP 요청에 포함되지 않기 때문에 더 안전함.
     * 무한 사용이 가능한 ""사적인"" 링크에 대해 항상 의심스러웠다. 이것은 단지 오브스큐리티를 통한 보안이다. 구글 문서와 같이 ""URL을 가진 사람이라면 누구나 접근할 수 있다""는 명시적인 옵션이 있는 경우가 더 낫다. 필자가 구축한 시스템에서는 짧은 수명을 가진 서명된 URL을 사용하며, 이 URL은 사용자에게 직접 보여지지 않는다.
          + 사적인 링크에 대한 의구심: ""사적인"" 링크가 실제로는 오브스큐리티를 통한 보안에 불과하며, 짧은 수명을 가진 서명된 URL을 사용하는 것이 더 안전한 방법임.
     * 빠른 리다이렉트 루프의 일부가 아닌 링크는 복사되어 공유될 것이다. URL은 보편적이며, 프로토콜 상의 자원에 접근을 용이하게 한다. 짧지 않은 수명을 가진 모든 것에 대한 접근 제어는 URL 외부에서 이루어져야 한다. e2ee가 아닌 채널에서 링크를 공유할 때, URL에 처음 접근하는 주체는 전송 대상자가 아니라 채널의 서비스일 수 있다. 이러한 스캐너 도구는 사용자에게 스캔이 공개적임을 명시하면 UX가 개선되지 않을 것이다.
          + URL을 통한 접근 제어: URL은 자원에 대한 접근을 용이하게 하기 위해 공유되며, 접근 제어는 URL이 아닌 다른 방법으로 이루어져야 함. 스캐너와 같은 도구는 사용자에게 공개적인 스캔을 알리면 사용자가 서비스 사용을 망설일 수 있으므로 UX 개선에 도움이 되지 않음.
     * ""이메일 기반 인증"" 문제에 대한 해결책은 계정과 비밀번호를 만드는 단계 없이, URL이 실수로 공유되더라도 문제가 되지 않는 일회용 코드를 사용하는 것이다. 사용자가 ""사적인"" 링크를 방문하면, 사이트는 시간 제한이 있는 일회용 코드를 이메일로 다시 보내고, 사용자는 이메일 소유를 확인하기 위해 임시 코드를 입력한다.
          + 이메일 인증과 일회용 코드: 이메일 기반 인증 문제를 해결하기 위해 일회용 코드를 사용하며, 이는 URL이 실수로 공유되어도 문제가 되지 않음.
     * 인터넷에서 URL에 무작위 문자열 이상의 보호가 없다면 그것들은 사실상 사적이지 않다. 인터넷에 연결된 웹캠을 찾는 것과 같은 이야기다. 우리는 이미 이를 알고 있어야 한다. ""누가 책임져야 하는가"" 섹션에서 이를 언급하지 않는 이유는 무엇인가?
          + URL의 사적인 성격: URL에 무작위 문자열 이상의 보호가 없으면 사적이지 않으며, 이는 이미 알려진 사실임.
     * 주제에서 벗어난 이야기이지만, Cloudflare Radar가 1.1.1.1에서 데이터를 채굴한다는 링크가 있다. 1.1.1.1이 사용자 데이터를 어떠한 목적으로도 사용하지 않는다고 생각했는데?
          + Cloudflare Radar와 1.1.1.1: Cloudflare Radar가 1.1.1.1에서 데이터를 채굴한다는 주장이 있으며, 이는 1.1.1.1이 사용자 데이터를 사용하지 않는다는 기존의 인상과 상충함.
     * Zoom 회의 링크는 종종 쿼리 매개변수로 비밀번호를 추가한다. 이 링크가 ""사적이고 안전한"" 링크인가? 비밀번호 없이는 ""사적이고 안전한"" 링크인가?
          + Zoom 회의 링크의 안전성: Zoom 회의 링크에 비밀번호가 포함되어 있을 때와 없을 때의 안전성에 대한 질문.
     * 다음 두 가지 사례 중 어느 것이 더 안전한지 설명해 줄 수 있는가?
         1. domain.com/login 사용자: John 비밀번호: 5자리 무작위 비밀번호
         2. domain.com/12자리 무작위 URL 두 경우 모두 같은 무작위/속도 제한 보호를 가정하거나 전혀 없다고 할 때, 왜 1번이 2번보다 더 안전한가?
          + 로그인 안전성 비교: 두 가지 다른 로그인 방식의 안전성 비교에 대한 질문.
     * private airtable.com 앱에 업로드된 모든 미디어/사진은 공개 링크로, URL을 알고 있으면 인증 없이 접근할 수 있다.
          + Airtable.com의 공개 링크: Airtable.com에 업로드된 미디어/사진은 공개 링크로, URL만 알면 누구나 접근할 수 있음.
"
"https://news.hada.io/topic?id=13728","뉴욕 타임즈, 수백 개의 비공식 'Wordle' 클론에 대한 단속 강화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                뉴욕 타임즈, 수백 개의 비공식 'Wordle' 클론에 대한 단속 강화

     * 뉴욕 타임즈가 워들 게임의 클론 버전들에 대해 저작권 침해를 이유로 DMCA 저작권 요청을 제출
     * 워들은 인기 있는 웹 기반 단어 퍼즐 게임으로, 뉴욕 타임즈는 2022년에 워들을 인수
     * 워들 클론들은 GitHub에서 개발되었으며, 5x6 타일 레이아웃과 회색, 노란색, 녹색 색상 구성을 포함한 게임 플레이 스타일이 저작권에 의해 보호됨

워들 클론에 대한 구체적인 조치

     * 한국어와 보스니아어 버전의 비공식 워들 게임에 대해 1월에 두 건의 저작권 요청이 제출됨
     * 이번 주에는 Shaetlan 언어를 홍보하기 위해 만들어진 'Wirdle'과 React, TypeScript, Tailwind를 사용하여 만들어진 오픈소스 워들 클론 'Reactle'에 대한 추가 요청이 제출됨
     * Reactle 코드는 GitHub에서 약 1,900회 복사되었으며, 다양한 언어, 테마, 시각적 스타일을 사용하는 워들 영감 게임을 개발하는 데 사용됨
     * DMCA 통지는 원본 Reactle 코드에서 파생된 모든 게임을 대상으로 하며, 워들 이름을 사용한 스핀오프가 ""악의적으로"" 만들어졌고 ""게임 플레이가 정확히 복사되었다""고 주장함
     * Reactle 코더 Wackerfuss는 Times 와의 법적 싸움에 참여하고 싶지 않다고 말하면서 삭제함

뉴욕 타임즈의 입장

     * 뉴욕 타임즈는 유사한 단어 게임을 만드는 개인에게 문제가 없지만, 워들 상표권과 저작권 게임 플레이를 침해하지 않는 한도 내에서만 허용한다고 밝힘.
     * 워들의 상표와 저작권 게임 플레이를 보호하기 위해 GitHub 사용자와 그의 코드를 공유한 다른 사람들에게 조치를 취함
     * 워들 클론 프로젝트가 뉴욕 타임즈의 워들 게임과 유사한 저작권 요소를 포함하는 knock-off 버전을 만드는 방법을 지시했기 때문에 수백 개의 웹사이트가 뉴욕 타임즈의 워들 상표와 저작권 게임 플레이를 무단으로 사용하는 knock-off 워들 게임으로 등장

워들의 원조 게임과의 유사성

     * 워들은 1980년대 게임쇼 'Lingo'와의 두드러진 유사성으로 인해 비판을 받기도 함
     * Lingo는 플레이어들이 다섯 글자 단어를 추측하는 게임으로, 정확도에 따라 색이 변하는 그리드가 중심

   몇년 전에 Mahjong Handle이라는 게임을 cwackerfuss/react-wordle을 클론하여 개발했습니다.
   저도 바로 며칠 전에 DMCA takedown 요청 메일을 받아서 깃헙에서 게임의 소스코드를 삭제했습니다 ㅠㅠ
   아마 게임 규칙이 꽤 달라서 법적으로는 문제가 없을 것 같은데... 이것 때문에 DMCA 관련 서류 만들어서 제출하는 과정을 하는게 너무 번거로울 것 같더라구요.
   아직 게임은 플레이하실 수 있으니, 일본 마작에 관심 있으신 분은 한번 플레이해보세요!

   DMCA가 악용되고 있다는 생각이 드네요....

  Hacker News 의견

     * ""게임 플레이""에 저작권을 주장하는 것은 가능한가?
     * 이는 뉴욕 타임즈가 무료 게임 인수에 대한 긍정적인 투자 수익을 얻지 못해 불만을 가지고 있는 것처럼 보이는 무의미한 괴롭힘으로 보인다.
     * Wordle 이름과 5x6 타일 레이아웃, 회색, 노랑, 녹색 색상 구성을 포함한 저작권으로 보호받는 게임 플레이에 대한 소유권을 인용
          + 이는 상표권(Wordle 이름)과 저작권에 관한 것이지만, 특허에 대한 것은 아니다.
          + 실제 이름을 사용하는 경우에는 상표권 침해가 명백하므로 이를 추구하는 것은 이해가 된다.
          + 저작권에 대한 부분은 법률가(저작권 변호사는 아님)의 관점에서 새롭다.
          + 타일 레이아웃과 색상 구성이 저작권법에 어떻게 적용될 수 있는지에 대해 저작권 변호사의 설명이 필요하다.
     * BBC 게임쇼 Only Connect의 일부를 노골적으로 복사한 것처럼 보이는 뉴욕 타임즈의 Connections 게임은?
     * 게임 메커니즘은 저작권으로 보호받을 수 없다(매직 더 개더링의 탭 메커니즘 제외).
          + 뉴욕 타임즈가 저작권 침해로 문제 삼은 프로젝트들은 Wordle이 다루지 않는 다른 언어로 만들어졌고, 다른 이름을 사용했다.
     * 뉴욕 타임즈가 Wordle을 인수할 때 얻은 자산은, 자신들보다 인기 있는 트렌드와 자사 이름을 불가분의 관계로 만드는 것이었다.
          + 이는 전 세계적으로 광고 효과를 내는 것이며, 우리 모두가 뉴욕 타임즈에 대해 생각하고 이야기하는 것이 바로 그 투자 수익이다.
     * 이 문제는 저작권 문제가 아닌 상표권 문제로 보인다.
          + DMCA를 남용하는 것 같으며, 부정확한 DMCA 청구를 하는 기업들이 실제로 처벌받을 수 있는 방법이 더 쉬웠으면 한다.
     * 뉴욕 타임즈에게 QWERTL이라는 게임을 즐기길 바란다.
          + 또는 Redactle이라는, Wordle과 매우 비슷하게 들리는 다른 게임을 즐기길 바란다.
          + 그리드 레이아웃을 가진 Memory Cards Game도 저작권이 있을 것이라고 주장할 수 있을 것이다.
     * 뉴욕 타임즈가 게임 플레이를 복사한 다른 사람들을 추적하는 것이 흥미롭다.
     * 뉴욕 타임즈가 가져갈 수 없는 Wordle 게임을 찾고 있다면, Game Boy용 Wordyl
"
"https://news.hada.io/topic?id=13734","유전 및 식용을 위한 낚시가 심해 상어와 가오리의 탈종화를 촉진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  유전 및 식용을 위한 낚시가 심해 상어와 가오리의 탈종화를 촉진

기사 요약

     * 과학자들의 연구에 따르면, 심해 상어와 가오리의 수가 기름과 고기를 얻기 위한 낚시로 인해 급격히 감소하고 있음.
     * 심해 상어와 가오리는 과잉 어획에 매우 민감한 해양 척추동물 중 하나로, 현재 위협받는 심해 상어의 1/3이 대상이 되고 있으며, 국제 간 간장유 무역을 위해 대상이 되는 종의 절반은 멸종 위기에 처해 있음.
     * 이들의 느린 성장과 번식으로 인해 인구 감소가 쉽게 되돌릴 수 없으며, 관리가 거의 이루어지지 않고 있음.
     * 심해 상어와 가오리는 즉각적인 무역 및 어업 규제가 필요하며, 이를 통해 이 위협받는 대형 동물군의 회복을 촉진하고 불가역적인 탈종을 방지할 수 있음.

GN⁺의 의견

     * 이 연구는 심해 상어와 가오리의 보존에 대한 중요성을 강조하며, 이들의 생존을 위협하는 주된 원인으로 과잉 어획과 국제 무역을 지목함. 이는 해양 생태계의 건강성과 생물 다양성을 유지하는 데 필수적인 종들의 보호를 위한 긴급한 조치가 필요함을 시사함.
     * 연구는 심해 상어와 가오리가 멸종 위기에 처한 이유로 그들의 느린 생식 속도와 낮은 번식률을 들고 있으며, 이는 해양 보호 구역 설정과 같은 보존 전략의 중요성을 강조함. 이러한 전략은 이들 종의 회복을 돕고 장기적인 생존을 보장할 수 있음.
     * 심해 상어와 가오리의 보호를 위해서는 국제적인 무역 규제와 어업 관리가 필요하며, 이는 지속 가능한 해양 자원 이용을 위한 중요한 단계임. 이러한 규제는 멸종 위기에 처한 종들의 불법적인 무역을 방지하고, 해양 생태계의 건강을 유지하는 데 기여할 수 있음.
     * 비판적인 시각에서 볼 때, 이 연구는 심해 상어와 가오리의 보호를 위한 구체적인 실행 계획이나 국제적인 협력 체계에 대한 정보는 제공하지 않고 있음. 실제로 이러한 연구 결과가 정책 결정에 어떻게 반영될지는 불확실함.
     * 해양 보호 구역 설정과 같은 보존 전략은 이미 많은 해양 보호 단체들에 의해 추진되고 있으며, 이 연구는 이러한 전략들이 왜 중요한지에 대한 과학적 근거를 제공함. 그러나 이러한 전략들이 효과적으로 실행되기 위해서는 국제적인 협력과 강력한 법적 규제가 필요함.

        Hacker News 의견

     * 상어 간유가 바이오디젤로 사용된다는 사실에 충격을 받았음. 18세기 고래잡이가 등유를 위해 고래를 사냥한 것과 같은 느낌임. 포브스 기사에서 이를 ""친환경"" 에너지원으로 거의 열광적으로 다루고 있음.
     * Global Fishing Watch의 멋진 활동에 대해 언급함. 이들은 불법 어업 활동을 추적하는 놀라운 일을 하고 있으며, 이제 정책이 현실을 따라잡을 필요가 있음.
     * 어업 외에도 심해에는 다른 위협이 존재함. 고래 사체가 심해의 생물 다양성에 큰 영향을 미친다고 알려져 있으며, 생태계는 서로 밀접하게 연결되어 있어 한 가지 변화가 멀리까지 영향을 미칠 수 있음.
     * 인구 증가가 더 이상 목표가 될 수 없다는 사실을 계속 피할 것인가? 실제로 지구에는 인구가 감소하는 것이 더 좋음. 강제적인 방법을 주장하는 것이 아니라, 피임 수단을 배포하고 여성 교육을 통해 인구를 안정시키는 방법이 있음.
     * 국제 해역은 일종의 '와일드 웨스트'임.
     * 이익을 위해 이 사슬에 연루된 회사 목록을 작성할 필요가 있을지도 모름.
     * 생물권의 미래를 걱정하는 사람들에게 가장 논리적인 다음 단계는 무엇일까? 공장식 축산 고기/산업 어업 제품의 소비를 줄이거나 중단하는 것일까?
     * 비건이 되는 99가지 이유가 있지만, 상어 멸종은 또 다른 하나의 이유임.
     * 인류는 자신의 몸을 먹고 있는 것과 같음.
     * 친척 중 한 명이 '상어 연골' 캡슐을 자랑스럽게 보여줌. 상어가 암에 거의 걸리지 않는다는 생각(사실이 아님)에 기반하여, 이러한 보충제가 암 예방에 도움이 될 수 있다고 설명함. 이것이 터무니없다고 생각함. 같은 논리라면 치타를 갈아서 '제품'을 만들어 대부분의 생물을 뛰어넘을 수 있을 것이고, 전갈을 갈아서 만든 보충제를 섭취하면 적어도 일부 방사선에 대한 저항력을 얻을 수 있을 것임.
"
"https://news.hada.io/topic?id=13784","Ubicloud - 오픈소스, 무료, 포터블 클라우드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ubicloud - 오픈소스, 무료, 포터블 클라우드

     * 베어메탈 위에서 자신만의 주요 IaaS 기능을 직접 제공 가능한 오픈소스
          + AWS Bare Metal, OVH, Hetzner 등에 배포 가능
     * AWS에서 80%의 사용량을 차지하는 10%의 서비스를 직접 구현하는 것을 목표로 함
     * 지원 컴포넌트
          + Elastic Compute: Cloud-Hypervisor 를 VMM으로 사용
          + Virtual Networking: IPsec 터널링, IPv4 & IPv6 듀얼스택, Public/Private 네트워킹 지원
          + Block Storage: Storage Performance Development Toolkit (SPDK)로 가상 블록 저장소 지원. Replication 없음
          + Attribute-Based Access Control (ABAC)
          + Control Plane: Roda 프레임워크. Ruby + Postgres
          + 추가예정: ELB, Simple Storage
     * OpenStack 과의 차이
          + 관리형 서비스로 제공되어, 몇 분 안에 시작할 수 있음. 멀티 테넌시를 위해 설계되었기 때문에 암호화, 가상 네트워킹, 비밀 로테이션 등의 기능이 기본으로 제공
          + 개발자를 대상 함. 이를 통해 빠른 피드백 주기를 확보하고 향후 2년 내에 6개의 주요 서비스를 GA 형태로 제공할 수 있을 것으로 기대
          + 단순한 설계. OpenStack을 사용하면 하이퍼바이저 10개, S3 구현 10개, 블록 스토리지 구현 5개 중에서 선택해야 함. Opinionated 접근 방식을 취할 것

   openstack 설치 진짜 빡세더라구요. 제공해주는 기능이나 충돌만 없으면 대형 머신에 써보고싶네요.

   참조

   이 레포를 보시면 프리티어 퍼블릭 클라우드 목록 확인하실 수 있습니다.

   https://github.com/cloudcommunity/Cloud-Free-Tier-Comparison
"
"https://news.hada.io/topic?id=13748","스님들이 알고 있는 집중력에 관한 지식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스님들이 알고 있는 집중력에 관한 지식

수도사들이 알고 있는 집중력에 대하여

     * 수도사들의 집중력에 관한 책인 How to Focus: A Monastic Guide for an Age of Distraction 의 리뷰.
     * 제이미 크라이너가 번역한 존 카시안의 책으로, 5세기 수도사의 가르침을 담고 있음.
     * 크라이너는 조지아 대학의 역사 교수로, 수도사들이 어떻게 집중력을 유지하고 방해를 이겨내는지 연구함.

사막에 묻다

     * 존 카시안은 젊은 시절 모험을 회상하며 Conferences 를 저술.
     * 친구 게르마누스와 함께 베들레헴의 수도원에 들어가 수도사들로부터 가르침을 받음.
     * 이들은 수도사의 삶을 배우기 위해 나일 델타를 여행하며 사막의 아버지들을 인터뷰함.

항상 움직이는 마음

     * 수도사들은 기술 발전이 없던 시대에도 주의력 문제에 집중.
     * 게르마누스는 기도에 집중하는 것이 어렵다고 호소함.
     * 수도사 세레누스는 마음을 훈련과 명상, 암기, 금식 등을 통해 다스릴 수 있다고 조언함.

생각에 대한 생각

     * 수도사들은 순수한 기도를 통해 전체 마음을 집중하려고 노력함.
     * 그들은 생각에 대해 생각하는 메타인지의 전문가가 됨.
     * 아바 네스토루스는 성서 읽기를 권장하며, 이를 통해 마음을 긍정적인 생각으로 채울 것을 조언함.

마음을 바꾸다

     * 네스토루스는 지속적인 독서가 우리 자신을 변화시키고, 그 과정에서 책에 대한 이해도 깊어진다고 말함.
     * 책은 단순한 정보 전달 수단이 아니라, 생각하는 도구임.
     * 독서를 통한 아이디어와의 상호작용은 우리의 마음을 변화시키고, 우리 자신을 변화시킴.

독서의 목표

     * 카시안과 게르마누스는 아바 모세스에게 수도사 생활의 어려움에 대해 질문함.
     * 모세스는 단기 및 장기 목표에 대해 설명하며, 모든 기술과 학문에는 그것에 특화된 목표가 있다고 말함.
     * 모세스의 논리는 고전을 읽는 것이 가치 있는지에 대한 질문에도 도움이 됨.

GN⁺의 의견

     * 이 기사는 고대 수도사들의 집중력과 현대인의 주의력 문제에 대한 통찰을 제공함으로써, 오랜 시간이 지난 지식이 여전히 현대 사회에 적용 가능하고 유용하다는 것을 보여줌.
     * 수도사들의 고대 지혜가 현대의 집중력 향상 방법과 어떻게 연결될 수 있는지에 대한 예시를 제공함으로써, 역사적 지식과 현대적 적용 사이의 다리를 놓음.
     * 메타인지, 즉 '생각에 대해 생각하기'는 현대의 주의력 연구와 매우 밀접한 관련이 있으며, 이는 개인의 생산성과 정신 건강에 중요한 역할을 함.
     * 독서의 목표에 대한 아바 모세스의 설명은 현대의 목표 설정 이론과 매우 유사하며, 이는 고전적 지식이 현대적 문제 해결에 어떻게 적용될 수 있는지를 보여줌.
     * 이 기사는 고전을 읽는 것이 단순한 지식 습득을 넘어서 개인의 성장과 변화에 기여할 수 있다는 점을 강조함으로써, 독서의 깊은 가치를 인식하게 함.

        Hacker News 의견

     * 집중력과 정신의 배회를 다루는 것에 대해 언급하면서 불교를 언급하지 않은 것에 대한 지적이 있음. 기독교 수도사와 불교 승려의 접근 방식 차이에 대해 언급하며, 기독교는 이중적 세계관을 가지고 적의 유혹을 물리치는 훈련을 하지만, 불교는 선과 악의 대립이 아닌, 배회하는 마음을 비판 없이 부드럽게 교정하는 것으로 봄.
     * 학습에 있어서 ""반복과 죽음""이라는 표현에 대한 비판을 언급하며, 실제 역량은 광범위한 연습으로만 얻어질 수 있다는 연구 결과를 인용함. 연습의 중요성을 부정하는 것은 아이들에게 실제 역량을 얻을 수 있는 기회를 부정하는 것이라고 주장함.
     * 오래된 책의 가치에 대한 기사를 잘 쓰여진 글로 평가하며, 해당 기사 링크를 공유함.
     * 프로그래밍과 같은 어려운 문제를 해결하는 것이 좋은 방법이라고 언급하며, 문제를 해결함으로써 마음을 고정된 궤도에서 움직이게 유지할 수 있다고 함.
     * 기사가 구체적인 집중 기술을 다루지 않았다고 비판하며, ""오컬트"" 책에서 발견되는 집중 기술을 예로 들고, 몇 가지 집중 연습 방법을 제시함. 완벽한 집중이 창의성을 저해하는지에 대한 논의가 여전히 열려 있으며, 집중 연습이 실제 업무에 전이되는지 여부는 불분명하다고 주장함.
     * 기사가 다른 글에 대한 반박으로 설정되어 있으며, 책을 읽지 말아야 한다는 주장에 대한 반증으로 고전 문학을 제시함. 개인적으로는 책 읽기의 가치를 인정하면서도 고전이 반드시 좋은 예가 아니라고 생각함. 책을 읽는 것이 즐겁고 유익하며, 사람들이 좋아하는 책을 찾도록 돕는 것이 중요하다고 주장함.
     * 기사에서 인용된 ""책은 생각을 위한 도구이다""라는 문구를 최고의 인용문으로 평가하며, 책을 읽고 소화하고 적용하는 과정이 우리를 변화시키는 방식에 대해 언급함.
     * 두 개의 댓글이 신고되어 표시되지 않음.
     * 기도에 몰두함으로써 유해한 생각에서 벗어나는 것을 제안하는 것인지에 대한 질문이 있음.
"
"https://news.hada.io/topic?id=13788","Ask HN: 더 인정 받아야 할 저평가된 오픈 소스 프로젝트는?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask HN: 더 인정 받아야 할 저평가된 오픈 소스 프로젝트는?

   해커뉴스에 올라온 질문과 답변들 정리

Bruno

     * Postman의 대안으로, 완전히 로컬에서 동작하며 Git과 쉽게 동기화됨
     * 다른 무료 도구들과 달리 유료 동기화 기능을 제공하지 않고 Git을 통해 작동함
     * JSON 형식을 덤프하는 대신, 차이점을 쉽게 비교할 수 있는 자체 형식을 가짐
     * 기존의 Git 계정과 PR을 사용하여 컬렉션을 공유할 수 있음
     * 통합된 CLI 테스팅 기능을 제공함
     * HTTP 및 GraphQL API는 현재 작동하며, 추후 유료로 GRPC를 판매할 계획임

다양한 오픈소스 프로젝트들

     * atldotnet: C#용 다재다능한 오디오 태깅 라이브러리.
     * LocalSend: 파일을 공유할 수 있는 UI 도구.
     * Thorsten-Voice: 독일어 음성 데이터셋 (예: coqui-tts).
     * LVGL: 경량 다목적 임베디드 그래픽 라이브러리.
     * zincsearch: ElasticSearch와 호환되는 전문 검색 엔진.
     * Obtainium: 오픈소스 안드로이드 앱 업데이터.
     * OCRmyPDF: PDF용 OCR 레이어.
     * FunKey-S: 오픈 하드웨어/소프트웨어 게이밍 핸드헬드 (PCB 및 Buildroot OS 포함).
     * logseq: 개인 정보 관리자 (예: Obsidian과 유사).
     * fq: 이진 형식을 위한 jq.
     * OperationResult: C#용 Rust 스타일 오류 처리.
     * BoofCV: 자바 컴퓨터 비전 라이브러리.

BespokeSynth

     * 모듈러 신디사이저의 개념을 확장하여 모듈러 DAW로 만든 애플리케이션.
     * Ableton이나 FL Studio에서 원하는 방식으로 구현할 수 없었던 MIDI/오디오 워크플로우를 생성하는 데 사용됨.
     * Python을 이용한 라이브코딩 오디오 처리 모듈을 포함함.

Paperless NGX

     * PDF를 정리하는 데 변화를 가져다준 오픈소스 소프트웨어.
     * 보험과 청구서를 관리하는 사용자에게 매우 유용함.
     * Linux에서 Podman을 사용하여 로컬에 빠르게 설정할 수 있는 Bash 스크립트를 유지보수함.

decomp.me

     * 비디오 게임 ROM의 ASM 코드를 입력하면 초안 디컴파일을 제공하는 서비스.
     * 사용자는 왼쪽에서 디컴파일을 편집할 수 있으며, 오른쪽에서는 타겟 ASM과 현재 소스가 컴파일되는 것을 side-by-side로 비교할 수 있음.
     * 약간의 게임화 요소가 있으며, 공유하기 쉽고, 중독성이 있을 수 있음.

pyinfra

     * Python을 사용하여 인프라를 자동화하는 도구.
     * Ansible, Chef 등과 같은 다른 도구들에 비해 잘 설계되어 있으며 더 간단한 대안으로 보임.

xDrip+

     * 다양한 장치 간의 데이터 허브 및 프로세서로 작동하는 비공식 독립적인 안드로이드 앱.
     * 여러 종류의 CGM 및 글루코스 미터와 무선 연결을 지원함.
     * 스마트워치에서 혈당 값과 그래프를 보여주는 시계면을 포함함.

OpenRefine

     * 지저분한 데이터를 다루는 강력한 무료 오픈소스 도구.
     * 데이터를 정리하고, 형식을 변환하며, 웹 서비스 및 외부 데이터로 확장할 수 있음.

Cryptpad, Immich, Nginxproxymanager

     * Cryptpad: e2e 암호화된 구글 문서/스프레드시트/폼과 유사한 서비스.
     * Immich: 공유 옵션이 있는 자체 호스팅 가능한 구글 포토 대체 서비스.
     * Nginxproxymanager: Nginx를 통해 자체 호스팅된 서비스에 대한 인증서 및 프록시를 관리함.

QCAD

     * 집 개선 도면을 만드는 데 사용하는 소프트웨어.
     * 배우기는 어렵지만 매우 유연하고 강력함.

ImHex

     * 리버스 엔지니어, 프로그래머 및 새벽 3시에 작업할 때 망막을 소중히 여기는 사람들을 위한 헥스 에디터

Symphytum

     * 이미지를 지원하는 데스크톱용 소규모 크로스 플랫폼 개인용 GUI 데이터베이스 앱
     * MS Access의 아이디어를 현대적으로 재해석
     * 쇼핑 조사/비교를 하고 결과를 수집하고 싶을 때 주로 사용
     * (안타깝게도) 저장소는 보관되어 있지만 바이너리는 작동

Postgraphile

     * Postgres + graphql
     * 그래프QL의 모든 부정적인 측면을 해결해줌. 또한 성능이 매우 뛰어남. v5 릴리스도 꽤 흥미로운 기술

   꽤 많은 수가 긱뉴스에는 한번 이상씩 올라왔던 거네요 ;)

   Bruno - API 테스팅을 위한 오픈소스 IDE
   Bruno - 빠르고 Git 친화적인 오픈소스 API 클라이언트(Postman 대체제)
   LocalSend - 오픈소스 AirDrop 대체제
   OCRmyPDF - 스캔된 PDF파일에 OCR 텍스트 레이어 추가
   Fq - 바이너리 포맷을 위한 jq
   Bespoke Synth 1.0 - 오픈소스 모듈러 Synthesizer
   Paperless-ngx - 오픈 소스 문서 관리 시스템
   pyinfra - 파이썬 기반의 인프라 자동화 도구
   OpenRefine - 오픈소스 데이터 정제 및 변환 도구
   Immich - 폰에서 직접 업로드되는 사진/비디오 백업 솔루션 오픈소스
   ImHex - 리버스 엔지니어를 위한 Hex Editor
"
"https://news.hada.io/topic?id=13686","5억에 팔렸지만 아무것도 얻지 못한 사건 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     5억에 팔렸지만 아무것도 얻지 못한 사건 (2021)

팬듀얼 창업자들의 손실

     * 팬듀얼(FanDuel)은 2018년 7월 패디 파워 벳페어(Paddy Power Betfair, 현재 Flutter로 알려짐)에 4억 6,500만 달러에 인수됨.
     * 표면적으로는 팬듀얼 창업자와 직원들에게 큰 승리처럼 보이지만, 두 주요 투자자가 강력한 청산 선호권을 가지고 있어 대부분의 창업자와 직원들은 이 거래에서 아무것도 받지 못함.

청산 선호권이란?

     * 청산 선호권은 투자 조건서에서 가장 중요한 조항 중 하나로, 인수 시 누가 먼저 얼마나 지급받을지를 결정함.
     * 투자자들은 상당한 위험을 감수하기 때문에 인수와 같은 청산 이벤트 발생 시 'VIP' 대우를 받아 선불로 지급받기를 기대함.
     * 직원들은 모든 우선주 투자자들이 자신들의 몫을 가져간 후에야 수익을 받을 수 있음.

청산 선호권 조항

     * 청산 선호권에는 두 가지 구성 요소가 있음. 첫 번째는 선호 배수로, 투자자가 투자 금액의 특정 배수를 받는다는 것을 의미함.
     * 두 번째 구성 요소는 참여권으로, 선호 배수 지급 후 추가 수익을 가져갈 수 있는지 여부를 결정함.
     * 아래 간단한 3x3 행렬은 청산 선호권이 어떻게 작동하는지 간략하게 보여줌. 건강한 스타트업은 좌측 하단의 조건을 얻을 수 있으나, 그렇지 못한 스타트업은 우측 상단으로 조건이 기울 가능성이 높음.

팬듀얼 창업자들에게 미친 청산 선호권의 영향

     * 팬듀얼 창업자들이 자금을 모집할 때, 두 주요 투자자는 인수 시 처음 5억 5,900만 달러를 받을 권리를 가진 청산 선호권을 받음.
     * 창업자와 직원들은 인수 금액이 5억 5,900만 달러를 초과할 경우에만 지급받을 수 있었기 때문에, 패디 파워 벳페어의 인수 금액이 4억 6,500만 달러에 불과했기 때문에 아무것도 받지 못함.

창업자들이 거래를 막지 못한 이유

     * 창업자들이 이런 끔찍한 거래를 왜 했는지 의문이 들 수 있음. 현실은 창업자들이 같은 두 주요 투자자에게 드래그 어롱(drag along) 권리를 부여했기 때문에 거래를 막을 수 없었음.
     * 드래그 어롱 권리는 다른 주주들이 이 두 투자자의 결정을 받아들이도록 강제함. 창업자들이 드래그 어롱 권리가 행사되고 자신들이 손해를 보는 것을 막을 수 없다는 통지를 받았을 때의 심정을 상상해보라.

건강한 스타트업 구축의 교훈

     * 모든 창업자는 이 재앙적인 시나리오에서 건강하고 자금 조달이 가능한 스타트업을 구축하는 것의 중요성을 배워야 함.
     * 건강하고 활기찬 스타트업은 자금 조달 시 더 많은 투자자를 끌어들이고, 경쟁은 창업자들에게 더 창업자 친화적인 조건을 협상할 수 있는 지렛대를 제공함.
     * 건강한 스타트업은 더 나은 평가, 조건을 받고, 훨씬 적은 노력으로 자금을 조달함.
     * 건강한 스타트업을 구축하는 것은 훌륭한 실행을 필요로 함. 훌륭한 실행은 올바른 방식으로 수십 가지 작업과 프로세스를 수행하는 것을 포함함.
     * 스타트업 훈련에 대해 자세히 알고 싶다면, 기본 계층에 위치한 '스타트업 지불금을 세 배로 늘리는 7가지 열쇠'를 시작으로 추천함.

GN⁺의 의견

     * 청산 선호권은 스타트업 투자에서 흔히 볼 수 있는 조항이며, 투자자들이 자신들의 투자를 보호하기 위해 사용함. 이는 특히 벤처 캐피탈이나 엔젤 투자자들에게 중요한 조건임.
     * 팬듀얼 사례는 창업자들에게 투자 조건을 신중하게 검토하고 협상하는 것의 중요성을 강조함. 특히 드래그 어롱 권리와 같은 조항은 주주들의 결정권에 큰 영향을 미칠 수 있음.
     * 스타트업이 자금을 조달할 때, 투자자와의 협상 과정에서 법률적 조언을 구하는 것이 중요함. 이는 잠재적으로 불리한 조건으로부터 창업자의 이익을 보호할 수 있음.
     * 스타트업이 건강한 성장을 유지하고, 좋은 평가를 받으며, 유리한 조건으로 자금을 조달하기 위해서는 탁월한 실행력이 필수적임. 이를 위해 스타트업 교육 프로그램과 멘토링이 도움이 될 수 있음.
     * 이 기사는 스타트업 창업자들에게 투자와 관련된 위험을 인식하고, 자금 조달 과정에서 발생할 수 있는 복잡한 문제들을 이해하는 데 도움이 될 수 있음.

        Hacker News 의견

     *

     Lessons Learned: Build a Very Fundable Startup
          + 건강하고 투자 유치가 가능한 스타트업 구축의 중요성: 건강한 스타트업은 투자자 유치 시 더 많은 관심을 받으며, 이는 창업자에게 유리한 조건 협상의 레버리지를 제공함. 건강한 스타트업은 더 나은 평가를 받고, 더 좋은 조건으로 자금을 조달하는 데 덜 애를 먹음.
     * 개인적인 경험: 현재 참여 중인 스타트업은 자본 지출 의무를 이행하지 못하고 있음. 몇 년 전 투자자로부터 상당한 자본을 조달하여 당분간 운영할 수 있었지만, 실적이나 KPI가 없고, 인상적인 기술을 개발했음에도 수익 창출에 실패함. 주요 이해관계자의 완벽주의적 태도가 문제 중 하나임. 현재 자금 조달 라운드는 어둡게 보이며, 투자자들에게 불리한 조건의 투자 제안이 나올 것으로 예상됨. 개발자들을 동기 부여하기 위해 주식 옵션을 제공하고 있으며, 밀린 급여와 미래의 지급금을 주식으로 전환해달라고 요청받음. 회사의 재무 상태나 다른 투자자들의 조건에 대한 투명성을 요구했을 때, 대답은 항상 '아니오'였음. 이는 사실상 20만 달러 이상의 투자를 회사에 하라는 요청과 같으며, 재무 상황이나 다른 투자자들에게 제공된 조건에 대한 통찰 없이
       보통주를 받고 급여를 포기하라는 것임. 이전에 스타트업에 유리한 조건으로 일했던 것을 고려하면 현재 상황은 더욱 실망스러움. 전반적으로 독성이 있는 환경이며, 미래는 밝지 않음. 스타트업의 아름다운 면과 끔찍한 면을 모두 경험한 바 있으며, 끔찍한 면이 더 자주 나타남.
     * 벤처캐피탈리스트(VC)의 관점에서 본 청산 선호권(liquidation preference):
          +
              1. 1배수 청산 선호권은 공정하며 투자자 보호를 목적으로 함: 청산 선호권이 없으면, 창업자가 투자금을 받은 다음날 회사를 할인된 가격에 팔아 투자자의 돈을 차지하는 등 부정한 행위로부터 투자자를 보호함.
          +
              2. >1배수 청산 선호권은 때로는 창업자의 잘못이거나 때로는 VC의 잘못임: 창업자가 높은 평가 가치를 위해 불리한 조건을 받아들이는 경우도 있음. 이는 회사 가치와 투자 조건 사이의 격차를 메우는 합리적인 VC의 제안이 될 수 있음.
          +
              3. 일반적으로 양측은 좋은 변호사를 보유하고 있으므로, 청산 선호권 결정은 의식적으로 이루어짐: 자금 조달 시 좋은 변호사와 함께 일할 것을 권장함.
     * 옵션에 대한 실망: 친구가 옵션을 포기하고, 추가 급여를 옵션보다 선호함. 스타트업에서 성공한 사례는 VC와 창업자를 제외하고는 그리 많지 않은 것 같음. 옵션으로 얻은 이익이 낮은 급여로 인한 손실을 상쇄할 만큼 가치가 있는지 의문임.
     *

     FanDuel 창업자들의 자금 조달 계약
          + FanDuel 창업자들의 자금 조달 계약 문제: 두 주요 투자자에게 청산 선호권을 부여하여, 인수 가격이 5억 5,900만 달러를 초과할 경우에만 창업자와 직원들에게 지급됨. 또한, 이 두 투자자에게 부여된 'drag along rights'로 인해 다른 주주들은 이들의 결정을 따라야 함. 계약 내용을 잘 이해하고, 주의 깊게 검토할 필요가 있음.
     * 청산 선호권에 대한 반응: 2015년, 창업자 친화적인 조건을 거부하라는 Mark Suster의 제안에 대한 반응으로, 초기 단계의 창업자들이 창업자 친화적인 조건을 거부할 곳이 없으며, 심지어 수익과 실적이 있는 시드 단계 회사들도 투자자들에게 더 많은 권한을 주고 있음을 지적함.
     * 청산 선호권의 변화: 최근에는 청산 선호권이 사라졌으나, 창업자들에게는 여전히 일정한 영향력이 있음. 거래에 대한 인센티브가 없다면 창업자들은 거래를 진행하지 않을 수도 있음.
     * FanDuel 창업자들의 판매 수익 부재: FanDuel 창업자들이 Paddy Power Betfair에 회사를 팔았을 때 현금을 받지 못한 사건에 대한 링크 제공.
     * 펀딩 라운드와 평가에 대한 궁금증: FanDuel이 조달한 자금과 판매 가격에 대한 정보를 찾기 위해 검색을 시도함. 총 4억 1,600만 달러 이상을 조달하고 4억 6,500만 달러에 판매한 것으로 나타남. 이는 실패한 사례로, 창업자들이 많은 수익을 기대하기 어려운 상황임.
     * 자금 조달과 판매의 관계: 만약 회사를 1조 달러에 팔았지만, 9990억 달러를 자금 조달로 충당했다면, 수익을 기대하기 어려움. 자금 조달은 일반적으로 이자를 요구하며, 이 기사의 제목은 분노를 유발하려는 의도가 있는 것으로 보임.
"
"https://news.hada.io/topic?id=13780","Meta의 GenAI 인프라 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Meta의 GenAI 인프라 구축

     * 메타는 AI의 미래를 위한 주요 투자의 일환으로, 24576개의 GPU 클러스터 두 개를 발표함
          + 하드웨어, 네트워크, 스토리지, 디자인, 성능 및 소프트웨어에 대한 세부 정보를 공유
          + 이 클러스터 디자인은 Llama 3 트레이닝에 사용됨
     * 메타는 오픈 컴퓨팅과 오픈 소스에 전념
          + Grand Teton, OpenRack 및 PyTorch를 기반으로 이런 클러스터를 구축하고 업계 전반에 걸쳐 개방형 혁신을 지속적으로 추진
     * 이번 발표는 야심찬 인프라 로드맵의 한 단계
          + 2024년 말까지 거의 600,000개의 H100에 해당하는 컴퓨팅 성능을 갖춘 포트폴리오의 일부로 350,000개의 NVIDIA H100 GPU를 포함하는 인프라 구축을 계속해서 확장하는 것을 목표로 함

메타의 대규모 AI 클러스터에 대한 통찰

     * 메타의 장기적인 비전은 모든 사람이 혜택을 받을 수 있도록 개방적이고 책임감 있게 구축된 인공 일반 지능(AGI)을 만드는 것임
     * AGI를 향한 진전은 새로운 제품, 앱의 새로운 AI 기능, 그리고 새로운 AI 중심 컴퓨팅 장치를 만들어냄
     * 메타는 AI 인프라 구축의 오랜 역사를 가지고 있으며, 2022년에 16,000개의 NVIDIA A100 GPU를 특징으로 하는 AI 연구용 슈퍼클러스터(RSC)에 대한 세부 정보를 처음 공유했음

내부 구조

     * 새로운 AI 클러스터는 RSC에서 얻은 성공과 교훈을 바탕으로 구축됨
     * 연구자와 개발자의 경험과 생산성에 중점을 두고, 고성능 네트워크 패브릭의 효율성과 주요 스토리지 결정을 통해 더 크고 복잡한 모델을 지원함

네트워크

     * 메타는 하루에 수십조 번의 AI 모델 실행을 처리함
     * 대규모 서비스를 제공하기 위해 고도로 발전된 유연한 인프라가 필요함
     * 메타는 자체 하드웨어, 소프트웨어 및 네트워크 패브릭을 맞춤 설계하여 AI 연구자들의 경험을 최적화하고 데이터 센터의 효율적인 운영을 보장함

컴퓨팅

     * 두 클러스터는 메타가 내부적으로 설계한 오픈 GPU 하드웨어 플랫폼인 Grand Teton을 사용하여 구축됨
     * Grand Teton은 전력, 제어, 컴퓨트 및 패브릭 인터페이스를 하나의 섀시에 통합하여 전반적인 성능, 신호 무결성 및 열 성능을 향상시킴

스토리지

     * AI 트레이닝에 있어 스토리지는 중요한 역할을 하지만 가장 적게 언급되는 측면 중 하나임
     * 메타의 'Tectonic' 분산 스토리지 솔루션의 버전을 플래시 미디어에 최적화
          + 자체 개발한 FUSE(Linux Filesystem in Userspace) API를 통해 AI 클러스터의 데이터 및 체크포인팅 요구 사항을 해결함
          + 수천 개의 GPU가 동기화된 방식으로 체크포인트를 저장하고 로드할 수 있으며 데이터 로딩에 필요한 유연하고 처리량이 높은 엑사바이트 규모의 스토리지를 제공
     * Hammerspace 와 협력하여 병렬 네트워크 파일 시스템(NFS) 배포를 공동 개발

성능

     * 대규모 AI 클러스터를 구축할 때 성능과 사용 편의성을 동시에 극대화하는 것이 중요한 원칙임
     * AI 시스템의 한계를 뛰어넘으면서 설계 확장 능력을 테스트할 수 있는 가장 좋은 방법은 단순히 시스템을 구축하고, 최적화하고, 실제로 테스트하는 것
     * 메타는 시스템을 구축하고 최적화하며 실제로 테스트하여 설계의 확장 가능성을 테스트함
     * AI 워크로드를 지원하는 기본 AI 프레임워크인 PyTorch를 계속 발전시켜 수십, 심지어는 수십만 건의 GPU 교육에 대비할 수 있도록 하고 있음

개방형 AI 혁신에 대한 헌신

     * 메타는 AI 소프트웨어와 하드웨어에서의 오픈 혁신에 대한 헌신을 유지함
     * OCP의 창립 멤버로서 개방형 하드웨어 혁신을 계속 지원하고 있으며 OCP 커뮤니티에 Grand Teton 및 Open Rack과 같은 디자인을 제공
     * 또한 업계의 많은 부분을 지원하는 AI 소프트웨어 프레임워크인 PyTorch 의 최대이자 주요 기여자
     * 오픈 소스 하드웨어와 소프트웨어는 대규모 문제를 해결하는 데 도움이 되는 중요한 도구로 여겨짐

메타의 AI 인프라의 미래

     * 이 두 AI 트레이닝 클러스터 디자인은 AI의 미래를 위한 더 큰 로드맵의 일부임
     * 메타는 2024년 말까지 600,000개의 H100에 해당하는 컴퓨팅 성능을 갖춘 포트폴리오의 일부로 350,000개의 NVIDIA H100을 포함하는 인프라를 계속해서 확장할 계획

GN⁺의 의견

     * 메타가 발표한 24k GPU 클러스터는 AI 연구와 개발에 있어 중요한 발전을 의미하며, 특히 대규모 AI 모델 트레이닝에 필요한 강력한 컴퓨팅 리소스를 제공함
     * 이러한 인프라는 AI 모델의 복잡성과 크기가 계속해서 증가함에 따라 연구자들이 더욱 혁신적인 AI 솔루션을 개발할 수 있는 기반을 마련함
     * 메타의 오픈 소스 및 오픈 컴퓨트에 대한 헌신은 산업 전반에 걸쳐 혁신을 촉진하고, 다른 조직들이 이러한 기술을 활용하여 자체 AI 솔루션을 개발하는 데 도움이 될 수 있음
     * 그러나 이러한 대규모 클러스터는 막대한 에너지 소비와 관련된 환경적 영향을 고려해야 하며, 이는 지속 가능성에 대한 중요한 고려 사항이 될 수 있음
     * 메타의 이러한 발표는 AI 기술의 미래에 대한 흥미로운 통찰을 제공하며, AI의 발전이 사회와 산업에 미칠 영향에 대해 더 깊이 생각해 볼 기회를 제공함

        Hacker News 의견

     * float8 언급 및 FLOPs 증가
          + float8이 언급되었으며, 이로 인해 FLOPs가 2배 증가함.
          + xformers는 이제 2:4 희소성을 지원하여 FLOPs가 추가로 2배 증가할 수 있음.
          + Llama3는 MLP에 float8과 2:4 희소성을 사용하여 H100 float16 FLOPs의 4배를 사용할 수도 있음.
          + PyTorch는 fp8을 실험적으로 지원하고 있으나, 정밀도 문제로 인해 float8에서 attention을 수행하기는 여전히 복잡함.
          + 아마도 attention은 float16으로, RoPE/layernorms는 float16/float32로, 그 외 모든 것은 float8로 처리될 수 있음.
     * 닷컴 시대와 AI 시대의 비교
          + 닷컴 시대를 경험한 한 사람은 AI 시대가 모델 훈련에 드는 막대한 자본 비용 때문에 다소 낙담함을 느낌.
          + 닷컴 시대 초반에는 상대적으로 적은 인프라 비용으로 누구나 전자상거래 사이트를 시작할 수 있었음.
          + 현재는 메타, 구글, 마이크로소프트, 오픈AI 등 대규모 기업만이 AI 모델을 구축할 수 있는 것처럼 보임.
     * 컴퓨팅 파워와 엔지니어링 시간의 관계
          + 페이스북이 컴퓨팅 파워를 10배 늘릴 수 있다면, 전체 스택을 재설계해야 할지, 100배는 어떨지에 대한 관심.
          + 각 재설계가 단순한 변경인지, 아니면 훨씬 더 복잡한 작업인지에 대한 의문.
          + 클러스터 내부에 대한 기술적 이해가 표면적인 수준이라, 관련 경험이 있는 사람의 의견에 대한 호기심.
     * 파이프라인 최적화 작업에 대한 관심
          + 파이프라인 최적화 작업에 참여하고 싶어하는 사람이 어떻게 시작해야 하는지에 대한 질문.
          + 머신러닝 과학자가 C/C++ 및 인프라 지식을 가지고 필요할 때 시스템으로 '내려가는' 것인지, 아니면 CUDA/SIMD 전문가가 '올라와서' 머신러닝 작업을 하는 것인지에 대한 궁금증.
     * 메타의 엔지니어링 능력
          + 메타는 부정적인 압력에도 불구하고 엔지니어링 분야에서 강력한 성과를 보임.
          + 메타가 이러한 엔지니어링 능력을 어떻게 수익화할 계획인지에 대한 의문.
     * 엔지니어링 및 인프라에 대한 역사적 관점
          + DLRM 논문과 페이스북의 초기 디스어그리게이티드 랙과 SDN에 대한 언급.
          + 2018년에 이미 SSD와 DRAM을 랙의 다른 곳에 배치하면서 큰 신경망을 사용하여 추천 시스템과 순위 매기기를 수행함.
          + 클릭 예측 모델에 대한 언급과 인텔 AVX-2를 사용한 HOGWILD 훈련 방법에 대한 놀라움.
          + 메타가 인프라 설계와 SKU 설계에 있어서 여전히 최고의 역량을 가지고 있음을 강조.
     * 메타의 AI 워크로드 경쟁 가능성
          + 메타가 AWS, MSFT, GOOG와 AI 워크로드 분야에서 경쟁할 가능성에 대한 궁금증.
     * H100 GPU의 비용
          + 메타가 H100 GPU에 지불하는 금액에 대한 추정.
          + 350,000개의 NVIDIA H100을 $10k에 구매한다면 총 비용은 $3.5b가 될 것임.
     * 메타의 AI 혁신에 대한 개방적인 태도
          + 메타가 AI 혁신에 대한 개방적인 태도를 보이고 있음을 인식함.
     * 메타의 장기적인 비전과 AGI
          + 메타의 장기적인 비전은 인공 일반 지능(AGI)을 구축하는 것임.
"
"https://news.hada.io/topic?id=13764","알제논을 위한 꽃들알제논을 위한 꽃들 (1965) [PDF]
"
"https://news.hada.io/topic?id=13705","리더십, 마약과 같은 중독성을 지닌 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         리더십, 마약과 같은 중독성을 지닌 현상

리더십, 그 강력한 마약

     * 리더십과 관리는 혼동되기 쉬운 개념이지만, 본질적으로 다른 것임.
     * 관리는 일상적이고 매력적이지 않지만 필요한 업무로, 효율적인 반복 작업으로 조직을 유지함.
     * 리더십은 흥미롭고 도전적인 역할로, 단순한 관리를 넘어서 사람들이 최선의 자신이 될 수 있도록 격려하는 능력을 말함.

리더십에 대한 생각

     * 좋은 리더는 이론이 아닌 실제 경험을 통해 나타남.
     * 리더십은 특정 직책에 국한되지 않고, 상황에 따라 자연스럽게 팀원 간에 흐름을 가져야 함.
     * 리더십은 사람들이 자신의 최고를 발휘할 수 있도록 격려하는 능력을 가진 사람에 의해 수행됨.

리더십의 자만

     * 리더십을 자칭하는 많은 사람들이 실제로는 역량이 부족하거나, 자신들의 분야에 대한 이해가 부족함.
     * 리더십이 없는 기술은 단지 인기나 개인적인 영향력을 추구하는 것에 불과함.
     * 리더십을 자칭하는 사람들은 종종 자신들의 역할에 대한 과대평가와 자기중심적인 태도를 보임.

리더십과 자아

     * 리더십이라는 칭호는 사람들에게 상태와 도파민을 주입하는 효과가 있으며, 이는 종종 악용됨.
     * 리더십의 칭호는 개인의 발전을 저해하고, 자아를 부풀리는 결과를 가져올 수 있음.
     * 리더십에 대한 과도한 칭찬은 건강하지 못한 존경을 유발하며, 이는 개인에게 부정적인 영향을 미침.

더 나은 관리와 리더십

     * 효과적인 관리자는 팀을 돌보고, 필요한 도구를 제공하며, 업무를 잘 처리함.
     * 진정한 리더는 정직하고, 팀원들과의 신뢰를 쌓으며, 조직 내에서 긍정적인 변화를 이끌어냄.
     * 리더십은 자연스럽게 발생해야 하며, 강제로 리더십 역할을 맡는 것은 바람직하지 않음.

관련 도서 및 자료

     * ""High Output Management""은 관리에 대한 실질적인 지침을 제공하는 책임.
     * ""Managing Humans""는 조직 내 정치와 소문을 관리하는 방법에 대해 설명함.
     * Pivotal Software의 운영 모델과 리더십에 대한 통찰력을 제공하는 자료와 팟캐스트가 유익함.

GN⁺의 의견

     * 리더십과 관리의 차이점을 이해하는 것은 조직 내에서 효과적인 역할을 수행하기 위해 중요함.
     * 리더십은 타이틀이나 직책에 의해 정의되는 것이 아니라, 상황에 따라 유연하게 변화하고 적응하는 능력을 의미함.
     * 리더십이 부여하는 권위와 존경은 때때로 개인의 자아를 부풀리고, 잘못된 방향으로 이끌 수 있으므로 주의가 필요함.
     * 리더십 역할을 맡기 전에, 개인이 조직 내에서 어떻게 긍정적인 영향을 미칠 수 있는지에 대한 성찰이 필요함.
     * Pivotal Software와 같은 조직의 리더십 모델을 연구하고 이해하는 것은 다른 조직에서도 유용한 리더십 전략을 개발하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 연구 리더십을 주제로 한 세일짜리 워크숍에 참여한 경험을 공유한 댓글이 있음. 이 워크숍은 연구 논문을 쓴 적이 없는 사람들이 주최하고 리더십 코치가 이끌었음. 댓글 작성자는 리더십이 의미 없는 유행어가 되었다고 결론 내림. 또한, 의미 없는 관리 업무에 중독되는 사람들이 중요한 일을 하는 이들 위에 자신을 강요하려 한다고 지적함. 이는 폭력의 한 형태이며, 자신이 무가치하다고 느끼는 사람들의 생존 본능이라고 함.
     * LinkedIn에서 자신을 '리더'라고 칭하는 사람들에 대한 댓글이 있음. 이는 진정한 리더가 아닐 가능성이 높다는 의견을 담고 있음. 진정한 리더십은 자기 자신을 '왕'이라고 주장하는 것보다 덜 드라마틱하지만, 그 의미는 여전히 유효함.
     * 한 댓글은 작성자가 에너지 뱀파이어처럼 느껴진다고 언급함. 작성자의 주장에는 동의하지만, 그들의 표현 방식과 글쓰기 스타일이 공감을 어렵게 만든다고 함.
     * 또 다른 댓글에서는 이 블로그가 미카엘 오처치의 새 블로그일 것이라는 이론을 제시함. 유머러스한 글이지만, 블로그의 전체 메시지는 모든 문제가 다른 사람들의 잘못이라는 것이라고 비판함. 그러나 실제로 열정적이고 독립적인 사고를 가진 사람들을 원하는 회사들이 존재한다고 함.
     * 리더십은 기술 없이는 단지 인격 숭배 집단을 이끄는 것에 불과하다는 의견이 있음. 이는 직장뿐만 아니라 다른 분야에서도 사실임.
     * 한 호주인이 작성한 것 같다고 느낀 댓글이 있음. 진정한 리더는 권위 있는 직책에 있지 않아도 앞을 내다보고 다른 사람들이 무엇을 해야 할지 모를 때 답을 제시하는 사람들임. 리더는 때때로 자신감이 필요하며, 이는 불확실성을 다루는 데 필요함.
     * '고용주의 재량에 따른 고용'이 있는 곳에서는 리더십을 찾기 어렵다는 의견이 있음. 리더십의 많은 부분은 다양한 성격을 가진 사람들을 이끌고 그들의 목표를 조정하는 방법을 배우는 것임.
     * 관리직은 숨을 수 있는 최적의 장소라는 댓글이 있음. 관리자는 더 많은 급여를 받고 자신의 시간을 자유롭게 배치할 수 있는 자율성을 가짐. 하지만 관리자의 무능함을 개발자의 무능함처럼 쉽게 지적하기 어렵기 때문에, 관리자는 종종 변명을 찾아야 함. 리더십은 이런 상황에서 중요한 역할을 함.
"
"https://news.hada.io/topic?id=13694","이스라엘-가자 전쟁에서 발생한 언론인 피해 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       이스라엘-가자 전쟁에서 발생한 언론인 피해 사례

기자와 미디어 종사자 사망, 실종, 부상 보고

     * 이스라엘-가자 전쟁은 언론인들에게 막대한 피해를 입힘. 1992년 CPJ가 데이터 수집을 시작한 이래 가장 치명적인 시기.
     * 2024년 3월 7일 기준, CPJ의 예비 조사에 따르면 95명의 기자와 미디어 종사자가 사망. 이스라엘 방위군(IDF)은 기자들의 안전을 보장할 수 없다고 발표.
     * 가자 지구에서 기자들은 이스라엘의 지상 공격, 파괴적인 공습, 통신 장애, 공급 부족, 전력 중단 등으로 인해 높은 위험에 직면.

사망한 기자와 미디어 종사자 명단

     * 2024년 3월 5일, 무함마드 살라마는 가족과 함께 이스라엘 공습으로 사망.
     * 2024년 2월 23일, 프리랜서 사진기자 모하메드 야기는 가족 36명과 함께 사망.
     * 2024년 2월 15일, 지역 코란 라디오 채널 감독 자이드 아부 자예드 사망.
     * 2024년 2월 12일, 기자 알라 알-함스는 가족 10명과 함께 사망한 후 부상으로 사망.
     * 2024년 2월 11일, 기자 야세르 맘두 엘-파디는 이스라엘 저격수에 의해 사망.
     * 2024년 2월 8일, 팔레스타인 TV 감독 나페즈 압델 자와드는 아들과 함께 사망.
     * 2024년 2월 6일, 기자 리즈크 알-가라블리는 가족의 집에서 사망.
     * 2024년 1월 29일, 기자 모하메드 아탈라는 가족과 함께 사망.
     * 2024년 1월 25일, 기자 이야드 엘-루와는 자녀 4명과 함께 사망.
     * 2024년 1월 14일, 기자 야잔 알-주웨이디는 형제, 사촌과 함께 사망.
     * 2024년 1월 11일, 기자 모하메드 자말 소비 알-탈라티니는 가족과 함께 사망.
     * 2024년 1월 10일, 기자 아흐메드 베디르는 병원 근처에서 사망.
     * 2024년 1월 9일, 기자 헤바 알-아바들라는 딸, 가족과 함께 사망.
     * 2024년 1월 8일, 기자 압달라 이야드 브레이스는 가족과 함께 사망.
     * 2024년 1월 7일, 기자 함자 알 다흐두와 무스타파 투라야는 이스라엘 드론 공격으로 사망.
     * 2024년 1월 5일, 기자 악람 엘샤피는 이스라엘 총격으로 부상 후 사망.
     * 2023년 12월 29일, 기자 자브르 아부 하드루스는 가족 7명과 함께 사망.
     * 2023년 12월 28일, 기자 아흐메드 카이레딘은 가족 12명과 함께 사망.
     * 2023년 12월 24일, 기자 모하메드 알-이프는 가족과 함께 사망.
     * 2023년 12월 23일, 기자 모하메드 나세르 아부 휘디는 현장 취재 중 사망.
     * 2023년 12월 22일, 미디어 종사자 모하메드 칼리페는 가족과 함께 사망.
     * 2023년 12월 19일, 프리랜서 기자 아델 조롭은 가족 25명과 함께 사망.
     * 2023년 12월 18일, 미디어 종사자 압달라 알완은 가족과 함께 사망.
     * 2023년 12월 17일, 기자 아셈 카말 무사는 가족과 함께 사망.
     * 2023년 12월 15일, 카메라 오퍼레이터 사메르 아부 다카는 드론 공격으로 사망.
     * 2023년 12월 9일, 프리랜서 기자 두아 자부르는 가족과 함께 사망.
     * 2023년 12월 3일, 미디어 종사자 하산 파라잘라와 기자 샤이마 엘-가자르는 사망.
     * 2023년 12월 1일, 카메라맨 압둘라 다르위시와 몬타세르 알-사와프는 사망.
     * 2023년 11월 24일, 기자 모스타파 바키르는 사망.
     * 2023년 11월 23일, 프리랜서 사진기자 모하메드 무인 아야시는 가족과 함께 사망.
     * 2023년 11월 22일, 사운드 엔지니어 아셈 알-바르시는 저격으로 사망.
     * 2023년 11월 21일, 기자 자말 모하메드 하니예와 레바논 기자 파라 오마르는 사망.
     * 2023년 11월 20일, 프리랜서 기자 아야트 카두라는 가족과 함께 사망.
     * 2023년 11월 19일, 미디어 종사자 빌랄 자달라는 자동차 안에서 사망.
     * 2023년 11월 18일, 미디어 종사자 압델할림 아와드와 사리 만수르는 사망.
     * 2023년 11월 13일, 기자 아흐메드 파티마와 야쿱 알-바르시는 사망.
     * 2023년 11월 10일, 사진기자 아흐메드 알-카라는 사망.

GN⁺의 의견

     * 이 기사는 전쟁 상황에서 기자들이 겪는 위험과 희생을 강조함으로써 전쟁 보도의 중요성과 언론인 보호의 필요성을 부각시킴.
     * 전쟁과 같은 위기 상황에서 기자들이 단순한 민간인이 아니라 중요한 역할을 수행하는 존재임을 인식하는 것이 중요함.
     * 이러한 상황에서 기자들의 안전을 위한 국제적인 노력과 규약이 더욱 강화되어야 함을 시사함.
     * 비판적으로 볼 때, 이 기사는 전쟁의 참혹함과 언론의 자유에 대한 위협을 드러내지만, 전쟁의 근본적인 원인이나 해결책에 대해서는 다루지 않음.
     * 이와 유사한 상황을 다루는 다른 프로젝트나 조직으로는 국경 없는 기자단(Reporters Without Borders)이나 국제 언론인 보호 위원회(Committee to Protect Journalists) 등이 있으며, 이들은 기자들의 안전과 언론의 자유를 위해 활동하고 있음.

        Hacker News 의견

     * 기술 분야가 이 상황과 무관하지 않으며, 미국 군 소프트웨어 엔지니어가 최근 자신을 불태워 항의한 사건이 있었음을 인정하고, 이 문제를 함께 다루어야 함을 강조함.
     * 가자 지구의 기자들 중 약 10%가 사망했는데, 이는 의료 종사자의 2.5%에 비해 높은 비율이며, 이는 기자들이 전투가 일어나는 곳에 더 가까이 있을 가능성이 높기 때문일 수 있음을 지적함.
     * 이스라엘이 서방의 주의를 우크라이나에서 돌리고 있으며, 이는 하마스가 원하는 불안정한 환경을 조성하는 것으로, 이스라엘을 따라 예멘을 폭격하는 상황에 이르렀고, 중국과 같은 다른 국가들은 계속 성장하고 있음을 비판함.
     * 이번 공격이 터키와 사우디아라비아와의 관계 정상화 직전에 일어났다는 점이 의심스러운 증거로 여겨짐.
     * 이 상황을 전쟁으로 부르는 것이 적절한지에 대한 의문을 제기하며, 국가와 테러리스트 그룹 간의 싸움으로 보이며 민간인 피해가 큼을 언급함.
     * 미국의 동맹국이라 할지라도 전쟁 범죄나 집단 학살을 저지른다면, 그들은 계속해서 미국의 동맹이 될 것임을 지적함.
     * 해커뉴스에 이 주제에 대한 댓글을 달고 있는 계정들의 연령과 입장에 대한 그래프를 보고 싶다는 의견을 표현함.
     * 이 주제가 해커뉴스에 부적절하며, 사이트가 더 이상 주제에서 벗어나지 않기를 바람.
     * 이 전쟁에 대한 논의가 얼마나 나쁜지에 대해 말하고 싶지 않으며, 이는 해커뉴스에 부적절한 내용임을 강조함.
     * 기사를 실제로 읽어보면, 페가수스 소프트웨어의 존재와 기자들을 추적하는 데 사용되었다는 일반적인 언급이 있지만, 특정한 팔레스타인인이나 기자가 페가수스를 통해 추적당했다는 구체적인 예시는 없으며, 추적 데이터가 타겟팅에 사용된다는 증거도 없음을 지적함.
     * 이스라엘이 직접적인 충돌 외에도 잘 알려진 기자들을 살해하고 거짓말을 했다는 역사가 있으며, 기자 보호 위원회의 보고서를 통해 이스라엘 군에 의해 사망한 20명의 기자들에 대한 정보를 제공함.
"
"https://news.hada.io/topic?id=13707","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   토요일에는 오랜만에 친구와 함께 칵테일바에 가서 가볍게 한잔하고
   일요일에는 CS에 대해 공부할거 같네요..아직도 기초가 부실해서..ㅠㅠ
   그리고 시간이 되면 flask로 가볍게 원격 매크로? 만들어서 도커 이미지로 해볼까 해요ㅎㅎ
   로컬로만 열어서 노트북으로 가서 키보드 안누르고 데스크탑에서 다 끝내고 싶은 욕망....

   ㅅ트레스 받아서 과음 예정입니다!! 안주를 뭘 먹을지 고민이네요! ㅎㅎ
"
"https://news.hada.io/topic?id=13682","OpenAI와 일론 머스크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             OpenAI와 일론 머스크

     * OpenAI의 사명은 모든 인류에게 AGI(인공 일반 지능)의 혜택을 보장하는 것임
     * OpenAI는 사명 달성을 위해 배운 것과 일론 머스크와의 관계에 대한 사실을 공유하고자 함
     * 최근 소송을 제기한 일론 머스크의 모든 주장을 기각할 것임

AGI 구축에 필요한 자원이 상상 이상이었음

     * OpenAI 설립 초기에는 1억 달러를 모금할 계획이었으나, 일론 머스크는 10억 달러 이상의 자금이 필요하다고 제안함
     * AGI 구축에 필요한 계산 능력이 상상 이상으로 많다는 것을 깨달음
     * 비영리 단체로서 필요한 자금을 모금하는 것이 어렵다는 것을 인식하고, 수익을 창출할 수 있는 법인 설립을 고려함

OpenAI와 일론 머스크의 분리

     * 일론 머스크는 OpenAI를 테슬라와 합병하거나 완전한 통제를 원했으나, OpenAI는 이에 동의하지 않음
     * 일론 머스크는 구글/딥마인드에 대항할 경쟁자가 필요하다고 언급하며 OpenAI를 떠남
          + 그는 성공 확률이 0이며 Tesla 내에 AGI 경쟁자를 만들 계획이라고 말하면서 OpenAI를 떠나기로 결정함
          + 또한 그는 ""우리가 우리 자신의 길을 찾는 것을 지지하겠다""고 말함
     * OpenAI는 일론 머스크 없이도 사명을 향한 의미 있는 진전을 이루었으며, 그가 소송을 제기한 것에 대해 유감을 표함

혜택을 주는 도구 구축

     * OpenAI는 사람들의 일상 생활을 향상시키는 방식으로 기술을 널리 사용할 수 있도록 함
     * 알바니아, 케냐, 인도, 아이슬란드 등 다양한 국가와 기관에서 OpenAI의 도구를 활용하여 사회적 혜택을 얻고 있음
     * OpenAI는 AGI를 오픈소스화하는 것이 사명과 반대되지 않음을 이해하고 있음
     * Ilyark Elon 에게 ""AI 구축에 가까워질수록 개방성을 줄이는 것이 합리적일 것입니다. OpenAI의 Open은 AI가 구축된 후 모든 사람이 그 과실의 혜택을 누려야 한다는 뜻이지만, 과학을 공유하지 않아도 괜찮습니다.""라고 말하자 Elon은 ""Yup"" 이라고 대답했음
     * 우리가 깊이 존경해왔던 사람, 우리가 더 높은 목표를 세우도록 영감을 주었다가 실패할 것이라고 말하고 경쟁사를 창업한 후, 우리가 그 없이 OpenAI의 사명을 향해 의미 있는 진전을 이루기 시작했을 때 우리를 고소했던 사람과 이런 일이 발생하게 되어 슬픔
     * 우리는 우리의 사명을 발전시키는 데 집중하고 있으며 아직 갈 길은 멀었음. 우리는 계속해서 도구를 개선하고 발전시키면서 이러한 시스템을 배포하여 모든 개인에게 힘을 실어줄 수 있게 되어 기쁨

   Closed AI 의 위험성 때문에 설립된 비영리 단체인 OpenAI는 탐욕에 가득찬 자들로 인해 결국 Closed AI가 됨. 영리 단체가 되는 것을 반대한 내부 인력들은 나와서 Claude AI를 설립함.

        Hacker News 의견

     * 이 게시물은 OpenAI를 이타적인 조직으로 묘사하려는 PR 스턴트로, 실제로는 논란에 기름을 붓는 행위임.

     OpenAI의 'Open'은 AI가 완성된 후 모두가 그 혜택을 누려야 한다는 의미지만, 과학을 공유하지 않아도 된다는 입장을 표명함.
     * OpenAI가 자신들의 소스 코드를 숨김으로써 우리를 보호하려 한다는 주장은, 기업의 자선적 이미지에 의존하는 것으로 보임.

     OpenAI가 이익을 위해 비영리 구조에서 벗어나려 했을 때, Elon Musk는 Tesla와의 합병 또는 완전한 통제권을 원했다는 내부 커뮤니케이션을 인용함.
     * OpenAI가 이익 창출을 위해 본래의 사명을 저버렸다는 비판에 대해, 그들이 필요성을 잘 설명했지만, 그들의 주장이 사명 배신을 반박하지는 못함.

     AGI를 구축하는 데 막대한 컴퓨팅 파워와 비용이 들 것이며, 이익을 내지 않고서는 전문가들의 급여와 모델 훈련을 위한 하드웨어를 감당할 수 없다는 주장을 함.
     * OpenAI의 거대한 자아가 드러나며, 이 회사가 AGI를 개발하는 데 있어 최선의 선택이 아닐 수 있음.

     OpenAI 내부의 갈등과 이기심이 과학적 성과를 가리고 있으며, 회사가 더 큰 선을 위해 운영되지 않는다는 인상을 줌.
     * OpenAI가 자신들의 블로그에서 AI의 과학을 공유하지 않겠다는 이기적인 태도를 과시하는 것은 놀랍고 이기적임.
     * OpenAI가 실제로는 'open'하지 않다는 것이 분명해졌으며, Elon Musk의 공공 이미지에도 부정적인 영향을 미침.

     OpenAI가 이익 창출 구조로 전환하는 과정에서 Elon Musk는 Tesla와의 합병 또는 전체 통제권을 원했으며, 이에 대한 자금 지원을 보류했다는 주장이 있음.
     * OpenAI의 도구를 사용하여 알바니아가 EU 가입을 5.5년 앞당길 수 있다는 주장은 매우 놀라운 것으로, 현실성이 떨어지는 듯한 인상을 줌.
     * 기술의 본질을 공유하지 않고도 제품에 대한 접근을 유료로 제공하는 것이 'open'이라면, 대부분의 기술도 'open'으로 볼 수 있음.

     OpenAI가 이익 제한 모델을 채택했을 때, 그들은 이름을 바꾸고 기부금을 반환하며 완전히 이익을 추구하는 회사로 전환했어야 했을지도 모름.
     * Sam Altman이 Ilya Sutskever의 행방을 모른다고 말한 후, 결국 그를 찾았다는 사실이 밝혀짐.
     * OpenAI 내부의 정치적 문제가 드러나며, 이 조직이 세상을 변화시키려는 의지보다는 정치적 이슈에 더 매몰되어 있음을 시사함.
     * 인류 역사상 가장 중요한 발명품을 선도하는 과정에 약간의 드라마가 포함될 것이라고 생각하지 않는 것은 비현실적임.

     OpenAI가 실용성과 위험 감소를 위해 합리적인 경로를 선택했으며, 그렇지 않았다면 Elon Musk의 제국의 일부가 되었거나, 최고의 인재를 고용할 수 없는 중간 수준의 비영리 단체로 남았을 것임.
"
"https://news.hada.io/topic?id=13721","61번 좌석의 남자번 좌석의 남자

기차 여행의 매력과 모험

     * 기차 여행은 비행기 여행의 대안으로, 기후 변화에 덜 기여하며 방문하는 국가들과 더 가까워질 수 있는 보람 있는 방법임.
     * 이 웹사이트는 기차나 페리를 이용하여 편안하고 저렴하게 여행하는 방법과 여정의 즐거움, 낭만, 모험을 재발견하는 방법을 설명함.
     * 영국, 유럽, 전 세계의 기차 여행에 대한 다양한 정보와 가이드를 제공함.

유럽 기차 여행 가이드

     * 유럽 내 기차 여행에 대한 정보, 지도, 온라인 시간표 및 실시간 정보를 제공함.
     * 유럽 기차 티켓 구매 방법, 전화로 티켓 예약하는 방법, 예약 개시 시기 등에 대한 안내가 있음.
     * Interrail 및 Eurail 패스, 예약 가이드, Eurostar 정보 및 티켓 구매 방법 등 유럽 여행에 필요한 다양한 정보를 제공함.

전 세계 대륙별 기차 여행

     * 아시아, 아프리카, 아메리카, 오스트랄라시아 대륙별 기차 여행 정보를 제공함.
     * 각 대륙의 주요 국가들과 그 안에서의 기차 여행 루트, 특별한 기차 여행 경험에 대한 정보가 있음.
     * 특정 국가로의 여행 또는 대륙 간 여행, 예를 들어 트랜스시베리아 철도를 통한 여행 등에 대한 상세한 정보를 제공함.

특별한 기차 여행 경험

     * 트랜스시베리아 철도를 이용한 모스크바에서 베이징까지의 여행, 베니스 심플론 오리엔트 익스프레스를 이용한 런던에서 베니스까지의 여행 등을 포함한 멋진 기차 여행을 소개함.
     * 영국의 가장 경치 좋은 노선인 웨스트 하이랜드 라인, 스위스의 글래시어 익스프레스 등 세계 각지의 아름다운 기차 여행 경로에 대한 정보가 있음.
     * 각 여행 경로에 대한 상세한 설명과 함께, 어떻게 티켓을 구매하고 여행을 계획할 수 있는지에 대한 유용한 정보를 제공함.

GN⁺의 의견

     * 이 웹사이트는 기차 여행을 통해 환경에 미치는 영향을 줄이고자 하는 사람들에게 유용한 자원임.
     * 기차 여행은 도시 간 이동뿐만 아니라 문화와 자연을 경험하는 독특한 방법을 제공함.
     * 유럽 내에서는 Interrail 또는 Eurail 패스를 이용하여 다양한 국가를 경제적으로 여행할 수 있는데, 이 웹사이트는 그러한 패스를 최대한 활용하는 방법에 대한 정보를 제공함.
     * 기차 여행은 종종 시간이 더 걸리고 비행기보다 느릴 수 있지만, 여행의 풍경과 경험을 중시하는 여행자에게는 매력적인 선택지임.
     * 기술적인 측면에서 볼 때, 기차 여행 예약 시스템은 여러 국가와 연결되어 있어야 하며, 이 웹사이트는 그러한 복잡한 예약 과정을 단순화하여 사용자에게 친숙한 경험을 제공함.

        Hacker News 의견

     * 이 사이트는 인상적이며, 알고 있는 몇 가지 경로에 대해 훌륭한 정보를 제공함. 앞으로 여행 계획을 세울 때 유용하게 사용할 수 있을 것 같음.
     * 기차 여행 사이트는 비현지인이 찾기 어렵고, SEO 최적화가 덜 된 공식 운송업체 사이트보다는 제3자 사이트에 방해를 받기 쉬움. 이 사이트는 단순히 사실만을 제공하여 좋음.
     * 이 사이트는 매우 ""올드 스쿨""하며, 정보 밀도가 높고, 대부분의 기차 여행 블로그가 포함하는 인생 이야기 부풀리기 없음.
     * 페이지에 내장된 비교적 덜 방해가 되는 배너/링크 광고를 통해 수익을 창출하며, 자바스크립트가 아닌 HTML로 되돌아옴. 구글 광고도 있지만 지나치게 많지 않음.
     * 앞으로 기차 여행을 검색할 때 나오도록 Kagi에 ""고정""함.
     * Amtrak California Zephyr 기차의 정시성능에 대해 언급함. 2,000마일 이상을 운행하는 이 기차는 종종 정시 또는 약간의 지연으로 도착하지만, 때로는 몇 시간 늦을 수 있으므로 바로 이어지는 연결 교통편을 예약하지 않는 것이 좋음.
     * Zephyr 기차의 지연에 대한 정보가 업데이트될 필요가 있음. 정상적인 근무 시간 제한, 관리 미흡 등으로 인해 8-12시간 이상 지연될 수 있음. 눈보라나 산사태로 인해 여행이 취소될 수도 있음.
     * 이 사이트는 유럽 첫 여행 때 알게 되었고, 다음 여행에서는 기차 좌석의 위치와 테이블이 있는 좌석을 얻기 위한 정보를 제공받음.
     * 사이트가 현대적인 디자인으로 변하지 않고 원래의 모습을 유지하여 기쁨.
     * seat61.com에서 제공하는 조언이 몇 번 유용했음.
     * 고객 서비스가 인상적이었던 raileurope.com을 추천함. 언어가 통하지 않는 국가의 현지 철도 회사와 거래하는 것보다 훨씬 쉬웠음.
     * loco2/raileurope의 역사에 대한 링크 제공.
     * 유럽에서 야간 기차 여행을 계획하려고 할 때 이 사이트를 발견함. 다른 곳은 정보가 누락되거나 오래되었거나 사이트가 작동하지 않는 경우가 많았지만, 이 사이트는 다양한 옵션과 최신 정보, 심지어 경유지에 대한 호텔 추천까지 제공함.
     * 이 사이트 덕분에 많은 도움을 받았으며, 추천 링크 보너스를 받았기를 바람.
     * 유럽을 벗어나면 세계가 얼마나 많이 변했는지 우울해짐. 시리아를 통한 루트는 불가능해졌고, 수단은 위험 지역이 되었으며, 러시아는 서양인에게 폐쇄되었고, 지중해를 건너 이스라엘과 이집트로 가는 페리도 사라짐. 많은 장거리 루트가 더 이상 실행 불가능함.
     * 인터넷이 지향해야 할 바를 보여줌. 취미를 공유하며 유용한 정보를 제공하는 한 사람의 이야기.
     * 이 사이트를 좋아함. 약 15년 전에 시베리아/몽골 기차 여행을 계획하는 데 도움을 받았고, 기차에서 만난 많은 사람들도 Seat 61을 사용함. 절대적인 고전임.
     * 고등학교 때 이 사이트의 가이드를 읽으며 언젠가 직접 여행을 꿈꿨음. 사이트가 변하지 않고 과거 그대로 남아 있어 반가운 느낌.
     * 이 사이트 덕분에 2014년에 가족과 함께 조지타운에서 방콕으로 가는 야간 기차를 탔음.
     * 매우 가치 있는 경험으로, 야자유 plantations, 선로 옆의 판잣집, 사람들의 삶 등이 밝게 빛나는 기억으로 남아 있음. 몇 년이 지난 후에도 가족들과 이야기함.
     * Seat 61의 남자에게 감사함.
"
"https://news.hada.io/topic?id=13747","Jim Keller가 이끄는 Tenstorrent, GPU에 대응하는 RISC-V 기반 Grayskull 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Jim Keller가 이끄는 Tenstorrent, GPU에 대응하는 RISC-V 기반 Grayskull 공개

     * Tenstorrent는 AMD의 Zen 아키텍처와 테슬라의 자율 주행 칩을 설계한 유명한 칩 설계자 Jim Keller가 이끄는 회사
     * RISC-V 기반의 GPU 대안인 Grayskull을 출시, 프로그래밍 및 확장이 용이하며, 실행 시 희소성과 조건부 계산 처리에 뛰어남
     * Grayskull e75와 Grayskull e150 두 가지 버전의 개발 키트를 선보임. AI 개발을 위한 추론 전용 하드웨어로, TT-Buda와 TT-Metalium 소프트웨어를 제공
     * Tenstorrent는 일본의 선도적인 반도체 기술 센터(LSTC)와의 파트너십을 맺음.
     * Tenstorrent의 RISC-V 및 칩렛 IP를 사용하여 최첨단 2nm AI 가속기를 구축할 예정

Grayskull의 힘!

     * Grayskull e75 모델은 75W에서 작동하는 저프로파일, 반 길이 PCIe Gen 4 보드에 단일 Grayskull 프로세서를 탑재함.
     * Grayskull e150 모델은 최대 200W에서 작동하는 표준 높이, 3/4 길이 PCIe Gen 4 보드에 Grayskull 프로세서를 탑재하며, 전력과 처리량을 균형 있게 제공함.

Tenstorrent 프로세서와 DevKits

     * Tenstorrent 프로세서는 Tensix 코어라고 불리는 코어 그리드로 구성되며, DRAM을 통하지 않고 네트워크를 통해 서로 직접 통신할 수 있는 네트워크 통신 하드웨어를 갖춤.
     * Grayskull DevKits는 자연어 처리를 위한 BERT, 이미지 인식을 위한 ResNet, 음성 인식 및 번역을 위한 Whisper, 실시간 객체 탐지를 위한 YOLOv5, 이미지 분할을 위한 U-Net 등 다양한 모델을 지원함.
     * Grayskull e75와 e150 DevKits는 각각 $599와 $799에 구매 가능함.

GN⁺의 의견

     * Tenstorrent의 Grayskull이 전통적인 GPU에 대한 RISC-V 기반 대안으로서, AI 개발자들에게 새로운 선택지를 제공함으로써 업계에 다양성을 더할 수 있음.
     * Grayskull이 실행 시 희소성과 조건부 계산 처리에 특화되어 있다는 점은, AI 모델의 효율성과 성능을 향상시킬 수 있는 잠재력을 가짐.
     * 이 기술을 도입할 때는 기존의 개발 환경과의 호환성, 생태계 지원, 그리고 장기적인 성능 및 비용 효율성을 고려해야 함.
     * 비슷한 기능을 제공하는 업계의 다른 제품으로는 NVIDIA의 GPU와 Google의 TPU가 있으나, Grayskull은 RISC-V 아키텍처를 기반으로 한 점에서 차별화됨.
     * Grayskull의 성공은 오픈소스 하드웨어 생태계의 성장과 혁신을 촉진할 수 있으며, 이는 기술의 민주화와 접근성 향상에 기여할 수 있음.

   짐 캘러가 히맨 팬인가 보네요. https://youtu.be/V8h8snfYidg?feature=shared

        Hacker News 의견

     * Grayskull 개발 키트에 대한 요약:
          + Grayskull e75: 75W 소비 전력, 96 Tensix 코어, 1GHz 클록 속도, 96MB SRAM, 8GB LPDDR4 메모리 (102.4 GB/s), 가격 $599
          + Grayskull e150: 200W 소비 전력, 120 Tensix 코어, 1.2GHz 클록 속도, 120MB SRAM, 8GB LPDDR4 메모리 (118.4 GB/s), 가격 $799
          + 이 제품들의 추론 성능이 그래픽 카드와 비교하여 어떨지, 홈 랩에 적합할지 관심이 모아짐.
          + 제품의 프리뷰 버전 언박싱 인터뷰가 있으나 성능 수치는 제공되지 않음.
     * 아키텍처에 대한 의견:
          + Jim Keller의 참여로 관심을 받고 있으나, CPU/ASIC 설계에 대한 지식이 없는 사람에게는 아키텍처가 다소 '기괴'해 보임.
          + 코어 그리드와 메모리, 인터페이스가 섞여 있고, 네트워크로 연결된 토폴로지에 대한 설명을 요청함.
     * 아키텍처 작동 방식에 대한 설명:
          + Tensix 코어와 공유 메모리로 구성된 기본 시스템.
          + 각 Tensix 코어에는 텐서 연산을 수행하는 고밀도 텐서 수학 유닛(FPU), SIMD 엔진(SFPU), 5개의 Risc-V CPU 코어, 대용량 로컬 메모리 저장소가 포함됨.
          + 코어들은 두 개의 반대 방향으로 이동하는 도넛 모양으로 연결됨.
          + RISC-V 코어는 FPU, SFPU를 제어하고 데이터를 준비/이동하는 데 사용됨.
          + SFPU는 RISC-V 코어에서 구동할 수 있는 보다 범용적인 SIMT 엔진임.
          + SFPU 시뮬레이터를 GitHub에서 사용해 볼 수 있으며, 프로그래밍 모델은 저수준 커널 예제에서 확인 가능함.
          + Grayskull SFPU는 64개의 19비트 값을 저장할 수 있는 4개의 범용 LRegs를 가지고 있으며, Wormhole은 32개의 32비트 값을 저장할 수 있는 8개의 범용 LRegs를 가짐.
          + Wormhole SFPU는 Grayskull에 비해 약 3배의 IPC 증가와 몇 가지 새로운 SFPU 명령어를 가짐.
          + 문서를 검토하고 GitHub 리포지토리를 살펴보면 더 많은 정보를 찾을 수 있음.
     * 모델 선택에 대한 의문:
          + BERT, ResNet, Whisper, YOLOv5, U-Net 등의 모델로 시작하는 이유에 대해 궁금증을 제기함.
          + 전력 효율성을 목표로 하는 것으로 추측되지만, 완전히 일치하지는 않음.
     * 시스템 요구 사항에 대한 질문:
          + 호스트 시스템에 64GB RAM이 필요한 이유에 대해 의문을 제기함.
          + 추론 서버는 추론 하드웨어 외에는 최소한의 구성이어야 하는 것이 아닌가 함.
     * 다른 회사의 맞춤형 실리콘과의 비교:
          + AWS, Google, Tesla의 맞춤형 실리콘과 이러한 종류의 프로세서를 비교하는 방법에 대해 궁금해함.
     * 아키텍처의 유사성:
          + 인텔 프로젝트 Larrabee GPU가 작동하려고 했던 방식과 유사하다고 느낌, 단 RISC-V를 사용함.
     * 추론 전용 솔루션에 대한 실망:
          + Groq, Tenstorrent 등 유망한 스타트업들이 추론 전용 솔루션을 제공하는 것에 대해 지친다고 표현함.
          + Groq 공식 채널을 통해 훈련을 가능하게 하는 개발에 투자할 계획이 없다는 정보를 얻음.
          + 추론 수요가 훈련 수요보다 수백만 배 많을 수 있기 때문에 이해는 가지만, 여전히 실망스러움을 느낌.
     * Grayskull™ e150의 RISC-V 코어 수:
          + Grayskull™ e150은 120개의 Tensix 코어를 가지고 있으며, 각각 5개의 RISC-V 코어를 포함하여 총 600개의 RISC-V CPU 코어를 가짐.
     * 성능과 아키텍처에 대한 정보 부족:
          + 성능이나 아키텍처에 대한 자세한 정보를 찾을 수 없음.
          + ML 중심 장치에 대해 메모리 대역폭이 매우 낮고 가격이 매우 높음.
          + 놓치고 있는 것이 무엇인지에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=13683","애플, iOS에 '위협'이라고 지칭하며 Epic Games 개발자 계정 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               애플, iOS에 '위협'이라고 지칭하며 Epic Games 개발자 계정 종료

Apple, 'iOS 생태계 위협'으로 Epic Games 개발자 계정 종료

     * Apple이 Epic Games의 개발자 계정을 종료함. 이는 이전에 Epic의 계정을 승인한 것에서 돌아선 것으로, Epic은 이를 통해 유럽연합(EU)의 새로운 법, Digital Markets Act(DMA)에 따라 iOS 기기에서 Fortnite을 다시 제공할 수 있을 것이라고 밝힘.
     * Epic은 Apple의 변호사들이 Epic Games Sweden AB 계정을 종료한다는 편지를 보냈다고 주장하며, 이는 DMA의 ""심각한 위반""이며 Apple이 iOS 기기에서 ""진정한 경쟁을 허용할 의도가 없음""을 나타냄.
     * Epic은 Apple이 이번 조치를 통해 Apple App Store의 가장 큰 잠재적 경쟁자 중 하나를 제거하고 있으며, 다른 개발자들에게 Apple과 경쟁하거나 불공정한 관행을 비판할 경우 어떤 일이 일어나는지 보여주고 있음을 주장함.

Apple의 반발

     * Epic은 Apple이 자사의 DMA 규칙 비판을 결정을 뒷받침하는 이유 중 하나로 제시했다고 주장하며, Epic Games CEO Tim Sweeney가 X(구 Twitter)에 게시한 글을 예로 듦.
     * Apple은 Epic과의 법적 분쟁 결과로 2021년 9월 판결에 따라 Epic의 계정을 종료할 권리가 있다고 밝힘. 이 판결은 Apple이 Epic Games의 자회사, 계열사 및 Epic Games의 통제 하에 있는 다른 엔티티의 DPLA를 언제든지 Apple의 단독 재량으로 종료할 계약상의 권리가 있음을 명시함.

Epic의 반응

     * Epic은 Apple이 자사의 발언에 대한 보복으로 행동하고 있다고 주장함. Apple의 Phil Schiller는 Epic에 보낸 편지에서 과거 Epic이 Apple과의 계약을 위반했으며, 이를 고의적으로 위반하여 재정적 이득을 얻으려 했다고 지적함.
     * Epic은 Apple과의 계약 관계가 2010년부터 시작되었으며, Apple은 Epic의 Unreal Engine을 공개적으로 지지해왔음을 언급함.

GN⁺의 의견

     * 이 사건은 기술 산업에서 대기업과 개발자 간의 긴장 관계를 보여줌. 특히, 대기업이 시장 지배력을 이용해 경쟁을 제한할 수 있는 능력을 가졌을 때, 이는 혁신과 소비자 선택권에 영향을 미칠 수 있음.
     * Apple과 Epic 사이의 분쟁은 앱 스토어의 정책과 개발자의 자유에 대한 중요한 논쟁을 제기함. 이는 다른 앱 스토어나 플랫폼을 운영하는 기업들에게도 영향을 미칠 수 있는 선례를 남길 수 있음.
     * Epic의 경우, 이러한 분쟁에도 불구하고 Unreal Engine과 같은 다른 제품을 통해 여전히 Apple과 협력 관계를 유지하고 있음을 강조함. 이는 기업 간 복잡한 관계와 상호 의존성을 보여줌.
     * 이 기사가 흥미로운 이유는 기술 산업에서의 권력 투쟁과 법적, 정책적 대응이 어떻게 형성되는지를 보여주기 때문임. 이는 개발자, 소비자, 그리고 정책 입안자들에게 중요한 교훈을 제공함.
     * 비판적인 시각에서 볼 때, 이러한 분쟁은 소비자들에게 혼란을 주고, 앱 개발자들 사이에서 불확실성을 증가시킬 수 있음. 또한, 대기업의 시장 지배력에 대한 규제가 어떻게 실행되어야 하는지에 대한 논의를 촉발시킴.
"
"https://news.hada.io/topic?id=13778","Tangram - 웹기반 무료 애니메이션 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Tangram - 웹기반 무료 애니메이션 편집기

     * ""일러스트레이터 for 애니메이션""
     * 브라우저에서 모션 그래픽을 만들고, 애니메이션을 추가하며, 공유할 수 있는 무료 플랫폼
     * 사용하기 쉬운 도구를 제공하여 코드 작성 없이도 놀라운 모션 그래픽을 쉽게 만들 수 있음

주요 기능

     * Corner Tool: 모양의 모서리를 다양한 스타일로 둥글게 하거나 날카롭게 만들 수 있음
     * Boolean Operations: 기존 모양을 합치거나 빼거나 교차하거나 제외하여 새로운 모양을 만들 수 있음
     * Shape Morphing: 한 모양에서 다른 모양으로 부드럽게 변화하는 애니메이션을 쉽게 만들 수 있음
     * Trim Path: 선이나 모양의 일부를 점진적으로 지우거나 드러내면서 애니메이션을 만들 수 있음
     * Motion Path: 애니메이션 내의 객체가 특정 경로를 따라 부드럽게 이동하도록 도와줌
     * Parent Link: 한 객체가 다른 객체를 제어하게 함으로써, 조정된 방식으로 함께 움직이거나 변화함
     * Looping: 애니메이션이 반복되는 방식을 제어함. Cycle, Ping Pong, Continue 등의 옵션 제공
     * Timing Functions: 애니메이션의 움직임 속도와 스타일을 제어함. Ease In, Ease Out, Ease In Out, Step Functions 등의 옵션 제공
     * Clip Mask: 이미지나 객체의 특정 부분만을 보여주고 나머지는 숨기는 기능을 함

GN⁺의 의견

     * Trangram은 코드를 몰라도 사용자가 직관적인 인터페이스를 통해 모션 그래픽을 제작할 수 있게 해주는 점에서 창의적인 아이디어를 시각적으로 표현하고자 하는 사용자들에게 매력적인 도구임.
     * 이러한 플랫폼은 디자인과 애니메이션에 대한 전문 지식이 없는 사용자들에게도 접근성을 제공하여, 창작의 문턱을 낮추는 역할을 함.
     * 그러나 사용자가 매우 복잡하거나 고급 기능을 필요로 하는 프로젝트를 진행할 경우, Trangram의 기능이 한계에 부딪힐 수 있으므로, Adobe After Effects와 같은 전문적인 소프트웨어를 고려할 수 있음.
     * Trangram과 같은 플랫폼을 사용할 때는 플랫폼의 업데이트와 지원 정책을 확인하는 것이 중요하며, 특히 오픈소스가 아닌 경우에는 장기적인 사용에 대한 비용도 고려해야 함.
     * 이 기술을 도입할 때는 사용자 커뮤니티의 활성도, 학습 자료의 풍부함, 그리고 플랫폼이 제공하는 템플릿이나 자산의 질을 고려해야 하며, 이를 통해 생산성 향상과 창의적인 표현의 다양성을 얻을 수 있음.

        Hacker News 의견

     * 과거에 매크로미디어 플래시 작업을 많이 했던 한 사용자는, 새로운 제품이 현대적인 관점에서 플래시와 유사하게 느껴진다고 언급함. 플래시의 장기적인 쇠퇴가 새로운 시도를 막는 요인이 되었을 수 있으며, 웹 애니메이션의 다양한 용도가 여전히 존재한다고 생각함. 제품에 대한 긍정적인 평가를 함.
     * 다른 사용자는 제품을 간략히 살펴본 결과, 플래시를 재창조한 것 같다고 느낌. 플래시 애플리케이션 자체가 최고의 벡터 애니메이션 도구 중 하나였으며, 그것이 사라진 것은 유용한 것을 잃은 것이라고 평가함. 제품을 깊이 있게 사용해보고 싶어함.
     * 한 사용자는 제품을 테스트해보고 ""hello world""라고 타이핑하여 5초 동안 튕기는 애니메이션을 만드는 것에 성공함. 그러나 ""gif로 저장""하는 두 번째 테스트는 계정 생성이 필요하여 수행하지 못함. 작업물을 잠그는 사이트에 대해 경계심을 표현하며, 익명 시험에서 만든 것을 다른 곳에서 사용할 수 있도록 한 번의 저장을 허용하는 것이 좋은 전략이 될 수 있다고 제안함. 사이트에 대한 긍정적인 평가와 함께 다른 사람들에게 추천할 의향을 나타냄.
     * 어떤 사용자는 탱그램을 어도비 일러스트레이터와 비교하는 것이 아니라 어도비의 애니메이션 소프트웨어인 애프터 이펙트나 애니메이트와 비교해야 한다고 지적함. 탱그램이 애프터 이펙트나 애니메이트보다 일러스트레이터에 더 가깝다고 생각하는 이유를 물음.
     * 다른 사용자는 제품이 멋져 보인다고 언급하며, 기존 애니메이션을 열 수 있는 기능이나 초보자를 위한 튜토리얼 비디오를 추가하는 것이 좋을 것이라는 제안을 함. 제품을 사용해보고 싶어하는 의사를 표현함.
     * 한 사용자는 어도비가 플래시를 얼마나 효과적으로 파괴했는지에 대해 언급하며, 사람들이 어도비 일러스트레이터와 유사한 애니메이션 소프트웨어를 만들고 있다는 사실에 놀라움을 표현함. 이것을 놀라운 일로 평가함.
     * 어떤 사용자는 자신의 도메인 이름에 ""gram""이 포함되어 있어 페이스북의 큰 법률회사로부터 소송 위협을 받았던 경험을 공유함. 법적으로 문제가 없다고 생각했지만, 결국 다른 도메인으로 변경해야 했음. 다른 이들에게도 경고의 말을 전하며, 브랜드 변경을 위한 준비를 할 것을 조언함. 제품에 대해서는 긍정적인 평가를 함.
     * 한 사용자는 모바일에서 경험이 전혀 없음에도 불구하고 10초 만에 애니메이션을 만들 수 있었다고 언급함. Lottie 내보내기 기능에 대한 가능성을 물으며, 그 기능이 있다면 제품을 사용할 의향이 있음을 나타냄.
     * 다른 사용자는 기존 디자인에서 애니메이터를 시작하는 기능을 추가하는 것을 제안함. 기존 디자인을 미리 로드하여 편집기를 여는 ""포크"" 또는 ""리믹스"" 기능이 네트워크 파워를 강화하고 도구를 배우는 데 도움이 될 것이라고 생각함.
     * 한 사용자는 제품이 놀랍고, 전체적인 단순함이 마음에 든다고 언급함. 전문 소프트웨어와 비교할 때 무서운 복잡성이 없어 1분 만에 도구를 파악할 수 있었다고 함. 교육 도구로서 훌륭하며, 아이들이 실험하기를 좋아할 것이라고 평가함.
"
"https://news.hada.io/topic?id=13766","웹과 허블이 확인한 우주 팽창 속도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          웹과 허블이 확인한 우주 팽창 속도

우주의 팽창 속도 확인

     * 우주의 팽창 속도를 나타내는 허블 상수는 우주의 진화와 최종 운명을 이해하는 데 있어 기본적인 매개변수임.
     * 허블 상수의 측정값과 빅뱅 후광으로부터 예측된 값 사이에 지속적인 차이가 있으며, 이를 '허블 긴장'이라고 함.
     * NASA/ESA/CSA 제임스 웹 우주 망원경은 허블 우주 망원경의 정확한 측정을 확인함으로써 허블의 측정에 대한 의심을 해소함.

NGC 5468 은하 이미지

     * NGC 5468은 지구로부터 약 1억 3천만 광년 떨어진 은하로, 허블과 제임스 웹 우주 망원경의 데이터가 결합된 이미지임.
     * 허블이 세피드 변광성을 식별한 가장 먼 은하이며, 이 별들은 우주 팽창률을 측정하는 중요한 이정표임.
     * 세피드로부터 계산된 거리는 은하 내의 Ia형 초신성과 교차 검증되었으며, Ia형 초신성은 세피드의 범위를 넘어 우주 거리를 측정하는 데 사용됨.

이미지 설명

     * 나선 은하의 정면 모습으로, 시계 반대 방향으로 휘어진 네 개의 나선 팔이 있음.
     * 나선 팔은 젊은 푸른 별들로 가득 차 있고, 작은 덩어리처럼 보이는 자주색 별 생성 지역으로 점철되어 있음.
     * 은하 중심은 훨씬 밝고 노란색을 띠며, 11시 방향에서 5시 방향으로 기울어진 좁은 선형의 바가 뚜렷함.
     * 배경에는 수십 개의 빨간색 배경 은하들이 흩어져 있으며, 우주의 배경은 검은색임.

GN⁺의 의견

     * 제임스 웹 우주 망원경과 허블 우주 망원경의 협력은 우주과학 분야에서 중요한 이정표를 제시함. 이러한 협력을 통해 우주의 팽창 속도에 대한 이해가 한층 더 깊어질 수 있음.
     * 허블 긴장을 해소하는 것은 우주론 연구에 있어 중요한 진전이며, 이는 우주의 기원과 구조에 대한 우리의 지식을 확장하는 데 기여함.
     * 세피드 변광성과 Ia형 초신성을 이용한 거리 측정 방법은 천문학에서 널리 사용되는 기법으로, 이를 통해 우주의 팽창률을 더 정확하게 측정할 수 있음.
     * 이러한 발견은 우주의 팽창률을 측정하는 다른 방법들과의 일관성을 확인하는 데 도움을 줄 수 있으며, 우주론 모델을 검증하는 데 중요한 역할을 함.
     * 비판적인 시각에서 볼 때, 우주의 팽창 속도에 대한 연구는 여전히 불확실성을 내포하고 있으며, 추가적인 관측과 연구가 필요함.
"
"https://news.hada.io/topic?id=13801","Microsoft AICI - Prompts as WASM Programs","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Microsoft AICI - Prompts as WASM Programs

     * AICI - Artificial Intelligence Controller Interface
     * 대규모 언어 모델(LLM)의 출력을 실시간으로 제한하고 지시하는 컨트롤러를 구축할 수 있게 해줌
     * 컨트롤러는 제한된 디코딩, 프롬프트 및 생성된 텍스트의 동적 편집, 병렬 생성 간의 조정이 가능
     * 컨트롤러는 토큰별 디코딩 중에 사용자 정의 로직을 통합하고 LLM 요청 동안 상태를 유지함
     * AICI의 목적은 기존 및 새로운 컨트롤러 전략을 쉽게 구축하고 실험할 수 있게 하는 것
          + 기본 LLM 추론 및 제공 엔진의 구현 세부 정보를 추상화함으로써
               o 컨트롤러 개발을 단순화하고,
               o 빠른 컨트롤러를 더 쉽게 작성하며,
               o LLM 추론 및 제공 엔진 간의 호환성을 쉽게 만드는 것을 목표
     * AICI는 (최종적으로) 다중 테넌트 LLM 배포를 포함하여 로컬 및 클라우드 실행을 위해 설계됨
          + 컨트롤러는 GPU가 토큰 생성으로 바쁜 동안 CPU를 활용하여 LLM 추론 엔진과 동일한 시스템에서 실행되는 경량 WebAssembly(Wasm) 모듈로 구현
          + AICI는 추론 스택의 한 계층으로, Guidance, LMQL 등과 같은 제어 라이브러리가 그 위에서 실행되고 LLM 추론 및 서비스 엔진 전반에 걸친 이식성과 효율성 및 성능 향상을 모두 얻을 수 있도록 설계
     * AICI는
          + 유연함 : 컨트롤러는 Wasm으로 컴파일할 수 있는 모든 언어(Rust, C, C++, ...)로 작성되거나 Wasm 내에서 해석될 수 있음(Python, JavaScript, ...)
          + 보안 : 컨트롤러는 샌드박스 처리되어 파일 시스템, 네트워크 또는 기타 리소스에 액세스할 수 없음
          + 빠름 : Wasm 모듈은 네이티브 코드로 컴파일되고 LLM 추론 엔진과 병렬로 실행되어 생성 프로세스에 최소한의 오버헤드만 생성
     * Microsoft Research 에서 설계 및 제작된 프로토타입
"
"https://news.hada.io/topic?id=13755","Show GN: OBS에서 이용할 수 있는 치지직 채팅창 CSS (4K UHD 화면 전용)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: OBS에서 이용할 수 있는 치지직 채팅창 CSS (4K UHD 화면 전용)

chzzk-custom-css

   치지직 채팅창을 브라우저 소스로 OBS에 추가할 때 활용할 수 있는 사용자 지정 CSS 파일입니다. 단, 기본(캔버스) 해상도가 3840 × 2160 (4K UHD)이어야 됩니다.
     * 불투명도가 0.9인 검은 배경을 채팅 목록의 각 항목에 추가했습니다. 해당 배경의 둥근 모서리는 반지름이 24픽셀입니다.
     * 채팅, 구독, 후원 메시지의 모든 요소를 4배 확대했습니다.

  왜 만들었나요?

   마지막남은뚜또 님이 만든 커스텀 치지직 통합채팅창 오버레이는 비공개 소스 서비스로 보여서 이것에 의존하고 싶지 않았습니다. 물론 통합 채팅창이 필요한 분들은 이 서비스를 이용하셔야 됩니다.

  붙임

   제가 CSS를 배운 적이 없다 보니, 이 파일을 이상하게 작성했을 수 있습니다.

   오픈소스 채팅 오버레이를 원하신다면 제가 만든 ChaosRat도 사용해보세요.
   다양한 플랫폼을 지원하고, 앞으로 커스텀 CSS 기능도 제공할 예정입니다.
   소스코드는 https://github.com/yf-dev/chaosrat 에서 확인하실 수 있습니다(MIT License).

   ChaosRat 을 너무 잘 쓰고 있는데용......... 혹시 팬더티비나 플렉스티비 팝콘같은 타 플랫폼도 추가할 방법은 없을까요?

   제가 사용하지 않는 플랫폼이라 직접 지원할 예정은 없습니다.
   누군가 작업해서 PR 주신다면 서비스에 반영할 수는 있을 것 같습니다.

   아, 검색 엔진으로 이 채팅 오버레이를 못 찾은 게 정말 아쉽네요. 알려 주셔서 감사합니다!
     * CSS 파일: https://github.com/chabulhwi/chzzk-custom-css/…

   이모티콘 크기는 4배 말고 3배 확대했다는 점을 제가 놓쳤네요.
"
"https://news.hada.io/topic?id=13708","Tailwind CSS v4.0 진행 상황을 오픈 소스로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Tailwind CSS v4.0 진행 상황을 오픈 소스로 공개

     * 새로운 고성능 엔진인 Oxide가 Tailwind CSS v4.0으로 개발 중임.
     * 개발자 경험을 단순화하고 웹 플랫폼의 최신 진화를 활용하기 위해 설계됨.
     * 원래 v3.x 릴리스로 출시될 예정이었으나, 새로운 세대의 프레임워크로서 v4.0으로 출시하기로 결정됨.
     * 아직 초기 단계이며 많은 작업이 남아 있지만, 첫 번째 공개 알파 버전을 태깅하여 실험을 시작할 수 있음.

새 엔진, 속도를 위해 구축됨

     * 새 엔진은 처음부터 다시 작성되었으며, 더 적은 코드로 더 빠른 속도를 제공함.
     * 최대 10배 빠른 빌드 속도를 제공하며, Tailwind CSS 웹사이트는 105ms, Catalyst UI 키트는 55ms만에 빌드 가능.
     * 새 엔진은 설치 크기가 35% 이상 작아졌으며, Rust와 Lightning CSS와 같은 무거운 네이티브 패키지를 포함함.
     * Rust를 사용하여 프레임워크의 가장 비용이 많이 드는 부분을 처리하고, TypeScript로 코어를 유지하여 확장성을 제공함.
     * 새 엔진은 Lightning CSS에만 의존함.
     * 자체 CSS 파서를 작성하고, PostCSS보다 2배 빠른 파싱 속도를 제공하는 데이터 구조를 설계함.

통합된 툴체인

     * Tailwind CSS v4는 더 이상 플러그인이 아니며, CSS를 처리하는 올인원 도구임.
     * @import 처리, 벤더 프리픽싱, 중첩 지원 등이 내장되어 있어 별도의 설정이 필요 없음.
     * oklch() 색상과 미디어 쿼리 범위와 같은 현대적인 CSS 기능을 더 나은 브라우저 지원을 위한 구문으로 변환함.
     * PostCSS 플러그인을 계속 제공하지만, 번들러 플러그인을 탐색 중이며, 첫 알파 릴리스와 함께 공식 Vite 플러그인을 제공함.

현대 웹을 위해 설계됨

     * Tailwind CSS v4는 향후 몇 년 동안 최첨단으로 느껴질 프레임워크를 구축하고자 함.
     * 실제 @layer 규칙을 사용하여 과거에 문제가 되었던 특정성 문제를 해결함.
     * @property를 사용하여 내부 사용자 정의 속성을 명확하게 정의하고, 배경 그라데이션과 같은 효과를 가능하게 함.
     * color-mix를 사용하여 색상 변수의 불투명도 수정이나 currentColor의 불투명도 조정을 더 쉽게 함.
     * 코어에 컨테이너 쿼리를 직접 지원하며, 새로운 @min-* 및 @max-* 변형을 통해 컨테이너 쿼리 범위를 지원함.

조합 가능한 변형

     * 새 아키텍처는 다른 선택자에 작용하는 변형을 함께 구성할 수 있게 함.
     * 이전 버전에서는 group-has-*와 같은 변형이 프레임워크에 명시적으로 정의되었으나, 이제 group-*은 기존 has-* 변형과 함께 구성될 수 있음.

제로 구성 콘텐츠 감지

     * 초기 알파 릴리스에서는 content 경로를 구성할 수 없으며, 대부분의 프로젝트에서는 이를 다시 설정할 필요가 없음.
     * PostCSS 플러그인이나 CLI를 사용하는 경우, Tailwind는 프로젝트 전체를 크롤링하여 템플릿 파일을 찾음.
     * Vite 플러그인을 사용하는 경우, 모듈 그래프에 의존하여 실제로 사용하는 파일을 정확히 알 수 있음.

CSS 우선 구성

     * Tailwind CSS v4.0의 주요 목표는 프레임워크를 CSS 네이티브처럼 느끼게 하고, JavaScript 라이브러리처럼 느껴지지 않게 하는 것임.
     * 설치 후, 일반 CSS @import 문을 사용하여 프로젝트에 추가함.
     * JavaScript 구성 파일에서 모든 사용자 정의를 설정하는 대신, CSS 변수를 사용함.

변경된 사항

     * 중요한 변경 사항을 가볍게 다루지 않지만, v4에서는 몇 가지 다르게 처리되는 사항이 있음.
     * 더 이상 문서화되지 않은 유틸리티를 제거함.
     * PostCSS 플러그인과 CLI는 별도의 패키지로 제공됨.
     * 기본 테두리 색상을 제거함.
     * 기본적으로 ring 유틸리티는 이제 currentColor를 사용하는 1px 링임.

v4.0으로 가는 로드맵

     * 새 엔진은 처음부터 다시 작성되었으며, 새로운 구성 접근 방식을 사용하는 개발자 경험에 전적으로 집중함.
     * 뒤로 호환성을 매우 중요하게 생각하며, 안정적인 v4.0 릴리스를 위한 주요 작업임.
     * JavaScript 구성 파일 지원, 명시적 콘텐츠 경로 구성, 다른 다크 모드 지원, 플러그인 및 사용자 정의 유틸리티 지원, 클래스 접두사 구성, Safelists 및 blocklists 지원, important 구성 지원, theme() 함수 지원, 독립 실행형 CLI 지원 등이 포함됨.

알파 버전 시도하기

     * 이미 몇 가지 알파 릴리스가 태깅되었으며, 프로젝트에서 오늘부터 실험을 시작할 수 있음.
     * Tailwind CSS IntelliSense 확장 프로그램을 사용하는 경우, VS Code 확장 페이지에서 사전 릴리스 버전으로 전환해야 함.
     * 문제가 발견되면 GitHub에서 알려주기를 바람.

    Vite 사용하기

     * Tailwind CSS v4 알파와 새로운 Vite 플러그인을 설치함.
     * vite.config.ts 파일에 플러그인을 추가함.
     * 메인 CSS 파일에서 Tailwind를 가져옴.

    PostCSS 사용하기

     * Tailwind CSS v4 알파와 별도의 PostCSS 플러그인 패키지를 설치함.
     * postcss.config.js 파일에 플러그인을 추가함.
     * 메인 CSS 파일에서 Tailwind를 가져옴.

    CLI 사용하기

     * Tailwind CSS v4 알파와 별도의 CLI 패키지를 설치함.
     * 메인 CSS 파일에서 Tailwind를 가져옴.
     * CLI 도구를 사용하여 CSS를 컴파일함.

GN⁺의 의견

     * Tailwind CSS v4.0의 오픈 소스 공개는 개발자 커뮤니티에게 새로운 기능과 개선 사항을 미리 경험할 기회를 제공함. 이는 개발자들이 프레임워크에 대한 피드백을 제공하고, 더 안정적인 최종 릴리스에 기여할 수 있는 기회를 의미함.
     * 새로운 엔진의 성능 향상은 빌드 시간을 크게 단축시키는 것으로 보여, 특히 대규모 프로젝트나 빠른 개발 사이클이 중요한 환경에서 유용할 것으로 예상됨.
     * Rust와 TypeScript의 조합은 성능과 확장성을 동시에 추구하는 현대적인 접근 방식을 반영함. Rust로 작성된 부분은 성능을 극대화하는 반면, TypeScript는 개발자들이 쉽게 확장하고 유지보수할 수 있게 함.
     * CSS 변수를 사용한 새로운 구성 방식은 기존의 JavaScript 기반 설정보다 더 CSS 친화적이며, 디자인 시스템과의 통합을 용이하게 할 수 있음.
     * 이러한 변화는 기존 사용자들에게는 일부 마이그레이션 작업을 요구할 수 있으나, 장기적으로는 더 간결하고 유지보수가 쉬운 코드베이스로 이어질 것으로 기대됨.

   한국이 유난히 유틸리티형 CSS 도구에 대한 반감이 많더군요.

        Hacker News 의견

     * Tailwind CSS는 프론트엔드에 있어 두 번째로 좋은 일이며, Vue 3만이 그것을 능가함.
          + CSS 클래스명을 짓는 데 드는 수고가 없고, 중복된 CSS 코드나 충돌하는 클래스 문제가 없음.
          + 모든 코드가 한 파일 안에 있어서 컴포넌트를 코드만 보고도 시각화할 수 있음.
          + SCSS로 돌아가지 않을 것이며, Vue 3, TailwindCSS, Vite 조합이 최고라고 생각함.
     * Tailwind에 대한 강력한 비판자로서, CSS-first 설정 아래의 모든 발표가 매우 환영받을 만함.
          + Tailwind의 디자인 토큰, 리셋 등을 활용할 수 있고, 실제 CSS를 통해 커스터마이징 가능.
          + CSS의 모던 아키텍처, 캐스케이드, 심지어 웹 컴포넌트의 쉐도우 DOM까지 버리지 않고 Tailwind를 '가볍게' 사용할 수 있는 새로운 방법 제시.
     * CTRL+u는 문법의 좋은 예를 보여줌.
          + 예를 들어, 둥근 모서리의 박스와 상단 및 하단 섹션을 만드는 데 직관적인 한 줄 코드가 필요함.
     * 독립 실행형 CLI에 대해 아직 작업하지 않았지만, v4.0 릴리스 전에 반드시 완성할 것임.
          + 릴리스 발표의 나머지 부분을 고려할 때, 이는 Rust로 구축될 것이라고 가정함.
          + Node를 내장하지 않는 것을 선호함, 특히 Vercel의 이제는 버려진 pkg 도구에 의존하는 경우.
     * 많은 유망한 개선 사항들이 있음.
          + JS를 통해 확장하는 대신 CSS를 통해 테마를 제어할 수 있는 기능에 가장 흥분됨.
     * Tailwind가 unocss처럼 attributify를 지원하기를 바람.
          + 복잡한 레이아웃에 대해 훨씬 더 읽기 쉬움.
     * 프론트엔드 개발자는 아니지만 몇 개의 웹사이트를 유지하고 있으며, 모두 Tailwind를 사용함.
          + Tailwind 유지 관리자들이 우선 순위를 정하는 데 있어 매우 좋은 직관을 가지고 있으며, 훌륭한 디자인 감각을 가짐.
          + Tailwind는 사용해보기 전까지는 이해되지 않지만, 각 버전마다 더욱 정제된 제품을 제공함.
          + 이 버전에서는 호환성 측면에서 크게 변한 것은 없지만, 버전 4가 공식화되면 더 많은 변경 사항이 있을 수 있음.
          + 새로운 엔진의 전망은 매우 멋지며, 빌드 속도 향상은 항상 환영받음.
     * Tailwind에 대한 좋은 튜토리얼/가이드가 있는지 궁금함.
     * htmx나 다른 hateoas 접근 방식과 함께 tailwindcss를 사용하는 사람이 있는지 궁금함.
          + hypertext가 스타일링과 관련이 없어야 하지만, tailwind와 같은 것은 이와 상충할 수 있음.
          + CSS와 hateoas는 마크업과 스타일링이 분리되어 있어 완벽하게 어울리지만, tailwindcss와 같은 경우에는 어떻게 하는지 궁금함.
     * 데모 프로젝트에서 사용하고 싶었지만, import from ""node:@tailwindcss/postcss@latest""가 package.json의 exports 필드에 대한 오류를 발생시킴.
          + 그럼에도 불구하고, 블로그 포스트에서는 postcss-import를 사용할 필요가 없다고 언급하지만, 여전히 그것을 의존성으로 포함하고 있음.
"
"https://news.hada.io/topic?id=13763","gh-116167: GIL 비활성화 허용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         gh-116167: GIL 비활성화 허용

GIL 비활성화 허용

     * PYTHON_GIL=0 또는 -X gil=0을 설정하여 GIL(Global Interpreter Lock)을 비활성화할 수 있게 됨.
     * GIL 관련 데이터 구조는 초기화되지만, GIL을 비활성화하면 take_gil()과 drop_gil()이 조기에 반환되도록 함.
     * GIL을 비활성화한 상태에서 몇 가지 테스트와 작은 프로그램을 실행해 보았고, 기본적인 스레드 프로그램도 때때로 작동함.
     * 전체 테스트 스위트를 실행하려고 하면 test_asyncio에서 빠르게 충돌함.

GIL 비활성화 메커니즘 추가

     * GIL 비활성화 메커니즘을 추가하는 이슈(#116167)에 대한 논의가 있었음.
     * 자유 스레드 빌드에서 GIL을 비활성화할 수 있는 기능이 추가됨.
     * GIL을 다시 활성화하는 작업(#116322)과 기본적으로 GIL을 비활성화하는 작업(#116329)을 추적함.

코드 리뷰 및 테스트

     * 코드 리뷰 요청과 테스트 케이스 추가에 대한 논의가 있었음.
     * PYTHON_GIL 환경 변수에 대한 문서화와 사용자 피드백을 얻기 위한 제안이 있었음.
     * -X gil 옵션 추가와 sys.flags에 반영, 환경 변수를 다루는 테스트 수정이 포함됨.

GN⁺의 의견

     * 이 변경은 Python 커뮤니티에 큰 영향을 미칠 수 있는데, GIL은 Python의 멀티스레딩 성능에 제한을 주는 잘 알려진 요소이기 때문임.
     * GIL을 비활성화하는 기능은 성능 향상을 가져올 수 있지만, 동시에 안정성과 호환성 문제를 일으킬 수 있어 신중한 접근이 필요함.
     * GIL 없이 Python을 실행하는 것은 특히 병렬 처리와 관련된 작업에서 이점을 제공할 수 있으나, 기존의 많은 Python 코드가 GIL을 전제로 작성되어 있어서 이러한 변화가 가져올 영향을 평가하는 것이 중요함.
     * 다른 언어나 런타임에서는 GIL과 유사한 메커니즘을 사용하지 않는 경우가 많으며, 예를 들어 Node.js는 비동기 I/O를 통해 단일 스레드 성능을 극대화하는 접근 방식을 취함.
     * 이 기술을 도입할 때는 기존 코드의 스레드 안전성을 검토하고, 필요한 경우 리팩토링을 고려해야 함. GIL을 비활성화함으로써 얻을 수 있는 성능 이점과 안정성 간의 균형을 잘 맞추는 것이 중요함.
"
"https://news.hada.io/topic?id=13724","Natron - Adobe After Effects의 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Natron - Adobe After Effects의 오픈소스 대체제

     * VFX 및 모션 그래픽용 합성 소프트웨어
     * 기능상 Adobe After Effects, Foundry's Nuke, Blackmagic Fusion 등과 비슷
     * 포터블하며 크로스 플랫폼 지원(리눅스, 윈도우, 맥)
     * 2D/2.5D 작업을 효율적으로 처리
     * OpenImageIO 와 ffmpeg 로 수많은 파일 형식 지원(H264, DNxHR, EXR, DPX, TIFF, JPG, PNG 등)
     * OpenFX 아키텍처를 활용하여 다양한 무료/상용 OpenFX 플러그인 지원
     * OpenColorIO 에 의한 포괄적인 색상 관리
     * Rotoscoping, Rotopainting, 트래킹 지원
     * 별도 하드웨어 요구 없이 CPU 컴퓨팅 성능을 100%로 활용

  Hacker News 의견

     * Natron과 Nuke의 비교
          + Natron은 타임라인과 효과 중심의 After Effects보다는 노드 기반의 Nuke와 비교되어야 함.
          + Nuke는 VFX 산업의 표준 합성 소프트웨어로, Natron은 이를 모방하여 만들어짐.
     * Natron의 장단점
          + Natron은 Nuke의 클론으로, 비싼 대안들과 경쟁하는 것이 인상적임
          + 수학적 계산과 색상 과학은 우수하며 이미지 처리도 정확함
          + 그러나 사용성과 성능은 다소 약함
          + ACEScg에서 sRGB로의 색상 변환, 비디오 인코딩(ffmpeg 사용)과 같은 워크플로우 부분에서 Nuke나 Resolve를 대체할 수 있음
          + 창의적인 작업에는 사용을 망설이며, After Effects의 애니메이션 기능에는 미치지 못함
     * 비록 오픈 소스는 아니지만, 리눅스 기반의 크리에이티브 작업자들은 DaVinci Fusion을 간과해서는 안 됨
     * 이미 Adobe After Effects의 오픈 소스 대안으로 Blender가 존재함
     * Natron과 After Effects의 비교에 대한 비판
          + After Effects와 Natron을 비교하는 것은 터무니없음
          + Natron은 모션 그래픽에 적합하지 않으며, 합성/포스트 프로덕션과 모션 그래픽을 혼동하고 있음
     * Natron의 유지 관리 상태에 대한 의견
          + Natron이 여전히 유지 관리되고 있다는 사실을 몰랐음
          + 아이디어는 멋지지만 사용하기에는 매우 불편함
          + 그냥 Resolve/Fusion을 무료로 다운로드하는 것이 낫다고 조언함
"
"https://news.hada.io/topic?id=13726","Show GN: Fedify: Deno로 만든 ActivityPub 서버 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: Fedify: Deno로 만든 ActivityPub 서버 프레임워크

   Deno로 ActivityPub을 구현한 연합우주(fediverse) 서버 프레임워크를 만들었습니다. 아직 문서화하고 추가할 기능이 많긴 하지만, 액터 만들어서 팔로잉/팔로워 추가하고 액티비티 주고 받는 등의 기본 동작은 다 잘 돕니다.

   Mastodon 및 Misskey에서도 테스트 되었고요. 예제 프로젝트로 ActivityPub 달린 싱글 유저 블로그도 리파지터리 안에 들어 있습니다 (https://github.com/dahlia/fedify/tree/main/examples/blog). 연합우주 서버 앱 만드는 것에 관심 있으시다면, 한 번 살펴봐 주세요!
"
"https://news.hada.io/topic?id=13693","EU 규제 당국은 애플, 에픽 게임스 분쟁 확대에 대한 세부 사항을 찾고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              EU 규제 당국은 애플, 에픽 게임스 분쟁 확대에 대한 세부 사항을 찾고 있다

    1. 에픽 게임즈는 애플의 폐쇄적인 시스템을 열어주는 EU의 '디지털 시장법(DMA)'을 활용하여, 아이폰과 아이패드에 에픽게임즈의 게임 스토어를 올리려고 시도함
    2. 하지만 애플은 ''이전에 계약을 위반했다라는 이유로 막아 섬
    3. EU의 경쟁 당국은 애플에게 이 행위가 EU의 기술 규정을 위반하는지 설명을 요구함
"
"https://news.hada.io/topic?id=13736","클로르피리포스: 어린이의 뇌 손상과 연관된 살충제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      클로르피리포스: 어린이의 뇌 손상과 연관된 살충제

클로르피리포스: 어린이의 뇌 손상과 연관된 살충제

     * 클로르피리포스는 어린이의 뇌 손상과 강력한 연관성이 있는 널리 사용되는 살충제임.
     * 여러 국가와 미국의 일부 주에서는 이러한 건강 문제로 인해 클로르피리포스 사용을 금지했으나, 제조사의 로비로 미국에서는 여전히 농업용으로 사용이 허용됨.
     * 2021년 8월 바이든 행정부는 어린이에 대한 위험을 인정하고 농업용 클로르피리포스 사용을 금지하기로 발표함.
     * 미국 환경보호청(EPA)은 모든 식품과 동물 사료에서 클로르피리포스의 사용을 중단시키는 모든 허용치를 철회함.
     * 그러나 2023년 11월, 미국 항소법원은 EPA의 금지 조치를 뒤집고, 일부 식품에서 클로르피리포스의 안전한 사용 여부를 평가하라고 지시함.

과학자와 의사들은 클로르피리포스에 대해 어떻게 말하는가?

     * 미국 소아과학회는 클로르피리포스의 지속적인 사용이 태아, 유아, 어린이 및 임산부에게 큰 위험을 초래한다고 경고함.
     * 과학자들은 클로르피리포스에 대한 태아기 노출이 출생 체중 감소, IQ 저하, 작업 기억 상실, 주의력 장애 및 운동 발달 지연과 관련이 있다는 것을 발견함.
     * 클로르피리포스는 급성 살충제 중독과도 연결되어 있으며, 경련, 호흡 마비, 때로는 사망을 초래할 수 있음.

FDA는 식품 및 음용수 노출이 안전하지 않다고 말함

     * 클로르피리포스는 매우 독성이 강해 유럽식품안전청(EFSA)은 2020년 1월부터 화학물질의 판매를 금지함.
     * 미국의 몇몇 주들도 농업용 클로르피리포스 사용을 금지함.

클로르피리포스의 역사

     * 클로르피리포스 살충제는 1965년 다우 화학에 의해 도입되었으며, 농업 환경에서 널리 사용됨.
     * 클로르피리포스는 다양한 작물에 사용되며, 비농업용도로는 골프장, 잔디, 온실, 유틸리티 등에 사용됨.

트럼프 EPA는 금지를 지연시킴

     * 트럼프 대통령 선출 후, 클로르피리포스 금지가 지연됨.
     * 2017년 3월, EPA 관리자 스콧 프루이트는 환경 단체의 청원을 거부하고 클로르피리포스 금지를 진행하지 않기로 결정함.

EPA에 대한 단체 및 주의 소송

     * 트럼프 행정부의 결정으로 금지가 적어도 2022년까지 지연되자, Pesticide Action Network과 Natural Resources Defense Council은 EPA를 상대로 소송을 제기함.

산업 연구의 문제점

     * 수년간 미국 규제 기관은 다우 화학이 제공한 조작된 데이터에 의존하여 클로르피리포스의 미국 가정 내 안전 수준을 허용함.

GN⁺의 의견

     * 클로르피리포스는 어린이의 발달에 심각한 영향을 미칠 수 있는 살충제로, 이에 대한 연구와 규제의 역사는 환경 보호와 공중 보건에 대한 중요한 사례 연구를 제공함.
     * 이 기사는 환경 규제가 정치적, 경제적 압력에 어떻게 영향을 받을 수 있는지 보여주며, 과학적 증거에 기반한 정책 결정의 중요성을 강조함.
     * 클로르피리포스와 같은 화학물질의 사용을 줄이기 위해 유기농 농업과 같은 대안적 농업 방식이 더욱 중요해지고 있음.
     * 이 기사는 농약의 안전성에 대한 연구가 어떻게 진행되어야 하는지에 대한 논의를 촉발할 수 있으며, 독립적이고 투명한 과학적 평가의 필요성을 강조함.
     * 클로르피리포스의 대안으로 생물학적 농약이나 통합 해충 관리(IPM)와 같은 지속 가능한 농업 관행이 확대되어야 할 필요성이 있음.
"
"https://news.hada.io/topic?id=13796","Google SIMA - 3D 가상 환경을 위한 생성형 AI 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Google SIMA - 3D 가상 환경을 위한 생성형 AI 에이전트

     * DeepMind가 Scalable Instructable Multiworld Agent(SIMA)를 공개
          +
               o Google DeepMind는 아타리 게임부터 인간 그랜드마스터 수준에서 StarCraft II를 플레이하는 AlphaStar 시스템에 이르기까지 AI와 게임 분야에서 오랜 역사를 가짐
     * SIMA는 3D 가상 환경을 위한 범용 AI 에이전트로 다양한 비디오 게임 환경에서 자연어 지시를 따라 수행 가능
     * 이번 연구는 개별 게임에 초점을 맞추는 대신 일반적이고 지시 가능한 게임 플레이 AI 에이전트로의 전환을 목표로 함
     * 다양한 게임 개발자들과 협력하여 여러 비디오 게임에서 훈련됨
     * AI 에이전트가 광범위한 게임 세계를 이해하고, 그 안에서 자연어 지시에 따라 작업을 수행할 수 있음을 처음으로 보여줌

비디오 게임에서 배우기

     * SIMA는 Hello Games의 _No Man’s Sky_와 Tuxedo Labs의 _Teardown_을 포함한 9개의 다양한 비디오 게임에서 훈련 및 테스트됨
     * 다양한 환경에 노출시키기 위해 게임 개발자들과 협력하여 8개 게임 스튜디오와 파트너십을 맺음
     * SIMA는 간단한 탐색, 메뉴 사용부터 자원 채굴, 우주선 조종, 헬멧 제작에 이르기까지 다양한 기술을 배움
     * Unity로 구축한 새로운 환경인 Construction Lab을 포함한 4개의 연구 환경에서도 사용됨

SIMA: 다재다능한 AI 에이전트

     * SIMA는 다양한 환경을 인식하고 이해한 후 지시된 목표를 달성하기 위한 행동을 취할 수 있는 AI 에이전트임
     * 정밀한 이미지-언어 매핑을 위한 모델과 화면에서 다음에 일어날 일을 예측하는 비디오 모델을 포함
     * 게임 소스 코드나 특정 API에 접근할 필요 없이 화면 이미지와 사용자가 제공하는 간단한 자연어 지시만 필요
     * SIMA는 키보드와 마우스 출력을 사용하여 게임의 중심 캐릭터를 제어하고 이러한 지시를 수행함

게임 및 기타 환경에서의 일반화

     * 여러 게임에서 훈련된 에이전트가 단일 게임에서만 훈련된 에이전트보다 더 나은 성능을 보임
     * 훈련된 환경에서 뿐만 아니라 보지 못한 환경에서도 인간 수준의 성능을 발휘하기 위해 더 많은 연구가 필요.
     * SIMA의 성능은 언어에 의존하며, 언어 훈련이나 지시 없이는 적절하지만 목적 없이 행동함

AI 에이전트 연구 발전

     * SIMA의 결과는 일반적인 언어 기반 AI 에이전트 개발의 잠재력을 보여줌
     * 초기 단계 연구로, 더 많은 훈련 환경과 더 능력 있는 모델을 통합하여 SIMA를 더욱 발전시킬 것을 기대함
     * 최종적으로는 사람들에게 온라인과 실제 세계에서 유용하게 다양한 작업을 이해하고 안전하게 수행할 수 있는 일반 AI 시스템과 에이전트를 구축하는 것을 목표로 함

GN⁺의 의견

     * SIMA는 AI가 다양한 환경에서 인간처럼 지시를 이해하고 행동할 수 있는 능력을 보여주는 중요한 연구임
     * 이러한 연구는 AI가 단순한 작업 수행을 넘어 복잡한 전략적 계획과 다중 작업을 수행할 수 있는 미래를 열어줄 수 있음
     * 그러나 AI가 인간 수준의 성능을 발휘하기 위해서는 아직 많은 연구와 발전이 필요함
     * 이 기술이 실제 세계의 문제를 해결하는 데 어떻게 적용될 수 있는지, 그리고 AI의 일반화 능력이 어떤 잠재적 한계를 가질 수 있는지에 대한 논의가 필요함
     * 비슷한 기능을 가진 다른 AI 프로젝트로는 다양한 비디오 게임에서 학습할 수 있는 AI 플랫폼인 OpenAI Gym이 있음

  Hacker News 의견

     * TI7에서 프로 도타 플레이어들과 대결할 수 있는 OpenAI가 공개된 것을 잊을 수 없음. 도타는 매우 복잡하고 어려운 게임임. 이 경험은 내 커리어에 큰 변화를 가져왔음.
     * 개발자들이 이 기술을 사용하여 NPC에게 더 많은 생명을 불어넣을 수 있기를 바람. 여러 RPG에서 독립적인 삶을 사는 NPC에 대한 약속이 실제로 눈에 띄는 결과로 이어진 적은 없지만, AI를 통해 이제 가까워지고 있을지도 모름.
     * MMORPG에서 이미 심각한 문제인 봇 사용이 플레이어 경제를 왜곡시키고 모두의 게임 경험을 저하시키고 있음. 이러한 골드파머들을 막기 위한 고양이와 쥐의 게임이 훨씬 더 어려워질 것임
     * 로봇 종말이 현실이 될 것이라는 공상과학은 더 이상 공상과학이 아님. ""흥미로운"" 폭력적 게임이 지루한 현실 시뮬레이터보다 훨씬 저렴하고 풍부하기 때문임.
     * 게임 개발 CI 도구로서의 사용이 흥미로울 것임. UI뿐만 아니라 글쓰기와 게임 흐름을 검증하는 종단간 플레이스루 테스트. ""첫 나무를 자르는 데 걸린 시간: +20%""와 같은 보고서를 받는 상상을 해봄.
     * 이 기술 + Vtuber 기술 + 관객과 상호작용하는 챗봇 + 음성 변환 기술 == 게임 인플루언서 자동화
     * StarCraft II에서 DeepMind의 AlphaStar와 비교하여 SIMA가 얼마나 잘 수행할 수 있을지, 내가 고수준 지시를 내리고 SIMA가 실행한다면 어떨지 생각해봄. 그러다가 이런 종류의 전쟁 게임이 이미 테스트되고 있을지도 모른다는 불길한 느낌을 받음. AI가 일부 요청을 실행하기 전에 우려를 제기하고 확인을 요구하는 역방향 안전장치도 필요할 것임.
     * Ender’s Game을 생각나게 함, 그들은 아이에게 컴퓨터 게임을 하고 있다고 속여서 외계인 종족을 멸종시키게 만듦.
     * 2017년 4월 Nvidia의 ""GeForce GTX G-Assist"" 농담이 곧 실현될 수 있을 것임.
     * Transformer-XL을 2019년부터 사용하고 있음에 놀람 - XLNet과 같은 구조를 여전히 사용하는 사람들이 있다는 것을 몰랐음
"
"https://news.hada.io/topic?id=13716","내가 가장 좋아하는 애니메이션 기법: 지수 평활화 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   내가 가장 좋아하는 애니메이션 기법: 지수 평활화 (2023)

지수 평활화를 이용한 애니메이션 트릭

     * 애니메이션에 관련된 작업을 시작한 이래로 거의 항상 사용해온 간단한 애니메이션 기법이 있음.
     * 이 기법은 카메라 회전 및 이동, 턴 기반 게임 내 인물 이동, UI 요소 이동, 오디오 라이브러리의 볼륨 변화 평활화 등 다양한 곳에 사용됨.
     * 이 기법은 새로운 것은 아니며, 이미 들어보거나 사용해본 적이 있을 수 있지만, 몇 가지 예시와 수학적 원리를 설명할 예정임.

토글 버튼

     * UI 구성 요소를 만들 때, 예를 들어 토글 버튼을 만든다고 가정함.
     * 토글 버튼의 스위치 위치는 상태에 따라 계산되며, 켜져 있으면 max_x, 꺼져 있으면 min_x로 설정됨.
     * 이 방식은 잘 작동하지만, 애니메이션 없이는 다소 생명력이 없어 보임.
     * 애니메이션은 시각적인 멋을 더하는 것뿐만 아니라 사용자가 무슨 일이 일어나고 있는지 이해하는 데 도움을 줌.
     * 토글 표시기를 즉시 새 위치로 이동시키는 대신 부드럽게 이동시키도록 변경함.
     * 이제 애니메이션을 업데이트해야 하며, 이는 일정한 속도로 이동하는 것처럼 보이는 단점이 있음.
     * 여기에 이징 함수를 추가하여, 예를 들어 3t^2-2t^3 또는 sqrt(t)와 같은 함수를 사용할 수 있음.
     * 이러한 이징 함수의 차이점은 느리게 애니메이션을 재생할 때 더 잘 보임.
     * 이제 스위치 위치를 업데이트하는 대신 애니메이션 상태를 추적해야 함.
     * sqrt를 사용할 때는 애니메이션 방향에 따라 다른 이징 함수를 명시적으로 사용해야 함.
     * 어떤 것이 가장 좋아 보이는지는 취향의 문제이지만, sqrt가 가장 좋아 보임. 이는 스위치가 매우 빠르게 시작되지만 목적지에 가까워짐에 따라 잘 느려짐.
     * 이 버전의 단점은 가장 간단한 경우에도 상당한 양의 관리가 필요하며, 사용자가 애니메이션 중간에 클릭하면 갑자기 뛰어오르는 불연속성이 있음.

카메라 이동

     * 지도와 카메라가 주변을 스크롤하거나 이동하는 상황을 가정함.
     * 여기에도 애니메이션을 추가하는 것이 좋음.
     * 상수 속도로 보간하는 코드를 제시함.
     * 애니메이션이 완료된 후에 발생하는 떨림은 target.x - position.x가 양수와 음수 사이를 번갈아 가며 바뀌기 때문임.
     * sign(delta) 대신 델타를 클램핑하는 함수가 필요함.
     * 이 방법은 간단한 것에 대해 상당히 복잡함.
     * 애니메이션 속도가 애니메이션 완료보다 빠를 때 이상해 보임.
     * 사용자의 입력을 애니메이션이 활성화되어 있는 동안 무시할 수도 있지만, 이는 사용자에게 매우 짜증나는 경험을 제공함.
     * 완벽한 해결책은 물론 지수 평활화임.
     * 코드는 토글 버튼 예제와 비교해 거의 변하지 않음.

내부 원리

     * 1 - exp(- speed * dt)가 무엇인지, 어떻게 작동하는지 설명함.
     * 간단한 버전부터 시작하여, 현재 position과 이동해야 하는 새 위치 target 사이의 속도를 비례적으로 만들어 이동 속도를 빠르게 함.
     * 이 방법은 현재 위치와 목표 위치 외에는 어떠한 상태도 유지할 필요가 없으며, target이 갑자기 변경되어도 자동으로 조정됨.
     * 그러나 작은 문제가 있음. speed * dt가 1보다 크면 위치가 목표를 초과하여 이동함.
     * 이 문제를 해결하기 위해 값을 1로 클램핑할 수 있음.
     * speed * dt가 너무 큰 이유는 speed 값이 너무 크거나 dt가 너무 크기 때문임.
     * 애니메이션의 경우, dt를 적용할 때 모든 것이 완벽하게 작동하면 좋을 것임.

미분 방정식 (오, 아니)

     * 문제를 해결하고자 하는 두 단계 접근법을 제시함.
     * position += (target - position) * speed * dt가 작은 dt에 대해 작동하지만 큰 dt에 대해서는 실패하는 것은 미분 방정식의 수치 해법에 대한 전형적인 문제임.
     * 이 방정식이 무엇을 해결하는지 알아봄.
     * position += (target - position) * (1 - exp(- speed * dt))가 모든 dt에 대해 올바른 공식임을 설명함.

속도 선택

     * 애니메이션을 일반적으로 지속 시간 측면에서 생각함.
     * 지수 공식을 사용하면 애니메이션은 기술적으로 무한 시간 동안 완료됨.
     * speed 매개변수가 의미하는 바는 1 / speed가 position이 target에 e = 2.71828...만큼 더 가까워지는 시간임.

지수 평활화

     * ""지수 평활화""를 검색하면 완전히 관련 없는 것처럼 보이는 위키 문서를 찾을 수 있지만, 실제로는 이 게시물에서 논의한 것과 매우 유사한 공식을 특징으로 함.
     * dt가 항상 동일하고 target이 매 반복마다 변경된다고 가정하면, 반복 번호로 값을 색인화하여 position[i] = (target[i] - position[i - 1]) * factor와 같은 것을 계산함.

마지막 단락 제목

     * 이 게시물에 대한 아이디어를 몇 달 동안 가지고 있었고, 마침내 완성하게 되어 기쁨.
     * 개발 로그를 시청하고 읽어주셔서 감사함.

GN⁺의 의견

     * 이 기사는 애니메이션을 부드럽고 자연스럽게 만드는 데 사용되는 지수 평활화 기법에 대해 설명함. 이 기법은 사용자 경험을 향상시키고 인터페이스의 직관성을 높이는 데 기여함.
     * 지수 평활화는 물리적인 움직임을 시뮬레이션하는 데 있어서도 유용할 수 있으며, 예를 들어 게임 개발에서 캐릭터의 움직임이나 카메라 이동을 더 자연스럽게 만드는 데 사용될 수 있음.
     * 이 기법은 특히 사용자 인터페이스의 요소가 상태 변화를 겪을 때, 그 변화를 시각적으로 표현하는 데 매우 효과적임. 예를 들어, 슬라이더나 스위치의 움직임을 더욱 부드럽게 표현할 수 있음.
     * 비판적인 시각에서 보면, 지수 평활화는 애니메이션의 속도와 지속 시간을 정확히 제어하기 어려울 수 있음. 이는 디자이너가 특정한 애니메이션 효과를 정밀하게 조정하고자 할 때 제한이 될 수 있음.
     * 유사한 기능을 제공하는 다른 애니메이션 라이브러리나 프레임워크로는 GreenSock Animation Platform(GSAP)이나 anime.js 등이 있으며, 이들은 다양한 이징 함수와 함께 더 세밀한 애니메이션 제어를 제공함.
     * 지수 평활화 기법을 도입할 때는 애니메이션의 자연스러움과 제어의 정밀성 사이에서 균형을 찾아야 함. 이 기법을 선택함으로써 얻는 이점은 사용자 경험의 향상이며, 단점은 애니메이션의 정밀한 타이밍 조절이 어려울 수 있다는 점임.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 이 방법은 단순한 이징(easing) 곡선이나 smoothstep() 함수가 아니라, 다양한 입력을 일관되게 처리하는 무상태(stateless) 방법임을 강조.
          + CSS 전환을 사용한 경험이 있다면, 이 기술이 해결하는 문제에 대해 이해할 수 있음.
          + 지수 평활(exponential smoothing)은 목적지에 접근하지만 결코 도달하지 않는 문제가 있음.
          + 관성 스크롤(inertial scrolling)에 유사한 방법을 사용할 때, (가짜)마찰 항을 추가하는 것이 유용했다고 언급.
     * 두 번째 댓글 요약:
          + 게임 개발자로서, 대부분의 UI 상황에는 미리 설정된 지속 시간을 가진 이징 트윈(eased tweens)을 선호함.
          + 그러나 시작/끝 지점이 명확하지 않은 연속적이고 예측 불가능한 움직임을 부드럽게 할 때는 이 기술이 매우 유용함.
          + 지수 선형 보간(exponential lerp)은 유용하지만 널리 알려지지 않았으며, 일부 게임에서는 덜 정확한 선형 보간을 사용하여 애니메이션 문제를 겪음.
          + 이러한 이유로 기사에 감사함을 표시하며, 이러한 특정 지식에 접근하기 어려운 경우가 많음.
     * 세 번째 댓글 요약:
          + 저자가 토글 스위치에 대해 제곱근(sqrt)이 세제곱(cubic)보다 낫다고 주장하는 것에 대해 이견을 제시함.
          + 실제 토글 스위치의 작동 방식을 고려할 때 세제곱 함수가 더 적합하다고 주장함.
          + 애니메이션이 사용자 경험을 향상시킬 수 있음을 잘 보여주는 기사라고 평가함.
     * 네 번째 댓글 요약:
          + 온라인 상호작용에 즐거움을 더하는 간단한 비선형 트릭에 대해 감탄함.
          + 색상 인식에서 중요한 역할을 하며, 사람들이 가속도를 항상 이해하지 못한다는 점을 언급함.
     * 다섯 번째 댓글 요약:
          + 기사를 좋아하며, 거의 10년 전에 'lazy-easy'라는 이름으로 동일한 기술을 작성했다고 언급함.
          + 상태 관리 없이 부드러운 애니메이션을 원할 때 이 기술을 여전히 사용한다고 함.
     * 여섯 번째 댓글 요약:
          + 이징에 대한 기사가 각 세대마다 새롭게 발견해야 하는 것처럼 보임을 언급함.
          + 90년대 후반 유고 나카무라(Yugo Nakamura)의 실험적인 웹사이트가 이징을 자유롭게 사용하여 유기적인 느낌을 준 최초의 사례 중 하나였다고 회상함.
     * 일곱 번째 댓글 요약:
          + 터치/클릭을 유지하는 동안 천천히 움직이다가 놓으면 나머지 부분이 빠르게 스냅되는 토글에 대한 아이디어를 제시함.
          + UX 측면에서 이것이 의미하는 바에 대한 확신은 없으나, 설정이 적용되거나 저장되는 시점을 나타낼 수 있음을 생각함.
     * 여덟 번째 댓글 요약:
          + 이 기술이 스위치뿐만 아니라 다양한 용도로 유용하다고 평가함.
          + Flickity와 관련된 데모를 언급하며, 이 기술이 생산 준비 단계에 필요한 여러 최적화를 포함하지 않았음을 지적함.
          + 댓글에서 사람들이 기사를 제대로 읽지 않았거나, 중요한 내용을 놓치고 있다고 비판함.
     * 아홉 번째 댓글 요약:
          + 기사에 대한 긍정적인 평가를 하며, 데모가 크롬에서는 잘 작동하지만 파이어폭스에서는 페이지가 멈추는 문제를 겪었다고 언급함.
     * 열 번째 댓글 요약:
          + 작은 애니메이션이 감정적 디자인의 최고 형태로서 많은 이야기를 담고 있다고 평가함.
"
"https://news.hada.io/topic?id=13777","심슨의 역설심슨의 역설

심슨의 역설

     * 심슨의 역설은 확률과 통계에서 여러 그룹의 데이터에서는 추세가 나타나지만, 그룹을 합치면 추세가 사라지거나 역전되는 현상.
     * 이 결과는 사회과학과 의학 통계에서 자주 발견되며, 빈도 데이터에 부당하게 인과 해석을 할 때 특히 문제가 됨.
     * 통계 모델링에서 혼동 변수와 인과 관계를 적절히 다루면 이 역설을 해결할 수 있음.

예시

  UC 버클리 성별 편향

     * 1973년 가을 UC 버클리 대학원 입학 통계에서 남성이 여성보다 입학 가능성이 더 높은 것으로 나타남.
     * 그러나 학과별로 입학 정보를 고려하면, 여성이 더 경쟁이 치열한 학과에 지원하는 경향이 있고, 남성은 상대적으로 경쟁이 덜한 학과에 지원하는 경향이 있음.
     * 전체 데이터를 보정하면 ""여성에게 약간 유리한 통계적으로 유의미한 편향""이 나타남.

  신장 결석 치료

     * 신장 결석에 대한 두 가지 치료법의 성공률을 비교한 실제 의학 연구에서 나온 예시.
     * 작은 결석과 큰 결석 모두에서 치료 A가 더 효과적이지만, 두 크기를 모두 고려할 때는 치료 B가 더 효과적으로 보임.
     * 이 역설은 결석의 크기라는 숨겨진 변수가 원인으로, 이 변수를 고려하지 않았을 때 발생함.

  타율

     * 프로 야구 선수들의 타율을 비교할 때 심슨의 역설이 발생할 수 있음.
     * 한 선수가 여러 해 동안 다른 선수보다 더 높은 타율을 가질 수 있지만, 그 여러 해를 합칠 때는 더 낮은 타율을 가질 수 있음.

비판

     * 심슨의 역설이 실제로는 역설이 아니라 변수 간의 인과 관계를 제대로 고려하지 않아 발생하는 문제라는 비판이 있음.
     * 데이터를 다르게 분류하거나 다른 혼동 변수를 고려하면 현상이 사라지거나 역전될 수 있음.
     * 심슨의 역설에 대한 초점이 통계 분석 시 주의해야 할 더 중요한 문제들로부터 주의를 분산시킬 수 있다는 지적도 있음.

GN⁺의 의견

     * 심슨의 역설은 데이터 분석과 통계적 추론에서 중요한 교훈을 제공함. 데이터를 해석할 때 단순한 수치의 비교가 아니라, 변수 간의 관계와 상황의 맥락을 이해하는 것이 중요함을 강조함.
     * 이 역설은 데이터 과학자나 연구자들이 데이터를 분석할 때 혼동 변수를 식별하고 적절한 통계적 방법을 사용하여 인과 관계를 명확히 해야 한다는 점을 상기시킴.
     * 심슨의 역설은 데이터의 오해를 방지하고 보다 정확한 결론을 도출하기 위한 데이터 분석 기법의 중요성을 강조하는 사례로 사용될 수 있음.
     * 데이터 과학 교육에서 심슨의 역설은 중요한 교육적 도구로 활용될 수 있으며, 복잡한 데이터 세트를 해석할 때 발생할 수 있는 잠재적 오류에 대한 인식을 높이는 데 도움이 됨.
     * 이 역설을 이해하고 해결하는 데 도움이 되는 통계적 방법론으로는 다변량 분석, 로지스틱 회귀, 인과 추론 모델 등이 있으며, 이러한 방법들은 데이터 분석가들이 실제 문제를 해결하는 데 필수적임.

        Hacker News 의견

     * 한 데이터 분석가가 전자상거래 회사인 The Hut Group에서 근무할 당시 마케팅 비용이 감소하는 것으로 보고되었으나, 실제로는 거의 두 배로 증가한 사례를 경험함.
          + 마케팅 팀은 각 제품 카테고리별로 마케팅 비용이 감소했다고 보고했으나, 영양제 카테고리의 판매 비중이 크게 증가하면서 전체 마케팅 비용 비율이 상승함.
          + 이는 Yule Simpson의 역설을 설명할 기회가 되었으며, 이는 개별적인 성과와 전체적인 결과 간의 차이를 보여주는 예시임.
     * 수학자 Jordan Ellenberg은 Simpson의 역설이 실제로는 모순이 아니라 데이터를 바라보는 두 가지 다른 관점에 대한 것이라고 주장함.
          + 이는 데이터 분석에서 부분과 전체를 동시에 고려하는 중요한 분석 방법임.
     * 한 통계학 강사는 Simpson의 역설을 설명하기 위해 미국의 주택 가격 데이터를 사용했음.
          + 중앙 냉방 시설이 없는 주택의 평균 가격이 있는 주택보다 높게 나타났으나, 주별로 나누어 보면 그 관계가 반대로 나타남.
          + 이는 캘리포니아의 비싼 주택들이 평균 가격을 끌어올린 결과임.
     * Berkson의 역설에 대해서도 인지하고 있어야 함.
          + 편향된 방식으로 생성된 데이터 집단에서 오류가 발생할 수 있음을 설명함.
     * Simpson의 역설에 대한 위키 페이지의 짧은 애니메이션은 이해를 돕는 좋은 예시임.
     * Simpson의 역설이 인과 추론에 대한 교훈을 제공한다는 것을 최근에 알게 됨.
          + 올바른 패러다임을 적용하면 역설이 해소됨.
     * Lord의 역설은 Simpson의 역설과 밀접하게 관련되어 있으며, 시각적으로 이해하기 쉬움.
          + 약물의 용량과 수면 시간의 관계를 예로 들어, 개별 데이터와 전체 데이터의 회귀선이 서로 다른 결과를 보여줌.
     * Simpson의 역설이 실제로는 ""심슨 가족"" 에피소드의 한 장면과 비슷한 것으로 오해했으나, 이는 90년대 후반의 심슨 작가들의 의도적인 유사성일 수 있음.
     * UC 버클리의 입학 과정에서 성별 편향이 있는 것처럼 보이는 사례를 읽고, 여성과 남성이 각각 경쟁이 치열한 학과와 그렇지 않은 학과에 지원하는 경향이 있음을 발견함.
          + 이는 호주의 상황과 반대로, 일반적으로 예술 학과가 STEM 학과보다 입학이 쉬울 것으로 예상되는 것과 대조됨.
     * 위키의 시각화는 매우 효과적이어서 별도의 설명 없이도 역설을 이해할 수 있음.
"
"https://news.hada.io/topic?id=13751","TimeLapze: MacOS용 오픈소스 타임랩스 화면 녹화 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 TimeLapze: MacOS용 오픈소스 타임랩스 화면 녹화 프로그램

     * 컬러 정확도를 중시하는 오픈소스 메뉴 바 애플리케이션으로, 과도한 파일 크기 없이 화면과 카메라 타임랩스를 생성함
          + 컬러 정확도는 색이 바래거나 복사된 듯한 타임랩스를 방지하는 중요한 기능임

기능

     * 컬러 정확성: 본 것과 같은 색상을 녹화하여 희미한 비디오를 만들지 않음
     * 미니멀리스트 디자인: 메뉴 바에서 사용할 수 있는 완전한 기능의 웹 레코더
     * 하드웨어 가속: 가벼운 녹화 경험을 위해 하드웨어 가속 인코딩을 완전히 활용
     * 공간 절약: 고품질 비디오의 과도한 파일 크기(시간당 최대 7GB)를 피함
     * 카메라 녹화: 동일한 프레임 속도와 카메라 속도로 웹캠이나 폰을 녹화함
     * 보안: ScreenCaptureKit의 기능을 사용하여 특정 창, 애플리케이션 등을 녹화함으로써 녹화 중에 은행 정보가 유출되지 않음
     * 사용자 정의 가능: 프레임 속도, 품질, 속도 등 모든 것을 변경할 수 있음

설치

     * TimeLapze 설치를 위한 권장 방법은 Homebrew cask를 통한 것임
     * 레포지토리가 75개의 별과 30개의 관찰자를 얻으면 brew install --cask screentimelapse를 사용하여 앱을 설치할 수 있음
     * 애플리케이션은 서명되지 않았으므로 애플은 앱이 멀웨어를 확인할 수 없다는 경고를 줌. 시스템 설정에서 어쨌든 앱을 실행할 수 있음

직접 다운로드

     * 원한다면 릴리스 페이지로 직접 가서 TimeLapze.zip을 다운로드할 수 있음.
     * Chrome과 Safari는 의심스러운 파일 다운로드에 대해 경고를 줌. 경고를 무시하고 아카이브를 추출하면 ScreenTimeLapse.app 파일을 얻을 수 있음. 이 파일을 Applications 디렉토리로 이동시키면 됨.

로컬 개발

     * TimeLapze를 로컬에서 개발하려면 이 레포지토리를 복제하고 XCode에서 열어야 함.
     * 그 후, 로컬에서 앱을 실행하기 위한 명령어를 사용할 수 있음.
     * 로컬 서명을 위해 앱을 빌드하도록 허용해야 함.

기술 스택

     * SwiftUI
     * ScreenCaptureKit
     * AVFoundation
     * CoreMedia

라이선스

     * TimeLapze는 MIT 라이선스 하에 오픈소스임.
     * 이 프로젝트가 마음에 든다면 레포지토리에 별을 주는 것을 고려해보세요. Homebrew에 추가되기 위해 75개의 별을 목표로 하고 있음.

주석

     * 애플의 화면 녹화기는 디스플레이의 색 공간을 DCI_P3에서 sRGB로 변환함. 이 오류는 일반적으로 미묘하지만, 색상에 민감한 작업에는 적합하지 않음. 색상은 어렵고 심지어 HDR 비디오에서도 스크린샷에서 과노출 문제가 지속됨.

GN⁺의 의견

     * TimeLapze는 사용자가 고품질의 타임랩스를 생성할 수 있게 해주는 동시에 파일 크기를 최소화하는 혁신적인 솔루션을 제공함. 이는 특히 저장 공간이 제한적인 사용자에게 유용할 수 있음.
     * 이 애플리케이션은 컬러 정확성을 중시하는 창작자들에게 매력적인 도구가 될 수 있음. 색상에 민감한 작업을 하는 사용자는 이러한 기능을 통해 더 정확한 결과물을 얻을 수 있음.
     * 오픈소스 프로젝트로서, 개발자 커뮤니티의 기여를 통해 지속적으로 개선될 가능성이 있음. 이는 소프트웨어의 지속적인 발전과 사용자 요구에 대한 빠른 대응을 의미함.
     * 애플리케이션의 미서명 상태는 일부 사용자에게 보안 우려를 일으킬 수 있음. 사용자는 애플리케이션을 신뢰할 수 있는지 판단하기 위해 추가적인 조사를 해야 할 수도 있음.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 OBS Studio가 있으며, 이는 라이브 스트리밍과 비디오 녹화를 위한 오픈소스 소프트웨어임. OBS Studio는 이미 널리 사용되고 있으며 강력한 커뮤니티 지원을 받고 있음.

        Hacker News 의견

     * OBS와의 차이점에 대해 궁금해하는 사람들을 위해, 이것은 데스크톱과 카메라의 타임랩스를 만드는 데 특화된 오픈소스 메뉴 바 애플리케이션임을 명시함.

     ""과도한 파일 크기 없이 화면과 카메라 타임랩스를 만들 수 있는 오픈소스 메뉴 바 애플리케이션.""
     * 마지막 릴리스는 2023년 11월 8일에 있었으며, M1 Max를 탑재한 맥에서 작동하지 않는 문제가 보고됨.
          + 짧은 녹화는 0바이트 파일을 저장함.
          + 게임 세션(Geforce Now)을 녹화할 때 시스템이 충돌하여 재부팅됨.
     * OBS의 간단한 대안으로 프로그래밍 세션을 녹화할 수 있는 도구에 대한 관심이 있음.
     * 웹 기반의 WASM ffmpeg을 사용한 빠른 화면 녹화 기능에 대해 언급함.

     ""현대 웹 기술로 할 수 있는 멋진 일들.""
     * 과거에 파이썬으로 비슷한 앱을 만들었으나, MacOS의 변화로 인해 작동하지 않게 됨. Swift로 만들어진 '네이티브' 대안이 나오길 바람.
     * OBS는 오픈소스 화면 녹화 도구이며, 이와 구별되는 요소가 무엇인지 제목에 명시되어야 함.
     * 노트북 사용 패턴을 확인하고 싶어서 관심을 가짐.
         1. brew를 통한 설치 실패, 릴리스 페이지에서 바이너리 사용 성공 (마지막 릴리스 2023년 12월 26일).
         2. Macbook Air의 화면과 외부 디스플레이, Facetime 카메라 녹화 옵션 활성화 성공. CPU 사용량 약 20%.
         3. FT 카메라 비활성화 및 2개 디스플레이만 녹화 시 CPU 사용량 약 6%로 감소. 단일 화면 녹화 시 약 2%.
         4. 다른 앱들과 함께 Timelapze 실행 중 성능 저하 없음.
         5. 녹화 결과물은 좋으며, ffmpeg을 사용하여 파일 크기 최적화 가능. 1분 55초 녹화(6배속)는 141MB이며, 최적화 후 28.3MB로 감소.
     * 스크린샷을 매 초 찍어 비디오를 만드는 것으로 추정하며, 연속적인 동일한 프레임을 제거하여 파일 크기를 줄이는 도구에 대한 관심이 있음.
     * 저장소에 별표를 주는 것이 homebrew에 추가되기 위한 지표라는 것에 대한 불만을 표현함.
     * 코드/게임 잼에 이 앱이 유용할 것으로 보임. 자원을 많이 소모하지 않아서 전체 기간 동안 실행할 수 있으며, 편집이 간단한 타임랩스 비디오를 얻을 수 있음.
     * OP가 어떤 이유로 shadowbanned(다른 사용자에게 보이지 않는 상태)되었으나, 이유를 찾을 수 없으므로 해제를 위해 dang에게 이메일을 보낼 것을 제안함.
"
"https://news.hada.io/topic?id=13770","인텔 Gaudi 2 칩, Diffusion Transformer 벤치마크에서 Nvidia H100을 능가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       인텔 Gaudi 2 칩, Diffusion Transformer 벤치마크에서 Nvidia H100을 능가

     * ""Behind the Compute"" 시리즈는 Stability AI의 사업 기록이자, 다른 이들이 생성 AI의 힘을 활용할 수 있도록 통찰력을 제공하는 블로그 포스트 시리즈
     * 이번 편에서는 다양한 컴퓨팅 솔루션의 성능 벤치마크와 이점에 대해 더 깊이 탐구함

성능 분석

     * 두 가지 모델을 훈련시키며 성능 분석을 수행했으며, 그 중 하나는 매우 기대되는 Stable Diffusion 3임
     * Intel Gaudi 2 가속기와 Nvidia의 A100 및 H100을 비교하여 훈련 속도를 측정함
     * 이들은 스타트업과 개발자들이 대규모 언어 모델을 훈련시키는 데 가장 일반적으로 선택하는 옵션임

모델 1: Stable Diffusion 3

     * Stable Diffusion 3은 곧 초기 미리보기 단계에 들어갈 예정인 가장 능력 있는 텍스트-이미지 모델임
     * Stable Diffusion 3의 공개 버전은 800M에서 8B 파라미터 범위의 크기로 제공될 예정
     * 2B 파라미터 버전을 사용한 분석에서는 기대 이상의 결과를 보여줌
     * 2B Multimodal Diffusion Transformer (MMDiT) 아키텍처 모델의 훈련 처리량을 측정했으며, 이는 d=24, BFloat16 혼합 정밀도, 최적화된 어텐션(xFormers for A100 및 FusedSDPA for Intel Gaudi)을 사용
     * 이 모델 버전을 MMDiT-ps2-d24라고 함
     * 2개의 노드, 총 16개의 가속기(Gaudi/GPU)를 통한 훈련 벤치마크 결과를 살펴보면, Gaudi 2 시스템은 가속기 당 배치 크기를 16으로 유지하며 초당 927개의 훈련 이미지를 처리함 - H100-80GB보다 1.5배 빠름
     * Gaudi 2의 96GB 고대역폭 메모리(HBM2E)를 활용하여 가속기 당 배치 크기를 32로 늘려 훈련 속도를 초당 1,254개 이미지로 더욱 향상시킴
     * 32개의 Gaudi 2 노드(총 256개의 가속기)로 분산 훈련을 확장하면서 계속해서 매우 경쟁력 있는 성능을 측정
     * 이 구성에서 Gaudi 2 클러스터는 A100-80GB GPU에 비해 초당 3배 이상 많은 이미지를 처리함. 이는 A100이 매우 최적화된 소프트웨어 스택을 가지고 있음에도 불구하고 인상적임
     * Stable Diffusion 3 8B 파라미터 모델에 대한 추론 테스트에서 Gaudi 2 칩은 기본 PyTorch를 사용하여 Nvidia A100 칩과 유사한 추론 속도를 제공함
     * 그러나 TensorRT 최적화를 통해 A100 칩은 Gaudi 2보다 40% 빠르게 이미지를 생성
     * 추가 최적화를 통해 Gaudi 2가 이 모델에서 A100을 곧 능가할 것으로 예상
     * 기본 PyTorch를 사용한 이전 테스트에서 Gaudi 2는 1024x1024 이미지를 30단계에 걸쳐 3.2초 만에 생성하는 반면, A100에서는 PyTorch를 사용하여 3.6초, TensorRT를 사용하여 2.7초가 걸림
     * Gaudi 2의 더 높은 메모리와 빠른 상호 연결 및 기타 설계 고려 사항으로 인해 차세대 미디어 모델을 뒷받침하는 Diffusion Transformer 아키텍처를 실행하는 것이 경쟁력이 있음

모델 2: Stable Beluga 2.5 70B

     * Stable Beluga 2.5 70B는 LLaMA 2 70B의 미세 조정 버전으로, ChatGPT 3.5를 특정 벤치마크에서 능가한 최초의 오픈 모델인 Stable Beluga 2를 기반으로 함
     * 256개의 Gaudi 2 가속기에서 이 훈련 벤치마크를 수행했으며, 추가 최적화 없이 PyTorch 코드를 그대로 실행하여 평균 총 처리량이 116,777 토큰/초임을 측정함
     * 이는 FP16 데이터 유형, 전역 배치 크기 1024, 그라데이션 축적 단계 2, 마이크로 배치 크기 2를 사용함
     * Gaudi 2에서 70B 언어 모델에 대한 추론 테스트를 수행했을 때, 입력 토큰 크기 128, 출력 토큰 크기 2048을 사용하여 가속기 당 673 토큰/초를 생성함
     * TensorRT-LLM과 비교할 때, Gaudi 2는 A100의 525 토큰/초보다 28% 빠름
     * FP8로 더 빠른 속도 개선을 기대함

컴퓨팅 솔루션에 대한 수요

     * 우리와 같은 회사들은 점점 더 강력하고 효율적인 컴퓨팅 솔루션에 대한 수요가 증가하고 있음
     * 우리의 발견은 Gaudi 2와 같은 대안의 필요성을 강조함. 이는 다른 7nm 칩보다 우수한 성능을 제공할 뿐만 아니라, 가격 대비 성능 비율, 저렴한 가격, 감소된 리드 타임 등 시장의 중요한 요구 사항을 해결함
     * 컴퓨팅 옵션에서의 선택 기회는 참여와 혁신을 넓히고, 고급 AI 기술을 모든 사람에게 더 접근 가능하게 만듦

  Hacker News 의견

     * TPUs가 A100s를 쉽게 이긴다는 사실이 흥미로움. TPUs를 사용하여 Stable Diffusion fine-tuning을 제공하는 dreamlook.ai에서 사람들은 제공 속도와 비용에 놀라워함. 하지만 큰 비밀은 없으며, 단순히 작업 단위로 더 빠르고 저렴한 하드웨어를 사용함.
     * 새로운 하드웨어로 모델 훈련에 경쟁을 촉진하는 것은 좋지만, 이러한 기계의 이용 가능성은 매우 제한적임. 주요 클라우드 제공업체가 Gaudi2 VM을 시간당 대여하는 것을 허용하지 않으며, 인텔 자체 사이트는 40k USD 이상의 8x GPU 서버를 구매하도록 안내함. 현재는 여전히 Nvidia가 소프트웨어 스택과 가용성 면에서 우위를 점하고 있지만, 올해 말까지는 변화가 시작될 수도 있음.
     * NVIDIA의 H100에서 거의 92%의 이윤을 남김. 더 많은 칩 회사들이 ""ML 가속기"" 분야에 뛰어들지 않은 것이 놀라움.
     * 하드웨어 메트릭이 3배 더 나아지지 않았음에도 3배 더 빠를 수 있는 이유에 대한 분석이 있으면 실제로 유용하고 통찰력 있는 정보가 될 것임. 그렇지 않으면 단순한 광고에 불과함.
     * H100이 거의 1년 전에 출시되었으므로 인텔이 작년 모델과 경쟁할 준비가 되었다면 괜찮음. CUDA가 매우 중요한 부분이며, 하드웨어와 소프트웨어 모두 함께 성숙하는 데 10년이 걸림을 기억해야 함.
     * H100이 이미 약 1년 동안 대량으로 출하되었음. Gaudi2도 비슷한 규모로 이용 가능한가? NVIDIA가 비슷한 시간대에 경쟁 부품보다 확실한 리드를 하지 못할 때까지는 NVIDIA를 절대로 무시해서는 안 됨.
     * Gaudi와 Ponte Vecchio가 모두 존재하는 이유에 대해 인텔 AXG 직원을 포함하여 아무도 만족스럽게 대답할 수 없었음. 인텔이 한 제품 라인에 집중하는 것이 성공 가능성을 높이지 않을까?
     * AI 과학자들이 요즘 어떻게 일하는지 궁금함. 정말로 Cudakernels를 해킹하나, 아니면 pytorch와 같은 고급 툴킷으로 모델을 연결하나? 후자라면, pytorch가 다양한 하드웨어에 최적화된 백엔드를 제공한다면, CUDA가 정말로 큰 장벽인가?
"
"https://news.hada.io/topic?id=13712","70B 언어 모델을 집에서 파인튜닝하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         70B 언어 모델을 집에서 파인튜닝하기

     * FSDP(Fully Sharded Data Parallel) 와 QLoRA(Quantization + Low-Rank Adaptation"")를 결합한 오픈 소스
     * 일반 데스크톱 컴퓨터와 표준 게이밍 GPU 두 개로 70b 크기의 언어 모델을 효율적으로 미세조정 가능

배경

     * 데이터 센터급 하드웨어와 데스크톱 컴퓨터에 탑재된 게이밍 GPU는 큰 성능 차이가 없음에도 불구하고, 가격 차이가 매우 큼
     * 게이밍 GPU는 메모리가 적어 대규모 언어 모델을 훈련시키기 어려움
     * Answer.AI는 이 문제를 해결하기 위해 저렴한 게이밍 GPU를 사용하여 최고의 오픈 소스 모델을 훈련시키는 방법을 찾고자 함

QLoRA: 단일 GPU에서 더 큰 모델 훈련하기

     * QLoRA는 양자화와 LoRA의 결합으로, 모델의 가중치를 4비트로 줄여 GPU 메모리 사용량을 감소시킴.
     * LoRA는 대규모 언어 모델 전체를 훈련시키지 않고, 작은 어댑터 행렬을 추가하여 훈련함으로써 메모리 제약을 피함.
     * QLoRA는 65b 모델을 48GB 카드에서 훈련할 수 있게 하지만, 70b 모델을 24GB 게이밍 GPU에서 훈련하기에는 여전히 부족함.

FSDP: 여러 GPU로 훈련 규모 확장하기

     * FSDP(Fully Sharded Data Parallel)는 모델의 파라미터를 여러 GPU에 분산시켜 동시에 사용할 수 있게 함.
     * FSDP는 DDP(Distributed Data Parallel)의 성능을 단일 GPU로는 수용할 수 없는 큰 모델에도 적용할 수 있게 함.
     * 예를 들어, 70b(700억 매개변수) 비양자화 모델은 140GB의 RAM을 사용하지만(각 매개변수가 16비트, 즉 2바이트로 저장되기 때문에) NVIDIA의 H100 카드(단일 카드당 약 $40,000의 비용!)도 부족. 80GB RAM이 필요
          + 그러나 FSDP를 사용하면 4개의 H100 GPU를 결합하여 총 320GB RAM을 만들 수 있음. 그리고 $150000을 절약

FSDP와 QLoRA 결합하기

     * Answer.AI는 QLoRA로 모델 크기를 줄이고, FSDP로 이를 여러 24GB 게이밍 카드에 분산시켜 효율적인 훈련을 가능하게 함.
     * 이를 통해 70b 모델을 일반 게이밍 GPU 두 개로 훈련할 수 있게 됨.
     * 2023년 말에 FSDP와 QLoRA를 결합하는 아이디어를 논의한후 필요한 문제들을 해결함.
     * 이 과정에서 다양한 기술과 라이브러리들이 결합되어 사용됨
          + 양자화된 매개변수를 모델의 ""Computation Type""과 동일한 데이터 유형으로 저장
          + 전체 그라디언트를 저장하지 않는 대신 모델 전체의 여러 '체크포인트'에 활성화를 저장한 다음 필요에 따라 순방향 계산 단계를 다시 실행하여 그라디언트를 다시 계산하는 그라디언트 체크포인트
          + CPU 를 사용하지 않을 때 GPU가 아닌 CPU RAM에 무게를 저장하여 필요한 GPU 메모리를 대폭 줄이는 CPU 오프로딩
          + Flash Attention 2 :메모리 최적화된 Cuda 커널을 사용하여 Attention을 효율적으로 계산
          + HQQ(Half-Quadratic Quantization)를 발견하여 FSDP와 연동(GPTQ에 비해 50배 빠르고 정확)

FSDP/QLoRA 사용 방법

     * FSDP를 사용하려면 두 개 이상의 GPU가 필요함. (Runpod 에서 시간당 $0.6에 듀얼 3090 박스 이용 가능)
     * 최신 버전의 Transformers, PEFT, Bitsandbytes(및 이를 사용하는 경우 HQQ)를 설치하고, Answer.AI의 저장소를 클론한 후 README를 따라 실행함.
     * 2개의 24GB 카드에서 알파카를 훈련하려면
       python train.py --train_type qlora --dataset alpaca --batch_size 8 --gradient_accumulation_steps 2 --output_dir qlora_output --log_to wandb
     * 아직 초기 단계임(알파/프리뷰)
     * 몇주 안에 벤치마킹 결과도 공개 예정

GN⁺의 의견

     * 이 기사는 AI와 머신 러닝 분야에 종사하는 사람들에게 매우 흥미로울 것임. 특히, 대규모 언어 모델을 효율적으로 훈련시킬 수 있는 새로운 방법을 제시하기 때문에 주목할 만함.
     * 이 기술이 성공적으로 널리 사용된다면, AI 연구와 개발에 있어서 비용 장벽을 크게 낮출 수 있을 것임. 이는 소규모 연구실이나 개인 개발자들에게도 큰 기회가 될 수 있음.
     * 하지만, 이러한 접근 방식이 실제로 널리 채택되기 위해서는 안정성과 사용 편의성이 중요한 요소가 될 것임. 현재는 아직 초기 단계이므로, 커뮤니티의 테스트와 피드백을 통해 시스템이 개선되어야 함.
     * 새로운 기술을 도입할 때는 항상 기존 시스템과의 호환성, 성능, 비용 등을 고려해야 함. 이 기술을 선택함으로써 얻을 수 있는 이점은 대규모 모델 훈련의 접근성 향상이지만, 아직 초기 단계이므로 안정성과 지원 측면에서 단점이 있을 수 있음.

        Hacker News 의견

     * 이 글은 훌륭하지만, 'nibble'이라는 단어를 사용할 기회가 많았는데 모두 놓쳤다는 점이 아쉽다.
          + 글이 흥미롭지만, 'nibble'이라는 단어를 활용하지 않은 점에 대한 아쉬움을 표현함.
     * 4비트 가중치를 사용하는 시스템으로 70b 모델을 미세 조정하는 데 얼마나 걸릴지, 예를 들어 모델 크기, 훈련 크기, 훈련 비용, 이 기술로 예상되는 품질 손실을 나타내는 표가 있으면 소비자로서 관심이 갈 것 같다.
          + 미세 조정 최종 비용에 대한 관심을 나타내며, 모델 크기, 훈련 비용 등을 포함한 상세 정보를 요구함.
     * (-1,0,1) 인코딩을 적용할 수 있는지 궁금하다. 해당 모델이 나오면 answer.ai가 같은 기술을 사용해 두 개의 작은 GPU로 큰 모델을 미세 조정할 수 있는지, 그리고 비용/효익 분석을 요청한다.
          + 새로운 인코딩 기법에 대한 기술 적용 가능성과 비용 대비 효과 분석에 대한 질문을 제기함.
     * 이런 연구는 개인 사용자가 LLM 시장에서 경쟁할 수 있게 해주는 데 매우 유용하다. '제로에서 하나로'라는 책의 내용과 일맥상통하는 훌륭한 작업이다.
          + 연구가 개인 사용자에게 유용하며, 특정 문제를 해결하는 데 기여하는 점을 긍정적으로 평가함.
     * NeurIPS 효율성 챌린지에서 모든 상위 입상작이 QLoRA를 사용했다는 점을 언급하지 않았는데, 이는 QLoRA의 중요성과 유용성을 보여주는 좋은 예시다.
          + QLoRA 기술의 중요성과 유용성을 강조하며, 해당 기술이 대회에서 인정받았음을 언급함.
     * '오픈 소스' LLM에서 본 가장 흥미롭고 건설적인 접근 방식이다. 학계도 이를 표준으로 삼았으면 좋겠다.
          + 오픈 소스 LLM에 대한 접근 방식을 높이 평가하며, 학계에서도 이를 표준으로 채택하기를 바람.
     * Metal에서의 빠른 훈련이 더 일찍 나왔으면 하는 바람이 있다. 현재로서는 Mac Studio가 대규모 모델 추론에 훨씬 저렴하고 충분히 빠르지만, 훈련 솔루션은 거의 존재하지 않는다.
          + Metal 플랫폼에서의 빠른 훈련 기대와 현재 Mac Studio의 효율성에 대한 의견을 제시함.
     * 기술적 글쓰기의 품질과 명확성이 훌륭하다.
          + 기술 문서의 품질과 명확성에 대한 칭찬을 함.
     * LLM(70B) 가중치를 나만의 데이터로 재훈련할 수 있는지 궁금하다.
          + 개인 데이터로 LLM 재훈련 가능성에 대한 질문을 함.
     * 한정된 하드웨어 예산으로 LLM을 미세 조정하는 사람들에게 이는 획기적인 돌파구다.
          + 제한된 하드웨어 예산을 가진 사용자들에게 이 기술이 큰 진전이 될 것이라고 평가함.
     * FSDP 대신 DeepSpeed를 선택한 이유가 궁금하다.
          + FSDP와 DeepSpeed 중 선택한 이유에 대한 궁금증을 표현함.
     * 모델을 미세 조정할 수 있게 되었을 때 성능 튜닝을 위해 사용한 도구가 있는지 궁금하다.
          + 성능 튜닝을 위해 사용된 도구에 대한 질문을 함.
     * 스파스화를 사용해본 적이 있는지, 이를 통해 더 적은 RAM으로 미세 조정이 가능할 것 같다는 생각이 든다.
          + 스파스화 기술 사용과 그로 인한 RAM 절감 가능성에 대한 의견을 제시함.
"
