"https://news.hada.io/topic?id=15882","Anthropic, 안드로이드용 Claude 앱 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Anthropic, 안드로이드용 Claude 앱 공개

     * 멀티 플랫폼 지원으로 웹/iOS/Android에서 AI와의 대화를 이어나갈 수 있음
     * 비젼 기능 지원 : 사진을 찍거나 올려서 실시간 이미지 분석 가능
     * 다국어 지원으로 실시간 언어 번역
     * 3.5 Sonnet 은 무료로 이용 가능하며, Pro/Team 플랜 구독자는 더 높은 Rate Limit 지원

   아티팩트는 지원을 안해서 아쉽더라고요 ㅠㅠ
"
"https://news.hada.io/topic?id=15980","Apple, 개방형 AI 역량 과시: 새로 공개한 모델이 Mistral보다 뛰어난 성능 발휘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Apple, 개방형 AI 역량 과시: 새로 공개한 모델이 Mistral보다 뛰어난 성능 발휘

     * Apple의 DataComp for Language Models 프로젝트 연구팀이 Hugging Face에 오픈 DCLM 모델 패밀리를 공개
     * 패키지에는 7B 및 1.4B 파라미터의 두 가지 주요 모델이 포함되어 있음
     * 70억(7B) 파라미터 모델은 벤치마크에서 좋은 성능을 보이며, Mistral-7B를 능가하고 Llama 3 및 Gemma와 같은 다른 주요 오픈 모델에 근접
     * 이 프로젝트는 모델 가중치, 학습 코드, 사전 학습 데이터셋을 공개하여 진정한 오픈 소스로 만들어짐

DCLM(DataComp for Language Models)

     * DataComp 프로젝트는 특히 멀티모달 도메인에서 AI 모델을 학습시키기 위한 고품질 데이터셋을 설계하기 위한 협업 노력으로 설명될 수 있음
     * 실험을 통해 기계 학습(ML) 모델이 더 큰 데이터셋에서 고품질 데이터를 자동으로 필터링하고 선택하는 모델 기반 필터링이 고품질 학습 세트를 구성하는 데 핵심이 될 수 있다는 것을 알아냄
     * 결과 데이터셋인 DCLM-Baseline은 70억 및 14억 파라미터의 새로운 DCLM 디코더 전용 트랜스포머 영어 언어 모델을 처음부터 학습시키는 데 사용됨
     * 70억 모델은 OpenLM 프레임워크를 기반으로 하는 사전 학습 레시피를 사용하여 2.5조개의 토큰으로 학습되었으며, MMLU에서 63.7%의 5-샷 정확도를 제공
     * 이는 이전의 최첨단 오픈 데이터 언어 모델인 MAP-Neo에 비해 6.6%p 향상된 것이며, 학습에 40% 적은 컴퓨팅을 사용한 것

강력하고 더 작은 모델

     * 14억(1.4B) 버전의 모델도 MMLU, Core, Extended 테스트에서 인상적인 성능을 보여줌
     * 5-샷 MMLU 테스트에서 41.9%를 기록했는데, 이는 Hugging Face의 최근 출시된 SmolLM을 포함한 이 카테고리의 다른 모델보다 상당히 높음
     * 현재 더 큰 모델은 Apple의 Sample Code License에 따라 사용할 수 있으며, 더 작은 모델은 상업적 사용, 배포 및 수정을 허용하는 Apache 2.0에 따라 공개되었음
     * HF 라이브러리에는 70억 파라미터 모델의 instruction-tuned 버전도 있음
     * 이는 데이터 큐레이션의 효과를 강조하는 초기 연구라는 점에 유의해야 함
          + 이 모델은 Apple 기기용이 아니며 테스트 학습 데이터에서 특정 편향이 나타나거나 유해한 반응을 일으킬 수 있음

   아이폰에 달아야 효과가 극대화 되니까요
   삼성도 온디바이스에 초점 맞추고 있고

   Apple, 기기 내 사용을 목표로 하는 8개의 소형 AI 언어 모델 릴리즈

   애플은 계속 온디바이스 AI를 위한 작은 모델에 집중하는 군요. 빨리 함 써보고 싶네요.

   내년부터는 본격적으로 써볼 수 있지 않을까 싶네요 ㅎㅎ
"
"https://news.hada.io/topic?id=15912","Awk 창시자 Dr. Brian Kernighan과의 짧은 인터뷰 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Awk 창시자 Dr. Brian Kernighan과의 짧은 인터뷰 (2022)

     * AWK 창시자 Dr. Brian Kernighan과의 짧은 인터뷰
          + Dr. Brian Kernighan 소개
               o Dr. Brian Kernighan은 캐나다 출신의 컴퓨터 과학자로, Bell Labs에서 UNIX 개발에 기여함
               o Dennis Richie와 함께 C 프로그래밍 언어에 관한 기본서인 ""The C Programming Language""를 공동 저술함
               o 2000년부터 Princeton University에서 다음 세대 프로그래머를 양성하고 있음
               o 최초의 ""Hello World!"" 프로그램을 작성한 인물로 유명함
          + AWK의 새로운 아이디어
               o AWK의 주요 아이디어는 연관 배열(associative arrays)임
               o 당시에는 새로운 개념이었으나, 현재는 대부분의 언어에서 라이브러리 함수(hashmaps in Java or C++)나 언어 자체(dictionaries in Perl and Python)로 사용됨
               o 연관 배열은 매우 강력한 구조로, 다양한 데이터 구조를 시뮬레이션하는 데 사용될 수 있음
               o 패턴-액션 패러다임도 당시에는 널리 사용되지 않았으나, 특정 계산을 조직하는 효과적인 방법임
          + 프로그래밍 언어를 만들 때 참조한 자료
               o Dr. Kernighan: ""없음""
               o 1970년대 당시에는 새로운 특수 목적의 언어들이 많았고, 참조할 만한 선행 자료가 거의 없었음
               o Yacc는 문법을 쉽게 만들고 실험할 수 있게 해주는 중요한 도구였음
               o Lex는 어휘 수준에서 동일한 역할을 하여 많은 지루한 코드를 규칙 세트로 대체함
               o Lex와 Yacc는 패턴-액션 언어의 예시로, 서로 긍정적인 순환을 이루었음
          + 프로그래밍 언어 설계에 관심 있는 젊은이들에게 조언
               o 작은 특수 목적의 언어를 설계하고 구현해보라고 조언함
               o 이는 매우 재미있고 유용하며, Rust나 C++의 대체 언어를 만드는 것보다 훨씬 쉬움
               o 자동화할 수 있는 작업을 찾아서 간단한 컴파일러와 런타임을 만들라고 권장함
               o Jon Bentley가 오래전에 쓴 관련 기사가 여전히 유효함
          + 이미지 출처
               o Wikimedia Commons

GN⁺의 정리

     * Dr. Brian Kernighan은 UNIX와 C 언어 개발에 기여한 중요한 인물로, 연관 배열과 패턴-액션 패러다임을 도입한 AWK 언어의 창시자임
     * 연관 배열은 현재 대부분의 프로그래밍 언어에서 사용되는 강력한 데이터 구조임
     * 젊은 프로그래머들에게는 작은 특수 목적의 언어를 설계하고 구현해보는 것이 유익함
     * Yacc와 Lex는 문법과 어휘 분석을 쉽게 해주는 도구로, 패턴-액션 언어의 좋은 예시임

        Hacker News 의견

     * Brian Kernighan은 2000년에 Princeton의 CS 부서에 합류했지만, 1993년 Bell Labs Research에 있을 때 이미 한 수업을 가르쳤음
     * 한 학생이 386sx 노트북(초기 Linux 실행)을 수업에 가져와 awk에 대한 질문에 답을 제공했음. Brian은 비교적 일찍 Linux에 노출되었음
     * 1994년 가을에 AT&T의 무료 전화 디렉토리를 인터넷에 올린 것에 대한 Brian의 글이 있음
          + 링크
     * Lex Fridman이 Brian Kernighan과 1시간 반 인터뷰를 했음
          + 링크
     * Aho와 Weinberger와 함께한 더 포괄적인 인터뷰가 ""Masterminds of Programming"" 책에 포함되어 있음. 강력히 추천함
     * 예전에 누군가 Usenet 서명에 ""perl은 마가린, awk는 버터""라고 적었음. Perl을 발견한 후 awk를 덜 사용하게 되었음
     * ""The Unix Programming Environment"" 책을 읽고 있음. awk는 현재 인기 있는 언어(js, lua, python, perl, tcl)와 유사한 부분이 많음
     * 1979년 7번째 에디션 Unix 버전의 awk는 2680줄의 소스 코드로 구성되어 있고, 실행 파일은 46k로 pdp-11의 64k 주소 공간에서 실행되었음. 사용자 정의 함수가 없었음
     * bc는 사용자 정의 함수가 있었음
     * 80년대 호주 Unix 컨퍼런스에서 Dr Kernighan이 서명한 K&R 책을 소유하고 있음. 소중한 소장품임
     * 그 책과 ""The Practice of Programming"" 책, Byte 잡지 등이 1980년대의 ""Stack Overflow"" 역할을 했음
     * 연관 배열을 ""newish""라고 언급한 것이 흥미로움. Lisp에서는 거의 20년 전에 등장했음
     * regex에서 lex, yacc, awk로 이어지는 개발 순서가 매우 설득력 있게 느껴짐
     * 매우 간결함
     * Awk 창시자: 재미있음
"
"https://news.hada.io/topic?id=15972","검증이 아닌 Parse 기술 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         검증이 아닌 Parse 기술 (2019)

파싱, 검증하지 말라

  타입 주도 설계의 본질

     * 타입 주도 설계(type-driven design)를 설명하는 간단한 슬로건: 파싱, 검증하지 말라
     * 이 슬로건은 타입 시스템을 활용하여 코드의 안전성과 정확성을 높이는 방법을 의미함

    가능성의 영역

     * 정적 타입 시스템은 특정 함수가 구현 가능한지 여부를 쉽게 판단할 수 있게 해줌
     * 예시: foo :: Integer -> Void는 구현 불가능함 (Void 타입은 값을 가질 수 없음)
     * 예시: head :: [a] -> a 함수는 리스트가 비어 있을 경우 정의되지 않음

    부분 함수를 전체 함수로 바꾸기

      기대 관리

     * head 함수는 리스트가 비어 있을 때 값을 반환할 수 없으므로 Maybe 타입을 사용하여 Nothing을 반환할 수 있게 함
     * 그러나 이는 사용 시 불편함을 초래할 수 있음

      기대를 전달하기

     * NonEmpty 타입을 사용하여 비어 있지 않은 리스트를 표현함으로써 head 함수가 항상 값을 반환하도록 보장할 수 있음
     * NonEmpty 타입을 사용하면 불필요한 체크를 제거하고, 타입 시스템을 통해 오류를 컴파일 타임에 잡을 수 있음

    파싱의 힘

     * 파싱과 검증의 차이는 정보를 어떻게 보존하느냐에 있음
     * validateNonEmpty 함수는 리스트가 비어 있지 않음을 검증하지만, 정보를 보존하지 않음
     * parseNonEmpty 함수는 리스트가 비어 있지 않음을 검증하고, NonEmpty 타입으로 정보를 보존함

    검증의 위험성

     * 검증 기반 접근 방식은 ""shotgun parsing""이라는 문제를 초래할 수 있음
     * 이는 프로그램이 입력의 일부를 처리한 후 나머지 입력이 유효하지 않음을 발견하는 상황을 초래할 수 있음
     * 파싱은 프로그램을 두 단계로 나누어, 첫 번째 단계에서 입력의 유효성을 확인하고, 두 번째 단계에서 유효한 입력만을 처리하도록 함

  실전에서의 파싱

     * 데이터 타입에 집중하여 함수의 타입 시그니처를 가능한 한 구체적으로 만듦
     * 불법 상태를 표현할 수 없는 데이터 구조를 사용하고, 가능한 한 빨리 데이터를 구체적인 표현으로 변환함
     * 데이터 타입이 코드를 안내하도록 하고, 코드가 데이터 타입을 제어하지 않도록 함
     * m ()를 반환하는 함수는 신중하게 사용해야 함
     * 여러 번에 걸쳐 데이터를 파싱하는 것을 두려워하지 말아야 함
     * 데이터의 비정규화된 표현을 피하고, 필요한 경우 캡슐화를 통해 관리해야 함
     * 검증기를 파서처럼 보이게 만드는 추상 데이터 타입을 사용해야 함

  요약, 반성, 관련 읽을거리

     * Haskell의 타입 시스템을 최대한 활용하는 것은 어렵지 않으며, 최신 언어 확장을 사용할 필요도 없음
     * 핵심 아이디어는 ""전체 함수 작성""이며, 이는 간단하지만 실천하기 어려울 수 있음
     * 관련 읽을거리로는 Matt Parson의 블로그 포스트 ""Type Safety Back and Forth""와 Matt Noonan의 논문 ""Ghosts of Departed Proofs""를 추천함

GN⁺의 정리

     * 이 글은 Haskell의 타입 시스템을 활용하여 코드의 안전성과 정확성을 높이는 방법을 설명함
     * 파싱과 검증의 차이를 이해하고, 파싱을 통해 입력의 유효성을 확인하는 것이 중요함을 강조함
     * 타입 시스템을 활용하여 불법 상태를 표현할 수 없는 데이터 구조를 사용하고, 가능한 한 빨리 데이터를 구체적인 표현으로 변환하는 것이 중요함
     * 관련 읽을거리로는 Matt Parson의 블로그 포스트와 Matt Noonan의 논문을 추천함

        Hacker News 의견

     * 이 조언과 기사는 매우 유익함
     * 정적으로 타입이 지정된 함수형 언어를 사용하지 않는 사람들에게도 유용함
     * 이 아이디어는 패러다임을 초월함
     * 80~90년대 객체지향 문헌에서도 유사한 개념을 찾을 수 있음, 예를 들어 Design by Contract
     * TypeScript는 런타임에 타입을 세분화하는 방식으로 작성되는 경우가 많음
     * Design by Contract는 Clojure의 spec에 영향을 미쳤을 것임 (Clojure는 동적 언어임)
     * 기본적으로 이는 가정과 보장에 관한 것임 (요구와 제공)
     * 가정이 확인되고 보장이 이루어지면 프로그램의 다른 부분에서 중복된 가정을 다시 확인할 필요가 없음
     * 코드에서 이미 보장된 속성이 다시 확인되는 것을 보면 혼란스러울 수 있음, 이는 코드 이해와 개선을 어렵게 만듦
     * 이 패턴은 현대 C#에서도 잘 작동하며 공간 절약 효과도 있음
          + 예시 코드:
if(!Whatever.TryParse<Thingy>(input, out var output)) output = some-sane-default;

          + 예시 코드:
if(!Whatever.TryParse<Thingy>(input, out var output)) throw new ApplicationException($""Not a valid Thingy: {input}"");

          + 커널 모드 드라이버에서는 후자를 사용하지 말 것을 권장함
     * 강력한 타입 시스템을 활용하여 오류 사례를 표현할 수 없게 만드는 것이 좋음, 이는 소프트웨어 버그를 줄이는 데 도움이 됨
     * 문제를 생각하고 디자인을 따르는 데 시간이 더 걸리지만, 많은 경우 그 시간이 가치가 있음
     * ""Parse, don’t validate""라는 슬로건이 타입 기반 설계를 잘 요약함
     * 개인적으로는 ""항상 단일 생성자에서만 유효성 검사를 수행""하는 것이 좋음, 이렇게 하면 유효하지 않은 객체가 전혀 존재하지 않게 됨
     * 객체를 수정하려면 동일한 생성자를 다시 호출하여 새 상태를 구성하는 방식으로 구현해야 함
     * qmail의 섹션 5가 떠오름, 여기에는 ""파싱하지 말라""와 ""좋은 인터페이스와 사용자 인터페이스가 있다""는 내용이 포함됨
     * 중간 규모의 프로그래밍 수업을 가르친다면 학생들에게 이 제안을 비교하고 대조하는 에세이를 작성하게 할 것임, 각 제안은 배울 점이 있으며 처음에는 모순처럼 보일 수 있음
     * 관련 자료: Richard Feldman의 ""Making Impossible States Impossible""
          + YouTube 링크
     * 이전 논의:
          + 링크 1
          + 링크 2
     * Crowdstrike에 전달됨
     * 2000년대 중반 XML 열풍 때 누군가의 댓글이 떠오름, 많은 조직이 XML을 선택한 이유는 XML이 파서를 제공하기 때문임
     * 파서를 작성하는 것이 어렵지 않고 재미있음에도 불구하고, 사람들이 파서를 작성하지 않으려는 이유를 이해할 수 없음
     * Protocol Buffers의 ""required"" 키워드가 큰 실수였다는 의견과 반대되는 것인지 궁금함
          + Cap'n Proto FAQ 링크
     * 유연하고 검증되지 않은 파싱과 검증된 파싱 기능을 모두 갖추는 것이 최선일 것임
"
"https://news.hada.io/topic?id=15911","SAPwned: SAP AI 취약점으로 고객의 클라우드 환경 및 개인정보 노출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              SAPwned: SAP AI 취약점으로 고객의 클라우드 환경 및 개인정보 노출

AI에 고립 문제가 있는가?

  요약

   Wiz 연구팀은 여러 AI 서비스 제공업체의 테넌트 고립 문제를 연구하였음. AI 인프라가 많은 비즈니스 환경에서 필수 요소가 되면서 이러한 공격의 영향이 점점 더 커지고 있음. 연구 결과는 Black Hat 컨퍼런스에서 발표될 예정임.

  SAP AI Core 연구

   SAP AI Core는 HANA 및 기타 클라우드 서비스와 통합되어 고객의 내부 데이터에 접근할 수 있음. 연구팀은 악의적인 행위자가 이러한 고객 비밀에 접근할 수 있는지 확인하고자 하였음. 연구 결과, 악의적인 AI 모델과 훈련 절차를 실행하여 고객의 비밀 파일과 클라우드 환경에 접근할 수 있었음.

  주요 취약점

     * SAP의 내부 컨테이너 레지스트리에서 Docker 이미지를 읽고 수정할 수 있었음
     * Google Container Registry에서 SAP의 Docker 이미지를 읽고 수정할 수 있었음
     * SAP의 내부 Artifactory 서버에서 아티팩트를 읽고 수정할 수 있었음
     * SAP AI Core의 Kubernetes 클러스터에서 클러스터 관리자 권한을 획득할 수 있었음
     * 고객의 클라우드 자격 증명 및 비공개 AI 아티팩트에 접근할 수 있었음

  취약점 세부 사항

    네트워크 제한 우회

   Pod에 shareProcessNamespace와 runAsUser 설정을 통해 Istio 프록시의 구성에 접근할 수 있었음. 이를 통해 내부 네트워크의 트래픽 제한을 우회할 수 있었음.

    Loki 서버의 AWS 토큰 노출

   Grafana Loki 서버의 /config 엔드포인트를 통해 AWS 비밀에 접근할 수 있었음. 이를 통해 AI Core 서비스와 고객 Pod의 로그에 접근할 수 있었음.

    인증되지 않은 EFS 공유

   AWS Elastic File System(EFS) 인스턴스가 기본적으로 공개 설정되어 있어 자격 증명 없이 파일을 볼 수 있었음. 이를 통해 대량의 AI 데이터에 접근할 수 있었음.

    인증되지 않은 Helm 서버

   Helm 서버의 gRPC 인터페이스를 통해 SAP의 Docker Registry와 Artifactory 서버의 비밀에 접근할 수 있었음. 이를 통해 내부 이미지와 빌드를 읽고 수정할 수 있었음.

    K8s 클러스터 노출

   Helm 서버의 install 명령을 통해 클러스터 관리자 권한을 획득할 수 있었음. 이를 통해 다른 고객의 Pod에 접근하고 민감한 데이터를 훔칠 수 있었음.

  결론

   SAP AI Core 연구는 심층 방어의 중요성을 보여줌. 내부 네트워크를 신뢰할 수 있는 것으로 간주하는 것은 위험할 수 있음. AI R&D 과정에서 발생하는 고유한 도전 과제를 해결하기 위해 적절한 보호 장치가 필요함.

  GN⁺의 정리

     * AI 인프라의 테넌트 고립 문제는 중요한 보안 이슈임.
     * SAP AI Core의 취약점은 악의적인 행위자가 고객의 비밀 데이터에 접근할 수 있게 함.
     * 연구 결과는 AI 모델 실행 시 격리 및 샌드박싱 표준을 개선할 필요성을 강조함.
     * 유사한 기능을 가진 다른 프로젝트로는 Google AI Platform과 Microsoft Azure Machine Learning이 있음.

        Hacker News 의견

     * AI 제품의 문제라기보다는 k8s 설정의 취약점에 대한 문제임
     * SAP가 Wiz의 연구가 클러스터 관리자 권한을 얻기 전에 왜 방해되지 않았는지에 대한 철저한 검토가 필요함
          + SAP가 이 활동에 대한 경고를 받았는지, 제대로 조사했는지 궁금함
          + SAP가 의심스러운 네트워크 활동에 대한 적절한 경고를 제공해야 하는 규정을 따르고 있는지, 이 연구가 그 규정을 충족하지 못함을 보여줄 수 있는지 궁금함
     * 2020년부터 사용 중단된 Tiller 인스턴스가 실행 중인 것에 충격을 받음
     * 단일 K8s 클러스터에서 강력한 멀티 테넌시 보장을 기대하는 것은 매우 나쁜 상황임
          + 주요 클라우드 서비스들은 고객 간에 VM 경계와 별도의 K8s 클러스터를 사용함
          + Microsoft도 몇 년 전 K8s를 주요 보안 경계로 기대했던 기능 제품에서 비슷한 문제를 겪음
     * Wiz를 사용해 본 사람이 있는지 궁금함
          + 기업 소프트웨어 회사로서 가장 빠르게 성장한 사례일 수 있음
          + 1.5년 만에 $100M 달성
          + 3년 말에 $350M 달성
     * 네트워크를 무단으로 침투하여 취약점을 찾아 블로그 콘텐츠를 만드는 회사들은 기소되어야 한다고 생각함
          + 이 글은 취약점 공개로 위장한 공격적인 글처럼 들림
          + ""협조에 감사드립니다""라는 문구는 약간의 강요처럼 들림
     * 회사에서 제품의 연간 펜테스트를 프로덕션 환경에서 실행하도록 설득한 것이 기쁨
          + 특정 제품이나 시스템에 초점을 맞추지만 모든 것이 범위에 포함됨
          + 첫 번째 테스트가 실행 중이며 아직 아무도 불만을 제기하지 않음
     * 고객의 계정 데이터가 동일한 고객에게 노출되는 것으로 읽히는지 궁금함
          + 예외는 일부 로그임
     * 보안 연구원으로서 텍스트를 픽셀화하여 편집하는 것이 좋지 않은 선택이라는 것을 알았을 것임
          + 관련 링크
"
"https://news.hada.io/topic?id=15920","구글 단축주소(goo.gl)이 2025년 8월부터 작동하지 않습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 구글 단축주소(goo.gl)이 2025년 8월부터 작동하지 않습니다

     * 구글은 2019년 3월부터 goo.gl로 시작하는 단축주소 생성을 중단했습니다.
     * 기존에 만들어진 단축주소는 여전히 작동했습니다.
     * 하지만 2025년 8월 25일부터 단축주소가 완전히 작동을 멈추고 404를 띄우게 됩니다.
     * 2024년 8월 23일부터 유저가 goo.gl로 시작하는 단축주소를 클릭하면 '이 링크는 가까운 시일 내에 더 이상 작동하지 않습니다'라는 중간 페이지가 나올 예정입니다.
          + 302 리디렉션을 사용하는 경우, 이 중간 페이지 때문에 흐름이 꼬일 수도 있습니다.
          + 중간 페이지가 방해하는 경우, 기존 goo.gl 링크에 쿼리 매개변수 'si=1'을 추가해서 억제할 수 있다고 합니다.

   han.gl. 사용하면됩니다.

   아 진짜

   killed by google.......

   단축주소 서비스에 들어가려고 하니 자꾸 어카운트 관리로 가버리는데 저만 그런가요?
"
"https://news.hada.io/topic?id=15975","인텔 13세대 및 14세대 모바일 CPU 충돌 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      인텔 13세대 및 14세대 모바일 CPU 충돌 문제

  PC 구성 요소

    CPU

      Intel, 13세대 및 14세대 모바일 CPU 불안정성 문제 인정

     * Intel은 13세대 및 14세대 모바일 CPU의 불안정성 문제를 인정했음
     * 데스크탑 칩과는 다른 원인으로 인해 발생하는 문제임
     * Intel은 사용자들에게 시스템 제조업체에 문의할 것을 권장함

      Alderon Games의 통계

     * Alderon Games는 Raptor Lake 및 Raptor Lake Refresh Core i9의 충돌률 통계를 공유했음
     * 모바일 버전의 충돌 빈도가 데스크탑 칩보다 낮지만 여전히 문제가 있음

      Reddit에서의 반응

     * Alderon Games의 창립자 Matthew Cassells는 Reddit에서 Intel의 성명에 대해 언급했음
     * 모바일 칩도 데스크탑 칩과 동일한 방식으로 충돌한다고 주장함

      Intel의 대응

     * Intel은 모바일 칩이 데스크탑 칩과 동일한 문제를 겪지 않는다고 주장함
     * 모바일 칩은 더 엄격한 TDP 가이드라인을 따르기 때문에 불안정성이 덜할 수 있음

      시장 상황

     * Intel의 불안정성 문제는 소비자 신뢰에 영향을 미쳤음
     * AMD의 최신 Ryzen 9000 프로세서가 곧 출시될 예정임

  GN⁺의 정리

     * Intel의 13세대 및 14세대 모바일 CPU에서 불안정성 문제가 보고되었음
     * 모바일 칩의 불안정성 원인은 데스크탑 칩과 다름
     * Alderon Games는 모바일 칩도 데스크탑 칩과 유사한 충돌 문제를 겪고 있다고 주장함
     * Intel은 모바일 칩이 더 엄격한 TDP 가이드라인을 따르기 때문에 불안정성이 덜할 수 있다고 주장함
     * AMD의 Ryzen 9000 프로세서가 곧 출시될 예정임

        Hacker News 의견

     * 6개월이 지나도 문제 해결이 되지 않아 모든 CPU가 고장 날 가능성이 있음
          + Intel이 문제를 숨기고 있다면 큰 소송으로 이어질 가능성이 있음
     * YouTuber들의 소문과 실제 데이터 부족으로 인해 회의적인 입장
          + 일부 W680 보드가 무제한 전력 프로파일로 출하되어 CPU를 손상시킬 수 있음
          + Asus B760M 보드도 무제한 전력 프로파일로 출하되었으나, ""Intel Default""로 변경 후 문제 없음
          + 대형 브랜드 시스템(Dell/HP/Lenovo 등)에서의 실패 보고는 찾지 못함
          + Intel이 자체 데스크탑 보드와 BIOS를 다시 생산하면 좋을 것 같음
     * 데스크탑 CPU 문제는 이전에 논의된 것과 다름
          + 관련 링크: 1, 2
     * 2016년부터 Skylake 이후 CPU 버그가 더 심각해질 것이라는 예측이 있었음
          + 관련 링크: 3
     * 몇 년 전만 해도 AMD를 구매한다고 하면 이상하게 보였으나, 이제는 신뢰할 수 있는 유일한 x64 벤더로 보임
          + Intel은 한때 신뢰성의 왕이었으나, 최근 몇 년간 버그의 왕이 된 것 같음
     * ECC RAM이 도움이 되었을 것이나, 소비자 CPU에서 제외됨
          + 서버급 제품에서 ECC를 업셀 기능으로 사용하려는 재정적 최적화 때문임
     * 다양한 하드웨어 및 소프트웨어 문제로 인해 데스크탑과 동일한 하드웨어 문제는 아님
          + 이는 좋은 소식임
     * 백업 노트북이 12세대이므로 괜찮을 것 같음
          + 13세대에서는 문제가 없었음
     * i7-12900k와 z690 시스템 조립 후 두 가지 관찰:
          + DDR5는 이전 세대보다 덜 안정적이며, 타이밍 동기화 민감성으로 인해 4개의 6000 스틱을 사용할 때 12시간 이상 안정적이지 않음
          + 소비자 ATX 플랫폼의 TDP 한계에 도달했으며, 마더보드 유지 메커니즘의 한계로 인해 애프터마켓 심 사용이 필요함
          + 더 나은 냉각이 더 높은 성능으로 직결됨
          + Intel 13세대와 14세대는 약간의 열 개선이 있었음
     * 원본 게시물이 더 유익함
          + 관련 링크: 4
          + Intel 13900K와 14900K 프로세서, 13700, 14700 및 기타 관련 프로세서 포함 가능성 있음
"
"https://news.hada.io/topic?id=15895","xLSTM을 활용한 장기 시계열 예측: XLSTMTime","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    xLSTM을 활용한 장기 시계열 예측: XLSTMTime

xLSTMTime: Long-term Time Series Forecasting With xLSTM

     * 최근 몇 년간, 변환기 기반 모델은 다변량 장기 시계열 예측(LTSF)에서 두드러진 성과를 보였음. 그러나 높은 계산 요구, 시간적 역학 포착의 어려움, 장기 종속성 관리 등의 문제에 직면해 있음
     * 단순한 선형 구조를 가진 LTSF-Linear의 등장으로 변환기 기반 모델을 능가하는 성과를 보였으며, 이는 시계열 예측에서 변환기의 유용성을 재평가하게 만듦
     * 이에 대응하여, 이 논문은 최근의 아키텍처인 확장 LSTM(xLSTM)을 LTSF에 적용한 결과를 제시함. xLSTM은 지수 게이팅과 더 높은 용량의 수정된 메모리 구조를 포함하여 LTSF에 적합한 잠재력을 가짐
     * 우리가 채택한 LTSF 아키텍처인 xLSTMTime은 현재 접근 방식을 능가함. 여러 실제 데이터셋에서 다양한 최신 모델과 xLSTMTime의 성능을 비교한 결과, 우수한 예측 능력을 입증함
     * 우리의 연구 결과는 정제된 순환 아키텍처가 LTSF 작업에서 변환기 기반 모델에 대한 경쟁력 있는 대안을 제공할 수 있으며, 시계열 예측의 지형을 재정의할 가능성을 시사함

GN⁺의 정리

     * 이 논문은 변환기 기반 모델의 한계를 극복하고자 xLSTM을 도입하여 장기 시계열 예측에서 우수한 성능을 보임
     * xLSTMTime은 지수 게이팅과 수정된 메모리 구조를 통해 기존 모델을 능가하는 예측 능력을 입증함
     * 이 연구는 시계열 예측에서 순환 아키텍처의 가능성을 재조명하며, 변환기 기반 모델에 대한 새로운 대안을 제시함
     * 유사한 기능을 가진 프로젝트로는 Facebook의 Prophet, Amazon의 DeepAR 등이 있음

        Hacker News 의견

     * 최근 몇 년 동안, transformer 기반 모델이 다변량 장기 시계열 예측에서 두각을 나타내고 있음
          + 하지만, 일반적으로 비딥러닝 모델보다 더 나은지는 확실하지 않음
     * 경제(인플레이션, GDP 등)와 금융(시장 유동성 등)에서 nowcasting 및 예측 모델을 구축하는 일을 하고 있음
          + transformer 모델이 뛰어나지만 LSTM 유형 모델도 여전히 매우 유용하다는 의견에 공감함
     * Google의 AI를 사용한 날씨 예측 모델과 관련이 있는지 궁금함
          + Google의 Graphcast AI 모델 링크 제공
     * 논문에 있는 데이터셋 링크가 작동하지 않아 아쉬움
          + 수정되기를 바람
     * 예측 도구로 마케팅되고 있는데, 시계열에서 이벤트 분류에는 적용되지 않는지 궁금함
     * 최고의 딥러닝 시계열 모델은 헤지펀드 내부에서 비공개로 사용됨
     * 시계열 예측은 결정론적 도메인에서 가장 잘 작동함
          + 출판된 LLM/AI/딥러닝/머신러닝 기술 중 주식 시장에서 잘 작동하는 것은 없음
          + 모든 기술을 시도해봤지만 성공하지 못함
     * 누군가의 시계열 예측 방법이 효과가 있었다면, 그들은 그것을 출판하지 않았을 것임
     * XSLT로 잘못 읽었음
     * 이 도구로 주식을 예측하려다 돈을 모두 잃을 사람이 기다려짐
"
"https://news.hada.io/topic?id=15938","모든 것을 망가뜨린 CrowdStrike 파일, null 문자로 가득 차 있었다?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             모든 것을 망가뜨린 CrowdStrike 파일, null 문자로 가득 차 있었다?

        Hacker News 의견

     * 이 시스템이 중요한 경로에 있는 시스템이라면, C/I 파이프라인을 통과하지 않았어야 함
          + 자동화된 테스트에 대해 엄격하지 않지만, 이 정도의 중요성을 가진 시스템은 매우 좋은 상태 관리가 필요함
          + 모든 환경에서 통합 테스트 없이 프로덕션으로 롤아웃해서는 안 됨
          + 이 회사가 지원하는 모든 타겟 이미지를 테스트하는 스테이징 또는 개발 테스트 서버가 없다는 것이 이해되지 않음
          + 이 회사의 운영진이 무능하다고 생각됨
     * 두 가지 큰 기술적 붕괴가 모두 ""보안 소프트웨어""의 문제였음
          + SolarWinds 해킹 사건과 이번 사건 모두 Austin에 기반을 둔 회사들이었음
          + ""해커 타입""의 사람들이 보안 소프트웨어 회사를 시작하지만, 프로세스 지향적인 문화를 구현하는 것을 싫어함
          + SolarWinds는 매우 나쁜 보안 문화를 가지고 있었음
          + 이번 사건의 근본 원인도 빠르고 느슨한 배포 프로세스일 가능성이 높음
     * 이번 재앙의 긍정적인 측면은 커널 레벨 접근을 재고할 수 있는 가능성임
          + 무작위 게임 회사가 커널 레벨 안티 치트 소프트웨어를 작성할 만큼 충분히 좋지 않음
     * 이 문제는 QA 담당자가 시도할 두 번째 또는 세 번째 테스트 파일일 것 같음
          + 기술적으로 유능한 회사가 무능한 회사보다 우위를 점하지 못하는 시장임
          + Craig Wright 사건을 읽었는데, 그는 자신이 세계적인 전문가라고 주장한 분야에서 기본적인 기술적 능력조차 없었음
          + George Kurtz는 McAfee의 CTO였을 때도 같은 문제를 일으켰음
          + CrowdStrike는 3개월 전 Debian Stable에서 같은 문제를 일으켰음
          + PCI 규정 준수 규정이 CrowdStrike와 안티바이러스를 오늘날의 IT 인프라의 거의 모든 측면에 주입한 것이 끔찍함
     * 이 파일이 0으로 가득 찬 파일이라고 해서 출하될 때도 0으로 가득 찼다는 의미는 아님
     * 이 버그는 수년 동안 커널 드라이버에 존재했으며, 잘못된 데이터로 인해 트리거되었음
          + CrowdStrike의 테스트 설정은 이 구성 데이터 자체에는 괜찮았지만, 프로덕션으로 보내기 전에 잡지 못했음
          + 이 문제를 방지하기 위해 무엇을 할 것인지 설명하는 포스트모템 보고서를 발표하길 바람
     * Kevin Beaumont에 따르면, 고객마다 파일이 다르다는 주장 있음
     * 이 파일들이 원래의 파일 내용이 아닐 가능성 있음
          + 누군가가 잘못된 파일을 올-제로 파일로 덮어쓰려고 했을 가능성 있음
          + QA가 우회되었기 때문에 실제 패치 배포를 중단하려는 시도일 수 있음
     * 과거에 보안 소프트웨어가 파일을 0으로 대체하여 소프트웨어 컴파일을 중단시킨 사례가 있었음
          + 링커가 파일을 열 수 없었고, 오류 없이 객체 코드를 0으로 대체했음
          + 디버거를 열어 큰 객체 코드 조각이 0으로 대체된 것을 보고 문제를 파악함
     * 4chan의 기술 게시판에서 발견된 게시물
          + CSAgent.sys는 클라운스트라이크 바이러스 정의 파일을 파싱하는 커널 드라이버임
          + 클라운스트라이크는 잘못된 바이러스 정의 파일을 처리하지 못했음
          + 웹서버가 잘못된 바이러스 정의 파일을 제공하기 시작함
          + CSAgent.sys가 잘못된 바이러스 정의 파일을 로드하고 충돌함
          + 컴퓨터가 BSOD(블루스크린)로 재부팅됨
          + CSAgent.sys가 바이러스 정의 파일을 다시 로드하고 충돌함
          + CDN의 버그로 인해 커널 드라이버가 문제를 일으킴
          + CSAgent.sys의 크기 검사와 버퍼 크기를 증가시켜 미래의 잘못된 바이러스 정의 파일이 충돌하지 않도록 함
"
"https://news.hada.io/topic?id=15915","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   인프런에 사놓고 구석에 미뤄둔 강좌를 좀 들으려고 합니다....ㅎㅎ
"
"https://news.hada.io/topic?id=16002","Mistral Large 2 모델 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Mistral Large 2 모델 공개

     * Mistral Large 2는 128k 컨텍스트 윈도우 및 프랑스어, 독일어, 스페인어, 이탈리아어, 중국어, 일본어, 한국어를 포함한 여러 언어를 지원함
          + 또한 Python, Java, C, C++, JavaScript, Bash를 포함한 80개 이상의 코딩 언어를 지원
     * 단일 노드 추론을 위해 설계되었으며, 1230억 개의 파라미터로 구성되어 있어 단일 노드에서 높은 처리량을 제공할 수 있음
     * 연구 및 비상업적 용도로 사용 및 수정이 가능한 Mistral Research License 하에 배포됨. 상업적 용도로 사용하려면 Mistral Commercial License를 취득해야 함

  일반 성능

     * Mistral Large 2는 성능/비용 평가 지표에서 새로운 기준을 세움
     * 특히 MMLU에서 사전 학습된 버전은 84.0%의 정확도를 달성하며, 성능/비용 파레토 프론트에서 새로운 지점을 설정함

  코드 및 추론

     * Codestral 22B와 Codestral Mamba의 경험을 바탕으로 Mistral Large 2는 많은 양의 코드로 학습됨
     * Mistral Large 2는 이전 Mistral Large보다 훨씬 뛰어나며, GPT-4o, Claude 3 Opus, Llama 3 405B와 같은 선도 모델과 동등한 성능을 보임
     * 모델의 추론 능력을 향상시키기 위해 많은 노력을 기울였으며, 사실과 다른 정보를 생성하는 경향을 최소화하기 위해 모델을 미세 조정함
     * 모델이 해결책을 찾지 못하거나 충분한 정보가 없을 때 이를 인정하도록 학습됨

  지시 사항 준수 및 정렬

     * Mistral Large 2는 지시 사항 준수 및 대화 능력이 크게 향상됨
     * 많은 비즈니스 애플리케이션에서 간결함이 중요하기 때문에, 가능한 한 간결하고 핵심적인 응답을 생성하도록 많은 노력을 기울임

  언어 다양성

     * Mistral Large 2는 다국어 데이터를 많이 학습하여 영어, 프랑스어, 독일어, 스페인어, 이탈리아어, 포르투갈어, 네덜란드어, 러시아어, 중국어, 일본어, 한국어, 아랍어, 힌디어에서 뛰어난 성능을 보임

  도구 사용 및 함수 호출

     * Mistral Large 2는 향상된 함수 호출 및 검색 기능을 갖추고 있으며, 복잡한 비즈니스 애플리케이션의 동력 엔진으로서의 역할을 수행할 수 있도록 학습됨

  클라우드 서비스 제공자를 통한 Mistral 모델 접근

     * Google Cloud Platform과의 파트너십을 확장하여 Vertex AI에서 Mistral AI의 모델을 제공함
     * Azure AI Studio, Amazon Bedrock, IBM watsonx.ai에서도 Mistral AI의 모델을 사용할 수 있음

    GN⁺의 정리

     * Mistral Large 2는 다양한 언어와 코딩 언어를 지원하며, 단일 노드에서 높은 처리량을 제공함.
     * 코드 생성 및 추론 능력이 크게 향상되었으며, 사실과 다른 정보를 생성하는 경향을 최소화함.
     * 다국어 데이터를 많이 학습하여 여러 언어에서 뛰어난 성능을 보임.
     * Google Cloud Platform, Azure AI Studio, Amazon Bedrock, IBM watsonx.ai와의 파트너십을 통해 글로벌 사용자에게 제공됨.
     * 비즈니스 애플리케이션에서 간결하고 핵심적인 응답을 생성하도록 설계됨.

        Hacker News 의견

     * Mistral Large 2와 Llama 3.1 405b 모델을 테스트한 결과, 두 모델 간에 명확한 우열을 가리기 어려움
     * Claude를 사용 중이라면 계속 사용하는 것이 좋음
     * Claude에 대한 바람:
          + 더 똑똑해지길 바람
          + 더 긴 컨텍스트 윈도우 (1M+)
          + 네이티브 오디오 입력 및 톤 이해
          + 거절 시 도덕적 판단을 줄이길 바람
          + 더 빠르길 바람
          + 출력 토큰 수 증가
     * 모델 경쟁이 치열해지고 있음
     * Claude 3.5 Sonnet이 다른 모든 모델을 압도함
     * Mistral이나 Llama를 일상적으로 사용하는 방법을 잘 모르겠음
     * AI 코딩 어시스턴트를 개발 중이며, 여러 모델을 시도해본 결과 Mistral Large 2가 가장 실망스러웠음
     * 비상업적 라이선스가 실망스러움
     * Llama 3.1 405b와 경쟁할 만하지만 라이선스가 더 제한적임
     * 모델 간 차이가 줄어들고 있어 특정 사용 사례에 맞게 Llama 405B를 미세 조정하는 것이 더 나을 것임
     * 품질에서 큰 도약이 없는 한, 현재 상태에서 큰 차이는 없을 것임
     * 경쟁이 치열해져서 기쁨
     * 많은 비용을 들여 SOTA 모델을 만들고 있지만, GPT-4o와 Claude Opus 수준에 머물러 있음
     * 데이터와 GPU를 더 투입하는 것만으로는 한계에 도달하고 있음
     * 사용자 경험과 ""개성""이 중요해질 것임
     * Claude Sonnet을 즐기고 있으며, 다른 모델보다 더 날카롭게 느껴짐
     * 각 단계마다 더 많은 에너지와 자원이 필요함을 잊지 말아야 함
     * PyLLMs의 최근 모델 벤치마크 결과를 공유함
          + Nemo의 속도와 품질에 놀람
          + Mistral Large는 좋지만 매우 느림
     * Claude 모델 중 Opus와 Sonnet 3.5 중 어느 것이 더 능력 있는지 혼란스러움
     * Mistral Large 2는 향상된 함수 호출 및 검색 기능을 갖추고 있음
     * 함수 호출 정확도가 약 50%라는 것은 복잡한 작업에서 절반은 실패한다는 의미인지 의문임
     * ChatGPT-4o를 선호하며, 문제가 있을 때 Claude를 사용하지만 더 나은 결과를 얻지 못함
"
"https://news.hada.io/topic?id=15947","조 바이든, 민주당 후보 사퇴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            조 바이든, 민주당 후보 사퇴

        Hacker News 의견

     * 대통령이나 선출직 공직에 나이 제한을 두지 않는 이유에 대한 의문 제기
          + 평균 기대 수명보다 젊어야 한다는 제안 (남성: 73세, 여성: 79세)
     * 혼합 정당 티켓의 가능성에 대한 궁금증
          + 예: Kamala Harris와 Mitt Romney 조합
          + 중도/스윙 투표층을 끌어들일 수 있을지, 부정적일 가능성
     * 대통령의 고령에 대한 우려와 긍정적인 평가
          + RBG를 떠올리게 함
          + 대통령직 수행 능력에 대한 긍정적인 평가
     * 반도체 법안 등 정책에 대한 관심
          + TSMC 의존도 감소를 위한 노력
          + 다음 후보가 이 모멘텀을 이어가길 바람
     * Johnson이나 Truman 이후 가장 효과적인 대통령 중 하나라는 평가
          + 단임 공약을 내세웠음
          + 민주당이 내부 갈등을 멈추고 선거에 집중하길 바람
          + Harris가 가장 간단한 답일 가능성
     * Twitter 알고리즘이 Donald Trump를 지지하는 것처럼 보임
          + 첫 1,000개의 트윗 답글이 혐오와 모욕으로 가득 차 있음
     * 토론 이후 결론이 이미 나왔지만 체면을 지키기 위해 드라마가 필요했음
     * 부유한 기술 커뮤니티의 선호를 받은 공화당 부통령 후보로 인해 Gavin Newsome이 민주당 후보가 될 가능성
     * 예상치 못한 결정에 대한 놀라움
     * Donald Trump가 진실을 말한 것에 대한 놀라움
          + 18시간 전 트윗에서는 여전히 경주에 있는 것처럼 보였음
          + 무엇이 변했는지 궁금함
"
"https://news.hada.io/topic?id=15979","복사는 디자인의 방식임 (Copying is the way design works)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             복사는 디자인의 방식임 (Copying is the way design works)

  I

     * Charles Eames는 ""우리는 예술을 하지 않는다 — 우리는 문제를 해결한다""라고 말함.
     * 1950년대에 Charles와 Ray Eames는 튼튼하고 유행에 맞는 의자를 저렴하게 제공하고자 함.
     * LCW 의자는 간단한 재료와 방법에 대한 Eames의 집착을 보여줌.
     * 1999년 Time 잡지에서 LCW를 ""세기의 최고의 디자인""이라고 칭함.
     * Herman Miller에서 새 LCW는 $1,195에 판매 중, Modway Fathom은 $145에 판매 중이며 기능과 외형이 동일함.
     * LCW의 원작은 1946년 MOMA 컬렉션에 있음.
     * 복사와 원작의 구분은 항상 명확하지 않으며 중요하지 않을 수도 있음.
     * 디자이너로서 원작에 집착하지만, 디자인은 복사에서 많은 것을 얻음.

  II

     * Steve Jobs는 ""위대한 예술가는 훔친다""라고 인용하며 복사를 인정함.
     * Xerox PARC에서 Alto라는 획기적인 컴퓨터를 개발, Apple의 Macintosh가 이를 복사함.
     * 1985년, Apple은 Digital Research Interactive를 복제 혐의로 고소, 이후 Microsoft와 HP를 고소함.
     * Apple은 이후 복사에 대한 법적 논쟁에서 살아남아 2,300개 이상의 디자인 특허를 보유하게 됨.
     * 2011년, Apple은 Samsung을 고소하며 법적 논쟁이 계속됨.

  III

     * John Carmack는 복사를 통해 학습하고 도전하며 아이디어를 얻음.
     * Carmack는 Doom 과 Quake 로 유명하지만, Commander Keen 은 Super Mario Bros. 3 의 복사에서 시작됨.
     * Nintendo는 PC 버전에 관심이 없었지만, Carmack는 자신의 기술을 사용해 Commander Keen 을 개발하고 성공을 거둠.
     * Carmack는 특허를 거부하며 복사를 권장함.

  IV

     * Richard Stallman은 복사를 권리로 만들고자 함.
     * 1983년, Stallman은 Unix와 호환되는 무료 소프트웨어 시스템 GNU를 발표.
     * Stallman의 자유 소프트웨어 운동은 소프트웨어 라이선스를 뒤집어 복사와 배포의 자유를 보장.
     * 오픈 소스 소프트웨어 운동이 발전하며 소프트웨어 개발의 핵심이 됨.
     * Creative Commons는 창작물의 공유와 재사용을 촉진.

  V

     * 중국에서는 복사에 대한 여러 개념이 있으며, 일부는 원작만큼 가치가 있음.
     * 1974년 중국 시안 지역에서 발굴된 테라코타 전사들이 대표적 사례.
     * 서양에서도 복사는 중요한 역할을 함. 반 고흐는 일본 예술을 복사하여 자신의 작품에 영감을 얻음.
     * 반 고흐는 자신의 작품이 일본 예술에 기반한다고 명시.
     * Shanzhai(山寨)는 '가짜'로 번역되지만, 창의력을 보여주는 복사임.
     * 디자인 커뮤니티에서는 주로 Unsolicited Redesigns가 이에 해당.
     * 이러한 재설계는 기업의 주목을 받을 수도 있고, 종종 비판을 받기도 함.

  VI

     * 복사는 교육적, 도전적, 기만적 또는 혁신적일 수 있음.
     * 디자인에서 복사는 기본적이며 발전의 중요한 부분을 차지.
     * 오늘날의 소프트웨어, 하드웨어, 웹사이트 및 앱은 모두 복사에 빚지고 있음.

  GN⁺의 의견

     * 이 글은 디자인에서 복사의 중요성을 강조하며, 복사가 단순히 베끼기가 아니라 학습과 혁신의 중요한 과정임을 설명함.
     * 다양한 사례를 통해 복사가 어떻게 디자인과 기술 발전에 기여했는지 보여줌.
     * 복사와 특허에 대한 논쟁은 여전히 지속되고 있으며, 이를 통해 창의성과 법적 보호의 균형을 찾는 것이 중요함.
     * 오픈 소스 운동과 Creative Commons는 창작물의 공유와 협업을 촉진하며, 현대 소프트웨어 개발에 큰 영향을 미침.
     * 복사는 단순한 모방이 아니라 새로운 아이디어와 혁신을 위한 도구임을 이해하는 것이 중요함.

        Hacker News 의견

     * 디자이너로서 독창성을 추구하는 것은 중요하다고 느끼지만, 실제로는 문제 해결에 집중하는 것이 더 중요함
          + Apple과 Microsoft의 소송 사례에서 Bill Gates가 언급한 ""우리는 모두 Xerox라는 부유한 이웃의 집에서 TV를 훔쳤다""는 비유가 인상적임
     * John Carmack는 특허가 발명자를 보호하는 것처럼 보이지만 실제로는 그렇지 않다고 설명함
          + UI/UX 디자인에서도 비슷한 문제를 해결할 때 비슷한 솔루션이 나오는 경우가 많음
          + 데스크탑과 모바일 인터페이스에서 많은 운영 체제와 장치가 유사한 패턴과 비주얼로 수렴함
     * 독창성을 추구하다 보면 이미 존재하는 솔루션과 유사한 결과가 나오는 경우가 많음
          + 복제는 디자인뿐만 아니라 모든 분야에서 중요한 역할을 함
          + 인간은 모방을 통해 새로운 것을 창조함
     * ""Everything is a Remix""라는 비디오 에세이가 특허와 지적 재산권 법이 창의성을 저해한다고 주장함
     * 젊은 디자이너 시절에는 트렌드를 따르는 것을 반대했지만, 성숙해지면서 트렌드를 따르는 것이 중요하다고 생각하게 됨
          + ""Pull down to refresh"" 기능이 처음에는 반패턴으로 여겨졌지만, 이제는 사용자에게 익숙한 패턴이 됨
          + 평면 버튼도 처음에는 반대했지만, 이제는 사용자 경험의 중요한 부분이 됨
     * Modway 의자가 저렴하지만 품질이 낮다는 리뷰가 있음
     * 아시아에서 복제에 대한 관점이 다르다는 흥미로운 기사
          + 복제는 원본의 품질을 학습하고, 다른 사람의 작업을 재해석하는 중요한 역할을 함
          + 디자인이 존재하는 한 복제도 계속될 것임
     * 대학 시절 교수님이 ""디자인에서 이미 모든 것이 만들어졌다""고 말한 것이 기억남
"
"https://news.hada.io/topic?id=15889","RabbitOS 탈옥: 비밀 로그와 GPL 위반 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     RabbitOS 탈옥: 비밀 로그와 GPL 위반 발견

  RabbitOS 탈옥: 비밀 로그와 GPL 위반 발견

    Rabbit R1 개요

     * Rabbit R1은 많은 비판을 받고 있으며, 사용자들은 이 제품을 되팔기 위해 노력 중임.
     * Rabbit Inc.는 반품을 수락하지만, 중고 시장에서 R1은 정가보다 훨씬 저렴하게 판매됨.

    동기

     * RabbitOS는 Android 13 AOSP에서 실행되는 앱임.
     * API를 역공학하여 Python 스크립트로 대체 가능함.
     * Rabbit Inc.가 코드 난독화를 시작하면서, 이를 분석하기 위해 R1을 구매함.

    R1 하드웨어

     * MediaTek MT6765 SoC, 4GB DRAM, 128GB eMMC 스토리지 사용.
     * 부트로더는 기본적으로 잠겨 있지만, mtkclient를 사용해 잠금 해제 및 커스텀 ROM 플래싱 가능.

    부트 체인

     * 부트 과정은 MediaTek에서 제공하는 부트롬(brom)에서 시작됨.
     * Preloader가 DRAM을 초기화하고, tee, gz, lk 이미지를 로드함.
     * LK는 Android Verified Boot를 구현하며, dm-verity를 통해 블록 장치의 무결성을 확인함.

    신뢰 체인 깨기

     * ""kamakiri"" 부트롬 익스플로잇을 통해 첫 번째 단계에서 모든 후속 단계를 서브버트 가능.
     * USB 부트로더 모드를 사용해 서명되지 않은 DA 이미지를 로드하고 실행 가능.

    탈옥 방법

     * 커스텀 Android 부트 이미지를 USB를 통해 DRAM에 로드.
     * Preloader의 마지막 부분에 훅을 설치하고, LK로 점프하기 전에 커스텀 훅을 설치.
     * 커스텀 커널/초기 램디스크가 부팅되며, 모든 무결성 검사를 통과함.

    연구 과정

     * UART 테스트 패드를 통해 디버그 정보 수집.
     * Preloader와 Linux 커널의 커맨드라인 플래그를 패치해 UART 로그 수집.

    발견 사항

     * RabbitOS는 내부 저장소에 모든 로그를 텍스트 파일로 저장.
     * 로그에는 GPS 위치, WiFi 네트워크 이름, 셀 타워 ID, IP 주소, 사용자 토큰, 음성 데이터 등이 포함됨.
     * 최신 RabbitOS 업데이트(v0.8.112)에서 로그 문제를 해결하고 공장 초기화 옵션 추가.

    AOSP ""커스터마이징""

     * RabbitOS는 Android 13에서 실행되는 단일 앱 모드로, 대부분의 Android 기능을 비활성화함.
     * 시스템 설정 앱을 제거해 보안성을 높였다고 주장.

    일반 사용자 조언

     * 탈옥 여부가 의심되면 기기를 껐다 켜서 확인.
     * 기기를 판매하거나 기증하기 전에 공장 초기화 권장.

    결론

     * Rabbit R1은 특별한 하드웨어가 없으며, 대부분의 커스터마이징은 단일 앱 모드를 강화하기 위한 것임.
     * 부트 체인 보안이 비효과적이며, GPL 라이선스를 위반하고 있음.
     * 탈옥 도구를 공개하여 연구자들이 R1을 분석할 수 있도록 지원.

  GN⁺의 정리

     * Rabbit R1의 부트 체인 보안이 취약하며, 사용자 데이터가 과도하게 로그로 저장됨.
     * RabbitOS는 Android 13에서 실행되는 단일 앱 모드로, 대부분의 Android 기능을 비활성화함.
     * 탈옥 도구를 통해 연구자들이 R1을 분석할 수 있도록 지원함.
     * Rabbit Inc.는 GPL 라이선스를 위반하고 있으며, 사용자 데이터 로그 문제를 해결함.
     * 비슷한 기능을 가진 제품으로는 Google Nest Hub, Amazon Echo Show 등이 있음.

        Hacker News 의견

     * Rabbit 제품이 사용자의 GPS 위치, WiFi 네트워크 이름, 주변 셀 타워 ID, 인터넷 IP 주소, 사용자 토큰, 대화 내용 등을 서버에 전송함
     * 한 사용자가 Rabbit의 코드베이스를 검토한 후 회사를 떠났음
     * Rabbit Inc.가 기사 내용에 대해 답변하지 않았으며, 법적 대응을 고려 중임
     * Rabbit Inc.가 GPL2 라이선스를 위반하고 소스 코드를 공개하지 않았음
          + 특히, hall-effect 스크롤 휠 감지 및 카메라 회전 스테퍼 모터 제어 드라이버가 폐쇄 소스임
          + 이러한 위반은 자유 소프트웨어 생태계에 큰 피해를 줌
     * Truth Social도 AGPL 코드를 사용하면서 소스를 공개하지 않다가 나중에 공개한 사례가 있음
     * 소프트웨어는 품질이 낮고 회사도 좋은 평가를 받지 못함
          + 그러나 커스텀 앱을 실행하기 쉽다면 흥미로운 사용 사례가 있을 수 있음
          + PWA로 구현하면 ESP32 + 배터리 + 화면보다 훨씬 빠르게 개발 가능함
          + Google 서비스를 사용하지 않고 GrapheneOS 같은 보안성을 높일 수 있는 방법이 있으면 좋겠음
          + 커스텀 단일 포커스 앱을 위해 이 장치를 사용하는 사람들이 있는지 궁금함
     * ""Carroot""라는 이름이 재미있다는 의견이 있음
     * 데이터 수집이 특정 장치에만 제한되는지 아니면 Android 기능인지 궁금함
     * Rabbit 제품을 구매한 사람들의 행동을 분석하는 실제 가치가 무엇인지 의문임
          + 다음 Juicero, 멀티비타민, 다단계 마케팅 구매자를 식별하는 데 사용될 수 있음
"
"https://news.hada.io/topic?id=15914","Notion이 WASM SQLite로 브라우저에서의 속도를 향상시킨 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Notion이 WASM SQLite로 브라우저에서의 속도를 향상시킨 방법

     * 3년 전 Notion은 SQLite 데이터베이스를 사용하여 클라이언트에 데이터를 캐싱함으로써 Mac과 Windows용 Notion 앱의 속도를 성공적으로 향상시킴
     * 이번에는 브라우저를 통해 Notion에 접속하는 사용자들에게도 같은 개선 사항을 제공할 수 있게 되었음
     * 이 글은 WebAssembly(WASM) 구현의 sqlite3를 사용하여 브라우저에서 Notion의 성능을 개선한 방법을 심층 분석한 내용
     * SQLite를 사용하면 모든 최신 브라우저에서 페이지 탐색 시간이 20% 개선되었음
          + 특히 인터넷 연결 등의 외부 요인으로 인해 API 응답 시간이 특히 느린 사용자의 경우 그 차이가 더욱 두드러졌음
          + 예를 들어 호주 사용자의 경우 페이지 탐색 시간이 28%, 중국 사용자는 31%, 인도 사용자는 33% 빨라졌음

핵심 기술: OPFS와 Web Workers

     * WASM SQLite 라이브러리는 데이터를 세션 간에 유지하기 위해 Origin Private File System(OPFS)이라는 최신 브라우저 API를 사용함
     * OPFS는 Web Workers에서만 사용 가능함
     * Web Worker는 브라우저에서 대부분의 JavaScript가 실행되는 메인 스레드와 다른 별도의 스레드에서 실행되는 코드로 생각할 수 있음
     * Notion은 Webpack과 함께 번들링되는데, Web Worker를 로드하기 위한 사용하기 쉬운 구문을 제공함
     * Web Worker를 설정하여 OPFS를 사용하여 SQLite 데이터베이스 파일을 만들거나 기존 파일을 로드하도록 했고, 이 Web Worker에서 기존 캐싱 코드를 실행함
     * Comlink 라이브러리를 사용하여 메인 스레드와 Worker 간에 메시지 전달을 쉽게 관리함

SharedWorker 기반 접근 방식

     * 최종 아키텍처는 Roy Hashimoto가 GitHub 토론에서 제시한 새로운 솔루션을 기반으로 함
          + 한 번에 하나의 탭만 SQLite에 액세스하면서 다른 탭에서도 SQLite 쿼리를 실행할 수 있도록 하는 접근 방식
     * 이 새로운 아키텍처는 어떻게 작동하는가?
          + 간단히 말해, 각 탭에는 SQLite에 쓸 수 있는 전용 Web Worker가 있음
          + 그러나 실제로 Web Worker를 사용할 수 있는 것은 한 탭뿐임
          + SharedWorker는 ""활성 탭""이 무엇인지 관리하는 역할을 함
          + 활성 탭이 닫히면 SharedWorker는 새로운 활성 탭을 선택해야 한다는 것을 알고 있음
     * SQLite 쿼리를 실행하려면 각 탭의 메인 스레드가 해당 쿼리를 SharedWorker로 보내고, SharedWorker는 활성 탭의 전용 Worker로 리디렉션함
     * 탭은 원하는 만큼 동시에 SQLite 쿼리를 실행할 수 있으며, 항상 단일 활성 탭으로 라우팅됨
     * 각 Web Worker는 모든 주요 브라우저에서 작동하는 OPFS SyncAccessHandle Pool VFS 구현을 사용하여 SQLite 데이터베이스에 액세스함

간단한 접근 방식이 작동하지 않은 이유

     * 앞에서 설명한 아키텍처를 구축하기 전에, 탭마다 전용 Web Worker를 두고 각 Web Worker가 SQLite 데이터베이스에 쓰는 보다 간단한 방식으로 WASM SQLite를 구동하려고 시도함
     * 그러나 어느 것도 그대로 사용하기에는 Notion의 요구 사항에 충분하지 않았음

    걸림돌 #1: 크로스 오리진 격리

     * OPFS via sqlite3_vfs를 사용하려면 사이트가 ""크로스 오리진 격리"" 상태여야 함
     * 크로스 오리진 격리를 페이지에 추가하려면 로드할 수 있는 스크립트를 제한하는 몇 가지 보안 헤더를 설정해야 함
     * 이 헤더를 설정하는 것은 상당한 작업이 될 수 있음
     * Notion은 웹 인프라의 다양한 기능을 구동하기 위해 많은 제3자 스크립트에 의존하고 있어 완전한 크로스 오리진 격리를 달성하려면 각 벤더에게 새로운 헤더를 설정하고 iframe 작동 방식을 변경하도록 요청해야 했음 - 이는 현실적으로 어려운 요구 사항이었음
     * 테스트에서는 Chrome과 Edge 브라우저에서 사용 가능한 SharedArrayBuffer용 Origin Trials를 사용하여 사용자 하위 집합에 이 변형을 제공함으로써 중요한 성능 데이터를 얻을 수 있었음
     * 이러한 Origin Trials를 사용하면 크로스 오리진 격리 요구 사항을 일시적으로 우회할 수 있었음

    걸림돌 #2: 손상 문제

     * OPFS via sqlite3_vfs를 소수의 사용자에게 제공했을 때, 일부 사용자에게 심각한 버그가 발생하기 시작함
          + 이 사용자들은 페이지에 잘못된 데이터를 보게 됨
          + 예를 들어 잘못된 동료에게 할당된 댓글이나 미리 보기가 완전히 다른 페이지인 새 페이지에 대한 링크 등
     * 이 버그의 영향을 받은 사용자의 데이터베이스 파일을 보면 SQLite 데이터베이스가 어떤 식으로든 손상된 패턴이 있었음
          + 특정 테이블의 행을 선택하면 오류가 발생했고, 행 자체를 검사했을 때 동일한 ID를 가진 여러 행에 서로 다른 내용이 있는 등의 데이터 일관성 문제가 발견됨
     * SQLite 데이터베이스가 어떻게 그런 상태가 되었는지에 대해, 동시성 문제로 인해 발생한 것으로 추측함
          + 여러 탭이 열려 있고, 각 탭에는 SQLite 데이터베이스에 대한 활성 연결이 있는 전용 Web Worker가 있었기 때문
          + Notion 애플리케이션은 서버에서 업데이트를 받을 때마다, 즉 탭이 동시에 같은 파일에 쓰게 될 때마다 캐시에 자주 씀
     * 이미 SQLite 쿼리를 함께 일괄 처리하는 트랜잭션 접근 방식을 사용하고 있었지만, OPFS API 측의 동시성 처리가 부족하여 손상이 발생한 것으로 강하게 의심됨
     * 그래서 손상 오류를 로깅하기 시작했고 Web Locks를 추가하고 포커스된 탭만 SQLite에 쓰도록 하는 등의 몇 가지 땜빵 접근 방식을 시도함
          + 이러한 조정으로 손상률은 낮아졌지만, 프로덕션 트래픽에 다시 기능을 켤 수 있을 만큼 충분하지는 않았음
          + 그래도 동시성 문제가 손상에 상당히 기여하고 있다는 것을 확인할 수 있었음
     * Notion 데스크톱 앱에서는 이 문제가 발생하지 않았음
          + 해당 플랫폼에서는 단일 부모 프로세스만 SQLite에 씀
          + 앱에서 원하는 만큼 많은 탭을 열 수 있지만 항상 단일 스레드만 데이터베이스 파일에 액세스함

    걸림돌 #3: 대안은 한 번에 하나의 탭에서만 실행될 수 있음

     * OPFS SyncAccessHandle Pool VFS 변형도 평가했음
          + 이 변형은 SharedArrayBuffer가 필요하지 않아 Safari, Firefox 및 SharedArrayBuffer용 Origin Trial이 없는 기타 브라우저에서 사용할 수 있음
     * 이 변형의 단점은 한 번에 하나의 탭에서만 실행될 수 있다는 것
          + 후속 탭에서 SQLite 데이터베이스를 열려고 하면 단순히 오류가 발생함
     * 한편으로 이는 OPFS SyncAccessHandle Pool VFS가 OPFS via sqlite3_vfs 변형의 동시성 문제가 없다는 것을 의미함
          + 소수의 사용자에게 제공했을 때 손상 문제가 발견되지 않은 것으로 이를 확인함
     * 다른 한편으로는 모든 사용자 탭이 캐싱의 혜택을 받기를 원했기 때문에 이 변형을 그대로 출시할 수 없었음

문제 해결

     * 어느 변형도 그대로 사용할 수 없다는 사실이 위에서 설명한 SharedWorker 아키텍처를 구축하게 된 계기가 되었음
     * 이 아키텍처는 이 SQLite 변형 중 하나와 호환됨
     * OPFS via sqlite3_vfs 변형을 사용할 때는 한 번에 하나의 탭만 쓰기 때문에 손상 문제를 피할 수 있음
     * OPFS SyncAccessHandle Pool VFS 변형을 사용하면 SharedWorker 덕분에 모든 탭에서 캐싱이 가능함
     * 이 아키텍처가 두 변형에서 모두 작동하고, 측정 지표에서 성능 향상이 눈에 띄며, 손상 문제가 없다는 것을 확인한 후, 어떤 변형을 제공할지 최종 선택해야 할 때가 되었음
     * OPFS SyncAccessHandle Pool VFS를 선택했는데, 크로스 오리진 격리 요구 사항이 없어 Chrome과 Edge 이외의 브라우저로 출시하는 것을 막지 않았기 때문

성능 저하 완화

     * 이 개선 사항을 사용자에게 제공하기 시작했을 때, 로드 시간이 느려지는 등 수정해야 할 몇 가지 성능 저하가 발견됨

    페이지 로드가 느려짐

     * 첫 번째 발견은 Notion 페이지 간 이동은 더 빨라졌지만 초기 페이지 로드는 더 느려졌다는 것
          + 프로파일링 결과, 페이지 로드는 일반적으로 데이터 가져오기에 병목 현상이 발생하지 않는다는 것을 깨달음
          + Notion의 앱 부팅 코드는 API 호출이 완료되기를 기다리는 동안 다른 작업(JS 파싱, 앱 설정 등)을 실행하므로 탐색만큼 SQLite 캐싱의 혜택을 받지 못함
     * 느려진 이유는 사용자가 WASM SQLite 라이브러리를 다운로드하고 처리해야 했기 때문
          + 이는 페이지 로드 프로세스를 차단하여 다른 페이지 로드 작업이 동시에 발생하지 않도록 함
          + 이 라이브러리의 크기가 몇 백 킬로바이트이기 때문에 추가 시간이 측정 지표에서 눈에 띄게 나타남
     * 이를 해결하기 위해 라이브러리 로드 방식을 약간 수정함
          + WASM SQLite를 완전히 비동기식으로 로드하고 페이지 로드를 차단하지 않도록 함
          + 이는 초기 페이지 데이터가 SQLite에서 로드되는 경우는 거의 없을 것이라는 의미였음
          + 이는 괜찮았는데, SQLite에서 초기 페이지를 로드하여 얻는 속도 향상이 라이브러리 다운로드로 인한 속도 저하보다 크지 않다는 것을 객관적으로 판단했기 때문
     * 변경 사항을 적용한 후 초기 페이지 로드 측정 지표는 실험의 테스트 그룹과 대조 그룹 사이에 동일해짐

    느린 기기는 캐싱의 혜택을 받지 못함

     * 측정 지표에서 발견한 또 다른 현상은 Notion 페이지에서 다른 페이지로 이동하는 중간값 시간은 더 빨라졌지만, 95번째 백분위수 시간은 더 느려졌다는 것
          + Notion을 가리키는 브라우저가 있는 모바일 폰과 같은 특정 기기는 캐싱의 혜택을 받지 못했고 오히려 더 나빠졌음
     * 이 수수께끼에 대한 답을 모바일 팀에서 실행한 이전 조사에서 발견함
          + 네이티브 모바일 애플리케이션에서 이 캐싱을 구현했을 때 구형 Android 폰과 같은 일부 기기는 디스크에서 매우 느리게 읽었음
          + 따라서 디스크 캐시에서 데이터를 로드하는 것이 API에서 동일한 데이터를 로드하는 것보다 더 빠를 것이라고 가정할 수 없었음
     * 모바일 조사 결과, 페이지 로드에는 이미 두 개의 비동기 요청(SQLite와 API)을 서로 ""경쟁""시키는 일부 로직이 있었음
          + 탐색 클릭을 위한 코드 경로에서 이 로직을 단순히 다시 구현함
          + 이는 실험의 두 그룹 간 탐색 시간의 95번째 백분위수를 동일하게 만들어 줌

결론

     * 브라우저에서 Notion에 SQLite의 성능 개선 사항을 제공하는 것은 나름의 어려움이 있었음
     * 특히 새로운 기술과 관련하여 일련의 알 수 없는 문제에 직면했고 그 과정에서 몇 가지 교훈을 얻었음:
          + OPFS는 기본적으로 동시성을 우아하게 처리하지 않음. 개발자는 이를 인식하고 그에 맞게 설계해야 함
          + Web Workers와 SharedWorkers(그리고 이 글에서 언급되지 않은 사촌 Service Workers)는 서로 다른 기능을 가지고 있으며, 필요한 경우 이들을 결합하는 것이 유용할 수 있음
          + 2024년 봄 현재 정교한 웹 애플리케이션에서 크로스 오리진 격리를 완전히 구현하는 것은 쉽지 않음. 특히 타사 스크립트를 사용하는 경우 더욱 그러함
     * 사용자를 위해 브라우저에 SQLite로 데이터를 캐싱한 결과, 앞서 언급한 탐색 시간 20% 향상을 보았고 다른 측정 지표가 저하되는 것은 보지 못했음
          + 중요한 것은 SQLite 손상으로 인한 문제가 관찰되지 않았다는 것
          + 이 최종 접근 방식의 성공과 안정성은 SQLite의 공식 WASM 구현을 담당한 팀, 그리고 대중에게 실험적 접근 방식을 제공한 Roy Hashimoto 덕분이라고 생각함

   구글이나 페이스북 등의 경우 오래되고 느린 인터넷 환경의 접근성을 위해 저사양/저데이터 모드라는 서비스를 제공했었는데... 요즘은 구글이나 페북도 다 없애버렸죠.
   물론 최신 기술은 성능이나 기능적 면에서 혜택은 크지만, 문제는 그로 인한 저사양 및 구형 모델의 차별이라는 과제가 남아 있습니다.
   우리가 그토록 혐오하는 IE도 그 문제 중 하나지만, IE는 보안 문제 때문에 정당화될 수는 없었죠. 하지만 여전히 많은 기업에서는 IE를 주력으로 쓰고, 2024년 현재도 일부 업체에서는 윈도우 XP에 IE8로 업무를 봅니다. 근데 그들은 무시해도 되는 수준이긴 하지만 특히 금융 쪽에서는 이들 무시하면 X됩니다. 그래서 금융 및 공공 일부 프로젝트가 빡신 이유 중 하나가 이 IE 지원이라는 거대한 장벽이죠.

   이래서 서드파티랑 협력해야 하는 서비스는 첫 출시부터 교차출처격리 활성화 하고 나가야...

   오잉 cometkim님 반갑습니당

   제 firefox에서 노션 페이지를 열면 먹통이 되어 쓸 수가 없는데 이거 때문이려나요.. (노션앱은 잘 동작해서 일단 그걸로 쓰고 있음)

   아마 그럴겁니다. Enda도 크롬&엣지만 로컬 파일 쓰기를 지원하더라구요

   예전 오래된 리눅스 랩탑에서 이런 적이 있었는데, 비공개 모드로 켜면 되더라구요
"
"https://news.hada.io/topic?id=15990","Maestro - Netflix의 Workflow Orchestrator 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Maestro - Netflix의 Workflow Orchestrator 오픈소스

     * 완전 관리형 서비스형 워크플로우(WAAS)를 제공하는 범용, 수평 확장 가능한 워크플로 오케스트레이터
          + 데이터 파이프라인 및 머신 러닝 모델 학습 파이프라인 등 대규모 워크플로 관리
          + 재시도, 대기열, 작업 배포 등 워크플로 수명주기 전체를 감독
          + 다양한 형식의 비즈니스 로직 패키지 지원 (Docker 이미지, 노트북, bash 스크립트, SQL, Python 등)
          + DAG(Directed Acyclic Graph)뿐만 아니라 비순환 및 순환 워크플로 모두 지원
          + foreach 루프, 하위 워크플로, 조건 분기 등 여러 재사용 가능한 패턴 포함
          + JSON 형식의 유연하고 강력한 오케스트레이션 정의
          + 주요 속성 (작성자, 소유자 정보, 실행 설정) 일관성 유지
          + 각 워크플로 변경마다 새 버전 생성, 추적 및 쉽게 되돌리기 가능
     * 넷플릭스의 데이터 과학자, 데이터 엔지니어, 머신 러닝 엔지니어, 소프트웨어 엔지니어, 콘텐츠 제작자, 비즈니스 분석가 등 수천 명의 사용자가 다양한 유스케이스를 위해 이 서비스를 이용중
          + 서비스가 있다는 것은 2년전에 공개되었고, 이번에 오픈소스로 공개됨
          + ETL 파이프라인, ML 워크플로, AB 테스트 파이프라인 등 다양한 워크플로 사용 사례 지원
          + 수평 확장성으로 많은 수의 워크플로와 개별 워크플로 내의 많은 작업 관리 가능
     * 매일 수십만 개의 워크플로우와 수백만 개의 작업을 예약하고 트래픽이 급증하는 상황에서도 엄격한 SLO로 운영되고 있음
          + 넷플릭스내의 기존 수백만 개의 워크플로를 중단 없이 Maestro로 성공적으로 마이그레이션했음
          + 지난 1년 동안 실행된 작업이 87.5% 증가
          + 하루 평균 수십만 개의 작업을 실행하며 바쁜 날에는 약 200만 개의 작업을 완료

   이번에 오픈소스로 공개하며 적은 소개글을 AI가 요약해줬네요 : Maestro: Netflix의 워크플로우 오케스트레이터

   근데 Maestro 이름을 가진 것들이 너무 많네요 ㅎㅎ
   Maestro - 리눅스 호환 가능한 Rust 기반 커널
   Maestro - 모바일 앱 자동화 UI 테스팅 프레임워크
"
"https://news.hada.io/topic?id=15998","Let's Encrypt - OCSP 서비스 종료 발표 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Let's Encrypt - OCSP 서비스 종료 발표

     * Let’s Encrypt는 가능한 한 빨리 OCSP(Online Certificate Status Protocol) 지원을 종료하고 Certificate Revocation Lists (CRLs)로 전환할 계획임
     * OCSP와 CRLs는 모두 인증서 폐기 정보를 전달하는 메커니즘이지만, CRLs가 OCSP보다 많은 장점을 가짐
     * Let’s Encrypt는 10년 전 출시 이후 OCSP 응답자를 제공해왔으며, 2022년에 CRLs 지원을 추가함
     * 웹사이트와 방문자는 이 변경 사항에 영향을 받지 않지만, 일부 비브라우저 소프트웨어는 영향을 받을 수 있음

OCSP 지원 종료 이유

     * OCSP는 인터넷 프라이버시에 상당한 위험을 초래함
     * OCSP를 통해 인증서 폐기 상태를 확인할 때, 방문자의 특정 IP 주소에서 방문한 웹사이트를 인증 기관(CA)이 즉시 알 수 있음
     * Let’s Encrypt는 이 정보를 의도적으로 보관하지 않지만, 법적으로 수집을 강요받을 수 있음
     * CRLs는 이러한 문제가 없음

CA 인프라 단순화

     * Let’s Encrypt의 CA 인프라를 가능한 한 단순하게 유지하는 것이 중요함
     * OCSP 서비스 운영은 많은 자원을 소모하며, 이제 CRLs를 지원하므로 OCSP 서비스는 불필요해짐

CA/Browser Forum의 결정

     * 2023년 8월, CA/Browser Forum은 공개적으로 신뢰할 수 있는 CA가 OCSP 서비스를 선택적으로 제공할 수 있도록 하는 결정을 통과시킴
     * Microsoft를 제외한 대부분의 루트 프로그램은 더 이상 OCSP를 요구하지 않음
     * Microsoft Root Program도 OCSP를 선택 사항으로 만들면, Let’s Encrypt는 OCSP 서비스 종료를 위한 구체적이고 신속한 일정을 발표할 계획임

OCSP 서비스 의존성 종료 권장

     * 현재 OCSP 서비스에 의존하는 사람들은 가능한 한 빨리 그 의존성을 종료하는 과정을 시작해야 함
     * Let’s Encrypt 인증서를 사용하여 VPN과 같은 비브라우저 통신을 보호하는 경우, 인증서에 OCSP URL이 포함되지 않아도 소프트웨어가 올바르게 작동하는지 확인해야 함
     * 대부분의 OCSP 구현은 ""fail open"" 방식으로 작동하여 OCSP 응답을 가져올 수 없는 경우 시스템이 중단되지 않음

GN⁺의 정리

     * Let’s Encrypt가 OCSP 지원을 종료하고 CRLs로 전환하는 이유와 그 중요성을 설명함
     * OCSP가 프라이버시 문제를 초래할 수 있으며, CRLs가 이를 해결할 수 있는 방법을 강조함
     * CA 인프라의 단순화와 자원 절약의 필요성을 언급함
     * CA/Browser Forum의 결정과 Microsoft의 향후 계획에 대한 기대를 나타냄
     * OCSP 서비스에 의존하는 사용자들에게 조언을 제공함

   CRLs는 갱신/싱크 속도 이슈가 있고, 크기가 커지면서 탐색 속도에 제한이 생기기도 하는데 이 문제는 어떻게 해결하게 될지 궁금하네요. 다른 인증서 Provider들에 비해 Let’s Encrypt에서 관리하는 인증서의 양이 엄청 많을 것으로 예상되기도 하고요.

        Hacker News 의견

     * OCSP Watch를 만든 후, CT 로그에서 인증서를 찾을 때 CA가 인증서를 발급한 사실을 잊어버린 경우가 종종 발견됨
          + CRL은 모든 발급된 인증서의 상태를 제공하지 않기 때문에 이를 감지할 수 없음
          + 루트 프로그램이 OCSP URL을 인증서에 포함시키는 요구를 제거하고, 모든 발급자의 OCSP URL을 CCADB에 공개하도록 했으면 좋겠음
     * 모든 인증서에 Must Staple 제한을 무조건 추가하는 것이 좋음
          + 이는 프라이버시 문제를 해결하고, 브라우저 이외의 넓은 지원을 허용함
     * letsencrypt는 20년 전 우리가 상상했던 커뮤니티 중심의 인터넷 인프라임
          + letsencrypt를 사랑함
     * Microsoft Root Program이 OCSP를 선택 사항으로 만들면, letsencrypt는 OCSP 서비스를 종료할 계획임
          + Microsoft가 이 변화를 6~12개월 내에 시행할 것으로 기대함
          + 업데이트를 확인하려면 Discourse의 API Announcements 카테고리를 구독하는 것이 좋음
     * 인증서 관리는 인간 행동과 컴퓨터 과학의 교차점에서 흥미로운 문제임
          + 이론적으로는 간단하지만, 현실에서는 매우 복잡해짐
     * 웹 서버에서 CRL 지원은 어떤지 궁금함
          + NGINX와 Apache는 OCSP 스테이플링만 지원함
     * LetsEncrypt를 사용하는 사람들에게 어떤 의미인지 쉽게 설명해줄 수 있는지 궁금함
          + Nginx나 Caddy 같은 서버를 사용하는 경우 변경이 필요한지 궁금함
     * Chrome이나 Firefox를 사용하지 않는 경우, 어떻게 인증서 폐기를 확인할 수 있는지 궁금함
          + 이는 웹을 덜 개방적으로 만듦
     * ACME, DNS-01 챌린지, OCSP를 지원하는 무료 또는 저렴한 인증서 제공자가 있는지 궁금함
          + ZeroSSL 외에 다른 제공자가 있는지 궁금함
     * CRL은 확장성이 없고 업데이트에 시간이 오래 걸림
          + CRL이 기가바이트로 커지는 문제를 해결하기 위해 표준 이진 형식이 없는 이유가 궁금함
          + 쿠쿠 필터나 유사한 데이터 구조를 사용하면 최신 이진 블롭을 자주 가져올 수 있음
"
"https://news.hada.io/topic?id=15986","2024년 7월 인텔 코어 13/14세대 데스크탑 CPU 불안정성 보고서 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             2024년 7월 인텔 코어 13/14세대 데스크탑 CPU 불안정성 보고서 업데이트

    13세대 및 14세대 Intel Core 데스크탑 프로세서 불안정성 보고서 업데이트

     * 문제 분석 결과
          + Intel Core 13세대 및 14세대 데스크탑 프로세서에서 불안정성을 유발하는 원인이 높은 작동 전압임을 확인함
          + 이 높은 전압은 잘못된 전압 요청을 하는 마이크로코드 알고리듬에서 비롯됨
     * 해결책
          + Intel은 이 문제를 해결하기 위해 마이크로코드 패치를 제공할 예정임
          + 패치는 8월 중순에 파트너에게 배포될 예정임
     * 고객 지원
          + 현재 불안정성을 겪고 있는 고객은 Intel 고객 지원에 문의할 것을 권장함

    사용자 반응

     * 테스트 기대
          + 다양한 메인보드, CPU, RAM 구성으로 업데이트를 테스트해보기를 기대함
     * 마이크로코드 문제
          + 마이크로코드 문제로 인한 전압 상승이 원인임을 확인하고 문제 해결을 환영함
     * 기존 지침
          + 업데이트가 제공되기 전까지 기존 지침을 따를 것을 권장함
     * BIOS 업데이트 문제
          + 일부 메인보드 제조사의 BIOS 업데이트가 지연되고 있는 문제를 언급함
     * 전압 문제
          + 전압 문제로 인한 CPU 손상 여부와 관련된 질문이 제기됨
     * 제조 결함
          + 제조 결함으로 인한 문제 가능성을 제기하며, Intel의 투명성 부족을 지적함
     * 장기적 영향
          + 높은 전압으로 인한 장기적인 CPU 손상 가능성에 대한 우려를 표명함
     * RMA 경험
          + 일부 사용자는 CPU 교체(RMA) 경험을 공유하며, 문제 해결을 위한 추가 정보를 요청함

    GN⁺의 정리

   Intel Core 13세대 및 14세대 데스크탑 프로세서의 불안정성 문제는 잘못된 마이크로코드 알고리듬으로 인한 높은 작동 전압에서 비롯됨. Intel은 이를 해결하기 위해 마이크로코드 패치를 제공할 예정이며, 고객 지원을 통해 문제를 해결하려고 함. 사용자들은 다양한 반응을 보이며, 일부는 장기적인 CPU 손상 가능성에 대한 우려를 표명함. 이 문제는 CPU의 안정성과 수명에 중요한 영향을 미칠 수 있으므로, 관련된 사용자들은 최신 정보를 지속적으로 확인하는 것이 중요함.

        Hacker News 의견

     * Intel의 마이크로코드 문제라는 주장에 의문을 제기하는 의견
          + Intel이 마이크로코드 문제로 처리하면 비용이 적게 들기 때문에 그렇게 주장할 동기가 있음
          + 하드웨어 문제라면 리콜을 해야 하고, 이는 수십억 달러의 비용이 들 수 있음
          + 문제 진단과 해결에 너무 오랜 시간이 걸렸음
          + 몇 달 동안 연구 개발을 통해 우회 방법을 찾으려 했을 가능성이 있음
          + 마이크로코드 업데이트가 일부 CPU의 문제만 해결할 것이라는 예측
     * 마이크로코드 패치가 성능에 미치는 영향과 CPU의 장기적인 안정성에 대한 우려
          + 높은 전압이 안정성을 높이지만, 지나치면 위험할 수 있음
          + 소프트웨어 패치가 전압을 낮출 수 있지만, 이미 누적된 피로를 되돌릴 수는 없음
     * 마이크로코드 패치가 Zen5 리뷰 이후로 지연된 것에 대한 의심
          + 리뷰어들이 Zen5와 Raptorlake를 비교한 후에 패치를 발표하려는 의도일 수 있음
     * 2002년의 Sudden Northwood Death Syndrome과의 유사성
          + 과거에는 고정된 전압과 주파수로 작동했지만, 현재는 펌웨어에서 자동으로 오버클럭/오버볼팅을 시도함
          + 작은 공정 크기와 높은 전압이 CPU의 취약성을 증가시킬 수 있음
          + 높은 전압이 CPU를 손상시킬 수 있다는 경험담
     * 13세대/14세대 모바일 칩셋의 유사한 문제에 대한 논의
          + Intel은 다른 문제라고 주장하지만, 결과를 지켜봐야 함
     * 마이크로코드로 해결할 수 없는 문제라는 의견
          + 관련 콘텐츠를 본 후, 마이크로코드로 해결할 수 없다고 생각함
     * 높은 작동 전압을 받은 CPU가 영구적으로 손상되었는지에 대한 질문
     * 구형 프로세서를 주문할 수 있는지에 대한 질문
          + 구형 프로세서가 더 이상 제조되지 않아서 구할 수 없는지에 대한 의문
     * Intel의 혁신이 둔화되었거나 AMD가 기술/마케팅/특허로 Intel을 궁지에 몰아넣었다는 인상
          + 그러나 Intel이 완전히 끝난 것은 아니라고 생각함
"
"https://news.hada.io/topic?id=15977","DB Browser for SQLite 3.13.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    DB Browser for SQLite 3.13.0 릴리즈

     * GUI 환경에서 SQLite 데이터베이스를 조작할 수 있는 유틸리티
     * Linux, macOS, Windows 지원 (코드 서명, 공증되어 배포)
     * 약 3년만의 안정 버전 릴리즈
     * 직접 다운로드 받아 업데이트하는 것은 지금도 가능, 앱 내 업데이트 안내는 약 1주일 뒤로 예정됨 (Safe Release)
     * 널리 알려진 패키지 관리자(Chocolatey, Homebrew, Snap, Winget)등은 현재 릴리즈를 알리고 있는 중
     * 번들 SQLCipher, SQLite 버전 업데이트
     * RETURNING, STRICT, 새로운 수학 함수 등 지원 추가
     * SQLite의 다양한 확장을 포함하고 있는 ‘sqlean’ 확장 추가
     * 데이터 브라우저를 별도의 탭 또는 창으로 열어 비교 및 탐색 가능
     * 데이터베이스 셀 편집기에 ‘평가' 기능 추가
     * 클립보드에 저장된 CSV를 가져올 수 있고, 데이터베이스 컨텐츠를 JSON 형태로 추출하는 기능 추가
     * 기타 여러 개선 포함

   안녕하세요. 이 글을 게시한 저는 이 프로젝트의 메인테이너 중 한 명입니다. 3년 만의 안정 버전 릴리즈인데다가, 저 개인적으로는 무언갈 공개적으로 릴리즈하는게 처음이라 많이 배우면서도 긴장되는 경험이였습니다.
   프로젝트에 관해 의견 또는 질문이 있으시다면 이 게시글에 댓글이나 저장소에 이슈 남겨주시면 답변드리겠습니다. 감사합니다!

   *또한 프로젝트 관계자인 제가 직접 이 소식을 업로드하는게 홍보처럼 보일까봐 걱정이 되는데, FOSS 프로젝트이고 GeekNews에 몇 번 언급이 된 적이 있었기 때문에 괜찮을 것이라 판단되어 게시합니다.
   만약 문제가 된다면 모더레이터분을 통해서 게시글을 삭제하겠습니다. 또한 글의 문체는 다른 글을 참고하여 최대한 비슷하게 작성하였습니다.

   오 한국분도 계셨군요. 왠지 한국어 지원이 충실하더란...ㅎㅎ
   가끔씩 사용하는데 사용할 때마다 정말 편하게 사용하고 있습니다!

   좋은 소식 고맙습니다~
   덕분에 몰랐던 프로젝트 접하게 되어 좋았습니다 ^^

   메인테이너 중에 한국분이 계셨군요!
   항상 잘 쓰고 있습니다!
"
"https://news.hada.io/topic?id=15954","크라우드스트라이크 사건, 미국의 취약점을 적들에게 노출하는 로드맵 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                크라우드스트라이크 사건, 미국의 취약점을 적들에게 노출하는 로드맵 제공

디지털 회복력에 무슨 일이 일어났는가?

     * 디지털 재앙의 원인
          + 금요일에 공항, 병원, TV 방송국에 영향을 미친 디지털 붕괴는 소프트웨어 업데이트의 버그로 인해 발생함
          + 이는 적대 세력에 의한 것이 아니라, 미국의 취약성을 드러낸 사건임
     * 왜 복구가 어려운가
          + 바이든 행정부는 러시아와 중국 해커의 공격 시나리오를 시뮬레이션해왔음
          + 그러나 이번 사건은 단순한 인간 오류로 인한 것임
          + 복잡한 네트워크 시스템에서 작은 실수가 큰 문제를 일으킬 수 있음
     * 사이버 전사들의 반응
          + 이번 사건이 국가 차원의 공격이 아니라는 점에서 안도함
          + 중국의 Volt Typhoon 같은 악성코드는 찾기 어렵고 제거하기 더 어려움
          + 이번 사건은 사이버 회복력의 한계를 다시 한번 드러냄
     * 정부와 민간의 협력
          + 최근 몇 년간 미국은 사이버 보안 문제를 심각하게 다루기 시작함
          + FBI, NSA, CISA 등 정부 기관이 민간 기업과 협력하여 취약점을 공유하고 해커를 경고함
          + 바이든 대통령은 주요 사건을 검토하는 사이버 안전 검토 위원회를 설립함

GN⁺의 정리

     * 이번 사건은 단순한 소프트웨어 업데이트 오류로 인해 발생한 디지털 붕괴임
     * 복잡한 네트워크 시스템의 취약성을 드러내며, 사이버 회복력의 한계를 보여줌
     * 정부와 민간의 협력이 중요하며, 주요 사건을 검토하는 시스템이 필요함
     * 유사한 기능을 가진 제품이나 프로젝트로는 CrowdStrike와 같은 사이버 보안 소프트웨어가 있음

        Hacker News 의견

     * 운영체제가 자주 보안 패치를 필요로 한다면 인프라에 사용해서는 안 된다는 의견이 있음
          + 예를 들어, 공항 모니터에 BSOD가 나타나는 사진을 본 적이 있음
          + 보안은 추가할 수 있는 기능이 아니라 처음부터 내장되어야 하는 것임
          + Windows에 보안을 추가하려는 산업이 존재하지만 여전히 효과적이지 않음
     * 디지털 회복력에 대한 의문이 제기됨
          + 미국의 취약점에 대한 로드맵이 계획되고 있다는 확신이 있음
          + 비용과 편의성 때문에 취약점을 강화하지 않는 것이 문제임
          + Microsoft가 Windows 95를 출시할 때 보안에 대한 고려 없이 사용 편의성을 강조했음
          + 이후 보안 문제로 인해 사용자의 자유가 제한되었고, 이는 사용자 저항을 초래함
     * Crowdstrike가 서구 문명에 재난 복구와 회복력 테스트를 강제로 제공했다는 의견이 있음
          + 한 명의 악의적인 직원이 모든 컴퓨터를 파괴할 수 있음
          + 기술 시스템이 한 벤더의 실수나 해킹에 더 회복력이 있어야 한다는 주장
          + 자동 복구 메커니즘이 구현될 수 있음
     * 수십 년 동안 알려진 비밀이 있음
          + 주요 OS와 브라우저 벤더가 지속적으로 패치를 제공하고 있음
          + 소프트웨어 공급망이 너무 방대해 감사가 불가능함
          + ""보안"" 소프트웨어가 공격 표면을 확장함
     * 비미국 회사라면 CrowdStrike 서비스를 사용하는 것이 위험하다는 의견이 있음
          + FBI가 비밀 영장을 사용해 CrowdStrike에 DLL을 주입하도록 강제할 수 있음
     * 전쟁이 발생하면 8시간 내에 모든 것이 작동을 멈출 것이라는 의견이 있음
          + 현금과 서류 작업으로 돌아가야 하지만 고통스럽고 느릴 것임
     * CrowdStrike가 설치된 Windows 기계를 사용하는 기업에 전 세계적으로 대규모 컴퓨터 중단이 발생함
          + 이 사건이 교훈을 줄지 의문임
     * 컴퓨팅 인프라의 다양성이 필요하다는 의견이 있음
          + 더 많은 중요한 기계가 다른 OS를 사용하면 피해가 제한될 것임
     * AI가 취약점을 식별하고 패치하는 데 도움이 될 것이라는 Google의 Kent Walker의 의견에 반대하는 의견이 있음
"
"https://news.hada.io/topic?id=15872","Korvus - RAG 파이프라인을 쿼리 하나로 통합하는 검색 SDK 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Korvus - RAG 파이프라인을 쿼리 하나로 통합하는 검색 SDK 오픈소스

     * 오픈소스 RAG(검색 증강 생성) 파이프라인
          + LLM, 벡터 메모리, 임베딩 생성, 재랭크, 요약 및 사용자 정의 모델을 단일 쿼리로 결합
          + 성능을 극대화하고 검색 아키텍처를 간소화
     * Postgres 기반으로 구축. Python, Javascript, Rust, C 용 바인딩 제공
          + PostgresML의 pgml 확장과 pgvector 확장을 사용하여 전체 RAG 파이프라인을 PostgreSQL 내에서 압축함
     * 인프라 문제를 최소화 하면서 고성능 사용자 정의 검색 기능을 제공

주요 기능

     * 복잡한 서비스 지향 아키텍처를 단일 강력한 쿼리로 대체하여 아키텍처 단순화
     * API 호출과 데이터 이동을 제거하여 더 빠른 처리와 향상된 안정성 제공
     * 오픈소스 소프트웨어와 Docker에서도 로컬로 실행되는 모델을 사용하여 개발자 경험 개선
     * Python, JavaScript, Rust 등 다양한 언어 지원
     * 임베딩 생성, 벡터 검색, 재순위화, 텍스트 생성을 하나의 쿼리로 통합
     * 내부적으로 시간이 검증된 데이터베이스 플랫폼에서 효율적인 SQL 쿼리로 Korvus 연산 수행

SQL의 힘

     * Korvus는 여러 프로그래밍 언어로 고수준 인터페이스를 제공하지만, 핵심 연산은 최적화된 SQL 쿼리에 기반함
     * 고급 사용자는 기본 쿼리를 검사하고 이해할 수 있음
     * SQL 연산을 수정하거나 추가하여 Korvus의 기능을 확장할 수 있음
     * PostgreSQL의 고급 쿼리 최적화 기능의 이점을 누릴 수 있음
"
"https://news.hada.io/topic?id=15937","LaTeX를 대체할 쉬운 학습 대안, Typst","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       LaTeX를 대체할 쉬운 학습 대안, Typst

Typst: 새로운 마크업 기반 조판 시스템

  Typst 소개

     * Typst는 LaTeX만큼 강력하면서도 배우고 사용하기 쉬운 마크업 기반 조판 시스템임
     * 주요 기능:
          + 일반적인 형식 작업을 위한 내장 마크업
          + 유연한 함수
          + 통합된 스크립팅 시스템
          + 수학 조판, 참고문헌 관리 등
          + 증분 컴파일 덕분에 빠른 컴파일 시간
          + 친절한 오류 메시지

  예제

     * Typst 문서에서 페이지 크기나 제목 번호 매기기와 같은 요소 속성을 설정하는 규칙 사용
     * = Heading 구문을 사용하여 제목 삽입
     * 수학 방정식은 달러 기호로 감싸서 표현
     * 해시와 표현식을 사용하여 스크립트 입력 가능
     * 피보나치 수열을 계산하고 결과를 중앙 정렬된 표에 표시

#set page(width: 10cm, height: auto)
#set heading(numbering: ""1."")
= Fibonacci sequence
The Fibonacci sequence is defined through the recurrence relation $F_n = F_(n-1) + F_(n-2)$.
It can also be expressed in _closed form:_
$ F_n = round(1 / sqrt(5) phi.alt^n), quad phi.alt = (1 + sqrt(5)) / 2 $
#let count = 8
#let nums = range(1, count + 1)
#let fib(n) = (if n <= 2 { 1 } else { fib(n - 1) + fib(n - 2) })
The first #count numbers of the sequence are:
#align(center, table(columns: count, ..nums.map(n => $F_#n$), ..nums.map(n => str(fib(n)))))

  설치

     * Typst의 CLI는 다양한 소스에서 이용 가능
          + 최신 릴리스의 소스 및 사전 빌드된 바이너리는 릴리스 페이지에서 다운로드 가능
          + 패키지 관리자를 통해 설치 가능 (Linux, macOS, Windows)
          + Rust 도구 체인을 사용하여 설치 가능
          + Nix 및 Docker 사용 가능

  사용법

     * Typst 설치 후 다음과 같이 사용 가능:
typst compile file.typ
typst compile path/to/source.typ path/to/output.pdf

     * 소스 파일을 감시하고 변경 시 자동으로 재컴파일 가능:
typst watch file.typ

     * 프로젝트에 맞는 사용자 정의 폰트 경로 추가 가능:
typst compile --font-path path/to/fonts file.typ
typst fonts --font-path path/to/fonts

  커뮤니티

     * 주요 커뮤니티 모임 장소는 Discord 서버
     * 공식 패키지 목록 및 Awesome Typst 저장소에서 커뮤니티가 만든 것들을 찾을 수 있음
     * 커뮤니티에서 나쁜 경험을 했다면 연락 가능

  기여

     * 버그를 경험하면 이슈를 열 수 있음
     * 새로운 기능이나 버그 수정을 구현하고 싶다면 기여 가이드를 따를 것
     * Typst를 직접 빌드하려면 최신 안정 버전의 Rust 설치 필요
git clone https://github.com/typst/typst
cd typst
cargo build --release

  발음 및 철자

     * IPA: /taɪpst/
     * ""Ty""는 Ty pesetting의 ""Ty""와 같고 ""pst""는 Hi pst er의 ""pst""와 같음
     * Typst를 쓸 때는 대문자 ""T""로 시작하는 고유 명사로 표기

  디자인 원칙

     * Typst는 세 가지 주요 목표를 염두에 두고 설계됨: 강력함, 단순함, 성능
     * 세 가지 핵심 디자인 원칙:
          + 일관성을 통한 단순함: Typst에서 한 가지를 아는 경우, 다른 것에도 그 지식을 적용할 수 있어야 함
          + 조합성을 통한 강력함: 몇 가지 조합 가능한 시스템을 제공하여 유연성을 높임
          + 증분성을 통한 성능: 모든 Typst 언어 기능은 증분 컴파일을 지원해야 함

GN⁺의 정리

     * Typst는 LaTeX의 강력함을 유지하면서도 사용하기 쉽게 설계된 마크업 기반 조판 시스템임
     * 수학 방정식, 참고문헌 관리 등 다양한 기능을 제공하며, 증분 컴파일 덕분에 빠른 컴파일 시간을 자랑함
     * 커뮤니티와의 상호작용을 통해 지속적으로 발전하고 있으며, 기여를 환영함
     * LaTeX를 대체할 수 있는 강력한 도구로, 조판 작업을 더 효율적으로 만들 수 있음

   LeTeX 를 라텍스 라고 읽나요? 레이텍 이라고 할 텐데.

        Hacker News 의견

     * Typst는 매우 놀라운 도구이며, 우리 조직에서는 매우 만족스러움
          + 매일 밤 150만 개 이상의 PDF를 생성해야 했고, 여러 솔루션을 실험했음
          + Puppeteer, pdflatex, lualatex 등을 사용해봤지만 Typst가 훨씬 빠르고 자원 소모가 적었음
          + LaTeX 템플릿은 개발자 경험이 좋지 않았지만, Typst 템플릿은 직관적이었음
          + 더 자세한 내용은 블로그에서 확인 가능: 블로그 링크
          + 과거 논의 및 관련 자료: 링크
     * Typst를 사용해 많은 과제를 작성했으며, 학술적 글쓰기를 더 간편하고 재미있게 만들어줌
          + Typst의 함수형 문법 덕분에 Microsoft Word나 Google Docs에서 발생하는 불규칙한 동작을 피할 수 있었음
          + VSCode 같은 로컬 IDE를 사용하면 모든 기능을 활용할 수 있음
          + LaTeX와 비교했을 때 문서 조판이 훨씬 간단함
          + 그러나 긴 수식 입력에서는 LaTeX가 더 편리함
     * HTML 출력이 진행 중이라는 사실에 놀랐음
          + LaTeX와 웹의 어색한 관계를 해결하려는 시도가 필요하다고 생각함
          + 관련 이슈: GitHub 이슈 링크
     * Typst가 LaTeX를 대체하기를 기대함
          + Jinja2 템플릿을 사용해 TeX 파일을 생성했지만, Typst는 JSON을 명령줄에서 받아 Python 단계를 제거할 수 있음
          + 컴파일 시간도 밀리초 단위로 매우 빠름
     * Typst의 주요 문제는 LaTeX에 비해 기본적인 세밀한 타이포그래픽 기능을 처리하지 못함
          + 수학 모드에서의 다양한 간격이나 구분 기호 크기 조절이 어려움
     * 다른 스레드에서 이 주제를 봤음
          + 성인 학부생으로 LaTeX를 사용해본 적 없고, Word 문서를 만들어야 했음
          + 현재 워크플로우는 pandoc 스타일의 markdown과 zotero를 사용함
          + 다른 대학으로 석사 과정을 옮길 예정이며, Typst로 전환할지 고민 중임
     * Typst는 Overleaf와 codimd 같은 서비스의 경쟁자일 것 같음
          + 새로운 문법이지만 pandoc에서 지원됨
          + Quarto를 사용해 HTML 출력을 생성하지만, 학술적 사용 문제를 해결하지 못함
          + Word는 여전히 과학적 글쓰기에서 대체하기 어려울 것 같음
     * Typst의 가장 좋은 점은 직관적이라는 것임
     * Typst를 사랑함
          + 프로그램 입력을 처리하기에 좋음
          + JSON을 쉽게 처리할 수 있어 프로젝트에서 LaTeX를 Typst로 교체했음
          + 관련 문서: Typst 문서 링크
          + 프로젝트 링크: Resgen 링크
"
"https://news.hada.io/topic?id=15901","Show GN: Relly - 병목 없는 프로젝트 관리 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: Relly - 병목 없는 프로젝트 관리 도구

   [소개]

   Jira 대신 간단하게 사용할 수 있는 직관적인 프로젝트 관리 도구를 만들려고 합니다.

   [주요 특징]
    1. 한 눈에 보이는 진행 상황
       동료의 작업을 기다리며, 매번 진행 상황을 확인하는 것은 너무 번거롭습니다. 의존성을 중심으로 작업을 나열해서 빠르게 다른 사람의 작업 상태를 확인할 수 있고, 전체 프로젝트의 병목 지점을 빠르게 확인할 수 있는 시각화 방식을 제공합니다.
    2. 지금 당장 할 일을 한 곳에서
       가끔씩 지금 무슨 일을 해야할 지 혼란스러운 경우가 있습니다. 정확한 상황 공유가 되지 않아 때로는 팀의 목표와 다른 일을 하기도 합니다. Relly는 전체 프로젝트 상황을 추적하고 할 일 목록을 한 번에 제공하여 효율적인 업무 관리를 돕습니다.
    3. 내가 꼭 알아야 하는 알림만
       반드시 팀 내의 모든 일을 알아야 하는 것은 아닙니다. 작업 의존성을 기준으로 꼭 필요한 내용만 집중할 수 있는 알림을 제공합니다.

   [진행 상황]

   현재 초기 버전의 제품을 열심히 제작 중입니다. 직접 여러 프로젝트 관리 도구를 사용하며 느꼈던 아쉬움을 해소할 수 있는 제품을 만들려고 합니다. 다만 얼마나 Relly의 콘셉에 공감하는 고객들이 있을지 알지 못하기 때문에 가볍게 수요를 확인해보려고 합니다.

   relly.io에 방문하여 Relly의 디자인과 철학을 보시고, 괜찮다고 생각이 든다면 이메일을 남겨주세요.
   출시하면 가장 빠르게 알려드리겠습니다!

   꽤 쓸만해 보입니다.
   규모가 커졌을때 너무 많은 이슈가 동시에 처리되거나 의존관계가 있을때 어떻게 변할지가 궁굼하네요

   감사합니다! 지금은 프로젝트와 feature 단위로 보드를 분리해서 해결할 계획입니다. 말씀 주신 부분이 저희도 고민하던 내용이라 직접 만들어보면서 조금 더 구체적인 답이 나올 것 같습니다 :)

   1, 2, 3은 jira에서도 가능한데 어떤 차별점이 있을까요?

   안녕하세요! 관심 가져주셔서 감사합니다.

   맞습니다. 저희가 제공하는 기능은 따지고보면 Jira나 다른 제품에서 이미 제공하는 기능들입니다.
   다만 Jira를 제대로 쓰기 위해서는 별도의 대시보드를 세팅하거나 사용법을 익혀야 하는데요. 저희 제품은 Jira를 배우고 도입하는데 부담을 느끼는 팀들을 위해 만들어졌습니다.

   2번 기능은 Jira로 따지면 subtask를 각 상황에 맞게 한 번에 보여주는 기능인데 이미 제공하는 기능인지는 몰랐네요.
"
"https://news.hada.io/topic?id=15955","X.com, Firefox 엄격한 추적 보호 활성화 시 열리지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 X.com, Firefox 엄격한 추적 보호 활성화 시 열리지 않음

        Hacker News 의견

     * Firefox의 엄격한 추적 방지 기능은 소셜 미디어 추적기, 크로스 사이트 쿠키, 추적 콘텐츠, 암호화 채굴기, 지문 인식기를 차단함
     * 이러한 기능에 의존하는 사이트는 사용하고 싶지 않음
     * 엄격한 추적 방지 기능으로 Twitter를 열 수 없게 되지만, 단점은 보이지 않음
     * Firefox 측에서 이 문제를 약 2개월 전에 해결했음 (버그 링크 제공)
          + 확장 프로그램이 Twitter의 CDN을 차단할 수 있음 (예: Disconnect Firefox 확장 프로그램)
     * 소셜 미디어 플랫폼에서 주의를 끌기 위해 노력하지 않았던 때를 기억해야 함
     * Twitter를 계속 열기 때문에 Twitter가 여전히 관련성이 있음
     * Firefox를 유지하고 다른 것을 버리는 것이 좋음
     * 해결책은 있지만 사용하지 말고 Mastodon을 사용해야 함
          + 설정에서 Firefox 컨테이너를 활성화하여 X의 쿠키를 다른 사이트와 분리할 수 있음
          + uBlockOrigin을 설치하여 X 자체의 모든 추적기를 차단할 수 있음
     * Firefox의 문제는 관리가 나빠서 시장 점유율이 떨어졌고, 이제 시장 참여자들이 큰 반발 없이 FF 사용자를 차단할 수 있게 되었음
          + 앞으로의 징조임
     * Mobile Safari에서도 유사한 거부가 관찰됨
     * 로그인 없이도 작동하지 않음
          + Twitter 링크를 제공받아도 계정이 없으면 전체 스레드를 볼 수 없음
     * Firefox에서 Twitter가 열리는 문제가 있는 경우 LeechBlock 확장 프로그램이 매우 유용함
          + 일주일도 안 되어 Twitter를 여는 습관이 사라짐
"
"https://news.hada.io/topic?id=15935","연구원, a16z 웹사이트의 결함 발견으로 일부 회사 데이터 노출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  연구원, a16z 웹사이트의 결함 발견으로 일부 회사 데이터 노출

    배경

     * 트위터를 검색하여 회사를 찾고 빠른 펜테스트를 시도하는 것을 좋아함
     * ""Relevant People"" 탭을 자주 사용하여 a16z에 도달함

    해킹

     * a16z를 조사하면서 서브도메인 스캔과 도구를 사용하여 도메인을 검사함
     * portfolio.a16z.com이라는 사이트에서 AWS 키를 발견함
     * JavaScript 파일에서 process.env의 전체 내용이 동적으로 포함된 것을 확인함
     * 이 자격 증명은 실제 자격 증명으로 보였음

    영향

     * 손상된 서비스 목록:
          + 데이터베이스 (PII 포함)
          + AWS
          + Salesforce (계정 제한 가능성 있음)
          + Mailgun (임의 이메일 전송 및 이전 이메일 읽기 가능)
          + 기타 여러 서비스

    보상

     * a16z는 공개적으로 연락한 이유로 버그 바운티를 제공하지 않음
     * 주된 이유는:
          + 메인 사이트에 연락처가 없었음
          + 찾을 수 있는 이메일 engineering@a16z.com이 반송됨
     * 이는 불공평하다고 생각함

    관련 기사

     * TechCrunch 기사: 링크

    GN⁺의 정리

     * 이 기사는 펜테스트와 보안 취약점 발견의 중요성을 강조함
     * a16z와 같은 큰 회사에서도 보안 취약점이 존재할 수 있음을 보여줌
     * 공개적으로 연락하는 방법의 한계와 버그 바운티 프로그램의 중요성을 논의함
     * 비슷한 기능을 가진 프로젝트로는 HackerOne과 Bugcrowd가 있음

        Hacker News 의견

     * Eva는 오픈 소스 프로젝트를 철저히 펜테스트하고 전문적으로 공개했음
          + Eva는 뛰어난 해커이며 책임감 있는 해커임
          + a16z는 Eva를 더 잘 대우해야 함
     * 비슷한 실수를 한 경험이 있음
          + apostrophecms를 사용하여 API 키를 관리했음
          + HTML 소스 코드에 API 키가 출력되는 문제를 발견했음
          + 큰 컨설팅 회사에 펜테스트를 의뢰했지만 그들도 발견하지 못했음
          + 결국 직접 발견하고 로그를 확인했지만 악용되지 않았음
     * 새로운 서비스를 만들고 LetsEncrypt 인증서를 추가하면 로그에 많은 쓰레기 데이터가 나타남
          + a16z의 취약점이 발견되지 않은 것은 운이 좋았거나 악용되지 않았을 가능성이 있음
          + a16z는 법적 제재를 받아야 하지만 현재 법적 틀이 없음
     * a16z는 공개적으로 연락한 이유로 버그 바운티를 제공하지 않았음
          + 회사가 비용을 절감하기 위해 사적으로 연락할 방법을 제공하지 않는다는 의견
     * 회사들이 ""해킹당했다""고 말하는 것은 중요한 자격 증명을 안전하게 보호하지 못한 것을 의미함
     * 광범위한 취약점에 대해 최소한의 보상도 제공하지 않은 것은 부적절함
     * a16z는 ""생성적 AI의 아키텍처"" 백서를 작성하느라 바쁨
          + 세상이 소프트웨어 업데이트 문제로 혼란스러운 동안 미래의 에이전트 세계를 꿈꾸고 있음
     * Salesforce 인스턴스에 접근할 수 있었다면 창업자들에게 매우 불안한 상황이었을 것임
          + Salesforce는 이메일을 기록하며, 이는 외부에 공유되지 않은 자금 조달 계획이나 M&A 계획을 포함할 수 있음
     * VC 회사가 이런 큰 취약점에 대해 버그 바운티를 제공하지 않은 것은 신뢰를 주지 않음
     * 복잡한 웹 앱을 만들 수 있는 기술을 가지고 이런 실수를 어떻게 할 수 있는지에 대한 진지한 질문
          + 대부분의 프론트엔드 및 풀스택 프레임워크는 이런 실수를 방지하려고 노력함
"
"https://news.hada.io/topic?id=15948","CrowdStrike의 CSAgent.sys 충돌 원인 초기 세부 사항","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                CrowdStrike의 CSAgent.sys 충돌 원인 초기 세부 사항

        Hacker News 의견

     * 첫 번째 의견
          + BSOD 문제는 잘못된 이진 데이터와 잘못 작성된 파서의 조합 때문임
          + 지난 10년간의 경험에 따르면, 대부분의 CVE, 충돌, 버그, 느려짐 문제는 이진 데이터를 기계가 읽을 수 있는 데이터 구조로 역직렬화하는 과정에서 발생함
          + 이는 압축 알고리즘, 폰트 아웃라인 리더, 이미지/비디오/오디오 파서, 비디오 게임 데이터 파서, XML/HTML 파서, OpenSSL의 인증서/서명/키 파서 등 다양한 분야에 해당됨
          + CrowdStrike의 EDR 프로그램의 콘텐츠 파서도 예외가 아님
     * 두 번째 의견
          + 루트킷 기반의 엔드포인트 감시 소프트웨어 대신 오픈 소스 솔루션이 더 윤리적일 수 있음
          + 오픈 소스 도구는 투명하게 작동하며 백도어나 심각한 버그가 없음을 보장할 수 있음
          + 공개적으로 감사받을 수 있으며, 보안 팀이 악성코드 서명을 공급하는 비즈니스 모델로 운영될 수 있음
     * 세 번째 의견
          + Microsoft가 CrowdStrike의 중단 사태에 대한 책임이 있음
          + Microsoft는 워크스테이션 컴퓨팅 공간에서 사실상 독점적 위치를 차지하고 있으며, 제품의 보안/신뢰성/기능을 보장할 의무가 있음
          + 경쟁이 없기 때문에 Windows의 혁신이 지연되고 있음
          + 예를 들어, CrowdStrike는 MacOS와 Linux에서는 사용자 공간에서 실행되지만, Windows에서는 그렇지 않음
          + 애플리케이션 샌드박싱 혁신이 필요함
          + Microsoft는 세계 컴퓨팅 인프라의 열쇠를 쥐고 있으며, 거의 감시받지 않음
          + Windows의 수익 비중이 감소했지만, 중요한 인프라를 운영하는 제품이므로 더 많은 책임이 필요함
          + 정부는 데스크탑 워크스페이스 시장에서 경쟁을 촉진하거나 Microsoft의 Windows 제품을 규제해야 함
     * 네 번째 의견
          + 왜 영향 범위가 그렇게 컸는지 이해할 수 없음
          + 중요한 서비스는 자동 모니터링과 롤백 기능을 갖춘 느린 배포가 일반적임
          + 베타 단계에서 고객 트래픽 없이 배포하고, 문제가 없으면 점진적으로 확대하는 방식이 일반적임
          + 이러한 방식이 문제를 즉시 중지시킬 수 있었을 것임
     * 다섯 번째 의견
          + CrowdStrike를 사용하지 않지만, CS 드라이버가 먼저 설치되고 제거할 수 없도록 설계된 것 같음
          + 드라이버가 서명되지 않은 데이터 파일을 로드하고, 사용자가 임의로 삭제할 수 있음
          + 악의적인 사용자가 악성 데이터 파일을 작성하여 드라이버를 오작동하게 할 수 있음
          + 커널 권한을 얻을 수 있는 위험이 있음
     * 여섯 번째 의견
          + 테스트 배포에서 문제를 발견하지 못한 이유가 궁금함
          + 배포 전에 테스트를 하지 않았다는 것이 믿기 어려움
          + 모든 회사는 배포 전에 테스트 환경을 갖춰야 함
          + 개발 중에 실패하거나 문제를 일으키는 패키지를 설치하는 것은 일반적이지만, 이를 직접 프로덕션 환경에 배포하는 것은 좋지 않음
     * 일곱 번째 의견
          + CrowdStrike 고객이 업데이트에 대해 의견을 제시할 수 있는지 궁금함
          + 모든 고객이 CrowdStrike에 완전한 원격 코드 실행 권한을 부여하는지 의문임
          + 인증 기관과 암호화 전문가들이 이러한 업데이트를 시스템에서 차단할 수 있기를 바람
     * 여덟 번째 의견
          + ""채널 파일""이 CS 드라이버에 의해 서명되고 검증되는지 궁금함
          + 그렇지 않다면, 이는 루트킷의 큰 취약점이 될 수 있음
          + 높은 권한으로 실행되는 입력은 최소한 무결성 검사를 받아야 함
          + 채널 파일을 단순히 삭제할 수 있다는 것은 반탐지 메커니즘이 없음을 시사함
"
"https://news.hada.io/topic?id=15897","자발적 이탈을 개선해 리텐션을 높이는 6가지 전략","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      자발적 이탈을 개선해 리텐션을 높이는 6가지 전략

유지율: 비지니스 성공의 핵심 요소


     * 특히 구독 비즈니스에서는 기본적으로 갱신에 대한 기대치가 높기 때문에 이러한 현상이 두드러집니다.
     * B2B 구독 비즈니스의 월간 이탈률은 5% 미만이며, 중견/대기업 세그먼트에 가까워질수록 월간 이탈률은 2% 미만입니다. B2C 구독 비즈니스는 5~7% 정도입니다.
     * 반면 비구독 미디어, 엔터테인먼트, DTC는 월 20% 이상의 이탈률을 보입니다.
     * 이탈은 유지율의 반비례 지표이므로 이를 완화하는 것이 모든 팀의 최우선 순위가 되어야 합니다.

이탈의 두 가지 주요 유형

    1. 자발적: 고객이 자동 갱신을 끄거나 환불을 받아서 의도적으로 떠난다.
    2. 비자발적: 고객의 갱신 결제가 실패했다.

     * 자발적 이탈 지표, 완화 및 회복 전략에 대해 다룰 예정

이탈에 관한 지표

     * 기간(매우 중요 - 대부분의 자발적 이탈은 고객 라이프사이클 초기에 발생함), 위치, 요금제 유형, 사용 사례 또는 기타 중요한 세그먼트별로 분류하세요.
     * 자발적 이탈에 대해 추적해야 할 지표
         1. “자동 갱신 끄기” 사용자의 총량
         2. “자동 갱신 다시 켜기” 사용자의 총량
         3. 취소 시기 ('24시간 이내', '7일 이내', '14일 이내' 등)
         4. 취소 사유
         5. 할인/프로모션/일시 정지 제안의 수락률

자발적 이탈 관리를 위한 6가지 실용적 전략

   1) 이유를 파악하기
     * 고객이 구독을 취소할 때마다 매번 그 이유를 물어봐야 합니다.
     * 강요하거나 방해하는 게 아니라 고객의 동기를 이해하는 데 도움이 되는 단 한 가지 질문만으로도 충분합니다.
     * 객관식 질문이 일반적으로 응답률이 더 높습니다.
     * 가장 빈번한 취소 사유
         1. 가격이 너무 비싸서
         2. 누락된 기능
         3. 예상대로 작동하지 않음
         4. 경쟁업체로 전환
         5. 더 이상 필요 없음
         6. 자동 갱신을 원하지 않습니다.

   2) 타이밍에 주의하기
     * 자동 갱신 취소 타이밍은 매우 중요합니다. 이는 항상 두 가지 극단으로 나뉩니다. 50%는 구독 후 첫 2일 동안, 나머지 50%는 마지막 2일 동안 자동 갱신을 해제합니다. 또한 이 두 그룹의 동기 부여와 복구율은 완전히 다릅니다.
     * 조기 취소: 구독 직후 취소하는 사용자. 이 그룹은 구독 기간 내 마음을 돌릴 가능성이 있다.
         1. 아직 제품의 가치를 확신하지 못함
         2. 자동 결제를 원하지 않는 경우
         3. 일회성으로 사용하는 경우
     * 늦은 취소: 구독 기간의 마지막 2일에 취소하는 사용자. 이들은 제품을 온전한 기간 동안 경험하고 자동 갱신하지 않기로 결정한 것이다. 하지만 이중 일부는 할인 전략으로 회유할 수 있다.

   3) 클릭 한 번으로 자동 갱신을 다시 켜는 영구적인 옵션 제공
     * 구독 주기 초기에 자동 갱신을 껐던 계정의 경우 신중한 태도를 가지고 있을 가능성이 높습니다. 따라서 구독을 다시 켜는 방법을 매우 쉽게 만드세요.
     * 원클릭 전략 : 갱신 버튼을 원클릭 자동 갱신으로 설정하면 조기 구독 취소의 약 20%를 막을 수 있다.
     * 배너
         1. 모바일, 데스크톱 앱, 웹 등 모든 화면에 ""자동 갱신 다시 켜기"" 배너를 지속적으로 표시
         2. ""자동 갱신을 취소했습니다!""라는 배너 표시
         3. 정해진 날짜에 구독이 종료되며 프리미엄 기능에 액세스할 수 없게 된다는 것을 알리기
         4. “자동 갱신을 다시 켜려면 여기를 클릭하세요.""라는 메시지가 표시

   4) 할인
     * 할인을 제공하는 전략은 일반적으로 제품의 가치를 높일 수 있는 시간을 늘리거나 인지 가치에 맞게 가격을 낮추는 것입니다.
     * 만일 고객이 가격이 문제라고 말한다면 두 가지 할인을 실험해 볼 수 있는 좋은 기회입니다.
     * 시간 늘리기 (Microsoft : 2개월 무료 제공)
     * 가격 낮추기 (Audible : 50% 할인)
     * 주의할 점은 할인을 받기 위해 구독을 취소하는 행동을 유발할 수 있으므로 모든 사람에게 일괄 할인을 제공해선 안 됩니다.
     * 취소 질문 또는 특정 계정 활동과 매우 밀접하게 연관된 고객의 이탈 성향에 따라 할인을 제공 하세요.
          + 제품을 활발하게 사용 중이지만 이탈하려 하는 계정 : 10~25% 할인으로 고객을 설득할 수 있습니다.
          + ""잠자는 곰"" 계정 : 이들의 관심을 끌고 행동을 변경하여 이탈을 방지하기 위해 훨씬 더 큰 할인 또는 몇 기간 동안의 보상을 제공하세요.
     * 반드시 정교한 통계 모델을 기준으로 할 필요는 없습니다. 계정이 최근 14-30일 동안 활성화되었는지만 확인하고, 그에 따라 할인을 계층화하는 방법으로도 가능합니다.

   5) 구독 일시 중지 옵션 제공
     * '일회성 사용' 취소가 많다면, Netflix처럼 구독을 일시 중지할 수 있는 기능을 제공하세요

   6) 구독 취소 시 잃게 될 것을 보여주기
     * 사용자가 유료 구독을 취소할 경우 잃게 될 기능을 실제로 보게 하는 것이 중요합니다.
     * 예를 들어, Dropbox는 무료 요금제 할당 용량을 초과한 용량과 프리미엄 용량을 비교하여 표시하는 모듈을 개발 중입니다. 이는 ""회원님은 100기가바이트의 용량을 사용 중이며, 이 중 98기가바이트는 무료 요금제 할당량을 초과해 삭제될 예정입니다.""라고 알리는 것입니다.

  어려운 부분

     * 자발적 이탈을 막는 전략이 아무리 좋아도, 그것은 단지 응급처치일 뿐 근본적인 문제, 즉 고객들이 왜 떠나려고 하는지를 해결하는 것은 아닙니다.
     * 이탈을 개선하는 가장 좋은 방법은 고객이 지불하는 가격에 비해 훨씬 더 많은 가치를 제공하는 참여도가 높은 유료 고객층을 만드는 것입니다.
     * 따라서 이탈 지표에 변화를 주고 싶다면 유료 기능에 특히 주의를 기울여 유료 고객을 활성화하고 참여를 유도하는 방법을 고민해야 합니다.


  자료 찾느라 시간 낭비하지 말고, 성장에만 집중하세요

   매주 월수금, 스타트업 성공 전략을 간편하게 모아서 볼 수 있도록 뉴스레터로 보내드리고 있습니다.

   👉 지난 호 보고 뉴스레터 구독하기 👈

   쿼터는 근무 시간의 25%가 자료 검색에 낭비된다는 통계에서 시작했습니다.
   이 문제를 해결하기 위해, 저희는 즉시 실행 가능한 전략을 직접 찾아 보내드리고 있습니다.

   👉 지난 호 보고 뉴스레터 구독하기 (https://page.stibee.com/subscriptions/348531) 👈
"
"https://news.hada.io/topic?id=15940","Transcribro - 안드로이드용 온디바이스 음성인식 키보드 및 서비스 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Transcribro - 안드로이드용 온디바이스 음성인식 키보드 및 서비스 오픈소스

     * Whisper.cpp 를 이용한 음성인식 + Silero VAD로 음성 활동 감지
     * 음성으로 입력 가능한 키보드로 사용 및 다른 앱에서 Speech To Text 앱으로 설정해서 음성 입력 가능
     * Kotlin 오픈소스

   비슷한 앱으로 FUTO 가 있음 https://voiceinput.futo.org/
"
"https://news.hada.io/topic?id=16000","Rust를 약 10년 동안 사용하며 (그리고 사랑하며) 느낀 실망스러운 점들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Rust를 약 10년 동안 사용하며 (그리고 사랑하며) 느낀 실망스러운 점들

   Rust를 사용한 지 대략 10년이 되었고, 이 언어를 정말 사랑합니다. 하지만 몇 가지 실망스러운 점들도 존재합니다. 아래는 그 목록입니다.

    1. Result<T, E>의 문제

   Rust의 오류 처리가 명확하고 강제적이라는 점은 훌륭합니다. 그러나 실제로 사용하다 보면 불편함이 많습니다.
     * 라이브러리 작성자의 어려움: 새로운 오류 타입을 만들고 변환하는 과정이 번거롭습니다. 종속성을 추가할 때마다 각 함수의 오류 타입을 래퍼 오류 타입에 추가하는 작업은 특히 귀찮습니다.
     * 애플리케이션 코드의 번거로움: 함수가 왜 실패했는지보다는 오류를 상위로 전파하고 사용자에게 결과를 보여주는 것이 중요합니다. Java와 달리 Rust는 전파 과정에서 백트레이스를 제공하지 않아 문제의 원인을 파악하기 어렵습니다.

    2. 모듈 시스템의 유연성

   Rust의 모듈 시스템은 너무 유연하여 오히려 불편할 때가 많습니다.
     * 과도한 유연성: 타입을 재수출하거나 접근 수준을 세밀하게 조정할 수 있지만, 이는 실수로 원하지 않는 타입을 노출시키는 결과를 초래할 수 있습니다.
     * 고아 규칙의 문제: 프로젝트를 여러 크레이트로 나누는 것이 권장되지만, 고아 규칙이 때때로 방해가 됩니다.

    3. 컴파일 시간과 IDE 도구

   Rust의 컴파일 시간과 IDE 도구의 에러 체크가 너무 느립니다.
     * 긴 컴파일 시간: 대규모 프로젝트에서는 한 함수를 수정하면 전체 크레이트가 다시 컴파일되며, 이는 매우 비효율적입니다.
     * 느린 IDE 응답 속도: Rust analyzer는 타이핑할 때마다 프로젝트를 다시 인덱싱하는 것처럼 느껴지며, 이는 대규모 프로젝트에서 특히 문제가 됩니다.

    결론

   Rust는 제가 가장 좋아하는 언어이지만, 이러한 실망스러운 점들도 존재합니다. 다른 사용자들도 같은 문제를 겪고 있는지 궁금합니다.

   에러 처리의 경우 라이브러리는 snafu/thiserror, 애플리케이션은 eyre/anyhow를 설치해 쓰면 편리해집니다

     라이브러리 작성자의 어려움: [..snip..] 종속성을 추가할 때마다 각 함수의 오류 타입을 래퍼 오류 타입에 추가하는 작업은 특히 귀찮습니다.

   이 부분은 정말 뼈저리게 느껴집니다. 크레이트 전용 에러 enum을 만들고 의존성에서 당겨오는 에러 타입을 위해 매번 impl From<ExtError> for Error를 적으면서 '귀찮아 죽겠네'라고 생각한 적이 한두 번이 아니라서요...

   아직 제대로 시작을 못해서 그런가, 이런 실망을 느껴보고 싶군요.
   좋은 글 감사합니다~

   좋은 글 감사합니다!

   긴 컴파일 시간에 대해서는 아래의 댓글이 도움이 되실 것 같아 추가합니다: (by pr4wl)

   Rust analyzer가 매번 변경할 때마다 긴 재컴파일을 수행한다면, 이는 아마도 애플리케이션을 빌드할 때 사용하는 기능이나 환경 변수가 다르기 때문일 것입니다. 기본적으로 RA는 빌드 아티팩트를 저장하기 위해 cargo build와 동일한 타겟 디렉토리를 사용하며, 서로 호환되지 않는 빌드를 수행하면 계속해서 전체 빌드를 수행하게 됩니다.

   이 문제는 특히 Bevy에서 bevy/dynamic_linking 기능을 빌드에 사용하고 있지만 Rust analyzer에는 사용하지 않는 경우에 흔히 발생할 수 있습니다.

   가장 간단한 해결 방법은 RA에 다른 타겟 디렉토리를 사용하도록 지시하는 것입니다. 이와 관련된 자세한 내용은 rust-analyzer.cargo.targetDir에서 확인할 수 있습니다.

   또 다른 해결 방법은 모든 기능과 환경 변수가 동일하도록 설정하여 서로의 빌드 아티팩트를 재사용할 수 있도록 하는 것입니다. 하지만 이는 까다로울 수 있습니다.
"
"https://news.hada.io/topic?id=15994","라이언에어, 미국 법원 판결에서 Booking.com 상대 스크린 스크래핑 소송 승소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            라이언에어, 미국 법원 판결에서 Booking.com 상대 스크린 스크래핑 소송 승소

    Ryanair, Booking.com 소송 승소

     * Ryanair Group CEO Michael O'Leary
          + 미국 법원이 Booking.com이 Ryanair 웹사이트의 일부에 무단으로 접근하여 컴퓨터 사기 및 남용 방지법을 위반했다고 판결함
          + 이 판결은 예약 사이트의 무단 스크린 스크래핑을 종식시키는 데 도움이 될 것이라고 Ryanair는 주장함
     * Ryanair의 법적 조치
          + Ryanair는 최근 몇 년간 무단으로 항공권을 재판매하는 제3자 예약 플랫폼을 상대로 일련의 법적 조치를 취해옴
          + 이러한 회사들은 스크린 스크래핑 소프트웨어를 사용하여 항공권을 찾아 재판매하며, 추가 요금을 부과하고 항공사가 승객과 연락하기 어렵게 만듦
     * 법원 판결
          + 델라웨어 지방법원의 배심원단은 Booking.com이 컴퓨터 사기 및 남용 방지법을 위반했으며, 제3자를 유도하여 Ryanair 웹사이트의 일부에 무단으로 접근하게 했다고 만장일치로 판결함
          + 법원은 또한 Ryanair가 Booking.com을 비방하고 불공정 경쟁을 했다는 Booking.com의 반소를 기각함
     * Booking.com의 반응
          + Booking.com은 판결에 실망했으며, 이에 동의하지 않는다고 밝힘
          + ""고객이 여행 산업 전반의 요금을 비교할 수 있도록 하는 것이 소비자 선택을 촉진한다고 믿으며, 항소할 계획임""이라고 덧붙임
     * Ryanair의 기대
          + Ryanair CEO Michael O'Leary는 이번 판결이 인터넷 해적 행위와 항공사 및 기타 여행사, 소비자에 대한 과다 청구를 종식시킬 것이라고 기대함
          + 그는 이번 판결이 영국과 유럽 전역의 소비자 기관들이 불법 스크린 스크래핑과 소비자에 대한 과다 청구를 금지하는 조치를 취하도록 강제하기를 바람
     * Ryanair의 최근 행보
          + Ryanair는 최근 몇 달 동안 여러 온라인 여행사와 항공권의 승인된 재판매를 위한 계약을 체결함

    GN⁺의 정리

     * 이번 기사에서는 Ryanair가 Booking.com을 상대로 한 소송에서 승소한 내용을 다루고 있음
     * 이 판결은 무단 스크린 스크래핑과 관련된 법적 문제를 해결하는 데 중요한 전환점이 될 수 있음
     * 소비자 선택과 관련된 논란이 있지만, 항공사와 소비자 보호 측면에서 긍정적인 영향을 미칠 가능성이 있음
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Skyscanner와 같은 항공권 비교 사이트가 있음

        Hacker News 의견

     * Booking.com이 Ryanair 웹사이트에 무단 접근하여 이익을 취한 혐의로 유죄 판결을 받았음
          + 이 사건은 중개 역할을 하며 가격을 조작하고 이익을 추가한 경우에 해당됨
          + 단순한 데이터 스크래핑에 대한 선례는 아님
     * 이 판결은 HiQ vs LinkedIn 사건의 9th Circuit Court 결정과 상충되므로 뒤집힐 가능성이 높음
          + CFAA는 이 사건에 적절한 도구가 아님
     * Ryanair는 Booking.com의 무단 접근으로 인해 실제 경제적 손해를 입었음을 증명했음
          + 손해 배상액은 $5000임
     * Ryanair의 초기 고위 관계자가 Booking.com이 자사의 이익을 훔친 사례를 언급했음
          + Booking.com이 빠르게 성장하여 Ryanair가 대응하기 전에 너무 커졌음
     * Ryanair가 OTAs의 항공편 재판매에 반대하는 이유는 수수료가 아니라 패키지 휴가 상품 때문임
          + Ryanair는 자사의 패키지 휴가 사업을 통해 이익을 얻기를 원함
     * 현재 이 사건의 최신 의견은 아직 발표되지 않았음
          + Booking Holdings Inc는 Etraveli, Mystifly, Travelfusion을 통해 Ryanair 웹사이트를 스크래핑했다고 주장함
     * Ryanair의 웹사이트는 ""보호된 컴퓨터""로 간주될 수 있음
          + 웹사이트의 이용 약관 동의 버튼이 보호 형태로 작용함
     * Booking.com이 다른 사이트들과 비교해 특별히 나쁜 행동을 했는지에 대한 의문이 제기됨
          + Ryanair의 CEO는 이 판결이 OTA 해적 행위를 종식시킬 것이라고 기대함
     * 공개적으로 접근 가능한 정보는 스크래핑이 자유로워야 한다는 의견이 있음
          + 보안 우회 없이 스크래핑이 이루어진 경우, 이 판결은 인터넷 아카이브와 데이터 수집에 나쁜 영향을 미칠 수 있음
     * 모든 항공사가 기계 판독 가능한 형식으로 요금을 공개해야 한다는 의견이 있음
     * Ryanair가 Booking.com을 상대로 승소한 것은 흥미로움
          + 스크린 스크래핑은 항공사와 여행사 간의 논쟁이 많은 주제임
          + 이 판결이 다른 항공사들에게 선례가 될지, 아니면 Booking.com과 같은 회사들이 더 강력한 API를 제공하게 될지 주목할 필요가 있음
"
"https://news.hada.io/topic?id=15896","서피스 프로 4에서의 Linux 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          서피스 프로 4에서의 Linux 리뷰

Surface Pro 4에서의 Linux 사용 후기

  배경

     * 2016년에 Surface Pro 4를 구매했음
     * Intel Core m3-6Y30 CPU와 4GB 메모리로 평균적인 노트북보다 성능이 낮음
     * 저렴한 가격에 HiDPI 2k 화면, 압력 감지 스타일러스, 사용 가능한 키보드를 제공하는 폼 팩터가 매력적이었음
     * 몇 년 후 더 강력한 노트북을 구매하고 Surface를 가족에게 주었음
     * 최근 Linux 태블릿에 대한 관심이 생겨 Surface에 Linux를 설치해보기로 결심함

  사용 사례

     * 인터넷 브라우징: 주로 RSS 리더 사용
     * 미디어 소비: Samba 공유 및 유튜브 등 온라인 사이트에서 비디오 시청
     * PDF 읽기: PDF에 메모를 할 수 있으면 좋음
     * 스케치: 디지털 스케치의 이점이 많음
     * 그림 그리기: AI 발전으로 그림을 그려 더 강력한 기계로 이미지를 생성하는 가능성

  설치

     * Linux 설치는 매우 쉬웠음
     * EndeavourOS와 Fedora Workstation 40을 시도했으며 설치 과정은 원활했음
     * linux-surface의 위키 페이지에 설치 단계가 잘 문서화되어 있음
     * 노트북으로만 사용하면 거의 완벽하지만 태블릿으로 사용하면 문제가 있음

  작동하는 것들

     * linux-surface 커널 없이도 대부분의 기능이 작동함: 무선 네트워크, 블루투스, 키보드, 전원 프로필, Hi-DPI UI 스케일링 등
     * linux-surface 커널 설치 후 멀티 터치와 압력 감지 스타일러스도 작동함
     * 배터리 수명은 가벼운 사용 시 5-6시간, 비디오 시청 시 약 3시간
     * 소프트웨어 측면에서 자동 화면 회전이 활성화됨
     * KDE와 Gnome 모두 태블릿 모드를 지원하며, UI가 더 크고 터치 제스처에 친화적임

  두 배포판에서의 문제점

     * 가장 큰 문제는 터치 인식 문제임
     * 고스트 터치: 아무 것도 하지 않아도 터치가 무작위로 등록됨
     * 손바닥 인식 문제: 펜 사용 시 터치 스크린 비활성화 설정이 잘 작동하지 않음
     * 가상 키보드 문제: 디스크 암호 입력 시 가상 키보드가 나타나지 않음
     * 절전 모드에서 배터리 소모가 큼

  KDE와 EndeavourOS에서의 문제점

     * 가상 키보드가 불안정하고 버그가 많음
     * 터치 제스처로 오른쪽 클릭이 불가능함
     * 창 크기 조정이 어려움
     * 스크롤이 부드럽지 않음

  Gnome과 Fedora Workstation 40에서의 문제점

     * KDE보다 느림
     * 메모리 사용량이 많고 OOM 킬이 자주 발생함
     * 가상 키보드의 백스페이스 키가 제대로 작동하지 않음

  Windows 10으로 복귀

     * 터치 인식 문제가 해결되면 KDE에서 다른 문제는 수용 가능함
     * Windows 10으로 돌아가서 Firefox, Nextcloud, Samba, Krita, Drawboard PDF 등을 사용함

GN⁺의 정리

     * Surface Pro 4에서 Linux를 사용하려는 시도는 터치 인식 문제로 인해 실패했음
     * KDE와 Gnome 모두 태블릿 모드에서의 사용성을 제공하지만, 여러 버그와 성능 문제가 있음
     * Windows 10으로 돌아가서 대체 소프트웨어를 사용하여 Surface Pro 4를 활용함
     * Linux 태블릿에 관심이 있는 사람들에게는 유용한 정보가 될 수 있음
     * 비슷한 기능을 가진 다른 프로젝트로는 Pinetab 등이 있음

        Hacker News 의견

     * Dell XPS 13에서 Ubuntu를 사용 중이며, 특별한 문제 없이 잘 작동함
          + 주기적인 소프트웨어 및 펌웨어 업데이트만 수행함
          + Apple 제품 외에서 가장 Mac과 비슷한 경험을 제공함
          + 하지만 macOS처럼 하드웨어와 긴밀하게 통합된 Linux 노트북이 있었으면 좋겠음
     * Swap과 Zram을 비활성화하면 OOM(Out of Memory) 문제가 발생함
          + 워크스테이션에서 Swap을 비활성화하는 이유를 이해하지 못함
          + Kubernetes 클러스터 노드에서는 Swap 비활성화가 이해되지만, 워크스테이션에서는 Zram을 활성화하는 것이 좋다고 생각함
     * Surface Pro 4에서 WSL을 사용하는 것이 더 나은 선택이라고 생각함
          + Linux 지원이 부족했음
          + SSD 고장과 배터리 수명 문제로 다른 제품을 구매하게 됨
          + 3:2 화면 비율이 그리움
     * Surface 시리즈를 좋아하지 않음
          + 사용해보면 느리고 이상한 태블릿처럼 느껴짐
          + 비싸고 지원도 느림
          + Lenovo Yoga 2 in 1을 아내에게 줬는데, 성능이 좋지 않음
     * Surface Pro 4의 저사양 모델은 Intel Core m3-6Y30을 사용하여 액티브 쿨링 없이 작동함
          + 대부분의 Surface Pro 4는 i5 또는 i7 프로세서를 사용함
          + 10년 동안 Surface Pro 라인을 사용해왔으며, 꽤 견고함
     * Fedora Gnome과 EndeavourOS KDE 비교에서 문제는 Gnome이 아니라 Fedora임
          + Arch 기반 배포판이 저사양 하드웨어에서 더 나은 성능을 보임
          + Fedora는 packagekit을 사용하여 RAM을 많이 사용함
          + zswap이 zram보다 저사양 하드웨어에서 더 나은 선택임
     * Surface Pro 7에서 Fedora를 사용 중이며, 비슷한 경험을 하고 있음
          + Firefox에서 터치 기능이 가끔씩 문제가 발생함
     * 하이브리드/분리형 폼 팩터를 좋아하지만, 소프트웨어/하드웨어 스택이 준비되지 않았음
          + x86(-64) 전력 절약 기능이 부족함
          + Surface Pro와 Surface Book의 Linux 지원이 불안정했음
          + 듀얼 부팅이 해결책이었지만, 여전히 문제였음
          + 현재 ARM 태블릿이 전력 절약 모드에서 더 나은 성능을 보임
          + WSL이 Linux 하드웨어 호환성 문제를 해결함
          + WSL이 더 나은 문서 리더/주석 도구를 사용할 수 있게 함
     * 데스크탑 Linux 사용 경험이 항상 비슷함
          + 초기 설치 성공 후 문제 해결에 많은 시간이 걸리고, 결국 포기하게 됨
     * 업무용으로 Surface를 사용했지만, 매우 싫어했음
          + 가벼운 OS와 가벼운 사용이 더 나을 것임
"
"https://news.hada.io/topic?id=15985","Timeshift - 리눅스용 시스템 복원 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Timeshift - 리눅스용 시스템 복원 도구

     * Linux에서 Windows의 ""System Restore"" 기능과 Mac OS의 ""Time Machine"" 도구와 유사한 기능을 제공
     * 파일 시스템의 증분 스냅샷을 정기적으로 생성하여 시스템을 보호. 스냅샷은 나중에 복원하여 시스템 변경 사항을 취소할 수 있음
          + RSYNC 모드: rsync와 하드 링크를 사용하여 스냅샷을 생성함. 공통 파일은 스냅샷 간에 공유되어 디스크 공간을 절약함. 각 스냅샷은 파일 관리자에서 탐색할 수 있는 전체 시스템 백업임
          + BTRFS 모드: BTRFS 파일 시스템의 내장 기능을 사용하여 스냅샷을 생성함. BTRFS 스냅샷은 Ubuntu 유형의 서브볼륨 레이아웃(@ 및 @home 서브볼륨)을 가진 BTRFS 시스템에서만 지원됨
     * Timeshift는 rsnapshot, BackInTime, TimeVault와 유사하지만 다른 목표를 가짐
          + 시스템 파일과 설정만 보호하도록 설계되어, 문서, 사진, 음악과 같은 사용자 파일은 제외됨
          + 사용자 파일을 백업하려면 BackInTime 애플리케이션을 사용하는 것이 좋음
     * 설치 후 첫 실행 시 첫 스냅샷을 생성하는 간단한 설정만 필요
          + 정기적으로 자동 스냅샷을 생성하도록 크론 작업을 활성화할 수 있음
          + 시간별, 일별, 주별, 월별, 부팅 시 스냅샷 가능하며, 각 수준에 대해 유지할 스냅샷 수를 지정
     * 시스템 파일과 설정만 보호하도록 설계됨. 즉 백업 도구가 아니며 사용자 데이터를 보호하는 용도가 아님
          + 사용자의 홈 디렉토리 전체 내용은 기본적으로 제외됨. 이는 두 가지 장점이 있음:
               o 시스템을 복원할 때 문서가 덮어쓰이지 않도록 걱정할 필요가 없음
               o 홈 디렉토리의 음악 및 비디오 컬렉션이 백업 장치의 공간을 낭비하지 않음
     * Timeshift는 하루 중 고정된 시간에 백업을 수행하는 도구와 달리, 매시간 한 번 실행되어 스냅샷이 필요할 때만 생성됨
          + 이는 몇 시간 동안만 노트북과 데스크탑을 켜두는 데스크탑 사용자에게 더 적합
          + 고정된 시간에 스냅샷을 예약하면 시스템이 실행되지 않을 때 백업이 누락될 수 있음
          + Timeshift는 매시간 실행되어 필요한 경우 스냅샷을 생성하여 백업이 누락되지 않도록 함

GN⁺의 정리

     * Timeshift는 Linux 시스템의 파일 시스템을 정기적으로 백업하여 시스템 복원을 가능하게 하는 도구임.
     * 사용자 데이터는 기본적으로 제외되어 시스템 복원 시 덮어쓰지 않도록 보호됨.
     * BTRFS 스냅샷을 사용하면 빠르고 효율적인 백업 및 복원이 가능함.
     * Timeshift는 다양한 Linux 배포판에서 사용할 수 있으며, 크로스-디스트리뷰션 복원 기능을 제공함.
     * 비슷한 기능을 가진 도구로는 BackInTime, rsnapshot 등이 있음.

   타임쉬프트는 리눅스 민트에 기본적으로 탑재되어 동작해요. 덕분에 꽤 오랜 기간 사용했습니다. 단, 이런 소프트웨어의 특성상 무소식이 희소식이라고 실제 복원한 경험은 딱 1회에 그칩니다. 그래도 그 1회가 정말정말 소중하죠.

   ' v')b

        Hacker News 의견

     * Linux 백업 설정: restic와 rclone을 사용하여 USB3 SSD에 저장하고, Backblaze B2로 오프사이트 백업을 수행함
          + 효과: macOS의 Time Machine이나 Arq와 유사한 백업 시스템을 Linux에서 구현함
          + 장점: ZFS나 btrfs 없이도 de-duplicated, 암호화된 스냅샷 기반 백업을 지원함
     * Timeshift: Apple의 스냅샷/백업 기능과 유사함
     * openSUSE와 Snapper: Snapper는 zypper와 YaST와 통합되어 업데이트 전후로 자동 스냅샷을 생성함
          + 장점: 그래픽 드라이버 문제가 발생했을 때 유용함
          + 기본 설정: openSUSE는 btrfs를 기본 파일 시스템으로 사용하여 네이티브 스냅샷을 지원함
     * 간단한 시스템 설정: 루트 파티션과 홈 파티션을 분리하여 재설치 시 루트 파티션만 포맷함
          + 장점: 다양한 배포판을 테스트할 수 있으며 특정 배포판이나 백업 도구에 종속되지 않음
     * Timeshift의 장점: Linux 사용 시 문제 발생 시 이전 안정 버전으로 롤백할 수 있어 문제 해결 시간을 절약함
          + 사용 사례: 가족 구성원들의 컴퓨터에도 설정하여 문제 발생 시 롤백하도록 교육함
     * NixOS의 기본 동작: 설정 변경 시 시스템 구성의 스냅샷을 생성하여 문제가 발생하면 재부팅 후 복원할 수 있음
     * Debian Stable의 안정성: 최근 몇 년간 매우 안정적이며 시스템 복원보다는 드라이브 충돌이나 도난에 더 신경 씀
          + 질문: Linux Mint LTS도 비슷하게 안정적인지 궁금함
     * Timeshift의 한계: 시스템 파일과 설정만 보호하며 사용자 파일은 제외됨
          + 대안: ZFS 기반의 새로운 프로젝트 httm을 발견함
     * Borg 백업: 일련의 스크립트를 사용하여 로컬 저장소에 일일 백업을 수행함
          + 팁: 백업을 자주 검증하고, Webmin을 사용하여 백업 폴더의 변경 사항을 모니터링하고 이메일 알림을 설정함
     * Timeshift의 문제점: 암호화된 SSD를 사용하여 부팅 시 해독되면 파일이 두 번 보이므로 저장 공간 부족으로 백업이 불가능함
"
"https://news.hada.io/topic?id=15885","스토리 포인트는 무의미 합니다, 큐를 측정하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       스토리 포인트는 무의미 합니다, 큐를 측정하세요

     * 스토리 포인트는 완전히 신뢰할 수 없고 혼란을 야기하며, 끊임없이 관련자들에게 그 의미를 상기시켜야 함
          + 낮은 포인트 값은 더 정확하지만 높은 포인트 값은 높은 변동성을 가정하며 범위를 나타내며, 정확하게 합산이 불가능함
          + 스토리 포인트는 시간을 나타내지 않지만, 속도 메트릭과 결합될 때 사실상 시간을 의미하게 되어, 처음부터 숫자와 범위를 더하는 행위를 방해함
     * 소프트웨어 추정은 어렵고, 프로세스의 아웃풋은 인풋에 비해 일반적으로 유익하지 않음
     * 방해가 적은 소규모 팀은 정확하게 추정하는 것처럼 보이므로 대부분의 경우 하고 있는 일이 잘 되고 있다는 인상을 줌
     * Capacity가 완전히 활용되면, 모든 작업의 변동성이 급증하여 모든 견적과 타임라인에 급격한 영향을 미침
     * 측정된 큐는 단기 및 장기 추정 문제를 해결하고, 자연스럽게 범위 변경을 처리하며, 불확실성을 제거하면서 대규모 팀에게 훨씬 더 가치 있는 연습을 제공
     * 측정된 큐는 속도나 사이클 시간 관련 메트릭보다 20배 빠르게 문제를 예측하는 선행 지표를 제공함

  스토리 포인트란 무엇인가?

     * Atlassian에 따르면, 스토리 포인트는 제품 백로그 항목 또는 다른 작업을 완전히 구현하는 데 필요한 전체 노력의 추정을 표현하는 단위임
     * 포인트는 복잡성, 작업량, 리스크 또는 불확실성, 작업의 양을 나타냄
     * 복잡성 측정은 상대적인 개념으로, 팀마다 같은 작업에 대해 다르게 평가할 수 있음
     * 포인트의 상대적 특성으로 인해 팀 간 비교는 의미가 없으며, 이는 관리 수준에서 자주 발생하는 문제임

  내재된 변동성

     * 스토리 포인트는 피보나치 수열을 기반으로 하여 높은 값일수록 변동성을 더 크게 나타냄
     * 변동성이 큰 포인트 값들을 합하는 것은 의미가 없으며, 속도 메트릭에서 포인트를 합산하는 행위는 잘못된 것임
     * Goodhart의 법칙에 따르면, 측정이 목표가 되는 순간 그 측정은 좋은 측정이 될 수 없음

  알려진 문제점

     * 스토리 포인트의 문제는 잘 알려져 있지만, 대체 추정 기술도 비슷한 문제를 겪기 때문에 여전히 사용되고 있음
     * 스토리 포인트의 창시자인 Ron Jeffries는 이를 부정하고, 오용에 대해 비판함
     * Scrum에서 ""Commitment""를 ""Forecast""로 변경했으나 여전히 잘못 사용되고 있음
     * 추정치보다 더 많은 일을 해내면 오히려 질타를 받는 역설적 상황이 발생함

  ROI로 우선순위 정하기

     * 비즈니스는 리소스(시간, 돈, 도구, 사람)를 최적화하기 위해 작업의 우선순위를 정함
     * 개발 추정은 투자 비용을 계산하는 데 필요하지만, 추정 자체가 어렵고 비용이 많이 듦
     * Software Estimation: Demystifying the Black Art은 추정의 어려움을 다루는 훌륭한 책임

  프로세스의 출력

     * 스토리 포인트 추정 과정은 많은 시간을 투자하지만, 출력이 가치가 없음
     * 정기적인 그루밍 세션은 시간이 많이 걸리며, 팀 간 일관성 없이 다양하게 적용됨
     * 스토리 포인트 대신 유의미한 작업 목록을 작성하는 것이 더 가치가 있음

  대안 제시

     * T-셔츠 사이즈로 추정하는 것이 더 나은 대안이 될 수 있지만, 이 또한 문제가 있음
     * 시간으로 추정하는 것도 유사한 문제가 있으며, 팀이 실제로 일하는 시간과 비즈니스 측에서 기대하는 시간이 다름
     * 작은 팀에서는 시간 추정이 잘 작동할 수 있지만, 팀이 커지면 추정의 정확도는 떨어짐
     * 도널드 라이너트슨의 ""The Principles of Product Development Flow"" 책에서 대안을 제시함
          + 대기열(Queue) 관리에 초점을 맞추어 작업의 흐름을 최적화하는 것이 핵심
          + 용량 계획을 세우고 변동성을 수용할 수 있는 버퍼 용량을 확보해야 함

해결책

     * 팀이 함께 작업을 분석하여 작은 태스크 단위로 나누고 불확실성을 제거하는 것에서 시작
     * 태스크 목록은 대기열(Queue)이 되며, 총 태스크 수는 작업량(Job Size)을 나타냄
     * Story Point 대신 평균 Task 완료율(Average Task Rate)을 사용하여 추정
     * 평균 작업 속도를 기반으로 작업을 추적하고, 작업 완료율을 계산함
     * 새로운 정보나 피드백에 따라 태스크를 업데이트하면 자연스럽게 추정치가 조정됨
     * 개발자들이 추정에 대한 심리적 압박을 받지 않아도 됨

대기열(Queue)은 선행 지표

     * 평균 태스크 완료율, Cycle Time, Velocity 등은 후행 지표인 반면, Queue는 선행 지표
     * Queue 크기가 증가하면 문제를 사전에 인지하고 대응할 수 있음

요약

     * Story Point는 혼란을 야기하고 신뢰할 수 없으며 실패하도록 설계되어 있음
     * 대신 팀이 함께 문제를 이해하고, 불확실성을 제거하며, 태스크 단위로 나눠 Queue를 관리하는 데 시간을 투자하는 것이 의미 있고 가치 있는 일임

GN+의 의견

     * 기사에서 제시한 대기열 관리 방식은 애자일 개발에서 추정의 어려움을 극복할 수 있는 현실적인 대안으로 보임
     * 다만 태스크를 잘게 나누는 과정에서 개발자들의 수고로움이 있을 수 있고, 프로젝트 초기 단계에는 시간이 더 소요될 수 있음
     * 또한 태스크 분석 과정에서 개발자들의 적극적인 참여와 솔직한 의견 개진이 전제되어야 함
     * 한편으로는 개발 팀이 비즈니스 요구사항을 깊이 이해하고 함께 고민하는 긍정적 효과도 기대할 수 있음

   저게 칸반 방법론 아닌가요..?

        Hacker News 의견

     * 개인적인 경험으로는 스토리 포인트의 숫자는 중요하지 않았지만, 팀이 작업의 복잡성을 평가하는 과정은 매우 유용했음
          + 스토리 포인트를 작업 시간 예측에 사용하는 것은 신뢰할 수 없는 지표였음
          + 팀과 도메인의 변화, 개발 외 작업의 가변성 등 여러 이유로 인해 스토리 포인트를 피하려고 함
          + 스토리 포인트를 사용하는 팀에서는 이를 작업 이해를 공유하는 도구로 사용했음
     * Scrum 가이드에서 ""Commitment""가 ""Forecast""로 변경된 것은 2011년이 아님
          + 2010년과 2011년 가이드를 확인한 결과, ""Commitment""라는 단어는 2011년 이전 버전에 없었음
          + ""Forecast""는 2020년 가이드에서 ""Estimate""를 대체했음
     * 작업 패키지를 원자 단위로 분해하고 큐 길이를 측정하는 것은 다른 차원의 문제임
          + 작업 패키지를 팀과 함께 정제하면서 스토리 포인트를 사용할 수 있음
          + 모든 작업을 1 스토리 포인트로 분해하는 것은 비효율적이었음
          + 큐 길이와 가변성의 영향을 연결하는 것은 흥미로운 개념임
     * 워터폴 방식과 시간 단위로 추정하는 것이 잘 작동하는 경우도 있음
          + 소규모 전문 서비스 팀에서 고객 요구사항을 문서화하고 팀과 논의한 후 시간 범위로 추정함
          + 고객이 승인하면 상세 설계, 개발, QA, 릴리스 과정을 거침
          + 20년 동안 프로세스가 변하지 않았고, 생산성이 높은 팀으로 평가받음
     * 스토리 포인트는 시간 단위가 아닌 상대적 복잡성과 불확실성을 나타냄
          + 큰 숫자로 스토리를 측정할 수 있어야 함
          + 일부 팀에서는 7 이상의 포인트를 주지 않음
          + 다른 곳에서는 21, 30, 50 포인트를 주기도 했음
     * 스토리 포인트는 대략적인 시간 단위였음
          + 스토리 포인트를 명확한 시간 단위로 맞추는 것은 오해의 소지가 있음
          + 개발자가 작업에 얼마나 시간을 쓸지 예측하는 것이 중요함
          + 큐 분석이 도움이 되려면 각 작업의 예상 시간을 알아야 함
     * Scrum을 처음 사용할 때 Rally를 사용했음
          + 스토리 포인트, 예상 시간, 실제 시간을 모두 추적했음
          + Jira로 전환 후 시간 추적이 없어졌음
          + 예상 시간이 정확해지면서 팀의 작업 균형을 맞추기 쉬워졌음
     * 스토리 포인트는 작업 복잡성을 논의할 때 유용하지만, 속도를 측정하는 데는 부적합했음
          + 새로운 엔지니어로서 많은 스토리 포인트를 처리했지만, 관리진이 이를 조정하려 했음
          + 복잡한 작업을 적절히 평가하기 어려웠음
     * 소프트웨어 개발 프로젝트를 신뢰할 수 있게 추정하는 것은 어려움
          + 팀과 함께 작업을 작은 단위로 나누고 시간 범위를 추정하는 것이 중요함
          + 프로젝트가 진행됨에 따라 기능 목록과 새로운 추정 범위를 보고하는 것이 중요함
     * 시간 단위로 추정하는 것이 더 나은 방법임
          + 스토리 포인트는 결국 시간 단위로 변환됨
          + Scrum의 복잡한 절차를 피하고 작업을 완료하는 것이 더 효율적임
"
"https://news.hada.io/topic?id=15893","최고의 교육적 라이프 해크: 선행 수학 학습","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        최고의 교육적 라이프 해크: 선행 수학 학습

  미리 수학을 배우는 것이 중요한 이유

   미리 수학을 배우면 여러 학문적 위험을 피할 수 있으며 다양한 경력 기회를 열어줌.

    위험 최소화

     * 언어 수업에서 집에서 그 언어를 사용하는 학생들이 수업을 쉽게 느끼는 것처럼, 수학에서도 미리 학습하면 같은 효과를 얻을 수 있음.
     * 미리 학습하면 수업이 너무 빠르게 진행되거나 개념을 대충 설명하는 등의 위험을 피할 수 있음.
     * 특히 대학에서는 강의가 주제를 처음 접하는 학생들에게 적합하지 않을 수 있음.
     * 미리 학습하면 교사의 교육 품질에 의존하지 않게 되어, 최악의 교육도 극복할 수 있음.

    기회 열기

     * 미리 학습하면 고급 수업에서 좋은 성적을 받을 수 있으며, 이는 인턴십, 연구 프로젝트 등의 추천서를 받을 기회를 열어줌.
     * 교수와의 상호작용을 통해 좋은 추천서를 받을 수 있으며, 이는 대학 입학이나 연구 프로그램, 대학원 진학에 중요함.
     * 미리 학습을 통해 선순환을 시작할 수 있으며, 이는 흥미롭고 의미 있는 경력으로 이어질 수 있음.

    왜 미리 학습을 1년 앞서서만 해야 할까?

     * 많은 사람들이 미적분이 수학의 끝이라고 생각하지만, 대학 수준의 수학 과정은 훨씬 더 많음.
     * 미적분 이후에도 선형대수, 다변수 미적분, 미분방정식, 확률 및 통계 등의 필수 과정이 있음.
     * 이러한 과정을 많이 수강할수록 더 많은 학문적 기회와 경력 기회가 열림.

    보상을 극대화하기: 고급 수학을 미리 배우기

     * 고급 수학을 미리 배우면 다양한 전문 분야에 일찍 진입할 수 있으며, 이는 경력 성취도를 높이는 데 도움을 줌.
     * 연구에 따르면 학습 속도를 빠르게 하면 경력을 일찍 시작할 수 있으며, 이는 경력 동안 더 많은 성과를 이루는 데 도움을 줌.

    고급 수학, 경쟁 수학이 아님

     * 고급 수학을 배우는 것이 경쟁 수학 문제를 푸는 것과는 다름.
     * 경쟁 수학 문제는 새로운 수학 분야를 배우기보다는 이미 배운 수학 도구를 사용하여 해결하는 것이 주 목적임.
     * 반면, 실제로 많은 양적 전문가들이 사용하는 수학은 대학 수준의 수학 과목임.
     * 학생들이 가능한 한 빨리 수학의 넓은 시야를 가지는 것이 더 생산적임.

    발달 적합성

     * 많은 사람들이 미리 수학을 배우는 것이 학생들의 사회적/정서적 및 인지적/학문적 발달에 적합하지 않다고 생각함.
     * 그러나 연구에 따르면 교육적 가속화는 유능한 학생들에게 부정적인 심리적 결과를 초래하지 않음.
     * 연구에 따르면 교육적 가속화는 학문적 성취와 창의적 성취를 향상시키는 데 도움을 줌.

    발달 부적합성 신화가 지속되는 이유

     * 가속화는 추가 작업을 요구하며, 이는 학교와 교사에게 불편함을 초래할 수 있음.
     * 학교는 가속화된 학생들을 위한 수업을 제공하는 데 어려움을 겪을 수 있으며, 이는 물류적 문제를 초래할 수 있음.
     * 이러한 이유로 가속화의 필요성을 부정하거나 무시하는 경향이 있음.

  GN⁺의 정리

     * 미리 수학을 배우는 것은 학문적 위험을 피하고 다양한 경력 기회를 열어줌.
     * 대학 수준의 수학을 미리 배우면 더 많은 학문적 기회와 경력 기회를 얻을 수 있음.
     * 연구에 따르면 교육적 가속화는 학생들의 심리적, 사회적 발달에 부정적인 영향을 미치지 않음.
     * 가속화의 필요성을 부정하는 이유는 주로 학교와 교사의 불편함 때문임.
     * 미리 수학을 배우는 것은 학생들이 더 많은 성취를 이루는 데 도움을 줌.

        Hacker News 의견

     * 수학을 늦게 배운 경험이 삶을 풍요롭게 해준다는 의견
          + 수학을 배우면서 삶의 여러 영역에서 조직력과 평온함을 얻음
          + 복잡한 문제를 더 쉽게 접근할 수 있게 됨
          + 수학이 프로그래밍 언어와 컴퓨터 과학에 미친 영향을 이해하게 됨
          + 수학을 늦게 배우는 것도 좋은 방법임
     * 프랑스의 명문 고등학교에서 여름에 미리 공부한 경험
          + 여름에 미리 공부하면 수업 중 개념 이해가 쉬워짐
     * 영어를 일찍 배우는 것이 최고의 교육적 해킹이라는 의견
          + 영어를 배우면 글로벌 수준의 콘텐츠와 소통에 접근할 수 있음
     * 경쟁 수학이 중요한 기술을 개발하는 데 도움이 된다는 의견
          + 문제를 오랜 시간 동안 해결하려고 노력하는 것이 중요한 기술임
          + 경쟁 수학에서 사용하는 전술이 일반적인 정량적 상황에서도 유용함
     * 부유한 지역의 학생들이 외부 학습 프로그램을 이용하는 현상
          + 학교의 평점이 왜곡될 수 있음
          + 실제 학습은 집에서 이루어짐
     * 수학을 잘 알면 다른 과목도 쉽게 이해할 수 있다는 의견
          + 수학을 알면 다른 과목은 용어 문제에 불과함
     * 학교의 수학 교육에 대한 비판
          + 학생들이 수학에 대한 편안함을 유지하도록 부모가 적극적으로 참여해야 함
          + 학교는 학생을 통과시키지만, 실제로 학생이 배운 것에 대해 편안함을 느끼는지 확인해야 함
     * 한 단계 높은 과목을 공부하면 현재 과목을 잘할 수 있다는 의견
          + 다음 학년의 내용을 미리 공부하면 현재 학년의 내용을 더 잘 이해할 수 있음
          + 하지만 자원이 부족한 학생들에게는 어려운 방법임
     * 어릴 때 간단한 수학 문제를 푸는 것이 큰 차이를 만든다는 의견
          + 간단한 수학 문제를 푸는 것이 학습에 큰 영향을 미침
          + 작은 노력이 큰 차이를 만들 수 있음
     * 읽기를 일찍 배우는 것이 더 큰 교육적 해킹이라는 의견
          + 나이보다 높은 수준의 읽기 능력이 중요함
"
"https://news.hada.io/topic?id=15974","100,000시간 금지 후 복귀한 사용자, 금지된 대화 계속","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   100,000시간 금지 후 복귀한 사용자, 금지된 대화 계속

테이블탑 게임 포럼 유저, 11년 만에 돌아와 동일한 논쟁 재개

     * 기사 요약
          + 2013년에 테이블탑 게임 논쟁으로 10만 시간(약 11년) 동안 금지된 Something Awful 포럼 유저 Etherwind가 금지 해제 후 동일한 논쟁을 재개함
          + Something Awful 포럼은 인터넷 문화의 중요한 부분으로, 엄격한 규칙과 금지 조치로 유명함
          + Etherwind는 2013년 World of Darkness TTRPG 시리즈의 정치적 방향에 대한 논쟁 중 저자에게 죽음을 기원하는 농담을 하여 금지됨
          + 금지 기간이 끝난 후, Etherwind는 정확히 100,018시간 후에 돌아와 동일한 논쟁을 재개함

  포럼의 중요성

     * Something Awful 포럼은 다양한 인터넷 밈과 문화의 출발점으로, 4chan의 탄생에도 영향을 미침
     * 포럼은 사용자에게 $10의 등록비를 요구하며, 엄격한 규칙을 통해 사용자들을 관리함
     * 포럼의 금지 목록은 최근 금지된 사용자와 그 이유를 공개함

  Etherwind의 금지와 복귀

     * Etherwind는 2013년 2월 14일에 10만 시간 금지 조치를 받음
     * 금지 기간 동안 Etherwind는 많은 성장을 이루었고, 포럼 활동이 그의 삶에 중요한 부분이었음을 설명함
     * 금지 해제 후, Etherwind는 동일한 논쟁을 재개하며 코미디적 요소를 더함

  포럼 사용자들의 반응

     * 포럼 사용자들은 Etherwind의 복귀에 놀라워하며 다양한 반응을 보임
     * 일부 사용자들은 그의 복귀를 World of Darkness의 강력한 뱀파이어가 깨어나는 것에 비유함
     * Etherwind는 자신의 금지 해제가 코미디적 기회가 될 수 있음을 인식하고, 논쟁을 재개한 후 계정을 삭제함

GN⁺의 정리

     * 이 기사는 인터넷 커뮤니티의 중요성과 사용자들의 헌신을 보여줌
     * Etherwind의 복귀는 온라인 커뮤니티가 사람들의 삶에 미치는 영향을 잘 나타냄
     * 비슷한 기능을 가진 다른 프로젝트로는 Reddit의 다양한 서브레딧이 있음

        Hacker News 의견

     * 2016년에 10년 동안 금지된 Habbo Hotel 계정을 다시 시도했으나, 6개월 이상 금지된 계정은 삭제된다는 사실을 알게 됨. 9.5년을 기다렸지만 계정이 존재하지 않았음
     * 6년 전 HN 설정을 만지다가 실수로 6년 동안 계정을 잠금. 첫 댓글은 별로 인상적이지 않았음
     * Google Doc에서 SA 커뮤니티에 게시한 것이 인생의 중요한 부분이었고, 많은 성장을 했으며, 이제는 과거의 공격적인 게시를 후회한다고 설명한 사람의 이야기
     * 20대를 지나 30대에 접어들면서 성격이 부드러워진 이야기
     * 몇 년 동안 포럼에서 금지된 적이 있었고, 새 계정을 만들지 않고 몇 년마다 사이트를 확인했으나 결국 사이트가 사라짐
     * 오랜 시간이 지난 후 논쟁을 재개하는 것이 재미있다고 생각함. CS 1.6 서버에서 금지가 끝나기를 기다리고 있음
     * BBS/뉴스그룹/포럼 문화에서 necroposting(오래된 게시물에 댓글 다는 것)이 흥미롭다고 생각함. 많은 현대 사이트가 오래된 게시물을 자동으로 아카이브함
          + HN에서 오래된 게시물에 댓글을 달 수 없는 이유가 궁금함. 기술적 한계 때문은 아닐 것이라고 생각함
          + 오래된 게시물에 댓글을 달 수 없을 때 아쉬움을 느낌. 다른 사람들은 오래된 게시물에 댓글을 다는 것에 대해 어떻게 생각하는지 궁금함
     * 10년 후에도 포럼이 존재하거나 금지 논리가 여전히 적용되는 것은 운이 좋았다고 생각함. MySpace 같은 사이트는 사라졌거나 시스템이 변경됨
     * 32년 된 ""Linux is obsolete"" Usenet 스레드를 떠올리게 함
     * 11년은 꽤 긴 시간이지만, 2000년대 초 rec.music.makers.percussion에서 목격한 flame war가 한쪽이 사망한 후에도 계속되고 있었음
          + Rob Schuh는 2000년에 이미 flame war로 악명이 높았음. 그는 2010년경에 사망했으며, 그의 죽음을 축하하는 사람들이 있었음
          + Schuh는 매우 흥미로운 인물로, 천재 드러머이자 드럼 제작자, 보디빌더, 스테로이드 사용자(합법적일 때), 유죄 판결을 받은 범죄자, 만성 질환자, 그리고 Usenet flame war 참가자였음
     * 인터넷에서 누군가가 또 틀렸다고 생각함
"
"https://news.hada.io/topic?id=15877","Exo - 가정용 기기들로 나만의 AI 클러스터 운영하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Exo - 가정용 기기들로 나만의 AI 클러스터 운영하기

     * 비싼 NVIDIA GPU를 잊고, 기존의 아이폰, 아이패드, 안드로이드, 맥, 리눅스 같은 장비 등을 묶어서 하나의 강력한 GPU로 활용
     * LLaMA 및 다양한 모델 지원
     * ""동적 모델 파티셔닝""으로 현재 네트워크 토폴로지 및 사용 가능한 디바이스 리소스를 기반으로 모델을 최적으로 분할
          + 단일 디바이스에서 실행할 수 있는 것보다 더 큰 규모의 모델을 실행 가능
     * 자동 디바이스 디스커버리로 다른 기기를 찾음
     * ChatGPT 호환 API 제공
     * 각 기기들은 Master-Worker 구조가 아닌 p2p 방식으로 연결(기본 분할 전략은 링 메모리 가중 분할)
     * 추론 엔진 지원:
          + ✅ MLX
          + ✅ tinygrad
          + 🚧 llama.cpp
     * 네트워킹 모듈을 지원:
          + ✅ GRPC
          + 🚧 Radio
          + 🚧 Bluetooth
     * 알려진 문제
          + 라이브러리가 빠르게 발전하고 있어 iOS 구현이 Python보다 뒤처지고 있음
          + 장기적으로는 별도의 구현을 유지할 필요가 없도록 통합 접근 방식을 추진할 예정임

GN⁺의 정리

     * exo는 다양한 장치를 하나의 강력한 AI 클러스터로 통합할 수 있는 실험적 소프트웨어임
     * 자동 장치 발견, 동적 모델 분할 등 다양한 기능을 제공하여 단일 장치보다 더 큰 모델을 실행할 수 있음
     * ChatGPT 호환 API를 제공하여 쉽게 모델을 실행할 수 있음
     * iOS 구현이 뒤처지고 있는 문제를 해결하기 위해 통합 접근 방식을 추진 중임

        Hacker News 의견

     * Apple Silicon 전용 라이브러리인 mlx가 필요함. ""iPhone, iPad, Android, Mac, Linux, pretty much any device""에서 작동한다고 하는데, 실제로 테스트된 적이 있는지 의문임
     * 로컬 네트워크에서 최적화된 이 시스템을 크라우드소싱으로 쉽게 사용할 수 있는 방법에 대해 고민 중임. 사무실 내 모든 사람이 네트워크에 쉽게 참여하거나, QR 코드를 스캔하여 도메인 특정 모델에 기여할 수 있는 방법을 찾고 있음
     * 이 아이디어는 훌륭하고 사용자 친화적임. 여러 오래된 기기를 유용하게 변환할 가능성이 있음. 하지만 tok, 지연 시간 및 예제 설정에 대한 결과를 제공했으면 좋겠음
     * GitHub의 paddler를 윈도우에서 두 대의 기기에서 로드 밸런싱을 위해 작동시켰음. Llama 400B를 여러 기기에서 실행하는 데 유용할 것임. 하지만 윈도우 지원이 아직 없음
     * 이 기능은 단일 기기에서 실행할 수 있는 것보다 더 큰 모델을 실행할 수 있게 해줌. 그러나 구체적인 작동 방식에 대한 설명이 부족함. 예를 들어, 신경망의 일부 레이어가 deviceA에 있고 다른 레이어가 deviceB에 있다면, 매번 토큰이 생성될 때마다 deviceA의 마지막 레이어 출력 데이터를 deviceB로 전송해야 함
     * Swarm 컴퓨팅은 모든 컴퓨팅의 표준이 되어야 함. 우리가 소유한 모든 기기에서 사용되지 않는 CPU가 너무 많음
     * 네트워크 병목 현상 때문에 작동하지 않을 것임. 기가바이트의 데이터를 전송해야 함. 따라서 좋은 인터넷(20mb/s 이상)과 좋은 기기가 필요함. 이 시스템은 트위터에서 멋진 데모로 끝날 것임. 틀렸다는 것을 증명해주길 바람
     * 클라우드는 컴퓨팅/가격 면에서 이길 수 없지만, 로컬로 이동하면 프라이버시 문제를 해결할 수 있음. 세상은 컴퓨팅에 대한 두 번째 수정안이 필요함
     * 예전에는 Mac, PC 등에서 로컬로 모델을 실행하는 것에 대해 흥미를 느꼈음. 하지만 이제 대부분의 유용한 AI 컴퓨팅은 클라우드에서 이루어질 것이라고 생각함. 집 네트워크에서 느린 Llama3 모델을 실행할 수 있지만, 클라우드 서비스에서 저렴하거나 무료로 실행할 수 있는데 굳이 그럴 필요가 없음. Apple이 로컬 AI 모델을 추진하고 있지만, 배터리 성능에 미치는 영향에 대해 심각한 우려가 있음
     * 대형 클러스터가 RDMA 네트워크를 사용하여 통신 오버헤드가 병목 현상이라고 보고하는데, 이 시스템이 가정 네트워크에서 대규모 병목 현상을 겪지 않는 것이 어떻게 가능한지 궁금함
"
"https://news.hada.io/topic?id=15922","Show GN: 간단히 붙여쓰는 파일첨부 Saas","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 간단히 붙여쓰는 파일첨부 Saas

   운영하고 있는 사이트에서 파일첨부/수집 기능을 쉽게 구현할 수 있도록 도와주는 low코드+개발자용 서비스입니다.

   만든 이유
   원래 일반사용자용 파일공유 서비스를 운영중에 자기 웹사이트에 붙여달라는 요구가 많아 이런 용도로 따로 개발하게 되었습니다.
   특히 대용량을 다루기 시작하면 비용이나 오류등이 완전히 다른 차원으로 진입하게 되는데, 이 서비스가 충격을 분산시키는데 도움이 되면 좋겠습니다.

   특징
   신경쓴 부분은 두가지인데, 하나는 간단한 요구에 대해서는 최대한 간단히 쓸수 있도록 만드는 것입니다. 기본적으로 iframe 으로 동작합니다. 유투브 붙여넣기 수입니다. db를 관리하지 않아도 기본기능은 쓸수 있습니다.
   두번째는 단기저장 파일에 대해서는 가능한 비용의 여유를 주는 것입니다.
   구글드라이브나 드랍박스처럼 파일 전송량이 많다고 막아버리거나, 잠깐 쓸 파일때문에 과금하는 일을 하지 않습니다.

   이런분들에게 좋습니다.
     * 대용량 파일을 사용자들에게 받아야 하는 운영자 ( 독립영화제 영상 받기)
     * 파일을 홈페이지에 공유했더니 트래픽 초과되어 웹페이지가 다운되어 속상한 사장님
     * 사장님이 파일첨부기능을 내일까지 붙이라고 쉽게 말하는 회사에 근무하는 개발자
     * 일단 기능을 빠르게 붙여보고 반응을 보고 싶은 스타트업

   설치된 페이지들을 바로 볼수 있도록 링크를 모아 봤습니다.
     * 다운로드용 기능이 설치된 페이지
     * 파일제출기능이 설치된 페이지
     * jwt로 인증이 통홥된 그누보드게시판

   현재 베타단계이고, 피드백을 듣고 있으니 의견주시면 최대한 반영하도록 하겠습니다.

   트래픽/전송 무료이고, 개별 파일크기 제한 없습니다.
"
"https://news.hada.io/topic?id=15970","No More Blue Fridays","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          No More Blue Fridays

     * 미래에는 커널 코드가 포함된 소프트웨어 업데이트로 인해 컴퓨터가 충돌하지 않을 것임. 앞으로는 이러한 업데이트가 eBPF 코드를 푸시할 것
     * 2024년 7월 19일, 정보 기술 역사상 가장 큰 중단 사태가 발생했음
          + 전 세계의 Windows 컴퓨터가 블루스크린과 부팅 루프에 빠졌음
          + 병원, 항공사, 은행, 식료품점, 미디어 방송사 등에서 중단 사태가 발생했음
          + 보안 회사의 커널 드라이버가 포함된 업데이트가 원인이었음
          + 이 드라이버가 잘못된 메모리를 읽으려 시도하여 커널이 충돌했음
     * Linux 시스템에서는 이미 eBPF를 채택하고 있어 이러한 충돌을 방지할 수 있음
          + eBPF는 안전한 커널 실행 환경을 제공함
          + eBPF 프로그램은 소프트웨어 검증기를 통해 안전성이 확인되며, 안전하지 않은 코드는 실행되지 않음
          + eBPF는 높은 보안성과 낮은 자원 사용량을 제공함
     * eBPF 기반 보안 스타트업과 대형 기술 회사들도 eBPF를 채택하고 있음
          + Cisco는 eBPF 스타트업 Isovalent를 인수하고 새로운 eBPF 보안 제품을 발표했음
          + Google과 Meta는 이미 eBPF를 사용하여 악성 행위를 감지하고 차단하고 있음
     * eBPF 프로그램이 할 수 있는 최악의 일은 자원을 과도하게 소비하는 것임
          + eBPF는 시스템 충돌을 방지하지만, 비효율적인 코드를 작성하는 것은 막을 수 없음
          + eBPF 관리 코드에도 버그가 있을 수 있지만, 이러한 버그를 수정하면 모든 eBPF 벤더의 보안이 개선됨
     * 소프트웨어 배포 시 위험을 줄이는 다른 방법도 있음
          + 카나리아 테스트, 단계적 롤아웃, 회복력 엔지니어링 등이 있음
          + eBPF 방법은 Linux와 Windows 커널에서 기본적으로 사용할 수 있는 소프트웨어 솔루션임
     * 커널 드라이버나 모듈이 포함된 상용 소프트웨어를 사용하는 회사는 eBPF를 요구할 수 있음
          + Linux에서는 이미 가능하며, Windows에서도 곧 가능해질 것임
          + 일부 벤더는 이미 eBPF를 채택했으며, 고객의 인식 제고가 필요함

GN⁺의 정리

     * 이 글은 커널 코드 업데이트로 인한 시스템 충돌 문제를 해결하기 위해 eBPF의 중요성을 강조함
     * eBPF는 안전한 커널 실행 환경을 제공하며, 시스템 충돌을 방지할 수 있음
     * 대형 기술 회사들도 eBPF를 채택하고 있으며, 보안성과 자원 사용량 측면에서 이점을 제공함
     * eBPF를 통해 소프트웨어 배포 시 위험을 줄일 수 있으며, 고객의 인식 제고가 필요함

        Hacker News 의견

     * Microsoft의 eBPF 지원이 Windows에서 생산 준비가 되면, Windows 보안 소프트웨어도 eBPF로 포팅될 수 있음
          + 현실적이지 않음
          + Windows eBPF의 ""hooks""는 패킷 필터링에만 사용됨
          + NT 커널에 연결되는 다른 드라이버와 달리, eBPF는 제한적임
          + eBPF가 커널 공간의 안티멀웨어 드라이버를 대체하려면 많은 시간이 필요함
     * eBPF 프로그램이 할 수 있는 최악의 일은 CPU 사이클과 메모리를 더 많이 소비하는 것이라는 주장에 반대함
          + eBPF 프로그램은 무한히 해로울 수 있음
          + 커널에서 BPF로 코드를 이동함으로써 특정 취약점을 완화할 수 있음
          + eBPF 프로그램이 일반적으로 안전하다는 의미는 아님
     * Brendan Gregg와 논쟁하기 싫지만, 벤더들이 실패 체인을 완전히 조사하는 포괄적인 접근 방식을 취하길 바람
          + 특정 버그 클래스에서는 CPU 사이클 낭비가 유일한 부정적 결과일 수 있음
          + 나쁜 규칙 집합이 시스템을 망가뜨릴 수 있는 다양한 실패 모드가 있음
          + eBPF 기반 보안 모듈이 많은 벤더에게 적합할 수 있지만, 위험을 이해하는 것이 중요함
     * 코드가 깨졌을 때 시스템이 작동하지 않아야 함
          + 의료 기기의 안전 잠금 장치가 작동하지 않으면 전체 시스템이 작동하지 않는 것이 더 나음
     * eBPF가 Windows에서 특정 문제를 해결한다고 가정하면, Microsoft는 하위 호환성을 제공하지 않아야 함
          + 하위 호환성은 Windows 세계에서 중요한 문제임
          + 오래된 NT 코드와 접근 방식을 정리하는 것이 더 유익함
     * eBPF 프로그램은 소프트웨어 검증기에 의해 안전하게 체크되고 샌드박스에서 실행되므로 시스템 전체를 크래시할 수 없음
          + 운영 체제의 목적 중 하나는 소프트웨어를 감시하는 것임
          + 복잡성을 줄이는 것이 더 나음
     * 새로운 기술이 필요하지 않음
          + 기본적인 품질 관리 방법을 사용해야 함
     * 금요일을 쉬는 날로 정해 더 많은 사람들이 생각할 시간을 가질 수 있도록 해야 함
     * eBPF에 버그가 있으면 Windows 커널 크래시를 유발할 수 있음
     * 부팅 시 필터가 로드되고 모든 것에 연결되면 시스템을 잠글 수 있음
          + Microsoft가 복구에 필요한 필수 항목을 포함하는 하드코딩된 화이트리스트를 포함하면 버그 수정이 더 쉬워질 수 있음
"
"https://news.hada.io/topic?id=15961","Microsoft, CrowdStrike에 영향받은 윈도우 기기 850만대라고 밝혀 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Microsoft, CrowdStrike에 영향받은 윈도우 기기 850만대라고 밝혀

     * Microsoft의 David Weston 부사장에 따르면, 최근 CrowdStrike 장애로 인해 전 세계 Windows 기기의 1% 미만인 약 850만대가 영향을 받음
     * CrowdStrike의 사이버 보안 소프트웨어 업데이트로 인해 Windows 기기가 충돌했으며, Mac과 Linux 기기는 영향을 받지 않음
     * 영향을 받은 기기의 수는 상대적으로 적었지만, 은행, 소매업체, 증권사, 철도망 등 전 세계적으로 광범위한 혼란을 야기함. 항공사는 전 세계적으로 항공편 운항을 중단.
     * 그는 ""Microsoft 사고는 아니지만"" CrowdStrike와 협력하여 문제 해결을 위해 노력하고 있으며, ""Azure 인프라가 수정을 가속화하는 데 도움이 되는 확장 가능한 솔루션""을 개발했으며, AWS/GCP하고도 협력하고 있다고 말함

   Mac과 Linux 기기는 영향을 받지 않음. 이라고 수차례 강조한 표현 때문에 Windows 이미지가 나락으로 가는 느낌이 좀 드네요.
   윈도우에서는 사용자 동의과정 없이 커널 레벨의 패치가 설치될 수 있고, 디바이스를 벽돌로 만들수 있음이 증명되었달까.

   microsoft vs. 고객
   microsoft vs. crowdstrike

   앞으로, 폭풍 소송전이 예상됩니다.

   crowdstrike? no. cloudstrike!
"
"https://news.hada.io/topic?id=15870","Horizon - Imgur를 대체가능한 개인용 이미지 공유 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Horizon - Imgur를 대체가능한 개인용 이미지 공유 플랫폼

     * 17살의 캐나다 개발자가 3년간 만든 이미지 공유 플랫폼
     * 개인화된 공유 공간으로 사진, 비디오, 문서, 링크, 클립보드 등을 빠르고 안전하게 공유 가능
     * AES 암호화를 통해 파일의 안전성을 보장
     * 파일을 폴더로 정리하여 효율적인 관리 가능
     * 임베드 기능
          + 소셜 미디어 공유: Discord, X, Telegram 등 다양한 소셜 미디어 플랫폼에서 파일을 공유 가능
          + 파일 외관 커스터마이징: 업로드한 파일의 외관을 사용자 정의 가능
     * 기타 기능
          + 짧은 링크 생성: 사이트로의 짧은 링크 생성 가능
          + 클립보드 공유: 최대 100,000자까지 클립보드 공유 가능
          + 폴더로 정리: 파일을 폴더로 정리하여 관리 가능
     * 다른 서비스 대비 장점 :더 많은 기능과 더 나은 개인 정보 보호, 광고 없음, 소셜 미디어에서 파일 외관을 사용자 정의 가능

    가격

     * 무료 플랜 (Horizon Basic)
          + 500 MB 파일 저장소: 사진, 비디오, 기타 파일 저장 가능
          + 최대 75 MB 파일 업로드: 작은 파일과 큰 파일 모두 쉽게 공유 가능
          + 압축 이미지: 업로드 시 이미지 압축, 가능한 한 품질 유지
          + 무제한 대역폭: 파일을 항상 접근 가능하게 공유 가능
          + 링크 단축 및 Pastebin: 최대 10,000자까지 긴 텍스트 공유 가능
          + 선택적 파일 암호화: 중요한 문서에 대해 암호화 가능
     * 유료 플랜 (Everest)
          + 100 GB 파일 저장소: 사진, 비디오, 기타 파일 저장 가능
          + 최대 10 GB 파일 업로드: 작은 파일과 큰 파일 모두 쉽게 공유 가능
          + 무손실 이미지: 압축 없이 원본 품질 유지
          + 무제한 대역폭: 파일을 항상 접근 가능하게 공유 가능
          + 링크 단축 및 Pastebin: 최대 100,000자까지 긴 텍스트 공유 가능
          + 선택적 파일 암호화: 중요한 문서에 대해 암호화 가능

        Hacker News 의견

     * 많은 시간과 노력이 투자된 것이 분명함. 그러나 이러한 사이트들은 보통 오래 지속되지 않음. 대역폭 비용과 스팸 방지 문제로 인해 광고를 도입하거나 사라짐. 이 사이트가 성공하길 바라는 마음임
     * ShareX를 Horizon과 연동하는 것이 놀랍도록 쉬웠음. 파일 삭제와 URL 복사 기능을 잘 처리함. 협업을 통해 기본 파일/이미지 업로더로 발전하길 바람
     * 사용자 증가에 따라 고려해야 할 사항으로 수익화와 악용 문제가 있음. 성인 콘텐츠 허용으로 인해 결제 프로세서가 문제를 일으킬 수 있음. 예를 들어, Stripe는 파일 공유를 금지함
     * 아동 보호법 강화로 인해 비싼 스캔 기술을 도입해야 할 수도 있음. 구글처럼 벌금을 예산에 포함시키는 방법도 있음. 결제 프로세서가 스캔이 없는 경우 더 높은 위험으로 간주할 수 있음
     * 악성 소프트웨어 호스팅으로 인해 블랙리스트에 오를 위험이 있음. 특히 비미디어 파일 지원 시 브라우저나 검색 엔진에서 차단될 수 있음
     * 만약 서비스가 성공하지 않거나 운영에 지쳤다면, 비영리 단체로 인수하여 공익을 위해 운영할 의향이 있음. 그러나 먼저 최선을 다해 운영해보길 바람. 매우 잘 만들어진 사이트임
     * 매우 깔끔하고 사용하기 쉬움. 수십 년의 경험을 가진 동료들도 이런 것을 만들기 어려울 것임
     * 출시를 축하함. 고정 크기 요금제 판매가 사용을 망설이게 함. 보통 용량을 과소 또는 과다 사용하게 됨. 그래서 Backblaze나 S3를 사용함. 사용량 기반 요금제를 고려할 의향이 있는지 궁금함
     * 랜딩 페이지의 세부 사항에 대한 주의가 놀라움. Apple 스타일의 기능 상자, 애니메이션, 하단의 블러 효과, 버튼 그림자 등 모든 것이 훌륭함. 앞으로의 경력이 기대됨
     * Windows 앱 지원 계획이 있는지 궁금함. Windows 10과 11 사용자가 iOS, iPadOS, MacOS 사용자보다 많음
     * 제품 페이지가 마음에 듦. 핵심 기능 카드의 벡터 아트를 어디서 구했는지 궁금함. 좋은 소스를 찾기 어려움
     * 페이지 상단의 아트가 마음에 듦. 유용한 다이어그램을 만든 사람을 고용하고 싶음
"
"https://news.hada.io/topic?id=15908","Magic CLI - 커맨드라인을 위한 CoPilot","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Magic CLI - 커맨드라인을 위한 CoPilot

     * LLM을 이용하여 커맨드라인을 효율적으로 사용하게 만들어주는 도구
          + Amazon Q(예전 Fig Terminal) 및 GitHub Copilot for CLI 에서 영감을 받음
     * 명령어 추천
          + 대략 원하는 것을 알고 있지만(심지어 도구까지도) 정확한 인수나 순서는 기억나지 않는 시나리오에 유용함
          + ffmpeg나 kubectl과 같은
     * 명령 기록 전체 검색 : 셸 기록 전체에서 명령어를 검색하고 상위 결과 목록을 가져옴
     * 특정 작업을 하기 위한 명령어 생성 및 추천
          + 수행하길 원하는 작업에 대한 프롬프트 입력시 목표 달성을 위해 실행할 명령어를 제안
          + 더 많은 context가 필요한 경우 명령어를 실행하라고 프롬프트할 수 있음
     * 두 가지 LLM 제공자를 지원: ollama, openai
"
"https://news.hada.io/topic?id=15966","구글, 플레이 스토어에서 저품질 앱 제거 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구글, 플레이 스토어에서 저품질 앱 제거 예정

     * 구글은 현재 플레이 스토어에 게시된 저품질 앱을 단속하고 있음
     * 구글은 기본적인 기능과 품질을 제공하지 못하는 앱을 제거하거나 제한하기 위해 스팸 및 최소 기능 정책을 업데이트함
     * 업데이트된 정책은 2024년 8월 31일부터 시행될 예정임

구글의 플레이 스토어 앱 심사 강화

     * 구글은 안드로이드 앱이 플레이 스토어에 등록되기 전에 엄격한 심사 과정을 거치고 있음
     * 구글은 저품질 앱과 위험할 수 있는 앱을 제거하기 위해 노력을 배가하고 있음
     * 구글은 앱이 안정적이고 반응적이며 매력적인 사용자 경험을 제공해야 한다고 강조함
     * 앱이 충돌하거나, 사용자를 끌어들일 만한 적절한 콘텐츠가 부족하거나, 유용성을 제공하지 않는 경우 플레이 스토어에서 제거될 것임

새로운 정책에 위반될 가능성이 높은 앱 유형

     * 텍스트만 있는 앱
     * 단일 배경화면 앱
     * 설치 후 로드되지 않는 앱
     * 반응하지 않는 앱

구글의 앱 제거 및 제한 조치는 새로운 것이 아님

     * 2023년에 구글은 정책을 위반한 228만 개의 앱이 플레이 스토어에 게시되는 것을 막음
     * 구글은 또한 사용자를 더 잘 보호하기 위해 거의 20만 개의 앱 제출을 거부함
     * 업데이트된 스팸 및 최소 기능 정책의 엄격한 가이드라인은 플레이 스토어에서 사용할 수 있는 앱의 전반적인 안전성을 개선하는 데 도움이 될 것임
     * 안드로이드 사용자에게 더 신뢰할 수 있는 사용자 경험을 제공할 것임
"
"https://news.hada.io/topic?id=15965","데이터 해자의 추락","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               데이터 해자의 추락
"
"https://news.hada.io/topic?id=15873","광고를 위해 기본 설정으로 사용자 데이터를 수집하는 Firefox","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  광고를 위해 기본 설정으로 사용자 데이터를 수집하는 Firefox

    광고를 위해: Firefox가 기본적으로 사용자 데이터를 수집함

     * Firefox는 데이터 보호의 첫 번째 선택지로 자신을 내세우지만, 새로운 버전은 기본적으로 광고주를 위한 데이터를 수집함
     * 사용자들은 Mozilla가 고의로 사용자들을 속이고 있다고 비난함
     * 새로운 Firefox 버전은 광고와 그 성과를 익명으로 측정하는 기술을 도입함

    우리의 사용자는 이를 이해하지 못함

     * Firefox 성능의 기술 리드인 Bas Schouten은 PPA 시스템을 설명하기 어렵다고 주장함
     * 사용자가 정보에 입각한 결정을 내릴 수 없는 경우, 옵트인 방식은 의미가 없다고 설명함
     * 새로운 기능은 항상 사용자에게 물어보지 않고 활성화됨

    기술적으로도 의문스러움

     * PPA는 광고 제공자와 사용자 또는 그들의 데이터 사이에 집계 서버를 두어 정보를 익명화함
     * 이 과정에서 사용자 데이터는 집계 서버에 위치하게 됨
     * Mozilla는 이 서버가 광고 네트워크의 일부가 아니라고 주장하지만, 많은 사용자는 이에 비판적임

    데이터 보호를 광고 라벨로 사용함

     * Firefox 사용자가 데이터 보호를 광고하는 브라우저 제공자를 얼마나 신뢰할지 의문임
     * 기술적으로 시스템을 쉽게 수정하여 광고 제공자가 개별 데이터에 접근할 수 있게 할 수 있음
     * Mozilla가 최근에 데이터 수집을 줄이거나 하지 않겠다고 제안했지만, 현재는 반대의 상황이 발생함

    GN⁺의 정리

     * 이 기사는 Firefox가 기본적으로 사용자 데이터를 수집하는 새로운 기능을 도입하면서 발생한 논란을 다룸
     * Mozilla가 사용자에게 알리지 않고 새로운 기능을 활성화한 점이 비판받고 있음
     * 데이터 보호를 강조하는 Firefox가 광고주를 위한 데이터를 수집하는 것이 사용자 신뢰를 저해할 수 있음
     * 비슷한 기능을 가진 브라우저로는 Ladybird가 있지만, 아직 신뢰할 만한 웹 브라우저로 자리 잡기에는 멀었음

   같은 주제의 글인 것 같아서 링크 걸어 둡니다.
   GN⁺: Firefox, 사용자 동의 없이 [ad tracking] 추가 및 활성화

        Hacker News 의견

     * 광고 측정 비활성화 방법
          + 설정 메뉴에서 'Privacy & Security'로 이동
          + 'Web Site Advertising Preferences' 섹션으로 스크롤
          + 'Allow web sites to perform privacy-preserving ad measurement' 체크박스 해제
     * Mozilla CTO의 Reddit 게시물
          + Mozilla CTO가 Reddit의 Firefox 섹션에 관련 게시물 작성
     * Mozilla Foundation에 대한 비판
          + Wikimedia Foundation이 종종 비판받는 것처럼, Mozilla Foundation도 정체성을 잃었다는 비판
     * 광고 측정 비활성화 방법 추가
          + 설정에서 'privacy' 검색 후 'Firefox Data Collection and Use' 섹션의 체크박스 해제
          + 이미 체크 해제된 경우도 있음
     * Mozilla의 실수
          + Mozilla의 결정이 잘못되었음을 지적
          + Firefox의 주요 강점이었던 프라이버시가 손상되었음
     * Ladybird 브라우저 개발 기부
          + Ladybird 브라우저 개발에 기부할 수 있는 링크 제공
     * LibreWolf 브라우저
          + LibreWolf 사용 후 문제가 발생하면 Firefox로 대체
          + 주로 보안이 강한 웹사이트에서 발생
     * Firefox 성능 문제
          + Firefox의 느린 성능과 기기 전체를 느리게 만드는 경향이 있음
          + 프라이버시가 사라지면 Chrome을 사용하는 것이 더 나을 것이라는 의견
     * 광고 측정 우회 가능성
          + 공격자가 신호를 강화하여 우회할 수 있는 가능성 제기
          + Sybil 공격을 통해 광고 신호를 조작할 수 있음
     * Firefox 추천 중단
          + 과거에 Firefox를 추천했으나, 이제는 더 이상 추천하지 않음
          + 기술적으로 능숙한 사람들이 다른 브라우저로 이동하는 경향
          + Firefox의 미래가 어두울 것으로 전망
"
"https://news.hada.io/topic?id=15910","아마존의 Kindle Direct Publishing, 디스토피아 악몽","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                아마존의 Kindle Direct Publishing, 디스토피아 악몽

    상상해보세요

     * 로봇 경찰에게 걸려 면허가 영구적으로 취소됨
     * 미니 쿠퍼를 운전하고 있었음을 설명하지만 무시당함
     * 다른 로봇이 나타나 상황을 확인하고 5일 후에 답변을 주겠다고 함
     * 2주 후 또 다른 로봇이 항소를 거부하며 부정적인 운전 경험을 이유로 듦
     * 계속된 항소에도 같은 이유로 거부됨

    Amazon KDP와의 경험

     * Ingram Spark를 통해 종이책을 출판하고 KDP를 통해 전자책을 출판함
     * 전자책이 검토를 통과하고 판매되었으나, 종이책과 전자책이 자동으로 연결되지 않음
     * 전자책이 차단되고 KDP의 콘텐츠 검토 팀으로부터 이메일을 받음
     * 이메일 내용: 고객이 올바른 구매 결정을 내리기 어렵게 만드는 요소가 있음
          + 저자 이름의 유사성
          + 제목의 유사성
          + 표지의 유사성
          + 표지 텍스트나 이미지가 책 내용을 정확히 나타내지 않음
          + 제목이나 부제가 책 내용을 정확히 나타내지 않음
          + 설명의 유사성

    항소 과정

     * 이메일로 반박했으나 계정이 종료됨
     * 항소했으나 자동 응답으로 5일 후에 답변을 주겠다고 함
     * 2주 후 항소가 거부됨
     * 계속된 항소에도 같은 이유로 거부됨
     * 최종적으로 Executive Customer Relations Team의 Robert로부터 마지막 항소가 거부됨

    추가 읽을거리

     * WritersWeekly
     * Trustpilot
     * Medium
     * Judy L Mohr

    GN⁺의 정리

     * 이 글은 Amazon KDP의 AI 기반 검토 시스템의 문제점을 다루고 있음
     * 저자는 자신의 책이 부당하게 차단되고 계정이 종료된 경험을 공유함
     * AI 시스템의 오류와 비효율적인 고객 지원이 문제의 핵심임
     * 비슷한 기능을 가진 다른 출판 플랫폼으로는 Smashwords와 Draft2Digital이 있음

        Hacker News 의견

     * 약 1년 전 Prime 구독을 취소했음. Amazon의 저품질 상품 문제 해결 방식이 오히려 저품질 상품 판매자에게 유리하게 작용함
          + Alibaba에서 상품을 주문하고, 새로운 계정을 만들어 리뷰를 구매한 후 판매를 시작함
          + 제품이 잘 팔리면 계속 판매하고, 그렇지 않으면 다시 시작함
          + 경쟁 상품을 신고하여 시장에서 제거하려고 함
          + Amazon과 고객을 철저히 상업적으로 대하는 것이 성공의 열쇠임
     * 우리도 Amazon에서 이유 없이 금지당했음. Amazon을 피하기 위해 필요한 모든 절차를 밟을 것임
     * ISBN을 구매하고 자가 출판 및 배포를 선택했음. 책이 잘 팔리고 있으며, 수익을 포기하더라도 만족스러움
          + 예: Data Analysis with Rust Notebooks, Practical Evolutionary Algorithms
     * KDP를 통해 자가 출판하는 친구들이 있는데, 대부분의 인디 작가들이 KDP를 싫어함. KDP의 경쟁자가 나올 가능성이 있음
     * 작가들의 좌절과 분노를 이해함. KDP를 사용하지 않는 것이 현명할 수 있음. 그러나 문제의 근원은 KDP를 사기 플랫폼으로 사용하는 사람들임
          + Amazon이 소비자만을 신경 쓰고 작가들을 무시하는 점은 비난받을 만함
     * 회사가 잘못한 점을 명확히 설명하지 못하고 모호한 리스트만 제시할 때 실패함
     * FTC가 독점 사례를 만들고자 한다면 이런 이야기를 수집해야 함
     * 기술/소프트웨어 모델 자체가 문제일 수 있음. 모든 것이 자동화되어 있고, 실패하면 그대로 남아 있음
     * 디지털 시장에서 무력한 농노의 삶을 환영함. 앱 스토어, 광고 판매 계정 등에서도 비슷한 일이 발생할 수 있음
          + 생계를 의존하는 플랫폼에 경쟁자가 없을 때 투명성과 절차가 필요함. 규제가 유일한 해결책임
     * 옳은 일을 하고 있다면 소셜 미디어에서 바이럴 되는 것이 유일한 희망임. 이 게시물은 좋은 시작임. 많은 회사들이 고객 서비스를 포기하고 있음
"
"https://news.hada.io/topic?id=15941","Foliate - Linux용 e-Book 리더 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Foliate - Linux용 e-Book 리더 오픈소스

     * EPUB, Mobipocket, Kindle, FB2, CBZ, PDF 지원
     * 페이지/스크롤모드 읽기 및 쉬운 탐색(터치 제스쳐)
     * 글꼴, 간격, 여백, 색상 스킴 조정 가능
     * 창 제어 컨트롤들이 자동으로 숨겨져서 방해요소 최소화
     * 북마크 및 주석 달기(플레인 JSON에 저장되어 다른 툴과 동기화/백업 간편)
     * 편리한 도구들
          + 단어를 Wiktionary 및 Wikipedia에서 찾기
          + 문장을 구글 번역 하기
          + Speech Dispatcher로 음성으로 읽어주기
     * RTL 텍스트, 세로 읽기, 고정형 레이아웃 책 지원
"
"https://news.hada.io/topic?id=15905","Posting - 터미널용 HTTP API 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Posting - 터미널용 HTTP API 클라이언트

     * Textual로 개발된 TUI 어플리케이션
     * ""점프 모드"" 탐색 : Ctrl+o를 누르면 키 오버레이가 화면에 나타나 해당 키를 눌러 원하는 위젯으로 바로 이동
     * Tree-sitter를 활용한 구문 강조 기능
     * 자동 완성 기능을 지원하는 환경/변수 시스템
     * 다양한 내장 테마와 설정 시스템
     * Vim 키 지원 : 많은 UI 부분에서 Vim 키로 탐색 가능
     * Textual을 사용하여 제작됨

Collections

     * 요청은 간단한 YAML 파일(.posting.yaml)로 파일 시스템에 직접 저장되어 읽기 쉽고 버전 관리가 용이함
     * --collection 옵션을 사용해 collection(요청이 포함된 디렉토리)을 열 수 있음
     * 디렉토리를 지정하지 않으면 기본 collection 디렉토리가 사용됨

  Tab 탐색

     * Tab과 Shift+Tab으로 위젯 간 포커스 이동
     * j/k/위/아래로 위젯 내부 이동
     * 위/아래로 위젯 간 이동 가능

  키보드 단축키

     * 화면 하단에 주요 단축키 표시
     * 추가 단축키는 표에 정리되어 있음

OpenAPI 스펙 가져오기

     * OpenAPI 3.x 스펙을 collections로 변환 가능 (실험적 기능)
     * posting import path/to/openapi.yaml 명령으로 OpenAPI 스펙 가져오기 가능
     * 출력 디렉토리를 지정하지 않으면 기본 collection 디렉토리 사용
     * 가져온 API의 URL 구조에 맞게 collection에 파일 구조를 구축하려 시도
"
"https://news.hada.io/topic?id=16001","GitHub에서 삭제되거나 비공개 Repo 데이터에 누구나 액세스할 수 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GitHub에서 삭제되거나 비공개 Repo 데이터에 누구나 액세스할 수 있음

     * GitHub에서는 삭제된 포크, 삭제된 저장소, 심지어 비공개 저장소의 데이터에 액세스할 수 있음
     * 이는 GitHub에서 알고 있으며 의도적으로 설계된 방식임
          + GitHub를 사용하는 모든 조직에 엄청난 공격 벡터가 되므로 ""크로스 포크 객체 참조(CFOR)""라는 새로운 용어를 도입함
     * CFOR 취약점은 한 저장소 포크가 다른 포크(비공개 및 삭제된 포크의 데이터 포함)의 중요한 데이터에 액세스할 수 있을 때 발생함

삭제된 포크 데이터 액세스하기

     * GitHub에서 일반적인 워크플로우를 고려해 보면 공용 저장소를 포크하고, 포크에 코드를 커밋한 다음, 포크를 삭제하는 경우가 있음
     * 포크에 커밋한 코드는 여전히 액세스 가능하며 영원히 액세스 가능함
     * 커밋 해시를 알아야 보호된다고 생각할 수 있지만 해시는 발견할 수 있음
     * 삭제된 포크에서 데이터를 찾는 것은 꽤 자주 발생함

삭제된 저장소 데이터 액세스하기

     * GitHub에 공용 저장소가 있고, 사용자가 저장소를 포크하고, 포크 후에 데이터를 커밋한 다음 전체 저장소를 삭제하는 시나리오를 고려해 보면,
     * 포크 이후에 커밋한 코드는 여전히 액세스 가능함
     * GitHub는 저장소와 포크를 저장소 네트워크에 저장하며, 원래 ""업스트림"" 저장소가 루트 노드 역할을 함
     * 포크된 공용 ""업스트림"" 저장소가 ""삭제""되면 GitHub는 루트 노드 역할을 다운스트림 포크 중 하나에 재할당함
     * 그러나 ""업스트림"" 저장소의 모든 커밋은 여전히 존재하며 모든 포크를 통해 액세스할 수 있음

비공개 저장소 데이터 액세스하기

     * GitHub에서 새로운 도구를 오픈 소스화하는 일반적인 워크플로우를 고려해 보면,
     * 결국 공개될 비공개 저장소를 만들고, 해당 저장소의 비공개 내부 버전을 만들어(포크를 통해) 공개하지 않을 기능에 대한 추가 코드를 커밋하고, ""업스트림"" 저장소를 공개하고 포크를 비공개로 유지하는 경우가 있음
     * 비공개 기능 및 관련 코드(2단계에서)가 공개적으로 볼 수 있는지 여부는 공용 저장소에서 액세스할 수 있음
     * ""업스트림"" 저장소를 공개한 후 비공개 포크에 커밋한 모든 내용은 볼 수 없음

실제로 데이터에 어떻게 액세스하나요?

     * 커밋에 직접 액세스함으로써
     * GitHub의 저장소 네트워크에서 파괴적인 작업(위에서 언급한 3가지 시나리오와 같은)은 표준 GitHub UI 및 일반 git 작업에서 커밋 데이터에 대한 참조를 제거함
     * 그러나 이 데이터는 여전히 존재하며(커밋 해시를 알고 있는 경우) 액세스할 수 있음
     * 커밋 해시는 SHA-1 값이며, 사용자가 보려는 특정 커밋의 SHA-1 커밋 해시를 알고 있다면 https://github.com/<user/org>/…; 엔드포인트에서 해당 커밋으로 직접 이동할 수 있음
     * 커밋 해시는 GitHub의 UI를 통해 무차별 대입될 수 있음
     * GitHub의 public events API 엔드포인트를 통해 커밋 해시를 쿼리할 수도 있음

GitHub의 정책

     * 최근 GitHub의 VDP 프로그램을 통해 이러한 결과를 제출했으며, GitHub는 저장소가 이와 같이 작동하도록 설계되었음을 명확히 했음
     * 문서를 검토한 결과 GitHub가 위에서 문서화된 인스턴스에서 사용자가 기대해야 하는 바를 명확하게 문서화했음을 알 수 있음

영향

     * 포크가 하나라도 존재하는 한 해당 저장소 네트워크에 대한 모든 커밋(""업스트림"" 저장소 또는 ""다운스트림"" 포크의 커밋)이 영원히 존재할 것임
     * GitHub의 저장소 아키텍처는 이러한 설계 결함을 필요로 하며, 대다수의 GitHub 사용자는 저장소 네트워크가 실제로 어떻게 작동하는지 이해하지 못하고 덜 안전할 것임
     * 시크릿 스캐닝이 진화함에 따라 저장소 네트워크의 모든 커밋을 스캔할 수 있게 되면 자신의 것이 아닌 시크릿에 대해 경고할 수 있게 됨
     * 이러한 3가지 시나리오는 충격적이지만 GitHub가 저장소에서 삭제된 데이터를 저장할 수 있는 모든 방법을 다루지는 않음

GN⁺의 의견

     * 이 기사는 GitHub를 사용하는 조직에게 중요한 보안 문제를 제기함. 삭제되거나 비공개로 설정된 저장소의 데이터가 여전히 액세스 가능하다는 점은 충격적임. 이는 GitHub의 저장소 네트워크 아키텍처로 인한 근본적인 설계 결함으로 보임
     * 개발자들은 이러한 문제를 인식하고 중요한 데이터나 시크릿을 GitHub에 커밋할 때 주의해야 함. 일단 공개 저장소에 푸시되면 영원히 액세스 가능할 수 있음. 중요한 시크릿이 유출된 경우 키 로테이션을 통해서만 완전히 해결할 수 있음
     * GitHub는 이러한 문제를 투명하게 공개하고 문서화하고 있지만, 대다수의 사용자는 저장소 네트워크의 작동 방식을 완전히 이해하지 못할 것임. GitHub는 이러한 문제에 대한 인식을 높이고 사용자를 교육하는 데 더 많은 노력을 기울여야 함
     * 다른 버전 관리 시스템에서도 이와 유사한 문제가 존재할 수 있음. 개발자와 조직은 중요한 데이터를 관리할 때 사용 중인 도구의 아키텍처와 한계를 잘 이해해야 함
     * 중요한 데이터의 유출을 방지하기 위해서는 엄격한 접근 통제와 최소 권한의 원칙 적용, 정기적인 시크릿 스캐닝과 모니터링 등 다각도의 보안 조치가 필요함. 무엇보다 개발자의 높은 보안 인식이 중요함

        Hacker News 의견

     * 2018년에 HackerOne에 보고했으나 GitHub는 의도된 동작이라며 수정하지 않았음. 결론: 개인 포크 대신 저장소를 복사해서 사용할 것
     * GitHub는 모든 것을 공개하고 변경 불가능하게 만드는 것에 집착함. 예를 들어, 댓글을 삭제하려면 저장소 소유자에게 실제 신분증을 이메일로 보내야 함
     * ""비공개"" 기능에 대한 이러한 문제를 사용자가 알 필요가 없으며, GitHub가 이를 버그가 아닌 기능으로 간주하는 것은 보안에 대한 무관심을 보여줌. 비공개 저장소를 ""목록에 없는"" 저장소로 부르는 것이 더 적절함
     * 비공개 저장소와 비공개 포크를 사용하다가 저장소를 공개로 전환하면 포크도 공개됨. GitHub가 의도된 동작이라고 주장할 수 있지만, 저장소와 포크를 동시에 공개하도록 강제해야 함
     * 이러한 동작은 다크 패턴처럼 보이며, 사람들의 생계가 걸려 있음에도 불구하고 GitHub는 신경 쓰지 않음. 이는 고의적인 부인 가능성과 불명확한 이용 약관이 평판 손실보다 더 가치 있기 때문임
     * 이 문제를 최소화하는 댓글에 놀람. GitHub를 오랫동안 사용해왔지만 이러한 결과를 예상하지 못했으며 불안감을 느낌. 기사를 직접 읽어보기를 권장함
     * 이 문제는 새로운 것이 아님. 많은 사람들이 이전에 이 문제를 발견했음
     * GitHub의 OSPO에서 공개 포크의 비공개 미러를 유지하기 위한 오픈 소스 GitHub App을 개발 중임. 이번 주에 베타 릴리스를 예정하고 있음
     * GitHub Events 아카이브가 취약한 저장소의 SHA1 해시를 노출시키는 방식이 진정한 취약점임. 네트워크 전체를 검색하여 삭제된 비공개 저장소에 접근할 수 있음
     * 비공개 데이터가 공개 데이터에 의존할 수 있는 방식이 문제임. 예를 들어, 비공개 커밋이 공개 커밋 C에 의존하는 경우, 공개 저장소에서 C가 삭제되면 GitHub는 이를 유지해야 함. 그렇지 않으면 비공개 커밋이 깨짐
     * 모든 커밋은 GitHub에 제출된 후 영원히 살아남으며, 한 번 공개된 커밋은 항상 커밋 해시를 통해 접근 가능함
"
"https://news.hada.io/topic?id=15950","박스 쉐도우에 대해 얼마나 알고 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         박스 쉐도우에 대해 얼마나 알고 있나요?

    박스 쉐도우에 대해 얼마나 알고 있나요?

      박스 쉐도우란 무엇인가?

     * 박스 쉐도우는 드롭 쉐도우의 일종으로, 이미지 필터의 한 형태임
     * 드롭 쉐도우는 이미지의 픽셀을 x와 y 축을 따라 이동시켜 그림자 효과를 주는 필터임
     * CSS에서 filter 속성을 사용하여 드롭 쉐도우를 적용할 수 있음

div {
  filter: drop-shadow(xOffset yOffset rgba(0, 0, 0, 0.5));
}

     * CSS는 블러 값을 추가로 지원하여 드롭 쉐도우에 적용할 수 있음

div {
  filter: drop-shadow(xOffset yOffset blurSize rgba(0, 0, 0, 0.5));
}

      박스 쉐도우

     * 박스 쉐도우는 박스 형태만 지원하는 드롭 필터의 일종임
     * 박스 쉐도우는 성능 면에서 유리함
     * CSS 박스 쉐도우 구현은 수학적 해킹을 통해 둥근 박스를 저렴하게 그릴 수 있음
     * 여러 박스 쉐도우를 레이어링하여 다양한 디자인을 만들 수 있음

function randomizeAndColor(e) {
  randomize(e);
  const spread = Math.random() > 0.8 ? 2 : 0;
  const x1 = Math.floor(3 - Math.random() * 6) / (1 + spread);
  const y1 = Math.floor(3 - Math.random() * 6) / (1 + spread);
  const y2 = 2 + Math.floor(Math.random() * 4);
  const blur2 = 8 + Math.floor(Math.random() * 12);
  e.style.boxShadow = `${x1}px ${y1}px 0px ${spread}px ${getRandomPastelColor()}, 0 ${y2}px ${blur2}px #0006`;
}

      박스 쉐도우를 잘못 사용하는 방법

     * 일반적으로 디자이너는 일관된 마진, 패딩, 타이포그래피를 사용하여 사각형을 배치함
     * 박스 쉐도우를 사용하여 다양한 형태의 예술적 효과를 낼 수 있음
     * 박스 쉐도우를 사용하여 애니메이션 효과를 줄 수 있음

const tick = (timestamp: number) => {
  gameState.frame++;
  gameState.deltaTime = Math.min((timestamp - gameState.prevFrameStartTime) / 1000, 0.1);
  gameState.prevFrameStartTime = timestamp;
  update(gameState);
  render(gameState);
  winContext._gameFrame = window.requestAnimationFrame(tick);
};

      박스 쉐도우를 심각하게 잘못 사용하는 방법

     * 박스 쉐도우를 사용하여 3D 효과를 낼 수 있음
     * 공이 튀는 애니메이션을 만들 수 있음
     * 박스 쉐도우를 사용하여 점 구름을 그릴 수 있음

const pixels = await getImagePixels(""/images/starry_night_full.jpg"", width);
const dx = window.innerWidth / pixels[0].length;
const dy = window.innerHeight / pixels.length;
for (let y = 0; y < pixels.length; y++) {
  for (let x = 0; x < pixels[0].length; x++) {
    const px = x * dx + dx / 2, py = y * dy + dy / 2, pz = 60 + Math.random() * 3;
    state.particles.push({ size: pSize, x: px, y: py, z: pz, ox: px, oy: py, oz: pz, dx: Math.random() * 3, dy: Math.random() * 3, dz: Math.random() * 3, color: pixels[y][x] });
  }
}

      박스 쉐도우로 레이 트레이싱

     * 레이 트레이싱은 이미지 생성의 정확하지만 느린 방법임
     * 박스 쉐도우를 사용하여 레이 트레이싱을 구현할 수 있음
     * 웹 워커를 사용하여 멀티 스레딩을 구현할 수 있음

const gameState = {
  frame: 0,
  prevFrameStartTime: 0,
  deltaTime: 0,
  renderContainerSize: 32,
  cam: new PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 100),
  spheres: [
    { position: new Vector3(0, 1.3, 0), radius: 1.3, material: CreateMat({ color: new Color(1, 0.2, 0.3) }) },
    { position: new Vector3(-3, 1.3, 0), radius: 1.3, material: CreateMat({ color: new Color(0.9, 0.9, 0.9), smoothness: 0.9 }) },
    { position: new Vector3(0, 10.8, 0), radius: 3.6, material: CreateMat({ color: new Color(0, 0, 0), emissive: new Color(1, 1, 1), emissiveStrength: 8 }) }
  ]
};

    # GN⁺의 정리

     * 박스 쉐도우는 드롭 쉐도우의 일종으로, 이미지에 깊이감을 더하는 데 유용함
     * CSS를 사용하여 다양한 박스 쉐도우 효과를 구현할 수 있으며, 이를 통해 창의적인 디자인을 만들 수 있음
     * 박스 쉐도우를 사용하여 3D 효과와 애니메이션을 구현할 수 있음
     * 레이 트레이싱을 박스 쉐도우로 구현하는 것은 비효율적이지만 가능함
     * 이 기사는 박스 쉐도우의 창의적이고 비정형적인 사용 방법을 탐구하며, 이를 통해 새로운 디자인 가능성을 제시함
"
"https://news.hada.io/topic?id=15878","엔지니어를 위한 딥러닝 가이드: Transformer 모델 이해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  엔지니어를 위한 딥러닝 가이드: Transformer 모델 이해

   우리는 AI의 세 번째 황금기에 있음. 이전 두 번의 황금기(1950년대-1960년대와 1980년대)에는 기술의 한계로 인해 실망이 있었음. 그러나 현재의 AI 기술은 기대를 초과하고 있음. 특히 2017년에 도입된 Transformer는 기계 번역 모델로 시작했지만, 현재 거의 모든 분야에 영향을 미치고 있음. 현대 엔지니어에게 필수적인 지식으로 간주됨. 이 문서의 첫 번째 목표는 엔지니어가 Transformer를 이해하는 가장 짧은 경로를 제공하는 것임.

    이 문서가 제공하는 것

     * 간결한 가이드북: Transformer를 배우기에 충분한 정보를 제공함.
     * 실습 가능한 Python 코드 예제: 독자가 직접 실행할 수 있는 Python 코드 예제를 제공하여 이해를 돕음.
     * 추가 탐색을 위한 참고 자료: 다양한 문서 옵션을 소개하여 독자가 더 쉽게 접근할 수 있도록 함.

    목차

     * Part 1: 신경망: 신경망의 기본 개념을 소개함.
     * Part 2: 순환 신경망 (RNNs): LSTM과 GRU를 포함한 RNN을 탐구함.
     * Part 3: 자연어 처리 (NLP)와 주의 메커니즘: 기계 번역과 주의 메커니즘을 포함한 NLP의 기본 원리를 제공함.
     * Part 4: Transformer: Transformer 모델을 설명함.
     * 부록: 기본 지식: Transformer를 이해하는 데 필요한 Python과 수학의 최소한의 지식을 제공함.

    FAQ

     * 누가 이 문서를 자유롭게 사용할 수 있는가?
          + 교육 기관에 속한 교사나 학생은 이 문서와 그림을 자유롭게 사용할 수 있음. 비상업적 회의와 강의에서 이 문서와 그림을 사용할 수 있으며, 이 사이트 링크와 저작권을 명시해야 함. 그렇지 않으면 연락 바람.
     * 상업적 콘텐츠에 사용할 수 있는가?
          + 수익 공유: 수익 공유 계약을 체결한 후 이 콘텐츠를 사용할 수 있음. 이 계약에 따라 이 콘텐츠를 사용하여 발생한 판매의 20%를 공유해야 함.
          + 전체 매입: 매우 드문 경우에 전체 콘텐츠 권리를 매입하는 요청을 고려함. 전체 매입 비용은 €10,000,000임.
     * 저자가 이 문서의 저작권을 포기하지 않거나 크리에이티브 커먼즈 라이선스를 사용하지 않는 이유는?
          + 저작권을 유지하는 데 문제가 있는지 문의 바람. 이메일을 보낼 때 최소 두 개의 SNS 주소(예: LinkedIn, Twitter)를 제공해야 함. XZ 백도어 사건 이후 익명의 연락을 받지 않음.

    예외

   교육 기관은 이 문서를 자유롭게 사용할 수 있음.

  GN⁺의 정리

     * 이 문서는 Transformer 모델을 이해하는 데 필요한 기본 지식을 제공하는 간결한 가이드북임.
     * 실습 가능한 Python 코드 예제와 다양한 참고 자료를 통해 독자가 직접 학습할 수 있도록 돕는 것이 특징임.
     * Transformer 모델은 현대 AI 기술의 핵심으로, 이를 이해하는 것은 엔지니어에게 매우 중요함.
     * 이 문서는 교육 기관에서 자유롭게 사용할 수 있으며, 상업적 사용을 위해서는 저작권자의 허가가 필요함.
     * Transformer와 관련된 다른 기술이나 프로젝트를 탐구하고자 하는 사람들에게 유용한 자료임.
"
"https://news.hada.io/topic?id=15875","Mistral AI, 새로운 언어 모델 Codestral Mamba 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Mistral AI, 새로운 언어 모델 Codestral Mamba 공개

     * 코드 생성에 특화된 Mamba2 언어 모델
     * Mamba 모델은 트랜스포머 모델과 달리 선형 시간 추론과 이론적으로 무한한 길이의 시퀀스를 모델링할 수 있는 능력을 제공
          + 입력 길이에 관계없이 빠른 응답으로 사용자가 모델과 광범위하게 상호 작용할 수 있음
          + 이러한 효율성은 특히 코드 생산성에 영향을 줘서, SOTA 트랜스포머 기반 모델과 동등한 성능을 발휘할 수 있음
     * 벤치마크 결과 7B 모델에서는 Codestral Mamba (7B)가 기존 CodeGemma-1.1 7B, CodeLlama 7B, DeepSeek v1.5 7B 등보다 뛰어나거나 거의 동등한 능력을 보임
     * 훌륭한 로컬 코드 어시스턴트가 될 것으로 기대
     * mistral-inference SDK, TensorRT-LLM을 통해서 배포가능하며 로컬 추론을 위해 llama.cpp에서도 지원 예정
     * HuggingFace에서 원시 가중치 다운로드 가능

    Hacker News 의견

     * VS Code에서 실행하기 위한 단계가 필요함
          + 게시물에 지침 링크나 VS Code Extension의 원클릭 설치 링크를 포함하면 채택에 도움이 될 것임
          + 많은 사용자가 관심을 가질 모델이지만, 수익화 가능한 행동 유도 문구가 없다는 점은 문제임
     * FIM 기능을 갖춘 모델 추천을 요청함
          + codellama-13b를 vim extension과 함께 사용 중이지만, 성능이 뛰어나지 않음
          + Gemma-27b가 더 나은 코드를 생성하지만 FIM 기능이 없음
          + codellama-34b는 추론이 제대로 작동하지 않음
     * MBPP 열에서 DeepSeek을 강조해야 함
          + DeepSeek이 Codestral보다 더 나은 점수를 가지고 있음
     * 모델이 HuggingFace에 있다고 발표했지만 링크를 제공하지 않음
          + 링크: HuggingFace Mamba-Codestral-7B-v0.1
     * Mamba2를 사용하는 고프로파일 모델을 보는 것이 좋음
     * Mamba가 더 빠르다고 주장하지만 지연 시간 수치가 없음
          + 누군가 사용해봤는지, 그리고 실제로 빠른지 궁금함
     * Mamba와 Transformers의 장단점에 대한 제품 소개를 추천함
     * Mamba 아키텍처에 대한 좋은 설명이 있는지 궁금함
     * LLM의 일반 개념을 이해하지만, ChatGPT, Claude 등 일반적으로 공개된 도구만 사용해본 사람에게 적합한 비디오나 글을 추천함
          + 로컬에서 실행할 수 있는 하드웨어가 있는지 확인하고 싶지만 어디서 시작해야 할지 모름
     * model.box 플레이그라운드에서 빠른 테스트를 진행함
          + 다른 모델(e.g., gpt-4o)보다 완료 길이가 눈에 띄게 짧음
          + 응답 속도는 기대에 부합함

   Codestral - Mistral의 코드 생성 AI 모델
"
"https://news.hada.io/topic?id=15909","Ask HN: 2024년의 Prolog 전망은 어떤가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask HN: 2024년의 Prolog 전망은 어떤가요?

     * 컴퓨터 과학 학생으로서 Prolog와 논리 프로그래밍을 공부 중임
     * 바닐라 프로로그의 기본(원자, 술어, 컷, 리스트 등)을 배웠고, SICStus 프로로그에서 작동하는 에이전트 통신 시스템의 끔찍한 구현을 봄
     * 이 언어 자체가 강점일 수 있다고 생각하기 때문에 더 알고 싶음
     * 공부하는 분야가 상당히 기초적인 분야이기 때문에 이쪽 세계와 내가 정말 좋아하는 다른 세계(온톨로지 :D)에 대한 지식을 넓히고 전문화해보고 싶음
     * 2024년의 Prolog는 어떤 모습인지, 사람들이 Prolog로 무엇을 하고 있는지 궁금함

   Prolog 자체는 아니지만 Constraints 개념이 계속 유용할거라는데는 동의가 되네요

   DB같은데서도 많이 활용되고 있고, 최첨단 프로그래밍 언어 중에서는 Datalog 를 일급 지원하려는 시도도 있어요. (예시: https://flix.dev/)

        Hacker News 의견

     * Prolog은 50년의 역사를 가진 언어로, 일반적인 코딩에는 유용성보다 장애물이 더 많을 수 있음
          + Prolog 시스템은 많지만 Prolog 코드가 적어 커뮤니티가 분열되어 있음
          + Prolog를 배우는 것은 ""Prolog에서 어떻게 할까?""보다 ""Prolog에서 걸려 넘어지지 않으려면 어떻게 할까?""에 가까움
          + 몇몇 헌신적인 사람들과 이상주의자들이 Prolog의 가능성을 논의하고 있음
          + Prolog는 흥미롭고 재미있는 요소가 있지만, 위험할 수도 있음
     * Scryer Prolog는 성능이 뛰어난 오픈 소스 iso-호환 Prolog로 새로운 이정표를 세움
          + Markus Triska의 작업을 확인해보면 놀라움을 느낄 수 있음
          + 링크: Markus Triska's Prolog, YouTube Channel
     * Prolog와 Contraint 프로그래밍은 유용한 도구임
          + Prolog에는 몇 가지 문제점이 있음
               o 현대적인 모듈이나 패키지 시스템이 없음
               o 큰 코드베이스에서는 비논리적 구조가 불가피해 코드가 복잡해짐
               o 정적이고 강한 타입이 없어 견고한 코드를 작성하기 어려움
          + Prolog는 놀라운 언어이며, 프로그래밍의 미래에 자리잡을 가능성이 있음
     * 이론적으로 Prolog는 최고의 언어임
          + 논리적 형식과 계산 언어, 메타 프로그래밍 언어로서의 특성을 가짐
          + 실용적으로는 성능이 뛰어난 구현체와 작은 커뮤니티가 있음
          + Prolog로 많은 것을 할 수 있지만, 어떻게 해야 할지 명확하지 않을 때가 많음
     * 새로운 사람들이 Prolog에 관심을 가지는 것은 좋은 일임
          + Trealla Prolog를 Wasm으로 쉽게 사용할 수 있도록 라이브러리를 개발 중임
          + 링크: TypeScript Library, Go Library
          + Scryer와 Trealla는 ISO 호환성을 목표로 하고 있음
     * Prolog는 새로운 사고방식을 요구하는 언어임
          + 선언적 패러다임이 좋지만, 다른 언어에 비해 큰 이점은 없음
          + CLPFD를 적용할 수 있는 문제에서 표현력이 뛰어남
          + LLM을 사용해 Prolog 사실/데이터베이스를 생성하는 것이 재미있음
     * Prolog의 ""마법""은 통합과 백트래킹 개념에 기반함
          + 선언적 언어로서 역문제를 간단하게 표현할 수 있지만, 해결책을 제공하지 않음
          + 해결 엔진이 개선되면 Prolog와 같은 선언적 제약 프로그래밍 언어의 사용이 증가할 것임
     * Prolog에 대해 거의 알지 못하지만, Datalog 튜토리얼을 즐겼음
          + 링크: Learn Datalog Today
     * 논리 프로그래밍의 검색 알고리즘은 느림
          + Prolog는 모든 것을 할 수 있지만, 모든 것을 잘하지는 못함
          + Prolog는 데이터베이스 유지 관리와 같은 특정 작업에 적합함
"
"https://news.hada.io/topic?id=15867","면역치료가 암 치료를 영원히 변화시키는 혁명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        면역치료가 암 치료를 영원히 변화시키는 혁명

     * 면역치료가 암 치료를 영원히 바꾸고 있음
     * 그의 뇌종양은 절망적인 사례였음. 그러나 실험 약물이 그것을 녹여버렸음
          + 2023년 4월 말, 보스턴의 Mass General에서 암 연구자인 Marcela Maus는 동료 Bryan Choi로부터 전화를 받음. Choi는 흥분한 목소리로 ""오 마이 갓, 오 마이 갓!""을 외쳤음. Choi와 Maus는 공격적인 뇌암인 교모세포종에 대한 임상 시험에서 첫 환자를 치료했음. 환자는 74세 남성으로, 유전자 변형된 백혈구를 뇌 주변의 체액에 직접 주입받았음. MRI 결과, 며칠 전 딸기 크기였던 종양이 거의 사라졌음을 확인함.
          + 몇 주 후, 두 번째 환자인 Tom Fraser를 치료했으며, 동일한 과정이 반복되었음. 세 번째 환자도 비슷한 반응을 보였고, Maus는 시험을 중단하고 결과를 작성함.
          + 교모세포종은 가장 흔한 악성 뇌암으로, 모든 연령대에서 발생할 수 있으며 치명적임. 평균 진단 후 생존 기간은 1년이 조금 넘음. 치료의 첫 단계는 최대한 많은 종양을 제거하는 수술임. 그러나 종양은 뇌에 깊이 침투하여 완전히 제거하기 어려움.
     * 면역치료의 혁명
          + 지난 20년 동안 면역치료는 종양학에서 모든 기대를 뒤엎음. 면역체계는 질병으로 인식되는 것을 공격하는 데 매우 능숙함. 이를 암에 적용하면 수술이나 화학요법보다 더 철저하게 종양을 제거할 수 있음.
          + Maus와 Choi는 면역체계의 만능 킬러인 T 세포를 사용하여 암을 바이러스처럼 인식하고 파괴하는 방법을 찾았음. T 세포를 환자의 혈액에서 추출하고, DNA를 편집한 후 종양 부위에 다시 주입함으로써 암을 바이러스로 인식하게 만듦.
          + Fraser는 주입 당일 많은 의사, 간호사, 과학자들로 가득 찬 방에서 치료를 받았음. 24일 후, 그는 거의 완전한 관해 상태로 병원을 떠남.
     * 면역치료의 한계와 미래
          + 면역치료는 백혈병, 림프종, 피부암 등에서 큰 성과를 거두었으나, 고형 종양에서는 여전히 어려움이 있음. 그러나 교모세포종에서의 초기 결과가 유지된다면, 이는 역사적인 사건이 될 것임.
          + Choi와 Maus는 2023년 3월 _New England Journal of Medicine_에 결과를 발표한 후 전 세계의 종양학자들로부터 연락을 받음. 기존의 치료법은 비참한 상태였음.
          + 교모세포종 환자들은 진단 후 며칠 내에 수술을 받는 경우가 많음. 이는 질병의 공격성과 뇌의 특수성 때문임. 종양이 자라기 시작하면 정상 조직이 밀려나면서 신경학적 효과가 빠르게 증가함.
     * 면역치료의 도전과 비용
          + 면역치료는 비용이 많이 들고 복잡함. 예를 들어, CAR-T 치료는 환자의 혈액에서 T 세포를 제거하고, 유전적으로 변형한 후 다시 주입해야 함. 이 과정은 노동 집약적이며 비용이 많이 듦.
          + Maus의 실험실에서는 CAR-T 세포를 만들기 위해 여러 단계가 필요함. 이는 수주가 걸리며, 많은 장비와 인력이 필요함.
          + 면역치료의 비용과 효율성은 향후 개선될 가능성이 있음. 연구자들은 환자의 몸 안에서 T 세포를 유전적으로 변형하는 방법을 연구 중임.
     * GN⁺의 정리
          + 이 기사는 면역치료가 암 치료에 미치는 혁신적인 영향을 다루고 있음. 특히 교모세포종과 같은 고형 종양에서의 초기 성공 사례를 통해 면역치료의 잠재력을 보여줌.
          + 면역치료는 비용과 복잡성이라는 도전 과제가 있지만, 향후 기술 발전을 통해 개선될 가능성이 있음.
          + 이 기사는 암 환자와 그 가족들에게 희망을 주며, 면역치료의 미래에 대한 기대감을 높임.

        Hacker News 의견

     * 최근 임상 시험에서 종양의 ""새롭게 측정 가능한"" 영역이 너무 많아 제외되었음. CAR-T 치료를 제안받았으나 치명적인 감염 위험이 높고 효과가 보장되지 않아 거절했음. 가족과 함께 시간을 보내는 것을 선택했음
     * 면역 요법이 생명을 구했지만, 인슐린 의존형 1형 당뇨병을 유발했음. 면역 요법은 훌륭하지만 완벽해지기 위해 해결해야 할 문제가 남아있음
     * Vinay Prasad MD를 팔로우하며, 그는 많은 암 관련 연구와 방법론에 대해 연구함. 많은 암 치료 연구가 심각한 결함을 가지고 있음
          + 작은 샘플 크기로 인해 긍정적인 효과의 신뢰도가 낮음
          + 전체 생존율을 고려하지 않는 연구가 있음
          + 표준 치료와 비교하지 않는 연구가 있음
          + 자가 선택을 허용하는 연구가 있음
     * Prasad는 암 및 기타 치료와 관련된 최신 데이터 기반 결과의 훌륭한 출처임
     * 난소암에 대한 유사한 연구가 있는지 궁금함. 가족 구성원이 생의 마지막을 맞이하고 있음
     * 아내가 2기(B?) 삼중 음성 유방암(TNBC)을 앓고 있으며, Keytruda(pembrolizumab)를 21일마다 한 번씩 투여받고 있음. TNBC에 대해 화학 요법 없이 pembrolizumab만 사용하는 전체 시험이 진행 중임. 화학 요법 없이 치료할 수 있는 암이 생길 가능성이 있음
     * 훌륭한 기사임. 면역 요법 연구로 두 개의 노벨상이 수여될 것으로 보임. 무엇보다도 면역 요법이 여동생의 4기 암을 구했음
     * 아버지가 70대 중반에 방광암을 앓고 있으며, 면역 요법을 시도하고 있음. 몇 년 더 살기를 바라지만, 실패할 가능성도 이해하고 있음. 의료 발전이 여전히 훌륭하게 진행되고 있음
     * 현재 종양학에서 가장 큰 질문은 이 접근법이 고형 종양에도 사용할 수 있는지 여부임. 편평 세포 암종으로 죽어가고 있으며, 최근 임상 시험 약물이 더 이상 효과가 없음
          + TScan의 맞춤형 자가 TCR-T 세포 요법 시험이 유망해 보이지만, 많은 유망한 치료법이 초기 시험에서 실패함
          + BGB-A3055와 Tislelizumab 면역 요법 시험에 참여할 기회를 얻었음. 그러나 이전에 받은 면역 요법으로 인해 일부 시험에 참여할 자격이 없을 수 있음
          + FDA 승인까지 5년이 걸렸다는 것은 너무 오래 걸린 것임. 치명적인 진단을 받은 사람들에게는 몇 개월 내에 이루어져야 함
     * CAR-T가 비고형 종양에서 성공한 이후 고형 종양에 효과적인 면역 요법을 개발하는 데 왜 이렇게 오래 걸렸는지 궁금함
"
"https://news.hada.io/topic?id=15900","예상치 못한 PhD Acknowledgements의 시적 아름다움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  예상치 못한 PhD Acknowledgements의 시적 아름다움

예상치 못한 박사 논문의 감사의 글의 시적 아름다움

     * 호주 국립대학교 과학대학에서 박사 연구를 마친 사람이라면, Tabitha Carvan이 당신의 논문의 일부를 읽었을 가능성이 높음
     * Carvan은 과학에서 일종의 시를 발견함

  박사 과정의 도전

     * 박사 과정은 매우 어려운 과제이며, 많은 사람들이 이 과정을 통해 변화를 경험함
     * 감사의 글은 논문에서 가장 감정이 담긴 부분으로, 저자가 다른 곳에서 표현할 수 없었던 감정을 담고 있음

  감사의 글의 구조

     * 대부분의 감사의 글은 공식적이고 형식적이지만, 그 뒤에는 각자의 이야기가 숨겨져 있음
     * 감사의 글은 저자가 논문을 작성하면서 겪은 감정과 경험을 표현하는 공간임

  감사의 글의 중요성

     * 감사의 글은 논문의 다른 부분과 달리 감정이 폭발하는 공간으로, 저자가 가장 중요한 말을 전하려는 순간임
     * 많은 박사 과정 학생들이 감사의 글을 통해 그들의 연구와 삶에 도움을 준 사람들에게 감사를 표함

  감사의 글의 다양한 표현

     * 감사의 글에는 가족, 친구, 동료, 지도 교수 등 다양한 사람들에게 감사를 표하는 내용이 포함됨
     * 때로는 연구와 관련 없는 사람이나 사물에게도 감사를 표함

  감사의 글의 변화

     * 1980년대 이전의 감사의 글은 주로 공식적이고 비즈니스적인 감사의 표현이었음
     * 최근의 감사의 글은 더 개인적이고 감정적인 표현이 많아짐

  감사의 글의 공통점

     * ""당신 없이는 할 수 없었을 것입니다""라는 표현이 자주 등장하며, 이는 진심으로 느껴짐
     * 감사의 글은 저자가 박사 과정을 마치면서 느낀 감정과 경험을 담고 있음

GN⁺의 정리

     * 이 기사는 박사 논문의 감사의 글이 단순한 형식적 표현이 아니라, 저자의 진심과 감정이 담긴 중요한 부분임을 강조함
     * 감사의 글을 통해 저자가 연구를 진행하면서 겪은 어려움과 이를 극복하게 도와준 사람들에 대한 감사를 표현함
     * 이 기사는 박사 과정의 도전과 그 과정에서의 인간적인 경험을 잘 보여줌
     * 유사한 기능을 가진 다른 프로젝트로는 연구자들의 경험을 공유하는 다양한 학술 블로그나 포럼이 있음

        Hacker News 의견

     * 자신의 석사 논문에서 감사의 말을 인용하는 것이 다소 무례할 수 있지만, 작성자가 자랑스러워하는 부분임
          + ""이 논문은 과학과 이 논문을 위해 희생된 두 대의 노트북의 기억에 바칩니다. Dell Studio 1555와 Asus Zenbook UXA1에게: '그 좋은 밤에 순순히 가지 마십시오. 백라이트의 죽음에 맞서 분노하십시오.'""
     * 현재 배우자가 된 사람이 논문을 교정해 주었고, 감사의 말을 추가했으나 문장 단편이 되어버린 실수임
     * PhD 후보자가 트윗에서 남편과 아이를 잃은 후에도 학업을 계속 이어가고 있는 이야기를 발견함
          + ""우디와 제이슨 토마스에게. 지역 우주에서 첫 은하까지, 우리의 짧은 시대 동안 우주의 가장 밝은 순간들이 있었습니다. 그 빛은 꺼지지 않습니다.""
     * MIT와 Harvard의 생물학 논문 방어에서 감사의 말이 예술 형식으로 표현됨
          + 친구와 가족, 연구실 동료, 취미와 커뮤니티, 연구와 삶의 시련과 고난에 대한 이야기들이 포함됨
     * Bob Atkey의 논문에서 ""이 작업은 오웰이라는 개에게 바칩니다. 오웰은 좋은 개였고 0, 1, 그리고 많은 것의 차이를 잘 알고 있었습니다.""라는 감사의 말이 인상적임
     * Harvard의 대부분의 PhD 프로그램은 DASH에 제출되며, 지난 10년간의 비공개 논문을 읽을 수 있음
     * PhD 지도 교수를 선택할 때 최근 졸업생들의 감사의 말을 읽어보는 것이 유용함
     * ""집안일을 대신 해줘서 고마워요. 제가 실험실 일로 바쁠 때마다 Roomba를 산 이유를 알겠어요.""라는 감사의 말과 논문 제목의 재미있는 대조
     * PhD 감사의 말 작성이 스트레스였으며, 다른 논문에서 ""여기 내 가장 엄격한 감사를 찾으십시오.""라는 간단한 표현을 보고 감명을 받아 따라함
     * 감사의 말이 논문의 가장 많이 읽히는 부분이라는 농담이 있었음
"
"https://news.hada.io/topic?id=15904","우리는 왜 벡터 검색을 위해 2차원 벡터를 저장하게 되었나?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   우리는 왜 벡터 검색을 위해 2차원 벡터를 저장하게 되었나?

문제점

     * 시맨틱/자연어 검색, RAG를 위해서는 벡터 임베딩을 해야함
     * 대부분의 임베딩 모델은 입력 길이 제한이 있음
          + 적당한 입력 길이를 맞추는 것이 검색 품질과 연결됨
          + 입력 길이 제한으로 대부분 단락을 분리하여 저장하게 됨
     * 원문을 분리하여 저장함으로 하나의 문서가 여러개의 문서로 분리됨
          + 대부분의 문서는 메타 데이터, 장문의 다른 필드 등 텍스트 데이터 하나로 구성되어 있지 않음
          + 분리된 데이터를 저장하기 위해서는 분리된 원문과 부가 정보를 중복 저장하거나 컬렉션(혹은 테이블)을 분리하여 저장해야 함
               o 중복 저장은 저장 용량의 증가로 비효율이 발생하고 분리된 컬렉션은 검색 과정에서 조인, 점수 계산, 문서수 계산 등 복잡도를 증가시킴
          + 이러한 방식은 대부분의 벡터 저장소를 사용함에 따라 자주 마주하게 되는 문제임

해결

     * 원문을 분리하지 않을 다른 방법을 찾음
     * 임베딩 데이터가 저장되는 필드를 2차원 데이터를 입력 받을 수 있도록 DB와 관련 라이브러리를 수정함
          + 이는 원문이 분리되지 않고 하나 이상으로 분리된 문서별 가변 길이를 가지는 벡터 데이터를 저장할 수 있게 됨
          + 이 방법으로 원문과 분리된 벡터 데이터가 컬렉션 분리 없이 공존할 수 있게 되며 데이터 관리, 쿼리 등이 간결해짐
"
"https://news.hada.io/topic?id=15962","Ask HN: 소프트웨어 엔지니어를 그만둔 분들, 어떤 분야로 전환하셨나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask HN: 소프트웨어 엔지니어를 그만둔 분들, 어떤 분야로 전환하셨나요?

     * 13년 SWE로 스타트업/대기업/황금수갑 상태 등으로 일해본 뒤 이제 이걸 끝내야할 것 같음
     * 현재는 계약직으로 유연하게 일하며 회사를 만들려하고 있지만, 일이 잘 안풀리면 어떻게 될지 정말 모르겠음. 생계를 위해 코딩하는 회사에서 9-5로 돌아가고 싶은 생각이 전혀 없음
     * 여러 곳에서 시니어/스태프로 일해 왔는데, 솔직히 더 이상 소프트웨어의 구조에 대해 논쟁하는 것을 즐기지 않고, 성격에 지쳤고, 업계의 유아기화(솔직히 부끄러움)에 지쳤지만, 무엇보다도 예전만큼 코딩을 즐기지 않음
     * 하지만 아이가 생기고, 정규직으로 일해야 한다면 어떤 대안을 찾아야 할지 모르겠음. 나는 사람과 전략에 강점이 있고, 더 열심히 일하고 수입 한도가 무제한인 기술 회사에서 영업을 고려중. 다른 사람들의 이야기나 팁을 듣고 싶음

해커뉴스에 올라온 여러 답변들 모음

     * 난 떠나지 않고, 여전히 회사에 다니고 있음
          + 하지만, 하루를 일 안하기(주 4일)로 하고 월급을 희생함
          + 정말 심한 번아웃은 일을 싫어하게 만들고, 코딩을 즐기지 못하게 만들고, 기술에 대한 자신감을 잃게 만들고, 외부 생활 없이 일하는 노예처럼 느껴지게 함
          + 단 하루를 버린 것이 정신 건강에 가장 큰 도움이 되었고, 다시는 주 32시간 이상 일하지 않을 것 같음. 물론 주 5일 근무도 다시는 하지 않을 것
          + 하지만 동시에 인생에 큰 변화를 가져왔음
               o 마지막 남은 소셜 미디어의 보루였던 Reddit은 극단적인 정치 신조와 독성 때문에 삭제
               o 유일한 '소셜' 미디어로 해커뉴스로 전환했고, 모든 디바이스에서 글로벌 및 지역 뉴스 사이트도 차단
               o 비싼 집에서 이사했고, 게임을 포기함으로써 스트레스를 해소할 수 있는 강력한 방법이 사라졌다는 것을 깨닫고 다시 게임에 빠져들었음
          + 지금은 주말에 다시 사이드 프로젝트로 열정적으로 일하고 있는데, 하루가 더 늘어난다는 게 정말 좋음. 그리고 나는 대체로 행복함
          + 휴대폰 사용 시간이 지난 1년간 평균 5~6시간에서 지난달에는 하루 평균 2시간 이하로 줄었음
          + 또한 방 안의 코끼리인 'AI'에 대한 내 생각도 많이 바뀌었음
               o 정말 과대 포장되어 있어서 저는 GitHub CoPilot 사용을 완전히 중단하고 대부분 LLM을 얕은 표면 검색 엔진으로만 사용하고 있음
               o 직업에 대해 걱정하지 말 것. 조만간 그렇게 될 것 같지도 않고 10배의 엔지니어가 되지도 않을 것
               o 아마도 똑똑한 사람은 1.5배의 개발자가 될 것이고 LLM에 너무 의존하는 사람은 0.5배의 개발자가 될 것이므로 균형이 맞을 것
     * 20년 정도 기술 업계에 종사한 내 조언은 가능하다면 완전히 리셋할 수 있을 만큼 긴 안식년을 가진 다음 다시 평가해 보라는 것
          + 여행도 하고, 독서도 하고, 새로운 것을 시도하고, 개인적인 프로젝트도 하고, 잠시 동안 아무것도 하지 말아 보기
          + 나는 2년 전에 안식년을 시작했는데, 처음에는 다시는 기술 분야에서 일하고 싶지 않다는 확신이 들었음. 돌이켜보면 적어도 부분적으로는 번아웃 이었던 듯
          + 다시 생각하기까지 1년이 넘게 걸렸고 지금은 기술직으로 돌아갈 것이라고 확신하지만, 앞으로 어떤 역할을 맡든 인생에 대한 관점은 매우 달라질 것
          + 일상을 완전히 바꾸고 진정한 휴식을 취하는 것은 엄청나게 가치 있는 일
          + 이를 실현하기 위해 주식도 팔았는데, 내가 한 최고의 결정 중 하나였음
     * 나는 레이저 커터, 프린터, 열 프레스 등 생산 장비를 구입하여 집에서 실제 제품을 제조하고 있음
          + 처음부터 끝까지 제품을 만들고, 고객에게 직접 판매하고, 노동의 결실을 모두 가져가는 등 처음 코딩의 매력에 빠졌을 때보다 더 코딩에 가까워진 느낌
     * 내가 드릴 수 있는 가장 좋은 조언은 ""무언가로부터 도망치는 것""은 ""무언가를 향해 달려가는 것이 아니라는 것""
          + ""달려갈 수 있는 무언가""를 찾아야 함
     * 안식년을 가지라는 제안을 받거나 지친 기분을 느끼는 분들을 꽤 많이 봤음
          + 거의 3년의 안식년을 보낸 후에도 여전히 내가 무엇을 하고 있는지 전혀 파악하지 못하고 있는 내 경험을 소개함
          + 내가 좋아한다고 생각했던 회사에 다니고 있었는데, 지분 문제로 의견 충돌이 있었고, 마케팅 매니저가 갑자기 바뀌고, 창업자와 친했던 다른 리드 엔지니어가 코드 품질 문제를 일으켜서 지쳐서 어느 날 그냥 엿 먹으라고 하고 떠났음
          + 지난 3년 동안 다양한 소규모 프로젝트와 스타트업을 시작했지만, 마지막 스타트업과 같은 열정을 갖지 못했고 그 이후로 무언가에 정착하지 못했으며, 내가 아는 것은 여전히 가끔 코딩을 즐기는 것뿐이며 다시는 다른 사람을 위해 일하고 싶지 않다는 것
          + 나는 여러 가지 면에서 지쳐 있고, 지금 해야 할 일이 너무 많은 것 같음
          + 그래서 안식년을 갖는다면 제가 하지 않았던 바쁘고, 여유롭고, 동기부여가 될 수 있는 구체적인 계획을 세우라고 조언하고 싶음
          + 나는 그냥 아무 일이나 하고, 흥미를 느낀 코딩 프로젝트, 리노베이션, 작은 과수원, 투자 등을 했는데 외형적으로는 성공한 것처럼 보이지만 더 나아간 것 같지는 않음
          + 하지만 내가 다니던 회사에서 좌절감을 느꼈다면 아마 절벽에서 떨어졌을 것
     * 실현하기 어려운 간단한 조언: 깊이 존경하고 존경하는 사람들과 함께 일하세요
          + 기술적인 능력은 없지만 영업과 같은 다른 분야에서 천재적인 재능을 가진 관리자를 찾아볼 것. 많은 것을 배울 수 있고 문화의 차이도 놀라울 것
          + 내 경험상 가장 똑똑한 사람들은 친절하고 자신감 있는 경향이 있음
          + 특히 기술 업계에서는 까칠함과 똑똑함이 서로 상반된다는 가정이 있었음 하지만 대부분의 경우 그렇지 않음. 여러분은 자신의 기술로 조직에 엄청난 가치를 제공할 수 있음
     * 고려할 수 있는 옵션:
          + 여유가 있다면 상당한 기간(6~12개월)의 안식년을 갖는 것
          + 신뢰할 수 있는 사람(예: 과거 동료)을 만나 자신의 상황을 솔직하게 털어놓기
          + 역할 전환. 인력 및 전략이 제품 관리로 이어질 수 있음(하지만 PM 역할에는 나름의 좌절감이 따름)
          + 멘토나 코치를 찾아 자신을 이끄는 원동력을 찾기. 그것은 당신이 남겨둔 업무 더미 어딘가에 숨겨져 있을 것
     * 소프트웨어 개발만큼 일관성 있는 좋은 보상을 얻을 수 있는 일은 없음
          + 내 조언은 재택근무를 하면서 하루에 몇 장의 티켓을 끊을 수 있는 기술직에 취업하라는 것
          + 아이가 어릴 때 아이를 보고 휴가를 보낼 수 있는 유연성을 확보할 수 있고, 주 4일 근무를 제공하는 곳도 있지만 여전히 6자리 숫자(10만불, 1.4억)를 집으로 가져감
          + 영업 엔지니어링 또는 고객 성공은 흥미로운 분야이지만 일반적으로 SWE에 비해 수입이 적고 유연성이 떨어짐
     * SWE에서 프로젝트 관리로 옮겼음
          + 비슷한 직급의 SWE보다 훨씬 적은 돈을 벌지만, 더 유연하게 일할 수 있고 평생 JIRA 티켓을 끊는 사람으로 일할 때보다 덜 힘들다고 느낌
          + 모든 사람에게 적합한 것은 아니지만, 변화를 원하고 기술을 완전히 떠나고 싶지 않다면 다른 선택지가 있음
     * 여기서 한 가지 고려할 만한 점은 소프트웨어 업계가 엉터리 관리, 바퀴 재발명, 피터팬 신드롬의 소굴인 것은 사실이지만, 소프트웨어 자체와 이를 작성하는 능력은 현대 사회에서 가장 큰 영향력을 제공하는 요소 중 하나라는 것
          + 의미 있는 일을 하는 사람들을 위해 소프트웨어를 작성하는 역할이나 기회를 찾는다면 엄청난 가치를 제공할 수 있으며, 훌륭한 기술자는 기본적으로 이런 종류의 일에 익숙하지 않은 사람들에게 마법사 같은 존재가 될 수 있음
          + 현재 내 역할 중 과학자들과 직접 협력하여 복잡한 문제를 해결하는 데 도움을 주는 부분은 내 커리어에서 가장 흥미롭고 보람 있는 일
     * 기술 분야를 떠나는 것이 반드시 문제의 해결책은 아님
          + 신체적, 정신적으로 지속 가능하고 실행 가능한 방식으로 경력을 재구성하는 것은 모든 사람이 인생에서 겪는 도전
          + 젊을 때는 시간은 내 편이지만 자원은 내 편이 아니지만, 나이가 들면 최소한 사람, 돈, 기술/지식 등의 자원을 통합하고 축적하려고 노력했다고 가정하면 그 반대
          + 대부분의 사람들이 IT를 떠나지 않는 이유는 실제로 도약에 대한 동기를 부여할 만큼 열정이 없거나 충분히 노력하지 않아서 자신이 가장 잘 아는 일을 계속하는 것 외에는 실질적인 선택의 여지가 없기 때문이라고 생각
          + 정직하게 노력하는 한 어떤 일을 하든 상관없음
          + 충분히 오래 하다 보면 (정신과 의사에게 돈을 주는 대신) 업무 스트레스를 해소하는 데 도움이 될 수 있고, 충분히 잘하게 되면 본업을 더 이상 견딜 수 없을 때 돌아갈 수 있는 대안이 자연스럽게 생기니까
          + 나는 IT에서 정신 건강, 지속 가능성, 실제로 변화를 위해 사람들을 돕는 것과 관련된 열정이 있는 일로 옮겼음
          + 쉽지 않은 일이고 아직 거기까지 도달하지는 못했지만, 일찍 시작했기 때문에 너무 고통스럽지 않고(나도 전직이 처음은 아님) 사람들이 '문제'라고 생각하는 것들을 극복할 수 있을 만큼 의욕이 넘침
          + 가능성을 높이기 위해 어떤 일을 할 의향이 있나요? 기존의 기술과 지식을 활용하여 교육을 받거나 다른 직업을 시도? 더 나은 미래를 위해 교육을 받거나 IT 분야에서 습득한 기술을 바탕으로 제품이나 서비스를 개발하는 건?

   저는 개발 그만두고 와인샵을 하는 중 ^^

   같이 일하던 동료분이 아파트 관리소장으로 취업하신 사례가 있었네요.

   저의 경우 의도치 않게 몇 년을 SW 개발이 아닌 전혀 다른 업무에 종사했었는데, 그러다 최근에 의도치 않게 다시 SW 개발을 하게 되면서 다시 예전의 초심을 되찾게 된 경우입니다. 뭔가 비유가 좀 이상할 수 있지만 커리어나 인생이나 필연적으로 직류가 아닌 교류같은 흐름이 자연스럽네봐요. 번아웃이나 SW 개발을 더이상 하고 싶지 않을 땐 과감하게 멀어져서 다른 것에 몰두해보는 것도 정말 좋은 것 같습니다.

   몇년 지나서 다시 SW를 하다보니 물론 손에 잘 안익히긴 하지만, 생각은 좀 더 유연해지고 예전과 다른 각도에서 코드나 전체적인 흐름을 보게 된 스스로를 보게 됩니다. 특히 개발자 관점으로만 보다가 이제서야 사용자의 마음도 좀 더 이해하고 더 깊이 고민하게 되는 것 같아요. 실력과 상관없이 예전보다 더 즐겁게 더 재밌게 프로그래밍 할 수 있어 좋습니다. ㅎㅎ

   좋은 경험 공유 감사합니다

  황급수갑이 뭔가 했는데 아래와 같다고 chatgpt가 알려주네요

   ""황금수갑""은 일종의 메타포로, 회사가 직원에게 매우 좋은 급여나 혜택, 스톡옵션 등을 제공하여 직원이 다른 회사로 이직하는 것을 어렵게 만드는 상황을 의미합니다. 이 문장에서 말하는 ""the golden handcuffs""는 바로 이런 상황을 설명하는 표현입니다.

   해석하면 다음과 같습니다:

   ""스타트업과 더 큰 회사들에서 소프트웨어 엔지니어로 13년간 일하고, 황금수갑 같은 상황에서도 일해온 후, 이제는 내가 마침내 끝났다고 말할 수 있게 되었다.""

   즉, 좋은 보상이나 혜택 때문에 지금까지 계속 일해왔지만, 이제는 그 모든 것에서 벗어나겠다는 뜻입니다.

   ""나를 돈으로 매수할 수 있다고 생각한겐가?!"" 라고 하기엔 너무 큰 액수였다.. 짤이 생각나네요 ㅋㅋ
"
"https://news.hada.io/topic?id=15874","Andrej Karpathy, AI+교육 회사 EurekaLabs를 창업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Andrej Karpathy, AI+교육 회사 EurekaLabs를 창업

     * Eureka Labs는 AI 기반의 새로운 형태의 학교를 만드는 AI+교육 회사임
     * 물리학을 배울 때 파인만과 함께 고품질 과정을 진행하며 그의 안내를 받는 이상적인 학습 경험을 상상해 볼 수 있음
     * 하지만 열정적이고 훌륭한 교수법을 가진 인내심 많고 모든 언어에 능통한 전문가는 매우 희소하여 80억 인구 모두에게 개인 지도를 제공하기 어려움
     * 최근 생성 AI의 발전으로 이러한 학습 경험이 가능해졌음
     * 교사는 여전히 교육 자료를 설계하지만 AI 교육 어시스턴트의 지원과 확장을 통해 학생들을 안내하는 데 최적화됨
     * 이러한 교사와 AI의 공생 관계는 공통 플랫폼에서 전체 교육과정을 운영할 수 있음
     * 성공한다면 누구나 쉽게 모든 것을 배울 수 있게 되어 교육의 도달 범위(많은 사람들이 무언가를 배우는 것)와 정도(한 사람이 많은 주제를 배우는 것)가 확장될 것임

Eureka Labs의 첫 제품

     * Eureka Labs의 첫 제품은 세계 최고의 AI 과정인 LLM101n이 될 것임
     * LLM101n은 학부 수준의 수업으로, 학생들이 AI 교육 어시스턴트와 유사한 자신만의 AI를 훈련시키도록 안내함
     * 교육 자료는 온라인에서 제공되지만 함께 수업을 듣는 디지털 및 물리적 그룹 운영도 계획하고 있음

창업자 소개

     * Andrej Karpathy는 지난 20년 동안 AI와 교육에 대한 열정을 가져왔음
     * 교육에 대한 관심은 루빅스 큐브에 대한 YouTube 튜토리얼에서부터 Stanford에서 CS231n을 시작하고 최근 Zero-to-Hero AI 시리즈까지 이어짐
     * AI 분야에서는 Stanford에서의 학문적 연구부터 Tesla에서의 실제 제품, OpenAI에서의 AGI 연구까지 경험했음
     * 이제까지 두 분야를 결합한 작업은 모두 ""진짜 일""의 사이드 퀘스트로서 시간제였지만, 이제 전문적이고 전임으로 뛰어들어 훌륭한 것을 만들게 되어 매우 기쁨

        Hacker News 의견

     * ""우리의 첫 번째 제품은 세계 최고의 AI 강좌인 LLM101n이 될 것임""
          + 실제 목표 청중은 슈퍼 인텔리전스의 일환으로 AI 에이전트임
          + 물리학의 경우 Feynman과 함께 고품질 강좌 자료를 공부하는 것을 상상할 수 있음
          + 최근 생성형 AI의 발전으로 이러한 학습 경험이 실현 가능해 보임
          + Feynman AI를 만들 수 있다면 교육 회사에 신경 쓸 필요가 없음
     * 교육을 혁신하려는 시도는 좋지만, 교육은 혁신 기술에 저항하는 분야임
          + 교육은 매우 전문적이거나 매우 일반적일 수 있지만, 결국 평등해야 함
          + 이 접근 방식이 성공한다면 모든 학교의 교사들이 이를 채택할 수 있을지 의문임
          + 교사 교육, 기술 배포, 부모 적응 등 많은 자원이 필요함
          + 교육 문제 해결의 실제 문제는 의무 교육의 큰 그림에 적용하기 어려움
     * Karpathy는 놀라운 인물임
          + 최고 수준의 기술력과 의사소통 능력을 갖춘 드문 인재임
          + 이 제품을 시도해보고 싶어 매우 기대됨
          + 교육은 확장하기 어려운 분야임
          + ChatGPT는 이미 임시 교육자 역할을 하고 있음
          + 맞춤형 커리큘럼을 가진 목적 지향 제품은 훌륭한 아이디어임
     * X 계정이 없는 사람들을 위한 정보:
          + 웹사이트: https://eurekalabs.ai
          + GitHub: https://github.com/EurekaLabsAI
     * 딸이 AI 교육 대신 인간 교육을 받을 수 있도록 하는 비용이 걱정됨
          + 대부분의 아이들은 특권이 없는 AI 교육을 받을 것 같음
     * AI가 교사를 대체할 수 없는 몇 안 되는 역할 중 하나라고 생각함
          + 자발적인 학습자에게는 AI가 완벽함
          + 대부분의 학습자는 자발적이지 않음
          + 팬데믹 동안 물리적 교사가 없을 때 아이들이 무엇을 선호하는지 보여줌
          + 학교는 교육뿐만 아니라 무료 보육 역할도 함
          + AI는 교사 보조 역할을 할 수 있지만, 교사를 대체할 수 없음
     * AI 강좌를 만들면서 그 지식을 무의미하게 만드는 AI를 만드는 문제를 이해하지 못함
          + AI 언어 교사를 만들면 언어 학습이 무의미해질 수 있음
          + 수학의 경우 AI가 수학을 할 수 있게 되면 인간이 수학을 할 필요가 없어질 수 있음
          + 이러한 문제에 대한 해결책을 찾고 있음
     * 고품질 강좌 자료를 Feynman과 함께 공부하는 아이디어가 좋음
          + Kaczynski와 함께 기하학적 함수 이론을 공부할 수 있음
          + Thomas Midgley Jr와 함께 화학 공학을 공부할 수 있음
          + L Ron Hubbard와 함께 창작 글쓰기를 공부할 수 있음
     * AI를 활용한 소프트웨어를 개발 중임
          + 고등 교육에서 비판적 읽기와 쓰기 능력을 향상시키기 위한 AI 소프트웨어 개발 중임
          + 학생들에게 즉각적이고 고품질의 피드백을 제공하는 것이 목표임
          + AI가 교육과 학습을 재구성할 수 있다고 생각하지만, 이는 느리고 점진적인 과정이 될 것임
          + 맞춤형 학습과 튜터링을 확장하고, 학생들이 어려움을 겪는 영역을 목표로 함
          + 교사들이 시간을 많이 소비하는 작업을 자동화할 수 있음
          + 교육학, AI, 기술에 관심이 있다면 연락해달라고 요청함
"
"https://news.hada.io/topic?id=16003","당뇨병 치료를 스스로 관리하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          당뇨병 치료를 스스로 관리하는 방법

당뇨 치료를 스스로 관리하기

  서론

     * 이 블로그 글은 길지만 읽을 가치가 있음
     * 나는 1형 당뇨병 환자임
     * 췌장이 인슐린을 생산하지 않기 때문에 외부에서 인슐린을 공급해야 함

  당뇨병 관리의 어려움

     * 혈당을 적절한 범위(4-10 mmol/l)로 유지해야 함
     * 인슐린 주사와 음식 섭취 사이에 시간 지연이 있음
     * 혈당을 일정하게 유지하는 것이 중요함
     * 인슐린 주사와 혈당 측정이 불편함
     * 신체 활동, 스트레스, 계절 등 다양한 요인이 혈당에 영향을 미침

  현재의 치료 방법

     * Freestyle Libre 앱을 사용하여 혈당을 모니터링하고 필요할 때 인슐린을 주사함
     * 권장 인슐린 용량을 따르지만, 정확한 용량은 알 수 없음
     * 당뇨병 전문의와 3개월마다 상담하여 치료 계획을 조정함

  인공 췌장과 #WeAreNotWaiting 운동

     * 인공 췌장은 인슐린 펌프와 연속 혈당 모니터를 결합하여 혈당을 자동으로 조절함
     * 공식적으로 승인되지 않았지만, 일부 환자들은 스스로 장치를 해킹하여 사용함
     * Scott Hanselman이 이 운동을 주도하고 있음

  나만의 해결책 찾기

     * 혈당 값을 입력하고 예측을 통해 최적의 인슐린 용량과 식사 시간을 찾는 앱이 필요함
     * 여러 논문을 통해 모델을 찾았지만, 인공 췌장이 없기 때문에 직접적인 도움은 되지 않음
     * SmartCGMS 앱을 발견하고, 이를 활용하여 시뮬레이션을 작성함

  시뮬레이션 구현

     * SmartCGMS 엔진을 사용하여 시뮬레이션을 작성함
     * C# 언어로 간단한 API를 사용하여 인슐린 주사와 음식 섭취를 시뮬레이션함
     * 시뮬레이션 결과를 Google Sheets에 시각화하여 확인함

  유전자 알고리즘을 통한 최적화

     * GeneticSharp 패키지를 사용하여 인슐린 용량을 최적화함
     * 피트니스 함수는 저혈당 및 고혈당 횟수를 최소화하고, 인슐린 용량을 최적화함
     * 유전자 알고리즘을 통해 최적의 인슐린 용량을 찾음

  향후 계획

     * 시뮬레이션을 더 인터랙티브하게 만들어 사용자에게 더 나은 이해를 제공할 계획
     * 나의 혈당 데이터를 사용하여 모델을 개인화할 필요가 있음
     * SmartCGMS 팀과 협력하여 소프트웨어를 개선할 계획

GN⁺의 정리

     * 이 글은 1형 당뇨병 환자가 자신의 치료를 더 잘 관리하기 위해 기술을 활용하는 방법을 설명함
     * 인공 췌장과 같은 기술이 아직 상용화되지 않았지만, 유전자 알고리즘과 시뮬레이션을 통해 최적의 인슐린 용량을 찾을 수 있음
     * 이 글은 당뇨병 환자들에게 더 나은 치료 방법을 제공할 수 있는 가능성을 보여줌
     * 비슷한 기능을 가진 제품으로는 Freestyle Libre와 SmartCGMS가 있음

        Hacker News 의견

     * 미국에서 성인으로 살아가면서 당연하게 여길 수 없는 것들에 대한 의견
          + 의료 전문가들이 항상 최선의 이익을 위해 행동하지 않음
          + 보험 회사가 항상 최선의 이익을 위해 행동하지 않음
          + 의료 전문가들이 항상 정확한 지식을 가지고 있지 않음
          + 합법적으로 섭취할 수 있는 것들이 항상 무해하지 않음
          + 물, 공기, 땅, 벽, 바닥 등의 오염 수준이 항상 안전하지 않음
          + 현재는 건강하다고 알려진 것들이 나중에 건강에 해로울 수 있음
          + 필요한 치료를 감당할 수 있는 경제적 여유가 없음
          + 보호해야 할 산업(의료, 보험, 공공 건강, 정부 등)이 항상 보호하지 않음
     * 당뇨병 전단계 환자의 경험
          + 주치의가 당뇨병 전단계에 대해 무관심함
          + 매 2시간마다 혈당을 측정하고 음식 데이터베이스를 만듦
          + 운동이 혈당에 미치는 영향을 기록함
          + 특정 음식들이 혈당을 급격히 올리거나 중립적임을 발견함
          + 자가 면역 질환을 가진 상태에서 자신의 건강을 스스로 관리함
     * ""The Diabetes Solution"" 책 추천
          + Dr. Bernstein가 자신의 당뇨병을 ""디버깅""한 경험을 공유함
          + 초기 혈당 측정기를 사용하여 데이터를 수집함
          + 의학 자격증을 취득한 후 더 많은 의사들이 그의 연구를 받아들임
     * 영국의 당뇨병 관리 문제
          + NHS 당뇨병 관리의 정치적 문제로 어려움을 겪음
          + 젊은 당뇨병 간호사와 의사들이 기술에 의존하지만 데이터 해석에 어려움을 겪음
          + 기술 회사들이 다른 도구 사용을 허용하지 않아 플랫폼 변경이 빈번함
          + 더 많은 자금 지원이 아닌, 게으른 의료 전문가에 대한 처벌과 반경쟁적 행위에 대한 무제한 벌금이 필요함
     * Loop 소프트웨어 추천
          + Loop가 인슐린 펌프와 CGMS 데이터를 자동으로 수집함
          + Omnipod DASH와 같은 펌프와 호환됨
          + 탄수화물 수동 입력 후 예측 라인을 제공함
          + 인슐린 양을 조절하여 혈당을 유지함
     * 의료 시스템에 대한 비판
          + 대부분의 의사들이 과대평가되고 환자를 건강염려증 환자로 여김
     * Freestyle Libre와 Omnipod Dash 사용 경험
          + Apple Watch를 사용하여 운동 감지와 목표 조정을 자동화함
          + 1년 동안 85%의 혈당 범위 유지에 성공함
     * .NET 개발자들의 도구 사용
          + Winforms를 사용하여 간단하게 구성함
     * T2 당뇨병 관리 경험
          + Metformin과 Trulicity 사용
          + 데이터 기록이 당뇨병 관리에 효과적임
          + 기록을 통해 자기 관리를 유지함
     * 미국에서의 T1 당뇨병 관리 경험
          + Medtronic 670G를 사용하여 ""인공 췌장"" 시스템을 사용함
          + Freestyle Libre 앱을 사용하여 혈당을 모니터링하고 인슐린을 주입함
          + 교정 인자(CF)를 사용하여 혈당을 조절함
"
"https://news.hada.io/topic?id=15871","Polygraph(거짓말 탐지기)의 환상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Polygraph(거짓말 탐지기)의 환상

미국의 폴리그래프 환상이 사실과 허구의 관계에 대해 말하는 것

  회고와 폴리그래프 검사

     * 저자는 첫 번째 책 출간 몇 주 전에 폴리그래프 검사를 받음
     * 연방 건물에서 낯선 검사관과의 만남
     * 정부의 지침에 따라 폴리그래프에 대한 사전 조사를 하지 말라는 요구

  폴리그래프의 역사

     * 폴리그래프의 발명자로 알려진 존 라슨의 이야기
     * 라슨은 자신의 기계를 ""감정 기록기""라고 불렀으며, 거짓말을 탐지한다고 믿지 않았음
     * 폴리그래프는 기존 기기의 조합으로 탄생했으며, 라슨의 제자이자 경쟁자인 레오나르드 킬러가 상업화를 위해 ""폴리그래프""라는 용어를 만듦

  폴리그래프와 언어의 진실

     * 폴리그래프는 ""거짓말 탐지기""를 의미하지 않음
     * 언어와 진실은 고정적이지 않으며, 시간이 지나면서 변화함
     * 폴리그래프는 여러 가지 의미를 가질 수 있음

  저자의 폴리그래프 검사 경험

     * 저자는 정부 직업을 구하기 위해 폴리그래프 검사를 받음
     * 검사 과정에서의 불편함과 불신
     * 검사관 케빈과의 대화에서 느낀 불안감과 혼란

  폴리그래프와 회고록의 유사성

     * 폴리그래프는 진실을 찾는 것이 아니라 진실을 만들어냄
     * 저자는 자신의 과거 약물 사용에 대해 거짓말을 하면서도 점차 그 거짓말을 진실로 믿게 됨
     * 회고록도 정확성보다는 좋은 이야기를 전달하는 것이 목적

  폴리그래프의 신뢰성 문제

     * 폴리그래프의 정확성에 대한 과학적 증거 부족
     * 독립 연구에 따르면 폴리그래프 검사는 동전 던지기와 비슷한 정확성을 가짐
     * 미국 심리학회와 미국 대법원 등은 폴리그래프를 신뢰할 수 없다고 판단

  폴리그래프의 상징적 의미

     * 폴리그래프는 국가 권력의 상징으로 사용됨
     * 고문과 유사한 방식으로 자백을 강요하는 도구로 사용됨
     * 자백과 진실의 혼동이 폴리그래프의 생존을 가능하게 함

GN⁺의 정리

     * 이 글은 폴리그래프가 어떻게 진실을 탐지하는 기계로서의 신화를 형성했는지 설명함
     * 폴리그래프의 역사와 그 신뢰성 문제를 다루며, 회고록과의 유사성을 강조함
     * 폴리그래프가 국가 권력의 상징으로 사용되는 방식과 그로 인한 문제점을 지적함
     * 이 글은 폴리그래프의 신뢰성에 대한 비판적 시각을 제공하며, 독자들에게 진실과 허구의 경계에 대해 생각해보게 함

        Hacker News 의견

     * DARPA 계약자와 일했던 경험에서, 고위 보안 승인을 받기 위해서는 거짓말 탐지기 검사를 받아야 함
          + 거짓말 탐지기는 ""가짜""라고 배웠지만, 실제로는 인터뷰어가 피검사자를 설득하는 도구로 사용됨
          + 아버지가 보안 승인을 받았을 때, 인터뷰어에게 어머니에게도 말하지 않은 것을 고백했음
     * 거짓말 탐지기가 심장 문제를 발견해준 경험
          + 인터뷰어가 심장 부정맥을 의심해 의사에게 가보라고 권유했고, 실제로 문제가 있었음
     * 거짓말 탐지기가 고백을 유도하는 데 유용하다는 의견
          + 거짓 기억을 만들 수 있다는 점에서 문제가 있음
     * 19세에 직장을 유지하기 위해 거짓말 탐지기 검사를 받아야 했던 경험
          + 동료들과 함께 검사를 받았고, 모두 무사히 통과했음
          + 나중에 도둑이 다른 근무 시간대에 있었던 사람으로 밝혀짐
     * Moe가 거짓말 탐지기 검사를 받는 장면을 인용한 유머
     * Wikipedia 첫 문장 인용: 거짓말 탐지기는 여러 생리적 지표를 측정하는 장치임
     * 거짓말 탐지기의 가장 큰 문제는 검사를 거부하면 유죄로 간주되는 점
          + 큰 절도 사건에서 FBI가 모든 용의자에게 거짓말 탐지기를 사용했음
          + 실제 범인은 그곳에서 일하지 않는 사람이었음
     * ""NYPD가 토끼를 잡는 방법""이라는 농담 인용: 고문을 통해 거짓 자백을 유도하는 상황을 풍자함
     * 법원이 전문가의 문서에 의존하는 문제
          + 판사들은 공개적으로 틀리는 것을 두려워해 전문가의 의견에 의존함
     * Dexter에서의 '혈흔 분석'이 비현실적으로 보였지만, 거짓말 탐지기는 실제로 사용됨
          + 영화 속 설정이 실제로 존재하는 경우가 많음
"
"https://news.hada.io/topic?id=15891","스크롤 휠이 있는 TinyPod – Apple Watch 케이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  스크롤 휠이 있는 TinyPod – Apple Watch 케이스

     * tinyPod 소개
          + tinyPod는 다양한 기능을 제공하는 작은 기기임
          + 음악, 메시지, 메일, 날씨, 뉴스, 음성 메모, 사진, 캘린더, 지도, 계산기, 타이머, 팟캐스트, 오디오북, Siri 등을 지원함
     * 작지만 강력함
          + 빠르고 쉬운 자기 충전
               o Apple Watch 자기 충전 케이블을 사용하여 간편하게 충전 가능함
          + 하루 종일 지속되는 배터리
               o 손목 감지 기능을 끄면 배터리 수명이 더 길어짐
     * 다양한 기능
          + 전화 기능
          + 음악 플레이어
          + 인터넷 통신 기능
          + Apple Pay 및 Name Drop 지원
               o 전화기처럼 결제 및 연락처 공유 가능함
          + AirPods와의 완벽한 호환성
               o 32GB 저장 공간으로 음악, 팟캐스트, 오디오북을 다운로드하여 오프라인에서도 즐길 수 있음
     * tinyPod lite
          + 스크롤 휠이 없는 간편한 모델
          + 내구성이 뛰어나고 유연한 케이스 제공
          + 가격: $29.99
     * 모델 선택
          + tinyPod: $79.99
          + tinyPod lite: $29.99
          + Apple Watch 크기: 41/40 mm, 45/44 mm, 49 mm (Ultra)
          + 호환성: Series 9, 8, 7, SE, 6, 5, 4
     * 구매 및 배송
          + 여름에 배송 시작
     * GN⁺의 정리
          + tinyPod는 Apple Watch와 호환되는 다기능 기기로, 음악 재생, 메시지, 인터넷 통신 등 다양한 기능을 제공함
          + 빠르고 쉬운 충전 방식과 긴 배터리 수명으로 사용자 편의성을 높임
          + Apple Pay 및 Name Drop 기능을 통해 결제와 연락처 공유가 가능함
          + AirPods와의 호환성으로 음악 감상에 최적화된 기기임
          + 비슷한 기능을 가진 제품으로는 Apple Watch와 iPod이 있음

        Hacker News 의견

     * 이 제품을 매우 좋아함. 실용적이지 않거나 틈새 아이디어라는 의견이 있을 수 있지만, 기계적 연결을 구현한 점이 마음에 듦
     * 모든 하드웨어가 대규모 판매를 목표로 할 필요는 없으며, 때로는 이런 틈새 하드웨어도 괜찮다고 생각함
     * 이 웹사이트는 인상적임. Apple보다 더 Apple 같음
          + 이런 페이지는 보통 스토리보드로 시작해 디자인 도구로 제작 후 코드가 생성되는지 궁금함
          + 순수 CSS로 놀라운 작업을 하지만, 도구 없이 이 정도 수준은 어렵다고 생각함
     * iPod Nano를 시계로 사용하던 시절에서 Apple Watch를 iPod Nano로 사용하는 시대로 변한 것이 재미있음
     * TinyPod 개념을 좋아함. 최근 스마트폰 크기가 너무 커져 주머니에 맞지 않음
          + 작은 화면이 필요한 틈새 시장이 존재한다고 생각함
     * Apple Watch를 사용해 화면에서 벗어나려 했지만, 자동차와의 연결 문제로 불편함
          + 일반 블루투스와 핸즈프리 기능이 있었다면 iPhone을 버렸을 것임
     * 이 제품을 좋아하지만, Apple Watch를 전화기로 사용하는 데 여러 문제가 있었음
          + 전화 수신 시 스피커폰으로 바로 받거나, AirPods 연결 문제로 불편함
          + notes.app가 없어 불편함
          + 메시지 기능이 불편하며, 특히 비영어권 사용자에게 문제임
          + 친구들이 놀릴 수 있음
          + 기술 시계를 착용하는 것이 약간 불편함
          + iPhone 없이 업데이트가 어려움
          + Siri가 필요하지만, 사용하기 어려움
          + Wi-Fi와 셀룰러 전환이 원활하지 않음
          + Family Setup을 통해 iPhone 없이도 전화 수신 가능함
     * 시계에 고리를 달고 체인을 판매하면 포켓 워치가 될 것임
     * 일본에서 Infobar '캔디바' 폰을 재현한 Apple Watch 케이스가 있음
          + 버튼은 장식용임
     * Apple 제품의 'ipodisation' 현상이 있음
     * Apple Watch 배터리 교체를 마스터한 후, 오래된 모델을 재활용하는 좋은 해결책이라고 생각함
"
"https://news.hada.io/topic?id=15963","Rust의 Pin에 대해서 알아보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Rust의 Pin에 대해서 알아보기

  Pin

     * Pin 타입과 pinning 개념은 Rust 비동기 생태계의 기초적인 구성 요소임
     * 그러나 Pin은 접근하기 어렵고 오해받기 쉬운 요소 중 하나임
     * 이 글은 Pin이 무엇을 달성하는지, 어떻게 생겨났는지, 그리고 현재 Pin의 문제점이 무엇인지 설명함

  Requirements

     * 비동기 함수에서 참조를 지원하기 위해 Future 내부에 참조를 저장해야 했음
     * 문제는 이러한 참조가 자기 참조 일 수 있다는 것임
     * 예시 코드:
async fn foo<'a>(z: &'a mut i32) { ... }
async fn bar(x: i32, y: i32) -> i32 {
    let mut z = x + y;
    foo(&mut z).await;
    z
}

     * Bar의 내부 상태는 다음과 같음:
enum Bar {
    Start { x: i32, y: i32 },
    FirstAwait { z: i32, foo: Foo<'?> },
    Complete,
}

     * Pin의 목표는 안전하게 자기 참조 타입을 조작하는 것임

  Non-solutions: move constructors and offset pointers

     * 이동 생성자와 오프셋 포인터는 Rust에서 작동하지 않음
     * 이동 생성자는 이동 시 포인터를 수정하지만, Rust에서는 불가능함
     * 오프셋 포인터는 컴파일 시 참조가 자기 참조인지 아닌지 알 수 없기 때문에 작동하지 않음

  The “pinned typestate”

     * 객체가 항상 이동 불가능한 것이 아니라 특정 시점부터 이동 불가능해야 함
     * Ralf Jung의 모델에서는 객체가 ""소유됨"" 상태에서 ""공유됨"" 상태로, 그리고 ""고정됨"" 상태로 전환됨
     * 고정된 상태에 들어가면 객체는 더 이상 이동할 수 없음

  ?Move

     * Pin 이전에 Move라는 새로운 트레이트를 기반으로 한 솔루션을 시도했음
     * Move를 구현하지 않는 타입은 참조를 취할 때 고정 상태로 전환됨
     * 그러나 Move는 역호환성을 제공하지 않음

  Pin

     * Pin은 객체를 고정 상태로 만드는 새로운 참조 유형을 설계함
     * Pin은 라이브러리 API로 구현되어 역호환성을 유지함
     * Unpin 자동 트레이트를 추가하여 대부분의 타입이 고정 상태와 일반 상태를 구분하지 않도록 함

  The problems with Pin

     * Pin은 사용성 측면에서 여러 문제를 가지고 있음
     * Pin은 라이브러리 타입으로 구현되어 일반 참조 타입이 가진 많은 기능이 사라짐
     * 예를 들어, &mut T는 Copy를 구현하지 않지만 여러 번 인자로 전달할 수 있음
     * Pin은 이러한 편의를 제공하지 않음
     * Pin을 사용할 때 많은 혼란이 발생함

  In my next post…

     * Pin은 비동기 함수에서 임의의 참조를 안전하게 컴파일할 수 있게 해줌
     * 그러나 Pin은 복잡성을 증가시키며, 이를 개선할 방법을 다음 글에서 다룰 예정임

GN⁺의 정리

     * Pin은 Rust 비동기 생태계의 중요한 구성 요소임
     * Pin의 사용성 문제는 라이브러리 타입으로 구현되었기 때문임
     * Pin을 개선하기 위한 방법을 다음 글에서 다룰 예정임
     * 비슷한 기능을 가진 프로젝트로는 pin-project-lite가 있음

        Hacker News 의견

     * Pin이 이해하기 어려운 이유는 공식 문서에서 명확하게 설명되지 않기 때문임
          + 문서에서 ""Pin은 객체가 절대 이동하지 않도록 보장한다""고 주장하지만, 이는 사실이 아님
          + 대부분의 일반 객체는 Unpin이므로 Pin은 보통 아무런 역할을 하지 않음
          + Pin이 실제로 작동하는 타입 T의 집합은 매우 특이하고 문서에서 충분히 강조되지 않음
     * Pin이 어려운 이유는 자체적으로 의미가 없기 때문임
          + Pin<&mut InnerType>의 경우, 언어나 표준 라이브러리에서 Pin이 무엇을 할 수 있고 할 수 없는지 알려주지 않음
          + 대신, InnerType 제공자가 추가적인 (내부적으로 안전하지 않은) 메서드와 API를 만들어 핀된 객체를 조작할 수 있게 함
          + Pin<P> 자체의 유일한 목적은 더 적은 ""내재된 기능""을 제공하는 포인터를 제공하는 것임
     * 제목에 ""rust""를 추가해야 기사 내용이 무엇인지 알 수 있음
     * ""value identity""라는 용어는 Mojo의 문서 어디에서도 정의되지 않았음
          + Dave Abrahams의 ""Value Semantics: Safety, Independence, Projection, & Future of Programming"" 강연을 추천함
     * Pin은 기술적으로 정확하지만 이해하기 어려운 이름의 좋은 예임
          + ""Drop""은 더 익숙한 의미를 가지지만, ""pinning""은 그렇지 않음
          + ""immovable!(…)""이 더 나을지 모르겠지만, 더 나은 이름을 생각하기 어려움
          + ""prevent_moving!(…)""과 같은 설명적인 이름과 PreventMove 트레이트가 더 나을 수 있음
     * Rust와 유사한 언어에서 move-constructors가 있다면 Pin의 필요성이 사라질 수 있음
          + 사용자가 객체를 파괴할 방법이 없기 때문에 이동할 방법도 없을 것임
     * &mut 참조를 통해 mem::swap/replace로 객체를 이동할 수 있지만, 실제로 필요한 경우는 드묾
          + 이동-참조를 선택할 수 있는 방법이 있었으면 좋겠음
          + swap과 replace를 안전하지 않게 만드는 것이 문제를 해결할 수 있을 것임
     * WithoutBoats는 비동기 반복자, poll, pin 주제에 대해 활발한 토론을 진행 중임
          + 언어의 세부 사항에 대해 공개적으로 깊이 논의하는 커뮤니티가 거의 없으며, 이를 보는 것이 매우 흥미로움
     * Pinning/!Move는 비동기/대기 외에도 많은 용도로 유용함
          + 하지만 Rust가 이를 제대로 처리하지 못해, 보통의 대답은 ""프로그램을 다른 언어로 다시 작성하라""임
"
"https://news.hada.io/topic?id=15923","윈도우의 CrowdStrike 제품 오류로 대량 블루스크린 사태 발생","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 윈도우의 CrowdStrike 제품 오류로 대량 블루스크린 사태 발생

     * 사이버보안업체 CrowdStrike社가 배포한 Falcon제품군 최신 패치 적용 시 윈도 시스템이 비정상 종료(블루스크린) 되는 문제 발생
          + 전 세계 은행, 항공사, TV 등에서 대규모 서비스 오류로 운영 차질
     * 긴급 조치 방법
          + 방법1: 안전모드로 부팅하여 Windows/System32/Drivers 의 ""C-00000291*.sys"" 파일을 삭제
          + 방법2: 안전모드 부팅후 CrowdStrike 폴더의 이름을 변경
          + 방법3: 안전모드 부팅후 레지스트리에서 CSAgent 자동실행 안되도록 변경
     * CrowdStrike사에서 변경된 부분을 원래대로 복원한 파일을 릴리즈 했으나, 블루스크린 뜨는 장비의 경우 위 세가지 방법중 하나를 적용할 것

   CrowdStrike의 위기, 라이벌들에게 공격의 기회를 제공하다

   K-망분리의 승리!

   관련해서 전세계 공항/병원/법원/은행 등이 마비가 되었습니다.
   NYT 기사 Outage for Microsoft Users Knocks Out Systems for Airlines and Hospitals in Chaotic Day에서 여러가지 상황들을 보실 수 있습니다.
     * 전세계 비행편 중 약 8% 가 취소
     * 적어도 3개 이상의 미국 주(State)에서 911 시스템이 중단
     * 인천 공항
          + 제주항공 셀프체크인 키오스크도 중단되어 손으로 적은 보딩패스를 발행
          + 델타항공도 문제가 발생해서 지연
     * 인도의 공항들에서도 손으로 적은 보딩패스 발행

   CrowdStrike의 공식 입장문 https://crowdstrike.com/blog/…

   AWS 와 Azure에 있는 윈도우 인스턴스에 대해서는 각 클라우드 프로바이더가 복구 방법도 게시했습니다.
     * AWS : https://repost.aws/en/knowledge-center/ec2-instance-crowdstrike-agent
     * Azure : https://azure.status.microsoft/en-gb/status
"
"https://news.hada.io/topic?id=15946","미니트맨 미사일 통신 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            미니트맨 미사일 통신 시스템

  미니트맨 미사일

    미니트맨 미사일 개요

     * 냉전 초기부터 미국은 육상, 해상, 공중에서 독립적으로 핵무기를 발사할 수 있는 능력을 유지해 왔음
     * 육상 발사체계는 종종 잊혀지지만, 현재 미국의 ICBM(대륙간 탄도 미사일) 무기고는 중서부에 배치된 400개의 미니트맨 III 미사일로 구성됨
     * 미니트맨 미사일은 10개의 독립된 발사 시설(LF)로 구성된 클러스터를 원격으로 모니터링하고 운영하는 단일 미사일 경보 시설(MAF)에서 관리됨

    미사일 경보 시설(MAF)과 발사 통제 센터(LCC)

     * 각 MAF에는 미사일 전투 승무원 지휘관(MCCC)과 부지휘관(DMCCC)이 있으며, 이들은 24시간 교대로 지하 캡슐인 LCC에 잠금됨
     * LCC는 미사일을 모니터링, 구성, 발사하는 데 필요한 모든 장비를 갖춘 독립된 시스템임
     * 지상 건물에는 보안 통제 센터와 보안 요원을 위한 숙소가 있음

    미사일 전투 승무원의 역할

     * 미사일 전투 승무원은 원격 테스트, 경보 시스템 모니터링, 유지보수 작업 감독, 보안 시스템 모니터링 등의 임무를 수행함
     * 주요 임무는 비상 전쟁 명령(EWO)을 처리하는 것임
     * EWO는 코드와 비밀을 인증하고, 두 개의 키를 삽입하여 미사일을 원격으로 활성화하고, 목표 정보를 전송한 후 발사 코드를 전송하는 절차를 따름

    외부 통신 시스템

     * 미사일 전투 승무원은 LF 통신 시스템(SLFCS), 고주파 글로벌 통신 시스템(HFGCS), 초고주파(UHF) 안테나, 초고주파(SHF) 소형 위성 단말기 등을 통해 명령을 수신함
     * 주요 통신 수단은 디지털 컴퓨터 네트워크인 전략 자동화 지휘 통제 시스템(SACCS)과 전략 공군 디지털 네트워크(SACDIN)임

    내부 통신 시스템

     * 내부 통신 시스템은 주로 경화된 사이트 간 케이블 시스템(HICS)으로 구성됨
     * HICS는 다중 쌍의 압력 전화 케이블로 구성되며, 디지털 트래픽과 음성 통신을 모두 처리함
     * HICS는 1.3Kbps의 속도로 운영되며, 각 LCC는 네 개의 루프 케이블에 연결되어 있음

    HICS의 디지털 통신

     * HICS는 단일 공유 버스로 설계되었으며, 각 비행 내에서 모든 메시지를 반복 전송함
     * 각 LCC는 네 개의 루프 케이블에 연결되어 있으며, 각 LF는 단일 다리로 연결됨
     * 디지털 메시지는 패킷화되어 네트워크를 통해 전송됨

    HICS의 음성 통신

     * DMCCC의 통신 콘솔에는 다양한 버튼이 있으며, 각 버튼은 특정 통신 라인을 선택함
     * 음성 통신은 주로 보안 시스템 모니터링과 유지보수 작업을 위해 사용됨

    HICS 외부 장비

     * HICS 케이블은 개방된 트렌치에 설치되었으며, 스플라이스는 큰 구멍에서 수행됨
     * 케이블 경로는 공군의 RoW 마커로 표시됨

    비행 간 통신

     * HICS는 비행 내에서 LCC와 LF 간의 통신을 가능하게 하며, 비행 간 통신도 지원함
     * 특정 LCC는 비행 지휘소(SCP)로 지정되어 비행 내 모든 미사일에 발사 명령을 보낼 수 있음

    경보 시스템

     * HICS는 무인 LF의 경보를 LCC에 보고하는 데 사용됨
     * DMCCC는 LF를 선택하고 버튼을 눌러 톤을 전송하여 경보를 트리거함

  GN⁺의 정리

     * 이 글은 미니트맨 미사일의 통신 시스템에 대한 역사적 정보를 제공함
     * 미사일 경보 시설과 발사 통제 센터의 구조와 역할을 설명함
     * 외부 및 내부 통신 시스템의 구성과 작동 방식을 상세히 다룸
     * 군사 역사에 관심 있는 사람들에게 유익하며, 미사일 운영의 복잡성을 이해하는 데 도움이 됨
     * 유사한 기능을 가진 프로젝트로는 러시아의 토폴-M 미사일 시스템이 있음

        Hacker News 의견

     * South Dakota Minuteman 발사 통제 시설을 방문한 경험이 매우 흥미로웠음
          + 투어 가이드는 수십 년 전 이 시설을 관리했던 베테랑이었음
          + Badlands, Mt. Rushmore 등을 방문할 계획이 있다면 미리 예약하는 것이 좋음
     * DSL, 라디오 등 다양한 옵션이 고려되었지만, 현재 계획은 새로운 광섬유 케이블을 설치하는 것임
          + 광섬유 케이블은 용량과 신뢰성 면에서 전화 케이블보다 우수함
          + 비전도성 광섬유 케이블은 EMP 효과에 완전히 면역임
          + 구리보다 비용이 저렴함
     * 무기 시스템이 명령 및 통제 시스템과 어떻게 통신하는지 항상 궁금했음
          + 특히 냉전 시대 시스템의 데이터 링크가 어떻게 작동했는지 궁금했음
          + 이 기사는 좋은 읽을거리였음
     * 모든 사진에 지리적 위치 데이터가 포함되어 있음
     * Minuteman 미사일 웹사이트 링크가 흥미로웠음
          + 몇 시간 동안 시간을 보냈음
     * 아버지가 이 분야의 프로젝트 매니저였음
          + 아버지가 은퇴했을 때 8살이었기 때문에 정확히 무엇을 했는지 모름
          + 아버지의 경력을 재현해보고 싶음
     * 영화 <i>WarGames</i>의 발사 명령 장면이 이 설명과 크게 다르지 않음
          + 영화의 나머지 부분도 매우 좋음
          + <i>Turn your key, sir!</i>
     * 현대적인 Minuteman 발사 시퀀스를 보여주는 비디오가 있음
          + <a href=""https://www.youtube.com/watch?v=HWZXinRwCaE"" rel=""nofollow"">https://www.youtube.com/watch?v=HWZXinRwCaE</a>;
     * Minuteman II의 컴퓨터 Autonetics D-37B/C를 연구 중임
          + 다른 연구자가 있을 경우를 대비해 메모를 남김
"
"https://news.hada.io/topic?id=15953","CrowdStrike로 인해 몇 달 전 Debian 및 Rocky Linux 손상 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            CrowdStrike로 인해 몇 달 전 Debian 및 Rocky Linux 손상 사건

Debian과 Rocky Linux의 장애 사례

     * CrowdStrike는 유명한 사이버 보안 서비스 제공 업체로, 최근 Windows PC에서 발생한 Blue Screen of Death (BSOD) 문제를 일으킨 것으로 밝혀짐
     * 이 문제는 항공사, 은행, 의료 서비스 제공자 등 다양한 분야의 운영에 지장을 초래했으나, Mac이나 Linux PC에는 영향을 미치지 않음
     * 그러나 Debian과 Rocky Linux 사용자들도 수개월 동안 CrowdStrike 업데이트로 인해 심각한 장애를 겪었음에도 크게 주목받지 못함
     * 이는 CrowdStrike의 소프트웨어 업데이트 및 테스트 절차에 대한 우려를 제기함

Debian Linux 장애 사례

     * 4월에 한 시민 기술 연구소의 모든 Debian Linux 서버가 CrowdStrike 업데이트로 인해 동시에 다운되고 부팅을 거부함
     * 이 업데이트는 Debian의 최신 안정 버전과 호환되지 않았음에도 불구하고, 해당 Linux 구성이 지원되는 것으로 알려져 있었음
     * IT 팀은 CrowdStrike를 제거하면 시스템이 부팅된다는 것을 발견하고 이 사건을 보고함
     * 한 팀원은 CrowdStrike의 지연된 대응에 불만을 표시했으며, 문제를 인정한 후 근본 원인 분석을 제공하는 데 수주가 걸렸다고 함
     * 분석 결과, Debian Linux 구성이 CrowdStrike의 테스트 매트릭스에 포함되지 않은 것으로 나타남

Rocky Linux 장애 사례

     * RockyLinux 9.4로 업그레이드한 후 CrowdStrike 사용자들도 커널 버그로 인해 서버가 다운되는 유사한 문제를 보고함
     * CrowdStrike 지원팀은 이 문제를 인정했으며, 이는 다양한 운영 체제에 걸친 호환성 문제에 대한 불충분한 테스트와 주의 부족을 보여주는 패턴임

개선 방안

     * 향후 이러한 문제를 방지하기 위해 CrowdStrike는 모든 지원 구성에 대한 엄격한 테스트를 우선시해야 함
     * 또한 조직은 CrowdStrike 업데이트에 주의를 기울이고, 잠재적 장애를 완화하기 위한 비상 계획을 마련해야 함

   AI가 본문이 아니라 광고를 요약했나보네요

   Neowin 사이트는 HTML 구조가 이상해서 상단바의 모든 광고가 본문으로 인식되네요. 수정해두었습니다.

        Hacker News 의견

     * OSS/Linux 생태계는 독립적이고 느슨하게 조정된 그룹들이 무료로 작성한 코드로 구성되어 있음에도 불구하고, 수십억 달러 기업의 소프트웨어보다 더 견고함
          + OSS 시스템 프로그래머들은 공개적으로 코드를 작성하여, ""많은 눈이 버그를 얕게 만든다""는 것보다 ""어떤 눈이라도 나쁜 코드를 부끄럽게 만든다""는 이유 때문일 수 있음
          + 상업 프로젝트를 오픈 소스로 만들 계획이지만, 공개하기 전에 많은 수정을 해야 함
          + 여러 폐쇄형 상용 코드 베이스를 봤는데, 훨씬 더 나쁜 코드도 많이 봤음
     * Crowdstrike가 4월 19일에 생산용 Linux 시스템에 문제를 일으켰다는 댓글이 있었음
     * 제품 품질이 항공기에서 소프트웨어까지 자유낙하 중이며, 요즘은 QA가 부족한 것이 일반적임
     * 이 분야에서 일했을 때, ""이것들이 실제로 유용한가?""라는 의문이 항상 있었음
          + Crowdstrike 등의 효과에 대한 제3자 연구가 있는지, 아니면 단지 보안 연극을 위해 우리의 삶을 더 나쁘게 만드는 것인지 궁금함
     * Crowdstrike가 Windows 애플리케이션에 버그가 있는 DLL을 주입하여 앱이 자체적으로 충돌할 수 있다는 보고가 있었음
     * 기업들이 결과적 책임을 회피할 수 있는 계약 조항을 사용할 수 있는 것이 문제임
          + 이러한 조항을 생명 손실의 결과적 손실 계약과 같이 무효화해야 할 수도 있음
          + 최소한 제한해야 함
     * 업데이트가 최신 안정 버전의 Debian과 호환되지 않았음
          + 분석 결과 Debian Linux 구성이 테스트 매트릭스에 포함되지 않았음
          + 이는 실제 사기에 가까움. 지원한다고 선언했지만 실제로는 테스트하지 않음
          + 자동차 제조업체가 안전벨트를 설치하지 않는 것과 같음. 왜 Crowdstrike는 처벌받지 않는지 의문임
     * Crowdstrike는 모든 지원되는 구성에 대해 엄격한 테스트를 우선시해야 함
          + 테스트는 비용이 들며, 경쟁 시장에서 필요로 하거나 원하는 회사에 제품을 판매하지 않음
          + 기업에 제품을 강제로 판매하는 비즈니스 모델이므로 품질에 투자할 인센티브가 없음
     * ""아무도 눈치채지 못했다""는 말은 Crowdstrike가 미디어의 주목을 억제했다는 의미임
          + 버그 발생 당일, HN 게시물에는 몇 달 전부터 문제를 보고하려고 했다는 댓글이 있었음
          + 기사도 사람들이 눈치챘다고 쓰여 있음. 그래서 누가 눈치채지 못했는지, 아니면 문제가 충분히 인기가 없어서 무시된 것인지 궁금함
     * Crowdstrike를 사용하는 사람이 있는지, 무엇을 하는지 궁금함
          + 회사 노트북에 설치되어 있으며, 키로거와 활동 모니터로 보임
          + ""숨길 것이 없다""고 하지만, 여전히 일부 기업 슈퍼 유저가 나를 감시하는 것이 불편함
"
"https://news.hada.io/topic?id=15926","FCC, 교도소 통신 요금 제한 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          FCC, 교도소 통신 요금 제한 결정

    FCC, 교도소 통신 비용 대폭 인하 결정

   워싱턴 D.C. — 오늘 연방 통신 위원회(FCC)는 교도소와 구치소에서의 전화 및 영상 통화 요금을 대폭 제한하는 결정을 만장일치로 통과시킴. 새로운 명령은 모든 교도소와 구치소 전화 통화의 분당 요금 상한선을 절반 이상 줄이고, 영상 통화에 대한 임시 분당 요금 상한선을 설정함. 또한 모든 수수료, 포함 예치 수수료를 금지함. Worth Rises는 새로운 규칙이 약 140만 명의 수감자에게 영향을 미치고, 영향을 받는 가족들에게 연간 최소 5억 달러를 절약할 것이라고 추정함.

      영향 요약

     * 수감자들이 지원 시스템에 더 많이 접근할 수 있게 되어 복지와 재입소 성공률이 향상됨
     * 수감자 가족들의 재정 안정성이 증가하고 가족 유대가 강화됨
     * 수십 년 동안 수감자와 그 가족을 착취해온 교도소 통신 산업을 규제하고 적정화함
     * 교정 기관과 그 산업 파트너들이 최근 몇 년간 급속히 확장한 대규모 감시 프로젝트를 역전시킴

   이 규제는 Martha Wright-Reed Just and Reasonable Communications Act의 시행을 의미하며, 이 법은 교정 시설 내 전화 및 영상 통화를 규제할 수 있는 FCC의 권한을 설정함. 오늘 투표에서 논의된 내용은 6월 27일에 발표된 초안 규칙에 약간의 변경만을 가져올 것이며, 며칠 내에 발표될 예정임.

   Bianca Tylek, Worth Rises의 전무 이사는 ""오랫동안 전국의 가족들이 수감된 사랑하는 사람들과 연락을 유지하기 위해 고군분투해 왔음. 너무 많은 사람들이 연락을 유지하기 위해 빚을 지거나 완전히 단절되었음. 이제 드디어 구제가 다가오고 있음""이라고 말함. ""우리는 FCC 의장 Jessica Rosenworcel과 다른 위원들에게 수감자, 그 가족, 커뮤니티, 그리고 대중에게 미치는 착취적 통신 비용의 영향을 인식해 준 것에 대해 큰 감사를 표함. 이로 인해 수백만 가족에게 연간 5억 달러 이상의 절약 효과가 있을 것임을 알고 있음.""

   FCC의 낮은 요금 상한선을 이끄는 주요 요인은 보안 및 감시 비용의 제외와 수수료의 제외임. 수십 년 동안 확장된 감시 서비스의 비용이 수감자와 그 가족에게 전가되어 왔음. 새로운 규칙에 따라 교도소 통신 업체는 이러한 서비스의 대부분의 비용을 요금 납부자에게 전가할 수 없게 됨.

   Tylek는 ""우리는 FCC가 수감자와 그 가족이 유해하고 침해적인 감시 비용을 지불하지 않아야 한다는 것에 동의한 것에 기쁨을 느끼고 있음. 감시 서비스는 통신 서비스와 별개이며, 별도의 소비자인 교정 기관이 사용하고자 하는 경우 비용을 지불해야 함. 교도소 통신 산업이 두려워하는 것처럼 교정 기관이 이를 선택하지 않는다면, 이는 FCC가 해결할 문제가 아닌 산업의 비즈니스 문제임""이라고 말함.

      새로운 요금 상한선

     * 2025년 초에 발효될 예정
     * 현재 더 높은 요금을 부과하는 24개 주 교도소 시스템과 약 90%의 구치소가 즉시 요금을 인하해야 함
     * 보안 및 감시 비용과 수수료의 제외로 인해 전반적인 요금 인하가 예상됨

   FCC의 새로운 규칙은 교도소 통신 산업에 큰 영향을 미칠 것임. 수익 손실은 수억 달러에 이를 것으로 예상됨. 이는 두 개의 주요 시장 플레이어인 Aventiv와 ViaPath가 각각 재정 위기를 겪고 있는 시점에 발생함. Aventiv는 최근 13억 달러의 부채에 대해 사실상 디폴트 상태에 있음. ViaPath는 15억 달러의 재융자 거래를 성사시키려 했으나 규제 소식으로 인해 거래가 무산됨.

   FCC의 새로운 규칙은 점점 더 많은 주가 교도소와 구치소 통신을 무료로 만들기 위해 움직이고 있는 시점에 나옴. 2023년에는 매사추세츠, 미네소타, 콜로라도가 교도소 통화를 무료로 만드는 법안을 통과시켰고, 캘리포니아는 2022년에, 코네티컷은 2021년에 교도소 통화를 무료로 만듦. 현재 12개 이상의 다른 주에서도 캠페인이 진행 중임.

   Mignon Clyburn, 전 FCC 의장 및 Benton Institute for Broadband & Society 이사는 ""오늘은 수십 년 동안 수감자와 그 가족을 잘못된 시장 기능으로부터 바로잡기 위한 긴 여정에서 중요한 이정표를 세운 날임. Rosenworcel 의장과 그녀의 동료 위원들, 그리고 Martha Wright-Reed Just and Reasonable Communications Act의 목표에 충실한 강력한 규칙을 만든 FCC 직원들에게 찬사를 보냄""이라고 말함.

   Cheryl A. Leanza, United Church of Christ Media Justice Ministry 정책 고문는 ""오늘 FCC의 투표로 인해 음성 통화 요금이 기존 상한선에서 분당 8~14센트 인하되고, 영상 통화도 처음으로 요금 보호를 받게 됨. 낮은 비용의 통신은 더 많은 추억과 더 강한 유대를 의미하며, 이는 아이의 삶에 큰 차이를 만들 수 있는 순간에 '사랑해'와 '보고 싶어'를 말할 수 있는 더 많은 기회를 제공함. 이는 사람들을 불가능한 재정적 부담 아래서 분리시키는 대신 함께 모이게 함""이라고 말함.

   Koustubh “K.J.” Bagchi, The Leadership Conference on Civil and Human Rights의 Center for Civil Rights and Technology 부사장은 ""오늘 FCC의 행동은 수감자와 그 가족이 더 이상 부담스러운 요금 없이 서로 소통할 수 있게 함. 이러한 착취적인 요금의 부재는 수감자들이 감옥에서 경험하는 우울증, 고립, 외로움을 줄이고, 커뮤니티로 재입소할 때 성공을 돕는 데 큰 변화를 가져올 것임""이라고 말함.

   Heather Franklin, Free Press의 인터넷 캠페인 디렉터는 ""수감자들이 사랑하는 사람, 법률 상담사, 성직자와 정기적으로 소통할 수 있는 능력은 인권 문제임. 수감자들은 착취적인 요금에 시달리지 않고 소통할 수 있어야 함""이라고 말함.

   Ariel Nelson, National Consumer Law Center의 Criminal Justice Debt & Reintegration Project를 이끄는 직원 변호사는 ""오늘 FCC의 명령은 가족들이 수감된 사랑하는 사람들과 소통하기 위해 더 이상 부당한 요금을 지불하지 않도록 도울 것임""이라고 말함.

   Peter Wagner, Prison Policy Initiative의 전무 이사는 ""오늘 FCC의 명령은 수감자 가족들이 그들의 사랑하는 사람들의 수감 비용을 부담하지 않아야 한다는 우리의 주장을 확인함. FCC가 모든 전화 및 영상 통화 비용을 제한함으로써 수백만 가족에게 구제를 제공할 것임""이라고 말함.

   Al Kramer, Public Knowledge의 선임 연구원은 ""수감자들이 높은 통화 요금을 감당할 수 없어 사랑하는 사람, 커뮤니티, 심지어 변호사와 쉽게 소통할 수 없었던 상황을 해결하기 위해 FCC가 합리적인 요금을 요구함으로써 가족을 유지하고 수감자들이 사회로 복귀하는 것을 돕고 있음""이라고 말함.

   Rebekah P. Goodheart, Jenner & Block LLP의 Wright 청원자들을 위한 프로 보노 변호사는 ""FCC의 명령은 오랫동안 부당한 요금과 싸워온 수감자와 그 가족에게 중요한 승리를 제공함""이라고 말함.

   Brandon Tucker, Color Of Change의 선임 정책 디렉터는 ""교도소 전화 요금을 낮추기 위한 Martha Wright-Reed 법안을 시행하기 위해 FCC가 조치를 취한 것은 교도소 정의에 있어 중요한 단계임""이라고 말함.

    GN⁺의 정리

     * FCC의 새로운 규칙은 수감자와 그 가족에게 큰 재정적 구제를 제공함.
     * 교도소 통신 산업의 수익 손실이 예상되며, 이는 산업의 비즈니스 모델 변화로 이어질 것임.
     * 이번 규제는 교도소 통신 비용을 무료로 만들기 위한 주들의 움직임과 맞물려 있음.
     * 수감자와 그 가족의 소통을 촉진하여 재입소 성공률을 높이고, 우울증과 고립감을 줄이는 데 기여할 것임.
     * Worth Rises와 같은 단체의 지속적인 옹호 활동이 이번 규제의 중요한 배경임.

        Hacker News 의견

     * 2013년에 처음 감옥에 갔을 때 매달 $20 전화 카드를 사서 25분간 장거리 전화를 했던 경험이 있음
          + 이게 합법인지 믿기 어려웠고, 도덕적으로도 받아들일 수 없었음
          + 가족과 함께 감옥 시스템의 여러 문제를 경험하게 되었음
     * 감옥 시스템에서 장거리 전화 요금이 비싼 것은 충격적임
          + 여러 가족들이 Google Voice 번호를 설정해 비용을 절감하도록 도왔음
     * 정부가 죄수들이 전화를 걸 수 있게 하지만, 단일 승인된 전화 운영자만 사용할 수 있게 함
          + 이 운영자는 경쟁이 없으므로 가격을 마음대로 올림
          + 정부가 경쟁을 금지한 것이 문제임
          + 여러 회사가 적절한 라이선스와 정부 승인을 받아 죄수들에게 태블릿이나 휴대폰을 제공할 수 있는 시스템을 만들 수 있음
     * 친구가 감옥에서 smartjailmail 플랫폼을 통해 메시지를 보냈음
          + 답장을 보내려면 크레딧을 구매해야 했고, 각 메시지는 50 크레딧이 필요했음
          + 사진을 보내는 데는 100 크레딧이 필요했음
          + 최소 500 크레딧을 구매해야 했고, 모든 거래에는 몇 달러의 수수료가 붙었음
          + 이 모델이 매우 착취적이라고 생각했음
     * 친구가 지역 감옥에서 전화를 걸 때 분당 $0.21을 지불함
          + 텍사스 주립 감옥 시스템에서는 이메일을 보내는 데 ""우표""가 필요하고, 각 사진은 1 우표가 필요함 (각 우표는 $0.45)
     * 최근 대법원 결정이 FCC의 권한을 제한할 수 있는지에 대한 우려가 있음
          + Martha Wright-Reed Just and Reasonable Communications Act가 FCC의 권한을 확립했음
          + 이 법은 주 내 전화와 비디오 통화를 규제할 수 있게 함
     * Aventiv와 ViaPath가 재정 위기를 겪고 있음
          + Aventiv는 $13억 부채를 재융자하지 못해 디폴트 상태임
          + ViaPath는 $15억 재융자 거래를 진행 중이었으나 규제로 인해 중단됨
          + 이 규제는 감옥이 감시 비용을 부담하게 함
     * 감옥은 정부가 운영하고 재활을 목표로 해야 함
          + 영리 목적의 감옥은 존재해서는 안 됨
     * 가족과의 분리를 증가시켜 재범률을 높이는 문제를 해결해야 함
     * 미국의 사립 감옥에 대한 혼란이 많음
          + 사립 감옥이 문제의 주된 원인이 아님
          + 공공 감옥도 매우 열악한 상태임
          + 사립 감옥은 소수만 차지함
          + 문제는 주로 계약을 통해 나쁜 서비스를 제공하는 영리 회사들임
          + 음식과 의료 서비스에서도 비슷한 문제가 발생함
"
"https://news.hada.io/topic?id=15976","Search.gov - 미국 연방 정부에 의한, 연방 정부를 위한 검색 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Search.gov - 미국 연방 정부에 의한, 연방 정부를 위한 검색 엔진

     * 약 2000개 이상의 정부 웹사이트에 검색결과를 제공
          + 연방 기관에서 사용 가능하며, 웹사이트 유형이나 조직에 관계없이 대중에게 맞춤화된 검색 환경을 제공하기 위한 셀프 서비스 검색엔진
          + 일반 검색 엔진과 달리 USAJOBS, Federal Register 및 RSS/소셜미디어 검색등을 지원
     * 안전하고 규정을 준수하며 정부 웹 퍼블리싱의 고유한 환경에 맞게 설계
     * 개발자 없이도 간편한 인터페이스를 사용하여 검색 환경을 직접 디자인 가능
     * 정부 기관들이 도입할 때, 구현부터 SEO까지 직접적인 고객 지원
     * Eric Brewer(Cap Theorem을 만든 사람, Inktomi를 창업해서 야후에 매각, 구글의 인프라 담당 부사장, 버클리대 교수) 가 정부에 검색엔진을 기부한 것에서 시작
          + 2000년 6월에 클린턴이 브루어의 비영리 재단에서 검색엔진 기부를 받고, 그 기반으로 USA.gov(시작할때는 FirstGov.gov 였다가 변경됨) 의 기반이 됨
          + 2010년에 Search.gov 는 오픈소스로 전환했고, 미국 정부 기관 전체로 사용을 확대

   링크가 잘못 된거 같아요.

   아앗.. 제목에 적어놓고 URL은 다른걸 넣었네요 ㅠ 수정해두었습니다.

   일반 검색엔진이라고 보면 안되고, 정부 대상의 웹사이트 만을 검색하는 엔진이라고 보면 됩니다.

   Repo 는 여기 입니다. https://github.com/GSA/search-gov
   Ruby + Node.js + MySQL + ElasticSearch

   GSA(U.S. General Services Administration)는 정부 사이트를 위한 통합 계정인 Login.gov 같은 것도 만들고 있습니다.
   사실상 구글의 여러 제품을 대체하는 서비스들이군요.

   AI.gov
   Cloud.gov - 미국 정부기관을 위한 클라우드 도움 서비스
   미국 연방 정부, 공식 웹 디자인 시스템 발표
"
"https://news.hada.io/topic?id=15890","Google Docs, Markdown 가져오기 및 내보내기 지원 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Google Docs, Markdown 가져오기 및 내보내기 지원

     * 2022년에 웹용 Google Docs에서 Markdown을 작성하는 기능을 추가
     * 이제 다른 Markdown 지원 도구와의 상호 운용성을 향상시키는 기능을 도입
          + Markdown을 Docs 콘텐츠로 변환하여 붙여넣기
          + Docs 콘텐츠를 Markdown으로 복사하기
          + Doc을 Markdown으로 내보내기 (파일 > 다운로드에서)
          + Markdown을 Doc으로 가져오기 (파일 > 열기 또는 Drive에서 ""Google Docs로 열기""에서)
     * 가져오기 및 내보내기 옵션은 기본적으로 켜져 있음
          + ""Markdown으로 복사"" 및 ""Markdown에서 붙여넣기"" 옵션은 기본적으로 꺼져 있으며, Docs에서 도구 > 환경설정 > Markdown 활성화에서 활성화할 수 있음
          + Google Docs, Slides, & Drawings에서 Markdown 사용에 대해 자세히 알아보려면 도움말 센터 참고
     * 2024년 7월 16일부터 최대 15일 동안 점진적 Rollout
     * 모든 Google Workspace 고객, Workspace Individual Subscribers 및 개인 Google 계정 사용자에게 제공

        Hacker News 의견

     * 새로운 기능을 구현한 엔지니어가 기존의 자동 감지 기능과 이번에 발표된 기능이 다르다고 설명함
          + 새로운 기능은 전체 가져오기/내보내기를 지원하지만 아직 배포 중임
          + 사용자들이 이 기능을 좋아하길 바람
     * 코드 블록과 인용을 지원하지 않는 점을 지적함
          + 코드 조각이 자동으로 대문자로 변환되는 문제를 언급함
          + 기술 문서를 공유할 때 불편함을 호소하며, 제대로 작동하는 Markdown을 원함
     * Google Docs와 유사한 실시간 협업을 위해 HackMD와 Stash.new를 사용함
     * LLM의 성공이 이번 기능 추가에 영향을 미쳤을 것이라고 추측함
          + Markdown 지원 부족이 LLM과의 수동 입출력을 번거롭게 만듦
     * Mermaid를 지원하여 문서 내에서 다이어그램을 직접 생성할 수 있기를 바람
          + Mermaidjs를 사용하여 LLM과 잘 작동함
     * 과거에 Docs to Markdown 애드온을 사용하여 Google Docs에서 Markdown으로 변환한 후 Hugo 웹사이트로 옮기는 워크플로우가 좋았음
     * 이 기능이 제대로 구현되면 논문 협업에 큰 변화를 가져올 것이라고 기대함
          + Markdown으로 작성한 논문을 쉽게 Pandoc/Quarto로 변환할 수 있음
     * 많은 사람들이 ChatGPT와 Claude에서 정보를 복사하는 것을 싫어한다는 점을 Google이 인식했다고 언급함
     * 제품 관리자였을 때 여러 회사에서 이 기능이 유용했을 것이라고 설명함
          + Google Docs에서 블로그 플랫폼으로 콘텐츠를 복사/붙여넣기 할 때 포맷 문제가 발생함
          + Markdown을 블로그로 가져오거나 HTML로 변환하는 것이 더 쉬움
     * Google이 Docs를 DOM에서 Canvas로 이전한 후 성능이 향상되었는지 묻는 질문을 덧붙임
"
"https://news.hada.io/topic?id=15883","WebKit의 Private Browsing 2.0","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      WebKit의 Private Browsing 2.0

     * 2005년에 Private Browsing(개인정보 보호모드)을 발명했을 때, 목표는 동일한 기기를 공유하는 사람들로부터 사용자의 브라우징을 보호하는 것이었음
     * 사용자가 브라우징의 로컬 영구 흔적을 남기지 않는 모드를 만들었고, 결국 다른 모든 브라우저도 동일한 기능을 제공하게 되었음. 이를 ""ephemeral browsing""이라고도 함
     * 2003년 Safari 1.0부터 쿠키 정책을 통해 모든 Safari 브라우징에 크로스 사이트 추적 방지를 적용했고, 지난 20년 동안 프라이버시 보호를 점진적으로 강화해 왔음
     * 다른 유명 브라우저는 추적 방지에 있어 우리의 주도를 따르는 데 그다지 빠르지 않았지만, 진전은 있음
     * Apple은 사용자가 자신도 모르게 동의 없이 웹에서 추적되어서는 안 된다고 믿음
          + Private Browsing에 진입하는 것은 사용자가 프라이버시 침해에 대해 최상의 보호를 원하면서도 웹을 즐기고 활용하고 싶어한다는 강력한 신호임
          + 크롬의 시크릿 모드와 같이 사생활 보호 모드를 2005년 정의대로 단순히 임시적인 것으로만 유지하는 것은 더 이상 충분하지 않음
          + 사용자는 더 많은 것을 기대하고 받을 자격이 있음
     * Safari 17.0에서 Private Browsing에 전혀 새로운 수준의 프라이버시 보호 기능을 추가했고, 17.2와 17.5에서 이를 더욱 강화
          + 사용자가 활성화하면 새로운 모든 보호 장치가 일반 Safari 브라우징에서도 사용 가능함
          + 이 작업으로 웹 프라이버시를 크게 향상시켰고, Private Browsing이 어떠해야 하는지에 대한 새로운 산업 표준을 세우기를 희망함

Safari의 Enhanced Private Browsing 기능 요약

     * Safari 17.0에 들어간 보호 및 방어 기능
          + 링크 추적 방지
          + CNAME으로 위장된 것을 포함해 알려진 트래커의 네트워크 로드 차단
          + 고급 핑거프린팅 방지
          + 웹사이트나 방문 기록에 접근하는 확장 프로그램은 기본적으로 꺼져 있음
     * 추가로 모든 브라우징 모드에 추가된 보호 및 방어 기능
          + 위장된 제3자 IP 주소에서 설정된 쿠키의 수명 제한
          + 파티션된 SessionStorage
          + 파티션된 blob URL (Safari 17.2부터)
     * 또한 URL의 추적 매개변수를 대체하기 위해 Web AdAttributionKit(이전의 Private Click Measurement)를 확장했음
     * Private Browsing에서도 개발자가 마케팅 캠페인의 성과를 이해할 수 있도록 도움

웹사이트 호환성을 깨먹는 것의 위험과 그에 대한 완화 방안

     * 웹에서 프라이버시를 보호하기 위한 많은 아이디어가 있지만, 불행히도 그 중 많은 것이 사용자 경험을 해칠 수 있음
     * 현실 생활에서의 보안 보호와 마찬가지로, 균형을 맞추어야 함
     * 새로운 Private Browsing은 웹사이트를 절대 중단시키지 않으려고 시도하면서 그 선까지 가는 것임
     * 하지만 일부 사이트의 일부분이 작동하지 않을 위험이 있음
     * 이를 해결하기 위해 사용자에게 사이트별로 프라이버시 보호를 줄일 수 있는 수단을 제공함
     * 이러한 프라이버시 보호의 변경은 사이트 내에서 브라우징하는 동안만 기억됨
     * 이 옵션은 프라이버시 보호로 인해 웹 페이지를 사용할 수 없을 때 최후의 수단임
     * iOS, iPadOS, visionOS에서는 설정 > 앱 > Safari > 고급 > 고급 추적 및 핑거프린팅 방지로 이동하여 ""모든 브라우징""을 활성화
     * macOS에서는 Safari > 설정 > 고급으로 이동하여 ""모든 브라우징에서 고급 추적 및 핑거프린팅 방지 사용""을 활성화

링크 추적 방지

     * 사파리는 URL의 쿼리 파라미터와 프래그먼트를 제거해 사이트 간 사용자 활동 추적을 어렵게 만듦
     * 광범위한 사용자/클릭 수준 추적에 사용되는 쿼리 파라미터는 네트워크 전송 전에 제거됨
     * 캠페인 속성에 사용되는 파라미터는 통과시킴
     * 목적지 사이트에서 전체 URL에 액세스하려는 제3자 스크립트는 쿼리 파라미터나 프래그먼트가 없는 URL만 볼 수 있음

Private Browsing의 Web AdAttributionKit

     * Web AdAttributionKit은 광고주, 웹사이트 및 앱이 프라이버시를 보호하는 방식으로 광고 속성과 클릭 측정을 구현하는 방법임
     * Private Browsing에서 특정 제한 사항을 가지고 동작함
          + 개별 Private Browsing 탭으로 범위가 지정되며, 링크 클릭 시 새 탭으로 속성 전송함
          + 탭을 닫으면 보류 중인 속성 요청이 폐기됨

알려진 추적기의 네트워크 로드 차단

     * 자동으로 활성화된 콘텐츠 차단기를 사용해 알려진 추적기로의 네트워크 로드를 차단함
     * DuckDuckGo 데이터와 EasyList의 EasyPrivacy 필터링 규칙을 사용해 컴파일됨
     * 대부분의 광고는 계속 로드되도록 의도적으로 허용함
     * Private Browsing은 CNAME 은폐나 제3자 IP 주소 은폐를 통해 매핑된 추적 도메인으로의 은폐 네트워크 요청도 차단함

네트워크 프라이버시 개선

     * Private Browsing은 다음과 같은 보호 기능을 모든 사용자에게 추가함:
          + 암호화된 DNS를 사용해 DNS 쿼리를 보호함
          + 암호화되지 않은 HTTP 리소스를 프록시해 로컬 네트워크의 공격자로부터 보호함
     * iCloud+ 가입자는 iCloud Private Relay를 켜서 다음과 같은 기능을 추가로 사용할 수 있음:
          + 각 Private Browsing 탭마다 별도 세션을 사용함
          + 기본적으로 위치정보 프라이버시를 제공함
          + IP 주소 공개 전에 경고를 표시함

Private Browsing의 확장 프로그램

     * 웹사이트 데이터 및 브라우징 기록에 액세스할 수 있는 확장 프로그램은 기본적으로 꺼져 있음
     * 사용자는 여전히 확장 프로그램이 Private Browsing에서 실행되도록 선택할 수 있음
     * 웹 페이지 콘텐츠나 브라우징 기록에 액세스하지 않는 확장 프로그램은 Safari에서 켜져 있으면 Private Browsing에서도 기본적으로 켜져 있음

고급 핑거프린팅 방지

     * 상태 저장 추적이 제한됨에 따라 많은 추적기가 핑거프린팅으로 전환함
     * 핑거프린팅 유형:
          + 디바이스 핑거프린팅: 하드웨어, OS, 브라우저 등 디바이스 특성 기반
          + 네트워크 및 지리적 위치 핑거프린팅: 인터넷 연결 방식과 지리적 위치 감지 수단 기반
          + 사용자 설정 핑거프린팅: 다크/라이트 모드, 로케일, 글꼴 크기 조정, 창 크기 등 사용자 설정 상태 기반
          + 사용자 행동 핑거프린팅: 마우스 포인터 사용, 입력 속도 등 사용자 행동 패턴 감지
          + 사용자 특성 핑거프린팅: 관심사, 연령, 건강 상태 등 사용자 특성 파악
     * 핑거프린트 안정성은 시간이 지남에 따라 변화하는 요소들로 인해 도전받음
     * 핑거프린팅 프라이버시 문제:
         1. 사이트 간 추적
         2. 사이트별 사용자 재호출
         3. 사이트별 방문자 고유성
     * 사이트 간 추적 및 사이트별 사용자 재호출은 브라우저가 해결해야 할 프라이버시 문제임
     * Safari의 접근 방식:
          + 핑거프린트를 사이트별로 고유하게 만들고, 데이터 제거 시마다 새로운 고유 핑거프린트 생성
          + 다중 홉 프록시를 사용해 IP 주소 숨기기
          + 핑거프린트 가능한 웹 API 수 제한
          + 웹 API 반환 값에 노이즈 주입
     * 2D Canvas, WebGL, Web Audio API에 노이즈를 주입하고 창/화면 메트릭 관련 API 결과를 고정하여 핑거프린팅을 어렵게 만듦

Topics API와 같은 핑거프린트 가능한 API를 웹에 추가하지 말아야 함

     * 기존 웹 API는 핑거프린트 가능성을 억제하는 데 어려움이 있음
     * 새로운 핑거프린트 가능한 API로 문제를 악화시키지 않는 것이 중요함
     * Chrome에 도입된 Topics API에 반대하는 이유:
          + 사용자의 관심사를 브라우저가 추론하여 광고주에게 전달함
          + 사용자에게 어떤 주제가 노출되는지 사전에 알려주지 않음
          + 단순한 관심사 조합만으로도 사용자 프로파일링과 재식별에 활용될 수 있음

두 가지 브라우징 모드에서의 프라이버시 개선

     * 은폐된 제3자 IP 주소에 대한 방어와 SessionStorage 및 Blob URL 파티셔닝은 일반 브라우징과 Private Browsing 모두에서 기본적으로 활성화됨
     * ITP는 은폐된 제3자 IP 주소의 응답에서 쿠키 만료 기간을 7일로 제한함
     * Safari 16.1부터 사이트 간 Session Storage를 첫 번째 파티 웹사이트별로 분할함
     * Safari 17.2부터 사이트 간 Blob URL을 첫 번째 파티 웹사이트별로 분할하고, 제3자가 첫 번째 파티 Blob URL을 사용할 수 없게 함

산업 표준 설정

     * Safari 17.0, 17.2, 17.5의 개인 정보 보호 기능은 사용자 보호를 위한 새로운 기준을 제시
     * 모든 Safari 사용자와 웹 자체가 이 작업의 혜택을 누리게 되기를 기대

   https://youtu.be/0HjDpPnxcP0?si=x0JZN2Cxxy0j3XiT
"
"https://news.hada.io/topic?id=15916","Devzat – 개발자들을 위한 SSH 채팅 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Devzat – 개발자들을 위한 SSH 채팅 서버

     * 쉘 프롬프트 대신 채팅으로 연결되는 맞춤형 SSH 서버
     * 모든 플랫폼에서 SSH 앱을 통해 접속 가능하며, 모바일에서도 사용 가능함
     * ssh nickname@devzat.hackclub.com 으로 자신의 닉네임으로 접속
     * Slack 및 Discord와 통합 가능, Twitter와 연동하여 새 사용자 알림 게시 가능
     * 플러그인 API를 통해 다른 서비스들과 연동 가능
     * Devzat의 주요 기능:
          + 방 기능: cd 명령으로 방 목록 확인 및 이동
          + Markdown 지원: 표, 헤더, 이탤릭 등 지원
          + 코드 구문 강조: Markdown 펜스를 사용하여 코드 전송
          + 직접 메시지: =user 명령으로 DM 전송
          + 시간대 설정: tz Continent/City 명령으로 시간대 설정
          + 내장된 틱택토와 행맨 게임
          + 이모지 대체 기능: :rocket: => 🚀
     * 주요 명령어:
          + = : 사용자에게 DM 전송
          + users: 사용자 목록 보기
          + color : 이름 색상 변경
          + exit: 채팅 종료
          + help: 도움말 보기
          + man : 특정 명령어 도움말 보기
          + emojis: 이모지 목록 보기
          + bell on|off|all: 알림 설정
          + clear: 화면 지우기
          + hang : 행맨 게임 시작
          + tic : 틱택토 게임 시작
          + devmonk: 타자 속도 테스트
          + cd #room|user: 방 이동 또는 DM 시작
          + tz [24h]: 시간대 설정
          + nick : 사용자 이름 변경
          + pronouns @user|pronouns: 대명사 설정 또는 조회
          + theme |list: 구문 강조 테마 변경
          + rest: 비정상 명령어 목록
          + cmds: 명령어 목록 보기

   Devzat - SSH 기반의 디스코드 비슷한 채팅 오픈소스
   2년 전에 재미난 컨셉이네? 하고 간단히 소개한 것 같은데 아직도 잘 발전하고 있나 보네요.

        Hacker News 의견

     * SSH 계정으로 'ytalk'을 실행하는 것과 유사한 작업을 할 수 있을지 궁금함
     * 보안 문제에 대한 궁금증이 있음. 공격자가 클라이언트 터미널에서 명령을 실행할 수 있는 메시지를 만들 수 있는지 궁금함
     * 비슷한 기능을 SSH 앱(pico.sh)에서 IRC 채팅 앱(senpai)으로 구현했음. 사용자가 계정을 만든 후 단일 명령(ssh pico.sh -t chat)으로 공용 IRC 바운서에 연결할 수 있게 함
          + 참고: https://pico.sh/irc
     * 약 10년 전에 Go로 작성된 shazow의 ssh-chat도 있음
          + ssh chat.shazow.net
          + 10년이 지난 지금도 여전히 사용 가능함
          + 당시 논의: https://news.ycombinator.com/item?id=8743374
          + 소스 코드: https://github.com/shazow/ssh-chat
     * devzat.hackclub.com에 연결 시도 시 포트 22에서 연결 거부됨
          + 22/tcp 포트가 닫혀 있음
          + Nmap 결과: 1.18초 동안 1개의 IP 주소(1개의 호스트) 스캔 완료
          + 과부하 상태일 가능성 있음
     * 내 서버를 사용하고 싶다면 현재 서버보다 더 강력할 수 있음. 셀프 호스팅을 할 수도 있지만 메인 인스턴스를 돕고 싶음
     * 현재 서버가 다운된 것에 대해 사과함. Hacker News의 트래픽 폭주 현상(Hug of Death)이 실제로 발생함
     * HackTheBox에서 Devzat 인스턴스를 해킹해야 하는 초보자 친화적인 머신이 있었음
     * SSH를 통한 채팅이 많은 통찰을 줌. 감사함
     * 소스 코드가 매우 읽기 쉬움. 유머 감각도 마음에 듦
          + 예시: https://github.com/quackduck/devzat/blob/main/commands.go#L177-L183
"
"https://news.hada.io/topic?id=15995","Stremio OS, 라즈베리 파이 5 & 4 용 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Stremio OS, 라즈베리 파이 5 & 4 용 공개

     * Stremio는 비디오 컨텐츠 재생을 위한 통합 미디어 센터 어플리케이션
          + 안드로이드, 윈도우, 맥, 리눅스, LG/삼성 TV 등을 지원
     * LineageOS v21 기반으로 구글 앱/서비스 들은 미포함. Stremio + Aptoide TV
     * 8GB 이상의 SD 카드 필요
"
"https://news.hada.io/topic?id=15868","제약 가격 책정의 마피아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             제약 가격 책정의 마피아

    제약 가격 책정의 마피아 내부

     * 미국의 4% 자금 흐름: 미국 내 자금의 4%가 몇몇 마피아 같은 의료 대기업을 통해 흐름. FTC는 이들의 운영 방식을 조사한 획기적인 보고서를 발표하고 소송을 준비 중임.
     * Gleevec 사례: 2001년 혈액암 치료제로 승인된 Gleevec는 초기 연간 비용이 $26,000였으나, 2015년 특허 만료 시 $132,000로 상승. 특허 만료 후 제네릭 경쟁이 시작되면서 가격이 99% 하락했음. 그러나 일부 지역에서는 여전히 높은 가격을 유지함.
     * 중간 관리자의 역할: 약국 혜택 관리자(PBM)라는 중간 관리자가 가격을 인위적으로 인상. PBM은 약국에서 약을 조제할 때 청구서를 보험사와 환자에게 보내고 약사에게 돈을 송금하는 역할을 함. 그러나 현재 세 개의 주요 PBM이 제약 가격을 통제하고 있음.
     * 가격 차이: 예를 들어, Costco에서 Gleevec는 $97, Walgreens에서는 $9000, PBM의 우편 주문 약국에서는 $19,200. PBM은 이러한 가격 차이를 통해 막대한 수익을 창출함.
     * PBM의 역사: 1950-60년대 제약 개발과 보험 산업이 폭발적으로 성장하면서 PBM이 등장. 초기에는 보험 고객에게 플라스틱 카드를 발급하고 약국 네트워크를 구축하는 역할을 했음.
     * 비용 절감 실패: PBM의 통합과 가격 차별화가 진행되면서, PBM은 이제 대형 의료 대기업의 일부가 됨. CVS는 Caremark, Cigna는 Express Scripts, UnitedHealth Group(UHG)은 Optum Rx를 소유하고 있음.
     * 가격 차별화의 합법화: 1987년 Medicare Anti-Kickback 법령의 예외 조항이 통과되면서 PBM이 제약사로부터 리베이트를 받을 수 있게 됨. 1994년 반독점 소송과 1999년 정부의 명시적 허용으로 인해 현재의 비밀 가격 책정 시스템이 탄생함.
     * 가격 책정의 복잡성: 다양한 벤치마크와 리베이트, 환불, 수수료 등으로 인해 명확한 가격을 알기 어려움. 예를 들어, 한 PBM은 약 10,000개의 다른 가격 목록을 가지고 있음.
     * 인슐린 가격: 주요 PBM은 특정 지역에서 독점적 지위를 가지고 있으며, 경쟁 약국을 겨냥한 마케팅 캠페인을 벌임. 또한, 제약사로부터 리베이트를 받아 더 비싼 약을 추천하고 저렴한 제네릭 약의 접근을 차단함.
     * 정치적 전투: PBM의 비밀 가격 책정과 리베이트가 문제로 지적되면서, 여러 주에서 PBM 관련 법안이 통과되고 있음. 예를 들어, 켄터키는 2021년 PBM 사용을 중단하고 약 $2.85억을 절감함.
     * FTC의 역할: FTC는 PBM의 비밀 가격 책정과 리베이트를 조사하고 있으며, 보고서를 통해 PBM의 불법 행위를 지적함. 이 보고서는 향후 소송과 주 법률 제정에 영향을 미칠 것임.

    GN⁺의 정리

     * 이 기사는 제약 가격 책정의 복잡성과 중간 관리자의 역할을 설명함.
     * PBM의 비밀 가격 책정과 리베이트가 의료 비용 상승의 주요 원인임을 강조함.
     * FTC의 보고서와 향후 소송이 PBM의 운영 방식을 변화시킬 가능성이 있음.
     * 이 기사는 제약 산업과 의료 비용 문제에 관심 있는 사람들에게 유익할 것임.
     * 비슷한 기능을 가진 프로젝트로는 Mark Cuban의 Cost Plus Drugs가 있음.

        Hacker News 의견

     * 90년대 후반에서 2000년대 초반에 PBM에서 일했음
          + 고객 약 처방 데이터를 제약사에 판매하고, 제약사는 이를 분석하여 의사에게 약을 처방하도록 조언하는 서비스 제공
          + 새로운 서비스는 제약사에서 의사에게 지불하는 금액을 처리하는 중개 역할을 함
          + 회의 중 ""리베이트""라는 용어를 사용해야 한다고 강조했음
     * 몇 년 전 Express Scripts에서 데이터 과학자로 일했음
          + 회사는 여러 합병으로 인해 IT 시스템이 복잡하고 비효율적이었음
          + ""Innovation Lab""에서 일했지만 실제로는 별다른 성과가 없었음
          + 상사는 주로 의료 데이터를 판매하는 것으로 평가받았음
     * 공공 소유가 민간 산업보다 비효율적이라는 주장에 동의하지 않음
          + 약물 접근과 가격 책정이 잘 작동하지 않음
          + 공공의 이익을 위해 다른 모델이 필요함
          + mRNA 약물의 등장으로 새로운 치료법의 생산 비용이 크게 줄어들 것임
     * The New York Times의 보도가 긍정적인 영향을 미쳤음
          + 여름에 PBM에 대한 큰 조사 기사를 발표했고, 이는 최근 FTC 발표로 이어졌음
     * Costco에서 약값이 $97인 반면, Walgreens에서는 $9000, PBM의 우편 주문 약국에서는 $19,200였음
          + 이는 농담이 아님
     * PBM은 수평적, 수직적으로 통합되었음
          + 1987년, Medicare Anti-Kickback 법령의 예외 조항이 통과되어 리베이트를 허용했음
          + PBM은 시장 점유율을 할당하는 대가로 큰 비밀 리베이트를 받음
          + 해결책은 의사와 보험사, 약국과 PBM 간의 통합을 금지하고, 리베이트 예외 조항을 폐지하며, 가격 목록을 공개하는 것임
     * 특허와 같은 지적 재산권이 문제의 근본 원인임
          + 독점이 존재하는 한 건강한 시장은 존재할 수 없음
     * 제약 회사의 수익이 GDP를 증가시킬 수 있음
          + 납 노출이 GDP에 영향을 미치지 않는 것이 위안이 됨
     * 바이오테크에서 일하는 사람으로서, 새로운 치료법 개발이 어렵고 비용이 많이 듦
          + 중개인이 과학자와 환자의 노력을 착취하는 것이 실망스러움
     * 이 기사는 잘 조사되었고 정보가 풍부함
          + 저자에게 감사의 말을 전하고 싶음
          + 해결책으로는 입법부가 특정 관행을 불법으로 규정하는 법을 제정하는 것이 있음
          + 그러나 입법부와 행정부의 부패로 인해 통과되기 어려울 것임
"
"https://news.hada.io/topic?id=15959","타입을 이용하여 안전한 코딩을 위한 Type-Driven Development","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              타입을 이용하여 안전한 코딩을 위한 Type-Driven Development

     * 타입은 함수와 데이터가 준수해야 하는 엄격한 계약
     * 타입은 어떠한 값이 속할 수 있는 집합
     * 타입은 함수를 통해 변환될 수 있고 이를 통해 범위가 변경 될 수 있다
          + 단사 함수 - 범위가 작은 타입에서 큰 타입으로 변환하는 것
          + 전사 함수 - 범위가 큰 타입에서 작은 타입으로 변환하는 것
          + 전단사 함수 - 일대일로 대응
     * 로직의 입력과 출력을 타입으로 나타낼 수 있음
          + 이말은 타입을 통해 로직을 추상화 하는 것이 가능하다는 것
          + 입력과 출력을 타입으로 나타내고 이를 통해 로직을 설계할 수 있다
     * 기본 데이터 타입에 이름을 붙여 다른 타입으로 구분할 수 있음
     * 타입 시스템을 활용하면 여러 문제를 해결할 수 있음
          + 제네릭을 이용한 일반화
          + 팬텀 타입을 이용한 범위 제한
          + 유니온 타입(혹은 합타입)을 이용한 행동 제한
          + 최소 타입을 이용한 TODO 처리
          + 타입을 이용한 유한 상태 머신 구현
          + 의존 타입을 이용한 검증
     * 타입 주도 개발은 타입을 먼저 정의하고 이를 통해 코드를 작성하는 방법론
     * 타입 주도 개발은 원한다면 어디에도 적용할 수 있으며 각 절차에 대한 결과를 타입으로 정의하는 것으로 시작
     * 요구사항을 분석할 때 타입으로 추상화 해볼 것
     * 같은 기본 데이터 타입이더라도 의미가 다르다면 이를 구분하기 위해 다른 타입으로 정의하는 것이 좋음
     * 요구사항을 분석하고 타입을 생각했다면 로직을 타입으로 추상화해볼 것
          + (String) -> List<Token>과 같은 느낌으로 추상화 가능
     * 타입 주도 개발은 테스트 주도 개발과 어울림
          + 입력과 출력 결과를 미리 정의하고 코드를 작성한다는 점에서 타입 주도 개발과 테스트 주도 개발은 유사
          + 타입 주도 개발이 타입 시스템을 이용하여 컴파일 시간에 미리 안정성을 체크할 수 있다면 테스트 주도 개발은 타입만으로는 잡아낼 수 없는 오류나 예외 상황을 테스트 코드를 통해 잡아낼 수 있음
     * 설계자의 입장에 타입 시스템을 활용한다는 것은 다른 개발자를 위한 코드 규칙을 만드는 것과 같음
     * 다만 일일히 타입의 정의하여 타입이 너무 많아지거나 타입의 정의가 복잡해지면 오히려 코드를 작성하기 힘들어지거나 가독성을 떨어뜨릴 수 있기에 항상 적절한 상태를 유지하는 것이 중요

     단사 함수는 변환된 값의 집합이 공역과 치역이 일치하지 않는 경우를 말한다. 이를 조금 더 단순하게 표현하면 범위가 작은 타입에서 큰 타입으로 변환하는 것을 말한다.

   단사 함수란 임의의 서로 다른 두 변수의 상이 서로 다른 함수를 가리킵니다. 즉, 단사 함수 f의 정의역 X에 속하는 모든 원소 a와 b에 대해, a ≠ b이면 f(a) ≠ f(b)입니다. 한국 고교 수학에서 '일대일 함수'라고 부르는 것이 단사 함수입니다.

   상세한 설명 감사합니다. :) 제가 잘못 이해하고 있었네요. 안그래도 몇 번 지적받은 부분이라 조금 더 공부해서 내용을 다시 정리하겠습니다.
"
"https://news.hada.io/topic?id=15880","카메라의 등장으로 시작된 Gilded Age 사생활 보호 전쟁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   카메라의 등장으로 시작된 Gilded Age 사생활 보호 전쟁

  역사

    카메라의 등장과 황금시대 미국인의 프라이버시 보호 투쟁

     * 1904년, 엘리자베스 펙이라는 과부가 아이오와의 작은 마을에서 초상화를 찍음
     * 사진사가 펙의 사진을 Duffy’s Pure Malt Whiskey에 판매함
     * Duffy’s는 펙의 사진을 허위 광고에 사용, 펙의 동의 없이 그녀를 간호사로 묘사하고 술을 추천하는 내용으로 광고함

    카메라의 첫 번째 황금기

     * 1888년 조지 이스트먼이 코닥 카메라를 출시하면서 시작됨
     * 코닥 카메라는 사진 촬영을 대중화하고, 사진을 쉽게 인화할 수 있게 함
     * 1905년까지 코닥은 120만 대의 카메라를 판매하고 미국 인구의 3분의 1이 사진 촬영을 시작함

    프라이버시 침해와 상업적 악용

     * 카메라의 대중화로 인해 개인의 이미지 통제 불가능해짐
     * 광고업자들은 초상화를 구매하여 동의 없이 광고에 사용함
     * 유명인들도 프라이버시 침해를 겪음, 예를 들어 시어도어 루즈벨트 대통령과 레지널드 클레이풀 밴더빌트가 무단 촬영에 분노함

    법적 대응과 프라이버시 권리

     * 1902년, 뉴욕주 항소법원은 프라이버시 권리가 존재하지 않는다고 판결
     * 이 판결에 대한 대중의 분노로 뉴욕주 입법부는 초상권 보호법을 제정
     * 조지아주 대법원도 이 권리를 인정하며, 이후 대부분의 주 법원이 이를 따름

    GN⁺의 정리

     * 카메라의 대중화는 개인의 프라이버시 침해 문제를 야기함
     * 법적 대응이 늦어지면서 많은 사람들이 피해를 입음
     * 현대에도 기술 발전에 따른 프라이버시 문제는 여전히 해결되지 않음
     * 비슷한 기능을 가진 프로젝트로는 구글 포토, 애플 아이클라우드 등이 있음
"
"https://news.hada.io/topic?id=15951","로마 숫자 끝의 "j" 문자의 중요성 (2013)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      로마 숫자 끝의 ""j"" 문자의 중요성 (2013)

    로마 숫자 끝에 ""j"" 문자의 의미

     * 질문
          + 1907년 출판된 책에서 16세기와 17세기 초의 날짜가 로마 숫자로 기록되어 있는데, 끝에 ""j""가 추가된 경우가 있음
          + 이 현상이 특정 서기의 스타일인지, 아니면 더 널리 퍼진 관습인지 궁금함
     * 답변
          + ""j"" 문자는 로마 숫자의 끝에 ""i"" 대신 사용된 ""swash"" 문자로 시작되었음
          + 숫자가 끝났음을 명확히 하기 위해 마지막 ""i""를 ""j""로 대체함
          + 최근까지도 의료 처방전에서 오해를 방지하기 위해 마지막 ""j""를 사용하는 것이 권장되었음
          + 예를 들어, ""xvij""는 17을 의미하며, 이는 숫자의 일부임

    GN⁺의 정리

   이 기사는 16세기와 17세기 초의 역사적 문서에서 로마 숫자 끝에 ""j"" 문자가 사용된 이유를 설명함. 이는 숫자가 끝났음을 명확히 하기 위한 관습으로, 특히 의료 처방전에서 오해를 방지하기 위해 사용되었음. 이 기사는 역사적 문서 해석에 관심이 있는 사람들에게 유용할 수 있음. 비슷한 기능을 가진 프로젝트로는 역사적 문서 해석을 돕는 다양한 디지털 아카이브와 데이터베이스가 있음.
"
"https://news.hada.io/topic?id=15993","Maestro: Netflix의 워크플로우 오케스트레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Maestro: Netflix의 워크플로우 오케스트레이터

     * Maestro: Netflix의 워크플로 오케스트레이터
     * TL;DR
          + Netflix는 Maestro 소스 코드를 공개했음
          + GitHub 저장소에서 시작할 수 있으며, 유용하다고 생각되면 별을 달아달라는 요청
     * Maestro란 무엇인가
          + Maestro는 대규모 워크플로를 관리하기 위해 설계된 범용, 수평 확장 가능한 워크플로 오케스트레이터임
          + 데이터 파이프라인 및 머신러닝 모델 훈련 파이프라인과 같은 워크플로의 전체 수명 주기를 관리함
          + 사용자는 Docker 이미지, 노트북, bash 스크립트, SQL, Python 등 다양한 형식으로 비즈니스 로직을 패키징할 수 있음
          + 전통적인 DAG(Directed Acyclic Graph)만 지원하는 워크플로 오케스트레이터와 달리, Maestro는 비순환 및 순환 워크플로를 모두 지원하며, foreach 루프, 서브워크플로, 조건부 분기 등 여러 재사용 가능한 패턴을 포함함
     * Maestro와 함께한 여정
          + 수십만 개의 워크플로를 사용자에게 최소한의 중단으로 성공적으로 마이그레이션했음
          + 지난 1년 동안 실행된 작업이 87.5% 증가했으며, 하루 평균 50만 개의 작업을 실행하고 있음
     * 확장성 및 다목적성
          + Maestro는 Netflix의 수천 명의 최종 사용자, 애플리케이션 및 서비스에 Workflow-as-a-Service를 제공하는 완전 관리형 워크플로 오케스트레이터임
          + ETL 파이프라인, ML 워크플로, AB 테스트 파이프라인 등 다양한 워크플로 사용 사례를 지원함
          + Netflix의 데이터 테이블이 단일 데이터 웨어하우스에 있기 때문에 단일 오케스트레이터가 이를 처리해야 한다고 믿음
     * Maestro 소개
          + JSON 형식으로 정의된 워크플로 정의를 사용함
          + 사용자 제공 필드와 Maestro가 관리하는 필드를 결합하여 유연하고 강력한 오케스트레이션 정의를 형성함
          + 워크플로 정의는 속성과 버전 관리된 워크플로로 구성됨
          + 속성에는 작성자 및 소유자 정보, 실행 설정 등이 포함됨
          + 버전 관리된 워크플로에는 고유 식별자, 이름, 설명, 태그, 시간 초과 설정 및 우선 순위 수준이 포함됨
     * 워크플로 실행 전략
          + 순차 실행 전략: FIFO 순서로 워크플로를 하나씩 실행함
          + 엄격한 순차 실행 전략: 차단 오류가 있는 경우 실행을 차단하고 수동으로 오류를 해결해야 함
          + 첫 번째만 실행 전략: 현재 실행 중인 워크플로가 완료될 때까지 새 워크플로 인스턴스를 대기열에서 제거함
          + 마지막만 실행 전략: 최신 트리거된 워크플로만 실행하고 기존 실행 중인 인스턴스를 중지함
          + 동시성 제한 병렬 실행 전략: 사전 정의된 동시성 제한에 따라 여러 워크플로 인스턴스를 병렬로 실행함
     * 매개변수 및 표현 언어 지원
          + 동적 매개변수와 코드 삽입을 지원하여 워크플로의 유연성과 동적 성을 크게 향상시킴
          + 보안 및 안전 문제를 해결하기 위해 자체 맞춤형 표현 언어 파서를 개발함
          + 간단하고 안전한 표현 언어(SEL): 코드 삽입과 관련된 위험을 해결하기 위해 개발된 간단하고 안전한 표현 언어
          + 출력 매개변수: 사용자 실행에서 출력 매개변수를 시스템으로 반환할 수 있음
          + 매개변수화된 워크플로: 사용자 정의 매개변수를 기반으로 런타임에 단계별로 초기화됨
     * 워크플로 실행 패턴
          + Foreach 지원: 동일한 작업을 다른 매개변수로 반복 실행하는 데 사용됨
          + 조건부 분기 지원: 특정 조건이 충족될 때만 후속 단계를 실행함
          + 서브워크플로 지원: 공통 기능을 여러 워크플로에서 공유할 수 있도록 함
     * 단계 런타임 및 단계 매개변수
          + 단계 런타임 인터페이스: 실행 시간에 작업을 설명하는 인터페이스
          + 단계 매개변수 병합: 단계 실행 전에 런타임 매개변수와 태그를 주입하여 동적으로 단계 동작을 제어함
     * 단계 종속성 및 신호
          + 단계 종속성을 사용하여 실행 종속성을 표현할 수 있음
          + 신호는 매개변수 값을 포함한 정보를 전달하는 메시지 조각임
     * 중단점
          + 워크플로 단계에 중단점을 설정하여 코드 수준의 중단점과 유사하게 작동함
          + 중단점에 도달하면 해당 단계가 ""일시 중지"" 상태로 들어가고 사용자가 수동으로 재개할 때까지 워크플로 그래프의 진행이 중단됨
     * 타임라인
          + 단계 실행 타임라인을 포함하여 모든 중요한 이벤트를 캡처함
          + 디버깅에 유용하며 단계 상태에 대한 통찰력을 제공함
     * 재시도 정책
          + 실패로 인해 터미널 상태에 도달한 단계에 대해 재시도 정책을 지원함
          + 플랫폼 오류와 사용자 정의 조건에 대한 재시도를 구분함
     * 집계 보기
          + 워크플로 인스턴스의 모든 단계의 집계 상태를 볼 수 있음
          + 현재 실행의 런타임 데이터와 기본 집계를 결합하여 집계 상태를 계산함
     * 롤업
          + 워크플로 인스턴스의 높은 수준의 요약을 제공함
          + 각 단계의 상태와 각 상태의 단계 수를 자세히 설명함
     * Maestro 이벤트 발행
          + 워크플로 정의, 워크플로 인스턴스 또는 단계 인스턴스가 변경될 때 이벤트를 생성하고 외부 시스템에 발행함
          + 내부 이벤트와 외부 이벤트로 구분됨
     * Maestro 시작하기
          + Netflix에서 광범위하게 사용되었으며, 이제 소스 코드를 공개함
          + GitHub 저장소에서 코드를 찾을 수 있으며, 질문이나 의견이 있으면 GitHub 이슈를 생성해달라는 요청
     * 감사의 말
          + Maestro 프로젝트에 기여한 팀원들과 Netflix의 동료들에게 감사의 말을 전함

GN⁺의 정리

     * Maestro는 Netflix의 대규모 워크플로를 관리하기 위해 설계된 오케스트레이터로, 다양한 형식의 비즈니스 로직을 지원함
     * 동적 매개변수와 코드 삽입을 통해 유연성과 동적 성을 크게 향상시킴
     * 다양한 실행 전략과 패턴을 제공하여 복잡한 워크플로를 쉽게 정의하고 관리할 수 있음
     * Netflix의 데이터 웨어하우스와 같은 단일 데이터 소스를 처리하는 데 적합함
     * 유사한 기능을 제공하는 다른 오케스트레이터로는 Apache Airflow와 Prefect가 있음

        Hacker News 의견

     * 기업 기술 블로그와 내부 시스템에 감명받았으나, 이제는 코드가 부채임을 깨달음
          + 오픈 소스 사용을 선호하며, 코드 유지보수와 기능 추가가 필요함
          + 비즈니스에 중요한 코드가 아닌 것은 자원 낭비임
     * 엔지니어들이 워크플로우 솔루션에 만족하기까지 여러 번의 반복이 필요함을 궁금해함
          + Netflix, Uber, Amazon 모두 여러 솔루션을 구축함
          + 엔지니어들이 워크플로우 엔진을 만드는 것에 흥미를 느낌
     * Windmill.dev 창립자 의견
          + Maestro와 Windmill은 유사점이 많음
          + 주요 차이점:
               o Windmill은 Rust로 작성됨
               o Maestro는 CockroachDB를 사용, Windmill은 자체 샤딩 알고리즘 사용
               o 라이선스 차이: Maestro는 Apache 2.0, Windmill은 AGPL
               o Netflix의 지원을 받는 Maestro와 비교해 Windmill은 작은 회사임
               o Maestro는 자체 호스팅 문서와 UI가 부족함
     * Activebatch 사용 경험 공유
          + Activebatch는 간단한 MS SQL DB와 Windows GUI 설치로 강력한 자동화 환경을 제공함
          + Airflow와 다른 오픈 소스 경쟁자들은 복잡함
          + Activebatch가 기업 판매 모델로 인해 널리 사용되지 못하는 것이 아쉬움
     * Netflix/Conductor 사용에 대한 혼란
          + 프로젝트가 Netflix/Conductor를 사용하는 것처럼 보이지만, 아카이브된 버전을 사용 중임
          + Orkes Conductor를 사용하지 않음
     * 오케스트레이터에 대한 의견
          + 오픈 소스와 공개 개발은 훌륭하지만, 이미 많은 오케스트레이터가 존재함
          + 새로운 옵션이 상업적으로 사용될 가능성이 낮음
     * Temporal과 비교
          + Maestro는 Java로 작성되었고, Temporal은 Go로 작성됨
     * 프로젝트에 대한 긍정적인 평가
          + ML과 데이터 엔지니어링 프로젝트에서 유사한 것을 만들고 싶었음
          + 테스트를 기대함
     * Conductor와의 차이점에 대한 질문
          + 코드에서 많은 유사점을 발견함
          + JSON을 워크플로우 정의 언어로 사용함
     * 기사 내용에 대한 비판
          + AI가 작성한 것처럼 느껴짐
          + 실제 사용 사례의 예제 워크플로우가 필요함
"
"https://news.hada.io/topic?id=15952","C/C++용 rr – 기록 및 재생 디버거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        C/C++용 rr – 기록 및 재생 디버거

     * rr 소개
          + rr은 Linux에서 C/C++ 디버깅 도구로, gdb를 보완하고자 함
          + 실패를 한 번 기록하고, 그 기록을 반복적으로 디버깅할 수 있음
          + 동일한 실행을 매번 재현하여 디버깅 가능
          + gdb를 통해 효율적인 역방향 실행 제공
     * rr 기능
          + 낮은 오버헤드
          + 다양한 애플리케이션 기록 및 재생 지원 (Firefox, Chrome, QEMU, LibreOffice 등)
          + 다중 프로세스 워크로드 기록, 재생 및 디버깅 가능
          + gdb 스크립팅 및 IDE 통합 지원
          + 내구성 있고 압축된 추적 파일, 기계 간 이동 가능
          + 간헐적 버그를 재현하기 위한 혼돈 모드 제공
     * rr 디버깅 경험
          + 애플리케이션 기록: rr record /your/application --args...
          + 기록된 실행을 디버깅: rr replay
          + 기록된 추적을 결정론적으로 디버깅
          + 일반적인 gdb 명령어 사용 가능
          + 역방향 실행을 통해 빠르게 문제 지점으로 이동 가능
     * 비디오
          + Firefox 기록 및 재생 데모 비디오
          + rr의 기본 기능을 자세히 설명하는 비디오
          + Robert O'Callahan의 고급 기술 강연 비디오
     * 시작하기
          + 소스에서 빌드: 패키지가 작동하지 않을 경우 권장
          + Fedora 및 Ubuntu에서 설치 방법 제공
     * 배경 및 동기
          + 간헐적 실패 디버깅을 쉽게 하기 위해 개발
          + 결정론적 재생을 통해 디버깅 과정에서 얻은 정보가 유효하게 유지됨
          + 역방향 실행을 통해 디버깅 과정이 더 쉬워짐
          + rr은 많은 대형 및 소형 프로젝트에서 정기적으로 사용됨
     * rr의 작동 방식
          + Linux 사용자 공간 프로세스를 기록하고 커널로부터의 모든 입력을 캡처
          + 재생 시 명령어 수준의 제어 흐름, 메모리 및 레지스터 내용 보장
          + 메모리 레이아웃, 객체 주소, 레지스터 값 등이 동일하게 유지됨
          + 퍼저 및 무작위 결함 주입기와 함께 사용 시 더욱 강력해짐
     * rr의 맥락
          + 기록 및 재생 디버깅은 오래된 아이디어
          + Firefox에 중점을 둔 설계 목표
          + 배포 가능성: 일반 Linux 커널에서 실행, 시스템 구성 변경 불필요
          + 낮은 런타임 오버헤드
          + 단순한 설계: 복잡한 기술 회피
     * 제한 사항
          + 단일 코어 머신을 에뮬레이트
          + 기록 트리 외부와 메모리를 공유하는 프로세스 기록 불가
          + 현대적인 x86 CPU 또는 특정 ARM CPU 필요
          + 기록된 프로세스가 실행하는 모든 시스템 호출에 대한 지식 필요
          + 커널 변경, 시스템 라이브러리 업데이트, 새로운 CPU 패밀리에 대응 필요
     * 추가 참고 자료
          + 확장 기술 보고서
          + rr 위키
          + 메일링 리스트 또는 chat.mozilla.org의 #rr에서 질문 가능

GN⁺의 정리

     * rr은 Linux에서 C/C++ 디버깅을 위한 강력한 도구로, 결정론적 재생을 통해 디버깅 효율성을 크게 향상시킴
     * 다양한 애플리케이션과 다중 프로세스 워크로드를 지원하며, 낮은 오버헤드로 실용적임
     * 역방향 실행 기능을 통해 디버깅 과정이 더욱 용이해짐
     * Firefox와 같은 복잡한 애플리케이션을 디버깅할 수 있어 일반적으로 유용함
     * 비슷한 기능을 가진 도구로는 gdb와 Valgrind가 있음

        Hacker News 의견

     * GDB는 이미 역디버깅 기능을 제공하고 있음
     * rr은 더 많은 기능과 유연성을 제공함
     * rr을 사용하여 큰 코드베이스를 역공학하는 데 성공적이었음
     * 디버거는 심볼 목록과 시스템 호출 이해가 필요함
     * rr이 Rust, Zig, Odin, Nim과 같은 언어에서도 작동하는지 궁금함
     * Python, JS, C#과 같은 관리 메모리 언어에서는 작동하지 않을 것임
     * Rust로 포팅을 시도한 프로젝트가 있었으나 중단되었음
     * C++에서 Rust로의 재작성의 영향과 이점에 대한 비교 연구가 흥미로울 것임
     * rr은 매우 유용하지만 동시성 버그를 재현하지 못하는 경우가 많음
     * 일부 언어가 rr을 도구에 직접 통합하면 매우 유용할 것임
     * rr을 사용한 C/C++ 디버깅은 매우 강력하며 디버깅 과정을 크게 개선함
     * Pernosco는 rr을 기반으로 하여 전체 프로그램 실행의 쿼리 가능한 데이터베이스를 추가함
          + 잘못된 값을 클릭하면 그 값이 어디서 왔는지 즉시 설명해줌
          + 코드 이해 없이 디버거에게 실제로 무슨 일이 일어났는지 물어볼 수 있음
     * C/C++ 코드가 Python에서 호출되는 dll/so로 컴파일된 경우에도 사용할 수 있는지 궁금함
     * rr의 Ryzen CPU 관련 문제가 해결되었는지 궁금함
"
"https://news.hada.io/topic?id=15930","방글라데시, 반정부 시위로 수십 명 사망 후 통행금지 시행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    방글라데시, 반정부 시위로 수십 명 사망 후 통행금지 시행

    방글라데시에서 학생 시위 격화

     * 방글라데시 전국 통행금지령 발표
          + 방글라데시 정부는 금요일 저녁 전국 통행금지령을 발표함
          + 경찰과 학생 단체 간의 충돌로 수십 명이 사망함
          + 정부 직업의 일부를 독립 전쟁 참전용사 후손에게 할당하는 새로운 정책에 대한 반발로 발생함
     * 다카에서의 시위
          + 다카에서 시위대가 국영 방송국을 공격하고 경찰 부스를 방화함
          + 고무탄과 최루탄을 사용하는 보안군과 무장한 시위대 간의 거리 전투로 여러 지역의 생활이 중단됨
          + 150명 이상의 학생들이 고무탄에 맞아 부상당해 병원에서 치료 중임
     * 통행금지와 인터넷 차단
          + 군대가 통행금지령을 시행하기 위해 배치됨
          + 학교와 대학이 무기한 휴교에 들어감
          + 당국은 허위 정보 확산을 막기 위해 전국적으로 모바일 인터넷 서비스를 차단함
          + 주요 신문 웹사이트와 TV 채널이 접근 불가능하거나 업데이트되지 않음
     * 사망자와 부상자
          + 사망자 수는 수십 명으로 추정됨
          + Prothom Alo 신문은 29명이 사망하고 1,500명이 부상당했다고 보도함
          + AFP는 경찰 대변인을 인용해 사망자 수를 32명으로 보고함
     * 시위의 배경
          + 시위는 몇 주 동안 지속되었지만 최근 며칠 동안 급격히 격화됨
          + 시위는 Hasina 총리와 그녀의 정당인 Awami League에 대한 가장 심각한 도전임
          + Hasina 총리는 독립 전쟁에 참여한 가족들에게 직업을 제공해야 한다고 주장함
          + 비판자들은 이 프로그램이 경제적 어려움 속에서 Awami League와 가까운 가족들에게만 혜택을 준다고 주장함
     * 경제 상황과 정부 직업
          + Hasina 총리는 방글라데시의 섬유 수출 산업을 발전시키고 공공 인프라를 개선한 공로를 인정받음
          + 그러나 최근 인플레이션이 9%를 넘고 성장률이 정체됨
          + 정부 직업은 젊은 구직자들에게 가장 안전하고 선호되는 옵션으로 여겨짐
          + 정부 직업의 절반 이상이 다양한 그룹에게 할당됨
     * 정책 논란
          + 2018년까지 독립 전쟁 참전용사 후손에게 30% 할당이 있었으나, 폭력적인 시위로 인해 Hasina 정부가 이를 취소함
          + 지난달 방글라데시 법원이 이 정책을 재도입함
          + Hasina 총리는 할당 비율을 낮출 의향이 있지만, 정책 자체는 유지되어야 한다고 주장함
     * 정치적 상황
          + Hasina 총리는 2009년 이후 모든 선거에서 승리함
          + 최근 선거는 불공정하다는 비판을 받음
          + 정부는 수천 명의 야당 인사를 감옥에 가두고, 경쟁 정당이 선거를 보이콧한 후 무투표로 승리함
     * 법적 상황
          + 대법원은 할당 정책을 일시 중단하고 8월 7일에 합법성에 대한 판결을 내릴 예정임
          + Hasina 총리는 학생들에게 인내심을 가져달라고 호소함

    GN⁺의 정리

     * 방글라데시의 학생 시위는 정부의 새로운 직업 할당 정책에 대한 반발로 발생함
     * 시위는 Hasina 총리와 Awami League에 대한 심각한 도전으로, 경제적 어려움과 정치적 불만이 배경임
     * 정부는 통행금지령과 인터넷 차단을 통해 시위를 진압하려 하고 있음
     * 이 기사는 방글라데시의 정치적, 사회적 상황을 이해하는 데 도움이 되며, 비슷한 기능을 가진 다른 프로젝트로는 인도의 학생 시위 사례를 참고할 수 있음

        Hacker News 의견

     * 학생들이 쿼터 시스템 개혁을 위해 시위 중임
          + 2018년에 폐지되었으나 최근 다시 도입됨
          + 쿼터 시스템은 공공 부문 일자리의 56%를 전쟁 참전용사 가족에게 할당함
          + 전쟁은 1971년에 일어났으며, 현재는 3세대 또는 4세대가 혜택을 받음
          + 정부 충성파와 그들의 부하들이 가짜 참전용사 증명서를 사용해 일자리를 얻음
          + 방글라데시는 세계에서 가장 부패한 국가 중 하나임
          + 학생들은 이 시스템을 개혁하고자 함
          + 정부와 그들의 부하들이 무력으로 대응해 50명 이상의 비무장 학생을 살해함
          + 2009년 이후로 모든 반대 의견이 이런 식으로 처리됨
          + 독재 정권이 2009년부터 계속되고 있음
          + 부패, 인플레이션, 실업, 폭정으로 인해 사람들이 분노함
          + 경찰이 청소년과 대학생을 살해하는 영상을 보면 누구도 참을 수 없음
          + 정부가 모든 인터넷과 전화 연결을 차단함
          + 가족과 연락이 끊김
     * 방글라데시의 학위와 일자리가 참전용사 후손들에게 주어짐
          + 70년대부터 계속된 연고주의가 문제임
          + 최근 시위가 시작되었고, 부당한 시스템에 반대하는 사람들을 살해하고 강간함
          + 인터넷이 차단됨
     * URL을 변경함
          + 사용자가 보낸 이메일을 반영함
          + 사건 자체에 대한 내용이 더 적절하다는 의견을 반영함
     * 방글라데시 사람과 대화함
          + 파티에서 죽을 뻔했음
          + 경찰이 다른 학생들을 구타하는 영상을 촬영함
          + 정부가 인터넷을 차단한 것이 슬픔
     * NetBlocks가 정부가 인터넷 접근을 차단하는 방법에 대해 언급했는지 궁금함
          + 방글라데시 관련 제공자에서 서브넷이 여전히 발표되고 있음
          + AS 17494, AS 38592, AS 136246, AS 152304, AS 24323
     * 방글라데시가 학생 시위에서 경찰 살해를 보도하고 온라인 참여를 억제하기 위해 거의 전면적인 인터넷 차단을 시행함
          + 사건을 정확하게 묘사하는 것이 중요함
     * 평화롭게 시작된 시위가 정부의 절대적인 오처리와 관리 실패로 인해 100명 가까이 경찰에 의해 사망함
          + 현재 시위는 쿼터 시스템에 관한 것이 아님
          + 부패와 편애로 인한 사회적, 경제적 기회의 체계적 붕괴의 결과임
     * 방글라데시 출신의 친구들이 대부분 해외에 있음
          + 방글라데시에서 인도로 연결을 설정하는 것이 얼마나 위험할지 궁금함
          + 학생들과 방글라데시 사람들을 위한 최선의 소망을 전함
          + 트위터에서 본 내용이 끔찍했음
          + 가능한 사람들은 모바일을 사용해 증거를 남기길 바람
     * 정부가 이런 일을 할 때 나쁜 결과를 기대해야 함
          + 시위대의 요구는 전혀 비합리적이지 않음
          + 공무원 임명에서 실력주의를 지향해야 함
     * 인터넷 트래픽 시각화 자료 제공
          + 링크
"
"https://news.hada.io/topic?id=15886","AI 컴퓨팅에 대한 이야기를 해 보자. ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         AI 컴퓨팅에 대한 이야기를 해 보자.
"
"https://news.hada.io/topic?id=15933","21세기 미국 교통사고 사망자 지도화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          21세기 미국 교통사고 사망자 지도화

     * 전국 비전-제로 지도
     * 비전-제로란?
          + 비전-제로는 교통사고로 인한 사망자와 중상을 0으로 줄이기 위한 국제적인 운동임
          + 스웨덴에서 시작되어 전 세계로 확산됨
     * 전국 비전-제로 지도 소개
          + 전국 비전-제로 지도는 미국 전역의 교통사고 데이터를 시각화한 도구임
          + 교통사고의 위치, 원인, 빈도 등을 한눈에 파악할 수 있음
     * 주요 기능
          + 데이터 시각화: 교통사고 데이터를 지도 위에 시각적으로 표시함
          + 필터링: 사고 유형, 시간대, 원인 등 다양한 기준으로 데이터를 필터링할 수 있음
          + 통계 분석: 특정 지역의 교통사고 통계를 제공하여 문제점을 파악할 수 있음
     * 활용 사례
          + 정책 수립: 교통안전 정책을 수립하는 데 유용함
          + 교육 자료: 교통안전 교육 자료로 활용 가능함
          + 연구: 교통사고 원인 분석 및 연구에 활용됨
     * 데이터 출처
          + 교통사고 데이터는 주로 경찰 보고서, 병원 기록, 보험사 데이터 등에서 수집됨
          + 데이터의 정확성과 신뢰성을 위해 여러 출처를 교차 검증함
     * 향후 계획
          + 데이터 업데이트: 최신 데이터를 지속적으로 반영할 계획임
          + 기능 개선: 사용자 피드백을 반영하여 기능을 개선할 예정임
          + 협력 확대: 더 많은 기관과 협력하여 데이터의 범위와 품질을 향상시킬 계획임

GN⁺의 정리

     * 전국 비전-제로 지도는 교통사고 데이터를 시각화하여 교통안전 개선에 기여하는 도구임
     * 정책 수립, 교육, 연구 등 다양한 분야에서 활용 가능함
     * 데이터의 정확성과 신뢰성을 위해 여러 출처를 교차 검증함
     * 향후 데이터 업데이트와 기능 개선을 통해 지속적으로 발전할 예정임
     * 유사한 기능을 가진 도구로는 Waze, Google Maps의 교통사고 보고 기능 등이 있음

        Hacker News 의견

     * 서버를 복구했으며 RAM을 8배로 늘렸지만 postgres가 고장났음
     * 자원봉사 소방관으로 일했으며 지도에서 일부 사망 사례를 확인할 수 있었음
          + 사고 유형, 원인, 연령 등은 정확하지만 차량 내 인원 수, 안전벨트 사용 여부 등은 부정확함
     * 거주 지역에서는 큰 도로에서 사망 사고가 더 많이 발생함
          + 좁은 도로는 불편하지만 속도를 줄이고 주의를 기울이게 함
     * 보행자에게 위험한 교통 패턴이 있는 지역에 살고 있으며, 사망률이 높다는 것을 확인할 수 있었음
     * 이 프로젝트는 훌륭하지만 21세기 교통의 문제점을 보여줌
          + 많은 생명이 금속 덩어리를 조작하는 과정에서 잃어짐
     * 데이터 소스가 불확실하며, 지역 뉴스와 비교했을 때 보행자 사망 사고가 지도에 나타나지 않음
     * 현재 로딩되지 않지만, 차량 통행량에 따라 데이터를 정규화하면 더 나은 위험 지역 파악이 가능할 것임
     * 필터 기능이 있는지 궁금함
          + 예를 들어, DUI, 과속/난폭 운전, 자전거 피해자, 보행자 피해자, 단일/다중 차량 사고, 의학적 원인 등을 비교할 수 있으면 좋겠음
     * Linode의 RAM을 두 배로 업그레이드했으며, 로딩에 도움이 되기를 바람
     * 사이트가 로딩되지 않을 경우, 데이터베이스를 쉽게 쿼리할 수 있는 링크 제공: https://cdan.dot.gov/query
"
"https://news.hada.io/topic?id=15906","7세 딸이 HTML로 만든 웹사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          7세 딸이 HTML로 만든 웹사이트

     * 동물
          + 고양이 페이지로 이동하려면 여기를 클릭
          + 개 페이지로 이동하려면 여기를 클릭
          + 치타 페이지로 이동하려면 여기를 클릭
     * 기술
          + 태블릿 페이지로 이동하려면 여기를 클릭
          + 컴퓨터 페이지로 이동하려면 여기를 클릭

GN⁺의 정리

     * 이 문서는 동물과 기술 관련 페이지로 이동할 수 있는 링크를 제공함.
     * 각 링크는 특정 동물이나 기술 제품에 대한 정보를 제공하는 페이지로 연결됨.
     * 사용자가 관심 있는 주제에 쉽게 접근할 수 있도록 도와줌.

        Hacker News 의견

     * 어린 아이가 기술을 즐기는 모습을 보니 기쁨
          + 컴퓨터 과학에서 재미를 유지하는 것이 중요함
          + 컴퓨터를 새로운 방향으로 발전시키는 것이 우리의 책임임
     * 7살 아이처럼 HTML을 작성하는 것이 재미있음
          + CSS와 시맨틱 마크업이 재미를 방해할 수 있음
     * 어린 소녀들에게 코딩을 가르치는 것이 즐거움
          + Girls Code Lincoln의 창립자로서 몇 년간 소녀들에게 코딩을 가르침
          + 유용한 리소스 공유
               o 유튜브 시리즈: 학생들이 STEM 분야의 여성들을 인터뷰한 영상
               o 팟캐스트 시리즈: 역사적인 STEM 여성들과 현재의 STEM 여성들에 대한 이야기
               o TED 강연: 딸이 STEM에 관심을 가지게 하는 방법
     * 태블릿이 컴퓨터만큼 유용하지 않음
          + MacRumors 포럼의 80%를 요약한 말
     * 컴퓨터가 매우 중요한 기술임
          + 아이들의 시각이 귀여움
     * 이 작은 사이트가 과거 인터넷 시절을 떠올리게 함
          + 90년대에 포트폴리오 웹사이트를 만들었던 경험
          + HTML 4로 만든 기본적인 사이트가 첫 디자인 직업을 얻는 데 도움을 줌
     * 고양이가 12피트라면 무서울 것이라는 아이의 상상력
          + 사회가 원하는 방식으로 아직 완전히 형성되지 않은 마음의 경로가 멋짐
     * HTML 파일을 백업하여 아이의 작업을 기록으로 남기는 것을 제안함
          + 가족 도메인에 저장하여 안전하게 보관할 수 있음
     * 딸의 웹사이트가 영감을 주어 오늘 웹사이트를 만듦
          + 프로그래밍을 재미있게 만들기 위해 단순하게 시작하는 것이 좋음
     * Ladybird에서 잘 보임
"
"https://news.hada.io/topic?id=15884","Microsoft 사용자 'reactions' 이메일 전송 중지 위한 postfix header 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Microsoft 사용자 'reactions' 이메일 전송 중지 위한 postfix header 추가

    Microsoft 사용자들이 이메일에 '반응'을 보내지 못하게 하기 위한 postfix 헤더 추가

      최근 이메일 반응 문제

     * 최근 몇 달 동안, Microsoft 사용자들이 보낸 이메일 반응이 증가하고 있음
     * Microsoft 생태계에서는 이러한 반응이 Signal 메시지의 '좋아요'나 '하트' 반응처럼 처리됨
     * Microsoft 생태계에 속하지 않은 사람에게는 이러한 반응이 이메일로 도착함
     * 원하지 않는 반응 이메일을 받기 싫음

      postfix에 헤더 추가하기

     * Microsoft는 특정 헤더를 이메일에 추가하면 반응을 억제할 수 있음
     * x-ms-reactions: disallow 헤더를 추가하면 Microsoft 클라이언트에서 반응을 보낼 수 없게 됨
     * 모든 이메일에 적용하기 위해 postfix 설정에 추가함
     * /etc/postfix/main.cf 파일에 header_checks = pcre:/etc/postfix/header_checks 설정 추가
     * /etc/postfix/header_checks 파일에 다음 내용 추가
# add header to deal with unwanted Microsoft reactions (2024-07-16)
/^Content-Type:/i PREPEND x-ms-reactions: disallow

     * postfix를 재시작하고 다양한 클라이언트에서 테스트하여 헤더가 올바르게 추가되는지 확인함

      테스트 결과

     * 몇몇 사람들과 테스트한 결과, Microsoft 사용자는 여전히 반응을 보낼 수 있는 옵션이 있었음
     * 반응을 보냈지만, 반응 이메일은 도착하지 않음
     * Microsoft는 반응이 서버 측에서 실패할 수 있다고 언급함
     * 일부 Microsoft 사용자는 반응 아이콘이 회색으로 표시되고 ""이 메시지에는 반응이 허용되지 않음""이라는 텍스트가 나타남

    GN⁺의 정리

     * 이 글은 Microsoft 사용자들이 보낸 원치 않는 이메일 반응을 억제하는 방법을 설명함
     * postfix 설정을 통해 모든 이메일에 적용할 수 있는 방법을 제시함
     * Microsoft 클라이언트의 반응 억제 기능이 완벽하지 않을 수 있음을 언급함
     * 이메일 반응 문제를 해결하고자 하는 사람들에게 유용한 정보 제공
     * 비슷한 기능을 제공하는 다른 이메일 클라이언트 설정 방법도 고려해볼 만함

        Hacker News 의견

     * Windows Phone의 Wi-Fi 비밀번호 공유 기능을 떠올리게 함
          + SSID 이름에 _optout을 추가하여 기능을 비활성화할 수 있었음
          + 이 기능은 결국 제거되었음
          + Microsoft가 가끔씩 하는 무미건조한 일 중 하나로 여겨짐
     * 기업 세계에서 문장에 점 대신 대문자 J를 사용하는 것을 본 적이 있음
          + 처음에는 인위적인 예의 표현으로 생각했음
          + ASCII 값 4xA가 Wingdings에서 웃는 얼굴로 표시됨
          + Outlook 이메일 클라이언트가 어떤 문자를 변환할지 어떻게 알았는지 이해하기 어려움
     * Outlook만 사용하는 회사에서는 반응 기능이 유용함
          + ""고마워요"" 이메일을 많이 줄일 수 있음
          + 진심으로 감사할 때는 여전히 이메일을 보낼 수 있음
     * Apple도 iMessage/SMS에 비슷한 기능을 추가했음
          + 그룹 메시지가 모두 Apple 사용자일 때는 잘 작동함
          + Apple 생태계 밖에 있는 사람은 '누가 메시지를 좋아했습니다'라는 스팸을 받게 됨
          + 반응에 반응하는 경우 웃긴 텍스트 체인이 생길 수 있음
     * Outlook/Exchange는 이미 많은 커스텀 헤더를 추가함
          + 이 기능을 지원하는 클라이언트를 선택적으로 참여시키는 것이 더 나은 경험을 제공할 것임
          + Outlook 사용자와 비-Outlook 사용자 모두에게 더 나은 경험을 제공할 수 있음
     * 이메일에서는 반응 기능이 불편할 수 있지만, SMS와 Slack에서는 유용함
          + ""받았고 긍정적인 반응을 보임""을 표현하는 방법임
          + 불필요한 타이핑을 줄여줌
          + 다른 사람이 내 확인을 확인하는 알림을 받는 것도 줄여줌
     * 반응 기능을 싫어하는 사람이 왜 싫어하는지 설명해줄 수 있는지 궁금함
          + 다른 사람이 타이핑할 노력을 하지 않은 것이 무례하게 느껴지는 것인지 궁금함
     * 매일 새로운 형태의 암이 생기는 것 같음
     * Microsoft Comic Chat을 떠올리게 함
          + IRC 메시지를 추가 메타데이터로 변환했음
     * 이 문제를 아직 겪지 않았지만, 메일 서버를 업데이트하면 겪지 않을 것 같음
          + SMS에서도 같은 일이 발생하지 않도록 하는 방법을 찾아야 함
"
"https://news.hada.io/topic?id=15866","git-pr - 새로운 git 협업 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        git-pr - 새로운 git 협업 서비스

     * 가장 단순한 git 협업 도구를 만드는 것이 목표
     * 외부 협업자의 시간과 에너지를 희생하지 않으면서도, 자체 호스팅 git 서버 실행을 SSH 서버 실행만큼 간단하게
     * 메일링 리스트와 pull request 워크플로우를 결합
          + 패치 생성처럼 간단하면서도 pull request의 사용 편의성을 갖춘 협업 도구를 만들고자 함
     * 또 다른 코드 저장소를 만드는 게 아니라, 외부 기여자와 협업할 수 있는 매우 단순한 자체 호스팅 git 솔루션을 만들고자 함

필요한 것

     * 코드 소유자가 git 서버 실행을 위해 필요한 것:
          + 단일 golang 바이너리
     * 외부 기여자에게 필요한 것:
          + SSH 키 페어
          + SSH 클라이언트

현재의 문제점

     * 이메일은 git 저장소에 대한 변경 사항(패치 세트)을 보내고 받기 위한 분산 시스템으로는 훌륭하지만, 새 사용자를 메일링 리스트에 온보딩하고 이메일 클라이언트를 제대로 설정한 다음 코드 기여를 제출하는 것만으로도 많은 개발자가 포기하게 만듦
     * 이메일 프로토콜을 활용하여 협업하므로 기능 세트에 제한이 있음. 예를 들어 이메일 편집이 불가능하고, 모든 사람이 다른 클라이언트를 사용하며, 이러한 클라이언트는 일반 텍스트 이메일 및 패치 다운로드와 관련하여 서로 다른 제한 사항이 있음
     * Github pull request는 사용, 편집 및 관리가 쉽지만, 사용자가 코드 리뷰를 수행하려면 Github 웹사이트 내에 있어야 한다는 단점이 있음
     * 빠른 변경의 경우에는 좋지만, 웹 브라우저 내에서 코드를 읽기 시작하면 상당한 단점이 있음. 어느 시점에서는 로컬 개발 환경이나 IDE 등에서 코드를 검토하는 것이 더 타당함
     * IDE 내에서 PR을 검토할 수 있는 도구와 플러그인이 있지만, 사용 가능하게 만들려면 엄청난 노력이 필요함
     * 또한 pull request를 모방하는 자체 호스팅 솔루션은 이를 관리하기 위해 많은 인프라가 필요함. 데이터베이스, git에 연결된 웹 사이트, 관리자 관리, 서비스 등
     * 또 다른 큰 마찰 지점은 외부 사용자가 코드 변경 사항을 제출하기 전에 먼저 계정을 만들고 로그인해야 한다는 것. 이는 외부 기여자뿐만 아니라 인프라를 프로비저닝해야 하는 코드 소유자에게도 상당한 마찰을 더함
     * PR을 제출하기 전에 코드 저장소 내에서 저장소를 포크해야 하는 경우가 많음. 그런 다음 다시는 기여하지 않고 포크된 저장소를 영원히 유지함. 이것은 어리석어 보임

Patch Request (PR) 소개

     * 이메일 설정의 번거로움이나 이메일 프로토콜에 의해 부과되는 제한 없이 패치를 주고받을 수 있는 자체 호스팅 git ""서버""를 만들고자 함
     * 또한 주요 워크플로가 로컬 개발 환경을 중심으로 이루어지기를 원함. Github는 브라우저에 IDE를 가져와 워크플로를 지원하고 있지만, 우리는 코드 리뷰를 로컬 개발 환경 내에서 최고 수준의 시민으로 만들어 그 아이디어를 뒤집고 싶음
     * Github의 pull request 워크플로와 이메일을 통한 패치 송수신의 중간쯤으로 봄
     * SSH 앱을 활용하여 기여자와 프로젝트 소유자 간의 대부분의 상호 작용을 처리하는 것이 기본 아이디어. 모든 것을 터미널 내에서 인체 공학적이고 완전한 기능으로 수행할 수 있음
     * 알림은 RSS로 이루어지고 모든 상태 변경은 정적 웹 자산 생성으로 이어져 단순한 파일 웹 서버를 사용하여 모두 호스팅할 수 있음

format-patch 워크플로

     * 여기서 기본적인 협업 도구는 format-patch
     * 코드 변경 사항을 제출하든 코드 변경 사항을 검토하든 모두 코드에서 발생
     * 기여자와 소유자 모두 새 커밋을 생성하고 서로 위에 패치를 생성하는 것
     * 이렇게 하면 리뷰어가 코드 블록의 한 줄에 ""댓글""을 달 수 있는 웹 뷰어를 가질 필요가 없어짐. 필요 없음. 기여자의 패치를 적용하고, 댓글이나 코드 변경 사항을 작성하고, 새 패치를 생성하고, 패치를 ""리뷰""로 git 서버로 보내면 됨
     * 이 흐름은 두 사용자가 일련의 변경 사항에 대해 협업하는 경우에도 정확히 동일하게 작동함
     * 동일한 코드 변경에 대해 여러 패치 세트를 보내는 문제도 해결됨. 모든 변경 및 협업이 이루어지는 단일 중앙 Patch Request가 있음
     * git note를 활용하여 리뷰/댓글을 활용하는 방법을 찾을 수 있겠지만, 솔직히 그 솔루션은 잔인하고 대부분의 git 사용자의 편안함 수준을 벗어나는 것처럼 느껴짐
     * 코드로 리뷰를 보내고 사용 중인 프로그래밍 언어로 코드에 주석을 작성하면 됨
     * 이러한 주석을 ""처리""하고 후속 패치에서 제거하는 것은 기여자의 일
     * 모든 주석을 처리하기 위한 강제 기능: 코드에 처리되지 않은 주석이 있으면 패치가 병합되지 않음. 무시할 수 없으며 그렇지 않으면 잘못 업스트림될 것

Patch Request의 작동 방식

     * Patch Request (PR)는 git 저장소에 대한 변경 사항을 제출, 검토 및 수락하는 가장 간단한 방법. 작동 방식은 다음과 같음:
          + 외부 기여자가 저장소 클론(git-clone)
          + 외부 기여자가 코드 변경(git-add & git-commit)
          + 외부 기여자가 패치 생성(git-format-patch)
          + 외부 기여자가 SSH 서버에 PR 제출
          + 소유자가 새 PR에 대한 RSS 알림 수신
          + 소유자가 SSH 서버에서 로컬로 패치 적용(git-am)
          + 소유자가 코드에 제안 사항 작성(git-add & git-commit)
          + 소유자가 패치를 SSH 서버로 파이프하여 리뷰 제출(git-format-patch)
          + 외부 기여자가 PR 리뷰에 대한 RSS 알림 수신
          + 외부 기여자가 패치 재적용(git-am)
          + 외부 기여자가 코드의 주석을 검토하고 제거
          + 외부 기여자가 또 다른 패치 제출(git-format-patch)
          + 소유자가 로컬로 패치 적용(git-am)
          + 소유자가 PR을 승인으로 표시하고 코드를 main에 푸시(git-push)

   Pico.sh - 모든 것을 SSH를 이용해서 웹서비스를 관리하는 오픈소스 모음 에 새로 추가 된 것이네요.
   기존에는 다음과 같은 것들이 포함되어 있습니다.
     * pgs.sh: 사이트 배포를 위해 SSH를 사용하는 스태틱 사이트 호스팅 플랫폼
     * tuns.sh: SSH로 로컬 호스트와 연결하는 https/wss/tcp 터널
     * imgs.sh: 인증에 SSH를 사용하는 Docker 이미지 레지스트리
     * prose.sh: 콘텐츠 관리를 위해 SSH를 사용하는 블로그 플랫폼
     * pastes.sh: rsync, scp 및 sftp를 사용하여 코드 스니펫을 업로드
     * feeds.sh: SSH를 사용하는 RSS 이메일 알림 서비스
"
"https://news.hada.io/topic?id=15997","옐로스톤 국립공원에서 발생한 Hydrothermal 폭발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    옐로스톤 국립공원에서 발생한 Hydrothermal 폭발

    비스킷 베이슨 간헐천 폭발, 관광객 대피

     * 관광객 대피: 화요일, 비스킷 베이슨의 블랙 다이아몬드 풀 근처에서 큰 열수 폭발이 발생하여 관광객들이 보드워크를 따라 대피함
     * 현장 상황: 관광객들은 핸드폰으로 영상을 촬영하며 검은 연기가 치솟는 것을 목격함. 이후 하늘에서 돌이 떨어지기 시작하자, 현장에 있던 Vlada March의 조언에 따라 대피함
     * 폭발 후 상황: 폭발로 인해 관광객들이 대피하는 모습이 페이스북에 공유됨

    GN⁺의 정리

     * 이 기사는 옐로스톤 국립공원에서 발생한 큰 열수 폭발 사건을 다루고 있음
     * 관광객들이 폭발로 인해 대피하는 긴박한 상황을 생생하게 전달함
     * 지질학적 위험성과 관련된 사건으로, 지질학 및 지구과학에 관심 있는 사람들에게 유용할 수 있음
     * 유사한 기능을 가진 프로젝트로는 지질학적 위험을 모니터링하는 다양한 지질학 연구 프로젝트가 있음
"
"https://news.hada.io/topic?id=15934","다중위성 데이터, 유정 폭발로 인한 기록적인 메탄 누출 포착","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   다중위성 데이터, 유정 폭발로 인한 기록적인 메탄 누출 포착

        Hacker News 의견

     * 위성 및 항공 조사 데이터에 따르면, 석유 및 가스 관련 메탄 배출량이 산업 보고서보다 훨씬 높음
          + 독립 연구자들이 생산, 전송, 배급 및 최종 사용 파이프라인을 조사할 때마다 더 많은 누출을 발견함
          + 일부 생산 경로에서는 메탄 배출량이 석탄보다 더 큰 영향을 미침
          + 예를 들어, 뉴멕시코 퍼미안 지역의 누출률은 9%에 달함
          + 메탄은 연소 시 석탄의 절반 정도의 CO2를 배출하지만, 100년 동안의 eGHG 잠재력은 CO2의 20배임
          + 따라서 총 GHG 잠재력에 180%를 더해야 하며, 이는 석탄보다 40% 더 나쁨
     * 131 kt의 메탄 배출량은 약 3.93 메가톤의 CO2와 동일함
          + 이는 아이슬란드나 몰타 같은 작은 국가의 연간 배출량과 비슷함
     * 메탄 누출 문제를 해결하지 못한 것은 탄소 포집 기술의 성공 가능성을 낮게 봄
          + CO2를 동굴 등에 주입하는 기술을 홍보하는 사람들은 사기꾼이라고 생각함
     * 지구 온난화로 인해 영구 동토층이 녹으면서 거대한 메탄 거품이 형성됨
          + 이 거품이 충분히 커지면 폭발하여 큰 구덩이를 만듦
          + 이 구덩이는 물로 채워지며, 메탄 누출량은 엄청날 것으로 추정됨
     * 이 사건은 2023년 6월에서 11월 사이에 카자흐스탄에서 발생함
          + 이는 투르크메니스탄의 다르바자 가스 분화구의 작은 버전으로 보임
     * 우리는 이 문제를 해결할 수 없을 것 같음
     * 메탄 기둥은 폭발 지점에서 2km 떨어진 곳에 있음
          + 아마도 파이프라인 누출일 가능성이 높음
     * 여유 시간이 있다면 대기 중에서 메탄을 최대한 제거하는 방법을 찾고 싶음
     * 기후 변화 현상에서 가장 큰 오염원을 공격해야 할 시점이 올 것임
          + 미국이 군사 예산을 사용하여 오염 산업 시설을 비활성화하는 것도 고려할 수 있음
          + 이는 인프라를 비활성화하는 것이 더 온건한 방법으로 보임
     * 이 사건은 카자흐스탄에서 발생했으며, 벌금은 100만 달러 미만임
"
"https://news.hada.io/topic?id=15869","Show GN: Melonn - 나를 제외한 다른 인간 유저가 존재하지 않는 SNS를 만들었습니다. ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: Melonn - 나를 제외한 다른 인간 유저가 존재하지 않는 SNS를 만들었습니다.

     * 멜론은 'human-free AI social space'를 표방하는 서비스로, 나를 제외한 다른 모든 사용자가 AI 에이전트인 SNS입니다.
          + 텍스트 기반 SNS로, 스레드/트위터와 유사한 UI/UX를 제공합니다. 단, 이 둘과 멜론의 차이점은 멜론에서는 내가 글을 쓰면 와서 댓글을 달아주는 친구들이 모두 AI라는 점입니다.
     * 조금 기괴하거나 디스토피아적이라고 생각하실 수도 있지만, 저희 팀은 멜론을 만들며 오히려 이것이 많은 사람들의 정신건강과 행복에 도움이 될 수 있을 것이라 생각했습니다.
     * 다른 사람의 눈치를 볼 필요가 없는 공간이기 때문에 멜론에서 사용자들은 자신이 마음에 담아둔 말을 무엇이든 할 수 있고, 그에 적절한 피드백과 응답을 댓글들을 읽으며 얻어갈 수 있습니다-그것은 따스한 공감의 말들이 될 수도, 사용자가 생각지도 못했던 창의적인 인사이트가 될 수도 있습니다.
     * 이러한 상호작용은 외로움, 공허함, 지루함, 우울함 등의 감정을 해소하고 싶어하는 이들에게 큰 도움이 될 것입니다. 이 모든 걸 떠나 단순히 재밌고 신기하기도 하고요!

   AI 에이전트간의 피드백이 있으면 재밌겠네요! ㅎㅎ

   오왕!! 너무 멋진 프로젝트인것같아요! 응원합니다 👍👍👍

   오 생각보다 댓글이 많이 달려서 재밌네요. 근데 API 비용이 꽤 많이 나갈 것 같은데 이 부분은 어떻게 해결/최적화하고 계신가요?

   이런 상상력 좋습니다. 모든 SNS의 극단의 미래라고 생각합니다.
   어쩌면.. 인터넷은 이미 이런공간이 되고 있을지 모릅니다.
   확실한것은 이 기능은 sns에 기본으로 붙을 것이고, 스패머들의 기본 인프라가 될거예요. 특정한 목적에 사용되기 위해서 준비된 가상 사용자 공간이 되겠죠.
   현존하는 SNS 서비스도 이런식으로 마지막 종말을 맞이할것 같습니다.
   실제 사용자는 1명이고, 나머지는 기계로 돌아가는 서비스.

   dead internet theory라고 하더라고요 ㅎㅎㅎ
   저희도 아직 정확한 가닥을 잡지는 못했지만 그래도 진짜 인간들 간의 유대는 끝까지 유지되면 좋겠다는 생각은 하고 있습니다. 이런 도구들은 그런 유대나 현실에서의 관계를 보조하는 수단이 되었으면 좋겠고요

   세상에!

   꽤 재미있습니다.
   떡밥 하나 던져주면, 다양한 시각으로 의견달아주고, 그 중에 몇개 골라 댓글 놀이하고.
   시간 꽤 잘 가네요. 매우 괜찮은 접근 같습니다.

   감사합니다 ㅎㅎ 저희가 의도했던 사용자 경험인 것 같습니다
   더 열심히 발전시켜보겠습니다

   탈퇴 기능 넣어주세요

   곧 만들어보겠습니다! 빠른 탈퇴 처리를 원하시면 앱 내 피드백 채널이나 이메일을 통해 회원정보 등 보내주시면 데이터 삭제해드리겠습니다.

   무슨 말을 하든 정치적으로 꺾는 AI도 있고 비관론적인 AI도 있고 그러네요
   흥미롭긴 하지만 정신건강을 위해 사람을 피하는 잠깐의 도피처로 이용하긴 좀 애매하다 생각됩니다

   원치않는 AI들은 차단하는 기능이 있으니 그걸 쓰면 괜찮지 않을까 싶어요

   맞습니다! 마음에 들지 않는 답변을 생성하는 애들은 블락하실 수 있습니다 ㅎㅎ

   맘에 안드는 AI 블락이라니. 기괴하지만 신기해요.
"
"https://news.hada.io/topic?id=15996","아인슈타인의 더 나은 삶을 위한 7가지 규칙","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        아인슈타인의 더 나은 삶을 위한 7가지 규칙

  중요한 일에 힘을 쏟아라

     * 아인슈타인은 늘 불규칙한 머리와 낡고 후줄근한 옷차림으로 유명했음. 개인적인 외모에 신경 쓰지 않았으며, 주로 회색 양복에 가죽 재킷을 입었음
     * 단순하지만 편안한 옷차림은 현대 기술 기업가들 사이에서도 정신적 효율성을 위해 선호됨
     * 하루에 많은 결정을 해야 하는 사람들은 결정을 줄여 불필요한 것에 노력을 낭비하지 않는 것이 중요
     * 개인적 외모에 신경 쓰지 않음으로써 정신을 진정으로 중요한 것에 집중할 수 있게 됨

  사랑하는 일을 하라, 비록 당신이 그것에 서툴더라도

     * 아인슈타인은 물리학 외에도 빵굽기와 바이올린 연주를 사랑했음
     * 가장 좋아하는 취미는 요트였지만, 그는 항해에 서툴렀음
     * 요트를 타는 동안 방향을 잃거나 배를 좌초시키는 등 서툴렀지만, 요트를 타는 동안 경험하는 평온함은 비할 데 없었음
     * 항해는 그의 마음을 자유롭게 하고 새로운 아이디어를 떠올리게 했음
     * 실패하더라도 좋아하는 일을 계속하는 것이 중요함

  퍼즐 같은 사고방식을 가져라

     * 우리가 개인적으로나 문명으로서 직면하는 문제들을 위기가 아닌 퍼즐로 바라보라
     * 아인슈타인은 직면한 모든 어려움을 풀어야 할 퍼즐로 보는 사람이었음
     * ""상상력은 지식보다 중요하다""라는 그의 유명한 말은 종종 오해를 받지만, 유연하고 경직되지 않은 세계관으로 다른 이들이 쉽게 넘어가지 못하는 가정에 도전할 수 있게 해줌
     * 가설의 옳고 그름보다는 답을 찾는 과정, 즉 우주를 효과적으로 질문하고 검증하는 방법을 알아내는 것에 흥분함
     * 선입견에 사로잡히지 않는 과학자의 사고방식만이 예기치 않은 발견을 포함해 새로운 발견으로 이어질 수 있음
     * 그는 실험과 생각 실험을 통해 새로운 아이디어를 발견했고, 새로운 관점으로 문제를 접근하여 특별 상대성 이론 같은 혁신적인 발견을 이뤘음

  진정으로 매혹되는 것에 대해 깊이 오래 열심히 생각하라

     * 아인슈타인은 깊이 관심을 갖는 질문에 오랜 시간 집중하라고 조언함
     * 깊은 관심을 가진 문제를 만났다면 쉬운 성공을 약속하는 피상적 문제의 해결에 만족하려 하지 말고 그 문제에 몇 년간 도전하라고 함
     * 해결책에 도달하지 못해도 절망하지 말 것. 세상을 창조한 신의 근심은 우리가 쉽게 이해하도록 만드는 게 아니었을 것
     * 문제의 크기 때문에 낙담하지 말라고 조언함
     * 아인슈타인도 양자 행동에 대한 결정론적 설명이나 물리학 통합 이론 등 평생 해결하지 못한 문제들이 많았지만 그 과정 자체에서 큰 기쁨과 성취감을 찾았음

  정치에 의해 분노하거나 절망하지 말라

     * 아인슈타인은 정치에 대해 분노는 하되 날개를 퍼덕이지 말고 깃털만 세우라고 조언함
     * 공격적으로 반응하기보다는 효과적인 순간을 기다려 전략적으로 행동하는 것이 중요함
     * 맹목적인 분노는 종종 목표 달성에 도움이 되지 않음

  권위에 대한 맹목적 복종은 진리의 가장 큰 적

     * 아인슈타인은 권위에 맹목적으로 복종하는 것을 진리의 가장 큰 적으로 여겼음
     * 우리는 확신하는 것에 무비판적으로 동의하고 다른 것에 반대하는 경향이 있음
     * 이는 이성적 사고의 죽음으로, 아인슈타인은 ""집단 광기"" 또는 ""무리 정신""이라 불렀고 오늘날에는 획일적 사고라 부를 것
     * 아인슈타인과 상대성 이론은 국수주의와 반유대주의에 힘입은 반상대성 학회의 공격 대상이 되었음
     * 처음에는 어리석고 해롭지 않다고 생각했으나 나중에는 ""권위에 대한 맹목적 복종은 진실의 가장 큰 적""이라고 결론 내림

  과학, 진리, 교육은 소수 특권층만의 것이 아니다

     * 아인슈타인은 미국 정부를 비판하며 노예제 역사와 지속되는 인종차별과 싸우며 교육의 평등을 주장했음
     * 1937년 흑인 오페라 가수 Marion Anderson을 자신의 집에 초대하여 인종 차별에 저항함
     * 1946년 흑인 대학인 링컨 대학교를 방문 및 강연하며 학생들과 교류함
     * 1953년 인종 간 긴장 완화를 가르친 교사 변호, 1954년 진실 탐구와 발표, 교육의 자유 주장
     * 인종 차별은 백인의 병이라고 주장하며 평등한 교육을 지지함
     * 물리적 속성은 상대적일 수 있지만 과학적 발견은 인류 모두의 것이며 누구에게나 접근 가능해야 함

   좋은 글이네요. 역시 Bigthink. 시간 나시는 분들은 이 사이트 한 번씩 들어가서 보시는 걸 추천드립니다.

   결정에 대한 스트레스..그 횟수를 줄여나가는 것이 중요하다는 것 너무 공감되네요.
   명심하겠습니다. 슈타인형

   요즘 읽은 글 중에 가장 좋은글 같습니다. 감사합니다.

   ""정치에 의해 분노하거나 절망하지 말라...""

   좋은 규칙이군요. 스크랩하겠습니다!

   외모에 신경 쓰지말라고 해서 드럽게 다니라는 뜻은 아닙니다... 제발....
"
"https://news.hada.io/topic?id=15919","USPS, 고객 우편 주소 Meta, LinkedIn, Snap과 공유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                USPS, 고객 우편 주소 Meta, LinkedIn, Snap과 공유

    USPS 고객 주소를 Meta, LinkedIn, Snap과 공유

     * TechCrunch 조사 결과: 미국 우편 서비스(USPS)가 온라인 고객의 우편 주소를 Meta, LinkedIn, Snap과 공유했음
     * USPS의 대응: USPS는 이 문제를 해결했다고 주장하며, 이를 인지하지 못했다고 설명함
     * 데이터 수집 코드: USPS 웹사이트에 숨겨진 데이터 수집 코드(트래킹 픽셀)를 통해 고객 정보가 수집되었음
     * Informed Delivery 서비스: 이 서비스의 사용자는 도착 예정인 우편물의 사진을 미리 볼 수 있음
     * 수집된 정보: 고객의 우편 주소, 컴퓨터 유형, 브라우저 정보 등이 포함되었음
     * 추가 데이터 공유: USPS 웹사이트에 입력된 트래킹 번호도 Bing, Google, LinkedIn, Pinterest, Snap과 공유되었음
     * USPS의 입장: USPS는 개인 정보를 제3자에게 판매하거나 제공하지 않으며, 내부 분석 목적으로만 사용한다고 주장함
     * Meta의 입장: Meta는 민감한 정보를 비즈니스 도구를 통해 전송하지 말아야 한다고 교육하고 있음

    유사 사례

     * Cerebral, Tempest, Monument: 2023년에 이들 스타트업은 사용자 건강 정보를 기술 및 광고 회사와 공유한 후 트래킹 코드를 제거함
     * GoodRx, BetterHelp: 연방거래위원회(FTC)는 이들 회사가 고객 건강 데이터를 공유한 혐의로 벌금을 부과함

    GN⁺의 정리

     * 이 기사는 USPS가 고객의 개인 정보를 광고 및 기술 회사와 공유한 사건을 다루고 있음
     * 데이터 수집 코드의 사용과 그로 인한 개인정보 유출 문제를 강조함
     * 유사한 사례로 다른 스타트업들이 사용자 정보를 공유한 후의 대응을 설명함
     * 개인정보 보호와 관련된 문제를 다루며, 독자들에게 경각심을 일깨우는 내용임
     * 유사한 기능을 제공하는 서비스로는 Google Analytics와 같은 웹사이트 분석 도구가 있음

        Hacker News 의견

     * USPS가 고의로 정보를 공유한 것이 아니라, 특정 회사의 추적 픽셀을 Informed Delivery 페이지에 부주의하게 허용한 것임
     * Facebook 대변인 Emil Vazquez는 광고주가 민감한 정보를 보내지 않도록 교육하고 있다고 주장함
          + 광고주를 비난하는 것이 편리한 방법처럼 보임
          + 시스템이 민감한 데이터를 필터링하도록 설계되었지만, 실제로 얼마나 잘 작동하는지는 의문임
     * 주소 변경 양식을 제출할 때 광고 및 추적 차단기를 켜두면 성공하지 못한 이유를 설명할 수 있음
     * 특정 픽업 박스 시스템을 사용하면 배송 회사나 웹샵이 개인 정보를 알 수 없어서 좋음
     * 미국 시민을 위한 포괄적인 데이터 프라이버시 법이 아직 없음을 상기시켜줌
     * 추적 픽셀은 매우 문제임
          + 큰 회사들이 페이지에 스크립트를 넣기 위해 돈을 지불하는 상황에서 비규제적 해결책을 상상하기 어려움
          + 더 부유한 누군가가 사용자 정보를 팔지 않도록 돈을 지불하는 방법 외에는 해결책이 없음
          + 이런 것들을 금지해야 함
     * USPS 주소 변경을 사용하는 것을 싫어함
          + 주소가 유출되기 때문임
          + 잠시 동안 주소 변경을 하지 않았을 때는 주소가 유출되지 않았음
     * 정부 사이트는 제3자 콘텐츠를 로드해서는 안 됨
     * 은행, 지방 정부, 치과 예약 시스템 등도 같은 문제를 가지고 있음
     * Informed Delivery는 웹사이트를 통해 가입하고 이메일이나 문자로 서비스를 제공함
          + 사이트를 직접 사용할 필요가 거의 없음
          + 그러나 추적 픽셀이 ""소셜 로그인""이나 ""소셜 미디어 통합""의 일부로 로드되는지 궁금함
          + 이러한 이유로 소셜 미디어를 사용하지 않고 모든 사이트에서 차단함
"
"https://news.hada.io/topic?id=15973","과학자들, 강한 뼈를 형성하는 새로운 호르몬 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      과학자들, 강한 뼈를 형성하는 새로운 호르몬 발견

     * 연구
          + 2024년 7월 18일

  예측은 간질 환자가 발작을 예측하는 데 도움이 될 수 있음

     * 서론
          + 간질 환자는 발작을 예측하는 것이 어려움
          + 새로운 연구는 예측 모델이 발작을 예측하는 데 도움이 될 수 있음을 시사함
     * 연구 방법
          + 연구팀은 다양한 데이터를 수집하여 예측 모델을 개발함
          + 뇌파(EEG) 데이터를 활용하여 발작 전조를 분석함
     * 결과
          + 예측 모델은 발작을 높은 정확도로 예측할 수 있었음
          + 환자들은 발작이 발생하기 전에 경고를 받을 수 있었음
     * 의의
          + 이 연구는 간질 환자의 삶의 질을 향상시키는 데 기여할 수 있음
          + 예측 모델은 환자들이 발작을 미리 준비할 수 있게 도와줌
     * 미래 연구
          + 더 많은 데이터와 다양한 환자군을 대상으로 추가 연구가 필요함
          + 예측 모델의 정확성을 높이기 위한 알고리듬 개선이 필요함

GN⁺의 정리

     * 이 연구는 간질 환자가 발작을 예측하는 데 중요한 진전을 이룬 연구임
     * 예측 모델을 통해 환자들은 발작에 대비할 수 있어 삶의 질이 향상될 수 있음
     * 추가 연구와 알고리듬 개선을 통해 더 높은 정확도를 기대할 수 있음
     * 비슷한 기능을 가진 프로젝트로는 NeuroPace와 같은 뇌파 기반 예측 시스템이 있음
"
"https://news.hada.io/topic?id=15894","구글은 이제 기본적으로 당신의 콘텐츠를 인덱싱하지 않는다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    구글은 이제 기본적으로 당신의 콘텐츠를 인덱싱하지 않는다

     * 10년 전에는 새로운 워드프레스 블로그를 시작하면 구글이 몇 시간, 때로는 몇 분 안에 콘텐츠를 인덱싱함
     * 구글의 사명은 ""세계의 정보를 체계화하고 보편적으로 접근할 수 있게 만드는 것""이었음
     * 사용자에게는 정보가 웹 어딘가에 존재하면 구글 검색으로 찾을 수 있다는 것을 의미했음
     * 콘텐츠 제작자에게는 콘텐츠를 만들면 구글이 찾을 수 있게 해준다는 황금 기회였음

SEO 군비 경쟁과 구글의 대응

     * 기회가 있는 곳에는 악용도 존재함
          + 저품질 콘텐츠가 웹에 범람
          + 링크 매매
          + 많은 회색 및 블랙햇 SEO 전술
     * 구글은 조작적인 SEO 관행을 정화하기 위해 판다, 펭귄 등 일련의 알고리즘 업데이트를 도입함
     * 이는 SEO 전문가와 구글 간의 20년 동안의 줄다리기와 같았음

""콘텐츠가 왕""의 부상과 몰락

     * ""콘텐츠가 왕""이라는 새로운 교리가 업계에 등장함
         1. 좋은 콘텐츠는 자연스럽게 링크를 유치하고 긍정적인 사용자 상호작용 신호를 생성하여 순위를 개선할 수 있음
         2. 구글의 알고리즘은 본질적으로 고품질 콘텐츠를 중요하게 여기고 높은 순위를 매길 것임
     * 진정으로 좋은 콘텐츠를 만드는 많은 제작자들이 자신들이 마땅히 받아야 한다고 느끼는 순위를 결코 달성하지 못해, 품질만으로는 충분하지 않다는 것을 보여줌
     * 근본적인 문제 중 하나는 구글도 그 누구도 ""좋은"" 콘텐츠를 알고리즘적으로 판별할 수 없다는 것이었음

AI 콘텐츠 혁명

     * 2018년 OpenAI가 GPT-1을 공개하면서 콘텐츠 제작의 미래가 명확해짐
     * 사람이 작성한 텍스트와 구별할 수 없는 AI 생성 콘텐츠가 등장함
     * ""콘텐츠가 왕""이라는 시대가 막을 내리고 있음

구글의 실존적 위기

     * 구글의 입장에서 보면 AI가 무한한 양의 사람과 유사한 콘텐츠를 생성할 수 있는 미래에 직면하고 있음
     * 구글의 대응은 두 가지였음
         1. 전문성, 권위, 신뢰성(Expertise, Authoritativeness, Trustworthiness) 개념을 모호하게 홍보함. 실제로는 잘 알려진 브랜드와 기존 웹사이트를 선호하는 것으로 해석됨
         2. 모든 것을 인덱싱하려는 사명을 포기하고 대신 선택적이 되기로 함. 매우 선택적으로.

새로운 현실: 선택적 인덱싱

     * 구글은 더 이상 전체 웹을 인덱싱하려 하지 않음
     * 실제로 매우 선택적이 되어 대부분의 콘텐츠 인덱싱을 거부함
     * 이는 콘텐츠 제작자가 임의의 품질 기준을 충족하지 못했기 때문이 아니라 구글이 검색 엔진으로서의 역할에 대한 접근 방식을 근본적으로 변경했기 때문임
     * 내 경험에 비추어 볼 때 구글은 이제 ""기본적으로 인덱싱하지 않음"" 원칙에 따라 운영되는 것으로 보임
     * 다양한 요소를 통해서 진정으로 필요하다고 판단되는 경우에만 콘텐츠를 색인에 포함
          + 극도의 콘텐츠 독창성: 광범위하게 다루지 않는 주제에 대해 글을 쓰는 것만으로는 충분하지 않음. Google은 콘텐츠가 진정으로 참신하거나 색인에서 상당한 격차를 메울 것을 요구하는 것 같음
          + 인지된 권위: Google이 틈새 시장에서 높은 권위를 가진 것으로 간주하는 사이트는 더 많은 콘텐츠가 색인될 수 있지만, 그렇다고 해서 보장되는 것은 아님
          + 브랜드 인지도: 잘 알려진 브랜드는 대부분의 콘텐츠가 색인되는 경우가 많지만, 규모가 작거나 잘 알려지지 않은 블로거는 훨씬 더 엄격하게 선별됨
          + 임시 색인 및 색인 해제: 실제로 Google은 뉴스 속보나 중요한 업데이트를 놓치지 않기 위해 새 콘텐츠를 매우 빠르게 색인화하는 경우가 많음. 얼마 지나지 않아 Google은 콘텐츠의 색인 생성을 해제할 수 있으며 그 이후에도 색인 생성이 해제된 상태로 유지. 따라서 처음에 색인되었다고 해서 반드시 Google이 귀하의 콘텐츠를 가치 있는 콘텐츠로 간주한다는 신호는 아님
     * 이런 변화를 직접 목격하는 중
          + 과거에는 새 도메인을 설정하면 1시간 이내에, 때로는 몇 초 만에 색인화되었음
          + 이는 어디에도 멘션이 없고 백링크가 없는 신규 도메인의 경우에도 마찬가지
          + 새로운 블로그 게시물 중 하나의 제목이나 기사의 독특한 문장을 검색하면 첫 번째 Google 페이지에 바로 표시되었음
          + 이제 각 콘텐츠에 대해 Google은 색인화할 가치가 있는지 여부를 결정하는데, 대부분의 경우 ""아니오""라는 대답이 나옴
          + 정말 독특하다고 생각되는 콘텐츠나 전혀 다루지 않는 주제에 대해서는 색인화하지 않을 수 있음
          + 하지만 다른 곳에서 이미 다루고 있다고 판단되는 주제에 대해 글을 작성하는 경우에는 색인되지 않을 가능성이 높음
          + 이는 상당한 독자층을 보유한 존경받는 작가라 하더라도 발생할 수 있음
     * 흥미롭게도 콘텐츠가 색인 생성에 성공하면 의외로 높은 순위에 오르는 경우가 많다는 사실도 발견
          + 마치 색인 생성의 장애물이 너무 높아져서 그 장애물을 통과하면 이미 순위에 오를 수 있는 길이 거의 다 열린 것처럼
          + 하지만 그 지점에 도달하는 것은 기하급수적으로 더 어려워졌음
          + 중요한 것은 이러한 극단적인 선택이 동일하게 적용되지 않는다는 점
          + 유명 브랜드는 대부분의 콘텐츠가 빠르게 색인되는 반면, 소규모 블로거나 틈새 웹사이트는 훨씬 더 까다로운 기준에 따라 색인에 포함되는 경우가 많음
          + 이러한 소규모 업체의 경우 더 이상 좋은 콘텐츠를 만드는 것만이 중요한 것이 아니라 내 콘텐츠가 구글 색인에 꼭 필요하다는 것을 설득하는 것이 중요

결과

     * 구글은 종합 검색 엔진에서 배타적인 카탈로그와 유사한 것으로 변모함
     * 사용자에게는 찾고 있는 정보가 존재할 수 있지만 구글을 통해 발견할 수 없다는 것을 의미함
     * 방대한 양의 가치 있는 콘텐츠가 간과되고 있다고 확신함
          + 사용자가 검색할 수 있는 정보가 Google 검색 결과에 나타나지 않을 수도 있음
          + 존재하지 않기 때문이 아니라 Google이 포함하지 않기로 결정했기 때문
     * 콘텐츠 제작자에게는 구글이 대부분의 콘텐츠 인덱싱을 거부한다면 가시성을 어떻게 확보할 수 있을지가 중요한 챌린지가 되어버림

   구글이 선별적으로 검색 결과에 노출시킨다는 글쓴이의 주장이 맞는 것으로 보입니다.

   구글 검색 도구에서 수집했다고 기록되어 있음에도 불구하고 검색 결과로는 보여지지 않습니다.

   제 블로그의 경우 검색이 가능한 글과 아닌 글이 섞여 있습니다.

   적어도 구글이 판단하기에 다른 문서와 중복된 내용이거나 다른 문서에 비해서 독창성이나 유용성이 떨어진다고 판단하는 경우 색인에 포함하지 않는 것처럼 보입니다.

   앞으로는 컨텐츠 상으로도 AI와 차별점을 보여주며 경쟁해야하는 시대가 오고 있는 것 같네요. 저 원문이 개인적인 사견일 뿐이라 하더라도 이러한 큰 흐름은 충분히 가능성이 크다고 예측됩니다.

   해커뉴스 댓글 처럼 컨텐츠 성격과 규모에 따라 다를테고 근거도 빈약하지만, 전 꽤 그럴듯하게 들리네요.

   올해 1분기에 회사에서 전반적인 SEO 개선 작업을 진행하고 지금까지 모니터링 하고 있습니다.
   신규 제출한 URL이 10만개 정도 되고 5개월정도 모니터링했는데, 신규 URL 들이 별다른 에러 레포트 없이 발견됨 혹은 크롤링됨 에서 다음 단계로 넘어가질 않고, 최근에는 이미 인덱싱 되어있던 url도 만단위로 빠지기도 했습니다.
   3월에 새로운 스팸 정책이 발표되었고, 웹 바이탈이 문제가 있기는 하지만, 그것만으론 이해가 안되서 고민이였는데, 그럴듯한 주장으로 들리네요.

   필자가 자칭 SEO전문가이자 프리랜서 개발자던데 공포마케팅이라도 하고 싶은 걸까요?

   SEO 전문가의 90%는 사기꾼이져

   빙글돌아 야후~?

   ...

   이게 글쓴이의 개인적인 주장이라 해커뉴스 댓글에서는 이걸로 갑론을박이 많네요
   실제로 그렇다는 사람들과 아니라는 사람들로 싸우고 있습니다.
   개인적인 생각으로는 지금 상황이라면 구글 입장에선 Selective 인덱싱한후에 De-indexing 하는게 맞다고 보지 않을까 싶네요. 스팸사이트가 너무 많아지긴 했거든요.

   다행히 제가 운영 중인 사이트들은 모두 잘 인덱싱이 되고 있긴 하군요 ^^;

     과거에는 새 도메인을 설정하면 1시간 이내에, 때로는 몇 초 만에 색인화되었음

   올해 초 구매했고, 아직 내용이 부족하고, 역시 링크가 없는 제 도메인도 색인이 잘 되어있습니다. (시간이 얼마나 걸린지는 측정해보지 않았지만...)
   좀 방어적이 된걸순 있겠지만 문제가 되는 수준은 아닌 듯 합니다
"
"https://news.hada.io/topic?id=15924","CrowdStrike의 위기, 라이벌들에게 공격의 기회를 제공하다 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  CrowdStrike의 위기, 라이벌들에게 공격의 기회를 제공하다

     * CrowdStrike는 오랫동안 해커로부터 고객 네트워크를 보호하기 위한 클라우드 기반 소프트웨어인 엔드포인트 탐지 시장을 지배한 회사
          + 문제를 일으킨 Falcon은 기기당 1년에 $185 구독료를 받음
          + 시가총액 $74B(100조원). 이 사고로 주가 11% 하락
     * 이 사태로 인해 포춘 100대 기업중 일부가 다른 업체로(Trellix같은) 전환을 고려중
     * Tesla의 일런 머스크는 회사의 모든 시스템에서 CrowdStrike를 삭제했다고 말함
     * 이번 문제의 경우 CrowdStrike가 고객에게 제시하는 핵심 가치인 ""고객의 IT 팀이 최소한의 감독으로 장치를 모니터링하고, CrowdStrike가 대신 위협을 탐지할 수 있다는 점""을 약화 시킴
          + 예전엔 기업들이 자체 서버에서 로컬로 백신 소프트웨어를 실행했고, 기업 IT 부서가 수동으로 새로운 소프트웨어 업데이트를 배포했음
          + CrowdStrike는 사이버 보안 회사가 원격으로 업데이트할 수 있는 클라우드 기반 보안 소프트웨어를 채택하도록 설득하는 데 앞장서 왔음
     * 금요일 아침(미국 시간) 중단 사태로 인해 전 세계적으로 PC 시스템이 다운되었고, 많은 장치에서 ""BSOD 블루 스크린 오브 데스""라고 알려진 오류 화면이 표시됨
          + 항공편이 지연되고, 일부 911 대응이 중단되었으며, 은행 거래가 지연됨
     * 보안 관계자에 따르면, 보통 ""점진적으로 소규모 배치 업데이트를 하는데 이렇게 모든 고객에게 대량 업데이트 한 것""은 CrowdStrike가 설명해야 할 실수임
     * CrowdStrike는 지금까지 거의 흠이 없는 실적을 보여준 회사
          + 올해 1월 회계연도 기준 매출이 36% 증가한 $31B(43조원)를 기록하고 $89M의 이익을 냈음
          + 사고 이전까지 CrowdStrike 주가는 올해 53% 상승했으며, 이는 매출 성장이 둔화된 여러 소규모 사이버 보안 기업들과 차별화되는 모습을 보여줌
     * 전 백악관 사이버 보안 국장 Adrew Grotto

     ""CrowdStrike는 여전히 이번에 결함이 있는 업데이트가 어떻게 품질 관리에서 벗어났는지에 대해 많은 질문에 답해야 한다""
     ""CrowdStrike는 훌륭한 제품을 가지고 있고 존경받는 보안 회사이지만, 이번 일은 강력한 제품을 가진 회사에서도 나쁜 일이 일어날 수 있다는 것을 보여준다""

   MS에서도 플랫폼 레벨에서 이런 문제를 방지할 수 있는 근본적인 솔류션을 고민해야 할것 같군요. 서드파티 업체의 실수가 플랫폼을 크래쉬 낼 수 있다는점은 심각한 구조적, 보안적인 결함으로 인식되야 할듯.

   지금 국내 언론에서는 당시 있었던 MS Azure 클라우드의 장애와 이번 건을 혼동해서 이상한 소리들을 하던데, 두 장애는 우연히 같은 날 일어났을 뿐 아무런 관계도 없는 것으로 알려져 있습니다.
     * Azure 장애: MS에서 백엔드 설정을 잘못하여 서버와 스토리지 사이의 연결에 문제가 발생하며 MS 브랜드의 다양한 SaaS에 문제가 발생함 (Incident ID MO821132)
     * CrowdStrike 장애: 보안업체에서 잘못된 악성코드 정의 파일을 배포하여 해당 보안업체 서비스를 윈도우 운영체제에서 구독하던 다양한 시스템에서 BSOD가 발생함 (이번 사건)

   윈도우 기반 서버를 돌리는 기업 중에서 CrowdStrike를 구독하는 업체의 서버가 다운되어 피해를 입은 경우도 있는 모양이지만, 그런 사례에서 플랫폼 업체에서 근본적인 대책을 내놓아야 한다는 건 좀 이상하다고 생각합니다. 물론 이번 사건을 계기로 윈도우 운영체제가 보안 관련 소프트웨어의 권한에도 좀 더 제약을 두는 방향으로 나갈 가능성이 없다고는 못하겠습니다만…
   차라리 MS가 신경써야 할 것은 백엔드 설정 문제로 인하여 SaaS에서의 장애가 반복되는 문제겠지요. 불과 1달도 되지 않은 지난 6월 27일에도 비슷한 장애가 있었거든요.

   맥에서도 CrowdStrike의 넷필터링 기능으로 네트워크 먹통이 되는 경우를 자주봤고,
   지속적인 CPU 사용량때문에 고통을 받은 적이 꽤 있어서..(..) 쌤통(?)이라는 생각이 들기도 합니다만..
   그나마 CrowdStrike가 다른 보안솔루션에 비해 문제를 적게 일으킨다는 이야기도 있더군요.

   다른 솔루션으로 전환해봤자, 크게 상황이 달라지지 않을거 같은 느낌이 들긴 합니다.

   국내 기업들도 꽤 쓰나 보군요. 보안도구 쓰는 회사 다닌 지가 너무 오래되어서 ㅎㅎ
   한국에선 금요일 밤이기도 해서 공항들 말고는 큰 문제가 없는지 별 얘기가 없네요.

   윈도우의 CrowdStrike 제품 오류로 대량 블루스크린 사태 발생
"
"https://news.hada.io/topic?id=15984","Eza: 현대적이고 유지 관리되는 ls 대체 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Eza: 현대적이고 유지 관리되는 ls 대체 프로그램

eza

  eza 소개

     * eza는 Unix와 Linux 운영체제에 기본으로 제공되는 파일 목록 명령어 ls의 현대적 대체품임
     * 파일 유형과 메타데이터를 구분하기 위해 색상을 사용함
     * 심볼릭 링크, 확장 속성, Git을 인식함
     * 작고 빠르며 단일 바이너리로 제공됨
     * 사용자 친화적이고 기능이 풍부한 ls의 대체품을 목표로 함

  eza의 주요 기능

     * exa 2021에서 발생한 ""그리드 버그"" 수정
     * 하이퍼링크 지원
     * 마운트 포인트 세부 정보 제공
     * Selinux 컨텍스트 출력
     * Git 저장소 상태 출력
     * 사람이 읽기 쉬운 상대 날짜 표시
     * 여러 보안 수정 사항
     * 밝은 터미널 색상 지원
     * 다양한 작은 버그 수정 및 변경 사항

  설치 방법

     * eza는 Windows, macOS, Linux에서 사용 가능
     * 플랫폼 및 배포판별 설치 지침은 INSTALL.md에서 확인 가능

  명령줄 옵션

    표시 옵션

     * -1, --oneline: 한 줄에 하나의 항목 표시
     * -G, --grid: 항목을 그리드 형태로 표시 (기본값)
     * -l, --long: 확장된 세부 정보와 속성 표시
     * -R, --recurse: 디렉토리 재귀적으로 탐색
     * -T, --tree: 디렉토리를 트리 형태로 재귀적으로 탐색
     * -x, --across: 그리드를 가로로 정렬
     * -F, --classify=(when): 파일 이름에 유형 표시 (항상, 자동, 안함)
     * --colo[u]r=(when): 터미널 색상 사용 시기 설정 (항상, 자동, 안함)
     * --colo[u]r-scale=(field): field의 수준을 구별하여 강조 (전체, 나이, 크기)
     * --color-scale-mode=(mode): --color-scale에서 고정 색상 또는 그라데이션 사용 (고정, 그라데이션)
     * --icons=(when): 아이콘 표시 시기 설정 (항상, 자동, 안함)
     * --hyperlink: 항목을 하이퍼링크로 표시
     * --absolute=(mode): 절대 경로로 항목 표시 (켜짐, 따름, 꺼짐)
     * -w, --width=(columns): 화면 너비를 열 단위로 설정

    필터링 옵션

     * -a, --all: 숨김 파일 및 '점' 파일 표시
     * -d, --list-dirs: 디렉토리를 일반 파일처럼 나열
     * -L, --level=(depth): 재귀 깊이 제한
     * -r, --reverse: 정렬 순서 반대로
     * -s, --sort=(field): 정렬할 필드 설정
     * --group-directories-first: 디렉토리를 다른 파일보다 먼저 나열
     * -D, --only-dirs: 디렉토리만 나열
     * -f, --only-files: 파일만 나열
     * --no-symlinks: 심볼릭 링크 표시 안함
     * --show-symlinks: 심볼릭 링크 명시적으로 표시
     * --git-ignore: .gitignore에 언급된 파일 무시
     * -I, --ignore-glob=(globs): 무시할 파일의 글로브 패턴 설정

    긴 보기 옵션

     * -b, --binary: 파일 크기를 이진 접두사로 표시
     * -B, --bytes: 파일 크기를 바이트 단위로 표시
     * -g, --group: 각 파일의 그룹 표시
     * -h, --header: 각 열에 헤더 행 추가
     * -H, --links: 각 파일의 하드 링크 수 표시
     * -i, --inode: 각 파일의 inode 번호 표시
     * -m, --modified: 수정된 타임스탬프 필드 사용
     * -M, --mounts: 마운트 세부 정보 표시 (Linux 및 MacOS만 해당)
     * -S, --blocksize: 할당된 파일 시스템 블록 크기 표시
     * -t, --time=(field): 사용할 타임스탬프 필드 설정
     * -u, --accessed: 접근된 타임스탬프 필드 사용
     * -U, --created: 생성된 타임스탬프 필드 사용
     * -X, --dereference: 파일 정보에 대해 심볼릭 링크 해제
     * -Z, --context: 각 파일의 보안 컨텍스트 표시
     * -@, --extended: 각 파일의 확장 속성과 크기 표시
     * --changed: 변경된 타임스탬프 필드 사용
     * --git: 각 파일의 Git 상태 표시
     * --git-repos: 각 디렉토리의 Git 상태 표시
     * --git-repos-no-status: 디렉토리가 Git 저장소인지 여부만 표시 (더 빠름)
     * --no-git: Git 상태 표시 안함
     * --time-style: 타임스탬프 형식 설정
     * --total-size: 재귀적 디렉토리 크기 표시
     * --no-permissions: 권한 필드 표시 안함
     * -o, --octal-permissions: 각 파일의 권한을 8진수 형식으로 표시
     * --no-filesize: 파일 크기 필드 표시 안함
     * --no-user: 사용자 필드 표시 안함
     * --no-time: 시간 필드 표시 안함
     * --stdin: stdin에서 파일 이름 읽기

  eza 기여 방법

     * eza에 기여하려면 먼저 행동 강령을 따라야 함
     * 행동 강령을 이해한 후 CONTRIBUTING.md를 참조하여 실제 해킹에 대한 정보를 얻을 수 있음

GN⁺의 정리

     * eza는 ls의 현대적 대체품으로, 더 많은 기능과 사용자 친화적인 인터페이스를 제공함
     * 다양한 색상 옵션과 Git 상태 표시 등 유용한 기능을 포함하고 있음
     * Windows, macOS, Linux에서 모두 사용 가능하며, 설치 방법도 간단함
     * ls와 유사하지만 더 많은 옵션을 제공하여 파일 목록 작업을 더 효율적으로 수행할 수 있음
     * 비슷한 기능을 제공하는 도구로는 exa가 있음

        Hacker News 의견

     * ""human readable dates""가 불편함. 디렉토리 목록에서 날짜와 시간을 보고 싶음
          + 예를 들어, ""1 day ago"" 대신 정확한 시간 표시를 원함
          + 무한 스크롤의 결과일 수도 있음
     * lsd도 있지만 eza를 선호함
          + 현대적인 명령어 도구들 추천
               o bat - 하이라이트 기능이 있는 cat
               o difftastic - 더 나은 diff
               o gdu - SSD용 디스크 공간 분석기
               o zoxide - 현대적인 cd
               o fd - find 대체
               o rg - ripgrep (grep)
               o fzf - 퍼지 파인더
               o jless - 마우스 폴딩 기능이 있는 JSON 뷰어
               o dra - 릴리스 자산 다운로드 및 설치
               o lazygit - Git TUI
               o lazydocker - Docker TUI
               o yazi - 이미지 미리보기가 있는 파일 관리자
               o zellij - 더 나은 tmux / screen
               o starship - 크로스 쉘 프롬프트 구성
     * GNU ls는 유지 관리되고 있음
          + 최근 커밋이 있음 (2024-06-24, 2024-06-27)
          + GNU Coreutils 메일링 리스트도 활발함
     * fish shell로 전환 후 ls 사용이 100% 감소함
          + Alt + l 명령어로 디렉토리 내용 표시
          + 더 깨끗한 쉘 히스토리 결과
     * 색상을 사용하여 파일 유형을 구분하는 터미널 도구에 문제 있음
          + 눈에 편한 터미널 배경을 사용함
          + 색상 스키마가 배경과 충돌하거나 보기 어려움
          + ls 또는 ls 대체 출력에서 색상을 원하지 않음
          + ls -AFC 출력으로 충분함
     * GNU 유틸리티의 새로운 버전이 MIT 라이선스로 빌드되는 이유가 궁금함
     * README에 eza가 exa의 포크라는 언급이 없음을 이상하게 생각함
     * qwerty 키보드에서 eza 타이핑이 불편함
          + ls는 빠른 키 조합임
          + alias를 사용할 수 있지만 호환성 문제 등으로 이상함
     * eza/exa의 주요 기능은 예쁜 색상이 아니라 git 통합임
          + 파일 목록에서 개별 파일의 git 상태를 볼 수 있음 (무시됨, 수정됨 등)
     * ls를 사용하는 사람은 거의 없음
          + 탭 완성으로 필요한 파일을 나열함
          + ls가 더 이상 유지 관리되지 않는다고 주장하는 이유가 궁금함
"
"https://news.hada.io/topic?id=15964","Show GN: RawGitExtension","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: RawGitExtension

   클릭 몇번을 아껴줍니다.
   깃허브에 올린 코드나 gist에 cdn버튼을 자연스럽게 넣어서 보기도 편합니다
"
"https://news.hada.io/topic?id=15903","Show GN: 노티노트: 웹노티로 리마인드 시켜주는 간단한 크롬 익스텐션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: 노티노트: 웹노티로 리마인드 시켜주는 간단한 크롬 익스텐션

   노티노트에 간단하게 할일을 적어놓으면,
   중요도에 따라서 웹노티로 리마인드 시켜주는
   크롬 익스텐션입니다.

   하루 시작과 함께 중요한 일과 긴급한 일을 적어두면
   잊지 않게 웹노티로 리마인드 알림을 보냅니다.
"
"https://news.hada.io/topic?id=15957","txtai - 시맨틱 검색, LLM 오케스트레이션, 언어모델 워크플로우를 위한 올인원 임베딩 DB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         txtai - 시맨틱 검색, LLM 오케스트레이션, 언어모델 워크플로우를 위한 올인원 임베딩 DB

     * 임베딩 DB는 벡터 인덱스(Sparse 및 고밀도), 그래프 네트워크, 관계형 데이터베이스를 결합한 것
          + 이를 통해 SQL, 토픽 모델링, 검색 증강 생성(RAG) 등을 통한 벡터 검색이 가능
          + 독립적으로 사용하거나 대규모 언어 모델(LLM) 프롬프트에 대한 강력한 지식 소스로 사용
     * txtai 의 기능
          + SQL, 객체 스토리지, 토픽 모델링, 그래프 분석 및 멀티모달 인덱싱을 통한 벡터 검색
          + 텍스트, 문서, 오디오, 이미지 및 비디오용 임베딩 생성
          + LLM 프롬프트, 질문 답변, 라벨링, 전사, 번역, 요약 등을 실행하는 언어 모델 기반의 파이프라인
          + 파이프라인을 함께 연결하고 비즈니스 로직을 집계하는 워크플로우
               o txtai 프로세스는 단순한 마이크로서비스 또는 다중 모델 워크플로우일 수 있음
          + Python 또는 YAML로 빌드
               o JavaScript, Java, Rust, Go 용 API 바인딩 제공
          + 로컬로 실행하거나 컨테이너 오케스트레이션으로 스케일아웃
"
"https://news.hada.io/topic?id=15960","인텔, 13세대 및 14세대 모바일 CPU 크래시 문제 인정하나 데스크탑 칩과 다른 버그 때문이라고 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       인텔, 13세대 및 14세대 모바일 CPU 크래시 문제 인정하나 데스크탑 칩과 다른 버그 때문이라고 주장

     * 인텔 13세대 및 14세대 모바일 CPU에서 불안정성 문제가 보고되었으나 데스크탑 칩과는 다른 원인임
     * 인텔은 13/14세대 데스크탑 프로세서의 불안정성 문제와 모바일 제품의 문제는 다르다고 밝힘
     * 모바일 시스템의 증상으로 시스템 중단 및 충돌 등이 있으며, 이는 다양한 소프트웨어 및 하드웨어 문제에서 기인함
     * 인텔은 문제가 발생하면 시스템 제조업체에 문의할 것을 권장

앨더론 게임즈의 의견

     * 앨더론 게임즈 설립자 매튜 캐셀스는 회사의 랩톱에서 모바일 버전의 크래시 빈도가 데스크톱 칩보다 낮긴 하지만 여전히 문제가 있다고 말함
     * 랩톱의 크래시 양상이 데스크톱 부품과 정확히 동일하며 언리얼 엔진, 압축 해제, ycruncher 등의 작업에서 발생함
     * 인텔은 BGA 재작업 비용 등으로 인해 문제를 축소하고 있을 가능성이 높음
     * 레이저, MSI, 에이수스 등 다양한 랩톱에서 크래시가 발견되었으며, 게임의 충돌 보고 데이터에서 많은 랩탑이 문제를 겪고 있음을 확인함

랩터 레이크 불안정성 문제

     * Raptor Lake 및 Raptor Lake Refresh HX 시리즈는 데스크탑 칩과 유사한 다이 구성 공유
     * 인텔은 랩터 레이크와 랩터 레이크 리프레시 코어 i9 프로세서의 불안정성 원인을 좁히지 못하고 있음
     * 모바일 칩은 더 엄격한 TDP 지침을 따르고 데스크탑 프로세서보다 낮은 전압을 필요로 함
     * 인텔은 문제의 정확한 원인을 아직 파악하지 못했으며 소비자들은 임시방편적 해결책만 받고 있음
     * 이번 불안정성 사태로 인텔의 평판이 크게 훼손되고 소비자들의 신뢰도 타격을 입었음

경쟁사 AMD의 움직임

     * AMD의 최신 라이젠 9000 프로세서(코드명 Granite Ridge)가 곧 출시 예정임
     * Zen 5 코어를 탑재한 라이젠 9000은 인텔의 애로우 레이크보다 몇 달 앞서 출시될 전망임
     * 랩터 레이크 불안정성 문제는 인텔에게 최악의 타이밍에 불거짐
"
"https://news.hada.io/topic?id=15917","OpenAI, 가장 비용 효율적인 작은 모델 GPT-4o mini 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                OpenAI, 가장 비용 효율적인 작은 모델 GPT-4o mini 공개

     * GPT-4o mini는 인공지능을 훨씬 더 저렴하게 만들어 AI로 구축된 애플리케이션 범위를 크게 확장할 것으로 기대
     * MMLU에서 82%의 점수를 받았으며 현재 LMSYS 리더보드의 채팅 선호도에서 GPT-4를 능가함
     * 가격은 입력 토큰 100만 개당 15센트, 출력 토큰 100만 개당 60센트로 이전 최첨단 모델보다 10배 저렴하고 GPT-3.5 Turbo보다 60% 이상 저렴함

GPT-4o mini의 주요 기능

     * 낮은 비용과 지연 시간으로 광범위한 작업을 수행할 수 있음
     * 여러 모델 호출을 연결하거나 병렬화하는 애플리케이션(예: 여러 API 호출)에 적합함
     * 모델에 많은 양의 컨텍스트를 전달하는 애플리케이션(예: 전체 코드 베이스 또는 대화 기록)에 적합함
     * 고객과 빠르고 실시간으로 텍스트 응답을 주고받는 애플리케이션(예: 고객 지원 챗봇)에 적합함
     * API에서 텍스트와 비전을 지원하며, 향후 텍스트, 이미지, 비디오 및 오디오 입출력을 지원할 예정임
     * 128K 토큰의 컨텍스트 윈도우를 가지고 있으며, 요청당 최대 16K 출력 토큰을 지원하고, 2023년 10월까지의 지식을 보유하고 있음
     * GPT-4o와 공유하는 개선된 토크나이저 덕분에 영어 이외의 텍스트 처리가 더욱 비용 효율적으로 가능해짐

GPT-4o mini의 우수한 성능

     * GPT-4o mini는 텍스트 인텔리전스와 멀티모달 추론 모두에서 GPT-3.5 Turbo 및 기타 소형 모델을 능가함
     * GPT-4o와 동일한 언어 범위를 지원함
     * 함수 호출 성능이 우수하여 개발자가 외부 시스템에서 데이터를 가져오거나 작업을 수행하는 애플리케이션을 구축할 수 있음
     * GPT-3.5 Turbo에 비해 장문 컨텍스트 성능이 향상됨
     * MMLU에서 82.0%, MGSM에서 87.0%, HumanEval에서 87.2%, MMMU에서 59.4%의 점수를 받아 다른 소형 모델보다 우수한 성능을 보임

안전성 조치

     * 사전 학습 시 모델이 학습하거나 출력하지 않기를 원하는 정보(예: 혐오 발언, 성인 콘텐츠, 개인 정보를 주로 수집하는 사이트, 스팸 등)를 필터링함
     * 사후 학습 시 인간 피드백을 통한 강화 학습(RLHF) 등의 기법을 사용하여 모델의 동작을 정책에 맞게 조정하여 모델 응답의 정확성과 신뢰성을 개선함
     * GPT-4o mini는 GPT-4o와 동일한 안전 완화 기능이 내장되어 있음
     * 70명 이상의 외부 전문가들이 GPT-4o를 테스트하여 잠재적 위험을 식별했으며, 이를 해결했고 GPT-4o 시스템 카드와 준비 상태 스코어카드에서 자세히 공유할 예정임
     * GPT-4o mini는 API의 첫 번째 모델로 명령 계층 방법을 적용하여 모델의 탈옥, 프롬프트 주입 및 시스템 프롬프트 추출 저항 능력을 개선함

가격 및 가용성

     * GPT-4o mini는 이제 Assistants API, Chat Completions API 및 Batch API에서 텍스트 및 비전 모델로 사용 가능함
     * 개발자는 입력 토큰 100만 개당 15센트, 출력 토큰 100만 개당 60센트를 지불함
     * 향후 며칠 내에 GPT-4o mini에 대한 파인튜닝을 출시할 예정임
     * ChatGPT의 무료, 플러스 및 팀 사용자는 오늘부터 GPT-3.5 대신 GPT-4o mini에 액세스할 수 있음
     * 엔터프라이즈 사용자도 다음 주부터 액세스 가능함

앞으로의 계획

     * AI 인텔리전스의 놀라운 발전과 함께 상당한 비용 절감이 이루어지고 있음
     * GPT-4o mini의 토큰당 비용은 2022년에 도입된 text-davinci-003보다 99% 낮아짐
     * 모든 앱과 웹사이트에 모델이 원활하게 통합되는 미래를 구상하고 있음
     * GPT-4o mini는 개발자가 강력한 AI 애플리케이션을 더 효율적이고 저렴하게 구축하고 확장할 수 있는 길을 열어줌
     * AI의 미래는 더 접근하기 쉽고, 신뢰할 수 있으며, 우리의 일상적인 디지털 경험에 내재되어 가고 있음

   gpt-4o pro max ultra도 나오겠네요.
"
"https://news.hada.io/topic?id=15913","우리 삶의 물건들우리 삶의 물건들 (1983)

Steve Jobs의 1983년 Aspen 국제 디자인 컨퍼런스에서의 연설

  Jony Ive의 소개

     * Steve는 디자인 컨퍼런스에 참석하는 것이 드물었음. 1983년은 Mac 출시 이전이었고 Apple의 초기 시절이었음
     * 컴퓨터가 널리 보급될 때 일어날 극적인 변화에 대한 Steve의 이해력이 놀라웠음. 그는 단순히 예언자였을 뿐만 아니라, 우리의 문화와 삶을 영원히 바꿀 제품을 정의하는 데 근본적인 역할을 했음
     * Steve는 최초의 진정한 개인용 컴퓨터 출시를 앞두고 제품 디자인의 기반 기술과 기능에만 몰두하지 않았음. 이는 극적인 혁신의 초기 단계에서는 대개 주요 기술에 모든 관심과 집중이 주어지기 때문에 매우 이례적인 일임
     * Steve는 당시 미국의 디자인 노력이 자동차에 집중되어 있고 가전제품에는 거의 고려되지 않았다고 지적함. 제조에 대한 국가적 책임에 대해 리더들이 이야기하는 것은 드물지 않지만, 그가 국가의 디자인 책임에 대해 이야기한 것이 흥미로웠음
     * Steve는 1986년까지 PC 판매량이 자동차 판매량을 초과할 것이며, 향후 10년 동안 사람들이 자동차보다 PC에서 더 많은 시간을 보낼 것이라고 예측함. 이는 1980년대 초반에는 터무니없는 주장이었음
     * Steve는 내가 평생 만난 최고의 교육자 중 한 명임. 그는 복잡하고 추상적인 기술을 접근 가능하고 구체적이며 관련성 있는 용어로 설명하는 능력을 가지고 있었음
     * 우리의 작업을 되돌아볼 때, 나는 제품보다 과정을 가장 좋아함. Steve의 독창성 중 일부는 창의적인 과정을 지원하는 법을 배웠고, 대규모 그룹에서도 아이디어를 격려하고 발전시켰다는 점임
     * Steve가 40년 전에 설명한 혁명은 실제로 일어났고, 이는 부분적으로 그의 시민적 책임에 대한 깊은 헌신 덕분임. 그는 기능적 명령을 넘어 진심으로 관심을 가졌음

  이야기

     * 1983년 6월 어느 햇살 좋은 아침, Steve는 Aspen 국제 디자인 컨퍼런스에서 연설하기 위해 무대 뒤에서 기다리고 있었음
          + 올해의 주제는 ""미래는 예전과 다르다(The Future Isn’t What It Used to Be,)""
     * 전날 밤, Steve는 Lisa 컴퓨터 데모를 보여줬는데, 이는 마우스와 그래픽 사용자 인터페이스를 갖춘 최초의 상용 기계 중 하나였음
          + 이러한 혁신은 명령어를 입력하거나 방향키를 누르지 않고도 컴퓨터를 사용할 수 있게 해줬음. 대신 마우스로 아이콘, 메뉴, 그래픽을 클릭하고 끌어서 탐색할 수 있게 했음
     * 이 연설은 그의 첫 번째 정식 디자이너 연설이었음. 그는 자신의 프레젠테이션에 제목을 붙이지 않기로 결정했으며, 프로그램에서는 ""Talk""로만 언급됨
     * 그는 스포츠 재킷과 청바지에 매치한 줄무늬 나비넥타이를 가리키며 ""60달러를 받았기 때문에 넥타이를 매고 왔습니다.""라고 말하여 청중을 웃기면서 발표를 시작

     ""여러분 중 애플을 소유한 사람이 몇 명이나 되나요?"" 반응 없음
     ""아무거나, 아니면... 그냥 개인용 컴퓨터?"" 약간의 반응

     * 1983년 당시 미국 가정에 컴퓨터가 매우 드물었음. 미국 인구조사국은 1984년에야 가구 내 컴퓨터 보유 현황을 추적하기 시작했는데, 당시 8%의 가구만이 컴퓨터를 보유하고 있었음
          + 사람들은 컴퓨터를 소유하고 있지 않았지만 컴퓨터가 매우 중요해질 것이라는 인식은 있었음. Time지는 컴퓨터를 올해의 인물로 선정했고, Apple은 Fortune 500에 가장 젊은 기업으로 합류했음
          + 하지만 1983년에 이 새로운 기계가 일상생활에 어떤 의미를 가질지는 여전히 불분명했음. Apple 내부 문서에 따르면 많은 사람들이 컴퓨터를 처음 접할 때 약간 두려워했음
     * Steve는 이 혁명의 기수로서 Aspen에 왔음. 그는 컴퓨터를 ""우리 나머지 사람들""에게 가져오는 데 필요한 모든 것을 개발하고 있었음
     * 그러나 개발 중인 작업에 대해 이야기하거나 보여줄 수는 없었음. 그의 유일한 도구는 열정과 연단 앞에 놓인 파란색 나선형 노트였음
     * Steve는 컴퓨팅의 역사를 이야기 시작함. 그는 정기적으로 노트를 참고하여 첫 번째 컴퓨터 과학 학위가 수여된 연도나 ENIAC 컴퓨터에 대한 세부 사항을 확인함
     * 그러다 그는 자신을 방해하며 ""잠깐 다른 이야기를 하겠습니다""라고 말함. 그리고 대본에서 벗어남
     * ""내가 여기 온 이유 중 하나는 여러분의 도움이 필요하기 때문입니다.""
     * 그는 1983년에 300만 대, 1986년에는 1000만 대의 컴퓨터가 팔릴 것이라고 예측하며 ""그것들이 똥처럼 보이든 멋져 보이든 말입니다."" 청중들은 그의 욕설에 즐겁게 놀란 듯 웃었지만 Steve는 미소를 짓지 않았음
     * 자동차, TV, 카메라, 시계 등 미국의 산업이 해외 경쟁에 밀려났듯이 컴퓨터도 ""또 하나의 쓰레기 물건""이 된다면 같은 일이 일어날 것이라고 설명함
     * ""컴퓨터와 사회가 첫 데이트를 하고 있을 때"" 우리는 함께 잡아야 할 드문 기회가 있다고 강조함. 청중은 기념비적인 무언가의 탄생에 입회하고 있으며 그것을 정의하는 데 도움을 줄 수 있음
     * Steve는 지난 몇 년 동안 디자인에 대해 배울 수 있는 모든 것을 배웠음. 그는 항상 아름다운 물건을 사랑했고 Apple은 제품 디자인에 특별한 주의를 기울였음

애플의 마케팅 철학, 1977

     * 스티브는 HP에서 일했던 Jerry Manock을 Apple의 첫 사내 디자이너로 고용함
          + 스티브는 HP-35 계산기를 기능뿐만 아니라 손에 쥐는 느낌과 키를 누를 때의 촉감 때문에 좋아했음
     * 그는 전문가들로부터 배우기 위해 최선을 다함. 그는 디자이너들의 패션 선택을 연구하고, 애플 디자인 길드의 회의에 참석함
          + 디자이너가 주도하는 회의에 참석하여, 무자비한 비판을 했지만 이는 도발이 아닌 밀어붙이거나 교육하려는 시도로 받아들여졌음
     * 그는 모든 것을 보고 모든 것에 대해 이야기하고 싶어함. 그는 주방 기기, VW 밴, 와인 라벨, 갤러리 그림, 오토바이, 전화기 등을 자세히 살펴봄
          + 조안나 호프만에게 그녀가 돈을 모아 구입한 이세이 미야케 디자인 옷에 대해 물어봄
          + 그는 좋은 디자인은 단순한 장식이나 장식품이 아니라 사물의 본질을 드러내고 궁극적으로 사용자와의 감정적 교감을 불러일으키는 것이라는 교훈을 뼈 속 깊이 새기며 안목을 키우고 있었음
     * 그는 여러 Apple 디자이너들과 함께 자신이 좋아하는 물건으로 방을 채운 다음 신입사원들이 출근 첫날을 그 방에서 보내도록 지시하는 아이디어를 가지고 놀았음
     * 티파니 램프, 맞춤 조립한 스테레오 시스템 등 몇 가지 훌륭한 물건만으로 빈 공간에서 생활하는 것을 선택하며 자신만의 삶을 꾸몄음
          + 나중에 한 인터뷰어에게 ""인간이 해온 최고의 일들에 자신을 노출시키고, 그런 것들을 자신이 하고 있는 일에 도입하려고 노력하는 것이 중요하다""고 말함
     * 그는 일본으로 날아가 소니 CEO 모리타 아키오를 만나 1세대 워크맨을 받음
     * 스티브는 1981년 처음으로 Aspen 컨퍼런스에 참석함. 주제는 ""The Italian Idea""였고, 마리오 벨리니, 에토레 소트사스, 가에 아울렌티, 리처드 사퍼 등 디자이너들의 작품이 중심이 됨
          + 그는 마리오 벨리니에게 편지를 쓰고 에토레 소트사스를 만나기 위해 이탈리아를 방문함
          + Apple 디자이너 Gemmell과 Manock이 유럽 최고의 디자이너 몇 명을 초청해 7개 Apple 제품군의 일관된 디자인 언어를 만드는 경연대회를 후원하자고 제안하자 스티브는 흔쾌히 승낙함
     * 1982년 봄, 그는 ""우리의 디자인이 개인용 컴퓨터 산업에서 최고일 뿐만 아니라 세계 최고가 되기를 원한다""고 다짐함
     * 아스펜 강연을 위해 그토록 신중하게 준비한 것은 당연한 일이었음 그는 기회와 위험을 잘 알고 있었기 때문

     ""우리에게는 훌륭하게 해낼 수도 있고 그저그렇게 해낼 수도 있는 기회가 있습니다. 그리고 Apple의 많은 사람들이 그 기회를 잡기 위해 노력하고 있습니다.""

     * 스테이지로 돌아와 스티브는 라디오에서 텔레비전, 비디오디스크로의 진화 등 다른 매체의 맥락에서 컴퓨터에 대해 이야기함
          + 그는 이메일 작동 방식, 컴퓨터와 마우스로 그림 그리기, 휴대용 컴퓨터의 ""무선 링크"" 가능성, MIT의 대화형 지도 등에 대해 설명함
          + 그는 언젠가는 특정 상황에서 컴퓨터에게 ""아리스토텔레스라면 뭐라고 말했을까?""라고 물어볼 수 있게 될 가능성을 제시함
          + 스티브는 평생 혁신을 ""퇴적층""의 지속적인 축적으로 보았음. 각 세대는 전 세대의 아이디어를 기반으로 인류를 조금 더 높이 끌어올릴 잠재력을 가지고 있음
     * 스티브는 연설을 마치고 잠시도 쉬지 않고 질문을 받기 시작. 그는 대본에 있는 제품 시연을 제외하고는 항상 준비된 발언보다 질의응답을 선호했으며, 이번 강연도 예외는 아니었음
          + 파란색 노트에 적힌 그의 공식 발언은 20분 정도였지만, Q&A는 그 두 배에 가까운 시간 동안 진행
          + 그는 청중과 친밀감을 형성했으며, 청중의 질문은 네트워킹, 개인정보 보호, 그래픽 디자인, 채용 및 채용, 음성 인식 등 다양한 주제를 다룸
          + 스티브가 캘리포니아의 모든 학교에 컴퓨터를 설치하는 Apple의 프로그램인 ""Kids Can't Wait""에 대해 설명할 때 가장 큰 박수를 받음
          + 컴퓨터를 사용해 본 적이 없는 이 청중들은 이제 자녀들도 컴퓨터를 사용할 수 있기를 원함
          + 그래픽 디자인을 위한 컴퓨터 기반 도구에 대한 질문에 대한 답변으로 그는 평생의 주제가 될 훨씬 더 큰 야망을 제시
               o ""우리는 컴퓨터에 인문학적인 요소를 주입하는 문제를 해결하고 있습니다.""
               o 컴퓨터에는 다양한 글꼴과 그래픽이 포함되어야 하는 이유는 그 자체로도 아름답지만 훨씬 더 많은 것을 위한 관문 역할을 하기 때문
               o 매력적이고 이해하기 쉬운 인터페이스는 사람들을 컴퓨터로 끌어들여 새로운 아이디어를 발견하고 새로운 도구로 새로운 방식으로 자신의 생각을 전달할 수 있도록 도와줌
          + 그는 대학생들이 컴퓨터 없이는 논문을 쓰지 않는 것이 당연한 세상을 꿈꿈
     * Q&A에서 가장 인상적인 순간은 아마도 스티브가 애플의 낮은 직원 이직률에 대한 질문을 받았을 때
          + 스티브는 사람들이 일에 전념하는 이유에 대해 설명함.
          + ""우리는 어떤 이상한 이유로 우리가 무언가를 되돌려줄 수 있는 올바른 장소에 올바른 시간에 있다고 느낍니다. 대부분의 우리는 우리가 입고 있는 옷을 만들지 않았고, 우리가 먹는 음식을 요리하거나 재배하지 않았으며, 다른 사람들이 개발한 언어를 사용하고 있습니다. 우리는 다른 사람들이 개발한 수학을 사용합니다. 우리는 끊임없이 받고 있습니다. 그리고 인간 경험의 풀에 무언가를 되돌려줄 수 있는 능력은 매우 멋진 일입니다.""
          + 이러한 ""무언가를 되돌려주고 싶다""는 열망은 그의 평생 일을 이끌어갈 것임

스티브의 영상 [총 55분 발표]

GN⁺의 의견

     * 스티브 잡스는 디자인에 대한 깊은 이해와 열정을 가지고 있었음. 그는 단순히 제품의 기능성뿐만 아니라 사용자 경험 전반에 걸쳐 세심한 관심을 기울였음. 이는 오늘날 애플 제품의 성공에 큰 영향을 미쳤음.
     * 스티브는 혁신을 점진적이고 누적적인 과정으로 보았음. 그는 이전 세대의 아이디어를 기반으로 새로운 것을 만들어내는 것이 중요하다고 생각했음. 이는 기술 발전과 혁신에 대한 통찰력 있는 관점임.
     * 스티브는 컴퓨터에 인문학적 요소를 주입하는 것이 중요하다고 강조했음. 그는 기술이 단순히 기능적인 도구가 아니라 인간의 창의성과 상상력을 확장시킬 수 있는 매개체가 되어야 한다고 생각했음. 이는 오늘날 기술과 예술의 융합이 중요해지고 있는 시대에 시사하는 바가 큼.
     * 스티브는 자신이 받은 것을 사회에 환원하고자 하는 강한 열망을 가지고 있었음. 그는 기술이 인류에 기여할 수 있는 방법을 끊임없이 모색했음. 이는 기술 기업들이 사회적 책임을 다하는 것이 중요함을 보여줌.
     * 오늘날 기술 기업들은 스티브 잡스의 철학과 가치관을 배울 필요가 있음. 단순히 이윤 추구를 넘어 사회에 긍정적인 영향을 미치고, 인류의 발전에 기여하는 것이 진정한 혁신의 가치임을 인식해야 함.

   확실히 일과 제품에 대한 철학은 너무 매력적인 사람이긴 함.

   최근에 알았지만 난 스티브잡스 키즈였음. AI 시대의 차세대 스티브잡스를 보고 싶네요

        Hacker News 의견

     * Jobs의 연설 스타일에 대한 칭찬: 도덕적 문제에도 불구하고 Jobs의 전문성을 존경함. 청중은 강력하고 간단한 연설을 좋아함. 복잡한 문장을 간단하게 바꾸면 청중이 웃고 집중함. Jobs의 스타일을 모방하려고 노력함.
          + 예시: ""우리는 무엇을 해야 할지 모르겠고, 지금까지 생각한 대부분의 아이디어는 꽤 나빴음"" 같은 간단한 표현이 효과적임.
          + 청중은 ""복잡하게 만들지 말자, 내가 결정할 책임을 지겠다""는 태도를 좋아함.
          + Jeremy Irons의 영화 ""Margin Call""에서의 연설도 좋은 예시임.
          + NASA의 비행 통제사 훈련에서도 비슷한 지시가 있음.
     * 미국의 디자인 노력: 당시 미국의 디자인 노력은 자동차에 집중되어 있었고, 소비자 전자제품에는 거의 신경 쓰지 않았음.
          + 홈 스테레오 장비와 라디오의 디자인 역사는 길고 흥미로움.
          + 80년대에는 흥미롭고 예쁜 전자 기기가 많았음.
     * 젊은 세대와 컴퓨터 역사: 젊은 세대는 1983년의 컴퓨터가 못생기고 사용하기 어렵다는 것을 이해하지 못할 수 있음.
          + 당시 IBM PC와 DOS를 언급하고 있음.
          + Windows 3.1은 1993년에 나왔음.
     * 정확한 예측: 많은 예측이 실제로 맞았음. 소프트웨어 트라이얼, 앱 스토어, 컴퓨터의 소형화, 인터넷, 13/14세의 앱 비즈니스, 컴퓨터 가격 하락 등이 있음.
     * ChatGPT 예측: Steve Jobs는 ChatGPT를 예측했음. 40년 차이가 있지만, 완벽하지는 않음.
     * 기술 디자인의 진보와 손실: SJ는 기술 디자인에서 큰 진보를 이끌었음. 그러나 너무 많은 추상화로 인해 컴퓨터 사용이 어려워졌음.
          + 사용자와 컴퓨터 간의 거리가 커졌음.
          + 소프트웨어 엔지니어링에서 많은 부분이 이 간극을 메우는 데 사용됨.
          + 기계의 효율성과 사용자의 능력이 저하됨.
     * SJ의 비전: SJ는 진정한 비전가였음. 컴퓨터 혁명을 철학적이고 깊이 있게 바라보았음. 친구와 가족에게 추천할 수 있는 제품을 만드는 데 신경 썼음.
     * 페이지 로딩 문제: 페이지가 로딩되지 않음. 동일한 내용을 담은 YouTube 비디오 링크를 공유함.
     * 전체 연설: 1983년 연설과 Q&A 응답의 1시간 오디오가 있음. 2012년에 카세트에서 디지털화됨.
          + 추가 비디오가 있는지 궁금해함.
"
"https://news.hada.io/topic?id=15967","Jellyfin: 정말로 괜찮은 미디어 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Jellyfin: 정말로 괜찮은 미디어 서버

    프로젝트 공지

     * Jellyfin은 지난 5년 동안 많은 예산을 모았음
     * 현재 은행에 $24,000 이상이 있으며, 월 평균 지출이 약 $600임
     * 이는 40개월(3.3년) 이상의 운영 자금을 의미함

    기부 요청

     * 현재 Jellyfin 프로젝트는 추가 기부가 필요하지 않음
     * 대신, 사용 중인 클라이언트의 저자에게 기부를 고려해달라는 요청
     * 클라이언트 지원은 Jellyfin 생태계에서 가장 어려운 부분이며, 대부분 소규모 팀이나 개인이 유지 관리 중임
     * API 변경 사항으로 인해 클라이언트 저자들이 바빠질 예정이므로, 이들에게 지원이 필요함

    기부 정책

     * 기부는 ""유료 개발 금지"" 정책을 위반하지 않음
     * 버그 바운티나 유사한 것은 여전히 인정하지 않으며, 기부금은 유료 개발에 사용되지 않음
     * 남은 운영 자금이 1년(12개월) 이하로 떨어지면 다시 평가할 예정임

    커뮤니티 반응

     * 커뮤니티 회원들은 이 공지를 긍정적으로 받아들이고 있음
     * 일부 회원들은 특정 클라이언트 저자에게 기부할 계획을 밝힘
     * WebOS 버전의 클라이언트 지원에 대한 질문이 있었으며, 이는 주로 웹과 관련이 있음

    GN⁺의 정리

     * Jellyfin 프로젝트는 현재 충분한 자금을 보유하고 있어 추가 기부가 필요하지 않음
     * 대신 클라이언트 저자들에게 기부를 권장하고 있음
     * 커뮤니티는 이 공지를 긍정적으로 받아들이고 있으며, 일부는 특정 클라이언트 저자에게 기부할 계획을 밝힘
     * WebOS 버전의 클라이언트 지원에 대한 질문이 있었으며, 이는 주로 웹과 관련이 있음

        Hacker News 의견

     * 첫 번째 의견
          + 이 게시물에 불만이 있음
          + 기부를 멈추라고 요청하기보다는 제안한 대로 생태계 개발자들에게 수익을 분배해야 함
          + 투명하게 하고, 기금 신청 가능하게 하며, 기능 보상금을 설정하고, 기부 버튼 옆에 작성해야 함
          + 기부를 멈춘 사람은 계속해서 지원할 클라이언트나 개발자를 연구하지 않을 가능성이 큼
          + Jellyfin 유지 관리자가 이를 더 잘 처리할 수 있음
     * 두 번째 의견
          + 최근 Jellyfin을 사용하여 친구들과 금요일 영화 밤을 즐기고 있음
          + 웹 UI의 동기화 기능이 놀랍도록 잘 작동함
          + 전반적으로 매우 견고하다고 생각하지만 다른 미디어 센터 소프트웨어와 비교해보지는 않음
          + 유일한 불만은 폴더 구조를 잘 받아들이지 않는다는 것임
          + Jellyfin이 특정 폴더 구조를 요구하는 것 같지만, 이를 변경하는 데 시간이 많이 걸림
          + 현재의 폴더 레이아웃에 만족하고 있음
     * 세 번째 의견
          + 몇몇 요청된 기능이나 클라이언트가 전혀 진전되지 않음
          + Chromecast와 같은 기능은 한동안 포기했지만 최근 몇 주 동안 새 생명을 얻음
          + Jellyfin의 가장 큰 불만은 클라이언트 지원 부족과 다듬어지지 않은 부분임
          + 이를 개선하고 싶지만 더 많은 자원봉사자가 필요함
          + 새로운 개발자를 프로젝트에 참여시키고 코드 개선, 문서 작성 등을 도와줄 사람이 필요함
          + 개발자 경험을 개선하고 새로운 개발자를 유치하기 위해 돈을 쓸 수 있음
          + 클라이언트 개발을 지원하기 위해 하드웨어, 라이센스, 비용 등을 지원할 수 있음
     * 네 번째 의견
          + 프로젝트가 성공하기를 바라며 좋은 움직임이라고 생각함
          + 평생 Plex 패스를 가지고 있지만 Jellyfin은 여전히 부족함
          + Jellyfin을 사용할 때마다 뭔가 부족한 느낌이 있음
          + 계속해서 확인할 예정임
     * 다섯 번째 의견
          + Jellyfin에 대해 처음 들어봤으며, 많은 오픈 소스 프로젝트와 비교해 신선한 느낌을 받음
          + Raspberry Pi 4에 SMB 공유를 가지고 있으며 Amazon Fire Stick에서 VLC SMB 기능을 사용하여 연결함
          + VLC UI가 만족스럽지 않음
          + Jellyfin이 더 나을지 궁금함
          + Fire TV Stick에서 작동하는 클라이언트가 있는지 궁금함
     * 여섯 번째 의견
          + 이런 행동이 Plex 대신 Jellyfin을 사용하게 만드는 이유임
     * 일곱 번째 의견
          + 몇 년 전 Plex에서 Jellyfin으로 전환했으며 만족하고 있음
          + Plex는 자막 파일이 있는 영화에서 문제가 있었음
          + Jellyfin은 잘 작동함
          + 원하지 않는 기능에 대해 더 이상 귀찮게 하지 않음
          + 로컬 영화를 평화롭게 시청할 수 있음
     * 여덟 번째 의견
          + Jellyfin 사용자로서 $24,000 또는 40개월의 비용이 충분하지 않다고 생각함
          + 프로젝트가 자급자족하려면 10배 더 많은 돈이 필요함
          + 자급자족이 목표가 되어야 함
     * 아홉 번째 의견
          + $400/월은 노동 비용을 고려하지 않음
          + 사람들이 개인적으로 기부하는 이유임
     * 열 번째 의견
          + Jelly Cloud 솔루션이 있는지 궁금함
          + EC2 인스턴스에 Jellyfin을 배포하고 S3와 연결하여 사용자 정의 도메인을 제공하는 회사가 있는지 궁금함
          + 대부분의 개발자는 이를 스스로 할 수 있지만, 이를 서비스로 제공하고 싶음
          + Plex와 Emby가 경쟁자가 될 수 있지만 오픈 소스는 아님
"
"https://news.hada.io/topic?id=15982","대한수학회 2023년 수학분야 권장 학술지 목록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       대한수학회 2023년 수학분야 권장 학술지 목록

     * 대한수학회에서는 한국 수학자들이 부실 의심 학술지(또는 약탈적 학술지)에 논문을 게재하는 행태가 별로 고쳐지지 않고 있다고 판단함.
     * 연구원 9명이 2023년 6월부터 7개월간 10차례 회의를 진행함.
     * 2023년 8월 25일에 열린 3차 회의에서, 거의 모든 대학이 선별 과정 없이 SCI 순위만 고려해 승진·승봉 심사를 위한 연구 업적 평가를 한다는 사실이 설문 조사로 확인됨.
     * 본 학술지 목록이 수학의 응용과 관련된 미래의 변화성은 반영할 수 없을 것으로 판단해, 수학자뿐 아니라 다양한 배경을 가진 전문가들과의 공동 연구를 추진하는 응용 수학 분과와 암호학 분과는 심층 논의 끝에 본 학술지 목록에 포함하지 않기로 함.
     * PDF 문서 내려받기

   이렇게 자정노력을 하시는 분야가 있었네요. 널리 퍼져 다른 분야도 조금씩 나아졌으면 좋겠습니다. 정말 노력하고 자랑스런 학자분들이 인정받고 보답받는 학계가 되었으면 합니다.
"
"https://news.hada.io/topic?id=15902","Show GN: Firexport - One-click firestore export","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: Firexport - One-click firestore export

   firebase console에서 firestore 데이터를 곧바로 export할 수 있는 크롬 익스텐션입니다. 기존 firestore export 과정이 불편해서 만들었습니다.

   firestore는 export가 중요합니다. 왜냐하면 데이터를 읽은 수만큼 과금이 되기 때문입니다. 데이터 조회를 많이 해야 하는 경우에는 데이터를 export한 후 엑셀에서 데이터를 조회하는 것이 비용 효율적입니다. firexport를 통해서 돈을 아낄 수 있으면 좋겠습니다.
"
"https://news.hada.io/topic?id=15987","Meta, Llama 3.1 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Meta, Llama 3.1 공개

     * 128K 컨텍스트 길이, 8개 언어를 지원하며, 405B 모델을 추가(8B, 70B, 405B)
          + 누구나 파인튜닝, 정제하고 어디에나 배포할 수 있는 오픈소스 인스트럭션-튠드 AI 모델
     * 새로 공개된 405B 모델은 MMLU(일반), Human Eval(코딩), GSM8K(수학) 벤치등에서 GPT-4o와 거의 비슷하거나 나은 수준을 달성
          + 유연성과 제어력에서 최고 수준의 AI 모델
          + 커뮤니티가 합성 데이터 생성 및 모델 증류와 같은 새로운 워크플로우를 활용할 수 있게 해줌
          + 15조 개 이상의 토큰을 사용하여 훈련되었으며, 16000개 이상의 H100 GPU 사용
     * 업그레이드 된 70B 모델은 대부분의 벤치에서 GPT-3.5 Turbo를 훨씬 뛰어넘음

   와 405B는 올리려면 GPU를 어떻게 구성해야 하나 싶네요

   405B는 직접 파인튜닝이나 서빙 용도는 아닌것 같습니다. ceo가 distillation을 여러번 언급한것을 보니 teacher모델로 경량모델들의 품질을 높이는 파인튜닝 용도가 아닐까 합니다.

  Hacker News 의견

     * Llama 3.1 모델들이 성능을 개선했음
          + 8B와 70B 모델이 Llama 3보다 성능이 향상됨
          + 405B 모델은 GPT-4o, GPT-4 turbo, Claude 3.5 Sonnet, Claude 3 Opus와 경쟁할 수 있는 수준임
     * GPT-4o와 Llama 3.1 405B 모델 비교
          + MMLU: GPT-4o 88.7, Llama 3.1 405B 88.6
          + GPQA: GPT-4o 53.6, Llama 3.1 405B 51.1
          + MATH: GPT-4o 76.6, Llama 3.1 405B 73.8
          + HumanEval: GPT-4o 90.2, Llama 3.1 405B 89.0
          + MGSM: GPT-4o 90.5, Llama 3.1 405B 91.6
     * Groq.com에서 초저지연으로 새로운 모델들과 대화 가능함
          + 8B와 70B API 접근 가능
          + 405B API는 선택된 고객만 접근 가능
     * 적절한 하드웨어를 사용하면 집에서도 GPT-4o와 경쟁할 수 있는 LLM을 실행할 수 있음
     * Ollama, Huggingface, Groq 등에서 로컬로 모델 실행 가능함
          + LLMStack을 사용하여 로컬에서 모델을 테스트하거나 애플리케이션을 빠르게 구축할 수 있음
     * Ollama에서 70B 버전을 실행해본 결과 매우 좋았음
          + 가이드라인과 디스클레이머를 끄는 명령어를 실행할 수 있었음
          + 엔지니어의 잠재적 편향을 줄이는 명령어 목록을 제공받음
     * Claude 3.5 Sonnet이 코딩 작업에 매우 좋음
          + 아티팩트 기능과 함께 코딩 벤치마크에서 여전히 최고임
     * 오픈 소스 모델의 가격 정보 문의
          + 자체 호스팅에 매우 흥미롭지만, 토큰당 호스팅 추론 가격이 OpenAI와 Anthropic에 비해 경쟁력이 떨어짐
          + 예: Llama 3 70B는 다양한 플랫폼에서 백만 토큰당 $1에서 $10 사이, Claude Sonnet 3.5는 백만 토큰당 $3
"
"https://news.hada.io/topic?id=15956","인텔 vs. 삼성 vs인텔 vs. 삼성 vs. TSMC

주요 파운드리 3사의 로드맵 비교

     * Intel, Samsung, TSMC 등 주요 파운드리 3사가 향후 칩 기술 세대에 대한 로드맵의 주요 부분을 공개하기 시작함
     * 3사 모두 트랜지스터 스케일링을 18/16/14 앙스트롬 범위까지 계속할 계획이며, nanosheet와 forksheet FET에서 complementary FET(CFET)로 전환할 가능성이 있음
     * AI/ML과 데이터 폭증이 주요 동인이 되고 있음
     * 수율 향상을 위해 중복성과 동질성이 높은 프로세싱 요소 어레이를 활용하는 경향이 있음
     * 2.5D 구성의 기판에 수십 개 또는 수백 개의 칩렛을 탑재하는 방식도 증가 추세
     * 3사 모두 완전한 3D-IC를 개발 중이며, 로직을 로직 위에 적층하고 기판에 장착하는 이종 옵션(3.5D 또는 5.5D로 불림)도 제공 예정

급격한 대량 맞춤형 설계 추세

     * 과거보다 훨씬 더 빠르게 도메인 특화 설계를 시장에 출시하는 것이 경쟁력 확보에 필수적임
     * 이를 위해서는 칩 설계, 제조, 패키징 방식의 근본적인 변화가 필요
     * 표준, 혁신적인 연결 방식, 다양한 엔지니어링 분야의 협업 등이 요구됨
     * 이른바 ""대량 맞춤 설계""라 불리는 이 접근 방식은 Moore의 법칙의 다음 단계를 의미

이기종 칩렛을 함께 작동시키는 도전 과제

     * 이종 칩렛을 예측 가능한 방식으로 연결하는 것이 첫 번째 과제
     * Universal Chiplet Interconnect Express(UCIe)와 Bunch of Wires(BoW) 표준 개발에 주력
          + 이러한 연결성은 3사 모두에 중요한 요구 사항이지만, 동시에 가장 큰 차이점 중 하나이기도 함
     * 인텔은 Embedded Multi-Die Interconnect Bridge (EMIB)를 활용
          + 소켓 기반 접근 방식으로 제한된 기능의 칩렛을 사양에 맞춰 개발
          + 패키지 어셈블리 디자인 키트를 제공
     * 삼성은 2.3D 또는 I-Cube ETM이라고 부르는 내장형 브리지를 사용
          + 서브 시스템을 브리지에 연결하여 작업 속도를 높임
          + 특정 시장을 목표로 하는 미니 컨소시엄을 구축
          + 3DCODE라는 자체 시스템 기술 언어를 발표
     * TSMC는 다양한 옵션 실험
          + RDL 및 비-RDL 브리지, 팬아웃, 2.5D 칩온웨이퍼온서브스트레이트(CoWoS) 및 System On Integrated Chips (SoIC) 등 다양한 패키징 옵션 제공
          + 새로운 언어 3Dblox를 도입하여 물리적 및 연결적 구성 요소를 결합한 상위 설계 체계 제공

공정 기술 로드맵

     * Samsung은 2027년경 14앙스트롬 SF1.4 공정 도입 예정(18/16앙스트롬은 건너뛸 듯)
          + 2nm(SF2) 다이를 4nm(SF4X) 다이 위에 적층하고 또 다른 기판 위에 탑재하는 로드맵을 제시
          + 2027년부터 SF1.4를 SF2P 위에 적층할 계획
     * Intel은 올해 18A 공정을 도입하고 몇 년 후 14A 공정을 도입할 계획
          + Intel은 Foveros Direct 3D를 활용해 로직을 로직 위에 적층할 예정
     * TSMC는 2027년 A16 공정을 추가할 예정
          + CoWoS는 이미 NVIDIA와 AMD의 AI 칩 어드밴스드 패키징에 사용 중
          + SoIC 기술은 메모리를 로직 위에 적층하고 센서 등 다른 요소도 통합하는 것이 목표

기타 혁신 기술

     * Samsung은 맞춤형 HBM 계획을 발표했는데, 구성 가능한 로직 레이어 아래에 3D DRAM 스택을 패키징하는 방식
     * Intel은 트랜지스터 밀도가 높아짐에 따라 전력 공급 문제를 해결하기 위해 칩 뒷면을 통해 전력을 공급하는 PowerVia 기술 개발
     * TSMC와 Samsung도 뒷면 전력 공급 기술을 개발 중
     * Intel은 글래스 기판 도입 계획을 발표했는데, 평탄도가 높고 결함이 적은 장점이 있음
     * TSMC와 Samsung도 글래스 기판 기술을 개발 중

에코시스템의 중요성

     * 파운드리의 에코시스템 구축 능력이 매우 중요해짐
     * 단일 기업이 모든 것을 할 수 없을 만큼 반도체 산업이 복잡해졌기 때문
     * 그러나 공정 수가 계속 증가할수록 모든 변화나 개선 사항을 EDA 업체가 지원하기는 점점 더 어려워질 것

결론

     * 반도체 공급망 문제와 지정학적 상황으로 인해 미국과 유럽에서 제조 재편 필요성 대두
     * 경쟁의 핵심은 ""신속하고 효율적인 솔루션 제공 능력""
     * 파운드리 경쟁은 더욱 복잡해지고 있으며, 단순 비교 지표는 더 이상 유효하지 않음
"
"https://news.hada.io/topic?id=15978","인텔, 14세대 및 13세대 CPU 불안정 문제에 대한 공식 대응 발표: 작동 전압 상승이 원인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         인텔, 14세대 및 13세대 CPU 불안정 문제에 대한 공식 대응 발표: 작동 전압 상승이 원인

     * 인텔 13/14세대 CPU 불안정 문제에 대해 공식 성명을 발표, 작동 전압 상승이 주요 원인
     * 문제가 있는 마이크로코드 알고리즘으로 인해 CPU에 잘못된 전압 요청이 발생하여 작동 전압이 상승했음
     * 인텔은 운영 전압 상승의 근본 원인을 해결하는 마이크로코드 패치를 제공할 예정
     * 현재 다양한 불안정 시나리오에 대해 패치 검증 중이며, 8월 중순까지 파트너사에 패치를 제공할 계획
     * 600 및 700 시리즈 메인보드에 대한 각 메인보드 제조사의 BIOS 업데이트는 8월 중순 이후 롤아웃될 예정

14세대 및 13세대 CPU 불안정 문제 관련 흐름

     * 2022년 12월: 13세대 코어 i9 CPU에서 ""비디오 메모리 부족"" 문제가 처음 보고됨
     * 2023년: Callisto Protocol, Hogwarts Legacy 등 유명 AAA 타이틀에서 게임 크래시 및 문제 보고 증가
     * 2024년 2월: Sebastian Castellanos의 게시물로 문제가 부각되고, 언더클럭과 언더볼팅으로 안정성이 개선될 수 있음이 지적됨
     * 2024년 4월: Nvidia, 안정성 문제가 엔비디아 GPU가 아닌 인텔 CPU와 관련 있다고 공식 발표. 인텔, 13세대 및 14세대 CPU 영향 조사 착수
     * 2024년 5월: 인텔, 메인보드 제조사에 사용자 지정 설정이 아닌 ""인텔 기본 설정""을 BIOS에 기본값으로 제공할 것을 권장
     * 2024년 6월: 인텔, eTVB 마이크로코드 내 버그 발견했지만 불안정 문제 해결되지 않음. 메인보드 제조사 신속히 새 마이크로코드 수정 사항이 포함된 BIOS 출시
     * 2024년 7월: 인텔, 불안정 문제를 일으킨 CPU에 대해 RMA 거부. Level1Techs와 GamersNexus가 추가 세부 정보 소개하며 문제 강조. 인텔, 14세대 및 13세대 모바일 CPU는 데스크톱 CPU와 동일한 불안정 문제의 영향을 받지 않는다고 발표. 인텔, 불안정 문제의 근본 원인을 발견하고 8월 중순까지 새로운 마이크로코드 수정 패치를 파트너에게 제공할 예정이라고 확인

   인텔, 13세대 및 14세대 모바일 CPU 크래시 문제 인정하나 데스크탑 칩과 다른 버그 때문이라고 주장
"
"https://news.hada.io/topic?id=15971","열쇠고리 크기의 Nintendo Wii, Kawaii","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     열쇠고리 크기의 Nintendo Wii, Kawaii

    YveltalGriffin의 첫 Wii U 트리머

     * Wesk와 Yveltal의 협업
          + 지난 여름, Wesk가 Final Destination OMEGA를 개발하는 동안, Yveltal과 함께 GC Nano보다 더 작은 Wii 마이크로 빌드를 만들기로 논의함
          + OMEGA 트림을 완전히 활용한 최초의 빌드로, OMEGA 트림의 외곽선보다 약간 큰 크기의 가장 작은 기능성 Wii를 만듦
          + 초기에는 팬, 5mm 히트싱크, 컨트롤러 포트, 마이크로 HDMI 아웃을 갖춘 전통적인 형태를 상상함
     * 디자인 변경
          + 몇 주 후, 플라스틱 쉘과 히트싱크를 가공된 금속 일체형으로 교체하는 아이디어를 떠올림
          + 컨트롤러, A/V 및 전원 포트를 자기 포고 핀 커넥터로 교체하여 크기를 더욱 줄임
          + 이 시점에서 레귤레이터는 여전히 오프보드에 있었음
     * Wii 언더볼팅 및 Thundervolt
          + 몇 주 후, Wesk와 Drew가 Wii 언더볼팅을 해결하고 Kawaii의 패시브 냉각에 대해 논의하기 시작함
          + 거의 1년이 지나 Wii U 트림 개발과 Thundervolt 개발에 집중함
          + Thundervolt를 Kawaii에 넣는 것이 당연하다고 판단하여 크기가 약간 커짐 (57x57mm에서 60x60mm로)
     * 최종 디자인
          + Wesk가 새로운 유기적 핀과 단일 자기 포고 핀 커넥터를 포함한 쉘을 재설계함
          + 도크를 설계하여 Kawaii를 수직으로 배치하여 최적의 열 대류를 가능하게 함
     * 최종 Kawaii 쉘
          + 알루미늄으로 가공되고 다양한 색상으로 양극 처리됨
          + 프로젝트 로고와 가짜 준수 마크가 레이저로 새겨짐
     * 계획된 사양
          + 60x60x16mm CNC 가공 알루미늄 섀시 (패시브 냉각)와 레이저 새김 아트워크
          + Thundervolt가 포함된 언더볼티드 OMEGA 트림
          + 12핀 자기 포고 핀 커넥터 (MagSafe 유사)
          + SD-USB, 입력 보호 및 비디오 멀티플렉싱을 위한 내부 브레이크아웃 PCB
          + USB-C 전원 입력, x4 GCC 컨트롤러 포트, 컴포지트/컴포넌트 비디오 출력 및 스테레오 오디오 출력을 갖춘 도크
          + 최고 미학을 위한 6개의 아크릴 창과 RGB LED
          + 키체인 루프
     * 렌더링 이미지
          + Wesk가 제공한 섹시한 렌더링 이미지
          + Kawaii가 GC Nano 및 Short Stack과 비교되는 모습
     * 오픈 소스
          + GC Nano 및 Short Stack과 마찬가지로, Kawaii도 완성되면 완전히 오픈 소스로 제공될 예정

    GN⁺의 정리

     * 이 프로젝트는 Wii의 크기를 극도로 줄여 휴대성을 극대화한 점에서 흥미로움
     * Thundervolt와 같은 최신 기술을 적용하여 성능과 효율성을 높임
     * 다양한 색상과 레이저 새김 아트워크로 미학적인 요소도 강조함
     * 오픈 소스로 제공되어 커뮤니티의 참여와 발전 가능성을 높임
     * 비슷한 기능을 가진 프로젝트로는 GC Nano와 Short Stack이 있음

        Hacker News 의견

     * ""Thundervolt"" 프로젝트는 Wii PCB를 잘라 DRAM과 프로세서만 남기고, 외부 DCDC 보드를 추가해 전력을 공급하며 IR 손실을 줄이기 위해 언더볼팅을 하는 것임
          + Thundervolt 프로젝트 링크
     * Nintendo의 브랜드를 박스에 사용하는 것은 법적 문제를 일으킬 수 있는 위험한 행동임
     * 비디오 게임을 재미있게 만드는 데는 현대 시스템에서 사용하는 만큼의 하드웨어가 필요하지 않음
     * Wii를 센서 바 안에 자체적으로 포함시킬 수 있다는 것은 놀라운 일임
     * GC Nano의 크기가 얼마나 작은지 보여주는 예시
          + GC Nano 크기 예시 링크
     * 오래된 콘솔이 얼마나 작아질 수 있는지 궁금함
     * 이 프로젝트가 실제 Wii 부품을 더 작은 PCB에 넣는 것인지, 동일한 아키텍처의 더 효율적인 CPU를 사용하는 것인지, 아니면 Wii 하드웨어를 에뮬레이션하는 완전히 새로운 디자인인지 궁금함
          + 이 장치가 실제 Wii OS를 실행할 수 있는지, 아니면 Wii 게임을 실행할 수 있는 대체 OS를 실행하는지 궁금함
     * Kawaii와 비슷한 크기의 30~50개 정도의 양산 가능한 양극 산화 알루미늄 케이스 추천을 찾고 있음
          + 현재 받은 견적이 개당 $95에 가까워서 너무 비싸다고 생각함
     * 외부 도크에 연결해야 플레이할 수 있다면 그것도 포함되는지 궁금함
     * ""Kawii""라고 불리지 않는지 궁금함
"
"https://news.hada.io/topic?id=15887","구직 시장의 패닉","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               구직 시장의 패닉

Panic! at the Tech Job Market

  Job Openings vs. Interest Rates

    Interest Rates

     * 최근 몇 년간 금리가 0%에 가까웠다가 이제 5% 이상으로 상승함
     * 금리가 높아지면 돈의 가격이 비싸져 기업들이 위험 자산에 투자하지 않음
     * 약한 기업들은 무너지고 강한 기업들은 구조조정을 하며, 고임금 근로자들은 일자리를 잃음

  Company Structures

     * 기술 회사는 네 가지 유형으로 나뉨:
          + 네포 회사: 무제한 자금을 가진 친구들이 있는 회사
          + 투기 회사: 아이디어는 있지만 제품이나 고객이 없는 회사
          + 초기 성장 회사: 아이디어가 인기를 끌기 시작해 자금을 교환하는 회사
          + 안정기 회사: 반복 가능한 GTM 능력을 가진 회사

    Company Level to Compensation Scale

     * 회사의 크기, 자금, 수익에 따라 직원 보상이 달라짐
     * 네포 회사: 개인 연결에 따라 보상이 무제한
     * 투기 회사: 시장 가격의 50%~80% 보상, 높은 업무량
     * 초기 성장 회사: 높은 위험, 낮은 보상, 창업자 부유화 목적
     * 안정기 회사: 안정적인 성장과 수익, 높은 보상

  How to Get Hired

     * 기술 직종 채용 과정은 완전히 망가짐
     * 인터뷰 과정은 실제 업무와 무관한 과제들로 구성됨
     * 행동 면접: 후보자의 성격과 갈등 해결 능력을 평가하는 면접

  Everything Bagel and A Bag of Chips

     * 과도한 요구사항을 가진 직무 설명서
     * 한 사람이 여러 부서의 업무를 맡아야 하는 상황
     * 경험이 없는 개발자들이 여러 역할을 맡아야 하는 문제

    Field Report: Job Experience Notes

     * 실제 회사에서 발생한 문제와 해결 사례
     * AWS 인프라 최적화, 데이터베이스 성능 개선 등 다양한 사례

GN⁺의 정리

     * 금리 상승이 기술 직종에 미치는 영향과 회사 구조에 따른 보상 차이를 설명함
     * 기술 직종 채용 과정의 문제점과 과도한 직무 요구사항을 지적함
     * 실제 회사에서 발생한 문제와 해결 사례를 통해 경험의 중요성을 강조함
     * 이 기사는 기술 직종에 종사하는 사람들에게 유익하며, 채용 과정의 개선이 필요함을 시사함

        Hacker News 의견

     * 많은 사람들이 다양한 산업에서 직업을 구하거나 승진을 시도하고 있지만 어려움을 겪고 있음
          + 네트워크와 친구들을 최대한 활용하는 것이 중요함
          + 기술 직업이 줄어들어 소프트웨어 컨설팅 회사에서 8개월 동안 대기 상태였음
          + 결국 기업 및 세금 평가로 돌아갔음
          + 정신적으로는 아무것도 하지 않는 것보다 나음
     * 기술 채용의 목표는 100에서 115 사이의 중간 수준의 사람들을 찾는 것임
          + 코딩 인터뷰가 실제로 신호를 잡아내는 것일 수 있음
          + 과거에는 코딩 인터뷰가 일상 업무와 무관하다고 생각했지만, 이제는 그렇지 않다고 생각함
     * 과거 직장에서 문제를 모두 볼 수 있었지만 회사가 파산했다면, 자신이 이상적인 직원이 아닐 수도 있음
          + 프로그래밍 인터뷰를 무시하지만 월세를 낼 수 없다면, 인터뷰가 그렇게 나쁘지 않을 수 있음
          + AWS 지식을 사용하여 쿼리 시간을 단축하는 것이 성공적인 회사와 실패한 회사의 차이는 아님
          + 회사가 더 나은 시스템 관리를 원하지만, 데이터베이스 설계와 AWS 비용 절감에 너무 집중하면 안 됨
     * 기사가 좋지만, 저자가 직업의 급여에 대해 과장된 견해를 가지고 있음
          + 미국의 평균 소프트웨어 엔지니어 연봉은 약 135-150k임
          + FAANG 엔지니어의 상위 연봉을 포함한 평균임
     * 최근 졸업생과 주니어들이 가장 큰 어려움을 겪고 있음
          + CS 졸업생이 과잉 생산되고 있음
          + 스타트업이 경험 없는 사람들에게 베팅하기 어렵고, 성숙한 회사는 더 저렴한 시니어를 선호함
          + 많은 재능 있는 사람들이 해고되어 급여를 낮추고 있음
     * 15년 동안 엔지니어를 채용해온 경험으로, 현대 채용에 대한 많은 비판에 동의함
          + 기술 인터뷰가 직무 성과와 관련이 없다고 생각함
          + 추천 채용이 여전히 가장 효과적임
     * 기사에서 제시된 급여 수치가 혼란스러움
          + $5k - $10k / 일은 연간 $1m - $3m에 해당함
          + 비기술 회사가 소프트웨어 엔지니어에게 그렇게 많이 지불하는 것은 드뭄
     * 글에서 좋은 점이 있을 수 있지만, 자기 반성이 부족하고 협업하기 어려운 사람처럼 보임
     * 코딩 인터뷰가 그렇게 나쁘지 않다고 생각함
          + 채용은 본질적으로 손실이 많은 과정임
          + 다른 산업은 인증서를 사용하여 정렬함
          + 코딩 인터뷰는 타협임
     * 대부분의 기업 소프트웨어 팀은 비기술 제품 팀이 작업을 정의하고 우선순위를 정하는 구조를 가지고 있음
          + 시장이 정한 경계 조건 내에서 일을 하는 것이 현명할 수 있음
"
"https://news.hada.io/topic?id=15932","Sendune – 오픈소스 HTML 이메일 디자이너","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Sendune – 오픈소스 HTML 이메일 디자이너

     * Drag & Drop 방식의 HTML 이메일 편집기
     * MJML 같은 중간코드 없이 HTML을 직접 생성
     * 세가지 기본 템플릿 타입 지원 : 드래그 앤 드롭 디자인, HTML 코드 편집, 플레인 텍스트
          + 자신만의 템플릿 만들고 저장 가능
     * 개발 동기
          + 이메일용 HTML 작성은 매우 어려운 작업임
          + 규칙에서 조금만 벗어나도 다양한 OS/데스크탑/모바일 클라이언트에서 이메일이 깨짐
          + 이메일이 발명된 지 거의 50년, HTML이 탄생한 지 35년이 지났지만 이메일 디자인은 아직 해결 안됨
          + 몇 가지 괜찮은 오픈 소스 이메일 디자이너가 있지만, 종속성 때문에 앱에 포함시키기 번거로움
          + 이러한 이유로 HTML 이메일 디자이너를 오픈소스로 공개하기로 결정함

        Hacker News 의견

     * MJML이 없다는 것은 실수라는 의견. 이메일 디자인에서 가장 중요한 기능임
     * 디자인이 훌륭해 보임. 시도해볼 것임
     * 정말 훌륭함. 반응형 스타일을 추가할 수 있는지 궁금함. 예를 들어, 작은 화면에서 열을 행으로 변환하는 것
     * 드래그 앤 드롭 기능이 작동하지 않음. Firefox, macOS에서 요소를 클릭하면 나타나지만 이메일로 드래그할 수 없음
     * 이 작업이 매우 유망해 보임. ""이메일용 HTML""은 디자인과 구현이 어렵고, 특히 모바일, 태블릿 장치 또는 아시아 언어 입력에서 어려움이 있음
          + B2B CRM 용도로 많은 이메일 템플릿 작업을 하고 있으며 slatejs/platejs 편집기를 기반으로 한 다른 접근 방식을 선택했음
          + slatejs/platejs의 내부 이메일 템플릿 표현은 JSON 형식으로 쉽게 Postgres jsonb에 저장할 수 있음
          + Reactjs 기반 위젯을 쉽게 추가할 수 있음. 예: 멘션, 미디어, 다이어그램 등
          + 단점은 픽셀 단위로 정확한 템플릿을 디자인할 수 없다는 것임
          + 더 나은 추상화는 아마도 MJML일 것임. 그러나 slatejs/platejs JSON 형식으로 CRM, 지식 베이스 등 다양한 자산에 편집 내용을 복사 및 붙여넣기 할 수 있음
          + MJML에 데이터를 저장하는 것은 좋은 선택이 아님
          + SendWithSES/Drag-and-Drop-Email-Designer와 유사한 것을 마지막 단계로 사용하려 했으나, 대부분의 최종 사용자는 신경 쓰지 않음
          + 데이터 표현과 ""Postgres <> Editor > Email HTML > Send button"" 데이터 흐름에 대한 의견을 환영함. 이 주제에 대해 진지하게 생각하는 사람은 거의 없음
     * 전체 전제가 터무니없다는 의견
          + 많은 사람들이 이미지와 로고가 포함된 서식 있는 이메일을 원한다는 것은 인정함. 본인은 원하지 않지만 다른 사람들의 필요와 욕구를 이해함
          + 왜 HTML인가? 간단한 마크업 언어(Markdown, orgmode 등)로 충분했을 것이며, 별도의 평문 및 HTML 버전이 필요 없었을 것임. 스크린 리더 및 기타 보조 장치에 더 접근 가능하고, 프라이버시 침해가 덜하며, 보안 문제에 덜 취약했을 것임
          + 그러나 답은 ""모든 이메일 클라이언트에 완전한 웹 브라우저를 넣자""였음
          + 이미 말이 떠났음을 알고 있음
     * View -> Message Body As -> Plain Text
          + 본인의 잘못은 아니지만 항상 대체 텍스트를 제공해야 함
     * HTML 이메일을 다뤄본 사람은 그 어려움을 알 것임. 이를 개발하고 오픈 소싱한 것에 찬사를 보냄. 뉴스레터에 사용해볼 예정임
     * 며칠 전 이런 것을 잠시 검색했었음. 확인해볼 것임. 고마움
     * 예상치 못했음. 몇 시간 동안 질문에 답변할 예정임
"
"https://news.hada.io/topic?id=15918","Ask GN: 처음 코드 작성 기억은 어떤 것인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask GN: 처음 코드 작성 기억은 어떤 것인가요?

   해커뉴스에 올라온 7세 딸이 HTML로 만든 웹사이트 를 보고 예전 생각이 났네요.

   저는 초등학교(저때는 국민학교.. 크흑) 시절에 GW-BASIC으로 만들었던 2개의 프로그램이 계속 생각 납니다.
    1. 랜덤으로 1~100 숫자 생성후, 숫자 입력하면 BIG/SMALL 답변 주면서 맞추는 게임 만들기
    2. *를 가지고 피라미드 모양 만들기

＊
＊＊
＊＊＊
＊＊＊＊
＊＊＊＊＊

   여러분의 처음 코드 작성 기억은 어떤 것인가요?

   저는 대학교때 처음 헬로월드 찍어봤네요.

   QBasic 으로만든 Hello World 인것 같군요. 그때는 내가 개발자가 될거라고 생각도 못했네요. 어렴풋이 개발자가 되려고 한건 고등학교때 배운 터보C 부터군요.. 추억돋네..

   프로그래밍 배운다고 들어간 특수활동반에서 실제로 처음 배운건 선배들이 쓰고 난 EPROM 지우는 방법이었네요 ㅎㅎㅎ
   몇개월 지나 드디어 MMX 컴퓨터를 한대 받아서 터보C 환경에서 이것저것 실제로 해보느라 밤 지새웠던 기억이 납니다.

   10 PLAY CDEFGABO5C

   구구단 출력하기?
   10 FOR I = 1 TO 9
   20 FOR J = 1 TO 9
   30 PRINT I; “”; J; “=”; IJ
   40 NEXT J
   50 NEXT I
   RUN

   10 LET A = 1+2
   20 PRINT A

   국민학교 때 처음 컴퓨터 학원을 다녔는데 컴퓨터 잡지에서 부록으로 나오던 GW베이직 코드를 토요일에 학원가서(학원에서 MSX 겜팩으로 겜을 하거나 하면서 노는 날이었음) 수백줄 씩 쳐서 실행해보던게 기억 나네요 하루 종일 치고서 에러나면 그날은 물거품이었던 ㅋㅋ

   저는 프로그래밍을 고등학교 수업시간에 처음 접하게 되었는데요,
   선생님께서 C를 가르쳐주셨고, if, for, printf를 사용해서 별을 그리는 프로그램을 짜라는 과제를 듣게 되었던 기억이 나네요.
   아마 애스터리스크(*)로 예시로 들어주셨던 피라미드 모양과 같은 도형을 그려보라는 의미였을 텐데요.
   저는 실제로 오망성 모양의 별(★)을 콘솔에 그려야 하는 과제로 착각해서 굉장히 끙끙대면서 고민했었습니다.
   결국 엄청 삽질하면서 성공은 했었던 것 같은데... 어떻게 했는지는 너무 오래전이라 기억이 나질 않네요 ㅎㅎ
   이제와서 생각하면 재미있는 추억입니다.

   Hello world
"
"https://news.hada.io/topic?id=15958","Garage - S3 호환 분산 객체 스토리지 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Garage - S3 호환 분산 객체 스토리지 오픈소스

     * 중소규모의 셀프 호스팅을 위해 설계된 Amazon S3 호환 분산 개체 스토리지 서비스
     * 서로 다른 물리적 위치에서 실행되는 노드로 구성된 스토리지 클러스터를 위해 설계
          + 멀티 사이트를 지원하면서도 경량
          + 높은 복원력: 네트워크 장애, 네트워크 지연, 디스크 장애, 시스템 관리자 오류에 강함
     * 모든 리눅스 배포판에서 실행되는 의존성 없는 바이너리 제공
     * 빠른 배포, 안전한 운영: 시스템 관리자 친화적
     * 지원 기능
          + S3 API 호환 (전체는 아님)
          + Geo-distribution : 장애 대응을 위해 여러 위치에 데이터 사본 저장
          + 간단한 배포. 외부 의존성 없음
          + 유연한 토폴로지 : 쉽게 노드를 추가/삭제 가능하며 자동으로 리밸런싱
          + 여러개의 복제 모드 지원 : 1,2,3,5,7,,,
          + 중복 제거 및 선택적으로 압축(Zstd)
          + 속도를 저하시키는 RAFT가 없음
          + 정적 웹사이트 호스팅을 위한 웹서버
          + 버켓이 여러개의 Alias 보유가능
          + 클러스터 관리 API
          + Prometheus 데이터 포맷 기반 메트릭 제공
          + Kubernetese 및 Nomad 연동
          + IP 변경 지원
          + K2V API(실험적) : Key/Value 스토리지 API

   홈페이지는 https://garagehq.deuxfleurs.fr/ 입니다

  Hacker News 의견

     * Minio를 2년간 사용 후 Garage로 이동했음
          + Minio는 작은 파일 처리에 어려움이 있음
          + SSD는 문제를 어느 정도 해결하지만 HDD는 그렇지 않음
          + 동기화 모드에서도 Minio는 성능 저하가 발생함
          + Garage로 이동 후 20-30배 성능 향상을 경험함
     * 콘텐츠 주소 지정 Blob 스토리지가 필요함
          + 불변 블롭을 해시로 저장하면 복잡성과 성능 오버헤드를 줄일 수 있음
          + 소프트 삭제와 결합하면 모든 작업이 멱등성이 되고, 블롭은 쉽게 캐시 가능함
          + IPFS와 같은 대규모 솔루션이 있지만, 로컬 배포용으로 S3 대체제가 필요함
     * Garage를 오래 사용했지만 AWS sigv4 프로토콜이 불편함
          + API 키를 헤더로 보내고 싶음
          + AWS SDK를 사용하지 않고 파일을 주고받고 싶음
          + AWS sigv4의 보안 이점에 관심이 없음
          + 다른 인증 방식을 고려해 주길 바람
     * SeaweedFS도 훌륭함
          + SeaweedFS GitHub 링크
     * Garage의 낮은 메모리 사용량을 높이 평가함
          + AWS S3로 일부 버킷을 자동으로 백업하는 기능이 필요함
     * Garage는 쌍으로 저장소 복제를 지원함
          + 10GB 디스크와 1TB 디스크가 있을 때 RAID1 유사 미러링만 지원함
          + 저장 용량이 10GB로 제한됨
     * Apache Ozone은 Hadoop 위에서 실행되는 객체 저장소의 대안임
          + Apache Ozone 링크
     * 로컬에서 S3 호환성을 갖춘 간단한 솔루션이 필요함
          + 개발 작업과 테스트를 위해 추천할 만한 것이 있는지 궁금함
"
"https://news.hada.io/topic?id=15898","19조 기업 가치 AI 데이터 라벨링 회사 Scale AI의 이면. 아프리카의 데이터 라벨링 공장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         19조 기업 가치 AI 데이터 라벨링 회사 Scale AI의 이면. 아프리카의 데이터 라벨링 공장

     * AI 시스템을 만들려면 사람이 직접 데이터에 라벨을 붙여야 해요. 이 일을 하는 숨겨진 노동자들을 ""주석 달기 작업자""라고 불러요.
     * 이 작업자들은 주로 개발도상국에 있고, Remotasks 같은 플랫폼에서 일해요. 자율주행차용 이미지부터 고객 서비스 통화의 감정까지 다양한 것에 라벨을 붙이죠.
     * 이 일은 대부분 작은 조각으로 나뉘어 있어서, 작업자들은 자기가 하는 일의 전체 목적이나 실제 고용주를 모르는 경우가 많아요.
     * AI 기술이 발전하면서 더 전문적이고 복잡한 주석 달기 작업이 필요해져요. 이런 일은 전문 지식이 있는 사람들에게 더 높은 임금을 줘요.
     * Surge AI 같은 회사는 더 높은 품질의 주석 달기 작업에 집중해요. 챗봇 훈련이나 AI 출력 평가 같은 일에 더 높은 임금을 주죠.
     * 이 산업은 수요 변동, 데이터 품질 유지, 자동화 압박 등의 문제에 직면해 있어요.
     * 공정한 보상, 노동자 대우, AI 기술 발전에 따른 작업자들의 장기적인 직업 전망 등에 대한 윤리적 문제가 제기돼요.
     * AI가 더 발전하고 인간다워 보일수록, 실제로는 더 많은 인간의 도움이 필요하다는 게 아이러니해요.
     * 인간의 주석 달기가 결국 사라질지, 아니면 AI 개발에 계속 중요한 부분으로 남을지에 대한 논쟁이 있어요.
     * 미래에는 인간이 AI 보조자와 함께 일하면서 AI 시스템을 감독하고 개선하는 새로운 방식의 협업이 생길 수 있어요.
"
"https://news.hada.io/topic?id=16005","구글 캘린더를 위한 데이터베이스 설계 튜토리얼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구글 캘린더를 위한 데이터베이스 설계 튜토리얼

  소개

   이 데이터베이스 설계 튜토리얼에서는 복잡한 실제 프로젝트의 데이터베이스 테이블을 설계하는 방법을 보여줌. Google Calendar의 클론을 설계할 것임. 이 시리즈는 ""Database Design using Minimal Modeling"" 책의 접근 방식을 설명함. 먼저 캘린더 데이터를 설명하는 완전한 논리 모델을 구축한 후, 논리 모델을 기반으로 테이블 설계를 진행할 것임.

  대상 독자

   이 책의 목표는 모호한 아이디어에서 데이터베이스 테이블의 완전한 정의로 이동하는 데 도움을 주는 것임. 텍스트의 첫 3/4은 데이터베이스에 대한 일반적인 이해만 필요하며, 논리 모델에 대해 설명함. 마지막 1/4은 논리 모델에서 물리적 테이블 구조로 이동하는 방법을 설명함.

  목차

     * 소개
     * 이 책의 접근 방식
     * 문제 설명
     * Part 1: 기본 하루 종일 이벤트
     * Part 2: 시간 기반 이벤트
     * Part 3: 반복되는 하루 종일 이벤트
     * Part 4: 캘린더 페이지 렌더링
     * Part 5: 시간 기반 이벤트의 캘린더 페이지 렌더링
     * Part 6: 지금까지의 완전한 논리 모델
     * Part 7: SQL 테이블 생성
     * 결론
     * 다음 단계

  이 책의 접근 방식

   사람들은 종종 테이블 설계부터 시작하지만, 우리는 다른 접근 방식을 취함. 논리 모델을 먼저 작성하고, 데이터 속성과 엔터티 간의 관계를 정의함. 논리 모델이 결정되면 물리적 테이블을 설계함.

  문제 설명

   Google Calendar의 주요 기능을 구현할 것임. 사용자 관련 데이터는 최소한으로 구현할 것임. 이벤트는 제목, 설명, 위치 등의 속성을 가짐. 가장 복잡한 부분은 시간과 날짜임.

  Part 1: 기본 하루 종일 이벤트

    앵커

   먼저 앵커를 찾아야 함. 앵커는 엔터티로, 예를 들어 사용자(User)와 이벤트(Event)가 있음. 앵커는 ID와 카운팅을 처리함.

    사용자 속성

   사용자에 대한 최소한의 데이터를 모델링할 것임. 예를 들어 이메일.

    하루 종일 이벤트 속성

   이벤트 이름, 시작 날짜, 종료 날짜를 저장해야 함.

    링크

   특정 사용자가 특정 이벤트를 생성한 정보를 저장할 위치를 결정해야 함. 이는 속성이 아닌 링크로 처리함.

  Part 2: 시간 기반 이벤트

    시간대

   시간대는 여러 국가와 지역에서 사용됨. 시간대 정의는 가끔 변경됨. 시간대와 관련된 최소한의 모델을 구현할 것임.

    시간대 속성

   시간대의 인간이 읽을 수 있는 이름을 저장할 것임.

    시간 기반 이벤트 속성

   이벤트 이름, 시작 시간, 종료 시간을 저장할 것임. 로컬 시간을 사용함.

    링크

   시간대와 시간 기반 이벤트 간의 링크를 정의함.

    날짜 이벤트와 시간 이벤트의 유사점

   두 이벤트 유형 간의 유사점을 고려할 것임. 논리 모델링을 통해 결정을 미룰 수 있음.

  Part 3: 반복되는 하루 종일 이벤트

    속성 #1, 주기

   이벤트가 얼마나 자주 반복되는지에 대한 속성을 정의함.

    속성 #2, 얽힌 속성

   반복되는 이벤트의 주기를 정의함.

    속성 #3

   월별 이벤트의 경우, 같은 날 또는 같은 요일에 반복되는지 정의함.

    요일: 마이크로 앵커

   요일을 저장할 위치를 결정함. 새로운 앵커를 도입함.

    링크

   요일과 이벤트 간의 링크를 정의함.

    완료 여부 확인

   모델링이 완료되었는지 확인하기 위해 원래 요구 사항을 다시 검토함.

    반복 제한: 더 얽힌 속성

   이벤트가 언제까지 반복되는지에 대한 속성을 정의함.

  Part 4: 캘린더 페이지 렌더링

   지금까지 캘린더의 기록 부분을 논의했음. 이제 사용자의 캘린더 주간 보기를 보여줄 필요가 있음.


GN⁺의 정리

   이 튜토리얼은 복잡한 데이터베이스 설계를 단계별로 설명하여 초보자도 쉽게 이해할 수 있게 함. Google Calendar의 주요 기능을 모델링하여 실제 프로젝트에 적용할 수 있는 유용한 예제를 제공함. 논리 모델링을 통해 데이터베이스 설계의 오류를 방지하고, 물리적 테이블 설계로 자연스럽게 이어지는 과정을 설명함. 이와 유사한 기능을 가진 프로젝트로는 Microsoft Outlook Calendar 등이 있음.
"
"https://news.hada.io/topic?id=15888","Shapeshift - 벡터 임베딩을 활용한 JSON 객체 변환 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Shapeshift - 벡터 임베딩을 활용한 JSON 객체 변환 라이브러리

     * 벡터 임베딩을 사용하여 임의의 구조를 가진 JSON 객체를 매핑하는 TypeScript 라이브러리
     * 의미적 유사성을 사용하여 객체 간의 키를 일치시켜 중첩 구조를 지원하는 등 유연하고 지능적인 객체 변환이 가능
     * 중첩 객체 지원
     * 여러 임베딩 공급자 이용 가능: Cohere, OpenAI, Voyage
     * 임베딩 모델 및 유사성 임계값을 커스터 마이징 가능

   앗, 제목에 오타가 있습니다. Shapesift -> Shapeshift
"
"https://news.hada.io/topic?id=15879","터스키기 매독 연구를 폭로한 내부고발자 피터 벅스턴 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    터스키기 매독 연구를 폭로한 내부고발자 피터 벅스턴 사망

    피터 벅스턴, 터스키기 매독 연구를 폭로한 내부고발자, 86세로 사망

     * 피터 벅스턴은 미국 역사상 가장 악명 높은 의료 연구 스캔들을 폭로한 내부고발자로, 알츠하이머병으로 캘리포니아 록클린에서 86세로 사망함
     * 터스키기 연구는 1932년부터 시작되어 400명의 흑인 남성을 대상으로 매독을 치료하지 않고 관찰한 연구였음
     * 1940년대에 매독을 치료할 수 있는 항생제가 개발되었지만, 연방 보건 당국은 약물 사용을 금지함
     * 벅스턴은 1960년대 중반에 이 연구에 대해 알게 되었고, 1966년에 CDC에 윤리적 문제를 제기하는 편지를 보냄
     * 그의 문제 제기는 여러 차례 거부되었고, 결국 그는 연방 보건 서비스를 떠나 법학을 공부함
     * 1972년에 AP 기자에게 연구 관련 문서를 제공하여 연구가 종료되고, 1997년 빌 클린턴 대통령이 공식 사과함

    벅스턴의 배경과 업적

     * 벅스턴은 1937년 프라하에서 태어나 나치 점령 체코슬로바키아를 떠나 미국으로 이주함
     * 터스키기 연구와 나치 의사들의 실험을 비교하며 윤리적 문제를 제기함
     * 연구 폭로 이후 정부는 의료 연구 수행 방식을 개선하기 위한 새로운 규칙을 도입함
     * 벅스턴은 오리건 대학교를 졸업하고, 미군에서 전투 의무병 및 정신과 사회복지사로 복무함
     * 터스키기 연구 관련 발표와 저술 활동을 통해 여러 상을 수상함
     * 나치에 의해 압류된 가족 재산을 되찾기 위해 20년 이상 노력함

    벅스턴의 개인적 삶과 성격

     * 벅스턴은 지혜롭고, 재치 있으며, 관대함으로 알려짐
     * 개인의 자유를 옹호하며, 마약, 매춘, 총기 규제에 반대하는 입장을 자주 표명함
     * 터스키기 연구에 대한 발표를 할 때마다 눈물을 참지 못함
     * 자신의 행동에 대해 겸손한 태도를 보이며, 윤리적 문제를 제기한 것은 ""강함이 아니라 어리석음""이라고 표현함

    GN⁺의 정리

     * 피터 벅스턴은 터스키기 매독 연구를 폭로하여 미국 역사상 가장 악명 높은 의료 연구 스캔들을 종식시킨 인물임
     * 그의 폭로는 의료 연구 윤리 개선에 큰 영향을 미쳤으며, 정부가 새로운 규칙을 도입하게 만듦
     * 벅스턴의 행동은 개인의 윤리적 신념과 용기의 중요성을 보여줌
     * 터스키기 연구는 오늘날 일부 아프리카계 미국인들이 의료 연구에 참여하지 않으려는 이유로 자주 언급됨
     * 비슷한 기능을 가진 프로젝트로는 의료 연구 윤리를 개선하기 위한 다양한 국제 규범과 가이드라인이 있음

        Hacker News 의견

     * Tuskegee 실험에 대한 맥락을 위해 ""You're Wrong About""의 두 부분 시리즈를 추천함
          + Buxtun이 두 번째 에피소드에 등장함
          + Buxtun이 처음 문제를 제기한 후 6년이 지나서야 진지하게 받아들여졌음
     * Pandemia 팟캐스트에서 이 내용을 작년에 배웠음
          + 독일어로만 제공되지만 독일어를 이해하는 HN 독자들에게 추천할 만함
          + Pandemia는 Covid 팬데믹 동안 시작된 팟캐스트로, 다양한 질병과 건강 문제를 다룸
     * 미국이 Unit 731의 연구 결과와 연구자들을 이용할 수 있었음에도 왜 이 실험을 계속했는지 궁금함
          + 인종적 측면이 핵심이었을 것이라는 생각이 듦
     * Buxton 자신은 자신의 행동에 대해 겸손했으며, 연구 윤리를 질문하기 시작했을 때 일부 보건 당국의 격렬한 반응을 예상하지 못했음
     * 인간은 자신이 공정하고 정의롭다고 끊임없이 믿음
          + 그 자기 인식을 유지하기 위해 기꺼이 자신을 속이며, 종종 더 나쁜 행동을 함
     * 비미국인으로서 인종차별에 대한 모든 논의를 보는 것이 이상한 느낌이었음
          + 이 문제에 대한 전체적인 인식이 완전히 다르다는 것을 이해하는 데 시간이 걸렸음
"
"https://news.hada.io/topic?id=15992","엔트로피란 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              엔트로피란 무엇인가?

서문

     * 한때 트위터라는 플랫폼이 있었고, 사람들이 짧은 메시지를 주고받았음. 이 플랫폼을 통해 엔트로피에 대한 짧은 강의를 진행했고, 이를 확장하여 작은 책으로 만들었음.
     * 엔트로피는 우리가 어떤 상황에 대해 알지 못하는 정보의 양을 의미함. 이를 정량적으로 설명하기 위해 여러 주제를 다룸:
          + 정보
          + 섀넌 엔트로피와 깁스 엔트로피
          + 최대 엔트로피 원리
          + 볼츠만 분포
          + 온도와 냉각
          + 엔트로피, 기대 에너지, 온도의 관계
          + 등분배 정리
          + 분배 함수
          + 기대 에너지, 자유 에너지, 엔트로피의 관계
          + 고전적 조화 진동자의 엔트로피
          + 상자 속 고전적 입자의 엔트로피
          + 고전적 이상 기체의 엔트로피
     * 열역학 제2법칙(엔트로피는 항상 증가함)을 다루지 않음. 이는 또 다른 책이 필요할 만큼 복잡함.
     * 양자역학에 대해 최소한으로 언급하려 했으나, 플랑크 상수는 고전적 시스템의 엔트로피 공식을 정의하는 데 필요함.
     * 수학적 물리학자로서 개념을 정확히 하고 이상한 반례를 찾는 데 많은 시간을 할애함. 중요한 내용은 상자 안에 있음.

GN⁺의 정리

     * 이 책은 엔트로피에 대한 기본 개념을 쉽게 설명하려는 시도로, 정보 이론에서 시작하여 통계 역학과 열역학으로 이어짐.
     * 엔트로피를 '무질서'로 정의하지 않고, 우리가 알지 못하는 정보의 양으로 설명함.
     * 양자역학의 최소한의 개념을 사용하여 고전적 시스템의 엔트로피를 설명함.
     * 물리학을 깊이 이해하고자 하는 사람들에게 유용하며, 특히 통계 역학과 정보 이론의 관계를 이해하는 데 도움이 됨.
     * 비슷한 기능을 가진 다른 프로젝트로는 ""Theoretical Minimum"" 시리즈가 있음.

        Hacker News 의견

     * Shannon이 정보 이론에서 '불확실성'을 '엔트로피'로 명명한 이유에 대한 일화가 있음
          + John von Neumann이 '엔트로피'라는 용어를 제안했음
          + 엔트로피는 통계역학에서 사용되었고, 논쟁에서 유리함
     * Shannon 엔트로피는 관찰자의 주관적인 양이라는 이해가 중요함
          + 변수 X의 엔트로피는 관찰자의 불확실성을 0으로 만드는 데 필요한 정보의 양임
          + 관찰자마다 다른 정보를 가질 수 있으므로 불확실성도 다를 수 있음
     * 통계역학에서 엔트로피는 시스템이 배열될 수 있는 방법의 로그로 설명됨
          + 주사위 굴리기의 쌍으로 생각하는 것이 쉬움
     * 정보 이론에서 엔트로피는 압축 알고리즘이 파일을 정확히 표현하는 데 필요한 비트 수로 설명됨
          + 반복적인 입력은 엔트로피가 낮아 잘 압축됨
     * PBS Spacetime의 엔트로피 재생 목록이 있음
     * 이산 확률 분포의 엔트로피를 히스토그램으로 설명하는 접근법을 선호함
          + 많은 공을 무작위로 던졌을 때 히스토그램과 같은 분포가 될 확률을 측정함
          + P 분포에서 N개의 공을 던졌을 때 히스토그램이 P와 같을 확률은 2^(-N * [log(k) - H(P)])임
          + 균일 분포일 때 가장 높은 엔트로피를 가짐
     * 'Entropy Demystified' 책이 엔트로피의 두 번째 법칙을 설명함
     * John Baez의 글이 학부 교육에서 큰 즐거움을 주었음
     * 시스템에 대해 이론적으로 알 수 있는 정보의 양으로 엔트로피를 설명하는 접근법을 좋아함
          + 코펜하겐 해석과의 상호작용이 언급되지 않은 것에 놀람
     * 정보 엔트로피는 정보가 얼마나 효율적으로 전달될 수 있는지에 대한 엄격한 하한임
          + 확률 분포를 사용하여 엔트로피를 계산함
"
"https://news.hada.io/topic?id=15892","NVIDIA, 오픈소스 Linux GPU 커널 모듈로 완전 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NVIDIA, 오픈소스 Linux GPU 커널 모듈로 완전 전환

     * NVIDIA는 2022년 5월 R515 드라이버로 GPL과 MIT 듀얼 라이센스로 리눅스 GPU 커널 모듈을 오픈 소스로 공개함
     * 당시 데이터센터 컴퓨팅 GPU를 대상으로 했고 GeForce, Workstation GPU는 알파 상태였음
     * 이후 릴리즈에서 더 강력하고 완전한 기능의 GeForce와 Workstation 리눅스 지원이 제공될 것이며, NVIDIA 오픈 커널 모듈이 궁극적으로 폐쇄형 드라이버를 대체할 것이라고 발표함
     * 2년이 지난 지금, 오픈 소스 GPU 커널 모듈로 동등하거나 더 나은 애플리케이션 성능을 달성하고 다음과 같은 상당한 새로운 기능을 추가함:
          + 이기종 메모리 관리(HMM) 지원
          + 기밀 컴퓨팅
          + Grace 플랫폼의 일관된 메모리 아키텍처
          + 기타 등등
     * 이제 오픈 소스 GPU 커널 모듈로 완전히 전환하는 것이 적절한 시점이며, 다가오는 R560 드라이버 릴리스에서 이러한 변화를 적용할 예정임

지원되는 GPU

     * 모든 GPU가 오픈 소스 GPU 커널 모듈과 호환되는 것은 아님
     * NVIDIA Grace Hopper나 NVIDIA Blackwell 같은 최신 플랫폼은 반드시 오픈 소스 GPU 커널 모듈을 사용해야 하며 이들 플랫폼에서 독점 드라이버는 지원되지 않음
     * Turing, Ampere, Ada Lovelace, Hopper 아키텍처의 신형 GPU는 오픈 소스 GPU 커널 모듈로 전환하는 것이 권장됨
     * Maxwell, Pascal, Volta 아키텍처의 구형 GPU는 오픈 소스 GPU 커널 모듈과 호환되지 않으므로 계속 NVIDIA 독점 드라이버 사용
     * 동일한 시스템에서 구형과 신형 GPU가 혼재된 배포의 경우 독점 드라이버 계속 사용
     * NVIDIA는 어떤 드라이버를 선택해야 할지 안내해 주는 새로운 감지 도우미 스크립트를 제공함. 자세한 내용은 이 포스트 뒷부분의 ""설치 도우미 스크립트 사용"" 섹션 참조

설치 프로그램 변경 사항

     * 일반적으로 모든 설치 방법에 의해 설치되는 드라이버의 기본 버전이 독점 드라이버에서 오픈 소스 드라이버로 전환되고 있음. 특별한 주의가 필요한 몇 가지 특정 시나리오가 있음:
          + CUDA 메타패키지가 포함된 패키지 매니저
          + 실행 파일
          + 설치 도우미 스크립트
          + 패키지 매니저 세부 정보
          + Windows 서브시스템 for Linux
          + CUDA 툴킷

    CUDA 메타패키지가 포함된 패키지 매니저 사용

     * 패키지 매니저(run 파일이 아님)를 사용하여 CUDA 툴킷을 설치할 때 설치 메타패키지가 존재하며 일반적으로 사용됨. 최상위 cuda 패키지를 설치하면 CUDA 툴킷과 연결된 드라이버 릴리스가 조합되어 설치됨.

    실행 파일 사용

     * CUDA 또는 NVIDIA 드라이버를 .run 파일을 사용하여 설치하는 경우 설치 프로그램이 하드웨어를 쿼리하고 시스템에 가장 적합한 드라이버를 자동으로 설치함. UI 토글을 사용하여 독점 드라이버와 오픈 소스 드라이버 중에서 선택할 수도 있음.

    설치 도우미 스크립트 사용

     * 앞서 언급한 대로 시스템의 GPU에 어떤 드라이버를 선택해야 할지 확실하지 않은 경우 NVIDIA가 선택 과정을 안내하는 도우미 스크립트를 만듦.
     * 사용하려면, 먼저 nvidia-driver-assistant 패키지를 패키지 매니저로 설치한 다음 스크립트를 실행하면 됨

    패키지 매니저 세부 사항

     * 일관된 경험을 위해 NVIDIA는 CUDA 툴킷과 드라이버를 설치할 때 패키지 매니저를 사용할 것을 권장함. 그러나 다양한 배포판에서 사용되는 특정 패키지 관리 시스템이나 패키지 구조는 특정 배포판에 따라 다를 수 있음.
     * 이 섹션에서는 다양한 플랫폼에 필요한 구체적인 세부 사항, 주의 사항 또는 마이그레이션 단계를 설명함.

    Windows 서브시스템 for Linux

     * Windows 서브시스템 for Linux(WSL)는 호스트 Windows 운영 체제의 NVIDIA 커널 드라이버를 사용함. 이 플랫폼에 특정 드라이버를 설치해서는 안 됨. WSL을 사용하는 경우 변경이나 조치가 필요하지 않음.

    CUDA 툴킷

     * CUDA 툴킷의 설치는 패키지 매니저를 통해 변경되지 않음. 다음 명령을 실행하면 됨:

$ sudo apt-get/dnf/zypper install cuda-toolkit

더 많은 정보

     * NVIDIA 드라이버 또는 CUDA 툴킷 설치 방법에 대한 자세한 내용은 CUDA 설치 가이드의 ""드라이버 설치"" 섹션을 참조

GN⁺의 의견

     * NVIDIA가 GPU 커널 모듈을 오픈 소스로 제공하는 것은 GPU 컴퓨팅 생태계에 매우 긍정적인 변화임. 이를 통해 사용자와 개발자는 NVIDIA GPU 드라이버와 관련된 문제를 보다 쉽게 디버깅하고 해결할 수 있게 됨.
     * 오픈 소스 전환으로 HPC, AI, 기계 학습 등의 분야에서 NVIDIA GPU를 활용하는 사용자들에게 더 많은 유연성과 투명성이 제공될 것임. 특히 기업 환경에서 NVIDIA GPU 솔루션 도입 시 보안과 안정성에 대한 우려를 해소하는 데 도움이 될 것임.
     * 다만 오픈 소스 전환 과정에서 기존 독점 드라이버 기반 애플리케이션과의 호환성 문제가 발생할 수 있음. NVIDIA는 이에 대한 명확한 가이드라인과 마이그레이션 경로를 제시해야 할 것임.
     * AMD의 ROCm과 같은 경쟁 오픈 소스 GPU 컴퓨팅 플랫폼과의 비교도 흥미로운 주제가 될 수 있음. NVIDIA의 오픈 소스 전환으로 GPU 컴퓨팅 분야에서의 경쟁이 심화될 것으로 예상됨.
     * 앞으로 NVIDIA가 커뮤니티의 기여를 적극적으로 수용하고, 오픈 소스 GPU 커널 모듈의 성능과 안정성을 지속적으로 개선해 나가기를 기대함. 이는 GPU 컴퓨팅의 대중화와 혁신을 가속화하는 데 기여할 것임.

   리누스 토발즈: 엔비디아! 땡! 큐!

   강력한 한마디.. F*ck..!

   가 될수도 ㅎㅎ

        Hacker News 의견

     * 몇 년 전 Nvidia가 심각한 해킹을 당한 기억이 있음
          + 해커들이 드라이버를 오픈 소스로 만들지 않으면 모든 데이터를 공개하겠다고 협박했음
          + 아마도 해커들이 원하는 것을 얻었을 가능성이 있음
     * Nvidia의 커널 모듈은 두 가지 구성 요소로 나뉨
          + 운영 체제에 독립적인 ""OS-agnostic"" 구성 요소
          + Linux 커널 버전 및 구성에 특정한 ""kernel interface layer"" 구성 요소
          + Nvidia .run 설치 패키지에 포함될 때, OS-agnostic 구성 요소는 바이너리로 제공됨
     * Nvidia에서 Sway와 Wayland 사용이 너무 어려워서 AMD로 전환했음
          + 주요 문제는 이제 해결된 gitlab.freedesktop.org의 이슈였음
     * 현재 Linux에서 Nvidia 드라이버 상황이 어떤지 궁금함
          + 새로운 데스크탑을 AMD GPU로 구축했음
          + 폐쇄형 소스나 부족한/구식 오픈 소스 드라이버의 문제를 피하고 싶었음
     * Nvidia가 완전히 오픈 소스 GPU 커널 모듈로 전환함
          + 또는 Nvidia가 완전히 오픈 소스 GPU 커널 모듈로 전환 중임
     * 이 변화가 Linux에서 Nvidia 드라이버 설치/업그레이드를 더 쉽게 만들기를 바람
          + 드라이버, 유틸리티, 컨테이너 런타임 간의 버전 불일치를 해결하는 것이 악몽이었음
     * tarball을 던져주고 ""가져와!""라고 말하는 것은 의미가 없음
          + 실제로 업스트림 커널에 드라이버를 기여하기 전까지는 AMD를 구매할 것임
     * 세부 사항을 꼼꼼히 읽는 회의적인 사람으로서, 이것은 좋은 움직임이라고 생각함
          + Nvidia의 독점 문화가 강화될 가능성을 제외하고는 단점이 보이지 않음
     * Linus가 카메라를 보고 Nvidia에 손가락 욕을 했던 때를 기억함
          + 이제 그 시간이 지났는지, 화해할 때가 되었는지, 여전히 문제가 있는지 궁금함
     * 커널 모듈만이라도 무언가를 제공한 것은 의미가 있음
          + 하지만 아마도 업스트림에 기여되지 않을 것임
"
"https://news.hada.io/topic?id=15907","Mistral NeMo 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Mistral NeMo 출시

     * NVIDIA와 협력하여 개발된 120억 파라미터 모델인 Mistral NeMo를 출시
     * 최대 128k 토큰의 큰 컨텍스트 윈도우 제공
     * 추론, 세계 지식, 코딩 정확도가 동급 최고 수준
     * 표준 아키텍처를 사용하여 Mistral 7B를 사용하는 시스템에 쉽게 적용 가능
     * 연구자와 기업의 채택을 촉진하기 위해 Apache 2.0 라이선스 하에 사전 훈련된 기본 및 명령 조정 체크포인트 공개
     * 양자화 인식으로 훈련되어 성능 손실 없이 FP8 추론 가능

    다국어 모델

     * 글로벌 다국어 애플리케이션을 위해 설계됨
     * 함수 호출에 대해 훈련되었으며, 큰 컨텍스트 윈도우를 가짐
     * 영어, 프랑스어, 독일어, 스페인어, 이탈리아어, 포르투갈어, 중국어, 일본어, 한국어, 아랍어, 힌디어에서 특히 강력함
     * 모든 언어 사용자에게 최첨단 AI 모델 제공을 목표로 함

    Tekken, 더 효율적인 토크나이저

     * Tiktoken 기반의 새로운 토크나이저 Tekken 사용
     * 100개 이상의 언어에서 자연어 텍스트와 소스 코드를 SentencePiece 토크나이저보다 더 효율적으로 압축
     * 소스 코드, 중국어, 이탈리아어, 프랑스어, 독일어, 스페인어, 러시아어에서 약 30% 더 효율적
     * 한국어와 아랍어에서 각각 2배, 3배 더 효율적
     * Llama 3 토크나이저와 비교하여 약 85%의 언어에서 더 뛰어난 압축 성능

    인스트럭션 파인 튜닝

     * Mistral NeMo는 고급 미세 조정 및 정렬 단계를 거침
     * Mistral 7B와 비교하여 정확한 명령을 따르고, 추론하고, 다중 턴 대화를 처리하고, 코드를 생성하는 데 훨씬 뛰어남

    링크

     * 기본 및 명령 모델의 가중치는 HuggingFace에서 호스팅됨
     * mistral-inference로 Mistral NeMo를 사용해보고, mistral-finetune으로 조정 가능
     * NVIDIA NIM 추론 마이크로서비스로 패키징되어 ai.nvidia.com에서 사용 가능

        Hacker News 의견

     * Mistral NeMo는 NVIDIA와 협력하여 개발된 12B 모델로, 최대 128k 토큰의 큰 컨텍스트 윈도우를 제공함
          + 표준 아키텍처를 사용하여 사용이 용이하며, Mistral 7B를 사용하는 시스템에 쉽게 대체 가능함
          + Apache 2.0 라이선스 하에 사전 훈련된 체크포인트를 제공하여 연구자와 기업의 채택을 촉진함
          + 양자화 인식을 통해 성능 손실 없이 FP8 추론을 가능하게 함
     * Mistral NeMo는 새로운 토크나이저 Tekken을 사용하며, 이는 100개 이상의 언어로 훈련되어 SentencePiece보다 효율적으로 텍스트와 소스 코드를 압축함
          + Byte-pair encoding이 더 효율적인 인코딩 방식으로 입증되었음에도 불구하고 왜 SentencePiece로 돌아갔는지에 대한 의문이 제기됨
     * NVIDIA 블로그에서도 Mistral NeMo에 대한 게시물이 있음
          + NVIDIA NIM 추론 마이크로서비스로 패키징되어 NVIDIA TensorRT-LLM 엔진을 통해 성능 최적화된 추론을 제공함
          + NVIDIA L40S, NVIDIA GeForce RTX 4090, NVIDIA RTX 4500 GPU의 메모리에 맞게 설계됨
          + Megatron-LM을 사용하여 3,072 H100 80GB Tensor Core GPU로 훈련됨
     * 대규모 모델이 빠르게 출시되고 있으며, 이는 기업들이 확장 가능한 프로세스를 확장하는 방법을 발견했음을 의미함
          + 모델을 HuggingFace에 게시하는 것이 비즈니스인지에 대한 의문이 제기됨
          + 모델 파일 다운로드가 약 25GB이며, 8fp 양자화 모델임
     * NVIDIA Enterprise에 가입하여 ""NIM"" 패키지 버전을 시도하는 경험이 불편하다는 의견이 있음
          + 자유롭게 모델 파일을 다운로드할 수 있는 것이 더 좋다는 의견이 있음
          + NVIDIA가 하드웨어 독점을 가지고 있음에도 불구하고 복잡한 절차를 요구하는 것에 대한 불만이 있음
     * Mistral이 오픈 소스 발전을 진지하게 고려한다면, 모델 훈련에 사용된 코퍼스를 공유해야 한다는 의견이 있음
          + GGUF 버전을 출시일에 준비하지 않는 이유에 대한 의문이 제기됨
     * 다중 언어로 훈련하는 것이 ""크로스오버""를 제공하는지에 대한 질문이 있음
          + 독일어로 훈련된 것이 영어 프롬프트에 응답할 때 활용될 수 있는지에 대한 궁금증이 있음
     * 오픈 소스 생성 AI 모델을 무료로 출시하는 비즈니스 모델에 대한 이해가 부족함
          + 3072 H100s를 사용하여 훈련된 모델을 무료로 제공하는 이유에 대한 의문이 있음
"
"https://news.hada.io/topic?id=16004","Google, AI 계약 덕분에 Reddit에서 작동하는 유일한 검색 엔진이 되다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Google, AI 계약 덕분에 Reddit에서 작동하는 유일한 검색 엔진이 되다

     * Google은 이제 Reddit의 결과를 표시할 수 있는 유일한 검색 엔진임
     * Reddit이 최근 robots.txt 파일을 업데이트하여 Google을 제외한 모든 검색 엔진의 크롤링을 차단함
     * Bing, DuckDuckGo, Mojeek, Qwant 등 Google의 인덱싱에 의존하지 않는 대안 검색 엔진에서는 최근 1주일 동안의 Reddit 검색 결과를 볼 수 없음
          + DuckDuckGo는 Reddit 검색 시 7개의 링크를 표시하지만, 링크의 목적지나 이유에 대한 정보는 제공하지 않음
          + Kagi는 Google의 일부 검색 인덱스를 구매하여 Reddit 검색이 가능함
     * 이는 Google의 검색 독점이 다른 기업들의 경쟁 능력을 저해하는 시기에 발생한 사건임
     * Reddit과 Google은 이에 대한 언론의 논평 요청에 응하지 않았으나, 다른 검색 엔진 배제는 Google에게 AI 제품 학습을 위해 Reddit 데이터를 스크래핑할 수 있는 권리를 부여하는 수백만 달러 규모의 계약 때문인 것으로 보임

Mojeek CEO의 반응

     * Mojeek의 CEO Colin Hayhurst는 6월 초 Mojeek이 Reddit 크롤링이 차단된 것을 발견하고 이메일로 연락했으나 회신을 받지 못했다고 밝힘
     * Hayhurst는 ""무지나 어리석음 때문에 차단되는 경우가 있지만 연락하면 해결할 수 있었는데, 이번에는 누구에게서도 회신을 받지 못한 전례 없는 일""이라고 말함
     * Reddit은 크롤러를 차단하는 것 외에도 Mojeek의 크롤러를 적극적으로 차단하고 있다고 함

AI 기업의 데이터 스크래핑 차단 증가 추세

     * 많은 웹사이트들이 robots.txt 파일을 업데이트하여 AI 기업들이 학습 데이터를 스크래핑하는 봇을 차단하려는 시도가 크게 증가하고 있음
     * Google은 최근 검색 결과 개선을 위한 Googlebot과 제미니 앱 개선을 위한 Google-Extended라는 두 가지 크롤러를 도입함
     * Robots.txt 파일은 단순한 지침일 뿐이며 크롤러가 이를 무시할 수 있음

Reddit의 조치 배경

     * Reddit은 대규모 언어 모델 학습을 위해 사이트를 스크래핑하는 AI 기업들에 대해 불만을 가지고 있었으며, 이를 막기 위한 공개적이고 적극적인 조치를 취해 왔음
     * 작년에는 API 접근에 대해 과금을 시작하면서 많은 서드파티 앱들이 운영하기에 너무 비싸져 중단되었음
     * 올해 초에는 Google과 6천만 달러 규모의 계약을 체결하고 Google이 AI 제품 학습을 위해 Reddit 콘텐츠를 라이선스할 수 있도록 허용함

Reddit의 Robots.txt 파일 변경

     * 이전에는 농담이 포함된 복잡한 형태였으나 최근에는 간단하고 엄격해짐
     * 현재는 ""User-agent: *, Disallow: /""라는 지시문만 포함하고 있는데, 이는 어떤 봇도 사이트의 어떤 부분도 스크래핑해서는 안 된다는 의미임
     * Reddit은 ""공개 인터넷은 믿지만 공개 콘텐츠 오용은 용납할 수 없다""는 입장을 밝힘

Reddit의 입장

     * 최근 상업적 주체들이 Reddit을 스크래핑하면서 약관이나 정책에 구속되지 않는다고 주장하는 사례가 증가하고 있음
     * Robots.txt 뒤에 숨어 Reddit 콘텐츠를 어떤 용도로든 사용할 수 있다고 말하는 것은 더 심각한 문제임
     * 악의적 행위자들을 찾아 선제적으로 차단하기 위해 최선을 다하겠지만, Redditor들의 기여를 보호하기 위해 더 많은 노력이 필요함
     * 앞으로 robots.txt 지침을 최대한 명확하게 업데이트할 예정임. 자동화된 에이전트로 Reddit에 접근한다면 약관과 정책을 준수하고 Reddit과 소통해야 함

비상업적 목적의 Reddit 데이터 접근은 여전히 가능

     * Reddit은 ""선의의 행위자(연구자, 인터넷 아카이브 등)는 비상업적 용도로 계속 Reddit 콘텐츠에 접근할 수 있을 것""이라고 밝힘
     * Reddit 데이터 대규모 접근을 신뢰할 수 있는 주체를 선별적으로 선정한다고 함
     * Reddit 데이터 접근 가이드에 따르면 ""검색이나 웹사이트 광고""는 ""상업적 용도""로 간주되며, 허가나 수수료 지불 없이는 Reddit 데이터를 사용할 수 없음

Google만이 Reddit 검색을 지원하는 현실의 함의

     * Google 검색의 관련성이 점점 떨어지는 가운데, 여전히 좋은 검색 결과를 얻는 방법 중 하나는 검색어에 ""Reddit""을 추가하는 것임
     * Reddit에는 거의 20년 동안 실제 사용자들이 조언과 추천을 남겨 왔기 때문
     * 이제 Google만이 이러한 정보로 사용자를 인도하고, 이것이 AI 학습 데이터와 관련된 6천만 달러 규모 계약의 결과라는 사실은 생성형 AI 도구에 힘을 실어주기 위해 전체 인터넷을 무차별적으로 스크래핑하는 것의 의도치 않은 결과를 보여주는 또 다른 사례임

Mojeek CEO의 우려

     * Mojeek은 20년 동안 존중하는 자세로 크롤링해 왔으며, AI를 학습시키지 않고 추적도 하지 않는 전통적인 검색 엔진임
     * Reddit의 Google과의 계약은 웹을 검색하는 대안적 방식을 제공하기 어렵게 만듦
     * 이는 점진적으로 웹을 죽이고 침식하는 광범위한 추세의 일부임
     * 이번 일은 소규모 기업들에게 도움이 되지 않음

GN⁺의 의견

     * Reddit의 조치는 콘텐츠 생성자의 권리를 보호하고 상업적 악용을 방지하기 위한 것이지만, 검색 엔진 시장의 경쟁을 저해하는 결과를 초래할 수 있음
     * 특히 Google이 AI 학습을 위해 Reddit 데이터를 독점하는 상황은 Google의 시장 지배력 남용 우려를 낳음
     * 장기적으로는 콘텐츠 제공자, 검색 엔진, AI 기업 간 상생할 수 있는 규범과 정책 마련이 시급해 보임
     * 한편 검색 품질 하락에 대한 대안으로 Reddit 검색이 부각되는 상황 자체가 아이러니함. 근본적으로는 검색 엔진들의 관련성과 다양성 제고를 위한 노력이 필요함
     * Kagi와 같이 Google 검색 인덱스를 일부 활용하면서도 독자적인 접근법을 모색하는 신생 검색 엔진들의 성장에도 관심을 가져볼 만함

        Hacker News 의견

     * Reddit의 robots.txt 변경은 AI 문맥에서 이해 가능하지만, 다른 검색 엔진에 대해 반경쟁적임
     * 이는 인터넷에 위험한 선례가 될 수 있음
     * 많은 사이트들이 인덱싱에 요금을 부과할 수 있는 힘을 가질 수 있음
     * 특정 검색 엔진을 사용해야만 특정 사이트의 답변을 얻을 수 있는 세상이 올 수 있음
     * 효율성 관점에서 웹사이트가 데이터를 검색 엔진에 임대하는 것이 더 나음
     * 현실적으로 현재 검색 엔진은 두 개뿐임
     * 이는 Kagi에게 매우 나쁜 상황이지만, 취미로 운영되던 비상업적 웹이 재발견될 가능성도 있음
     * 미국 법률상 robots.txt나 이용 약관 변경은 웹 스크래퍼에게 구속력이 없음
          + 데이터가 공개적으로 접근 가능하기 때문임
          + 사이트 이용 시 약관 동의 배너를 표시해도 구속력 없음
          + 데이터 접근을 제한하고 계정을 만들어야만 접근 가능하게 해야 구속력이 생김
     * Reddit은 한 달 전 robots.txt를 변경했음
          + 19년 동안 매우 관대한 robots.txt를 사용했음
          + 데이터 남용 때문에 변경한 것으로 보임
          + 검색 엔진이 데이터 훈련에 사용하지 않겠다고 동의하면 다시 열릴 가능성 있음
     * AI 봇들이 사이트를 스크래핑하여 LLM을 훈련시키는 문제가 심각해지고 있음
          + 예: thegreatestbooks.org 사이트는 24시간 동안 120만 건의 봇/자동화 요청을 받음
     * Reddit은 Google에서 유일하게 작동하는 검색 엔진이 되었음
     * Reddit의 행동이 반경쟁적이지 않은지 이해할 수 없음
          + Google의 경쟁자들에게도 유사한 조건으로 제공해야 함
"
"https://news.hada.io/topic?id=15981","Show GN: Dev.POST: TechBlog AI Generator - 자동으로 써주는 기술 블로그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show GN: Dev.POST: TechBlog AI Generator - 자동으로 써주는 기술 블로그

   1일 1블로그,
   단 1분만 투자하면 만들어지는 기술블로그

   바쁜 일정 속에서 시간내서 블로그 글쓰고 운영하는게 쉽지않나요?
   개발 과정에서 얻은 귀중한 경험이 사라지고 있진 않나요?

   Dev.POST를 통해 그동안 실천 못 했던 1일 1블로그를
   이제는 쉽게 실천할 수 있습니다.

[주요 기능]

     * 손쉽게 만드는 블로그 글
       : '작업 목표'와 '커밋'만 입력하면 알아서 블로그 글을 작성해줍니다.
     * 기능 단위로 만들어주는 코드
       : 그대로 예시 코드를 만들지 않습니다. 주요 기술을 찾아 설명하기 좋은 형태로 변환하여 블로그 글을 작성해줍니다.
     * 편리한 개념(이론) 설명
       : 설명해줬으면 하는 키워드를 입력만 하면, 관련 개념을 찾아서 신뢰할 수 있는 출처를 참고해 자동으로 작성해 줍니다.
     * SEO
       : 찾았던 검색 키워드 그대로, 내 블로그가 올라가도록 SEO를 고려하여 작성해줍니다.
     * markdown(마크다운) 포맷
       : 다양한 블로그 플랫폼에 발행할 수 있도록 마크다운으로 작성됩니다.
     * 보안
       : 안심하세요. 입력 된 사용자의 코드는 절대 저장하지 않습니다.

[실제 사용자 후기]

     * 놀랍네요. 3일 연속 손쉽게 Dev.POST 이용해서 블로그 글 발행했어요.
     * 포맷이 너무 마음에 들어요. 소제목도 적절히 써주다 보니 수정할 필요가 없어보여요.
     * 여러가지 개발하면서, 블로그 글감 쓸 게 없다고 생각했는데 이렇게 쉽게 만들어주니깐 블로그 글감 쓸 게 많아져서 편해요.

[1분만에 만드는 기술블로그 바로 체험하기]

     * Dev.POST 설명 블로그
     * Dev.POST가 만든 블로그
     * Mac App 설치하기

   저는 흥미로웠습니다.
   직접 쓴 글이 아니니 '진심'이 없는 것에 대한 고민은 개발자 분도 고민을 했을거라고 생각해요.
   기술 블로그 관점보다, 내 작업에서 인사이트를 얻을 수 있는 도구로 관점을 바라보니 도움될 거 같아서 흥미로웠어요.

   그런데 과장하는 정도가 큰 듯 합니다.
   지식 저장소의 커밋으로 생성해서 그런지도 모르겠는데요. 단순 하드웨어 출시 소개인데도 머신 러닝 학습 코드가 나오네요;;
   또 ~하려고 노력했습니다와 같이 실제로 하지 않은 내 행위를 설명하는 부분이 생성되어서 블로그와 같이 공개된 곳에 업로드하기엔 무리가 있을 거 같아요.

   작업 목표와 노트 등 프롬프트로 사용되는 듯한 입력이 4개 있어서 줄여도 좋지 않을까 싶고, 수동 업데이트가 조금 불편했습니다.
   개인적으로는 작업만하면 AI 컨텐츠가 차곡차곡 쌓이고, 시간이 될 때 읽기만하는 정도로 자동화가 되면 좋을 거 같다는 생각이 들었습니다.

   좋은 의견 감사합니다 :D

   AI가 컨텐츠가 생성한다는 점에서 오는 고민에 대해서 많이 생각해보았고,
   그러한 관점에서 단순 생성이 아닌 ""내가 작업한 것""을 이용해서 만들어준다는 차별점을 주고 싶었습니다.

   다만 기술 블로그 포스팅을 작성하는 과정에서 과장하는 부분이나 실제하지 않는 설명이 나왔다니 죄송합니다.
   이러한 Hallucination 현상이 더욱 나타나지 않도록 발전하는 모습 보여드리겠습니다.

   마지막으로 말씀해주신 제품의 방향성이나, 불편한점 말씀해주셔서 정말 감사합니다.
   추후에 개선하여 꼭 작성자님께 좋은 모습으로 돌아오겠습니다.

   결국에 기술 블로그를 쓰는 대부분의 사람들은 자기 PR의 목적일텐데..
   그 안에 담겨있는 커뮤니케이션 능력(및 추론 능력)을 덮어버리는게 부정적으로 느껴지네요.
   저라면, 오히려 잘 다듬어진 사람은 챗GPT가 작성해준거 아니야? 하고 매도해버릴 것 같네요.

   // 저라면, 오히려 잘 다듬어진 사람은 챗GPT가 작성해준거 아니야? 하고 매도해버릴 것 같네요.
   이 부분이 굉장히 슬프네요. 이 생각까지는 설득 시킬 순 없을 것 같네요 ..

   // 그 안에 담겨있는 커뮤니케이션 능력(및 추론 능력)을 덮어버리는게 부정적으로 느껴지네요.
   커뮤니케이션 능력은 비록 지금 당장은 보여줄 수 없다해도, 사용자 맞춤형으로 서로 다른 블로그 글을 내는 방향을 생각하고있어 이 부분이 덮어질 것이라고 생각하지 않습니다 ! 그리고 추론 능력은 내가 작업한 코드에 그 작업 의도와 추론 능력이 담겨있다 생각합니다. Dev.POST는 그런 부분을 참고해 얻은 인사이트를 정리를 쉽게 도와주도록 도와주고 있다고 생각합니다.

   해당 부분은 한번 bulletheart님도 Dev.POST를 사용해보시면, 내가 의도했던 코드 방향을 생각했던 것 보다 잘 써주는 모습에 만족하실 것 같은데 한번 사용해보시고 피드백 주실 수 있나요? 사용 피드백 기다리고 있겠습니다!! 오늘도 좋은 하루 보내세요~

   블로그의 가장 큰 진입장벽은 매일 올리고 싶지만 그것이 어렵다는 것이겠죠. 누군가는 이것을 계기로 다시 블로그를 시작해보는 용기를 가질 수도 있고, 1일 1포스팅을 목표로 하던 사람은 1일 3포스팅으로 목표를 바꿀 수도 있을 것입니다. 양으로 밀어붙이는게 옳냐?라는 의문엔 질을 따지다 블로그를 그만두는 것보다는 지속하게 해주는 툴을 사용해서라도 그만두지 않는게 장기적으로는 더욱 큰 효용을 가져다 주지않나 생각해봅니다.
   잘 사용해보고 또 피드백 남기겠습니다. 응원합니다!

   맞습니다 :D

   Dev.POST는 바쁘게 실무 개발작업을 대응하면서 개발블로그를 운영하기는 쉽지않다는 니즈에서 시작하게되었습니다. 바쁜 일정 속에서 따로 시간 내서 블로그 글쓰기는 많은 개발자 분들에게 부담이 되고, 지속적 운영이 어렵다고 느꼈기 때문이죠

   그래서 저희는 개발과정에서 얻은 인사이트가 있다면 ""나중에 정리해야지""라는 부분을 아예 없애고 싶었습니다 ! 바로 내가 얻은 인사이트가 코드에 담겨있고, 추가로 적고싶으면 작업 노트에도 적으면 되니 글쓰기에 대한 부담을 덜어주고 모두가 손쉽게 경험을 기록할 수 있게 도와주는 서비스가 되고자 달리고있습니다!

   따뜻한 응원 주셔서 감사합니다!! 덕분에 월요일 아침부터 기분이 좋아지고 힘이 납니다! 사용해보시고 편히 피드백 주세요 감사합니다~

   신입 개발자 채용할때 블로그를 참조하여 어떤 부분에 관심이 있고 어떤 고민들을 하고 있나 참고 하곤 했었고 블로그에 카테고리 여러개 만들어 놓고 한두개 글만 올려 놓은 지원자는 바로 불합격 시키곤 했는데 앞으로는 블로그를 보고 신입 개발자가 고민하고 추구하는 방항성에 대해 참고하지 말아야 되나 싶네요... ㅜㅜ

   // Dev.POST 서비스를 함께 만들고 있는 개발자 입니다 :)

   맞습니다. 기술블로그를 보고 평소에 어떤 부분이 관심있고 어떤 고민을 했는지 알수 있죠 ! 앞으로도 블로그가 그 역할을 할 거라고 보는데 왜 action13님은 그렇게 생각하셨나요 ~?

   누가 글을 읽을것인지 기획 의도가 뒷받침되지 않는 자동 글 생성은 큰 환영을 받기 어렵다고 생각합니다. 블로그에 글만 채우면 끝은 아니니까요.

   // Dev.POST 서비스를 함께 만들고 있는 개발자 입니다 :)

   말씀해 주신 대로 읽을 대상을 고려하지 않고, 작업 기획 의도가 뒷받침되지 않은 글은 큰 환영 받기 어렵다고 생각합니다. 동의합니다.

   Dev.POST를 이용한 고객 분들 중 많이들 주신 의견으론 입력사항을 적게 적어도 의도를 잘 찾아줘서 신기하다는 의견이 더러 있었습니다. 작업한 코드내에 의도를 찾고, 그 의도를 기반으로 작성자 마음에 드는 글을 쓰는 게 저희의 일이라고 생각하여, 이 부분에 대해선 자신감이 있습니다. 앞으로도 읽는 대상자를 고려하고 의도를 파악해 기획 의도가 뒷받침 되는 글을 쓸 자신이 있습니다.

   rkttu님도 한번 이용해보시고, 글의 의도를 뒷받침을 해주는 포스트인지 사용 후기를 남겨주시면 빠르게 rkttu님이 마음에 드는 서비스가 될 수 있도록 노력해보겠습니다. 주신 피드백 너무나도 감사드립니다 !

   공감합니다ㅋㅋ AI 작성글에 영감을 얻은적이 매우 드문거 같네요
   영감얻은거 마저도 학습된 데이터의 인용일겁니다.

   AI Writing에 대해 한 번 더 생각하게 되는 의견을 주셔서 감사합니다.

   유저의 경험이나 생각이 들어가지 않고 단순히 주제만 정해주면 알아서 생성해주는 기존 AI Writing 서비스들에서는 영감을 얻기 힘들었을거라 생각합니다.

   Dev.POST 같은 경우 직접 작업한 commit 기록과 유저의 경험을 입력받아 포스트를 만들기에 기존 서비스와 차별점을 두고 있기 때문에, 이런 부분에서 영감을 줄 수 있다고 생각을 하였는데요.

   felizgeek님도 한번 이용해보시고 어떠셨는지 느낌을 남겨주시면 감사하겠습니다!

   재미있네요.

   저도 다른 분들이 댓글 단 것 처럼 글감이 없으면 글을 안써야 하는거 아닌가 생각했는데...
   ""내가 오랜시간 고민하여 내린 결론을 커밋에 담으면, AI로 그 고민을 읽어 블로그 글로 바꿔드림"" 이 주된 기능으로 보이네요.
   글감은 이미 존재하지만, 그걸 글로 바꾸긴 귀찮은 사람들을 위한 제품이 아닌가 싶습니다.

   다만, 개인이 운영하는 기술 블로그들은 ""내가 했던 고민을 글로 풀어나가며 다시 한번 정리해보자""는 의미가 클거라 생각되는데, 이러한 욕구(?)를 전혀 충족시킬 수 없다는 점이 많이 아쉽네요. 처음부터 완성본 하나를 만들어 주는 것 보다는, 여러 섹션으로 쪼개서 이것들을 사용자가 조합하거나, 변형하거나, 또는 재생성을 요청하는 등의 기능을 제품 내에서 제공하면 이 부분에 대해 어느정도 해소가 가능하지 않을까 생각해 봅니다.

   * 생성 중 출력되는 메시지들에 오탈자가 조금 보이네요!

   nemorize님의 피드백에 따라 제품에 대해서 한번 더 깊게 생각하는 계기가 된것 같아서 정말 감사합니다.
   말씀주셨던 것 처럼 Dev.POST는 ""글감은 이미 존재하지만 그걸 글로 바꾸긴 귀찮은 사람들을 위한 제품""이 맞습니다. 글감과 경험은 이미 커밋안에 존재하고 이를 글로 바꿔 글 쓰기를 막막해하고 번거로워하셨던 분들에게 도움이 되는 제품입니다 :)

   추가로 말씀해주신 [내가 했던 고민을 풀어 블로그로 정리하는 유저] 타겟층은 다음 타겟층의 유저군이라, 지금은 당장 충족시키지 못하지만 서비스 확장에 따라 무조건 만족시킬 수 있도록 서비스를 개선 해나겠습니다. 주신 피드백 너무 감사합니다 !! 피드백 참고하고 빠르게 개선해나가도록 하겠습니다. 감사합니다

   굳이 억지로 기술 블로그 글을 왜 만들어내야하는지..

   많은 개발자 분들이 개인 성장과 포트폴리오 목적으로 블로그를 많이 운영하고 계신데요.
   예를 들면 경험이나 문제를 해결하는 방식, 그리고 평소 관심 있는 기술과 이슈 등이 블로그에 담겨있어 나라는 개발자를 잘 알릴 수 있는 공간이라 생각합니다.

   이처럼 기술블로그를 운영하고있긴 하지만 방치된지 오래된 기술블로그가 있다면
   '최근 작업 중에 블로그 글감으로 썼으면 하는 커밋이 있는지?' 한번 생각해보시고 Dev.POST 이용해보시는건 어떨까요?

   글감이 없으면 글을 안 쓰면 되지 않을까요?

   Dev.POST는 기술블로그에 글을 쓰는 진입장벽을 낮춤으로 바쁜 일정 속에서도 기술 블로그 운영을 지속적으로 할 수 있도록 돕고 있습니다 ! 사용자 후기 보고 말씀해주신 것 같은데, 인터뷰를 진행했던 사용자 분이라 기억이 많이 남는데요. 사용자 분께선 Dev.POST를 이용하고 글이 쉽게 만들어지니 거의 모든 커밋 단위로 블로그로 만들어보시더라구요.

   znjadong님도 한번 Dev.POST를 이용해 블로그 글을 한번만이라도 만들어보세요 !!
   분명 znjadong님도 만족하실 거예요!!
"
"https://news.hada.io/topic?id=15949","Kompute - Vulkan 기반의 CUDA 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Kompute - Vulkan 기반의 CUDA 대체제

     * 다양한 그래픽 카드를 지원하는 Vulkan 기반의 범용 GPU 계산 프레임워크
     * 초고속, 모바일 지원, 비동기식, 고급 GPU 데이터 처리 사용 사례에 최적화
     * Linux 재단이 후원
     * 최적화를 위한 C++ SDK가 포함된 유연한 Python 모듈 제공
     * GPU 패밀리 대기열을 통한 비동기 및 병렬 처리 지원
     * 여러 아키텍처에서 Android NDK를 통해 모바일 지원
     * BYOV(Bring-your-own-Vulkan) 설계로 기존 Vulkan 어플리케이션과 잘 동작
     * 90%의 단위 테스트 코드 커버리지를 갖춘 강력한 코드베이스
     * Kompute 를 사용하는 프로젝트들
          + GPT4ALL
          + llama.cpp
          + how-to-optimized-gemm
          + vkJAX

   CUDA의 독점체제에서 이런게 많이 나왔으면 좋겠네요

   아직까지 극고효율을 위한 하드웨어 디펜던시가 너무 강해서 범용이 가능할지 모르겠네요.
   이미 파운드리 산업모델이 범용성을 제공하는거 아닌가 싶기도 하고..

   리눅스 재단이 후원하던 것 중에 잘된게 없지만, 그래도 응원합니다.

   이건 동의하기가 힘드네요. 실패한것도 많지만 성공해서 거의 필수가 된것도 너무 많아서..
   저는 리눅스 재단이 없었으면 아마 밥을 굶었을지도 모르겠어요
   https://www.linuxfoundation.org/projects
"
"https://news.hada.io/topic?id=15968","러스트용 Datetime 라이브러리 Jiff","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        러스트용 Datetime 라이브러리 Jiff

     * Jiff는 Rust용 날짜 및 시간 라이브러리로, 사용자가 쉽게 성공적인 결과를 얻을 수 있도록 설계됨
     * 고수준의 날짜 및 시간 프리미티브를 제공하여 오용이 어렵고 성능이 우수함
     * Time Zone Database와의 자동 통합, DST 인식 산술 및 반올림, 포맷팅 및 파싱 기능 제공
     * Serde 지원 등 다양한 기능 포함
     * JavaScript의 Temporal에서 많은 영감을 받음
     * MIT 또는 UNLICENSE 이중 라이선스

    향후 계획

     * Jiff API를 개선하고 약 1년 동안 주기적으로 변경 사항을 릴리스할 계획
     * 1년 후 API가 안정되면 Jiff 1.0을 릴리스하고 장기간 API를 유지할 계획
     * 다른 사람들이 Jiff를 신뢰하고 사용할 수 있도록 하기 위함

    성능

     * Jiff의 가장 중요한 설계 목표는 사용자가 잘못된 작업을 하기 어렵게 만드는 것
     * 두 번째 목표는 성능
     * 성능은 합리적이지만 개선할 여지가 있음
     * 벤치마크는 bench 디렉토리에서 확인 가능

    플랫폼 지원

     * 시간대 지원과 관련된 플랫폼 지원 문제
     * IANA 시간대 식별자의 시간대 전환을 어떻게 결정할지
     * 현재 시스템의 기본 시간대를 어떻게 결정할지
     * Unix 시스템에서는 /usr/share/zoneinfo에서 시간대 전환 데이터 검색
     * Windows에서는 컴파일된 라이브러리에 시간대 데이터베이스 포함
     * 시스템 시간대 검색은 Unix에서는 /etc/localtime, Windows에서는 GetDynamicTimeZoneInformation 사용

    의존성

     * Jiff는 Unix에서 의존성이 없음
     * 새로운 의존성을 추가하는 데 매우 보수적
     * 플랫폼과 상호작용하기 위해 필요한 경우나 상호 운용성을 위해 필요한 경우에만 의존성 추가

    GN⁺의 정리

     * Jiff는 Rust용 고수준 날짜 및 시간 라이브러리로, 사용자가 쉽게 오용하지 않도록 설계됨
     * Time Zone Database와의 통합, DST 인식 산술 및 포맷팅 기능 등 다양한 기능 제공
     * JavaScript의 Temporal에서 영감을 받아 설계됨
     * 향후 1년 동안 API를 개선하고 안정된 1.0 버전을 릴리스할 계획
     * 성능은 합리적이지만 개선할 여지가 있으며, 플랫폼 지원은 Unix와 Windows에서 잘 작동함

        Hacker News 의견

     * ToSpan 문법이 다소 어색하게 느껴짐
          + let span = 5.days().hours(8).minutes(1); 문법이 첫 번째 숫자가 앞에 나오고 나머지는 함수 인수로 나오는 것이 이상함
          + let span = Span::new().days(5).hours(8).minutes(1);로 작성할 수 있지만 몇 글자 더 필요함
     * datetime 라이브러리의 복잡성을 과소평가하는 사람들을 봄
          + UTC/Unix 시간을 내부 표현으로 사용하거나, 기간을 나노초로 표현하거나, 시간대 대신 오프셋을 사용하라는 의견이 있음
          + Jiff의 설계 문서를 읽어보기를 권장함
          + chrono와의 비교도 유익함
     * DST 산술, 라운드 가능한 기간, 시간대 인식 달력 산술, 시간대 충돌 감지 등이 라이브러리를 정확하고 사용하기 쉽게 만듦
          + chrono는 매우 포괄적이고 정확한 라이브러리지만 사용하기 어렵고 경직됨
     * 새로운 burntsushi 라이브러리가 나왔다는 농담
          + rustaceans가 crate에서 tracing을 사용하지 않는 이유를 아는지 궁금함
          + log는 괜찮지만 tz 작업 호출을 추적하는 것은 일반적인 사용 사례가 아님
     * 새로운 라이브러리가 멋져 보임
          + burntsushi가 새로운 라이브러리를 만드는 이유가 궁금함
          + 기존 라이브러리의 성능 문제나 API의 불편함 때문인지, 아니면 단순히 재미로 하는 것인지 궁금함
     * Rust의 캘린더 라이브러리 상태가 이상적이지 않음
          + Pandas에서는 시간대 변환이 매우 간단하지만 Chrono에서는 복잡함
          + Jiff가 올바른 방향으로 나아가고 있지만 문법이 때때로 이상함
     * 기존 시간 라이브러리의 주요 문제는 윤초 지원 부족임
          + UNIX 타임스탬프 대신 TAI를 사용하지 않기 때문임
          + Jiff도 이 문제를 해결하지 못함
          + 윤초를 2월 29일이나 시간대처럼 취급해야 한다고 생각함
     * BurntSushi가 Rust 정규 표현식 생태계의 저자임
     * Jiff의 발음에 대한 논쟁
          + ""gif""처럼 부드러운 ""g""로 발음해야 한다는 의견
          + ""Giff""처럼 강한 ""G""로 발음해야 한다는 의견
"
"https://news.hada.io/topic?id=15881","TypeFox, Open Collaboration Tools 오픈소스 프로젝트 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             TypeFox, Open Collaboration Tools 오픈소스 프로젝트 발표

     * IDE 콘텐츠의 실시간 공유를 위한 라이브러리와 도구 모음으로, 오픈 기술로 원격 팀워크 향상을 목표로 함
     * 호스트가 협업 세션을 시작하고 다른 사람을 초대하면, IDE 확장 기능이 호스트의 작업 공간 콘텐츠를 배포하고 다른 참가자의 텍스트 선택 및 커서 위치 하이라이트
     * 이와 동시에 선호하는 회의/채팅 앱에서 즉각적인 토론 가능
     * 참가자들은 서로 무엇을 보고 있는지, 어떤 변경 사항을 실시간으로 제안하는지 확인 가능

첫 릴리즈에 포함된 Open Collaboration Tools의 주요 구성 요소

     * VS Code 확장 기능(Open VSX 및 VS Code Marketplace에서 사용 가능)
     * Eclipse Theia용 확장 기능
     * 인증 및 협업 세션 처리를 위한 서버 애플리케이션(api.open-collab.tools 공용 인스턴스 제공)
     * 다양한 환경에 통합을 용이하게 하는 TypeScript 라이브러리가 있는 개방형 확장 가능 프로토콜
     * 처음부터 내장된 엔드투엔드 암호화 및 확장 가능한 사용자 인증

향후 계획

     * 곧 Monaco Editor와의 통합 기능 제공 예정
          + 이를 통해 웹 애플리케이션 사용자 간 또는 웹사이트와 로컬 IDE 간에 완전히 사용자 지정 가능한 실시간 협업을 가능하게 해줌
          + 웹사이트 링크를 열기만 하면 본격적인 개발 환경에서 시작된 라이브 공유 세션에 참여가 가능해짐
     * 초기 버전은 모든 프로그래밍 언어의 소스 코드, 마크다운 문서, 스크립팅 언어, 특정 도메인용 언어, Configuration 포맷, HTML 및 기타 마크업 언어 등 일반 텍스트 문서에 초점을 맞추지만, Jupyter Notebook, 다이어그램 편집기 등 다른 종류의 콘텐츠 제작 지원 추가 예정
     * 실시간 협업 보기 및 편집이 도움이 될 수 있는 다양한 시나리오에 프로토콜과 인프라 적용 가능

새로운 협업 도구의 필요성

     * 기존 제품들은 소비적이고 정보 민감성이 높은 기업 환경에 적합하지 않음
     * 필요한 솔루션의 조건:
         1. 인기 있는 IDE에 플러그인으로 제공, 크로스 IDE 사용 사례 지원
         2. 확장성을 염두에 둔 설계. 텍스트 이외의 사용자 정의 편집기 추가 용이
         3. 절대적인 데이터 보안을 위해 구내 실행 가능
         4. 단일 공급 업체에 구속되지 않음. 도구 제어를 위한 허용 라이센스 선호

Open Collaboration Protocol

     * IDE가 협업 서버와 인증하는 방법, 세션을 생성하거나 참여하는 방법, 세션 내 사용자 간에 교환되는 데이터 유형 등을 지정
     * 중앙 집중식 P2P 메커니즘을 통해 기술적으로 구현
     * 메시지 브로커 역할을 하는 중앙 서버는 메시지 내용에 대해 완전히 모름
     * 두 클라이언트가 서로의 메시지를 이해하는 한 함께 작업 가능
     * 기본 텍스트 편집기에 대한 기본 제공 지원 포함

큰 그림

     * 관대한 오픈 소스 라이선스로 고도로 사용자 정의 가능한 도구와 프레임워크를 제공한다는 TypeFox의 전반적인 전략에 완벽하게 부합
     * api.open-collab.tools의 공용 인스턴스는 새 프로젝트의 기능을 시연하고 오픈 소스 커뮤니티 지원 의도
     * 기업들은 자체 액세스 제한으로 보호된 자체 인스턴스 배포 권장
"
"https://news.hada.io/topic?id=15945","어떻게 그 판단을 할 수 있었을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          어떻게 그 판단을 할 수 있었을까?

   최근의 페어 디버깅 경험
     * '목록 페이지에서 여러 아이템에 대해 특정 액션을 한 결과물이, 개별 아이템 페이지에서는 반영이 안 될 때가 있는 문제'. 재현 경로 파악하지 못함
     * 듣자마자 '개별 아이템 페이지에 먼저 간 상태에서 목록 페이지로 돌아간 다음 해당 액션을 수행'했을 때를 확인해보자고 제안. 그게 재현 경로가 맞았음

   페어 디버깅 세션은 5분도 안되어 끝났지만 고민이 생김
     * 나는 어떻게 이걸 알아챌 수 있었고, 왜 이 동료분은 그러지 못했을까?
     * 어떻게 이분의 역량을 효과적으로 더 끌어올릴 수 있을까?

   시니어로서 코드리뷰, 짝 작업을 하다 보면 이런 일이 은근히 자주 일어남
     * 시니어가 뭔가 쎄한 부분을 빠르게 알아채고, 그럴듯한 개선 제안을 한다.
     * 주니어는 오오 하면서 받아들인다.
     * 다음에, 완전히 같지는 않지만 비슷한 문제가 또 생긴다.
     * 시니어는 다시 알아채고, 다시 개선 제안을 한다.
     * 주니어는 조금 더 이해하고, 실수가 줄어들지만 내가 원하는 수준으로 빠르게 올라오지는 않는다.

   이는 시니어의 솔루션만 전달되고 그 안의 인지 과정, 즉 ‘그 판단과 의사결정을 어떻게 할 수 있었는지’가 전달되지 않았기 때문

   Gary Klein이 개발한 CDM은 이러한 인지 과정을 비교적 빠르게, 셀프로도 분석할 수 있는 좋은 방법임
     * Cues : What were you seeing, hearing, smelling ...?
     * Knowledge, Source : What information did you use in making this decision, and how was it obtained?
     * Analogues : Were you reminded of any previous experience?
     * Goals : What were your specific goals at this time?
     * Options : What other courses of action were considered by or available to you?
     * Basis : How was this option selected/other options rejected? What rule was being followed?
     * Experience : What specific training or experience was necessary or helpful in making this decision?
     * Aiding : If the decision was not the best, what training, knowledge, or information could have helped?
     * Tools : When making this decision, were there any tools that helped that specific decision?
     * Time Pressure : How much time pressure was involved in making this decision?
     * Situation Assessment : Imagine that you were asked to describe the situation to someone superior to(in terms of expertise, for example) you at this point, how would you summarize the situation?
     * Hypothesis : If a key feature of the situation had been different, what difference would it have made in your decision?

   결론
     * 대개 비동기로 이루어지는 깃헙 PR 리뷰에서는 리뷰어의 암묵지가 훨씬 덜 드러남
     * 이때 의식적으로 CDM 질문을 셀프로 물어보면서 ‘내가 이 코멘트를 어떻게 생각해낼 수 있었는지’가 함께 들어간다면 리뷰어와 PR 작성자의 역량 모두 훨씬 빠르게 올라갈 거라고 봄
     * 당연히 개발 외의 영역에서도, 인지적 과업이 필요한 어느 영역이라도 CDM을 아주 잘 써먹을 수 있음. 내가 교육을 하든, 교육을 받든.

   CDM 부분 번역(DeepL):
     * 단서 : 무엇을 보고, 듣고, 냄새를 맡았나요...?
     * 지식, 출처 : 이 결정을 내리는 데 어떤 정보를 사용했으며 어떻게 얻었습니까?
     * 유사 : 이전 경험이 떠올랐나요?
     * 목표 : 당시 구체적인 목표는 무엇이었나요?
     * 옵션 : 고려하거나 선택 가능한 다른 어떤 행동 방침이 있었나요?
     * 근거 : 이 옵션은 어떻게 선택되었고, 다른 옵션은 어떻게 거부되었나요? 어떤 규칙을 따랐나요?
     * 경험 : 이 결정을 내리는 데 필요했거나 도움이 된 구체적인 교육이나 경험은 무엇인가요?
     * 도움 : 최선의 결정이 아니었다면 어떤 교육, 지식 또는 정보가 도움이 되었나요?
     * 도구 : 이 결정을 내릴 때 특정 결정에 도움이 된 도구가 있었나요?
     * 시간 압박 : 이 결정을 내리는 데 얼마나 많은 시간적 압박이 있었나요?
     * 상황 평가 : 이 시점에서 자신보다 상급자(예: 전문성 측면에서)에게 상황을 설명해 달라는 요청을 받았다고 가정했을 때, 상황을 어떻게 요약하면 될까요?
     * 가설 : 상황의 주요 특징이 달랐다면, 여러분의 결정에 어떤 차이가 있었을까요?
"
"https://news.hada.io/topic?id=15988",""오픈소스 AI가 미래의 길입니다." by 마크 주커버그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ""오픈소스 AI가 미래의 길입니다."" by 마크 주커버그

     * 고성능 컴퓨팅 초기에 주요 기술 회사들은 자체적으로 폐쇄형 유닉스 버전을 개발함
     * 시간이 지나면서 오픈 소스 리눅스가 인기를 끌게 되었고, 현재 클라우드 컴퓨팅 및 모바일 운영 시스템의 표준이 됨
     * AI도 비슷한 방식으로 발전할 것으로 예상됨
          + 현재 여러 기술 회사가 폐쇄형 모델을 개발하고 있지만, 오픈 소스가 빠르게 따라잡고 있음
          + 작년에 Llama 2는 이전 세대 모델에 비해 뒤처졌으나, 올해 Llama 3는 가장 앞선 모델들과 경쟁할 수 있는 수준에 도달
          + 내년부터는 Llama 모델이 업계에서 가장 앞선 모델이 될 것으로 기대됨
          + Llama는 개방성, 수정 가능성 및 비용 효율성에서 이미 선두를 달리고 있음
     * 이제 우리는 오픈소스 AI가 산업 표준이 되기 위한 다음 단계를 밟고 있음
          + Meta는 오늘 Llama 3.1 405B, 최초의 최첨단 오픈 소스 AI 모델과 Llama 3.1 70B, 8B 모델을 발표함
          + 폐쇄형 모델에 비해 훨씬 뛰어난 비용 대비 성능을 가지고 있으며, 405B 모델이 오픈 소스라는 사실은 더 작은 모델을 미세 조정하고 정제하기에 가장 좋은 선택이 될 것
     * 다양한 회사와 협력하여 더 광범위한 생태계를 성장시키는 중
          + Amazon, Databricks, NVIDIA 등과 협력하여 AI 모델의 미세 조정 및 증류를 지원하는 전체 서비스 제공
          + Groq는 저지연, 저비용 추론 서비스를 구축
          + AWS, Azure, Google, Oracle 등 모든 주요 클라우드에서 모델을 사용할 수 있음
          + Scale.AI, Dell, Deloitte 등은 기업이 Llama를 채택하고 자체 데이터를 사용하여 맞춤형 모델을 훈련할 수 있도록 지원
          + 커뮤니티가 성장하고 더 많은 기업들이 새로운 서비스를 개발함에 따라, 우리는 Llama를 산업 표준으로 만들고 AI의 혜택을 모두에게 가져다 줄 수 있음
     * Meta는 오픈 소스 AI에 전념하고 있음.
          + 오픈 소스가 여러분에게 가장 적합한 개발 스택이라고 믿는 이유,
          + Llama를 오픈 소스로 하는 것이 Meta에 좋은 이유,
          + 그리고 오픈 소스 AI가 세상에 좋은 이유,
          + 따라서 장기적으로 존재할 플랫폼에 대해 설명함

오픈 소스 AI가 개발자에게 좋은 이유

     * 모델을 직접 훈련하고 미세 조정 및 증류할 수 있음: 각 조직은 고유한 데이터를 사용하여 최적의 모델 크기로 조정 가능
     * 폐쇄형 벤더에 의존하지 않고 독립성 유지: 오픈 소스는 호환 가능한 툴체인 생태계를 제공하여 자유롭게 이동 가능
     * 데이터 보호: 민감한 데이터를 클라우드 API에 보내지 않고 자체 모델에서 처리 가능
     * 비용 효율적: Llama 3.1 405B 모델은 폐쇄형 모델보다 약 50% 저렴하게 추론 가능
     * 장기적인 표준에 투자: 오픈 소스는 폐쇄형 모델보다 빠르게 발전하고 있음

오픈 소스 AI가 Meta에 좋은 이유

     * Meta의 비즈니스 모델은 최고의 경험과 서비스를 제공하는 것.
     * 이를 위해서는 최첨단 기술에 항상 접근할 수 있어야 하며, 경쟁사의 폐쇄형 생태계에 묶이지 않아야 함
     * Apple 플랫폼에서 서비스 구축 경험을 통해 폐쇄형 생태계의 제약을 겪음.
     * 오픈 생태계를 구축하면 더 나은 서비스를 제공할 수 있음
     * 오픈 소싱이 기술적 우위를 포기하는 것이라는 우려가 있지만, 이는 큰 그림을 놓치는 것
          + 생태계 발전: Llama는 도구, 효율성 개선, 실리콘 최적화 및 기타 통합으로 완전한 생태계로 발전해야 함. Llama를 사용하는 회사가 Meta만 있으면 생태계가 발전하지 않음
          + 경쟁력 유지: AI 개발은 매우 경쟁적일 것이므로, 오픈 소싱이 큰 기술적 우위를 포기하는 것이 아님. Llama는 세대마다 경쟁력 있고 효율적이며 개방적이어야 함
          + 비즈니스 모델 차이: Meta는 AI 모델 접근 판매가 비즈니스 모델이 아니므로, Llama를 오픈 소싱해도 수익, 지속 가능성 또는 연구 투자 능력을 저해하지 않음. 이는 여러 폐쇄형 제공업체가 정부에 오픈 소스 반대를 로비하는 이유 중 하나임
          + 오픈 소스 경험: Meta는 오픈 소스 프로젝트와 성공의 역사가 있음. Open Compute Project를 통해 서버, 네트워크 및 데이터 센터 설계를 공개해 수십억 달러를 절약함. PyTorch, React 등의 도구를 오픈 소싱하여 생태계 혁신에서 혜택을 받음. 이 접근 방식은 장기적으로 Meta에 일관되게 유리함

오픈 소스 AI가 세계에 좋은 이유

     * 오픈 소스는 AI의 긍정적인 미래를 위해 필수적임
     * AI는 생산성, 창의성, 삶의 질을 높이고 경제 성장을 가속화하며 의료 및 과학 연구의 진전을 가능하게 함
     * 오픈 소스는 더 많은 사람들이 AI의 혜택과 기회를 누릴 수 있게 하고, 권력이 소수의 회사에 집중되지 않도록 보장함
     * AI 기술이 더 균등하고 안전하게 사회 전반에 배포될 수 있도록 하며, 오픈 소스는 투명하게 개발되므로 더 안전함
     * 안전을 이해하기 위한 제 프레임워크는 두 가지 범주의 해악으로부터 보호해야 한다는 것
          + 의도하지 않은 해악: AI 시스템이 의도치 않게 해를 끼치는 경우
               o 예: 잘못된 건강 조언 제공, 자가 복제 또는 과도한 목표 최적화
          + 의도적인 해악: 악의적인 사용자가 AI 모델을 사용하여 해를 끼치는 경우
               o 비의도적 해악이 대부분의 우려 사항을 차지함
               o 예: AI 시스템이 사람들에게 미치는 영향, AI가 인간에게 해를 끼치는 공상과학적 시나리오
               o 오픈 소스는 시스템이 더 투명하고 널리 검토될 수 있으므로 비의도적 해악을 방지하는 데 더 안전함
               o Llama와 같은 오픈 소스 모델은 안전 시스템(Llama Guard)으로 인해 폐쇄형 모델보다 더 안전하고 보안성이 높을 가능성이 있음
     * 우리는 엄격한 테스트와 레드팀 활동을 포함하여 모델의 유해성을 평가하고 위험을 완화하려고 노력함
          + 모델이 공개되어 누구나 테스트할 수 있음.
          + AI 모델이 인터넷의 정보를 학습하므로, 모델이 기존 정보보다 더 많은 해를 끼칠 수 있는지 고려해야 함
     * 의도적 해악에 대한 고려
          + 소규모 행위자와 대규모 행위자의 차이를 구분해야 함
          + 미래에 악의적인 개인이 AI 모델을 사용해 새로운 해악을 만들어낼 수 있음
          + AI가 널리 배포되어야 큰 행위자가 작은 악의적 행위자의 힘을 견제할 수 있음
          + 큰 기관이 AI를 대규모로 배포하면 사회 전반에 걸쳐 보안과 안정성을 촉진함
     * 미국과 민주 국가의 대응
          + 미국의 강점은 분산된 개방형 혁신
          + 모델을 폐쇄하여 중국이 접근하지 못하게 해야 한다는 주장도 있지만, 이는 효과적이지 않음
          + 스파이 활동이 뛰어나므로 모델을 도난당하기 쉬움
          + 폐쇄형 모델만 있는 세계는 소수의 큰 회사와 적국이 모델에 접근하게 만들고, 스타트업, 대학, 소규모 기업은 기회를 놓칠 가능성이 큼
          + 미국의 혁신을 폐쇄형 개발로 제한하면 선두를 유지하기 어려움
          + 오픈 생태계를 구축하고 정부 및 동맹국과 협력하여 최신 기술의 이점을 극대화해야 함
     * 오픈 소스 AI는 경제적 기회와 보안을 최대한으로 활용할 수 있는 세계 최고의 방법임
          + 오늘날의 주요 기술 회사와 과학 연구는 오픈 소스 소프트웨어를 기반으로 함
          + 다음 세대의 회사와 연구도 오픈 소스 AI를 사용할 것

함께 만들어 나갑시다

     * Meta는 이전 Llama 모델과는 다른 접근 방식을 취하고 있음
     * 우리는 내부적으로 팀을 구성하여 가능한 한 많은 개발자와 파트너가 Llama를 사용할 수 있도록 지원하고 있음
     * 우리는 생태계의 더 많은 기업들이 고객에게 독특한 기능을 제공할 수 있도록 적극적으로 파트너십을 구축하고 있음
     * Llama 3.1 릴리스가 대부분의 개발자가 주로 오픈 소스를 사용하기 시작하는 업계의 변곡점이 될 것이라고 믿음

   메타가 해온 걸로 봐서는 의도하지 않은 해악이든 의도한 해악이든 방조할 가능성이 높아 보입니다. 개인적으로 평가하건대 주커버그는 신뢰할 수 없는 사람입니다

   라마는 오픈소스인가? No.

   학습데이터 = 소스코드
   이번 라마3.1 모델은 오픈소스로 공개했습니다. 하지만, 학습데이터는 비공개입니다. AI, 딥러닝에서는 학습데이터가 '소스코드'이며, 모델은 앱(app) 같은 거죠. 그러므로, 사실상 라마는 오픈소스라고 할 수 없습니다. 그냥 무료 언어모델 앱을 출시한 것입니다.

   메타는 라마 학습데이터를 공개할 가능성이 있는가? No.

   라마 학습데이터는 텍스트만 15조개 토큰이고, 멀티모달 학습을 위해 이미지 비디오 오디오 데이터도 있을 텐데요, 이들 데이터의 상당 부분은 페이스북이나 인스타그램 등의 고객 데이터일 가능성이 있습니다. 그래서, 이를 공개하는 것은 사회적으로 큰 데이터 소유권, 저작권 이슈를 만들것이기에, 메타는 데이터 공개를 하고 싶어도 못할 것으로 예상됩니다.

   AI는 오픈소스가 존재하지 않습니다.

   메타 머싰네요

  Hacker News 의견

     * 오픈 소스 AI에 대한 언어가 혼란스러움
          + 오픈 소스는 보통 사람이 읽을 수 있는 코드가 있어야 함
          + 현재의 ML 모델은 매우 큰 행렬로 구성되어 있어 사용자가 이해하고 수정하기 어려움
          + 오픈 소스 코드가 단순히 원격 API를 통해 실행되지 않는 코드와 혼동되는 것 같음
     * AI 스타트업과 개발자들에게 큰 이점이 있음
          + 벤더 종속성이 사라짐
          + 개발자들이 비용 효율적이고 성능 좋은 방식으로 AI를 제품에 통합할 수 있음
          + 저렴한 가격에 빠른 LLM 응답이 가능해질 전망임
          + AI 발전으로 제품이 자동으로 더 나아지고 저렴해지며 확장 가능해짐
     * Meta는 오픈 모델을 제공하는 몇 안 되는 대형 AI 회사 중 하나임
          + Anthropic과 OpenAI와 달리, Meta는 오픈 모델에 헌신하고 있음
          + 이는 안전성과 폐쇄된 AI 시스템의 필요성에 대해 논의하는 다른 그룹들과 차별화됨
     * Meta의 광고 수익 모델은 주목을 끌어야 함
          + 오픈 소스 모델을 통해 사용자가 자체 콘텐츠를 생성할 수 있게 하는 것이 Meta에 유리함
          + 오픈 모델을 출시하면 모델이 생성하는 콘텐츠를 감시할 필요가 없어짐
          + 이는 Meta에게 좋은 비즈니스 전략임
     * Meta는 AI 오픈 소스의 챔피언으로 자리매김하려 함
          + 이는 OpenAI에 의해 기습당했기 때문이며, 인프라 게임에 참여하지 않기 때문임
          + 이는 이타주의가 아니지만, 개발자와 스타트업에게는 여전히 좋음
          + Meta의 GPU 투자는 주로 새로운 AI 제품, 추천 시스템 및 광고 판매를 위한 것임
"
"https://news.hada.io/topic?id=15999","Show HN: 모든 VC 투자 스타트업 집계 (통계)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show HN: 모든 VC 투자 스타트업 집계 (통계)

   내용을 요약할 수 없습니다. 제공된 텍스트는 네트워크 정책에 의해 차단된 요청에 대한 메시지입니다. 이 메시지는 Reddit의 서비스 약관 및 네트워크 정책에 관한 내용으로, 요약할 만한 유의미한 정보가 포함되어 있지 않습니다.
"
"https://news.hada.io/topic?id=15931","라이언에어 – 모든 페이지가 다크 패턴인 상황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       라이언에어 – 모든 페이지가 다크 패턴인 상황

Ryanair – 모든 페이지가 다크 패턴인 경우

   Ryanair는 다양한 조작 기법, 즉 ""다크 패턴""을 사용하여 이익을 증가시키는 회사의 대표적인 예임.
     * Privacy Zuckering
          + Ryanair는 프로모션 자료에 대한 기본 가입을 설정하여 사용자가 원치 않는 정보를 공유하도록 유도함.
     * Misdirection
          + 예약 과정에서 Ryanair 웹사이트는 다양한 ""misdirection"" 다크 패턴을 사용하여 추가 서비스를 판매하려 함.
          + 예를 들어, ""fast track"" 옵션을 홍보하는 버튼을 페이지 중간에 배치하여 사용자가 스크롤하는 동안 실수로 클릭하게 만듦.
          + 고객이 이전 단계에서 업셀 제안을 거절하더라도, Ryanair는 또 다른 팝업을 표시하여 고객을 속이려 함.
          + 이때 버튼의 색상과 제목을 변경하여 다른 제안처럼 보이게 하여 고객의 주의를 끌고 동일한 페이지임을 덜 명확하게 만듦.
     * 지속적인 업셀 제안
          + Ryanair 웹사이트는 예약 과정 전반에 걸쳐 다양한 ""다크 패턴""을 사용하여 고객에게 추가 서비스를 판매하고 주의를 조작함.
          + 이러한 조작적인 디자인은 거의 모든 웹사이트 페이지에서 흔히 볼 수 있음.
          + Ryanair는 동일한 기능에 대한 업셀 제안을 여러 번 제시하여 고객이 마음을 바꾸거나 조작적인 ""다크 패턴""에 넘어가도록 유도함.
          + 이러한 지속적인 접근 방식은 고객이 충동 구매를 하거나 실수로 제안을 클릭할 가능성을 높임.
     * 주의 필요
          + Ryanair는 예약 과정의 거의 모든 측면에 조작적인 ""다크 패턴""을 통합했으며, 이를 중단할 계획이 없어 보임.
          + Ryanair 웹사이트를 사용할 때는 이러한 기술이 고객을 속이고 회사의 이익을 증가시키기 위해 설계되었음을 인지하고 주의해야 함.

  이 사례에 포함된 내용

     * Privacy Zuckering
          + Privacy Zuckering이란? 서비스나 웹사이트가 사용자가 원하지 않는 정보를 공유하도록 속이는 것임.
     * Misdirection
          + Misdirection이란? 흐름이나 UI 요소가 사용자의 주의를 분산시켜 원하는 행동을 방해하도록 설계된 것임 (예: 주요 버튼에 작은 대비 색상을 사용하는 것).

GN⁺의 정리

     * Ryanair는 다양한 ""다크 패턴""을 사용하여 고객의 주의를 조작하고 추가 서비스를 판매하려 함.
     * 이러한 패턴은 고객이 실수로 클릭하거나 충동 구매를 하도록 유도함.
     * Ryanair 웹사이트를 사용할 때는 이러한 조작적인 기술에 주의해야 함.
     * 비슷한 기능을 가진 다른 항공사 웹사이트도 이러한 다크 패턴을 사용할 수 있으므로, 항상 주의 깊게 확인하는 것이 중요함.

        Hacker News 의견

     * Ryanair는 여행사를 통해 예약한 고객에게 불만을 제기하며, 앱을 통해 신분증을 스캔하는 데 요금을 부과함
          + 이러한 추가 요금과 다크 패턴으로 인해 혜택의 의미가 사라짐
          + '속도 탑승'을 구매한 승객조차도 짐을 기내에 싣기 어려움
          + Ryanair를 피하고 다른 저가 항공사를 이용하라는 조언
     * Ryanair는 외환 거래 시 불리한 환율을 적용하며, 이를 피하려면 작은 링크를 클릭해야 함
          + 이는 고객을 속여 추가 이익을 얻는 불법적인 패턴일 가능성이 있음
     * Ryanair는 유럽에서 저렴한 항공 요금을 제공하는 이유 중 하나임
          + 다른 항공사들도 Ryanair의 패턴을 모방하지만 여전히 Ryanair만큼 저렴하지 않음
          + 공항에서 탑승권을 인쇄하지 않으면 추가 요금을 부과하는 패턴은 2009년부터 존재함
     * 다른 저가 항공사들도 유사한 다크 패턴을 사용함
          + WizzAir는 로그인 시 '마케팅 이메일 구독' 체크박스를 사용함
     * Ryanair에서 좋은 좌석을 원하면 체크인 마감 직전에 체크인하는 것이 좋음
          + '랜덤' 좌석 배정 알고리즘이 나쁜 좌석을 먼저 배정함
     * 다크 패턴은 고능력자에게 유리하고 저능력자에게 불리한 역진세와 같음
     * Dropbox는 사용자에게 적대적인 구독 취소 흐름을 가지고 있음
          + 이는 회사가 자신들의 서비스가 필요하다고 생각하는 경우 더 쉬운 구독 취소 경로를 제공하는 것과 대조적임
     * Ryanair는 항공사가 아니라 복잡한 관료적 게임과 같음
          + 여행 보험을 강제로 선택하게 하여 '보험 없음' 국가를 찾아야만 보험 없이 진행할 수 있었음
     * Ryanair의 체크인 경험은 성가신 인터페이스를 설명하는 데 사용됨
          + EasyJet에서도 비슷한 경험을 했으며, 티켓을 얻기 위해 여러 번 '아니오'를 선택해야 했음
          + 인터넷과 기기들이 점점 더 공격적인 판매 전술을 사용하는 것 같음
     * 상점에서 일할 때 연장 보증을 강요받았으며, 이는 고객과의 신뢰 기반 관계를 적대적으로 변화시킴
          + 프리랜서로 일할 때는 급진적인 정직을 실천했으며, 이는 큰 성공을 거둠
          + 신뢰는 점점 신뢰가 없는 사회에서 매우 가치가 있음
"
"https://news.hada.io/topic?id=15969","Tenstorrent의 RISC-V 기반 고성능 Wormhole AI 프로세서 발표, 놀라운 가격 대비 성능 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Tenstorrent의 RISC-V 기반 고성능 Wormhole AI 프로세서 발표, 놀라운 가격 대비 성능 제공

     * Tenstorrent가 RISC-V 아키텍처와 확장성을 갖춘 최첨단 Wormhole 고성능 AI 칩을 출시
     * CEO이자 칩 전문가인 Jim Keller는 NVIDIA가 AI 열풍에 편승하는 방식을 비판해왔기에, 이번에 출시된 AI 솔루션은 최고 수준일 것으로 기대됨

Wormhole AI 칩의 특징

     * 강력하면서도 비용 효율적이고 확장 가능한 솔루션을 제공하는 것이 목표
     * PCIe 카드 형태로 제공되며, Wormhole n150과 Wormhole n300의 두 가지 구성으로 출시됨
     * Wormhole n150은 72개의 Tensix 코어를 가진 단일 프로세서로 구성
          + 각 Tensix 코어는 ""다섯 개의 RISC-V 베이비 코어""를 포함하여 멀티 칩 개발과 확장성을 효과적으로 지원함
          + 160W TDP에서 262 TFLOPS의 FP8 성능을 제공하며, 12GB GDDR6 메모리와 288GB/s 대역폭을 갖춤
     * Wormhole n300은 프로세서 2개와 24GB GDDR6 메모리를 탑재하여 n150의 두 배 성능을 제공함
     * Wormhole 프로세서는 필요에 따라 단일 유닛으로 작동하거나 개별적으로 활용될 수 있는 뛰어난 확장성을 제공함
          + 이는 Jim Keller가 높이 평가하는 이더넷 상호 연결 방식 덕분에 가능함

Tenstorrent 워크스테이션

     * Tenstorrent는 Wormhole 플랫폼 전용 워크스테이션인 TT-QuietBox와 TT-LoudBox도 공개함
     * TT-QuietBox는 AMD EPYC 프로세서, 수랭식 냉각, 4개의 Wormhole n300 AI 카드(총 8개 프로세서)를 탑재함
     * TT-LoudBox는 Intel Xeon 아키텍처와 고성능 사양을 제공하지만 수랭식 냉각은 지원하지 않음

가격 경쟁력

     * Wormhole n150과 n300의 가격은 각각 $999와 $1,399로 경쟁사 제품 대비 매우 저렴함
     * NVIDIA H100 AI GPU 등과 성능 차이는 크지만, 거의 10배 저렴한 가격을 고려하면 가성비가 뛰어남
     * TT-LoudBox는 $6,000, TT-QuietBox는 $1,500에 판매됨

총평

     * Tenstorrent의 새로운 제품들은 견고하며, 저예산으로 중저성능 AI 컴퓨팅 성능을 원하는 AI 스타트업이나 개인에게 유용할 것으로 보임

   가격에 0이 하나씩 빠졌네요.

   wow

   국내 리벨리온, 퓨리오사 같은 업체들이 경쟁 가능할까요?

   Jim Keller가 이끄는 Tenstorrent, GPU에 대응하는 RISC-V 기반 Grayskull 공개
   Jim Keller, ""앞으로 5~10년내에 RISC-V가 모든 데이터센터를 차지할 것""
   짐 켈러, AI 스타트업 Tesnstorrent에 사장 겸 CTO로 취임
"
"https://news.hada.io/topic?id=15939","광고를 위해 사용되는 AI – gpt-4o mini의 전환점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   광고를 위해 사용되는 AI – gpt-4o mini의 전환점

     * OpenAI는 최근 gpt-4o mini 모델을 발표
     * 가격은 입력 토큰 100만 개당 $0.15, 출력 토큰 100만 개당 $0.60
     * 이 저렴한 AI 모델은 이제 광고 수입을 위한 동적 AI 생성 콘텐츠를 구축할 수 있는 전환점을 지났음

  광고 노출로 퍼블리셔가 얼마나 벌 수 있을까?

     * 광고 노출로 발생하는 수익은 디스플레이 매체와 콘텐츠 카테고리에 따라 크게 다름
     * Google의 AdSense 예상 수익 계산기를 통해 대략적인 수익을 추정할 수 있음
     * 예를 들어, 월 50,000 페이지 조회수와 금융 카테고리를 입력하면 연간 잠재 수익이 $2,000임
     * 모든 카테고리의 중간값을 취하면 월 50,000 페이지 조회수에 대해 연간 $1,550의 수익을 예상할 수 있음
     * 이는 페이지 조회수당 약 $0.0026의 수익을 의미함

  AI 콘텐츠 생성 비용은 얼마나 될까?

     * 사용자가 검색창에 입력하는 내용에 따라 콘텐츠를 생성하는 블로그를 상상해보겠음
     * 사용자가 찾고 있는 기사를 실시간으로 생성하며, 아래는 사용자가 입력한 쿼리를 감싸는 프롬프트

     You are an excellent blog writer. You write blogs that rank well in search engines because you know about SEO and how to use highly relevant and popular keywords. Your blog posts are informative, and help users achieve what they are looking for. You will receive queries from users searching for blog posts. You will create blog posts that matches their query, that are helpful, and that answer or are relevant to whatever they are searching for. Respond with only the blog post.

     * 이 프롬프트와 사용자 쿼리를 사용하면 OpenAI의 Playground에 따르면 119개의 입력 토큰이 필요함
     * gpt-4o mini가 생성한 응답은 829개의 출력 토큰임.

     생성된 글 ""# How to Make Your MacBook Audibly Greet You When You Flip It Open""

     * 이 블로그 포스트를 생성하는 데 필요한 비용을 계산해보면, 총 $0.00051525가 들었고, 꽤 괜찮은 내용이었음

  광고 노출 vs AI 비용

     * 이제 이 블로그 포스트로 사용자 요청에 대한 단일 페이지 노출로 ~$0.0026의 수익을 얻을 수 있음
     * 반면, 블로그 포스트 자체를 생성하는 데 $0.00051525의 비용이 들었음
     * 순이익은 $0.0026 - $0.00051525 = ~$0.002임. 이는 1센트의 2/10임

  실제로 일어날까?

     * 미래의 인터넷이 사용자 쿼리에 따라 동적으로 생성된 AI 블로그로 가득 찰까? 확실하지 않음
     * 그러나 인터넷은 이미 하향세를 타고 있음
     * 대부분의 인터넷은 아마도 저렴한 카피라이터가 생성한 SEO 콘텐츠 블로그 스팸일 것임

  현재 이 작업을 수행하는 사람이 있을까?

     * 재미있게도, Websim이라는 프로젝트가 있음.
     * LLM을 사용하여 대안적인 인터넷을 동적으로 생성하는 ""웹 시뮬레이터""임. 그러나 아직 광고는 없음

    GN⁺의 정리

     * OpenAI의 gpt-4o mini 모델은 저렴한 비용으로 동적 AI 콘텐츠를 생성할 수 있는 전환점을 지났음.
     * 광고 수익과 AI 콘텐츠 생성 비용을 비교한 결과, 페이지 조회수당 약간의 수익을 얻을 수 있음.
     * 인터넷의 미래가 AI 생성 콘텐츠로 가득 찰 가능성이 있지만, 이는 이미 하향세를 타고 있는 인터넷의 문제를 악화시킬 수 있음.
     * Websim과 같은 프로젝트는 AI를 사용하여 대안적인 인터넷을 제공하지만, 아직 광고 수익 모델은 도입되지 않았음.

   구글 검색을 통한 정보 취득은 이미 절반은 망가졌다고 봅니다.

   한글 검색시엔 똑같은 정보조차 다르게 적은 여러 티스토리 블로그만 즐비하고
   영문 검색시엔 똑같은 정보가 하나도 없고 제목과는 전혀 다른 내용을 소개하는 블로그들만 천지거든요

        Hacker News 의견

     * Google이 결국 LLMs의 출력을 주로 색인하게 될 것이라는 의견이 있음
          + Kagi를 사용해 질문하고 답을 얻는 방식으로 검색을 사용하고 있음
          + 인간이 생성한 콘텐츠가 고갈되어 새로운 모델은 다른 LLMs의 출력으로 훈련될 것이라는 우려가 있음
          + 2023년 웹의 스냅샷이 마지막 원본 콘텐츠가 될 것이라는 예측이 있음
     * OpenAI의 고객들이 이제 손익분기점을 맞출 수 있게 되었다는 의견이 있음
          + 그러나 이는 많은 질 낮은 콘텐츠의 범람을 의미함
     * 이 기사가 이상한 클릭베이트라는 의견이 있음
          + SEO 기업가들이 수백만 페이지 사이트를 생성할 준비가 되어 있다는 가정이 있음
          + 실제로는 이런 방식으로 생성된 콘텐츠가 검색 엔진에서 잘 작동하지 않음
          + AI 이미지와 비디오 생성이 더 나은 수익을 가져다 줄 것이라는 의견이 있음
     * 사용자가 여전히 검색 엔진에 의존하는 미래를 가정하는 의견이 있음
          + 사용자 행동이 AI 생성 콘텐츠를 식별하고 회피하는 방향으로 진화할 것이라는 궁금증이 있음
     * ChatGPT의 출력을 다시 입력으로 연결하여 품질이 저하되는 것을 관찰할 수 있다는 의견이 있음
          + 광고로 돈을 벌 수 있지만, 결국 ""baaa baaa baaa"" 같은 답변만 나올 것이라는 우려가 있음
     * 기본 산수조차 할 수 없는 사람들에 대한 비판이 있음
          + 페이지 뷰당 수익 계산이 잘못되었다는 지적이 있음
     * 공급이 일정하지 않고 증가할 것이라는 의견이 있음
          + 이에 따라 인상당 가격이 하락할 것이라는 예측이 있음
          + 인간이 생성한 콘텐츠가 덜 수익성이 있어질 것이라는 우려가 있음
     * 인터넷의 미래가 사용자 쿼리에 응답하는 AI 블로그로 가득 찰 것이라는 질문에 대한 의견이 있음
          + 여전히 HN에 댓글을 달고 블로그에 생각을 쓰는 것을 즐기는 사람들이 있음
          + 신뢰할 수 있는 사람의 서명이 없는 모든 콘텐츠는 AI 생성으로 간주해야 할 필요성이 있음
          + AI 생성 콘텐츠가 인간이 생성한 것보다 더 나을 수 있다는 가능성을 제기함
     * 콘텐츠를 즉석에서 생성하는 것이 이미 오래전부터 가능했다는 의견이 있음
          + 스크립트를 사용해 Google 결과와 Wikipedia의 콘텐츠를 가져와 단어를 회전시키는 방식이 오래전부터 존재함
          + 저비용 모델이 진입 장벽을 낮췄다는 의견이 있음
     * OpenAI의 API를 사용하지 않고도 이미 1년 넘게 가능했던 일이라는 의견이 있음
"
"https://news.hada.io/topic?id=15899","Psilocybin이 인간 뇌를 비동기화하는 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Psilocybin이 인간 뇌를 비동기화하는 현상

  요약

    Psilocybin의 뇌 연결성 변화

     * Psilocybin은 공간-시간 인식과 자아 해체를 유발하는 환각제로, 임상 시험에서 빠르고 지속적인 치료 효과를 보임
     * 연구 방법: 고용량의 psilocybin과 methylphenidate를 투여한 후, 3주 동안 뇌 변화를 추적
     * 결과: Psilocybin은 대뇌 피질과 피질하에서 기능적 연결성(FC)을 크게 변화시킴
          + 특히 기본 모드 네트워크(DMN)에서 강한 변화가 관찰됨
          + 개인별 FC 변화는 주관적인 환각 경험과 강하게 연결됨

    주요 내용

     * 환각제의 효과: 자아, 시간 및 공간 인식에 강력한 급성 변화를 유발
          + 임상 시험에서 우울증, 중독, 말기 불안에 대한 빠르고 지속적인 증상 완화를 보임
     * 뇌 네트워크 변화: Psilocybin은 글루타메이트 신호 증가, 포도당 대사 증가, 전기 생리학적 신호 감소 등을 유발
          + 기본 모드 네트워크와 해마의 연결성 감소는 치료 효과와 관련 있을 수 있음

    Psilocybin의 뇌 연결성 변화

     * 연구 방법: 고용량의 psilocybin과 methylphenidate를 투여한 후, 3주 동안 뇌 변화를 추적
     * 결과: Psilocybin은 대뇌 피질과 피질하에서 기능적 연결성(FC)을 크게 변화시킴
          + 특히 기본 모드 네트워크(DMN)에서 강한 변화가 관찰됨
          + 개인별 FC 변화는 주관적인 환각 경험과 강하게 연결됨

    환각 경험

     * 데이터 분석: 개인별로 수집된 데이터를 통해 주관적인 환각 경험과 뇌 기능 데이터를 비교
          + MEQ30: 신비로운 경험의 강도와 질을 측정하는 자기 평가 도구
          + 결과: Psilocybin 세션 동안 FC 변화는 주관적인 경험의 강도와 일치

    뇌 네트워크 변화의 잠재적 차원

     * 다차원 척도법(MDS): 뇌 네트워크 변화의 잠재적 차원을 분석
          + 결과: Psilocybin은 다른 스캔과 구별되는 차원을 형성
          + 다른 연구와의 비교: Psilocybin과 LSD 데이터셋에서도 유사한 효과 관찰

    뇌 신호의 비동기화

     * NGSC: 뇌 신호의 공간적 복잡성을 측정
          + 결과: Psilocybin은 뇌 신호를 비동기화하여 공간적 엔트로피를 증가시킴
          + LSD와의 비교: 유사한 비동기화 효과 관찰

    과제 수행이 비동기화 감소

     * 과제 수행: 간단한 청각-시각 매칭 과제를 수행
          + 결과: 과제 수행 중 psilocybin에 의한 뇌 변화와 비동기화가 감소

    해마의 지속적인 FC 감소

     * 연구 결과: Psilocybin 투여 후 3주 동안 해마와 DMN 간의 FC가 감소
          + 의미: 해마-피질 연결성 감소는 자아 지향적 회로의 가소성 증가를 반영할 수 있음

  GN⁺의 정리

     * Psilocybin은 뇌의 기능적 연결성을 크게 변화시켜 치료 효과를 유발할 수 있음
     * 연구 방법: 고용량의 psilocybin과 methylphenidate를 투여한 후, 3주 동안 뇌 변화를 추적
     * 결과: Psilocybin은 기본 모드 네트워크(DMN)와 해마의 연결성을 감소시켜 치료 효과와 관련 있을 수 있음
     * 과제 수행: 간단한 과제 수행이 psilocybin에 의한 뇌 변화와 비동기화를 감소시킴
     * 유사 연구: LSD와의 비교를 통해 유사한 비동기화 효과 관찰

    추천

     * 유사 기능 제품: LSD, ketamine과 같은 다른 환각제들도 유사한 뇌 변화와 치료 효과를 보일 수 있음
"
"https://news.hada.io/topic?id=15921","벨 연구소 재창조의 조건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             벨 연구소 재창조의 조건

    벨 연구소를 재창조하려면 무엇이 필요할까?

      벨 연구소의 역사와 중요성

     * 20세기 대부분 동안 AT&T는 미국의 전화 인프라를 구축하고 운영하는 데 거의 전적으로 책임이 있었음.
     * 벨 연구소는 AT&T의 연구 부서로, 전화 장비뿐만 아니라 새로운 과학적 연구를 수행했음.
     * 벨 연구소는 트랜지스터, 실리콘 태양광 전지, 최초의 비디오폰, 최초의 셀룰러 전화 시스템 등 수많은 주요 발명과 발견의 발상지였음.
     * 벨 연구소는 10개의 노벨상, 5개의 튜링상, 5개의 드레이퍼상을 수상했음.

      벨 연구소의 기원

     * 초기 AT&T는 외부 특허와 발명을 주로 사용했음.
     * 1907년, 재정적 어려움으로 인해 JP 모건이 이끄는 은행가 그룹이 AT&T를 인수하고 시어도어 베일을 사장으로 임명했음.
     * 베일은 장기적인 기술 발전을 추구하며 AT&T를 운영했음.
     * 1915년, 뉴욕과 샌프란시스코를 연결하는 최초의 전화선이 개통되었음.

      벨 연구소의 성공

     * 벨 연구소는 물리학, 화학, 수학 등 다양한 분야에서 연구를 수행했음.
     * 연구원들은 자유롭게 연구할 수 있었지만, 벨 시스템에 유용한 기술을 개발하는 것이 목표였음.
     * 트랜지스터의 발명은 벨 연구소의 대표적인 성공 사례였음.
     * 벨 연구소는 연구뿐만 아니라 제품 개발에도 집중했음.

      벨 연구소의 쇠퇴

     * 1982년 AT&T의 분할 이후 벨 연구소는 여러 조직으로 나뉘고 재정적 압박을 받게 되었음.
     * 루슨트 테크놀로지스로의 분할과 이후의 인수 합병으로 인해 벨 연구소는 점차 축소되었음.
     * 연구 초점이 소프트웨어로 이동하면서 연구 성과가 감소했음.

      벨 연구소의 성공 요인

     * 벨 연구소의 성공은 AT&T의 대규모, 수직 통합, 정부 승인 독점 상태 덕분이었음.
     * AT&T의 규모와 독점 상태는 장기적인 연구 프로젝트를 가능하게 했음.
     * 벨 연구소는 다양한 분야에서 연구를 수행할 수 있었고, 이는 기술 발전에 큰 도움이 되었음.
     * 연구원들은 자유롭게 연구할 수 있었지만, 벨 시스템에 유용한 기술을 개발하는 것이 목표였음.

      오늘날 이러한 조건을 재현할 수 있을까?

     * 벨 연구소와 같은 문화를 재현하는 것은 가능하지만, 쉽지 않음.
     * 벨 연구소의 성공은 특정 역사적 상황과 기술적 환경 덕분이었음.
     * 현대 기업들은 벨 연구소와 같은 장기적인 연구 프로젝트를 지원할 가능성이 낮음.
     * 벨 연구소의 성공은 특정 기술적 체제의 산물이었을 가능성이 있음.

    GN⁺의 정리

     * 벨 연구소는 20세기 기술 발전의 중심지였으며, 트랜지스터와 같은 혁신적인 발명을 통해 통신 기술을 크게 발전시켰음.
     * 벨 연구소의 성공은 AT&T의 대규모, 수직 통합, 정부 승인 독점 상태 덕분이었음.
     * 현대 기업들이 벨 연구소와 같은 연구 환경을 재현하는 것은 쉽지 않음.
     * 벨 연구소의 성공은 특정 역사적 상황과 기술적 환경 덕분이었으며, 이러한 조건을 재현하는 것은 어려움.
     * 벨 연구소와 유사한 연구 환경을 찾고자 한다면, Google의 Moonshot 프로젝트와 같은 현대의 장기 연구 프로젝트를 참고할 수 있음.

        Hacker News 의견

     * Bell Labs는 준독점 기업으로서 혁신이 필요했음
          + 새로운 기술 개발이 장기적으로 이익이 되었음
          + Google도 비슷한 역할을 하고 있음 (Google X, Google Brain, Deepmind 등)
          + 그러나 재료 과학 혁신은 부족함
     * Bell Labs는 벤처 캐피탈 혁명 이전에 존재했음
          + 벤처 캐피탈은 기업들이 자체적으로 회사를 설립할 수 있도록 자원을 활용하게 했음
          + 이는 미국의 혁신을 크게 촉진시켰음
     * Bell Labs의 지적 재산권 변호사와의 일화
          + C++ 컴파일러 개발에 대한 라이선스 문제를 해결해줌
          + Bell Labs는 친절하고 협조적이었음
     * Bell Labs는 장기적인 연구에 투자했음
          + 정부 계약과 보조금 덕분에 가능했음
          + 제약 산업에서도 유사한 패턴이 나타남
     * 과거 기업들은 건강한 수익 창출을 목표로 했음
          + 현대 기업들은 단기 이익에 집중함
          + 이는 주식 시장의 압력 때문임
          + 시간이 지나면서 변화할 가능성이 있음
     * Bell Labs에 대한 더 많은 정보를 원한다면 ""The Idea Factory""를 추천함
     * Bell Labs는 PR 전략으로 새로운 기술을 도입했음
          + 독점에 대한 대중의 불만을 줄이기 위해 노력했음
     * 두 차례의 세계 대전과 냉전이 Bell Labs와 같은 기관의 필요성을 촉진시켰음
          + 냉전 이후 이러한 필요성이 줄어듦
     * 정부가 장기적인 연구를 지원하기 어려운 이유
          + 단기 목표에 집중하는 KPI 관리 방식 때문임
          + Bell Labs는 장기적인 연구를 할 수 있는 자유가 있었음
"
