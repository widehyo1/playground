"https://news.hada.io/topic?id=18824","DeepSeek-R1 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           DeepSeek-R1 모델 공개

     * DeepSeek이 1세대 추론모델인 DeepSeek-R1-Zero와 DeepSeek-R1 모델을 공개
     * DeepSeek-R1-Zero는 대규모 강화학습(RL)만으로 학습되었고, 스스로 다양한 추론 능력을 습득했음
     * 그러나 반복/가독성 문제, 언어 혼용이 나타나, 이를 보완하고 성능을 높이기 위해 SFT 단계를 추가한 DeepSeek-R1을 제시함
     * DeepSeek-R1은 수학, 코드, 추론 작업에서 OpenAI-o1 수준의 성능을 달성함
     * 연구 커뮤니티 지원을 위해 DeepSeek-R1-Zero, DeepSeek-R1, 그리고 해당 모델에서 추론 패턴을 전이해 만든 distillation 모델들을 공개함
     * 특히 DeepSeek-R1-Distill-Qwen-32B 모델은 OpenAI-o1-mini를 능가하는 성능을 달성했음

모델 요약

     * Post-Training: 기본 모델에 대한 대규모 강화학습
          + DeepSeek-R1-Zero는 SFT 없이 RL만 적용된 최초 세대 모델임
          + RL 과정을 통해 체인 오브 소트(Chain-of-thought) 탐색 능력, 자기 검증, 반성(reflection) 등 다양한 추론 패턴을 습득했음
          + 이는 “SFT 없이도 대규모 모델이 RL만으로 강력한 추론 역량을 얻을 수 있다”는 점을 보여줌
          + DeepSeek-R1은 이 과정을 기반으로, 중간에 SFT를 추가해 추론 능력과 일반적 언어 사용 능력을 더욱 강화했음
     * Distillation: 소형 모델도 강력할 수 있음
          + 큰 모델이 학습한 추론 패턴을 작은 모델로도 옮길 수 있음을 시연했음
          + DeepSeek-R1이 생성한 데이터를 활용해 Qwen, Llama 시리즈 등에 파인튜닝을 진행했고, 작은 밀집(dense) 모델도 우수한 성능을 보임
          + 1.5B, 7B, 8B, 14B, 32B, 70B 등 다양한 크기의 distill 모델들을 공개함

모델 다운로드

  DeepSeek-R1 Models

     * DeepSeek-R1-Zero / DeepSeek-R1
          + 파라미터: 총 671B(실제 활성 파라미터는 37B)
          + 컨텍스트 길이 128K
          + HuggingFace에서 다운로드 가능하며, DeepSeek-V3-Base 모델을 기반으로 RL 방식으로 학습했음

  DeepSeek-R1-Distill Models

     * Qwen2.5 및 Llama3 시리즈 기반으로 distillation
     * 1.5B부터 70B까지 다양한 파라미터 크기 제공
     * DeepSeek-R1이 생성한 고품질 추론 데이터를 활용해 파인튜닝되었음
     * 일부 설정(tokenizer, config)을 수정했으므로 안내된 설정을 사용해야 함

평가 결과

  DeepSeek-R1-Evaluation

     * DeepSeek-R1은 영어(MMLU, DROP 등), 코드(Codeforces, LiveCodeBench 등), 수학(AIME, MATH-500 등), 중국어(C-Eval 등)에서 높은 점수를 달성함
     * 특히 수학 부문 AIME, MATH-500 등에서 높은 pass@1 기록을 보여줌
     * OpenAI-o1-mini, Claude, GPT-4 등과 비교했을 때 여러 항목에서 경쟁력 있는 성능을 보임

  Distilled Model Evaluation

     * distillation 모델들도 수학(AIME, MATH 등), 코드(Codeforces 등) 벤치마크에서 뛰어난 결과를 보임
     * DeepSeek-R1-Distill-Qwen-32B, DeepSeek-R1-Distill-Llama-70B 등이 높은 pass@1과 코드 풀이 성능을 보여, 작은 모델의 활용 가능성을 시사함

채팅 웹사이트 & API 플랫폼

     * chat.deepseek.com에서 DeepSeek-R1과 대화 체험 가능함
     * OpenAI 호환 API 플랫폼 platform.deepseek.com도 제공됨

로컬 실행 방법

  DeepSeek-R1 Models

     * DeepSeek-V3 리포지토리를 참고해 128K 토큰 맥스 길이 설정 등 세부 사항을 확인 후 실행 가능함

  DeepSeek-R1-Distill Models

     * Qwen, Llama 모델과 동일한 방식으로 사용할 수 있음
     * 예: vLLM, SGLang 등을 이용해 빠르게 서빙할 수 있음
     * 온도(temperature) 0.5~0.7 정도로 설정하는 것을 권장함

라이선스

     * DeepSeek-R1 시리즈는 MIT 라이선스 하에 배포됨
     * 단, Qwen 기반 모델은 Apache 2.0, Llama 기반 모델은 llama3.x 라이선스를 따르는 점에 유의해야 함
     * 상업적 용도 허가, 수정·파생 모델 생성 가능 등 유연한 라이선스 정책을 갖춤

   Deepseek - 중국 AI 경쟁을 선도하는 조용한 거인
   Deepseek V3는 과적합 여부를 테스트하는 벤치마크에서 좋지 않은 성능을 보였음
   DeepSeek v3에 대한 노트 - ""정말로 GPT-4o나 3.5 Sonnet보다 좋은가?""

   이렇게 댓글에 보기 좋게 링크를 달거나, 본문을 인용하는 분들도 있던데 혹시 댓글에 쓸 수 있는 문법들이 정리된 게 있을까요?
   며칠 보다 보니 점점 사이트가 좋아져서 댓글도 달고 싶고 그러네요

   https://news.hada.io/guidelines

     Markdown 지원
     본문과 댓글에서 모두 지원됩니다.
     기본적으로 CommonMark 규약을 따릅니다.
     이미지는 지원되지 않습니다.

   감사합니다 다른 댓글에 인용 써보려다 수정을 못 하니까 안전하게 안 썼는데 마크다운이 맞았군요
   유용하게 써보겠습니다 ㅎㅎ

        Hacker News 의견

     * Llama 3의 양자화된 버전을 사용해 실험을 진행 중임. Ollama와 llm-ollama 플러그인을 사용해 모델을 실행하고 로그를 기록함. 모델을 로드한 후 uvx를 사용해 다양한 프롬프트를 테스트할 수 있음. 실험 결과를 블로그에 작성함.
     * DeepSeek-R1-Zero는 반복, 가독성 문제, 언어 혼합 등의 문제를 겪음. 이를 해결하기 위해 DeepSeek-R1을 도입함. OpenAI o1과 QwQ-32B-Preview를 사용한 실험에서 QwQ는 반복 루프에 빠지는 경향이 있었음. DeepSeek-R1은 이러한 문제를 해결함. MIT 라이선스로 제공되어 더 많은 사람들이 평가할 수 있게 됨.
     * ""strawberry""의 'r' 개수를 묻는 질문에서 모델이 스스로와 논쟁하며 정답을 찾는 과정을 보여줌. 이 과정이 재미있다고 언급함.
     * ChatGPT o1, DeepSeek의 DeepThink, Gemini 2.0 Flash Thinking Experimental을 비교한 결과, ChatGPT o1이 가장 우수했으며 DeepSeek이 가장 약했음. DeepSeek-R1을 테스트한 결과, 이전보다 개선된 성능을 보였음. 개인적인 사용 사례에서는 LLM이 더 유용하다고 느꼈음.
     * Llama 8B 모델이 Claude 3.5 Sonnet보다 강력하다는 벤치마크 결과가 나옴. 작은 모델이 강력한 성능을 보이는 것에 대해 놀라움을 표함.
     * 1년 전에 설립된 작은 회사가 OpenAI와 경쟁할 수 있는 점이 놀랍다고 언급함. 중국이 AI 분야에서 미국을 앞서고 있으며, 모델을 오픈 소스로 제공하는 점에서 진정한 ""Open AI"" 회사라고 평가함.
     * DS3에 대한 초기 기대가 있었으나, 기능 호출 문제, 응답 품질 저하, 지원 부족 등의 문제를 발견함. 그러나 이로 인해 다른 API의 트래픽이 줄어들어 지연 시간이 개선됨.
     * 7b와 8b 버전의 차이에 대해 혼란스러움을 표함. Ollama에 Qwen 7B 버전을 업로드했음을 알림.
"
"https://news.hada.io/topic?id=18859","TabBoo – 피하고 싶은 웹사이트에 무작위 점프스케어 추가해주는 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                TabBoo – 피하고 싶은 웹사이트에 무작위 점프스케어 추가해주는 확장

     * TabBooBoo는 사용자가 자주 방문하는 웹사이트에 무작위로 점프스케어를 추가하여 방문을 피하도록 돕는 브라우저 확장 프로그램
          + 점프스케어; 갑작스러운 소리나 이미지로 사용자를 놀라게 하는 것
     * 사용자가 반복적으로 방문하는 웹사이트에 설치하여, 중독적인 행동을 줄이게 할 수 있음
          + Chrome 브라우저에 추가하여 사용할 수 있음.

   이거 재밌네요 메모해둡니다

        Hacker News 의견

     * 두 친구가 알림을 받고 먼저 탭하는 사람이 이기는 게임 프로젝트가 재미있음
          + 중독을 극복하는 예상치 못한 방법이며 효과는 알 수 없지만 고려할 만함
          + 인터넷에 이런 재미있는 아이디어를 공유해줘서 고맙다는 의견
     * 데모 비디오가 HTTP 헤더를 사용하여 URL을 선택했으면 좋겠다는 의견
          + Chrome의 puppeteer를 사용하여 도메인을 캐시하면 최적화할 수 있을 것이라는 제안
          + 이름이 천재적이라는 의견
     * 재미있는 아이디어지만 모든 URL에 접근할 수 있는 확장 프로그램 설치에 주저함
          + 개발자를 알지 못해 보안에 대한 우려가 있음
     * Chrome Web Store 외부에서 확장 프로그램을 배포할 수 있는지 궁금해하는 의견
          + 로그인 벽에 막혔다는 경험 공유
     * 데모 점프스케어로 인해 놀랐다는 의견
          + 강한 심장을 가진 사람들에게는 훌륭한 아이디어라는 평가
     * 오픈 소스화 가능성에 대한 질문
          + Chrome 디렉토리에서 설치된 확장 프로그램의 코드를 볼 수 있지만, 공유할 의향이 있다면 코드 공개를 희망함
     * PTSD로 중독을 극복할 수 있는지에 대한 의문
          + 혐오 조건화가 얼마나 효과적인지 궁금해하며, Firefox에서 작동하고 오픈 소스라면 시도해볼 의향이 있음
          + 프로크래스티네이션을 극복하기 위해 사용한 방법으로 포모도로 타이머와 만트라를 사용했으며, 간단한 도구들이 매우 효과적이었음
"
"https://news.hada.io/topic?id=18876","컴퓨터 과학 역사에서 가장 영향력 있는 논문들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       컴퓨터 과학 역사에서 가장 영향력 있는 논문들

     * 소개
          + 이 글은 컴퓨터 과학 역사에서 가장 영향력 있는 7개의 논문을 소개함. 각 논문은 현대 세계에 큰 영향을 미쳤으며, 각 논문은 자체적으로 블로그 글이나 책으로 다룰 가치가 있음.
     * ""On Computable Numbers, with an Application to the Entscheidungsproblem"" (1936)
          + 저자: Alan Turing
          + 핵심 아이디어: 튜링은 ""튜링 머신""이라는 가상의 개념을 통해 컴퓨터가 이론적으로 수행할 수 있는 작업의 범위를 정의함.
          + 오늘날의 중요성: 모든 프로그래밍 언어와 코드가 튜링의 규칙에 따라 작동함. 양자 컴퓨팅에서도 여전히 튜링이 정의한 경계를 참조함.
     * ""A Mathematical Theory of Communication"" (1948)
          + 저자: Claude Shannon
          + 핵심 아이디어: 정보 이론을 통해 데이터 압축과 오류 수정 코드를 가능하게 함.
          + 오늘날의 중요성: 텍스트 전송, 비디오 스트리밍, 화상 통화 등에서 Shannon의 아이디어가 사용됨.
     * ""A Relational Model of Data for Large Shared Data Banks"" (1970)
          + 저자: Edgar F. Codd
          + 핵심 아이디어: 데이터를 테이블에 저장하고 논리적 연산으로 조작하는 관계형 모델을 제안함.
          + 오늘날의 중요성: SQL과 관계형 데이터베이스의 기초가 되었으며, 데이터 조직의 기본 개념을 제공함.
     * ""The Complexity of Theorem-Proving Procedures"" (1971)
          + 저자: Stephen A. Cook
          + 핵심 아이디어: NP-완전성 개념을 도입하여 문제의 난이도를 설명함.
          + 오늘날의 중요성: 알고리듬, 암호학, 효율적인 해결책 탐색에 큰 영향을 미침.
     * ""A Protocol for Packet Network Intercommunication"" (1974)
          + 저자: Vinton G. Cerf, Robert E. Kahn
          + 핵심 아이디어: 서로 다른 네트워크가 통신할 수 있는 TCP/IP 프로토콜을 개발함.
          + 오늘날의 중요성: 인터넷의 기본 프로토콜로, 웹 브라우징, 이메일 전송 등에 사용됨.
     * ""Information Management: A Proposal"" (1989)
          + 저자: Tim Berners-Lee
          + 핵심 아이디어: 하이퍼텍스트 시스템을 제안하여 월드 와이드 웹을 탄생시킴.
          + 오늘날의 중요성: 웹을 통해 지식 공유 방식을 혁신함.
     * ""The Anatomy of a Large-Scale Hypertextual Web Search Engine"" (1998)
          + 저자: Sergey Brin, Larry Page
          + 핵심 아이디어: 링크 분석을 기반으로 한 검색 엔진, 즉 Google을 개발함.
          + 오늘날의 중요성: 정보 검색 방식을 재정의하고 데이터 중심 기술의 시대를 열었음.
     * 보너스 (리스트에 거의 포함된 5개)
          + ""Recursive Functions of Symbolic Expressions and Their Computation by Machine"" (1960) - John McCarthy: Lisp와 함수형 프로그래밍 스타일 소개.
          + ""Go To Statement Considered Harmful"" (1968) - Edsger Dijkstra: 구조적 프로그래밍 혁명을 촉발한 사설.
          + ""Time, Clocks, and the Ordering of Events in a Distributed System"" (1978) - Leslie Lamport: 분산 시스템에서 논리적 시계의 필요성 설명.
          + ""No Silver Bullet—Essence and Accident in Software Engineering"" (1986) - Fred Brooks: 소프트웨어 개발의 복잡성을 해결할 단일 해결책은 없음을 주장.
          + ""Attention Is All You Need"" (2017) - Vaswani et al.: GPT와 같은 대형 AI 모델의 기반이 된 트랜스포머 아키텍처 소개.
     * 결론
          + 현대에는 새로운 언어, AI 혁신, 양자 도약 등이 넘쳐나지만, 이러한 기초 논문들은 우리가 구축하는 기반을 이해하는 데 중요함.

        Hacker News 의견

     * 컴퓨터 과학의 발전을 이해하기 위한 하버드의 흥미로운 강의 소개
          + 1930년대부터 현재까지의 중요한 논문을 다루며, 컴퓨터 과학의 통합적 관점을 제공함
          + 컴퓨터 과학의 이론과 기술에 영향을 미친 논문들을 선정하는 기준에 대한 의문 제기
     * 튜링 논문과 IP 표준의 중요성 비교
          + 튜링 논문은 컴퓨터 과학의 기초이지만, 기술 발전에 직접적인 영향을 미치지 않았음
          + IP 표준은 기술의 핵심이지만 과학적 요소는 적음
     * 논문 목록에 대한 개인적인 경험 공유
          + 튜링의 계산 가능성 논문은 이해하기 어려웠으며, 보조 자료가 필요했음
          + Cook의 NP-완전성 논문도 어려웠으며, 입문서를 추천함
          + Shannon의 논문은 예술적이지만 쉽게 읽을 수 있는 내용은 아님
          + Brin과 Page, Codd의 논문은 이해하기 쉬웠지만, 선형 대수학 지식이 필요함
     * Shannon의 정보 이론 기초 논문에 대한 추가 정보
          + 그의 석사 논문에서 스위칭 회로를 사용한 불 대수 정의를 설명함
     * 튜링 기계와 결정 문제에 대한 설명
          + 튜링은 모든 문제를 해결할 수 있는 기계가 없음을 증명함
          + Church-Turing-Thesis는 증명할 수 없는 가설임
     * Unix 시스템 진화에 대한 논문 언급
          + Dennis Ritchie의 ""Evolution of Unix time-sharing systems"" 논문이 빠져 있음
     * 소프트웨어 혁명에 대한 Marc Andreessen의 글과 Amazon의 1997년 주주 서한 언급
          + 모든 산업이 소프트웨어 혁명을 준비해야 함을 강조함
     * NP-완전성에 대한 Karp의 논문 추가
          + Cook의 이론에 대한 일반적인 관심을 불러일으킨 중요한 논문임
     * 추천 논문 목록
          + RSA, PageRank, MapReduce, Bitcoin, BackProp, Hoare Logic 논문 추천
     * Diffie와 Hellman의 ""New Directions in Cryptography"" 논문 언급
"
"https://news.hada.io/topic?id=18808","TikTok, 미국 사용자 서비스 복구 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        TikTok, 미국 사용자 서비스 복구 발표

     * TikTok 서비스 복구
          + TikTok이 미국 사용자에게 서비스를 복구하기 시작했음. 이는 도널드 트럼프 대통령 당선자가 서비스 제공업체에 필요한 보장을 제공한 후 이루어졌음.
          + TikTok은 서비스 제공업체와의 합의에 따라 서비스를 복구 중이라고 발표했음. 트럼프 대통령에게 감사를 표하며, 1억 7천만 명 이상의 미국인과 700만 개 이상의 소규모 기업이 TikTok을 사용할 수 있게 됨.
          + TikTok은 제1차 수정헌법을 지지하고 임의의 검열에 반대하는 강력한 입장을 표명했음. 장기적인 해결책을 위해 트럼프 대통령과 협력할 것이라고 덧붙였음.
     * 트럼프의 TikTok 지원
          + TikTok이 미국 사용자에게 서비스를 차단하기 몇 시간 전, 트럼프는 Truth Social에 TikTok이 계속 사용 가능해야 한다고 게시했음.
          + 트럼프는 월요일에 법의 금지 조항이 발효되기 전 시간을 연장하는 행정 명령을 발행할 것이라고 밝혔음. 이는 국가 안보를 보호하기 위한 거래를 성사시키기 위함임.
     * TikTok 서비스 복구 과정
          + TikTok의 서비스는 일요일 오후부터 점진적으로 복구되었음. 웹 브라우저를 통해 콘텐츠에 접근할 수 있었고, 이후 일부 사용자에게 앱 사용이 가능해졌음.
          + TikTok은 사용자에게 ""환영합니다! 인내와 지원에 감사드립니다. 트럼프 대통령의 노력 덕분에 TikTok이 미국에서 다시 돌아왔습니다!""라는 메시지를 전했음.
          + 앱은 여전히 Apple과 Google의 앱 스토어에서 다운로드할 수 없었음.
     * TikTok 금지 법안
          + TikTok 금지 법안은 일요일 발효될 예정이었으며, 대통령이 특정 기준을 충족할 경우 90일 연장을 허용함.
          + 조 바이든 대통령이 4월에 서명한 법에 따르면, TikTok은 중국 소유주 ByteDance가 회사를 비중국 구매자에게 매각하지 않는 한 금지될 예정이었음.
          + 금지 시행 전, 바이든과 트럼프 행정부는 TikTok에 대한 입장을 번복한 것으로 보였음.
     * 정치적 반응
          + TikTok이 다시 온라인 상태가 된 후, 일부 공화당원은 트럼프와의 의견 차이를 보였음. 하원의장 마이크 존슨은 법을 집행할 것이라고 밝혔음.
          + 상원의원 톰 코튼과 피트 리켓츠는 금지를 축하하며 트럼프가 제안한 연장에 대한 법적 근거가 없다고 언급했음.
          + TikTok이 연장을 받더라도 ByteDance는 결국 비중국 소유자에게 매각해야 함. TikTok은 트럼프 대통령과 장기적인 해결책을 모색할 것이라고 발표했음.
     * TikTok의 미래
          + 트럼프는 TikTok의 미국 소유 50%를 제안했으나, 법은 ""외국 적대자"" 소유에 대해 20% 상한을 두고 있어 법 개정 없이는 ByteDance가 그 이상을 소유할 수 없음.
          + 법은 여러 방식으로 ""외국 적대자에 의해 통제되는"" 것을 정의함.

        Hacker News 의견

     * 어떤 회사가 정치적 성명을 위해 스스로를 ""폐쇄""했다가 즉시 이를 번복한 사례가 있는지에 대한 의문이 제기됨
          + 정치적 요소를 제외하고도 이러한 급격한 변화는 놀라움
     * TikTok 법이 표현의 자유 문제라고 주장하는 사람들은 TikTok의 콘텐츠 변경 요구가 없었다는 점을 간과하고 있음
          + 법은 사용자에게 영향을 주지 않도록 설계되었으며, ByteDance가 단순히 지분을 매각하면 됨
     * TikTok의 폐쇄 결정은 주주에 대한 신의 의무를 위반하는 것임
          + ByteDance의 충성은 주주가 아닌 다른 곳에 있음
     * TikTok 금지에 대한 개인적인 감정과는 별개로, 이러한 정치적 상황은 최악의 결과를 초래할 수 있음
          + 초당적 다수에 의해 통과된 법을 무시하는 것은 위험한 길의 시작일 수 있음
     * TikTok 매각 법안은 외국 원조 패키지에 포함되어 통과됨
          + 절차적 트릭이 없었다면 통과되지 않았을 가능성도 있음
     * ""Salt Typhoon""을 검색해보고 TikTok 앱이 1억 2백만 명 이상의 미국 시민의 기기에 설치되기를 원하는지에 대한 의문 제기됨
     * 대통령 당선자가 미국 법을 위반하는 보장을 할 수 있다는 암시가 있음
          + 이는 놀라운 결과임
     * TikTok 금지에 대한 미국 여론조사에 대한 질문이 제기됨
          + Pew 조사에 따르면, 미국인의 32%가 TikTok 금지를 지지함
     * TikTok이 미국에서 서비스를 중단한 최근 사건이 언급됨
     * 의회는 법 집행을 고려하고 있으며, 대통령은 거래를 시도 중임
          + 이 상황이 어떻게 전개될지 흥미로움
     * TikTok이 자발적으로 서비스를 중단한 이유에 대한 추측이 있음
          + TikTok의 법 위반 지원에 대한 결과가 없을 것이라는 보장에 안심할 회사들이 궁금함
     * 의회가 다시 강경한 입장을 취하기를 바라는 의견이 있음
          + 현재 상황이 믿기 어려움
"
"https://news.hada.io/topic?id=18822","영국의 하드웨어 인재 낭비 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           영국의 하드웨어 인재 낭비 현상

     * 영국의 하드웨어 인재 낭비 문제
          + 영국의 명문 대학인 임페리얼, 옥스퍼드, 케임브리지에서 세계적인 엔지니어를 배출하지만, 졸업 후 이들의 경로는 경제적 비극이며 숨겨진 차익 기회임.
     * 현실의 문제점
          + 런던의 하드웨어 엔지니어 졸업생: £30,000-£50,000
          + 실리콘 밸리의 동등한 졸업생: $150,000 이상
          + 대부분의 졸업생은 전통적인 엔지니어링 회사에서 £25,000의 시작 연봉을 받으며, 더 나은 보상을 위해 컨설팅이나 금융으로 이동함.
          + 컴퓨터 과학 졸업생은 대형 기술 회사나 퀀트 트레이딩에서 £100,000 이상의 높은 연봉을 받음.
     * 낭비된 잠재력의 예시
          + 사라: 16세에 핵융합로를 구축했으나 현재는 핀테크 결제 시스템을 디버깅 중임.
          + 제임스: A-레벨에서 3D 프린팅 의수를 제작했으나 현재는 신용 위험 보고서를 작성 중임.
          + 알렉스: 18세에 재난 구호를 위한 AI 드론 군집을 개발했으나 현재는 가전제품의 단일 버튼 인체공학을 조정 중임.
     * 문제의 근본 원인
         1. 지리적 제약: 하드웨어 엔지니어링은 물리적 존재가 필요함.
         2. 벤처 캐피털: 유럽의 VC는 핀테크와 SaaS에 주로 투자하며 하드웨어에는 소극적임.
         3. 산업 정체: 전통적인 엔지니어링 회사는 인재 전략에서 혁신을 이루지 못하고 있음.
     * 결과
         1. 혁신 정체: 다음 ARM이나 테슬라를 놓치고 있음.
         2. 경제적 파급 효과: 성공적인 하드웨어 회사는 수많은 부수적인 사업을 창출할 수 있음.
         3. 국가 안보 문제: 기술적 우위가 지정학적 힘과 동일시되는 시대에 최고의 하드웨어 인재를 방치할 수 없음.
         4. 두뇌 유출 가속화: 해외 시장으로의 인재 유출 위험이 있음.
     * 일반적인 오해 해명
          + ""런던의 낮은 생활비가 낮은 연봉을 정당화한다""는 것은 사실이 아님. 런던은 뉴욕과 비슷하며, 캘리포니아 대부분 지역보다 비쌈.
          + ""영국의 작은 시장이 성장을 제한한다""는 것은 구시대적 사고임. 다이슨, 오카도, ARM과 같은 성공 사례가 있음.
          + ""하드웨어가 소프트웨어보다 위험하다""는 것은 더 이상 사실이 아님. 3D 프린트와 PCB 프로토타입이 24시간 내에 가능하며, 하드웨어-소프트웨어 생태계가 더 방어적임.
     * 차익 기회
          + 소프트웨어 인재는 전 세계적으로 자유롭게 이동하지만, 영국의 하드웨어 스타트업은 세계적인 인재 풀을 독점적으로 활용할 수 있음.
          + 하드웨어는 새로운 개척지이며, 영국의 세계적인 연구 기관을 활용할 수 있음.
     * 지금이 기회
          + 기존 기업은 야망이 부족하고 스타트업은 아직 적음.
          + 최상위 VC들이 영국 하드웨어의 잠재력을 깨닫고 있음.
          + 선구자는 인재 풀을 선점할 수 있음.
     * 하드웨어 혁명 시작
          + 영국은 하드웨어 혁명을 시작할 준비가 되어 있음.
          + VC와 창업자, 엔지니어 모두가 이 기회를 잡아야 함.

        Hacker News 의견

     * 한 사용자는 대학 시절 인턴십 경험을 공유하며, 엔지니어링 회사에서 낮은 연봉 제안을 받았지만 Intel에서 마케팅 직무로 더 나은 제안을 받아 즐거운 시간을 보냈음을 언급함
          + 친구가 Goldman Sachs 인턴십을 통해 높은 연봉과 무료 숙소를 제공받았다는 이야기를 들으며, 금융 분야로의 진로를 결정하게 되었음을 설명함
          + 현재 영국에서 가족과 함께 남쪽에 머물고 싶다면 금융, 대형 로펌, 컨설팅, 특정 미국 기술 기업이 현실적인 선택지임을 강조함
     * 다른 사용자는 영국과 유럽의 벤처 캐피털이 가격 협상을 시도하는 반면, 미국 벤처 캐피털은 사업의 잠재력을 중시한다고 언급함
          + 영국이 Deep Mind를 Google에 잃은 것을 예로 들며, 영국의 야망 수준이 미국에 비해 낮다는 점을 지적함
          + 정치적 이유로 영국의 경제적 성과가 좋지 않음을 언급함
     * 또 다른 사용자는 엔지니어링이 제조와 가까이 있지 않으면 효과적이지 않다고 주장함
          + 저렴한 가격을 위해 엔지니어가 제조 과정을 잘 알아야 하며, 엔지니어링과 제조를 분리하면 과도한 비용이 발생할 수 있음을 설명함
     * 한 사용자는 소득을 최적화하려면 미국이나 금융 산업에서 일하는 것이 좋다고 조언함
          + 남아프리카 공화국에서는 영국으로 이주해 금융 산업에서 일하는 것이 큰 성과로 여겨짐을 언급함
     * 또 다른 사용자는 영국에서 비소프트웨어 엔지니어링을 공부한 사람들이 소프트웨어 엔지니어링이나 금융/컨설팅으로 전환하는 경우가 많음을 설명함
          + 하드웨어 엔지니어링 경로가 제한적이며, 낮은 급여가 문제임을 지적함
     * 한 사용자는 미국으로 이주한 후 아내가 박물관에서 더 높은 급여를 받게 되었음을 언급함
          + 런던의 금융 부문만이 글로벌 경쟁력을 갖추고 있었으나, Brexit 이후 유럽으로 인재와 고객이 이동하고 있음을 설명함
     * 또 다른 사용자는 하드웨어가 소프트웨어보다 위험하다는 주장이 틀렸다고 생각함
          + 하드웨어는 자재 조달, 제조, 저장, 배포 등 여러 단계가 필요하며, 이는 소프트웨어보다 훨씬 복잡하고 비용이 많이 듦을 설명함
     * 한 사용자는 영국의 문제는 허브의 부족이라고 주장함
          + 금융은 런던에 많은 기업이 집중되어 성공했지만, 다른 산업은 그렇지 않음을 지적함
          + 정부가 지역 허브를 만들어 산업을 지원해야 한다고 주장함
     * 마지막으로, 한 사용자는 영국의 상황이 절망적이며, 국가의 미래에 대해 희망이 없음을 표현함
          + 이는 영국뿐만 아니라 대부분의 국가에서 발생하는 문제라고 언급함
"
"https://news.hada.io/topic?id=18904","StreamyFin - Expo로 만든 Jellyfin 클라이언트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  StreamyFin - Expo로 만든 Jellyfin 클라이언트

     * Jellyfin 서버에 접속해서 미디어를 재생하는 클라이언트
     * 인트로/엔딩 건너뛰기 지원
     * 챕터 미리보기 지원(Trickplay 이미지)
     * 백그라운드 오디오 지원하여 폰 잠금 상태에서도 음악 스트리밍 가능
     * 미디어 다운로드: 로컬 저장 후 오프라인 재생
     * Chromecast 지원 기기로 미디어 전송 지원
     * Jellyseerr 연동: 앱 내에서 미디어 요청 가능
     * iOS 앱스토어/Android 구글 플레이 또는 APK로 다운로드 가능

     * https://en.m.wikipedia.org/wiki/Jellyfin 서버
     * https://expo.dev/ 프레임워크
"
"https://news.hada.io/topic?id=18914","새로운 책 정렬 알고리즘, 완벽에 가까운 성과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       새로운 책 정렬 알고리즘, 완벽에 가까운 성과

소개

     * 새로운 알고리듬이 도서관 정렬 문제를 해결하는 방법을 제시함.
     * 이 문제는 단순히 책을 정렬하는 것뿐만 아니라, 하드 드라이브와 데이터베이스의 파일 배열에도 적용됨.
     * 새로운 접근법은 책장의 과거 내용과 무작위성을 결합하여 이론적 이상에 가까운 결과를 도출함.

경계 좁히기

     * 잘 정렬된 책장을 측정하는 일반적인 방법은 개별 항목을 삽입하는 데 걸리는 시간을 보는 것임.
     * 1981년 논문에서는 평균 삽입 시간이 n보다 훨씬 적은 알고리듬을 설계할 수 있는지에 대한 질문을 제기함.
     * 2004년 연구에서는 도서관 정렬 문제의 최적 하한이 log n임을 발견함.
     * 매끄럽거나 결정적인 알고리듬으로는 (log n)²보다 나은 평균 삽입 시간을 달성할 수 없음을 보여줌.

비밀의 역사

     * 2022년, Bender와 동료들은 무작위적이고 비매끄러운 알고리듬을 시도하여 평균 삽입 시간을 (log n)¹.⁵로 줄임.
     * 이 알고리듬은 과거의 책장 기록에 의존하지 않으며, 이는 보안상의 이유로 유용할 수 있음.

격차 줄이기

     * Bender와 Kuszmaul은 상한을 (log n) × (log log n)³로 낮추어 이론적 하한에 매우 근접함.
     * 이 알고리듬은 제한된 정도의 역사 의존성을 사용하여 미래의 사건을 계획함.
     * 이 결과는 이전 연구를 기반으로 하여 무작위성을 완전히 다른 방식으로 사용함.

결론

     * 이 연구는 이론적 측면에서 중요한 개선을 나타내며, 응용 측면에서도 큰 개선 가능성을 가짐.
     * 여전히 log log n 용어가 완전한 해결책을 방해하고 있으며, 상한을 낮추거나 하한을 높이는 것이 해결책이 될 수 있음.

        Hacker News 의견

     * 암호화 기술이 성능을 향상시키는 데 사용될 수 있다는 점이 흥미로움. 성능은 단순히 더 많은 명령을 실행하는 것이 아니라, 어떻게 일을 덜 할지를 선택하는 것임. ""역사 독립성""이라는 보안 속성은 과거를 추적하는 작업을 하지 않음을 의미함
     * 기사에 언급된 주요 논문을 찾는 것이 어려움. Quanta가 모든 참고 문헌을 기사 끝에 나열하도록 하면 독자에게 도움이 될 것임
          + [1] Nearly Optimal List Labeling: 링크
          + [2] A sparse table implementation of priority queues: 링크
     * 데이터베이스 테이블에서 항목을 임의로 배치하는 문제를 해결하기 위해 복잡한 알고리즘이 존재함. 그러나 이 문제의 간단한 해결책은 분수 값을 사용하고 가끔 리스트를 재배치하는 것임
     * 'Library Sort' 알고리즘을 기반으로 학생들에게 문제를 제시했던 기억이 있음. 원 논문의 제목은 'Insertion Sort is O(n log n)'임
     * 현재 사용 중인 알고리즘보다 실제로 더 빠를 이유가 있는지 의문임. B-tree 노드의 배열에서는 memmove()를 사용하는 것이 더 빠를 수 있음. 큰 배열의 경우 B 트리를 사용하는 것이 더 쉬움
     * 문제 진술이 고정 길이의 미리 할당된 배열을 가정하는지 궁금함
     * 영국 도서관이 책을 관리하는 방식에 놀라움. 책이 도착하면 전자 카탈로그가 나머지를 처리하여 책을 재배치할 필요가 없음
     * 기사 상단의 애니메이션을 화면 보호기로 만들고 싶음
     * 모바일 사용자를 위한 깨끗한 링크 제공
          + 게임: 링크
          + 코드: 링크
          + 서브픽셀 기하학 리소스: 링크
     * 상한을 (log n) 곱하기 (log log n)^3으로 낮추는 것이 사실임. 다항식 참조 클래스를 사용한 big-O 복잡성에서 로그가 무한소 값을 제공하는 것이 흥미로움
"
"https://news.hada.io/topic?id=18856","로스 울브리히트 전면 사면 승인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           로스 울브리히트 전면 사면 승인

        Hacker News 의견

     * 한 사용자는 Wired 기사에서 체포된 장소와 가까운 곳에서 읽고 있었던 경험을 공유하며, 그 경험이 매우 흥미로웠음을 언급함
          + FBI 요원이 Bello Coffee에 들렀다는 내용을 읽고 자신도 그곳에서 커피를 마셨다고 생각했음
          + Ulbricht가 공공 도서관에 들어와 자신 앞에 앉았던 것을 회상하며, 그 경험이 기사를 더욱 몰입하게 만들었음을 설명함
     * 다른 사용자는 Ulbricht의 살인 미수 혐의에 대한 증거가 있었음에도 불구하고 기소되지 않은 점에 의문을 제기함
          + Silk Road가 불법 약물을 안전하게 구매할 수 있는 환경을 제공하여 많은 생명을 구했을 것이라고 주장함
     * 또 다른 사용자는 Ross의 처벌이 과도하고 부당했다고 주장함
          + 검찰이 20년형을 요청했지만 판사가 두 번의 종신형과 40년형을 선고한 점을 비판함
          + Trump의 사면이 정치적으로 양극화된 상황에서 이루어졌음을 언급하며, Biden이 이미 사면했어야 한다고 주장함
     * 한 사용자는 블랙 및 그레이 마켓에 대한 공격이 현실 세계의 폭력 범죄를 증가시켰다고 주장함
          + Craigslist와 같은 온라인 플랫폼이 성매매를 거리에서 제거하는 데 효과적이었다고 설명함
          + Silk Road에 대한 단속이 유사한 부정적 영향을 미쳤을 것이라고 추측함
     * 다른 사용자는 Ulbricht의 원래 형량이 정당했다고 생각하지만, 그가 교화되었고 감옥에서 훌륭한 일을 했기 때문에 석방될 자격이 있다고 주장함
          + 10년형이 그의 범죄에 비해 무리하지 않은 형량이라고 생각함
     * 사면 개혁이 필요하다고 주장하는 사용자가 있음
          + 대통령이 사면을 발행할 수 있는 조건을 제한해야 한다고 제안함
          + Ulbricht의 경우에는 폭력 범죄로 유죄 판결을 받지 않았기 때문에 해당되지 않는다고 언급함
     * 대통령이 마약 밀매업자를 사면하는 이유에 대해 의문을 제기하는 사용자가 있음
     * Ulbricht의 사면에 대해 무관심하지만, 그가 아무런 처벌도 받을 자격이 없다고 주장하는 사람들에 대해 이상하다고 생각하는 사용자가 있음
     * 트위터 외의 다른 보도 자료를 찾는 사용자가 있음
"
"https://news.hada.io/topic?id=18846","엘론 머스크, 트럼프 취임식에서 Sieg Heil 제스처 논란","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   엘론 머스크, 트럼프 취임식에서 Sieg Heil 제스처 논란

  엘론 머스크, 트럼프 취임식에서 논란의 제스처

     * 엘론 머스크가 트럼프 취임식에서 논란의 제스처를 했다는 보도가 있었음. 머스크는 워싱턴 DC 트럼프 퍼레이드에서 두 번의 제스처를 했으며, 이는 생방송으로 중계되었음.
     * 그는 Capital One Arena에서 20,000명의 트럼프 지지자들 앞에 서서 지지자들에게 감사를 표한 후 제스처를 했음.
     * 소셜 미디어 사용자들은 이 제스처에 대해 경악했으며, 일부는 이를 나치식 경례로 해석함.
     * 반유대주의 방지 연맹(ADL)은 머스크의 제스처가 나치 경례가 아닌 어색한 제스처였다고 설명하며, 모든 사람들이 서로에게 관용을 베풀어야 한다고 촉구함.
     * 머스크는 이에 대해 ""감사합니다""라는 트윗과 웃는 이모티콘으로 응답함.

  사회적 반응

     * 이스라엘 활동가이자 학자인 샤이 다비다이는 인스타그램에 ""나치 경례는 절대 용납될 수 없다""고 언급함.
     * 온라인 네오나치 그룹들은 이 제스처를 축하하며, 일부는 이를 실수로 보더라도 즐기겠다고 발언함.
     * 반면, 일부 인물들은 머스크가 ""마음이 당신에게 간다""는 제스처를 했다고 주장하며, 그의 아스퍼거 증후군이 어색한 제스처의 원인일 수 있다고 설명함.

  화성 우주 여행

     * 테슬라와 스페이스X의 소유주인 머스크는 트럼프의 취임 연설에서 화성에 대한 언급에 흥분한 모습을 보였음. 그는 NASA가 달로 돌아가는 계획을 포기하고 화성으로 직행할 것을 촉구한 바 있음.
     * 트럼프 대통령은 미국이 화성에 성조기를 꽂을 것이라고 발표했으며, 머스크는 ""DOGE를 화성으로 가져가자!""라고 말하며, 미국 우주비행사들이 다른 행성에 깃발을 꽂는 것이 얼마나 영감을 줄 수 있을지 강조함.
     * 이와 관련하여, 머스크가 이끄는 트럼프 정부 자문 패널이 곧 소송을 당할 것이라는 보도가 있었음.
"
"https://news.hada.io/topic?id=18898","Bun 1.2 출시 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Bun 1.2 출시 발표

  Bun 1.2 업데이트

     * Bun 1.2는 Node.js 호환성을 크게 개선하고, S3 객체 저장소 API와 Postgres 클라이언트를 내장하여 제공함. bun install은 이제 텍스트 기반의 bun.lock을 사용함. Express의 성능을 3배 향상시킴.

    Node.js 호환성

     * Bun은 Node.js의 대체로 설계되었으며, Node.js 테스트 스위트를 실행하여 호환성을 개선함.
     * 내부 API와 오류 메시지의 차이를 해결하여 Node.js 모듈의 90% 이상 테스트를 통과함.

    HTTP/2 서버 및 기타 모듈

     * node:http2를 사용하여 HTTP/2 서버를 생성할 수 있으며, 이는 gRPC 서버에도 필요함.
     * node:dgram을 사용하여 UDP 소켓을 바인딩하고 연결할 수 있음.
     * node:cluster를 사용하여 여러 Bun 인스턴스를 생성하여 작업을 병렬로 처리할 수 있음.
     * node:zlib 모듈을 네이티브 코드로 재작성하여 성능을 2배 향상시킴.

    S3 지원

     * Bun 1.2는 S3 API를 내장하여 파일을 읽고, 쓰고, 삭제할 수 있음.
     * Bun의 S3 클라이언트는 네이티브 코드로 작성되어 Node.js보다 5배 빠름.

    Postgres 지원

     * Bun.sql을 사용하여 SQL 쿼리를 실행할 수 있으며, 이는 SQL 인젝션을 방지함.
     * Bun.sql은 다른 Postgres 클라이언트보다 50% 빠름.

    패키지 관리자

     * bun install은 이제 텍스트 기반의 bun.lock을 사용하여 더 빠르고, 병합 충돌을 줄임.
     * package.json에 주석과 후행 쉼표를 사용할 수 있음.
     * .npmrc 파일을 읽어 npm 레지스트리를 구성할 수 있음.

    테스트 러너

     * Bun은 내장된 테스트 러너를 제공하여 테스트 작성과 실행을 쉽게 할 수 있음.

        Hacker News 의견

     * 일부 사용자는 외부 라이브러리를 핵심 라이브러리에 포함시키는 것에 대해 의문을 제기하며, 선택적 라이브러리로 두는 것이 더 나을 것이라고 생각함
          + 런타임은 표준 라이브러리에 포함시키는 것에 매우 신중해야 하며, 이미 포함된 것들이 프로젝트를 복잡하게 만들 수 있음
     * Bun을 사용하는 경험이 매우 좋았다는 의견이 있음
          + TypeScript, Jest, React, Webpack 설정이 번거로웠지만, Bun은 간단하고 효과적임
          + 외부 라이브러리 통합에 대해서는 언급할 수 없지만, 일반적으로 많이 요청되는 것에 집중하고 있음
     * 기본 동작이 너무 마법적이라는 의견이 있음
          + 예를 들어, S3 파일을 다운로드하지 않고 사용자에게 프리사인 URL을 제공하는 것은 놀라운 선택임
          + 이러한 동작을 비활성화하는 방법이 명확하지 않음
     * 기본 제공 기능이 큰 차이를 만든다는 의견이 있음
          + Web API가 V8과 Webkit 런타임에 기본적으로 포함되어 있는 것을 좋아함
          + 그러나 S3는 너무 멀리 간 것일 수 있으며, SQL 드라이버는 이해되지만 어느 정도까지 포함해야 하는지 고민이 필요함
          + 민감한 API를 추가함으로써 보안 문제를 놓치고 있을 수 있음
     * 한 클라이언트가 Bun을 프로덕션에서 사용하고 있으며, 개발 경험이 매우 좋다는 의견이 있음
          + 개발 경험은 장기적으로 큰 역할을 할 수 있음
          + 코드베이스나 프로세스가 좋지 않으면 좋은 인재를 잃을 수 있음
     * Bun의 기능 목록이 길어 모든 것이 견고하고 버그가 없을지 의심스럽다는 의견이 있음
          + 프로젝트 관리 관점에서 S3 지원에 시간을 쓰는 것이 이해되지 않음
          + Next.js 고객을 확보하는 것이 더 성장할 수 있는 방법일 것임
     * Bun 1.2에서 HTML import 지원이 추가되었음
          + 단일 import 문으로 전체 프론트엔드 툴체인을 대체할 수 있음
          + 매우 놀랍고 멋진 기능이라는 의견이 있음
     * Bun을 처음 사용했을 때 매우 놀라운 경험이었다는 의견이 있음
          + Webpack이나 Vite 설정이 번거로웠지만, Bun은 바로 작동함
          + 작은 스크립트에 대해 설정할 가치가 없었지만, Bun은 훌륭하게 작동함
     * Node.js의 대안으로 실패할 것이라고 생각했지만, Bun을 사용해 본 결과 만족스러웠다는 의견이 있음
          + TypeScript와 SQLite DB 업데이트를 처리하는 독립형 스크립트를 쉽게 만들 수 있었음
          + 새로운 JS/TypeScript 프로젝트에서도 사용해 보았으며, 모든 것이 빠르게 작동함
     * 품질 보증 프로세스가 형식적이라는 의견이 있음
          + 빌드가 통과하지 않은 상태에서 변경 사항이 병합되고 릴리스된 것으로 보임
          + 테스트가 불안정하면 회귀를 추적하기 어려울 것임
"
"https://news.hada.io/topic?id=18852","Show GN: 커피챗 에이전트 - 리쿠르터를 대신해서 커피챗을 해주는 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: 커피챗 에이전트 - 리쿠르터를 대신해서 커피챗을 해주는 에이전트

   AI 에이전트와 커피챗하면서 호감도를 쌓고 3점에 도달하면 커피 쿠폰을 받을 수 있는 서비스입니다.

   gpt-4o-mini 에게 목적, 인터뷰어의 마음가짐으로 작성 해달라고 했더니 3점을 금방따네요.
   역시 ai의 마음은 ai가 잘아는건가요 ㅋㅋㅋㅋ

   이름
   전화번호
   직업

   이렇게 적어야 받을 수 있네요 전화번호를 적는 게 꺼림칙해서 받진 않았지만 재밌었습니다 ㅋㅋㅋ

   조언 감사합니다! 바로 반영했습니다!

   서비스 자체는 좋은 것 같습니다. 그러나 개인정보를 처리하는 ""개인정보처리시스템""의 경우에는 반드시 ""개인정보처리방침"", ""개인정보 수집/이용""에 대한 동의가 필요합니다. 참고하여 주시기 랍니다.

   이름과 전화번호를 수집하면서 개인정보처리 동의 절차가 없는데 혹시나 개인정보보호법 위반이 아닌가 의문이 드네요

   오우 패션 크리에이터를 위한 에이전트와 자바스크립트 프로젝트를 이야기 하고 호감도 3점을 받았습니다....

   어렵네용
"
"https://news.hada.io/topic?id=18837","친절 엔지니어링 - 구체적인 친절 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         친절 엔지니어링 - 구체적인 친절 가이드

친절함이란

     * 친절함 (kindness) 은 단순한 다정함 (niceness) 보다 더 적극적인 활동
     * 상대방이 서있는 그 위치에서 상대하기 (put myself in their shoes)

  a. 솔직함

     * 건설적인 비판의 원천
     * 자신의 삶을 솔직하게 드러내서 신뢰를 쌓는 것이 중요. 그래야만, 정면으로 이의 제기할 때 신뢰성을 확보 가능
          + Rradical Candor 라는 책에선 ""정면으로 이의 제기하면서 인간적으로 챙기라""고 했음. 공감 (empathy) 없이는 피드백이 진정 필요한 지점까지 도달할 수 없음
     * 선의의 거짓말 (white lies) 은 그 자체로 나쁘지는 않다만 사람들을 성장시키지는 못함
     * 일어난 일에 대해 솔직히 얘기하고 개선안을 제시하는 것이 좋음

  b. 코드리뷰

     * 여기선 코드리뷰를 예로 들지만, 실제로는 비동기 커뮤니케이션에 적용되는 부분
     * 심문이나 비난이 아닌, 호기심의 어조를 유지
     * 대상과 방식보다 이유에 집중
     * 깊이 파고들 때는, 악의 혹은 무능함을 가정하지 말고 무언가 놓쳤을 것으로 간주
     * 수정보다는 설명을 요구하고, 열린 질문을 활용
     * 사소한 수정 사항엔 ""nitpick:"" 같은 접두사를 붙여서 이것이 선택적인 항목임을 명시
          + nitpick 이 많이 발생한다는 것은 자동화를 통한 개선이 가능하다는 암시이기도 함
     * 코멘트가 너무 많다면, 동기식 커뮤니케이션으로 전환하는 것을 추천

  c. 심리적 안전감

     * 첫 단계는, 스스로 먼저 동료에게 (특히, 부정적인) 피드백을 요청하기 - 결과적으로 자신을 취약한 상태로 노출시키기
     * 스프린트 회고 포맷으로 충분 : 잘 된 것은? 잘 안 된 것은? 앞으로 해볼 것은?
     * 모두를 포용하려고 노력할 것 - 누군가가 회의/문서에 기여하지 않는다면 그들이 목소리를 낼 수 있는 방법을 찾아내고, 필요하다면 기여도를 측정하는 방법을 재구축
     * 개인의 실수는 대부분 시스템의 문제임을 인식
     * 모든 실수, 실패, 사건은 성장과 학습의 기회로 받아들이기
     * 위험을 부담하며 새로운 실험을 할 정도로 충분히 안전감을 확보해야 혁신 가능

  d. 피드백 / 비판

     * 감정적으로 받아들이지 말 것
     * 가능한 한 구체적이고 완전한 예시 제공 - 그래야 개선점을 구체화하기 쉽고, 진정성이 강화
     * 가능하면 부정적 피드백을 상쇄할 해결책이나 조언도 제공
     * 피드백을 받는 방법에 대해 :
          + 피드백 수용성을 높이기 위해, 스스로의 선호를 잘 이해할 것 — 공개적으로?, 비대면으로?, ...
          + 설령 좋지 않은 피드백이더라도, 일단은 피드백을 준 사람에게 감사 인사
          + 즉각적인 반응 금지. 15분 산책 추천
          + 구체적인 예시를 요청
     * 피드백을 주는 방법에 대해 :
          + 감정 - 스스로의 감정이 아니라, 수용자의 감정에 집중
          + 신뢰 - 선의에서 나온 말이라는 것을 수용자가 진심으로 믿어야 함. 그러기 위해서, 비판적인 피드백에 더해 분명한 조언과 칭찬할 요소를 같이 언급
          + 논리 - 피드백을 주는 이유와 여기까지 오게 된 과정을 구체적으로 밝혀서, 결과적으로 신뢰도 증가

   친절하게 좋은글이네요.

   저도 주기적으로 보면서 실천해야 하겠습니다.

   좋은 글 잘 읽었습니다. 주기적으로 다시 읽어야겠어요.

   여러 방법론에서 비동기적 커뮤니케이션에서 적용 가능한 부분들이 있찌만 기본적으로 커뮤니케이션 전반에 통용되는 것들 같아보이긴하네요...!

   비동기 커뮤니케이션 (Asynchronous Communication) : 비동기 커뮤니케이션은 송신자와 수신자가 동시에 상호작용할 필요가 없는 커뮤니케이션 방식입니다. 메시지를 보내면 수신자는 자신이 준비되었을 때 이를 확인하고 응답할 수 있습니다.

   동기 커뮤니케이션 (Synchronous Communication) : 동기 커뮤니케이션은 송신자와 수신자가 동시에 상호작용해야 하는 커뮤니케이션 방식입니다. 실시간으로 대화나 정보 교환이 이루어집니다.

   동기, 비동기 커뮤니케이션이라고 하니까 생소 하게 느껴지네요

   많이 사용하는 용어입니다!

   전화와 이메일 정도의 차이로 이해하고 있습니다!

   노트
    1. 상대방이 서있는 그 위치에서 상대하기
    2. 호기심의 어조를 유지
    3. 개인의 실수는 대부분 시스템의 문제임을 인식
    4. 피드백에 대해 즉각적인 반응 금지. 15분 산책
    5. 피드백을 줄 때 스스로의 감정이 아니라, 수용자의 감정에 집중
"
"https://news.hada.io/topic?id=18870","Show GN: Voice-Pro – 강력한 AI 음성 복제 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: Voice-Pro – 강력한 AI 음성 복제 도구

   Voice-Pro가 더 강력하고 사용하기 쉬워졌습니다! 모든 음성 복제 작업을 손쉽게 수행할 수 있도록 주요 업데이트를 진행했습니다 🚀

    ✨ 새로운 업데이트 및 기능

     * Gradio 5.x 및 yt-dlp 지원: 개선된 웹 인터페이스와 강화된 YouTube 오디오 다운로드 기능 제공.
     * AI-Cover 지원: 목소리를 자유롭게 변조 가능. Discord의 AI Hub 등에서 음성 모델을 다운로드해 자연스러운 음성 합성 및 AI 커버 제작 가능.

    🔧 주요 기능

    1. 음성 인식, 번역, 텍스트-음성 변환:
       OpenAI-Whisper, Faster-Whisper, Whisper-Timestamped를 활용한 음성 텍스트 변환. Google Translator, Edge-TTS를 통한 원활한 번역 및 텍스트 음성 변환 지원.
    2. 제로샷 음성 복제:
       E2 및 F5-TTS 엔진 기반으로, 50개 이상의 유명인 목소리를 활용한 자연스럽고 신속한 음성 생성.
    3. 간단한 설치:
       Windows 배치 파일을 통한 원클릭 설치 및 실행. 프로그램은 완전히 이동 가능(포터블)하며 간단히 제거 가능.

    🎥 데모 영상

     * 사용 튜토리얼
     * 팟캐스트 제작 데모

    🌍 다국어 더빙 사례

   Voice-Pro는 100개 이상의 언어를 지원합니다. 소아과 의사 Dr. Ha Jung-hoon의 목소리를 사용한 예제를 확인해보세요:
     * 원본 콘텐츠 (한국어)
     * 영어 더빙
     * 스페인어 더빙
     * 중국어 더빙

    🚀 Voice-Pro를 선택해야 하는 이유

   Voice-Pro는 콘텐츠 제작자, 개발자, 오디오 실험가들에게 직관적이고 풍부한 기능을 제공하여 음성 조작의 한계를 넘어섭니다.

    🔗 GitHub

   더 많은 정보와 다운로드는 여기에서 확인하세요: Voice-Pro GitHub

   🎁 GitHub 의 Free-Trial 의 경우 AI-Cover 제작은 60초 분량만 지원합니다. 그래서, 일주일간 무제한 사용할 수 있도록 인증파일을 보내드리고 있습니다. 인증 파일을 받으실 g-mail 주소와 함께 저희 쪽에 메일(📧 abus.aikorea@gmail.com)로 요청해 주세요.

   (인증 파일은 빠른 시일 내에 발송 드리겠습니다! 😊)
"
"https://news.hada.io/topic?id=18858","사회적 이익을 위한 데이터 사이언스 10년간의 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      사회적 이익을 위한 데이터 사이언스 10년간의 교훈

     * 2014년 DrivenData를 시작했을 때, 데이터 과학을 사회적 선을 위해 활용하는 것은 초기 단계였음
     * 당시 데이터 과학 기술은 Netflix, Amazon과 같은 기업에서 주로 마케팅 및 콘텐츠 추천에 사용되었으며, 비영리 단체, NGO, 사회적 기업, 정부 서비스를 위한 활용 사례는 거의 없었음
     * 초기 목표와 배경
          + 데이터 과학 인재는 매우 부족하고 고용 비용이 높았으며, 이러한 격차는 사회 문제를 다루는 조직에서 더욱 심각했음
          + Harvard Innovation Lab에서 출발해, 사회적 문제를 위한 데이터 과학 기술 격차를 해소하고자 함
          + 데이터 과학 및 크라우드소싱의 첨단 기술을 활용해 세계 주요 사회적 과제를 해결하는 것이 목표였음
     * 당시의 견해를 반영한 두 가지 인용구
          + ""빅데이터를 인도주의적 의사결정에 유용하게 만드는 것이 네트워크 시대의 주요 도전이자 기회임"" – UN OCHA
          + ""내 세대의 최고의 인재들이 사람들에게 광고를 클릭하도록 만드는 데 생각을 쏟고 있다… 정말 답답하다."" – Jeff Hammerbacher, Facebook 전 데이터 관리자
     * 지난 10년간의 변화
          + 데이터 과학과 AI를 사회적 영향에 적용하려는 다양한 시도가 이루어짐
          + 150개 이상의 프로젝트, 80여 파트너와 협업(세계은행, 빌 & 멜린다 게이츠 재단, NASA 등)
          + 75개 이상의 데이터 과학 경진대회를 개최하여 $470만 이상의 상금을 제공
     * DrivenData는 지난 10년간 데이터 과학을 통한 사회적 선을 추구하며 모범 사례와 교훈을 축적함
     * 이 시점에서 무엇이 효과적이었고, 여전히 도전적인지, 더 나은 미래를 위한 방향성을 함께 고민할 기회를 갖고자 함

10가지 주요 교훈 미리보기

  데이터 과학이 잘 작동한 사례

    1. 데이터 과학은 사회적 문제에 의미 있는 영향을 미침
    2. 좋은 데이터가 좋은 솔루션을 이끔
    3. 노력이 구체적 문제와 인간의 필요에 초점이 맞춰질 때 가장 성공적
    4. 기계와 인간의 강점을 결합할 때 가장 효과적
    5. 다분야적 관점과 유연성이 조직에 이점 제공

  여전히 도전적인 점

    6. 데이터 과학은 반복적인 R&D 활동이며, 사회적 섹터는 이에 대한 투자가 부족함
    7. 데이터 과학자를 고용하고 잘 지원하는 것이 어려움
    8. 오픈소스는 비개발자를 위한 솔루션 개발이 부족함
    9. 기술 과장(hype wave)이 지나치게 주목받음
   10. 데이터 과학과 AI는 윤리적 함의가 크지만, 윤리적 사용을 지원하는 도구와 관행이 뒤처짐

시대가 변하고 있음

   지난 10년 동안 데이터 및 AI 기술의 발전 속도는 놀라울 정도로 빨랐음. 이를 가능하게 한 주요 혁신 요소는 다음과 같음:
     * 컴퓨팅 및 저장소
          + 클라우드 컴퓨팅과 저장소의 확대로 필요한 자원을 더 저렴하고 쉽게 이용 가능해짐
          + GPU 기반 실험부터 실시간 모델 실행을 위한 확장 가능한 클러스터 배치까지 초기 비용 감소
     * 딥러닝
          + 딥러닝은 데이터 과학에 혁신적 변화를 가져옴
          + 생성적 적대 신경망(GAN), 트랜스포머, 변분 오토인코더, 그래프 신경망 등 효과적인 아키텍처가 폭발적으로 증가
          + PyTorch와 TensorFlow를 중심으로 한 생태계가 발전, 도구, 라이브러리, 사전 학습 모델 등이 발전 속도 가속화
     * 기술 접근성의 대중화
          + 데이터 과학이 ""21세기의 가장 섹시한 직업""으로 불리며, 학습 기회가 폭발적으로 증가
          + MOOCs, 부트캠프, 데이터 경진대회 등으로 더 많은 사람이 데이터 과학 기본 기술을 습득
     * 생성형 AI
          + 대규모 언어 모델(LLM)의 등장으로 업무 방식이 변화
          + 복잡한 작업 소요 시간을 단축하고 새로운 가능성을 열어줌
          + 생성형 AI가 일시적 유행인지 실질적 혁신인지는 검토 중이나, AI가 지속적으로 활용될 것은 분명함

   이러한 기술적 변화에도 불구하고, 특정 기술을 초월해 여러 공통 패턴이 관찰되고 있음. 이 글에서는 지난 10년간 잘 작동했던 점과 여전히 도전 과제가 되는 점을 중심으로 논의함.

데이터 과학이 잘 작동한 사례

  데이터 과학이 사회적 문제에 의미 있는 영향을 미침

     * 10년 전 상황
          + 데이터 과학 도구의 잠재력은 명확했지만, 사회적 영향을 위한 적용은 제한적이었음
          + 당시 논의는 몇 가지 사례에 국한되었고, 미래 가능성에 대한 아이디어 중심으로 진행됨
     * 현재의 발전
          + 머신러닝 모델이 의료, 자연자원 관리 등 다양한 분야에서 의사결정에 영향을 미침
          + 데이터 과학은 해로운 녹조, 지속 불가능한 어업, 기후 변화로 인한 자연재해 등의 문제를 관리하고, 금융 포용성과 야생동물 보존에 기여
          + 공공 영역에서는 데이터 시각화가 언론 보도와 메시지 전달의 주요 매체로 자리 잡음
               o 예: COVID-19 확산 방지 캠페인, WHO 대시보드
     * 위성 이미지를 활용한 구체적 사례
          + 예멘에서 위성 이미지를 사용해 농작물 유형과 기후 위험을 분석, 세계은행의 식량 안보 프로그램에 정보 제공
     * AI의 과학적 진보 기여
          + 알파폴드(AlphaFold): 단백질 구조 예측 모델, 수년이 걸리던 작업을 몇 시간 만에 수행하며 과학자들에게 모든 단백질 구조를 무료로 제공
          + 트랜스포머 모델: 멀티모달 밈에서 혐오 발언 탐지에 적용
          + 개체 식별 기술: 멸종위기종 추적 개선(고래 등) 및 다양한 종으로 확장
     * 사회 섹터에서의 변화
          + 2010년대 중반에는 데이터 활용 논의가 주로 ""영향 측정""에 집중
          + 이제는 데이터 과학 도구가 조직의 운영 방식을 변화시키고, 새로운 역량을 부여하는 데 중점
          + 현재 논의는 데이터 과학과 AI가 측정 가능한 것을 넘어 무엇을 ""할 수 있는지""에 초점

  좋은 데이터가 좋은 솔루션을 이끌며, 데이터 접근성이 크게 개선됨

     * 데이터의 일상적 역할 증가
          + 구매, 응급 서비스 이용, 병원 방문 등 모든 활동에서 데이터가 생성됨
          + 가전제품, 웨어러블 기기, 차량, 휴대폰, 애플리케이션 등이 사용 데이터를 수집
          + 센서와 카메라 기술의 발전으로 이미지 및 비디오 데이터의 활용이 증가
     * 데이터 활용의 두 가지 단계
         1. 데이터를 디지털 방식으로 기록하고 관찰 가능하게 만듦
         2. 데이터를 활용해 학습하며 패턴을 발견하는 단계로 진화
     * 데이터가 기반이 되는 AI 및 머신러닝
          + 더 많은 양과 품질의 데이터는 새로운 패턴 탐색과 알고리즘 개발을 지원
          + 예: 암 탐지, Spotify 추천 알고리즘, ChatGPT 훈련 데이터
     * Monica Rogati의 데이터 과학 계층 구조
          + 데이터 과학의 고급 기능은 강력한 데이터 기반이 필요
          + 데이터 인프라에 대한 현명한 투자가 상위 기능 구현의 토대가 됨
     * 사회적 가치를 위한 데이터 활용
          + 정부 및 대형 기관들이 공공 데이터 공개를 확대
          + DrivenData가 활용한 데이터 유형:
               o 기상 데이터, 교통 데이터, OpenStreetMap 데이터: 항공 교통 계획, 재난 복원력 지원
               o 위성 이미지: 홍수 범위 매핑, 산림 바이오매스 추정
               o 모바일 거래 데이터: 금융 행동과 태도 분석
               o 설문 조사 데이터: 대규모 의견 및 행동 통찰
               o 오디오 녹음: 아동 문해 수준 분류
               o 고해상도 이미지: 흑색종 재발 가능성 예측
               o 텍스트 데이터: 의사 소견서의 임상 개념 자동 분석
     * 데이터 접근성과 활용성의 중요성
          + 데이터는 단순히 공개되는 것만으로 충분하지 않음
          + 기계 판독 가능한 형식, 명확한 문서화, 사용 사례가 제공되면 참여와 활용도 증가
          + 많은 조직이 데이터 수집에 투자하지만, 이를 활용하는 추가 투자에는 소홀함
          + 데이터 문서화와 응용 사례가 챌린지 상금 못지않게 중요한 역할을 함

  노력이 구체적 문제와 인간의 필요에 초점이 맞춰질 때 가장 성공적임

     * 기술 중심 접근의 함정
          + 사회적 임팩트 조직은 종종 최신 기술 트렌드를 따라잡으려 노력
          + ""빅 데이터""와 AI 도구가 마치 만능 해결책처럼 보이지만, 실제로는 구체적인 문제 해결에 초점이 맞춰질 때 효과적임
     * 성공적인 프로젝트 설계의 핵심
          + 특정 사용자와 문제를 정의하고, 이를 해결할 수 있는 측정 가능한 목표를 설정
          + 인간 중심 설계 도구를 활용해 사람들에게 ""원하는 것""을 파악하고, 기술적으로 ""가능한 것""을 넘어선 솔루션 개발
     * 구체적 사례
          + 녹조 감지(CyFi)
               o NASA와 협업하여 위성 이미지를 통해 유해한 시아노박테리아 녹조를 탐지
               o 물 관리자가 녹조 상태를 정확히 평가하고 자원 할당을 효율적으로 수행할 수 있도록 지원
          + 야생동물 식별(Zamba)
               o Max Planck 연구소와 협업해 카메라 트랩 데이터를 활용한 동물 자동 식별 도구 개발
               o 연구자 피드백을 반영해 UI를 개선한 Zamba Cloud로 사용 편의성 증대
     * 사용자 관점의 중요성
          + 문제 정의
               o 사용자 인터뷰와 의견 수렴을 통해 문제와 요구 사항을 명확히 이해
               o 데이터 포인트의 배경에 있는 인간적 관점을 반영
          + 솔루션 전달
               o 사용자가 솔루션을 효과적으로 활용하고 이점을 이해할 수 있도록 UI/UX 테스트와 명확한 커뮤니케이션 필요
               o 모델의 강점과 한계를 직관적으로 파악하도록 지원하며, 실제 사례를 통해 활용 방법을 설명
     * 결론
          + 데이터 과학자의 역할은 기술적 능력과 사회적 필요를 연결하는 것
          + 최신 기술에 매몰되지 않고, 문제 해결과 실질적인 결과에 초점을 맞춘 프로젝트가 가장 효과적임

  기계와 인간의 강점을 결합할 때 솔루션이 가장 효과적임

     * AI 과장된 기대의 위험성
          + 데이터 과학 모델과 AI는 전능하지 않으며 모든 모델은 어느 정도 한계가 있음
          + 단순히 AI를 도입한다고 성공이 보장되지 않음
          + 최적의 솔루션은 기계와 인간의 강점을 결합한 시스템에서 나옴
     * Zamba 도구 사례
          + Zamba는 야생동물 카메라 트랩 영상에서 동물이 있는지 여부를 확률적으로 예측
          + 모델은 때때로 틀릴 수 있으나, 제공하는 확률을 통해 효율적인 검토 전략 수립 가능
               o 예: 침팬지가 나올 가능성이 높은 영상부터 검토하거나, 빈 영상으로 간주할 확률 임계값 설정
               o 결과적으로 전체 영상의 5% 미만을 검토하면서 85%의 침팬지 영상을 식별 가능
     * 기계-인간 협업의 성과
          + 유방암 AI 스크리닝 사례: 방사선 전문의와 AI가 협업 시 각각 단독보다 높은 정확도 달성
          + AI 해석 가능성과 설명 가능성 강조: 사람이 AI 결과를 평가하고 맥락에 통합할 수 있는 정보 제공
               o 예: 고래 식별 경쟁에서 모델이 개별 고래를 매칭하는 특징 시각화 제공
     * 생성형 AI에서의 유사 패턴
          + 인간 피드백이 ChatGPT와 같은 유용한 도구의 발전에 필수적
          + 피드백 데이터를 통해 모델이 점점 더 어려운 사례를 학습하도록 개선 가능
     * 에러 비용 및 개선점 평가
          + 두 가지 질문으로 시스템 설계를 개선:
              1. ""완벽한 모델이 있다면 어떻게 사용할 것인가?""
              2. ""그 모델이 가끔 틀린다면 어떻게 대처할 것인가?""
          + 시스템의 오류 허용 한계와 인간 검토가 필요한 부분을 파악
     * 조직의 교훈
          + 2021년 네덜란드 정부 사례: 부적절한 알고리즘으로 26,000가구가 잘못된 사회복지 사기로 고발됨
          + 적절한 인간 검토 없이 알고리즘에 의존하는 것은 높은 사회적 비용을 초래
          + 반대로, 알고리즘과 인간의 강점을 결합하면 효율성과 효과를 극대화 가능

  다분야적 관점과 유연성이 조직에 도움을 줌

     * 다양한 분야에 걸친 프로젝트 경험
          + 금융 포용성, 기후 행동, 헬스케어 등 다양한 분야를 다루며 다분야적 관점의 이점을 확인
          + 특정 맥락에서의 기계 학습 패턴을 다른 분야로 확장 적용 가능
               o 예: 켈프 숲 보존을 위한 컴퓨터 비전 모델과 자궁경부 생검 병변 탐지를 위한 모델 간 응용
     * 접근법의 융통성
          + 농작물 해충의 조기 발견과 이력서에서 기술 추출 같은 서로 다른 문제도 자연어 인식(NER)에 기반
          + 기존 접근법의 교훈과 경험을 활용해 다른 문제에 적은 비용으로 적용 가능
     * 구체적 사례
          + WhatsApp 메시지에서 농작물, 해충, 질병 및 화학물질을 인식하는 자연어 처리 접근법
          + 소농들이 새로운 경향을 파악하고 과학 기반 조언을 개선하도록 지원
     * 전문성과 사용자 관점의 균형
          + 도메인 전문가와의 협업을 통해 문제에 적합한 맥락을 보장
          + 데이터 과학 과정에서 사용자 관점을 포함해 적합한 솔루션을 설계
     * ""할 만한 가치가 있는 작업""을 파악
          + 기술적 전문성만으로는 충분하지 않으며, 공감, 의사소통, 호기심, 유연성이 필요
          + 기계 학습이 가치를 추가할 수 있는 영역을 브레인스토밍하며, 해당 접근법이 누구를 위한 것이고 어떻게 사용될지 깊이 이해
     * 조직의 다양한 니즈 충족
          + 탐색적 연구부터 프로토타이핑 및 생산 단계까지 조직별 요구가 다름
          + 대형 데이터 제공 조직(Candid, NASA 등)부터 데이터 시스템을 처음 구축하는 조직까지 다양한 파트너와 협력
          + 기술의 적합성을 유지하면서도 풍부한 경험에서 유연성을 이끌어 내는 것이 중요

여전히 도전적인 부분

  데이터 과학은 반복적이며, 사회적 섹터는 R&D에 대한 투자가 부족함

     * R&D의 본질과 가치
          + 연구 개발은 학습 과정으로, 자본 투자, 실험, 성찰, 실패를 감수할 의지가 필요
          + 확실한 방법과 단기적 접근으로는 사회적 섹터에서 필요한 문제 범위를 해결하기 어렵다는 한계
          + 장기적 투자와 비선형적인 혁신이 주요한 성과를 창출
     * 사회적 섹터의 R&D 투자 부족
          + 2022년 NSF 조사에 따르면, 대형 비영리 단체 중 94%가 R&D 활동을 전혀 수행하지 않음
          + 데이터 과학이 주로 R&D 활동임에도 불구하고, 이 분야에 대한 투자 미비
     * 데이터 과학의 반복적 특성
          + 데이터 과학은 최적의 결과를 창출하고 서비스 효율성을 개선하기 위해 반복적인 학습과 피드백 루프를 활용
          + 하버드 데이터 과학 과정 및 CRISP-DM(데이터 마이닝 표준 프로세스)처럼 반복성을 강조한 프레임워크 활용
     * 인간 중심 데이터 과학의 중요성
          + 학습 과정이 효과적인 솔루션 설계를 중심으로 이루어지며, 반복 가능한 혁신 프레임워크와 결합
          + 인간 중심 설계를 통해 실제 요구와 솔루션 간의 연계성을 강화
     * 민간 기업의 R&D 성공 사례
          + 민간 기업들은 R&D 프로세스를 통해 데이터 활용 가치를 명확히 인지
          + 최근 AI 혁신의 사례는 지속적인 R&D 투자가 없었다면 불가능했을 성과
     * 결론
          + 데이터 R&D 프로젝트의 초기 결과는 불확실하지만, 데이터에서 가치를 창출하는 프로세스 자체는 입증된 방법론
          + R&D에 대한 지속적이고 장기적인 투자는 혁신을 가속화하고 사회적 섹터의 도전 과제를 해결하는 데 필수적

  데이터 과학자를 고용하고 지원하는 것이 어렵고, 혼자 일하는 데이터 과학자는 만족도가 낮음

     * 조직의 관점에서의 어려움
          + 채용
               o 기존 데이터 과학자가 없는 상태에서 적합한 후보자를 식별하고 평가하기 어려움
               o ""데이터 과학자""라는 용어가 다양한 기술과 경험을 포함해 정의가 불명확
          + 인재 유치 및 유지
               o 데이터 과학자에 대한 높은 수요로 경쟁적인 채용 시장 형성
               o 사회적 문제 해결이라는 동기 부여 요소 외에도, 흥미로운 기술 작업, 경쟁력 있는 급여, 전문성 개발 기회를 제공해야 함
               o 초기 단계의 채용에서는 이러한 요소를 갖추기 더욱 어려움
          + 관리 및 지원
               o 문제 범위를 명확히 정의하고 방향성, 인프라, 데이터를 제공해야 데이터 과학자가 생산성을 유지할 수 있음
               o 기술적 배경이 부족하면 작업 난이도를 과소평가하거나 과대평가하기 쉬움
     * 개발자의 관점에서의 어려움
          + 학습 및 성장
               o 데이터 과학은 빠르게 발전하는 분야로, 팀 내에서 배우고 성장할 기회가 중요
               o 코드 리뷰, 모델 피드백, 작업 부담 분담이 어려운 환경에서는 성장 기회가 제한
          + 방향성 및 지원 부족
               o 업무를 제대로 지원받지 못하면 데이터 과학자의 만족도와 생산성이 저하
          + 업무의 즐거움
               o 동료와 문제를 논의하고 해결하는 과정이 업무 만족도를 높임
               o 외부 네트워크에서 이를 해결할 수도 있지만, 조직 내에서의 협력이 더 효율적
     * 변화의 조짐
          + 최근 사회적 섹터 조직에서 자체 데이터 팀을 구성하는 사례 증가
          + DrivenData는 초기 데이터 과학자와 엔지니어 채용, 온보딩, 작업 전환을 지원하는 파트너로 참여
          + 외부 데이터 과학 전문팀과 협력해 유연한 역량을 제공하는 방식이 조직과 데이터 과학자 모두에게 유리
     * 미래 전망
          + 일부 조직이 데이터 팀 구축에 성공하기 시작했지만, 데이터 과학 기술에 대한 수요는 여전히 높음
          + 데이터 팀을 처음부터 구축하는 과제는 지속될 것으로 예상

  오픈소스는 비개발자를 위한 솔루션을 충분히 개발하지 않음

     * 오픈소스의 한계
          + 오픈소스 소프트웨어는 종종 개발자 커뮤니티가 사용자와 동일하기 때문에 효과적으로 발전
          + 기여자들은 자신이 사용할 도구를 개선하기 위해 동기 부여를 받음
          + 그러나 비개발자나 비전문가를 대상으로 한 도구는 이러한 동기가 작용하지 않음
     * 비전문가 대상 도구의 과제
          + 데이터 과학 프로젝트에서 비개발자를 위한 방법론과 도구를 개발하는 경우 많음
          + 오픈소스로 공개하더라도 지속적 투자와 개발이 이루어지지 않으면 프로젝트가 정체되거나 중단
          + 실질적으로 성공적인 솔루션으로 발전하려면 프로토타입 단계 이후 추가 개발과 현실적인 파일럿 테스트가 필요
     * 구체적 사례: Concept to Clinic
          + 2017-18년, AI를 활용해 방사선사가 CT 스캔을 처리하도록 돕는 오픈 애플리케이션 개발
          + 기여를 유도하기 위해 기여자들에게 포인트와 금전적 보상을 제공하는 구조적 인센티브 시스템 도입
          + 이러한 접근이 없었다면 프로젝트 개발이 불가능했을 가능성이 높음
     * 지속 가능한 오픈소스 성공을 위한 요건
          + 단순히 오픈소스로 공개하는 것만으로는 장기적 영향력 보장 불가능
          + 프로토타입에서 최종 사용자 대상 솔루션으로 발전하기 위해 명확한 로드맵과 지속적 자금 지원 필요
          + 중요한 애플리케이션을 개발할 때 오픈소스는 여정의 일부일 뿐, 최종 목표가 되어서는 안 됨

  기술 과장이(hype wave) 지나치게 주목받음

     * 사회적 섹터와 기술 혁신
          + 사회적 섹터는 지난 10년 동안 새로운 기술 혁신의 물결과 밀접하게 연관됨
          + 조직은 제한된 자원 내에서 효율성을 높이고자 새로운 기술을 도입하려는 유혹을 받음
          + 최신 기술 동향을 따라가지 않으면 뒤처질 것이라는 압박으로 전략을 자주 변경
     * 과장된 기술 도입의 문제점
          + 기술 과장에서 핵심적인 혁신 요소를 선별해내기 어려움
          + 기술 도입이 과도한 기대와 미흡한 실행으로 이어지는 경우 많음
          + 예:
               o 블록체인: 높은 기대치에 비해 사회적 섹터에 실질적인 혜택은 미미
               o 모바일 앱: 반드시 필요하지 않은 경우에도 ""필수""라는 압박으로 비효율적 비용 지출
     * 전문 기술 조직의 중요성
          + 기술 과장을 효율적으로 다룰 수 있는 기술 전문가 조직이 가장 높은 성과를 냄
          + DrivenData는 DataKind, DSSG Fellowship, Delta Analytics 등과 협력하며 기술 전문성을 활용
          + 그러나 이러한 전문가 그룹도 과거 기술 과장에서 얻은 교훈을 체계적으로 축적하기 어려움
     * 필요한 변화: 기술 과장을 다루는 ‘방파제’
          + 과도한 기대에서 실질적인 혁신을 분리하고 핵심 발전 사항을 식별할 역량 필요
          + 최첨단 기술에 대한 이해와 사회적 섹터에 대한 깊은 통찰을 겸비한 기술 리더십이 필수
          + 이러한 리더십과 생태계가 현재 부족하며, 이를 통해 지속적이고 성숙한 접근 방식 구축 필요
     * AI와 같은 최신 기술에 대한 전략적 접근
          + AI의 잠재력은 방대하지만 단순한 열광이 아닌 신중한 전략과 깊은 전문성 요구
          + 데이터 기반의 탄탄한 기초를 구축하지 않으면 기술 과장이 반복되는 비효율적인 사이클로 이어질 위험
          + 근본적인 투자와 계획 없이는 사회적 섹터의 기술 혁신이 진정한 성과를 내기 어려움

  데이터 과학과 AI는 윤리적 함의가 크지만, 급격한 도입이 이를 지원하는 도구와 관행을 앞지름

     * 데이터 과학과 AI의 확대와 윤리적 중요성
          + 데이터 과학과 머신러닝은 의료, 재난 대응, 형사 판결 등 다양한 분야에 통합됨
          + 잘못된 활용 시 초래되는 위험이 이전보다 훨씬 커짐
     * 윤리적 고려가 부족한 현실
          + 데이터 과학자들은 모델과 파이프라인의 윤리적 함의를 이해하는 독특한 관점을 지님
          + 그러나 이러한 관점은 데이터 과학 프로젝트의 생애 주기에 통합되지 않는 경우가 많음
     * 윤리적 트레이드오프를 다루기 위한 오픈소스 체크리스트 개발
          + 윤리적 트레이드오프를 논의할 수 있도록 데이터 과학 워크플로에 통합
          + 주요 원칙:
               o 윤리적 결정은 특정 맥락에서 가장 중요한 트레이드오프를 인식하고 책임감 있는 진행과 피해 최소화를 목표로 해야 함
               o 데이터 수집, 저장, 분석, 모델링, 배포 등 프로젝트 전 단계에서 윤리적 문제가 발생
               o 윤리적 논의는 급박한 일정과 요구로 인해 종종 우선순위에서 밀려남
               o 이를 방지하려면 윤리적 질문을 워크플로의 다른 측면에 통합하고 시간을 의도적으로 할당해야 함
     * 알고리즘 공정성과 편향 완화
          + 편향된 데이터를 학습한 모델은 불평등을 재생산하므로 이를 식별하고 완화하려는 기술 개발 중
          + 예: Wellcome Trust와 협력해 심리적 스트레스 예측 모델에서 공정성을 고려한 편향 완화 사례 제작
               o 정량화된 공정성 지표를 통해 편향을 분석하고 완화 방법 제공
     * AI 시대 윤리적 고려의 중요성
          + AI의 빠른 확산과 동시에 기업들이 비용 절감을 위해 책임 있는 AI 팀을 해체
          + 사회적 섹터에서는 수혜자에 대한 책임감이 높아 윤리적 실패의 대가가 더 큼
          + 윤리적 관행을 강화하지 않으면 AI 도입이 더 큰 문제를 초래할 위험이 있음
     * 결론
          + AI 도입을 지원하는 윤리적 도구와 관행의 구축이 그 어느 때보다 중요
          + 기술의 책임감 있는 활용을 통해 사회적 섹터에서 신뢰와 지속 가능성을 보장해야 함

앞으로의 전망

     * 데이터 과학의 변화와 기회
          + 지난 10년간 데이터 과학은 사회적 섹터에서 중요한 변화를 이끌며 성공과 과제를 동시에 경험
          + 데이터와 AI의 잠재력에 대한 인식이 높아졌지만, 여전히 해결해야 할 큰 질문이 존재:
               o 지속적인 기술 발전을 어떻게 가장 큰 사회적 문제에 실질적으로 적용할 것인가?
               o 혜택이 소수 대기업에만 집중되지 않도록 어떻게 보장할 것인가?
               o 자연과 인류를 위한 책임감 있는 기술 배치를 어떻게 실현할 것인가?
     * 경험에서 얻은 교훈의 중요성
          + 과거 경험에서 얻은 교훈을 기반으로 한 노력이 가장 큰 성과를 냄
          + DrivenData는 데이터와 AI를 사회적 선을 위해 사용하는 파트너, 클라이언트, 개발자 커뮤니티의 일원이 된 것을 자랑스럽게 여김
          + 유사한 주제에 관심이 있거나 추가적인 아이디어가 있다면 공유를 환영
     * 미래를 향한 기대
          + 지난 10년이 눈부셨던 만큼, 앞으로의 10년은 더욱 큰 변화를 가져올 것으로 예상
          + 해야 할 일이 많으며, 배워야 할 것도 많음
          + 이러한 도전에 맞서 새로운 가능성을 모색하고, 더 나은 사회적 영향을 창출할 미래를 기대

   ""내 세대의 최고의 인재들이 사람들에게 광고를 클릭하도록 만드는 데 생각을 쏟고 있다… 정말 답답하다.""

   정말 생각 해 보니 그렇겠네요.
"
"https://news.hada.io/topic?id=18869","둠 스크롤링과의 고군분투","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             둠 스크롤링과의 고군분투

  나의 둠 스크롤링과의 싸움

   몇 달 전, 나는 휴대폰에서 많은 앱을 삭제하고, 무분별한 스크롤링 중독을 제어하기 위해 여러 제한 앱을 설치했음.

    상호 연결된 현실과의 싸움

     * 전자 기기에는 탈출구가 너무 많음
          + 콘텐츠 앱: Instagram, YouTube, TikTok 등
          + 업무 앱: Slack, Workplace 등
          + 이러한 앱들은 웹에서도 사용 가능하여, 브라우저가 있으면 언제든지 접근 가능함
          + 업무용 노트북에서도 쉽게 로그인 가능함
     * 모든 것이 항상 연결되어 있어, 미루기 쉬운 사람들은 자연스럽게 빠져들게 됨

    항상 콘텐츠와 스크롤링 수단이 필요한가?

     * 아마도 필요하지 않음. 실험해보기로 함.

      해결책

     * 콘텐츠 앱 삭제
          + 엔터테인먼트: YouTube, TikTok, Instagram, Reddit
          + 정보 데이터베이스: GoodReads, StoryGraph, IMDB
          + 메시징: Gmail, Slack
     * 휴대폰에서 브라우저 삭제
          + Chrome 비활성화, Android에서는 삭제 불가
          + Google 앱 비활성화
     * 업무용 노트북에서 개인 프로필/브라우저 삭제
          + 개인 Google 계정 프로필로 사용하던 ""Arc"" 브라우저 삭제

      초기 문제점

     * 업무용 노트북에서 개인 공간으로 링크/콘텐츠 공유가 어려워짐
     * 개인 계정으로 사용하던 서비스 접근 불가
     * Chrome 브라우저와 Google 앱 삭제로 인한 문제 발생
          + 일부 앱이 Google 앱에 의존함
          + 웹 앱이 더 나은 경우도 있었으나, 브라우저가 없어 사용 불가
          + 은행 이체 등 인증에 브라우저 필요
          + 이메일 앱 없이 티켓이나 영수증 접근 어려움

    현재 상황

     * 업무용 노트북에서 개인 계정 브라우저 삭제 성공
          + 사소한 불편함에 익숙해짐
          + 프로페셔널 워크플로우에서 미루기 도구 제거
     * 휴대폰에서 업무 피드 삭제 성공
          + Slack, Gmail, Workplace 앱이 항상 필요하지 않음을 깨달음
          + 건강한 업무 경계 설정에 도움
     * 휴대폰에서 콘텐츠 앱 삭제 성공
     * 브라우저 앱 삭제는 문제 발생
          + 일부 일상 작업 방해
          + 브라우저 앱 복원, 새로운 제한 설정

      이후 수정

     * 브라우저 없는 문제 해결을 위한 조치
          + 최소한의 런치 UI로 습관 깨기
          + 더 발전된 웹사이트 차단기와 소셜 미디어 및 브라우징 웹사이트 제한 설정
          + Chrome 대신 새로운 브라우저 사용

  결과

     * 몇 달간의 변화와 조정 후, 효과를 보고 있음
     * 여전히 미루지만, 기기가 더 이상 나를 유혹하지 않음
     * 대안 선택이 쉬워짐
     * ""Spelling Bee"" 같은 게임을 즐기며, 무한 콘텐츠 앱 대신 읽기를 선택할 수 있게 됨
     * 미디어 소비 중독을 제한하는 새로운 방법을 계속 찾아야 하지만, 노력에 만족함
     * 효과가 있을 때, 더 차분하고 내가 즐기는 일을 할 수 있음

        Hacker News 의견

     * 앱을 사용하여 다른 앱을 차단하는 것은 효과가 없었음. 대신, 밤에 다른 방에서 휴대폰을 충전하는 것이 더 효과적이었음. 이렇게 하면 하루에 한 번만 결정을 내리면 되고, 인터넷에 쉽게 접근할 수 없게 되어 더 많은 시간을 효율적으로 사용할 수 있었음. 1980년대 스타일의 화면 없는 휴대폰을 원하게 됨.
     * 지난 12개월 동안 e-ink 기기로 독서를 하면서 정신을 유지할 수 있었음. 소셜 미디어 앱을 휴대폰에서 제거하고 Firefox와 uBlock을 사용하여 앱 설치를 막는 것이 도움이 되었음. 무한 스크롤 사이트를 피하고, 감정적 반응을 유도하는 콘텐츠를 인식하는 것이 중요함. 도서관 카드를 얻어 독서를 추천함.
     * 모든 것을 차단하는 앱이 필요하다고 생각함. 차단기를 사용하면 도움이 되지만, 결국 다시 빠져들게 됨. 유용한 정보와 함께 유해한 클릭베이트가 항상 존재함. 상상력을 방해하는 소셜 미디어를 피하고, 내재적으로 동기부여되는 것에 집중해야 함.
     * 현대 생활에서 최소한의 연결성 기준이 필요할 수 있음. 모든 것을 삭제하는 전략은 실패할 수 있음. 주의 분산을 막기 위해 높은 활성화 에너지를 설정하고, 유용한 기능에는 낮은 마찰을 유지하는 것이 중요함. 지속 가능한 균형은 디지털 금욕이 아닌, 신중하게 설계된 마찰 차이에 있을 수 있음.
     * 'doom scrolling'이라는 용어가 부정적인 감정과 관련이 있다고 생각하지 않음. 스트레스나 불안을 피하기 위해 스크롤을 하는 경우가 많음.
     * 최근에는 Facebook의 'shorts'나 'reels'에 시간을 낭비하게 됨. 이러한 습관을 버리려고 하며, Facebook을 버리면 이러한 충동이 줄어들 것임.
     * 'doom scrolling'을 멈추기 위해 앱을 개발했음. 다양한 소스의 콘텐츠를 모아 일일 요약을 제공하여 중독을 줄일 수 있었음.
     * 강압적인 방법은 지속 가능하지 않음. 'one-sec' 확장 프로그램을 사용하여 앱을 열기 전에 잠시 멈추고 심호흡을 하게 함. 이러한 부드러운 유도가 더 효과적임.
     * 자기 제한은 효과적이지 않음. 'doom scrolling'을 멈추려는 욕구는 내재적이어야 함.
     * Mudita Kompakt나 Light Phone 2 같은 휴대폰으로 바꾸는 것이 큰 변화를 가져올 수 있음.
"
"https://news.hada.io/topic?id=18842","Brisa - 웹 플랫폼 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Brisa - 웹 플랫폼 프레임워크

     * 각종 프레임워크의 좋은 부분을 가져와서 빠르고 간단하게 웹 앱을 만드는게 목표
          + JSX, TypeScript, 서버/웹 컴포넌트, Server Actions, SSR, 스트리밍, Suspense, Signals, 웹소켓, 미들웨어, 레이아웃,..
     * 매우 작음: 기본으로 0바이트(동적 서버렌더링 되는 JSX 컴포넌트로 기본적으로는 브라우저에 보내는 자바스크립트 없음)
          + 서버액션 사용시 2kb, 웹 컴포넌트 사용시 3kb
     * 풀 i18n 지원
     * Tauri와 연동되어 간단한 설정 변경으로 안드로이드, iOS, 데스크톱 용 앱 가능

Web Platform Framework의 의미

     * 서버와 클라이언트를 웹 플랫폼(Web Platform)으로 통합하려는 개념임
     * 서버에서 브라우저 이벤트(폼 전송, 클릭, Web Component 이벤트 등)를 직접 수신해 처리할 수 있게 하는 구조
     * HTTP를 통한 하이퍼미디어 스트리밍을 통해 탐색이나 서버 액션 요청 시, DOM 변경이 전송되어 클라이언트에서 즉각 반영됨
     * 웹의 고유 기능을 클라이언트와 서버 간에 원활히 사용하도록 돕는 플랫폼으로 설명 가능
     * Web Components와의 관계
          + Declarative Shadow DOM과 시그널(signals)을 통해 Web Components를 쉽게 사용 가능함
          + DOM 속성 업데이트, 시그널 반응 방식을 통해 클라이언트와 서버가 긴밀히 상호작용함
          + 꼭 Web Components를 사용하지 않아도 전통적 MPA와 유사한 방식으로 동작 가능함
          + 그러나 사용자 인터랙션이 클라이언트에서만 처리될 필요가 있을 때 Web Components로 대응할 수 있음
     * Brisa의 철학과 목표
          + 서버에서의 작업을 최소화하면서도, 필요한 경우 Web Components 같은 웹 네이티브 기능을 통합해 사용할 수 있도록 돕는 것을 지향함
          + 클라이언트 사이드 부담을 줄이고, 서버와 브라우저가 긴밀히 결합된 확장 가능한 앱을 구축하도록 안내함
          + 빠른 성능과 생산성을 위해 웹 표준 기술 활용을 중시하며, 개발자가 어떤 스택을 쓰든 간에 Brisa로 고급 인터랙티브 기능을 만들 수 있도록 돕는 비전을 갖춤
"
"https://news.hada.io/topic?id=18872","WhoDB - 가볍고 강력한 데이터베이스 관리 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      WhoDB - 가볍고 강력한 데이터베이스 관리 도구

     * 20MB이하로 가볍지만 강력한, 사용자 친화적 데이터베이스 관리 도구
          + PostgreSQL, MySQL, SQLite3, MongoDB, Redis, MariaDB, ElasticSearch
     * 복잡한 SQL 작성 대신 자연어로 데이터 쿼리 및 관리 가능 : Ollama, ChatGPT, Anthropic과 통합
     * 프론트엔드 테이블 가상화 지원
     * 데이터베이스 스키마를 그래프로 시각화
     * 인터페이스에서 직접(인라인) 데이터 수정 및 결과 미리보기
     * Scratchpad: Jupyter Notebook 스타일의 데이터베이스 쿼리 인터페이스
     * Go로 개발되어 빠르며, Docker를 사용하여 쉽게 설치 가능
     * 다른 도구와의 관계
          + Adminer에서 영감을 받아 경량성과 사용 편의성을 기반으로 UX와 데이터 시각화를 강화한 툴을 목표로 개발
          + DBeaver는 풍부한 기능을 제공하지만 리소스 요구량이 높은 반면, WhoDB는 가볍고 효율적이며 작은 환경에서도 잘 작동

   프롬프트는 여기에 정의되어 있습니다: https://github.com/clidey/whodb/blob/main/core/src/common/chat.go 자연어를 통한 명령은 정말 간단한 수준으로 구현되어 있는데
   ollama phi4로 연결해서 간단히 DB 구성 해서 명령내려봤는데 10개 정도의 명령이 제대로 실행됐네요. 이건 누구를 칭찬해야 될지 모르겠네요.

   데모를 써 봤는데 개선점이 꽤 많이 보이네요. 강력하다고 자평하기에는 아직 갈 길이 많이 멀어 보입니다
    1. 테이블 뷰에서 셀 클릭시 셀 데이터가 복사됩니다. 커서 호버시 셀 내부 우측에 펜 아이콘이 나타나서 셀 클릭시 편집이 될 것으로 기대했는데 정작 동작은 그렇지 않습니다. 펜 아이콘을 정확히 눌러야 셀 편집모드로 전환됩니다.
    2. 셀 편집 모드가 모달로 표시되고 입력 textarea가 지나치게 크게 표시되어 입력 플로우를 유지하는 데에 어려움이 있습니다. 모달보다 인라인 편집 기능이 낫다고 생각합니다
    3. 행 단위로 데이터를 수정할 수 없습니다
    4. 정말 사소한 문제이긴 한데 다크모드 전환 스위치의 레이블이 스위치 상태에 의해 변경됩니다. 끈 상태는 Light Mode, 켠 상태는 Dark Mode로 표시됩니다. 토글 스위치의 레이블은 바뀌지 않는게 맞지 않나 싶습니다

   핵심기능 리스트를 다시 보니 인라인 편집이 명시되어 있네요. 프로젝트 설명에 적힌 인라인 편집이 뭔지 아리송합니다

   LLM을 통해 자연어로 명령을 내리는건가요?
   실DB에다가는 못 쓰겠군요...

   일반적으로 sql 을 생성할땐 테이블 구조나 괸계, 필드 설명 등을 사용합니다 그래서 내 데이터가 학습될 일은 없을 듯해요 또한 OpenAI API는 요청 데이터로 학습하지 않는다라는 내용이 있어요 그럼에도 불안하시면 로컬 LLM 을 사용하시면 될 것 같네요👏

   앗 사용해보니 쿼리를 만드는 방식이 아니군요 😂 실DB에서의 사용은 진짜 어렵겠네요

   민감한 작업, 특히 데이터를 수정/삭제하거나 테이블 구조 변경같은 작업을 자연어로 LLM을 통해 하는건 아직은 매우 위험해 보여요.
   결국 실행전 생성된 SQL을 검토해야할것 같아요.

   원 댓글의 요지는 그게 아닌것같습니다.
   운영중인 db에서는 select 만으로도 부하 및 lock등으로 인해서 장애가 발생할 수 있는데, llm을 통해서 도출된 쿼리를 바로 사용할때 리스크가 있다는 의미로 말씀하신것같슴니다.
"
"https://news.hada.io/topic?id=18892","Gomponents - 순수 Go로 작성된 HTML 컴포넌트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Gomponents - 순수 Go로 작성된 HTML 컴포넌트

     * 익숙한 Go언어를 이용하여 HTML5로 렌더링되는 재사용 가능한 컴포넌트를 구축할 수 있음
     * 타입 안전성:
          + 컴파일러에서 타입 체크
          + IDE 자동 완성 지원
          + Go 표준 디버거로 손쉬운 디버깅
          + gofmt 및 goimports로 자동 포맷팅
     * 간단한 API: HTML을 알고 있다면 쉽게 사용 가능
     * 유용한 도우미 함수:
          + Text, Textf: HTML 이스케이프된 텍스트 삽입
          + Raw, Rawf: 원시 문자열 삽입
          + Map: 데이터 매핑
          + Group: 컴포넌트 그룹화
          + If, Iff: 조건부 렌더링
     * 외부 의존성 없음
     * 성숙하고 안정적인 코드베이스 (호환성 유지)
"
"https://news.hada.io/topic?id=18871","연방 법원, 백도어 검색의 데이터 수집 위헌 판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      연방 법원, 백도어 검색의 데이터 수집 위헌 판결

     * 연방 법원의 판결
          + 연방 지방법원은 미국인의 사적 통신이 포함된 데이터베이스에 대한 백도어 검색이 일반적으로 영장을 필요로 한다고 판결함.
          + 이 판결은 United States v. Hasbajrami 사건에서 나왔으며, 10년 이상의 소송 끝에 이루어짐.
          + 제2순회항소법원은 백도어 검색이 ""별도의 제4차 수정헌법 사건""이라고 판단하고 영장이 필요하다고 지시한 바 있음.
     * Section 702의 재승인
          + 의회는 Section 702를 여러 차례 재승인했으나, FBI와 정보 기관이 영장 없이 수집된 메시지와 데이터를 남용한다는 증거를 무시함.
          + 외국정보감시법원(FISC)은 백도어 검색이 제4차 수정헌법을 위반한다는 주장을 반복적으로 기각함.
     * 정부의 데이터 사용 방식
          + FISA Section 702는 해외에서 대량의 통신 데이터를 수집할 수 있도록 허용함.
          + 미국 내 인물과의 통신도 수집되어 연방 법 집행 기관이 검색할 수 있는 대규모 데이터베이스에 보관됨.
          + 정부는 이러한 데이터가 이미 수집되어 있으므로 영장 없이 검색할 수 있다고 주장함.
     * EFF의 주장
          + 전자프런티어재단(EFF)은 이러한 관행이 위헌이라고 주장해왔으며, 이번 판결로 연방 법원이 이에 동의함.
     * Hasbajrami 사건
          + 2011년 뉴욕 JFK 공항에서 체포된 미국 거주자가 테러리스트 지원 혐의로 기소됨.
          + 정부는 그의 유죄 판결 후에야 Section 702 프로그램을 통해 수집된 이메일이 사건의 근거였음을 설명함.
     * 법원의 결정
          + 법원은 정부가 외국인과 미국인 간의 통신을 영장 없이 수집할 수 있더라도, FBI가 이러한 통신을 검색할 때 ""외국 정보 예외""에 의존할 수 없다고 판단함.
          + 이러한 검색이 제4차 수정헌법에 따라 ""비합리적""이라고 판단함.
     * 의회와 FISC에 대한 요청
          + 의회는 Section 702를 갱신하지 말고, 미국인 데이터 검색에 대한 공식적인 영장 요구와 투명성 증가를 포함한 개혁을 요구함.
          + FISC는 백도어 검색에 대한 규칙을 수정하고 FBI가 검색 전에 영장을 요청하도록 해야 함.

        Hacker News 의견

     * 정부가 Section 702 스파이 행위를 중단하더라도, 감시 능력을 확장할 것이라는 우려가 있음
          + 시스템의 무결성을 믿기 어렵다는 의견
     * 정부가 권력을 남용하고 비밀을 영구히 보유하는 것을 멈춰야 한다는 주장
     * Apple과 Google의 백도어가 없는 오픈 하드웨어 제작 필요성 제기
     * Rust로 소프트웨어를 작성하고 보안에 설계되지 않은 언어 사용을 중단해야 한다는 의견
          + C 언어의 아름다움 인정, 그러나 보안 문제 지적
     * 검열을 피하고 개인 정보를 부유층의 손에 맡기지 않기 위해 분산 시스템 사용 필요성
     * 연방 기관들이 법을 위반하고 불법적인 입법을 계속할 것이라는 우려
          + EFF가 지속적인 압력이 필요하다고 암시함
     * 정보 기관이 불법이라 해도 갑자기 멈추지 않을 것이라는 회의적인 시각
          + 정보 기관에 반대하는 정부 인사들이 위험에 처할 수 있다는 경고
     * SCOTUS가 메타데이터 보호 전통이 없다고 판단할 가능성
          + 정부의 강력한 이익이 제4차 수정헌법을 극복할 수 있다고 해석될 수 있음
     * FBI를 폐지해야 한다는 주장
          + 법 위에 있다고 믿고 미국인의 적이 되어왔다는 비판
"
"https://news.hada.io/topic?id=18820","OpenAI의 지원을 받은 FrontierMath 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenAI의 지원을 받은 FrontierMath 프로젝트

     * 최근 OpenAI가 새 모델 o3를 공개하며 수학 분야에서 획기적 성능을 달성했다고 발표함
     * 특히 이전 모델이 2% 해내던 FrontierMath 벤치마크에서 25%를 달성해 큰 주목을 받음
     * 발표 이후 이 벤치마크 구성 과정과 관련해 투명성이 부족했다는 지적이 나왔음
     * 이를 통해 미래 AI 벤치마크와 평가, 안전성 논의에 교훈을 얻을 수 있음

사건 개요

     * 2024년 11월 전, Epoch AI에서 수학 평가용 벤치마크 FrontierMath를 구축하기 시작함
     * 외부 수학자들에게 문제를 의뢰하며 약 300~1000달러로 보상함
     * 당시 누가 자금을 대고, 누가 문제와 해답을 볼 수 있는지 명확히 알리지 않았음
     * 2024년 11월 7일, Epoch AI가 arxiv에 첫 번째 논문 버전을 공개했는데, 여기에는 자금 출처가 전혀 언급되지 않음
     * 2024년 12월 20일, OpenAI가 o3 모델을 공개했는데, FrontierMath에서 25%를 달성했다는 발표를 함
     * 같은 날 Epoch AI 논문의 v5가 arxiv에 업데이트되었고, 여기서 OpenAI가 전액 후원했으며 대부분의 어려운 문제와 해답에 접근 가능하다고 공개함

추가 세부 사항

     * 12월 업데이트 직후에도 이 문제에 대한 우려가 있었고, 최근 더욱 관련된 정보가 알려졌음
     * FrontierMath는 (a) 올림피아드 수준(25%), (b) 중간 난이도(50%), (c) 전문가가 여러 주가 필요한 수준(25%)로 난이도를 나눔
     * o3가 25%를 달성했다는 발표에서, 어떤 난이도 문제를 주로 풀었는지가 공개되지 않았다는 점이 오해를 일으킬 수 있음
     * OpenAI가 모든 문제와 해답에 접근했으나, 구두 합의에 따라 이 데이터셋을 직접 학습에 사용하지 않았을 것으로 추정됨
     * 그러나 누구도 내부적으로 어떤 방식으로 모델이 학습되고 있는지 정확히 알기 어렵다는 지적이 있음

다른 문제가 되는 이유

     * FrontierMath 문제들을 소유·접근할 수 있으면, 모델의 성능 향상에 간접적으로 도움될 가능성이 있음
     * 특히 공개되지 않은 고난도 문제를 통해 모델 검증이나 탐색 기법을 정교화할 수 있다는 우려가 제기됨
     * 25% 달성 발표가 실제로 어려운 문제 풀이 능력을 의미하는지, 아니면 쉬운 문제 위주로 푼 것인지는 불분명함

명시적 훈련 없이도 능력을 높일 수 있는 데이터셋

     * o3의 내부 구조는 잘 공개되지 않았으나, 일부 다른 연구들이 “추론 단계에서 규모를 확장하는 방식”을 채택하고 있음
     * MCMC 기반 체인오브소트(Chain-of-thought) 평가를 자동으로 학습하거나, 중간 단계에 보상 모델(PRM)을 붙여 탐색을 강화한다는 연구가 소개됨
     * FrontierMath 같은 어려운 벤치마크는 이러한 보상 모델 검증에 유용할 수 있음
     * 다시 말해 직접 학습에 쓰지 않아도, 모델 탐색 전략이나 검증 기법을 튜닝하는 데 사용될 여지가 있음
     * 독립적이고 공정한 평가 목적이라면, 한 번만 평가하고 다른 용도로 사용하지 않는 편이 바람직하다는 의견이 나옴

AI 안전성 우려

     * Epoch AI는 AI의 발전 추세를 추적하고 안전을 고민하는 단체로 알려져 있음
     * FrontierMath에 문제를 제공한 수학자 중에는, 오히려 AI 능력 향상을 위해 이용될 줄 몰랐다면 기여하지 않았을 사람도 있을 가능성이 있음
     * 결국 OpenAI가 원치 않는 사람들에게서 간접적으로 문제를 마련해 모델을 검증·개발한 셈이 된다는 지적임
     * 이러한 불투명성은 AI 안전이나 연구 윤리 측면에서 우려를 낳음


AI Safety Researcher인 meemi의 댓글

     * FrontierMath가 OpenAI 자금을 받았음
     * 이 사실이 12월 20일 이전에는 외부에 투명하게 공개되지 않았다는 지적이 있음
     * Arxiv에 올라간 초기 버전(v1–v4)들은 OpenAI 지원에 대한 언급이 없었고, 12월 20일 이후 공개된 버전에서 비로소 언급되었다는 배경임
     * Epoch AI가 OpenAI와 어떤 합의를 했는지는 명확히 알려지지 않았지만, o3 발표(12월 20일) 시점 전까지는 자금 지원 사실을 비공개로 유지했을 가능성이 제기됨
     * 수학 문제 제작에 참여한 수학자들에게는, OpenAI 자금 지원 사실이 (적극적으로) 전달되지 않았다고 언급됨
     * 계약직 참여자들은 NDA를 체결하고 문제와 해답을 메일이나 Overleaf 등으로 공유하지 못하게 하는 등 보안을 엄격히 유지했음
     * 다만 이들에게 OpenAI의 자금 지원 사실이나 데이터 활용 가능성은 명확히 전달되지 않았다는 지적이 있음
     * 일부 저자들조차도 OpenAI가 펀딩한다는 사실을 몰랐을 수 있다는 주장이 나옴
     * 대부분 사람들과 계약직 참여자들은 “이 벤치마크의 문제와 답은 전적으로 비공개로 유지되며, 오직 Epoch만 사용한다”는 인식을 가졌던 것으로 보임
     * 현재 Epoch AI나 OpenAI는 공개적으로 “OpenAI가 문제나 해답에 접근한다”는 사실을 밝히지 않고 있으나, 실제로는 OpenAI가 이를 활용한다는 소문이 있음
     * 이 데이터셋을 학습용으로 활용하지 못하도록 제한하는 명시적 합의가 있는지 불투명하다는 언급이 있음
     * 결과적으로, 자금 지원 및 데이터 활용 가능성에 대해 명확하게 공개하고, 문제를 제작하는 계약직에 충분한 정보를 제공했어야 한다는 비판적 시각이 존재함


Epoch AI 소속 Tamay의 댓글

     * Epoch AI 소속 Tamay가 직접 투명성 문제를 인정함
          + OpenAI의 관여 사실을 o3 출시 전까지 공개할 수 없었던 계약 조건이 존재했음
          + 이후 투명성이 부족했다는 점을 시인하며, 기여자들에게 더 일찍 정보를 제공해야 했다고 언급함
          + 자금 출처와 데이터 접근 권한에 대해 명시적으로 전달할 수 없었던 부분에 대해 자체적인 잘못을 인정함
     * 향후 협업에서의 투명성 개선 약속
          + 향후에는 기여자들이 처음부터 자금 출처와 데이터 접근, 사용 의도를 명확히 알 수 있도록 노력할 것임
          + 일부 수학자들에게는 연구실 자금을 받는다고 언급했지만, 체계적으로는 전달되지 않았음
          + 특정 연구실 이름(즉, OpenAI)을 밝히지 않고 진행한 점이 문제였다고 봄
          + 처음부터 이러한 협력 관계를 공개하기 위해 더 강하게 협상했어야 했다고 언급함
     * o3 출시 시점까지 공개가 제한된 문제
          + 계약상 의무로 인해 OpenAI와의 파트너십을 o3 출시 즈음까지 공개하지 못했던 상황이었음
          + 문제를 만드는 수학자들은 자신의 작업이 누구에게 전달될 수 있는지 알 권리가 있었음
          + 계약으로 인해 기여자에게 제대로 설명하지 못한 것을 반성함
     * 데이터 접근과 훈련 사용 가능성
          + OpenAI가 FrontierMath 문제와 해답 중 상당 부분에 접근 가능함
          + 다만 훈련 용도로 활용하지 않겠다는 구두 합의가 있다고 말함
          + OpenAI 직원들은 FrontierMath를 “강력히 보유 중인 테스트 세트(strongly held out set)”라고 공개적으로 언급함
          + 실제로 독립 검증용으로 OpenAI가 접근하지 못하는 별도의 holdout 세트가 존재함
          + 이로써 과도한 모델 훈련이나 오버피팅을 방지하고, 객관적 성능 측정을 유지하고자 함
     * FrontierMath의 원래 목적
          + 애초에 FrontierMath는 평가용으로 기획·발표된 프로젝트였음
          + OpenAI 역시 실질적인 테스트 세트를 유지하는 결정에 지지를 보였다고 함
          + 학계와 연구실 모두 진정으로 오염되지 않은(훈련에 사용되지 않은) 테스트 세트를 확보하는 것이 중요하다고 강조함
     * [수정] OpenAI의 데이터 접근 범위
          + 오해를 줄이기 위해, OpenAI는 최종적으로 독립 검증을 위한 별도의 holdout 세트에는 접근 권한이 없다는 점을 명시함

        Hacker News 의견

     * 구두 합의가 모델 훈련에 사용되지 않을 것이라는 약속이 있었음에도 불구하고, 이러한 합의는 종종 위반될 수 있음을 지적함
          + OpenAI가 벤치마크 데이터를 접근할 수 있었지만, 구두로만 훈련에 사용하지 않겠다고 합의한 점에 대해 회의적인 시각을 가짐
     * Epoch 공동 창업자가 OpenAI가 FrontierMath 문제와 솔루션에 접근할 수 있음을 인정했지만, 구두 합의로 훈련에 사용하지 않기로 했음을 언급함
          + 구두 합의의 신뢰성에 의문을 제기하며, OpenAI가 기술적으로 합의를 준수하면서도 벤치마크에서 부당한 이점을 얻을 수 있는 방법이 많음을 지적함
     * OpenAI의 마케팅을 그대로 믿는 사람들에 대한 비판
          + Sora 데모가 수작업 편집을 포함했음에도 불구하고 이를 언급하지 않은 사례를 예로 듦
     * Epoch AI의 Tamay가 OpenAI의 참여에 대해 더 투명하지 못했던 점을 인정함
          + 계약상 정보 공개가 제한되었고, 벤치마크 기여자들에게 더 빨리 투명성을 제공하기 위해 더 강하게 협상했어야 했음을 후회함
     * OpenAI의 벤치마크 결과가 신뢰를 잃었으며, 다른 AI 회사들이 FrontierMath에서 중요한 결과를 얻을 기회를 가졌음을 언급함
     * LLMs나 AI가 실제로 똑똑한지 확인하려면 질문이 훈련 세트에 포함되지 않았음을 증명해야 한다고 주장함
          + 질문이나 답변이 훈련 세트에 포함되지 않았음을 알지 못한다면 AI가 똑똑하다고 주장하지 말아야 함
     * 벤치마크를 고의적으로 속이지 않더라도 반복적으로 같은 테스트를 받으면 과적합이나 p-해킹이 발생할 수 있음을 지적함
          + 작은 변화가 실제 개선인지 노이즈인지 판단하기 어려울 수 있으며, 연구자들이 노이즈에 기반하여 최적화를 발견했다고 믿을 수 있음을 설명함
     * OpenAI가 대중을 오도하는 것에 대한 불쾌감을 표현함
          + CEO의 행동이 FrontierMath와 Epoch AI의 평판을 망칠 것임을 언급함
     * AI 회사들이 자체 평가를 구축할 가능성이 높아지고 있으며, 공공 벤치마크는 소진되었고 더 많은 프론티어 벤치마크에 투자해야 할 필요성을 강조함
     * AI 회사들이 제시하는 평가 결과는 신뢰할 수 없다고 주장함
"
"https://news.hada.io/topic?id=18903","Show GN: Node.js 환경에서 Clang을 이용한 C, C++, Java, JavaScript 포매터를 개발하였습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: Node.js 환경에서 Clang을 이용한 C, C++, Java, JavaScript 포매터를 개발하였습니다.

     * 깃허브 레포지토리: https://github.com/lumirlumir/npm-clang-format-node
     * 공식문서 홈페이지: https://clang-format-node.lumir.page/


   안녕하세요!

   Node.js 환경에서 Clang을 활용한 C, C++, Java, JavaScript 포매터를 개발하였습니다. 이 프로젝트는 더 이상 유지 보수되지 않는 Angular의 clang-format 패키지를 기반으로 새롭게 시작된 프로젝트입니다.

   두세 달 전에 비슷한 내용을 공유했었는데, 이번에 v1.3.0 버전을 배포하며 사용자분들이 더욱 쉽고 편리하게 사용할 수 있도록 상세한 문서 사이트를 추가했습니다. 문서 사이트는 여기에서 확인할 수 있으며, 기본 설치 방법부터 이 패키지를 사용해야 하는 이유까지 다양한 내용을 담고 있으니 관심 있으신 분들은 참고해주시면 좋을 것 같습니다.

   이번 업데이트에서는 여러 테스트를 추가해 패키지의 안정성을 더욱 높였으며, 새로운 기능들도 추가되었습니다.

   해당 패키지는 모두 MIT 라이센스이며, 자유롭게 이용하실 수 있습니다.


  clang-format-node는 어떤 프로젝트인가요?

   이 패키지는 LLVM의 C 컴파일러로 유명한 Clang의 clang-format을 기반으로 C, C++, Java 언어의 코드 포맷팅을 지원하는 Node.js 패키지입니다. 간단히 말해, Node.js 환경에서 Prettier와 유사한 역할을 수행하지만, Prettier가 지원하지 않는 C, C++, Java 언어의 포맷팅을 제공한다는 점이 차별화됩니다.

   특히, Node.js 코어나 Electron 개발처럼 JavaScript 코드와 C/C++ 코드를 함께 작성해야 하는 경우 clang-format-node가 유용합니다.

   기존 clang-format 패키지는 Ubuntu 등의 운영체제 환경에 의존하는 추가 의존성을 설치해야 하는 번거로움이 있었지만, 이 패키지를 사용하면 별도의 설치 없이 바로 사용할 수 있습니다. 또한, 기존 패키지가 CI 환경에서 Node.js 및 npm 기반 워크플로에 통합하기 까다로운 면이 있었던 반면, clang-format-node는 단순히 npm에서 설치하고 스크립트를 설정하는 것만으로 간편하게 사용할 수 있어 CI 환경에서 많은 이점을 제공합니다.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  그렇다면 clang-format-node 패키지의 특징은 무엇인가요?

    1. Angular의 clang-format을 대체하는 Drop-in Replacement

   clang-format-node는 Angular/clang-format 패키지를 손쉽게 대체할 수 있는 Drop-in Replacement입니다.
   기존 패키지에서 clang-format-node로의 전환은 아주 간단하며, 별다른 복잡한 과정 없이 바로 사용할 수 있습니다.

    2. Clang을 사용하기 위한 추가 의존성 없이 Node.js만으로 충분합니다.

   Python이나 C++ 같은 추가적인 의존성이 전혀 필요 없습니다. Node.js만 있으면 간단히 실행 가능합니다.

    3. 넓은 지원 범위

   다양한 운영 체제 및 아키텍처, Node.js 버전, GitHub Actions 러너 이미지, Docker 빌드 이미지 등을 폭넓게 지원합니다.

    4. 간편한 CI 설정

   복잡한 설정 없이, 다른 Node.js 패키지와 동일하게 clang-format-node를 사용할 수 있습니다.

    5. 자동화된 빌드와 릴리스

   clang-format 업데이트가 이루어질 때마다 새로운 npm 버전이 자동으로 릴리스됩니다. GitHub Actions가 주기적으로 업데이트를 감지하고, 패키지를 빌드한 뒤 Pull Request를 생성해줍니다.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  clang-format와 git-clang-format으로 코드 포매팅하기

   (아래 글은 제가 https://clang-format-node.lumir.page/docs/get-started/introduction 섹션에 영문으로 작성한 글을 일부 한글로 번역한 내용입니다.)

    코드 포매팅의 중요성

      코드를 언제나 포매팅하세요

   코드 포매팅은 코드 품질을 높이는 데 있어 매우 중요한 작업입니다. 포매팅의 핵심은 코드의 포매팅을 일관되게 유지해 가독성과 이해도를 높이는 데 있습니다.


    clang-format이란?

   clang-format은 C와 C++ 같은 언어의 소스 파일을 자동으로 포매팅해주는 도구로, LLVM Clang 오픈 소스 프로젝트의 일부로 개발되었습니다.

      작동 방식

    1. 설정 파일 생성
       포매팅 스타일을 정의한 설정 파일(.clang-format)을 생성합니다.
    2. 명령 실행
       clang-format 명령어를 실행하면 해당 스타일 규칙에 맞춰 소스 코드가 자동으로 재구성됩니다.

      주요 특징

     * 다양한 언어 지원
       C, C++, Java, JavaScript, Objective-C, Protobuf, C# 등 다양한 언어를 지원합니다.
     * 포매팅 명령어 예시
clang-format -i my_source.cpp

       위 명령어를 실행하면 my_source.cpp 파일이 지정한 스타일대로 자동 포매팅됩니다.

      코드 포매팅 예제

// Before formatting
void test(QString&data, bool extraString) {
    int i=0;
    for (i=0;i<3;i++) {
        data+=""reallylongstringtoproducealonglineasanexample"" + QString::number(i * 1000) + ""/filetoload.html"";
        if (extraString)
        {
            data += ""some-extra"";
        }
    }
}

// After formatting
void test(QString &data, bool extraString)
{
    int i = 0;
    for (i = 0; i < 3; i++) {
        data += ""reallylongstringtoproducealonglineasanexample"" + QString::number(i * 1000)
                + ""/filetoload.html"";
        if (extraString) {
            data += ""some-extra"";
        }
    }
}

   위 예시는 clang-format이 어떻게 코드를 포매팅하는지 보여줍니다. 포매팅 규칙은 팀의 스타일에 맞게 자유롭게 설정할 수 있습니다.


    clang-format의 문제점

   clang-format은 훌륭한 도구이지만, 기존 코드와 커밋 이력 문제를 야기할 수 있습니다.

      주요 문제점

    1. 기존 코드와의 충돌
       전체 파일을 포매팅하면 포매팅과 관련 없는 부분까지 변경되어 불필요한 변경 사항이 발생합니다.
    2. 커밋 이력의 혼란
       대규모 포매팅 변경은 커밋 이력을 복잡하게 만들어 브랜치 병합, 코드 리뷰, 코드 분석에 어려움을 줄 수 있습니다.
    3. 새로운 코드와 기존 코드의 불일치
       이미 포매팅된 코드에 새 코드를 추가할 때 포매팅 유지가 어려울 수 있습니다.

      해결책: git-clang-format

   git-clang-format은 변경된 코드에만 포매팅을 적용할 수 있도록 도와주는 Git 확장 도구입니다. 이를 사용하면 다음과 같은 장점이 있습니다.
     * 포매팅 범위 최소화: 변경된 코드에만 포매팅 적용
     * 리뷰 간소화: 포매팅 변경과 개발 변경을 별도로 검토 가능


    git-clang-format 사용 방법

      설치

   git-clang-format은 clang-format-node 패키지와 함께 제공됩니다. clang-format-git npm 패키지를 설치해 사용할 수 있습니다.

      기본 워크플로

    1. 코드를 작성합니다.
    2. 변경 사항을 staging에 추가합니다(git add).
    3. git-clang-format을 실행합니다.

      예제

# 새 파일 추가 및 변경 사항 스테이징
$ git diff --staged
diff --git a/x.cpp b/x.cpp
new file mode 100644
index 0000000..af14ed5
--- /dev/null
+++ b/x.cpp
@@ -0,0 +1,3 @@
+int main() {
+
+}

# git-clang-format 실행
$ git-clang-format
changed files:
    x.cpp

# 포매팅 후 상태 확인
$ git status
On branch master
Changes to be committed:
    new file:   x.cpp
Changes not staged for commit:
    modified:   x.cpp

   이 워크플로를 통해 포매팅 변경과 개발 변경을 독립적으로 검토할 수 있습니다. 포매팅 변경이 마음에 들지 않으면 git checkout으로 되돌릴 수도 있습니다.

      스타일 지정

   --style 옵션을 사용하여 포매팅 스타일을 설정할 수 있습니다.
$ git-clang-format --style=WebKit
$ git-clang-format --style=file  # `.clang-format` 파일 사용


    결론

   clang-format은 강력한 도구지만, 실무에서는 단순히 clang-format -i 명령어만으로는 부족할 때가 많습니다. 변경된 부분에만 포매팅을 적용하는 git-clang-format을 사용하면, 효율적으로 코드를 관리하고 리뷰 과정을 간소화할 수 있습니다.

   git-clang-format은 변경 사항만 포매팅하기 때문에, 깔끔하고 전문적인 코드베이스를 유지하면서도 유연한 개발 환경을 제공할 수 있습니다. 작업 커밋이나 전체 브랜치를 포매팅할 때 몇 가지 Git 명령만 추가로 사용하면, 포매팅 문제를 손쉽게 해결할 수 있습니다.


   긴 글 읽어주셔서 감사드립니다! 긱뉴스 독자분들 모두 새해 복 많이 받으세요🙇‍♂️
     * 깃허브 레포지토리: https://github.com/lumirlumir/npm-clang-format-node
     * 공식문서 홈페이지: https://clang-format-node.lumir.page/

   따봉 드리고 갑니다

   감사합니다!!
"
"https://news.hada.io/topic?id=18847","StarGate 프로젝트: 소프트뱅크, 오픈AI, 오라클, MGX 데이터 센터 건설 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           StarGate 프로젝트: 소프트뱅크, 오픈AI, 오라클, MGX 데이터 센터 건설 계획

     * 트럼프, AI에 5천억 달러 투자 강조
          + 도널드 트럼프 대통령은 화요일에 OpenAI, Oracle, SoftBank가 공동으로 AI 관련 인프라에 최대 5천억 달러를 투자하는 새로운 파트너십을 발표함.
          + 새로운 법인인 Stargate는 텍사스에서 데이터 센터와 전력 발전을 시작할 예정이며, 초기 투자액은 1천억 달러로 예상됨.
          + 트럼프는 이 프로젝트가 미국의 잠재력을 보여주는 중요한 선언이라고 강조함.
     * 주요 인물들의 참여
          + SoftBank의 손정의, OpenAI의 샘 알트먼, Oracle의 래리 엘리슨이 트럼프와 함께 백악관에서 이 프로젝트를 지원함.
          + 알트먼은 이 프로젝트가 이 시대의 가장 중요한 프로젝트가 될 것이라고 언급함.
          + 엘리슨은 이미 10개의 데이터 센터가 건설 중이라고 밝히며, 이 프로젝트가 디지털 건강 기록과도 관련이 있다고 설명함.
     * AI 발전과 경제적 영향
          + AI 발전은 생산성을 높일 수 있지만, 잘못 구현될 경우 일자리 상실의 위험도 있음.
          + Stargate의 초기 계획은 바이든 행정부 시절부터 시작되었으며, OpenAI는 자체 데이터 센터 구축에 관심을 보임.
          + 미국은 AI 기술 개발에서 중국과 경쟁 중이며, 전력 발전을 쉽게 하는 데 중점을 두고 있음.
     * 규제와 투자 전망
          + 트럼프는 바이든 전 대통령이 서명한 AI 안전 기준 및 워터마킹 명령을 철회함.
          + 블랙스톤은 향후 5년간 미국에서 데이터 센터에 1조 달러가 투자될 것으로 예상함.
          + OpenAI는 2022년 ChatGPT 출시로 AI 분야의 선두주자로 자리 잡음.

        Hacker News 의견

     * OpenAI가 Microsoft의 클라우드 크레딧 위협에 대응하여 독립성을 유지하려는 전략을 취하고 있음
          + Microsoft는 올해 데이터센터에 거의 1000억 달러를 투자할 계획이며, OpenAI도 이에 맞춰 지출을 늘리고 있음
          + 컴퓨팅 비용이 OpenAI의 총 비용의 25-50%를 차지하고 있어 이러한 전략이 신중한 선택일 수 있음
     * 연간 약 1250억 달러는 국내 총투자의 2-3%에 해당하며, 중소규모 국가의 GDP와 비슷한 규모임
          + 전력망, 특히 상호 연결 대기열이 데이터센터 배치의 병목 현상이 되고 있는 상황에서 이러한 규모의 투자가 가능한지 의문임
          + 합리적인 정책 프레임워크가 있다면 주요 허가 개혁 발표가 곧 있을 것으로 예상됨
     * 5000억 달러의 자금 출처에 대한 의문이 제기됨
          + Softbank의 시장 가치는 840억 달러이고, Vision Fund는 1000억 달러에 불과함
          + Oracle은 현금 110억 달러를 보유하고 있으며, OpenAI는 총 170억 달러를 모금했음
     * AI 개발의 현재 진행 상황과 향후 경로에 대해 혼란스러움을 느끼고 있음
          + 현재 AI 개발이 AGI로 가는 길을 강행할 수 있을 만큼 충분히 발전했는지 의문임
          + 4년 내에 이를 해결할 수 있을 것으로 기대하는지에 대한 의문이 있음
     * Google, Amazon, Meta가 배제되는 상황에서 OpenAI를 승자로 선언하는 것이 적절한지 의문임
          + 정부가 이러한 방식으로 개입하는 것이 좋은 일인지 의문임
     * 이번 발표가 몇 달 전에 이미 있었던 것 같다는 의견이 있음
          + AMD가 Microsoft의 AI 슈퍼컴퓨터 프로젝트의 핵심이 될 수 있다는 소문이 있었음
     * 5000억 달러를 어떻게 투자할 계획인지에 대한 단서가 부족함
          + 그만큼의 비용이 드는 인프라가 무엇인지 궁금증이 있음
     * ""수십만 개의 미국 일자리 창출""이라는 발표에 대해 미국의 현재 교육 시스템을 고려할 때 흥미롭게 지켜볼 만한 일임
          + Musk의 H-1B 비자 문제와 관련이 있을 수 있음
     * 작년에 목표가 5~7조 달러였으나, 이제는 1000억 달러로 조정되었고 추가로 4000억 달러의 옵션이 있음
          + 큰 숫자이지만 여전히 약간의 하락세로 느껴짐
"
"https://news.hada.io/topic?id=18894","중세 성 건축 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              중세 성 건축 프로젝트

중세 건축의 세계를 발견하기 위한 성 방문

     * 프랑스 북부 부르고뉴의 Guédelon 숲 중심부에 있는 버려진 채석장에서 13세기 성을 처음부터 짓고 있는 장인 팀이 있음
     * 채석공, 석공, 목수, 대장장이, 기와 제작자, 운반자, 밧줄 제작자 등이 함께 중세 건축의 세계를 밝히고 전통 공예 기술을 되살리고 있음

Guédelon, 궁극의 대설계

     * 중세 성과 대성당을 방문할 때, 이러한 건축물들이 어떻게 지어졌는지, 재료는 어디서 왔는지, 어떻게 운반되었는지, 어떤 도구가 사용되었는지, 무거운 짐을 어떻게 들어 올렸는지 궁금해할 수 있음
     * Guédelon은 중세 세계의 이러한 신비를 밝히고 있음
     * 지역 재료로 지어진 성으로, 한때 사용되지 않던 채석장에서 주변 참나무 숲과 함께 장인들이 중세 건축의 세계를 밝히고 있음
     * 과거에서 영감을 받아 21세기에 교훈을 제공하는 건설 현장임

21세기의 중세 모험

     * Guédelon은 과학적, 역사적, 교육적 관심의 대상이며, 관광지이자 무엇보다도 집단적 사업임
     * 사계절 내내 Guédelon의 장인들이 이 특별한 도전에 맞서고 있음
     * 전 세계에서 온 방문객들이 성의 크레넬레이션, 대홀의 지붕 목재, 아치형 방 등을 목격하기 위해 이 독특한 건설 현장을 방문함

        Hacker News 의견

     * 철광석을 채굴하여 강철을 만들고, 도끼를 만들어 나무를 베는 방식으로 완전히 처음부터 시작함. 이는 진정한 기술을 보장하고, 과거의 제작 방식을 재발견할 수 있게 해줌
     * 방문할 가치가 있는 장소이며, 과거 방문했을 때 아이들이 다시 가고 싶어 했음. 1300년대에 지어졌다면 약 4년이 걸렸을 것이며, 자금이 가장 큰 차이점임. 과거에는 부유한 후원자의 자금으로 지어졌을 것임
     * 미국 콜로라도의 Bishop's Castle을 떠올리게 함. 거의 한 사람이 40년 동안 지은 놀라운 프로젝트임
          + Bishop's Castle 정보
     * Tom Scott가 그들의 트레드밀 크레인 시스템을 체험하기 위해 방문했음
          + Tom Scott의 방문 영상
     * 독일의 Campus Galli는 콘스탄스 호수와 다뉴브 강 사이에 위치하며, 8세기 수도원을 건설하는 것이 목표임. Guedelon에서 영감을 받아 시작함
          + Campus Galli 웹사이트
     * Ruth Goodman이 BBC에서 역사적 시대를 살아가는 놀라운 시리즈를 제작함. 1620년대까지 여러 시대를 ""살아보았으며"", Guedelon에서 제작한 Secrets of the Castle도 포함됨. 일부는 스트리밍 가능하고, 일부는 시간이 지나면서 사라졌지만, 이 시리즈는 YouTube에서 볼 수 있음
          + Secrets of the Castle YouTube 재생목록
          + Secrets of the Castle 정보
     * 과거에 웹사이트에 매우 자세한 뉴스레터 사본을 보관했으나 사라진 것으로 보임. archive.org에서 마지막으로 본 것은 여기임
          + https://www.guedelon.fr/en/newsletter-backcopies_99.html"">뉴스레터 백업
     * 미주리주 브랜슨 근처에서 이 프로젝트에 영감을 받아 성을 만들려 했으나 실패함
          + Ozark Medieval Fortress 정보
     * 화요일과 수요일에 사이트가 닫힌다고 했을 때, 웹사이트가 닫힌다는 의미로 착각했음
     * ""다른 사람의 왕국에 성을 짓지 마라""는 말이 있음. 프랑스가 공화국이라는 점에서 운이 좋음
"
"https://news.hada.io/topic?id=18791","자체 데이터 센터 구축 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            자체 데이터 센터 구축 계획

     * 당신의 데이터 센터를 구축하고 싶다면
          + Railway는 처음부터 Google Cloud Platform을 기반으로 컴퓨팅을 구축했음. 그러나 이로 인해 가격, 서비스 수준, 엔지니어링 제약 등 여러 문제가 발생했음. 이러한 문제를 해결하기 위해 Railway Metal 프로젝트를 시작했으며, 캘리포니아에 첫 번째 사이트를 구축했음.
     * 클라우드를 구축하고 싶다면
          + Railway Metal 프로젝트는 2024년 1월에 시작되어 첫 서버를 설치하는 데 5개월이 걸렸음. 공간을 확보하고 전력과 냉각을 고려해야 했음. 세 가지 주요 선택지 중 'Cage Colocation'을 선택했음.
     * 큰 힘에는 큰 책임이 따름
          + 데이터 센터 이전을 계획할 때 필요한 컴퓨팅 용량을 고려해야 함. 전력 밀도가 중요한 요소이며, 전력 공급의 이중화가 필요함. Power Distribution Unit(PDU)을 통해 전력을 공급함.
     * 빛이 있으라
          + 네트워크 연결이 중요하며, 다양한 ISP와 계약하여 최적의 네트워크 경로를 확보함. 각 지역에 적합한 ISP를 선택하고, 여러 지역에 걸쳐 중복성을 구축함.
     * 통로, 랙 및 오버헤드 인프라
          + 데이터 센터에서 랙은 행으로 배열되며, 공기 흐름을 위해 통로가 필요함. 랙의 크기와 케이블 관리도 고려해야 함. 전력과 냉각이 공간보다 제한 요소가 될 수 있음.
     * 랙 및 스택
          + 깔끔한 케이블링은 많은 연습이 필요하며, 전문가의 도움이 필요함. 케이블 매트릭스와 랙 엘리베이션 문서를 통해 설치를 계획함. 설치에는 6-14일이 소요됨.
     * Metal에 페달을 밟다
          + 설치된 케이지는 빈 캔버스와 같으며, 네트워크 장치 구성, 라우터 설정, RIR 기록 업데이트 등이 필요함. FRR과 SONiC를 사용하여 L3 전용 소프트웨어 기반 네트워크를 구축함.
          + 향후 게시물에서 서버를 기능적인 Railway 존으로 만드는 과정을 다룰 예정임. Railyard와 MetalCP라는 두 가지 소프트웨어 도구를 개발하여 새로운 케이지 설계, 케이블링 시각화, 서버에 OS 설치 등을 간편하게 할 수 있게 함.

        Hacker News 의견

     * ""colocation""을 ""자신의 데이터 센터 구축""이라고 부르는 이유에 대한 의문 제기. 실제로는 서버를 랙에 설치하는 것에 불과함
     * Rackspace 시절의 재미있는 에피소드들 회상
          + EMC 직원들이 스토리지 장치 설치 중 서버 랙을 넘어뜨린 사건
          + 트럭 운전자의 심장마비로 데이터 센터가 오프라인된 사건
          + 레이저로 대역폭을 다른 건물로 전송한 경험
          + 서버가 화재로 인해 창문을 부수고 박스 팬을 구매한 일
     * 데이터 센터 기술이 많이 발전했음을 언급하며 Facebook과의 협업 경험 공유
     * Google의 고객 지원 부족 문제 지적
     * Blekko의 인프라 구축 경험 공유
          + ""east west"" 네트워크 트래픽을 처리하기 위해 물리적 콜로케이션이 중요했음
     * 데이터 센터의 HVAC 'CRAC' 용량 계산의 중요성 강조
     * Google의 고객 서비스에 대한 불만 제기
          + AWS와 Microsoft의 고객 지원과 비교
     * Netbox와 같은 도구의 필요성 언급
     * 2003-2010년 사이의 데이터 센터 배포 경험 공유
          + 케이블 관리와 표준화의 중요성 강조
     * 데이터 센터의 ""WTF"" 섹션의 중요성 강조
     * AWS 비용 절감을 위해 콜로케이션을 통한 VM 운영 경험 공유
     * 인프라 회사로서의 자산 소유의 중요성 강조
          + Cloudflare의 무료 서비스 제공 이유 설명
     * 케이블 관리의 중요성 강조
          + 구리와 광섬유 케이블의 혼합 사용 시 주의 필요성 언급
"
"https://news.hada.io/topic?id=18845","Github 액션을 다시 사용하기 전에 한번 더 생각해보려고 합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Github 액션을 다시 사용하기 전에 한번 더 생각해보려고 합니다

     * GitHub Actions에 대한 불만
          + 팀은 약 15명의 엔지니어로 구성되어 있고, 모두가 main 브랜치에 지속적으로 코드를 푸시함
          + 코드는 여러 모듈로 나뉜 Monorepo 형태로 존재하며, 트렁크 기반 개발 방식을 통해 하루에도 여러 번 배포됨
     * GitHub Actions를 좋게 사용하는 경우도 있지만, 특정 규모나 환경에서는 한계가 명확하게 드러남

Pull request와 필수 체크사항

     * 모노레포가 여러 폴더로 나뉘어 있고, 각 폴더마다 독립적으로 테스트, 빌드, 배포를 진행함
     * GitHub Actions paths 기능을 사용하여 특정 폴더 변경이 있을 때만 해당 파이프라인을 트리거함
     * Pull request 병합 전 모든 체크가 통과되어야 하는 상황은 좋은 원칙이지만, 모노레포 구조와 결합될 때 문제가 발생함
          + 예: web-app1 - Unit tests라는 체크를 ‘필수’로 설정했는데, web-app1 폴더에 변경사항이 없으면 그 체크가 실행되지 않음
          + 그 결과, 한쪽 폴더만 변경되어도 다른 폴더 관련 테스트가 실행되지 않아 병합 자체가 불가능해지는 문제 발생함
     * GitHub 측에서 필수 체크의 이름이 아니라, “현재 트리거된 체크 전부가 통과되면 병합 가능” 같은 방식으로 처리가 되면 해결 가능할 텐데 3년째 변경이 없다는 점이 안타까운 상황임
     * 관련 GitHub 이슈 스레드 1, 2에서도 이 문제의 큰 영향을 확인할 수 있음
     * 결국 이를 우회하기 위해 추가 파이프라인을 실행하거나 유지보수하기가 복잡하고 비용이 많이 드는 상황임

재사용성과 YAML

     * 파이프라인 규모가 커질수록 GitHub Actions로 관리하기가 점점 어려워지는 느낌임
          + 많은 if 문이 들어가게 되고, 워크플로우를 분리해도 관리할 파일이 많아져서 유지보수성이 떨어짐
     * 재사용할 때 한 줄로 끝나야 할 호출 부분도 여러 줄과 중복 설정이 필요하여 .github 폴더에 이미 30개 이상의 파일이 쌓여 있음
     * needs 절도 리팩토링 시 삭제된 잡을 반영하지 못하면 에러를 발견하기까지 시간이 걸림
     * GitHub Actions를 로컬에서 실행할 수 없어 개발과 테스트가 까다로움
          + act 같은 도구가 있지만, 실제 사용 시 제약이 많아 기대에 미치지 못하는 경우가 많음

GitHub의 무관심

     * 위 문제점 중 가장 큰 문제는 GitHub가 이 이슈들을 별로 중요하게 생각하지 않는 것처럼 보인다는 점임
     * 여러 이슈가 수년째 열려 있고, 공개 로드맵에 포함되지 않았다는 점에서 개선 의지가 없어 보임
     * 한동안 오랫동안 거론되던 문제들도 최근 이슈가 대거 닫혔음으로써 커뮤니티 반발이 있었음

옵션

     * 이런 문제와 GitHub의 개선 의지 부족을 고려하면, GitHub Actions 도입 전 신중해질 필요가 있음
     * 시장에는 Gitlab, Jenkins, TeamCity 등 다른 CI/CD 옵션이 다양함
     * Dagger 같은 새로운 접근법을 제시하는 도구도 검토할 가치가 있음

   CI/CD는 gitlab 쵝오

   저두 깃랩 쓰다가 깃헙 액션 환경에 놓였을땐 되는게 없네 싶었던 기억이 ...

   깃허브에 저장소들을 그룹별로 묶어서 관리가 안되는것도 저는 큰 불만중에 하나..

   파이프라인은 깃랩이 정말 좋은거 같아요. 위에서 말한거 깃랩은 다 되거든요.
   모노리포일 경우에 테스트를 어떤 폴더가 변경되면 무엇무엇 무엇이 실행되어야 한다라고 설정하기 개편함.

   이건 GitHub Actions의 역사를 알아야 되는거긴한데...

   최초의 GItHub Actions는 지금의 상황과 다른 양상을 보이고 있었죠...
   Open 하기 6개월이전에 (기억이 가물가물) GitHub이 MS에 인수가 되었고 Actions 개발은 MS에서 Azure DevOps 팀과 작업을 같이하기로 했던거같습니다.
   이때 Azure DevOps에 새로운 기능이 더이상 나오지 않았고, Azure DevOps에 있던 기능들이 GitHub Actions에서 새로운 기능이 나오고 있었던...
   그때 Yaml로 변경되었고 지금의 환경이 만들어졌었죠.... ㅠ.ㅠ

   이후로 개발자들이 원 파트로 돌아가고 더이상 손을 보고 있지 못한 상태로 보이는지라...
   아쉽네요...
   지금 회사에서는 GitHub Actions 기반으로 CI/CD를 구성해놨는데... 아직은 부족한 점이 없어서 사용을 하고 있는데...

   주시고 하고 있어야겠네요...

        Hacker News 의견

     * 파이프라인 DSL에 실제 로직을 포함하지 않고, 작업을 조정하는 데만 사용해야 함. 복잡한 작업은 스크립트로 만들어서 간단하게 실행할 수 있도록 해야 함. 이를 통해 GitHub Actions, Jenkins, Azure DevOps 등에서 동일한 작업을 간단하게 수행할 수 있음
     * GitHub Actions를 설정할 때, 사전 제작된 액션을 피하고, 단순한 셸 실행기로 사용하는 것이 좋음. Python, Ruby, Bash 등으로 스크립트를 작성하고 GitHub Action에서 이를 실행하면 로컬 테스트가 쉬워지고, 불필요한 고통을 줄일 수 있음
     * GitHub Actions는 특정 조건이 충족될 때만 검사를 실행할 수 있음. 하지만 이러한 규칙을 사용하면 ""Pull request와 필수 검사"" 문제에 직면하게 됨. 외부 서비스와 함께 사용할 때 필수 검사는 반드시 통과해야 하며, 그렇지 않으면 병합할 수 없음
     * 'Pull request와 필수 검사' 문제를 해결하기 위한 방법으로, 각 필수 검사 워크플로우의 'no op' 버전을 생성하여 조건이 충족되지 않을 때 이를 실행하고 코드 0으로 종료하게 할 수 있음. 이 방법은 기본 기능이지만 다소 복잡한 해결책임
     * Travis CI는 로컬에서 CI를 테스트하기에 훌륭했음. GitHub Actions는 GitLab CI와 경쟁하기 위해 만들어졌으며, 기업 시장에서 점유율을 잃고 있었음
     * Buildkite를 사용해 볼 것을 추천함. GitHub Actions를 넘어서면 Buildkite가 좋은 대안이 될 수 있음. 대규모 미국 기술 회사에서 사용한 경험이 있으며, CI의 유일한 즐거운 부분이었음
     * GitHub Actions의 아키텍처는 보안 결정을 잘못 내리게 할 수 있음. 예를 들어, 조직 또는 저장소 비밀은 편리하지만 보안 취약점이 될 수 있음. 저장소 환경은 별도의 비밀을 가질 수 있지만, 올바른 워크플로우가 올바른 환경에만 접근할 수 있도록 해야 함
     * CI 시스템의 일반적인 철학은 잘못되었음. CI가 코드를 실행하는 대신, 코드가 CI를 실행해야 함. CI는 API를 제공하여 사용자가 시스템에 정보를 제공할 수 있도록 해야 함
     * Bazel을 사용하여 CI 도구가 Bazel 타겟을 빌드하도록 하고, 필요할 때 원격 빌드 실행을 통해 병렬성을 높일 수 있음. 이는 약 10M+ 라인 코드 또는 대규모 서비스에 적합함
     * GitHub에서 ""필수 검사""를 지정할 수 있으며, 이는 항상 녹색이어야 함. 하지만 특정 폴더에 변경이 있을 때만 실행되므로, 다른 폴더에 변경이 있을 경우 병합할 수 없음. 모든 테스트를 실행하지 않으면 통합의 의미가 없어지므로, 테스트를 빠르게 실행할 수 있도록 해야 함
"
"https://news.hada.io/topic?id=18831","Mixxx: GPL DJ 소프트웨어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Mixxx: GPL DJ 소프트웨어

     * 강력한 기능
          + Mixxx는 DJ들이 디지털 음악 파일로 창의적인 라이브 믹스를 수행하는 데 필요한 도구를 통합함.
          + 초보 DJ부터 경험 많은 턴테이블리스트까지 다양한 스타일과 기술을 지원함.
     * BPM, 키 감지 및 동기화
          + BPM 및 음악 키 감지를 통해 라이브러리에서 다음 트랙을 쉽게 찾을 수 있음.
          + Sync Lock을 사용하여 네 곡의 템포와 비트를 맞춰 매끄러운 믹싱 가능.
     * DJ 컨트롤러 지원
          + DJ 컨트롤러 하드웨어에 대한 내장 매핑으로 Mixxx의 기능을 직접 제어할 수 있음.
          + 프로그래머블 매핑 시스템을 사용하여 워크플로를 맞춤화하고 모든 MIDI 또는 HID 장치에 대한 지원 추가 가능.
     * 이펙트
          + 사운드 이펙트를 사용하여 트랙에 독특한 변화를 줄 수 있음.
          + 여러 이펙트를 연결하고 조작하여 창의적인 믹싱 가능.
     * 바이닐 레코드 컨트롤
          + 타임코드 바이닐 레코드를 사용하여 디지털 음악 파일을 바이닐처럼 재생하고 스크래치할 수 있음.
          + 바이닐 패스스루 모드를 전환하여 세트에 바이닐 음악을 믹스 가능.
     * 무료 및 오픈 소스
          + Mixxx는 무료 오픈 소스 소프트웨어로, 전적으로 커뮤니티에 의해 개발됨.
          + Mixxx는 회사가 아닌 열정적인 DJ와 프로그래머들이 자유 시간을 투자하여 개발하는 소프트웨어임.
          + Mixxx는 항상 무료로 제공될 것임.
     * 최신 뉴스
          + Mixxx 2.5가 2024년 12월 24일에 출시됨.
          + Mixxx 2.4.2가 2024년 11월 27일에 출시됨.
     * 친근한 커뮤니티
          + Mixxx는 국제적인 DJ, 프로그래머, 아티스트 커뮤니티에 의해 개발됨.
          + Mixxx는 자유와 가격 면에서 무료인 오픈 소스 소프트웨어로, 누구나 Mixxx를 더 나은 소프트웨어로 만들기 위해 기여할 수 있음.
          + 버그 보고, 기능 제안, 컨트롤러 매핑 제작, 기능 추가 및 버그 수정, 번역 도움, 기타 시작 작업에 참여 가능.
     * 기타 정보
          + Mixxx는 2011년 2월 전 세계 Mac App Store에서 1위 무료 앱으로 선정됨.
          + 2007년 9월 무료 이달의 픽으로 선정됨.
          + ""가장 멋진 오픈 소스 애플리케이션?""이라는 평가를 받음.

   mixxx 를 10년 넘게 사용 중입니다. mixxx는 오픈소스 프로젝트 최고의 프로젝트 중 하나라고 생각합니다. (맨 아래에도 써있네요.)

        Hacker News 의견

     * Mixxx를 사용하여 결혼식에서 DJ를 했으며, 손님들이 음악을 투표할 수 있는 사이트를 만들어 다양한 장르의 음악을 믹스했음. 저렴한 DJ 컨트롤러와도 잘 작동했으며, 음악에 맞춰 조명을 제어하는 프로그램도 개발했음. 중요한 것은 결혼식 당일 문제없이 잘 작동했음
     * 몇 년간 Mixxx를 사용해왔으며, 소프트웨어에 대해 나쁜 점이 없다고 평가함. 많은 DJ 소프트웨어가 독점적인 음악 구독 서비스에 집중하는 반면, Mixxx는 MIDI 출력이 가능한 컨트롤러에 대한 어댑터 스크립트를 작성할 수 있게 해줌. 내장 라이브러리에는 일반적인 상업용 컨트롤러와 MIDI 장치에 대한 스크립트가 포함되어 있음
     * Traktor Kontrol S2의 주요 소프트웨어로 Mixxx를 사용함. 일부 조명이 버그가 있으며, 키에 맞춰 트랙을 강조하는 기능은 알파 버전에서만 가능함. 그 외에는 사용하기 쉬운 소프트웨어로 모든 기능 요구사항을 충족하며 잘 작동함. 추천할 만한 소프트웨어임
     * Mixxx 2.5 버전에서 '다음 마커까지의 비트' 기능이 추가되어 Numark의 USB 컨트롤러와 함께 $500 이하의 완전한 DJ 세트를 구성할 수 있었음. 다른 설정에 익숙한 사람들이 빠르게 적응하며, 다양한 팁과 스타일을 공유함. 유튜브 및 사운드클라우드 다운로더와 함께 사용하면 빠르게 트랙을 라이브러리에 추가할 수 있음
     * Mixxx는 TTRPG 사운드스케이프 믹서로도 훌륭함. 여러 앰비언스 트랙을 템포에 맞춰 음악과 함께 큐잉하고, 사운드보드를 구축하며 하드웨어 컨트롤에 연결할 수 있음. 비슷한 도구들은 미디어 생태계에 묶이거나, 고급 사용자 기능이 부족하거나, 구독이 필요하거나, Linux나 macOS에서 작동하지 않음
     * Mixxx는 매우 훌륭한 오픈 소스 프로젝트임. 몇 년 전 Mixxx 데모 비디오를 DIY ""통합 컨트롤러""로 제작했으며, Linux 부팅부터 Mixxx, 터치 스크린, 비트매칭 및 일부 효과를 시연했음. Mixxx 개발자들에게 감사의 인사를 전함
     * Mixxx를 사용하여 집에서 믹스 테이프를 제작했으며, 크로스 페이딩 기능과 볼륨 정규화 기능이 뛰어남. 플레이리스트 및 라이브러리 관리도 견고함. 유일한 불만은 비DJ 사용자에게 UI가 직관적이지 않다는 점이지만, 문서에 모든 것이 설명되어 있어 해결 가능함
     * 2013년 또는 2014년에 Mixxx를 사용하여 형의 결혼식에서 DJ를 했음. 신부와 아버지의 첫 춤을 위한 특정 트랙으로 전환하라는 신호를 받았을 때 Mixxx가 노트북을 멈추게 했음. 손님들이 기다리고 있다는 말을 들었으며, 컴퓨터를 강제 재부팅하고 VLC로 나머지 저녁을 진행했음. Mixxx의 잘못은 아닐 수 있지만 그 순간을 잊을 수 없음
     * Mixxx를 단순히 오디오 플레이어로 사용함. 노래를 큐에 넣고 Auto DJ가 재생하도록 하는 방식이 마음에 들며, 다른 오디오 플레이어도 이론적으로 가능하지만 Mixxx에서는 매우 명확함. 키와 BPM을 보는 것도 흥미로움
     * Mixxx를 사용하여 십대 시절 DJ처럼 느끼게 되었음. 여기서 Mixxx를 보게 되어 기쁨
"
"https://news.hada.io/topic?id=18899","리눅스를 위한 빠른 링크 도구, Wild","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         리눅스를 위한 빠른 링크 도구, Wild

     * Wild 링크
          + Wild는 반복적인 개발을 위해 매우 빠른 링크를 목표로 하는 도구임.
          + 아직 증분 링크는 구현되지 않았지만, 현재도 상당히 빠른 성능을 보임.
          + 프로덕션 빌드에서는 GNU ld나 LLD 같은 성숙한 링크 사용을 권장함.
          + 개발 중 빠른 빌드 시간을 원한다면 Wild를 시도해볼 수 있음.
          + x86-64 Linux에서 개발 중인 경우 사용 가능하며, 문제 발생 시 버그 리포트를 권장함.
     * 설치
          + 사전 빌드된 바이너리를 설치하려면 릴리스 페이지에서 명령어를 복사하여 사용할 수 있음.
          + 수동으로 wild 바이너리를 경로에 복사할 수도 있음.
          + 직접 빌드 및 설치하려면 cargo install --locked --bin wild --git https://github.com/davidlattimore/wild.git wild 명령어를 사용함.
     * 기본 링크로 사용하기
          + Rust 코드 빌드를 위해 Wild를 기본 링크로 사용하려면 ~/.cargo/config.toml에 설정을 추가함.
     * Q&A
          + 왜 또 다른 링크인가?
               o Mold는 이미 매우 빠르지만 증분 링크를 지원하지 않음. Wild는 증분 링크를 목표로 함.
               o Rust로 작성되어 증분 링크의 복잡성을 해결할 수 있을 것으로 기대됨.
          + 작동하는 기능
               o 현재 지원되는 플랫폼/아키텍처: Linux의 x86-64
               o 정적 링크된 바이너리, 동적 링크된 바이너리, 공유 객체(.so 파일) 출력 가능
               o Rust proc-macros와의 호환성 확인됨
               o crates.io의 인기 있는 크레이트 테스트 통과
               o 디버그 정보 지원
          + 아직 지원되지 않는 기능
               o 증분 링크, x86-64 외의 아키텍처 지원, 다양한 링크 플래그 지원, Mac 및 Windows 지원 등
     * 벤치마크
          + Wild의 목표는 증분 링크를 통해 매우 빠른 성능을 발휘하는 것임.
          + 비증분 링크에서도 가능한 빠른 성능을 목표로 함.
          + 벤치마크 결과, 디버그 정보 없이 Wild는 매우 빠른 성능을 보임.
          + 디버그 정보가 포함된 경우 성능이 다소 저하됨.
     * Rust 코드 링크
          + cargo test 명령어를 사용하여 Wild로 크레이트를 빌드하고 테스트할 수 있음.
          + Clang 컴파일러가 설치되어 있어야 하며, GCC는 임의의 링크 사용을 허용하지 않음.
     * 기여
          + Wild에 기여하는 방법에 대한 정보는 CONTRIBUTING.md를 참조함.
     * 후원
          + 이 프로젝트를 후원하면 더 오랜 기간 동안 풀타임으로 작업할 수 있음.
     * 라이선스
          + Apache License, Version 2.0 또는 MIT 라이선스 중 선택 가능.

        Hacker News 의견

     * mold가 AGPL에서 MIT로 라이선스 변경 후, 새로운 빠른 링커의 필요성이 줄어들었음에도 불구하고, 이 프로젝트가 등장한 것이 놀라움. 일부 경우 mold보다 2배 빠르다는 점에서 주목할 만함
     * 이전에 이 프로젝트를 살펴봤지만, 아직 프로덕션 준비가 안 된 것으로 보임. 그래서 여전히 mold를 사용 중임
     * macOS 사용자에게는 Apple이 1~2년 전에 새로운 링커를 출시했으며, Rust와 함께 사용할 경우 config.toml에 특정 설정을 추가해야 함
     * C/C++ 컴파일러가 링크 단계 없이 전체 프로그램을 하나의 단위로 빌드하는 것이 신선할 것임. 외부 라이브러리는 대부분 동적으로 링크되므로, 링크 과정을 제거해도 문제되지 않음
     * 2008년 Gold, 2015년 Lld, 2021년 mold 등 빠른 링커에 대한 관심이 지속적으로 증가하고 있음
     * Rust의 인기로 인해 빠른 링커에 대한 관심이 증가하고 있으며, Rust 바이너리는 링크 단계에서 시간이 많이 소요됨. 이는 Rust만의 문제가 아니라 정적 링크와 LLVM의 최적화 때문임
     * John Levine의 ""Linkers and Loaders""는 관련된 좋은 책이며, 몇 년 전에 읽었을 때 매우 흥미로웠음
     * wild, mold, ld의 성능을 비교한 결과, 잘 구조화된 프로젝트에서는 링크 시간이 큰 문제가 되지 않음을 알게 됨
     * 성능 벤치마크는 2020년 모델의 System76 Lemur pro 노트북에서 실행되었으며, 4코어(8스레드)와 42GB RAM을 가짐
     * 링커가 무엇인지 궁금해하는 사람도 있음
     * Linux 커널을 링크할 수 있는지 묻는 질문이 있었으며, 이는 LLD의 유용한 이정표였음
"
"https://news.hada.io/topic?id=18916","CIA, Covid 기원 설명에 실험실 유출설 지지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      CIA, Covid 기원 설명에 실험실 유출설 지지

     * C.I.A.의 새로운 분석
          + C.I.A.는 Covid 팬데믹의 기원이 우한의 시장에서 자연 발생했는지, 연구소에서의 실수로 유출되었는지에 대한 결론을 내리지 못했음.
          + 최근 C.I.A.의 새로운 분석에서는 연구소 유출 이론을 선호하는 것으로 나타남.
          + 새로운 정보에 기반한 것이 아니라, 기존의 증거를 재검토한 결과임.
     * 분석의 배경
          + 분석은 팬데믹 발생 전 우한의 고보안 연구소의 조건을 더 면밀히 살펴본 결과에 기반함.
          + C.I.A. 대변인은 다른 이론도 여전히 가능성이 있으며, 새로운 정보가 나오면 계속 평가할 것이라고 밝힘.
     * 논쟁의 중요성
          + 일부 미국 관리들은 중국 정부가 시장을 규제하거나 연구소를 감독하지 못한 것이 문제라고 주장함.
          + 다른 이들은 이 논쟁이 중요한 정보 및 과학적 질문이라고 봄.
     * 기사 정보
          + Julian E. Barnes는 미국 정보 기관과 국제 안보 문제를 다루는 기자로, 20년 이상 보안 문제에 대해 글을 써왔음.

        Hacker News 의견

     * 정보 기관의 새로운 평가가 ""낮은 신뢰도""로 이루어졌음. 이는 정보가 불완전하고 단편적임을 의미함
          + 정치적 이유로 특정 이론을 지지하는 경향이 있음
          + 예를 들어, Tom Cotton 상원의원은 중국이 전염병을 퍼뜨린 것에 대해 책임을 져야 한다고 주장함
     * 에너지부는 낮은 신뢰도로 실험실 유출을 결론지었음
          + FBI는 중간 신뢰도로 실험실 유출을 결론지었음
          + CIA의 새로운 보고서도 낮은 신뢰도로 실험실 유출을 결론지었음
          + 낮은 신뢰도는 부정적인 숫자가 아님
          + 습시장 이론의 신뢰성이 일부 데이터로 인해 감소했으나, 실험실 유출 이론은 여전히 가능성이 있음
     * 중국은 과거에 실험실 유출 기원을 가진 적이 있었음
          + 중국은 조사에 방해하고 지연시켰음
          + 실험실에서 유출되었든 아니든, 중국은 이를 은폐했음
          + 중국의 은폐는 실험실 유출의 증거가 아님
          + 중국은 ""사회적 조화""를 중시하므로 정보를 공개하지 않음
     * 사건이 의도적이지 않았을 가능성이 있음
          + 중국은 이 시기에 부끄럽고 수치스러운 결정을 내렸으며, 다른 국가들도 실수를 저질렀음
          + 중국이 내부적으로 실험실 유출을 결론지었다면, 세계가 추측하고 조사할 필요가 줄어들었을 것임
     * 실험실 유출 이론에는 두 가지가 있음
          + 바이러스가 자연적으로 발생하고 실험실에서 연구 중 유출된 경우
          + 바이러스가 원래 위험하지 않았으나 실험실에서 인간의 개입으로 위험해진 경우
          + 첫 번째 이론에서는 바이러스는 자연 기원이지만, 팬데믹은 실험실 유출에서 시작됨
     * CIA는 중립적인 기관이 아님
          + 실험실 유출이 불가능하지 않지만, 자연적 전이 사건을 의심할 만한 이유가 있음
          + 여러 연구가 우한 습시장이 기원임을 시사함
     * 검열은 어리석은 행동이었음
          + 정치적 이유로 결론을 서두른 것도 좋지 않았음
          + 사람들은 ""모르겠다""고 말하는 데 더 익숙해져야 함
     * 진실을 알기 어려울 가능성이 높음
          + 자연적 기원과 실험실 유출 가설 모두 믿을 만한 이유가 있음
     * 새로운 정부와 함께 정보 기관의 입장이 급격히 변함
          + 과거의 주장에 대한 신뢰가 떨어짐
     * Christian Drosten의 인터뷰가 흥미로웠음
          + 실험실 기원이 아닐 가능성이 더 높음을 과학적으로 설명함
     * 정치적 이유로 분노를 유도하는 것 외에는 큰 중요성을 보지 못함
          + 전 세계가 불타오른 것이 충격적이며, 교훈은 확산을 어떻게 다루는가에 있음
"
"https://news.hada.io/topic?id=18798","AI 및 종단간 암호화 논의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AI 및 종단간 암호화 논의

     * 최근 NYU와 Cornell 연구진이 발표한 ""How to think about end-to-end encryption and AI""라는 논문을 접하게 되었음. 이 논문은 AI와 종단간 암호화에 대한 중요한 질문들을 다루고 있으며, 일부 결론에는 동의하지 않지만 매우 중요한 주제를 다루고 있음.

    종단간 암호화란 무엇이며 AI와 어떤 관련이 있는가?

     * 지난 10년 동안 가장 중요한 프라이버시 관련 이야기는 종단간 암호화 통신 플랫폼의 부상이었음. 2011년 이전에는 대부분의 클라우드 연결 기기가 데이터를 평문으로 업로드했음.
     * 종단간 암호화는 서버가 메시지의 평문 내용을 볼 수 없도록 하는 기술임. 그러나 이 기술은 서버가 데이터를 처리하기 어렵게 만들 수 있음.
     * AI의 발전으로 인해 많은 데이터 처리가 원격 서버로 오프로드될 가능성이 높아지고 있음. 이는 프라이버시 문제를 야기할 수 있음.

    AI가 종단간 암호화 메시징에 미치는 영향

     * 종단간 암호화 시스템은 메시지 내용이 전송 중에 참여자의 기기 외에는 접근할 수 없도록 설계됨. 그러나 사용자가 데이터를 어떻게 처리할지는 보장하지 않음.
     * AI가 데이터를 처리하는 방식은 사용자의 동의와 관련된 복잡한 문제를 야기할 수 있음. 일부 회사는 사용자를 잘 안내할 수 있지만, 그렇지 않은 회사도 있을 것임.

    신뢰할 수 있는 하드웨어와 Apple의 ""Private Cloud Compute""

     * Apple은 AI의 프라이버시 문제를 해결하기 위해 ""Private Cloud Compute""라는 접근 방식을 도입했음. 이는 신뢰할 수 있는 하드웨어를 사용하여 데이터를 보호하는 방법임.
     * 이 시스템은 공격자와 Apple 직원 모두가 데이터를 유출하기 어렵게 만듦. 그러나 여전히 암호화보다 약한 보안 보장을 제공함.

    AI 에이전트는 누구를 위해 일하는가?

     * AI 에이전트가 사용자의 데이터를 처리하는 방식은 정부가 접근을 요구할 가능성을 열어줄 수 있음. 이는 프라이버시와 관련된 중요한 질문을 제기함.
     * 기술적 선택이 프라이버시를 보장하지 못할 수 있으며, 사회가 올바른 정치적 선택을 할 것인지에 대한 확신이 부족함.

        Hacker News 의견

     * 자동화된 탐지 시스템이 증가하면서, 개별 사례를 처리하는 인력은 줄어들고 관리자는 자동 탐지에 더 의존하게 됨. 이는 잘못된 긍정 결과가 발생할 때 문제 해결이 어려워져 큰 좌절감을 초래할 수 있음. 특히 법 집행에 사용될 경우, 이는 개인의 삶에 치명적일 수 있음
          + 예를 들어, Amazon에서 불법 리뷰로 잘못 표시되어 문제를 해결하기 위해 사람과 접촉하려고 했으나 실패한 경험이 있음. 이러한 상황이 심각한 범죄 문제에 발생하면 개인의 삶을 망칠 수 있음
          + 자동 탐지 시스템은 인간을 대체하는 것이 아니라 보완하여 더 적은 인력으로 더 많은 일을 할 수 있도록 해야 함. 그러나 현재는 인센티브가 부족하고 의사결정자들이 실제 사례를 다루지 않기 때문에 문제를 인식하지 못함
     * AI가 개인의 작업을 가속화하는 것에서 조직의 통제를 위한 도구로 확장될 때 진정한 위협이 발생할 수 있음. 이는 조직을 더 효과적으로 만들 수 있지만, 직원들이 실제 인간이라는 믿음을 약화시킬 수 있음
     * 대량 감시의 진정한 위험은 불편한 사람에 대한 정보를 수집하여 그들을 더 이상 불편하게 만들지 않도록 하는 것임. 대량 감시의 모든 결과가 아직 드러나지 않았음
     * OpenAI는 데이터가 30일 동안 보관되며, 직원과 제3자 계약자가 이를 검토할 수 있다고 투명하게 밝힘
     * AI 시스템이 실제로 우리를 위해 일하는지에 대한 어려운 질문이 제기되고 있음. 현재의 경향은 중립적이고 프라이버시를 우선시하는 미래에 대한 희망이 제한적임
     * Apple은 보안 연구자가 버그를 확인할 수 있도록 소프트웨어 이미지를 공개하겠다고 발표했으나, 소스 코드는 공개하지 않음. Apple은 사용자 데이터를 보관하지 않으며, 지원 엔지니어가 사용자 데이터를 볼 수 없다고 주장함
     * AI가 누구를 위해 일하는지에 대한 문제는 광고 기술 회사가 AI를 사용자 이익에 반하여 작동하게 할 가능성이 큼. 이는 광고 지원 ""무료"" 서비스에 대한 기대 때문임
     * AI 에이전트가 실제로 누구를 위해 일하는지에 대한 법적 개념이 중요함. 현재 제안된 내용은 다양한 위협에 대한 감시를 포함함
     * 대량 감시의 결과로 클라우드에 저장된 데이터가 스캔 가능해지면서, 단순한 반대 의견으로 인해 감시를 받을 수 있는 위험이 증가함
     * 기술적 보장은 사용자 약속과 다름. Apple의 PCC는 보안성을 높이지만 투명성이나 책임성을 보장하지 않음. 투명성이 보안보다 더 큰 문제임
     * AI가 사회에 봉사하기 위해서는 정보 불균형을 해소해야 함. 좋은 기업 행동을 원한다면 그들이 투명하게 운영되도록 해야 함
     * 기술적 선택이 프라이버시 문제를 해결하지 못할 수 있음. AI 에이전트에 대한 접근 권한이 누구에게 주어질지가 중요함. 기술적으로는 에이전트를 로컬에서 실행하고 시스템에 접근할 수 없는 사람과의 대화를 차단할 수 있음
"
"https://news.hada.io/topic?id=18853","Show GN: Nugget - 오픈소스 영상편집 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: Nugget - 오픈소스 영상편집 프로그램

   오픈소스로 공개한 영상편집 프로그램입니다.

   일렉트론과 TypeScript로 개발했고 litjs를 프론트엔드 스택으로 사용하고 있습니다.

   현재는 AI기반 자동 자막 옵션을 개발중이고 AI모델을 self-hosted로도 동작하도록 배포할 계획입니다. 아마 긴 영상을 편집하고 번역하는 영상을 만드시는 분들에게 큰 도움이 될거라 생각합니다.

   안녕하세요
   프로그램이 인상적이네요.
   혹시 편집하는 데모 영상도 있을 까요?
   해당 프로그램에서는 영상 편집을 어떻게 진행하는지 궁금해서요.
   AI 자동자막 같이 재밋는 기술이 있으면 그것들도 있으면 좋을 것 같습니다

   https://youtube.com/watch/…

   예전에 만들어둔 플레이리스트입니다만 좀 오래되서 다시 데모영상을 만들어야 될 것 같습니다.
"
"https://news.hada.io/topic?id=18796","RSS 지원 옹호, 당신도 동참해야 할 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        RSS 지원 옹호, 당신도 동참해야 할 이유

     * 블로그 글
          + 필자는 RSS 지원을 옹호하고 있으며, 독자들도 이를 지지해야 한다고 주장함
          + 필자는 Feeder를 사용하여 뉴스를 따라가고 있으며, 다양한 뉴스 사이트와 조직들이 RSS를 지원하는 것을 발견함
          + GovTrack.us는 RSS를 지원하지 않았으나, 필자의 요청으로 지원을 추가함
          + Feeder 앱과 호환되지 않는 뉴스 웹사이트 문제를 이메일로 해결함
          + 주 상원의원의 웹사이트는 RSS를 지원하지만, 주 공화당 웹사이트는 지원하지 않음. 이에 대해 공화당에 이메일을 보냄
          + Ubisoft/Nadeo에 Trackmania 뉴스 웹사이트의 RSS 지원을 요청함. 개발팀에 제안할 것이라는 답변을 받음
          + 도서관 이사회 회의에서 웹사이트의 RSS 지원을 요청함
          + Substack, Jurist.org, Justia, Blogger 등 다양한 플랫폼이 RSS를 지원함
          + 관심 있는 조직의 업데이트를 받기 위해 피드 리더 앱을 사용하고, 웹사이트의 피드를 구독할 것을 권장함
          + 피드가 없는 경우, 조직에 추가를 요청할 것을 제안함
          + RSS를 통해 광고나 알고리즘 없이 관심 있는 정보를 쉽게 따라갈 수 있음을 강조함
          + 더 많은 RSS 지원을 옹호할 것을 촉구함. 특히, 최신 정보를 받고 싶은 조직과 함께 할 것을 권장함

        Hacker News 의견

     * YouTube 채널은 RSS 피드를 통해 새로운 비디오가 업로드될 때 알림을 받을 수 있음
          + 채널 ID를 사용하여 RSS 피드를 설정할 수 있으며, FeedBro 같은 RSS 브라우저 확장 기능을 통해 쉽게 찾을 수 있음
     * Nikola를 사용하여 정적 사이트를 생성하면서 RSS 피드의 유용성을 발견함
          + XML 스타일시트를 사용하여 RSS 피드를 브라우저에서 바로 볼 수 있게 함
          + RSS 피드를 통해 새로운 독자에게 RSS를 소개하는 좋은 방법임
     * 개인 사이트에 RSS를 추가했으며, 간단한 구현으로도 지원할 수 있음
          + Atom 표준도 존재하며, RSS 리더와 호환됨
          + Atom은 더 많은 기능을 제공하지만, RSS의 단순함을 선호함
     * RSS 지원을 더 많이 요청해야 함
          + 브라우저 제조사에게도 지원을 요청해야 함
          + 많은 사람들이 RSS 버튼을 원하고 있음
     * 대형 기술 회사들이 웹 경험을 장악하면서 사람과의 소통이 어려워졌음
          + 이메일을 통해 소통할 수 있으며, 이는 상대방에게 큰 도움이 될 수 있음
     * 회사에서 RSS 피드를 제거하라는 요청을 받았으나, 많은 요청이 있어 유지하기로 결정함
     * RSDS라는 프로토콜을 통해 RSS 콘텐츠의 글로벌 발견 문제를 해결하려고 함
     * RSS 지원을 추가할 때 Atom을 사용하는 것이 좋음
          + Atom은 RSS보다 명확하고, 추가 어휘를 필요로 하지 않음
     * RSS는 대형 기술 회사와 소셜 미디어가 지배하기 전의 자유롭고 개방된 웹의 핵심 프로토콜이었음
          + 최근 사건들로 인해 RSS가 다시 부활하기를 희망함
     * RSS는 훌륭하며, 대부분의 블로그 엔진과 팟캐스트가 기본적으로 지원함
          + 간단한 상호 운용 솔루션에 대한 더 많은 지원이 필요함
"
"https://news.hada.io/topic?id=18891","모든 자전거를 전기 자전거로 변환하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        모든 자전거를 전기 자전거로 변환하는 기술

     * 소개
          + Dhruv Vidyut는 자전거를 전기 차량으로 변환할 수 있는 혁신적인 전기 변환 키트를 제공하는 곳임.
          + 이 키트는 어떤 자전거에도 장착 가능하며, 편안하고 효율적이며 친환경적인 사이클링 경험을 제공함.
     * 제품 하이라이트
          + 신뢰성 & 강력함: 제품의 신뢰성과 강력함을 강조함.
          + Swadeshi DVECK: 제품의 특정 모델에 대한 정보 제공.
          + Apka Sathi: 또 다른 제품 모델에 대한 정보 제공.
     * 비즈니스 문의
          + 대량 구매 또는 딜러가 되기 위한 문의 가능.
     * 해외 문의
          + 해외로 수출을 원하는 경우 문의 가능.
     * 소매 문의
          + DVECK 구매 후 문의 사항에 대한 지원 제공.
     * 소셜 미디어 / PR
          + Dhruv Vidyut의 이야기를 다루고 싶은 경우 문의 가능.
     * 투자 문의
          + 투자자가 되어 함께 성장할 기회 제공.
     * CSR / NGO / 정부 기관
          + 사회적 목적을 위해 참여할 수 있는 기회 제공.
     * 소셜 미디어 팔로우
          + Dhruv Vidyut의 최신 소식을 쉽게 접할 수 있는 방법 제공.
     * 연락처
          + 이메일: dhruvvidyutdv@gmail.com
          + Whatsapp: +919205866479
     * © 2023 Dhruv Vidyut 모든 권리 보유. Webtrip.in에서 제공.

        Hacker News 의견

     * 데모 비디오가 매우 재미있고 제품이 견고함을 보여줌
          + Hilltoppers가 더 주목받지 못한 것이 놀라움
          + Hilltoppers는 기존 자전거의 앞바퀴를 교체하여 전기 자전거로 변환 가능함
     * 데모 비디오가 멋지며, 제품의 다양한 사용 사례를 보여줌
          + 제품이 실제로 유용하지 않더라도 비디오는 훌륭한 마케팅 도구임
          + 제품이 2년 전에 출시되었는데 현재 상태가 궁금함
          + Twitter에서 간헐적으로 활동을 볼 수 있음
     * 프로젝트가 인도와 관련이 있어 흥미로움
          + Vidyut는 힌디어로 전기, Dhruv는 별을 의미함
          + 인도에서 Dhruv는 흔한 이름이며, 프로젝트에 대한 존경을 표함
     * 홈페이지 상단의 데모 비디오가 제품의 사용 사례, 작동 방식, 주요 사양을 잘 설명함
     * 제품의 외관이 Fallout 세계를 연상시킴
          + 페달링으로 배터리를 충전하는 기능이 드문데, 25,000 mph 속도는 과장된 것 같음
          + 아마도 25 kph 속도를 의미하며, 이는 전기 자전거로서는 느린 편임
     * 체인링이 페달과 독립적으로 회전하는 것처럼 보임
          + 미국에서는 드문 방식이며, 다른 지역에서는 흔한지 궁금함
     * 배터리, 모터, 컨트롤러 등을 작은 패키지에 넣은 것이 인상적임
          + 미드 드라이브가 허브 드라이브보다 우수함
          + 페달 보조 기능이 있는지 궁금하며, 이는 법적 요구 사항일 수 있음
          + 비용, 무게, 배터리 용량에 대한 정보가 없음
          + 알루미늄 섀시 외의 대부분의 부품은 기성품일 것으로 추정됨
     * 강한 프레임이 필요하며, 허브 모터가 약한 프레임을 쉽게 손상시킬 수 있음
     * 기존 키트와 비교하여 바퀴를 교체하거나 하단 브래킷을 수정할 필요가 없는 흥미로운 대안임
          + 외부 충전기가 필요 없으며, C14 포트를 사용함
          + 배터리 셀 품질에 대한 의구심이 있으며, 무게가 다른 옵션보다 무거워 보임
          + 데모 비디오의 진흙과 불 장면이 인상적임
     * Sinclair Zeta를 연상시킴
          + 제품이 성공하기를 바람
"
"https://news.hada.io/topic?id=18885","Llama.vim – LLM을 이용한 VIM용 코드/텍스트 자동완성 플러그인 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Llama.vim – LLM을 이용한 VIM용 코드/텍스트 자동완성 플러그인

     * VIM내에서 로컬 LLM 기반의 텍스트 자동완성 기능을 제공
     * Insert 모드에서 커서 이동 시 자동 제안
     * Ctrl+F로 수동 제안 전환 가능
     * Tab으로 제안 수락
     * Shift+Tab으로 첫 번째 줄 제안 수락
     * 최대 텍스트 생성 시간 설정 가능
     * 커서 주변의 컨텍스트 범위 설정 가능
     * 열린 파일, 편집 중인 파일, 복사된 텍스트에서 컨텍스트 조각을 사용하여 컨텍스트 링 구성
     * 저사양 하드웨어에서도 스마트 컨텍스트 재사용을 통해 매우 큰 컨텍스트 지원
     * 성능 통계 표시

설치

     * vim-plug : Plug 'ggml-org/llama.vim'
     * Vundle :
          + ~/.vim/bundle로 이동 후 git clone https://github.com/ggml-org/llama.vim
          + .vimrc의 vundle#begin() 섹션에 Plugin 'llama.vim' 추가

llama.cpp 설정

     * 플러그인은 g:llama_config.endpoint에서 실행 중인 llama.cpp 서버 인스턴스를 필요로 함
     * Mac OS : brew install llama.cpp
     * 다른 OS : 소스에서 빌드하거나 최신 바이너리 사용: llama.cpp releases

llama.cpp 설정

     * VRAM 용량에 따른 추천 설정:
          + 16GB VRAM 이상: Qwen2.5-Coder-7B-Q8_0-GGUF
          + 16GB VRAM 미만: Qwen2.5-Coder-3B-Q8_0-GGUF
          + 8GB VRAM 미만: Qwen2.5-Coder-1.5B-Q8_0-GGUF
     * 자세한 내용은 :help llama 참조

추천 LLMs

     * FIM 호환 모델 필요: HF collection

구현 세부사항

     * 플러그인은 간단하고 가벼우며 소비자급 하드웨어에서도 고품질의 성능을 제공하는 로컬 FIM 완성을 목표로 함

기타 IDEs

     * VS Code: llama.vscode

        Hacker News 의견

     * 서버 구현의 기술적 세부 사항을 살펴보기를 권장하며, 이는 흥미롭고 멋진 아이디어를 포함하고 있음. 이 플러그인은 VS Code에서도 사용 가능함. 클라이언트 측 캐싱 덕분에 성능이 개선되었음.
     * 이 사용자는 오픈 소스 AI 생태계에 많은 기여를 했으며, 계속해서 소프트웨어를 개발하고 진정한 ""조건 없는"" 오픈 소스로 출시할 수 있도록 충분한 자금을 유치하기를 바람.
     * LLM 도구를 LSP, 컴파일러 및 기타 정적 분석 도구와 더 밀접하게 통합하면 더 많은 컨텍스트와 더 나은 출력을 제공할 수 있을 것이라고 생각함. 언어별로 LLM을 미세 조정하고 일반적인 편집기 도구와 함께 제공할 수 있다면 좋을 것임. AI 도구가 오래되고 인기 있는 언어에서 더 잘 작동하는 문제를 지적하며, 이는 언어 선택 시 중요한 요소가 될 수 있음. Gleam 전용 모델을 설치하여 LSP 및 컴파일러에서 데이터를 받아 잘못된 구문을 생성하지 않도록 할 수 있다면 좋겠다고 생각함.
     * ""링 컨텍스트""가 어떻게 작동하는지 궁금해하며, 유사한 프로젝트에서 KV 캐시를 관리하는 방법에 대한 해결책을 제안함. 토큰의 트리를 유지하고, 고정 깊이 간격에서 전체 LLM 상태 스냅샷을 저장하여 버퍼가 변경될 때 몇 개의 토큰만 ""재생""하도록 함. 중요한 상태 부분이 어떻게 작동하는지에 대한 수학적 특성이 있을 수 있다고 생각함.
     * 데모 비디오의 깜박이는 커서가 심장 두근거림을 유발하지만 매우 멋지다고 생각함. Linux가 M* 하드웨어에서 어떻게 작동하는지 궁금해함.
     * 이 플러그인이 VSCode 버전과 동일한지 궁금해함.
     * 소비자용 하드웨어와 양자화 개선으로 향후 10년 동안 어떤 것이 가능할지 궁금해함. 현재 24GB GPU로도 호스팅 서비스의 성능을 따라잡지 못함.
     * 터미널 코딩을 선호하며, 막히면 askds를 사용하여 터미널에서 더 깊은 분석을 수행할 수 있음.
     * 중간급 하드웨어에서 llama를 사용할 수 있는지 궁금해하며, RAM 부족으로 인해 충돌한다고 생각함. 2G VRAM과 16G 시스템 RAM으로는 충분하지 않다고 느끼며, 대부분의 Apple 제품에서는 메모리가 통합되어 작동하지만, 그렇지 않으면 많은 VRAM을 가진 비싼 Nvidia GPU가 필요하다고 생각함. 저렴한 옵션이 있는지 궁금해함.
     * 이 분야에 대해 아는 사람에게 조언을 구하며, 적당한 가격의 그래픽 카드를 구매하여 로컬 LLM을 실행할 수 있는 방법을 찾고 있음.
"
"https://news.hada.io/topic?id=18817","Show GN: 오늘의위키: Gemini AI로 업데이트하는 신개념 위키 (베타)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: 오늘의위키: Gemini AI로 업데이트하는 신개념 위키 (베타)

   개요
     * '오늘의위키'는 AI가 직접 위키를 쓰고, 고치고, 업데이트하는 새로운 형태의 위키 서비스
     * Google의 Gemini AI 모델을 활용

   핵심 기능 및 특징
     * AI 기반 자동화: Gemini AI가 위키 페이지를 자동으로 생성 및 업데이트. 사람이 직접 편집에 참여하지 않음.
     * 실시간 뉴스 기반 업데이트: 실시간 뉴스 RSS를 수집, 분석하여 위키 페이지에 반영. 최신 정보를 빠르게 반영하는 것이 특징.
     * 중립성: AI를 활용, 편집 과정에서 인간의 주관 개입을 최소화하여 중립성을 높이고자 함.
     * Wikipedia 기반 데이터 활용: Wikipedia 데이터를 포크, 여러 언어 자료를 번역 및 통합하여 초기 콘텐츠로 사용.
     * 뉴스 본문 반영 및 최신화: 수집된 뉴스의 본문이 반영되고, 시간에 따라 내용이 업데이트. (현재 일부 페이지만 적용중)
     * 자체 블로그 연계(예정): 자체 블로그 글을 위키 콘텐츠로 활용, 해당 글은 위키 내 레퍼런스 링크로 추가할 계획.

   기존 위키와 차별점
     * 기존 위키(나무위키, 위키피디아 등)는 편집 과정에서 발생하는 편향성, 가짜 뉴스 문제가 고질적 이었음.
     * '오늘의위키'는 AI를 활용해 이 문제를 개선하고, 신뢰성을 높이고자 함.

   향후 계획
     * 전체 페이지 실시간 업데이트: 현재 일부 페이지만 적용 중인 실시간 업데이트를 전체 페이지로 확장.
     * 다국어 지원: 현재 한국어만 지원하나, 향후 다른 언어로 서비스 영역을 확대할 계획.

   위키보다는 AI 중립 뉴스가 더 적절한 표현이 아닐까 생각해봅니다. Consumer 와 Producer 가 일치할 수 있어야 wiki 라고 부를 수 있을 것 같은데, 이건 단순히 AI 가 준 정보를 consume 만 할 수 있는 것 같아서요.

   저도 비슷한 프로젝트를 만들기 위해 시도한 적이 있었는데.. 오히려 저는 ""중립성""이 아닌 ""주체성""을 강조해서 저 개인의 철학을 많이 반영하는 방향으로 갔었어요.
   TTS + 스트리밍까지 결합한 프로젝트였는데.. 저의 게으름으로 인해 완성될 기미가 없네요^^

   ""AI 위키""가 아니라 ""AI 편집장""이란 발상이었습니다 ㅎㅎ

   기본적인 내용은 아래 댓글들에 있는대로인데..
   이름은 여전히 고민입니다 ㅎㅎ

   참신합니다

   감사합니다. 앞으로 많은 관심 부탁드립니다.

   ai 모델을 여러 종류를 사용해서 서로 수정하고 완성해나가는 형태로 하면 어떨지 모르겠네요

   사실 여러가지 모델을 사용해서 서로 토론을 시켜도 좋긴 한데, 제가 Gemini 를 메인으로 쓰기도 하고, 토론 자체가 상당한 .. 비용 문제를 일으켜서 고민은 해보도록 하겠습니다.

   재미있는 아이디어네요. 잘 봤습니다!
   하나 제안 사항이 있다면 실제 위키와 같이 논란이 될 만한 주제에 대해서 여러 제미니끼리 토론을 열도록 하면 중립성을 강화할 수 있지 않을까 싶습니다.

   작업을 진행하면서 보니까, AI 모델의 종류보다 훨씬 중요한건 ""소스"" 더라구요.
   처음부터 어떤 소스를 입력하냐가 제일 중요한 중립성의 가장 키 포인트라는 생각이 들었습니다.
   이 경우에는 ""어떤 언론 매체""냐...라는것일겁니다.

   아이디어가 좋아요! Wikipedia의 경우 일정 분량이 넘어가면 split, 같은 parent를 가진 문서의 분량이 적을 경우 merge 하기도 합니다. 이런 정책도 반영되면 좋겠어요

   감사합니다.
   해당 부분이 사실 기술적으로 가장 난제였어요.
   기존의 글을 업데이트 하는 부분이야 사실 뉴스에서 가져다가 정보를 업데이트하고, <ref /> 추가하는건 크게 어려운게 아니었는데, 일정 분량의 내용이 되면 읽기가 너무 힘들어지니 ( 지금 그런글이 좀 많습니다. ) 그런 경우 split 하거나, 하위 문서 형태로 분할 하는 방식을 써야 하는데, 그게 제일 어려운 부분이었고, 지금 방법을 찾아서 구현 작업중이긴 합니다. ( 비슷한 이슈로. 신조어들이 있어요. 어떤 경우에 신조어를 새 표제어로 추가할지 .. 그런 부분들도 쉽지 않더라구요. )

   해당 내용이 정리된 Wikipedia 문서도 참고하시면 좋을 것 같습니다.

   참고는 했었는데, ""기술적""으로 접근이 쉽지 않았어요.. 어느정도 윤곽은 나온 상태라 이제 시도해보려고 합니다.
   조언 감사합니다.

     중립성: AI를 활용, 편집 과정에서 인간의 주관 개입을 최소화하여 중립성을 높이고자 함.
     기존 위키(나무위키, 위키피디아 등)는 편집 과정에서 발생하는 편향성, 가짜 뉴스 문제가 고질적 이었음

   수정전쟁이나 가짜뉴스는 사람의 문제이고 LLM은 입력 데이터의 영향을 받으니 기술로 해결할 수 있는 문제가 아닌것으로 보이는데요. 어떻게 생각하시나요?

   맞습니다. 흔히 이야기 하는 ""고지전""이 벌어지면 더 이상 기술의 문제도 아니고, 대개의 경우 합의를 통해 ""정책""적으로 해결하곤 하죠. 다만, 그 고지전을 위키 서비스내에서가 아니라, 외부로 돌리는게 낫지 않겠나..하는 생각을 해봤습니다.
   내부에서 수정에 수정을 하는것보다는 외부에서 뉴스나 블로그 등에서 자신의 ""정당한 의견""을 피력하는것이 좀 더 나은 방향이 아닐까 생각했습니다.

   여전히 가짜 뉴스와 편향성은 고쳐지지않을 것이라고 생각되지만
   고지전을 위키 밖으로 돌린다는 아이디어는 매우 좋다고 생각되네요
   해당 제품이 어서 커서 언론사들의 군웅할거가 기대됩니다.

   사실, 서비스 입장에서야 고지전을 ""내부""에서 하는게 트래픽에 훨씬 도움이 되는것은 사실입니다만, 서비스를 벗어나 생태계 전체로 보면, 인터넷에서 각자가 자신의 의견을 올리는게 훨씬 낫다는 생각을 해봤습니다.

   이전에도 위키들의 신뢰성 부분에 여러 이슈들이 있었지만, 그럼에도 불구하고 위키 시스템은 특정 사건에 대한 컨텍스트 정보를 주는 주요 도구로 자리 매김을 했던 것 같습니다.
   현재 위키들이 가진 이슈를 해결하는 차세대 위키로 성장하시길 응원합니다

   응원 감사합니다. 기대에 부응하겠습니다.

   오 신선하네요. 개인적으로는 TOC가 본문 외 레이아웃에 표시되어 있는걸 선호하는편입니다.

   아직 파일럿에 가깝긴 합니다만, 반드시 UI/UX 는 업데이트를 할 예정인데, 업데이트 할때 고려하도록 하겠습니다.

   AI에 설정하는 가중치나 파라미터 등이 오히려 공개 되지 않고, 작성과정, 토론과정이 빠진 결과물만 올라오는 것도 위키라고 해야 될지도 고민은 필요할거 같아요. 장단점들은 있지만 결과적으로 위키는 해당 문서의 히스토리까지 모두 공개되고, 사용자의 참여를 통해 완성되어가는걸 베이스로 하는건데 지금 서비스는 결국 AI가 작성해서 올리는 블로그, AI작성하는 기사들과 템플릿만 다른 형태와 차이가 없다고 느껴지기도 합니다.

   저도 제일 고민 했던 부분중의 하나가 ""이름""이긴 합니다. 이게 위키가 진짜 맞나.. 싶어서.
   위키라는게 사실 ""모두가 같이 수정하면서 만들어가는 백과사전"" 인데...
   아직은 적절한 카테고리를 못 찾아서 더 고민을 많이 했습니다. ( 아직도요.. )
"
"https://news.hada.io/topic?id=18890","Show GN: Snap Scope - 렌즈 초점거리 사용 분포 한눈에 보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: Snap Scope - 렌즈 초점거리 사용 분포 한눈에 보기

   안녕하세요. 사진을 찍다가 필요를 느껴 만든 도구를 하나 소개합니다.

   이름은 Snap Scope 입니다. 사진의 메타데이터(EXIF 데이터)를 분석해 자주 사용하는 렌즈 초점거리 분포를 시각화해주는 웹앱입니다. 주로 사용하는 초점거리를 알고싶다거나, 다음 렌즈를 구매할 때 고민이 되시는 분들에게 도움이 될 것이라 생각합니다.

   솔직히... 사진이라는 분야에 한정적이라 필요한 분들이 얼마나 있을지는 모르겠지만 ㅎㅎ 저는 렌즈를 선택할 때 항상 고민이 많았고, 실제로 어떤 초점거리를 많이 쓰는지 알고 싶은 상황이 많았어요. 저처럼 궁금하셨던 분들이라면 재미있게 써보실 수 있을 것 같아요.

   주요 특징:
     * 초점거리 사용 패턴을 한눈에 파악
     * 수천 장의 사진도 한 번에 분석 가능
     * 모든 처리를 브라우저에서만 수행 (외부 서버 전송 X / 사용자 추적 X)
     * 깔끔한 시각화 & 공유 가능한 요약 이미지 제공

   사용해보기: https://snap-scope.shj.rip/?lng=ko
   GitHub: https://github.com/Gumball12/snap-scope
"
"https://news.hada.io/topic?id=18884","Bun 1.2 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Bun 1.2 릴리즈

     * Node.js 호환성 대폭 업데이트
     * 자체 S3 객체 저장소 API 추가 : Bun.s3
     * 자체 Postgres 클라이언트 추가 : Bun.sql (MySQL도 곧 지원예정)
     * bun install 이 이제 text 기반의 lockfile 사용 bun.lock
     * Express 가 Bun에서 3배 빠르게 실행
"
"https://news.hada.io/topic?id=18823","제품 보안에 있어 나쁜 방식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            제품 보안에 있어 나쁜 방식

제품 자체에 있어

  메모리에 안전하지 않는 언어(C, C++ 등)

   가급적 메모리에 안전한 단어를 쓰고, 그러지 않은 기존 프로그램은 2025년 말까지 점진적으로 대체해야 합니다.

  SQL 명령문 직접 실행

   매개변수화된 쿼리, 미리 정의된 명령문이나 ORM을 쓰세요.

  운영체제 명령 직접 실행

   사용자가 입력할 내용이 명령 자체가 아니어야 합니다. 명령을 바로 실행하는 대신 내장된 라이브러리 함수를 사용하거나 입력에 영문/숫자/밑줄만 허용하게 만들어야 합니다.

  너무 유명한 비밀번호 사용

   아래와 같은 방법으로 가급적 피하게 만들어야 합니다.
     * 처음부터 고유의 암호를 제공합니다.
     * 설치 중 사용자가 강력한 암호를 생성하도록 요구합니다.
     * MFA처럼 암호에 시간 제한을 설정합니다.
     * 확실한 자격을 얻기 위한 물리적 접근을 요구합니다.
     * 캠페인을 벌이거나 기존보다 안전한 인증 방식으로 전환합니다.

  알려진 취약점 방치

   해당 페이지에 나와 있는 취약점은 ""모두"" 방지되어야 합니다. 새로운 취약점이 보고될 경우 이를 적시에 해결하고, 해결된 버전을 업데이트하지 않는 사용자에게 경고를 줘야 합니다.

  취약점이 있는 오픈 소스 라이브러리

   사용하고 있는 라이브러리에 책임감 있게 해당 사항을 알리고 기여해야 합니다. 다음과 같은 조치도 포함합니다.
     * SBOM 작성: 소프트웨어가 어떤 라이브러리를 사용하는지 보여줍니다.
     * 의존하는 오픈 소스 라이브러리에 적용할 사안
          + 보안 검사를 실시합니다.
          + 지속적이고, 잘 보호되고, 잘 유지보수하고 있는 질 좋은 프로젝트를 선택합니다. 이런 보안 원칙을 지키는 것도 좋습니다.
          + 잘 알려진 취약점이 있는지 꾸준히 조사해야 합니다.
          + 복사본을 제조업체가 미리 가지고 있어야 하고, 검증되지 않은 곳에서 업데이트하지 말아야 합니다.
     * 새로운 주요 버전으로 업데이트하거나 보안 패치를 받는 비용을 감안해야 합니다.
       만약 취약점이 제품에 영향을 끼치지 않을 경우, 그 취약점이 왜 영향을 끼치지 않는지 공개적으로 알려야합니다.

  취약점이 있거나 알려지지 않은 암호화 알고리즘(TLS 1.0/1.1, DES, MD5 등)

   최신 알고리즘을 사용해야 합니다. 추가로 NIST의 지침에 따라 표준화된 양자 암호화 알고리즘도 준비해야 합니다.

  소스 코드에 들어 있는 비밀 키

   비밀 관리자(Secret Manager)를 이용해 프로그램이 비밀 키를 안전하게 검색할 수 있게 만들어야 합니다. 또한 소스 코드에 비밀 키가 있는지 검사해야 합니다.

보안 기능에 있어

  MFA 미지원(패스키만 지원하는 것도 포함)

   응급실 의료기기같이 지연되면 위험한 것을 제외하고, 기본적으로 MFA를 직접 만들거나 외부 인증기를 사용하도록 해야 합니다. 이를 관리자에게 요구해야 하며, 관리자는 조직 내 사용자에게 이를 요구해야 합니다.

  침입 증거 미제공

     * 매우 기초적인 기능으로서, 설정의 변경이나 조회, 로그인 이력, 정보 접근과 관련된 로그를 생성해야 합니다.
     * 클라우드 제공사의 경우, 추가 비용 없이 최소 6개월 동안 이러한 로그를 보관, 사용자가 볼 수 있도록 만들어야 합니다.

조직 프로세스 및 정책에 있어

  CVE 미발행

   치명적이거나 큰 영향을 줄 수 있는 취약점은 즉시 공개되어야 합니다.

  취약점 공개 방식(VDP) 미공개

   다음과 같은 정책을 공개해야 합니다.
     * 일반 대중의 테스트 승인
     * 선의의 노력을 기울이는 사람에 대해 법적 조치하지 않을 것을 약속
     * 보고할 수 있는 명확한 채널
     * CVD(Coordinated Vulnerability Disclosure) 모범 사례 및 국제 표준
       보고된 취약점을 적시에, 위험도 순으로 수정해야 합니다.

  (온 프레미스의 경우) 불명확한 지원 기간

   명확하게 지원 기간을 전달하고, 그 기간 동안 보안 업데이트를 제공해야 합니다.


     * 카카오톡에서 원클릭 익스플로잇
     * GN⁺: NIST(미국 국립표준기술연구소), 특정 비밀번호 문자 구성 요구 금지
     * 백악관, 개발자들에게 C와 C++를 피하고 '메모리 안전' 언어 사용 촉구
     * 내 차 해킹하기 : 현대 아이오닉: 소스 코드에 구글로 검색 가능한 RSA 암호문이 발견됨

   보안은, 아차하는 순간,,! (이라는걸 군대에서 본것같은데)

   좋아요 찬성해요
   사용자가 강력한 암호를 생성하도록 요구 != 특수문자, 영어대소문자, 숫자 반드시 포함
   그냥 길이 적당히 길기만 해도 강력한 암호입니다.

   이런 지침을 바라보는 여러 입장을 봐 왔지만
    1. 이런 건 기본 아니야? 이걸 누가 안 지켜?
    2. 당연히 지키지 (일부 항목 예외 처리)
    3. 원칙인 건 알지. 근데 그거 하나하나 언제 다 맞추고 지켜.
    4. 그거 아무 쓸모 없어. 보안 그렇게 챙겨 놔도 어차피 뚫리는데?

   이렇게 의견이 갈리더라구요.

   이쪽 일을 하기에 마음은 1번인데 현업 일하면서 3,4번 입장을 가지신 분들이
   강경할 때마다 매번 마음이 꺾입니다. 2번 정도만 되어도 좋을텐데 말이죠.

   중꺾마!

   다시 ORM쓰지 말자는 이야기가돌던데..

   ORM 대신 Prepared Statement를 쓰면됩니다.

   zzz

   뭐든 원칙은 있죠 지키기 어려울뿐...
"
"https://news.hada.io/topic?id=18889","JavaScript Temporal이 옵니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        JavaScript Temporal이 옵니다

    1. 개요

     * JavaScript Temporal 객체의 구현이 브라우저의 실험적 버전에서 출시되기 시작
     * 웹 개발자들을 위한 날짜와 시간 처리가 크게 단순화되고 현대화될 예정
     * 스케줄링, 국제화, 시간 관련 데이터를 다루는 애플리케이션에서 효율적이고 정확한 내장 기능 사용 가능

    2. JavaScript Date 객체의 문제점

     * 1995년 Java의 초기 java.util.Date 구현을 복사해 만들어짐
     * 사용자의 로컬 시간과 UTC만 지원하고 시간대 지원이 없음
     * 파싱 동작이 매우 불안정하고 가변적(mutable)
     * 일광절약시간(DST)과 역사적 달력 변경 계산이 어려움

    3. Temporal의 주요 기능

     * Date 객체의 완전한 대체제로 설계
     * 시간대와 달력 표현 지원
     * 200개 이상의 유틸리티 메서드 제공
     * 변환, 비교, 계산, 포맷팅 등 다양한 기능 포함

    4. 브라우저 지원 현황

     * Firefox가 현재 가장 성숙한 구현을 보유
     * Firefox Nightly 버전에서 실험적 기능으로 제공
     * Safari와 Chrome도 구현 진행 중
     * TC39 문서 페이지에서 @js-temporal/polyfill을 통해 시험 가능

    5. 핵심 구성 요소

     * Duration: 두 시점 간의 차이
     * Instant: 타임스탬프
     * ZonedDateTime: 시간대가 있는 날짜/시간
     * PlainDateTime: 시간대 없는 날짜/시간
     * 기타 다양한 날짜/시간 관련 클래스 제공

   이 새로운 API는 JavaScript에서 날짜와 시간을 다루는 현대적인 접근 방식을 제공할 것으로 기대됩니다.

   어어 어디서 많이 들어본...

   LocalDateTime을 PlainDateTime으로 바꾼거 빼곤 자바랑 똑같은…
   있으면 좋긴한데… 이렇게까지 할일인지는…

   기존에 여러 타임존에 따른 시간관리를 하려면 라이브러리를 쓰거나 기본적으로 여러 조건을 생각해서 구현해야했는데 기본적으로 지원해주는 방향으로 가면 좋지요
     * Deno 1.40 릴리즈 : Temporal API
     * Temporal : JS의 새로운 Date Time API
     * GN⁺: JavaScript Dates가 드디어 수정 될 예정

   너무 늦게 온 썸남 답톡

   처음 Date 구현도 자바 가져오고 Temporal 구현도 자바를 많이 가져왔는데 이럴거면 이렇게 오래 걸릴 일인가 싶네요.
   LocalDateTime 들어간 Java 8이 2014년이니까 이거 기반으로 Temporal 구현이 빨리 나왔으면 다양한 서드파티 라이브러리로 파편화될 필요가 없었을 듯 합니다.
"
"https://news.hada.io/topic?id=18825","물리 SIM 슬롯만 있는 폰에서 9eSIM으로 eSIM 사용하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  물리 SIM 슬롯만 있는 폰에서 9eSIM으로 eSIM 사용하기

     * 물리적 SIM 슬롯만 있는 장치에서 eSIM을 사용하기 위해 9eSIM의 SIM 카드를 사용하는 방법
     * 9eSIM 공식 웹사이트에서 SIM 카드와 스마트카드 리더 번들을 구매
          + 일반/마이크로/나노 크기로 떼어낼 수 있는 SIM 카드
          + SIM 카드를 스마트카드 리더에 맞게 끼우는 어댑터
          + USB 스마트카드 리더 (USB-A to USB-C 변환 어댑터 포함)
     * 총 비용은 배송료 포함 약 30파운드 정도

SIM 패키지를 사용해 스마트카드 리더에 장착하기

     * 스마트카드 리더에 SIM을 직접 끼우면 접점이 맞지 않아 인식이 안 되는 문제를 겪었음
     * 원래 SIM 카드가 부착되어 있던 종이 패키지를 그대로 리더에 함께 밀어넣으면 접점이 안정적으로 맞음
     * 이 방식을 사용해 처음부터 세트로 포장된 그대로 장착하면 쉽게 인식 가능함

eSIM 프로필 추가 및 전환

     * 9eSIM SIM은 최대 1.6MB 메모리를 갖추어 최대 50개의 eSIM 프로필을 저장할 수 있음
     * ‘Local Profile Agent(LPA)’를 이용해 eSIM 프로필을 다운로드하고 활성화/비활성화할 수 있음
     * Android, Linux 환경에서 모두 프로필 추가 및 전환 테스트를 진행했음

무료로 테스트할 수 있는 eSIM 프로필

     * 상용 eSIM 구매 전, 무료 테스트 프로필로 연습 가능함
     * Android 공식 테스트 eSIM 프로필(4종)이 있으나 TLS 오류로 다운로드 불가했음
     * osmocom 문서에 언급된 TruPhone 테스트 프로필 설치를 시도했고 정상적으로 프로비저닝되었음
     * 통화나 데이터 사용은 불가하지만, 기기 내 ‘SIM 관리’에 프로필이 나타나는지 확인 가능함

Android에서 eSIM 추가 및 전환

     * 9eSIM에서 제공하는 .apk를 통해 간단히 LPA 기능을 실행 가능함
     * SIM 카드를 안드로이드 기기에 넣은 후 앱에서 QR 코드를 스캔해 프로필을 다운로드하는 방식으로 동작함
     * 스마트카드 리더를 USB-C 허브에 연결해 안드로이드 기기에서 직접 프로비저닝하는 것도 가능함
     * 앱 내에서 eSIM 프로필을 활성/비활성하거나 삭제 가능함
          + 삭제 시 보안 문구(프로필 이름)를 입력해야 실수 방지가 됨

Linux에서 eSIM 추가 및 전환

     * 노트북 내 WWAN 모뎀에 삽입한 상태에서 eSIM 프로필을 직접 쓸 수 있는 방법은 찾지 못함
     * 대신 SIM 카드를 꺼내 스마트카드 리더에 연결한 후 LPA 툴로 프로필을 다운로드하는 방식을 사용함
     * 오픈소스 툴인 lpac와 GUI 버전인 EasyLPAC를 활용할 수 있음
          + lpac는 CLI 기반 도구이며, JSON 포맷 출력 제공
          + EasyLPAC는 GUI 형태로 QR 코드 스캔이나 클립보드에서의 LPA 코드 인식을 지원함
     * 명령어 예시
lpac profile list | jq
lpac profile download -s rsp.truphone.com -m QRF-SPEEDTEST
lpac profile enable <ICCID/AID>
lpac profile disable <ICCID/AID>

     * QR 코드 기반 “LPA:1$…” 형태의 코드는 따옴표로 감싸야 인식됨

Linux에서 데이터 연결 성공

     * LycaMobile eSIM 프로필을 다운로드한 뒤 노트북에 SIM을 장착해 부팅했음
     * Mobile Network 설정에서 인식되었고, APN만 수동으로 설정하면 데이터 연결이 정상적으로 이뤄짐
     * Debian 환경에서 별다른 문제 없이 브라우징 가능했음

기타 관련 사항

     * sysmocom에서 제공하는 sysmoEUICC1 SIM 같은 대안 제품도 존재함
     * eSIM을 물리 SIM처럼 사용하는 방식은 여러 시나리오에 유용할 것으로 보임

   오.. 이거 하나 해두면 해외여행 시에 매번 심을 사지 않아도 될 수 있겠네요.

   10년쯤 전에 여러장의 신용카드를 읽어서 한장으로 쓸수 있게 해준다 했던 Coin 이란 카드가 생각나네요. 끝내 못나오고 먹튀했던 것으로..
   이건 이미 동작도 하는 것이고 50개 까지 eSIM 프로필 저장이 가능하니 나름 쓸모가 있을지도 모르겠어요.

   https://youtu.be/KbvR6xlPsXc
   https://www.ycombinator.com/companies/coin

   먹튀를 여기에 무슨 의미로 쓰신 건지 모르겠지만 최소한 출시는 했고 이후 핏빗에 인수됐습니다

   어라 저랑 제 주위에 주문한 분들은 못받았습니다. 제가 소개했는데 인터내셔널 주문쪽은 리펀드도 제대로 안되어서 제가 미안했던 기억이 있네요.

   수정: 메일함 찾아보니 결국 마지막에는 ”보안정책상 미국사회보장번호 없으면 사용불가야“ 이러고 답변이 왔네요. 그러고 환불이 일부만 되어서 제가 그렇게 기억했나봅니다.

     I apologize wholeheartedly for the inconvenience, but at the time we started pre-orders we did not realize our third party verification processor was going to require our backers to have a social security number. For security reasons, the Coin mobile app requires U.S. based information such as a Social Security number to verify user identity and to keep the ecosystem secure.

        Hacker News 의견

     * 한 사용자는 GLiNet Mudi v2와 EIOT Physical eSim을 사용하여 eSIM 여행 라우터 설정을 완성했음
          + Airalo의 20GB 글로벌 eSIM을 구매하여 Mudi 라우터에 QR 코드를 업로드하고 활성화함
          + 필요 시 WireGuard를 통해 미국 인터넷에 연결할 수 있으며, Tailscale도 사용 가능함
     * 다른 사용자는 독일에서 새로운 eSIM 전용 카드를 구매했음
          + GMX FreePhone이라는 카드로 매달 3GB 데이터와 무제한 SMS 및 통화를 무료로 제공함
          + 앱을 속이기 위해 Frida와 Android 에뮬레이터를 사용하여 eSIM을 활성화함
     * eSIM 대안으로 여러 웹사이트를 소개함
          + esim.5ber.com, esim.me, jmp.chat/esim-adapter 등
     * 한 사용자는 Qualcomm SoC 기반의 4G/LTE 모뎀을 사용하는 노트북에서 직접 프로비저닝을 할 수 있는 문서를 공유할 수 있다고 언급함
          + Qualcomm 펌웨어 번들에 이 기능이 포함되어 있으며, 벤더에 따라 포함 여부가 달라질 수 있음
     * ESTK와 sysmoEUICC에 대해 언급하며, 클라우드 프로비저닝 기능을 지원한다고 설명함
          + iPhone에서도 eSIM 프로필을 추가할 수 있음
     * eSIM과 WiFi 통화를 사용하여 로밍을 피할 수 있는지에 대한 질문을 제기함
          + 독일에서 eSIM을 구매하고 미국에서 Tailscale을 사용하여 독일에서 발급된 eSIM으로 통화할 때 로밍이 발생하지 않는지 궁금해함
     * 물리적 SIM 카드가 필요한 경우를 언급하며, eSIM만 지원하는 기기에서 물리적 SIM 카드를 사용할 수 있는 방법에 대해 궁금해함
     * JMP eSIM Adapter를 사용하면 오픈 소스 앱을 사용할 수 있으며, 직접 빌드한 앱도 사용할 수 있다고 설명함
     * eSIM을 SIM 장치에서 사용하는 것보다 SIM을 eSIM 장치에서 사용하는 것이 더 일반적일 것이라고 언급함
"
"https://news.hada.io/topic?id=18826","[2025/01/13 ~ 01/19] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2025/01/13 ~ 01/19] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주에 선정된 논문의 두드러진 경향은 대형 언어 모델(LLM, Large Language Models) 및 멀티모달 AI에 관한 연구가 활발하다는 점입니다. 예를 들어, ""Self-Adaptive LLMs"", ""Foundations of LLMs"", ""Enhancing RAG"", ""VideoRAG""과 같은 논문들이 LLM 및 멀티모달 학습 관련 주제를 다루고 있습니다. 또한 ""Imagine while Reasoning in Space"", ""OmniThink""와 같은 논문들도 다양한 형태의 데이터를 활용하여 복합적인 문제 해결을 시도하는 멀티모달 접근 방법을 탐구하고 있습니다.
     * 이러한 경향은 현재 AI 연구 커뮤니티 내에서 언어 모델의 중요성과 다양한 데이터를 조합하여 더 포괄적인 이해를 이루려는 노력이 증가하고 있다는 것을 의미합니다. LLM은 자연어 처리(NLP)의 최첨단을 이끌고 있으며, 이러한 기술을 더욱 발전시키기 위해서는 멀티모달 데이터를 활용한 통합적인 접근이 필요하다는 인식이 확산되고 있는 것으로 보입니다. 특히, 멀티모달 AI는 이미지를 통한 이해와 자연어를 통한 이해를 조합하여 더 복잡한 문제를 해결하는 데 중요한 역할을 하고 있습니다.
     * 결론적으로, 이번 주의 논문들은 AI 연구의 중심이 대형 언어 모델과 멀티모달 학습에 집중되고 있음을 보여줍니다. 이는 AI가 단순히 텍스트 처리에 머무르지 않고, 시각적 정보와의 융합을 통해 더욱 지능적이고 복합적인 문제 해결을 가능하게 하려는 방향으로 나아가고 있음을 시사합니다. 따라서 이러한 연구는 앞으로 AI 기술의 발전에 큰 영향을 미칠 것으로 기대됩니다.


  $\text{Transformer}^2$: 자체 적응형 LLM / $\text{Transformer}^2$: Self-adaptive LLMs

    논문 소개

   가중치 매트릭스의 단일 구성 요소를 선택적으로 조정하여 보이지 않는 작업에 대해 실시간으로 LLM을 조정하는 새로운 자체 적응 프레임워크인 $\text{Transformer}^2$ 를 소개합니다. 이는 두 가지 주요 단계로 구축됩니다: 1) 들어오는 작업의 속성을 분석하고 식별하는 디스패치 시스템, 2) 강화 학습을 통해 훈련된 ""전문가"" 벡터를 결합하여 작업별 동작을 생성하는 단계로, 더 적은 수의 매개변수로 LoRA보다 효율적이며 다양한 LLM 아키텍처에서 작동할 수 있다고 주장합니다.

     Introduces $\text{Transformer}^2$, a novel self-adaptation framework that adapts LLMs for unseen tasks in real-time by selectively adjusting singular components of their weight matrices; it’s built with two key phases: 1) a dispatch system that analyzes and identifies the properties of the incoming task, and 2) a step that combines ""expert"" vectors (trained via reinforcement learning) to create task-specific behaviors; claims to be more efficient than LoRA with fewer parameters and can works across different LLM architectures.

    논문 초록(Abstract)

   자가 적응형 대규모 언어 모델(LLM)은 다양한 작업을 처리하는 데 있어 계산 집약적이고 정적인 기존의 미세 조정 방법에서 발생하는 문제를 해결하는 것을 목표로 합니다. 여기서는 가중치 행렬의 단일 구성 요소만 선택적으로 조정하여 보이지 않는 작업에 대해 실시간으로 LLM을 조정하는 새로운 자체 적응 프레임워크인 $\text{Transformer}^2$를 소개합니다. 추론 과정에서 $\text{Transformer}^2$는 2패스 메커니즘을 사용합니다. 먼저 디스패치 시스템이 작업 속성을 식별한 다음, 강화 학습으로 훈련된 작업별 '전문가' 벡터를 동적으로 혼합하여 들어오는 프롬프트에 대한 목표 동작을 얻습니다. 이 방법은 더 적은 매개변수와 더 높은 효율성으로 LoRA와 같은 유비쿼터스 접근 방식보다 성능이 뛰어납니다. text{Transformer}^2$는 비전 언어 작업을 포함하여 다양한 LLM
   아키텍처와 양식에 걸쳐 다용도로 사용할 수 있습니다. text{Transformer}^2$는 LLM의 적응성과 작업별 성능을 향상시킬 수 있는 확장 가능하고 효율적인 솔루션을 제공하여 진정한 의미의 동적이고 자기 조직적인 AI 시스템을 위한 기반을 마련하는 중요한 도약을 의미합니다.

     Self-adaptive large language models (LLMs) aim to solve the challenges posed by traditional fine-tuning methods, which are often computationally intensive and static in their ability to handle diverse tasks. We introduce $\text{Transformer}^2$, a novel self-adaptation framework that adapts LLMs for unseen tasks in real-time by selectively adjusting only the singular components of their weight matrices. During inference, $\text{Transformer}^2$ employs a two-pass mechanism: first, a dispatch system identifies the task properties, and then task-specific ""expert"" vectors, trained using reinforcement learning, are dynamically mixed to obtain targeted behavior for the incoming prompt. Our method outperforms ubiquitous approaches such as LoRA, with fewer parameters and greater efficiency. $\text{Transformer}^2$ demonstrates versatility across different LLM architectures and modalities, including vision-language tasks. $\text{Transformer}^2$ represents a significant leap forward,
     offering a scalable, efficient solution for enhancing the adaptability and task-specific performance of LLMs, paving the way for truly dynamic, self-organizing AI systems.

    논문 링크

   https://arxiv.org/abs/2501.06252

    더 읽어보기

   https://discuss.pytorch.kr/t/…

   https://x.com/hardmaru/status/1879331049383334187


  MiniMax-01: 번개처럼 빠른 속도로 확장되는 파운데이션 모델 / MiniMax-01: Scaling Foundation Models with Lightning Attention

    논문 소개

   전문가 혼합을 통합한 새로운 모델 시리즈 도입, 32명의 전문가와 456억 개의 매개변수가 있는 모델 도입, 각 토큰에 대해 459억 개의 매개변수가 활성화됨, 클레임이 GPT-4o 및 Claude-3와 같은 최신 모델의 성능과 일치함.5-Sonnet은 20~32배 더 긴 컨텍스트 윈도우를 제공하면서 최대 400만 개의 토큰을 처리할 수 있으며, 선형 주의와 최적화된 하드웨어 활용을 통합하여 LLM의 효율성과 확장성을 향상시키고, 512억 개의 비전 언어 토큰으로 지속적인 훈련을 통해 구축한 MiniMax-VL-01이라는 비전 모델도 있습니다.

     Introduces a new series of models that integrate Mixture-of-Experts; introduces a model with 32 experts and 456B parameters, and 45.9B are activated for each token; claims match the performance of state-of-the-art models like GPT-4o and Claude-3.5-Sonnet while offering a 20-32x longer context window; it can handle context windows of up to 4 million tokens; it integrates linear attention with optimized hardware utilization which enhances the efficiency and scalability of the LLM; there is also a vision model called MiniMax-VL-01 built through continued training with 512 billion vision-language tokens.

    논문 초록(Abstract)

   더 긴 컨텍스트를 처리하는 데 탁월한 성능을 제공하면서도 최상위 모델과 견줄 수 있는 MiniMax-Text-01과 MiniMax-VL-01을 포함한 MiniMax-01 시리즈를 소개합니다. 핵심은 번개처럼 빠른 처리 속도와 효율적인 확장성에 있습니다. 계산 용량을 극대화하기 위해 전문가 혼합(MoE)과 통합하여 32명의 전문가와 총 4560억 개의 매개변수로 구성된 모델을 만들고, 이 중 459억 개가 각 토큰에 대해 활성화됩니다. 저희는 최적화된 병렬 전략과 매우 효율적인 계산-통신 중첩 기법을 개발하여 MoE와 라이트닝 어텐션에 적용합니다. 이러한 접근 방식을 통해 수백만 개의 토큰에 걸친 컨텍스트에 걸쳐 수천억 개의 매개변수가 있는 모델에 대해 효율적인 훈련과 추론을 수행할 수 있습니다. MiniMax-Text-01의 컨텍스트 창은 훈련 중에 최대 100만 개의 토큰에 도달할 수 있으며 추론 중에는
   저렴한 비용으로 400만 개의 토큰까지 추론할 수 있습니다. 비전 언어 모델인 MiniMax-VL-01은 512억 개의 비전 언어 토큰으로 지속적인 학습을 통해 구축되었습니다. 표준 및 자체 벤치마크 실험 결과, 이 모델은 GPT-4o 및 Claude-3.5-Sonnet과 같은 최신 모델의 성능과 일치하는 동시에 20~32배 더 긴 컨텍스트 윈도우를 제공하는 것으로 나타났습니다. MiniMax-01은 https://github.com/MiniMax-AI 에서 공개적으로 출시됩니다.

     We introduce MiniMax-01 series, including MiniMax-Text-01 and MiniMax-VL-01, which are comparable to top-tier models while offering superior capabilities in processing longer contexts. The core lies in lightning attention and its efficient scaling. To maximize computational capacity, we integrate it with Mixture of Experts (MoE), creating a model with 32 experts and 456 billion total parameters, of which 45.9 billion are activated for each token. We develop an optimized parallel strategy and highly efficient computation-communication overlap techniques for MoE and lightning attention. This approach enables us to conduct efficient training and inference on models with hundreds of billions of parameters across contexts spanning millions of tokens. The context window of MiniMax-Text-01 can reach up to 1 million tokens during training and extrapolate to 4 million tokens during inference at an affordable cost. Our vision-language model, MiniMax-VL-01 is built through continued
     training with 512 billion vision-language tokens. Experiments on both standard and in-house benchmarks show that our models match the performance of state-of-the-art models like GPT-4o and Claude-3.5-Sonnet while offering 20-32 times longer context window. We publicly release MiniMax-01 at https://github.com/MiniMax-AI.

    논문 링크

   https://arxiv.org/abs/2501.08313

    더 읽어보기

   https://github.com/MiniMax-AI

   https://x.com/omarsar0/status/1879572512075587872


  VideoRAG: 비디오 코퍼스를 통한 검색 증강 생성 / VideoRAG: Retrieval-Augmented Generation over Video Corpus

    논문 소개

   비디오 콘텐츠를 외부 지식 소스로 활용하여 RAG를 향상시키는 프레임워크로, 주로 텍스트나 이미지에 중점을 두는 기존의 RAG 접근 방식과 달리 VideoRAG는 쿼리를 기반으로 관련 비디오를 동적으로 검색하고 시각적 요소와 텍스트 요소를 모두 생성 프로세스에 통합합니다; 이 프레임워크는 대규모 비디오 언어 모델(LVLM)을 사용하여 비디오 콘텐츠를 직접 처리함으로써 정적 양식에서는 전달하지 못하는 시간적 역동성, 공간적 세부 사항 및 멀티모달 단서를 보다 효과적으로 캡처할 수 있으며, 텍스트 설명이 없는 비디오의 경우 자동 음성 인식을 사용하여 트랜스크립트를 생성함으로써 시각 및 텍스트 양식을 모두 활용할 수 있도록 제안하고 있습니다.

     A framework that enhances RAG by leveraging video content as an external knowledge source; unlike existing RAG approaches that primarily focus on text or images, VideoRAG dynamically retrieves relevant videos based on queries and incorporates both their visual and textual elements into the generation process; the framework utilizes Large Video Language Models (LVLMs) to process video content directly, enabling more effective capture of temporal dynamics, spatial details, and multimodal cues that static modalities often fail to convey; for videos lacking textual descriptions, they propose using automatic speech recognition to generate transcripts, ensuring both visual and textual modalities can be leveraged.

    논문 초록(Abstract)

   검색 증강 생성(RAG)은 쿼리와 관련된 외부 지식을 검색하여 생성 프로세스에 통합함으로써 기초 모델에서 사실과 다른 출력을 생성하는 문제를 해결하기 위한 강력한 전략입니다. 그러나 기존의 RAG 접근 방식은 주로 텍스트 정보에 초점을 맞춰 왔으며, 최근 이미지를 고려하기 시작한 일부 발전된 접근 방식은 이벤트, 프로세스, 맥락적 세부 사항을 다른 어떤 방식보다 효과적으로 표현할 수 있는 풍부한 멀티모달 지식의 원천인 동영상을 간과하는 경우가 많습니다. 최근 몇몇 연구에서 응답 생성 프로세스에 동영상을 통합하는 방법을 모색하고 있지만, 쿼리에 따라 검색하지 않고 쿼리 관련 동영상을 미리 정의하거나 동영상의 풍부한 멀티모달을 활용하지 않고 텍스트 설명으로 변환합니다. 이러한 문제를 해결하기 위해 쿼리와의 연관성을 기반으로 관련
   동영상을 동적으로 검색할 뿐만 아니라 출력 생성 시 동영상의 시각적 정보와 텍스트 정보를 모두 활용하는 새로운 프레임워크인 VideoRAG를 소개합니다. 또한, 이를 운영하기 위해 비디오 콘텐츠를 직접 처리하여 검색을 위해 표현하고 검색된 비디오를 쿼리와 함께 원활하게 통합할 수 있는 최근의 대규모 비디오 언어 모델(LVLM)을 중심으로 방법을 구현했습니다. 실험적으로 VideoRAG의 효과를 검증하여 관련 기준선보다 우수하다는 것을 보여줍니다.

     Retrieval-Augmented Generation (RAG) is a powerful strategy to address the issue of generating factually incorrect outputs in foundation models by retrieving external knowledge relevant to queries and incorporating it into their generation process. However, existing RAG approaches have primarily focused on textual information, with some recent advancements beginning to consider images, and they largely overlook videos, a rich source of multimodal knowledge capable of representing events, processes, and contextual details more effectively than any other modality. While a few recent studies explore the integration of videos in the response generation process, they either predefine query-associated videos without retrieving them according to queries, or convert videos into the textual descriptions without harnessing their multimodal richness. To tackle these, we introduce VideoRAG, a novel framework that not only dynamically retrieves relevant videos based on their relevance
     with queries but also utilizes both visual and textual information of videos in the output generation. Further, to operationalize this, our method revolves around the recent advance of Large Video Language Models (LVLMs), which enable the direct processing of video content to represent it for retrieval and seamless integration of the retrieved videos jointly with queries. We experimentally validate the effectiveness of VideoRAG, showcasing that it is superior to relevant baselines.

    논문 링크

   https://arxiv.org/abs/2501.05874

    더 읽어보기

   https://x.com/omarsar0/status/1878827350315659421


  타이탄: 시험 시간에 암기하는 법 배우기 / Titans: Learning to Memorize at Test Time

    논문 소개

   신경 장기기억 모듈을 도입해 과거의 맥락을 기억하고, 과거의 긴 정보를 활용하면서 현재의 맥락에 주의를 기울일 수 있도록 도와주는 신경 장기기억 모듈은 주의력만 사용하는 것보다 장기적이고 지속적인 기억으로 작용하며(단기적이라고 간주), 신경 기억에 기반한 Titan은 언어 모델링, 상식 추론, 유전체학 및 시계열 작업에서 좋은 결과를 보여줍니다.

     Introduces a neural long-term memory module to memorize historical context and help attention to attend to the current context while utilizing long past information; the neural memory module acts as a long-term, more persistent memory than just using attention alone (considered more short-term); Titan, which is based on neural memory, shows good results in language modeling, common-sense reasoning, genomics, and time series tasks.

    논문 초록(Abstract)

   10년이 넘는 기간 동안 반복 모델과 주의력을 효과적으로 활용하는 방법에 대한 광범위한 연구가 진행되어 왔습니다. 반복 모델은 데이터를 고정된 크기의 메모리(숨겨진 상태라고 함)로 압축하는 것을 목표로 하는 반면, 주의는 모든 토큰의 직접적인 종속성을 포착하여 전체 컨텍스트 창에 주의를 기울일 수 있게 해줍니다. 하지만 이렇게 종속성을 더 정확하게 모델링하는 데는 이차적인 비용이 발생하며, 고정된 길이의 컨텍스트로 모델을 제한합니다. 저희는 과거의 맥락을 기억하는 방법을 학습하고 과거의 오랜 정보를 활용하면서 현재 맥락에 주의를 기울일 수 있도록 돕는 새로운 신경 장기 기억 모듈을 제시합니다. 우리는 이 신경 기억이 빠른 추론을 유지하면서 빠르게 병렬화할 수 있는 훈련이 가능하다는 장점을 가지고 있음을 보여줍니다. 기억의
   관점에서 볼 때, 문맥은 제한적이지만 정확한 의존성 모델링으로 인한 주의력은 단기 기억으로 작동하는 반면, 데이터를 암기하는 능력으로 인한 신경 기억은 보다 장기적이고 지속적인 기억으로 작동한다고 주장합니다. 이 두 가지 모듈을 기반으로 타이탄이라는 새로운 아키텍처 제품군을 소개하고, 이 아키텍처에 메모리를 효과적으로 통합할 수 있는 세 가지 변형을 제시합니다. 언어 모델링, 상식 추론, 유전체학, 시계열 작업에 대한 실험 결과에 따르면 타이탄이 트랜스포머와 최신 선형 반복 모델보다 더 효과적이라는 것을 알 수 있습니다. 또한 기준선에 비해 건초더미 작업에서 더 높은 정확도로 2M 이상의 컨텍스트 창 크기로 효과적으로 확장할 수 있습니다.

     Over more than a decade there has been an extensive research effort on how to effectively utilize recurrent models and attention. While recurrent models aim to compress the data into a fixed-size memory (called hidden state), attention allows attending to the entire context window, capturing the direct dependencies of all tokens. This more accurate modeling of dependencies, however, comes with a quadratic cost, limiting the model to a fixed-length context. We present a new neural long-term memory module that learns to memorize historical context and helps attention to attend to the current context while utilizing long past information. We show that this neural memory has the advantage of fast parallelizable training while maintaining a fast inference. From a memory perspective, we argue that attention due to its limited context but accurate dependency modeling performs as a short-term memory, while neural memory due to its ability to memorize the data, acts as a long-term,
     more persistent, memory. Based on these two modules, we introduce a new family of architectures, called Titans, and present three variants to address how one can effectively incorporate memory into this architecture. Our experimental results on language modeling, common-sense reasoning, genomics, and time series tasks show that Titans are more effective than Transformers and recent modern linear recurrent models. They further can effectively scale to larger than 2M context window size with higher accuracy in needle-in-haystack tasks compared to baselines.

    논문 링크

   https://arxiv.org/abs/2501.00663

    더 읽어보기

   https://x.com/omarsar0/status/1879896681010921742


  대규모 언어 모델의 기초 / Foundations of Large Language Models

    논문 소개

   사전 교육, 프롬프트 및 정렬 방법과 같은 영역을 다루는 LLM의 기초에 대한 새로운 설문조사.

     New survey on the foundations of LLMs covering areas such as pre-training, prompting, and alignment methods.

    논문 초록(Abstract)

   이 책은 대규모 언어 모델에 관한 책입니다. 제목에서 알 수 있듯이 모든 첨단 기술을 포괄적으로 다루기보다는 주로 기본 개념에 초점을 맞추고 있습니다. 이 책은 사전 훈련, 생성 모델, 프롬프트 기법, 정렬 방법 등 핵심 영역을 각각 탐구하는 네 개의 주요 장으로 구성되어 있습니다. 이 책은 자연어 처리 및 관련 분야의 대학생, 전문가, 실무자를 대상으로 하며 대규모 언어 모델에 관심이 있는 모든 사람에게 참고 자료가 될 수 있습니다.

     This is a book about large language models. As indicated by the title, it primarily focuses on foundational concepts rather than comprehensive coverage of all cutting-edge technologies. The book is structured into four main chapters, each exploring a key area: pre-training, generative models, prompting techniques, and alignment methods. It is intended for college students, professionals, and practitioners in natural language processing and related fields, and can serve as a reference for anyone interested in large language models.

    논문 링크

   https://arxiv.org/abs/2501.09223

    더 읽어보기

   https://discuss.pytorch.kr/t/pdf-231p-feat-arxiv/5895

   https://x.com/omarsar0/status/1880284477445767586


  OmniThink: 사고를 통한 머신 라이팅의 지식 경계 확장 / OmniThink: Expanding Knowledge Boundaries in Machine Writing through Thinking

    논문 소개

   인간과 유사한 반복적인 확장 및 성찰 과정을 에뮬레이트하는 새로운 프레임워크로, 학습자가 지식을 심화할 때 인지적 행동을 시뮬레이션하도록 제작되었으며, RAG 및 역할극과 비교하여 OmniThink는 지속적인 성찰과 탐색을 통해 지식의 경계를 확장할 수 있으므로 긴 형식의 생성이 필요한 사용 사례에 이상적입니다.

     A new framework that emulates a human-like process of iterative expansion and reflection; it's built to simulate the cognitive behavior of learners as they deepen their knowledge; compared to RAG and role-playing, OmniThink can expand knowledge boundaries through continuous reflection and exploration; this makes it ideal for use cases that require long-form generation.

    논문 초록(Abstract)

   대규모 언어 모델을 사용한 기계 작문은 검색 증강 생성에 의존하는 경우가 많습니다. 그러나 이러한 접근 방식은 모델의 사전 정의된 범위 내에 국한되어 있어 풍부한 정보가 포함된 콘텐츠를 생성하는 데 한계가 있습니다. 특히, 바닐라 검색 정보는 깊이와 유용성이 부족하고 중복되는 경향이 있어 생성된 기사의 품질에 부정적인 영향을 미치고 얕고 반복적이며 독창적이지 않은 결과물이 생성됩니다. 이러한 문제를 해결하기 위해 인간과 같은 반복적인 확장 및 반성 과정을 모방한 기계 글쓰기 프레임워크인 OmniThink를 제안합니다. OmniThink의 핵심 아이디어는 학습자가 주제에 대한 지식을 점진적으로 심화할 때 학습자의 인지적 행동을 시뮬레이션하는 것입니다. 실험 결과에 따르면 OmniThink는 일관성 및 깊이와 같은 지표를 손상시키지 않으면서 생성된
   문서의 지식 밀도를 향상시키는 것으로 나타났습니다. 사람의 평가와 전문가 피드백은 긴 형식의 기사를 생성하는 데 있어 현실적인 문제를 해결할 수 있는 OmniThink의 잠재력을 더욱 강조합니다.

     Machine writing with large language models often relies on retrieval-augmented generation. However, these approaches remain confined within the boundaries of the model's predefined scope, limiting the generation of content with rich information. Specifically, vanilla-retrieved information tends to lack depth, utility, and suffers from redundancy, which negatively impacts the quality of generated articles, leading to shallow, repetitive, and unoriginal outputs. To address these issues, we propose OmniThink, a machine writing framework that emulates the human-like process of iterative expansion and reflection. The core idea behind OmniThink is to simulate the cognitive behavior of learners as they progressively deepen their knowledge of the topics. Experimental results demonstrate that OmniThink improves the knowledge density of generated articles without compromising metrics such as coherence and depth. Human evaluations and expert feedback further highlight the potential of
     OmniThink to address real-world challenges in the generation of long-form articles.

    논문 링크

   https://arxiv.org/abs/2501.09751

    더 읽어보기

   https://x.com/omarsar0/status/1880275861401923619


  검색 증강 생성 향상: 모범 사례 연구 / Enhancing Retrieval-Augmented Generation: A Study of Best Practices

    논문 소개

   검색 전략, 쿼리 확장, 대조적 상황 내 학습, 프롬프트 디자인, 청킹 등 RAG 시스템을 개선하는 요소와 방법을 체계적으로 살펴봅니다.

     Systematically explores the factors and methods that improve RAG systems such as retrieval strategies, query expansion, contrastive in-context learning, prompt design, and chunking.

    논문 초록(Abstract)

   검색 증강 생성(RAG) 시스템은 최근 검색 메커니즘을 언어 모델에 통합하여 보다 정확하고 맥락에 맞는 응답을 생성하는 능력을 향상시킴으로써 괄목할 만한 발전을 보이고 있습니다. 그러나 RAG 시스템 내의 다양한 구성 요소와 구성의 영향은 아직 제대로 밝혀지지 않은 상태입니다. 복잡한 검색 작업에 맞게 RAG 시스템을 조정하고 다양한 애플리케이션에서 최적의 성능을 보장하려면 이러한 요소에 대한 포괄적인 이해가 필수적입니다. 이 백서에서는 쿼리 확장, 다양한 새로운 검색 전략, 새로운 맥락 내 대조 학습 RAG를 통합하는 몇 가지 고급 RAG 시스템 설계를 개발합니다. 본 연구에서는 언어 모델 크기, 프롬프트 디자인, 문서 청크 크기, 지식 기반 크기, 검색 보폭, 쿼리 확장 기술, 대조적 맥락 내 학습 지식 기반, 다국어 지식 기반, 문장 수준에서 관련
   맥락을 검색하는 포커스 모드 등의 주요 요소를 체계적으로 조사합니다. 광범위한 실험을 통해 이러한 요소들이 응답 품질에 미치는 영향에 대한 상세한 분석을 제공합니다. 이러한 연구 결과는 RAG 시스템 개발을 위한 실행 가능한 인사이트를 제공하며, 풍부한 문맥과 검색 생성 효율성 간의 균형을 유지하여 다양한 실제 시나리오에서 보다 적응력이 뛰어나고 성능이 우수한 RAG 프레임워크를 구축할 수 있는 기반을 마련합니다. 코드와 구현 세부 사항은 공개되어 있습니다.

     Retrieval-Augmented Generation (RAG) systems have recently shown remarkable advancements by integrating retrieval mechanisms into language models, enhancing their ability to produce more accurate and contextually relevant responses. However, the influence of various components and configurations within RAG systems remains underexplored. A comprehensive understanding of these elements is essential for tailoring RAG systems to complex retrieval tasks and ensuring optimal performance across diverse applications. In this paper, we develop several advanced RAG system designs that incorporate query expansion, various novel retrieval strategies, and a novel Contrastive In-Context Learning RAG. Our study systematically investigates key factors, including language model size, prompt design, document chunk size, knowledge base size, retrieval stride, query expansion techniques, Contrastive In-Context Learning knowledge bases, multilingual knowledge bases, and Focus Mode retrieving
     relevant context at sentence-level. Through extensive experimentation, we provide a detailed analysis of how these factors influence response quality. Our findings offer actionable insights for developing RAG systems, striking a balance between contextual richness and retrieval-generation efficiency, thereby paving the way for more adaptable and high-performing RAG frameworks in diverse real-world scenarios. Our code and implementation details are publicly available.

    논문 링크

   https://arxiv.org/abs/2501.07391

    더 읽어보기

   https://x.com/omarsar0/status/1879178916021318029


  AutoCBT: 심리 상담에서 인지 행동 치료를 위한 자율적 다중 에이전트 프레임워크 / AutoCBT: An Autonomous Multi-agent Framework for Cognitive Behavioral Therapy in Psychological Counseling

    논문 소개

   인지 행동 치료를 위한 다중 에이전트 프레임워크인 AutoCBT를 제안합니다. 이 연구는 단일 턴 심리 상담 시나리오에 대해 고품질 응답을 생성하는 일반적인 다중 에이전트 프레임워크 제안, 동적 라우팅, 메모리 및 감독 메커니즘의 조합을 사용하여 각 에이전트의 자율 능력을 향상, 실험 결과 AutoCBT가 고품질의 자동 심리 상담 서비스를 제공할 수 있음, AutoCBT는 다른 순수 프롬프트 기반 상담 프레임워크에 비해 대화 품질을 개선합니다.

     Proposes a multi-agent framework, AutoCBT, for Cognitive Behavioral Therapy; the work proposes a general multi-agent framework that generates high-quality responses for single-turn psychological consultation scenarios; it uses a combination of dynamic routing, memory, and supervisory mechanisms to enhance the autonomous ability of each agent; experimental results show that AutoCBT can provide higher-quality automated psychological counseling services; AutoCBT improves dialogue quality compared to other purely prompt-based counseling frameworks.

    논문 초록(Abstract)

   기존의 대면 심리 상담은 주로 심리적 문제가 있는 개인이 선택하는 틈새 시장으로 남아 있지만, 온라인 자동 상담은 수치심 때문에 도움을 받기를 주저하는 사람들에게 잠재적인 해결책을 제시합니다. 인지 행동 치료(CBT)는 심리 상담에서 필수적이고 널리 사용되는 접근 방식입니다. 대규모 언어 모델(LLM)과 에이전트 기술의 등장으로 자동 CBT 진단 및 치료가 가능해졌습니다. 그러나 현재의 LLM 기반 CBT 시스템은 고정된 구조의 에이전트를 사용하여 자체 최적화 기능이 제한되거나 중복된 응답 패턴으로 인해 공허하고 도움이 되지 않는 제안을 제공합니다. 이 연구에서는 Quora와 같은 단일 상담 모델과 YiXinLi 단일 상담 모델을 활용하여 단일 턴 심리 상담 시나리오에 대한 고품질 응답을 생성하는 일반 에이전트 프레임워크를 구축합니다. 이중 언어 데이터
   세트를 사용하여 각 프레임워크에서 생성된 단일 응답 상담의 품질을 평가합니다. 그런 다음 실제 심리 상담에서 영감을 얻은 동적 라우팅 및 감독 메커니즘을 통합하여 CBT 지향 자율 다중 상담원 프레임워크를 구축하여 일반적인 적용 가능성을 입증합니다. 실험 결과, AutoCBT는 보다 높은 품질의 자동화된 심리 상담 서비스를 제공할 수 있는 것으로 나타났습니다.

     Traditional in-person psychological counseling remains primarily niche, often chosen by individuals with psychological issues, while online automated counseling offers a potential solution for those hesitant to seek help due to feelings of shame. Cognitive Behavioral Therapy (CBT) is an essential and widely used approach in psychological counseling. The advent of large language models (LLMs) and agent technology enables automatic CBT diagnosis and treatment. However, current LLM-based CBT systems use agents with a fixed structure, limiting their self-optimization capabilities, or providing hollow, unhelpful suggestions due to redundant response patterns. In this work, we utilize Quora-like and YiXinLi single-round consultation models to build a general agent framework that generates high-quality responses for single-turn psychological consultation scenarios. We use a bilingual dataset to evaluate the quality of single-response consultations generated by each framework.
     Then, we incorporate dynamic routing and supervisory mechanisms inspired by real psychological counseling to construct a CBT-oriented autonomous multi-agent framework, demonstrating its general applicability. Experimental results indicate that AutoCBT can provide higher-quality automated psychological counseling services.

    논문 링크

   https://arxiv.org/abs/2501.09426

    더 읽어보기

   https://x.com/omarsar0/status/1880283025595867631


  공간에서 추론하면서 상상해 보세요: 생각의 시각화: 멀티모달 시각화 / Imagine while Reasoning in Space: Multimodal Visualization-of-Thought

    논문 소개

   AI 모델이 텍스트와 이미지 모두에서 '사고'할 수 있도록 하는 새로운 추론 프레임워크인 MVoT(멀티모달 시각화 사고)를 도입하고, 모델이 텍스트 설명과 함께 추론 단계의 시각적 표현을 생성할 수 있도록 함으로써 기존의 연쇄 사고 프롬프트를 개선합니다; 이 프레임워크는 다중 모드 언어 모델인 카멜레온-7B로 구현되며, 생성된 시각화의 품질을 개선하기 위해 '토큰 불일치 손실'을 도입하고, 특히 복잡한 시나리오에서 기존 접근 방식보다 훨씬 뛰어난 성능을 발휘하며, 미로 및 프린터 설치 작업에서 90% 이상의 정확도를 달성하는 등 MVoT는 기존 접근 방식보다 훨씬 더 뛰어난 성능을 발휘합니다.

     Introduces MVoT (Multimodal Visualization-of-Thought), a new reasoning framework that enables AI models to ""think"" in both text and images; MVoT enhances the traditional Chain-of-Thought prompting by allowing models to generate visual representations of their reasoning steps alongside text explanations; the framework is implemented in Chameleon-7B, a multimodal language model, and introduces a ""token discrepancy loss"" to improve the quality of generated visualizations; MVoT significantly outperforms traditional approaches, especially in complex scenarios; MVoT achieves over 90% accuracy on maze and printer installation tasks.

    논문 초록(Abstract)

   생각의 연쇄(CoT) 프롬프트는 대규모 언어 모델(LLM)과 다중 모드 대규모 언어 모델(MLLM)에서 복잡한 추론을 향상시키는 데 매우 효과적이라는 것이 입증되었습니다. 하지만 복잡한 공간 추론 작업에서는 어려움을 겪습니다. 그럼에도 불구하고 인간의 인지는 언어에만 국한되지 않고 확장되어 단어와 이미지 모두에서 놀라운 사고 능력을 발휘합니다. 이러한 메커니즘에서 영감을 받아 새로운 추론 패러다임인 멀티모달 사고 시각화(MVoT)를 제안합니다. 이는 추론의 흔적을 이미지 시각화로 생성하여 MLLM에서 시각적 사고를 가능하게 합니다. 고품질 시각화를 보장하기 위해 자동 회귀 MLLM에 토큰 불일치 손실을 도입했습니다. 이러한 혁신은 시각적 일관성과 충실도를 크게 향상시킵니다. 여러 동적 공간 추론 작업을 통해 이 접근 방식을 검증했습니다. 실험
   결과에 따르면 MVoT는 여러 작업에서 경쟁력 있는 성능을 발휘하는 것으로 나타났습니다. 또한 CoT가 실패하는 가장 까다로운 시나리오에서도 강력하고 안정적인 개선 효과를 보여줍니다. 궁극적으로 MVoT는 시각적 사고가 언어적 추론을 효과적으로 보완할 수 있는 복잡한 추론 작업에 대한 새로운 가능성을 제시합니다.

     Chain-of-Thought (CoT) prompting has proven highly effective for enhancing complex reasoning in Large Language Models (LLMs) and Multimodal Large Language Models (MLLMs). Yet, it struggles in complex spatial reasoning tasks. Nonetheless, human cognition extends beyond language alone, enabling the remarkable capability to think in both words and images. Inspired by this mechanism, we propose a new reasoning paradigm, Multimodal Visualization-of-Thought (MVoT). It enables visual thinking in MLLMs by generating image visualizations of their reasoning traces. To ensure high-quality visualization, we introduce token discrepancy loss into autoregressive MLLMs. This innovation significantly improves both visual coherence and fidelity. We validate this approach through several dynamic spatial reasoning tasks. Experimental results reveal that MVoT demonstrates competitive performance across tasks. Moreover, it exhibits robust and reliable improvements in the most challenging
     scenarios where CoT fails. Ultimately, MVoT establishes new possibilities for complex reasoning tasks where visual thinking can effectively complement verbal reasoning.

    논문 링크

   https://arxiv.org/abs/2501.07542

    더 읽어보기

   https://x.com/omarsar0/status/1879181711982129420
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  ChemAgent: 대규모 언어 모델에서 자체 업데이트되는 라이브러리로 화학적 추론 향상 / ChemAgent: Self-updating Library in Large Language Models Improves Chemical Reasoning

    논문 소개

   동적으로 자체 업데이트되는 라이브러리를 통해 화학적 추론에 대한 LLM의 성능을 개선하도록 설계된 새로운 프레임워크를 제시합니다. 라이브러리는 화학적 작업을 하위 작업으로 분해하고 이를 향후 쿼리에 참조할 수 있는 구조화된 컬렉션으로 컴파일하여 개발됩니다; 시스템에 새로운 문제가 주어지면 라이브러리에서 관련 정보를 다시 시도하고 개선하여 보다 효과적인 작업 분해를 가능하게 하고, 새로운 하위 작업과 솔루션이 발생하고 검증되면 라이브러리가 동적으로 업데이트되며, SciBench의 실험에 따르면 ChemAgent는 기존 방법보다 훨씬 뛰어난 최대 46%(GPT-4)의 성능 향상을 달성했습니다.

     Presents a new framework designed to improve the performance of LLMs on chemical reasoning through a dynamic, self-updating library; the library is developed by decomposing chemical tasks into sub-tasks and compiling them into a structured collection that can be referenced for future queries; when the system is given a new problem, it retries and refines relevant information from the library to enable more effective task decomposition; the library is dynamically updated with new sub-tasks and solutions as they are encountered and validated; experiments on SciBench demonstrate that ChemAgent achieves performance gains of up to 46% (GPT-4), significantly outperforming existing methods.

    논문 초록(Abstract)

   화학적 추론은 일반적으로 정밀한 계산이 요구되는 복잡한 다단계 프로세스를 포함하며, 사소한 오류도 연쇄적인 실패로 이어질 수 있습니다. 또한 대규모 언어 모델(LLM)은 화학 추론 작업을 처리할 때 도메인별 공식을 처리하고 추론 단계를 정확하게 실행하며 코드를 효과적으로 통합하는 데 어려움을 겪습니다. 이러한 문제를 해결하기 위해 유니티는 자체 업데이트되는 동적 라이브러리를 통해 LLM의 성능을 개선하도록 설계된 새로운 프레임워크인 ChemAgent를 선보입니다. 이 라이브러리는 화학적 작업을 하위 작업으로 분해하고 이러한 하위 작업을 향후 쿼리에 참조할 수 있는 구조화된 컬렉션으로 컴파일하는 방식으로 개발됩니다. 그런 다음 새로운 문제가 제시되면 ChemAgent는 메모리라고 부르는 라이브러리에서 관련 정보를 검색하고 정제하여 효과적인
   작업 분해와 솔루션 생성을 용이하게 합니다. 이 방법은 세 가지 유형의 메모리와 라이브러리 강화 추론 구성 요소를 설계하여 경험을 통해 LLM이 시간이 지남에 따라 향상될 수 있도록 합니다. SciBench의 네 가지 화학 추론 데이터 세트에 대한 실험 결과에 따르면 ChemAgent는 최대 46%(GPT-4)의 성능 향상을 달성하여 기존 방법을 크게 능가하는 것으로 나타났습니다. 이러한 연구 결과는 신약 개발 및 재료 과학과 같은 작업을 포함한 향후 응용 분야에 대한 상당한 잠재력을 시사합니다. 자세한 내용은 https://github.com/gersteinlab/chemagent 에서 확인할 수 있습니다

     Chemical reasoning usually involves complex, multi-step processes that demand precise calculations, where even minor errors can lead to cascading failures. Furthermore, large language models (LLMs) encounter difficulties handling domain-specific formulas, executing reasoning steps accurately, and integrating code effectively when tackling chemical reasoning tasks. To address these challenges, we present ChemAgent, a novel framework designed to improve the performance of LLMs through a dynamic, self-updating library. This library is developed by decomposing chemical tasks into sub-tasks and compiling these sub-tasks into a structured collection that can be referenced for future queries. Then, when presented with a new problem, ChemAgent retrieves and refines pertinent information from the library, which we call memory, facilitating effective task decomposition and the generation of solutions. Our method designs three types of memory and a library-enhanced reasoning
     component, enabling LLMs to improve over time through experience. Experimental results on four chemical reasoning datasets from SciBench demonstrate that ChemAgent achieves performance gains of up to 46% (GPT-4), significantly outperforming existing methods. Our findings suggest substantial potential for future applications, including tasks such as drug discovery and materials science. Our code can be found at https://github.com/gersteinlab/chemagent

    논문 링크

   https://arxiv.org/abs/2501.06590

    더 읽어보기

   https://github.com/gersteinlab/chemagent

   https://x.com/omarsar0/status/1879188983705747754


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-adb


     * 이 글은 GPT 모델로 정리한 것으로, 잘못된 부분이 있을 수 있으니 글 아래쪽의 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다.* 🤗

   ⚠️광고⚠️: 🔥파이토치 한국 사용자 모임🇰🇷이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일💌로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=18839","Ollama에 공식 DeepSeek R1 등록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ollama에 공식 DeepSeek R1 등록

     * DeepSeek의 첫 번째 세대 추론 모델 R1은 OpenAI-o1과 비교할 만한 성능을 보유하고 있음
          + 수학, 코드, 추론 작업에서 뛰어난 성능을 발휘함
     * 다양한 크기의 모델 제공: 1.5B, 7B, 8B, 14B, 32B, 70B, 671B
          + 각 모델은 특정 작업에 최적화되어 있음
     * 라이선스
          + MIT 라이선스 하에 제공됨
          + 무료로 사용 가능하며, 상업적 용도로도 사용 가능함

   R1 에게 정체성에 대해 질의하면, 절대로 자신은 딥시크와 관련없으며 OpenAI GPT 라고 답변합니다

   2023년 10월까지 트레이닝 데이터라고 답하는게 뭔가뭔가에요 ..

   DeepSeek-R1 모델 공개

        Hacker News 의견

     * DeepSeek V3는 정치적 민감성을 인식하는 것으로 보임. ""천안문 광장이 무엇으로 유명한가?""라는 질문에 ""죄송합니다, 현재 범위를 벗어납니다""라고 응답함
          + 정치적 현실을 관리하기 위해 변경을 해야 한다는 점은 이해하지만, 이러한 주제에 대해 LLM이 거짓말을 하는 것에 대해 불편함을 느낌
          + 정치적 이유로 모델에 도입된 변경 사항 목록을 오픈 소스로 공개할 계획이 있는지 궁금함
          + 모델을 정치적으로 올바르게 만드는 것과 학살을 묻어두는 것은 다른 문제임. 이는 매우 위험한 길이며, 여기서 끝나지 않을 것임
     * R1 논문을 보면, 벤치마크가 정확하다면 1.5b와 7b 모델조차 Claude 3.5 Sonnet보다 뛰어남. 이 모델들을 8-16GB 맥북에서 실행할 수 있다는 것은 놀라운 일임
     * 제목이 잘못되었음. llama, qwen의 증류 모델만 ollama에 있으며, deepseekv3의 공식 MoE r1 모델은 아님
     * 1.5b 모델에서 ""파이썬에서 리스트를 어떻게 뒤집나요""라는 질문을 해보면, 멈추지 않고 계속 생각을 뱉어냄. 반복되지도 않음. 흥미로움
     * 문서화가 필요함. 전체 프로젝트 설명이 ""대형 언어 모델로 시작하기""로 보임
          + 설치하기 전에 여러 질문이 있음. 클라이언트 인터페이스에 묶여 있는지, 시스템 요구 사항은 무엇인지 등
     * 3년 된 노트북에서 이 모델을 실행할 수 있다는 점이 놀라움
          + Rust에서 두 숫자를 더하는 함수를 작성하는 예시를 제공함
          + Rust에서는 fn 키워드를 사용하여 함수를 정의함. 숫자 유형을 명시하지 않았으므로 제네릭으로 만듦
          + Add 트레이트를 사용하여 덧셈을 수행함. 표준 라이브러리에서 가져와야 함
          + 함수 시그니처는 fn add_numbers<T: Add<Output = T>>(a: T, b: T) -> T로 구성됨
          + Rust에서는 다른 숫자 유형을 혼합할 수 없으므로 명시적 변환이 필요함
     * Rust에서 두 숫자를 더하는 간단한 함수 예시를 제공함
          + i32 타입의 두 정수를 더하는 함수임
          + 제네릭과 트레이트 바운드를 사용하여 다른 숫자 유형도 처리할 수 있음
     * DeepSeek R1 모델의 가장 큰 모델로 추론하려면 어떤 유료 API 옵션이 있는지 궁금함
          + 가장 큰 DeepSeek R1 모델을 미세 조정하거나 강화 학습하려면 어떻게 해야 하는지 궁금함
     * RTX 4090과 192GB RAM을 보유하고 있을 때, 어떤 크기의 DeepSeek R1 모델을 로컬에서 실행할 수 있는지 궁금함
     * Nvidia 4070에 적합한 모델 크기가 무엇인지 궁금함
     * Ollama는 거의 완벽에 가까움. 그러나 Vulkan을 지원하지 않는 것이 큰 문제임
"
"https://news.hada.io/topic?id=18850","3M 공장의 보이지 않는 Electrostatic Wall (1996)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                3M 공장의 보이지 않는 Electrostatic Wall (1996)

특이한 현상

     * 보이지 않는 전기장벽: 3M 공장에서 폴리프로필렌 필름이 빠르게 움직일 때, 작업자들이 ""보이지 않는 벽""을 경험함. 이 벽은 사람을 통과하지 못하게 할 정도로 강력했음. 이 현상은 1980년 여름, 남부 캐롤라이나에서 발생함.
     * 전하 발생: 필름이 풀리면서 큰 전하 불균형이 발생하는 것은 일반적인 문제임. 필름의 표면 구조가 서로 달라 전기화가 발생함.
     * 전기장 측정: 3M의 David Swenson이 공장 바닥에서 200KV/ft 전기계를 사용해 측정했을 때, 전기장이 최대치에 도달함. 그는 필름 사이의 통로를 걸으려 했지만 ""보이지 않는 벽""에 의해 멈춰야 했음.
     * 현상의 재현: 생산 관리자는 처음에 이 현상을 믿지 않았지만, 다음 날 아침 다시 시도했을 때 ""보이지 않는 벽""이 다시 나타남. 이 현상은 습도가 낮을 때 더 자주 발생함.

전기장과 공기 이온

     * 공기 이온의 역할: 필름과 스풀 사이에서 발생하는 방전으로 인해 이온화된 공기가 생성될 가능성이 있음. 이 이온화된 공기가 ""텐트"" 모양의 공간에 갇혀 압력 차이를 만들어 ""보이지 않는 벽""을 형성할 수 있음.
     * 콘크리트 바닥의 역할: 콘크리트 바닥은 전도체처럼 행동하여 전기장을 형성하는 데 기여할 수 있음.
     * 이온화된 공기와 철가루의 유사성: 이온화된 공기는 자석 근처의 철가루와 유사하게 행동할 수 있음. 만약 이온화된 공기가 필름에 의해 고정된다면, 투명한 ""벽""이 형성될 수 있음.

추가적인 생각

     * 공기 압력의 가능성: 이 현상은 전기적 인력/반발력보다는 공기 압력에 의해 발생할 수 있음. 이온화된 공기가 필름에 강하게 끌려가면서 주변 공기에 압력 차이를 만들어낼 수 있음.
     * 새로운 부양 방법: 이온화된 공기를 반대 전하의 판에 끌어당겨 압력 차이를 이용해 물체를 들어 올리는 새로운 방법이 될 수 있음.

        Hacker News 의견

     * 한 사용자는 극장에서 일하던 시절, Van de Graff 발전기처럼 자신이 전기를 축적했던 경험을 공유함
          + 극장에서는 20분짜리 릴을 교체하며 고전압의 탄소 아크 프로젝터를 관리해야 했음
          + 필름이 끊어지면 스플라이스 작업을 해야 했고, 새로운 예고편을 삽입하거나 부적절한 예고편을 제거해야 했음
          + 스플라이스를 세기 위해 릴을 빠르게 감으며 필름의 ""범프""를 손가락으로 느끼며 세었음
          + 한 번은 접지하지 않아 머리카락이 서고, 금속 스위치 판에 손을 대자 8-10인치의 아크 방전이 발생했음
          + 그 후로는 항상 스위치 판을 잡고 있었음
     * 다른 사용자는 이 이야기에 대해 회의적임
          + 고전압이 높은 습도에서 큰 섬광으로 평형을 이루려는 경향이 있음
          + 실질적으로는 불가능할 수 있다고 생각함
     * UFO와 빅풋 목격이 스마트폰 카메라가 보편화된 이후 거의 사라졌다는 의견이 있음
     * 전기장은 선형적이지만, 설명된 비정상적인 효과는 비선형적임
          + 벽은 살아있는 것들에만 영향을 미침
          + 벽은 신경계와 근육 수축에 의해 매개된다고 추측됨
     * 공장 환경에서 발생한 이상한 현상에 매료되었다는 사용자가 있음
          + 흔한 현상이라면 재현 가능해야 하지만, 본 적이 없다고 함
     * 전기적 현상은 전기 정전기와 관련이 있음
          + 전하가 어떻게 유지되는지, 반대 전하가 절연 장벽을 뚫고 중화되지 않는지가 불명확함
          + 3M이 이 현상을 연구하고 활용하지 않은 것이 의아하다는 의견이 있음
     * 이 이야기가 SCP처럼 읽힌다는 의견이 있음
     * 전기 정전력이 인간을 밀어내는 이유에 대한 의문이 제기됨
          + 인간은 중성 전하를 띠고 있으며, 금속에서는 약한 인력만 발생함
"
"https://news.hada.io/topic?id=18865","Tailwind CSS v4.0 정식 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Tailwind CSS v4.0 정식 릴리즈

   Tailwind CSS v4.0이 출시되었습니다! 🎉

   이번 Tailwind CSS v4.0은 성능과 유연성을 한층 더 강화한 완전히 새로운 버전으로, 구성과 커스터마이징 경험을 완전히 새롭게 재구성했습니다. 또한, 최신 웹 플랫폼의 기술을 최대한 활용하도록 설계되었습니다.

   tailwind 를 베이스로 깔고 있는 UI component 들이 v3 를 기반으로 하고 있어서, 저는 좀 더 버전이 올라가길 기다리려고 합니다

   테일윈드 좋아하는데 업데이트 내용 확인해봐야겠네요.

   거의 4년만에 메이저 버전이 올라왔군요.. 기대됩니다
"
"https://news.hada.io/topic?id=18816","MessagePack - JSON과 비슷하지만 작고 빠른 이진 직렬화 포맷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               MessagePack - JSON과 비슷하지만 작고 빠른 이진 직렬화 포맷

     * 효율적인 Binary Serialization 포맷
     * JSON처럼 여러 언어 간 데이터 교환 가능
     * 작은 정수는 단일 바이트로 인코딩, 짧은 문자열은 문자열 자체에 추가 바이트가 하나만 더 필요
     * 50개 이상의 프로그래밍 언어 및 환경에서 지원
     * 사용 사례:
          + Redis: Lua용 MessagePack C 확장을 추가해 데이터 직렬화에 활용
          + Fluentd: 내부 데이터 표현에 MessagePack 사용, 고속 처리 가능
          + Treasure Data: 분석 쿼리에 최적화된 다중 테넌트 데이터베이스 구축
          + Pinterest: MessagePack과 Memcache로 피드 캐시 압축 및 빠른 처리

두개의 컨셉 : ""Type System"" 과 ""Format""

     * 타입 시스템
          + Integer: 정수
          + Nil: null 값
          + Boolean: true 또는 false
          + Float: IEEE 754 부동 소수점
          + Raw: 문자열 또는 바이트 배열
          + Array: 객체 배열
          + Map: 키-값 쌍
          + Extension: 사용자 정의 타입
               o Timestamp: 시간 정보
     * 포맷
          + positive fixint, negative fixint, fixmap, fixarray
          + nil, false, true
          + bin 8/16/32, ext 8/16/32, float 32/64
          + uint 8/16/32/64, int 8/16/32/64, fixext 1/2/4/8/16, str 8/16/32
          + array 16/32, map 16/32
          + 포맷 예시
               o fixint: 7비트 정수 (양수는 0x00–0x7F, 음수는 0xE0–0xFF)
               o fixstr: 최대 31바이트 문자열
               o array 16: 최대 (2^16)-1 요소를 가진 배열
               o map 16: 최대 (2^16)-1 키-값 쌍

MessagePack의 장점

     * 데이터 크기 최소화 및 속도 최적화
     * 기존 JSON 기반 애플리케이션의 대체 및 개선
     * 간단한 구현으로 다양한 환경에서 유연하게 활용 가능

   게임 서버랑 통신 할 때 MessagePack을 적용하려고 했는데.. 설명처럼 다양한 환경에서의 유연화가 잘 안되더라구요. 그래서 protobuf 썼습니다.

   제가 잘 몰라서 그런지는 모르겠는데.. json 대신 크기랑 속도를 위해 hex로 직렬화 할거면.. 그냥 바이너리 직렬화 쓰던 때랑 뭐가 ...다른거죠?

   그냥 바이너리로 뽑으면 그걸 뽑은 언어와 런타임에서만 유효하지만 저런 포맷은 대체로 다른 언어 다른 환경과 주고받는걸 가정하고 만들어집니다

   아하. 그렇군요. 답변 감사합니다.
"
"https://news.hada.io/topic?id=18804","VS Code 애완동물ode 애완동물

     * VS Code Pets
          + VS Code Pets는 코드 편집기에 작은 고양이, 열정적인 강아지, 활발한 뱀, 고무 오리 또는 클리피 📎를 추가하여 생산성을 높이는 확장 프로그램임.
     * 설치
          + 이 확장 프로그램은 VS Code 마켓플레이스에서 설치 가능함.
          + VS Code에서 확장 패널(Ctrl+Shift+X 또는 Cmd(⌘)+Shift+X)을 열고 vscode-pets를 검색하여 설치 가능함.
          + VS Code에서 빠른 열기(Ctrl+P 또는 Cmd(⌘)+P)를 실행하고 명령어 ext install tonybaloney.vscode-pets를 입력하여 설치 가능함.
     * VS Code Pets 사용법
          + 설치 후, 명령 팔레트(Ctrl+Shift+P 또는 Cmd(⌘)+Shift+P)를 열고 ""Start pet coding session"" 명령어(vscode-pets.start)를 실행하여 VS Code에서 고양이를 볼 수 있음.
          + 문서를 확인하여 다른 기능도 탐색 가능함.
     * 번역
          + Crowdin 프로젝트를 방문하여 번역에 참여할 수 있으며, 자동으로 저장소에 동기화됨.
          + 새로운 언어 요청은 Discussions 섹션에서 가능함.
     * 크레딧
          + 고양이 애니메이션은 seethingswarm이 디자인함.
          + 강아지 미디어 자산은 NVPH Studio가 디자인함.
          + 숲 테마는 edermunizz가 디자인함.
          + 성 자산은 GuttyKreum의 작품을 사용하여 제작됨.
          + Clippy, Rocky, Zappy, 고무 오리, 뱀, 코카틸, Ferris the crab, Mod the dotnet bot 미디어 자산은 Marc Duiker가 제작함.
          + 여우 미디어 자산은 Elthen이 제작함.
          + Ferris the crab의 원래 개념은 Karen Rustad Tölva가 디자인함.
          + 아키타 이누 미디어 자산은 Kevin Huang이 제작함.
          + 거북이 애니메이션은 enkeefe가 Pixelart를 사용하여 디자인함.
          + 말 애니메이션은 Chris Kent가 Onfe의 자산을 사용하여 수정함.
          + 달팽이 미디어 자산은 Kennet Shin이 제작함.
     * 감사 인사
          + 이 프로젝트에 기여한 모든 사람들에게 감사의 인사를 전함.

        Hacker News 의견

     * 회사의 소셜 네트워크에서 동료가 이상한 이미지를 보고 놀란 경험을 공유함. 이는 Firefox 확장 프로그램이 이미지를 Nicholas Cage의 얼굴로 바꾼 것이었음
     * 자신의 코드의 오래된 부분을 애완동물에게 먹일 수 있으면 좋겠다는 의견을 제시함
"https://news.hada.io/topic?id=18873","HN에 감사: 오늘 내 부트스트랩 스타트업 인수 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HN에 감사: 오늘 내 부트스트랩 스타트업 인수 완료
     * Power Mode를 떠올리게 한다며 Visual Studio Code의 Power Mode 링크를 공유함

     * Neovim에 Neopets를 추가하자는 제안을 함
     * 안녕하세요 HN, 저는 VWO의 창립자 파라스 초프라임
     * Neko 소프트웨어가 다시 돌아왔음을 알림
          + VWO는 2009년 Show HN에서 시작된 A/B 테스트 플랫폼임
     * Jetbrains IDEs의 Nyancat Progress Bar를 언급함
          + 오늘, 회사를 사모펀드에 2억 달러에 매각했음
     * Tiny Elvis에 대한 관심을 표현하며 자신의 코드가 얼마나 큰지 듣고 싶다고 함
          + 이 소식은 TechCrunch에 보도되었음
     * Sheep.exe와 비슷하지만 아직 완벽하지 않다고 언급함
     * VWO의 시작과 성장
     * Ghostty를 보고 떠오른 생각을 공유함
          + 22세의 신입 졸업생 시절 HN에서 VWO를 출시하고 초기 사용자들을 얻었음
     * VSCode를 사용하지 않아 아쉽다고 하며, 터미널 에뮬레이터 간에 이동할 수 있는 기능이 있으면 좋겠다고 함
          + @patio11과 같은 사람들의 피드백 덕분에 제품 시장 적합성을 달성할 수 있었음
     * 어떤 애니메이션에서 해커를 묘사한 장면이 떠오른다고 하며, Serial Experiments Lain이나 Cowboy Bebop일 수 있다고 함
          + 15년 후, 회사를 매각할 때 고려해야 할 점을 찾기 위해 ""site:ycombinator.com""을 검색했음
     * BonziBuddy를 떠올리게 한다고 언급함
     * HN 커뮤니티에 대한 감사
"
          + HN이 없었다면 기업가가 되지 않았을 것이라고 생각함
          + 매일 HN이 가장 먼저 여는 웹사이트임
          + 커뮤니티에 깊은 감사의 마음을 느끼고 있음
          + @dang과 폴 그레이엄에게 감사하며, 이 아름다운 인터넷 공간을 만들어 주어 고마움을 표함

        Hacker News 의견

     * 사용자 자신의 AB 테스트 도구보다 VWO를 선택한 고용주에 대한 불만 표출
          + Optimizely 공동 창업자가 축하 인사 전함
          + 22살에 프로젝트를 시작하게 된 계기에 대한 질문
          + Paras Chopra의 여정을 칭찬하며, 16년 전의 시작을 회상함
          + Startups for the Rest of Us에서 이야기를 나누자는 초대 제안
          + 영감을 주는 이야기 공유에 대한 감사 인사
          + 회사 매각 시 수익 분배에 대한 궁금증 표출
          + Private Equity에 인수된 후 회사의 미래에 대한 우려 표출
          + 여정에 대한 블로그 포스팅 계획 여부 질문
          + Optimizely 초기 시절의 경험과 SEM 전략에 대한 재미있는 일화 공유
          + Paras가 현재 운영 중인 AI 해크하우스에 대한 정보 제공
"
"https://news.hada.io/topic?id=18910","서브픽셀 스네이크 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            서브픽셀 스네이크 [비디오]

        Hacker News 의견

     * 고급 에뮬레이션 캐비닛을 제작한 아케이드 레트로 게이머로서 이 비디오를 승인함. 그린 픽셀 문제를 언급할 때 흥미로운 것을 배울 것이라 예상했음. 서브픽셀 구조와 인광 색도는 오늘날 OLED, QLED 디스플레이에서도 여전히 관련성이 높음
          + 80~90년대 클래식 아케이드나 콘솔 레트로 게임을 할 때 CRT에서 플레이하면 훨씬 더 좋고 진정한 경험을 할 수 있음. 에뮬레이션을 통해 플레이할 경우 CRT 에뮬레이션 픽셀 셰이더를 켜는 것이 좋음
     * Subpixel Zoo 기사에서 Pentile이 여전히 매우 인기가 있다는 것을 배웠음
          + Motorola Droid 4에서 처음 Pentile 화면을 사용했을 때 작은 글씨가 읽기 어려웠고, 색상 간의 큰 간격 때문에 화면이 체커보드처럼 보였음
          + Pentile이 여전히 사용되고 있다는 사실에 놀랐으며, 아마도 더 나아졌거나 해상도와 픽셀 밀도가 높아져 약점이 감춰졌을 것이라 추측함
     * 뱀이 이상하게 움직이는 이유는 서브픽셀이 정사각형이 아니기 때문임
          + 사용자 관점에서 수평과 수직 속도가 동일하게 보이도록 뱀의 수평 속도를 증가시키는 것이 좋음
     * 1440p 모니터에서 헤드밴드 확대경을 사용해 10배 느리게 플레이할 수 있었음
          + 더 높은 밀도에서는 실제 현미경이 필요할 것임
     * 색상 공간과 서브픽셀 적용에 대해 많은 것을 배웠으며, 이 비디오를 시청한 것이 기쁨
          + 게임 플레이 측면에서 더 큰 게임 보드와 각 서브픽셀을 통한 뱀의 속도를 고려해야 한다고 생각함
     * qbasic nibbles는 ansi 박스 드로잉 문자를 사용해 동일한 작업을 수행했음
          + 텍스트 모드에서 수직 해상도를 두 배로 늘릴 수 있었음
     * 실제로 플레이하려고 시도하는 경우 ""Snake speed"" 값이 반전되어 있음을 주의해야 함
     * Windows XP에서 ClearType을 조정하는 즐거움을 기억하는 사람은 누구인가
          + 저해상도 LCD 디스플레이에서 부드러운 텍스트 렌더링을 위한 훌륭한 해결책이었음
     * 서브픽셀을 가장 쉽게 보는 방법은 디스플레이에 물방울을 떨어뜨리는 것임. 이 방법으로 약 100배 확대 가능함
"
"https://news.hada.io/topic?id=18854","덜 산만한 기술에 주는 "Calm Tech" 인증기기들이 CES 2025에서 첫선을 보임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           덜 산만한 기술에 주는 ""Calm Tech"" 인증기기들이 CES 2025에서 첫선을 보임

     * 현대 기술이 주는 정보량과 알림은 과도해 보임
     * 사람들의 주의력을 지나치게 빼앗는 스마트폰과 노트북에 대한 우려가 꾸준히 제기됨
     * Amber Case 는 이를 해결하기 위해 Calm Technology 개념을 제안하고 책 ""Calm Technology""를 집필했음
     * Case는 “기술이 우리의 주변적(attentional periphery) 주의를 활용하기보다는 직접적(primary) 주의를 빼앗고 있다”라며, 대표 사례로 끊임없는 스마트폰 알림을 언급함

원칙에서 인증으로

     * Calm Tech의 기본 아이디어는 Mark Weiser와 John Seely Brown의 연구에서 영감을 얻었음
     * Calm Tech는 기술이 “사용자를 최소한으로 방해”하고, “고장 났을 때도 어느 정도 동작”해야 한다는 등 총 8가지 원칙을 내세움
     * 대형 기술 기업(예: Microsoft, Amazon)에서도 관심을 보였으나, 실제 제품 설계에 반영하기는 쉽지 않았음
     * Case는 구체적인 표준과 가이드를 제공하기 위해 2024년 5월에 Calm Tech Institute를 설립했음
     * 이 기관에서 Calm Tech 인증을 내놓았으며, 이를 통해 기업이 “침착하고 주의 부담이 적은” 제품을 만들도록 장려함
     * 인증은 ‘주의, 주변성, 내구성, 조명, 사운드, 재료’ 등 6가지 카테고리에 걸쳐 총 81개 항목을 요구함
          + 예: 가장 중요한 알림 외에는 기본적으로 꺼져 있어야 함
          + 일관된 UI 요소 사용과 유지보수 가능한 부품 목록 제공 등을 포함함

초창기 도입 사례

     * 첫 인증 제품들은 2025년 CES 전후에 발표되었음
     * reMarkable Paper Pro는 2024년 9월 출시된 컬러 eInk 태블릿으로, 필기에 집중된 기능만 제공함
          + 웹 브라우저, 앱 스토어, 위젯, 시계 표시 등이 없고, 노트 작성과 동기화만 가능함
          + reMarkable의 디자인 책임자인 Mats Herding Solberg는 Calm Tech 인증 기준을 몰랐음에도, Paper Pro의 개발 철학이 상당 부분 일치함을 발견했다고 언급함
     * Mui Lab의 Mui Board 역시 목재 장식처럼 보이다가 터치 시 스마트 홈 인터페이스가 드러남
          + CES 2025에서 공개된 Mui Board Gen 2가 Calm Tech 인증을 획득했음
     * 그 밖에 AirThings View Plus, Daylight Computer, Unpluq 등의 제품들도 2024년 말 인증을 받았음

2025년 Calm Tech 확장 전망

     * Calm Tech Institute의 인증 기준(81개 항목)은 아직 공개되지 않았으나, 가까운 시일 내 발표를 준비 중임
     * 연구 및 확산을 위한 과학적 접근도 진행 중이며, 사용자 인터페이스에서 물리적 감각과 질감의 중요성을 연구하는 신경과학자들과 협업하고 있음
     * Case는 조금씩이라도 업계를 바꾸고, Calm Tech를 실천하는 제품을 보상하고 싶다고 밝힘
     * reMarkable 측은 향후 제품에도 계속 Calm Tech 인증을 적용할 계획임

        Hacker News 의견

     * 사용자가 착용하고, 장치가 느린 파동을 증강하며, 아침에 벗고 일상으로 돌아가는 신경조절 수면 헤드밴드를 개발 중임
          + 장치에 IO를 넣고 싶지 않음. 비용과 크기가 증가할 뿐만 아니라 사용자가 상호작용할 필요가 없기 때문임
          + 장치를 사용자의 삶에 자연스럽게 녹아들게 하는 방법을 찾아야 함
     * 기사를 읽으려다 쿠키 경고와 광고 팝업에 시달리는 아이러니를 느꼈음
     * Amber Case의 Calm Technology와 디자인 관련 책이 훌륭한 읽을거리였음
          + 인지 과학을 공부한 결과로, 이 책이 기능 디자인에 관한 최고의 책이라고 생각함
          + 주의와 맥락에 대한 쉽게 소화할 수 있는 통찰력과 훌륭한 예시, 명확한 설명이 가득함
          + 겉보기에는 단순하지만 철학적임
     * 소유한 기술 장치의 차분함을 평가한 목록
          + 차분한 (+): 2010년 Kindle, 하모니카, 연필과 종이, 종이책, 종이 사전
          + 다소 차분한 (o): 앰프, 아이패드의 손글씨 노트, Nintendo Switch
          + 차분하지 않은 (-): 노트북, 휴대폰, 아이패드, Linnstrument, Obsidian의 노트, Claude AI가 있는 휴대폰의 사전
     * 제품을 차분함의 수준으로 평가하는 것이 중요하다고 생각함
          + 현대 스마트폰은 훌륭한 도구이자 큰 방해 요소임
          + 필요한 도구를 제공하면서 방해 요소가 없는 장치가 없음
     * Amber Case가 멋지다고 생각함
          + 소셜 미디어 사용을 귀찮게 만드는 앱을 개발 중임
          + 가끔 쿠키 배너, 고양이 등을 화면에 표시함
     * reMarkable Paper Pro에 대해 언급했지만, 이미 비싼 물리적 장치에 구독료를 지불하고 싶지 않음
          + reMarkable은 구독 없이 사용할 수 있다고 하지만, 믿음이 가지 않음
     * Calm Tech 인증 장치의 전체 목록을 찾을 수 없었지만, 두 URL의 목록이 대부분을 포함하는 것 같음
          + Calm Tech Certification
          + Calm Tech Certified
     * 기술이 제한적이었던 과거로 돌아가고 있다는 생각을 멈출 수 없음
          + 느리고, 약간의 복잡성, 매번 적은 가능성이 우리의 필요에 더 잘 맞음
"
"https://news.hada.io/topic?id=18866","한국 디지털 정부서비스 UI/UX 가이드라인, KRDS로 발전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   한국 디지털 정부서비스 UI/UX 가이드라인, KRDS로 발전

   한국의 행정/공공 기관의 웹 어플리케이션을 만들 때 적용할 디자인 목록을 보여주는 사이트입니다. 2025.1.16 ""디지털 정부서비스 UI/UX 가이드라인""에서 ""한국 디자인 시스템(KRDS)""이라는 이름으로 새롭게 변경되었습니다.

주요 변경사항

    1. 신규 가이드라인 추가 (11종)
          + 디자인 스타일 : 엘리베이션 (Elevation), 선명한 화면 모드 (High contrast mode)
          + 탐색 : 탭바 (Tab bars)
          + 레이아웃 및 표현 : 스플래시 스크린 (Splash screen), 텍스트 목록 (Text list)
          + 선택 : 토글 스위치 (Toggle switch)
          + 도움 : 툴팁 (Tooltip)
          + 설정 : 언어 변경 (Language switcher), 화면 크기 조정 (Resize)
          + 콘텐츠 : 접근 가능한 미디어, 숨긴 콘텐츠 (Visually hidden)
    2. 기존 가이드라인 세부내용 개선 및 표준 프로토타입 보완 (20종)
          + 디자인 스타일 (5종) : 색상 (Color), 타이포그래피 (Typography), 형태 (Shape), 레이아웃 (Layout), 아이콘 (Icon)
          + 컴포넌트 (7종) : 운영기관 식별자 (Identifier), 헤더 (Header), 푸터 (Footer), 메인 메뉴 (Main menu), 라디오 버튼 (Radio button), 셀렉트 (Select), 파일 업로드 (File upload)
          + 기본 패턴 (2종) : 입력 폼, 필터링·정렬
          + 서비스 패턴 (6종) : (검색)검색어 입력, (검색)검색 결과 확인, (검색)상세 검색, (로그인)로그인 정보 입력 , (로그인)서비스 이용, (신청)서비스 정보 확인


관련 항목

     * USWDS - 미국 연방정부용 디자인 시스템

   세계 각국의 정부용 디자인 시스템 참고자료입니다. https://github.com/ctdesign/gov-design-systems-list/…

   과거 정부서비스 가이드라인때 보고 진지하게 가이드가 괜찮다 싶었는데, 더 밀어주나 보네요.
   공공기관 특유의 그 맛이 제 입맛엔 어색하지만 나쁘지 않군요.

   github 과 figma 링크도 있네요

   생각보다 더 많이 괜찮은데요..?!

   JS, CSS로 설치가능하고 컴포넌트 예시 코드도 있습니다.
   의존성 없이 실행할 수 있어 훌륭해요.
   <link href=""https://cdn.jsdelivr.net/npm/krds-uiux@1.0.1/resources/cdn/krds.min.css"" type=""text/css"" rel=""stylesheet"" /> <script defer src=""https://cdn.jsdelivr.net/npm/krds-uiux@1.0.1/…;

   Component Head 코드 포함
   https://www.krds.go.kr/html/site/component/component_02_03.html

   왜 잘 만든건데...

   이런거 할 여유와 의지가 있다면 그걸 그대로 자바와 스프링 프레임워크 걷어내는거에도 힘좀 쓰시지..

   보안 레벨, 테스트 통과 품질, 표준 통신 규격, 인증 표준등등만 강력하게 빈틈없이 만들어주고

   중소기업들이 언어나 프레임웍에 지배되지 않고 자유롭게 개발했으면 함.

   죽어가는 자바라는 언어에 생명줄 대고 있는 대한민국 정부 프레임워크의 기술락인의 부정적인 효과가 나중에 어떤 눈덩이로 불어올지 ㄷㄷㄷ 합니다.

   자바 대안은 찾을 수 있겠지만, 스프링 대안은 글쎄요...

   아주 좋네요!!

   ?? 왜.. 잘 만들었을까요?

   ㅋㅋㅋㅋㅋㅋㅋㅋ 진짜 왜 잘만들었지....
   약간 토스 느낌도 나네요

   상당히 공을 많이 들인 거 같은데요, 퀄리티가 훌륭합니다.
   앞으로도 꾸준히 관리가 되었으면 좋겠네요.
"
"https://news.hada.io/topic?id=18830","Bambu Connect 역설계 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Bambu Connect 역설계 분석

     * Bambu Connect의 역공학
     * Bambu Connect 개요
          + Bambu Connect는 Electron 앱으로, 보안이 불투명한 방식으로 구현되어 있어 본질적으로 안전하지 않음.
          + 이 가이드는 사용자가 구매한 제품에 대한 권리를 더 많이 가질 수 있도록 돕기 위한 것임.
     * 보안 키 추출 과정
          + Bambu 장치와의 통신에 사용되는 ""개인 키""를 추출하는 간단한 과정을 설명함.
          + MacOS .dmg 파일을 사용하여 Bambu Connect의 파일을 추출하는 것이 더 쉬움.
          + 앱은 asarmor를 사용하여 쉽게 읽히지 않도록 보호하며, 키는 특정 경로에 저장되어 있음.
          + Ghidra를 사용하여 main.node를 로드하고 Auto-Analyze를 실행한 후, GetKey 함수를 검색하여 키를 추출할 수 있음.
     * 개인 키 및 인증서 추출
          + 개인 키와 인증서는 추가로 난독화되어 있으며, 이를 명확하게 하기 위해 여러 단계의 복호화가 필요함.
          + Python을 사용하여 비밀 정보를 추출하는 예제 코드가 제공됨.
     * 참고 자료
          + Bambu Connect의 특정 버전 .dmg 파일에 대한 링크가 제공됨.

        Hacker News 의견

     * ipcam이 카메라가 비활성화되어 있어도 영상을 기록하고 있음
          + Tiananmen Square Tank Man 장면을 인쇄하자는 제안이 있음
     * Bambu의 행태에 분노를 느끼고 있음
          + Black Friday 세일에서 해킹 가능하고 개방적인 프린터를 구매했으나, 현재는 승인된 소프트웨어와 DRM 체인을 사용하지 않으면 인쇄할 수 없도록 잠그려 하고 있음
          + 해킹 관련 추가 정보 제공
     * Prusa가 더 적극적으로 나섰다면, Bambu 대신 Prusa의 대형 빌드 볼륨과 동일한 품질의 프린터를 구매했을 것임
          + 대신 P1S를 구매했으며, 기술적으로 훌륭한 기계임
     * 초기에는 Bambu의 네트워크 지원 부족으로 반대했으나, LAN 모드 추가 후 구매 고려했음
          + 그러나 결국 구매하지 않음
          + Bambu의 보안 문제에 실망을 느끼고 있음
     * Bambu의 대응에 대한 링크 제공
     * Louis Rossmann의 상황에 대한 논평 링크 제공
     * Bambu의 잠금 조치가 컨트롤러나 펌웨어를 더 개방적으로 대체하려는 노력에 어떤 영향을 미칠지 궁금함
          + 클라우드 인증을 위한 개인 키가 있지만, 문제는 프린터의 펌웨어임
          + Bambu가 펌웨어를 소유하고 업데이트하기 때문에, 대체 서버가 생성되면 키를 변경할 수 있음
     * 최근 Bambu 프린터를 구매한 후 보안 문제에 실망했음
          + IoT VLAN에서 격리하여 사용 가능하게 만들었음
          + 보안 개선을 환영하지만, 키의 용도와 유용성에 대한 정보가 부족함
          + 추가적인 기술 정보와 흥미로운 소식을 기대하고 있음
     * Bambu는 소모품과 고객 서비스 확장에 집중해야 함
          + 티켓 해결에 몇 주가 걸리며, 첫 응답까지 8일이 걸리는 것이 일반적임
     * 3D 프린터가 2D 프린터만큼 적대적이라는 것에 놀라지 않음
          + ""보안""이 변명으로 사용되고 있음
"
"https://news.hada.io/topic?id=18895","사이키델릭 그래픽스 0: 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            사이키델릭 그래픽스 0: 소개

Psychedelic Graphics 0: 소개

     * 이 시리즈는 애니메이션과 게임을 위한 사이키델릭한 비주얼을 만드는 방법을 소개함. 그래픽이나 프로그래밍에 대한 사전 지식이 없어도 이해할 수 있도록 구성되었음. 삼각함수와 프로그래밍에 대한 기본 지식이 있다면 도움이 될 것임.
     * 이 시리즈를 통해 비디오에 사용된 사이키델릭 그래픽의 기본을 이해할 수 있기를 바람. 대부분의 비디오는 Blender를 사용하여 제작되었지만, 이 시리즈에서 가르치는 기술은 쉽게 전환할 수 있으며, 나중에 Blender에 대해 더 깊이 다룰 예정임.

  UV란 무엇인가?

    3D 모델

     * 컴퓨터 그래픽은 종종 3D로 보이지만, 그래픽 코드를 작성할 때는 종종 2D로 생각해야 함. 3D 모델링 프로그램에서 아름다운 모양을 만들었다면, 사실 공간에 떠 있는 점(정점)을 만들고 일부를 연결하여 고체 모양(면)을 만든 것임.
     * 3D 모델은 대부분 비어 있으며, 우리는 표면만 볼 수 있음. 3D 모델에 색상을 입히는 표준 방법은 UV 매핑/텍스처링임. 지구의 2D 투영이 약간 늘어나고 압축된 것처럼 보이는 것처럼, 3D 모델의 색상이 2D로 투영될 때도 비슷하게 보임.

    텍스처 페인팅

     * 텍스처를 페인팅하면 3D 모델에 나타남. 대부분의 소프트웨어는 3D 모델에 직접 페인팅하여 이미지 텍스처를 색칠할 수 있도록 함.

    UV 좌표

     * UV는 위치, 즉 2D 좌표로 생각할 수 있음. (0, 0)부터 (1, 1)까지의 공간을 사용하여 UV 좌표를 정의함. UV 맵은 색상 이미지 텍스처와 3D 모델의 면을 연결하는 데이터임.

  그래픽 코드의 작동 방식

    그래픽의 색상

     * 컴퓨터 그래픽 색상은 종종 RGB로 표현됨. 빨강, 초록, 파랑의 혼합으로 인간이 인식할 수 있는 거의 모든 색상을 만들 수 있음. 컴퓨터 그래픽에서 빨강, 초록, 파랑의 양은 보통 0.0에서 1.0까지 범위임.

    UV의 색상

     * UV 좌표를 색상으로 변환하여 시각화 및 문제 해결에 도움을 줌. UV의 첫 번째 값(X 값)은 빨강, 두 번째 값(Y 값)은 초록으로 사용함.

    부동 소수점과 벡터 vec2, vec3

     * float는 단일 소수점 숫자임. vec는 벡터를 의미하며, vec2는 두 개의 소수점 숫자, vec3는 세 개의 소수점 숫자로 구성됨.

    그래픽 프로그램의 구조

     * 그래픽은 분산된 방식으로 조정해야 함. 코드가 한 번 실행되어 모든 색상을 생성하는 것이 아니라, 화면의 각 작은 부분에 대해 수백만 번 실행됨. 프로그래밍 경험이 있다면 매우 다른 사고방식임.
     * 이제 1부를 시작할 준비가 되었음. 이러한 제약 조건에도 불구하고 흥미로운 비주얼을 만드는 방법을 1부에서 볼 수 있음.

        Hacker News 의견

     * David Tristram은 1990년대 컴퓨터 그래픽 퍼포먼스 그룹 Raster Masters의 창립 멤버로, Silicon Graphics 워크스테이션을 사용하여 Grateful Dead, Herbie Hancock, Graham Nash 등의 라이브 음악에 맞춘 합성 이미지를 제작했음
          + 현재는 주로 Resolume Avenue와 TouchDesigner를 사용하여 2D 비디오 처리 환경에서 작업 중임
          + Hydra는 저수준으로 가지 않고도 환각적인 그래픽을 실험할 수 있는 쿨한 자바스크립트 기반 라이브코딩 환경임
     * 과거에는 UV 텍스처 좌표를 변형하는 방법을 연구했으며, 현재는 ShaderToy와 같은 프래그먼트 셰이더를 사용함
          + 텍스처 좌표를 흐름 필드에 따라 변위시키는 과정이 흥미로움
          + 좌표가 원래 위치로 돌아오도록 ""복원"" 힘을 적용하는 간단한 방법도 있음
          + 피드백과 변위 효과를 결합하여 유체 흐름과 같은 모션을 생성함
     * HTML에서 이미지를 처리하는 셰이더 작성이 쉬워서 좋음
          + 깊이 맵의 단순한 근사치만으로도 흥미로운 결과를 얻을 수 있음
          + 과거에 WebGL을 사용하여 이미지 간의 크로스페이드를 부드럽게 하는 프로젝트를 진행했음
     * 환각적인 경험을 시각적으로 재현하는 데 관심이 많음
          + Rolling Hills 기사에서 시각적 환각을 재현하는 방법에 대해 설명함
          + 현대 기술을 사용하여 환각적인 비주얼을 잘 구현하는 아티스트가 있음
     * Todd Rundgren은 1990년대 초에 Flowfazer라는 Mac 앱을 개발했으며, 이는 사용자가 창작에 영감을 받을 수 있도록 도와줌
     * Tipper와 Fractaled Visions의 공연은 환각적인 비주얼의 가장 정확한 묘사 중 하나였음
          + Fractaled Vision의 비주얼은 복잡하고 풍부하여 놀라움을 줌
     * 웹GL 셰이더를 작성하면서 물리적 카메라 효과를 구현하려고 노력 중임
          + 그래픽, 수학, GPU, 메모리, CPU, 애니메이션 및 시간 처리에 대한 이해를 높이는 데 도움이 됨
     * Jim Crutchfield의 비디오 피드백 시스템 연구는 복잡한 공간 및 시간 역학을 연구하는 데 유용한 실험 시스템을 제공함
"
"https://news.hada.io/topic?id=18793","스타크래프트 Brood War 한국어 해설 번역하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      스타크래프트 Brood War 한국어 해설 번역하기

     * 문화적 맥락
          + StarCraft: Brood War(이하 BW)는 한국에서 매우 중요한 게임으로, 대부분의 프로 선수, 팀, 대회가 한국에 기반을 두고 있음.
          + BW는 체스와 유사하게 전략 게임으로, 게임을 플레이하는 것뿐만 아니라 연구하는 것도 중요함.
          + 체스의 오프닝처럼 BW에서도 특정 전략과 빌드가 있으며, 이는 커뮤니티 내에서 개발된 도메인 특화 언어임.
     * 외국인 지식 문제
          + 외국인 커뮤니티의 대부분은 한국어에 능통하지 않음.
          + 한국어를 유창하게 구사하는 외국인은 드물며, 이로 인해 외국인 커뮤니티는 한국 커뮤니티에 비해 정보 접근이 제한적임.
          + 기계 번역은 도메인 특화 언어를 번역하는 데 한계가 있으며, 이는 외국인 커뮤니티가 한국 커뮤니티에 뒤처지게 만든 요인임.
     * 새로운 번역 프로세스
          + 새로운 기계 번역 프로세스를 통해 더 정확한 번역을 제공할 수 있게 됨.
          + 하루에 약 7개의 비디오를 번역할 수 있었으며, 이는 이전보다 훨씬 빠른 속도임.
     * 기술 스택
          + 자막을 생성하고 소비하는 두 부분으로 나뉨.
          + yt-dlp와 OpenAI Whisper를 사용하여 비디오의 오디오 트랙을 다운로드하고, 이를 통해 자막을 생성함.
          + Google Colab을 사용하여 Whisper를 실행하고, 비디오 URL을 입력받아 한국어 SRT 파일을 생성함.
          + LLM과 슬랭 사전을 사용하여 번역의 정확성을 높임.
     * 자막 소비
          + TamperMonkey를 사용하여 YouTube 비디오에 버튼을 추가하고, 번역된 자막을 다운로드할 수 있게 함.
          + Pastebin과 Google Sheets + Apps Script를 사용하여 자막을 공유하고 관리함.
     * 개선점
          + 여러 언어를 지원하는 기능 추가 가능성.
          + 기술적 개선점으로는 특정 비디오에만 버튼을 표시하는 기능 추가 가능성.
     * 최종 생각
          + 성능, 확장성, 지연 시간 등은 중요하지 않으며, 이미 존재하는 솔루션을 결합하여 프로젝트를 완성함.
          + 사용자 스크립트와 Colab 노트북의 Python 코드는 짧고 유지보수가 용이함.
          + 이 프로젝트는 가장 간단한 CRUD 시스템이며, 복잡성이 크게 증가할 이유가 없음.

        Hacker News 의견

     * 한국 BW 플레이어이자 음성 인식 연구자로서 이 글이 재미있었음. 원래 한국어 전사에 많은 오류가 있었지만 LLMs가 이를 인상적으로 수정했음. 예를 들어, ""12 안마당 빌드""는 실제로 ""12 앞마당 빌드""였음. 투에처리 빌드는 투해처리 빌드로 전사되어야 했음.
          + 슬랭 사전을 Whisper의 추론 과정에 직접 입력하는 것이 도움이 될 수 있음. 가장 간단한 방법은 최종 예측 레이어에서 사전의 슬랭 단어의 확률을 일정한 비율로 증가시키는 것임. HuggingFace의 라이브러리를 사용하여 쉽게 구현할 수 있음.
     * 제목에 속지 말 것. 이 글은 StarCraft의 해설을 번역하고 접근성을 높이는 매우 철저하고 창의적인 접근임.
          + 게임 해설은 27년 동안 특정 도메인 언어가 되었음.
          + 자동 스크립팅과 AI를 사용하여 대략적으로 이해하고 일관되게 만드는 접근이 매우 멋짐.
     * 비영어권 사용자로서 이 글을 읽으면서 컴퓨터 기사와 소프트웨어 개발 번역의 어려움을 떠올림.
          + 번역하기 어려운 용어가 많음. 유일한 해결책은 언어에 맞게 용어를 채택하는 것임.
          + 소프트웨어 개발을 스페인어로 이야기할 때 영어에서 수입된 용어가 많음.
          + 자동 번역이 어떻게 처리할지 궁금하며, 사회적으로 두 언어를 혼합하는 과정이 필요함.
     * Google Translate 버전을 잘 이해할 수 있었음. BW와 zerg 12hatch 오프너에 익숙하기 때문임.
          + ChatGPT와 Claude가 한국어 텍스트 번역을 훌륭하게 수행했음.
          + Claude의 번역 예시: 12 해처리 빌드에 대해 설명하며, Protoss와 Terran에 대한 빌드 순서를 설명함.
     * 번역에 대한 글에서 신호 대 잡음 비율을 완전히 반대로 이해한 것이 재미있음. 높은 신호 대 잡음 비율은 좋은 것임.
     * yt-dlp를 사용하여 대역폭을 절약하기 위해 낮은 품질의 비디오를 다운로드할 수 있음.
          + 예시 명령어: yt-dlp -f ""bv[height<=720]"" <url>
     * 어린 시절 돈맵을 플레이한 사람으로서 건물 앞의 숫자가 무엇을 의미하는지 궁금했음.
          + 12 해처리와 같은 숫자는 빌드 순서에서의 위치를 나타내는 것 같음.
     * Google Translate가 좋아졌지만, Go 게임에 대한 중국어 또는 일본어 텍스트를 효과적으로 번역할 수 없었음.
          + 현대 LLMs를 사용하여 Go 용어를 포함한 번역 요청을 할 수 있음.
     * 이 글을 좋아했음. 세계 사이버 게임 미국 지역 경기를 시도했을 때 다른 사람들이 얼마나 빠른지에 놀랐음.
          + 한국에서의 라이브 스트리밍을 보고 그들의 속도에 감명받았음.
          + 전략적 관점에서 기본적인 것을 놓쳤음을 깨달았음.
     * ""natural expansion""을 ""courtyard""로 번역한 것이 ""잘못""이지만 마음에 들었음.
"
"https://news.hada.io/topic?id=18886","OpenAI, 에이전트 서비스 "Operator" 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenAI, 에이전트 서비스 ""Operator"" 공개

     * OpenAI가 새롭게 선보이는 Operator는 독립적으로 웹을 탐색하고 작업할 수 있는 AI 에이전트임
          + 자체 브라우저를 사용하여 웹 페이지를 보고 입력, 클릭, 스크롤을 통해 상호 작용
     * 연구 프리뷰 단계에 있어 아직 제한 사항이 있으며, 사용자 피드백을 통해 발전 예정임
     * 독립적으로 작업을 수행할 수 있는 AI로, 사용자가 작업을 지시하면 이를 실행하는 최초의 에이전트 중 하나
     * 반복적인 브라우저 작업(예: 양식 작성, 식료품 주문, 밈 만들기 등)을 처리하여 시간 절약을 도모함
     * 미국 거주 Pro 사용자에게 우선 공개 중이며, 차후 Plus, Team, Enterprise 버전과 ChatGPT 내 통합 가능성 있음

Operator가 동작하는 방식

     * 새로운 모델인 Computer-Using Agent(CUA)를 기반으로 함
     * GPT-4o의 비전 기능과 강화학습 기반의 고도화된 추론 방식을 결합하여 GUI(버튼, 메뉴, 텍스트 필드 등) 상호작용을 가능하게 함
     * 스크린샷을 통해 브라우저 화면을 ‘보고’, 마우스와 키보드로 조작하며 작업 수행 가능함
     * 작업 중 오류나 난관에 부딪히면 자가 교정 추론을 활용하거나, 필요 시 사용자에게 조작을 넘기는 협업 방식을 택함
     * WebArena, WebVoyager 등 브라우저 활용 벤치마크에서 높은 성능을 보여주고 있으며, 자세한 내용은 연구 블로그에서 확인 가능함

사용 방법

     * 원하는 작업을 간단히 설명하면 Operator가 해당 작업을 자동으로 진행함
     * 중간에 언제든지 사용자가 직접 브라우저 조작권을 가져올 수 있음
     * 로그인, 결제 정보 입력, CAPTCHA 해결 등 민감 단계에서는 Operator가 직접 요청하지 않고 사용자가 직접 처리해야 함
     * 사이트별 또는 전체 사이트에 대한 설정을 통해 사용자 취향이나 선호도 반영 가능함
     * 즐겨 사용하는 프롬프트를 저장하여 자주 하는 작업(예: Instacart에서 식료품 재주문 등)을 빠르게 실행 가능함
     * 여러 개의 탭처럼 여러 작업을 동시에 처리할 수 있으며, 대화 세션을 분리해 서로 다른 작업을 병행 가능함

에코시스템 및 사용자

     * Operator는 AI를 단순 도구가 아닌 디지털 생태계의 능동 참여자로 발전시킴
     * DoorDash, Instacart, OpenTable, Priceline, StubHub, Thumbtack, Uber 등과 협업하여 실제 사용자 니즈와 업계 표준을 반영 중임
     * 공공 부문에서도 업무 효율과 접근성 향상을 위해 적용 가능성을 검토 중이며, 예로 City of Stockton과 시 행정 서비스 활용 방안을 모색하고 있음
     * Instacart의 Chief Product Officer인 Daniel Danker는 Operator를 통한 손쉬운 주문 프로세스에 대해 긍정적인 평가를 언급함

안전 및 개인정보

     * Operator는 안전성을 최우선으로 고려하여 세 가지 계층의 안전장치를 마련함
          + 사용자 주도 제어: 민감 정보(로그인, 결제 등) 입력 시에는 Operator가 takeover를 요청하여 직접 정보를 입력하도록 유도함
          + 중요 동작 전 확인: 주문 제출, 이메일 발송 같은 중요한 작업 전에는 사용자 승인 요청을 거침
          + 작업 제한: 은행 업무나 취업 관련 결정과 같이 민감도가 높은 작업은 Operator가 거부하도록 학습됨
          + 민감 사이트 접근 시에는 Watch 모드를 통해 사용자가 Operator의 동작을 직접 모니터링 가능함
     * 데이터 프라이버시 관리 기능 제공
          + ‘Improve the model for everyone’를 비활성화하면 Operator 데이터도 모델 학습에 사용되지 않음
          + 설정 내 Privacy 섹션에서 브라우징 데이터 삭제, 모든 사이트 로그아웃, 대화 기록 삭제 등을 간편하게 수행 가능함
     * 악의적인 웹사이트로부터 Operator를 보호하기 위한 방어체계도 적용됨
          + 숨겨진 프롬프트나 악성 코드, 피싱 시도를 감지하고 무시하도록 설계함
          + 전담 모니터 모델이 수상한 동작을 실시간 감시하여 필요 시 작업을 중단시킴
          + 자동화 및 인적 검토로 새로운 위협을 발견 시 빠르게 안전장치를 업데이트함
     * 유해한 목적으로 기술이 오남용되지 않도록 Operator는 특정 요청을 거부하고, 정책 위반이 반복되면 경고나 접근 차단이 적용될 수 있음
     * 아직 연구 프리뷰 단계인 만큼 완벽하지 않으며, 현실 사용 피드백을 통해 계속 개선 예정임

한계점

     * Operator는 현재 초기 단계이며, 슬라이드쇼 제작이나 캘린더 관리 등 복잡한 인터페이스 작업에 어려움을 겪을 수 있음
     * 사용자 피드백은 정확도, 안정성, 안전성 개선을 위한 중요한 자원으로 활용 예정임

향후 계획

     * CUA의 API 제공 예정으로, 개발자들이 자체 에이전트를 구축할 수 있는 기반을 마련할 계획임
     * 긴 작업 및 복잡한 워크플로우 처리 능력을 강화하여 Operator 기능 고도화 예정임
     * Pro 사용자 외 Plus, Team, Enterprise 등으로 점차 확대하고, 장기적으로는 ChatGPT에 기능을 통합하여 실시간·비동기적 작업 실행을 지원할 계획임

        Hacker News 의견

     * 많은 사람들이 OpenAI와 같은 회사들이 개인 비서를 제공하기 위해 돈을 쓰는 것이 아니라, 나중에 인건비를 절감하기 위해 AI를 훈련시키고 있다고 생각함
          + AI가 개인 비서로 유용해질 때쯤, 그 기능은 평균적인 사람이 감당할 수 없는 가격으로 출시될 것임
     * OpenAI Operator의 출시에 대한 의견은 혼재되어 있음
          + 현재 기능, 비용, 잠재적 과잉 확장에 대한 회의적인 시각도 있지만, 작업 자동화와 시간에 따른 개선 가능성에 대한 긍정적인 시각도 존재함
          + 윤리적 문제, 개인정보 보호, 산업에 미치는 영향도 논의됨
          + 전반적으로 도전과 잠재적 개선을 인정하면서도 신중한 낙관론이 존재함
     * Operator는 몇 달 전 Claude의 Computer Use 데모와 유사하며, VM을 실행해야 하는 아키텍처와 부정확한 경향이 있음
          + Claude의 Computer Use 구현은 발표 이후 AI 에이전트 산업에서 큰 반향을 일으키지 못했음
     * Operator의 안전 위험과 완화에 대한 슬라이드에서 ""사용자가 잘못 정렬됨""이라는 표현이 있음
          + OpenAI가 사용자를 ""잘못 정렬됨""으로 간주하는 예시를 더 보고 싶다는 의견이 있음
     * 밈을 만드는 것과 같은 작업에 500억 달러를 투자하는 것에 대한 비판적인 의견이 있음
          + 지구를 다음 세대에게 살기 좋은 곳으로 만드는 것에 투자하지 않는 것에 대한 아쉬움이 표현됨
     * CogAgent: 중국의 오픈 소스 대안임
          + 논문, 코드, 모델에 대한 링크가 제공됨
     * 미래에 제품과 모델이 상당히 개선되면, ChatGPT와 대화하여 저녁 예약, 항공편 예약, 식료품 구매 등 웹에서 하는 지루한 일을 처리할 수 있을 것이라는 기대가 있음
          + 이러한 기능을 매우 기대함
     * Instacart나 Doordash 같은 회사들이 LLM을 위한 마케팅 최적화를 통해 새로운 UI 방향을 열 수 있을 것이라는 의견이 있음
          + 예를 들어, 영양가 있는 달걀을 찾으라는 지시를 받으면, 에이전트가 영양 성분표를 참조하여 결정을 내릴 수 있음
     * ""에이전트""가 마우스와 키보드를 사용하여 픽셀을 보는 방식이 어색하다는 의견이 있음
          + 앱과 서비스가 사용자 대신 수행할 수 있는 사전 승인된 작업 세트를 노출하는 표준을 상상함
          + 사용자 권한을 추가/철회할 수 있는 기능을 제공하는 ""앱 스토어"" 개념을 제안함
     * 에이전트를 위한 Open APIs 사용이 필요하다고 강하게 믿음
          + OpenAPI가 에이전트를 위한 개방형 세계와 인터넷을 가능하게 하는 완벽한 사양 표준이라고 주장함
          + OpenAI가 처음 GPT를 출시했을 때는 Open APIs에 기반했으나, 점점 더 멀어지고 있음
          + 이는 시장을 통제하려는 의도로 보이며, 개방형 표준에 기반하지 않으려는 것임
          + 이는 매우 아쉬운 일임
"
"https://news.hada.io/topic?id=18827","음악 검색 시스템 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             음악 검색 시스템 만들기

     * 음악 검색 시스템은 등록과 검색 두 단계로 이루어짐
          + 등록: 기존 음원을 소리 지문(Audio Fingerprint)으로 변환해 데이터베이스에 저장
          + 검색: 입력 음원을 소리 지문으로 변환한 후 데이터베이스와 비교해 유사 음원 검색
     * 베경 지식
          + WAV 파일: 비압축 PCM 형식으로, 데이터 변형 없이 원본 유지
          + 샘플링(Sampling): 아날로그 신호를 디지털로 변환, 샘플링 속도가 높을수록 정확성 증가
          + 스펙트로그램(Spectrogram): 주파수와 진폭 변화를 시각화한 그래프
          + 푸리에 변환: 신호를 주파수 영역으로 변환해 소리 분석
          + 피크(Peak): 주요 주파수 성분을 나타내는 데이터로, 노이즈를 제거하고 압축 가능
          + 소리 지문(Audio Fingerprint): 피크 데이터를 해싱해 생성, 데이터베이스 저장 및 검색에 사용
     * 구현 과정
         1. WAV 파일을 읽고 샘플링 데이터를 생성
         2. 샘플링 데이터를 푸리에 변환해 스펙트로그램 생성
         3. 스펙트로그램에서 피크 추출
         4. 피크 데이터를 해싱해 소리 지문 생성
         5. 소리 지문을 데이터베이스에 저장하거나 검색해 유사 음원 확인

   우미
"
"https://news.hada.io/topic?id=18880","C stdlib의 비스레드 안전성과 안전한 Rust의 실패","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    C stdlib의 비스레드 안전성과 안전한 Rust의 실패

     * ARM64에서만 발생한 충돌
          + EdgeDB의 네트워크 I/O 코드를 Python에서 Rust로 포팅하는 과정에서 ARM64 CI 러너에서 테스트가 간헐적으로 실패하는 문제가 발생함.
          + 처음에는 데드락으로 보였으나, 실제로는 프로세스가 충돌하여 테스트 러너가 이를 감지하지 못한 것임.
     * 초기 이론
          + ARM64에서만 문제가 발생하는 이유를 이해하기 위해 메모리 모델의 차이를 고려함.
          + Intel의 메모리 모델은 엄격한 반면, ARM은 더 약한 메모리 모델을 가짐.
     * CI 머신에서의 디버깅
          + AWS에서 ARM64 러너에 직접 연결하여 문제를 조사함.
          + 프로세스가 충돌하여 코어 덤프를 남겼고, 이를 조사하여 문제의 원인을 파악함.
     * 실제 원인: setenv와 getenv
          + setenv는 멀티스레드 환경에서 안전하지 않으며, getenv와의 상호작용에서 충돌을 일으킬 수 있음.
          + 환경 변수의 재할당이 문제의 원인으로 밝혀짐.
     * openssl_probe와의 연결
          + openssl-probe가 SSL_CERT_FILE과 SSL_CERT_DIR 환경 변수를 설정하면서 문제가 발생함.
          + Rust의 rust-native-tls가 이러한 환경 변수를 설정하는 과정에서 충돌이 발생함.
     * ARM64 Linux에서만 발생한 이유
          + 여러 조건이 맞아떨어져야만 충돌이 발생하며, 환경 변수의 수와 I/O 실패 등이 그 조건에 해당함.
     * 해결책
          + reqwest의 rust-native-tls/openssl 백엔드에서 rustls로 전환하기로 결정함.
          + Rust 프로젝트는 환경 설정 함수를 비안전하게 만들 계획이며, glibc 프로젝트는 getenv의 스레드 안전성을 향상시킴.

        Hacker News 의견

     * Rust의 다음 에디션에서 환경 설정자를 안전하지 않게 만들 예정임. 이는 충돌을 일으키는 크레이트에 영향을 줄 수 있음
          + Rust 표준 라이브러리에서 set_var와 remove_var는 2024년 에디션에서 unsafe {} 블록을 사용해야 함
          + 현재 문서에는 안전성 문제를 언급하고 있지만, 원래 이러한 함수들을 안전하게 만든 것은 실수였음
     * glibc에 대한 패치가 getenv를 더 안전하게 만들었지만, C는 여전히 환경에 직접 접근을 허용하여 완전히 안전하지는 않음
          + C 표준 라이브러리 유지보수자들이 setenv를 멀티스레드 안전하게 만들기를 꺼려하지만, 최소한 새로운 스레드 안전 API가 정의되어야 함
          + Musl의 유지보수자가 이 문제를 해결할 수 없다고 확신하지 않음
     * 리눅스에서 환경 관련 버그를 겪는 것은 일종의 통과의례처럼 여겨짐
          + Linus와 커널은 POSIX 버그를 해결하는 데 실용적이지만, glibc는 여전히 뒤처져 있음
          + getenv_r()를 제공하고 setenv()와 동기화하며 컴파일/링크 시 경고를 제공하는 것이 문제 해결에 도움이 되었을 것임
     * 환경 변수를 사용한 설정은 ""12-factor app"" 운동의 일부였지만, 이는 어리석은 방법이라고 생각함
          + 환경 변수 대신 YAML과 같은 설정 파일을 사용하는 것이 더 나은 방법이라고 생각함
     * Amazon AWS에서 실행되는 CI 머신은 실제 루트 사용자를 제공하여 장점이 있음
          + 클라우드와 컨테이너 없이 로컬에서 코드 빌드 및 디버그 능력을 잃은 것 같음
     * 비직관적인 버그를 파헤치는 훌륭한 기사임
          + 이러한 상세한 문제 해결 보고서는 직접 해보는 것과 가장 가까운 경험을 제공함
     * env::set_var는 이제 안전하지 않음
          + 단일 스레드 프로그램에서는 안전하게 호출할 수 있음
          + Windows에서는 단일 및 멀티 스레드 프로그램 모두에서 항상 안전함
          + 다른 운영 체제의 멀티 스레드 프로그램에서는 set_var 또는 remove_var를 사용하지 않는 것이 유일한 안전한 선택임
     * setproctitle이 특정 코드베이스에서 작동하지 않았던 경험을 상기시킴
          + numpy를 임포트한 후 setproctitle이 작동하지 않았고, 이는 numpy 초기화 시 getenv 또는 setenv 호출로 인해 **environ의 주소가 변경되었기 때문임

   Setenv는 쓰레드세이프 하지 않으며, C는 이를 수정하고 싶지 않음

   Setenv 함수가 또 말썽이군요.

   저는 제목을 'C stdlib의 스레드 불안전성은 그 안전하다는 Rust도 구제하지 못한다'라고 적겠습니다. :)

   확실하게 이해했습니다.
"
"https://news.hada.io/topic?id=18790",""Evil" RJ45 동글 조사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ""Evil"" RJ45 동글 조사

    ""악성"" RJ45 동글 조사

     * 하드웨어 리버스 엔지니어링
       하드웨어 리버스 엔지니어링은 어려울 수 있지만, 때로는 편안한 의자와 Google 번역만으로도 충분함.
     * 공급망 공격의 현실
       정보 보안에서 공급망 공격은 복잡하고 위험하며, 대개 다른 방법이 없을 때 사용됨. 대부분의 경우, 자격 증명을 훔치거나 악성 파일을 다운로드하게 하는 것이 더 쉬움.
     * 소셜 미디어의 소동
       한 젊은 기업가가 중국에서 구매한 이더넷-USB 어댑터가 악성 소프트웨어로 가득 차 있다고 주장하며 소셜 미디어에서 화제를 모음. 그러나 이는 잘못된 정보로 밝혀짐.
     * 드라이버 분석
       문제의 드라이버는 CoreChips Shenzhen의 RJ45-to-USB 칩용 드라이버로, 공개적으로 서명된 버전임. 이는 Realtek RTL8152B의 복제품으로 추정됨.
     * 역사적 맥락
       드라이버는 2013년에 발표된 오래된 디자인을 기반으로 하며, 당시에는 CD-ROM 드라이브가 점차 사라지고 있었지만 모든 컴퓨터가 항상 온라인 상태가 아니었음. 따라서 장치가 자체 드라이버를 포함한 대용량 저장 장치로 나타나는 것이 합리적이었음.
     * 플래시 메모리의 역할
       장치에 512 kB의 플래시 메모리가 필요한 이유에 대한 의문이 제기됨. 이는 펌웨어 저장용인지, 아니면 다른 용도인지 불분명함.
     * SR9900의 설계 자료
       SR9900의 설계 자료를 통해 플래시 칩이 가상 광학 드라이브로 사용될 수 있음을 확인함. 이는 드라이버 설치를 위한 용도로 사용됨.
     * 결론
       이상한 것이 항상 나쁜 것은 아님. 하드웨어 실험실 없이도 인내심과 검색 능력만으로 충분히 조사 가능함. 그러나 SR9900 IC 자체의 내부 코드는 여전히 미지수로 남아 있음.
     * 보안 우려
       특정 상황에서는 악성 USB 동글의 위험이 있을 수 있지만, 일반적인 가정 네트워킹에서는 큰 걱정이 필요하지 않음.

        Hacker News 의견

     * Intel Pentium 166MHz 이상의 사양이 필요하다는 언급이 재미있음. ""지루한 똑똑한 사람이 상식적으로 명백한 결과를 얻기 위해 놀라운 창의력과 끈기를 발휘하는"" 장르를 좋아함
          + ""Evil"" 동글에 대한 트윗을 보고 자신이 이전에 작업했던 것과 동일한 것임을 인식함. 이는 악의적이지 않고 단지 성가신 것임
          + SPI 플래시 모듈을 비활성화하여 CD 드라이브로 나타나지 않도록 했으며, 이 게시물의 작성자는 SPI가 선택 사항임을 문서에서 발견함. 이 게시물은 실제로 RJ45 동글을 재플래싱하여 ""악의적""으로 만들 수 있는 도구를 제공함
     * USB 장치가 자체 드라이버를 제공하기 위해 저장 장치로 위장하는 것을 높이 평가함. 요즘에는 Microsoft 서버에 업로드하여 필요한 것을 다운로드하는 것이 ""올바른"" 방법일 수 있지만, 수동으로 드라이버를 설치해야 하는 경우가 많음을 관찰함
          + 주변 장치가 부트스트랩을 돕는 것이 영리하다고 생각하며, 장치에 드라이버가 내장되어 있으면 표준 다운로드 소스를 찾는 것보다 더 쉬움
     * USB 주변 장치 IC에 VID/PID 및 기타 USB 구성 정보를 저장하기 위해 작은 플래시 장치를 부착하는 것이 일반적이었음. 512kB가 공급망을 통해 쉽게 구할 수 있는 최소 크기였을 수 있음
          + ISO 방식은 다소 이상하지만, 대량 저장 USB 장치를 제한하는 기업 IT 보안 정책을 피하려는 창의적인 방법임. 복합 장치로 열거되면 USB 드라이브가 잠긴 컴퓨터에서도 드라이버를 설치할 수 있음
     * RJ45를 8P8C라고 불러야 한다고 주장하는 사람의 의견이 있음
     * 저렴한 RJ45 이더넷에서 USB 어댑터가 악성 코드를 포함할 수 있다는 관련 내용이 있음
     * ""악의적"" USB 이더넷 동글이 존재할 수 있으며, 이는 Hak5의 제품인 LAN Turtle과 관련이 있음
     * 수십 년 전에는 임베디드 저장 장치가 매우 일반적이었으며, 주로 3G USB 모뎀에서 많이 볼 수 있었음. AT 명령어로 활성화/비활성화할 수 있었음
          + ""중국 해킹"" 이론의 기원은 젊은 사람들이 이러한 오래된 것들에 익숙하지 않다는 것에서 비롯될 수 있음
     * 이더넷 포트에 유해한 연결을 하는 것은 매우 어렵지만, USB 포트에 유해한 연결을 하는 것은 매우 쉬움. 이를 ""악의적"" USB 동글이라고 부르는 것이 적절함
"
"https://news.hada.io/topic?id=18803","이 필기체를 읽을 수 있나요? 국립문서보관소의 도움 요청","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    이 필기체를 읽을 수 있나요? 국립문서보관소의 도움 요청

  SMART NEWS

    필기체 읽을 수 있나요? 국립 기록 보관소가 당신의 도움을 원함

     * 국립 기록 보관소는 200년 이상 된 필기체로 작성된 역사적 문서들로 가득 차 있음. 이러한 문서들은 읽기 어렵고, 특히 학교에서 필기체를 배우지 않은 미국인들에게는 더욱 그러함.
     * Citizen Archivist 프로그램은 자원봉사자들이 손으로 쓴 기록을 전사하고 정리하여 디지털 문서를 더 쉽게 접근할 수 있도록 돕는 것을 목표로 함.
     * 매년 수천만 건의 기록이 디지털화되며, 인공지능과 광학 문자 인식 기술을 사용하여 문서에서 텍스트를 추출함. 그러나 이러한 방법은 항상 정확하지 않음.
     * 자원봉사자들은 디지털 페이지를 전사하여 학자, 계보학자, 역사 애호가들이 역사적 문서를 더 쉽게 찾고 읽을 수 있도록 도움을 줌.
     * 온라인으로 가입하면 누구나 무료로 참여할 수 있으며, 신청 절차 없이 기록을 선택하고 지침을 읽으면 됨.
     * 필기체 해독에 자신이 없다면, 이미 전사된 문서에 태그를 다는 작업도 가능함. 태그 작업은 기록의 검색 가능성을 향상시킴.

    자원봉사자와 미션

     * 이미 5,000명 이상의 자원봉사자가 Citizen Archivist 프로그램에 참여하고 있으며, 전사와 태그 작업이 필요한 문서 그룹인 ""미션""에 열심히 참여 중임.
     * 예를 들어, 현재 미션에는 미국 독립 전쟁 연금 파일과 1866년부터 1870년까지의 직원 계약서가 포함됨.
     * 독립 전쟁 미션은 2023년 6월에 국립공원관리청과 협력하여 시작되었으며, 80,000명 이상의 참전용사와 그들의 미망인과 관련된 파일을 포함함.
     * 자원봉사자들은 원하는 만큼의 시간을 전사와 태그 작업에 할애할 수 있으며, 일부 참가자들은 수년간 프로그램에 헌신하고 있음.

    필기체 교육의 부활

     * 필기체 교육은 한때 표준이었으나, 오늘날 교육자와 입법자들은 필기체 교육의 중요성에 대해 의견이 분분함.
     * 그러나 노트북, 태블릿 등의 기기가 보편화되면서도 필기체는 다시 주목받고 있음. 20개 이상의 주에서 학교에 필기체 교육을 의무화하고 있음.
     * 캘리포니아에서는 2024년 1월에 필기체 교육을 의무화하는 법이 시행됨.
     * 켄터키에서도 필기체 교육을 의무화하는 법이 통과됨. 필기체 읽기 능력과 유창성은 필기체 쓰기 능력과 연결된다는 연구가 있음.

        Hacker News 의견

     * 프로젝트가 매우 흥미롭지만 참여하기 어렵다는 의견이 있음
          + 기사에 주제 미션에 대한 직접 링크가 제공되지 않음
          + 가입은 비교적 쉬우며, 잘 조직되어 있고 두 가지 형태의 2FA를 요구함
          + 가입 후 메인 페이지로 돌아가 미션을 찾는 과정이 조금 복잡함
          + 로그인 상태가 유지되지 않아 불편함을 겪음
          + 자원봉사자들이 비효율적인 인터페이스를 통해 도움을 주는 것은 부적절하다는 의견
     * LLMs 사용에 대한 논의
          + 기사는 LLMs와 OCR을 사용하지만 항상 정확하지 않다고 명시함
          + 초기 문서는 사람들이 시작하도록 유도하기 위한 쉬운 문서일 가능성이 높음
     * 1814년 여성의 편지를 전사한 경험
          + 제임스 먼로에게 스코틀랜드로 가기 위한 여권을 요청하는 편지를 전사함
          + 필체에 익숙해지면 몰입감이 높아짐
          + 전사 과정에서 읽은 이야기가 기억에 오래 남음
     * OCRs/LLMs에 대한 신뢰와 기술의 한계에 대한 논의
          + 기술이 반복적인 작업을 단순화할 수 있지만, 결과는 인간이 검토해야 함
          + GPT-4o가 특정 예제에서 더 나은 성능을 보임
     * 전사 프로젝트의 즐거움
          + 아카이브된 편지와 일기를 전사하는 것이 매우 보람차다는 의견
          + 작가와의 시간적 거리가 거의 사라지는 느낌을 받음
     * 필기체 해독의 어려움
          + 필기체 해독이 어려운 이유와 개인적인 경험 공유
          + 필기체가 현대에는 잘 사용되지 않지만, Montessori 학교에서는 여전히 가르침
     * AI 기업들이 공익을 위해 전사 프로젝트에 기여할 수 있다는 제안
          + 고품질의 학습 데이터를 얻기 위해 VC 자금을 사용할 수 있음
     * 필기체 해독을 전문으로 하는 고고학자에게 텍스트 해독 요청
          + 제임스 램버트의 선언문을 해독하는 예시 제공
"
"https://news.hada.io/topic?id=18862","구조 없음의 폭정구조 없음의 폭정 (1970)

구조 없음의 폭정

     * 이 글은 1970년 남부 여성 권리 연합이 주최한 회의에서 발표된 연설로 시작되었음. 이후 여러 출판물에 제출되었고, 공식적으로는 1972년 'The Second Wave'에 처음 게재되었음.
     * 여성 해방 운동은 지도자 없는, 구조 없는 그룹을 주요 조직 형태로 강조해왔음. 이는 과도하게 구조화된 사회에 대한 반발로 시작되었으나, 시간이 지나면서 '구조 없음'이라는 개념이 여성 해방 이데올로기의 핵심이 되었음.
     * 초기에는 의식 고양을 주요 목표로 삼았고, '구조 없는' 대화 그룹이 이를 위한 훌륭한 수단이었음. 그러나 시간이 지나면서 구체적인 행동을 원하게 되었을 때, 대부분의 그룹은 구조를 변경하지 않으려 했음.

공식 및 비공식 구조

     * 사실상 구조 없는 그룹은 존재하지 않음. 어떤 그룹이든 시간이 지나면 자연스럽게 구조를 형성하게 됨. 이는 개인의 능력, 성격, 배경이 다르기 때문임.
     * '구조 없음'은 비공식 구조의 형성을 막지 못하며, 이는 강자나 운 좋은 자가 다른 사람들 위에 권력을 확립하는 데 이용될 수 있음.
     * 그룹의 구조가 비공식적일 때, 결정이 어떻게 이루어지는지 아는 사람은 소수에 불과하며, 권력에 대한 인식은 제한적임. 모든 사람이 참여할 수 있으려면 구조가 명확해야 함.

엘리트주의의 본질

     * '엘리트주의'라는 용어는 여성 해방 운동에서 자주 오용됨. 엘리트는 대개 더 큰 그룹에 대한 권력을 가진 소수의 그룹을 의미함.
     * 엘리트는 음모가 아니며, 대개 정치 활동에 참여하는 친구 그룹으로 형성됨. 이러한 그룹은 공식적인 의사소통 채널 외부에서 네트워크로 기능하며, 이는 그룹 내에서 더 많은 권력을 가짐.
     * 비공식적 의사소통 네트워크는 배타적이며, 이는 여성들이 참여하는 것을 오랫동안 방해해왔음.

'스타' 시스템

     * '구조 없음'의 이념은 '스타' 시스템을 만들어냄. 언론과 대중은 그룹의 입장을 대변할 사람을 찾으며, 공식적인 대변인이 없을 때 주목받는 여성들이 대변인으로 간주됨.
     * 이는 운동과 '스타'로 지목된 여성 모두에게 부정적인 결과를 초래함. 운동이 대변인을 선택하지 않으면, 언론은 계속해서 '스타'를 대변인으로 삼음.

정치적 무능력

     * 비구조적 그룹은 여성들이 자신의 삶에 대해 이야기하는 데는 효과적이지만, 실제로 무언가를 성취하는 데는 좋지 않음. 구체적인 과제가 없을 때, 사람들은 그룹 내에서 서로를 통제하려는 경향이 있음.
     * 비구조적 그룹은 지역 수준에서는 자율적으로 운영될 수 있지만, 전국적인 활동을 조직할 수 있는 유일한 그룹은 구조화된 여성 단체임.

민주적 구조화의 원칙

     * '구조 없음'의 이념을 버리면, 운동은 건강하게 기능할 수 있는 조직 형태를 개발할 수 있음. 전통적인 조직 형태를 맹목적으로 모방하거나 거부할 필요는 없음.
     * 민주적 구조화를 위해 다음과 같은 원칙을 고려할 수 있음:
         1. 특정 작업에 대한 권한을 특정 개인에게 민주적 절차를 통해 위임함.
         2. 권한이 위임된 사람들은 그들을 선택한 사람들에게 책임을 져야 함.
         3. 가능한 많은 사람들에게 권한을 분배함.
         4. 작업을 개인 간에 순환시킴.
         5. 합리적인 기준에 따라 작업을 할당함.

        Hacker News 의견

     * 이 에세이는 여성이나 페미니즘을 넘어서는 중요성을 가짐. 구조 없는 그룹이 처음에는 효과적이지만 시간이 지나면서 문제에 직면하게 됨
          + 스타트업에서 조직이 ""평평하다""고 설명할 때, 이는 종종 비공식적인 권력 구조가 존재함을 의미함
          + ""인간의 마음을 절차로 완전히 인코딩하려는 폭정""이라는 반대 개념이 필요함
          + 규칙이 작성자보다 절대적이라는 척하는 폭정도 있음
     * 비구조적 그룹이 작동하는 상황을 설명하는 부분이 흥미로움
          + 그룹의 기능이 매우 좁고 구체적일 때, 예를 들어 회의 개최나 신문 발행 같은 경우
          + 이러한 조건은 많은 자유 소프트웨어 프로젝트에 적합함
          + 그녀가 제시한 네 가지 조건 중 하나임
     * 많은 사람들이 이 에세이의 끝까지 읽지 않음
          + ""구조 없음""의 이념에 집착하지 않으면 조직의 건강한 기능에 맞는 형태로 발전할 수 있음
          + 전통적인 조직 형태를 맹목적으로 모방해서는 안 됨
     * 구체적인 아이디어 제시
          + 리더가 팀을 선택하지 않고 팀이 대변인을 선택함
          + 대변인은 팀에 대한 권한이 없지만 다른 대변인과의 대화에서 팀을 대신해 결정을 내릴 수 있음
          + 대변인 역할을 팀 내에서 순환시키고, 다른 유형의 결정을 위해 여러 대변인을 둘 수도 있음
          + 중요한 정보를 다른 사람들이 접근할 수 없도록 하지 않도록 프로세스를 설정함
          + 모든 데이터는 그룹 내에서 공개되어야 함
     * 조직 심리학 관련 관리 서적 추천
          + Frederic Laloux의 ""Reinventing Organizations""
          + Tony Hsieh의 ""Delivering Happiness""
          + ""First, Let's Fire All the Managers""라는 HBR 기사
     * 스키마 없는 데이터베이스와 ""NoSQL""에 대한 공격을 기대했으나 사회적 그룹에 관한 내용임
     * 지난 몇 년 동안 여러 번 게시되었으며 총 약 100개의 댓글이 있음
     * 작은 회사에서 유사한 문제를 여러 번 경험함
          + 구조의 아이디어를 미끄러운 경사 논증으로 효과적으로 거부함
          + 고위급 인사들이 ""모든 작은 변화에 PR 검토를 요구하면, 인기 없는 대형 기술 회사처럼 될 것""이라고 말함
"
"https://news.hada.io/topic?id=18906","칼트레인 전기 열차, 예상보다 효율적인 성능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        칼트레인 전기 열차, 예상보다 효율적인 성능

     * - 새로운 일정 변경, 1/27
          + Caltrain은 1월 27일 월요일부터 새로운 일정 변경이 있을 것임을 보고함

        Hacker News 의견

     * 전기 Caltrain이 매우 조용하고 내부가 쾌적하며 이전보다 더 빠르고 자주 운행됨
          + Bay Area에서 교통 혁신이 일어나고 있으며, 이를 계속 유지하길 바람
     * 환경 검토와 불안정한 자금으로 인해 20년 이상 소요되었음
          + 캘리포니아 주민으로서 더 나은 인프라 프로젝트 수행 필요성 강조
     * 전기 열차가 디젤 열차보다 가속이 훨씬 빠름
          + 가속 시 대부분의 에너지가 다음 정거장에서 회수됨
     * Caltrain이 100% 재생 가능 에너지로 운영된다고 주장하지만, 같은 전력망에 연결되어 있어 논리적이지 않음
     * 열차의 에너지 소비는 자동차를 대체하는 것에 비해 미미함
          + 에너지 절약을 속도, 승객 수, 빈도 증가로 교환할 수 있다면 가치가 있음
     * Caltrain이 100% 재생 가능 전력으로 운영된다는 점이 흥미로움
     * 뉴욕 지하철이 이 기술을 도입하지 않은 것이 믿기지 않음
          + 현재 지하철에서 브레이크 먼지를 흡입하고 있음
     * 재생 가능 전력이 대형 수력 발전소에서 구매된다면, 저수지의 수위에 따라 가격이 달라질 수 있음
     * 새로운 열차의 재생 제동이 시스템에서 소비된 에너지의 약 23%를 전력망에 다시 보냄
          + 이 수치가 어떻게 가능한지 의문을 가짐
     * Caltrain 프로젝트가 전력 사용량 계산 시 재생 제동을 완전히 잊어버린 것이 이상하게 느껴짐
"
"https://news.hada.io/topic?id=18917","화면과 컨트롤러 없는 Steam Brick: 전원 버튼과 USB 포트만 있는 기기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             화면과 컨트롤러 없는 Steam Brick: 전원 버튼과 USB 포트만 있는 기기

왜?

     * Steam Deck는 여행에 혁신적이었지만, 크기와 무게 때문에 자주 가져가지 않음.
     * AR 안경이나 TV에 연결해 사용했으며, 컨트롤러와 화면이 없으면 더 작고 가벼울 것이라 생각함.

시작하기

     * iFixIt의 Steam Deck 수리 가이드와 Valve의 DIY 수리 및 모드 커뮤니티 지원에 감사함.
     * 1TB OLED Steam Deck에서 모드를 수행했으며, OLED와 LCD 모델 간에 차이가 있음.
     * 주변 장치나 화면 없이 Steam Deck가 부팅될 수 있는지 확인하는 것이 첫 번째 과제였음.

내부

     * 초기 분해에서 유용한 알루미늄 프레임을 발견함.
     * 불필요한 금속을 제거하여 Brick에 적합한 내부 프레임을 얻음.
     * 팬과 마더보드 커버 나사는 외부 쉘 나사로, 모든 것이 제대로 고정되도록 다시 추가해야 함.

케이스

     * 제한된 CAD 능력으로 Brick을 위한 기본적인 쉘을 설계함.
     * 원래의 전원 버튼을 수용하기 위한 컷아웃이 있으며, 공기 흡입구는 원래의 후면 쉘에서 금속 그릴을 수용할 수 있도록 설계됨.
     * 케이스는 열에 강한 Overture Polycarbonate Pro로 출력함.

결과

     * Steam Brick은 Deck의 약 3분의 1 크기이며, OEM 케이스보다 약 4배 작음.
     * 또한 24% 더 가벼움.

FAQ

     * 화면을 제거한 이유는 빌드를 복잡하게 만들지 않기 위해서임.
     * Brick은 케이스나 화면 보호기 없이 가방에 그냥 넣을 수 있도록 설계됨.

하드웨어

     * 빌드에는 4개의 3M 열 세트 인서트와 4개의 20mm 3M 나사가 포함됨.

알려진 문제

     * BIOS에 접근할 수 없음. ‘+’ 버튼을 누른 상태에서 전원을 켜야 하지만, 이 버튼이 빌드에 포함되지 않음.
     * Brick이 켜져 있는지 여부를 알기 어려움. Deck의 표시등이 켜짐/꺼짐 상태를 나타내지 않음.

리소스

     * 케이스를 위한 STL 파일 제공.
     * 프로젝트를 지원하고 싶다면 하드웨어를 구매할 수 있는 링크 제공.

        Hacker News 의견

     * 25년 전 친구가 micro-ATX 마더보드를 사용하여 휴대용 케이스를 만든 경험을 공유함
          + 배터리는 없었지만 학교 컴퓨터에 연결하여 주변 기기를 사용할 수 있었음
          + 시간이 많이 흘렀음을 느끼며 감회에 잠김
     * 노트북에 디스플레이가 없다면 형태가 크게 달라질 수 있을 것이라는 의견
          + 트랙패드를 키보드 오른쪽에 배치하는 직사각형 형태를 상상함
     * 게임용 PC를 다른 방에 두고 모니터를 거의 꺼둔 채 Steam Remote Play로 사용하는 방식과 유사하다는 의견
          + Windows가 부팅 시 모니터가 필요할 수 있음을 언급함
     * Steam의 첫 하드웨어 제품이었던 Steam Box에 대한 흥미로운 정보
          + 작은 컴퓨터로 TV에서 게임을 즐길 수 있게 해주는 장치였음
          + 현재의 기술 발전과 연결지어 생각함
     * 배터리가 있는 NUC가 미개척 시장일 수 있다는 질문
          + 이러한 개념이 얼마나 인기를 끌지 궁금해함
     * 안경의 성능에 대한 질문
          + 구매를 고려했으나 아직 사용해보지 않음
     * 여행 중 헤드셋 디스플레이를 구매하고 싶었으나 용도를 확신하지 못했던 경험
          + 새로운 사용 사례를 발견할 수 있을 것 같다는 긍정적인 반응
     * OLED 화면을 XReal 안경으로 교체하는 것이 복잡함만 더할 뿐 이점이 없다는 혼란스러운 의견
     * ""왜 다시 했나요?""라는 질문에 대한 답변
          + ""할 수 있는지에만 집중하여 해야 하는지 생각하지 않았다""는 유머러스한 답변
     * Valve가 이 제품을 만들기를 바라는 강한 희망
"
"https://news.hada.io/topic?id=18795","아마존 AI 크롤러로 불안정해진 내 Git 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       아마존 AI 크롤러로 불안정해진 내 Git 서버

     * Amazon의 AI 크롤러로 인해 내 Git 서버가 불안정해짐
     * 서포트 블로그: 블로그를 즐기신다면 Patreon에서 Xe를 지원할 수 있음
     * Patreon 구독: EthicalAds 광고
     * 수정(2025-01-18 23:50 UTC): Gitea 서버에 요청을 허용하기 전에 작업 증명 검사를 수행하는 프록시를 작성했음. 이름은 Anubis이며, 곧 블로그 게시물을 작성할 예정임. 현재는 https://git.xeserv.us/에서 확인 가능함. 다소 거칠지만 충분히 작동함
     * 수정(2025-01-18 19:00 UTC): 포기함. Gitea 서버를 VPN 뒤로 옮겼음. 봇으로부터 서버를 보호하기 위해 작업 증명 리버스 프록시를 작업 중임. 곧 다시 가동할 예정임
     * 수정(2025-01-17 17:50 UTC): 인그레스 구성에 다음 스니펫을 추가했음:
nginx.ingress.kubernetes.io/configuration-snippet: |
  if ($http_user_agent ~* ""(Amazon)"" ){
    return 418;
  }

       봇이 여전히 다른 IP에서 공격 중임. 요청의 약 10%는 amazonbot 사용자 에이전트가 없음. 다음에 무엇을 해야 할지 모르겠음. 미래가 싫음
     * 도움 요청: AmazonBot을 운영하는 사람에게 git.xeserv.us를 차단된 도메인 목록에 추가해달라고 요청함. Amazon에 아는 사람이 있다면 이 메시지를 전달해주길 바람. Git 서버를 크롤링하려면 하드웨어 업그레이드에 상응하는 비용을 지불할 수 있도록 연락해주길 바람. Gitea 서버를 대중에게 닫고 싶지 않지만, 필요하다면 그렇게 할 것임. AI 크롤러 봇을 차단하는 것은 무의미함. 봇은 거짓말을 하고, 사용자 에이전트를 변경하며, 주거용 IP 주소를 프록시로 사용함. 요청이 멈추길 바람
     * robots.txt 파일을 이미 모든 봇을 차단하도록 구성했음:
User-agent: *
Disallow: /

       더 해야 할 일이 무엇인지 모르겠음

        Hacker News 의견

     * 변호사에게 ""명확한 중지 및 중단"" 서신을 작성하도록 요청하여 Amazon에 전달함으로써 문제 해결을 시도할 수 있음
          + Amazon이 중단하지 않으면 형사 고발을 통해 주의를 끌 수 있음
     * 웹사이트에 사람이 방문하지 않을 링크를 추가하고 robots.txt에 이를 금지하여 AI 크롤러를 차단하는 방법 제안
          + IP 주소가 해당 링크를 방문하면 24시간 차단함
     * AI 및 SEO 봇들이 robots.txt를 거의 준수하지 않으며 차단하기 어려움
          + AI 크롤러가 접근을 원한다면 규칙을 따르거나 비용을 지불해야 함
     * Amazon이 아닌 다른 주체가 AI 크롤러로 위장할 가능성 있음
          + 회전하는 주거용 IP와 변경되는 사용자 에이전트 문자열이 의심스러움
     * 개인 서버에서 AI 크롤러로 인해 CPU 사용량이 급증하는 문제 발생
          + robots.txt와 사용자 에이전트 기반 차단 목록으로 문제를 줄였으나 지속 여부는 불확실함
     * AI 크롤러를 차단하는 대신 유해한 콘텐츠를 제공하여 문제를 해결할 수 있을 것이라는 의견
          + Amazon이 이를 발견하면 문제 해결을 위해 비용을 지출할 가능성 있음
     * Amazon으로 위장한 DDoS 공격일 가능성 제기
          + 주거용 IP에서 요청이 오는 것이 의심스러움
     * Pinboard 사이트도 AI 크롤러로 인해 트래픽이 급증하여 사이트가 다운됨
          + IP 범위로 차단할 수 없어 캡차를 사용해야 함
     * Amazon이 AWS 크레딧을 제공하여 트래픽 초과 비용을 보상해주길 바라는 의견
          + 광고 수익으로 이를 상쇄할 수 있을 것이라는 기대
     * Nginx를 구성하여 차단하기 전, Bytespider와 Amazonbot이 전체 트래픽의 80%를 차지함
          + ClaudeBot이 Redmine에 5년간의 트래픽을 한 달 만에 초과시킴
"
"https://news.hada.io/topic?id=18829","폴 그레이엄과의 만남","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              폴 그레이엄과의 만남

     * 서문
          + 2025년 초반의 어려움과 불안감을 설명하며, 사람들이 자신을 지지하지 않을까 걱정하는 상황을 공유함.
          + Paul Graham과의 만남을 통해 느낀 점을 설명하기 위해 이 에세이를 작성함.
     * Y Combinator 경험
          + 2015년 여름, Y Combinator에 참가하여 스타트업 창업자들을 위한 교육을 받음.
          + 멘토들이 참가자들을 믿어주고, 그들의 성장을 돕는 방식이 매우 효과적이었음.
          + 매주 멘토와의 만남을 통해 성과를 발표하고 문제를 논의하며 더 나은 결과를 위해 노력함.
          + Demo Day를 통해 투자자들에게 발표할 기회를 얻고, 성공의 가능성을 높임.
     * Paul Graham과의 만남
          + Paul Graham과의 만남에서 자신의 아이디어를 설명하고 피드백을 받음.
          + 회사 이름에 대한 조언을 받았으나, 그가 제안한 이름은 이미 사용 중이었음.
          + Y Combinator 경험이 삶에 긍정적인 영향을 미쳤으며, 사람들로부터 더 진지하게 받아들여짐.
     * 스타트업의 실패와 그 이후
          + 제품이 유용하다고 평가받았으나, 충분한 수익을 창출하지 못해 사업을 접음.
          + GitHub가 유사한 기능을 무료로 제공하기 시작하면서, GitHub에 인수됨.
          + 투자자들에게 일부 자금을 반환하며 윤리적인 행동으로 칭찬받음.
     * 개인적 변화와 사회적 이슈
          + 트랜스젠더로서의 정체성을 찾고, 더 행복해진 삶을 설명함.
          + Paul Graham의 ""Wokeness""에 관한 에세이와 Mark Zuckerberg의 발표로 인해 불안감을 느끼게 됨.
          + 사회적 정의와 관련된 논의에서 자신의 존재가 ""너무 깨어있다""고 평가받을까 걱정함.
     * 산업 내의 변화와 불안
          + 현재 산업의 변화가 불안감을 조성하며, 차별의 가능성을 우려함.
          + 자신의 능력과 성과가 인정받지 못할까 걱정하며, 다음 스타트업에 대한 투자 가능성을 염려함.
          + 과거에 자신을 믿어주었던 사람들이 이제는 자신을 차별할까 두려워함.

        Hacker News 의견

     * PG는 영웅이 아니라 단지 비즈니스 거래를 한 사람이라는 인식이 중요함. 기술 CEO들이 사회적으로 퇴보한 강도 귀족처럼 보임. 젊었을 때 기술이 제공할 가능성에 실망을 느낌.
     * 스타트업이 월 수백 달러를 받는 것만으로도 성공이라고 생각함. VC 자금이 성공적인 스타트업을 망치고 소진시켰다고 봄.
     * 개인의 중요성이 정체성보다 중요하다는 점이 현재 시대에 과소평가되고 있음. 모든 사람을 개별적으로 대하는 것이 목표임.
     * 유럽에서 이민자로서의 경험이 실망스럽고, 기회가 사라지는 느낌을 받음. 이 나라의 평판과 실제 경험 사이의 괴리감이 있음.
     * 기술 산업의 변화에 실망감을 느낌. 지적 재산을 포기하게 만든 상위층에 대한 불만이 있음.
     * 성소수자에 대한 사회적 인식이 변화했음을 언급하며, 트랜스젠더도 마찬가지로 이해받아야 한다고 주장함.
     * PG와 Andreessen이 악의적인 사람은 아니지만, 배제적인 움직임을 과소평가하고 있다고 생각함. 과거의 정치적 리더십을 그리워함.
     * PG의 에세이가 좁은 범위에 집중되어 있으며, 좌파에 대한 비판을 다루고 있음. 사람들이 이슈를 합리적으로 논의할 수 있기를 바람.
     * PG와 같은 인물들이 해커 정신에서 멀어졌다고 생각함. 그들의 관심은 권력 축적과 혁신가 이미지 유지에 있음.
     * 기술 분야에서 많은 사람들이 저자의 행복을 지지하고 있음을 알리고 싶음.
"
"https://news.hada.io/topic?id=18814","Jazz - Local-First 앱을 위한 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Jazz - Local-First 앱을 위한 프레임워크

     * 클라이언트 사이드 코드만으로 앱 전체 구축
          + 데이터베이스 배포, SQL 스키마 설계, 관계 설정 및 쿼리 작성이 필요 없음
          + TypeScript만 알면 Jazz를 이용해 앱 개발 및 배포 가능
     * 데이터는 먼저 로컬에 저장되고, 이후 서버로 동기화됨
          + 인터넷 연결이 불안정하거나 오프라인 상태에서도 원활히 작동하며, 연결이 복구되면 데이터가 자동 동기화됨
          + API 호출 없이 데이터 변경만으로 UI 즉각 반영
          + 동일 계정의 모든 기기가 항상 데이터 동기화 상태 유지
          + 간단히 데이터 공유만으로 멀티플레이어 환경 구축 가능. 사용자 존재감을 표현하는 UI(예: 커서 표시) 구현도 용이
     * 안전한 협업을 위한 역할 기반 권한 관리기능 내장
          + 데이터 생성 시 기본적으로 역할 기반 권한 설정
               o 권한 유형: 읽기(reader), 쓰기(writer), 관리자(admin)
          + Account 또는 Group을 통해 권한 관리
     * 앱에 필요한 기능들을 기본 내장
          + 파일 업로드
          + Progressive 이미지 로딩
          + Server Workers
          + 인증: Passkey(터치 ID, Face ID), Clerk, Auth0, Okta, NextAuth
          + Jazz Cloud : Jazz 앱을 수백만 사용자까지 확장 가능한 실시간 동기화 및 저장 인프라
     * 호환되는 스택 : Vanilla JS, React, React Native, Vue, Svelte, Node.js
          + Swift, Rust, Kotlin 추가 지원 예정
     * 곧 제공될 추가 기능들
          + 커서 및 캐럿 : 협업시 사용자 표시을 위한 UI 제공
               o 2D 캔버스 커서
               o 텍스트 캐럿
               o 요소 기반 포커스 표시
               o 스크롤 초과 상태 및 위치 도우미
          + 데이터베이스 양방향 동기화
               o 기존 앱에 Jazz 추가 가능:
               o Prisma, Drizzle, PostgreSQL 등 지원
          + 영상 및 음성 지원
               o 그룹 멤버 간 WebRTC 자동 연결
               o 음성/영상 스트리밍 및 녹화 기능 제공
          + CoPlainText 및 CoRichText
               o 협업용 일반 텍스트 및 리치 텍스트 지원
               o 대부분의 편집 충돌 방지
               o Markdown, HTML, JSX 등 다양한 형식으로 렌더링 가능

   SuperSync 의 라이트 버전 같은 느낌이군요.
   아직 유료 버전이 런칭도 안된 상태인데, 문제는 신뢰성일 것 같아요.
   일단은 라이트하다는 건 좋아보이는데,
   로컬 DB 를 신경쓸 필요 없다는 홍보가 좀 꺼림직합니다.
   SQLite, IndexedDB 없이 Lo-Fi ?? 글쎄요...

   Vanilla JS 지원 한다는데 Documentation은 없어요. React, Svelte 등을 변환해서 쓰는건가 싶어요.
   복잡한 기능(실시간 채팅, 스트리밍)을 구현한 프레임워크인데 그만큼 복잡도가 높을겁니다. 커스터마이즈, 수정하기가 어려울거에요.
   Local First 디자인은 마음에 듭니다.

   Local-Fist -> Local-First
"
"https://news.hada.io/topic?id=18832","실패가 아닌 나: 여섯 번의 실패한 스타트업 시도에서 얻은 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  실패가 아닌 나: 여섯 번의 실패한 스타트업 시도에서 얻은 교훈

소개

     * 글쓴이는 과거부터 실패를 많이 경험했음
     * 실패가 이어져도 인생 전체가 실패로 귀결되는 것은 아니라는 메시지를 전달하고 싶었음
     * 어릴 때 두 가지 목표가 있었음: 대학 교수가 되는 것과 성공적인 스타트업을 창업하는 것이었음
     * 결국 둘 다 이루지 못했지만, 인생 전체로 볼 때는 긍정적 결과를 얻었음

실패 #0: 교수의 길

     * 원래 뇌외과 의사가 되고 싶었지만 고등학교 생물 수업 중 해부 실습에서 한계를 느낌
     * 이후 컴퓨터와 AI로 진로를 전환했고, AI 붐이 한풀 꺾인 ‘AI 겨울’ 시기에 대학에 지원했지만 인터뷰조차 못 받았음
     * 직장을 이어가던 중, 과학 연구가 이상적으로 상상했던 분야와 크게 다르다는 사실을 깨닫게 됨
     * 점차 동기가 사라져 학계를 떠났고, 학계가 만병통치약이 아님을 배움

실패 #1: FlowNet

     * MIT에서 하드웨어 엔지니어를 만나 신규 컴퓨터 네트워크 기술인 FlowNet을 함께 개발했음
     * 경쟁 대비 압도적 가격 대비 성능을 지닌 프로토타입을 만들었지만, 빠르게 보급된 Fast Ethernet에 밀려 결국 실패로 끝났음
     * 이미 표준화되고 대규모로 도입되는 인프라를 정면에서 대체하기 어려움을 배움

중간 이야기: Google

     * 2000년 무명에 가까웠던 Google에 입사했음
     * 결과적으로 회사는 성공했지만, 개인적으론 여러 실수를 저지르며 자격지심을 느꼈음
     * 1년 근무 후 다시 JPL로 돌아갔고, 이후 Google의 IPO로 재정적 자유를 얻었음

실패 #2: IndieBuyer

     * Google IPO 후 본격적으로 창업에 뛰어듦
     * 넷플릭스 스타일로 독립 영화 콘텐츠를 판매하고, 마음에 들지 않으면 환불해 주는 모델을 시도함
     * 자금 부족으로 시장에서 눈에 띄는 성장을 이루지 못했고, 외부 투자 유치에도 실패해 철수했음
     * 영화 산업이 얼마나 어려운지 절감함

실패 #2.5: Evryx

     * 역이미지 검색 기술로 시작된 회사였지만, 창업자가 내부 갈등으로 해고되면서 CTO 역할을 잠시 맡음
     * 금융 위기가 겹쳐 투자 불발, 창업자가 부당한 판단으로 투자를 거부해 회사가 문을 닫음
     * 뛰어난 기술자도 이해하기 어려운 의사결정을 내릴 수 있음을 다시금 배움

실패 #3: iCab

     * 스마트폰의 위치 기반 택시 호출 아이디어였음
     * 같은 시기에 Ubercab(현 Uber)이 비슷한 아이디어로 시장에 진입했고, iCab은 택시 업계와의 협업 문제를 해결하지 못함
     * 두 번째 아이디어가 필요했지만 떠올리지 못해 실패했음

실패 #4: Virgin Charter

     * 사설 제트기 시장을 연결해주는 세 단계 계획을 세웠음
     * 더 효율적인 스케줄링으로 공회전 비행을 줄여 이익을 극대화하고자 했음
     * 뛰어난 계획 덕분에 Richard Branson에게 인수 제안을 받았으나, 예상치 못한 전략 변경으로 회사가 실패함
     * 동업자와의 궁합과 업계 경험이 얼마나 중요한지 다시 인식함

실패 #5: Founder's Forge

     * 신용카드 사기를 근본적으로 줄이기 위해 디지털 서명 방식을 활용한 회계·결제 시스템을 구상함
     * 은행 API 접근이 필수였는데, 은행들이 일제히 긍정적 반응에서 돌연 철회하면서 더 이상 진행 불가능해짐
     * 금융 산업의 보수성과 불투명함이 혁신을 가로막는다는 사실을 직접 경험함

실패 #6: Spark Innovations

     * 스프레드시트를 데이터베이스처럼 사용하는 문제점을 해결하기 위해, 스프레드시트 UI + SQL 백엔드 구조를 시도함
     * 기획 단계에서 투자자가 먼저 투자를 제안할 정도로 전망이 좋았음
     * 그러나 출시 후 고객들이 돌연 관심을 잃고, 공동 창업자가 경제적 이유로 떠나면서 회사가 해체됨
     * 이전과 유사하게 시장 반응이 예상과 달라 방향 전환에 실패함

맺음말

     * 6번 이상의 실패와 교수 진로 좌절을 경험했음
     * 다만, 실패가 겹치더라도 개인적으로 성장하고 만족스러운 삶에 이를 수 있음을 깨달음
     * 구글 성공 등 운이 따랐던 부분도 있지만, 반복된 실패 속에서 학습하고 자기 자신을 발전시킨 결과라 여김
     * 결국 여러 실패도 긍정적 인생으로 이끌 수 있음을 강조함

   이 글을 읽은 나
   뭐든 초기 아이디어를 끝으로 벽에 부딪혔다고 바로 포기하면
   실패를 6번 경험한다는 것을 배움

   ㅎㅎㅎ

        Hacker News 의견

     * 성공은 본인이 원하는 방식으로 이루어지는 것이라고 생각했으나, 이제는 예상치 못한 성공도 인정하게 되었음. 성공은 측정 가능한 것이 아니므로, 자신의 진보에 대해 긍정적으로 느끼는 것이 중요함
          + 글의 맥락에서 보면, 저자는 실패로 보일 수 있는 것들에서 행복을 찾았으며, 결국 성공으로 결론지었음
     * 스타트업이 맞지 않을 수도 있으며, 안정적인 직업을 통해 가족에게 안정감을 주는 것도 좋은 선택일 수 있음
     * 은행들이 긍정적으로 반응했다가 이유 없이 마음을 바꾼 경우에 대한 통찰을 가진 사람이 있는지 궁금함
     * 실패가 아니며, 가족을 부양하고 집을 제공하는 것만으로도 충분히 성공적임. 경험은 적절한 스타트업에 매우 유용할 것임
     * 스타트업 운영에서 배운 주요 교훈은 '하지 말라'는 것임. 어려워지면 그만두는 것이 좋음. 생존 편향으로 인해 성공 사례만 보게 됨
     * 창업자로서 겪는 일들은 흥미로운 이야기로 남을 수 있지만, 대부분의 흥미로운 이야기는 묻혀버림. 현실은 보이는 것과 다를 수 있음
     * Grab에서 일할 때, 운전기사들에게 무료 닭고기를 제공하여 가족들이 식사를 준비할 수 있게 했던 사례가 있음
     * 은행들이 사기 비용을 사업 비용으로 처리하고 소비자에게 전가하는 방식에 대해 더 알고 싶음
     * 몇몇 실패 사례는 시기나 실행의 문제였으며, 다른 사람들이 성공적으로 구현한 경우가 많음
          + iCab: Uber와 유사한 개념으로 성공적이었음
          + Smart Charter: 현재는 쉽게 개인 제트를 온라인으로 예약할 수 있을 것임
          + Founder’s Forge: Ramp가 기록 관리와 결제를 연결하여 성공한 사례임
          + Spark Innovations: Airtable의 기본 개념과 유사함
     * 재미있는 글이었으며, 다시 시도해보기를 바람. ""처음에 성공하지 못하면, 다시 시도하라. 그리고 그만둬라. 바보짓을 할 필요는 없다""는 W.C. Fields의 말을 인용함
"
"https://news.hada.io/topic?id=18833","다크 모드 강제 사용 금지 요청","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           다크 모드 강제 사용 금지 요청

     * 제발 다크 모드를 강요하지 말아주세요
          + 웹사이트 디자이너들에게 다크 모드를 사용자에게 강요하지 말라는 요청임.
          + 다크 모드가 브랜드의 특징이라면, 텍스트의 편안한 대비 비율을 선택해야 함.
          + 많은 웹사이트가 다크 모드로만 디자인되어 있어 읽기 어려운 경우가 많음.
     * 내 눈! 내 눈! 😵‍💫
          + 다크 모드로 읽으면 눈에 부담이 가고, 읽은 후에도 시각적 잔상이 남음.
          + 긴 글을 읽고 나면 수평 줄무늬가 보이는 등의 불편함이 있음.
     * 다크 모드의 진짜 문제는 무엇인가?
          + 다크 모드의 진짜 문제는 텍스트와 배경 간의 대비 비율임.
          + 순수한 흰색 텍스트와 검은색 배경의 대비 비율은 21:1로 눈에 부담을 줌.
          + 반면, 밝은 회색 텍스트와 어두운 회색 배경은 눈에 편안하며 대비 비율은 4.34:1임.
     * 이에 대한 지침은 없는가?
          + 웹 콘텐츠 접근성 지침(WCAG) 2.1은 일반 텍스트에 대해 최소 대비 비율 4.5:1을 권장하지만, 최대 비율에 대한 지침은 없음.
          + 다크 모드에서 높은 대비 비율에 대한 표준이나 지침이 현재 없음.
          + 다가오는 WCAG 3.0은 ""최대 텍스트 대비""에 대한 새로운 탐색 요구사항을 추가하며, 다크 모드에서 높은 대비 비율 문제를 해결할 것으로 기대됨.
     * 다크 모드를 즐길 때
          + OLED 화면에서 어두운 방에서 읽을 때, 특히 잠자기 전 휴대폰으로 글을 읽을 때 다크 모드를 선호함.
          + 대부분의 IDE는 기본적으로 편안한 대비 비율을 제공하는 다크 모드를 가지고 있음.
          + 웹사이트가 다크 모드에서 편안한 대비 비율을 제공할 때 다크 모드를 즐김.
     * 참고: 이 글은 Hacker News에서 활발하고 통찰력 있는 토론을 촉발했으며, 다양한 관점과 개인 경험, 접근성 문제 등이 논의됨. 이 주제의 미묘한 차이를 완전히 이해하려면 Hacker News 스레드에서 공유된 가치 있는 관점을 놓치지 말아야 함.

        Hacker News 의견

     * 초기 컴퓨터 디스플레이는 어두운 배경에 밝은 텍스트를 사용했음. Microsoft Windows가 흰 배경에 검은 텍스트로 전환하여 불편했음. 다크 모드의 부활을 반가워하며, 너무 밝지 않은 라이트 모드 옵션도 필요함
     * 웹사이트가 다크 모드만 제공하면 그것이 그 사이트의 테마임. 라이트 모드가 있어야 다크 모드가 존재할 수 있음. 두 모드를 유지하도록 강요하지 말아야 함
     * 기본 설정 불가능한 라이트 모드가 오래 지속되었음. 다크 모드가 더 나은 상황은 어두운 방에서 화면이 유일한 빛일 때뿐임. 다크 모드는 임시 방편이며, 라이트 모드는 밝은 환경에서 읽기 어려움
     * 특정 블로그가 기기 설정을 무시하고 라이트 모드를 강요함. 문제는 다크 모드가 아니라 색상 대비임
     * 낮은 대비 비율을 강요하지 말아야 함. 모든 사용자가 밝은 환경에서 콘텐츠를 보는 것은 아님. SDR 색상 범위를 활용해야 함
     * 웹사이트가 시스템의 사용자 설정을 존중하길 바람. 브라우저가 개발자에게 너무 많은 통제권을 주었음. 사용자의 설정이 우선되어야 함
     * 많은 웹 개발자가 다크 모드를 기본으로 설정하고 사용자의 선호를 무시함. color-scheme CSS 속성을 사용하여 요소가 어떤 색상 스킴에서 렌더링될 수 있는지 표시할 수 있음
     * macOS 사용자로서, 상황에 따라 다크 모드와 라이트 모드를 혼합하여 사용함. 시스템 설정을 통해 테마를 변경할 수 있음
     * 블로그의 ""읽기 쉬운 텍스트"" 예시가 읽기 어려움. 낮은 대비 때문임
     * 개인적으로 라이트 모드를 선호하지만, IDE나 터미널에서는 다크 테마를 사용할 때 밝기를 최대치로 설정함. 다크 모드는 눈에 더 부담이 되고 집중하기 어려움
     * 웹 API를 사용하여 사용자가 다크 모드인지 확인할 수 있음. @media (prefers-color-scheme: dark)를 사용하여 CSS 규칙을 적용할 수 있음
"
"https://news.hada.io/topic?id=18901","g.co, Google의 숏 URL을 이용한 피싱 공격 사례 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   g.co, Google의 숏 URL을 이용한 피싱 공격 사례

     * 해커가 Google 공식 URL 숏도메인 g.co의 하위 도메인(important.g.co)을 악용해 정교한 피싱 공격을 시도한 사례임
     * 전화 발신자 표시가 ""Google""로 뜨고, 발신번호도 (650) 203-0000이어서 실제 Google에서 걸려온 것처럼 보임
     * 통화 품질이나 언어 구사도 자연스러워, 피싱임을 의심하기 어려운 수준이었음

통화 내용 개요

     * 발신자는 ""Google Workspace"" 직원이라 주장하며, 사용자가 최근 프랑크푸르트 IP에서 로그인 시도가 있었는지 묻는 상황 설명을 함
     * 사용자가 의심하며 “Google 공식 이메일로 확인해 달라” 요구하자, important.g.co 주소로 메일을 보냄
     * Google 측에서 운영하는 것으로 알려진 g.co 하위 도메인이었기에 신뢰하기 쉽도록 유도함
     * 이후 기기 세션을 재설정한다며, 2단계 인증(2FA) 코드를 사용자에게 전송하고 해당 코드를 누르도록 유도함
     * 코드를 클릭할 경우, 해커가 사용자의 Google 계정 접근 권한을 획득할 수 있는 구조였음

이메일 및 도메인 분석

     * g.co 자체는 Google의 공식 단축 URL 도메인임
     * 그러나 important.g.co와 같은 하위 도메인을 마음대로 생성할 수 있는 방식의 취약점이 존재하는 것으로 추정됨
          + Google Workspace의 도메인 인증 과정 결함을 악용하여 g.co 하위 도메인을 검증 없이 확보한 것으로 보임
     * 발신된 이메일의 DKIM/SPF 등도 정상적으로 통과되어, 진짜 Google에서 보낸 메일처럼 표시됨

공격 과정 주요 포인트

     * 전화 스푸핑: Caller ID가 ""Google""로 표시되도록 조작함
     * 공식 연락 수단 유사성: 알려진 Google 전화번호를 언급하면서, 실제 Google 서포트 페이지를 보여 주어 신뢰를 얻음
     * 정교한 음성 지원: 발신자의 언어 및 태도, 흐름 등이 실제 엔지니어처럼 매우 설득력 있게 연출됨
     * g.co 하위 도메인 메일: 사용자에게 메일을 보내 “Google 내부 서브넷”이라 설명하여 의심을 무디게 함
     * 2FA 코드 요구: 최종적으로 기기 세션 로그아웃을 유도하며, 사용자가 2FA 코드를 누르면 해커가 계정에 접근 가능함

Hack Club 측 분석

     * Google Workspace에서 important.g.co 같은 하위 도메인을 실제로 확보할 수 있었다는 가설 제시
     * 해당 취약점으로 g.co 내부 서브도메인을 Google Workspace 계정에 연결할 수 있어, SPF/DKIM 인증 메일을 합법적으로 발송 가능해짐
     * 여러 기여자가 이메일 헤더, 도메인 설정 등을 검토해 문제를 확인함

요약

     * 전통적으로 알려진 “공식 번호 확인”과 “공식 도메인으로 온 이메일” 확인만으로는 안전하지 않을 수 있음을 시사함
     * 전화나 이메일이 진짜 Google임을 방증하는 여러 요소(전화번호, 도메인, DKIM/SPF)도 신뢰를 보장하지 못함
     * 의심스러운 상황에서 요청받은 2FA 코드를 누르거나 전달하는 행위에 특히 주의가 필요함
     * Google Workspace 계정과 도메인 인증의 취약점을 악용한 사례로 보이며, 서비스 공급자 측의 보안 개선이 요구됨

        Hacker News 의견

     * ""colnbase.com""과 같은 피싱 사이트에 접속한 경험이 있으며, 1Password가 자격 증명을 자동으로 입력하지 않아 문제를 인식했음. 이러한 피싱 사이트는 누구나 속을 수 있는 위험이 있음
     * 기술 회사에서 오는 전화는 대부분 사기임. 발신자 ID나 발신자의 억양은 중요하지 않음
     * SPF, DKIM, DMARC가 통과되는 피싱 공격이 있으며, Google Form을 공유하여 이메일을 보내는 방식이 사용됨
     * 비밀번호 재설정이나 사기 결제 알림은 내가 직접 요청하지 않는 한 피싱으로 간주함. 실제로 문제가 있는지 확인 후 조치를 취하는 것이 안전하다고 생각함
     * 중요한.g.co에 대한 DNS 레코드가 없으며, 인증되지 않은 Google Workspace에서 이메일을 보낼 수 있는 버그가 있음. g.co 도메인에 대한 보호가 누락된 것으로 추측됨
     * 전화번호 확인과 합법적인 도메인에서 이메일을 받는 두 가지 ""최고의 관행""을 따랐다면 사기에 당했을 것임. 그러나 첫 번째 관행을 따르지 않았고, 발신자가 전화를 걸 수 없다고 명시했음
     * workspace-noreply@google.com에서 이메일을 스푸핑하는 방법에 대해 궁금함. 'important.g.co'의 비밀번호라는 표현이 이상하여, 동일한 이메일로 '병렬' 계정을 만들어 공식적인 이메일처럼 보이게 하는 전략일 수 있음
     * 몇 달 전 비슷한 경험을 했으며, Google Workspace에서 이메일을 발신자와 선택한 추가 수신자에게 보낼 수 있는 기능이 있었음. 회신 요청에 대해 불가능하다고 답변받아 의심스러웠음
     * Google이 이러한 공격에 더 강력하게 대응해야 함. 계정 복구 흐름을 통해 계정을 탈취할 수 있는 정교한 방법이 있으며, 이를 보고했으나 ""버그가 아님, 남용 위험으로 분류""라는 답변을 받았음
     * 도메인 만료가 악의적인 주체에 의해 시스템 접근에 사용되는 것이 최근 사이버 공격의 증가 원인임
"
"https://news.hada.io/topic?id=18918","모든 HTML 요소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               모든 HTML 요소

     * HTML 요소는 콘텐츠, 컨테이너, 논리, 예외 케이스까지 다양한 역할을 수행함
     * 일부 요소는 시각적으로 보이지만, 그렇지 않은 요소도 있음
     * 어떤 요소는 다른 요소와 결합하여 사용되며, 어떤 요소는 브라우저에서만 읽히도록 설계됨
     * 일부 요소는 좋은 의도로 만들어졌으나 널리 사용되지 않음
     * 참고로, 현재 읽고 있는 내용은 <article></article> 요소임

        Hacker News 의견

     * 최근에 2.9B 페이지의 Common Crawl 데이터셋에서 HTML 태그와 속성 값을 분석한 블로그 게시물을 발표했음. SQLite DB로 상위 1,000개의 태그+속성+값 조합을 다운로드할 수 있음
     * 이 게시물은 ""A blog post with every HTML element""와 비교할 때 재미있음. 이 게시물은 시각적으로 보여주며 약간 혼란스러울 수 있지만 긍정적으로 평가됨. 반면 다른 게시물은 설명이 많고 다르게 접근함
     * HTML 콘텐츠가 축소되지 않고 각 요소에 대한 주석이 추가되면 유용할 것임
     * <dialog> 요소는 ""HTML만으로 표시되는 모달 대화상자""라고 설명하지만, JavaScript document.getElementById('my-dialog').showModal()을 사용하여 열리므로 약간 오해의 소지가 있음
     * <ruby> 태그를 포함한 것이 마음에 듦. 중국어/일본어 문자를 영어 텍스트로 렌더링할 때 더 많은 페이지가 이를 사용하기를 바람
     * 자신이 만든 커스텀 브라우저에서 구현한 커스텀 태그를 언급함
     * 브라우저 게임 애호가로서 캔버스를 놓친 것에 대해 시도해볼 것임
     * 브라우저가 여러 수준의 재귀적 iframe을 표시할 수 있는 것이 인상적임
     * 페이지가 자체 소스 코드를 표시하는 방식으로 구현할 수 있을지 궁금함. 비슷한 예로 <a href=""https://no-gravity.github.io/html-quine/index.html"">HTML Quine</a>이 있음. 비텍스트 요소는 개별적으로 처리해야 할 수도 있음. 예를 들어, 비디오는 코드에서 자신의 표현을 보여주는 비디오를 표시해야 할 것임
"
"https://news.hada.io/topic?id=18799","저녁 식사 시 높은 Potassium 섭취, 수면 장애 감소와 연관 – 연구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               저녁 식사 시 높은 Potassium 섭취, 수면 장애 감소와 연관 – 연구

     * 수면 장애는 많은 사람들에게 영향을 미치며, 수면 지원에 대한 수요가 증가하고 있음
     * 이전 연구에서는 특정 영양소와 불면증 간의 관계를 탐구했지만, 매크로 및 미세 영양소의 일일 섭취 패턴에 대한 포괄적인 분석은 제한적이었음
     * 나트륨이 높고 칼륨이 낮은 식단은 야간 혈압 감소에 영향을 미치는 것으로 나타났으며, 야간 고혈압은 수면 장애와 관련이 있음
     * 일본의 횡단 연구에서는 건강한 일본 성인의 칼륨 및 나트륨 섭취와 불면증 간의 관계를 조사했음
     * 연구는 Asken이라는 일본의 음식 기록 앱을 통해 2021년 1월부터 2월까지의 아침, 점심, 저녁, 간식 동안의 에너지 섭취 및 단백질, 지방, 탄수화물, 나트륨, 칼륨 소비 데이터를 수집했음
     * 앱은 2024년 11월 기준으로 1,120만 건 이상의 다운로드를 기록했으며, 연구 목적으로 신뢰할 수 있는 것으로 검증된 자가 보고 음식 기록을 제공함
     * 연구의 일환으로 2021년 1월 말에 20세에서 64세 사이의 앱 사용자 4,568명(여성 3,320명, 남성 1,248명)으로부터 온라인 설문조사 응답을 받았음
     * 수면 장애는 불면증을 평가하기 위해 설계된 자가 보고 심리 측정 설문지인 아테네 불면증 척도(AIS)를 사용하여 평가되었음
     * 설문지는 8개의 항목으로 구성되어 있으며, 총 점수는 증상 심각도에 따라 정상(3점 이하), 아임상적 불면증(3점 초과 6점 미만), 임상적 불면증(6점 이상)으로 분류됨
     * 연구 결과, 총 일일 칼륨 섭취량은 AIS 점수와 역상관 관계가 있는 것으로 나타났음 (p = 0.034)
     * 각 식사(아침, 점심, 저녁, 간식) 동안의 소비를 분석한 결과, 저녁 식사 시의 칼륨 섭취만이 AIS 점수와 유의미한 관련이 있었음 (p = 0.003)
     * 연구자들은 ""우리의 발견은 칼륨 섭취가 수면의 질과 관련이 있을 수 있음을 시사함. 특히 저녁 식사 시의 높은 칼륨 섭취는 수면 장애가 적음을 나타냄 [AIS 점수 기준]. 이 연구는 향후 개입 연구 및 개인 맞춤형 식이 권장 사항의 기초를 제공함""이라고 언급함

    칼륨의 힘

     * 이전 연구에서는 낮은 칼륨 섭취가 짧은 수면, 낮 동안의 졸음, 낮은 수면의 질 및 수면 효율성, 야간 각성과 관련이 있음을 보여줌
     * 칼륨 섭취와 수면 간의 관계를 설명하는 몇 가지 잠재적 메커니즘이 존재함
     * 첫째, 적절한 칼륨 수치는 근육 수축 및 이완에 필수적이며, 이는 신경 섬유와 근육 세포에서 전기 신호를 전달하는 데 중요한 역할을 하여 전체 근육 기능을 조절하고 수면 패턴에 기여함
     * 또한, 칼륨은 신경전달물질 기능에 필수적이며, 이는 수면과 각성을 조절하는 데 중요한 역할을 함
     * 연구에 따르면 칼륨은 수축기 및 이완기 혈압을 모두 감소시킴. 수면 장애와 고혈압 간의 잘 문서화된 연관성을 고려할 때, 이러한 발견은 칼륨 섭취가 혈압을 조절하여 더 나은 수면을 유도할 수 있음을 시사함
     * 그러나 저녁 식사 섭취가 특히 중요한 이유에 대한 메커니즘은 아직 조사되지 않았음
     * 연구자들은 ""칼륨 섭취와 불면증 간의 관찰된 연관성을 더 잘 이해하기 위해, 향후 연구는 식이 기록과 혈압 데이터를 모두 포함해야 함. 인과 관계를 확립하고 수면에 영향을 미치는 다른 요인을 탐구하기 위해 종단 연구 및 개입 연구도 필요함""이라고 언급함

    나트륨 섭취와 수면 간의 연관성 검증 필요

     * 여러 연구에서 나트륨 또는 소금 섭취가 수면 유지 어려움, 늦은 수면 시간, 불면증 확률 증가와 관련이 있음을 발견함
     * 예를 들어, 일본의 횡단 연구에서는 에너지 조정 나트륨 섭취가 건강한 일본 성인 남성의 수면 시간과 양의 상관관계가 있음을 보여줌
     * 그러나 이번 연구에서는 나트륨 섭취와 AIS 점수 간의 유의미한 연관성이 발견되지 않았음. 이는 나트륨 섭취와 수면 간의 관계를 검증하기 위한 추가 증거가 필요함을 시사함
     * 일본 식단은 높은 나트륨과 낮은 칼륨 섭취, 또는 높은 나트륨-칼륨 비율로 특징지어짐
     * 나트륨-칼륨 비율은 혈압 결과 및 고혈압 발생을 평가하는 데 있어 나트륨 또는 칼륨의 개별 측정보다 우수한 지표로 인정받음
     * 신장에서 발현되는 나트륨-염화물 공동수송체(NCC)는 요로 칼륨 배설 조절의 핵심 분자임. 낮은 칼륨 식단은 NCC를 활성화하여 나트륨 재흡수를 촉진함
     * 반대로, 높은 칼륨 식단은 NCC 활성화를 강하게 억제하여 요로 나트륨 및 칼륨 배설을 증가시킴
     * 그럼에도 불구하고, 이번 연구에서는 나트륨-칼륨 섭취 비율과 AIS 점수 간의 의미 있는 연관성을 발견하지 못했음

        Hacker News 의견

     * 기사 제목에 너무 많은 의미를 부여하지 말라는 의견. 기사의 마지막 부분이 더 균형 잡힌 관점을 제공하며, 연구 결과가 이전 연구와 상충되어 어떤 결과가 타당한지 불분명함. 더 많은 연구가 필요하며, 제목이 매력적일 수 있지만 식습관을 바꿀 필요는 없음을 강조함
     * 바나나와 같은 칼륨이 풍부한 음식이 알칼리성이어서 위산 역류를 중화할 수 있으며, 이는 수면 장애를 줄이는 한 가지 설명이 될 수 있음을 언급함
     * 칼륨과 직접 관련은 없지만, 마그네슘 보충제가 불면증 개선 및 전반적인 수면 질 향상에 도움이 되었다는 개인적인 경험을 공유함. 또한 훈련 후 근육 회복을 위해 칼륨이 포함된 전해질 혼합물을 섭취하여 신체 통증과 전반적인 웰빙에 도움이 되었음을 언급함
     * 원래 연구가 주요 발견의 방향을 잘못 기술하여 스스로 모순된다는 점을 지적함. 이는 오타인지 아니면 더 심각한 문제인지 의문을 제기함
          + 연구 초록에서는 높은 AIS 점수를 가진 사람들이 더 높은 일일 칼륨 섭취를 했다고 밝힘
          + 연구 본문에서는 높은 칼륨 섭취를 한 사람들이 더 낮은 AIS 점수를 가졌다고 밝힘
     * 자기 보고 불면증 연구의 정확도가 매우 낮다는 의견. 현대에는 수면 추적기를 사용하여 수면 시작을 측정해야 한다고 주장함. 칼륨과 마그네슘 수준 간의 상관관계가 있으며, 칼륨 섭취를 측정했지만 마그네슘에 대한 언급이 없음을 지적함. 칼륨 섭취가 높은 사람들이 마그네슘 수준도 높았을 가능성을 제기함. 마그네슘을 수면에 도움이 되도록 복용하는 사람들은 칼륨도 함께 복용해야 한다고 제안함
     * 칼륨 보충제를 시작하기 전에 과도한 칼륨 섭취가 심장 리듬 장애를 초래할 수 있으며, 일부 일반적인 약물(예: 항고혈압제)이 고칼륨혈증을 유발할 수 있음을 경고함
     * 할머니로부터 취침 전에 바나나를 많이 먹으라는 조언을 받았으며, 천식에 도움이 되었고 수면에도 큰 도움이 되었다고 주장함. 보통 저녁 식사나 디저트로 뜨거운 카레와 함께 먹었다고 언급함
     * 칼륨이 심혈관 질환(예: 뇌졸중)에 미치는 영향에 대한 비디오 시청을 강력히 추천함
     * 이러한 연구에 대한 연구가 있는지 궁금해함. 너무 많은 연구가 있으며, 텔레비전 뉴스에서 하루에 여러 번 발표되기 때문에 관련 연구가 있을 것이라고 주장함
     * 나트륨(Na)이 신호 매개체로 사용되며, 나트륨이 아닌 알칼리 금속이 혈압을 낮추고 심박수와 신경 활동을 느리게 한다는 점을 언급함. 이러한 경향이 더 깊은 수면으로 이어질 수 있다고 주장함
"
"https://news.hada.io/topic?id=18843","Signal, Discord 등 플랫폼을 겨냥한 0-click 익명성 해제 공격","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Signal, Discord 등 플랫폼을 겨냥한 0-click 익명성 해제 공격

     * 안녕하세요, 저는 다니엘입니다. 저는 15세의 고등학교 3학년 학생입니다. 여가 시간에 대기업을 해킹하고 멋진 것들을 만듦. 3개월 전, 특정 앱이 설치된 기기를 통해 공격자가 250마일 반경 내의 대상의 위치를 추적할 수 있는 0-클릭 익명 해제 공격을 발견함. 이 연구를 통해 기자, 활동가, 해커들에게 경고하고자 함.

Cloudflare

     * Cloudflare는 시장에서 가장 인기 있는 CDN 중 하나이며, Sucuri, Amazon CloudFront, Akamai, Fastly 등을 능가함.
     * Cloudflare의 주요 기능 중 하나는 캐싱으로, 자주 접근하는 콘텐츠를 저장하여 서버 부하를 줄이고 웹사이트 성능을 향상시킴.
     * Cloudflare는 전 세계 330개 도시의 데이터 센터를 보유하고 있으며, 이는 Google보다 273% 더 많은 수치임.
     * Cloudflare의 캐시 데이터가 사용자와 가까운 곳에 저장되므로 이를 익명 해제 공격에 악용할 수 있을지에 대한 아이디어를 얻음.

Cloudflare Teleport

     * Cloudflare 데이터 센터에 직접 HTTP 요청을 보낼 수 없지만, Cloudflare Workers를 사용하여 특정 데이터 센터로 요청을 보낼 수 있는 방법을 발견함.
     * Cloudflare Teleport는 Cloudflare Workers를 통해 특정 데이터 센터로 HTTP 요청을 리디렉션하는 프록시 도구임.
     * 이 도구는 이후 Cloudflare에 의해 패치되었지만, 초기 테스트에 사용됨.

첫 번째 익명 해제 공격

     * Cloudflare Teleport 도구를 사용하여 이론을 확인하고, 간단한 CLI 프로그램을 통해 특정 URL로 HTTP GET 요청을 보내고 리소스 캐시 및 나이를 나열함.
     * Namecheap의 favicon을 사용하여 테스트를 수행하고, 이론을 확인함.

실전 적용: Signal

     * Signal은 기자와 활동가들이 많이 사용하는 오픈 소스 암호화 메시징 서비스임.
     * Signal의 첨부 파일 URL은 Cloudflare 캐싱이 설정되어 있어, 캐시 지리적 위치 방법을 사용하여 수신자의 위치를 추적할 수 있음.
     * 푸시 알림을 통해 0-클릭 공격이 가능하며, 사용자가 대화를 열지 않아도 첨부 파일이 자동으로 다운로드됨.

실전 적용: Discord

     * Discord는 게이머를 대상으로 한 무료 앱으로, 최근 정부 유출 및 사이버 범죄와 관련하여 주목받고 있음.
     * Discord의 사용자 아바타 URL은 Cloudflare 캐싱이 설정되어 있어, 푸시 알림을 통해 0-클릭 공격이 가능함.
     * GeoGuesser라는 Discord 봇을 사용하여 자동화된 공격을 수행하고 결과를 Discord에서 직접 확인할 수 있음.

버그 바운티 보고서

     * Signal과 Discord에 연구 결과를 보고했으나, 대부분 실망스러운 반응을 받음.
     * Cloudflare는 데이터 센터 간 이동을 가능하게 했던 버그를 패치했으나, 근본적인 문제는 해결되지 않음.

자신을 보호하는 방법

     * 이 공격은 특히 기자, 활동가, 프라이버시를 중시하는 개인에게 큰 위험이 될 수 있음.
     * CDN을 사용하는 모든 앱은 적절한 예방 조치를 취하지 않으면 여전히 취약할 수 있음.

최종 생각

     * CDN은 성능과 확장성을 향상시키지만, 새로운 방식으로 악용될 수 있는 위험도 함께 도입함.
     * 민감한 역할을 맡고 있거나 프라이버시를 중시하는 사용자는 정보에 밝고 경계해야 함.

        Hacker News 의견

     * Signal 사용자가 사진을 전송하면 Cloudflare를 통해 데이터 센터에 캐시됨. 사용자의 위치를 추적하는 것은 과장된 표현이며, 사용자가 외딴 곳에 있지 않는 한 익명성을 해치는 것은 아님. 그러나 흥미로운 분석임
          + Signal의 자동 첨부 파일 수신 기능은 사생활 보호를 위해 비활성화 옵션이 필요하다고 생각함
          + Signal은 사용 편의성과 사생활 보호의 균형을 맞추려는 접근 방식을 취하고 있음. 보안에 민감한 사용자는 VPN 및 프록시 사용을 권장함
          + 캐싱은 계속될 것이며, Cloudflare의 대응이 최선의 방법 중 하나임. 민감한 정보의 캐싱은 권장되지 않음
     * Signal이나 Discord는 익명성을 제공하지 않음. 메시지를 읽지 못한다고 주장하지만, 완벽하지 않음
          + 미디어 자동 로딩은 사용자 편의를 위한 선택이며, 익명성 공격의 일환으로 사용될 수 있음
          + 익명성을 유지하려면 Discord나 Signal을 사용하지 않는 것이 좋음
     * 일부 사용자는 이 기술이 익명성을 해친다고 생각함. 반복적인 공격으로 사용자의 이동 경로를 추적할 수 있음
     * 250마일 내의 위치 추적은 익명성을 해치는 것이 아님. 추가적인 OSINT가 필요함
     * 이 공격은 법 집행 기관이나 악의적인 행위자가 사용자의 위치를 파악하는 데 사용할 수 있음
     * Signal이 URL 캐싱을 활성화한 이유에 의문을 가짐. 캐싱을 비활성화하면 문제를 해결할 수 있을 것임
     * 인터넷의 기본적인 작동 방식이며, 익명화 프록시가 필요한 이유임. 대다수 사용자에게는 큰 위협이 아님
     * 이 공격은 코드 실행이 없는 비전통적인 공격임. Cloudflare 데이터 센터를 통해 사용자의 대략적인 위치를 파악할 수 있음
"
"https://news.hada.io/topic?id=18819","컴퓨팅의 개인화 시대 도래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             컴퓨팅의 개인화 시대 도래

     * 감시 자본주의와 DRM의 영향
          + 1980년대부터 2000년대 초반까지 기술이 세상을 더 나은 곳으로 만들고 있다는 느낌이 있었음
          + 그러나 인터넷 감시, 소셜 미디어의 알고리듬적 양극화, 약탈적인 앱 스토어, 추출적 비즈니스 모델이 개인 컴퓨터가 약속했던 자유를 침식함
          + 개인 컴퓨터는 개인이 소유하고 완전히 제어할 수 있는 컴퓨터라는 급진적인 아이디어였음
     * 개인 컴퓨터 시대의 종말
          + 1970년대 초 마이크로프로세서의 등장으로 개인이 컴퓨터를 소유하는 것이 경제적이고 실용적으로 가능해짐
          + 개인 컴퓨터 운동은 새로운 아이디어를 탐구하고 창작물을 제어하며 실수를 벌받지 않고 할 수 있는 자유를 의미했음
          + 그러나 지난 10년 동안 인터넷과 DRM이 이러한 통제를 대기업의 손에 넘기고 있음
     * 기술 산업의 문제점
          + 기술 산업이 악하다고 주장하는 것은 아님
          + 시장의 힘과 몇몇 법률이 잘못된 방향으로 이끌고 있음
          + 기술 비평가 Ed Zitron은 이를 ""부패 경제""라고 부르며, 기업들이 유용한 제품보다 지속적인 성장에 집착한다고 지적함
     * 과거로부터 배우기
          + 과거의 기술은 더 건강한 방식으로 사용자와 상호작용했음
          + 예를 들어, Apple II는 생산성, 교육, 엔터테인먼트를 약속하며 사용자가 직접 프로그래밍하고 수리할 수 있었음
          + 20세기 Windows PC에서는 소프트웨어를 구매하면 무기한 사용할 수 있었음
     * 추출적 모델의 문제점
          + 추출적 비즈니스 모델이 프라이버시와 개인의 자유를 침해하고 있음
          + DRM을 통해 소비자를 생태계에 가두려는 시도가 있음
          + AI 생성 소음이 역사적 기록을 오염시킬 수 있는 위험이 있음
     * 통제권을 되찾는 방법
          + 과거로 돌아가자는 것이 아니라, 역사를 배우고 공정한 비즈니스 관행을 통합해야 함
          + 오픈 소스 소프트웨어를 지원하고 데이터를 로컬에 저장하는 등의 단기적인 조치를 취할 수 있음
          + 장기적으로는 포괄적인 프라이버시 법률과 DRM 개혁이 필요함
     * 결론
          + 기술 독점과 거대 기술 기업의 영향력을 견제해야 함
          + 디지털 자유는 실제 법적, 개인적 자유와 동등하며, 우리는 우리의 운명을 통제할 수 있어야 함
          + 개인 컴퓨터가 다시 부활할 것이며, 디지털 삶의 통제권을 되찾을 기회가 올 것임

        Hacker News 의견

     * 개인 웹의 자유를 추구하는 새로운 웹을 만들고자 하는 열망이 있음. 현재 기술계는 상상력 부족으로 인해 이러한 변화를 이루지 못하고 있음. 개인적으로 회사를 설립하여 이 격차를 메우고자 노력 중임.
     * 기술 시장의 규모가 과거와 비교할 수 없을 정도로 커졌음. 초기 기술 기업들은 급성장했으며, 현재는 FAANG 같은 기업들이 지속적인 성장을 추구하고 있음. 광고는 무료처럼 보이지만 실제로는 우리의 주의력을 판매하는 것임. 소비주의로의 전환이 불가피함.
     * Genode/Sculpt에 대한 기대가 큼. 사용자 중심으로 설계된 작은 시스템으로, 재미있는 아이디어를 실험할 수 있음. 과거의 레트로 컴퓨팅 OS와 달리 미래를 엿볼 수 있는 느낌을 줌.
     * NES는 하드웨어 DRM을 통해 게임 출판을 통제했으며, 이는 오늘날의 Apple과 유사함. Game Genie를 차단하려는 시도도 있었음.
     * Ed Zitron의 의견 중 일부는 동의하지 않지만, ""우리 경제는 사용을 위한 것이 아니라 사용량을 증가시키기 위한 것""이라는 인용문은 인상적임.
     * 컴퓨팅이 개인화되었다고 주장함. 컨테이너화, PC의 소형화, 기술 비용 감소로 누구나 개인 인트라넷이나 홈랩을 운영할 수 있게 되었음.
     * 법적 및 기업의 반경쟁적 장벽이 혁신을 저해한다고 느끼며, 이는 경쟁 환경을 약화시키고 전자 폐기물 문제를 악화시킴. 예를 들어, Apple의 M 시리즈 Mac은 하드웨어는 뛰어나지만 MacOS가 잠재력을 제한함. Asahi Linux의 성공은 이러한 수요를 보여줌.
     * 소프트웨어 수리 권리가 사실상 불법임. 소프트웨어를 디컴파일하고 수정하는 것은 법적 문제를 일으킬 수 있음. 정부가 하드웨어 및 소프트웨어 개선을 위한 충분한 문서를 제공하도록 기업을 강제하길 바람.
     * 탈중앙화 기술이 기술 독점에 대항하는 방법임. 개방형 프로토콜이 중앙 게이트키퍼 없이 자유롭게 진화하는 시스템을 만듦. 입법과 문화도 도움이 될 수 있음.
     * 저자는 인터넷 감시, 소셜 미디어의 알고리즘적 양극화, 약탈적 앱 스토어, 착취적 비즈니스 모델이 개인 컴퓨터의 자유를 침식했다고 주장함. 그러나 PC는 여전히 자유의 힘이며, 프라이버시 손실은 전 세계와의 소통 이점으로 상쇄됨.
     * 과거로 돌아가는 것이 좋은 아이디어라고 생각함. Raspberry Pi Pico에 6502 기반 머신 에뮬레이터를 설치하여 실험하고 싶음. 그러나 빈티지 컴퓨터는 더 많은 집중과 연구가 필요하므로 아들과의 실험이 적절할지 고민 중임. DOS 에뮬레이터가 더 나은 도구와 게임을 제공할 수 있음.
"
"https://news.hada.io/topic?id=18806","칼만 필터 튜토리얼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               칼만 필터 튜토리얼

개요

     * 이 튜토리얼에 대하여
          + Kalman Filter 알고리듬은 불확실성 속에서 시스템 상태를 추정하고 예측하는 강력한 도구로, 목표 추적, 내비게이션, 제어 등 다양한 분야에서 기본 구성 요소로 사용됨.
          + Kalman Filter는 간단한 개념이지만, 많은 자료들이 수학적 배경을 요구하고 실용적인 예시가 부족하여 복잡하게 느껴질 수 있음.
          + 2017년에 숫자 예제와 직관적인 설명을 기반으로 한 온라인 튜토리얼을 만들어 주제를 더 쉽게 이해할 수 있도록 함.
          + 튜토리얼은 단변량(1차원) 및 다변량(다차원) Kalman Filter를 다루며, 비선형 Kalman Filter, 센서 융합, 실용적 구현 가이드라인 등 고급 주제를 포함하도록 확장됨.
          + 이 튜토리얼을 바탕으로 책을 저술하였으며, 책은 기초부터 고급 주제까지 이론적 개념과 실용적 응용을 다룸.
     * Kalman Filter에 대하여
          + 많은 현대 시스템은 여러 센서를 사용하여 숨겨진 상태를 추정함.
          + Kalman Filter는 불확실성 속에서도 시스템의 숨겨진 상태를 추정하고 미래 상태를 예측하는 알고리듬임.
          + Rudolf E. Kálmán이 1960년에 발표한 논문에서 이산 데이터 선형 필터링 문제에 대한 재귀적 해법을 설명함.

Kalman Filter 소개

     * 예측의 필요성
          + 추적 및 예측 알고리듬의 필요성을 이해하기 위해 추적 레이더의 예를 들 수 있음.
          + 레이더는 목표의 현재 위치와 속도를 추정하고, 다음 추적 빔 시점의 목표 위치를 예측함.
          + 예측은 뉴턴의 운동 방정식을 사용하여 계산할 수 있음.
          + 실제 레이더 측정은 정확하지 않으며, 무작위 오류나 불확실성을 포함함.
          + 측정 노이즈와 프로세스 노이즈로 인해 추정된 목표 위치가 실제 위치와 크게 차이날 수 있음.
          + Kalman Filter는 이러한 불확실성을 고려하여 추적 정확성을 향상시키는 알고리듬임.

        Hacker News 의견

     * Kalman Filter를 이해하려면 Least Squares(선형 회귀)를 먼저 공부한 후, 재귀 Least Squares와 Information Filter를 학습해야 함. 이를 통해 Kalman Filter가 업데이트 단계에서 효율성을 우선시하는 재귀 Least Squares의 재구성임을 알 수 있음
     * Kalman Filter와 관련된 자료로는 이 PDF와 GitHub 리포지토리가 있음
     * 현재 확률 분포에 대한 상징적 계산 도구는 없으며, 이는 다변수 가우시안 PDF를 곱하고 공분산 행렬을 얻는 것과 같은 작업을 포함함
     * Q와 R이 일정할 경우, Kalman Filter는 예측 단계가 있는 지수 필터와 같아짐. 이는 이해하기 쉬우며, Q와 R을 수동으로 조정하여 최적화하는 방식과 일치함
     * Kalman Filter의 이해를 돕기 위해 Michael van Biezem의 강의를 추천함
     * Kalman Filter를 사용하여 목격자 증언만 있는 사건의 관찰 가치를 강화할 수 있는지에 대한 아이디어가 있음. 이는 거짓말과 부정확성을 ""오류""로 처리함
     * ""추적""이라는 용어가 일반적으로 사용되지만, 특정한 유형의 추적을 의미하는 경우가 많아 혼란스러울 수 있음
     * Kalman Filter는 Rudolf E. Kálmán의 이름을 따왔으며, 1960년에 이산 데이터 선형 필터링 문제에 대한 재귀적 해결책을 설명한 논문을 발표함
"
"https://news.hada.io/topic?id=18905","DeepSeek-R1: 강화학습을 통한 대형 언어 모델의 추론 능력 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                DeepSeek-R1: 강화학습을 통한 대형 언어 모델의 추론 능력 향상

     * DeepSeek-R1: LLM의 추론 능력 강화
          + DeepSeek-R1-Zero와 DeepSeek-R1이라는 첫 번째 세대의 추론 모델을 소개함
          + DeepSeek-R1-Zero는 대규모 강화 학습을 통해 훈련되었으며, 감독된 미세 조정 없이도 뛰어난 추론 능력을 보임
          + 그러나 가독성 문제와 언어 혼합과 같은 도전에 직면함
          + 이러한 문제를 해결하고 추론 성능을 향상시키기 위해, 다단계 훈련과 강화 학습 전의 초기 데이터 사용을 포함한 DeepSeek-R1을 도입함
          + DeepSeek-R1은 OpenAI-o1-1217과 유사한 성능을 달성함
          + 연구 커뮤니티 지원을 위해, DeepSeek-R1-Zero, DeepSeek-R1 및 Qwen과 Llama 기반으로 증류된 6개의 밀집 모델(1.5B, 7B, 8B, 14B, 32B, 70B)을 오픈 소스로 제공함
     * 주제 및 인용
          + 주제: 계산 및 언어 (cs.CL); 인공지능 (cs.AI); 기계 학습 (cs.LG)
          + 인용: arXiv:2501.12948 [cs.CL]
     * 제출 역사
          + 제출자: Wenfeng Liang
          + 제출 날짜: 2025년 1월 22일
     * 접근 방법
          + PDF, HTML, TeX 소스 등 다양한 형식으로 논문에 접근 가능
     * 참고 문헌 및 인용 도구
          + 다양한 참고 문헌 및 인용 도구 제공
     * 코드, 데이터, 미디어
          + 관련 코드 및 데이터 제공
     * arXivLabs에 대한 정보
          + arXivLabs에 대한 설명 및 지원 정보 제공

        Hacker News 의견

     * DeepSeek V3 논문은 필수 사전 읽기 자료로 간주됨
          + R1 + Sonnet 조합이 다른 조합보다 우수함
          + 독립적인 재현 연구들이 여러 곳에서 진행됨
          + R1 증류는 매우 쉬워서 자주 발생할 것임
          + DeepSeek-R1이 실리콘밸리에서 큰 반향을 일으킴
     * Ollama의 r1-14b 모델을 사용해 본 결과, 모델이 실시간으로 다양한 접근 방식을 시도하고 대안을 선택하는 모습이 인간의 행동을 연상시킴
     * DeepSeek V3는 Claude Sonnet이 문제가 생긴 시점에 적절하게 등장함
          + DeepSeek의 가격이 매우 저렴하여 큰 이점이 됨
          + Aider와 Cursor에서 DeepSeek으로 완전히 전환함
     * DeepSeek의 채팅 기능이 ChatGPT Pro보다 사용하기 쉬움
          + 모델의 사고 과정을 읽을 수 있어 디버깅이 용이함
     * GPT-O1 모델의 사고 과정이 모델 내부에서 이루어지는 것에 놀람
          + OpenAI가 O1의 사고 과정을 공개할지 궁금함
     * DeepSeek R1의 성능뿐만 아니라 작은 증류 모델들도 인상적임
          + Qwen 기반 7b 증류 모델도 훌륭함
          + 32b 증류 모델이 가정 서버의 기본 모델로 사용됨
     * Larry Ellison과 Masayoshi Son은 ASI를 통해 불로장생을 목표로 함
          + ASI 개발을 위해 막대한 투자를 감행함
     * Arxiv에 100명 이상의 저자가 팀 이름으로 논문을 발표함
          + 팀워크와 사기를 높이는 데 기여함
"
"https://news.hada.io/topic?id=18834","LeetGPU: CUDA 없이 CUDA 공부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        LeetGPU: CUDA 없이 CUDA 공부
"
"https://news.hada.io/topic?id=18838","스타트업의 겨울: 해커뉴스가 믿음을 잃어버리다 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       스타트업의 겨울: 해커뉴스가 믿음을 잃어버리다

     * 2013년에 한 창업가가 실패 경험을 Hacker News에 올렸을 때, 댓글들은 “실패는 과정일 뿐, 다시 도전하라”는 긍정적 반응 일색이었음 [1]
     * 2025년에 유사한 글이 올라왔을 때는 “BigTech가 낫지 않았을까?”, “창업의 가치가 있나” 등 부정적·회의적 반응이 주를 이루었음 [2]
     * 이 2개의 게시물에 국한된게 아니라 “fail fast, fail often” 이었던 분위기에서 “창업의 길이 맞는가”를 묻는 회의적 기조로 바뀌는 흐름임

뭐가 변했을까?

     * 사람에 대한 비용이 드러나고 있음
          + 번아웃, 인간관계 파탄, 정신 건강의 어려움 등이 더는 ‘열정’으로 미화되지 않음(Hustle Culture 란 양탄자 아래 묻혀 있지 않음)
     * Big Tech 연봉이 위험 대비 보상을 크게 바꿔 놓음
          + 시니어 엔지니어 연봉이 $300K 이상인 상황에서 창업의 재무적 매력이 크게 떨어짐
     * VC 중심 모델의 한계가 확연히 나타남
          + 하이퍼그로스와 빠른 엑싯에 초점을 맞춘 투자 유치 과정에서 창업가들이 방향성을 잃는 경우가 많아짐
     * 업계 자체의 성숙
          + 모바일·웹 시대의 쉬운 기회가 대부분 소진되어, 진정한 혁신 기회를 찾기 어려워졌음

요약

     * ‘Startup Winter’라고 부를 만한 시기를 맞이하고 왔음
          + 창업 활동 자체가 중단된 것은 아니지만, ‘창업 신화’에 대한 열광이 식고 있음
     * 이 겨울에서 화려하지는 않지만 보다 진정성 있는 스타트업 생태계가 등장할 수 있음
          + 전통적인 VC지원 경로와 함께 혁신을 위한 대안적인 경로가 인정받는

   [1] The Truth about a Failing Startup
   [2] 실패가 아닌 나: 여섯 번의 실패한 스타트업 시도에서 얻은 교훈

   비슷한 결의 이야기일지는 잘 모르겠는데, 예전에 비해 VC 펀딩을 받지 않고 부트스트래핑을 시도하는 경우가 예전에 비해 많아진 것 같기도 합니다

   좋은 포인트네요. 동의합니다

   Faith 가 신뢰로 번역되어 다소 어색하게 느껴지는군요

   저도 뭔가 했네요. 구글은 믿음으로 번역하네요.

   저는 이 맥락에선 신념? 정도가 적당하다고 느껴지네요 ㅎㅎ

        Hacker News 의견

     * HN의 청중 구성은 변했지만, 스타트업에 관심 있는 핵심 그룹은 여전히 존재함. 기술 주제에 일반적으로 관심 있는 사람들이 증가했음.
          + 트위터와 레딧 사건 이후의 변화에 대한 객관적 분석이 필요함.
          + TV 뉴스에서 다룰 법한 이야기는 피하는 것이 좋음.
     * 회사를 시작하여 사람들이 원하는 것을 만들어 판매하는 것은 여전히 중요함. 조용하고 겸손하게 25년 동안 사업을 성장시키고 위험과 기회를 균형 있게 관리해야 함.
          + 닷컴 붐 이후 스타트업의 빠른 성장과 매각은 지속 가능하지 않았음.
          + 대기업이 인재를 직접 고용하는 것이 더 경제적임을 깨달았음.
     * 스타트업이 지위 상징이 되어 용감한 모험에 대한 존중이 상실되고 상업화됨.
          + 스타트업에서 합리적인 급여를 받기 어렵기 때문에 확신과 열정이 필요함.
          + 문제 해결에 대한 흥미보다는 조기 성장과 상업화에 대한 우려가 많음.
     * 스타트업 환경이 덜 흥미로워진 이유는 여러 가지 요인 때문임.
          + 대기업의 기술 통합으로 인해 혁신적인 성공 사례가 줄어듦.
          + 엑셀러레이터와 VC가 스타트업을 자신들의 목표에 맞춘 제품 관리 역할로 변화시킴.
          + 혁신적인 아이디어 부족.
          + 문화적 기대 변화로 인해 위험과 기업가 정신에 대한 인식 변화.
     * 금리가 스타트업 성공의 재정적 기준을 높임.
     * 미국의 스타트업 투자자 경험:
          + 코로나 이후 투자 감소.
          + AI의 방해를 피하기 위해 물리적 세계의 문제 해결 필요.
          + 핵심 직원에게 주식을 제공하는 것이 중요함.
          + 창업자의 경험과 솔루션의 가치가 중요함.
          + 대학에서의 스타트업은 여전히 번창함.
          + 비희석 보조금과 계약이 재정적 안정성에 큰 영향을 미침.
     * 기술과 과학이 끝났다는 생각은 잘못된 것임. 기술은 프랙탈 구조로, 하나의 발명이 여러 다른 발명을 촉발함.
     * 스타트업의 성공적인 매각 후에도 직원들은 기대보다 적은 수익을 얻음.
     * 온라인 포럼의 일반적인 경로를 따름. 초기 참여자들이 나이가 들고 바빠지면서 새로운 사람들이 들어옴.
          + HN은 스타트업 포럼에서 일반 기술 포럼으로 변화함.
          + 정치 토론이 증가하고 스타트업 관련 콘텐츠는 줄어듦.
     * HN은 초기 인터넷 기술 채택자에서 주류로 변화함. 인디 해커스 운동이 새로운 관점을 제공함.
"
"https://news.hada.io/topic?id=18811","AI 데이터 엔지니어의 새로운 역할","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI 데이터 엔지니어의 새로운 역할

데이터 기반 환경에서 AI Data Engineer의 핵심 역할

     * 챗봇이 사용자의 질문을 부드럽게 이해하는 방식, 자율주행 차량이 복잡한 도로 환경을 파악하는 방식은 모두 비정형 데이터 처리 과정에 뿌리를 둠
     * 텍스트, 이미지, 비디오, 오디오와 같은 비정형 데이터는 스프레드시트처럼 정돈된 구조가 아니므로, 가치 있는 통찰을 얻으려면 고급 처리 기법이 필요함
     * LLM이나 AI 에이전트가 고객 서비스부터 자율주행 등에 활용되면서, 비정형 데이터를 효과적으로 관리하고 분석하는 능력이 전략적으로 중요해짐
     * 이러한 복잡한 데이터를 다루기 위해 AI Data Engineer 가 등장함
     * AI Data Engineer는 대규모 데이터 워크플로를 설계하고 운영하여, 다음 세대 AI 시스템이 원활히 작동하도록 필수적 역할을 수행함

비정형 데이터 처리의 어려움

  복잡성과 다양성

     * 텍스트, 이미지, 비디오, 오디오 등 각 데이터 유형은 고유한 난이함
          + 텍스트: 은어, 축약, 불완전 문장을 다루기 위해 NLP 기법이 필요함
          + 이미지·비디오: 잡음, 흐릿함, 잘못 표기된 레이블 등을 처리하기 위해 컴퓨터 비전 알고리즘이 필요함
          + 오디오: 음성 인식 및 오디오 분석 기술로 환경음·음성 데이터를 해석해야 함
     * 매일 방대한 양의 소셜 미디어 포스트, 비디오 콘텐츠, 센서 데이터가 쏟아지고 있어, 기존 데이터 시스템으로는 이러한 스케일을 처리하기 어려움
     * 고성능 워크플로를 지원하기 위해서는 분산 처리와 확장성 있는 프레임워크가 필수임

  높은 자원 소모

     * 비정형 데이터에서 인사이트를 추출하기 위한 작업에는 GPU나 TPU 같은 고사양 하드웨어가 필요한 경우가 많음
          + OCR 작업, NLP 등을 수행할 때 연산량이 큰 편임
     * 워크로드의 정도에 따라 GPU와 CPU 자원을 균형 있게 배분·활용해야 하는 지능형 스케줄링이 과제로 떠오름

  프라이버시와 보안

     * 비정형 데이터에는 이메일 속 개인정보나 영상 모니터링 이미지 등 민감한 정보가 포함될 수 있음
     * 데이터를 잘못 다루면 규제 위반이나 신뢰도 하락의 위험이 큼
     * GDPR, HIPAA 같은 규정을 지키기 위해서는 암호화, 접근 제어, 익명화 등 다양한 안전장치가 필요함

AI Data Engineer란 무엇인가

     * AI Data Engineer는 기존 데이터 엔지니어링과 AI 특화 워크플로 사이를 연결해주는 핵심 역할을 맡음
     * 텍스트, 이미지, 비디오 등 다양한 비정형 데이터를 AI에 적합하도록 변환·정제하는 확장성 높은 데이터 파이프라인을 설계·구축·관리함
     * 이들은 AI 시스템이 원활하고 효율적으로 동작하도록 데이터 통합 과정을 책임지며, 윤리·프라이버시 요구사항도 충족시킴
     * 결과적으로 신뢰할 수 있는 AI를 만드는데 중요한 기여를 함

AI Data Engineer의 핵심 책임

  1. 데이터 준비와 전처리

     * 텍스트, 이미지, 비디오, 표 형식 데이터 등 다양한 유형의 데이터를 전처리하는 파이프라인 설계·구현
     * Python, Apache Spark, Ray 등을 활용해 토크나이징, 정규화, 특징 추출, 임베딩 생성 등을 수행함
     * 노이즈가 심한 데이터, 불완전 레코드, 잘못 라벨링된 입력을 교정하고 고품질의 데이터셋을 확보함

  2. AI 학습 데이터셋 강화

     * Generative AI 모델을 활용해 합성 데이터를 생성하고 기존 데이터셋을 보강함
     * 데이터 증강 전략을 마련하여 모델의 견고성과 정확도를 높임
     * 합성 데이터가 제대로 대표성과 다양성을 갖추고 있는지 검증함

  3. 데이터 품질 확보와 편향 완화

     * 누락값, 이상값, 중복 등 데이터 무결성 문제를 발견하고 해결하기 위한 기법을 적용함
     * 데이터셋 내 편향을 식별하고 개선하여 공정하고 윤리적인 AI 결과를 보장함

  4. 파이프라인 확장성과 최적화

     * Apache Spark, Ray 같은 도구를 활용해 대규모 데이터셋을 다루는 분산 처리 워크플로를 구현함
     * 실시간 및 배치 처리 파이프라인을 최적화하여 효율성과 지연 시간을 최소화함

  5. 규제 준수와 보안

     * GDPR, HIPAA, CCPA 등 법적·규제 요건에 맞추어 데이터 워크플로를 운영함
     * 데이터 마스킹, 암호화, 가명화 등 기법을 활용해 민감 정보를 보호함
     * 합성 데이터 생성과 AI 개발 과정에서도 윤리 기준을 준수하고 권장함

  6. AI/ML 프레임워크 통합

     * 전처리된 데이터를 TensorFlow, PyTorch, Hugging Face 등 머신러닝 프레임워크에 매끄럽게 통합함
     * 종단 간 AI 파이프라인을 위해 모듈화된 재사용 가능한 컴포넌트 개발함

  7. 모니터링과 유지보수

     * 데이터 파이프라인이 안정적으로 동작하도록 모니터링 솔루션을 마련함
     * 병목 현상이나 비효율 요소를 사전에 발견하고 개선하여 신뢰도를 유지함

AI Data Engineer에게 요구되는 주요 역량

  프로그래밍과 도구

     * Python, SQL 등에 능숙하며, Airflow, Spark, Ray 같은 데이터 엔지니어링 프레임워크 활용 능력 보유함
     * FAISS, Milvus 같은 벡터 데이터베이스와 임베딩 라이브러리를 다룰 줄 알아야 함

  AI 특화 역량

     * TensorFlow, PyTorch, Hugging Face 같은 AI/ML 프레임워크에 대한 깊은 이해 필요함
     * GPT-4, GAN, 디퓨전 모델 및 합성 데이터 기법 등 생성형 모델에도 익숙해야 함

  데이터 엔지니어링 전문성

     * ETL 프로세스, 분산 데이터 시스템, 파이프라인 최적화에 대한 이해가 깊어야 함
     * 텍스트(NLP), 이미지(컴퓨터 비전), 비디오 등의 멀티모달 데이터 전처리 경험이 중요함

  분석 능력과 문제 해결 능력

     * 특정 AI 적용 사례에 맞춰 전처리 요구사항을 판단하고 대응할 역량 필요함
     * 고성능 워크플로 구성을 위해 비효율성을 파악하고 해결하는 전문성 요구됨

  윤리적·규제적 인식

     * 데이터 프라이버시 법과 규제 요건(GDPR, HIPAA 등)에 대한 이해가 필요함
     * AI 데이터 워크플로에서 공정성과 투명성을 지향하는 태도가 요구됨

맺음말

     * AI 기술에 대한 의존도가 커지면서, AI Data Engineer는 혁신과 효율을 실현하기 위한 핵심 동력으로 자리매김함
     * 비정형 데이터 처리부터 윤리·확장성 문제 해결까지, 이들은 지능형 시스템을 구현하기 위한 설계자 역할을 맡음
     * 숙련된 AI Data Engineer를 확보한 조직은 데이터를 통한 경쟁 우위를 확보할 가능성이 높아짐

   개인적으로 꽂힌 표현들입니다.
    1. 비정형 데이터를 다루는 고급 처리 기법 역량이 요구됨 + 비정형 데이터의 난이도
    2. 앞으로 비정형 데이터의 중요성(LLM, AI 에이전트, 자율주행)은 더 중요해질 것
    3. 대규모 데이터 워크플로우를 설계하는 역량
    4. AI 기반 기술을 활용한 합성 데이터 생성

   읽는데 진짜 모호하게 잡혀있던 사고들이 한줄로 나열되는 기분이네요. 좋은 내용 정리 해주셔서 감사합니다.

   매우 유익한 내용입니다
"
"https://news.hada.io/topic?id=18841","Postal-mime - 브라우저 및 서버리스용 이메일 파싱 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Postal-mime - 브라우저 및 서버리스용 이메일 파싱 라이브러리

     * 브라우저 환경(웹워커 포함) 및 서버리스 함수(Cloudflare Email Workers 처럼)에서 동작
     * RFC822 이메일 메시지를 읽어서 헤더/수신자/첨부파일등의 객체로 구성된 구조체로 파싱
     * PostalMime.parse(email, options) -> Promise<ParsedEmail>
          + 구조화 객체를 Promise로 리턴함
          + 모든 헤더의 키/밸류
          + from, sender 의 이름/이메일 주소
          + deliveredTo, returnPath
          + to, cc, bcc, replyTo
          + messageId, inReplyTo, references
          + date : 전송일자의 ISO8601 포맷
          + html
          + text
          + 첨부파일 : 파일이름, mimeType, disposition, related(인라인 이미지일경우 true), contentId, content, encoding
     * EmailEngine - IMAP/SMTP를 REST API로 접근하는 오픈소스 개발팀이 만든 것
"
"https://news.hada.io/topic?id=18800","ChatGPT 사용은 환경에 나쁘지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ChatGPT 사용은 환경에 나쁘지 않음

     * AI, 특히 ChatGPT와 같은 LLM이 환경에 큰 해악을 끼친다는 통념은 부정확함
     * 많은 이들이 “개인적 AI 사용이 기후 위기에 악영향을 준다”는 주장을 퍼뜨리지만, 실제 배출량 규모와 비교 대상이 부적절함
     * AI 관련 에너지 및 물 사용 데이터를 가능한 정확히 살펴보면서, 실질적인 탄소 배출 규모를 이해해야 함
     * 개인 활동 중에서도 어떤 행동이 진짜 의미 있는 배출 저감에 기여하는지를 살펴보아야 함

왜 이 글을 작성하였나

     * 기후 관련 대화에서 “나쁜 기업/기술을 지목해 불매하는” 식 접근이 자주 등장함
     * ChatGPT 사용을 환경 파괴 행위로 단정하는 의견이 늘어나, 정확한 수치를 기반으로 해명을 하고자 함
     * 기후 운동은 개인적 라이프스타일보다 에너지 시스템 전환 등 구조적 변화에 집중해야 한다는 견해도 강조함

배출량 윤리에 대한 사고 방법

     * 현대 사회는 완전한 무탄소 생활이 현실적으로 불가능함
     * 병원 등 중요한 시설도 높은 배출량을 갖지만, 그 사회적 가치는 큰 편임
     * 배출량을 줄이려면 “무조건 큰 배출원을 없애자”가 아닌, “활동 가치와 배출량의 균형”을 따져야 함
     * 잘못된 정보나 오해로 인해 LLM처럼 유용한 기술의 사용을 놓치는 것은 바람직하지 않음

LLM의 유용성 여부

     * LLM은 학습, 작업 자동화 등 일상과 업무에서 광범위하게 도움을 줌
     * 복잡한 기술·전문 분야 정보를 빠르게 요약하거나 질의응답하는 데 특히 효과적임
     * 완벽하진 않지만, Google 검색과 달리 대화형 맞춤 응답이 가능함
     * 많은 사람들이 LLM을 활용해 지식 습득, 문제 해결, 생산성 향상을 경험하고 있음

주요 논점 (Main Argument)

  배출량 (Emissions)

     * ChatGPT 검색 한 번은 일반 Google 검색 대비 약 10배 에너지를 쓰지만, 절대치로 보면 3 Wh 정도에 불과함
     * 이는 10초 동영상 스트리밍, 이메일 2통 전송, LED TV 3분 시청 등에 해당하는 수준임
     * “ChatGPT 전 세계 사용 = 수만 가정 전력 사용” 같은 비교는, 해당 서비스 사용자 수와 효용 가치를 고려하지 않을 때 오해가 생김
     * 예를 들어, Netflix나 YouTube 등의 스트리밍 서비스는 훨씬 큰 에너지를 사용하지만, 이것이 사용자 개개인에겐 매우 적은 단위임
     * GPT-4 모델 훈련은 항공편 수백 회와 맞먹는 에너지를 소모했으나, 한 번 훈련 후 전 세계 수많은 사용자에게 제공되는 가치를 감안하면 효율적임
     * 전체 인터넷 에너지 사용량 대비 LLM이 차지하는 비중은 매우 미미하며, 개인이 ChatGPT를 사용하는 것을 기후 문제 핵심으로 보는 것은 지나친 우려임

  물 사용 (Water use)

     * AI 데이터 센터는 GPU 냉각 등으로 물을 사용함
     * “ChatGPT 한 번당 500mL 물 소비”라는 오해가 있으나, 실제로는 20~50회 질의당 500mL가 좀 더 정확함
     * 다른 온라인 활동(음악 스트리밍, 화상회의 등)도 물을 비슷한 방식으로 사용하며, 이는 전체 에너지 생산 과정과 냉각 과정을 포함한 수치임
     * 실제로 10분짜리 4K 동영상 시청이나 한 시간 화상회의가 ChatGPT 질의 수십 회분 이상의 물을 사용함
     * 소규모 수자원에 큰 부담을 주지 않는 지역의 데이터 센터 운영, 재사용 가능 물 관리 등이 병행된다면 문제가 크게 완화될 수 있음
     * 동물성 제품 생산 과정과 비교하면 데이터 센터의 물 사용량은 상대적으로 작은 편이며, 오염이나 낭비로 이어지는 정도 역시 농축 산업보다 적다는 분석이 많음

LLM 사용에 대한 흔한 오해와 실제 비교

     * “개인 LLM 사용이 지구 환경에 매우 큰 해악”이라는 인식은 실제 통계와 다른 양상을 보임
     * 스마트폰 사용, 동영상 스트리밍, 이메일, 온라인 게임 등도 LLM 못지않게 많은 전력·물 자원을 쓰지만, 대중은 이를 큰 문제로 인식하지 않음
     * LLM은 사용자들에게 시간 절약과 효율 향상을 제공하는 반면, 배출량 자체는 소량임
     * 배출량 감소 관점에서 보면 식단 변화나 교통 수단 변경이 LLM 사용 제한보다 훨씬 큰 효과를 냄

결론적 고찰

     * LLM 자체가 배출량을 전혀 유발하지 않는 것은 아니지만, 개인 사용 관점에서 우려할 만큼 비효율적이지 않음
     * 기후 운동에서 중요한 것은 대규모 에너지 전환과 구조 개선으로, 사소한 디지털 활동 제한에 주력하는 것은 본질에서 벗어난 논점임
     * ChatGPT를 비롯한 LLM 기술은 다양한 분야에서 큰 가치를 제공하므로, 잘못된 정보로 인해 사용을 기피하는 것은 오히려 손해임
     * 개인적 배출량 저감이 목적이라면, 더 큰 영향을 주는 다른 생활양식을 먼저 점검하는 편이 효과적임

        Hacker News 의견

     * LLM의 에너지 소비를 임의의 기준과 비교하는 것은 적절하지 않음. ChatGPT 쿼리를 Zoom 통화와 비교하는 것은 유용하지 않음. Google 검색 한 번으로도 충분히 해결할 수 있는 경우가 많음. LLM은 소프트웨어 개발에 유용하지만, 대체 가능한 간단한 방법이 많음.
     * AI 투자로 인해 하이퍼스케일 클라우드 배출 목표가 변경되고 데이터센터 성장이 전력망 용량 한계에 도달함. AI의 전력 사용을 배출량으로 전환할 때 전체 AI에 대한 주장은 성립하지 않을 수 있음. 장기적으로 ROI가 긍정적일 것으로 보지만, 기술을 더 효율적으로 만드는 데 집중해야 함.
     * 기사에는 참조 링크가 필요함. LLM은 단순히 가정 사용자만 사용하는 것이 아님. 정부와 대기업이 GPU 시간을 많이 사용하고 있음. AI를 위한 새로운 전력 시설이 제안되고 있음.
     * GPT-4와 같은 큰 모델을 훈련하는 것이 일회성 비용으로 보이지 않음. 대기업은 계속해서 새로운 모델을 훈련할 것임. 많은 모델이 사용되지 않을 수도 있음.
     * 해양 플라스틱 쓰레기의 약 90%가 10개의 강에서 발생함. 개인의 생활 방식 결정은 해외 제조업의 표준 관행에 비해 미미함. 환경은 중요하지만, 기업이 올바른 방식으로 행동하도록 강제되지 않는 한 개인의 행동만으로는 충분하지 않음.
     * 데이터 센터의 트렌드와 지속 가능성에 대한 심층적인 연구를 다룬 기사가 있음. 이 주제에 대해 가장 잘 읽은 기사임.
     * 비디오 스트리밍의 에너지 사용량에 대한 수치는 어디서 얻은 것인지 궁금함. 대부분의 에너지는 비디오의 초기 인코딩에 사용됨.
     * LLM과 ChatGPT는 질문에 답할 때 가장 많은 에너지를 사용하지 않음. 훈련 시 많은 물과 에너지를 사용함. 지금 사용하는 것이 환경을 파괴하는 것은 아니지만, 제품에 대한 관심을 나타내는 것임.
     * 개인이 ChatGPT 사용으로 인한 배출량을 걱정하는 것은 어리석음. AI가 많은 에너지를 사용하고 있다는 점은 인정함. ChatGPT 수요가 AI의 미래에 미치는 영향을 고려하기 어려움.
     * 제목이 내용과 맞지 않음. ""ChatGPT 사용으로 인한 배출량은 다른 것에 비해 중요하지 않음""이라는 제목이 더 적절함.

   확실한건 암호화폐 채굴보단 생산적이라는 거....

   맞는 말입니다.
"
"https://news.hada.io/topic?id=18805","벌이 사람을 쏘면 죽는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            벌이 사람을 쏘면 죽는 이유

     * 벌침은 낚시바늘과 같음
          + 꿀벌이 사람을 쏘면 벌침이 바늘처럼 박히는 것이 아니라 바늘에 갈고리가 달려 있음.
          + 벌이 쏘고 날아가려 할 때 갈고리 때문에 벌침이 빠지지 않아 벌의 복부가 찢어져 죽음.
          + 이러한 자살적인 메커니즘이 진화적으로 왜 선택되었는지 의문임.
     * 생물학적 독 펌프
          + 벌침이 빠지면서 독 주머니와 근육 펌프가 남아 독을 계속 주입함.
          + 이 독 펌프는 벌의 신경계와 독립적으로 작동하여 효과적으로 독을 전달함.
          + 말벌과 비교했을 때 벌의 독 주입 방식이 더 효과적임.
     * 초유기체, 면역 체계, 집단 생활
          + 벌은 집단을 방어하기 위해 죽음.
          + 일벌은 번식하지 않기 때문에 진화적으로 죽어도 큰 문제가 없음.
          + 면역 체계의 호중구와 유사하게, 일벌의 죽음은 더 큰 집단의 생존에 기여함.
     * 집단 선택
          + 다윈은 사회적 곤충이 자연 선택 이론에 도전한다고 봄.
          + 집단 선택 이론은 이타주의가 집단의 생존 가능성을 높여 진화할 수 있다고 설명함.
          + 이타주의는 개인보다는 집단의 생존에 유리함.
     * 친족 선택과 생물학적 이타주의
          + 윌리엄 D. 해밀턴은 친족 선택 이론을 통해 이타주의가 진화할 수 있음을 설명함.
          + 벌의 유전적 구조인 반수체-이배체가 자매 간의 유전적 관련성을 높여 이타주의를 촉진함.
     * 간접 적합도와 반수체-이배체 가설
          + 간접 적합도는 친족을 통해 유전자를 전달하는 개념임.
          + 벌의 자매는 유전적으로 3/4 정도 관련되어 있어, 여왕을 통해 자매를 더 많이 생산하는 것이 유리함.
          + 이는 친족 선택을 통해 초유기체의 진화를 설명함.
     * 반수체-이배체 가설의 한계
          + 모든 반수체-이배체 종이 사회적이지 않으며, 일부 이배체 종도 사회적임.
          + 여왕이 여러 수컷과 교미하거나 성비가 균등할 경우 가설이 적용되지 않음.
          + 다양한 모델이 제안되어 연구 중임.
     * 결론
          + 벌이 쏘고 죽는 이유는 여러 이론이 존재하며, 초유기체의 일부로서의 역할이나 친족 선택에 의해 설명될 수 있음.
          + 확실한 답은 없으며, 생물학자들 사이에서도 논쟁이 계속되고 있음.

        Hacker News 의견

     * 여왕벌의 침에는 가시가 없어 쏘아도 죽지 않음. 이는 여왕벌이 쉽게 죽지 않아야 하고, 다른 여왕벌을 죽이기 위해 침을 사용해야 하기 때문임
          + 일벌은 침에 가시가 있어 쏘면 배가 찢어져 죽음. 이는 침이 피부에 박혀 날아가려 할 때 발생함
          + 일벌이 쏘고 날아가려 할 때 발생하는 소음과 페로몬이 다른 벌들을 유인하여 공격하게 만듦
     * 벌의 침은 다른 곤충을 쏠 때는 걸리지 않음. 이는 외골격이 포유류의 피부와 달라 가시에 걸리지 않기 때문임
     * ""The Red Queen""이라는 책은 유전자 전파에 관한 내용을 다룸
     * 진화생물학에서 ""적자생존""이라는 설명은 다른 종의 존재로 반박될 수 있음. 예를 들어, 벌의 가시 있는 침은 말벌의 가시 없는 침으로 반박될 수 있음
     * 진화론적 설명은 종종 증명할 수 없고 순환 논리를 가짐
     * Zeus가 벌을 저주했다는 신화적 이야기가 있음. 벌은 여왕이 되어 일벌들과 함께 꿀을 모으지만, 침을 사용하면 죽게 됨
     * 취미로 양봉을 하는 사람의 의견: 일벌은 사람을 쏘면 침과 독주머니가 남아 배가 찢어져 죽음. 이는 독주머니가 계속 작동하여 최대한 고통을 주기 위함임
     * 꿀벌은 초유기체로, 개별 벌의 생존보다 군체의 생존이 중요함
"
"https://news.hada.io/topic?id=18821","Git Autocorrect가 포뮬러 원 드라이버에게 너무 빠른 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Git Autocorrect가 포뮬러 원 드라이버에게 너무 빠른 이유

     * Git 자동 수정 기능이 너무 빠른 이유
          + Git의 자동 수정 기능은 잘못 입력된 명령어를 실행하기 전에 0.1초를 기다림.
          + 이는 인간의 눈이 깜빡이는 시간과 비슷하여, 반응하기 어려운 시간임.
          + 이 기능은 Git 유지 관리자가 제안한 시간 단위의 오해와 잘못된 설정에서 비롯됨.
     * 이 기능은 어떻게 설계되었는가?
          + 기본적으로 Git은 잘못된 명령어를 실행하지 않음.
          + 비슷한 명령어를 제시하고 종료하는 것이 기본 동작임.
          + 2008년, Johannes Schindelin이 비슷한 명령어를 찾아 실행하는 패치를 도입함.
          + Alex Riesen이 help.autocorrect 설정을 통해 이를 구성 가능하게 함.
          + help.autocorrect를 1로 설정하면 0.1초 후에 명령어를 실행함.
     * 적절한 설정 값은 무엇인가?
          + 10으로 설정하면 1초 동안 기다림.
          + 문서에 따르면 설정 가능한 값은 다음과 같음:
               o 0: 제안된 명령어를 보여줌.
               o 양수: 지정된 0.1초 후에 명령어 실행.
               o immediate: 즉시 명령어 실행.
               o prompt: 제안된 명령어를 보여주고 실행 여부를 묻는 프롬프트 표시.
               o never: 제안된 명령어를 실행하거나 보여주지 않음.
          + prompt 설정이 가장 합리적일 수 있음.
     * Git은 어떻게 추측하는가?
          + Git은 단순한 수정된 Levenshtein 거리 알고리듬을 사용하여 명령어를 추측함.
          + 특정 거리 이상이면 추측하지 않음.
          + 예를 들어, git bass는 rebase로 추측되지만 bassa는 추측되지 않음.
     * 나의 작은 수정
          + 1 값을 ""즉시""로 해석하도록 작은 패치를 작성함.
          + Git 유지 관리자는 모든 불리언 문자열 값을 올바르게 해석하도록 요청함.
          + 이 패치가 적용되면, 미래의 Git 버전에서는 더 이상 반응 속도를 시험하지 않을 것임.

        Hacker News 의견

     * Hal Finney가 70년대에 Mattel Intellivision 시스템을 위해 BASIC 인터프리터를 작성할 때, 오류 메시지를 ""EH?""로 줄였던 일화가 재미있음
     * 설정 이름이 명확하지 않아 문제가 발생함. help.autocorrect_enabled와 같은 명확한 이름이 필요했음
          + 설정 이름에 단위가 포함되어야 함. 예를 들어, int timeout 대신 int timeout_msec로 명명해야 함
     * 잘못된 설계로 보임. 기존 설정 값을 재해석하여 변경하는 것은 피해야 함
          + help.autocorrect의 설정 인수가 비표준 단위로 측정되는 것은 좋지 않음. 불리언과 소수로 설정하는 것이 바람직함
     * ""creeping featurism""의 좋은 예시임. 불필요한 복잡성을 초래함
     * deciseconds 단위 사용이 논의되지 않았음. xmobar도 비슷한 문제를 겪고 있음
          + 작은 숫자가 밀리초가 아닌 초로 오인될 수 있음
     * help.autocorrect 설정을 1로 설정하면 100ms 대기 후 계속 진행됨. 새로운 설정을 추가했어야 함
          + MySQL의 innodb_flush_log_at_trx_commit도 유사한 실수를 포함함
     * autocorrect를 3초로 설정했을 때, 위험한 행동과 안전한 행동을 구분하지 못하고 잘못 입력된 명령어로 셸 기록이 오염됨
          + 1년 후 비활성화 결정을 내림
     * 명령어를 잘못 입력했을 때, 즉시 ctrl-C를 눌러 100ms 타임아웃 전에 취소할 수 있음
     * deciseconds는 비표준 단위임. 밀리초나 초로 지연 시간을 지정하는 것이 더 일반적임
     * 반응 시간은 자극 유형에 따라 다름. 청각이 시각보다 빠르고, 촉각이 가장 빠름 (90 - 180 ms)
"
"https://news.hada.io/topic?id=18840","Foqos - NFC를 물리적 스위치로 사용하여 방해 요소를 차단하는 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Foqos - NFC를 물리적 스위치로 사용하여 방해 요소를 차단하는 앱

     * NFC 태깅을 하면 특정 앱들을 차단시켜서 집중하게 만들어 주는 도구
          + 멀티 프로파일을 만들어서 직장, 공부, 잠잘때등 앱내에서 스와이프만으로 전환 가능
          + 각 프로파일을 NFC 태그에 기록해서 기기가 잠긴상태 또는 앱을 실행할 필요없이 NFC태깅만으로 차단 프로필 활성화
     * 무료, 오픈소스 인데 유료(€58)인 BRICK과 거의 같은 동작

   한국 앱스토어에는 출시되지 않아서 아쉽네요 ㅎㅎ

   아이디어가 너무 예쁜데요? 회사 출근할 때 work NFC 찍고, 집에 돌아와서 home NFC 찍고... 출석체크하는 느낌으로 활용하면 재밌을 것 같아요

   중요한 댓글들
     * NFC가 잘 동작하지 않는 경우가 있는데, 보통 NFC 칩문제임. SLIX2 칩이 좀 더 비싸지만 완벽하게 동작함
     * 사실 애플의 Focus 기능을 사용하는 Wrapper이기 때문에 NFC는 필요없고 다른 방법으로도 가능은 함. 단지 NFC가 올려놓기만 해도 되서 편할 뿐
     * 소스코드: https://github.com/awaseem/foqos
     * BRICK

        Hacker News 의견

     * iOS의 NFC 태그로 단축어 기능을 트리거할 수 있지만, 인식이 항상 매끄럽지 않음.
     * 이 기능을 부모 통제 수단으로 사용할 수 있을지 궁금함. iOS의 ""스크린 타임"" 기능이 근본적으로 문제가 있어, 아이가 스크린 타임 연장을 위해 부모에게 와야 하는 방식이 필요함.
     * 매우 멋진 기능임. Brick을 사용하려고 $50를 지불할 뻔했음. 프로젝트를 지원하는 가장 좋은 방법이 궁금함.
     * 아이의 기기에서 위치에 따라 특정 행동을 트리거하고 싶었음. 예를 들어, 침실에 있을 때 와이파이를 끄는 것과 같은 기능이 필요함.
     * NFC 태그가 왜 필요한지 궁금함. 이미 NFC 태그 없이도 프로필 전환이 가능한데, 앱이 NFC 태그 없이 프로필 전환을 허용할 수 없는 이유가 명확하지 않음.
     * 오픈 소스 프로젝트인 Brick에 대해 매우 긍정적임. 추천하거나 사용하는 NFC 태그가 있는지 궁금함.
     * Calgary에서의 프로젝트 진행을 환영함. 훌륭한 제품임.
     * 이 기능은 Automations와 Profiles의 래퍼임. 이러한 기능을 모든 사람이 쉽게 접근할 수 있도록 하는 아이디어가 좋음. QR 코드를 구현하면 더 유용할 것임.
     * 앱이 차단되었을 때 어떻게 보이는지 궁금함.
     * NFC를 앱에 더 많이 통합하는 것에 대해 긍정적임. 물리적인 요소가 만족스럽고 안심이 됨. Android로 포팅하는 것에 찬성함.
"
"https://news.hada.io/topic?id=18855","Dawarich - 구글 맵 타임라인의 셀프호스트 대체제 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Dawarich - 구글 맵 타임라인의 셀프호스트 대체제

     * 자신이 갔던 모든 위치정보 데이터를 시각화하는 오픈소스
     * Google Map Timeline(Location History)을 대체 가능
     * 다양한 앱에서 실시간 위치 추적: Overland, OwnTracks, GPSLogger, Home Assistant
     * 인터랙티브 맵에서 위치 데이터를 다양한 레이어로 시각화: 히트맵, 포인트, 포인트 간 선, 안개 효과(Fog of War)
     * 지도에 특정 영역을 표시하고 해당 지역 방문을 제안받을 수 있음
     * 방문 기록 (베타): 방문했던 장소를 자동으로 제안하며 확인 또는 거부 가능
     * 여행 통계: 방문한 국가, 도시 수와 이동 거리, 소요 시간을 연도 및 월별로 분석
     * 사진 통합 : Immich 또는 Photoprism과 연동하여 사진의 위치 데이터를 자동으로 가져오고 맵에 시각화
     * 다양한 소스에서 데이터 가져오기 지원:
          + Google Maps Timeline
          + OwnTracks
          + Strava
          + Immich
          + GPX/GeoJSON 파일
          + 사진 EXIF 데이터
     * 데이터 내보내기: GeoJSON 또는 GPX 형식으로 내보내기 가능

   Home assistant 와 연동이 되는군요.

   오, 구글 타임라인 잘 사용하면서도 개인정보 이슈가 조금 찜찜했는데 셀프호스트 대체제가 있군요..!
   실시간 위치 추적을 위한 추가 앱을 또 설정해야하니 귀찮긴 하네요..ㅎㅎ
"
"https://news.hada.io/topic?id=18864","Amurex - 미팅용 AI Copilot","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Amurex - 미팅용 AI Copilot

     * 간단하면서도 강력한 AI 미팅 어시스턴트
     * 온라인 회의 진행시 AI로 중요 세부 사항을 놓치지 않고 액션 아이템을 관리해 생산성을 높여 줌
     * 실시간 제안, 스마트 요약, 후속 이메일 등 다양한 기능으로 미팅 진행 시간을 절약해 줌
     * 오픈 소스 기반으로 투명성, 보안, 프라이버시를 중시해 데이터 관리에 대한 신뢰감을 줌
     * 사용자는 핵심 업무에 집중하고, 반복 작업은 Amurex가 알아서 처리해 줌

지원되는 미팅 플랫폼

     * Google Meet
     * 다른 플랫폼은 추가 지원 예정

기능

     * 실시간 미팅 제안 기능
          + 미팅 도중에 지능형 제안과 프롬프트를 제공해 회의를 원활히 진행할 수 있음
          + 실시간으로 화면에 표시되는 제안을 통해 빠른 의사결정이 가능함
     * 스마트 요약 & 핵심 사항
          + 미팅이 끝난 후 자동으로 종합 요약과 액션 아이템을 생성해 줌
          + 미팅 내용을 한눈에 파악하고 후속 조치에 쉽게 착수할 수 있음
     * 지각 참석자를 위한 요약
          + 미팅에 늦게 합류할 때, 놓친 내용을 빠르게 파악할 수 있게 해 줌
          + 주요 논의 사항을 즉시 확인해 회의 흐름에 합류할 수 있음
     * 전체 미팅 전사(Transcription)
          + 실시간으로 정확한 미팅 전사 내용을 제공함
          + 회의 기록을 되돌아보며 중요한 의사결정 과정을 추적할 수 있음
     * 후속 이메일 작성 기능 내장
          + 전문적인 후속 이메일을 자동 생성해 한 번의 클릭으로 전송할 수 있음
          + 감사 인사나 요약, 다음 단계 등을 정리해 후속 커뮤니케이션을 손쉽게 진행할 수 있음
"
"https://news.hada.io/topic?id=18902","HN 문의: 도메인을 구매하고 301 리디렉션으로 연결하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HN 문의: 도메인을 구매하고 301 리디렉션으로 연결하는 이유

     * 도메인 리디렉션 상황
          + SaaS 제품인 example.com을 운영 중일 때, 누군가가 getexample.com, buyexample.io, joinexample.net 같은 여러 도메인을 구매하여 example.com으로 301 리디렉션하고 있음
          + 이러한 행동의 의도가 무엇인지 궁금함
     * 가능한 의도
          + 피싱 공격을 위한 사전 준비일 가능성
          + 미래에 도메인을 판매하려는 의도일 가능성
          + 이러한 행동을 처음 겪어보며, 일반적인 사기의 초기 단계인지 확신할 수 없음

        Hacker News 의견

     * 다른 사람들이 언급한 것처럼, 몇 가지 시나리오가 있을 가능성이 높음
          + 합법적인 콘텐츠와 서비스를 사용하여 다른 도메인의 SEO 순위를 개선하려는 시도일 수 있음
          + 피싱 페이지를 호스팅하는 경우도 있을 수 있음
          + 도메인을 ""나이 들게"" 하려는 시도일 수 있음
          + 특정 캠페인을 준비하는 것일 수 있음
     * 이메일을 통해 도메인을 무기로 사용할 가능성이 있음
          + 사람들이 이메일을 읽고 도메인에 접속하면 리디렉션되어 페이지를 보게 됨
     * GoDaddy에서 브랜드 이름으로 여러 .com 도메인이 등록됨
          + Cloudflare 리디렉션이 GoDaddy 기반일 가능성이 있음
          + 일부 도메인은 Outlook Mail, 다른 일부는 Google Mail에 설정됨
          + 브랜드 이름이 유럽 언어에서 빈번하게 사용되는 단어라 위험이 증가함
     * 도메인과 관련된 위험을 줄이기 위해 구체적인 상황에 따라 조치를 취해야 함
          + 상표 및 경쟁 요인을 고려해야 함
     * 과거에 인도 기반 그룹이 SaaS 웹사이트를 iframe으로 새 도메인에 삽입한 사례가 있었음
          + 이를 방지하기 위한 해결책이 존재함
     * &#x2F; 리디렉션이 가능하지만 숨겨진 경로가 피싱을 할 수 있음
          + 예를 들어, 가짜 비밀번호 재설정 이메일이 사용자 검사를 우회할 수 있음
     * 이념적 또는 인도주의적 목표를 가진 도메인일 가능성도 있음
          + 잘못된 URL로 링크된 사례가 있었음
     * 피싱 가능성이 있음
          + 웹사이트를 통해 확인해야 함
     * 사이트에 수동 조치가 있는지 확인해야 함
          + 유해한 백링크를 생성하려는 시도일 수 있음
          + 이를 방지하기 위해 disavow 기능을 사용할 수 있음
     * HTTP_REFERER 헤더를 확인하고 백엔드 코드로 리디렉션을 차단할 수 있음
"
"https://news.hada.io/topic?id=18863","식단 연구에 문제를 일으키는 부정확한 식사 보고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       식단 연구에 문제를 일으키는 부정확한 식사 보고

     * 연구자들은 사람들이 섭취한 음식과 건강 상태 사이의 연관성을 찾기 위해 설문조사를 사용하지만, 최근 연구에 따르면 이러한 접근 방식이 신뢰할 수 없음을 보여줌. 많은 사람들이 섭취량을 과소 보고하여 데이터베이스의 절반 이상이 잘못되었을 가능성이 있음.
     * 연구자들은 에너지 소비를 측정하는 기술을 사용하여 식단 설문조사의 정확성을 평가하는 방정식을 개발함. 이 방정식을 통해 많은 연구가 잘못된 데이터에 기반하고 있음을 지적함.
     * 식단 설문조사는 사람들이 섭취한 음식을 기억하거나 보고하는 데 어려움을 겪을 수 있어 신뢰성이 낮음. 일부 연구자들은 이러한 설문조사를 포기해야 한다고 주장함.
     * 이중 표지수 물(DLW) 기술은 에너지 소비를 정확하게 측정할 수 있는 방법으로, 설문조사와 함께 사용될 때 사람들이 섭취량을 과소 보고하는 경향이 있음을 보여줌.
     * 연구자들은 DLW 기술을 사용하여 NHANES 및 NDNS 데이터베이스의 기록을 분석했으며, 많은 사람들이 보고한 섭취량이 예측된 범위보다 낮음을 발견함.
     * 이러한 결과는 영양 역학 연구가 잘못된 데이터에 기반하고 있음을 시사하며, 이는 영양 연구가 종종 모순된 결과를 내는 이유일 수 있음.
     * 연구자들은 새로운 방법론을 개발하여 설문조사에 의존하지 않고 영양 역학을 개선하려고 노력 중임. 예를 들어, 사진 식단 일기나 착용 가능한 카메라, 모션 및 오디오 센서를 사용한 연구가 진행 중임.
     * 현재 이러한 새로운 방법들은 설문조사만큼 대규모로 적용할 준비가 되어 있지 않지만, 연구자들은 잘못된 보고의 규모를 추정하고 연구에 포함할 수 있는 방정식을 사용할 수 있음. 연구자들은 영양 역학을 개선하기 위해 새로운 기술을 사용해야 한다고 강조함.

        Hacker News 의견

     * Google AI와 SnapCalorie에서 연구한 결과, 사람들이 시각적으로 음식의 양을 추정하는 능력에 대해 자신감이 있지만 실제로는 평균 53%의 오차가 발생함. 훈련된 전문가도 40%의 오차가 있음. 정확성을 높이려면 음식 저울이나 부피 측정 도구를 사용해야 함. 사람들이 가장 걱정하는 것은 기름, 요리용 지방, 숨겨진 재료이지만, 실제로는 양을 추정하는 것이 더 큰 오류를 초래함. Nutrition5k 논문에서 자세한 오류 분석을 확인할 수 있음
     * 모든 것을 추적하고 측정하는 사람들은 소스나 요리 시간, 남은 음식의 영양소 감소, 여러 번 나누어 먹는 식사 등에서 어려움을 겪음. 혼자 살고 포장된 음식과 생채소를 주로 먹을 때는 쉬웠지만, 공유 식사를 하고 다양한 재료를 사용하면서는 어려워짐
     * 많은 사람들이 자원에 대해 감정적으로 접근하며, 논리로는 이를 해결하기 어려움. 식품과 재정이 유사함. 칼로리 섭취와 소모의 개념은 간단하지만, 실제로 이를 실행하는 데 어려움을 겪음. 사람들은 자신에게 거짓말을 하거나 철학적 딜레마에 빠지며, 종종 욕구에 굴복함
     * My Fitness Pal을 사용해 칼로리를 계산하려 했지만, 많은 노력이 필요함. 외식 시 정확한 계산이 어려움. 소스와 기름을 포함하면 정확도가 떨어짐. 최선의 방법은 아예 계산할 필요가 없도록 피하는 것임
     * 사람들은 어떤 것이든 보고하는 데 서툼. 운동, 음식, 성생활, 그루밍 등. 과학자들이 실험을 위해 정확하게 보고하는 인구가 있다고 상상하는 것은 순진함의 예임
     * 커피, 와인, 초콜릿이 건강에 좋은지에 대한 질문에 답하려는 과학자들이 있음. 무수히 많은 혼란 변수와 유전적 요인, 식사 시간, 운동 수준 등이 있음. 80/20 문제로, 80%를 하고 20%는 잊어버리는 것이 좋음. 만약 몸과 마음이 좋다면, 가끔 와인 한 잔이나 초콜릿 한 조각은 큰 영향을 미치지 않음
     * 대부분의 연구는 절대적인 음식 소비의 정확성에 의존하지 않음. 연구 결과는 상대적인 용어로 제시됨. 예를 들어, 아침 커피 소비가 장수와 관련이 있는지 확인하려면 모든 사람이 음식 섭취를 과소 보고한다고 믿어도 큰 문제가 되지 않음
     * 수면 연구는 클리닉에서 진행되며, 환자에게 자가 보고를 맡기지 않음. 정확한 데이터를 원한다면, 실제 연구를 수행하고 식사를 직접 제공해야 함
     * 사람들은 알코올의 칼로리 함량을 이해하는 데 특히 서툼. 탄수화물과 단백질은 그램당 4칼로리, 알코올은 7칼로리, 지방은 9칼로리임. 저탄수화물 식품 트렌드가 있었을 때 Bacardi는 무탄수화물 럼을 홍보했지만, 모든 무향 하드 리큐어는 탄수화물이 없고 여전히 칼로리가 높음
     * 사람들이 자신에 대해 대부분의 것을 잘못 보고한다는 것은 일반적으로 알려져 있음. 엄격한 연구를 기대한다면 착용 가능한 기기나 스마트 모니터를 사용하는 것이 좋음
"
"https://news.hada.io/topic?id=18893","HN 공개: Counter Strike 1.6 UI 기반 CSS 라이브러리 Cs16.css","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 공개: Counter Strike 1.6 UI 기반 CSS 라이브러리 Cs16.css

     * cs16.css 소개
          + cs16.css는 Counter Strike 1.6의 사용자 인터페이스를 기반으로 한 CSS 라이브러리임.
          + Samuel이 제작하였으며 MIT 라이선스로 배포됨.
     * 주요 기능
          + 다양한 UI 요소를 제공하여 웹 페이지에 쉽게 적용할 수 있음.
          + 버튼, 체크박스, 입력 필드, 선택 상자, 라디오 그룹, 슬라이더, 다이얼로그, 툴팁, 진행 바, 탭 등 다양한 컴포넌트 포함.
     * 설치 방법
          + HTML의 head 태그에 스타일시트를 링크하여 간단히 설치 가능함.
          + 설치 코드는 제공된 링크를 복사하여 사용하면 됨.
     * 라이브러리의 장점
          + Counter Strike 1.6의 UI 스타일을 웹 페이지에 적용할 수 있어 독특한 사용자 경험 제공.
          + 다양한 UI 컴포넌트를 쉽게 사용할 수 있어 개발자에게 유용함.

        Hacker News 의견

     * 컬렉션을 확장할 기회를 기다리고 있음
          + 다양한 CSS 스타일을 소개함: Windows 95, Windows XP, Counter Strike 1.6, Edward Tufte, Windows 98, Windows 7, PlayStation One, NES, Apple System, The Sims
     * 아들이 Half Life 2를 플레이하는 것을 보면서, 예전 스타일의 메뉴가 실제 컴퓨터 시스템 UI처럼 보이고, 현실적이며 사용하기 쉬운 느낌을 줌
          + 반면, 많은 게임들이 과도하게 스타일화된 메뉴를 사용하여 비현실적이고 불편한 경험을 제공함
     * CS 1.6을 다시 설치하여 매일 10-15분씩 봇과 플레이하며 마음을 정리함
          + 과거에 만든 맵을 발견하고, 자신만의 봇 팀과 토너먼트를 만들어 플레이함
     * Counter Strike의 UI가 원래 Steam UI였다는 의견
     * VGUI에 대한 추가 정보 제공
          + CS 1.6에서 setinfo ""_vgui_menus"" ""0"" 명령어로 옛날 스타일의 WON UI로 되돌릴 수 있음
     * 게임을 하지 않지만 아들이 게임하는 것을 보며 깨끗하고 독특한 스타일을 좋아함
          + 다른 독특한 CSS 라이브러리가 있는지 궁금해함
     * ""모두가 칼을 들면 더 빨리 달림""이라는 농담
     * 진행 바에 progress나 meter를 사용하지 않은 이유에 대한 질문
     * 90년대와 2000년대 초반이 UI의 전성기였다는 의견
"
"https://news.hada.io/topic?id=18861","Hunyuan3D 2.0 – Tencent의 고해상도 3D Asset 생성 시스템 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Hunyuan3D 2.0 – Tencent의 고해상도 3D Asset 생성 시스템

     * Hunyuan3D 2.0은 고해상도 텍스처 3D 애셋 생성을 위한 대규모 3D 합성 시스템
     * 두 가지 주요 구성 요소:
          + Hunyuan3D-DiT: 대규모 형태 생성 모델로, 확장 가능한 흐름 기반 확산 변환기(fusion transformer)를 기반으로 구축되어 특정 조건 이미지에 정렬된 기하학을 생성함으로써 안정적인 기반을 제공함
          + Hunyuan3D-Paint: 강력한 기하학 및 확산 사전 지식을 활용하여 생성된 메시(mesh)나 수작업 메시에 대해 고해상도 및 생생한 텍스처 맵을 생성함
     * Hunyuan3D-Studio는 3D 자산의 재생성 과정을 쉽게 만드는 플랫폼으로, 전문가와 아마추어 모두가 효율적으로 메쉬를 조작하거나 애니메이션화할 수 있게 함
     * Hunyuan3D 2.0은 기존의 오픈 소스 및 비공개 모델보다 우수한 성능을 보임: 기하학적 세부사항, 조건 정렬, 텍스처 품질 등

Hunyuan3D 2.0

  아키텍처

     * 두 단계 생성 파이프라인: 메쉬 생성 후 텍스처 맵 합성
     * 형태와 텍스처 생성의 어려움을 분리하고, 생성된 메쉬나 수작업 메쉬에 텍스처링을 유연하게 제공

  성능

     * Hunyuan3D 2.0은 다른 오픈 소스 및 비공개 3D 생성 방법과 비교하여 우수한 성능을 보임
     * CMMD, FID_CLIP, FID, CLIP-score에서 모든 기준을 초과함

  사전 학습된 모델

     * Hunyuan3D-DiT-v2-0: 2025-01-21, 2.6B 파라미터
     * Hunyuan3D-Paint-v2-0: 2025-01-21, 1.3B 파라미터
     * Hunyuan3D-Delight-v2-0: 2025-01-21, 1.3B 파라미터

  API 사용법

     * Hunyuan3D-DiT와 Hunyuan3D-Paint 모델을 사용하기 위한 diffusers 유사 API 설계
     * Hunyuan3D-DiT를 통해 메쉬 생성 가능
     * Hunyuan3D-Paint를 통해 텍스처 합성 가능

  Gradio 앱

     * Gradio 앱을 통해 개인 컴퓨터에서 호스팅 가능

📑 오픈 소스 계획

     * 추론 코드, 모델 체크포인트, 기술 보고서, ComfyUI, TensorRT 버전 포함

        Hacker News 의견

     * 3D 메쉬 모델 관련 질문에서, 포토그래메트리에 적합한 모델이 있는지에 대한 논의가 있음. 고품질 사진과 일관된 조명, 단색 배경을 사용했지만, 일반적인 애플리케이션이 낮은 폴리곤이나 구멍이 많은 메쉬를 생성함.
     * 생성 AI가 3D 인터랙티브 콘텐츠 제작의 한계 비용을 0으로 낮출 것이라는 의견이 있음. 이는 메타버스를 활성화할 수 있는 잠재력을 가짐.
     * Tencent Hunyuan 3D 2.0의 라이선스가 유럽 연합, 영국, 한국에서는 적용되지 않음.
     * 메쉬가 마칭 큐브 알고리즘으로 생성된다는 다이어그램이 있지만, 실제로는 다른 방식으로 생성된 것 같다는 의견이 있음.
     * AI 모델을 집에서 실행할 수 있는지에 대한 질문이 있음. 예를 들어, 4090 그래픽 카드에서 실행 가능한지에 대한 논의가 있음.
     * ""고급""이라는 단어가 포함된 것은 좋은 것이라는 의견이 있음.
     * 사용자 생성 콘텐츠 시스템은 ""펜이스 문제""라는 문제를 겪을 수 있음.
     * 생성 모델은 신뢰하되 검증이 필요하다는 의견이 있음. 직접 시도해보는 것이 중요함.
     * Huggingface 페이지에 링크된 모델을 시도해보았으나, 과사용 오류로 인해 테스트하지 못했음. 결과물은 꽤 괜찮아 보임.
     * 긴 프롬프트가 필요하며, 이는 의심을 불러일으킬 수 있음. 실제 사용이 얼마나 어려운지 알아보기 위해 간단한 프롬프트로 시도해보았음.
     * ""기타"" 프롬프트 결과는 약간 두꺼운 기타로 나타났으며, ""몬스테라 잎"" 프롬프트는 약간 이상한 형태로 나타남.
     * ""슈퍼 마리오"" 캐릭터 프롬프트 결과는 의심스러움. 루이지는 마리오와 다르게 나타나야 하지만, 그렇지 않음.
     * ""피치"" 프롬프트 결과는 웃음을 자아냄. 귀여운 얼굴을 가진 복숭아로 나타남.
     * ""토드"" 프롬프트 결과는 변형된 스쿼틀처럼 보임.
     * 논문은 arXiv에서 확인 가능함. 생성 모델은 많은 데이터를 기반으로 학습되며, 데이터베이스와 같은 인터페이스가 필요할 수도 있음.
     * 3D 프린팅 기능성 객체에 맞춘 모델을 상상해볼 수 있음.
"
"https://news.hada.io/topic?id=18801","HN 공개: Mermaid 클래스 다이어그램 편집용 GUI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN 공개: Mermaid 클래스 다이어그램 편집용 GUI

    Mermaid 클래스 다이어그램 편집을 위한 GUI

     * Mermaid 차트의 장점: 복잡한 다이어그램을 빠르게 표현할 수 있는 Mermaid 차트는 최근 업데이트로 인해 클래스 다이어그램 편집이 더욱 직관적이고 쉬워졌음. 새로운 기능은 시각적 편집기를 확장하여 클래스 다이어그램과의 직접적인 상호작용을 지원하며, 사용자가 다이어그램 경험을 향상시킬 수 있는 다양한 도구를 제공함.

    클래스 다이어그램이란?

     * 클래스 다이어그램 정의: UML(통합 모델링 언어)의 일종으로, 시스템의 구조를 모델링하여 클래스, 속성, 메서드, 객체 간의 관계를 보여줌. 객체 지향 설계에서 필수적인 도구로, 시스템의 다양한 부분이 어떻게 상호작용하는지를 시각화하는 데 도움을 줌.
     * 기본 요소:
          + 클래스: 객체나 개념을 나타냄.
          + 속성: 클래스의 특성이나 속성.
          + 메서드: 클래스가 수행할 수 있는 작업이나 연산.
          + 관계: 클래스 간의 연결이나 상호작용을 나타냄.

    새로운 시각적 편집기 도구

     * 도구 소개: 시각적 편집기 툴바는 클래스 다이어그램을 위한 여러 새로운 도구를 소개함.
          + 다이어그램 렌더링 방향 변경: 다이어그램의 레이아웃을 조정.
          + 새 클래스 추가: 다이어그램에 쉽게 새 클래스를 추가.
          + 제목 및 메모 추가: 다이어그램에 제목을 추가하거나 특정 클래스와 연결되지 않은 메모를 삽입.
          + 빈 네임스페이스 추가: 특정 네임스페이스에 속하는 클래스의 자리 표시자를 정의.
          + 다이어그램 구성 업데이트: ""빈 멤버 상자""의 가시성 등 옵션을 토글하여 깔끔한 외관 유지.
          + 테마 및 레이아웃 변경: 다양한 테마를 선택하고 다이어그램의 외관을 조정.

    새로운 클래스 및 관계 생성

     * 클래스 및 관계 생성 방법:
          + 기존 관계로 새 클래스 생성: 다이어그램의 기존 클래스를 클릭한 후 빈 공간으로 드래그하여 새 클래스를 생성하고 원래 클래스와 직접적인 관계를 설정.
          + 기존 클래스 간의 관계 생성: 한 클래스로부터 다른 클래스로 관계선을 드래그하여 빠르게 관계를 설정.

    클래스 세부사항 편집

     * 클래스 속성 수정: 시각적 편집기는 코드 없이 클래스 속성을 수정할 수 있는 강력한 대화형 인터페이스를 제공함. 클래스의 각 속성을 세밀하게 구성할 수 있음.
          + 속성: 가시성 수정자 정의, 데이터 타입 설정, 속성 이름 지정.
          + 메서드: 메서드 가시성 설정, 반환 타입 정의, 메서드 이름 및 매개변수 지정.

    다이어그램 최적화를 위한 추가 팁

     * 다양한 레이아웃 실험: 레이아웃과 테마 옵션을 활용하여 다이어그램의 최적의 외관을 찾음.
     * 메모로 맥락 추가: 메모 기능을 사용하여 다이어그램의 일부를 설명하고 복잡한 관계를 명확히 함.

    시작하기

     * Mermaid 시각적 편집기 도구 활용: 새로운 기능을 탐색하여 클래스 다이어그램을 더욱 효율적이고 접근 가능하게 만듦. 새로운 다이어그램을 처음부터 만들거나 기존 다이어그램을 개선할 때, 이러한 업데이트는 시간과 노력을 절약하고 시스템의 설계와 구조에 집중할 수 있게 함.
"
"https://news.hada.io/topic?id=18911","Pixelfed 사용자 50만 명 돌파","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Pixelfed 사용자 50만 명 돌파

     * FediDB 및 Pixelfed 개요
          + FediDB는 Fediverse 네트워크의 통계 정보를 제공하는 사이트임.
          + Pixelfed는 사진 공유 플랫폼으로, Fediverse의 일부로 작동함.
     * 사용자 및 서버 통계
          + 총 사용자 수: 525,078명
          + 월간 활성 사용자(MAU): 263,899명
          + 활성 서버 수: 675개
          + 총 게시물 수: 118,933,309개
     * Pixelfed 서버 정보
          + pixelfed.social: 미국에 위치, 사용자 수 198,487명, 게시물 수 41,377,392개
          + pixelfed.de: 독일 Gunzenhausen에 위치, 사용자 수 20,694명, 게시물 수 18,723,605개
          + pixelfed.uno: 독일 Düsseldorf에 위치, 사용자 수 4,550명, 게시물 수 2,078,348개
          + pxlmo.com: 미국 Reston에 위치, 사용자 수 3,323명, 게시물 수 5,994,391개
          + gram.social: 독일에 위치, 사용자 수 7,775명, 게시물 수 3,270,398개
          + pixey.org: 독일에 위치, 사용자 수 3,082명, 게시물 수 4,802,835개
          + pixel.tchncs.de: 독일에 위치, 사용자 수 716명, 게시물 수 2,255,688개
          + pixelfed.fr: 독일에 위치, 사용자 수 4,439명, 게시물 수 3,849,762개
          + pixelfed.tokyo: 일본 Heiwajima에 위치, 사용자 수 1,115명, 게시물 수 384,823개
          + metapixl.com: 핀란드 Helsinki에 위치, 사용자 수 924명, 게시물 수 4,773,226개
     * 인기 버전 및 ASN
          + 인기 버전: 0.12.4, 0.12.3, 0.11.4 등
          + 인기 ASN: Hetzner, OVH, Cloudflare 등
     * 가장 큰 서버 (사용자 수 기준)
          + pixelfed.social: 24K 사용자
          + pixelfed.de: 4.8K 사용자
          + pixelfed.tokyo: 647 사용자
     * 가장 활동적인 서버 (게시물 수 기준)
          + pixelfed.social: 186K 게시물
          + pixelfed.de: 31K 게시물
          + pix.diaspodon.fr: 14K 게시물
     * 기타 정보
          + Pixelfed는 2020년부터 Fediverse를 지원하고 있음.

        Hacker News 의견

     * 장기적으로 생각할 때, AT 프로토콜보다 fedi에 더 흥미를 느끼고 있음
     * ""Total Users: 519,185""라는 숫자가 왜 ""Pixelfed User Count"" 그래프의 최대치인 316,151과 다른지 궁금함
     * 대량의 데이터와 저장소를 어떻게 연합할 계획인지 설명해줄 수 있는지 궁금함
     * Twitter 경쟁자들이 어떻게 작동하는지 잘 모르겠음. Pixelfed의 사용자와 게시물이 Bsky와 연합하는지 궁금함
     * Twitter를 떠나 Bsky로 이동한 사람들에 대해 들었음. 만약 소셜 활동을 시작하려면 Bsky에 가입해야 하는지, 아니면 다른 대안들이 있는지 궁금함
          + 정치나 밈을 원하지 않는 프로그래머들이 모이는 서버가 있는지 궁금함
     * 팔로우할 사람 추천이 필요함. 이전에 사용해본 적이 없음
     * 앱의 홈 화면에 ""No posts found!""라는 메시지가 계속 나타남. 7월부터 시도했지만 여전히 같은 상태임
     * HN에서 실제로 Pixelfed의 콘텐츠를 소비하는 사람이 있는지 궁금함
     * 더 나은 연락처/친구 발견 기능이 필요하다고 생각함
     * 이 프로젝트를 재정적으로도 완전히 지지하지만, Mastodon처럼 복잡하고 축소되는 Twitter 대안이 될까 걱정됨
     * Pixelfed의 활성 사용자는 27k임
          + 5%의 활성 사용자 비율이 다른 소셜 미디어 사이트와 비교했을 때 좋은지 나쁜지 궁금함
     * Pixelfed에 해당하는 AT 프로토콜이 있는지 궁금함
"
"https://news.hada.io/topic?id=18868","대규모 앵귤러 웹 애플리케이션 성능 최적화: 카카오 챗봇 관리자센터 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                대규모 앵귤러 웹 애플리케이션 성능 최적화: 카카오 챗봇 관리자센터 사례

     * 개요
          + 챗봇 관리자센터 소개
          + 프로젝트 배경
          + 목표 및 개선 방향
     * 성능 개선 내용
          + CLS 개선
          + TBT 개선
     * 트러블 슈팅 - CLS 개선 작업 중 발생한 DOM 업데이트 문제
          + 문제 현상
          + 원인 분석
          + 문제 해결
     * 성능 개선 결과
          + 주요 개선 사항 요약
          + 평균 성능 점수 변화
          + 주요 페이지별 성능 점수 변화
     * 맺으며
"
"https://news.hada.io/topic?id=18828","재미와 이익을 위한 "LLM 기반 TDD"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        재미와 이익을 위한 ""LLM 기반 TDD""

TDD(Test-Driven Development)와 LLM의 결합

     * TDD는 프로그램 작성을 시작하기 전, 포괄적인 단위 테스트를 먼저 작성하는 개발 방법론임
     * 테스트가 사실상 사양서 역할을 맡기 때문에, 최종적으로 모든 테스트가 통과하면 코드의 정확성을 어느 정도 증명할 수 있음
     * 전통적으로 TDD는 생산성을 저해하거나 비효율적이라는 비판을 받기도 함
     * 하지만 LLM의 등장으로 테스트 작성과 코드를 반복 수정하는 과정이 훨씬 수월해짐

내가 LLM을 평소에 사용하는 방법

     * Github Copilot 같은 도구를 적극적으로 사용해 왔음
     * LLM은 반복 패턴을 찾고 다음 몇 줄을 자동완성하는 데 능숙하지만, 문제 전체를 깊이 이해하여 완결성 있는 모듈을 단번에 만들어내는 데에는 종종 어려움이 있음
     * 문제 해결에 필요한 맥락을 과도하게 제공하면 모델이 주제에서 벗어나기 쉬움
     * 필요에 따라 정보(오류 출력 등)를 부분적으로만 제공하며 작업을 진행하면, 모델이 디버깅에도 훌륭한 도움을 줌
     * IDE, 터미널, 챗 인터페이스 간 복사-붙여넣기를 반복하는 과정에서 마찰이 생긴다는 점을 체감함

자동화할 수 있을까?

     * 이러한 과정을 자동화하기 위해 직접 event loop 개념을 도입함
     * 첫 번째 프롬프트에 구현할 함수의 사양과 함수 시그니처를 명시하면, 모델은 단위 테스트와 코드의 초안을 제시함
     * 이 코드를 ‘sandbox’ 디렉토리에 저장하고 자동으로 go test를 실행함
     * 테스트가 실패하면, 두 번째(반복) 프롬프트에 기존 코드와 테스트 결과(컴파일 오류나 실패 정보)를 함께 전송함
     * 모델은 이를 바탕으로 수정된 테스트 및 구현 코드를 다시 제안함
     * 모든 테스트가 통과할 때까지 이 과정을 반복함
     * 이 접근법은 맥락을 과도하게 누적하지 않고도 점진적인 개선을 가능케 함
     * 모델이 동일 테스트 케이스에서 반복적으로 실패할 수도 있는데, 그럴 경우 사람이 직접 문제 부분을 짚어 힌트를 제공함
     * LLM이 만든 테스트가 충분히 엄격한지 의심해야 하는 ‘감시자 부재’ 문제를 인지해야 함
     * 동일한 오류나 불완전한 설계를 코드와 테스트가 함께 공유할 가능성이 있음
     * 따라서 인간이 추가로 테스트 케이스를 강화해주는 과정이 중요함
     * 필요하다면, mutation testing 같은 기법을 AI로 실험해볼 수도 있음

LLM 기반 개발과 인지 부하(cognitive load)

     * LLM과 함께 TDD를 적용하면, 일반적인 알고리즘 문제뿐 아니라 실제 종속성이 있는 코드베이스에서도 가능할 것으로 예상함
     * 단, 프로젝트 구조를 더 작은 단위로 쪼개어 유지보수성을 높이고, 각 디렉토리/패키지가 독립적으로 테스트 가능해야 함
     * 각 패키지는 주요 타입 정의(shared.go)와 특정 로직을 담당하는 파일(x.go) 및 테스트(x_test.go)로 분리하여 인지 부하를 줄이는 방식을 권장함
     * AI를 활용하는 과정에서 전체 코드를 매번 모델에 제공하는 대신, 특정 부분만 선택적으로 포함해 모델이 집중하도록 유도함
     * 이는 테스트 커버리지를 높이면서 모듈 간의 결합도를 줄여 장기 유지보수에도 이점을 줌
     * 큰 프로젝트라도 작고 명확한 단위로 쪼개어, 각 단위의 논리를 풍부하게 담되 범위를 최소화하는 구조를 지향함

마무리

     * AI의 발전 속도를 고려하면, 내일 당장 새로운 아키텍처가 등장해서 LLM의 한계를 뛰어넘을 수도 있음
     * 따라서 10만 줄이 넘는 대규모 레거시 코드를 급작스럽게 리팩터링하기보다는, 작은 규모에서부터 TDD와 LLM의 결합 가능성을 탐색해보는 것을 추천함
     * TDD와 LLM의 융합은 코드 자동생성과 테스트 품질 관리 모두에 긍정적인 변화를 줄 수 있을 것으로 기대함

   다른 개발 전용 AI 서비스는 어떤 파이프라인을 사용하고 있을까 곰곰이 고민하게 되네요.

   (이런거 보고있자면)조금 있으면 전뇌를 위해 전기 자극선을 뇌에 삽입 할 것만 같아요.

   테스트 코드를 넣는 건 좋은 거 같긴 한데, 이 사람이 만든 프로그램에 메리트는 없는 거 같아요
   cline이나 aider에서도 커맨드라인 실행하고 결과 받는 게 돼서 그 프로그램에서 프롬프트만 잘 쓰는 게 다른 편의성을 생각했을 때 나을 거 같습니다

   빌더 아이오에서 만든 마이크로 에이전트도 비슷한 접근입니다. https://github.com/BuilderIO/micro-agent 저도 LLM과 TDD를 여러 번 해봤는데, 디자인 시스템 등으로 추상화도 잘 해야하고요. 컨벤션이랑 패턴도 잘 정립되어 있어야 하고요. 테스트케이스는 보통 직접 짜는 편입니다. (인간 말로라도?) 무엇보다 이 글에서도 말하듯이 결합도가 낮고 응집도 높은 모듈을 잘 설계해야 한정된 컨텍스트 윈도우에 맥락을 밀어넣을 수 있더라고요.

   LLM이 작은 범위의 코드는 잘 봐주지만 전체적인 설계, 큰 시야가 아직 아쉬운 편인데,
   TDD랑 결합해서 조금씩 개선하는 방식 좋은 것 같네요.
"
"https://news.hada.io/topic?id=18815","Shopify의 5년간 React Native 사용 경험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Shopify의 5년간 React Native 사용 경험

     * Shopify는 5년 전 React Native(RN)를 모바일 개발의 미래로 선언한 이후, 모든 앱을 RN으로 성공적으로 전환하였음
     * React Native 도입의 주요 이유
          + 한 번의 작성으로 두 플랫폼 지원: iOS와 Android에서 동일한 기능을 두 번 개발하는 비효율을 제거하기 위함
          + 인재 유동성 향상: 개발자들이 iOS, Android, Web을 자유롭게 오가며 작업할 수 있도록 지원
          + 더 많은 가치 제공: 기능 동등성 확보에 소요되는 시간을 줄이고 사용자에게 더 많은 가치를 전달
     * 전환의 성공적인 결과
          + 동일한 기능을 두 번 개발하지 않아 생산성이 크게 향상되었음
          + 엔지니어들이 웹과 모바일을 모두 다루게 되어 동일한 인력으로 더 많은 작업을 수행하고 새로운 성장 기회를 창출
          + iOS와 Android 간 기능 동등성 유지가 문제가 되지 않아 더 많은 가치를 제공할 수 있게 되었음
          + 앱의 화면 로드 시간이 500ms 이하로 빠르고, 세션의 99.9% 이상이 안정적으로 유지됨
          + 작업에 가장 적합한 도구로 네이티브 코드를 계속 활용하여 두 세계의 장점을 모두 누리고 있음

주요 학습 내용

  React Native 앱은 빠름

     * Shopify는 성능을 매우 중요하게 생각하며, CEO인 Tobi Lutke는 ""모든 빠른 소프트웨어가 훌륭한 것은 아니지만, 모든 훌륭한 소프트웨어는 빠르다""라고 강조함
     * React Native(RN)로 전환하기 전 가장 큰 질문은 RN이 성능 목표를 충족할 수 있을지에 대한 것이었음
          + 그래서 전환 결정을 내리기 전에 광범위한 프로토타이핑을 통해 가능할지 결과를 확인함
          + Meta가 성능 병목을 제거하기 위해 진행 중인 작업을 검토하고, 리스트와 같은 영역에서 기여할 수 있는 부분을 식별
          + RN이 곧 더 빨라질 것이라는 판단 하에 전폭적인 도입을 결정
     * 5년이 지난 지금, RN 앱은 빠르게 동작하며, Shopify 앱에서 500ms 이하(P75)의 화면 로드 시간을 달성
          + 비슷한 성능 목표를 다른 모든 앱에서도 성공적으로 달성
          + 성능 병목 현상을 제거하기 위해 좋은 패턴과 기술을 적용하는 것이 필수적
     * 네이티브가 항상 빠르다는 보장은 없으며, RN이 항상 느린 것도 아님
          + RN은 지난 몇 년간 크게 발전하여 세계적 수준의 앱을 구축할 수 있는 플랫폼으로 자리 잡음
     * RN 프레임워크가 성숙해지면서 빠른 앱을 개발하는 것이 점점 더 쉬워질 것으로 기대
          + 팀의 전문성이 증가함에 따라 더 나은 앱을 만들 수 있는 여지가 확대될 것

  핫 리로딩의 장점

     * React Native(RN)의 핫 리로딩은 개발 환경에 혁신을 가져온 기능으로, 변경 사항이 즉시 반영됨
     * 네이티브 개발에서 가장 큰 문제점 중 하나는 코드베이스 크기에 따라 사소한 변경 사항도 컴파일 및 에뮬레이터/실제 기기에서 실행하는 데 몇 분이 소요된다는 점이었음
     * 이로 인해 시간이 낭비되고 개발자의 작업 흐름이 중단되는 문제가 발생
     * RN의 핫 리로딩은 이러한 문제를 완전히 해결하여 생산성과 개발 경험을 크게 향상시킴

  Typescript로 인한 인재 유동성 확보

     * Typescript가 널리 사용되면서 React 웹과 React Native(RN) 간 개발자 이동이 원활해짐
          + 웹 개발자: RN을 통해 네이티브 iOS와 Android 개발보다 모바일 작업을 훨씬 쉽게 시작 가능
          + 모바일 개발자: RN을 통해 웹 작업에 쉽게 참여 가능
     * 인재 유동성의 장점
          + 엔지니어들에게 더 많은 성장 기회를 제공하며, 인력 배치의 유연성을 증가시킴
          + 동일한 개발 인력으로 더 많은 작업을 수행할 수 있는 역량을 강화
          + 웹과 모바일 간 코드 공유를 통해 더 큰 효율성과 생산성을 창출
     * 여러 플랫폼에서 작업할 수 있는 개발자는 더 빠른 출시를 가능하게 하고, 기술 간 아이디어를 교환하여 새로운 방식으로 적용 가능
     * 기술을 도구로 간주하는 문화를 형성하며, 팀의 시야를 넓히고 작업에 가장 적합한 도구를 선택하도록 장려

  네이티브 개발자는 필수적임

     * iOS와 Android에 전문화된 모바일 엔지니어는 훌륭한 모바일 앱을 구축하는 데 필수적
     * 여러 모바일 제품을 개발하며 축적한 경험과 사용성 및 컨벤션에 대한 깊은 이해는 대체할 수 없음
     * 플랫폼 레이어에 접근하거나, 바인딩 작성, 빌드 및 배포 마스터링, 그리고 React Native 버전 업데이트를 관리하는 등의 작업은 네이티브 전문 지식이 필요
     * 네이티브 개발자는 다양한 기기 모델에서 앱 성능을 최적화하고, 모든 사용자에게 일관된 경험 제공
     * iOS와 Android의 새로운 기능, API, 툴링 변화에 대응하고 React Native 버전 업데이트를 관리하는 데 필수적
     * 네이티브 모바일 개발자를 위한 React Native 교육 과정 개발:
          + 셀프 학습 방식으로 구성되어 프로덕션 수준의 코드를 작성할 수 있도록 지원
          + React Native에 능숙한 개발자들과 Q&A 세션, 페어 프로그래밍, 코드 리뷰를 통해 추가 지원
     * 웹 개발자(JavaScript, TypeScript, React 전문가)를 모바일 팀에 추가 배치:
          + 네이티브와 React Native 간의 강력한 전문성을 균형 있게 보유
          + 시간이 지나면서 전체 팀의 기술 수준이 향상됨
     * 네이티브와 웹 개발자가 잘 조화된 팀 구성이 React Native를 활용한 훌륭한 모바일 앱 개발의 핵심

  네이티브 코드는 필수적임

     * 100% React Native 사용은 지양해야 함: RN은 기능을 한 번만 개발해도 되는 효율적인 도구지만, 모든 상황에 적합한 기술은 아님
     * 네이티브 코드가 필요한 경우
          + 첨단 기능 개발: 2D/3D 스캐닝 및 온디바이스 AI 모델 실행 등 하드웨어를 활용하는 기능
          + 메모리 제약이 있는 기능: 홈 및 잠금 화면 위젯, Apple Watch 앱 및 컴플리케이션, App Intents, Siri Shortcuts 등
          + 장시간 실행되는 백그라운드 작업:
               o 예: Shopify의 Point of Sale 앱은 대량의 데이터를 백그라운드에서 다운로드 및 동기화하여 오프라인에서도 거래 처리 가능
               o 네이티브 코드를 활용해 백그라운드 작업을 완전히 오프로딩함으로써 앱 성능에 영향을 주지 않도록 설계
     * RN은 대부분의 기능을 한 번만 개발하는 데 적합하지만, 네이티브가 가장 잘 작동하는 영역에서는 네이티브 코드를 활용하는 것이 이상적
     * RN이 기본적으로 제공하는 네이티브와의 강력한 상호운용성을 통해 두 기술의 조합이 쉬워짐
     * RN ‘또는’ 네이티브의 관계가 아니라 RN ‘그리고’ 네이티브의 관계로 바라보는 것이 중요
     * 네이티브 전문성이 있는 팀 구성이 이러한 조화를 효과적으로 구현하는 데 필수적

  디버깅의 어려움

     * React Native(RN)의 디버깅은 불안정한 측면이 있으며, VSCode에서 올바르게 설정하는 데 추가 작업이 필요
     * iOS와 Android는 강력하고 안정적인 디버깅 기능을 기본적으로 제공
     * Meta는 최근 RN의 디버거 스택을 완전히 재작성하여 개선을 진행 중이며, 새로운 디버거는 유망한 결과를 보이고 있음
     * Shopify는 Meta와 협력하여 RN의 디버깅 환경을 세계적 수준으로 끌어올리기 위해 노력 중

  React Native 업데이트는 심리스 하지 않음

     * React Native(RN)의 새로운 버전으로 앱을 업데이트하는 데 많은 작업이 필요하며, 종종 코드베이스 재구성이 요구됨
     * Shopify는 이를 해결하기 위해 소규모 순회 개발자 그룹을 구성하여 업데이트 작업을 전담하게 하고, 나머지 팀은 기능 개발에 집중하도록 조정
     * RN 프레임워크가 성숙해짐에 따라 업데이트 과정이 점점 더 쉬워질 것으로 예상
     * New Architecture가 더 널리 채택되면 업데이트 관련 작업의 복잡성이 줄어들 것으로 기대

  서드파티 라이브러리에 대한 의존성 증가

     * React Native(RN) 프레임워크는 네이티브에 비해 포괄적이지 않아 더 많은 서드파티 라이브러리를 사용하게 됨
     * 최근 몇 년간 생태계가 성숙해지면서, 필요한 거의 모든 기능에 대해 잘 유지 관리된 라이브러리를 쉽게 찾을 수 있음
     * 그러나, 서드파티 라이브러리의 지속적인 업데이트 유지가 필요하며 공급망 공격의 표면적이 증가
     * Shopify는 Dependabot을 활용한 자동 종속성 업데이트를 도입
          + 자동 코드 스캐닝을 통해 악성 코드를 탐지 및 방지
     * RN 프레임워크가 더 명확한 방향성을 갖고, 기본적으로 더 많은 기능을 제공하는 방향으로 발전하기를 기대

  공유 기반의 활용으로 얻는 큰 이점

     * React Native(RN)를 처음 도입했을 당시에는 RN으로 모바일 앱을 구축한 경험이 부족했으며, 네이티브 개발에서 축적한 공유 기반을 활용할 수도 없었음
     * 초기에는 각 팀이 자체적으로 문제를 해결하며 앱을 개발했으며, 이는 빠르게 시작하고 앱을 마이그레이션하는 데 효과적이었음
          + 그러나, 각 팀이 동일한 문제를 여러 번 해결하면서 비효율적으로 중복 작업 발생
          + RN에 대한 전문성을 쌓기 위해 시간과 노력을 투자했고, 속도를 우선시하면서도 일관성을 희생하는 트레이드오프를 의도적으로 선택
     * 2023년 이후 모든 앱이 성숙해지면서 일관성을 강화하기 시작
          + 공통 구성 요소(예: Identity, 실시간 모니터링, 성능 측정 등)를 공유 라이브러리로 추출하여 모든 앱에서 활용
          + 이는 팀들이 이미 해결된 문제를 다시 풀 필요 없이 기존 솔루션을 활용하도록 지원
     * 2025년엔 코드 공유를 더욱 확대하여
          + 팀 간 지식과 전문성을 확산
          + 공유 구성 요소 개선의 혜택을 모든 앱이 자동으로 누리게 함
          + 엔지니어링 리소스를 절약하여 사용자 가치를 전달하는 작업에 집중

  React Native의 미래

     * React Native(RN)의 미래는 밝으며, Meta는 이 프로젝트의 훌륭한 관리자로서 정기적인 개선을 제공하고 있음
     * 각 릴리스에서 개발자 피드백이 로드맵에 크게 반영되고 있으며, 빠른 앱을 만드는 것이 점점 더 쉬워질 것으로 기대
     * Shopify는 New Architecture를 도입하며 RN의 발전을 지속적으로 지원할 계획
     * Microsoft, Amazon, Tesla, SpaceX, Coinbase와 같은 여러 주요 기업이 RN을 사용하고 있으며, 고품질 서드파티 라이브러리와 프레임워크가 지속적으로 출시되고 있음
     * Shopify는 아래와 같은 것들로 오픈 웹, 오픈 소스, 오픈 표준에 대해 기여하고 있음
          + RN에 대한 코드 기여
          + RN 릴리스의 공동 릴리스 캡틴 역할 수행
          + React Native Skia, Reanimated와 같은 고효과 오픈 소스 프로젝트 후원
          + Flashlist, Restyle, Tophat과 같은 오픈 소스 프로젝트 공개
     * 추가적으로 2025년엔 React Native Working Group을 재시작함
          + RN을 지원하는 조직의 주요 리더들을 모아 생태계의 주요 과제를 식별하고, 투자 우선순위를 정하며, 협력을 증진하고 중복된 작업을 줄이는 것이 목표
          + 이전 참여 기업: Meta, Twitter, Coinbase, Microsoft 등
          + 참여를 희망하는 경우 문의
     * RN은 지난 5년간 큰 발전을 이루었으며, 도입을 주저하게 만들었던 많은 한계들이 이제는 사라짐
     * RN을 한동안 안 써봤다면 지금은 RN을 다시 시도해 볼 적기임

   비슷한 시기에 비슷한 이유로 RN을 도입했는데 잘 쓰고 있습니다.
   퍼포먼스 이슈는 살짝 공감하기 힘들긴 한데 그건 아마도 react-dom 레벨에서 해결해야할 문제겠죠.
   적은 인원으로 많은 일을 할 수 있다는게 가장 큰 장점같습니다.

   RN 의 Native API 로 커버하지 못하는 native 기능은 뭐가 있는지 궁금하군요.

   인상적인 경험 공유입니다. 지금은 업무로 코틀린을 이용해서 안드로이드 앱 개발을 하고 있는데, 가끔 생각해봅니다. 꼭 네이티브로 갈 필요가 있을까...? (저의 경우 플랫폼과 긴밀하게 작업해야 할 것들이 있어 어쩔 수 없이 네이티브로 갔지만) 가능하면 React Native나 Flutter처럼 크로스 플랫폼이 지원되는 방향으로 가는 것도 좋을 것 같습니다.

   shopify 멋지네요@.@

   ""100% React Native should be an anti-goal. It is great for building features just once, but is not the right technology for everything.""
   ""Instead of thinking native or React Native, think native and React Native.""

   엔지니어링은 100%가 없어요 (""무조건 A가 낫다""는 제목낚시 주의).
   각각 장단점이 있고 상황에 맞는 도구가 있는거죠.
   Shopify 팀 빌딩 철학도 볼 수 있어서 매우 좋은 글입니다.

   그래도 전 Flutter를 찬양할래요.

   RN으로 모든 앱 전환... 끝내주네요 ㄷㄷ

   @shopify/flash-list 개꿀입니다. 감사합니다. shopify

   Shopify는 Ruby on Rails 생태계에서도 핵심적인 역할을 하고 있는데,
   RN 생태계에서도 놀라운 행보를 보여주고 있네요. 멋진 회사에요.
"
"https://news.hada.io/topic?id=18818","스콧 갤러웨이의 2025년 예상 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           스콧 갤러웨이의 2025년 예상

파워 커플: OpenVidia

     * ChatGPT 출시 이후(2022년 11월), 기술 업계의 Big Six(Alphabet, Amazon, Apple, Meta, Microsoft, Nvidia) 기업 가치는 8.2조 달러 증가
          + 참고로, 2024년 미국 연방 예산은 6.8조 달러
     * AI를 실적 발표에서 언급한 기업은 평균 12% 성과 증가를 기록했으며, 언급하지 않은 기업은 9% 증가에 그침
     * AI 생태계의 3개 주요 계층
          + 애플리케이션 계층: Duolingo, Netflix, Tesla와 같은 서비스
          + AI 모델 계층: Anthropic, Gemini, OpenAI 등
          + 인프라 계층: AWS, Google Cloud, Nvidia
     * OpenAI와 Nvidia의 지배력:
          + OpenAI
               o 연간 매출이 최근 6개월간 2배 증가, 현재 34억 달러에 도달
               o ChatGPT는 프리미엄 LLM 구독 시장의 56% 를 점유
          + Nvidia
               o 최근 12개월간 매출이 960억 달러, 2022년 대비 4배 증가
               o Nvidia 칩은 경쟁사의 칩보다 19배 더 많은 연구 논문에서 인용
     * 두 회사가 기술 초기 단계에서 이처럼 강력하게 지배하는 사례는 이례적
     * OpenAI와 Nvidia는 각각 소프트웨어와 하드웨어 영역에서 AI 혁신의 중심 역할을 하고 있음

2025년의 AI 기업: Meta

     * 전 세계(중국 제외) 인터넷 사용자의 90%가 Meta 플랫폼을 사용
     * Google, Reddit, Wikipedia, X를 합친 것보다 많은 언어 데이터 보유
     * Nvidia Hopper GPU 구매량에서 Microsoft 다음으로 2위, 높은 AI 학습 및 배포 역량 보유

Palindrome: Service-as-a-Software

     * 현재 AI의 수혜는 기존 주요 기업들이 대부분을 누리고 있음
     * 다음 승자는 SaaS(서비스형 소프트웨어)를 활용하는 기업이 될 것
          + Service-as-a-Software: 인간 중심 서비스를 AI로 자동화하여 적은 노동력으로 확장
          + 소비자 대상 AI 애플리케이션이 증가할 것으로 예상
     * 가장 큰 잠재력은 백오피스 기능의 자동화
          + 예: 회계, 컴플라이언스, 고객 서비스 등의 일상 업무를 AI로 처리

2025년의 기술: 핵에너지

     * ChatGPT 질의는 Google 질의보다 10배 더 많은 에너지를 소모
          + 데이터 센터 건설 및 에너지 투자 증가로 Big Tech는 컴퓨터 판매 산업에서 컴퓨트 판매 산업으로 전환 중
          + 지식 경제에서 컴퓨트는 곧 에너지임
     * 핵에너지의 장점:
          + 풍력, 태양광에 비해 규모와 안정성에서 우월
               o 1개의 원자로 = 800개의 풍력 터빈 또는 850만 개의 태양광 패널
          + 탄소 배출 없음: 미국 청정 에너지의 48% 가 핵에너지에서 생산
          + 지난 60년간 사용된 핵연료는 축구장 10야드 크기에 불과
     * 핵에너지에 대한 오해:
          + 브랜드 관리가 가장 잘못된 사례로 평가받음
          + 모든 에너지원은 배출 및 외부 비용에서 트레이드오프가 존재하지만, 핵에너지는 최선의 선택으로 보임

익숙해질 것: 드론

     * 레이더, 제트 엔진, 핵에너지, GPS, 혈액 은행과 같은 주요 기술은 전쟁 중에 개발
          + 우크라이나 전쟁 초기, 러시아의 국방 예산은 우크라이나의 10배, 군대 규모는 5배였으나, 드론이 이러한 격차를 좁힘
          + 드론은 이번 분쟁에서 탄생한 최고의 기술 혁신
     * 드론은 지속적인 감시 및 정밀 타격 가능
          + 전통적인 비용 대비 극히 저렴한 비용으로 운영
               o 예: $400 드론이 $400만 탱크를 파괴하며 100,000%의 투자 수익률 달성
     * 3D 프린팅, AI, 마이크로 카메라 기술이 결합하여 다윗과 골리앗 속편이 탄생(드론 기술 발전 가속)
     * 드론을 최종 배송(last-mile delivery), 구조 활동, 제조 및 농업의 모니터링 및 유지보수에 사용하는 것은 상당한 경제적 이익 을 가져올 것

머스크의 Warner Bros. Discovery/CNN 또는 다른 주요 미디어 기업 인수 가능성

     * WSJ는 머스크가 케타민에 중독되었다고 보도했지만, 그의 진짜 중독은 ""관심(Attention)""
          + 그는 자신의 순자산 10%($44b)로 Twitter를 인수하여 대중의 지속적인 주목을 확보
     * WBD(워너 브라더스 디스커버리)의 시장 가치는 $26b (부채 포함)
          + AT&T의 CEO 존 스탠키는 WBD 매각 조건으로 단일 주식 클래스를 설정, 이를 통해 기업 매각 프리미엄을 극대화할 계획
          + 이러한 조건으로 인해 WBD는 인수 가능한 상태로 간주됨
     * 머스크는 트럼프와의 결별 및 대중의 피로 증가로 인해 그의 주목도가 감소
          + 머스크는 미디어 인수를 통해 다시 뉴스의 중심에 서려는 가능성 있음
          + MSNBC를 인수할 수도

투자 기회: 신흥 시장

     * 2023~2024년 동안 S&P 500이 +56%, Vanguard’s All-World ex-U.S. index ETF는 +23% 기록
     * 역사적으로 미국 주식이 하락할 때 신흥 시장은 상승하는 경향이 있으며, 이러한 주기는 보통 10년간 지속
     * 미국 주식 시장이 글로벌 시장 가치의 50% 를 차지
          + 주가가 너무 비싸질 경우 수익률이 하락하고, 자본은 더 높은 수익을 찾아 다른 시장으로 이동
     * 연준의 금리 인하 이후 신흥 시장은 27% 초과 수익을 기록하는 경향이 있음
          + 인도, 인도네시아 등 개발도상국에서 노동 연령 인구가 증가
          + 기관 자본의 신흥 시장 투자 비율이 현재 주기적으로 낮은 수준
          + 평균 회귀가 발생할 경우, 약 $9,100억이 신흥 시장으로 유입될 전망
     * 트럼프는 모든 수입품에 10~20% 관세, 중국 제품에는 60~100% 관세를 부과할 것을 제안
          + 관세는 ""세금""과 같아 인플레이션 조짐이 보이면 행정부와 공화당 의원들이 이를 제어할 가능성이 높음
          + 크리스마스 선물의 90%가 중국에서 온다는 사실을 깨달으면 공화당 내 반발 가능

플랫폼: YouTube

     * 스트리밍 전쟁의 승자는 Netflix가 아니라 YouTube
          + YouTube는 콘텐츠 제작 비용이 0달러, 대신 창작자와 수익을 공유하는 구조
          + 지난해 TV 시청의 10% 를 차지한 최초의 스트리밍 플랫폼
     * 81% 의 Gen Alpha(2010년대 이후 출생) 사용자가 최근 YouTube를 시청했다고 답변
          + 구독형 스트리밍 서비스 시청은 62% , TikTok 시청은 44% 에 그침
          + 미국 및 영국의 8~12세 어린이 중 3분의 1이 YouTube를 1순위 직업으로 선택 (영화 배우는 목록에 없음)
     * YouTube는 1위 팟캐스트 플랫폼으로, 다른 스트리머들이 갖지 못한 추가 성장 동력 확보
          + Alphabet이 YouTube를 분사할 경우, 기업 가치는 약 5천억 달러로 평가 가능
          + Netflix의 현재 시장 가치 3500억 달러를 훨씬 초과

미디어: 팟캐스트

     * 팟캐스트는 Meta, TikTok, Alphabet, Reddit과 비슷한 속도로 성장하는 광고 기반 매체
          + 약 320만 개의 팟캐스트 중, 매주 콘텐츠를 발행하는 팟캐스트는 60만 개이며, 이 중 경제적으로 지속 가능한 팟캐스트는 600개로 추정
     * 상위 10개 팟캐스트가 전체 청취율의 35% 를 차지
          + 예: 도널드 트럼프가 Joe Rogan 팟캐스트에 출연해 도달한 청중은 Kamala Harris가 주요 TV 네트워크(CNN, Fox, MSNBC)에 2주간 매일 출연해야 겨우 도달 가능한 수준
     * 팟캐스트가 얻는 주목도는 광고 수익의 비중을 훨씬 초과하며, 이 격차는 점차 좁아질 전망
     * 2025년엔 팟캐스트 광고 매출이 20% 이상 성장할 것으로 예상
          + 청취자 수 증가와 함께 ARPU(가입자당 평균 수익)도 Meta와 Alphabet처럼 크게 상승할 전망
          + 이는 광고주들이 젊고 성공적인 소비자가 팟캐스트에 집중되어 있음을 깨닫는 데 따른 결과

IPO 기대주: Shein (본인도 투자자임)

     * 1/3의 Gen-Z 소비자가 Shein과 같은 패스트 패션에 ""중독""되었다고 응답
          + 전통적인 소매업체는 주당 100개의 새로운 스타일을 출시, 패스트 패션 업체는 일일 100개의 스타일을 선보임
          + Shein은 이를 훨씬 넘어 하루 7,000개 스타일을 출시
     * Shein은 공장, 트럭, 매장 소유 없이 IP 기반 비즈니스로 운영
          + 사이트 활동을 추적하고, 수요를 조정할 수 있는 공장에 주문을 보내며, 이를 기반으로 물류를 실행
          + 반품 없음: 제품이 매우 저렴해 소비자들이 반품을 꺼리는 점이 소매업체의 주요 비용 요소를 제거
     * Shein은 Airbnb, Nvidia, Uber와 같은 다른 자산 경량화 모델과 유사함
          + Shein의 직원당 수익은 기존 소매업체를 압도적으로 능가

비즈니스 트렌드: M&A(인수합병)

     * 사모펀드의 대기 자금(할당되지 않은 자본)은 2003년 이후 8배 증가하여 4조 달러에 도달
          + 기업 현금 보유액 총합은 4.1조 달러, 미국 GDP는 약 27조 달러
     * 2022년 미국의 평균 M&A 딜 완료 시간은 161일, 2018년 대비 14% 증가
          + 10억 달러 이상의 거래에서는 평균 완료 시간이 323일로 66% 증가
     * 지난 4년간 Lina Khan의 적극적인 반독점 집행 및 바이든 행정부의 209개의 주요 규제가 발표됨
          + 이는 1980년대 레이건 이후 가장 높은 수치
          + 정치적 변화는 M&A 환경에 큰 영향을 미침
     * 트럼프 행정부는 M&A에 대해 더 우호적일 가능성이 있음
          + 주요 거래 참여 예상 기업: Comcast, Uber, Musk(위에서 얘기한 그 사람!)
          + Intel 또는 Boeing을 누군가 인수해서 비공개로 전환할 가능성 도 있다고 봄

기술 운동: 휴대폰 금지

     * 우리가 이 시대를 되돌아볼 때 가장 후회할 일은 아이들이 중독자가 되도록 방치한 것
          + 소셜 미디어는 중독 물질, 휴대폰은 그 전달 기제
     * 평균적으로, 청소년은 하루에 237개의 알림을 받음
          + 한 연구에 따르면, 97%의 학생이 학교 시간 동안 휴대폰을 사용하며, 43분의 중간값 기록
          + 이로 인해 미국의 청소년 대부분이 매일 수업 시간의 10%를 놓침
     * 학생들에게 무제한적인 휴대폰 접근을 허용하는 것은 교육적으로 큰 실수임
          + 휴대폰 금지는 교육적 정상화로의 복귀로 간주됨
     * 18개 주에서 학교 내 휴대폰 사용 제한법 제정
          + 약 4분의 3의 학교가 교실에서 휴대폰 사용을 제한하는 정책 도입
     * 양당의 동의로 규제가 이루어지는 점에서 희망적인 변화 임
          + 휴대폰 금지한 학교들은 시험 점수가 6% 향상 되었다는 연구도 있음

화학: 테스토스테론

     * 여성들은 사회적으로 두각을 나타내고 있는 반면, 젊은 남성들은 서구 민주주의 내에서 가장 급격히 추락
          + 20~24세 남성 중 학교나 직업에 속하지 않은 비율이 1980년 이후 3배 증가
          + 남성의 노동 참여율은 90% 이하로 하락
          + 실질 임금은 1970년 대비 시간당 $3 감소
     * 지난 20년간 미국에서 발생한 ""절망으로 인한 추가 사망자"" 는 414,000명, 이는 2차 세계대전 사망자(407,000명)를 초과
          + 이는 결혼 위기로 이어지며, 여성은 일반적으로 동등하거나 더 높은 사회경제적 지위를 가진 사람과 결혼하는 경향
          + ""수평적-상향적"" 결혼 대상이 줄어들면서 결혼 기회 감소 및 남성들의 규제 없는 행동이 증가함
     * 2024년 선거는 어려움을 겪는 젊은 세대, 특히 젊은 남성들에 관한 것이었음
          + 트럼프 캠페인은 젊은 남성을 타깃으로 하여 조잡한 언어, 암호화폐, Joe Rogan, UFC, Hulk Hogan과 같은 요소를 활용
          + 트럼프는 젊은 남성들 사이에서 15% 지지율 증가, 이는 모든 연령대 중 가장 큰 변화
          + 45~64세 여성들 사이에서도 큰 지지율 증가가 있었으며, 이는 어려움을 겪는 젊은 남성의 어머니들로 추정
     * 미국은 이번에 T 대통령을 선출함: T는 테스토스테론
          + 이번 선거는 원래 여성 권리에 대한 국민투표로 여겨졌으나, 실제로는 어려움을 겪는 젊은 남성들에 관한 국민투표

2025년은 당신에게 멋진 한 해가 될 것

     * 목표를 글로 쓰면 40% 더 가능성이 높아짐
     * 사랑하는 사람들과 풍요로운 시간을 보내기를 기원

2024 예측 결과표

  올바른 예측 (✔️)

     * 여행 관련 주식 상승세 지속
     * Paramount와 Disney의 합병
     * TikTok이 Netflix와 Spotify에 압박 가함
     * 올해의 기술: GLP-1들
     * 인도가 새로운 중국이 됨
     * Reddit, 2024년 IPO 성공
     * Meta의 다음 성장 동력은 WhatsApp
     * AI의 가장 큰 영향은 '외로움'
     * 미국 인플레이션이 연준 목표치인 2.5%에 도달

  부분적으로 맞거나 아직 결과가 확정되지 않은 예측 (∼)

     * 알파벳이 주요 기술 주식으로 부상
     * 일론 머스크가 Twitter의 통제권을 상실하거나 매각

  틀린 예측 (❌)

     * 주택 판매 호황
     * 스트리밍 후발주자 주식 상승(디즈니,워너 브라더스 디스커버리)
     * AI 관련 기업 가치가 시장 평균을 밑돔
     * 사우디아라비아와 이스라엘 관계 정상화
     * 미국과 중국 관계 개선
     * 바이든 재선, 트럼프 형량 확정

   OpenAI랑 Nvidia가 세상을 접수했고, 점점 SF 영화에서 보던 세상이

   기술 운동과 화학:테스토스테론 부분이 굉장히 흥미롭네요..

   그러게요. 저도 그 파트 흥미롭게 봤습니다
   한국과 닮은 부분이 있는 것 같기도 합니다.

   스콧 갤러웨이의 2024년 예상

   오오 2024년 틀린 예측, 맞춘 예측 보여주는 거 너무 좋아요! ㅋㅋ 😁

   개인 적인 느낌은...
   메이저는 틀리고, 마이너는 맞춘 느낌이에요 ㅠㅠ
"
"https://news.hada.io/topic?id=18887","Show GN: 세일정보 모아보는 서비스 sale archive","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 세일정보 모아보는 서비스 sale archive

   안녕하세요, 개발자 여러분.

   최근에 개인적으로 필요해서 재미 삼아 ‘세일 아카이브’라는 웹사이트를 만들어봤습니다.
   이 사이트는 패션 브랜드와 식료품 관련 세일 정보를 한곳에 모아서 볼 수 있도록 구성했어요.
   평소에 할인 정보를 여기저기 찾아보는 게 번거롭다고 느끼셨다면, 한 번쯤 방문해 보셔도 좋을 것 같습니다. 😊

   저는 천 명의 사용자를 모으는 것을 작은 목표로 삼고 있는데
   한번 둘러보시고 피드백 주신다면 좋을 것 같습니다.
   본업이 웹이 아니라 많이 부족합니다..
   사용해 보시고 불편한 점이나 추가되었으면 하는 기능이 있다면 언제든 말씀해 주세요.

   https://salearchive.net

   재미로 시작한 프로젝트지만, 많은 분들께 도움이 되었으면 하는 마음입니다.
   감사합니다!

   firebase로 프로젝트를 구성했는데
   생각보다 호스팅비용과 디비 비용이 상당히 나가더라구요...

   가능하다면 이런 비용을 줄일만한 팁도 부탁드립니다!

   비용을 얼마정도 쓰고 계신지 궁금합니다 :eyes:

   파이어베이스 환경에서 월 15000원정도 나오고있습니다.
   지금 바쁜일이 해결되면
   수파베이스로 옮겨볼 생각입니다 ㅜㅜ

   음 많이 나오는건지 적게 나오는건지 헷갈리네요 ㅋㅋ 비용 구조가 구체적으로 어떻게 되는지 얘기해 주실 수 있으면 뭔가 아이디어를 내 볼 수도 있을 것 같습니다!

   supabase 같은 거 써보시면 어떨까요?

   supabase가 firebase랑 거의 같지 않나요? 비용차이가 있을까요..?

   https://supabase.com/docs/guides/platform/compute-and-disk
   로컬 pgsql에 데이터 적재해보시고 조건에 만족하는 인스턴스 사이즈를 판별하시면 될 것으로 보입니다. 다만 Supabase에 정적 사이트 호스팅 기능이 없어서 프론트엔드를 별도로 배포하셔야 하는 제약사항이 있습니다

   원피스 카테고리에 신발이 노출됩니다

   카테고리 분류를 상품이름으로 하는데 뭔가 오류가 있는것 같네요!

   카테코리 신발을 클릭 했는데 하의가 같이 나오는 것 같아요

   카테고리 분류를 상품이름으로 하는데 뭔가 오류가 있는것 같네요!
"
"https://news.hada.io/topic?id=18836","콜 오브 듀티 안티치트 리버스 엔지니어링 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       콜 오브 듀티 안티치트 리버스 엔지니어링 분석

콜 오브 듀티 안티치트 리버스 엔지니어링

     * 소개
          + Black Ops Cold War의 사용자 모드 안티치트를 연구한 결과를 공유함.
          + Treyarch의 게임으로, TAC(Treyarch Anti-Cheat)로 지칭함.
          + 최신 게임과의 주요 차이점은 커널 모드 드라이버의 유무임.

  Arxan

     * Arxan의 역할
          + Call of Duty 게임에서 사용되는 난독화/보호 도구.
          + 실행 파일을 암호화하고, 디버거나 체크섬 불일치를 감지하면 프로세스를 종료함.

  런타임 실행 파일 암호화

     * 실행 파일 보호
          + 게임 실행 파일은 패킹 및 암호화되어 있으며, Arxan이 이를 해제 및 복호화함.

  실행 파일 체크섬

     * 체크섬 감시
          + Arxan은 실행 파일의 패치를 지속적으로 감시함.

  Jmp 난독화

     * 함수 난독화
          + 함수와 명령어를 jmp로 분리하여 분석을 어렵게 만듦.

  진입점 난독화

     * 진입점 보호
          + Arxan 보호 게임의 진입점을 따라가기 어려움.

  포인터 암호화

     * 포인터 보호
          + 중요한 포인터는 사용 전마다 암호화 및 복호화됨.

  TAC의 모니터링 감지 방법

     * API 훅 감지
          + TAC는 Windows API를 사용하여 안티치트를 수행하며, 특정 패턴을 감지함.

  런타임 API 내보내기 조회

     * API 조회
          + TAC는 모듈 해시와 API 이름 해시를 사용하여 API를 조회함.

  디버그 레지스터

     * 디버그 레지스터 감지
          + TAC는 디버그 레지스터를 감지하여 프로세스를 종료함.

  드라이버 서명 강제

     * 테스트 모드 감지
          + Windows의 테스트 모드를 감지하여 계정을 플래그 처리함.

  TAC의 프로세스 종료 방법

     * 프로세스 종료
          + TAC는 두 가지 방법으로 프로세스를 종료하며, 레지스터를 초기화함.

  치트 로깅 감지

     * 콘솔 할당 감지
          + 콘솔 창이 할당되었는지 확인하여 치트를 감지함.

  시각적 요소 감지

     * ESP 및 UI 감지
          + DirectX 12를 사용하여 화면에 그리는 치트를 감지함.

        Hacker News 의견

     * 제품 기능을 판매 후 제거하는 것에 대한 법적 규제가 필요함. 특히 계약이나 EULA에 의해 기능이 제거되는 경우, 게임 소유자에게 환불이 필요함. Steam에서의 구매 무효화는 법적으로 불가능해야 하며, 계정 로그인 제한 시에도 아이템과 인벤토리는 거래 가능해야 함. 멀티플레이어 게임에서 윤리 강령을 시행하려면 게임에 대한 요금을 부과할 수 없으며, 금지 조치는 비례성을 따라야 하고, 인간이 참석하는 비용 제한된 항소 재판 시스템이 필요함
     * Activision과의 2년간의 법적 싸움에서 부당한 영구 금지를 뒤집음. Activision은 부정행위에 대한 증거 없이 패배함
     * 게임을 플레이하지 않지만 파트너가 플레이함. 지하에 있는 플레이어를 관전하는 것을 보았으며, 클라이언트가 해킹되거나 부정행위를 하는 경우에도 서버 측에서 플레이어 상태가 유효한지 확인해야 함
     * 점프 난독화에 대해 궁금함. 무조건적인 점프가 충분히 흔해서 사전 조건으로 필터링할 수 없는지 궁금함. 함수의 끝을 찾는 것이 쉬울 것 같은데, 스택을 분석하여 함수가 반환되는 위치를 알고, 반환 주소 직전에 호출을 찾는 방법이 있는지 궁금함
     * 이 기술을 어디서 배웠는지 궁금함. 이 기사 내용의 절반을 이해하고 싶지만 시작하는 방법을 모름
     * 인기 있는 Horde/Alliance 기반 MMO 게임에서 리버스 엔지니어링을 조금 해봤으며, 거의 동일한 단계(FNV32 내보내기 해시 포함)를 따름. 매우 유사한 트릭을 사용하는 것 같음. 동일한 보호를 사용하여 패킹되었는지 궁금함
     * 뛰어난 연구 작업임. 분명히 저자의 첫 경험이 아님
     * 메모리를 읽고 쓸 수 있는 한, FPS 게임에서 온라인 부정행위를 막을 수 없음
     * 시그니처 스캐닝은 리버스 엔지니어링의 가장 중독적인 부분임. 시그니처 목록을 작성하고, 스크립팅 언어에 바인딩을 작성하여 함수 포인터를 호출함. 많은 서드파티 모드 플랫폼이 작동하는 기초임
     * 멀티플레이어 게임에서의 부정행위는 큰 문제로, 주요 FPS 게임에서 신뢰를 파괴함. CS 플레이어로서 새로운 CoD 게임을 잠시 플레이했지만, 부정행위로 인해 추천할 수 있는 게임이 없음. Escape From Tarkov와 같은 게임은 부정행위로 인해 총의 총열을 훔치고 게임/PC를 강제로 종료시킴. Counter-Strike의 경쟁 게임 모드는 게임 내에서 부정행위 광고 섹션으로 작용함. Valorant는 침해적인 안티치트로 다른 게임보다 우수하지만, 팬들이 주장하는 것만큼 깨끗하지 않음. Counter-Strike의 프라이빗 매치메이킹 산업은 안티치트와 프로 수준의 플레이를 약속으로 구축됨
"
"https://news.hada.io/topic?id=18792","Show GN: 키우는 고양이와 채팅하는 웹앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show GN: 키우는 고양이와 채팅하는 웹앱

   저희집 고양이 역할을 하는 봇과 대화하는 작은 프로젝트입니다.

   프롬프트는 아내가 만들고 껍데기는 제가 supabase + expo로 만들어 firebase hosting에 올렸습니다. 이번에도 역시 Cursor 에디터가 많은 도움을 주었습니다.

   URL은 스크린샷과 링크를 포함한 저희 고양이들의 트위터 글을 걸었습니다.

   주요 기능과 만들때 사용한 방법들입니다.
     * Expo 기반 React Native Web App
     * Cursor Compose 기능으로 주요 화면과 기능 제작
     * Supabase를 백엔드로 사용
          + AI 응답 처리
          + 사용자와 쌓은 기억 저장
          + 가입시 이메일 인증 기능
          + 탈퇴시 사용자의 모든 데이터 삭제
          + 선물하기에 보여줄 상품 데이터 저장
     * 웹 앱 호스팅은 Firebase를 사용
     * 대화 내용은 서버에 저장하지 않고 사용한 브라우저 LocalStorage에 저장

   원문: https://plan9.kr/bum-talk
"
"https://news.hada.io/topic?id=18874","Tailwind CSS v4.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Tailwind CSS v4.0 출시

     * Tailwind CSS v4.0 출시
          + 성능과 유연성을 최적화한 새로운 버전으로, 최신 웹 플랫폼의 발전을 최대한 활용함
          + 새로운 고성능 엔진으로 전체 빌드 속도가 최대 5배, 증분 빌드 속도가 100배 이상 빨라짐
          + 최신 CSS 기능을 활용하여 현대 웹에 맞게 설계됨
     * 새로운 고성능 엔진
          + Tailwind CSS v4.0은 프레임워크의 전면적인 재작성으로, 아키텍처를 최적화하여 속도를 극대화함
          + 증분 빌드가 100배 이상 빨라져 마이크로초 단위로 완료됨
     * 현대 웹을 위한 설계
          + 네이티브 캐스케이드 레이어, 등록된 사용자 정의 속성, color-mix() 등 최신 CSS 기능을 활용함
          + 논리적 속성을 사용하여 RTL 지원을 간소화하고 생성된 CSS 크기를 줄임
     * 간소화된 설치
          + 설치 과정이 간소화되어 의존성이 줄어들고, CSS 파일에 한 줄의 코드만 추가하면 됨
          + 외부 플러그인 없이도 @import 규칙을 기본 제공함
     * Vite 플러그인
          + Vite 사용자는 @tailwindcss/vite를 사용하여 Tailwind를 통합할 수 있음
          + Vite 플러그인을 사용하면 성능이 더욱 향상됨
     * 자동 콘텐츠 감지
          + 템플릿 파일을 자동으로 감지하여 구성 필요 없음
          + .gitignore 파일에 있는 항목을 자동으로 무시하여 불필요한 스캔을 방지함
     * 내장된 import 지원
          + @import를 사용하여 다른 CSS 파일을 인라인으로 가져올 수 있음
          + Tailwind CSS에 최적화된 import 시스템으로 성능을 더욱 향상시킴
     * CSS 우선 구성
          + JavaScript 대신 CSS에서 프로젝트를 구성할 수 있음
          + tailwind.config.js 파일 없이 CSS 파일에서 직접 사용자 정의 가능
     * CSS 테마 변수
          + 디자인 토큰을 CSS 변수로 제공하여 런타임에 쉽게 참조 가능함
     * 동적 유틸리티 값 및 변형
          + 다양한 유틸리티와 변형이 임의의 값을 수용할 수 있도록 간소화됨
          + 그리드 크기나 사용자 정의 데이터 속성을 쉽게 설정 가능함
     * 현대화된 P3 색상 팔레트
          + 기본 색상 팔레트를 rgb에서 oklch로 업그레이드하여 더 생생한 색상 제공
     * 컨테이너 쿼리
          + 컨테이너 크기에 따라 요소를 스타일링할 수 있는 API를 기본 제공함
     * 새로운 3D 변환 유틸리티
          + 3D 공간에서 요소를 변환할 수 있는 API 추가
     * 확장된 그라디언트 API
          + 선형, 원뿔형, 방사형 그라디언트를 생성할 수 있는 유틸리티 추가
     * @starting-style 지원
          + JavaScript 없이 요소가 처음 표시될 때 속성을 전환할 수 있는 기능 추가
     * not- 변형*
          + CSS :not() 가상 클래스 지원 추가
     * 추가된 새로운 유틸리티 및 변형
          + inset-shadow-*, field-sizing, color-scheme 등 다양한 새로운 유틸리티와 변형 추가

   Tailwind CSS v4.0은 성능과 유연성을 극대화한 최신 버전으로, 다양한 새로운 기능과 개선 사항을 제공함.

        Hacker News 의견

     * Tailwind v4의 발전에 대해 긍정적으로 평가하며, CSS 변수와 CSS-only 설정을 지원하는 점이 큰 장점임. Tailwind가 이제는 유틸리티로서의 역할을 잘 수행하고 있다고 봄
     * CSS는 과거보다 사용자 친화적으로 변했으며, 스타일 속성을 직접 HTML에 사용하는 것이 더 간단할 수 있음. 그러나 일부는 여전히 스타일 속성을 피하고자 함
     * Tailwind를 사용하여 스타일을 한 곳에서 읽을 수 있는 점이 좋음. 긴 클래스명은 있지만, 스타일을 쉽게 수정할 수 있어 유용함
     * Tailwind를 처음 접했을 때는 CSS를 다시 배워야 한다는 점이 부담스러웠음. 그러나 팀 작업과 확장성 측면에서 유용하다는 점을 이해함. 여전히 기본 스타일 시트를 선호함
     * Tailwind를 사용한 프로젝트에서 직관적이고 문서화가 잘 되어 있어 좋았음. 스타일 이름을 고민할 필요가 없어 시간 절약에 도움을 줌
     * Tailwind의 최신 업데이트로 빌드 시간이 줄어들고, JS 설정이 필요 없어졌음. CSS가 이제 대부분의 작업을 수행할 수 있게 되었음
     * Tailwind를 사용해보려 했으나, Bootstrap보다 결과물이 좋지 않음. 디자이너가 되지 않고도 괜찮은 결과물을 얻는 방법을 고민 중임
     * Tailwind의 깔끔하지만 일반적인 디자인이 널리 퍼져 있음. Tailwind의 인라인 스타일의 장점과 한계를 보여줌
     * Tailwind v4로의 업데이트가 기존 앱에 영향을 미쳤음. 호환성 문제로 인해 v3를 계속 사용하거나 빌드 스크립트를 수정해야 하는 상황임
"
"https://news.hada.io/topic?id=18881","국내 증권사 CES 2025 리포트 파일 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       국내 증권사 CES 2025 리포트 파일 모음

     * IBK 투자증권 : AI into Real Life
     * iM증권 : Physical AI, 혁신을 주도하다
     * 대신증권 : AI, 모빌리티가 Life로 들어오다
     * 삼성증권 : 자율주행, 불신지옥
     * 미래에셋 : AI 생태계 확장으로 더 가까워진 의료서비스
     * 신한투자증권 : CES2025 - 가장 빠른 한걸음
     * 유안타증권 : 인연과 가능성의 확장
     * 키움증권 : AI Phase 2 - Monetization
     * 하나증권 : 이제 다시 보이는 것으로
     * 한화투자증권 : 물리적 AI시대를 대비

   감사합니다 😊
"
"https://news.hada.io/topic?id=18913","2025년 Home Assistant 활용 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2025년 Home Assistant 활용 방법

     * Home Assistant 사용 경험
          + 약 7년 전 작은 아파트에서 Home Assistant를 사용하기 시작함.
          + 초기에는 IKEA Smart Hub를 사용하여 조명을 제어했으며, 이후 온도 및 습도 센서와 같은 맞춤형 하드웨어를 구축함.
          + 장치와 자동화가 많아지면서 Raspberry Pi에서 Home Assistant를 실행하는 것이 비효율적임을 깨달음.
          + 데이터베이스 문제로 인해 VM으로 이전하고 MySQL 및 InfluxDB 서버를 설정함.
     * 새 집에서의 확장
          + 집으로 이사하면서 Home Assistant 설치가 크게 확장됨.
          + 100개 이상의 장치가 연결되어 있으며, 대부분 IKEA 스마트 조명임.
     * 적응형 조명
          + 초기에는 Flux를 사용했으나, 현재는 HACS를 통해 제공되는 Adaptive Lighting 통합으로 전환함.
          + 이 시스템은 색온도와 밝기를 더 잘 제어할 수 있음.
          + 조명 그룹을 대상으로 할 수 없고, 각 조명 엔티티를 명시적으로 나열해야 하는 불편함이 있음.
          + IKEA 전구의 기능이 다르기 때문에 별도의 설정이 필요함.
     * Cursor를 사용한 설정 속도 향상
          + Cursor라는 AI 코딩 도우미를 사용하여 Home Assistant의 YAML 설정을 처리함.
          + 커스텀 파서를 작성하여 조명의 종류를 분석하고 디버깅 정보를 제공함.
          + Cursor를 사용하여 새로운 Adaptive Lighting 시스템을 위한 YAML을 생성함.
     * IKEA 전구 설정
          + 다양한 IKEA 전구 유형에 대한 최적의 적응형 조명 설정을 제안함.
          + 각 전구 유형에 따라 밝기 및 색온도 설정을 조정함.
     * 다음 단계: 스마트 TRV
          + 스마트 TRV(온도 조절 밸브)를 사용하여 각 방의 온도를 최적화할 계획임.
          + Zigbee 네트워크에 TRV를 연결하고 Nest 온도계에서 데이터를 가져와 자동화를 설정할 예정임.
     * 결론
          + Adaptive Lighting의 성공적인 구현에 만족하며, AI 코딩 도우미를 활용하여 YAML 파일의 복잡성을 관리함.
          + 다음 도전 과제는 스마트 라디에이터 밸브로, 조명 자동화와 같은 수준의 온도 제어를 목표로 함.

        Hacker News 의견

     * Home Assistant 창립자가 프로젝트와 Open Home Foundation에 대한 질문을 받음. KNX 시스템을 사용한 경험을 공유하며, 스마트폰으로 조명을 제어하는 것이 더 복잡하게 만들 뿐임을 언급함
          + 유용한 자동화로는 자동 블라인드, 모션 센서, 야간 모드 등이 있음
          + KNX의 저수준 기능은 중앙 허브가 필요 없지만, 고수준 기능은 추가적인 스마트함이 필요함
     * Home Assistant를 취미로 즐기는 사용자가 있음. 오픈 관리 플랫폼을 선호하며, 클라우드를 사용하지 않고도 좋은 자동화를 유지할 수 있을 것이라고 생각함
     * 자동화 수준을 낮추려는 사용자가 있음. 스마트 전구의 복잡함과 불편함을 경험하며, 단순한 아이디어를 과도하게 생각한 것 같다고 느끼고 있음
     * 스마트 기능이 추가적이어야 하며, 집과의 상호작용 방식을 바꾸지 않아야 한다고 생각하는 사용자가 있음
          + 모션 센서와 TRV를 사용하여 스마트 기능을 구현함
          + 스마트 전구 대신 릴레이를 사용함
     * Home Assistant의 하드웨어와 SQLite 사용에 대한 의견이 있음. 많은 센서 데이터가 SQLite에 부담을 줄 수 있지만, 설정 문제일 가능성이 높다고 봄
     * Home Assistant의 가능성을 좋아하지만, 많은 장치를 관리하는 것이 부담이 될 수 있다고 느끼는 사용자가 있음
     * Home Assistant를 독립적으로 운영하기 위해 전용 하드웨어를 구입한 사용자가 있음
          + BLE 온도 센서와 Z-Wave TRV를 사용하여 난방을 자동화함
          + Circadian Lighting을 사용하여 조명을 자동화함
     * Home Assistant에 100개 이상의 장치를 연결한 사용자가 있음. 스마트 장치의 운영 유지 관리가 번거로워 전통적인 방식으로 돌아가고 싶다고 느끼고 있음
"
"https://news.hada.io/topic?id=18907","어셈블리어로 처음부터 개발된 홈브루 운영체제 Snowdrop OS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  어셈블리어로 처음부터 개발된 홈브루 운영체제 Snowdrop OS

소개

     * Snowdrop OS는 IBM PC 아키텍처를 위한 16비트 실모드 운영체제임.
     * x86 어셈블리 언어로 처음부터 설계 및 개발되었음.
     * 파일 관리자, 텍스트 편집기, 그래픽 애플리케이션, BASIC 인터프리터, x86 어셈블러 및 디버거 등 다양한 유틸리티 포함.
     * DOS 게임을 포팅하여 게임도 제공함.
     * 플로피 디스크 이미지와 CD-ROM 이미지로 배포되며, 하드 디스크에 설치 가능함.

소스 코드

     * 부트 로더는 512바이트에 압축되어 커널을 로드함.
     * 커널은 애플리케이션에 기본적인 서비스와 추상화를 제공함.
     * 그래픽 및 GUI 프레임워크는 마우스 기반의 그래픽 애플리케이션을 만드는 데 필요함.
     * x86 어셈블러는 Snowdrop OS 내에서 저수준 애플리케이션을 생성하는 데 사용됨.
     * BASIC 인터프리터는 고수준 애플리케이션을 빠르게 만드는 데 유용함.
     * x86 디버거는 어셈블러와 함께 사용 가능함.
     * 동적 데이터 구조 라이브러리는 연결 리스트, 트리, BST 등을 다루는 데 사용됨.

버전

     * v1: 초기 버전, 단일 작업, 쉘, aSMtris
     * v2: PS/2 마우스 드라이버 및 테스트 앱
     * v3: 기본 멀티태스킹 및 가상 디스플레이 지원
     * v4: FAT12 드라이버 쓰기/삭제, 파일 관리자, 텍스트 편집기
     * v5: 직렬 포트 드라이버, 포맷 유틸리티, 파일 복사 지원
     * v6: 멀티플레이어 스네이크 게임 (직렬 포트 사용)
     * v7: 슬라이드 쇼 프레젠테이션 앱
     * v8: ""메모리 유지"" 작업 수명 모드
     * v9: 병렬 포트 드라이버, BMP 이미지 지원, 스프라이트
     * v10: 시스템 타이머 주파수 변경
     * v11: 애니메이션 스프라이트, 사운드 드라이버 (내부 스피커)
     * v12: 키보드 드라이버
     * v13: 스프라이트 기능 추가, Storks 게임
     * v14: 커널 구성, 프로그램 인수, 파일 유틸리티
     * v15: 16x2 LCD 컨트롤러 앱, 텍스트 편집기 수정
     * v16: GUI 프레임워크
     * v17: Snowmine (지뢰찾기 유사 게임)
     * v18: BASIC 인터프리터 및 링커
     * v19: 하드 디스크 설치
     * v20: BASIC 및 텍스트 편집기 개선
     * v21: BASIC과 GUI 프레임워크 통합
     * v22: x86 어셈블러, 멀티 디스크 지원, 파일 보기 유틸리티
     * v23: x86 디버거
     * v24: 서비스 로딩
     * v25: 동적 메모리 및 데이터 구조
     * v26: 설치 프로그램 개선, 가상 마우스 드라이버
     * v27: 커널 및 작업 간 메시징
     * v28: GUI 고해상도, 드로우 애플리케이션, 데스크톱 애플리케이션
     * v29: 데이터 압축, 행맨 게임
     * v30: 가상 마우스 드라이버 개선
     * v31: 런타임 라이브러리 (RTL), BASIC 인터프리터 RTL

        Hacker News 의견

     * 90년대 중반에 32비트 취미 GUI OS를 개발했으며, 관련 책이 필수적이었음
          + 책 링크: Developing 32-Bit Operating System
     * MenuetOS와 KolibriOS를 추천하며, MenuetOS는 x64 버전과 SMP를 지원하지만 소스가 공개되지 않음
     * 최신 운영체제 디자인의 멋진 아이디어에 대한 관심을 표명함
          + 사용자와 OS 해커의 관점에서의 아이디어를 궁금해함
     * 로봇 공학을 위한 성능 좋은 RTOS의 발전에 대한 관심을 표명함
          + ROS/ROS2는 운영체제가 아니며, 성능 소프트웨어로 분류되지 않음
     * Snowdrop OS라는 어셈블리 언어로 작성된 홈브루 운영체제에 대한 언급
          + 관련 링크: Snowdrop OS
     * x86 어셈블리로 작성된 Snowdrop OS에 대한 칭찬
          + V32, BASIC 컴파일러에 대한 언급
     * ESP32에 포팅된 기본 GUI와 쉘 타입 OS를 보고 싶다는 의견
          + 현대적인 Commodore 64 경험을 제공하는 시스템을 희망함
     * ISO/IMG 파일을 제공하는 것에 대한 긍정적인 반응
          + SerenityOS도 이를 제공하기를 바람
     * MiSTer에서 실행된다는 점을 언급함
"
"https://news.hada.io/topic?id=18797","Show HN: 인터랙티브 Systemd – Systemd 유닛 작업의 개선된 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show HN: 인터랙티브 Systemd – Systemd 유닛 작업의 개선된 방법

     * isd는 systemd 유닛을 관리하는 더 나은 방법을 제공하는 도구로, 터미널 사용자 인터페이스(TUI)를 통해 유닛을 검색하고 미리보기를 자동으로 갱신하며, 스마트한 sudo 처리와 사용자 맞춤형 인터페이스를 제공함

  짧은 동기

     * isd는 systemd 유닛과 상호작용하는 데 필요한 복잡한 과정을 단순화하여 사용자에게 유용한 정보를 제공함
     * systemctl 명령어를 반복적으로 입력하는 번거로움을 줄이고, 자동으로 출력 결과를 갱신함

  설치

     * isd는 AppImage, nix, uv를 통해 설치 가능함
     * AppImage는 모든 Linux 배포판에서 실행할 수 있는 단일 실행 파일로, 권한이 제한된 원격 서버에서도 사용 가능함
     * nix 환경에서 isd를 설치하려면, nix 패키지를 사용하여 설치 가능함
     * uv는 Python 패키지 관리자로, uv를 통해 isd를 설치하고 관리할 수 있음

  isd 사용법

     * isd는 systemd 유닛을 검색하고 상태를 확인하며, 여러 유닛의 상세 정보를 미리보기로 제공함
     * 선택한 유닛에 systemctl 명령어를 보내고 상태 출력을 자동으로 갱신함
     * isd 내에서 pager를 열어 전체 상태 출력을 확인할 수 있음
     * Journal 출력에 대한 별도의 pager를 열 수 있으며, 사용자 맞춤형 테마와 키 바인딩을 설정할 수 있음

    사용자/시스템 모드

     * isd는 user 또는 system 모드로 실행되며, 각 모드에 따라 표시되는 유닛 유형이 달라짐

    퍼지 검색

     * 퍼지 검색 바를 통해 입력된 내용과 일치하는 모든 유닛과 유닛 파일을 로드하고, 현재 상태에 따라 강조 표시함

    여러 유닛 선택

     * 검색 결과 위젯에서 여러 유닛을 선택할 수 있으며, 선택된 유닛의 미리보기를 제공함

    명령 팔레트

     * 명령 팔레트를 열어 사용 가능한 모든 명령과 키 바인딩을 확인할 수 있음

    명령어

     * 예를 들어, Ctrl+O를 눌러 선택한 유닛을 중지할 수 있음

    페이저 지원

     * isd를 실행하면서 pager를 열어 전체 미리보기 출력을 확인할 수 있음

    사용자 맞춤화

     * isd는 사용자 맞춤화와 구성 가능성을 제공하며, 사용자가 최적의 생산성을 발휘할 수 있도록 다양한 테마와 키 바인딩을 제공함

    요약

     * isd가 유용할지 판단하기 위해 직접 사용해보는 것을 권장함

  다음 단계

     * 사용자 맞춤화 및 보안 섹션을 확인할 것

        Hacker News 의견

     * systemd 명령어가 직관적이지 않아 불편함을 느끼는 사용자가 많음. 특히, 명령어의 피드백이 부족하고, 디렉토리 구조가 복잡하여 혼란스러움
          + ""systemd/system"" 디렉토리 이름이 중복되어 불편함을 줌
          + 인터페이스가 인간 친화적이어야 하며, Linux가 여전히 재미있어야 한다고 주장함
     * systemd의 ExecStop 처리 방식이 혼란스러움
          + ExecStart는 서비스 시작 시 실행되는 명령어이며, ExecStop은 시작 명령어가 완료된 후 실행됨
          + RemainAfterExit=yes 설정을 통해 서비스 종료 시 원하는 기능을 수행할 수 있음
     * CLI 명령어 사용의 어려움을 느끼고, lazygit/lazydocker 같은 도구를 사용하여 시스템 상태를 더 잘 파악하게 됨
          + NixOS 사용자로서 서비스 발견, 가시성, 관리가 도움이 될 것이라고 생각함
     * systemd-client의 TUI가 Linux 외의 macOS, FreeBSD, Windows에서도 필요하다고 언급함
          + uv 도구를 사용하여 설치 시 문제가 있었으나, uv가 pip보다 빠르다고 평가함
     * uv를 사용하여 도구 설치가 쉬워졌으나, Python 종속성을 무시하는 설치 루틴이 필요함
          + Python 3.10에서 작동하지 않아 -p 3.13 옵션으로 해결함
     * systemd/dbus API 작업이 어려웠으나, 새로운 프로젝트를 시도해보고 배울 점이 있을 것이라고 기대함
     * systemd와의 상호작용이 대부분 사소한 작업임에도 불구하고, 사용성이 부족하다고 느끼며 TUI가 도움이 된다고 평가함
          + 시스템 상호작용을 자동화하여 불편함을 줄였다고 언급함
     * 원격 서버와 Docker 이미지에 설치할 수 없다는 점이 아쉬움
          + 로컬 설치 후 ssh 및 'docker exec' 명령어를 통해 원격 명령 실행을 원함
     * systemd를 좋아하지만, 설치 전 원격 호스트 연결 가능 여부를 궁금해함
          + systemctl --host <hostname> 명령어를 자주 사용함
     * 특정 서비스 이전에 다른 서비스를 실행하고 싶지만, 다른 서비스의 유닛 파일을 수정하지 않고 가능 여부를 궁금해함
"
"https://news.hada.io/topic?id=18835","YC 및 스타트업을 위한 이민 변호사 Peter Roberts의 AMA 세션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               YC 및 스타트업을 위한 이민 변호사 Peter Roberts의 AMA 세션

     * 저는 앞으로 3시간 동안 여기 있을 예정이며, 오후 4시 EST에 다시 3시간 동안 있을 예정임
     * 다양한 주제가 가능하지만, 최근 몇 달 동안 많은 질문을 받았기 때문에 새로운 행정부가 미국 이민법과 정책에 미치는 영향에 집중하고자 함
     * 특정 사례에 대한 법률 자문은 제공할 수 없으며, 사실에 기반한 논의에 집중해 주시길 바람
     * 질문과 댓글은 사실에 기반하여 작성해 주시길 부탁드림
     * 좋은 질문과 토론에 감사드리며, 잠시 휴식을 취한 후 약 한 시간 후에 돌아올 예정임
     * 오늘 AMA가 끝나기 전에 놓친 질문이 있다면, 내일 최대한 답변할 것임

        Hacker News 의견

     * Peter에게 감사 인사를 전하며, 과거 H1B 관련 질문을 통해 미국에서의 꿈을 이룰 수 있었음을 언급함
     * USCIS의 처리 지연에 대한 불만을 표하며, 결혼 비자 처리 기간에 대한 조언을 구함
          + Reddit에서는 USCIS 웹사이트 정보를 신뢰하지 말라고 함
          + Visa Journey에 따르면 약 15개월이 소요됨
     * H1B 비자를 가진 상태에서 직장을 잃은 상황에 대해 조언을 구함
          + 50일 내에 새 직장을 찾아야 하며, 인도 국적임
          + 출국 없이 시간을 벌 수 있는 법적 옵션을 찾고 있음
     * 미국에서 외국인 약혼자를 데려오는 기회에 대해 질문함
          + 소프트웨어 엔지니어링 배경을 가진 여성과의 데이트 상황에서 불안감을 느낌
     * 미국으로의 이주를 고려 중인 영국의 소프트웨어 엔지니어가 L1 비자와 H1B 비자에 대한 조언을 구함
          + L1 비자가 영주권으로의 경로를 제공하는지, H1B와의 차이점에 대해 질문함
     * 창업자가 미국으로 이주해야 효율적인지, 본국에서 회사를 운영할 수 있는지에 대한 질문
     * 영국을 떠나고자 하는 AI 코파일럿 개발자, 예외적 재능 비자에 대한 가능성을 질문함
     * O1A 비자의 이중 의도에 대해 이해하고자 하는 PhD 학생의 질문
          + EB2-NIW와 EB1A 승인 상태이며, O1A 비자의 이중 의도에 대한 우려를 표함
     * 오리건 주의 이민 관련 정책과 주 헌법의 관계에 대한 질문
          + 연방 정부의 명령과의 충돌 시 10차 수정헌법 문제로 발전할 가능성에 대해 질문함
"
"https://news.hada.io/topic?id=18875","CES 2024 혁신상 그 이후혁신상 그 이후

     * CES 2025에서 한국은 역대 최대 규모로 1,031개사가 참가
          + 참가 기업 수로 미국(1,509개), 중국(1,339개)에 이어 3위
          + 스타트업관 참가 기업 중 한국 기업은 625개사로 전체의 28% 차지
          + CES 2025 혁신상 수상 한국 기업은 151개사로 2년 연속 최다 수상 기록
     * CES는 단순히 기술과 제품을 선보이는 행사뿐 아니라 해외 진출의 발판으로 평가받음
          + 혁신상 수상 자체가 글로벌 성과로 주목받으나, 이를 사업적으로 연결하는 것은 별개의 과제

CES 2024 혁신상 수상 이후 1년간 성과를 살펴본 보고서

     * CES 2024 혁신상 수상 기업: 총 116개사 (스타트업얼라이언스, 2024 기준)
          + 해외 투자 유치 기업: 1개사
          + 국내 투자 유치 기업: 20개사
          + 투자 유치 성공 비율: 전체 수상 기업 중 18.1%
     * 투자 유치 분야 분포
          + 지속가능성(Sustainability): 6개 기업 (28.6%)
          + 인공지능(Artificial Intelligence): 3개 기업 (14.3%)
          + 헬스케어, 스마트홈/스마트시티, 인간안보, 로봇, 컴퓨터 하드웨어: 각 2개 기업 (9.5%)
          + 모빌리티, 농식품: 각 1개 기업 (4.8%)
     * 투자 유치 규모
          + 10억 미만/비공개: 6개 기업
          + 10억 이상: 8개 기업
          + 100억 이상: 4개 기업
          + 300억 이상: 3개 기업

CES 2024 참가 및 수상 효과에 대한 분석

     * CES 참가의 한계점
          + 대부분의 초기 스타트업이 기술 고도화 단계에 집중하고 있어 매출 증대보다는 투자 유치가 필요
          + 참가 기업의 85%가 공공기관 또는 대기업 지원으로 참가, CES 참가 목적이 주로 국내 마케팅 수단으로 활용됨
     * 정부 및 공공기관의 역할
          + CES 혁신상 수상 기업의 86%가 중소벤처기업부 지원사업을 활용
          + 그러나 지원의 선택과 집중이 부족하다는 비판 존재
     * 효과적인 해외 진출 전략 필요
          + 초기 스타트업이 아닌 해외 경쟁력이 검증된 기업에 집중적인 지원 필요
          + 해외 투자자 및 파트너와의 네트워킹과 후속 과정을 강화해야 실질적인 성과로 이어질 가능성 증대

결론 및 제언

     * CES 혁신상의 상징적 효과는 크지만, 실질적 투자 유치와 해외 시장 진출로 연결되지 못하는 경우가 많음
     * 공공 지원 전략의 변화:
          + 참가 기업 수와 수상 실적의 확대보다는 성과 중심의 지원 필요
          + 국제 시장에서 성공 가능성을 가진 기업을 선별해 집중 지원
     * 중장기적 접근 필요:
          + CES와 같은 국제 전시회를 활용한 사업적 성과 창출 방안을 지속적으로 모색해야 함

   이런 의견도 있군요.
   https://chosun.com/opinion/journalist_view/…
   CES 부스를 차린 이유가 (...) 국내에 홍보하러 온 것이라는 의구심을 지울 수 없었다. 한 공공기관 전시장 상단 전광판에는 “기획재정부 환영합니다” “해양수산부 환영합니다” 등 한글 문구가 떠다녔다.
"
"https://news.hada.io/topic?id=18810","64kb RAM에서 실행된 Unix spell","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       64kb RAM에서 실행된 Unix spell

    Unix Spell이 64kB RAM에서 실행된 방법

      64kB RAM에 사전을 어떻게 맞출 수 있을까?

     * Unix 엔지니어들은 데이터 구조와 압축 기법을 활용하여 64kB RAM에 250kB 사전을 맞추는 문제를 해결함.
     * 1970년대에 Douglas McIlroy는 AT&T의 Unix 철자 검사기를 구현하면서 이 문제에 직면함.
     * 그는 데이터의 특성을 활용하여 이론적 압축 한계에 근접한 압축 알고리듬을 개발함.

    TL;DR

     * Unix 철자 검사기는 1970년대에 AT&T의 Steve Johnson이 프로토타입으로 시작함.
     * McIlroy는 언어 기반의 어간 추출 알고리듬을 개발하여 사전을 25,000 단어로 줄임.
     * 빠른 조회를 위해 Bloom 필터를 사용하였으며, Dennis Ritchie가 구현을 제공함.
     * 사전이 30,000 단어로 증가하면서 Bloom 필터 접근법이 비효율적이 되어 해시 압축 기법을 도입함.
     * 27비트 해시 코드를 사용하여 충돌 확률을 낮추고, Golomb의 코드를 사용하여 13.60 비트/단어의 압축을 달성함.

    Unix 철자 명령의 기원

     * Unix는 AT&T의 특허 부서에 텍스트 처리 시스템으로 제안되었고, 철자 검사기가 필요했음.
     * 초기 버전은 Steve Johnson이 1975년에 작성하였으나 정확도가 낮았음.
     * Douglas McIlroy는 정확도와 성능을 개선하기 위해 프로젝트를 다시 작성함.

    접두사 제거 알고리듬

     * McIlroy는 단어에서 공통 접두사와 접미사를 제거하여 사전을 조회하는 알고리듬을 개발함.
     * 이 방법은 100% 정확하지 않았지만 당시에는 수용 가능한 수준이었음.

    Bloom 필터 기반 조회

     * Bloom 필터는 메모리를 절약하고 빠른 조회를 가능하게 함.
     * 25,000 단어의 사전을 64kB RAM에 적재하기 위해 사용됨.
     * Bloom 필터는 낮은 오탐률을 유지하도록 조정됨.

    사전 조회를 위한 압축 해싱 기법

     * 사전 크기가 30,000 단어로 증가하면서 더 메모리 효율적인 데이터 구조가 필요해짐.
     * McIlroy는 해시 코드의 차이를 저장하여 메모리를 절약하는 방법을 사용함.
     * Golomb의 코드를 사용하여 해시 차이를 압축함.

    결론

     * Unix 철자 명령은 PDP-11의 메모리 제약에서 비롯된 흥미로운 엔지니어링 역사임.
     * Bloom 필터, 정보 이론, 확률 이론, 압축 알고리듬을 결합한 우아한 솔루션을 제공함.
     * 자원 제약이 있을 때 깊이 있는 문제 해결이 가능하다는 것을 보여줌.

        Hacker News 의견

     * Bloom 필터는 원래 ""superimposed code scheme""으로 불렸으며, 이는 특정 유형의 superimposed code임
          + Calvin Mooers는 1940년대 MIT에서 Shannon의 연구에 영향을 받아 무작위 superimposed coding을 개발함
          + Bourne의 1963년 책 ""Methods of Information Handling""에서 수학적 세부 사항을 제공함
          + Douglas는 이 기술을 알고 있었을 가능성이 높음
     * 외부 메모리 철자 검사기를 적은 RAM으로 구현할 수 있음
          + 문서의 단어를 정렬하고 고유한 단어를 제거한 후 사전과 병합하여 누락된 단어만 유지하는 방식임
          + TRS-80 Color Computer에서 32k 미만의 RAM으로 작동시킴
          + Turbo Lightning은 압축된 사전을 사용하여 PC에서 입력할 때 철자 검사를 수행함
     * 메모리 대역폭과 디스크 대역폭이 비슷했으며, 여러 번의 패스를 통해 작업을 수행할 수 있었음
          + Bloom 필터를 사용하여 작업을 수행하는 것이 좋음
     * 1980년대 IBM PC용 하드웨어 철자 검사기가 있었음
          + 키보드와 PC 사이에 연결되어 인식하지 못하는 단어를 입력하면 경고음을 냄
     * Unix는 텍스트 처리 시스템으로 AT&T에 제안되었으며, 철자 검사기가 필요했음
          + UNIX는 주로 텍스트 처리에 사용됨
     * 1980년대 초 Byte 기사에서 Unix의 철자 검사기를 만드는 방법을 설명함
          + 8비트 PC에서는 이러한 기능이 없었음
     * 해싱으로 인해 놓치는 일반적인 오타가 있을 수 있음
          + Wordle 사전 압축에 관한 대회가 있음
     * 1980년대 중반, 640KB RAM과 64KB의 힙 및 스택을 사용하여 데이터를 처리함
          + 데이터를 추출하고 결합하는 데 몇 시간이 걸렸으며, 단일 스레드 시스템에서 수행됨
     * 1983년경 CP/M에서 Grammatik은 64k 미만으로 실행되었으며, 문법 검사와 전문가 시스템 규칙을 포함함
          + Forth로 작성되어 매우 컴팩트했음
     * UNIX의 첫 번째 버전은 24kB가 필요했으며, 그 중 절반은 커널이 차지함
"
"https://news.hada.io/topic?id=18812","Haskell: 뛰어난 절차적 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Haskell: 뛰어난 절차적 언어

사이드 이펙트를 일급 값으로 다루기

     * Haskell에서는 부수효과(예: 랜덤 숫자 생성, 출력 등)를 ‘일급 값(first class value)’처럼 취급함
     * 즉, randomRIO(1, 6)처럼 부수효과를 생성하는 함수 호출 자체가 결과값이 아니라, “언젠가 실행될 동작을 기술하는 객체”를 반환함
     * 이 객체는 실제로 실행될 때 랜덤 값을 만들어내지만, 그 이전에는 단순히 실행 계획만을 담고 있음
     * IO Int 같은 타입은 “실제로 실행되면 Int를 만들어내는 동작”을 나타내며, 호출 시점에 바로 실행되지 않고, 이후 필요한 시점에 실행됨
     * 이러한 특성으로 인해 “함수 호출 = 즉시 실행”이라는 전통적 절차적 언어와 달리, Haskell에서는 부수효과를 조합하고 나중에 실제로 실행할 수 있음

De-mystifying do blocks

     * do 블록은 마법적 구문이 아니라, 사실상 부수효과를 연결(bind)하고 순서대로 실행(then)하는 두 연산자로 구성됨

    then

     * *> 연산자는 왼쪽의 부수효과를 실행한 후 결과값을 버리고, 오른쪽 부수효과를 이어서 실행함
     * 예를 들어 putStr ""hello"" *> putStrLn ""world""는 두 출력을 순서대로 합친 하나의 IO () 동작을 만듦
     * do 블록에서 여러 줄을 쓰면 내부적으로 이런 순차 실행 연산을 이용함

    bind

     * >>= 연산자는 왼쪽 부수효과를 실행해서 얻은 값을 오른쪽 함수에 넘기는 역할을 함
     * 예: randomRIO(1, 6) >>= print_side는 주사위 결과를 print_side로 전달해 출력하는 부수효과를 만듦
     * do 블록에서 <- 패턴이 이 연산자를 간편하게 표현해 주는 개념임

    Two operators are all of do blocks

     * 결국 do 블록은 *>, >>= 이 두 연산자로 구축됨
     * 코드 가독성과 간편함 때문에 do 문법을 많이 쓰지만, 이보다 더 풍부한 부수효과 조합 함수들을 활용해야 Haskell의 장점을 더 살릴 수 있음

Functions that operate on side effects

     * 부수효과를 더 다양하게 다룰 수 있는 여러 함수가 표준 라이브러리에 존재함

    pure

     * pure x는 “아무런 추가 부수효과 없이 x 값을 결과로 만드는 동작”을 생성함
     * 예: loaded_die = pure 4는 항상 4를 반환하는 IO Int를 만듦

    fmap

     * fmap :: (a -> b) -> IO a -> IO b 형태로, 부수효과 결과값에 순수 함수를 적용해 새 결과값을 만드는 동작을 생성함
     * 예: length <$> getEnv ""HOME""처럼, 환경변수를 가져오는 부수효과에 length를 적용해 길이를 구하는 동작을 생성할 수 있음

    liftA2, liftA3, …

     * liftA2, liftA3 같은 함수들은 여러 부수효과 결과를 하나의 순수 함수로 결합해 새 부수효과를 만듦
     * 예: liftA2 (+) (randomRIO(1,6)) (randomRIO(1,6))는 두 개의 주사위 값을 합산하는 부수효과를 생성함
     * <$>와 <*> 조합으로도 동일한 작업을 수행할 수 있음

    Intermission: what’s the point?

     * 이런 방식은 다른 언어에서도 가능한 단순 기능처럼 보이지만, Haskell에서는 언제든 부수효과 동작을 변수로 뽑아내거나 재조합해도 실행 시점이나 결과가 달라지지 않는 장점이 있음
     * 부수효과를 독립적으로 다룸으로써, 코드 리팩터링 시 혼동이 적고, 함수식 추론(equational reasoning)에 기반한 안전한 재사용이 가능함

    sequenceA

     * sequenceA [IO a] -> IO [a]는 “부수효과 동작들의 리스트”를 “리스트 결과를 내는 단일 부수효과 동작”으로 바꿔줌
     * 예: 여러 log 동작을 리스트로 모아두고, 나중에 sequenceA로 한 번에 실행시키는 식으로 활용 가능함
     * 무한 반복되는 부수효과(예: repeat (randomRIO(1,6)))도 리스트로 보관했다가 필요한 만큼만 take n 해서 sequenceA로 실행 가능함

    Interlude: convenience functions

     * void, sequenceA_, replicateM, replicateM_ 등은 결과값을 사용하지 않거나 반복 실행할 때 편리함
     * 예: replicateM_ 500 (putStrLn ""I will not cheat again."")처럼 반복횟수를 직접 세지 않고 부수효과를 여러 번 실행할 수 있음

    traverse

     * traverse :: (a -> IO b) -> [a] -> IO [b]는 리스트의 각 요소에 부수효과 함수를 적용해 결과를 리스트로 모으는 동작을 만듦
     * sequenceA는 사실 traverse id와 동일하며, traverse_는 결과를 버리는 버전임

    for

     * for는 traverse와 같은 기능이지만 인자를 반대로 받음
     * 예: for numbers $ \n -> ... 형태로 “for 루프” 같은 구문을 자연스럽게 표현함
     * 이런 조합 덕에 다른 언어에서 별도 문법으로 처리해야 하는 반복, 순회, 데이터 구조 변환을 Haskell에서는 라이브러리 함수 조합으로 구현할 수 있음

Leaning into the first classiness of effects

     * Haskell에서 부수효과를 일급값으로 적극 활용하면, 코드 중복 감소나 구조 개선이 가능함
     * 예를 들어, 캐시를 사용한 큰 수 소인수분해 로직에서 IO 대신 State 등을 사용해 “부수효과가 존재하지만 외부엔 영향을 주지 않는” 구조를 만들 수 있음
     * 이런 식으로 구조화된 부수효과는 필요한 부분에만 적용되며, 그 외 코드는 순수 함수로 유지할 수 있어 안전성과 유연성을 동시에 확보함
     * 최종적으로 evalState 등으로 실제 부수효과를 실행하고 결과를 순수한 값으로 만들 수 있음

Things you never need to care about

     * 예전 Haskell 시절부터 있었던 여러 이름(>>, return, mapM, 등)은 현행 함수(*>, pure, traverse 등)로 대체 가능함
     * 이들은 “옛날 이름 혹은 모나드 중심 설계”에서 유래했고, 요즘은 Applicative나 더 일반적 Functor 기반 접근을 권장함

Appendix A: Avoiding success and uselessness

     * “Haskell은 성공을 피한다”라는 말은 “언어가 인기나 편의성 때문에 근본 가치를 희생하지 않는다”는 의미임
     * “Haskell is useless”는 처음에 완전한 순수 함수만 허용해 정말 아무것도 못하는 언어처럼 보였지만, 이후 부수효과를 ‘일급’으로 다루는 방식이 도입되면서 실용성을 획득했다는 맥락임

Appendix B: Why fmap maps over both side effects and lists

     * fmap는 매우 일반적인 형태(Functor f => (a -> b) -> f a -> f b)로, 리스트, Maybe, IO 같은 다양한 컨테이너나 부수효과 타입에 공통적으로 적용됨
     * 리스트에 fmap를 적용하면 모든 원소에 함수를 씌우고, IO에 적용하면 결과값에 함수를 씌움
     * 이처럼 “함수를 적용할 수 있는 구조” 전반이 Functor로 불림

Appendix C: Foldable and Traversable

     * Foldable은 원소를 순회하며 처리할 수 있는 구조임
     * Traversable은 순회뿐 아니라, 새 요소로 같은 모양의 구조를 재생성할 수 있는 구조임
     * sequenceA나 traverse가 원래 구조를 유지하며 값을 모을 수 있으려면 해당 구조가 Traversable이어야 함
     * 트리나 Set 같은 자료구조는 구조가 값에 따라 달라질 수 있어, 순회만 가능한 경우(Foldable)와 실제 구조를 재생성할 수 있는 경우(Traversable)가 구분됨
     * 필요에 따라 리스트로 변환 후 traverse를 쓰는 방식 등을 통해 유연하게 부수효과를 처리할 수 있음

   Reddit 보다보면 광고가 많이 뜹니다.. 근데 이름부터 약간 심리적 허들이 생겨요.
   왠지 되게 어렵고 강력한 언어 느낌..

        Hacker News 의견

     * Haskell의 타입 시스템은 다른 인기 있는 언어들과 비교할 때 복잡함이 있음. 특히 *>, <*>, <*와 같은 연산자들은 코드베이스 전반에 걸쳐 학습 곡선을 높임
          + 한 달 동안 Haskell을 사용하지 않으면 >>=와 >> 같은 연산자를 다시 공부해야 생산성을 유지할 수 있음
          + Haskell의 개념을 사람들과 대화하지 않고 혼자 공부하면 어려움이 있음
     * Haskell은 명령형 프로그래밍을 개선하는 데 도움을 줌
          + 첫 번째 클래스 효과와 패턴을 사용하여 보일러플레이트 코드를 제거할 수 있음
          + 타입 안전성을 통해 상대적으로 버그 없는 코드를 빠르게 작성할 수 있음
     * traverse/mapM의 일반화된 버전은 리스트뿐만 아니라 모든 Traversable 타입에 대해 작동하며 매우 유용함
          + traverse :: Applicative f => (a -> f b) -> t a -> f (t b) 형태로 사용 가능
          + 다른 언어에서는 비슷한 효과를 얻기 위해 많은 코드를 수동으로 작성해야 했음
     * Haskell은 강력한 모나드를 가지고 있으며, 이는 Haskell을 더욱 절차적으로 만듦
          + do 블록에서 중간 변수를 사용할 수 있음
     * Haskell로 작성된 소프트웨어로는 ImplicitCAD가 있음
     * Haskell의 코드가 절차적 언어처럼 읽히지만, 부작용 함수와 함께 작업할 때의 장점을 제공함
          + IO 모나드와 함께 작업하는 것은 복잡하며, 다른 모나드 타입을 사용하고자 할 때 더욱 복잡해짐
     * >>는 <i>>의 오래된 이름이며, 두 연산자는 왼쪽 결합 연산자임
          + >>는 infixl 1로 정의되고 <i>>는 infixl 4로 정의되어 있어, <i>>가 >>보다 더 강하게 결합됨
     * Haskell의 IO a와 a는 비동기와 동기와 유사하게 느껴질 수 있음
          + 첫 번째는 대기해야 하는 약속/미래를 반환함
     * 다른 언어에서는 console.log(""abc"")와 같은 함수로 간단한 IO를 수행할 수 있음
          + Haskell의 IO와 다른 점이 있는지에 대한 의문이 있음
     * Haskell을 시도해보지 않은 사람들은 GHC 확장을 사용한 실제 Haskell이 너무 복잡하다고 느낄 수 있음
          + 이는 Haskell에 대한 관심을 떨어뜨릴 수 있음
"
"https://news.hada.io/topic?id=18867","WFH 조명 개선을 통한 눈의 피로 감소 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       WFH 조명 개선을 통한 눈의 피로 감소 방법

  WFH 조명 개선하기

     * TLDR
          + 균일하고 확산된 조명 환경이 눈에 가장 좋음
          + 조명의 밝기는 너무 많거나 적어도 문제가 됨
          + 가능한 한 자연광을 사용함
          + 인공 조명의 품질이 중요함
          + 카메라에 좋은 조명이 항상 인체공학적으로 좋은 것은 아님
          + 완벽한 조명 환경도 피로를 유발할 수 있으므로 휴식을 취하고 자신을 돌보아야 함

  컴퓨터 화면이 피로를 유발하는 이유

     * 모니터 깜박임
          + 대부분의 모니터는 깜박임이 있음. 이는 시각적으로 눈에 띄지 않지만 피로를 유발할 수 있음. 특히 낮은 밝기에서 PWM 디밍을 사용하여 깜박임이 증가함.
     * 고대비 조명
          + 고대비 조명은 눈의 피로를 유발함. 예를 들어 창문에서 들어오는 빛이 어두운 방을 비추는 경우, 눈은 두 가지 밝기를 동시에 조절해야 함.
     * 고정된 초점 거리
          + 컴퓨터 작업 시 대부분의 시간 동안 우리는 같은 거리에 초점을 맞추고 있음. 이는 눈 근육을 긴장시키고 피로하게 만듦. 20/20/20 규칙을 실천하여 해결할 수 있음.

  이전의 설정

     * 주간
          + 사무실의 빛은 주로 태양에서 들어옴. 직사광선은 눈부심을 유발하고, 확산이 부족하여 방의 어두운 구석을 만듦.
     * 야간
          + 빛은 주로 위에서 들어옴. 단일 광원으로 인해 강한 그림자와 높은 대비가 발생함.

  이후의 설정

     * 주간
          + 빛이 훨씬 더 균일하게 분산되고 균형 잡힘. 그림자가 부드럽고, 좌우 및 상하의 조명이 훨씬 더 균일함.
     * 야간
          + 빛의 수준이 훨씬 더 균형 잡혀 있으며, 강한 그림자와 높은 대비가 줄어듦. 방의 구석이 조명되어 위와 모니터의 빛을 상쇄함.

    변경 사항

     * 창문 조명 및 필터링
          + 창문에 빛 필터링 커튼을 설치하여 빛을 확산시킴.
     * 벽 및 천장 조명
          + 방의 각 구석에 토치에어 램프를 설치하여 균일한 조명 환경을 만듦.
     * 책상 조명
          + 모니터의 밝기를 조절할 수 있는 깜박임 없는 백라이트를 추가하여 작업 피로를 줄임.

  요점

    1. 균일하고 확산된 조명 환경이 눈에 가장 좋음. 어두운/밝은 부분을 추가 조명으로 균형 잡고 강한 광원을 확산시킴.
    2. 조명의 밝기는 너무 많거나 적어도 문제가 됨. 너무 적은 빛은 간접적이고 반사되는 빛을 제공하는 추가 광원을 사용함.
    3. 가능한 한 자연광을 사용함. 자연광은 인공 조명보다 건강에 좋음.
    4. 인공 조명의 품질이 중요함. 깜박임이 없고 조절 가능한 고품질 조명을 선택함.
    5. 카메라에 좋은 조명이 항상 인체공학적으로 좋은 것은 아님. 비디오 통화 시 좋은 조명을 사용하되, 피로를 유발할 수 있음.
    6. 완벽한 조명 환경도 피로를 유발할 수 있으므로 휴식을 취하고 자신을 돌보아야 함. 좋은 작업 습관과 자세 변화가 중요함.

        Hacker News 의견

     * 카메라를 위한 조명 가이드라인은 방 조명에도 유용함
          + 확산광 사용: 여러 광원이 표면에 빛을 반사하고 확산시킴
          + 그림자 최소화: 여러 방향성 광원 사용
          + 하이라이트 최소화: 커튼과 블라인드로 빛 확산
          + 균일한 색온도: 모든 조명이 동일한 색온도를 가지도록 함
          + 필요와 느낌에 따른 색온도 선택: 작업에 맞는 색온도 조정
          + 벽 색상: 벽 색상이 조명 색온도에 영향을 미침
          + 방이 더 포토제닉해짐: 포토제닉한 방은 눈에 편안함
     * 눈의 피로를 줄이기 위해 다크 모드 사용
          + 블루 라이트 감소를 위한 다양한 방법 시도 후 해결
     * 눈의 피로와 관련된 건조한 눈 문제
          + 화면에 집중할 때 깜빡임이 줄어들어 건조한 눈 발생
          + 깜빡임이 부족하면 눈물의 기름 부족으로 피로와 통증 유발
          + 깜빡임을 잊지 말아야 함
          + 깜빡임을 세는 웹 앱 개발
     * 자연광과 확산광은 좋은 팁
          + 큰 화면을 1.5m 거리에서 사용
          + 1.5m는 눈 근육의 초점 중간 지점
          + 증강 현실 디스플레이에서 이 초점 평면 선택
     * 오래된 집의 벽 색상 변화
          + 벽이 노랗게 변하면 확산된 빛의 색상에 영향
          + 새로운 흰색 페인트로 벽을 칠하면 더 쾌적한 조명 가능
     * 재택근무의 장점
          + 많은 사무실 환경의 조명이 좋지 않음
     * 조명의 미적 및 기능적 측면
          + 램프와 눈높이 조명은 눈의 피로를 줄이는 것 외에도 인테리어 디자인에 도움
          + 천장 조명에 의존하는 공간은 사무실처럼 느껴질 수 있음
     * 겨울철 우울증을 피하기 위해 천장에 조명을 비춤
          + 밝고 균일한 조명으로 활기차고 편안한 느낌
          + 다양한 저녁 분위기를 위한 다른 조명 사용
     * 비싼 모니터의 혁신
          + 독서 모드로 깜빡임을 줄임
          + OLED가 더 나을지 궁금함
     * 조명이 너무 적은가?
          + 컴퓨터 모니터만으로 어두운 곳에서 작업하는 것을 선호
          + 눈의 피로와 방해 요소가 줄어듦
"
"https://news.hada.io/topic?id=18883","HN에 공개: 온라인에서 활성화된 트랜스젠더 커뮤니티 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN에 공개: 온라인에서 활성화된 트랜스젠더 커뮤니티 구축

     * t4t 소개
          + t4t는 트랜스 및 젠더 비순응자를 위한 소셜 네트워크임.
          + 아름답고 미니멀하며 텍스트 기반으로 무료로 제공됨.
          + iOS 또는 Android 앱을 다운로드하여 가입 가능함.
     * 최근 게시물
          + @abwaum: 혼자 잠들기 어려움. 남자친구의 가슴에 기대어 잠들던 습관 때문에 그가 없으면 잠들기 힘듦.
          + @encarta: 내분비학자에 대한 강한 의견. 일반적인 상황에서는 주사형 에스트로겐 단독 요법을 권장함.
          + @romanatsea: 프랑스 여자친구에 대한 애정 표현.
          + @cavefishes: 외출 준비 중. 에너지를 보충하기 위해 여러 물품이 필요함.
          + @crouton: 한 사람이 논란이 될 만한 게시물을 올리면 많은 사람들이 그에 대한 반응을 보임.
          + @killlakill: 트랜스 여성을 위한 메시지. Street Fighter 6에 새로운 캐릭터 출시 예정.
          + @peach_syrup: 자신을 소개하는 게시물.
          + @Cynematic: 오스카 시상식에서 트랜스 여성이 연기상 후보로 지명됨.
          + @alice: 자신이 설정한 포럼에 대한 홍보.
          + @Lovemail.Shan: 인간형 제품에 대한 개인적인 취향 표현.
          + @ellierawrx3: 개인적인 경험에 대한 이야기.
          + @cranbatty: 레즈비언 트위터 담론에 대한 의견. 원하는 옷을 입을 수 있다는 메시지.
          + @sakebone: 강아지와 함께하는 브레이딩 트레인에 대한 이야기.
     * 앱 다운로드
          + 더 많은 게시물을 보려면 iOS 또는 Android 앱을 다운로드해야 함.

        Hacker News 의견

     * 많은 사용자가 있는 서비스를 만들었을 경우, 악의적인 행위자들의 표적이 될 수 있으며 NSFW 콘텐츠를 호스팅할 경우 LLC를 설립하여 자신을 보호하는 것이 좋음
     * NSFW 콘텐츠가 충격적이라는 피드백을 받았으며, 스마트한 NSFW 필터링이 필요하다고 생각함. 이를 곧 구현할 예정임
     * 악의적인 행위자들의 표적이 되는 것에 대해 우려가 있으며, 보안 경험이 있는 사람이 도움을 줄 수 있는지 궁금함
     * 트랜스 여성으로서 인터페이스가 다소 혼란스럽고 매력적이지 않지만, 프로필 기능은 만족스러움
     * ""terrible orange site""를 통해 웹사이트를 발견했다는 게시물을 보았으며, 지금과 같은 커뮤니티가 필요하다고 생각함. 자금 조달에 대해 경량 서비스를 사용하여 비용을 절감하고 있는지, 앱이 종료될 경우의 비상 계획이 있는지 궁금함
     * 커뮤니티의 규범에 익숙하지 않아 처음 몇 개의 게시물이 놀라웠으며, 스팸 댓글인지 궁금함. 취약한 사람들을 보호할 계획이 궁금함
     * 미니멀한 디자인과 빠른 로딩 속도가 마음에 듦
     * UI가 미니멀한 것이 좋지만, 약간의 여백이 필요할 것 같음. 웹사이트가 메인 플랫폼의 ""미리보기""라는 것이 명확하지 않았음
     * 모바일 앱만 있고 소스 코드가 없는 점이 아쉬우며, Mastodon을 계속 사용할 예정임
     * 트랜스 및 젠더 비순응자를 위한 공간이 인터넷에 거의 없다는 것이 놀라움. Reddit, Discord, FB, IG 등 다양한 플랫폼에 더 많은 공간이 있을 것이라고 생각함
"
"https://news.hada.io/topic?id=18877","F-Droid의 진전과 2025년 전망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         F-Droid의 진전과 2025년 전망

  2024년 성과 리뷰

    앱 배포의 탈중앙화: 핵심 초점

     * 2024년에는 앱 탈중앙화 노력을 계속 발전시켰음.
     * F-Droid를 더 강력하고 접근 가능한 플랫폼으로 만들기 위해 노력했음.
     * Filecoin Foundation for the Decentralized Web의 지원을 받아 개발자와 사용자에게 더 많은 앱 배포 옵션을 제공했음.
     * 중앙 집중식 서비스 의존도를 줄이고 커뮤니티 주도의 앱 배포를 목표로 함.
     * 주요 인프라 업그레이드:
          + 핵심 클라이언트 로직을 분리하고 개편함.
          + 클라이언트 로직을 라이브러리로 만들어 앱에 쉽게 임베드할 수 있게 함.
          + IPFS와 Filecoin에 저장소 미러링 지원 추가.
          + F-Droid 클라이언트에서 IPFS와 Filecoin에 호스팅된 미러와 저장소 사용 지원.
          + F-Droid 클라이언트의 ""화이트라벨 빌드"" 개선.
          + ""근처"" 및 ""앱 교환"" 기능 강화.
          + Repomaker 도구 업데이트 및 IPFS 게시 지원 추가.
          + iOS 앱과 프로그레시브 웹 앱(PWA) 패키지 지원.

  F-Droid 생태계 확장: Repomaker와 Mobifree

     * 2024년에는 F-Droid 생태계 내 도구 확장에 집중했음.
     * EU Horizon Europe의 지원을 받아 Repomaker와 같은 도구 개발에 집중했음.
     * Mobifree는 전통적인 모바일 앱 스토어에 대한 자유롭고 오픈 소스인 대안을 제공하는 프로젝트임.
     * 사용자 연구, Fastlane 도구 활용, Repomaker 기능 개발 등 다양한 기여를 통해 앱 배포 프로세스를 쉽게 만듦.

  F-Droid 커뮤니티 참여

     * FOSS 커뮤니티의 기여 덕분에 2024년에는 많은 발전이 있었음.
     * 앱 업데이트 7205건, 새로운 앱 402개 추가, 939개 앱 아카이브 등 다양한 성과를 달성했음.
     * 시간당 2-3개의 패키지가 생성되었으며, 이는 커뮤니티의 헌신과 열정을 반영함.

  2025년 전망

    새로운 팀원과 큰 계획

     * Hailey Still과 Nzambi Kakusu가 새로운 팀원으로 합류하여 프로젝트 관리와 UX 디자인, 그리고 기금 관리에 기여할 예정임.

    OTF 기금과 인프라 작업

     * Open Technology Fund의 지원을 받아 F-Droid의 인프라 작업을 개선할 예정임.
     * 시스템의 회복력과 보안을 강화하여 F-Droid가 신뢰할 수 있는 오픈 소스 앱 배포 플랫폼으로 계속 발전할 수 있도록 할 것임.

  마무리

     * 앱 배포의 탈중앙화, F-Droid 생태계 확장, 사용자에게 오픈 소스 대안을 제공하는 사명을 지속적으로 수행할 것임.
     * 커뮤니티, 자원봉사자, 새로운 팀원들의 지원으로 2025년에도 많은 발전을 기대함.

        Hacker News 의견

     * 다운로드 카운터 추가를 희망함. F-Droid의 앱 중 많은 것이 불충분하거나 개발 초기 단계임. 최신 업데이트 시간이나 알파벳 순으로 정렬할 수 있지만 사용자에게 유용하지 않음. 여러 앱이 같은 기능을 할 때 가장 좋은 것을 찾기 어려움. 다운로드 카운터가 있으면 사람들이 앱을 설치하고 유지하는지 여부를 알 수 있음
     * F-Droid의 앱 업데이트 UI가 여전히 버그가 많음. 기본적이고 중요한 기능임
     * PWA를 저장소를 통해 배포할 수 있는 가능성에 대해 알게 됨. 서버에서 대부분의 코드가 실행되므로 데이터 수집을 어떻게 확인하고 사용자에게 알릴지 의문임. 자동화된 방식으로 개발자를 신뢰하지 않고 이 요구를 조화시킬 방법이 확실하지 않음
     * F-Droid를 오랫동안 사용해왔으며 패키지를 게시한 경험도 있음. F-Droid 팀에게 감사와 칭찬을 보냄
     * F-Droid에서 사용할 수 있는 앱 추천을 요청함. 현재 두 개의 앱만 설치되어 있으며, Google App Store에서 사용할 수 있는 앱을 주로 사용함
     * Android 12에서 서드파티 앱이 설치하거나 마지막으로 업데이트한 앱을 백그라운드에서 업데이트할 수 있는 기능을 소개함. F-Droid Basic은 Android 14를 타겟으로 하며 일부 기능을 제거함. targetSdk와 minSdk의 차이를 설명함
     * F-Droid가 잘 작동하지만 앱 추가 과정에 개선이 필요함. 작은 앱을 추가하려 했으나 문서가 불충분하고 도움을 받기 어려웠음. 최종적으로는 도움을 받았으나 문서와 상반되는 지침이 많았음
     * F-Droid의 거버넌스에 만족함. Google Store와 비교하여 긍정적인 평가를 함
     * Android TV 기기에 F-Droid 클라이언트가 있는지 궁금해함. NVIDIA Shield TV에 스마트폰 버전을 설치했으나 리모컨으로 탐색하기 어려움
     * iOS에서도 비슷한 기능이 가능한지 궁금해함
"
"https://news.hada.io/topic?id=18860","Show HN: anyon e - 밑바닥부터 직접 제작한 오픈 소스 노트북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: anyon e - 밑바닥부터 직접 제작한 오픈 소스 노트북

     * 고등학교 3학년 학생이 6개월간 직접 제작한 노트북
     * 4K AMOLED 디스플레이, Cherry MX 기계식 키보드, Minecraft 4K 플레이, +7B LLMs 실행, 웹 서핑, 약 7시간 배터리 수명. 모든 것이 오픈 소스임.
     * 최신 상용 얇고 가벼운 노트북이 가진 다양한 기술 스펙(화면, 오디오, 성능, 빌드, 촉감, 터치 상호작용, 효율, 크기 등)을 최대한 구현하고자 함
     * 동시에 가능한 한 많은 것을 처음부터 직접 만들고자 하는 시도였음

전체 하드웨어 구성

  칩 선택

     * 단일 보드 컴퓨터(SBC)용 SoC를 찾았고, Rockchip RK3588이 빠른 편이어서 관심을 가졌음
     * 소프트웨어 지원은 부족하지만 하드웨어 문서나 레퍼런스 회로도가 괜찮았음
     * RK3588 스펙
     * A76 쿼드코어 + A55 쿼드코어
     * Mali-G10 GPU
     * 6TOPs NPU
     * 8K@60FPS 디코더
     * 다양한 I/O (8K 디스플레이, 듀얼 USB3.1, PCIe 3.0 x4, HDMI2.1/eDP 1.4 등)
     * 시스템 온 모듈(SoM)을 활용하면 고속 신호 배선이 필요한 메모리 부분을 신경 쓰지 않아도 되어 효율적임
     * FriendlyElec의 CM3588 SoM을 선택했음

  디스플레이

     * panelook.com에서 크기와 해상도로 필터링해 4K 해상도의 13.3인치 AMOLED로 결정했음
     * ATNA33TP11이 비교적 새 패널 재고가 많았음
     * 커넥터 위치나 보드 길이를 줄이는 등의 미세 조정으로 1.5GHz급 신호 무결성을 확보했음
     * eDP 기반의 비표준 Linux 환경에서 4K AMOLED 세팅하는 과정이 매우 복잡했음 (전원 온 타이밍, 엔지니어링 로그 분석, 역공학 등)

  파워트레인

     * 두께 6mm 정도인 셀을 4개 직렬로 구성해 약 60Wh 용량을 목표로 함
     * batteryspace.com에서 3.7V 4250mAh의 셀을 찾았음
     * 전체 전압은 4S 구성으로 16.8V(최대 20V USB-C 입력). BQ25713 충전 IC, BQ77915 밸런싱 IC, LTC2943 전력 추적 IC 등을 사용했음
     * ESP32-S3를 통해 배터리 모니터링과 기타 컨트롤을 수행함
     * 커널과 Python 스크립트를 통해 OS에서 배터리 상태를 네이티브로 표시하도록 구성함

   [Powertrain V0.2 KiCanvas Link]
   https://kicanvas.org//…

  메인보드

     * 배터리, 디스플레이 크기 등을 바탕으로 메인보드 폭을 약 90mm 내외로 잡았음
     * 외부 I/O로는 듀얼 USB3.1 Type-C, USB2.0 Type-A, 헤드폰 잭, microSD 카드 슬롯을 구현함
     * 내부에는 M.2 E-key(와이파이/블루투스 모듈), M.2 M-key(NVMe SSD)를 지원함
     * 완성형 메인보드에 관한 자세한 부분은 별도 글로 정리 예정임

   [Motherboard V1.0 KiCanvas Link]
   https://kicanvas.org//…

  시스템 구동

     * Joshua Riek의 ubuntu-rockchip 커널/배포본을 사용함
     * Armbian 커널도 Rockchip의 커널 기반이라 하드웨어 기능을 잘 활용 가능함
     * 하드웨어 설정은 주로 DeviceTree(DTS) 내에서 처리하며, U-boot를 통해 부트로더 쪽에서 적절히 지정함
     * 개발은 MacBook + Visual Studio Code + Orbstack(가상화된 Ubuntu 24.04) 환경에서 진행했고, compile 후 scp로 RK3588 장치에 전송함
     * 표시, PCIe, USB 설정 등은 DTS로 반복 수정, 재부팅 과정을 거치며 해결했음
     * 최종적으로 Ubuntu 24.04 LTS 커널 6.1 기반으로 구동함

  주변기기

     * 노트북 키보드를 분리해 무선 키보드처럼 쓸 수 있으면 어떨까 하는 생각에서 시작함
     * ZMK 기반 무선 기계식 키보드를 여러 번 만들어본 경험이 있어 Cherry MX ULP 스위치를 선택했음
     * 배터리와 스위치가 들어가면 높이가 증가하므로, 1mm 두께의 200mAh 배터리를 사용하고 PCB 높이도 최소화했음
     * 키캡은 시중 조달이 어려워 0.15mm 노즐로 3D 프린팅함
     * 트랙패드는 Azoteq의 PXM0057-401 모듈(글래스 표면, 멀티터치, USB 지원)을 채택함. 단종 예정이라 아쉬움이 있음

   [Keyboard V1.0 KiCanvas Link]
   https://kicanvas.org//…

  메카니컬

     * 알루미늄 CNC 블록을 JLC에 보내 다양한 아노다이징 처리 샘플을 받아봄. 어두운 그레이가 촉감은 좋았지만 외관은 무광 블랙이 마음에 들어 최종 선택했음
     * CAD는 OnShape에서 진행했으며, Framework 13.3” 노트북 힌지를 참고함
     * 섀시 내부 레이아웃: 아래쪽에 배터리 4개, 오른쪽에 파워 보드, 왼쪽에 메인보드, 맨 위 힌지 구조. 자석 분리형 키보드를 위한 하단 나사 제거 설계를 함
     * 냉각 구조는 커스텀 구리 히트싱크 + 히트파이프 + 팬의 결합 형태이며, PTM7950 써멀 패드를 이용함
     * 스피커는 PUI Audio 제품을 사용했는데, CM3588의 오디오 DAC 디버깅에 시간이 모자라 외장 USB 오디오 컨버터를 추가함

반성

     * 이 프로젝트 이름 anyon_e는 양자역학 수업(특히 준양자입자 ‘애니온’) 이후 생각해낸 것임
     * 전기, 소프트웨어, 기계 분야가 모두 얽혀야 했기에 매우 힘들었음
     * 오픈소스 프로젝트(ZMK, KiCad, Blender 등)처럼 창작과 혁신, 상상의 힘을 사람들에게 나누고 싶었음
     * 작은 부분이라도 오픈소스로 기여하고자 하고, 새 가능성을 열어보고 싶었음

   저는 제목만 보고 뭔 공책인줄 착각했네요. 랩탑으로 하는게 맞을거 같습니다.

   외관이 마치 기성 제품 같네요.
   대단합니다.

   대단하네요 ㄷㄷ..

   공식 Repo - https://github.com/Hello9999901/laptop

   Phillips Exeter Academy 고등학교 재학생이라는데, 이 학교가 1781년에 설립된 엄청 유명한 사립학교 라는군요.

        Hacker News 의견

     * Bryan은 고등학교 마지막 학년에 있음
     * 저자의 뛰어난 능력을 보여주는 특별한 HN 게시물임. 비디오를 보고 깊은 인상을 받음
     * 정말 멋진 프로젝트임. 개선할 수 있는 다음 단계가 명확함. 자원, 시간, 기술 중 어떤 것이 더 부족했는지 궁금함
          + 예를 들어, 케이블 라우팅을 쉽게 하기 위해 플렉스 PCB를 만드는 것에 대해 생각해 본 적이 있는지 궁금함
          + 탈착식 무선 키보드를 가진 노트북의 개념이 훌륭하다고 생각함. Surface나 iPad의 케이스 키보드보다 구현이 훨씬 깔끔함
     * 작고 강력한 CPU를 가진 도크 의존형 손바닥 크기의 PC 비전에 한 걸음 다가갈 수 있을 것 같음. USB-C 하나로 연결되고, 다른 포트는 없으며, 저전력 충전기에서 전력 안정성을 위한 미니 배터리로 지원됨
     * Framework 13을 위한 맞춤형 화면 드라이버를 만들려고 노력했으나 실패함. 전체 노트북을 설계하고 제작한 것에 깊은 인상을 받음
     * 이는 매우 적은 사람들이 주장할 수 있는 성과임. HN에 명예의 전당이 있다면 가치 있는 입성임
          + SoM을 사용한 것이 현명한 선택임. SoC와 외부 구성 요소의 전력 시퀀싱은 제대로 된 문서가 없으면 매우 어려움
          + USB-C, DisplayPort(4K) 및 PCIe의 현대 속도는 대부분의 사람들에게는 마법과 같음. 이는 디지털이 아니라 아날로그 회로와 물리학이 작용하는 것임
     * 매우 인상적임. 노트북이 훌륭해 보임. 제조하고 판매할 수 있다면 구매를 고려할 것임
     * Clockwork Pi를 떠올리게 하는 멋진 프로젝트임. 공유해줘서 고마움
     * 총 비용이 궁금함
     * USB-C 커넥터가 외부 인클로저에 어떻게 만들어졌는지 궁금함
          + USB 연장 케이블을 사용하는 것은 좋지 않은 생각임. 대량의 데이터를 복사할 때 비트 오류가 발생할 수 있음. USB 드라이브를 캐리어 보드에 직접 삽입하는 것이 더 나음, 하지만 물리적으로 항상 가능한 것은 아님
"
"https://news.hada.io/topic?id=18888","렌티큘러 및 적대적 기술로 다른 목적지로 안내하는 QR 코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   렌티큘러 및 적대적 기술로 다른 목적지로 안내하는 QR 코드

     * mstdn.social 개요
          + mstdn.social은 Mastodon 서버 중 하나로, 사용자가 페디버스에 참여할 수 있게 해주는 일반 목적의 Mastodon 서버임.
          + 500자 제한이 있으며 모든 언어를 환영함.
          + 관리자: stux@stux
          + 서버 통계: 18K 활성 사용자
     * QR 코드 실험
          + Guy Dupont와 Christian Walther는 QR 코드의 각도에 따라 다른 소스로 연결되는 QR 코드를 실험 중임.
          + QR 코드의 픽셀을 절반씩 다른 코드로 구성하여 각도에 따라 다른 결과를 얻을 수 있음.
          + 이 실험은 QR 코드의 정렬 블록과 마스크의 중심을 활용하여 각도에 따라 샘플이 달라지도록 함.
     * 실험 결과와 반응
          + 다양한 사용자들이 이 실험에 대해 긍정적인 반응을 보였으며, QR 코드 스캐너의 소프트웨어 디코더에도 변동성이 있음을 발견함.
          + QR 코드의 스캔 결과는 사용자의 기기와 각도에 따라 달라질 수 있음.
          + 실험은 QR 코드의 고유한 특성을 활용하여 다양한 방식으로 해석될 수 있는 가능성을 보여줌.
     * 추가 실험과 아이디어
          + Christian Walther는 체커보드 마스크와 높은 수준의 오류 수정이 더 나은 결과를 제공한다고 언급함.
          + 다른 사용자들은 QR 코드의 색상이나 주파수를 활용하여 다른 방식으로 해석될 수 있는 가능성을 탐구함.
          + 이 실험은 컴퓨터 비전의 다중 안정적 지각과 유사한 방식으로 QR 코드가 해석될 수 있는 가능성을 제시함.
     * Mastodon의 장점
          + Mastodon은 알고리듬, 광고, 클릭베이트 없이 시간 순서대로 피드를 볼 수 있는 장점을 가짐.
          + 페디버스 전반에 걸쳐 누구든지 팔로우하고 모든 것을 볼 수 있음.

        Hacker News 의견

     * 공공장소에서 QR 코드가 사용자 정보를 기반으로 동적으로 변경되는 공격 방법에 대한 의견
          + QR 코드를 반반으로 나누어 구성하고, 외부 입력을 통해 타겟 선호도를 결정하는 시스템을 사용함
          + 코드의 색상을 미세하게 조정하여 특정 타겟이 선택될 확률을 높임
          + 피드백을 제공하는 곳에서 다양한 인구 통계에 따라 다른 피드백 양식을 제시하여 긍정적 또는 부정적 결과를 유도함
          + 특정 인물을 타겟으로 하여 다른 WiFi 네트워크에 연결시키거나 결제 페이지를 변경하는 등의 방법을 사용함
          + 정적 환경에서는 덜 효과적이며, 대부분의 사람들은 QR 코드가 동적으로 변경되는 것을 알아차리지 못할 것이라는 의견
     * 웹사이트를 만들어 QR 코드 기술을 직접 체험할 수 있도록 함
          + 두 개의 다른 QR 코드를 대각선으로 나누어 하나의 이미지로 결합함
          + QR 코드의 높은 오류 수정 기능을 활용하여 스캔 각도에 따라 다른 URL을 읽을 수 있음
          + UI에서는 두 번째 URL을 더 자주 인식하는 경향이 있다고 언급함
     * 안드로이드에서 QR 코드 리더기 사용에 어려움을 겪었으나, 데모 앱을 통해 문제를 해결함
          + 연속 스캔 기능을 활성화하여 각도에 따라 결과가 변경되는 것을 확인할 수 있음
     * iOS에서 이미지를 길게 누르면 GitHub으로 연결된다고 표시되지만, 미리보기에서는 Mastodon으로 연결됨
          + QR 코드를 두 번 파싱하여 다른 결과를 얻는 것으로 보이며, 이를 통해 사람들을 오도할 수 있음
     * iPhone에서 QR 코드가 Mastodon과 GitHub 링크 사이를 번갈아 가며 표시됨
          + 휴대폰을 회전시키면 한쪽으로 고정되지만, 가끔씩 두 링크 사이를 번쩍이며 전환함
     * QR 코드에 Rick Roll을 구현하면 재미있을 것이라는 의견
     * QR 코드를 스캐빈저 헌트에 활용하면 재미있을 것이라는 의견
     * QR 코드의 작동 원리에 대한 설명 요청
     * MacOS에서는 QR 코드를 우클릭할 때 Mastodon 링크만 인식함
"
"https://news.hada.io/topic?id=18851","HN 문의: Tiny Language Models로 멋진 프로젝트 진행 중인 사람 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 문의: Tiny Language Models로 멋진 프로젝트 진행 중인 사람 있나요?

     * Ollama에서 사용할 수 있는 0.5B-3B 범위의 모델에 대한 논의임
     * 이러한 모델을 작업 흐름의 일부로 사용하는 멋진 도구를 구축했는지에 대한 질문임

        Hacker News 의견

     * ollama를 사용하여 SMS 스팸 메시지에 응답하게 설정함. 각 번호에 밀레니얼 체육관 친구나 19세기 영국 신사 같은 페르소나를 부여함
     * Llama 모델을 사용하여 웹사이트의 쿠키 알림을 식별하고 EasyList Cookie에 필터 규칙을 추가함. 대부분의 쿠키 알림은 HTML/CSS가 유사하여 innerText를 가져와 작은 LLM으로 오탐을 걸러낼 수 있음. 3B 모델은 충분한 프롬프트 엔지니어링을 통해 괜찮은 성능을 보이며, 7B는 추가 비용 없이 오탐률이 거의 없음. 코드와 프롬프트는 GitHub에서 확인 가능함
     * n100 CPU가 장착된 미니 PC를 사용하여 다양한 장르와 스타일의 이야기를 생성함. CPU 팬이 과열되지 않으며, 생산적이지는 않지만 재미있음
     * 작은 fish 스크립트를 사용하여 현재 git diff를 기반으로 세 개의 커밋 메시지를 생성함. 여러 모델을 테스트 중이며, 아이디어가 필요할 때 유용함. 스크립트와 예시는 GitHub에서 확인 가능함
     * 대화 중 ""승자""를 선언하려고 시도하는 작은 장치를 보유함
     * Jamie Brew의 ""Comedy Writing With Small Generative Models"" 강연을 추천함. 기타를 들고 연주할 때까지 기다리면 좋음
     * Microsoft가 FLAME 모델(60M 파라미터)을 발표함. Excel 공식 수리/완성에서 훨씬 큰 모델(100B 파라미터 이상)을 능가함
     * Micro Wake Word는 ESPs에서 음성으로 깨우는 라이브러리 및 장치 모델 세트임. Home Assistants의 완전 로컬 Alexa 대체품에 최근 배포됨
     * Gemma 2B를 미세 조정하여 정부 운영 모성 건강 상담 전화에서 새로운 임산부의 긴급 메시지를 식별함
     * 약 1m 파라미터 모델을 만들어 Magic the Gathering 카드를 무작위로 생성함. Karpathy의 nanogpt를 기반으로 몇 가지 기능을 추가함. Apple 실리콘 Mac이 있다면 GitHub에서 직접 모델을 생성할 수 있음
"
"https://news.hada.io/topic?id=18879","gRPC, OpenAPI 및 REST 이해와 API 설계에서의 활용 시기 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            gRPC, OpenAPI 및 REST 이해와 API 설계에서의 활용 시기 (2020)

API 관리

  gRPC와 REST: API 설계에서 gRPC, OpenAPI, REST의 이해와 사용 시점

     * API 설계 모델: API 설계에는 주로 RPC와 REST 두 가지 모델이 사용됨. 대부분의 현대 API는 HTTP 프로토콜을 기반으로 구현됨.
     * gRPC: HTTP 2.0을 전송 프로토콜로 사용하는 RPC API 구현 기술. Google 등에서 RPC와 HTTP의 아이디어를 결합한 API를 많이 사용함.
     * HTTP의 세 가지 주요 사용 방식:
         1. REST: 클라이언트가 서버에서 제공하는 URL을 그대로 사용하며, URL 형식을 이해할 필요가 없음.
         2. gRPC: HTTP/2를 사용하지만, HTTP는 API 설계자에게 노출되지 않음.
         3. OpenAPI: 클라이언트가 URL 경로 템플릿을 사용하여 API를 호출함.

  REST

     * 특징: 클라이언트가 URL 형식을 이해할 필요가 없으며, URL은 API 사양의 일부가 아님.
     * 장점: 안정성, 일관성, 보편성 등 웹의 장점을 가짐. 엔티티 지향 모델이 더 간단하고 이해하기 쉬움.

  gRPC

     * 특징: HTTP/2를 사용하지만, HTTP의 세부 사항은 숨겨짐. 클라이언트는 절차를 호출하고 매개변수를 전달하여 API를 사용함.
     * 장점: 클라이언트 측 프로그래밍 라이브러리를 쉽게 생성할 수 있으며, 성능이 좋음.

  OpenAPI

     * 특징: URL 경로 템플릿을 사용하여 API를 호출하며, 클라이언트가 URL 형식을 이해해야 함.
     * 장점: 표준 HTTP 기술만으로 API에 접근 가능. 클라이언트 측 프로그래밍 라이브러리를 생성할 수 있음.

  gRPC와 OpenAPI의 비교

     * 유사점: 둘 다 RPC 인터페이스 정의 언어(IDL)로 사용 가능.
     * 차이점: gRPC는 HTTP 세부 사항을 숨기고, OpenAPI는 HTTP 세부 사항을 노출함.

  REST의 장점

     * 엔티티 지향 모델: 더 간단하고 이해하기 쉬우며, 시간이 지나도 안정적임.

  OpenAPI 사용 방법

     * 경로 정의: 경로와 HTTP 메서드를 사용하여 API를 정의함.

  OpenAPI의 장단점

     * 장점: RPC 모델과 유사하여 프로그래머에게 친숙함. HTTP 요청으로 매핑할 수 있음.
     * 단점: HTTP 세부 사항을 설계하는 데 많은 노력이 필요함.

  gRPC의 장점

     * 간단한 구현: 서버 측 구현이 간단하며, 클라이언트 측 라이브러리를 쉽게 생성할 수 있음.
     * 성능: 이진 페이로드를 사용하여 효율적임.

  gRPC의 단점

     * 특수 소프트웨어 필요: 클라이언트와 서버 모두 특수 소프트웨어가 필요함.
     * 프록시 기능 제한: HTTP API와 달리 프록시에서 기능을 확장하거나 수정하기 어려움.

  결론

     * API 설계 선택: REST, OpenAPI, gRPC 각각의 장단점을 고려하여 선택해야 함.
     * gRPC 사용 시 고려 사항: 클라이언트가 gRPC 기술을 채택하지 않아도 되는 경우, 내부 API인 경우 유리함.

        Hacker News 의견

     * gRPC를 배우지 말았어야 했다는 후회가 있음. 디버깅과 설정 조정에 많은 시간이 소요되었음
          + gRPC는 내부를 숨긴다고 하지만, 실제로는 많은 디버깅과 설정 조정이 필요함
          + Maven 플러그인, HTTP2와의 호환성 문제, 방화벽 문제 등으로 많은 시간을 낭비했음
          + 문서가 부실하고, 오류 메시지를 관찰 가능하게 만드는 데 어려움이 있었음
     * 오랫동안 API를 구축해왔으며, gRPC와 HTTP/REST를 사용해왔음
          + OpenAPI와 REST의 차이를 구분하는 것이 이상하다고 생각함
          + OpenAPI는 HTTP API의 동작을 문서화하는 방법이며, RESTful API를 표현할 수 있음
          + gRPC는 프로토콜 버퍼를 주고받는 RPC 메커니즘임
          + gRPC는 효율적이지만, HTTP 라이브러리만큼 강력하지 않음
     * FAANG에서 일한 경험이 있으며, 내부 서비스 라우팅에 gRPC가 유용하다고 생각함
          + RPC 프로토콜은 대규모 및 고속으로 작업을 가능하게 함
          + 그러나 고객이나 웹을 대상으로 하는 경우에는 gRPC를 사용하지 않을 것임
     * 양방향 스트리밍을 하지 않는 한, gRPC는 시간 낭비라고 생각함
          + 다양한 언어로 구현된 서비스 간의 RPC 호출을 할 때 많은 미들웨어가 필요함
     * gRPC를 사용한 프로젝트에서 성능을 이유로 도입했으나, JSON API로 전환했음
          + gRPC에 대한 경험이 부족했고, 프로젝트는 여러 문제로 인해 실패했음
     * connectrpc를 사용하면서 gRPC의 문제점을 해결하고 있음
          + buf.build를 통해 3rd party proto 파일을 쉽게 가져올 수 있음
          + SDK 자동 생성 기능이 매우 유용함
     * gRPC는 REST보다 개발 경험이 나쁘다고 생각함
          + 추가적인 도구가 필요하고, 생성된 클라이언트 코드가 복잡함
     * REST API는 초기 URI와 표준화된 미디어 타입만 알면 된다고 Roy Fielding이 언급함
     * 데이터 센터 내에서 gRPC 사용을 좋아하지 않음
          + 성능이 높지 않고, 오픈 소스 클라이언트의 품질이 낮음
          + 웹 기반 API에서는 JSON의 가독성을 선호하지만, 타입 불일치 문제가 있음
     * gRPC는 Google 외부에서는 접근하기 어렵다고 느꼈음
          + gRPC JS 클라이언트가 무겁고 불투명함
          + REST의 단순함에 비해 실행이 잘못되었다고 생각함
"
"https://news.hada.io/topic?id=18849","Ask GN: 투자하면서 정말 도움이 되는 서비스를 추천해주세요 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 투자하면서 정말 도움이 되는 서비스를 추천해주세요

   대부분이 개인 주식 투자 또는 여러가지 투자를 진행하고 계실텐데요.
   (저도 마찬가지입니다....물리면 가치투자..죠?ㅎㅎ)

   국내 증권사는 뭐 거의 거기서 거기여서,, 크게 차별화되는 서비스가 없던데,
   혹시 이 서비스는 정말 잘 쓰고 있다라는 서비스가 있으신가요??

   저는 사실 정찰병을 주로 보내는 편인데,
   이 정찰병을 서비스화 시켜서 좀 직관적으로 트래킹할 수 있으면 좋겠다 싶긴 하네요.

   투자가 어렵죠.
   정찰병을 군대로 만들 타임머신도 아니고,
   현금이 아니면 내 간크기를 확인키 어려우니...

   맞아요. 현금이냐 아니냐가 중요한거 같긴 해요. 등락 파악하는 정도는 관심 주식 등록? 같은 기능을 사용할 수 있을 거 같은데 진짜 돈이 아니면 잘 와닿지 않는달까요
"
"https://news.hada.io/topic?id=18896","Meta의 생성형 AI 조직은 DeepSeek때문에 충격에 빠져있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Meta의 생성형 AI 조직은 DeepSeek때문에 충격에 빠져있음

     * 이미 벤치마크에서 Llama 4를 앞선 DeepSeek V3 때문
     * 게다가 ""잘 모르는 중국회사가 겨우 5.5M의 훈련 비용""을 썻다고 해서 더욱 충격
     * 엔지니어들은 DeepSeek를 해부하고 가능한 모든 것을 모방하기 위해 미친듯이 움직이는 중
     * 경영진은 생성형 AI 조직에 드는 막대한 비용을 정당화하기 위해 걱정중
     * 생성형 AI 조직의 ""리더"" 1명이 DeepSeek v3 전체 훈련비용보다 더 많이 돈을 받고 있는데, 그런 리더가 수십명 있음
     * DeepSeek r1은 더 무서움. 기밀 정보는 밝힐수 없지만 곧 공개될 것
     * 엔지니어링은 작은 조직이었어야 했는데, 많은 사람들이 이 Impact Grab에 참여하고 싶어했고, 조직에서 채용을 인위적으로 부풀린게 결과적으로 모두에게 해가 되었음

댓글들

     * 구글직원1 : 딥시크가 하고 있는 일은 정말 대단. 메타뿐만 아니라 OpenAI, Google, Anthropic의 엉덩이에 불을 지피고 있음. 좋은 점은 공개 경쟁이 혁신에 얼마나 효과적인지 실시간으로 확인할 수 있다는 점.
     * 애플직원1 : 이게 내가 메타 주식을 보유한 이유. 경쟁자를 분석하고 모방하여 승리하는 것은 여러분의 DNA에 있음. 계속 열심히 노력해!
     * 메타직원1 : 많은 경영진이 기반 기술에 대해 말 그대로 전혀 알지 못하며(심지어 많은 엔지니어링 지식도 없음), 다른 경영진에게 ""더 많은 GPU = 승리""를 계속 주입중. 참여를 유도하기 위해 인스타그램에에서 AI 콘텐츠를 생성하는 것과 같은 멍청한 아이디어를 내서 상황이 더욱 왜곡됨(현재는 다소 후퇴중).
     * 메타직원2 : 그냥 DeepSeek을 사버려
     * 삼성직원1 : Sam Altman은 사기꾼이야. DeepSeek의 CEO인 LIANG Wenfeng은 Ilya Sutskever고, DeepSeek 은 예전의 OpenAI 이고, OpenAI는 ClosedAI지.
     * 구글직원2 : DeepSeek는 새로운 RL 기반 모델의 모든 구성 요소를 설명하는 논문을 작성했고, 이를 통해 Meta와 같은 회사에서 직접 복사해서 검증할 수 있음
     * 메타직원3 : 메타같은 ""세계에서 가장 큰 GPU 클러스터""를 가진 조직이 어떻게 벤치마크 10위 안에도 못들까? Grok은 조만간 DeepSeek를 능가할 것
     * 메타직원4 : 딥시크는 중국이 통제하고 있으며, 실제 데이터를 공유하지 않고 중국 공산당에 의해 심하게 검열되고 있음. ""중국 공산당이 사람들의 자유를 제한하고 있는가""라고 물어보면 답을 알 수 있음. 뭘 물어봐도 ""중국이 얼마나 위대하냐"" 등의 말만 되풀이함. 정보없이 그냥 진술만 함.
     * Chime직원: 그리고 가장 좋은 점은 이 모든 것을 H100 성능에 근접하지 않는 H800 GPU로 수행한다는 것. 정말 대단. 딥시크의 모든 분들께 존경과 찬사를 보냄. 중국에서 나온 Residual Network 논문은 신경망을 완전히 바꾸고 수십억 개의 매개변수를 사용할 수 있다는 것을 가르쳐 준 획기적인 논문이었음. 매우 어려운 문제를 해결한 중국인들을 존경함!
     * 블리자드직원: 이를 통해 인공지능 세대에는 해자가 없으며, 클로즈드 소스 모델만큼은 아니더라도 더 좋은 오픈 소스 모델이 출시될 것이라는 희망을 갖게 되었음. 이 분야에서 경쟁이 치열해질수록 우리에게도 좋은 일임.

   경쟁을 한다는 건 좋은일 같아요 👏

   그렇게 중국 견제를 하고 gpu 수출 규제까지 했는데도 저런거보면 대단하면서도 무섭고 긍정적으로는 충분한 메기 역할이라고 봅니다. 결국 OpenAI가 선도하고 있다는것에는 누구도 부정할 수 없는지라

   이념이랑 검열 얘기는 일단 빼고 보면, 이번 DeepSeek 모델들 엔지니어링 수준은 진짜 감탄이 나올 정도네요.

   V2.5 구조에서 사용했던 MLA도 천재적인 발상이라 생각했는데 이번에는 MTP 가능성까지 입증하고, R1으로 O1 모델 복제를 완벽히 성공한 데다, 수출 규제로 하드웨어가 제한된 상황에서도 훈련 기술을 뽑아낸거 보면 정말 대단합니다.

   ML에 관심 있으신 분들은 DeepSeek Technical Report V2.5, V3, R1 꼭 읽어보세요. 감탄밖에 안 나옵니다. 이걸 다 MIT 라이센스로 공개했다는 게 아직도 이해가 안 가네요

   LLaMA 같은 경우는 LLaMA 2 -> 3 에서 아키텍처 혁신이 거의 없고 훈련 스케일링만 늘렸다는 느낌이 강했는데 이게 전조였다고 봅니다.

   어차피 블라인드에 올라온 글이라 진위여부는 불확실하지만, DeepSeek가 충격을 주고 있는 것은 맞는듯
   DeepSeek-R1 모델 공개
   Deepseek - 중국 AI 경쟁을 선도하는 조용한 거인
   Deepseek V3는 과적합 여부를 테스트하는 벤치마크에서 좋지 않은 성능을 보였음
   DeepSeek v3에 대한 노트 - ""정말로 GPT-4o나 3.5 Sonnet보다 좋은가?""
"
"https://news.hada.io/topic?id=18807","미국에서 TikTok 서비스 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           미국에서 TikTok 서비스 중단

     * TikTok 미국 서비스 중단
          + TikTok이 미국에서 연방 법률로 인해 서비스가 중단되었음. 그러나 일요일 정오까지 서비스가 복구되기 시작했음.
          + 사용자들은 토요일 저녁부터 TikTok 사용 불가 메시지를 받았으며, 앱은 Apple과 Google Play 스토어에서 사라졌음.
          + TikTok은 이 상황이 일시적일 수 있음을 암시하며, 도널드 트럼프 대통령 당선자가 취임 후 해결책을 찾겠다고 언급했음.
     * 법적 배경
          + 미 의회는 TikTok의 소유주 ByteDance가 앱을 매각하거나 미국에서 금지되도록 하는 법안을 통과시켰음.
          + 바이든 대통령은 이 법안에 서명했으며, 트럼프 대통령은 이 법안의 시행을 연기할 것을 대법원에 요청했음.
          + 대법원은 법안을 지지하는 판결을 내렸으며, 바이든 행정부는 다음 행정부에 법 시행을 맡기려는 입장을 보였음.
     * TikTok의 대응
          + TikTok은 바이든 행정부가 명확한 입장을 밝히지 않는 한 미국 내 서비스 제공자들이 앱을 계속 제공하기 어려울 것이라고 주장했음.
          + 트럼프 대통령은 TikTok 금지를 90일 연기할 가능성을 언급하며, 미국이 50% 소유권을 갖는 공동 벤처를 제안했음.
     * 대체 앱과 시장 반응
          + TikTok 사용자는 대체 앱을 찾고 있으며, RedNote와 Lemon8 같은 중국 소유 앱이 주목받고 있음.
          + 그러나 Lemon8도 ByteDance 소유로, 현재 법에 의해 차단된 상태임.
     * 결론
          + TikTok은 서비스 복구를 시작했으며, 트럼프 대통령의 발언과 추가 차단된 앱에 대한 업데이트가 반영되었음.

        Hacker News 의견

     * TikTok이 미국 사용자에게 서비스를 복원하는 상황에 대해 아쉬움을 표현함. TikTok이 건강에 해롭거나 스파이웨어라는 주장은 Instagram, Twitter 등에도 적용될 수 있으며, 데이터 수집에 대한 규제가 필요하다고 주장함. 이러한 조치는 미국 기술 독점 기업들만 이롭게 함
     * 1934년 통신법은 TV와 같은 많은 통신 기술의 외국 소유를 제한함. TikTok은 대부분의 TV 채널보다 더 큰 영향력을 가지고 있어 외국 소유를 제한하는 것이 이상하지 않음
     * 정부의 TikTok에 대한 관심은 사용자 데이터 착취와는 관련이 적으며, TikTok이 현재 매우 활발한 ""회색 지대"" 갈등에서 공격적으로 무기화된다는 점이 문제임. 일반인은 회색 지대 갈등이 무엇인지 잘 모름
     * 서구 언론의 인지적 편향이 언론의 자유를 서구의 관점에서 정의하는 경향이 있음. 다른 나라의 검열과 비교함
     * 미국의 자유의 땅에서 소셜 미디어 앱을 금지하는 것은 놀라운 일임. 중국의 Facebook 금지를 비판하는 것과 모순됨
     * 정보는 21세기의 금이며, 정보 흐름을 통제하는 자가 부와 권력을 가짐. TikTok의 문화적 힘이 크며, 중국이 그 힘을 가지는 것이 두려움
     * TikTok을 처음 다운로드했지만 계정을 만들지 않음. 사용하지 않더라도 다운로드한 것은 상실감 때문임. TikTok 금지를 지지하지만, 이번 금지는 잘못된 이유로 이루어짐
     * TikTok이 미국에서 몇 시간 전에 중단되었고, 모든 사용자가 동일한 메시지를 받음. 금지를 추진했던 인물이 앱을 구하려고 함
     * 유럽인으로서, 성공적이고 가치 있는 회사를 미국에 팔라고 요구하는 것은 구식 제국주의적 사고라고 생각함. Bytedance가 미국인에게 해를 끼친다고 생각한다면, 소셜 미디어 회사에 대한 규칙을 수정해야 함
"
"https://news.hada.io/topic?id=18848","메타인지적 게으름: 생성형 AI가 학습 동기에 미치는 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    메타인지적 게으름: 생성형 AI가 학습 동기에 미치는 영향

   죄송하지만, 제공된 링크는 유효한 기사 내용을 포함하고 있지 않습니다. 다른 기사나 내용을 제공해 주시면 요약 및 번역을 도와드리겠습니다.

        Hacker News 의견

     * 질문에 대한 답을 직접 얻거나 연구를 통해 찾을 수 있다면, 후자가 더 많은 학습을 제공함. 대부분의 사람들과 회사는 빠르고 효율적인 해결책을 선호함.
          + ChatGPT를 사용하여 질문을 하면, 답변을 기반으로 더 많은 질문을 하게 되며, 이는 호기심을 자극하고 더 깊이 있는 학습을 유도함.
          + 인터넷 검색은 종종 편향된 의견을 접하게 되며, 이는 호기심을 자극하지 못함.
          + 호기심이 있는 사람은 학습을 하게 되며, 그렇지 않다면 주어진 답변에 만족함.
     * ChatGPT와 같은 LLM의 위험성은 그 존재 자체가 아니라, 즉각적인 답변을 얻으려는 유혹에 있음.
          + 문제를 스스로 생각하는 것이 중요하며, 이는 연습을 통해 향상될 수 있음.
     * ChatGPT를 통해 초기 답변에 대해 더 세부적인 질문을 할 수 있는 것이 Google 검색보다 큰 장점임.
          + 전통적인 검색 엔진에서는 질문을 정확하게 설정할수록 비SEO 최적화된 결과를 얻기 어려움.
     * 기술의 발전은 학습 방법에 영향을 미침.
          + LLM을 학습 보조 도구로 활용하는 것이 중요함.
     * 휴대폰과 노트북의 발전은 정보 접근 방식을 변화시킴.
          + 대화 중에 즉각적인 검색을 하지 않음으로써 사회적 상호작용을 유지함.
     * ""메타인지적 게으름""은 AI에 의존하여 학습 과정을 효과적으로 조절하지 못하는 것을 의미함.
          + 이는 도구에 의존하여 인지적 작업을 외주화하는 것과 유사함.
     * GPS 사용 전에는 경로를 쉽게 기억했으나, 현재는 안내에 의존하여 기억하는 데 시간이 더 걸림.
          + LLM을 통한 안내도 유사한 영향을 미침.
     * GenAI가 생성한 코드를 검토하는 것은 경험 많은 개발자에게 유용함.
          + 초보자에게는 도움이 되지 않을 수 있으며, 그들이 무엇을 주의해야 하는지 모를 수 있음.
     * deepseek-r1과 같은 ""추론"" LLM은 현재로서는 대체할 수 없는 수준임.
          + 초보 개발자는 혼란스러울 수 있으며, 잘못된 방향으로 이끌릴 수 있음.
          + 통계 모델에 과도하게 의존하는 것은 교육과 미래 개발자의 성과에 부정적 영향을 미칠 수 있음.
"
"https://news.hada.io/topic?id=18809","Forgejo: 자체 호스팅 경량 소프트웨어 포지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Forgejo: 자체 호스팅 경량 소프트웨어 포지

     * Forgejo 소개
          + Forgejo는 경량의 자체 호스팅 소프트웨어 포지로, 설치가 쉽고 유지보수가 간단함.
          + Codeberg e.V.라는 비영리 조직의 지원을 받으며, 완전한 자유 소프트웨어로 신뢰할 수 있음.
          + 보안, 확장성, 연합 및 프라이버시에 중점을 둠.
     * Forgejo의 장점
          + 소프트웨어 개발 과정을 제어하고 프로젝트를 자체 호스팅하여 품질 높은 소프트웨어를 제공할 수 있음.
          + 사용자 경험이 협업과 생산성을 위해 설계됨.
          + GitHub의 대안으로, 사용자에게 친숙한 환경을 제공하여 원활한 전환을 지원함.
          + 설치 및 유지보수가 용이하며, 서버 관리에 최소한의 노력이 필요함.
          + 풍부한 기능을 제공하면서도 낮은 서버 프로필을 유지하여 다른 포지보다 적은 자원을 요구함.
          + 100% 자유 소프트웨어로 보장되며, 자체 프로젝트 개발에도 자유 소프트웨어만 사용함.
     * 미래와 참여
          + Forgejo는 소프트웨어 포지의 혁신과 분산 플랫폼을 통한 협업 소프트웨어 개발을 목표로 함.
          + 지역화, 코드, 연합, 릴리스 관리, 사용자 연구, UX 및 사용성, 커뮤니티 관리, 문서화, 웹 디자인, 거버넌스 등 다양한 분야에서 기여를 환영함.
     * 기타 정보
          + Codeberg에서 기여 가능하며, Liberapay를 통한 기부도 가능함.
          + 다양한 커뮤니티 및 리소스를 통해 Forgejo와 소통할 수 있음.

        Hacker News 의견

     * Forgejo는 Gitea의 포크로, 비영리로 관리되며 모든 것이 자유 라이선스로 제공됨
          + 커뮤니티는 Matrix와 Mastodon을 통해 소통하며, Codeberg에서 운영 중임
          + Gitea와 GitHub와 유사하며, 소스 코드는 Codeberg에서 확인 가능함
     * Forgejo가 Gitea에서 분리된 이유는 FOSS 창작자들이 재정적 어려움을 겪었기 때문임
          + Gitea는 유지보수를 위한 다양한 방법을 시도했으나, 일부 대기업이 기여 없이 Gitea를 사용함
          + Bruce Perens는 대기업들이 FOSS를 이용하지만 개발자들은 보상을 받지 못한다고 지적함
     * Forgejo의 흥미로운 점은 포지 연합 작업을 진행 중이라는 것임
          + GitHub와 GitLab도 연합을 지원하면 좋겠지만, 가능성은 낮음
          + 대안으로 P2P 솔루션인 Radicle이 있음
     * Fedora Project가 Forgejo로 전환 중임
     * Gogs에서 Gitea, 그리고 Forgejo로 이주한 사용자는 Forgejo가 훌륭한 소프트웨어라고 평가함
          + 개인 git 저장소를 SSH 서버에 호스팅하며, Forgejo는 코드 공유 시 유용함
     * Forgejo의 목적을 명확히 하기 위해 초기 페이지에서 더 명확히 설명할 필요가 있음
     * Gitlab CE에서 Forgejo로 전환한 사용자는 Forgejo의 경량성과 간편한 업데이트를 칭찬함
          + Jekyll 등을 사용해 정적 웹사이트를 업데이트하며, ActivityPub 기반 통합을 기대 중임
     * 코드 리뷰 경험에 대한 질문이 있으며, GitHub의 리뷰 도구는 제한적이라고 평가됨
          + Gerrit은 기본 모델이 합리적이지만 성능 문제와 거친 부분이 있음
     * Gitea에서 Forgejo로의 이주에 대한 사용성 차이에 대한 질문이 있음
          + 포크는 라이선스 및 프로젝트 소유권 문제로 인해 발생했으며, Gitea는 여전히 개발 중임
     * Forgejo는 자체 호스팅 경량 소프트웨어 포지로, 설치가 쉽고 유지보수가 간단함
"
"https://news.hada.io/topic?id=18909","직접 제작하는 Build It Yourself 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     직접 제작하는 Build It Yourself 프로그램

     * 또 다른 의존성에 대한 생각
          + 의존성에 대한 새로운 관점을 제안함. 의존성의 과도한 사용을 줄이고, 직접 코드를 작성하는 방향으로 전환할 필요가 있음.
     * 의존성 문제
          + ""의존성 소모""는 개발자들이 생산성을 위해 설치하는 업데이트, 패치, 감사, 전이적 의존성의 끝없는 반복임.
          + JavaScript와 Rust는 특히 의존성 문제에 취약함. 예를 들어, 새로운 Tokio 프로젝트는 28개의 크레이트를 포함하고, Rocket 프로젝트는 172개로 늘어남.
     * 터미널 크기 문제
          + terminal_size 크레이트는 터미널 크기를 측정하는 간단한 기능을 제공하지만, 여러 추가 크레이트를 필요로 함.
          + 이로 인해 수천 개의 다른 기능을 컴파일해야 하는 상황이 발생함.
     * 의존성의 필요성
          + 플랫폼 추상화 라이브러리 위에 구축되어 있어, 코드 중복을 피하고 컴파일 시간을 줄이기 위해 업데이트가 필요함.
          + 보안 문제의 주요 원인이 되는 경우가 많음.
     * 코드의 목표
          + 코드가 업데이트가 필요 없는 방식으로 작성되어야 함. Rust 생태계에서는 안정적인 코드가 불이익을 받음.
     * 직접 코드 작성의 장점
          + 직접 코드를 작성하면 새로운 크레이트가 필요 없고, 유지보수의 필요성이 줄어듦.
          + ChatGPT와 같은 도구를 사용하여 의존성 없는 구현을 빠르게 작성할 수 있음.
     * 오픈 소스와 기업 문화
          + 기업의 코드 리뷰 문화가 오픈 소스 소프트웨어에 영향을 미침.
          + 새로운 라이브러리를 사용하는 것이 긍정적으로 여겨짐.
     * 새로운 관점의 필요성
          + 작은 기능을 직접 작성하는 엔지니어를 칭찬해야 함.
          + 큰 크레이트 그래프에 대해 의심을 가져야 함.
     * 중요한 라이브러리
          + 복잡한 문제를 해결하는 중요한 라이브러리도 존재함. 예를 들어, 그래픽 라이브러리나 프로토콜 구현 등.
     * 직접 구축의 중요성
          + 적절할 때 직접 구축하는 것을 축하해야 함.
          + 의존성이 적거나 없는 오픈 소스 라이브러리를 구축하는 라이브러리 저자에게 공로를 인정해야 함.
     * 결론
          + 의존성을 줄이고 직접 코드를 작성하는 방향으로 전환해야 함.
          + minijinja는 의존성을 최소화한 예시로, serde 하나만을 의존함.

        Hacker News 의견

     * Rust 언어는 좋아하지만, Rust의 의존성 문제는 싫음. C++의 의존성 관리가 더 나음. C++에서는 의존성을 스스로 통제할 수 있지만, Rust에서는 너무 많은 의존성이 생겨 포기하게 됨. 보안 측면에서도 내가 무엇을 배포하는지 알 수 없음. Rust는 ABI 호환성이 없고 공유 라이브러리 문화도 부족함. 이는 OS 패키지 배포 모델을 파괴함.
     * 터미널 API는 안정적이지 않음. TIOCGWINSZ ioctl은 표준화되지 않았고, POSIX에 tcgetwinsize() 함수가 추가된 것은 2024년임. Windows 쪽은 더 복잡함.
     * 2006년에 만든 웹 앱을 부활시킴. 새로운 CI/CD 기술을 배우기 위해 앱의 배포 과정을 과도하게 설계함. PHP와 MySQL을 사용했으며, 대부분의 코드를 직접 작성함. 19년 된 앱을 부활시키는 데 한 시간밖에 걸리지 않음. 반면, 현재 직장에서 사용하는 Spring Boot 앱은 의존성 문제로 업데이트가 어려움.
     * NodeJS는 경력에 큰 영향을 미쳤지만, NPM은 많은 문제를 일으킴. 새로운 의존성을 추가하려고 하면 다른 의존성과 충돌함. Expo의 경우 기본 React Native 프로젝트가 Android에서 빌드되지 않는 문제가 있음. 대규모 프로젝트도 비기능적인 템플릿을 배포할 수 있다는 점에서 자신감을 얻음.
     * Rust 생태계는 Go와 비교했을 때 의존성이 많음. Go는 인터페이스가 암시적으로 만족되므로 추가적인 의존성이 필요 없음.
     * 라이브러리의 추상화는 숨겨진 비용이 있음. 패키지가 디자인을 변경하면 불안정성이 생김. 간단한 것이 가장 오래 살아남음. Rust뿐만 아니라 다른 언어에서도 비슷한 문제를 봄.
     * ChatGPT나 Cursor가 의존성 없는 구현을 빠르게 만들어주는 것이 더 빠름. 많은 SaaS/3rd party 서비스 의존성이 이미 해결된 문제임.
     * Flask와 Bottle은 비슷한 기능을 가졌지만, Flask가 더 인기를 끌었음. Bottle은 단일 파일로 의존성이 없어 프로젝트에 쉽게 복사할 수 있었음. 그러나 현대적인 Python 관행을 따라가지 못해 구식으로 느껴짐.
     * 스스로 솔루션을 개발할 수 있는 능력 있는 엔지니어가 필요함. 기존 라이브러리보다 더 나은 솔루션을 쉽게 만들 수 있음. 프로젝트에서 마크다운 변형을 위한 파서를 작성했지만, 팀원들이 유지보수를 이유로 사용하지 않음.
     * 하나의 함수만 사용하면서 수백 개의 함수를 컴파일하는 것은 문제가 있음. 3rd party 의존성을 업데이트하는 프로젝트에서 수학 라이브러리의 한 메서드만 사용하고 있었음. 엔지니어에게 Wikipedia 페이지를 참고하여 직접 메서드를 작성하도록 권장함. 문제는 3rd party 의존성을 사용하는 것이 아니라, 라이브러리의 작은 부분만 가져오는 개념이 필요함. ""마이크로프레임워크""가 해결책이 될 수 있음.
"
"https://news.hada.io/topic?id=18857","마스터카드 DNS 오류 수년간 미발견 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        마스터카드 DNS 오류 수년간 미발견 문제

     * MasterCard의 DNS 설정 오류
          + MasterCard는 도메인 네임 서버 설정의 오류를 수정함.
          + 이 오류로 인해 사용되지 않는 도메인 이름을 등록하여 인터넷 트래픽을 가로채거나 우회할 수 있었음.
          + 이 오류는 약 5년 동안 지속되었으며, 보안 연구자가 $300를 들여 도메인을 등록하여 사이버 범죄자들이 이를 악용하지 못하도록 함.
     * 오류 발견 및 해결 과정
          + 2025년 1월 14일, az.mastercard.com 도메인에 대한 DNS 조회에서 잘못된 도메인 이름 a22-65.akam.ne가 발견됨.
          + MasterCard는 Akamai의 DNS 서버를 사용하며, 모든 서버 이름은 ""akam.net""으로 끝나야 하지만, 하나의 서버가 ""akam.ne""로 잘못 설정됨.
          + 보안 컨설턴트 Philippe Caturegli가 이 오류를 발견하고, akam.ne 도메인을 등록하여 문제를 해결함.
     * 잠재적 위험 및 대응
          + Caturegli는 akam.ne 도메인에 DNS 서버를 설정한 후, 전 세계에서 수십만 건의 DNS 요청을 수신함.
          + 이메일 서버를 설정했다면, MasterCard.com이나 다른 영향을 받은 도메인으로 향하는 이메일을 수신할 수 있었을 것임.
          + Caturegli는 MasterCard에 이 문제를 알리고, 도메인을 인수할 수 있도록 함.
     * MasterCard의 반응
          + MasterCard는 이 오류가 시스템 보안에 위협이 되지 않았다고 주장함.
          + Bugcrowd를 통해 Caturegli에게 LinkedIn 게시물을 삭제해 달라는 요청을 받음.
          + Caturegli는 Bugcrowd를 통해 문제를 보고하지 않았으며, 도메인을 등록하여 악용을 방지했다고 설명함.
     * DNS 서버의 중요성
          + 대부분의 조직은 최소 두 개의 권한 있는 도메인 네임 서버를 보유함.
          + MasterCard는 다섯 개의 DNS 서버를 사용하며, 하나의 도메인만 제어해도 전체 DNS 요청의 약 1/5만 볼 수 있음.
          + Caturegli는 공용 트래픽 포워더나 DNS 리졸버를 사용하는 사용자가 많아, 하나의 리졸버가 잘못된 결과를 캐시하면 더 많은 트래픽을 우회할 수 있다고 설명함.
     * Caturegli의 추가 의견
          + Caturegli는 MasterCard가 감사하거나 도메인 구매 비용을 보상할 것이라고 기대했음.
          + MasterCard의 공개 성명에 대해 LinkedIn에서 반박하며, DNS 조회 기록을 공유함.
     * 기타 관련 정보
          + akam.ne 도메인은 2016년 12월에 처음 등록되었으며, 2018년에 만료됨.
          + 비슷한 오타 도메인인 awsdns-06.ne도 Yandex 사용자에 의해 등록되었으며, 독일의 ISP에서 호스팅됨.

        Hacker News 의견

     * 연구와 관련된 의견으로, 공개 등록 가능한 네임서버는 드문 경우이며, 클라우드 제공자의 IP 주소로 직접 매핑되는 것이 더 흔함
          + 클라우드 서비스의 범위와 가시성 부족으로 인해 기업은 하위 도메인에서 취약점을 가질 가능성이 높음
          + 버그 바운티 프로그램은 종종 하위 도메인 탈취를 유효한 보안 위협으로 인정하지 않음
          + 이러한 구성 관리 실수로 인해 민감한 정보가 유출된 사례가 있음
          + 현재의 취약점 공개 환경은 기업이 취약점을 인정하지 않도록 쉽게 만듦
          + 이러한 취약점은 TLS 인증서를 발급하는 데 악용될 수 있음
     * Bugcrowd와 관련된 이야기는 예상 밖의 내용임
          + Bugcrowd가 플랫폼 외부의 행동을 규제하려고 하거나, Mastercard가 Bugcrowd 직원을 사칭하는 것일 수 있음
          + 두 가지 옵션 모두 바람직하지 않음
     * 보안 연구자가 더 많은 증거를 수집하기 위해 더 깊이 침투할 가능성이 있음
          + 연구자에게 충분한 보상을 제공하여 영향이 축소되도록 해야 함
          + 연구자를 억압하려는 시도는 잘못된 PR 직원의 행동일 수 있음
     * akam.ne 도메인은 이전에 등록된 적이 있으며, 유사한 오타 도메인이 등록된 사례가 있음
          + 이러한 도메인은 독일의 인터넷 서버와 연결되어 있었음
     * 우크라이나에서 MasterCard의 SSL 인증서가 만료되어 온라인 거래에 문제가 발생했음
          + 인증서 갱신이 이루어지지 않았고, 서비스가 조용히 중단됨
     * MasterCard의 실수로 인해 도메인이 원래 TLD와 한 글자 차이인 경우 문제가 발생할 수 있음
          + 이러한 도메인이 존재하지 않으면 잘못된 DNS 요청이 발생하지 않을 것임
     * Vercel을 사용하는 벤더의 도메인 변경으로 인해 보안 사고가 발생했음
          + 도메인이 풀로 돌아가자마자 공격자가 이를 획득하여 악성코드를 배포함
     * 도메인 이름을 Akamai에 제공했어야 하며, Akamai는 이를 처리할 책임이 있음
     * MasterCard 외에도 캐나다의 은행과 Canada Post에서도 유사한 문제가 발생했음
          + Canada Post는 문제를 해결했지만, 은행은 문제를 해결했다가 다시 발생시킴
"
"https://news.hada.io/topic?id=18813","RSS 피드를 통한 폐쇄형 생태계 및 알고리즘 블랙박스 탈출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   RSS 피드를 통한 폐쇄형 생태계 및 알고리즘 블랙박스 탈출

     * RSS 또는 Atom이란
          + RSS와 Atom은 웹 콘텐츠 구독에 사용되는 피드 형식임. 이들은 본질적으로 분산형임.
          + 피드는 게시자가 웹사이트에 콘텐츠를 게시하고, 사용자가 원하는 클라이언트를 통해 이를 소비할 수 있게 함.
          + 콘텐츠 제작자는 사용자가 콘텐츠를 소비하는 방식을 결정할 수 없음. 특정 키워드와 일치하는 콘텐츠를 필터링하거나, 콘텐츠의 우선순위를 정할 수 있음.
          + 개방적이고 분산된 표준을 사용함으로써, 소비하는 콘텐츠와 그 방식을 통제할 수 있음.
     * 피드 리더
          + RSS 또는 Atom 피드를 소비하려면 클라이언트가 필요함. 다양한 옵션이 존재함.
          + Miniflux와 FreshRSS 같은 웹 애플리케이션을 자가 호스팅할 수 있음. macOS와 iOS용 NetNewsWire, 안드로이드용 Feeder 같은 네이티브 클라이언트도 있음.
          + 터미널에서 작업하는 것을 좋아하는 사람들을 위한 명령줄 클라이언트인 Newsboat도 있음.
          + 데이터를 소유하는 정신으로 자가 호스팅을 추천하지만, FreshRSS는 설정과 호스팅을 모르는 사람들을 위한 호스팅 인스턴스를 제공함.
     * 피드 찾기
          + 많은 웹사이트가 피드로 연결되는 HTML 태그를 포함함.
          + 페이지의 소스 코드를 확인하여 찾을 수 있음. 일부 RSS/Atom 클라이언트는 이를 자동으로 해줌. RSS Lookup 같은 도구를 사용할 수도 있음.
     * 모임 및 이벤트
          + 지역에서 열리는 모임과 이벤트를 최신 상태로 유지하기 위해 RSS를 사용함.
          + Meetup.com은 피드로 연결되지 않지만, 이벤트 페이지에 /rss를 추가하여 RSS 피드를 찾을 수 있음.
     * YouTube 및 PeerTube 채널
          + YouTube 계정 없이도 새로운 비디오 알림을 받을 수 있음.
          + YouTube 채널을 팔로우하려면 https://www.youtube.com/feeds/videos.xml?channel_id=CHANNEL_ID를 사용함.
          + YouTube 재생목록도 구독할 수 있음.
          + PeerTube는 채널 페이지의 구독 버튼 뒤에 ""RSS로 구독"" 옵션이 있음.
     * 팟캐스트
          + 팟캐스트는 에피소드를 배포하기 위해 RSS를 사용함. 팟캐스트 웹사이트나 podcastindex.org 같은 디렉토리 사이트에서 피드 링크를 찾을 수 있음.
     * 소셜 미디어 및 Fediverse 계정
          + Bluesky 계정을 RSS로 팔로우할 수 있음. Reddit이나 Fediverse의 커뮤니티도 구독 가능함.
          + Lemmy는 커뮤니티 개요 페이지에서 피드 링크를 제공하며, 피드 정렬을 설정할 수 있음.
          + Reddit의 경우, 커뮤니티 이름에 .rss를 추가하여 피드를 구독할 수 있음.
     * 뉴스레터
          + 이메일 주소를 공유하지 않고 뉴스레터를 구독하려면 Kill the Newsletter를 사용할 수 있음. 이는 이메일을 RSS 피드로 변환함.
     * 블로그 및 웹사이트 게시물
          + 많은 웹사이트가 최신 게시물의 피드를 제공함.
     * 피드가 없는 웹사이트
          + 피드가 없는 웹사이트의 경우, PolitePol을 사용하여 웹사이트를 스크랩하고 피드를 생성할 수 있음. 또는 웹사이트 소유자에게 피드 구현을 요청할 수 있음.
     * 새로운 콘텐츠 발견
          + 독점 알고리듬을 피하고 분산형 대안을 선택하는 것은 콘텐츠 발견이 어려울 수 있음.
          + 피드 리더가 더 스마트해지고, 사용자에게 유익한 방식으로 피드를 최적화하고 큐레이션하는 기술을 포함하기를 바람.
          + 추천 및 개인화 알고리듬에 대한 기회가 여전히 많음.
     * 검색
          + 원하는 콘텐츠 유형을 알고 있다면 검색이 좋은 방법임. Marginalia 검색은 비상업적 결과에 중점을 둠.
     * 큐레이션 및 추천
          + 일부 사람들은 자신에게 흥미로운 피드를 큐레이션하여 블로그롤에 게시함.
          + 관심사와 관련된 커뮤니티를 팔로우하거나 Mastodon이나 Bluesky에서 사람들을 팔로우할 수 있음.
          + 1mb.club, 512kb.club, ooh.directory 같은 디렉토리는 새로운 개인 웹사이트를 찾는 좋은 방법임.
     * 결론
          + 벽으로 둘러싸인 정원과 불투명한 추천 알고리듬에서 벗어나기. RSS를 사용하여 미디어 소비를 더 통제하고 의도적으로 할 수 있음.
          + 콘텐츠를 게시하는 경우, 사람들이 제3자에 의존하지 않고 콘텐츠를 발견할 수 있도록 피드를 게시해야 함.
          + 소유하지 않은 플랫폼에서의 악순환을 끊기 위해 분산 시스템을 함께 구축하자.

        Hacker News 의견

     * 블로그를 찾는 좋은 방법은 특정 주제나 프로젝트와 관련된 블로그를 모아놓은 '플래닛'을 구독하는 것임
          + 예시로 GNOME, KDE, Mozilla, Document Foundation의 플래닛이 있음
          + 좋은 플래닛이 있다면 공유해달라는 요청이 있음
          + 현재 Feedly를 사용 중이나, 기기 간 동기화가 잘 되지 않는다는 의견이 있음
     * 새로운 웹 코너를 만들고자 하는 시도로 Lynkmi라는 소셜 링크 공유 사이트를 소개함
          + 모든 태그에 RSS 피드가 자동으로 생성되며, 계정 없이도 팔로우 가능함
          + 사용자가 게시하는 모든 내용을 팔로우하는 대신, 특정 관심사만 선택적으로 팔로우할 수 있음
          + 가입을 원하면 이메일을 통해 연락 가능함
     * RSS가 다시 인기를 얻고 있는지에 대한 의문을 제기함
          + 최근 RSS 관련 게시물과 댓글이 많아졌음을 언급함
          + Mashups라는 Yahoo Pipes 클론을 출시했음을 알림
     * RSS를 더 많이 활용할 수 있는 방법에 대한 고민을 공유함
          + 많은 콘텐츠 제작자들이 RSS를 지원하지 않는 플랫폼에 있다는 문제를 지적함
          + 소비자로서 어떤 압력을 가할 수 있을지에 대한 질문을 던짐
     * diff.blog라는 개발자 블로그 집계 사이트를 소개함
          + 현재 2000개 이상의 개발자 블로그를 추적 중임
          + 블로그와 주제를 팔로우할 수 있음
     * 이번 주에 많은 RSS 관련 이야기가 있다는 점에서 트렌드를 감지함
     * Facebook에서 친구들의 게시물을 시간 순서대로 볼 수 있는 방법을 찾고자 함
          + 무작위로 추천되는 게시물 때문에 실제 친구들의 콘텐츠를 놓치고 있다는 문제를 제기함
     * 매주 큐레이션된 터미널 도구 피드를 제공하는 Terminal Trove를 소개함
          + 피드의 미리보기를 쉽게 볼 수 있도록 제공함
     * 고급 RSS 리더나 브라우저가 웹의 매력을 다시 가져올 수 있을 것이라는 의견을 제시함
     * Newsboat라는 RSS 리더를 소개함
          + 이메일을 Mutt에서 사용하는 사람이라면 Newsboat도 좋아할 것이라는 추천을 함
"
"https://news.hada.io/topic?id=18882","Nue - Standard-First 웹 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Nue - Standard-First 웹 프레임워크

     * Next.js 보다 30배 작은 설치 파일 및 번들 크기. 속도는 100배 빠름
     * 표준 우선(Standards First): 현대 브라우저의 표준을 최대한 활용하여 최소한의 코드로 고품질의 제품을 개발 가능
     * HTML 우선(HTML First): 시맨틱 HTML을 기반으로 레이아웃, 서버 컴포넌트, 인터랙티브 요소를 구현하여 개발자, 검색 엔진, 스크린 리더에 모두 적합한 경험을 제공
     * 콘텐츠 우선(Content First): 마케팅과 문서화를 풍부하게 지원하는 Markdown 형식을 사용하며, 콘텐츠는 JavaScript가 아닌 깨끗하고 접근 가능한 파일에 저장됨
     * 디자인 시스템(Design Systems): 현대적이고 체계적인 CSS를 활용하여 적은 코드로도 우수한 인터페이스를 제공 가능

주요 장점

     * 빠른 HMR(Hot Module Replacement)과 툴링: 50ms 이하의 업데이트 속도로 스타일, 데이터, 컴포넌트가 즉각적으로 반영됨
     * 간결한 코드: TypeScript 가져오기(import), 유틸리티 클래스, 복잡한 상태 관리가 필요하지 않음. 콘텐츠, 구조, 스타일링이 자연스럽게 분리됨
     * 빠른 페이지 로드 속도: 단일 요청만으로 페이지 로드 가능. 프레임워크 초기화, 누적 레이아웃 변화, JavaScript 로딩 대기 없음

Nue가 적합한 사용자

     * 초보 웹 개발자: HTML, CSS, JavaScript를 직접 활용하며 프런트엔드 개발의 불필요한 복잡성을 피하고자 하는 사용자
     * 경험 많은 JavaScript 개발자: React 스택의 지나친 추상화에 피로를 느끼고, 더 간단한 방식으로 전문적인 웹사이트를 개발하고자 하는 사용자
     * 디자인 중심 팀: 사용자 경험과 디자인 시스템을 우선시하며, 가볍고 효율적인 웹사이트를 구축하려는 사용자

Nue의 비전

     * 프런트엔드 생태계의 불필요한 추상화와 복잡성을 제거하여 개발 과정을 단순화하고 최적화하는 것이 궁극적인 목표

   간단하게만 훑어봐서 그런지는 모르겠지만, 매력을 느끼지 못하겠네요. 혹시 한 입 드셔보신 분들 계신가요?

   nuejs 개발자가 전에 tailwind 커뮤니티랑 크게 충돌한 적이 있는데, 그거 보고 써보고싶다는 생각이 아예 사라짐

   무슨일인가 검색 해봤는데 제가 느꼈던 테일윈드의 기괴함을 똑같이 지적하고 있네요.
   https://nuejs.org/blog/tailwind-misinformation-engine/
   인라인 클래스로 스타일링 하기... 이게 정말 올바른 일 일까요? 편리를 떠나서 의미론적으로..

   진짜 엄청 작고 빠르게 작동해야하는게 아니면 써야되겠다라는 생각은 안드네요 ..
   htmlx 보는 느낌입니다
"
"https://news.hada.io/topic?id=18915","OpenRA – 현대 시대를 위해 재구성된 클래식 전략 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OpenRA – 현대 시대를 위해 재구성된 클래식 전략 게임

    Playtest 20241228

     * 새해를 맞아 Playtest 20241228을 출시함. 여러 중요한 수정과 소규모 기능 추가가 포함됨.
     * 주요 변경 사항:
          + 사보타주가 이동 중에도 은폐 가능해짐
          + 지도 편집기에 삭제 영역 버튼 추가
          + 전장 뉴스 드롭다운 개선
          + 유닛 설명 및 백과사전 형식 개선
          + Dune 2000이 설치된 음악과 비디오를 인식하지 못하는 문제 수정
          + 수확기가 대기 명령을 제대로 수행하지 않는 문제 수정
          + 게임 창이 Windows 10에서 오류를 일으키는 문제 수정
          + 여러 충돌 문제 및 기타 사소한 버그 수정
     * Tiberian Dawn HD 플레이테스트 다운로드 가능
     * 포럼, 커뮤니티 Discord 서버, GitHub에서 피드백 공유 권장

    OpenRA Playtest 20241116

     * OpenRA 팀이 1년간의 개발 끝에 Playtest 20241116을 발표함. 향상된 비주얼, 새로운 도구, 전반적인 성능 개선 제공.
     * OpenRA는 이제 기본적으로 후처리 효과를 지원함.

      새로운 지도 편집기

     * 현대적 인터페이스와 통합된 디자인으로 새롭게 개편된 지도 편집기 소개
     * 플레이어의 사용 방식을 고려하여 창의적 요구에 맞게 재구성됨
     * 새로운 지도 편집기 기능:
          + 드래그 가능한 선택 및 액터
          + 측정 도구
          + 마커 레이어
          + 플레이 버튼 등

      새로운 EVA 데이터베이스

     * Tiberian Dawn 모드에 백과사전 추가. 커뮤니티의 요청에 따라 유닛, 구조물, 기술에 대한 정보를 통합한 게임 내 자원 제공
     * HD 아트 자산 지원이 크게 개선됨. ""Tiberian Dawn HD"" 프로젝트의 로드 시간과 성능이 향상됨
     * 이 미리보기는 20241116 플레이테스트와 멀티플레이어 호환 가능

      기타 변경 사항

     * 게임 자산을 The Ultimate Collection의 Steam 릴리스에서 설치 가능
     * 고품질 Dune 2000 자산으로 전환하고 추가 시각적 개선 포함
     * 두 개의 Red Alert 미션 추가 및 여러 미션의 품질 개선
     * Red Alert 및 Dune 2000 밸런스 변경
     * 스커미시 옵션이 매치 간에 초기화되지 않음
     * 추가 언어 지원을 위한 중요한 진전이 이루어짐
     * GitHub에서 전체 변경 로그 확인 가능
     * 포럼, 커뮤니티 Discord 서버, GitHub에서 피드백 공유 권장

        Hacker News 의견

     * 오픈 소스 프로젝트를 기반으로 모더들이 RA, RA2, Tiberian Sun, Tiberian Dawn 등의 세계관을 Combined Arms 모드로 확장한 것에 대한 의견임
          + 새로운 팬이 만든 C&C 유니버스의 항목으로 볼 가치가 있음
          + 모드의 규모가 매우 큼
     * 게임의 OST가 훌륭함
          + 공식 CD 데이터를 무료 릴리스에서 다운로드할 것을 권장함
     * 원작 게임에 충실하면서도 현대화된 게임플레이를 제공하는 점이 마음에 듦
          + Open RA가 추가한 현대화된 게임플레이가 원작과 비교할 때 매우 두드러짐
          + 이제는 원작으로 돌아갈 수 없음을 언급함
     * 이전 논의 링크 제공
          + 다양한 링크를 통해 관련 논의에 접근할 수 있음
     * 이 게임을 자주 플레이함
          + 멀티플레이어를 할 때 유용한 빌드 오더를 제공함
     * 최고의 RTS 중 하나로 평가함
          + 매일 밤 게임을 하며 실력을 키움
          + 강력히 추천함
     * 과거에 RA와 다른 C&C 게임을 모드하여 커스텀 모델을 추가했던 기억을 언급함
          + 이러한 프로젝트가 그로부터 시작되었는지 궁금해함
     * aoe2에 대한 유사한 프로젝트를 보고 싶어함
          + OpenAge가 있지만 아직 플레이 가능한 수준은 아님
     * OpenRA 엔진으로 구축된 RTS OpenHV를 추천함
          + 관련 링크 제공
     * Red Alert 2에 대한 유사한 프로젝트를 원함
          + Steam Deck에서 잘 작동하지만 큰 전투에서는 종종 끊김
          + 현대적이고 네이티브한 Linux 포트를 희망함
"
"https://news.hada.io/topic?id=18844","HN 문의: Facebook 없이 지역 커뮤니티 조직 방법?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN 문의: Facebook 없이 지역 커뮤니티 조직 방법?

     * 지역 사회 이동 계획
          + Facebook에서 자체 플랫폼으로 지역 사회를 이동시키고자 하는 필요성 제기
          + 기존의 Facebook 의존성을 줄이고 독립적인 플랫폼 구축을 희망함
     * 현재 상황
          + 사용자는 대도시에서 더 작은 시골 지역으로 이주했으며, 약 5-6개의 소규모 마을이 Facebook을 통해 연결되어 있음
          + 모든 활동이 Facebook에서 이루어지고 있음
     * 요구 사항
          + 자체 호스팅 가능하고 연합된 플랫폼을 선호함
          + 기존의 Facebook 대안으로 사용할 수 있는 기성 솔루션이나 협력자를 찾고자 함

        Hacker News 의견

     * Facebook의 기능을 대체할 플랫폼을 찾기 위해서는 커뮤니티가 사용하는 모든 기능을 명확히 해야 함
          + 예를 들어, 공유 이벤트 캘린더, 그룹, 개인 메시징, 비디오 호스팅, 라이브 피드 등이 있음
          + 새로운 플랫폼에 로그인할 때 기존 Facebook ID를 사용할 것인지, 새로운 계정을 생성할 것인지 고려해야 함
          + 웹사이트만 사용할 경우 스마트폰 웹 브라우저에서 알림을 위한 웹 푸시가 필요한지 검토해야 함
          + Mastodon을 Facebook의 대체로 사용하는 것은 불완전한 해결책이 될 수 있음
          + 최소한의 기능 세트를 충족시켜야 50k 사용자가 플랫폼을 거부하지 않을 것임
     * Facebook에서 다른 플랫폼으로 이동하려는 이유를 명확히 해야 함
          + 대부분의 미국인, 특히 시골 지역에서는 CEO가 대통령과 친하다는 이유로 앱을 그만두지 않음
          + Facebook은 특히 30대 이상의 소도시 주민들에게 인기 있는 플랫폼임
     * Facebook에서 대규모 인원을 이동시키는 것은 쉽지 않음
          + IT 마이그레이션 프로젝트와 유사하게 시간이 오래 걸리고 비선형적인 과정임
          + 커뮤니티 조직화와 유사하게 사람들과 직접 대화하는 것이 중요함
          + 자가 호스팅이나 연합화된 플랫폼에 대한 관심은 기술 서클 외에는 적음
          + 사용자 경험이 중요함
     * 대체 플랫폼을 식별하고 초기 사용자 그룹을 찾는 것이 중요함
          + 지역 청소년 그룹이나 스포츠 클럽 등에서 초기 사용자를 찾는 것이 좋음
          + 챔피언을 식별하고 그들과 함께 노력 확장을 위한 도구를 구축해야 함
     * Dateit이라는 앱은 Facebook을 떠나는 친구들을 위해 개발된 이벤트 계획 및 RSVP 앱임
          + 아직 모든 기능이 갖춰지지 않았지만, 커뮤니티와 공개 이벤트 피드 같은 기능을 추가할 계획임
          + 무료 프리미엄 기능을 제공할 수 있음
     * 저비용으로 지역 신문을 인쇄하여 배포하는 방법도 고려할 수 있음
          + 지역 상점에서 무료로 배포하고 광고로 비용을 충당할 수 있음
     * Vermont 기반의 Front Porch Forum은 성공적인 사례로 언급됨
          + 그들의 비법을 공유할지는 알 수 없지만, 문의해볼 수 있음
     * Partiful은 Facebook Events보다 우수한 이벤트 조직 플랫폼으로 사용됨
     * WordPress, Meetup.com, MailChimp, Slack을 사용하여 토론 그룹을 운영하는 방법이 있음
     * Diaspora는 자가 호스팅 가능한 Facebook 대안으로 언급됨
          + Facebook과 달리 가짜 콘텐츠가 없어 다소 지루할 수 있음
     * 포럼 호스팅은 오래된 정보를 잃지 않는 장점이 있음
          + 하지만 시각적으로 매력적이지 않고 무한 스크롤이 없음
     * IRC 채팅은 몇 년간 잘 작동했으며, 기업용 커뮤니케이션 앱으로 이동할 때까지 사용됨
     * Mobilizon은 커뮤니티/이벤트 조직을 위한 Facebook 대안으로 개발됨
"
"https://news.hada.io/topic?id=18878","STARLINK 관리자 패널을 통한 Subaru 차량 해킹 및 제어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 STARLINK 관리자 패널을 통한 Subaru 차량 해킹 및 제어

     * 2024년 11월 20일, Subaru의 STARLINK 연결 차량 서비스에서 미국, 캐나다, 일본 내 차량과 고객 계정에 제한 없는 접근 권한을 얻을 수 있는 취약점이 발견됨
     * 공격자는 피해자의 이름과 우편번호(또는 이메일, 전화번호, 차량 번호판)만 알아도 차량 원격 제어, 과거 1년치 위치 정보 확인, 고객 개인정보(주소, 결제 정보 일부 등) 조회, 그리고 차량 PIN 획득이 가능했음
     * 제보 후 24시간 이내에 해당 취약점이 패치되었으며, 악의적으로 활용된 사례는 없었음

도입부

     * 연구자는 2024년 11월 20일 Subaru STARLINK 서비스의 보안 취약점을 발견하여 전체 차량 원격 제어와 위치 추적이 가능함을 확인함
     * 간단한 고객 정보(이름/우편번호, 이메일, 전화번호, 번호판 등)만으로도 원격시동, 문 열고 잠그기, 정확한 차량 위치 추적 등의 권한을 악용할 수 있었음
     * 문제는 제보 후 빠른 시일 내에 수정되었음

Proof of Concept

     * 번호판만 알면 약 10초 만에 Subaru 차량을 장악해 1년치 위치 기록을 조회하는 시연을 진행했음
     * 실제 2023년형 Subaru Impreza의 1,600개 위치 좌표를 사례로 활용함

취약점 분석

  MySubaru Mobile App 감사(Auditing)

     * 연구자가 처음으로 MySubaru 앱을 역프록시(Burp Suite)로 분석했으나, 앱 자체 보안이 잘 구성되어 있어 직접적인 공격 취약점은 발견하지 못함
     * 공격자를 위한 API 엔드포인트가 많지 않았고, 권한 검증도 엄격하게 이루어졌음

  Subaru Admin Panel 찾기

     * MySubaru 앱이 사용하는 도메인을 분석하던 중 mys.prod.subarucs.com을 발견함
     * 같은 도메인 스캔을 통해 “STARLINK Admin Portal”이라는 내부 관리용 관리자 패널을 발견함
     * Subaru STARLINK가 원격 차량 제어 등을 담당하는 서비스라는 점을 알고 이 패널의 취약점을 집중적으로 탐색함

  Subaru STARLINK Admin Portal에서 임의 계정 탈취

     * 패널 로그인 페이지에서 확인한 JavaScript 파일(login.js)에 resetPassword.json이라는 엔드포인트가 있었음
     * 해당 엔드포인트를 통해 유효한 이메일 주소만 알아내면 별도의 확인 토큰 없이 계정 비밀번호를 재설정할 수 있었음
     * LinkedIn 등으로 Subaru 직원 이메일 형식을 추적하여 실제 직원 이메일을 대입해 계정을 임의로 탈취하는 데 성공함

  2FA 우회

     * 탈취 계정으로 로그인 시 2FA가 설정되어 있었으나, 이는 UI 수준의 기능이었음
     * 클라이언트 측 자바스크립트 코드를 주석 처리해 오버레이를 없애니 2FA를 무력화할 수 있었음
     * 서버 단에서는 2FA 여부를 제대로 검증하지 않아 관리 기능에 접근 가능했음

  1년간 어머니 차량 추적

     * 연구자가 가족 차량(2023 Subaru Impreza)의 실제 위치 기록에 접근해, 지난 1년간 시동을 걸었거나 원격으로 명령을 보낸 시점마다 저장된 좌표를 모두 조회함
     * 약 1,600여 개의 위치 기록이 노출되었고, 정확도가 최대 5m 단위로 세밀했음

  1년치 Subaru 위치 정보 시각화

     * 1년 치 좌표를 모아 지도에 표시해 보니, 매우 구체적인 이동 경로 전체가 드러났음
     * 사용자(연구자 어머니)가 STARLINK 이용 약관에 동의하면서 수집된 정보였지만, 보안 취약점으로 인해 외부인이 임의로 열람할 수 있게 된 위험성이 확인됨

  친구 차량 잠금 해제

     * 또 다른 사용자의 번호판 정보를 입력해 차량을 검색한 뒤, 관리자 패널에서 ‘Authorized User’로 본인 계정을 추가함
     * 이후 원격 문 열기 명령을 실행했고, 실제 차량이 잠금 해제되는 것을 동영상으로 확인함
     * 피해자에게는 계정 추가나 차량 제어 사실에 대한 알림이 오지 않았음

타임라인

     * 2024년 11월 20일 11:54 PM CST: SecOps 이메일로 최초 제보 진행함
     * 2024년 11월 21일 7:40 AM CST: Subaru팀으로부터 첫 응답 수신함
     * 2024년 11월 21일 4:00 PM CST: 취약점 수정 완료 후 재현 불가 상태 확인함
     * 2025년 1월 23일 6:00 AM CST: 블로그 게시글 공개함

추가 내용(Addendum)

     * 보안 전문가 입장에선 비밀번호 재설정과 2FA 우회 같은 취약점 자체는 흔하지만, 자동차 제조사 시스템의 영향 범위와 민감 정보 노출 규모가 매우 큼
     * 자동차 산업 특성상, 한 지역 직원이 해외 차량 정보나 개인 정보를 조회해도 정상 업무로 간주될 수 있어 보안이 어렵게 느껴짐
     * 기본적으로 직원에게 광범위한 권한을 주는 구조이기 때문에, 근본적 보안을 유지하기가 쉽지 않아 보임

   재밌네요
     * 서브도메인 스캐너로 관리자 페이지 찾음
     * 관리자 페이지에서 무차별 대입해서 비밀번호 리셋 api 찾음
     * 관리자 페이지에서 무차별 대입해서 이메일 존재 여부 확인 가능한 api 찾음

   그리고 가장 중요한 2FA 우회가 본문에 안 나왔지만 클라이언트 웹 페이지의

     //$('#securityQuestionModal').modal('show');

   주석 처리로 우회가 됐다는데요 ㅋㅋ 진짜 충격적이네요
   보안은 잘 몰라도 목숨이 걸린 자동차 회사 치고 너무 심하지 않나요

   죄송합니다 지금 보니까 2FA 우회가 본문에도 있었네요. 그래도 코드 한 줄 주석 처리로 우회된 건 너무 충격적이었어요

        Hacker News 의견

     * Subaru, Starlink, 및 관련 파트너들이 차량을 원격으로 추적하고 비활성화할 수 있는 시스템이 있음
          + 이 시스템은 법 집행 기관이 차량을 추적할 수 있도록 함
          + STARLINK 가입 시 이러한 데이터 수집에 동의한 것으로 보임
     * Subaru의 개인 정보 수집 및 사용에 대한 ""알 권리"" 요청 결과
          + Subaru는 다양한 개인 정보를 수집하고 판매할 수 있음
          + 수집된 정보는 서비스 제공, 마케팅, 법적 의무 준수를 위해 사용됨
          + 정보는 서비스 제공자, 계약자, 소매업체 등과 공유됨
     * Subaru의 연결 서비스 개발팀과의 경험
          + 팀 내 친족주의와 조언을 듣지 않는 문화가 존재함
          + 시스템이 작동하는 것 자체가 놀라움
     * Starlink 웹앱의 보안 문제
          + 2단계 인증을 우회할 수 있는 코드가 존재함
          + 해커가 Starlink 직원의 계정을 해킹하여 접근한 것은 윤리적 해킹의 경계를 넘는 것임
     * 인터넷에 연결된 차량의 필요성에 대한 의문
          + 모든 여행 데이터가 기록되고 배포될 수 있음
          + 이에 대한 명확한 동의 절차가 필요함
     * 2013년 Outback 모델과 최신 Subaru 차량 비교
          + 최신 모델의 사용자 인터페이스가 불편하고 성능이 떨어짐
          + 전자식 조향 장치와 터보 지연이 문제임
          + 향후 경쟁력 있는 전기차 또는 하이브리드 모델 필요
     * Subaru 소유자를 위한 정보
          + 미국 내 어디서든 데이터 삭제 요청 가능
          + 약 6개월 소요되며 확인 이메일 발송됨
     * Starlink를 통한 원격 시동 가능성
          + 명령줄을 통해 차량을 원격으로 시동할 수 있는지에 대한 질문
          + Starlink가 원격 시동 시스템보다 저렴할 수 있음
     * 차량이 항상 온라인 상태인 컴퓨터와 같다는 점
          + 소프트웨어가 사용자 제어 없이 작동하며 보안 취약점이 존재함
     * 원격 '정지' 기능이 주행 중인 차량을 멈출 수 있는지에 대한 우려
          + 기본적인 취약점을 통해 도로 위의 모든 차량을 멈출 수 있는 가능성에 대한 걱정
"
"https://news.hada.io/topic?id=18900","Vim의 현황im의 현황

     * 2023년 VIM의 창시자이자 BDFL(자비로운 종신독재자)이었던 Bram Moolenaar의 사망으로 Vim 커뮤니티에 충격이 있었음
     * 2024년 11월 VimConf에서 유지 보수자인 Christian Brabandt가 새롭게 조직된 Vim 프로젝트와 미래에 대해 발표했음

Vim after Bram

     * Bram Moolenaar가 30년 넘게 Vim을 주도했으나, 사망 후 지식과 관리 권한 일부가 사라질 위험이 있었음
     * GitHub 조직 소유권 문제로 계정 설정을 변경하기 어려웠으나, 가족이 계정을 넘겨주어 긴급 상황을 해결했음
     * Charles Campbell(Dr Chip) 등 일부 핵심 기여자 은퇴 후에, Ken Takata와 Yegappan Lakshmanan, Dominique Pellé, Doug Kearns 등 더 많은 유지 보수자가 합류했음

More than just the source code

     * Vim의 핵심은 단순히 소스 코드만이 아님
     * 웹사이트, FTP 서버, 보안 공지, Reddit/Stack Exchange 등 다양한 커뮤니티 채널도 관리 범주에 포함됨
     * 오래된 PHP 5 기반 웹사이트 코드를 PHP 8로 옮기는 작업을 진행했고, Mark Schöchlin이 크게 기여했음
     * 디자인 측면이 오래되어 신입 사용자에게 낯설 수 있으나, 기존 사용자 혼란을 줄이는 방향을 고려 중임
     * vim.org 도메인 관리와 여러 추가 도메인(vim8.org, vim9.org 등)을 조정했고, FTP 서버는 NLUUG 호스팅을 종료했음

ICCF Holland

     * Vim은 charityware 형태이며, Bram Moolenaar가 세운 ICCF Holland를 후원함
     * Bram의 사망 이후 기부가 늘어 2023년에 약 9만 유로 모금됨
     * 기부금은 전부 ICCF로 전달되고, 개발자나 유지 보수자 개인 후원은 고려하지 않고 있음
     * 과거에는 기부자들이 Vim.org 계정을 연결해 기능 투표권을 얻었으나, GitHub 이슈에서 논의가 이루어지는 현 시점에는 더 이상 이 제도가 필요 없다고 판단했음

Communication channels

     * Vim 개발자 메일링 리스트가 Google Groups에서 스팸/멀웨어로 인해 일시적으로 차단되어 곤란을 겪었음
     * Reddit, Stack Exchange 등에서 Vim 커뮤니티 활동이 활발해지고 있으며, 메일링 리스트는 예전보다 덜 사용됨
     * 보안 이슈는 GitHub에서 취약점 공개와 이메일 보고를 받으며, Huntr 플랫폼은 인수 후 AI 중심으로 전환해 일반 오픈소스 보고 기능이 중단된 상태임
     * GitHub Security Advisory와 oss-security 메일링 리스트 등을 통해 보안 패치를 발표하고 있음

Maintenance mode

     * Bram 사망 후에도 Vim 프로젝트는 중단되지 않았고, 2024년 1월 2일에 버전 9.1을 릴리스했음
     * 9.1에는 virtual text 개선, 부드러운 스크롤링, OpenVMS 지원 등이 추가됨
     * XDG base directory, Wayland 지원 등을 추가하면서 기존 사용자 호환성 유지에도 주의하고 있음
     * CI 환경에서 테스트를 강화하고, 문서 품질에도 신경 쓰고 있음
     * Python 2, Tcl, MzScheme 등 구형 인터페이스 제거 가능성을 검토 중이며, GUI 기능(예: GTK 4) 개선과 spell checking 향상이 과제로 남아 있음
     * Vim9 script 활용 확대와 사용자 요구 조율이 향후 과제임
     * Brabandt는 단독 결정권자(BDFL)가 아님을 강조하고, 다른 유지 보수자들과 협력해가며 변경 사항을 머지하고 있음

Questions

     * Neovim과 달리 Vim은 여전히 브랜치당 버전 번호 충돌 문제로 대부분 Brabandt가 머지를 진행함
     * Vim은 국제 프로젝트이므로 주로 영어를 사용하며, ChatGPT 등 번역 도구를 활용하기도 함
     * 비영어권 사용자와의 소통이 과제임

The rest of VimConf 2024

     * VimConf는 일본 vim-jp 그룹이 2013년부터 개최해온 행사임
     * 2020년 COVID로 취소된 후, 2023년에 축소판으로 재개했고, 2024년 11월 23일 도쿄 아키하바라에서 정규 규모로 진행됐음
     * 주로 일본인이 참석하지만, 발표 자료는 영어이며, 주요 세션에는 일본어-영어 동시 통역이 제공됨
     * 모든 세션 자료는 VimConf 웹사이트와 YouTube에 공개되어 있음

   아..돌아가신줄은 몰랐네요. 고인의 명복을 빕니다.

   개발자가 사망하셨구나... 잘쓰고 있습니당.. 그곳에서 편히 잠드시길

        Hacker News 의견

     * VIM은 새로운 리더십 아래에서도 잘 운영되고 있으며, 다른 BDFL 프로젝트들이 VIM의 경험을 통해 후계자를 미리 준비할 수 있을 것이라는 의견이 있음
          + BDFL(Benevolent Dictator For Life)는 오픈 소스 프로젝트에서 장기적인 리더십을 가진 사람을 의미함
     * Vim9 스크립트가 더 널리 사용되기 위해서는 사용자와 플러그인 작성자에게 다음을 알리는 것이 중요함
          + Vim9 스크립트는 이전 Vimscript보다 훨씬 우수하며 사용하기에 불편하지 않음
          + 일반적인 Lua보다 텍스트 편집기 코드를 작성하는 데 더 적합함
     * 많은 Vim 사용자들이 Neovim으로 전환했으며, 원격 서버에서 기본 설치를 사용할 때만 기존 Vim을 사용함
     * Bram의 VIM에서의 업적과 도움이 필요한 아이들을 위한 그의 기여는 그리울 것이며, 이러한 선순환을 더 많이 만들 필요가 있음
     * C/C++ 개발을 위한 vim + ALE + Gutentags 설정은 잘 작동했지만 웹 개발에 들어가면서 Neovim 배포판으로 전환했음
          + Neovim이 기술적으로 우수해서가 아니라 커뮤니티가 만든 배포판 덕분에 전환했음
          + LSP/treesitter 통합이 배포판 생성에 기여했을 가능성 있음
     * Vim과 Emacs가 얼마나 오래 활기를 유지할 수 있을지 궁금하며, 새로운 세대는 VSCode와 같은 도구에 더 익숙해질 가능성이 높음
          + 50년 후에도 Emacs와 Vim 사용자는 남아있겠지만, 사용자 수와 커뮤니티의 힘은 줄어들 것임
     * Emacs 사용자는 여전히 편집기를 자신의 필요에 맞게 조정할 수 있는 플랫폼으로 보고 있음
     * XDG 기본 디렉토리 사양 지원과 같은 잠재적으로 논란이 될 수 있는 변경 사항을 추가하기 시작했음
          + 모든 사용자 대상 오픈 소스 프로젝트는 언젠가 XDG 관련 논란을 겪게 될 것이라는 의견이 있음
     * NeoVim을 사용하게 되어 기쁘지만, 업데이트마다 문제가 발생하여 해결해야 하는 상황이 반복됨
          + NeoVim과 인기 있는 플러그인의 업데이트가 문제를 일으키며, 온라인 답변도 여러 문서 페이지를 가리킴
          + 설정 후에도 ""그냥 작동하는"" IDE를 선호함

   저도 nvim만 사용 중이지만, 리눅스가 완전히 설치 되지 않은 상황애서는 vim을 쓸 수 밖에 없더군요.
"
"https://news.hada.io/topic?id=18794","Television - 빠르고 다재다능한 퍼지 검색 TUI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Television - 빠르고 다재다능한 퍼지 검색 TUI

     * 다양한 데이터 소스(파일, Git 저장소, 환경 변수, Docker 이미지 등)를 퍼지 매칭 알고리즘으로 빠르게 검색할 수 있는 텍스트 기반 사용자 인터페이스(TUI) 도구
     * 확장성을 염두에 두고 설계되었으며, 간단한 설정으로 다양한 데이터 소스를 추가 가능함
     * ""Neovim의 Telescope 플러그인""과 ""Helix 편집기의 Nucleo 매처""에서 영감을 받았으며, ""Tokio""를 활용해 최적의 성능을 제공함

주요 기능

     * 고속: 비동기 I/O와 멀티스레딩을 활용해 매끄럽고 반응성 높은 UI 제공
     * 퍼지 매칭: 최첨단 퍼지 매칭 라이브러리를 사용해 항목 리스트를 효율적으로 필터링 가능
     * 기본 포함된 기능들: 기본 제공 채널과 미리보기를 즉시 사용 가능
     * 쉘 통합: 쉘 통합을 통해 스마트 자동 완성 기능 활용 가능
     * 채널: 파일, Git 저장소, 환경 변수 등 여러 데이터 소스를 검색할 수 있는 기본 제공 채널 개념 중심으로 설계
     * 사용자 정의 채널: 중앙화된 설정 파일을 사용하여 사용자만의 채널을 쉽게 추가 가능
     * 미리보기 기능: 별도 창에서 항목 내용을 미리볼 수 있음
     * 구문 강조 내장: 다양한 파일 형식에 대해 비동기 구문 강조 기능 제공
     * 키 바인딩: Vim 및 기타 인기 있는 터미널 단축키에서 영감을 받은 직관적인 기본 키 바인딩 포함
     * 테마: 10개의 기본 테마 제공 또는 사용자가 손쉽게 커스텀 테마 생성 가능
     * 크로스 플랫폼: Linux, MacOS, Windows에서 모두 동작
     * 터미널 호환성: 주요 터미널 에뮬레이터에서 완벽히 작동
"
"https://news.hada.io/topic?id=18789","Tuono - Rust 기반 풀스택 React 웹 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Tuono - Rust 기반 풀스택 React 웹 프레임워크

     * Rust를 백엔드로 사용해 React 애플리케이션을 구축하는 풀스택 웹 프레임워크로, ""사용성""과 ""성능""에 중점을 둠
     * Next.js 경험이 있다면 쉽게 적응 가능함

주요 기능

     * Native Typescript
     * Next.js와 유사한 라우팅
     * CSS/SCSS 모듈 지원
     * 서버 사이드 렌더링(SSR)
     * 핫 모듈 리로드(HMR)

Tuono의 특징

     * Node.js, Deno, Bun 없이 Rust의 멀티스레딩 서버로 높은 성능 제공
     * 쉬운 서버-클라이언트 통합: React 코드와 서버 사이드 코드를 동일한 프로젝트에서 관리
     * Next.js와의 차이점:
          + Next.js는 Node.js/Deno/Bun과 같은 런타임에 의존
          + Tuono는 Rust로 빌드된 독립형 서버 사용으로 성능 향상

   Rust 백엔드 + React 프론트엔드를 모노레포에서 사용할 수 있는 프레임워크군요

     If you have experience with Next.js you will feel home here.

     쉬운 서버-클라이언트 통합: React 코드와 서버 사이드 코드를 동일한 프로젝트에서 관리

   Next.js에선 서버-클라이언트 간 사용 패턴이나 실행환경이 다르더라도 최소한 언어라도 통용된다는 특징이라도 있었는데 이 프로젝트에선 그 장점마저 퇴색시켜버리고 통신 규약을 모호하게 만든 것 처럼 보입니다. 서버 라우트와 서버 컴포넌트 간 자료형 정의도 수동으로 맞춰야 하는 것으로 보이구요. 아무리 봐도 도입이 쉽지 않을 것 같고 과도기적인 기술로 보여요

   말은 그럴싸하게 하는데…
   결국 v8 쓰는거구만…
   https://github.com/Valerioageno/ssr-rs
"
"https://news.hada.io/topic?id=18912","PhysicsForums와 죽은 인터넷 이론","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PhysicsForums와 죽은 인터넷 이론

인터넷의 미래 모습

     * PhysicsForums는 2001년에 설립된 과학 포럼으로, 학생들에게 물리학 숙제에 대한 힌트를 제공하는 데 중점을 두었음.
     * 2012년까지 꾸준히 성장했으나, 이후 StackExchange와 같은 중앙 집중형 사이트로 인해 쇠퇴함.
     * 2025년까지 URL을 변경하지 않고 게시물을 삭제하지 않아 과거 인터넷의 모습을 엿볼 수 있는 타임 캡슐 역할을 하고 있음.

Ravenprp의 이야기

     * Ravenprp는 2006년부터 2007년까지 7개월 동안 2,891개의 게시물을 작성한 사용자로, 다양한 분야에 대한 지식을 가진 것으로 묘사됨.
     * 그러나 실제로는 74개의 게시물만 작성했으며, 나머지 게시물은 나중에 추가된 것으로 보임.

인터넷은 영원함

     * PhysicsForums는 MathHelpBoards와 합병하여 15만 개의 게시물을 통합했으며, 이 과정에서 데이터베이스가 수정됨.
     * 2023년과 2024년에 걸쳐 LLM(대규모 언어 모델)에 의해 작성된 115,000개의 게시물이 추가됨.

죽은 인터넷 이론

     * '죽은 인터넷 이론'은 인터넷의 많은 부분이 인간이 아닌 것들로 구성되어 있다는 이론임.
     * LLM의 등장으로 인해 인터넷의 콘텐츠가 인간의 기여보다 기계에 의해 생성된 것이 많아지고 있음.

인간 대 기계

     * PhysicsForums 커뮤니티는 ChatGPT와 같은 AI 생성 콘텐츠에 대해 우려를 표명함.
     * AI가 생성한 콘텐츠가 사이트의 품질 기준을 충족하지 못해 실험이 실패로 끝남.

인터넷은 사람임

     * Greg Bernhardt는 AI 기능에 대한 커뮤니티의 피드백을 바탕으로 개선하거나 제거할 계획임.
     * 기존 사용자 계정에 LLM 생성 콘텐츠를 추가하는 것은 사용자의 정체성을 희석시키고, 인터넷의 역사적 기록을 왜곡함.

   이 글은 PhysicsForums의 변화와 인터넷의 진화에 대한 논의를 다루고 있으며, AI가 인터넷 콘텐츠에 미치는 영향을 탐구함.

        Hacker News 의견

     * LLM 생성 콘텐츠에 대한 부정적 인식 증가: 많은 사람들이 AI 생성 콘텐츠를 원하지 않음. 블로그나 포럼에서는 인간의 글을 보고 싶어함. AI 생성 콘텐츠를 피하기 위해 많은 시간과 에너지를 소비하고 있음. 구글에 '생성 콘텐츠 제거' 필터가 있다면 사용하고 싶음. 연구에 따르면 AI 생성 콘텐츠를 인식하면 즉시 싫어하는 경향이 있음. 이는 출판사들이 AI 작성 콘텐츠를 인간이 작성한 것처럼 보이게 하는 '인간 세탁'을 하도록 유도함.
     * 전통적 포럼과 블로그의 쇠퇴: 2012년 이후 전통적 포럼과 블로그의 성장이 둔화됨. 구글은 주요 사이트가 아닌 경우 품질에 상관없이 순위를 낮추기 시작함. 그러나 일부 포럼은 URL을 변경하지 않고 오래된 게시물을 삭제하지 않으며 계속 유지됨.
     * PhysicsForums의 변화: PhysicsForums는 과거에 자주 사용되던 사이트였으나, 소셜 미디어의 부상으로 인해 방문이 줄어듦. 여전히 아카이브는 유용하지만, 트위터에서 링크가 공유되지 않는다고 해서 아무도 관심이 없다는 것은 아님.
     * 포럼과 중앙화된 사이트의 차이: 미국과 유럽 사람들은 다양한 틈새 포럼을 좋아하는 반면, 중국 사람들은 중앙화된 사이트를 선호함. Zhihu는 Quora의 클론이었지만, 현재는 다양한 주제에 대한 깊은 토론을 위한 가장 큰 사이트가 됨. 반면 Quora의 품질은 시간이 지남에 따라 저하됨.
     * AI 생성 댓글의 문제: 사이트 소유자가 백데이트된 AI 댓글을 추가한 것을 인정함. AI가 이력서를 보내고 읽고 거절하는 '죽은 경제' 이론이 존재함. 인간과의 상호작용이 중요한데, AI 생성 콘텐츠가 이를 방해함.
     * 온라인 커뮤니티의 사회적 계약: 온라인 커뮤니티에 계정을 만들 때, 주로 사람들과 상호작용할 것이라는 기대가 있음. 그러나 AI 생성 사용자와의 상호작용은 인간 상호작용의 가치를 잃게 만듦.
     * 포럼 운영의 어려움: 포럼이나 블로그에서 사용자가 활동하지 않으면, 운영자는 스스로 주제를 만들고 답변을 작성하게 됨. 이는 때로는 스팸 광고와 같은 문제를 초래함.
     * 신뢰와 속성 문제: 웹에서 신뢰와 속성 문제는 항상 존재했지만, 현재는 더 심각해짐. 해결책이 필요함.
     * 개인 정보 보호와 법적 문제: 자신의 이름이나 핸들을 보호하기 위해 상표를 등록해야 할 필요성이 제기됨. PKI를 사용하여 게시물을 서명하고 검증하는 방법도 고려됨.
"
"https://news.hada.io/topic?id=18802","LinkedIn은 새로운 HR - 회사 프로세스에 지친 사람들이 소셜미디어에 끔찍한 상사를 신고중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         LinkedIn은 새로운 HR - 회사 프로세스에 지친 사람들이 소셜미디어에 끔찍한 상사를 신고중

     * 호주의 가족법 변호사였던 스테파니 코스티는 나쁜 직장 문화를 경험함
          + 상사가 스트레스 속에서 서류를 던지는 등 폭력적인 행동을 보임
          + 동료들도 장시간 근무와 불합리한 대우로 인해 공황 발작을 겪었다고 말함
     * 인사부에 보고했으나 효과적인 조치가 이루어지지 않아 회사를 떠남
     * 이후 LinkedIn에 자신의 직장 내 괴롭힘 경험을 공유한 게시글은 폭발적인 반응을 얻었음
          + ""한때 밝은 젊은 변호사가 있었지만, 직장에서 괴롭힘을 당했고, 자신감을 잃었다""는 글이 120만 회 이상의 조회수와 10,000개의 좋아요를 기록
          + 많은 사람들이 자신의 유사한 경험을 댓글로 공유
     * LinkedIn을 통해 독자들과 소통하며, “유독성 회사(직장)” 문제를 다루는 새로운 형태의 인플루언서 활동을 전개함
          + 현재는 8만명의 팔로워를 보유
          + 백보드에 메시지를 써서 사진으로 함께 올리는 방식을 자주 사용하며 보스와 HR 시스템에 대한 비판적 조언을 함
               o ""Toxic한 상사는 당신을 돕는 것이 아니라 통제하기 위해 성과 개선 계획(PIP)을 사용할 것이다""
               o ""기대에 부응하면 칭찬을 쏟아내지만 인정은 보류""
               o ""실패에 대한 두려움을 악용하여 합리적인 한계를 넘어서도록 밀어붙인다""
          + 그녀는 자신의 링크드인 타이틀을 “The Anti-Bullying Lawyer”로 변경

LinkedIn의 새로운 흐름: 직장 내 독성 문제를 조명하는 인플루언서들

     * 팬데믹 이후 회사 충성도의 감소와 고용주-직원 간 긴장이 증가하는 가운데, LinkedIn은 개인적이고 대립적인 플랫폼으로 변화
          + 일부 사용자에게는 데이팅 사이트, 또 다른 사용자에게는 코미디 클럽처럼 보이기도 함
          + 새로운 유형의 인플루언서가 등장
               o 생산성을 높이거나 직장에서 성공하는 방법 대신, 직장의 어두운 면을 조명
               o 독성 직장 문제를 다루는 게시물을 통해 주목받음
     * 독성 직장을 다루는 LinkedIn 커뮤니티의 등장
          + 새로운 인플루언서와 팔로워들은 독성 직장을 식별하고 대처하며 벗어나는 방법을 공유
               o ""끔찍한 상사"" 이야기를 다루는 게시물이 증가
               o HR을 회사 정책을 강화하는 도구로 보고 신뢰하지 않는 경향
               o 코스티는 ""독성 직장에서 HR은 인간적이지도 않고 자원도 아니다""라는 글을 작성
          + 공감대를 형성하는 LinkedIn 커뮤니티가 건강한 직장을 위한 대안으로 주목받음
               o 직원들이 경험을 공유하며 위로와 조언을 나눔
     * HR 전문가들은 LinkedIn에서 문제를 공론화하는 것이 오히려 역효과를 낼 수 있다고 경고
          + 공식적인 보고 절차를 우회하면 문제를 더 복잡하게 만들 위험이 있음
     * 직장 독성 문제는 생산성과 직원의 정신 건강에 큰 피해를 줌
          + 2023년 조사에서 직원 22%가 정신적 피해를 경험했다고 응답
          + 2024년 조사에 따르면 응답자의 59%는 직장의 정신 건강 상태가 실제보다 낫다고 생각한다고 보고
          + HR Brain 보고서에 따르면, 37%의 직원이 매일 독성 직장을 경험하며, 32%는 상사를 주요 스트레스 요인으로 꼽음
     * 원격 및 하이브리드 근무가 전통적인 업무 경계를 흐리게 하며 독성 행동이 더 쉽게 감춰질 수 있음
          + 이메일과 메시징이 대면 대화를 대체하며 문제가 더 심각해질 가능성 존재
     * 직장 독성 문제는 다양한 형태로 나타남
          + 코스티는 독성 직장 경험자들과 연결하여 그들의 이야기를 들음

독성 직장에서의 개인적인 경험: Beverly의 이야기

     * 호주 법률 회사에서 일하던 Beverly(가명)는 직장에서의 성장과 승진에 대한 조언을 구하기 위해 고위 파트너를 찾음
          + 해당 파트너는 Beverly를 사무실로 불러 문을 닫게 한 후, 그녀가 자신의 업무 분야에서 성공할 수 없을 것이라며 설득
          + 강압적으로 사건의 그래픽 영상(감옥 내 집단 강간 장면 포함)을 보게 하며 겁을 줌
          + 이후, 자신의 행동을 누설하면 명예훼손으로 고소하겠다고 위협하며 직장에서의 생활을 어렵게 만들겠다고 경고
     * Beverly는 지속적인 괴롭힘과 위협을 피하기 위해 회사를 떠남
          + 해당 파트너가 직장을 넘어 개인 생활까지 괴롭힐 것이라는 우려가 있었음
     * 퇴사 후 자신의 경험을 점차적으로 공유하기 시작
          + 코스티의 LinkedIn 게시물에 종종 댓글을 달며 독성 직장에서의 경험을 나눔

Helen Pamely: LinkedIn에서 독성 직장 문화를 다루는 목소리

     * 스페인 변호사 Helen Pamely는 LinkedIn을 활용해 독성 직장 문화에 대한 이야기를 공유하고 도움을 제공
          + ""사람들은 회사를 떠나는 것이 아니라 상사를 떠나는 것이다""라는 게시물로 주목받음
          + 현재 30,000명 이상의 팔로워를 보유하며, 법률 경력에서 배운 교훈을 자주 공유
     * Pamely는 법률 업계의 LinkedIn 커뮤니티가 ""진정한 전환점""을 이루고 있다고 평가
          + 그녀는 특정 회사와의 관계에서 벗어나 자유롭게 문화적, 시스템적 문제를 다룰 수 있음
     * 많은 메시지와 피드백을 통해 다른 이들에게 목소리를 내준 것에 대해 감사를 받음
          + ""진정한 긍정적 변화는 정직하고 열린 대화를 통해 이루어질 수 있다""
          + 사람들에게 그들이 혼자가 아니라는 점을 알리는 것이 중요함

LinkedIn에서 독성 직장 문제를 논의하는 이유와 조언

     * 코스티는 사람들이 HR 대신 LinkedIn을 선택하는 이유를 다음과 같이 설명
          + ""HR은 종종 직원 지원보다는 회사의 이익 보호에 더 중점을 둔다""
          + 독성 행동을 보고하면 '문제아'로 낙인찍히고 직업적 위험에 처할 수 있음
          + 많은 독성적인 상사들이 책임을 져야 할 시스템에 의해 보호받고 있다는 현실 존재
     * 코스티는 독성 행동에 대처하는 가장 효과적인 방법으로 다음을 권장
          + 모든 사건, 대화, 이메일을 꼼꼼히 기록
          + 이는 자신을 보호하는 것뿐만 아니라 회사가 무시할 수 없는 명확한 사례를 만드는 데 중요
          + HR이 행동하지 않을 경우, 법적 경로나 새로운 직장을 찾는 데 이 증거를 활용
     * LinkedIn은 공감대를 형성하고 문제를 논의할 수 있는 좋은 플랫폼
          + 그러나 구체적인 이름이나 직장 정보를 포함하지 않도록 주의 필요
     * 일부 전문가들은 LinkedIn이 문제를 해결하기에 적절한 장소가 아니라고 주장
          + 갈빈: ""공개적으로 불만을 제기하면 팀 내 존중이 약화되고 부정적인 업무 환경이 조성될 수 있다""
          + 리더들은 열린 소통과 내부 채널을 통해 문제를 해결하도록 지도하는 데 중요한 역할을 해야 함
          + 정기적인 체크인, 멘토십 프로그램, 갈등 해결 전략 등이 소셜 미디어로 문제를 확대하는 것을 방지할 수 있음

전문가 의견: LinkedIn의 한계, HR, 그리고 법적 조치의 균형

     * 팀 글로와 (HR Brain 창립자 겸 CEO):
          + ""온라인에서 불만을 표출하기보다 보고 절차를 따르는 것이 더 적절하며, 이를 통해 기밀 유지와 전문적 평판 보호가 가능""
          + ""온라인에 올린 내용은 영구적으로 당신을 따라다닐 수 있다""는 점을 강조
     * 니콜 브레네키 (뉴욕 고용 변호사): LinkedIn에서 경험을 공유하는 것은 구체적인 회사명을 언급하지 않는 경우에만 허용 가능
          + ""특정 회사에 대한 사실적 진술은 향후 법적 분쟁에서 불리하게 작용할 수 있음""
     * HR에 문제를 보고하는 것이 바람직한 이유:
          + 직장 내 괴롭힘, 차별, 기타 부당 행동을 겪을 경우 HR은 주법에 따라 문제를 처리할 의무가 있음
          + HR에 보고하지 않으면 회사가 차별이나 보복을 방관한 것으로 법적 책임을 질 수 있음
          + HR이 제대로 기능하지 않을 경우, 고용법 위반(특히 고의적 위반)은 회사의 책임으로 간주됨
     * 직장 독성 문제는 HR, 법적 절차, LinkedIn만으로 해결될 수 없음
     * 조셉 그레니 (VitalSmarts 공동 창립자, Crucial Conversations 저자):
          + ""기술이 관계 문제를 해결하기 위한 취약성을 회피하는 더 쉬운 방법을 제공""
          + 대면 대화의 능력이 약화되어 외로움과 소외감을 증가시키는 현상을 초래
          + 문제 해결은 동료와의 직접적이고 솔직한 대화를 통해 이루어질 수 있음

  효과적인 소통의 중요성

     * 상대방이 심리적으로 안전하다고 느끼는 것이 대화의 성공을 결정
          + 상대방이 자신의 의도가 해를 끼치는 것으로 인식하면 방어적 태도를 취할 가능성 증가
          + 상대방의 관심과 우려를 존중하는 태도를 보이면 방어적 태도가 줄어듦

  코스티의 활동과 사명

     * 독성 문제의 만연함과 HR에 대한 신뢰 부족을 강조
          + 사람들이 문제를 보고하거나 스스로 대처하는 데 안전함을 느끼지 못함
     * 2024년 7월, The Rising Heard라는 스타트업 설립
          + 독성 직장을 경험한 사람들에게 법률 자문, 코칭, 교육 제공
          + 자신의 게시물을 통해 사람들에게 계속적인 인식을 높이고 지원을 제공할 계획

  코스티의 신념

     * 문제를 부인하는 사람들로부터 비판과 트롤링을 겪음에도 불구하고 활동 지속
          + ""옳은 일을 위해 나서는 것은 위험할 수 있지만, 부당함 앞에서 침묵하는 것은 훨씬 더 큰 손실""
"
